b'<div align="center">\n    <img src="media/logo.svg" width="150" height="150">\n    <h1>eslint-plugin-html</h1>\n    <a href="https://www.npmjs.com/package/eslint-plugin-html"><img alt="NPM version" src="https://img.shields.io/npm/v/eslint-plugin-html.svg"></a>\n    <a href="https://travis-ci.org/BenoitZugmeyer/eslint-plugin-html"><img alt="Build Status" src="https://travis-ci.org/BenoitZugmeyer/eslint-plugin-html.svg?branch=master"></a>\n    <p>A <a href="http://eslint.org">ESLint</a> plugin to lint and fix inline scripts contained in HTML files.</p>\n</div>\n\n* [Usage](#usage)\n* [Multiple scripts tags in a HTML file](#multiple-scripts-tags-in-a-html-file)\n* [XML Support](#xml-support)\n* [Settings](#settings)\n  * [`html/html-extensions`](#htmlhtml-extensions)\n  * [`html/xml-extensions`](#htmlxml-extensions)\n  * [`html/indent`](#htmlindent)\n  * [`html/report-bad-indent`](#htmlreport-bad-indent)\n  * [`html/javascript-mime-types`](#htmljavascript-mime-types)\n* [Troubleshooting](#troubleshooting)\n  * [No file linted when running `eslint` on a directory](#no-file-linted-when-running-eslint-on-a-directory)\n  * [Linting templates (or PHP)](#linting-templates-or-php)\n  * [Linting Vue files](#linting-vue-files)\n* [Migration from older versions](#migration-from-older-versions)\n* [Credits](#credits)\n\n## Usage\n\nSimply install via `npm install --save-dev eslint-plugin-html` and add the plugin to your ESLint\nconfiguration. See\n[ESLint documentation](http://eslint.org/docs/user-guide/configuring#configuring-plugins).\n\nExample:\n\n```javascript\n{\n    "plugins": [\n        "html"\n    ]\n}\n```\n\n## Multiple scripts tags in a HTML file\n\nWhen linting a HTML with multiple script tags, this plugin tries to emulate the browser behavior by\nsharing the global scope between scripts by default. This behavior doesn\'t apply to "module"\nscripts (ie: `<script type="module">` and most transpiled code), where [each script tag gets its own\ntop-level scope](http://exploringjs.com/es6/ch_modules.html#_modules).\n\nESLint has already [an\noption](https://eslint.org/docs/user-guide/configuring#specifying-parser-options) to tell the parser\nif the script are modules. `eslint-plugin-html` will use this option as well to know if the scopes\nshould be shared (the default) or not. To change this, just set it in your ESLint configuration:\n\n```\n{\n  "parserOptions": {\n    "sourceType": "module"\n  }\n}\n```\n\nTo illustrate this behavior, consider this HTML extract:\n\n```html\n<script>\n  var foo = 1;\n</script>\n\n<script>\n  alert(foo);\n</script>\n```\n\nThis is perfectly valid by default, and the ESLint rules `no-unused-vars` and `no-undef` shouldn\'t\ncomplain. But if those scripts are considerated as ES modules, `no-unused-vars` should report an\nerror in the first script, and `no-undef` should report an error in the second script.\n\n### History\n\nIn `eslint-plugin-html` v1 and v2, script code were concatenated and linted in a single pass, so\nthe scope were always shared. This caused [some issues](MIGRATION_TO_V3.md), so in v3 all scripts\nwere linted separately, and scopes were never shared. In v4, the plugin still lint scripts\nseparately, but makes sure global variables are declared and used correctly in the non-module case.\n\n## XML support\n\nThis plugin parses HTML and XML markup slightly differently, mainly when considering `CDATA`\nsections:\n\n- in XML, any data inside a `CDATA` section will be considered as raw text (not XML) and the `CDATA`\n  delimiter will be droped ;\n- in HTML, there is no such thing for `<script>` tags: the `CDATA` delimiter is considered as normal\n  text and thus, part of the script.\n\n## Settings\n\n> Note: all settings can be written either as `"html/key": value` or in a nested object `"html": { "key": value }`\n\n### `html/html-extensions`\n\nBy default, this plugin will only consider files ending with those extensions as HTML: `.erb`,\n`.handlebars`, `.hbs`, `.htm`, `.html`, `.mustache`, `.nunjucks`, `.php`, `.tag`, `.twig`, `.we`.\nYou can set your own list of HTML extensions by using this setting. Example:\n\n```javascript\n{\n    "plugins": [ "html" ],\n    "settings": {\n        "html/html-extensions": [".html", ".we"],  // consider .html and .we files as HTML\n    }\n}\n```\n\n### `html/xml-extensions`\n\nBy default, this plugin will only consider files ending with those extensions as XML: `.xhtml`,\n`.xml`. You can set your own list of XML extensions by using this setting. Example:\n\n```javascript\n{\n    "plugins": [ "html" ],\n    "settings": {\n        "html/xml-extensions": [".html"],  // consider .html files as XML\n    }\n}\n```\n\n### `html/indent`\n\nBy default, the code between `<script>` tags is dedented according to the first non-empty line. The\nsetting `html/indent` allows to ensure that every script tags follow an uniform indentation. Like\nthe `indent` rule, you can pass a number of spaces, or `"tab"` to indent with one tab. Prefix this\nvalue with a `+` to be relative to the `<script>` tag indentation. Example:\n\n```javascript\n{\n    "plugins": [ "html" ],\n    "settings": {\n        "html/indent": "0",   // code should start at the beginning of the line (no initial indentation).\n        "html/indent": "+2",  // indentation is the <script> indentation plus two spaces.\n        "html/indent": "tab", // indentation is one tab at the beginning of the line.\n    }\n}\n```\n\n### `html/report-bad-indent`\n\nBy default, this plugin won\'t warn if it encounters a problematic indentation (ex: a line is under\nindented). If you want to make sure the indentation is correct, use the `html/report-bad-indent` in\nconjunction with the `indent` rule. Pass `"warn"` or `1` to display warnings, `"error"` or `2` to\ndisplay errors. Example:\n\n```javascript\n{\n    "plugins": [ "html" ],\n    "settings": {\n        "html/report-bad-indent": "error",\n    }\n}\n```\n\n### `html/javascript-mime-types`\n\nBy default, the code between `<script>` tags is considered as JavaScript code only if there is no\n`type` attribute or if its value matches the pattern\n`(application|text)/(x-)?(javascript|babel|ecmascript-6)` or `module` (case insensitive). You can\ncustomize the types that should be considered as JavaScript by providing one or multiple MIME types.\nIf a MIME type starts with a `/`, it will be considered as a regular expression. Example:\n\n```javascript\n{\n    "plugins": [ "html" ],\n    "settings": {\n        "html/javascript-mime-types": ["text/javascript", "text/jsx"],  // also use script tags with a "text/jsx" type attribute\n        "html/javascript-mime-types": "/^text\\\\/(javascript|jsx)$/",    // same thing\n    }\n}\n```\n\n## Troubleshooting\n\n### No file linted when running `eslint` on a directory\n\nBy default, when executing the `eslint` command on a directory, only `.js` files will be linted. You\nwill have to specify extra extensions with the `--ext` option. Example: `eslint --ext .html,.js src`\nwill lint both `.html` and `.js` files in the `src` directory. See [ESLint\ndocumentation](http://eslint.org/docs/user-guide/command-line-interface#ext).\n\n\n### Linting templates (or PHP)\n\n`eslint-plugin-html` won\'t evaluate or remove your template markup. If you have template markup in\nyour script tags, the resulting script may not be valid JavaScript, so `ESLint` will fail to parse\nit.\n\nOne possible hacky workaround to make sure the code is valid JavaScript is to put your template\nmarkup inside a comment. When the template is rendered, the generated JS code must start with a new\nline, so it will be written below the comment. PHP example:\n\n```html\n<script>\n  var mydata;\n  // <?= "\\n mydata = " . json_encode($var) . ";" ?>\n  console.log(mydata);\n</script>\n```\n\n### Linting VUE files\n\nInitially, [`eslint-plugin-vue`](https://github.com/vuejs/eslint-plugin-vue) was using\n`eslint-plugin-html` to lint code inside script tags. Since v3, `eslint-plugin-vue` is using its\nown parser, so it is _incompatible_ with `eslint-plugin-html`. You should use `eslint-plugin-vue`\nexclusively and remove `eslint-plugin-html` from your dependencies if you still have it.\n\n## Migration from older versions\n\n### To v4\n\n`eslint-plugin-html` v4 requires at least ESLint v4.7. This is because a lot of internal changes\noccured in ESLint v4.7, including a [new API to support autofixing in\npreprocessors](https://eslint.org/docs/developer-guide/working-with-plugins#processors-in-plugins).\nIf you are still using an older version of ESLint, please consider upgrading, or keep using\n`eslint-plugin-html` v3.\n\nThe big feature (and breaking change) in `eslint-plugin-html` v4 is the ability to chose how [scopes\nare shared between script tags in the same HTML file](#multiple-scripts-tags-in-a-html-file).\n\n### To v3\n\nIf you are considering upgrading to v3, please read [this guide](MIGRATION_TO_V3.md).\n\n## Credits\n\nA big thank you to [@Bkucera](https://github.com/Bkucera) for the logo image!\n'