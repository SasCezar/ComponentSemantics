b'<a name="eslint-plugin-jsdoc"></a>\n# eslint-plugin-jsdoc\n\n[![GitSpo Mentions](https://gitspo.com/badges/mentions/gajus/eslint-plugin-jsdoc?style=flat-square)](https://gitspo.com/mentions/gajus/eslint-plugin-jsdoc)\n[![NPM version](http://img.shields.io/npm/v/eslint-plugin-jsdoc.svg?style=flat-square)](https://www.npmjs.org/package/eslint-plugin-jsdoc)\n[![Travis build status](http://img.shields.io/travis/gajus/eslint-plugin-jsdoc/master.svg?style=flat-square)](https://travis-ci.org/gajus/eslint-plugin-jsdoc)\n[![js-canonical-style](https://img.shields.io/badge/code%20style-canonical-blue.svg?style=flat-square)](https://github.com/gajus/canonical)\n\nJSDoc linting rules for ESLint.\n\n* [eslint-plugin-jsdoc](#eslint-plugin-jsdoc)\n    * [Installation](#eslint-plugin-jsdoc-installation)\n    * [Configuration](#eslint-plugin-jsdoc-configuration)\n    * [Options](#eslint-plugin-jsdoc-options)\n    * [Settings](#eslint-plugin-jsdoc-settings)\n        * [Allow `@private` to disable rules for that comment block](#eslint-plugin-jsdoc-settings-allow-private-to-disable-rules-for-that-comment-block)\n        * [Mode](#eslint-plugin-jsdoc-settings-mode)\n        * [Alias Preference](#eslint-plugin-jsdoc-settings-alias-preference)\n        * [`@override`/`@augments`/`@extends`/`@implements` Without Accompanying `@param`/`@description`/`@example`/`@returns`](#eslint-plugin-jsdoc-settings-override-augments-extends-implements-without-accompanying-param-description-example-returns)\n        * [Settings to Configure `check-types` and `no-undefined-types`](#eslint-plugin-jsdoc-settings-settings-to-configure-check-types-and-no-undefined-types)\n    * [Rules](#eslint-plugin-jsdoc-rules)\n        * [`check-access`](#eslint-plugin-jsdoc-rules-check-access)\n        * [`check-alignment`](#eslint-plugin-jsdoc-rules-check-alignment)\n        * [`check-examples`](#eslint-plugin-jsdoc-rules-check-examples)\n        * [`check-indentation`](#eslint-plugin-jsdoc-rules-check-indentation)\n        * [`check-param-names`](#eslint-plugin-jsdoc-rules-check-param-names)\n        * [`check-syntax`](#eslint-plugin-jsdoc-rules-check-syntax)\n        * [`check-tag-names`](#eslint-plugin-jsdoc-rules-check-tag-names)\n        * [`check-types`](#eslint-plugin-jsdoc-rules-check-types)\n        * [`check-values`](#eslint-plugin-jsdoc-rules-check-values)\n        * [`empty-tags`](#eslint-plugin-jsdoc-rules-empty-tags)\n        * [`implements-on-classes`](#eslint-plugin-jsdoc-rules-implements-on-classes)\n        * [`match-description`](#eslint-plugin-jsdoc-rules-match-description)\n        * [`newline-after-description`](#eslint-plugin-jsdoc-rules-newline-after-description)\n        * [`no-types`](#eslint-plugin-jsdoc-rules-no-types)\n        * [`no-undefined-types`](#eslint-plugin-jsdoc-rules-no-undefined-types)\n        * [`require-description-complete-sentence`](#eslint-plugin-jsdoc-rules-require-description-complete-sentence)\n        * [`require-description`](#eslint-plugin-jsdoc-rules-require-description)\n        * [`require-example`](#eslint-plugin-jsdoc-rules-require-example)\n        * [`require-hyphen-before-param-description`](#eslint-plugin-jsdoc-rules-require-hyphen-before-param-description)\n        * [`require-jsdoc`](#eslint-plugin-jsdoc-rules-require-jsdoc)\n        * [`require-param-description`](#eslint-plugin-jsdoc-rules-require-param-description)\n        * [`require-param-name`](#eslint-plugin-jsdoc-rules-require-param-name)\n        * [`require-param-type`](#eslint-plugin-jsdoc-rules-require-param-type)\n        * [`require-param`](#eslint-plugin-jsdoc-rules-require-param)\n        * [`require-returns-check`](#eslint-plugin-jsdoc-rules-require-returns-check)\n        * [`require-returns-description`](#eslint-plugin-jsdoc-rules-require-returns-description)\n        * [`require-returns-type`](#eslint-plugin-jsdoc-rules-require-returns-type)\n        * [`require-returns`](#eslint-plugin-jsdoc-rules-require-returns)\n        * [`valid-types`](#eslint-plugin-jsdoc-rules-valid-types)\n\n\n<a name="eslint-plugin-jsdoc-installation"></a>\n## Installation\n\nInstall [ESLint](https://www.github.com/eslint/eslint) either locally or globally.\n\n```sh\nnpm install --save-dev eslint\n```\n\nIf you have installed `ESLint` globally, you have to install JSDoc plugin globally too. Otherwise, install it locally.\n\n```sh\nnpm install --save-dev eslint-plugin-jsdoc\n```\n\n<a name="eslint-plugin-jsdoc-configuration"></a>\n## Configuration\n\nAdd `plugins` section and specify `eslint-plugin-jsdoc` as a plugin.\n\n```json\n{\n    "plugins": [\n        "jsdoc"\n    ]\n}\n```\n\nFinally, enable all of the rules that you would like to use.\n\n```javascript\n{\n    "rules": {\n        "jsdoc/check-alignment": 1, // Recommended\n        "jsdoc/check-examples": 1,\n        "jsdoc/check-indentation": 1,\n        "jsdoc/check-param-names": 1, // Recommended\n        "jsdoc/check-syntax": 1,\n        "jsdoc/check-tag-names": 1, // Recommended\n        "jsdoc/check-types": 1, // Recommended\n        "jsdoc/implements-on-classes": 1, // Recommended\n        "jsdoc/match-description": 1,\n        "jsdoc/newline-after-description": 1, // Recommended\n        "jsdoc/no-types": 1,\n        "jsdoc/no-undefined-types": 1, // Recommended\n        "jsdoc/require-description": 1,\n        "jsdoc/require-description-complete-sentence": 1,\n        "jsdoc/require-example": 1,\n        "jsdoc/require-hyphen-before-param-description": 1,\n        "jsdoc/require-jsdoc": 1, // Recommended\n        "jsdoc/require-param": 1, // Recommended\n        "jsdoc/require-param-description": 1, // Recommended\n        "jsdoc/require-param-name": 1, // Recommended\n        "jsdoc/require-param-type": 1, // Recommended\n        "jsdoc/require-returns": 1, // Recommended\n        "jsdoc/require-returns-check": 1, // Recommended\n        "jsdoc/require-returns-description": 1, // Recommended\n        "jsdoc/require-returns-type": 1, // Recommended\n        "jsdoc/valid-types": 1 // Recommended\n    }\n}\n```\n\nOr you can simply use the following which enables the rules commented\nabove as "recommended":\n\n```json\n{\n  "extends": ["plugin:jsdoc/recommended"]\n}\n```\n\nYou can then selectively add to or override the recommended rules.\n\n<a name="eslint-plugin-jsdoc-options"></a>\n## Options\n\nRules may, as per the [ESLint user guide](https://eslint.org/docs/user-guide/configuring), have their own individual options. In `eslint-plugin-jsdoc`, a few options,\nsuch as, `exemptedBy` and `contexts`, may be used across different rules.\n\n`eslint-plugin-jsdoc` options, if present, are in the form of an object\nsupplied as the second argument in an array after the error level.\n\n```js\n// `.eslintrc.js`\n{\n  rules: {\n    \'jsdoc/require-example\': [\n        // The Error level should be `error`, `warn`, or `off` (or 2, 1, or 0)\n        \'error\',\n        // The options vary by rule, but are added to an options object:\n        {\n          avoidExampleOnConstructors: true,\n          exemptedBy: [\'type\']\n        }\n    ]\n  }\n}\n```\n\n<a name="eslint-plugin-jsdoc-settings"></a>\n## Settings\n\n<a name="eslint-plugin-jsdoc-settings-allow-private-to-disable-rules-for-that-comment-block"></a>\n### Allow <code>@private</code> to disable rules for that comment block\n\n- `settings.jsdoc.ignorePrivate` - Disables all rules for the comment block\n  on which a `@private` tag occurs. Defaults to `false`.\n\n<a name="eslint-plugin-jsdoc-settings-mode"></a>\n### Mode\n\n- `settings.jsdoc.mode` - Set to `jsdoc` (the default), `typescript`, or `closure`.\n  Currently is used for the following:\n  - Determine valid tags for `check-tag-names`\n  - Only check `@template` in `no-undefined-types` for types in "closure" and\n    "typescript" modes\n  - For type-checking rules, determine which tags will be checked for types\n    (Closure allows types on some tags which the others do not,\n    so these tags will additionally be checked in "closure" mode)\n  - Check preferred tag names\n\n<a name="eslint-plugin-jsdoc-settings-alias-preference"></a>\n### Alias Preference\n\nUse `settings.jsdoc.tagNamePreference` to configure a preferred alias name for a JSDoc tag. The format of the configuration is: `<primary tag name>: <preferred alias name>`, e.g.\n\n```json\n{\n    "rules": {},\n    "settings": {\n        "jsdoc": {\n            "tagNamePreference": {\n                "param": "arg",\n                "returns": "return"\n            }\n        }\n    }\n}\n```\n\nOne may also use an object with a `message` and `replacement`.\n\nThe following will report the message `@extends is to be used over @augments as it is more evocative of classes than @augments` upon encountering `@augments`.\n\n```json\n{\n    "rules": {},\n    "settings": {\n        "jsdoc": {\n            "tagNamePreference": {\n                "augments": {\n                  "message": "@extends is to be used over @augments as it is more evocative of classes than @augments",\n                  "replacement": "extends"\n                }\n            }\n        }\n    }\n}\n```\n\nIf one wishes to reject a normally valid tag, e.g., `@todo`, one may set the tag to `false`:\n\n```json\n{\n    "rules": {},\n    "settings": {\n        "jsdoc": {\n            "tagNamePreference": {\n                "todo": false\n            }\n        }\n    }\n}\n```\n\nOr one may set the targeted tag to an object with a custom `message`, but without a `replacement` property:\n\n```json\n{\n    "rules": {},\n    "settings": {\n        "jsdoc": {\n            "tagNamePreference": {\n                "todo": {\n                  "message": "We expect immediate perfection, so don\'t leave to-dos in your code."\n                }\n            }\n        }\n    }\n}\n```\n\nNote that the preferred tags indicated in the `settings.jsdoc.tagNamePreference`\nmap will be assumed to be defined by `check-tag-names`.\n\nThe defaults in `eslint-plugin-jsdoc` (for tags which offer\naliases) are as follows:\n\n- `@abstract` (over `@virtual`)\n- `@augments` (over `@extends`)\n- `@class` (over `@constructor`)\n- `@constant` (over `@const`)\n- `@default` (over `@defaultvalue`)\n- `@description` (over `@desc`)\n- `@external` (over `@host`)\n- `@file` (over `@fileoverview`, `@overview`)\n- `@fires` (over `@emits`)\n- `@function` (over `@func`, `@method`)\n- `@member` (over `@var`)\n- `@param` (over `@arg`, `@argument`)\n- `@property` (over `@prop`)\n- `@returns` (over `@return`)\n- `@throws` (over `@exception`)\n- `@yields` (over `@yield`)\n\nThis setting is utilized by the the rule for tag name checking\n(`check-tag-names`) as well as in the `@param` and `@require` rules:\n\n- `check-param-names`\n- `check-tag-names`\n- `require-hyphen-before-param-description`\n- `require-description`\n- `require-param`\n- `require-param-description`\n- `require-param-name`\n- `require-param-type`\n- `require-returns`\n- `require-returns-check`\n- `require-returns-description`\n- `require-returns-type`\n\n<a name="eslint-plugin-jsdoc-settings-override-augments-extends-implements-without-accompanying-param-description-example-returns"></a>\n### <code>@override</code>/<code>@augments</code>/<code>@extends</code>/<code>@implements</code> Without Accompanying <code>@param</code>/<code>@description</code>/<code>@example</code>/<code>@returns</code>\n\nThe following settings allows the element(s) they reference to be omitted\non the JSDoc comment block of the function or that of its parent class\nfor any of the "require" rules (i.e., `require-param`, `require-description`,\n`require-example`, or `require-returns`).\n\n* `settings.jsdoc.overrideReplacesDocs` (`@override`) - Defaults to `true`\n* `settings.jsdoc.augmentsExtendsReplacesDocs` (`@augments` or its alias `@extends`) - Defaults to `false`.\n* `settings.jsdoc.implementsReplacesDocs` (`@implements`) - Defaults to `false`\n\nThe format of the configuration is as follows:\n\n```json\n{\n    "rules": {},\n    "settings": {\n        "jsdoc": {\n            "overrideReplacesDocs": true,\n            "augmentsExtendsReplacesDocs": true,\n            "implementsReplacesDocs": true\n        }\n    }\n}\n```\n\n<a name="eslint-plugin-jsdoc-settings-settings-to-configure-check-types-and-no-undefined-types"></a>\n### Settings to Configure <code>check-types</code> and <code>no-undefined-types</code>\n\n- `settings.jsdoc.preferredTypes` An option map to indicate preferred\n  or forbidden types (if default types are indicated here, these will\n  have precedence over the default recommendations for `check-types`).\n  The keys of this map are the types to be replaced (or forbidden).\n  These keys may include:\n  1. The "ANY" type, `*`\n  1. The pseudo-type `[]` which we use to denote the parent (array)\n    types used in the syntax `string[]`, `number[]`, etc.\n  1. The pseudo-type `.<>` (or `.`) to represent the format `Array.<value>`\n    or `Object.<key, value>`\n  1. The pseudo-type `<>` to represent the format `Array<value>` or\n    `Object<key, value>`\n  1. A plain string type, e.g., `MyType`\n  1. A plain string type followed by one of the above pseudo-types (except\n    for `[]` which is always assumed to be an `Array`), e.g., `Array.`, or\n    `SpecialObject<>`.\n\n  If a bare pseudo-type is used, it will match all parent types of that form.\n  If a pseudo-type prefixed with a type name is used, it will only match\n  parent types of that form and type name.\n\n  The values can be:\n  - `false` to forbid the type\n  - a string to indicate the type that should be preferred in its place\n    (and which `fix` mode can replace); this can be one of the formats\n    of the keys described above. Note that the format will not be changed\n    unless you use a pseudo-type in the replacement (e.g.,\n    `\'Array.<>\': \'MyArray\'` will change `Array.<string>` to `MyArray.<string>`,\n    preserving the dot; to get rid of the dot, you must use the pseudo-type:\n    `\'Array.<>\': \'MyArray<>\'` which will change `Array.<string>` to\n    `MyArray<string>`). If you use a bare pseudo-type in the replacement,\n    e.g., `\'MyArray.<>\': \'<>\'`, the type will be converted to the format\n    of the pseudo-type without changing the type name, i.e., `MyArray.<string>`\n    will become `MyArray<string>` but `Array.<string>` will not be modified.\n  - an object with the key `message` to provide a specific error message\n    when encountering the discouraged type and, if a type is to be preferred\n    in its place, the key `replacement` to indicate the type that should be\n    used in its place (and which `fix` mode can replace) or `false` if\n    forbidding the type. The message string will have the substrings with\n    special meaning, `{{tagName}}` and `{{tagValue}}`, replaced with their\n    corresponding value.\n\nNote that the preferred types indicated as targets in `settings.jsdoc.preferredTypes`\nmap will be assumed to be defined by `no-undefined-types`.\n\nSee the option of `check-types`, `unifyParentAndChildTypeChecks`, for\nhow the keys of `preferredTypes` may have `<>` or `.<>` (or just `.`)\nappended and its bearing on whether types are checked as parents/children\nonly (e.g., to match `Array` if the type is `Array` vs. `Array.<string>`).\n\n<a name="eslint-plugin-jsdoc-rules"></a>\n## Rules\n\n<a name="eslint-plugin-jsdoc-rules-check-access"></a>\n### <code>check-access</code>\n\nChecks that `@access` tags use one of the following values:\n\n- "package", "private", "protected", "public"\n\nAlso reports:\n\n- Mixing of `@access` with `@public`, `@private`, `@protected`, or `@package`\n  on the same doc block.\n- Use of multiple instances of `@access` (or the `@public`, etc. style tags)\n  on the same doc block.\n\n|||\n|---|---|\n|Context|everywhere|\n|Tags|`@access`|\n|Settings||\n|Options||\n\nThe following patterns are considered problems:\n\n````js\n/**\n * @access foo\n */\nfunction quux (foo) {\n\n}\n// Message: Missing valid JSDoc @access level.\n\n/**\n * @accessLevel foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"tagNamePreference":{"access":"accessLevel"}}}\n// Message: Missing valid JSDoc @accessLevel level.\n\n/**\n * @access\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"tagNamePreference":{"access":false}}}\n// Message: Unexpected tag `@access`\n\nclass MyClass {\n  /**\n   * @access\n   */\n  myClassField = 1\n}\n// Message: Missing valid JSDoc @access level.\n\n/**\n * @access public\n * @public\n */\nfunction quux (foo) {\n\n}\n// Message: The @access tag may not be used with specific access-control tags (@package, @private, @protected, or @public).\n\n/**\n * @access public\n * @access private\n */\nfunction quux (foo) {\n\n}\n// Message: At most one access-control tag may be present on a jsdoc block.\n\n/**\n * @public\n * @private\n */\nfunction quux (foo) {\n\n}\n// Message: At most one access-control tag may be present on a jsdoc block.\n\n/**\n * @public\n * @public\n */\nfunction quux (foo) {\n\n}\n// Message: At most one access-control tag may be present on a jsdoc block.\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n *\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @access public\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @accessLevel package\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"tagNamePreference":{"access":"accessLevel"}}}\n\nclass MyClass {\n  /**\n   * @access private\n   */\n  myClassField = 1\n}\n\n/**\n * @public\n */\nfunction quux (foo) {\n\n}\n````\n\n\n<a name="eslint-plugin-jsdoc-rules-check-alignment"></a>\n### <code>check-alignment</code>\n\nReports invalid alignment of JSDoc block asterisks.\n\n|||\n|---|---|\n|Context|everywhere|\n|Tags|N/A|\n\nThe following patterns are considered problems:\n\n````js\n/**\n  * @param {Number} foo\n */\nfunction quux (foo) {\n  // with spaces\n}\n// Message: Expected JSDoc block to be aligned.\n\n/**\n  * @param {Number} foo\n */\nfunction quux (foo) {\n\t// with tabs\n}\n// Message: Expected JSDoc block to be aligned.\n\n/**\n  * @param {Number} foo\n */\nfunction quux (foo) {\n  // with spaces\n}\n// Message: Expected JSDoc block to be aligned.\n\n/**\n* @param {Number} foo\n*/\nfunction quux (foo) {\n  // with spaces\n}\n// Message: Expected JSDoc block to be aligned.\n\n/**\n * @param {Number} foo\n  */\nfunction quux (foo) {\n\n}\n// Message: Expected JSDoc block to be aligned.\n\n /**\n * @param {Number} foo\n */\nfunction quux (foo) {\n\n}\n// Message: Expected JSDoc block to be aligned.\n\n /**\n  * @param {Number} foo\n */\nfunction quux (foo) {\n\n}\n// Message: Expected JSDoc block to be aligned.\n\n/**\n  * @param {Number} foo\n  */\n function quux (foo) {\n\n }\n// Message: Expected JSDoc block to be aligned.\n\n/**\n   * A jsdoc not attached to any node.\n */\n// Message: Expected JSDoc block to be aligned.\n\nclass Foo {\n  /**\n   *  Some method\n    * @param a\n   */\n  quux(a) {}\n}\n// Message: Expected JSDoc block to be aligned.\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n * Desc\n *\n * @param {Number} foo\n */\nfunction quux (foo) {\n\n}\n\n/**\n * Desc\n *\n * @param {{\n  foo: Bar,\n  bar: Baz\n * }} foo\n *\n */\nfunction quux (foo) {\n\n}\n\n/*  <- JSDoc must start with 2 stars.\n  *    So this is unchecked.\n */\nfunction quux (foo) {}\n````\n\n\n<a name="eslint-plugin-jsdoc-rules-check-examples"></a>\n### <code>check-examples</code>\n\nEnsures that (JavaScript) examples within JSDoc adhere to ESLint rules.\n\n<a name="eslint-plugin-jsdoc-rules-check-examples-options-1"></a>\n#### Options\n\nThe options below all default to no-op/`false` except as noted.\n\n<a name="eslint-plugin-jsdoc-rules-check-examples-options-1-captionrequired"></a>\n##### <code>captionRequired</code>\n\nJSDoc specs use of an optional `<caption>` element at the beginning of\n`@example`.\n\nThe option `captionRequired` insists on a `<caption>` being present at\nthe beginning of any `@example`.\n\n<a name="eslint-plugin-jsdoc-rules-check-examples-options-1-examplecoderegex-and-rejectexamplecoderegex"></a>\n##### <code>exampleCodeRegex</code> and <code>rejectExampleCodeRegex</code>\n\nJSDoc does not specify a formal means for delimiting code blocks within\n`@example` (it uses generic syntax highlighting techniques for its own\nsyntax highlighting). The following options determine whether a given\n`@example` tag will have the `check-examples` checks applied to it:\n\n* `exampleCodeRegex` - Regex which whitelists lintable\n  examples. If a parenthetical group is used, the first one will be used,\n  so you may wish to use `(?:...)` groups where you do not wish the\n  first such group treated as one to include. If no parenthetical group\n  exists or matches, the whole matching expression will be used.\n  An example might be ````"^```(?:js|javascript)([\\\\s\\\\S]*)```\\s*$"````\n  to only match explicitly fenced JavaScript blocks.\n* `rejectExampleCodeRegex` - Regex blacklist which rejects\n  non-lintable examples (has priority over `exampleCodeRegex`). An example\n  might be ```"^`"``` to avoid linting fenced blocks which may indicate\n  a non-JavaScript language.\n\nIf neither is in use, all examples will be matched. Note also that even if\n`captionRequired` is not set, any initial `<caption>` will be stripped out\nbefore doing the regex matching.\n\n<a name="eslint-plugin-jsdoc-rules-check-examples-options-1-paddedindent"></a>\n##### <code>paddedIndent</code>\n\nThis integer property allows one to add a fixed amount of whitespace at the\nbeginning of the second or later lines of the example to be stripped so as\nto avoid linting issues with the decorative whitespace. For example, if set\nto a value of `4`, the initial whitespace below will not trigger `indent`\nrule errors as the extra 4 spaces on each subsequent line will be stripped\nout before evaluation.\n\n```js\n/**\n * @example\n *     anArray.filter((a) => {\n *      return a.b;\n *     });\n */\n```\n\n<a name="eslint-plugin-jsdoc-rules-check-examples-options-1-reportunuseddisabledirectives"></a>\n##### <code>reportUnusedDisableDirectives</code>\n\nIf not set to `false`, `reportUnusedDisableDirectives` will report disabled\ndirectives which are not used (and thus not needed). Defaults to `true`.\nCorresponds to ESLint\'s [`--report-unused-disable-directives`](https://eslint.org/docs/user-guide/command-line-interface#--report-unused-disable-directives).\n\nInline ESLint config within `@example` JavaScript is allowed, though the\ndisabling of ESLint directives which are not needed by the resolved rules\nwill be reported as with the ESLint `--report-unused-disable-directives`\ncommand.\n\n<a name="eslint-plugin-jsdoc-rules-check-examples-options-for-determining-eslint-rule-applicability-allowinlineconfig-nodefaultexamplerules-matchingfilename-configfile-eslintrcforexamples-and-baseconfig"></a>\n#### Options for Determining ESLint Rule Applicability (<code>allowInlineConfig</code>, <code>noDefaultExampleRules</code>, <code>matchingFileName</code>, <code>configFile</code>, <code>eslintrcForExamples</code>, and <code>baseConfig</code>)\n\nThe following options determine which individual ESLint rules will be\napplied to the JavaScript found within the `@example` tags (as determined\nto be applicable by the above regex options). They are ordered by\ndecreasing precedence:\n\n* `allowInlineConfig` - If not set to `false`, will allow\n  inline config within the `@example` to override other config. Defaults\n  to `true`.\n* `noDefaultExampleRules` - Setting to `true` will disable the\n  default rules which are expected to be troublesome for most documentation\n  use. See the section below for the specific default rules.\n* `matchingFileName` - Option for a file name (even non-existent) to trigger\n  specific rules defined in one\'s config; usable with ESLint `.eslintrc.*`\n  `overrides` -> `files` globs, to apply a desired subset of rules with\n  `@example` (besides allowing for rules specific to examples, this option\n  can be useful for enabling reuse of the same rules within `@example` as\n  with JavaScript Markdown lintable by\n  [other plugins](https://github.com/eslint/eslint-plugin-markdown), e.g.,\n  if one sets `matchingFileName` to `dummy.md` so that `@example` rules will\n  follow one\'s Markdown rules). Note that this option may come at somewhat\n  of a performance penalty as the file\'s existence is checked by eslint.\n* `configFile` - A config file. Corresponds to ESLint\'s [`-c`](https://eslint.org/docs/user-guide/command-line-interface#-c---config).\n* `eslintrcForExamples` - Defaults to `true` in adding rules\n  based on an `.eslintrc.*` file. Setting to `false` corresponds to\n  ESLint\'s [`--no-eslintrc`](https://eslint.org/docs/user-guide/command-line-interface#--no-eslintrc).\n* `baseConfig` - An object of rules with the same schema\n  as `.eslintrc.*` for defaults\n\n<a name="eslint-plugin-jsdoc-rules-check-examples-options-for-determining-eslint-rule-applicability-allowinlineconfig-nodefaultexamplerules-matchingfilename-configfile-eslintrcforexamples-and-baseconfig-rules-disabled-by-default-unless-nodefaultexamplerules-is-set-to-true"></a>\n##### Rules Disabled by Default Unless <code>noDefaultExampleRules</code> is Set to <code>true</code>\n\n* `eol-last` - Insisting that a newline "always" be at the end is less likely\n  to be desired in sample code as with the code file convention\n* `no-console` - Unlikely to have inadvertent temporary debugging within\n  examples\n* `no-undef` - Many variables in examples will be `undefined`.\n* `no-unused-vars` - It is common to define variables for clarity without always\n  using them within examples.\n* `padded-blocks` - It can generally look nicer to pad a little even if one\'s\n  code follows more stringency as far as block padding.\n* `import/no-unresolved` - One wouldn\'t generally expect example paths to\n  resolve relative to the current JavaScript file as one would with real code.\n* `import/unambiguous` - Snippets in examples are likely too short to always\n  include full import/export info\n* `node/no-missing-import` - See `import/no-unresolved`\n* `node/no-missing-require` -  See `import/no-unresolved`\n\n|||\n|---|---|\n|Context|everywhere|\n|Tags|`example`|\n|Options| *See above* |\n\nThe following patterns are considered problems:\n\n````js\n/**\n * @example alert(\'hello\')\n */\nfunction quux () {\n\n}\n// Options: [{"baseConfig":{"rules":{"no-alert":2,"semi":["error","always"]}},"eslintrcForExamples":false}]\n// Message: @example error (no-alert): Unexpected alert.\n\n/**\n * @example alert(\'hello\')\n */\nclass quux {\n\n}\n// Options: [{"baseConfig":{"rules":{"no-alert":2,"semi":["error","always"]}},"eslintrcForExamples":false}]\n// Message: @example error (no-alert): Unexpected alert.\n\n/**\n * @example ```js\n alert(\'hello\');\n ```\n */\nfunction quux () {\n\n}\n// Options: [{"baseConfig":{"rules":{"semi":["error","never"]}},"eslintrcForExamples":false,"exampleCodeRegex":"```js([\\\\s\\\\S]*)```"}]\n// Message: @example error (semi): Extra semicolon.\n\n/**\n * @example\n *\n * ```js alert(\'hello\'); ```\n */\nfunction quux () {\n\n}\n// Options: [{"baseConfig":{"rules":{"semi":["error","never"]}},"eslintrcForExamples":false,"exampleCodeRegex":"```js ([\\\\s\\\\S]*)```"}]\n// Message: @example error (semi): Extra semicolon.\n\n/**\n * @example\n * ```js alert(\'hello\'); ```\n */\nvar quux = {\n\n};\n// Options: [{"baseConfig":{"rules":{"semi":["error","never"]}},"eslintrcForExamples":false,"exampleCodeRegex":"```js ([\\\\s\\\\S]*)```"}]\n// Message: @example error (semi): Extra semicolon.\n\n/**\n * @example ```\n * js alert(\'hello\'); ```\n */\nfunction quux () {\n\n}\n// Options: [{"baseConfig":{"rules":{"semi":["error","never"]}},"eslintrcForExamples":false,"exampleCodeRegex":"```\\njs ([\\\\s\\\\S]*)```"}]\n// Message: @example error (semi): Extra semicolon.\n\n/**\n * @example <b>Not JavaScript</b>\n */\nfunction quux () {\n\n}\n/**\n * @example quux2();\n */\nfunction quux2 () {\n\n}\n// Options: [{"baseConfig":{"rules":{"semi":["error","never"]}},"eslintrcForExamples":false,"rejectExampleCodeRegex":"^\\\\s*<.*>\\\\s*$"}]\n// Message: @example error (semi): Extra semicolon.\n\n/**\n * @example\n * quux(); // does something useful\n */\nfunction quux () {\n\n}\n// Options: [{"baseConfig":{"rules":{"no-undef":["error"]}},"eslintrcForExamples":false,"noDefaultExampleRules":true}]\n// Message: @example error (no-undef): \'quux\' is not defined.\n\n/**\n * @example <caption>Valid usage</caption>\n * quux(); // does something useful\n *\n * @example\n * quux(\'random unwanted arg\'); // results in an error\n */\nfunction quux () {\n\n}\n// Options: [{"captionRequired":true,"eslintrcForExamples":false}]\n// Message: Caption is expected for examples.\n\n/**\n * @example  quux();\n */\nfunction quux () {\n\n}\n// Options: [{"baseConfig":{"rules":{"indent":["error"]}},"eslintrcForExamples":false,"noDefaultExampleRules":false}]\n// Message: @example error (indent): Expected indentation of 0 spaces but found 1.\n\n/**\n * @example test() // eslint-disable-line semi\n */\nfunction quux () {}\n// Options: [{"eslintrcForExamples":false,"noDefaultExampleRules":true,"reportUnusedDisableDirectives":true}]\n// Message: @example error: Unused eslint-disable directive (no problems were reported from \'semi\').\n\n/**\n * @example\n test() // eslint-disable-line semi\n */\nfunction quux () {}\n// Options: [{"allowInlineConfig":false,"baseConfig":{"rules":{"semi":["error","always"]}},"eslintrcForExamples":false,"noDefaultExampleRules":true}]\n// Message: @example error (semi): Missing semicolon.\n\n/**\n * @example const i = 5;\n * quux2()\n */\nfunction quux2 () {\n\n}\n// Options: [{"matchingFileName":"test/jsdocUtils.js"}]\n// Message: @example warning (id-length): Identifier name \'i\' is too short (< 2).\n\n/**\n * @example const i = 5;\n *   quux2()\n */\nfunction quux2 () {\n\n}\n// Options: [{"paddedIndent":2}]\n// Message: @example warning (id-length): Identifier name \'i\' is too short (< 2).\n\n/**\n * @example\n * const i = 5;\n * quux2()\n */\nfunction quux2 () {\n\n}\n// Message: @example warning (id-length): Identifier name \'i\' is too short (< 2).\n\n/**\n * @example const i = 5;\n * quux2()\n */\nfunction quux2 () {\n\n}\n// Options: [{"matchingFileName":"test/rules/data/dummy.js"}]\n// Message: @example error (semi): Missing semicolon.\n\n/**\n * @example // begin\n alert(\'hello\')\n // end\n */\nfunction quux () {\n\n}\n// Options: [{"baseConfig":{"rules":{"semi":["warn","always"]}},"eslintrcForExamples":false,"exampleCodeRegex":"// begin[\\\\s\\\\S]*// end","noDefaultExampleRules":true}]\n// Message: @example warning (semi): Missing semicolon.\n\n/**\n *\n */\nfunction f () {\n\n}\n// Settings: {"jsdoc":{"allowInlineConfig":true,"baseConfig":{},"captionRequired":false,"configFile":"configFile.js","eslintrcForExamples":true,"exampleCodeRegex":".*?","matchingFileName":"test.md","noDefaultExampleRules":false,"rejectExampleCodeRegex":"\\\\W*","reportUnusedDisableDirectives":true}}\n// Message: `settings.jsdoc.captionRequired` has been removed, use options in the rule `check-examples` instead.\n\n/**\n * @typedef {string} Foo\n * @example <caption></caption>\n * \'foo\'\n */\n// Options: [{"captionRequired":true,"eslintrcForExamples":false}]\n// Message: Caption is expected for examples.\n\n/**\n * @example\n * const list: number[] = [1, 2, 3]\n * quux(list);\n */\nfunction quux () {\n\n}\n// Options: [{"baseConfig":{"parser":"@typescript-eslint/parser","parserOptions":{"ecmaVersion":6},"rules":{"semi":["error","always"]}},"eslintrcForExamples":false}]\n// Message: @example error (semi): Missing semicolon.\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n * @example ```js\n alert(\'hello\');\n ```\n */\nfunction quux () {\n\n}\n// Options: [{"baseConfig":{"rules":{"semi":["error","always"]}},"eslintrcForExamples":false,"exampleCodeRegex":"```js([\\\\s\\\\S]*)```"}]\n\n/**\n * @example\n * // arbitrary example content\n */\nfunction quux () {\n\n}\n// Options: [{"eslintrcForExamples":false}]\n\n/**\n * @example\n * quux(); // does something useful\n */\nfunction quux () {\n\n}\n// Options: [{"baseConfig":{"rules":{"no-undef":["error"]}},"eslintrcForExamples":false,"noDefaultExampleRules":false}]\n\n/**\n * @example quux();\n */\nfunction quux () {\n\n}\n// Options: [{"baseConfig":{"rules":{"indent":["error"]}},"eslintrcForExamples":false,"noDefaultExampleRules":false}]\n\n/**\n * @example <caption>Valid usage</caption>\n * quux(); // does something useful\n *\n * @example <caption>Invalid usage</caption>\n * quux(\'random unwanted arg\'); // results in an error\n */\nfunction quux () {\n\n}\n// Options: [{"captionRequired":true,"eslintrcForExamples":false}]\n\n/**\n * @example test() // eslint-disable-line semi\n */\nfunction quux () {}\n// Options: [{"eslintrcForExamples":false,"noDefaultExampleRules":true,"reportUnusedDisableDirectives":false}]\n\n/**\n * @example\n test() // eslint-disable-line semi\n */\nfunction quux () {}\n// Options: [{"allowInlineConfig":true,"baseConfig":{"rules":{"semi":["error","always"]}},"eslintrcForExamples":false,"noDefaultExampleRules":true}]\n\n/**\n * @example ```js\n alert(\'hello\')\n ```\n */\nvar quux = {\n\n};\n// Options: [{"baseConfig":{"rules":{"semi":["error","never"]}},"eslintrcForExamples":false,"exampleCodeRegex":"```js([\\\\s\\\\S]*)```"}]\n\n/**\n * @example\n * foo(function (err) {\n *     throw err;\n * });\n */\nfunction quux () {}\n// Options: [{"baseConfig":{"rules":{"indent":["error"]}},"eslintrcForExamples":false,"noDefaultExampleRules":false}]\n\n/**\n * @example\n * const list: number[] = [1, 2, 3];\n * quux(list);\n */\nfunction quux () {\n\n}\n// Options: [{"baseConfig":{"parser":"@typescript-eslint/parser","parserOptions":{"ecmaVersion":6},"rules":{"semi":["error","always"]}},"eslintrcForExamples":false}]\n````\n\n\n<a name="eslint-plugin-jsdoc-rules-check-indentation"></a>\n### <code>check-indentation</code>\n\nReports invalid padding inside JSDoc blocks.\n\nIgnores parts enclosed in Markdown "code block"\'s. For example,\nthe following description is not reported:\n\n```js\n/**\n * Some description:\n * ```html\n * <section>\n *   <title>test</title>\n * </section>\n * ```\n */\n```\n\n<a name="eslint-plugin-jsdoc-rules-check-indentation-options-2"></a>\n#### Options\n\nThis rule has an object option.\n\n<a name="eslint-plugin-jsdoc-rules-check-indentation-options-2-excludetags"></a>\n##### <code>excludeTags</code>\n\nArray of tags (e.g., `[\'example\', \'description\']`) whose content will be\n"hidden" from the `check-indentation` rule. Defaults to `[\'example\']`.\n\nBy default, the whole JSDoc block will be checked for invalid padding.\nThat would include `@example` blocks too, which can get in the way\nof adding full, readable examples of code without ending up with multiple\nlinting issues.\n\nWhen disabled (by passing `excludeTags: []` option), the following code *will*\nreport a padding issue:\n\n```js\n/**\n * @example\n * anArray.filter((a) => {\n *   return a.b;\n * });\n */\n```\n\n|||\n|---|---|\n|Context|everywhere|\n|Tags|N/A|\n|Options| `excludeTags` |\n\nThe following patterns are considered problems:\n\n````js\n/**  foo */\nfunction quux () {\n\n}\n// Message: There must be no indentation.\n\n/**\n * foo\n *\n * @param bar\n *  baz\n */\nfunction quux () {\n\n}\n// Message: There must be no indentation.\n\n/**\n * Foo\n *   bar\n */\nclass Moo {}\n// Message: There must be no indentation.\n\n/**\n * foo\n *\n * @example\n * anArray.filter((a) => {\n *   return a.b;\n * });\n */\nfunction quux () {\n\n}\n// Options: [{"excludeTags":[]}]\n// Message: There must be no indentation.\n\n/**\n * foo\n *\n * @example\n *   aaaa\n * @returns\n *   eeee\n */\nfunction quux () {\n\n}\n// Message: There must be no indentation.\n\n/**\n * foo\n * ```html\n * <section>\n *   <title>test</title>\n * </section>\n * ```\n * @returns\n *   eeee\n */\nfunction quux () {\n\n}\n// Message: There must be no indentation.\n\n/**\n * foo\n * ```   aaaa```\n * @returns\n *   eeee\n */\nfunction quux () {\n\n}\n// Message: There must be no indentation.\n\n/**\n* @example <caption>\n* Here is a long\n*   indented summary of this\n* example\n* </caption>\n* ```js\n* function hi () {\n*   alert(\'Hello\');\n* }\n* ```\n*/\n// Options: [{"excludeTags":[]}]\n// Message: There must be no indentation.\n\n/**\n* @example <caption>\n* Here is a long\n* summary of this\n* example\n* </caption>\n* // Code is not wrapped into fenced code block\n* function hi () {\n*   alert(\'Hello\');\n* }\n*/\n// Options: [{"excludeTags":[]}]\n// Message: There must be no indentation.\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n * foo\n *\n * @param bar\n * baz\n */\nfunction quux () {\n\n}\n\n/*** foo */\nfunction quux () {\n\n}\n\n/**\n * foo\n *\n * @example\n * anArray.filter((a) => {\n *   return a.b;\n * });\n */\nfunction quux () {\n\n}\n\n/**\n * foo\n *\n * @example\n * anArray.filter((a) => {\n *   return a.b;\n * });\n * @returns\n *   eeee\n */\nfunction quux () {\n\n}\n// Options: [{"excludeTags":["example","returns"]}]\n\n/**\n * foo\n * ```html\n * <section>\n *   <title>test</title>\n * </section>\n * ```\n * @returns eeee\n */\nfunction quux () {\n\n}\n\n/**\n * foo\n * ```   aaaa```\n * @returns eeee\n */\nfunction quux () {\n\n}\n\n/**\n* @example <caption>\n* Here is a long\n* summary of this\n* example\n* </caption>\n* ```js\n* function hi () {\n*   alert(\'Hello\');\n* }\n* ```\n*/\n// Options: [{"excludeTags":[]}]\n````\n\n\n<a name="eslint-plugin-jsdoc-rules-check-param-names"></a>\n### <code>check-param-names</code>\n\nEnsures that parameter names in JSDoc match those in the function declaration.\n\n|||\n|---|---|\n|Context|`ArrowFunctionExpression`, `FunctionDeclaration`, `FunctionExpression`|\n|Tags|`param`|\n\nThe following patterns are considered problems:\n\n````js\n/**\n * @param Foo\n */\nfunction quux (foo = \'FOO\') {\n\n}\n// Message: Expected @param names to be "foo". Got "Foo".\n\n/**\n * @arg Foo\n */\nfunction quux (foo = \'FOO\') {\n\n}\n// Settings: {"jsdoc":{"tagNamePreference":{"param":"arg"}}}\n// Message: Expected @arg names to be "foo". Got "Foo".\n\n/**\n * @param Foo\n */\nfunction quux (foo) {\n\n}\n// Message: Expected @param names to be "foo". Got "Foo".\n\n/**\n * @param Foo.Bar\n */\nfunction quux (foo) {\n\n}\n// Message: @param path declaration ("Foo.Bar") appears before any real parameter.\n\n/**\n * @param foo\n * @param Foo.Bar\n */\nfunction quux (foo) {\n\n}\n// Message: @param path declaration ("Foo.Bar") root node name ("Foo") does not match previous real parameter name ("foo").\n\n/**\n * @param foo\n * @param foo.bar\n * @param bar\n */\nfunction quux (bar, foo) {\n\n}\n// Message: Expected @param names to be "bar, foo". Got "foo, bar".\n\n/**\n * @param foo\n * @param bar\n */\nfunction quux (foo) {\n\n}\n// Message: @param "bar" does not match an existing function parameter.\n\n/**\n * @param foo\n * @param foo\n */\nfunction quux (foo) {\n\n}\n// Message: Duplicate @param "foo"\n\n/**\n * @param foo\n * @param foo\n */\nfunction quux (foo, bar) {\n\n}\n// Message: Duplicate @param "foo"\n\n/**\n * @param foo\n * @param foo\n */\nfunction quux (foo, foo) {\n\n}\n// Message: Duplicate @param "foo"\n\nexport class SomeClass {\n  /**\n   * @param prop\n   */\n  constructor(private property: string) {}\n}\n// Message: Expected @param names to be "property". Got "prop".\n\n/**\n * @param foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"tagNamePreference":{"param":false}}}\n// Message: Unexpected tag `@param`\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n *\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @param foo\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @param foo\n * @param bar\n */\nfunction quux (foo, bar) {\n\n}\n\n/**\n * @param foo\n * @param bar\n */\nfunction quux (foo, bar, baz) {\n\n}\n\n/**\n * @param foo\n * @param foo.foo\n * @param bar\n */\nfunction quux (foo, bar) {\n\n}\n\n/**\n * @param args\n */\nfunction quux (...args) {\n\n}\n\n/**\n * @param foo\n */\nfunction quux ({a, b}) {\n\n}\n\n/**\n * @param foo\n */\nfunction quux ({a, b} = {}) {\n\n}\n\n/**\n * @param foo\n */\nfunction quux ([a, b] = []) {\n\n}\n\n/**\n * Assign the project to a list of employees.\n * @param {Object[]} employees - The employees who are responsible for the project.\n * @param {string} employees[].name - The name of an employee.\n * @param {string} employees[].department - The employee\'s department.\n */\nfunction assign (employees) {\n\n};\n\nexport class SomeClass {\n  /**\n   * @param property\n   */\n  constructor(private property: string) {}\n}\n````\n\n\n<a name="eslint-plugin-jsdoc-rules-check-param-names-deconstructing-function-parameter"></a>\n#### Deconstructing Function Parameter\n\n`eslint-plugin-jsdoc` does not validate names of parameters in function deconstruction, e.g.\n\n```js\n/**\n * @param foo\n */\nfunction quux ({\n    a,\n    b\n}) {\n\n}\n```\n\n`{a, b}` is an [`ObjectPattern`](https://github.com/estree/estree/blob/master/es2015.md#objectpattern) AST type and does not have a name. Therefore, the associated parameter in JSDoc block can have any name.\n\nLikewise for the pattern `[a, b]` which is an [`ArrayPattern`](https://github.com/estree/estree/blob/master/es2015.md#arraypattern).\n\n<a name="eslint-plugin-jsdoc-rules-check-syntax"></a>\n### <code>check-syntax</code>\n\nReports against Google Closure Compiler syntax.\n\n|||\n|---|---|\n|Context|everywhere|\n|Tags|N/A|\n\nThe following patterns are considered problems:\n\n````js\n/**\n * @param {string=} foo\n */\nfunction quux (foo) {\n\n}\n// Message: Syntax should not be Google Closure Compiler style.\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n * @param {string} [foo]\n */\nfunction quux (foo) {\n\n}\n\n/**\n *\n */\nfunction quux (foo) {\n\n}\n````\n\n\n<a name="eslint-plugin-jsdoc-rules-check-tag-names"></a>\n### <code>check-tag-names</code>\n\nReports invalid block tag names.\n\nValid [JSDoc 3 Block Tags](https://jsdoc.app/#block-tags) are:\n\n```\nabstract\naccess\nalias\nasync\naugments\nauthor\nborrows\ncallback\nclass\nclassdesc\nconstant\nconstructs\ncopyright\ndefault\ndeprecated\ndescription\nenum\nevent\nexample\nexports\nexternal\nfile\nfires\nfunction\ngenerator\nglobal\nhideconstructor\nignore\nimplements\ninheritdoc\ninner\ninstance\ninterface\nkind\nlends\nlicense\nlistens\nmember\nmemberof\nmemberof!\nmixes\nmixin\nmodule\nname\nnamespace\noverride\npackage\nparam\nprivate\nproperty\nprotected\npublic\nreadonly\nrequires\nreturns\nsee\nsince\nstatic\nsummary\nthis\nthrows\ntodo\ntutorial\ntype\ntypedef\nvariation\nversion\nyields\n```\n\n`modifies` is also supported (see [source](https://github.com/jsdoc/jsdoc/blob/master/packages/jsdoc/lib/jsdoc/tag/dictionary/definitions.js#L594)) but is undocumented.\n\nThe following synonyms are also recognized:\n\n```\narg\nargument\nconst\nconstructor\ndefaultvalue\ndesc\nemits\nexception\nextends\nfileoverview\nfunc\nhost\nmethod\noverview\nprop\nreturn\nvar\nvirtual\nyield\n```\n\nFor [TypeScript](https://www.typescriptlang.org/docs/handbook/type-checking-javascript-files.html#supported-jsdoc)\n(or Closure), when `settings.jsdoc.mode` is set to `typescript` or `closure`,\none may also use the following:\n\n```\ntemplate\n```\n\nAnd for [Closure](https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler),\nwhen `settings.jsdoc.mode` is set to `closure`, one may use the following (in\naddition to the jsdoc and TypeScript tags):\n\n```\ndefine (synonym of `const` per jsdoc source)\ndict\nexport\nexterns\nfinal\nimplicitCast (casing distinct from that recognized by jsdoc internally)\ninheritDoc (casing distinct from that recognized by jsdoc internally)\nnoalias\nnocollapse\nnocompile\nnoinline\nnosideeffects\npolymer\npolymerBehavior\npreserve\nrecord (synonym of `interface` per jsdoc source)\nstruct\nsuppress\nunrestricted\n```\n\n...and these undocumented tags which are only in [source](https://github.com/google/closure-compiler/blob/master/src/com/google/javascript/jscomp/parsing/Annotation.java):\n\n```\nclosurePrimitive\ncustomElement\nexpose\nhidden\nidGenerator\nmeaning\nmixinClass\nmixinFunction\nngInject\nowner\ntypeSummary\nwizaction\n```\n\nNote that the tags indicated as replacements in `settings.jsdoc.tagNamePreference` will automatically be considered as valid.\n\n<a name="eslint-plugin-jsdoc-rules-check-tag-names-options-3"></a>\n#### Options\n\n<a name="eslint-plugin-jsdoc-rules-check-tag-names-options-3-definedtags"></a>\n##### <code>definedTags</code>\n\nUse an array of `definedTags` strings to configure additional, allowed tags.\nThe format is as follows:\n\n```json\n{\n  "definedTags": ["note", "record"]\n}\n```\n\n|||\n|---|---|\n|Context|everywhere|\n|Tags|N/A|\n|Options|`definedTags`|\n|Settings|`tagNamePreference`, `mode`|\n\nThe following patterns are considered problems:\n\n````js\n/** @typoo {string} */\nlet a;\n// Message: Invalid JSDoc tag name "typoo".\n\n/**\n * @Param\n */\nfunction quux () {\n\n}\n// Message: Invalid JSDoc tag name "Param".\n\n/**\n * @foo\n */\nfunction quux () {\n\n}\n// Message: Invalid JSDoc tag name "foo".\n\n/**\n * @arg foo\n */\nfunction quux (foo) {\n\n}\n// Message: Invalid JSDoc tag (preference). Replace "arg" JSDoc tag with "param".\n\n/**\n * @param foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"tagNamePreference":{"param":"arg"}}}\n// Message: Invalid JSDoc tag (preference). Replace "param" JSDoc tag with "arg".\n\n/**\n * @arg foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"tagNamePreference":{"arg":"somethingDifferent"}}}\n// Message: Invalid JSDoc tag (preference). Replace "arg" JSDoc tag with "somethingDifferent".\n\n/**\n * @param foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"tagNamePreference":{"param":"parameter"}}}\n// Message: Invalid JSDoc tag (preference). Replace "param" JSDoc tag with "parameter".\n\n/**\n * @bar foo\n */\nfunction quux (foo) {\n\n}\n// Message: Invalid JSDoc tag name "bar".\n\n/**\n * @baz @bar foo\n */\nfunction quux (foo) {\n\n}\n// Options: [{"definedTags":["bar"]}]\n// Message: Invalid JSDoc tag name "baz".\n\n/**\n * @bar\n * @baz\n */\nfunction quux (foo) {\n\n}\n// Options: [{"definedTags":["bar"]}]\n// Message: Invalid JSDoc tag name "baz".\n\n/**\n * @todo\n */\nfunction quux () {\n\n}\n// Settings: {"jsdoc":{"tagNamePreference":{"todo":false}}}\n// Message: Blacklisted tag found (`@todo`)\n\n/**\n * @todo\n */\nfunction quux () {\n\n}\n// Settings: {"jsdoc":{"tagNamePreference":{"todo":{"message":"Please resolve to-dos or add to the tracker"}}}}\n// Message: Please resolve to-dos or add to the tracker\n\n/**\n * @todo\n */\nfunction quux () {\n\n}\n// Settings: {"jsdoc":{"tagNamePreference":{"todo":{"message":"Please use x-todo instead of todo","replacement":"x-todo"}}}}\n// Message: Please use x-todo instead of todo\n\n/**\n * @todo\n */\nfunction quux () {\n\n}\n// Settings: {"jsdoc":{"tagNamePreference":{"todo":{"message":"Please use x-todo instead of todo","replacement":"x-todo"}}}}\n// Message: Please use x-todo instead of todo\n\n/**\n * @todo\n */\nfunction quux () {\n\n}\n// Settings: {"jsdoc":{"tagNamePreference":{"todo":55}}}\n// Message: Invalid `settings.jsdoc.tagNamePreference`. Values must be falsy, a string, or an object.\n\n/**\n * @property {object} a\n * @prop {boolean} b\n */\nfunction quux () {\n\n}\n// Message: Invalid JSDoc tag (preference). Replace "prop" JSDoc tag with "property".\n\n/**\n * @abc foo\n * @abcd bar\n */\nfunction quux () {\n\n}\n// Settings: {"jsdoc":{"tagNamePreference":{"abc":"abcd"}}}\n// Options: [{"definedTags":["abcd"]}]\n// Message: Invalid JSDoc tag (preference). Replace "abc" JSDoc tag with "abcd".\n\n/**\n * @abc\n * @abcd\n */\nfunction quux () {\n\n}\n// Settings: {"jsdoc":{"tagNamePreference":{"abc":"abcd"}}}\n// Message: Invalid JSDoc tag (preference). Replace "abc" JSDoc tag with "abcd".\n\n/** \n * @modifies\n * @abstract\n * @access\n * @alias\n * @async\n * @augments\n * @author\n * @borrows\n * @callback\n * @class\n * @classdesc\n * @constant\n * @constructs\n * @copyright\n * @default\n * @deprecated\n * @description\n * @enum\n * @event\n * @example\n * @exports\n * @external\n * @file\n * @fires\n * @function\n * @generator\n * @global\n * @hideconstructor\n * @ignore\n * @implements\n * @inheritdoc\n * @inner\n * @instance\n * @interface\n * @kind\n * @lends\n * @license\n * @listens\n * @member\n * @memberof\n * @memberof!\n * @mixes\n * @mixin\n * @module\n * @name\n * @namespace\n * @override\n * @package\n * @param\n * @private\n * @property\n * @protected\n * @public\n * @readonly\n * @requires\n * @returns\n * @see\n * @since\n * @static\n * @summary\n * @this\n * @throws\n * @todo\n * @tutorial\n * @type\n * @typedef\n * @variation\n * @version\n * @yields\n */\nfunction quux (foo) {}\n// Settings: {"jsdoc":{"mode":"badMode"}}\n// Message: Unrecognized value `badMode` for `settings.jsdoc.mode`.\n\n/** \n * @modifies\n * @abstract\n * @access\n * @alias\n * @async\n * @augments\n * @author\n * @borrows\n * @callback\n * @class\n * @classdesc\n * @constant\n * @constructs\n * @copyright\n * @default\n * @deprecated\n * @description\n * @enum\n * @event\n * @example\n * @exports\n * @external\n * @file\n * @fires\n * @function\n * @generator\n * @global\n * @hideconstructor\n * @ignore\n * @implements\n * @inheritdoc\n * @inner\n * @instance\n * @interface\n * @kind\n * @lends\n * @license\n * @listens\n * @member\n * @memberof\n * @memberof!\n * @mixes\n * @mixin\n * @module\n * @name\n * @namespace\n * @override\n * @package\n * @param\n * @private\n * @property\n * @protected\n * @public\n * @readonly\n * @requires\n * @returns\n * @see\n * @since\n * @static\n * @summary\n * @this\n * @throws\n * @todo\n * @tutorial\n * @type\n * @typedef\n * @variation\n * @version\n * @yields\n * @template\n */\nfunction quux (foo) {}\n// Message: Invalid JSDoc tag name "template".\n\n/** \n * @externs\n */\nfunction quux (foo) {}\n// Message: Invalid JSDoc tag name "externs".\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n * @param foo\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @memberof! foo\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @arg foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"tagNamePreference":{"param":"arg"}}}\n\n/**\n * @bar foo\n */\nfunction quux (foo) {\n\n}\n// Options: [{"definedTags":["bar"]}]\n\n/**\n * @baz @bar foo\n */\nfunction quux (foo) {\n\n}\n// Options: [{"definedTags":["baz","bar"]}]\n\n/**\n * @baz @bar foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"tagNamePreference":{"param":"baz","returns":{"message":"Prefer `bar`","replacement":"bar"},"todo":false}}}\n\n/** \n * @modifies\n * @abstract\n * @access\n * @alias\n * @async\n * @augments\n * @author\n * @borrows\n * @callback\n * @class\n * @classdesc\n * @constant\n * @constructs\n * @copyright\n * @default\n * @deprecated\n * @description\n * @enum\n * @event\n * @example\n * @exports\n * @external\n * @file\n * @fires\n * @function\n * @generator\n * @global\n * @hideconstructor\n * @ignore\n * @implements\n * @inheritdoc\n * @inner\n * @instance\n * @interface\n * @kind\n * @lends\n * @license\n * @listens\n * @member\n * @memberof\n * @memberof!\n * @mixes\n * @mixin\n * @module\n * @name\n * @namespace\n * @override\n * @package\n * @param\n * @private\n * @property\n * @protected\n * @public\n * @readonly\n * @requires\n * @returns\n * @see\n * @since\n * @static\n * @summary\n * @this\n * @throws\n * @todo\n * @tutorial\n * @type\n * @typedef\n * @variation\n * @version\n * @yields\n */\nfunction quux (foo) {}\n\n/** \n * @modifies\n * @abstract\n * @access\n * @alias\n * @async\n * @augments\n * @author\n * @borrows\n * @callback\n * @class\n * @classdesc\n * @constant\n * @constructs\n * @copyright\n * @default\n * @deprecated\n * @description\n * @enum\n * @event\n * @example\n * @exports\n * @external\n * @file\n * @fires\n * @function\n * @generator\n * @global\n * @hideconstructor\n * @ignore\n * @implements\n * @inheritdoc\n * @inner\n * @instance\n * @interface\n * @kind\n * @lends\n * @license\n * @listens\n * @member\n * @memberof\n * @memberof!\n * @mixes\n * @mixin\n * @module\n * @name\n * @namespace\n * @override\n * @package\n * @param\n * @private\n * @property\n * @protected\n * @public\n * @readonly\n * @requires\n * @returns\n * @see\n * @since\n * @static\n * @summary\n * @this\n * @throws\n * @todo\n * @tutorial\n * @type\n * @typedef\n * @variation\n * @version\n * @yields\n * @template\n */\nfunction quux (foo) {}\n// Settings: {"jsdoc":{"mode":"typescript"}}\n\n/** \n * @externs\n */\nfunction quux (foo) {}\n// Settings: {"jsdoc":{"mode":"closure"}}\n\n/**\n *\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @todo\n */\nfunction quux () {\n\n}\n\n/**\n * @extends Foo\n */\nfunction quux () {\n\n}\n// Settings: {"jsdoc":{"tagNamePreference":{"augments":{"message":"@extends is to be used over @augments.","replacement":"extends"}}}}\n\n/**\n * Registers the `target` class as a transient dependency; each time the dependency is resolved a new instance will be created.\n *\n * @param target - The class / constructor function to register as transient.\n *\n * @example ```ts\n@transient()\nclass Foo { }\n```\n * @param Time for a new tag\n */\nexport function transient<T>(target?: T): T {\n  // ...\n}\n````\n\n\n<a name="eslint-plugin-jsdoc-rules-check-types"></a>\n### <code>check-types</code>\n\nReports invalid types.\n\nBy default, ensures that the casing of native types is the same as in this list:\n\n```\nundefined\nnull\nboolean\nnumber\nbigint\nstring\nsymbol\nobject\nArray\nFunction\nDate\nRegExp\n```\n\n<a name="eslint-plugin-jsdoc-rules-check-types-options-4"></a>\n#### Options\n\n`check-types` allows one option:\n\n- An option object:\n  - with the key `noDefaults` to insist that only the supplied option type\n    map is to be used, and that the default preferences (such as "string"\n    over "String") will not be enforced. The option\'s default is `false`.\n  - with the key `unifyParentAndChildTypeChecks` which will treat\n    `settings.jsdoc.preferredTypes` keys such as `SomeType` as matching\n    not only child types such as an unadorned `SomeType` but also\n    `SomeType<aChildType>`, `SomeType.<aChildType>`, or if `SomeType` is\n    `Array` (or `[]`), it will match `aChildType[]`. If this is `false` or\n    unset, the former format will only apply to types which are not parent\n    types/unions whereas the latter formats will only apply for parent\n    types/unions. The special types `[]`, `.<>` (or `.`), and `<>`\n    act only as parent types (and will not match a bare child type such as\n    `Array` even when unified, though, as mentioned, `Array` will match\n    say `string[]` or `Array.<string>` when unified). The special type\n    `*` is only a child type. Note that there is no detection of parent\n    and child type together, e.g., you cannot specify preferences for\n    `string[]` specifically as distinct from say `number[]`, but you can\n    target both with `[]` or the child types `number` or `string`.\n\nSee also the documentation on `settings.jsdoc.preferredTypes` which impacts\nthe behavior of `check-types`.\n\n<a name="eslint-plugin-jsdoc-rules-check-types-why-not-capital-case-everything"></a>\n#### Why not capital case everything?\n\nWhy are `boolean`, `number` and `string` exempt from starting with a capital letter? Let\'s take `string` as an example. In Javascript, everything is an object. The string Object has prototypes for string functions such as `.toUpperCase()`.\n\nFortunately we don\'t have to write `new String()` everywhere in our code. Javascript will automatically wrap string primitives into string Objects when we\'re applying a string function to a string primitive. This way the memory footprint is a tiny little bit smaller, and the [GC](https://en.wikipedia.org/wiki/Garbage_collection_(computer_science)) has less work to do.\n\nSo in a sense, there two types of strings in Javascript; `{string}` literals, also called primitives and `{String}` Objects. We use the primitives because it\'s easier to write and uses less memory. `{String}` and `{string}` are technically both valid, but they are not the same.\n\n```js\nnew String(\'lard\') // String {0: "l", 1: "a", 2: "r", 3: "d", length: 4}\n\'lard\' // "lard"\nnew String(\'lard\') === \'lard\' // false\n```\n\nTo make things more confusing, there are also object literals and object Objects. But object literals are still static Objects and object Objects are instantiated Objects. So an object primitive is still an object Object.\n\nHowever, `Object.create(null)` objects are not `instanceof Object`, however, so\nin the case of this Object we lower-case to indicate possible support for\nthese objects.\n\nBasically, for primitives, we want to define the type as a primitive, because that\'s what we use in 99.9% of cases. For everything else, we use the type rather than the primitive. Otherwise it would all just be `{object}`.\n\nIn short: It\'s not about consistency, rather about the 99.9% use case. (And some\nfunctions might not even support the objects if they are checking for identity.)\n\ntype name | `typeof` | check-types | testcase\n--|--|--|--\n**Array** | object | **Array** | `([]) instanceof Array` -> `true`\n**Function** | function | **function** | `(function f () {}) instanceof Function` -> `true`\n**Date** | object | **Date** | `(new Date()) instanceof Date` -> `true`\n**RegExp** | object | **RegExp** | `(new RegExp(/.+/)) instanceof RegExp` -> `true`\nObject | **object** | **object** | `({}) instanceof Object` -> `true` but `Object.create(null) instanceof Object` -> `false`\nBoolean | **boolean** | **boolean** | `(true) instanceof Boolean` -> **`false`**\nNumber | **number** | **number** | `(41) instanceof Number` -> **`false`**\nString | **string** | **string** | `("test") instanceof String` -> **`false`**\n\n|||\n|---|---|\n|Context|everywhere|\n|Tags|`augments`, `class`, `constant`, `enum`, `implements`, `member`, `module`, `namespace`, `param`, `property`, `returns`, `throws`, `type`, `typedef`, `yields`|\n|Aliases|`constructor`, `const`, `extends`, `var`, `arg`, `argument`, `prop`, `return`, `exception`, `yield`|\n|Closure-only|`package`, `private`, `protected`, `public`, `static`|\n|Options|`noDefaults`, `unifyParentAndChildTypeChecks`|\n|Settings|`preferredTypes`, `mode`|\n\nThe following patterns are considered problems:\n\n````js\n/**\n * @param {abc} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"preferredTypes":{"abc":100}}}\n// Message: Invalid `settings.jsdoc.preferredTypes`. Values must be falsy, a string, or an object.\n\n/**\n * @param {Number} foo\n */\nfunction quux (foo) {\n\n}\n// Message: Invalid JSDoc @param "foo" type "Number"; prefer: "number".\n\n/**\n * @arg {Number} foo\n */\nfunction quux (foo) {\n\n}\n// Message: Invalid JSDoc @arg "foo" type "Number"; prefer: "number".\n\n/**\n * @returns {Number} foo\n * @throws {Number} foo\n */\nfunction quux () {\n\n}\n// Message: Invalid JSDoc @returns type "Number"; prefer: "number".\n\n/**\n * @param {(Number|string|Boolean)=} foo\n */\nfunction quux (foo, bar, baz) {\n\n}\n// Message: Invalid JSDoc @param "foo" type "Number"; prefer: "number".\n\n/**\n * @param {Array.<Number|String>} foo\n */\nfunction quux (foo, bar, baz) {\n\n}\n// Message: Invalid JSDoc @param "foo" type "Number"; prefer: "number".\n\n/**\n * @param {(Number|String)[]} foo\n */\nfunction quux (foo, bar, baz) {\n\n}\n// Message: Invalid JSDoc @param "foo" type "Number"; prefer: "number".\n\n/**\n * @param {abc} foo\n */\nfunction qux(foo) {\n}\n// Settings: {"jsdoc":{"preferredTypes":{"abc":"Abc","string":"Str"}}}\n// Message: Invalid JSDoc @param "foo" type "abc"; prefer: "Abc".\n\n/**\n * @param {abc} foo\n */\nfunction qux(foo) {\n}\n// Settings: {"jsdoc":{"preferredTypes":{"abc":{"replacement":"Abc"},"string":"Str"}}}\n// Message: Invalid JSDoc @param "foo" type "abc"; prefer: "Abc".\n\n/**\n * @param {abc} foo\n */\nfunction qux(foo) {\n}\n// Settings: {"jsdoc":{"preferredTypes":{"abc":{"message":"Messed up JSDoc @{{tagName}}{{tagValue}} type \\"abc\\"; prefer: \\"Abc\\".","replacement":"Abc"},"string":"Str"}}}\n// Message: Messed up JSDoc @param "foo" type "abc"; prefer: "Abc".\n\n/**\n * @param {abc} foo\n * @param {cde} bar\n * @param {object} baz\n */\nfunction qux(foo, bar, baz) {\n}\n// Settings: {"jsdoc":{"preferredTypes":{"abc":{"message":"Messed up JSDoc @{{tagName}}{{tagValue}} type \\"abc\\"; prefer: \\"Abc\\".","replacement":"Abc"},"cde":{"message":"More messed up JSDoc @{{tagName}}{{tagValue}} type \\"cde\\"; prefer: \\"Cde\\".","replacement":"Cde"},"object":"Object"}}}\n// Message: Messed up JSDoc @param "foo" type "abc"; prefer: "Abc".\n\n/**\n * @param {abc} foo\n */\nfunction qux(foo) {\n}\n// Settings: {"jsdoc":{"preferredTypes":{"abc":{"message":"Messed up JSDoc @{{tagName}}{{tagValue}} type \\"abc\\".","replacement":false},"string":"Str"}}}\n// Message: Messed up JSDoc @param "foo" type "abc".\n\n/**\n * @param {abc} foo\n */\nfunction qux(foo) {\n}\n// Settings: {"jsdoc":{"preferredTypes":{"abc":{"message":"Messed up JSDoc @{{tagName}}{{tagValue}} type \\"abc\\"."},"string":"Str"}}}\n// Message: Messed up JSDoc @param "foo" type "abc".\n\n/**\n * @param {abc} foo\n * @param {Number} bar\n */\nfunction qux(foo, bar) {\n}\n// Settings: {"jsdoc":{"preferredTypes":{"abc":"Abc","string":"Str"}}}\n// Options: [{"noDefaults":true}]\n// Message: Invalid JSDoc @param "foo" type "abc"; prefer: "Abc".\n\n/**\n * @param {abc} foo\n * @param {Number} bar\n */\nfunction qux(foo, bar) {\n}\n// Settings: {"jsdoc":{"preferredTypes":{"abc":"Abc","string":"Str"}}}\n// Message: Invalid JSDoc @param "foo" type "abc"; prefer: "Abc".\n\n/**\n * @param {abc} foo\n */\nfunction qux(foo) {\n}\n// Settings: {"jsdoc":{"preferredTypes":{"abc":false,"string":"Str"}}}\n// Message: Invalid JSDoc @param "foo" type "abc".\n\n/**\n * @param {abc} foo\n */\nfunction qux(foo) {\n}\n// Settings: {"jsdoc":{"preferredTypes":{"abc":false}}}\n// Message: Invalid JSDoc @param "foo" type "abc".\n\n/**\n * @param {*} baz\n */\nfunction qux(baz) {\n}\n// Settings: {"jsdoc":{"preferredTypes":{"*":false,"abc":"Abc","string":"Str"}}}\n// Message: Invalid JSDoc @param "baz" type "*".\n\n/**\n * @param {*} baz\n */\nfunction qux(baz) {\n}\n// Settings: {"jsdoc":{"preferredTypes":{"*":"aaa","abc":"Abc","string":"Str"}}}\n// Message: Invalid JSDoc @param "baz" type "*"; prefer: "aaa".\n\n/**\n * @param {abc} foo\n * @param {Number} bar\n */\nfunction qux(foo, bar) {\n}\n// Settings: {"jsdoc":{"preferredTypes":{"abc":"Abc","string":"Str"}}}\n// Message: Invalid JSDoc @param "foo" type "abc"; prefer: "Abc".\n\n/**\n * @param {Array} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"preferredTypes":{"Array":"GenericArray"}}}\n// Message: Invalid JSDoc @param "foo" type "Array"; prefer: "GenericArray".\n\n/**\n * @param {Array} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"preferredTypes":{"Array":"GenericArray","Array.<>":"GenericArray"}}}\n// Message: Invalid JSDoc @param "foo" type "Array"; prefer: "GenericArray".\n\n/**\n * @param {Array.<string>} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"preferredTypes":{"Array.<>":"GenericArray"}}}\n// Message: Invalid JSDoc @param "foo" type "Array"; prefer: "GenericArray".\n\n/**\n * @param {Array<string>} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"preferredTypes":{"Array<>":"GenericArray"}}}\n// Message: Invalid JSDoc @param "foo" type "Array"; prefer: "GenericArray".\n\n/**\n * @param {string[]} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"preferredTypes":{"[]":"SpecialTypeArray"}}}\n// Message: Invalid JSDoc @param "foo" type "[]"; prefer: "SpecialTypeArray".\n\n/**\n * @param {string[]} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"preferredTypes":{"[]":"SpecialTypeArray"}}}\n// Options: [{"unifyParentAndChildTypeChecks":true}]\n// Message: Invalid JSDoc @param "foo" type "[]"; prefer: "SpecialTypeArray".\n\n/**\n * @param {string[]} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"preferredTypes":{"Array":"SpecialTypeArray"}}}\n// Options: [{"unifyParentAndChildTypeChecks":true}]\n// Message: Invalid JSDoc @param "foo" type "Array"; prefer: "SpecialTypeArray".\n\n/**\n * @param {object} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"preferredTypes":{"object":"GenericObject"}}}\n// Message: Invalid JSDoc @param "foo" type "object"; prefer: "GenericObject".\n\n/**\n * @param {object} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"preferredTypes":{"object":"GenericObject","object.<>":"GenericObject"}}}\n// Message: Invalid JSDoc @param "foo" type "object"; prefer: "GenericObject".\n\n/**\n * @param {object} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"preferredTypes":{"object":"GenericObject","object<>":"GenericObject"}}}\n// Message: Invalid JSDoc @param "foo" type "object"; prefer: "GenericObject".\n\n/**\n * @param {object.<string>} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"preferredTypes":{"object.<>":"GenericObject"}}}\n// Message: Invalid JSDoc @param "foo" type "object"; prefer: "GenericObject".\n\n/**\n * @param {object<string>} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"preferredTypes":{"object<>":"GenericObject"}}}\n// Message: Invalid JSDoc @param "foo" type "object"; prefer: "GenericObject".\n\n/**\n * @param {object.<string, number>} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"preferredTypes":{"object.<>":"GenericObject"}}}\n// Message: Invalid JSDoc @param "foo" type "object"; prefer: "GenericObject".\n\n/**\n * @param {object<string, number>} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"preferredTypes":{"object<>":"GenericObject"}}}\n// Message: Invalid JSDoc @param "foo" type "object"; prefer: "GenericObject".\n\n/**\n * @param {object.<string>} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"preferredTypes":{"object":"GenericObject"}}}\n// Options: [{"unifyParentAndChildTypeChecks":true}]\n// Message: Invalid JSDoc @param "foo" type "object"; prefer: "GenericObject".\n\n/**\n * @param {object<string>} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"preferredTypes":{"object":"GenericObject"}}}\n// Options: [{"unifyParentAndChildTypeChecks":true}]\n// Message: Invalid JSDoc @param "foo" type "object"; prefer: "GenericObject".\n\n/**\n * @param {object} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"preferredTypes":{"object":"GenericObject"}}}\n// Options: [{"unifyParentAndChildTypeChecks":true}]\n// Message: Invalid JSDoc @param "foo" type "object"; prefer: "GenericObject".\n\n/**\n * @param {object} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"preferredTypes":{"object":false}}}\n// Options: [{"unifyParentAndChildTypeChecks":true}]\n// Message: Invalid JSDoc @param "foo" type "object".\n\n/**\n * @param {object} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"preferredTypes":{"object":false}}}\n// Message: Invalid JSDoc @param "foo" type "object".\n\n/**\n * @param {object.<string, number>} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"preferredTypes":{"object":"GenericObject"}}}\n// Options: [{"unifyParentAndChildTypeChecks":true}]\n// Message: Invalid JSDoc @param "foo" type "object"; prefer: "GenericObject".\n\n/**\n * @param {object<string, number>} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"preferredTypes":{"object":"GenericObject"}}}\n// Options: [{"unifyParentAndChildTypeChecks":true}]\n// Message: Invalid JSDoc @param "foo" type "object"; prefer: "GenericObject".\n\n/**\n *\n * @param {string[][]} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"preferredTypes":{"[]":"Array."}}}\n// Message: Invalid JSDoc @param "foo" type "[]"; prefer: "Array.".\n\n/**\n *\n * @param {string[][]} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"preferredTypes":{"[]":"Array.<>"}}}\n// Message: Invalid JSDoc @param "foo" type "[]"; prefer: "Array.<>".\n\n/**\n *\n * @param {string[][]} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"preferredTypes":{"[]":"Array<>"}}}\n// Message: Invalid JSDoc @param "foo" type "[]"; prefer: "Array<>".\n\n/**\n *\n * @param {object.<string, object.<string, string>>} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"preferredTypes":{"object.":"Object"}}}\n// Message: Invalid JSDoc @param "foo" type "object"; prefer: "Object".\n\n/**\n *\n * @param {object.<string, object.<string, string>>} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"preferredTypes":{"object.":"Object<>"}}}\n// Message: Invalid JSDoc @param "foo" type "object"; prefer: "Object<>".\n\n/**\n *\n * @param {object<string, object<string, string>>} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"preferredTypes":{"object<>":"Object."}}}\n// Message: Invalid JSDoc @param "foo" type "object"; prefer: "Object.".\n\n/**\n *\n * @param {Array.<Array.<string>>} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"preferredTypes":{"Array.":"[]"}}}\n// Message: Invalid JSDoc @param "foo" type "Array"; prefer: "[]".\n\n/**\n *\n * @param {Array.<Array.<string>>} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"preferredTypes":{"Array.":"Array<>"}}}\n// Message: Invalid JSDoc @param "foo" type "Array"; prefer: "Array<>".\n\n/**\n *\n * @param {Array.<Array.<string>>} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"preferredTypes":{"Array.":"<>"}}}\n// Message: Invalid JSDoc @param "foo" type "Array"; prefer: "<>".\n\n/**\n *\n * @param {Array.<MyArray.<string>>} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"preferredTypes":{"Array.":"<>"}}}\n// Message: Invalid JSDoc @param "foo" type "Array"; prefer: "<>".\n\n/**\n *\n * @param {Array.<MyArray.<string>>} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"preferredTypes":{"MyArray.":"<>"}}}\n// Message: Invalid JSDoc @param "foo" type "MyArray"; prefer: "<>".\n\n/**\n *\n * @param {Array<Array<string>>} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"preferredTypes":{"<>":"Array."}}}\n// Message: Invalid JSDoc @param "foo" type "Array"; prefer: "Array.".\n\n/**\n *\n * @param {Array<Array<string>>} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"preferredTypes":{"Array":"Array."}}}\n// Options: [{"unifyParentAndChildTypeChecks":true}]\n// Message: Invalid JSDoc @param "foo" type "Array"; prefer: "Array.".\n\n/**\n *\n * @param {Array<Array<string>>} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"preferredTypes":{"<>":"[]"}}}\n// Message: Invalid JSDoc @param "foo" type "Array"; prefer: "[]".\n\n/** @typedef {String} foo */\n// Message: Invalid JSDoc @typedef "foo" type "String"; prefer: "string".\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n * @param {number} foo\n * @param {Bar} bar\n * @param {*} baz\n */\nfunction quux (foo, bar, baz) {\n\n}\n\n/**\n * @arg {number} foo\n * @arg {Bar} bar\n * @arg {*} baz\n */\nfunction quux (foo, bar, baz) {\n\n}\n\n/**\n * @param {(number|string|boolean)=} foo\n */\nfunction quux (foo, bar, baz) {\n\n}\n\n/**\n * @param {typeof bar} foo\n */\nfunction qux(foo) {\n}\n\n/**\n * @param {import(\'./foo\').bar.baz} foo\n */\nfunction qux(foo) {\n}\n\n/**\n * @param {(x: number, y: string) => string} foo\n */\nfunction qux(foo) {\n}\n\n/**\n * @param {() => string} foo\n */\nfunction qux(foo) {\n}\n\n/**\n * @returns {Number} foo\n * @throws {Number} foo\n */\nfunction quux () {\n\n}\n// Options: [{"noDefaults":true}]\n\n/**\n * @param {Object} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"preferredTypes":{"object":"Object"}}}\n\n/**\n * @param {Array} foo\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @param {Array.<string>} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"preferredTypes":{"Array":"GenericArray"}}}\n\n/**\n * @param {Array<string>} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"preferredTypes":{"Array":"GenericArray"}}}\n\n/**\n * @param {string[]} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"preferredTypes":{"Array":"SpecialTypeArray","Array.<>":"SpecialTypeArray","Array<>":"SpecialTypeArray"}}}\n\n/**\n * @param {string[]} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"preferredTypes":{"Array.<>":"SpecialTypeArray","Array<>":"SpecialTypeArray"}}}\n// Options: [{"unifyParentAndChildTypeChecks":true}]\n\n/**\n * @param {Array} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"preferredTypes":{"[]":"SpecialTypeArray"}}}\n\n/**\n * @param {Array} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"preferredTypes":{"[]":"SpecialTypeArray"}}}\n// Options: [{"unifyParentAndChildTypeChecks":true}]\n\n/**\n * @param {Array} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"preferredTypes":{"Array.<>":"GenericArray"}}}\n\n/**\n * @param {Array} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"preferredTypes":{"Array<>":"GenericArray"}}}\n\n/**\n * @param {object} foo\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @param {object.<string>} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"preferredTypes":{"object":"GenericObject"}}}\n\n/**\n * @param {object<string>} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"preferredTypes":{"object":"GenericObject"}}}\n\n/**\n * @param {object.<string, number>} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"preferredTypes":{"object":"GenericObject"}}}\n\n/**\n * @param {object<string, number>} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"preferredTypes":{"object":"GenericObject"}}}\n\n/**\n * @param {object} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"preferredTypes":{"object.<>":"GenericObject"}}}\n\n/**\n * @param {object} foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"preferredTypes":{"object<>":"GenericObject"}}}\n\n/**\n * @param {Number<} Ignore the error as not a validating rule\n */\nfunction quux (foo) {\n\n}\n\n/** @param {function(...)} callback The function to invoke. */\nvar subscribe = function(callback) {};\n````\n\n\n<a name="eslint-plugin-jsdoc-rules-check-values"></a>\n### <code>check-values</code>\n\nThis rule checks the values for a handful of tags:\n\n1. `@version` - Checks that there is a present and valid\n    [semver](https://semver.org/) version value.\n2. `@since` - As with `@version`\n3. `@license` - Checks that there is a present and valid SPDX identifier\n    or is present within an `allowedLicenses` option.\n4. `@author` - Checks there is a value present, and if the option\n    `allowedAuthors` is present, ensure that the author value is one\n    of these array items.\n\n<a name="eslint-plugin-jsdoc-rules-check-values-options-5"></a>\n#### Options\n\n<a name="eslint-plugin-jsdoc-rules-check-values-options-5-allowedauthors"></a>\n##### <code>allowedAuthors</code>\n\nAn array of allowable author values. If absent, only non-whitespace will\nbe checked for.\n\n<a name="eslint-plugin-jsdoc-rules-check-values-options-5-allowedlicenses"></a>\n##### <code>allowedLicenses</code>\n\nAn array of allowable license values or `true` to allow any license text.\nIf present as an array, will be used in place of SPDX identifiers.\n\n<a name="eslint-plugin-jsdoc-rules-check-values-options-5-licensepattern"></a>\n##### <code>licensePattern</code>\n\nA string to be converted into a `RegExp` (with `u` flag) and whose first\nparenthetical grouping, if present, will match the portion of the license\ndescription to check (if no grouping is present, then the whole portion\nmatched will be used). Defaults to `([^\\n]*)`, i.e., the SPDX expression\nis expected before any line breaks.\n\n|||\n|---|---|\n|Context|everywhere|\n|Tags|`@version`, `@since`, `@license`, `@author`|\n|Options|`allowedAuthors`, `allowedLicenses`, `licensePattern`|\n|Settings|`tagNamePreference`|\n\nThe following patterns are considered problems:\n\n````js\n/**\n * @version\n */\nfunction quux (foo) {\n\n}\n// Message: Missing JSDoc @version.\n\n/**\n * @version 3.1\n */\nfunction quux (foo) {\n\n}\n// Message: Invalid JSDoc @version: "3.1".\n\n/**\n * @since\n */\nfunction quux (foo) {\n\n}\n// Message: Missing JSDoc @since.\n\n/**\n * @since 3.1\n */\nfunction quux (foo) {\n\n}\n// Message: Invalid JSDoc @since: "3.1".\n\n/**\n * @license\n */\nfunction quux (foo) {\n\n}\n// Message: Missing JSDoc @license.\n\n/**\n * @license FOO\n */\nfunction quux (foo) {\n\n}\n// Message: Invalid JSDoc @license: "FOO"; expected SPDX expression: https://spdx.org/licenses/.\n\n/**\n * @license FOO\n */\nfunction quux (foo) {\n\n}\n// Options: [{"allowedLicenses":["BAR","BAX"]}]\n// Message: Invalid JSDoc @license: "FOO"; expected one of BAR, BAX.\n\n/**\n * @license MIT-7\n * Some extra text...\n */\nfunction quux (foo) {\n\n}\n// Message: Invalid JSDoc @license: "MIT-7"; expected SPDX expression: https://spdx.org/licenses/.\n\n/**\n * @license (MIT OR GPL-2.5)\n */\nfunction quux (foo) {\n\n}\n// Message: Invalid JSDoc @license: "(MIT OR GPL-2.5)"; expected SPDX expression: https://spdx.org/licenses/.\n\n/**\n * @license MIT\n * Some extra text\n */\nfunction quux (foo) {\n\n}\n// Options: [{"licensePattern":"[\\\\s\\\\S]*"}]\n// Message: Invalid JSDoc @license: "MIT\nSome extra text"; expected SPDX expression: https://spdx.org/licenses/.\n\n/**\n * @author\n */\nfunction quux (foo) {\n\n}\n// Message: Missing JSDoc @author.\n\n/**\n * @author Brett Zamir\n */\nfunction quux (foo) {\n\n}\n// Options: [{"allowedAuthors":["Gajus Kuizinas","golopot"]}]\n// Message: Invalid JSDoc @author: "Brett Zamir"; expected one of Gajus Kuizinas, golopot.\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n * @version 3.4.1\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @since 3.4.1\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @license MIT\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @license MIT\n * Some extra text...\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @license (MIT OR GPL-2.0)\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @license FOO\n */\nfunction quux (foo) {\n\n}\n// Options: [{"allowedLicenses":["FOO","BAR","BAX"]}]\n\n/**\n * @license FOO\n */\nfunction quux (foo) {\n\n}\n// Options: [{"allowedLicenses":true}]\n\n/**\n * @license MIT\n * Some extra text\n */\nfunction quux (foo) {\n\n}\n// Options: [{"licensePattern":"[^\\n]*"}]\n\n/**\n * @author Gajus Kuizinas\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @author Brett Zamir\n */\nfunction quux (foo) {\n\n}\n// Options: [{"allowedAuthors":["Gajus Kuizinas","golopot","Brett Zamir"]}]\n````\n\n\n<a name="eslint-plugin-jsdoc-rules-empty-tags"></a>\n### <code>empty-tags</code>\n\nExpects the following tags to be empty of any content:\n\n- `@abstract`\n- `@async`\n- `@generator`\n- `@global`\n- `@hideconstructor`\n- `@ignore`\n- `@inheritdoc`\n- `@inner`\n- `@instance`\n- `@override`\n- `@readonly`\n\nThe following will also be expected to be empty unless `settings.jsdoc.mode`\nis set to "closure" (which allows types).\n\n- `@package`\n- `@private`\n- `@protected`\n- `@public`\n- `@static`\n\n<a name="eslint-plugin-jsdoc-rules-empty-tags-options-6"></a>\n#### Options\n\n<a name="eslint-plugin-jsdoc-rules-empty-tags-options-6-tags"></a>\n##### <code>tags</code>\n\nIf you want additional tags to be checked for their descriptions, you may\nadd them within this option.\n\n```js\n{\n  \'jsdoc/empty-tags\': [\'error\', {tags: [\'event\']}]\n}\n```\n\n|||\n|---|---|\n|Context|everywhere|\n|Tags| and others added by `tags`|\n|Aliases||\n|Options|`tags`|\nThe following patterns are considered problems:\n\n````js\n/**\n * @abstract extra text\n */\nfunction quux () {\n\n}\n// Message: @abstract should be empty.\n\n/**\n * @abstract extra text\n * @inheritdoc\n * @async out of place\n */\nfunction quux () {\n\n}\n// Message: @abstract should be empty.\n\n/**\n * @event anEvent\n */\nfunction quux () {\n\n}\n// Options: [{"tags":["event"]}]\n// Message: @event should be empty.\n\n/**\n * @private {someType}\n */\nfunction quux () {\n\n}\n// Message: @private should be empty.\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n * @abstract\n */\nfunction quux () {\n\n}\n\n/**\n *\n */\nfunction quux () {\n\n}\n\n/**\n * @param aName\n */\nfunction quux () {\n\n}\n\n/**\n * @abstract\n * @inheritdoc\n * @async\n */\nfunction quux () {\n\n}\n\n/**\n * @private {someType}\n */\nfunction quux () {\n\n}\n// Settings: {"jsdoc":{"mode":"closure"}}\n\n/**\n * @private\n */\nfunction quux () {\n\n}\n````\n\n\n<a name="eslint-plugin-jsdoc-rules-implements-on-classes"></a>\n### <code>implements-on-classes</code>\n\nReports an issue with any non-constructor function using `@implements`.\n\nConstructor functions, whether marked with `@class`, `@constructs`, or being\nan ES6 class constructor, will not be flagged.\n\n|||\n|---|---|\n|Context|`ArrowFunctionExpression`, `FunctionDeclaration`, `FunctionExpression`|\n|Tags|`implements` (prevented)|\n\nThe following patterns are considered problems:\n\n````js\n/**\n * @implements {SomeClass}\n */\nfunction quux () {\n\n}\n// Message: @implements used on a non-constructor function\n\n/**\n * @implements {SomeClass}\n */\nfunction quux () {\n\n}\n// Settings: {"jsdoc":{"tagNamePreference":{"implements":false}}}\n// Message: Unexpected tag `@implements`\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n * @implements {SomeClass}\n * @class\n */\nfunction quux () {\n\n}\n\n/**\n * @implements {SomeClass}\n * @constructor\n */\nfunction quux () {\n\n}\n\n/**\n *\n */\nclass quux {\n  /**\n   * @implements {SomeClass}\n   */\n  constructor () {\n\n  }\n}\n\n/**\n *\n */\nconst quux = class {\n  /**\n   * @implements {SomeClass}\n   */\n  constructor () {\n\n  }\n}\n\n/**\n *\n */\nfunction quux () {\n\n}\n\n/**\n *\n */\nfunction quux () {\n\n}\n// Settings: {"jsdoc":{"tagNamePreference":{"implements":false}}}\n````\n\n\n<a name="eslint-plugin-jsdoc-rules-match-description"></a>\n### <code>match-description</code>\n\nEnforces a regular expression pattern on descriptions.\n\nThe default is this basic expression to match English sentences (Support\nfor Unicode upper case may be added in a future version when it can be handled\nby our supported Node versions):\n\n``^([A-Z]|[`\\\\d_])[\\\\s\\\\S]*[.?!`]$``\n\nApplies to the jsdoc block description and `@description` (or `@desc`)\nby default but the `tags` option (see below) may be used to match other tags.\n\n<a name="eslint-plugin-jsdoc-rules-match-description-options-7"></a>\n#### Options\n\n<a name="eslint-plugin-jsdoc-rules-match-description-options-7-matchdescription"></a>\n##### <code>matchDescription</code>\n\nYou can supply your own expression to override the default, passing a\n`matchDescription` string on the options object.\n\n```js\n{\n  \'jsdoc/match-description\': [\'error\', {matchDescription: \'[A-Z].*\\\\.\'}]\n}\n```\n\nAs with the default, the supplied regular expression will be applied with the\nUnicode (`"u"`) flag and is *not* case-insensitive.\n\n<a name="eslint-plugin-jsdoc-rules-match-description-options-7-tags-1"></a>\n##### <code>tags</code>\n\nIf you want different regular expressions to apply to tags, you may use\nthe `tags` option object:\n\n```js\n{\n  \'jsdoc/match-description\': [\'error\', {tags: {\n    param: \'\\\\- [A-Z].*\\\\.\',\n    returns: \'[A-Z].*\\\\.\'\n  }}]\n}\n```\n\nIn place of a string, you can also add `true` to indicate that a particular\ntag should be linted with the `matchDescription` value (or the default).\n\n```js\n{\n  \'jsdoc/match-description\': [\'error\', {tags: {\n    param: true,\n    returns: true\n  }}]\n}\n```\n\nThe tags `@param`/`@arg`/`@argument` and `@property`/`@prop` will be properly\nparsed to ensure that the matched "description" text includes only the text\nafter the name.\n\nAll other tags will treat the text following the tag name, a space, and\nan optional curly-bracketed type expression (and another space) as part of\nits "description" (e.g., for `@returns {someType} some description`, the\ndescription is `some description` while for `@some-tag xyz`, the description\nis `xyz`).\n\n<a name="eslint-plugin-jsdoc-rules-match-description-options-7-maindescription"></a>\n##### <code>mainDescription</code>\n\nIf you wish to override the main function description without changing the\ndefault `match-description`, you may use `mainDescription`:\n\n```js\n{\n  \'jsdoc/match-description\': [\'error\', {\n    mainDescription: \'[A-Z].*\\\\.\',\n    tags: {\n      param: true,\n      returns: true\n    }\n  }]\n}\n```\n\nThere is no need to add `mainDescription: true`, as by default, the main\nfunction (and only the main function) is linted, though you may disable checking\nit by setting it to `false`.\n\n<a name="eslint-plugin-jsdoc-rules-match-description-options-7-contexts"></a>\n##### <code>contexts</code>\n\nSet this to an array of strings representing the AST context\nwhere you wish the rule to be applied (e.g., `ClassDeclaration` for ES6 classes).\nOverrides the default contexts (see below).\n\n|||\n|---|---|\n|Context|`ArrowFunctionExpression`, `FunctionDeclaration`, `FunctionExpression`; others when `contexts` option enabled|\n|Tags|docblock and `@description` by default but more with `tags`|\n|Aliases|`@desc`|\n|Settings||\n|Options|`contexts`, `tags` (accepts tags with names and optional type such as \'param\', \'arg\', \'argument\', \'property\', and \'prop\', and accepts arbitrary list of other tags with an optional type (but without names), e.g., \'returns\', \'return\'), `mainDescription`, `matchDescription`|\n\nThe following patterns are considered problems:\n\n````js\n/**\n * foo.\n */\nconst q = class {\n\n}\n// Options: [{"contexts":["ClassExpression"]}]\n// Message: JSDoc description does not satisfy the regex pattern.\n\n/**\n * foo.\n */\nconst q = {\n\n};\n// Options: [{"contexts":["ObjectExpression"]}]\n// Message: JSDoc description does not satisfy the regex pattern.\n\n/**\n * foo.\n */\nfunction quux () {\n\n}\n// Message: JSDoc description does not satisfy the regex pattern.\n\n/**\n * Foo)\n */\nfunction quux () {\n\n}\n// Message: JSDoc description does not satisfy the regex pattern.\n\n/**\n * \xd1\x82\xd0\xb5\xd1\x81\xd1\x82.\n */\nfunction quux () {\n\n}\n// Options: [{"matchDescription":"[\xd0\x90-\xd0\xaf][\xd0\x90-\xd1\x8f]+\\\\."}]\n// Message: JSDoc description does not satisfy the regex pattern.\n\n/**\n * Abc.\n */\nfunction quux () {\n\n}\n// Options: [{"mainDescription":"[\xd0\x90-\xd0\xaf][\xd0\x90-\xd1\x8f]+\\\\.","tags":{"param":true}}]\n// Message: JSDoc description does not satisfy the regex pattern.\n\n/**\n * Foo\n */\nfunction quux () {\n\n}\n// Message: JSDoc description does not satisfy the regex pattern.\n\n/**\n * Foo.\n *\n * @param foo foo.\n */\nfunction quux (foo) {\n\n}\n// Options: [{"tags":{"param":true}}]\n// Message: JSDoc description does not satisfy the regex pattern.\n\n/**\n * Foo.\n *\n * @prop foo foo.\n */\nfunction quux (foo) {\n\n}\n// Options: [{"tags":{"prop":true}}]\n// Message: JSDoc description does not satisfy the regex pattern.\n\n/**\n * Foo.\n *\n * @summary foo.\n */\nfunction quux () {\n\n}\n// Options: [{"tags":{"summary":true}}]\n// Message: JSDoc description does not satisfy the regex pattern.\n\n/**\n * Foo.\n *\n * @author\n */\nfunction quux () {\n\n}\n// Options: [{"tags":{"author":".+"}}]\n// Message: JSDoc description does not satisfy the regex pattern.\n\n/**\n * Foo.\n *\n * @x-tag\n */\nfunction quux () {\n\n}\n// Options: [{"tags":{"x-tag":".+"}}]\n// Message: JSDoc description does not satisfy the regex pattern.\n\n/**\n * Foo.\n *\n * @description foo foo.\n */\nfunction quux (foo) {\n\n}\n// Options: [{"tags":{"description":true}}]\n// Message: JSDoc description does not satisfy the regex pattern.\n\n/**\n * Foo\n *\n * @param foo foo.\n */\nfunction quux (foo) {\n\n}\n// Options: [{"mainDescription":"^[a-zA-Z]*$","tags":{"param":true}}]\n// Message: JSDoc description does not satisfy the regex pattern.\n\n/**\n * Foo\n *\n * @param foo foo.\n */\nfunction quux (foo) {\n\n}\n// Options: [{"mainDescription":false,"tags":{"param":true}}]\n// Message: JSDoc description does not satisfy the regex pattern.\n\n/**\n * Foo.\n *\n * @param foo bar\n */\nfunction quux (foo) {\n\n}\n// Options: [{"tags":{"param":true}}]\n// Message: JSDoc description does not satisfy the regex pattern.\n\n/**\n * {@see Foo.bar} buz\n */\nfunction quux (foo) {\n\n}\n// Message: JSDoc description does not satisfy the regex pattern.\n\n/**\n * Foo.\n *\n * @returns {number} foo\n */\nfunction quux (foo) {\n\n}\n// Options: [{"tags":{"returns":true}}]\n// Message: JSDoc description does not satisfy the regex pattern.\n\n/**\n * Foo.\n *\n * @returns foo.\n */\nfunction quux (foo) {\n\n}\n// Options: [{"tags":{"returns":true}}]\n// Message: JSDoc description does not satisfy the regex pattern.\n\n/**\n * lorem ipsum dolor sit amet, consectetur adipiscing elit. pellentesque elit diam,\n * iaculis eu dignissim sed, ultrices sed nisi. nulla at ligula auctor, consectetur neque sed,\n * tincidunt nibh. vivamus sit amet vulputate ligula. vivamus interdum elementum nisl,\n * vitae rutrum tortor semper ut. morbi porta ante vitae dictum fermentum.\n * proin ut nulla at quam convallis gravida in id elit. sed dolor mauris, blandit quis ante at,\n * consequat auctor magna. duis pharetra purus in porttitor mollis.\n */\nfunction longDescription (foo) {\n\n}\n// Message: JSDoc description does not satisfy the regex pattern.\n\n/**\n * @arg {number} foo - Foo\n */\nfunction quux (foo) {\n\n}\n// Options: [{"tags":{"arg":true}}]\n// Message: JSDoc description does not satisfy the regex pattern.\n\n/**\n * @argument {number} foo - Foo\n */\nfunction quux (foo) {\n\n}\n// Options: [{"tags":{"argument":true}}]\n// Message: JSDoc description does not satisfy the regex pattern.\n\n/**\n * @return {number} foo\n */\nfunction quux (foo) {\n\n}\n// Options: [{"tags":{"return":true}}]\n// Message: JSDoc description does not satisfy the regex pattern.\n\n/**\n * Returns bar.\n *\n * @return {number} bar\n */\nfunction quux (foo) {\n\n}\n// Options: [{"tags":{"return":true}}]\n// Message: JSDoc description does not satisfy the regex pattern.\n\n/**\n * @param notRet\n * @returns \xd0\xa2\xd0\xb5\xd1\x81\xd1\x82.\n */\nfunction quux () {\n\n}\n// Options: [{"tags":{"param":"[\xd0\x90-\xd0\xaf][\xd0\x90-\xd1\x8f]+\\\\."}}]\n// Message: JSDoc description does not satisfy the regex pattern.\n\n/**\n * @description notRet\n * @returns \xd0\xa2\xd0\xb5\xd1\x81\xd1\x82.\n */\nfunction quux () {\n\n}\n// Options: [{"tags":{"description":"[\xd0\x90-\xd0\xaf][\xd0\x90-\xd1\x8f]+\\\\."}}]\n// Message: JSDoc description does not satisfy the regex pattern.\n\n/**\n * foo.\n */\nclass quux {\n\n}\n// Options: [{"contexts":["ClassDeclaration"]}]\n// Message: JSDoc description does not satisfy the regex pattern.\n\nclass MyClass {\n  /**\n   * Abc\n   */\n  myClassField = 1\n}\n// Options: [{"contexts":["ClassProperty"]}]\n// Message: JSDoc description does not satisfy the regex pattern.\n\n/**\n * foo.\n */\ninterface quux {\n\n}\n// Options: [{"contexts":["TSInterfaceDeclaration"]}]\n// Message: JSDoc description does not satisfy the regex pattern.\n\nconst myObject = {\n  /**\n   * Bad description\n   */\n  myProp: true\n};\n// Options: [{"contexts":["Property"]}]\n// Message: JSDoc description does not satisfy the regex pattern.\n\n/**\n * @param foo Foo bar\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"tagNamePreference":{"description":false}}}\n// Options: [{"tags":{"param":true}}]\n// Message: JSDoc description does not satisfy the regex pattern.\n\n/**\n * Foo bar\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"tagNamePreference":{"description":false}}}\n// Message: JSDoc description does not satisfy the regex pattern.\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n * @param foo - Foo.\n */\nfunction quux () {\n\n}\n// Options: [{"tags":{"param":true}}]\n\n/**\n * Foo.\n */\nfunction quux () {\n\n}\n\n/**\n * Foo.\n * Bar.\n */\nfunction quux () {\n\n}\n\n/**\n * Foo.\n *\n * Bar.\n */\nfunction quux () {\n\n}\n\n/**\n * \xd0\xa2\xd0\xb5\xd1\x81\xd1\x82.\n */\nfunction quux () {\n\n}\n// Options: [{"matchDescription":"[\xd0\x90-\xd0\xaf][\xd0\x90-\xd1\x8f]+\\\\."}]\n\n/**\n * @param notRet\n * @returns \xd0\xa2\xd0\xb5\xd1\x81\xd1\x82.\n */\nfunction quux () {\n\n}\n// Options: [{"tags":{"returns":"[\xd0\x90-\xd0\xaf][\xd0\x90-\xd1\x8f]+\\\\."}}]\n\n/**\n * @param notRet\n * @description \xd0\xa2\xd0\xb5\xd1\x81\xd1\x82.\n */\nfunction quux () {\n\n}\n// Options: [{"tags":{"description":"[\xd0\x90-\xd0\xaf][\xd0\x90-\xd1\x8f]+\\\\."}}]\n\n/**\n * Foo\n * bar.\n */\nfunction quux () {\n\n}\n\n/**\n * @returns Foo bar.\n */\nfunction quux () {\n\n}\n// Options: [{"tags":{"returns":true}}]\n\n/**\n * @returns {type1} Foo bar.\n */\nfunction quux () {\n\n}\n// Options: [{"tags":{"returns":true}}]\n\n/**\n * @description Foo bar.\n */\nfunction quux () {\n\n}\n// Options: [{"tags":{"description":true}}]\n\n/**\n * Foo. {@see Math.sin}.\n */\nfunction quux () {\n\n}\n\n/**\n * Foo {@see Math.sin} bar.\n */\nfunction quux () {\n\n}\n\n/**\n * Foo?\n *\n * Bar!\n *\n * Baz:\n *   1. Foo.\n *   2. Bar.\n */\nfunction quux () {\n\n}\n\n/**\n * Hello:\n * World.\n */\nfunction quux () {\n\n}\n\n/**\n * Hello: world.\n */\nfunction quux () {\n\n}\n\n/**\n * Foo\n * Bar.\n */\nfunction quux () {\n\n}\n\n/**\n * Foo.\n *\n * foo.\n */\nfunction quux () {\n\n}\n\n/**\n * foo.\n */\nfunction quux () {\n\n}\n// Options: [{"mainDescription":false}]\n\n/**\n * foo.\n */\nclass quux {\n\n}\n\n/**\n * foo.\n */\nclass quux {\n\n}\n// Options: [{"mainDescription":true}]\n\nclass MyClass {\n  /**\n   * Abc.\n   */\n  myClassField = 1\n}\n// Options: [{"contexts":["ClassProperty"]}]\n\n/**\n * Foo.\n */\ninterface quux {\n\n}\n// Options: [{"contexts":["TSInterfaceDeclaration"]}]\n\nconst myObject = {\n  /**\n   * Bad description\n   */\n  myProp: true\n};\n// Options: [{"contexts":[]}]\n\n/**\n * foo.\n */\nconst q = class {\n\n}\n// Options: [{"contexts":[]}]\n\n/**\n * foo.\n */\nconst q = {\n\n};\n// Options: [{"contexts":[]}]\n\n/**\n * @description foo.\n */\nfunction quux () {\n\n}\n// Options: [{"tags":{"param":true}}]\n\n/**\n * Foo.\n *\n * @summary Foo.\n */\nfunction quux () {\n\n}\n// Options: [{"tags":{"summary":true}}]\n\n/**\n * Foo.\n *\n * @author Somebody\n */\nfunction quux () {\n\n}\n// Options: [{"tags":{"author":".+"}}]\n\n/**\n * Foo.\n *\n * @x-tag something\n */\nfunction quux () {\n\n}\n// Options: [{"tags":{"x-tag":".+"}}]\n\n/**\n * Foo.\n *\n * @prop foo Foo.\n */\nfunction quux (foo) {\n\n}\n// Options: [{"tags":{"prop":true}}]\n\n/**\n * @param foo Foo bar.\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"tagNamePreference":{"description":false}}}\n\n/**\n *\n */\nfunction quux () {\n\n}\n// Settings: {"jsdoc":{"tagNamePreference":{"description":false}}}\n````\n\n\n<a name="eslint-plugin-jsdoc-rules-newline-after-description"></a>\n### <code>newline-after-description</code>\n\nEnforces a consistent padding of the block description.\n\n<a name="eslint-plugin-jsdoc-rules-newline-after-description-options-8"></a>\n#### Options\n\nThis rule allows one optional string argument. If it is `"always"` then a problem is raised when there is no newline after the description. If it is `"never"` then a problem is raised when there is a newline after the description. The default value is `"always"`.\n\n|||\n|---|---|\n|Context|everywhere|\n|Options|(a string matching `"always"|"never"`)|\n|Tags|N/A (doc block)|\n\nThe following patterns are considered problems:\n\n````js\n/**\n * Foo.\n *\n * Foo.\n * @foo\n */\nfunction quux () {\n\n}\n// Options: ["always"]\n// Message: There must be a newline after the description of the JSDoc block.\n\n/**\n * Foo.\n * @foo\n *\n * Foo.\n */\nfunction quux () {\n\n}\n// Options: ["always"]\n// Message: There must be a newline after the description of the JSDoc block.\n\n/**\n * Foo.\n *\n * Foo.\n * @foo\n */\nfunction quux () {\n\n}\n// Message: There must be a newline after the description of the JSDoc block.\n\n/**\n * Bar.\n *\n * Bar.\n *\n * @bar\n */\nfunction quux () {\n\n}\n// Options: ["never"]\n// Message: There must be no newline after the description of the JSDoc block.\n\n/**\n * Bar.\n *\n * @bar\n *\n * Bar.\n */\nfunction quux () {\n\n}\n// Options: ["never"]\n// Message: There must be no newline after the description of the JSDoc block.\n\n\n         /**\r\n          * Bar.\r\n          *\r\n          * Bar.\r\n          *\r\n          * @bar\r\n          */\r\n         function quux () {\r\n\n         }\n// Options: ["never"]\n// Message: There must be no newline after the description of the JSDoc block.\n\n/**\n * A.\n *\n * @typedef {Object} A\n * @prop {boolean} a A.\n */\n// Options: ["never"]\n// Message: There must be no newline after the description of the JSDoc block.\n\n/**\n * A.\n * @typedef {Object} A\n * @prop {boolean} a A.\n */\n// Options: ["always"]\n// Message: There must be a newline after the description of the JSDoc block.\n\n\n     /**\r\n      * Service for fetching symbols.\r\n      * @param {Object} $http - Injected http helper.\r\n      * @param {Object} $q - Injected Promise api helper.\r\n      * @param {Object} $location - Injected window location object.\r\n      * @param {Object} REPORT_DIALOG_CONSTANTS - Injected handle.\r\n      */\n// Message: There must be a newline after the description of the JSDoc block.\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n * Foo.\n */\nfunction quux () {\n\n}\n// Options: ["always"]\n\n/**\n * Bar.\n */\nfunction quux () {\n\n}\n// Options: ["never"]\n\n/**\n * Foo.\n *\n * @foo\n */\nfunction quux () {\n\n}\n// Options: ["always"]\n\n/**\n * Bar.\n * @bar\n */\nfunction quux () {\n\n}\n// Options: ["never"]\n\n\n     /**\r\n      * @foo\r\n      * Test\xc2\xa0\r\n      * abc\xc2\xa0\r\n      * @bar\xc2\xa0\r\n      */\n\n\n     /**\r\n      * \r\n      * @foo\r\n      * Test\xc2\xa0\r\n      * abc\xc2\xa0\r\n      * @bar\xc2\xa0\r\n      */\n\n/***\n *\n */\nfunction quux () {\n\n}\n// Options: ["always"]\n\n/**\r\n * Parses query string to object containing URL parameters\r\n * \r\n * @param queryString\r\n * Input string\r\n * \r\n * @returns\r\n * Object containing URL parameters\r\n */\r\nexport function parseQueryString(queryString: string): { [key: string]: string } {    // <-- Line 10 that fails\r\n\n}\n````\n\n\n<a name="eslint-plugin-jsdoc-rules-no-types"></a>\n### <code>no-types</code>\n\nThis rule reports types being used on `@param` or `@returns`.\n\nThe rule is intended to prevent the indication of types on tags where\nthe type information would be redundant with TypeScript.\n\n|||\n|---|---|\n|Context|`ArrowFunctionExpression`, `FunctionDeclaration`, `FunctionExpression`|\n|Tags|`param`, `returns`|\n|Aliases|`arg`, `argument`, `return`|\n\nThe following patterns are considered problems:\n\n````js\n/**\n * @param {number} foo\n */\nfunction quux (foo) {\n\n}\n// Message: Types are not permitted on @param.\n\n/**\n * @returns {number}\n */\nfunction quux () {\n\n}\n// Message: Types are not permitted on @returns.\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n * @param foo\n */\nfunction quux (foo) {\n\n}\n````\n\n\n<a name="eslint-plugin-jsdoc-rules-no-undefined-types"></a>\n### <code>no-undefined-types</code>\n\nChecks that types in jsdoc comments are defined. This can be used to check\nunimported types.\n\nWhen enabling this rule, types in jsdoc comments will resolve as used\nvariables, i.e. will not be marked as unused by `no-unused-vars`.\n\nIn addition to considering globals found in code (or in ESLint-indicated\n`globals`) as defined, the following tags will also be checked for\nname(path) definitions to also serve as a potential "type" for checking\nthe tag types in the table below:\n\n`@callback`, `@class` (or `@constructor`), `@constant` (or `@const`), `@event`, `@external` (or `@host`), `@function` (or `@func` or `@method`), `@interface`, `@member` (or `@var`), `@mixin`, `@name`, `@namespace`, `@template` (for "closure" or "typescript" `settings.jsdoc.mode` only), `@typedef`.\n\nThe following tags will also be checked but only when the mode is `closure`:\n\n`@package`, `@private`, `@protected`, `@public`, `@static`\n\nThe following types are always considered defined.\n\n- `null`, `undefined`, `void`, `string`, `boolean`, `object`, `function`\n- `number`, `NaN`, `Infinity`\n- `any`, `*`\n- `Array`, `Object`, `RegExp`, `Date`, `Function`\n\nNote that preferred types indicated within `settings.jsdoc.preferredTypes` will\nalso be assumed to be defined.\n\n<a name="eslint-plugin-jsdoc-rules-no-undefined-types-options-9"></a>\n#### Options\n\nAn option object may have the following key:\n\n- `definedTypes` - This array can be populated to indicate other types which\n  are automatically considered as defined (in addition to globals, etc.).\n  Defaults to an empty array.\n\n|||\n|---|---|\n|Context|everywhere|\n|Tags|`augments`, `class`, `constant`, `enum`, `implements`, `member`, `module`, `namespace`, `param`, `property`, `returns`, `throws`, `type`, `typedef`, `yields`|\n|Aliases|`constructor`, `const`, `extends`, `var`, `arg`, `argument`, `prop`, `return`, `exception`, `yield`|\n|Closure-only|`package`, `private`, `protected`, `public`, `static`|\n|Options|`definedTypes`|\n|Settings|`preferredTypes`, `mode`|\n\nThe following patterns are considered problems:\n\n````js\n/**\n * @param {HerType} baz - Foo.\n */\nfunction quux(foo, bar, baz) {\n\n}\n// Settings: {"jsdoc":{"preferredTypes":{"HerType":1000}}}\n// Message: Invalid `settings.jsdoc.preferredTypes`. Values must be falsy, a string, or an object.\n\n/**\n * @param {HerType} baz - Foo.\n */\nfunction quux(foo, bar, baz) {\n\n}\n// Settings: {"jsdoc":{"preferredTypes":{"HerType":false}}}\n// Message: The type \'HerType\' is undefined.\n\n/**\n * @param {strnig} foo - Bar.\n */\nfunction quux(foo) {\n\n}\n// Message: The type \'strnig\' is undefined.\n\n/**\n * @param {MyType} foo - Bar.\n * @param {HisType} bar - Foo.\n */\nfunction quux(foo, bar) {\n\n}\n// Options: [{"definedTypes":["MyType"]}]\n// Message: The type \'HisType\' is undefined.\n\n/**\n * @param {MyType} foo - Bar.\n * @param {HisType} bar - Foo.\n * @param {HerType} baz - Foo.\n */\nfunction quux(foo, bar, baz) {\n\n}\n// Settings: {"jsdoc":{"preferredTypes":{"hertype":{"replacement":"HerType"}}}}\n// Options: [{"definedTypes":["MyType"]}]\n// Message: The type \'HisType\' is undefined.\n\n /**\n  * @param {MyType} foo - Bar.\n  * @param {HisType} bar - Foo.\n  * @param {HerType} baz - Foo.\n  */\nfunction quux(foo, bar, baz) {\n\n}\n// Settings: {"jsdoc":{"preferredTypes":{"hertype":{"replacement":false},"histype":"HisType"}}}\n// Options: [{"definedTypes":["MyType"]}]\n// Message: The type \'HerType\' is undefined.\n\n/**\n * @template TEMPLATE_TYPE\n * @param {WRONG_TEMPLATE_TYPE} bar\n */\nfunction foo (bar) {\n};\n// Settings: {"jsdoc":{"mode":"closure"}}\n// Message: The type \'WRONG_TEMPLATE_TYPE\' is undefined.\n\nclass Foo {\n  /**\n   * @return {TEMPLATE_TYPE}\n   */\n  bar () {\n  }\n}\n// Message: The type \'TEMPLATE_TYPE\' is undefined.\n\nclass Foo {\n  /**\n   * @return {TEMPLATE_TYPE}\n   */\n  invalidTemplateReference () {\n  }\n}\n\n/**\n * @template TEMPLATE_TYPE\n */\nclass Bar {\n  /**\n   * @return {TEMPLATE_TYPE}\n   */\n  validTemplateReference () {\n  }\n}\n// Settings: {"jsdoc":{"mode":"typescript"}}\n// Message: The type \'TEMPLATE_TYPE\' is undefined.\n\n/**\n * @type {strnig}\n */\nvar quux = {\n\n};\n// Message: The type \'strnig\' is undefined.\n\n/**\n * @template TEMPLATE_TYPE_A, TEMPLATE_TYPE_B\n */\nclass Foo {\n  /**\n   * @param {TEMPLATE_TYPE_A} baz\n   * @return {TEMPLATE_TYPE_B}\n   */\n  bar (baz) {\n  }\n}\n// Message: The type \'TEMPLATE_TYPE_A\' is undefined.\n\n/**\n * @param {...VAR_TYPE} varargs\n */\nfunction quux (varargs) {\n}\n// Message: The type \'VAR_TYPE\' is undefined.\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n * @param {string} foo - Bar.\n */\nfunction quux(foo) {\n\n}\n\n/**\n * @param {Promise} foo - Bar.\n */\nfunction quux(foo) {\n\n}\n\nclass MyClass {}\n\n/**\n * @param {MyClass} foo - Bar.\n */\nfunction quux(foo) {\n  console.log(foo);\n}\n\nquux(0);\n\nconst MyType = require(\'my-library\').MyType;\n\n/**\n * @param {MyType} foo - Bar.\n */\n  function quux(foo) {\n\n}\n\nconst MyType = require(\'my-library\').MyType;\n\n/**\n * @param {MyType} foo - Bar.\n */\n  function quux(foo) {\n\n}\n\nimport {MyType} from \'my-library\';\n\n/**\n * @param {MyType} foo - Bar.\n * @param {Object<string, number>} foo\n * @param {Array<string>} baz\n */\n  function quux(foo, bar, baz) {\n\n}\n\n/*globals MyType*/\n\n/**\n * @param {MyType} foo - Bar.\n * @param {HisType} bar - Foo.\n */\n  function quux(foo, bar) {\n\n}\n\n/**\n * @typedef {Object} hello\n * @property {string} a - a.\n */\n\n/**\n * @param {hello} foo\n */\nfunction quux(foo) {\n\n}\n\n/**\n * @param {Array<syntaxError} foo\n */\nfunction quux(foo) {\n\n}\n\n/**\n * Callback test.\n *\n * @callback addStuffCallback\n * @param {String} sum - An test integer.\n */\n/**\n * Test Eslint.\n *\n * @param {addStuffCallback} callback - A callback to run.\n */\nfunction testFunction(callback) {\n  callback();\n}\n\n/**\n *\n *\n */\nfunction foo () {\n\n}\n\n/**\n *\n *\n */\nfunction foo () {\n\n}\n\n/**\n * @param {MyType} foo - Bar.\n * @param {HisType} bar - Foo.\n */\nfunction quux(foo, bar) {\n\n}\n// Options: [{"definedTypes":["MyType","HisType"]}]\n\n/**\n * @param {MyType} foo - Bar.\n * @param {HisType} bar - Foo.\n * @param {HerType} baz - Foo.\n */\nfunction quux(foo, bar, baz) {\n\n}\n// Settings: {"jsdoc":{"preferredTypes":{"hertype":{"replacement":"HerType"},"histype":"HisType"}}}\n// Options: [{"definedTypes":["MyType"]}]\n\n/**\n * @param {MyType} foo - Bar.\n * @param {HisType} bar - Foo.\n * @param {HerType} baz - Foo.\n */\nfunction quux(foo, bar, baz) {\n\n}\n// Settings: {"jsdoc":{"preferredTypes":{"hertype":{"replacement":"HerType<>"},"histype":"HisType.<>"}}}\n// Options: [{"definedTypes":["MyType"]}]\n\n/**\n * @template TEMPLATE_TYPE\n * @param {TEMPLATE_TYPE} bar\n * @return {TEMPLATE_TYPE}\n */\nfunction foo (bar) {\n};\n// Settings: {"jsdoc":{"mode":"closure"}}\n\n/**\n * @template TEMPLATE_TYPE\n */\nclass Foo {\n  /**\n   * @return {TEMPLATE_TYPE}\n   */\n  bar () {\n  }\n}\n// Settings: {"jsdoc":{"mode":"closure"}}\n\n/**\n * @template TEMPLATE_TYPE_A, TEMPLATE_TYPE_B\n */\nclass Foo {\n  /**\n   * @param {TEMPLATE_TYPE_A} baz\n   * @return {TEMPLATE_TYPE_B}\n   */\n  bar (baz) {\n  }\n}\n// Settings: {"jsdoc":{"mode":"closure"}}\n\n/****/\n\n/**\n *\n */\nfunction quux () {\n\n}\n\n/**\n * Run callback when hooked method is called.\n *\n * @template {BaseObject} T\n * @param {T} obj - object whose method should be hooked.\n * @param {string} method - method which should be hooked.\n * @param {(sender: T) => void} callback - callback which should\n * be called when the hooked method was invoked.\n */\nfunction registerEvent(obj, method, callback) {\n\n}\n// Settings: {"jsdoc":{"mode":"typescript"}}\n\n /**\n * @param {...} varargs\n */\nfunction quux (varargs) {\n}\n\n/**\n * @param {...number} varargs\n */\nfunction quux (varargs) {\n}\n````\n\n\n<a name="eslint-plugin-jsdoc-rules-require-description-complete-sentence"></a>\n### <code>require-description-complete-sentence</code>\n\nRequires that block description, explicit `@description`, and `@param`/`@returns`\ntag descriptions are written in complete sentences, i.e.,\n\n* Description must start with an uppercase alphabetical character.\n* Paragraphs must start with an uppercase alphabetical character.\n* Sentences must end with a period.\n* Every line in a paragraph (except the first) which starts with an uppercase\n  character must be preceded by a line ending with a period.\n* A colon or semi-colon followed by two line breaks is still part of the\n  containing paragraph (unlike normal dual line breaks).\n\n<a name="eslint-plugin-jsdoc-rules-require-description-complete-sentence-options-10"></a>\n#### Options\n\n<a name="eslint-plugin-jsdoc-rules-require-description-complete-sentence-options-10-tags-2"></a>\n##### <code>tags</code>\n\nIf you want additional tags to be checked for their descriptions, you may\nadd them within this option.\n\n```js\n{\n  \'jsdoc/require-description-complete-sentence\': [\'error\', {tags: [\'see\', \'copyright\']}]\n}\n```\n\nThe tags `@param`/`@arg`/`@argument` and `@property`/`@prop` will be properly\nparsed to ensure that the checked "description" text includes only the text\nafter the name.\n\nAll other tags will treat the text following the tag name, a space, and\nan optional curly-bracketed type expression (and another space) as part of\nits "description" (e.g., for `@returns {someType} some description`, the\ndescription is `some description` while for `@some-tag xyz`, the description\nis `xyz`).\n\n|||\n|---|---|\n|Context|everywhere|\n|Tags|doc block, `param`, `returns`, `description`, `property`, `summary`, `file`, `classdesc`, `todo`, `deprecated`, `throws`, \'yields\' and others added by `tags`|\n|Aliases|`arg`, `argument`, `return`, `desc`, `prop`, `fileoverview`, `overview`, `exception`, `yield`|\n|Options|`tags`|\nThe following patterns are considered problems:\n\n````js\n/**\n * foo.\n */\nfunction quux () {\n\n}\n// Message: Sentence should start with an uppercase character.\n\n/**\n * foo?\n */\nfunction quux () {\n\n}\n// Message: Sentence should start with an uppercase character.\n\n/**\n * @description foo.\n */\nfunction quux () {\n\n}\n// Message: Sentence should start with an uppercase character.\n\n/**\n * Foo)\n */\nfunction quux () {\n\n}\n// Message: Sentence must end with a period.\n\n/**\n * `foo` is a variable\n */\nfunction quux () {\n\n}\n// Message: Sentence must end with a period.\n\n/**\n * Foo.\n *\n * foo.\n */\nfunction quux () {\n\n}\n// Message: Sentence should start with an uppercase character.\n\n/**\n * \xd1\x82\xd0\xb5\xd1\x81\xd1\x82.\n */\nfunction quux () {\n\n}\n// Message: Sentence should start with an uppercase character.\n\n/**\n * Foo\n */\nfunction quux () {\n\n}\n// Message: Sentence must end with a period.\n\n/**\n * Foo\n * Bar.\n */\nfunction quux () {\n\n}\n// Message: A line of text is started with an uppercase character, but preceding line does not end the sentence.\n\n/**\n * Foo.\n *\n * @param foo foo.\n */\nfunction quux (foo) {\n\n}\n// Message: Sentence should start with an uppercase character.\n\n/**\n * Foo.\n *\n * @param foo bar\n */\nfunction quux (foo) {\n\n}\n// Message: Sentence should start with an uppercase character.\n\n/**\n * {@see Foo.bar} buz\n */\nfunction quux (foo) {\n\n}\n// Message: Sentence should start with an uppercase character.\n\n/**\n * Foo.\n *\n * @returns {number} foo\n */\nfunction quux (foo) {\n\n}\n// Message: Sentence should start with an uppercase character.\n\n/**\n * Foo.\n *\n * @returns foo.\n */\nfunction quux (foo) {\n\n}\n// Message: Sentence should start with an uppercase character.\n\n/**\n * lorem ipsum dolor sit amet, consectetur adipiscing elit. pellentesque elit diam,\n * iaculis eu dignissim sed, ultrices sed nisi. nulla at ligula auctor, consectetur neque sed,\n * tincidunt nibh. vivamus sit amet vulputate ligula. vivamus interdum elementum nisl,\n * vitae rutrum tortor semper ut. morbi porta ante vitae dictum fermentum.\n * proin ut nulla at quam convallis gravida in id elit. sed dolor mauris, blandit quis ante at,\n * consequat auctor magna. duis pharetra purus in porttitor mollis.\n */\nfunction longDescription (foo) {\n\n}\n// Message: Sentence should start with an uppercase character.\n\n/**\n * @arg {number} foo - Foo\n */\nfunction quux (foo) {\n\n}\n// Message: Sentence must end with a period.\n\n/**\n * @argument {number} foo - Foo\n */\nfunction quux (foo) {\n\n}\n// Message: Sentence must end with a period.\n\n/**\n * @return {number} foo\n */\nfunction quux (foo) {\n\n}\n// Message: Sentence should start with an uppercase character.\n\n/**\n * Returns bar.\n *\n * @return {number} bar\n */\nfunction quux (foo) {\n\n}\n// Message: Sentence should start with an uppercase character.\n\n/**\n * @throws {Object} Hello World\n * hello world\n*/\n// Message: Sentence must end with a period.\n\n/**\n * @summary Foo\n */\nfunction quux () {\n\n}\n// Message: Sentence must end with a period.\n\n/**\n * @throws {SomeType} Foo\n */\nfunction quux () {\n\n}\n// Message: Sentence must end with a period.\n\n/**\n * @see Foo\n */\nfunction quux () {\n\n}\n// Options: [{"tags":["see"]}]\n// Message: Sentence must end with a period.\n\n/**\n * @param foo Foo bar\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"tagNamePreference":{"description":false}}}\n// Options: [{"tags":["param"]}]\n// Message: Sentence must end with a period.\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n * @param foo - Foo.\n */\nfunction quux () {\n\n}\n\n/**\n * Foo.\n */\nfunction quux () {\n\n}\n\n/**\n * Foo.\n * Bar.\n */\nfunction quux () {\n\n}\n\n/**\n * Foo.\n *\n * Bar.\n */\nfunction quux () {\n\n}\n\n/**\n * \xd0\xa2\xd0\xb5\xd1\x81\xd1\x82.\n */\nfunction quux () {\n\n}\n\n/**\n * Foo\n * bar.\n */\nfunction quux () {\n\n}\n\n/**\n * @returns Foo bar.\n */\nfunction quux () {\n\n}\n\n/**\n * Foo. {@see Math.sin}.\n */\nfunction quux () {\n\n}\n\n/**\n * Foo {@see Math.sin} bar.\n */\nfunction quux () {\n\n}\n\n/**\n * Foo?\n *\n * Bar!\n *\n * Baz:\n *   1. Foo.\n *   2. Bar.\n */\nfunction quux () {\n\n}\n\n/**\n * Hello:\n * World.\n */\nfunction quux () {\n\n}\n\n/**\n * Hello: world.\n */\nfunction quux () {\n\n}\n\n/**\n *\n */\nfunction quux () {\n\n}\n\n/**\n * @description Foo.\n */\nfunction quux () {\n\n}\n\n/**\n * `foo` is a variable.\n */\nfunction quux () {\n\n}\n\n/**\n * Foo.\n *\n * `foo`.\n */\nfunction quux () {\n\n}\n\n/**\n * @param foo - `bar`.\n */\nfunction quux () {\n\n}\n\n/**\n * @returns {number} `foo`.\n */\nfunction quux () {\n\n}\n\n/**\n * Foo\n * `bar`.\n */\nfunction quux () {\n\n}\n\n/**\n * @example Foo\n */\nfunction quux () {\n\n}\n\n/**\n * @see Foo\n */\nfunction quux () {\n\n}\n\n/**\n * Foo.\n *\n * @param foo Foo.\n */\nfunction quux (foo) {\n\n}\n\n/**\n * Foo.\n *\n * @param foo Foo.\n */\nfunction quux (foo) {\n\n}\n// Options: [{"tags":["param"]}]\n\n/**\n * @param foo Foo bar.\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"tagNamePreference":{"description":false}}}\n// Options: [{"tags":["param"]}]\n\n/**\n *\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"tagNamePreference":{"description":false}}}\n\n/**\n* We stop loading Items when we have loaded:\n*\n* 1) The main Item;\n* 2) All its variants.\n*/\n\n/**\n * This method is working on 2 steps.\n *\n * | Step | Comment     |\n * |------|-------------|\n * |   1  | do it       |\n * |   2  | do it again |\n */\n````\n\n\n<a name="eslint-plugin-jsdoc-rules-require-description"></a>\n### <code>require-description</code>\n\nRequires that all functions have a description.\n\n* All functions must have an implicit description or have the option\n  `descriptionStyle` set to `tag`.\n* Every jsdoc block description (or description tag if `descriptionStyle` is\n  `"tag"`) must have a non-empty description that explains the purpose of the\n  method.\n\n<a name="eslint-plugin-jsdoc-rules-require-description-options-11"></a>\n#### Options\n\nAn options object may have any of the following properties:\n\n- `contexts` - Set to an array of strings representing the AST context\n  where you wish the rule to be applied (e.g., `ClassDeclaration` for ES6\n  classes). Overrides the default contexts (see below).\n- `exemptedBy` - Array of tags (e.g., `[\'type\']`) whose presence on the\n    document block avoids the need for a `@description`. Defaults to an\n    empty array.\n- `descriptionStyle` - Whether to accept implicit descriptions (`"body"`) or\n    `@description` tags (`"tag"`) as satisfying the rule. Set to `"any"` to\n    accept either style. Defaults to `"body"`.\n\n|||\n|---|---|\n|Context|`ArrowFunctionExpression`, `FunctionDeclaration`, `FunctionExpression`; others when `contexts` option enabled|\n|Tags|`description` or jsdoc block|\n|Aliases|`desc`|\n|Options|`contexts`, `exemptedBy`, `descriptionStyle`|\n|Settings|`overrideReplacesDocs`, `augmentsExtendsReplacesDocs`, `implementsReplacesDocs`|\n\nThe following patterns are considered problems:\n\n````js\n/**\n *\n */\nfunction quux () {\n\n}\n// Options: [{"descriptionStyle":"tag"}]\n// Message: Missing JSDoc @description declaration.\n\n/**\n *\n */\nfunction quux () {\n\n}\n// Options: [{"descriptionStyle":"any"}]\n// Message: Missing JSDoc block description or @description declaration.\n\n/**\n *\n */\nfunction quux () {\n\n}\n// Options: [{"descriptionStyle":"body"}]\n// Message: Missing JSDoc block description.\n\n/**\n *\n */\nclass quux {\n\n}\n// Options: [{"contexts":["ClassDeclaration"],"descriptionStyle":"tag"}]\n// Message: Missing JSDoc @description declaration.\n\n/**\n *\n */\nclass quux {\n\n}\n// Options: [{"contexts":["ClassDeclaration"],"descriptionStyle":"tag"}]\n// Message: Missing JSDoc @description declaration.\n\n/**\n *\n */\nclass quux {\n\n}\n// Options: [{"contexts":["ClassDeclaration"],"descriptionStyle":"tag"}]\n// Message: Missing JSDoc @description declaration.\n\n/**\n * @description\n */\nfunction quux () {\n\n}\n// Options: [{"descriptionStyle":"tag"}]\n// Message: Missing JSDoc @description description.\n\n/**\n *\n */\ninterface quux {\n\n}\n// Options: [{"contexts":["TSInterfaceDeclaration"],"descriptionStyle":"tag"}]\n// Message: Missing JSDoc @description declaration.\n\n/**\n *\n */\nvar quux = class {\n\n};\n// Options: [{"contexts":["ClassExpression"],"descriptionStyle":"tag"}]\n// Message: Missing JSDoc @description declaration.\n\n/**\n *\n */\nvar quux = {\n\n};\n// Options: [{"contexts":["ObjectExpression"],"descriptionStyle":"tag"}]\n// Message: Missing JSDoc @description declaration.\n\n/**\n * @someDesc\n */\nfunction quux () {\n\n}\n// Settings: {"jsdoc":{"tagNamePreference":{"description":{"message":"Please avoid `{{tagName}}`; use `{{replacement}}` instead","replacement":"someDesc"}}}}\n// Options: [{"descriptionStyle":"tag"}]\n// Message: Missing JSDoc @someDesc description.\n\n/**\n * @description\n */\nfunction quux () {\n\n}\n// Settings: {"jsdoc":{"tagNamePreference":{"description":false}}}\n// Options: [{"descriptionStyle":"tag"}]\n// Message: Unexpected tag `@description`\n\n/**\n * @description\n */\nfunction quux () {\n\n}\n// Settings: {"jsdoc":{"tagNamePreference":{"description":false}}}\n// Options: [{"descriptionStyle":"any"}]\n// Message: Missing JSDoc block description or @description declaration.\n\n/**\n *\n */\nfunction quux () {\n}\n// Options: [{"exemptedBy":["notPresent"]}]\n// Message: Missing JSDoc block description.\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n * @description\n * // arbitrary description content\n */\nfunction quux () {\n\n}\n// Options: [{"descriptionStyle":"tag"}]\n\n/**\n * @description\n * quux(); // does something useful\n */\nfunction quux () {\n\n}\n// Options: [{"descriptionStyle":"tag"}]\n\n/**\n * @description <caption>Valid usage</caption>\n * quux(); // does something useful\n *\n * @description <caption>Invalid usage</caption>\n * quux(\'random unwanted arg\'); // results in an error\n */\nfunction quux () {\n\n}\n// Options: [{"descriptionStyle":"tag"}]\n\n/**\n *\n */\nclass quux {\n\n}\n// Options: [{"descriptionStyle":"tag"}]\n\n/**\n *\n */\nfunction quux () {\n\n}\n// Options: [{"contexts":["ClassDeclaration"]}]\n\n/**\n * @type {MyCallback}\n */\nfunction quux () {\n\n}\n// Options: [{"exemptedBy":["type"]}]\n\n/**\n *\n */\ninterface quux {\n\n}\n// Options: [{"descriptionStyle":"tag"}]\n\n/**\n *\n */\nvar quux = class {\n\n};\n// Options: [{"descriptionStyle":"tag"}]\n\n/**\n *\n */\nvar quux = {\n\n};\n// Options: [{"descriptionStyle":"tag"}]\n\n/**\n * Has an implicit description\n */\nfunction quux () {\n\n}\n// Options: [{"descriptionStyle":"body"}]\n\n/**\n * Has an implicit description\n */\nfunction quux () {\n\n}\n\n/**\n * Has an implicit description\n */\nfunction quux () {\n\n}\n// Options: [{"descriptionStyle":"any"}]\n\n/**\n * @description Has an explicit description\n */\nfunction quux () {\n\n}\n// Options: [{"descriptionStyle":"any"}]\n\n/**\n *\n */\nfunction quux () {\n\n}\n// Settings: {"jsdoc":{"tagNamePreference":{"description":false}}}\n````\n\n\n<a name="eslint-plugin-jsdoc-rules-require-example"></a>\n### <code>require-example</code>\n\nRequires that all functions have examples.\n\n* All functions must have one or more `@example` tags.\n* Every example tag must have a non-empty description that explains the method\'s usage.\n\n<a name="eslint-plugin-jsdoc-rules-require-example-options-12"></a>\n#### Options\n\nThis rule has an object option.\n\n<a name="eslint-plugin-jsdoc-rules-require-example-options-12-exemptedby"></a>\n##### <code>exemptedBy</code>\n\nArray of tags (e.g., `[\'type\']`) whose presence on the document\nblock avoids the need for an `@example`. Defaults to an empty array.\n\n<a name="eslint-plugin-jsdoc-rules-require-example-options-12-avoidexampleonconstructors"></a>\n##### <code>avoidExampleOnConstructors</code>\n\nSet to `true` to avoid the need for an example on a constructor (whether\nindicated as such by a jsdoc tag or by being within an ES6 `class`).\nDefaults to `false`.\n\n<a name="eslint-plugin-jsdoc-rules-require-example-options-12-contexts-1"></a>\n##### <code>contexts</code>\n\nSet this to an array of strings representing the AST context\nwhere you wish the rule to be applied (e.g., `ClassDeclaration` for ES6 classes).\nOverrides the default contexts (see below).\n\n<a name="eslint-plugin-jsdoc-rules-require-example-fixer"></a>\n#### Fixer\n\nThe fixer for `require-example` will add an empty `@example`, but it will still\nreport a missing example description after this is added.\n\n|||\n|---|---|\n|Context|`ArrowFunctionExpression`, `FunctionDeclaration`, `FunctionExpression`; others when `contexts` option enabled|\n|Tags|`example`|\n|Options|`exemptedBy`, `avoidExampleOnConstructors`, `contexts`|\n|Settings|`overrideReplacesDocs`, `augmentsExtendsReplacesDocs`, `implementsReplacesDocs`|\n\nThe following patterns are considered problems:\n\n````js\n/**\n *\n */\nfunction quux () {\n\n}\n// Message: Missing JSDoc @example declaration.\n\n/**\n * @example\n */\nfunction quux () {\n\n}\n// Message: Missing JSDoc @example description.\n\n/**\n * @constructor\n */\nfunction f () {\n\n}\n// Settings: {"jsdoc":{"avoidExampleOnConstructors":true}}\n// Message: `settings.jsdoc.avoidExampleOnConstructors` has been removed, use options in the rule `require-example` instead.\n\n/**\n * @constructor\n */\nfunction quux () {\n\n}\n// Message: Missing JSDoc @example declaration.\n\n/**\n * @constructor\n * @example\n */\nfunction quux () {\n\n}\n// Message: Missing JSDoc @example description.\n\n/**\n *\n */\nclass quux {\n\n}\n// Options: [{"contexts":["ClassDeclaration"]}]\n// Message: Missing JSDoc @example declaration.\n\n/**\n *\n */\nfunction quux () {\n}\n// Options: [{"exemptedBy":["notPresent"]}]\n// Message: Missing JSDoc @example declaration.\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n * @example\n * // arbitrary example content\n */\nfunction quux () {\n\n}\n\n/**\n * @example\n * quux(); // does something useful\n */\nfunction quux () {\n\n}\n\n/**\n * @example <caption>Valid usage</caption>\n * quux(); // does something useful\n *\n * @example <caption>Invalid usage</caption>\n * quux(\'random unwanted arg\'); // results in an error\n */\nfunction quux () {\n\n}\n\n/**\n * @constructor\n */\nfunction quux () {\n\n}\n// Options: [{"avoidExampleOnConstructors":true}]\n\n/**\n * @constructor\n * @example\n */\nfunction quux () {\n\n}\n// Options: [{"avoidExampleOnConstructors":true}]\n\nclass Foo {\n  /**\n   *\n   */\n  constructor () {\n\n  }\n}\n// Options: [{"avoidExampleOnConstructors":true}]\n\n/**\n * @inheritdoc\n */\nfunction quux () {\n\n}\n\n/**\n * @type {MyCallback}\n */\nfunction quux () {\n\n}\n// Options: [{"exemptedBy":["type"]}]\n\n/**\n * @example Some example code\n */\nclass quux {\n\n}\n// Options: [{"contexts":["ClassDeclaration"]}]\n\n/**\n *\n */\nfunction quux () {\n\n}\n// Options: [{"contexts":["ClassDeclaration"]}]\n````\n\n\n<a name="eslint-plugin-jsdoc-rules-require-hyphen-before-param-description"></a>\n### <code>require-hyphen-before-param-description</code>\n\nRequires a hyphen before the `@param` description.\n\n<a name="eslint-plugin-jsdoc-rules-require-hyphen-before-param-description-options-13"></a>\n#### Options\n\nThis rule takes one optional string argument. If it is `"always"` then a problem is raised when there is no hyphen before the description. If it is `"never"` then a problem is raised when there is a hyphen before the description. The default value is `"always"`.\n\n|||\n|---|---|\n|Context|everywhere|\n|Tags|`param`|\n|Aliases|`arg`, `argument`|\n|Options|(a string matching `"always"|"never"`)|\n\nThe following patterns are considered problems:\n\n````js\n/**\n * @param foo Foo.\n */\nfunction quux () {\n\n}\n// Options: ["always"]\n// Message: There must be a hyphen before @param description.\n\n/**\n * @param foo Foo.\n */\nfunction quux () {\n\n}\n// Message: There must be a hyphen before @param description.\n\n/**\n * @param foo - Foo.\n */\nfunction quux () {\n\n}\n// Options: ["never"]\n// Message: There must be no hyphen before @param description.\n\n/**\n * @param foo - foo\n * @param foo foo\n */\nfunction quux () {\n\n}\n// Options: ["always"]\n// Message: There must be a hyphen before @param description.\n\n/**\n * @param foo foo\n * bar\n * @param bar - bar\n */\nfunction quux () {\n\n}\n// Options: ["always"]\n// Message: There must be a hyphen before @param description.\n\n/**\n * @param foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"tagNamePreference":{"param":false}}}\n// Message: Unexpected tag `@param`\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n * @param foo - Foo.\n */\nfunction quux () {\n\n}\n// Options: ["always"]\n\n/**\n * @param foo Foo.\n */\nfunction quux () {\n\n}\n// Options: ["never"]\n\n/**\n * @param foo\n */\nfunction quux () {\n\n}\n````\n\n\n<a name="eslint-plugin-jsdoc-rules-require-jsdoc"></a>\n### <code>require-jsdoc</code>\n\nChecks for presence of jsdoc comments, on class declarations as well as\nfunctions.\n\n<a name="eslint-plugin-jsdoc-rules-require-jsdoc-options-14"></a>\n#### Options\n\nAccepts one optional options object with the following optional keys.\n\n- `publicOnly` - This option will insist that missing jsdoc blocks are\n  only reported for function bodies / class declarations that are exported\n  from the module. May be a boolean or object. If set to `true`, the defaults\n  below will be used. If unset, jsdoc block reporting will not be limited to\n  exports.\n\n  This object supports the following optional boolean keys (`false` unless\n  otherwise noted):\n\n  - `ancestorsOnly` - Only check node ancestors to check if node is exported\n  - `esm` - ESM exports are checked for JSDoc comments (Defaults to `true`)\n  - `cjs` - CommonJS exports are checked for JSDoc comments  (Defaults to `true`)\n  - `window` - Window global exports are checked for JSDoc comments\n\n- `require` - An object with the following optional boolean keys which all\n    default to `false` except as noted, indicating the contexts where the rule\n    will apply:\n\n  - `ArrowFunctionExpression`\n  - `ClassDeclaration`\n  - `ClassExpression`\n  - `FunctionDeclaration` (defaults to `true`)\n  - `FunctionExpression`\n  - `MethodDefinition`\n\n- `contexts` - Set this to an array of strings representing the additional\n  AST contexts where you wish the rule to be applied (e.g., `Property` for\n  properties). Defaults to an empty array.\n\n- `exemptEmptyFunctions` (default: false) - When `true`, the rule will not report\n  missing jsdoc blocks above functions/methods with no parameters or return values\n  (intended where variable names are sufficient for themselves as documentation).\n\n|||\n|---|---|\n|Context|`ArrowFunctionExpression`, `ClassDeclaration`, `ClassExpression`, `FunctionDeclaration`, `FunctionExpression`; others when `contexts` option enabled|\n|Tags|N/A|\n|Options|`publicOnly`, `require`, `contexts`, `exemptEmptyFunctions`|\n\nThe following patterns are considered problems:\n\n````js\n/**\n * @func myFunction\n */\nfunction myFunction() {\n\n}\n// Settings: {"jsdoc":{"maxLines":3,"minLines":2}}\n// Message: Missing JSDoc comment.\n\n/**\n * @func myFunction\n */\n\n\nfunction myFunction() {\n\n}\n// Settings: {"jsdoc":{"maxLines":2}}\n// Message: Missing JSDoc comment.\n\n/** @func myFunction */ function myFunction() {\n\n}\n// Settings: {"jsdoc":{"minLines":1}}\n// Message: Missing JSDoc comment.\n\nexport var test = function () {\n\n};\n// Options: [{"publicOnly":true,"require":{"FunctionExpression":true}}]\n// Message: Missing JSDoc comment.\n\nfunction test () {\n\n}\nexport var test2 = test;\n// Options: [{"publicOnly":true,"require":{"FunctionDeclaration":true}}]\n// Message: Missing JSDoc comment.\n\nexport const test = () => {\n\n};\n// Options: [{"publicOnly":true,"require":{"ArrowFunctionExpression":true}}]\n// Message: Missing JSDoc comment.\n\nexport let test = class {\n\n};\n// Options: [{"publicOnly":true,"require":{"ClassExpression":true}}]\n// Message: Missing JSDoc comment.\n\nexport default function () {}\n// Options: [{"publicOnly":{"cjs":false,"esm":true,"window":false},"require":{"FunctionDeclaration":true}}]\n// Message: Missing JSDoc comment.\n\nexport default () => {}\n// Options: [{"publicOnly":{"cjs":false,"esm":true,"window":false},"require":{"ArrowFunctionExpression":true}}]\n// Message: Missing JSDoc comment.\n\nexport default (function () {})\n// Options: [{"publicOnly":{"cjs":false,"esm":true,"window":false},"require":{"FunctionExpression":true}}]\n// Message: Missing JSDoc comment.\n\nexport default class {}\n// Options: [{"publicOnly":{"cjs":false,"esm":true,"window":false},"require":{"ClassDeclaration":true}}]\n// Message: Missing JSDoc comment.\n\nfunction quux (foo) {\n\n}\n// Message: Missing JSDoc comment.\n\n\n// Settings: {"jsdoc":{"exemptEmptyFunctions":true}}\n// Message: `settings.jsdoc.exemptEmptyFunctions` has been removed, use options in the rule `require-jsdoc` instead.\n\nfunction quux (foo) {\n\n}\n// Options: [{"exemptEmptyFunctions":true}]\n// Message: Missing JSDoc comment.\n\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"minLines":2}}\n// Options: [{"exemptEmptyFunctions":true}]\n// Message: Missing JSDoc comment.\n\nfunction myFunction() {}\n// Message: Missing JSDoc comment.\n\n/**\n * Description for A.\n */\nclass A {\n   constructor(xs) {\n        this.a = xs;\n   }\n}\n// Options: [{"require":{"ClassDeclaration":true,"MethodDefinition":true}}]\n// Message: Missing JSDoc comment.\n\nclass A {\n    /**\n     * Description for constructor.\n     * @param {object[]} xs - xs\n     */\n    constructor(xs) {\n        this.a = xs;\n    }\n}\n// Options: [{"require":{"ClassDeclaration":true,"MethodDefinition":true}}]\n// Message: Missing JSDoc comment.\n\nclass A extends B {\n    /**\n     * Description for constructor.\n     * @param {object[]} xs - xs\n     */\n    constructor(xs) {\n        this.a = xs;\n    }\n}\n// Options: [{"require":{"ClassDeclaration":true,"MethodDefinition":true}}]\n// Message: Missing JSDoc comment.\n\nexport class A extends B {\n    /**\n     * Description for constructor.\n     * @param {object[]} xs - xs\n     */\n    constructor(xs) {\n        this.a = xs;\n    }\n}\n// Options: [{"require":{"ClassDeclaration":true,"MethodDefinition":true}}]\n// Message: Missing JSDoc comment.\n\nexport default class A extends B {\n    /**\n     * Description for constructor.\n     * @param {object[]} xs - xs\n     */\n    constructor(xs) {\n        this.a = xs;\n    }\n}\n// Options: [{"require":{"ClassDeclaration":true,"MethodDefinition":true}}]\n// Message: Missing JSDoc comment.\n\nvar myFunction = () => {}\n// Options: [{"require":{"ArrowFunctionExpression":true}}]\n// Message: Missing JSDoc comment.\n\nvar myFunction = () => () => {}\n// Options: [{"require":{"ArrowFunctionExpression":true}}]\n// Message: Missing JSDoc comment.\n\nvar foo = function() {}\n// Options: [{"require":{"FunctionExpression":true}}]\n// Message: Missing JSDoc comment.\n\nconst foo = {bar() {}}\n// Options: [{"require":{"FunctionExpression":true}}]\n// Message: Missing JSDoc comment.\n\nvar foo = {bar: function() {}}\n// Options: [{"require":{"FunctionExpression":true}}]\n// Message: Missing JSDoc comment.\n\nfunction foo (abc) {}\n// Options: [{"exemptEmptyFunctions":false}]\n// Message: Missing JSDoc comment.\n\nfunction foo () {\n  return true;\n}\n// Options: [{"exemptEmptyFunctions":false}]\n// Message: Missing JSDoc comment.\n\nmodule.exports = function quux () {\n\n}\n// Options: [{"publicOnly":true,"require":{"FunctionExpression":true}}]\n// Message: Missing JSDoc comment.\n\nmodule.exports = function quux () {\n\n}\n// Options: [{"publicOnly":{"ancestorsOnly":true},"require":{"FunctionExpression":true}}]\n// Message: Missing JSDoc comment.\n\nmodule.exports = {\n  method: function() {\n\n  }\n}\n// Options: [{"publicOnly":true,"require":{"FunctionExpression":true}}]\n// Message: Missing JSDoc comment.\n\nmodule.exports = {\n  test: {\n    test2: function() {\n\n    }\n  }\n}\n// Options: [{"publicOnly":true,"require":{"FunctionExpression":true}}]\n// Message: Missing JSDoc comment.\n\nmodule.exports = {\n  test: {\n    test2: function() {\n\n    }\n  }\n}\n// Options: [{"publicOnly":{"ancestorsOnly":true},"require":{"FunctionExpression":true}}]\n// Message: Missing JSDoc comment.\n\nconst test = module.exports = function () {\n\n}\n// Options: [{"publicOnly":true,"require":{"FunctionExpression":true}}]\n// Message: Missing JSDoc comment.\n\n/**\n*\n*/\nconst test = module.exports = function () {\n\n}\n\ntest.prototype.method = function() {}\n// Options: [{"publicOnly":true,"require":{"FunctionExpression":true}}]\n// Message: Missing JSDoc comment.\n\nconst test = function () {\n\n}\nmodule.exports = {\n  test: test\n}\n// Options: [{"publicOnly":true,"require":{"FunctionExpression":true}}]\n// Message: Missing JSDoc comment.\n\nconst test = () => {\n\n}\nmodule.exports = {\n  test: test\n}\n// Options: [{"publicOnly":true,"require":{"ArrowFunctionExpression":true}}]\n// Message: Missing JSDoc comment.\n\nclass Test {\n    method() {\n\n    }\n}\nmodule.exports = Test;\n// Options: [{"publicOnly":true,"require":{"MethodDefinition":true}}]\n// Message: Missing JSDoc comment.\n\nexport default function quux () {\n\n}\n// Options: [{"publicOnly":true,"require":{"FunctionExpression":true}}]\n// Message: Missing JSDoc comment.\n\nexport default function quux () {\n\n}\n// Options: [{"publicOnly":{"ancestorsOnly":true},"require":{"FunctionExpression":true}}]\n// Message: Missing JSDoc comment.\n\nfunction quux () {\n\n}\nexport default quux;\n// Options: [{"publicOnly":true,"require":{"FunctionExpression":true}}]\n// Message: Missing JSDoc comment.\n\nexport function test() {\n\n}\n// Options: [{"publicOnly":true,"require":{"FunctionExpression":true}}]\n// Message: Missing JSDoc comment.\n\nexport function test() {\n\n}\n// Options: [{"publicOnly":{"ancestorsOnly":true},"require":{"FunctionExpression":true}}]\n// Message: Missing JSDoc comment.\n\nvar test = function () {\n\n}\nvar test2 = 2;\nexport { test, test2 }\n// Options: [{"publicOnly":true,"require":{"FunctionExpression":true}}]\n// Message: Missing JSDoc comment.\n\nvar test = function () {\n\n}\nexport { test as test2 }\n// Options: [{"publicOnly":true,"require":{"FunctionExpression":true}}]\n// Message: Missing JSDoc comment.\n\nexport default class A {\n\n}\n// Options: [{"publicOnly":true,"require":{"ClassDeclaration":true}}]\n// Message: Missing JSDoc comment.\n\nexport default class A {\n\n}\n// Options: [{"publicOnly":{"ancestorsOnly":true},"require":{"ClassDeclaration":true}}]\n// Message: Missing JSDoc comment.\n\nvar test = function () {\n\n}\n// Options: [{"publicOnly":{"window":true},"require":{"FunctionExpression":true}}]\n// Message: Missing JSDoc comment.\n\nwindow.test = function () {\n\n}\n// Options: [{"publicOnly":{"window":true},"require":{"FunctionExpression":true}}]\n// Message: Missing JSDoc comment.\n\nfunction test () {\n\n}\n// Options: [{"publicOnly":{"window":true}}]\n// Message: Missing JSDoc comment.\n\nmodule.exports = function() {\n\n}\n// Options: [{"publicOnly":{"cjs":true,"esm":false,"window":false},"require":{"FunctionExpression":true}}]\n// Message: Missing JSDoc comment.\n\nexport function someMethod() {\n\n}\n// Options: [{"publicOnly":{"cjs":false,"esm":true,"window":false},"require":{"FunctionDeclaration":true}}]\n// Message: Missing JSDoc comment.\n\nexport function someMethod() {\n\n}\n// Options: [{"publicOnly":{"cjs":false,"esm":true,"window":false},"require":{"FunctionDeclaration":true}}]\n// Message: Missing JSDoc comment.\n\nconst myObject = {\n  myProp: true\n};\n// Options: [{"contexts":["Property"]}]\n// Message: Missing JSDoc comment.\n````\n\nThe following patterns are not considered problems:\n\n````js\nvar array = [1,2,3];\narray.forEach(function() {});\n\n/**\n * @class MyClass\n **/\nfunction MyClass() {}\n\n/**\n Function doing something\n */\nfunction myFunction() {}\n/**\n Function doing something\n */\nvar myFunction = function() {};\n/**\n Function doing something\n */\nObject.myFunction = function () {};\nvar obj = {\n   /**\n    *  Function doing something\n    **/\n    myFunction: function () {} };\n\n/**\n @func myFunction\n */\nfunction myFunction() {}\n/**\n @method myFunction\n */\nfunction myFunction() {}\n/**\n @function myFunction\n */\nfunction myFunction() {}\n\n/**\n @func myFunction\n */\nvar myFunction = function () {}\n/**\n @method myFunction\n */\nvar myFunction = function () {}\n/**\n @function myFunction\n */\nvar myFunction = function () {}\n\n/**\n @func myFunction\n */\nObject.myFunction = function() {}\n/**\n @method myFunction\n */\nObject.myFunction = function() {}\n/**\n @function myFunction\n */\nObject.myFunction = function() {}\n(function(){})();\n\nvar object = {\n  /**\n   *  @func myFunction - Some function\n   */\n  myFunction: function() {} }\nvar object = {\n  /**\n   *  @method myFunction - Some function\n   */\n  myFunction: function() {} }\nvar object = {\n  /**\n   *  @function myFunction - Some function\n   */\n  myFunction: function() {} }\n\nvar array = [1,2,3];\narray.filter(function() {});\nObject.keys(this.options.rules || {}).forEach(function(name) {}.bind(this));\nvar object = { name: \'key\'};\nObject.keys(object).forEach(function() {})\n\n/**\n * @func myFunction\n */\n\nfunction myFunction() {\n\n}\n// Settings: {"jsdoc":{"maxLines":2,"minLines":0}}\n\n/**\n * @func myFunction\n */\n\n\nfunction myFunction() {\n\n}\n// Settings: {"jsdoc":{"maxLines":3,"minLines":0}}\n\n/** @func myFunction */  function myFunction() {\n\n}\n// Settings: {"jsdoc":{"maxLines":0,"minLines":0}}\n\n/**\n * @func myFunction\n */\n\nfunction myFunction() {\n\n}\n// Settings: {"jsdoc":{"maxLines":3,"minLines":2}}\n\nfunction myFunction() {}\n// Options: [{"require":{"ClassDeclaration":true,"FunctionDeclaration":false,"MethodDefinition":true}}]\n\nvar myFunction = function() {}\n// Options: [{"require":{"ClassDeclaration":true,"FunctionDeclaration":false,"MethodDefinition":true}}]\n\n/**\n * Description for A.\n */\nclass A {\n    /**\n     * Description for constructor.\n     * @param {object[]} xs - xs\n     */\n    constructor(xs) {\n        this.a = xs;\n    }\n}\n// Options: [{"require":{"ClassDeclaration":true,"MethodDefinition":true}}]\n\n/**\n * Description for A.\n */\nclass App extends Component {\n    /**\n     * Description for constructor.\n     * @param {object[]} xs - xs\n     */\n    constructor(xs) {\n        this.a = xs;\n    }\n}\n// Options: [{"require":{"ClassDeclaration":true,"MethodDefinition":true}}]\n\n/**\n * Description for A.\n */\nexport default class App extends Component {\n    /**\n     * Description for constructor.\n     * @param {object[]} xs - xs\n     */\n    constructor(xs) {\n        this.a = xs;\n    }\n}\n// Options: [{"require":{"ClassDeclaration":true,"MethodDefinition":true}}]\n\n/**\n * Description for A.\n */\nexport class App extends Component {\n    /**\n     * Description for constructor.\n     * @param {object[]} xs - xs\n     */\n    constructor(xs) {\n        this.a = xs;\n    }\n}\n// Options: [{"require":{"ClassDeclaration":true,"MethodDefinition":true}}]\n\nclass A {\n    constructor(xs) {\n        this.a = xs;\n    }\n}\n// Options: [{"require":{"ClassDeclaration":false,"MethodDefinition":false}}]\n\n/**\n* Function doing something\n*/\nvar myFunction = () => {}\n// Options: [{"require":{"ArrowFunctionExpression":true}}]\n\n/**\n* Function doing something\n*/\nvar myFunction = function () {}\n// Options: [{"require":{"ArrowFunctionExpression":true}}]\n\n/**\n* Function doing something\n*/\nvar myFunction = () => {}\n// Options: [{"require":{"ArrowFunctionExpression":false}}]\n\n/**\n Function doing something\n*/\nvar myFunction = () => () => {}\n// Options: [{"require":{"ArrowFunctionExpression":true}}]\n\nsetTimeout(() => {}, 10);\n// Options: [{"require":{"ArrowFunctionExpression":true}}]\n\n/**\nJSDoc Block\n*/\nvar foo = function() {}\n// Options: [{"require":{"FunctionExpression":true}}]\n\nconst foo = {/**\nJSDoc Block\n*/\nbar() {}}\n// Options: [{"require":{"FunctionExpression":true}}]\n\nvar foo = {/**\nJSDoc Block\n*/\nbar: function() {}}\n// Options: [{"require":{"FunctionExpression":true}}]\n\nvar foo = { [function() {}]: 1 };\n// Options: [{"require":{"FunctionExpression":true}}]\n\nfunction foo () {}\n// Options: [{"exemptEmptyFunctions":true}]\n\nfunction foo () {\n  return;\n}\n// Options: [{"exemptEmptyFunctions":true}]\n\nconst test = {};\n/**\n * test\n */\n test.method = function () {\n\n}\nmodule.exports = {\n  prop: { prop2: test.method }\n}\n// Options: [{"publicOnly":true,"require":{"FunctionExpression":true}}]\n\n/**\n *\n */\nfunction test() {\n\n}\n\nmodule.exports = {\n  prop: { prop2: test }\n}\n// Options: [{"publicOnly":true,"require":{"FunctionExpression":true}}]\n\n/**\n *\n */\ntest = function() {\n\n}\n\nmodule.exports = {\n  prop: { prop2: test }\n}\n// Options: [{"publicOnly":{"cjs":true,"esm":false,"window":false},"require":{"FunctionExpression":true}}]\n\n/**\n *\n */\ntest = function() {\n\n}\n\nexports.someMethod = {\n  prop: { prop2: test }\n}\n// Options: [{"publicOnly":{"cjs":false,"esm":true,"window":false},"require":{"FunctionExpression":true}}]\n\n/**\n *\n */\nconst test = () => {\n\n}\n\nmodule.exports = {\nprop: { prop2: test }\n}\n// Options: [{"publicOnly":true,"require":{"ArrowFunctionExpression":true}}]\n\nconst test = () => {\n\n}\nmodule.exports = {\n  prop: { prop2: test }\n}\n// Options: [{"publicOnly":{"ancestorsOnly":true},"require":{"ArrowFunctionExpression":true}}]\n\n/**\n *\n */\nwindow.test = function() {\n\n}\n\nmodule.exports = {\nprop: window\n}\n// Options: [{"publicOnly":true,"require":{"FunctionExpression":true}}]\n\ntest = function() {\n\n}\n\n/**\n *\n */\ntest = function() {\n\n}\n\nmodule.exports = {\nprop: { prop2: test }\n}\n// Options: [{"publicOnly":true,"require":{"FunctionExpression":true}}]\n\ntest = function() {\n\n}\n\ntest = 2;\n\nmodule.exports = {\nprop: { prop2: test }\n}\n// Options: [{"publicOnly":true,"require":{"FunctionExpression":true}}]\n\n/**\n *\n */\nfunction test() {\n\n}\n\n/**\n *\n */\ntest.prototype.method = function() {\n\n}\n\nmodule.exports = {\nprop: { prop2: test }\n}\n// Options: [{"publicOnly":true,"require":{"FunctionExpression":true}}]\n\nclass Test {\n  /**\n   * Test\n   */\n  method() {\n\n  }\n}\nmodule.exports = Test;\n// Options: [{"publicOnly":true,"require":{"MethodDefinition":true}}]\n\n/**\n *\n */\nexport default function quux () {\n\n}\n// Options: [{"publicOnly":true,"require":{"FunctionExpression":true}}]\n\n/**\n *\n */\nexport default function quux () {\n\n}\n// Options: [{"publicOnly":{"ancestorsOnly":true},"require":{"FunctionExpression":true}}]\n\n/**\n *\n */\nfunction quux () {\n\n}\nexport default quux;\n// Options: [{"publicOnly":true,"require":{"FunctionExpression":true}}]\n\nfunction quux () {\n\n}\nexport default quux;\n// Options: [{"publicOnly":{"ancestorsOnly":true},"require":{"FunctionExpression":true}}]\n\n/**\n *\n */\nexport function test() {\n\n}\n// Options: [{"publicOnly":true,"require":{"FunctionExpression":true}}]\n\n/**\n *\n */\nexport function test() {\n\n}\n// Options: [{"publicOnly":{"ancestorsOnly":true},"require":{"FunctionExpression":true}}]\n\n/**\n *\n */\nvar test = function () {\n\n}\nvar test2 = 2;\nexport { test, test2 }\n// Options: [{"publicOnly":true,"require":{"FunctionExpression":true}}]\n\n/**\n *\n */\nvar test = function () {\n\n}\nexport { test as test2 }\n// Options: [{"publicOnly":true,"require":{"FunctionExpression":true}}]\n\n/**\n *\n */\nexport default class A {\n\n}\n// Options: [{"publicOnly":{"ancestorsOnly":true},"require":{"ClassDeclaration":true}}]\n\n/**\n *\n */\nvar test = function () {\n\n}\n// Options: [{"publicOnly":{"window":true},"require":{"FunctionExpression":true}}]\n\nlet test = function () {\n\n}\n// Options: [{"publicOnly":{"window":true},"require":{"FunctionExpression":true}}]\n\nlet test = class {\n\n}\n// Options: [{"publicOnly":true,"require":{"ClassExpression":false}}]\n\n/**\n *\n */\nlet test = class {\n\n}\n// Options: [{"publicOnly":true,"require":{"ClassExpression":true}}]\n\nexport function someMethod() {\n\n}\n// Options: [{"publicOnly":{"cjs":true,"esm":false,"window":false},"require":{"FunctionDeclaration":true}}]\n\nexport function someMethod() {\n\n}\n// Options: [{"publicOnly":{"cjs":true,"esm":false,"window":false},"require":{"FunctionDeclaration":true}}]\n\nexports.someMethod = function() {\n\n}\n// Options: [{"publicOnly":{"cjs":false,"esm":true,"window":false},"require":{"FunctionExpression":true}}]\n\nconst myObject = {\n  myProp: true\n};\n// Options: [{"contexts":[]}]\n\nfunction bear() {}\n/**\n *\n */\nfunction quux () {\n}\nexport default quux;\n// Options: [{"publicOnly":true,"require":{"FunctionExpression":true}}]\n\n/**\n * This example interface is great!\n */\nexport interface Example {\n  /**\n   * My super test string!\n   */\n  test: string\n}\n// Options: [{"contexts":["TSInterfaceDeclaration"]}]\n\n/**\n * This example interface is great!\n */\ninterface Example {\n  /**\n   * My super test string!\n   */\n  test: string\n}\n// Options: [{"contexts":["TSInterfaceDeclaration"]}]\n\n/**\n * This example type is great!\n */\nexport type Example = {\n  /**\n   * My super test string!\n   */\n  test: string\n};\n// Options: [{"contexts":["TSTypeAliasDeclaration"]}]\n\n/**\n * This example type is great!\n */\ntype Example = {\n  /**\n   * My super test string!\n   */\n  test: string\n};\n// Options: [{"contexts":["TSTypeAliasDeclaration"]}]\n\n/**\n * This example enum is great!\n */\nexport enum Example {\n  /**\n   * My super test enum!\n   */\n  test = 123\n}\n// Options: [{"contexts":["TSEnumDeclaration"]}]\n\n/**\n * This example enum is great!\n */\nenum Example {\n  /**\n   * My super test enum!\n   */\n  test = 123\n}\n// Options: [{"contexts":["TSEnumDeclaration"]}]\n\nconst foo = {...{}};\nfunction bar() {}\n// Options: [{"exemptEmptyFunctions":false,"publicOnly":true,"require":{"ArrowFunctionExpression":true,"ClassDeclaration":true,"ClassExpression":true,"FunctionDeclaration":true,"FunctionExpression":false,"MethodDefinition":true}}]\n````\n\n\n<a name="eslint-plugin-jsdoc-rules-require-param-description"></a>\n### <code>require-param-description</code>\n\nRequires that `@param` tag has `description` value.\n\n|||\n|---|---|\n|Context|`ArrowFunctionExpression`, `FunctionDeclaration`, `FunctionExpression`|\n|Tags|`param`|\n|Aliases|`arg`, `argument`|\n\nThe following patterns are considered problems:\n\n````js\n/**\n * @param foo\n */\nfunction quux (foo) {\n\n}\n// Message: Missing JSDoc @param "foo" description.\n\n/**\n * @arg foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"tagNamePreference":{"param":"arg"}}}\n// Message: Missing JSDoc @arg "foo" description.\n\n/**\n * @param foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"tagNamePreference":{"param":false}}}\n// Message: Unexpected tag `@param`\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n *\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @param foo Foo.\n */\nfunction quux (foo) {\n\n}\n````\n\n\n<a name="eslint-plugin-jsdoc-rules-require-param-name"></a>\n### <code>require-param-name</code>\n\nRequires that all function parameters have name.\n\n> The `@param` tag requires you to specify the name of the parameter you are documenting. You can also include the parameter\'s type, enclosed in curly brackets, and a description of the parameter.\n>\n> [JSDoc](https://jsdoc.app/tags-param.html#overview)\n\n|||\n|---|---|\n|Context|`ArrowFunctionExpression`, `FunctionDeclaration`, `FunctionExpression`|\n|Tags|`param`|\n|Aliases|`arg`, `argument`|\n\nThe following patterns are considered problems:\n\n````js\n/**\n * @param\n */\nfunction quux (foo) {\n\n}\n// Message: There must be an identifier after @param type.\n\n/**\n * @param {string}\n */\nfunction quux (foo) {\n\n}\n// Message: There must be an identifier after @param tag.\n\n/**\n * @param foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"tagNamePreference":{"param":false}}}\n// Message: Unexpected tag `@param`\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n * @param foo\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @param {string} foo\n */\nfunction quux (foo) {\n\n}\n````\n\n\n<a name="eslint-plugin-jsdoc-rules-require-param-type"></a>\n### <code>require-param-type</code>\n\nRequires that `@param` tag has `type` value.\n\n|||\n|---|---|\n|Context|`ArrowFunctionExpression`, `FunctionDeclaration`, `FunctionExpression`|\n|Tags|`param`|\n|Aliases|`arg`, `argument`|\n\nThe following patterns are considered problems:\n\n````js\n/**\n * @param foo\n */\nfunction quux (foo) {\n\n}\n// Message: Missing JSDoc @param "foo" type.\n\n/**\n * @arg foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"tagNamePreference":{"param":"arg"}}}\n// Message: Missing JSDoc @arg "foo" type.\n\n/**\n * @param foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"tagNamePreference":{"param":false}}}\n// Message: Unexpected tag `@param`\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n *\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @param {number} foo\n */\nfunction quux (foo) {\n\n}\n````\n\n\n<a name="eslint-plugin-jsdoc-rules-require-param"></a>\n### <code>require-param</code>\n\nRequires that all function parameters are documented.\n\n<a name="eslint-plugin-jsdoc-rules-require-param-options-15"></a>\n#### Options\n\nAn options object accepts one optional property:\n\n- `exemptedBy` - Array of tags (e.g., `[\'type\']`) whose presence on the document\n    block avoids the need for a `@param`. Defaults to an empty array.\n\n|||\n|---|---|\n|Context|`ArrowFunctionExpression`, `FunctionDeclaration`, `FunctionExpression`|\n|Tags|`param`|\n|Aliases|`arg`, `argument`|\n|Options|`exemptedBy`|\n|Settings|`overrideReplacesDocs`, `augmentsExtendsReplacesDocs`, `implementsReplacesDocs`|\n\nThe following patterns are considered problems:\n\n````js\n/**\n *\n */\nfunction quux (foo) {\n\n}\n// Message: Missing JSDoc @param "foo" declaration.\n\n/**\n *\n */\nfunction quux (foo, bar) {\n\n}\n// Message: Missing JSDoc @param "foo" declaration.\n\n/**\n * @param foo\n */\nfunction quux (foo, bar) {\n\n}\n// Message: Missing JSDoc @param "bar" declaration.\n\n/**\n * @param bar\n */\nfunction quux (foo, bar, baz) {\n\n}\n// Message: Missing JSDoc @param "foo" declaration.\n\n/**\n * @param foo\n * @param bar\n */\nfunction quux (foo, bar, baz) {\n\n}\n// Message: Missing JSDoc @param "baz" declaration.\n\n/**\n * @param baz\n */\nfunction quux (foo, bar, baz) {\n\n}\n// Message: Missing JSDoc @param "foo" declaration.\n\n/**\n * @param\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"tagNamePreference":{"param":"arg"}}}\n// Message: Missing JSDoc @arg "foo" declaration.\n\n/**\n * @param foo\n */\nfunction quux (foo, bar) {\n\n}\n// Message: Missing JSDoc @param "bar" declaration.\n\n/**\n * @override\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"overrideReplacesDocs":false}}\n// Message: Missing JSDoc @param "foo" declaration.\n\n/**\n * @implements\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"implementsReplacesDocs":false}}\n// Message: Missing JSDoc @param "foo" declaration.\n\n/**\n * @augments\n */\nfunction quux (foo) {\n\n}\n// Message: Missing JSDoc @param "foo" declaration.\n\n/**\n * @extends\n */\nfunction quux (foo) {\n\n}\n// Message: Missing JSDoc @param "foo" declaration.\n\n/**\n * @override\n */\nclass A {\n  /**\n    *\n    */\n  quux (foo) {\n\n  }\n}\n// Settings: {"jsdoc":{"overrideReplacesDocs":false}}\n// Message: Missing JSDoc @param "foo" declaration.\n\n/**\n * @implements\n */\nclass A {\n  /**\n   *\n   */\n  quux (foo) {\n\n  }\n}\n// Settings: {"jsdoc":{"implementsReplacesDocs":false}}\n// Message: Missing JSDoc @param "foo" declaration.\n\n/**\n * @augments\n */\nclass A {\n  /**\n   *\n   */\n  quux (foo) {\n\n  }\n}\n// Message: Missing JSDoc @param "foo" declaration.\n\n/**\n * @extends\n */\nclass A {\n  /**\n   *\n   */\n  quux (foo) {\n\n  }\n}\n// Message: Missing JSDoc @param "foo" declaration.\n\nexport class SomeClass {\n  /**\n   * @param property\n   */\n  constructor(private property: string, private foo: number) {}\n}\n// Message: Missing JSDoc @param "foo" declaration.\n\n/**\n * @param\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"tagNamePreference":{"param":false}}}\n// Message: Unexpected tag `@param`\n\n/**\n *\n */\nfunction quux ({bar, baz}, foo) {\n}\n// Message: Missing JSDoc @param "foo" declaration.\n\n/**\n *\n */\nfunction quux (foo, {bar, baz}) {\n}\n// Message: Missing JSDoc @param "foo" declaration.\n\n/**\n *\n */\nfunction quux ([bar, baz], foo) {\n}\n// Message: Missing JSDoc @param "foo" declaration.\n\n/**\n *\n */\nfunction quux (foo) {\n}\n// Options: [{"exemptedBy":["notPresent"]}]\n// Message: Missing JSDoc @param "foo" declaration.\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n * @param foo\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @inheritdoc\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @arg foo\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"tagNamePreference":{"param":"arg"}}}\n\n/**\n * @override\n * @param foo\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @override\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @override\n */\nclass A {\n  /**\n    *\n    */\n  quux (foo) {\n\n  }\n}\n\n/**\n * @override\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"overrideReplacesDocs":true}}\n\n/**\n * @implements\n */\nclass A {\n  /**\n   *\n   */\n  quux (foo) {\n\n  }\n}\n\n/**\n * @implements\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @implements\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"implementsReplacesDocs":true}}\n\n/**\n * @implements\n * @param foo\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @augments\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"augmentsExtendsReplacesDocs":true}}\n\n/**\n * @augments\n * @param foo\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @extends\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"augmentsExtendsReplacesDocs":true}}\n\n/**\n * @extends\n * @param foo\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @augments\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"augmentsExtendsReplacesDocs":true}}\n\n/**\n * @extends\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"augmentsExtendsReplacesDocs":true}}\n\n/**\n * @override\n */\nclass A {\n  /**\n  * @param foo\n  */\n  quux (foo) {\n\n  }\n}\n\n/**\n * @override\n */\nclass A {\n  /**\n   *\n   */\n  quux (foo) {\n\n  }\n}\n// Settings: {"jsdoc":{"overrideReplacesDocs":true}}\n\n/**\n * @implements\n */\nclass A {\n  /**\n   *\n   */\n  quux (foo) {\n\n  }\n}\n// Settings: {"jsdoc":{"implementsReplacesDocs":true}}\n\n/**\n * @implements\n */\nclass A {\n  /**\n   * @param foo\n   */\n  quux (foo) {\n\n  }\n}\n\n/**\n * @augments\n */\nclass A {\n  /**\n   *\n   */\n  quux (foo) {\n\n  }\n}\n// Settings: {"jsdoc":{"augmentsExtendsReplacesDocs":true}}\n\n/**\n * @augments\n */\nclass A {\n  /**\n   * @param foo\n   */\n  quux (foo) {\n\n  }\n}\n\n/**\n * @extends\n */\nclass A {\n  /**\n   *\n   */\n  quux (foo) {\n\n  }\n}\n// Settings: {"jsdoc":{"augmentsExtendsReplacesDocs":true}}\n\n/**\n * @extends\n */\nclass A {\n  /**\n   * @param foo\n   */\n  quux (foo) {\n\n  }\n}\n\n/**\n * @augments\n */\nclass A {\n  /**\n   *\n   */\n  quux (foo) {\n\n  }\n}\n// Settings: {"jsdoc":{"augmentsExtendsReplacesDocs":true}}\n\n/**\n * @extends\n */\nclass A {\n  /**\n   *\n   */\n  quux (foo) {\n\n  }\n}\n// Settings: {"jsdoc":{"augmentsExtendsReplacesDocs":true}}\n\n/**\n * @private\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"ignorePrivate":true}}\n\n// issue 182: optional chaining\n/** @const {boolean} test */\nconst test = something?.find(_ => _)\n\n/** @type {RequestHandler} */\nfunction foo(req, res, next) {}\n\n/**\n * @type {MyCallback}\n */\nfunction quux () {\n\n}\n// Options: [{"exemptedBy":["type"]}]\n\n/**\n * @override\n */\nvar A = class {\n  /**\n    *\n    */\n  quux (foo) {\n\n  }\n}\n\nexport class SomeClass {\n  /**\n   * @param property\n   */\n  constructor(private property: string) {}\n}\n\n/**\n * Assign the project to an employee.\n *\n * @param {object} employee - The employee who is responsible for the project.\n * @param {string} employee.name - The name of the employee.\n * @param {string} employee.department - The employee\'s department.\n */\nfunction assign({name, department}) {\n  // ...\n}\n````\n\n\n<a name="eslint-plugin-jsdoc-rules-require-returns-check"></a>\n### <code>require-returns-check</code>\n\nRequires a return statement in function body if a `@returns` tag is specified in jsdoc comment.\n\nWill also report if multiple `@returns` tags are present.\n\n|||\n|---|---|\n|Context|`ArrowFunctionExpression`, `FunctionDeclaration`, `FunctionExpression`|\n|Tags|`returns`|\n|Aliases|`return`|\n\nThe following patterns are considered problems:\n\n````js\n/**\n * @returns\n */\nfunction quux (foo) {\n\n}\n// Message: JSDoc @returns declaration present but return expression not available in function.\n\n/**\n * @return\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"tagNamePreference":{"returns":"return"}}}\n// Message: JSDoc @return declaration present but return expression not available in function.\n\n/**\n * @returns\n */\nconst quux = () => {}\n// Message: JSDoc @returns declaration present but return expression not available in function.\n\n/**\n * @returns {undefined} Foo.\n * @returns {String} Foo.\n */\nfunction quux () {\n\n  return foo;\n}\n// Message: Found more than one @returns declaration.\n\nconst language = {\n  /**\n   * @param {string} name\n   * @returns {string}\n   */\n  get name() {\n    this._name = name;\n  }\n}\n// Message: JSDoc @returns declaration present but return expression not available in function.\n\nclass Foo {\n  /**\n   * @returns {string}\n   */\n  bar () {\n  }\n}\n// Message: JSDoc @returns declaration present but return expression not available in function.\n\n/**\n * @returns\n */\nfunction quux () {\n\n}\n// Settings: {"jsdoc":{"tagNamePreference":{"returns":false}}}\n// Message: Unexpected tag `@returns`\n\n/**\n * @returns {string}\n */\nfunction f () {\n  function g() {\n    return \'foo\'\n  }\n\n  () => {\n    return 5\n  }\n}\n// Message: JSDoc @returns declaration present but return expression not available in function.\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n * @returns Foo.\n */\nfunction quux () {\n\n  return foo;\n}\n\n/**\n * @returns {string} Foo.\n */\nfunction quux () {\n\n  return foo;\n}\n\n/**\n * @returns {string} Foo.\n */\nfunction quux () {\n\n  return foo;\n}\n\n/**\n *\n */\nfunction quux () {\n}\n\n/**\n * @returns {*} Foo.\n */\nconst quux = () => foo;\n\n/**\n * @returns {undefined} Foo.\n */\nfunction quux () {}\n\n/**\n * @returns { void } Foo.\n */\nfunction quux () {}\n\n/**\n * @returns {Promise<void>}\n */\nasync function quux() {}\n\n/**\n * @returns {Promise<void>}\n */\nconst quux = async function () {}\n\n/**\n * @returns {Promise<void>}\n */\nconst quux = async () => {}\n\n/**\n * @returns Foo.\n * @abstract\n */\nfunction quux () {\n  throw new Error(\'must be implemented by subclass!\');\n}\n\n/**\n * @returns Foo.\n * @virtual\n */\nfunction quux () {\n  throw new Error(\'must be implemented by subclass!\');\n}\n\n/**\n * @returns Foo.\n * @constructor\n */\nfunction quux () {\n}\n\n/**\n * @interface\n */\nclass Foo {\n  /**\n   * @returns {string}\n   */\n  bar () {\n  }\n}\n\n/**\n * @returns {undefined} Foo.\n */\nfunction quux () {\n}\n\n/**\n * @returns {void} Foo.\n */\nfunction quux () {\n}\n\n/**\n * @returns {void} Foo.\n */\nfunction quux () {\n  return undefined;\n}\n\n/**\n * @returns {void} Foo.\n */\nfunction quux () {\n  return;\n}\n\n/**\n *\n */\nfunction quux () {\n  return undefined;\n}\n\n/**\n *\n */\nfunction quux () {\n  return;\n}\n\n/**\n * @returns {true}\n */\nfunction quux () {\n  try {\n    return true;\n  } catch (err) {\n  }\n  return;\n}\n\n/**\n * @returns {true}\n */\nfunction quux () {\n  try {\n  } finally {\n    return true;\n  }\n  return;\n}\n\n/**\n * @returns {true}\n */\nfunction quux () {\n  try {\n    return;\n  } catch (err) {\n  }\n  return true;\n}\n\n/**\n * @returns {true}\n */\nfunction quux () {\n  try {\n    something();\n  } catch (err) {\n    return true;\n  }\n  return;\n}\n\n/**\n * @returns {true}\n */\nfunction quux () {\n  switch (true) {\n  case \'abc\':\n    return true;\n  }\n  return;\n}\n\n/**\n * @returns {true}\n */\nfunction quux () {\n  switch (true) {\n  case \'abc\':\n    return;\n  }\n  return true;\n}\n\n/**\n * @returns {true}\n */\nfunction quux () {\n  for (const i of abc) {\n    return true;\n  }\n  return;\n}\n\n/**\n * @returns {true}\n */\nfunction quux () {\n  for (const a in b) {\n    return true;\n  }\n}\n\n/**\n * @returns {true}\n */\nfunction quux () {\n  for (let i=0; i<n; i+=1) {\n    return true;\n  }\n}\n\n/**\n * @returns {true}\n */\nfunction quux () {\n  while(true) {\n    return true\n  }\n}\n\n/**\n * @returns {true}\n */\nfunction quux () {\n  do {\n    return true\n  }\n  while(true)\n}\n\n/**\n * @returns {true}\n */\nfunction quux () {\n  if (true) {\n    return;\n  }\n  return true;\n}\n\n/**\n * @returns {true}\n */\nfunction quux () {\n  if (true) {\n    return true;\n  }\n}\n\n/**\n * @returns {true}\n */\nfunction quux () {\n  var a = {};\n  with (a) {\n    return true;\n  }\n}\n\n/**\n * @returns {true}\n */\nfunction quux () {\n  if (true) {\n    return;\n  } else {\n    return true;\n  }\n  return;\n}\n````\n\n\n<a name="eslint-plugin-jsdoc-rules-require-returns-description"></a>\n### <code>require-returns-description</code>\n\nRequires that `@returns` tag has `description` value.\n\n|||\n|---|---|\n|Context|`ArrowFunctionExpression`, `FunctionDeclaration`, `FunctionExpression`|\n|Tags|`returns`|\n|Aliases|`return`|\n\nThe following patterns are considered problems:\n\n````js\n/**\n * @returns\n */\nfunction quux (foo) {\n\n}\n// Message: Missing JSDoc @returns description.\n\n/**\n * @return\n */\nfunction quux (foo) {\n\n}\n// Settings: {"jsdoc":{"tagNamePreference":{"returns":"return"}}}\n// Message: Missing JSDoc @return description.\n\n/**\n * @returns\n */\nfunction quux () {\n\n}\n// Settings: {"jsdoc":{"tagNamePreference":{"returns":false}}}\n// Message: Unexpected tag `@returns`\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n *\n */\nfunction quux () {\n\n}\n\n/**\n * @returns Foo.\n */\nfunction quux () {\n\n}\n\n/**\n * @returns {undefined}\n */\nfunction quux () {\n\n}\n\n/**\n * @returns {void}\n */\nfunction quux () {\n\n}\n````\n\n\n<a name="eslint-plugin-jsdoc-rules-require-returns-type"></a>\n### <code>require-returns-type</code>\n\nRequires that `@returns` tag has `type` value.\n\n|||\n|---|---|\n|Context|`ArrowFunctionExpression`, `FunctionDeclaration`, `FunctionExpression`|\n|Tags|`returns`|\n|Aliases|`return`|\n\nThe following patterns are considered problems:\n\n````js\n/**\n * @returns\n */\nfunction quux () {\n\n}\n// Message: Missing JSDoc @returns type.\n\n/**\n * @returns Foo.\n */\nfunction quux () {\n\n}\n// Message: Missing JSDoc @returns type.\n\n/**\n * @return Foo.\n */\nfunction quux () {\n\n}\n// Settings: {"jsdoc":{"tagNamePreference":{"returns":"return"}}}\n// Message: Missing JSDoc @return type.\n\n/**\n * @returns\n */\nfunction quux () {\n\n}\n// Settings: {"jsdoc":{"tagNamePreference":{"returns":false}}}\n// Message: Unexpected tag `@returns`\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n * @returns {number}\n */\nfunction quux () {\n\n}\n````\n\n\n<a name="eslint-plugin-jsdoc-rules-require-returns"></a>\n### <code>require-returns</code>\n\nRequires returns are documented.\n\nWill also report if multiple `@returns` tags are present.\n\n<a name="eslint-plugin-jsdoc-rules-require-returns-options-16"></a>\n#### Options\n\n- `exemptedBy` - Array of tags (e.g., `[\'type\']`) whose presence on the document\n    block avoids the need for a `@returns`. Defaults to an empty array.\n- `forceRequireReturn` - Set to `true` to always insist on\n  `@returns` documentation regardless of implicit or explicit `return`\'s\n  in the function. May be desired to flag that a project is aware of an\n  `undefined`/`void` return. Defaults to `false`.\n- `forceReturnsWithAsync` - By default `async` functions that do not explicitly return a value pass this rule. You can force all `async` functions to require return statements by setting `forceReturnsWithAsync` to `true` on the options object. This may be useful as an `async` function will always return a `Promise`, even if the `Promise` returns void. Defaults to `false`.\n\n```js\n\'jsdoc/require-returns\': [\'error\', {forceReturnsWithAsync: true}]\n```\n\n|||\n|---|---|\n|Context|`ArrowFunctionExpression`, `FunctionDeclaration`, `FunctionExpression`|\n|Tags|`returns`|\n|Aliases|`return`|\n|Options|`exemptedBy`, `forceRequireReturn`, `forceReturnsWithAsync`|\n|Settings|`overrideReplacesDocs`, `augmentsExtendsReplacesDocs`, `implementsReplacesDocs`|\n\nThe following patterns are considered problems:\n\n````js\n/**\n *\n */\nfunction quux (foo) {\n\n  return foo;\n}\n// Message: Missing JSDoc @returns declaration.\n\n/**\n *\n */\nconst foo = () => ({\n  bar: \'baz\'\n})\n// Message: Missing JSDoc @returns declaration.\n\n/**\n *\n */\nconst foo = bar=>({ bar })\n// Message: Missing JSDoc @returns declaration.\n\n/**\n *\n */\nconst foo = bar => bar.baz()\n// Message: Missing JSDoc @returns declaration.\n\n/**\n *\n */\nfunction quux (foo) {\n\n  return foo;\n}\n// Settings: {"jsdoc":{"tagNamePreference":{"returns":"return"}}}\n// Message: Missing JSDoc @return declaration.\n\n/**\n *\n */\nfunction foo() {}\n\n/**\n *\n */\nfunction bar() {}\n// Settings: {"jsdoc":{"forceRequireReturn":true}}\n// Message: `settings.jsdoc.forceRequireReturn` has been removed, use options in the rule `require-returns` instead.\n\n/**\n *\n */\nasync function quux() {\n}\n// Options: [{"forceRequireReturn":true}]\n// Message: Missing JSDoc @returns declaration.\n\n/**\n *\n */\nconst quux = async function () {}\n// Options: [{"forceRequireReturn":true}]\n// Message: Missing JSDoc @returns declaration.\n\n/**\n *\n */\nconst quux = async () => {}\n// Options: [{"forceRequireReturn":true}]\n// Message: Missing JSDoc @returns declaration.\n\n/**\n *\n */\nasync function quux () {}\n// Options: [{"forceRequireReturn":true}]\n// Message: Missing JSDoc @returns declaration.\n\n/**\n *\n */\nfunction quux () {\n}\n// Options: [{"forceRequireReturn":true}]\n// Message: Missing JSDoc @returns declaration.\n\nconst language = {\n  /**\n   * @param {string} name\n   */\n  get name() {\n    return this._name;\n  }\n}\n// Message: Missing JSDoc @returns declaration.\n\n/**\n *\n */\nasync function quux () {\n}\n// Options: [{"forceReturnsWithAsync":true}]\n// Message: Missing JSDoc @returns declaration.\n\n/**\n * @returns {undefined}\n * @returns {void}\n */\nfunction quux (foo) {\n\n  return foo;\n}\n// Message: Found more than one @returns declaration.\n\n/**\n * @returns\n */\nfunction quux () {\n\n}\n// Settings: {"jsdoc":{"tagNamePreference":{"returns":false}}}\n// Message: Unexpected tag `@returns`\n\n/**\n * @param foo\n */\nfunction quux (foo) {\n  return \'bar\';\n}\n// Options: [{"exemptedBy":["notPresent"]}]\n// Message: Missing JSDoc @returns declaration.\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n * @returns Foo.\n */\nfunction quux () {\n\n  return foo;\n}\n\n/**\n *\n */\nfunction quux () {\n}\n\n/**\n *\n */\nfunction quux (bar) {\n  bar.filter(baz => {\n    return baz.corge();\n  })\n}\n\n/**\n * @returns Array\n */\nfunction quux (bar) {\n  return bar.filter(baz => {\n    return baz.corge();\n  })\n}\n\n/**\n * @returns Array\n */\nconst quux = (bar) => bar.filter(({ corge }) => corge())\n\n/**\n * @inheritdoc\n */\nfunction quux (foo) {\n}\n\n/**\n * @override\n */\nfunction quux (foo) {\n}\n\n/**\n * @constructor\n */\nfunction quux (foo) {\n}\n\n/**\n * @implements\n */\nfunction quux (foo) {\n}\n\n/**\n * @override\n */\nfunction quux (foo) {\n\n  return foo;\n}\n\n/**\n * @class\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @constructor\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @returns {Object}\n */\nfunction quux () {\n\n  return {a: foo};\n}\n\n/**\n * @returns {Object}\n */\nconst quux = () => ({a: foo});\n\n/**\n * @returns {Object}\n */\nconst quux = () => {\n  return {a: foo}\n};\n\n/**\n * @returns {void}\n */\nfunction quux () {\n}\n\n/**\n * @returns {void}\n */\nconst quux = () => {\n\n}\n\n/**\n * @returns {undefined}\n */\nfunction quux () {\n}\n\n/**\n * @returns {undefined}\n */\nconst quux = () => {\n\n}\n\n/**\n *\n */\nfunction quux () {\n}\n\n/**\n *\n */\nconst quux = () => {\n\n}\n\nclass Foo {\n  /**\n   *\n   */\n  constructor () {\n  }\n}\n// Options: [{"forceRequireReturn":true}]\n\nconst language = {\n  /**\n   * @param {string} name\n   */\n  set name(name) {\n    this._name = name;\n  }\n}\n\n/**\n * @returns {void}\n */\nfunction quux () {\n}\n// Options: [{"forceRequireReturn":true}]\n\n/**\n * @returns {void}\n */\nfunction quux () {\n  return undefined;\n}\n\n/**\n * @returns {void}\n */\nfunction quux () {\n  return undefined;\n}\n// Options: [{"forceRequireReturn":true}]\n\n/**\n * @returns {void}\n */\nfunction quux () {\n  return;\n}\n\n/**\n * @returns {void}\n */\nfunction quux () {\n}\n// Options: [{"forceRequireReturn":true}]\n\n/**\n * @returns {void}\n */\nfunction quux () {\n  return;\n}\n// Options: [{"forceRequireReturn":true}]\n\n/** @type {RequestHandler} */\nfunction quux (req, res , next) {\n  return;\n}\n\n/**\n * @returns {Promise}\n */\nasync function quux () {\n}\n// Options: [{"forceRequireReturn":true}]\n\n/**\n * @returns {Promise}\n */\nasync function quux () {\n}\n// Options: [{"forceReturnsWithAsync":true}]\n\n/**\n *\n */\nasync function quux () {}\n\n/**\n *\n */\nconst quux = async function () {}\n\n/**\n *\n */\nconst quux = async () => {}\n\n/** foo class */\nclass foo {\n  /** foo constructor */\n  constructor () {\n    // =>\n    this.bar = true;\n  }\n}\n\nexport default foo;\n\n/**\n *\n */\nfunction quux () {\n}\n// Options: [{"forceReturnsWithAsync":true}]\n\n/**\n * @type {MyCallback}\n */\nfunction quux () {\n\n}\n// Options: [{"exemptedBy":["type"]}]\n````\n\n\n<a name="eslint-plugin-jsdoc-rules-valid-types"></a>\n### <code>valid-types</code>\n\nRequires all types to be valid JSDoc or Closure compiler types without syntax errors.\n\nAlso impacts behaviors on namepath (or event)-defining and pointing tags:\n\n1. Name(path)-defining tags requiring namepath: `@external`, `@host`, `@name`, `@typedef`\n1. Name(path)-defining tags (which may have value without namepath or their\n    namepath can be expressed elsewhere on the block): `@event`, `@callback`,\n    `@class`, `@constructor`, `@constant`, `@const`,\n    `@function`, `@func`, `@method`, `@interface`, `@member`, `@var`,\n    `@mixin`, `@namespace`\n1. Name(path)-pointing tags requiring namepath: `@alias`, `@augments`, `@extends`, `@lends`, `@memberof`, `@memberof!`, `@mixes`, `@this`\n1. Name(path)-pointing tags (which may have value without namepath or their\n    namepath can be expressed elsewhere on the block): `@listens`, `@fires`,\n    `@emits`, and `@modifies`\n1. Name(path)-pointing tags (multiple names in one): `@borrows`\n\n...with the following applying to the above sets:\n\n- Expect tags in set 1-4 to have a valid namepath if present\n- Prevent sets 2 and 4 from being empty by setting `allowEmptyNamepaths` to\n  `false` as these tags might have some indicative value without a path\n  or may allow a name expressed elsewhere on the block (but sets 1 and 3 will\n  always fail if empty)\n- For the special case of set 5, i.e., `@borrows <that namepath> as <this namepath>`,\n  check that both namepaths are present and valid and ensure there is an `as `\n  between them. In the case of `<this namepath>`, it can be preceded by\n  one of the name path operators, `#`, `.`, or `~`.\n- For the special case of `@memberof` and `@memberof!` (part of set 3), as\n   per the [specification](https://jsdoc.app/tags-memberof.html), they also\n   allow `#`, `.`, or `~` at the end (which is not allowed at the end of\n   normal paths).\n\n<a name="eslint-plugin-jsdoc-rules-valid-types-options-17"></a>\n#### Options\n\n- `allowEmptyNamepaths` (default: true) - Set to `false` to disallow\n  empty name paths with `@callback`, `@event`, `@class`, `@constructor`,\n  `@constant`, `@const`, `@function`, `@func`, `@method`, `@interface`,\n  `@member`, `@var`, `@mixin`, `@namespace`, `@listens`, `@fires`,\n  `@modifies`, or `@emits` (these might often be expected to have an\n  accompanying name path, though they have some indicative value without\n  one; these may also allow names to be defined in another manner elsewhere\n  in the block)\n- `checkSeesForNamepaths` (default: false) - Set this to `true` to insist\n  that `@see` only use name paths (the tag is normally permitted to\n  allow other text)\n\n\n|||\n|---|---|\n|Context|everywhere|\n|Tags|For name only unless otherwise stated: `alias`, `augments`, `borrows`, `callback`, `class` (for name and type), `constant` (for name and type), `enum` (for type), `event`, `external`, `fires`, `function`, `implements` (for type), `interface`, `lends`, `listens`, `member` (for name and type),  `memberof`, `memberof!`, `mixes`, `mixin`, `modifies`, `module` (for name and type), `name`, `namespace` (for name and type), `param` (for name and type), `property` (for name and type), `returns` (for type), `this`, `throws` (for type), `type` (for type), `typedef` (for name and type), `yields` (for type)|\n|Aliases|`extends`, `constructor`, `const`, `host`, `emits`, `func`, `method`, `var`, `arg`, `argument`, `prop`, `return`, `exception`, `yield`|\n|Closure-only|For type only: `package`, `private`, `protected`, `public`, `static`|\n|Options|`allowEmptyNamepaths`, `checkSeesForNamepaths`|\n|Settings|`mode`|\n\nThe following patterns are considered problems:\n\n````js\n/**\n * @param {Array<string} foo\n */\nfunction quux() {\n\n}\n// Message: Syntax error in type: Array<string\n\n/**\n * @memberof module:namespace.SomeClass<~\n */\nfunction quux() {\n\n}\n// Message: Syntax error in namepath: module:namespace.SomeClass<~\n\n/**\n * @memberof module:namespace.SomeClass~<\n */\nfunction quux() {\n\n}\n// Message: Syntax error in namepath: module:namespace.SomeClass~<\n\n/**\n * @borrows foo% as bar\n */\nfunction quux() {\n\n}\n// Message: Syntax error in namepath: foo%\n\n/**\n * @borrows #foo as bar\n */\nfunction quux() {\n\n}\n// Message: Syntax error in namepath: #foo\n\n/**\n * @borrows foo as bar%\n */\nfunction quux() {\n\n}\n// Message: Syntax error in namepath: bar%\n\n/**\n * @borrows foo\n */\nfunction quux() {\n\n}\n// Message: @borrows must have an "as" expression. Found ""\n\n/**\n * @see foo%\n */\nfunction quux() {\n\n}\n// Options: [{"checkSeesForNamepaths":true}]\n// Message: Syntax error in namepath: foo%\n\n/** */\nfunction foo() {}\n// Settings: {"jsdoc":{"allowEmptyNamepaths":true,"checkSeesForNamepaths":true}}\n// Message: `settings.jsdoc.allowEmptyNamepaths` has been removed, use options in the rule `valid-types` instead.\n\n/**\n * @alias module:abc#event:foo-bar\n */\nfunction quux() {\n\n}\n// Message: Syntax error in namepath: module:abc#event:foo-bar\n\n/**\n * @mixes module:namespace.SomeClass~\n */\nfunction quux() {\n\n}\n// Message: Syntax error in namepath: module:namespace.SomeClass~\n\n/**\n * @callback\n */\nfunction quux() {\n\n}\n// Options: [{"allowEmptyNamepaths":false}]\n// Message: Tag @callback must have a namepath\n\n/**\n * @constant {str%ng}\n */\n const FOO = \'foo\';\n// Message: Syntax error in type: str%ng\n\n/**\n * @typedef {str%ng} UserString\n */\n// Message: Syntax error in type: str%ng\n\n/**\n * @typedef {string} UserStr%ng\n */\n// Message: Syntax error in namepath: UserStr%ng\n\n/**\n * @extends\n */\n class Bar {};\n// Message: Tag @extends must have either a type or namepath\n\n/**\n * @type\n */\n let foo;\n// Message: Tag @type must have a type\n\n/**\n * @modifies {bar|foo<}\n */\nfunction quux (foo, bar, baz) {}\n// Message: Syntax error in type: bar|foo<\n\n/**\n * @private {BadTypeChecked<}\n */\nfunction quux () {}\n// Settings: {"jsdoc":{"mode":"closure"}}\n// Message: Syntax error in type: BadTypeChecked<\n````\n\nThe following patterns are not considered problems:\n\n````js\n/**\n * @param {Array<string>} foo\n */\nfunction quux() {\n\n}\n\n/**\n * @param {string} foo\n */\nfunction quux() {\n\n}\n\n/**\n * @param foo\n */\nfunction quux() {\n\n}\n\n/**\n * @borrows foo as bar\n */\nfunction quux() {\n\n}\n\n/**\n * @borrows foo as #bar\n */\nfunction quux() {\n\n}\n\n/**\n * @see foo%\n */\nfunction quux() {\n\n}\n\n/**\n * @alias module:namespace.SomeClass#event:ext_anevent\n */\nfunction quux() {\n\n}\n\n/**\n * @callback foo\n */\nfunction quux() {\n\n}\n\n/**\n * @callback\n */\nfunction quux() {\n\n}\n// Options: [{"allowEmptyNamepaths":true}]\n\n/**\n * @class\n */\nfunction quux() {\n\n}\n\n/**\n * @see {@link foo}\n */\nfunction quux() {\n\n}\n// Options: [{"checkSeesForNamepaths":true}]\n\n/**\n *\n * @fires {module:namespace.SomeClass#event:ext_anevent}\n */\nfunction quux() {\n\n}\n\n/**\n * @memberof module:namespace.SomeClass~\n */\nfunction quux() {\n\n}\n\n/**\n * @memberof! module:namespace.SomeClass.\n */\nfunction quux() {\n\n}\n\n/**\n *\n */\nfunction quux() {\n\n}\n\n/**\n * @constant {string}\n */\n const FOO = \'foo\';\n\n/**\n * @constant {string} FOO\n */\n const FOO = \'foo\';\n\n/**\n * @extends Foo\n */\n class Bar {};\n\n/**\n * @extends {Foo<String>}\n */\n class Bar {};\n\n/**\n * @typedef {number|string} UserDefinedType\n */\n\n/**\n * @typedef {number|string}\n */\nlet UserDefinedGCCType;\n\n/**\n * @modifies {foo|bar}\n */\nfunction quux (foo, bar, baz) {}\n\n/**\n * @private {BadTypeNotCheckedInJsdoc<}\n */\nfunction quux () {}\n````\n\n\n'