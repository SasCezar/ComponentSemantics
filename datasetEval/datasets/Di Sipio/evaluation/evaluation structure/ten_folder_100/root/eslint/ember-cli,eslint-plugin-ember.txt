b'# eslint-plugin-ember\n\n[![NPM version](https://img.shields.io/npm/v/eslint-plugin-ember.svg?style=flat)](https://npmjs.org/package/eslint-plugin-ember)\n[![NPM downloads](https://img.shields.io/npm/dm/eslint-plugin-ember.svg?style=flat)](https://npmjs.org/package/eslint-plugin-ember)\n[![Build Status](https://travis-ci.org/ember-cli/eslint-plugin-ember.svg?branch=master)](https://travis-ci.org/ember-cli/eslint-plugin-ember)\n\n> An ESlint plugin that provides set of rules for Ember Applications based on commonly known good practices.\n\n## \xe2\x9d\x97\xef\xb8\x8f Requirements\n\n- [ESLint](https://eslint.org/) `>= 5`\n- [Node.js](https://nodejs.org/) `>= 8`\n\n## \xf0\x9f\x9a\x80 Usage\n\n### 1. Install plugin\n\n```shell\n  yarn add --dev eslint-plugin-ember\n```\nOr\n```shell\n  npm install --save-dev eslint-plugin-ember\n```\n\n### 2. Modify your `.eslintrc.js`:\n\n#### Use with predefined settings:\n\n```javascript\n// .eslintrc.js\nmodule.exports = {\n  plugins: [\n    \'ember\'\n  ],\n  extends: [\n    \'eslint:recommended\',\n    \'plugin:ember/recommended\' // or \'plugin:ember/base\'\n  ],\n  rules: {\n    // override rules\' settings here\n  }\n}\n```\n\nPossible configurations:\n- [plugin:ember/base](https://github.com/ember-cli/eslint-plugin-ember/blob/master/lib/config/base.js) - contains no rules settings, but the basic eslint configuration suitable for any ember project. You can use it to configure rules as you wish.\n- [plugin:ember/recommended](https://github.com/ember-cli/eslint-plugin-ember/blob/master/lib/config/recommended.js) - extends base configuration with recommended rules\' settings\n- :warning: [plugin:ember/octane](https://github.com/ember-cli/eslint-plugin-ember/blob/master/lib/config/octane.js) - extends recommended configuration with octane rules\' settings. This ruleset is currently considered **unstable and experiemental** as rules may be added and removed until the final ruleset is settled upon.\n\n#### Use plain plugin:\n\nIf you don\'t want to use predefined settings, you can use it as a plain plugin:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    \'ember\'\n  ],\n  extends: [\n    \'eslint:recommended\'\n  ],\n  rules: {\n    // add rules\' settings here, eg.:\n    \'ember/no-jquery\': 2\n  }\n}\n```\n\nAll rules from this plugin have to be prefixed with `ember/`\n\n## \xf0\x9f\x8d\x9f Rules\n\nRules are grouped by category to help you understand their purpose.\n\nAll rules below with a check mark :white_check_mark: are enabled by default while using `plugin:ember/recommended` config.\n\nThe `plugin:ember/octane` config contains both Octane rules with a red car :car: in addition to the rules in the `plugin:ember/recommended` config.\n\nThe `--fix` option on the command line automatically fixes problems reported by rules which have a wrench :wrench: below.\n\n<!--RULES_TABLE_START-->\n\n### Best Practices\n\n|    | Rule ID | Description |\n|:---|:--------|:------------|\n|  | [alias-model-in-controller](./docs/rules/alias-model-in-controller.md) | Enforces aliasing model in controller |\n| :white_check_mark: | [avoid-using-needs-in-controllers](./docs/rules/avoid-using-needs-in-controllers.md) | Avoids using needs in controllers |\n| :white_check_mark: | [closure-actions](./docs/rules/closure-actions.md) | Enforces usage of closure actions |\n|  | [named-functions-in-promises](./docs/rules/named-functions-in-promises.md) | Enforces usage of named functions in promises |\n| :white_check_mark: | [new-module-imports](./docs/rules/new-module-imports.md) |  Use "New Module Imports" from Ember RFC #176 |\n| :white_check_mark: | [no-function-prototype-extensions](./docs/rules/no-function-prototype-extensions.md) | Prevents usage of Ember\'s `function` prototype extensions |\n| :car: | [no-get-with-default](./docs/rules/no-get-with-default.md) | Disallows use of the Ember\'s `getWithDefault` function |\n| :car::wrench: | [no-get](./docs/rules/no-get.md) | Require ES5 getters instead of Ember\'s `get` / `getProperties` functions |\n| :white_check_mark: | [no-global-jquery](./docs/rules/no-global-jquery.md) | Prevents usage of global jQuery object |\n| :car: | [no-jquery](./docs/rules/no-jquery.md) | Disallow any usage of jQuery |\n| :white_check_mark: | [no-new-mixins](./docs/rules/no-new-mixins.md) | Prevents creation of new mixins |\n| :white_check_mark: | [no-observers](./docs/rules/no-observers.md) | Prevents usage of observers |\n| :white_check_mark::wrench: | [no-old-shims](./docs/rules/no-old-shims.md) | Prevents usage of old shims for modules |\n| :white_check_mark: | [no-on-calls-in-components](./docs/rules/no-on-calls-in-components.md) | Prevents usage of `on` to call lifecycle hooks in components |\n| :white_check_mark: | [no-restricted-resolver-tests](./docs/rules/no-restricted-resolver-tests.md) | Prevents the use of patterns that use the restricted resolver in tests. |\n|  | [no-unnecessary-index-route](./docs/rules/no-unnecessary-index-route.md) | Disallow unnecessary `index` route definition |\n| :white_check_mark::wrench: | [no-unnecessary-route-path-option](./docs/rules/no-unnecessary-route-path-option.md) | Disallow unnecessary route `path` option |\n| :wrench: | [no-unnecessary-service-injection-argument](./docs/rules/no-unnecessary-service-injection-argument.md) | Disallow unnecessary argument when injecting service |\n| :white_check_mark: | [no-volatile-computed-properties](./docs/rules/no-volatile-computed-properties.md) | Disallows volatile computed properties |\n| :wrench: | [require-computed-macros](./docs/rules/require-computed-macros.md) | Requires using computed property macros when possible |\n|  | [route-path-style](./docs/rules/route-path-style.md) | Enforces usage of kebab-case (instead of snake_case or camelCase) in route paths |\n| :wrench: | [use-ember-get-and-set](./docs/rules/use-ember-get-and-set.md) | Enforces usage of Ember.get and Ember.set |\n\n\n### Ember Object\n\n|    | Rule ID | Description |\n|:---|:--------|:------------|\n| :white_check_mark: | [avoid-leaking-state-in-ember-objects](./docs/rules/avoid-leaking-state-in-ember-objects.md) | Avoids state leakage |\n| :car: | [classic-decorator-hooks](./docs/rules/classic-decorator-hooks.md) | Ensure correct hooks are used for both classic and non-classic classes |\n| :car: | [classic-decorator-no-classic-methods](./docs/rules/classic-decorator-no-classic-methods.md) | Prevent usage of classic APIs such as get/set in classes that aren\'t explicitly decorated with @classic |\n|  | [computed-property-getters](./docs/rules/computed-property-getters.md) | Enforce the consistent use of getters in computed properties |\n|  | [no-proxies](./docs/rules/no-proxies.md) | Disallows using array or object proxies |\n\n\n### Possible Errors\n\n|    | Rule ID | Description |\n|:---|:--------|:------------|\n| :white_check_mark: | [jquery-ember-run](./docs/rules/jquery-ember-run.md) | Prevents usage of jQuery without Ember Run Loop |\n| :white_check_mark: | [no-arrow-function-computed-properties](./docs/rules/no-arrow-function-computed-properties.md) | Disallows arrow functions in computed properties |\n| :white_check_mark: | [no-attrs-in-components](./docs/rules/no-attrs-in-components.md) | Disallow usage of this.attrs in components |\n| :white_check_mark: | [no-attrs-snapshot](./docs/rules/no-attrs-snapshot.md) | Disallow use of attrs snapshot in `didReceiveAttrs` and `didUpdateAttrs` |\n| :white_check_mark: | [no-capital-letters-in-routes](./docs/rules/no-capital-letters-in-routes.md) | Raise an error when there is a route with uppercased letters in router.js |\n| :white_check_mark: | [no-deeply-nested-dependent-keys-with-each](./docs/rules/no-deeply-nested-dependent-keys-with-each.md) | Disallows usage of deeply-nested computed property dependent keys with `@each`. |\n| :white_check_mark: | [no-duplicate-dependent-keys](./docs/rules/no-duplicate-dependent-keys.md) | Disallow repeating dependent keys |\n| :white_check_mark::wrench: | [no-ember-super-in-es-classes](./docs/rules/no-ember-super-in-es-classes.md) | Prevents use of `this._super` in ES class methods |\n| :white_check_mark: | [no-ember-testing-in-module-scope](./docs/rules/no-ember-testing-in-module-scope.md) | Prevents use of Ember.testing in module scope |\n| :white_check_mark: | [no-incorrect-calls-with-inline-anonymous-functions](./docs/rules/no-incorrect-calls-with-inline-anonymous-functions.md) | Disallows inline anonymous functions as arguments to `debounce`, `once`, and `scheduleOnce` |\n| :white_check_mark: | [no-invalid-debug-function-arguments](./docs/rules/no-invalid-debug-function-arguments.md) | Catch usages of Ember\'s `assert()` / `warn()` / `deprecate()` functions that have the arguments passed in the wrong order. |\n| :white_check_mark: | [no-side-effects](./docs/rules/no-side-effects.md) | Warns about unexpected side effects in computed properties |\n| :wrench: | [require-computed-property-dependencies](./docs/rules/require-computed-property-dependencies.md) | Requires dependencies to be declared statically in computed properties |\n| :white_check_mark: | [require-return-from-computed](./docs/rules/require-return-from-computed.md) | Warns about missing return statements in computed properties |\n| :white_check_mark: | [require-super-in-init](./docs/rules/require-super-in-init.md) | Enforces super calls in init hooks |\n| :white_check_mark: | [routes-segments-snake-case](./docs/rules/routes-segments-snake-case.md) | Enforces usage of snake_cased dynamic segments in routes |\n\n\n### Ember Octane\n\n|    | Rule ID | Description |\n|:---|:--------|:------------|\n| :car: | [no-actions-hash](./docs/rules/no-actions-hash.md) | Disallows the actions hash in components, controllers and routes |\n| :car: | [no-classic-classes](./docs/rules/no-classic-classes.md) | Disallow "classic" classes in favor of native JS classes |\n| :car: | [no-classic-components](./docs/rules/no-classic-components.md) | Enforces Glimmer components |\n| :car: | [no-computed-properties-in-native-classes](./docs/rules/no-computed-properties-in-native-classes.md) | Disallows using computed properties in native classes |\n| :car: | [require-tagless-components](./docs/rules/require-tagless-components.md) | Disallows using the wrapper element of a Component |\n\n\n### Ember Data\n\n|    | Rule ID | Description |\n|:---|:--------|:------------|\n|  | [no-empty-attrs](./docs/rules/no-empty-attrs.md) | Prevents usage of empty attributes in ember data models |\n| :wrench: | [use-ember-data-rfc-395-imports](./docs/rules/use-ember-data-rfc-395-imports.md) | Use "Ember Data Packages" from Ember RFC #395 |\n\n\n### Testing\n\n|    | Rule ID | Description |\n|:---|:--------|:------------|\n|  | [no-pause-test](./docs/rules/no-pause-test.md) | Disallow use of `pauseTest` helper in tests. |\n|  | [no-test-and-then](./docs/rules/no-test-and-then.md) | Disallow use of `andThen` test wait helper. |\n|  | [no-test-import-export](./docs/rules/no-test-import-export.md) | Disallow importing of "-test.js" in a test file and exporting from a test file. |\n|  | [no-test-module-for](./docs/rules/no-test-module-for.md) | Disallow use of moduleFor, moduleForComponent, etc |\n\n\n### Stylistic Issues\n\n|    | Rule ID | Description |\n|:---|:--------|:------------|\n| :wrench: | [order-in-components](./docs/rules/order-in-components.md) | Enforces proper order of properties in components |\n| :wrench: | [order-in-controllers](./docs/rules/order-in-controllers.md) | Enforces proper order of properties in controllers |\n| :wrench: | [order-in-models](./docs/rules/order-in-models.md) | Enforces proper order of properties in models |\n| :wrench: | [order-in-routes](./docs/rules/order-in-routes.md) | Enforces proper order of properties in routes |\n| :white_check_mark: | [use-brace-expansion](./docs/rules/use-brace-expansion.md) | Enforces usage of brace expansion |\n\n<!--RULES_TABLE_END-->\n\nFor the simplified list of rules, [go here](./lib/recommended-rules.js).\n\n## \xf0\x9f\x8d\xbb Contribution guide\n\nIn order to add a new rule, you should:\n- Create issue on GH with description of proposed rule\n- Generate a new rule using the [official yeoman generator](https://github.com/eslint/generator-eslint)\n- Run `yarn start`\n- Write test scenarios & implement logic\n- Describe the rule in the generated `docs` file\n- Make sure all tests are passing\n- Run `yarn run update` in order to update readme and recommended configuration\n- Create PR and link created issue in description\n\nPlease be aware that we\'re using `yarn` in this repository, so if you plan to add some dependencies - make sure you commit `yarn.lock` file too.\n\nIf you have any suggestions, ideas or problems feel free to add new [issue](https://github.com/ember-cli/eslint-plugin-ember/issues), but first please make sure your question does not repeat previous ones.\n\n## \xe2\xad\x90\xef\xb8\x8f Contributors\n- [Adrian Zalewski](https://github.com/bardzusny)\n- [Alex LaFroscia](https://github.com/alexlafroscia)\n- [Bryan Mishkin](https://github.com/bmish)\n- [Casey Watts](https://github.com/caseywatts)\n- [Jacek Bandura](https://github.com/jbandura)\n- [Kamil Ejsymont](https://github.com/netes)\n- [Micha\xc5\x82 Sajn\xc3\xb3g](https://github.com/michalsnik)\n- [Rafa\xc5\x82 Leszczy\xc5\x84ski](https://github.com/rafleszczynski)\n- [Robert Wagner](https://github.com/rwwagner90)\n- [Steve Gargan](https://github.com/sgargan)\n- [Tobias Bieniek](https://github.com/Turbo87)\n\n##  \xf0\x9f\x99\x8c Credits\n- [DockYard team](http://github.com/DockYard) - for great inspiration with their [styleguide](https://github.com/DockYard/styleguides/blob/master/engineering/ember.md)\n- [Rob Hilgefort](https://github.com/rjhilgefort) - for making it possible to redeploy new plugin under existing `eslint-plugin-ember` package name\n\n## \xf0\x9f\x94\x93 License\n\nSee the [LICENSE](LICENSE.md) file for license rights and limitations (MIT).\n'