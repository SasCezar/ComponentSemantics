b'# SaltGUI\n\nA new open source web interface for managing a SaltStack server. Built using vanilla ES6 and implemented as a wrapper around the rest_cherrypy server.\n\n## Screenshots\n![overview](/docs/screenshots/overview.png)\n\n![job](/docs/screenshots/job.png)\n\n\n## Features\n- Login via PAM or any other supported authentication by Salt\n- View minions and easily copy IPs\n- Run state.highstate for a particular minion\n- View the seven most recent jobs run on Salt\n- Manually run any Salt function and see the output\n- View the values for grains for a particular minion\n- View the schedules for a particular minion\n- View the values for pillars for a particular minion\n- View the beacons for a particular minion\n\n\n## Quick start using PAM as authentication method\n- Install `salt-api` - this is available in the Salt PPA package which should already been installed if you\'re using Salt\n- Open the master config /etc/salt/master\n- Find `external_auth` and configure as following (see the note below!):\n```\nexternal_auth:\n  pam:\n    saltuser:\n      - .*\n      - \'@runner\'\n      - \'@wheel\'\n      - \'@jobs\'\n```\n- See `docs/PERMISSIONS.md` for more restricted security configurations.\n- `saltuser` is a unix (PAM) user, make sure it exists or create a new one.\n- At the bottom of this file, also setup the rest_cherrypi server:\n```\nrest_cherrypy:\n  port: 3333\n  host: 0.0.0.0\n  disable_ssl: true\n  app: /srv/saltgui/index.html\n  static: /srv/saltgui/static\n  static_path: /static\n```\n- Replace `/srv/saltgui` in the above config with the directory containing the saltgui html/js source files.\n- Restart everything with ``pkill salt-master && pkill salt-api && salt-master -d && salt-api -d``\n- You should be good to go. If you have any problems, open a GitHub issue. As always, SSL is recommended wherever possible but setup is beyond the scope of this guide.\n\n**Note: With this configuration, the `saltuser` user has access to all salt modules available, maybe this is not what you want**\n\nPlease read the [Permissions](docs/PERMISSIONS.md) page for more information.\n\n\n## Authentication\nSaltGUI supports the following authentication methods supported by salt:\n- pam\n- file\n- ldap\n- mysql\n- yubico\n\nSee the [EAUTH documentation](https://docs.saltstack.com/en/latest/topics/eauth/index.html) and the [Salt auth source code](https://github.com/saltstack/salt/tree/2018.3/salt/auth) for more information.\n\n## Command Box\nSaltGUI supports entry of commands using the "command-box". Click on `>_` in the top right corner to open it.\n\nEnter `salt-run` commands with the prefix `runners.`. e.g. `runners.jobs.last_run`. The target field can remain empty in that case as it is not used.\n\nEnter `salt-call` commands with the prefix `wheel.`. e.g. `wheel.key.finger`. The target field will be added as named parameter `target`. But note that that parameter may not actually be used depending on the command.\n\nEnter regular commands without special prefix. e.g. `test.ping`. The command is sent to the minions specified in the target field.\n\nCommands can be run normally, in which case the command runs to completion and shows the results. Alternatively, it can be started asynchronously, in which case only a small conformation is shown. Batch commands are not supported.\n\n## Output\nSaltGUI shows the data that is returned by the Salt API.\nSome variation can be achieved by modifying salt master configuration file `/etc/salt/master`.\ne.g. (the default)\n```\nsaltgui_output_formats: doc,saltguihighstate,json\n```\n`doc` allows reformatting of documentation output into more readable format. Also implies that only the result from one minion is used.\n`saltguihighstate` allows reformatting of highstate data in a sorted and more readable format.\n`json`, `yaml` and `nested` specify how all other output should be formatted. Only the first available of these formats is used.\n\n## Time representation\nThe time formats used by Salt are very detailed and by default have 6 decimal digits to specify as accurate as nano-seconds. For most uses that is not needed. The fraction can be truncated to less digits by modifying salt master configuration file `/etc/salt/master`.\ne.g.\n```\nsaltgui_datetime_fraction_digits: 3\n```\nThe value must be a number from 0 to 6.\nNote that the effect is achieved by string truncation only. This is equivalent to always rounding downwards.\n\n## Templates\nSaltGUI supports command templates for easier command entry into the command-box.\nThe menu item for that becomes visible there when you define one or more templates\nin salt master configuration file `/etc/salt/master`.\nThe field `targettype` supports the values `glob`, `list`, `compound` and `nodegroup`.\nEntries will be sorted in the GUI based on their key.\nYou can leave out any detail field.\ne.g.:\n```\nsaltgui_templates:\n    template1:\n        description: First template\n        target: "*"\n        command: test.fib num=10\n    template2:\n        description: Second template\n        targettype: glob\n        target: dev*\n        command: test.version\n```\n\n## Jobs\nSaltGUI shows a maximum of 7 jobs in on the right-hand-side of the screen.\nSaltGUI shows a maximum of 50 jobs on the dedicated jobs page.\nCommands that are used internally in SaltGUI are hidden.\n\nAdditional commands to hide can be configured\nin salt master configuration file `/etc/salt/master`.\ne.g.:\n```\nsaltgui_hide_jobs:\n    - test.ping\n```\n\nCommands that are normally hidden can be made visible using configuration\nin salt master configuration file `/etc/salt/master`.\ne.g.:\n```\nsaltgui_show_jobs:\n    - grains.items\n```\n\n## Grains\nSelected grains can be previewed on the Grains page.\nThe names of these grains can be configured\nin salt master configuration file `/etc/salt/master`.\ne.g.:\n```\nsaltgui_preview_grains:\n    - osrelease_info\n```\n\n## Pillars\nPillars potentially contain security senstitive information.\nTherefore their values are initially hidden.\nValues become visible by clicking on them.\nThis behavior can be changed by adjusting the values of the configuration\nin salt master configuration file `/etc/salt/master`.\nThe values for the pillar whose name match one of these regular expressions\nare initially shown.\ne.g.:\n```\nsaltgui_public_pillars:\n    - pub_.*\n```\n\n## Performance\nSaltGUI does not have artificial restrictions.\nBut displaying all data may be slow when there is a lot of data.\nMost notorious is the display of a highstate with hundreds of minions, each with douzens of states.\nSaltGUI can be forced to use a slightly simpler output by setting a parameter in salt master configuration file `/etc/salt/master`.\ne.g.:\n```\nsaltgui_tooltip_mode: simple\n```\nThis parameter forces SaltGUI to use a very simple tooltip representation.\nThis is then the built-in version from the brower.\nTypical effect is that it is shown slightly delayed and that is looks a bit primitive.\nThe only other allowed value is "none", with the effect that no tooltips are shown at all.\n\n## Separate SaltGUI host\nIn some specific environments you might not be able to serve SaltGUI directly from salt-api.\nIn that case you might want to configure a web server (for example NGINX) to serve SaltGui \nand use it as proxy to salt-api so that requests are answered from the same origin from the browser point of view.\n\nSample NGINX configuration might look like this:\n```\nserver {\n  listen       80;\n  server_name  _;\n  root         /data/www;\n  index        index.html;\n\n  # handle internal api (proxy)\n  location /api/ {\n      proxy_set_header X-Real-IP $remote_addr;\n      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n      proxy_set_header X-NginX-Proxy true;\n      proxy_pass http://saltmaster-local:3333/;\n      proxy_ssl_session_reuse off;\n      proxy_set_header Host $http_host;\n      proxy_redirect off;\n  }\n\n  # handle saltgui web page\n  location / {\n    try_files $uri /index.html;\n  }\n\n}\n```\n\nThe value of the `API_URL` in the `config.js` file shall point to path where salt-api is exposed. \n```\nconst config = {\n  API_URL: \'/api\'\n};\n```\n\n> Currenlty you can\'t use totally independent salt-api without proxy as support for CORS preflight request is not properly support.\n\n## Development environment with Docker\nTo make life a bit easier for testing SaltGUI or setting up a local development environment you can use the provided docker-compose setup in this repository to run a saltmaster with three minions, including SaltGUI:\n```\ncd docker\ndocker-compose up\n```\nThen browse to [http://localhost:3333/](http://localhost:3333/), you can login with `salt:salt`.\n\n\n## Testing\nWe provide some functional tests and unit tests. They use the docker setup to run the functional tests. You will also need [yarn](https://yarnpkg.com) and [node.js](https://nodejs.org/en/) to run them. When you have docker, yarn and node.js installed, you can run the tests from the root of the repository like this:\n```\n./runtests.sh\n```\n\nTo show the browser window + a debugger while running the functional tests you can run:\n```\nNIGHTMARE_DEBUG=1 ./runtests.sh\n```\n\nWe use the following testing libraries:\n- [nightmare.js](https://github.com/segmentio/nightmare), for functional/browser tests\n- [mocha](https://https://mochajs.org/), a well documented testing framework for javascript\n- [chai](http://www.chaijs.com/), the preferred assertion library for testing\n\nYou\'ll need at least:\n- `docker-compose` 1.12 or above\n- `nodejs` 8.11 or above\n- `yarn` 1.7 or above\n\n\n## Contributing\nOpen a PR! Try to use no dependencies where possible, as vanilla JS is the aim. Any libraries will need to be heavily considered first. Please see the section above as PR\'s won\'t be reviewed if they don\'t pass the tests.\n\n\n## Credits\nThis excellent frontend is originally written by [Oliver Dunk](https://github.com/oliverdunk).\n\n\n## Changelog\n\n## 1.18.0 (2019-11-22)\n- added missing openbsd icon (erwindon, thx hbonath)\n- added support for orchestration output (erwindon, thx gnouts)\n- clarified some documentation issues (erwindon)\n- smarter placement of tooltips (erwindon)\n- no inner-scrollbar for cmd box (erwindon)\n- hide job details with data from many minions (erwindon)\n- added menu option for state testing (erwindon)\n- more code cleanups (erwindon)\n\n## 1.17.0 (2019-07-14)\n- Added code and instructions to set up standalone SaltGUI (dawidmalina)\n- Return to login on session timeout (erwindon)\n- Improve showing where info is automatically updated (erwindon)\n- Added an overview screen for options, ctrl-click logo to show (erwindon)\n- Lots of code cleanups (erwindon)\n\n## 1.16.0 (2019-06-23)\n- Added visual task summaries for hightstate output, suggested by elipsion (erwindon)\n- Added search facility also on job output screen (erwindon)\n- Show JOB-ids as links in job output (erwindon)\n- Reduce highstate output by leaving out some more trivial details (erwindon)\n- Better background for tooltips on top of dark backgrounds (erwindon)\n- Added ability to reduce tooltip complexity/presence, suggested by elipsion (erwindon)\n- Fixed handling of ``args`` and ``kwargs`` for job definitions (erwindon)\n- Fixed exitcode for regular jobs (erwindon, thx elipsion)\n\n## 1.15.2 (2019-06-07)\n- Fixed problem with job status fields not updating since 1.15.0 (erwindon)\n\n## 1.15.1 (2019-06-04)\n- Fixed problem with job status fields not updating since 1.15.0 (erwindon)\n\n## 1.15.0 (2019-06-02)\n- Choose number of jobs visible on Jobs page (erwindon, thx elipsion)\n- Fixed problems with element ids (erwindon, thx lordfolken)\n- Show beacon values (erwindon)\n- Summary line for all pages (erwindon)\n- Do not claim events after session timeout (erwindon)\n- Properly handle details refresh of jobs that have now expired (erwindon)\n- Add standard texts to table filter textfield (erwindon)\n- Do not use getElementById for non-unique elements (erwindon)\n- Use standard function for texts that apply 0, 1 or many times (erwindon)\n- Use asynchronous updates for Keys page (erwindon)\n- Prevent crash on NULL output (erwindon)\n- Small layout fixes (erwindon)\n\n## 1.14.0 (2019-05-14)\n- Implemented management of beacons (erwindon)\n- Added search function for tables (erwindon)\n- Major cleanup of js-promise handling (erwindon)\n- Re-organized all menu item creations (erwindon)\n- Better validations on url parameters (erwindon)\n- js and css code cleanups (erwindon)\n- Small layout fixes (erwindon)\n- Additional testing (dawidmalina)\n\n## 1.13.0 (2019-04-27)\n- Improved indication for sorted tables (erwindon)\n- Display ip-number from likely common network (erwindon, thx jonathanuntalan-rfg)\n- Enhanced display of in-progress jobs (erwindon)\n- Introduced placeholders when suggesting incomplete commands (erwindon)\n- Added term/kill/signal commands to jobs and processes (erwindon)\n\n## 1.12.0 (2019-04-14)\n- Improved tooltips; added tooltips on more places (erwindon)\n- Improved job summary: show number of succeeded/failed (erwindon)\n- Fixed small issue with display of pillars (erwindon)\n- Fixed small issue with display of schedules (erwindon)\n- Added job-details column to jobs overview (erwindon)\n- Code cleanup: use consistent callback names (erwindon)\n- Code cleanup: better use of the page framework (erwindon)\n- Fixed dates in changelog (dawidmalina)\n- Completed historic overview in changelog (erwindon)\n- Fixes for maximum text in columns (erwindon)\n- Fixed datetime display; always obey set format (erwindon)\n- Fixed missing summary of changes for SaltGuiHighstate (erwindon)\n- Added original highstate output format (erwindon)\n- Updated salt version to 2019.2.0 for docker images (erwindon)\n- All js code is now in modules (erwindon)\n- Some more small fixes (erwindon)\n\n## 1.11.0 (2019-03-30)\n- Migrated from yarn to npm (smarletta)\n- Separated unit tests and functional tests (smarletta)\n- Standardized filenames (smarletta)\n- Converted to JS modules (smarletta)\n- Added coverage report for unit tests (smarletta)\n- Close job details now returns to previous page (dawidmalina)\n- Fixed small layout issues (erwindon)\n- Standardized internal api functions (erwindon)\n- Removed some unused functions (erwindon)\n\n## 1.10.1 (2019-02-24)\n- Small bugfix for copy of ip-number (erwindon)\n\n## 1.10.0 (2019-02-12)\n- Improved navigation: made rows clickable (erwindon)\n- Fixed invisible menu in small width screens (dawidmalina/erwindon)\n- Set display of keys to monospace (erwindon)\n\n## 1.9.0 (2019-02-06)\n- Added more control over output format (erwindon)\n- Added link to GitHub project on login page (dawidmalina)\n- Added separate Jobs page (dawidmalina)\n- Fixed some OS-icons (erwindon)\n- Support more compact time notation (erwindon)\n- Show popup menu\'s as early as possible (erwindon)\n- Added separate Job Templates page (dawidmalina)\n- Show which jobs are still running (erwindon)\n- Added re-run functionality for jobs (erwindon/dawidmalina)\n\n## 1.8.0 (2019-01-13)\n- Improved testing support (erwindon/dawidmalina)\n- Allow most tables to be sorted (erwindon/dawidmalina)\n- Added support for non-secret pillars (erwindon/dawidmalina)\n- Removed sub-sections from keys page, unaccepted now sorts first (erwindon)\n- Fixed auto-copy (erwindon)\n- Fixed issues with ip-number when multiple available, reported by dawidmalina (erwindon)\n- Improved the general design (dawidmalina)\n- Added OS images with the OS names, suggested by dawidmalina (erwindon)\n- Added sync-grains and sync-pillars commands, suggested by dawidmalina (erwindon)\n\n## 1.7.0 (2018-12-22)\n- Allow some editing on grains info (erwindon)\n- Allow some editing on schedules info (erwindon)\n- Minimize handling of pillar values (erwindon)\n- Fixes some text/html representation problems (erwindon)\n\n## 1.6.0 (2018-12-15)\n- Added page for grain info (erwindon)\n- Added page for schedules info (erwindon)\n- Added page for pillars info (erwindon)\n- Celebrating almost 100 stars on GitHub\n\n## 1.5.2 (2018-12-10)\n- Added list of values for targetfield: minions+nodegroups, suggested by lostsnow (erwindon)\n\n## 1.5.1 (2018-12-08)\n- Fixed named parameter issues reported by marceliq (erwindon)\n- Fixed result display for wheel/runner functions (erwindon)\n\n## 1.5.0 (2018-12-03)\n- Added command templates (erwindon)\n- Added targettype nodegroups (lostsnow)\n\n## 1.4.1 (2018-11-07)\n- Added selectable targettype (erwindon)\n- Improved state output (erwindon)\n- Various output improvements (erwindon)\n\n## 1.4.0 (2018-10-20)\n- Improved (high)state output (erwindon)\n- Added collapsable output (erwindon)\n- Format jobs same as direct command output (erwindon)\n- Jobs can now be started asynchronously (erwindon)\n\n## 1.3.0 (2018-09-28)\n- Improved command parser (erwindon)\n- Loads of ES6 code improvements and testing including linting (erwindon/maerteijn)\n- Documentation view option in the command box (erwindon)\n- Show job progress in job list (erwindon)\n- Improved job detail (erwindon)\n\n## 1.2.0 (2018-07-30)\n- Addition of menu bar; separation of minion vs keys (erwindon)\n- Added mysql as authentication method and retired auto and sharedsecret (erwindon)\n- Added some responsive improvements\n\n## 1.1.1 (2018-07-23)\n- Support for several EAUTH authentication methods (erwindon)\n\n## 1.1.0 (2018-07-16)\n- Shows inactive minions as well (erwindon)\n- Switch to a more reliable grain indicating the ip-number (erwindon)\n- Added a logout button (erwindon)\n- Improved minion loading page: first the keys and update them according to their status (erwindon)\n- Fixed issue with session timeout (erwindon)\n- Added keymanagement functionality (erwindon)\n- Created a nice dropdown menu (erwindon)\n- Improved ES6 code (erwindon)\n- Added a close button to the command popup (erwindon)\n\n## 1.0.1 (2018-05-16)\n- Fixed position of popup when main window has scrolled (erwindon)\n- Sort minions by hostname (erwindon)\n- Fixed OS description in minion overview (No lsb_distrib_description)(erwindon)\n- Now sort the jobs correctly on ``StartDate`` in the overview window\n\n## 1.0.0 (2018-03-07)\n- Original release with some styling fixes and with enabled highstate functionality.\n\n## (2017-11-15)\n- New maintainer (maerteijn)\n\n## (2016-07-20)\n- Initial version (oliverdunk)\n'