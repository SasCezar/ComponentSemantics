b'# eslint-plugin-sonarjs [![npm version](https://badge.fury.io/js/eslint-plugin-sonarjs.svg)](https://badge.fury.io/js/eslint-plugin-sonarjs) [![Build Status](https://travis-ci.org/SonarSource/eslint-plugin-sonarjs.svg?branch=master)](https://travis-ci.org/SonarSource/eslint-plugin-sonarjs) [![Quality Gate](https://sonarcloud.io/api/project_badges/measure?project=eslint-plugin-sonarjs&metric=alert_status)](https://sonarcloud.io/dashboard?id=eslint-plugin-sonarjs) [![Coverage](https://sonarcloud.io/api/project_badges/measure?project=eslint-plugin-sonarjs&metric=coverage)](https://sonarcloud.io/dashboard?id=eslint-plugin-sonarjs)\n\nSonarJS rules for ESLint to detect bugs and suspicious patterns in your code.\n\n_[We also have a plugin for TSLint](https://github.com/SonarSource/SonarTS)_\n\n## Rules\n\n### Bug Detection :bug:\n\nRules in this category aim to find places in code which have a high chance of being bugs, i.e. don\'t work as intended.\n\n* All branches in a conditional structure should not have exactly the same implementation ([`no-all-duplicated-branches`])\n* Collection elements should not be replaced unconditionally ([`no-element-overwrite`])\n* Function calls should not pass extra arguments ([`no-extra-arguments`])\n* Related "if/else if" statements should not have the same condition ([`no-identical-conditions`])\n* Identical expressions should not be used on both sides of a binary operator ([`no-identical-expressions`])\n* Loops with at most one iteration should be refactored ([`no-one-iteration-loop`])\n* The output of functions that don\'t return anything should not be used ([`no-use-of-empty-return-value`])\n\n### Code Smell Detection :pig:\n\nCode Smells, or maintainability issues, are raised for places of code which might be costly to change in the future. These rules also help to keep the high code quality and readability. And finally some rules report issues on different suspicious code patters.\n\n* Cognitive Complexity of functions should not be too high ([`cognitive-complexity`])\n* "switch" statements should not have too many "case" clauses ([`max-switch-cases`])\n* Collapsible "if" statements should be merged ([`no-collapsible-if`])\n* Collection sizes and array length comparisons should make sense ([`no-collection-size-mischeck`])\n* String literals should not be duplicated ([`no-duplicate-string`])\n* Two branches in a conditional structure should not have exactly the same implementation ([`no-duplicated-branches`])\n* Functions should not have identical implementations ([`no-identical-functions`])\n* Boolean checks should not be inverted ([`no-inverted-boolean-check`])\n* Boolean literals should not be redundant ([`no-redundant-boolean`])\n* Jump statements should not be redundant ([`no-redundant-jump`])\n* Conditionals should start on new lines ([`no-same-line-conditional`])\n* "switch" statements should have at least 3 "case" clauses ([`no-small-switch`])\n* Collection and array contents should be used ([`no-unused-collection`])\n* "catch" clauses should do more than rethrow ([`no-useless-catch`])\n* Local variables should not be declared and then immediately returned or thrown ([`prefer-immediate-return`]) (:wrench: *fixable*)\n* Object literal syntax should be used ([`prefer-object-literal`])\n* Return of boolean expressions should not be wrapped into an "if-then-else" statement ([`prefer-single-boolean-return`])\n* A "while" loop should be used instead of a "for" loop ([`prefer-while`]) (:wrench: *fixable*) \n\n[`cognitive-complexity`]: ./docs/rules/cognitive-complexity.md\n[`max-switch-cases`]: ./docs/rules/max-switch-cases.md\n[`no-all-duplicated-branches`]: ./docs/rules/no-all-duplicated-branches.md\n[`no-collapsible-if`]: ./docs/rules/no-collapsible-if.md\n[`no-collection-size-mischeck`]: ./docs/rules/no-collection-size-mischeck.md\n[`no-duplicate-string`]: ./docs/rules/no-duplicate-string.md\n[`no-duplicated-branches`]: ./docs/rules/no-duplicated-branches.md\n[`no-element-overwrite`]: ./docs/rules/no-element-overwrite.md\n[`no-extra-arguments`]: ./docs/rules/no-extra-arguments.md\n[`no-identical-conditions`]: ./docs/rules/no-identical-conditions.md\n[`no-identical-expressions`]: ./docs/rules/no-identical-expressions.md\n[`no-identical-functions`]: ./docs/rules/no-identical-functions.md\n[`no-inverted-boolean-check`]: ./docs/rules/no-inverted-boolean-check.md\n[`no-one-iteration-loop`]: ./docs/rules/no-one-iteration-loop.md\n[`no-redundant-boolean`]: ./docs/rules/no-redundant-boolean.md\n[`no-redundant-jump`]: ./docs/rules/no-redundant-jump.md\n[`no-same-line-conditional`]: ./docs/rules/no-same-line-conditional.md\n[`no-small-switch`]: ./docs/rules/no-small-switch.md\n[`no-use-of-empty-return-value`]: ./docs/rules/no-use-of-empty-return-value.md\n[`no-unused-collection`]: ./docs/rules/no-unused-collection.md\n[`no-useless-catch`]: ./docs/rules/no-useless-catch.md\n[`prefer-immediate-return`]: ./docs/rules/prefer-immediate-return.md\n[`prefer-object-literal`]: ./docs/rules/prefer-object-literal.md\n[`prefer-single-boolean-return`]: ./docs/rules/prefer-single-boolean-return.md\n[`prefer-while`]: ./docs/rules/prefer-while.md\n\n## Prerequisites\n\nNode.js (>=6.x).\n\n## Usage\n\n* If you don\'t have ESLint yet configured for your project, follow [these instructions](https://github.com/eslint/eslint#installation-and-usage).\n* Install `eslint-plugin-sonarjs` using `npm` (or `yarn`) for you project or globally:\n\n```sh\nnpm install eslint-plugin-sonarjs --save-dev # install for your project\nnpm install eslint-plugin-sonarjs -g         # or install globally\n```\n\n* Add `eslint-plugin-sonarjs` to the `plugins` option of your `.eslintrc`:\n\n```json\n{\n  "plugins": ["sonarjs"]\n}\n```\n\n* Add `plugin:sonarjs/recommended` to the `extends` option to enable all recommended rules:\n\n```json\n{\n  "extends": ["plugin:sonarjs/recommended"]\n}\n```\n\n* or enable only some rules manually:\n\n```json\n{\n  "rules": {\n    "sonarjs/cognitive-complexity": "error",\n    "sonarjs/no-identical-expressions": "error"\n    // etc\n  }\n}\n```\n\n## Contributing\n\nYou want to participate in the development of the project? Have a look at our [contributing](./docs/CONTRIBUTING.md) guide!\n'