b'# prettier-eslint-cli\n\nCLI for [`prettier-eslint`][prettier-eslint]\n\n[![Build Status][build-badge]][build]\n[![Code Coverage][coverage-badge]][coverage]\n[![version][version-badge]][package]\n[![downloads][downloads-badge]][npm-stat]\n[![MIT License][license-badge]][license]\n\n[![All Contributors](https://img.shields.io/badge/all_contributors-21-orange.svg?style=flat-square)](#contributors)\n[![PRs Welcome][prs-badge]][prs]\n[![Donate][donate-badge]][donate]\n[![Code of Conduct][coc-badge]][coc]\n[![Roadmap][roadmap-badge]][roadmap]\n[![Examples][examples-badge]][examples]\n\n[![Watch on GitHub][github-watch-badge]][github-watch]\n[![Star on GitHub][github-star-badge]][github-star]\n[![Tweet][twitter-badge]][twitter]\n\n<a href="https://app.codesponsor.io/link/PKGFLnhDiFvsUA5P4kAXfiPs/prettier/prettier-eslint-cli" rel="nofollow"><img src="https://app.codesponsor.io/embed/PKGFLnhDiFvsUA5P4kAXfiPs/prettier/prettier-eslint-cli.svg" style="width: 888px; height: 68px;" alt="Sponsor" /></a>\n\n## The problem\n\nYou have a bunch of files that you want to format using [`prettier-eslint`][prettier-eslint].\nBut `prettier-eslint` can only operate on strings.\n\n## This solution\n\nThis is a [CLI](https://en.wikipedia.org/wiki/Command-line_interface) that allows you to use\n`prettier-eslint` on one or multiple files. `prettier-eslint-cli` forwards on the `filePath`\nand other relevant options to `prettier-eslint` which identifies the applicable `ESLint`\nconfig for each file and uses that to determine the options for `prettier` and `eslint --fix`.\n\n## Installation\n\nThis module is distributed via [npm][npm] which is bundled with [node][node] and should\nbe installed (with [`yarn`][yarn]) as one of your project\'s `devDependencies`:\n\n```\nyarn add --dev prettier-eslint-cli\n```\n\n> If you\'re still using the [`npm`][npm] client: `npm install --save-dev prettier-eslint-cli`\n\n## Usage\n\nTypically you\'ll use this in your [npm scripts][npm scripts] (or [package scripts][package scripts]):\n\n```json\n{\n  "scripts": {\n    "format": "prettier-eslint \\"src/**/*.js\\""\n  }\n}\n```\n\nThis will format all `.js` files in the `src` directory. The argument you pass to the CLI\nis a [glob][glob] and you can pass as many as you wish. You can also pass options.\n\n### Vim\n\nVim users can add the following to their .vimrc:\n\n```\nautocmd FileType javascript set formatprg=prettier-eslint\\ --stdin\n```\n\nThis makes prettier-eslint-cli power the gq command for automatic formatting without any plugins. You can also add the following to your .vimrc to run prettier-eslint-cli when .js files are saved:\n\n```\nautocmd BufWritePre *.js :normal gggqG\n```\n\n### CLI Options\n\n```\nprettier-eslint --help\nUsage: prettier-eslint <globs>... [--option-1 option-1-value --option-2]\n\nPrefix an option with "no-" to set it to false, such as --no-semi to\ndisable semicolons and --no-eslint-ignore to disable default ignores.\n\nOptions:\n  -h, --help               Show help                                   [boolean]\n  --version                Show version number                         [boolean]\n  --write                  Edit the file in-place (beware!)\n                                                      [boolean] [default: false]\n  --stdin                  Read input via stdin       [boolean] [default: false]\n  --stdin-filepath         Path to the file to pretend that stdin comes from.\n  --eslint-ignore          Only format matching files even if they are not\n                           ignored by .eslintignore. (can use --no-eslint-ignore\n                           to disable this)            [boolean] [default: true]\n  --prettier-ignore        Only format matching files even if they are not\n                           ignored by .prettierignore. (can use\n                           --no-prettier-ignore to disable this)\n                                                       [boolean] [default: true]\n  --list-different         Print filenames of files that are different from\n                           Prettier + Eslint formatting.\n                                                      [boolean] [default: false]\n  --eslint-path            The path to the eslint module to use\n                 [default: "./node_modules/eslint"]\n  --eslint-config-path     Path to the eslint config to use for eslint --fix\n  --prettier-path          The path to the prettier module to use [default: "./node_modules/prettier"]\n  --config                 Path to the prettier config\n  --ignore                 pattern(s) you wish to ignore (can be used multiple\n                           times and includes **/node_modules/** automatically)\n  --log-level, -l          The log level to use\n        [choices: "silent", "error", "warn", "info", "debug", "trace"] [default:\n                                                                         "warn"]\n  --prettier-last          Run prettier last          [boolean] [default: false]\n  --use-tabs               Indent lines with tabs instead of spaces.   [boolean]\n  --print-width            Specify the length of line that the printer will wrap\n                           on.                                          [number]\n  --tab-width              Specify the number of spaces per indentation-level.\n                                                                        [number]\n  --trailing-comma         Print trailing commas wherever possible.\n\n                           Valid options:\n                           - "none" - no trailing commas\n                           - "es5" - trailing commas where valid in ES5\n                           (objects, arrays, etc)\n                           - "all" - trailing commas wherever possible (function\n                           arguments)   [string] [choices: "none", "es5", "all"]\n  --bracket-spacing        Print spaces between brackets in object literals.\n                           Can use --no-bracket-spacing for "false" to disable\n                           it.\n\n                           Valid options:\n                           - true - Example: { foo: bar }\n                           - false - Example: {foo: bar}               [boolean]\n  --jsx-bracket-same-line  Put the > of a multi-line JSX element at the end of\n                           the last line instead of being alone on the next line\n                                                                       [boolean]\n  --parser                 Specify which parser to use.                 [string]\n  --semi                   Print semicolons at the ends of statements.\n                           Can use --no-semi.\n\n                           Valid options:\n                           - true - add a semicolon at the end of every\n                           statement\n                           - false - only add semicolons at the beginning of\n                           lines that may introduce ASI failures       [boolean]\n  --single-quote           Use single quotes instead of double quotes. [boolean]\n```\n\n#### <globs>\n\nAny number of [globs][glob] you wish to use to match the files you wish to format. By default, `glob` will ignore\n`**/node_modules/**` unless the glob you provide\nincludes the string `node_modules`.\n\n#### --write\n\nBy default `prettier-eslint` will simply log the formatted version to the terminal. If you want to overwrite the file\nitself (a common use-case) then add `--write`. You should quote your globs, otherwise your terminal will expand the glob before it gets to `prettier-eslint` (which can have unexpected results):\n\n```json\n{\n  "scripts": {\n    "format": "prettier-eslint --write \\"src/**/*.js\\""\n  }\n}\n```\n\n> **NOTE:** It is recommended that you keep your files under source control and committed\n> before running `prettier-eslint --write` as it will overwrite your files!\n\n#### --list-different\n\nInstead of printing the formatted version of the files to the terminal, `prettier-eslint` will log the name of the files that are different from the expected formatting. This can be usefull when using `prettier-eslint` in a version control system hook to inform the committer which files need to be formatted.\n\n#### --stdin\n\nAccept input via `stdin`. For example:\n\n```\necho "var   foo =    \'bar\'" | prettier-eslint --stdin\n# results in: "var foo = \'bar\';" (depending on your eslint config)\n```\n\n#### --eslint-path\n\nForwarded as the `eslintPath` option to `prettier-eslint`\n\n#### --eslint-config-path\n\nResolve eslint config file, parse and forward config object as the `eslintConfig` option to\n`prettier-eslint`\n\n#### --prettier-path\n\nForwarded as the `prettierPath` option to `prettier-eslint`\n\n#### --log-level\n\nForwarded as `logLevel` option to `prettier-eslint`\n\n#### --no-eslint-ignore\n\nDisables application of `.eslintignore` to the files resolved from the glob. By\ndefault, `prettier-eslint-cli` will exclude files if they are matched by a\n`.eslintignore`. Add this flag to disable this behavior.\n\n> Note: You can also set the `LOG_LEVEL` environment variable to control logging in `prettier-eslint`\n\n#### --prettier-last\n\nBy default, `prettier-eslint-cli` will run `prettier` first, then `eslint --fix`. This is great if\nyou want to use `prettier`, but override some of the styles you don\'t like using `eslint --fix`.\n\nAn alternative approach is to use different tools for different concerns. If you provide the\nargument `--prettier-last`, it will run `eslint --fix` first, then `prettier`. This allows you to\nuse `eslint` to look for bugs and/or bad practices, and use `prettier` to enforce code style.\n\n#### `prettier` options\n\n`prettier-eslint-cli` also supports the same command line options as `prettier`.\n\nFor example: `prettier-eslint --trailing-comma es5`\n\nRefer to the [prettier-eslint](https://github.com/prettier/prettier#options) docs for documentation on these options\n\n## Integration\n\nAny linter that support ESLint [CLIEngine](http://eslint.org/docs/developer-guide/nodejs-api#cliengine) interface can be integrate with `prettier-eslint`\n\n### Knowed integrated package helpers\n\n- [standard-prettier-eslint][standard-prettier-eslint], a helper package for integrate [standard][standard]\n- [semistandard-prettier-eslint][semistandard-prettier-eslint], a helper package for integrate [semistandard][semistandard]\n\n### Standalone CLI tools based on `prettier-eslint-cli`\n\n- [prettier-std-cli][prettier-std-cli] the easy to use CLI version of [standard-prettier-eslint][standard-prettier-eslint]\n- [prettier-semi-cli][prettier-semi-cli] the easy to use CLI version of [semistandard-prettier-eslint][semistandard-prettier-eslint]\n\n## Related\n\n- [prettier-eslint](https://github.com/prettier/prettier-eslint) - the core package\n- [prettier-eslint-atom](https://github.com/kentcdodds/prettier-eslint-atom) - an atom plugin\n\n## Contributors\n\nThanks goes to these people ([emoji key][emojis]):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src="https://avatars.githubusercontent.com/u/1500684?v=3" width="100px;"/><br /><sub><b>Kent C. Dodds</b></sub>](https://kentcdodds.com)<br />[\xf0\x9f\x92\xbb](https://github.com/prettier/prettier-eslint-cli/commits?author=kentcdodds "Code") [\xf0\x9f\x93\x96](https://github.com/prettier/prettier-eslint-cli/commits?author=kentcdodds "Documentation") [\xf0\x9f\x9a\x87](#infra-kentcdodds "Infrastructure (Hosting, Build-Tools, etc)") [\xe2\x9a\xa0\xef\xb8\x8f](https://github.com/prettier/prettier-eslint-cli/commits?author=kentcdodds "Tests") | [<img src="https://avatars3.githubusercontent.com/u/3266363?v=3" width="100px;"/><br /><sub><b>Adam Harris</b></sub>](https://github.com/aharris88)<br />[\xf0\x9f\x92\xbb](https://github.com/prettier/prettier-eslint-cli/commits?author=aharris88 "Code") [\xf0\x9f\x93\x96](https://github.com/prettier/prettier-eslint-cli/commits?author=aharris88 "Documentation") [\xf0\x9f\x91\x80](#review-aharris88 "Reviewed Pull Requests") | [<img src="https://avatars.githubusercontent.com/u/622118?v=3" width="100px;"/><br /><sub><b>Eric McCormick</b></sub>](https://ericmccormick.io)<br />[\xf0\x9f\x91\x80](#review-edm00se "Reviewed Pull Requests") | [<img src="https://avatars.githubusercontent.com/u/12389411?v=3" width="100px;"/><br /><sub><b>Joel Sequeira</b></sub>](https://github.com/joelseq)<br />[\xf0\x9f\x93\x96](https://github.com/prettier/prettier-eslint-cli/commits?author=joelseq "Documentation") | [<img src="https://avatars.githubusercontent.com/u/103008?v=3" width="100px;"/><br /><sub><b>Frank Taillandier</b></sub>](https://frank.taillandier.me)<br /> | [<img src="https://avatars3.githubusercontent.com/u/292365?v=3" width="100px;"/><br /><sub><b>Adam Stankiewicz</b></sub>](http://sheerun.net)<br />[\xf0\x9f\x92\xbb](https://github.com/prettier/prettier-eslint-cli/commits?author=sheerun "Code") | [<img src="https://avatars3.githubusercontent.com/u/487068?v=3" width="100px;"/><br /><sub><b>Stephen John Sorensen</b></sub>](http://www.stephenjohnsorensen.com/)<br />[\xf0\x9f\x92\xbb](https://github.com/prettier/prettier-eslint-cli/commits?author=spudly "Code") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src="https://avatars0.githubusercontent.com/u/11560964?v=3" width="100px;"/><br /><sub><b>Gandem</b></sub>](https://github.com/Gandem)<br />[\xf0\x9f\x92\xbb](https://github.com/prettier/prettier-eslint-cli/commits?author=Gandem "Code") [\xe2\x9a\xa0\xef\xb8\x8f](https://github.com/prettier/prettier-eslint-cli/commits?author=Gandem "Tests") | [<img src="https://avatars0.githubusercontent.com/u/129991?v=3" width="100px;"/><br /><sub><b>Matteo Ronchi</b></sub>](https://github.com/cef62)<br />[\xf0\x9f\x90\x9b](https://github.com/prettier/prettier-eslint-cli/issues?q=author%3Acef62 "Bug reports") [\xf0\x9f\x92\xbb](https://github.com/prettier/prettier-eslint-cli/commits?author=cef62 "Code") | [<img src="https://avatars2.githubusercontent.com/u/61787?v=3" width="100px;"/><br /><sub><b>Beno\xc3\xaet Zugmeyer</b></sub>](https://github.com/BenoitZugmeyer)<br />[\xf0\x9f\x92\xbb](https://github.com/prettier/prettier-eslint-cli/commits?author=BenoitZugmeyer "Code") [\xe2\x9a\xa0\xef\xb8\x8f](https://github.com/prettier/prettier-eslint-cli/commits?author=BenoitZugmeyer "Tests") | [<img src="https://avatars0.githubusercontent.com/u/5038030?v=3" width="100px;"/><br /><sub><b>Charlike Mike Reagent</b></sub>](https://i.am.charlike.online)<br />[\xf0\x9f\x92\xbb](https://github.com/prettier/prettier-eslint-cli/commits?author=tunnckoCore "Code") [\xe2\x9a\xa0\xef\xb8\x8f](https://github.com/prettier/prettier-eslint-cli/commits?author=tunnckoCore "Tests") | [<img src="https://avatars0.githubusercontent.com/u/10954870?v=3" width="100px;"/><br /><sub><b>Dion Dirza</b></sub>](https://github.com/diondirza)<br />[\xf0\x9f\x90\x9b](https://github.com/prettier/prettier-eslint-cli/issues?q=author%3Adiondirza "Bug reports") | [<img src="https://avatars0.githubusercontent.com/u/3297808?v=3" width="100px;"/><br /><sub><b>mrm007</b></sub>](https://github.com/mrm007)<br />[\xf0\x9f\x90\x9b](https://github.com/prettier/prettier-eslint-cli/issues?q=author%3Amrm007 "Bug reports") [\xf0\x9f\x92\xbb](https://github.com/prettier/prettier-eslint-cli/commits?author=mrm007 "Code") | [<img src="https://avatars0.githubusercontent.com/u/193238?v=3" width="100px;"/><br /><sub><b>Jack Franklin</b></sub>](http://www.jackfranklin.co.uk)<br />[\xf0\x9f\x92\xbb](https://github.com/prettier/prettier-eslint-cli/commits?author=jackfranklin "Code") |\n| [<img src="https://avatars0.githubusercontent.com/u/17342435?v=3" width="100px;"/><br /><sub><b>Ryan Zimmerman</b></sub>](http://www.ryanzim.com)<br />[\xf0\x9f\x93\x96](https://github.com/prettier/prettier-eslint-cli/commits?author=RyanZim "Documentation") | [<img src="https://avatars3.githubusercontent.com/u/1186409?v=3" width="100px;"/><br /><sub><b>Paolo Moretti</b></sub>](http://stackoverflow.com/users/63011)<br />[\xf0\x9f\x90\x9b](https://github.com/prettier/prettier-eslint-cli/issues?q=author%3Amoretti "Bug reports") [\xf0\x9f\x92\xbb](https://github.com/prettier/prettier-eslint-cli/commits?author=moretti "Code") [\xe2\x9a\xa0\xef\xb8\x8f](https://github.com/prettier/prettier-eslint-cli/commits?author=moretti "Tests") | [<img src="https://avatars0.githubusercontent.com/u/6242574?v=3" width="100px;"/><br /><sub><b>bySabi Files</b></sub>](https://github.com/bySabi)<br />[\xf0\x9f\x93\x96](https://github.com/prettier/prettier-eslint-cli/commits?author=bySabi "Documentation") [\xf0\x9f\x94\xa7](#tool-bySabi "Tools") | [<img src="https://avatars1.githubusercontent.com/u/554231?v=4" width="100px;"/><br /><sub><b>Pavel Pertsev</b></sub>](http://morhetz.com)<br />[\xf0\x9f\x92\xbb](https://github.com/prettier/prettier-eslint-cli/commits?author=morhetz "Code") [\xe2\x9a\xa0\xef\xb8\x8f](https://github.com/prettier/prettier-eslint-cli/commits?author=morhetz "Tests") | [<img src="https://avatars3.githubusercontent.com/u/13577271?v=4" width="100px;"/><br /><sub><b>Josh English</b></sub>](http://www.joshenglish.com)<br />[\xe2\x9a\xa0\xef\xb8\x8f](https://github.com/prettier/prettier-eslint-cli/commits?author=jmenglis "Tests") [\xf0\x9f\x90\x9b](https://github.com/prettier/prettier-eslint-cli/issues?q=author%3Ajmenglis "Bug reports") [\xf0\x9f\x92\xbb](https://github.com/prettier/prettier-eslint-cli/commits?author=jmenglis "Code") [\xf0\x9f\x94\x8c](#plugin-jmenglis "Plugin/utility libraries") | [<img src="https://avatars2.githubusercontent.com/u/1706502?v=4" width="100px;"/><br /><sub><b>Spenser Isdahl</b></sub>](https://disquisition.net)<br />[\xf0\x9f\x92\xbb](https://github.com/prettier/prettier-eslint-cli/commits?author=disquisition "Code") [\xf0\x9f\x93\x96](https://github.com/prettier/prettier-eslint-cli/commits?author=disquisition "Documentation") [\xe2\x9a\xa0\xef\xb8\x8f](https://github.com/prettier/prettier-eslint-cli/commits?author=disquisition "Tests") | [<img src="https://avatars0.githubusercontent.com/u/10961167?v=4" width="100px;"/><br /><sub><b>Bj\xc3\xb6rn Dalfors</b></sub>](https://github.com/bj00rn)<br />[\xf0\x9f\x9a\x87](#infra-bj00rn "Infrastructure (Hosting, Build-Tools, etc)") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the [all-contributors][all-contributors] specification. Contributions of any kind welcome!\n\n## LICENSE\n\nMIT\n\n[yarn]: https://yarnpkg.com/\n[npm]: https://www.npmjs.com/\n[node]: https://nodejs.org\n[build-badge]: https://img.shields.io/travis/prettier/prettier-eslint-cli.svg?style=flat-square\n[build]: https://travis-ci.org/prettier/prettier-eslint-cli\n[coverage-badge]: https://img.shields.io/codecov/c/github/prettier/prettier-eslint-cli.svg?style=flat-square\n[coverage]: https://codecov.io/github/prettier/prettier-eslint-cli\n[version-badge]: https://img.shields.io/npm/v/prettier-eslint-cli.svg?style=flat-square\n[package]: https://www.npmjs.com/package/prettier-eslint-cli\n[downloads-badge]: https://img.shields.io/npm/dm/prettier-eslint-cli.svg?style=flat-square\n[npm-stat]: http://npm-stat.com/charts.html?package=prettier-eslint-cli&from=2016-04-01\n[license-badge]: https://img.shields.io/npm/l/prettier-eslint-cli.svg?style=flat-square\n[license]: https://github.com/prettier/prettier-eslint-cli/blob/master/other/LICENSE\n[prs-badge]: https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square\n[prs]: http://makeapullrequest.com\n[donate-badge]: https://img.shields.io/badge/$-support-green.svg?style=flat-square\n[donate]: https://www.paypal.me/zimme\n[coc-badge]: https://img.shields.io/badge/code%20of-conduct-ff69b4.svg?style=flat-square\n[coc]: https://github.com/prettier/prettier-eslint-cli/blob/master/other/CODE_OF_CONDUCT.md\n[roadmap-badge]: https://img.shields.io/badge/%F0%9F%93%94-roadmap-CD9523.svg?style=flat-square\n[roadmap]: https://github.com/prettier/prettier-eslint-cli/blob/master/other/ROADMAP.md\n[examples-badge]: https://img.shields.io/badge/%F0%9F%92%A1-examples-8C8E93.svg?style=flat-square\n[examples]: https://github.com/prettier/prettier-eslint-cli/blob/master/other/EXAMPLES.md\n[github-watch-badge]: https://img.shields.io/github/watchers/prettier/prettier-eslint-cli.svg?style=social\n[github-watch]: https://github.com/prettier/prettier-eslint-cli/watchers\n[github-star-badge]: https://img.shields.io/github/stars/prettier/prettier-eslint-cli.svg?style=social\n[github-star]: https://github.com/prettier/prettier-eslint-cli/stargazers\n[twitter]: https://twitter.com/intent/tweet?text=Check%20out%20prettier-eslint-cli!%20https://github.com/prettier/prettier-eslint-cli%20%F0%9F%91%8D\n[twitter-badge]: https://img.shields.io/twitter/url/https/github.com/prettier/prettier-eslint-cli.svg?style=social\n[emojis]: https://github.com/kentcdodds/all-contributors#emoji-key\n[all-contributors]: https://github.com/kentcdodds/all-contributors\n[prettier-eslint]: https://github.com/prettier/prettier-eslint\n[npm scripts]: https://docs.npmjs.com/misc/scripts\n[package scripts]: https://github.com/kentcdodds/p-s\n[glob]: https://github.com/isaacs/node-glob\n[standard-prettier-eslint]: https://github.com/bySabi/standard-prettier-eslint\n[semistandard-prettier-eslint]: https://github.com/bySabi/semistandard-prettier-eslint\n[standard]: https://github.com/standard/standard\n[semistandard]: https://github.com/Flet/semistandard\n[prettier-std-cli]: https://github.com/bySabi/prettier-std-cli\n[prettier-semi-cli]: https://github.com/bySabi/prettier-semi-cli\n'