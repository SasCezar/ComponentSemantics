b'## Webpack react minimal boilerplate\n<p align="center">\n    <img alt="dependencies" title="dependencies" src="https://img.shields.io/david/hashemkhalifa/webpack-react-boilerplate.svg" >\n   <img alt="dependencies" title="dependencies" src="https://img.shields.io/github/last-commit/hashemkhalifa/webpack-react-boilerplate.svg" >\n</p>\n\n> Minimal webpack and react boilerplate using latest version of react and babel as well as jest and enzyme for more details about technologies used. [click](#technologies-used) \n> with real time server changes ;)\n\n> check out  [Medium article](https://medium.com/@hashem.khalifa/minimal-webpack-and-react-starter-boilerplate-seriously-d90a673e134f) for more details \n\n\n\n![Real time change](https://cdn-images-1.medium.com/max/1600/1*0Slpwk3trmF7kLeoFp5UOw.gif)\n\n### Table of contents\n[Project structure](#project-structure)\n\n[Installation](#installation)\n\n[Configuration](#configuration)\n\n[Technologies used](#technologies-used)\n\n### Project structure\n\n````\nbuild/\nsrc/\n|- index.jsx _______________________________ # Application entry \n|- App.jsx _________________________________ # Application init\n|  |- Components/\n|    |- hello-world/ \n|       |- index.jsx _______________________ # Sample component\n\nwebpack\n|- paths.js ________________________________ # webpack paths needed\n|- webpack.common.js _______________________ # common webpack config\n|- webpack.dev.js __________________________ # development config\n|- webpack.prod.js _________________________ # production config      \n````\n\n\n### Installation\n\n1- Clone the boilerplate repo\n\n`git clone git@github.com:HashemKhalifa/webpack-react-boilerplate.git`\n\n2- `yarn` or `npm install` to install npm packages\n\n3- start dev server using `yarn start` or `npm start`.\n\n3- build and bundling your resources for production `yarn build`.\n\n4- Unit testing will watch all your changes in the test files as well as create coverage folder for you. \n`yarn test`\n\n\n### Configuration\n* Webpack Config paths based on your file structure you can go to `webpack/paths.js` and modify the source and file names based on your need.\n* `webpack/webpack.common.js` config common webpack for both dev and production environments.\n* webpack/webpack.dev.js config webpack for dev environment.\n* `webpack/webpack.prod.js` config webpack for production environment.\n* `/webpack.config.js` main webpack config that merge common and webpack environment based config.\n* Enzyme config `/setupTest.js` here you will have all setup for enzyme to test your component.\n* Prettier config `/.prettierc`.\n* Browsers list config `/.browserslistrc`.\n\n\n#### Technologies used\n\n\n* [Webpack 4](https://github.com/webpack/webpack) \n* [Babel 7](https://github.com/babel/babel) [ transforming JSX and ES6,ES7,ES8 ]\n* [React](https://github.com/facebook/react) `16.8`\n* [Lodash](https://github.com/lodash/lodash)\n* [Jest](https://github.com/facebook/jest) [ Unit test]\n* [Enzyme](http://airbnb.io/enzyme/) for UI testing.\n* [Eslint](https://github.com/eslint/eslint/) with airbnb config\n* [Prettier](https://github.com/prettier/prettier) [ Code formatter ]\n* [Style](https://github.com/webpack-contrib/style-loader) & [CSS Loader](https://github.com/webpack-contrib/css-loader) & [SASS-loader](https://github.com/webpack-contrib/sass-loader)\n* [CSS modules](https://github.com/css-modules/css-modules) [ Isolated style based on each component ]\n* [Browsers list](https://github.com/browserslist/browserslist) [ Share target browsers between different front-end tools, like Autoprefixer, Stylelint and babel-preset-env ]\n* [React hot loader](https://github.com/gaearon/react-hot-loader)\n* [Webpack dev serve](https://github.com/webpack/webpack-dev-server) \n'