b'# eslint-plugin-markdown\n\n![Screenshot](screenshot.png)\n\nAn [ESLint](http://eslint.org/) plugin to lint JavaScript in Markdown.\n\nSupported extensions are `.markdown`, `.mdown`, `.mkdn`, and `.md`.\n\n## Usage\n\nInstall the plugin:\n\n```sh\nnpm install --save-dev eslint eslint-plugin-markdown\n```\n\nAdd it to your `.eslintrc`:\n\n```json\n{\n    "plugins": [\n        "markdown"\n    ]\n}\n```\n\nRun ESLint on `.md` files:\n\n```sh\neslint --ext md .\n```\n\nIt will lint `js`, `javascript`, `jsx`, or `node` [fenced code blocks](https://help.github.com/articles/github-flavored-markdown/#fenced-code-blocks) in your Markdown documents:\n\n````markdown\n```js\n// This gets linted\nvar answer = 6 * 7;\nconsole.log(answer);\n```\n\n```JavaScript\n// This also gets linted\n\n/* eslint quotes: [2, "double"] */\n\nfunction hello() {\n    console.log("Hello, world!");\n}\nhello();\n```\n\n```jsx\n// This gets linted too\nvar div = <div className="jsx"></div>;\n```\n\n```node\n// And this\nconsole.log(process.version);\n```\n````\n\nBlocks that don\'t specify either `js`, `javascript`, `jsx`, or `node` syntax are ignored:\n\n````markdown\n```\nThis is plain text and doesn\'t get linted.\n```\n\n```python\nprint("This doesn\'t get linted either.")\n```\n````\n\n## Configuration Comments\n\nThe processor will convert HTML comments immediately preceding a code block into JavaScript block comments and insert them at the beginning of the source code that it passes to ESLint. This permits configuring ESLint via configuration comments while keeping the configuration comments themselves hidden when the markdown is rendered. Comment bodies are passed through unmodified, so the plugin supports any [configuration comments](http://eslint.org/docs/user-guide/configuring) supported by ESLint itself.\n\nThis example enables the `browser` environment, disables the `no-alert` rule, and configures the `quotes` rule to prefer single quotes:\n\n````markdown\n<!-- eslint-env browser -->\n<!-- eslint-disable no-alert -->\n<!-- eslint quotes: ["error", "single"] -->\n\n```js\nalert(\'Hello, world!\');\n```\n````\n\nEach code block in a file is linted separately, so configuration comments apply only to the code block that immediately follows.\n\n````markdown\nAssuming `no-alert` is enabled in `.eslintrc`, the first code block will have no error from `no-alert`:\n\n<!-- eslint-env browser -->\n<!-- eslint-disable no-alert -->\n\n```js\nalert("Hello, world!");\n```\n\nBut the next code block will have an error from `no-alert`:\n\n<!-- eslint-env browser -->\n\n```js\nalert("Hello, world!");\n```\n````\n\n## Skipping Blocks\n\nSometimes it can be useful to have code blocks marked with `js` even though they don\'t contain valid JavaScript syntax, such as commented JSON blobs that need `js` syntax highlighting. Standard `eslint-disable` comments only silence rule reporting, but ESLint still reports any syntax errors it finds. In cases where a code block should not even be parsed, insert a non-standard `<!-- eslint-skip -->` comment before the block, and this plugin will hide the following block from ESLint. Neither rule nor syntax errors will be reported.\n\n````markdown\nThere are comments in this JSON, so we use `js` syntax for better\nhighlighting. Skip the block to prevent warnings about invalid syntax.\n\n<!-- eslint-skip -->\n\n```js\n{\n    // This code block is hidden from ESLint.\n    "hello": "world"\n}\n```\n\n```js\nconsole.log("This code block is linted normally.");\n```\n````\n\n## Fix issues automatically\n\nThis plugin can attempt to fix some of the issues automatically using [`fix` ESLint option](https://eslint.org/docs/user-guide/command-line-interface#fixing-problems). This option instructs ESLint to try to fix as many issues as possible. To enable this option you can add `--fix` to your ESLint call, for example:\n\n```bash\neslint --fix --ext md .\n```\n\n## Unsatisfiable Rules\n\nSince code blocks are not files themselves but embedded inside a Markdown document, some rules do not apply to Markdown code blocks, and messages from these rules are automatically suppressed:\n\n- `eol-last`\n- `unicode-bom`\n\n### Project or directory-wide overrides for code snippets\n\nGiven that code snippets often lack full context, and adding full context\nthrough configuration comments may be too cumbersome to apply for each snippet,\none may wish to instead set defaults for all one\'s JavaScript snippets in a\nmanner that applies to all Markdown files within your project (or a specific\ndirectory).\n\nESLint allows a configuration property `overrides` which has a `files`\nproperty which accepts a\n[glob pattern](https://eslint.org/docs/user-guide/configuring#configuration-based-on-glob-patterns), allowing you to designate files (such as all `md` files) whose rules will\nbe overridden.\n\nThe following example shows the disabling of a few commonly problematic rules\nfor code snippets. It also points to the fact that some rules\n(e.g., `padded-blocks`) may be more appealing for disabling given that\none may wish for documentation to be more liberal in providing padding for\nreadability.\n\n```js\n// .eslintrc.json\n{\n    // ...\n    "overrides": [{\n        "files": ["**/*.md"],\n        "rules": {\n            "no-undef": "off",\n            "no-unused-vars": "off",\n            "no-console": "off",\n            "padded-blocks": "off"\n        }\n    }]\n}\n```\n\n#### Overriding `strict`\n\nThe `strict` rule is technically satisfiable inside of Markdown code blocks, but writing a `"use strict"` directive at the top of every code block is tedious and distracting. We recommend a glob pattern for `.md` files to disable `strict` and enable the `impliedStrict` [parser option](https://eslint.org/docs/user-guide/configuring#specifying-parser-options) so the code blocks still parse in strict mode:\n\n```js\n// .eslintrc.json\n{\n    // ...\n    "overrides": [{\n        "files": ["**/*.md"],\n        "parserOptions": {\n            "ecmaFeatures": {\n                "impliedStrict": true\n            }\n        },\n        "rules": {\n            "strict": "off"\n        }\n    }]\n}\n```\n\n## Tips for use with Atom linter-eslint\n\nThe [linter-eslint](https://atom.io/packages/linter-eslint) package allows for\nlinting within the [Atom IDE](https://atom.io/).\n\nIn order to see `eslint-plugin-markdown` work its magic within Markdown code\nblocks in your Atom editor, you can go to `linter-eslint`\'s settings and\nwithin "List of scopes to run ESLint on...", add the cursor scope "source.gfm".\n\nHowever, this reports a problem when viewing Markdown which does not have\nconfiguration, so you may wish to use the cursor scope "source.embedded.js",\nbut note that `eslint-plugin-markdown` configuration comments and skip\ndirectives won\'t work in this context.\n\n## Contributing\n\n```sh\n$ git clone https://github.com/eslint/eslint-plugin-markdown.git\n$ cd eslint-plugin-markdown\n$ npm install\n$ npm test\n```\n\nThis project follows the [ESLint contribution guidelines](http://eslint.org/docs/developer-guide/contributing/).\n'