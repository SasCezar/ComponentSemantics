b'# eslint-plugin-unicorn [![Build Status](https://travis-ci.org/sindresorhus/eslint-plugin-unicorn.svg?branch=master)](https://travis-ci.org/sindresorhus/eslint-plugin-unicorn) [![Coverage Status](https://coveralls.io/repos/github/sindresorhus/eslint-plugin-unicorn/badge.svg?branch=master)](https://coveralls.io/github/sindresorhus/eslint-plugin-unicorn?branch=master)\n\n<img src="https://cloud.githubusercontent.com/assets/170270/18659176/1cc373d0-7f33-11e6-890f-0ba35362ee7e.jpg" width="180" align="right">\n\n> Various awesome ESLint rules\n\nYou might want to check out [XO](https://github.com/xojs/xo), which includes this plugin.\n\n[**Propose or contribute a new rule \xe2\x9e\xa1**](.github/contributing.md)\n\n\n## Install\n\n```\n$ npm install --save-dev eslint eslint-plugin-unicorn\n```\n\n\n## Usage\n\nConfigure it in `package.json`.\n\n```json\n{\n\t"name": "my-awesome-project",\n\t"eslintConfig": {\n\t\t"env": {\n\t\t\t"es6": true\n\t\t},\n\t\t"parserOptions": {\n\t\t\t"ecmaVersion": 2020,\n\t\t\t"sourceType": "module"\n\t\t},\n\t\t"plugins": [\n\t\t\t"unicorn"\n\t\t],\n\t\t"rules": {\n\t\t\t"unicorn/catch-error-name": "error",\n\t\t\t"unicorn/consistent-function-scoping": "error",\n\t\t\t"unicorn/custom-error-definition": "off",\n\t\t\t"unicorn/error-message": "error",\n\t\t\t"unicorn/escape-case": "error",\n\t\t\t"unicorn/expiring-todo-comments": "error",\n\t\t\t"unicorn/explicit-length-check": "error",\n\t\t\t"unicorn/filename-case": "error",\n\t\t\t"unicorn/import-index": "error",\n\t\t\t"unicorn/new-for-builtins": "error",\n\t\t\t"unicorn/no-abusive-eslint-disable": "error",\n\t\t\t"unicorn/no-array-instanceof": "error",\n\t\t\t"unicorn/no-console-spaces": "error",\n\t\t\t"unicorn/no-fn-reference-in-iterator": "off",\n\t\t\t"unicorn/no-for-loop": "error",\n\t\t\t"unicorn/no-hex-escape": "error",\n\t\t\t"unicorn/no-keyword-prefix": "off",\n\t\t\t"no-nested-ternary": "off",\n\t\t\t"unicorn/no-nested-ternary": "error",\n\t\t\t"unicorn/no-new-buffer": "error",\n\t\t\t"unicorn/no-process-exit": "error",\n\t\t\t"unicorn/no-unreadable-array-destructuring": "error",\n\t\t\t"unicorn/no-unsafe-regex": "off",\n\t\t\t"unicorn/no-unused-properties": "off",\n\t\t\t"unicorn/no-zero-fractions": "error",\n\t\t\t"unicorn/number-literal-case": "error",\n\t\t\t"unicorn/prefer-add-event-listener": "error",\n\t\t\t"unicorn/prefer-dataset": "error",\n\t\t\t"unicorn/prefer-event-key": "error",\n\t\t\t"unicorn/prefer-exponentiation-operator": "error",\n\t\t\t"unicorn/prefer-flat-map": "error",\n\t\t\t"unicorn/prefer-includes": "error",\n\t\t\t"unicorn/prefer-node-append": "error",\n\t\t\t"unicorn/prefer-node-remove": "error",\n\t\t\t"unicorn/prefer-query-selector": "error",\n\t\t\t"unicorn/prefer-reflect-apply": "error",\n\t\t\t"unicorn/prefer-spread": "error",\n\t\t\t"unicorn/prefer-starts-ends-with": "error",\n\t\t\t"unicorn/prefer-string-slice": "error",\n\t\t\t"unicorn/prefer-text-content": "error",\n\t\t\t"unicorn/prefer-type-error": "error",\n\t\t\t"unicorn/prevent-abbreviations": "error",\n\t\t\t"unicorn/regex-shorthand": "error",\n\t\t\t"unicorn/throw-new-error": "error"\n\t\t}\n\t}\n}\n```\n\n\n## Rules\n\n- [catch-error-name](docs/rules/catch-error-name.md) - Enforce a specific parameter name in catch clauses.\n- [consistent-function-scoping](docs/rules/consistent-function-scoping.md) - Move function definitions to the highest possible scope.\n- [custom-error-definition](docs/rules/custom-error-definition.md) - Enforce correct `Error` subclassing. *(fixable)*\n- [error-message](docs/rules/error-message.md) - Enforce passing a `message` value when throwing a built-in error.\n- [escape-case](docs/rules/escape-case.md) - Require escape sequences to use uppercase values. *(fixable)*\n- [expiring-todo-comments](docs/rules/expiring-todo-comments.md) - Add expiration conditions to TODO comments.\n- [explicit-length-check](docs/rules/explicit-length-check.md) - Enforce explicitly comparing the `length` property of a value. *(partly fixable)*\n- [filename-case](docs/rules/filename-case.md) - Enforce a case style for filenames.\n- [import-index](docs/rules/import-index.md) - Enforce importing index files with `.`. *(fixable)*\n- [new-for-builtins](docs/rules/new-for-builtins.md) - Enforce the use of `new` for all builtins, except `String`, `Number`, `Boolean`, `Symbol` and `BigInt`. *(fixable)*\n- [no-abusive-eslint-disable](docs/rules/no-abusive-eslint-disable.md) - Enforce specifying rules to disable in `eslint-disable` comments.\n- [no-array-instanceof](docs/rules/no-array-instanceof.md) - Require `Array.isArray()` instead of `instanceof Array`. *(fixable)*\n- [no-console-spaces](docs/rules/no-console-spaces.md) - Do not use leading/trailing space between `console.log` parameters. *(fixable)*\n- [no-fn-reference-in-iterator](docs/rules/no-fn-reference-in-iterator.md) - Prevent passing a function reference directly to iterator methods. *(fixable)*\n- [no-for-loop](docs/rules/no-for-loop.md) - Do not use a `for` loop that can be replaced with a `for-of` loop. *(partly fixable)*\n- [no-hex-escape](docs/rules/no-hex-escape.md) - Enforce the use of Unicode escapes instead of hexadecimal escapes. *(fixable)*\n- [no-keyword-prefix](docs/rules/no-keyword-prefix.md) - Disallow identifiers starting with `new` or `class`.\n- [no-nested-ternary](docs/rules/no-nested-ternary.md) - Disallow nested ternary expressions. *(partly fixable)*\n- [no-new-buffer](docs/rules/no-new-buffer.md) - Enforce the use of `Buffer.from()` and `Buffer.alloc()` instead of the deprecated `new Buffer()`. *(fixable)*\n- [no-process-exit](docs/rules/no-process-exit.md) - Disallow `process.exit()`.\n- [no-unreadable-array-destructuring](docs/rules/no-unreadable-array-destructuring.md) - Disallow unreadable array destructuring.\n- [no-unsafe-regex](docs/rules/no-unsafe-regex.md) - Disallow unsafe regular expressions.\n- [no-unused-properties](docs/rules/no-unused-properties.md) - Disallow unused object properties.\n- [no-zero-fractions](docs/rules/no-zero-fractions.md) - Disallow number literals with zero fractions or dangling dots. *(fixable)*\n- [number-literal-case](docs/rules/number-literal-case.md) - Enforce lowercase identifier and uppercase value for number literals. *(fixable)*\n- [prefer-add-event-listener](docs/rules/prefer-add-event-listener.md) - Prefer `.addEventListener()` and `.removeEventListener()` over `on`-functions. *(partly fixable)*\n- [prefer-dataset](docs/rules/prefer-dataset.md) - Prefer using `.dataset` on DOM elements over `.setAttribute(\xe2\x80\xa6)`. *(fixable)*\n- [prefer-event-key](docs/rules/prefer-event-key.md) - Prefer `KeyboardEvent#key` over `KeyboardEvent#keyCode`. *(partly fixable)*\n- [prefer-exponentiation-operator](docs/rules/prefer-exponentiation-operator.md) - Prefer the exponentiation operator over `Math.pow()` *(fixable)*\n- [prefer-flat-map](docs/rules/prefer-flat-map.md) - Prefer `.flatMap(\xe2\x80\xa6)` over `.map(\xe2\x80\xa6).flat()`. *(fixable)*\n- [prefer-includes](docs/rules/prefer-includes.md) - Prefer `.includes()` over `.indexOf()` when checking for existence or non-existence. *(fixable)*\n- [prefer-node-append](docs/rules/prefer-node-append.md) - Prefer `Node#append()` over `Node#appendChild()`. *(fixable)*\n- [prefer-node-remove](docs/rules/prefer-node-remove.md) - Prefer `node.remove()` over `parentNode.removeChild(node)` and `parentElement.removeChild(node)`. *(fixable)*\n- [prefer-query-selector](docs/rules/prefer-query-selector.md) - Prefer `.querySelector()` over `.getElementById()`, `.querySelectorAll()` over `.getElementsByClassName()` and `.getElementsByTagName()`. *(partly fixable)*\n- [prefer-reflect-apply](docs/rules/prefer-reflect-apply.md) - Prefer `Reflect.apply()` over `Function#apply()`. *(fixable)*\n- [prefer-spread](docs/rules/prefer-spread.md) - Prefer the spread operator over `Array.from()`. *(fixable)*\n- [prefer-starts-ends-with](docs/rules/prefer-starts-ends-with.md) - Prefer `String#startsWith()` & `String#endsWith()` over more complex alternatives.\n- [prefer-string-slice](docs/rules/prefer-string-slice.md) - Prefer `String#slice()` over `String#substr()` and `String#substring()`. *(partly fixable)*\n- [prefer-text-content](docs/rules/prefer-text-content.md) - Prefer `.textContent` over `.innerText`. *(fixable)*\n- [prefer-type-error](docs/rules/prefer-type-error.md) - Enforce throwing `TypeError` in type checking conditions. *(fixable)*\n- [prevent-abbreviations](docs/rules/prevent-abbreviations.md) - Prevent abbreviations. *(partly fixable)*\n- [regex-shorthand](docs/rules/regex-shorthand.md) - Enforce the use of regex shorthands to improve readability. *(fixable)*\n- [throw-new-error](docs/rules/throw-new-error.md) - Require `new` when throwing an error. *(fixable)*\n\n\n## Recommended config\n\nThis plugin exports a [`recommended` config](index.js) that enforces good practices.\n\nEnable it in your `package.json` with the `extends` option:\n\n```json\n{\n\t"name": "my-awesome-project",\n\t"eslintConfig": {\n\t\t"extends": "plugin:unicorn/recommended"\n\t}\n}\n```\n\nSee the [ESLint docs](http://eslint.org/docs/user-guide/configuring#extending-configuration-files) for more information about extending config files.\n\n**Note**: This config will also enable the correct [parser options](http://eslint.org/docs/user-guide/configuring#specifying-parser-options) and [environment](http://eslint.org/docs/user-guide/configuring#specifying-environments).\n\n\n## Maintainers\n\n- [Sindre Sorhus](https://github.com/sindresorhus)\n- [Adam Babcock](https://github.com/MrHen)\n- [futpib](https://github.com/futpib)\n- [Sam Verschueren](https://github.com/SamVerschueren)\n- [Fisker Cheung](https://github.com/fisker)\n\n###### Former\n\n- [Jeroen Engels](https://github.com/jfmengels)\n'