b'# vue-eslint-parser\n\n[![npm version](https://img.shields.io/npm/v/vue-eslint-parser.svg)](https://www.npmjs.com/package/vue-eslint-parser)\n[![Downloads/month](https://img.shields.io/npm/dm/vue-eslint-parser.svg)](http://www.npmtrends.com/vue-eslint-parser)\n[![Build Status](https://github.com/mysticatea/vue-eslint-parser/workflows/CI/badge.svg)](https://github.com/mysticatea/vue-eslint-parser/actions)\n[![Coverage Status](https://codecov.io/gh/mysticatea/vue-eslint-parser/branch/master/graph/badge.svg)](https://codecov.io/gh/mysticatea/vue-eslint-parser)\n[![Dependency Status](https://david-dm.org/mysticatea/vue-eslint-parser.svg)](https://david-dm.org/mysticatea/vue-eslint-parser)\n\nThe ESLint custom parser for `.vue` files.\n\n## \xe2\xa4\xb4\xef\xb8\x8f Motivation\n\nThis parser allows us to lint the `<template>` of `.vue` files. We can make mistakes easily on `<template>` if we use complex directives and expressions in the template. This parser and the rules of [eslint-plugin-vue](https://github.com/vuejs/eslint-plugin-vue) would catch some of the mistakes.\n\n## \xf0\x9f\x92\xbf Installation\n\n```bash\n$ npm install --save-dev eslint vue-eslint-parser\n```\n\n- Requires Node.js 6.5.0 or later.\n- Requires ESLint 5.0.0 or later.\n- Requires `babel-eslint` 8.1.1 or later if you want it. (optional)\n- Requires `@typescript-eslint/parser` 1.0.0 or later if you want it. (optional)\n\n## \xf0\x9f\x93\x96 Usage\n\n1. Write `parser` option into your `.eslintrc.*` file.\n2. Use glob patterns or `--ext .vue` CLI option.\n\n```json\n{\n    "extends": "eslint:recommended",\n    "parser": "vue-eslint-parser"\n}\n```\n\n```console\n$ eslint "src/**/*.{js,vue}"\n# or\n$ eslint src --ext .vue\n```\n\n## \xf0\x9f\x94\xa7 Options\n\n`parserOptions` has the same properties as what [espree](https://github.com/eslint/espree#usage), the default parser of ESLint, is supporting.\nFor example:\n\n```json\n{\n    "parser": "vue-eslint-parser",\n    "parserOptions": {\n        "sourceType": "module",\n        "ecmaVersion": 2018,\n        "ecmaFeatures": {\n            "globalReturn": false,\n            "impliedStrict": false,\n            "jsx": false\n        }\n    }\n}\n```\n\n### parserOptions.parser\n\nYou can use `parserOptions.parser` property to specify a custom parser to parse `<script>` tags.\nOther properties than parser would be given to the specified parser.\nFor example:\n\n```json\n{\n    "parser": "vue-eslint-parser",\n    "parserOptions": {\n        "parser": "babel-eslint",\n        "sourceType": "module",\n        "allowImportExportEverywhere": false\n    }\n}\n```\n\n```json\n{\n    "parser": "vue-eslint-parser",\n    "parserOptions": {\n        "parser": "@typescript-eslint/parser"\n    }\n}\n```\n\nIf the `parserOptions.parser` is `false`, the `vue-eslint-parser` skips parsing `<script>` tags completely.\nThis is useful for people who use the language ESLint community doesn\'t provide custom parser implementation.\n\n## \xf0\x9f\x8e\x87 Usage for custom rules / plugins\n\n- This parser provides `parserServices` to traverse `<template>`.\n    - `defineTemplateBodyVisitor(templateVisitor, scriptVisitor)` ... returns ESLint visitor to traverse `<template>`.\n    - `getTemplateBodyTokenStore()` ... returns ESLint `TokenStore` to get the tokens of `<template>`.\n    - `getDocumentFragment()` ... returns the root `VDocumentFragment`.\n- [ast.md](./docs/ast.md) is `<template>` AST specification.\n- [mustache-interpolation-spacing.js](https://github.com/vuejs/eslint-plugin-vue/blob/b434ff99d37f35570fa351681e43ba2cf5746db3/lib/rules/mustache-interpolation-spacing.js) is an example.\n\n## \xe2\x9a\xa0\xef\xb8\x8f Known Limitations\n\nSome rules make warnings due to the outside of `<script>` tags.\nPlease disable those rules for `.vue` files as necessary.\n\n- [eol-last](http://eslint.org/docs/rules/eol-last)\n- [linebreak-style](http://eslint.org/docs/rules/linebreak-style)\n- [max-len](http://eslint.org/docs/rules/max-len)\n- [max-lines](http://eslint.org/docs/rules/max-lines)\n- [no-trailing-spaces](http://eslint.org/docs/rules/no-trailing-spaces)\n- [unicode-bom](http://eslint.org/docs/rules/unicode-bom)\n- Other rules which are using the source code text instead of AST might be confused as well.\n\n## \xf0\x9f\x93\xb0 Changelog\n\n- [GitHub Releases](https://github.com/mysticatea/vue-eslint-parser/releases)\n\n## \xf0\x9f\x8d\xbb Contributing\n\nWelcome contributing!\n\nPlease use GitHub\'s Issues/PRs.\n\nIf you want to write code, please execute `npm install && npm run setup` after you cloned this repository.\nThe `npm install` command installs dependencies.\nThe `npm run setup` command initializes ESLint as git submodules for tests.\n\n### Development Tools\n\n- `npm test` runs tests and measures coverage.\n- `npm run build` compiles TypeScript source code to `index.js`, `index.js.map`, and `index.d.ts`.\n- `npm run coverage` shows the coverage result of `npm test` command with the default browser.\n- `npm run clean` removes the temporary files which are created by `npm test` and `npm run build`.\n- `npm run lint` runs ESLint.\n- `npm run setup` setups submodules to develop.\n- `npm run update-fixtures` updates files in `test/fixtures/ast` directory based on `test/fixtures/ast/*/source.vue` files.\n- `npm run watch` runs `build`, `update-fixtures`, and tests with `--watch` option.\n'