b'GopherJS - A compiler from Go to JavaScript\n-------------------------------------------\n\n[![GoDoc](https://godoc.org/github.com/gopherjs/gopherjs/js?status.svg)](https://godoc.org/github.com/gopherjs/gopherjs/js)\n[![Sourcegraph](https://sourcegraph.com/github.com/gopherjs/gopherjs/-/badge.svg)](https://sourcegraph.com/github.com/gopherjs/gopherjs?badge)\n[![Circle CI](https://circleci.com/gh/gopherjs/gopherjs.svg?style=svg)](https://circleci.com/gh/gopherjs/gopherjs)\n\nGopherJS compiles Go code ([golang.org](https://golang.org/)) to pure JavaScript code. Its main purpose is to give you the opportunity to write front-end code in Go which will still run in all browsers.\n\n### Playground\nGive GopherJS a try on the [GopherJS Playground](http://gopherjs.github.io/playground/).\n\n### What is supported?\nNearly everything, including Goroutines ([compatibility table](https://github.com/gopherjs/gopherjs/blob/master/doc/packages.md)). Performance is quite good in most cases, see [HTML5 game engine benchmark](https://ajhager.github.io/engi/demos/botmark.html). Cgo is not supported.\n\n### Installation and Usage\nGet or update GopherJS and dependencies with:\n\n```\ngo get -u github.com/gopherjs/gopherjs\n```\n\nNow you can use `gopherjs build [package]`, `gopherjs build [files]` or `gopherjs install [package]` which behave similar to the `go` tool. For `main` packages, these commands create a `.js` file and `.js.map` source map in the current directory or in `$GOPATH/bin`. The generated JavaScript file can be used as usual in a website. Use `gopherjs help [command]` to get a list of possible command line flags, e.g. for minification and automatically watching for changes.\n\n`gopherjs` uses your platform\'s default `GOOS` value when generating code. Supported `GOOS` values are: `linux`, `darwin`. If you\'re on a different platform (e.g., Windows or FreeBSD), you\'ll need to set the `GOOS` environment variable to a supported value. For example, `GOOS=linux gopherjs build [package]`.\n\n*Note: GopherJS will try to write compiled object files of the core packages to your $GOROOT/pkg directory. If that fails, it will fall back to $GOPATH/pkg.*\n\n#### gopherjs run, gopherjs test\n\nIf you want to use `gopherjs run` or `gopherjs test` to run the generated code locally, install Node.js 10.0.0 (or newer), and the `source-map-support` module:\n\n```\nnpm install --global source-map-support\n```\n\nOn supported `GOOS` platforms, it\'s possible to make system calls (file system access, etc.) available. See [doc/syscalls.md](https://github.com/gopherjs/gopherjs/blob/master/doc/syscalls.md) for instructions on how to do so.\n\n#### gopherjs serve\n\n`gopherjs serve` is a useful command you can use during development. It will start an HTTP server serving on ":8080" by default, then dynamically compile your Go packages with GopherJS and serve them.\n\nFor example, navigating to `http://localhost:8080/example.com/user/project/` should compile and run the Go package `example.com/user/project`. The generated JavaScript output will be served at `http://localhost:8080/example.com/user/project/project.js` (the .js file name will be equal to the base directory name). If the directory contains `index.html` it will be served, otherwise a minimal `index.html` that includes `<script src="project.js"></script>` will be provided, causing the JavaScript to be executed. All other static files will be served too.\n\nRefreshing in the browser will rebuild the served files if needed. Compilation errors will be displayed in terminal, and in browser console. Additionally, it will serve $GOROOT and $GOPATH for sourcemaps.\n\nIf you include an argument, it will be the root from which everything is served. For example, if you run `gopherjs serve github.com/user/project` then the generated JavaScript for the package github.com/user/project/mypkg will be served at http://localhost:8080/mypkg/mypkg.js.\n\n### Performance Tips\n\n- Use the `-m` command line flag to generate minified code.\n- Apply gzip compression (https://en.wikipedia.org/wiki/HTTP_compression).\n- Use `int` instead of `(u)int8/16/32/64`.\n- Use `float64` instead of `float32`.\n\n### Community\n- [#gopherjs Channel on Gophers Slack](https://gophers.slack.com/messages/gopherjs/) (invites to Gophers Slack are available [here](http://blog.gopheracademy.com/gophers-slack-community/#how-can-i-be-invited-to-join:2facdc921b2310f18cb851c36fa92369))\n- [Bindings to JavaScript APIs and libraries](https://github.com/gopherjs/gopherjs/wiki/bindings)\n- [GopherJS Blog](https://medium.com/gopherjs)\n- [GopherJS on Twitter](https://twitter.com/GopherJS)\n\n### Getting started\n\n#### Interacting with the DOM\nThe package `github.com/gopherjs/gopherjs/js` (see [documentation](https://godoc.org/github.com/gopherjs/gopherjs/js)) provides functions for interacting with native JavaScript APIs. For example the line\n\n```js\ndocument.write("Hello world!");\n```\n\nwould look like this in Go:\n\n```go\njs.Global.Get("document").Call("write", "Hello world!")\n```\n\nYou may also want use the [DOM bindings](http://dominik.honnef.co/go/js/dom), the [jQuery bindings](https://github.com/gopherjs/jquery) (see [TodoMVC Example](https://github.com/gopherjs/todomvc)) or the [AngularJS bindings](https://github.com/wvell/go-angularjs). Those are some of the [bindings to JavaScript APIs and libraries](https://github.com/gopherjs/gopherjs/wiki/bindings) by community members.\n\n#### Providing library functions for use in other JavaScript code\nSet a global variable to a map that contains the functions:\n\n```go\npackage main\n\nimport "github.com/gopherjs/gopherjs/js"\n\nfunc main() {\n\tjs.Global.Set("pet", map[string]interface{}{\n\t\t"New": New,\n\t})\n}\n\ntype Pet struct {\n\tname string\n}\n\nfunc New(name string) *js.Object {\n\treturn js.MakeWrapper(&Pet{name})\n}\n\nfunc (p *Pet) Name() string {\n\treturn p.name\n}\n\nfunc (p *Pet) SetName(name string) {\n\tp.name = name\n}\n```\n\nFor more details see [Jason Stone\'s blog post](http://legacytotheedge.blogspot.de/2014/03/gopherjs-go-to-javascript-transpiler.html) about GopherJS.\n\n### Architecture\n\n#### General\nGopherJS emulates a 32-bit environment. This means that `int`, `uint` and `uintptr` have a precision of 32 bits. However, the explicit 64-bit integer types `int64` and `uint64` are supported. The `GOARCH` value of GopherJS is "js". You may use it as a build constraint: `// +build js`.\n\n#### Application Lifecycle\n\nThe `main` function is executed as usual after all `init` functions have run. JavaScript callbacks can also invoke Go functions, even after the `main` function has exited. Therefore the end of the `main` function should not be regarded as the end of the application and does not end the execution of other goroutines.\n\nIn the browser, calling `os.Exit` (e.g. indirectly by `log.Fatal`) also does not terminate the execution of the program. For convenience, it calls `runtime.Goexit` to immediately terminate the calling goroutine.\n\n#### Goroutines\nGoroutines are fully supported by GopherJS. The only restriction is that you need to start a new goroutine if you want to use blocking code called from external JavaScript:\n\n```go\njs.Global.Get("myButton").Call("addEventListener", "click", func() {\n  go func() {\n    [...]\n    someBlockingFunction()\n    [...]\n  }()\n})\n```\n\nHow it works:\n\nJavaScript has no concept of concurrency (except web workers, but those are too strictly separated to be used for goroutines). Because of that, instructions in JavaScript are never blocking. A blocking call would effectively freeze the responsiveness of your web page, so calls with callback arguments are used instead.\n\nGopherJS does some heavy lifting to work around this restriction: Whenever an instruction is blocking (e.g. communicating with a channel that isn\'t ready), the whole stack will unwind (= all functions return) and the goroutine will be put to sleep. Then another goroutine which is ready to resume gets picked and its stack with all local variables will be restored.\n\n### GopherJS Development\nIf you\'re looking to make changes to the GopherJS compiler, see [Developer Guidelines](https://github.com/gopherjs/gopherjs/wiki/Developer-Guidelines) for additional developer information.\n'