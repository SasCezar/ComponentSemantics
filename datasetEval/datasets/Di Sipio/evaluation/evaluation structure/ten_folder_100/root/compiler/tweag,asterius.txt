b'# Asterius: A Haskell to WebAssembly compiler\n\n[![CircleCI](https://circleci.com/gh/tweag/asterius/tree/master.svg?style=shield)](https://circleci.com/gh/tweag/asterius/tree/master)\n[![Netlify Status](https://api.netlify.com/api/v1/badges/e7cfe6ef-b0e6-4a17-bd74-8bce6063f147/deploy-status)](https://app.netlify.com/sites/asterius/deploys)\n[![Docker Pulls](https://img.shields.io/docker/pulls/terrorjack/asterius.svg)](https://hub.docker.com/r/terrorjack/asterius)\n[![Gitter chat](https://badges.gitter.im/tweag/asterius.png)](https://gitter.im/tweag/asterius)\n\nA Haskell to WebAssembly compiler. Project status: **alpha**, in active development, some simple examples already work.\n\nSee the [documentation](https://asterius.netlify.com/) for further instructions. Or check our blog posts:\n\n* [Fibonacci compiles end-to-end: Haskell to WebAssembly via GHC](https://www.tweag.io/posts/2018-05-29-hello-asterius.html)\n* [Haskell WebAssembly calling JavaScript and back again](https://www.tweag.io/posts/2018-09-12-asterius-ffi.html)\n* [Asterius GHC WebAssembly backend reaches TodoMVC](https://www.tweag.io/posts/2018-12-20-asterius-todomvc.html)\n\nAlso, we\'ve added [Weekly Status Reports](https://asterius.netlify.com/reports.html) in case you\'re interested where the bleeding edge has reached.\n\n## Quick start\n\nWe provide pre-built Docker images. Put the input `.hs` program in a directory and map the directory to a Docker volume:\n\n```\nterrorjack@ubuntu:~$ docker run -it -v ~/mirror:/mirror terrorjack/asterius\nroot@76bcb511663d:~# cd /mirror\nroot@76bcb511663d:/mirror# ahc-link --input-hs xxx.hs\n...\n```\n\nSee the [help text](https://asterius.netlify.com/ahc-link.html) of `ahc-link` for further instructions.\n\nWhat works currently:\n\n* All GHC language features except Template Haskell.\n* Non-IO parts in `ghc-prim`/`integer-simple`/`base`/`array`/`deepseq`/`containers`/`transformers`/`mtl`/`pretty`/`bytestring`/`binary`/`xhtml`. IO is achieved via rts primitives like `print_i64` or JavaScript FFI.\n* Fast arbitrary-precision `Integer` operations backed by `BigInt`s.\n* Preliminary copying GC, managing both Haskell heap objects and JavaScript references.\n* Preliminary Cabal support.\n* Importing JavaScript expressions via the `foreign import javascript` syntax. First-class `JSVal` type in Haskell land.\n* Fast conversion between Haskell/JavaScript types (strings, arrays and ArrayBuffers at the moment)\n* Calling Haskell functions from JavaScript via the `foreign export javascript` syntax. Haskell closures can be passed between Haskell/JavaScript boundary via `StablePtr`.\n* Invoking RTS API on the JavaScript side to manipulate Haskell closures and trigger evaluation.\n* A linker which performs aggressive dead-code elimination, producing as small WebAssembly binary as possible.\n* A debugger which checks invalid memory access and outputs memory loads/stores and control flow transfers.\n* Complete [`binaryen`](https://github.com/WebAssembly/binaryen)/[`wabt`](https://github.com/WebAssembly/wabt) raw bindings, plus a monadic EDSL to construct WebAssembly code directly in Haskell.\n* A Haskell library to handle WebAssembly code, which already powers binary code generation.\n* Unit tests implementing stochastic fuzzer/shrinker for WebAssembly, in order to produce minimal repro in case something goes wrong in generated code.\n* Besides WebAssembly MVP and `BigInt`, no special requirements on the underlying JavaScript engine at the moment. Optionally, we emit binaries using the experimental tail call opcodes; see the `ahc-link` documentation page for details.\n\nBetter check the [`fib`](asterius/test/fib/fib.hs), [`jsffi`](asterius/test/jsffi/jsffi.hs), [`array`](asterius/test/array/array.hs), [`rtsapi`](asterius/test/rtsapi.hs) and [`teletype`](asterius/test/teletype/teletype.hs) test suites first to get some idea on current capabilities of `asterius`.\n\n## Building from source\n\ninstall the following:\n\n- `nodejs` 12.x. Binaries can be downloaded from [`noderesource/distributions`](https://github.com/nodesource/distributions) for common `*nix` platforms.\n\nand then follow the commands in the `Dockerfile`.\n\nFor hacking instructions, [there is a `docs/hacking.md` which has advice and common commands](docs/hacking.md)\n\n## Sponsors\n\n[<img src="https://www.tweag.io/img/tweag-med.png" height="65">](https://tweag.io)\n\nAsterius is maintained by [Tweag I/O](https://tweag.io/).\n\nHave questions? Need help? Tweet at [@tweagio](https://twitter.com/tweagio).\n'