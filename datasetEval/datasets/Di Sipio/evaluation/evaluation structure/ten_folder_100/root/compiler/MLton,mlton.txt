b'= http://mlton.org[MLton]\n\nifdef::env-github[]\nimage:https://travis-ci.org/MLton/mlton.svg?branch=master[Build Status, link = https://travis-ci.org/MLton/mlton]\nendif::[]\n\n****\nMLton is a whole-program optimizing compiler for the Standard{nbsp}ML\nprogramming language.\n****\n\n== Features\n\n * Portability. Runs on the following platforms:\n\n   - ARM: Linux (Debian).\n   - Alpha: Linux (Debian).\n   - AMD64: Darwin (Mac OS X), FreeBSD, Linux (Debian, Fedora, Ubuntu, ...),\n     OpenBSD, Solaris (10 and above).\n   - HPPA: HPUX (11.11 and above), Linux (Debian).\n   - IA64: HPUX (11.11 and above), Linux (Debian).\n   - PowerPC: AIX (5.2 and above), Darwin (Mac OS X), Linux (Debian, Fedora).\n   - PowerPC64: AIX (5.2 and above).\n   - S390: Linux (Debian).\n   - Sparc: Linux (Debian), Solaris (8 and above).\n   - X86: Cygwin/Windows, Darwin (Mac OS X), FreeBSD, Linux (Debian, Fedora,\n     Ubuntu, ...), MinGW/Windows, NetBSD, OpenBSD, Solaris (10 and above).\n\n * Robustness.\n\n   - Supports the full SML 97 language as given in The Definition of\n     Standard{nbsp}ML (Revised).\n   - A complete implementation of the Basis Library.\n   - Generates standalone executables.\n   - Compiles large programs.\n   - Support for large amounts of memory (up to 4G on 32-bit systems;\n     more on 64-bit systems).\n   - Support for large array lengths (up to 2^31^ - 1 on 32-bit systems;\n     up to 2^63^-1 on 64-bit systems).\n   - Support for large files, using 64-bit file positions.\n\n * Performance.\n\n   - Executables have excellent running times.\n   - Generates small executables.\n   - Untagged and unboxed native integers, reals, and words.\n   - Unboxed native arrays.\n   - Multiple garbage collection strategies.\n   - Fast arbitrary-precision arithmetic based on the GMP.\n\n * Tools.\n\n   - Source-level profiling for both time and allocation.\n   - MLLex lexer generator.\n   - MLYacc parser generator.\n   - MLNLFFIGEN foreign-function-interface generator.\n\n * Extensions.\n\n   - A simple and fast C FFI that supports calling from SML to C and from C\n     to SML.\n   - The ML Basis system for programming in the very large.\n   - Libraries for continuations, finalization, interval timers, random numbers,\n     resource limits, resource usage, signal handlers, object size, system\n     logging, threads, weak pointers, and world save and restore.\n\n\n== Build and Install (from source)\n\n=== Requirements\n\n==== Software\n\n * http://gcc.gnu.org/[GCC] or http://clang.llvm.org[Clang] (The C compiler must support `-std=gnu11`.)\n * http://gmplib.org[GMP] (GNU Multiple Precision arithmetic library)\n * http://savannah.gnu.org/projects/make[GNU Make]\n * http://www.gnu.org/software/bash/[GNU Bash]\n * binutils (`ar`, `ranlib`, `strip`, ...)\n * miscellaneous Unix utilities (`diff`, `find`, `grep`, `gzip`, `patch`, `sed`, `tar`, `xargs`, ...)\n * Standard{nbsp}ML compiler and tools to bootstrap:\n   - http://mlton.org[MLton] (`mlton`, `mllex`, and `mlyacc`) recommended.  Pre-built binary packages for MLton can be installed via an OS package manager or (for select platforms) obtained from `http://mlton.org`.\n   - http://www.smlnj.org[SML/NJ] (`sml`, `ml-lex`, `ml-yacc`) supported, but not recommended.\n * (optional, for documentation only) https://ctan.org/tex/[TeX], http://asciidoc.org/[AsciiDoc], http://pygments.org/[Pygments], http://www.graphicsmagick.org/[GraphicsMagick] or https://www.imagemagick.org/[ImageMagick], ...\n\n==== Hardware\n\n * &ge; 1GB RAM (for 32-bit platforms) or &ge; 2GB RAM (for 64-bit platforms)\n\n=== Build Instructions\n\nOn typical platforms, building MLton requires no configuration and can be\naccomplished via:\n\n[source,shell]\n----\n$ make all\n----\n\nA small set of `Makefile` variables can be used to customize the build:\n\n * `CC`: Specify C compiler.  Can be used for alternative tools (e.g.,\n   `CC=clang` or `CC=gcc-7`).\n * `WITH_GMP_DIR`, `WITH_GMP_INC_DIR`, `WITH_GMP_LIB_DIR`: Specify GMP include\n   and library paths, if not on default search paths.  (If `WITH_GMP_DIR` is\n   set, then `WITH_GMP_INC_DIR` defaults to `$(WITH_GMP_DIR)/include` and\n   `WITH_GMP_LIB_DIR` defaults to `$(WITH_GMP_DIR)/lib`.)\n * `MLTON_RUNTIME_ARGS`, `MLTON_COMPILE_ARGS`: Specify runtime and compile\n   arguments given to (the to-be-built) `mlton` when compiling distributed\n   executables ((self-compiled) `mlton`, `mllex`, `mlyacc`, `mlprof`, and\n   `mlnlffigen`). Can be used for testing (e.g., `MLTON_COMPILE_ARGS="-codegen\n   c"`) or for downstream packaging.\n * `OLD_MLTON_RUNTIME_ARGS`, `OLD_MLTON_COMPILE_ARGS`: Specify runtime and\n   compile arguments given to "old" `mlton` when compiling "new" `mlton`. Can be\n   used to work around bugs in "old" `mlton` when compiling "new" `mlton`.\n\nFor example:\n\n[source,shell]\n----\n$ make CC=clang WITH_GMP_DIR=/opt/gmp MLTON_COMPILE_ARGS="-codegen c" all\n----\n\nThe build artifacts are located under `./build`.  The just-built `mlton` can be\nexecuted via `./build/bin/mlton`.\n\nBuilding documentation can be accomplished via:\n\n[source,shell]\n----\n$ make docs\n----\n\n=== Install Instructions\n\nOn typical platforms, installing MLton (after performing `make all` and,\noptionally, `make docs`) to `/usr/local` can be accomplished via:\n\n[source,shell]\n----\n$ make install\n----\n\nA small set of `Makefile` variables can be used to customize the installation:\n\n * `PREFIX`: Specify the installation prefix.\n\nFor example:\n\n[source,shell]\n----\n$ make PREFIX=/opt/mlton install\n----\n\n== Install (from binary package)\n\n=== Requirements\n\n==== Software\n\n * http://gcc.gnu.org/[GCC] or http://clang.llvm.org[Clang] (The C compiler must support `-std=gnu11`.)\n * http://gmplib.org[GMP] (GNU Multiple Precision arithmetic library)\n * http://savannah.gnu.org/projects/make[GNU Make]\n * http://www.gnu.org/software/bash/[GNU Bash]\n * miscellaneous Unix utilities (`bzip2`, `gzip`, `sed`, `tar`, ...)\n\n=== Binary Package\n\nA `.tgz` or `.tbz` binary package can be extracted at any location, yielding\n`README.adoc` (this file), `CHANGELOG.adoc`, `LICENSE`, `Makefile`, `bin/`,\n`lib/`, and `share/`.  The compiler and tools can be executed in-place (e.g.,\n`./bin/mlton`).\n\nA small set of `Makefile` variables can be used to customize the binary package\nvia `make update`:\n\n * `CC`: Specify C compiler.  Can be used for alternative tools (e.g.,\n   `CC=clang` or `CC=gcc-7`).\n * `WITH_GMP_DIR`, `WITH_GMP_INC_DIR`, `WITH_GMP_LIB_DIR`: Specify GMP include\n   and library paths, if not on default search paths.  (If `WITH_GMP_DIR` is\n   set, then `WITH_GMP_INC_DIR` defaults to `$(WITH_GMP_DIR)/include` and\n   `WITH_GMP_LIB_DIR` defaults to `$(WITH_GMP_DIR)/lib`.)\n\nFor example:\n\n[source,shell]\n----\n$ make CC=clang WITH_GMP_DIR=/opt/gmp update\n----\n\n=== Install Instructions\n\nOn typical platforms, installing MLton (after optionally performing\n`make update`) to `/usr/local` can be accomplished via:\n\n[source,shell]\n----\n$ make install\n----\n\nA small set of `Makefile` variables can be used to customize the installation:\n\n * `PREFIX`: Specify the installation prefix.\n\nFor example:\n\n[source,shell]\n----\n$ make PREFIX=/opt/mlton install\n----\n\n== Resources\n\n * `http://mlton.org`\n * mailing lists\n   - `MLton-devel@mlton.org` -- MLton developers\n     (https://sourceforge.net/mailarchive/forum.php?forum_name=mlton-devel[archive],\n     https://lists.sourceforge.net/lists/listinfo/mlton-devel[subscribe])\n   - `MLton-user@mlton.org` -- MLton user community\n     (https://sourceforge.net/mailarchive/forum.php?forum_name=mlton-user[archive],\n     https://lists.sourceforge.net/lists/listinfo/mlton-user[subscribe])\n\n== Need help? Found a bug?\n\nhttps://github.com/MLton/mlton/issues[Submit an issue] if you need any help.\nWe welcome pull requests with bug fixes or changes.\n'