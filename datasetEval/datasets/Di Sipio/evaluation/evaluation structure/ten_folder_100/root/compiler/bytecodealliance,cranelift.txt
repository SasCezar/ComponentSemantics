b'Cranelift Code Generator\n========================\n\n**A [Bytecode Alliance][BA] project**\n\nCranelift is a low-level retargetable code generator. It translates a\n[target-independent intermediate\nrepresentation](https://cranelift.readthedocs.io/en/latest/ir.html)\ninto executable machine code.\n\n[BA]: https://bytecodealliance.org/\n[![Documentation Status](https://readthedocs.org/projects/cranelift/badge/?version=latest)](https://cranelift.readthedocs.io/en/latest/?badge=latest)\n[![Travis Status](https://travis-ci.org/bytecodealliance/cranelift.svg?branch=master)](https://travis-ci.org/bytecodealliance/cranelift)\n[![Fuzzit Status](https://app.fuzzit.dev/badge?org_id=bytecodealliance)](https://app.fuzzit.dev/orgs/bytecodealliance/dashboard)\n[![Gitter chat](https://badges.gitter.im/bytecodealliance/bytecodealliance.svg)](https://gitter.im/CraneStation/Lobby)\n![Minimum rustc 1.37](https://img.shields.io/badge/rustc-1.37+-green.svg)\n\nFor more information, see [the\ndocumentation](https://cranelift.readthedocs.io/en/latest/?badge=latest).\n\nFor an example of how to use the JIT, see the [SimpleJIT Demo], which\nimplements a toy language.\n\n[SimpleJIT Demo]: https://github.com/bytecodealliance/simplejit-demo\n\nFor an example of how to use Cranelift to run WebAssembly code, see\n[Wasmtime], which implements a standalone, embeddable, VM using Cranelift.\n\n[Wasmtime]: https://github.com/bytecodealliance/wasmtime\n\nStatus\n------\n\nCranelift currently supports enough functionality to run a wide variety\nof programs, including all the functionality needed to execute\nWebAssembly MVP functions, although it needs to be used within an\nexternal WebAssembly embedding to be part of a complete WebAssembly\nimplementation.\n\nThe x86-64 backend is currently the most complete and stable; other\narchitectures are in various stages of development. Cranelift currently\nsupports both the System V AMD64 ABI calling convention used on many\nplatforms and the Windows x64 calling convention. The performance\nof code produced by Cranelift is not yet impressive, though we have plans\nto fix that.\n\nThe core codegen crates have minimal dependencies, support no\\_std mode\n(see below), and do not require any host floating-point support, and\ndo not use callstack recursion.\n\nCranelift does not yet perform mitigations for Spectre or related\nsecurity issues, though it may do so in the future. It does not\ncurrently make any security-relevant instruction timing guarantees. It\nhas seen a fair amount of testing and fuzzing, although more work is\nneeded before it would be ready for a production use case.\n\nCranelift\'s APIs are not yet stable.\n\nCranelift currently requires Rust 1.37 or later to build.\n\nContributing\n------------\n\nIf you\'re interested in contributing to Cranelift: thank you! We have a\n[contributing guide](CONTRIBUTING.md) which will help you getting involved in\nthe Cranelift project.\n\nPlanned uses\n------------\n\nCranelift is designed to be a code generator for WebAssembly, but it is\ngeneral enough to be useful elsewhere too. The initial planned uses that\naffected its design are:\n\n - [WebAssembly compiler for the SpiderMonkey engine in\n    Firefox](spidermonkey.md#phase-1-webassembly).\n - [Backend for the IonMonkey JavaScript JIT compiler in\n    Firefox](spidermonkey.md#phase-2-ionmonkey).\n - [Debug build backend for the Rust compiler](rustc.md).\n - [Wasmtime non-Web wasm engine](https://github.com/bytecodealliance/wasmtime).\n\nBuilding Cranelift\n------------------\n\nCranelift uses a [conventional Cargo build\nprocess](https://doc.rust-lang.org/cargo/guide/working-on-an-existing-project.html).\n\nCranelift consists of a collection of crates, and uses a [Cargo\nWorkspace](https://doc.rust-lang.org/book/ch14-03-cargo-workspaces.html),\nso for some cargo commands, such as `cargo test`, the `--all` is needed\nto tell cargo to visit all of the crates.\n\n`test-all.sh` at the top level is a script which runs all the cargo\ntests and also performs code format, lint, and documentation checks.\n\n<details>\n<summary>Building with no_std</summary>\n\nThe following crates support \\`no\\_std\\`, although they do depend on liballoc:\n - cranelift-entity\n - cranelift-bforest\n - cranelift-codegen\n - cranelift-frontend\n - cranelift-native\n - cranelift-wasm\n - cranelift-module\n - cranelift-preopt\n - cranelift\n\nTo use no\\_std mode, disable the std feature and enable the core\nfeature. This currently requires nightly rust.\n\nFor example, to build \\`cranelift-codegen\\`:\n\n``` {.sourceCode .sh}\ncd cranelift-codegen\ncargo build --no-default-features --features core\n```\n\nOr, when using cranelift-codegen as a dependency (in Cargo.toml):\n\n``` {.sourceCode .}\n[dependency.cranelift-codegen]\n...\ndefault-features = false\nfeatures = ["core"]\n```\n\nno\\_std support is currently "best effort". We won\'t try to break it,\nand we\'ll accept patches fixing problems, however we don\'t expect all\ndevelopers to build and test no\\_std when submitting patches.\nAccordingly, the ./test-all.sh script does not test no\\_std.\n\nThere is a separate ./test-no\\_std.sh script that tests the no\\_std\nsupport in packages which support it.\n\nIt\'s important to note that cranelift still needs liballoc to compile.\nThus, whatever environment is used must implement an allocator.\n\nAlso, to allow the use of HashMaps with no\\_std, an external crate\ncalled hashmap\\_core is pulled in (via the core feature). This is mostly\nthe same as std::collections::HashMap, except that it doesn\'t have DOS\nprotection. Just something to think about.\n\n</details>\n\n<details>\n<summary>Log configuration</summary>\n\nCranelift uses the `log` crate to log messages at various levels. It doesn\'t\nspecify any maximal logging level, so embedders can choose what it should be;\nhowever, this can have an impact of Cranelift\'s code size. You can use `log`\nfeatures to reduce the maximum logging level. For instance if you want to limit\nthe level of logging to `warn` messages and above in release mode:\n\n```\n[dependency.log]\n...\nfeatures = ["release_max_level_warn"]\n```\n</details>\n\n<details>\n<summary>Building the documentation</summary>\n\nCranelift\'s documentation is [published online](https://cranelift.readthedocs.io/).\n\nTo build the documentation locally, you need the [Sphinx documentation\ngenerator](http://www.sphinx-doc.org/) as well as Python 3::\n\n    $ pip install sphinx sphinx-autobuild sphinx_rtd_theme\n    $ cd cranelift/docs\n    $ make html\n    $ open _build/html/index.html\n\n</details>\n\nEditor Support\n--------------\n\nEditor support for working with Cranelift IR (clif) files:\n\n - Vim: https://github.com/bytecodealliance/cranelift.vim\n'