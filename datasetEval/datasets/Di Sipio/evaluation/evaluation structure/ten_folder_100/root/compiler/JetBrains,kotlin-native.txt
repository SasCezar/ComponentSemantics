b"[![official project](http://jb.gg/badges/official.svg)](https://confluence.jetbrains.com/display/ALL/JetBrains+on+GitHub)\n[![version](https://img.shields.io/badge/dynamic/json.svg?color=orange&label=latest%20version&query=%24.tag_name&url=https%3A%2F%2Fgithub.com%2FJetBrains%2Fkotlin-native%2Freleases%2Flatest)](https://github.com/JetBrains/kotlin-native/releases/latest)\n# Kotlin/Native  #\n\n_Kotlin/Native_ is an LLVM backend for the Kotlin compiler, runtime\nimplementation, and native code generation facility using the LLVM toolchain.\n\n _Kotlin/Native_ is primarily designed to allow compilation for platforms where\nvirtual machines are not desirable or possible (such as iOS or embedded targets),\nor where a developer is willing to produce a reasonably-sized self-contained program\nwithout the need to ship an additional execution runtime.\n\nPrerequisites:\n*   install JDK for your platform, instead of JRE. The build requires ```tools.jar```, which is not included in JRE;\n*   on macOS install Xcode 11\n*   on Fedora 26+ ```yum install ncurses-compat-libs``` may be needed\n*   on recent Ubuntu ```apt install libncurses5``` is needed\n\nTo compile from sources use following steps:\n\nFirst, download dependencies:\n\n\t./gradlew dependencies:update\n\nThen, build the compiler and libraries:\n\n\t./gradlew bundle\n\nTo build with experimental targets support compile with `-Porg.jetbrains.kotlin.native.experimentalTargets`.\n\nThe build can take about an hour on a Macbook Pro.\nTo run a shorter build with only the host compiler and libraries, run:\n\n    ./gradlew dist distPlatformLibs\n\nTo include Kotlin compiler in [composite build](https://docs.gradle.org/current/userguide/composite_builds.html) and build\nagainst it, use the `kotlinProjectPath` project property:\n\n    ./gradlew dist -PkotlinProjectPath=path/to/kotlin/project\n\nIt's possible to include in a composite build both Kotlin compiler and Kotlin/Native Shared simultaneously.\n\nAfter that, you should be able to compile your programs like this:\n\n    export PATH=./dist/bin:$PATH\n\tkotlinc hello.kt -o hello\n\nFor an optimized compilation, use `-opt`:\n\n\tkotlinc hello.kt -o hello -opt\n\nFor tests, use:\n\n\t./gradlew backend.native:tests:run\n\nTo generate interoperability stubs, create a library definition file\n(refer to [`samples/tetris/.../sdl.def`](https://github.com/JetBrains/kotlin-native/blob/master/samples/tetris/src/nativeInterop/cinterop/sdl.def)), and run the `cinterop` tool like this:\n\n    cinterop -def lib.def\n\nSee the provided [samples](https://github.com/JetBrains/kotlin-native/tree/master/samples) and [`INTEROP.md`](https://github.com/JetBrains/kotlin-native/blob/master/INTEROP.md) for more details.\n\nThe Interop tool generates a library in the `.klib` library format. See [`LIBRARIES.md`](https://github.com/JetBrains/kotlin-native/blob/master/LIBRARIES.md)\nfor more details on this file format.\n"