b'[![MIT licensed](https://img.shields.io/badge/license-MIT-blue.svg)](./LICENSE)\n[![Build Status](https://travis-ci.org/Tiramisu-Compiler/tiramisu.svg?branch=master)](https://travis-ci.org/Tiramisu-Compiler/tiramisu)\n\n## Overview\n\nTiramisu is a compiler for expressing fast and portable data parallel computations.  It provides a simple C++ API for expressing algorithms (`Tiramisu expressions`) and how these algorithms should be optimized by the compiler.  Tiramisu can be used in areas such as linear and tensor algebra, deep learning, image processing, stencil computations and machine learning.\n\nThe Tiramisu compiler is based on the polyhedral model thus it can express a large set of loop optimizations and data layout transformations.  Currently it targets (1) multicore X86 CPUs, (2) Nvidia GPUs, (3) Xilinx FPGAs (Vivado HLS) and (4) distributed machines (using MPI).  It is designed to enable easy integration of code generators for new architectures.\n\n### Example\n\nThe following is an example of a Tiramisu program specified using the C++ API.\n\n```cpp\n// C++ code with a Tiramisu expression.\n#include "tiramisu/tiramisu.h"\nusing namespace tiramisu;\n\nvoid generate_code()\n{\n    // Specify the name of the function that you want to create.\n    tiramisu::init("foo");\n\n    // Declare two iterator variables (i and j) such that 0<=i<100 and 0<=j<100.\n    var i("i", 0, 100), j("j", 0, 100);\n\n    // Declare a Tiramisu expression (algorithm) that is equivalent to the following C code\n    // for (i=0; i<100; i++)\n    //   for (j=0; j<100; j++)\n    //     C(i,j) = 0;\n    computation C({i,j}, 0);\n    \n    // Specify optimizations\n    C.parallelize(i);\n    C.vectorize(j, 4);\n    \n    buffer b_C("b_C", {100, 100}, p_int32, a_output);\n    C.store_in(&b_C);\n\n    // Generate code\n    C.codegen({&b_C}, "generated_code.o");\n}\n```\n\n## Building Tiramisu from Sources\n\nThis section provides a short description of how to build Tiramisu.  A more detailed description is provided in [INSTALL](INSTALL.md).  The installation instructions below have been tested on Linux Ubuntu (14.04 and 18.04) and MacOS (10.12) but should work on other Linux and MacOS versions.\n\n#### Prerequisites\n###### Required\n1) [CMake](https://cmake.org/): version 3.5 or greater.\n\n2) [Autoconf](https://www.gnu.org/software/autoconf/) and [libtool](https://www.gnu.org/software/libtool/).\n  \n###### Optional\n1) [OpenMPI](https://www.open-mpi.org/) and [OpenSSh](https://www.openssh.com/): if you want to generate and run distributed code (MPI).\n2) [CUDA Toolkit](https://developer.nvidia.com/cuda-toolkit): if you want to generate and run CUDA code.\n\n\n#### Building\n1) Get Tiramisu\n\n        git clone https://github.com/Tiramisu-Compiler/tiramisu.git\n        cd tiramisu\n\n2) Get and install Tiramisu submodules (ISL, LLVM and Halide).  This step may take between few minutes to few hours (downloading and compiling LLVM is time consuming).\n\n        ./utils/scripts/install_submodules.sh <TIRAMISU_ROOT_DIR>\n\n    - Note: Make sure `<TIRAMISU_ROOT_DIR>` is absolute path!\n\n3) Optional: configure the tiramisu build by editing `configure.cmake`.  Needed only if you want to generate MPI or GPU code, or if you want to run the BLAS benchmarks.  A description of what each variable is and how it should be set is provided in comments in `configure.cmake`.\n\n    - To use the GPU backend, set `USE_GPU` to `TRUE`. If the CUDA library is not found automatically while building Tiramisu, the user will be prompt to provide the path to the CUDA library.\n    - To use the distributed backend, set `USE_MPI` to `TRUE`. If the MPI library is not found automatically, set the following variables: MPI_INCLUDE_DIR, MPI_LIB_DIR, and MPI_LIB_FLAGS.\n\n4) Build the main Tiramisu library\n\n        mkdir build\n        cd build\n        cmake ..\n        make -j tiramisu\n\n## Tiramisu on a Virtual Machine\nUsers can use the Tiramisu [virtual machine disk image](http://groups.csail.mit.edu/commit/software/TiramisuVM.zip).  The image is created using virtual box (5.2.12) and has Tiramisu already pre-compiled and ready for use. It was compiled using the same instructions in this README file.\n\nOnce you download the image, unzip it and use virtual box to open the file \'TiramisuVM.vbox\'.\n\nOnce the virtual machine has started, open a terminal, then go to the Tiramisu directory\n\n    cd /home/b/tiramisu/\n    \nIf asked for a username/password\n\n    Username:b\n    Password:b\n\nAnother tar.gz version of the VM image is available [here](http://groups.csail.mit.edu/commit/software/TiramisuVM.tar.gz).\n\n## Getting Started\n- Build [Tiramisu](https://github.com/Tiramisu-Compiler/tiramisu/).\n- Read the [Tutorials](https://github.com/Tiramisu-Compiler/tiramisu/blob/master/tutorials/README.md).\n- Read the [Tiramisu Paper](https://arxiv.org/abs/1804.10694).\n- Subscribe to Tiramisu [mailing list](https://lists.csail.mit.edu/mailman/listinfo/tiramisu).\n- Read the compiler [internal documentation](https://tiramisu-compiler.github.io/doc/) (if you want to contribute to the compiler).\n\n\n## Run Tests\n\nTo run all the tests, assuming you are in the build/ directory\n\n    make test\n\nor\n\n    ctest\n    \nTo run only one test (test_01 for example)\n\n    ctest -R 01\n\nThis will compile and run the code generator and then the wrapper.\n\nTo view the output of a test pass the `--verbose` option to `ctest`.\n'