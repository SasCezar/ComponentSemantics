b'![nGraph Compiler stack](doc/sphinx/source/graphics/ngraph_header.png)\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://github.com/NervanaSystems/ngraph/blob/master/LICENSE) [![Build Status][build-status-badge]][build-status] \n\n<div align="left">\n  <h4>\n    <a href="./ABOUT.md">Architecture &amp; features</a> | <a href="./ecosystem-overview.md" >Ecosystem</a> | <a href="https://www.ngraph.ai/documentation/project/release-notes">Release notes</a><span> | </span> <a href="https://www.ngraph.ai/documentation">Documentation</a><span> | </span> <a href="#How-to-contribute" >Contribution guide</a>\n </h4>\n</div>\n\n## Quick start\n\nTo begin using nGraph with popular frameworks, please refer to the links below. \n\n|  Framework (Version)       | Installation guide                     | Notes  \n|----------------------------|----------------------------------------|-----------------------------------\n| TensorFlow*                | [Pip install](https://www.ngraph.ai/tutorials/tensorflow-tutorial#use-pre-built-packages) or [Build from source](https://www.ngraph.ai/tutorials/tensorflow-tutorial#build-from-source) | 20 [Validated workloads]   \n| ONNX 1.5                   | [Pip install](https://www.ngraph.ai/tutorials/onnx-tutorial#use-pre-built-packages)                          | 17 [Validated workloads] \n\n\n#### Python wheels for nGraph \n\nThe Python wheels for nGraph have been tested and are supported on the following \n64-bit systems:\n\n* Ubuntu 16.04 or later\n* CentOS 7.6\n* Debian 10\n* macOS 10.14.3 (Mojave)\n\nFrameworks using nGraph Compiler stack to execute workloads have shown \n[**up to 45X**](https://ai.intel.com/ngraph-compiler-stack-beta-release/) \nperformance boost when compared to native framework implementations. We\'ve also \nseen performance boosts running workloads that are not included on the list of  \n[Validated workloads], thanks to nGraph\'s powerful subgraph pattern matching.\n\nAdditionally we have integrated nGraph with [PlaidML] to provide deep learning \nperformance acceleration on Intel, nVidia, & AMD GPUs. More details on current \narchitecture of the nGraph Compiler stack can be found in [Architecture and features],\nand recent changes to the stack are explained in the [Release Notes].\n\n## What is nGraph Compiler? \n\nnGraph Compiler aims to accelerate developing AI workloads using any deep learning\nframework and deploying to a variety of hardware targets. We strongly believe in \nproviding freedom, performance, and ease-of-use to AI developers. \n\nThe diagram below shows deep learning frameworks and hardware targets\nsupported by nGraph. NNP-L and NNP-I in the diagram refer to Intel\'s next generation \ndeep learning accelerators: Intel\xc2\xae Nervana\xe2\x84\xa2 Neural Network Processor for Learning and \nInference respectively.  Future plans for supporting addtional deep learning frameworks \nand backends are outlined in the [ecosystem] section. \n\n![](doc/sphinx/source/graphics/nGraph_main.png)\n\n\nOur documentation has extensive information about how to use nGraph Compiler \nstack to create an nGraph computational graph, integrate custom frameworks, \nand to interact with supported backends. If you wish to contribute to the \nproject, please don\'t hesitate to ask questions in [GitHub issues] after \nreviewing our contribution guide below. \n\t\n\n## How to contribute\n\nWe welcome community contributions to nGraph. If you have an idea how\nto improve it:\n\n* See the [contrib guide] for code formatting and style guidelines.\n* Share your proposal via [GitHub issues].\n* Ensure you can build the product and run all the examples with your patch.\n* In the case of a larger feature, create a test.\n* Submit a [pull request].\n* Make sure your PR passes all CI tests. Note: You can test locally with `make check`.\n\n We will review your contribution and, if any additional fixes or modifications are \n necessary, may provide feedback to guide you. When accepted, your pull request will \n be merged to the repository.\n\n\n[Ecosystem]: ./ecosystem-overview.md\n[Architecture and features]: ./ABOUT.md\n[Documentation]: https://www.ngraph.ai/documentation\n[build the Library]:  https://www.ngraph.ai/documentation/buildlb\n[Getting Started Guides]: Getting-started-guides\n[Validated workloads]: https://www.ngraph.ai/documentation/frameworks/validated/list\n[Functional]: https://github.com/NervanaSystems/ngraph-onnx/ \n[How to contribute]: How-to-contribute\n[framework integration guides]: https://ngraph.ai/documentation/frameworks/overview\n[release notes]: https://www.ngraph.ai/documentation/project/release-notes\n[Github issues]: https://github.com/NervanaSystems/ngraph/issues\n[contrib guide]: https://www.ngraph.ai/documentation/contributing/guide\n[pull request]: https://github.com/NervanaSystems/ngraph/pulls\n[how to import]: https://www.ngraph.ai/tutorials/onnx-tutorial#import-a-model-with-onnx-and-ngraph\n[ngraph_wireframes_with_notice]: doc/sphinx/source/graphics/nGraph_main.png "nGraph components"\n[build-status]: https://travis-ci.org/NervanaSystems/ngraph/branches\n[build-status-badge]: https://travis-ci.org/NervanaSystems/ngraph.svg?branch=master\n[PlaidML]: https://github.com/plaidml/plaidml\n[Source compile]: https://github.com/NervanaSystems/ngraph-mxnet/blob/master/README.md\n[nGraph-ONNX]: https://github.com/NervanaSystems/ngraph-onnx/blob/master/README.md\n[nGraph-ONNX adaptable]: https://ai.intel.com/adaptable-deep-learning-solutions-with-ngraph-compiler-and-onnx/\n[nGraph for PyTorch developers]: https://ai.intel.com/investing-in-the-pytorch-developer-community\n'