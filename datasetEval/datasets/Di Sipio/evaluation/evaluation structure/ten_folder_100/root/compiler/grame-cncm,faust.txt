b'# Faust - Programming Language for Audio Applications and Plugins\n\n## Grame, Centre National de Creation Musicale: <http://www.grame.fr>\n\nmaster : [![Build Status](https://travis-ci.org/grame-cncm/faust.svg?branch=master)](https://travis-ci.org/grame-cncm/faust)\nmaster-dev : [![Build Status](https://travis-ci.org/grame-cncm/faust.svg?branch=master-dev)](https://travis-ci.org/grame-cncm/faust)\n\n## Introduction\n\nFaust (Functional Audio Stream) is a functional programming language specifically designed for real-time signal processing and synthesis. A distinctive characteristic of Faust is to be fully compiled.\n\nThe Faust compiler translates DSP specifications into very efficient code for various languages (C++, C, JAVA, LLVM IR, WebAssembly etc.) working at sample level. It targets high-performance signal processing applications, libraries and audio plug-ins for a variety of audio platforms and standards. A same Faust specification can be used to easily generate various kinds of native standalone applications, iOS and Android apps, as well as Csound, LADSPA, Max/MSP, PD, Q, SuperCollider, VST, AU plugins, etc. (see the README in the `/architecture` folder for an exhaustive list).\n\nWhile there are Faust contributors everywhere across the globe, Faust is mainly being developed at Grame, Centre National de Creation Musicale (<http://www.grame.fr>), its birthplace.\n\n## Versions and Branches\n\nThe Faust distribution can be downloaded on the Faust Github repository: <https://github.com/grame-cncm/faust>. Official releases packages are also available here: <https://github.com/grame-cncm/faust/releases>.\n\nIn the following subsections, details about the branches of the repository are given.\n\n### `master`\n\n`master` is the main Faust branch. It can compile in different languages: C, C++, JAVA, LLVM IR, WebAssembly etc. It also implements experimental features such as multi-rate capabilities, etc. Thanks to its ability to generate LLVM IR and by using LLVM JIT, Faust is "embeddable" in any C++ program through a library called `libfaust`. Compiling Faust relies on [LLVM](https://llvm.org). Finally, Faust is needed by some sister projects of Faust such as FaustLive, FaucK, faustgen~, etc. This branch also contains the old Faust1 C++ backend.\n\n### `master-dev` (Preferred Development Branch)\n\n`master-dev` is the development sub-branch of `master`. It is used by Faust developers to commit their changes and can be considered as "the main development branch." The goal is to make sure that `master` is always functional. Merges between `master-dev` and `master` are carried out multiple times a week by the GRAME team.\n\nMore experimental branches are also available but are not documented here.\n\n## Overview of the Faust Distribution\n\nThis is an overview of the content of the top-level folders of the Faust distribution. Most of these folders contain their own README describing their content in more details.\n\n\tarchitecture/          : the architecture files currently supported\n\tbuild/                 : build tools and scripts (cmake based)\n\tbenchmark/             : tools to measure the impact of various compiler options\n\tcompiler/              : sources of the Faust compiler\n\tdebian/                : files for Debian installation\n\tdocumentation/         : Faust developer\'s documentation\n\texamples/              : Faust programs examples organized by categories\n\tinstaller/             : various installers for Linux distribution\n\tlibraries/             : DSP libraries\n\tsyntax-highlighting/   : support for syntax highlighting for several editors\n\ttests/                 : various tests\n\ttools/                 : additional easy-to-use scripts (faust2...) to produce binaries and plugins\n\twindows/               : Windows related resources\n\n## Libraries\n\nFaust libraries are now in a [separated subproject](https://github.com/grame-cncm/faustlibraries). They are synchronized from time to time in the main Faust repository using the following commands:\n\n    git submodule update --remote --merge\n    git add libraries\n    git commit -m "Project updated to the latest version of the libraries"\n    git push\n\n## Compilation and Installation\n\nSince release 2.5.18, Faust compilation and installation is based on cmake. For details about compilation, you should look at the [build/README.md](https://github.com/grame-cncm/faust/blob/master-dev/build/README.md) file and have a look at the [Faust wiki pages](https://github.com/grame-cncm/faust/wiki) or go directly to the [simple way](https://github.com/grame-cncm/faust/wiki/BuildingSimple) to compile and install. \n\n\n<!-- ### Getting the source code\n\nIn order to compile Faust on your machine you can either download the latest release of the source code <https://github.com/grame-cncm/faust/releases> or clone the git repository. In order to clone the git repository you will have to do the following steps:\n\n\tgit clone https://github.com/grame-cncm/faust.git\n\tcd faust\n\tgit submodule update --init\n\nThe last step `git submodule update --init` is a new one. This is due to the fact that the Faust libraries have been moved to an independent github repository <https://github.com/grame-cncm/faustlibraries.git>. This repository is a submodule of the Faust repository (as well as some other Faust related projects).\n\n### Linux and MacOSX\n\nTo build Faust on MacOSX or Linux, just run the following commands from the root of the distribution:\n\n\tmake\n\tsudo make install\n\nThis will compile the Faust compiler only, with a set of backends that do not have additional dependencies (so the LLVM backend will **not be compiled**). Use `make help` to see what other targets can be used from the toplevel Makefile.\n\nTo refine compilation for more specific cases, go in the build folder and see the [build/README.md](build/README.md) file.\n\n### Windows\n\nYou can use either MS [Visual Studio](http://www.microsoft.com/express/) or the [MSYS2](http://www.msys2.org/) environment. The current Makefile is targetting MSYS2 by default. See the [build/README.md](build/README.md) file for more details.\n\n### Build & Use Faust with Docker :\n\n\tdocker build -t faust\n\tdocker run faust [args...]\n\nFor example to display the help:\n\n\tdocker run faust -h\n\nTo use an additional tool, for example faust2pdf:\n\n\tdocker run --entrypoint faust2pdf faust [args...] -->\n\n## Using the Faust Examples\n\nThe `/examples` folder contains dozen of example Faust codes organized by categories. There are many options to use them.\n\n### Faust Editor\n\nThe [Faust Editor](https://faust.grame.fr/editor) can be used to edit, compile and run Faust code from any recent Web Browser with WebAssembly support.\n\n### FaustPlayground\n\n[FaustPlayground](https://faust.grame.fr/faustplayground/) is an online tool to compile and use Faust code directly in a web browser. To use a Faust example from the `/examples` folder, just drag-and-drop it in the work space and it should work right away!\n\n### FaustLive\n\n[FaustLive](https://github.com/grame-cncm/faustlive) is a program that was designed to facilitate the prototyping of Faust codes. It embeds the LLVM on-the-fly compiler of Faust2 allowing you to very rapidly compile Faust codes on your computer. Binaries and installation packages of FaustLive are available for [Linux, Windows and OSX](https://github.com/grame-cncm/faustlive/releases).\n\n### `faust2...` Scripts and Programs\n\nThe `faust2...` scripts and programs are command line tools allowing to compile Faust codes to any of the supported Faust targets ("architectures"). They are placed on your system during the Faust installation process. The fastest way to get an exhaustive list of all of them is to open a terminal window, type `faust2`, and then press the Tab key for auto-completion. For example, to compile a Faust code as a JACK application with a Qt interface, run:\n\n\tfaust2jaqt yourCode.dsp\n\nThe most commonly used `faust2` scripts are:\n\n    faust2alqt              : ALSA application with Qt UI\n    faust2ladspa            : LADSPA plug-in\n    faust2pdf               : pdf block diagram\n    faust2supercollider     : SuperCollider external\n    faust2alsa              : ALSA application with GTK UI\n    faust2faustvst          : VST plug-in\n    faust2lv2               : LV2 plug-in\n    faust2plot              : command line program to debug DSP (sample plotting, etc.)\n    faust2svg               : SVG block diagram\n    faust2alsaconsole       : ALSA command line program\n    faust2mathdoc           : automatic pdf mathematical documentation\n    faust2png               : png block diagram\n    faust2android           : Android app\n    faust2graph             : svg graph\n    faust2puredata          : PureData external\n    faust2api               : API generator\n    faust2msp               : MaxMSP 5 external and patch\n    faust2max6              : MaxMSP 6 (and later) external and patch\n    faust2ios               : iOS app\n    faust2ros               : ROS app\n    faust2au                : Audio Unit plugin\n    faust2rosgtk            : ROS app with GTK UI\n    faust2bela              : BELA program\n    faust2jack              : JACK application with GTK UI\n    faust2netjackconsole    : NetJack command line program\n    faust2rpialsaconsole    : Raspberry Pi ALSA command line program\n    faust2caqt              : CoreAudio application with Qt UI\n    faust2jackconsole       : JACK command line program\n    faust2netjackqt         : NetJack application with Qt UI\n    faust2rpinetjackconsole : Raspberry Pi JACK command line program\n    faust2caqtios           : iOS app with Qt UI\n    faust2octave            : Octave script\n    faust2csound            : CSOUND Opcode\n    faust2owl               : OWL Program\n    faust2sig               : SVG signal\n    faust2jaqt              : JACK application with Qt UI\n\nObviously, the corresponding dependencies for each of them must be installed on your system for compilation to be successful. For example, if you use `faust2jaqt`, JACK and Qt libraries must be installed.\n\n## Documentation and Resources\n\n* `/documentation/faust-quick-reference.pdf` contains the most up-to-date documentation of Faust.\n* `/documentation/library.pdf` contains the documentation of the Faust DSP libraries.\n* The [Faust website](https://faust.grame.fr) contains useful resources around Faust.\n* The [Faust online course](https://ccrma.stanford.edu/~rmichon/faustWorkshops/course2015/) or the [Faust Hero in 2 Hours tutorial](https://ccrma.stanford.edu/~rmichon/faustTutorials/#faust-hero-in-2-hours) might be good starting points for beginners.\n* [Julius Smith\'s website](https://ccrma.stanford.edu/~jos) is an incredible resource on various topics around DSP and Faust.\n\n## Acknowledgments\n\nMany persons have been contributing to the Faust project by\nproviding code for the compiler, architecture files, libraries,\nexamples, documentation, scripts, bug reports, ideas, etc.\n\nI would like to thank them and especially: Fons Adriaensen, Tiziano\nBole, Baktery Chanka, Thomas Charbonnel, Damien Cramet, Etienne\nGaudrin, Albert Graef, Stefan Kersten, Victor Lazzarini, Matthieu\nLeberre, Mathieu Leroi, Kjetil Matheussen, Remy Muller, Sampo\nSavolainen, Nicolas Scaringella, Stephen Sinclair, Travis Skare,\nJulius Smith, as well as my colleagues at GRAME, in particular :\nDominique Fober, Stephane Letz and Karim Barkati, and from the\nASTREE project : Jerome Barthelemy (IRCAM), Alain Bonardi (IRCAM),\nRaffaele Ciavarella (IRCAM), Pierre Jouvelot (Ecole des\nMines/ParisTech), Laurent Pottier (U. Saint-Etienne)\n\n## Questions and suggestions\n\nIf you have questions suggestions and comments, or if you want to\ncontribute to the project, two mailing lists are available:\n- [Development List](https://lists.sourceforge.net/lists/listinfo/faudiostream-devel)\n- [Users List](https://lists.sourceforge.net/lists/listinfo/faudiostream-users)\n\n[Yann Orlarey](https://github.com/orlarey)\n'