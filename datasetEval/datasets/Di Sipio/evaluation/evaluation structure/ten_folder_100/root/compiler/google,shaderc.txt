b'# Shaderc\n\nA collection of tools, libraries and tests for shader compilation.\nAt the moment it includes:\n\n- [`glslc`](glslc), a command line compiler for GLSL/HLSL to SPIR-V, and\n- [`libshaderc`](libshaderc), a library API for accessing `glslc` functionality.\n- [`spvc`](spvc), a command line wrapper around the SPIR-V to GLSL/HLSL/MSL\n  compiler [SPIRV-Cross][spirv-cross], and\n- [`libshaderc_spvc`](libshaderc_spvc), a library API for accessing `spvc`\n  functionality.\n\n**Note:** The fact that that `libshaderc` is not named `libshaderc_glslc` is a\nquirk of history, and a known inconsistency. Changing it would require a\nsignificant amount of renaming and breaking of downstream projects, so it is\nbeing left as is.\n\n`glslc` wraps around core functionality in [glslang][khr-glslang]\nand [SPIRV-Tools][spirv-tools]. `glslc` and its library aims to\nto provide:\n* a command line compiler with GCC- and Clang-like usage, for better\n  integration with build systems\n* an API where functionality can be added without breaking existing clients\n* an API supporting standard concurrency patterns across multiple\n  operating systems\n* increased functionality such as file `#include` support\n\n`spvc` wraps around core functionality in [spirv-cross][spirv-cross]\nand [SPIRV-Tools][spirv-tools]. `spirv` and its library aims to\nprovide:\n\n* validation and transformation of inputs before cross-compiling\n* an API designed around integration with specific projects like [Dawn][dawn]\n\n**Note:** `spvc` and its library are WIP and optional artifacts that are by\ndefault disabled in the build. How to enabled is detailed below.\n\n## Downloads\n\n<img alt="Linux" src="kokoro/img/linux.png" width="20px" height="20px" hspace="2px"/>[![Linux Build Status](https://storage.googleapis.com/shaderc/badges/build_status_linux_clang_release.svg)](https://storage.googleapis.com/shaderc/badges/build_link_linux_clang_release.html)\n<img alt="MacOS" src="kokoro/img/macos.png" width="20px" height="20px" hspace="2px"/>[![MacOS Build Status](https://storage.googleapis.com/shaderc/badges/build_status_macos_clang_release.svg)](https://storage.googleapis.com/shaderc/badges/build_link_macos_clang_release.html)\n<img alt="Windows" src="kokoro/img/windows.png" width="20px" height="20px" hspace="2px"/>[![Windows Build Status](https://storage.googleapis.com/shaderc/badges/build_status_windows_vs2017_release.svg)](https://storage.googleapis.com/shaderc/badges/build_link_windows_vs2017_release.html)\n\n[More downloads](downloads.md)\n\n## Status\n\nShaderc has maintained backward compatibility for quite some time, and we\ndon\'t anticipate any breaking changes.\nOngoing enhancements are described in the [CHANGES](CHANGES) file.\n\nShaderc has been shipping in the\n[Android NDK](https://developer.android.com/ndk/index.html) since version r12b.\n(The NDK build uses sources from https://android.googlesource.com/platform/external/shaderc/.\nThose repos are downstream from GitHub.)\nWe currently require r18b.\n\nFor licensing terms, please see the [`LICENSE`](LICENSE) file.  If interested in\ncontributing to this project, please see [`CONTRIBUTING.md`](CONTRIBUTING.md).\n\nThis is not an official Google product (experimental or otherwise), it is just\ncode that happens to be owned by Google.  That may change if Shaderc gains\ncontributions from others.  See the [`CONTRIBUTING.md`](CONTRIBUTING.md) file\nfor more information. See also the [`AUTHORS`](AUTHORS) and\n[`CONTRIBUTORS`](CONTRIBUTORS) files.\n\n## File organization\n\n- `android_test/` : a small Android application to verify compilation\n- `cmake/`: CMake utility functions and configuration for Shaderc\n- `examples/`: Example programs\n- `glslc/`: an executable to compile GLSL to SPIR-V\n- `libshaderc/`: a library for compiling shader strings into SPIR-V\n- `libshaderc_util/`: a utility library used by multiple shaderc components\n- `third_party/`: third party open source packages; see below\n- `utils/`: utility scripts for Shaderc\n\nShaderc depends on glslang, the Khronos reference compiler for GLSL.\n\nShaderc depends on [SPIRV-Tools][spirv-tools] for assembling, disassembling,\nand transforming SPIR-V binaries.\n\nShaderc depends on the [Google Test](https://github.com/google/googletest)\ntesting framework.\n\nIn the following sections, `$SOURCE_DIR` is the directory you intend to clone\nShaderc into.\n\n## Getting and building Shaderc\n\n**If you only want prebuilt executables or libraries, see the\n[Downloads](#downloads) section.**\n\nThe rest of this section describes how to build Shaderc from sources.\n\nNote: Shaderc assumes Glslang supports HLSL compilation.  The instructions\nbelow assume you\'re building Glslang from sources, and in a subtree\nof `shaderc/third_party`.  In that scenario, Glslang\'s HLSL support\nis automatically enabled.  Shaderc also can be built using a Glslang\nfrom outside the `shaderc/third_party` tree.  In that case you must\nensure that that external Glslang is built with HLSL functionality.\nSee Glslang\'s `ENABLE_HLSL` CMake setting.)\n\n1) Check out the source code:\n\n```sh\ngit clone https://github.com/google/shaderc $SOURCE_DIR\ncd $SOURCE_DIR\n./utils/git-sync-deps\ncd $SOURCE_DIR/\n```\n\n**Note:** The [known-good](https://github.com/google/shaderc/tree/known-good)\nbranch of the repository contains a\n[known_good.json](https://github.com/google/shaderc/blob/known-good/known_good.json)\nfile describing a set of repo URLs and specific commits that have been\ntested together.  This information is updated periodically, and typically\nmatches the latest update of these sources in the development branch\nof the Android NDK.\nThe `known-good` branch also contains a\n[update_shaderc.py](https://github.com/google/shaderc/blob/known-good/update_shaderc_sources.py)\nscript that will read the JSON file and checkout those specific commits for you.\n\n2) Ensure you have the requisite tools -- see the tools subsection below.\n\n3) Decide where to place the build output. In the following steps, we\'ll call it\n   `$BUILD_DIR`. Any new directory should work. We recommend building outside\n   the source tree, but it is also common to build in a (new) subdirectory of\n   `$SOURCE_DIR`, such as `$SOURCE_DIR/build`.\n\n4a) Build (and test) with Ninja on Linux or Windows:\n\n```sh\ncd $BUILD_DIR\ncmake -GNinja -DCMAKE_BUILD_TYPE={Debug|Release|RelWithDebInfo} $SOURCE_DIR\nninja\nctest # optional\n```\n\n4b) Or build (and test) with MSVC on Windows:\n\n```sh\ncd $BUILD_DIR\ncmake $SOURCE_DIR\ncmake --build . --config {Release|Debug|MinSizeRel|RelWithDebInfo}\nctest -C {Release|Debug|MinSizeRel|RelWithDebInfo}\n```\n\n4c) Or build with MinGW on Linux for Windows:\n(Skip building threaded unit tests due to\n[Googletest bug 606](https://github.com/google/googletest/issues/606))\n\n```sh\ncd $BUILD_DIR\ncmake -GNinja -DCMAKE_BUILD_TYPE={Debug|Release|RelWithDebInfo} $SOURCE_DIR \\\n   -DCMAKE_TOOLCHAIN_FILE=$SOURCE_DIR/cmake/linux-mingw-toolchain.cmake \\\n   -Dgtest_disable_pthreads=ON\nninja\n```\n\nAfter a successful build, you should have a `glslc` executable somewhere under\nthe `$BUILD_DIR/glslc/` directory, as well as a `libshaderc` library somewhere\nunder the `$BUILD_DIR/libshaderc/` directory.\n\nThe default behavior on MSVC is to link with the static CRT. If you would like\nto change this behavior `-DSHADERC_ENABLE_SHARED_CRT` may be passed on the\ncmake configure line.\n\nSee [the libshaderc README](libshaderc/README.md) for more on using the library\nAPI in your project.\n\n### Tools you\'ll need\n\nFor building, testing, and profiling Shaderc, the following tools should be\ninstalled regardless of your OS:\n\n- [CMake](http://www.cmake.org/): for generating compilation targets.\n- [Python 3](http://www.python.org/): for utility scripts and running the test suite.\n\nOn Linux, the following tools should be installed:\n\n- [`gcov`](https://gcc.gnu.org/onlinedocs/gcc/Gcov.html): for testing code\n    coverage, provided by the `gcc` package on Ubuntu.\n- [`lcov`](http://ltp.sourceforge.net/coverage/lcov.php): a graphical frontend\n    for `gcov`, provided by the `lcov` package on Ubuntu.\n- [`genhtml`](http://linux.die.net/man/1/genhtml): for creating reports in html\n    format from `lcov` output, provided by the `lcov` package on Ubuntu.\n\nOn Linux, if cross compiling to Windows:\n- [`mingw`](http://www.mingw.org): A GCC-based cross compiler targeting Windows\n    so that generated executables use the Micrsoft C runtime libraries.\n\nOn Windows, the following tools should be installed and available on your path:\n\n- Visual Studio 2013 Update 4 or later. Previous versions of Visual Studio\n  will likely work but are untested.\n- Git - including the associated tools, Bash, `diff`.\n\nOptionally, the following tools may be installed on any OS:\n\n - [`asciidoctor`](http://asciidoctor.org/): for generating documentation.\n   - [`pygments.rb`](https://rubygems.org/gems/pygments.rb) required by\n     `asciidoctor` for syntax highlighting.\n\n### Building and running Shaderc using Docker\n\nPlease make sure you have the Docker engine\n[installed](https://docs.docker.com/engine/installation/) on your machine.\n\nTo create a Docker image containing Shaderc command line tools, issue the\nfollowing command in `${SOURCE_DIR}`: `docker build -t <IMAGE-NAME> .`.\nThe created image will have all the command line tools installed at\n`/usr/local` internally, and a data volume mounted at `/code`.\n\nAssume `<IMAGE-NAME>` is `shaderc/shaderc` from now on.\n\nTo invoke a tool from the above created image in a Docker container:\n\n```bash\ndocker run shaderc/shaderc glslc --version\n```\n\nAlternatively, you can mount a host directory (e.g., `example`) containing\nthe shaders you want to manipulate and run different kinds of tools via\nan interactive shell in the container:\n\n```bash\n$ docker run -i -t -v `pwd`/example:/code shaderc/shaderc\n/code $ ls\ntest.vert\n/code $ glslc -c -o - test.vert | spirv-dis\n```\n\n### Building spvc\n\nThe value `SHADERC_ENABLE_SPVC` in `CMakeLists.txt` must be set to `ON` to\nenable building `spvc`.\n\nThis can be achieved by either editing the file in your checkout, or passing\n`-DSHADERC_ENABLE_SPVC=ON` to `cmake` to set the value.\n\n## Bug tracking\n\nWe track bugs using GitHub -- click on the "Issues" button on\n[the project\'s GitHub page](https://github.com/google/shaderc).\n\n## Test coverage\n\nOn Linux, you can obtain test coverage as follows:\n\n```sh\ncd $BUILD_DIR\ncmake -GNinja -DCMAKE_BUILD_TYPE=Debug -DENABLE_CODE_COVERAGE=ON $SOURCE_DIR\nninja\nninja report-coverage\n```\n\nThen the coverage report can be found under the `$BUILD_DIR/coverage-report`\ndirectory.\n\n## Bindings\n\nBindings are maintained by third parties, may contain content\noffered under a different license, and may reference or contain\nolder versions of Shaderc and its dependencies.\n\n* **Python:** [pyshaderc][pyshaderc]\n* **Rust:** [shaderc-rs][shaderc-rs]\n\n[khr-glslang]: https://github.com/KhronosGroup/glslang\n[spirv-tools]: https://github.com/KhronosGroup/SPIRV-Tools\n[spirv-cross]: https://github.com/KhronosGroup/SPIRV-Cross\n[pyshaderc]: https://github.com/realitix/pyshaderc\n[shaderc-rs]: https://github.com/google/shaderc-rs\n[appveyor]: https://ci.appveyor.com/project/dneto0/shaderc\n[dawn]: https://dawn.googlesource.com/dawn\n'