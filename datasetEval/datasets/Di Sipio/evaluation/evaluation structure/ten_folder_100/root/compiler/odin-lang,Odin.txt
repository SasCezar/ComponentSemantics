b'<p align="center">\n    <img src="misc/logo-slim.png" alt="Odin logo" height="120">\n    <br/>\n    A fast, concise, readable, pragmatic and open sourced programming language.\n    <br/>\n    <br/>\n    <a href="https://github.com/odin-lang/odin/releases/latest">\n        <img src="https://img.shields.io/github/release/odin-lang/odin.svg">\n    </a>\n    <a href="https://github.com/odin-lang/odin/releases/latest">\n        <img src="https://img.shields.io/badge/platforms-Windows%20|%20Linux%20|%20macOS-green.svg">\n    </a>\n    <br>\n    <a href="https://discord.gg/hnwN2Rj">\n        <img src="https://img.shields.io/discord/568138951836172421?logo=discord">\n    </a>\n    <a href="https://github.com/odin-lang/odin/actions">\n        <img src="https://github.com/odin-lang/odin/workflows/CI/badge.svg?branch=master&event=push">\n    </a>\n</p>\n\n# The Odin Programming Language\n\nThe Odin programming language is fast, concise, readable, pragmatic and open sourced. It is designed with the intent of replacing C with the following goals:\n* simplicity\n* high performance\n* built for modern systems\n* joy of programming\n\nWebsite: [https://odin-lang.org/](https://odin-lang.org/)\n\n```go\npackage main\n\nimport "core:fmt"\n\nmain :: proc() {\n\tprogram := "+ + * \xf0\x9f\x98\x83 - /";\n\taccumulator := 0;\n\n\tfor token in program {\n\t\tswitch token {\n\t\tcase \'+\': accumulator += 1;\n\t\tcase \'-\': accumulator -= 1;\n\t\tcase \'*\': accumulator *= 2;\n\t\tcase \'/\': accumulator /= 2;\n\t\tcase \'\xf0\x9f\x98\x83\': accumulator *= accumulator;\n\t\tcase: // Ignore everything else\n\t\t}\n\t}\n\n\tfmt.printf("The program \\"%s\\" calculates the value %d\\n",\n\t           program, accumulator);\n}\n\n```\n\n\n## Documentation\n\n#### [Getting Started](https://odin-lang.org/docs/install)\n\nInstructions for downloading and install the Odin compiler and libraries.\n\n### Learning Odin\n\n#### [Overview of Odin](https://odin-lang.org/docs/overview)\n\nAn overview of the Odin programming language.\n\n#### [Frequently Asked Questions (FAQ)](https://odin-lang.org/docs/faq)\n\nAnswers to common questions about Odin.\n\n#### [The Odin Wiki](https://github.com/odin-lang/Odin/wiki)\n\nA wiki maintained by the Odin community.\n\n#### [Odin Discord](https://discord.gg/sVBPHEv)\n\nGet live support and talk with other odiners on the Odin Discord.\n\n### References\n\n#### [Language Specification](https://odin-lang.org/ref/spec)\n\nThe official Odin Language specification.\n\n### Articles\n\n#### [The Odin Blog](https://odin-lang.org/blog)\n\nThe official blog of the Odin programming language, featuring announcements, news, and in-depth articles by the Odin team and guests.\n\n## Setup\n\nOdin only supports x86-64 at the moment (64-bit), relies on LLVM for code generation and an external linker.\n\nIn addition, the following platform-specific steps are necessary:\n\n- Windows\n    * Have Visual Studio installed (MSVC 2010 or later, for the linker)\n    * Have a copy of `opt.exe` and `llc.exe` in `Odin/bin`. Pre-built Windows binaries can be found [here](https://github.com/odin-lang/Odin/releases/tag/llvm-windows) and *must* be explicitly copied\n    * Open a valid command prompt:\n        * **Basic:** run the `x64 Native Tools Command Prompt for VS2017` shortcut bundled with VS 2017, or\n        * **Advanced:** run `vcvarsall.bat x64` from a blank `cmd` session\n\n- MacOS\n    * Have LLVM explicitly installed (`brew install llvm`)\n    * Have XCode installed (version X.X or later, for linking)\n    * Make sure the LLVM binaries and the linker are added to your `$PATH` environmental variable\n\n- GNU/Linux\n    * Have LLVM installed (opt/llc)\n    * Have Clang installed (version X.X or later, for linking)\n    * Make sure the LLVM binaries and the linker are added to your `$PATH` environmental variable\n\nThen build the compiler by calling `build.bat` (Windows) or `make` (Linux/MacOS). This will automatically run the demo program if successful.\n\n**Notes for Linux:**: The compiler currently relies on the `core` and `shared` library collection being relative to the compiler executable. Installing the compiler in the usual sense (to `/usr/local/bin` or similar) is therefore not as straight forward as you need to make sure the mentioned libraries are available. As a result, it is recommended to simply explicitly invoke the compiler with `/path/to/odin` in your preferred build system, or add `/path/to/odin` to `$PATH`.\n\nPlease read the [Getting Started Guide](https://github.com/odin-lang/Odin/wiki#getting-started-with-odin) for more information.\n\n## Requirements to build and run\n\nPlease read the [Getting Started Guide](https://github.com/odin-lang/Odin/wiki#getting-started-with-odin).\n\n- Windows\n\t* x86-64\n\t* MSVC 2010 installed (C++11 support)\n\t* [LLVM binaries](https://github.com/odin-lang/Odin/releases/tag/llvm-windows) for `opt.exe`, `llc.exe`, and `lld-link.exe`\n\t* Requires MSVC\'s link.exe as the linker\n\t\t* run `vcvarsall.bat` to setup the path\n\n- MacOS\n\t* x86-64\n\t* LLVM explicitly installed (`brew install llvm`)\n\t* XCode installed (for the linker)\n\n- GNU/Linux\n\t* x86-64\n\t* Build tools (ld)\n\t* LLVM installed\n\t* Clang installed (temporary - this is Calling the linker for now)\n\n## Warnings\n\n* This is still highly in development and the language\'s design is quite volatile.\n* Syntax is not fixed.\n\n## Demonstrations:\n* First Talk & Demo\n\t- [Talk](https://youtu.be/TMCkT-uASaE?t=338)\n\t- [Demo](https://youtu.be/TMCkT-uASaE?t=1800)\n\t- [Q&A](https://youtu.be/TMCkT-uASaE?t=5749)\n* [Composition & Refactorability](https://www.youtube.com/watch?v=n1wemZfcbXM)\n* [Introspection, Modules, and Record Layout](https://www.youtube.com/watch?v=UFq8rhWhx4s)\n* [push_allocator & Minimal Dependency Building](https://www.youtube.com/watch?v=f_LGVOAMb78)\n* [when, for & procedure overloading](https://www.youtube.com/watch?v=OzeOekzyZK8)\n* [Context Types, Unexported Entities, Labelled Branches](https://www.youtube.com/watch?v=CkHVwT1Qk-g)\n* [Bit Fields, i128 & u128, Syntax Changes](https://www.youtube.com/watch?v=NlTutcLyF64)\n* [Default and Named Arguments; Explicit Parametric Polymorphism](https://www.youtube.com/watch?v=-XQZE6S6zUU)\n* [Loadsachanges](https://www.youtube.com/watch?v=ar0vFMoMtrI)\n* [Packages, Bit Sets, cstring](https://youtu.be/b8bJbjiXZrQ)\n\t- [Q&A](https://youtu.be/5jmxyIfyyTk)\n\n'