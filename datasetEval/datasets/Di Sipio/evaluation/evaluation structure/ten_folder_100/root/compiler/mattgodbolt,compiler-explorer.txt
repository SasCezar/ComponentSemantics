b"[![Build Status](https://travis-ci.org/mattgodbolt/compiler-explorer.svg?branch=master)](https://travis-ci.org/mattgodbolt/compiler-explorer)\n[![codecov](https://codecov.io/gh/mattgodbolt/compiler-explorer/branch/master/graph/badge.svg)](https://codecov.io/gh/mattgodbolt/compiler-explorer)\n\n![Compiler Explorer](docs/logo.svg)\n\nCompiler Explorer\n------------\n\n**Compiler Explorer** is an interactive compiler. The left-hand pane shows\n editable C, C++, Rust, Go, D, Haskell, Swift, Pascal (and some more!) code.\nThe right, the assembly output of having compiled the code with a given\n compiler and settings. Multiple compilers are supported, and the UI layout\n is configurable (thanks to [GoldenLayout](https://www.golden-layout.com/)).\nThere is also an ispc compiler _[?](https://ispc.github.io/)_ for a C variant\n with extensions for SPMD.\n\nTry out at [godbolt.org](https://godbolt.org)\n\nYou can support [this project on Patreon](https://patreon.com/mattgodbolt).\n\n**Compiler Explorer** follows a [Code of Conduct](CODE_OF_CONDUCT.md) which\n aims to foster an open and welcoming environment.\n\n**Compiler Explorer** was started in 2012 to serve my needs at [my previous employer](https://drw.com) to show how\n C++ constructs translated to assembly code. It started out as a `tmux` session with `vi` running in one\n pane and `watch gcc -S foo.cc -o -` running in the other.\nSince then, it has become a public website serving around 140,000 compilations per day.\n\n##### FAQ\n\nThere is now a FAQ section [in the repository wiki](https://github.com/mattgodbolt/compiler-explorer/wiki/FAQ).\n If your question is not present, please contact us as described below so we can help you.\n If you find that the FAQ is lacking some important point, please free to contribute to it and/or ask us to clarify it.\n\nThere are a number of videos that showcase some of the features of Compiler Explorer:\n A presentation for CppCon 2019 about the project https://www.youtube.com/watch?v=kIoZDUd5DKw\n and an older 2 part series of videos which go into a bit more detail into the more obscure features\n https://www.youtube.com/watch?v=4_HL3PH4wDg\n\n##### Contact us\n\nFor general discussion, please join the\n [cpplang](https://cpplang.now.sh/) slack channel `#compiler_explorer` or\n [the public mailing list](https://groups.google.com/forum/#!forum/compiler-explorer-discussion)\n\nIf you are interested in developing, or want to see the discussions between\n existing developers, feel free to join the [cpplang](https://cpplang.now.sh/)\n slack channel `#compiler_explorer-development` or\n [the development mailing list](https://groups.google.com/forum/#!forum/compiler-explorer-development)\n \nFeel free to raise an issue on\n [github](https://github.com/mattgodbolt/compiler-explorer/issues) or\n [email Matt directly](mailto:matt@godbolt.org) for more help.\n\n### Developing\n\n**Compiler Explorer** is written in [Node.js](https://nodejs.org/).\n\nAssuming you have a compatible version of `node` installed, simply running\n `make` ought to get you up and running with an Explorer running on port 10240\n on your local machine: http://localhost:10240/.\n Currently **Compiler Explorer**\n [requires the latest LTS](CONTRIBUTING.md#node-version) `node` version\n (_v10_) installed, either on the path or at `NODE_DIR`\n (an environment variable or `make` parameter).\n\nRunning with `make EXTRA_ARGS='--language LANG'` will allow you to load\n `LANG` exclusively, where `LANG` is one for the language ids/aliases defined\n in `lib/languages.js`. The `Makefile` will automatically install all the\n third party libraries needed to run; using `npm` to install server-side and\n client side components.\n\nSome languages need extra tools to demangle them, e.g. `rust`, `d`, or `haskell`.\n Such tools are kept separately in the\n [tools repo](https://github.com/mattgodbolt/compiler-explorer-tools).\n\nThe config system leaves a lot to be desired.\n [Work has been done](https://github.com/rabsrincon/ccs-js) on porting\n [CCS](https://github.com/hellige/ccs-cpp) to Javascript and then something\n more rational can be used.\n\n\nA [Road map](Roadmap.md) is available which gives a little insight into\n the future plans for **Compiler Explorer**.\n\n### Running a local instance\n\nIf you want to point it at your own GCC or similar binaries, either edit the\n `etc/config/LANG.defaults.properties` or else make a new one with\n the name `LANG.local.properties`, substituting `LANG` as needed.\n `*.local.properties` files have the highest priority when loading properties.\n\nWhen running in a corporate setting the URL shortening service can be replaced\n by an internal one if the default storage driver isn't appropriate for your\n environment. To do this, add a new module in `lib/shortener-myservice.js` and\n set the `urlShortenService` variable in configuration. This module should\n export a single function, see the [tinyurl module](lib/shortener-tinyurl.js)\n for an example.\n\n### RESTful API\n\nThere's a simple restful API that can be used to do compiles to asm and to\n list compilers. \n\nYou can find the API documentation [here](docs/API.md).\n\n### Credits\n\n**Compiler Explorer** is maintained by the awesome people listed in the\n [AUTHORS](AUTHORS.md) file.\n\nWe would like to thank the contributors listed in the\n [CONTRIBUTORS](CONTRIBUTORS.md) file, who have helped shape **Compiler Explorer**.\n\n\nWe would also like to specially thank these people for their contributions to\n **Compiler Explorer**:\n- [Gabriel Devillers](https://github.com/voxelf)\n (_while working for [Kalray](http://www.kalrayinc.com/)_)\n- [Johan Engelen](https://github.com/JohanEngelen)\n- [Joshua Sheard](https://github.com/jsheard)\n- [Marc Poulhi\xc3\xa8s](https://github.com/dkm)\n- [Andrew Pardoe](https://github.com/AndrewPardoe)\n\nWe would like to thank [JetBrains](https://www.jetbrains.com/) for their support\n and for donating licenses to their excellent products to develop **Compiler Explorer**.\n\n![JetBrains](docs/jetbrains.svg)\n"