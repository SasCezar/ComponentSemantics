b'# JSCL \n\n[![Build Status](https://travis-ci.org/jscl-project/jscl.svg?branch=master)](https://travis-ci.org/jscl-project/jscl)\n\nJSCL is a Common Lisp to Javascript compiler, which is bootstrapped\nfrom Common Lisp and executed from the browser.\n\n<p align="center">\n  <a href="https://jscl-project.github.io/">\n    <img src="logo/logo-128.png" alt="JSCL" title="JSCL" height="128" />\n  </a>\n</p>\n\n\n## Getting Started\n\nYou can try a demo online [here](https://jscl-project.github.io/), or\nyou can install the JSCL npm package:\n\n    npm install -g jscl\n    \nto run `jscl-repl` in NodeJS.\n\n\n## Build\n\nIf you want to hack JSCL, you will have to download the repository\n\n    git clone https://github.com/jscl-project/jscl.git\n\n*load* `jscl.lisp` in your Lisp, and call the bootstrap function to\ncompile the implementation itself:\n\n    (jscl:bootstrap)\n\nIt will generate a `jscl.js` file in the top of the source tree. Now\nyou can open `jscl.html` in your browser and use it.\n\n\n## Status\n\nJSCL is and will be a subset of Common Lisp. Of course it is far from\ncomplete, but it supports partially most common special operators,\nfunctions and macros. In particular:\n\n- Multiple values\n\n- Explicit control tranfers\n  [tagbody](http://www.lispworks.com/documentation/HyperSpec/Body/s_tagbod.htm)\n  and [go](http://www.lispworks.com/documentation/HyperSpec/Body/s_go.htm)\n\n- Static and dynamic non local exit [catch](http://www.lispworks.com/documentation/HyperSpec/Body/s_catch.htm), \n  [throw](http://www.lispworks.com/documentation/HyperSpec/Body/s_throw.htm); \n  [block](http://www.lispworks.com/documentation/HyperSpec/Body/s_block.htm),\n  [return-from](http://www.lispworks.com/documentation/HyperSpec/Body/s_ret_fr.htm).\n\n- Lexical and special variables. However, declare expressions are\n  missing, but you can *proclaim* special variables.\n\n- Optional and keyword arguments\n\n- SETF places\n\n- Packages\n\n- The `LOOP` macro\n\n- CLOS\n\n- Others\n\nThe compiler is very verbose, some simple optimizations or\n*minification* could help to deal with it.\n\nMost of the above features are incomplete. The major features that are still missing are:\n\n- The `format` function\n\n*Feel free to hack it yourself*\n'