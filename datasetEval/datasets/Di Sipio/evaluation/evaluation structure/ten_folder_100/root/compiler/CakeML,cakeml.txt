b'The CakeML project: https://cakeml.org\n======================================\n\nCakeML is a verified implementation of a significant subset of\nStandard ML.\n\nThe source and proofs for CakeML are developed in the [HOL4 theorem\nprover](http://hol-theorem-prover.org). We use the latest development\nversion of [HOL4](https://github.com/HOL-Theorem-Prover/HOL), which we\nbuild on [PolyML 5.7](http://www.polyml.org).\nExample build instructions can be found in\n[build-instructions.sh](build-instructions.sh).\n\nBuilding all of CakeML (including the bootstrapped compiler and its proofs)\nrequires significant resources. [Built copies](https://cakeml.org/download) of\nthe compiler and resource usage for our\n[regression tests](https://cakeml.org/regression.cgi) are online.\n\nThe [master](../../tree/master) branch contains the latest development\nversion of CakeML. See the [version2](../../tree/version2) or\n[version1](../../tree/version1) branch for previous versions.\n\nDirectory structure\n-------------------\n\n[COPYING](COPYING):\nCakeML Copyright Notice, License, and Disclaimer.\n\n[basis](basis):\nContains the beginnings of a standard basis library for CakeML,\nsimilar to the standard basis library of SML.\n\n[build-instructions.sh](build-instructions.sh):\nThis file describes how to install Poly/ML, HOL and CakeML.\n\n[candle](candle):\nVerification of a HOL theorem prover, based on HOL Light\n(http://www.cl.cam.ac.uk/~jrh13/hol-light/), implemented in CakeML.\n\n[characteristic](characteristic):\nA verified CakeML adaption of Arthur Chargu\xc3\xa9raud\'s "Characteristic\nFormulae for the Verification of Imperative Programs"\n\n[compiler](compiler):\nA verified compiler for CakeML, including:\n - lexing and PEG parsing,\n - type inference,\n - compilation to ASM assembly language, and,\n - code generation to x86, ARM, and more.\n\n[developers](developers):\nThis directory contains scripts for automating routine tasks, e.g., for\ngenerating README.md files.\n\n[examples](examples):\nExamples of verified programs built using CakeML infrastructure.\n\n[how-to.md](how-to.md):\nThis document introduces how to use the CakeML compiler, providing in\nparticular:\n\n- a description of how to invoke the CakeML compiler,\n- a list of how CakeML differs from SML and OCaml, and,\n- a number of small CakeML code examples.\n\n[misc](misc):\nAuxiliary files providing glue between a standard HOL installation\nand what we want to use for CakeML development.\n\n[semantics](semantics):\nThe definition of the CakeML language. The definition is (mostly) expressed in\n[Lem](https://www.cl.cam.ac.uk/~pes20/lem), but the generated HOL is included.\nThe directory includes definitions of:\n - the concrete syntax,\n - the abstract syntax,\n - big step semantics (both functional and relational),\n - a small step semantics,\n - the semantics of FFI calls, and,\n - the type system.\n\n[translator](translator):\nA proof-producing translator from HOL functions to CakeML.\n\n[tutorial](tutorial):\nAn extended worked example on using HOL and CakeML to write verified programs,\nthat was presented as a tutorial on CakeML at PLDI and ICFP in 2017.\n\n[unverified](unverified):\nVarious unverified tools, e.g. tools for converting OCaml to CakeML\nand an SML version of the CakeML register allocator.\n'