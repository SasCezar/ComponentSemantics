b'<!--\n| Announcement                                                        |\n| :--: |\n| &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp; Version **8.0.0** is now released, read the [ANNOUNCEMENT](./orga/releases/8.0.0.md) &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp; |\n-->\n\n<p align="center">\n  <a href="https://github.com/pubkey/rxdb">\n    <img src="https://cdn.rawgit.com/pubkey/rxdb/ba7c9b80/docs/files/logo/logo_text.svg" width="380px" />\n  </a>\n</p>\n\n<h1 align="center">RxDB</h1>\n<p align="center">\n  <strong>A realtime Database for JavaScript Applications</strong>\n</p>\n\n<p align="justify">\n  RxDB (short for <b>R</b>eactive <b>D</b>ata<b>b</b>ase) is a NoSQL-database for JavaScript Applications like Websites, hybrid Apps, Electron-Apps and NodeJs.\n  Reactive means that you can query the current state and <b>subscribe</b> to all state-changes, such as the result of a query or even a single field of a document.\n  This is useful for <b>UI-based</b> apps that always display the realtime state to the user.\n    RxDB can do a realtime replication with any <b>CouchDB</b> compliant endpoint and also with <b>GraphQL</b> endpoints.\n</p>\n\n\n<div align="center">\n  <h3>\n    <a href="https://rxdb.info/">Documentation</a>\n    <span> | </span>\n    <a href="https://github.com/pubkey/rxdb/tree/master/examples">Example-Projects</a>\n  </h3>\n</div>\n\n<p align="center">\n  <a href="https://gitter.im/pubkey/rxdb">\n    <img src="https://cdn.rawgit.com/pubkey/rxdb/master/docs-src/files/gitter.svg" />\n  </a>\n  <a href="https://twitter.com/intent/follow?screen_name=rxdbjs">\n      <img src="https://img.shields.io/twitter/follow/rxdbjs.svg?style=social&logo=twitter"\n          alt="follow on Twitter"></a>\n  </a>\n<!--  <a href="https://www.patreon.com/rxdb">\n    <img src="https://cdn.rawgit.com/pubkey/rxdb/4e7dd18f/docs/files/icons/patreon.png" width="111px" />\n  </a> -->\n</p>\n\n<br/>\n\n\n![reactive.gif](docs-src/files/realtime.gif)\n\n\n* * *\n\n\n|     | **Features**                                                                                                                                                                                                                            |\n| --- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| \xf0\x9f\x92\xbb\xf0\x9f\x93\xb1  | **Multiplatform support** for browsers, nodejs, electron, cordova, react-native and every other javascript-runtime                                                                                                                      |\n| \xf0\x9f\x93\xa8 | **Reactive** data-handling based on [RxJS](https://github.com/ReactiveX/rxjs)                                                                                                                                                           |\n| \xf0\x9f\x9a\xa3 | **Offline first** let your app still work when the users has no internet                                          \n| \xf0\x9f\x94\x84  | **Replication** between client and server-data, compatible with ![pouchdb](docs-src/files/icons/pouchdb.png)PouchDB, ![couchdb](docs-src/files/icons/couchdb.png)CouchDB and ![cloudant](docs-src/files/icons/cloudant.png)IBM Cloudant. There is also a plugin for a **GraphQL replication** |\n| \xf0\x9f\x93\x84  | **Schema-based** with the easy-to-learn standard of [json-schema](https://json-schema.org/)                                                                                                                                                                        |\n| \xf0\x9f\x8d\x8a  | **Mango-Query** exactly like you know from mongoDB and mongoose  <!-- IMPORTANT: It is really called \'mango\' query, do not make a PR to fix this \'typo\' https://github.com/cloudant/mango -->                                                                                                                    |\n| \xf0\x9f\x94\x90  | **Encryption** of single data-fields to protect your users data                                                                                                                                                                         |\n| \xf0\x9f\x93\xa4\xf0\x9f\x93\xa5  | **Import/Export** of the database-state (json), awesome for coding with [TDD](https://en.wikipedia.org/wiki/Test-driven_development)                                                                                                    |\n| \xf0\x9f\x93\xa1  | **Multi-Window** to synchronise data between different browser-windows or nodejs-processes                                                                                                                                              |\n| \xf0\x9f\x92\x85 | **ORM-capabilities** to easily handle data-code-relations and customize functions of documents and collections                                                                                                                                                                               |\n| \xf0\x9f\x94\xb7  | Full **TypeScript** support for fast and secure coding                                                                                                                                              |\n\n## Platform-support\n\nRxDB is made so that you can use **exactly the same code** at\n\n-   ![Chrome](https://cdnjs.cloudflare.com/ajax/libs/browser-logos/39.2.2/chrome/chrome_24x24.png)\n    ![Firefox](https://cdnjs.cloudflare.com/ajax/libs/browser-logos/39.2.2/firefox/firefox_24x24.png)\n    ![Safari](https://cdnjs.cloudflare.com/ajax/libs/browser-logos/39.2.2/safari/safari_24x24.png)\n    ![Edge](https://cdnjs.cloudflare.com/ajax/libs/browser-logos/39.2.2/edge/edge_24x24.png)\n    ![Internet Explorer 11](https://cdnjs.cloudflare.com/ajax/libs/browser-logos/39.2.2/archive/internet-explorer_9-11/internet-explorer_9-11_24x24.png) Browsers\n-   ![NodeJS](docs-src/files/icons/nodejs.png) [NodeJS](https://nodejs.org/en/)\n-   ![electron](docs-src/files/icons/electron.png) [Electron](https://electronjs.org/)\n-   ![react-native](docs-src/files/icons/react-native.png) [React-Native](https://facebook.github.io/react-native/)\n-   ![cordova](docs-src/files/icons/cordova.png) [Cordova/Phonegap](https://cordova.apache.org/)\n\nWe optimized, double-checked and made boilerplates so you can directly start to use RxDB with frameworks like\n\n-   ![react](docs-src/files/icons/react.png) [React](https://reactjs.org/)\n-   ![angular](docs-src/files/icons/angular.png) [Angular/ng2](https://angular.io/)\n-   ![ionic](docs-src/files/icons/ionic.png) [Ionic2](https://ionicframework.com/)\n-   ![vuejs](docs-src/files/icons/vuejs.png) [Vuejs](https://vuejs.org/)\n\n## Quickstart\n\n### Installation:\n\n```sh\nnpm install rxdb --save\n\n# peerDependencies\nnpm install rxjs --save\n```\n\n### Import:\n\n<details>\n  <summary>ES7</summary>\n\n```javascript\nimport RxDB from \'rxdb\';\nconst db = await RxDB.create({\n    name: \'heroesdb\',\n    adapter: \'websql\',\n    password: \'myLongAndStupidPassword\', // optional\n    multiInstance: true                  // default: true\n  });                                                       // create database\n\nawait db.collection({name: \'heroes\', schema: mySchema});    // create collection\ndb.heroes.insert({ name: \'Bob\' });                          // insert document\n```\n\n</details>\n\n<details>\n  <summary>ES5</summary>\n\n```javascript\nvar RxDB = require(\'rxdb\');\nRxDB.create({\n    name: \'heroesdb\',\n    adapter: \'websql\',\n    password: \'myLongAndStupidPassword\', // optional\n    multiInstance: true                  // default: true\n  })                                                                              // create database\n  .then(function(db) {return db.collection({name: \'heroes\', schema: mySchema});}) // create collection\n  .then(function(collection) {collection.insert({name: \'Bob\'});})                 // insert document\n```\n\n</details>\n\n## Feature-Showroom (click to toggle)\n\n<details>\n<summary>\n  <b>Mango-Query</b>\n  <p>\n\nTo find data in your collection, use the [mquery](https://github.com/aheckmann/mquery) api to create chained mango-queries, which you maybe know from **mongoDB** or **mongoose**.\n\n  </p>\n</summary>\n\n```javascript\nmyCollection\n  .find()\n  .where(\'name\').ne(\'Alice\')\n  .where(\'age\').gt(18).lt(67)\n  .limit(10)\n  .sort(\'-age\')\n  .exec().then( docs => {\n    console.dir(docs);\n  });\n```\n\n</details>\n\n<details>\n<summary>\n  <b>Reactive</b>\n  <p>\n\nRxDB implements [rxjs](https://github.com/ReactiveX/rxjs) to make your data reactive.\nThis makes it easy to always show the real-time database-state in the dom without manually re-submitting your queries.</p>\n\n</summary>\n\n```javascript\ndb.heroes\n  .find()\n  .sort(\'name\')\n  .$ // <- returns observable of query\n  .subscribe( docs => {\n    myDomElement.innerHTML = docs\n      .map(doc => \'<li>\' + doc.name + \'</li>\')\n      .join();\n  });\n```\n\n![reactive.gif](docs-src/files/reactive.gif)\n\n</details>\n\n<details>\n<summary>\n  <b>MultiWindow/Tab</b>\n  <p>\n\nWhen two instances of RxDB use the same storage-engine, their state and action-stream will be broadcasted.\nThis means with two browser-windows the change of window #1 will automatically affect window #2. This works completely offline.\n\n</p>\n</summary>\n\n![multiwindow.gif](docs-src/files/multiwindow.gif)\n\n</details>\n\n<details>\n<summary>\n  <b>Replication</b>\n  <p>\n\nBecause RxDB relies on glorious [PouchDB](https://github.com/pouchdb/pouchdb), it is easy to replicate\nthe data between devices and servers. And yes, the changeEvents are also synced.</p>\n\n</summary>\n\n![sync.gif](docs-src/files/sync.gif)\n\n</details>\n\n<details>\n<summary>\n  <b>Schema</b>\n  <p>\n\nSchemas are defined via [jsonschema](http://json-schema.org/) and are used to describe your data.</p>\n\n</summary>\n\n```javascript\nconst mySchema = {\n    title: "hero schema",\n    version: 0,                 // <- incremental version-number\n    description: "describes a simple hero",\n    type: "object",\n    properties: {\n        name: {\n            type: "string",\n            primary: true       // <- this means: unique, required, string and will be used as \'_id\'\n        },\n        secret: {\n            type: "string",\n            encrypted: true     // <- this means that the value of this field is stored encrypted\n        },\n        skills: {\n            type: "array",\n            maxItems: 5,\n            uniqueItems: true,\n            item: {\n                type: "object",\n                properties: {\n                    name: {\n                        type: "string"\n                    },\n                    damage: {\n                        type: "number"\n                    }\n                }\n            }\n        }\n    },\n    required: ["color"]\n};\n```\n\n</details>\n\n<details>\n<summary>\n  <b>Encryption</b>\n  <p>\n\nBy setting a schema-field to `encrypted: true`, the value of this field will be stored in encryption-mode and can\'t be read without the password. Of course you can also encrypt nested objects. Example:</p>\n\n</summary>\n\n```json\n"secret": {\n  "type": "string",\n  "encrypted": true\n}\n```\n\n</details>\n\n<details>\n<summary>\n  <b>Level-adapters</b>\n  <p>\n\nThe underlying pouchdb can use different <a href="https://pouchdb.com/adapters.html">adapters</a> as storage engine. So you can use RxDB in different environments by just switching the adapter.\nFor example you can use websql in the browser, localstorage in mobile-browsers and a leveldown-adapter in nodejs.</p>\n\n</summary>\n\n```js\n// this requires the indexeddb-adapter\nRxDB.plugin(require(\'pouchdb-adapter-idb\'));\n// this creates a database with the indexeddb-adapter\nconst database = await RxDB.create({\n    name: \'mydatabase\',\n    adapter: \'idb\' // the name of your adapter\n});\n```\n\nThere is a [big ecosystem](https://rxdb.info/adapters.html) of adapters you can use.\n    </details>\n\n<details>\n<summary>\n  <b>Import / Export</b>\n  <p>\n\nRxDB lets you import and export the whole database or single collections into json-objects. This is helpful to trace bugs in your application or to move to a given state in your tests.</p>\n\n</summary>\n\n```js\n// export a single collection\nconst jsonCol = await myCollection.dump();\n\n// export the whole database\nconst jsonDB = await myDatabase.dump();\n\n// import the dump to the collection\nawait emptyCollection.importDump(json);\n\n\n// import the dump to the database\nawait emptyDatabase.importDump(json);\n```\n\n</details>\n\n<details>\n<summary>\n  <b>Leader-Election</b>\n  <p>\n\nImagine your website needs to get a piece of data from the server once every minute. To accomplish this task\nyou create a websocket or pull-interval. If your user now opens the site in 5 tabs parallel, it will run the interval\nor create the socket 5 times. This is a waste of resources which can be solved by RxDB\'s LeaderElection.</p>\n\n</summary>\n\n```js\nmyRxDatabase.waitForLeadership()\n  .then(() => {\n      // this will only run when the instance becomes leader.\n      mySocket = createWebSocket();\n  });\n```\n\nIn this example the leader is marked with the crown \xe2\x99\x9b\n\n![reactive.gif](docs-src/files/leader-election.gif)\n\n</details>\n\n<details>\n<summary>\n  <b>Key-Compression</b>\n  <p>\n\nDepending on which adapter and in which environment you use RxDB, client-side storage is [limited](https://pouchdb.com/2014/10/26/10-things-i-learned-from-reading-and-writing-the-pouchdb-source.html) in some way or the other. To save disc-space, RxDB has an internal schema-based key-compression to minimize the size of saved documents.</p>\n\n</summary>\n\nExample:\n\n```js\n// when you save an object with big keys\nawait myCollection.insert({\n  firstName: \'foo\'\n  lastName:  \'bar\'\n  stupidLongKey: 5\n});\n\n// RxDB will internally transform it to\n{\n  \'|a\': \'foo\'\n  \'|b\':  \'bar\'\n  \'|c\': 5\n}\n\n// so instead of 46 chars, the compressed-version has only 28\n// the compression works internally, so you can of course still access values via the original key.names\nconsole.log(myDoc.firstName);\n// \'foo\'\n```\n\n</details>\n\n<details>\n<summary>\n  <b>QueryChangeDetection</b>\n  <p>\n    Similar to Meteors <a href="https://github.com/meteor/docs/blob/version-NEXT/long-form/oplog-observe-driver.md">oplog-observe-driver</a>,\n    RxDB has a QueryChangeDetection to optimize observed or reused queries. This makes sure that when you update/insert/remove documents,\n    the query does not have to re-run over the whole database but the new results will be calculated from the events. This creates a huge performance-gain\n    with zero cost. The QueryChangeDetection works internally and is currently in <b>beta</b> (disabled by default).\n  </p>\n</summary>\n\n### Use-Case-Example\n\nImagine you have a very big collection with many user-documents. At your page you want to display a toplist with users which have the most `points` and are currently logged in.\nYou create a query and subscribe to it.\n\n```js\nconst query = usersCollection.find().where(\'loggedIn\').eq(true).sort(\'points\');\nquery.$.subscribe(users => {\n    document.querySelector(\'body\').innerHTML = users\n        .reduce((prev, cur) => prev + cur.username+ \'<br/>\', \'\');\n});\n```\n\nAs you may detect, the query can take very long time to run, because you have thousands of users in the collection.\nWhen a user now logs off, the whole query will re-run over the database which takes again very long.\n\n```js\nanyUser.loggedIn = false;\nawait anyUser.save();\n```\n\nBut not with the QueryChangeDetection enabled.\nNow, when one user logs off, it will calculate the new results from the current results plus the RxChangeEvent. This often can be done in-memory without making IO-requests to the storage-engine. The QueryChangeDetection not only works on subscribed queries, but also when you do multiple `.exec()`\'s on the same query.\n\n</details>\n\n## Browser support\n\nAll major evergreen browsers and IE11 are supported. Tests automatically run against Firefox and Chrome, and manually in a VirtualBox for IE11 and Edge.\n\nWe soon will switch to [Browserstack](https://www.browserstack.com/) and run automated tests in all major browsers<br/>\n\n<div align="center">\n    <img src="https://user-images.githubusercontent.com/7760/34738829-7327ddc4-f561-11e7-97e2-2fe0474eaf05.png" width="280px" />\n</div>\n\nAs RxDB heavily relies on PouchDB, see [their browser support](https://pouchdb.com/learn.html#browser_support) for more information. Also do keep in mind that different browsers have different storage limits, especially on mobile devices.\n\n## Getting started\n\nGet started now by [reading the docs](https://rxdb.info/) or exploring the [example-projects](./examples).\n\n## Contribute\n\n[Check out how you can contribute to this project](./docs-src/contribute.md).\n\n## Follow up\n\n-   Follow RxDB on [twitter](https://twitter.com/intent/follow?screen_name=rxdbjs) to not miss the latest enhancements.\n-   Join the chat on [gitter](https://gitter.im/pubkey/rxdb) for discussion.\n\n# Thank you\n\nA big **Thank you** to every [contributor](https://github.com/pubkey/rxdb/graphs/contributors) of this project.\n\n## License\n\n[Apache-2.0](https://github.com/pubkey/rxdb/blob/master/LICENSE.txt)\n'