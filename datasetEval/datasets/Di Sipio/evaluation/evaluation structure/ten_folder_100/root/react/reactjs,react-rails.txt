b'# React-Rails\n\n[![Gem](https://img.shields.io/gem/v/react-rails.svg?style=flat-square)](http://rubygems.org/gems/react-rails)\n[![npm](https://img.shields.io/npm/v/react_ujs.svg?style=flat-square)](https://www.npmjs.com/package/react_ujs)\n[![Build Status](https://img.shields.io/travis/reactjs/react-rails/master.svg?style=flat-square)](https://travis-ci.org/reactjs/react-rails)\n[![Maintainers Wanted](https://img.shields.io/badge/Maintainers-Wanted-red.svg?style=flat-square)]()\n\n\nReact-Rails is a flexible tool to use [React](http://facebook.github.io/react/) with Rails. The benefits:\n* Automatically renders React server-side and client-side\n* Supports Webpacker 4.x, 3.x, 2.x, 1.1+\n* Supports Sprockets 4.x, 3.x, 2.x\n* Lets you use [JSX](http://facebook.github.io/react/docs/jsx-in-depth.html), [ES6](http://es6-features.org/), [TypeScript](https://www.typescriptlang.org/), [CoffeeScript](http://coffeescript.org/)\n\nA source code example utilizing React-Rails: https://github.com/BookOfGreg/react-rails-example-app\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON\'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n## Contents\n\n- [Get started with Webpacker](#get-started-with-webpacker)\n  - [File naming](#file-naming)\n- [Use with Asset Pipeline](#use-with-asset-pipeline)\n  - [Custom JSX Transformer](#custom-jsx-transformer)\n  - [React.js versions](#reactjs-versions)\n- [View Helper](#view-helper)\n    - [Custom View Helper](#custom-view-helper)\n- [UJS](#ujs)\n  - [Mounting & Unmounting](#mounting--unmounting)\n  - [Event Handling](#event-handling)\n  - [`getConstructor`](#getconstructor)\n- [Server-Side Rendering](#server-side-rendering)\n    - [Configuration](#configuration)\n    - [JavaScript State](#javascript-state)\n    - [Custom Server Renderer](#custom-server-renderer)\n- [Controller Actions](#controller-actions)\n- [Component Generator](#component-generator)\n    - [Use with JBuilder](#use-with-jbuilder)\n  - [Camelize Props](#camelize-props)\n- [Upgrading](#upgrading)\n  - [2.3 to 2.4](#23-to-24)\n- [Common Errors](#common-errors)\n  - [During installation](#during-installation)\n  - [Undefined Set](#undefined-set)\n  - [Using TheRubyRacer](#using-therubyracer)\n  - [HMR](#hmr)\n- [Related Projects](#related-projects)\n- [Contributing](#contributing)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n\nAfter reading this README file, additional information about React-Rails can be found in the Wiki page:\nhttps://github.com/reactjs/React-Rails/wiki\nThe Wiki page features a significant amount of additional information about React-Rails which includes instructional articles and answers to the most frequently asked questions.\n\n\n## Get started with Webpacker\n\n[Alternatively, get started with Sprockets](#use-with-asset-pipeline)\n\n[Webpacker](https://github.com/rails/webpacker) provides modern JS tooling for Rails. Here are the listed steps for integrating Webpacker and Rails-React with Rails:\n\n##### 1) Create a new Rails app:\n```\n$ rails new my-app\n$ cd my-app\n```\n\n##### 2) Add `webpacker` and `react-rails` to your gemfile:\n```ruby\ngem \'webpacker\'\ngem \'react-rails\'\n```\n\n##### 3) Now run the installers:\n\n###### Rails 6.x:\n```\n$ bundle install\n$ rails webpacker:install\n$ rails webpacker:install:react\n$ rails generate react:install\n```\nNote: For Rails 6, You don\'t need to add `javascript_pack_tag` as in Step 4. Since its already added by default.\n\n###### Rails 5.x:\n```\n$ bundle install\n$ rails webpacker:install       # OR (on rails version < 5.0) rake webpacker:install\n$ rails webpacker:install:react # OR (on rails version < 5.0) rake webpacker:install:react\n$ rails generate react:install\n```\nThis gives you:\n\n- `app/javascript/components/` directory for your React components\n- [`ReactRailsUJS`](#ujs) setup in `app/javascript/packs/application.js`\n- `app/javascript/packs/server_rendering.js` for [server-side rendering](#server-side-rendering)\n\n##### 4) Link the JavaScript pack in Rails view using `javascript_pack_tag` [helper](https://github.com/rails/webpacker#usage):\n```erb\n<!-- application.html.erb in Head tag below turbolinks -->\n<%= javascript_pack_tag \'application\' %>\n```\n\n##### 5) Generate your first component:\n```\n$ rails g react:component HelloWorld greeting:string\n```\n\n##### 6) You can also generate your component in a subdirectory:\n```\n$ rails g react:component my_subdirectory/HelloWorld greeting:string\n```\nNote: Your component is added to `app/javascript/components/` by default.\n\n\n##### 7) [Render it in a Rails view](#view-helper):\n\n```erb\n<!-- erb: paste this in view -->\n<%= react_component("HelloWorld", { greeting: "Hello from react-rails." }) %>\n```\n\n##### 8) Lets Start the app:\n```\n$ rails s\n```\noutput: greeting: Hello from react-rails", inspect webpage in your browser too see change in tag props.\n\n### Component name\n\nThe component name tells `react-rails` where to load the component. For example:\n\n`react_component` call | component `require`\n-----|-----\n`react_component("Item")` | `require("Item")`\n`react_component("items/index")` | `require("items/index")`\n`react_component("items.Index")` | `require("items").Index`\n`react_component("items.Index.Header")` | `require("items").Index.Header`\n\nThis way, you can access top-level, default, or named exports.\n\nThe `require.context` inserted into `packs/application.js` is used to load components. If you want to load components from a different directory, override it by calling `ReactRailsUJS.useContext`:\n\n```js\nvar myCustomContext = require.context("custom_components", true)\nvar ReactRailsUJS = require("react_ujs")\n// use `custom_components/` for <%= react_component(...) %> calls\nReactRailsUJS.useContext(myCustomContext)\n```\n\nIf `require` fails to find your component, [`ReactRailsUJS`](#ujs) falls back to the global namespace, described in [Use with Asset Pipeline](#use-with-asset-pipeline).\n\n### File naming\n\nReact-Rails supports plenty of file extensions such as: .js, .jsx.js, .js.jsx, .es6.js, .coffee, etcetera!\nSometimes this will cause a stumble when searching for filenames.\n\nComponent File Name | `react_component` call\n-----|-----\n`app/javascript/components/samplecomponent.js` | `react_component("samplecomponent")`\n`app/javascript/components/sample_component.js` | `react_component("sample_component")`\n`app/javascript/components/SampleComponent.js` | `react_component("SampleComponent")`\n`app/javascript/components/SampleComponent.js.jsx` | Has to be renamed to SampleComponent.jsx, then use `react_component("SampleComponent")`\n\n### Typescript support\n\nIf you want to use React-Rails with Typescript, simply run the installer and add @types:\n```\n$ bundle exec rails webpacker:install:typescript\n$ yarn add @types/react @types/react-dom\n```\n\nDoing this will allow React-Rails to support the .tsx extension.\n\n### Test component\n\nYou can use `assert_react_component` to test component render:\n\napp/views/welcome/index.html.erb\n\n```erb\n<%= react_component("HelloWorld", { greeting: "Hello from react-rails.", info: { name: "react-rails" } }, { class: "hello-world" }) %>\n```\n\n```rb\nclass WelcomeControllerTest < ActionDispatch::IntegrationTest\n  test \'assert_react_component\' do\n    get "/welcome"\n    assert_equal 200, response.status\n\n    # assert rendered react component and check the props\n    assert_react_component "HelloWorld" do |props|\n      assert_equal "Hello from react-rails.", props[:greeting]\n      assert_equal "react-rails", props[:info][:name]\n      assert_select "[class=?]", "hello-world"\n    end\n\n    # or just assert component rendered\n    assert_react_component "HelloWorld"\n  end\nend\n```\n\n## Use with Asset Pipeline\n\n`react-rails` provides a pre-bundled React.js & a UJS driver to the Rails asset pipeline. Get started by adding the `react-rails` gem:\n\n```ruby\ngem \'react-rails\'\n```\n\nAnd then install the react generator:\n\n```\n$ rails g react:install\n```\n\nThen restart your development server.\n\nThis will:\n\n- add some `//= require`s to `application.js`\n- add a `components/` directory for React components\n- add `server_rendering.js` for [server-side rendering](#server-side-rendering)\n\nNow, you can create React components in `.jsx` files:\n\n```JSX\n// app/assets/javascripts/components/post.jsx\n\nwindow.Post = createReactClass({\n  render: function() {\n    return <h1>{this.props.title}</h1>\n  }\n})\n\n// or, equivalent:\nclass Post extends React.Component {\n  render() {\n    return <h1>{this.props.title}</h1>\n  }\n}\n```\n\nThen, you can render those [components in views](#view-helper):\n\n```erb\n<%= react_component("Post", {title: "Hello World"}) %>\n```\n\nComponents must be accessible from the top level, but they may be namespaced, for example:\n\n```erb\n<%= react_component("Comments.NewForm", {post_id: @post.id}) %>\n<!-- looks for `window.Comments.NewForm` -->\n```\n\n### Custom JSX Transformer\n\n`react-rails` uses a transformer class to transform JSX in the asset pipeline. The transformer is initialized once, at boot. You can provide a custom transformer to `config.react.jsx_transformer_class`. The transformer must implement:\n\n- `#initialize(options)`, where options is the value passed to `config.react.jsx_transform_options`\n- `#transform(code_string)` to return a string of transformed code\n\n`react-rails` provides two transformers, `React::JSX::BabelTransformer` (which uses [ruby-babel-transpiler](https://github.com/babel/ruby-babel-transpiler)) and `React::JSX::JSXTransformer` (which uses the deprecated `JSXTransformer.js`).\n\n#### Transform Plugin Options\n\nTo supply additional transform plugins to your JSX Transformer, assign them to `config.react.jsx_transform_options`\n\n`react-rails` uses the Babel version of the `babel-source` gem.\n\nFor example, to use `babel-plugin-transform-class-properties` :\n\n    config.react.jsx_transform_options = {\n      optional: [\'es7.classProperties\']\n    }\n\n### React.js versions\n\n`//= require react` brings `React` into your project.\n\nBy default, React\'s [development version] is provided to `Rails.env.development`. You can override the React build with a config:\n\n```ruby\n# Here are the defaults:\n# config/environments/development.rb\nMyApp::Application.configure do\n  config.react.variant = :development\nend\n\n# config/environments/production.rb\nMyApp::Application.configure do\n  config.react.variant = :production\nend\n```\n\nBe sure to restart your Rails server after changing these files. See [VERSIONS.md](https://github.com/reactjs/react-rails/blob/master/VERSIONS.md) to learn which version of React.js is included with your `react-rails` version. In some edge cases you may need to bust the sprockets cache with `rake tmp:clear`\n\n\n## View Helper\n\n`react-rails` includes a view helper and an [unobtrusive JavaScript driver](#ujs) which work together to put React components on the page.\n\nThe view helper (`react_component`) puts a `div` on the page with the requested component class & props. For example:\n\n```erb\n<%= react_component(\'HelloMessage\', name: \'John\') %>\n<!-- becomes: -->\n<div data-react-class="HelloMessage" data-react-props="{&quot;name&quot;:&quot;John&quot;}"></div>\n```\n\nOn page load, the [`react_ujs` driver](#ujs) will scan the page and mount components using `data-react-class`\nand `data-react-props`.\n\nThe view helper\'s signature is:\n\n```ruby\nreact_component(component_class_name, props={}, html_options={})\n```\n\n- `component_class_name` is a string which identifies a component. See [getConstructor](#getconstructor) for details.\n- `props` is either:\n  - an object that responds to `#to_json`; or\n  - an already-stringified JSON object (see [JBuilder note](#use-with-jbuilder) below).\n- `html_options` may include:\n  - `tag:` to use an element other than a `div` to embed `data-react-class` and `data-react-props`.\n  - `prerender: true` to render the component on the server.\n  - `camelize_props` to [transform a props hash](#camelize-props)\n  - `**other` Any other arguments (eg `class:`, `id:`) are passed through to [`content_tag`](http://api.rubyonrails.org/classes/ActionView/Helpers/TagHelper.html#method-i-content_tag).\n\n\n#### Custom View Helper\n\n`react-rails` uses a "helper implementation" class to generate the output of the `react_component` helper. The helper is initialized once per request and used for each `react_component` call during that request. You can provide a custom helper class to `config.react.view_helper_implementation`. The class must implement:\n\n- `#react_component(name, props = {}, options = {}, &block)` to return a string to inject into the Rails view\n- `#setup(controller_instance)`, called when the helper is initialized at the start of the request\n- `#teardown(controller_instance)`, called at the end of the request\n\n`react-rails` provides one implementation, `React::Rails::ComponentMount`.\n\n## UJS\n\n`react-rails`\'s JavaScript is available as `"react_ujs"` in the asset pipeline or from NPM. It attaches itself to the window as `ReactRailsUJS`.\n\n### Mounting & Unmounting\n\nUsually, `react-rails` mounts & unmounts components automatically as described in [Event Handling](#event-handling) below.\n\nYou can also mount & unmount components from `<%= react_component(...) %>` tags using UJS:\n\n```js\n// Mount all components on the page:\nReactRailsUJS.mountComponents()\n// Mount components within a selector:\nReactRailsUJS.mountComponents(".my-class")\n// Mount components within a specific node:\nReactRailsUJS.mountComponents(specificDOMnode)\n\n// Unmounting works the same way:\nReactRailsUJS.unmountComponents()\nReactRailsUJS.unmountComponents(".my-class")\nReactRailsUJS.unmountComponents(specificDOMnode)\n```\n\nYou can use this when the DOM is modified by AJAX calls or modal windows.\n\n### Event Handling\n\n`ReactRailsUJS` checks for various libraries to support their page change events:\n\n- `Turbolinks`\n- `pjax`\n- `jQuery`\n- Native DOM events\n\n`ReactRailsUJS` will automatically mount components on `<%= react_component(...) %>` tags and unmount them when appropriate.\n\nIf you need to re-detect events, you can call `detectEvents`:\n\n```js\n// Remove previous event handlers and add new ones:\nReactRailsUJS.detectEvents()\n```\n\nFor example, if `Turbolinks` is loaded _after_ `ReactRailsUJS`, you\'ll need to call this again. This function removes previous handlers before adding new ones, so it\'s safe to call as often as needed.\n\nIf `Turbolinks` is `import`ed via Webpacker (and thus not available globally), `ReactRailsUJS` will be unable to locate it. To fix this, you can temporarily add it to the global namespace:\n\n```js\n// Order is particular. First start Turbolinks:\nTurbolinks.start();\n// Add Turbolinks to the global namespace:\nwindow.Turbolinks = Turbolinks;\n// Remove previous event handlers and add new ones:\nReactRailsUJS.detectEvents();\n// (Optional) Clean up global namespace:\ndelete window.Turbolinks;\n```\n\n### `getConstructor`\n\nComponents are loaded with `ReactRailsUJS.getConstructor(className)`. This function has two built-in implementations:\n\n- On the asset pipeline, it looks up `className` in the global namespace.\n- On Webpacker, it `require`s files and accesses named exports, as described in [Get started with Webpacker](#get-started-with-webpacker).\n\nYou can override this function to customize the mapping of name-to-constructor. [Server-side rendering](#server-side-rendering) also uses this function.\n\n## Server-Side Rendering\n\nYou can render React components inside your Rails server with `prerender: true`:\n\n```erb\n<%= react_component(\'HelloMessage\', {name: \'John\'}, {prerender: true}) %>\n<!-- becomes: -->\n<div data-react-class="HelloMessage" data-react-props="{&quot;name&quot;:&quot;John&quot;}">\n  <h1>Hello, John!</h1>\n</div>\n```\n\n_(It will also be mounted by the [UJS](#ujs) on page load.)_\n\nServer rendering is powered by [`ExecJS`](https://github.com/rails/execjs) and subject to some requirements:\n\n- `react-rails` must load your code. By convention, it uses `server_rendering.js`, which was created\nby the install task. This file must include your components _and_ their dependencies (eg, Underscore.js).\n- Your code can\'t reference `document` or `window`. Prerender processes don\'t have access to `document` or `window`,\nso jQuery and some other libs won\'t work in this environment :(\n\n`ExecJS` supports many backends. CRuby users will get the best performance from [`mini_racer`](https://github.com/discourse/mini_racer#performance).\n\n#### Configuration\n\nServer renderers are stored in a pool and reused between requests. Threaded Rubies (eg jRuby) may see a benefit to increasing the pool size beyond the default `0`.\n\nThese are the default configurations:\n\n```ruby\n# config/application.rb\n# These are the defaults if you don\'t specify any yourself\nmodule MyApp\n  class Application < Rails::Application\n    # Settings for the pool of renderers:\n    config.react.server_renderer_pool_size  ||= 1  # ExecJS doesn\'t allow more than one on MRI\n    config.react.server_renderer_timeout    ||= 20 # seconds\n    config.react.server_renderer = React::ServerRendering::BundleRenderer\n    config.react.server_renderer_options = {\n      files: ["server_rendering.js"],       # files to load for prerendering\n      replay_console: true,                 # if true, console.* will be replayed client-side\n    }\n    # Changing files matching these dirs/exts will cause the server renderer to reload:\n    config.react.server_renderer_extensions = ["jsx", "js"]\n    config.react.server_renderer_directories = ["/app/assets/javascripts", "/app/javascript/"]\n  end\nend\n```\n\n#### JavaScript State\n\nSome of ExecJS\'s backends are stateful (eg, mini_racer, therubyracer). This means that any side-effects of a prerender will affect later renders with that renderer.\n\nTo manage state, you have a couple options:\n\n- Make a custom renderer with `#before_render` / `#after_render` hooks as [described below](#custom-server-renderer)\n- Use `per_request_react_rails_prerenderer` to manage state for a whole controller action.\n\nTo check out a renderer for the duration of a controller action, call the `per_request_react_rails_prerenderer` helper in the controller class:\n\n```ruby\nclass PagesController < ApplicationController\n  # Use the same React server renderer for the entire request:\n  per_request_react_rails_prerenderer\nend\n```\n\nThen, you can access the ExecJS context directly with `react_rails_prerenderer.context`:\n\n```ruby\ndef show\n  react_rails_prerenderer           # => #<React::ServerRendering::BundleRenderer>\n  react_rails_prerenderer.context   # => #<ExecJS::Context>\n\n  # Execute arbitrary JavaScript code\n  # `self` is the global context\n  react_rails_prerenderer.context.exec("self.Store.setup()")\n  render :show\n  react_rails_prerenderer.context.exec("self.Store.teardown()")\nend\n```\n\n`react_rails_prerenderer` may also be accessed in before- or after-actions.\n\n#### Custom Server Renderer\n\n`react-rails` depends on a renderer class for rendering components on the server. You can provide a custom renderer class to `config.react.server_renderer`. The class must implement:\n\n- `#initialize(options={})`, which accepts the hash from `config.react.server_renderer_options`\n- `#render(component_name, props, prerender_options)` to return a string of HTML\n\n`react-rails` provides two renderer classes: `React::ServerRendering::ExecJSRenderer` and `React::ServerRendering::BundleRenderer`.\n\n`ExecJSRenderer` offers two other points for extension:\n\n- `#before_render(component_name, props, prerender_options)` to return a string of JavaScript to execute _before_ calling `React.render`\n- `#after_render(component_name, props, prerender_options)` to return a string of JavaScript to execute _after_ calling `React.render`\n\nAny subclass of `ExecJSRenderer` may use those hooks (for example, `BundleRenderer` uses them to handle `console.*` on the server).\n\n## Controller Actions\n\nComponents can also be server-rendered directly from a controller action with the custom `component` renderer. For example:\n\n```ruby\nclass TodoController < ApplicationController\n  def index\n    @todos = Todo.all\n    render component: \'TodoList\', props: { todos: @todos }, tag: \'span\', class: \'todo\'\n  end\nend\n```\n\nYou can also provide the "usual" `render` arguments: `content_type`, `layout`, `location` and `status`. By default, your current layout will be used and the component, rather than a view, will be rendered in place of `yield`. Custom data-* attributes can be passed like `data: {remote: true}`.\n\nPrerendering is set to `true` by default, but can be turned off with `prerender: false`.\n\n## Component Generator\n\nYou can generate a new component file with:\n\n```sh\nrails g react:component ComponentName prop1:type prop2:type ...\n```\n\nFor example,\n\n```sh\nrails g react:component Post title:string published:bool published_by:instanceOf{Person}\n```\n\nwould generate:\n\n```JSX\nvar Post = createReactClass({\n  propTypes: {\n    title: PropTypes.string,\n    published: PropTypes.bool,\n    publishedBy: PropTypes.instanceOf(Person)\n  },\n\n  render: function() {\n    return (\n      <React.Fragment>\n        Title: {this.props.title}\n        Published: {this.props.published}\n        Published By: {this.props.publishedBy}\n      </React.Fragment>\n    );\n  }\n});\n```\n\nThe generator also accepts options:\n\n- `--es6`: use `class ComponentName extends React.Component`\n- `--coffee`: use CoffeeScript\n\nAccepted PropTypes are:\n\n- Plain types: `any`, `array`, `bool`, `element`, `func`, `number`, `object`, `node`, `shape`, `string`\n- `instanceOf` takes an optional class name in the form of `instanceOf{className}`.\n- `oneOf` behaves like an enum, and takes an optional list of strings in the form of `\'name:oneOf{one,two,three}\'`.\n- `oneOfType` takes an optional list of react and custom types in the form of `\'model:oneOfType{string,number,OtherType}\'`.\n\nNote that the arguments for `oneOf` and `oneOfType` must be enclosed in single quotes\n to prevent your terminal from expanding them into an argument list.\n\n#### Use with JBuilder\n\nIf you use Jbuilder to pass a JSON string to `react_component`, make sure your JSON is a stringified hash,\nnot an array. This is not the Rails default -- you should add the root node yourself. For example:\n\n```ruby\n# BAD: returns a stringified array\njson.array!(@messages) do |message|\n  json.extract! message, :id, :name\n  json.url message_url(message, format: :json)\nend\n\n# GOOD: returns a stringified hash\njson.messages(@messages) do |message|\n  json.extract! message, :id, :name\n  json.url message_url(message, format: :json)\nend\n```\n\n### Camelize Props\n\nYou can configure `camelize_props` option:\n\n```ruby\nMyApp::Application.configure do\n  config.react.camelize_props = true # default false\nend\n```\n\nNow, Ruby hashes given to `react_component(...)` as props will have their keys transformed from _underscore_- to _camel_-case, for example:\n\n```ruby\n{ all_todos: @todos, current_status: @status }\n# becomes:\n{ "allTodos" => @todos, "currentStatus" => @status }\n```\n\nYou can also specify this option in `react_component`:\n\n```erb\n<%= react_component(\'HelloMessage\', {name: \'John\'}, {camelize_props: true}) %>\n```\n\n## Upgrading\n\n### 2.3 to 2.4\n\nKeep your `react_ujs` up to date, `yarn upgrade`\n\nReact-Rails 2.4.x uses React 16+ which no longer has React Addons. Therefore the pre-bundled version of react no longer has an addons version, if you need addons still, there is the 2.3.1+ version of the gem that still has addons.\n\nIf you need to make changes in your components for the prebundled react, see the migration docs here:\n\n- https://reactjs.org/blog/2016/11/16/react-v15.4.0.html\n- https://reactjs.org/blog/2017/04/07/react-v15.5.0.html\n- https://reactjs.org/blog/2017/06/13/react-v15.6.0.html\n\n\nFor the vast majority of cases this will get you most of the migration:\n- global find+replace `React.Prop` -> `Prop`\n- add `import PropTypes from \'prop-types\'` (Webpacker only)\n- re-run `bundle exec rails webpacker:install:react` to update npm packages (Webpacker only)\n\n## Common Errors\n### During installation\n1) While using installers.(rails webpacker:install:react && rails webpacker:install)\nError:\n```\npublic/packs/manifest.json. Possible causes:\n1. You want to set webpacker.yml value of compile to true for your environment\n   unless you are using the `webpack -w` or the webpack-dev-server.\n2. webpack has not yet re-run to reflect updates.\n3. You have misconfigured Webpacker\'s config/webpacker.yml file.\n4. Your webpack configuration is not creating a manifest.\nor\nyarn: error: no such option: --dev\nERROR: [Errno 2] No such file or directory: \'add\'\n```\nFix: Try updating yarn package.\n```\nsudo apt remove cmdtest\nsudo apt remove yarn\ncurl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -\necho "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list\nsudo apt-get update && sudo apt-get install yarn\n\nyarn install\n```\n### Undefined Set\n```\nExecJS::ProgramError (identifier \'Set\' undefined):\n\n(execjs):1\n```\nIf you see any variation of this issue, see [Using TheRubyRacer](#using-therubyracer)\n\n\n### Using TheRubyRacer\nTheRubyRacer [hasn\'t updated LibV8](https://github.com/cowboyd/therubyracer/blob/master/therubyracer.gemspec#L20) (The library that powers Node.js) from v3 in 2 years, any new features are unlikely to work.\n\nLibV8 itself is already [beyond version 7](https://github.com/cowboyd/libv8/releases/tag/v7.3.492.27.1) therefore many serverside issues are caused by old JS engines and fixed by using an up to date one such as [MiniRacer](https://github.com/discourse/mini_racer) or [TheRubyRhino](https://github.com/cowboyd/therubyrhino) on JRuby.\n\n### HMR\nHot Module Replacement is [possible with this gem](https://stackoverflow.com/a/54846330/193785) as it does just pass through to Webpacker. Please open an issue to let us know tips and tricks for it to add to the wiki.\n\nSample repo that shows HMR working with `react-rails`: [https://github.com/edelgado/react-rails-hmr](https://github.com/edelgado/react-rails-hmr)\n\nOne caveat is that currently you [cannot Server-Side Render along with HMR](https://github.com/reactjs/react-rails/issues/925#issuecomment-415469572). \n\n## Related Projects\n\n- [webpacker-react](https://github.com/renchap/webpacker-react): Integration of React with Rails utilizing Webpack with Hot Module Replacement (HMR).\n- [The Free React on Rails Course](https://learnetto.com/users/hrishio/courses/the-free-react-on-rails-5-course) A free video course which teaches the basics of React and how to get started using it in Rails with `react-rails`.\n- [react\\_on\\_rails](https://github.com/shakacode/react_on_rails): Integration of React with Rails utilizing Webpack, Redux, React-Router.\n- [react-rails-hot-loader](https://github.com/rmosolgo/react-rails-hot-loader) Simple live-reloader for `react-rails`.\n- [react-rails-benchmark_renderer](https://github.com/pboling/react-rails-benchmark_renderer) adds performance instrumentation to server rendering.\n- [Ruby Hyperloop](http://ruby-hyperloop.org/): Use Ruby to build reactive user interfaces with React.\n\n## Contributing\n\n\xf0\x9f\x8e\x89 Thanks for taking the time to contribute! \xf0\x9f\x8e\x89\n\nWith 5 Million+ downloads of the react-rails Gem and another 2 Million+ downloads of react_ujs on NPM, you\'re helping the biggest React + Rails community!\n\nBy contributing to React-Rails, you agree to abide by the [code of conduct](https://github.com/reactjs/react-rails/blob/master/CODE_OF_CONDUCT.md).\n\nYou can always help by submitting patches or triaging issues, even offering reproduction steps to issues is incredibly helpful!\n\nPlease see our [Contribution guide](https://github.com/reactjs/react-rails/blob/master/CONTRIBUTING.md) for more info.\n'