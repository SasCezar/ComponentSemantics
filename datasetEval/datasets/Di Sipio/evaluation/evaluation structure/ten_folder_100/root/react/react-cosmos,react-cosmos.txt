b'<p align="center">\n  <img alt="Cosmos" src="cosmos.png">\n</p>\n\n# React Cosmos\n\n[![npm version](https://img.shields.io/npm/v/react-cosmos/next.svg?style=flat)](https://www.npmjs.com/package/react-cosmos) [![CircleCI Status](https://circleci.com/gh/react-cosmos/react-cosmos.svg?style=shield)](https://circleci.com/gh/react-cosmos/react-cosmos) [![Twitter](https://img.shields.io/twitter/follow/ReactCosmos.svg?color=%2338A1F3&label=twitter&style=flat)](https://twitter.com/ReactCosmos) [![Slack](https://join-react-cosmos.now.sh/badge.svg)](https://join-react-cosmos.now.sh/) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](https://github.com/react-cosmos/react-cosmos/blob/master/CONTRIBUTING.md#how-to-contribute)\n\n> [Become a Sponsor](https://github.com/users/skidding/sponsorship) to invest in the future of React Cosmos\n\nA tool for ambitious UI developers.\n\n- **Visual TDD.** Develop one component at a time. Isolate the UI you&apos;re\n  working on and iterate quickly. Reloading your whole app on\n  every change is slowing you down!\n- **Component library.** From blank states to edge cases, define component states to come\n  back to. Your component library keeps you organized and provides\n  a solid foundation of test cases.\n- **Open platform.** React Cosmos can be used in powerful ways. Snapshot and visual\n  regression tests are possible, as well as custom integrations\n  tailored to your needs.\n\n---\n\n\xf0\x9f\x91\xa9\xe2\x80\x8d\xf0\x9f\x9a\x80 **[Live demo](https://cosmos.flatris.space)**\n\n[![React Cosmos](next.png)](https://cosmos.flatris.space)\n\n> Keep in mind this is a static export. The dev environment, which requires a local server running, has more functionality.\n\n## Table of contents\n\n- Setup: [Getting started](#getting-started) \xc2\xb7 [Requirements](#requirements) \xc2\xb7 [Config](#config) \xc2\xb7 [Compilation](#compilation) \xc2\xb7 [Webpack](#webpack)\n- Usage: [Fixtures](#fixtures) \xc2\xb7 [Decorators](#decorators) \xc2\xb7 [Mocks](#declarative-mocks) \xc2\xb7 [UI controls](#ui-controlled-values) \xc2\xb7 [UI plugins](#ui-plugins) \xc2\xb7 [Static export](#static-export) \xc2\xb7 [React Native](#react-native) \xc2\xb7 [Server-side APIs](#server-side-apis)\n- FAQ: [Troubleshooting](#troubleshooting) \xc2\xb7 [Where\'s my old Cosmos?](#wheres-my-old-cosmos) \xc2\xb7 [Why Cosmos?](#why-cosmos) \xc2\xb7 [Credits](#credits)\n\nThe [example package](example) is a useful complement to this guide.\n\n## Getting started\n\n1\\. **Install React Cosmos**\n\n```bash\n# Using npm\nnpm i --D react-cosmos@next\n# or Yarn\nyarn add --dev react-cosmos@next\n```\n\n2\\. **Create package.json scripts**\n\n```diff\n"scripts": {\n+  "cosmos": "cosmos",\n+  "cosmos:export": "cosmos-export"\n}\n```\n\n3\\. **Start React Cosmos**\n\n```bash\n# Using npm\nnpm run cosmos\n# or Yarn\nyarn cosmos\n```\n\n\xf0\x9f\x9a\x80 **[localhost:5000](http://localhost:5000)**\n\n> You may also run `npx react-cosmos@next` in your project without installing any deps.\n\n4\\. **Create your first fixture**\n\nChoose a simple component to get started.\n\n<!-- prettier-ignore -->\n```jsx\n// Hello.jsx\nimport React from \'react\';\n\nexport function Hello({ greeting, name }) {\n  return <h1>{greeting}, {name}!</h1>;\n}\n```\n\nCreate a fixture file in a `__fixtures__` directory. You can [customize this convention](#how-to-create-fixture-files) later.\n\n> Fixture files contain a default export, which can be a React Component or any React Node.\n\n```jsx\n// __fixtures__/hello.jsx\nimport React from \'react\';\nimport { Hello } from \'../Hello\';\n\nexport default <Hello greeting="Aloha" name="Alexa" />;\n```\n\nThe `hello` fixture will show up in your React Cosmos UI and will render when you select it.\n\n5\\. **Build amazing user interfaces**\n\nYou\'ve taken the first step towards designing reusable components. You can now prototype, test and interate on components in isolation. Use this to your advantage!\n\n_Something wrong?_ Don\'t hesitate to [create a GitHub issue](https://github.com/react-cosmos/react-cosmos/issues/new/choose) (be helpful and include details) and to [join us on Slack](https://join-react-cosmos.now.sh/).\n\n## Requirements\n\nThe only hard requirements are React 16.8 and Node 6 (or newer).\n\nReact Cosmos works best with webpack. It takes extra effort to make it work with other bundlers, but it\'s not as scary as it might seem. Don\xe2\x80\x99t be afraid to ask for support.\n\n> [Browserify](https://github.com/react-cosmos/react-cosmos-classic/tree/14e1a258f746df401a41ab65429df0d296b910e4/examples/browserify) and [Parcel](https://github.com/react-cosmos/parcel-ts-example) examples are available for Cosmos Classic. Props to whoever adapts them to React Cosmos 5!\n\n## Config\n\nNo config is required to start. If you have custom needs or would like to convert a Cosmos Classic config, here\'s what you need to know.\n\nThe React Cosmos config is a **JSON** file, so it can only host serializable values. This design decision is meant to discourage complex configuration, make it easy to embed config options into the UI, and enable visual config management in the future.\n\nBy default, Cosmos reads `cosmos.config.json` from your root directory. You can pass a `--config` CLI arg for a custom config path.\n\n> Most Cosmos Classic config options are still supported in the new JSON format. [Let me know](https://join-react-cosmos.now.sh/) if you need old config options that no longer work.\n\n### Available options\n\nThe best way to learn about the available options in the Cosmos config is to use [config.schema.json](packages/react-cosmos/config.schema.json).\n\nThe schema is human readable, but you can also enhance your config with autocomplete in code editors like VS Code.\n\n```jsonc\n{\n  "$schema": "http://json.schemastore.org/cosmos-config"\n  // your options...\n}\n```\n\nAnd if you use VS Code you can map the Cosmos config schema globally by [extending your user settings](https://code.visualstudio.com/docs/languages/json#_mapping-in-the-user-settings).\n\n```json\n"json.schemas": [\n  {\n    "fileMatch": ["cosmos.config.json"],\n    "url": "http://json.schemastore.org/cosmos-config"\n  }\n]\n```\n\n## Compilation\n\nHow you compile your code is 100% your business. React Cosmos jumps through hoops to compile your code using your existing build pipeline, but it doesn\'t have opinions nor does it install dependencies your setup might require.\n\nUnless you use a framework like Create React App or Next.js, you need to install build dependencies yourself. This include stuff like Babel, TypeScript, webpack loaders, html-webpack-plugin, etc.\n\n**React Cosmos compiles your code using the build dependencies already installed in your project.**\n\n## Webpack\n\nConfiguring webpack is the least romantic aspect of the Cosmos setup. Luckily, you only do it once. Depending on your setup, one of the following options will work for you.\n\n### Default webpack config\n\nIn many cases Cosmos manages to get webpack working without human intervention. Try running Cosmos as is first.\n\n### Custom webpack config\n\nProbably the most common scenario. Most of us end up with a hairy webpack config sooner or later. Use the `webpack.configPath` setting to point to an existing webpack config.\n\nYou can also point to a module inside a dependency, like in the following Create React App example.\n\n```json\n{\n  "watchDirs": ["src"],\n  "webpack": {\n    "configPath": "react-scripts/config/webpack.config"\n  }\n}\n```\n\n> Both `watchDirs` and `webpack.configPath` options are recommended for a seamless integration with Create React App.\n\n### Webpack config override\n\nOverriding the webpack config gives you complete control. Use the `webpack.overridePath` setting to point to a module that customizes the webpack config used by Cosmos.\n\n```json\n{\n  "webpack": {\n    "overridePath": "./webpack.override.js"\n  }\n}\n```\n\nThe override function receives a base webpack config \xe2\x80\x94 the default one generated by Cosmos or a custom one loaded from `webpack.configPath`. Extend the input config and return the result.\n\n```js\n// webpack.override.js\nmodule.exports = (webpackConfig, env) => {\n  return { ...webpackConfig /* do your thing */ };\n};\n```\n\n## Fixtures\n\nFixture files contain a default export, which can be a React Component or any React Node.\n\n> `React` must be imported in every fixture file.\n\nThe file paths of your fixture files (relative to your project root) are used to create a tree view explorer in the React Cosmos UI.\n\n### Node fixtures\n\n> Think of Node fixtures as the return value of a function component, or the first argument to `React.render`.\n\n```jsx\n// __fixtures__/disabled.js\nexport default <Button disabled>Click me</Button>;\n```\n\n### Component fixtures\n\nComponent fixtures are just function components with no props. They enable using Hooks inside fixtures, which is powerful for simulating state with stateless components.\n\n```jsx\n// CounterButton.fixture.js\nexport default () => {\n  const [count, setCount] = React.useState(0);\n  return <CounterButton count={count} increment={() => setCount(count + 1)} />;\n};\n```\n\n### Multi fixture files\n\nA fixture file can also export multiple fixtures if the default export is an object.\n\n```jsx\n// buttons.fixture.js\nexport default {\n  primary: <PrimaryButton>Click me</PrimaryButton>,\n  primaryDisabled: <PrimaryButton disabled>Click me</PrimaryButton>,\n  secondary: <SecondaryButton>Click me</SecondaryButton>,\n  secondaryDisabled: <SecondaryButton disabled>Click me</SecondaryButton>\n};\n```\n\nThe object property names will show up as fixture names in the Cosmos UI.\n\n> [See this comment](https://github.com/react-cosmos/react-cosmos/issues/924#issuecomment-462082405) for the reasoning behind this solution (vs named exports).\n\n### How to create fixture files\n\nTwo options:\n\n1. End fixture file names with `.fixture.{js,jsx,ts,tsx}`\n2. Put fixture files inside `__fixtures__`\n\nExamples:\n\n1. `blankState.fixture.js`\n2. `__fixtures__/blankState.js`\n\n> File name conventions can be configured using the `fixturesDir` and `fixtureFileSuffix` options.\n\n**IMPORTANT:** Fixture files must be placed in the `src` directory when using Create React App, in order for Cosmos to bundle in the exact same environment as Create React App\'s.\n\n## Decorators\n\nWrapping components inside fixtures is easy, but can become repetitive. _Decorators_ can be used to apply one or more component wrappers to a group of fixtures automatically.\n\nA `cosmos.decorator` file looks like this:\n\n```jsx\n// cosmos.decorator.js\nexport default ({ children }) => <Provider store={store}>{children}</Provider>;\n```\n\n> A decorator only applies to fixture files contained in the decorator\'s directory. Decorators can be composed, in the order of their position in the file system hierarchy (from outer to inner).\n\n### Migrating _proxies_\n\nMigrating Cosmos Classic proxies to React Cosmos 5 is not intuitive. _Sorry for that!_ Check out the [nested decorators example](example/NestedDecorators) and join the `#proxies-upgrade` [Slack](https://join-react-cosmos.now.sh/) channel to learn more about this and to get help with your migration.\n\n### Redux state mock\n\nCheck out [react-cosmos-redux](https://github.com/skidding/react-cosmos-redux) to see what an advanced React Cosmos decorator looks like.\n\n## Declarative mocks\n\nComing up with dummy prop values is all that\'s required to create fixtures for many components. In other cases, however, components have _special needs_.\n\nSome components need to be wrapped in certain _contexts_, like a Router provider. Other components fire `fetch` requests willy-nilly. All these implicit dependencies are component inputs and understanding them goes a long way.\n\nThe [react-mock](https://github.com/skidding/react-mock) project provides ways for mocking implicit component dependencies and helps you create fixtures for _stubborn_ components.\n\n## UI-controlled values\n\nThe [props panel](https://twitter.com/ReactCosmos/status/1139838627976843264) allows you to manipulate component props visually by default. But you can also get a _custom values panel_ with minimal work.\n\n```jsx\n// CounterButton.fixture.js\nimport { useValue } from \'react-cosmos/fixture\';\n\nexport default () => {\n  const [count, setCount] = useValue(\'count\', { defaultValue: 0 });\n  return <CounterButton count={count} increment={() => setCount(count + 1)} />;\n};\n```\n\n> Heads up: `useValue` (and Cosmos in general) works great with TypeScript.\n\n## UI plugins\n\nA main feature of the React Cosmos redesign is the brand-new UI plugin architecture. While the new UI is created 100% from plugins, the plugin API is not yet documented nor made accessible. It will take a few big steps to get there, but this is the future.\n\n### Custom [responsive viewports](https://twitter.com/ReactCosmos/status/1158701342208208897)\n\n`responsivePreview` is a plugin included by default, and you can customize it through the Cosmos config.\n\n```json\n{\n  "ui": {\n    "responsivePreview": {\n      "devices": [\n        { "label": "iPhone 5", "width": 320, "height": 568 },\n        { "label": "iPhone 6", "width": 375, "height": 667 },\n        { "label": "iPhone 6 Plus", "width": 414, "height": 736 },\n        { "label": "Medium", "width": 1024, "height": 768 },\n        { "label": "Large", "width": 1440, "height": 900 },\n        { "label": "1080p", "width": 1920, "height": 1080 }\n      ]\n    }\n  }\n}\n```\n\n## Static export\n\nRun `cosmos-export` and get a nice component library that you can deploy to any static hosting service. The exported version won\'t have all the Cosmos features available in development (like opening the selected fixture in your code editor), but allows anybody with access to the static export URL to browse fixtures and play with component inputs.\n\n> Use [http-server](https://github.com/indexzero/http-server) or any static file server to load the export locally.\n\n## React Native\n\n```\nnpm run cosmos-native\n```\n\nReact Cosmos works great with React Native. Put the following inside `App.js` to get started.\n\n```jsx\nimport React, { Component } from \'react\';\nimport { NativeFixtureLoader } from \'react-cosmos/native\';\n// You generate cosmos.userdeps.js when you start the Cosmos server\nimport { rendererConfig, fixtures, decorators } from \'./cosmos.userdeps\';\n\nexport default class App extends Component {\n  render() {\n    return (\n      <NativeFixtureLoader\n        rendererConfig={rendererConfig}\n        fixtures={fixtures}\n        decorators={decorators}\n      />\n    );\n  }\n}\n```\n\nOnce your fixtures are loading properly, you\'ll probably want to split your App entry point to load Cosmos in development and your root component in production. Something like this:\n\n```js\nmodule.exports = global.__DEV__\n  ? require(\'./App.cosmos\')\n  : require(\'./App.main\');\n```\n\n**IMPORTANT:** React Native blacklists `__fixtures__` dirs by default. Unless you configure Cosmos to use a different directory pattern, you need to [override `getBlacklistRE` in the React Native CLI config](https://github.com/skidding/jobs-done/blob/585b1c472a123c9221dfec9018c9fa1e976d715e/rn-cli.config.js).\n\n### React Native for Web\n\nRun `cosmos --external-userdeps` instead of `cosmos-native` and Cosmos will [mirror your fixtures on both DOM and Native renderers](https://twitter.com/ReactCosmos/status/1156147491026472964).\n\n## Server-side APIs\n\n> Do **NOT** use these APIs in your fixture files, or any of your client code, as they require access to the file system and may bundle unwanted Node code in your client build.\n\n### Config\n\nFetching a Cosmos config can be done in a number of ways, depending on whether or not you have a config file and, in case you do, if you prefer to specify the path manually or to rely on automatic detection.\n\n#### Detect existing config based on cwd\n\n`detectCosmosConfig` uses the same config detection strategy as the `cosmos` command.\n\n```js\nimport { detectCosmosConfig } from \'react-cosmos\';\n\nconst cosmosConfig = detectCosmosConfig();\n```\n\n#### Read existing config at exact path\n\n`getCosmosConfigAtPath` is best when you don\'t want to care where you run a script from.\n\n```js\nimport { getCosmosConfigAtPath } from \'react-cosmos\';\n\nconst cosmosConfig = getCosmosConfigAtPath(require.resolve(\'./cosmos.config\'));\n```\n\n#### Create default config\n\nThe minimum requirement to create a config is a root directory.\n\n```js\nimport { createCosmosConfig } from \'react-cosmos\';\n\nconst cosmosConfig = createCosmosConfig(__dirname);\n```\n\n#### Create custom config\n\nYou can also customize your config programatically, without the need for an external config file.\n\n```js\nimport { createCosmosConfig } from \'react-cosmos\';\n\nconst cosmosConfig = createCosmosConfig(__dirname, {\n  // Options... (TypeScript is your friend)\n});\n```\n\n### Fixture URLs\n\nA list with one Playground URL for each fixture, optionally in full-screen mode. A common use case for `getFixtureUrls` is to create visual snapshots for each fixture, and potentially to diff them between deploys.\n\n```js\nimport { getFixtureUrls } from \'react-cosmos\';\n\nconst fixtureUrls = await getFixtureUrls({ cosmosConfig, fullScreen: true });\n\nconsole.log(fixtureUrls);\n// localhost:5000/?fixtureId=%7B%22path%22%3A%22\\_\\_fixtures\\_\\_%2FHello%20World.ts%22%2C%22name%22%3Anull%7D&fullScreen=true\n// localhost:5000/?fixtureId=%7B%22path%22%3A%22\\_\\_fixtures\\_\\_%2FProps%20Playground.tsx%22%2C%22name%22%3Anull%7D&fullScreen=true\n// localhost:5000/?fixtureId=%7B%22path%22%3A%22\\_\\_fixtures\\_\\_%2FState%20Playground.tsx%22%2C%22name%22%3Anull%7D&fullScreen=true\n// localhost:5000/?fixtureId=%7B%22path%22%3A%22Counter%2Findex.fixture.tsx%22%2C%22name%22%3A%22default%22%7D&fullScreen=true\n// localhost:5000/?fixtureId=%7B%22path%22%3A%22Counter%2Findex.fixture.tsx%22%2C%22name%22%3A%22small%20number%22%7D&fullScreen=true\n// localhost:5000/?fixtureId=%7B%22path%22%3A%22Counter%2Findex.fixture.tsx%22%2C%22name%22%3A%22large%20number%22%7D&fullScreen=true\n// localhost:5000/?fixtureId=%7B%22path%22%3A%22CounterButton%2Findex.fixture.tsx%22%2C%22name%22%3Anull%7D&fullScreen=true\n// localhost:5000/?fixtureId=%7B%22path%22%3A%22WelcomeMessage%2Findex.fixture.tsx%22%2C%22name%22%3Anull%7D&fullScreen=true\n// ...\n```\n\n### Fixture elements (rendered anywhere)\n\nA list of fixture elements to render by hand. A common use case for `getFixtures` is to run snapshot tests in alternative environments like jsdom.\n\n```js\nimport { getFixtures } from \'react-cosmos\';\n\nconst fixtures = await getFixtures({ cosmosConfig });\n\nfixtures.forEach(({ fixtureId, getElement }) => {\n  const renderer = create(getElement());\n  expect(renderer.toJSON()).toMatchSnapshot(stringifyFixtureId(fixtureId));\n});\n```\n\nCheck out the [full example](https://github.com/react-cosmos/react-cosmos/blob/41f0b6972fd0cb2951c43839f4c37a6cf1881571/example/fixtures.test.ts) for more details on how to use the `getFixtures` API.\n\n## Troubleshooting\n\n#### localhost:5000/\\_renderer.html 404s?\n\n- Check for build errors in your terminal.\n- Make sure you have html-webpack-plugin installed, as well as [any other build dependency](#compilation).\n\n#### Using Next.js?\n\n- [Make sure you have html-webpack-plugin installed](https://github.com/react-cosmos/react-cosmos/issues/995#issuecomment-511883135).\n- [Override your webpack config with ProvidePlugin to support JSX without importing React](https://github.com/react-cosmos/react-cosmos/issues/1000#issuecomment-512575593).\n\n#### "Failed to execute postMessage..."?\n\n- [You may have a URL instance in your state](https://github.com/react-cosmos/react-cosmos/issues/1002).\n\n#### "localhost:3001/\\_\\_get-internal-source..." 404s?\n\n- [Try changing your webpack `devtool` to something like `cheap-module-source-map`](https://github.com/react-cosmos/react-cosmos/issues/1045#issuecomment-535150617).\n\n## Where\'s my old Cosmos?\n\nCosmos Classic packages have been moved to [a dedicated repo](https://github.com/react-cosmos/react-cosmos-classic), which means we can continue to maintain Cosmos Classic or even run it alongside React Cosmos 5 in the same project (during the migration period).\n\nThat said, it\'s ideal for all Cosmos users to use the latest version. Please [let me know](https://join-react-cosmos.now.sh/) if you need help upgrading.\n\n## Why Cosmos?\n\nMany other component-oriented tools have emerged since Cosmos was conceived. [Storybook](https://github.com/storybookjs/storybook) and [React Styleguidist](https://github.com/styleguidist/react-styleguidist) are good examples, but you can find an exhaustive list [here](https://react-styleguidist.js.org/docs/cookbook.html#are-there-any-other-projects-like-this). Choose the tool that matches your needs the most.\n\nReact Cosmos is a dev tool first, made to address all components, big and small, not just the stateless UI bits. It aims to boost productivity and push UI developers into a _Pit of Success,_ creating robust components that survive the test of time.\n\nYou can also create a living style guide using React Cosmos, but it\'s a secondary goal and you might get more value from alternatives if this is your chief concern.\n\n## Credits\n\nHi, this is [Ovidiu](https://twitter.com/skidding), the core maintainer of React Cosmos. I spend ridiculous amounts of time perfecting this project because I love building user interfaces and making useful stuff.\n\nReact Cosmos is licensed as MIT and will always be free. If you want to support me, however, [become a Sponsor](https://github.com/users/skidding/sponsorship) and ensure this journey continues indefinitely!\n\nSpecial thanks to [@maxsalven](https://github.com/maxsalven) and [@xavxyz](https://github.com/xavxyz) for the long conversations and recurring interest in this project, as well as [@catalinmiron](https://github.com/catalinmiron), [@flaviusone](https://github.com/flaviusone), [@NiGhTTraX](https://github.com/NiGhTTraX), [@ovidiubute](https://github.com/ovidiubute), [@RadValentin](https://github.com/RadValentin), [@tkjone](https://github.com/tkjone), and all the other [contributors](https://github.com/react-cosmos/react-cosmos/graphs/contributors). You\'re a big reason why React Cosmos is still alive \xe2\x9d\xa4\xef\xb8\x8f.\n\nShout-out to [Kreativa Studio](http://www.kreativa-studio.com/) for offering the Cosmos illustration for free!\n\n---\n\nFor feedback [create a GitHub issue](https://github.com/react-cosmos/react-cosmos/issues/new/choose) or [join us on Slack](https://join-react-cosmos.now.sh/).\n'