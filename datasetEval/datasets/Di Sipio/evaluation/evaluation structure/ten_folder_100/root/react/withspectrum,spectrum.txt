b'<div align="center">\n\n  [![Spectrum](./public/img/media.png)](https://spectrum.chat)\n\n  ### Simple, powerful online communities.\n\n</div>\n\nThis is the main monorepo codebase of [Spectrum](https://spectrum.chat). Every single line of code that\'s not packaged into a reusable library is in this repository.\n\n## What is Spectrum?\n\n### Vision\n\nIt is difficult to grow, manage and measure the impact of online communities. Community owners need modern, chat-based communities but are running into scaling issues when their community grows beyond a few hundred members. It becomes hard to keep track of who\'s who, know what conversations are happening, and ensure that the community is staying healthy and productive.\n\n**Spectrum aims to be the best platform to build any kind of community online by combining the best of forums and real-time chat apps.** With best-in-class moderation tooling, a single platform for all your communities, threaded conversations by default, community health monitoring, and much more to come we think that we will be able to help more people start and grow the best online communities.\n\n> "[Spectrum] will take the place that Reddit used to have a long time ago for communities (especially tech) to freely share ideas and interact. Except realtime and trolling-free."\n>\n> \\- [Guillermo Rauch (@rauchg)](https://twitter.com/rauchg/status/930946768841228288)\n\n### Status\n\nSpectrum has been in full-time development since March 2017 and is [part of GitHub since November 2018](https://spectrum.chat/spectrum/general/spectrum-is-joining-github~1d3eb8ee-4c99-46c0-8daf-ca35a96be6ce). See our current priorities and what we are working on in the [main project board](https://github.com/withspectrum/spectrum/projects/23).\n\n<div align="center">\n  <img height="50px" src="public/img/cluster-1.svg" />\n</div>\n\n## Docs\n\n- [Contributing](#contributing)\n  - [Ground Rules](#ground-rules)\n  - [Codebase](#codebase)\n    - [Technologies](#technologies)\n    - [Folder Structure](#folder-structure)\n    - [Code Style](#code-style)\n  - [First time setup](#first-time-setup)\n  - [Running the app locally](#running-the-app-locally)\n  - [Roadmap](https://github.com/withspectrum/spectrum/projects/19)\n- [Technical](docs/)\n  - [Testing](docs/testing/intro.md)\n  - [Background Jobs](docs/workers/background-jobs.md)\n  - [Deployment](docs/deployments.md)\n  - [API](docs/backend/api/)\n    - [Fragments](docs/backend/api/fragments.md)\n    - [Pagination](docs/backend/api/pagination.md)\n    - [Testing](docs/backend/api/testing.md)\n    - [Tips and Tricks](docs/backend/api/tips-and-tricks.md)\n\n## Contributing\n\n**We heartily welcome any and all contributions that match our engineering standards!**\n\nThat being said, this codebase isn\'t your typical open source project because it\'s not a library or package with a limited scope\xe2\x80\x94it\'s our entire product.\n\n### Ground Rules\n\n#### Contributions and discussion guidelines\n\nAll conversations and communities on Spectrum agree to our underlying [code of conduct](https://github.com/withspectrum/code-of-conduct). This code of conduct also applies to all conversations that happen within our contributor community here on GitHub. We expect discussions in issues and pull requests to stay positive, productive, and respectful. Remember: there are real people on the other side of that screen!\n\n#### Reporting a bug or discussing a feature idea\n\nIf you found a technical bug on Spectrum or have ideas for features we should implement, the issue tracker is the best place to share your ideas. Make sure to follow the issue template and you should be golden! ([click here to open a new issue](https://github.com/withspectrum/spectrum/issues/new))\n\n#### Fixing a bug or implementing a new feature\n\nIf you find a bug on Spectrum and open a PR that fixes it we\'ll review it as soon as possible to ensure it matches our engineering standards.\n\nIf you want to implement a new feature, open an issue first to discuss what it\'d look like and to ensure it fits in our roadmap and plans for the app (see [the main project board](https://github.com/withspectrum/spectrum/projects/23) for planned and currently ongoing work).\n\nIf you want to contribute but are unsure to start, we have [a "good first issue" label](https://github.com/withspectrum/spectrum/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22) which is applied to newcomer-friendly issues. Take a look at [the full list of good first issues](https://github.com/withspectrum/spectrum/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22) and pick something you like! There is also [an "open" channel in the Spectrum community on Spectrum](https://spectrum.chat/spectrum/open) (how meta), if you run into troubles while trying to contribute that is the best place to talk to us.\n\nWant to fix a bug or implement an agreed-upon feature? Great, jump to the [local setup instructions](#first-time-setup)!\n\n<div align="center">\n  <img height="70px" src="public/img/cluster-2.svg" />\n</div>\n\n### Codebase\n\n#### Technologies\n\nWith the ground rules out of the way, let\'s talk about the coarse architecture of this mono repo:\n\n- **Full-stack JavaScript**: We use Node.js to power our servers, and React to power our frontend apps. Almost all of the code you\'ll touch in this codebase will be JavaScript.\n- **Background Jobs**: We leverage background jobs (powered by [`bull`](https://github.com/OptimalBits/bull) and Redis) a lot. These jobs are handled by a handful of small worker servers, each with its own purpose.\n\nHere is a list of all the big technologies we use:\n\n- **RethinkDB**: Data storage\n- **Redis**: Background jobs and caching\n- **GraphQL**: API, powered by the entire Apollo toolchain\n- **Flowtype**: Type-safe JavaScript\n- **PassportJS**: Authentication\n- **React**: Frontend React app\n\n#### Folder structure\n\n```sh\nspectrum/\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 api        # API server\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 athena     # Worker server (notifications and general processing)\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 chronos    # Worker server (cron jobs)\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 desktop    # desktop apps (build with electron)\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 docs\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 email-templates\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 hermes     # Worker server (email sending)\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 hyperion   # Rendering server\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 mercury    # Worker server (reputation)\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 public     # Public files used on the frontend\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 shared     # Shared JavaScript code\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 src        # Frontend SPA\n\xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 vulcan     # Worker server (search indexing; syncing with Algolia)\n```\n\n<details>\n  <summary>Click to learn about the worker naming scheme</summary>\n\n#### Naming Scheme\n\nAs you can see we follow a loose naming scheme based on ancient Greek, Roman, and philosophical figures that are somewhat related to what our servers do:\n\n- Hyperion: (/ha\xc9\xaa\xcb\x88p\xc9\xaa\xc9\x99ri\xc9\x99n/) is one of the twelve Titan children of Gaia and Uranus.\n- Athena (/\xc9\x99\xcb\x88\xce\xb8i\xcb\x90n\xc9\x99/) is the goddess of wisdom, craft, and war.\n- Hermes (/\xcb\x88h\xc9\x9c\xcb\x90rmi\xcb\x90z/) is the messenger god, moving between the worlds of the mortal and the divine.\n- Chronos (/\xcb\x88kro\xca\x8an\xc9\x92s/) is the personification of Time in pre-Socratic philosophy\n- Mercury (/\xcb\x88m\xc9\x9c\xcb\x90rkj\xca\x8ari/) is the patron god of financial gain, commerce, eloquence (and thus poetry), messages/communication (including divination), travelers, boundaries, luck, trickery and thieves\n\n</details>\n\n#### Code Style\n\nWe run Prettier on-commit, which means you can write code in whatever style you want and it will be automatically formatted according to the common style when you run `git commit`. We also have ESLint setup, although we\'ve disabled all stylistic rules since Prettier takes care of those.\n\n##### Rules\n\n- **All new `.js` files must be flow typed**: Since we only introduced Flowtype after we finished building the first version of Spectrum, we enforce in CI that all new files added to the codebase are typed. (if you\'ve never used Flowtype before that\'s totally fine, just write your code in plain JS and let us know in the PR body, we can take care of it for you)\n- **No `console.log`s in any file**: We use the `debug` module across the codebase to log debugging information in development only. Never commit a file that contains a `console.log` as CI will fail your build. The only exceptions are errors, which you can log, but you have to use `console.error` to be explicit about it\n\n<div align="center">\n  <img height="70px" src="public/img/cluster-3.svg" />\n</div>\n\n### First time setup\n\nThe first step to running Spectrum locally is downloading the code by cloning the repository:\n\n```sh\ngit clone git@github.com:withspectrum/spectrum.git\n```\n If you get `Permission denied` error using `ssh` refer [here](https://help.github.com/articles/error-permission-denied-publickey/)\nor use `https` link as a fallback.\n```sh\ngit clone https://github.com/withspectrum/spectrum.git\n```\n\n#### Installation\n\nSpectrum has four big installation steps:\n\n1. **Install RethinkDB**: See [the RethinkDB documentation](https://rethinkdb.com/docs/install/) for instructions on installing it with your OS.\n2. **Install Redis**: See [the Redis documentation](https://redis.io/download) for instructions on installing it with your OS.\n3. **Install yarn**: We use [yarn](https://yarnpkg.com) to handle our JavaScript dependencies. (plain `npm` doesn\'t work due to our monorepo setup) See [the yarn documentation](https://yarnpkg.com/en/docs/install) for instructions on installing it.\n4. **Install the dependencies**: Because it\'s pretty tedious to install the dependencies for each worker individually we\'ve created a script that goes through and runs `yarn install` for every worker for you: (this takes a couple minutes, so dive into the [technical docs](./docs) in the meantime)\n\n  ```sh\n  node shared/install-dependencies.js\n  ```\n\nYou\'ve now finished installing everything! Let\'s migrate the database and you\'ll be ready to go :100:\n\n#### Migrating the database\n\nWhen you first download the code and want to run it locally you have to migrate the database and seed it with test data. First, start rethinkdb in its own terminal tab:\n\n```sh\nrethinkdb\n```\n\nThen, in a new tab, run these commands:\n\n```sh\nyarn run db:migrate\nyarn run db:seed\n# \xe2\x9a\xa0\xef\xb8\x8f To empty the database (e.g. if there\'s faulty data) run yarn run db:drop\n```\n\nThere\'s a shortcut for dropping, migrating and seeding the database too:\n```sh\nyarn run db:reset\n```\n\nThe `testing` database used in end to end tests is managed separately. It is built, migrated, and seeded when you run:\n\n```sh\nyarn run start:api:test\n```\n\nTo drop the `testing` database, go to http://localhost:8080/#tables while `rethinkdb` is running, and click Delete Database on the appropriate database.\n\n#### Getting the secrets\n\nWhile the app will run without any secrets set up, you won\'t be able to sign in locally. To get that set up, copy the provided example secrets file to the real location:\n\n```\ncp now-secrets.example.json now-secrets.json\n```\n\n> Note: If you\'re an employee at Spectrum we\'ve got a more complete list of secrets that also lets you upload images etc. in 1Password, search for "now-secrets.json" to find it.\n\nNow you\'re ready to run the app locally and sign into your local instance!\n\n### Running the app locally\n\n#### Background services\n\nWhenever you want to run Spectrum locally you have to have RethinkDB and Redis running in the background. First start rethinkdb like we did to migrate the database:\n\n```sh\nrethinkdb\n```\n\nThen (without closing the rethinkdb tab!) open another tab and start Redis:\n\n```sh\nredis-server\n```\n\n#### Start the servers\n\nDepending on what you\'re trying to work on you\'ll need to start different servers. Generally, all servers run in development mode by doing `yarn run dev:<workername>`, e.g. `yarn run dev:hermes` to start the email worker.\n\nNo matter what you\'re trying to do though, you\'ll want to have the API running, so start that in a background tab:\n\n```\nyarn run dev:api\n```\n\n#### Develop the web UI\n\nTo develop the frontend and web UI run\n\n```\nyarn run dev:web\n```\n\n#### Develop the desktop app\n\nTo develop the desktop app you have to have the dev web server running in the background (`yarn run dev:web`) and then, in another terminal tab, run:\n\n```\nyarn run dev:desktop\n```\n\n> Note: If something didn\'t work or you ran into troubles please submit PRs to improve this doc and keep it up to date!\t\n\n<br />\t\n<div align="center">\t\n  <img height="200px" src="public/img/connect.svg" />\t\n</div>\t\n\n## License\t\nBSD 3-Clause, see the [LICENSE](./LICENSE) file.\n'