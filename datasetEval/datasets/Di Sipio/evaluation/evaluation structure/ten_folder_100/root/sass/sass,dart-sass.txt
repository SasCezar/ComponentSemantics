b'A [Dart][dart] implementation of [Sass][sass]. **Sass makes CSS fun again**.\n\n<table>\n  <tr>\n    <td>\n      <img width="118px" alt="Sass logo" src="https://rawgit.com/sass/sass-site/master/source/assets/img/logos/logo.svg" />\n    </td>\n    <td valign="middle">\n      <a href="https://www.npmjs.com/package/sass"><img width="100%" alt="npm statistics" src="https://nodei.co/npm/sass.png?downloads=true"></a>\n    </td>\n    <td valign="middle">\n      <a href="https://pub.dartlang.org/packages/sass"><img alt="Pub version" src="https://img.shields.io/pub/v/sass.svg"></a>\n      <br>\n      <a href="https://travis-ci.org/sass/dart-sass"><img alt="Travis build status" src="https://api.travis-ci.org/sass/dart-sass.svg?branch=master"></a>\n      <br>\n      <a href="https://ci.appveyor.com/project/nex3/dart-sass"><img alt="Appveyor build status" src="https://ci.appveyor.com/api/projects/status/84rl9hvu8uoecgef?svg=true"></a>\n    </td>\n  </tr>\n</table>\n\n[dart]: https://www.dartlang.org\n[sass]: https://sass-lang.com/\n\n* [Using Dart Sass](#using-dart-sass)\n  * [From Chocolatey or Scoop (Windows)](#from-chocolatey-or-scoop-windows)\n  * [From Homebrew (OS X)](#from-homebrew-os-x)\n  * [Standalone](#standalone)\n  * [From npm](#from-npm)\n  * [From Pub](#from-pub)\n  * [From Source](#from-source)\n* [JavaScript API](#javascript-api)\n* [Why Dart?](#why-dart)\n* [Compatibility Policy](#compatibility-policy)\n  * [Browser Compatibility](#browser-compatibility)\n  * [Node.js Compatibility](#nodejs-compatibility)\n* [Behavioral Differences from Ruby Sass](#behavioral-differences-from-ruby-sass)\n\n## Using Dart Sass\n\nThere are a few different ways to install and run Dart Sass, depending on your\nenvironment and your needs.\n\n### From Chocolatey or Scoop (Windows)\n\nIf you use [the Chocolatey package manager](https://chocolatey.org/)\nor [the Scoop package manager](https://github.com/lukesampson/scoop) for\nWindows, you can install Dart Sass by running\n\n```cmd\nchoco install sass\n```\n\nor\n\n```cmd\nscoop install sass\n```\n\nThat\'ll give you a `sass` executable on your command line that will run Dart\nSass.\n\n### From Homebrew (OS X)\n\nIf you use [the Homebrew package manager](https://brew.sh/) for Mac OS X, you\ncan install Dart Sass by running\n\n```sh\nbrew install sass/sass/sass\n```\n\nThat\'ll give you a `sass` executable on your command line that will run Dart\nSass.\n\n### Standalone\n\nYou can download the standalone Dart Sass archive for your operating\nsystem\xe2\x80\x94containing the Dart VM and the snapshot of the executable\xe2\x80\x94from [the\nGitHub release page][]. Extract it, [add the directory to your path][], restart\nyour terminal, and the `sass` executable is ready to run!\n\n[the GitHub release page]: https://github.com/sass/dart-sass/releases/\n[add the directory to your path]: https://katiek2.github.io/path-doc/\n\n### From npm\n\nDart Sass is available, compiled to JavaScript, [as an npm package][npm]. You\ncan install it globally using `npm install -g sass` which will provide access to\nthe `sass` executable. You can also add it to your project using\n`npm install --save-dev sass`. This provides the executable as well as a\nlibrary:\n\n[npm]: https://www.npmjs.com/package/sass\n\n```js\nvar sass = require(\'sass\');\n\nsass.render({file: scss_filename}, function(err, result) { /* ... */ });\n\n// OR\n\nvar result = sass.renderSync({file: scss_filename});\n```\n\n[See below](#javascript-api) for details on Dart Sass\'s JavaScript API.\n\n### From Pub\n\nIf you\'re a Dart user, you can install Dart Sass globally using `pub global\nactivate sass`, which will provide a `sass` executable. You can also add it to\nyour pubspec and use it as a library. We strongly recommend importing it with\nthe prefix `sass`:\n\n```dart\nimport \'package:sass/sass.dart\' as sass;\n\nvoid main(List<String> args) {\n  print(sass.compile(args.first));\n}\n```\n\nSee [the Dart API docs][api] for details.\n\n[api]: https://www.dartdocs.org/documentation/sass/latest/sass/sass-library.html\n\n### From Source\n\nAssuming you\'ve already checked out this repository:\n\n1. [Install Dart](https://www.dartlang.org/install). If you download an archive\n   manually rather than using an installer, make sure the SDK\'s `bin` directory\n   is on your `PATH`.\n\n2. In this repository, run `pub get`. This will install Dart Sass\'s\n   dependencies.\n\n3. Run `dart bin/sass.dart path/to/file.scss`.\n\nThat\'s it!\n\n## JavaScript API\n\nWhen installed via npm, Dart Sass supports a JavaScript API that\'s fully\ncompatible with [Node Sass][] (with a few exceptions listed below), with support\nfor both the `render()` and `renderSync()` functions. See [the Sass\nwebsite][js api] for full API documentation!\n\n[Node Sass]: https://github.com/sass/node-sass\n[js api]: https://sass-lang.com/documentation/js-api\n\nNote however that by default, **`renderSync()` is more than twice as fast as\n`render()`** due to the overhead of asynchronous callbacks. To avoid this\nperformance hit, `render()` can use the [`fibers`][fibers] package to call\nasynchronous importers from the synchronous code path. To enable this, pass the\n`Fiber` class to the `fiber` option:\n\n[fibers]: https://www.npmjs.com/package/fibers\n\n```js\nvar sass = require("sass");\nvar Fiber = require("fibers");\n\nsass.render({\n  file: "input.scss",\n  importer: function(url, prev, done) {\n    // ...\n  },\n  fiber: Fiber\n}, function(err, result) {\n  // ...\n});\n```\n\nBoth `render()` and `renderSync()` support the following options:\n\n* [`data`](https://github.com/sass/node-sass#data)\n* [`file`](https://github.com/sass/node-sass#file)\n* [`functions`](https://github.com/sass/node-sass#functions--v300---experimental)\n* [`importer`](https://github.com/sass/node-sass#importer--v200---experimental)\n* [`includePaths`](https://github.com/sass/node-sass#includepaths)\n* [`indentType`](https://github.com/sass/node-sass#indenttype)\n* [`indentWidth`](https://github.com/sass/node-sass#indentwidth)\n* [`indentedSyntax`](https://github.com/sass/node-sass#indentedsyntax)\n* [`linefeed`](https://github.com/sass/node-sass#linefeed)\n* [`omitSourceMapUrl`](https://github.com/sass/node-sass#omitsourcemapurl)\n* [`outFile`](https://github.com/sass/node-sass#outfile)\n* [`sourceMapContents`](https://github.com/sass/node-sass#sourcemapcontents)\n* [`sourceMapEmbed`](https://github.com/sass/node-sass#sourcemapembed)\n* [`sourceMapRoot`](https://github.com/sass/node-sass#sourcemaproot)\n* [`sourceMap`](https://github.com/sass/node-sass#sourcemap)\n* Only the `"expanded"` and `"compressed"` values of\n  [`outputStyle`](https://github.com/sass/node-sass#outputstyle) are supported.\n\nNo support is intended for the following options:\n\n* [`precision`](https://github.com/sass/node-sass#precision). Dart Sass defaults\n  to a sufficiently high precision for all existing browsers, and making this\n  customizable would make the code substantially less efficient.\n\n* [`sourceComments`](https://github.com/sass/node-sass#sourcecomments). Source\n  maps are the recommended way of locating the origin of generated selectors.\n\n## Why Dart?\n\nDart Sass has replaced Ruby Sass as the canonical implementation of the Sass\nlanguage. We chose Dart because it presented a number of advantages:\n\n* It\'s fast. The Dart VM is highly optimized, and getting faster all the time\n  (for the latest performance numbers, see [`perf.md`][perf]). It\'s much faster\n  than Ruby, and close to par with C++.\n\n* It\'s portable. The Dart VM has no external dependencies and can compile\n  applications into standalone snapshot files, so we can distribute Dart Sass as\n  only three files (the VM, the snapshot, and a wrapper script). Dart can also\n  be compiled to JavaScript, which makes it easy to distribute Sass through npm,\n  which the majority of our users use already.\n\n* It\'s easy to write. Dart is a higher-level language than C++, which means it\n  doesn\'t require lots of hassle with memory management and build systems. It\'s\n  also statically typed, which makes it easier to confidently make large\n  refactors than with Ruby.\n\n* It\'s friendlier to contributors. Dart is substantially easier to learn than\n  Ruby, and many Sass users in Google in particular are already familiar with\n  it. More contributors translates to faster, more consistent development.\n\n[perf]: https://github.com/sass/dart-sass/blob/master/perf.md\n\n## Compatibility Policy\n\nFor the most part, Dart Sass follows [semantic versioning][]. We consider all of\nthe following to be part of the versioned API:\n\n[semantic versioning]: https://semver.org/\n\n* The Sass language semantics implemented by Dart Sass.\n* The Dart API.\n* The JavaScript API.\n* The command-line interface.\n\nBecause Dart Sass has a single version that\'s shared across the Dart,\nJavaScript, and standalone distributions, this may mean that we increment the\nmajor version number when there are in fact no breaking changes for one or more\ndistributions. However, we will attempt to limit the number of breaking changes\nwe make and group them in as few releases as possible to minimize churn. We\nstrongly encourage users to use [the changelog][] for a full understanding of\nall the changes in each release.\n\n[the changelog]: https://github.com/sass/dart-sass/blob/master/CHANGELOG.md\n\nThere is one exception where breaking changes may be made outside of a major\nversion revision. It is occasionally the case that CSS adds a feature that\'s\nincompatible with existing Sass syntax in some way. Because Sass is committed to\nfull CSS compatibility, we occasionally need to break compatibility with old\nSass code in order to remain compatible with CSS.\n\nIn these cases, we will first release a version of Sass that emits deprecation\nwarnings for any stylesheets whose behavior will change. Then, at least three\nmonths after the release of a version with these deprecation warnings, we will\nrelease a minor version with the breaking change to the Sass language semantics.\n\n### Browser Compatibility\n\nIn general, we consider any change to Dart Sass\'s CSS output that would cause\nthat CSS to stop working in a real browser to be a breaking change. However,\nthere are some cases where such a change would have substantial benefits and\nwould only negatively affect a small minority of rarely-used browsers. We don\'t\nwant to have to block such a change on a major version release.\n\nAs such, if a change would break compatibility with less than 2% of the global\nmarket share of browser according to [StatCounter GlobalStats][], we may release\na minor version of Dart Sass with that change.\n\n[StatCounter GlobalStats]: http://gs.statcounter.com/\n\n### Node.js Compatibility\n\nWe consider dropping support for a given version of Node.js to be a breaking\nchange *as long as* that version is still supported by Node.js. This means that\nreleases listed as Current, Active LTS, or Maintenance LTS according to [the\nNode.js release page][]. Once a Node.js version is out of LTS, Dart Sass\nconsiders itself free to break support if necessary.\n\n[the Node.js release page]: https://nodejs.org/en/about/releases/\n\n## Behavioral Differences from Ruby Sass\n\nThere are a few intentional behavioral differences between Dart Sass and Ruby\nSass. These are generally places where Ruby Sass has an undesired behavior, and\nit\'s substantially easier to implement the correct behavior than it would be to\nimplement compatible behavior. These should all have tracking bugs against Ruby\nSass to update the reference behavior.\n\n1. `@extend` only accepts simple selectors, as does the second argument of\n   `selector-extend()`. See [issue 1599][].\n\n2. Subject selectors are not supported. See [issue 1126][].\n\n3. Pseudo selector arguments are parsed as `<declaration-value>`s rather than\n   having a more limited custom parsing. See [issue 2120][].\n\n4. The numeric precision is set to 10. See [issue 1122][].\n\n5. The indented syntax parser is more flexible: it doesn\'t require consistent\n   indentation across the whole document. See [issue 2176][].\n\n6. Colors do not support channel-by-channel arithmetic. See [issue 2144][].\n\n7. Unitless numbers aren\'t `==` to unit numbers with the same value. In\n   addition, map keys follow the same logic as `==`-equality. See\n   [issue 1496][].\n\n8. `rgba()` and `hsla()` alpha values with percentage units are interpreted as\n   percentages. Other units are forbidden. See [issue 1525][].\n\n9. Too many variable arguments passed to a function is an error. See\n   [issue 1408][].\n\n10. Allow `@extend` to reach outside a media query if there\'s an identical\n    `@extend` defined outside that query. This isn\'t tracked explicitly, because\n    it\'ll be irrelevant when [issue 1050][] is fixed.\n\n11. Some selector pseudos containing placeholder selectors will be compiled\n    where they wouldn\'t be in Ruby Sass. This better matches the semantics of\n    the selectors in question, and is more efficient. See [issue 2228][].\n\n12. The old-style `:property value` syntax is not supported in the indented\n    syntax. See [issue 2245][].\n\n13. The reference combinator is not supported. See [issue 303][].\n\n14. Universal selector unification is symmetrical. See [issue 2247][].\n\n15. `@extend` doesn\'t produce an error if it matches but fails to unify. See\n    [issue 2250][].\n\n16. Dart Sass currently only supports UTF-8 documents. We\'d like to support\n    more, but Dart currently doesn\'t support them. See [dart-lang/sdk#11744][],\n    for example.\n\n[issue 1599]: https://github.com/sass/sass/issues/1599\n[issue 1126]: https://github.com/sass/sass/issues/1126\n[issue 2120]: https://github.com/sass/sass/issues/2120\n[issue 1122]: https://github.com/sass/sass/issues/1122\n[issue 2176]: https://github.com/sass/sass/issues/2176\n[issue 2144]: https://github.com/sass/sass/issues/2144\n[issue 1496]: https://github.com/sass/sass/issues/1496\n[issue 1525]: https://github.com/sass/sass/issues/1525\n[issue 1408]: https://github.com/sass/sass/issues/1408\n[issue 1050]: https://github.com/sass/sass/issues/1050\n[issue 2228]: https://github.com/sass/sass/issues/2228\n[issue 2245]: https://github.com/sass/sass/issues/2245\n[issue 303]: https://github.com/sass/sass/issues/303\n[issue 2247]: https://github.com/sass/sass/issues/2247\n[issue 2250]: https://github.com/sass/sass/issues/2250\n[dart-lang/sdk#11744]: https://github.com/dart-lang/sdk/issues/11744\n\nDisclaimer: this is not an official Google product.\n'