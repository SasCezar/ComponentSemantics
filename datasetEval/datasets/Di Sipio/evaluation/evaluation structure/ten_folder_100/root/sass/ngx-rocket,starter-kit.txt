b'# ngX Starter Kit\n\nWeb project starter kit including modern tools and workflow based on\n[angular-cli](https://github.com/angular/angular-cli), best practices from the community, a scalable base template and\na good learning base.\n\nGenerated using [ngX-Rocket](https://github.com/ngx-rocket/generator-ngx-rocket).\n\n### Benefits\n\n- Quickstart a project in seconds and focus on features, not on frameworks or tools\n\n- Industrial-grade tools, ready for usage in a continuous integration environment and DevOps\n\n- Scalable architecture with base app template including example components, services and tests\n\n# Getting started\n\n1. Go to project folder and install dependencies:\n ```bash\n npm install\n ```\n \n2. Launch development server, and open `localhost:4200` in your browser:\n ```bash\n npm start\n ```\n \n# Project structure\n\n```\ndist/                        compiled version\ndocs/                        project docs and coding guides\ne2e/                         end-to-end tests\nsrc/                         project source code\n|- app/                      app components\n|  |- core/                  core module (singleton services and single-use components)\n|  |- shared/                shared module  (common components, directives and pipes)\n|  |- app.component.*        app root component (shell)\n|  |- app.module.ts          app root module definition\n|  |- app-routing.module.ts  app routes\n|  +- ...                    additional modules and components\n|- assets/                   app assets (images, fonts, sounds...)\n|- environments/             values for various build environments\n|- theme/                    app global scss variables and theme\n|- translations/             translations files\n|- index.html                html entry point\n|- main.scss                 global style entry point\n|- main.ts                   app entry point\n|- polyfills.ts              polyfills needed by Angular\n+- test.ts                   unit tests entry point\nreports/                     test and coverage reports\nproxy.conf.js                backend proxy configuration\n```\n\n# Main tasks\n\nTask automation is based on [NPM scripts](https://docs.npmjs.com/misc/scripts).\n\nTasks                         | Description\n------------------------------|---------------------------------------------------------------------------------------\nnpm start                     | Run development server on `http://localhost:4200/`\nnpm run build [-- --env=prod] | Lint code and build app for production in `dist/` folder\nnpm test                      | Run unit tests via [Karma](https://karma-runner.github.io) in watch mode\nnpm run test:ci               | Lint code and run unit tests once for continuous integration\nnpm run e2e                   | Run e2e tests using [Protractor](http://www.protractortest.org)\nnpm run lint                  | Lint code\nnpm run translations:extract  | Extract strings from code and templates to `src/app/translations/template.json`\nnpm run docs                  | Display project documentation\n\nWhen building the application, you can specify the target environment using the additional flag `--env <name>` (do not\nforget to prepend `--` to pass arguments to npm scripts).\n\nThe default build environment is `prod`.\n\n## Development server\n\nRun `npm start` for a dev server. Navigate to `http://localhost:4200/`. The app will automatically reload if you change\nany of the source files.\nYou should not use `ng serve` directly, as it does not use the backend proxy configuration by default.\n\n## Code scaffolding\n\nRun `npm run generate -- component <name>` to generate a new component. You can also use\n`npm run generate -- directive|pipe|service|class|module`.\n\nIf you have installed [angular-cli](https://github.com/angular/angular-cli) globally with `npm install -g @angular/cli`,\nyou can also use the command `ng generate` directly.\n\n## Additional tools\n\nTasks are mostly based on the `angular-cli` tool. Use `ng help` to get more help or go check out the\n[Angular-CLI README](https://github.com/angular/angular-cli).\n\n# What\'s in the box\n\nThe app template is based on [HTML5](http://whatwg.org/html), [TypeScript](http://www.typescriptlang.org) and\n[Sass](http://sass-lang.com). The translation files use the common [JSON](http://www.json.org) format.\n\n#### Tools\n\nDevelopment, build and quality processes are based on [angular-cli](https://github.com/angular/angular-cli) and\n[NPM scripts](https://docs.npmjs.com/misc/scripts), which includes:\n\n- Optimized build and bundling process with [Webpack](https://webpack.github.io)\n- [Development server](https://webpack.github.io/docs/webpack-dev-server.html) with backend proxy and live reload\n- Cross-browser CSS with [autoprefixer](https://github.com/postcss/autoprefixer) and\n  [browserslist](https://github.com/ai/browserslist)\n- Asset revisioning for [better cache management](https://webpack.github.io/docs/long-term-caching.html)\n- Unit tests using [Jasmine](http://jasmine.github.io) and [Karma](https://karma-runner.github.io)\n- End-to-end tests using [Protractor](https://github.com/angular/protractor)\n- Static code analysis: [TSLint](https://github.com/palantir/tslint), [Codelyzer](https://github.com/mgechev/codelyzer),\n  [Stylelint](http://stylelint.io) and [HTMLHint](http://htmlhint.com/)\n- Local knowledgebase server using [Hads](https://github.com/sinedied/hads)\n\n#### Libraries\n\n- [Angular](https://angular.io)\n- [Bootstrap 4](https://getbootstrap.com)\n- [Font Awesome](http://fontawesome.io)\n- [RxJS](http://reactivex.io/rxjs)\n- [ng-bootstrap](https://ng-bootstrap.github.io)\n- [ngx-translate](https://github.com/ngx-translate/core)\n- [Lodash](https://lodash.com)\n\n#### Coding guides\n\n- [Angular](docs/coding-guides/angular.md)\n- [TypeScript](docs/coding-guides/typescript.md)\n- [Sass](docs/coding-guides/sass.md)\n- [HTML](docs/coding-guides/html.md)\n- [Unit tests](docs/coding-guides/unit-tests.md)\n- [End-to-end tests](docs/coding-guides/e2e-tests.md)\n\n#### Other documentation\n\n- [I18n guide](docs/i18n.md)\n- [Working behind a corporate proxy](docs/corporate-proxy.md)\n- [Updating dependencies and tools](docs/updating.md)\n- [Using a backend proxy for development](docs/backend-proxy.md)\n- [Browser routing](docs/routing.md)\n\n# Licence\n\nThe MIT License (MIT)\n\nCopyright (c) 2016-2018 Thales Services SAS\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the "Software"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n'