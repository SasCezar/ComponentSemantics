b"# hyperfine\n[![Build Status](https://travis-ci.org/sharkdp/hyperfine.svg?branch=master)](https://travis-ci.org/sharkdp/hyperfine)\n[![Build status](https://ci.appveyor.com/api/projects/status/pdqq5frgkcj0smrs?svg=true)](https://ci.appveyor.com/project/sharkdp/hyperfine)\n[![Version info](https://img.shields.io/crates/v/hyperfine.svg)](https://crates.io/crates/hyperfine)\n[\xe4\xb8\xad\xe6\x96\x87](https://github.com/chinanf-boy/hyperfine-zh)\n\nA command-line benchmarking tool.\n\n**Demo**: Benchmarking [`fd`](https://github.com/sharkdp/fd) and\n[`find`](https://www.gnu.org/software/findutils/):\n\n![hyperfine](https://i.imgur.com/EGMzTps.gif)\n\n## Features\n\n* Statistical analysis across multiple runs.\n* Support for arbitrary shell commands.\n* Constant feedback about the benchmark progress and current estimates.\n* Warmup runs can be executed before the actual benchmark.\n* Cache-clearing commands can be set up before each timing run.\n* Statistical outlier detection to detect interference from other programs and caching effects.\n* Export results to various formats: CSV, JSON, Markdown, AsciiDoc.\n* Parameterized benchmarks (e.g. vary the number of threads).\n* Cross-platform\n\n## Usage\n\n### Basic benchmark\n\nTo run a benchmark, you can simply call `hyperfine <command>...`. The argument(s) can be any\nshell command. For example:\n``` bash\nhyperfine 'sleep 0.3'\n```\n\nHyperfine will automatically determine the number of runs to perform for each command. By default,\nit will perform *at least* 10 benchmarking runs. To change this, you can use the `-m`/`--min-runs`\noption:\n``` bash\nhyperfine --min-runs 5 'sleep 0.2' 'sleep 3.2'\n```\n\n### Warmup runs and preparation commands\n\nIf the program execution time is limited by disk I/O, the benchmarking results can be heavily\ninfluenced by disk caches and whether they are cold or warm.\n\nIf you want to run the benchmark on a warm cache, you can use the `-w`/`--warmup` option to perform\na certain number of program executions before the actual benchmark:\n``` bash\nhyperfine --warmup 3 'grep -R TODO *'\n```\n\nConversely, if you want to run the benchmark for a cold cache, you can use the `-p`/`--prepare`\noption to run a special command before *each* timing run. For example, to clear harddisk caches\non Linux, you can run\n``` bash\nsync; echo 3 | sudo tee /proc/sys/vm/drop_caches\n```\nTo use this specific command with Hyperfine, call `sudo -v` to temporarily gain sudo permissions\nand then call:\n``` bash\nhyperfine --prepare 'sync; echo 3 | sudo tee /proc/sys/vm/drop_caches' 'grep -R TODO *'\n```\n\n### Parameterized benchmarks\n\nIf you want to run a benchmark where only a single parameter is varied (say, the number of\nthreads), you can use the `-P`/`--parameter-scan` option and call:\n``` bash\nhyperfine --prepare 'make clean' --parameter-scan num_threads 1 12 'make -j {num_threads}'\n```\nThis also works with decimal numbers. The `-D`/`--parameter-step-size` option can be used\nto control the step size:\n``` bash\nhyperfine --parameter-scan delay 0.3 0.7 -D 0.2 'sleep {delay}'\n```\nThis runs `sleep 0.3`, `sleep 0.5` and `sleep 0.7`.\n\n### Export results\n\nHyperfine has multiple options for exporting benchmark results: CSV, JSON, Markdown (see `--help`\ntext for details). To export results to Markdown, for example, you can use the `--export-markdown`\noption that will create tables like this:\n\n| Command | Mean [s] | Min [s] | Max [s] | Relative |\n|:---|---:|---:|---:|---:|\n| `find . -iregex '.*[0-9]\\.jpg$'` | 2.275 \xc2\xb1 0.046 | 2.243 | 2.397 | 9.79 \xc2\xb1 0.22 |\n| `find . -iname '*[0-9].jpg'` | 1.427 \xc2\xb1 0.026 | 1.405 | 1.468 | 6.14 \xc2\xb1 0.13 |\n| `fd -HI '.*[0-9]\\.jpg$'` | 0.232 \xc2\xb1 0.002 | 0.230 | 0.236 | 1.00 |\n\nThe JSON output is useful if you want to analyze the benchmark results in more detail. See the\n[`scripts/`](https://github.com/sharkdp/hyperfine/tree/master/scripts) folder for some examples.\n\n## Installation\n\n### On Ubuntu\n\nDownload the appropriate `.deb` package from the [Release page](https://github.com/sharkdp/hyperfine/releases)\nand install it via `dpkg`:\n```\nwget https://github.com/sharkdp/hyperfine/releases/download/v1.9.0/hyperfine_1.9.0_amd64.deb\nsudo dpkg -i hyperfine_1.9.0_amd64.deb\n```\n\n### On Fedora\n\nOn Fedora, hyperfine can be installed from the official repositories:\n\n```sh\ndnf install hyperfine\n```\n\n### On Alpine Linux\n\nOn Alpine Linux, hyperfine can be installed [from the official repositories](https://pkgs.alpinelinux.org/packages?name=hyperfine):\n```\napk add hyperfine\n```\n\n### On Arch Linux\n\nOn Arch Linux, hyperfine can be installed [from the official repositories](https://www.archlinux.org/packages/community/x86_64/hyperfine/):\n```\npacman -S hyperfine\n```\n\n### On NixOS\n\nOn NixOS, hyperfine can be installed [from the official repositories](https://nixos.org/nixos/packages.html?query=hyperfine):\n```\nnix-env -i hyperfine\n```\n\n### On Void Linux\n\nHyperfine can be installed via xbps\n\n```\nxbps-install -S hyperfine\n```\n\n### On macOS\n\nHyperfine can be installed via [Homebrew](https://brew.sh):\n```\nbrew install hyperfine\n```\n\n### On FreeBSD\n\nHyperfine can be installed via pkg:\n```\npkg install hyperfine\n```\n\n### With conda\n\nHyperfine can be installed via [`conda`](https://conda.io/en/latest/) from the [`conda-forge`](https://anaconda.org/conda-forge/hyperfine) channel:\n```\nconda install -c conda-forge hyperfine\n```\n\n### With cargo (Linux, macOS, Windows)\n\nHyperfine can be installed via [cargo](https://doc.rust-lang.org/cargo/):\n```\ncargo install hyperfine\n```\n\nMake sure that you use Rust 1.33 or higher.\n\n### From binaries (Linux, macOS, Windows)\n\nDownload the corresponding archive from the [Release page](https://github.com/sharkdp/hyperfine/releases).\n\n## Alternative tools\n\n Hyperfine is inspired by [bench](https://github.com/Gabriel439/bench).\n\n## Origin of the name\n\nThe name *hyperfine* was chosen in reference to the hyperfine levels of caesium 133 which play a crucial role in the\n[definition of our base unit of time](https://en.wikipedia.org/wiki/Second#History_of_definition)\n\xe2\x80\x94 the second.\n"