b'# Tokei ([\xe6\x99\x82\xe8\xa8\x88](https://en.wiktionary.org/wiki/%E6%99%82%E8%A8%88))\r\n[![Linux build status](https://img.shields.io/travis/XAMPPRocky/tokei.svg?branch=master)](https://travis-ci.org/XAMPPRocky/tokei)\r\n[![Windows build status](https://ci.appveyor.com/api/projects/status/github/XAMPPRocky/tokei?svg=true)](https://ci.appveyor.com/project/XAMPPRocky/tokei)\r\n[![](https://img.shields.io/crates/d/tokei.svg)](https://crates.io/crates/tokei)\r\n[![](https://img.shields.io/github/issues-raw/XAMPPRocky/tokei.svg)](https://github.com/XAMPPRocky/tokei/issues)\r\n[![](https://tokei.rs/b1/github/XAMPPRocky/tokei?category=code)](https://github.com/XAMPPRocky/tokei)\r\n[![Documentation](https://docs.rs/tokei/badge.svg)](https://docs.rs/tokei/)\r\n\r\nTokei is a program that displays statistics about your code. Tokei will show number of files, total lines within those files and code, comments, and blanks grouped by language.\r\n\r\n### Translations\r\n- [\xe4\xb8\xad\xe6\x96\x87](https://github.com/chinanf-boy/tokei-zh#\xe6\x94\xaf\xe6\x8c\x81\xe7\x9a\x84\xe8\xaf\xad\xe8\xa8\x80)\r\n\r\n## Example\r\n```terminal\r\n-------------------------------------------------------------------------------\r\n Language            Files        Lines         Code     Comments       Blanks\r\n-------------------------------------------------------------------------------\r\n Dockerfile              1           64           36           14           14\r\n JSON                    1         1919         1919            0            0\r\n Markdown                5         1952         1952            0            0\r\n Rust                   19         2922         2093          412          417\r\n Shell                   4          138          102            8           28\r\n TOML                    1           78           66            0           12\r\n YAML                    1           80           60            8           12\r\n-------------------------------------------------------------------------------\r\n Total                  32         7153         6228          442          483\r\n-------------------------------------------------------------------------------\r\n```\r\n\r\n## [Documentation](https://docs.rs/tokei)\r\n\r\n## Table of Contents\r\n\r\n- [Features](#features)\r\n- [Installation](#installation)\r\n    - [Automatic](#automatic)\r\n        - [Arch Linux](#arch-linux)\r\n        - [Cargo](#cargo)\r\n        - [Conda](#conda)\r\n        - [Fedora](#fedora)\r\n        - [FreeBSD](#freebsd)\r\n        - [Homebrew](#homebrew)\r\n        - [Nix/NixOS](#nixnixos)\r\n    - [Manual](#manual)\r\n- [How to use Tokei](#how-to-use-tokei)\r\n- [Options](#options)\r\n- [Badges](#badges)\r\n- [Plugins](#plugins)\r\n- [Supported Languages](#supported-languages)\r\n- [Changelog](CHANGELOG.md)\r\n- [Common Issues](#common-issues)\r\n- [Canonical Source](#canonical-source)\r\n- [Copyright and License](#copyright-and-license)\r\n\r\n## Features\r\n\r\n- Tokei is **very fast**, check out our [comparison](./COMPARISON.md) document\r\n  to see how Tokei\'s speed compares to others.\r\n\r\n- Tokei is **accurate**, Tokei correctly handles multi line comments,\r\n  nested comments, and not counting comments that are in strings. Providing an\r\n  accurate code statistics.\r\n\r\n- Tokei has huge range of languages, supporting over **150** languages, and\r\n  their various extensions.\r\n\r\n- Tokei can output in multiple formats(**CBOR**, **JSON**, **TOML**, **YAML**)\r\n  allowing Tokei\'s output to be easily stored, and reused. These can also be\r\n  reused in tokei combining a previous run\'s statistics with another set.\r\n\r\n- Tokei is available on **Mac**, **Linux**, and **Windows**. See [installation\r\n  instructions](#installation) for how to get Tokei on your platform.\r\n\r\n- Tokei is also a **library** allowing you to easily integrate it with other\r\n  projects.\r\n\r\n## Installation\r\n\r\n### Automatic\r\n\r\n#### Arch Linux\r\n```shell\r\n$ pacman -S tokei\r\n```\r\n\r\n#### Cargo\r\n```shell\r\n$ cargo install tokei\r\n```\r\n\r\n#### Conda\r\n```shell\r\n$ conda install -c conda-forge tokei\r\n```\r\n\r\n#### Fedora\r\n```shell\r\n$ sudo dnf install tokei\r\n```\r\n\r\n### OpenSUSE\r\n```shell\r\n$ sudo zypper install tokei\r\n```\r\n\r\n#### FreeBSD\r\n```shell\r\n$ pkg install tokei\r\n```\r\n\r\n#### Homebrew\r\n```shell\r\n$ brew install tokei\r\n```\r\n\r\n#### Nix/NixOS\r\n```shell\r\n$ nix-env -i tokei\r\n```\r\n\r\n### In a container\r\n\r\nLaunch the Docker container by supplying the path as a volume in read only mode:\r\n\r\n```shell\r\n$ docker run -v ~/Development/code/myproject/foo:/data:ro mbologna/docker-tokei\r\n```\r\nor\r\n```shell\r\n$ docker run -v ~/Development/code/myproject/foo:/data:ro mbologna/docker-tokei tokei --sort lines\r\n```\r\n\r\n### Manual\r\nYou can download prebuilt binaries in the\r\n[releases section](https://github.com/XAMPPRocky/tokei/releases), or create\r\nfrom source.\r\n```shell\r\n$ git clone https://github.com/XAMPPRocky/tokei.git\r\n$ cd tokei\r\n$ cargo build --release\r\n```\r\n##### Linux\r\n```\r\n# sudo mv target/release/tokei /usr/local/bin\r\n```\r\n##### OSX\r\n```\r\n# sudo mv target/release/tokei /usr/local/bin/tokei\r\n```\r\n##### Windows\r\n- Create a folder for tokei\r\n- search for `env`\r\n- open "edit your environment variables"\r\n- edit `PATH`\r\n- append folder path to the end of the string ie: `<path_stuff_here>;C:/tokei/;`\r\n\r\n## How to use Tokei\r\n\r\n#### Basic usage\r\n\r\nThis is the basic way to use tokei. Which will report on the code in `./foo`\r\nand all subfolders.\r\n\r\n```shell\r\n$ tokei ./foo\r\n```\r\n\r\n#### Multiple folders\r\nTo have tokei report on multiple folders in the same call simply add a comma,\r\nor a space followed by another path.\r\n\r\n```shell\r\n$ tokei ./foo ./bar ./baz\r\n```\r\n```shell\r\n$ tokei ./foo, ./bar, ./baz\r\n```\r\n\r\n#### Excluding folders\r\nTokei will respect all `.gitignore` and `.ignore` files, and you can use\r\nthe `--exclude` option to exclude any additional files. The `--exclude` flag has\r\nthe same semantics as `.gitignore`.\r\n\r\n```shell\r\n$ tokei ./foo --exclude *.rs\r\n```\r\n\r\n#### Sorting output\r\nBy default tokei sorts alphabetically by language name, however using `--sort`\r\ntokei can also sort by any of the columns.\r\n\r\n`blanks, code, comments, lines`\r\n\r\n```shell\r\n$ tokei ./foo --sort code\r\n```\r\n\r\n#### Outputting file statistics\r\nBy default tokei only outputs the total of the languages, and using `--files`\r\nflag tokei can also output individual file statistics.\r\n\r\n```shell\r\n$ tokei ./foo --files\r\n```\r\n\r\n#### Outputting into different formats\r\nTokei normally outputs into a nice human readable format designed for terminals.\r\nThere is also using the `--output` option various other formats that are more\r\nuseful for bringing the data into another program.\r\n\r\n**Note:** This version of tokei was compiled without any serialization formats, to enable serialization, reinstall\r\ntokei with the features flag.\r\n\r\n```shell\r\n  ALL:\r\n  cargo install tokei --features all\r\n\r\n  JSON:\r\n  cargo install tokei --features json\r\n\r\n  CBOR:\r\n  cargo install tokei --features cbor\r\n\r\n  YAML:\r\n  cargo install tokei --features yaml\r\n\r\n  CBOR:\r\n  cargo install tokei --features cbor\r\n```\r\n\r\n**Currently supported formats**\r\n- JSON `--output json`\r\n- YAML `--output yaml`\r\n- TOML `--output toml`\r\n- CBOR `--output cbor`\r\n\r\n```shell\r\n$ tokei ./foo --output json\r\n```\r\n\r\n#### Reading in stored formats\r\nTokei can also take in the outputted formats added in the previous results to it\'s\r\ncurrent run. Tokei can take either a path to a file, the format passed in as a\r\nvalue to the option, or from stdin.\r\n\r\n```shell\r\n$ tokei ./foo --input ./stats.json\r\n```\r\n\r\n## Options\r\n\r\n```\r\nUSAGE:\r\n    tokei [FLAGS] [OPTIONS] [--] [input]...\r\n\r\nFLAGS:\r\n    -f, --files               Will print out statistics on individual files.\r\n    -h, --help                Prints help information\r\n        --hidden              Count hidden files.\r\n    -l, --languages           Prints out supported languages and their extensions.\r\n        --no-ignore           Don\'t respect ignore files.\r\n        --no-ignore-parent    Don\'t respect ignore files in parent directories.\r\n        --no-ignore-vcs       Don\'t respect VCS ignore files.\r\n    -V, --version             Prints version information\r\n    -v, --verbose             Set log output level:\r\n                                          1: to show unknown file extensions,\r\n                                          2: reserved for future debugging,\r\n                                          3: enable file level trace. Not recommended on multiple files\r\n\r\nOPTIONS:\r\n    -c, --columns <columns>       Sets a strict column width of the output, only available for terminal output.\r\n    -e, --exclude <exclude>...    Ignore all files & directories containing the word.\r\n    -i, --input <file_input>      Gives statistics from a previous tokei run. Can be given a file path, or "stdin" to\r\n                                  read from stdin.\r\n    -o, --output <output>         Outputs Tokei in a specific format. Compile with additional features for more format\r\n                                  support. [possible values: cbor, json, yaml]\r\n    -s, --sort <sort>             Sort languages based on column [possible values: files, lines, blanks, code, comments]\r\n    -t, --type <types>            Filters output by language type, seperated by a comma. i.e. -t=Rust,Markdown\r\n\r\nARGS:\r\n    <input>...    The input file(s)/directory(ies) to be counted.\r\n```\r\n\r\n## Badges\r\nTokei has support for badges. For example\r\n[![](https://tokei.rs/b1/github/XAMPPRocky/tokei)](https://github.com/XAMPPRocky/tokei).\r\n\r\n```\r\n[![](https://tokei.rs/b1/github/XAMPPRocky/tokei)](https://github.com/XAMPPRocky/tokei).\r\n```\r\n\r\nTokei\'s URL scheme is as follows.\r\n\r\n```\r\nhttps://tokei.rs/b1/{host: values: github|gitlab}/{Repo Owner eg: XAMPPRocky}/{Repo name eg: tokei}\r\n```\r\n\r\nBy default the badge will show the repo\'s LoC(_Lines of Code_), you can also\r\nspecify for it to show a different category, by using the `?category=` query\r\nstring. It can be either `code`, `blanks`, `files`, `lines`, `comments`,\r\nExample show total lines:\r\n\r\n```\r\n[![](https://tokei.rs/b1/github/XAMPPRocky/tokei?category=lines)](https://github.com/XAMPPRocky/tokei).\r\n```\r\n\r\nThe server code hosted on tokei.rs is in [XAMPPRocky/tokei_rs](https://github.com/XAMPPRocky/tokei_rs)\r\n\r\n## Plugins\r\nThanks to contributors tokei is now available as a plugin for some text editors.\r\n\r\n- [Vim](https://github.com/vmchale/tokei-vim) by [vmchale](https://github.com/vmchale/)\r\n\r\n## Supported Languages\r\n\r\nIf there is a language that you want added, feel free to submit a pull request\r\nwith the following information. If you\'re unsure have a look at\r\n[`languages.json`](./languages.json) to see how other languages are defined.\r\n\r\n- Name of language\r\n- File Extension(s)\r\n- The comment syntax (_Does it have block comments? is it the same as C?_)\r\n- The string literal syntax\r\n\r\n```\r\nABAP\r\nActionScript\r\nAda\r\nAgda\r\nAlex\r\nASP\r\nASP.NET\r\nAssembly\r\nAutoHotKey\r\nAutoconf\r\nAutomake\r\nBASH\r\nBatch\r\nBrightScript\r\nC\r\nC Header\r\nCMake\r\nC#\r\nC Shell\r\nCabal\r\nCassius\r\nCeylon\r\nClojure\r\nClojureC\r\nClojureScript\r\nCOBOL\r\nCoffeeScript\r\nCogent\r\nColdFusion\r\nColdFusion CFScript\r\nCoq\r\nC++\r\nC++ Header\r\nCrystal\r\nCSS\r\nD\r\nDart\r\nDevice Tree\r\nDockerfile\r\n.NET Resource\r\nDream Maker\r\nEdn\r\nEmacs Lisp\r\nElixir\r\nElm\r\nElvish\r\nEmacs Dev Env\r\nErlang\r\nFEN\r\nF#\r\nFish\r\nForth\r\nFORTRAN Legacy\r\nFORTRAN Modern\r\nF*\r\nGDScript\r\nGherkin (Cucumber)\r\nGLSL\r\nGo\r\nGroovy\r\nHamlet\r\nHandlebars\r\nHappy\r\nHaskell\r\nHaxe\r\nHCL\r\nHEX\r\nHLSL\r\nHolyC\r\nHTML\r\nIdris\r\nINI\r\nIntel HEX\r\nIsabelle\r\nJAI\r\nJava\r\nJavaScript\r\nJSON\r\nJSX\r\nJulia\r\nJulius\r\nKakoune script\r\nKotlin\r\nLean\r\nLESS\r\nLD Script\r\nLiquid\r\nLisp\r\nLogtalk\r\nLua\r\nLucius\r\nMadlang\r\nMakefile\r\nMarkdown\r\nMeson\r\nMint\r\nModule-Definition\r\nMSBuild\r\nMustache\r\nNim\r\nNix\r\nNot Quite Perl\r\nOCaml\r\nObjective-C\r\nObjective-C++\r\nOrg\r\nOz\r\nPSL Assertion\r\nPascal\r\nPerl\r\nPerl6\r\nPHP\r\nPolly\r\nProcessing\r\nProlog\r\nProtocol Buffers\r\nPureScript\r\nPython\r\nQCL\r\nQML\r\nR\r\nRacket\r\nRakefile\r\nRazor\r\nReStructuredText\r\nRuby\r\nRuby HTML\r\nRust\r\nSRecode Template\r\nSass\r\nScala\r\nScheme\r\nScons\r\nShell\r\nStandard ML (SML)\r\nSolidity\r\nSpecman e\r\nSpice Netlist\r\nSQL\r\nSVG\r\nSwift\r\nSWIG\r\nSystemVerilog\r\nTCL\r\nTeX\r\nPlain Text\r\nTOML\r\nTwig\r\nTypeScript\r\nUnreal Markdown\r\nUnreal Plugin\r\nUnreal Project\r\nUnreal Script\r\nUnreal Shader\r\nUnreal Shader Header\r\nUr/Web\r\nUr/Web Project\r\nVB6\r\nVBScript\r\nVala\r\nVerilog\r\nVerilog Args File\r\nVHDL\r\nVim Script\r\nVisual Basic\r\nVisual Studio Project\r\nVisual Studio Solution\r\nVue\r\nWolfram\r\nXSL\r\nXAML\r\nXcode Config\r\nXML\r\nXtend\r\nYAML\r\nZig\r\nZsh\r\n```\r\n\r\n## Common issues\r\n\r\n### Tokei says I have a lot of D code, but I know there is no D code!\r\nThis is likely due to `gcc` generating `.d` files. Until the D people decide on\r\na different file extension, you can always exclude `.d` files using the\r\n`-e --exclude` flag like so\r\n\r\n```\r\n$ tokei . -e *.d\r\n```\r\n\r\n## Canonical Source\r\nThe canonical source of this repo is hosted on\r\n[GitHub](https://github.com/XAMPPRocky/tokei). If you have a GitHub account,\r\nplease make your issues, and pull requests there.\r\n\r\n## Copyright and License\r\n(C) Copyright 2015 by Aaron Power and contributors\r\n\r\nSee CONTRIBUTORS.md for a full list of contributors.\r\n\r\nTokei is distributed under the terms of both the MIT license and the Apache License (Version 2.0).\r\n\r\nSee [LICENCE-APACHE](./LICENCE-APACHE), [LICENCE-MIT](./LICENCE-MIT) for more information.\r\n'