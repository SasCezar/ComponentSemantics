b'# An easy to use Fractal wrapper built for Laravel and Lumen applications\n\n[![Latest Version on Packagist](https://img.shields.io/packagist/v/spatie/laravel-fractal.svg?style=flat-square)](https://packagist.org/packages/spatie/laravel-fractal)\n[![Code coverage](https://scrutinizer-ci.com/g/spatie/laravel-fractal/badges/coverage.png)](https://scrutinizer-ci.com/g/spatie/laravel-fractal)\n[![Build Status](https://travis-ci.org/spatie/laravel-fractal.svg?branch=master)](https://travis-ci.org/spatie/laravel-fractal)\n[![Quality Score](https://img.shields.io/scrutinizer/g/spatie/laravel-fractal.svg?style=flat-square)](https://scrutinizer-ci.com/g/spatie/laravel-fractal)\n[![StyleCI](https://styleci.io/repos/43743138/shield?branch=master)](https://styleci.io/repos/43743138)\n[![Total Downloads](https://img.shields.io/packagist/dt/spatie/laravel-fractal.svg?style=flat-square)](https://packagist.org/packages/spatie/laravel-fractal)\n\nThe package provides a nice and easy wrapper around [Fractal](http://fractal.thephpleague.com/)\nfor use in your Laravel applications. If you don\'t know what Fractal does, [take a peek at their intro](http://fractal.thephpleague.com/).\nShortly said, Fractal is very useful to transform data before using it in an API.\n\nUsing Fractal data can be transformed like this:\n\n```php\nuse League\\Fractal\\Manager;\nuse League\\Fractal\\Resource\\Collection;\n\n$books = [\n   [\'id\'=>1, \'title\'=>\'Hogfather\', \'characters\' => [...]],\n   [\'id\'=>2, \'title\'=>\'Game Of Kill Everyone\', \'characters\' => [...]]\n];\n\n$manager = new Manager();\n\n$resource = new Collection($books, new BookTransformer());\n\n$manager->parseIncludes(\'characters\');\n\n$manager->createData($resource)->toArray();\n```\n\nThis package makes that process a tad easier:\n\n```php\nfractal()\n   ->collection($books)\n   ->transformWith(new BookTransformer())\n   ->includeCharacters()\n   ->toArray();\n```\n\nLovers of facades will be glad to know that a facade is provided:\n```php\nFractal::collection($books)->transformWith(new BookTransformer())->toArray();\n```\n\nThere\'s also a very short syntax available to quickly transform data:\n\n```php\nfractal($books, new BookTransformer())->toArray();\n```\n\nYou can transform directly from a Laravel collection as well:\n\n```php\ncollect($books)->transformWith(new BookTransformer());\n```\n\nTransforming right from a Laravel collection is particularly useful for Eloquent results:\n\n```php\nUsers::all()->transformWith(new UserTransformer())->toArray();\n```\n\nSpatie is a webdesign agency based in Antwerp, Belgium. You\'ll find an overview of all\nour open source projects [on our website](https://spatie.be/opensource).\n\n## Installation in Laravel 5.4\n\n\nYou can pull in the package via composer:\n```bash\ncomposer require spatie/laravel-fractal:^4.0\n```\n\nAnd then follow [the installation instructions of the v4 branch of this package](https://github.com/spatie/laravel-fractal/tree/4.5.0#install).\n\n## Installation in Laravel 5.5 and up\n\nYou can pull in the package via composer:\n``` bash\ncomposer require spatie/laravel-fractal\n```\n\nThe package will automatically register itself.\n\nIf you want to [change the default serializer](https://github.com/spatie/fractalistic#changing-the-default-serializer),\nthe [default paginator](https://github.com/spatie/fractalistic#using-pagination),\nor the default fractal class `Spatie\\Fractal\\Fractal`\nyou must publish the config file:\n\n```bash\nphp artisan vendor:publish --provider="Spatie\\Fractal\\FractalServiceProvider"\n```\n\n> If you\'re upgrading to Laravel 5.5, the existing config file should be renamed from _laravel-fractal.php_ to _fractal.php_\n\nThis is the contents of the published file:\n\n```php\nreturn [\n     /*\n     * The default serializer to be used when performing a transformation. It\n     * may be left empty to use Fractal\'s default one. This can either be a\n     * string or a League\\Fractal\\Serializer\\SerializerAbstract subclass.\n     */\n    \'default_serializer\' => \'\',\n\n    /* The default paginator to be used when performing a transformation. It\n     * may be left empty to use Fractal\'s default one. This can either be a\n     * string or a League\\Fractal\\Paginator\\PaginatorInterface subclass.*/\n    \'default_paginator\' => \'\',\n\n    /*\n     * League\\Fractal\\Serializer\\JsonApiSerializer will use this value to\n     * as a prefix for generated links. Set to `null` to disable this.\n     */\n    \'base_url\' => null,\n\n    /*\n     * If you wish to override or extend the default Spatie\\Fractal\\Fractal\n     * instance provide the name of the class you want to use.\n     */\n    \'fractal_class\' => Spatie\\Fractal\\Fractal::class,\n\n    \'auto_includes\' => [\n\n        /*\n         * If enabled Fractal will automatically add the includes who\'s\n         * names are present in the `include` request parameter.\n         */\n        \'enabled\' => true,\n\n        /*\n         * The name of key in the request to where we should look for the includes to include.\n         */\n        \'request_key\' => \'include\',\n    ],\n```\n\n## Usage\n\nRefer to [the documentation of `spatie/fractalistic`](https://github.com/spatie/fractalistic) to learn all the methods this package provides.\n\nIn all code examples you may use `fractal()` instead of `Fractal::create()`.\n\n## Send a response with transformed data\n\nTo return a response with json data you can do this in a Laravel app.\n\n```php\n$books = fractal($books, new BookTransformer())->toArray();\n\nreturn response()->json($books);\n```\n\nThe `respond()` method on the Fractal class can make this process a bit more streamlined.\n\n```php\nreturn fractal($books, new BookTransformer())->respond();\n```\n\nYou can pass a response code as the first parameter and optionally some headers as the second\n\n```php\nreturn fractal($books, new BookTransformer())->respond(403, [\n    \'a-header\' => \'a value\',\n    \'another-header\' => \'another value\',\n]);\n```\n\nYou can pass json encoding options as the third parameter:\n\n```php\nreturn fractal($books, new BookTransformer())->respond(200, [], JSON_PRETTY_PRINT);\n```\n\nYou can also set the status code and the headers using a callback:\n\n```php\nuse Illuminate\\Http\\JsonResponse;\n\nreturn fractal($books, new BookTransformer())->respond(function(JsonResponse $response) {\n    $response\n        ->setStatusCode(403)\n        ->header(\'a-header\', \'a value\')\n        ->withHeaders([\n            \'another-header\' => \'another value\',\n            \'yet-another-header\' => \'yet another value\',\n        ]);\n});\n```\n\nYou can add methods to the Fractal class using Laravel\'s Macroable trait. Imagine you want to add some stats to the metadata of your request, you can do so without cluttering your code:\n\n```php\nuse Spatie\\Fractal\\Fractal;\n\nFractal::macro(\'stats\', function ($stats) {\n    // transform the passed stats as necessary here\n    return $this->appendMeta([\'stats\' => $stats]);\n});\n\nfractal($books, new BookTransformer())->stats([\'runtime\' => 100])->respond();\n```\n\n## Quickly creating a transformer\n\nYou can run the `make:transformer` command to quickly generate a dummy transformer. By default it will be stored in the `app\\Transformers` directory.\n\n## Upgrading\n\n## From v4 to v5\n\nRename your config file from `laravel-fractal` to `fractal`\n\n### From v2 to v3\n\n`v3` was introduced to swap out the `league/fractal` with `spatie/fractalistic`. Support for Lumen was dropped. You should be able to upgrade a Laravel application from `v2` to `v3` without any code changes.\n### From v1 to v2\n\nIn most cases you can just upgrade to `v2` with making none or only minor changes to your code:\n\n- `resourceName` has been renamed to `withResourceName`.\n\nThe main reason why `v2` of this package was tagged is because v0.14 of the underlying [Fractal](http://fractal.thephpleague.com/) by the League contains breaking change. If you use the `League\\Fractal\\Serializer\\JsonApiSerializer` in v2 the `links` key will contain `self`, `first`, `next` and `last`.\n\n## Changelog\n\nPlease see [CHANGELOG](CHANGELOG.md) for more information what has changed recently.\n\n## Testing\n\n``` bash\n$ composer test\n```\n\n## Contributing\n\nPlease see [CONTRIBUTING](CONTRIBUTING.md) for details.\n\n## Security\n\nIf you discover any security related issues, please email freek@spatie.be instead of using the issue tracker.\n\n## Postcardware\n\nYou\'re free to use this package, but if it makes it to your production environment we highly appreciate you sending us a postcard from your hometown, mentioning which of our package(s) you are using.\n\nOur address is: Spatie, Samberstraat 69D, 2060 Antwerp, Belgium.\n\nWe publish all received postcards [on our company website](https://spatie.be/en/opensource/postcards).\n\n## Credits\n\n- [Freek Van der Herten](https://twitter.com/freekmurze)\n- [All contributors](../../contributors)\n\n## Support us\n\nSpatie is a webdesign agency based in Antwerp, Belgium. You\'ll find an overview of all our open source projects [on our website](https://spatie.be/opensource).\n\nDoes your business depend on our contributions? Reach out and support us on [Patreon](https://www.patreon.com/spatie).\nAll pledges will be dedicated to allocating workforce on maintenance and new awesome stuff.\n\n## License\n\nThe MIT License (MIT). Please see [License File](LICENSE.md) for more information.\n'