b'# Laravel Localization\n\n[![Join the chat at https://gitter.im/mcamara/laravel-localization](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/mcamara/laravel-localization?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n[![Latest Stable Version](https://poser.pugx.org/mcamara/laravel-localization/version.png)](https://packagist.org/packages/mcamara/laravel-localization) [![Total Downloads](https://poser.pugx.org/mcamara/laravel-localization/d/total.png)](https://packagist.org/packages/mcamara/laravel-localization) [![Build Status](https://travis-ci.org/mcamara/laravel-localization.png)](https://travis-ci.org/mcamara/laravel-localization)\n[![Open Source Helpers](https://www.codetriage.com/mcamara/laravel-localization/badges/users.svg)](https://www.codetriage.com/mcamara/laravel-localization)\n[![Reviewed by Hound](https://img.shields.io/badge/Reviewed_by-Hound-8E64B0.svg)](https://houndci.com)\n\nEasy i18n localization for Laravel, an useful tool to combine with Laravel localization classes.\n\nThe package offers the following:\n\n - Detect language from browser\n - Smart redirects (Save locale in session/cookie)\n - Smart routing (Define your routes only once, no matter how many languages you use)\n - Translatable Routes\n - Supports caching & testing\n - Option to hide default locale in url\n - Many snippets and helpers (like language selector)\n\n## Table of Contents\n\n- <a href="#installation">Installation</a>\n- <a href="#usage">Usage</a>\n- <a href="#redirect-middleware">Redirect Middleware</a>\n- <a href="#helpers">Helpers</a>\n- <a href="#translated-routes">Translated Routes</a>\n- <a href="#caching-routes">Caching routes</a>\n- <a href="#testing">Testing</a>\n- <a href="#common-issues">Common Issues</a>\n    - <a href="#post-is-not-working">POST is not working</a>\n    - <a href="#methodnotallowedhttpexception">MethodNotAllowedHttpException</a>\n    - <a href="#validation-message-is-only-in-default-locale">Validation message is always in default locale</a>\n- <a href="#collaborators">Collaborators</a>\n- <a href="#changelog">Changelog</a>\n- <a href="#license">License</a>\n\n## Laravel compatibility\n\n Laravel      | laravel-localization\n:-------------|:----------\n 4.0.x        | 0.13.x\n 4.1.x        | 0.13.x\n 4.2.x        | 0.15.x\n 5.0.x/5.1.x  | 1.0.x\n 5.2.x-5.4.x (PHP 7 not required)  | 1.2.x\n 5.2.x-5.8.x (PHP 7 required) | 1.3.x\n 5.2.0-6.x (PHP 7 required) | 1.4.x\n\n## Installation\n\nInstall the package via composer: `composer require mcamara/laravel-localization`\n\nFor Laravel 5.4 and below it necessary to [register the service provider](/ADDITIONS.md#for-laravel-5.4-and-below).\n\n### Config Files\n\nIn order to edit the default configuration you may execute:\n\n```\nphp artisan vendor:publish --provider="Mcamara\\LaravelLocalization\\LaravelLocalizationServiceProvider"\n```\n\nAfter that, `config/laravellocalization.php` will be created.\n\nThe configuration options are:\n\n - **supportedLocales** Langauges of your app (Default: English & Spanish).\n - **useAcceptLanguageHeader** If true, then automatically detect language from browser.\n - **hideDefaultLocaleInURL** If true, then do not show default locale in url.\n - **localesOrder** Sort languages in custom order.\n - **localesMapping** Rename url locales.\n - **utf8suffix** Allow changing utf8suffix for CentOS etc.\n - **urlsIgnored** Ignore specific urls.\n\n### Register Middleware\n\nYou may register the package middleware in the `app/Http/Kernel.php` file:\n\n```php\n<?php namespace App\\Http;\n\nuse Illuminate\\Foundation\\Http\\Kernel as HttpKernel;\n\nclass Kernel extends HttpKernel {\n    /**\n    * The application\'s route middleware.\n    *\n    * @var array\n    */\n    protected $routeMiddleware = [\n        /**** OTHER MIDDLEWARE ****/\n        \'localize\'                => \\Mcamara\\LaravelLocalization\\Middleware\\LaravelLocalizationRoutes::class,\n        \'localizationRedirect\'    => \\Mcamara\\LaravelLocalization\\Middleware\\LaravelLocalizationRedirectFilter::class,\n        \'localeSessionRedirect\'   => \\Mcamara\\LaravelLocalization\\Middleware\\LocaleSessionRedirect::class,\n        \'localeCookieRedirect\'    => \\Mcamara\\LaravelLocalization\\Middleware\\LocaleCookieRedirect::class,\n        \'localeViewPath\'          => \\Mcamara\\LaravelLocalization\\Middleware\\LaravelLocalizationViewPath::class\n    ];\n}\n```\n\n## Usage\n\nAdd the following to your routes file:\n\n```php\n// routes/web.php\n\nRoute::group([\'prefix\' => LaravelLocalization::setLocale()], function()\n{\n\t/** ADD ALL LOCALIZED ROUTES INSIDE THIS GROUP **/\n\tRoute::get(\'/\', function()\n\t{\n\t\treturn View::make(\'hello\');\n\t});\n\n\tRoute::get(\'test\',function(){\n\t\treturn View::make(\'test\');\n\t});\n});\n\n/** OTHER PAGES THAT SHOULD NOT BE LOCALIZED **/\n\n```\n\nOnce this route group is added to the routes file, a user can access all locales added into `supportedLocales` (`en` and `es` by default).\nFor example, the above route file creates the following addresses:\n\n```\n// Set application language to English\nhttp://url-to-laravel/en\nhttp://url-to-laravel/en/test\n\n// Set application language to Spanish\nhttp://url-to-laravel/es\nhttp://url-to-laravel/es/test\n\n// Set application language to English or Spanish (depending on browsers default locales)\n// if nothing found set to default locale\nhttp://url-to-laravel\nhttp://url-to-laravel/test\n```\nThe package sets your application locale `App::getLocale()` according to your url. The locale may then be used for [Laravel\'s localization features](http://laravel.com/docs/localization).\n\nYou may add middleware to your group like this:\n\n```php\nRoute::group(\n[\n\t\'prefix\' => LaravelLocalization::setLocale(),\n\t\'middleware\' => [ \'localeSessionRedirect\', \'localizationRedirect\', \'localeViewPath\' ]\n], function(){ //...\n});\n```\n\n### Recommendations\n\n***1.***: It is **strongly** recommended to use a [redirecting middleware](#redirect-middleware).\nUrls without locale should only be used to determine browser/default locale and to redirect to the [localized url](#localized-urls).\nOtherwise, when search engine robots crawl for example `http://url-to-laravel/test` they may get different language content for each visit.\nAlso having multiple urls for the same content creates a SEO duplicate-content issue.\n\n***2.***: It is **strongly** recommended to [localize your links](#localized-urls), even if you use a redirect middleware.\nOtherwise, you will cause at least one redirect each time a user clicks on a link.\nAlso, any action url from a post form must be localized, to prevent that it gets redirected to a get request.\n\n\n## Redirect Middleware\n\nThe following redirection middleware depends on the settings of `hideDefaultLocaleInURL`\nand `useAcceptLanguageHeader` in `config/laravellocalization.php`:\n\n### LocaleSessionRedirect\n\nWhenever a locale is present in the url, it will be stored in the session by this middleware.\n\nIn there is no locale present in the url, then this middleware will check the following\n\n - If no locale is saved in session and `useAcceptLanguageHeader` is set to true, compute locale from browser and redirect to url with locale.\n - If a locale is saved in session redirect to url with locale, unless its the default locale and `hideDefaultLocaleInURL` is set to true.\n\nFor example, if a user navigates to http://url-to-laravel/test  and `en` is the current locale, it would redirect him automatically to http://url-to-laravel/en/test.\n\n### LocaleCookieRedirect\n\nSimilar to LocaleSessionRedirect, but it stores value in a cookie instead of a session.\n\nWhenever a locale is present in the url, it will be stored in the session by this middleware.\n\nIn there is no locale present in the url, then this middleware will check the following\n\n - If no locale is saved in cookie and `useAcceptLanguageHeader` is set to true, compute locale from browser and redirect to url with locale.\n - If a locale is saved in cookie redirect to url with locale, unless its the default locale and `hideDefaultLocaleInURL` is set to true.\n\nFor example, if a user navigates to http://url-to-laravel/test  and `de` is the current locale, it would redirect him automatically to http://url-to-laravel/de/test.\n\n\n### LaravelLocalizationRedirectFilter\n\nWhen the default locale is present in the url and `hideDefaultLocaleInURL` is set to true, then the middleware redirects to the url without locale.\n\nFor example, if `es` is the default locale, then http://url-to-laravel/es/test would be redirected to http://url-to-laravel/test and the`App::getLocale()` would be\nset to `es`.\n\n\n## Helpers\n\nThis package comes with a bunch of helpers.\n\n### Localized URLs\nLocalized URLS  taken into account [route model binding]([https://laravel.com/docs/master/routing#route-model-binding]) when generating the localized route,\naswell as the `hideDefaultLocaleInURL` and [Translated Routes](#translated-routes) settings.\n\n\n#### Get localized URL\n\n```php\n    // If current locale is Spanish, it returns `/es/test`\n    <a href="{{ LaravelLocalization::localizeUrl(\'(/test)\') }}">@lang(\'Follow this link\')</a>\n```\n\n#### Get localized URL for an specific locale\nGet current URL in specific locale:\n\n```php\n// Returns current url with English locale.\n{{ LaravelLocalization::getLocalizedURL(\'en\') }}\n```\n\n### Get Clean routes\n\nReturns a URL clean of any localization.\n\n```php\n// Returns /about\n{{ LaravelLocalization::getNonLocalizedURL(\'/es/about\') }}\n```\n\n### Get URL for an specific translation key\n\nReturns a route, [localized](#translated-routes) to the desired locale. If the translation key does not exist in the locale given, this function will return false.\n\n\n```php\n// Returns /es/acerca\n{{ LaravelLocalization::getURLFromRouteNameTranslated(\'es\', \'routes.about\') }}\n```\n\n\n### Get Supported Locales\n\nReturn all supported locales and their properties as an array.\n\n```php\n{{ LaravelLocalization::getSupportedLocales() }}\n```\n\n\n\n### Get Supported Locales Custom Order\n\nReturn all supported locales but in the order specified in the configuration file. You can use this function to print locales in the language selector.\n\n```php\n{{ LaravelLocalization::getLocalesOrder() }}\n```\n\n### Get Supported Locales Keys\n\nReturn an array with all the keys for the supported locales.\n\n```php\n{{ LaravelLocalization::getSupportedLanguagesKeys() }}\n```\n\n### Get Current Locale\n\nReturn the key of the current locale.\n\n```php\n{{ LaravelLocalization::getCurrentLocale() }}\n```\n\n### Get Current Locale Name\nReturn current locale\'s name as string (English/Spanish/Arabic/ ..etc).\n\n```php\n{{ LaravelLocalization::getCurrentLocaleName() }}\n```\n\n### Get Current Locale Direction\n\nReturn current locale\'s direction as string (ltr/rtl).\n\n\n```php\n{{ LaravelLocalization::getCurrentLocaleDirection() }}\n```\n\n\n\n### Get Current Locale Script\nReturn the [ISO 15924](http://www.unicode.org/iso15924) code for the current locale script as a string; "Latn", "Cyrl", "Arab", etc.\n\n```php\n{{ LaravelLocalization::getCurrentLocaleScript() }}\n```\n\n### Set view-base-path to current locale\n\nRegister the middleware `LaravelLocalizationViewPath` to set current locale as view-base-path.\n\nNow you can wrap your views in language-based folders like the translation files.\n\n`resources/views/en/`, `resources/views/fr`, ...\n\n\n### Map your own custom lang url segments\n\nAs you can modify the supportedLocales even by renaming their keys, it is possible to use the string ```uk``` instead of ```en-GB``` to provide custom lang url segments. Of course, you need to prevent any collisions with already existing keys and should stick to the convention as long as possible. But if you are using such a custom key, you have to store your mapping to the ```localesMapping``` array. This ```\nlocalesMapping``` is needed to enable the LanguageNegotiator to correctly assign the desired locales based on HTTP Accept Language Header. Here is a quick example how to map HTTP Accept Language Header \'en-GB\' to url segment \'uk\':\n\n```php\n// config/laravellocalization.php\n\n\'localesMapping\' => [\n\t\'en-GB\' => \'uk\'\n],\n```\n\nAfter that ```http://url-to-laravel/en-GB/a/b/c``` becomes ```http://url-to-laravel/uk/a/b/c```.\n\n```php\nLaravelLocalization::getLocalizedURL(\'en-GB\', \'a/b/c\'); // http://url-to-laravel/uk/a/b/c\nLaravelLocalization::getLocalizedURL(\'uk\', \'a/b/c\'); // http://url-to-laravel/uk/a/b/c\n```\n\n## Creating a language selector\n\nIf you\'re supporting multiple locales in your project you will probably want to provide the users with a way to change language. Below is a simple example of blade template code you can use to create your own language selector.\n\n```blade\n<ul>\n    @foreach(LaravelLocalization::getSupportedLocales() as $localeCode => $properties)\n        <li>\n            <a rel="alternate" hreflang="{{ $localeCode }}" href="{{ LaravelLocalization::getLocalizedURL($localeCode, null, [], true) }}">\n                {{ $properties[\'native\'] }}\n            </a>\n        </li>\n    @endforeach\n</ul>\n```\nHere default language will be forced in getLocalizedURL() to be present in the URL even `hideDefaultLocaleInURL = true`.\n\nNote that Route Model Binding is supported.\n\n## Translated Routes\n\nYou can adapt your URLs depending on the language you want to show them. For example, http://url/en/about and http://url/es/acerca (acerca is about in spanish) or http://url/en/view/5 and http://url/es/ver/5 (view == ver in spanish) would be redirected to the same controller using the proper filter and setting up the translation files as follows:\n\nIt is necessary that the `localize` middleware in loaded in your `Route::group` middleware (See [installation instruction](#LaravelLocalizationRoutes)).\n\nIn the routes file you just have to add the `LaravelLocalizationRoutes` filter and the `LaravelLocalization::transRoute` function to every route you want to translate using the translation key.\n\nThen you have to create the translation files and add there every key you want to translate. I suggest to create a routes.php file inside your `resources/lang/language_abbreviation` folder. For the previous example, I have created two translations files, these two files would look like:\n```php\n// resources/lang/en/routes.php\nreturn [\n\t"about" \t=> \t"about",\n\t"view" \t\t=> \t"view/{id}", //we add a route parameter\n\t// other translated routes\n];\n```\n```php\n// resources/lang/es/routes.php\nreturn [\n\t"about" \t=> \t"acerca",\n\t"view" \t\t=> \t"ver/{id}", //we add a route parameter\n\t// other translated routes\n];\n```\n\nOnce files are saved, you can access to http://url/en/about , http://url/es/acerca , http://url/en/view/5 and http://url/es/ver/5 without any problem.\n\n### Translatable route parameters\n\nYou may use translatable slugs for your model, for example like this:\n\n    http://url/en/view/five\n    http://url/es/ver/cinco\n\nFor this, your model needs to implement `\\Mcamara\\LaravelLocalization\\Interfaces\\LocalizedUrlRoutable`.\nThe function `getLocalizedRouteKey($locale)` must return for a given locale the translated slug.\nThis is necessary so that your urls will be correctly [localized](#localized-urls).\n\nAlso, to use [route-model-binding](https://laravel.com/docs/routing#route-model-binding), you should overwrite the function `resolveRouteBinding($value)`\nin your model. The function should return the model that belongs to the translated slug `$value`. \nFor example:\n\n```php\npublic function resolveRouteBinding($value)\n{\n        return static::findByLocalizedSlug($value)->first() ?? abort(404);\n}\n```\n\n\n\n## Events\n\nYou can capture the URL parameters during translation if you wish to translate them too. To do so, just create an event listener for the `routes.translation` event like so:\n\n```php\nEvent::listen(\'routes.translation\', function($locale, $attributes)\n{\n\t// Do your magic\n\n\treturn $attributes;\n});\n```\n\nBe sure to pass the locale and the attributes as parameters to the closure. You may also use Event Subscribers, see: [http://laravel.com/docs/events#event-subscribers](http://laravel.com/docs/events#event-subscribers)\n\n## Caching routes\n\nTo cache your routes, use:\n\n``` bash\nphp artisan route:trans:cache\n```\n\n... instead of the normal `route:cache` command.\n\n\nFor more details see [here](CACHING.md).\n\n## Common Issues\n\n### POST is not working\n\nThis may happen if you do not localize your action route that is inside your `Routes::group`.\nThis may cause a redirect, which then changes the post request into a get request.\nTo prevent that, simply use the [localize helper](#get-localized-url).\n\nFor example, if you use `Auth::routes()` and put them into your `Route::group` Then\n\n```\n<form action="/logout" method="POST">\n<button>Logout</button>\n</form>\n```\n\nwill not work. Instead, one has to use\n\n```php\n<form action="{{  \\LaravelLocalization::localizeURL(\'/logout\') }} " method="POST">\n<button>Logout</button>\n</form>\n```\n\n### MethodNotAllowedHttpException\n\nIf you do not localize your post url and use a redirect middleware,\nthen the post request gets redirected as a get request.\nIf you have not defined such a get route, you will cause this exception.\n\nTo localize your post url see the example in [POST is not working](#post-is-not-working).\n\n### Validation message is only in default locale\n\nThis also happens if you did not localize your post url.\nIf you don\'t localize your post url, the default locale is set while validating,\nand when returning to `back()` it shows the validation message in default locale.\n\nTo localize your post url see the example in [POST is not working](#post-is-not-working).\n\n## Testing\n\nDuring the test setup, the called route is not yet known. This means no language can be set.\nWhen a request is made during a test, this results in a 404 - without the prefix set the localized route does not seem to exist.\n\nTo fix this, you can use this function to manually set the language prefix:\n```php\n// TestCase.php\nprotected function refreshApplicationWithLocale($locale)\n{\n    self::tearDown();\n    putenv(LaravelLocalization::ENV_ROUTE_KEY . \'=\' . $locale);\n    self::setUp();\n}\n\nprotected function tearDown()\n{\n    putenv(LaravelLocalization::ENV_ROUTE_KEY);\n    parent::tearDown();\n}\n\n// YourTest.php\npublic function testBasicTest()\n{\n    $this->refreshApplicationWithLocale(\'en\');\n    // Testing code\n}\n```\n\n## Collaborators\n- [Adam Nielsen (iwasherefirst2)](https://github.com/iwasherefirst2)\n\nAsk [mcamara](https://github.com/mcamara) if you want to be one of them!\n\n## Changelog\n\nView changelog here -> [changelog](CHANGELOG.md)\n\n## License\n\nLaravel Localization is an open-sourced laravel package licensed under the MIT license\n'