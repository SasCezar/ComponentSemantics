b'**This package [has been deprecated](https://twitter.com/dimsav/status/1140750099875860481). But worry not. You can use [Astrotomic/laravel-translatable](https://github.com/Astrotomic/laravel-translatable)**.\n\n---\n\nLaravel-Translatable\n====================\n\n\n[![Total Downloads](https://poser.pugx.org/dimsav/laravel-translatable/downloads.svg)](https://packagist.org/packages/dimsav/laravel-translatable)\n[![Build Status](https://circleci.com/gh/dimsav/laravel-translatable.png?style=shield)](https://circleci.com/gh/dimsav/laravel-translatable)\n[![Code Coverage](https://scrutinizer-ci.com/g/dimsav/laravel-translatable/badges/coverage.png?b=master)](https://scrutinizer-ci.com/g/dimsav/laravel-translatable/?branch=master)\n[![Latest Stable Version](http://img.shields.io/packagist/v/dimsav/laravel-translatable.svg)](https://packagist.org/packages/dimsav/laravel-translatable)\n[![License](https://poser.pugx.org/dimsav/laravel-translatable/license.svg)](https://packagist.org/packages/dimsav/laravel-translatable)\n[![SensioLabsInsight](https://insight.sensiolabs.com/projects/c105358a-3211-47e8-b662-94aa98d1eeee/mini.png)](https://insight.sensiolabs.com/projects/c105358a-3211-47e8-b662-94aa98d1eeee)\n[![StyleCI](https://styleci.io/repos/16480576/shield)](https://styleci.io/repos/16480576)\n\n![Laravel Translatable](img/laravel-translatable.png)\n\n**If you want to store translations of your models into the database, this package is for you.**\n\nThis is a Laravel package for translatable models. Its goal is to remove the complexity in retrieving and storing multilingual model instances. With this package you write less code, as the translations are being fetched/saved when you fetch/save your instance.\n\n### Docs\n\n* [Demo](#demo)\n* [Laravel compatibility](#laravel-compatibility)\n* [Tutorials](#tutorials)\n* [Installation](#installation-in-4-steps)\n* [Configuration](#configuration)\n* [Features list](#features-list)\n* [FAQ / Support](#faq)\n* [Donations](#donations)\n\n## Demo\n\n**Getting translated attributes**\n\n```php\n  $greece = Country::where(\'code\', \'gr\')->first();\n  echo $greece->translate(\'en\')->name; // Greece\n  \n  App::setLocale(\'en\');\n  echo $greece->name;     // Greece\n\n  App::setLocale(\'de\');\n  echo $greece->name;     // Griechenland\n```\n\n**Saving translated attributes**\n\n```php\n  $greece = Country::where(\'code\', \'gr\')->first();\n  echo $greece->translate(\'en\')->name; // Greece\n  \n  $greece->translate(\'en\')->name = \'abc\';\n  $greece->save();\n  \n  $greece = Country::where(\'code\', \'gr\')->first();\n  echo $greece->translate(\'en\')->name; // abc\n```\n\n**Filling multiple translations**\n\n```php\n  $data = [\n    \'code\' => \'gr\',\n    \'en\'  => [\'name\' => \'Greece\'],\n    \'fr\'  => [\'name\' => \'Gr\xc3\xa8ce\'],\n  ];\n\n  $greece = Country::create($data);\n  \n  echo $greece->translate(\'fr\')->name; // Gr\xc3\xa8ce\n```\n\n## Laravel compatibility\n\n Laravel  | Translatable\n:---------|:----------\n 5.8      | 9.*\n 5.7      | 9.*\n 5.6      | 9.*\n 5.5      | 8.*\n 5.4      | 7.*\n 5.3      | 6.*\n 5.2      | 5.5 - 6.*\n 5.1      | 5.0 - 6.*\n 5.0      | 5.0 - 5.4\n 4.2.x    | 4.4.x\n 4.1.x    | 4.4.x\n 4.0.x    | 4.3.x\n\n## Tutorials\n\n- Check the tutorial about laravel-translatable in laravel-news: [*How To Add Multilingual Support to Eloquent*](https://laravel-news.com/2015/09/how-to-add-multilingual-support-to-eloquent/)\n- [How To Build An Efficient and SEO Friendly Multilingual Architecture For Your Laravel Application](https://mydnic.be/post/how-to-build-an-efficient-and-seo-friendly-multilingual-architecture-for-your-laravel-application)\n\n## Installation in 4 steps\n\n### Step 1: Install package\n\nAdd the package in your composer.json by executing the command.\n\n```bash\ncomposer require dimsav/laravel-translatable\n```\n\nNext, add the service provider to `app/config/app.php`\n\n```\nDimsav\\Translatable\\TranslatableServiceProvider::class,\n```\n\n### Step 2: Migrations\n\nIn this example, we want to translate the model `Country`. We will need an extra table `country_translations`:\n\n```php\nSchema::create(\'countries\', function(Blueprint $table)\n{\n    $table->increments(\'id\');\n    $table->string(\'code\');\n    $table->timestamps();\n});\n\nSchema::create(\'country_translations\', function(Blueprint $table)\n{\n    $table->increments(\'id\');\n    $table->integer(\'country_id\')->unsigned();\n    $table->string(\'name\');\n    $table->string(\'locale\')->index();\n\n    $table->unique([\'country_id\',\'locale\']);\n    $table->foreign(\'country_id\')->references(\'id\')->on(\'countries\')->onDelete(\'cascade\');\n});\n```\n\n### Step 3: Models\n\n1. The translatable model `Country` should [use the trait](http://www.sitepoint.com/using-traits-in-php-5-4/) `Dimsav\\Translatable\\Translatable`. \n2. The convention for the translation model is `CountryTranslation`.\n\n\n```php\n// models/Country.php\nclass Country extends Eloquent {\n    \n    use \\Dimsav\\Translatable\\Translatable;\n    \n    public $translatedAttributes = [\'name\'];\n    protected $fillable = [\'code\'];\n    \n    /**\n     * The relations to eager load on every query.\n     *\n     * @var array\n     */\n    // (optionaly)\n    // protected $with = [\'translations\'];\n\n}\n\n// models/CountryTranslation.php\nclass CountryTranslation extends Eloquent {\n\n    public $timestamps = false;\n    protected $fillable = [\'name\'];\n\n}\n```\n\nThe array `$translatedAttributes` contains the names of the fields being translated in the "Translation" model.\n\n### Step 4: Configuration\n\nWe copy the configuration file to our project.\n\nLaravel 5.*\n```bash\nphp artisan vendor:publish --tag=translatable \n```\n\nLaravel 4.*\n```bash\nphp artisan config:publish dimsav/laravel-translatable\n```\n\n*Note: There isn\'t any restriction for the format of the locales. Feel free to use whatever suits you better, like "eng" instead of "en", or "el" instead of "gr".  The important is to define your locales and stick to them.*\n\n## Configuration\n\n### The config file\n\nYou can see the options for further customization in the [config file](src/config/translatable.php).\n\n### The translation model\n\nThe convention used to define the class of the translation model is to append the keyword `Translation`.\n\nSo if your model is `\\MyApp\\Models\\Country`, the default translation would be `\\MyApp\\Models\\CountryTranslation`.\n\nTo use a custom class as translation model, define the translation class (including the namespace) as parameter. For example:\n\n```php\n<?php \n\nnamespace MyApp\\Models;\n\nuse Dimsav\\Translatable\\Translatable;\nuse Illuminate\\Database\\Eloquent\\Model as Eloquent;\n\nclass Country extends Eloquent\n{\n    use Translatable;\n\n    public $translationModel = \'MyApp\\Models\\CountryAwesomeTranslation\';\n}\n\n```\n\n## Features list\n\n**Please read the installation steps first, to understand what classes need to be created.**\n\n### Available methods \n\n```php\n// Before we get started, this is how we determine the default locale.\n// It is set by laravel or other packages.\nApp::getLocale(); // \'fr\' \n\n// To use this package, first we need an instance of our model\n$germany = Country::where(\'code\', \'de\')->first();\n\n// This returns an instance of CountryTranslation of using the default locale.\n// So in this case, french. If no french translation is found, it returns null.\n$translation = $germany->translate();\n\n// It is possible to define a default locale per model by overriding the model constructor.\npublic function __construct(array $attributes = [])\n{\n    parent::__construct($attributes);\n    \n    $this->defaultLocale = \'de\';\n}\n\n// It is also possible to define a default locale for our model on the fly:\n$germany->setDefaultLocale(\'de\');\n\n// If an german translation exists, it returns an instance of \n// CountryTranslation. Otherwise it returns null.\n$translation = $germany->translate(\'de\');\n\n// If a german translation doesn\'t exist, it attempts to get a translation  \n// of the fallback language (see fallback locale section below).\n$translation = $germany->translate(\'de\', true);\n\n// Alias of the above.\n$translation = $germany->translateOrDefault(\'de\');\n\n// Returns instance of CountryTranslation of using the default locale.\n// If no translation is found, it returns a fallback translation\n// if enabled in the configuration.\n$translation = $germany->getTranslation();\n\n// If an german translation exists, it returns an instance of \n// CountryTranslation. Otherwise it returns null.\n// Same as $germany->translate(\'de\');\n$translation = $germany->getTranslation(\'de\', true);\n\n// To set the translation for a field you can either update the translation model.\n// Saving the model will also save all the related translations.\n$germany->translate(\'en\')->name = \'Germany\';\n$germany->save();\n\n// Alternatively we can use the shortcut\n$germany->{\'name:en\'} = \'Germany\';\n$germany->save();\n\n// There are two ways of inserting mutliple translations into the database\n// First, using the locale as array key.\n$greece = $country->fill([\n    \'en\'  => [\'name\' => \'Greece\'],\n    \'fr\'  => [\'name\' => \'Gr\xc3\xa8ce\'],\n]);\n\n// The second way is to use the following syntax.  \n$greece = $country->fill([\n    \'name:en\' => \'Greece\',\n    \'name:fr\' => \'Gr\xc3\xa8ce\',\n]);\n\n// Returns true/false if the model has translation about the current locale. \n$germany->hasTranslation();\n\n// Returns true/false if the model has translation in french. \n$germany->hasTranslation(\'fr\');\n\n// If a german translation doesn\'t exist, it returns\n// a new instance of CountryTranslation.\n$translation = $germany->translateOrNew(\'de\');\n\n// Returns a new CountryTranslation instance for the selected\n// language, and binds it to $germany\n$translation = $germany->getNewTranslation(\'it\');\n\n// The eloquent model relationship. Do what you want with it ;) \n$germany->translations();\n\n// Remove all translations linked to an object\n$germany->deleteTranslations();\n\n// Delete one or multiple translations\n$germany->deleteTranslations(\'de\');\n$germany->deleteTranslations([\'de\', \'en\']);\n\n// Gel all the translations as array\n$germany->getTranslationsArray();\n// Returns\n[\n \'en\' => [\'name\' => \'Germany\'],\n \'de\' => [\'name\' => \'Deutschland\'],\n \'fr\' => [\'name\' => \'Allemagne\'],\n];\n\n// Creates a clone and clones the translations\n$replicate = $germany->replicateWithTranslations(); \n\n```\n\n### Available scopes\n\n```php\n// Returns all countries having translations in english\nCountry::translatedIn(\'en\')->get();\n\n// Returns all countries not being translated in english\nCountry::notTranslatedIn(\'en\')->get();\n\n// Returns all countries having translations\nCountry::translated()->get();\n\n// Eager loads translation relationship only for the default\n// and fallback (if enabled) locale\nCountry::withTranslation()->get();\n\n// Returns an array containing pairs of country ids and the translated\n// name attribute. For example: \n// [\n//     [\'id\' => 1, \'name\' => \'Greece\'], \n//     [\'id\' => 2, \'name\' => \'Belgium\']\n// ]\nCountry::listsTranslations(\'name\')->get()->toArray();\n\n// Filters countries by checking the translation against the given value \nCountry::whereTranslation(\'name\', \'Greece\')->first();\n\n// Filters countries by checking the translation against the given value, only in the specified locale\nCountry::whereTranslation(\'name\', \'Greece\', \'en\')->first();\n\n// Or where translation\nCountry::whereTranslation(\'name\', \'Greece\')->orWhereTranslation(\'name\', \'France\')->get();\n\n// Filters countries by checking the translation against the given string with wildcards\nCountry::whereTranslationLike(\'name\', \'%Gree%\')->first();\n\n// Or where translation like\nCountry::whereTranslationLike(\'name\', \'%eece%\')->orWhereTranslationLike(\'name\', \'%ance%\')->get();\n```\n\n### Magic properties\n\nTo use the magic properties, you have to define the property `$translatedAttributes` in your\n main model:\n\n ```php\n class Country extends Eloquent {\n\n     use \\Dimsav\\Translatable\\Translatable;\n\n     public $translatedAttributes = [\'name\'];\n }\n ```\n\n```php\n// Again we start by having a country instance\n$germany = Country::where(\'code\', \'de\')->first();\n\n// We can reference properties of the translation object directly from our main model.\n// This uses the default locale and is the equivalent of $germany->translate()->name\n$germany->name; // \'Germany\'\n\n// We can also quick access a translation with a custom locale\n$germany->{\'name:de\'} // \'Deutschland\'\n```\n\n### Fallback\n\n#### Fallback locales\n\nIf you want to fallback to a default translation when a translation has not been found, enable this in the configuration\nusing the `use_fallback` key. And to select the default locale, use the `fallback_locale` key.\n\nConfiguration example:\n\n```php\nreturn [\n    \'use_fallback\' => true,\n\n    \'fallback_locale\' => \'en\',    \n];\n```\n\nYou can also define *per-model* the default for "if fallback should be used", by setting the `$useTranslationFallback` property:\n\n```php\nclass Country {\n\n    public $useTranslationFallback = true;\n\n}\n```\n\n#### Fallback per property \n\nEven though we try having all models nicely translated, some fields might left empty. What\'s the result? You end up with missing translations for those fields!\n\nThe property fallback feature is here to help. When enabled, translatable will return the value of the fallback language \nfor those empty properties. \n\nThe feature is enabled by default on new installations. If your config file was setup before v7.1, make sure to add \nthe following line to enable the feature:\n\n```php\n\'use_property_fallback\' => true,\n```\n\nOf course the fallback locales must be enabled to use this feature.\n \n If the property fallback is enabled in the configuration, then translatable\n will return the translation of the fallback locale for the fields where the translation is empty. \n \n##### customize empty translation property detection\n\nThis package is made to translate strings, but in general it\'s also able to translate numbers, bools or whatever you want to. By default a simple `empty()` call is used to detect if the translation value is empty or not. If you want to customize this or use different logic per property you can override `isEmptyTranslatableAttribute()` in your main model. \n\n```php\nprotected function isEmptyTranslatableAttribute(string $key, $value): bool\n{\n    switch($key) {\n        case \'name\':\n            return empty($value);\n        case \'price\':\n            return !is_number($value);\n        default:\n            return is_null($value);\n    }\n}\n```\n\n#### Country based fallback\n\nSince version v5.3 it is possible to use country based locales. For example, you can have the following locales:\n\n- English: `en`\n- Spanish: `es`\n- Mexican Spanish: `es-MX`\n- Colombian Spanish: `es-CO`\n\nTo configuration for these locales looks like this:\n\n```php\n    \'locales\' => [ \n        \'en\',\n        \'es\' => [\n            \'MX\',\n            \'CO\',\n        ],\n    ];\n```\n\nWe can also configure the "glue" between the language and country. If for instance we prefer the format `es_MX` instead of `es-MX`, \nthe configuration should look like this:\n\n```php\n   \'locale_separator\' => \'_\',\n```\n\nWhat applies for the fallback of the locales using the `en-MX` format? \n\nLet\'s say our fallback locale is `en`. Now, when we try to fetch from the database the translation for the \nlocale `es-MX` but it doesn\'t exist,  we won\'t get as fallback the translation for `en`. Translatable will use as a \nfallback `es` (the first part of `es-MX`) and only if nothing is found, the translation for `en` is returned.\n\n### Translation Autoloading\n\nIf the `toArray()` method is called it\'s possible to autoload all translations. To control this feature the package comes with a config value `to_array_always_loads_translations` and three static methods in the trait:\n\n* `enableAutoloadTranslations()` - forces to load all translations\n* `disableAutoloadTranslations()` - disables autoload and returns parent attributes\n* `defaultAutoloadTranslations()` - does not change the default behavior logic (*default*)\n \n## Add ons\n\nThanks to the community a few packages have been written to make usage of Translatable easier when working with forms:\n\n- [Propaganistas/Laravel-Translatable-Bootforms](https://github.com/Propaganistas/Laravel-Translatable-Bootforms)\n- [TypiCMS/TranslatableBootForms](https://github.com/TypiCMS/TranslatableBootForms)\n \n## FAQ\n\n#### I need some example code!\n\nExamples for all the package features can be found [in the code](https://github.com/dimsav/laravel-translatable/tree/master/tests/models) used for the [tests](https://github.com/dimsav/laravel-translatable/tree/master/tests).\n\n#### I need help!\n\nGot any question or suggestion? Feel free to open an [Issue](https://github.com/dimsav/laravel-translatable/issues/new).\n\n#### I want to help!\n\nYou are awesome! Watch the repo and reply to the issues. You will help offering a great experience to the users of the package. `#communityWorks`\n\nAlso buy me a beer by making a [donation](#donations). \xe2\x9d\xa4\xef\xb8\x8f\n\n#### I am getting collisions with other trait methods!\n\nTranslatable is fully compatible with all kinds of Eloquent extensions, including Ardent. If you need help to implement Translatable with these extensions, see this [example](https://gist.github.com/dimsav/9659552).\n\n#### How do I migrate my existing table to use laravel-translatable?\n\nPlease see the installation steps to understand how your database should be structured.\n\nIf your properties are written in english, we recommend using these commands in your migrations:\n\n```php\n// We insert the translation attributes into the fresh translated table: \n\\DB::statement("insert into country_translations (country_id, name, locale) select id, name, \'en\' from countries");\n\n// We drop the translation attributes in our main table: \nSchema::table(\'countries\', function ($table) {\n    $table->dropColumn(\'name\');\n}); \n```\n\n#### How do I sort by translations?\n\nA tip here is to make the MySQL query first and then do the Eloquent one.\n\nTo fetch a list of records ordered by a translated field, you can do this: \n\n```mysql\nSELECT * from countries\nJOIN country_translations as t on t.country_id = countries.id \nWHERE locale = \'en\'\nGROUP BY countries.id\nORDER BY t.name desc\n```\n\nThe corresponding eloquent query would be:\n\n```php\nCountry::join(\'country_translations as t\', function ($join) {\n        $join->on(\'countries.id\', \'=\', \'t.country_id\')\n            ->where(\'t.locale\', \'=\', \'en\');\n    }) \n    ->groupBy(\'countries.id\')\n    ->orderBy(\'t.name\', \'desc\')\n    ->with(\'translations\')\n    ->get();\n```\n\n#### How can I select a country by a translated field?\n\nFor example, let\'s image we want to find the Country having a CountryTranslation name equal to \'Portugal\'.\n\n```php\nCountry::whereHas(\'translations\', function ($query) {\n    $query->where(\'locale\', \'en\')\n    ->where(\'name\', \'Portugal\');\n})->first();\n```\n\nYou can find more info at the Laravel [Querying Relations docs](http://laravel.com/docs/5.1/eloquent-relationships#querying-relations).\n\n#### Why do I get a mysql error while running the migrations?\n\nIf you see the following mysql error:\n\n```\n[Illuminate\\Database\\QueryException]\nSQLSTATE[HY000]: General error: 1005 Can\'t create table \'my_database.#sql-455_63\'\n  (errno: 150) (SQL: alter table `country_translations` \n  add constraint country_translations_country_id_foreign foreign key (`country_id`) \n  references `countries` (`id`) on delete cascade)\n```\n\nThen your tables have the MyISAM engine which doesn\'t allow foreign key constraints. MyISAM was the default engine for mysql versions older than 5.5. Since [version 5.5](http://dev.mysql.com/doc/refman/5.5/en/innodb-default-se.html), tables are created using the InnoDB storage engine by default.\n\n##### How to fix\n\nFor tables already created in production, update your migrations to change the engine of the table before adding the foreign key constraint.\n\n```php\npublic function up()\n{\n    DB::statement(\'ALTER TABLE countries ENGINE=InnoDB\');\n}\n\npublic function down()\n{\n    DB::statement(\'ALTER TABLE countries ENGINE=MyISAM\');\n}\n```\n\nFor new tables, a quick solution is to set the storage engine in the migration:\n\n```php\nSchema::create(\'language_translations\', function(Blueprint $table){\n  $table->engine = \'InnoDB\';\n  $table->increments(\'id\');\n    // ...\n});\n```\n\nThe best solution though would be to update your mysql version. And **always make sure you have the same version both in development and production environment!**\n\n## Donations\n\nThis software has been crafted with attention and love.\n\nShow your love and support by sending bitcoin to this address: `167QC4XQ3acgbwVYWAdmS81jARCcVTWBXU`\n\nOr by sending to this PayPal address: `ds@dimsav.com`\n\n\xe2\x9d\xa4\xef\xb8\x8f Thank you!\n'