b'![Ziggy - Use your Laravel Named Routes inside JavaScript](https://raw.githubusercontent.com/tightenco/ziggy/master/ziggy-banner.png?version=3)\n\n# Ziggy - Use your Laravel Named Routes inside JavaScript\n\n\nZiggy creates a Blade directive which you can include in your views. This will export a JavaScript object of your application\'s named routes, keyed by their names (aliases), as well as a global `route()` helper function which you can use to access your routes in your JavaScript.\n\n## Installation\n\n1. Add Ziggy to your Composer file: `composer require tightenco/ziggy`\n\n2. (if Laravel 5.4) Add `Tightenco\\Ziggy\\ZiggyServiceProvider::class` to the `providers` array in your `config/app.php`.\n\n3. Include our Blade Directive (`@routes`) somewhere in your template before your main application JavaScript is loaded&mdash;likely in the header somewhere.\n\n## Usage\n\nThis package replaces the `@routes` directive with a collection of all of your application\'s routes, keyed by their names. This collection is available at `Ziggy.namedRoutes`.\n\nThe package also creates an optional `route()` JavaScript helper which functions like Laravel\'s `route()` PHP helper, which can be used to retrieve URLs by name and (optionally) parameters.\n\n### Examples:\n\nWithout parameters:\n\n```js\nroute(\'posts.index\') // Returns \'/posts\'\n```\n\nWith required parameter:\n\n```js\nroute(\'posts.show\', {id: 1}) // Returns \'/posts/1\'\nroute(\'posts.show\', [1]) // Returns \'/posts/1\'\nroute(\'posts.show\', 1) // Returns \'/posts/1\'\n```\n\nWith multiple required parameters:\n\n```js\nroute(\'events.venues.show\', {event: 1, venue: 2}) // Returns \'/events/1/venues/2\'\nroute(\'events.venues.show\', [1, 2]) // Returns \'/events/1/venues/2\'\n```\n\nWith query parameters:\n\n```js\nroute(\'events.venues.show\', {event: 1, venue: 2, page: 5, count: 10}) // Returns \'/events/1/venues/2?page=5&count=10\'\n```\n\nIf whole objects are passed, Ziggy will automatically look for `id` primary key:\n\n```js\nvar event = {id: 1, name: \'World Series\'};\nvar venue = {id: 2, name: \'Rogers Centre\'};\n\nroute(\'events.venues.show\', [event, venue]) // Returns \'/events/1/venues/2\'\n```\n\nPractical AJAX example:\n\n```js\nvar post = {id: 1, title: \'Ziggy Stardust\'};\n\nreturn axios.get(route(\'posts.show\', post))\n    .then((response) => {\n        return response.data;\n    });\n```\n### Default Values\nSee Laravel [documentation](https://laravel.com/docs/5.5/urls#default-values)\n\nDefault values work out of the box for Laravel versions >= 5.5.29,\nfor the previous versions you will need to set the default parameters\nby including this code somewhere in the same page as our Blade Directive (@routes)\n```js\nZiggy.defaultParameters = {\n    //example\n    locale: "en"\n}\n```\n\n## Filtering Routes\nFiltering routes is *completely* optional. If you want to pass all of your routes to JavaScript by default, you can carry on using Ziggy as described above.\n\n### Basic Whitelisting & Blacklisting\nTo take advantage of basic whitelisting or blacklisting of routes, you will first need to create a standard config file called `ziggy.php` in the `config/` directory of your Laravel app and set **either** the `whitelist` or `blacklist` setting to an array of route names.\n\n**Note: You\'ve got to choose one or the other. Setting `whitelist` and `blacklist` will disable filtering altogether and simply return the default list of routes.**\n\n#### Example `config/ziggy.php`:\n```php\n<?php\nreturn [\n    // \'whitelist\' => [\'home\', \'api.*\'],\n    \'blacklist\' => [\'debugbar.*\', \'horizon.*\', \'admin.*\'],\n];\n```\n\nAs shown in the example above, Ziggy the use of asterisks as wildcards in filters. `home` will only match the route named `home` whereas `api.*` will match any route whose name begins with `api.`, such as `api.posts.index` and `api.users.show`.\n\n### Simple Whitelisting & Blacklisting Macros\n\nWhitelisting and blacklisting can also be achieved using the following macros.\n\n#### Example Whitelisting\n\n```php\nRoute::whitelist(function () {\n    Route::get(\'...\')->name(\'posts\');\n});\n\nRoute::whitelist()->get(\'...\')->name(\'posts\');\n```\n\n#### Example Blacklisting\n\n```php\nRoute::blacklist(function () {\n    Route::get(\'...\')->name(\'posts\');\n});\n\nRoute::blacklist()->get(\'...\')->name(\'posts\');\n```\n\n### Advanced Whitelisting Using Groups\n\nYou may also optionally define multiple whitelists by defining `groups` in your `config/ziggy.php`:\n\n```php\n<?php\nreturn [\n    \'groups\' => [\n        \'admin\' => [\n            \'admin.*\',\n            \'posts.*\',\n        ],\n        \'author\' => [\n            \'posts.*\',\n        ]\n    ],\n];\n```\n\nIn the above example, you can see we have configured multiple whitelists for different user roles.  You may expose a specific whitelist group by passing the group key into `@routes` within your blade view.  Example:\n\n```php\n@routes(\'author\')\n```\n\nOr if you want to expose multiple groups you can pass an array of group names. Example:\n\n```php\n@routes([\'admin\', \'author\'])\n```\n\n**Note: Using a group will always take precedence over the above mentioned `whitelist` and `blacklist` settings.**\n\n### Other useful methods\n\n#### `current()`\nTo get the name of the current route (based on the browser\'s `window.location`) you can use:\n\n```javascript\nroute().current()\n// returns "events.index"\n```\n\nTo check that we are at a current route, pass the desired route in the only param:\n\n```javascript\nroute().current("events.index")\n// returns true\n```\n\nYou can even use wildcards:\n\n```javascript\nroute().current("events.*")\n// returns true\n```\n\n#### `url()`\nZiggy returns a wrapper of the string primitive, which behaves exactly like a string in almost all cases.\nIn rare cases where third-party libraries use strict type checking, you may require an actual `String` literal.\n\nTo achieve this simple call `.url()` on your route:\n\n```javascript\nroute(\'home\').url()\n// http://myapp.local/\n```\n\n## Artisan command\n\nZiggy publishes an artisan command to generate a `ziggy.js` routes file, which can be used as part of an asset pipeline such as [Laravel Mix](https://laravel.com/docs/mix).\n\nYou can run `php artisan ziggy:generate` in your project to generate a static routes file in `resources/assets/js/ziggy.js`.\n\nOptionally, include a second parameter to override the path and file names (you must pass a file name with the path):\n\n```\nphp artisan ziggy:generate "resources/foo.js"\n```\n\nExample `ziggy.js`, where the named routes `home` and `login` exist in `routes/web.php`:\n\n```php\n// routes/web.php\n\n<?php\n\nRoute::get(\'/\', function () {\n    return view(\'welcome\');\n})->name(\'home\');\n\nRoute::get(\'/login\', function () {\n    return view(\'login\');\n})->name(\'login\');\n```\n\n```js\n// ziggy.js\n\nvar Ziggy = {\n    namedRoutes: {"home":{"uri":"\\/","methods":["GET","HEAD"],"domain":null},"login":{"uri":"login","methods":["GET","HEAD"],"domain":null}},\n    baseUrl: \'http://myapp.local/\',\n    baseProtocol: \'http\',\n    baseDomain: \'myapp.local\',\n    basePort: false\n};\n\nexport {\n    Ziggy\n}\n```\n\n### Importing the `route()` helper and generated `ziggy.js`\n\n```js\n// webpack.mix.js\nconst path = require(\'path\')\n...\nmix.webpackConfig({\n    resolve: {\n        alias: {\n            ...\n            ziggy: path.resolve(\'vendor/tightenco/ziggy/dist/js/route.js\'),\n        },\n    },\n})\n```\n\n```js\n// app.js\n\nimport route from \'ziggy\'\nimport { Ziggy } from \'./ziggy\'\n\n...\n```\n\n### Using with Vue components\n\nIf you want to use the `route()` helper within a Vue component, import the helper and generated `ziggy.js` as above. Then you\'ll need to add this to your `app.js` file:\n\n```js\n// app.js\nimport route from \'ziggy\'\nimport { Ziggy } from \'./ziggy\'\n\nVue.mixin({\n    methods: {\n        route: (name, params, absolute) => route(name, params, absolute, Ziggy),\n    }\n});\n```\nThen, use the method in your Vue components like so:\n\n`<a class="nav-link" :href="route(\'home\')">Home</a>`\n\nThanks to [Archer70](https://github.com/tightenco/ziggy/issues/70#issuecomment-369129032) for this solution.\n\n## Environment-based loading of minified route helper file\n\nWhen loading the blade helper file, Ziggy will detect the current environment and minify the output if `APP_ENV` is not `local`.\n\nWhen this happens, `ziggy.min.js` will be loaded. Otherwise, `ziggy.js` will be used.\n\n## Optional `route` helper\n\nIf you only want routes available through `@routes`, but don\'t need the `route` helper function, you can include `skip-route-function` in your config and set it to `true`:\n\n```php\n// config/ziggy.php\n\n<?php\n\nreturn [\n    \'skip-route-function\' => true\n];\n```\n## Contributions & Credits\n\nTo get started contributing to Ziggy, check out [the contribution guide](CONTRIBUTING.md).\n\n- [Daniel Coulbourne](https://twitter.com/DCoulbourne)\n- [Jake Bathman](https://twitter.com/jakebathman)\n- [Matt Stauffer](https://twitter.com/stauffermatt)\n\nThanks to [Caleb Porzio](http://twitter.com/calebporzio), [Adam Wathan](http://twitter.com/adamwathan), and [Jeffrey Way](http://twitter.com/jeffrey_way) for help solidifying the idea.\n\n### Thanks to [all our contributors](https://github.com/tightenco/ziggy/graphs/contributors)\n\n\n'