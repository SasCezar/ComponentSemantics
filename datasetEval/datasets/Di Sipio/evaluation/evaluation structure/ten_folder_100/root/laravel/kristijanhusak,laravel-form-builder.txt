b'[![Build Status](https://travis-ci.org/kristijanhusak/laravel-form-builder.svg)](https://travis-ci.org/kristijanhusak/laravel-form-builder)\n[![Coverage Status](http://img.shields.io/scrutinizer/coverage/g/kristijanhusak/laravel-form-builder.svg?style=flat)](https://scrutinizer-ci.com/g/kristijanhusak/laravel-form-builder/?branch=master)\n[![Total Downloads](https://img.shields.io/packagist/dt/kris/laravel-form-builder.svg?style=flat)](https://packagist.org/packages/kris/laravel-form-builder)\n[![Latest Stable Version](https://img.shields.io/packagist/v/kris/laravel-form-builder.svg?style=flat)](https://packagist.org/packages/kris/laravel-form-builder)\n[![License](https://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat)](LICENSE)\n\n# Laravel 5 form builder\n\n[![Join the chat at https://gitter.im/kristijanhusak/laravel-form-builder](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/kristijanhusak/laravel-form-builder?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nForm builder for Laravel 5 inspired by Symfony\'s form builder. With help of Laravels FormBuilder class creates forms that can be easy modified and reused.\nBy default it supports Bootstrap 3.\n\n## Laravel 4\nFor Laravel 4 version check [laravel4-form-builder](https://github.com/kristijanhusak/laravel4-form-builder).\n\n## Bootstrap 4 support\nTo use bootstrap 4 instead of bootstrap 3, install [laravel-form-builder-bs4](https://github.com/ycs77/laravel-form-builder-bs4).\n\n## Upgrade to 1.6\nIf you upgraded to `>1.6.*` from `1.5.*` or earlier, and having problems with form value binding, rename `default_value` to `value`.\n\nMore info in [changelog](https://github.com/kristijanhusak/laravel-form-builder/blob/master/CHANGELOG.md).\n\n## Documentation\nFor detailed documentation refer to [http://kristijanhusak.github.io/laravel-form-builder/](http://kristijanhusak.github.io/laravel-form-builder/).\n\n## Changelog\nChangelog can be found [here](https://github.com/kristijanhusak/laravel-form-builder/blob/master/CHANGELOG.md).\n\n## Installation\n\n### Using Composer\n\n```sh\ncomposer require kris/laravel-form-builder\n```\n\nOr manually by modifying `composer.json` file:\n\n``` json\n{\n    "require": {\n        "kris/laravel-form-builder": "1.*"\n    }\n}\n```\n\nAnd run `composer install`\n\nThen add Service provider to `config/app.php`\n\n``` php\n    \'providers\' => [\n        // ...\n        Kris\\LaravelFormBuilder\\FormBuilderServiceProvider::class\n    ]\n```\n\nAnd Facade (also in `config/app.php`)\n\n``` php\n    \'aliases\' => [\n        // ...\n        \'FormBuilder\' => Kris\\LaravelFormBuilder\\Facades\\FormBuilder::class\n    ]\n\n```\n\n**Notice**: This package will add `laravelcollective/html` package and load aliases (Form, Html) if they do not exist in the IoC container.\n\n\n## Quick start\n\nCreating form classes is easy. With a simple artisan command:\n\n```sh\nphp artisan make:form Forms/SongForm --fields="name:text, lyrics:textarea, publish:checkbox"\n```\n\nForm is created in path `app/Forms/SongForm.php` with content:\n\n```php\n<?php\n\nnamespace App\\Forms;\n\nuse Kris\\LaravelFormBuilder\\Form;\nuse Kris\\LaravelFormBuilder\\Field;\n\nclass SongForm extends Form\n{\n    public function buildForm()\n    {\n        $this\n            ->add(\'name\', Field::TEXT, [\n                \'rules\' => \'required|min:5\'\n            ])\n            ->add(\'lyrics\', Field::TEXTAREA, [\n                \'rules\' => \'max:5000\'\n            ])\n            ->add(\'publish\', Field::CHECKBOX);\n    }\n}\n```\n\nIf you want to instantiate empty form without any fields, just skip passing `--fields` parameter:\n\n```sh\nphp artisan make:form Forms/PostForm\n```\n\nGives:\n\n```php\n<?php\n\nnamespace App\\Forms;\n\nuse Kris\\LaravelFormBuilder\\Form;\n\nclass PostForm extends Form\n{\n    public function buildForm()\n    {\n        // Add fields here...\n    }\n}\n```\n\nAfter that instantiate the class in the controller and pass it to view:\n\n```php\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Routing\\Controller as BaseController;\nuse Kris\\LaravelFormBuilder\\FormBuilder;\n\nclass SongsController extends BaseController {\n\n    public function create(FormBuilder $formBuilder)\n    {\n        $form = $formBuilder->create(\\App\\Forms\\SongForm::class, [\n            \'method\' => \'POST\',\n            \'url\' => route(\'song.store\')\n        ]);\n\n        return view(\'song.create\', compact(\'form\'));\n    }\n\n    public function store(FormBuilder $formBuilder)\n    {\n        $form = $formBuilder->create(\\App\\Forms\\SongForm::class);\n\n        if (!$form->isValid()) {\n            return redirect()->back()->withErrors($form->getErrors())->withInput();\n        }\n\n        // Do saving and other things...\n    }\n}\n```\n\nAlternative example:\n\n```php\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Routing\\Controller as BaseController;\nuse Kris\\LaravelFormBuilder\\FormBuilder;\nuse App\\Forms\\SongForm;\n\nclass SongsController extends BaseController {\n\n    public function create(FormBuilder $formBuilder)\n    {\n        $form = $formBuilder->create(SongForm::class, [\n            \'method\' => \'POST\',\n            \'url\' => route(\'song.store\')\n        ]);\n\n        return view(\'song.create\', compact(\'form\'));\n    }\n\n    public function store(FormBuilder $formBuilder)\n    {\n        $form = $formBuilder->create(SongForm::class);\n\n        if (!$form->isValid()) {\n            return redirect()->back()->withErrors($form->getErrors())->withInput();\n        }\n\n        // Do saving and other things...\n    }\n}\n```\n\n\nIf you want to store a model after a form submit considerating all fields are model properties:\n\n```php\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Http\\Controllers\\Controller;\nuse Kris\\LaravelFormBuilder\\FormBuilder;\nuse App\\SongForm;\n\nclass SongFormController extends Controller\n{\n    public function store(FormBuilder $formBuilder)\n    {\n        $form = $formBuilder->create(\\App\\Forms\\SongForm::class);\n        $form->redirectIfNotValid();\n        \n        SongForm::create($form->getFieldValues());\n\n        // Do redirecting...\n    }\n```\n\nYou can only save properties you need:\n\n```php\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Http\\Controllers\\Controller;\nuse Kris\\LaravelFormBuilder\\FormBuilder;\nuse App\\SongForm;\n\nclass SongFormController extends Controller\n{\n    public function store(FormBuilder $formBuilder, Request $request)\n    {\n        $form = $formBuilder->create(\\App\\Forms\\SongForm::class);\n        $form->redirectIfNotValid();\n        \n        $songForm = new SongForm();\n        $songForm->fill($request->only([\'name\', \'artist\'])->save();\n\n        // Do redirecting...\n    }\n```\n\nOr you can update any model after form submit:\n\n```php\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Http\\Controllers\\Controller;\nuse Kris\\LaravelFormBuilder\\FormBuilder;\nuse App\\SongForm;\n\nclass SongFormController extends Controller\n{\n    public function update(int $id, Request $request)\n    {\n        $songForm = SongForm::findOrFail($id);\n\n        $form = $this->getForm($songForm);\n        $form->redirectIfNotValid();\n\n        $songForm->update($form->getFieldValues());\n\n        // Do redirecting...\n    }\n```\n\nCreate the routes\n\n```php\n// app/Http/routes.php\nRoute::get(\'songs/create\', [\n    \'uses\' => \'SongsController@create\',\n    \'as\' => \'song.create\'\n]);\n\nRoute::post(\'songs\', [\n    \'uses\' => \'SongsController@store\',\n    \'as\' => \'song.store\'\n]);\n```\n\nPrint the form in view with `form()` helper function:\n\n```html\n<!-- resources/views/song/create.blade.php -->\n\n@extends(\'app\')\n\n@section(\'content\')\n    {!! form($form) !!}\n@endsection\n```\n\nGo to `/songs/create`; above code will generate this html:\n\n```html\n<form method="POST" action="http://example.dev/songs">\n    <input name="_token" type="hidden" value="FaHZmwcnaOeaJzVdyp4Ml8B6l1N1DLUDsZmsjRFL">\n    <div class="form-group">\n        <label for="name" class="control-label">Name</label>\n        <input type="text" class="form-control" id="name">\n    </div>\n    <div class="form-group">\n        <label for="lyrics" class="control-label">Lyrics</label>\n        <textarea name="lyrics" class="form-control" id="lyrics"></textarea>\n    </div>\n    <div class="form-group">\n        <label for="publish" class="control-label">Publish</label>\n        <input type="checkbox" name="publish" id="publish">\n    </div>\n</form>\n```\n\nOr you can generate forms easier by using simple array\n```php\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Routing\\Controller as BaseController;\nuse Kris\\LaravelFormBuilder\\FormBuilder;\nuse Kris\\LaravelFormBuilder\\Field;\nuse App\\Forms\\SongForm;\n\nclass SongsController extends BaseController {\n\n    public function create(FormBuilder $formBuilder)\n    {\n        $form = $formBuilder->createByArray([\n                        [\n                            \'name\' => \'name\',\n                            \'type\' => Field::TEXT,\n                        ],\n                        [\n                            \'name\' => \'lyrics\',\n                            \'type\' => Field::TEXTAREA,\n                        ],\n                        [\n                            \'name\' => \'publish\',\n                            \'type\' => Field::CHECKBOX\n                        ],\n                    ]\n            ,[\n            \'method\' => \'POST\',\n            \'url\' => route(\'song.store\')\n        ]);\n\n        return view(\'song.create\', compact(\'form\'));\n    }\n}\n```\n\n\n## Contributing\n\nProject follows [PSR-2](http://www.php-fig.org/psr/psr-2/) standard and it\'s covered with PHPUnit tests.\nPull requests should include tests and pass [Travis CI](https://travis-ci.org/kristijanhusak/laravel-form-builder) build.\n\nTo run tests first install dependencies with `composer install`.\n\nAfter that tests can be run with `vendor/bin/phpunit`\n'