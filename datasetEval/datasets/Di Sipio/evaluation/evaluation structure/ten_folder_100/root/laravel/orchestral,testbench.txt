b'Laravel Testing Helper for Packages Development\n==============\n\nTestbench Component is a simple package that has been designed to help you write tests for your Laravel package, especially when there is routing involved.\n\n[![Build Status](https://travis-ci.org/orchestral/testbench.svg?branch=4.x)](https://travis-ci.org/orchestral/testbench)\n[![Latest Stable Version](https://poser.pugx.org/orchestra/testbench/v/stable)](https://packagist.org/packages/orchestra/testbench)\n[![Total Downloads](https://poser.pugx.org/orchestra/testbench/downloads)](https://packagist.org/packages/orchestra/testbench)\n[![License](https://poser.pugx.org/orchestra/testbench/license)](https://packagist.org/packages/orchestra/testbench)\n\n* [Version Compatibility](#version-compatibility)\n* [Getting Started](#getting-started)\n* [Installation](#installation)\n* [Usage](#usage)\n* [Example](#example)\n* [Alternative Testing](#alternative-testing)\n* [Troubleshoot](#troubleshoot)\n* [Changelog](https://github.com/orchestral/testbench/releases)\n\n## Version Compatibility\n\n Laravel  | Testbench\n:---------|:----------\n 5.0.x    | 3.0.x\n 5.1.x    | 3.1.x\n 5.2.x    | 3.2.x\n 5.3.x    | 3.3.x\n 5.4.x    | 3.4.x\n 5.5.x    | 3.5.x\n 5.6.x    | 3.6.x\n 5.7.x    | 3.7.x\n 5.8.x    | 3.8.x\n 6.x      | 4.x\n\n## Getting Started\n\nBefore going through the rest of this documentation, please take some time to read the [Package Development](https://laravel.com/docs/6.x/packages) section of Laravel\'s own documentation, if you haven\'t done so yet.\n\n## Installation\n\nTo install through composer, simply put the following in your `composer.json` file:\n\n```json\n{\n    "require-dev": {\n        "orchestra/testbench": "^4.0"\n    }\n}\n```\n\nAnd then run `composer install` from the terminal.\n\n### Quick Installation\n\nAbove installation can also be simplify by using the following command:\n\n    composer require --dev "orchestra/testbench=^4.0"\n\n## Usage\n\nTo use Testbench Component, all you need to do is extend `Orchestra\\Testbench\\TestCase` instead of `PHPUnit\\Framework\\TestCase`. The fixture `app` booted by `Orchestra\\Testbench\\TestCase` is predefined to follow the base application skeleton of Laravel 6.\n\n```php\n<?php\n\nclass TestCase extends Orchestra\\Testbench\\TestCase\n{\n    //\n}\n```\n\n### Custom Service Provider\n\nTo load your package service provider, override the `getPackageProviders`.\n\n```php\nprotected function getPackageProviders($app)\n{\n    return [\'Acme\\AcmeServiceProvider\'];\n}\n```\n\n### Custom Aliases\n\nTo load your package alias, override the `getPackageAliases`.\n\n```php\nprotected function getPackageAliases($app)\n{\n    return [\n        \'Acme\' => \'Acme\\Facade\'\n    ];\n}\n```\n\n### Overriding setUp() method\n\nSince `Orchestra\\Testbench\\TestCase` replace Laravel\'s `Illuminate\\Foundation\\Testing\\TestCase`, if you need your own `setUp()` implementation, do not forget to call `parent::setUp()`:\n\n```php\n/**\n * Setup the test environment.\n */\nprotected function setUp()\n{\n    parent::setUp();\n\n    // Your code here\n}\n```\n\n#### Setup Environment\n\nIf you need to add something early in the application bootstrapping process (which executed between registering service providers and booting service providers) you could use the `getEnvironmentSetUp()` method:\n\n```php\n/**\n * Define environment setup.\n *\n * @param  \\Illuminate\\Foundation\\Application  $app\n * @return void\n */\nprotected function getEnvironmentSetUp($app)\n{\n    // Setup default database to use sqlite :memory:\n    $app[\'config\']->set(\'database.default\', \'testbench\');\n    $app[\'config\']->set(\'database.connections.testbench\', [\n        \'driver\'   => \'sqlite\',\n        \'database\' => \':memory:\',\n        \'prefix\'   => \'\',\n    ]);\n}\n```\n\n### Setup Environment using Annotation\n\nNew in Testbench Core 4.4 is the ability to use `@environment-setup` annotation to customise use of `getEnvironmentSetUp` specific for each test.\n\n```php\nprotected function useMySqlConnection($app) \n{\n    $app->config->set(\'database.default\', \'mysql\');\n}\n\nprotected function useSqliteConnection($app)\n{\n    $app->config->set(\'database.default\', \'sqlite\');\n}\n\n/**\n * @environment-setup useMySqlConnection\n */\npublic function testItCanBeConnectedWithMySql()\n{\n    // write your tests\n}\n\n/**\n * @environment-setup useSqliteConnection\n */\npublic function testItCanBeConnectedWithSqlite()\n{\n    // write your tests\n}\n```\n\n#### Memory SQLite Connection\n\nTo reduce setup configuration, you could use `testing` database connection (`:memory:` with `sqlite` driver) via setting it up under `getEnvironmentSetUp()` or by defining it under PHPUnit Configuration File:\n\n```xml\n<phpunit>\n\n    // ...\n\n    <php>\n        <env name="DB_CONNECTION" value="testing"/>\n    </php>\n\n</phpunit>\n```\n\n\n\n### Overriding Console Kernel\n\nYou can easily swap Console Kernel for application bootstrap by overriding `resolveApplicationConsoleKernel()` method:\n\n```php\n/**\n * Resolve application Console Kernel implementation.\n *\n * @param  \\Illuminate\\Foundation\\Application  $app\n * @return void\n */\nprotected function resolveApplicationConsoleKernel($app)\n{\n    $app->singleton(\'Illuminate\\Contracts\\Console\\Kernel\', \'Acme\\Testbench\\Console\\Kernel\');\n}\n```\n\n### Overriding HTTP Kernel\n\nYou can easily swap HTTP Kernel for application bootstrap by overriding `resolveApplicationHttpKernel()` method:\n\n```php\n/**\n * Resolve application HTTP Kernel implementation.\n *\n * @param  \\Illuminate\\Foundation\\Application  $app\n * @return void\n */\nprotected function resolveApplicationHttpKernel($app)\n{\n    $app->singleton(\'Illuminate\\Contracts\\Http\\Kernel\', \'Acme\\Testbench\\Http\\Kernel\');\n}\n```\n\n### Overriding Application Timezone\n\nYou can also easily override application default timezone, instead of the default `"UTC"`:\n\n```php\n/**\n * Get application timezone.\n *\n * @param  \\Illuminate\\Foundation\\Application  $app\n * @return string|null\n */\nprotected function getApplicationTimezone($app)\n{\n    return \'Asia/Kuala_Lumpur\';\n}\n```\n\n### Using Migrations\n\nPackage developer should be using `ServiceProvider::loadMigrationsFrom()` feature to automatically handle migrations for packages.\n\n```php\n$this->artisan(\'migrate\', [\'--database\' => \'testbench\'])->run();\n```\n\n#### Using Laravel Migrations\n\nBy default Testbench doesn\'t execute the default Laravel migrations which include `users` and `password_resets` table. In order to run the migration just add the following command:\n\n```php\n$this->loadLaravelMigrations();\n```\n\nYou can also set specific database connection to be used by adding `--database` options:\n\n```php\n$this->loadLaravelMigrations([\'--database\' => \'testbench\']);\n```\n\n#### Running Testing Migrations\n\nTo run migrations that are **only used for testing purposes** and not part of your package, add the following to your base test class:\n\n```php\n/**\n * Setup the test environment.\n */\nprotected function setUp()\n{\n    parent::setUp();\n\n    $this->loadMigrationsFrom(__DIR__ . \'/database/migrations\');\n    \n    // and other test setup steps you need to perform\n}\n```\n\n##### Notes and Considerations\n\n* Your migration files has to suite Laravel\'s convention, e.g. `0000_00_00_000000_create_package_test_tables.php`.\n* You may choose to put your migrations folder in `tests/database/`.\n* You may choose to change your test-migrations class name to be different from the published class names, e.g. from `CreateUsersTable` to `CreateUsersTestTable` or otherwise you may encounter composer class loader collision.\n \n### Using Model Factories\n\nTestbench include `withFactories()` method to allow you to register custom model factory path for your test suite.\n\n```php\n$this->withFactories(__DIR__.\'/factories\');\n```\n\n## Example\n\nTo see a working example of testbench including how to set your configuration, check the file:\n\n* [Testing with Database](https://github.com/orchestral/testbench-core/tree/4.x/tests/Databases).\n\n## Alternative Testing\n\nThere also 3rd party packages that extends Testbench:\n\n* [Testbench with Laravel Dusk](https://github.com/orchestral/testbench-dusk)\n* [Testbench with BrowserKit](https://github.com/orchestral/testbench-browser-kit)\n* [Testbench with CodeCeption](https://github.com/aedart/testing-laravel)\n* [Testbench with PHPSpec](https://github.com/Pixelindustries/phpspec-testbench)\n\n## Troubleshoot\n\n### No supported encrypter found. The cipher and / or key length are invalid.\n\n    RuntimeException: No supported encrypter found. The cipher and / or key length are invalid.\n\nThis error would only occur if your test suite require usages of the encrypter. To solve this you can add a dummy `APP_KEY` or use a specific key to your application/package `phpunit.xml`.\n\n```xml\n<phpunit>\n\n    // ...\n\n    <php>\n        <env name="APP_KEY" value="AckfSECXIvnK5r28GVIWUAxmbBSjTsmF"/>\n    </php>\n\n</phpunit>\n```\n\n### Why Testbench doesn\'t include any of the `App` classes.\n\nThe reason Testbench remove all the classes is to make sure that you would never depends on it when developing Laravel Packages. Classes such as `App\\Http\\Controllers\\Controller` and `App\\User` are simple to be added but the problems with these classes is that it can be either:\n\n* Removed, moved to other location such as `App\\Models\\User`, or\n* Renamed using `php artisan app:name Acme` which would rename `App\\User` to `Acme\\User`.\n\n### Missing Browser Kit support after testing on Laravel 5.4\n\nReplace `orchestra/testbench` with `orchestra/testbench-browser-kit` and follow [the installation guide](https://github.com/orchestral/testbench-browser-kit#installation).\n'