b'#  Retrieve data from Google Analytics\n\n[![Latest Version](https://img.shields.io/github/release/spatie/laravel-analytics.svg?style=flat-square)](https://github.com/spatie/laravel-analytics/releases)\n[![MIT Licensed](https://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat-square)](LICENSE.md)\n[![Build Status](https://img.shields.io/travis/spatie/laravel-analytics/master.svg?style=flat-square)](https://travis-ci.org/spatie/laravel-analytics)\n[![Quality Score](https://img.shields.io/scrutinizer/g/spatie/laravel-analytics.svg?style=flat-square)](https://scrutinizer-ci.com/g/spatie/laravel-analytics)\n[![StyleCI](https://styleci.io/repos/32067087/shield)](https://styleci.io/repos/32067087)\n[![Total Downloads](https://img.shields.io/packagist/dt/spatie/laravel-analytics.svg?style=flat-square)](https://packagist.org/packages/spatie/laravel-analytics)\n\nUsing this package you can easily retrieve data from Google Analytics.\n\nHere are a few examples of the provided methods:\n\n```php\nuse Analytics;\nuse Spatie\\Analytics\\Period;\n\n//fetch the most visited pages for today and the past week\nAnalytics::fetchMostVisitedPages(Period::days(7));\n\n//fetch visitors and page views for the past week\nAnalytics::fetchVisitorsAndPageViews(Period::days(7));\n```\n\nMost methods will return an `\\Illuminate\\Support\\Collection` object containing the results.\n\nSpatie is a webdesign agency in Antwerp, Belgium. You\'ll find an overview of all our open source projects [on our website](https://spatie.be/opensource).\n\n> **If you\'re using v1 of this package, please refer to [an older version of this readme](https://github.com/spatie/laravel-analytics/blob/88eb75beadcd8dade2f3ee2423f3716253b2104d/README.md) for the installation and usage guide.**\n\n## Installation\n\n> For Laravel 5.8, use version 3.7.0 of this package!\n\nThis package can be installed through Composer.\n\n``` bash\ncomposer require spatie/laravel-analytics\n```\n\nOptionally, you can publish the config file of this package with this command:\n\n``` bash\nphp artisan vendor:publish --provider="Spatie\\Analytics\\AnalyticsServiceProvider"\n```\n\nThe following config file will be published in `config/analytics.php`\n\n```php\nreturn [\n\n    /*\n     * The view id of which you want to display data.\n     */\n    \'view_id\' => env(\'ANALYTICS_VIEW_ID\'),\n\n    /*\n     * Path to the client secret json file. Take a look at the README of this package\n     * to learn how to get this file. You can also pass the credentials as an array \n     * instead of a file path.\n     */\n    \'service_account_credentials_json\' => storage_path(\'app/analytics/service-account-credentials.json\'),\n\n    /*\n     * The amount of minutes the Google API responses will be cached.\n     * If you set this to zero, the responses won\'t be cached at all.\n     */\n    \'cache_lifetime_in_minutes\' => 60 * 24,\n\n    /*\n     * Here you may configure the "store" that the underlying Google_Client will\n     * use to store it\'s data.  You may also add extra parameters that will\n     * be passed on setCacheConfig (see docs for google-api-php-client).\n     *\n     * Optional parameters: "lifetime", "prefix"\n     */\n    \'cache\' => [\n        \'store\' => \'file\',\n    ],\n];\n```\n\n## How to obtain the credentials to communicate with Google Analytics\n\n### Getting credentials\n\nThe first thing you\xe2\x80\x99ll need to do is to get some credentials to use Google API\xe2\x80\x99s. I\xe2\x80\x99m assuming that you\xe2\x80\x99ve already created a Google account and are signed in. Head over to [Google API\xe2\x80\x99s site](https://console.developers.google.com/apis) and click "Select a project" in the header.\n\n![1](https://spatie.github.io/laravel-analytics/v2/1.jpg)\n\nNext up we must specify which API\xe2\x80\x99s the project may consume. In the list of available API\xe2\x80\x99s click "Google Analytics API". On the next screen click "Enable".\n\n![2](https://spatie.github.io/laravel-analytics/v2/2.jpg)\n\nNow that you\xe2\x80\x99ve created a project that has access to the Analytics API it\xe2\x80\x99s time to download a file with these credentials. Click "Credentials" in the sidebar. You\xe2\x80\x99ll want to create a "Service account key".\n\n![3](https://spatie.github.io/laravel-analytics/v2/3.jpg)\n\nOn the next screen you can give the service account a name. You can name it anything you\xe2\x80\x99d like. In the service account id you\xe2\x80\x99ll see an email address. We\xe2\x80\x99ll use this email address later on in this guide. Select "JSON" as the key type and click "Create" to download the JSON file.\n\n![4](https://spatie.github.io/laravel-analytics/v2/4.jpg)\n\nSave the json inside your Laravel project at the location specified in the `service_account_credentials_json` key of the config file of this package. Because the json file contains potentially sensitive information I don\'t recommend committing it to your git repository.\n\n### Granting permissions to your Analytics property\n\nI\'m assuming that you\'ve already created a Analytics account on the [Analytics site](https://analytics.google.com/analytics). Go to "User management" in the Admin-section of the property.\n\n![5](https://spatie.github.io/laravel-analytics/v2/5.jpg)\n\nOn this screen you can grant access to the email address found in the `client_email` key from the json file you download in the previous step. Read only access is enough.\n\n![6](https://spatie.github.io/laravel-analytics/v2/6.jpg)\n\n### Getting the view id\n\nThe last thing you\'ll have to do is fill in the `view_id` in the config file. You can get the right value on the [Analytics site](https://analytics.google.com/analytics). Go to "View setting" in the Admin-section of the property.\n\n![7](https://spatie.github.io/laravel-analytics/v2/7.jpg)\n\nYou\'ll need the `View ID` displayed there.\n\n![8](https://spatie.github.io/laravel-analytics/v2/8.jpg)\n\n## Usage\n\nWhen the installation is done you can easily retrieve Analytics data. Nearly all methods will return an `Illuminate\\Support\\Collection`-instance.\n\n\nHere are a few examples using periods \n```php\n//retrieve visitors and pageview data for the current day and the last seven days\n$analyticsData = Analytics::fetchVisitorsAndPageViews(Period::days(7));\n\n//retrieve visitors and pageviews since the 6 months ago\n$analyticsData = Analytics::fetchVisitorsAndPageViews(Period::months(6));\n\n//retrieve sessions and pageviews with yearMonth dimension since 1 year ago \n$analyticsData = Analytics::performQuery(\n    Period::years(1),\n    \'ga:sessions\',\n    [\n        \'metrics\' => \'ga:sessions, ga:pageviews\',\n        \'dimensions\' => \'ga:yearMonth\'\n    ]\n);\n```\n\n`$analyticsData` is a `Collection` in which each item is an array that holds keys `date`, `visitors` and `pageViews`\n\nIf you want to have more control over the period you want to fetch data for, you can pass a `startDate` and an `endDate` to the period object.\n\n```php\n$startDate = Carbon::now()->subYear();\n$endDate = Carbon::now();\n\nPeriod::create($startDate, $endDate);\n```\n\n## Provided methods\n\n### Visitors and pageviews\n\n```php\npublic function fetchVisitorsAndPageViews(Period $period): Collection\n```\n\nThe function returns a `Collection` in which each item is an array that holds keys `date`, `visitors`, `pageTitle` and `pageViews`.\n\n### Total visitors and pageviews\n\n```php\npublic function fetchTotalVisitorsAndPageViews(Period $period): Collection\n```\n\nThe function returns a `Collection` in which each item is an array that holds keys `date`, `visitors`, and `pageViews`.\n\n### Most visited pages\n\n```php\npublic function fetchMostVisitedPages(Period $period, int $maxResults = 20): Collection\n```\n\nThe function returns a `Collection` in which each item is an array that holds keys `url`, `pageTitle` and `pageViews`.\n\n### Top referrers\n\n```php\npublic function fetchTopReferrers(Period $period, int $maxResults = 20): Collection\n```\n\nThe function returns a `Collection` in which each item is an array that holds keys `url` and `pageViews`.\n\n### User Types\n\n```php\npublic function fetchUserTypes(Period $period): Collection\n```\n\nThe function returns a `Collection` in which each item is an array that holds keys `type` and `sessions`.\n\n### Top browsers\n\n```php\npublic function fetchTopBrowsers(Period $period, int $maxResults = 10): Collection\n```\n\nThe function returns a `Collection` in which each item is an array that holds keys `browser` and `sessions`.\n\n### All other Google Analytics queries\n\nTo perform all other queries on the Google Analytics resource use `performQuery`.  [Google\'s Core Reporting API](https://developers.google.com/analytics/devguides/reporting/core/v3/common-queries) provides more information on which metrics and dimensions might be used.\n\n```php\npublic function performQuery(Period $period, string $metrics, array $others = [])\n```\n\nYou can get access to the underlying `Google_Service_Analytics` object:\n\n```php\nAnalytics::getAnalyticsService();\n```\n\n## Testing\n\nRun the tests with:\n\n``` bash\nvendor/bin/phpunit\n```\n\n### Changelog\n\nPlease see [CHANGELOG](CHANGELOG.md) for more information what has changed recently.\n\n## Contributing\n\nPlease see [CONTRIBUTING](CONTRIBUTING.md) for details.\n\n## Security\n\nIf you discover any security related issues, please email freek@spatie.be instead of using the issue tracker.\n\n## Postcardware\n\nYou\'re free to use this package, but if it makes it to your production environment we highly appreciate you sending us a postcard from your hometown, mentioning which of our package(s) you are using.\n\nOur address is: Spatie, Samberstraat 69D, 2060 Antwerp, Belgium.\n\nWe publish all received postcards [on our company website](https://spatie.be/en/opensource/postcards).\n\n## Credits\n\n- [Freek Van der Herten](https://github.com/freekmurze)\n- [All Contributors](../../contributors)\n\n## Support us\n\nSpatie is a webdesign agency based in Antwerp, Belgium. You\'ll find an overview of all our open source projects [on our website](https://spatie.be/opensource).\n\nDoes your business depend on our contributions? Reach out and support us on [Patreon](https://www.patreon.com/spatie).\nAll pledges will be dedicated to allocating workforce on maintenance and new awesome stuff.\n\n## License\n\nThe MIT License (MIT). Please see [License File](LICENSE.md) for more information.\n'