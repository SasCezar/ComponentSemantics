b'# basher\n\nA package manager for shell scripts and functions.\n\nBasher allows you to quickly install shell packages directly from github (or\nother sites). Instead of looking for specific install instructions for each\npackage and messing with your path, basher will create a central location for\nall packages and manage their binaries for you.\n\nEven though it is called basher, it also works with zsh and fish.\n\n[![Build Status](https://travis-ci.org/basherpm/basher.svg?branch=master)](https://travis-ci.org/basherpm/basher)\n\n## Installation\n\n1. Checkout basher on `~/.basher`\n\n    ~~~ sh\n    $ git clone https://github.com/basherpm/basher.git ~/.basher\n    ~~~\n\n2. Add `~/.basher/bin` to `$PATH` for easy access to the basher command-line utility.\n\n    ~~~ sh\n    $ echo \'export PATH="$HOME/.basher/bin:$PATH"\' >> ~/.bash_profile\n    ~~~\n\n    **Ubuntu Desktop note**: Modify your `~/.bashrc` instead of `~/.bash_profile`.\n\n    **Zsh note**: Modify your `~/.zshrc` file instead of `~/.bash_profile`.\n\n    **For Fish**: Add the following to you `~/.config/fish/config.fish`\n\n    ~~~ sh\n    if test -d ~/.basher\n      set basher ~/.basher/bin\n    end\n    set -gx PATH $basher $PATH\n    ~~~\n\n3. Add `basher init` to your shell to enable basher runtime functions\n\n    ~~~ sh\n    $ echo \'eval "$(basher init -)"\' >> ~/.bash_profile\n    ~~~\n\n    _Same as in previous step, use `~/.bashrc` on Ubuntu, `~/.zshrc` for Zsh._\n\n    _For **Fish**, use the following line on your `~/.config/fish/config.fish`._\n\n    ~~~ sh\n    status --is-interactive; and . (basher init -|psub)\n    ~~~\n\n## Updating\n\nRun `basher update` to update basher.\n\n## Usage\n\n### Installing packages from github.com\n\n~~~ sh\n$ basher install sstephenson/bats\n~~~\n\nThis will install bats from https://github.com/sstephenson/bats and add `bin/bats` to the PATH.\n\n### Installing packages from other sites\n\n~~~ sh\n$ basher install bitbucket.org/user/repo_name\n~~~\n\nThis will install `repo_name` from https://bitbucket.org/user/repo_name\n\n### Using ssh instead of https\n\nIf you want to do local development on installed packages and you have ssh\naccess to the site, use `--ssh` to override the protocol:\n\n~~~ sh\n$ basher install --ssh juanibiapina/gg\n~~~\n\n### Installing a local package\n\nIf you develop a package locally and want to try it through basher,\nuse the `link` command:\n\n~~~ sh\n$ basher link directory my_namespace/my_package\n~~~\n\nThe `link` command will install the dependencies of the local package.\nYou can prevent that with the `--no-deps` option:\n\n~~~ sh\n$ basher link --no-deps directory my_namespace/my_package\n~~~\n\n### Sourcing files from a package into current shell\n\nBasher provides an `include` function that allows sourcing files into the\ncurrent shell. After installing a package, you can run:\n\n```\ninclude username/repo lib/file.sh\n```\n\nThis will source a file `lib/file.sh` under the package `username/repo`.\n\n### Command summary\n\n- `basher commands` - List commands\n- `basher help <command>` - Display help for a command\n- `basher uninstall <package>` - Uninstall a package\n- `basher update` - Update basher to latest version from master\n- `basher list` - List installed packages\n- `basher outdated` - List packages which are not in the latest version\n- `basher upgrade <package>` - Upgrade a package to the latest version\n\n### Configuration options\n\nTo change the behavior of basher, you can set the following variables either\nglobally or before each command:\n\n- `BASHER_FULL_CLONE=true` - Clones the full repo history instead of only the last commit (useful for package development)\n- `BASHER_PREFIX` - set the installation and package checkout prefix (default is `$BASHER_ROOT/cellar`).  Setting this to `/usr/local`, for example, will install binaries to `/usr/local/bin`, manpages to `/usr/local/man`, completions to `/usr/local/completions`, and clone packages to `/usr/local/packages`.  This allows you to manage "global packages", distinct from individual user packages.\n\n## Packages\n\nPackages are simply repos (username/repo). You may also specify a site\n(site/username/repo).\n\nAny files inside a bin directory are added to the path. If there is no bin\ndirectory, any executable files in the package root are added to the path.\n\nAny manpages (files ended in `\\.[0-9]`) inside a `man` directory are added\nto the manpath.\n\nOptionally, a repo might contain a `package.sh` file which specifies binaries,\ndependencies and completions in the following format:\n\n~~~ sh\nBINS=folder/file1:folder/file2.sh\nDEPS=user1/repo1:user2/repo2\nBASH_COMPLETIONS=completions/package\nZSH_COMPLETIONS=completions/_package\n~~~\n\nBINS specified in this fashion have higher precedence then the inference rules\nabove.\n\n## Development\n\nTo run the tests, install bats:\n\n~~~ sh\n$ basher install sstephenson/bats\n~~~\n\nupdate submodules:\n\n~~~ sh\n$ git submodule update --init\n~~~\n\nand then run:\n\n~~~ sh\n$ make\n~~~\n'