b'# kscript - Having fun with Kotlin scripting\n\n\n[![GitHub release](https://img.shields.io/github/release/holgerbrandl/kscript.svg)](https://github.com/holgerbrandl/kscript/releases)\n[![Build Status](https://travis-ci.org/holgerbrandl/kscript.svg?branch=master)](https://travis-ci.org/holgerbrandl/kscript)\n[![Gitter](https://badges.gitter.im/holgerbrandl/kscript.svg)](https://gitter.im/holgerbrandl/kscript?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\n\nEnhanced scripting support for [Kotlin](https://kotlinlang.org/) on *nix-based systems.\n\nKotlin has some built-in support for scripting already but it is not yet feature-rich enough to be a viable alternative in the shell.\n\nIn particular this wrapper around `kotlinc` adds\n* Compiled script caching (using md5 checksums)\n* Dependency declarations using gradle-style resource locators and automatic dependency resolution with [jcabi-aether](https://github.com/jcabi/jcabi-aether)\n* More options to provide scripts including interpreter mode, reading from stdin, local files or URLs\n* Embedded configuration for Kotlin runtime options\n* Support library to ease the writing of Kotlin scriptlets\n* Deploy scripts as stand-alone binaries\n\nTaken all these features together, `kscript` provides an easy-to-use, very flexible, and almost zero-overhead solution to write self-contained mini-applications with Kotlin.\n\n\n---\n**[`kscript` presentation from KotlinConf2017!](https://holgerbrandl.github.io/kscript_kotlinconf_2017/kscript_kotlinconf.html)**\n\n---\n\n[TOC levels=2,2]: # " "\n\n- [Installation](#installation)\n- [Script Input Modes](#script-input-modes)\n- [Script Configuration](#script-configuration)\n- [Text Processing Mode](#text-processing-mode)\n- [Treat yourself a REPL with `--interactive`](#treat-yourself-a-repl-with---interactive)\n- [Boostrap IDEA from a `kscript`let](#boostrap-idea-from-a-kscriptlet)\n- [Deploy scripts as standalone binaries](#deploy-scripts-as-standalone-binaries)\n- [Embed kscript installer within your script](#embed-kscript-installer-within-your-script)\n- [FAQ](#faq)\n- [Support](#support)\n- [How to contribute?](#how-to-contribute)\n- [Acknowledgements](#acknowledgements)\n\n\nInstallation\n------------\n\nTo use `kscript` just Kotlin and Maven are required. To [install Kotlin](https://kotlinlang.org/docs/tutorials/command-line.html) we recommend [sdkman](http://sdkman.io/install):\n```\ncurl -s "https://get.sdkman.io" | bash  # install sdkman\nsource ~/.bash_profile                  # add sdkman to PATH\n\nsdk install kotlin                      # install Kotlin\n```\n\nOnce Kotlin is ready, you can install `kscript` with\n```\nsdk install kscript\n```\n\n\nTo test your installation simply run\n```bash\nkscript --help\n```\n\nThis will check and inform about udpates. To update `kscript` simply install it again as described above.\n\n#### Installation without `sdkman`\n\nIf you have Kotlin and Maven already and you would like to install the latest `kscript` release without using `sdkman` you can do so by unzipping the [latest ](https://github.com/holgerbrandl/kscript/releases/latest) binary release. Don\'t forget to update your `$PATH` accordingly.\n\n#### Installation with Homebrew\n\nOn MacOS you can install `kscript` also with [Homebrew](https://brew.sh/)\n```bash\nbrew install holgerbrandl/tap/kscript\n```\n\nTo upgrade to latest version\n```bash\nbrew update\nbrew upgrade holgerbrandl/tap/kscript\n```\n#### Build it yourself\n\nTo build `kscript` yourself, simply clone the repo and do\n```bash\n./gradlew assemble\n\n## Run kscript from output dir\n./build/libs/kscript\n```\n\n## Script Input Modes\n\nThe main mode of operation is `kscript <script>`.\n\nThe `<script>` can be a Kotlin `*.kts` script file , a script URL, `-` for stdin, a process substitution file handle, a `*.kt` source file with a main method, or some kotlin code.\n\n\n### Interpreter Usage\n\nTo use `kscript` as interpreter for a script just point to it in the shebang line of your Kotlin scripts:\n\n```kotlin\n#!/usr/bin/env kscript\n\nprintln("Hello from Kotlin!")\nfor (arg in args) {\n    println("arg: $arg")\n}\n```\n\n### Inlined Usage\n\n\nTo use `kscript` in a workflow without creating an additional script file, you can also use one of its supported modes for _inlined usage_. The following modes are supported:\n\n* Directly provide a Kotlin scriptlet as argument\n```{bash}\nkscript \'println("hello world")\'\n```\n\n\n* Pipe a Kotlin snippet into `kscript` and instruct it to read from `stdin` by using `-` as script argument\n\n```{bash}\necho \'\nprintln("Hello Kotlin.")\n\' |  kscript -\n```\n\n\n* Using `heredoc` (preferred solution for inlining) which gives you some more flexibility to also use single quotes in your script:\n\n```{bash}\nkscript - <<"EOF"\nprintln("It\'s a beautiful day!")\nEOF\n```\n\n* Since the piped content is considered as a regular script it can also have dependencies\n```{bash}\nkscript - <<"EOF"\n//DEPS com.offbytwo:docopt:0.6.0.20150202 log4j:log4j:1.2.14\n\nimport org.docopt.Docopt\nval docopt = Docopt("Usage: jl <command> [options] [<joblist_file>]")\n\nprintln("hello again")\nEOF\n```\n\n* Finally (for sake of completeness), it also works with process substitution and for sure you can always provide additional arguments (exposed as `args : Array<String>` within the script)\n```{bash}\nkscript <(echo \'println("k-onliner")\') arg1 arg2 arg3 \n```\n\nInlined _kscripts_ are also cached based on `md5` checksum, so running the same snippet again will use a cached jar (sitting in `~/.kscript`).\n\n\n### URL usage\n\nTo support remote scriplet repositories, `kscript` can also work with URLs. Consider the following [hello-world-gist-scriptlet](https://github.com/holgerbrandl/kscript/blob/master/examples/url_example.kts) which is hosted on github (but any URL would work). To run it locally as a tool simply refer to it (here using the shortened [raw-URL](https://raw.githubusercontent.com/holgerbrandl/kscript/master/examples/url_example.kts) of the script for better readability)\n\n```bash\nkscript https://git.io/v1cG6 my argu ments \n```\n\nTo streamline the usage, the first part could be even aliased:\n```bash\nalias hello_kscript="kscript https://git.io/v1cG6"\nhello_kscript my argu ments\n```\nVia this mechanism, `kscript` allows for easy integration of remotely hosted (mini) programs into data workflows.\n\nURL-scripts are cached locally to speed up processing, and `kscript --clear-cache` can be used to wipe the cache if needed.\n\nSee this [blogpost](http://holgerbrandl.github.io/kotlin/2016/12/02/mini_programs_with_kotlin.html) for a more extensive overview about URL support in `kscript`.\n\nScript Configuration\n--------------------\n\nThe following directives supported by `kscript` to configure scripts:\n\n* `//DEPS` to declare dependencies with gradle-style locators\n* `//KOTLIN_OPTS`  to configure the kotlin/java runtime environment\n* `//INCLUDE` to source kotlin files into the script\n* `//ENTRY` to declare the application entrypoint for kotlin `*.kt` applications\n\n\n### Declare dependencies with `//DEPS`\n\nTo specify dependencies simply use gradle-style locators. Here\'s an example using [docopt](https://github.com/docopt/docopt.java) and [log4j](http://logging.apache.org/log4j/2.x/)\n\n```kotlin\n#!/usr/bin/env kscript\n//DEPS com.offbytwo:docopt:0.6.0.20150202,log4j:log4j:1.2.14\n\nimport org.docopt.Docopt\nimport java.util.*\n\n\nval usage = """\nUse this cool tool to do cool stuff\nUsage: cooltool.kts [options] <igenome> <fastq_files>...\n\nOptions:\n --gtf <gtfFile>     Custom gtf file instead of igenome bundled copy\n --pc-only           Use protein coding genes only for mapping and quantification\n"""\n\nval doArgs = Docopt(usage).parse(args.toList())\n\nprintln("Hello from Kotlin!")\nprintln("Parsed script arguments are: \\n" + doArgs)\n```\n\n`kscript` will read dependencies from all lines in a script that start with `//DEPS` (if any). Multiple dependencies can be split by comma, space or semicolon.\n\n### Configure the runtime  with `//KOTLIN_OPTS`\n\n`kscript` allows to provide a `//KOTLIN_OPTS` directive followed by parameters passed on to `kotlin` similar to how dependencies are defined:\n```kotlin\n#!/usr/bin/env kscript\n//KOTLIN_OPTS -J-Xmx5g  -J-server\n\nprintln("Hello from Kotlin with 5g of heap memory running in server mode!")\n```\n\nNote: Similar to the runtime you can also tweak the compile step by providing `//COMPILER_OPTS`.\n\n### Ease prototyping with `//INCLUDE`\n\n`kscript` supports an `//INCLUDE` directive to directly include other source files without prior compilation. Absolute and relative paths, as well as URLs are supported. Example:\n\n```kotlin\n//utils.kt\nfun Array<Double>.median(): Double {\n    val (lower, upper) = sorted().let { take(size / 2) to takeLast(size / 2) }\n    return if (size % 2 == 0) (lower.last() + upper.first()) / 2.0 else upper.first()\n}\n```\n\nWhich can be now used using the `//INCLUDE` directive with\n\n```kotlin\n#!/usr/bin/env kscript\n\n//INCLUDE utils.kt\n\nval robustMean = listOf(1.3, 42.3, 7.).median()\nprintln(robustMean)\n```\nThe argument can be an URL, absolute or relative file path. Note that URLs used in include directives are cached locally to speed up processing, that is `kscript` won\'t fetch URLs again unless the user actively clears the cache with `kscript --clear-cache`.\n\nFor more examples see [here](test/resources/includes/include_variations.kts).\n\n\n### Use `//ENTRY` to run applications with `main` method\n\n\n`kscript` also supports running regular Kotlin `kt` files.\n\nExample: `./examples/Foo.kt`:\n\n```kotlin\npackage examples\n\n//ENTRY examples.Bar\n\nclass Bar{\n    companion object {\n        @JvmStatic fun main(args: Array<String>) {\n            println("Foo was called")\n        }\n    }\n}\n\nfun main(args: Array<String>) = println("main was called")\n```\n\nTo run top-level main instead we would use `//ENTRY examples.FooKt`\n\nThe latter is the default for `kt` files and could be omitted\n\n\n### Annotation driven script configuration\n\nUsing annotations instead of comment directives to configure scripts is cleaner and allow for better tooling.\n\n```kotlin\n// annotation-driven script configuration\n@file:DependsOn("de.mpicbg.scicomp:kutils:0.4")\n\n// comment directive\n//DEPS de.mpicbg.scicomp:kutils:0.4\n```\n\n To do so `kscript` supports [annotations](https://github.com/holgerbrandl/kscript-annotations) to be used instead of comment directives:\n```kotlin\n#!/usr/bin/env kscript\n\n// Declare dependencies\n@file:DependsOn("de.mpicbg.scicomp:kutils:0.4")\n@file:DependsOn("com.beust:klaxon:0.24", "com.github.kittinunf.fuel:fuel:1.3.1")\n\n\n// To use a custom maven repository you can declare it with\n@file:MavenRepository("imagej-releases","http://maven.imagej.net/content/repositories/releases" )\n\n// For compatibility with https://github.com/ligee/kotlin-jupyter kscript supports also\n@file:DependsOnMaven("net.clearvolume:cleargl:2.0.1")\n// Note that for compatibility reasons, only one locator argument is allowed for @DependsOnMaven\n\n\n// also protected artifact repositories are supported, see <https://github.com/holgerbrandl/kscript/blob/master/test/TestsReadme.md#manual-testing>\n// @file:MavenRepository("my-art", "http://localhost:8081/artifactory/authenticated_repo", user="auth_user", password="password")\n// You can use environment variables for user and password when string surrounded by double {} brackets \n// @file:MavenRepository("my-art", "http://localhost:8081/artifactory/authenticated_repo", user="{{ARTIFACTORY_USER}}", password="{{ARTIFACTORY_PASSWORD}}")\n// will be use \'ARTIFACTORY_USER\' and \'ARTIFACTORY_PASSWORD\' environment variables\n// if the value doesn\'t found in the script environment  will fail\n\n// Include helper scripts without deployment or prior compilation\n@file:Include("util.kt")\n\n\n// Define kotlin options\n@file:KotlinOpts("-J-Xmx5g")\n@file:KotlinOpts("-J-server")\n@file:CompilerOpts("-jvm-target 1.8")\n\n// declare application entry point (applies on for kt-files)\n@file:EntryPoint("Foo.bar") \n\nprint("1+1")\n```\n\nTo enable the use of these annotations in Intellij, the user must add the following artifact (hosted on jcenter) to the project dependencies:\n```\ncom.github.holgerbrandl:kscript-annotations:1.2\n```\n\n`kscript` will automatically detect an annotation-driven script, and if so will declare a dependency on this artifact internally.\n\nNote, that if a script is located in a package other than the root package, you need to import the annotations with (e.g. `import DependsOn`).\n\n\n## Text Processing Mode\n\n`kscript` can be used as a speedier and more flexible substitute for built-in terminal text tools such as `awk` or `sed`. Its text processing mode can be enabled with `-t` or `--text`. If so, `kscript` will\n\n* Declare `com.github.holgerbrandl:kscript-support:1.2.4` as dependency for the script. This [support library](https://github.com/holgerbrandl/kscript-support-api) eases the writing of Kotlin scriptlets for text-processing. It includes solutions to common use-cases like argument parsing, data streaming, IO utilities, and various iterators to streamline the writing of scriptlets for text processing.\n* Import the `kscript.*` namespace\n* Define variable `val lines = kscript.text.resolveArgFile(args)` which returns an iterator over the lines in the first input argument of the script, or the standard input if no file arguments are provided to the script\n\n\nThis allows to to replace `awk`ward constructs (or `sed` or`perl`) with _kotlinesque_ solutions such as\n\n```bash\ncat some_file | kscript -t \'lines\n    .filter { "^de0[-0]*".toRegex().matches(it) }\n    .map { it + "foo:" }\n    .print()\n\'\n```\n\nIn this example, the extension method [`Iterable<String>.print()`](https://github.com/holgerbrandl/kscript-support-api/blob/master/src/main/kotlin/kscript/text/StreamUtil.kt#L34) to print the lines to stdout comes from the support API. The rest is stdlib Kotlin.\n\n For more examples using the support library see this [blog post](http://holgerbrandl.github.io/kotlin/2017/05/08/kscript_as_awk_substitute.html).\n\nTreat yourself a REPL with `--interactive`\n------------------------------------------\n\nTo create an interactive kotlin shell (aka [REPL](https://kotlinlang.org/docs/tutorials/command-line.html#running-the-repl)) with all script dependencies added to the classpath you can use `--interactive`.\n\nFor example, let\'s assume the following short script, named `CountRecords.kts`\n```kotlin\n#!/usr/bin/env kscript\n@file:DependsOn("de.mpicbg.scicomp:kutils:0.4")\n\nimport de.mpicbg.scicomp.bioinfo.openFasta\n\nif (args.size != 1) {\n    System.err.println("Usage: CountRecords <fasta>")\n    kotlin.system.exitProcess(-1)\n}\n\nval records = openFasta(java.io.File(args[0]))\nprintln(records.count())\n```\n\nTo build a REPL that has the declared artifact in its classpath, we can just do\n\n```bash\nkscript --interactive CountRecords.kts\n```\nwhich will bring up the classpath-enhanced REPL:\n```\nCreating REPL from CountRecords.kts\nWelcome to Kotlin version 1.1.51 (JRE 1.8.0_151-b12)\n>>> import de.mpicbg.scicomp.bioinfo.openFasta\n>>> \n```\n\nBoostrap IDEA from a `kscript`let\n-----------------------------------\n\nArtifacts and versions will differ between scripts, so it is hard to maintain them all in a single project. To nevertheless provide optimal tooling when scripting with Kotlin `kscript` allows to create temporary projects for `<script>` arguments. .\n\n```bash\nkscript --idea CountRecords.kts\n```\nThis will open [IntelliJ IDEA](https://www.jetbrains.com/idea/) with a minimalistic project containing just your (1) `<script>` and (2) a generated `gradle.build` file:\n\n![](misc/readme_images/minus_idea.png)\n\nThis assumes that you have the Intellij IDEA command line launcher `idea` in your `PATH`. It can be created in IntelliJ under `Tools -> Create Command-line Launcher`\n\nDeploy scripts as standalone binaries\n--------------------------------------\n\nTo deploy a script simply do\n\n```bash\nkscript --package some_script.kts\n./some_script --arg u ments\n```\n\nThe created binary will contain a compiled copy of the script, as well as all declared dependencies (fatjar). Also runtime jvm parameters declared via `@file:KotlinOpts` are used to spin up the JVM.\n\n\nJust `java` is required to run these binaries.\n\n\nEmbed kscript installer within your script\n--------------------------------------\n\n To make a script automatically [install kscript](#installation) and its dependencies on first run if necessary, run:\n\n ```bash\nkscript --add-bootstrap-header some_script.kts\n```\n\nNow `some_script.kts` can be shared and run directly on any other machine that has `bash`, without having to go through the [Installation](#installation) steps first.\n\nNote that unlike the [`--package` option](#deploy-scripts-as-standalone-binaries) this doesn\'t produce a separate file, allowing the distributed script to be read and modified(including with [`kscript --idea`](#boostrap-idea-from-a-kscriptlet)) similar to what you might expect with bash/python/ruby scripts.\nOn the other hand this doesn\'t embed dependencies within the script("fat jar"), so internet connection may be required on its first run.\n\n\nFAQ\n---\n\n### Why is `kscript` not calling the main method in my `.kts` script?\n\nThere is [no need](https://kotlinlang.org/docs/tutorials/command-line.html#using-the-command-line-to-run-scripts) for a `main` method in a Kotlin script. Kotlin `*.kts` scripts can be more simplistic compared to more common kotlin `*.kt` source files. The former work without a `main` method by directly running the provided code from top to bottom. E.g.\n```\nprint("hello kotlin!")\n```\nis a valid Kotlin `kts` script. Plain and simple, no `main`, no `companion`, just a few bits of code.\n\n\n### Does `kscript` also work for regular kotlin `.kt` source files with a `main` as entry point?\n\nYes, (since v1.6) you can run kotlin source files through `kscript`. By default it will assume a top-level `main` method as entry-point.\n\nHowever in case you\'re using a companion object to declare the entry point, you need to indicate this via the `//ENTRY`/`@file:Entry` directive:\n\n\n### Why does it fail to read my script file when using cygwin?\n\nIn order to use cygwin you need to use windows paths to provide your scripts. You can map cygwin paths using `cygpath`. Example\n```bash\nkscript $(cygpath -w /cygdrive/z/some/path/my_script.kts)\n```\n\n### What are performance and resource usage difference between scripting with kotlin and python?\n\nKotlin is a compiled language, so there is a compilation overhead when you run a script/application written in Kotlin for the first time.\n\nKotlin runs (mainly) on the JVM which needs some time (~200ms) to start up. In contrast, the python interpreter has close to zero warmup time.\n\nI think there is a consensus that JVM programs execute much faster than python equivalents. Still, python might be faster depending on your specific usecase. Also, with kotlin-native becoming more mature, you could compile into native binaries directly, which should bring it close to C/C++ performance.\n\nMain motivations for using Kotlin over Python for scripting and development are\n* Kotlin is the better designed, more fluent language with much better tooling around it\n* The JVM dependency ecosystem allows for strict versioning. No more messing around with virtualenv, e.g. to run a short 10liner against a specific version of numpy.\n\n\n\n\n\n### Can I use custom artifact repositories?\n\nYes, via the `@MavenRepository` annotation. See [annotations section](#annotation-driven-script-configuration) or [custom_mvn_repo_annot](test/resources/custom_mvn_repo_annot.kts) for a complete example\n\n\nSupport\n-------\n\nFeel welcome to post ideas and suggestions to our [tracker](https://github.com/holgerbrandl/kscript/issues).\n\nMore advanced use-cases are documented in the [complementary user guide](docs/user_guide.md)\n\nHow to contribute?\n------------------\n\nWe always welcome pull requests and trouble tickets. :-)\n\n\nHelp to spread the word. Great community articles about `kscript` include\n* [Type-safety in the shell with kscript](https://medium.com/@OhadShai/type-safety-in-the-shell-with-kscript-7dd40d022537)\n* [Using Kotlin kscript for Preprocessing Data](https://medium.com/@kenkyee/using-kotlin-kscript-for-preprocessing-data-1dbff4eae292)\n* [kscript as substitute for awk](https://holgerbrandl.github.io/kotlin/2017/05/08/kscript_as_awk_substitute.html)\n* [A complete backend with Kotlin and your favourite text-editor](https://hackernoon.com/a-complete-backend-only-with-kotlin-and-your-favourite-text-editor-582b4528688) -using kscript\n\nYou could also show your support by upvoting `kscript` here on github, or by voting for issues in Intellij IDEA which impact `kscript`ing. Here are our top 2 tickets/annoyances that we would love to see fixed:\n\n* [KT-23526](https://youtrack.jetbrains.com/issue/KT-11473) In *.kts scripts, debugger ignores breakpoints in top-level statements and members\n* [KT-13347](https://youtrack.jetbrains.com/issue/KT-13347) Good code is red in injected kotlin language snippets\n\n\nTo allow for more interactive script development, you could also vote/comment on the most annoying REPL issues.\n\n* [KT-11473](https://youtrack.jetbrains.net/issue/KT-11473) Debugging of Kotlin scripts\n* [KT-24789](https://youtrack.jetbrains.net/issue/KT-24789) "Unresolved reference" when running a script which is a symlink to a script outside of source roots\n* [KT-12583](https://youtrack.jetbrains.com/issue/KT-12583) IDE REPL should run in project root directory\n* [KT-11409](https://youtrack.jetbrains.com/issue/KT-11409) Allow to "Send Selection To Kotlin Console"\n\n\nAcknowledgements\n----------------\n\nThe initial version of `kscript` was kindly contributed by [Oscar Gonzalez](https://github.com/oskargb).\n\nSpecial thanks to [Ilan Pillemer](https://github.com/ilanpillemer), [Andrey Mischenko ](https://github.com/gildor), [Stephen Byrne](https://github.com/stephenbyrne-mfj), [Eugene Susla](https://github.com/EugeneSusla), [Eli Hart](https://github.com/elihart), [Hwijae Lee](https://github.com/hj-lee) and [oshai](https://github.com/oshai) for [contributing](https://github.com/holgerbrandl/kscript/graphs/contributors) PRs to this repo.\n\nThanks also to the [Scionics Computer Innovation GmbH](https://www.scionics.com/) and the [MPI-CBG](http://www.mpi-cbg.de) for supporting this project.\n\n`kscript` was inspired by [kotlin-script](https://github.com/andrewoma/kotlin-script) which is another great way (now deprecated) to do scripting in Kotlin.\n'