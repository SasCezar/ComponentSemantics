b'<p align="right">\n  <a href="https://github.com/gsamokovarov/jump/releases">[releases]</a>\n</p>\n\n[![Build Status](https://travis-ci.org/gsamokovarov/jump.svg?branch=master)](https://travis-ci.org/gsamokovarov/jump) [![Go Report Card](https://goreportcard.com/badge/github.com/gsamokovarov/jump)](https://goreportcard.com/report/github.com/gsamokovarov/jump)\n\n**Jump** integrates with your shell and learns about your navigational habits by\nkeeping track of the directories you visit. It gives you the most visited\ndirectory for the shortest search term you type.\n\n![Demo](./assets/demo.svg)\n\n## Installation\n\nJump comes in packages for the following platforms.\n\n| Platform | Command |\n| --- | --- |\n| macOS | `brew install jump` |\n| Ubuntu | `wget https://github.com/gsamokovarov/jump/releases/download/v0.23.0/jump_0.23.0_amd64.deb && sudo dpkg -i jump_0.23.0_amd64.deb` |\n| Fedora | `wget https://github.com/gsamokovarov/jump/releases/download/v0.23.0/jump-0.23.0-1.x86_64.rpm && sudo rpm -i jump-0.23.0-1.x86_64.rpm` |\n| Go | `go get github.com/gsamokovarov/jump` |\n\n### Integration\n\nJump needs to be integrated with the shell. For `bash` and `zsh`, the the line\nbelow in needs to be in `~/.bashrc`, `~/bash_profile` or `~/.zshrc`:\n\n    eval "$(jump shell)"\n\nFor fish shell, put the line below needs to be in `~/.config/fish/config.fish`:\n\n    status --is-interactive; and source (jump shell fish | psub)\n\nOnce integrated, jump will automatically monitor directory changes and start\nbuilding an internal database.\n\n\n### But `j` is not my favourite letter!\n\nThis is fine, you can bind jump to `z`, with this:\n\n```bash\neval "$(jump shell --bind=z)"\n```\n\nAnd now, you can use `jump` like `z dir` and it would just work! This is only\nan example, you can bind it to _anything_. If you are one of those persons that\nlikes to type a lot with their fingers, you can do:\n\n```bash\neval "$(jump shell --bind=goto)"\n```\n\nVoila! `goto dir` becomes a thing. The possibilities are endless!\n\n## Usage\n\nOnce integrated, **jump** introduces the **j** helper. It accepts only search\nterms and as a design goal there are no arguments to **j**. Whatever you give\nit, it\'s treated as search term.\n\n**Jump** uses fuzzy matching to find the desired directory to jump to. This\nmeans that your search terms are patterns that match the desired directory\napproximately rather than exactly. Typing **2** to **5** consecutive characters\nof the directory name is all that **jump** needs to find it.\n\n### Regular jump\n\nThe default search behavior of **jump** is to fuzzy match the\ndirectory name of a score. The match is case insenstive.\n\nIf you visit the directory `/Users/genadi/Development/rails/web-console` often,\nyou can jump to it by:\n\n    $ j wc      # or...\n    $ j webc    # or...\n    $ j console # or...\n    $ j b-c     # or...\n\nUsing jump is all about saving key strokes. However, if you made the effort to\ntype a directory base name exactly, **jump** will try to find the exact match,\nrather than fuzzy search.\n\n    $ j web-console\n    $ pwd\n    /Users/genadi/Development/rails/web-console\n\n### Deep jump\n\nGiven the following directories:\n\n    /Users/genadi/Development/society/website\n    /Users/genadi/Development/chaos/website\n\nTyping `j site` matches only the base names of the directories. The base name\nof `/Users/genadi/Development/society/website` is `website`, the same as the\nother absolute path above. The jump above will land on the most scrored path,\nwhich is the `society` one, however what if we wanted to land on the `chaos`\nwebsite?\n\n    $ j ch site\n    $ pwd\n    /Users/genadi/Development/chaos/website\n\nThis instructs **jump** to look for a `site` match inside that is preceded by a\n`ch` match in the parent directory. The search is normalized only on the last\ntwo parts of the target paths. This will ensure a better match, because of the\nshorter path to fuzzy match on.\n\nThere are no depth limitations though and a jump to\n`/Users/genadi/Development/society/website` can look like:\n\n    $ j dev soc web\n    $ pwd\n    /Users/genadi/Development/society/website\n\nIn fact, every space passed to `j` is converted to an OS separator. The last\nsearch term can be expressed as:\n\n    $ j dev/soc/web\n    $ pwd\n    /Users/genadi/Development/society/website\n\n## Reverse jump\n\nBad jumps happen. Somethimes we\'re looking for a directory the isn\'t the most\nscored one at the moment. Imagine the following jump database:\n\n    /Users/genadi/Development/society/website\n    /Users/genadi/Development/chaos/website\n    /Users/genadi/Development/hack/website\n\nTyping `j web` would lead to:\n\n    $ j web\n    $ pwd\n    /Users/genadi/Development/society/website\n\nIf we didn\'t expect this result, instead of another search term, typing **j**\nwithout any arguments will instruct **jump** to go the second best match.\n\n    $ j\n    $ pwd\n    /Users/genadi/Development/chaos/website\n\n### Case sensitive jump\n\nTo trigger a case-sensitive search, use a term that has a capital letter.\n\n    $ j Dev\n    $ pwd\n    /Users/genadi/Development\n\nThe jump will resolve to `/Users/genadi/Development` even if there is\n`/Users/genadi/Development/dev-tools` that scores better.\n\n## Is it like autojump or z?\n\nYes, it is! You can import your datafile from `autojump` or `z` with:\n\n```bash\n$ jump import\n```\n\nThis will try `z` first then `autojump`, so you can even combine all the\nentries from both tools.\n\nThe command is safe to run on pre-existing jump database, because if an entry\nexist in jump already, it won\'t be imported and it\'s score will remain\nunchanged. You can be explicit and choose to import `autojump` or `z` with:\n\n```bash\n$ jump import autojump\n$ jump import z\n```\n\n\n<img align="center" src="https://github.com/gsamokovarov/jump/raw/master/assets/logo-light.png">\n\n[man]: http://gsamokovarov.com/jump\n[Go workspace]: https://golang.org/doc/code.html#Workspaces\n[conversation]: https://twitter.com/hkdobrev/status/838398833419767808\n'