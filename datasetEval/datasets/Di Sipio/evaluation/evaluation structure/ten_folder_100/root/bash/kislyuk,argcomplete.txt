b'argcomplete - Bash tab completion for argparse\n==============================================\n*Tab complete all the things!*\n\nArgcomplete provides easy, extensible command line tab completion of arguments for your Python script.\n\nIt makes two assumptions:\n\n* You\'re using bash as your shell (limited support for zsh, fish, and tcsh is available)\n* You\'re using `argparse <http://docs.python.org/3/library/argparse.html>`_ to manage your command line arguments/options\n\nArgcomplete is particularly useful if your program has lots of options or subparsers, and if your program can\ndynamically suggest completions for your argument/option values (for example, if the user is browsing resources over\nthe network).\n\nInstallation\n------------\n::\n\n    pip install argcomplete\n    activate-global-python-argcomplete\n\nSee `Activating global completion`_ below for details about the second step (or if it reports an error).\n\nRefresh your bash environment (start a new shell or ``source /etc/profile``).\n\nSynopsis\n--------\nPython code (e.g. ``my-awesome-script``):\n\n.. code-block:: python\n\n    #!/usr/bin/env python\n    # PYTHON_ARGCOMPLETE_OK\n    import argcomplete, argparse\n    parser = argparse.ArgumentParser()\n    ...\n    argcomplete.autocomplete(parser)\n    args = parser.parse_args()\n    ...\n\nShellcode (only necessary if global completion is not activated - see `Global completion`_ below), to be put in e.g. ``.bashrc``::\n\n    eval "$(register-python-argcomplete my-awesome-script)"\n\nargcomplete.autocomplete(*parser*)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nThis method is the entry point to the module. It must be called **after** ArgumentParser construction is complete, but\n**before** the ``ArgumentParser.parse_args()`` method is called. The method looks for an environment variable that the\ncompletion hook shellcode sets, and if it\'s there, collects completions, prints them to the output stream (fd 8 by\ndefault), and exits. Otherwise, it returns to the caller immediately.\n\n.. admonition:: Side effects\n\n Argcomplete gets completions by running your program. It intercepts the execution flow at the moment\n ``argcomplete.autocomplete()`` is called. After sending completions, it exits using ``exit_method`` (``os._exit``\n by default). This means if your program has any side effects that happen before ``argcomplete`` is called, those\n side effects will happen every time the user presses ``<TAB>`` (although anything your program prints to stdout or\n stderr will be suppressed). For this reason it\'s best to construct the argument parser and call\n ``argcomplete.autocomplete()`` as early as possible in your execution flow.\n\n.. admonition:: Performance\n\n If the program takes a long time to get to the point where ``argcomplete.autocomplete()`` is called, the tab completion\n process will feel sluggish, and the user may lose confidence in it. So it\'s also important to minimize the startup time\n of the program up to that point (for example, by deferring initialization or importing of large modules until after\n parsing options).\n\nSpecifying completers\n---------------------\nYou can specify custom completion functions for your options and arguments. Two styles are supported: callable and\nreadline-style. Callable completers are simpler. They are called with the following keyword arguments:\n\n* ``prefix``: The prefix text of the last word before the cursor on the command line.\n  For dynamic completers, this can be used to reduce the work required to generate possible completions.\n* ``action``: The ``argparse.Action`` instance that this completer was called for.\n* ``parser``: The ``argparse.ArgumentParser`` instance that the action was taken by.\n* ``parsed_args``: The result of argument parsing so far (the ``argparse.Namespace`` args object normally returned by\n  ``ArgumentParser.parse_args()``).\n\nCompleters should return their completions as a list of strings. An example completer for names of environment\nvariables might look like this:\n\n.. code-block:: python\n\n    def EnvironCompleter(**kwargs):\n        return os.environ\n\nTo specify a completer for an argument or option, set the ``completer`` attribute of its associated action. An easy\nway to do this at definition time is:\n\n.. code-block:: python\n\n    from argcomplete.completers import EnvironCompleter\n\n    parser = argparse.ArgumentParser()\n    parser.add_argument("--env-var1").completer = EnvironCompleter\n    parser.add_argument("--env-var2").completer = EnvironCompleter\n    argcomplete.autocomplete(parser)\n\nIf you specify the ``choices`` keyword for an argparse option or argument (and don\'t specify a completer), it will be\nused for completions.\n\nA completer that is initialized with a set of all possible choices of values for its action might look like this:\n\n.. code-block:: python\n\n    class ChoicesCompleter(object):\n        def __init__(self, choices):\n            self.choices = choices\n\n        def __call__(self, **kwargs):\n            return self.choices\n\nThe following two ways to specify a static set of choices are equivalent for completion purposes:\n\n.. code-block:: python\n\n    from argcomplete.completers import ChoicesCompleter\n\n    parser.add_argument("--protocol", choices=(\'http\', \'https\', \'ssh\', \'rsync\', \'wss\'))\n    parser.add_argument("--proto").completer=ChoicesCompleter((\'http\', \'https\', \'ssh\', \'rsync\', \'wss\'))\n\nNote that if you use the ``choices=<completions>`` option, argparse will show\nall these choices in the ``--help`` output by default. To prevent this, set\n``metavar`` (like ``parser.add_argument("--protocol", metavar="PROTOCOL",\nchoices=(\'http\', \'https\', \'ssh\', \'rsync\', \'wss\'))``).\n\nThe following `script <https://raw.github.com/kislyuk/argcomplete/master/docs/examples/describe_github_user.py>`_ uses\n``parsed_args`` and `Requests <http://python-requests.org/>`_ to query GitHub for publicly known members of an\norganization and complete their names, then prints the member description:\n\n.. code-block:: python\n\n    #!/usr/bin/env python\n    # PYTHON_ARGCOMPLETE_OK\n    import argcomplete, argparse, requests, pprint\n\n    def github_org_members(prefix, parsed_args, **kwargs):\n        resource = "https://api.github.com/orgs/{org}/members".format(org=parsed_args.organization)\n        return (member[\'login\'] for member in requests.get(resource).json() if member[\'login\'].startswith(prefix))\n\n    parser = argparse.ArgumentParser()\n    parser.add_argument("--organization", help="GitHub organization")\n    parser.add_argument("--member", help="GitHub member").completer = github_org_members\n\n    argcomplete.autocomplete(parser)\n    args = parser.parse_args()\n\n    pprint.pprint(requests.get("https://api.github.com/users/{m}".format(m=args.member)).json())\n\n`Try it <https://raw.github.com/kislyuk/argcomplete/master/docs/examples/describe_github_user.py>`_ like this::\n\n    ./describe_github_user.py --organization heroku --member <TAB>\n\nIf you have a useful completer to add to the `completer library\n<https://github.com/kislyuk/argcomplete/blob/master/argcomplete/completers.py>`_, send a pull request!\n\nReadline-style completers\n~~~~~~~~~~~~~~~~~~~~~~~~~\nThe readline_ module defines a completer protocol in rlcompleter_. Readline-style completers are also supported by\nargcomplete, so you can use the same completer object both in an interactive readline-powered shell and on the bash\ncommand line. For example, you can use the readline-style completer provided by IPython_ to get introspective\ncompletions like you would get in the IPython shell:\n\n.. _readline: http://docs.python.org/3/library/readline.html\n.. _rlcompleter: http://docs.python.org/3/library/rlcompleter.html#completer-objects\n.. _IPython: http://ipython.org/\n\n.. code-block:: python\n\n    import IPython\n    parser.add_argument("--python-name").completer = IPython.core.completer.Completer()\n\nYou can also use `argcomplete.CompletionFinder.rl_complete <https://argcomplete.readthedocs.org/en/latest/#argcomplete.CompletionFinder.rl_complete>`_\nto plug your entire argparse parser as a readline completer.\n\nPrinting warnings in completers\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nNormal stdout/stderr output is suspended when argcomplete runs. Sometimes, though, when the user presses ``<TAB>``, it\'s\nappropriate to print information about why completions generation failed. To do this, use ``warn``:\n\n.. code-block:: python\n\n    from argcomplete import warn\n\n    def AwesomeWebServiceCompleter(prefix, **kwargs):\n        if login_failed:\n            warn("Please log in to Awesome Web Service to use autocompletion")\n        return completions\n\nUsing a custom completion validator\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nBy default, argcomplete validates your completions by checking if they start with the prefix given to the completer. You\ncan override this validation check by supplying the ``validator`` keyword to ``argcomplete.autocomplete()``:\n\n.. code-block:: python\n\n    def my_validator(current_input, keyword_to_check_against):\n        # Pass through ALL options even if they don\'t all start with \'current_input\'\n        return True\n\n    argcomplete.autocomplete(parser, validator=my_validator)\n\nGlobal completion\n-----------------\nIn global completion mode, you don\'t have to register each argcomplete-capable executable separately. Instead, bash\nwill look for the string **PYTHON_ARGCOMPLETE_OK** in the first 1024 bytes of any executable that it\'s running\ncompletion for, and if it\'s found, follow the rest of the argcomplete protocol as described above.\n\nAdditionally, completion is activated for scripts run as ``python <script>`` and ``python -m <module>``.\nThis also works for alternate Python versions (e.g. ``python3`` and ``pypy``), as long as that version of Python has\nargcomplete installed.\n\n.. admonition:: Bash version compatibility\n\n Global completion requires bash support for ``complete -D``, which was introduced in bash 4.2. On OS X or older Linux\n systems, you will need to update bash to use this feature. Check the version of the running copy of bash with\n ``echo $BASH_VERSION``. On OS X, install bash via `Homebrew <http://brew.sh/>`_ (``brew install bash``), add\n ``/usr/local/bin/bash`` to ``/etc/shells``, and run ``chsh`` to change your shell.\n\n Global completion is not currently compatible with zsh.\n\n.. note:: If you use setuptools/distribute ``scripts`` or ``entry_points`` directives to package your module,\n argcomplete will follow the wrapper scripts to their destination and look for ``PYTHON_ARGCOMPLETE_OK`` in the\n destination code.\n\nIf you choose not to use global completion, or ship a bash completion module that depends on argcomplete, you must\nregister your script explicitly using ``eval "$(register-python-argcomplete my-awesome-script)"``. Standard bash\ncompletion registration roules apply: namely, the script name is passed directly to ``complete``, meaning it is only tab\ncompleted when invoked exactly as it was registered. In the above example, ``my-awesome-script`` must be on the path,\nand the user must be attempting to complete it by that name. The above line alone would **not** allow you to complete\n``./my-awesome-script``, or ``/path/to/my-awesome-script``.\n\n\nActivating global completion\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nThe script ``activate-global-python-argcomplete`` will try to install the file\n``bash_completion.d/python-argcomplete.sh`` (`see on GitHub`_) into an appropriate location on your system\n(``/etc/bash_completion.d/`` or ``~/.bash_completion.d/``). If it\nfails, but you know the correct location of your bash completion scripts directory, you can specify it with ``--dest``::\n\n    activate-global-python-argcomplete --dest=/path/to/bash_completion.d\n\nOtherwise, you can redirect its shellcode output into a file::\n\n    activate-global-python-argcomplete --dest=- > file\n\nThe file\'s contents should then be sourced in e.g. ``~/.bashrc``.\n\n.. _`see on GitHub`: https://github.com/kislyuk/argcomplete/blob/master/argcomplete/bash_completion.d/python-argcomplete.sh\n\nZsh Support\n------------\nTo activate completions for zsh you need to have ``bashcompinit`` enabled in zsh::\n\n    autoload -U bashcompinit\n    bashcompinit\n\nAfterwards you can enable completion for your scripts with ``register-python-argcomplete``::\n\n    eval "$(register-python-argcomplete my-awesome-script)"\n\nTcsh Support\n------------\nTo activate completions for tcsh use::\n\n    eval `register-python-argcomplete --shell tcsh my-awesome-script`\n\nThe ``python-argcomplete-tcsh`` script provides completions for tcsh.\nThe following is an example of the tcsh completion syntax for\n``my-awesome-script`` emitted by ``register-python-argcomplete``::\n\n    complete my-awesome-script \'p@*@`python-argcomplete-tcsh my-awesome-script`@\'\n\nFish Support\n------------\nTo activate completions for fish use::\n\n    register-python-argcomplete --shell fish my-awesome-script | .\n\nor create new completion file, e.g::\n\n    register-python-argcomplete --shell fish ~/.config/fish/completions/my-awesome-script.fish\n\nPython Support\n--------------\nArgcomplete requires Python 2.7 or 3.3+.\n\nCommon Problems\n---------------\nIf global completion is not completing your script, bash may have registered a\ndefault completion function::\n\n    $ complete | grep my-awesome-script\n    complete -F _minimal my-awesome-script\n\nYou can fix this by restarting your shell, or by running\n``complete -r my-awesome-script``.\n\nDebugging\n---------\nSet the ``_ARC_DEBUG`` variable in your shell to enable verbose debug output every time argcomplete runs. This will\ndisrupt the command line composition state of your terminal, but make it possible to see the internal state of the\ncompleter if it encounters problems.\n\nAcknowledgments\n---------------\nInspired and informed by the optcomplete_ module by Martin Blais.\n\n.. _optcomplete: http://pypi.python.org/pypi/optcomplete\n\nLinks\n-----\n* `Project home page (GitHub) <https://github.com/kislyuk/argcomplete>`_\n* `Documentation (Read the Docs) <https://argcomplete.readthedocs.io/en/latest/>`_\n* `Package distribution (PyPI) <https://pypi.python.org/pypi/argcomplete>`_\n* `Change log <https://github.com/kislyuk/argcomplete/blob/master/Changes.rst>`_\n\nBugs\n~~~~\nPlease report bugs, issues, feature requests, etc. on `GitHub <https://github.com/kislyuk/argcomplete/issues>`_.\n\nLicense\n-------\nLicensed under the terms of the `Apache License, Version 2.0 <http://www.apache.org/licenses/LICENSE-2.0>`_.\n\n.. image:: https://travis-ci.org/kislyuk/argcomplete.png\n        :target: https://travis-ci.org/kislyuk/argcomplete\n.. image:: https://codecov.io/github/kislyuk/argcomplete/coverage.svg?branch=master\n        :target: https://codecov.io/github/kislyuk/argcomplete?branch=master\n.. image:: https://img.shields.io/pypi/v/argcomplete.svg\n        :target: https://pypi.python.org/pypi/argcomplete\n.. image:: https://img.shields.io/pypi/l/argcomplete.svg\n        :target: https://pypi.python.org/pypi/argcomplete\n.. image:: https://readthedocs.org/projects/argcomplete/badge/?version=latest\n        :target: https://argcomplete.readthedocs.org/\n'