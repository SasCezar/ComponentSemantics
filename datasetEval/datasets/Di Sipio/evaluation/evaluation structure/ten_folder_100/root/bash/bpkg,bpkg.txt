b'# bpkg [![Build Status](https://travis-ci.org/bpkg/bpkg.svg?branch=master)](https://travis-ci.org/bpkg/bpkg) [![Backers on Open Collective](https://opencollective.com/bpkg/backers/badge.svg)](#backers) [![Sponsors on Open Collective](https://opencollective.com/bpkg/sponsors/badge.svg)](#sponsors) \n\n_JavaScript has npm, Ruby has Gems, Python has pip and now Shell has bpkg!_\n\n`bpkg` is a lightweight bash package manager. It takes care of fetching the shell scripts, installing them appropriately, setting the execution permission and more.\n\nYou can install shell scripts globally (on `/usr/local/bin`) or use them on a _per-project basis_ (on `./deps/`), as a lazy-man "copy and paste".\n\n<!-- BEGIN-MARKDOWN-TOC -->\n* [Install](#install)\n\t* [0. Dependencies](#0-dependencies)\n\t* [1. Install script](#1-install-script)\n\t* [2. clib](#2-clib)\n\t* [3. Source Code](#3-source-code)\n* [Usage](#usage)\n\t* [Installing packages](#installing-packages)\n\t* [Packages With Dependencies](#packages-with-dependencies)\n\t* [Retrieving package info](#retrieving-package-info)\n* [Package details](#package-details)\n* [package.json](#packagejson)\n\t* [name](#name)\n\t* [version (optional)](#version-optional)\n\t* [description](#description)\n\t* [global](#global)\n\t* [install](#install-1)\n\t* [scripts](#scripts)\n\t* [files](#files)\n\t* [dependencies (optional)](#dependencies-optional)\n* [Packaging best practices](#packaging-best-practices)\n\t* [Package exports](#package-exports)\n* [Sponsors](#sponsors)\n* [License](#license)\n\n<!-- END-MARKDOWN-TOC -->\n\n## Install\n\nYou can install `bpkg` from three distinct ways:\n\n### 0. Dependencies\n\n* [curl](http://curl.haxx.se/)\n* [coreutils](https://www.gnu.org/software/coreutils/)\n\n### 1. Install script\n\nOur install script is the simplest way. It takes care of everything for you, placing `bpkg` and related scripts on `/usr/local/bin`.\n\nPaste the following on your shell and you\'re good to go:\n\n```sh\n$ curl -Lo- "https://raw.githubusercontent.com/bpkg/bpkg/master/setup.sh" | bash\n```\n\n### 2. clib\n\n[clib][clib] is a package manager for C projects. If you already have it, installing `bpkg` is a simple matter of:\n\n```sh\n$ clib install bpkg/bpkg\n```\n\n### 3. Source Code\n\nTo directly install `bpkg` from its source code you have to clone its repository and run the `setup.sh` script:\n\n```sh\n$ git clone https://github.com/bpkg/bpkg.git\n$ cd bpkg\n$ ./setup.sh\n```\n\nOr in a directory with user write permission, like `$HOME/opt/bin`\n\n```sh\n$ git clone https://github.com/bpkg/bpkg.git\n$ cd bpkg\n$ PREFIX=$HOME/opt ./setup.sh\n```\n\n## Usage\n\nYou use `bpkg` by simply sending commands, pretty much like `npm` or `pip`.\n\n### Installing packages\n\nPackages can either be global (on `/usr/local/bin`) or local (under `./deps`).\n\nFor example, here\'s a **global install** of the [term package][term]:\n\n```sh\n$ bpkg install term -g\n$ term\n```\n\nAnd the same package as a **local install**:\n\n```sh\n$ bpkg install term\n$ ./deps/term/term.sh\n```\n\nAfter a local install the `term.sh` script is copied as `term` to the `deps/bin` directory, you can add this directory to the `PATH` with\n\n```sh\nexport PATH=$PATH:/path_to_bkpg/deps/bin\n```\n\nAs a bonus, you can specify a **specific version**:\n\n```sh\n$ bpkg install jwerle/suggest.sh@0.0.1 -g\n```\n\n**Note:** to do that the packages **must be tagged releases** on the repository.\n\nYou can also *install packages without a `package.json`*.\nAs long as there is a `Makefile` in the repository it will try to invoke `make install` as long as the `-g` or `--global` flags are set when invoking `bpkg install`.\n\nFor example you could install [git-standup](https://github.com/stephenmathieson/git-standup) with an omitted `package.json` because of the `Makefile` and the `install` target found in it.\n\n```sh\n$ bpkg install stephenmathieson/git-standup -g\n\n    info: Using latest (master)\n    warn: Package doesn\'t exist\n    warn: Missing build script\n    warn: Trying `make install\'...\n    info: install: `make install\'\ncp -f git-standup /usr/local/bin\n```\n\n### Packages With Dependencies\n\nYou can install a packages dependencies with the `bpkg getdeps` command. These will recursively install in `deps/` sub-folders to resolve all dependencies.\n\n_Note: There is no protection against circular dependencies, so be careful!_\n\n\n### Retrieving package info\n\nAfter installing a package, you can obtain info from it using `bpkg`.\n\nSupposing you\'re on the root of a package directory, the following commands show that package metadata:\n\n```sh\n# Asking for single information\n$ bpkg package name\n "bpkg"\n$ bpkg package version\n "0.0.5"\n# Dumping all the metadata\n$ bpkg package\n["name"]        "bpkg"\n["version"]     "0.0.5"\n["description"] "Lightweight bash package manager"\n["global"]      true\n["install"]     "make install"\n```\n\n## Package details\n\nHere we lay down some info on the structure of a package.\n\n## package.json\n\nEvery package must have a file called `package.json`; it specifies package metadata on the [JSON format][json].\n\nHere\'s an example of a well-formed `package.json`:\n\n```json\n{\n  "name": "term",\n  "version": "0.0.1",\n  "description": "Terminal utility functions",\n  "scripts": [ "term.sh" ],\n  "install": "make install"\n}\n```\n\nAll fields are mandatory except when noted.\nHere\'s a detailed explanation on all fields:\n\n### name\n\nThe `name` attribute is required as it is used to tell `bpkg` where to put it in the `deps/` directory in you project.\n\n```json\n  "name": "my-script"\n```\n\n### version (optional)\n\nThe `version` attribute is not required but can be useful. It should correspond to the version that is associated with the installed package.\n\n```json\n  "version": "0.0.1"\n```\n\n### description\n\nA human readable description of what the package offers for functionality.\n\n```json\n  "description": "This script makes monkeys jump out of your keyboard"\n```\n\n### global\n\nIndicates that the package is only intended to be install as a script. This allows the omission of the `-g` or `--global` flag during installation.\n\n```json\n  "global": "true"\n```\n\n### install\n\nShell script used to invoke in the install script. This is required if the `global` attribute is set to `true` or if the `-g` or `--global` flags are provided.\n\n```json\n  "install": "make install"\n```\n\n### scripts\n\nThis is an array of scripts that will be installed into a project.\n\n```json\n  "scripts": ["script.sh"]\n```\n\n### files\n\nThis is an array of files that will be installed into a project.\n\n```json\n  "files": ["bar.txt", "foo.txt"]\n```\n\n### dependencies (optional)\n\nThis is a hash of dependencies. The keys are the package names, and the values are the version specifiers. If you want the latest code use `\'master\'` in the version specifier. Otherwise, use a tagged release identifier. This works the same as `bpkg install`\'s package/version specifiers.\n\n```json\n  "dependencies": {\n    "term": "0.0.1"\n  }\n```\n\n\n## Packaging best practices\n\nThese are guidelines that we strongly encourage developers to follow.\n\n### Package exports\n\nIt\'s nice to have a bash package that can be used in the terminal and also be invoked as a command line function. To achieve this the exporting of your functionality *should* follow this pattern:\n\n```sh\nif [[ ${BASH_SOURCE[0]} != $0 ]]; then\n  export -f my_script\nelse\n  my_script "${@}"\n  exit $?\nfi\n```\n\nThis allows a user to `source` your script or invoke as a script.\n\n```sh\n# Running as a script\n$ ./my_script.sh some args --blah\n# Sourcing the script\n$ source my_script.sh\n$ my_script some more args --blah\n```\n\n## Sponsors\n\n**bpkg** wouldn\'t be where it is today without the help of its authors, contributors, and sponsors:\n\n* [@littlstar](https://github.com/littlstar) ([littlstar.com](https://littlstar.com))\n* [@spotify](https://github.com/spotify) ([spotify.com](https://spotify.com))\n\nSupport this project by becoming a sponsor. Your logo will show up here with a link to your website. [[Become a sponsor](https://opencollective.com/bpkg#sponsor)]\n\n<a href="https://opencollective.com/bpkg/sponsor/0/website" target="_blank"><img src="https://opencollective.com/bpkg/sponsor/0/avatar.svg"></a>\n<a href="https://opencollective.com/bpkg/sponsor/1/website" target="_blank"><img src="https://opencollective.com/bpkg/sponsor/1/avatar.svg"></a>\n<a href="https://opencollective.com/bpkg/sponsor/2/website" target="_blank"><img src="https://opencollective.com/bpkg/sponsor/2/avatar.svg"></a>\n<a href="https://opencollective.com/bpkg/sponsor/3/website" target="_blank"><img src="https://opencollective.com/bpkg/sponsor/3/avatar.svg"></a>\n<a href="https://opencollective.com/bpkg/sponsor/4/website" target="_blank"><img src="https://opencollective.com/bpkg/sponsor/4/avatar.svg"></a>\n<a href="https://opencollective.com/bpkg/sponsor/5/website" target="_blank"><img src="https://opencollective.com/bpkg/sponsor/5/avatar.svg"></a>\n<a href="https://opencollective.com/bpkg/sponsor/6/website" target="_blank"><img src="https://opencollective.com/bpkg/sponsor/6/avatar.svg"></a>\n<a href="https://opencollective.com/bpkg/sponsor/7/website" target="_blank"><img src="https://opencollective.com/bpkg/sponsor/7/avatar.svg"></a>\n<a href="https://opencollective.com/bpkg/sponsor/8/website" target="_blank"><img src="https://opencollective.com/bpkg/sponsor/8/avatar.svg"></a>\n<a href="https://opencollective.com/bpkg/sponsor/9/website" target="_blank"><img src="https://opencollective.com/bpkg/sponsor/9/avatar.svg"></a>\n\n\n### Contributors\n\nThis project exists thanks to all the people who contribute. [[Contribute](CONTRIBUTING.md)].\n<a href="graphs/contributors"><img src="https://opencollective.com/bpkg/contributors.svg?width=890&button=false" /></a>\n\n\n### Backers\n\nThank you to all our backers! \xf0\x9f\x99\x8f [[Become a backer](https://opencollective.com/bpkg#backer)]\n\n<a href="https://opencollective.com/bpkg#backers" target="_blank"><img src="https://opencollective.com/bpkg/backers.svg?width=890"></a>\n\n\n\n## License\n\n`bpkg` is released under the **MIT license**.\n\nSee file `LICENSE` for a more detailed description of its terms.\n\n[clib]: https://github.com/clibs/clib\n[term]: https://github.com/bpkg/term\n[json]: http://json.org/example\n'