b'kube-ps1: Kubernetes prompt for bash and zsh\n============================================\n\nA script that lets you add the current Kubernetes context and namespace\nconfigured on `kubectl` to your Bash/Zsh prompt strings (i.e. the `$PS1`).\n\nInspired by several tools used to simplify usage of `kubectl`.\n\n![prompt](img/screenshot2.png)\n\n![prompt_sol_light](img/screenshot-sol-light.png)\n\n![prompt_img](img/screenshot-img.png)\n\n![prompt demo](img/kube-ps1.gif)\n\n## Installing\n\n### MacOS\n\nHomebrew package manager:\n\n```\n$ brew update\n$ brew install kube-ps1\n```\n### From Source\n\n1. Clone this repository\n2. Source the kube-ps1.sh in your `~/.zshrc` or your `~/.bashrc`\n\n### Arch Linux\nAUR Package available at [https://aur.archlinux.org/packages/kube-ps1/](https://aur.archlinux.org/packages/kube-ps1/).\n\nZsh:\n```sh\nsource /path/to/kube-ps1.sh\nPROMPT=\'$(kube_ps1)\'$PROMPT\n```\n\nBash:\n```sh\nsource /path/to/kube-ps1.sh\nPS1=\'[\\u@\\h \\W $(kube_ps1)]\\$ \'\n```\n\n## Requirements\n\nThe default prompt assumes you have the `kubectl` command line utility installed.\nOfficial installation instructions and binaries are available:\n\n[Install and Set up kubectl](https://kubernetes.io/docs/tasks/tools/install-kubectl/)\n\nIf using this with OpenShift, the `oc` tool needs installed.  It can be obtained\nfrom brew ports:\n\n```\nbrew install openshift-cli\n```\nor the source can be downloaded:\n\n[OC Client Tools](https://www.openshift.org/download.html)\n\nSet the binary to `oc` with the following environment variable:\n\n```\nKUBE_PS1_BINARY=oc\n```\n\nIf neither binary is available, the prompt will print the following:\n\n```\n(<symbol>|BINARY-N/A:N/A)\n```\n\n## Helper utilities\n\nThere are several great tools that make using kubectl very enjoyable:\n\n- [`kubectx` and `kubens`](https://github.com/ahmetb/kubectx) are great for\nfast switching between clusters and namespaces.\n\n## Tmux port\n\nI have begun porting kube-ps1 to tmux as a status line plugin.  If you prefer\ntmux, and like the functionality provided by kube-ps1, checkout the\n[kube-tmux](https://github.com/jonmosco/kube-tmux) project\n\n## Prompt Structure\n\nThe default prompt layout is:\n\n```\n(<symbol>|<context>:<namespace>)\n```\n\nIf the current-context is not set, kube-ps1 will return the following:\n\n```\n(<symbol>|N/A:N/A)\n```\n\n## Enabling/Disabling\n\nIf you want to stop showing Kubernetes status on your prompt string temporarily\nrun `kubeoff`. To disable the prompt for all shell sessions, run `kubeoff -g`.\nYou can enable it again in the current shell by running `kubeon`, and globally\nwith `kubeon -g`.\n\n```\nkubeon     : turn on kube-ps1 status for this shell.  Takes precedence over\n             global setting for current session\nkubeon -g  : turn on kube-ps1 status globally\nkubeoff    : turn off kube-ps1 status for this shell. Takes precedence over\n             global setting for current session\nkubeoff -g : turn off kube-ps1 status globally\n```\n\n## Customization\n\nThe default settings can be overridden in `~/.bashrc` or `~/.zshrc` by setting\nthe following environment variables:\n\n| Variable | Default | Meaning |\n| :------- | :-----: | ------- |\n| `KUBE_PS1_BINARY` | `kubectl` | Default Kubernetes binary |\n| `KUBE_PS1_NS_ENABLE` | `true` | Display the namespace. If set to `false`, this will also disable `KUBE_PS1_DIVIDER` |\n| `KUBE_PS1_PREFIX` | `(` | Prompt opening character  |\n| `KUBE_PS1_SYMBOL_ENABLE` | `true ` | Display the prompt Symbol. If set to `false`, this will also disable `KUBE_PS1_SEPARATOR` |\n| `KUBE_PS1_SYMBOL_DEFAULT` | `\xe2\x8e\x88 ` | Default prompt symbol. Unicode `\\u2388` |\n| `KUBE_PS1_SYMBOL_USE_IMG` | `false` | \xe2\x98\xb8\xef\xb8\x8f  ,  Unicode `\\u2638` as the prompt symbol |\n| `KUBE_PS1_SEPARATOR` | &#124; | Separator between symbol and context name |\n| `KUBE_PS1_DIVIDER` | `:` | Separator between context and namespace |\n| `KUBE_PS1_SUFFIX` | `)` | Prompt closing character |\n| `KUBE_PS1_CLUSTER_FUNCTION` | No default, must be user supplied | Function to customize how cluster is displayed |\n| `KUBE_PS1_NAMESPACE_FUNCTION` | No default, must be user supplied | Function to customize how namespace is displayed |\n\nFor terminals that do not support UTF-8, the symbol will be replaced with the\nstring `k8s`.\n\nTo disable a feature, set it to an empty string:\n\n```\nKUBE_PS1_SEPARATOR=\'\'\n```\n\n## Colors\n\nThe default colors are set with the following environment variables:\n\n| Variable | Default | Meaning |\n| :------- | :-----: | ------- |\n| `KUBE_PS1_SYMBOL_COLOR` | `blue` | Set default color of the Kubernetes symbol |\n| `KUBE_PS1_CTX_COLOR` | `red` | Set default color of the context |\n| `KUBE_PS1_NS_COLOR` | `cyan` | Set default color of the namespace |\n| `KUBE_PS1_BG_COLOR` | `null` | Set default color of the prompt background |\n\nBlue was used for the default symbol to match the Kubernetes color as closely\nas possible. Red was chosen as the context name to stand out, and cyan for the\nnamespace.\n\nSet the variable to an empty string if you do not want color for each\nprompt section:\n\n```\nKUBE_PS1_CTX_COLOR=\'\'\n```\n\nNames are usable for the following colors:\n\n```\nblack, red, green, yellow, blue, magenta, cyan\n```\n\n256 colors are available by specifying the numerical value as the variable\nargument.\n\n## Customize display of cluster name and namespace\n\nYou can change how the cluster name and namespace are displayed using the\n`KUBE_PS1_CLUSTER_FUNCTION` and `KUBE_PS1_NAMESPACE_FUNCTION` variables\nrespectively.\n\nFor the following examples let\'s assume the following:\n\ncluster name: `sandbox.k8s.example.com`\nnamespace: `alpha`\n\nIf you\'re using domain style cluster names, your prompt will get quite long\nvery quickly. Let\'s say you only want to display the first portion of the\ncluster name (`sandbox`), you could do that by adding the following:\n\n```sh\nfunction get_cluster_short() {\n  echo "$1" | cut -d . -f1\n}\n\nKUBE_PS1_CLUSTER_FUNCTION=get_cluster_short\n```\n\nThe same pattern can be followed to customize the display of the namespace.\nLet\'s say you would prefer the namespace to be displayed in all uppercase\n(`ALPHA`), here\'s one way you could do that:\n\n```sh\nfunction get_namespace_upper() {\n    echo "$1" | tr \'[:lower:]\' \'[:upper:]\'\n}\n\nexport KUBE_PS1_NAMESPACE_FUNCTION=get_namespace_upper\n```\n\nIn both cases, the variable is set to the name of the function, and you must have defined the function in your shell configuration before kube_ps1 is called. The function must accept a single parameter and echo out the final value.\n\n### Bug Reports and shell configuration\n\nDue to the vast ways of customizing the shell, please try the prompt with a\nminimal configuration before submitting a bug report.\n\nThis can be done as follows for each shell before loading kube-ps1:\n\nBash:\n```bash\nbash --norc\n```\n\nZsh:\n```bash\nzsh -f\nor\nzsh --no-rcs\n```\n\n## Contributors\n\n* [Ahmet Alp Balkan](https://github.com/ahmetb)\n* Jared Yanovich\n'