b'[![build status image](https://travis-ci.org/neurobin/shc.svg?branch=release)](https://travis-ci.org/neurobin/shc)\n[![GitHub stars](https://img.shields.io/github/stars/neurobin/shc.svg)](https://github.com/neurobin/shc/stargazers)\n[![GitHub forks](https://img.shields.io/github/forks/neurobin/shc.svg)](https://github.com/neurobin/shc/network)\n[![GitHub issues](https://img.shields.io/github/issues/neurobin/shc.svg)](https://github.com/neurobin/shc/issues)\n\n# Shell Script Compiler\n\nA generic shell script compiler. Shc takes a script, which is specified on the command line and produces C source code. The generated source code is then compiled and linked to produce a stripped binary executable.\n\nThe compiled binary will still be dependent on the shell specified in the first line of the shell code (i.e shebang) (i.e. #!/bin/sh), thus shc does not create completely independent binaries.\n\nshc itself is not a compiler such as cc, it rather encodes and encrypts a shell script and generates C source code with the added expiration capability. It then uses the system compiler to compile a stripped binary which behaves exactly like the original script. Upon execution, the compiled binary will decrypt and execute the code with the shell -c option.\n\n## Install\n\n```bash\n./configure\nmake\nsudo make install\n```\n\n**Note** If `make` fails due to *automake* version, run `./autogen.sh` before running the above commands.\n\n### Ubuntu-specific\n\n```\nsudo add-apt-repository ppa:neurobin/ppa\nsudo apt-get update\nsudo apt-get install shc\n```\n\nIf the above installation method seems like too much work, then just download a compiled binary package from [release page](https://github.com/neurobin/shc/releases/latest) and copy the `shc` binary to `/usr/bin` and `shc.1` file to `/usr/share/man/man1`.\n\n## Usage\n\n```\nshc [options]\nshc -f script.sh -o binary\nshc -U -f script.sh -o binary # Untraceable binary (prevent strace, ptrace etc..)\nshc -H -f script.sh -o binary # Untraceable binary, does not require root (only bourne shell (sh) scripts with no parameter)\n```\n\n## The hardening flag -H\n\nThis flag is currently in an experimental state and may not work in all systems. This flag only works for **default** shell. For example, if you compile a **bash** script with `-H` flag then the resultant executable will only work in systems where the default shell is **bash**. You may change the default shell which generally is `/bin/sh` which further is just a link to another shell like bash or dash etc.\n\n**Also `-H` does not work with positional parameters (yet)**\n\n## Testing\n\n```bash\n./configure\nmake\nmake check\n```\n\n## Known limitations\n\nThe one (and I hope the only) limitation using shc is the _SC_ARG_MAX system configuration parameter.\nIt limits the maximum length of the arguments to the exec function, limiting the maximum length of the runnable script of shc.\n\n!! - CHECK YOUR RESULTS CAREFULLY BEFORE USING - !!\n\n## Links\n\n1. [Man Page](http://neurobin.github.io/shc/man.html)\n2. [Web Page](http://neurobin.github.io/shc)\n\n# Contributing\n\nIf you want to make pull requests, please do so against the **master** branch. The default branch is **release** which should contain clean package files ready to be used.\n\nIf you want to edit the manual, please edit the **man.md** file (available in the master branch) instead and then generate the manual file from it with the command (requires `pandoc` to be installed):\n\n```bash\npandoc -s man.md -t man -o shc.1\n#also run this command to generate the html manual\npandoc -s man.md -t html -o man.html\n```\n\nIf you change anything related to autotools, please run `./autogen.sh` afterwards.\n'