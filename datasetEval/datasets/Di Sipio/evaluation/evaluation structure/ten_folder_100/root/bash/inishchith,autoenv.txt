b'\n# Autoenv: Directory-based Environments [![Build Status](https://travis-ci.com/inishchith/autoenv.svg?branch=master)](https://travis-ci.com/inishchith/autoenv)\n\nMagic per-project shell environments. Very pretentious.\n\n**Note**: you should probably use [direnv](https://direnv.net/) instead.\nSimply put, it is higher quality software. But, autoenv is still great,\ntoo. Maybe try both? :)\n\nThis image sums up the relationship between the two projects, very well:\n\n![image](http://share.kennethreitz.org/1u0j2s3M1w36/776204239940493426%3Faccount_id=8.jpg)\n\n## What is it?\n\nIf a directory contains a `.env` file, it will automatically be executed\nwhen you `cd` into it. When enabled (set `AUTOENV_ENABLE_LEAVE` to a\nnon-null string), if a directory contains a `.env.leave` file, it will\nautomatically be executed when you leave it.\n\nThis is great for...\n\n  - auto-activating virtualenvs\n  - auto-deactivating virtualenvs\n  - project-specific environment variables\n  - making millions\n\nYou can also nest envs within each other. How awesome is that\\!?\n\nWhen executing, autoenv, will walk up the directories until the mount\npoint and execute all `.env` files beginning at the top.\n\n## Usage\n\n\nFollow the white rabbit:\n\n    $ echo "echo \'whoa\'" > project/.env\n    $ cd project\n    whoa\n\n![image](http://media.tumblr.com/tumblr_ltuzjvbQ6L1qzgpx9.gif)\n\n\n\n## Install\n\nInstall it easily:\n\n### Mac OS X Using Homebrew\n\n    $ brew install autoenv\n    $ echo "source $(brew --prefix autoenv)/activate.sh" >> ~/.bash_profile\n\n### Using pip\n\n    $ pip install autoenv\n    $ echo "source `which activate.sh`" >> ~/.bashrc\n\n### Using git\n\n    $ git clone git://github.com/inishchith/autoenv.git ~/.autoenv\n    $ echo \'source ~/.autoenv/activate.sh\' >> ~/.bashrc\n\n### Using AUR\n\nArch Linux users can install\n[autoenv](https://aur.archlinux.org/packages/autoenv/) or\n[autoenv-git](https://aur.archlinux.org/packages/autoenv-git/) with\ntheir favorite AUR helper.\n\nYou need to source activate.sh in your bashrc afterwards:\n\n    $ echo \'source /usr/share/autoenv/activate.sh\' >> ~/.bashrc\n\n## Configuration\n\nBefore sourcing activate.sh, you can set the following variables:\n\n  - `AUTOENV_AUTH_FILE`: Authorized env files, defaults to\n    `~/.autoenv_authorized`\n  - `AUTOENV_ENV_FILENAME`: Name of the `.env` file, defaults to `.env`\n  - `AUTOENV_LOWER_FIRST`: Set this variable to flip the order of `.env`\n    files executed\n  - `AUTOENV_ENV_LEAVE_FILENAME`: Name of the `.env.leave` file,\n    defaults to `.env.leave`\n  - `AUTOENV_ENABLE_LEAVE`: Set this to a non-null string in order to\n    enable source env when leaving\n  - `AUTOENV_ASSUME_YES`: Set this variable to silently authorize the\n    initialization of new environments\n\n## Shells\n\nautoenv is tested on:\n\n  - bash\n  - zsh\n  - dash\n  - fish is supported by\n    [autoenv\\_fish](https://github.com/loopbit/autoenv_fish)\n  - more to come\n\n## Alternatives\n\nDirenv is an excellent alternative to autoenv, and includes the ability\nto unset environment variables as well. It also supports the fish\nterminal.\n\n<https://direnv.net>\n\n## Disclaimer\n\nAutoenv overrides `cd`. If you already do this, invoke `autoenv_init`\nwithin your custom `cd` after sourcing `activate.sh`.\n\nAutoenv can be disabled via `unset cd` if you experience I/O issues with\ncertain file systems, particularly those that are FUSE-based (such as\n`smbnetfs`).\n\n## Attributions\n\n> autoenv is one of [@kennethreitz](https://github.com/kennethreitz):org project and is now owned and maintained by [@inishchith](https://github.com/inishchith).'