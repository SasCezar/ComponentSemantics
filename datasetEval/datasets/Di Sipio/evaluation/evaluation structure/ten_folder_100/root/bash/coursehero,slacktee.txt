b'# slacktee #\n\n*slacktee* is a bash script that works like [tee](http://en.wikipedia.org/wiki/Tee_(command)) command.\nInstead of writing the standard input to files, *slacktee* posts it to [Slack](https://slack.com/).\n\n![Image](https://github.com/course-hero/slacktee/blob/slacktee-readme-images/slacktee_demo.gif)\n\nRequirements\n------------\n\n*slacktee* uses [curl](http://curl.haxx.se/) command to communicate with Slack.\n\nInstallation\n------------\n\n```\n# Clone git repository\ngit clone https://github.com/course-hero/slacktee.git\n\n# Install slacktee.sh\nbash ./slacktee/install.sh\n```\n\ninstall.sh copies slacktee.sh in `/usr/local/bin` and sets executable permission. \n\nIf you\'d like to install it in the different directory such as `/usr/bin`, pass the target directory as a parameter of install.sh. \nBy default, `/usr/local/bin` may not be included in your `$PATH` environment variable (you should be aware of this when you use *slacktee* in *crontab*). So, if you would like to use *slacktee* without specifying its full path, coping it to `/usr/bin` may be a good idea.\n\n```\n# Install slacktee.sh in /usr/bin\nbash ./slacktee/install.sh /usr/bin\n```\n\nAlso, you can rename slacktee.sh during the installation. If you would like to give a different name to slacktee.sh, simply append it to the target directory.\n\n```\n# Install slacktee.sh in /usr/local/bin as \'slacktee\'\nbash ./slacktee/install.sh /usr/local/bin/slacktee\n```\n\nAfter the installation, interactive setup starts automatically.\n\n### Packages ###\nPackages are also availalbe for some platforms:\n\nScott R. Shinn at [Atomicorp](https://atomicorp.com/) created a package of `slacktee` for following Linux distributions:\n- Centos 6/7\n- RHEL 6/7\n- Amazon Linux 1/2(LTS)\n- Debian 8/9\n- Ubuntu 14/16\n\nThese packages are maintained by Atomicorp and their repo can be easily installed to your system through their automated repo installer as following:\n```\nwget -q -O - https://updates.atomicorp.com/installers/atomic | bash\n```\nIf you would prefer to download and install the package by yourself, you can find it in [their repository page](https://updates.atomicorp.com/channels/atomic/). \n\nIt\'s still alpha version, but we also have a debian package in this github repo.\n* [slacktee-debian](https://github.com/course-hero/slacktee-debian) \n\nConfiguration\n------------\n\nBefore start using *slacktee*, please set following variables in the script configuration file.\n*slacktee* reads the global configuration (/etc/slacktee.conf) first, then reads your local configuration (~/.slacktee).\nYou can set up your local configuration file using interactive setup mode (--setup option).\n\nYou would need an authentication token for `slacktee`. It could be generated in 2 ways:\n\n1. Crate a Slack App (Preffered by Slack, but a bit complicated to setup)  \nFollow steps listed in [creating a Slack App](https://api.slack.com/slack-apps#creating_apps).  \nNext, create a bot user for your app, give the following 3 permissions to your app: `chat:write:bot`, `files:write:user` and `bot`. More information about the permission scopes can be found at [permission scopes](https://api.slack.com/docs/oauth-scopes).  \nAt last, install the app to your workplace and get the token in \'OAuth & Permission\' feature in the manage application page.\n2. Add a bot (Easy to setup, but Slack may remove it in future)  \nAdd a bot into your workspace through [Slack App Directory](https://cks-world.slack.com/apps/A0F7YS25R-bots). You can now find \'API Token\' in the configuration page of the bot.\n\n```\ntoken=""            # The authentication token of the bot user. Used for accessing Slack APIs.\nchannel=""          # Default channel to post messages. \'#\' is prepended, if it doesn\'t start with \'#\' or \'@\'.\ntmp_dir="/tmp"      # Temporary file is created in this directory.\nusername="slacktee" # Default username to post messages.\nicon="ghost"        # Default emoji or a direct url to an image to post messages. You don\'t have to wrap emoji with \':\'. See http://www.emoji-cheat-sheet.com.\nattachment=""       # Default color of the attachments. If an empty string is specified, the attachments are not used.\n```\n\nUsage\n------------\nFeed input to *slacktee* through the pipe.\n\n```\nusage: slacktee.sh [options]\n  options:\n    -h, --help                        Show this help.\n    -n, --no-buffering                Post input values without buffering.\n    --streaming                       Post input as it comes in, and update one comment with further input.\n    -f, --file                        Post input values as a file.\n    -l, --link                        Add a URL link to the message.\n    -c, --channel channel_name        Post input values to specified channel or user.\n    -u, --username user_name          This username is used for posting.\n    -i, --icon emoji_name|url         This icon is used for posting. You can use a word\n                                      from http://www.emoji-cheat-sheet.com or a direct url to an image.\n    -t, --title title_string          This title is added to posts.\n    -m, --message-formatting format   Switch message formatting (none|link_names|full).\n                                      See https://api.slack.com/docs/formatting for more details.\n    -p, --plain-text                  Don\'t surround the post with triple backticks.\n    -a, --attachment [color]          Use attachment (richly-formatted message)\n                                      Color can be \'good\',\'warning\',\'danger\' or any hex color code (eg. #439FE0)\n                                      See https://api.slack.com/docs/attachments for more details.\n    -e, --field title value           Add a field to the attachment. You can specify this multiple times.\n    -s, --short-field title value     Add a short field to the attachment. You can specify this multiple times.\n    -o, --cond-color color pattern    Change the attachment color if the specified Regex pattern matches the input.\n                                      You can specify this multiple times.\n                                      If more than one pattern matches, the latest matched pattern is used.\n    -d, --cond-prefix prefix pattern  This prefix is added to the message, if the specified Regex pattern matches the input.\n                                      You can specify this multiple times.\n                                      If more than one pattern matches, the latest matched pattern is used.\n    -q, --no-output                   Don\'t echo the input.  \n    --config config_file              Specify the location of the config file.\n    --setup                           Setup slacktee interactively.\n```\n\nIf you\'d like to post the output of `ls` command, you can do it like this.\n\n```\nls | slacktee.sh\n```\n\nTo post the output of `tail -f` command line by line, use `-n` option.\n\n```\ntail -f foobar.log | slacktee.sh -n\n```\n\nTo post the output of `find` command as a file, use `-f` option.\n\n```\nfind /var -name "foobar" | slacktee.sh -f\n```\n\nYou can specify `channel`, `username`, `icon`, `title`, and `link` too.\n\n```\nls | slacktee.sh -c "general" -u "slacktee" -i "shipit" -t "ls" -l "http://en.wikipedia.org/wiki/Ls"\n```\n\nInstead of emoji icon, you may provide an image url.\n\n```\nls | slacktee.sh -c "general" -u "slacktee" -i "http://mirrors.creativecommons.org/presskit/icons/cc.png" -t "ls" -l "http://en.wikipedia.org/wiki/Ls"\n```\n\nOf course, you can connect another command with pipe.\n\n```\nls | slacktee.sh | email "ls" foo@example.com\n```\n\nWould you like to use richly-formatted message? Use `-a`, `-e` and `-s` options.\n\n```\ncat error.log | slacktee.sh -a "danger" -e "Date and Time" "$(date)" -s "Host" "$(hostname)"\n```\n\nDirect message to your teammate \'chuck\'? Easy!\n\n```\necho "Submit Your Expense Reimbursement Form By Friday!" | slacktee.sh -c "@chuck"\n```\n\nConditional coloring and prefix helps you to notice important messages easier.\nIf a specified Regex pattern matches the input, its corresponding color or prefix is used for posting the message. In the example below, the message color is green (good) by default, but the color becomes yellow (warning) if an input log starts with "Warning:". Also, it becomes red (danger) and the prefix `@channel` is added to the mssage if the log starts with "Error:".\nIt\'s pretty useful, isn\'t it?\n\n```\n# To enable @command, \'-m link_names\' must be specified\ntail -f app.log | slacktee.sh -n -a "good" -o "warning" "^Warning:" -o "danger" "^Error:" -d "@channel" "^Error:" -m link_names\n```\n\nYou can find more examples on [Course Hero blog](http://www.coursehero.com/blog/2015/04/09/why-we-built-slacktee-a-custom-slack-integration/).\n\nTravis-CI Integration\n---------------------\n\nYou may want to integrate *slacktee* into Travis-CI in order to send additional\nlogging information to your Slack channel. In this case, it is recommended that\nyou **do not expose** your Incoming WebHook URL and API authentication token as\nplaintext values inside your slacktee.conf file.\n\nInstead, use the [encrypt command](https://github.com/travis-ci/travis.rb#encrypt)\nof the Travis client to set the SLACKTEE\\_WEBHOOK and SLACKTEE\\_TOKEN\nenvironment variables, and leave the *webhook_url* and *token* values\nin your slacktee.conf empty. When *slacktee* runs, it will give priority to the\nenvironment variables, which Travis-CI will decrypt and set automatically during\nthe build process. In this way those two values are kept secure.\n\n### Example\n\nModify slacktee.conf\n```\nwebhook_url=""\ntoken=""\nchannel="Travis-CI"\ntmp_dir="/tmp"\nusername="slacktee"\nicon="ghost"\n```\n\nAdd the encrypted environment variables to the .travis.yml file in your git\nrepository\n```bash\ntravis encrypt SLACKTEE_WEBHOOK=\'https://hooks.slack.com/services/afternoonTEE/BMP2vsT72/ohNoDontTellUs\' --add\ntravis encrypt SLACKTEE_TOKEN=\'yoho-0987654321-1234567890-4488116622-abc123\' --add\n```\n\nLooking at your travis.yml you will now see the following added\n```yaml\nenv:\n  global:\n  - secure: 2YZabH8+UdzqyBWckojRDP9uudnCSYyxOOx1y85el69YdHwLDMD+dt49rAgIrmCWsWCWpUZ0ZRWV8vU2VFMffIhmikiqG7VoKHuN5PyY8qBwr9hq/ZI8gdwgjgfRIGtv/U89BTjMmc1g/6nJkSvMtiSUSK3Lopg0JCyuZsiyhzs=\n  - secure: TKpohmywdOneQkqGxJiF+S1N8oCdTWWGsXgjzNXWSvb23KDtvGq/W2SpWdFdwEHC9Y8NymoAPYRSW8MUQoiJ7NaQ1eZQuyx6/orjHpIgqiAuHrOSaMagzpKVG6Gtb87qDgov65ZOasyex1OtPQdfFtZBX67B6IVXkRPV+IA/+UX=\n```\n\nAn example travis.yml section using *slacktee* may look like:\n```yaml\nafter_failure:\n- ls /path/to/build | ./slacktee.sh -t "$TRAVIS_REPO_SLUG $TRAVIS_JOB_NUMBER build directory"\n- cat /path/to/some.log | ./slacktee.sh -t "$TRAVIS_REPO_SLUG $TRAVIS_JOB_NUMBER some.log"\n```\n'