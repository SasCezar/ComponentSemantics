b'[![Build Status](https://travis-ci.com/tfutils/tfenv.svg?branch=master)](https://travis-ci.com/tfutils/tfenv)\n\n# tfenv\n\n[Terraform](https://www.terraform.io/) version manager inspired by [rbenv](https://github.com/rbenv/rbenv)\n\n## Support\n\nCurrently tfenv supports the following OSes\n\n- Mac OS X (64bit)\n- Linux\n  - 64bit\n  - Arm\n- Windows (64bit) - only tested in git-bash - currently presumed failing due to symlink issues in git-bash\n\n## Installation\n\n### Automatic\n\nInstall via Homebrew\n\n  ```console\n  $ brew install tfenv\n  ```\n\nInstall via puppet\n\nUsing puppet module [sergk-tfenv](https://github.com/SergK/puppet-tfenv)\n\n```puppet\ninclude ::tfenv\n```\n\n### Manual\n\n1. Check out tfenv into any path (here is `${HOME}/.tfenv`)\n\n  ```console\n  $ git clone https://github.com/tfutils/tfenv.git ~/.tfenv\n  ```\n\n2. Add `~/.tfenv/bin` to your `$PATH` any way you like\n\n  ```console\n  $ echo \'export PATH="$HOME/.tfenv/bin:$PATH"\' >> ~/.bash_profile\n  ```\n\n  OR you can make symlinks for `tfenv/bin/*` scripts into a path that is already added to your `$PATH` (e.g. `/usr/local/bin`) `OSX/Linux Only!`\n\n  ```console\n  $ ln -s ~/.tfenv/bin/* /usr/local/bin\n  ```\n\n  On Ubuntu/Debian touching `/usr/local/bin` might require sudo access, but you can create `${HOME}/bin` or `${HOME}/.local/bin` and on next login it will get added to the session `$PATH`\n  or by running `. ${HOME}/.profile` it will get added to the current shell session\'s `$PATH`.\n\n  ```console\n  $ mkdir -p ~/.local/bin/\n  $ . ~/.profile\n  $ ln -s ~/.tfenv/bin/* ~/.local/bin\n  $ which tfenv\n  ```\n\n## Usage\n\n### tfenv install [version]\n\nInstall a specific version of Terraform. Available options for version:\n\n- `i.j.k` exact version to install\n- `latest` is a syntax to install latest version\n- `latest:<regex>` is a syntax to install latest version matching regex (used by grep -e)\n- `min-required` is a syntax to recursively scan your Terraform files to detect which version is minimally required. See [required_version](https://www.terraform.io/docs/configuration/terraform.html) docs. Also [see min-required](#min-required) section below.\n\n```console\n$ tfenv install 0.7.0\n$ tfenv install latest\n$ tfenv install latest:^0.8\n$ tfenv install min-required\n$ tfenv install\n```\n\nIf `shasum` is present in the path, tfenv will verify the download against Hashicorp\'s published sha256 hash.\nIf [keybase](https://keybase.io/) is available in the path it will also verify the signature for those published hashes using Hashicorp\'s published public key.\n\nYou can opt-in to using GnuPG tools for PGP signature verification if keybase is not available:\n\n```console\n$ echo \'trust-tfenv: yes\' > ~/.tfenv/use-gpgv\n$ tfenv install\n```\n\nThe `trust-tfenv` directive means that verification uses a copy of the\nHashicorp OpenPGP key found in the tfenv repository.  Skipping that directive\nmeans that the Hashicorp key must be in the existing default trusted keys.\nUse the file `~/.tfenv/use-gnupg` to instead invoke the full `gpg` tool and\nsee web-of-trust status; beware that a lack of trust path will not cause a\nvalidation failure.\n\n#### .terraform-version\n\nIf you use a [.terraform-version file](#terraform-version-file), `tfenv install` (no argument) will install the version written in it.\n\n#### min-required\n\nPlease note that we don\'t do semantic version range parsing but use first ever found version as the candidate for minimally required one. It is up to the user to keep the definition reasonable. I.e.\n\n```terraform\n// this will detect 0.12.3\nterraform {\n  required_version  = "<0.12.3, >= 0.10.0"\n}\n```\n\n```terraform\n// this will detect 0.10.0\nterraform {\n  required_version  = ">= 0.10.0, <0.12.3"\n}\n```\n\n### Environment Variables\n\n#### TFENV\n\n##### `TFENV_ARCH`\n\nString (Default: amd64)\n\nSpecify architecture. Architecture other than the default amd64 can be specified with the `TFENV_ARCH` environment variable\n\n```console\nTFENV_ARCH=arm tfenv install 0.7.9\n```\n\n##### `TFENV_CURL_OUTPUT`\n\nInteger (Default: 2)\n\nSet the mechanism used for displaying download progress when downloading terraform versions from the remote server.\n\n* 2: v1 Behaviour: Pass `-#` to curl\n* 1: Use curl default\n* 0: Pass `-s` to curl\n\n##### `TFENV_DEBUG`\n\n##### `TFENV_REMOTE`\n\nString (Default: https://releases.hashicorp.com)\n\nTo install from a remote other than the default\n\n```console\nTFENV_REMOTE=https://example.jfrog.io/artifactory/hashicorp\n```\n\n#### Bashlog Logging Library\n\n##### `BASHLOG_COLOURS`\n\nInteger (Default: 1)\n\nTo disable colouring of console output, set to 0.\n\n\n##### `BASHLOG_DATE_FORMAT`\n\nString (Default: +%F %T)\n\nThe display format for the date as passed to the `date` binary to generate a datestamp used as a prefix to:\n\n* `FILE` type log file lines.\n* Each console output line when `BASHLOG_EXTRA=1`\n\n##### `BASHLOG_EXTRA`\n\nInteger (Default: 0)\n\nBy default, console output from tfenv does not print a date stamp or log severity.\n\nTo enable this functionality, making normal output equivalent to FILE log output, set to 1.\n\n##### `BASHLOG_FILE`\n\nInteger (Default: 0)\n\nSet to 1 to enable plain text logging to file (FILE type logging).\n\nThe default path for log files is defined by /tmp/$(basename $0).log\nEach executable logs to its own file.\n\ne.g.\n\n```console\nBASHLOG_FILE=1 tfenv use latest\n```\n\nwill log to `/tmp/tfenv-use.log`\n\n##### `BASHLOG_FILE_PATH`\n\nString (Default: /tmp/$(basename ${0}).log)\n\nTo specify a single file as the target for all FILE type logging regardless of the executing script.\n\n##### `BASHLOG_I_PROMISE_TO_BE_CAREFUL_CUSTOM_EVAL_PREFIX`\n\nString (Default: "")\n\n*BE CAREFUL - MISUSE WILL DESTROY EVERYTHING YOU EVER LOVED*\n\nThis variable allows you to pass a string containing a command that will be executed using `eval` in order to produce a prefix to each console output line, and each FILE type log entry.\n\ne.g.\n\n```console\nBASHLOG_I_PROMISE_TO_BE_CAREFUL_CUSTOM_EVAL_PREFIX=\'echo "${$$} "\'\n```\nwill prefix every log line with the calling process\' PID.\n\n##### `BASHLOG_JSON`\n\nInteger (Default: 0)\n\nSet to 1 to enable JSON logging to file (JSON type logging).\n\nThe default path for log files is defined by /tmp/$(basename $0).log.json\nEach executable logs to its own file.\n\ne.g.\n\n```console\nBASHLOG_JSON=1 tfenv use latest\n```\n\nwill log in JSON format to `/tmp/tfenv-use.log.json`\n\nJSON log content:\n\n`{"timestamp":"<date +%s>","level":"<log-level>","message":"<log-content>"}`\n\n##### `BASHLOG_JSON_PATH`\n\nString (Default: /tmp/$(basename ${0}).log.json)\n\nTo specify a single file as the target for all JSON type logging regardless of the executing script.\n\n##### `BASHLOG_SYSLOG`\n\nInteger (Default: 0)\n\nTo log to syslog using the `logger` binary, set this to 1.\n\nThe basic functionality is thus:\n\n```console\nlocal tag="${BASHLOG_SYSLOG_TAG:-$(basename "${0}")}";\nlocal facility="${BASHLOG_SYSLOG_FACILITY:-local0}";\nlocal pid="${$}";\n\nlogger --id="${pid}" -t "${tag}" -p "${facility}.${severity}" "${syslog_line}"\n```\n\n##### `BASHLOG_SYSLOG_FACILITY`\n\nString (Default: local0)\n\nThe syslog facility to specify when using SYSLOG type logging.\n\n##### `BASHLOG_SYSLOG_TAG`\n\nString (Default: $(basename $0))\n\nThe syslog tag to specify when using SYSLOG type logging.\n\nDefaults to the PID of the calling process.\n\n\n\n### tfenv use &lt;version>\n\nSwitch a version to use\n\n`latest` is a syntax to use the latest installed version\n\n`latest:<regex>` is a syntax to use latest installed version matching regex (used by grep -e)\n\n`min-required` will switch to the version minimally required by your terraform sources (see above `tfenv install`)\n\n```console\n$ tfenv use min-required\n$ tfenv use 0.7.0\n$ tfenv use latest\n$ tfenv use latest:^0.8\n```\n\n### tfenv uninstall &lt;version>\n\nUninstall a specific version of Terraform\n`latest` is a syntax to uninstall latest version\n`latest:<regex>` is a syntax to uninstall latest version matching regex (used by grep -e)\n\n```console\n$ tfenv uninstall 0.7.0\n$ tfenv uninstall latest\n$ tfenv uninstall latest:^0.8\n```\n\n### tfenv list\n\nList installed versions\n\n```console\n% tfenv list\n* 0.10.7 (set by /opt/tfenv/version)\n  0.9.0-beta2\n  0.8.8\n  0.8.4\n  0.7.0\n  0.7.0-rc4\n  0.6.16\n  0.6.2\n  0.6.1\n```\n\n### tfenv list-remote\n\nList installable versions\n\n```console\n% tfenv list-remote\n0.9.0-beta2\n0.9.0-beta1\n0.8.8\n0.8.7\n0.8.6\n0.8.5\n0.8.4\n0.8.3\n0.8.2\n0.8.1\n0.8.0\n0.8.0-rc3\n0.8.0-rc2\n0.8.0-rc1\n0.8.0-beta2\n0.8.0-beta1\n0.7.13\n0.7.12\n...\n```\n\n## .terraform-version file\n\nIf you put a `.terraform-version` file on your project root, or in your home directory, tfenv detects it and uses the version written in it. If the version is `latest` or `latest:<regex>`, the latest matching version currently installed will be selected.\n\n```console\n$ cat .terraform-version\n0.6.16\n\n$ terraform --version\nTerraform v0.6.16\n\nYour version of Terraform is out of date! The latest version\nis 0.7.3. You can update by downloading from www.terraform.io\n\n$ echo 0.7.3 > .terraform-version\n\n$ terraform --version\nTerraform v0.7.3\n\n$ echo latest:^0.8 > .terraform-version\n\n$ terraform --version\nTerraform v0.8.8\n```\n\n## Upgrading\n\n```console\n$ git --git-dir=~/.tfenv/.git pull\n```\n\n## Uninstalling\n\n```console\n$ rm -rf /some/path/to/tfenv\n```\n\n## LICENSE\n\n- [tfenv itself](https://github.com/tfutils/tfenv/blob/master/LICENSE)\n- [rbenv](https://github.com/rbenv/rbenv/blob/master/LICENSE)\n  - tfenv partially uses rbenv\'s source code\n'