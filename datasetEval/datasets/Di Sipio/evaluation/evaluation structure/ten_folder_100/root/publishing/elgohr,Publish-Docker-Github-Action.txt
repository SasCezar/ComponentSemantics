b"# Publishes docker containers\n[![Actions Status](https://github.com/elgohr/Publish-Docker-Github-Action/workflows/Test/badge.svg)](https://github.com/elgohr/Publish-Docker-Github-Action/actions)\n[![Actions Status](https://github.com/elgohr/Publish-Docker-Github-Action/workflows/Integration%20Test/badge.svg)](https://github.com/elgohr/Publish-Docker-Github-Action/actions)\n[![Actions Status](https://github.com/elgohr/Publish-Docker-Github-Action/workflows/Integration%20Test%20Github/badge.svg)](https://github.com/elgohr/Publish-Docker-Github-Action/actions)\n\nThis Action for [Docker](https://www.docker.com/) uses the Git branch as the [Docker tag](https://docs.docker.com/engine/reference/commandline/tag/) for building and pushing the container.\nHereby the master-branch is published as the latest-tag.\n\n## Usage\n\n## Example pipeline\n```yaml\nname: Publish Docker\non: [push]\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@master\n    - name: Publish to Registry\n      uses: elgohr/Publish-Docker-Github-Action@master\n      with:\n        name: myDocker/repository\n        username: ${{ secrets.DOCKER_USERNAME }}\n        password: ${{ secrets.DOCKER_PASSWORD }}\n```\n\n## Mandatory Arguments\n\n`name` is the name of the image you would like to push  \n`username` the login username for the registry  \n`password` the login password for the registry  \n\n> If you would like to publish the image to AWS ECR, please have a look at https://github.com/elgohr/ecr-login-action\n\n## Outputs\n\n`tag` is the tag, which was pushed  \n`snapshot-tag` is the tag that is generated by the [snapshot-option](https://github.com/elgohr/Publish-Docker-Github-Action#snapshot) and pushed\n\n## Optional Arguments\n\n### registry\nUse `registry` for pushing to a custom registry.\n> NOTE: GitHub's Docker registry uses a different path format to Docker Hub, as shown below. See [Configuring Docker for use with GitHub Package Registry](https://help.github.com/en/github/managing-packages-with-github-package-registry/configuring-docker-for-use-with-github-package-registry#publishing-a-package) for more information.\n\n```yaml\nwith:\n  name: owner/repository/image\n  username: ${{ secrets.DOCKER_USERNAME }}\n  password: ${{ secrets.DOCKER_PASSWORD }}\n  registry: docker.pkg.github.com\n```\n\n### snapshot\nUse `snapshot` to push an additional image, which is tagged with  \n`{YEAR}{MONTH}{DAY}{HOUR}{MINUTE}{SECOND}{first 6 digits of the git sha}`.  \nThe date was inserted to prevent new builds with external dependencies override older builds with the same sha.\nWhen you would like to think about versioning images, this might be useful.  \n\n```yaml\nwith:\n  name: myDocker/repository\n  username: ${{ secrets.DOCKER_USERNAME }}\n  password: ${{ secrets.DOCKER_PASSWORD }}\n  snapshot: true\n```\n\n### dockerfile\nUse `dockerfile` when you would like to explicitly build a Dockerfile.  \nThis might be useful when you have multiple DockerImages.  \n\n```yaml\nwith:\n  name: myDocker/repository\n  username: ${{ secrets.DOCKER_USERNAME }}\n  password: ${{ secrets.DOCKER_PASSWORD }}\n  dockerfile: MyDockerFileName\n```\n\n### workdir\nUse `workdir` when you would like to change the directory for building.\n\n```yaml\nwith:\n  name: myDocker/repository\n  username: ${{ secrets.DOCKER_USERNAME }}\n  password: ${{ secrets.DOCKER_PASSWORD }}\n  workdir: mySubDirectory\n```\n\n### buildargs\nUse `buildargs` when you want to pass a list of environment variables as [build-args](https://docs.docker.com/engine/reference/commandline/build/#set-build-time-variables---build-arg). Identifiers are separated by comma.   \nAll `buildargs` will be masked, so that they don't appear in the logs.  \n\n```yaml\n- name: Publish to Registry\n  uses: elgohr/Publish-Docker-Github-Action@master\n  env:\n    MY_FIRST: variableContent\n    MY_SECOND: variableContent\n  with:\n    name: myDocker/repository\n    username: ${{ secrets.DOCKER_USERNAME }}\n    password: ${{ secrets.DOCKER_PASSWORD }}\n    buildargs: MY_FIRST,MY_SECOND\n```\n\n### cache\nUse `cache` when you have big images, that you would only like to build partially (changed layers).  \n> CAUTION: Docker builds will cache non-repoducable commands, such as installing packages. If you use this option, your packages will never update. To avoid this, run this action on a schedule with caching **disabled** to rebuild the cache periodically.\n\n```yaml\nname: Publish to Registry\non:\n  push:\n    branches:\n      - master\n  schedule:\n    - cron: '0 2 * * 0' # Weekly on Sundays at 02:00\njobs:\n  update:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@master\n    - name: Publish to Registry\n      uses: elgohr/Publish-Docker-Github-Action@master\n      with:\n        name: myDocker/repository\n        username: ${{ secrets.DOCKER_USERNAME }}\n        password: ${{ secrets.DOCKER_PASSWORD }}\n        cache: ${{ github.event_name != 'schedule' }}\n```\n\n### tag_names\nUse `tag_names` when you want to push tags/release by their git name (e.g. `refs/tags/MY_TAG_NAME`).  \n> CAUTION: Images produced by this feature can be override by branches with the same name - without a way to restore.\n\n```yaml\nwith:\n  name: myDocker/repository\n  username: ${{ secrets.DOCKER_USERNAME }}\n  password: ${{ secrets.DOCKER_PASSWORD }}\n  tag_names: true\n```\n"