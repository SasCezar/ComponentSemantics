b"Pandoc Scholar\n==============\n\n[![release shield]](https://github.com/pandoc-scholar/pandoc-scholar/releases)\n[![DOI]](https://zenodo.org/badge/latestdoi/82204858)\n[![license shield]](./LICENSE)\n[![build status]](https://travis-ci.org/pandoc-scholar/pandoc-scholar)\n\nCreate beautiful, semantically enriched articles with pandoc. This\npackage provides utilities to make publishing of scientific articles as\nsimple and pleasant as possible. It simplifies setting authors' metadata\nin YAML blocks, allows to add semantic annotation to citations, and only\nrequires the programs pandoc and make.\n\n[release shield]: https://img.shields.io/github/release/pandoc-scholar/pandoc-scholar.svg\n[license shield]: https://img.shields.io/github/license/pandoc-scholar/pandoc-scholar.svg\n[build status]:   https://img.shields.io/travis/pandoc-scholar/pandoc-scholar/master.svg\n[DOI]: https://zenodo.org/badge/82204858.svg\n[paper]: https://peerj.com/articles/cs-112/\n\nOverview\n--------\n\nPlain pandoc is already excellent at document conversion, but it lacks\nin metadata handling. Pandoc scholar offers simple ways to include\nmetadata on authors, affiliations, contact details, and citations. The\ndata is included into the final output as document headers. Additionally\nall entries can be exported as [JSON-LD], a standardized format for the\nsemantic web.\n\nThe background leading to the development of pandoc scholar is described\nin the [paper] published in PeerJ Computer Science.\n\nNote that since version 2.0, most of the functionality of pandoc Scholar\nis now provided via [pandoc Lua filters]. If you prefer to mix-and-match\nselected functionalities provided by pandoc scholar, you can now use the\nrespective Lua filters directly. Integration with tools like RMarkdown\nis possible this way.\n\n[JSON-LD]: https://en.wikipedia.org/wiki/JSON-LD\n[pandoc Lua filters]: https://github.com/pandoc/lua-filters\n\n### Demo\n\nAn example document plus bibliography is provided in the *example*\nfolder. Running `make` in the project's root folder will process the\nexample article, generating output like below:\n\n![example article screenshot](https://pandoc-scholar.github.io/example/header.png)\n\nGet the full output as [pdf], [docx], or [epub], or take a look at the\nmetadata in [JSON-LD] format.\n\n[pdf]: https://pandoc-scholar.github.io/example/example.pdf\n[docx]: https://pandoc-scholar.github.io/example/example.docx\n[epub]: https://pandoc-scholar.github.io/example/example.epub\n[JSON-LD]: https://pandoc-scholar.github.io/example/example.jsonld\n\n\nPrerequisites\n-------------\n\nThis package builds on [pandoc](http://pandoc.org/), the universal\ndocument converter, version 2.1 or later. See the pandoc website for\n[installation instructions](http://pandoc.org/installing.html) and\nsuggestions for LaTeX packages, which we use for PDF generation.\n\n\nInstallation\n------------\n\nArchives containing all required files are provided for each release.\nUse the *release* button above (or directly go to the [latest release])\nand download a `pandoc-scholar` archive; both archive files, `.zip` and\n`.tar.gz`, contain the same files. Choose the filetype that is the\neasiest to unpack on you system.\n\nA `pandoc-scholar` folder will be created on unpacking. The folder\ncontains all required scripts and templates.\n\n[latest release]: https://github.com/pandoc-scholar/pandoc-scholar/releases/latest\n\n\nUsage\n-----\n\n### Quickstart\n\nRun `make` to convert the example article into all supported output formats. The\nmarkdown file used to create the output files can be configured via the\n`ARTICLE_FILE` variable, either directly in the Makefile or by specifying the\nvalue on the command line.\n\n    make ARTICLE_FILE=your-file.md\n\n### Includable Makefile\n\nThe *Makefile*, which does most of the work, is written in a style that makes it\nsimple to include it from within other Makefiles. This method allows to keep\n`pandoc-scholar` installed in a central location and to use the same instance\nfor multiple projects. The `ARTICLE_FILE` and `PANDOC_SCHOLAR_PATH` variables\nmust be defined in the including Makefile:\n\n``` Makefile\nARTICLE_FILE        = your-file.md\nPANDOC_SCHOLAR_PATH = ../path-to-pandoc-scholar-folder\ninclude $(PANDOC_SCHOLAR_PATH)/Makefile\n```\n\nCalling `make` as usual will create all configured output formats. Per default,\nthis creates *pdf*, *latex*, *docx*, *odt*, *epub*, *html*, and *jats* output.\nThe set of output files can be reduced by setting the `DEFAULT_EXTENSIONS`\nvariable to a subset of the aforementioned formats.\n\nAlternative template files can be set using `TEMPLATE_FILE_<FORMAT>` variables,\nwhere `<FORMAT>` is one of *HTML*, *EPUB*, *JATS*, or *LATEX*. The reference\nfiles for ODT and DOCX output can be changed using `ODT_REFERENCE_FILE` and\n`DOCX_REFERENCE_FILE`, respectively.\n\nAdditional pandoc options can be given on a per-format basis using\n`PANDOC_<FORMAT>_OPTIONS` variables. The following uses an actual Makefile as an\nexample to demonstrate usage of those options.\n\n``` Makefile\nARTICLE_FILE        = open-science-formatting.md\n\nPANDOC_LATEX_OPTIONS  = --latex-engine=xelatex\nPANDOC_LATEX_OPTIONS += --csl=peerj.csl\nPANDOC_LATEX_OPTIONS += --filter=pandoc-citeproc\nPANDOC_LATEX_OPTIONS += -M fontsize=10pt\nPANDOC_LATEX_OPTIONS += -M classoption=fleqn\n\nPANDOC_HTML_OPTIONS   = --toc\nPANDOC_EPUB_OPTIONS   = --toc\n\nDOCX_REFERENCE_FILE   = pandoc-manuscript.docx\nODT_REFERENCE_FILE    = pandoc-manuscript.odt\nTEMPLATE_FILE_LATEX   = pandoc-peerj.latex\n\nPANDOC_SCHOLAR_PATH = pandoc-scholar\ninclude $(PANDOC_SCHOLAR_PATH)/Makefile\n```\n\n\nMetadata Features\n-----------------\n\nPandoc scholar supports additional functionality via metadata fields. Most\nnotably, the augmentation of articles with author and affiliation data, which is\nessential for academic publishing, is greatly simplified when using pandoc\nscholar.\n\n### Authors and affiliations\n\nMost metadata should be specified in the YAML block at the top of the article.\nAuthor data and affiliations are taken from the *author* and *institute* field,\nrespectively. Institutes can be given via user-defined abbreviations, saving\nunnecessary repetitions while preserving readability.\n\nExample:\n\n``` yaml\nauthor:\n  - James Dewey Watson:\n      institute: cavendish\n  - Francis Harry Compton Crick:\n      institute: cavendish\ninstitute:\n  - cavendish: Cavendish Laboratory, Cambridge\n```\n\nAuthors are given in the order in which they are listed, while institute order\nfollows from author order.\n\nThe separate institute field may add unwanted complexity in some cases. It is\nhence possible to omit it and to give the affiliations name directly in the\nauthor entry:\n\n``` yaml\nauthor:\n  - John MacFarlane:\n      institute: University of California, Berkeley\n```\n\n### Institute address\n\nOften it is not enough to give just a name for institutes. It is hence possible\nto add arbitrary fields. The name must then explicitly be set via the *name*\nfield of the institute entry:\n\n``` yaml\nauthor:\n  - Robert Winkler:\n      institute: cinvestav\ninstitute:\n  - cinvestav:\n      name: 'CINVESTAV Unidad Irapuato, Department of Biochemistry and Biotechnology'\n      address: 'Km. 9.6 Libramiento Norte Carr. Irapuato-Le\xc3\xb3n, 36821 Irapuato Gto. M\xc3\xa9xico'\n      phone: +52 (462) 623 9635\n```\n\nCurrently only the institute's address is used in the default template, but\nfuture extensions will be based on this convention.\n\n### Semantic citations\n\nUnderstanding the reason a citations is included in scholarly articles usually\nrequires natural language processing of the article. However, navigating the\ncurrent literature landscape can be improved and by having that information\naccesible and in a machine-readable form. Pandoc scholar supports the CiTO\nontology, allowing authors to specify important meta-information on the citation\ndirectly while writing the text. The property is simply prepended to the\ncitation key, separated by a colon: `@<property>:citationKey`.\n\nThe following table contains all supported keywords and the respective\nCiTO properties. Authors are free to use the short-form, the full-length\nproperty, or any of the alternatives listed below (i.e., all word in a\nrow denote the property and have the same effect).\n\nCiTO property                  | Keyword             | alternatives\n------------------------------ | ------------------- | ---------------------\nagrees\\_with                   | agrees\\_with        | agree\\_with\ncitation                       |                     |\ncites                          |                     |\ncites\\_as\\_authority           | authority           | as\\_authority\ncites\\_as\\_data\\_source        | data\\_source        | as\\_data_source\ncites\\_as\\_evidence            | evidence            | as\\_evidence\ncites\\_as\\_metadata\\_document  | metadata            | as\\_metadata_document\ncites\\_as\\_recommended_reading | recommended_reading | as\\_recommended\\_reading\ndisputes                       |                     |\ndocuments                      |                     |\nextends                        |                     |\nincludes\\_excerpt\\_from        | excerpt             | excerpt\\_from\nincludes\\_quotation\\_from      | quotation           | quotation\\_from\nobtaines\\_background\\_from     | background          | background\\_from\nrefutes                        |                     |\nreplies\\_to                    |                     |\nupdates                        |                     |\nuses\\_data\\_from               | data\\_from          | data\nuses\\_method\\_in               | method              | method\\_in\n\nExample:\n\n    DNA strands form a double-helix [@evidence:watson_crick_1953].\n\n\nLicense\n-------\n\nCopyright \xc2\xa9 2016\xe2\x80\x932018 Albert Krewinkel and Robert Winkler except for the\nfollowing components:\n\n- HTML template: \xc2\xa9 2016 Andrew G. York and Diana Mounter\n- dkjson: \xc2\xa9 2010-2013 David Heiko Kolf\n- lua-filters: \xc2\xa9 2017-2018 John MacFarlane, Albert Krewinkel, Jesse Rosenthal,\n  and Greg Tucker-Kellogg\n\nThis program is free software; you can redistribute it and/or modify it under\nthe terms of the GNU General Public License as published by the Free Software\nFoundation; either version 2 of the License, or (at your option) any later\nversion.\n\nThis program is distributed in the hope that it will be useful, but WITHOUT ANY\nWARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\nPARTICULAR PURPOSE. See the GNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License along with\nthis program; if not, write to the Free Software Foundation, Inc., 51 Franklin\nStreet, Fifth Floor, Boston, MA 02110-1301 USA.\n"