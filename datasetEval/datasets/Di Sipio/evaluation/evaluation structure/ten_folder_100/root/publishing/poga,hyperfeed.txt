b"# Hyperfeed\n\n[![NPM Version](https://img.shields.io/npm/v/hyperfeed.svg)](https://www.npmjs.com/package/hyperfeed) [![JavaScript Style Guide](https://img.shields.io/badge/code%20style-standard-brightgreen.svg)](http://standardjs.com/)\n\nHyperfeed is a self-archiving P2P live feed. You can convert any RSS/ATOM/RDF feed to a P2P live update publishing network.\n\n* **Self-archiving**: Items and it's linked page will be archived within hyperfeed.\n* **Decentralized**: Feed contents can still be distributed between readers even if the original host is down.\n* **Live**: No need to poll the original feed. Updates will be pushed to you.\n\n```\nnpm install hyperfeed\n```\n\n## Synopsis\n\nPublish your RSS feed through hyperfeed:\n\n```js\nconst request = require('request')\nconst hyperfeed = require('hyperfeed')\nconst hyperdrive = require('hyperdrive')\nconst swarm = require('hyperdiscovery')\n\nconst url = 'https://medium.com/feed/google-developers'\n\nvar archive = hyperdrive('./feed')\nvar feed = hyperfeed(archive)\nfeed.ready(() => {\n  swarm(archive)\n  console.log(feed.key.toString('hex'))\n  feed.update(request(url), (err) => {\n    console.log('feed imported')\n  })\n})\n\n```\n\nNow you can replicate the hyperfeed through a p2p network:\n\n```js\nconst Hyperfeed = require('hyperfeed')\nconst swarm = require('hyperdiscovery')\nconst hyperdrive = require('hyperdrive')\n\nvar archive = hyperdrive('./anotherFeed', '<KEY FROM ABOVE>')\nvar feed = hyperfeed(archive)\nswarm(archive) // load the feed from the p2p network\nfeed.list((err, entries) => {\n  console.log(entries) // all entries in the feed (include history entries)\n})\n```\n\n## API\n\n#### `var feed = hyperfeed(archive, [opts])`\n\nCreate a new Hyperfeed instance. `opts` includes:\n\n```javascript\n{\n  scrapLink: true // set to false to stop archiving linked page for each feed item\n}\n```\n\n#### `feed.key`\n\nThe public key identifying the feed.\n\n#### `feed.discoveryKey`\n\nA key derived from the public key that can be used to discovery other peers sharing this feed.\n\n#### `feed.meta`\n\nThe metadata of the feed.\n\n#### `feed.ready(cb)`\n\nWait for feed is fully ready and all properties has been populated.\n\n#### `feed.update(feedStream, cb(err, feed))`\n\nimport a RSS feed into `feed`. Accept a stream.\n\n#### `feed.setMeta(metadataObject, cb(err))`\n\nSet feed's metadata.\n\n#### `feed.list(cb(err, entries))`\n\nList archived item in the feed.\n\n#### `feed.save(item, [scrappedData], cb(err))`\n\nSave a new feed item.  Check [https://github.com/jpmonette/feed](https://github.com/jpmonette/feed) for item detail.\n\nIf you already have scrapped data for the given item, you can pass it to `scrappedData` to avoid redundant requests.\n\n#### `feed.export(count, cb(err, rss))`\n\nExport a RSS-2.0 Feed containing latest `count` items.\n\n## License\n\nThe MIT License\n"