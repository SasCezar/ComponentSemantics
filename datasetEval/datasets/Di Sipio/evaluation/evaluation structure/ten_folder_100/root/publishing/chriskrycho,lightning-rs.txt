b'# Lightning (`lx`)\n\n[![Build Status](https://travis-ci.org/chriskrycho/lightning-rs.svg?branch=master)](https://travis-ci.org/chriskrycho/lightning-rs)\n\nYet another static site generator\xe2\x80\x94but this one\'s written in Rust. (And therefore, not to be confused with the [*other* lightning] static site generator: that one is written in Python.)\n\n[*other* lightning]: https://github.com/borismus/lightning\n\n## Status\n\nThis currently ***does not work***. If you need a site generator that does, also written in Rust and very fast, check out [Cobalt] or [Zola]. ([Why am I building something else if Cobalt and Zola already exist?](#why))\n\nToday, Lightning *builds*, passes the tests I\'ve written, and even correctly loads the configuration file. But running `lx build` will *not* do what you expect: it\'ll convert all the Markdown in a config-specified directory, but it won\'t render it into templates in any way. Keep your expectations low on how fast this will develop, and you won\'t be disappointed.\n\n[Hugo]: https://gohugo.io\n[Cobalt]: https://cobalt-org.github.io\n[Zola]: https://www.getzola.org\n\n## Contributing\n\nAt the moment, I\'m not really looking for collaborators. This is public because I default to making things public, but I\'m really interested in this as a project where I can experiment and build *exactly* what I want over time. It\'s also apt to move in fits and starts. (If you happen to spot something small, I won\'t argue, though!)\n\nThe only things you should know about are that this uses `rustfmt` for contributing and that things don\'t pass CI unless this builds on Windows.\n\n### Goals\n\nThis project\'s main goals are:\n\n- speed\n- ease of use, even for more complex ways of structuring a site\n- good out-of-the-box defaults, but with human-readable and -writable configurability\n- straightforward *import* from other systems (though see comment below)\n- extended Markdown functionality like processing citations\n- full cross-platform support: this should run equally well on macOS, Windows, and Linux\n\nIt is an explicit non-goals to be an exact drop-in replacement for any other generator. Supporting the patterns other generators use for ease of import is good; requiring that everyone conform to e.g. Jekyll\'s, Hugo\'s, or any other generator\'s patterns as a result is *not* good. It should be easy to migrate in Jekyll/Hugo/etc. content; but you will never have to format the titles of your posts in any particular way.\n\n### Roadmap\n\nN.b. the below is my overall set of goals. For the 1.0 roadmap, see the [milestone](https://github.com/chriskrycho/lightning-rs/milestone/1) and the [tracking issue](https://github.com/chriskrycho/lightning-rs/issues/3).\n\n- [ ] Define configuration scheme\n\n    - [x] **Support custom taxonomies**: not being limited to just having categories and tags, and pages being off in their own corner\n\n        - [x] binary (true/false)\n\n        - [x] tag-like: items may belong to multiple items\n\n        - [x] hierarchical: items may belong to parents and children e.g. something can be at `Tech/Programming` and thus belong to both Tech and Programming\n\n            - [x] hierarchical *and exclusive*, i.e. if something is in the category `Tech` it *cannot* be in the category `Art`. I don\'t actually want or need this, but other users almost certainly will.\n\n    - [ ] Support importing content from other generators\' basic setups.\n\n        This really means, make sure the configuration can support the configuration patterns for popular generators. This is not so much a *formal support* issue (though being able to `lx create --from-jekyll` would be cool) as it is a *make sure this is well-covered by the implementation* issue. Other generators to cover, in order:\n\n        - [x] from [Pelican] \xe2\x80\x93 a must for the obvious reason that I want to be able to import my existing sites.\n\n        - [ ] from [Jekyll] \xe2\x80\x93 a high priority given the sheer popularity of the generator\n\n        - [ ] from [Hugo] \xe2\x80\x93 because it\'s basically a direct competitor if I ever get this thing to where I want performance-wise\n\n- [ ] Render Markdown\n\n    - [ ] with [pulldown-cmark] or [comrak]\n\n    - [ ] with [pandoc]\n        - [x] via [subprocess][cmd-pandoc]\n        - [ ] as a library\n\n    - [ ] via [Hoedown] bindings? (big maybe, but it has the upside of being very widely used b/c of Jekyll and such.)\n\n    - [x] optionally using [Syntect] for syntax highlighting\n\n- [ ] Templating\n\n    - [ ] Taxonomy-specific views\n\n    - [ ] Standalone pages\n\n    - [ ] Fully customizable "formats" to enable e.g. link-blogging, podcasting, slide shows, etc.\n\n- [ ] Server mode\n\n    It\'s nice to be able to generate everything statically, but depending on the site it may *also* be nice to have an actual server application, whether for generating content or simply for serving it in a non-static fashion if so desired. (There\'s a lot of thought that would need to go into figuring out what this flow would look like.)\n\n- [ ] Generate RSS\n\n    - [ ] support podcast elements for RSS\n\n    - [ ] render template not only into rendered content but also RSS/Atom\n\n- [ ] Embrace parallelism!\n\n    - [x] Via threading, e.g. with Rayon\n\n    - [ ] Via [futures-cpupool] or similar?\n\n- [ ] Extensibility via new commands, which can be installed and run _a la_ Git or Cargo commands (`cargo clippy` just runs the `cargo-clippy` binary)\n\n- [ ] Supply (and make it easy to extend) a `create` command and interface.\n\n    It\'s hard to overstate how much utility I get out of the `ember generate` family of commands, or how much I use the hacked-together Python CLI I use to generate stubs for posts. And both Jekyll and Hugo have tools for this, and it\'s very handy.\n\n- [ ] Watchers \xe2\x80\x93 I want to be able to tweak content and regenerate it on the fly, or especially to be able to tweak a template and have it rebuild on the fly. (This may be a good thing to integrate with the **Server Mode** noted above.)\n\nWhat else should be on this list?\n\n[Pelican]: http://docs.getpelican.com/en/stable/\n[Jekyll]: http://jekyllrb.com\n[pulldown-cmark]: https://crates.io/crates/pulldown-cmark\n[comrak]: https://github.com/kivikakk/comrak\n[cmd-pandoc]: https://crates.io/crates/cmd-pandoc\n[Hoedown]: https://crates.io/crates/hoedown\n[Syntect]: https://crates.io/crates/syntect\n[futures-cpupool]: https://docs.rs/futures-cpupool/0.1.2/futures_cpupool/\n\n## Why?\n\n1.  Because I\'ve spent the last half decade fighting with different solutions, and ultimately found all of them wanting for my personal site needs\xe2\x80\x94which are, in a word, *quirky*.\n\n    The short version is: my online presence includes everything from academic papers in theology to series on programming languages and from the [POSSE]-style source of my microblogging to poetry to music I\'ve written.\n\n    I need a combination of things no other single static site generator provides, including:\n\n    -   custom taxonomies, allowing overlapping/non-hierarchical relationships beyond a single kind of \'tag\': something might need to live in both **Art** and **Family** as top-level subjects, while going specifically in *Poetry* and *Cat*, while also being filed specifically as ***Writing*** rather than, say, audio. That kind of overlapping categorization exists in *very* few other tools.\n\n    -   citation processing (probably, at least initially, via [Pandoc])\n\n    -   speed: I have a steadily growing site, and I do *not* want to be spending thirty-plus seconds to generate it when I just want to write a blog post. This means two things:\n\n        1. It needs to be fast\xe2\x80\x94*really* fast\xe2\x80\x94right out of the gate.\n        2. It should ultimately include a caching strategy, or possibly even a database, but should always be writable via plain text files.\n\n2.  Because I really like writing Rust.\n\n    There are other tools out there that I could *probably* bend to my will here, e.g. [Metalsmith]. But I\'d really rather work out something new in Rust than spend time fighting with a plugin system in\n\n3.  Because I want to see if I can make the fastest (or at least: *one* of the fastest) static site generators out there. When all is said and done, this should be as fast as [Hugo]. (That\'s a pretty high bar; Hugo is great, and if you want a static site generator *today*, especially if you don\'t have my quirky needs, that\'s what I would point you to.)\n\n[POSSE]: https://indieweb.org/POSSE\n[Pandoc]: http://pandoc.org\n[Metalsmith]: http://www.metalsmith.io\n'