b'Ansible NGINX Role\n==================\n\n[![Ansible Galaxy](https://img.shields.io/badge/galaxy-nginxinc.nginx-5bbdbf.svg)](https://galaxy.ansible.com/nginxinc/nginx)\n[![Build Status](https://travis-ci.org/nginxinc/ansible-role-nginx.svg?branch=master)](https://travis-ci.org/nginxinc/ansible-role-nginx)\n\nThis role installs NGINX Open Source, NGINX Plus, the NGINX Amplify agent, the NGINX Controller agent, or NGINX Unit on your target host.\n\n**Note:** This role is still in active development. There may be unidentified issues and the role variables may change as development continues.\n\nRequirements\n------------\n\nThis role was developed using Ansible 2.4.0.0. Backwards compatibility is not guaranteed.\n\nUse `ansible-galaxy install nginxinc.nginx` to install the role on your system.\n\nIt supports all platforms supported by [NGINX Open Source](https://nginx.org/en/linux_packages.html#mainline) and [NGINX Plus](https://www.nginx.com/products/technical-specs/):\n\n**NGINX Open Source**\n\n```yaml\nAlpine:\n  versions:\n    - 3.8\n    - 3.9\n    - 3.10\nCentOS:\n  versions:\n    - 6\n    - 7.4+\n    - 8\nDebian:\n  versions:\n    - stretch\n    - buster\nFreeBSD:\n  versions:\n    - 11.2+\n    - 12\nRedHat:\n  versions:\n    - 6\n    - 7.4+\n    - 8\nSUSE/SLES:\n  versions:\n    - 12\n    - 15\nUbuntu:\n  versions:\n    - xenial\n    - bionic\n```\n\n**NGINX Plus**\n\n```yaml\nAlpine:\n  versions:\n    - 3.8\n    - 3.9\n    - 3.10\nAmazon Linux:\n  versions:\n    - 2018.03\nAmazon Linux 2:\n  versions:\n    - LTS\nCentOS:\n  versions:\n    - 6.5+\n    - 7.4+\n    - 8\nDebian:\n  versions:\n    - stretch\n    - buster\nFreeBSD:\n  versions:\n    - 11.2+\n    - 12\nOracle Linux:\n  versions:\n    - 6.5+\n    - 7.4+\nRedHat:\n  versions:\n    - 6.5+\n    - 7.4+\n    - 8\nSUSE/SLES:\n  versions:\n    - 12\n    - 15\nUbuntu:\n  versions:\n    - xenial\n    - bionic\n```\n\n**NGINX Amplify Agent**\n\n```yaml\nAmazon Linux:\n  versions:\n    - 2017.09\nCentOS:\n  versions:\n    - 6\n    - 7\nDebian:\n  versions:\n    - jessie\n    - stretch\nUbuntu:\n  versions:\n    - trusty\n    - xenial\n    - bionic\nRedHat:\n  versions:\n    - 6\n    - 7\n```\n\n**NGINX Controller Agent**\n\n```yaml\nAmazon Linux:\n  versions:\n    - 2017.09\nAmazon Linux 2:\n  versions:\n    - LTS\nCentOS:\n  versions:\n    - 6\n    - 7\nDebian:\n  versions:\n    - jessie\n    - stretch\nUbuntu:\n  versions:\n    - xenial\n    - bionic\nRedHat:\n  versions:\n    - 6\n    - 7\n```\n\n**NGINX Unit**\n\n```yaml\nCentOS:\n  versions:\n    - 6\n    - 7\nRedHat:\n  versions:\n    - 6\n    - 7\nDebian:\n  versions:\n    - jessie\n    - stretch\n    - buster\nUbuntu:\n  versions:\n    - xenial\n    - bionic\nAmazon Linux:\n  versions:\n    - 2018.03\nAmazon Linux 2:\n  versions:\n    - 2\nFreeBSD:\n  versions:\n    - 10\n    - 11\n```\n\nRole Variables\n--------------\n\nThis role has multiple variables. The defaults for all these variables are the following:\n\n```yaml\n---\n# Install NGINX.\n# Default is true.\nnginx_enable: true\n\n# Start NGINX service.\n# Default is true.\nnginx_start: true\n\n# Print NGINX configuration file to terminal after executing playbook.\nnginx_debug_output: false\n\n# Supported systems\nnginx_linux_families: [\'Alpine\', \'Debian\', \'RedHat\', \'Suse\']\nnginx_bsd_systems: [\'FreeBSD\', \'NetBSD\', \'OpenBSD\', \'DragonFlyBSD\', \'HardenedBSD\']\n\n# Specify which type of NGINX you want to install.\n# Options are \'opensource\' or \'plus\'.\n# Default is \'opensource\'.\nnginx_type: opensource\n# Specify which version of NGINX you want to install.\n# Default is empty.\n# nginx_version: =19-1~bionic\n\n# Specify repository origin for NGINX Open Source.\n# Options are \'nginx_repository\' or \'os_repository\'.\n# Only works if \'nginx_type\' is set to \'opensource\'.\n# Default is nginx_repository.\nnginx_install_from: nginx_repository\n\n# Choose where to fetch the NGINX signing key from.\n# Default is the official NGINX signing key host.\n# nginx_signing_key: http://nginx.org/keys/nginx_signing.key\n\n# Specify source repository for NGINX Open Source.\n# Only works if \'install_from\' is set to \'nginx_repository\'.\n# Defaults are the official NGINX repositories.\n# nginx_repository: deb https://nginx.org/packages/mainline/debian/ stretch nginx\n\n# Choose to install BSD packages or ports.\n# Options are True for packages or False for ports.\n# Default is True.\nnginx_bsd_install_packages: true\n\n# Choose to update BSD ports collection.\n# Options are True for update or False for do not update.\n# Default is True.\nnginx_bsd_update_ports: true\n\n# Choose to install packages built from BSD ports collection if\n# available.\n# Options are True for use packages or False for do not use packages.\n# Default is True.\nnginx_bsd_portinstall_use_packages: true\n\n# Specify which branch of NGINX Open Source you want to install.\n# Options are \'mainline\' or \'stable\'.\n# Only works if \'install_from\' is set to \'nginx_repository\'.\n# Default is mainline.\nnginx_branch: mainline\n\n# Location of your NGINX Plus license in your local machine.\n# Default is the files folder within the NGINX Ansible role.\nnginx_license:\n  certificate: license/nginx-repo.crt\n  key: license/nginx-repo.key\n\n# Delete NGINX Plus license after installation for security purposes.\n# Default is true.\nnginx_delete_license: true\n\n# Install NGINX JavaScript, Perl, ModSecurity WAF (NGINX Plus only), GeoIP, Image-Filter, RTMP Media Streaming, and/or XSLT modules.\n# Default is false.\nnginx_modules:\n  njs: false\n  perl: false\n  waf: false\n  geoip: false\n  image_filter: false\n  rtmp: false\n  xslt: false\n\n# Install NGINX Amplify.\n# Use your NGINX Amplify API key.\n# Requires access to either the NGINX stub status or the NGINX Plus REST API.\n# Default is null.\nnginx_amplify_enable: false\nnginx_amplify_api_key: null\n\n# Install NGINX Controller.\n# Use your NGINX Controller API key and NGINX Controller API endpoint.\n# Requires NGINX Plus and write access to the NGINX Plus REST API.\n# Default is null.\nnginx_controller_enable: false\nnginx_controller_api_key: null\nnginx_controller_api_endpoint: null\n\n# Install NGINX Unit and NGINX Unit modules.\n# Use a list of supported NGINX Unit modules.\n# Default is false.\nnginx_unit_enable: false\nnginx_unit_modules: null\n\n# Remove previously existing NGINX configuration files.\n# Use a list of paths you wish to remove.\n# Default is false.\nnginx_cleanup_config: false\nnginx_cleanup_config_path:\n  - /etc/nginx/conf.d\n\n# Enable uploading NGINX configuration files to your system.\n# Default for uploading files is false.\n# Default location of files is the files folder within the NGINX Ansible role.\n# Upload the main NGINX configuration file.\nnginx_main_upload_enable: false\nnginx_main_upload_src: conf/nginx.conf\nnginx_main_upload_dest: /etc/nginx/\n# Upload HTTP NGINX configuration files.\nnginx_http_upload_enable: false\nnginx_http_upload_src: conf/http/*.conf\nnginx_http_upload_dest: /etc/nginx/conf.d/\n# Upload Stream NGINX configuration files.\nnginx_stream_upload_enable: false\nnginx_stream_upload_src: conf/stream/*.conf\nnginx_stream_upload_dest: /etc/nginx/conf.d/\n# Upload HTML files.\nnginx_html_upload_enable: false\nnginx_html_upload_src: www/*\nnginx_html_upload_dest: /usr/share/nginx/html\n# Upload SSL certificates and keys.\nnginx_ssl_upload_enable: false\nnginx_ssl_crt_upload_src: ssl/*.crt\nnginx_ssl_crt_upload_dest: /etc/ssl/certs/\nnginx_ssl_key_upload_src: ssl/*.key\nnginx_ssl_key_upload_dest: /etc/ssl/private/\n\n# Enable creating dynamic templated NGINX HTML demo websites.\nnginx_html_demo_template_enable: false\nnginx_html_demo_template:\n  default:\n    template_file: www/index.html.j2\n    html_file_name: index.html\n    html_file_location: /usr/share/nginx/html\n    web_server_name: Default\n\n# Enable creating dynamic templated NGINX configuration files.\n# Defaults are the values found in a fresh NGINX installation.\nnginx_main_template_enable: false\nnginx_main_template:\n  template_file: nginx.conf.j2\n  conf_file_name: nginx.conf\n  conf_file_location: /etc/nginx/\n  user: nginx\n  worker_processes: auto\n  #worker_rlimit_nofile: 1024\n  error_log:\n    location: /var/log/nginx/error.log\n    level: warn\n  worker_connections: 1024\n  http_enable: true\n  http_settings:\n    access_log_format:\n      - name: main\n        format: |-\n          \'$remote_addr - $remote_user [$time_local] "$request" \'\n          \'$status $body_bytes_sent "$http_referer" \'\n          \'"$http_user_agent" "$http_x_forwarded_for"\'\n    access_log_location:\n      - name: main\n        location: /var/log/nginx/access.log\n    tcp_nopush: true\n    tcp_nodelay: true\n    keepalive_timeout: 65\n    cache: false\n    rate_limit: false\n    keyval: false\n    #server_tokens: "off"\n  http_global_autoindex: false\n  #http_custom_options: []\n  stream_enable: false\n  #stream_custom_options: []\n  #auth_request_http: /auth\n  #auth_request_set_http:\n    #name: $auth_user\n    #value: $upstream_http_x_user\n\n# Enable creating dynamic templated NGINX HTTP configuration files.\n# Defaults will not produce a valid configuration. Instead they are meant to showcase\n# the options available for templating. Each key represents a new configuration file.\nnginx_http_template_enable: false\nnginx_http_template:\n  default:\n    template_file: http/default.conf.j2\n    conf_file_name: default.conf\n    conf_file_location: /etc/nginx/conf.d/\n    servers:\n      server1:\n        listen:\n          listen_localhost:\n            ip: localhost # Wrap in square brackets for IPv6 addresses\n            port: 8081\n            opts: [] # Listen opts like http2 which will be added (ssl is automatically added if you specify \'ssl:\').\n        server_name: localhost\n        include_files: []\n        error_page: /usr/share/nginx/html\n        access_log:\n          - name: main\n            location: /var/log/nginx/access.log\n        error_log:\n          location: /var/log/nginx/error.log\n          level: warn\n        root: /usr/share/nginx/html\n        https_redirect: false\n        autoindex: false\n        auth_basic: null\n        auth_basic_user_file: null\n        try_files: $uri $uri/index.html $uri.html =404\n        #auth_request: /auth\n        #auth_request_set:\n          #name: $auth_user\n          #value: $upstream_http_x_user\n        client_max_body_size: 1m\n        proxy_hide_headers: [] # A list of headers which shouldn\'t be passed to the application\n        add_headers:\n          strict_transport_security:\n            name: Strict-Transport-Security\n            value: max-age=15768000; includeSubDomains\n            always: true\n          #header_name:\n            #name: Header-X\n            #value: Value-X\n            #always: false\n        ssl:\n          cert: /etc/ssl/certs/default.crt\n          key: /etc/ssl/private/default.key\n          dhparam: /etc/ssl/private/dh_param.pem\n          protocols: TLSv1 TLSv1.1 TLSv1.2\n          ciphers: HIGH:!aNULL:!MD5\n          prefer_server_ciphers: true\n          session_cache: none\n          session_timeout: 5m\n          disable_session_tickets: false\n          trusted_cert: /etc/ssl/certs/root_CA_cert_plus_intermediates.crt\n          stapling: true\n          stapling_verify: true\n        #custom_options: []\n        web_server:\n          locations:\n            default:\n              location: /\n              include_files: []\n              proxy_hide_headers: [] # A list of headers which shouldn\'t be passed to the application\n              add_headers:\n                strict_transport_security:\n                  name: Strict-Transport-Security\n                  value: max-age=15768000; includeSubDomains\n                  always: true\n                #header_name:\n                  #name: Header-X\n                  #value: Value-X\n                  #always: false\n              html_file_location: /usr/share/nginx/html\n              html_file_name: index.html\n              autoindex: false\n              auth_basic: null\n              auth_basic_user_file: null\n              try_files: $uri $uri/index.html $uri.html =404\n              #auth_request: /auth\n              #auth_request_set:\n                #name: $auth_user\n                #value: $upstream_http_x_user\n              client_max_body_size: 1m\n              #returns:\n                #return302:\n                  #code: 302\n                  #url: https://sso.somehost.local/?url=https://$http_host$request_uri\n              #custom_options: []\n          http_demo_conf: false\n        reverse_proxy:\n          locations:\n            backend:\n              location: /\n              include_files: []\n              proxy_hide_headers: [] # A list of headers which shouldn\'t be passed to the application\n              add_headers:\n                strict_transport_security:\n                  name: Strict-Transport-Security\n                  value: max-age=15768000; includeSubDomains\n                  always: true\n                #header_name:\n                  #name: Header-X\n                  #value: Value-X\n                  #always: false\n              proxy_connect_timeout: null\n              proxy_pass: http://backend\n              #rewrites:\n              # - /foo(.*) /$1 break\n              #proxy_pass_request_body: off\n              #allows:\n              # - 192.168.1.0/24\n              #denies:\n              # - all\n              proxy_set_header:\n                header_host:\n                  name: Host\n                  value: $host\n                header_x_real_ip:\n                  name: X-Real-IP\n                  value: $remote_addr\n                header_x_forwarded_for:\n                  name: X-Forwarded-For\n                  value: $proxy_add_x_forwarded_for\n                header_x_forwarded_proto:\n                  name: X-Forwarded-Proto\n                  value: $scheme\n                #header_upgrade:\n                  #name: Upgrade\n                  #value: $http_upgrade\n                #header_connection:\n                  #name: Connection\n                  #value: "Upgrade"\n                #header_random:\n                  #name: RandomName\n                  #value: RandomValue\n              #internal: false\n              #proxy_store: off\n              #proxy_store_acccess: user:rw\n              proxy_read_timeout: null\n              proxy_send_timeout: null\n              proxy_ssl:\n                cert: /etc/ssl/certs/proxy_default.crt\n                key: /etc/ssl/private/proxy_default.key\n                trusted_cert: /etc/ssl/certs/proxy_ca.crt\n                protocols: TLSv1 TLSv1.1 TLSv1.2\n                ciphers: HIGH:!aNULL:!MD5\n                verify: false\n                verify_depth: 1\n                session_reuse: true\n              proxy_cache: backend_proxy_cache\n              proxy_cache_valid:\n                - code: 200\n                  time: 10m\n                - code: 301\n                  time: 1m\n              proxy_temp_path:\n                path: /var/cache/nginx/proxy/backend/temp\n              proxy_cache_lock: false\n              proxy_cache_min_uses: 3\n              proxy_cache_revalidate: false\n              proxy_cache_use_stale:\n                - http_403\n                - http_404\n              proxy_ignore_headers:\n                - Vary\n                - Cache-Control\n              proxy_cookie_path:\n                path: /web/\n                replacement: /\n              proxy_buffering: false\n              proxy_http_version: 1.0\n              websocket: false\n              auth_basic: null\n              auth_basic_user_file: null\n              try_files: $uri $uri/index.html $uri.html =404\n              #auth_request: /auth\n              #auth_request_set:\n                #name: $auth_user\n                #value: $upstream_http_x_user\n              #returns:\n                #return302:\n                  #code: 302\n                  #url: https://sso.somehost.local/?url=https://$http_host$request_uri\n              #custom_options: []\n          health_check_plus: false\n        returns:\n          return301:\n            location: /\n            code: 301\n            value: http://$host$request_uri\n    proxy_cache:\n      proxy_cache_path:\n        - path: /var/cache/nginx/proxy/backend\n          keys_zone:\n            name: backend_proxy_cache\n            size: 10m\n          levels: "1:2"\n          max_size: 10g\n          inactive: 60m\n          use_temp_path: true\n      proxy_temp_path:\n        path: /var/cache/nginx/proxy/temp\n      proxy_cache_valid:\n        - code: 200\n          time: 10m\n        - code: 301\n          time: 1m\n      proxy_cache_lock: true\n      proxy_cache_min_uses: 5\n      proxy_cache_revalidate: true\n      proxy_cache_use_stale:\n        - error\n        - timeout\n      proxy_ignore_headers:\n        - Expires\n    upstreams:\n      upstream1:\n        name: backend\n        lb_method: least_conn\n        zone_name: backend_mem_zone\n        zone_size: 64k\n        sticky_cookie: false\n        servers:\n          server1:\n            address: localhost\n            port: 8081\n            weight: 1\n            health_check: max_fails=1 fail_timeout=10s\n        #custom_options: []\n      #custom_options: []\n\n# Enable NGINX status data.\n# Will enable \'stub_status\' in NGINX Open Source and \'status\' in NGINX Plus.\n# Note - \'status\' has been deprecated since NGINX Plus R13.\n# Default is false.\nnginx_status_enable: false\nnginx_status_location: /etc/nginx/conf.d/stub_status.conf\nnginx_status_port: 80\n\n# Enable NGINX Plus REST API, write access to the REST API, and NGINX Plus dashboard.\n# Requires NGINX Plus.\n# Default is false.\nnginx_rest_api_enable: false\nnginx_rest_api_template_file: http/api.conf.j2\nnginx_rest_api_file_location: /etc/nginx/conf.d/api.conf\nnginx_rest_api_port: 80\nnginx_rest_api_write: false\nnginx_rest_api_dashboard: false\n\n# Enable creating dynamic templated NGINX stream configuration files.\n# Defaults will not produce a valid configuration. Instead they are meant to showcase\n# the options available for templating. Each key represents a new configuration file.\nnginx_stream_template_enable: false\nnginx_stream_template:\n  default:\n    template_file: stream/default.conf.j2\n    conf_file_name: default.conf\n    conf_file_location: /etc/nginx/conf.d/stream/\n    network_streams:\n      default:\n        listen_address: localhost\n        listen_port: 80\n        udp_enable: false\n        include_files: []\n        proxy_pass: backend\n        proxy_timeout: 3s\n        proxy_connect_timeout: 1s\n        proxy_protocol: false\n        proxy_ssl:\n          cert: /etc/ssl/certs/proxy_default.crt\n          key: /etc/ssl/private/proxy_default.key\n          trusted_cert: /etc/ssl/certs/proxy_ca.crt\n          protocols: TLSv1 TLSv1.1 TLSv1.2\n          ciphers: HIGH:!aNULL:!MD5\n          verify: false\n          verify_depth: 1\n          session_reuse: true\n        health_check_plus: false\n        #custom_options: []\n    upstreams:\n      upstream1:\n        name: backend\n        lb_method: least_conn\n        zone_name: backend\n        zone_size: 64k\n        sticky_cookie: false\n        servers:\n          server1:\n            address: localhost\n            port: 8080\n            weight: 1\n            health_check: max_fails=1 fail_timeout=10s\n        #custom_options: []\n    #custom_options: []\n```\n\nDependencies\n------------\n\nNone\n\nExample Playbook\n----------------\n\nThis is a sample playbook file for deploying the Ansible Galaxy NGINX role in a localhost and installing the open source version of NGINX.\n\n```yaml\n---\n- hosts: localhost\n  become: true\n  roles:\n    - role: nginxinc.nginx\n```\n\nThis is a sample playbook file for deploying the Ansible Galaxy NGINX role to a dynamic inventory containing the `nginx` tag.\n\n```yaml\n---\n- hosts: tag_nginx\n  remote_user: root\n  roles:\n    - role: nginxinc.nginx\n```\n\nThis is a sample playbook file for deploying the Ansible Galaxy NGINX role in a localhost and installing the open source version of NGINX as a simple web server.\n\n```yaml\n---\n- hosts: localhost\n  become: true\n  roles:\n    - role: nginxinc.nginx\n  vars:\n    nginx_http_template_enable: true\n    nginx_http_template:\n      default:\n        template_file: http/default.conf.j2\n        conf_file_name: default.conf\n        conf_file_location: /etc/nginx/conf.d/\n        port: 80\n        server_name: localhost\n        error_page: /usr/share/nginx/html\n        autoindex: false\n        web_server:\n          locations:\n            default:\n              location: /\n              html_file_location: /usr/share/nginx/html\n              html_file_name: index.html\n              autoindex: false\n          http_demo_conf: false\n```\n\nThis is a sample playbook file for deploying the Ansible Galaxy NGINX role in a localhost and installing the open source version of NGINX as a reverse proxy.\n\n```yaml\n---\n- hosts: localhost\n  become: true\n  roles:\n    - role: nginxinc.nginx\n  vars:\n    nginx_http_template_enable: true\n    nginx_http_template:\n      default:\n        template_file: http/default.conf.j2\n        conf_file_name: default.conf\n        conf_file_location: /etc/nginx/conf.d/\n        servers:\n          server1:  \n            listen:\n              listen_localhost:\n                #ip: 0.0.0.0\n                port: 80\n                opts:\n                  - default_server\n            server_name: localhost\n            error_page: /usr/share/nginx/html\n            autoindex: false\n            reverse_proxy:\n              locations:\n                frontend:\n                  location: /\n                  proxy_pass: http://frontend_servers\n                backend:\n                  location: /backend\n                  proxy_pass: http://backend_servers\n        upstreams:\n          upstream_1:\n            name: frontend_servers\n            lb_method: least_conn\n            zone_name: frontend\n            zone_size: 64k\n            sticky_cookie: false\n            servers:\n              frontend_server_1:\n                address: 0.0.0.0\n                port: 8081\n                weight: 1\n                health_check: max_fails=3 fail_timeout=5s\n          upstream_2:\n            name: backend_servers\n            lb_method: least_conn\n            zone_name: backend\n            zone_size: 64k\n            sticky_cookie: false\n            servers:\n              backend_server_1:\n                address: 0.0.0.0\n                port: 8082\n                weight: 1\n                health_check: max_fails=3 fail_timeout=5s\n      frontend:\n        template_file: http/default.conf.j2\n        conf_file_name: frontend_default.conf\n        conf_file_location: /etc/nginx/conf.d/\n        servers:\n          server1:\n            listen:\n              listen_localhost:\n                ip: 0.0.0.0\n                port: 8081\n                opts: []\n            server_name: localhost\n            error_page: /usr/share/nginx/html\n            autoindex: false\n            web_server:\n              locations:\n                frontend_site:\n                  location: /\n                  proxy_hide_headers:\n                    - X-Powered-By\n                  html_file_location: /usr/share/nginx/html\n                  html_file_name: index.html\n                  autoindex: false\n              http_demo_conf: false\n      backend:\n        template_file: http/default.conf.j2\n        conf_file_name: backend_default.conf\n        conf_file_location: /etc/nginx/conf.d/\n        servers:\n          server1:\n            listen:\n              listen_localhost:\n                ip: 0.0.0.0\n                port: 8082\n                opts: []\n            server_name: localhost\n            error_page: /usr/share/nginx/html\n            autoindex: false\n            web_server:\n              locations:\n                backend_site:\n                  location: /\n                  html_file_location: /usr/share/nginx/html\n                  html_file_name: index.html\n                  autoindex: false\n              http_demo_conf: false\n```\n\n\nThis is a sample playbook file for deploying the Ansible Galaxy NGINX role in a localhost and installing NGINX Plus.\n\n```yaml\n---\n- hosts: localhost\n  become: true\n  roles:\n    - role: nginxinc.nginx\n  vars:\n    nginx_type: plus\n```\n\nThis is a sample playbook file for deploying the Ansible Galaxy NGINX role in a localhost to install NGINX Plus and the NGINX Controller agent.\n\n```yaml\n- hosts: localhost\n  become: true\n  roles:\n    - role: nginxinc.nginx\n  vars:\n    nginx_type: plus\n    nginx_rest_api_enable: true\n    nginx_rest_api_port: 80\n    nginx_rest_api_write: true\n    nginx_controller_enable: true\n    nginx_controller_api_key: <API_KEY_HERE>\n    nginx_controller_api_endpoint: https://<FQDN>/1.4\n```\n\nThis is a sample playbook file for deploying the Ansible Galaxy NGINX role in a localhost to install NGINX Unit and the PHP/Perl NGINX Unit language modules.\n\n```yaml\n---\n- hosts: localhost\n  become: true\n  roles:\n    - role: nginxinc.nginx\n  vars:\n    nginx_enable: false\n    nginx_unit_enable: true\n    nginx_unit_modules:\n      - unit-php\n      - unit-perl\n```\n\nTo run any of the above sample playbooks create a `setup-nginx.yml` file and paste the contents. Executing the Ansible Playbook is then as simple as executing `ansible-playbook setup-nginx.yml`.\n\nAlternatively, you can also clone this repository instead of installing it from Ansible Galaxy. If you decide to do so, replace the role variable in the previous sample playbooks from `nginxinc.nginx` to `ansible-role-nginx`.\n\nLicense\n-------\n\n[Apache License, Version 2.0](https://github.com/nginxinc/ansible-role-nginx/blob/master/LICENSE)\n\nAuthor Information\n------------------\n\n[Alessandro Fael Garcia](https://github.com/alessfg)\n\n[Grzegorz Dzien](https://github.com/gdzien)\n\n&copy; [NGINX, Inc.](https://www.nginx.com/) 2018 - 2019\n'