b'# Drill\n\n[![](http://meritbadge.herokuapp.com/drill?ts=1)](https://crates.io/crates/drill)\n![](https://travis-ci.com/fcsonline/drill.svg?branch=master)\n\nDrill is a HTTP load testing application written in Rust. The main goal\nfor this project is to build a really lightweight tool as alternative to other\nthat require JVM and other stuff.\n\nYou can write benchmark files, in YAML format, describing all the stuff you\nwant to test.\n\nIt was inspired by [Ansible](http://docs.ansible.com/ansible/playbooks_intro.html)\nsyntax because it is really easy to use and extend.\n\nHere is an example for **benchmark.yml**:\n\n```yaml\n---\n\nthreads: 4\nbase: \'http://localhost:9000\'\niterations: 5\nrampup: 2\n\nplan:\n  - name: Include comments\n    include: comments.yml\n\n  - name: Fetch users\n    request:\n      url: /api/users.json\n\n  - name: Fetch organizations\n    request:\n      url: /api/organizations\n\n  - name: Fetch account\n    request:\n      url: /api/account\n    assign: foo\n\n  - name: Fetch manager user\n    request:\n      url: /api/users/{{ foo.manager_id }}\n\n  - name: Assign values\n    assign:\n      key: bar\n      value: "2"\n\n  - name: Fetch user from assign\n    request:\n      url: /api/users/{{ bar }}\n\n  - name: Fetch some users\n    request:\n      url: /api/users/{{ item }}\n    with_items:\n      - 70\n      - 73\n      - 75\n\n  - name: Fetch some users by hash\n    request:\n      url: /api/users/{{ item.id }}\n    with_items:\n      - { id: 70 }\n      - { id: 73 }\n      - { id: 75 }\n\n  - name: Fetch some users from CSV\n    request:\n      url: /api/users/contacts/{{ item.id }}\n    with_items_from_csv: ./fixtures/users.csv\n\n  - name: Fetch no relative url\n    request:\n      url: http://localhost:9000/api/users.json\n\n  - name: Support for POST method\n    request:\n      url: /api/users\n      method: POST\n      body: foo=bar&arg={{ bar }}\n\n  - name: Login user\n    request:\n      url: /login?user=example&password=3x4mpl3\n\n  - name: Fetch counter\n    request:\n      url: /counter\n    assign: memory\n\n  - name: Fetch counter\n    request:\n      url: /counter\n    assign: memory\n\n  - name: Fetch endpoint\n    request:\n      url: /?counter={{ memory.counter }}\n\n  - name: Reset counter\n    request:\n      method: DELETE\n      url: /\n\n  - name: Custom headers\n    request:\n      url: /admin\n      headers:\n        Authorization: Basic aHR0cHdhdGNoOmY=\n        X-Foo: Bar\n```\n\nAs you can see, you can play with interpolations in different ways. This\nwill let you specify a benchmark with different requests and\ndependencies between them.\n\nIf you want to know more about the benchmark file syntax, [read this](./SYNTAX.md)\n\n## Install\n\nThe easiest way right now is to install with [cargo](https://doc.rust-lang.org/cargo/getting-started/installation.html):\n\n```\ncargo install drill\ndrill --benchmark benchmark.yml --stats\n```\n\nor download the source code and compile it:\n\n```\ngit clone git@github.com:fcsonline/drill.git && cd drill\ncargo build --release\n./target/release/drill --benchmark benchmark.yml --stats\n```\n\n**Note:** You will need to install `libssl-dev` and `pkg-config` packages.\n\n## Demo\n\n[![demo](https://asciinema.org/a/164615.png)](https://asciinema.org/a/164615?autoplay=1)\n\n## Features\n\nThis is the list of all features supported by the current version of `drill`:\n\n- **Multi thread:** run your benchmarks setting as many concurrent threads as you want.\n- **Multi iterations:** specify the number of iterations you want to run the benchmark.\n- **Ramp-up:** specify the the amount of time it will take `drill` to start all threads.\n- **Dynamic urls:** execute requests with dynamic interpolations in the url, like `/api/users/{{ item }}`\n- **Dynamic headers:** execute requests with dynamic headers. Example: [headers.yml](./example/headers.yml)\n- **Request dependencies:** create dependencies between requests with `assign` and url interpolations.\n- **Split files:** organize your benchmarks in multiple files and include them.\n- **CSV support:** read CSV files and build N requests fill dynamic interpolations with CSV data.\n- **HTTP methods:** build request with different http methods like GET, POST, PUT, PATCH, HEAD or DELETE.\n- **Cookie support:** create benchmarks with sessions because cookies are propagates between requests.\n- **Stats:** get nice statistics about all the requests. Example: [cookies.yml](./example/cookies.yml)\n- **Thresholds:** compare the current benchmark performance against a stored one session and fail if a threshold is exceeded.\n\n## Test it\n\nGo to the `example` directory and you\'ll find a [README](./example) how\nto test it in a safe environment.\n\n**Disclaimer**: We really recommend not to run intensive benchmarks against\nproduction environments.\n\n## Command line interface\n\nFull list of cli options, which is available under `drill --help`\n\n```\ndrill 0.5.0\nHTTP load testing application written in Rust inspired by Ansible syntax\n\nUSAGE:\n    drill [OPTIONS] --benchmark <benchmark>\n\nFLAGS:\n    -h, --help       Prints help information\n        --no-check-certificate    Disables SSL certification check. (Not recommended)\n    -s, --stats      Shows request statistics\n    -q, --quiet      Skips output of individual request statistics\n    -n, --nanosec    Shows statistics in nanoseconds\n    -V, --version    Prints version information\n\nOPTIONS:\n    -b, --benchmark <benchmark>    Sets the benchmark file\n    -c, --compare <compare>        Sets a compare file\n    -r, --report <report>          Sets a report file\n    -t, --threshold <threshold>    Sets a threshold value in ms amongst the compared file\n\n```\n\n## Roadmap\n\n- Complete and improve the interpolation engine\n- Add writing to a file support\n\n## Contribute\n\nThis project started as a side project to learn Rust, so I\'m sure that is full\nof mistakes and areas to be improve. If you think you can tweak the code to\nmake it better, I\'ll really appreciate a pull request. ;)\n\n'