b'# Juniper Ansible roles for Junos\n\n## About\n\nJuniper Networks supports Ansible for managing devices running\nthe Junos operating system (Junos OS). This role is hosted on the Ansible Galaxy website under\nthe role [Juniper.junos](https://galaxy.ansible.com/Juniper/junos/). The Juniper.junos role includes a set of Ansible\nmodules that perform specific operational and configuration tasks on devices running Junos OS. These tasks include:\ninstalling and upgrading Junos OS, provisioning new Junos devices in the network, loading configuration changes,\nretrieving information, and resetting, rebooting, or shutting down managed devices.  Please refer to the\n[INSTALLATION](#installation) section for instructions on installing this role.\n\n## Two Sets of Ansible Modules for Junos devices\n\nSince Ansible version >= 2.1, Ansible also natively includes\n[core modules for Junos](http://docs.ansible.com/ansible/list_of_network_modules.html#junos). The Junos modules included\nin Ansible core have names which begin with the prefix `junos_`. The Junos modules included in this Juniper.junos role\nhave names which begin with the prefix `juniper_junos_`. These two sets of Junos modules can coexist on the same\nAnsible control machine, and an Ansible play may invoke a module from either (or both) sets. Juniper Networks recommends\nusing the modules in this role when writing new playbooks that manage Junos devices.\n\n## Overview of Modules\n\nThis Juniper.junos role includes the following modules:\n\n- **juniper_junos_command** \xe2\x80\x94 Execute one or more CLI commands on a Junos device.\n- **juniper_junos_config** \xe2\x80\x94 Manipulate the configuration of a Junos device.\n- **juniper_junos_facts** \xe2\x80\x94 Retrieve facts from a Junos device.\n- **juniper_junos_jsnapy** \xe2\x80\x94 Execute JSNAPy tests on a Junos device.\n- **juniper_junos_ping** \xe2\x80\x94 Execute ping from a Junos device.\n- **juniper_junos_pmtud** \xe2\x80\x94 Perform path MTU discovery from a Junos device to a destination.\n- **juniper_junos_rpc** \xe2\x80\x94 Execute one or more NETCONF RPCs on a Junos device.\n- **juniper_junos_software** \xe2\x80\x94 Install software on a Junos device.\n- **juniper_junos_srx_cluster** \xe2\x80\x94 Add or remove SRX chassis cluster configuration.\n- **juniper_junos_system** \xe2\x80\x94 Initiate operational actions on the Junos system.\n- **juniper_junos_table** \xe2\x80\x94 Retrieve data from a Junos device using a PyEZ table/view.\n\n### Important Changes\n\nSignificant changes to the modules in the Juniper.junos role were made between versions 1.4.3 and 2.0.0.\nIn versions <= 1.4.3 of the Juniper.junos role, the modules used different module and argument names. Versions >= 2.0.0\nof the Juniper.junos role provide backwards compatibility with playbooks written to prior versions of the Juniper.junos\nrole. If a playbook worked with a prior version of the Juniper.junos role, it should\ncontinue to work on the current version without requiring modifications to the playbook. However, these older module and\nargument names are no longer present in the current documentation. You may reference previous module and argument names\nby referring directly to the\n[1.4.3 version of the Juniper.junos role documentation](http://junos-ansible-modules.readthedocs.io/en/1.4.3/).\n\n### Overview of Plugins\n\nIn addition to the modules listed above, a callback_plugin `jsnapy` is available for the module `juniper_junos_jsnapy`.\n\nThe callback_plugin `jsnapy` helps to print on the screen additional information regarding jsnapy failed tests.\nFor each failed test, a log will be printed after the RECAP of the playbook as shown in this example:\n\n    PLAY RECAP *********************************************************************\n    qfx10002-01                : ok=3    changed=0    unreachable=0    failed=1\n    qfx10002-02                : ok=3    changed=0    unreachable=0    failed=1\n    qfx5100-01                 : ok=1    changed=0    unreachable=0    failed=1\n\n    JSNAPy Results for: qfx10002-01 ************************************************\n    Value of \'peer-state\' not \'is-equal\' at \'//bgp-information/bgp-peer\' with {"peer-as": "65200", "peer-state": "Active", "peer-address": "100.0.0.21"}\n    Value of \'peer-state\' not \'is-equal\' at \'//bgp-information/bgp-peer\' with {"peer-as": "60021", "peer-state": "Idle", "peer-address": "192.168.0.1"}\n    Value of \'oper-status\' not \'is-equal\' at \'//interface-information/physical-interface[normalize-space(admin-status)=\'up\' and logical-interface/address-family/address-family-name ]\' with {"oper-status": "down", "name": "et-0/0/18"}\n\n    JSNAPy Results for: qfx10002-02 ************************************************\n    Value of \'peer-state\' not \'is-equal\' at \'//bgp-information/bgp-peer\' with {"peer-as": "65200", "peer-state": "Active", "peer-address": "100.0.0.21"}\n\nThe `jsnapy` plugin is currently in **Experimental** stage, please provide feedback.\n\nCallback plugins are not activated by default. They must be manually added to the Ansible\nconfiguration file under the `[defaults]` section using the variable `callback_whitelist`. Specifically, these lines\nshould be added to the Ansible configuration file in order to allow the jsnapy callback plugin:\n\n    [defaults]\n    callback_whitelist = jsnapy\n\n## DOCUMENTATION\n\n[Official Juniper documentation](http://www.juniper.net/techpubs/en_US/release-independent/junos-ansible/information-products/pathway-pages/index.html) (detailed information, including examples)\n\n[Ansible style documentation](http://junos-ansible-modules.readthedocs.org)\n\n## INSTALLATION\n\nYou must have the [DEPENDENCIES](#dependencies) installed on your system.  \n\n### NOTICES\n\n#### Ubuntu 14.04\n\nIf you\'re dealing with Ubuntu 14.04 and faced following error during the installation, it\'s because the system python which used by Ubuntu 14.04 is locked to 2.7.6 till EOL, as a result, please consider to skip galaxy certification process by appending `-c` option of ansible-galaxy. i.e. `ansible-galaxy install Juniper.junos -c`\n\n    [WARNING]: - Juniper.junos was NOT installed successfully: Failed to get data\n    from the API server (https://galaxy.ansible.com/api/): Failed to validate the\n    SSL certificate for galaxy.ansible.com:443. Make sure your managed systems have\n    a valid CA certificate installed. If the website serving the url uses SNI you\n    need python >= 2.7.9 on your managed machine  (the python executable used\n    (/usr/bin/python) is version: 2.7.6 (default, Nov 23 2017, 15:49:48) [GCC\n    4.8.4]) or you can install the `urllib3`, `pyOpenSSL`, `ndg-httpsclient`, and\n    `pyasn1` python modules to perform SNI verification in python >= 2.6. You can\n    use validate_certs=False if you do not need to confirm the servers identity but\n    this is unsafe and not recommended. Paths checked for this platform:\n    /etc/ssl/certs, /etc/pki/ca-trust/extracted/pem, /etc/pki/tls/certs, /usr/share\n    /ca-certificates/cacert.org, /etc/ansible. The exception msg was: hostname\n    u\'galaxy.ansible.com\' doesn\'t match either of\n    \'*.c1e4.galaxy.openshiftapps.com\', \'c1e4.galaxy.openshiftapps.com\'.\n\n    ERROR! - you can use --ignore-errors to skip failed roles and finish processing the list.\n\n### MacOS Mojave and newer\n\nIn MacOS Mojave and newer (>=10.14), ssh keys created with the system `ssh-keygen` are created using the newer \'OPENSSH\' key format, even when specifying `-t rsa` during creation. This directly affects the usage of ssh keys, particularly when using the `ssh_private_key_file`. To create/convert/check keys, follow these steps:\n\n- Create a new RSA key: `ssh-keygen -m PEM -t rsa -b 4096`\n- Check existing keys: `head -n1 ~/.ssh/some_private_key` RSA keys will be `-----BEGIN RSA PRIVATE KEY-----` and OPENSSH keys will be `-----BEGIN OPENSSH PRIVATE KEY-----`\n- Convert an OPENSSH key to an RSA key: `ssh-keygen -p -m PEM -f ~/.ssh/some_key`\n\n### Ansible Galaxy Role\n\nTo download the latest released version of the junos role to the Ansible\nserver, execute the ansible-galaxy install command, and specify **Juniper.junos**.\n\n```bash\n[root@ansible-cm]# ansible-galaxy install Juniper.junos\n- downloading role \'junos\', owned by Juniper\n- downloading role from https://github.com/Juniper/ansible-junos-stdlib/archive/1.3.1.tar.gz\n- extracting Juniper.junos to /usr/local/etc/ansible/roles/Juniper.junos\n- Juniper.junos was installed successfully\n```\n\nYou can also use the ansible-galaxy install command to install the latest\ndevelopment version of the junos role directly from GitHub.\n\n```bash\nsudo ansible-galaxy install git+https://github.com/Juniper/ansible-junos-stdlib.git,,Juniper.junos\n```\n\n### Git clone\n\nFor testing you can `git clone` this repo and run the `env-setup` script in the repo directory:\n\n```bash\nuser@ansible-junos-stdlib> source env-setup\n```\n\nThis will set your `$ANSIBLE_LIBRARY` variable to the repo location and the installed Ansible library path.  For example:\n\n```bash\n$ echo $ANSIBLE_LIBRARY\n/home/jeremy/Ansible/ansible-junos-stdlib/library:/usr/share/ansible\n```\n\n### Docker\n\nTo run this as a Docker container, which includes JSNAPy and PyEZ, simply pull it from the Docker hub and run it. The following will pull the latest image and run it in an interactive ash shell.\n\n```bash\ndocker run -it --rm juniper/pyez-ansible ash\n```\n\nAlthough, you\'ll probably want to bind mount a host directory (perhaps the directory containing your playbooks and associated files). The following will bind mount the current working directory and start the ash shell.\n\n```bash\ndocker run -it --rm -v $PWD:/project juniper/pyez-ansible ash\n```\n\nYou can also use the container as an executable to run your playbooks. Let\'s assume we have a typical playbook structure as below:\n\n    example\n    |playbook.yml\n    |hosts\n    |-vars\n    |-templates\n    |-scripts\n\nWe can move to the example directory and run the playbook with the following command:\n\n```bash\ncd example/\ndocker run -it --rm -v $PWD:/playbooks juniper/pyez-ansible ansible-playbook -i hosts playbook.yml\n```\n\nYou may have noticed that the base command is almost always the same. We can also use an alias to save some keystrokes.\n\n```bash\nalias pb-ansible="docker run -it --rm -v $PWD:/project juniper/pyez-ansible ansible-playbook"\npb-ansible -i hosts playbook.yml\n```\n\n## Example Playbook\n\nThis example outlines how to use Ansible to install or upgrade the software image on a device running Junos OS.\n\n```yaml\n---\n- name: Install Junos OS\n  hosts: dc1\n  roles:\n    - Juniper.junos\n  connection: local\n  gather_facts: no\n  vars:\n    wait_time: 3600\n    pkg_dir: /var/tmp/junos-install\n    OS_version: 14.1R1.10\n    OS_package: jinstall-14.1R1.10-domestic-signed.tgz\n    log_dir: /var/log/ansible\n\n  tasks:\n    - name: Checking NETCONF connectivity\n      wait_for: host={{ inventory_hostname }} port=830 timeout=5\n    - name: Install Junos OS package\n      juniper_junos_software:\n        reboot: yes\n        version: "{{ OS_version }}"\n        package: "{{ pkg_dir }}/{{ OS_package }}"\n        logfile: "{{ log_dir }}/software.log"\n      register: sw\n      notify:\n        - wait_reboot\n\n  handlers:\n    - name: wait_reboot\n      wait_for: host={{ inventory_hostname }} port=830 timeout={{ wait_time }}\n      when: not sw.check_mode\n```\n\n## DEPENDENCIES\n\nThis modules requires the following to be installed on the Ansible control machine:\n\n- Python >= 2.7\n- [Ansible](http://www.ansible.com) 2.3 or later\n- Junos [py-junos-eznc](https://github.com/Juniper/py-junos-eznc) 2.1.7 or later\n- [jxmlease](https://github.com/Juniper/jxmlease) 1.0.1 or later\n\n## LICENSE\n\nApache 2.0\n\n## SUPPORT\n\nSupport for this Juniper.junos role is provided by the community and Juniper Networks. If you have an\nissue with a module in the Juniper.junos role, you may:\n\n- Open a [GitHub issue](https://github.com/Juniper/ansible-junos-stdlib/issues).\n- Post a question on our [Google Group](https://groups.google.com/forum/#!forum/junos-python-ez)\n- Email [jnpr-community-netdev@juniper.net](jnpr-community-netdev@juniper.net)\n- Open a [JTAC Case](https://www.juniper.net/casemanager/#/create)\n\nSupport for the Junos modules included in Ansible core is provided by Ansible. If you have an issue with an Ansible\ncore module you should open a [Github issue against the Ansible project](https://github.com/ansible/ansible/issues).\n\n## CONTRIBUTORS\n\nJuniper Networks is actively contributing to and maintaining this repo. Please contact\n[jnpr-community-netdev@juniper.net](jnpr-community-netdev@juniper.net) for any queries.\n\n*Contributors:*\n[Nitin Kumar](https://github.com/vnitinv), [Stacy W Smith](https://github.com/stacywsmith), [Stephen Steiner](https://github.com/ntwrkguru)\n\n*Former Contributors:*\n\n[Jeremy Schulman](https://github.com/jeremyschulman), [Rick Sherman](https://github.com/shermdog), [Damien Garros](https://github.com/dgarros), [David Gethings](https://github.com/dgjnpr)\n'