b'[![Build Status](https://travis-ci.org/GoogleCloudPlatform/magic-modules.svg?branch=master)](https://travis-ci.org/GoogleCloudPlatform/magic-modules)\n\n\n# Magic Modules\n\n<img src="images/magic-modules.svg" alt="Magic Modules Logo" width="300" align="right" />\n\n## Overview\n\nMagic Modules is a tool used to autogenerate support in a variety of open source DevOps\ntools for Google Cloud Platform. [GCP "resource"](https://cloud.google.com/docs/overview/#gcp_resources)\ndefinitions are encoded in a shared data file, and that data is used to fill in\ntool-specific templates across each of the tools Magic Modules\ngenerates.\n\nMagic Modules generates GCP support for:\n\n* Terraform\n* Ansible\n* InSpec\n\nIn addition, Magic Modules generates support for several companion\nfeatures/tools:\n\n* Terraform Google Inventory Mapper\n* Terraform in Cloud Shell\n\nImportantly, Magic Modules *isn\'t* full code generation. Every change is made\nmanually; more than a code generator, Magic Modules is a force multiplier for\ndevelopment. While many Magic Modules resources are defined exactly based on the\nGCP API, we use Magic Modules to preemptively solve issues across each tool by\nencoding our field-tested learnings from other tools in those definitions. In\neffect, an issue solved in one tool will be solved for each other tool.\n\n## Getting Started with Magic Modules\n\nWe\'ve prepared a codelab to introduce you to Magic Modules:\n\n[![Magic Modules Codelab](images/mm-codelab.png)](https://codelabs.developers.google.com/codelabs/magic-modules/index.html)\n\nIt will walk you through adding a GCP service as a product to Magic Modules.\nIt\'s more extensive than the contents of this README, and will help you if\nyou\'re interested in adding a new resource or if you\'re modifying generated ones.\n\nIf you\'re in this repo to modify a handwritten Terraform resource, or you just\nneed a refresher, you can read the shorter quickstart below.\n\n---\n\nYou can try out Magic Modules immediately with Open in Cloud Shell below; if\nyou\'re getting set up on a local workstation, this guide serves as a reference\nto help you get it set up.\n\n[![Open in Cloud Shell](http://gstatic.com/cloudssh/images/open-btn.svg)](https://console.cloud.google.com/cloudshell/open?git_repo=https://github.com/GoogleCloudPlatform/magic-modules&tutorial=TUTORIAL.md)\n\n### Requirements\n\nTo get started, you\'ll need:\n\n* Ruby 2.6.0\n  * You can use `rbenv` to manage your Ruby version(s)\n* [`Bundler`](https://github.com/bundler/bundler)\n  * This can be installed with `gem install bundler`\n* If you are getting "Too many open files" ulimit needs to be raised.\n  * Mac OSX: `ulimit -n 1000`\n\n### Preparing Magic Modules / One-time setup\n\nTo get started right away, use the bootstrap script with:\n\n```bash\n./tools/bootstrap\n```\n\n---\n\nOtherwise, follow the manual steps below:\n\nIf you\'re developing Ansible or Inspec, we use submodules to manage the Magic\nModules generated outputs:\n\n```\ngit submodule update --init\n```\n\nIf you\'re generating the Terraform providers (`google` and `google-beta`),\nyou\'ll need to check out the repo(s) you\'re generating in your GOPATH. For\nexample:\n\n```\ngit clone https://github.com/terraform-providers/terraform-provider-google.git $GOPATH/src/github.com/terraform-providers/terraform-provider-google\ngit clone https://github.com/terraform-providers/terraform-provider-google-beta.git $GOPATH/src/github.com/terraform-providers/terraform-provider-google-beta\n```\n\nMagic Modules won\'t work with old versions of the Terraform provider repos. If\nyou\'re encountering issues with vendoring and paths, make sure both MM and the\nTerraform provider are running on up to date copies of `master`.\n\nOnce you\'ve prepared the target folders for the tools, run the following to\nfinish getting Magic Modules set up by installing the Ruby gems it needs to run:\n\n```\nbundle install\n```\n\nNow, you can verify you\'re ready with:\n\n```bash\n./tools/doctor\n```\n\n### Generating downstream tools\n\nBefore making any changes, you can compile the "downstream" tool you\'re working\non by running the following command. If Magic Modules has been installed\ncorrectly, you\'ll get no errors when you run a command:\n\n```\nbundle exec compiler -a -v "ga" -e {{tool}} -o "{{output_folder}}"\n```\n\nGenerally, you\'ll want to generate into the same output; here\'s a reference of\ncommon commands\n\n{{tool}}  | {{output_folder}}\n----------|----------\nterraform | $GOPATH/src/github.com/terraform-providers/terraform-provider-google\nansible   | build/ansible\ninspec    | build/inspec\n\nFor example, to generate Terraform:\n\n```\nbundle exec compiler -a -v "ga" -e terraform -o "$GOPATH/src/github.com/terraform-providers/terraform-provider-google"\n```\n\nIt\'s worth noting that Magic Modules will only generate new files when ran\nlocally. The "Magician"- the Magic Modules CI system- handles deletion of old\nfiles when creating PRs.\n\n#### Terraform\'s `google-beta` provider\n\nTerraform is the only tool to handle Beta features right now; you can generate\n`google-beta` by running the following, substitution `"beta"` for the version\nand using the repository for the `google-beta` provider.\n\n```\nbundle exec compiler -a -v "beta" -e terraform -o "$GOPATH/src/github.com/terraform-providers/terraform-provider-google-beta"\n```\n\n### Making changes to resources\n\nOnce again, see the Open in Cloud Shell example above for an interactive example\nof making a Magic Modules change; this section will serve as a reference more\nthan a specific example.\n\nMagic Modules mirrors the GCP REST API; there are [products](https://github.com/GoogleCloudPlatform/magic-modules/blob/master/api/product.rb)\nsuch as Compute or Container (GKE) that contains [resources](https://github.com/GoogleCloudPlatform/magic-modules/blob/master/api/resource.rb),\n[GCP resources](https://cloud.google.com/docs/overview/#gcp_resources) such as\nCompute VM Instances or GKE Clusters.\n\nProducts are separate folders under [`products/`], and each folder contains a\nfile named `api.yaml` that contains the resources that make up the API\ndefinition.\n\nResources are made up of some metadata like their `"name"` in the API such as\nAddress or Instance, some additional metadata (see the fields in [resource.rb](https://github.com/GoogleCloudPlatform/magic-modules/blob/master/api/resource.rb)),\nand the meat of a resource, its fields. They\'re represented by `properties` in\nMagic Modules, an array of [types](https://github.com/GoogleCloudPlatform/magic-modules/blob/master/api/type.rb).\n\nAdding a new field to a resource in Magic Modules is often as easy as adding a\n`type` to the `properties` array for the resource. See [this example](https://github.com/GoogleCloudPlatform/magic-modules/pull/1126/files#diff-fb4f76e7d870258668a3beac48bf164c)\nwhere a field was added to all the tools (currently only Terraform) that support\nbeta fields.\n\n#### Tool-specific overrides\n\nWhile most small changes won\'t require fiddling with overrides, each tool has\n"overrides" when it needs to deviate from the definition in `api.yaml`. This is\noften minor differences- the naming of a field, or whether it\'s required or not.\n\nYou can find them under the folder for a product, with the name `{{tool}}.yaml`.\nFor example, Ansible\'s overrides for Cloud SQL are present at `products/sql/ansible.yaml`\n\nYou can find a full reference for each tool under `provider/{{tool}}/resource_override.rb`\nand `provider/{{tool}}/property_override.rb`, as well as some other tool-specific\nfunctionality.\n\n#### Making changes to handwritten files\n\nThe Google providers for Terraform have a large number of handwritten files,\nwritten before Magic Modules was used with them. While conversion is ongoing,\nmany resources are still managed by hand. You can modify handwritten files\nunder the `third_party/terraform` directory.\n\nFeatures that are only present in certain versions need to be "guarded" by\nwrapping those lines of code in version guards;\n\n```erb\n<% unless version == \'ga\' -%>\n  // beta-only code\n<% end -%>\n```\n\n### Testing your changes\n\nOnce you\'ve made changes to resource definition, you can run Magic Modules\nto generate changes to your tool; see "Generating downstream tools" above if\nyou need a refresher. Once it\'s generated, you should run the tool-specific\ntests as if you were submitting a PR against that tool.\n\nYou can run tests in the `{{output_folder}}` you generated the tool in.\nSee the following tool-specific documentation for more details on testing that\ntool;\n\nTool             | Testing Guide\n-----------------|--------------\nansible          | [instructions](https://docs.ansible.com/ansible/devel/dev_guide/testing.html)\ninspec           | [testing inspec-gcp](https://github.com/inspec/inspec-gcp/#test-inspec-gcp-resources)\nterraform        | [`google` provider testing guide](https://github.com/terraform-providers/terraform-provider-google/blob/master/.github/CONTRIBUTING.md#tests)\nterraform (beta) | [`google-beta` provider testing guide](https://github.com/terraform-providers/terraform-provider-google-beta/blob/master/.github/CONTRIBUTING.md#tests)\n\nDon\'t worry about testing every tool, only the primary tool you\'re making\nchanges against. The Magic Modules maintainers will ensure your changes work\nagainst each tool.\n\nIf your changes have unintended consequences in another tool, a reviewer will\ninstruct you to mark the field excluded or provide specific feedback on what\nchanges to make to the tool-specific overrides in order for them to work\ncorrectly.\n\n### Submitting a PR\n\nBefore creating a commit, if you\'ve modified any .rb files, make sure you run\n`rake test`! That will run rubocop to ensure that the code you\'ve written will\npass Travis.\n\nTo run rubocop automatically before committing, add a Git pre-commit hook with:\n\n```bash\ncp .github/pre-commit .git/hooks\n```\n\nOnce you\'ve created your commit(s), you can submit the code normally as a PR in\nthe GitHub UI. The PR template includes some instructions to make sure we\ngenerate good PR messages for the tools\' repo histories.\n\nOnce your PR is submitted, one of the Magic Modules maintainers will review it.\nThey\'ll look over the code before running the "Magician", the Magic Modules CI\nsystem that generates PRs against each tool. Each review pass, your reviewer\nwill run the Magician again to update the PRs against the tools.\n\nIf there are multiple tools affected, that first reviewer will be the "primary"\nreviewer, and for each other affected tool a maintainer for that specific tool\nwill make a pass. The primary reviewer will make it clear which other\nmaintainers need to review, and prompt them to review your code; you will\ncommunicate primarily with the first reviewer.\n\nEven when multiple tools are affected, this will generally be a quick look by\nthat maintainer with no changes needing to be made.\n\nOnce you\'ve gotten approvals from the primary reviewer and the reviewers for\nany affected tools, the primary reviewer will merge your changes.\n\n## Glossary\nThe maintainers of the repository will tend to use specific jargon to describe\nconcepts related to Magic Modules; here\'s a quick reference of what some of\nthose terms are.\n\nTerm          | Definition\n--------------|--------------\ntool          | One of the OSS DevOps projects Magic Modules generates GCP support in\nprovider      | Synonym for tool as referred to inside the codebase\ndownstream(s) | A PR created by the Magician against a tool\nupstream      | A PR created against Magic Modules or the Magic Modules repo\nThe Magician  | The Magic Modules CI system that drives the GitHub robot `modular-magician`\n'