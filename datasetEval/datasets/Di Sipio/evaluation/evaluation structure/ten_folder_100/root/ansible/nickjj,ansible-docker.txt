b'## What is ansible-docker? [![Build Status](https://secure.travis-ci.org/nickjj/ansible-docker.png)](http://travis-ci.org/nickjj/ansible-docker)\n\nIt is an [Ansible](http://www.ansible.com/home) role to:\n\n- Install Docker (editions, channels and version pinning are all supported)\n- Install Docker Compose using PIP (version pinning is supported)\n- Install the `docker` PIP package so Ansible\'s `docker_*` modules work\n- Manage Docker registry login credentials\n- Configure 1 or more users to run Docker without needing root access\n- Configure the Docker daemon\'s options and environment variables\n- Configure a cron job to run Docker clean up commands\n\n## Why would you want to use this role?\n\nIf you\'re like me, you probably love Docker. This role provides everything you\nneed to get going with a production ready Docker host.\n\nBy the way, if you don\'t know what Docker is, or are looking to become an expert\nwith it then check out\n[Dive into Docker: The Complete Docker Course for Developers](https://diveintodocker.com/?utm_source=ansibledocker&utm_medium=github&utm_campaign=readmetop).\n\n## Supported platforms\n\n- Ubuntu 16.04 LTS (Xenial)\n- Ubuntu 18.04 LTS (Bionic)\n- Debian 9 (Stretch)\n- Debian 10 (Buster)\n\n---\n\n*You are viewing the master branch\'s documentation which might be ahead of the\nlatest release. [Switch to the latest release](https://github.com/nickjj/ansible-docker/tree/v1.9.1).*\n\n---\n\n## Quick start\n\nThe philosophy for all of my roles is to make it easy to get going, but provide\na way to customize nearly everything.\n\n### What\'s configured by default?\n\nThe latest Docker CE and Docker Compose will be installed, Docker disk clean up\nwill happen once a week and Docker container logs will be sent to `journald`.\n\n### Example playbook\n\n```yml\n---\n\n# docker.yml\n\n- name: Example\n  hosts: "all"\n  become: true\n\n  roles:\n    - role: "nickjj.docker"\n      tags: ["docker"]\n```\n\nUsage: `ansible-playbook docker.yml`\n\n### Installation\n\n`$ ansible-galaxy install nickjj.docker`\n\n## Default role variables\n\n### Installing Docker\n\n#### Edition\n\nDo you want to use "ce" (community edition) or "ee" (enterprise edition)?\n\n```yml\ndocker__edition: "ce"\n```\n\n#### Channel\n\nDo you want to use the "stable", "edge", "testing" or "nightly" channels? You\ncan add more than one (order matters).\n\n```yml\ndocker__channel: ["stable"]\n```\n\n#### Version\n\n- When set to "", the current latest version of Docker will be installed\n- When set to a specific version, that version of Docker will be installed and pinned\n\n```yml\ndocker__version: ""\n\n# For example, pin it to 18.06.\ndocker__version: "18.06"\n\n# For example, pin it to a more precise version of 18.06.\ndocker__version: "18.06.1"\n```\n\n*Pins are set with `*` at the end of the package version so you will end up\ngetting minor and security patches unless you pin an exact version.*\n\n##### Upgrade strategy\n\n- When set to `"present"`, running this role in the future won\'t install newer\nversions (if available)\n- When set to `"latest"`, running this role in the future will install newer\nversions (if available)\n\n```yml\ndocker__state: "present"\n```\n\n##### Downgrade strategy\n\nThe easiest way to downgrade would be to uninstall the Docker package manually\nand then run this role afterwards while pinning whatever specific Docker version\nyou want.\n\n```sh\n# An ad-hoc Ansible command to stop and remove the Docker CE package on all hosts.\nansible all -m systemd -a "name=docker-ce state=stopped" \\\n  -m apt -a "name=docker-ce autoremove=true purge=true state=absent" -b\n```\n\n### Installing Docker Compose\n\nDocker Compose will get PIP installed inside of a Virtualenv. This is covered\nin detail in another section of this README file.\n\n#### Version\n\n- When set to "", the current latest version of Docker Compose will be installed\n- When set to a specific version, that version of Docker Compose will be installed\nand pinned\n\n```yml\ndocker__compose_version: ""\n\n# For example, pin it to 1.23.\ndocker__compose_version: "1.23"\n\n# For example, pin it to a more precise version of 1.23.\ndocker__compose_version: "1.23.2"\n```\n\n*Upgrade and downgrade strategies will be explained in the other section of this\nREADME.*\n\n### Configuring users to run Docker without root\n\nA list of users to be added to the `docker` group.\n\nKeep in mind this user needs to already exist, this role will not create it. If\nyou want to create users, check out my\n[user role](https://github.com/nickjj/ansible-user).\n\nThis role does not configure User Namespaces or any other security features\nby default. If the user you add here has SSH access to your server then you\'re\neffectively giving them root access to the server since they can run Docker\nwithout `sudo` and volume mount in any path on your file system.\n\nIn a controlled environment this is safe, but like anything security related\nit\'s worth knowing this up front. You can enable User Namespaces and any\nother options with the `docker__daemon_json` variable which is explained later.\n\n```yml\n# Try to use the sudo user by default, but fall back to root.\ndocker__users: ["{{ ansible_env.SUDO_USER | d(\'root\') }}"]\n\n# For example, if the user you want to set is different than the sudo user.\ndocker__users: ["admin"]\n```\n\n### Configuring Docker registry logins\n\nLogin to 1 or more Docker registries (such as the\n[Docker Hub](https://hub.docker.com/)).\n\n```yml\ndocker__registries:\n  - #registry_url: "https://index.docker.io/v1/"\n    username: "your_docker_hub_username"\n    password: "your_docker_hub_password"\n    #email: "your_docker_hub@emailaddress.com"\n    #reauthorize: false\n    #config_path: "$HOME/.docker/config.json"\n    #state: "present"\ndocker__registries: []\n```\n\n*Properties prefixed with \\* are required.*\n\n- `registry_url` defaults to `https://index.docker.io/v1/`\n- *`username` is your Docker registry username\n- *`password` is your Docker registry password\n- `email` defaults to not being used (not all registries use it)\n- `reauthorize` defaults to `false`, when `true` it updates your credentials\n- `config_path` defaults to `(ansible_env.PWD | d(\'/root\')) + \'/.docker/config.json\'`\n- `state` defaults to "present", when "absent" the login will be removed\n\n### Configuring the Docker daemon options (json)\n\nDefault Docker daemon options as they would appear in `/etc/docker/daemon.json`.\n\n```yml\ndocker__default_daemon_json: |\n  "log-driver": "journald"\n\n# Add your own additional daemon options without overriding the default options.\n# It follows the same format as the default options, and don\'t worry about\n# starting it off with a comma. The template will add the comma if needed.\ndocker__daemon_json: ""\n```\n\n### Configure the Docker daemon options (flags)\n\nFlags that are set when starting the Docker daemon cannot be changed in the\n`daemon.json` file. By default Docker sets `-H unix://` which means that option\ncannot be changed with the json options.\n\nAdd or change the starting Docker daemon flags by supplying them exactly how\nthey would appear on the command line.\n\n```yml\n# Each command line flag should be its own item in the list.\n#\n# Using a Docker version prior to 18.09?\n#   You must set `-H fd://` instead of `-H unix://`.\ndocker__daemon_flags:\n  - "-H unix://"\n```\n\n*If you don\'t supply some type of `-H` flag here, Docker will fail to start.*\n\n### Configuring the Docker daemon environment variables\n\n```yml\ndocker__daemon_environment: []\n\n# For example, here\'s how to set a couple of proxy environment variables.\ndocker__daemon_environment:\n  - "HTTP_PROXY=http://proxy.example.com:80"\n  - "HTTPS_PROXY=https://proxy.example.com:443"\n```\n\n### Configuring advanced systemd directives\n\nThis role lets the Docker package manage its own systemd unit file and adjusts\nthings like the Docker daemon flags and environment variables by using\nthe systemd override pattern.\n\nIf you know what you\'re doing, you can override or add to any of Docker\'s systemd\ndirectives by setting this variable. Anything you place in this string will be\nwritten to `/etc/systemd/system/docker.service.d/custom.conf` as is.\n\n```yml\ndocker__systemd_override: ""\n```\n\n### Configuring Docker related cron jobs\n\nBy default this will safely clean up disk space used by Docker every Sunday at\nmidnight.\n\n```yml\n# `a` removes unused images (useful in production).\n# `f` forces it to happen without prompting you to agree.\ndocker__cron_jobs_prune_flags: "af"\n\n# Control the schedule of the docker system prune.\ndocker__cron_jobs_prune_schedule: ["0", "0", "*", "*", "0"]\n\ndocker__cron_jobs:\n  - name: "Docker disk clean up"\n    job: "docker system prune -{{ docker__cron_jobs_prune_flags }} > /dev/null 2>&1"\n    schedule: "{{ docker__cron_jobs_prune_schedule }}"\n    cron_file: "docker-disk-clean-up"\n    #user: "{{ (docker__users | first) | d(\'root\') }}"\n    #state: "present"\n```\n\n*Properties prefixed with \\* are required.*\n\n- *`name` is the cron job\'s description\n- *`job` is the command to run in the cron job\n- *`schedule` is the [standard cron job](https://en.wikipedia.org/wiki/Cron#Overview)\nformat for every Sunday at midnight\n- *`cron_file` writes a cron file to `/etc/cron.d` instead of a user\'s individual crontab\n- `user` defaults to the first `docker__users` user or root if that\'s not available\n- `state` defaults to "present", when "absent" the cron file will be removed\n\n### Configuring the APT package manager\n\nDocker requires a few dependencies to be installed for it to work. You shouldn\'t\nhave to edit any of these variables.\n\n```yml\n# List of packages to be installed.\ndocker__package_dependencies:\n  - "apt-transport-https"\n  - "ca-certificates"\n  - "cron"\n  - "gnupg2"\n  - "software-properties-common"\n\n# The Docker GPG key id used to sign the Docker package.\ndocker__apt_key_id: "9DC858229FC7DD38854AE2D88D81803C0EBFCD88"\n\n# The Docker GPG key server address.\ndocker__apt_key_url: "https://download.docker.com/linux/{{ ansible_distribution | lower }}/gpg"\n\n# The Docker upstream APT repository.\ndocker__apt_repository: >\n  deb [arch=amd64]\n  https://download.docker.com/linux/{{ ansible_distribution | lower }}\n  {{ ansible_distribution_release }} {{ docker__channel | join (\' \') }}\n```\n\n### Installing Python packages with Virtualenv and PIP\n\n#### Configuring Virtualenv\n\nRather than pollute your server\'s version of Python, all PIP packages are\ninstalled into a Virtualenv of your choosing.\n\n```yml\ndocker__pip_virtualenv: "/usr/local/lib/docker/virtualenv"\n```\n\n#### Installing PIP and its dependencies\n\nThis role installs PIP because Docker Compose is installed with the\n`docker-compose` PIP package and Ansible\'s `docker_*` modules use the `docker`\nPIP package.\n\n```yml\n# This will attempt to install the correct version of PIP based on what your\n# configured Ansible Python interpreter is set to (ie. Python 2 or 3).\ndocker__pip_dependencies:\n  - "python-setuptools"\n  - "python{{ \'3\' if ansible_python.version.major == 3 else \'\' }}-pip"\n```\n\n#### Installing PIP packages\n\n```yml\ndocker__default_pip_packages:\n  - name: "docker"\n    state: "{{ docker__pip_docker_state }}"\n  - name: "docker-compose"\n    version: "{{ docker__compose_version }}"\n    path: "/usr/local/bin/docker-compose"\n    src: "{{ docker__pip_virtualenv + \'/bin/docker-compose\' }}"\n    state: "{{ docker__pip_docker_compose_state }}"\n\n# Add your own PIP packages with the same properties as above.\ndocker__pip_packages: []\n```\n\n*Properties prefixed with \\* are required.*\n\n- *`name` is the package name\n- `version` is the package version to be installed (or "" if this is not defined)\n- `path` is the destination path of the symlink\n- `src` is the source path to be symlinked\n- `state` defaults to "present", other values can be "forcereinstall" or "absent"\n\n##### PIP package state\n\n- When set to `"present"`, the package will be installed but not updated on\nfuture runs\n- When set to `"forcereinstall"`, the package will always be (re)installed and\nupdated on future runs\n- When set to `"absent"`, the package will be removed\n\n```yml\ndocker__pip_docker_state: "present"\ndocker__pip_docker_compose_state: "present"\n```\n\n#### Working with Ansible\'s `docker_*` modules\n\nThis role uses `docker_login` to login to a Docker registry, but you may also\nuse the other `docker_*` modules in your own roles. They are not going to work\nunless you instruct Ansible to use this role\'s Virtualenv.\n\nAt either the inventory, playbook or task level you\'ll need to set\n`ansible_python_interpreter: "/usr/bin/env python-docker"`. This works because\nthis role symlinks the Virtualenv\'s Python binary to `python-docker`.\n\nYou can look at this role\'s `docker_login` task as an example on how to do it\nat the task level.\n\n## License\n\nMIT\n'