b'# Ansible provisioner for Terraform\n\n[![CircleCI](https://circleci.com/gh/radekg/terraform-provisioner-ansible.svg?style=svg)](https://circleci.com/gh/radekg/terraform-provisioner-ansible)\n\nAnsible with Terraform 0.12.x - `remote` and `local` provisioners.\n\n## General overview\n\nThe purpose of the provisioner is to provide an easy method for running Ansible to configure hosts created with Terraform.\n\nThis provisioner, however, is not designed to handle all possible Ansible use cases. Lets consider what\'s possible and what\'s not possible with this provisioner.\n\nFor after provisioning, you may find the following Ansible module useful if you use AWS S3 for state storage: [terraform-state-ansible-module](https://github.com/radekg/terraform-state-ansible-module).\n\n### What\'s possible\n\n- `compute resource local provisioner`\n  - configured on a compute resource e.g. aws_instance, ibm_compute_vm_instance\n  - runs Ansible installed on the same machine where Terraform is executed\n  - the provisioner will create a temporary inventory and execute Ansible only against hosts created with Terraform `resource`\n  - If `count` is used with the compute resource and is greater than 1, the provisioner runs after each resource instance is created, passing the host information for that instance only. \n  - Ansible Vault password file / Vault ID files can be used\n  - the temporary inventory uses `ansible_connection=ssh`, the host `alias` is resolved from the `resource.connection` attribute, it is possible to specify an `ansible_host` using `plays.hosts`\n\n- `compute resource remote provisioner`\n  - configured on a compute resource e.g. aws_instance, ibm_compute_vm_instance\n  - runs Ansible on the hosts created with Terraform `resource`\n  - if Ansible is not installed on the newly created hosts, the provisioner can install one\n  - the provisioner will create a temporary inventory and execute Ansible only against hosts created with Terraform `resource`\n  - playbooks, roles, Vault password file / Vault ID files and the temporary inventory file will be uploaded to the each host prior to Ansible run\n  - hosts are provisioned using `ansible_connection=local`\n  - an alias can be provided using `hosts`, each `host` will be included in every `group` provided with `groups` but each of them will use `ansible_connection=local`\n\n- `null_resource local provisioner`\n  - configured on a null_resouce\n  - runs Ansible installed on the same machine where Terraform is executed\n  - Executes Ansible against the hosts defined by a list of IP addresses passed by interpolation on the `plays.hosts` attribute. The host group is defined by `plays.groups`. \n  - Executes the Ansible provisioner once against all hosts defined in `plays.hosts`, triggered by the availability of the interpolated vars.\n  - Alternatively an inventory file (staticly defined or dynamically templated) can be passed to Ansible to specify a list of Terraform provisioned hosts and groups to be passed to Ansible to execute against in a single run.  \n  - Inventory file can also be used with Ansible dynamic inventory and inventory plugins. \n  - The Terraform depends_on attribute can be used to determine when the Ansible provisioner is executed in relation to the provisioning of other Terraform resources\n  - If the Terraform host is on the same network (cloud hosted or VPN) as the provisioned hosts, private IP addresses can be passed eliminating the requirement for bastion hosts or public SSH access. \n  - Ansible Vault password file / Vault ID files can be used\n\n\n### What\'s not possible\n\nThe provisioner by no means attempts to implement all Ansible use cases. The provisioner is not intended to be used as a `jump host`. For example, the `remote mode` does not allow provisioning hosts other than the one where Ansible is executed. The number of use cases and possibilities covered by Ansible is so wide that having to strive for full support is a huge undertaking for one person. Using the provisioner with a null_resource provides further options for passing the Ansible inventory, including dynamic inventory, to meet use cases not addressed when used with a compute resource. \n\nIf you find yourself in need of executing Ansible against well specified, complex inventories, either follow the regular process of provisoning hosts via Terraform and executing Ansible against them as a separate step, or initate the Ansible execution as the last Terraform task using null_resource and depends_on. Of course, pull requests are always welcomed!\n\n## Installation\n\n### Using Docker\n\n```console\n$ cd /my-terraform-project\n$ docker run -it --rm -v $PWD:$PWD -w $PWD radekg/terraform-ansible:latest init\n$ docker run -it --rm -v $PWD:$PWD -w $PWD radekg/terraform-ansible:latest apply\n```\n\n### Local Installation\n\nNote that although `terraform-provisioner-ansible` is in the [terraform registry](https://registry.terraform.io/modules/radekg/ansible/provisioner/), it cannot be installed using a `module` terraform stanza, as such a configuration will not cause terraform to download the `terraform-provisioner-ansible` binary.\n\n[Prebuilt releases are available on GitHub](https://github.com/radekg/terraform-provisioner-ansible/releases). Download a release for the version you require and place it in `~/.terraform.d/plugins` directory, as [documented here](https://www.terraform.io/docs/plugins/basics.html).\n\n**Caution: you will need to rename the file to match the pattern recognized by Terraform: `terraform-provisioner-ansible_v<version>`.**\n\nAlternatively, you can download and deploy an existing release using the following script:\n\n    curl -sL \\\n      https://raw.githubusercontent.com/radekg/terraform-provisioner-ansible/master/bin/deploy-release.sh \\\n      --output /tmp/deploy-release.sh\n    chmod +x /tmp/deploy-release.sh\n    /tmp/deploy-release.sh -v <version number>\n    rm -rf /tmp/deploy-release.sh\n\n## Configuration\n\nExample:\n\n```tf\nresource "aws_instance" "test_box" {\n  # ...\n  connection {\n    host = "..."\n    user = "centos"\n  }\n  provisioner "ansible" {\n    plays {\n      playbook {\n        file_path = "/path/to/playbook/file.yml"\n        roles_path = ["/path1", "/path2"]\n        force_handlers = false\n        skip_tags = ["list", "of", "tags", "to", "skip"]\n        start_at_task = "task-name"\n        tags = ["list", "of", "tags"]\n      }\n      # shared attributes\n      enabled = true\n      hosts = ["zookeeper"]\n      groups = ["consensus"]\n      become = false\n      become_method = "sudo"\n      become_user = "root"\n      diff = false\n      extra_vars = {\n        extra = {\n          variables = {\n            to = "pass"\n          }\n        }\n      }\n      forks = 5\n      inventory_file = "/optional/inventory/file/path"\n      limit = "limit"\n      vault_id = ["/vault/password/file/path"]\n      verbose = false\n    }\n    plays {\n      module {\n        module = "module-name"\n        args = {\n          "arbitrary" = "arguments"\n        }\n        background = 0\n        host_pattern = "string host pattern"\n        one_line = false\n        poll = 15\n      }\n      # shared attributes\n      # enabled = ...\n      # ...\n    }\n    plays {\n      galaxy_install {\n        force = false\n        server = "https://optional.api.server"\n        ignore_certs = false\n        ignore_errors = false\n        keep_scm_meta = false\n        no_deps = false\n        role_file = "/path/to/role/file"\n        roles_path = "/optional/path/to/the/directory/containing/your/roles"\n        verbose = false\n      }\n      # shared attributes other than:\n      # enabled = ...\n      # are NOT taken into consideration for galaxy_install\n    }\n    defaults {\n      hosts = ["eu-central-1"]\n      groups = ["platform"]\n      become_method = "sudo"\n      become_user = "root"\n      extra_vars = {\n        extra = {\n          variables = {\n            to = "pass"\n          }\n        }\n      }\n      forks = 5\n      inventory_file = "/optional/inventory/file/path"\n      limit = "limit"\n      vault_id = ["/vault/password/file/path"]\n    }\n    ansible_ssh_settings {\n      connect_timeout_seconds = 10\n      connection_attempts = 10\n      ssh_keyscan_timeout = 60\n      insecure_no_strict_host_key_checking = false\n      insecure_bastion_no_strict_host_key_checking = false\n      user_known_hosts_file = ""\n      bastion_user_known_hosts_file = ""\n    }\n    remote {\n      use_sudo = true\n      skip_install = false\n      skip_cleanup = false\n      install_version = ""\n      local_installer_path = ""\n      remote_installer_directory = "/tmp"\n      bootstrap_directory = "/tmp"\n    }\n  }\n}\n```\n\n```tf\nresource "aws_instance" "test_box" {\n  # ...\n}\n\nresource "null_resource" "test_box" {\n  depends_on = "aws_instance.test_box"\n  connection {\n    host = "${aws_instance.test_box.0.public_ip}"\n    private_key = "${file("./test_box")}"\n  }\n  provisioner "ansible" {\n    plays {\n      playbook {\n        file_path = "/path/to/playbook/file.yml"\n        roles_path = ["/path1", "/path2"]\n        force_handlers = false\n        skip_tags = ["list", "of", "tags", "to", "skip"]\n        start_at_task = "task-name"\n        tags = ["list", "of", "tags"]\n      }\n      hosts = ["aws_instance.test_box.*.public_ip"]\n      groups = ["consensus"]\n    }\n  }\n}\n```\n\n### Plays\n\n#### Selecting what to run\n\nEach `plays` must contain exactly one `playbook` or `module`. Define multiple `plays` when more than one Ansible action shall be executed against a host.\n\n#### Playbook attributes\n\n- `plays.playbook.file_path`: full path to the playbook YAML file; *remote provisioning*: a complete parent directory will be uploaded to the host\n- `plays.playbook.roles_path`: `ansible-playbook --roles-path`, list of full paths to directories containing your roles; *remote provisioning*: all directories will be uploaded to the host; string list, default `empty list` (not applies)\n- `plays.playbook.force_handlers`: `ansible-playbook --force-handlers`, boolean, default `false`\n- `plays.playbook.skip_tags`: `ansible-playbook --skip-tags`, string list, default `empty list` (not applied)\n- `plays.playbook.start_at_task`: `ansible-playbook --start-at-task`, string, default `empty string` (not applied)\n- `plays.playbook.tags`: `ansible-playbook --tags`, string list, default `empty list` (not applied)\n\n#### Module attributes\n\n- `plays.module.args`: `ansible --args`, map, default `empty map` (not applied); values of type list and map will be converted to strings using `%+v`, avoid using those unless you really know what you are doing\n- `plays.module.background`: `ansible --background`, int, default `0` (not applied)\n- `plays.module.host_pattern`: `ansible <host-pattern>`, string, default `all`\n- `plays.module.one_line`: `ansible --one-line`, boolean , default `false` (not applied)\n- `plays.module.poll`: `ansible --poll`, int, default `15` (applied only when `background > 0`)\n\n#### Galaxy Install attributes\n\n- `play.galaxy_install.force`: `ansible-galaxy install --force`, bool, force overwriting an existing role, default `false`\n- `play.galaxy_install.ignore_certs`: `ansible-galaxy --ignore-certs`, bool, ignore SSL certificate validation errors, default `false`\n- `play.galaxy_install.ignore_errors`: `ansible-galaxy install --ignore-errors`, bool, ignore errors and continue with the next specified role, default `false`\n- `play.galaxy_install.keep_scm_meta`: `ansible-galaxy install --keep-scm-meta`, bool, use tar instead of the scm archive option when packaging the role, default `false`\n- `play.galaxy_install.no_deps`: `ansible-galaxy install --no-deps`, bool, don\'t download roles listed as dependencies, default `false`\n- `play.galaxy_install.role_file`: `ansible-galaxy install --role-file`, string, required full path to the requirements file\n- `play.galaxy_install.roles_path`: `ansible-galaxy install --roles-path`, string, the path to the directory containing your roles, the default is the roles_path configured in your `ansible.cfgfile` (`/etc/ansible/roles` if not configured); **for the remote provisioner:** if the path starts with `filesystem path separator`, the bootstrap directory will not be prepended, if the path does not start with `filesystem path separator`, the path will appended to the bootstrap directory, if the value is empty, the default value of `galaxy-roles` is used\n- `play.galaxy_install.server`: `ansible-galaxy install --server`, string, optional API server\n- `play.galaxy_install.verbose`: `ansible-galaxy --verbose`, bool, verbose mode, default `false`\n\n#### Plays attributes\n\n- `plays.hosts`: list of hosts to include in auto-generated inventory file when `inventory_file` not given, string list, default `empty list`; When used with null_resource this can be an interpolated list of host IP address public or private; more details below\n- `plays.groups`: list of groups to include in auto-generated inventory file when `inventory_file` not given, string list, default `empty list`; more details below\n- `plays.enabled`: boolean, default `true`; set to `false` to skip execution\n- `plays.become`: `ansible[-playbook] --become`, boolean, default `false` (not applied)\n- `plays.become_method`: `ansible[-playbook] --become-method`, string, default `sudo`, only takes effect when `become = true`\n- `plays.become_user`: `ansible[-playbook] --become-user`, string, default `root`, only takes effect when `become = true`\n- `plays.diff`: `ansible[-playbook] --diff`, boolean, default `false` (not applied)\n- `plays.extra_vars`: `ansible[-playbook] --extra-vars`, map, default `empty map` (not applied); will be serialized to a JSON string, supports values of different types, including lists and maps\n- `plays.forks`: `ansible[-playbook] --forks`, int, default `5`\n- `plays.inventory_file`: full path to an inventory file, `ansible[-playbook] --inventory-file`, string, default `empty string`; if `inventory_file` attribute is not given or empty, a temporary inventory using `hosts` and `groups` will be generated; when specified, `hosts` and `groups` are not in use\n- `plays.limit`: `ansible[-playbook] --limit`, string, default `empty string` (not applied)\n- `plays.vault_id`: `ansible[-playbook] --vault-id`, list of full paths to vault password files; *remote provisioning*: files will be uploaded to the server, string list, default `empty list` (not applied); takes precedence over `plays.vault_password_file`\n- `plays.vault_password_file`: `ansible[-playbook] --vault-password-file`, full path to the vault password file; *remote provisioning*:  file will be uploaded to the server, string, default `empty string` (not applied)\n- `plays.verbose`: `ansible[-playbook] --verbose`, boolean, default `false` (not applied)\n\n#### Defaults\n\nSome of the `plays` settings might be common across multiple `plays`. Such settings can be provided using the `defaults` attribute. Any setting from the following list can be specified in defaults:\n\n- `defaults.hosts`\n- `defaults.groups`\n- `defaults.become_method`\n- `defaults.become_user`\n- `defaults.extra_vars`\n- `defaults.forks`\n- `defaults.inventory_file`\n- `defaults.limit`\n- `defaults.vault_id`\n- `defaults.vault_password_file`\n\nNone of the boolean attributes can be specified in `defaults`. Neither `playbook` nor `module` can be specified in `defaults`.\n\n#### Ansible SSH settings\n\n- `ansible_ssh_settings.connect_timeout_seconds`: SSH `ConnectTimeout`, default `10` seconds\n- `ansible_ssh_settings.connection_attempts`: SSH `ConnectionAttempts`, default `10`\n- `ansible_ssh_settings.ssh_keyscan_timeout`: when `ssh-keyscan` is used, how long to try fetching the host key until failing, default `60` seconds\n\nFollowing settings apply to `local provisioning` only:\n\n- `ansible_ssh_settings.insecure_no_strict_host_key_checking`: if `true`, host key checking will be disabled when connecting to the target host, default `false`; when connecting via bastion, bastion will not execute any SSH keyscan\n- `ansible_ssh_settings.insecure_bastion_no_strict_host_key_checking`: if `true`, host key checking will be disabled when connecting to the bastion host, default `false`\n- `ansible_ssh_settings.user_known_hosts_file`: used only when `ansible_ssh_settings.insecure_no_strict_host_key_checking=false`; if set, the provided path will be used instead of an auto-generate known hosts file; when executing via bastion host, it allows the administrator to provide a known hosts file, no SSH keyscan will be executed on the bastion; default `empty string`\n- `ansible_ssh_settings.bastion_user_known_hosts_file`: used only when `ansible_ssh_settings.insecure_bastion_no_strict_host_key_checking=false`; if set, the provided path will be used instead of an auto-generate known hosts file\n\n#### Remote\n\nThe existence of this resource enables `remote provisioning`. To use remote provisioner with its default settings, simply add `remote {}` to your provisioner.\n\n- `remote.use_sudo`: should `sudo` be used for bootstrap commands, boolean, default `true`, `become` does not make much sense; this attribute has no relevance to Ansible `--sudo` flag\n- `remote.skip_install`: if set to `true`, Ansible installation on the server will be skipped, assume Ansible is already installed, boolean, default `false`\n- `remote.skip_cleanup`: if set to `true`, Ansible bootstrap data will be left on the server after bootstrap, boolean, default `false`\n- `remote.install_version`: Ansible version to install when `skip_install = false` and default installer is in ude, string, default `empty string` (latest version available in respective repositories)\n- `remote.local_installer_path`: full path to the custom Ansible installer on the local machine, used when `skip_install = false`, string, default `empty string`; when empty and `skip_install = false`, the default installer is used\n- `remote.remote_installer_directory`: full path to the remote directory where custom Ansible installer will be deployed to and executed from, used when `skip_install = false`, string, default `/tmp`; any intermediate directories will be created; the program will be executed with `sh`, use shebang if program requires a non-shell interpreter; the installer will be saved as `tf-ansible-installer` under the given directory; for `/tmp`, the path will be `/tmp/tf-ansible-installer`\n- `remote.bootstrap_directory`: full path to the remote directory where playbooks, roles, password files and such will be uploaded to, used when `skip_install = false`, string, default `/tmp`; the final directory will have `tf-ansible-bootstrap` appended to it; for `/tmp`, the directory will be `/tmp/tf-ansible-bootstrap`\n\n## Examples\n\n[Working examples](https://github.com/radekg/terraform-provisioner-ansible/tree/master/examples).\n\n## Usage\n\nThe provisioner does not support passwords. It is possible to add password support for:\n\n- remote provisioner without bastion: host passwords reside in the inventory file\n- remote provisioner with bastion: host passwords reside in the inventory file, bastion is handled by Terraform, password is never visible\n- local provisioner without bastion: host passwords reside in the inventory file\n\nHowever, local provisioner with bastion currently rely on executing an Ansible command with SSH `-o ProxyCommand`, this would require putting the password on the terminal. For consistency, consider no password support.\n\n### Local provisioner: SSH details\n\nLocal provisioner requires the `resource.connection` with, at least, the `user` defined. After the bootstrap, the plugin will inspect the connection info, check if the `user` and `private_key` are set and that provisioning succeeded, indeed, by checking the host (which should be an ip address of the newly created instance). If the connection info does not provide the SSH private key, `ssh agent` mode is assumed.\n\nIn the process of doing so, a temporary inventory will be created for the newly created host, the pem file will be written to a temp file and a temporary `known_hosts` file will be created. Temporary `known_hosts` and temporary pem are per provisioner run, inventory is created for each `plays`. Files are cleaned up after the provisioner finishes or fails. Inventory will be removed only if not supplied with `inventory_file`.\n\n### Local provisioner: host and bastion host keys\n\nBecause the provisioner executes SSH commands outside of itself, via Ansible command line tools, the provisioner must construct a temporary SSH `known_hosts` file to feed to Ansible. There are two possible scenarios.\n\n#### Host without a bastion\n\n1. If `connection.host_key` is used, the provisioner will use the provided host key to construct the temporary `known_hosts` file.\n2. If `connection.host_key` is not given or empty, the provisioner will attempt a connection to the host and retrieve first host key returned during the handshake (similar to `ssh-keyscan` but using Golang SSH).\n\n#### Host with bastion\n\nThis is a little bit more involved than the previous case.\n\n1. If `connection.bastion_host_key` is provided, the provisioner will use the provided bastion host key for the `known_hosts` file.\n2. If `connection.bastion_host_key` is not given or empty, the provisioner will attempt a connection to the bastion host and retrieve first host key returned during the handshake (similar to `ssh-keyscan` but using Golang SSH).\n\nHowever, Ansible must know the host key of the target host where the bootstrap actually happens. If `connection.host_key` is provided, the provisioner will simply use the provieded value. But, if no `connection.host_key` is given (or empty), the provisioner will open an SSH connection to the bastion host and perform an `ssh-keyscan` operation against the target host on the bastion host.\n\nIn the `ssh-keyscan` case, the bastion host must:\n\n- be a Linux / BSD based system\n- **unless `bastion_host_key` is used**:\n  - have `cat`, `echo`, `grep`, `mkdir`, `rm`, `ssh-keyscan` commands available on the `$PATH` for the SSH `user`\n  - have `$HOME` enviornment variable set for the SSH `user`\n\n### Compute resource local provisioner: hosts and groups\n\nThe `plays.hosts` and `defaults.hosts` attributes can be used with local provisioner. When used with a compute resource only the first defined host will be used when generating the inventory file and additional hosts will be ignored. If `plays.hosts` or `defaults.hosts` is not specified, the provisioner uses the public IP address of the Terraform provisioned resource instance. The inventory file is generated in the following format with a single host:\n\n```\naFirstHost ansible_host=<ip address of the host> ansible_connection-ssh\n```\n\nFor each group, additional ini section will be added, where each section is:\n\n```\n[groupName]\naFirstHost ansible_host=<ip address of the host> ansible_connection-ssh\n```\n\nFor a host list `["someHost"]` and a group list of `["group1", "group2"]`, the inventory would be:\n\n```\nsomeHost ansible_host=<ip> ansible_connection-ssh\n\n[group1]\nsomeHost ansible_host=<ip> ansible_connection-ssh\n\n[group2]\nsomeHost ansible_host=<ip> ansible_connection-ssh\n```\n\nIf `hosts` is an empty list or not given, the resulting generated inventory is:\n\n```\n<ip> ansible_connection-ssh\n\n[group1]\n<ip> ansible_connection-ssh\n\n[group2]\n<ip> ansible_connection-ssh\n```\n\n### Null_resource local provisioner: hosts and groups\n\nThe `plays.hosts` and `defaults.hosts` can be used with local provisioner on a null_resource. All passed hosts are used when generating the inventory file. The inventory file is generated in the following format:\n\n```\n<firstHost IP> \n<secondHost IP>\n```\n\nFor each group, additional ini section will be added, where each section is:\n\n```\n[groupName]\n<firstHost IP> \n<secondHost IP>\n```\n\nFor a host list `["firstHost IP", "secondHost IP"]` and a group list of `["group1", "group2"]`, the inventory would be:\n\n```\n<firstHost IP> \n<secondHost IP>\n\n[group1]\n<firstHost IP> \n<secondHost IP>\n\n[group2]\n<firstHost IP> \n<secondHost IP>\n```\n\n\n### Remote provisioner: running on hosts created by Terraform\n\nRemote provisioner can be enabled by adding `remote {}` resource to the `provisioner` resource.\n\n```tf\nresource "aws_instance" "ansible_test" {\n  # ...\n  connection {\n    user = "centos"\n    private_key = "${file("${path.module}/keys/centos.pem")}"\n  }\n  provisioner "ansible" {\n    plays {\n      # ...\n    }\n    \n    # enable remote provisioner\n    remote {}\n    \n  }\n}\n```\n\nUnless `remote.skip_install = true`, the provisioner will install Ansible on the bootstrapped machine. Next, a temporary inventory file is created and uploaded to the host, any playbooks, roles, Vault password files are uploaded to the host.\n\nRemote provisioning works with a Linux target host only.\n\n## Supported Ansible repository layouts\n\nThis provisioner supports two main repository layouts.\n\n1. Roles nested under the playbook directory:\n    \n    ```\n    .\n    \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 install-tree.yml\n    \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 roles\n        \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 tree\n            \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 tasks\n                \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 main.yml\n    ```\n\n2. Roles and playbooks directories separate:\n\n    ```\n    .\n    \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 playbooks\n    \xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 install-tree.yml\n    \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 roles\n        \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 tree\n            \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 tasks\n                \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 main.yml\n    ```\n    \nIn the first case, to reference the roles, it is necessary to use `plays.playbook.roles_path` attribute:\n\n```tf\n    plays {\n      playbook {\n        file_path = ".../playbooks/install-tree.yml"\n        roles_path = [\n            ".../ansible-data/roles"\n        ]\n      }\n    }\n```\n\nIn the second case, it is sufficient to use only the `plays.playbook.file_path`, roles are nested, thus available to Ansible:\n\n```tf\n    plays {\n      playbook {\n        file_path = ".../playbooks/install-tree.yml"\n      }\n    }\n```\n\n### Remote provisioning directory upload\n\nA remark regardng remote provisioning. Remote provisioner must upload referenced playbooks and role paths to the remote server. In case of a playbook, the complete parent directory of the YAML file will be uploaded. Remote provisioner attempts to deduplicate uploads, if multiple `plays` reference the same playbook, the playbook will be uploaded only once. This is achieved by generating an MD5 hash of the absolute path to the playbook\'s parent directory and storing your playbooks at `${remote.bootstrap_direcotry}/${md5-hash}` on the remote server.\n\nFor the roles path, the complete directory as referenced in `roles_path` will be uploaded to the remote server. Same deduplication method applies but the MD5 hash is the `roles_path` itself.\n\n## Tests\n\nIntegration tests require `ansible` and `ansible-playbook` on the `$PATH`. To run tests:\n\n```sh\nmake test-verbose\n```\n\n## Creating releases\n\nTo cut a release, run: \n\n    curl -sL https://raw.githubusercontent.com/radekg/git-release/master/git-release --output /tmp/git-release\n    chmod +x /tmp/git-release\n    /tmp/git-release --repository-path=$GOPATH/src/github.com/radekg/terraform-provisioner-ansible\n    rm -rf /tmp/git-release\n\nAfter the release is cut, build the binaries for the release:\n\n    git checkout v${RELEASE_VERSION}\n    ./bin/build-release-binaries.sh\n\nHandle Docker image:\n\n    git checkout v${RELEASE_VERSION}\n    docker build --build-arg TAP_VERSION=$(cat .version) -t radekg/terraform-ansible:$(cat .version) .\n    docker login --username=radekg\n    docker tag radekg/terraform-ansible:$(cat .version) radekg/terraform-ansible:latest\n    docker push radekg/terraform-ansible:$(cat .version)\n    docker push radekg/terraform-ansible:latest\n\nNote that the version is hardcoded in the [Dockerfile](Dockerfile). You may wish to update it after release.\n'