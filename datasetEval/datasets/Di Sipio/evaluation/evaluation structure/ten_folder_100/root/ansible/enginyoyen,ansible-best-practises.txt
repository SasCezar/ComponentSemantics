b'# Ansible Best Practises\r\n\r\nIf infrastructures are to be treated as a code than projects that manage them must be treated as software projects. As your infrastructure code gets bigger and bigger you have more problems to deal with it. Code layout, variable precedence, small hacks here and there. Therefore, organization of your code is very important, and in this repository you can find some of the best practices (in our opinion) to manage your infrastructure code. Problems that are addressed are:\r\n\r\n* Overall organization\r\n* How to manage external roles\r\n* Usage of variables\r\n* Naming\r\n* Staging\r\n* Complexity of plays\r\n* Encryption of data (e.g. passwords, certificates)\r\n* Installation of ansible and module dependencies\r\n\r\n\r\n## TL;DR\r\n* Do not manage external roles in your repository manually, use ansible-galaxy\r\n* Do not use pre_task, task or post_tasks in your play, use roles to reuse the code\r\n* Keep all your variables in one place, if possible\r\n* Do not use variables in your play\r\n* Use variables in the roles instead of hard-coding\r\n* Keep the names consistent between groups, plays, variables, and roles\r\n* Different environments (development, test, production) must be close as possible, if not equal\r\n* Do not put your password or certificates as plain text in your git repo, use ansible-vault for encrypting\r\n* Use tags in your play\r\n* Keep all your ansible dependencies in a single place and make the installation dead-simple\r\n\r\n\r\n## 1. Directory Layout\r\nThis is the directory layout of this repository with explanation.\r\n\r\n\r\n    production.ini            # inventory file for production stage\r\n    development.ini           # inventory file for development stage\r\n    test.ini                  # inventory file for test stage\r\n    vpass                     # ansible-vault password file\r\n                              # This file should not be committed into the repository\r\n                              # therefore file is in ignored by git\r\n    group_vars/\r\n        all/                  # variables under this directory belongs all the groups\r\n            apt.yml           # ansible-apt role variable file for all groups\r\n        webservers/           # here we assign variables to webservers groups\r\n            apt.yml           # Each file will correspond to a role i.e. apt.yml\r\n            nginx.yml         # ""\r\n        postgresql/           # here we assign variables to postgresql groups\r\n            postgresql.yml    # Each file will correspond to a role i.e. postgresql\r\n            postgresql-password.yml   # Encrypted password file\r\n    plays/\r\n        ansible.cfg           # Ansible.cfg file that holds all ansible config\r\n        webservers.yml        # playbook for webserver tier\r\n        postgresql.yml        # playbook for postgresql tier\r\n\r\n    roles/\r\n        roles_requirements.yml# All the information about the roles\r\n        external/             # All the roles that are in git or ansible galaxy\r\n                              # Roles that are in roles_requirements.yml file will be downloaded into this directory\r\n        internal/             # All the roles that are not public\r\n\r\n    extension/\r\n        setup/                 # All the setup files for updating roles and ansible dependencies\r\n\r\n\r\n## 2. How to Manage Roles\r\nIt is a bad habit to manage the roles that are developed by other developers, in your git repository manually. It is also important to separate them so that you can distinguish those that are external and can be updated vs those that are internal. Therefore, you can use ansible-galaxy for installing the roles you need, at the location you need, by simply defining them in the roles_requirements.yml:\r\n\r\n```\r\n---\r\n- src: ANXS.build-essential\r\n  version: "v1.0.1"\r\n```\r\n\r\nRoles can be downloaded/updated with this command:\r\n\r\n```\r\n./extensions/setup/role_update.sh\r\n```\r\nThis command will delete all external roles and download everything from scratch. It is a good practice, as this will not allow you to make changes in the roles.\r\n\r\n\r\n## 3. Keep your plays simple\r\nIf you want to take the advantage of the roles, you have to keep your plays simple.\r\nTherefore do not add any tasks in your main play. Your play should only consist of the list of roles that it depends on. Here is an example:\r\n\r\n```\r\n---\r\n\r\n- name: postgresql.yml | All roles\r\n  hosts: postgresql\r\n  sudo: True\r\n\r\n  roles:\r\n    - { role: common,                   tags: ["common"] }\r\n    - { role: ANXS.postgresql,          tags: ["postgresql"] }\r\n```\r\n\r\nAs you can see there are also no variables in this play, you can use variables in many different ways in ansible, and to keep it simple and easier to maintain do not use variables in plays. Furthermore, use tags, they give wonderful control over role execution.\r\n\r\n\r\n## 4. Stages\r\nMost likely you will need different stages (e.g. test, development, production) for the product you are either developing or helping to develop. A good way to manage different stages is to have multiple inventory files. As you can see in this repository, there are three inventory files. Each stage you have must be identical as possible, that also means, you should try to use few as possible host variables. It is best to not use at all.\r\n\r\n\r\n## 5. Variables\r\nVariables are wonderful, that allows you to use all this existing code by just setting some values. Ansible offers many different ways to use variables. However, soon as your project starts to get bigger, and more you spread variables here and there, more problems you will encounter. Therefore it is good practice to keep all your variables in one place, and this place happen to be group_vars. They are not host dependent, so it will help you to have a better staging environment as well. Furthermore, if you have internal roles that you have developed, keep the variables out of them as well, so you can reuse them easily.\r\n\r\n\r\n## 6. Name consistency\r\nIf you want to maintain your code, keep the name consistency between your plays, inventories, roles and group variables. Use the name of the roles to separate different variables in each group. For instance, if you are using the role nginx under webservers play, variables that belong to nginx should be located under *group_vars/webservers/nginx.yml*. What this effectively means is that  group_vars supports directory and every file inside the group will be loaded. You can, of course, put all of them in a single file as well, but this is messy, therefore don\'t do it.\r\n\r\n\r\n## 7. Encrypting Passwords and Certificates\r\nIt is most likely that you will have a password or certificates in your repository. It is not a good practise to put them in a repository as plain text. You can use [ansible-vault](http://docs.ansible.com/playbooks_vault.html) to encrypt sensitive data. You can refer to [postgresql-password.yml](https://github.com/enginyoyen/ansible-best-practises/blob/master/group_vars/postgresql/postgresql-password.yml) in group variables to see the encrypted file and [postgresql-password-plain.yml](https://github.com/enginyoyen/ansible-best-practises/blob/master/group_vars/postgresql/postgresql-password-plain.yml) to see the plain text file, commented out.\r\nTo decrypt the file, you need the vault password, which you can place in your root directory but it MUST NOT be committed to your git repository. You should share the password with you coworkers with some other method than committing to git a repo.\r\n\r\nThere is also [git-crypt](https://github.com/AGWA/git-crypt) that allow you to work with a key or GPG. Its more transparent on daily work than `ansible-vault`\r\n\r\n\r\n## 8. Project Setup\r\nAs it should be very easy to set-up the work environment, all required packages that ansible needs, as well as ansible should be installed very easily. This will allow newcomers or developers to start using ansible project very fast and easy. Therefore, python_requirements.txt file is located at:\r\n\r\n```\r\nextensions/setup/python_requirements.txt\r\n```\r\n\r\nThis structure will help you to keep your dependencies in a single place, as well as making it easier to install everything including ansible. All you have to do is to execute the setup file:\r\n\r\n```\r\n./extensions/setup/setup.sh\r\n```\r\n\r\n\r\n# Running the Code\r\nCode in this repo is functional and tested. To run it, you need to install ansible and all the dependencies. You can do this simply by executing:\r\n\r\n```\r\n./extensions/setup/setup.sh\r\n```\r\n\r\n* If you already have ansible, and you do not want to go through the installation simply create a vpass text file in the root directory and add the secret code (123456)\r\n* To install roles execute the role_update.sh which will download all the roles\r\n```\r\n./extensions/setup/role_update.sh\r\n```\r\n* Go to the plays directory and the execute and do not forget to change the host address in the development.ini\r\n```\r\nansible-playbook -i ../development.ini webservers.yml\r\n```\r\n\r\n\r\n# License\r\nMIT License.\r\n'