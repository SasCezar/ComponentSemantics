b'# "dotfiles" and system configuration\n\n![](https://raw.githubusercontent.com/wincent/wincent/media/screenshot.png)\n\n* Target platforms: macOS and Red Hat-like Linuxes (eg. CentOS).\n* Set-up method: ~~Beautiful and intricate snowflake~~ incredibly over-engineered [Ansible](https://www.ansible.com/) orchestration.\n* Visible in the screenshot:\n  * [default-dark Base16](http://chriskempson.com/projects/base16/) color scheme.\n  * [Adobe Source Code Pro](https://github.com/adobe-fonts/source-code-pro) (Light) font.\n  * Vim, running inside tmux, inside iTerm2, on macOS "High Sierra".\n\n## Features\n\n### Dotfiles\n\n[A set of dotfiles](https://github.com/wincent/wincent/tree/master/roles/dotfiles/files) that I\'ve been tweaking and twiddling since the early 2000s ([under version control](https://github.com/wincent/wincent/commit/61a7e2a830edb7) since 2009). Characteristics include:\n\n* Sane Vim pasting via bracketed paste mode.\n* Write access to local clipboard from local and remote hosts, inside and outside of tmux (via [Clipper](https://github.com/wincent/clipper)).\n* Full mouse support (pane/split resizing, scrolling, text selection) in Vim and tmux.\n* Focus/lost events for Vim inside tmux.\n* Cursor shape toggles on entering Vim.\n* Italics in the terminal.\n* Bundles a (not-excessive) number of [useful Vim plug-ins](https://github.com/wincent/wincent/tree/master/roles/dotfiles/files/.vim/pack).\n* Conservative Vim configuration (very few overrides of core functionality; most changes are unobtrusive enhancements; some additional functionality exposed via `<Leader>` and `<LocalLeader>` mappings.\n* Relatively restrained Zsh config, Bash-like but with a few Zsh perks, such as right-side prompt, auto-cd hooks, command elapsed time printing and such.\n* Unified color-handling (across iTerm2 and Vim) via [Base16 Shell](https://github.com/chriskempson/base16-shell).\n* Encrypted versioning of files with sensitive content (via [git-cipher](https://github.com/wincent/git-cipher)).\n* Comprehensive [Hammerspoon](http://www.hammerspoon.org/) [config](https://github.com/wincent/wincent/tree/master/roles/dotfiles/files/.hammerspoon).\n\n### Homebrew\n\nOn macOS, [the `homebrew` role](https://github.com/wincent/wincent/tree/master/roles/homebrew) installs [a bunch of useful software](https://github.com/wincent/wincent/blob/master/roles/homebrew/templates/Brewfile).\n\n### Keyboard customization\n\nOn macOS, [Karabiner-Elements](https://github.com/tekezo/Karabiner-Elements/) is used for the following:\n\n* Make Caps Lock serve as Backspace (when tapped) and Left Control (when chorded with another key). When held down alone, Caps Lock fires repeated Backspace events.\n* Make Return serve as Return (when tapped) and Right Control (when chorded with another key). When held down alone, Return fires repeated Return events.\n* Maps Control-I to F6 (only in MacVim and the terminal) so that it can be mapped independently from Tab in Vim.\n* Toggle Caps Lock on by tapping both Shift keys simultaneously.\n* Makes the function keys on my external Realforce keyboard behave like the "media" keys on Apple\'s keyboards.\n* Swap Option and Command keys on my external Realforce keyboard.\n* Make the "application" key (extra modifier key on right-hand side) behave as "fn" on Realforce keyboard.\n* Make "pause" (at far-right of function key row) behave as "power" (effectively, sleep) on Realforce keyboard.\n* Adds a "SpaceFN" layer that can be activated by holding down Space while hitting other keys; I use this to make the cursor keys available on or near the home row in any app.\n\n### Zsh\n\n#### Functions\n\n- `ag`: Transparently wraps the `ag` executable so as to provide a centralized place to set defaults for that command (seeing as it has no "rc" file).\n- `bounce`: bounce the macOS Dock icon if the terminal is not in the foreground.\n- `color`: change terminal and Vim color scheme.\n- `email`: convenience wrapper to spawn (or attach to) a tmux session running `mutt` and `mbsync`.\n- `fd`: "find directory" using fast `bfs` and `fzf`; automatically `cd`s into the selected directory.\n- `fh`: "find [in] history"; selecting a history item inserts it into the command line but does not execute it.\n- `history`: overrides the (tiny) default history count.\n- `jump` (aliased to `j`): to jump to hashed directories.\n- `regmv`: bulk-rename files (eg. `regmv \'/\\.tif$/.tiff/\' *`).\n- `scratch`: create a random temporary scratch directory and `cd` into it.\n- `tick`: moves an existing time warp (eg. `tick +1h`); see `tw` below for a description of time warp.\n- `tmux`: wrapper that reattches to pre-existing sessions, or creates new ones based on the current directory name; additionally, looks for a `.tmux` file to set up windows and panes (note that the first time a given `.tmux` file is encountered the wrapper asks the user whether to trust or skip it).\n- `tw` ("time warp"): overrides `GIT_AUTHOR_DATE` and `GIT_COMMITTER_DATE` (eg. `tw -1d`).\n\n#### Prompt\n\nZsh is configured with the following prompt:\n\n![](https://raw.githubusercontent.com/wincent/wincent/media/prompt.png)\n\nVisible here are:\n\n- Concise left-hand prompt consisting of:\n  - Last component of current directory (abbreviates `$HOME` to `~` if possible).\n  - Prompt marker, `\xe2\x9d\xaf`, the "[HEAVY RIGHT-POINTING ANGLE QUOTATION MARK ORNAMENT](https://codepoints.net/U+276F)" (that\'s `\\u276f`, or `e2 9d af` in UTF-8).\n- Extended right-hand size prompt which auto-hides when necessary to make room for long commands and contains:\n  - Duration of previous command in adaptive units (seconds, minutes, hours, days, depending on duration).\n  - Current version control branch name.\n  - Current version control worktree status using colors that match those used in `git status`:\n    - Green dot indicates staged changes.\n    - Red dot indicates unstaged changes.\n    - Blue dot indicates untracked files.\n  - Full version of current working directory (again, abbreviating `$HOME` to `~`).\n\nNested shells are indicated with additional prompt characters. For example, one nested shell:\n\n![](https://raw.githubusercontent.com/wincent/wincent/media/prompt-shlvl-2.png)\n\nTwo nested shells:\n\n![](https://raw.githubusercontent.com/wincent/wincent/media/prompt-shlvl-3.png)\n\nRoot shells are indicated with a different color prompt character and the word "root":\n\n![](https://raw.githubusercontent.com/wincent/wincent/media/prompt-root.png)\n\nNesting within a root shell is indicated like this:\n\n![](https://raw.githubusercontent.com/wincent/wincent/media/prompt-root-shlvl-2.png)\n\nTwo nested shells:\n\n![](https://raw.githubusercontent.com/wincent/wincent/media/prompt-root-shlvl-3.png)\n\nIf the last command exited with a non-zero status (usually indicative of an error), a yellow exclamation is shown:\n\n![](https://raw.githubusercontent.com/wincent/wincent/media/prompt-error.png)\n\nIf there are background processes, a yellow asterisk is shown:\n\n![](https://raw.githubusercontent.com/wincent/wincent/media/prompt-bg.png)\n\n### Mutt\n\nA number of tools are used to provide command-line access to Gmail and Office IMAP accounts.\n\n* [mutt](http://www.mutt.org/): For reading email.\n* [isync](http://isync.sourceforge.net/): For maintaining a local cache of messages for offline access.\n* [notmuch](https://notmuchmail.org/): For fast search.\n* [msmtp](http://msmtp.sourceforge.net/): For sending email.\n* [elinks](http://elinks.or.cz/): For viewing HTML emails.\n* [urlview](https://packages.debian.org/sid/misc/urlview): For opening URLs from inside mutt.\n* [terminal-notifier](https://github.com/julienXX/terminal-notifier): For notifications.\n* [lbdb](https://www.spinnaker.de/lbdb/): Contact autocompletion drawing from a number of sources, such as previous messages, aliases, and macOS Contacts (which can be configured to synchronize Google contacts as well).\n* [imapfilter](https://github.com/lefcha/imapfilter/): For filtering.\n* [passage](https://github.com/wincent/passage): For mediating interaction with the macOS keychain.\n\nIn order for all this to work, a few items have to be stored in the macOS keychain:\n\n* A "generic" (A.K.A. "application") keychain items (that is, without protocols, only hostnames):\n  * "Keychain Item Name": example.net (corresponds to the "host" field in `~/.msmtprc`, and "Host" field in `~/.mbsyncrc`).\n  * "Account Name": username+mutt@example.net (corresponds to the "user" field in `~/.msmtprc`, and "PassCmd" field in `~/.mbsynrc`).\n\nThe following Gmail-like/Vim-like bindings are configured:\n\n* `e`: Archive (but note: leaves copy of mail in mailbox until next sync; force an immediate sync with `$`).\n* `#`: Trash mail.\n* `!`: Mark as spam.\n* `gi`: Go to inbox.\n* `ga`: Go to archive.\n* `gt`: Go to sent mail.\n* `gd`: Go to drafts.\n* `gs`: Go to starred mail.\n* `gl`: Go to a label (folder).\n* `x`: Toggle selection on entry (see also `t`).\n* `c`: Compose new message.\n* `s`: Toggle star.\n* `*a`: Select all.\n* `*n`: Deselect all (mnemonic: "select none").\n* `*r`: Select read messages.\n* `*u`: Select unread messages.\n* `Shift-U`: Mark as unread.\n* `Shift-I`: Mark as read.\n\nStandard `mutt` stuff:\n\n* `v`: View attachments (including alternate parts for a multipart message).\n\nNon-Gmail extensions:\n\n* `t`: Toggle selection on entire thread (see also `x`).\n* `A`: Show alternate MIME-type in MIME-multipart messages.\n* `O`: Save original message.\n* `S`: Search all using [Xapian query syntax](https://xapian.org/docs/queryparser.html) ([notmuch-specific reference documentation](https://notmuchmail.org/manpages/notmuch-search-terms-7/)):\n  * `+foo`: Must include "foo".\n  * `-bar`: Must not include "bar".\n  * `AND`, `OR`, `NOT`, `XOR`: Self-evident.\n  * `foo NEAR bar`: "foo" within 10 words of "bar" (order-independent).\n  * `foo ADJ bar`: Like `NEAR`, but "foo" must appear earlier than "bar".\n  * `"foo bar"`: Match entire phrase.\n  * `foo*`: Match "foo", "food", "foobar" etc.\n  * `subject:this`, `subject:"one two"` (two consecutive words), `subject:(one two)` (either or both words anywhere in subject), `subject:one AND subject:two` (both words anywhere in subject).\n  * `subject:/regex.*/` (but note, quotes are needed for patterns containing spaces; eg. `subject:"/a b/"`).\n  * `from:john`, `from:me@example.com`\n  * `to:john`, `to:me@example.com`\n  * `date:today`\n  * `date:yesterday`\n  * `date:3d` (exactly 3 days ago)\n  * `date:14d..7d` (a week ago)\n  * `date:10d..` (since 10 days ago)\n  * `date:..3d` (until 3 days ago)\n  * `date:"last week"` (preceding Monday through Sunday)\n  * `date:"this week"` or `date:this_week` or `date:this-week` (Monday to present day)\n  * `date:"last year"` (also works with `years`, `months`, `hours`/`hrs`, `minutes`/`mins`, `seconds`/`secs` etc).\n  * `date:june`\n  * `date:2018-06-01`\n  * `is:{tag}`: eg. `is:unread`, `is:flagged` (ie. starred); to see all tags, run `notmuch search --output=tags \'*\'`:\n    * `attachment`\n    * `flagged`\n    * `inbox` (not very meaningful as *everything* gets this tag when indexed via `notmuch new`)\n    * `replied`\n    * `signed`\n    * `unread`\n  * `id:messageId@example.net` (search by Message-Id).\n* `l`: Limit listed messages:\n  * `~f bob` (from bob)\n  * `~s foo` (subject contains "foo"; "Foo" would search case-sensitively)\n  * `~s foo.+bar` (subject contains pattern)\n  * `!~s foo` (subject does not contain "foo")\n  * `~d >1m` (messages more than 1 month old)\n* `\\u`: Open list of URLs in message (via `urlview`).\n* `b`: Toggle (mailboxes) sidebar.\n* `m`: Move message(s).\n\nOther stuff:\n\n* `<Tab>` autocompletes addresses from the lbdb database.\n* `<C-t>` autocompletes aliases.\n\nAttachment menu bindings:\n\n* `S`: Save all attachments.\n\nTo have `mailto` links open up in `mutt` in iTerm:\n\n1. In *iTerm2* \xe2\x86\x92 *Preferences* \xe2\x86\x92 *Profiles* \xe2\x86\x92 *General*, select the "Mutt" profile.\n2. Under *URL Schemes* \xe2\x86\x92 *Schemes handled:*, select `mailto`.\n\nNotes:\n\n* `$$URL$$` is documented [here](https://groups.google.com/d/msg/iterm2-discuss/TFPl1D_miIU/uDVV2ZZpYWQJ).\n* The convoluted use of `env` and `zsh` is required to get terminal colors working correctly.\n\n## Dependencies\n\n* [tmux](http://tmux.sourceforge.net/) 2.3 or later.\n* [Neovim](https://neovim.io) or [Vim](http://www.vim.org/) 8.0 or later with Ruby and Python support (although there\'s a reasonable amount of feature detection in order to degrade gracefully).\n* Relatively recent [Zsh](http://www.zsh.org/).\n* Relatively recent [Git](http://git-scm.com/).\n* [Clipper](https://wincent.com/products/clipper) for transparent access to the local system clipboard.\n* On macOS, [iTerm2](http://www.iterm2.com/). Additionally, only the latest version of macOS (although at the time of writing, I\'m still on High Sierra) gets actively tested.\n* [Python](https://www.python.org/) to perform setup via the included `install` command.\n* [Ruby](https://www.ruby-lang.org/).\n* [Adobe Source Code Pro](https://github.com/adobe-fonts/source-code-pro) or any other fixed-width font that includes the [Powerline glyphs](http://powerline.readthedocs.io/en/master/installation.html#fonts-installation).\n\n## Installation\n\n### Clone\n\n```sh\ngit clone --recursive https://github.com/wincent/wincent.git\n```\n\nNote that if you\'re behind a firewall you may need to set up a temporary `~/.gitconfig` with appropriate proxy configuration with a format such as:\n\n```\n[http]\n\tproxy = fwdproxy:8080\n```\n\nOr alternatively:\n\n```sh\nenv http_proxy=http://fwdproxy:8080 https_proxy=http://fwdproxy:8080 git clone --recursive https://github.com/wincent/wincent\n```\n\n### Install\n\n```sh\n./install          # Installs everything on the local machine.\n./install --help   # Info on installing specific roles, force-installing etc.\n./install dotfiles # Just install dotfiles.\n```\n\nThis sets up a local Python environment using the bundled virtualenv, bootstraps Ansible, and then uses Ansible to copy the dotfiles and configure the machine.\n\nAgain, if you\'re behind a firewall, you may need to make use of a proxy during the initial run:\n\n```sh\nenv http_proxy=http://fwdproxy:8080 https_proxy=http://fwdproxy:8080 ./install\n```\n\nAs a fallback strategy, in case the `install` script fails, you can symlink the dotfiles by hand with a command like the following:\n\n```sh\nfor DOTFILE in $(find roles/dotfiles/files -maxdepth 1 -name \'.*\' | tail -n +2); do\n  ln -sf $PWD/$DOTFILE ~\ndone\n```\n\n**Note:** The `ln -sf` command will overwrite existing files, but will fail to overwrite existing directories.\n\n**Note:** Given that `~/.gitconfig` is included with these dotfiles, any local modifications or overrides that you apply should be added to `~/.gitconfig.local` instead; for example:\n\n```sh\ngit config --file ~/.gitconfig.local user.name "John Doe"\ngit config --file ~/.gitconfig.local user.email johndoe@example.com\n```\n\n### Troubleshooting\n\n#### General Ansible troubleshooting\n\nFlags passed to `./install` are propagated to the underlying Ansible invocation, which means that you can do things like:\n\n```sh\n# Run in "check" (dry-run) mode.\n./install --check\n\n# Show before-and-after delta of changes.\n./install --diff\n\n# Both of the above together.\n./install --check --diff\n\n# Show various levels of debug output.\n./install --verbose\n./install -vv\n./install -vvv\n./install -vvvv\n\n# Confirm each task before running it (--step), and begin\n# execution from a specific task (--start-at-task).\n./install --step --start-at-task=\'dotfiles | create backup directory\'\n```\n\nYou can also inspect variables by adding a task that uses the "debug" module in a role:\n\n```yaml\n- name: buggy task\n  stat: path="~/{{ item }}"\n  register: stat_result\n  with_items: \'{{ dotfile_files + dotfile_templates }}\'\n\n- name: debugging bad stat info\n  debug:\n    var: stat_result\n```\n\nNote that for convenience, "debug" tasks have already been inserted for all variables that are `register`-ed in the existing roles, with verbosity thresholds of 2, meaning that they will be logged automatically when the install is run using `./install -vv` or more.\n\n#### pycrypto install fails with "\'gmp.h\' file not found"\n\nIf pycrypto causes the install to fail at:\n\n```sh\nsrc/_fastmath.c:36:11: fatal error: \'gmp.h\' file not found\n```\n\ndue to [a missing GMP dependency](http://stackoverflow.com/questions/15375171/pycrypto-install-fatal-error-gmp-h-file-not-found), try:\n\n```sh\nbrew install gmp\nenv "CFLAGS=-I/usr/local/include -L/usr/local/lib" pip install pycrypto\n```\n\nAnd then installing again:\n\n```sh\n./install --force\n```\n\n#### Broken Unicode in Vim (Linux)\n\nIf Unicode symbols appear missing or corrupted in Vim, first ensure that your terminal emulator supports UTF-8. Then, check to see if you\'ve properly configured your system-wide UTF-8 support.\n\nIssue this test command:\n\n```bash\nexport LC_ALL=en_US.UTF-8\n```\n\nThen run `vim`. Unicode in the statusline should be working.\n\nTo persist this `LC_*` variable binding, edit your `locale` accordingly:\n\n```bash\n/etc/locale.conf\n\nLANG=en_US.UTF-8\nLC_ALL=en_US.UTF-8\n```\n\n### See also\n\n- [High-level overview of how this repo works (screencast)](https://youtu.be/__0Dquj7y9g).\n\n### License\n\nUnless otherwise noted, the contents of this repo are in the public domain. See the [LICENSE](LICENSE.md) for details.\n\n### Authors\n\nThe repo is written and maintained by Greg Hurrell &lt;[greg@hurrell.net](mailto:greg@hurrell.net)&gt;. Other contributors that have submitted patches include, in alphabetical order:\n\n- Joe Lencioni\n- Jonathan Wilkins\n- Mark Stenglein\n- Matthew Byrne\n- Stone C. Lasley\n- Victor Igor\n- Zac Collier\n\nThis list produced with:\n\n    :read !git shortlog -s HEAD | grep -v \'Greg Hurrell\' | cut -f 2-3 | sed -e \'s/^/- /\'\n'