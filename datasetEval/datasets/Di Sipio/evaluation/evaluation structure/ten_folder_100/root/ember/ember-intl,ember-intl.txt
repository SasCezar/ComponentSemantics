b'# ember-intl\n\n[![npm Version][npm-badge]][npm]\n![Ember Version][ember-version]\n[![Build Status][travis-badge]][travis]\n[![npm](https://img.shields.io/npm/dm/ember-intl.svg)](https://www.npmjs.com/package/ember-intl)\n[![Ember Observer Score](http://emberobserver.com/badges/ember-intl.svg)](http://emberobserver.com/addons/ember-intl)\n\n## Notable Features\n\n* \xf0\x9f\x92\xb5 Locale-aware numbers. Formatting of currencies, decimals, and percentages\n* \xf0\x9f\x93\x85 Locale-aware dates and times formatting\n* \xf0\x9f\x95\x91 Locale-aware display of relative time. I.e, `"now"`, `"yesterday"`, `"2 mo. ago"`\n* \xf0\x9f\x92\xac ICU Message Syntax. Pluralization and formatted segments (numbers, datetime, etc.)\n* \xf0\x9f\x8c\x90 Support for 150+ languages\n* \xf0\x9f\x93\x9c Built largely on standards. [ICU message syntax][ICU] & [Native Intl API](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl)\n* \xe2\x9a\xa1 Extensive Ember Service API and template helpers for formatting and translating\n* \xf0\x9f\x8e\x89 [Advanced addon support](https://ember-intl.github.io/ember-intl/docs/advanced/addon-support) to provide translations to the host app\n\n## Installation\n\n`ember i ember-intl`\n\n## Documentation\n\n[4.x (current stable)](https://ember-intl.github.io/ember-intl/versions/v4.0.0/docs)\n\n[3.x](https://github.com/ember-intl/ember-intl/tree/3.x/docs)\n\n[2.x](https://github.com/ember-intl/ember-intl/tree/2.x/docs)\n\n## Translations\nTranslations are defined in [ICU message syntax][ICU] and store in `<project_root>/translations` in either JSON and/or YAML format.  Nested directories are supported along with nested objects within your translation files.\n\nExample basic translation file `/translations/homepage/en-us.yaml`:\n\n```yaml\nhomepage:\n  banner: \'<strong>{product}</strong> will cost <em>{price, number, USD}</em> if ordered by {deadline, date, time}\'\n```\n\n## Setting Locale\n\nThis can be done at any point after your app boots.  This is typically done within your Application route\'s `beforeModel` hook by calling `intl.setLocale(\'en-us\')` [Read more about the Service API](https://ember-intl.github.io/ember-intl/versions/v4.0.0/docs/guide/ember-service-api).\n\n```js\n  // app/routes/application.js\n  export default Route.extend({\n    intl: service(),\n    beforeModel() {\n      this._super(...arguments)\n      /* NOTE: if you lazily load translations, here is also where you would load them via `intl.addTranslations` */\n      return this.intl.setLocale([\'fr-fr\', \'en-us\']); /* array optional */\n    }\n  });\n```\n\n## Helper Examples\n\n### Format Message\n\nCompiles a [ICU message syntax][ICU] strings with its hash values passed.\n\n```\n# en-us.yml\nphotos:\n  banner: "You have {numPhotos, plural, =0 {no photos.} =1 {one photo.} other {# photos.}}"\n```\n\n**Template Helper**\n\n```hbs\n{{t \'photos.banner\' numPhotos=model.photos.length}}\n```\n\n**Service API**\n\n```js\nexport default Component.extend({\n  intl: service(),\n\n  banner: computed(\'intl.locale\', \'model.photos.length\', function() {\n    return this.intl.t(\'photos.banner\', {\n      photos: this.get(\'model.photos.length\')\n    });\n  })\n});\n```\n\n### Format Number\nFormats numbers using [`Intl.NumberFormat`][Intl-NF], and returns the formatted string value.\n\n```hbs\n{{format-number num}}\n{{format-number num format=\'EUR\'}}\n{{format-number num style=\'currency\' currency=\'USD\'}}\n```\n\nOr programmatically convert a number within any Ember Object.\n\n```js\nexport default Component.extend({\n  intl: service(),\n  computedNumber: computed(\'intl.locale\', \'cost\', function() {\n    return this.intl.formatNumber(this.cost/*, optional options hash */);\n  })\n});\n```\n\n#### Format Number Options\n\n[List of supported format number options](https://ember-intl.github.io/ember-intl/versions/v4.0.0/docs/helpers/format-number#format-number-options)\n\n### Format Date\n\nFormats dates using [`Intl.DateTimeFormat`][Intl-DTF], and returns the formatted string value.\n\n```hbs\n{{format-date now weekday=\'long\' timeZone=\'UTC\'}}\n{{format-date now hour=\'numeric\' minute=\'numeric\' hour12=false}}\n```\n\nOr programmatically convert a date within any Ember Object.\n\n```js\nexport default Component.extend({\n  intl: service(),\n  computedNow: computed(\'intl.locale\', function() {\n    return this.intl.formatDate(new Date()/*, optional options hash */);\n  })\n});\n```\n\n#### Format Date Options\n\n[List of supported format date options](https://ember-intl.github.io/ember-intl/versions/v4.0.0/docs/helpers/format-date#format-date-time-options)\n\n### Format Time\n\nThis is just like the `{{format-date}}` helper, except it will reference any string-named `format` from [`formats.time`](#dataintlformats).\n\n```hbs\n{{format-time now format=\'hhmmss\'}}\n{{format-time now hour=\'numeric\' minute=\'numeric\' hour12=false}}\n```\n\nOr programmatically convert a time within any Ember Object.\n\n```js\n// example\nexport default Component.extend({\n  intl: service(),\n  computedNow: computed(\'intl.locale\', function() {\n    return this.intl.formatTime(new Date()/*, optional options hash */);\n  })\n});\n```\n\n#### Format Time Options\n[List of supported format date options](https://ember-intl.github.io/ember-intl/versions/v4.0.0/docs/helpers/format-date#format-date-time-options)\n\n### Format Relative\n\nFormats dates relative to "now" using [`IntlRelativeFormat`][Intl-RF], and returns the formatted string value.\n\n```js\nexport default Component.extend({\n  timestamp: computed(function() {\n    let date = new Date();\n    date.setDate(date.getDate() - 3);\n    return date;\n  })\n});\n```\n\n```hbs\n{{format-relative timestamp}} -> 3 days ago\n```\n\n```hbs\n{{format-relative timestamp units=\'day\'}} -> 3 days ago\n```\n\n`units` is optional, by default will default to `best-fit`.  [A full list of supported unit options](https://ember-intl.github.io/ember-intl/versions/v4.0.0/docs/helpers/format-relative#format-relative-options)\n\nOr programmatically convert a relative time within any Ember Object.\n\n```js\nexport default Component.extend({\n  intl: service(),\n  yesterday: computed(\'intl.locale\', function() {\n    let date = new Date();\n    return this.intl.formatRelative(date.setDate(date.getDate() - 1)/*, optional options hash */);\n  })\n});\n```\n\n#### Live Relative Timestamp\n\nRecompute the relative timestamp on an interval by passing an `interval` argument (in milliseconds).\n\n```hbs\n{{format-relative now interval=1000}} -> now, 1 second ago, 2 seconds ago, etc. (will recompute every 1s)\n```\n\n#### Format Relative Options\n\n[List of supported format relative options](https://ember-intl.github.io/ember-intl/versions/v4.0.0/docs/helpers/format-relative#format-relative-options)\n\n#### Formatting a string literal ICU messages\n\n**Template Helper**\n\n```hbs\n{{format-message "{name} took {numPhotos, plural, =0 {no photos} =1 {one photo} other {# photos}} on {timestamp, date, long}"\n  name=user.username\n  numPhotos=num\n  timestamp=yesterday\n}}\n```\n\n**Service API**\n\n```js\nexport default Component.extend({\n  intl: service(),\n  count: 0,\n  label: computed(\'intl.locale\', \'model.photos.length\', function() {\n    return this.intl.formatMessage(`\n      You took {numPhotos, plural,\n        =0 {no photos}\n        =1 {one photo}\n        other {# photos}\n      }\n    `,\n    {\n      numPhotos: this.get(\'model.photos.length\')\n    });\n  }).readOnly()\n});\n```\n\n### Format HTML Message\n\nEscapes all hash arguments and returns as an htmlSafe String which renders an ElementNode.  To enable rendering HTML within translations, pass an `htmlSafe` attribute to the `t` helper.\n\n```hbs\n{{t \'a.translation\' htmlSafe=true}}\n{{format-message \'<em>{photos, number}</em>\' photos=models.photos.length htmlSafe=true}}\n```\n\n## Named Formats\n\nSpecifying format options (e.g.: style="currency" currency="USD") in every use of format helper can become a problem in large code bases, and isn\'t DRY. Instead, you can provide named formats through the use of exporting a POJO from `app/formats`. All helpers accept a `format` property which accepts a key that maps to the format option under its respected type (time, date, number, relative).\n\nFor example:\n\n\n```js\n// app/formats.js\nexport default {\n  date: {\n    hhmmss: {\n      hour:   \'numeric\',\n      minute: \'numeric\',\n      second: \'numeric\'\n    }\n  }\n};\n```\n\n```hbs\n{{format-date \'Thu Jan 23 2014 13:00:44\' format=\'hhmmss\'}}\n```\n\n```js\nthis.intl.formatDate(\'Thu Jan 23 2014 13:00:44\', {\n  format: \'hhmmss\'\n})\n```\n\nOutput of both the helper and the programmatic example:\n\n> 1:00:44 PM\n\n## Helper Options\n\n* All helpers accept optional arguments:\n  * `locale` argument to explicitly pass/override the application locale\n  * `format` argument which you pass in a key corresponding to a format configuration in `app/formats.js`\n\n## Asynchronously loading translations\n\nAsynchronously loading translations instead of bundling translations within `app.js` are fully-supported as of 2.x.\nhttps://ember-intl.github.io/ember-intl/docs/guide/asynchronously-loading-translations\n\n## Testing with ember-intl\n\nember-intl ships with a number of helpers to assist with writing tests.  [Documentation](https://ember-intl.github.io/ember-intl/versions/v4.0.0/docs/guide/testing)\n\n\n## Common Errors\n\n> `date value is not finite in DateTimeFormat.format()`\n\nBrowser vendors implement date/time parsing differently.  For example, the following will parse correctly in Chrome but fail in Firefox: `new Intl.DateTimeFormat().format(\'2015-04-21 20:47:31 GMT\');`\n\nThe solution is the ensure that the value you are passing in is in a format which is valid for the `Date` constructor.  This library currently does not try and normalize date strings outside of what the browser already implements.\n\n## Migrating from ember-i18n\n\n* Simple migration tool to convert your translations files and application code to this addon.  Feel free to report any issues with the migration tool [here](https://github.com/DockYard/ember-i18n-to-intl-migrator/issues).\n- https://github.com/DockYard/ember-i18n-to-intl-migrator\n\n[npm]: https://www.npmjs.org/package/ember-intl\n[npm-badge]: https://img.shields.io/npm/v/ember-intl.svg?style=flat-square\n[travis]: https://travis-ci.org/ember-intl/ember-intl\n[travis-badge]: https://travis-ci.org/ember-intl/ember-intl.svg?branch=master\n[ember-version]: https://img.shields.io/badge/Ember-2.12%2B-brightgreen.svg\n[Intl-RF]: https://github.com/yahoo/intl-relativeformat\n[Intl-MF]: https://github.com/yahoo/intl-messageformat\n[Intl]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl\n[Intl-NF]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat\n[Intl-DTF]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n[ICU]: https://formatjs.io/guides/message-syntax/\n[CLDR]: http://cldr.unicode.org/\n[Intl.js]: https://github.com/andyearnshaw/Intl.js\n[LICENSE]: https://github.com/yahoo/yahoo-intl/blob/master/LICENSE\n[FormatJS]: http://formatjs.io/\n'