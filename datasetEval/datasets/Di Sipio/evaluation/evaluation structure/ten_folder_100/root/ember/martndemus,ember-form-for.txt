b'# Ember Form For\n\n![Download count all time](https://img.shields.io/npm/dt/ember-form-for.svg)\n[![npm version](https://badge.fury.io/js/ember-form-for.svg)](http://badge.fury.io/js/ember-form-for)\n[![CircleCI](https://circleci.com/gh/martndemus/ember-form-for.svg?style=shield)](https://circleci.com/gh/martndemus/ember-form-for)\n[![Ember Observer Score](http://emberobserver.com/badges/ember-form-for.svg)](http://emberobserver.com/addons/ember-form-for)\n\nThis Ember.js addon will give you an easy way to build good forms:\n  * Supports all HTML5 input types, textarea and select, backed by [`ember-one-way-controls`](https://github.com/DockYard/ember-one-way-controls)\n  * Automatically adds labels, hints and errors to the form controls\n  * Is built with data down - actions up in mind\n  * Standard markup has built-in accessibility support\n  * Compatible with [`ember-changeset`](https://github.com/DockYard/ember-changeset) (see [instructions](#ember-changeset))\n  * Compatible with [`ember-i18n`](https://github.com/jamesarosen/ember-i18n) (see [instructions](#i18n))\n\n__WARNING__: This addon uses __contextual helpers__ and is therefore only\ncompatible with apps built with Ember.js version __2.3__ and up.\n\n__NOTE__: I\'m working on rewriting docs, [click here](https://github.com/martndemus/ember-form-for/tree/1.4.1) for the old docs!\n\n## Installation\n\n```\nember install ember-form-for\n```\n\n## Quickstart Example\n\n```hbs\n{{#form-for newUser as |f|}}\n  {{f.text-field "firstName"}}\n  {{f.text-field "lastName"}}\n\n  {{#fields-for newUser.address as |fa|}}\n    {{fa.text-field "street"}}\n    {{fa.text-field "city"}}\n    {{fa.text-field "state"}}\n    {{fa.text-field "zipCode"}}\n  {{/fields-for}}\n\n  {{f.select-field "gender" "unknown male female"}}\n\n  {{f.date-field "birthDate"}}\n\n  {{f.email-field "emailAddress"}}\n  {{f.text-field "userName"}}\n  {{f.password-field "password" hint="Must be at least six characters long and include a capital letter"}}\n\n  {{f.checkbox-field "terms" label="I agree to the Terms of Service"}}\n\n  {{f.reset  "Clear form"}}\n  {{f.submit "Create account"}}\n{{/form-for}}\n```\n\nSee this example in action: http://martndemus.github.io/ember-form-for/\n\n### Breaking down the quickstart example\n\nLet\'s first take a look at the `form-for` component itself:\n\n```hbs\n{{#form-for newUser as |f|}}\n  {{! form fields go here }}\n{{/form-for}}\n```\n\nThe `{{form-for}}` component takes an object as first parameter, `newUser` in\nthis case, this is the object where the form fields will be created for.\n\nIt then yields `f`, `f` contains all form controls as [contextual components](http://emberjs.com/blog/2016/01/15/ember-2-3-released.html#toc_contextual-components).\nThis means that the components rendered with `f` already have `form-for`\'s\ncontext applied to it, you don\'t have to pass the target object to each\nform control, `form-for` takes care of that.\n\nFor example `{{f.text-field "firstName"}}` will render an input that will update\nthe `firstName` property of the `newUser` object you have passed to the\n`form-for` component. You didn\'t have to pass `newUser` again, because it\'s taken\nfrom `form-for`\'s context.\n\nNext you see the `{{fields-for}}` component. This component is similar to\n`form-for`, except it doesn\'t render a `<form>` element as outer element, this\nis ideal to embed subsections to your form that operate on a different object.\n\nLastly there are the `{{f.reset}}` and `{{f.submit}}` button components. These\nare getting passed the `reset` and `submit` action from the `form-for` component\nrespectively. By default the `reset` action will call the `rollback` function on\nthe object, the `submit` action will call the `save` function on the object.\n\n## Table of Contents\n\n- [Installation](#installation)\n- [Quickstart Example](#quickstart-example)\n- [Table of Contents](#table-of-contents)\n- [Reference](#reference)\n  + [`form-for`](#form-for)\n  + [`form-fields`](#form-fields)\n- [Integrations](#integrations)\n  + [`i18n`](#i18n)\n  + [`ember-changeset`](#ember-changeset)\n- [Customizing/Extending](#customizing-extending) (Coming Soon\xe2\x84\xa2)\n  + [Adding Class Names](#adding-class-names) (Coming Soon\xe2\x84\xa2)\n  + [Using Custom Form Controls](#using-custom-form-controls) (Coming Soon\xe2\x84\xa2)\n  + [Injecting Custom Fields Into Form For](#injecting-custom-fields-into-form-for) (Coming Soon\xe2\x84\xa2)\n\n## Reference\n\n## form-for\n\nThe `{{form-for}}` component is the main component from this addon. All forms\nbuilt with this addon should start with this component.\n\n### Syntax\n\n```hbs\n{{#form-for object\n    update=(action update)\n    submit=(action submit)\n    reset=(action reset)\n    as |f|\n}}\n  {{! block content }}\n{{/form-for}}\n```\n\n### Parameters\n\n#### object\n\nThe object the form fields are for\n\n#### update\n\nThis action is called every time a field is updated. It will pass three\narguments: `object`, `property` and `value`. By default it will automatically\nupdate the property on the object with the new value.\n\n#### submit\n\nThis action is called when a submit button is clicked. It will pass the object\nas first argument. By default it will call the `save` function on the object.\nThis action also supports returning a promise, which the `{{f.submit}}` component.\n\n#### reset\n\nThis action is called when a reset button is clicked. It will pass the object\nas first argument. By default it will call the `rollback` function on the\nobject.\n\n### Yields\n\n#### formControls\n\nAn object containing form controls as [contextual components](http://emberjs.com/blog/2016/01/15/ember-2-3-released.html#toc_contextual-components).\nThe form controls have the `object` and the `update` action pre-bound to it.\n\nThe default form controls are:\n\n - checkbox-field\n - color-field\n - date-field\n - datetime-local-field\n - email-field\n - file-field\n - hidden-field\n - month-field\n - number-field\n - password-field\n - radio-field\n - radio-group\n - range-field\n - search-field\n - select-field\n - tel-field\n - text-field\n - textarea-field\n - time-field\n - url-field\n - week-field\n - custom-field\n\nAdditionally these buttons are also available:\n\n - button\n - reset\n - submit\n\n## form-fields\n\nThe form-field components are yielded from the `{{form-for}}` component. All the\navailable form-field components are described in the [`form-for`](#formControls) section.\n\n### Syntax\n\n```hbs\n{{#form-for object as |f|}}\n  {{f.text-field "propertyName"}}\n{{/form-for}}\n```\n\n### Parameters\n\n#### object\n\nThe object the form field is for. By default `object` is the object passed to\nthe `{{form-for}}` component, but you can override it if you want to.\n\n#### propertyName\n\nThis tells the form field which property of the object to use as value. Can be\npassed as the first positional param.\n\n#### update\n\nThe action that handles updates to the value of the form-field by the user. By\ndefault this action is passed down from the `{{form-for}}` component.\n\n#### label\n\nThe text value for the label of the form-field. By default is inferred from the\n`propertyName` attribute or lookup up from the i18n service if available.\n\n#### hint\n\nText to be displayed along the control as a hint to the user.\n\n#### required\n\nIf set to `true` it will mark the field as required.\n\n## Integrations\n\n## i18n\n\nEmber Form For has out of the box support for\n[ember-i18n](https://github.com/jamesarosen/ember-i18n). If your project has\nthis addon installed, it will automatically lookup the translation with the\nfollowing key algorithm:\n\n  - By default it will use `property-name` as key. (e.g. `\'first-name\'`).\n  - If `modelName` is set, or deducable from the object, then it will be\n    prefixed to the key. (e.g. `\'user.first-name\'`)\n  - If `i18nKeyPrefix` is set on the config, then this will be prefixed before\n    `modelName` and `propertyName`. (e.g. `\'my.arbitrary.key.user.first-name\'`)\n\n### Polyfilling i18n\n\nThe project does not have a hard dependency on ember-i18n, you can easily\ndrop-in your own implementation. All you need is a service called `i18n` that\nhas a function called `t`.\n\n## ember-changeset\n\nIt\'s easy to integrate\n[ember-changeset](https://github.com/DockYard/ember-changeset) and\n[ember-changeset-validations](https://github.com/DockYard/ember-changeset-validations/)\nwith Ember Form For. All you have to do is to pass the changeset into the\n`{{form-for}}` helper instead of the raw object:\n\n```hbs\n{{#form-for (changeset model validations) as |f|}}\n  {{! form fields }}\n{{/form-for}}\n```\n\n### Errors\n\nTo be able to use the errors generated by ember-changeset you need to configure\nthe following thing in your `config/environment.js` file:\n\n```js\nmodule.exports = function(environment) {\n  var ENV = {\n    \'ember-form-for\': {\n      errorsPath: \'error.PROPERTY_NAME.validation\',\n    }\n  };\n\n  return ENV;\n};\n```\n\nThis is because ember-changeset stores it\'s errors on the `error.PROPERTY_NAME.validation` property,\nwhile Ember Form For expects them (by default) to be on the `errors` property.\n\nFor those still using the old configuration of setting `errorsProperty`, this method will still work.\nHowever, if both are defined then `errorsPath` will take precedence.\n\n'