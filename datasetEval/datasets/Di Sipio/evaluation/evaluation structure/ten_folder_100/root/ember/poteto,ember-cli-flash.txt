b'# ember-cli-flash\n\n![Download count all time](https://img.shields.io/npm/dt/ember-cli-flash.svg) [![npm version](https://badge.fury.io/js/ember-cli-flash.svg)](http://badge.fury.io/js/ember-cli-flash) [![CircleCI](https://circleci.com/gh/poteto/ember-cli-flash.svg?style=shield)](https://circleci.com/gh/poteto/ember-cli-flash) [![Ember Observer Score](http://emberobserver.com/badges/ember-cli-flash.svg)](http://emberobserver.com/addons/ember-cli-flash) [![Code Climate](https://codeclimate.com/github/poteto/ember-cli-flash/badges/gpa.svg)](https://codeclimate.com/github/poteto/ember-cli-flash)\n\n*Simple, highly configurable flash messages for ember.*\n\nThis ember addon adds a flash message service and component to your app.\n\n## Table of Contents\n<!-- toc -->\n- [Installation](#installation)\n- [Compatibility](#compatibility)\n- [Usage](#usage)\n  * [Convenience methods (Bootstrap / Foundation alerts)](#convenience-methods-bootstrap--foundation-alerts)\n    + [Bootstrap](#bootstrap)\n    + [Foundation](#foundation)\n  * [Custom messages](#custom-messages)\n    + [Custom messages API](#custom-messages-api)\n  * [Animated example](#animated-example)\n  * [Arbitrary options](#arbitrary-options)\n    + [Example use case](#example-use-case)\n  * [Clearing all messages on screen](#clearing-all-messages-on-screen)\n  * [Returning flash object](#returning-flash-object)\n- [Service defaults](#service-defaults)\n- [Displaying flash messages](#displaying-flash-messages)\n  * [Custom `close` action](#custom-close-action)\n  * [Styling with Foundation or Bootstrap](#styling-with-foundation-or-bootstrap)\n  * [Sort messages by priority](#sort-messages-by-priority)\n  * [Rounded corners (Foundation)](#rounded-corners-foundation)\n  * [Custom flash message component](#custom-flash-message-component)\n- [Acceptance / Integration tests](#acceptance--integration-tests)\n- [Unit testing](#unit-testing)\n- [Styling](#styling)\n- [License](#license)\n<!-- tocstop -->\n\n## Installation\n```\nember install ember-cli-flash\n```\n\n## Compatibility\nThis addon is tested against the `release`, `beta` and `canary` channels, `~1.11.0`, and `1.12.1`. Because this addon makes use of attribute bindings, which were introduced in ember `1.11.0`, earlier versions of ember are not compatible with the latest version.\n\n## Usage\nUsage is very simple. First, add one of the [template examples](#displaying-flash-messages) to your app. Then, inject the `flashMessages` service and use one of its convenience methods:\n\n```javascript\nimport Component from \'@ember/component\';\nimport { inject } from \'@ember/service\';\n\nexport default Component.extend({\n  flashMessages: inject()\n});\n```\n\n### Convenience methods (Bootstrap / Foundation alerts)\nYou can quickly add flash messages using these methods from the service:\n\n#### Bootstrap\n- `.success`\n- `.warning`\n- `.info`\n- `.danger`\n\n#### Foundation\n- `.success`\n- `.warning`\n- `.info`\n- `.alert`\n- `.secondary`\n\nThese will add the appropriate classes to the flash message component for styling in Bootstrap or Foundation. For example:\n\n```javascript\n// Bootstrap: the flash message component will have \'alert alert-success\' classes\n// Foundation: the flash message component will have \'alert-box success\' classes\nimport { get } from \'@ember/object\';\n\nget(this, \'flashMessages\').success(\'Success!\');\n```\n\nYou can take advantage of Promises, and their `.then` and `.catch` methods. To add a flash message after saving a model (or when it fails):\n\n```javascript\nimport { get } from \'@ember/object\';\n\nactions: {\n  saveFoo() {\n    const flashMessages = get(this, \'flashMessages\');\n\n    Ember.get(this, \'model\')\n      .save()\n      .then((res) => {\n        flashMessages.success(\'Successfully saved!\');\n        doSomething(res);\n      })\n      .catch((err) => {\n        flashMessages.danger(\'Something went wrong!\');\n        handleError(err);\n      });\n  }\n}\n```\n\n### Custom messages\nIf the convenience methods don\'t fit your needs, you can add custom messages with `add`:\n\n```javascript\nimport { get } from \'@ember/object\';\n\nget(this, \'flashMessages\').add({\n  message: \'Custom message\'\n});\n```\n\n#### Custom messages API\nYou can also pass in options to custom messages:\n\n```javascript\nimport { get } from \'@ember/object\';\n\nget(this, \'flashMessages\').add({\n  message: \'I like alpacas\',\n  type: \'alpaca\',\n  timeout: 500,\n  priority: 200,\n  sticky: true,\n  showProgress: true,\n  extendedTimeout: 500,\n  destroyOnClick: false,\n  onDestroy() {\n    // behavior triggered when flash is destroyed\n  }\n});\n\nget(this, \'flashMessages\').success(\'This is amazing\', {\n  timeout: 100,\n  priority: 100,\n  sticky: false,\n  showProgress: true\n});\n```\n\n- `message: string`\n\n  Required when `preventDuplicates` is enabled. The message that the flash message displays.\n\n- `type?: string`\n\n  Default: `info`\n\n  This is mainly used for styling. The flash message\'s `type` is set as a class name on the rendered component, together with a prefix. The rendered class name depends on the message type that was passed into the component.\n\n- `timeout?: number`\n\n  Default: `3000`\n\n  Number of milliseconds before a flash message is automatically removed.\n\n- `priority?: number`\n\n  Default: `100`\n\n  Higher priority messages appear before low priority messages. The best practise is to use priority values in multiples of `100` (`100` being the lowest priority). Note that you will need [modify your template](#sort-messages-by-priority) for this work.\n\n- `sticky?: boolean`\n\n  Default: `false`\n\n  By default, flash messages disappear after a certain amount of time. To disable this and make flash messages permanent (they can still be dismissed by click), set `sticky` to true.\n\n- `showProgress?: boolean`\n\n  Default: `false`\n\n  To show a progress bar in the flash message, set this to true.\n\n- `extendedTimeout?: number`\n\n  Default: `0`\n\n  Number of milliseconds before a flash message is removed to add the class \'exiting\' to the element.  This can be used to animate the removal of messages with a transition.\n\n- `destroyOnClick?: boolean`\n\n  Default: `true`\n\n  By default, flash messages will be destroyed on click.  Disabling this can be useful if the message supports user interaction.\n\n- `onDestroy: function`\n\n  Default: `undefined`\n\n  A function to be called when the flash message is destroyed.\n\n### Animated example\nTo animate messages, set `extendedTimeout` to something higher than zero. Here we\'ve chosen 500ms.\n\n```javascript\nmodule.exports = function(environment) {\n  var ENV = {\n    flashMessageDefaults: {\n      extendedTimeout: 500\n    }\n  }\n}\n```\n\nThen animate using CSS transitions, using the `.active` and `.active.exiting` classes.\n```scss\n.alert {\n  opacity: 0;\n  position: relative;\n  left: 100px;\n\n  transition: all 700ms cubic-bezier(0.68, -0.55, 0.265, 1.55);\n\n  &.active {\n    opacity: 1;\n    left: 0px;\n\n    &.exiting {\n      opacity: 0;\n      left: 100px;\n    }\n  }\n}\n```\n\n### Arbitrary options\nYou can also add arbitrary options to messages:\n\n```javascript\nimport { get } from \'@ember/object\';\n\nget(this, \'flashMessages\').success(\'Cool story bro\', {\n  someOption: \'hello\'\n});\n\nget(this, \'flashMessages\').add({\n  message: \'hello\',\n  type: \'foo\',\n  componentName: \'some-component\',\n  content: customContent\n});\n```\n\n#### Example use case\nThis makes use of the [component helper](http://emberjs.com/blog/2015/03/27/ember-1-11-0-released.html#toc_component-helper), allowing the template that ultimately renders the flash to be dynamic:\n\n```handlebars\n{{#each flashMessages.queue as |flash|}}\n  {{#flash-message flash=flash as |component flash|}}\n    {{#if flash.componentName}}\n      {{component flash.componentName content=flash.content}}\n    {{else}}\n      <h6>{{component.flashType}}</h6>\n      <p>{{flash.message}}</p>\n    {{/if}}\n  {{/flash-message}}\n{{/each}}\n```\n\n### Clearing all messages on screen\nIt\'s best practice to use flash messages sparingly, only when you need to notify the user of something. If you\'re sending too many messages, and need a way for your users to clear all messages from screen, you can use this method:\n\n```javascript\nimport { get } from \'@ember/object\';\n\nget(this, \'flashMessages\').clearMessages();\n```\n\n### Returning flash object\nThe flash message service is designed to be Fluent, allowing you to chain methods on the service easily. The service should handle most cases but if you want to access the flash object directly, you can use the `getFlashObject` method:\n\n```javascript\nimport { get } from \'@ember/object\';\n\nconst flashObject = get(this, \'flashMessages\').add({\n  message: \'hola\',\n  type: \'foo\'\n}).getFlashObject();\n```\n\nYou can then manipulate the `flashObject` directly. Note that `getFlashObject` must be the last method in your chain as it returns the flash object directly.\n\n## Service defaults\nIn `config/environment.js`, you can override service defaults in the `flashMessageDefaults` object:\n\n```javascript\nmodule.exports = function(environment) {\n  var ENV = {\n    flashMessageDefaults: {\n      // flash message defaults\n      timeout: 5000,\n      extendedTimeout: 0,\n      priority: 200,\n      sticky: true,\n      showProgress: true,\n\n      // service defaults\n      type: \'alpaca\',\n      types: [ \'alpaca\', \'notice\', \'foobar\' ],\n      preventDuplicates: false\n    }\n  }\n}\n```\n\nSee the [options](#custom-messages-api) section for information about flash message specific options.\n\n- `type?: string`\n\n  Default: `info`\n\n  When adding a custom message with `add`, if no `type` is specified, this default is used.\n\n- `types?: array`\n\n  Default: `[ \'success\', \'info\', \'warning\', \'danger\', \'alert\', \'secondary\' ]`\n\n  This option lets you specify exactly what types you need, which means in the above example, you can do `Ember.get(\'flashMessages\').{alpaca,notice,foobar}`.\n\n- `preventDuplicates?: boolean`\n\n  Default: `false`\n\n  If `true`, only 1 instance of a flash message (based on its `message`) can be added at a time. For example, adding two flash messages with the message `"Great success!"` would only add the first instance into the queue, and the second is ignored.\n\n## Displaying flash messages\nThen, to display somewhere in your app, add this to your template:\n\n```handlebars\n{{#each flashMessages.queue as |flash|}}\n  {{flash-message flash=flash}}\n{{/each}}\n```\n\nIt also accepts your own template:\n\n```handlebars\n{{#each flashMessages.queue as |flash|}}\n  {{#flash-message flash=flash as |component flash|}}\n    <h6>{{component.flashType}}</h6>\n    <p>{{flash.message}}</p>\n    {{#if component.showProgressBar}}\n      <div class="alert-progress">\n        <div class="alert-progressBar" style="{{component.progressDuration}}"></div>\n      </div>\n    {{/if}}\n  {{/flash-message}}\n{{/each}}\n```\n\n### Custom `close` action\nThe `close` action is always passed to the component whether it is used or not. It can be used to implement your own close button, such as an `x` in the top-right corner.\n\nWhen using a custom `close` action, you will want to set `destroyOnClick=false` to override the default (`destroyOnClick=true`). You could do this globally in `flashMessageDefaults`.\n\n```\n{{#each flashMessages.queue as |flash|}}\n  {{#flash-message flash=flash as |component flash close|}}\n    {{flash.message}}\n    <a href="#" {{action close}}>x</a>\n  {{/flash-message}}\n{{/each}}\n```\n\n### Styling with Foundation or Bootstrap\nBy default, flash messages will have Bootstrap style class names. If you want to use Foundation, simply specify the `messageStyle` on the component:\n\n```handlebars\n{{#each flashMessages.queue as |flash|}}\n  {{flash-message flash=flash messageStyle=\'foundation\'}}\n{{/each}}\n```\n\n### Sort messages by priority\nTo display messages sorted by priority, add this to your template:\n\n```handlebars\n{{#each flashMessages.arrangedQueue as |flash|}}\n  {{flash-message flash=flash}}\n{{/each}}\n```\n\n### Rounded corners (Foundation)\nTo add `radius` or `round` type corners in Foundation:\n\n```handlebars\n{{#each flashMessages.arrangedQueue as |flash|}}\n  {{flash-message flash=flash messageStyle=\'foundation\' class=\'radius\'}}\n{{/each}}\n```\n\n```handlebars\n{{#each flashMessages.arrangedQueue as |flash|}}\n  {{flash-message flash=flash messageStyle=\'foundation\' class=\'round\'}}\n{{/each}}\n```\n\n### Custom flash message component\nIf the provided component isn\'t to your liking, you can easily create your own. All you need to do is pass in the `flash` object to that component:\n\n```handlebars\n{{#each flashMessages.queue as |flash|}}\n  {{custom-component flash=flash}}\n{{/each}}\n```\n\n## Acceptance / Integration tests\nWhen you install the addon, it should automatically generate a helper located at `tests/helpers/flash-message.js`. You can do this manually as well:\n\n```shell\n$ ember generate ember-cli-flash\n```\n\nThis also adds the helper to `tests/test-helper.js`. You won\'t actually need to import this into your tests, but it\'s good to know what the blueprint does. Basically, the helper overrides the `_setInitialState` method so that the flash messages behave intuitively in a testing environment.\n\nAn example acceptance test:\n\n```javascript\n// tests/acceptance/foo-test.js\n\ntest(\'flash message is rendered\', function(assert) {\n  assert.expect(1);\n  visit(\'/\');\n\n  andThen(() => assert.ok(find(\'.alert.alert-success\').length));\n});\n```\n\nAn example integration test:\n\n```javascript\n// tests/integration/components/x-foo-test.js\nimport { getOwner } from \'@ember/application\';\n\nmoduleForComponent(\'x-foo\', \'Integration | Component | x foo\', {\n  integration: true,\n  beforeEach() {\n    //We have to register any types we expect to use in this component\n    const typesUsed = [\'info\', \'warning\', \'success\'];\n    getOwner(this).lookup(\'service:flash-messages\').registerTypes(typesUsed);\n  }\n});\n\ntest(\'it renders\', function(assert) {\n  ...\n});\n```\n\n## Unit testing\nFor unit tests that require the `flashMessages` service, you\'ll need to do a small bit of setup:\n\n```js\nimport { getOwner } from \'@ember/application\';\n\nmoduleFor(\'route:foo\', \'Unit | Route | foo\', {\n  needs: [\'service:flash-messages\', \'config:environment\'],\n  beforeEach() {\n    const typesUsed = [\'warning\', \'success\'];\n    getOwner(this).lookup(\'service:flash-messages\').registerTypes(typesUsed);\n  }\n});\n```\n\n## Styling\nThis addon is minimal and does not currently ship with a stylesheet. You can style flash messages by targeting the appropriate alert class (Foundation or Bootstrap) in your CSS.\n\n## License\n[MIT](LICENSE.md)\n'