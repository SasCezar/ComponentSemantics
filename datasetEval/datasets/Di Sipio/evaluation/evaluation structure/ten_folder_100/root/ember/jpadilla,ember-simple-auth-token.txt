b'# Ember Simple Auth Token\n\n[![travis-image]][travis]\n[![ember-observer-image]][ember-observer]\n[![npm-image]][npm]\n\nThis is Ember addon is an extension to the Ember Simple Auth library that provides a basic token authenticator, a JSON Web Tokens token authenticator with automatic refresh capability, and an authorizer mixin. You can find more about why JSON Web Tokens are so awesome in [this article][medium-jwt].\n\n**Because user\'s credentials and tokens are exchanged between the\nEmber.js app and the server, you must use HTTPS for this connection!**\n\n## Demo\n\nA demo is available [here][demo].\n\n## Installation\n\nEmber Simple Auth Token can be installed with [Ember CLI][ember-cli] by running:\n\n```\nember install ember-simple-auth-token\n```\n\nIf using FastBoot, `ember-fetch` must be installed as a direct dependency and `node-fetch` must be added to your `fastbootDependencies`. If using FastBoot and the JWT authenticator, `node-fetch` and `buffer` must be added to you `fastbootDependencies`.\n\n## Setup\n\n### Authenticator\n\nIn order to use the token authenticator or the JSON Web Token authenticator, the application should have a route for login. In most cases, the login route will display a form with a `username` and `password` field. On form submit, the `authenticate` action will be called on the `session`:\n\n```js\n// app/router.js\nRouter.map(function() {\n  this.route(\'login\');\n});\n```\n\n```html\n{{! app/templates/login.hbs }}\n<form {{action \'authenticate\' on=\'submit\'}}>\n  <label for="username">Login</label>\n  {{input id=\'username\' placeholder=\'Enter Login\' value=username}}\n  <label for="password">Password</label>\n  {{input id=\'password\' placeholder=\'Enter Password\' type=\'password\' value=password}}\n  <button type="submit">Login</button>\n</form>\n```\n\n```js\n// app/controllers/login.js\nimport Controller from \'@ember/controller\';\nimport { inject } from \'@ember/service\';\n\nexport default Controller.extend({\n  session: inject(\'session\'),\n\n  actions: {\n    authenticate: function() {\n      const credentials = this.getProperties(\'username\', \'password\');\n      const authenticator = \'authenticator:token\'; // or \'authenticator:jwt\'\n\n      this.get(\'session\').authenticate(authenticator, credentials);\n    }\n  }\n});\n```\n\n#### JSON Web Token Authenticator\n\nThe JSON Web Token authenticator will decode the token and look for the\nexpiration time found. The difference in the current time and the token expiration time is calculated. The `refreshLeeway` is subtracted from this value to determine when the automatic token refresh request should be made.\n\n```js\n// config/environment.js\nENV[\'ember-simple-auth-token\'] = {\n  refreshAccessTokens: true,\n  refreshLeeway: 300 // refresh 5 minutes (300 seconds) before expiration\n};\n```\n\nThe `refreshLeeway` can be specified to send the requests before the token expires to account for clock skew. Some libraries like [PyJWT][pyjwt], [ruby-jwt][ruby-jwt], and [node-jsonwebtoken][node-jsonwebtoken] also support specifying a clock tolerance when verifying the token.\n\nSample JSON Web Token:\n\n```js\nconst encodedToken = eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImpvaG4iLCJleHAiOjk4MzQzMjM0fQ.FKuPdB7vmkRfR2fqaWEyltlgOt57lYQ2vC_vFXtlMMJfpCMMq0BEoXEC6rLC5ygORcKHprupi06Zmx0D8nChPQ;\nconst decodedHeader = {\n  \'alg\': \'HS512\',\n  \'typ\': \'JWT\'\n};\nconst decodedPayload = {\n  \'username\': \'john\',\n  \'exp\': 98343234 // <ISO-8601> UTC seconds\n};\n```\n\nTo debug JSON Web Token issues, see [jwt][jwt].\n\nThe JSON Web Token authenticator supports both separate access tokens and refresh tokens. By specifying the `tokenPropertyName` and the `refreshTokenPropertyName` to the same value, the same token will be used for both access and refresh requests. For more information about refresh tokens, see [this blog][blog-refresh-token].\n\n### Authorizer Mixin\n\nIn order to send the token with all API requests made to the server, the token authorizer mixin should be used:\n\n```js\n// app/adapters/application.js\nimport DS from \'ember-data\';\nimport TokenAuthorizerMixin from \'ember-simple-auth-token/mixins/token-authorizer\';\n\nexport default DS.JSONAPIAdapter.extend(TokenAuthorizerMixin);\n```\n\nThe mixin will add the header to each API request:\n\n```\nAuthorization: Bearer <token>\n```\n\n### Customization Options\n\n#### Token Authenticator\n\n```js\n// config/environment.js\nENV[\'ember-simple-auth-token\'] = {\n  serverTokenEndpoint: \'/api/token-auth/\', // Server endpoint to send authenticate request\n  tokenPropertyName: \'token\', // Key in server response that contains the access token\n  headers: {} // Headers to add to the\n};\n```\n\n#### JSON Web Token Authenticator\n\nIn addition to all the customization options available to the token authenticator:\n\n```js\n// config/environment.js\nENV[\'ember-simple-auth-token\'] = {\n  tokenDataPropertyName: \'tokenData\', // Key in session to store token data\n  refreshAccessTokens: true, // Enables access token refreshing\n  tokenExpirationInvalidateSession: true, // Enables session invalidation on token expiration\n  serverTokenRefreshEndpoint: \'/api/token-refresh/\', // Server endpoint to send refresh request\n  refreshTokenPropertyName: \'refresh_token\', // Key in server response that contains the refresh token\n  tokenExpireName: \'exp\', // Field containing token expiration\n  refreshLeeway: 0 // Amount of time to send refresh request before token expiration\n};\n```\n\n#### Token Authenticator\n\nIn addition to `tokenPropertyName` from the authenticator:\n\n```js\n// config/environment.js\nENV[\'ember-simple-auth-token\'] = {\n  authorizationHeaderName: \'Authorization\', // Header name added to each API request\n  authorizationPrefix: \'Bearer \', // Prefix added to each API request\n};\n```\n\n## Testing Configuration\n\nFor acceptance testing, token refresh must be disabled to allow the test to exit. Therefore, the following configuration should be set:\n\n```js\n// config/environment.js\nENV[\'ember-simple-auth-token\'] = {\n  refreshAccessTokens: false,\n  tokenExpirationInvalidateSession: false,\n};\n```\n\n## Upgrade Notes\n\n- `getResponseData`, `getAuthenticateData`, `config.identificationField`, and `config.passwordField` have been removed since version 4.0.0\n- `config.timeFactor` has been removed since version 2.1.0\n\n\n[travis-image]: https://travis-ci.org/jpadilla/ember-simple-auth-token.svg?branch=master\n[travis]: https://travis-ci.org/jpadilla/ember-simple-auth-token\n[ember-observer-image]: https://emberobserver.com/badges/ember-simple-auth-token.svg\n[ember-observer]: https://emberobserver.com/addons/ember-simple-auth-token\n[npm-image]: https://img.shields.io/npm/v/ember-simple-auth-token.svg\n[npm]: https://www.npmjs.com/package/ember-simple-auth-token\n\n[demo]: https://jpadilla.github.io/ember-simple-auth-token\n[ember-cli]: https://ember-cli.com\n[ember-simple-auth]: https://github.com/simplabs/ember-simple-auth\n[pyjwt]: https://github.com/jpadilla/pyjwt\n[ruby-jwt]: https://github.com/jwt/ruby-jwt\n[node-jsonwebtoken]: https://github.com/auth0/node-jsonwebtoken\n[jwt]: https://jwt.io\n[medium-jwt]: https://medium.com/@leo/why-json-web-tokens-are-truly-awesome-23fb80b7fc20\n[blog-refresh-token]: https://auth0.com/blog/refresh-tokens-what-are-they-and-when-to-use-them\n'