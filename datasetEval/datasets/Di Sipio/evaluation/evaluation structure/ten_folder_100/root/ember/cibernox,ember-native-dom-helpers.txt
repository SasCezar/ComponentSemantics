b'![Build Status](https://travis-ci.org/cibernox/ember-native-dom-helpers.svg?branch=master)\n\n# IMPORTANT: You probably don\'t need this addon.\n\nIn Ember, since `ember-(cli-)qunit` 3.X (around late 2017) there is a new testing API that already\nprovides almost identical test helpers from the ones in this addon.\n\nThis addon was used as an experiment that helped bikeshed the API of the helpers that are now part\nof default testing API, like `click`, `tap`, `fillIn` and others.\n\nThe only two helpers in this addon that are not part of the default set of helpers that ship with Ember\'s\ntest harness are `scrollTo(selectorOrHTMLElement, x, y)` and `selectFiles(selectorOrHTMLElement, files = [])`.\n\nUnless you want to use those, you are better served using the helpers provided by `@ember/test-helpers`.\n\n# ember-native-dom-helpers\n\nTest helpers for integration tests that mimic the behaviour of the acceptance\ntest helpers provided by Ember.\n\nUse this addon as a way to start the gradual migration towards the future\n["testing unification" RFC][emberjs/rfcs/pull/119], which proposes only native DOM.\n\nSee the [Grand Testing Unification RFC][emberjs/rfcs/pull/119]\n\n- [shared-test-helpers]\n- [example-migration-of-component-integration-test]\n\n[emberjs/rfcs/pull/119]: https://github.com/emberjs/rfcs/pull/119\n[shared-test-helpers]: https://github.com/rwjblue/rfcs/blob/42/text/0000-grand-testing-unification.md#shared-test-helpers\n[example-migration-of-component-integration-test]: https://github.com/rwjblue/rfcs/blob/42/text/0000-grand-testing-unification.md#example-migration-of-component-integration-test\n\n**Status**: (Pre) 1.0, although we have a good idea about what the needs are for\ntest helpers, we are working through a few points on what changes are needed\nwhen using only standard DOM APIs (i.e. without jQuery).\n\n## Usage\n\n### Integration tests\n\n```js\nimport { click, fillIn, find, findAll, keyEvent, triggerEvent } from \'ember-native-dom-helpers\';\n\nmoduleForComponent(\'my-component\', \'Integration | Component | my-component\', {\n  integration: true\n});\n\n\ntest(\'I can interact with my component\', async function(assert) {\n  this.render(hbs```\n    {{my-component}}\n  ```);\n\n  await fillIn(\'.some-input\', \'some text\');\n  await click(\'.main-button\');\n  await keyEvent(\'.other-input\', \'keyup\', 40); // down arrow\n  await triggerEvent(\'.some-drop-area\', \'mouseenter\');\n\n  assert.ok(find(\'.result-of-event-happened\'));\n  assert.equal(findAll(\'.result-list-item\').length, 3);\n})\n```\n\n### Acceptance tests\n\nYou can use the exact same helpers for your acceptance tests. All interaction helpers like\n`click`, `fillIn`, et al., return a promise that fullfils when "the world has settled"\n(that is, there are no pending requests or promises, and the runloop has been drained), which\nis what the `andThen` acceptance helper used to do. However, this helper can now be replaced\nby the `async`/`await` syntax in ES2017, yielding easier-to-read tests:\n\n```js\nimport { visit, click, find, fillIn } from \'ember-native-dom-helpers\';\n\nmoduleForAcceptance(\'Acceptance | Sign up\');\n\ntest(\'Usage awaiting the world to settle\', async function(assert) {\n  await visit(\'/sign-up\');\n\n  await fillIn(\'.first-name\', \'Chuck\');\n  await fillIn(\'.last-name\', \'Berry\');\n  await click(\'.submit-btn\');\n\n  assert.ok(find(\'.welcome-msg\'), \'There is a welcome banner\');\n  assert.equal(find(\'.welcome-msg-name\'), \'Chuck\');\n});\n```\n\n## Advantages compared with `this.$(selector).click()`\n\nThe main advantages are:\n\n- Fires native events: In Ember, when adding events with the `onclick={{action "foo"}}` syntax,\n  dispatching jQuery events leads to the action being called twice. Additionally, there are subtle\n  differences between jQuery and Native events that can bite you. Firing native events fixes that\n  problem, but they are very verbose and there are browser incompatibilities. This addon makes\n  firing native events a no-brainer.\n\n- Runloop aware: These helpers automatically spawn a runloop, so you don\'t need to wrap\n  every interaction with `Ember.run(() => /* interact with element */ );`.\n\n- `wait` by default: All the helpers return the `wait()` promise, making it possible to\n  wait for asynchronous side-effects with `async/await`. (Note that for using async/await\n  in browsers without native support you must install [ember-maybe-import-regenerator](https://github.com/machty/ember-maybe-import-regenerator)).\n\n  ```js\n  test(\'some test\', async function(assert) {\n    this.render(hbs```{{my-component}}```);\n\n    await click(\'.my-button\');\n\n    assert.ok(\'something happened\');\n  });\n  ```\n\n- More realistic behaviour: When a user clicks on an element, `click` is not the only event fired.\n  In a real click, the sequence of events is `mousedown`, `focus`, `mouseup`, `click`. When a user\n  fills in an input the sequence of events is `focus`, `<mutate-value>`, `input`, and `change`.\n  The helpers provided by this addon fire those events in the right order, simulating more\n  closely how a real user would interact with the page.\n\n## Standard DOM elements returned using a `find`/`findAll` helpers\n\n- The `find` helper uses `document.querySelector` and will return a single `HTMLElement` or `null`.\n- The `findAll` helper uses `document.querySelectorAll` and returns an `Array` with zero or more elements.\n- Both `find` and `findAll` helpers query the DOM within `#ember-testing`.\n- To use a different value from your `config/environment.js` settings, add to `tests/test-helper.js`\xe2\x80\xa6\n\n```js\nimport { settings } from \'ember-native-dom-helpers\';\nimport config from \'../config/environment\';\nconst { APP: { rootElement } } = config;\n\nsettings.rootElement = rootElement || settings.rootElement;\n```\n\n### What if I prefer jQuery collections over native DOM?\n\nFear not. If you prefer to use jQuery, just wrap the result and do your thing:\n\n```js\nassert.equal($(find(\'.my-class\')).attr(\'aria-owns\'), \'#id123\')\n```\n\n## Testing an unsettled world\n\nThere is one new helper in this addon that enables some testing patterns that weren\'t\npreviously easy to perform using traditional methods.\n\nSince the `andThen` helper waits for the app to settle (no pending requests or promises),\nand every integration test interaction is wrapped in `Ember.run`, there is no easy way\nto test transient state, like loading substates or the state of a component, while some\npromise is pending, without an awkward setup of timeouts.\n\nNow, however, thanks to explicit usage of promises and the `waitUntil` helper, you can\nperform assertions on unsettled states:\n\n```js\nimport { visit, click, find, fillIn, waitUntil, currentURL } from \'ember-native-dom-helpers\';\n\nmoduleForAcceptance(\'Acceptance | Sign up\');\n\ntest(\'Usage awaiting the world to settle\', async function(assert) {\n  await visit(\'/login\');\n\n  await fillIn(\'.email\', \'007@gov.uk\');\n  await fillIn(\'.password\', \'goldeneye\');\n  let promise = click(\'.submit-btn\');\n\n  // We wait until the loading substate, that takes 200ms to appear, is displayed\n  await waitUntil(() => find(\'.substate-spinner\'));\n  assert.equal(find(\'.loading-substate-header\').textContent.trim(), \'Loading mission. Please wait, Mr. Bond\');\n\n  await promise; // now we wait until the dashboard is fully loaded\n  assert.equal(currentURL(), \'/dashboard\');\n  assert.equal(find(\'.section-header\').textContent, \'Main dashboard\');\n});\n```\n\n## I WANT IT NOW, IS THERE A SHORTCUT?\n\nYes, there is a codemod that will help you transform your test suite to this new style "automatically".\nCheck https://github.com/simonihmig/ember-native-dom-helpers-codemod.\n\nThe codemod can\'t make a *perfect* conversion, but it will do most of the work for you.\n\n## Helpers\n\n- `click(selectorOrHTMLElement, contextHTMLElement, eventOptions)`\n- `tap(selectorOrHTMLElement, eventOptions)`\n- `fillIn(selectorOrHTMLElement, text)`\n- `find(selector, contextHTMLElement)` (query for an element in test DOM, `#ember-testing`)\n- `findAll(selector, contextHTMLElement)` (query for elements in test DOM, `#ember-testing`)\n- `findWithAssert(selector, contextHTMLElement)` (same as `find`, but raises an Error if no result)\n- `keyEvent(selectorOrHTMLElement, type, keyCode, modifiers)` (type being `keydown`, `keyup` or `keypress`, modifiers being object with `{ ctrlKey: false, altKey: false, shiftKey: false, metaKey: false }`)\n- `triggerEvent(selectorOrHTMLElement, type, options)`\n- `focus(selectorOrHTMLElement)`\n- `blur(selectorOrHTMLElement)`\n- `scrollTo(selectorOrHTMLElement, x, y)`\n- `selectFiles(selectorOrHTMLElement, files = [])` (selects the file(s)/Blob(s) to the given `input[type=file]`. [Example](https://github.com/cibernox/ember-native-dom-helpers/blob/2f5f4d1df29d0d546505b515ca3e11721a86274b/tests/integration/select-files-test.js#L32-L35)\n- `visit(url)` (only available in acceptance. Raises an error in integration.)\n- `waitUntil(function, options)` (Polls the page until the given callback returns a truthy value, or timesout after 1s)\n- `waitFor(selector, options)` (Convenience for the most common use-case of `waitUntil`. It polls the page until the element with the given selector is on the page, or timesout after 1s. It accepts a `count: 3` option to await a specific number of matches.)\n- `currentURL()` Identical to the one provided by Ember.\n- `currentPath()` Identical to the one provided by Ember.\n- `currentRouteName()` Identical to the one provided by Ember.\n\n\n## Notes of `tap`\n\nIn order for `tap` to work, your browser has to support touch events. Desktop Chrome and Firefox\nhave touch events disabled unless the device emulation mode is on. To enable touch events in your\nCI, you need to configure testem like the `testem.js` file on this repo.\n'