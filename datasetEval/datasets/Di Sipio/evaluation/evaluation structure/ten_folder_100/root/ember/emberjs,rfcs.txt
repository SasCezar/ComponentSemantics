b'# Ember RFCs\n\nMany changes, including bug fixes and documentation improvements can be\nimplemented and reviewed via the normal GitHub pull request workflow.\n\nSome changes though are "substantial", and we ask that these be put\nthrough a bit of a design process and produce a consensus among the Ember\ncore teams.\n\nThe "RFC" (request for comments) process is intended to provide a\nconsistent and controlled path for new features to enter the framework.\n\n[Active RFC List](https://github.com/emberjs/rfcs/pulls)\n\n## When you need to follow this process\n\nYou need to follow this process if you intend to make "substantial"\nchanges to Ember, Ember Data, Ember CLI, their documentation, or any other\nprojects under the purview of the [Ember core teams](https://emberjs.com/team/).\nWhat constitutes a "substantial" change is evolving based on community norms,\nbut may include the following:\n\n   - A new feature that creates new API surface area, and would\n     require a [feature flag] if introduced.\n   - The removal of features that already shipped as part of the release\n     channel.\n   - The introduction of new idiomatic usage or conventions, even if they\n     do not include code changes to Ember itself.\n\nSome changes do not require an RFC:\n\n   - Rephrasing, reorganizing or refactoring\n   - Addition or removal of warnings\n   - Additions that strictly improve objective, numerical quality\ncriteria (speedup, better browser support)\n   - Additions only likely to be _noticed by_ other implementors-of-Ember,\ninvisible to users-of-Ember.\n\nIf you submit a pull request to implement a new feature without going\nthrough the RFC process, it may be closed with a polite request to\nsubmit an RFC first.\n\n## Gathering feedback before submitting\n\nIt\'s often helpful to get feedback on your concept before diving into the\nlevel of API design detail required for an RFC. **You may open an\nissue on this repo to start a high-level discussion**, with the goal of\neventually formulating an RFC pull request with the specific implementation\n design. We also highly recommend sharing drafts of RFCs in `#dev-rfc` on \nthe [Ember Discord](https://discord.gg/emberjs) for early feedback.\n\n## The process\n\nIn short, to get a major feature added to Ember, one must first get the\nRFC merged into the RFC repo as a markdown file. At that point the RFC\nis \'active\' and may be implemented with the goal of eventual inclusion\ninto Ember.\n\n* Fork the RFC repo http://github.com/emberjs/rfcs\n* Copy the appropriate template. For most RFCs, this is `0000-template.md`, \nfor deprecation RFCs it is `deprecation-template.md`.\nCopy the template file to `text/0000-my-feature.md`, where\n\'my-feature\' is descriptive. Don\'t assign an RFC number yet.\n* Fill in the RFC. Put care into the details: **RFCs that do not\npresent convincing motivation, demonstrate understanding of the\nimpact of the design, or are disingenuous about the drawbacks or\nalternatives tend to be poorly-received**.\n* Fill in the relevant core teams. Use the table below to map from projects to \nteams.\n* Submit a pull request. As a pull request the RFC will receive design\nfeedback from the larger community, and the author should be prepared\nto revise it in response.\n* Find a champion on the relevant core team. The champion is responsible for \nshepherding the RFC through the RFC process and representing it in core team \nmeetings.\n* Update the pull request to add the number of the PR to the filename and \nadd a link to the PR in the header of the RFC.\n* Build consensus and integrate feedback. RFCs that have broad support\nare much more likely to make progress than those that don\'t receive any\ncomments.\n* Eventually, the [core teams] will decide whether the RFC is a candidate\nfor inclusion in Ember.\n* RFCs that are candidates for inclusion in Ember will enter a "final comment\nperiod" lasting 7 days. The beginning of this period will be signaled with a\ncomment and tag on the RFC\'s pull request. Furthermore,\n[Ember\'s official Twitter account](https://twitter.com/emberjs) will post a\ntweet about the RFC to attract the community\'s attention.\n* An RFC can be modified based upon feedback from the [core teams] and community.\nSignificant modifications may trigger a new final comment period.\n* An RFC may be rejected by the [core teams] after public discussion has settled\nand comments have been made summarizing the rationale for rejection. The RFC \nwill enter a "final comment period to close" lasting 7 days. At the end of the \n"FCP to close" period, the PR will be closed.\n* An RFC may also be closed by the core teams if it is superseded by a merged\nRFC. In this case, a link to the new RFC should be added in a comment.\n* An RFC author may withdraw their own RFC by closing it themselves.\n* An RFC may be accepted at the close of its final comment period. A [core team]\nmember will merge the RFC\'s associated pull request, at which point the RFC will\nbecome \'active\'.\n\n### Relevant Teams \n\nThe RFC template requires indicating the relevant core teams. The following table \noffers a reference of teams responsible for each project. Please reach out for \nfurther guidance. \n\n|   Core Team   |    Project/Topics                                            |\n|---------------|--------------------------------------------------------------|\n| Ember.js      | Ember.js                                                     |\n| Ember Data    | Ember Data                                                   |\n| Ember CLI     | Ember CLI                                                    |\n| Learning      | Documentation, Website, learning experiences                 |\n| Steering      | Governance                                                   |\n \n### Finding a champion\n\nThe RFC Process requires finding a champion from the relevant core teams. The \nchampion is responsible for representing the RFC in team meetings, and for \nshepherding its progress. [Read more about the Champion\'s job](#champion-responsibilities)\n \n- Discord\nThe `dev-rfc` channel on the [Ember Discord](https://discord.gg/emberjs) is \nreserved for the discussion of RFCs.\nWe highly recommend circulating early drafts of your RFC in this channel to both \nreceive early feedback and to find a champion.  \n\n- Request on an issue in the RFC repo or on the RFC\nWe monitor the RFC repository. We will circulate requests for champions but highly \nrecommend discussing the RFC in Discord.  \n\n## The RFC life-cycle\n\nOnce an RFC becomes active the relevant teams will plan the feature and create \nissues in the relevant repositories.\nBecoming \'active\' is not a rubber stamp, and in particular still does not mean \nthe feature will ultimately be merged; it does mean that the core team has agreed \nto it in principle and are amenable to merging it.\n\nFurthermore, the fact that a given RFC has been accepted and is\n\'active\' implies nothing about what priority is assigned to its\nimplementation, nor whether anybody is currently working on it.\n\nModifications to active RFC\'s can be done in followup PR\'s. We strive\nto write each RFC in a manner that it will reflect the final design of\nthe feature; but the nature of the process means that we cannot expect\nevery merged RFC to actually reflect what the end result will be at\nthe time of the next major release; therefore we try to keep each RFC\ndocument somewhat in sync with the feature as planned,\ntracking such changes via followup pull requests to the document.\n\n## Implementing an RFC\n\nThe author of an RFC is not obligated to implement it. Of course, the\nRFC author (like any other developer) is welcome to post an\nimplementation for review after the RFC has been accepted.\n\nIf you are interested in working on the implementation for an \'active\'\nRFC, but cannot determine if someone else is already working on it,\nfeel free to ask (e.g. by leaving a comment on the associated issue).\n\n## For Core Team Members\n\n### Reviewing RFCs\n\nEach core team is responsible for reviewing open RFCs. The team must ensure \nthat if an RFC is relevant to their team\'s responsibilities the team is \ncorrectly specified in the \'Relevant Team(s)\' section of the RFC front-matter.\nThe team must also ensure that each RFC addresses any consequences, changes, or\nwork required in the team\'s area of responsibility.\n\nAs it is with the wider community, the RFC process is the time for \nteams and team members to push back on, encourage, refine, or otherwise comment \non proposals.\n\n### Referencing RFCs\n\n- When mentioning RFCs that have been merged, link to the merged version, \nnot to the pull-request.\n\n### Champion Responsibilities\n\n* achieving consensus from the team(s) to move the RFC through the stages of \nthe RFC process.\n* ensuring the RFC follows the RFC process.\n* shepherding the planning and implementation of the RFC. Before the RFC is \naccepted, the champion may remove themselves. The champion may find a replacement \nchampion at any time.\n\n### Helpful checklists for Champions\n\n#### Becoming champion of an RFC\n- [ ] Assign the RFC to yourself\n\n#### Moving to FCP to Merge\n- [ ] Achieve consensus to move to "FCP to Merge" from relevant core teams\n- [ ] Comment in the RFC to address any outstanding issues and to proclaim the \nstart of the FCP period\n- [ ] Tweet from `@emberjs` about the FCP \n- [ ] Ensure the RFC has had the filename and header updated with the PR number \n\n#### Move to FCP to Close\n- [ ] Achieve consensus to move to "FCP to Close" from relevant core teams\n- [ ] Comment in the RFC to explain the decision\n\n#### Closing an RFC\n- [ ] Comment about the end of the FCP period with no new info\n- [ ] Close the PR\n\n#### Merging an RFC\n- [ ] Achieve consensus to merge from relevant core teams\n- [ ] Ensure the RFC has had the filename and header updated with the PR number \n- [ ] Create a tracking card for the RFC implementation at {projects}\n- [ ] Update the RFC header with a link to the tracking\n- [ ] Merge\n- [ ] Update the RFC PR with a link to the merged RFC (The `Rendered` links often\ngo stale when the branch or fork is deleted)\n- [ ] Ensure relevant teams plan out what is necessary to implement\n- [ ] Put relevant issues on the tracking\n\n**Ember\'s RFC process owes its inspiration to the [Rust RFC process]**\n\n[Rust RFC process]: https://github.com/rust-lang/rfcs\n[core team]: http://emberjs.com/team/\n[feature flag]: http://emberjs.com/guides/contributing/adding-new-features/\n[core team notes]: https://github.com/emberjs/core-notes/tree/master/ember.js\n'