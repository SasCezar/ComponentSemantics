b'[![Build Status](https://travis-ci.org/simplabs/ember-simple-auth.svg?branch=master)](https://travis-ci.org/simplabs/ember-simple-auth)\n\n__[Ember Simple Auth API docs](http://ember-simple-auth.com/api/)__\n\n__[![Discord](https://img.shields.io/discord/480462759797063690.svg?logo=discord)](https://discord.gg/zT3asNS)__\n\nEmber Simple Auth __supports all Ember.js versions starting with 3.0.__\n\n#  Ember Simple Auth\n\n![Logo](http://ember-simple-auth.com/images/logo.png)\n\nEmber Simple Auth is a __lightweight library for implementing authentication/\nauthorization with [Ember.js](http://emberjs.com) applications__. It has\nminimal requirements with respect to application structure, routes etc. With\nits pluggable strategies it __can support all kinds of authentication and\nauthorization mechanisms__.\n\n# Table of Contents\n\n**Basic Information**\n\n* [What does it do?](#what-does-it-do)\n* [How does it work?](#how-does-it-work)\n* [Example App](#example-app)\n\n**Usage**\n\n* [Installation](#installation)\n* [Walkthrough](#walkthrough)\n\n**Core Feature Guides**\n\n* [The Session Service](#the-session-service)\n* [Authenticators](#authenticators)\n  * [Customizing an Authenticator](#customizing-an-authenticator)\n  * [Implementing a custom Authenticator](#implementing-a-custom-authenticator)\n* [Session Stores](#session-stores)\n  * [Store Types](#store-types)\n  * [Implementing a Custom Store](#implementing-a-custom-store)\n* [Testing](#testing)\n\n**Other Guides**\n\n* [Managing a current User](guides/managing-current-user.md)\n* [GitHub authorization with torii](guides/auth-torii-with-github.md)\n\n**Other Resources**\n\n* [Upgrading from Pre-1.0 versions](https://simplabs.com/blog/2015/11/27/updating-to-ember-simple-auth-1.0.html)\n* [API Documentation](http://ember-simple-auth.com/api/)\n\n## What does it do?\n\n* it __maintains a client side session__ and synchronizes its state across\n  multiple tabs/windows of the application\n* it __authenticates the session__ against the application\'s own server,\n  external providers like Facebook etc.\n* it is __easily customizable and extensible__\n\n## How does it work?\n\nEmber Simple Auth consists of __3 main building blocks__ - the session, a\nsession store and authenticators.\n\nThe __session service is the main interface to the library__. It provides\n__methods for authenticating and invalidating the session__ as well as for\nsetting and reading session data.\n\nThe __session store persists the session state__ so that it survives a page\nreload. It also synchronizes the session state across multiple tabs or windows\nof the application so that e.g. a logout in one tab or window also results in a\nlogout in all other tabs or windows of the application.\n\n__Authenticators authenticate the session__. An application can leverage\nmultiple authenticators to support multiple ways of authentication such as\nsending credentials to the application\'s own backend server, Facebook, github\netc.\n\n## Example App\n\n__Ember Simple Auth comes with a\n[dummy app](tests/dummy)\nthat implements a complete auth solution__ including authentication against\nthe application\'s own server as well as Facebook, authorization of Ember Data\nrequests and error handling. __Check out that dummy app for reference.__ To\nstart it, run\n\n```\ngit clone https://github.com/simplabs/ember-simple-auth.git\ncd ember-simple-auth\nyarn install && ember serve\n```\n\nand go to [http://localhost:4200](http://localhost:4200).\n\n## Installation\n\nInstalling the library is as easy as:\n\n```bash\nember install ember-simple-auth\n```\n\n### Upgrading from a pre-3.0 release?\nThe 3.0 release of ember-simple-auth removes previously deprecated code, introducing some breaking changes,\nbut thankfully there is an [upgrade guide](guides/upgrade-to-v3.md).\n\n## Walkthrough\n\nOnce the library is installed, __the session service can be injected wherever\nneeded in the application__. In order to display login/logout buttons\ndepending on the current session state, inject the service into the respective\ncontroller or component and __query its\n[`isAuthenticated` property](http://ember-simple-auth.com/api/classes/SessionService.html#property_isAuthenticated)\nin the template__:\n\n```js\n// app/controllers/application.js\nimport Controller from \'@ember/controller\';\nimport { inject as service } from \'@ember/service\';\n\nexport default Controller.extend({\n  session: service()\n\n  \xe2\x80\xa6\n});\n```\n\n```handlebars\n{{!-- app/templates/application.hbs --}}\n<div class="menu">\n  \xe2\x80\xa6\n  {{#if session.isAuthenticated}}\n    <a {{action \'invalidateSession\'}}>Logout</a>\n  {{else}}\n    {{#link-to \'login\'}}Login{{/link-to}}\n  {{/if}}\n</div>\n<div class="main">\n  {{outlet}}\n</div>\n```\n\nIn the `invalidateSession` action __call the\n[session service\'s `invalidate` method](http://ember-simple-auth.com/api/classes/SessionService.html#method_invalidate)\nto invalidate the session__ and log the user out:\n\n```js\n// app/controllers/application.js\nimport Controller from \'@ember/controller\';\nimport { inject as service } from \'@ember/service\';\n\nexport default Controller.extend({\n  session: service(),\n\n  \xe2\x80\xa6\n\n  actions: {\n    invalidateSession() {\n      this.get(\'session\').invalidate();\n    }\n  }\n});\n```\n\nFor authenticating the session, __the session service provides the\n[`authenticate` method](http://ember-simple-auth.com/api/classes/SessionService.html#method_authenticate)__\nthat takes the name of the authenticator to use as well as other arguments\ndepending on specific authenticator used. __To define an authenticator, add a\nnew file in `app/authenticators`__ and extend one of the authenticators the\nlibrary comes with, e.g.:\n\n```js\n// app/authenticators/oauth2.js\nimport OAuth2PasswordGrant from \'ember-simple-auth/authenticators/oauth2-password-grant\';\n\nexport default OAuth2PasswordGrant.extend();\n```\n\nWith that authenticator and a login form like\n\n```handlebars\n{{!-- app/templates/login.hbs --}}\n<form {{action \'authenticate\' on=\'submit\'}}>\n  <label for="identification">Login</label>\n  {{input id=\'identification\' placeholder=\'Enter Login\' value=identification}}\n  <label for="password">Password</label>\n  {{input id=\'password\' placeholder=\'Enter Password\' type=\'password\' value=password}}\n  <button type="submit">Login</button>\n  {{#if errorMessage}}\n    <p>{{errorMessage}}</p>\n  {{/if}}\n</form>\n```\n\nthe __session can be authenticated with the\n[session service\'s `authenticate` method](http://ember-simple-auth.com/api/classes/SessionService.html#method_authenticate)__:\n\n```js\n// app/controllers/login.js\nimport Controller from \'@ember/controller\';\nimport { inject as service } from \'@ember/service\';\n\nexport default Controller.extend({\n  session: service(),\n\n  actions: {\n    async authenticate() {\n      let { identification, password } = this.getProperties(\'identification\', \'password\');\n      try {\n        await this.session.authenticate(\'authenticator:oauth2\', identification, password);\n      } catch(error) {\n        this.set(\'errorMessage\', error.error || error);\n      }\n\n      if (this.session.isAuthenticated) {\n        // What to do with all this success?\n      }\n    }\n  }\n});\n```\n\n__The session service also provides the\n[`authenticationSucceeded`](http://ember-simple-auth.com/api/classes/SessionService.html#event_authenticationSucceeded)\nand\n[`invalidationSucceeded`](http://ember-simple-auth.com/api/classes/SessionService.html#event_invalidationSucceeded)\nevents__ that are triggered whenever the session is successfully authenticated\nor invalidated (which not only happens when the user submits the login form or\nclicks the logout button but also when the session is authenticated or\ninvalidated in another tab or window of the application). __To have these\nevents handled automatically, simply mix\n[`ApplicationRouteMixin`](http://ember-simple-auth.com/api/classes/ApplicationRouteMixin.html)\ninto the application route__:\n\n```js\n// app/routes/application.js\nimport Route from \'@ember/routing/route\';\nimport ApplicationRouteMixin from \'ember-simple-auth/mixins/application-route-mixin\';\n\nexport default Route.extend(ApplicationRouteMixin);\n```\n\nThe `ApplicationRouteMixin` automatically maps the session events to the\n[`sessionAuthenticated`](http://ember-simple-auth.com/api/classes/ApplicationRouteMixin.html#method_sessionAuthenticated)\nand\n[`sessionInvalidated`](http://ember-simple-auth.com/api/classes/ApplicationRouteMixin.html#method_sessionInvalidated)\nmethods it implements. The `sessionAuthenticated` method will transition to a\nconfigurable route while the `sessionInvalidated` method will reload the page\nto clear all potentially sensitive data from memory.\n\n__To make a route in the application accessible only when the session is\nauthenticated__, mix the\n[`AuthenticatedRouteMixin`](http://ember-simple-auth.com/api/classes/AuthenticatedRouteMixin.html)\ninto the respective route:\n\n```js\n// app/routes/protected.js\nimport Route from \'@ember/routing/route\';\nimport AuthenticatedRouteMixin from \'ember-simple-auth/mixins/authenticated-route-mixin\';\n\nexport default Route.extend(AuthenticatedRouteMixin);\n```\n\nThis will make the route (and all of its subroutes) transition to the `login`\nroute if the session is not authenticated. Add the `login` route in the router\nlike this:\n\n```js\n// app/router.js\nRouter.map(function() {\n  this.route(\'login\');\n});\n```\n\nThe route to transition to if the session is not authenticated can also be\n[overridden](https://ember-simple-auth.com/api/classes/AuthenticatedRouteMixin.html#property_authenticationRoute)\nto be another one than `login`.\n\nIt is recommended to nest all of an application\'s routes that require the\nsession to be authenticated under a common parent route:\n\n```js\n// app/router.js\nRouter.map(function() {\n  this.route(\'login\');\n  this.route(\'authenticated\', { path: \'\' }, function() {\n    // all routes that require the session to be authenticated\n  });\n});\n```\n\nTo prevent a route from being accessed when the session is authenticated (which\nmakes sense for login and registration routes for example), mix the\n[`UnauthenticatedRouteMixin`](http://ember-simple-auth.com/api/classes/UnauthenticatedRouteMixin.html)\ninto the respective route.\n\nIn order to add authorization information to requests, you can use the session service\nto check if the session is authenticated and access authentication/authorization data, e.g. a token.\n\nWe provide the `DataAdapterMixin` for Ember Data adapters, that injects the session service\nand also makes sure the session is invalidated if any of the requests returns an unauthorized response.\nIt can be used as:\n\n```js\n// app/adapters/application.js\nimport DS from \'ember-data\';\nimport DataAdapterMixin from \'ember-simple-auth/mixins/data-adapter-mixin\';\nimport { computed } from \'@ember/object\';\n\nconst { JSONAPIAdapter } = DS;\n\nexport default JSONAPIAdapter.extend(DataAdapterMixin, {\n  headers: computed(\'session.data.authenticated.access_token\', function() {\n    let headers = {};\n    if (this.session.isAuthenticated) {\n      // OAuth 2\n      headers[\'Authorization\'] = `Bearer ${this.session.data.authenticated.access_token}`;\n    }\n\n    return headers;\n  }),\n});\n```\n\n## The Session Service\n\nThe session service is the main interface to the library. It defines the\n`authenticate`, `invalidate` and `authorize` methods as well as the session\nevents as shown above.\n\nIt also provides the\n__[`isAuthenticated`](http://ember-simple-auth.com/api/classes/SessionService.html#property_isAuthenticated)\nas well as the\n[`data`]((http://ember-simple-auth.com/api/classes/SessionService.html#property_data))\nproperties. The latter can be used to get and set the session data__. While the\nspecial `authenticated` section in the session data contains the data that was\nacquired by the authenticator when it authenticated the session and is\nread-only, all other session data can be written and will also remain in the\nsession after it is invalidated. It can be used to store all kinds of client\nside data that needs to be persisted and synchronized across tabs and windows,\ne.g.:\n\n```js\nthis.get(\'session\').set(\'data.locale\', \'de\');\n```\n\n## Authenticators\n\n__Authenticators implement the concrete steps necessary to authenticate the\nsession.__ An application can leverage several authenticators for different\nkinds of authentication mechanisms (e.g. the application\'s own backend server,\nexternal authentication providers like Facebook etc.) while the session is only\never authenticated with one authenticator at a time. The authenticator to use\nis chosen when authentication is triggered via the name it is registered with\nin the Ember container:\n\n```js\nthis.get(\'session\').authenticate(\'authenticator:some\');\n```\n\nEmber Simple Auth comes with 4 authenticators:\n\n* [`OAuth2PasswordGrantAuthenticator`](http://ember-simple-auth.com/api/classes/OAuth2PasswordGrantAuthenticator.html): an OAuth 2.0 authenticator that implements the _"Resource Owner Password Credentials Grant Type"_\n* [`OAuth2ImplicitGrantAuthenticator`](http://ember-simple-auth.com/api/classes/OAuth2ImplicitGrantAuthenticator.html): an OAuth 2.0 authenticator that implements the _"Implicit Grant Type"_\n* [`DeviseAuthenticator`](http://ember-simple-auth.com/api/classes/DeviseAuthenticator.html): an authenticator compatible with the popular Ruby on Rails authentication plugin [devise](https://github.com/plataformatec/devise)\n* [`ToriiAuthenticator`](http://ember-simple-auth.com/api/classes/ToriiAuthenticator.html): an authenticator that wraps the [torii library](https://github.com/Vestorly/torii)\n\nTo use any of these authenticators in an application, define a new\nauthenticator in `app/authenticators`, extend if from the Ember Simple Auth\nauthenticator\n\n```js\n// app/authenticators/oauth2.js\nimport OAuth2PasswordGrantAuthenticator from \'ember-simple-auth/authenticators/oauth2-password-grant\';\n\nexport default OAuth2PasswordGrantAuthenticator.extend();\n```\n\nand invoke the session service\'s `authenticate` method with the respective\nname, specifying more arguments as needed by the authenticator:\n\n```js\nthis.get(\'session\').authenticate(\'authenticator:some\', data);\n```\n\n### Customizing an Authenticator\n\nAuthenticators are easily customized by setting the respective properties,\ne.g.:\n\n```js\n// app/authenticators/oauth2.js\nimport OAuth2PasswordGrantAuthenticator from \'ember-simple-auth/authenticators/oauth2-password-grant\';\n\nexport default OAuth2PasswordGrantAuthenticator.extend({\n  serverTokenEndpoint: \'/custom/endpoint\'\n});\n```\n\n### Implementing a custom Authenticator\n\nBesides extending one of the predefined authenticators, an application can also\nimplement fully custom authenticators. In order to do that, extend the\n[abstract base authenticator](http://ember-simple-auth.com/api/classes/BaseAuthenticator.html)\nthat Ember Simple Auth comes with and override the\n[`authenticate`](http://ember-simple-auth.com/api/classes/BaseAuthenticator.html#method_authenticate),\n[`restore`](http://ember-simple-auth.com/api/classes/BaseAuthenticator.html#method_restore)\nand (optionally)\n[`invalidate`](http://ember-simple-auth.com/api/classes/BaseAuthenticator.html#method_invalidate)\nmethods:\n\n```js\n// app/authenticators/custom.js\nimport Base from \'ember-simple-auth/authenticators/base\';\n\nexport default Base.extend({\n  restore(data) {\n    \xe2\x80\xa6\n  },\n  authenticate(options) {\n    \xe2\x80\xa6\n  },\n  invalidate(data) {\n    \xe2\x80\xa6\n  }\n});\n```\n\n## Session Stores\n\nEmber Simple Auth __persists the session state via a session store so it\nsurvives page reloads__. There is only one store per application that can be\ndefined in `app/session-stores/application.js`:\n\n```js\n// app/session-stores/application.js\nimport Cookie from \'ember-simple-auth/session-stores/cookie\';\n\nexport default Cookie.extend();\n```\n\nIf the application does not define a session store, the adaptive store which\nuses `localStorage` if that is available or a cookie if it is not, will be used\nby default. To customize the adaptive store, define a custom store in\n`app/session-stores/application.js` that extends it and overrides the\nproperties to customize.\n\n### Store Types\n\nEmber Simple Auth comes with 4 stores:\n\n#### Adaptive Store\n\n[The adaptive store](http://ember-simple-auth.com/api/classes/AdaptiveStore.html)\nstores its data in the browser\'s `localStorage` if that is available or in a\ncookie if it is not; __this is the default store__.\n\n#### `localStorage` Store\n\n[The `localStorage` store](http://ember-simple-auth.com/api/classes/LocalStorageStore.html)\nstores its data in the browser\'s `localStorage`. This is used by the adaptive\nstore if `localStorage` is available.\n\n#### Cookie Store\n\n[The Cookie store](http://ember-simple-auth.com/api/classes/CookieStore.html)\nstores its data in a cookie. This is used by the adaptive store if\n`localStorage` is not available. __This store must be used when the\napplication uses\n[FastBoot](https://github.com/ember-fastboot/ember-cli-fastboot).__\n\n#### `sessionStorage` Store\n\n[The `sessionStorage` store](http://ember-simple-auth.com/api/classes/SessionStorageStore.html)\nstores its data in the browser\'s `sessionStorage`. See [the Web Storage docs](\nhttps://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API) for details on\n`sessionStorage` and `localStorage`. [caniuse](http://caniuse.com/#feat=namevalue-storage)\nhas up-to-date information on browser support of `sessionStorage` and `localStorage`.\n\n#### Ephemeral Store\n\n[The ephemeral store](http://ember-simple-auth.com/api/classes/EphemeralStore.html)\nstores its data in memory and thus __is not actually persistent. This store is\nmainly useful for testing.__ Also the ephemeral store cannot keep multiple tabs\nor windows in sync as tabs/windows cannot share memory.\n\n### Customizing the Store\n\nThe session store is easily customized by setting the respective properties,\ne.g.:\n\n```js\n// app/session-stores/application.js\nimport AdaptiveStore from \'ember-simple-auth/session-stores/adaptive\';\n\nexport default AdaptiveStore.extend({\n  cookieName: \'my-apps-session-cookie\'\n});\n```\n\n### Implementing a custom Store\n\nBesides using one of the predefined session stores, an application can also\nimplement fully custom stores. In order to do that, extend the\n[abstract base session store](http://ember-simple-auth.com/api/classes/BaseStore.html)\nthat Ember Simple Auth comes with and implement the\n[`persist`](http://ember-simple-auth.com/api/classes/BaseStore.html#method_persist),\n[`restore`](http://ember-simple-auth.com/api/classes/BaseStore.html#method_restore)\nand\n[`clear`](http://ember-simple-auth.com/api/classes/BaseStore.html#method_clear)\nmethods:\n\n```js\n// app/session-stores/application.js\nimport Base from \'ember-simple-auth/session-stores/base\';\n\nexport default Base.extend({\n  persist() {\n    \xe2\x80\xa6\n  },\n\n  restore() {\n    \xe2\x80\xa6\n  }\n});\n```\n\n## FastBoot\n\nEmber Simple Auth works with FastBoot out of the box as long as the Cookie\nsession store is being used. In order to enable the cookie store, define it as\nthe application store:\n\n```js\n// app/session-stores/application.js\nimport CookieStore from \'ember-simple-auth/session-stores/cookie\';\n\nexport default CookieStore.extend();\n```\n\nIf you are using the\n[`OAuth2PasswordGrantAuthenticator`](http://ember-simple-auth.com/api/classes/OAuth2PasswordGrantAuthenticator.html),\nor\n[`DeviseAuthenticator`](http://ember-simple-auth.com/api/classes/DeviseAuthenticator.html),\nyou must add `node-fetch` to your list of FastBoot whitelisted dependencies\nin `package.json`:\n\n```json\n{\n  "fastbootDependencies": [\n    "node-fetch"\n  ]\n}\n```\n\n## Testing\n\nEmber Simple Auth comes with a __set of test helpers that can be used in acceptance tests__.\n\nOur helpers use the [more modern testing syntax](https://dockyard.com/blog/2018/01/11/modern-ember-testing)\nand therefore require `ember-cli-qunit` [4.2.0 or greater](https://github.com/ember-cli/ember-cli-qunit/blob/master/CHANGELOG.md#v420-2017-12-17)\nor `ember-qunit` 3.2.0 or greater.\n\nWe provide the following helpers:\n* `currentSession()` returns the current session.\n* `authenticateSession(sessionData)` authenticates the session asynchronously;\n  the optional `sessionData` argument can be used to mock the response of an\n  authentication request, to provide a specific authorization token or user\n  data.\n* `invalidateSession()` invalidates the session asynchronously.\n\nWhich can be used as shown in the following example:\n\n```js\nimport { module, test } from \'qunit\';\nimport { visit, currentURL } from \'@ember/test-helpers\';\nimport { setupApplicationTest } from \'ember-qunit\';\nimport { currentSession, authenticateSession, invalidateSession } from \'ember-simple-auth/test-support\';\n\nmodule(\'Acceptance | app test\', function(hooks) {\n  setupApplicationTest(hooks);\n\n  test(\'/login redirects to index if user is alread logged in\', async function(assert) {\n    await authenticateSession({\n      authToken: \'12345\',\n      otherData: \'some-data\'\n    });\n    await visit(\'/login\');\n\n    assert.equal(currentURL(), \'/\');\n\n    let sessionData = currentSession().get(\'data.authenticated\');\n    assert.equal(sessionData.authToken, \'12345\');\n    assert.equal(sessionData.otherData, \'some-data\');\n  });\n\n  test(\'/protected redirects to /login if user is not logged in\', async function(assert) {\n    await invalidateSession();\n\n    await visit(\'/protected\');\n\n    assert.equal(currentURL(), \'/login\');\n  });\n});\n```\n\nIf you\'re an `ember-mocha` user, we can recommend to check out this\n[example from the test suite of ember-simple-auth itself](https://github.com/simplabs/ember-simple-auth/blob/master/tests/acceptance/authentication-test.js).\n\n## Other guides\n\n* [Managing current User](guides/managing-current-user.md)\n\n## License\n\nEmber Simple Auth is developed by and &copy;\n[simplabs GmbH](http://simplabs.com) and contributors. It is\nreleased under the\n[MIT License](LICENSE).\n\nEmber Simple Auth is not an official part of [Ember.js](http://emberjs.com) and\nis not maintained by the Ember.js Core Team.\n'