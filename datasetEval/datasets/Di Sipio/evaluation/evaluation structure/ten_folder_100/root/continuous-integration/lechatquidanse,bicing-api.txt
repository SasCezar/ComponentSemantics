b'<p align="center">\n    <img alt="Bicing Log" title="Bicing API" src="./documentation/images/bicing-logo.png" width="20%">\n</p>\n\n<h3 align="center">\n  Bicing Statistics API\n</h3>\n\n<p align="center">\n  <a href="https://symfony.com/">Symfony 4</a> \n  <a href="https://en.wikipedia.org/wiki/Representational_state_transfer">REST API</a> \n  applying <a href="https://martinfowler.com/bliki/CQRS.html">CQRS</a> and\n  <a href="https://en.wikipedia.org/wiki/Domain-driven_design">DDD</a> patterns,\n  built with <a href="https://en.wikipedia.org/wiki/Continuous_integration">CI</a>,\n  driven by <a href="https://en.wikipedia.org/wiki/Behavior-driven_development">BDD</a>.\n</p>\n\n<p align="center">\n    <img src="https://img.shields.io/badge/php-%5E7.2-blue.svg" alt="PHP 7.2">\n    <img src="https://gitlab.com/lechatquidanse/public-badges/raw/master/bicing-statistics-api/reference.svg" alt="reference">\n    <img src="https://gitlab.com/lechatquidanse/public-badges/raw/master/bicing-statistics-api/build.svg" alt="build">\n    <img src="https://gitlab.com/lechatquidanse/public-badges/raw/master/bicing-statistics-api/coverage.svg" alt="coverage">\n    <img src="https://insight.symfony.com/projects/a32d65eb-beb5-4e22-b987-7b0af6457024/mini.svg" alt="insight">\n    <img src="https://img.shields.io/badge/contributions-welcome-orange.svg" alt="Contributions welcome">\n    <img src="https://img.shields.io/badge/license-MIT-lightgrey.svg" alt="License">\n</p>\n\n<h5 align="center">Get statistics and locations of bicycle stations.</h5>\n\n> The goal of this REST API is to ease customer\'s usage of large-scale public bicycle sharing system.  \n> By collecting data from different providers ([Bicing][bicing], [Velib][velib], ...) it gives powerful information (location to pick or return a bike, best time for picking up a bike, ...).  \n> Here is an example of a user interface project calling the API [/lechatquidanse/bicing-user-interface-app](https://github.com/lechatquidanse/bicing-user-interface-app)\n\n<p align="center">\n  <a href="#getting-started">Getting Started</a> \xe2\x80\xa2\n  <a href="#features">Features</a> \xe2\x80\xa2\n  <a href="#built-with">Built With</a> \xe2\x80\xa2\n  <a href="#development">Development</a> \xe2\x80\xa2\n  <a href="#coding-standard">Coding Standard</a> \xe2\x80\xa2\n  <a href="#ci-and-deployment">CI and Deployment</a>\n</p>\n\n![Bicing API RESTs examples](./documentation/images/bicing-api-curl-examples.png)\n\n## <a name="getting-started"></a> Getting Started\n### Prerequisites\n\nTo install and run the API you need [Docker Compose](docker-compose) and... that\'s all.\nPlease follow the [official documentation](docker-compose-install) to install it on your environment.\n\n### Installing\nClone the project and run the default installation:\n\n```bash\ngit clone https://github.com/lechatquidanse/bicing-api.git && cd bicing-api && make install\n```\nYour docker containers should have been successfully built and run.\n\n## Features\n\nMultiple features are proposed across 2 user interfaces, a REST API and command-line commands:\n\n### REST API:\n![Bicing API RESTs features](./documentation/images/features-rest.png)\n\nYou can find the concrete user stories written in [Gherkin][gherkin] in [features folder](./features).\nThese behaviour requirements are tested with [Behat][behat].\n\n### CLI:\n\n![Bicing API CLI features](./documentation/images/features-cli-min.png)\n\nTo run the project once installed:\n\n## <a name="built-with"></a> Built with\n\n- [PHP 7.2][php]\n- [Symfony 4.1][symfony]\n- [API-Platform][api-platform]\n- [Timescale Database][timescale]\n- [Docker][docker]\n\n## Development\nThe Makefile contains useful command for development purpose\n\n![Makefile helpul commands](./documentation/images/makefile-help-min.png)\n\n## <a name="coding-standard"></a> Coding standard\n\n### Domain Driven Design\n\nCode and folder structure follow Domain Driven Design (DDD).  \n\n    src\n        \\\n            |\\ Application     `Contains the Use Cases and the Processes of the domain system, commands, handlers and subscribers`\n            |\n            |\\ Domain          `The system business logic layer (Models, Events, Exceptions...)`\n            |\n            |\\ Infrastructure  `Its the implementation of the system outside the model. I.E: Persistence, Query, etc`\n            |\n            |\\ UserInterface   `It contains all the interfaces allowed for a user of the API (Cli, HTTP, Rest, etc)`\n\n### Command Query Responsibility Segregation\n\nIn this project, a use case is a command or a query with a single responsibility.\nThis use case is then handled by a handler for a command or a data provider for a query.\n\nCommands are handled by a message bus ([SimpleBus][simplebus]) where a command is link to one handler.   \nFor example, to create a station in database:\n\n![CQRS command handler](./documentation/images/command-handler-min.png)\n\nIf you want to learn more and look for other DDD and CQRS implementation, [here is a great Symfony4 boilerplate](https://github.com/jorge07/symfony-4-es-cqrs-boilerplate) from [jorge07](https://github.com/jorge07).\n\n## <a name="ci-and-deployment"></a> CI and Deployment\n\nCI and deployment can be handled through [Gitlab][gitlab] and [Docker][docker] thanks to [.gitlab-ci.yml](./.gitlab-ci.yml)\nIt contains 3 different stages.\n\n### Test\n\nEnvironment \'test\' is triggered when a \'feature/*\' branch is pushed to the repository. \nIt will then install project and launch qa tools. \n\n### Build\n\nEnvironment \'build\' is triggered when a \'release/*\' branch is pushed to the repository. \nIt will then install project, launch qa tools and then build and push a docker image on a registry if no error occurred.\n\n### Production\n\nThis manual action, will pull the image build by the previous step and update the specific container.\n\n![Continuous Integration](./documentation/images/continuous-integration.png)\n\n## License\n\n[MIT](https://opensource.org/licenses/MIT)\n\n> St\xc3\xa9phane EL MANOUNI &nbsp;&middot;&nbsp;\n> [Linkedin](https://www.linkedin.com/in/stephane-el-manouni/)\n\n> Pascal Borreli &nbsp;&middot;&nbsp; [GitHub](https://github.com/pborreli/)\n\n[api-platform]: https://api-platform.com/\n[behat]: http://behat.org/en/latest/\n[bicing]: https://www.bicing.cat/\n[docker]: https://www.docker.com/\n[docker-compose]: https://docs.docker.com/compose/\n[docker-compose-install]: https://docs.docker.com/compose/install\n[gherkin]: https://docs.cucumber.io/gherkin/\n[gitlab]: https://gitlab.com/\n[php]: http://php.net/\n[simplebus]: https://github.com/SimpleBus/SimpleBus\n[symfony]: http://symfony.com/\n[timescale]: http://www.timescale.com/\n[velib]: https://www.velib-metropole.fr/\n[wiki-DDD]: https://en.wikipedia.org/wiki/Domain-driven_design\n'