b'# Jenkins API Client for Go\n\n[![GoDoc](https://godoc.org/github.com/bndr/gojenkins?status.svg)](https://godoc.org/github.com/bndr/gojenkins)\n[![Go Report Cart](https://goreportcard.com/badge/github.com/bndr/gojenkins)](https://goreportcard.com/report/github.com/bndr/gojenkins)\n[![Build Status](https://travis-ci.org/bndr/gojenkins.svg?branch=master)](https://travis-ci.org/bndr/gojenkins)\n\n## About\n\nJenkins is the most popular Open Source Continuous Integration system. This Library will help you interact with Jenkins in a more developer-friendly way.\n\nThese are some of the features that are currently implemented:\n\n* Get information on test-results of completed/failed build\n* Ability to query Nodes, and manipulate them. Start, Stop, set Offline.\n* Ability to query Jobs, and manipulate them.\n* Get Plugins, Builds, Artifacts, Fingerprints\n* Validate Fingerprints of Artifacts\n* Get Current Queue, Cancel Tasks\n* etc. For all methods go to GoDoc Reference.\n\n## Installation\n\n    go get github.com/bndr/gojenkins\n\n## Usage\n\n```go\n\nimport "github.com/bndr/gojenkins"\n\njenkins := gojenkins.CreateJenkins(nil, "http://localhost:8080/", "admin", "admin")\n// Provide CA certificate if server is using self-signed certificate\n// caCert, _ := ioutil.ReadFile("/tmp/ca.crt")\n// jenkins.Requester.CACert = caCert\n_, err := jenkins.Init()\n\n\nif err != nil {\n  panic("Something Went Wrong")\n}\n\nbuild, err := jenkins.GetJob("job_name")\nif err != nil {\n  panic("Job Does Not Exist")\n}\n\nlastSuccessBuild, err := build.GetLastSuccessfulBuild()\nif err != nil {\n  panic("Last SuccessBuild does not exist")\n}\n\nduration := lastSuccessBuild.GetDuration()\n\njob, err := jenkins.GetJob("jobname")\n\nif err != nil {\n  panic("Job does not exist")\n}\n\njob.Rename("SomeotherJobName")\n\nconfigString := `<?xml version=\'1.0\' encoding=\'UTF-8\'?>\n<project>\n  <actions/>\n  <description></description>\n  <keepDependencies>false</keepDependencies>\n  <properties/>\n  <scm class="hudson.scm.NullSCM"/>\n  <canRoam>true</canRoam>\n  <disabled>false</disabled>\n  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>\n  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>\n  <triggers class="vector"/>\n  <concurrentBuild>false</concurrentBuild>\n  <builders/>\n  <publishers/>\n  <buildWrappers/>\n</project>`\n\nj.CreateJob(configString, "someNewJobsName")\n\n\n```\n\nAPI Reference: https://godoc.org/github.com/bndr/gojenkins\n\n## Examples\n\nFor all of the examples below first create a jenkins object\n```go\nimport "github.com/bndr/gojenkins"\n\njenkins, _ := gojenkins.CreateJenkins(nil, "http://localhost:8080/", "admin", "admin").Init()\n```\n\nor if you don\'t need authentication:\n\n```go\njenkins, _ := gojenkins.CreateJenkins(nil, "http://localhost:8080/").Init()\n```\n\nyou can also specify your own `http.Client` (for instance, providing your own SSL configurations):\n\n```go\nclient := &http.Client{ ... }\njenkins, := gojenkins.CreateJenkins(client, "http://localhost:8080/").Init()\n```\n\nBy default, `gojenkins` will use the `http.DefaultClient` if none is passed into the `CreateJenkins()`\nfunction.\n\n### Check Status of all nodes\n\n```go\nnodes := jenkins.GetAllNodes()\n\nfor _, node := range nodes {\n\n  // Fetch Node Data\n  node.Poll()\n\tif node.IsOnline() {\n\t\tfmt.Println("Node is Online")\n\t}\n}\n\n```\n\n### Get all Builds for specific Job, and check their status\n\n```go\njobName := "someJob"\nbuilds, err := jenkins.GetAllBuildIds(jobName)\n\nif err != nil {\n  panic(err)\n}\n\nfor _, build := range builds {\n  buildId := build.Number\n  data, err := jenkins.GetBuild(jobName, buildId)\n\n  if err != nil {\n    panic(err)\n  }\n\n\tif "SUCCESS" == data.GetResult() {\n\t\tfmt.Println("This build succeeded")\n\t}\n}\n\n// Get Last Successful/Failed/Stable Build for a Job\njob, err := jenkins.GetJob("someJob")\n\nif err != nil {\n  panic(err)\n}\n\njob.GetLastSuccessfulBuild()\njob.GetLastStableBuild()\n\n```\n\n### Get Current Tasks in Queue, and the reason why they\'re in the queue\n\n```go\n\ntasks := jenkins.GetQueue()\n\nfor _, task := range tasks {\n\tfmt.Println(task.GetWhy())\n}\n\n```\n\n### Create View and add Jobs to it\n\n```go\n\nview, err := jenkins.CreateView("test_view", gojenkins.LIST_VIEW)\n\nif err != nil {\n  panic(err)\n}\n\nstatus, err := view.AddJob("jobName")\n\nif status != nil {\n  fmt.Println("Job has been added to view")\n}\n\n```\n\n### Create nested Folders and create Jobs in them\n\n```go\n\n// Create parent folder\npFolder, err := jenkins.CreateFolder("parentFolder")\nif err != nil {\n  panic(err)\n}\n\n// Create child folder in parent folder\ncFolder, err := jenkins.CreateFolder("childFolder", pFolder.GetName())\nif err != nil {\n  panic(err)\n}\n\n// Create job in child folder\nconfigString := `<?xml version=\'1.0\' encoding=\'UTF-8\'?>\n<project>\n  <actions/>\n  <description></description>\n  <keepDependencies>false</keepDependencies>\n  <properties/>\n  <scm class="hudson.scm.NullSCM"/>\n  <canRoam>true</canRoam>\n  <disabled>false</disabled>\n  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>\n  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>\n  <triggers class="vector"/>\n  <concurrentBuild>false</concurrentBuild>\n  <builders/>\n  <publishers/>\n  <buildWrappers/>\n</project>`\n\njob, err := jenkins.CreateJobInFolder(configString, "jobInFolder", pFolder.GetName(), cFolder.GetName())\nif err != nil {\n  panic(err)\n}\n\nif job != nil {\n\tfmt.Println("Job has been created in child folder")\n}\n\n```\n\n### Get All Artifacts for a Build and Save them to a folder\n\n```go\n\njob, _ := jenkins.GetJob("job")\nbuild, _ := job.GetBuild(1)\nartifacts := build.GetArtifacts()\n\nfor _, a := range artifacts {\n\ta.SaveToDir("/tmp")\n}\n\n```\n\n### To always get fresh data use the .Poll() method\n\n```go\n\njob, _ := jenkins.GetJob("job")\njob.Poll()\n\nbuild, _ := job.getBuild(1)\nbuild.Poll()\n\n```\n\n## Testing\n\n    go test\n\n## Contribute\n\nAll Contributions are welcome. The todo list is on the bottom of this README. Feel free to send a pull request.\n\n## TODO\n\nAlthough the basic features are implemented there are many optional features that are on the todo list.\n\n* Kerberos Authentication\n* CLI Tool\n* Rewrite some (all?) iterators with channels\n\n## LICENSE\n\nApache License 2.0\n'