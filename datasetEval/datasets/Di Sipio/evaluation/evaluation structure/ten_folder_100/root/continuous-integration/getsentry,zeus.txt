b'<p align="center">\n    <img src="https://user-images.githubusercontent.com/1433023/32629198-3c6f225e-c54d-11e7-96db-99fd22709a1b.png" width="271">\n</p>\n\n# Zeus\n\n**This project is under development.**\n\nZeus is a frontend and analytics provider for CI solutions. It is inspired by the work done at Dropbox on [Changes](https://github.com/dropbox/changes/).\n\n## User Guide\n\nCurrently Zeus publicly supports GitHub.com as well as easy integration with Travis CI.\n\nTo add a new project:\n\n1. Add a repository (via settings).\n2. Go to the repository\'s settings and generate a new Hook.\n3. Bind ZEUS_HOOK_BASE as a secret environment variable in Travis.\n4. Update your .travis.yml to include the Zeus webhook.\n5. (Optional) Update your .travis.yml to include artifact upload.\n6. (Optional, not yet recommended) Update your .travis.yml to disable Travis\' native email notifications.\n\nOnce you\'ve added a project Zeus will automatically update with details from any builds you\'ve run.\n\nSome quick caveats:\n\n- The project is still pretty early on, and may break/change without warning.\n- travis-ci.com and GitHub Enterprise are not yet supported.\n- Notifications will only be triggered for users which have authenticated against Zeus.\n\nIf you want to use Zeus with a build system that\'s not currently supported, see the details on "Hooks" in the documentation.\n\n### Supported Artifact Types\n\nWhile you can upload any kind of Artifact to zeus (e.g. `.html` output), the platform has knowledge of certain types\nand will grant additional functionality if they\'re present.\n\nThe recommended way to support artifacts is to configure a post-build step (on both failure and success) to do something similar to the following:\n\n```bash\nnpm install -g @zeus-ci/cli\n$(npm bin -g)/zeus upload -t "application/x-junit+xml" jest.junit.xml\n$(npm bin -g)/zeus upload -t "application/x-cobertura+xml" coverage.xml\n```\n\n#### Code Coverage\n\n- application/x-clover+xml\n- application/x-cobertura+xml\n\n#### xUnit\n\n- application/x-bitten+xml\n- application/x-junit+xml\n- application/x-xunit+xml\n\n#### Style Checks\n\n- application/x-checkstyle+xml\n- text/x-pep8\n- text/x-pycodestyle\n- test/x-pylint\n\n#### Webpack Stats\n\nWebpack stats can be generated with:\n\n```bash\nwebpack --profile --json > webpack-stats.json\n```\n\nThey should be submitted with the `application/x-webpack-stats+json` type.\n\n## Contributing\n\n### Requirements\n\n- Python 3.7\n- Node (and [Volta](https://volta.sh/))\n- Postgres 9.4+\n\nNote: If you\'re using pyenv for Python and macOS Mojave and having issues installing 3.7.1, take a look here:\n\nhttps://github.com/pyenv/pyenv/issues/1219\n\n### Setup\n\n```shell\n# install poetry\ncurl -sSL https://raw.githubusercontent.com/sdispater/poetry/0.12.10/get-poetry.py | python\n\n# load dependencies\nmake\n\n# initialize config\npoetry run zeus init\n```\n\nNote, before running any future Python commands (including `zeus`), you\'ll\nneed to activate the environment:\n\n```shell\npoetry shell\n```\n\nYou can also setup [direnv](https://direnv.net/) to automatically activate the environment.\n\nOnce dependencies are resolved, bootstrap the database (see `Makefile` for details):\n\n```shell\nmake db\n```\n\nFinally, launch the webserver:\n\n```shell\nzeus devserver\n\n# or alternatively, with workers:\nzeus devserver --workers\n```\n\n### Getting some data\n\n```shell\n$ zeus repos add https://github.com/getsentry/zeus.git\n```\n\nOnce you\'ve authenticated, give yourself access to the repository:\n\n```shell\n$ zeus repos access add https://github.com/getsentry/zeus.git [you@example.com]\n```\n\nAdditionally, you can generate some mock data:\n\n```shell\n$ zeus mocks load-all\n```\n\n### Layout\n\n```\nzeus\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 setup.py                // server dependencies\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 zeus                    // server code\n|   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 artifacts           // artifact handlers\n|   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 api\n|   |   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 resources       // api endpoints/resources\n|   |   \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 schemas         // api serializer/schemas\n|   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 cli                 // command line utilities\n|   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 models              // database schema\n|   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 storage             // file storage implementations\n|   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 tasks               // async task definitions\n|   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 vcs                 // version control system implementations\n|   \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 web                 // server-rendered web views\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 templates               // server-rendered templates\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 public                  // general static assets\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 package.json            // web client dependencies\n\xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 webapp                  // web client\n    \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 actions             // redux actions\n    \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 components          // react components\n    \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 reducers            // redux reducers\n    \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 routes.js           // routes (react-router)\n    \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 pages.js            // react components (pages)\n```\n\n### Data Model\n\n- Most models contain a GUID (UUID) primary key.\n- Some generalized models (such as `ItemStat`) are keyed by GUID, and do not contain backrefs or constraints.\n- Access is controlled at the repository level, and is generally enforced if you use the `{ModelClass}.query` utilities.\n- Refs are unresolved (pointers to shas). They are often resolved asynchronously. Models containing a sha will also often contain a parallel ref field.\n\n```\nzeus\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 ApiToken\n|   \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 ApiTokenRepositoryAccess\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 Hook\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 Repository\n|   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 RepositoryAccess\n|   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 ItemOption\n|   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 Build\n|   |   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 ItemStat\n|   |   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 Source\n|   |   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 FileCoverage\n|   |   \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 Job\n|   |       \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 Artifact\n|   |       \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 ItemStat\n|   |       \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 TestCase\n|   |           \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 Artifact\n|   |           \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 ItemStat\n|   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 ChangeRequest\n|   |   \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 Revision\n|   \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 Source\n|       \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 Author\n|       \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 Patch\n|       \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 Revision\n|           \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 Author\n\xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 User\n    \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 Email\n    \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 Identity\n```\n\n### Hooks\n\nA subset of APIs are exposed using simple hook credentials. These credentials are coupled to a provider (e.g. `travis-ci`) and a single repository.\n\nTo create a new hook:\n\n```\nzeus hooks add https://github.com/getsentry/zeus.git travis-ci\n```\n\nUsing the subpath, you\'ll be able to access several endpoints:\n\n- `{prefix}/builds/{build-external-id}`\n- `{prefix}/builds/{build-external-id}/jobs/{job-external-id}`\n- `{prefix}/builds/{build-external-id}/jobs/{job-external-id}/artifacts`\n\nThe prefix will be generated for you as part of the new hook, and is made up of the Hook\'s GUID and it\'s signature:\n\nhttp://example.com/hooks/{hook-id}/{hook-signature}/{path}\n\nEach endpoint takes an external ID, which is used as a unique query parameter. The constraints are coupled to the parent object. For example, to create or patch a build:\n\n```\nPOST http://example.com/hooks/{hook-id}/{hook-signature}/builds/abc\n```\n\nThis will look for a Build object with the following characteristics:\n\n- `provider={Hook.provider}`\n- `external_id=abc`\n- `repository_id={Hook.repository_id}`\n\nIf a match is found, it will be updated with the given API parameters. If it isn\'t found, it will be created. All of these operations are treated like a standard UPSERT (UPDATE IF EXISTS or INSERT).\n\nThe process for publishing data generally looks like this:\n\n1. if applicable, upsert a change request and its source association\n2. upsert the build\'s basic parameters\n3. upsert the detailed job parameters\n4. publish artifacts\n\nThese actions can be also performed manually (without using the native webhooks) with `zeus-cli` (recommended) or `curl`.\n\n### Updating data with `zeus-cli`\n\nMore information (installation instructions, documentation) about `zeus-cli` can be found on its project\'s page: https://github.com/getsentry/zeus-cli\n\n`zeus-cli` is a command line tool that facilitates interaction with Zeus API for actions such as updating jobs or uploading artifacts.\n\nThe following command creates a build and a job for a given `git` revision:\n\n```shell\nzeus job update -b $MY_BUILD_ID -j $MY_JOB_ID  --ref=$MY_REF_ID\n```\n\nAnd here\'s how you upload an artifact:\n\n```shell\nzeus upload -b $MY_BUILD_ID -j $MY_JOB_ID -t \'text/xml+coverage\' coverage.xml\n```\n\n### Updating data with `curl`\n\nHere\'s an example of how you can publish job details without the native webhooks with `curl` from Travis:\n\n```shell\n#!/bin/bash -eu\nif [[ "$TRAVIS_PULL_REQUEST" != "false" ]]; then\n    BUILD_LABEL="PR #${TRAVIS_PULL_REQUEST}"\nelse\n    BUILD_LABEL=""\nfi\n\n# ensure the build exists\ncurl $ZEUS_HOOK_BASE/builds/$TRAVIS_BUILD_NUMBER \\\n    -X POST \\\n    -H \'Content-Type: application/json\' \\\n    -d "{\\"label\\": \\"${BUILD_LABEL}\\", \\"ref\\": \\"$TRAVIS_COMMIT\\", \\"url\\": \\"https://travis-ci.org/${TRAVIS_REPO_SLUG}/builds/${TRAVIS_BUILD_ID}\\"}"\n\n# upsert current job details\ncurl $ZEUS_HOOK_BASE/builds/$TRAVIS_BUILD_NUMBER/jobs/$TRAVIS_JOB_NUMBER \\\n    -X POST \\\n    -H \'Content-Type: application/json\' \\\n    -d "{\\"status\\": \\"$1\\", \\"result\\": \\"$2\\", \\"url\\": \\"https://travis-ci.org/${TRAVIS_REPO_SLUG}/jobs/${TRAVIS_JOB_ID}\\", \\"allow_failure\\": ${TRAVIS_ALLOW_FAILURE}}"\n```\n\nFrom there you can submit artifacts using `zeus-cli` and its standard mechanisms.\n'