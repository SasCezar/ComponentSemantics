b'[![npm version](https://badge.fury.io/js/serverless-plugin-canary-deployments.svg)](https://badge.fury.io/js/serverless-plugin-canary-deployments)\n\n# Serverless Plugin Canary Deployments\n\nA Serverless plugin to implement canary deployments of Lambda functions, making use of the [traffic shifting feature](https://docs.aws.amazon.com/lambda/latest/dg/lambda-traffic-shifting-using-aliases.html) in combination with [AWS CodeDeploy](https://docs.aws.amazon.com/lambda/latest/dg/automating-updates-to-serverless-apps.html)\n\n## Contents\n\n- [Installation](#installation)\n- [Usage](#usage)\n- [Configuration](#configuration)\n- [How it works](#how)\n- [Limitations](#limitations)\n- [License](#license)\n\n## <a name="installation"></a>Installation\n\n`npm i --save-dev serverless-plugin-canary-deployments`\n\n## <a name="usage"></a>Usage\n\nTo enable gradual deployments for Lambda functions, your `serverless.yml` should look like this:\n\n```yaml\nservice: canary-deployments\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - codedeploy:*\n      Resource:\n        - "*"\n\nplugins:\n  - serverless-plugin-canary-deployments\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http: GET hello\n    deploymentSettings:\n      type: Linear10PercentEvery1Minute\n      alias: Live\n      preTrafficHook: preHook\n      postTrafficHook: postHook\n      alarms:\n        - FooAlarm          # When a string is provided, it expects the alarm Logical ID\n        - name: BarAlarm    # When an object is provided, it expects the alarm name in the name property\n\n  preHook:\n    handler: hooks.pre\n  postHook:\n    handler: hooks.post\n```\n\nYou can see a working example in the [example folder](./example/).\n\n## <a name="configuration"></a>Configuration\n\n* `type`: (required) defines how the traffic will be shifted between Lambda function versions. It must be one of the following:\n  - `Canary10Percent5Minutes`: shifts 10 percent of traffic in the first increment. The remaining 90 percent is deployed five minutes later.\n  - `Canary10Percent10Minutes`: shifts 10 percent of traffic in the first increment. The remaining 90 percent is deployed 10 minutes later.\n  - `Canary10Percent15Minutes`: shifts 10 percent of traffic in the first increment. The remaining 90 percent is deployed 15 minutes later.\n  - `Canary10Percent30Minutes`: shifts 10 percent of traffic in the first increment. The remaining 90 percent is deployed 30 minutes later.\n  - `Linear10PercentEvery1Minute`: shifts 10 percent of traffic every minute until all traffic is shifted.\n  - `Linear10PercentEvery2Minutes`: shifts 10 percent of traffic every two minutes until all traffic is shifted.\n  - `Linear10PercentEvery3Minutes`: shifts 10 percent of traffic every three minutes until all traffic is shifted.\n  - `Linear10PercentEvery10Minutes`: shifts 10 percent of traffic every 10 minutes until all traffic is shifted.\n  - `AllAtOnce`: shifts all the traffic to the new version, useful when you only need to execute the validation hooks.\n* `alias`: (required) name that will be used to create the Lambda function alias.\n* `preTrafficHook`: (optional) validation Lambda function that runs before traffic shifting. It must use the CodeDeploy SDK to notify about this step\'s success or failure (more info [here](https://docs.aws.amazon.com/codedeploy/latest/userguide/reference-appspec-file-structure-hooks.html)).\n* `postTrafficHook`: (optional) validation Lambda function that runs after traffic shifting. It must use the CodeDeploy SDK to notify about this step\'s success or failure (more info [here](https://docs.aws.amazon.com/codedeploy/latest/userguide/reference-appspec-file-structure-hooks.html))\n* `alarms`: (optional) list of CloudWatch alarms. If any of them is triggered during the deployment, the associated Lambda function will automatically roll back to the previous version.\n* `triggerConfigurations`: (optional) list of CodeDeploy Triggers. See more details in the [CodeDeploy TriggerConfiguration Documentation](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-codedeploy-deploymentgroup-triggerconfig.html), or [this CodeDeploy notifications guide](https://docs.aws.amazon.com/codedeploy/latest/userguide/monitoring-sns-event-notifications-create-trigger.html) for example uses\n\n### Default configurations\n\nYou can set default values for all functions in a top-level custom deploymentSettings section.  E.g.:\n\n```yaml\ncustom:\n  deploymentSettings:\n    codeDeployRole: some_arn_value\n    stages:\n      - dev\n      - prod\n\nfunctions:\n  ...\n```\n\nSome values are only available as top-level configurations.  They are:\n\n* `codeDeployRole`: (optional) an ARN specifying an existing IAM role for CodeDeploy.  If absent, one will be created for you.  See the [codeDeploy policy](./example-code-deploy-policy.json) for an example of what is needed.\n* `stages`: (optional) list of stages where you want to deploy your functions gradually. If not present, it assumes that are all of them.\n\n## <a name="how"></a>How it works\n\nThe plugin relies on the [AWS Lambda traffic shifting feature](https://docs.aws.amazon.com/lambda/latest/dg/lambda-traffic-shifting-using-aliases.html) to balance traffic between versions and [AWS CodeDeploy](https://docs.aws.amazon.com/lambda/latest/dg/automating-updates-to-serverless-apps.html) to automatically update its weight. It modifies the `CloudFormation` template generated by [Serverless](https://github.com/serverless/serverless), so that:\n\n1. It creates a Lambda function Alias for each function with deployment settings.\n2. It creates a CodeDeploy Application and adds a [CodeDeploy DeploymentGroup](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codedeploy-deploymentgroup.html) per Lambda function, according to the specified settings.\n3. It modifies events that trigger Lambda functions, so that they invoke the newly created alias.\n\n## <a name="limitations"></a>Limitations\n\nFor now, the plugin only works with Lambda functions invoked by\n\n* API Gateway\n* Stream based (such as the triggered by Kinesis, DynamoDB Streams or SQS)\n* SNS based events\n* S3 events\n* CloudWatch Scheduled events\n* CloudWatch Logs\n* IoT rules\n\n[More events](https://serverless.com/framework/docs/providers/aws/events/) will be added soon.\n\n## <a name="license"></a>License\n\nISC \xc2\xa9 [David Garc\xc3\xada](https://github.com/davidgf)\n'