b'<p align="center">\n<br>\n<img src="https://github.com/k1LoW/tbls/raw/master/logo.png" width="200" alt="tbls">\n<br><br>\n</p>\n\n[![Build Status](https://github.com/k1LoW/tbls/workflows/build/badge.svg)](https://github.com/k1LoW/tbls/actions) [![GitHub release](https://img.shields.io/github/release/k1LoW/tbls.svg)](https://github.com/k1LoW/tbls/releases) [![codecov](https://codecov.io/gh/k1LoW/tbls/branch/master/graph/badge.svg)](https://codecov.io/gh/k1LoW/tbls) [![Go Report Card](https://goreportcard.com/badge/github.com/k1LoW/tbls)](https://goreportcard.com/report/github.com/k1LoW/tbls) [![Docker Build](https://img.shields.io/docker/cloud/build/k1low/tbls)](https://hub.docker.com/r/k1low/tbls)\n\n`tbls` is a CI-Friendly tool for document a database, written in Go.\n\nKey features of `tbls` are:\n\n- **Document a database automatically in GitHub Friendly Markdown format**\n- **Single binary**\n- **CI-Friendly**\n- **Work as linter for database**\n\n### Table of Contents\n\n  - [Quick Start](#quick-start)\n  - [Install](#install)\n  - [Getting Started](#getting-started)\n    - [Document a database](#document-a-database)\n    - [Diff database and document](#diff-database-and-document)\n    - [Lint a database](#lint-a-database)\n    - [Continuous Integration](#continuous-integration)\n  - [Configuration](#configration)\n    - [DSN](#dsn)\n      - [Support Database](#support-database)\n    - [Document path](#document-path)\n    - [Table format](#table-format)\n    - [ER diagram](#er-diagram)\n    - [Exclude tables](#exclude-tables)\n    - [Lint](#lint)\n    - [Comments](#comments)\n    - [Relations](#relations)\n  - [Output formats](#output-formats)\n  - [Command arguments](#command-arguments)\n  - [Environment variables](#environment-variables)\n\n<br>\n\n## Quick Start\n\nDocument a database with one command.\n\n``` console\n$ tbls doc postgres://dbuser:dbpass@hostname:5432/dbname\n```\n\nUsing docker image.\n\n```console\n$ docker run --rm -v $PWD:/work k1low/tbls doc postgres://dbuser:dbpass@hostname:5432/dbname\n```\n\n## Install\n\n**homebrew tap:**\n\n```console\n$ brew install k1LoW/tap/tbls\n```\n\n**manually:**\n\nDownload binary from [releases page](https://github.com/k1LoW/tbls/releases)\n\n**go get:**\n\n```console\n$ go get github.com/k1LoW/tbls\n```\n\n**docker:**\n\n```console\n$ docker pull k1low/tbls:latest\n```\n\n## Getting Started\n\n### Document a database\n\nAdd `.tbls.yml` file to your repository.\n\n``` yaml\n# .tbls.yml\n\n# DSN (Database Source Name) to connect database\ndsn: postgres://dbuser:dbpass@localhost:5432/dbname\n\n# Path to generate document\n# Default is `dbdoc`\ndocPath: doc/schema\n```\n\n> **Notice:** If you are using a symbol such as `#` `<` in database password, URL-encode the password\n\nRun `tbls doc` to analyzes the database and generate document in GitHub Friendly Markdown format.\n\n``` console\n$ tbls doc\n```\n\nCommit `.tbls.yml` and the document.\n\n``` console\n$ git add .tbls.yml doc/schema\n$ git commit -m \'Add database document\'\n$ git push origin master\n```\n\nView the document on GitHub.\n\n[Sample document](sample/postgres/README.md)\n\n![sample](sample/doc.png)\n\n### Diff database and document\n\nUpdate database schema.\n\n``` console\n$ psql -U dbuser -d dbname -h hostname -p 5432 -c \'ALTER TABLE users ADD COLUMN phone_number varchar(15);\'\nPassword for user dbuser:\nALTER TABLE\n```\n\n`tbls diff` shows the difference between database schema and generated document.\n\n``` diff\n$ tbls diff\ndiff postgres://dbuser:*****@hostname:5432/dbname doc/schema/README.md\n--- postgres://dbuser:*****@hostname:5432/dbname\n+++ doc/schema/README.md\n@@ -4,7 +4,7 @@\n\n | Name | Columns | Comment | Type |\n | ---- | ------- | ------- | ---- |\n-| [users](users.md) | 7 | Users table | BASE TABLE |\n+| [users](users.md) | 6 | Users table | BASE TABLE |\n | [user_options](user_options.md) | 4 | User options table | BASE TABLE |\n | [posts](posts.md) | 8 | Posts table | BASE TABLE |\n | [comments](comments.md) | 6 | Comments<br>Multi-line<br>table<br>comment | BASE TABLE |\ndiff postgres://dbuser:*****@hostname:5432/dbname doc/schema/users.md\n--- postgres://dbuser:*****@hostname:5432/dbname\n+++ doc/schema/users.md\n@@ -14,7 +14,6 @@\n | email | varchar(355) |  | false |  |  | ex. user@example.com |\n | created | timestamp without time zone |  | false |  |  |  |\n | updated | timestamp without time zone |  | true |  |  |  |\n-| phone_number | varchar(15) |  | true |  |  |  |\n\n ## Constraints\n\n```\n\n> **Notice:** `tbls diff` shows the difference Markdown documents only.\n\n### Lint a database\n\nAdd linting rule to `.tbls.yml` following\n\n``` yaml\n# .tbls.yml\nlint:\n  requireColumnComment:\n    enabled: true\n    exclude:\n      - id\n      - created\n      - updated\n  columnCount:\n    enabled: true\n    max: 10\n```\n\nRun `tbls lint` to check the database according to `lint:` rules\n\n``` console\n$ tbls lint\nusers.username: column comment required.\nusers.password: column comment required.\nusers.phone_number: column comment required.\nposts.user_id: column comment required.\nposts.title: column comment required.\nposts.labels: column comment required.\ncomments.post_id: column comment required.\ncomment_stars.user_id: column comment required.\npost_comments.comment: column comment required.\nposts: too many columns. [12/10]\ncomments: too many columns. [11/10]\n\n11 detected\n```\n\n### Continuous Integration\n\nContinuous integration using tbls.\n\n1. Commit the document using `tbls doc`.\n2. Update the database schema in the development cycle.\n3. Check for document updates by running `tbls diff` or `tbls lint` in CI.\n4. Return to **1**.\n\n**Example: Travis CI**\n\n``` yaml\n# .travis.yml\nlanguage: go\n\ninstall:\n  - source <(curl -sL https://git.io/use-tbls)\nscript:\n  - tbls diff\n  - tbls lint\n```\n\n> **Tips:** If your CI based on Debian/Ubuntu (`/bin/sh -> dash`), you can use following install command `curl -sL https://git.io/use-tbls > use-tbls.tmp && . ./use-tbls.tmp && rm ./use-tbls.tmp`\n\n> **Tips:** If the order of the columns does not match, you can use the `--sort` option.\n\n## Configuration\n\n### DSN\n\n`DSN:` (Data Source Name) is used to connect to database.\n\n``` yaml\n# .tbls.yml\ndsn: my://dbuser:dbpass@hostname:3306/dbname\n```\n\n`DSN:` can expand environment variables.\n\n``` yaml\n# .tbls.yml\ndsn: my://${MYSQL_USER}:${MYSQL_PASSWORD}@hostname:3306/${MYSQL_DATABASE}\n```\n\n#### Support Database\n\ntbls support following databases.\n\n**PostgreSQL:**\n\n``` yaml\n# .tbls.yml\ndsn: postgres://dbuser:dbpass@hostname:5432/dbname\n```\n\n``` yaml\n# .tbls.yml\ndsn: pg://dbuser:dbpass@hostname:5432/dbname\n```\n\n**MySQL:**\n\n``` yaml\n# .tbls.yml\ndsn: mysql://dbuser:dbpass@hostname:3306/dbname\n```\n\n``` yaml\n# .tbls.yml\ndsn: my://dbuser:dbpass@hostname:3306/dbname\n```\n\n**SQLite:**\n\n``` yaml\n# .tbls.yml\ndsn: sqlite:///path/to/dbname.db\n```\n\n``` yaml\n# .tbls.yml\ndsn: sq:///path/to/dbname.db\n```\n\n**BigQuery:**\n\n``` yaml\n# .tbls.yml\ndsn: bigquery://project-id/dataset-id?creds=/path/to/google_application_credentials.json\n```\n\n``` yaml\n# .tbls.yml\ndsn: bq://project-id/dataset-id?creds=/path/to/google_application_credentials.json\n```\n\nTo set `GOOGLE_APPLICATION_CREDENTIALS` environment variable, you can use\n\n1. `export GOOGLE_APPLICATION_CREDENTIALS` or `env GOOGLE_APPLICATION_CREDENTIALS`\n2. Add query to DSN\n    - `?google_application_credentials=/path/to/client_secrets.json`\n    - `?credentials=/path/to/client_secrets.json`\n    - `?creds=/path/to/client_secrets.json`\n\n**Cloud Spanner:**\n\n``` yaml\n# .tbls.yml\ndsn: spanner://project-id/instance-id/dbname?creds=/path/to/google_application_credentials.json\n```\n\nTo set `GOOGLE_APPLICATION_CREDENTIALS` environment variable, you can use\n\n1. `export GOOGLE_APPLICATION_CREDENTIALS` or `env GOOGLE_APPLICATION_CREDENTIALS`\n2. Add query to DSN\n    - `?google_application_credentials=/path/to/client_secrets.json`\n    - `?credentials=/path/to/client_secrets.json`\n    - `?creds=/path/to/client_secrets.json`\n\n**Amazon Redshift:**\n\n``` yaml\n# .tbls.yml\ndsn: redshift://dbuser:dbpass@hostname:5432/dbname\n```\n\n``` yaml\n# .tbls.yml\ndsn: rs://dbuser:dbpass@hostname:5432/dbname\n```\n\n**Microsoft SQL Server:**\n\n``` yaml\n# .tbls.yml\ndsn: mssql://DbUser:SQLServer-DbPassw0rd@hostname:1433/testdb\n```\n\n``` yaml\n# .tbls.yml\ndsn: sqlserver://DbUser:SQLServer-DbPassw0rd@hostname:1433/testdb\n```\n\n``` yaml\n# .tbls.yml\ndsn: ms://DbUser:SQLServer-DbPassw0rd@localhost:1433/testdb\n```\n\n### Document path\n\n`tbls doc` generates document in the directory specified by `docPath:`.\n\n``` yaml\n# .tbls.yml\n# Default is `dbdoc`\ndocPath: doc/schema\n```\n\n`docPath:` can expand environment variables.\n\n``` yaml\n# .tbls.yml\ndocPath: ${DOC_PATH}\n```\n\n### Table format\n\n`format:` is used to change the document format.\n\n``` yaml\n# .tbls.yml\nformat:\n  # Adjust the column width of Markdown format table\n  # Default is false\n  adjust: true\n  # Sort the order of table list and  columns\n  # Default is false\n  sort: false\n```\n\n### ER diagram\n\nIf you can use Graphviz `dot` command, `tbls doc` generate ER diagram images at the same time.\n\n``` yaml\n# .tbls.yml\ner:\n  # Skip generation of ER diagram\n  # Default is false\n  skip: false\n  # ER diagram format\n  # Default is `png`\n  format: svg\n  # Add table/column comment to ER diagram\n  # Default is false\n  comment: true\n```\n\n### Lint\n\n`tbls lint` work as linter for database.\n\n``` yaml\n# .tbls.yml\nlint:\n  # require table comment\n  requireTableComment:\n    enabled: true\n  # require column comment\n  requireColumnComment:\n    enabled: true\n    # exclude columns from warnings\n    exclude:\n      - id\n      - created_at\n      - updated_at\n    # exclude tables from warnings\n    excludedTables:\n      - logs\n      - comment_stars\n  # find a table that has no relation\n  unrelatedTable:\n    enabled: true\n    # exclude tables from warnings\n    exclude:\n      - logs\n  # check max column count\n  columnCount:\n    enabled: true\n    max: 10\n    # exclude tables from warnings\n    exclude:\n      - user_options\n  # require columns\n  requireColumns:\n    enabled: true\n    columns:\n      -\n        name: created\n      -\n        name: updated\n        exclude:\n          - logs\n          - CamelizeTable\n  # check duplicate relations\n  duplicateRelations:\n    enabled: true\n  # check if the foreign key columns have an index\n  requireForeignKeyIndex:\n    enabled: true\n    exclude:\n      - comments.user_id\n```\n\n### Exclude tables\n\n`exclude:` is used to exclude tables from `tbls *`.\n\n``` yaml\n# .tbls.yml\nexclude:\n  - logs\n  - CamelizeTable\n```\n\n`lintExclude:` is used to exclude tables from `tbls lint`.\n\n``` yaml\n# .tbls.yml\nlintExclude:\n  - CamelizeTable\n```\n\n### Comments\n\n`comments:` is used to add table/column comment to database document without `ALTER TABLE`.\n\nFor example, you can add comment about VIEW TABLE or SQLite tables/columns.\n\n``` yaml\n# .tbls.yml\ncomments:\n  -\n    table: users\n    # table comment\n    tableComment: Users table\n    # column comments\n    columnComments:\n      email: Email address as login id. ex. user@example.com\n  -\n    table: post_comments\n    tableComment: post and comments View table\n    columnComments:\n      id: comments.id\n      title: posts.title\n      post_user: posts.users.username\n      comment_user: comments.users.username\n      created: comments.created\n      updated: comments.updated\n```\n\n### Relations\n\n`comments:` is used to add table relation to database document without `FOREIGN KEY`.\n\nYou can create ER diagrams with relations without having foreign key constraints.\n\n``` yaml\nrelations:\n  -\n    table: logs\n    columns:\n      - user_id\n    parentTable: users\n    parentColumns:\n      - id\n    # Relation definition\n    # Default is `Additional Relation`\n    def: logs->users\n  -\n    table: logs\n    columns:\n      - post_id\n    parentTable: posts\n    parentColumns:\n      - id\n  -\n    table: logs\n    columns:\n      - comment_id\n    parentTable: comments\n    parentColumns:\n      - id\n  -\n    table: logs\n    columns:\n      - comment_star_id\n    parentTable: comment_stars\n    parentColumns:\n      - id\n```\n\n![img](sample/mysql/logs.png)\n\n## Output formats\n\n`tbls out` output in various formats.\n\n**Markdown:**\n\n``` console\n$ tbls out -t md -o schema.md\n```\n\n**DOT:**\n\n``` console\n$ tbls out -t dot -o schema.dot\n```\n\n**PlantUML:**\n\n``` console\n$ tbls out -t plantuml -o schema.puml\n```\n\n**JSON:**\n\n``` console\n$ tbls out -t json -o schema.json\n```\n\n> **Tips:** `tbls doc` can load `schema.json` as DSN.\n>\n> ``` console\n> $ tbls doc json:///path/to/schema.json\n> ```\n\n**Excel:**\n\n``` console\n$ tbls out -t xlsx -o schema.xlsx\n```\n\n**.tbls.yml:**\n\n``` console\n$ tbls out -t config -o .tbls.new.yml\n```\n\n## Command arguments\n\ntbls subcommands ( `doc`,`diff`, etc) accepts arguments and options\n\n``` console\n$ tbls doc my://root:mypass@localhost:3306/testdb doc/schema\n```\n\nYou can check available arguments and options using `tbls help [COMMAND]`.\n\n``` console\n$ tbls help doc\n\'tbls doc\' analyzes a database and generate document in GitHub Friendly Markdown format.\n\nUsage:\n  tbls doc [DSN] [DOC_PATH] [flags]\n\nFlags:\n  -a, --add config         additional schema data path (deprecated, use config)\n  -j, --adjust-table       adjust column width of table\n  -c, --config string      config file path\n  -t, --er-format string   ER diagrams output format [png, svg, jpg, ...]. default: png\n  -f, --force              force\n  -h, --help               help for doc\n      --sort               sort\n      --without-er         no generate ER diagrams\n```\n\n## Environment variables\n\ntbls accepts environment variables `TBLS_DSN` and `TBLS_DOC_PATH`\n\n``` console\n$ env TBLS_DSN=my://root:mypass@localhost:3306/testdb TBLS_DOC_PATH=doc/schema tbls doc\n```\n'