b'# webhookd\n\n[![Build Status](https://travis-ci.org/ncarlier/webhookd.svg?branch=master)](https://travis-ci.org/ncarlier/webhookd)\n[![Go Report Card](https://goreportcard.com/badge/github.com/ncarlier/webhookd)](https://goreportcard.com/report/github.com/ncarlier/webhookd)\n[![Docker pulls](https://img.shields.io/docker/pulls/ncarlier/webhookd.svg)](https://hub.docker.com/r/ncarlier/webhookd/)\n[![Donate](https://img.shields.io/badge/Donate-PayPal-green.svg)](https://www.paypal.me/nunux)\n\nA very simple webhook server to launch shell scripts.\n\n![Logo](webhookd.svg)\n\n## Installation\n\nRun the following command:\n\n```bash\n$ go get -v github.com/ncarlier/webhookd\n```\n\n**Or** download the binary regarding your architecture:\n\n```bash\n$ sudo curl -s https://raw.githubusercontent.com/ncarlier/webhookd/master/install.sh | bash\n```\n\n**Or** use Docker:\n\n```bash\n$ docker run -d --name=webhookd \\\n  -v ${PWD}/scripts:/var/opt/webhookd/scripts \\\n  -p 8080:8080 \\\n  ncarlier/webhookd \\\n  webhookd --scripts=/var/opt/webhookd/scripts\n```\n\n> Note that this image extends `docker:dind` Docker image.\n> Therefore you are able to interact with a Docker daemon with yours shell scripts.\n\n## Configuration\n\nYou can configure the daemon by:\n\n### Setting environment variables:\n\n| Variable | Default | Description |\n|----------|---------|-------------|\n| `APP_LISTEN_ADDR` | `:8080` | HTTP service address |\n| `APP_PASSWD_FILE` | `.htpasswd` | Password file for HTTP basic authentication |\n| `APP_NB_WORKERS` | `2` | The number of workers to start |\n| `APP_HOOK_TIMEOUT` | `10` | Hook maximum delay before timeout (in second) |\n| `APP_SCRIPTS_DIR` | `./scripts` | Scripts directory |\n| `APP_SCRIPTS_GIT_URL` | none | GIT repository that contains scripts (Note: this is only used by the Docker image or by using the Docker entrypoint script) |\n| `APP_SCRIPTS_GIT_KEY` | none | GIT SSH private key used to clone the repository (Note: this is only used by the Docker image or by using the Docker entrypoint script) |\n| `APP_LOG_DIR` | `/tmp` (OS temp dir) | Directory to store execution logs |\n| `APP_NOTIFICATION_URI` | none | Notification configuration URI |\n| `APP_DEBUG` | `false` | Output debug logs |\n\n### Using command parameters:\n\n| Parameter | Default | Description |\n|----------|---------|-------------|\n| `-l <address> or --listen <address>` | `:8080` | HTTP service address |\n| `-p or --passwd <htpasswd file>` | `.htpasswd` | Password file for HTTP basic authentication\n| `-d or --debug` | false | Output debug logs |\n| `--nb-workers <workers>` | `2` | The number of workers to start |\n| `--scripts <dir>` | `./scripts` | Scripts directory |\n| `--timeout <timeout>` | `10` | Hook maximum delay before timeout (in second) |\n| `--notification-uri <uri>` |  | Notification configuration URI |\n| `--log-dir <dir>` | `/tmp` | Directory to store execution logs |\n\n## Usage\n\n### Directory structure\n\nWebhooks are simple scripts dispatched into a directory structure.\n\nBy default inside the `./scripts` directory.\nYou can override the default using the `APP_SCRIPTS_DIR` environment variable.\n\n*Example:*\n\n```\n/scripts\n|--> /github\n  |--> /build.sh\n  |--> /deploy.sh\n|--> /ping.sh\n|--> ...\n```\n\n### Webhook URL\n\nThe directory structure define the webhook URL.\n\nIf the script exists, the output the will be streamed to the HTTP response.\n\nThe streaming technology depends on the HTTP method used.\nWith `POST` the response will be chunked.\nWith `GET` the response will use [Server-sent events][sse].\n\n[sse]: https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events\n\n*Example:*\n\nThe script: `./scripts/foo/bar.sh`\n\n```bash\n#!/bin/bash\n\necho "foo foo foo"\necho "bar bar bar"\n```\n\nOutput using `POST` (`Chunked transfer encoding`):\n\n```bash\n$ curl -v -XPOST http://localhost:8080/foo/bar\n< HTTP/1.1 200 OK\n< Content-Type: text/plain; charset=utf-8\n< Transfer-Encoding: chunked\n< X-Hook-Id: 7\nfoo foo foo\nbar bar bar\ndone\n```\n\nOutput using  `GET` (`Server-sent events`):\n\n```bash\n$ curl -v -XGET http://localhost:8080/foo/bar\n< HTTP/1.1 200 OK\n< Content-Type: text/event-stream\n< Transfer-Encoding: chunked\n< X-Hook-Id: 8\ndata: foo foo foo\n\ndata: bar bar bar\n\ndata: done\n```\n\n### Webhook parameters\n\nYou have several way to provide parameters to your webhook script:\n\n- URL query parameters and HTTP headers are converted into environment variables.\n  Variable names follows "snakecase" naming convention.\n  Therefore the name can be altered.\n\n  *ex: `CONTENT-TYPE` will become `content_type`.*\n\n- When using `POST`, body content (text/plain or application/json) is transmit to the script as parameter.\n\n*Example:*\n\nThe script:\n\n```bash\n#!/bin/bash\n\necho "Query parameter: foo=$foo"\necho "Header parameter: user-agent=$user_agent"\necho "Script parameters: $1"\n```\n\nThe result:\n\n```bash\n$ curl --data @test.json http://localhost:8080/echo?foo=bar\nQuery parameter: foo=bar\nHeader parameter: user-agent=curl/7.52.1\nScript parameter: {"foo": "bar"}\ndone\n```\n\n### Webhook timeout configuration\n\nBy default a webhook has a timeout of 10 seconds.\nThis timeout is globally configurable by setting the environment variable:\n`APP_HOOK_TIMEOUT` (in seconds).\n\nYou can override this global behavior per request by setting the HTTP header:\n`X-Hook-Timeout` (in seconds).\n\n*Example:*\n\n```bash\n$ curl -H "X-Hook-Timeout: 5" http://localhost:8080/echo?foo=bar\n```\n\n### Webhook logs\n\nAs mentioned above, web hook logs are stream in real time during the call.\nHowever, you can retrieve the logs of a previous call by using the hook ID: `http://localhost:8080/<NAME>/<ID>`\n\nThe hook ID is returned as an HTTP header with the Webhook response: `X-Hook-ID`\n\n*Example:*\n\n```bash\n$ # Call webhook\n$ curl -v http://localhost:8080/echo?foo=bar\n...\n< HTTP/1.1 200 OK\n< Content-Type: text/event-stream\n< X-Hook-Id: 2\n...\n$ # Retrieve logs afterwards\n$ curl http://localhost:8080/echo/2\n```\n\n### Post hook notifications\n\nThe output of the script is collected and stored into a log file\n(configured by the `APP_LOG_DIR` environment variable).\n\nOnce the script is executed, you can send the result and this log file to a notification channel.\nCurrently, only two channels are supported: `Email` and `HTTP`.\n\nNotifications configuration can be done as follow:\n\n```bash\n$ export APP_NOTIFICATION_URI=http://requestb.in/v9b229v9\n$ # or\n$ webhookd --notification-uri=http://requestb.in/v9b229v9\n```\n\nNote that only the output of the script prefixed by "notify:" is sent to the notification channel.\nIf the output does not contain a prefixed line, no notification will be sent.\n\n**Example:**\n\n```bash\n#!/bin/bash\n\necho "notify: Hello World" # Will be notified\necho "Goodbye"             # Will not be notified\n```\n\nYou can overide the notification prefix by adding `prefix` as a query parameter to the configuration URL.\n\n**Example:** http://requestb.in/v9b229v9?prefix="foo:"\n\n#### HTTP notification\n\nConfiguration URI: `http://example.org`\n\nOptions (using query parameters):\n\n- `prefix`: Prefix to filter output log\n\nThe following JSON payload is POST to the target URL:\n\n```json\n{\n  "id": "42",\n  "name": "echo",\n  "text": "foo\\nbar...\\n",\n  "error": "Error cause... if present",\n}\n```\n\nNote that because the payload have a `text` attribute, you can use a [Mattermost][mattermost] webhook endpoint.\n\n[mattermost]: https://docs.mattermost.com/developer/webhooks-incoming.html\n\n#### Email notification\n\nConfiguration URI: `mailto:foo@bar.com`\n\nOptions (using query parameters):\n\n- `prefix`: Prefix to filter output log\n- `smtp`: SMTP host to use (by default: `localhost:25`)\n- `from`: Sender email (by default: `webhookd <noreply@nunux.org>`)\n\n### Authentication\n\nYou can restrict access to webhooks using HTTP basic authentication.\n\nTo activate basic authentication, you have to create a `htpasswd` file:\n\n```bash\n$ # create passwd file the user \'api\'\n$ htpasswd -B -c .htpasswd api\n```\nThis command will ask for a password and store it in the htpawsswd file.\n\nPlease note that by default, the daemon will try to load the `.htpasswd` file.\n\nBut you can override this behavior by specifying the location of the file:\n\n```bash\n$ APP_PASSWD_FILE=/etc/webhookd/users.htpasswd\n$ # or\n$ webhookd -p /etc/webhookd/users.htpasswd\n```\n\nOnce configured, you must call webhooks using basic authentication:\n\n```bash\n$ curl -u api:test -XPOST "http://localhost:8080/echo?msg=hello"\n```\n\n---\n\n\n'