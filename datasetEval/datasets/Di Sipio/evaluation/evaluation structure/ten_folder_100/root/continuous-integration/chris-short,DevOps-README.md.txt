b'# DevOps README.md\n\n## What is DevOps\n\n* Provides a high-level defintion of DevOps\n* Attempts to balance the needs of operations, development, and organizations\n* A foundation from which to build a better definition\n* Pros: Valiant effort with feedback from a few well know DevOps professionals\n* Cons: It only defines the principle of DevOps, it does not show how it is done\n* Quip: It\'s better than nothing\n* URL: [What is DevOps](https://devopsish.com/what-is-devops/?utm_source=devops-readme.md&utm_medium=github.com)\n\n## The Phoenix Project\n\n* Novel; Not your typical technical book\n* Transformation of Broken Organization towards DevOps Culture\n* Quintessential beginning of a DevOps journey\n* Pros: Easy to digest, can suggest to executives\n* Cons: The implementation details are fuzzy\n* Quip: We all know Brent. Help Brent not be Brent.\n* URL: [The Phoenix Project: A Novel about IT, DevOps, and Helping Your Business Win](https://amzn.to/2WxnsdZ)\n\n## Accelerate: The Science of Lean Software and DevOps: Building and Scaling High Performing Technology Organizations\n\n* This is one of the most important book related to DevOps\n* If an organization or individual is skeptical about DevOps this book provides the ammo needed for a frank discussion\n* Pros: Lots of useful, metrics-based insights into DevOps\n* Cons: Not a light read but, well worth it\n* Quip: The audiobook is highly recommended because Nicole Forsgren reads emojis as words.\n* URL: [Accelerate: The Science of Lean Software and DevOps: Building and Scaling High Performing Technology Organizations](https://amzn.to/2BFXzLU)\n\n## Beyond the Phoenix Project: The Origins and Evolution of DevOps\n\n* I think listening to the audio version of this book is more useful than The DevOps Handbook\n* Years of research sources and use cases are poured over\n* Gene Kim and John Willis have a wonderful banter\n* Pros: Lightweight and fun\n* Cons: I\'m sad this didn\'t come out sooner\n* Quip: Listening to this is like throwing a sticker on a car thinking it\'ll go faster. Make sure you do the homework too.\n* URL: [Beyond the Phoenix Project: The Origins and Evolution of DevOps](https://amzn.to/2Wpm0FG)\n\n## The DevOps Handbook\n\n* Handbook full of use cases and helpful examples\n* Years of experience poured into one book\n* The next step of a DevOps journey\n* Pros: Detail oriented, can give to technical staff\n* Cons: Not a quick read\n* Quip: You\'re DevOps\'ing if you quote this book.\n* URL: [The DevOps Handbook: How to Create World-Class Agility, Reliability, and Security in Technology Organizations](https://amzn.to/2WDndOV)\n\n## The Twelve-Factor App\n\n* [https://12factor.net/](https://12factor.net/?utm_source=devops-readme.md&utm_medium=github.com)\n* De facto standard for implementing software\n* Good design principles for refactors and green field\n* Pros: Free; Up-to-date; Roadmap\n* Cons: State has to exist somewhere; lightly addressed\n* Quip: If apps only had 12 factors...\n\n## Release It!: Design and Deploy Production-Ready Software\n\n* Developer centric cases and examples for releasing\n* First edition out of print; second edition is released! \xf0\x9f\x98\x89\n* Technical af\n* Pros: Looks at the SDLC holistically\n* Cons: Maybe too high level\n* Quip: Release early and often unlike this book \xf0\x9f\x98\x89\n* URL: [Release It!: Design and Deploy Production-Ready Software](https://amzn.to/2MAyWcj)\n\n## Continuous Delivery\n\n* Provides focus for deploying software faster\n* Emphasizes automation (you must automate first)\n* When people say "shift left" this is what they\'re talking about\n* Executing earlier in pipelines is described in this book\n* Pros: Clear, real-world\n* Cons: Sometimes redundant, slightly dated\n* Quip: CD for your CTO to improve ROI and EBITDA.\n* URL: [Continuous Delivery: Reliable Software Releases through Build, Test, and Deployment Automation](https://amzn.to/2EZLFih)\n\n## Site Reliability Engineering\n\n* A collection of essays from Google SREs about how things are done at Google\n* A fantastic reference for various functions like on-call, onboarding, delivery, etc.\n* Pros: Free; solid examples of how to do things\n* Cons: You are not Google; embrace with caution\n* Quip: Google SRE is proof setting a pile of money on fire is a viable solution to engineering problems.\n* URL: [Site Reliability Engineering: How Google Runs Production Systems](https://landing.google.com/sre/?utm_source=devops-readme.md&utm_medium=github.com)\n\n## The Art of Monitoring\n\n* Opinionated HOWTO implementation guide to monitoring at scale\n* Incredibly thorough book\n* Pros: Explicit; Detailed\n* Cons: Opinionated; Long; Perhaps too specific\n* Quip: If a book\'s art worthiness is measured by weight then we have a winner (767 pages).\n* URL: [The Art of Monitoring](https://amzn.to/2WnzqSJ)\n\n## Effective DevOps\n\n* Culture centric focus on DevOps\n* Discusses collaboration, hiring, team building, etc.\n* Great for leaders and managers\n* Touches on a wide variety of important topics\n* Pros: Culture is hard; this helps\n* Cons: Etsy probably isn\'t the best example anymore\n* Quip: Effectiveness is a good thing!\n* URL: [Effective DevOps: Building a Culture of Collaboration, Affinity, and Tooling at Scale](https://amzn.to/31noyYz)\n\n## Enterprise DevOps Playbook\n\n* Roadmap for building a successful DevOps org\n* Addresses hiring, culture, and learning\n* Pros: Suggests tuning in your current organization\n* Cons: Missing some pieces to the puzzle\n* Quip: Yes! Enterprise and DevOps can work together... Somehow.\n* URL: [Enterprise DevOps Playbook](https://www.oreilly.com/library/view/enterprise-devops-playbook/9781492030065/?utm_source=devops-readme.md&utm_medium=github.com)\n\n## The Open Organization Guide to IT Culture Change\n\n* Community-produced companion to Jim Whitehurst\'s 2015 book,\xc2\xa0The Open Organization\n* Like SRE book, a collection of essays\n* Focus on principles and practices of culture\n* Pros: Easy to read; diverse authors; inspirational\n* Cons: Not all pieces apply to everyone\n* Quip: "Being positive is sometimes difficult to do." I wrote that? Wow. I had no idea.\n* URL: [The Open Organization Guide to IT Culture Change](https://opensource.com/open-organization/17/6/open-org-it-culture-now-available?utm_source=devops-readme.md&utm_medium=github.com)\n\n## Lean Enterprise\n\n* Big picture, business minded change agent\n* All phase guide to planning, organizing, implementation, and measurement\n* Great for leaders and managers\n* Pros: Mindset changing readiness guide\n* Cons: None given the scope\n* Quip: This is not a weight loss book... Or is it?\n* URL: [Lean Enterprise: How High Performance Organizations Innovate at Scale](https://amzn.to/2Wv8TYo)\n\n## Beyond Blame\n\n* Failure happens; Beyond Blame is a HOWTO in making postmortems blameless\n* Great for individual contributors, leaders, managers\n* Pros: Guides you towards blamelessness\n* Cons: Emotions are hard, this isn\'t a psychiatrist\n* Quip: I blame this book for your blame problems.\n* URL: [Beyond Blame: Learning From Failure and Success](https://amzn.to/2KFid4T)\n\n## How Complex Systems Fail\n\n* "Post-accident attribution accident to a \'root cause\' is fundamentally wrong"\n* Re-thinking failure in our systems makes them more robust\n* Pros: Makes case that RCA isn\'t a solid process\n* Cons: None given the scope\n* Quip: You\'re human so you\'re the problem.\n* URL: [How Complex Systems Fail (Being a Short Treatise on the Nature of Failure; How Failure is Evaluated; How Failure is Attributed to Proximate Cause; and the Resulting New Understanding of Patient Safety)](https://chrisshort.net/devops-readme.md/How-Complex-Systems-Fail.pdf?utm_source=devops-readme.md&utm_medium=github.com)\n\n## In Search of Certainty\n\n* Foundation shaking look at future\n* Great for individual contributors, leaders, managers\n* Pros: Helps manage a world we don\'t know\n* Cons: Slightly terrifying\n* Quip: Death, taxes, and PagerDuty are the only certainties in life.\n* URL: [In Search of Certainty: The Science of Our Information Infrastructure](https://amzn.to/2Iyh3FT)\n\n## The Upside of Stress: Why Stress Is Good for You, and How to Get Good at It\n\n* Stress isn\'t all bad if we learn how to manage it\n* Stress can actually make us happier\n* Pros: Teaches life improving skills\n* Cons: None given the scope\n* TED Talk: [How to make stress your friend](https://www.ted.com/talks/kelly_mcgonigal_how_to_make_stress_your_friend)\n* Quip: If stress is good for me I\'m going to live forever.\n* URL: [The Upside of Stress: Why Stress Is Good for You, and How to Get Good at It](https://amzn.to/2F32clQ)\n\n## The End of Heaven: Disaster and Suffering in a Scientific Age\n\n* Slightly controversial take on disaster in modern times\n* Recommended to me by John Willis\n* Pros: Makes you rethink your feelings\n* Cons: Slightly controversial\n* URL: [The End of Heaven: Disaster and Suffering in a Scientific Age](https://amzn.to/31npMmD)\n\n## The Art of War\n\n* In DevOps you SHOULD NOT have adversaries\n* I am willing to bet that anyone worth their salt has read this though\n* Tactics from this work should be used sensibly\n* "Know thy enemy"\n* Pros: Well known work studied in business, military\n* Cons: Not an easy read; multiple differing translations\n* URL: [The Art of War](http://classics.mit.edu/Tzu/artwar.html?utm_source=devops-readme.md&utm_medium=github.com)\n\n"You are either building a learning organization or you will be losing to someone who is." --Andrew Clay Shafer\n'