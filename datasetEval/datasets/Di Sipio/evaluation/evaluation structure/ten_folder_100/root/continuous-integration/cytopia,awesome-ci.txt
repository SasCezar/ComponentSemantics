b'# [awesome-ci](https://github.com/cytopia/awesome-ci)\n\n[![Build Status](https://travis-ci.org/cytopia/awesome-ci.svg?branch=master)](https://travis-ci.org/cytopia/awesome-ci)\n[![Latest Stable Version](https://poser.pugx.org/cytopia/awesome-ci/v/stable)](https://packagist.org/packages/cytopia/awesome-ci)\n[![Total Downloads](https://poser.pugx.org/cytopia/awesome-ci/downloads)](https://packagist.org/packages/cytopia/awesome-ci)\n[![Docker image](https://images.microbadger.com/badges/image/cytopia/awesome-ci.svg)](https://hub.docker.com/r/cytopia/awesome-ci)\n[![License](https://poser.pugx.org/cytopia/awesome-ci/license)](http://opensource.org/licenses/MIT)\n\n> #### All [#awesome-ci](https://github.com/topics/awesome-ci) Docker images\n>\n> [ansible](https://github.com/cytopia/docker-ansible) **\xe2\x80\xa2**\n> [ansible-lint](https://github.com/cytopia/docker-ansible-lint) **\xe2\x80\xa2**\n> [awesome-ci](https://github.com/cytopia/awesome-ci) **\xe2\x80\xa2**\n> [black](https://github.com/cytopia/docker-black) **\xe2\x80\xa2**\n> [checkmake](https://github.com/cytopia/docker-checkmake) **\xe2\x80\xa2**\n> [eslint](https://github.com/cytopia/docker-eslint) **\xe2\x80\xa2**\n> [file-lint](https://github.com/cytopia/docker-file-lint) **\xe2\x80\xa2**\n> [gofmt](https://github.com/cytopia/docker-gofmt) **\xe2\x80\xa2**\n> [golint](https://github.com/cytopia/docker-golint) **\xe2\x80\xa2**\n> [jsonlint](https://github.com/cytopia/docker-jsonlint) **\xe2\x80\xa2**\n> [phpcs](https://github.com/cytopia/docker-phpcs) **\xe2\x80\xa2**\n> [pycodestyle](https://github.com/cytopia/docker-pycodestyle) **\xe2\x80\xa2**\n> [pylint](https://github.com/cytopia/docker-pylint) **\xe2\x80\xa2**\n> [terraform-docs](https://github.com/cytopia/docker-terraform-docs) **\xe2\x80\xa2**\n> [terragrunt](https://github.com/cytopia/docker-terragrunt) **\xe2\x80\xa2**\n> [yamllint](https://github.com/cytopia/docker-yamllint)\n\n\n> #### All [#awesome-ci](https://github.com/topics/awesome-ci) Makefiles\n>\n> Visit **[cytopia/makefiles](https://github.com/cytopia/makefiles)** for seamless project integration, minimum required best-practice code linting and CI.\n\n[![Docker image](http://dockeri.co/image/cytopia/awesome-ci?&kill_cache=1)](https://hub.docker.com/r/cytopia/awesome-ci)\n\n**Runs on**\n\n[![Linux](https://raw.githubusercontent.com/cytopia/icons/master/64x64/linux.png)](https://www.kernel.org/)\n[![FreeBSD](https://raw.githubusercontent.com/cytopia/icons/master/64x64/freebsd.png)](https://www.freebsd.org)\n[![OSX](https://raw.githubusercontent.com/cytopia/icons/master/64x64/osx.png)](https://www.apple.com/osx)\n\nContinuous Integration command line tools for git repositories, file characteristics, syntax errors\nand static source code analysis.\n\nAwesome-CI is capable of finding various problems in your code repository as well as fixing them\nautomatically.\n\n\n---\n\n**Table of Contents**\n\n1. [Tools](#tools)\n2. [Learn / Validate](#learn--validate)\n3. [Fix](#fix)\n4. [Custom regex contributions](#custom-regex-contributions)\n5. [General usage](#general-usage)\n6. [Installation](i#installation)\n    1. [Requirements](#requirements)\n    2. [Install OSX](#install-osx)\n    3. [Install Linux/BSD](#install-linuxbsd)\n7. [Awesome CI Docker image](#awesome-ci-docker-image)\n8. [Documentation](#documentation)\n9. [License](#license)\n\n\n## Tools\n\nAll checks have the option to only check by one or more file **extensions**, by **shebang** as well as to **exclude** one or more folders from the whole search.\n\n**Note:** Fixable options are currently in testing phase. Please report any bugs.\n\n\n| Type | Tool | Fixable | Description |\n|------|------|---------|-------------|\n| Git | [git-conflicts](bin/git-conflicts) | | Scan files and check if they contain git conflicts. |\n| Git | [git-ignored](bin/git-ignored) | | Scan git directory and see if ignored files are still in git cache. |\n| File | [file-cr](bin/file-cr) | \xe2\x9c\x93 | Scan files and check if they contain CR (Carriage Return only). |\n| File | [file-crlf](bin/file-crlf) | \xe2\x9c\x93 | Scan files and check if they contain CRLF (Windows Line Feeds). |\n| File | [file-empty](bin/file-empty) | | Scan files and check if they are empty (0 bytes). |\n| File | [file-nullbyte-char](bin/file-nullbyte-char) | \xe2\x9c\x93 | Scan files and check if they contain a null-byte character (\\x00). |\n| File | [file-trailing-newline](bin/file-trailing-newline) | \xe2\x9c\x93 | Scan files and check if they contain a trailing newline. |\n| File | [file-trailing-single-newline](bin/file-trailing-single-newline) | \xe2\x9c\x93 | Scan files and check if they contain exactly one trailing newline. |\n| File | [file-trailing-space](bin/file-trailing-space) | \xe2\x9c\x93 | Scan files and check if they contain trailing whitespaces. |\n| File | [file-utf8](bin/file-utf8) | \xe2\x9c\x93 | Scan files and check if they have a non UTF-8 encoding. |\n| File | [file-utf8-bom](bin/file-utf8-bom) | \xe2\x9c\x93 | Scan files and check if they contain BOM (Byte Order Mark): `<U+FEFF>`. |\n| Syntax | [syntax-bash](bin/syntax-bash) | | Scan shell files for bash syntax errors. |\n| Syntax | [syntax-css](bin/syntax-css) | | Scan CSS files for CSS syntax errors. |\n| Syntax | [syntax-js](bin/syntax-js) | | Scan JS files for JS syntax errors. |\n| Syntax | [syntax-json](bin/syntax-json) | | Scan files for JSON syntax errors. |\n| Syntax | [syntax-markdown](bin/syntax-markdown) | | Scan files for Markdown syntax errors. |\n| Syntax | [syntax-perl](bin/syntax-perl) | | Scan Perl files for Perl syntax errors. |\n| Syntax | [syntax-php](bin/syntax-php) | | Scan files for PHP syntax errors. |\n| Syntax | [syntax-python](bin/syntax-python) | | Scan Python files for Python syntax errors. |\n| Syntax | [syntax-ruby](bin/syntax-ruby) | | Scan Ruby files for Ruby syntax errors. |\n| Syntax | [syntax-scss](bin/syntax-scss) | | Scan SCSS files for SCSS syntax errors. |\n| Syntax | [syntax-sh](bin/syntax-sh) | | Scan shell files for /bin/sh syntax errors. |\n| Code Conventions | [inline-css](bin/inline-css) | | Scan files and check if they contain inline css code. |\n| Code Conventions | [inline-js](bin/inline-js) | | Scan files and check if they contain inline javascript code. |\n| Regex | [regex-grep](bin/regex-grep) | | `egrep` (`grep -E`) regex version to scan files for an occurance. |\n| Regex | [regex-perl](bin/regex-perl) | | `perl` regex version to scan files for an occurance. |\n\n\n## Learn / validate\n\nAll of the above scripts offer the `--dry` option which will only show you the built command without actually executing it:\n```bash\n$ regex-grep --path=. --ignore=".git,.svn" --shebang=sh --size --text \\\n--custom="if[[:space:]]*\\[\\[" --dry\n\nfind . -type f -not \\( -path "./.git*" -o -path "./.svn*" \\) ! -size 0 -print0 | \\\n   xargs -0 -P 8 -n1 grep -Il \'\' | \\\n   tr \'\\n\' \'\\0\' | \\\n   xargs -0 -P 8 -n1 awk \'/^#!.*(\\/sh|[[:space:]]+sh)/{print FILENAME}\' | \\\n   tr \'\\n\' \'\\0\' | \\\n   xargs -0 -P 8 -n1  sh -c \'if [ -f "${1}" ]; then grep --color=always -inHE "if[[:space:]]*\\[\\[" "$1" || true; fi\' --\n```\n\n\n## Fix\n\nSome of the above scripts offer the `--fix` option (see table above), with which you are actually able to fix the problem.\nYou can also combine it with `--dry` to see how the actual fix command looks like:\n```bash\n$ file-utf8 --path=dump.sql --fix --dry\n\nfind dump.sql -type f -print0 | \\\n   xargs -0 -P 8 -n1  sh -c \'if [ -f "${1}" ]; then isutf8 "$1" >/dev/null || (TERM=vt100 vi -u NONE -n -es -c "set fileencoding=utf8" -c "wq" "$1" > /dev/tty && echo "Fixing: $1" || echo "FAILED: $1"); fi\' --\n```\n\n\n## Custom regex contributions\n\n`regex-grep` and `regex-perl` have a lot of potential for doing custom project validation.\n\nIn order to give you an idea, have a look at the compiled [Regex Contributions](REGEX_CONTRIBUTIONS.md).\n\nPlease use pull requests to add useful checks.\n\n\n## General Usage\n\n* All tools share the same pattern (except `git-ignored`) and can be used with the same command line arguments.\n* Some tools have an additional option `--custom=""` to overwrite the command itself (this is explained and shown in detail in each command\'s `--help` option).\n\n**Options:**\n\n```bash\n# Required:\n  --path            # Specify the path where to scan\n\n# Optional pattern (each option is logically and-ed):\n  --fix             # Fix the problems for the specified files (not every check)\n\n  --text            # Only scan non-binary files\n  --size            # Only scan non-empty files (greater 0 bytes)\n  --shebang         # Only scan files (shell scripts) that match a certain shebang\n  --extension       # Only scan files with these file extensions\n  --ignore          # Ignore files/folders\n\n# Optional misc:\n  --config          # Specify configuration file\n  --confpre         # Alter configuration directive prefix for this check\n  --verbose         # Show files and commands as being processed\n  --debug           # Show additional debug messages\n  --list            # Only show files that would be processed (no processing)\n  --dry             # Show command that would be executed (no processing)\n\n# System\n  --help            # Show help\n  --info            # Show version of required binaries\n  --version         # Show tool version\n```\n\n## Installation\n\n### Requirements\n\nAwesome-ci requires the following tools to be installed:\n\n* `dos2unix`\n* `eslint`\n* `file`\n* `git`\n* `jsonlint`\n* `mdl`\n* `perl`\n* `php`\n* `python`\n* `ruby`\n* `scss_lint`\n* `shellcheck`\n\n### Install OSX\n\n```bash\nbrew tap cytopia/tap\nbrew install awesome-ci\n```\n\n### Install Linux/BSD\n\n```bash\n# Install to /usr/bin\n./configure\nmake install\n\n# Instal to /usr/local/bin\n./configure --prefix=/usr/local\nmake install\n\n# Install to /opt/bin\n./configure --prefix=/opt\nmake install\n```\n\n## Awesome CI Docker image\n\n[![Docker image](http://dockeri.co/image/cytopia/awesome-ci?&kill_cache=1)](https://hub.docker.com/r/cytopia/awesome-ci)\n\nInstead of installing awesome-ci and all its required dependencies locally on your computer,\nyou can also use the bundled Docker image \n**[cytopia/awesome-ci](https://hub.docker.com/r/cytopia/awesome-ci/)** which has everything\npre-installed and is built nightly by travis-ci.\n\n```bash\ndocker run -v ${PWD}:/ac cytopia/awesome-ci file-crlf --path=/ac\n```\n\nThe above example is using `file-crlf` to scan the current directory for files containing\nWindows newlines:\n\n* `${PWD}` (the current host directory) is mounted into the container\'s `/ac` directoy\n* `file-crlf` path then points (inside the container) to `/ac` (which is the current host directory)\n* `/ac` can actually be named by whatever name you want\n\nIf you use an awesome-ci configuration which is not inside the directory you want to check, you\nwill also have to mount that into the container:\n```bash\ndocker run \\\n    -v /host/path/to/awesome-ci.conf:/etc/awesome-ci.conf \\\n    -v ${PWD}:/ac cytopia/awesome-ci file-crlf --path=/ac --config=/etc/awesome-ci.conf\n```\n\n## Documentation\n\nTo find out more about awesome-ci, have a look at the following links.\n\n* [Dependencies](dependencies/)\n* [Examples](EXAMPLES.md)\n* [Regex Contributions](REGEX_CONTRIBUTIONS.md)\n\n\n## License\n\n[MIT License](LICENSE.md)\n\nCopyright (c) 2018 [cytopia](https://github.com/cytopia)\n'