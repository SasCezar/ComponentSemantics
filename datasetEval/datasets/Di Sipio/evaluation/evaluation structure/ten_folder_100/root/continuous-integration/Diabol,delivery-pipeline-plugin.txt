b'Delivery Pipeline Plugin\n========================\n\n![alt tag](https://raw.githubusercontent.com/Diabol/delivery-pipeline-plugin/master/docs/dpp_logo.png)\n\n[![Build Status](https://travis-ci.org/Diabol/delivery-pipeline-plugin.png)](https://travis-ci.org/Diabol/delivery-pipeline-plugin)\n\nThe purpose of the Delivery Pipeline plugin is to provide visualisation of delivery/build pipelines in Jenkins. The plugin is perfect for Continuous Delivery pipeline visualisation on information radiators.\n\nIn Continuous Delivery, fast feedback and visualisation of the delivery process is one of the most important aspects. When using Jenkins as a build server it is now possible to visualise one or more delivery pipelines in the same view (even in full screen!) using the Delivery Pipeline plugin. You can install the Delivery Pipeline plugin using the Jenkins plugin management.\n\nProject wiki page can be found here: [Delivery Pipeline Plugin - Wiki](https://wiki.jenkins-ci.org/display/JENKINS/Delivery+Pipeline+Plugin).\n\nWe use the official Jenkins [issue tracker](https://issues.jenkins-ci.org/secure/IssueNavigator.jspa?mode=hide&reset=true&jqlQuery=project+%3D+JENKINS+AND+status+in+%28Open%2C+%22In+Progress%22%2C+Reopened%29+AND+component+%3D+%27delivery-pipeline-plugin%27) for bugs, improvements and new features. Please report any issues on component [delivery-pipeline-plugin](https://issues.jenkins-ci.org/browse/JENKINS/component/18134).\n\nThis plugin has been contributed to the community by [Diabol AB](https://www.diabol.se).\n\n\n---\n\n![alt tag](https://raw.githubusercontent.com/Diabol/delivery-pipeline-plugin/master/docs/dpp_screenshot.png)\n\nRequirements\n---\nDelivery Pipeline plugin 1.4.0 and later requires Java 8 and Jenkins core 2.164 or later (Java 11 required for plugin development).\n\nDelivery Pipeline plugin 1.3.0 and later requires Java 8 and Jenkins core 2.73.3 or later.\n\nDelivery Pipeline plugin 1.2.0 and later requires Java 8 and Jenkins core 2.62 or later.\n\nDelivery Pipeline plugin 1.1.0 and later requires Java 8 and Jenkins core 1.642.3 or later.\n\nDelivery Pipeline plugin 1.0.0 and later requires Java 7 and Jenkins core 1.642.3 or later.\n\nDelivery Pipeline plugin 0.10.3 requires Java 6 and Jenkins core 1.565 or later.\n\nBuilding the project\n---\nRequires Java 11, Apache Maven 3.3.x or later.\n\n    mvn clean install\n\nThe project contains a rigorous test suite which takes some time to run. If you just want to build the project for the first time, you can shortcut it by running:\n\n    mvn clean install -DskipTests\n\nRun locally\n---\nDuring development you can easily start a local Jenkins instance with the Delivery Pipeline plugin installed based on your current source code revision.\nBuild the project using the step mentioned above and run:\n\n    mvn hpi:run\n\nThis will start a local Jenkins with the Delivery Pipeline plugin installed. It will by default be available at http://localhost:8080/jenkins.\n\nBootstrap your local Jenkins with jobs\n---\nTo bootstrap your local Jenkins instance with jobs, you can use the provided [examples](https://github.com/Diabol/delivery-pipeline-plugin/blob/master/examples/).\n\nYou would need to have [Jenkins Job Builder](https://docs.openstack.org/infra/jenkins-job-builder/) (JJB) or [JobDSL](https://github.com/jenkinsci/job-dsl-plugin) available in order to use them. To use the JJB .yaml job configurations without the need to install JJB explicitly, you could run it in a Docker container.\nProvide the [example jenkins.ini](https://github.com/Diabol/delivery-pipeline-plugin/blob/master/examples/jenkins.ini) to JJB. When running inside a container, you might need to add your host ip address in the jenkins.ini instead of localhost to allow JJB to connect to your Jenkins instance.\nMount the examples directory to the Docker container, and then invoke JJB ising the _jenkins-jobs_ command, such as:\n\n    docker run -it --rm --net=host -v PATH_TO/delivery-pipeline-plugin/examples/jenkins.ini:/etc/jenkins_jobs/jenkins_jobs.ini -v PATH_TO/delivery-pipeline-plugin/examples:/root/jenkins-job-builder tynja/jenkins-job-builder jenkins-jobs update demo.yaml\n\n\nRun function tests\n---\nThe project contains a set of functional tests that run in a separate Maven goal. These can be run using:\n\n    mvn integration-test\n\nCreate Jenkins plugin artifact\n---\nTo create a Jenkins plugin artifact, build the project and run:\n\n    mvn hpi:hpi\n\nThis creates a delivery-pipeline-plugin.hpi file in the target directory.\nThis file can be manually uploaded through the Jenkins plugin management console (under the Advanced tab) to load the built plugin into Jenkins.\n\nBuild and run in a Docker container\n----\nTo build and run the Delivery Pipeline plugin together with Jenkins in a Docker container, you first need to build the project before building the Docker image: \n\n    mvn clean package\n    docker build -t dpp .\n    docker run -p 8080:8080 dpp\n\nYou can then access your local Jenkins instance on http://localhost:8080.\n\nIf you just want to run Jenkins and the Delivery Pipeline plugin in a Docker container without building it yourself, you can pull certain versions from [Docker hub](https://hub.docker.com/r/diabol/delivery-pipeline-plugin/):\n\n    docker pull diabol/delivery-pipeline-plugin:1.3.0\n    docker run -it -p 8080:8080 diabol/delivery-pipeline-plugin:1.3.0\n\nThe Docker container will be bootstrapped with a few Jenkins job configurations and a delivery pipeline view. \nJenkins will be available at http://localhost:8080.\n\nConfiguring manually triggered jobs for views based on traditional Jenkins jobs with downstream dependencies\n----\n**Note:** This requires the [Build Pipeline plugin](https://github.com/jenkinsci/build-pipeline-plugin) to be installed.\n\nTo be able to configure a certain job in the pipeline as a manual step, you have to configure the upstream job that triggers the job which is to be performed manually to be marked as a manual step.\n\nIn the Jenkins UI this shows up as a Post-Build Action: Build other projects (manual step), where you configure the name of the job to be manually triggered in the "Downstream Project Names".\n\nIf you\'re creating your jobs with JobDSL, use the following syntax in the publishers section (parameters is optional):\n\n    publishers {\n        buildPipelineTrigger(\'name-of-the-manually-triggered-job\') {\n            parameters {\n                propertiesFile(\'env.${BUILD_NUMBER}.properties\')\n            }\n        }\n    }\n\nIn your pipeline configuration, make sure to enable manual triggers. The manual triggers (a play button) will not be shown in the UI for aggregate pipelines, only for pipeline instances. If you want to access manual triggers from the UI, make sure to show at least one pipeline instance.\n\nHere is an example of a corresponding JobDSL pipeline view configuration:\n\n    deliveryPipelineView("my-pipeline") {\n        name("my-pipeline")\n        description("Delivery pipeline with a manual trigger")\n        pipelineInstances(1)\n        showAggregatedPipeline(false)\n        columns(1)\n        updateInterval(2)\n        enableManualTriggers(true)\n        showAvatars(false)\n        showChangeLog(true)\n        pipelines {\n            component("My pipeline", "the-name-of-the-first-job-in-the-pipeline")\n        }\n    }\n\nUsing a custom CSS\n----\nHere is an example of how to specify a custom CSS for the Delivery Pipeline Plugin using a JobDSL pipeline view configuration:\n\n    deliveryPipelineView("my-pipeline") {\n        name("my-pipeline")\n        description("Delivery pipeline with custom full screen CSS")\n        pipelineInstances(1)\n        showAggregatedPipeline(false)\n        columns(1)\n        updateInterval(2)\n        enableManualTriggers(true)\n        showAvatars(false)\n        showChangeLog(true)\n        configure { node ->\n            node << {\n                fullScreenCss(\'https://my-jenkins-instance/userContent/my-pipeline-fullscreen.css\')\n            }\n        }\n        pipelines {\n            component("My pipeline", "the-name-of-the-first-job-in-the-pipeline")\n        }\n    }\n\nExamples\n----\nExample configurations can be found in the [examples subdirectory](https://github.com/Diabol/delivery-pipeline-plugin/blob/master/examples/).\n\nFor [Jenkins Job Builder](https://docs.openstack.org/infra/jenkins-job-builder/) job configuration examples, see: [demo.yaml](https://github.com/Diabol/delivery-pipeline-plugin/blob/master/examples/demo.yaml)\n\nFor [JobDSL](https://github.com/jenkinsci/job-dsl-plugin) job configuration examples, see: [demo.groovy](https://github.com/Diabol/delivery-pipeline-plugin/blob/master/examples/demo.groovy)\n\nFor examples on how to use the Jenkins pipeline task step to visualize steps within a stage, see this [example pipeline](https://github.com/Diabol/delivery-pipeline-plugin/blob/master/examples/JENKINS-45738-declarative-pipeline-with-task-closures.txt)\n\nHow to contribute\n---\nRead GitHub\'s general contribution guidelines: https://guides.github.com/activities/contributing-to-open-source/#contributing\n\nIt basically comes down to the following guidelines:\n 1. If applicable, create a [Jira issue](https://issues.jenkins-ci.org/issues/?jql=project+%3D+JENKINS+AND+component+%3D+delivery-pipeline-plugin)\n    + Make sure a similar issue doesn\'t already exist\n 2. Fork the repo\n 3. Contribute and have fun!\n 4. Add as much unit testing as possible to any new code changes\n    + This will make the code much more easy to maintain and to understand its intent\n 5. Make sure your code is well formatted and aligns with the projects code style conventions. This will be enforced by the CI build that runs on each pull request.\n 6. Make sure to prefix the commit message with the associated Jira issue number together with a descriptive commit message\n 7. Create a pull request to start a discussion and to get feedback from the maintainers\n    + Add a link to the pull request in the associated Jira issue\n\nContact\n----\nIf you have any questions, feel free to reach out to one of the maintainers:\n* [Patrik Bostr&ouml;m](https://github.com/patbos)\n* [Andreas Rehn](https://github.com/mrfatstrat)\n'