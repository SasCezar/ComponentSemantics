b'[![npm][npm-image]][npm-url] [![Known Vulnerabilities](https://snyk.io/test/github/norman-thomas/homebridge-particle-io/badge.svg)](https://snyk.io/test/github/norman-thomas/homebridge-particle-io)\n [![CodeFactor](https://www.codefactor.io/repository/github/norman-thomas/homebridge-particle-io/badge)](https://www.codefactor.io/repository/github/norman-thomas/homebridge-particle-io) [![Build Status](https://travis-ci.org/norman-thomas/homebridge-particle-io.svg?branch=master)](https://travis-ci.org/norman-thomas/homebridge-particle-io) [![Coverage Status](https://coveralls.io/repos/github/norman-thomas/homebridge-particle-io/badge.svg)](https://coveralls.io/github/norman-thomas/homebridge-particle-io)\n\n[npm-image]: https://img.shields.io/npm/v/homebridge-particle-io.svg?style=flat\n[npm-url]: https://npmjs.org/package/homebridge-particle-io\n\n\n**Particle.io device plugin for Homebridge**\n-------------------------------------\n\nAs you all know in the new version of [Homebridge](https://github.com/nfarina/homebridge), the plugin architecture is changed. In new Homebridge, plugins are published through NPM with name starts with *homebridge-*. Users can install the plugin using NPM.\n\nYou can install it using NPM like all other modules, using:\n\n`npm install -g homebridge-particle-io`.\n\nIn this version, I have made some changes from the older version. Mainly the plugin is now a Homebridge Platform. Also in this version accessories are defined in `config.json` file. The plugin loads the accessories from the `config.json` file and create accessory dynamically. A sample configuration file is like:\n\n```JSON\n  {\n    "bridge": {\n      "name": "Homebridge",\n      "username": "CC:22:3D:E3:CE:39",\n      "port": 51826,\n      "pin": "031-45-154"\n    },\n\n    "description": "This is an example configuration file with one Particle platform and 3 accessories, two lights and a temperature sensor. You should replace the access token and device id placeholder with your access token and device id",\n\n    "platforms": [\n      {\n        "platform": "ParticleIO",\n        "name": "Particle Devices",\n        "access_token": "<<access token>>",\n        "cloud_url": "https://api.particle.io/v1/devices/",\n        "devices": [\n          {\n            "name": "Bedroom Light",\n            "type": "lightbulb",\n            "device_id": "<<device id>>",\n            "function_name": "onoff",\n            "args": "0={STATE}"\n          },\n          {\n            "name": "Kitchen Light",\n            "type": "lightbulb",\n            "device_id": "<<device id>>",\n            "function_name": "onoff",\n            "args": "1={STATE}"\n          },\n          {\n            "name": "Kitchen Temperature",\n            "type": "temperaturesensor",\n            "device_id": "<<device id>>",\n            "event_name": "tvalue",\n            "split_character": ":"\n          }\n        ]\n      }\n    ]\n  }\n```\n\nAs you can see from the above example this `config.json` file defines 3 accessories. 2 Lights and one Temperature Sensor. The **access_token** defines the Particle Access Token and **cloud_url** defines the base Particle API url. If you are using the Particle Cloud, then the value of *cloud_url* should be https://api.particle.io/v1/devices/. If you are using local cloud, then replace with your sensor address.\n\nThe `devices` array contains all the accessories. You can see the accessory object defines following string objects:\n\n - **name** - Display name, this is the name to be displayed on the HomeKit app.\n - **type** - Type of the accessory. As of now, the plugin supports 3 types: `lightbulb`, `temperaturesensor` and `humiditysensor`.\n - **device_id** - Device ID of the Particle Device (Core, Photon or Electron). It is defined in accessory so that you can use different Particle Devices for different accessory.\n - **event_name** - The name of the event to listen for sensor value update. This is only valid if the accessory is a sensor (i.e. currently `temperaturesensor` or `humiditysensor`). The plugin listens for events published from a Particle Device (using `Particle.publish`). The device firmware should publish the sensor values as a raw number.\n - **function_name** - The name of the particle function that will be called when an action is triggered via HomeKit. If there is no function provided, the default `power` will be used. This is only valid if the accessory is an actor (i.e. `lightbulb` or `switchaccessory`).\n\n**Particle Event Data Format**\n-------------------------------------\nBy default it expects the event data as "key=value".\n```\nParticle.publish("tvalue", "temperature=20.7")\n```\nIn order to parse JSON format, a custom `split_character` can be configured.\n'