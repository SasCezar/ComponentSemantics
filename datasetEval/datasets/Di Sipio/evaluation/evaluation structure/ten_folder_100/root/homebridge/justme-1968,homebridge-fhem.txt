b'# homebridge-fhem\n[![npm](https://img.shields.io/npm/v/homebridge-fhem.svg?style=plastic)](https://www.npmjs.com/package/homebridge-fhem)\n[![npm](https://img.shields.io/npm/dt/homebridge-fhem.svg?style=plastic)](https://www.npmjs.com/package/homebridge-fhem)\n[![GitHub last commit](https://img.shields.io/github/last-commit/justme-1968/homebridge-fhem.svg?style=plastic)](https://github.com/justme-1968/homebridge-fhem)\n\na fhem platform plugin for homebridge\n\nuses longpoll and an internal cache to avoid roundtrips to fhem.\na debug browser is available at port 8282 (or 8283).\n\nadd one (or more) FHEM platforms to config.json and set the filter(s) to a fhem devspec that\nincludes the devices that should be bridged to homekit.\n\n## directly (automaticaly) supports:\n- switches (devices with set on and set off commands)\n- lights (devices with set on and set off commands)\n- homematc, FS20 and ZWave dimmers (devices with set on, set off and set dim or set pct commands)\n- HUE, WifiLight, MilightDevice, SWAP_0000002200000003 (hue, sat, bri, rgb)\n- homematic, max, pid20 and comet dect  thermostats\n- homematic, DUOFERN, SOMFY and FS20/IT(?) blinds\n- hommatic, MAX and FHTTK contact sensors (door, window)\n- HM-SEC-WIN, HM-SEC-KEY\n- HM-Sen-LI-O\n- presence, ROOMMATE, GUEST\n- SONOS (power, volume)\n- harmony scenes\n- temperature and humidity sensors\n- CO20 and netatmo air quality sensor\n- RESIDENTS module\n- probably some more ...\n\n\n## simple config\nfor devices that are not correctly identified use the genericDeviceType attribute to configure the device type.\nsupported values are: security,ignore,switch,outlet,light,blind,thermometer,thermostat,contact,garage,window,lock\nthis is probably mostly used for differentiating between switches and lights.\n\n## enhanced config\nfor devices that don\'t use the autodetected readings and commands or for devices that mix readings from different\ndevices use the homebridgeMapping attribute. it is parsed from left to right and works as follows:\n- the genericDeviceType attribute is used to determine the service type that should be used for this device\n  in addition to the symbolic names above all homekit Service names are recognized\n- the homebridgeMapping attribute containts a space separated list of characteristic descriptions\n- each description consists of the characteristic name followed by a = followed by a komma separated list of parameters\n- each parameter can be of the form\n  - <command>:<device>:<reading> where parts can be omitted from left to right or\n  - <name>=<value>\n  - the name of an already mapped characteristic to copy the configuration from there\n  - the special clear to clear the mappings for the current characteristic\n  - linkedTo=<service-name> to link the current service to <service-name>\n- characteristic names can be given as <service_name>#<characteristic_name> to create multiple services for a device\n  this can also include a subtype like so; <service_name>(<subtype>)#<characteristic_name> to create multiple services of the same type\n- the following special values for a description are recognized: clear -> clears all mappings for this device\n\ne.g:\n```\nattr <thermostat> genericDeviceType thermostat\nattr <thermostat> homebridgeMapping TargetTemperature=target::target,minValue=18,maxValue=25,minStep=0.5 CurrentTemperature=myTemp:temperature\n```\n\nthis would define a thermostat device with a command target to set the desired temperature, a reading target that indicates the desired target temperature, the desired min, max and step values and a current temeprature comming from the temperature reading of the device myTemp.\n\nthe names for the stadard service and characteristic types can be found here: .../hap-nodejs/lib/gen/HomeKitTypes.js\n\n\n### Currently supported values for Characteristic names are:\n- On\n- Brightness\n- Hue\n- Saturation\n- CurrentTemperaure\n- TargetTemperature\n- CurrentRelativeHumidity\n- CurrentAmbientLightLevel\n- AirQuality\n- CurrentDoorState\n- OccupancyDetected\n- StatusLowBattery\n- SecuritySystemCurrentState\n- SecuritySystemTargetState\n- FirmwareRevision\n- and all other homebridge Characteristic names\n\n### FHEM -> Homekit parameters:\n- minValue, maxValue, minStep: for all int and float characteristics -> the allowed range for this value in homekit\n- max: Hue and Saturation characteristics -> the range the reading has in fhem, only if different from minValue and maxValue\n- nocache: don\'t cache values for this reading\n- subtype: unique value necessary if multiple characteristics of the same type are in an accessory.\n- factor: multiply reading with this value\n- threshold: reading is mapped to true if the value is greater than the threshold value and to false otherwise\n- invert: invert the reading, taking minValue, maxValue into account\n- part: the reading value will be splitted at spaces and the n-th item is used as the value. counting starts at 0\n- values: a ; separated list that indicates the mapping of reading values to homekit values.\n          each list entry consists of a : separated pair of from and to values\n          each from value can be a literal value or a regex of the form /regex/\n          each to value can be a literal value or a homekit defined term for this characteristic\n          if to is exactly # then it is set to the current value. usefull for regex ranges\n- valueOn, valueOff: the reading values that are mapped to the true/false resp. on/off states in homekit. shotcut for values\n                     if only one is given all values not matching this one are automaticaly mapped to the other\n- default: value to use if no reading is found or if none of values/valueOn/valueOff matches\n- timeout: timeout in ms after which the homebridge value is reset to the default value -> used to simulate push buttons\n- valid: a ; separated list of valid values for this characteristic,\n         each to value can be a literal value or a homekit defined term for this characteristic\n- readOnly: if set to true: make this charateristic read only. ignore any changes made by homekit\n\ne.g.:\n```\nPositionState=motor,values=/^up/:INCREASING;/^down/:DECREASING;/.*/:STOPPED On=state,valueOn=/on|dim/,valueOff=off\n```\n\nthe order of the transformations is as follows: eventMap, part, threshold, values, valueOn/valueOff, factor, max, maxValue/minValue/minStep, invert\n\ninstead of using the transformation chain reading2homekit can be set to the name of a js function that is imported from a file\nnamed by the jsFunctions config option. relative paths are relative to the same path the config file is located in.\nthe function it will be called with mapping and reading value as parameters and has to return the value to be used with homekit.\n\nfor custom characterisitcs the additional parameters name, format and unit have to be set. e.g.:\n```\n00000027-0000-1000-8000-0026BB765291=Volume::Volume,name=Volume,format=UINT8,unit=PERCENTAGE,minValue=0,maxValue=0,minStep=1\n```\n\nadding a history characteristic will try to use fakegato-history to create Eve compatible history entries for ContactSensor and TemperatureSensor services:\n```\nhistory:size=1024\n```\n\n\n### Homekit -> FHEM parameters:\n- delay: true/<number> -> the value ist send afer one second/<number>ms of inactivity\n- factor: divide homekit value by this factor\n- maxValue: for all int and float characteristics -> the allowed range for this value in homekit\n- max: the max value the reading has in fhem, only if different from maxValue\n- cmd: the set command to use: set <device> <cmd> <value>\n- cmdOn, cmdOff: for all bool characteristics\n- cmds: a ; separated list that indicates the mapping of homekit values to fhem values.\n        each list entry consists of a : separated pair of from and to values\n        each from value can be a literal value or a homekit defined term for this characteristic or a regex of the form /regex/\n        each to value has to be a literal value\n-cmdSuffix: is appended to the set command\n\nspaces in commands have to be replaced by +\n\ne.g.:\n```\nTargetHeatingCoolingState=...,cmds=OFF:desired-temp+off;HEAT:controlMode+day;COOL:controlMode+night;AUTO:controlMode+auto\n```\n\nthe order of the transformations is as follows: invert, factor, max/maxValue\nprecedence for mapping of homekit value to commands is in increasing order: cmd, cmdOn/cmdOff, cmds\n\ninstead of using the transformation chain homekit2reading can be set to the name of a js function that is imported from a file\nnamed by the jsFunctions config option. relative paths are relative to the same path the config file is located in.\nthe function it will be called with mapping and the homekit value as parameters and has to return the value to be used with the fhem set command.\n\na dummy with a setList of exactly two entries will be mapped to a On characteristic where the first entry will be mapped to on and the second to off.\n\n\nexamples:\n- 1 device -> 1 service (thermometer)\n```\n  attr <temp> genericDeviceType thermometer\n  attr <temp> homebridgeMapping CurrentTemperature=temperature1,minValue=-30\n```\n  wenn das reading temperature heisst statt temperature1 muss es nicht angegeben werden.\n\n- 1 device -> 1 service, 2 characteristics (thermostat)\n```\n  attr <thermostat> genericDeviceType thermostat\n  attr <thermostat> homebridgeMapping TargetTemperature=target::target,minValue=18,maxValue=25,minStep=0.5\n                                      CurrentTemperature=myTemp:temperature\n```\n\n- n devices -> 1 service, n characteristics (temp + hum, dummy thermostat + temp)\n```\n  attr <tempHum> genericDeviceType thermometer\n  attr <tempHum> homebridgeMapping [CurrentTemperature=temperature1] CurrentRelativeHumidity=<device2>:humidity\n```\n  wenn das reading temperature heisst statt temperature1 kann CurrentTemperature=temperature1 entfallen\n\n- 1 device -> 2 services, 1 identical characteristics each (thermometer)\n```\n  attr <dualTemp> genericDeviceType thermometer\n  attr <dualTemp> homebridgeMapping CurrentTemperature=temperature1,minValue=-30,subtype=innen\n                                    CurrentTemperature=temperature2,minValue=-30,subtype=aussen\n```\n\n- 1 device  -> n service with 1 identical characteristic each (1 service per harmony activity)\n```\n  attr <hub> genericDeviceType switch\n  attr <hub> homebridgeMapping clear\n                               On=activity,subtype=TV,valueOn=TV,cmdOn=activity+TV,cmdOff=off\n                               On=activity,subtype=DVD,valueOn=/DVD/,cmdOn=activity+DVD,cmdOff=off\n                               On=activity,subtype=Off,valueOn=PowerOff,valueOff=PowerOff,cmd=off\n```\n\n- 1 device -> n services: give characteristic names as <service_name>#<characteristic_name>\n```\n  attr <name> genericDeviceType switch\n  attr <name> homebridgeMapping On=state,cmdOn=on,cmdOff=off\n                                BatteryService#BatteryLevel=battery\n                                BatteryService#StatusLowBattery=battery,threshold=20,values=0:BATTERY_LEVEL_LOW;;1:BATTERY_LEVEL_NORMAL\n                                BatteryService#ChargingState=charging\n```\n\n\ninstead of the format described above homebridgeMapping can also contain the same data encoded as json\nthis has to be used if any of the separators above are used in an command or value. at the moment the\njson version replaces all build in defaults for a device. e.g.:\n```\n{ "PositionState": { "reading": "motor", "values": [...] }, "On": { "reading": "state", "valueOn": "/on|dim/", "valueOff": "off" } }\n```\n'