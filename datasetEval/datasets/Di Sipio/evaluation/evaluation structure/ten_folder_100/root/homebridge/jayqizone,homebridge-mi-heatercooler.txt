b'# homebridge-mi-heatercooler\n\n[![npm version](https://badge.fury.io/js/homebridge-mi-heatercooler.svg)](https://badge.fury.io/js/homebridge-mi-heatercooler)\n\nEnglish | [\xe4\xb8\xad\xe6\x96\x87](https://github.com/jayqizone/homebridge-mi-heatercooler/blob/master/README-CN.md)\n\nMi /\xc2\xa0Aqara AC partner plugin for [Homebridge](https://github.com/nfarina/homebridge)\n\n## Feature\n\n### Control\n\n- Mode\n  - heat\n  - cool\n  - auto\n- Temperature\n  - 17 - 30 Celsius\n- Fan speed\n  - 1 : low\n  - 2 : medium\n  - 3 : high\n  - 4 : auto\n- Oscillate\n- LED\n  - only if set `enableLED` in config\n  - would add a bulb accessory in Home app\n\n![](https://raw.githubusercontent.com/jayqizone/homebridge-mi-heatercooler/master/images/control.PNG)\n\n### Display\n\n- Sync state with AC partner\n- Idle / Working color\n  - idle : green\n  - heating : orange\n  - cooling : blue\n- Current power percent\n  - only if set `ratedPower` in config\n  - display as Battery Level\n- Current temperature & humidity\n  - only if set `sensorId` in config\n  - would add a humidity sensor in Home app\n\n![](https://raw.githubusercontent.com/jayqizone/homebridge-mi-heatercooler/master/images/state.PNG)\n\n## Installation\n\n```bash\nnpm i -g miio@0.14.1 homebridge homebridge-mi-heatercooler\n```\n\n## Configuration\n\nFirst, you should enable ac partner\'s developer mode in MiHome app\n\nThen, add this to config.json in Homebridge directory:\n\n```json\n"accessories": [\n  {\n    "accessory": "MiHeaterCooler",\n    "name": "AC Partner",\n    "address": "192.168.1.154",\n    "token": "71b4e85d8527aab32c8f9175124c0d59",\n    "sensorId": "158d0001a4c582",\n    "enableLED": true,\n    "ratedPower": 735\n  }\n]\n```\n\n| Parameter | Description | Required |\n|-|-|:-:|\n| `accessory`  | "MiHeaterCooler" \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 | \xe2\x9c\x93 |\n| `name` \xc2\xa0 \xc2\xa0   | unique name \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0| \xe2\x9c\x93 |\n| `address` \xc2\xa0  | your AC partner ip address \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 | \xe2\x9c\x93 |\n| `token` \xc2\xa0  \xc2\xa0 | run `miio --discover` to get it \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0| \xe2\x9c\x93 |\n| `sensorId` \xc2\xa0 | humidity-temperature sensor (bound to your AC partner) id. run `miio --control yourACPartnerIP --method get_device_prop --params \'["lumi.0", "device_list"]\'` to get it (without \'lumi.\' prefix) ||\n| `enableLED` \xc2\xa0| true or \'true\' to enable LED control \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 ||\n| `ratedPower` | Watt, your AC Normal Rated Power, used for displaying power percent by battery level ||\n| `idlePower`  | Watt, determine whether current working state is idle, default value is 100 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0||\n\n## Extra\n\nAuto supports most of brands set 1 solution\n\nOtherwise, you should use an Android simulator (like [BlueStacks](http://www.bluestacks.com)) and [Wireshark](https://www.wireshark.org) to collect and analyze your AC partner command codes by `miio --token yourACPartnerToken --json-dump packetFile`, then modify `template.json` in plugin directory\n\n```json\n{\n  "010500378033333102": {\n    "tpl": "0180333331${p}${m}${w}${s}${th}${l}2",\n    "brand": "haier",\n    "set": "1"\n  }\n}\n```\n\nThe key is your current AC partner solution model, you can get it by `miio --control yourACPartnerIP --method get_model_and_state`\n\n"tpl" is this model\'s command template, you can use ES6 Template Literals with these params:\n\n```js\n/**\n * generate command\n *\n * if your ac partner sends commands like 01xxxxxxxxpmwstlx (most of brands set 1 do)\n * then you don\'t need template config\n *\n * template uses ES6 Template Literals to generate commands\n * supports +, -, *, /, %, ?:, [], toString(16) and so on\n *\n * @param p  number power       0 : off, 1 : on\n * @param m  number mode        0 : heat, 1 : cool, 2 : auto\n * @param w  number wind speed  0 : low, 1 : medium, 2 : high, 3 : auto\n * @param s  number swing       0 : enabled, 1 : disabled\n * @param td number temperature decimal\n * @param th string temperature hexadecimal\n * @param l  string led         \'0\' : on, \'a\' : off\n */\n```'