b'# Sketch API\n\nThis is a JavaScript API for Sketch. The intention is to make something which is:\n\n- idiomatic JavaScript\n- an easily understandable subset of the full internals of Sketch\n- fully supported by Bohemian between releases (ie. we try not to change it, unlike our internal API which we can and do change whenever we need to)\n- still allows you to drop down to our internal API when absolutely necessary\n\nThis API is a very core layer which interfaces with Sketch itself. It\'s intentionally simple, and we want to keep it that way. If you feel like adding some high-level code to it, it\xe2\x80\x99s probably better to add it to a community-maintained library that can be used on top of the API, and keep it separate from the core API effort.\n\n![API layers](https://cloud.githubusercontent.com/assets/206306/19645098/f7d3615c-99ea-11e6-962a-439fb553bf2d.png)\n\n_Comments and suggestions for this API are welcome - [file an issue](https://github.com/sketch-hq/SketchAPI/issues) to discuss it or send them to developer@sketch.com._\n\n## Installation\n\nThe API comes bundled inside Sketch, so no installation is required. You access it by requiring the `sketch` package:\n\n```js\nvar sketch = require(\'sketch\')\n```\n\n## Usage\n\nThe full documentation is available on [https://developer.sketch.com/reference/api].\n\nHere\'s a very simple example script:\n\n```js\n// access the Sketch API\nvar sketch = require(\'sketch\')\n\n// get the current Document and Page\nvar document = sketch.getSelectedDocument()\nvar page = document.selectedPage\n\nvar Group = sketch.Group\nvar Shape = sketch.Shape\nvar Rectangle = sketch.Rectangle\n\n// create a new Group belonging to the current Page\nvar group = new Group({\n  parent: page,\n  frame: new Rectangle(0, 0, 100, 100),\n  name: \'Test\',\n  selected: true,\n})\n// create a new rectangle Shape belonging to the previously created Group\nvar rect = new Shape({\n  parent: group,\n  frame: new Rectangle(10, 10, 80, 80),\n})\n\n// get the current selection\nvar selection = document.selectedLayers\n\nconsole.log(selection.isEmpty)\nselection.forEach(function(item) {\n  console.log(item.name)\n})\n\n// deselect all the layers\nselection.clear()\nconsole.log(selection.isEmpty)\n\n// select the rectangle we created\nrect.selected = true\nconsole.log(selection.isEmpty)\n\n// ask the user for a string\nsketch.UI.getInputFromUser(\n  \'Test\',\n  {\n    type: \'String\',\n    initialValue: \'default\',\n  },\n  (err, outputString) => {\n    if (err) {\n      return\n    }\n    // store the string in the settings\n    // it will be remembered even when Sketch closes\n    sketch.Settings.setSettingForKey(\'setting-to-remember\', outputString)\n    console.log(sketch.Settings.settingForKey(\'setting-to-remember\'))\n\n    sketch.UI.getInputFromUser(\n      \'Test\',\n      {\n        type: \'Selection\',\n        possibleValues: [\'Sketch\', \'Paper\'],\n      },\n      (err, outputSelection) => {\n        if (err) {\n          return\n        }\n        sketch.UI.message(\'Hello mum!\')\n        sketch.UI.alert(\'Title\', outputSelection)\n      }\n    )\n  }\n)\n```\n\nFor more examples, we recommend checking out the [examples section of the developer website](https://developer.sketch.com/examples/).\n\nHappy coding!\n\n## Development\n\nThe API is organized as a series of files defining JavaScript classes, and written with ES6 syntax.\n\nHowever, the version that is embedded in Sketch is a single minified and transpiled library file called `SketchAPI.js`.\n\nIf you want to build this library file locally, you need to have [Node.js](https://nodejs.org) installed, and then run the following in the project\'s root folder:\n\n```bash\nnpm install\n```\n\nOnce that\'s ready, you can run:\n\n```bash\nnpm start\n```\n\nto compile the library. By default, it will be saved to `./build/SketchAPI.js`.\n\nFor your convenience, you can use\n\n```bash\nnpm run watch\n```\n\nand a script will watch for any change in the `Source` folder, and build the `.js` file when anything has changed.\n\nTo test your changes, you need to get Sketch to use the version of `SketchAPI.js` you just built, instead of the one embedded inside it.\n\nTo do this you can run:\n\n```bash\ndefaults write com.bohemiancoding.sketch3 SketchAPILocation "/path/to/your/SketchAPI_repo/build"\n```\n\nSketch will then load the external `.js` files instead of the bundled version.\n\n### Testing\n\nTo run the tests, you can use\n\n```bash\nnpm run test\nnpm run test:watch\n```\n\nIf you want to run the tests with a specific version of Sketch, you can use\n\n```bash\nSKETCH_PATH=/path/to/sketch.app npm run test\n```\n\nIf you want to run the tests with a the current regular version of Sketch, you can use\n\n```bash\nnpm run test:no-variant\nnpm run test:no-variant:watch\n```\n\n## Website\n\nThe website is hosted on Netlify at https://developer.sketch.com.\n\nThe website\xe2\x80\x99s contents live in the [`docs`](./docs) folder, while code related to the website\xe2\x80\x99s build process lives in the [`docs-website`](./docs-website) folder.\n\nFor further details read the docs-website [README](./docs-website/README.md).\n\n## Acknowledgements\n\nWe would like to thank:\n\n- [Logan Collins](https://github.com/logancollins) for [Mocha](https://github.com/logancollins/Mocha), which powers Cocoascript.\n- [Gus Mueller](https://github.com/ccgus) for [Cocoascript](https://github.com/ccgus/CocoaScript), which powers our plugin engine.\n- [Andrey Shakhmin](https://github.com/turbobabr), for his inspiration during the [Hamburg Hackathon](http://designtoolshackday.com), where he showed us a clean way to use node modules inside Sketch.\n- The Sketch plugin community everywhere, for such awesome work.\n'