b'# \xf0\x9f\x8e\xa8 React Native Sketch\n\n[![npm](https://img.shields.io/npm/v/react-native-sketch.svg)](https://www.npmjs.com/package/react-native-sketch)\n[![Downloads](https://img.shields.io/npm/dm/react-native-sketch.svg)](https://www.npmjs.com/package/react-native-sketch)\n[![MIT License](https://img.shields.io/npm/l/react-native-sketch.svg)](http://opensource.org/licenses/MIT)\n\nA React Native component for touch-based drawing.\n\n![Capture](https://user-images.githubusercontent.com/5517450/29750544-da3be86c-8b84-11e7-8996-49521f7a13b3.gif)\n\n## Features\n\n- \xf0\x9f\x91\x86 Draw with your finger, and export an image from it.\n- \xf0\x9f\x96\x8d Change the stroke color and thickness on the fly.\n- \xf0\x9f\x91\xbb Generate a transparent image (or not).\n\n## Setup\n\nInstall the module from npm:\n\n```bash\nnpm i -S react-native-sketch\n```\n\nLink the module to your project:\n\n```bash\nreact-native link react-native-sketch\n```\n\n## Usage\n\n```javascript\nimport React from \'react\';\nimport { Alert, Button, View } from \'react-native\';\nimport Sketch from \'react-native-sketch\';\n\nexport default class MyPaint extends React.Component {\n  save = () => {\n    this.sketch.save().then(({ path }) => {\n      Alert.alert(\'Image saved!\', path);\n    });\n  };\n\n  render() {\n    return (\n      <View style={{ flex: 1 }}>\n        <Sketch\n          ref={sketch => {\n            this.sketch = sketch;\n          }}\n          strokeColor="#ff69b4"\n          strokeThickness={3}\n        />\n        <Button onPress={this.save} title="Save" />\n      </View>\n    );\n  }\n}\n```\n\n## API\n\nHere are the `props` of the the component:\n\n| Name | Type | Default value | Comment |\n| ---- | ---- | ------------- | ---- |\n| `fillColor` | `String` | `null` | The color of the sketch background. Default to null to keep it transparent! *Note: This is different from the `style.backgroundColor` property, as the former will be seen in your exported drawing image, whereas the latter is only used to style the view.* |\n| `imageType` | `String` | `png` | The type of image to export. Can be `png` or `jpg`. Default to `png` to get transparency out of the box. |\n| `onChange` | `Function` | `() => {}` | Callback function triggered after every change on the drawing. The function takes one argument: the actual base64 representation of your drawing.|\n| `onClear` | `Function` | `() => {}` | Callback function triggered after a `clear` has been triggered. |\n| `strokeColor` | `String` | `\'#000000\'` | The stroke color you want to draw with. |\n| `strokeThickness` | `Number` | `1` | The stroke thickness, in pixels. |\n| `style` | Style object | `null` | Some `View` styles if you need. |\n\nThe component also has some instance methods:\n\n| Name | Return type | Comment |\n| ---- | ----------- | ------- |\n| `clear()` | `Promise` | Clear the drawing. This method is a Promise mostly to be consistent with `save()`, but you could simply type: `this.sketch.clear();` |\n| `save()` | `Promise` | Save the drawing to an image, using the defined props as settings (`imageType`, `fillColor`, etc...). The Promise resolves with an object containing the `path` property of that image. Ex: `this.sketch.save().then(image => console.log(image.path));` |\n\n## Examples\n\nThe project contains a folder `examples` that contains few demos of how to use `react-native-sketch`. Just copy and paste the code to your React Native application.\n\n- [`Basic`](https://github.com/jgrancher/react-native-sketch/tree/master/examples/basic): uses the bare minimum to make it work.\n- [`Digital Touch`](https://github.com/jgrancher/react-native-sketch/tree/master/examples/digital-touch): tries to reproduce the look and feel of iOS Message Digital Touch.\n\nFeel free to play with them!\n\n## Known issues\n\n- Rotating the screen gets to a weird behavior of the sketch view: [#23](https://github.com/jgrancher/react-native-sketch/issues/23)\n\n## Notes\n\n- If you\'re using Expo, you will have to [`detach` to ExpoKit](https://docs.expo.io/versions/latest/guides/detach.html), as this module uses native iOS code.\n- The module is available *only on iOS for now*, as I don\'t know Android development... But if you think you can help on that matter, please feel free to create a Pull Request!\n- The module uses this [smooth freehand drawing technique](http://code.tutsplus.com/tutorials/smooth-freehand-drawing-on-ios--mobile-13164) under the hood.\n\n## Contributing\n\nFeel free to contribute by sending a pull request or [creating an issue](https://github.com/jgrancher/react-native-sketch/issues/new).\n\n## License\n\n[MIT](https://github.com/jgrancher/react-native-sketch/tree/master/LICENSE)\n'