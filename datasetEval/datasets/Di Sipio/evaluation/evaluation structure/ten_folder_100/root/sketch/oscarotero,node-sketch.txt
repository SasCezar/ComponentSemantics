b"# \xf0\x9f\x92\x8e node-sketch\nJavascript library to manipulate sketch files\n\n[![Build Status](https://travis-ci.org/oscarotero/node-sketch.svg?branch=master)](https://travis-ci.org/oscarotero/node-sketch)\n\n## Install\n\n```sh\nnpm install node-sketch\n```\n\n## Example:\n\n```js\nconst ns = require('node-sketch');\n\nasync function run() {\n    const sketch = await ns.read(__dirname + '/design.sketch');\n\n    //Search the symbol named 'button'\n    const buttonSymbol = sketch.symbolsPage.get('symbolMaster', 'button');\n\n    //Search all instances of a symbol named 'old-button' and replace it with 'button'\n    const firstPage = sketch.pages[0];\n    \n    firstPage\n        .getAll('symbolInstance', instance => instance.symbolMaster.name === 'old-button')\n        .forEach(instance => instance.symbolMaster = buttonSymbol);\n\n    //Save the result\n    sketch.save('modified-design.sketch')\n        .then(console.log('File saved!!'));\n}\n\nrun();\n```\n\n## API\n\nTwo classes are used to manage sketch files:\n\n### `Sketch`\n\nRepresents the sketch file and contains all data (pages, symbols, styles, shapes, etc). Contains the method `.save()` to create a sketch file with the result.\n\n```js\nconst ns = require('node-sketch');\n\nns.read('input.sketch').then(sketch => {\n    sketch.document           // document data\n    sketch.meta               // meta data\n    sketch.user               // user data\n    sketch.pages              // array with all pages\n    sketch.symbolsPage        // the Symbols page\n    sketch.layerStyles        // array with the layer styles\n    sketch.textStyles         // array with the text styles\n    sketch.colors             // array containing the colors stored in the color palette\n    sketch.gradients          // array containing the gradients stored in the gradient palette\n    sketch.symbols            // array with all symbols stored in the document\n\n    sketch.foreignSymbols     // array with the symbols loaded from external libraries\n    sketch.foreignLayerStyles // array with the layer styles loaded from external libraries\n    sketch.foreignTextStyles  // array with the text styles loaded from external libraries\n\n    sketch.save('output.sketch');\n});\n```\n\n### `Node`\n\nIt's the base class used by all other elements. Any page, symbol, color, etc is an instance of this class.\n\n```js\nconst symbolsPage = sketch.symbolsPage;\n\nconsole.log(symbolsPage instanceof Node); //true \n\n//It include useful methods to search an inner node by class:\nconst button = symbolsPage.get('symbolMaster');\n\n//by class and name\nconst button = symbolsPage.get('symbolMaster', 'button');\n\n//by class and callback\nconst button = symbolsPage.get('symbolMaster', symbol => symbol.name === 'button');\n\n//Just a callback\nconst button = symbolsPage.get(node => node._class === 'symbolMaster' && node.name === 'button');\n\n//And the same than above but returning all inner nodes instead just the first:\nconst allSymbols = symbolsPage.getAll('symbolMaster');\n```\n\nThere are other classes extending `Node` to provide special funcionalities in some nodes, like `Style` or `SymbolInstance`.\n\n### JSON Scheme\n\nTechnically, the sketch format consist in a zip with some json files. To manipulate a sketch file with this library, you need to know the scheme of json. You can use this code to read and extract a sketch file into a directory, in order to inspect the json scheme:\n\n```js\nconst ns = require('../');\n\nns.read('demo.sketch').then(sketch => sketch.saveDir('demo'));\n```\nHere you can see [an example of extracted file](demos/scheme-explorer)\n\n### CLI\n\nStarting from v0.14.0, the command `node-sketch` was included to use the library from CLI. You only need a file named `node-sketch.js` exporting the function to manipulate a sketch file. For example:\n\n```js\nmodule.exports = sketch => {\n    //Convert the text style names to uppercase\n    sketch.textStyles.forEach(textStyle => {\n        textStyle.name = textStyle.name.toUpperCase();\n    })\n}\n```\nTo execute this script with the sketch file `my-styles.sketch`, run `node-sketch my-styles.sketch`.\nBy default, the file is readed, but not saved. If you want to override the file with the modifications, run `node-sketch my-styles.sketch --save`.\n\nAnd to execute a script file with a different name, use the `--script` argument: `node-sketch my-styles.sketch --script=my-script.js --save`.\n\n---\n\n[See the API detailed](https://oscarotero.github.io/node-sketch/)\n\nOr build it locally with `npm run docs`\n"