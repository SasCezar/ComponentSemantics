b'<h1 align="center">skpm - Sketch Plugin Manager</h1>\n\n<div align="center">\n  <img src="https://avatars0.githubusercontent.com/u/24660874?v=3&s=200" />\n</div>\n<br />\n<div align="center">\n  <strong>A utility to create, build and publish <a href="https://www.sketchapp.com/">sketch</a> plugins.</strong>\n</div>\n\n## Installation\n\n> Important: [Node.js](https://nodejs.org/en/download/) > V6.x is a minimum requirement. You also need the [command line tools](http://osxdaily.com/2014/02/12/install-command-line-tools-mac-os-x/) installed.\n\n```bash\nnpm install -g skpm\n```\n\n## Usage\n\n```bash\nskpm create my-plugin\n```\n\nThe above command pulls the template from [skpm/skpm](https://github.com/skpm/skpm/tree/master/template), prompts for some information, and generates the project at ./my-plugin/.\n\n* [Create a new plugin](#create-a-new-plugin)\n* [Build the plugin](#build-the-plugin)\n* [View the plugin\'s log](#view-the-plugins-log)\n* [Publish the plugin on the registry](#publish-the-plugin-on-the-registry)\n\n#### Create a new plugin\n\n```bash\nskpm create <plugin-name>\n\n--name        The plugin display name.\n--cwd         A directory to use instead of $PWD.\n--force       Force option to create the directory for the new app. [boolean] [default: false]\n--template    The repository hosting the template to start from.    [string]  [default: skpm/skpm]\n--git         Initialize version control using git.                 [boolean] [default: true]\n--install     Installs dependencies.                                [boolean] [default: true]\n```\n\n> ##### A note on templates\n>\n> The purpose of official skpm plugin templates are to provide opinionated development tooling setups so that users can get started with actual plugin code as fast as possible. However, these templates are un-opinionated in terms of how you structure your plugin code and what libraries you use in addition to skpm.\n>\n> Current available official templates include:\n>\n> * [`skpm/skpm`](https://github.com/skpm/skpm/tree/master/template) - The simplest possible plugin setup. (_default_)\n> * [`skpm/with-prettier`](https://github.com/skpm/with-prettier) - A plugin setup featuring linting with ESLint and code formatting with Prettier.\n> * [`skpm/with-datasupplier`](https://github.com/skpm/with-datasupplier) - A template to create DataSupplier plugins (check [our blog](https://blog.sketchapp.com/do-more-with-data-2b765e870e4f) for more info)\n> * [`skpm/with-webview`](https://github.com/skpm/with-webview) - A template to create plugins displaying some rich UI in a WebView (check [sketch-module-web-view](https://github.com/skpm/sketch-module-web-view) for more info)\n>\n> > \xf0\x9f\x92\x81 Tip: Any Github repo with a \'template\' folder can be used as a custom template:\n> > `skpm create <project-name> --template=<username>/<repository>`\n\n#### Build the plugin\n\nOnce the installation is done, you can run some commands inside the project folder:\n\n```bash\nnpm run build\n```\n\nTo watch for changes:\n\n```bash\nnpm run watch\n```\n\nAdditionally, if you wish to run the plugin every time it is built:\n\n```bash\nnpm run start\n```\n\n#### View the plugin\'s log\n\nTo view the output of your `console.log`, you have a few different options:\n\n* Use the [`sketch-dev-tools`](https://github.com/skpm/sketch-dev-tools)\n* Open `Console.app` and look for the sketch logs\n* Look at the `~/Library/Logs/com.bohemiancoding.sketch3/Plugin Output.log` file\n\nSkpm provides a convenient way to do the latter:\n\n```bash\nskpm log\n\n  -f, -F        The `-f` option causes tail to not stop when end of file is\n                reached, but rather to wait for additional data to be appended\n                to the input.                       [boolean] [default: "false"]\n  --number, -n  Shows `number` lines of the logs.                       [number]\n```\n\n#### Publish the plugin on the registry\n\nTo publish a new version of the plugin to the registry:\n\n```bash\nskpm publish <new-version> | major | minor | patch | premajor | preminor | prepatch | prerelease\n\n  --repo-url          Specify the repository URL (default to the one specified\n                      in package.json).                                 [string]\n  --skip-release      Do not create a release on GitHub.com.           [boolean]\n  --open-release, -o  Open the newly created release on GitHub.com.    [boolean]\n  --skip-registry     Do not publish to the plugins registry if not already\n                      present.                                         [boolean]\n  --download-url      Specify the new version\'s download URL (default to the\n                      asset of the release created on GitHub.com).      [string]\n```\n\nThe exact order of execution (without options) is as follows:\n\n* Run the `preversion` script\n* Bump `version` in package.json as requested (`patch`, `minor`, `major`, etc).\n* Run the `version` script\n* Commit and tag\n* Run the `postversion` script.\n* Run the `prepublish` or `build` script\n* Zip the folder specified in the `main` field\n* Create a draft release on GitHub\n* Upload the zip to GitHub\n* Publish the release\n* Remove the zip\n* Check the [sketchplugins/plugin-directory](https://github.com/sketchplugins/plugin-directory) repo to see if the plugin is already there. If not, open a PR to add it.\n\n## License\n\n[MIT](https://tldrlegal.com/license/mit-license)\n'