b'<p align="center">\n  <img src="https://s3.amazonaws.com/prism-plugin/logo.png" style="width: 100%; max-width:800px;" />\n</p>\n\n|  [Download][] | [Features][] | [Usage][] | [Customization][] | [Changelog][] | [Next][] | [Contribute][] | [Credits][] |\n\n<p align="center">\n  <img src="https://s3.amazonaws.com/prism-plugin/ClassicSample.png" style="width: 100%; max-width:800px;" />\n</p>\n\n_(Formerly **ShareableColorPalette**)_\n\nCreates a beautiful artboard with all the colors in your `Document Colors` with its respective color label in a variety of formats.  _(Sketch **41**)_\n\n**Important: Make sure to download version 1.0.3 or higher to use Sketch 45 plugin auto updates.** \xf0\x9f\x98\x8e\n\n\n\n\n\n******\n\n\n<h2>Features</h2>\n\n* Beautiful color palette generation.\n* Automatic color naming.\n* Fully customizable.\n* Export as code in a variety of formats (CSS, SASS variables, Swift, etc).\n* Color renaming (Alias).\n* Rebuilt from the ground up using `Coffeescript` and love.\n\n\n\n<h2>Usage</h2>\n\n1. Install plugin.\n2. Add your colors to your *Document Colors*.\n3. Run command **[ctrl cmd c]**.\n4. Voil\xc3\xa0!\n\n<p align="center">\n  <img src="https://s3.amazonaws.com/prism-plugin/CreatePalette.gif" style="width: 100%; max-width:800px;" />\n</p>\n\n<h4>Changing a Color Alias</h4>\n\nTo change the color alias, just change the text on the *Name* layer. If you want the default color name, just delete the text on that same layer.\n\n<p align="center">\n  <img src="https://s3.amazonaws.com/prism-plugin/changealias.gif" style="width: 100%; max-width:800px;" />\n</p>\n\n<h4>Exporting Colors as Code</h4>\n\n1. Select the colors you want to export *(optional)*\n2. Click `Export Selected Colors` **[ctrl cmd s]** or `Export All Colors` **[ctrl cmd e]**\n3. Select the format to export.\n4. Save your color code file or copy the colors to clipboard.\n\n<p align="center">\n  <img src="https://s3.amazonaws.com/prism-plugin/ExportColorCode.gif" style="width: 100%; max-width:800px;" />\n</p>\n\n<h2>Customization</h2>\nUnder the Prism menu, there\'s an option called **Show Template File...** that opens the Template.sketch file located under the Prism.sketchplugin package, this file contains all the layers that are used as templates and are later copied over to your palette.\n\n<h4>Changing Palette Template</h4>\nThe template file is a normal sketch file that has multiple pages, each page with its own cell Template, you can add or remove all the pages you want to manage your own templates, to select the style you want just open the file and save it on the page your desired template is. Now just generate your palette to see the changes.\n\n<p align="center">\n  <img src="https://s3.amazonaws.com/prism-plugin/ChangeTemplate.gif" style="width: 100%; max-width:800px;" />\n</p>\n\n<h4>Editing Template</h4>\n\nPrism offers a lot of freedom to let you customize your own templates, however, in order for your template to play nicely with Prism you just have a few restrictions:\n* Your template page must have only one artboard layer that is exactly named `Prism Palette`, users can then change the name of the artboard once the palette is generated in their sketch files. Your cell doesn\'t have to be inside this artboard, but it would be good practice, as future releases may use this cell-inside-artboard to specify the spacing between cells.\n* Your template **must** have a layer group named exactly `Cell`, everything that your cell includes must be inside this group, you can then go ahead and add as many groups as you like inside of it ;)\n* Inside the `Cell` group there must be a layer named exactly `Color`, it must have at least one solid Fill and this fill must be on the bottom of all the other fills, this layer is the one that Prism uses to display the real color.\n* Inside the `Cell` group there must be a **text** layer named exactly `Name` (lol), this is the layer that Prism uses to display the automatic name and can be edited to add or remove aliases.\n* Prism uses the name of the text layers to format the color of the cell, for example: if there\'s a text layer named "RGBA_CSS", prism will try set the layer\'s text value to the specified format.\n\n\nYou can have as many text layers for formats as you want. Also, layers can be locked or invisible as long as they conform to this restrictions.\n\n<p align="center">\n  <img src="https://s3.amazonaws.com/prism-plugin/EditTemplate.gif" style="width: 100%; max-width:800px;" />\n</p>\n\nIf you wanna dive deeper on this process, you should check out the `Cell.coffee` and `Template.coffee` files.\n\n<h4>Adding Format</h4>\n\n1. Create a new formatter Coffeescript file inside `src/formats`\n2. Create a subclass of `FormatterBase` for your new formatter class.\n3. Overrides some methods defined in `FormatterBase.coffee`.\n    - `id` and `name` are required to override.\n    - If you plan to one text based format file like `HexFormatter`, then\n        - `formatText` and `format` required to override.\n    - If you plan to one binary format file like `CLRFormatter`, then\n        - You need to override `supportClipboard` to return` false`\n        - You need to override `exportAsFile`.\n    - If you plan to export several files like `ColorSetFormatter`, then\n        - You need to override `type` to return `EXPORT_TYPE_FILES`\n\nSee `FormatterBase.coffee` for details.\n\n<h2>Contribute</h2>\nThe best way to get things done is by doing them yourself, if you want to specify a format or a add a new feature or fix a bug, just submit a pull request!\n\nI have included a `compile.sh` file that automatically compiles all the files inside the `src/` folder into the `build/` folder, however, if you add new files you must import them in the right order inside the `Prism.cocoascript` file.\n\n*You will need coffescript v1 for the plugin to work as v1 compiles to EC5 syntax accepted by cocoascript*\n\nYou can easily install it with npm by running this:\n`npm install --global coffeescript@1.12.7`\n\nYou can then run the `compile.sh` file by typing this in the terminal inside the `Prism.sketchplugin/Content/Sketch` folder:\n```shell\n  ./compile.sh\n```\n<h2>What\'s next</h2>\n\n* Gradients support\n* Better template selection\n\n\n<h2>Credits</h2>\n\n- [Lalo](https://github.com/LaloMrtnz) & [Adrxx](https://github.com/Adrxx): **Creators**\n- [griffin-stewie](https://github.com/griffin-stewie): New format structure\n- Special thanks to [Gauth](http://gauth.fr/2011/09/get-a-color-name-from-any-rgb-combination/) for his color classifier and dataset.\n\n[Download]:https://github.com/ment-mx/Prism/releases\n[Features]:https://github.com/LaloMrtnz/Prism#features\n[Usage]:https://github.com/LaloMrtnz/Prism#usage\n[Customization]:https://github.com/LaloMrtnz/Prism#customization\n[Changelog]:https://github.com/LaloMrtnz/Prism/releases\n[Next]:https://github.com/LaloMrtnz/Prism#whats-next\n[Contribute]:https://github.com/LaloMrtnz/Prism#contribute\n[Credits]:https://github.com/LaloMrtnz/Prism#credits\n'