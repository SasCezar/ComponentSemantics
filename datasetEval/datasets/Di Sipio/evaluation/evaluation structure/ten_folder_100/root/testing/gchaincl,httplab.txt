b'![HTTPLAB](https://github.com/gchaincl/httplab/blob/master/images/httplab_logo.png)\n\n[![Build Status](https://travis-ci.org/gchaincl/httplab.svg?branch=master)](https://travis-ci.org/gchaincl/httplab) [![Go Report Card](https://goreportcard.com/badge/github.com/gchaincl/httplab)](https://goreportcard.com/report/gchaincl/httplab) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square)](http://makeapullrequest.com)\n\n\nThe interactive web server.\n\nHTTPLabs let you inspect HTTP requests and forge responses.\n\n---\n![screencast](images/screencast.gif)\n\n# Install\n### Golang\n```bash\ngo get github.com/gchaincl/httplab\ngo install github.com/gchaincl/httplab/cmd/httplab\n```\n\n### Archlinux\n```\nyaourt httplab\n```\n\n### ~Snap~ [FIXME](https://github.com/gchaincl/httplab/issues/78)\nOn [systems](https://snapcraft.io/docs/core/install) where snap is supported:\n```\nsnap install httplab\n```\n\n### Binary distribution\nEach release provides pre-built binaries for different architectures, you can download them here: https://github.com/gchaincl/httplab/releases/latest\n\n## Help\n```\nUsage of httplab:\n  -a, --auto-update       Auto-updates response when fields change. (default true)\n  -b, --body string       Specifies the inital response body. (default "Hello, World")\n  -c, --config string     Specifies custom config path.\n      --cors              Enable CORS.\n      --cors-display      Display CORS requests. (default true)\n  -d, --delay int         Specifies the initial response delay in ms.\n  -H, --headers strings   Specifies the initial response headers. (default [X-Server:HTTPLab])\n  -p, --port int          Specifies the port where HTTPLab will bind to. (default 10080)\n  -s, --status string     Specifies the initial response status. (default "200")\n  -v, --version           Prints current version.\n```\n\n### Key Bindings\nKey                                     | Description\n----------------------------------------|---------------------------------------\n<kbd>Tab</kbd>                          | Next Input\n<kbd>Shift+Tab</kbd>                    | Previous Input\n<kbd>Ctrl+a</kbd>                       | Apply Response changes\n<kbd>Ctrl+r</kbd>                       | Resets Request history\n<kbd>Ctrl+s</kbd>                       | Save Response as\n<kbd>Ctrl+f</kbd>                       | Save Request as\n<kbd>Ctrl+l</kbd>                       | Toggle Responses list\n<kbd>Ctrl+t</kbd>                       | Toggle Response builder\n<kbd>Ctrl+o</kbd>                       | Open Body file\n<kbd>Ctrl+b</kbd>                       | Switch Body mode\n<kbd>Ctrl+h</kbd>                       | Toggle Help\n<kbd>Ctrl+w</kbd>                       | Toggle line wrapping\n<kbd>q</kbd>                            | Close popup\n<kbd>PgUp</kbd>                         | Previous Request\n<kbd>PgDown</kbd>                       | Next Request\n<kbd>Ctrl+c</kbd>                       | Quit\n\nHTTPLab uses file to store pre-built responses, it will look for a file called `.httplab` on the current directory if not found it will fallback to `$HOME`.\nA sample file can be found [here](https://github.com/gchaincl/httplab/blob/master/.httplab.sample).\n\n_HTTPLab is heavily inspired by [wuzz](https://github.com/asciimoo/wuzz)_\n'