b'# randexp.js\n\nrandexp will generate a random string that matches a given RegExp Javascript object.\n\n[![Build Status](https://secure.travis-ci.org/fent/randexp.js.svg)](http://travis-ci.org/fent/randexp.js)\n[![Dependency Status](https://david-dm.org/fent/randexp.js.svg)](https://david-dm.org/fent/randexp.js)\n[![codecov](https://codecov.io/gh/fent/randexp.js/branch/master/graph/badge.svg)](https://codecov.io/gh/fent/randexp.js)\n\n# Usage\n\n```js\nconst RandExp = require(\'randexp\');\n\n// supports grouping and piping\nnew RandExp(/hello+ (world|to you)/).gen();\n// => hellooooooooooooooooooo world\n\n// sets and ranges and references\nnew RandExp(/<([a-z]\\w{0,20})>foo<\\1>/).gen();\n// => <m5xhdg>foo<m5xhdg>\n\n// wildcard\nnew RandExp(/random stuff: .+/).gen();\n// => random stuff: l3m;Hf9XYbI [YPaxV>U*4-_F!WXQh9>;rH3i l!8.zoh?[utt1OWFQrE ^~8zEQm]~tK\n\n// ignore case\nnew RandExp(/xxx xtreme dragon warrior xxx/i).gen();\n// => xxx xtReME dRAGON warRiOR xXX\n\n// dynamic regexp shortcut\nnew RandExp(\'(sun|mon|tue|wednes|thurs|fri|satur)day\', \'i\');\n// is the same as\nnew RandExp(new RegExp(\'(sun|mon|tue|wednes|thurs|fri|satur)day\', \'i\'));\n```\n\nIf you\'re only going to use `gen()` once with a regexp and want slightly shorter syntax for it\n\n```js\nconst randexp = require(\'randexp\').randexp;\n\nrandexp(/[1-6]/); // 4\nrandexp(\'great|good( job)?|excellent\'); // great\n```\n\nIf you miss the old syntax\n\n```js\nrequire(\'randexp\').sugar();\n\n/yes|no|maybe|i don\'t know/.gen(); // maybe\n```\n\n# Motivation\n\nRegular expressions are used in every language, every programmer is familiar with them. Regex can be used to easily express complex strings. What better way to generate a random string than with a language you can use to express the string you want?\n\nThanks to [String-Random](http://search.cpan.org/~steve/String-Random-0.22/lib/String/Random.pm) for giving me the idea to make this in the first place and [randexp](https://github.com/benburkert/randexp) for the sweet `.gen()` syntax.\n\n# Default Range\n\nThe default generated character range includes printable ASCII. In order to add or remove characters,\na `defaultRange` attribute is exposed. you can `subtract(from, to)` and `add(from, to)`\n```js\nconst randexp = new RandExp(/random stuff: .+/);\nrandexp.defaultRange.subtract(32, 126);\nrandexp.defaultRange.add(0, 65535);\nrandexp.gen();\n// => random stuff: \xe6\xb9\x90\xe7\xae\xbb\xe0\xbb\x9c\xe4\xab\xb4\xe2\x90\xa9\xe2\xb6\x9b\xe3\xb3\xb8\xe9\x95\xb7\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xe9\x82\x93\xe8\x95\xb2\xeb\xa4\x80\xec\x91\xa1\xe7\xaf\xb7\xe7\x9a\x87\xe7\xa1\xac\xe5\x89\x88\xea\xb6\xa6\xe4\xbd\x94\xec\xb9\x97\xeb\xb8\x9b\xeb\x80\x83\xe5\x8c\xab\xe9\xb4\x94\xe4\xba\x8b\xef\x90\x98\xec\xa2\x8d\xef\xaf\xa3\xe2\xad\xbc\xea\x9d\x8f\xe4\xad\x8d\xe8\xa9\xb3\xe8\x92\x82\xe4\xa5\x82\xeb\xbd\xad\n```\n\nYou can also change the default range by changing `RandExp.prototype.defaultRange`.\n\n# Custom PRNG\n\nThe default randomness is provided by `Math.random()`. If you need to use a seedable or cryptographic PRNG, you\ncan override `RandExp.prototype.randInt` or `randexp.randInt` (where `randexp` is an instance of `RandExp`). `randInt(from, to)` accepts an inclusive range and returns a randomly selected number within that range.\n\n# Infinite Repetitionals\n\nRepetitional tokens such as `*`, `+`, and `{3,}` have an infinite max range. In this case, randexp looks at its min and adds 100 to it to get a useable max value. If you want to use another int other than 100 you can change the `max` property in `RandExp.prototype` or the RandExp instance.\n\n```js\nconst randexp = new RandExp(/no{1,}/);\nrandexp.max = 1000000;\n```\n\nWith `RandExp.sugar()`\n\n```js\nconst regexp = /(hi)*/;\nregexp.max = 1000000;\n```\n\n# Bad Regular Expressions\n\nThere are some regular expressions which can never match any string.\n\n* Ones with badly placed positionals such as `/a^/` and `/$c/m`. Randexp will ignore positional tokens.\n\n* Back references to non-existing groups like `/(a)\\1\\2/`. Randexp will ignore those references, returning an empty string for them. If the group exists only after the reference is used such as in `/\\1 (hey)/`, it will too be ignored.\n\n* Custom negated character sets with two sets inside that cancel each other out. Example: `/[^\\w\\W]/`. If you give this to randexp, it will return an empty string for this set since it can\'t match anything.\n\n\n# Projects based on randexp.js\n\n\n## JSON-Schema Faker\n\nUse generators to populate JSON Schema samples. See: [jsf on github](https://github.com/json-schema-faker/json-schema-faker/) and [jsf demo page](http://json-schema-faker.js.org/).\n\n\n# Install\n\n### Node.js\n\n    npm install randexp\n\n### Browser\n\nDownload the [minified version](https://github.com/fent/randexp.js/releases) from the latest release.\n\n\n# Tests\n\nTests are written with [mocha](https://mochajs.org)\n\n```bash\nnpm test\n```\n\n# Integration with TypeScript\n\nRandExp includes TypeScript definitions.\n\n```typescript\nimport RandExp from "randexp";\nconst randexp = new RandExp(/[a-z]{6}/);\nrandexp.gen();\n```\n\nUse dtslint to check the definition file.\n\n    npm install -g dtslint\n    npm run dtslint\n'