b'Testify - Thou Shalt Write Tests\n================================\n\n[![Build Status](https://travis-ci.org/stretchr/testify.svg)](https://travis-ci.org/stretchr/testify) [![Go Report Card](https://goreportcard.com/badge/github.com/stretchr/testify)](https://goreportcard.com/report/github.com/stretchr/testify) [![GoDoc](https://godoc.org/github.com/stretchr/testify?status.svg)](https://godoc.org/github.com/stretchr/testify)\n\nGo code (golang) set of packages that provide many tools for testifying that your code will behave as you intend.\n\nFeatures include:\n\n  * [Easy assertions](#assert-package)\n  * [Mocking](#mock-package)\n  * [Testing suite interfaces and functions](#suite-package)\n\nGet started:\n\n  * Install testify with [one line of code](#installation), or [update it with another](#staying-up-to-date)\n  * For an introduction to writing test code in Go, see http://golang.org/doc/code.html#Testing\n  * Check out the API Documentation http://godoc.org/github.com/stretchr/testify\n  * To make your testing life easier, check out our other project, [gorc](http://github.com/stretchr/gorc)\n  * A little about [Test-Driven Development (TDD)](http://en.wikipedia.org/wiki/Test-driven_development)\n\n\n\n[`assert`](http://godoc.org/github.com/stretchr/testify/assert "API documentation") package\n-------------------------------------------------------------------------------------------\n\nThe `assert` package provides some helpful methods that allow you to write better test code in Go.\n\n  * Prints friendly, easy to read failure descriptions\n  * Allows for very readable code\n  * Optionally annotate each assertion with a message\n\nSee it in action:\n\n```go\npackage yours\n\nimport (\n  "testing"\n  "github.com/stretchr/testify/assert"\n)\n\nfunc TestSomething(t *testing.T) {\n\n  // assert equality\n  assert.Equal(t, 123, 123, "they should be equal")\n\n  // assert inequality\n  assert.NotEqual(t, 123, 456, "they should not be equal")\n\n  // assert for nil (good for errors)\n  assert.Nil(t, object)\n\n  // assert for not nil (good when you expect something)\n  if assert.NotNil(t, object) {\n\n    // now we know that object isn\'t nil, we are safe to make\n    // further assertions without causing any errors\n    assert.Equal(t, "Something", object.Value)\n\n  }\n\n}\n```\n\n  * Every assert func takes the `testing.T` object as the first argument.  This is how it writes the errors out through the normal `go test` capabilities.\n  * Every assert func returns a bool indicating whether the assertion was successful or not, this is useful for if you want to go on making further assertions under certain conditions.\n\nif you assert many times, use the below:\n\n```go\npackage yours\n\nimport (\n  "testing"\n  "github.com/stretchr/testify/assert"\n)\n\nfunc TestSomething(t *testing.T) {\n  assert := assert.New(t)\n\n  // assert equality\n  assert.Equal(123, 123, "they should be equal")\n\n  // assert inequality\n  assert.NotEqual(123, 456, "they should not be equal")\n\n  // assert for nil (good for errors)\n  assert.Nil(object)\n\n  // assert for not nil (good when you expect something)\n  if assert.NotNil(object) {\n\n    // now we know that object isn\'t nil, we are safe to make\n    // further assertions without causing any errors\n    assert.Equal("Something", object.Value)\n  }\n}\n```\n\n[`require`](http://godoc.org/github.com/stretchr/testify/require "API documentation") package\n---------------------------------------------------------------------------------------------\n\nThe `require` package provides same global functions as the `assert` package, but instead of returning a boolean result they terminate current test.\n\nSee [t.FailNow](http://golang.org/pkg/testing/#T.FailNow) for details.\n\n[`mock`](http://godoc.org/github.com/stretchr/testify/mock "API documentation") package\n----------------------------------------------------------------------------------------\n\nThe `mock` package provides a mechanism for easily writing mock objects that can be used in place of real objects when writing test code.\n\nAn example test function that tests a piece of code that relies on an external object `testObj`, can setup expectations (testify) and assert that they indeed happened:\n\n```go\npackage yours\n\nimport (\n  "testing"\n  "github.com/stretchr/testify/mock"\n)\n\n/*\n  Test objects\n*/\n\n// MyMockedObject is a mocked object that implements an interface\n// that describes an object that the code I am testing relies on.\ntype MyMockedObject struct{\n  mock.Mock\n}\n\n// DoSomething is a method on MyMockedObject that implements some interface\n// and just records the activity, and returns what the Mock object tells it to.\n//\n// In the real object, this method would do something useful, but since this\n// is a mocked object - we\'re just going to stub it out.\n//\n// NOTE: This method is not being tested here, code that uses this object is.\nfunc (m *MyMockedObject) DoSomething(number int) (bool, error) {\n\n  args := m.Called(number)\n  return args.Bool(0), args.Error(1)\n\n}\n\n/*\n  Actual test functions\n*/\n\n// TestSomething is an example of how to use our test object to\n// make assertions about some target code we are testing.\nfunc TestSomething(t *testing.T) {\n\n  // create an instance of our test object\n  testObj := new(MyMockedObject)\n\n  // setup expectations\n  testObj.On("DoSomething", 123).Return(true, nil)\n\n  // call the code we are testing\n  targetFuncThatDoesSomethingWithObj(testObj)\n\n  // assert that the expectations were met\n  testObj.AssertExpectations(t)\n\n\n}\n\n// TestSomethingElse is a second example of how to use our test object to\n// make assertions about some target code we are testing.\n// This time using a placeholder. Placeholders might be used when the\n// data being passed in is normally dynamically generated and cannot be\n// predicted beforehand (eg. containing hashes that are time sensitive)\nfunc TestSomethingElse(t *testing.T) {\n\n  // create an instance of our test object\n  testObj := new(MyMockedObject)\n\n  // setup expectations with a placeholder in the argument list\n  testObj.On("DoSomething", mock.Anything).Return(true, nil)\n\n  // call the code we are testing\n  targetFuncThatDoesSomethingWithObj(testObj)\n\n  // assert that the expectations were met\n  testObj.AssertExpectations(t)\n\n\n}\n```\n\nFor more information on how to write mock code, check out the [API documentation for the `mock` package](http://godoc.org/github.com/stretchr/testify/mock).\n\nYou can use the [mockery tool](http://github.com/vektra/mockery) to autogenerate the mock code against an interface as well, making using mocks much quicker.\n\n[`suite`](http://godoc.org/github.com/stretchr/testify/suite "API documentation") package\n-----------------------------------------------------------------------------------------\n\nThe `suite` package provides functionality that you might be used to from more common object oriented languages.  With it, you can build a testing suite as a struct, build setup/teardown methods and testing methods on your struct, and run them with \'go test\' as per normal.\n\nAn example suite is shown below:\n\n```go\n// Basic imports\nimport (\n    "testing"\n    "github.com/stretchr/testify/assert"\n    "github.com/stretchr/testify/suite"\n)\n\n// Define the suite, and absorb the built-in basic suite\n// functionality from testify - including a T() method which\n// returns the current testing context\ntype ExampleTestSuite struct {\n    suite.Suite\n    VariableThatShouldStartAtFive int\n}\n\n// Make sure that VariableThatShouldStartAtFive is set to five\n// before each test\nfunc (suite *ExampleTestSuite) SetupTest() {\n    suite.VariableThatShouldStartAtFive = 5\n}\n\n// All methods that begin with "Test" are run as tests within a\n// suite.\nfunc (suite *ExampleTestSuite) TestExample() {\n    assert.Equal(suite.T(), 5, suite.VariableThatShouldStartAtFive)\n}\n\n// In order for \'go test\' to run this suite, we need to create\n// a normal test function and pass our suite to suite.Run\nfunc TestExampleTestSuite(t *testing.T) {\n    suite.Run(t, new(ExampleTestSuite))\n}\n```\n\nFor a more complete example, using all of the functionality provided by the suite package, look at our [example testing suite](https://github.com/stretchr/testify/blob/master/suite/suite_test.go)\n\nFor more information on writing suites, check out the [API documentation for the `suite` package](http://godoc.org/github.com/stretchr/testify/suite).\n\n`Suite` object has assertion methods:\n\n```go\n// Basic imports\nimport (\n    "testing"\n    "github.com/stretchr/testify/suite"\n)\n\n// Define the suite, and absorb the built-in basic suite\n// functionality from testify - including assertion methods.\ntype ExampleTestSuite struct {\n    suite.Suite\n    VariableThatShouldStartAtFive int\n}\n\n// Make sure that VariableThatShouldStartAtFive is set to five\n// before each test\nfunc (suite *ExampleTestSuite) SetupTest() {\n    suite.VariableThatShouldStartAtFive = 5\n}\n\n// All methods that begin with "Test" are run as tests within a\n// suite.\nfunc (suite *ExampleTestSuite) TestExample() {\n    suite.Equal(suite.VariableThatShouldStartAtFive, 5)\n}\n\n// In order for \'go test\' to run this suite, we need to create\n// a normal test function and pass our suite to suite.Run\nfunc TestExampleTestSuite(t *testing.T) {\n    suite.Run(t, new(ExampleTestSuite))\n}\n```\n\n------\n\nInstallation\n============\n\nTo install Testify, use `go get`:\n\n    go get github.com/stretchr/testify\n\nThis will then make the following packages available to you:\n\n    github.com/stretchr/testify/assert\n    github.com/stretchr/testify/require\n    github.com/stretchr/testify/mock\n    github.com/stretchr/testify/suite\n    github.com/stretchr/testify/http (deprecated)\n\nImport the `testify/assert` package into your code using this template:\n\n```go\npackage yours\n\nimport (\n  "testing"\n  "github.com/stretchr/testify/assert"\n)\n\nfunc TestSomething(t *testing.T) {\n\n  assert.True(t, true, "True is true!")\n\n}\n```\n\n------\n\nStaying up to date\n==================\n\nTo update Testify to the latest version, use `go get -u github.com/stretchr/testify`.\n\n------\n\nSupported go versions\n==================\n\nWe support the three major Go versions, which are 1.9, 1.10, and 1.11 at the moment.\n\n------\n\nContributing\n============\n\nPlease feel free to submit issues, fork the repository and send pull requests!\n\nWhen submitting an issue, we ask that you please include a complete test function that demonstrates the issue. Extra credit for those using Testify to write the test code that demonstrates it.\n\nCode generation is used. Look for `CODE GENERATED AUTOMATICALLY` at the top of some files. Run `go generate ./...` to update generated files.\n\n------\n\nLicense\n=======\n\nThis project is licensed under the terms of the MIT license.\n'