b'# Chef InSpec: Inspect Your Infrastructure\n\n* **Project State: Active**\n* **Issues Response SLA: 3 business days**\n* **Pull Request Response SLA: 3 business days**\n\nFor more information on project states and SLAs, see [this documentation](https://github.com/chef/chef-oss-practices/blob/master/repo-management/repo-states.md).\n\n[![Slack](https://community-slack.chef.io/badge.svg)](https://community-slack.chef.io/)\n[![Build status](https://badge.buildkite.com/bf4c5fdc3858cc9f8c8bab8376e8e40d625ad046df9d4d8619.svg?branch=master)](https://buildkite.com/chef-oss/inspec-inspec-master-verify)\n[![Coverage Status](https://coveralls.io/repos/github/inspec/inspec/badge.svg?branch=master)](https://coveralls.io/github/inspec/inspec?branch=master)\n\nChef InSpec is an open-source testing framework for infrastructure with a human- and machine-readable language for specifying compliance, security and policy requirements.\n\n```ruby\n# Disallow insecure protocols by testing\n\ndescribe package(\'telnetd\') do\n\xc2\xa0 it { should_not be_installed }\nend\n\ndescribe inetd_conf do\n\xc2\xa0 its("telnet") { should eq nil }\nend\n```\n\nChef InSpec makes it easy to run your tests wherever you need. More options are found in our [CLI docs](https://www.inspec.io/docs/reference/cli/).\n\n```bash\n# run test locally\ninspec exec test.rb\n\n# run test on remote host via SSH\ninspec exec test.rb -t ssh://user@hostname -i /path/to/key\n\n# run test on remote host using SSH agent private key authentication. Requires Chef InSpec 1.7.1\ninspec exec test.rb -t ssh://user@hostname\n\n# run test on remote windows host via WinRM\ninspec exec test.rb -t winrm://Administrator@windowshost --password \'your-password\'\n\n# run test on remote windows host via WinRM as a domain user\ninspec exec test.rb -t winrm://windowshost --user \'UserName@domain\' --password \'your-password\'\n\n# run test on docker container\ninspec exec test.rb -t docker://container_id\n```\n\n# Features\n\n- Built-in Compliance: Compliance no longer occurs at the end of the release cycle\n- Targeted Tests: Chef InSpec writes tests that specifically target compliance issues\n- Metadata: Includes the metadata required by security and compliance pros\n- Easy Testing: Includes a command-line interface to run tests quickly\n\n## Installation\n\nChef InSpec requires Ruby ( >= 2.4 ).\n\nNote: Versions of Chef InSpec 4.0 and later require accepting the EULA to use. Please visit the [license acceptance page](https://docs.chef.io/chef_license_accept.html) on the Chef docs site for more information.\n\n### Install as package\n\nThe Chef InSpec package is available for MacOS, RedHat, Ubuntu and Windows. Download the latest package at [Chef InSpec Downloads](https://downloads.chef.io/inspec) or install Chef InSpec via script:\n\n```\n# RedHat, Ubuntu, and macOS\ncurl https://omnitruck.chef.io/install.sh | sudo bash -s -- -P inspec\n\n# Windows\n. { iwr -useb https://omnitruck.chef.io/install.ps1 } | iex; install -project inspec\n```\n\n### Install it via rubygems.org\n\nWhen installing from source, gem dependencies may require ruby build tools to be installed.\n\nFor CentOS/RedHat/Fedora:\n\n```bash\nyum -y install ruby ruby-devel make gcc gcc-c++\n```\n\nFor Ubuntu:\n\n```bash\napt-get -y install ruby ruby-dev gcc g++ make\n```\n\nTo install the `inspec` executable, which requires accepting the [Chef License](https://docs.chef.io/chef_license_accept.html), run:\n\n```bash\ngem install inspec-bin\n```\n\nYou may also use `inspec` as a library, with no executable. This does not require accepting the license. To install the library as a gem, run:\n\n```bash\ngem install inspec\n```\n\n\n### Usage via Docker\n\nDownload the image and define a function for convenience:\n\nFor Linux:\n\n```\ndocker pull chef/inspec\nfunction inspec { docker run -it --rm -v $(pwd):/share chef/inspec "$@"; }\n```\n\nFor Windows (PowerShell):\n\n```\ndocker pull chef/inspec\nfunction inspec { docker run -it --rm -v "$(pwd):/share" chef/inspec $args; }\n```\n\nIf you call `inspec` from your shell, it automatically mounts the current directory into the Docker container. Therefore you can easily use local tests and key files. Note: Only files in the current directory and sub-directories are available within the container.\n\n```\n$ ls -1\nvagrant\ntest.rb\n\n$ inspec exec test.rb -t ssh://root@192.168.64.2:11022 -i vagrant\n..\n\nFinished in 0.04321 seconds (files took 0.54917 seconds to load)\n2 examples, 0 failures\n```\n\n\n### Install it from source\n\nNote that installing from OS packages from [the download page](https://downloads.chef.io) is the preferred method.\n\nThat requires [bundler](http://bundler.io/):\n\n```bash\nbundle install\nbundle exec bin/inspec help\n```\n\nTo install it as a gem locally, run:\n\n```bash\ngem build inspec.gemspec\ngem install inspec-*.gem\n```\n\nOn Windows, you need to install [Ruby](http://rubyinstaller.org/downloads/) with [Ruby Development Kit](https://github.com/oneclick/rubyinstaller/wiki/Development-Kit) to build dependencies with its native extensions.\n\n### Install via Chef Habitat\n\nCurrently, this method of installation only supports Linux. See the [Chef Habitat site](https://www.habitat.sh/) for more information.\n\nDownload the `hab` binary from the [Chef Habitat](https://www.habitat.sh/docs/get-habitat/) site.\n\n```bash\nhab pkg install chef/inspec --binlink\n\ninspec\n```\n\n### Run Chef InSpec\n\nYou should now be able to run:\n\n```bash\n$ inspec --help\nCommands:\n  inspec archive PATH                # archive a profile to tar.gz (default) ...\n  inspec check PATH                  # verify all tests at the specified PATH\n  inspec compliance SUBCOMMAND ...   # Chef Compliance commands\n  inspec detect                      # detect the target OS\n  inspec exec PATH(S)                # run all test files at the specified PATH.\n  inspec help [COMMAND]              # Describe available commands or one spe...\n  inspec init TEMPLATE ...           # Scaffolds a new project\n  inspec json PATH                   # read all tests in PATH and generate a ...\n  inspec shell                       # open an interactive debugging shell\n  inspec supermarket SUBCOMMAND ...  # Supermarket commands\n  inspec version                     # prints the version of this tool\n\nOptions:\n  [--diagnose], [--no-diagnose]  # Show diagnostics (versions, configurations)\n```\n\n# Examples\n\n* Only accept requests on secure ports - This test ensures that a web server is only listening on well-secured ports.\n\n```ruby\ndescribe port(80) do\n\xc2\xa0 it { should_not be_listening }\nend\n\ndescribe port(443) do\n\xc2\xa0 it { should be_listening }\n\xc2\xa0 its(\'protocols\') {should include \'tcp\'}\nend\n```\n\n* Use approved strong ciphers - This test ensures that only enterprise-compliant ciphers are used for SSH servers.\n\n```ruby\ndescribe sshd_config do\n\xc2\xa0\xc2\xa0\xc2\xa0its(\'Ciphers\') { should eq(\'chacha20-poly1305@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr\') }\nend\n```\n\n* Test your `kitchen.yml` file to verify that only Vagrant is configured as the driver.  The %w() formatting will\npass rubocop linting and allow you to access nested mappings.\n\n```ruby\ndescribe yaml(\'.kitchen.yml\') do\n  its(%w(driver name)) { should eq(\'vagrant\') }\nend\n```\n\nAlso have a look at our examples for:\n- [Using Chef InSpec with Test Kitchen & Chef Infra](https://github.com/chef/inspec/tree/master/examples/kitchen-chef)\n- [Using Chef InSpec with Test Kitchen & Puppet](https://github.com/chef/inspec/tree/master/examples/kitchen-puppet)\n- [Using Chef InSpec with Test Kitchen & Ansible](https://github.com/chef/inspec/tree/master/examples/kitchen-ansible)\n- [Implementing an Chef InSpec profile](https://github.com/chef/inspec/tree/master/examples/profile)\n\n## Or tests: Testing for a OR b\n\n* Using describe.one, you can test for a or b.  The control will be marked as passing if EITHER condition is met.\n\n```ruby\ncontrol \'or-test\' do\n  impact 1.0\n  title \'This is a OR test\'\n  describe.one do\n    describe ssh_config do\n      its(\'Protocol\') { should eq(\'3\') }\n    end\n    describe ssh_config do\n      its(\'Protocol\') { should eq(\'2\') }\n    end\n  end\nend\n```\n\n## Command Line Usage\n\n### exec\n\nRun tests against different targets:\n\n```bash\n# run test locally\ninspec exec test.rb\n\n# run test on remote host on SSH\ninspec exec test.rb -t ssh://user@hostname\n\n# run test on remote windows host on WinRM\ninspec exec test.rb -t winrm://Administrator@windowshost --password \'your-password\'\n\n# run test on docker container\ninspec exec test.rb -t docker://container_id\n\n# run with sudo\ninspec exec test.rb --sudo [--sudo-password ...] [--sudo-options ...] [--sudo_command ...]\n\n# run in a subshell\ninspec exec test.rb --shell [--shell-options ...] [--shell-command ...]\n\n# run a profile targeting AWS using env vars\ninspec exec test.rb -t aws://\n\n# or store your AWS credentials in your ~/.aws/credentials profiles file\ninspec exec test.rb -t aws://us-east-2/my-profile\n\n# run a profile targeting Azure using env vars\ninspec exec test.rb -t azure://\n\n# or store your Azure credentials in your ~/.azure/credentials profiles file\ninspec exec test.rb -t azure://subscription_id\n```\n\n### detect\n\nVerify your configuration and detect\n\n```bash\nid=$( docker run -dti ubuntu:14.04 /bin/bash )\ninspec detect -t docker://$id\n```\n\nWhich will provide you with:\n\n```\n{"family":"ubuntu","release":"14.04","arch":null}\n```\n\n## Supported OS\n\nRemote Targets\n\n| Platform                     | Versions                                         | Architectures |\n| ---------------------------- | ------------------------------------------------ | ------------- |\n| AIX                          | 6.1, 7.1, 7.2                                    | ppc64         |\n| CentOS                       | 5, 6, 7                                          | i386, x86_64  |\n| Debian                       | 7, 8, 9                                          | i386, x86_64  |\n| FreeBSD                      | 9, 10, 11                                        | i386, amd64   |\n| Mac OS X                     | 10.9, 10.10, 10.11, 10.12, 10.13, 10.14          | x86_64        |\n| Oracle Enterprise Linux      | 5, 6, 7                                          | i386, x86_64  |\n| Red Hat Enterprise Linux     | 5, 6, 7                                          | i386, x86_64  |\n| Solaris                      | 10, 11                                           | sparc, x86    |\n| Windows\\*                    | 7, 8, 8.1, 10, 2008, 2008R2 , 2012, 2012R2, 2016 | x86, x86_64   |\n| Ubuntu Linux                 |                                                  | x86, x86_64   |\n| SUSE Linux Enterprise Server | 11, 12                                           | x86_64        |\n| Scientific Linux             | 5.x, 6.x and 7.x                                 | i386, x86_64  |\n| Fedora                       |                                                  | x86_64        |\n| OpenSUSE                     | 13, 42                                           | x86_64        |\n| OmniOS                       |                                                  | x86_64        |\n| Gentoo Linux                 |                                                  | x86_64        |\n| Arch Linux                   |                                                  | x86_64        |\n| HP-UX                        | 11.31                                            | ia64          |\n\n\\**For Windows, PowerShell 5.0 or above is required.*\n\nIn addition, runtime support is provided for:\n\n| Platform | Versions | Arch   |\n| -------- | -------- | ------ |\n| Debian   | 8, 9     | x86_64 |\n| RHEL     | 6, 7     | x86_64 |\n| Ubuntu   | 12.04+   | x86_64 |\n| Windows  | 7+       | x86_64 |\n| Windows  | 2012+    | x86_64 |\n\n## Documentation\n\nDocumentation\n\n * https://www.inspec.io/docs/\n * https://www.inspec.io/docs/reference/resources/\n * https://github.com/chef/inspec/tree/master/docs\n\nTutorials/Blogs/Podcasts:\n\n * https://www.inspec.io/tutorials/\n\nRelationship to other tools (RSpec, Serverspec):\n\n * https://www.inspec.io/docs/reference/inspec_and_friends/\n\n## Share your Profiles\n\nYou may share your Chef InSpec Profiles in the [Tools &amp; Plugins section](https://supermarket.chef.io/tools-directory) of the [Chef Supermarket](https://supermarket.chef.io/). [Sign in](https://supermarket.chef.io/sign-in) and [add the details of your profile](https://supermarket.chef.io/tools/new).\n\nYou may also [browse the Supermarket for shared Compliance Profiles](https://supermarket.chef.io/tools?type=compliance_profile).\n\n## Kudos\n\nChef InSpec is inspired by the wonderful [Serverspec](http://serverspec.org) project. Kudos to [mizzy](https://github.com/mizzy) and [all contributors](https://github.com/mizzy/serverspec/graphs/contributors)!\n\nThe AWS resources were inspired by [inspec-aws](https://github.com/arothian/inspec-aws) from [arothian](https://github.com/arothian).\n\n## Contribute\n\n1. Fork it\n1. Create your feature branch (git checkout -b my-new-feature)\n1. Commit your changes (git commit -am \'Add some feature\')\n1. Push to the branch (git push origin my-new-feature)\n1. Create new Pull Request\n\nThe Chef InSpec community and maintainers are very active and helpful. This project benefits greatly from this activity.\n\nIf you\'d like to chat with the community and maintainers directly join us in the `#inspec` channel on the [Chef Community Slack](http://community-slack.chef.io/).\n\nAs a reminder, all participants are expected to follow the [Code of Conduct](https://github.com/inspec/inspec/blob/master/CODE_OF_CONDUCT.md).\n\n[![Slack](https://community-slack.chef.io/badge.svg)](https://community-slack.chef.io/)\n\n## Testing Chef InSpec\n\nWe offer `unit`, `integration`, and `aws` tests.\n\n- `unit` tests ensure the intended behaviour of the implementation\n- `integration` tests run against Docker-based VMs via test-kitchen and [kitchen-inspec](https://github.com/chef/kitchen-inspec)\n- `aws` tests exercise the AWS resources against real AWS accounts\n\n### Unit tests\n\n```bash\nbundle exec rake test\n```\n\nIf you like to run only one test file:\n\n```bash\nbundle exec m test/unit/resources/user_test.rb\n```\n\nYou may also run a single test within a file by line number:\n\n```bash\nbundle exec m test/unit/resources/user_test.rb -l 123\n```\n\n### Integration tests\n\nThese tests download various virtual machines, to ensure Chef InSpec is working as expected across different operating systems.\n\nThese tests require the following gems:\n\n- test-kitchen\n- kitchen-dokken\n- kitchen-inspec\n\nThese gems are provided via the `integration` group in the project\'s Gemfile.\n\nIn addition, these test require Docker to be available on your machine or a remote Docker machine configured via the standard Docker environment variables.\n\n#### Running Integration tests\n\nList the various test instances available:\n\n```bash\nbundle exec kitchen list\n```\n\nThe platforms and test suites are configured in the `.kitchen.yml` file. Once you know which instance you wish to test, test that instance:\n\n```bash\nbundle exec kitchen test <INSTANCE_NAME>\n```\n\nYou may test all instances in parallel with:\n\n```bash\nbundle exec kitchen test -c\n```\n\n### AWS Tests\n\nUse the rake task `bundle exec rake test:aws` to test the AWS resources against a pair of real AWS accounts.\n\nPlease see [TESTING_AGAINST_AWS.md](./test/integration/aws/TESTING_AGAINST_AWS.md) for details on how to setup the needed AWS accounts to perform testing.\n\n### Azure Tests\n\nUse the rake task `bundle exec rake test:azure` to test the Azure resources against an Azure account.\n\nPlease see [TESTING_AGAINST_AZURE.md](./test/integration/aws/TESTING_AGAINST_AZURE.md) for details on how to setup the needed Azure accounts to perform testing.\n\n## License\n\n|                |                                           |\n| -------------- | ----------------------------------------- |\n| **Author:**    | Dominik Richter (<drichter@chef.io>)      |\n| **Author:**    | Christoph Hartmann (<chartmann@chef.io>)  |\n| **Copyright:** | Copyright (c) 2015 Vulcano Security GmbH. |\n| **Copyright:** | Copyright (c) 2017-2018 Chef Software Inc.|\n| **License:**   | Apache License, Version 2.0               |\n\nLicensed under the Apache License, Version 2.0 (the "License");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an "AS IS" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n'