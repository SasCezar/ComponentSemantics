b'# test.vim\n\nA Vim wrapper for running tests on different granularities.\n\n<img alt="usage overview" src="https://github.com/janko/vim-test/blob/master/screenshots/granularity.gif" width=770 height=503>\n\n## Features\n\n* Zero dependencies\n* Zero configuration required (it Does the Right Thing\xe2\x84\xa2, see [**Philosophy**](https://github.com/janko/vim-test/wiki))\n* Wide range of test runners which are automagically detected\n* **Polyfills** for nearest tests (by [constructing regexes](#commands))\n* Wide range of execution environments ("[strategies](#strategies)")\n* Fully customized CLI options configuration\n* Extendable with new runners and strategies\n\nTest.vim consists of a core which provides an abstraction over running any kind\nof tests from the command-line. Concrete test runners are then simply plugged\nin, so they all work in the same unified way. Currently the following test\nrunners are supported:\n\n| Language       | Test Runners                                                                                | Identifiers                                                                                                     |\n| -------------: | :------------------------------------------------------------------------------------------ | :-------------------------------------------------------------------------------------------------------------- |\n| **C#**         | .NET                                                                                        | `xunit`, `dotnettest`                                                                                           |\n| **Clojure**    | Fireplace.vim                                                                               | `fireplacetest`                                                                                                 |\n| **Crystal**    | Crystal                                                                                     | `crystalspec`                                                                                                   |\n| **Elixir**     | ESpec, ExUnit                                                                               | `espec`, `exunit`                                                                                               |\n| **Elm**        | elm-test                                                                                    | `elmtest`                                                                                                       |\n| **Erlang**     | CommonTest, EUnit                                                                           | `commontest`, `eunit`                                                                                           |\n| **Go**         | Ginkgo, Go, Rich-Go, Delve                                                                  | `ginkgo`, `gotest`, `richgo`, `delve`                                                                           |\n| **Haskell**    | stack                                                                                       | `stacktest`                                                                                                     |\n| **Java**       | Maven, Gradle                                                                               | `maventest`, `gradletest`                                                                                       |\n| **JavaScript** | Ava, Cucumber.js, Cypress, Intern, Jasmine, Jest, ReactScripts, Karma, Lab, Mocha, TAP, WebdriverIO  | `ava`, `cucumberjs`, `cypress`, `intern`, `jasmine`, `jest`, `reactscripts`, `karma`, `lab`, `mocha`, `tap`, `webdriverio` |\n| **Lua**        | Busted                                                                                      | `busted`                                                                                                        |\n| **PHP**        | Behat, Codeception, Kahlan, Peridot, PHPUnit, PHPSpec, Dusk                                 | `behat`, `codeception`, `dusk`, `kahlan`, `peridot`, `phpunit`, `phpspec`                                       |\n| **Perl**       | Prove                                                                                       | `prove`                                                                                                         |\n| **Python**     | Django, Nose, Nose2, PyTest, PyUnit                                                         | `djangotest`, `djangonose` `nose`, `nose2`, `pytest`, `pyunit`                                                  |\n| **Racket**     | RackUnit                                                                                    | `rackunit`                                                                                                      |\n| **Ruby**       | Cucumber, [M], [Minitest][minitest], Rails, RSpec                                           | `cucumber`, `m`, `minitest`, `rails`, `rspec`                                                                   |\n| **Rust**       | Cargo                                                                                       | `cargotest`                                                                                                     |\n| **Scala**      | SBT, Bloop                                                                                  | `sbttest`, `blooptest`                                                                                          |\n| **Shell**      | Bats                                                                                        | `bats`                                                                                                          |\n| **Swift**      | Swift Package Manager                                                                       | `swiftpm`                                                                                                       |\n| **VimScript**  | Vader.vim, VSpec, Themis                                                                    | `vader`, `vspec`, `themis`                                                                                      |\n\n## Setup\n\nUsing [vim-plug](https://github.com/junegunn/vim-plug), add\n```vim\nPlug \'janko/vim-test\'\n```\nto your `.vimrc` file (see vim-plug documentation for where), and run `:PlugInstall`.\n\nAdd your preferred mappings to your `.vimrc` file:\n\n```vim\n" these "Ctrl mappings" work well when Caps Lock is mapped to Ctrl\nnmap <silent> t<C-n> :TestNearest<CR>\nnmap <silent> t<C-f> :TestFile<CR>\nnmap <silent> t<C-s> :TestSuite<CR>\nnmap <silent> t<C-l> :TestLast<CR>\nnmap <silent> t<C-g> :TestVisit<CR>\n```\n\n| Command          | Description                                                                                                                                                                                                                                                                            |\n| :--------------  | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  |\n| `:TestNearest`   | In a test file runs the test nearest to the cursor, otherwise runs the last nearest test. In test frameworks that don\'t support line numbers it will **polyfill** this functionality with [regexes](#commands).                                                                        |\n| `:TestFile`      | In a test file runs all tests in the current file, otherwise runs the last file tests.                                                                                                                                                                                                 |\n| `:TestSuite`     | Runs the whole test suite (if the current file is a test file, runs that framework\'s test suite, otherwise determines the test framework from the last run test).                                                                                                                      |\n| `:TestLast`      | Runs the last test.                                                                                                                                                                                                                                                                    |\n| `:TestVisit`     | Visits the test file from which you last run your tests (useful when you\'re trying to make a test pass, and you dive deep into application code and close your test buffer to make more space, and once you\'ve made it pass you want to go back to the test file to write more tests). |\n\n## Strategies\n\nTest.vim can run tests using different execution environments called\n"strategies". To use a specific strategy, assign it to a variable:\n\n```vim\n" make test commands execute using dispatch.vim\nlet test#strategy = "dispatch"\n```\n\n| Strategy                        | Identifier                       | Description                                                                      |\n| :-----:                         | :-----:                          | :----------                                                                      |\n| **Basic**&nbsp;(default)        | `basic`                          | Runs test commands with `:!` on Vim, and with `:terminal` on Neovim.             |\n| **Make**                        | `make` `make_bang`               | Runs test commands with `:make` or `:make!`.                                     |\n| **Neovim**                      | `neovim`                         | Runs test commands with `:terminal` in a split window.                           |\n| **Vim8 Terminal**               | `vimterminal`                    | Runs test commands with `term_start()` in a split window.                        |\n| **[Dispatch]**                  | `dispatch` `dispatch_background` | Runs test commands with `:Dispatch` or `:Dispatch!`.                             |\n| **[Vimux]**                     | `vimux`                          | Runs test commands in a small tmux pane at the bottom of your terminal.          |\n| **[Tslime]**                    | `tslime`                         | Runs test commands in a tmux pane you specify.                                   |\n| **[Slimux]**                    | `slimux`                         | Runs test commands in a tmux pane you specify.                                   |\n| **[Neoterm]**                   | `neoterm`                        | Runs test commands with `:T`, see neoterm docs for display customization.        |\n| **[Neomake]**                   | `neomake`                        | Runs test commands asynchronously with `:NeomakeProject`.                        |\n| **[MakeGreen]**                 | `makegreen`                      | Runs test commands with `:MakeGreen`.                                            |\n| **[VimShell]**                  | `vimshell`                       | Runs test commands in a shell written in VimScript.                              |\n| **[Vim&nbsp;Tmux&nbsp;Runner]** | `vtr`                            | Runs test commands in a small tmux pane.                                         |\n| **[VimProc]**                   | `vimproc`                        | Runs test commands asynchronously.                                               |\n| **[AsyncRun]**                  | `asyncrun`                       | Runs test commands asynchronosuly using new APIs in Vim 8 and NeoVim.            |\n| **Terminal.app**                | `terminal`                       | Sends test commands to Terminal (useful in MacVim GUI).                          |\n| **iTerm2.app**                  | `iterm`                          | Sends test commands to iTerm2 >= 2.9 (useful in MacVim GUI).                     |\n| **[Kitty]**                     | `kitty`                          | Sends test commands to Kitty terminal.                                           |\n| **[Shtuff]**                    | `shtuff`                         | Sends test commands to remote terminal via [shtuff][Shtuff].                     |\n\nYou can also set up strategies per granularity:\n\n```vim\nlet test#strategy = {\n  \\ \'nearest\': \'neovim\',\n  \\ \'file\':    \'dispatch\',\n  \\ \'suite\':   \'basic\',\n\\}\n```\n\nor even per command:\n\n```\n:TestFile -strategy=neovim\n```\n\nSome strategies clear the screen before executing the test command, but you can\ndisable this:\n\n```vim\nlet g:test#preserve_screen = 1\n```\n\nThe Vimux strategy will not clear the screen by default, but you can enable it\nby explicitly setting `test#preserve_screen` to `0`.\n\nOn Neovim the "basic" and "neovim" strategies will run test commands using\nNeovim\'s terminal, and leave you in insert mode, so that you can just press\n"Enter" to close the terminal session and go back to editing. If you want to\nscroll through the test command output, you\'ll have to first switch to normal\nmode. The built-in mapping for exiting terminal insert mode is `CTRL-\\ CTRL-n`,\nwhich is difficult to press, so I recommend mapping it to `CTRL-o`:\n\n```vim\nif has(\'nvim\')\n  tmap <C-o> <C-\\><C-n>\nendif\n```\n\n### Kitty strategy setup\n\nBefore you can run tests in a kitty terminal window using the kitty strategy,\nplease make sure:\n\n- you start kitty setting up remote control and specifying a socket for kitty\n  to listen to, like this:\n\n  ```\n  $ kitty -o allow_remote_control=yes --listen-on unix:/tmp/mykitty\n  ```\n\n- you export an environment variable `$KITTY_LISTEN_ON` with the same socket, like:\n\n  ```\n  $ export KITTY_LISTEN_ON=/tmp/mykitty\n  ```\n\n### Shtuff strategy setup\n\nThis strategy lets you run commands in a remote terminal without needing tools\nlike `tmux` or special terminals such as Kitty.\n\nBefore you can run tests using this strategy, you will need to have a terminal\nsetup as a receiver, and also you\'ll need to set `g:shtuff_receiver` in your\nvimrc file.\n\nIn your terminal of choice:\n\n```\n$ shtuff as devrunner\n```\n\nAnd in your vimrc:\n\n```\nlet g:shtuff_receiver = \'devrunner\'\n```\n\n### Quickfix Strategies\n\nIf you want your test results to appear in the quickfix window, use one of the\nfollowing strategies:\n\n * Make\n * Neomake\n * MakeGreen\n * Dispatch.vim\n\nRegardless of which you pick, it\'s recommended you have Dispatch.vim installed as the\nstrategies will automatically use it to determine the correct compiler, ensuring the\ntest output is correctly parsed for the quickfix window.\n\nAs Dispatch.vim just determines the compiler, you need to make sure the Vim distribution\nor a plugin has a corresponding compiler for your test runner, or you may need to write a\ncompiler plugin.\n\nIf the test command prefix doesn\'t match the compiler\'s `makeprg` then use the\n`g:dispatch_compiler` variable. For example if your test command was `./vendor/bin/phpunit`\nbut you wanted to use the phpunit2 compiler:\n\n```vim\nlet g:dispatch_compilers = {}\nlet g:dispatch_compilers[\'./vendor/bin/\'] = \'\'\nlet g:dispatch_compilers[\'phpunit\'] = \'phpunit2\'\n```\n\n### Custom Strategies\n\nStrategy is a function which takes one argument \xe2\x80\x93 the shell command for the\ntest being run \xe2\x80\x93 and it is expected to run that command in some way. Test.vim\ncomes with many predefined strategies (see above), but if none of them suit\nyour needs, you can define your own custom strategy:\n\n```vim\nfunction! EchoStrategy(cmd)\n  echo \'It works! Command for running tests: \' . a:cmd\nendfunction\n\nlet g:test#custom_strategies = {\'echo\': function(\'EchoStrategy\')}\nlet g:test#strategy = \'echo\'\n```\n\n## Transformations\n\nYou can automatically apply transformations of your test commands by\nregistering a "transformation" function. The following example demonstrates how\nyou could set up a transformation for Vagrant:\n\n```vim\nfunction! VagrantTransform(cmd) abort\n  let vagrant_project = get(matchlist(s:cat(\'Vagrantfile\'), \'\\vconfig\\.vm.synced_folder ["\'\'].+[\'\'"], ["\'\'](.+)[\'\'"]\'), 1)\n  return \'vagrant ssh --command \'.shellescape(\'cd \'.vagrant_project.\'; \'.a:cmd)\nendfunction\n\nlet g:test#custom_transformations = {\'vagrant\': function(\'VagrantTransform\')}\nlet g:test#transformation = \'vagrant\'\n```\n\n## Commands\n\n<img alt="nearest polyfill" src="https://github.com/janko/vim-test/blob/master/screenshots/nearest.gif" width=770 height=323>\n\nYou can execute test.vim commands directly, and pass them CLI options:\n\n```\n:TestNearest --verbose\n:TestFile --format documentation\n:TestSuite --fail-fast\n:TestLast --backtrace\n```\n\nIf you want some options to stick around, see [Configuring](#configuring).\n\n### Runner commands\n\nAside from the main commands, you get a corresponding Vim command for each\ntest runner (which also accept options):\n\n```\n:RSpec --tag ~slow\n:Mocha --grep \'API\'\n:ExUnit --trace\n:Nose --failed\n```\n\nThese commands are useful when using multiple testing frameworks in the same\nproject, or as a wrapper around your executable. To avoid pollution they are\nnot defined by default, instead you can choose the ones you want:\n\n```vim\nlet g:test#runner_commands = [\'Minitest\', \'Mocha\']\n```\n\n## Configuring\n\n### CLI options\n\nIf you want some CLI options to stick around, you can configure them in your\n`.vimrc`:\n\n```vim\nlet test#ruby#minitest#options = \'--verbose\'\n```\n\nYou can also choose a more granular approach:\n\n```vim\nlet test#ruby#rspec#options = {\n  \\ \'nearest\': \'--backtrace\',\n  \\ \'file\':    \'--format documentation\',\n  \\ \'suite\':   \'--tag ~slow\',\n\\}\n```\n\nYou can also specify a global approach along with the granular options for the\nspecified test runner:\n\n```vim\nlet test#ruby#rspec#options = {\n  \\ \'all\':   \'--backtrace\',\n  \\ \'suite\': \'--tag ~slow\',\n\\}\n```\n\n### Vim8 / Neovim terminal position\n\nBoth the `neovim` and `Vim8 Terminal` strategy will open a split window on the bottom by default, but\nyou can configure a different position:\n\n```vim\n" for neovim\nlet test#neovim#term_position = "topleft"\n" or for Vim8\nlet test#vim#term_position = "belowright"\n```\n\nFor full list of variants, see `:help opening-window`.\n\n### Executable\n\nYou can instruct test.vim to use a custom executable for a test runner.\n\n```vim\nlet test#ruby#rspec#executable = \'foreman run rspec\'\n```\n\n### File pattern\n\nTest.vim has file pattern it uses to determine whether a file belongs to\ncertain testing framework. You can override that pattern by overriding the\n`file_pattern` variable:\n\n```vim\nlet test#ruby#minitest#file_pattern = \'_spec\\.rb\' " the default is \'_test\\.rb\'\n```\n\n### Filename modifier\n\nBy default test.vim generates file paths relative to the working directory. If\nyou\'re using a strategy which sends commands to a shell which is `cd`-ed into\nanother directory, you might want to change the filename modifier to generate\nabsolute paths:\n\n```vim\nlet test#filename_modifier = \':.\' " test/models/user_test.rb (default)\nlet test#filename_modifier = \':p\' " /User/janko/Code/my_project/test/models/user_test.rb\nlet test#filename_modifier = \':~\' " ~/Code/my_project/test/models/user_test.rb\n```\n\n### Working directory\n\nTest.vim relies on you being `cd`-ed into the project root. However, sometimes\nyou may want to execute tests from a different directory than Vim\'s current\nworking directory. You might have a bigger project with many subprojects, or\nyou might be using [`autochdir`]. In any case, you can tell test.vim to use a\ndifferent working directory for running tests:\n\n```vim\nlet test#project_root = "/path/to/your/project"\n```\n\n### Language-specific\n\n#### Python\n\nSince there are multiple Python test runners for the same type of tests,\ntest.vim has no way of detecting which one did you intend to use. By default\nthe first available will be chosen, but you can force a specific one:\n\n``` vim\nlet test#python#runner = \'pytest\'\n" Runners available are \'pytest\', \'nose\', \'nose2\', \'djangotest\', \'djangonose\' and Python\'s built-in \'unittest\'\n```\n\nThe pytest runner optionally supports [pipenv](https://github.com/pypa/pipenv).\nIf you have a `Pipfile`, it will use `pipenv run pytest` instead of just\n`pytest`. It also supports [poetry](https://github.com/sdispater/poetry)\nand will use `poetry run pytest` if it detects a `poetry.lock`.\n\n#### Java\n\nFor the same reason as Python, runner detection works the same for Java. To\nforce a specific runner:\n\n``` vim\nlet test#java#runner = \'gradletest\'\n```\n\n#### Scala\n\nFor the same reason as Python, runner detection works the same for Scala. To\nforce a specific runner:\n\n``` vim\nlet test#scala#runner = \'blooptest\'\n```\n\nYou may have subprojects inside your main sbt projects. Bloop project detection\nuses your main project to run tests. If you need to run test inside your subproject,\nyou can specify custom projects with:\n\n```vim\nlet g:test#scala#blooptest#project_name = \'custom-project\'\n```\n\nWith this configuration, the test runner will run test for `custom-project`:\n\n```sh\n$ bloop test custom-project\n```\n\n#### Go\n\nFor the same reason as Python, runner detection works the same for Go. To\nforce a specific runner:\n\n``` vim\nlet test#go#runner = \'ginkgo\'\n" Runners available are \'gotest\', \'ginkgo\', \'richgo\', \'delve\'\n```\n\nYou can also configure the `delve` runner with a different key mapping\nalongside another:\n\n```vim\nnmap <silent> t<C-n> :TestNearest<CR>\nfunction! DebugNearest()\n  let g:test#go#runner = \'delve\'\n  TestNearest\n  unlet g:test#go#runner\nendfunction\nnmap <silent> t<C-d> :call DebugNearest()<CR>\n```\n\nIf `delve` is selected and [vim-delve](https://github.com/sebdah/vim-delve) is\nin use, breakpoints and tracepoints that have been marked with vim-delve will\nbe included.\n\n#### Ruby\n\nUnless binstubs are detected (e.g. `bin/rspec`), test commands will\nautomatically be prepended with `bundle exec` if a Gemfile is detected, but you\ncan turn it off:\n\n```vim\nlet test#ruby#bundle_exec = 0\n```\n\nIf binstubs are detected, but you don\'t want to use them, you can turn them off:\n\n```vim\nlet test#ruby#use_binstubs = 0\n```\n\nIf your binstubs are not instrumented with spring, you can turn on using the `spring` bin (`bin/spring`) directly using:\n\n```vim\nlet test#ruby#use_spring_binstub = 1\n```\n\n#### JavaScript\n\nTest runner detection for JavaScript works by checking which runner is listed in the package.json dependencies. If you have globally installed the runner make sure it\'s also listed in the dependencies.\n\n#### Haskell\n\nThe `stackTest` runner currently supports running tests in Stack projects with the [HSpec](http://hackage.haskell.org/package/hspec) framework.\n\n## Autocommands\n\nIn addition to running tests manually, you can also configure autocommands\nwhich run tests automatically when files are saved.\n\nThe following setup will automatically run tests when a test file or its\nalternate application file is saved:\n\n```vim\naugroup test\n  autocmd!\n  autocmd BufWrite * if test#exists() |\n    \\   TestFile |\n    \\ endif\naugroup END\n```\n\n## Projectionist integration\n\nIf [projectionist.vim] is present, you can run a test command from an\napplication file, and test.vim will automatically try to run the\ncommand on the "alternate" test file.\n\nYou can disable this integration by doing\n```vim\nlet g:test#no_alternate = 1\n```\n\n## Extending\n\nIf you wish to extend this plugin with your own test runners, first of all,\nif the runner is well-known, I would encourage to help me merge it into\ntest.vim.\n\nThat being said, if you want to do this for yourself, you need to do 2 things.\nFirst, add your runner to the list in your `.vimrc`:\n\n```vim\n" First letter of runner\'s name must be uppercase\nlet test#custom_runners = {\'MyLanguage\': [\'MyRunner\']}\n```\n\nSecond, create `~/.vim/autoload/test/mylanguage/myrunner.vim`, and define the following\nmethods:\n\n```vim\n" Returns true if the given file belongs to your test runner\nfunction! test#mylanguage#myrunner#test_file(file)\n\n" Returns test runner\'s arguments which will run the current file and/or line\nfunction! test#mylanguage#myrunner#build_position(type, position)\n\n" Returns processed args (if you need to do any processing)\nfunction! test#mylanguage#myrunner#build_args(args)\n\n" Returns the executable of your test runner\nfunction! test#mylanguage#myrunner#executable()\n```\n\nSee [`autoload/test`](/autoload/test) for examples.\n\n## Choosing which runners to load\n\nAll runners are loaded by default. To select which runners to load, set this\noption:\n\n```vim\nlet test#enabled_runners = ["mylanguage#myrunner", "ruby#rspec"]\n```\n\nAll other runners will not be loaded.\n\nNote that for your own custom runners, you still need to set `test#custom_runners`.\n\n## Running tests\n\nTests are run using a Ruby test runner, so you\'ll have to have Ruby installed.\nThen run\n\n```sh\n$ gem install vim-flavor\n```\n\nNow you can run tests with\n\n```sh\n$ vim-flavor test spec/\n```\n\nOr if you\'re inside of Vim, you can simply run `:VSpec` provided by test.vim.\n\n## Credits\n\nThis plugin was strongly influenced by Gary Bernhardt\'s Destroy All Software.\nI also want to thank [rspec.vim], from which I borrowed GUI support for OS X,\nand Windows support. And also thanks to [vroom.vim].\n\n## License\n\nCopyright \xc2\xa9 Janko Marohni\xc4\x87. Distributed under the same terms as Vim itself. See\n`:help license`.\n\n[minitest]: https://github.com/janko/vim-test/wiki/Minitest\n[Neoterm]: https://github.com/kassio/neoterm\n[Neomake]: https://github.com/neomake/neomake\n[Dispatch]: https://github.com/tpope/vim-dispatch\n[Vimux]: https://github.com/benmills/vimux\n[Tslime]: https://github.com/jgdavey/tslime.vim\n[Slimux]: https://github.com/esamattis/slimux\n[Vim&nbsp;Tmux&nbsp;Runner]: https://github.com/christoomey/vim-tmux-runner\n[VimShell]: https://github.com/Shougo/vimshell.vim\n[VimProc]: https://github.com/Shougo/vimproc.vim\n[`autochdir`]: http://vimdoc.sourceforge.net/htmldoc/options.html#\'autochdir\'\n[rspec.vim]: https://github.com/thoughtbot/vim-rspec\n[vroom.vim]: https://github.com/skalnik/vim-vroom\n[AsyncRun]: https://github.com/skywind3000/asyncrun.vim\n[MakeGreen]: https://github.com/reinh/vim-makegreen\n[M]: http://github.com/qrush/m\n[projectionist.vim]: https://github.com/tpope/vim-projectionist\n[Kitty]: https://github.com/kovidgoyal/kitty\n[Shtuff]: https://github.com/jfly/shtuff\n'