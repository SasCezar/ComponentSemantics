b'<div align="center" markdown="1">\n\n<img src="https://d3vv6lp55qjaqc.cloudfront.net/items/2D2K45312x0M1q2C0a3P/jest-logo.svg" width="200">\n\n<h1>Jest cheat sheet</h1>\n\n</div>\n\n_I recommend [Mrm](https://github.com/sapegin/mrm-tasks/tree/master/packages/mrm-task-jest) and [jest-codemods](https://github.com/skovhus/jest-codemods) for single-command Jest installation and easy migration from other frameworks._\n\n<!-- To reformat run: npx prettier --print-width 100 --single-quote --no-semi --prose-wrap never --write Readme.md -->\n\n<!-- To update TOC run: npx markdown-toc --maxdepth 3 -i Readme.md -->\n\n<!-- toc -->\n\n- [Test structure](#test-structure)\n- [Matchers](#matchers)\n  - [Basic matchers](#basic-matchers)\n  - [Truthiness](#truthiness)\n  - [Numbers](#numbers)\n  - [Strings](#strings)\n  - [Arrays](#arrays)\n  - [Objects](#objects)\n  - [Exceptions](#exceptions)\n  - [Snapshots](#snapshots)\n  - [Mock functions](#mock-functions)\n  - [Misc](#misc)\n  - [Promise matchers (Jest 20+)](#promise-matchers-jest-20)\n- [Async tests](#async-tests)\n  - [async/await](#asyncawait)\n  - [Promises](#promises)\n  - [done() callback](#done-callback)\n- [Mocks](#mocks)\n  - [Mock functions](#mock-functions-1)\n  - [Mock modules using `jest.mock` method](#mock-modules-using-jestmock-method)\n  - [Mock modules using a mock file](#mock-modules-using-a-mock-file)\n  - [Mock object methods](#mock-object-methods)\n  - [Mock getters and setters (Jest 22.1.0+)](#mock-getters-and-setters-jest-2210)\n  - [Mock getters and setters](#mock-getters-and-setters)\n  - [Clearing and restoring mocks](#clearing-and-restoring-mocks)\n  - [Accessing the original module when using mocks](#accessing-the-original-module-when-using-mocks)\n  - [Timer mocks](#timer-mocks)\n- [Data-driven tests (Jest 23+)](#data-driven-tests-jest-23)\n- [Skipping tests](#skipping-tests)\n- [Testing modules with side effects](#testing-modules-with-side-effects)\n- [Usage with Babel and TypeScript](#usage-with-babel-and-typescript)\n- [Resources](#resources)\n- [You may also like](#you-may-also-like)\n- [Contributing](#contributing)\n- [Author and license](#author-and-license)\n\n<!-- tocstop -->\n\n## Test structure\n\n```js\ndescribe(\'makePoniesPink\', () => {\n  beforeAll(() => {\n    /* Runs before all tests */\n  })\n  afterAll(() => {\n    /* Runs after all tests */\n  })\n  beforeEach(() => {\n    /* Runs before each test */\n  })\n  afterEach(() => {\n    /* Runs after each test */\n  })\n\n  test(\'make each pony pink\', () => {\n    const actual = fn([\'Alice\', \'Bob\', \'Eve\'])\n    expect(actual).toEqual([\'Pink Alice\', \'Pink Bob\', \'Pink Eve\'])\n  })\n})\n```\n\n## Matchers\n\n[Using matchers](http://jestjs.io/docs/en/using-matchers), [matchers docs](https://facebook.github.io/jest/docs/expect.html)\n\n### Basic matchers\n\n```js\nexpect(42).toBe(42) // Strict equality (===)\nexpect(42).not.toBe(3) // Strict equality (!==)\nexpect([1, 2]).toEqual([1, 2]) // Deep equality\nexpect({ a: undefined, b: 2 }).toEqual({ b: 2 }) // Deep equality\nexpect({ a: undefined, b: 2 }).not.toStrictEqual({ b: 2 }) // Strict equality (Jest 23+)\n```\n\n### Truthiness\n\n```js\n// Matches anything that an if statement treats as true (not false, 0, \'\', null, undefined, NaN)\nexpect(\'foo\').toBeTruthy()\n// Matches anything that an if statement treats as false (false, 0, \'\', null, undefined, NaN)\nexpect(\'\').toBeFalsy()\n// Matches only null\nexpect(null).toBeNull()\n// Matches only undefined\nexpect(undefined).toBeUndefined()\n// The opposite of toBeUndefined\nexpect(7).toBeDefined()\n```\n\n### Numbers\n\n```js\nexpect(2).toBeGreaterThan(1)\nexpect(1).toBeGreaterThanOrEqual(1)\nexpect(1).toBeLessThan(2)\nexpect(1).toBeLessThanOrEqual(1)\nexpect(0.2 + 0.1).toBeCloseTo(0.3, 5)\n```\n\n### Strings\n\n```js\nexpect(\'long string\').toMatch(\'str\')\nexpect(\'coffee\').toMatch(/ff/)\nexpect(\'pizza\').not.toMatch(\'coffee\')\nexpect([\'pizza\', \'coffee\']).toEqual([expect.stringContaining(\'zz\'), expect.stringMatching(/ff/)])\n```\n\n### Arrays\n\n```js\nexpect([\'Alice\', \'Bob\', \'Eve\']).toHaveLength(3)\nexpect([\'Alice\', \'Bob\', \'Eve\']).toContain(\'Alice\')\nexpect([{ a: 1 }, { a: 2 }]).toContainEqual({ a: 1 })\nexpect([\'Alice\', \'Bob\', \'Eve\']).toEqual(expect.arrayContaining([\'Alice\', \'Bob\']))\n```\n\n### Objects\n\n```js\nexpect({ a: 1 }).toHaveProperty(\'a\')\nexpect({ a: 1 }).toHaveProperty(\'a\', 1)\nexpect({ a: { b: 1 } }).toHaveProperty(\'a.b\')\nexpect({ a: 1, b: 2 }).toMatchObject({ a: 1 })\nexpect({ a: 1, b: 2 }).toMatchObject({\n  a: expect.any(Number),\n  b: expect.any(Number)\n})\nexpect([{ a: 1 }, { b: 2 }]).toEqual([\n  expect.objectContaining({ a: expect.any(Number) }),\n  expect.anything()\n])\n```\n\n### Exceptions\n\n```js\n// const fn = () => { throw new Error(\'Out of cheese!\') }\nexpect(fn).toThrow()\nexpect(fn).toThrow(\'Out of cheese\')\nexpect(fn).toThrowErrorMatchingSnapshot()\n```\n\n<details>\n  <summary>Aliases</summary>\n\n- `toThrowError` \xe2\x86\x92 `toThrow`\n  </details>\n\n### Snapshots\n\n```js\nexpect(node).toMatchSnapshot()\n// Jest 23+\nexpect(user).toMatchSnapshot({\n  date: expect.any(Date)\n})\nexpect(user).toMatchInlineSnapshot()\n```\n\n### Mock functions\n\n```js\n// const fn = jest.fn()\n// const fn = jest.fn().mockName(\'Unicorn\') -- named mock, Jest 22+\nexpect(fn).toBeCalled() // Function was called\nexpect(fn).not.toBeCalled() // Function was *not* called\nexpect(fn).toHaveBeenCalledTimes(1) // Function was called only once\nexpect(fn).toBeCalledWith(arg1, arg2) // Any of calls was with these arguments\nexpect(fn).toHaveBeenLastCalledWith(arg1, arg2) // Last call was with these arguments\nexpect(fn).toHaveBeenNthCalledWith(args) // Nth call was with these arguments (Jest 23+)\nexpect(fn).toHaveReturnedTimes(2) // Function was returned without throwing an error (Jest 23+)\nexpect(fn).toHaveReturnedWith(value) // Function returned a value (Jest 23+)\nexpect(fn).toHaveLastReturnedWith(value) // Last function call returned a value (Jest 23+)\nexpect(fn).toHaveNthReturnedWith(value) // Nth function call returned a value (Jest 23+)\nexpect(fn.mock.calls).toEqual([[\'first\', \'call\', \'args\'], [\'second\', \'call\', \'args\']]) // Multiple calls\nexpect(fn.mock.calls[0][0]).toBe(2) // fn.mock.calls[0][0] \xe2\x80\x94 the first argument of the first call\n```\n\n<details>\n  <summary>Aliases</summary>\n\n- `toBeCalled` \xe2\x86\x92 `toHaveBeenCalled`\n- `toBeCalledWith` \xe2\x86\x92 `toHaveBeenCalledWith`\n- `lastCalledWith` \xe2\x86\x92 `toHaveBeenLastCalledWith`\n- `nthCalledWith` \xe2\x86\x92 `toHaveBeenNthCalledWith`\n- `toReturnTimes` \xe2\x86\x92 `toHaveReturnedTimes`\n- `toReturnWith` \xe2\x86\x92 `toHaveReturnedWith`\n- `lastReturnedWith`\xc2\xa0\xe2\x86\x92 `toHaveLastReturnedWith`\n- `nthReturnedWith` \xe2\x86\x92\xc2\xa0`toHaveNthReturnedWith`\n  </details>\n\n### Misc\n\n```js\nexpect(new A()).toBeInstanceOf(A)\nexpect(() => {}).toEqual(expect.any(Function))\nexpect(\'pizza\').toEqual(expect.anything())\n```\n\n### Promise matchers (Jest 20+)\n\n```js\ntest(\'resolve to lemon\', () => {\n  expect.assertions(1)\n  // Make sure to add a return statement\n  return expect(Promise.resolve(\'lemon\')).resolves.toBe(\'lemon\')\n  // return expect(Promise.reject(\'octopus\')).rejects.toBeDefined();\n})\n```\n\nOr with async/await:\n\n```js\ntest(\'resolve to lemon\', async () => {\n  expect.assertions(2)\n  await expect(Promise.resolve(\'lemon\')).resolves.toBe(\'lemon\')\n  await expect(Promise.resolve(\'lemon\')).resolves.not.toBe(\'octopus\')\n})\n```\n\n[resolves docs](https://facebook.github.io/jest/docs/en/expect.html#resolves)\n\n## Async tests\n\nSee [more examples](https://facebook.github.io/jest/docs/en/tutorial-async.html) in Jest docs.\n\nIt\xe2\x80\x99s a good practice to specify a number of expected assertions in async tests, so the test will fail if your assertions weren\xe2\x80\x99t called at all.\n\n```js\ntest(\'async test\', () => {\n  expect.assertions(3) // Exactly three assertions are called during a test\n  // OR\n  expect.hasAssertions() // At least one assertion is called during a test\n\n  // Your async tests\n})\n```\n\n### async/await\n\n```js\ntest(\'async test\', async () => {\n  expect.assertions(1)\n  const result = await runAsyncOperation()\n  expect(result).toBe(true)\n})\n```\n\n### Promises\n\n_Return_ a Promise from your test:\n\n```js\ntest(\'async test\', () => {\n  expect.assertions(1)\n  return runAsyncOperation().then(result => {\n    expect(result).toBe(true)\n  })\n})\n```\n\n### done()\xc2\xa0callback\n\nWrap your assertions in try/catch block, otherwise Jest will ignore failures:\n\n```js\ntest(\'async test\', done => {\n  expect.assertions(1)\n  runAsyncOperation()\n  setTimeout(() => {\n    try {\n      const result = getAsyncOperationResult()\n      expect(result).toBe(true)\n      done()\n    } catch (err) {\n      done.fail(err)\n    }\n  })\n})\n```\n\n## Mocks\n\n### Mock functions\n\n```js\ntest(\'call the callback\', () => {\n  const callback = jest.fn()\n  fn(callback)\n  expect(callback).toBeCalled()\n  expect(callback.mock.calls[0][1].baz).toBe(\'pizza\') // Second argument of the first call\n})\n```\n\nYou can also use snapshots:\n\n```js\ntest(\'call the callback\', () => {\n  const callback = jest.fn().mockName(\'Unicorn\') // mockName is available in Jest 22+\n  fn(callback)\n  expect(callback).toMatchSnapshot()\n  // ->\n  // [MockFunction Unicorn] {\n  //   "calls": Array [\n  // ...\n})\n```\n\nAnd pass an implementation to `jest.fn` function:\n\n```js\nconst callback = jest.fn(() => true)\n```\n\n[Mock functions docs](https://facebook.github.io/jest/docs/mock-function-api.html)\n\n### Mock modules using `jest.mock` method\n\n```js\njest.mock(\'lodash/memoize\', () => a => a) // The original lodash/memoize should exist\njest.mock(\'lodash/memoize\', () => a => a, { virtual: true }) // The original lodash/memoize isn\xe2\x80\x99t required\n```\n\n[jest.mock docs](https://facebook.github.io/jest/docs/jest-object.html#jestmockmodulename-factory-options)\n\n> Note: When using `babel-jest`, calls to `jest.mock` will automatically be hoisted to the top of the code block. Use `jest.doMock` if you want to explicitly avoid this behavior.\n\n### Mock modules using a mock file\n\n1.  Create a file like `__mocks__/lodash/memoize.js`:\n\n    ```js\n    module.exports = a => a\n    ```\n\n2.  Add to your test:\n\n    ```js\n    jest.mock(\'lodash/memoize\')\n    ```\n\n> Note: When using `babel-jest`, calls to `jest.mock` will automatically be hoisted to the top of the code block. Use `jest.doMock` if you want to explicitly avoid this behavior.\n\n[Manual mocks docs](https://facebook.github.io/jest/docs/manual-mocks.html)\n\n### Mock object methods\n\n```js\nconst spy = jest.spyOn(ajax, \'request\').mockImplementation(() => Promise.resolve({ success: true }))\nexpect(spy).toHaveBeenCalled()\nspy.mockRestore()\n```\n\n### Mock getters and setters (Jest 22.1.0+)\n\n```js\nconst location = {}\nconst getTitle = jest.spyOn(location, \'title\', \'get\').mockImplementation(() => \'pizza\')\nconst setTitle = jest.spyOn(location, \'title\', \'set\').mockImplementation(() => {})\n```\n\n### Mock getters and setters\n\n```js\nconst getTitle = jest.fn(() => \'pizza\')\nconst setTitle = jest.fn()\nconst location = {}\nObject.defineProperty(location, \'title\', {\n  get: getTitle,\n  set: setTitle\n})\n```\n\n### Clearing and restoring mocks\n\nFor one mock:\n\n```js\nfn.mockClear() // Clears mock usage date (fn.mock.calls, fn.mock.instances)\nfn.mockReset() // Clears and removes any mocked return values or implementations\nfn.mockRestore() // Resets and restores the initial implementation\n```\n\n> Note: `mockRestore`\xc2\xa0works only with mocks created by `jest.spyOn`.\n\nFor all mocks:\n\n```js\njest.clearAllMocks()\njest.resetAllMocks()\njest.restoreAllMocks()\n```\n\n### Accessing the original module when using mocks\n\n```js\njest.mock(\'fs\')\nconst fs = require(\'fs\') // Mocked module\nconst fs = require.requireActual(\'fs\') // Original module\n```\n\n### Timer mocks\n\nWrite synchronous test for code that uses native timer functions (`setTimeout`, `setInterval`, `clearTimeout`, `clearInterval`).\n\n```js\n// Enable fake timers\njest.useFakeTimers()\n\ntest(\'kill the time\', () => {\n  const callback = jest.fn()\n  // Run some code that uses setTimeout or setInterval\n  const actual = someFunctionThatUseTimers(callback)\n  // Fast-forward until all timers have been executed\n  jest.runAllTimers()\n  // Check the results synchronously\n  expect(callback).toHaveBeenCalledTimes(1)\n})\n```\n\nUse [jest.runOnlyPendingTimers()](https://jestjs.io/docs/en/timer-mocks#run-pending-timers) for special cases.\n\nOr adjust timers by time with [advanceTimersByTime()](https://jestjs.io/docs/en/timer-mocks#advance-timers-by-time).\n\n## Data-driven tests (Jest 23+)\n\nRun the same test with different data:\n\n```js\ntest.each([[1, 1, 2], [1, 2, 3], [2, 1, 3]])(\'.add(%s, %s)\', (a, b, expected) => {\n  expect(a + b).toBe(expected)\n})\n```\n\nOr the same using template literals:\n\n```js\ntest.each`\n  a    | b    | expected\n  ${1} | ${1} | ${2}\n  ${1} | ${2} | ${3}\n  ${2} | ${1} | ${3}\n`(\'returns $expected when $a is added $b\', ({ a, b, expected }) => {\n  expect(a + b).toBe(expected)\n})\n```\n\n[test.each() docs](https://jestjs.io/docs/en/api.html#testeachtable-name-fn-timeout)\n\n## Skipping tests\n\nDon\xe2\x80\x99t run these tests:\n\n```js\ndescribe.skip(\'makePoniesPink\'...\ntests.skip(\'make each pony pink\'...\n```\n\nRun only these tests:\n\n```js\ndescribe.only(\'makePoniesPink\'...\ntests.only(\'make each pony pink\'...\n```\n\n## Testing modules with side effects\n\nNode.js and Jest will cache modules you `require`. To test modules with side effects you\xe2\x80\x99ll need to reset the module registry between tests:\n\n```js\nconst modulePath = \'../module-to-test\'\n\nafterEach(() => {\n  jest.resetModules()\n})\n\ntest(\'first test\', () => {\n  // Prepare conditions for the first test\n  const result = require(modulePath)\n  expect(result).toMatchSnapshot()\n})\n\ntest(\'second text\', () => {\n  // Prepare conditions for the second test\n  const fn = () => require(modulePath)\n  expect(fn).toThrow()\n})\n```\n\n## Usage with Babel and TypeScript\n\nAdd [babel-jest](https://github.com/facebook/jest/tree/master/packages/babel-jest) or [ts-jest](https://github.com/kulshekhar/ts-jest). Check their docs for installation instructions.\n\n## Resources\n\n- [Jest site](https://facebook.github.io/jest/)\n- [Testing React components with Jest and Enzyme](http://blog.sapegin.me/all/react-jest) by Artem Sapegin\n- [React Testing Examples](https://react-testing-examples.com/)\n- [Testing React Applications](https://youtu.be/59Ndb3YkLKA) by Max Stoiber\n- [Effective Snapshot Testing](https://blog.kentcdodds.com/effective-snapshot-testing-e0d1a2c28eca) by Kent C. Dodds\n- [Migrating to Jest](https://medium.com/@kentcdodds/migrating-to-jest-881f75366e7e#.pc4s5ut6z) by Kent C. Dodds\n- [Migrating AVA to Jest](http://browniefed.com/blog/migrating-ava-to-jest/) by Jason Brown\n- [How to Test React and MobX with Jest](https://semaphoreci.com/community/tutorials/how-to-test-react-and-mobx-with-jest) by Will Stern\n- [Testing React Intl components with Jest and Enzyme](https://medium.com/@sapegin/testing-react-intl-components-with-jest-and-enzyme-f9d43d9c923e) by Artem Sapegin\n- [Testing with Jest: 15 Awesome Tips and Tricks](https://medium.com/@stipsan/testing-with-jest-15-awesome-tips-and-tricks-42150ec4c262) by Stian Didriksen\n- Taking Advantage of Jest Matchers by Ben McCormick: [Part 1](https://benmccormick.org/2017/08/15/jest-matchers-1/), [Part 2](https://benmccormick.org/2017/09/04/jest-matchers-2/)\n\n---\n\n## You may also like\n\n- [Opinionated list of React components](https://github.com/sapegin/react-components)\n\n## Contributing\n\nImprovements are welcome! Open an issue or send a pull request.\n\n## Author and license\n\n[Artem Sapegin](http://sapegin.me/), a frontend developer at [Wayfair](https://tech.wayfair.com/) and the creator of [React Styleguidist](https://github.com/styleguidist/react-styleguidist). I also write about frontend at [my blog](http://blog.sapegin.me/).\n\nCC0 1.0 Universal license, see the included [License.md](/License.md) file.\n'