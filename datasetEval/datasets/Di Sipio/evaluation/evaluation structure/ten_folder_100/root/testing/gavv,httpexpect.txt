b'# httpexpect [![GoDoc](https://godoc.org/github.com/gavv/httpexpect?status.svg)](https://godoc.org/github.com/gavv/httpexpect) [![Travis](https://img.shields.io/travis/gavv/httpexpect.svg)](https://travis-ci.org/gavv/httpexpect) [![Coveralls](https://coveralls.io/repos/github/gavv/httpexpect/badge.svg?branch=master)](https://coveralls.io/github/gavv/httpexpect?branch=master)\n\nConcise, declarative, and easy to use end-to-end HTTP and REST API testing for Go (golang).\n\nBasically, httpexpect is a set of chainable *builders* for HTTP requests and *assertions* for HTTP responses and payload, on top of net/http and several utility packages.\n\nWorkflow:\n\n* Incrementally build HTTP requests.\n* Inspect HTTP responses.\n* Inspect response payload recursively.\n\n## Features\n\n##### Request builder\n\n* URL path construction, with simple string interpolation provided by [`go-interpol`](https://github.com/imkira/go-interpol) package.\n* URL query parameters (encoding using [`go-querystring`](https://github.com/google/go-querystring) package).\n* Headers, cookies, payload: JSON,  urlencoded or multipart forms (encoding using [`form`](https://github.com/ajg/form) package), plain text.\n* Custom reusable [request builders](#reusable-builders).\n\n##### Response assertions\n\n* Response status, predefined status ranges.\n* Headers, cookies, payload: JSON, JSONP, forms, text.\n* Round-trip time.\n* Custom reusable [response matchers](#reusable-matchers).\n\n##### Payload assertions\n\n* Type-specific assertions, supported types: object, array, string, number, boolean, null, datetime.\n* Regular expressions.\n* Simple JSON queries (using subset of [JSONPath](http://goessner.net/articles/JsonPath/)), provided by [`jsonpath`](https://github.com/yalp/jsonpath) package.\n* [JSON Schema](http://json-schema.org/) validation, provided by [`gojsonschema`](https://github.com/xeipuuv/gojsonschema) package.\n\n##### WebSocket support (thanks to [@tyranron](https://github.com/tyranron))\n\n* Upgrade an HTTP connection to a WebSocket connection (we use [`gorilla/websocket`](https://github.com/gorilla/websocket) internally).\n* Interact with the WebSocket server.\n* Inspect WebSocket connection parameters and WebSocket messages.\n\n##### Pretty printing\n\n* Verbose error messages.\n* JSON diff is produced on failure using [`gojsondiff`](https://github.com/yudai/gojsondiff/) package.\n* Failures are reported using [`testify`](https://github.com/stretchr/testify/) (`assert` or `require` package) or standard `testing` package.\n* Dumping requests and responses in various formats, using [`httputil`](https://golang.org/pkg/net/http/httputil/), [`http2curl`](https://github.com/moul/http2curl), or simple compact logger.\n\n##### Tuning\n\n* Tests can communicate with server via real HTTP client or invoke `net/http` or [`fasthttp`](https://github.com/valyala/fasthttp/) handler directly.\n* Custom HTTP client, logger, printer, and failure reporter may be provided by user.\n* Custom HTTP request factory may be provided, e.g. from the Google App Engine testing.\n\n## Versions\n\nThe versions are selected according to the [semantic versioning](https://semver.org/) scheme. Every new major version gets its own stable branch with a backwards compatibility promise. Releases are tagged from stable branches.\n\nThe current stable branch is `v2`. Previous branches are still maintained, but no new features are added.\n\nIf you\'re using go.mod, use a versioned import path:\n\n```go\nimport "github.com/gavv/httpexpect/v2"\n```\n\nOtherwise, use gopkg.in import path:\n\n```go\nimport "gopkg.in/gavv/httpexpect.v2"\n```\n\n## Documentation\n\nDocumentation is available on [GoDoc](https://godoc.org/github.com/gavv/httpexpect). It contains an overview and reference.\n\n## Examples\n\nSee [`_examples`](_examples) directory for complete standalone examples.\n\n* [`fruits_test.go`](_examples/fruits_test.go)\n\n    Testing a simple CRUD server made with bare `net/http`.\n\n* [`iris_test.go`](_examples/iris_test.go)\n\n    Testing a server made with [`iris`](https://github.com/kataras/iris/) framework. Example includes JSON queries and validation, URL and form parameters, basic auth, sessions, and streaming. Tests invoke the `http.Handler` directly.\n\n* [`echo_test.go`](_examples/echo_test.go)\n\n    Testing a server with JWT authentication made with [`echo`](https://github.com/labstack/echo/) framework. Tests use either HTTP client or invoke the `http.Handler` directly.\n\n* [`fasthttp_test.go`](_examples/fasthttp_test.go)\n\n    Testing a server made with [`fasthttp`](https://github.com/valyala/fasthttp) package. Tests invoke the `fasthttp.RequestHandler` directly.\n\n* [`websocket_test.go`](_examples/websocket_test.go)\n\n    Testing a WebSocket server based on [`gorilla/websocket`](https://github.com/gorilla/websocket). Tests invoke the `http.Handler` or `fasthttp.RequestHandler` directly.\n\n* [`gae_test.go`](_examples/gae_test.go)\n\n    Testing a server running under the [Google App Engine](https://en.wikipedia.org/wiki/Google_App_Engine).\n\n## Quick start\n\n##### Hello, world!\n\n```go\npackage example\n\nimport (\n\t"net/http"\n\t"net/http/httptest"\n\t"testing"\n\n\t"github.com/gavv/httpexpect"\n)\n\nfunc TestFruits(t *testing.T) {\n\t// create http.Handler\n\thandler := FruitsHandler()\n\n\t// run server using httptest\n\tserver := httptest.NewServer(handler)\n\tdefer server.Close()\n\n\t// create httpexpect instance\n\te := httpexpect.New(t, server.URL)\n\n\t// is it working?\n\te.GET("/fruits").\n\t\tExpect().\n\t\tStatus(http.StatusOK).JSON().Array().Empty()\n}\n```\n\n##### JSON\n\n```go\norange := map[string]interface{}{\n\t"weight": 100,\n}\n\ne.PUT("/fruits/orange").WithJSON(orange).\n\tExpect().\n\tStatus(http.StatusNoContent).NoContent()\n\ne.GET("/fruits/orange").\n\tExpect().\n\tStatus(http.StatusOK).\n\tJSON().Object().ContainsKey("weight").ValueEqual("weight", 100)\n\napple := map[string]interface{}{\n\t"colors": []interface{}{"green", "red"},\n\t"weight": 200,\n}\n\ne.PUT("/fruits/apple").WithJSON(apple).\n\tExpect().\n\tStatus(http.StatusNoContent).NoContent()\n\nobj := e.GET("/fruits/apple").\n\tExpect().\n\tStatus(http.StatusOK).JSON().Object()\n\nobj.Keys().ContainsOnly("colors", "weight")\n\nobj.Value("colors").Array().Elements("green", "red")\nobj.Value("colors").Array().Element(0).String().Equal("green")\nobj.Value("colors").Array().Element(1).String().Equal("red")\nobj.Value("colors").Array().First().String().Equal("green")\nobj.Value("colors").Array().Last().String().Equal("red")\n```\n\n##### JSON Schema and JSON Path\n\n```go\nschema := `{\n\t"type": "array",\n\t"items": {\n\t\t"type": "object",\n\t\t"properties": {\n\t\t\t...\n\t\t\t"private": {\n\t\t\t\t"type": "boolean"\n\t\t\t}\n\t\t}\n\t}\n}`\n\nrepos := e.GET("/repos/octocat").\n\tExpect().\n\tStatus(http.StatusOK).JSON()\n\n// validate JSON schema\nrepos.Schema(schema)\n\n// run JSONPath query and iterate results\nfor _, private := range repos.Path("$..private").Array().Iter() {\n\tprivate.Boolean().False()\n}\n```\n\n##### Forms\n\n```go\n// post form encoded from struct or map\ne.POST("/form").WithForm(structOrMap).\n\tExpect().\n\tStatus(http.StatusOK)\n\n// set individual fields\ne.POST("/form").WithFormField("foo", "hello").WithFormField("bar", 123).\n\tExpect().\n\tStatus(http.StatusOK)\n\n// multipart form\ne.POST("/form").WithMultipart().\n\tWithFile("avatar", "./john.png").WithFormField("username", "john").\n\tExpect().\n\tStatus(http.StatusOK)\n```\n\n##### URL construction\n\n```go\n// construct path using ordered parameters\ne.GET("/repos/{user}/{repo}", "octocat", "hello-world").\n\tExpect().\n\tStatus(http.StatusOK)\n\n// construct path using named parameters\ne.GET("/repos/{user}/{repo}").\n\tWithPath("user", "octocat").WithPath("repo", "hello-world").\n\tExpect().\n\tStatus(http.StatusOK)\n\n// set query parameters\ne.GET("/repos/{user}", "octocat").WithQuery("sort", "asc").\n\tExpect().\n\tStatus(http.StatusOK)    // "/repos/octocat?sort=asc"\n```\n\n##### Headers\n\n```go\n// set If-Match\ne.POST("/users/john").WithHeader("If-Match", etag).WithJSON(john).\n\tExpect().\n\tStatus(http.StatusOK)\n\n// check ETag\ne.GET("/users/john").\n\tExpect().\n\tStatus(http.StatusOK).Header("ETag").NotEmpty()\n\n// check Date\nt := time.Now()\n\ne.GET("/users/john").\n\tExpect().\n\tStatus(http.StatusOK).Header("Date").DateTime().InRange(t, time.Now())\n```\n\n##### Cookies\n\n```go\n// set cookie\nt := time.Now()\n\ne.POST("/users/john").WithCookie("session", sessionID).WithJSON(john).\n\tExpect().\n\tStatus(http.StatusOK)\n\n// check cookies\nc := e.GET("/users/john").\n\tExpect().\n\tStatus(http.StatusOK).Cookie("session")\n\nc.Value().Equal(sessionID)\nc.Domain().Equal("example.com")\nc.Path().Equal("/")\nc.Expires().InRange(t, t.Add(time.Hour * 24))\n```\n\n##### Regular expressions\n\n```go\n// simple match\ne.GET("/users/john").\n\tExpect().\n\tHeader("Location").\n\tMatch("http://(.+)/users/(.+)").Values("example.com", "john")\n\n// check capture groups by index or name\nm := e.GET("/users/john").\n\tExpect().\n\tHeader("Location").Match("http://(?P<host>.+)/users/(?P<user>.+)")\n\nm.Index(0).Equal("http://example.com/users/john")\nm.Index(1).Equal("example.com")\nm.Index(2).Equal("john")\n\nm.Name("host").Equal("example.com")\nm.Name("user").Equal("john")\n```\n\n##### Subdomains and per-request URL\n\n```go\ne.GET("/path").WithURL("http://example.com").\n\tExpect().\n\tStatus(http.StatusOK)\n\ne.GET("/path").WithURL("http://subdomain.example.com").\n\tExpect().\n\tStatus(http.StatusOK)\n```\n\n##### WebSocket support\n\n```go\nws := e.GET("/mysocket").WithWebsocketUpgrade().\n\tExpect().\n\tStatus(http.StatusSwitchingProtocols).\n\tWebsocket()\ndefer ws.Disconnect()\n\nws.WriteText("some request").\n\tExpect().\n\tTextMessage().Body().Equal("some response")\n\nws.CloseWithText("bye").\n\tExpect().\n\tCloseMessage().NoContent()\n```\n\n##### Reusable builders\n\n```go\ne := httpexpect.New(t, "http://example.com")\n\nr := e.POST("/login").WithForm(Login{"ford", "betelgeuse7"}).\n\tExpect().\n\tStatus(http.StatusOK).JSON().Object()\n\ntoken := r.Value("token").String().Raw()\n\nauth := e.Builder(func (req *httpexpect.Request) {\n\treq.WithHeader("Authorization", "Bearer "+token)\n})\n\nauth.GET("/restricted").\n\tExpect().\n\tStatus(http.StatusOK)\n\ne.GET("/restricted").\n\tExpect().\n\tStatus(http.StatusUnauthorized)\n```\n\n##### Reusable matchers\n\n```go\ne := httpexpect.New(t, "http://example.com")\n\n// every response should have this header\nm := e.Matcher(func (resp *httpexpect.Response) {\n\tresp.Header("API-Version").NotEmpty()\n})\n\nm.GET("/some-path").\n\tExpect().\n\tStatus(http.StatusOK)\n\nm.GET("/bad-path").\n\tExpect().\n\tStatus(http.StatusNotFound)\n```\n\n##### Custom config\n\n```go\ne := httpexpect.WithConfig(httpexpect.Config{\n\t// prepend this url to all requests\n\tBaseURL: "http://example.com",\n\n\t// use http.Client with a cookie jar and timeout\n\tClient: &http.Client{\n\t\tJar:     httpexpect.NewJar(),\n\t\tTimeout: time.Second * 30,\n\t},\n\n\t// use fatal failures\n\tReporter: httpexpect.NewRequireReporter(t),\n\n\t// use verbose logging\n\tPrinters: []httpexpect.Printer{\n\t\thttpexpect.NewCurlPrinter(t),\n\t\thttpexpect.NewDebugPrinter(t, true),\n\t},\n})\n```\n\n##### Session support\n\n```go\n// cookie jar is used to store cookies from server\ne := httpexpect.WithConfig(httpexpect.Config{\n\tReporter: httpexpect.NewAssertReporter(t),\n\tClient: &http.Client{\n\t\tJar: httpexpect.NewJar(), // used by default if Client is nil\n\t},\n})\n\n// cookies are disabled\ne := httpexpect.WithConfig(httpexpect.Config{\n\tReporter: httpexpect.NewAssertReporter(t),\n\tClient: &http.Client{\n\t\tJar: nil,\n\t},\n})\n```\n\n##### Use HTTP handler directly\n\n```go\n// invoke http.Handler directly using httpexpect.Binder\nvar handler http.Handler = MyHandler()\n\ne := httpexpect.WithConfig(httpexpect.Config{\n\tReporter: httpexpect.NewAssertReporter(t),\n\tClient: &http.Client{\n\t\tTransport: httpexpect.NewBinder(handler),\n\t\tJar:       httpexpect.NewJar(),\n\t},\n})\n\n// invoke fasthttp.RequestHandler directly using httpexpect.FastBinder\nvar handler fasthttp.RequestHandler = myHandler()\n\ne := httpexpect.WithConfig(httpexpect.Config{\n\tReporter: httpexpect.NewAssertReporter(t),\n\tClient: &http.Client{\n\t\tTransport: httpexpect.NewFastBinder(handler),\n\t\tJar:       httpexpect.NewJar(),\n\t},\n})\n```\n\n##### Per-request client or handler\n\n```go\ne := httpexpect.New(t, server.URL)\n\nclient := &http.Client{\n\tTransport: &http.Transport{\n\t\tDisableCompression: true,\n\t},\n}\n\n// overwrite client\ne.GET("/path").WithClient(client).\n\tExpect().\n\tStatus(http.StatusOK)\n\n// construct client that invokes a handler directly and overwrite client\ne.GET("/path").WithHandler(handler).\n\tExpect().\n\tStatus(http.StatusOK)\n```\n\n## Similar packages\n\n* [`gorequest`](https://github.com/parnurzeal/gorequest)\n* [`baloo`](https://github.com/h2non/baloo)\n* [`gofight`](https://github.com/appleboy/gofight)\n* [`frisby`](https://github.com/verdverm/frisby)\n* [`forest`](https://github.com/emicklei/forest)\n* [`restit`](https://github.com/go-restit/restit)\n* [`httptesting`](https://github.com/dolab/httptesting)\n* [`http-test`](https://github.com/vsco/http-test)\n* [`go-json-rest`](https://github.com/ant0ine/go-json-rest)\n\n## Contributing\n\nFeel free to report bugs, suggest improvements, and send pull requests! Please add documentation and tests for new features.\n\nUpdate dependencies, build code, and run tests and linters:\n\n```\n$ make\n```\n\nFormat code:\n\n```\n$ make fmt\n```\n\n## License\n\n[MIT](LICENSE)\n'