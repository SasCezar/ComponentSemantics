b'![KotlinTest](doc/logo4.png)\n==========\n\n[![Build Status](https://travis-ci.org/kotlintest/kotlintest.svg?branch=master)](https://travis-ci.org/kotlintest/kotlintest) \n[![Build status](https://ci.appveyor.com/api/projects/status/sr26tg49fk66yd82?svg=true)](https://ci.appveyor.com/project/sksamuel/kotlintest)\n[<img src="https://img.shields.io/maven-central/v/io.kotlintest/kotlintest-core.svg?label=latest%20release"/>](http://search.maven.org/#search|ga|1|kotlintest) [![GitHub license](https://img.shields.io/github/license/kotlintest/kotlintest.svg)]()\n[<img src="https://img.shields.io/nexus/s/https/oss.sonatype.org/io.kotlintest/kotlintest-core.svg?label=latest%20snapshot&style=plastic"/>](https://oss.sonatype.org/content/repositories/snapshots/io/kotest/)\n\n__KotlinTest is a flexible and comprehensive testing tool for [Kotlin](https://kotlinlang.org/).__  \n[Full documentation](doc/reference.md)\n\n\nFor latest updates see [Changelog](CHANGELOG.md)\n\nCommunity\n---------\n* [Stack Overflow](http://stackoverflow.com/questions/tagged/kotlintest) (don\'t forget to use the tag "kotlintest".)\n* [KotlinTest channel](https://kotlinlang.slack.com/messages/kotlintest) in the Kotlin Slack\n* [Contribute](https://github.com/kotlintest/kotlintest/wiki/contribute)\n\nTest with Style\n---------------\n\nWrite simple and beautiful tests with the `StringSpec` style:\n\n```kotlin\nclass MyTests : StringSpec({\n  "length should return size of string" {\n    "hello".length shouldBe 5\n  }\n  "startsWith should test for a prefix" {\n    "world" should startWith("wor")\n  }\n})\n```\n\nKotlinTest comes with several [testing styles](doc/reference.md#testing-styles) so you can choose one that fits your needs.\n\nMultitude of Matchers\n---------------------\n\nUse over 120 provided matchers to test assertions on many different types:\n\n```kotlin\n"substring".shouldContain("str")\n\nuser.email.shouldBeLowerCase()\n\nmyImageFile.shouldHaveExtension(".jpg")\n\ncityMap.shouldContainKey("London")\n```\n\nThe `withClue` and `asClue` helpers can add extra context to assertions so failures are self explanatory:\n\n```kotlin\nwithClue("Name should be present") { user.name shouldNotBe null }\n\ndata class HttpResponse(val status: Int, body: String)\nval response = HttpResponse(200, "the content")\nresponse.asClue {\n    it.status shouldBe 200\n    it.body shouldBe "the content"\n}\n```\n\nNesting is allowed in both cases and will show all available clues.\n\nMatchers are extension methods and so your IDE will auto complete. See the [full list of matchers](doc/matchers.md) or write your own.\n\nLet the Computer Generate Your Test Data\n----------------------------------------\n\nUse [property based testing](doc/reference.md#property-based) to test your code with automatically generated test data:\n\n```kotlin\nclass PropertyExample: StringSpec() {\n  init {\n    "String size" {\n      assertAll { a: String, b: String ->\n        (a + b) should haveLength(a.length + b.length)\n      }\n    }\n}\n```\n\nCheck all the Tricky Cases With Data Driven Testing\n--------------------------\n\nHandle even an enormous amount of input parameter combinations easily with [data driven tests](doc/reference.md#table-driven-testing):\n\n```kotlin\nclass StringSpecExample : StringSpec({\n  "maximum of two numbers" {\n    forall(\n        row(1, 5, 5),\n        row(1, 0, 1),\n        row(0, 0, 0)\n    ) { a, b, max ->\n      Math.max(a, b) shouldBe max\n    }\n  }\n})\n```\n\nTest Exceptions\n---------------\n\nTesting for [exceptions](doc/reference.md#exceptions) is easy with KotlinTest:\n\n```kotlin\nval exception = shouldThrow<IllegalAccessException> {\n  // code in here that you expect to throw an IllegalAccessException\n}\nexception.message should startWith("Something went wrong")\n```\n\nFine Tune Test Execution\n------------------------\n\nYou can specify the number of invocations, parallelism, and a timeout for each test or for all tests.\nAnd you can group tests by tags or disable them conditionally.\nAll you need is [`config`](doc/reference.md#config):\n\n```kotlin\nclass MySpec : StringSpec() {\n\n  override val defaultTestCaseConfig = TestCaseConfig(invocations = 3)\n\n  init {\n    "should use config".config(timeout = 2.seconds, invocations = 10, threads = 2, tags = setOf(Database, Linux)) {\n      // ...\n    }\n  }\n}\n```\n\nAnd More ...\n------------\n\nThis page gives you just a short overview of KotlinTest. There are many more features:\n\n* Test whole collections with [Inspectors](doc/reference.md#inspectors).\n* Write elegant conditions with the [matcher DSL](doc/reference.md#matchers-and-assertions): `"hello".shouldHaveSubstring("ell")`.\n* Reuse test logic for setup or tear down, with [Listeners](doc/reference.md#listeners).\n* Test asynchronous code with [`whenReady`](doc/reference.md#whenReady) and non-deterministic code with [`eventually`](doc/nondeterministic.md) or [`continually`](doc/nondeterministic.md)\n* Let KotlinTest [close resources automatically](doc/reference.md#autoclose): `val reader = autoClose(StringReader("xyz"))`\n* Handle tricky scenarios such as System Environment with [extensions](doc/extensions.md)\n* Use the [Spring extension](doc/extensions.md#Spring) to automatically inject your spring test classes.\n* Test [Arrow](doc/extensions.md#Arrow) data types with the Arrow extension.\n* Make use of custom plugins for integrations with tools such as [Pitest](doc/plugins.md#Pitest)\n\nSee [full documentation](doc/reference.md).\n\nUse\n---\n\n#### Gradle\n\nTo use in gradle, configure your build to use the [JUnit Platform](https://junit.org/junit5/docs/current/user-guide/#running-tests-build-gradle). For Gradle 4.6 and higher this is\n as simple as adding `useJUnitPlatform()` inside the tasks with type `Test` and then adding the KotlinTest dependency.\n\n<details open>\n<summary>Groovy (build.gradle)</summary>\n\n```groovy\ntest {\n  useJUnitPlatform()\n}\n\ndependencies {\n  testImplementation \'io.kotlintest:kotlintest-runner-junit5:3.3.2\'\n}\n```\n\n</details>\n\n\n<details open>\n<summary>Android Project (Groovy)</summary>\n\n```groovy\nandroid.testOptions {\n    unitTests.all {\n        useJUnitPlatform()\n    }\n}\n\ndependencies {\n    testImplementation \'io.kotlintest:kotlintest-runner-junit5:3.3.2\'\n}\n```\n\n</details>\n\nIf you are using Gradle+Kotlin, this works for both Android and non-Android projects:\n\n<details open>\n<summary>Kotlin (build.gradle.kts)</summary>\n\n```kotlin\ntasks.withType<Test> {\n  useJUnitPlatform()\n}\n\ndependencies {\n  testImplementation("io.kotlintest:kotlintest-runner-junit5:3.3.0")\n}\n```\n\n</details>\n\n\n#### Maven\n\nFor maven you must configure the surefire plugin for junit tests.\n\n```xml\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-surefire-plugin</artifactId>\n    <version>2.22.2</version>\n</plugin>\n```\n\nAnd then add the KotlinTest JUnit5 runner to your build.\n\n```xml\n<dependency>\n    <groupId>io.kotlintest</groupId>\n    <artifactId>kotlintest-runner-junit5</artifactId>\n    <version>3.3.2</version>\n    <scope>test</scope>\n</dependency>\n```\n\n#### Snapshots\n\nIf you want to test the latest snapshot build, setup the same way described above, change the version to the current snapshot version and add the following repository to your `repositories` block:\n\n```kotlin\nrepositories {\n    maven(url = "https://oss.sonatype.org/content/repositories/snapshots/")\n}\n```\n\nCurrently, in snapshot builds only, our artifacts and packages are using a new name: **Kotest**. To use them, change every instance of `io.kotlintest` to `io.kotest`, and you should be good to go.'