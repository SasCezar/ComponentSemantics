b'# MailDev\n\n[![Build Status](https://api.travis-ci.org/djfarrelly/MailDev.svg)](https://travis-ci.org/djfarrelly/MailDev)\n[![codecov](https://codecov.io/gh/djfarrelly/MailDev/branch/master/graph/badge.svg)](https://codecov.io/gh/djfarrelly/MailDev)\n[![NPM Version](https://img.shields.io/npm/v/maildev.svg)](https://www.npmjs.com/package/maildev)\n[![JavaScript Style Guide](https://img.shields.io/badge/code_style-standard-brightgreen.svg)](https://standardjs.com)\n\n**MailDev** is a simple way to test your project\'s generated emails during development with an easy to use web interface that runs on your machine built on top of [Node.js](http://www.nodejs.org).\n\n![MailDev Screenshot](https://github.com/djfarrelly/MailDev/blob/gh-pages/images/screenshot-2015-03-29.png?raw=true)\n\n## Install & Run\n\n    $ npm install -g maildev\n    $ maildev\n\nIf you want to use MailDev with [Docker](https://www.docker.com/), you can use the\n[**djfarrelly/maildev** image on Docker Hub](https://registry.hub.docker.com/u/djfarrelly/maildev/).\nFor a guide for usage with Docker,\n[checkout the docs](https://github.com/djfarrelly/MailDev/blob/master/docs/docker.md).\n\n    $ docker run -p 1080:80 -p 1025:25 djfarrelly/maildev\n\nFor convenient use with Grunt, try [grunt-maildev](https://github.com/xavierpriour/grunt-maildev).\n\n## Usage\n\n    maildev [options]\n\n      -h, --help                      output usage information\n      -V, --version                   output the version number\n      -s, --smtp <port>               SMTP port to catch emails [1025]\n      -w, --web <port>                Port to run the Web GUI [1080]\n      --ip <ip address>               IP Address to bind SMTP service to\n      --outgoing-host <host>          SMTP host for outgoing emails\n      --outgoing-port <port>          SMTP port for outgoing emails\n      --outgoing-user <user>          SMTP user for outgoing emails\n      --outgoing-pass <password>      SMTP password for outgoing emails\n      --outgoing-secure               Use SMTP SSL for outgoing emails\n      --auto-relay [email]            Use auto-relay mode. Optional relay email address\n      --auto-relay-rules <file>       Filter rules for auto relay mode\n      --incoming-user <user>          SMTP user for incoming emails\n      --incoming-pass <pass>          SMTP password for incoming emails\n      --web-ip <ip address>           IP Address to bind HTTP service to, defaults to --ip\n      --web-user <user>               HTTP user for GUI\n      --web-pass <password>           HTTP password for GUI\n      --base-pathname <path>          base path for URLs\n      --disable-web                   Disable the use of the web interface. Useful for unit testing\n      --hide-extensions <extensions>  Comma separated list of SMTP extensions to NOT advertise\n                                      (STARTTLS, SMTPUTF8, PIPELINING, 8BITMIME)\n      -o, --open                      Open the Web GUI after startup\n      -v, --verbose\n      --silent\n\n## API\n\nMailDev can be used in your Node.js application. For more info view the\n[API docs](https://github.com/djfarrelly/MailDev/blob/master/docs/api.md).\n\n```javascript\nconst MailDev = require(\'maildev\')\n\nconst maildev = new MailDev()\n\nmaildev.listen()\n\nmaildev.on(\'new\', function (email) {\n  // We got a new email!\n})\n```\n\nMailDev also has a **REST API**. For more info\n[view the docs](https://github.com/djfarrelly/MailDev/blob/master/docs/rest.md).\n\n## Outgoing email\n\nMaildev optionally supports selectively relaying email to an outgoing SMTP server.  If you configure outgoing\nemail with the --outgoing-* options you can click "Relay" on an individual email to relay through MailDev out\nto a real SMTP service that will *actually* send the email to the recipient.\n\n  Example:\n\n    $ maildev --outgoing-host smtp.gmail.com \\\n              --outgoing-secure \\\n              --outgoing-user \'you@gmail.com\' \\\n              --outgoing-pass \'<pass>\'\n\n### Auto relay mode\n\nEnabling the auto relay mode will automatically send each email to it\'s recipient\nwithout the need to click the "Relay" button mentioned above.\nThe outgoing email options are required to enable this feature.\n\nOptionally you may pass an single email address which Maildev will forward all\nemails to instead of the original recipient. For example, using\n`--auto-relay you@example.com` will forward all emails to that address\nautomatically.\n\nAdditionally, you can pass a valid json file with additional configuration for\nwhat email addresses you would like to `allow` or `deny`. The last matching\nrule in the array will be the rule MailDev will follow.\n\n  Example:\n\n    $ maildev --outgoing-host smtp.gmail.com \\\n              --outgoing-secure \\\n              --outgoing-user \'you@gmail.com\' \\\n              --outgoing-pass \'<pass>\' \\\n              --auto-relay \\\n              --auto-relay-rules file.json\n\n  Rules example file:\n```javascript\n[\n\t{ "allow": "*" },\n\t{ "deny":  "*@test.com" },\n\t{ "allow": "ok@test.com" },\n\t{ "deny":  "*@utah.com" },\n\t{ "allow": "johnny@utah.com" }\n]\n```\n  This would allow `angelo@fbi.gov`, `ok@test.com`, `johnny@utah.com`, but deny\n  `bodhi@test.com`.\n\n## Configure your project\n\nConfigure your application to send emails via port `1025` and open `localhost:1080` in your browser.\n\n**Nodemailer (v1.0+)**\n\n```javascript\nconst transport = nodemailer.createTransport({\n  port: 1025,\n  ignoreTLS: true,\n  // other settings...\n})\n```\n\n**Nodemailer (v0.7)**\n\n```javascript\nconst transport = nodemailer.createTransport(\'SMTP\', {\n  port: 1025,\n  // other settings...\n})\n```\n\n**Django** -- Add `EMAIL_PORT = 1025` in your settings file [[source]](https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-EMAIL_PORT)\n\n**Rails** -- config settings:\n\n```ruby\nconfig.action_mailer.delivery_method = :smtp\n    config.action_mailer.smtp_settings = {\n        address: "localhost",\n        port: 1025,\n        enable_starttls_auto: false\n    }\n```\n\n**Drupal** -- Install and configure [SMTP](https://www.drupal.org/project/smtp) module or use a library like [SwiftMailer](http://swiftmailer.org/).\n\n## Features\n\n* Toggle between HTML, plain text views as well as view email headers\n* Test Responsive Emails w/ resizeable preview pane available for 320/480/600px screen sizes\n* Ability to receive and view email attachments\n* Websockets keep the interface in sync once emails are received\n* Command line interface for configuring SMTP and Web interface ports\n* Ability to relay email to an upstream SMTP server\n\n## Ideas\n\nIf you\'re using MailDev and you have a great idea, I\'d love to hear it. If you\'re not using MailDev because it lacks a feature, I\'d love to hear that too. Add an issue to the repo [here](https://github.com/djfarrelly/MailDev/issues/new) or contact me on [twitter](http://www.twitter.com/djfarrelly).\n\n## Contributing\n\nAny help on MailDev would be awesome. There is plenty of room for improvement. Feel free to [create a Pull Request](https://github.com/djfarrelly/MailDev/issues/new) from small to big changes.\n\nTo run **MailDev** during development:\n\n    npm install\n    npm run dev\n\nThe "dev" task will run MailDev using nodemon and restart automatically when\nchanges are detected. On `*.scss` file save, the css will also be recompiled.\nUsing `test/send.js`, a few test emails will be sent every time the application\nrestarts.\n\nThe project uses the [JavaScript Standard coding style](https://standardjs.com).\nTo lint your code before submitting your PR, run `npm run lint`.\n\nTo run the test suite:\n\n    $ npm test\n\n## [Changelog](https://github.com/djfarrelly/MailDev/releases)\n\n## Thanks\n\n**MailDev** is built on using great open source projects including\n[Express](http://expressjs.com),\n[AngularJS](http://angularjs.org/),\n[Font Awesome](http://fontawesome.io/) and two great projects from\n[Andris Reinman](https://github.com/andris9):\n[smtp-server](https://github.com/nodemailer/smtp-server)\nand [mailparser](https://github.com/nodemailer/mailparser).\nMany thanks to Andris as his projects are the backbone of this app and to\n[MailCatcher](http://mailcatcher.me/) for the inspiration.\n\nAdditionally, thanks to all the awesome [contributors](https://github.com/djfarrelly/MailDev/graphs/contributors)\nto the project.\n\n## License\n\nMIT\n'