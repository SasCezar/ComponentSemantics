b'# Shoulda Matchers [![Gem Version][version-badge]][rubygems] [![Build Status][travis-badge]][travis] ![Downloads][downloads-badge] [![Hound][hound-badge]][hound]\n\n[version-badge]: https://img.shields.io/gem/v/shoulda-matchers.svg\n[rubygems]: https://rubygems.org/gems/shoulda-matchers\n[travis-badge]: https://img.shields.io/travis/thoughtbot/shoulda-matchers/master.svg\n[travis]: https://travis-ci.org/thoughtbot/shoulda-matchers\n[downloads-badge]: https://img.shields.io/gem/dtv/shoulda-matchers.svg\n[hound-badge]: https://img.shields.io/badge/Reviewed_by-Hound-8E64B0.svg\n[hound]: https://houndci.com\n\n[![shoulda-matchers][logo]][website]\n\n[logo]: https://matchers.shoulda.io/images/shoulda-matchers-logo.png\n[website]: https://matchers.shoulda.io/\n\nShoulda Matchers provides RSpec- and Minitest-compatible one-liners to test\ncommon Rails functionality that, if written by hand, would be much longer, more\ncomplex, and error-prone.\n\n## Quick links\n\n\xf0\x9f\x93\x96 **[Read the documentation for the latest version (4.1.2)][rubydocs].**  \n\xf0\x9f\x93\xa2 **[See what\'s changed in a recent version][news].**\n\n[rubydocs]: http://matchers.shoulda.io/docs\n[news]: NEWS.md\n\n## Table of contents\n\n* [Getting started](#getting-started)\n   * [RSpec](#rspec)\n   * [Minitest](#minitest)\n* [Usage](#usage)\n  * [On the subject of `subject`](#on-the-subject-of-subject)\n  * [Availability of RSpec matchers in example groups](#availability-of-rspec-matchers-in-example-groups)\n  * [`should` vs `is_expected.to`](#should-vs-is_expectedto)\n* [Matchers](#matchers)\n   * [ActiveModel matchers](#activemodel-matchers)\n   * [ActiveRecord matchers](#activerecord-matchers)\n   * [ActionController matchers](#actioncontroller-matchers)\n   * [Independent matchers](#independent-matchers)\n* [Compatibility](#compatibility)\n* [Contributing](#contributing)\n* [Versioning](#versioning)\n* [License](#license)\n* [About thoughtbot](#about-thoughtbot)\n\n## Getting started\n\n### RSpec\n\nStart by including `shoulda-matchers` in your Gemfile:\n\n```ruby\ngroup :test do\n  gem \'shoulda-matchers\'\nend\n```\n\nNow you need to tell the gem a couple of things:\n\n* Which test framework you\'re using\n* Which portion of the matchers you want to use\n\nYou can supply this information by providing a configuration block. Where this\ngoes and what this contains depends on your project.\n\n#### Rails apps\n\nAssuming you are testing a Rails app, simply place this at the bottom of\n`spec/rails_helper.rb` (or in a support file if you so choose):\n\n```ruby\nShoulda::Matchers.configure do |config|\n  config.integrate do |with|\n    with.test_framework :rspec\n    with.library :rails\n  end\nend\n```\n\nNow you\'re ready to [use matchers in your tests](#usage)!\n\n#### Non-Rails apps\n\nIf your project isn\'t a Rails app, but you still make use of ActiveRecord or\nActiveModel, you can still use this gem too! In that case, you\'ll want to place\nthe following configuration at the bottom of `spec/spec_helper.rb`:\n\n```ruby\nShoulda::Matchers.configure do |config|\n  config.integrate do |with|\n    with.test_framework :rspec\n\n    # Keep as many of these lines as are necessary:\n    with.library :active_record\n    with.library :active_model\n  end\nend\n```\n\nNow you\'re ready to [use matchers in your tests](#usage)!\n\n### Minitest\n\nShoulda Matchers was originally a component of [Shoulda][shoulda], a gem that\nalso provides `should` and `context` syntax via\n[`shoulda-context`][shoulda-context].\n\n[shoulda]: https://github.com/thoughtbot/shoulda\n[shoulda-context]: https://github.com/thoughtbot/shoulda-context\n\nAt the moment, `shoulda` has not been updated to support `shoulda-matchers` 3.x\nand 4.x, so you\'ll want to add the following to your Gemfile:\n\n```ruby\ngroup :test do\n  gem \'shoulda\', \'~> 3.5\'\n  gem \'shoulda-matchers\', \'~> 2.0\'\n  gem \'rails-controller-testing\'\nend\n```\n\nNow you\'re ready to [use matchers in your tests](#usage)!\n\n## Usage\n\nThe matchers provided by this gem are divided into different categories\ndepending on what you\'re testing within your Rails app:\n\n* [database models backed by ActiveRecord](#activemodel-matchers)\n* [non-database models, form objects, etc. backed by\n  ActiveModel](#activerecord-matchers)\n* [controllers](#actioncontroller-matchers)\n* [routes](#routing-matchers) (RSpec only)\n* [usage of Rails-specific features like `delegate`](#independent-matchers)\n\nAll matchers are designed to be prepended primarily with the word `should`,\nwhich is a special directive in both RSpec and Shoulda. For instance, a model\ntest case may look something like:\n\n``` ruby\n# RSpec\nRSpec.describe MenuItem, type: :model do\n  describe \'associations\' do\n    it { should belong_to(:category).class_name(\'MenuCategory\') }\n  end\n\n  describe \'validations\' do\n    it { should validate_presence_of(:name) }\n    it { should validate_uniqueness_of(:name).scoped_to(:category_id) }\n  end\nend\n\n# Minitest (Shoulda)\nclass MenuItemTest < ActiveSupport::TestCase\n  context \'associations\' do\n    should belong_to(:category).class_name(\'MenuCategory\')\n  end\n\n  context \'validations\' do\n    should validate_presence_of(:name)\n    should validate_uniqueness_of(:name).scoped_to(:category_id)\n  end\nend\n```\n\nFor the full set of matchers you can use, [see below](#matchers).\n\n### On the subject of `subject`\n\nFor both RSpec and Shoulda, the **subject** is an implicit reference to the\nobject under test, and all of the matchers make use of it internally when they\nare run. This is always set automatically by your test framework in any given\ntest case; however, in certain cases it can be advantageous to override the\nsubject. For instance, when testing validations in a model, it is customary to\nprovide a valid model instead of a fresh one:\n\n``` ruby\n# RSpec\nRSpec.describe Post, type: :model do\n  describe \'validations\' do\n    # Here we\'re using FactoryBot, but you could use anything\n    subject { build(:post) }\n\n    it { should validate_presence_of(:title) }\n  end\nend\n\n# Minitest (Shoulda)\nclass PostTest < ActiveSupport::TestCase\n  context \'validations\' do\n    subject { build(:post) }\n\n    should validate_presence_of(:title)\n  end\nend\n```\n\nWhen overriding the subject in this manner, then, it\'s important to provide the\ncorrect object. **When in doubt, provide an instance of the class under test.**\nThis is particularly necessary for controller tests, where it is easy to\naccidentally write something like:\n\n``` ruby\nRSpec.describe PostsController, type: :controller do\n  describe \'GET #index\' do\n    subject { get :index }\n\n    # This may work...\n    it { should have_http_status(:success) }\n    # ...but this will not!\n    it { should permit(:title, :body).for(:post) }\n  end\nend\n```\n\nIn this case, you would want to use `before` rather than `subject`:\n\n``` ruby\nRSpec.describe PostsController, type: :controller do\n  describe \'GET #index\' do\n    before { get :index }\n\n    # Notice that we have to assert have_http_status on the response here...\n    it { expect(response).to have_http_status(:success) }\n    # ...but we do not have to provide a subject for render_template\n    it { should render_template(\'index\') }\n  end\nend\n```\n\n### Availability of RSpec matchers in example groups\n\nIf you\'re using RSpec, then you\'re probably familiar with the concept of example\ngroups: these are different kinds of test cases, and each of them has special\nbehavior around them. As alluded to [above](#usage), this gem works in a similar\nway, and there are matchers that are only available in certain types of example\ngroups:\n\n* ActiveRecord and ActiveModel matchers are available only in model example\n  groups, i.e., those tagged with `type: :model` or in files located under\n  `spec/models`.\n* ActionController matchers are available only in controller example groups,\n  i.e., those tagged with `type: :controller` or in files located under\n  `spec/controllers`.\n* The `route` matcher is available in routing example groups, i.e., those\n  tagged with `type: :routing` or in files located under `spec/routing`.\n* Independent matchers are available in all example groups.\n\nAs long as you\'re using Rails, you don\'t need to worry about this \xe2\x80\x94 everything\nshould "just work".\n\n**However, if you are using ActiveModel or ActiveRecord outside of Rails**, and\nyou want to use model matchers in certain example groups, you\'ll need to\nmanually include the module that holds those matchers. A good way to do this is\nto place the following in your `spec_helper.rb`:\n\n```ruby\nRSpec.configure do |config|\n  config.include(Shoulda::Matchers::ActiveModel, type: :model)\n  config.include(Shoulda::Matchers::ActiveRecord, type: :model)\nend\n```\n\nThen you can say:\n\n```ruby\ndescribe MySpecialModel, type: :model do\n  # ...\nend\n```\n\n### `should` vs `is_expected.to`\n\nIn this README and throughout the documentation, we\'re using the `should` form\nof RSpec\'s one-liner syntax over `is_expected.to`. The `should` form works\nregardless of how you\'ve configured RSpec \xe2\x80\x94 meaning you can still use it even\nwhen using the `expect` syntax. But if you prefer to use `is_expected.to`, you\ncan do that too:\n\n```ruby\nRSpec.describe Person, type: :model do\n  it { is_expected.to validate_presence_of(:name) }\nend\n```\n\n## Matchers\n\nThe following is a list of matchers shipped with the gem. If you need details\nabout any of them, make sure to [consult the documentation][rubydocs]!\n\n### ActiveModel matchers\n\n* **[allow_value](lib/shoulda/matchers/active_model/allow_value_matcher.rb)**\n  tests that an attribute is valid or invalid if set to one or more values.\n  *(Aliased as #allow_values.)*\n* **[have_secure_password](lib/shoulda/matchers/active_model/have_secure_password_matcher.rb)**\n  tests usage of `has_secure_password`.\n* **[validate_absence_of](lib/shoulda/matchers/active_model/validate_absence_of_matcher.rb)**\n  tests usage of `validates_absence_of`.\n* **[validate_acceptance_of](lib/shoulda/matchers/active_model/validate_acceptance_of_matcher.rb)**\n  tests usage of `validates_acceptance_of`.\n* **[validate_confirmation_of](lib/shoulda/matchers/active_model/validate_confirmation_of_matcher.rb)**\n  tests usage of `validates_confirmation_of`.\n* **[validate_exclusion_of](lib/shoulda/matchers/active_model/validate_exclusion_of_matcher.rb)**\n  tests usage of `validates_exclusion_of`.\n* **[validate_inclusion_of](lib/shoulda/matchers/active_model/validate_inclusion_of_matcher.rb)**\n  tests usage of `validates_inclusion_of`.\n* **[validate_length_of](lib/shoulda/matchers/active_model/validate_length_of_matcher.rb)**\n  tests usage of `validates_length_of`.\n* **[validate_numericality_of](lib/shoulda/matchers/active_model/validate_numericality_of_matcher.rb)**\n  tests usage of `validates_numericality_of`.\n* **[validate_presence_of](lib/shoulda/matchers/active_model/validate_presence_of_matcher.rb)**\n  tests usage of `validates_presence_of`.\n\n### ActiveRecord matchers\n\n* **[accept_nested_attributes_for](lib/shoulda/matchers/active_record/accept_nested_attributes_for_matcher.rb)**\n  tests usage of the `accepts_nested_attributes_for` macro.\n* **[belong_to](lib/shoulda/matchers/active_record/association_matcher.rb)**\n  tests your `belongs_to` associations.\n* **[define_enum_for](lib/shoulda/matchers/active_record/define_enum_for_matcher.rb)**\n  tests usage of the `enum` macro.\n* **[have_and_belong_to_many](lib/shoulda/matchers/active_record/association_matcher.rb)**\n  tests your `has_and_belongs_to_many` associations.\n* **[have_db_column](lib/shoulda/matchers/active_record/have_db_column_matcher.rb)**\n  tests that the table that backs your model has a specific column.\n* **[have_db_index](lib/shoulda/matchers/active_record/have_db_index_matcher.rb)**\n  tests that the table that backs your model has an index on a specific column.\n* **[have_many](lib/shoulda/matchers/active_record/association_matcher.rb)**\n  tests your `has_many` associations.\n* **[have_one](lib/shoulda/matchers/active_record/association_matcher.rb)**\n  tests your `has_one` associations.\n* **[have_readonly_attribute](lib/shoulda/matchers/active_record/have_readonly_attribute_matcher.rb)**\n  tests usage of the `attr_readonly` macro.\n* **[serialize](lib/shoulda/matchers/active_record/serialize_matcher.rb)** tests\n  usage of the `serialize` macro.\n* **[validate_uniqueness_of](lib/shoulda/matchers/active_record/validate_uniqueness_of_matcher.rb)**\n  tests usage of `validates_uniqueness_of`.\n\n### ActionController matchers\n\n* **[filter_param](lib/shoulda/matchers/action_controller/filter_param_matcher.rb)**\n  tests parameter filtering configuration.\n* **[permit](lib/shoulda/matchers/action_controller/permit_matcher.rb)** tests\n  that an action places a restriction on the `params` hash.\n* **[redirect_to](lib/shoulda/matchers/action_controller/redirect_to_matcher.rb)**\n  tests that an action redirects to a certain location.\n* **[render_template](lib/shoulda/matchers/action_controller/render_template_matcher.rb)**\n  tests that an action renders a template.\n* **[render_with_layout](lib/shoulda/matchers/action_controller/render_with_layout_matcher.rb)**\n  tests that an action is rendered with a certain layout.\n* **[rescue_from](lib/shoulda/matchers/action_controller/rescue_from_matcher.rb)**\n  tests usage of the `rescue_from` macro.\n* **[respond_with](lib/shoulda/matchers/action_controller/respond_with_matcher.rb)**\n  tests that an action responds with a certain status code.\n* **[route](lib/shoulda/matchers/action_controller/route_matcher.rb)** tests\n  your routes.\n* **[set_session](lib/shoulda/matchers/action_controller/set_session_matcher.rb)**\n  makes assertions on the `session` hash.\n* **[set_flash](lib/shoulda/matchers/action_controller/set_flash_matcher.rb)**\n  makes assertions on the `flash` hash.\n* **[use_after_action](lib/shoulda/matchers/action_controller/callback_matcher.rb#L79)**\n  tests that an `after_action` callback is defined in your controller.\n* **[use_around_action](lib/shoulda/matchers/action_controller/callback_matcher.rb#L129)**\n  tests that an `around_action` callback is defined in your controller.\n* **[use_before_action](lib/shoulda/matchers/action_controller/callback_matcher.rb#L54)**\n  tests that a `before_action` callback is defined in your controller.\n\n### Routing matchers\n\n* **[route](lib/shoulda/matchers/action_controller/route_matcher.rb)** tests\n  your routes.\n\n### Independent matchers\n\n* **[delegate_method](lib/shoulda/matchers/independent/delegate_method_matcher.rb)**\n  tests that an object forwards messages to other, internal objects by way of\n  delegation.\n\n## Compatibility\n\nShoulda Matchers is tested and supported against Ruby 2.4+, Rails 5.x, Rails\n4.2.x, RSpec 3.x, and Minitest 5.x.\n\nFor Ruby < 2.4 and Rails < 4.1 compatibility, please use [v3.1.3][v3.1.3].\n\n[v3.1.3]: https://github.com/thoughtbot/shoulda-matchers/releases/tag/v3.1.3\n\n## Contributing\n\nShoulda Matchers is open source, and we are grateful for\n[everyone][contributors] who\'s contributed so far.\n\n[contributors]: https://github.com/thoughtbot/shoulda-matchers/contributors\n\nIf you\'d like to contribute, please take a look at the\n[instructions](CONTRIBUTING.md) for installing dependencies and crafting a good\npull request.\n\n## Versioning\n\nShoulda Matchers follows Semantic Versioning 2.0 as defined at\n<http://semver.org>.\n\n## License\n\nShoulda Matchers is copyright \xc2\xa9 2006-2019\n[thoughtbot, inc][thoughtbot-website]. It is free software,\nand may be redistributed under the terms specified in the\n[MIT-LICENSE](MIT-LICENSE) file.\n\n[thoughtbot-website]: https://thoughtbot.com\n\n## About thoughtbot\n\n![thoughtbot][thoughtbot-logo]\n\n[thoughtbot-logo]: https://presskit.thoughtbot.com/images/thoughtbot-logo-for-readmes.svg\n\nShoulda Matchers is maintained and funded by thoughtbot, inc. The names and\nlogos for thoughtbot are trademarks of thoughtbot, inc.\n\nWe are passionate about open source software. See [our other\nprojects][community]. We are [available for hire][hire].\n\n[community]: https://thoughtbot.com/community?utm_source=github\n[hire]: https://thoughtbot.com?utm_source=github\n'