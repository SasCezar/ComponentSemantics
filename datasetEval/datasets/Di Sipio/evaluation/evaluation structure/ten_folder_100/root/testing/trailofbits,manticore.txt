b'# Manticore\n<p align="center">\n  <img src="docs/images/manticore.png?raw=true" width="256" title="Manticore">\n</p>\n<br />\n\n\n[![Build Status](https://travis-ci.com/trailofbits/manticore.svg?branch=master)](https://travis-ci.com/trailofbits/manticore)\n[![PyPI version](https://badge.fury.io/py/manticore.svg)](https://badge.fury.io/py/manticore)\n[![Slack Status](https://empireslacking.herokuapp.com/badge.svg)](https://empireslacking.herokuapp.com)\n[![Documentation Status](https://readthedocs.org/projects/manticore/badge/?version=latest)](http://manticore.readthedocs.io/en/latest/?badge=latest)\n[![Maintainability](https://api.codeclimate.com/v1/badges/9161568d8378cea903f4/maintainability)](https://codeclimate.com/github/trailofbits/manticore/maintainability)\n[![Test Coverage](https://api.codeclimate.com/v1/badges/9161568d8378cea903f4/test_coverage)](https://codeclimate.com/github/trailofbits/manticore/test_coverage)\n\nManticore is a symbolic execution tool for analysis of smart contracts and binaries.\n\n> Note: Beginning with version 0.2.0, Python 3.6+ is required.\n\n## Features\n\n- **Input Generation**: Manticore automatically generates inputs that trigger unique code paths\n- **Error Discovery**: Manticore discovers bugs and produces inputs required to trigger them\n- **Execution Tracing**: Manticore records an instruction-level trace of execution for each generated input\n- **Programmatic Interface**: Manticore exposes programmatic access to its analysis engine via a Python API\n\nManticore can analyze the following types of programs:\n\n- Ethereum smart contracts (EVM bytecode)\n- Linux ELF binaries (x86, x86_64 and ARMv7)\n\n## Usage\n\n### CLI\n\nManticore has a command line interface which can be used to easily symbolically execute a supported program or smart contract. Analysis results will be placed into a new directory beginning with `mcore_`.\n\nUse the CLI to explore possible states in Ethereum smart contracts. Manticore includes _detectors_ that flag potentially vulnerable code in discovered states; output from them will be written to stdout and the results directory.\nSolidity smart contracts must have a `.sol` extension for analysis by Manticore. See a [demo](https://asciinema.org/a/154012).\n\n```bash\n$ manticore ./path/to/contract.sol  # runs, and creates a mcore_* directory with analysis results\n```\n\nThe command line can also be used to simply explore a Linux binary:\n\n```bash\n$ manticore ./path/to/binary        # runs, and creates a mcore_* directory with analysis results\n$ manticore ./path/to/binary ab cd  # use concrete strings "ab", "cd" as program arguments\n$ manticore ./path/to/binary ++ ++  # use two symbolic strings of length two as program arguments\n```\n\n### API\n\nManticore has a Python programming interface which can be used to implement custom analyses.\n\nFor Ethereum smart contracts, it can be used for detailed verification of arbitrary contract properties. Set starting conditions, execute symbolic transactions, then review discovered states to ensure invariants for your contract hold.\n\n```python\nfrom manticore.ethereum import ManticoreEVM\ncontract_src="""\ncontract Adder {\n    function incremented(uint value) public returns (uint){\n        if (value == 1)\n            revert();\n        return value + 1;\n    }\n}\n"""\nm = ManticoreEVM()\n\nuser_account = m.create_account(balance=1000)\ncontract_account = m.solidity_create_contract(contract_src,\n                                              owner=user_account,\n                                              balance=0)\nvalue = m.make_symbolic_value()\n\ncontract_account.incremented(value)\n\nfor state in m.ready_states:\n    print("can value be 1? {}".format(state.can_be_true(value == 1)))\n    print("can value be 200? {}".format(state.can_be_true(value == 200)))\n```\n\nIt is also possible to use the API to create custom analysis tools for Linux binaries.\n\n\n```python\n# example Manticore script\nfrom manticore.native import Manticore\n\nhook_pc = 0x400ca0\n\nm = Manticore.linux(\'./path/to/binary\')\n\n@m.hook(hook_pc)\ndef hook(state):\n  cpu = state.cpu\n  print(\'eax\', cpu.EAX)\n  print(cpu.read_int(cpu.ESP))\n\n  m.kill()  # tell Manticore to stop\n\nm.run()\n```\n\n## Requirements\n\n* Manticore is supported on Linux and requires **Python 3.6+**.\n* Ubuntu 18.04 is strongly recommended.\n* Ethereum smart contract analysis requires the [`solc`](https://github.com/ethereum/solidity) program in your `$PATH`.\n* Increased stack size is recommended; this can be done by `ulimit -s 100000` or by passing `--ulimit stack=100000000:100000000` to `docker run` if docker is used.\n\n## Quickstart\n\nInstall and try Manticore in a few shell commands:\n\n```bash\n# Install system dependencies\nsudo apt-get update && sudo apt-get install python3 python3-pip -y\n\n# Install Manticore and its dependencies\nsudo pip3 install manticore[native]\n\n# Download the examples\ngit clone https://github.com/trailofbits/manticore.git && cd manticore/examples/linux\n\n# Build the examples\nmake\n\n# Use the Manticore CLI\nmanticore basic\ncat mcore_*/*0.stdin | ./basic\ncat mcore_*/*1.stdin | ./basic\n\n# Use the Manticore API\ncd ../script\npython3 count_instructions.py ../linux/helloworld\n```\n\nYou can also use Docker to quickly install and try Manticore:\n\n```bash\n# Run container with a shared examples/ directory\n# Note that `--rm` will make the container be deleted if you exit it\n# (if you want to persist data from the container, use docker volumes)\n# (we need to increase maximum stack size, so we use ulimit for that)\n$ docker run --rm -it --ulimit stack=100000000:100000000 trailofbits/manticore bash\n\n# Change to examples directory\nmanticore@8d456f662d0f:~$ cd manticore/examples/linux/\n\n# Build the examples\nmanticore@8d456f662d0f:~/manticore/examples/linux$ make\n\n# Use the Manticore CLI\nmanticore@8d456f662d0f:~/manticore/examples/linux$ manticore basic\n\n\nmanticore@8d456f662d0f:~/manticore/examples/linux$ cat mcore_*/*0.stdin | ./basic\nmanticore@8d456f662d0f:~/manticore/examples/linux$ cat mcore_*/*1.stdin | ./basic\n\n# Use the Manticore API\nmanticore@8d456f662d0f:~/manticore/examples/linux$ cd ../script\nmanticore@8d456f662d0f:~/manticore/examples/script$ python3 count_instructions.py ../linux/helloworld\n```\n\n## Installation\n\n\n> NOTE: For native binary analysis, Manticore requires additional dependencies that are not installed by default. To\ninstall these also, substitute `manticore[native]` for `manticore` in any `pip` command.\n\n\nOption 1: Perform a user install (requires `~/.local/bin` in your `PATH`).\n\n```bash\necho "PATH=\\$PATH:~/.local/bin" >> ~/.profile\nsource ~/.profile\npip3 install --user manticore\n```\n\nOption 2: Use a virtual environment (requires [virtualenvwrapper](https://virtualenvwrapper.readthedocs.io/en/latest/) or [similar](https://virtualenv.pypa.io/en/stable/)).\n\n```bash\nsudo pip3 install virtualenvwrapper\necho "source /usr/local/bin/virtualenvwrapper.sh" >> ~/.profile\nsource ~/.profile\nmkvirtualenv manticore\nsudo ./manticore/bin/pip3 install manticore\n```\n\nOption 3: Perform a system install.\n\n```bash\nsudo pip3 install manticore\n```\n\nOption 4: Install via Docker.\n\n```bash\ndocker pull trailofbits/manticore\n```\n\nOnce installed, the `manticore` CLI tool and Python API will be available.\n\nFor installing a development version of Manticore, see our [wiki](https://github.com/trailofbits/manticore/wiki/Hacking-on-Manticore).\n\nIf you use Mac OS X you may need to install dependencies manually:\n\n```bash\nbrew install capstone\nexport MACOS_UNIVERSAL=no && pip install capstone\n\nbrew install unicorn\nUNICORN_QEMU_FLAGS="--python=`whereis python`" pip install unicorn\n```\n\n### Solidity Versions\nNote that we\'re still in the process of implementing full support for the EVM Constantinople instruction semantics, so certain opcodes may not be supported.\nYou may want to consider using a version of `solc` that\'s less likely to generate these opcodes (eg pre-0.5.0).\n\n## Getting Help\n\nFeel free to stop by our #manticore slack channel in [Empire Hacking](https://empireslacking.herokuapp.com/) for help using or extending Manticore.\n\n\nDocumentation is available in several places:\n\n  * The [wiki](https://github.com/trailofbits/manticore/wiki) contains some\n    basic information about getting started with Manticore and contributing\n\n  * The [examples](examples) directory has some very minimal examples that\n    showcase API features\n\n  * The [API reference](http://manticore.readthedocs.io/en/latest/) has more\n    thorough and in-depth documentation on our API\n\n  * The [manticore-examples](https://github.com/trailofbits/manticore-examples)\n    repository has some more involved examples, for instance solving real CTF problems\n\n## License\n\nManticore is licensed and distributed under the AGPLv3 license. [Contact us](mailto:opensource@trailofbits.com) if you\'re looking for an exception to the terms.\n\n## Publication\n- [Manticore: A User-Friendly Symbolic Execution Framework for Binaries and Smart Contracts](https://arxiv.org/abs/1907.03890), Mark Mossberg, Felipe Manzano, Eric Hennenfent, Alex Groce, Gustavo Grieco, Josselin Feist, Trent Brunson, Artem Dinaburg - ASE 19\n\nIf you are using Manticore on an academic work, consider applying to the [Crytic $10k Research Prize](https://blog.trailofbits.com/2019/11/13/announcing-the-crytic-10k-research-prize/).\n'