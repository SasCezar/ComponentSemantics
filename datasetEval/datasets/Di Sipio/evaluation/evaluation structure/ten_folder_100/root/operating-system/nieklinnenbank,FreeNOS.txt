b"About {#mainpage}\n=====\n\nFreeNOS (Free Niek's Operating System) is an experimental microkernel based\noperating system for learning purposes written in C++. You may use the code\nas you wish under the terms of the GPLv3.\n\nVisit the project website at http://www.FreeNOS.org for more information.\n\nFeatures\n========\n\n* Intel x86 (PC) and ARMv6/ARMv7 architectures (Raspberry Pi 1,2,3)\n* Virtual memory\n* Simple task scheduling\n* Inter Process Communication (IPC)\n* Symmetric Multi Processing with MPI support (Intel x86 only)\n* Devices:\n    * VGA/Keyboard consoles (also supported by Ed's libteken (http://80386.nl/projects/libteken/)\n    * i8250 serial UART\n    * PCI host controller\n    * CMOS RTC clock\n    * ATA host controller\n    * USB controller and (root)hub (Raspberry Pi only)\n    * Loopback network and SMSC95xx ethernet (Raspberry Pi only)\n* Filesystems:\n    * Virtual file system (VFS)\n    * Temporary file system (TmpFS)\n    * Linnenbank file system (LinnFS)\n* Networking (IP, UDP, ICMP, for Raspberry pi 1 only)\n* POSIX, ANSI C libraries\n* Dynamic and Shared memory\n* Fully automatic autotester\n* All sources documented with Doxygen (http://www.doxygen.org)\n* User and kernel code written from scratch in C++\n* Very small microkernel (~2K lines of C++ code including a tiny part in assembly)\n* Builds with recent GCC (http://gcc.gnu.org), LLVM (http://www.llvm.org) and SCons (http://www.scons.org) versions on POSIX systems\n\nHost Setup\n==========\n\nFirst install all required build dependencies. FreeNOS needs SCons, an C++ compiler and for Intel targets a tool to generate ISO images.\nFollow the instructions below to install the build dependencies on your host OS.\n\n*Ubuntu*\n\nUpdate your system repository cache and install the required development tools using:\n\n    $ sudo apt-get update\n    $ sudo apt-get install build-essential scons genisoimage xorriso qemu-system binutils-multiarch\n\nIf your Ubuntu host is 64-bit, you need to install the GCC multilib package\nto cross compile for the 32-bit architecture:\n\n    $ sudo apt-get install gcc-multilib g++-multilib\n\nAlternatively, you can install the LLVM/Clang compiler as well:\n\n    $ sudo apt-get install clang\n\n*FreeBSD*\n\nUpdate your system repository cache and install the required development tools using:\n\n    % su -\n    # pkg update\n    # pkg install qemu scons cdrkit-genisoimage xorriso gcc\n\nOn FreeBSD, make sure that the latest version of the GNU linker (from pkg) is used:\n\n    # mv /usr/bin/ld.bfd /usr/bin/ld.bfd.orig\n\nBuilding FreeNOS\n================\n\nTo download and extract the released source code on your host OS, run the\nfollowing commands. Replace 'x.x.x' with the version of FreeNOS:\n\n    $ wget http://www.FreeNOS.org/pub/FreeNOS/source/FreeNOS-x.x.x.tar.gz\n    $ tar zxf FreeNOS-x.x.x.tar.gz\n\nTo get the latest development source, you can clone the GIT archive:\n\n    $ git clone https://github.com/nieklinnenbank/FreeNOS\n\nTo build FreeNOS using default settings (Intel, using GCC with debugging enabled), run:\n\n    $ scons\n\nTo build FreeNOS with all full build commands printed on the console, set the\nVERBOSE build variable to True:\n\n    $ scons VERBOSE=True\n\nTo build FreeNOS with compiler optimizations enabled, set DEBUG to False.\nNote that will make debugging using GDB more difficult:\n\n    $ scons DEBUG=False\n\nInstead of providing build variables on the command line, you can\nalso change the 'build.conf' configuration file for the target. The build configuration\nfile contains build variables, such as compiler flags and parameters for the target.\nSimilary, the 'build.host.conf' file contains build variables for the host OS programs.\nSee the example build.conf and build.host.conf files for more details.\n\nAdditionally, any environment variables set in the shell will be automatically converted\nto identical build variables when running scons.\n\nTo build for the Raspberry Pi 2, copy the example build configuration file and run SCons:\n\n    $ cp config/arm/raspberry2/build.conf .\n    $ scons\n\nTo cleanup your build directory, use:\n\n    $ scons -c\n\nOr use the following command to also remove temporary SCons files:\n\n    $ rm -rf build .sconf_temp .sconsign.dblite\n\nRunning FreeNOS\n===============\n\nTo run the autotester of FreeNOS on the host OS, run:\n\n    $ scons test\n\nTo run the same autotester on FreeNOS under Qemu, run:\n\n    $ scons qemu_test\n\nTo start FreeNOS in a Qemu virtual machine with a serial console,\nuse the following command:\n\n    $ scons qemu\n\nTo debug FreeNOS using GDB, you need to have build using the DEBUG=False build variable.\nEnsure that your host OS has GDB available for debugging the target architecture (Intel or ARM).\nFor Ubuntu:\n\n    $ sudo apt-get install gdb-multiarch\n\nOpen two terminals. In the first terminal, launch FreeNOS in Qemu with the internal gdbserver enabled:\n\n    $ scons qemu_debug\n\nIn the second terminal, start GDB and connect to the Qemu internal gdbserver using:\n\n    $ gdb-multiarch ./build/intel/pc/kernel/intel/pc/kernel\n    (gdb) target remote localhost:1234\n\nYou can now use standard GDB commands to interactively debug the FreeNOS kernel for intel.\nSimilarly, you can also debug a user program (./build/intel/pc/bin/XXX) or the FreeNOS\nkernel for ARM (./build/arm/raspberry2/kernel/arm/raspberry2/kernel).\n\nintel/pc\n--------\n\nFor Intel targets, you can also launch Qemu using the graphical VGA console (using SDL):\n\n    $ scons qemu_sdl\n\nTo test FreeNOS on real hardware, write the boot ISO to a bootable device, such as an USB disk.\nInsert the USB disk to your host OS and find the appropriate device name:\n\n    $ fdisk -l\n\nAlternatively, use the dmesg command to find the device name. Write the boot ISO\nusing the following command, where sdX is the name of the USB disk device.\nNote: make sure to select the correct device to prevent data loss:\n\n    $ sudo dd if=build/intel/pc/boot.iso of=/dev/sdX\n    $ sudo sync\n\nInsert the USB disk device to the target system and make sure to choose it as\nboot device when the computer starts (e.g. via BIOS). You should see the FreeNOS VGA console.\n\narm/raspberry\n-------------\n\nTo build FreeNOS for running on the Raspberry Pi 1, use the provided build.conf file\nand rebuild the system:\n\n    $ cp config/arm/raspberry/build.conf .\n    $ scons\n\nTo test FreeNOS for the raspberry pi 1 under Qemu, rebuild the system\nwith the QEMU_BUILD build variable set to True:\n\n    $ scons QEMU_BUILD=True\n    $ scons qemu\n\nTo test on a real Raspberry Pi using SD card, download the latest Raspbian 'Lite' image\nfrom https://www.raspberrypi.org/downloads/raspbian/ and unzip it. Insert the SD card to\nyour reader/writer slot on your host OS and find the appropriate device name using:\n\n    $ fdisk -l\n\nAlternatively, use the dmesg command to find the device name. Write the Raspbian image to the\nSD card using the following command, where sdX is the name of the SD card device.\nNote: make sure to select the correct device to prevent data loss:\n\n    $ sudo dd if=/path/to/raspbian/image.img of=/dev/sdX\n    $ sudo sync\n\nRe-insert the SD-card to auto mount it on your host OS. Copy the FreeNOS raspberry pi kernel executable\nto the '/boot' partition on the Raspbian image using (on Ubuntu):\n\n    $ sudo cp build/arm/raspberry/kernel.img /media/boot/kernel.img\n    $ sudo sync\n    $ sudo umount /media/boot\n\nYou will need a USB-to-TTL-serial cable to connect to the Raspberry Pi UART.\nAny USB-to-TTL-serial cable will work, for example the Adafruit USB-to-TTL-serial cable:\n\n    https://www.adafruit.com/product/954\n\nConnect your USB-to-serial cable to the Raspberry Pi using the GPIO pins:\n\n    [ ] [ ]\n    [ ] [X]  Pin 4  (V5)     <---  Red (only needed if powered via USB)\n    [ ] [X]  Pin 6  (Ground) <---  Black\n    [ ] [X]  Pin 8  (RX)     <---  White\n    [ ] [X]  Pin 10 (TX)     <---  Green\n    [ ] [ ]\n    [ ] [ ]\n    [ ] [ ]\n    [ ] [ ]\n    [ ] [ ]\n\nAlso see the following tutorial by Adafruit on connecting the serial cable to the Raspberry Pi:\n\n    https://learn.adafruit.com/adafruits-raspberry-pi-lesson-5-using-a-console-cable/connect-the-lead\n\nConnect your Raspberry Pi to the host to power it via USB or use an external power adapter.\nOn the host OS, launch a serial console client program such as minicom and connect it to the\nUSB serial device (baudrate 115200):\n\n    $ minicom -D /dev/ttyUSB0\n\nYou should now see the FreeNOS console output.\n\narm/raspberry2\n--------------\n\nFollow the same instructions as for the Raspberry Pi 1 above, but use the Raspberry Pi 2\nconfiguration file instead to build FreeNOS:\n\n    $ cp config/arm/raspberry2/build.conf .\n    $ scons\n\nWhen copying the kernel executable to the SD card '/boot' partition, use the 'kernel7.img' filename\nto make sure the Raspberry Pi bootloader correctly starts the kernel (ARMv7):\n\n    $ cp build/arm/raspberry/kernel.img /media/boot/kernel7.img\n\nAdditionally, for raspberry pi 2 and newer, add the following to the /boot/config.txt\nfile to ensure the first UART is available on GPIO pins 8 and 10:\n\n    dtoverlay=pi3-miniuart-bt\n    enable_uart=1\n\nUsing FreeNOS\n=============\n\nWhen FreeNOS starts the system will print bootup output and present the system\nlogin prompt. Currently the login will accept any username value and does not\nask for a password. The FreeNOS interactive console prompt looks like the following:\n\n    (localhost) / #\n\nFreeNOS has a UNIX-like interface and you may enter any of the commands available\nin the /bin directory:\n\n    (localhost) / # ls bin\n\nFor example, the 'ps' command prints a list of all processes running in the system:\n\n    (localhost) / # ps\n\nYou can also run the fully automatic autotester inside Qemu or on real hardware\nusing the following command:\n\n    (localhost) / # /test/run\n\nTo view some information about the FreeNOS version and hardware settings\nyou can use the 'sysinfo' command:\n\n    (localhost) / # sysinfo\n\nThe '/' in the prompt indicates the current active directory. Change it with the 'cd'\nbuilt-in shell command:\n\n    (localhost) / # cd /tmp\n    (localhost) /tmp #\n\nThe FreeNOS shell has several built-in commands, use the 'help' command\nto view all the built-in shell commands:\n\n    (localhost) / # help\n\nExample application program for calculating prime numbers is the /bin/prime command.\nTo let it compute all prime numbers up to 1024 and output the prime number results use:\n\n    (localhost) / # prime --stdout 1024\n\nFor Intel, the prime command also has a MPI variant called 'mpiprime' which can\ncompute the prime numbers in parallel using multiple cores. To run it and let the\nshell measure the time taken use:\n\n    (localhost) / # time mpiprime 2000000\n\nYou can compare the time result versus the time take of the single core program\nwhere it computes the same number of primes:\n\n    (localhost) / # time prime 2000000\n\nJenkins Continuous Integration\n==============================\n\nMaster Setup\n------------\n\n$ sudo apt-get install vagrant vagrant-libvirt libvirt-bin qemu-kvm\n\nInstall Jenkins on your host OS using your favorite package manager or from the official website (https://jenkins.io/).\nFollow the installation wizard instructions and after installation go to the Jenkins web interface at: http://localhost:8080\n\nAfter installation, navigate to: Manage Jenkins > Manage Plugins\nMake sure the following plugins are installed. Choose the plugins from the 'Available' tab to find the plugins\nwhich are not yet installed:\n\n- Matrix Project Plugin (https://wiki.jenkins-ci.org/display/JENKINS/Matrix+Project+Plugin)\n- Matrix Combinations Plugin (https://wiki.jenkins-ci.org/display/JENKINS/matrix+combinations+plugin)\n- Node and Label Parameter Plugin (https://wiki.jenkins-ci.org/display/JENKINS/NodeLabel+Parameter+Plugin)\n- Libvirt Slaves Plugin (https://wiki.jenkins.io/display/JENKINS/Libvirt+Slaves+Plugin)\n- SSH Plugin (https://wiki.jenkins-ci.org/display/JENKINS/SSH+plugin)\n- Workspace Cleanup Plugin (https://wiki.jenkins-ci.org/display/JENKINS/Workspace+Cleanup+Plugin)\n\nAfter finishing Jenkins configuration, install KVM and Libvirt on your host OS. For Ubuntu use:\n\n    $ sudo apt-get install qemu-kvm libvirt-bin virtinst\n\nConnect Jenkins to libvirt via SSH, navigate to: Manage Jenkins > Configure System\nChoose 'Add a new cloud' and select 'Hypervisor Type': QEMU,\n'Hypervisor Host': localhost and choose your desired SSH username.\n\nPress 'Advanced' to choose authentication parameters and press 'Test Connection' to\nverify Jenkins can access libvirt via SSH. For Ubuntu, you need to ensure the SSH user\nis in the 'kvm' and 'libvirtd' groups:\n\n    $ sudo usermod -a -G kvm,libvirtd jenkins\n\nJenkins need to find the KVM guests by their hostname. You can either manually configure\nthe DNS hostname to IP translation in the /etc/hosts file or automatically using the\ninternal libvirt DNSMasq server.\n\nTo setup automatic DNS translation in KVM, first edit the 'default' libvirt network interface\nto add the '.kvm' local-only domain:\n\n    $ virsh net-edit default\n\nAdd the following line inside the <network>....</network> tag:\n\n    <domain name='kvm' localOnly='yes'/>\n\nTo use the libvirt internal DNSMasq server on your host, you may change the /etc/resolv.conf\nfile to add the following:\n\n    nameserver 192.168.122.1\n\nIf your host OS uses NetworkManager for networking, add the following files:\n\n    $ sudo -s\n    # cat > /etc/NetworkManager/conf.d/localdns.conf\n    [main]\n    dns=dnsmasq\n\n    # cat > /etc/NetworkManager/dnsmasq.d/libvirt_dnsmasq.conf\n    server=/kvm/192.168.122.1\n\nEnsure that all KVM guests have their hostname set in the .kvm domain (e.g. someguest.kvm).\nRestart libvirt and optionally NetworkManager to apply the changes:\n\n    $ sudo /etc/init.d/libvirt-bin restart\n    $ sudo /etc/init.d/NetworkManager restart\n\nYou should now be able to resolve the hostnames of your guests in the .kvm domain after they\nare started, for example:\n\n    $ virsh start ubuntu-1804\n    $ host ubuntu-1804.kvm\n\nAlso visit the following page for more details on this automatic DNS setup for KVM:\nhttps://liquidat.wordpress.com/2017/03/03/howto-automated-dns-resolution-for-kvmlibvirt-guests-with-a-local-domain/\n\nFreeBSD 12.0 Slave\n------------------\n\nRun the example installation script in ./support/jenkins/freebsd-12.sh from the FreeNOS sources\nto setup the KVM guest with FreeBSD 12.0. Also see the comments in the installation script for more info:\n\n    jenkins@host$ cd support/jenkins\n    jenkins@host$ ./freebsd-12.sh\n\nTo configure the FreeBSD 12.0 slave in Jenkins for building FreeNOS, you first need to\nmake sure the Jenkins user can login to the slave using SSH. Optionally, you can\nconfigure this with public key authentication:\n\n    jenkins@host$ virsh start freebsd-12\n    jenkins@host$ ssh-keygen\n    jenkins@host$ ssh-copy-id jenkins@freebsd-12.kvm\n\nTest if the Jenkins user can login to the FreeBSD KVM guest with SSH (via password or key):\n\n    jenkins@host$ ssh jenkins@freebsd-12.kvm\n\nCopy the example node configuration XML file to the Jenkins installation directory:\n\n    jenkins@host$ mkdir /var/lib/jenkins/nodes/freebsd-12-test\n    jenkins@host$ cp freebsd-12.node.xml /var/lib/jenkins/nodes/freebsd-12-test/config.xml\n\nAlso copy the job configuration XML file to the Jenkins installation directory:\n\n    jenkins@host$ mkdir /var/lib/jenkins/jobs/FreeNOS-freebsd12-test\n    jenkins@host$ cp freebsd-12.job.xml /var/lib/jenkins/jobs/FreeNOS-freebsd12-test/config.xml\n\nRestart the Jenkins server to use the new configuration files:\n\n    $ sudo /etc/init.d/jenkins restart\n\nJenkins still needs authentication credentials to connect to the slave. Navigate to:\n\n    Manage Jenkins > Manage Nodes > freebsd-12 > Configure\n\nIn the sub-menu 'Secondary launch method', under 'Launch agents via SSH',\nselect existing SSH credentials to let jenkins use it to login to the slave node\nor add a new credentials with the 'Add' button. If you generated an SSH key for\nthe jenkins user on the host OS, insert the SSH private key or provide username/password.\n\nPress the 'Save' button to finish and use 'Launch Agent' to test the connection.\n\nYou can now press the 'Schedule a Build' button on the 'FreeNOS-freebsd12' build job to test.\n\nUbuntu 18.04 Slave\n------------------\n\nFollow the same instructions as the FreeBSD 12.0 Slave above and just\nreplace the slave name with 'ubuntu-1804'.\n\nAuthors\n=======\n\nThe FreeNOS code has been written from scratch by Niek Linnenbank.\nPeople who contributed to FreeNOS are:\n\n* Dan Rulos (AmayaOS)\n* Coen Bijlsma (libparse, srv/time)\n* Ed Schouten (libteken)\n* Alexander Schrijver (OpenBSD patches)\n"