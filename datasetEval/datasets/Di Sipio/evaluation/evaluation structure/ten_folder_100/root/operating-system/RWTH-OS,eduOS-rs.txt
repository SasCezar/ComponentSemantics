b'# eduOS-rs - A teaching operating system written in Rust\n\n## Status\n\n|   | Build & Test |\n|---|:-----:|\n|**all OS\'**|[![Build & Test](https://dev.azure.com/RWTH-OS/eduOS-rs/_apis/build/status/RWTH-OS.eduOS-rs)](https://dev.azure.com/RWTH-OS/eduOS-rs/_build?definitionId=1)|\n|**Linux only**|[![Build & Test](https://git.rwth-aachen.de/os/eduOS-rs/badges/master/pipeline.svg)](https://git.rwth-aachen.de/os/eduOS-rs/pipelines)|\n\n## Introduction\n\n<p align="center"><img src="/img/demo.gif?raw=true"/></p>\n\neduOS-rs is a Unix-like operating system based on a monolithic architecture for educational purposes.\nIt is developed for the course [Operating Systems][acsos] at RWTH Aachen University and includes a modified hypervisor that simplifies the boot process to increase the intelligibility of the OS.\neduOS-rs is derived from following tutorials and software distributions:\n\n1. Philipp Oppermann\'s [excellent series of blog posts][opp].\n2. Erik Kidd\'s [toyos-rs][kidd], which is an extension of Philipp Opermann\'s kernel.\n3. The original version of [eduOS][stlankes], which was the old teaching kernel written in C.\n\n[opp]: http://blog.phil-opp.com/\n[kidd]: http://www.randomhacks.net/bare-metal-rust/\n[stlankes]: http://rwth-os.github.io/eduOS/\n[rust-barebones-kernel]: https://github.com/thepowersgang/rust-barebones-kernel\n[acsos]: http://www.os.rwth-aachen.de/\n\n## Requirements to build eduOS-rs\neduOS-rs is tested under Linux, macOS, and Windows.\n\n### macOS\nApple\'s *Command Line Tools* must be installed.\nThe Command Line Tool package gives macOS terminal users many commonly used tools and compilers, that are usually found in default Linux installations.\nFollowing terminal command installs these tools without Apple\'s IDE Xcode:\n\n```sh\n$ xcode-select --install\n```\n\n### Windows\nTo build eduOS-rs you have to install a linker, [make](http://gnuwin32.sourceforge.net/packages/make.htm) and a [git client](https://git-scm.com/downloads).\nWe tested the eduOS-rs with the linker from Visual Studio.\nConsequently, we suggest installing Visual Studio in addition to [make](http://gnuwin32.sourceforge.net/packages/make.htm) and [git](https://git-scm.com/downloads).\n\n### Linux\nLinux users should install common developer tools.\nFor instance, on Ubuntu 18.04 the following command installs the required tools:\n\n```sh\n$ apt-get install -y curl wget nasm make autotools-dev gcc g++ build-essential\n```\n\n### Common for macOS, Windows and Linux\nIt is required to install the Rust toolchain.\nPlease visit the [Rust website](https://www.rust-lang.org/) and follow the installation instructions for your operating system.\nIt is important that the *nightly channel* is used to install the toolchain.\nThis is queried during installation and should be answered as appropriate.\n\nAfterwards the installation of *cargo-xbuild* and the source code of Rust runtime are required to build the kernel:\n\n```sh\n$ cargo install cargo-xbuild\n$ rustup component add rust-src\n```\n\neduOS-rs is able to run within [ehyve](https://github.com/RWTH-OS/ehyve), which a specialized hypervisor for eduOS-rs.\nTherefore [ehyve](https://github.com/RWTH-OS/ehyve) must be installed.\n\n```sh\n$ cargo install --git https://github.com/RWTH-OS/ehyve.git\n```\n\nPlease check if your system fullfil ehyve\'s [system requirements](https://github.com/RWTH-OS/ehyve).\n\n## Building\nThe final step is to create a copy of the repository and to build the kernel:\n\n```sh\n$ # Get our source code.\n$ git clone https://github.com/RWTH-OS/eduOS-rs.git\n$ cd eduOS-rs\n\n$ # Build kernel\n$ make\n```\n\nFrom here, we should be able to run the kernel in ehyve:\n\n```sh\n$ make run\n```\n\n## Overview of all branches\n\nStep by step (here branch by branch) the operating system design will be introduced.\nThis tutorial shows the steps to develop from a minimal kernel to a Unix-like computer operating system.\nCurrently, following stages of development are available:\n\n0. stage0 - Smallest HelloWorld of the World\n\n   Description of loading a minimal 64bit kernel\n\n1. stage1 - Cooperative/non-preemptive multitasking\n\n   Introduction into a simple form of multitasking, where no interrupts are required.\n\n2. stage2 - Priority-based cooperative/non-preemptive multitasking\n\n   Introduction into a simple form of priority-based multitasking, where no interrupts are required.\n\n3. stage3 - Synchronization primitives\n\n   Introduce basic synchronization primitives\n\n4. stage 4 - Preemptive multitasking\n\n   Introduction into preemptive multitasking and interrupt handling\n\n5. stage 5 - Support of user-level tasks\n\n   Add support of user-level tasks with an small interface for basic system calls\n\n6. stage 6 - Support of paging\n\n   Add support of paging and a simple demo for process creation\n\n7. stage 7 - Integration of an in-memory file system\n\n   Introduce a virtual file system with an in-memory file system as example file system.\n\n8. stage8 - Run Linux application as common process\n\n   Start a simple Linux application (_HelloWorld_) on top of eduOS-rs. The application is a _position-independent executable_ (PIE) and use [musl-libc](http://www.musl-libc.org) as standard C library.\n\n## Useful Links\n\n1. [http://www.gnu.org/software/grub/manual/multiboot/](http://www.gnu.org/software/grub/manual/multiboot/)\n2. [http://www.osdever.net/tutorials/view/brans-kernel-development-tutorial](http://www.osdever.net/tutorials/view/brans-kernel-development-tutorial)\n3. [http://www.jamesmolloy.co.uk/tutorial_html/index.html](http://www.jamesmolloy.co.uk/tutorial_html/index.html)\n4. [http://techblog.lankes.org/tutorials/](http://techblog.lankes.org/tutorials/)\n5. [http://www.os.rwth-aachen.de](http://www.os.rwth-aachen.de)\n6. [http://www.noteblok.net/2014/06/14/bachelor](http://www.noteblok.net/2014/06/14/bachelor)\n7. [https://sourceware.org/newlib/](https://sourceware.org/newlib/)\n8. [http://rwth-os.github.io/eduOS/](http://rwth-os.github.io/eduOS/)\n9. [https://intermezzos.github.io](https://intermezzos.github.io)\n\n## License\n\nLicensed under either of\n\n * Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or http://www.apache.org/licenses/LICENSE-2.0)\n * MIT license ([LICENSE-MIT](LICENSE-MIT) or http://opensource.org/licenses/MIT)\n\nat your option.\n'