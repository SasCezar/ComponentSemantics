b'<img width="100" align="right" src="img/hermitcore_logo.png" />\n\n# RustyHermit - A Rust-based, lightweight unikernel\n\n[![Build Status](https://git.rwth-aachen.de/acs/public/hermitcore/libhermit-rs/badges/master/pipeline.svg)](https://git.rwth-aachen.de/acs/public/hermitcore/libhermit-rs/pipelines)\n[![Build Status](https://travis-ci.org/hermitcore/libhermit-rs.svg?branch=master)](https://travis-ci.org/hermitcore/libhermit-rs)\n[![License](https://img.shields.io/crates/l/rusty-hermit.svg)](https://img.shields.io/crates/l/rusty-hermit.svg)\n[![Slack Status](https://radiant-ridge-95061.herokuapp.com/badge.svg)](https://radiant-ridge-95061.herokuapp.com)\n\n[HermitCore]( http://www.hermitcore.org ) is a [unikernel](http://unikernel.org) targeting a scalable and predictable runtime for high-performance and cloud computing.\nUnikernel means, you bundle your application directly with the kernel library, so that it can run without any installed operating system.\nThis reduces overhead, therfore, interesting applications include virtual machines and high-performance computing.\n\nThe RustyHermit can run Rust applications, as well as C/C++/Go/Fortran applications.\nA tutorial on how to use these programming languages on top of RustyHermit is published at [https://github.com/hermitcore/hermit-playground](https://github.com/hermitcore/hermit-playground).\n\n## History/Background\n\nHermitCore is a research project at [RWTH-Aachen](https://www.rwth-aachen.de) and was originally written in C ([libhermit](https://github.com/hermitcore/libhermit)).\nWe decided to develop a new version of HermitCore in [Rust](https://www.rust-lang.org) and name it **RustyHermit**.\nThe ownership  model of Rust guarantees memory/thread-safety and enables us to eliminate many classes of bugs at compile-time.\nConsequently, the use of Rust for kernel development promises less vulnerabilities in comparsion to common programming languages.\n\nThe kernel and the integration into the Rust runtime is entirely written in Rust and does not use any C/C++ Code.\nWe extend the Rust toolchain so that the build process is similar to Rust\'s usual workflow.\nRust applications that do not bypass the Rust runtime and directly use OS services are able to run on RustyHermit without modifications.\n\n## Installation\n\nWe provide a Docker container *hermitcore-rs* for easy compilation of Rust applications into a unikernel.\nPlease pull the container and use *cargo* to cross compile the application.\nAs an example, the following commands create the test application *Hello World* for RustyHermit.\n\n```sh\ndocker pull hermitcore/rustyhermit:latest\ndocker run -v $PWD:/volume -e USER=$USER --rm -t hermitcore/rustyhermit cargo new hello_world --bin\ncd hello_world\ndocker run -v $PWD:/volume -e USER=$USER --rm -t hermitcore/rustyhermit cargo build --target x86_64-unknown-hermit\ncd -\n```\n\n## Running RustyHermit\n\n### Using uhyve as hypervisor\n\nRustyHermit can run within our own hypervisor [*uhyve*](https://github.com/hermitcore/uhyve) , which requires [KVM](https://www.linux-kvm.org/) to create a virtual machine.\nPlease install the hypervisor as follows:\n\n```sh\ncargo install uhyve\n```\n\nAfterwards, your are able to start RustyHermit applications within our hypervisor:\n\n```sh\nuhyve target/x86_64-unknown-hermit/debug/hello_world\n```\n\nThe maximum amount of memory can be configured via environment variables like in the following example\n\n```sh\nHERMIT_CPUS=4 HERMIT_MEM=8G uhyve target/x86_64-unknown-hermit/debug/hello_world\n```\n\nThe virtual machine is configured using the following environment variables\n\nVariable         | Default     | Description\n-----------------|-------------|--------------\n`HERMIT_CPUS`    | 1           | Number of cores the virtual machine may use\n`HERMIT_MEM`     | 512M        | Memory size of the virtual machine. The suffixes *M* and *G* can be used to specify a value in megabytes or gigabytes\n`HERMIT_VERBOSE` | 0           | Hypervisor prints kernel log messages stdout. ("1" enables log)\n\nFor instance, the following command starts the demo application in a virtual machine, which has 4 cores and 8GiB memory:\n\n```bash\n$ HERMIT_CPUS=4 HERMIT_MEM=8G ./proxy ../../hello_world/target/x86_64-unknown-hermit/debug/hello_world\n```\n\nMore details can be found in the uhyve README.\n\n### Using Qemu as hypervisor\n\nIt is also possible to run RustHermit within [Qemu](https://www.qemu.org).\nIn this case, a loader is required to boot the application.\nThis loader is part of the repository and can be build with [xbuid](https://github.com/rust-osdev/cargo-xbuild) as follows.\n\n```bash\n$ cd loader\n$ cargo xbuild --target x86_64-unknown-hermit-loader.json\n```\n\nAfterwards, the loader is stored in `target/x86_64-unknown-hermit-loader/debug/` as `hermit-loader`.\nAfterwards, the unikernel application `app` can be booted with following command:\n\n```bash\n$ qemu-system-x86_64 -display none -smp 1 -m 64M -serial stdio  -kernel path_to_loader/hermit-loader -initrd path_to_app/app -cpu qemu64,apic,fsgsbase,rdtscp,xsave,fxsr\n```\n\nIt is important to enable the processor features _fsgsbase_ and _rdtscp_ because it is a prerequisite to boot RustyHermit.\n\n## Use RustyHermit for C/C++, Go, and Fortran applications\n\nThis kernel can still be used with C/C++, Go, and Fortran applications.\nA tutorial on how to do this is available at [https://github.com/hermitcore/hermit-playground](https://github.com/hermitcore/hermit-playground).\n\n## Missing features\n\n* Multikernel support (might be comming)\n* Virtio support (comming soon)\n* Network suppot (comming soon)\n\n## Credits\n\nRustyHermit is derived from following tutorials and software distributions:\n\n1. Philipp Oppermann\'s [excellent series of blog posts][opp].\n2. Erik Kidd\'s [toyos-rs][kidd], which is an extension of Philipp Opermann\'s kernel.\n3. The Rust-based teaching operating system [eduOS-rs][eduos].\n\n[opp]: http://blog.phil-opp.com/\n[kidd]: http://www.randomhacks.net/bare-metal-rust/\n[eduos]: http://rwth-os.github.io/eduOS-rs/\n\nHermitCore\'s Emoji is provided for free by [EmojiOne](https://www.gfxmag.com/crab-emoji-vector-icon/).\n\n## License\n\nLicensed under either of\n\n* Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or http://www.apache.org/licenses/LICENSE-2.0)\n* MIT license ([LICENSE-MIT](LICENSE-MIT) or http://opensource.org/licenses/MIT)\n\nat your option.\n\n## Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n\nRustyHermit is being developed on [GitHub](https://github.com/hermitcore/libhermit-rs).\nCreate your own fork, send us a pull request, and chat with us on [Slack](https://radiant-ridge-95061.herokuapp.com)\n'