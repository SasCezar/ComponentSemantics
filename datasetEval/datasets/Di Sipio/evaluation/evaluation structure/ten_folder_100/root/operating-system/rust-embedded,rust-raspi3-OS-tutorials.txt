b"# Operating System development tutorials in Rust on the Raspberry Pi\n\n![](https://github.com/rust-embedded/rust-raspi3-OS-tutorials/workflows/BSP-RPi3/badge.svg) ![](https://github.com/rust-embedded/rust-raspi3-OS-tutorials/workflows/BSP-RPi4/badge.svg)\n\n## Notice\n\n**This is a work-in-progress rewrite, started on September 2019.** You can find the original version of the tutorials\n[here](https://github.com/rust-embedded/rust-raspi3-OS-tutorials/tree/original_version).\n\nSome general info:\n- Tutorials that existed before the rewrite have a full-fledged tutorial\n  text, while most new tutorials will only contain a  short`tl;dr` section for now.\n  I plan to provide full-fledged text for all tutorials once the kernel has reached\n  a certain milestone.\n- The code written in these tutorials supports and runs on the **Raspberry Pi\n  3** and the **Raspberry Pi 4**.\n  - Tutorials 1 till 5 are groundwork code which only makes sense to run on\n    QEMU.\n  - Starting with [tutorial 6](06_drivers_gpio_uart), you can load and run the\n    kernel on Raspberrys and observe output over UART.\n- For editing, I recommend [Visual Studio Code] with the [Rust Language Server]\n  extension.\n- Check out the `make doc` command to browse the code with HTML goodness.\n\n_Cheers,\n[Andre](https://github.com/andre-richter)_\n\n\n[Visual Studio Code]: https://code.visualstudio.com\n[Rust Language Server]: https://github.com/rust-lang/rls\n\n## Introduction\n\nThe target audience is hobby OS developers who are new to ARM's 64 bit [ARMv8-A\narchitecture](https://developer.arm.com/products/architecture/cpu-architecture/a-profile/docs).\nThe tutorials will give a guided, step-by-step tour of how to write a\n[monolithic] Operating System `kernel` for an `embedded system` from scratch.\nThey cover implementation of common Operating Systems tasks, like writing to\nthe serial console, setting up virtual memory and exception handling. All while\nleveraging Rust's unique features to provide for safety and speed.\n\n[monolithic]: https://en.wikipedia.org/wiki/Monolithic_kernel\n\nWhile the Raspberry Pi 3 and 4 are the main target boards, the code is written\nin a modular fashion which allows for easy porting to other CPU architectures\nand/or boards.\n\nI would really love if someone takes a shot at a **RISC-V** implementation.\n\n## Ease of use\n\nThis repo tries to put a focus on user friendliness. Therefore, I made some\nefforts to eliminate the biggest painpoint in embedded development: Toolchain\nhassles.\n\nUsers eager to try the code should not be bothered with complicated toolchain\ninstallation/compilation steps. This is achieved by trying to use the standard\nRust toolchain as much as possible, and bridge existing gaps with Docker\ncontainers. [Please install Docker for your\ndistro](https://docs.docker.com/install/).\n\nThe setup consists of the following components:\n\n- Compiler, linker and binutils are used from Rust nightly.\n- Additional OS Dev tools, like QEMU, are pre-packaged into [this\n  container](docker/rustembedded-osdev-utils).\n\nIf you want to know more about docker and peek at the the containers used in\nthese tutorials, please refer to the repository's docker folder.\n\n## Prerequisites\n\nBefore you can start, you'll need a suitable Rust toolchain.\n\n```bash\ncurl https://sh.rustup.rs -sSf  \\\n    |                           \\\n    sh -s --                    \\\n    --default-toolchain nightly \\\n    --component rust-src llvm-tools-preview clippy rustfmt rls rust-analysis\n\ncargo install cargo-xbuild cargo-binutils\n```\n\n## USB Serial\n\nIt is highly recommended to get a USB serial debug cable. It also powers the\nRaspberry once you connect it, so you don't need extra power over the dedicated\npower-USB. I use a bunch of\n[these](https://www.amazon.de/dp/B0757FQ5CX/ref=cm_sw_r_tw_dp_U_x_ozGRDbVTJAG4Q).\n\nYou connect it to the GPIO pins 14/15 as shown beyond.\n\n[Tutorial 6](06_drivers_gpio_uart) is the first where you can use it. Go to the\nREADME there for instructions on how to prepare the SD card to run your\nself-made kernels from it.\n\n![UART wiring diagram](doc/wiring.png)\n\n## Acknowledgements\n\nThe original version of the tutorials started out as a fork of [Zoltan\nBaldaszti](https://github.com/bztsrc)'s awesome [tutorials on bare metal\nprogramming on RPi3](https://github.com/bztsrc/raspi3-tutorial) in `C`. Thanks\nfor giving me a head start!\n\n## License\n\nLicensed under either of\n\n * Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or http://www.apache.org/licenses/LICENSE-2.0)\n * MIT license ([LICENSE-MIT](LICENSE-MIT) or http://opensource.org/licenses/MIT)\n\nat your option.\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in the work by you, as defined in the Apache-2.0 license, shall be\ndual licensed as above, without any additional terms or conditions.\n"