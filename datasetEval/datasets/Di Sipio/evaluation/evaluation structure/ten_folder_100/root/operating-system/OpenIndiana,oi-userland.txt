b'\n\t    Getting started with the Userland Consolidation\n\n\nGetting Started\n\n    This README provides a very brief overview of the gate, how to retrieve\n    a copy, and how to build it.  Detailed documentation about the Userland\n    gate can be found in the \'doc\' directory.  Questions or comments about\n    the gate can be addressed to oi-dev@openindiana.org.\n\nOverview\n\n    The Userland consolidation maintains a Git repository at\n\n\thttps://github.com/OpenIndiana/oi-userland\n\n    This gate contains build recipies, patches, IPS manifests, etc. necessary\n    to download, prep, build, test, package and publish open source software.\n    The build infrastructure is similiar to that of the SFW consolidation in\n    that it makes use of herarchical Makefiles which provide dependency and\n    recipe information for building the components.  In order to build the\n    contents of the Userland gate, you need to clone it.  Since you are\n    reading this, you probably already have.\n\nGetting the Bits\n\n    As mentioned, the gate is stored in a Git repository.  In order to\n    build or develop in the gate, you will need to clone it.  You can do so\n    with the following command\n\n      $ git clone https://github.com/OpenIndiana/oi-userland.git /scratch/clone\n\n    This will create a replica of the various pieces that are checked into the\n    source code management system, but it does not retrieve the community\n    source archives associated with the gate content.  To download the\n    community source associated with your cloned workspace, you will need to\n    execute the following:\n\n      $ cd /scratch/clone/components\n      $ gmake download\n\n    This will use GNU make and the downloading tool in the gate to walk through\n    all of the component directories downloading and validating the community\n    source archives from the gate machine or their canonical source repository.\n\n    There are two variation to this that you may find interesting.  First, you\n    can cause gmake(1) to perform it\'s work in parallel by adding \'-j (jobs)\'\n    to the command line.  Second, if you are only interested in working on a\n    particular component, you can change directories to that component\'s\n    directory and use \'gmake download\' from that to only get it\'s source\n    archive.\n\n    Also, when you start to work with a new archive file - update the source\n    version in an existing recipe component, or start a new one from scratch -\n    you can use \'gmake fetch\' to download the archive(s) defined in the new\n    recipe, calculate the checksums and *NOT* remove the archive because its\n    actual checksum does not match the value recorded in the recipe Makefile\n    (if any) so the download is deemed corrupted while you know it is not.\n    There is also a side-effect: by framework recipe, a file in the download\n    location only depends on the component recipe Makefile. So once an archive\n    is "fetched" (downloaded and not removed), it will not be re-verified -\n    the downloading script is just not called. This is a moderate problem,\n    since the "fetch" ability is a helper for recipe-makers doing initial\n    archive downloads in a certain situation, to save some traffic and time\n    on their workstations. You can still remove files fetched by a recipe\n    using \'gmake clobber\'.\n\nBuilding the Bits\n\n    You can build individual components or the contents of the entire gate.\n\n  Integration with ccache to speed up re-builds\n\n    If you happen to build the same sources several times (e.g. iterating\n    attempts to produce a working recipe, or maintaining an automated build\n    server), you can benefit from \'ccache\' integration in \'oi-userland\'.\n    Note that this feature is currently experimental and off by default.\n\n    The \'ccache\' component is available as part of the project repository.\n    Once you have the resulting package installed, you can pass the \'make\'\n    argument or environment variable \'ENABLE_CCACHE=true\' to wrap the GNU\n    compiler invocations with the caching program - so that the same inputs\n    would re-produce same outputs quickly.\n\n    You can pre-set this variable in your user account \'~/.profile\' like this:\n\n       ### To speed up OI-userland re-builds\n       ENABLE_CCACHE=true\n       export ENABLE_CCACHE\n\n    Note: be wary of ccache\'s own CCACHE_DISABLE environment variable: any\n    value (empty, "false" etc.) is considered a "true" setting for ccache\n    booleans (and so disables the program, falling through to real compiler).\n\n  Keeping all sources in one place\n\n    The Userland consolidation tools automate download of required source\n    tarballs.  By older default they were kept in each component\'s directory,\n    but you could centralize it by using the \'USERLAND_ARCHIVES\' variable.\n    Recently the defaults change to pre-initialize \'USERLAND_ARCHIVES\' to\n    point into \'$(WS_TOP)/archives/\' unless customized by the caller - for\n    example, to share the common download area between multiple workspaces.\n\n    You can pre-set this variable in your user account \'~/.profile\' like\n    this (and note that the trailing slash is required):\n\n       ### For oi-userland source files\n       USERLAND_ARCHIVES="$HOME/Downloads/"\n       export USERLAND_ARCHIVES\n\n    See also the \'make-rules/shared-macros.mk\' for \'INTERNAL_ARCHIVE_MIRROR\',\n    \'EXTERNAL_ARCHIVE_MIRROR\' and envvar \'DOWNLOAD_SEARCH_PATH\' to get some\n    ideas about using HTTP mirrors to e.g. reduce network load and lags if you\n    can access a country- or organization-local mirror of opensource projects.\n\n  Component build\n\n    If you are only working on a single component, you can just build it using\n    following:\n\n      setup the workspace for building components\n\n        $ cd (your-workspace)/components ; gmake setup\n\n      build the individual component\n\n        $ cd (component-dir) ; gmake publish\n\n  Complete Top Down build\n\n    Complete top down builds are also possible by simply running\n\n      $ cd (your-workspace)/components\n      $ gmake publish\n\n    The \'publish\' target will build each component and publish it to the\n    workspace IPS repo.\n\n    Tools to help facilitate build zone creation will be integrated\n    shortly.  If the zone you create to build your workspace in does not have\n    networking enabled, you can pre-download any community source archives into\n    your workspace from the global with:\n\n      $ cd (your-workspace)/components\n      $ gmake download\n\n    You can add parallelism to your builds by adding \'-j (jobs)\' to your gmake\n    command line arguments.  Note that if the host is constrained on resources\n    or the component source Makefiles are poorly thought out, parallel builds\n    can fail - in this case subsequent single-job (sequential) builds should\n    succeed to complete the missing build products.\n\n    It is worth noting that the OpenIndiana Hipster build server uses the\n    \'COMPONENT_BUILD_ARGS=-j4\' option by default for moderate parallelization\n    of its builds.\n\n    The gate should only incrementally build what it needs to based on what has\n    changed since you last built it.\n'