b'chino-os\n===\n[English](README.md) | [\xe4\xb8\xad\xe6\x96\x87\xe6\x96\x87\xe6\xa1\xa3](README-zh.md)\n\n[![travis-ci](https://travis-ci.org/chino-os/chino-os.svg?branch=master)](https://travis-ci.org/chino-os/chino-os) [![appveyor](https://ci.appveyor.com/api/projects/status/ff0xqvr439d0780v?svg=true)](https://ci.appveyor.com/project/sunnycase/chino-os)\n\n![Screenshots](screenshots/2.png)\n\n## Introduction\n\n`chino` is a real time operating system written in C++, which is designed for the [IoT](https://en.wikipedia.org/wiki/Internet_of_things).\n\n## Features\n\n- Multitasking (6 levels priority, round robin scheduling)\n- Thread synchronization (Mutex, Recurisve Mutex, Semaphore, Event)\n- Inter process communication (Mailslot)\n- Unified driver model (see [Driver Framework](#driver-framework))\n- Network (LwIP based Socket API)\n- File system (FATFS based)\n- Audio (Simple playback / record API)\n\n## Supported Archs & Boards\n\nArchitecture  | Board                   | Firmware Type |\n------------- | ------------------------|----------------\nwin-x86_64    | generic/win32-simulator | exe           |\nx86_64\t\t  | generic/pc\t\t\t    | iso           |\ncortex-m3\t  | generic/stm32f103rc     | hex           |\n\n## Driver Framework\n\nChino predefined a set of driver interfaces to provide a unified API layer to application developers.\n\n| Class         | Subtype         | Example driver  |\n| ------------- | --------------- | -----------------\n| PIC           |                 | cortex-m3, nvic |\n| IO / Bus      | GPIO            | stm32f10x, gpio |\n| -             | I\xc2\xb2C\t\t\t\t| stm32f10x, i2c  |\n| -             | SPI             | stm32f10x, spi  |\n| -             | Serial          | stm32f10x, uart |\n| -             | SDIO            | stm32f10x, sdio |\n| Storage       | EEPROM          | AT24C02         |\n| -             | Flash           | GD25Q128        |\n| -             | SD Storage      | SD V2.0 Card    |\n| Display       | TFT LCD         | ILI9486L        |\n| Audio         | Adapter         | VS1053b         |\n| Network       | Ethernet        | ENC28J60        |\n| Sensor        | Accelerometer   | ADXL345         |\n\n## Build\n\n### For Win32-Simulator\n\n1. Rename `CMakeSettings-template.json` to `CMakeSettings.json`.\n2. Open root directory in Visual Studio 2017 or higher.\n3. Generate CMake cache and build `kernel.exe`.\n\n### For Others\n\n1. Downloads [chino-gnu-toolchain-preview3.tar.gz](https://github.com/chino-os/chino-gnu-toolchain/releases/download/preview3/chino-gnu-toolchain-preview3.tar.gz) and extracts to `/opt/` directory\n```bash\nwget https://github.com/chino-os/chino-gnu-toolchain/releases/download/preview3/chino-gnu-toolchain-preview3.tar.gz\nsudo tar xvzf chino-gnu-toolchain-preview3.tar.gz /opt/\n```\n2. Installs dependencies\n```bash\ngit clone git://git.code.sf.net/p/gnu-efi/code gnu-efi-code\ncd gnu-efi-code\nmake && sudo make install\nsudo apt install device-tree-compiler xorriso cmake -y\n```\n3. Clones source and builds\n```bash\ngit clone https://github.com/chino-os/chino-os.git\nmkdir build && cd build\n../build.sh <arch> <board>\nmake firmware\n```\n\n## Run\n\n### For exe\n1. Just run `kernel.exe` (build_i/src/kernel/Debug/kernel.exe).\n\n### For iso firmware\n1. Downloads [VirtualBox](https://www.virtualbox.org/wiki/Downloads) and runs.\n2. `File` -> `Import Application`, imports `Chino.ova` which is in `chino-os/vms/` directory.\n3. `Settings` -> `storage`, chooses the `empty` device and imports the `firmware.iso` just generated in the `build` directory.\n4. `Start`.\n\n### For hex firmware\n1. Download `kernel.hex` to your board.\n2. Reset your board.\n\n## [License (MIT)](https://raw.githubusercontent.com/chino-os/chino-os/master/LICENSE)\n\n\tMIT License\n\n\tCopyright (c) 2018 chino-os\n\n\tPermission is hereby granted, free of charge, to any person obtaining a copy\n\tof this software and associated documentation files (the "Software"), to deal\n\tin the Software without restriction, including without limitation the rights\n\tto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\tcopies of the Software, and to permit persons to whom the Software is\n\tfurnished to do so, subject to the following conditions:\n\n\tThe above copyright notice and this permission notice shall be included in all\n\tcopies or substantial portions of the Software.\n\n\tTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\tIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\tFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\tAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\tLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\tOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n\tSOFTWARE.\n'