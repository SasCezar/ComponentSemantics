b'<h1 align="center"> Manticore Operating System</h1>\n\n<p align="center">\n<a href="https://circleci.com/gh/manticoreos/manticore">\n  <img src="https://circleci.com/gh/manticoreos/manticore/tree/master.svg?style=svg" alt="Build Status">\n</a>\n<img src="https://img.shields.io/badge/license-MIT%2FApache--2.0-blue.svg" alt="MIT/Apache 2.0 License">\n<a href="https://gitter.im/manticoreos/community?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge">\n  <img src="https://badges.gitter.im/manticoreos/community.svg" alt="Gitter">\n</a>\n</p>\n\n<p align="center">\n  A research operating system to explore <a href="http://penberg.org/parakernel-hotos19.pdf"><i>parakernels</i></a>.\n</p>\n\n## Table of Contents\n\n* [Introduction](#introduction)\n* [Features](#features)\n* [Getting Started](#getting-started)\n  * [Building from Sources](#building-from-sources)\n  * [Supported Hardware](#supported-hardware)\n  * [Code Structure](#code-structure)\n* [Documentation](#documentation)\n* [Publications](#publications)\n* [Contributing](#contributing)\n* [Authors](#authors)\n* [License](#license)\n\n## Introduction\n\nManticore is a research operating system, written in Rust, with the aim of exploring the [parakernel](http://penberg.org/parakernel-hotos19.pdf) OS architecture.\n\nThe OS is increasingly a bottleneck for server applications that want to take maximum advantage of the hardware.\nMany traditional kernel interfaces (such as in POSIX) were designed when I/O was significantly slower than the CPU.\nHowever, today I/O is getting faster, but single-threaded CPU performance has stagnated.\nFor example, a 40 GbE NIC can receive a cache-line sized packet faster than the CPU can access its last-level cache (LLC), which makes it tricky for an OS to keep up with packets arriving from the network.\nSimilarly, non-volatile memory (NVM) access speed is getting closer to DRAM speeds, which challenges OS abstractions for storage.\n\nTo address this OS bottleneck, server applications are increasingly adopting kernel-bypass techniques.\nFor example, the [Seastar framework](http://seastar.io/) is an OS implemented in userspace, which implements its own CPU and I/O scheduler, and bypasses the Linux kernel as much as it can.\nParakernel is an OS architecture that eliminates many OS abstractions (similar to _exokernels_) and partitions hardware resources (similar to _multikernels_) to facilitate high-performance server application with increased application-level parallelism and predictable tail latency.\n\n## Features\n\n * Process scheduling (no kernel threads)\n * Hardware resource partitioning\n * Virtual memory (no demand paging)\n * Kernel-bypass by default\n * Non-blocking OS system calls\n * ELF executable support\n\n## Getting Started\n\n### Building from Sources\n\nFirst, install the toolchain, which includes [`rustup`](https://rustup.rs/), Rust, and other dependencies:\n\n```\n./scripts/install-toolchain\n```\n\nNow that you have the toolchain installed, you can build Manticore with:\n\n```\nmake\n```\n\nThe build system generates a `kernel.iso` image, which you can launch under QEMU with:\n\n```\n$ ./scripts/run kernel.iso\n```\n\nFor more information, see [Manticore Hacker\'s Guide](HACKING.md).\n\n### Running Example Applications\n\nOnce `kernel.elf` is built, you can build an user space echo server with:\n\n```\n$ make -C usr/echod\n```\n\nand launch it under QEMU with:\n\n```\n$ ./scripts/run usr/echod/echod.iso\n```\n\n### Supported Hardware\n\n * Legacy-free PC with a 64-bit x86 processor\n   * xAPIC2 interrupt controller\n   * MSI-X interrupt delivery\n   * PCIe 3.0 bus\n * VirtIO network device\n\n### Code Structure\n\nManticore\'s code is structured into different directories as follows:\n\n* [`arch`](./arch): machine architecture specific code\n* [`drivers`](./drivers): device drivers\n  * [`virtio`](./drivers/virtio): VirtIO device drivers\n  * [`pci`](./drivers/pci): PCIe device drivers\n* [`kernel`](./kernel): kernel services (e.g., process scheduling and system calls)\n* [`lib`](./lib): support libraries\n* [`mm`](./mm): memory management (e.g., virtual memory manager and kernel dynamic memory allocator)\n* [`usr`](./usr): user space libraries and example applications\n  \n## Documentation\n\n* [Manticore Hacker\'s Guide](HACKING.md)\n\n## Publications\n\n* Pekka Enberg, Ashwin Rao, and Sasu Tarkoma. 2019. [I/O Is Faster Than the CPU \xe2\x80\x93 Let\xe2\x80\x99s Partition Resources and Eliminate (Most) OS Abstractions](http://penberg.org/parakernel-hotos19.pdf). HotOS \'19\n\n## Contributing\n\nBug reports and pull requests are welcome!\n\nPlease note that this project is released with a Contributor Code of Conduct. By participating in this project you agree to abide by its terms. See [Code of Coduct](code-of-conduct.md) for details.\n\n## Authors\n\n* [Pekka Enberg](https://penberg.org)\n\nSee also the list of [contributors](https://github.com/penberg/manticore/contributors) who contributed to this project.\n\n## License\n\nLicensed under either of these:\n\n * Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or https://www.apache.org/licenses/LICENSE-2.0)\n * MIT license ([LICENSE-MIT](LICENSE-MIT) or https://opensource.org/licenses/MIT)\n   \nUnless you explicitly state otherwise, any contribution you intentionally submit for inclusion in the work, as defined in the Apache-2.0 license, shall be dual-licensed as above, without any additional terms or conditions.\n'