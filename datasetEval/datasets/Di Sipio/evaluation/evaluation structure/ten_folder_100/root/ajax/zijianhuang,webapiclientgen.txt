b'Strongly Typed Client API Generators generate strongly typed client API in C# codes and TypeScript codes. You may then provide or publish either the generated source codes or the compiled client API libraries to other developers for developing client programs.\n\nThis project delivers these products:\n1. [Code generator for strongly typed client API in C#](https://github.com/zijianhuang/webapiclientgen/wiki/Documentation) supporting .NET Framework, .NET Core and Xamarin.Forms. \n1. [Code generator for strongly typed client API in TypeScript](https://github.com/zijianhuang/webapiclientgen/wiki/Code-generator-for-strongly-typed-client-API-in-TypeScript) for jQuery, Angular 2, Aurelia and Axios.\n1. [TypeScript CodeDOM](https://github.com/zijianhuang/webapiclientgen/wiki/TypeScript-CodeDOM), a CodeDOM component for TypeScript, derived from CodeDOM of .NET Framework.\n1. [POCO2TS.exe](https://github.com/zijianhuang/webapiclientgen/wiki/POCO2TS.exe), a command line program that generates TypeScript interfaces from POCO classes.\n1. [Fonlow.Poco2Ts](https://github.com/zijianhuang/webapiclientgen/wiki/Fonlow.Poco2Ts), a component that generates TypeScript interfaces from POCO classes.\n\n\n![Packages](/Doc/WebApiClientGen.PNG)\n\n**Hints:**\n\n* The packages could be used independently as long as the usages conform to the dependencies.\n\n# Key Features\n1. Client API codes generated are directly mapped from the Web API controller methods, .NET primitive types and POCO classes. This is similar to what svcutil.exe in WCF has offered.\n1. Doc comments of controller methods and POCO classes are copied. \n\n# Key Benefits\n\n1. WebApiClientGen is seamlessly integrated with ASP.NET Web API with very little steps/overheads to setup, maintain and synchronize between Web API and client APIs, during RAD or Agile Software Development.\n1. Support all .NET primitive types including decimal.\n1. Support DataTime, DataTimeOffset, Array, Tuple, Dynamic Object, Dictionary and KeyValuePair\n1. Strongly typed generated codes are subject to design time type checking and compile time type checking.\n1. Provide high level of abstraction, shielding application developers from repetitive technical details of RESTful practices and traditional AJAX calls.  \n1. Rich meta info including doc comments make IDE intellisense more helpful, so application developers have less need of reading separated API documents.\n\n\n# Examples\n\n1. [POCO classes](https://github.com/zijianhuang/webapiclientgen/blob/master/DemoWebApi.DemoData/Entities.cs)\n1. [Web API](https://github.com/zijianhuang/webapiclientgen/blob/master/DemoWebApi/Controllers/EntitiesController.cs)\n1. [Generated client API C# codes](https://github.com/zijianhuang/webapiclientgen/blob/master/DemoWebApi.ClientApi/WebApiClientAuto.cs)\n1. [Client codes using the generated library in C#](https://github.com/zijianhuang/webapiclientgen/blob/master/Tests/IntegrationTests/EntitiesApiIntegration.cs)\n1. [Generated client data models and API in TypeScript for jQuery](https://github.com/zijianhuang/webapiclientgen/blob/master/DemoWebApi/Scripts/ClientApi/WebApiClientAuto.ts), [for Angular 2](https://github.com/zijianhuang/webapiclientgen/tree/master/DemoAngular2/clientapi/WebApiNG2ClientAuto.ts), [for Aurelia](https://github.com/zijianhuang/webapiclientgen/blob/master/aurelia/src/clientapi/WebApiAureliaClientAuto.ts) and [for Axios](https://github.com/zijianhuang/webapiclientgen/blob/master/axios/src/clientapi/WebApiAxiosClientAuto.ts)\n1. [Client codes using the generated library in TypeScript](https://github.com/zijianhuang/webapiclientgen/blob/master/DemoWebApi/Scripts/tests/demo.tests.ts)\n\n**Remarks:**\n1. JavaScript codes compiled from generated TypeScript codes could be used in JS applications, however, obviously no type info will be available, while application programmers may still enjoy intellisense and abstraction from AJAX details.\n1. React and Vue.js applications typically use Axios for HTTP requests. Currently [babel](https://github.com/babel/babel) does not support namespaces. So you may not do React TSX programming with generated TypeScript codes. However, this may be changed in near future because of [this pull request](https://github.com/babel/babel/pull/9785).\n\n# Downloads\n\n## For .NET Framework\n1. [Strongly Typed Client API Generators for ASP.NET Web API](https://www.nuget.org/packages/Fonlow.WebApiClientGen/)\n1. [TypeScript CodeDOM](https://www.nuget.org/packages/Fonlow.TypeScriptCodeDOM)\n1. [POCO2TS.exe](https://github.com/zijianhuang/webapiclientgen/wiki/POCO2TS.zip)\n1. [Fonlow.Poco2TS](https://www.nuget.org/packages/Fonlow.Poco2Ts) \n\n### Plugins for TypeScript/JavaScript Frameworks/Libraries\n\n1. [jQuery](https://www.nuget.org/packages/Fonlow.WebApiClientGen.jQuery/) and [HttpClient helper library](https://github.com/zijianhuang/webapiclientgen/blob/master/DemoWebApi/Scripts/ClientApi/HttpClient.ts)\n1. [Angular 6+](https://www.nuget.org/packages/Fonlow.WebApiClientGen.NG2/)\n1. [AXIOS](https://www.nuget.org/packages/Fonlow.WebApiClientGen.Axios/)\n1. [Aurelia](https://www.nuget.org/packages/Fonlow.WebApiClientGen.Aurelia/)\n\n## For .NET Core\n1. [Strongly Typed Client API Generators for ASP.NET Core Web API](https://www.nuget.org/packages/Fonlow.WebApiClientGenCore/).\n1. [TypeScript CodeDOM](https://www.nuget.org/packages/Fonlow.TypeScriptCodeDOMCore)\n1. [Fonlow.Poco2TS](https://www.nuget.org/packages/Fonlow.Poco2TsCore) \n\n### Plugins for TypeScript/JavaScript Frameworks/Libraries\n\n1. [jQuery](https://www.nuget.org/packages/Fonlow.WebApiClientGenCore.jQuery/) and [HttpClient helper library](https://github.com/zijianhuang/webapiclientgen/blob/master/DemoWebApi/Scripts/ClientApi/HttpClient.ts)\n1. [Angular 6+](https://www.nuget.org/packages/Fonlow.WebApiClientGenCore.NG2/)\n1. [AXIOS](https://www.nuget.org/packages/Fonlow.WebApiClientGenCore.Axios/)\n1. [Aurelia](https://www.nuget.org/packages/Fonlow.WebApiClientGenCore.Aurelia/)\n\n## Migration from WebApiClientGen v2.8 to v3.0\n\nWebApiClientGen v2.8 has built-in supports for jQuery, Angular 2+, AXIOS and Aurelia. V3.0 has the supports being moved to plugins. Please check [WIKI](https://github.com/zijianhuang/webapiclientgen/wiki/Migration-28-30) for more details.\n\n# Concepts\n1. Web API vendors / developers should provide client API libraries to developers of client programs, as Google and Amazon etc. would do in order to make the RESTful Web API reach wider consumers (internal and external) efficiently.\n1. To client developers, classic function prototypes like `ReturnType DoSomething(Type1 t1, Type2 t2 ...) ` is the API function, and the rest is the technical implementation details of transportations: TCP/IP, HTTP, SOAP, resource-oriented, CRUD-based URIs, RESTful, XML and JSON etc. The function prototype and a piece of API document should be good enough for calling the API function.\n1. The better you have separation of concerns in your Web API design, the more you will benefit from the components of this project in order to deliver business values sooner, with less handcrafted codes , less repetitive tasks and less chances of human mistakes.\n\n# Prerequisites\n\n**Server side:**\n1. .NET Framework 4.5.2, or .NET Core 2.0/3.0\n1. ASP.NET Web API 2.2, or ASP.NET Core 2.0/3.0\n\n**Remarks:** \n\n* .NET Core 2.x had dependency on Newtonsoft.JSON, while .NET Core 3.0 had been decoupled from Neewtonsoft.JSON and the default serializer is working well in most scenarios except for Tuple, 2D array and anonymous object etc. If you would support these data types or would keep 100% compitability with the serialization of NewtonSoft.JSON, you should explicitly include package `Microsoft.AspNetCore.Mvc.NewtonsoftJson` and add add `AddNewtonsoftJson()` in `Startup.cs`.\n* The edition for .NET Core 2.2 is working well with ASP.NET Core 3.0 Web API. \n* WebApiClientGen v3.0 supports .NET Framework 4.6.2. If your Web API projects are still with .NET Framework 4.5.2, please use previous releases.\n* WebApiClientGenCore v3.0 supports .NET Core 3.0. If your .NET Core API projects are still with .NET Core 2.0/2.1/2.2, please previous releases.\n\n\n**.NET client side:**\n1. .NET Framework 4.5.2, or Universal Windows, or Mono.Android, or Xamarin.iOS, or .NET Core 2.0/2.1\n1. ASP.NET Web API 2.2 Client Libraries\n1. Json.NET of Newtonsoft [for Content-Type application/json](http://www.asp.net/web-api/overview/formats-and-model-binding/content-negotiation)\n1. Microsoft Build Tools 2015\n\n**TypeScript client side:**\n1. TypeScript compiler\n1. jQuery\n1. Angular 2-8\n1. Aurelia\n1. Axios \n\n\n\nFor more details, please check [WIKI](https://github.com/zijianhuang/webapiclientgen/wiki), and codeproject.com articles at:\n1. [Generate C# .NET Client API for ASP.NET Web API](https://www.codeproject.com/Articles/1074039/Generate-Csharp-Client-API-for-ASP-NET-Web-API)\n1. [Generate TypeScript Client API for ASP.NET Web API](https://www.codeproject.com/articles/1053601/generate-typescript-client-api-for-asp-net-web-api)\n1. [ASP.NET Web API, Angular2, TypeScript and WebApiClientGen](https://www.codeproject.com/Articles/1165571/ASP-NET-Web-API-Angular-TypeScript-and-WebApiClie)\n1. [Generate C# Client API for ASP.NET Core Web API](https://www.codeproject.com/Articles/1243908/Generate-Csharp-Client-API-for-ASP-NET-Core-Web-AP)\n\n# Demo Applications\n\nThe Demo applications in this repository are mainly for testing WebApiClientGen during development. And there are other demo applications in the following repositories, demostrating how real world applications could utilize WebApiClientGen:\n\n1. [WebApiClientGen Examples](https://github.com/zijianhuang/webapiclientgenexamples)\n2. [.NET Core Demo](https://github.com/zijianhuang/DemoCoreWeb)\n\nThese demo applications are actively maintained and kept up-to-date with the latest frameworks. If you are still staying with some older frameworks like Angular 4 or 5 or .NET Core 2.0, you may navigate to respective tags of the repositories and checkout.\n'