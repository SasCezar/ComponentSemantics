b'[![Build Status](https://dev.azure.com/nabinked/NToastNotify/_apis/build/status/nabinked.NToastNotify?branchName=master)](https://dev.azure.com/nabinked/NToastNotify/_build/latest?definitionId=19&branchName=master)\n\n# Features\n - ##### Server side toast notification rendering.\n - ##### Toast notification on AJAX calls. XMLHTTPRequests - Full Support. fetch API - Partial Support (See sample).\n - ##### Supports Feature folder project structure.\n - ##### Supports multiple client libraries: toastr.js & noty.js. Can easily be extended to support more.\n \n # DEMOs\n- ## [Noty](http://noty.azurewebsites.net/) | [Source](/samples/Noty/) \n- ## [Toastr](http://toastr.azurewebsites.net/) | [Source](/samples/Toastr/)\n\n# Get Started\n## 1. Install From [Nuget](https://www.nuget.org/packages/NToastNotify/)\n\nVisual Studio Nuget Package Manager - `Install-Package NToastNotify`\n\ndotnet CLI - `dotnet add package NToastNotify`\n\n## 2. Add NtoastNotify to the ASP.NET Core Services. Use the extension method on `IMVCBuilder` or `IMVCCoreBuilder`\n- ### For Toastr.js [**Note: toastr library depends on jQuery**]\n    ```C#\n    using NToastNotify.Libraries;\n\n\n    services.AddMvc().AddNToastNotifyToastr(new ToastrOptions()\n    {\n                ProgressBar = false,\n                PositionClass = ToastPositions.BottomCenter\n    });\n\n    //Or simply go \n    services.AddMvc().AddNToastNotifyToastr();\n    ```\n\n- ### For Noty.js\n    ```C#\n    using NToastNotify.Libraries;\n\n    services.AddMvc().AddFeatureFolders().AddNToastNotifyNoty(new NotyOptions {\n                    ProgressBar = true,\n                    Timeout = 5000,\n                    Theme = "mint"\n                });\n\n    //Or Simply go\n    services.AddMvc().AddNToastNotifyNoty();\n    ```\n**Note: Make sure you have the necessary using statements.**\n\nThe ToastrOption parameter acts as the global options for the toast library. If no options are  provided the global settings will be the default toastr options.\n\n## 3. Add the middleware\n```c#\n public void Configure(IApplicationBuilder app, IHostingEnvironment env)\n {\n        //NOTE this line must be above .UseMvc() line.\n        app.UseNToastNotify();\n        \n        app.UseMvc(routes =>\n            {\n                routes.MapRoute(\n                    name: "default",\n                    template: "{controller=Home}/{action=Index}/{id?}");\n            });\n }\n```\n\n## 4. Add the following line in your html file. Preferably in your Layout Page.\n```c#\n@await Component.InvokeAsync("NToastNotify")\n```\nThe above line renders the View necessary for the view component. Although you can place this line anywhere inside your ```head``` or ```body``` tag, It is recommended that you place this line at the end before the closing ```body``` tag. \n\n## 5. Add your toast messages.\n\n### using toastr\n```C#\npublic class HomeController : Controller\n    {\n        private readonly IToastNotification _toastNotification;\n\n        public HomeController(IToastNotification toastNotification)\n        {\n            _toastNotification = toastNotification;\n        }\n        public IActionResult Index()\n        {\n            //Testing Default Methods\n\n            //Success\n            _toastNotification.AddSuccessToastMessage("Same for success message");\n            // Success with default options (taking into account the overwritten defaults when initializing in Startup.cs)\n            _toastNotification.AddSuccessToastMessage();\n\n            //Info\n            _toastNotification.AddInfoToastMessage();\n\n            //Warning\n            _toastNotification.AddWarningToastMessage();\n\n            //Error\n            _toastNotification.AddErrorToastMessage();\n\n            return View();\n        }\n\n        public IActionResult About()\n        {\n            _toastNotification.AddInfoToastMessage("You got redirected");\n            return View();\n        }\n\n        public IActionResult Contact()\n        {\n            _toastNotification.AddAlertToastMessage("You will be redirected");\n            return RedirectToAction("About");\n        }\n\n        public IActionResult Error()\n        {\n            _toastNotification.AddErrorToastMessage("There was something wrong with this request.");\n            return View();\n        }\n\n        public IActionResult Empty()\n        {\n\n            return View();\n        }\n\n        public IActionResult Ajax()\n        {\n            _toastNotification.AddInfoToastMessage("This page will make ajax requests and show notifications.");\n            return View();\n        }\n\n        public IActionResult AjaxCall()\n        {\n            System.Threading.Thread.Sleep(2000);\n            _toastNotification.AddSuccessToastMessage("This toast is shown on Ajax request. AJAX CALL " + DateTime.Now.ToLongTimeString());\n            return PartialView("_PartialView", "Ajax Call");\n        }\n\n        public IActionResult NormalAjaxCall()\n        {\n            return PartialView("_PartialView", "Normal Ajax Call");\n        }\n\n        public IActionResult ErrorAjaxCall()\n        {\n            throw new Exception("Error occurred");\n        }\n    }\n```\n\n### using noty (basically the same thing only thing that changes is the options type, here its NotyOptions)\n```C#\n\npublic class HomeController : Controller\n    {\n        private readonly IToastNotification _toastNotification;\n\n        public HomeController(IToastNotification toastNotification)\n        {\n            _toastNotification = toastNotification;\n        }\n        public IActionResult Index()\n        {\n            _toastNotification.AddSuccessToastMessage();\n            _toastNotification.AddErrorToastMessage("Test Erro", new NotyOptions()\n            {\n                Timeout = 0\n            });\n            return View();\n        }\n\n        public IActionResult About()\n        {\n            ViewData["Message"] = "Your application description page.";\n            _toastNotification.AddAlertToastMessage("My About Warning Message");\n            return View();\n        }\n\n        public IActionResult Contact()\n        {\n            ViewData["Message"] = "Your contact page.";\n            _toastNotification.AddInfoToastMessage("Dont get confused. <br /> <strong>You were redirected from Contact Page. <strong/>");\n            return RedirectToAction("About");\n        }\n\n        public IActionResult Error()\n        {\n            _toastNotification.AddErrorToastMessage("There was something wrong with this request.");\n\n            return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });\n        }\n\n        public IActionResult Ajax()\n        {\n            _toastNotification.AddInfoToastMessage("This page will make ajax requests and show notifications.");\n            return View();\n        }\n\n        public IActionResult AjaxCall()\n        {\n            System.Threading.Thread.Sleep(2000);\n            _toastNotification.AddSuccessToastMessage("This toast is shown on Ajax request. AJAX CALL " + DateTime.Now.ToLongTimeString());\n            return PartialView("_PartialView", "Ajax Call");\n        }\n\n        public IActionResult NormalAjaxCall()\n        {\n            return PartialView("_PartialView", "Normal Ajax Call");\n        }\n\n        public IActionResult ErrorAjaxCall()\n        {\n            throw new Exception("Error occurred");\n        }\n    }\n```\n## Possible Issue\n - [Cannot find compilation library location for package \'Microsoft.Win32.Registry](https://github.com/dotnet/core-setup/issues/2113)\n \n    **Fix** : https://github.com/dotnet/core-setup/issues/2113#issuecomment-337341068  \n'