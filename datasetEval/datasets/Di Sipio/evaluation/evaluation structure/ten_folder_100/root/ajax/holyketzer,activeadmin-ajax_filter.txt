b'[![Gem Version](https://badge.fury.io/rb/activeadmin-ajax_filter.svg)](https://badge.fury.io/rb/activeadmin-ajax_filter)\n[![Build Status](https://travis-ci.org/holyketzer/activeadmin-ajax_filter.svg?branch=master)](https://travis-ci.org/holyketzer/activeadmin-ajax_filter)\n[![Code Climate](https://codeclimate.com/github/holyketzer/activeadmin-ajax_filter/badges/gpa.svg)](https://codeclimate.com/github/holyketzer/activeadmin-ajax_filter)\n[![Test Coverage](https://codeclimate.com/github/holyketzer/activeadmin-ajax_filter/badges/coverage.svg)](https://codeclimate.com/github/holyketzer/activeadmin-ajax_filter/coverage)\n\n# Activeadmin::AjaxFilter\n\nThis gem extends ActiveAdmin so that your can use filters with AJAX-powered input.\n\n<img src="https://user-images.githubusercontent.com/987021/53289159-709c5000-37a3-11e9-97d5-0e61d2759b3c.gif" width="276" alt="ActiveAdmin AJAX Filter input"/>\n\n## Prerequisites\n\nMinimum Ruby version `2.3`\n\nThis extension assumes that you\'re using [Active Admin](https://github.com/activeadmin/activeadmin) with [Ransack](https://github.com/activerecord-hackery/ransack). And for AJAX input it uses [selectize-rails](https://github.com/manuelvanrijn/selectize-rails)\n\n## Installation\n\nAdd this line to your application\'s Gemfile:\n\n```ruby\ngem \'activeadmin-ajax_filter\'\n```\n\nAnd then execute:\n\n    $ bundle\n\nOr install it yourself as:\n\n    $ gem install activeadmin-ajax_filter\n\n## Usage\n\nInclude this line in your JavaScript code (active_admin.js.coffee)\n\n```coffeescript\n#= require selectize\n#= require activeadmin-ajax_filter\n```\n\nInclude this line in your CSS code (active_admin.scss)\n\n```scss\n@import "selectize";\n@import "selectize.default";\n@import "activeadmin-ajax_filter";\n```\n\nInclude `ActiveAdmin::AjaxFilter` module to the ActiveAdmin relation resource for which you want to support filtering and add `ajax_select` filter to main resource. For example:\n\n```ruby\n# Relation-resource\nActiveAdmin.register User do\n  include ActiveAdmin::AjaxFilter\n  # ...\nend\n\n# Main resource\n# As a filter\nActiveAdmin.register Invoice do\n  filter :user, as: :ajax_select, data: { \n    url: :filter_admin_users_path, \n    search_fields: [:email, :customer_uid], \n    limit: 7,\n  }\n  # ...\nend\n\n# As a form input\nActiveAdmin.register Invoice do\n  form do |f|\n    f.input :language # used by ajax_search_fields\n    f.input :user, as: :ajax_select, data: { \n      url: filter_admin_users_path,\n      search_fields: [:name], \n      static_ransack: { active_eq: true }, \n      ajax_search_fields: [:language_id],\n    }\n    # ...\n  end\nend\n```\n\nYou can use next parameters in `data` hash:\n\n* `search_fields` - fields by which AJAX search will be performed, **required**\n* `display_fields` - fields which will be displayed in drop down list during search, first field will be displayed for selected option\n* `limit` - count of the items which will be requested by AJAX, by default `5`\n* `value_field` - value field for html select element, by default `id`\n* `ordering` - sort string like `email ASC, customer_uid DESC`, by default it uses first value of `search_fields` with `ASC` direction\n* `ransack` - ransack query which will be applied, by default it\'s builded from `search_fields` with `or` and `contains` clauses, e.g.: `email_or_customer_uid_cont`\n* `url` - url for AJAX query by default is builded from field name. For inputs you can use url helpers, but on filters level url helpers isn\'t available, so if you need them you can pass symbols and it will be evaluated as url path (e.g. `:filter_admin_users_path`). `String` with relative path (like `/admin/users/filter`) can be used for both inputs and filters.\n* `ajax_search_fields` - array of field names. `ajax_select` input depends on `ajax_search_fields` values: e.g. you can scope user by languages.\n* `static_ransack` - hash of ransack predicates which will be applied statically and independently from current input field value\n* `min_chars_count_to_request` - minimal count of chars in the input field to make an AJAX request\n\n## Caveats \n\n### Ransack _cont on Integer column\n\nDue to issue with Ransack and Postgres it\'s not possbile to make searches like `id_cont` because `id` is a `Integer` type (more here https://github.com/activerecord-hackery/ransack/issues/85)\n\nThe way to handle it find with another predicate like:\n\n```\nfilter :user_id, as: :ajax_select, collection: [], data: {\n    url: \'/admin/users/filter\',\n    display_fields: [:full_name, :phone],\n    ransack: \'id_eq\', # !!! predicate is ovewritten to `eq` by default it\'s `cont`\n    search_fields: [\'id\'],\n  }\n```\n\n## Development\n\nAfter checking out the repo, run `bin/setup` to install dependencies. Then, run `rake spec` to run the tests. You can also run `bin/console` for an interactive prompt that will allow you to experiment.\n\nTo install this gem onto your local machine, run `bundle exec rake install`. To release a new version, update the version number in `version.rb`, and then run `bundle exec rake release`, which will create a git tag for the version, push git commits and tags, and push the `.gem` file to [rubygems.org](https://rubygems.org).\n\n## Contributing\n\nBug reports and pull requests are welcome on GitHub at https://github.com/holyketzer/activeadmin-ajax_filter. This project is intended to be a safe, welcoming space for collaboration.\n\n## License\n\nThe gem is available as open source under the terms of the [MIT License](http://opensource.org/licenses/MIT).\n\n'