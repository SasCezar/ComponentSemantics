b'**Note from author (pie6k). I\'ve created this lib few years ago and it was nice back then. Now you should propably not be using jQuery for things like that and go with React or something similar. Thank you.**\n\n# jQuery.initialize\n\nVersion: 1.3.0, Last updated: 2018-06-20\n\njQuery.initialize plugin is created to help maintain dynamically created elements on the\npage.\n\n## Synopsis\n\njQuery.initialize will iterate over each element that matches the selector and apply the\ncallback function. It will then listen for any changes to the Document Object Model (DOM)\nand apply the callback function to any new elements inserted into to the document that\nmatch the original selector.\n\n    $.initialize([selector], [callback]);\n\nThis allows developers to define an initialization callback that is applied whenever a new\nelement matching the selector is inserted into the DOM. It works for elements loaded via\nAJAX also.\n\nSimple demo - [click here](http://adampietrasiak.github.io/jQuery.initialize/test.html)\n\n## Example of use\n  \n    $.initialize(".some-element", function() {\n        $(this).css("color", "blue");\n    });\n\t\nBut now if new element matching .some-element selector will appear on page, it will be instantly initialized. The way new item is added is not important, you dont need to care about any callbacks etc.\n  \n    $("<div/>").addClass("some-element").appendTo("body"); //new element will have blue color!\n\n### Unobserving\n\nTo cease observation of the document, you may disconnect the observer by calling `disconnect()` on the returned [MutationObserver](https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver) instance which stops it from receiving further notifications until and unless `observe()` is called again.\n. E.g.,\n\n    var obs = $.initialize([selector], [callback]); // Returns MutationObserver\n    obs.disconnect();\n\n## Options\n\n### `target`\n\nBy default, the entire docment is observed for changes. This may result in poor performance. A specific node in the DOM can be observed by specifying a target:\n\n    $.initialize(".some-element", function() {\n        $(this).css("color", "blue");\n    }, { target: document.getElementById(\'observe-this-element\') });\n    \nOtherwise, target will default to `document.documentElement`.\n\n### `observer`\n\nA custom [`MutationObserverInit`](https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver#MutationObserverInit) may be provided. If not provided, it will default to internal configuration.\n\n## Browser Compatibility\n\nPlugin is based on **MutationObserver**. It will works on IE9+ (**read note below**) and every modern browser.\n\nNote: To make it work on IE9 and IE10 you\'ll need to add MutationObserver polyfill - like ones here: <https://github.com/webcomponents/webcomponentsjs>\n\n-----------------\n[Performance test](https://jsfiddle.net/x8vtfxtb/5/) (thanks to **@dbezborodovrp** and **@liuhongbo**)\n\n## Todo\n\n - make it `bower` and `npm` compatible, add advanced performance test.\n\n## Contributors\n- Adam Pietrasiak\n- Damien Bezborodov\n- Michael Hulse\n'