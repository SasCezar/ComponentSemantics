b'# Send Email from a *Static* HTML Form using Google Apps Mail!\n\nA ***Step-by-Step Example*** of using an **HTML Form** to send a "Contact Us" Message via Email without a Backend Server using a Google Script - No PHP, Python, Ruby, Java, Node.js etc.\n\nSee a working example here: https://dwyl.github.io/learn-to-send-email-via-google-script-html-no-server/\n\n**_Note:_** With EU\'s GDPR, we strongly advise [researching recommendations on user privacy;](https://cloud.google.com/security/gdpr) you may be held _responsible_ for the safekeeping of users\' personal data and should provide them a way to contact you.\n\n**_Warning:_** Google\'s API has limits on how many emails it can send in a day.\nThis may vary on your Google account, see [the limits here](https://developers.google.com/apps-script/guides/services/quotas).\nWe recommend implementing this tutorial through Part 3, since the data will\nalways be added to the spreadsheet first, then emailed if possible.\n\n## Why?\n\nWe needed a way of sending an email from a "*static*" HTML page\nwhen you don\'t (*want* to) *have* a *server*.\n\n### *Key Advantages*\n\n+ No "*Backend*" to Deploy/Maintain/Pay for\n+ ***Fully Customisabe*** - every aspect is customisable!\n+ Email *sent via* ***Google Mail*** which is ***Whitelisted Everywhere*** (*high deliverability success*)\n+ **Collect/Store** any **form data** in a ***Spreadsheet*** for easy viewing  \n(*perfect if you need to share it with non-technical people*)\n\n## What?\n\nInstead of using a server to send your email,\nwhich is *easy* but requires *maintenance*,  \nuse Google to send mail on your behalf\nand use Google Spreadsheets to keep track of the data!\n\n> You *could* use a "*free*" service like http://formspree.io/ to process your form submissions\nif you don\'t care where you are sending your data and want to manage the data submitted  \nin your email inbox (*messy ... yuck*!)  \n*Or*... you can *invest* a few minutes and keep data private/manageable.\n*Take your pick*.\n\n## *How*?\n\n### 1. Make a Copy of the Sample Spreadsheet\n\n> Sample: https://docs.google.com/spreadsheets/d/1Bn4m6iA_Xch1zzhNvo_6CoQWqOAgwwkOWJKC-phHx2Q/copy\n\nSign in to your Google account and click on "**Make a copy**..."\n\n![1-make-copy](https://user-images.githubusercontent.com/1406149/29245471-feb7b034-7f97-11e7-9c0d-f06238e8362b.png)\n\nThis should give you something like this:\n\n![2-copy-of-sheet](https://cloud.githubusercontent.com/assets/194400/10559710/3aec92f0-74ef-11e5-9295-f1988a23257b.png)\n\n> Note: Feel free to change the name of the Copy to anything you want,\nit will not affect the outcome.\n\n### 2. Open the Script Editor\n\nOpen the **Script editor...** by clicking "**Tools**" > "**Script editor...**"\n\n![2 script-editor](https://cloud.githubusercontent.com/assets/194400/10559732/8db2b9f6-74ef-11e5-8bf2-de286f079929.png)\n\nHere\'s a *snapshot* of the script you need (*at this point in the exercise*): [google-script-just-email.js](https://raw.githubusercontent.com/dwyl/learn-to-send-email-via-google-script-html-no-server/1d1c6727f69dec64a6b7f6bd6ff0dd72d0374210/google-script-just-email.js)\n\n### 3. Set the `TO_ADDRESS` in the Script\n\n**_Warning:_** If you do not uncomment and set your email as the value of\n`TO_ADDRESS`, it is possible for someone who has web skills to alter your form\nand send emailed data to an arbitrary email address.\n\nThis risk may not be very likely. Instead, if you wish, you can leave this\nvariable commented out if you accept this possible risk but want the added\nconvenience of setting this email variable inside your HTML form as a\n`data-email` attribute. This allows you to easily change where to send emails\ninside your HTML form without going back through steps 2-6. This functionality\ndoes **require** you to use the provided JS file in Part Two, Step 10.\n\nIf you do not want to accept that potential risk, please uncomment the code for\nthe variable `TO_ADDRESS`, and set this value equal to the email which should\nreceive the form\'s data when submitted.\n\n![3-script-editor-showing-script](https://cloud.githubusercontent.com/assets/194400/10560379/9efa5b3a-7501-11e5-96ba-a9e3b2d77ee4.png)\n\n### 4. Save a *New Version* of your Script\n\nIt\'s not immediately *obvious* but you have to *click* on "*Manage Versions...*"\n\n![19 google-script-no-save-new-version](https://cloud.githubusercontent.com/assets/194400/10558249/527f3c98-74c1-11e5-8290-5af7fa7f5f75.png)\n\nThen *create* your new version:\n\n![20 google-script-save-new-version](https://cloud.githubusercontent.com/assets/194400/10558250/53d21d5e-74c1-11e5-88c5-7bc2d8ce6228.png)\n\n### 5. Publish the *Updated* Script as a Web App\n\n![20 a-publish](https://cloud.githubusercontent.com/assets/194400/10558288/50980aa8-74c2-11e5-8576-72084a564779.png)\n\nSelect the *latest* project version to deploy.  \n:warning: Note: You *must* select the `Anyone, even anonymous` option for the \'Who has access to the app\' dropdown or form responses will not be added to the spreadsheet! :warning:\n\n![21 deploy-new-version](https://cloud.githubusercontent.com/assets/194400/10558251/570a5428-74c1-11e5-8ced-5dd26d3de3c4.png)\n\n### 6. Authorize the Script to Send Emails\n\n![5 auth-required](https://cloud.githubusercontent.com/assets/194400/10560412/89d3fb0c-7502-11e5-81ce-fb239bf545b2.png)\n\nUnless you [verify your script with Google](https://developers.google.com/apps-script/guides/client-verification#requesting_verification), you will need to click on "Advanced" and "Go to ... (unsafe)" to give this app permissions.\n\n![5-auth-failed-verification](https://user-images.githubusercontent.com/1406149/44312495-79583780-a3b6-11e8-9740-8c9b50f195d6.png)\n\n![5-allow-sending-emails](https://cloud.githubusercontent.com/assets/194400/10560416/a86a26ae-7502-11e5-9add-d5081d409af4.png)\n\nCopy the web app URL to your clip board / note pad.\nThen Click "OK".\n\n![22 1-deploy-as-web-app](https://cloud.githubusercontent.com/assets/194400/10558255/6eec31e2-74c1-11e5-9c07-cea6209526df.png)\n\n\n### 7. Create your *basic* HTML Form\n\nUsing the template in `index.html` in this repo,\ncreate your own html file with the basic form. (*save the file*)\n\n:warning: If you\'re already trying to use *your own form* by this step rather than the example one in this repo:\n+ Each of your form elements must have a `name` attribute equal to that of your column name in the Google sheet\n+ The form\'s `class` must be `gform`, i.e. `<form class="gform">`\n  + If you want to alter this later, you will need to create your\n  own version of `form-submission-handler.js` and amend the expected `class`\n\n\n> Remember to change the Form `action` URL to the one you copied in\nthe previous step:\n\n![7-html-form](https://user-images.githubusercontent.com/1406149/44312329-9b9c8600-a3b3-11e8-9816-4bdbbc96dc62.png)\n\n\n### 8. Open the HTML Form (*page*) in your Browser\n\nFill in some sample data in the HTML Form:\n\n![html form](https://cloud.githubusercontent.com/assets/194400/10560494/674b64c4-7504-11e5-801a-b537d276f671.png)\n\nSubmit the form. You should see a confirmation that it was sent:\n![form sent](https://cloud.githubusercontent.com/assets/194400/10560501/8f605dd4-7504-11e5-8cd7-06d768beba4d.png)\n\n### 9. Check the email inbox for the address you set\n\nOpen the inbox for the email address you set in **Step 3** (*above*)\n\n![email received](https://cloud.githubusercontent.com/assets/194400/10560512/f87f1652-7504-11e5-8b0f-c342c395a193.png)\n\n\n> ***Done***. That\'s it. You just created an HTML form that sends email!\n\n# *Part Two - Make It Look Good* ...\n\nWe are going to keep this ***Super Lean*** by using [**PURE CSS**](http://purecss.io/start/)\nfor our Style (*fix the "ugly" HTML Form in step 8*).\nAnd `submit` the form using [**JQuery** "***AJAX***"](http://api.jquery.com/jquery.ajax/) to keep the person\non your page/site (*avoid "ugly" response page*)\n\n### 10. Submit the Form using **JavaScript** "***AJAX***"\n\nTo *prevent* the page from changing to the `JSON` response/result\nwe need to submit the form using ***AJAX***.\n\nDownload [the following Javascript file](form-submission-handler.js) and update your `index.html` to point to it at the *end* of your file\n(*before the closing `</body>` tag)\n\n```html\n<script data-cfasync="false" type="text/javascript" src="form-submission-handler.js"></script>\n```\n\n**Warning:** If you did not set the `TO_ADDRESS` variable in Step 3, then\nyou need to include a `data-email="example@email.net"` attribute inside the\nmain form element. See the example form for more details. Otherwise, if you did\nset this variable, then you do not need this form attribute.\n\nThis keeps the person on the same page. No refresh. Next step is making a thank you message appear.\n\n### 11. Add a customised Thank You Message Shown when Form Submitted\n\nAfter following step 10, you can choose to add a thank you message after submitting. Add the following code between the `<form>` and `</form>` tags:\n\n```html\n<div style="display:none" class="thankyou_message">\n <!-- You can customize the thankyou message by editing the code below -->\n <h2><em>Thanks</em> for contacting us! We will get back to you soon!\n </h2>\n</div>\n```\n\nThis will now display a "Thank You" *message* when the form is submitted:\n\n![thankyou message](https://cloud.githubusercontent.com/assets/194400/10561147/4086a89a-7517-11e5-840d-7f490353e225.png)\n\nTailor your message by editing the `thankyou_message` div.\n\n### 12. Use CSS to Make the Form *Look Good*\n\nFor `this` *example* we are using ***Pure CSS***: http://purecss.io/start/\nbecause its ***light weight*** (***4.0KB minified and gzipped***)\nand *solves* our current "*problem*": Making it Look Good.\n\n![PureCSS-Logo-Intro](https://github-cloud.s3.amazonaws.com/assets/194400/10565838/72d6d52a-75d2-11e5-9b92-ca02b1124920.png)\n\n![PureCSS-module-sizes](https://github-cloud.s3.amazonaws.com/assets/194400/10565844/8f4885a0-75d2-11e5-9490-e3fc42c32616.png)\n\nWithout spending *too much* time on this, we can make the form *look*\n***a lot*** nicer:\n\n![contact form with pure css](https://github-cloud.s3.amazonaws.com/assets/194400/10566392/f38bc454-75dd-11e5-85dd-6819494a98f2.png)\n\n### 13. Make the email look good too!\n\nBy default, the sent email\'s body contains the key-value pairs from the form, with the key as an `<h4>` and the value as a `<div>`. This is a fairly basic, and foolproof view for the data.\n\nYou should get something that looks roughly like:\n![Nicely formatted email](https://cloud.githubusercontent.com/assets/5610747/22168070/335ad734-df62-11e6-9523-6e193e94151f.png)\n\n> Bear in mind that this is a work in progress and does potentially open you up to getting more than you bargained for in the email. Because the email content is now looping over all the data sent in the form, if a robot or malicious user decides to `POST` more than you\'ve asked for, you\'ll likely get it in your inbox. Use with caution for now. We\'re investigating improvements.\n\nYou can modify this though, via the script editor. The line:\n\n```javascript\nresult += "<h4 style=\'text-transform: capitalize; margin-bottom: 0\'>" + key + "</h4><div>" + obj[key] + "</div>";\n```\n\nhas all you need. You can adjust the markup to suit you. We chose an `<h4>` because it was the best size for the email, and added the small amount of CSS to it to fix the capitalisation (the keys are all lower case in the JS object) and a bit of default spacing. While inline styles like this are generally bad practice on normal web pages, for email HTML they\'re about the only reliable way to do CSS!  \nWe went with a `<div>` for the value part, because it could be anything - single-line, multiline (a `<p>` for example wouldn\'t cut it).\n\nWhile we\'re here, there\'s also a `replyTo` option for the `sendEmail()` method which is commented out by default:\n\n```javascript\nMailApp.sendEmail({\n  to: TO_ADDRESS,\n  subject: "Contact form submitted",\n  // replyTo: String(mailData.email), // This is optional and reliant on your form actually collecting a field named `email`\n  htmlBody: formatMailBody(mailData)\n});\n```\n\nYou can uncomment that if you want to add a reply-to field to your email. The example in the script will set the reply-to as the email submitted in the form.\n\nGoogle\'s documentation provides more information about MailApp.sendEmail (for example `cc`/`bcc` etc.) if you\'re interested:\nhttps://developers.google.com/apps-script/reference/mail/mail-app\n\n# *Part Three - Store Submitted Contact Form Data in a Spreadsheet*\n\nSending the form data directly to your email inbox is a *good*\nfirst step, but we can do better. Also, as noted above, Google\nhas limits on how many emails you can send in a day, so storing\nthe data into a spreadsheet is safer and less prone to data loss.\n\n### 14. Add the `record_data` Function to your Google Apps Script\n\n![record_data example](https://cloud.githubusercontent.com/assets/194400/10581613/8b4f9ad4-767b-11e5-90cc-962a9d6acc91.png)\n\nThis will record the data received from the `POST` as a *row* in the spreadsheet.  \nSee: [**google-apps-script.js**](google-apps-script.js) for the full code you can *copy-paste*.\n\n### 15. Save a New Version and Re-Publish it\n\nFollow Steps 4, 5 & 6 to save a new version and ***re-publish*** the script.\n\n### 16. Re-Test Submitting the Form\n\n![submit the form](https://cloud.githubusercontent.com/assets/194400/10582654/cf3081e6-7680-11e5-9fd1-b989a8ba0b65.png)\n\n### 17 Confirm the Data was Inserted into the Spreadsheet\n\n![17-confirm-data-inserted](https://cloud.githubusercontent.com/assets/194400/10582676/eb8af5d8-7680-11e5-92bb-30dd08d2d7b3.png)\n\n\n### _Live_ Server (_on your `localhost`_)\n\nBecause we are loading external **.js** files, our web browser\nwill not _allow_ us to simply open the **index.html** from a\nlocal directory for testing out the form.\n\nOpen your terminal and run this command\nto _**install** the **node modules** and **start** the **live server**_:\n\n```sh\nnpm install live-server --save-dev && node_modules/.bin/live-server --port=8000\n```\n\nIt will take a minute to install,\nbut once that\'s done your `live-server` will start up.\n\nThat starts a node.js HTTP server on port 8000\nand opens the form you just created in your default browser.\nIf you wish to update the form styles in **style.css** or the\nclient-side Javascript in **form-submission-handler.js**,\nplease be sure to edit **index.html** to load those resources\nlocally rather than via GitHub.\n\n> **Note**: This is a _light_ taste of Node.js for absolute beginners.\nYou do **not** need node.js to "deploy" this form,\nyou can run it on an **_any_ web server** that serves HTML/CSS/JavaScript.\nIf you have never used Node.js before, see: http://nodeguide.com/beginner.html\nbut for the purposes of this exercise (_submitting a form **without** a server_)\nyou _don\'t **need**_ node.js or `live-server`\nit\'s just a _nice_ thing to have when you are creating\nyour form because it automatically re-loads the page when you make changes in your text editor!\n\n\n# *Want more*?\n\nIf you want us to take this tutorial further, [***please let us know***!](https://github.com/dwyl/learn-to-send-email-via-google-script-html-no-server/issues)\n\nFor your convenience, we have hosted a working demo of the field on GitHub\nPages, check it out to see the code and how it works:\nhttps://dwyl.github.io/learn-to-send-email-via-google-script-html-no-server/\n\n\n## Add your own fields!\n\nIn response to [Henry Beary\'s request](https://github.com/dwyl/learn-to-send-email-via-google-script-html-no-server/issues/9)\nwe made the form handler *generic* which means you can now add any fields you want to the form.\n\nWe also created a form, `test.html`, which uses all kinds of form input elements\nso you can just copy and paste elements as desired into your own form. Just be\nsure to update their names and IDs. You can find a working example of this test\nform here:\nhttps://dwyl.github.io/learn-to-send-email-via-google-script-html-no-server/test.html\n\nRemember to include the fields *inside* the form that has the class `gform`\nand ensure that the `name` of the form element matches the new column heading in your spreadsheet.\ne.g:\n```HTML\n<fieldset class="pure-group">\n  <label for="color">Favourite Color: </label>\n  <input id="color" name="color" placeholder="green" />\n</fieldset>\n```\nThis will allow you to capture the person\'s favourite color:\ne.g:\n![new-field-contains-data](https://cloud.githubusercontent.com/assets/194400/11547132/9f162f6a-9949-11e5-89ac-aeb91e025844.png)\n\nLet us know if you have any questions!\n\n\n## Uploading Files\n\n[This resource](https://www.labnol.org/internet/receive-files-in-google-drive/19697/) may help you get started on uploading files to Google Drive from the Google Script.\n\n\n## Frequently Asked Questions (FAQ\'s)\n\n1. _How can I get help using this tutorial?_\n\n- Feel free to [post an issue](https://github.com/dwyl/learn-to-send-email-via-google-script-html-no-server/issues/new) describing in detail which steps you have gone through and what isn\'t working. To get a helpful response, please provide a [working example](https://stackoverflow.com/help/mcve) that reproduces your issue. For example, see [this sample CodePen](https://codepen.io/mckennapsean/pen/gdYzNY).\n\n2. _Can I get edit access to the example spreadsheet?_\n\n- No. This is being used to show a working example for anyone to copy, and an editable version could be broken accidentally, or maliciously, by any user.\n\n3. _Why is the webpage forwarding to a bunch of text when I hit submit?_\n\n- You are not properly loading the required Javascript which submits the data via AJAX, or your browser does not support AJAX. Please see Part 2 and check your console logs in case you are finding errors.\n\n4. _Why is the webpage not successfully submitting the form?_\n\n- Check your Javascript console logs. There could be an error while reading in the Javascript we have provided. There could be errors while submitting the form. It is required that your form have a class of `gform`, and also a `data-email` attribute if you have not set the `TO_ADDRESS` variable inside the Google Script file. Furthermore, the provided Javascript code also expects to see an email form element which it uses to check, a warning message for that element when an improper email is submitted, and then a `thank-you` div as well, which is shown after a form is successfully submitted. Please ensure that all of these HTML elements are in your form. See the sample file for code you can copy and paste. When you have all of these elements and a proper form set up, you should not see any error messages in your Javascript console when you hit submit.\n\n5. _The webpage is saying my data was submitted, but why isn\'t my data being saved or sent to me?_\n\n- When you copied the spreadsheet and published the Google Script, did you set the permissions to "Anyone, even Anonymous"? This is required for the form to work, since anyone on the internet can hit send to give you their data. Be sure that you have deployed the proper version of the script and used "Manage versions..." when making changes.\n\n6. _How do I change the emails this script sends?_\n\n- You can tweak the Google Script on the server to send emails to anyone and in whatever format you wish. This could be used to send a confirmation email to those contacting you, but we have not added this feature to this tutorial to avoid potential spamming. The sender of the email will always be the Google account you use to create the form/script, however. Further details on how to customize the email can be found in [the `MailApp` API](https://developers.google.com/apps-script/reference/mail/mail-app). You can instead use [the `GmailApp` API](https://developers.google.com/apps-script/reference/gmail/) which may be more flexible for certain use-cases.\n\n\n7. _Is this secure? Can I use it for sensitive data?_\n\n- No. While data that is sent over POST may be more protected, the information could easily be intercepted by a third party or middleman, and Google has complete access to the data inside a Google Spreadsheet. Email is also not a very secure communication medium by default. We would recommend you invest in a secure platform and server for storing your data if this is a requirement.\n\n\n## Background Reading\n\n+ Google Apps Scripts Basics: https://developers.google.com/apps-script/articles\n+ Logger (like console.log):\nhttps://developers.google.com/apps-script/reference/base/logger\n+ Simple Mail Merge using Google Spreadsheets:\nhttps://developers.google.com/apps-script/articles/mail_merge\n+ Original Tutorial: AJAX post to google spreadsheet: http://stackoverflow.com/questions/10000020/ajax-post-to-google-spreadsheet which points to:\n  + https://mashe.hawksey.info/2011/10/google-spreadsheets-as-a-database-insert-with-apps-script-form-postget-submit-method/\n'