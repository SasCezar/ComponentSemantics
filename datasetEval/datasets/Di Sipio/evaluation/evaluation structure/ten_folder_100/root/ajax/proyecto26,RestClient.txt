b'[![License](https://img.shields.io/badge/license-MIT-blue.svg)](./LICENSE)\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/969f6b9d04324af58382f7ee7a8faccd)](https://app.codacy.com/app/jdnichollsc/RestClient?utm_source=github.com&utm_medium=referral&utm_content=proyecto26/RestClient&utm_campaign=Badge_Grade_Dashboard)\n[![Maintenance](https://img.shields.io/badge/Maintained%3F-yes-brightgreen.svg)](https://github.com/proyecto26/RestClient/graphs/commit-activity)\n[![Tidelift Subscription](https://tidelift.com/badges/package/nuget/Proyecto26.RestClient)](https://tidelift.com/subscription/pkg/nuget-proyecto26-restclient?utm_source=nuget-proyecto26-restclient&utm_medium=referral&utm_campaign=readme)\n[![Build Status](https://travis-ci.org/proyecto26/RestClient.svg?branch=master)](https://travis-ci.org/proyecto26/RestClient)\n[![Twitter Follow][twitter-image]][twitter-url]\n<!-- TODO: Refactor code [![BCH compliance](https://bettercodehub.com/edge/badge/proyecto26/RestClient?branch=master)](https://bettercodehub.com/)--> \n\n[twitter-image]:https://img.shields.io/twitter/follow/jdnichollsc.svg?style=social&label=Follow%20me\n[twitter-url]:https://twitter.com/jdnichollsc\n\n# RestClient for Unity \xf0\x9f\xa4\x98\n\n![RestClient for Unity](img/rest-client_900x.png)\n\n<img src="img/icono.png" width="150px" align="right" alt="Proyecto26.RestClient logo" />\n\nThis **HTTP/REST** Client is based on Promises to avoid the [Callback Hell](http://callbackhell.com/) \xe2\x98\xa0\xef\xb8\x8f and the [Pyramid of doom](https://en.wikipedia.org/wiki/Pyramid_of_doom_(programming)) \xf0\x9f\x92\xa9 working with **Coroutines** in **Unity** \xf0\x9f\x8e\xae, example:\n\n```csharp\nvar api = "https://jsonplaceholder.typicode.com";\nRestClient.GetArray<Post>(api + "/posts", (err, res) => {\n  RestClient.GetArray<Todo>(api + "/todos", (errTodos, resTodos) => {\n    RestClient.GetArray<User>(api + "/users", (errUsers, resUsers) => {\n      //Missing validations to catch errors!\n    });\n  });\n});\n```\n\nBut working with **Promises** we can improve our code, yay! \xf0\x9f\x91\x8f\n\n```csharp\nRestClient.GetArray<Post>(api + "/posts").Then(response => {\n  EditorUtility.DisplayDialog ("Success", JsonHelper.ArrayToJson<Post>(response, true), "Ok");\n  return RestClient.GetArray<Todo>(api + "/todos");\n}).Then(response => {\n  EditorUtility.DisplayDialog ("Success", JsonHelper.ArrayToJson<Todo>(response, true), "Ok");\n  return RestClient.GetArray<User>(api + "/users");\n}).Then(response => {\n  EditorUtility.DisplayDialog ("Success", JsonHelper.ArrayToJson<User>(response, true), "Ok");\n}).Catch(err => EditorUtility.DisplayDialog ("Error", err.Message, "Ok"));\n```\n\n## Features \xf0\x9f\x8e\xae\n- Works out of the box \xf0\x9f\x8e\x89 \n- Supports **HTTPS/SSL**\n- Built on top of **UnityWebRequest** system\n- Includes JSON serialization with **JsonUtility** (Other tools are supported!)\n- Get **Arrays** Supported\n- Default **HTTP** Methods **(GET, POST, PUT, DELETE, HEAD)**\n- Generic **REQUEST** method to create any http request\n- Based on **Promises** for a better asynchronous programming. Learn about Promises [here](https://github.com/Real-Serious-Games/C-Sharp-Promise)!\n- Handle HTTP exceptions in a better way\n- Retry HTTP requests easily\n- Open Source \xf0\x9f\xa6\x84\n\n## Supported platforms \xf0\x9f\x93\xb1 \xf0\x9f\x96\xa5 \nThe [UnityWebRequest](https://docs.unity3d.com/Manual/UnityWebRequest.html) system supports most Unity platforms:\n\n* All versions of the Editor and Standalone players\n* WebGL\n* Mobile platforms: iOS, Android\n* Universal Windows Platform\n* PS4 and PSVita\n* XboxOne\n* HoloLens\n* Nintendo Switch\n\n## Demo \xe2\x8f\xaf\nDo you want to see this beautiful package in action? Download the demo [here](https://minhaskamal.github.io/DownGit/#/home?url=https://github.com/proyecto26/RestClient/tree/master/demo)\n\n![Unity configuration](img/unity_demo.png)\n![Demo](img/demo.png)\n\n## Installation \xf0\x9f\x91\xa8\xe2\x80\x8d\xf0\x9f\x92\xbb\n\n### Unity package\nDownload and install the **.unitypackage** file of the latest release published [here](https://github.com/proyecto26/RestClient/releases).\n\n### Nuget package\nOther option is download this package from **NuGet** with **Visual Studio** or using the **nuget-cli**, a **[NuGet.config](https://github.com/proyecto26/RestClient/blob/master/demo/NuGet.config)** file is required at the root of your **Unity Project**, for example:\n\n```xml\n<?xml version="1.0" encoding="utf-8"?>\n<configuration>\n  <config>\n    <add key="repositoryPath" value="./Assets/Packages" />\n  </config>\n</configuration>\n```\nThe package to search for is **[Proyecto26.RestClient](https://www.nuget.org/packages/Proyecto26.RestClient/)**.\n\n## Getting Started \xf0\x9f\x93\x9a\nThe default methods **(GET, POST, PUT, DELETE, HEAD)** are:\n```csharp\nRestClient.Get("https://jsonplaceholder.typicode.com/posts/1").Then(response => {\n  EditorUtility.DisplayDialog("Response", response.Text, "Ok");\n});\nRestClient.Post("https://jsonplaceholder.typicode.com/posts", newPost).Then(response => {\n  EditorUtility.DisplayDialog("Status", response.StatusCode.ToString(), "Ok");\n});\nRestClient.Put("https://jsonplaceholder.typicode.com/posts/1", updatedPost).Then(response => {\n  EditorUtility.DisplayDialog("Status", response.StatusCode.ToString(), "Ok");\n});\nRestClient.Delete("https://jsonplaceholder.typicode.com/posts/1").Then(response => {\n  EditorUtility.DisplayDialog("Status", response.StatusCode.ToString(), "Ok");\n});\nRestClient.Head("https://jsonplaceholder.typicode.com/posts").Then(response => {\n  EditorUtility.DisplayDialog("Status", response.StatusCode.ToString(), "Ok");\n});\n```\n\n### Generic Request Method\nAnd we have a generic method to create any type of request:\n```csharp\nRestClient.Request(new RequestHelper { \n  Uri = "https://jsonplaceholder.typicode.com/photos",\n  Method = "POST",\n  Timeout = 10,\n  Params = new Dictionary<string, string> {\n    { "param1", "Query string param..." }\n  },\n  Headers = new Dictionary<string, string> {\n    { "Authorization", "Bearer JWT_token..." }\n  },\n  Body = newPhoto, //Serialize object using JsonUtility by default\n  BodyString = SerializeObject(newPhoto), //Use it instead of \'Body\' to serialize using other tools\n  BodyRaw = CompressToRawData(newPhoto), //Use it instead of \'Body\' to send raw data directly\n  FormData = new WWWForm(), //Send files, etc with POST requests\n  SimpleForm = new Dictionary<string, string> {}, //Content-Type: application/x-www-form-urlencoded\n  FormSections = new List<IMultipartFormSection>() {}, //Content-Type: multipart/form-data\n  CertificateHandler = new CustomCertificateHandler(), //Create custom certificates\n  UploadHandler = new UploadHandlerRaw(bytes), //Send bytes directly if it\'s required\n  DownloadHandler = new DownloadHandlerFile(destPah), //Download large files\n  ContentType = "application/json", //JSON is used by default\n  Retries = 3, //Number of retries\n  RetrySecondsDelay = 2, //Seconds of delay to make a retry\n  RetryCallback = (err, retries) => {}, //See the error before retrying the request\n  EnableDebug = true, //See logs of the requests for debug mode\n  IgnoreHttpException = true, //Prevent to catch http exceptions\n  ChunkedTransfer = false,\n  UseHttpContinue = true,\n  RedirectLimit = 32,\n  DefaultContentType = false, //Disable JSON content type by default\n  ParseResponseBody = false //Don\'t encode and parse downloaded data as JSON\n}).Then(response => {\n  //Get resources via downloadHandler to get more control!\n  Texture texture = ((DownloadHandlerTexture)response.Request.downloadHandler).texture;\n  AudioClip audioClip = ((DownloadHandlerAudioClip)response.Request.downloadHandler).audioClip;\n  AssetBundle assetBundle = ((DownloadHandlerAssetBundle)response.Request.downloadHandler).assetBundle;\n\n  EditorUtility.DisplayDialog("Status", response.StatusCode.ToString(), "Ok");\n});\n```\n\n- Example downloading an audio file:\n```csharp\nvar fileUrl = "https://raw.githubusercontent.com/IonDen/ion.sound/master/sounds/bell_ring.ogg";\nvar fileType = AudioType.OGGVORBIS;\n\nRestClient.Get(new RequestHelper {\n  Uri = fileUrl,\n  DownloadHandler = new DownloadHandlerAudioClip(fileUrl, fileType)\n}).Then(res => {\n  AudioSource audio = GetComponent<AudioSource>();\n  audio.clip = ((DownloadHandlerAudioClip)res.Request.downloadHandler).audioClip;\n  audio.Play();\n}).Catch(err => {\n  EditorUtility.DisplayDialog ("Error", err.Message, "Ok");\n});\n```\n\nWith all the methods we have the possibility to indicate the type of response, in the following example we\'re going to create a class and the **HTTP** requests to load **JSON** data easily:\n```csharp\n[Serializable]\npublic class User\n{\n  public int id;\n  public string name;\n  public string username;\n  public string email;\n  public string phone;\n  public string website;\n}\n```\n\n* **GET JSON**\n```csharp\nvar usersRoute = "https://jsonplaceholder.typicode.com/users"; \nRestClient.Get<User>(usersRoute + "/1").Then(firstUser => {\n  EditorUtility.DisplayDialog("JSON", JsonUtility.ToJson(firstUser, true), "Ok");\n});\n```\n* **GET Array (JsonHelper is an extension to manage arrays)**\n```csharp\nRestClient.GetArray<User>(usersRoute).Then(allUsers => {\n  EditorUtility.DisplayDialog("JSON Array", JsonHelper.ArrayToJsonString<User>(allUsers, true), "Ok");\n});\n```\n\nAlso we can create different classes for custom responses:\n```csharp\n[Serializable]\npublic class CustomResponse\n{\n  public int id;\n}\n```\n* **POST**\n```csharp\nRestClient.Post<CustomResponse>(usersRoute, newUser).Then(customResponse => {\n  EditorUtility.DisplayDialog("JSON", JsonUtility.ToJson(customResponse, true), "Ok");\n});\n```\n* **PUT**\n```csharp\nRestClient.Put<CustomResponse>(usersRoute + "/1", updatedUser).Then(customResponse => {\n  EditorUtility.DisplayDialog("JSON", JsonUtility.ToJson(customResponse, true), "Ok");\n});\n```\n\n## Custom HTTP Headers, Params and Options \xf0\x9f\x92\xa5\n**HTTP Headers**, such as `Authorization`, can be set in the **DefaultRequestHeaders** object for all requests\n```csharp\nRestClient.DefaultRequestHeaders["Authorization"] = "Bearer ...";\n```\n\n**Query string params** can be set in the **DefaultRequestParams** object for all requests\n```csharp\nRestClient.DefaultRequestParams["param1"] = "Query string value...";\n```\n\nAlso we can add specific options and override default headers and params for a request\n```csharp\nvar currentRequest = new RequestHelper { \n  Uri = "https://jsonplaceholder.typicode.com/photos",\n  Headers = new Dictionary<string, string> {\n    { "Authorization", "Other token..." }\n  },\n  Params = new Dictionary<string, string> {\n    { "param1", "Other value..." }\n  }\n};\nRestClient.GetArray<Photo>(currentRequest).Then(response => {\n  EditorUtility.DisplayDialog("Header", currentRequest.GetHeader("Authorization"), "Ok");\n});\n```\n\nAnd we can know the status of the request and cancel it!\n```csharp\ncurrentRequest.UploadProgress; //The progress by uploading data to the server\ncurrentRequest.UploadedBytes; //The number of bytes of body data the system has uploaded\ncurrentRequest.DownloadProgress; //The progress by downloading data from the server\ncurrentRequest.DownloadedBytes; //The number of bytes of body data the system has downloaded\ncurrentRequest.Abort(); //Abort the request manually\n```\n\nLater we can clear the default headers and params for all requests\n```csharp\nRestClient.ClearDefaultHeaders();\nRestClient.ClearDefaultParams();\n```\n\n### Example\n- Unity as Client\n```csharp\n[Serializable]\npublic class ServerResponse {\n  public string id;\n  public string date; //DateTime is not supported by JsonUtility\n}\n[Serializable]\npublic class User {\n  public string firstName;\n  public string lastName;\n}\nRestClient.Post<ServerResponse>("www.api.com/endpoint", new User {\n  firstName = "Juan David",\n  lastName = "Nicholls Cardona"\n}).Then(response => {\n  EditorUtility.DisplayDialog("ID: ", response.id, "Ok");\n  EditorUtility.DisplayDialog("Date: ", response.date, "Ok");\n});\n```\n- NodeJS as Backend (Using [Express](http://expressjs.com/es/starter/hello-world.html))\n```js\nrouter.post(\'/\', function(req, res) {\n  console.log(req.body.firstName)\n  res.json({\n    id: 123,\n    date: new Date()\n  })\n});\n```\n\n## Collaborators \xf0\x9f\xa5\x87\n[<img alt="jdnichollsc" src="https://avatars3.githubusercontent.com/u/2154886?v=3&s=117" width="117">](https://github.com/jdnichollsc) | [<img alt="diegoossa" src="https://avatars3.githubusercontent.com/u/3436237?v=3&s=117" width="117">](https://github.com/diegoossa) | [<img alt="nasdull" src="https://avatars3.githubusercontent.com/u/25492923?v=3&s=117" width="117">](https://github.com/nasdull) |\n:---: | :---: | :---: |\n[Juan Nicholls](mailto:jdnichollsc@hotmail.com) | [Diego Ossa](mailto:diegoossa@gmail.com) | [Nasdull](mailto:nasdull@hotmail.com) |\n\n## Credits \xf0\x9f\x91\x8d\n* **Promises library for C#:** [Real Serious Games/C-Sharp-Promise](https://github.com/Real-Serious-Games/C-Sharp-Promise)\n\n## Supporting \xf0\x9f\x8d\xbb\nI believe in Unicorns \xf0\x9f\xa6\x84\nSupport [me](http://www.paypal.me/jdnichollsc/2), if you do too.\n[Professionally supported Proyecto26.RestClient is coming soon](https://tidelift.com/subscription/pkg/nuget-proyecto26-restclient?utm_source=nuget-proyecto26-restclient&utm_medium=referral&utm_campaign=readme)\n\nHey mate, any good review from the [Unity Store](https://assetstore.unity.com/packages/tools/network/rest-client-for-unity-102501) is also really appreciated!\n\n## Security contact information \xf0\x9f\x9a\xa8\nTo report a security vulnerability, please use the [Tidelift security contact](https://tidelift.com/security). Tidelift will coordinate the fix and disclosure.\n\n## Happy coding \xf0\x9f\x92\xaf\nMade with \xe2\x9d\xa4\xef\xb8\x8f\n\n<img width="150px" src="https://avatars0.githubusercontent.com/u/28855608?s=200&v=4" align="right">\n'