b'# jQuery Form [![Build Status](https://travis-ci.org/jquery-form/form.svg?branch=master)](https://travis-ci.org/jquery-form/form)\n\n## Overview\nThe jQuery Form Plugin allows you to easily and unobtrusively upgrade HTML forms to use AJAX. The main methods, ajaxForm and ajaxSubmit, gather information from the form element to determine how to manage the submit process. Both of these methods support numerous options which allow you to have full control over how the data is submitted.\n\nNo special markup is needed, just a normal form. Submitting a form with AJAX doesn\'t get any easier than this!\n\n## Community\nWant to contribute to jQuery Form? Awesome! See [CONTRIBUTING](CONTRIBUTING.md) for more information.\n\n### Code of Conduct\nPlease note that this project is released with a [Contributor Code of Conduct](CODE_OF_CONDUCT.md) to ensure that this project is a welcoming place for **everyone** to contribute to. By participating in this project you agree to abide by its terms.\n\n### Pull Requests Needed\n#### Enhancements needed to to be fully compatible with jQuery 3\njQuery 3 is removing a lot of features that have been deprecated for a long time. Some of these are still in use by jQuery Form.  \nPull requests and assistance in updating jQuery Form to be compatible with jQuery 3 are greatly appreciated.  \nSee [issue #544](https://github.com/jquery-form/form/issues/544) for more information.\n\n## Compatibility\n* Requires jQuery 1.7.2 or later.  \n* Compatible with jQuery 2.\n* Partially compatible with jQuery 3.\n* **Not** compatible with jQuery 3 Slim. ([issue #544](https://github.com/jquery-form/form/issues/544))\n\n## Download\n* **Development:** [src/jquery.form.js\n](https://github.com/jquery-form/form/blob/master/src/jquery.form.js)\n* **Production/Minified:** [dist/jquery.form.min.js\n](https://github.com/jquery-form/form/blob/master/dist/jquery.form.min.js)\n\n### CDN\n```html\n<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.form/4.2.2/jquery.form.min.js" integrity="sha384-FzT3vTVGXqf7wRfy8k4BiyzvbNfeYjK+frTVqZeNDFl8woCbF0CYG6g2fMEFFo/i" crossorigin="anonymous"></script>\n```\nor\n```html\n<script src="https://cdn.jsdelivr.net/gh/jquery-form/form@4.2.2/dist/jquery.form.min.js" integrity="sha384-FzT3vTVGXqf7wRfy8k4BiyzvbNfeYjK+frTVqZeNDFl8woCbF0CYG6g2fMEFFo/i" crossorigin="anonymous"></script>\n```\n\n---\n\n## API\n\n### jqXHR\nThe jqXHR object is stored in element <em>data</em>-cache with the <code>jqxhr</code> key after each <code>ajaxSubmit</code>\ncall. It can be accessed like this:\n\n````javascript\nvar form = $(\'#myForm\').ajaxSubmit({ /* options */ });\nvar xhr = form.data(\'jqxhr\');\n\nxhr.done(function() {\n...\n});\n````\n\n### ajaxForm( options )\nPrepares a form to be submitted via AJAX by adding all of the necessary event listeners. It does **not** submit the form. Use `ajaxForm` in your document\'s `ready` function to prepare existing forms for AJAX submission, or with the `delegation` option to handle forms not yet added to the DOM.  \nUse ajaxForm when you want the plugin to manage all the event binding for you.\n\n````javascript\n// prepare all forms for ajax submission\n$(\'form\').ajaxForm({\n    target: \'#myResultsDiv\'\n});\n````\n\n### ajaxSubmit( options )\nImmediately submits the form via AJAX. In the most common use case this is invoked in response to the user clicking a submit button on the form.\nUse ajaxSubmit if you want to bind your own submit handler to the form.\n\n````javascript\n// bind submit handler to form\n$(\'form\').on(\'submit\', function(e) {\n    e.preventDefault(); // prevent native submit\n    $(this).ajaxSubmit({\n        target: \'#myResultsDiv\'\n    })\n});\n````\n\n---\n\n## Options\n**Note:** All standard [$.ajax](http://api.jquery.com/jQuery.ajax) options can be used.\n\n### beforeSerialize\nCallback function invoked before form serialization. Provides an opportunity to manipulate the form before its values are retrieved. Returning `false` from the callback will prevent the form from being submitted. The callback is invoked with two arguments: the jQuery wrapped form object and the options object.\n\n````javascript\nbeforeSerialize: function($form, options) {\n    // return false to cancel submit\n}\n````\n\n### beforeSubmit\nCallback function invoked before form submission. Returning `false` from the callback will prevent the form from being submitted. The callback is invoked with three arguments: the form data in array format, the jQuery wrapped form object, and the options object.\n\n````javascript\nbeforeSubmit: function(arr, $form, options) {\n    // form data array is an array of objects with name and value properties\n    // [ { name: \'username\', value: \'jresig\' }, { name: \'password\', value: \'secret\' } ]\n    // return false to cancel submit\n}\n````\n\n### filtering\nCallback function invoked before processing fields. This provides a way to filter elements.\n\n````javascript\nfiltering: function(el, index) {\n    if ( !$(el).hasClass(\'ignore\') ) {\n        return el;\n    }\n}\n````\n\n### clearForm\nBoolean flag indicating whether the form should be cleared if the submit is successful\n\n### data\nAn object containing extra data that should be submitted along with the form.\n\n````\ndata: { key1: \'value1\', key2: \'value2\' }\n````\n\n### dataType\nExpected data type of the response. One of: null, \'xml\', \'script\', or \'json\'. The dataType option provides a means for specifying how the server response should be handled. This maps directly to jQuery\'s dataType method. The following values are supported:\n\n* \'xml\': server response is treated as XML and the \'success\' callback method, if specified, will be passed the responseXML value\n* \'json\': server response will be evaluated and passed to the \'success\' callback, if specified\n* \'script\': server response is evaluated in the global context\n\n### delegation\ntrue to enable support for event delegation\n*requires jQuery v1.7+*\n\n````javascript\n// prepare all existing and future forms for ajax submission\n$(\'form\').ajaxForm({\n    delegation: true\n});\n````\n\n### error\n**Deprecated**  \nCallback function to be invoked upon error.\n\n### forceSync\nOnly applicable when explicity using the iframe option or when uploading files on browsers that don\'t support XHR2.\nSet to `true` to remove the short delay before posting form when uploading files. The delay is used to allow the browser to render DOM updates before performing a native form submit. This improves usability when displaying notifications to the user, such as "Please Wait..."\n\n### iframe\nBoolean flag indicating whether the form should *always* target the server response to an iframe instead of leveraging XHR when possible.\n\n### iframeSrc\nString value that should be used for the iframe\'s src attribute when an iframe is used.\n\n### iframeTarget\nIdentifies the iframe element to be used as the response target for file uploads. By default, the plugin will create a temporary iframe element to capture the response when uploading files. This option allows you to use an existing iframe if you wish. When using this option the plugin will not attempt handling the response from the server.\n\n### method\nThe HTTP method to use for the request (e.g. \'POST\', \'GET\', \'PUT\').\n\n### replaceTarget\nOptionally used along with the target option. Set to true if the target should be replaced or false if only the target contents should be replaced.\n\n### resetForm\nBoolean flag indicating whether the form should be reset if the submit is successful\n\n### semantic\nBoolean flag indicating whether data must be submitted in strict semantic order (slower). Note that the normal form serialization is done in semantic order except for input elements of `type="image"`. You should only set the semantic option to true if your server has strict semantic requirements and your form contains an input element of `type="image"`.\n\n### success\n**Deprecated**  \nCallback function to be invoked after the form has been submitted. If a \'success\' callback function is provided it is invoked after the response has been returned from the server. It is passed the following standard jQuery arguments:\n\n1. `data`, formatted according to the dataType parameter or the dataFilter callback function, if specified\n2. `textStatus`, string\n3. `jqXHR`, object\n4. `$form` jQuery object containing form element\n\n### target\nIdentifies the element(s) in the page to be updated with the server response. This value may be specified as a jQuery selection string, a jQuery object, or a DOM element.\n\n### type\nThe HTTP method to use for the request (e.g. \'POST\', \'GET\', \'PUT\').  \nAn alias for `method` option. Overridden by the `method` value if both are present.\n\n### uploadProgress\nCallback function to be invoked with upload progress information (if supported by the browser). The callback is passed the following arguments:\n\n1. event; the browser event\n2. position (integer)\n3. total (integer)\n4. percentComplete (integer)\n\n### url\nURL to which the form data will be submitted.\n\n---\n\n## Utility Methods\n### formSerialize\nSerializes the form into a query string. This method will return a string in the format: `name1=value1&name2=value2`\n\n````javascript\nvar queryString = $(\'#myFormId\').formSerialize();\n````\n\n### fieldSerialize\nSerializes field elements into a query string. This is handy when you need to serialize only part of a form. This method will return a string in the format: `name1=value1&name2=value2`\n\n````javascript\nvar queryString = $(\'#myFormId .specialFields\').fieldSerialize();\n````\n\n### fieldValue\nReturns the value(s) of the element(s) in the matched set in an array. This method always returns an array. If no valid value can be determined the array will be empty, otherwise it will contain one or more values.\n\n### resetForm\nResets the form to its original state by invoking the form element\'s native DOM method.\n\n### clearForm\nClears the form elements. This method empties all of the text inputs, password inputs and textarea elements, clears the selection in any select elements, and unchecks all radio and checkbox inputs. It does *not* clear hidden field values.\n\n### clearFields\nClears selected field elements. This is handy when you need to clear only a part of the form.\n\n---\n\n## File Uploads\nThe Form Plugin supports the use of [XMLHttpRequest Level 2]("http://www.w3.org/TR/XMLHttpRequest/") and [FormData](https://developer.mozilla.org/en/XMLHttpRequest/FormData) objects on browsers that support these features. As of today (March 2012) that includes Chrome, Safari, and Firefox. On these browsers (and future Opera and IE10) files uploads will occur seamlessly through the XHR object and progress updates are available as the upload proceeds. For older browsers, a fallback technology is used which involves iframes. [More Info](http://malsup.com/jquery/form/#file-upload)\n\n---\n\n## Contributors\nThis project has transferred from [github.com/malsup/form](https://github.com/malsup/form/), courtesy of [Mike Alsup](https://github.com/malsup).  \nSee [CONTRIBUTORS](CONTRIBUTORS.md) for details.\n\n## License\n\nThis project is dual-licensed under the LGPLv2.1 (or later) or MIT licenses:\n\n* [GNU Lesser General Public License v2.1](LICENSE)\n* [MIT](LICENSE-MIT)\n\n---\n\nAdditional documentation and examples for version 3.51- at: [http://malsup.com/jquery/form/](http://malsup.com/jquery/form/)\n'