b'<!-- Breaking Changes -->\n<!-- 1. params -> queries -->\n<!-- 2. Authorization -->\n<!-- 3. No need to require btoa anymore -->\n<!-- 4. Shorthands -->\n\n# zlFetch\n\n<!-- [![](https://data.jsdelivr.com/v1/package/npm/zl-fetch/badge)](https://www.jsdelivr.com/package/npm/zl-fetch) -->\n\n## Features\n\n1.  zlFetch helps you create your request. It helps you:\n    1. Create query parameters for GET requests\n    2. Do Basic and Bearer-type authorization\n    3. Formats `body` for JSON or `x-www-form-urlencoded`\n2.  zlFetch transforms the response:\n    1.  It lets you use your responses in the first `then` method.\n    2.  It directs 400 and 500 errors into `catch`.\n\n## Download/install\n\nYou can install zlFetch through npm.\n\n```\n# Installing through npm\nnpm install zl-fetch --save\n```\n\nIf you want to use zlFetch in your browser, download [`dist/index.min.js`](https://www.jsdelivr.com/package/npm/zl-fetch) or use the CDN link below:\n\n```html\n<script src="https://cdn.jsdelivr.net/npm/zl-fetch"></script>\n```\n\n## Quick Start\n\n### Basic usage (in Browser)\n\n```js\n// Basic usage\nzlFetch("http://your-website.com")\n  .then(response => console.log(response))\n  .catch(error => console.log(error));\n```\n\nYou can use import zlFetch the ES6 way if you wish to:\n\n```js\n// ES6 imports\nimport zlFetch from "zl-fetch";\nzlFetch("http://your-website.com")\n  .then(response => console.log(response))\n  .catch(error => console.log(error));\n```\n\nFetch is supported natively in modern browsers. If you need to support older browsers, add [ismorphic-fetch](https://github.com/matthew-andrews/isomorphic-fetch) in your code. zlFetch does not include `isomorphic-fetch` for you.\n\n\n### Basic usage (in Node)\n\nzlFetch requires [ismorphic-fetch](https://github.com/matthew-andrews/isomorphic-fetch) in Node based environments. Then, use `zlFetch` as normal.\n\n```\nnpm install -S isomorphic-fetch\n```\n\n```js\nconst zlFetch = require("zl-fetch");\nzlFetch("http://your-website.com")\n  .then(response => console.log(response))\n  .catch(error => console.log(error));\n```\n\n## Response and Error objects\n\n`zlFetch` changes the response and error objects. In zlFetch, `response` and `error` objects both include these five properties:\n\n1.  `headers`: response headers\n2.  `body`: response body\n3.  `status`: response status\n4.  `statusText`: response status text\n5.  `response`: original response from Fetch\n\n```js\nzlFetch("http://your-website.com")\n  .then(response => {\n    const headers = response.headers;\n    const body = response.body;\n  })\n  .catch(error => {\n    const headers = error.headers;\n    const body = error.body;\n    const status = error.status;\n  });\n```\n\n## `GET` requests\n\nTo send a `GET` request, enter the endpoint as the first argument.\n\n```js\n// With zlFetch\nzlFetch("http://your-website.com");\n\n// With fetch api\nfetch("http://your-website.com");\n```\n\nzlFetch formats and encodes query parameters for you if you provide a `queries` option.\n\n```js\nzlFetch(\'http://your-website.com\', {\n  queries: {\n    param1: \'value1\',\n    param2: \'to encode\'\n  }\n})\n\n// With fetch API\nfetch(\'http://your-website.com?param1=value1&param2=to%20encode\')\n```\n\n## `POST` requests\n\nSet `method` to `post` to send a post request. zlFetch will set `Content-Type` will be set to `application/json` for you. It will also convert your `body` to a JSON string automatically.\n\n```js\n// with zlFetch\nzlFetch("http://your-website.com", {\n  method: "post",\n  body: {\n    key: "value"\n  }\n});\n\n// Resultant fetch api\nfetch("http://your-website.com", {\n  method: "post",\n  headers: { "Content-Type": "application/json" },\n  body: JSON.stringify({\n    key: "value"\n  })\n});\n\n// Setting other content type\nzlFetch("http://your-website.com", {\n  method: "post",\n  headers: { "Content-Type": "application/x-www-form-urlencoded" }\n});\n```\n\n### Other Content-Types\n\nYou may choose to overwrite `Content-Type` yourself. To do so, pass `headers` and `Content-Type` property.\n\n```js\nfetch("http://your-website.com", {\n  method: "post",\n  headers: { "Content-Type": "Another Content Type" },\n  body: {\n    key: "value"\n  )\n});\n```\n\nIf `Content-Type` is set to `application/x-www-form-urlencoded`, zlFetch will format `body` to be valid for `x-www-form-urlencoded`.\n\n```js\nzlFetch("http://your-website.com", {\n  method: "post",\n  headers: { "Content-Type": "application/x-www-form-urlencoded" },\n  body: {\n    key: "value",\n    web: "https://google.com"\n  }\n});\n\n// Resultant fetch api\nfetch("http://your-website.com", {\n  method: "post",\n  headers: { "Content-Type": "application/x-www-form-urlencoded" },\n  body: "key=value&web=https%3A%2F%2Fgoogle.com"\n});\n```\n\n## Authentication/Authorization\n\nzlFetch adds `Authorization` headers for you if you include an `auth` property.\n\n```js\nzlFetch("http://your-website.com", {\n  auth: /* Your credentials */\n})\n```\n\n### Basic Authentication\n\nTo perform basic authentication, pass `username` and `password` into `auth`.\n\n```js\nzlFetch("http://your-website.com", {\n  auth: {\n    username: \'your-username\'\n    password: \'your-password\'\n  }\n})\n\n// Resultant fetch api\nfetch("http://your-website.com", {\n  headers: { Authorization: `Basic ${btoa("yourusername:12345678")}` }\n});\n```\n\n\n### Token/Bearer Authentication\n\nTo perform token-based authentication, pass your token into `auth`.\n\n```js\nzlFetch("http://your-website.com", {\n  token: "token12345"\n});\n\n// Resultant fetch api\nfetch("http://your-website.com", {\n  headers: { Authorization: `Bearer token12345` }\n});\n```\n\n## Shorhand methods\n\nFrom `v3.0` onwards, zlFetch supports method shorthands.\n\nSupported shorthand methods include:\n\n1. `get`\n2. `post`\n3. `put`\n4. `patch`\n5. `delete`\n\n```js\n// These two are the same\nzlFetch.post(\'http://your-website.com\')\nzlFetch(\'http://your-website.com\', { method: \'post\' })\n```\n\n## Response Types\n\nzlFetch supports only `json` and `text` response types for now. If you run into an error with a response type, file an issue and I\'ll support it asap. (This might take time though!)\n'