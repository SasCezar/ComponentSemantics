b'# Fetch+\n\nA convenient [Fetch API](https://github.com/whatwg/fetch) library with first-class middleware support.\n\n[![version](https://img.shields.io/npm/v/fetch-plus.svg)](https://npmjs.org/package/fetch-plus) ![license](https://img.shields.io/npm/l/fetch-plus.svg) [![Package Quality](http://npm.packagequality.com/shield/fetch-plus.svg?1289194656)](http://packagequality.com/#?package=fetch-plus)  ![installs](https://img.shields.io/npm/dt/fetch-plus.svg)\n\n## Features\n\n- Drop-in replacement for fetch().\n- Simple [BREAD](https://en.wikipedia.org/wiki/Create,_read,_update_and_delete) methods for consuming REST APIs.\n- A "queries" object option for building safe query strings more easily.\n- All options can be computed values: `myHeaders: () => values`\n- Custom middlewares to manipute requests, responses, and caught errors.\n- Useful middlewares and handlers (JSON/Auth/CSRF/Immutable etc) available as separate npm packages.\n- [Fetch API Streams draft](https://github.com/yutakahirano/fetch-with-streams) handler with an Observable interface.\n- Runs in Node and all browsers.\n\n## Installation\n\n```bash\nnpm install --save fetch-plus  isomorphic-fetch\n```\n\n## Additional middlewares\n\n```bash\nnpm install --save fetch-plus-basicauth\nnpm install --save fetch-plus-bearerauth\nnpm install --save fetch-plus-csrf\nnpm install --save fetch-plus-immutable\nnpm install --save fetch-plus-json\nnpm install --save fetch-plus-oauth\nnpm install --save fetch-plus-stream\nnpm install --save fetch-plus-useragent\nnpm install --save fetch-plus-xml\n```\n\n## Usage\n\n**import/require**\n\n```js\nimport {fetch, createClient} from "fetch-plus";\n```\n\n**fetch**\n\n```js\nfetch("http://some.api.example/v1", {\n\tquery: {foo: "bar"},                // Query string object. So convenient.\n\tbody: () => "R2-D2"                 // Computed values are computed.\n});\n```\n\n**createClient**\n\nCreates a RESTful client so middlewares can be added to it.\n\n```js\nconst client = createClient("http://some.api.example/v1");\n```\n\n**client.addMiddleware**\n\nCreate middlewares like: `(request) => (response) => response`\n\n```js\nclient.addMiddleware(\n\t(request) => {\n\t\trequest.path += ".json";\n\t\trequest.options.headers["Content-Type"] = "application/json; charset=utf-8";\n\n\t\treturn (response) => response.json();\n\t}\n);\n```\n\n**client.request**\n\n`request` performs generic requests to the configured endpoint.\n\n```js\nclient.request("posts/25/comments", {\n\tmethod: "POST",\n\tbody: {comment: "C-3PO"}\n});\n```\n\n**client.browse|read|edit|add|destroy|replace**\n\nBREAD helpers that perform requests to the configured endpoint.\n\n```js\nclient.browse(            \n\t"posts"                    // A string...\n);\n\nclient.add(\n\t["posts", 1, "comments"],  // ...or an array like ["posts", id, "comments"]\n\t{body: "C-3PO"}            // Regular Fetch API body option.\n);\n```\n\n**client.list|create|read|update|destroy**\n\nCRUD aliases that perform requests to the configured endpoint.\n\n```js\nclient.list(            \n\t"posts"                    // A string...\n);\n\nclient.create(\n\t["posts", 1, "comments"],  // ...or an array like ["posts", id, "comments"]\n\t{body: "C-3PO"}            // Regular Fetch API body option.\n);\n```\n\n**handlers**\n\nHandlers take configuration and return functions to pass to `.then()`.\n\n```js\n// Transform JSON with fetch-plus-json.\nimport plusJson from "fetch-plus-json";\n\nfetch("http://some.api.example/v1/posts").then(plusJson.handler({some:"config"}));\n```\n\nSee [example](https://github.com/RickWong/fetch-plus/blob/master/example/src/index.js) for more.\n\n## Community\n\nLet\'s start one together! After you \xe2\x98\x85Star this project, follow me [@Rygu](https://twitter.com/rygu)\non Twitter.\n\n## License\n\nBSD 3-Clause license. Copyright \xc2\xa9 2015, Rick Wong. All rights reserved.\n'