b'\n<p align="center">\n    <img src="https://bunnyjs.com/img/bunnyjs-logo.png" alt="BunnyJS Logo">\n</p>\n\n# BunnyJS v 0.14.42 (Beta)\n\n[Website](https://bunnyjs.com) * [![NPM downloads/month](https://img.shields.io/npm/dm/bunnyjs.svg?style=flat-square)](https://www.npmjs.org/package/bunnyjs) [![NPM version](https://img.shields.io/npm/v/bunnyjs.svg?style=flat-square)](https://www.npmjs.org/package/bunnyjs) * [Gitter chat](https://gitter.im/bunny-js/Lobby) * [Contribute to Docs](https://github.com/bunnyjs/docs) * [Assets Builder](https://github.com/Mevrael/assets-builder)\n\n## ES6 browser framework\n\n### "Powerful like React, simple like jQuery"\n\n**BunnyJS** is a modern **Vanilla JS** and ES6 library and next-generation front-end framework, package of small stand-alone components without dependencies.\n\n* No dependencies - can be used in any project anywhere anytime\n* 0 learning curve - you can start right now, just plain JavaScript with simple architecture easy to maintain and extend\n* Designed in mind to build modern, complicated, real world business apps\n* Faster, simpler, enjoyable than any frontend framework\n* Large set of ready components, custom UI elements and utils\n* LTS\n\nFor help & ideas - [DM me on Twitter](https://twitter.com/Mevrael)\n\n## Browser support\n\nIE9+, last 2 versions of Chrome, Firefox, Safari, Android 4.4+, iOS 9+\n\n## Installation\n\n1. Install via `npm install bunnyjs --save`\n2. [Rollup.js](http://rollupjs.org) with babel and npm plugins is recommended for transpiling and bundling.\n3. Or you can just use [Assets Builder](https://github.com/Mevrael/assets-builder) which will automatically build your future JS and CSS with 1 command.\n4. Or just include into HTML already transpiled and minified JS from `dists` folder or any [CDN](https://unpkg.com/bunnyjs/dist).\n5. Probably some polyfills for IE might be required depending on Component.\n\n```html\n<script src="https://unpkg.com/bunnyjs/dist/..."></script>\n```\n\n## Extending BunnyJS and Vanilla JS objects\n\nRecommended way to use any of BunnyJS component is - *"do not change the code you do not own"*. That means do not modify native prototypes or any 3rd party code.\n\n1. Create some `base` or `core` folder in your app,\n2. Extend BunnyJS objects with `Object.assign()` or `Object.create`\n3. Now everywhere in your project import custom file and not directly BunnyJS\'s file.\n\n```javascript\n\nimport { Component as BunnyComponent } from \'bunnyjs/src/...\';\n\nexport const Component = Object.assign({}, BunnyComponent, {\n\n    init(arg) {\n        // do whatever you want\n        console.log(arg);\n\n        // call default (parent)\n        return BunnyComponent.init(arg);\n    }\n\n});\n\n```\n\n## Components\n\n1. Form processing with native API, AJAX submit, file upload, image preview, data binding and more\n1. Native HTML5 form validation ([View example](https://bunnyjs.com/examples/form-validation/))\n1. Facebook-like Messenger\n1. Custom selects, spinners,\n1. DOM utils, ready(), events\n1. Libraries for Date, URL, File, Image\n1. Ajax, APIs\n1. Routing\n1. Template engine\n1. DataTable and Pagination ([View example](https://bunnyjs.com/examples/datatable/))\n1. Calendar and DatePicker\n1. Autocomplete, Dropdown\n1. Element, positions, coordinates, smooth scrolling\n1. Dependency Injection, Inversion of control\n\n## Architecture\n\n1. Separation of concerns, loose coupling, modularity\n1. Functional programming\n1. ES6 import/exports, Promises\n1. Native Browser API, polyfills were needed\n1. Object literal notation, no prototypes, "classes" , "new"\n1. Object composition over inheritance\n1. Dependency injection\n\n\n## Contributors wanted\n\n* Become a contributor of a fast growing open source project\n* Share your ideas to the world\n* Help yourself and millions of developers around the world solving JavaScript fatigue and modern overendineered problem\n* Help building a tool which will provide a best user experience, performance, security, durability and load time for billions of the Internet users with smart usage of Computer\'s and Mobile device\'s resources\n\n## Local development, examples and dists generation\n\n* Make sure to install `npm install assets-builder` first.\n* Examples are located in the `examples` folder. File `index.html` can be opened in the browser to view examples. Examples are generated with `npm build`\n* To generate dists - `npm build dist -p`\n\n## Experimental components based on DOMObserver (Mutation Observer)\n\nLearn how to build [Vanilla JavaScript components on Medium.](https://medium.com/bunnyllc/vanilla-js-components-8d20c58b69f4#.qpwcm9mbn)\n\n`src/DOMObserver` may be used to listen for DOM events like when new tag (component) was inserted into DOM or removed. It is based on latest Mutation Observer API (IE11+) and allows to automatically init components inserted into DOM later.\n\nBunnyJS provides an experimental base abstract `src/Component` which may be used to create custom components:\n\n```html\n<script src="https://unpkg.com/bunnyjs/dist/component.min.js"></script>\n```\n\nBelow is [Clock](https://jsfiddle.net/o01mvsyn/) example from [Inferno](https://infernojs.org/). As you can see you can do everything in Vanilla JS with less code, size and it works natively.\n\n```javascript\n\nconst MyClock = Object.assign({}, Component, {\n\n  tagName: \'clock\',\n\n  attributes: {\n    date: new Date,\n  },\n\n  addEvents(clock) {\n    clock._timer = setInterval(() => {\n      clock.date = new Date;\n    }, 1000);\n  },\n\n  uninit(clock) {\n    clearInterval(clock._timer);\n  },\n\n  __date(clock, newVal) {\n    clock.textContent = newVal.toLocaleTimeString();\n  }\n\n});\n\nMyClock.register();\n```\n\nNow just `document.body.appendChild(document.createElement(\'clock\'))` and it works.\n\nTo update the whole "state" of the component you may just use Vanilla JS `Object.assign(component, {stateObject})`.\n\nFor example, you have a simple <btn> clicker. By clicking on it btn.counter is increased. You can update counter with `btn.counter = 1` or `Object.assign(document.getElementsByTagName(\'btn\')[0], {counter: 1})`;\n\nYou may also set default counter value with `<btn counter="6">`\n\nFor more examples look in `examples/component` folder.\n\n---\n\n&copy; [Mev-Rael](https://twitter.com/Mevrael)\n\n[MIT License](https://github.com/mevrael/bunny/blob/master/LICENSE)\n'