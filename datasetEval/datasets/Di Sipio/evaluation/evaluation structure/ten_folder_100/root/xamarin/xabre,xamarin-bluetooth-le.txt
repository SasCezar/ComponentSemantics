b'# <img src="icon_small.png" width="71" height="71"/> Bluetooth LE plugin for Xamarin ![Build Status](https://app.bitrise.io/app/3fe54d0a5f43c2bf/status.svg?token=i9LUY4rIecZWd_3j7hwXgw) \n\nXamarin and MvvMCross plugin for accessing the bluetooth functionality. The plugin is loosely based on the BLE implementation of [Monkey Robotics](https://github.com/xamarin/Monkey.Robotics). \n\n**Important Note:** With the term *"vanilla"* we mean the non MvvmCross/pure Xamarin version. You **can** use it without MvvmCross, if you download the vanilla package.\n\n## Support & Limitations\n\n| Platform  | Version | Limitations |\n| ------------- | ----------- | ----------- |\n| Xamarin.Android | 4.3 |  |\n| Xamarin.iOS     | 7.0 |  |\n| Xamarin.Mac     | 10.9 (Maveriks) |  >= v2.1.0 |\n| UWP             | 1709 - 10.0.16299 (Fall Creators Update) | TBA | \n\n[Changelog](doc/changelog.md)\n\n## Installation\n\n**Vanilla**\n\n```\n// stable\nInstall-Package Plugin.BLE\n// or pre-release\nInstall-Package Plugin.BLE -Pre\n```\n[![NuGet](https://img.shields.io/nuget/v/Plugin.BLE.svg?label=NuGet&style=flat-square)](https://www.nuget.org/packages/Plugin.BLE) [![NuGet Beta](https://img.shields.io/nuget/vpre/Plugin.BLE.svg?label=NuGet%20Beta&style=flat-square)](https://www.nuget.org/packages/Plugin.BLE)\n\n**MvvmCross**\n\n```\nInstall-Package MvvmCross.Plugin.BLE\n// or \nInstall-Package MvvmCross.Plugin.BLE -Pre\n```\n\n[![NuGet MvvMCross](https://img.shields.io/nuget/v/MvvmCross.Plugin.BLE.svg?label=NuGet%20MvvMCross&style=flat-square)](https://www.nuget.org/packages/MvvmCross.Plugin.BLE) [![NuGet MvvMCross Beta](https://img.shields.io/nuget/vpre/MvvmCross.Plugin.BLE.svg?label=NuGet%20MvvMCross%20Beta&style=flat-square)](https://www.nuget.org/packages/MvvmCross.Plugin.BLE)\n\n**Android**\n\nAdd these permissions to AndroidManifest.xml. For Marshmallow and above, please follow [Requesting Runtime Permissions in Android Marshmallow](https://blog.xamarin.com/requesting-runtime-permissions-in-android-marshmallow/) and don\'t forget to prompt the user for the location permission.\n\n```xml\n<uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />\n<uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />\n<uses-permission android:name="android.permission.BLUETOOTH" />\n<uses-permission android:name="android.permission.BLUETOOTH_ADMIN" />\n```\n\nAdd this line to your manifest if you want to declare that your app is available to BLE-capable devices **only**:\n```xml\n<uses-feature android:name="android.hardware.bluetooth_le" android:required="true"/>\n````\n\n**iOS**\n\nOn iOS you must add the following keys to your `Info.plist`\n\n    <key>UIBackgroundModes</key>\n    <array>\n        <!--for connecting to devices (client)-->\n        <string>bluetooth-central</string>\n    \n        <!--for server configurations if needed-->\n        <string>bluetooth-peripheral</string>\n    </array>\n    \n    <!--Description of the Bluetooth request message (required on iOS 10, deprecated)-->\n    <key>NSBluetoothPeripheralUsageDescription</key>\n    <string>YOUR CUSTOM MESSAGE</string>\n    \n    <!--Description of the Bluetooth request message (required on iOS 13)-->\n    <key>NSBluetoothAlwaysUsageDescription</key>\n    <string>YOUR CUSTOM MESSAGE</string>\n\n## Sample app\n\nWe provide a sample Xamarin.Forms app, that is a basic bluetooth LE scanner. With this app, it\'s possible to \n\n- check the ble status\n- discover devices\n- connect/disconnect\n- discover the services\n- discover the characteristics\n- see characteristic details\n- read/write and register for notifications of a characteristic\n\nHave a look at the code and use it as starting point to learn about the plugin and play around with it.\n\n## Usage  \n\n**Vanilla**\n\n```csharp\nvar ble = CrossBluetoothLE.Current;\nvar adapter = CrossBluetoothLE.Current.Adapter;\n```\n\n**MvvmCross**\n\nThe MvvmCross plugin registers `IBluetoothLE` and  `IAdapter` as lazy initialized singletons. You can resolve/inject them as any other MvvmCross service. You don\'t have to resolve/inject both. It depends on your use case.\n\n```csharp\nvar ble = Mvx.Resolve<IBluetoothLE>();\nvar adapter = Mvx.Resolve<IAdapter>();\n```\nor\n```csharp\nMyViewModel(IBluetoothLE ble, IAdapter adapter)\n{\n    this.ble = ble;\n    this.adapter = adapter;\n}\n```\n\nPlease make sure you have this code in your LinkerPleaseLink.cs file\n\n```csharp\npublic void Include(MvvmCross.Plugins.BLE.iOS.Plugin plugin)\n{\n    plugin.Load();\n}\n```\n\n### IBluetoothLE\n#### Get the bluetooth status\n```csharp\nvar state = ble.State;\n```\nYou can also listen for State changes. So you can react if the user turns on/off bluetooth on you smartphone.\n```csharp\nble.StateChanged += (s, e) => \n{\n    Debug.WriteLine($"The bluetooth state changed to {e.NewState}");\n};\n```\n\n\n### IAdapter\n#### Scan for devices\n```csharp\nadapter.DeviceDiscovered += (s,a) => deviceList.Add(a.Device);\nawait adapter.StartScanningForDevicesAsync();\n```\n\n##### ScanTimeout\nSet `adapter.ScanTimeout` to specify the maximum duration of the scan.\n\n##### ScanMode\nSet `adapter.ScanMode` to specify scan mode. It must be set **before** calling `StartScanningForDevicesAsync()`. Changing it while scanning, will not affect the current scan.\n\n#### Connect to device\n`ConnectToDeviceAsync` returns a Task that finishes if the device has been connected successful. Otherwise a `DeviceConnectionException` gets thrown.\n\n```csharp\ntry \n{\n    await _adapter.ConnectToDeviceAsync(device);\n}\ncatch(DeviceConnectionException e)\n{\n    // ... could not connect to device\n}\n```\n\n#### Connect to known Device\n`ConnectToKnownDeviceAsync` can connect to a device with a given GUID. This means that if the device GUID is known, no scan is necessary to connect to a device. This can be very useful for a fast background reconnect.\nAlways use a cancellation token with this method. \n- On **iOS** it will attempt to connect indefinitely, even if out of range, so the only way to cancel it is with the token.\n- On **Android** this will throw a GATT ERROR in a couple of seconds if the device is out of range.\n\n```csharp\ntry \n{\n    await _adapter.ConnectToKnownDeviceAsync(guid, cancellationToken);\n}\ncatch(DeviceConnectionException e)\n{\n    // ... could not connect to device\n}\n```\n\n#### Get services\n```csharp\nvar services = await connectedDevice.GetServicesAsync();\n```\nor get a specific service:\n```csharp\nvar service = await connectedDevice.GetServiceAsync(Guid.Parse("ffe0ecd2-3d16-4f8d-90de-e89e7fc396a5"));\n```\n\n#### Get characteristics\n```csharp\nvar characteristics = await service.GetCharacteristicsAsync();\n```\nor get a specific characteristic:\n```csharp\nvar characteristic = await service.GetCharacteristicAsync(Guid.Parse("d8de624e-140f-4a22-8594-e2216b84a5f2"));\n```\n\n#### Read characteristic\n```csharp\nvar bytes = await characteristic.ReadAsync();\n```\n\n#### Write characteristic\n```csharp\nawait characteristic.WriteAsync(bytes);\n```\n\n#### Characteristic notifications\n```csharp\ncharacteristic.ValueUpdated += (o, args) =>\n{\n    var bytes = args.Characteristic.Value;\n};\n\nawait characteristic.StartUpdatesAsync();\n\n```\n\n#### Get descriptors\n```csharp\nvar descriptors = await characteristic.GetDescriptorsAsync();\n```\n\n#### Read descriptor\n```csharp\nvar bytes = await descriptor.ReadAsync();\n```\n\n#### Write descriptor\n```csharp\nawait descriptor.WriteAsync(bytes);\n```\n\n#### Get System Devices\n        \nReturns all BLE devices connected or bonded (only Android) to the system. In order to use the device in the app you have to first call ConnectAsync.\n- For iOS the implementation uses get [retrieveConnectedPeripherals(services)](https://developer.apple.com/reference/corebluetooth/cbcentralmanager/1518924-retrieveconnectedperipherals)\n- For Android this function merges the functionality of thw following API calls:\n    - [getConnectedDevices](https://developer.android.com/reference/android/bluetooth/BluetoothManager.html#getConnectedDevices(int))\n    - [getBondedDevices()](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getBondedDevices()) \n\n  \n```csharp\n\nvar systemDevices = adapter.GetSystemConnectedOrPairedDevices();\n\nforeach(var device in systemDevices)\n{\n    await _adapter.ConnectToDeviceAsync(device); \n}\n\n```\n## Caution! Important remarks / API limitations\n\nThe BLE API implementation (especially on **Android**) has the following limitations:\n\n- *Characteristic/Descriptor Write*: make sure you call characteristic.**WriteAsync**(...) from the **main thread**, failing to do so will most probably result in a GattWriteError.\n- *Sequential calls*: **Always** wait for the previous BLE command to finish before invoking the next. The Android API needs it\'s calls to be serial, otherwise calls that do not wait for the previous ones will fail with some type of GattError. A more explicit example: if you call this in your view lifecycle (onAppearing etc) all these methods return **void** and 100% don\'t quarantee that any await bleCommand() called here will be truly awaited by other lifecycle methods.\n- *Scan wit services filter*: On **specifically Android 4.3** the *scan services filter does not work* (due to the underlying android implementation). For android 4.3 you will have to use a workaround and scan without a filter and then manually filter by using the advertisement data (which contains the published service GUIDs).\n\n## Best practice\n\n### API\n- Surround Async API calls in try-catch blocks. Most BLE calls can/will throw an exception in certain cases, this is especially true for Android. We will try to update the xml doc to reflect this.\n```csharp\n    try\n    {\n        await _adapter.ConnectToDeviceAsync(device);\n    }\n    catch(DeviceConnectionException ex)\n    {\n        //specific\n    }\n    catch(Exception ex)\n    {\n        //generic\n    }\n```\n- **Avoid caching of Characteristic or Service instances between connection sessions**. This includes saving a reference to them in you class between connection sessions etc. After a device has been disconnected all Service & Characteristic instances become **invalid**. Allways **use GetServiceAsync and GetCharacteristicAsync to get a valid instance**.\n \n### General BLE iOS, Android\n\n- Scanning: Avoid performing ble device operations like Connect, Read, Write etc while scanning for devices. Scanning is battery-intensive.\n    - try to stop scanning before performing device operations (connect/read/write/etc)\n    - try to stop scanning as soon as you find the desired device\n    - never scan on a loop, and set a time limit on your scan\n\n## How to build the nuget package\n### On Windows\n1) Build\n\n    Open a cmd console windows and cd to the folder of "xamarin-bluetooth-le\\\\.build", then run `build.bat`.\n\n2) pack the nuget\n\n    `nuget pack Plugin.BLE.nuspec -BasePath out\\lib\\`\n    \n    `nuget pack MvvmCross.Plugin.BLE.nuspec -BasePath out\\lib\\`\n\n\n\n## Extended topics\n\n- [How to set custom trace method?](doc/howto_custom_trace.md)\n- [Characteristic Properties](doc/characteristics.md)\n- [Scan Mode Mapping](doc/scanmode_mapping.md)\n- [iOS state restoration (basic support)](doc/ios_state_restoration.md)\n\n\n## Useful Links\n\n- [Android Bluetooth LE guideline](https://developer.android.com/guide/topics/connectivity/bluetooth-le.html)\n- [iOS CoreBluetooth Best Practices](https://developer.apple.com/library/ios/documentation/NetworkingInternetWeb/Conceptual/CoreBluetooth_concepts/BestPracticesForInteractingWithARemotePeripheralDevice/BestPracticesForInteractingWithARemotePeripheralDevice.html)\n- [iOS CoreBluetooth Background Modes](https://developer.apple.com/library/archive/documentation/NetworkingInternetWeb/Conceptual/CoreBluetooth_concepts/CoreBluetoothBackgroundProcessingForIOSApps/PerformingTasksWhileYourAppIsInTheBackground.html#//apple_ref/doc/uid/TP40013257-CH7-SW7)\n- [MvvmCross](https://github.com/MvvmCross)\n- [Monkey Robotics](https://github.com/xamarin/Monkey.Robotics)\n\n## How to contribute\n\nWe usually do our development work on a branch with the name of the milestone. So please base your pull requests on the currently open development branch.\n\n## Licence\n\n[Apache 2.0](https://github.com/xabre/MvvmCross-BluetoothLE/blob/master/LICENSE)\n\n\n\n\n'