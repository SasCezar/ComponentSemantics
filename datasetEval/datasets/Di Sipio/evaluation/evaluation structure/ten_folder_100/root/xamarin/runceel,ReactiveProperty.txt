b'[Japanese](http://blog.okazuki.jp/entry/2015/12/05/221154)\n\n# ReactiveProperty\n\nReactiveProperty provides MVVM and asynchronous support features under Reactive Extensions. Target framework is .NET Standard 2.0.\n\n![](https://img.shields.io/nuget/v/ReactiveProperty.svg)\n![](https://img.shields.io/nuget/dt/ReactiveProperty.svg)\n\n![ReactiveProperty overview](Images/rpsummary.png)\n\nReactiveProperty is very powful and simple library.\n\n![Delay and Select](Images/launch-uwp-app.gif)\n\nThis sample app\'s ViewModel code is as below:\n\n```cs\npublic class MainPageViewModel\n{\n    public ReactiveProperty<string> Input { get; }\n    public ReadOnlyReactiveProperty<string> Output { get; }\n    public MainPageViewModel()\n    {\n        Input = new ReactiveProperty<string>("");\n        Output = Input\n            .Delay(TimeSpan.FromSeconds(1))\n            .Select(x => x.ToUpper())\n            .ToReadOnlyReactiveProperty();\n    }\n}\n```\n\nIt\'s LINQ and Rx magic.\n\nAll steps are written getting started section in the [ReactiveProperty documentation](https://runceel.github.io/ReactiveProperty/).\n\nThis library\'s concept is "Fun programing". \nViewModel code which using ReactiveProperty is very simple.\n\n\nViewModel\'s popular implementation is as below:\n```cs\npublic class AViewModel : INotifyPropertyChanged\n{\n    public event PropertyChangedEventHandler PropertyChanged;\n\n    private string _name;\n    public string Name\n    {\n        get => _name;\n        set\n        {\n            _name = value;\n            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(nameof(Name)));\n\n            // Update a command status\n            DoSomethingCommand.RaiseCanExecuteChanged();\n        }\n    }\n\n    private string _memo;\n    public string Memo\n    {\n        get => _memo;\n        set\n        {\n            _memo = value;\n            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(nameof(Memo)));\n\n            // Update a command status\n            DoSomethingCommand.RaiseCanExecuteChanged();\n        }\n    }\n\n    // DelegateCommand is plane ICommand implementation.\n    public DelegateCommand DoSomethingCommand { get; }\n\n    public AViewModel()\n    {\n        DoSomethingCommand = new DelegateCommand(\n            () => { ... },\n            () => !string.IsNullOrEmpty(Name) && !string.IsNullOrEmpty(Memo)\n        );\n    }\n}\n```\n\nBinding code is as below:\n```xml\n<TextBlock Text="{Binding Name}">\n<TextBlock Text="{Binding Memo}">\n```\n\nViewModel\'s implementation using ReactiveProperty is as below:\n```cs\npublic class AViewModel\n{\n    public ReactiveProperty<string> Name { get; }\n    public ReactiveProperty<string> Memo { get; }\n    public ReactiveCommand DoSomethingCommand { get; }\n\n    public AViewModel()\n    {\n        Name = new ReactiveProperty<string>()\n            .SetValidateNotifyError(x => string.IsNullOrEmpty(x) ? "Invalid value" : null);\n        Memo = new ReactiveProperty<string>()\n            .SetValidateNotifyError(x => string.IsNullOrEmpty(x) ? "Invalid value" : null);\n        DoSomethingCommand = new[]\n            {\n                Name.ObserveHasErrors,\n                Memo.ObserveHasErrors,\n            }\n            .CombineLatestValuesAreAllFalse()\n            .ToReactiveCommand()\n            .WithSubscribe(() => { ... });\n    }\n}\n```\n\nBinding code is as below:\n```xml\n<TextBlock Text="{Binding Name.Value}">\n<TextBlock Text="{Binding Memo.Value}">\n```\n\nIt\'s very simple.\n\nReactiveProperty doesn\'t provide base class by ViewModel.\nIt\'s means that ReactiveProperty can use together the another MVVM library like Prism, MVVMLight, etc...\n\n## Documentation\n\n[ReactiveProperty documentation](https://runceel.github.io/ReactiveProperty/)\n\n## NuGet\n\n[ReactiveProperty](https://www.nuget.org/packages/ReactiveProperty)\n\n## Support\n\nI\'m not watching Stackoverflow and other forums to support ReactiveProperty, so please feel free ask to question at Github issues.\nI\'m available Japanese(1st language) and English(2nd language).\n\nIf questions became huge numbers, then I would separate posting place about feature requests, issues, questions.\n\n## Author info\n\nYoshifumi Kawai a.k.a. [@neuecc](https://twitter.com/neuecc) is software developer in Tokyo, Japan.\nAwarded Microsoft MVP for Visual Studio and Development Technologies since April, 2011.\nHe is an original owner of ReactiveProperty.\n\nTakaaki Suzuki a.k.a. [@xin9le](https://twitter.com/xin9le) software devleoper in Tokyo, Japan.\nAwarded Microsoft MVP for Visual Studio and Development Technologies since July, 2012.\n\nKazuki Ota a.k.a. [@okazuki](https://twitter.com/okazuki) software developer in Tokyo, Japan.\nAwarded Microsoft MVP for Windows Development since July 2011 to Feb 2017.\nNow, working at Microsoft Japan.\n'