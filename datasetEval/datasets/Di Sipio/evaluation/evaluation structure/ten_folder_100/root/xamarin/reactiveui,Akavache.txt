b'## Akavache: An Asynchronous Key-Value Store for Native Applications \n\n[![NuGet Stats](https://img.shields.io/nuget/v/akavache.svg)](https://www.nuget.org/packages/akavache) [![Build Status](https://dev.azure.com/dotnet/ReactiveUI/_apis/build/status/Akavache-CI)](https://dev.azure.com/dotnet/ReactiveUI/_build/latest?definitionId=25) [![Code Coverage](https://codecov.io/gh/reactiveui/akavache/branch/master/graph/badge.svg)](https://codecov.io/gh/reactiveui/akavache)\n<br>\n<a href="https://www.nuget.org/packages/akavache">\n        <img src="https://img.shields.io/nuget/dt/akavache.svg">\n</a>\n<a href="#backers">\n        <img src="https://opencollective.com/reactiveui/backers/badge.svg">\n</a>\n<a href="#sponsors">\n        <img src="https://opencollective.com/reactiveui/sponsors/badge.svg">\n</a>\n<a href="https://reactiveui.net/slack">\n        <img src="https://img.shields.io/badge/chat-slack-blue.svg">\n</a>\n\nAkavache is an *asynchronous*, *persistent* (i.e. writes to disk) key-value\nstore created for writing desktop and mobile applications in C#, based on\nSQLite3. Akavache is great for both storing important data (i.e. user\nsettings) as well as cached local data that expires.\n\n![Dat Logo](http://f.cl.ly/items/2R3d1o122m090K0W081L/Akavache.png)\n\n### Where can I use it?\n\nAkavache is currently compatible with:\n\n* Xamarin.iOS / Xamarin.Mac\n* Xamarin.Android\n* .NET 4.5 Desktop (WPF)\n* Windows Phone 8.1 Universal Apps\n* Windows 10 (Universal Windows Platform)\n* Tizen 4.0\n\n### What does that mean?\n\nDownloading and storing remote data from the internet while still keeping the\nUI responsive is a task that nearly every modern application needs to do.\nHowever, many applications that don\'t take the consideration of caching into\nthe design from the start often end up with inconsistent, duplicated code for\ncaching different types of objects.\n\n[Akavache](https://github.com/github/akavache) is a library that makes common app\npatterns easy, and unifies caching of different object types (i.e. HTTP\nresponses vs. JSON objects vs. images).\n\nIt\'s built on a core key-value byte array store (conceptually similar to a\n`Dictionary<string, byte[]>`), and on top of that store, extensions are\nadded to support:\n\n- Arbitrary objects via JSON.NET\n- Fetching and loading Images and URLs from the Internet\n- Storing and automatically encrypting User Credentials\n\n## Platform-specific notes\n\n* **Xamarin.iOS / Xamarin.Mac** - No issues.\n\n* **Xamarin.Android** - No issues.\n\n* **.NET 4.5 Desktop (WPF)** - No issues.\n\n* **Windows Phone 8.1 Universal Apps** - You must mark your application as `x86`\n  or `ARM`, or else you will get a strange runtime error about SQLitePCL_Raw not\n  loading correctly. You must *also* ensure that the Microsoft Visual C++ runtime\n  is added to your project.\n\n* **Windows 10 (Universal Windows Platform)** - You must mark your application as `x86`\n  or `ARM`, or else you will get a strange runtime error about SQLitePCL_Raw not\n  loading correctly. You must *also* ensure that the Microsoft Visual C++ runtime\n  is added to your project.\n\n* **Tizen 4.0** - No issues.\n\n### Getting Started\n\nInteracting with Akavache is primarily done through an object called\n`BlobCache`. At App startup, you must first set your app\'s name via\n`BlobCache.ApplicationName` or `Akavache.Registrations.Start("ApplicationName")` . After setting your app\'s name, you\'re ready to save some data.\n\n#### Choose a location\nThere are four build-in locations, that have some magic applied on some systems:\n\n* `BlobCache.LocalMachine` - Cached data. This data may get deleted without notification.\n* `BlobCache.UserAccount` - User settings. Some systems backup this data to the cloud.\n* `BlobCache.Secure` - For saving sensitive data - like credentials.\n* `BlobCache.InMemory` - A database, kept in memory. The data is stored for the lifetime of the app. \n\n#### The magic\n\n* **Xamarin.iOS** may remove data, stored in `BlobCache.LocalMachine`, to free up disk space (only if your app is not running). The locations `BlobCache.UserAccount` and `BlobCache.Secure` will be backed up to iCloud and iTunes. (https://developer.apple.com/library/content/documentation/FileManagement/Conceptual/FileSystemProgrammingGuide/FileSystemOverview/FileSystemOverview.html#//apple_ref/doc/uid/TP40010672-CH2-SW1)\n* **Xamarin.Android** may also start deleting data, stored in `BlobCache.LocalMachine`, if the system runs out of disk space. It isn\'t clearly specified if your app could be running while the system is cleaning this up. (https://developer.android.com/reference/android/content/Context.html#getCacheDir%28%29)\n* **Windows 10 (UWP)** will replicate `BlobCache.UserAccount` and `BlobCache.Secure` to the cloud and synchronize it to all user devices on which the app is installed (https://msdn.microsoft.com/en-us/library/windows/apps/hh465094.aspx)\n\n#### Let\'s start off\n\nThe most straightforward way to use Akavache is via the object extensions:\n\n```cs\nusing System.Reactive.Linq;   // IMPORTANT - this makes await work!\n\n// Make sure you set the application name before doing any inserts or gets\nAkavache.Registrations.Start("AkavacheExperiment")\n\nvar myToaster = new Toaster();\nawait BlobCache.UserAccount.InsertObject("toaster", myToaster);\n\n//\n// ...later, in another part of town...\n//\n\n// Using async/await\nvar toaster = await BlobCache.UserAccount.GetObject<Toaster>("toaster");\n\n// or without async/await\nToaster toaster;\n\nBlobCache.UserAccount.GetObject<Toaster>("toaster")\n    .Subscribe(x => toaster = x, ex => Console.WriteLine("No Key!"));\n```\n### Handling Xamarin Linker\n\nThere are two options to ensure the Akavache.Sqlite3 dll will not be removed by Xamarin build tools\n\n#### 1) Add a file to reference the types\n```cs\npublic static class LinkerPreserve\n{\n  static LinkerPreserve()\n  {\n    var persistentName = typeof(SQLitePersistentBlobCache).FullName;\n    var encryptedName = typeof(SQLiteEncryptedBlobCache).FullName;\n  }\n}\n```\n\n#### 2) Use the following initializer in your cross platform library or in your head project\n```cs\nAkavache.Registrations.Start("ApplicationName")\n```\n\n### Handling Errors\n\nWhen a key is not present in the cache, GetObject throws a\nKeyNotFoundException (or more correctly, OnError\'s the IObservable). Often,\nyou would want to return a default value instead of failing:\n\n```cs\nToaster toaster;\n\ntry {\n    toaster = await BlobCache.UserAccount.GetObject("toaster");\n} catch (KeyNotFoundException ex) {\n    toaster = new Toaster();\n}\n\n// Or without async/await:\ntoaster = await BlobCache.UserAccount.GetObject<Toaster>("toaster")\n    .Catch(Observable.Return(new Toaster()));\n```\n\n### Shutting Down\n\nCritical to the integrity of your Akavache cache is the `BlobCache.Shutdown()` method. You *must* call this when your application shuts down. Moreover, be sure to wait for the result:\n\n```cs\nBlobCache.Shutdown().Wait();\n```\n\nFailure to do this may mean that queued items are not flushed to the cache.\n\n### Using a different SQLitePCL.raw bundle, e.g., Microsoft.AppCenter\n- Install the `akavache.sqlite3` nuget instead of `akavache`\n- Install the SQLitePCLRaw bundle you want to use, e.g., `SQLitePCLRaw.bundle_green`\n- Use `Akavache.Sqlite3.Registrations.Start("ApplicationName", () => SQLitePCL.Batteries_V2.Init());` in your platform projects or in your cross platform project.\n\n```XAML\n<PackageReference Include="akavache.sqlite3" Version="6.0.40-g7e90c572c6" />\n<PackageReference Include="SQLitePCLRaw.bundle_green" Version="1.1.11" />\n```\n```cs\nAkavache.Sqlite3.Registrations.Start("ApplicationName", () => SQLitePCL.Batteries_V2.Init());\n```\n\nFor more info about using your own versions of [SqlitePCL.raw](https://github.com/ericsink/SQLitePCL.raw/wiki/Using-multiple-libraries-that-use-SQLitePCL.raw)\n\n\n### Examining Akavache caches\n\nUsing [Akavache Explorer](https://github.com/anaisbetts/AkavacheExplorer), you\ncan dig into Akavache repos for debugging purposes to see what has been stored.\n\n![](http://f.cl.ly/items/2D3Y0L0k262X0U0y3B0e/Image%202012.05.07%206:57:48%20PM.png)\n\n### What\'s this Global Variable nonsense? Why can\'t I use $FAVORITE_IOC_LIBRARY\n\nYou totally can. Just instantiate `SQLitePersistentBlobCache` or\n`SQLiteEncryptedBlobCache` instead - the static variables are there just to make it\neasier to get started.\n\n### DateTime/DateTimeOffset Considerations ###\n\nOur default implementation overrides BSON to read and write DateTime\'s as UTC.\nTo override the reader\'s behavior you can set `BlobCache.ForcedDateTimeKind` as in the following example:\n\n```cs\n// Sets the reader to return DateTime/DateTimeOffset in Local.\nBlobCache.ForcedDateTimeKind = DateTimeKind.Local;\n```\n\n`DateTime` are stored as ticks for high precision.\n`DateTimeOffset` are stored as ticks for both the Date/Time aspect and the offset.\n\n## Basic Method Documentation\n\nEvery blob cache supports the basic raw operations given below (some of them are\nnot implemented directly, but are added on via extension methods):\n\n```cs\n/*\n * Get items from the store\n */\n\n// Get a single item\nIObservable<byte[]> Get(string key);\n\n// Get a list of items\nIObservable<IDictionary<string, byte[]>> Get(IEnumerable<string> keys);\n\n// Get an object serialized via InsertObject\nIObservable<T> GetObject<T>(string key);\n\n// Get all objects of type T\nIObservable<IEnumerable<T>> GetAllObjects<T>();\n\n// Get a list of objects given a list of keys\nIObservable<IDictionary<string, T>> GetObjects<T>(IEnumerable<string> keys);\n\n/*\n * Save items to the store\n */\n\n// Insert a single item\nIObservable<Unit> Insert(string key, byte[] data, DateTimeOffset? absoluteExpiration = null);\n\n// Insert a set of items\nIObservable<Unit> Insert(IDictionary<string, byte[]> keyValuePairs, DateTimeOffset? absoluteExpiration = null);\n\n// Insert a single object\nIObservable<Unit> InsertObject<T>(string key, T value, DateTimeOffset? absoluteExpiration = null);\n\n// Insert a group of objects\nIObservable<Unit> InsertObjects<T>(IDictionary<string, T> keyValuePairs, DateTimeOffset? absoluteExpiration = null);\n\n/*\n * Remove items from the store\n */\n\n// Delete a single item\nIObservable<Unit> Invalidate(string key);\n\n// Delete a list of items\nIObservable<Unit> Invalidate(IEnumerable<string> keys);\n\n// Delete a single object (do *not* use Invalidate for items inserted with InsertObject!)\nIObservable<Unit> InvalidateObject<T>(string key);\n\n// Deletes a list of objects\nIObservable<Unit> InvalidateObjects<T>(IEnumerable<string> keys);\n\n// Deletes all items (regardless if they are objects or not)\nIObservable<Unit> InvalidateAll();\n\n// Deletes all objects of type T\nIObservable<Unit> InvalidateAllObjects<T>();\n\n/*\n * Get Metadata about items\n */\n\n// Return a list of all keys. Use for debugging purposes only.\nIObservable<IEnumerable<string>> GetAllKeys();\n\n// Return the time which an item was created\nIObservable<DateTimeOffset?> GetCreatedAt(string key);\n\n// Return the time which an object of type T was created\nIObservable<DateTimeOffset?> GetObjectCreatedAt<T>(string key);\n\n// Return the time which a list of keys were created\nIObservable<IDictionary<string, DateTimeOffset?>> GetCreatedAt(IEnumerable<string> keys);\n\n/*\n * Utility methods\n */\n\n// Attempt to ensure all outstanding operations are written to disk\nIObservable<Unit> Flush();\n\n// Preemptively drop all expired keys and run SQLite\'s VACUUM method on the\n// underlying database\nIObservable<Unit> Vacuum();\n```\n\n## Extension Method Documentation\n\nOn top of every `IBlobCache` object, there are extension methods that help with\ncommon application scenarios:\n\n```cs\n/*\n * Username / Login Methods (only available on ISecureBlobCache)\n */\n\n// Save login information for the given host\nIObservable<Unit> SaveLogin(string user, string password, string host = "default", DateTimeOffset? absoluteExpiration = null);\n\n// Load information for the given host\nIObservable<LoginInfo> GetLoginAsync(string host = "default");\n\n// Erase information for the given host\nIObservable<Unit> EraseLogin(string host = "default");\n\n/*\n * Downloading and caching URLs and Images\n */\n\n// Download a file as a byte array\nIObservable<byte[]> DownloadUrl(string url,\n    IDictionary<string, string> headers = null,\n    bool fetchAlways = false,\n    DateTimeOffset? absoluteExpiration = null);\n\n// Load a given key as an image\nIObservable<IBitmap> LoadImage(string key, float? desiredWidth = null, float? desiredHeight = null);\n\n// Download an image from the network and load it\nIObservable<IBitmap> LoadImageFromUrl(string url,\n    bool fetchAlways = false,\n    float? desiredWidth = null,\n    float? desiredHeight = null,\n    DateTimeOffset? absoluteExpiration = null);\n\n/*\n * Composite operations\n */\n\n// Attempt to return an object from the cache. If the item doesn\'t\n// exist or returns an error, call a Func to return the latest\n// version of an object and insert the result in the cache.\nIObservable<T> GetOrFetchObject<T>(string key, Func<Task<T>> fetchFunc, DateTimeOffset? absoluteExpiration = null);\n\n// Like GetOrFetchObject, but isn\'t async\nIObservable<T> GetOrCreateObject<T>(string key, Func<T> fetchFunc, DateTimeOffset? absoluteExpiration = null);\n\n// Immediately return a cached version of an object if available, but *always*\n// also execute fetchFunc to retrieve the latest version of an object.\nIObservable<T> GetAndFetchLatest<T>(this IBlobCache This,\n    string key,\n    Func<IObservable<T>> fetchFunc,\n    Func<DateTimeOffset, bool> fetchPredicate = null,\n    DateTimeOffset? absoluteExpiration = null,\n    bool shouldInvalidateOnError = false,\n    Func<T, bool> cacheValidationPredicate = null)\n```\n'