b'# Scalar Scientific Calculator, Charts & Scripts - my new project\n\n[![Scalar-Lite](http://scalarmath.org/wp-content/uploads/2019/01/scalar-promo-screens.png)](https://play.google.com/store/apps/details?id=org.mathparser.scalar.lite)\n\n### Scalar in action\n\n[![Scalar-Lite](https://scalarmath.org/wp-content/uploads/2019/04/scalar-math.jpg)](https://youtu.be/HUlEUaioogQ)\n\n### Scalar - Free version\n[<img src="https://play.google.com/intl/en_us/badges/images/generic/en_badge_web_generic.png" width="300">](https://play.google.com/store/apps/details?id=org.mathparser.scalar.lite&amp;pcampaignid=MKT-Other-global-all-co-prtnr-py-PartBadge-Mar2515-1)\n\n### Scalar Pro - Full paid version\n[<img src="https://play.google.com/intl/en_us/badges/images/generic/en_badge_web_generic.png" width="300">](https://play.google.com/store/apps/details?id=org.mathparser.scalar.pro&amp;pcampaignid=MKT-Other-global-all-co-prtnr-py-PartBadge-Mar2515-1)\n\n# MathParser.org-mXparser\n\n![mXparser icon](http://mathparser.org/wp-content/uploads/2017/07/mxparser-logo.png)\n\n![01-mXparser-calc](http://mathparser.org/wp-content/uploads/2017/05/01-mXparser-calc.gif)\n\n# mXparser - optional donation\n\n[![paypall-donation](http://mathparser.org/wp-content/uploads/2017/07/paypall-donation.png)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=QJYYH86583LEN)\n\n# mXparser - a super easy, rich and highly flexible Mathematical Expression Parser (Math Parser, Expression Evaluator) library for JAVA, Android and C# .NET.\n    ### 01.01.2019: first 100000 downloads!\n    ### 01.08.2018: first 60000 downloads!\n    ### 20.11.2017: first 20000 downloads!\n    ### 01.09.2017: first 15000 downloads!\n    ### 04.05.2017: first 10000 downloads!\n    ### 31.03.2016: first 1000 downloads!\n    \n![02-mXparser-sin.gif](http://mathparser.org/wp-content/uploads/2017/05/02-mXparser-sin.gif)\n\n**mXparser** is **a highly flexible parser of mathematical expressions provided as text**. Software delivers easy to use API for JAVA and C# .NET. \n\n# Supported frameworks\n![mXparser frameworks](http://mathparser.org/wp-content/uploads/2017/05/supported-frameworks.png)\n- JAVA: 1.5, 1.6, 1.7, 1.8\n- Android - tested with mxparser compiled using jdk 1.7\n- .NET / MONO: 2.0, 3.0, 3.5, 4.0, 4.5, 4.6, 4.7 (CLS)\n- .NET Core\n- .NET Standard, .NET PCL\n- Xamarin.Android\n- Xamarin.iOS\n\n![03-mXparser-sum.gif](http://mathparser.org/wp-content/uploads/2017/05/03-mXparser-sum.gif)\n\n# JAVA intro\n![mXparser demo](http://mathparser.org/wp-content/uploads/2017/05/mxparser-demo-r2.gif)\n\n# C# intro\n![mXparser demo - csharp](http://mathparser.org/wp-content/uploads/2017/05/mxparser-demo-vs-r2.gif)\n# Tutorial\n\n![mXparser tutorial](http://mathparser.org/wp-content/uploads/2017/05/mXparser-tutorial.png)\n\n# [>>> Click to learn from examples <<<](http://mathparser.org/mxparser-tutorial/)\n\n# Main functionalities:\n- **basic operators**, i.e.: +, -, *, ^, !\n- **[Boolean logic](http://mathparser.org/api/org/mariuszgromada/math/mxparser/mathcollection/BooleanAlgebra.html)** operators i.e.: or, and, xor\n- **[binary relations](http://mathparser.org/api/org/mariuszgromada/math/mxparser/mathcollection/BinaryRelations.html)** i.e.: =, <, >\n- **[math functions](http://mathparser.org/api/org/mariuszgromada/math/mxparser/mathcollection/MathFunctions.html)** (large library of 1-arg, 2-arg, 3-arg - functions) i.e.: sin, cos, Stirling numbers, log, inverse functions\n- **[constants](http://mathparser.org/api/org/mariuszgromada/math/mxparser/mathcollection/MathConstants.html)** (large library), i.e.: pi, e, golden ratio\n- **n-args functions**, i.e.: [greatest common divisor](http://mathparser.org/api/org/mariuszgromada/math/mxparser/mathcollection/MathFunctions.html#gcd-int...-)\n- **[iterated summation and product operators](http://mathparser.org/api/org/mariuszgromada/math/mxparser/mathcollection/NumberTheory.html#sigmaSummation-org.mariuszgromada.math.mxparser.Expression-org.mariuszgromada.math.mxparser.Argument-double-double-double-)**\n- **[differentiation and integration](http://mathparser.org/api/org/mariuszgromada/math/mxparser/mathcollection/NumericalAnalysis.html)**\n\n\n# High flexibility functionalities\n- **[user defined constants](http://mathparser.org/api/org/mariuszgromada/math/mxparser/Constant.html)** and arguments, both free - and dependent on other arguments + possibility of use in functions\n- **[user defined functions](http://mathparser.org/api/org/mariuszgromada/math/mxparser/Function.html)** (both free and depended)\n- **[user defined recursive arguments](http://mathparser.org/api/org/mariuszgromada/math/mxparser/RecursiveArgument.html)** + simple (controlled) recursion (1 recursive argument)\n- **[user defined recursive functions / expressions (any)](http://mathparser.org/api/org/mariuszgromada/math/mxparser/Function.html#getRecursiveMode--)** - complex, many arguments, no limitation \n- **[internal syntax checking](http://mathparser.org/api/org/mariuszgromada/math/mxparser/Expression.html#checkSyntax--)**\n- **[internal help](http://mathparser.org/api/org/mariuszgromada/math/mxparser/Expression.html#getHelp--)**\n- other useful functionalities, i.e.: [computing time](http://mathparser.org/api/org/mariuszgromada/math/mxparser/Expression.html#getComputingTime--), expression description.\n\n# Project documentation\n### - [mXparser - API (english)](http://mathparser.org/api/)\n### - [mXparser - WIKI (english)](https://github.com/mariuszgromada/MathParser.org-mXparser/wiki)\n### - [mXparser - Tutorial (english)](http://mathparser.org/mxparser-tutorial/)\n### - [MathSpace.pl - site about math with mXparser examples (polish)](http://mathspace.pl/)\n### - [MathParser.org - site about mXparser (english)](http://mathparser.org/)\n\n[![paypal](https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=QJYYH86583LEN)\n\n# mXparser in nutshell\n\n#### You want simple calculator...\n![calc](http://mathparser.org/wp-content/uploads/2017/05/calc.png)\n\n    Expression e = new Expression("2+3");\n    e.calculate();\n:+1: \n\n#### A calculator supporting parenthesis...\n![parenth](http://mathparser.org/wp-content/uploads/2017/05/parenth.png)\n\n    Expression e = new Expression("2+(3-5)^2");\n    e.calculate();\n:+1: \n\n#### You care about predefined constants...\n![const](http://mathparser.org/wp-content/uploads/2017/05/const.png)\n\n    Expression e = new Expression("2*pi");\n    e.calculate();\n:+1: \n\n\n#### You need to define your own constants...\n![const-user](http://mathparser.org/wp-content/uploads/2017/05/const-user.png)\n\n    Constant tau = new Constant("tau = 2*pi");\n    Expression e = new Expression("3*tau", tau);\n    e.calculate();\n:+1: \n\n#### You enjoy using many built-in functions...\n![sinx](http://mathparser.org/wp-content/uploads/2017/05/sinx.png)\n\n    Expression e = new Expression("sin(2*pi)");\n    e.calculate();\n:+1: \n\n#### You do not limit yourself to unary functions...\n![fun-variadic](http://mathparser.org/wp-content/uploads/2017/05/fun-variadic.png)\n\n    Expression e = new Expression("gcd(2,5,10,30)");\n    e.calculate();\n:+1: \n\n#### What about user defined arguments...\n![arg-free](http://mathparser.org/wp-content/uploads/2017/05/arg-free.png)\n\n    Argument x = new Argument("x = 5");\n    Expression e = new Expression("sin(x)");\n    e.calculate();\n:+1: \n\n#### You are considering dependent arguments...\n![arg-dep](http://mathparser.org/wp-content/uploads/2017/05/arg-dep.png)\n\n    Argument x = new Argument("x = 5");\n    Argument y = new Argument("y = 2*x", x);\n    Expression e = new Expression("sin(y)", y);\n    e.calculate();\n:+1: \n\n#### You need to apply some logic...\n![if-then](http://mathparser.org/wp-content/uploads/2017/05/if-then.png)\n\n    Argument x = new Argument("x = 5");\n    Expression e = new Expression("if(sin(x) > 5, 1, 0)", x);\n    e.calculate();\n:+1:\n\n#### Yes, you are right, there is a support for Boolean algebra!\n![true-false](http://mathparser.org/wp-content/uploads/2017/05/true-false.png)\n\n    Expression e = new Expression("5=6");\n    e.calculate();\n:+1:\n\n#### And for binary relations as well!\n\n    Expression e = new Expression("5 <= 6");\n    e.calculate();\n:+1:\n\n## mXparser is cool! But this is only the begging, we are just warming up!\n\n#### You want to play with iterated operators...\n![sum](http://mathparser.org/wp-content/uploads/2017/05/sum.png)\n\n    Expression e = new Expression("sum(i, 1, 10, 2*i^2 + pi)");\n    e.calculate();\n:+1:\n\n#### You want to iterate differently by not necessarily whole numbes...\n![prod](http://mathparser.org/wp-content/uploads/2017/05/prod.png)\n\n    Expression e = new Expression("prod(i, 1, 5, i, 0.5)");\n    e.calculate();\n:+1:\n\n#### You want to have more fun with math...\n    Argument x = new Argument("x = pi/2");\n    Expression e20 = new Expression("sum(n,0,10,(-1)^n*(x^(2*n+1))/(2*n+1)!)", x);\n    e.calculate();\n:+1:\n\n#### You still want more fun with calculus operations, i.e. differentiation...\n![der](http://mathparser.org/wp-content/uploads/2017/05/der.png)\n\n    Argument x = new Argument("x = pi/2");\n    Expression e = new Expression("cos(x)-der(sin(x), x)", x);\n    e.calculate();\n:+1:\n\n#### And definite integrals as well...\n![int](http://mathparser.org/wp-content/uploads/2017/05/int.png)\n\n    Expression e = new Expression("2*int(sqrt(1-x^2), x, -1, 1)");\n    e.calculate();\n:+1:\n\n##  mXparser is even cooler! It is time to ask about ...\n\n#### user defined functions...\n![fun-user](http://mathparser.org/wp-content/uploads/2017/05/fun-user.png)\n\n    Function f = new Function("f(x,y) = sin(x) + cos(y)");\n    f.calculate(1,2);\n    Expression e = new Expression("f(1,2) - 10", f);\n    e.calculate();\n:+1:\n\n#### Recursion is your desire...\n![recur](http://mathparser.org/wp-content/uploads/2017/05/recur.png)\n\n    Function f = new Function("f(n) = if( n>0, n*f(n-1), 1)");\n    f.calculate()\n:+1:\n\n#### Any kind of recursion...\n    Function Cnk = new Function("Cnk(n,k) = if(k>0, if(k<n, Cnk(n-1,k-1)+Cnk(n-1,k), 1), 1)");\n    Cnk.calculate()\n:+1:\n\n## If anything above matches you then mXparser is a good choce! mXparser is freely distributed under Simplified BSD licence, but still you can give credits to the author, and even donate if you wish :+1: \n\n[![paypal](https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=QJYYH86583LEN)\n\n#### mXparser can interact with end users as it supports syntax checking.\n![syntax](http://mathparser.org/wp-content/uploads/2017/05/syntax.png)\n\n    Expression e = new Expression("2+1/a");\n    e.checkSyntax();\n    mXparser.consolePrintln(e.getErrorMessage());\n\n# Built-in tokens\n\n## Number format\n|Key word|Category|Description|Example|Since|\n|---|---|---|---|---|\n|Number|Decimal Number|Decimal number|1, 1.5, -2.3|1.0|\n|Number|Decimal Number|Decimal number - scientific notation|1.2e10, -2.4e-10, 2.3E+10|4.0|\n|Number|Binary Number|Binary number - number literal| b.10101, B.10101, b2.10010|4.1|\n|Number|Octal Number|Octal number - number literal| o.1027, O.1027, b8.1027|4.1|\n|Number|Hexadecimal Number|Hexadecimal number - number literal| h.12fE, H.12fE, b16.12fE|4.1|\n|Number|Unary Number|Unary number - number literal| b1.111 , B1.111|4.1|\n|Number|Base 1-36|Base 1-36 number - number literal| bN.xxxx , BN.xxxx|4.1|\n|Number|Fraction|Number literal as fraction| 1_2 , 2_3_4, 172_345, 345_172 |4.3|\n\n## Operators\n|Key word|Category|Description|Example|Since|\n|---|---|---|---|---|\n| + | Operator | Addition | a + b | 1.0 |\n| - | Operator | Subtraction | a - b | 1.0 |\n| * | Operator | Multiplication | a * b | 1.0 |\n| / | Operator | Division | a / b | 1.0 |\n| ^ | Operator | Exponentiation | a^b | 1.0 |\n| ! | Operator | Factorial | n! | 1.0 |\n| # | Operator | Modulo function | a # b | 1.0 |\n| % | Operator | Percentage | n% | 4.1 |\n| ^^ | Operator | Tetration | a^^b | 4.3 |\n\n## Boolean Operators\n|Key word|Category|Description|Example|Since|\n|---|---|---|---|---|\n| & |Boolean Operator|Logical conjunction (AND)|p & q|1.0|\n| && |Boolean Operator|Logical conjunction (AND)|p && q|1.0|\n| /\\\\ |Boolean Operator|Logical conjunction (AND)|p /\\\\ q|1.0|\n| ~& |Boolean Operator|NAND - Sheffer stroke|p ~& q|1.0|\n| ~&& |Boolean Operator|NAND - Sheffer stroke|p ~&& q|1.0|\n| ~/\\\\ |Boolean Operator|NAND - Sheffer stroke|p ~/\\\\ q|1.0|\n| \\| |Boolean Operator|Logical disjunction (OR)|p \\| q|1.0|\n| \\|\\| |Boolean Operator|Logical disjunction (OR)|p \\|\\| q|1.0|\n| \\\\/ |Boolean Operator|Logical disjunction (OR)|p \\\\/ q|1.0|\n| ~\\| |Boolean Operator|Logical NOR|p ~\\| q|1.0|\n| ~\\|\\| |Boolean Operator|Logical NOR|p ~\\|\\| q|1.0|\n| ~\\\\/ |Boolean Operator|Logical NOR|p ~\\\\/ q|1.0|\n| (+) |Boolean Operator|Exclusive or (XOR)|p (+) q|1.0|\n| --> |Boolean Operator|Implication (IMP)|p --> q|1.0|\n| <-- |Boolean Operator|Converse implication (CIMP)|p <-- q|1.0|\n| -/> |Boolean Operator|Material nonimplication (NIMP)|p -/> q|1.0|\n| </- |Boolean Operator|Converse nonimplication (CNIMP)|p </- q|1.0|\n| <-> |Boolean Operator|Logical biconditional (EQV)|p <-> q|1.0|\n| ~ |Boolean Operator|Negation|~p|1.0|\n\n\n## Bitwise Operators\n|Key word|Category|Description|Example|Since|\n|---|---|---|---|---|\n| @~ |Bitwise Operator|Bitwise unary complement|@~10|4.0|\n| @& |Bitwise Operator|Bitwise AND|10 @& 2|4.0|\n| @^ |Bitwise Operator|Bitwise exclusive OR|10 @^ 2|4.0|\n| @\\| |Bitwise Operator|Bitwise inclusive OR|10 @\\| 2|4.0|\n| @<< |Bitwise Operator|Signed left shift|10 @<< 2|4.0|\n| @>> |Bitwise Operator|Signed right shift|10 @>> 2|4.0|\n\n## Binary Relations\n|Key word|Category|Description|Example|Since|\n|---|---|---|---|---|\n| = |Binary Relation|Equality|a = b|1.0|\n| == |Binary Relation|Equality|a == b|1.0|\n| <> |Binary Relation|Inequation|a <> b|1.0|\n| ~= |Binary Relation|Inequation|a ~= b|1.0|\n| != |Binary Relation|Inequation|a != b|1.0|\n| < |Binary Relation|Lower than|a < b|1.0|\n| > |Binary Relation|Greater than|a > b|1.0|\n| <= |Binary Relation|Lower or equal|a <= b|1.0|\n| >= |Binary Relation|Greater or equal|a >= b|1.0|\n\n## Unary Functions\n|Key word|Category|Description|Example|Since|\n|---|---|---|---|---|\n| sin | Unary Function | Trigonometric sine function | sin(x) | 1.0 |\n| cos | Unary Function | Trigonometric cosine function | cos(x) | 1.0 |\n| tg | Unary Function | Trigonometric tangent function | tg(x) | 1.0 |\n| tan | Unary Function | Trigonometric tangent function | tan(x) | 1.0 |\n| ctg | Unary Function | Trigonometric cotangent function | ctg(x) | 1.0 |\n| cot | Unary Function | Trigonometric cotangent function | cot(x) | 1.0 |\n| ctan | Unary Function | Trigonometric cotangent function | ctan(x) | 1.0 |\n| sec | Unary Function | Trigonometric secant function | sec(x) | 1.0 |\n| csc | Unary Function | Trigonometric cosecant function | csc(x) | 1.0 |\n| cosec | Unary Function | Trigonometric cosecant function | cosec(x) | 1.0 |\n| asin | Unary Function | Inverse trigonometric sine function | asin(x) | 1.0 |\n| arsin | Unary Function | Inverse trigonometric sine function | arsin(x) | 1.0 |\n| arcsin | Unary Function | Inverse trigonometric sine function | arcsin(x) | 1.0 |\n| acos | Unary Function | Inverse trigonometric cosine function | acos(x) | 1.0 |\n| arcos | Unary Function | Inverse trigonometric cosine function | arcos(x) | 1.0 |\n| arccos | Unary Function | Inverse trigonometric cosine function | arccos(x) | 1.0 |\n| atg | Unary Function | Inverse trigonometric tangent function | atg(x) | 1.0 |\n| atan | Unary Function | Inverse trigonometric tangent function | atan(x) | 1.0 |\n| arctg | Unary Function | Inverse trigonometric tangent function | arctg(x) | 1.0 |\n| arctan | Unary Function | Inverse trigonometric tangent function | arctan(x) | 1.0 |\n| actg | Unary Function | Inverse trigonometric cotangent function | actg(x) | 1.0 |\n| acot | Unary Function | Inverse trigonometric cotangent function | acot(x) | 1.0 |\n| actan | Unary Function | Inverse trigonometric cotangent function | actan(x) | 1.0 |\n| arcctg | Unary Function | Inverse trigonometric cotangent function | arcctg(x) | 1.0 |\n| arccot | Unary Function | Inverse trigonometric cotangent function | arccot(x) | 1.0 |\n| arcctan | Unary Function | Inverse trigonometric cotangent function | arcctan(x) | 1.0 |\n| ln | Unary Function | Natural logarithm function (base e) | ln(x) | 1.0 |\n| log2 | Unary Function | Binary logarithm function (base 2) | log2(x) | 1.0 |\n| log10 | Unary Function | Common logarithm function (base 10) | log10(x) | 1.0 |\n| rad | Unary Function | Degrees to radians function | rad(x) | 1.0 |\n| exp | Unary Function | Exponential function | exp(x) | 1.0 |\n| sqrt | Unary Function | Squre root function | sqrt(x) | 1.0 |\n| sinh | Unary Function | Hyperbolic sine function | sinh(x) | 1.0 |\n| cosh | Unary Function | Hyperbolic cosine function | cosh(x) | 1.0 |\n| tgh | Unary Function | Hyperbolic tangent function | tgh(x) | 1.0 |\n| tanh | Unary Function | Hyperbolic tangent function | tanh(x) | 1.0 |\n| coth | Unary Function | Hyperbolic cotangent function | coth(x) | 1.0 |\n| ctgh | Unary Function | Hyperbolic cotangent function | ctgh(x) | 1.0 |\n| ctanh | Unary Function | Hyperbolic cotangent function | ctanh(x) | 1.0 |\n| sech | Unary Function | Hyperbolic secant function | sech(x) | 1.0 |\n| csch | Unary Function | Hyperbolic cosecant function | csch(x) | 1.0 |\n| cosech | Unary Function | Hyperbolic cosecant function | cosech(x) | 1.0 |\n| deg | Unary Function | Radians to degrees function | deg(x) | 1.0 |\n| abs | Unary Function | Absolut value function | abs(x) | 1.0 |\n| sgn | Unary Function | Signum function | sgn(x) | 1.0 |\n| floor | Unary Function | Floor function | floor(x) | 1.0 |\n| ceil | Unary Function | Ceiling function | ceil(x) | 1.0 |\n| not | Unary Function | Negation function | not(x) | 1.0 |\n| asinh | Unary Function | Inverse hyperbolic sine function | asinh(x) | 1.0 |\n| arsinh | Unary Function | Inverse hyperbolic sine function | arsinh(x) | 1.0 |\n| arcsinh | Unary Function | Inverse hyperbolic sine function | arcsinh(x) | 1.0 |\n| acosh | Unary Function | Inverse hyperbolic cosine function | acosh(x) | 1.0 |\n| arcosh | Unary Function | Inverse hyperbolic cosine function | arcosh(x) | 1.0 |\n| arccosh | Unary Function | Inverse hyperbolic cosine function | arccosh(x) | 1.0 |\n| atgh | Unary Function | Inverse hyperbolic tangent function | atgh(x) | 1.0 |\n| atanh | Unary Function | Inverse hyperbolic tangent function | atanh(x) | 1.0 |\n| arctgh | Unary Function | Inverse hyperbolic tangent function | arctgh(x) | 1.0 |\n| arctanh | Unary Function | Inverse hyperbolic tangent function | arctanh(x) | 1.0 |\n| acoth | Unary Function | Inverse hyperbolic cotangent function | acoth(x) | 1.0 |\n| actgh | Unary Function | Inverse hyperbolic cotangent function | actgh(x) | 1.0 |\n| actanh | Unary Function | Inverse hyperbolic cotangent function | actanh(x) | 1.0 |\n| arcoth | Unary Function | Inverse hyperbolic cotangent function | arcoth(x) | 1.0 |\n| arccoth | Unary Function | Inverse hyperbolic cotangent function | arccoth(x) | 1.0 |\n| arcctgh | Unary Function | Inverse hyperbolic cotangent function | arcctgh(x) | 1.0 |\n| arcctanh | Unary Function | Inverse hyperbolic cotangent function | arcctanh(x) | 1.0 |\n| asech | Unary Function | Inverse hyperbolic secant function | asech(x) | 1.0 |\n| arsech | Unary Function | Inverse hyperbolic secant function | arsech(x) | 1.0 |\n| arcsech | Unary Function | Inverse hyperbolic secant function | arcsech(x) | 1.0 |\n| acsch | Unary Function | Inverse hyperbolic cosecant function | acsch(x) | 1.0 |\n| arcsch | Unary Function | Inverse hyperbolic cosecant function | arcsch(x) | 1.0 |\n| arccsch | Unary Function | Inverse hyperbolic cosecant function | arccsch(x) | 1.0 |\n| acosech | Unary Function | Inverse hyperbolic cosecant function | acosech(x) | 1.0 |\n| arcosech | Unary Function | Inverse hyperbolic cosecant function | arcosech(x) | 1.0 |\n| Sa | Unary Function | Sinc function (normalized) | Sa(x) | 1.0 |\n| sinc | Unary Function | Sinc function (normalized) | sinc(x) | 1.0 |\n| Sinc | Unary Function | Sinc function (unnormalized) | Sinc(x) | 1.0 |\n| Bell | Unary Function | Bell number | Bell(n) | 1.0 |\n| Luc | Unary Function | Lucas number | Luc(n) | 1.0 |\n| Fib | Unary Function | Fibonacci number | Fib(n) | 1.0 |\n| harm | Unary Function | Harmonic number | harm(n) | 1.0 |\n| ispr | Unary Function | Prime number test (is number a prime?) | ispr(n) | 2.3 |\n| Pi | Unary Function | Prime-counting function - Pi(x) | Pi(n) | 2.3 |\n| Ei | Unary Function | Exponential integral function (non-elementary special function) - usage example: Ei(x) | Ei(x) | 2.3 |\n| li | Unary Function | Logarithmic integral function (non-elementary special function) - usage example: li(x) | li(x) | 2.3 |\n| Li | Unary Function | Offset logarithmic integral function (non-elementary special function) - usage example: Li(x) | Li(x) | 2.3 |\n| erf | Unary Function | Gauss error function (non-elementary special function) - usage example: 2 + erf(x) | erf(x) | 3.0 |\n| erfc | Unary Function | Gauss complementary error function (non-elementary special function) - usage example: 1 - erfc(x) | erfc(x) | 3.0 |\n| erfInv | Unary Function | Inverse Gauss error function (non-elementary special function) - usage example: erfInv(x) | erfInv(x) | 3.0 |\n| erfcInv | Unary Function | Inverse Gauss complementary error function (non-elementary special function) - usage example: erfcInv(x) | erfcInv(x) | 3.0 |\n| ulp | Unary Function | Unit in The Last Place - ulp(0.1) | ulp(x) | 3.0 |\n| isNaN | Unary Function | Returns true = 1 if value is a Not-a-Number (NaN), false = 0 otherwise - usage example: isNaN(x) | isNaN(x) | 4.1 |\n| ndig10 | Unary Function | Number of digits in numeral system with base 10 | ndig10(x) | 4.1 |\n| nfact | Unary Function | Prime decomposition - number of distinct prime factors | nfact(x) | 4.1 |\n| arcsec | Unary Function | Inverse trigonometric secant | arcsec(x) | 4.1 |\n| Gamma | Unary Function |  Gamma special function \xce\x93(s) | Gamma(x) | 4.3 |\n| LambW0(x) | Unary Function | Lambert-W special function, principal branch 0, also called the omega function or product logarithm | LambW0(x) | 4.3 |\n| LambW1(x) | Unary Function | Lambert-W special function, branch -1, also called the omega function or product logarithm | LambW1(x) | 4.3 |\n| sgnGamma | Unary Function | Signum of Gamma special function, \xce\x93(x) | sgnGamma(x) | 4.3 |\n| logGamma | Unary Function | Log Gamma special function, ln\xce\x93(x) | logGamma(x) | 4.3 |\n| diGamma | Unary Function | Digamma function as the logarithmic derivative of the Gamma special function, \xcf\x88(x) | diGamma(x) | 4.3 |\n\n## Binary Functions\n|Key word|Category|Description|Example|Since|\n|---|---|---|---|---|\n| log | Binary Function | Logarithm function | log(a, b) | 1.0 |\n| mod | Binary Function | Modulo function | mod(a, b) | 1.0 |\n| C | Binary Function | Binomial coefficient function | C(n, k) | 1.0 |\n| Bern | Binary Function | Bernoulli numbers | Bern(m, n) | 1.0 |\n| Stirl1 | Binary Function | Stirling numbers of the first kind | Stirl1(n, k) | 1.0 |\n| Stirl2 | Binary Function | Stirling numbers of the second kind | Stirl2(n, k) | 1.0 |\n| Worp | Binary Function | Worpitzky number | Worp(n, k) | 1.0 |\n| Euler | Binary Function | Euler number | Euler(n, k) | 1.0 |\n| KDelta | Binary Function | Kronecker delta | KDelta(i, j) | 1.0 |\n| EulerPol | Binary Function | EulerPol | EulerPol | 1.0 |\n| Harm | Binary Function | Harmonic number | Harm(x, n) | 1.0 |\n| rUni | Binary Function | Random variable - Uniform continuous distribution U(a,b), usage example: 2*rUni(2,10) | rUni(a, b) | 3.0 |\n| rUnid | Binary Function | Random variable - Uniform discrete distribution U{a,b}, usage example: 2*rUnid(2,100) | rUnid(a, b) | 3.0 |\n| round | Binary Function | Half-up rounding, usage examples: round(2.2, 0) = 2, round(2.6, 0) = 3, round(2.66,1) = 2.7 | round(x, n) | 3.0 |\n| rNor | Binary Function | Random variable - Normal distribution N(m,s) m - mean, s - stddev, usage example: 3*rNor(0,1) | rNor(mean, stdv) | 3.0 |\n| ndig | Binary Function | Number of digits representing the number in numeral system with given base | ndig(number, base) | 4.1 |\n| dig10 | Binary Function | Digit at position 1 ... n (left -> right) or 0 ... -(n-1) (right -> left) - base 10 numeral system | dig10(num, pos) | 4.1 |\n| factval | Binary Function | Prime decomposition - factor value at position between 1 ... nfact(n) - ascending order by factor value | factval(number, factorid) | 4.1 |\n| factexp | Binary Function | Prime decomposition - factor exponent / multiplicity at position between 1 ... nfact(n) - ascending order by factor value | factexp(number, factorid) | 4.1 |\n| root | Binary Function | N-th order root of a number | root(rootorder, number) | 4.1 |\n| GammaL | Binary Function | Lower incomplete gamma special function, \xce\xb3(s,x) | GammaL(s,x) | 4.3 |\n| GammaU | Binary Function | Upper incomplete Gamma special function, \xce\x93(s,x) | GammaU(s,x) | 4.3 |\n| GammaP | Binary Function | Lower regularized P gamma special function, P(s,x) | GammaP(s,x) | 4.3 |\n| GammaRegL | Binary Function | Lower regularized P gamma special function, P(s,x) | GammaRegL(s,x) | 4.3 |\n| GammaQ | Binary Function | Upper regularized Q Gamma special function, Q(s,x) | GammaQ(s,x) | 4.3 |\n| GammaRegU | Binary Function | Upper regularized Q Gamma special function, Q(s,x) | GammaRegU(s,x) | 4.3 |\n| Beta | Binary Function | The Beta special function B(x,y), also called the Euler integral of the first kind | Beta(x,y) | 4.3 |\n| logBeta | Binary Function | The Log Beta special function ln B(x,y), also called the Log Euler integral of the first kind, ln B(x,y) | logBeta(x,y) | 4.3 |\n\n## 3-args Functions\n|Key word|Category|Description|Example|Since|\n|---|---|---|---|---|\n| if | 3-args Function | If function | if( cond, expr-if-true, expr-if-false ) | 1.0 |\n| chi | 3-args Function | Characteristic function for x in (a,b) | chi(x, a, b) | 1.0 |\n| CHi | 3-args Function | Characteristic function for x in [a,b] | CHi(x, a, b) | 1.0 |\n| Chi | 3-args Function | Characteristic function for x in [a,b) | Chi(x, a, b) | 1.0 |\n| cHi | 3-args Function | Characteristic function for x in (a,b] | cHi(x, a, b) | 1.0 |\n| pUni | 3-args Function | Probability distribution function - Uniform continuous distribution U(a,b) | pUni(x, a, b) | 3.0 |\n| cUni | 3-args Function | Cumulative distribution function - Uniform continuous distribution U(a,b) | cUni(x, a, b) | 3.0 |\n| qUni | 3-args Function | Quantile function (inverse cumulative distribution function) - Uniform continuous distribution U(a,b) | qUni(q, a, b) | 3.0 |\n| pNor | 3-args Function | Probability distribution function - Normal distribution N(m,s) | pNor(x, mean, stdv) | 3.0 |\n| cNor | 3-args Function | Cumulative distribution function - Normal distribution N(m,s) | cNor(x, mean, stdv) | 3.0 |\n| qNor | 3-args Function | Quantile function (inverse cumulative distribution function) | qNor(q, mean, stdv) | 3.0 |\n| dig | 3-args Function | Digit at position 1 ... n (left -> right) or 0 ... -(n-1) (right -> left) - numeral system with given base | dig(num, pos, base) | 4.1 |\n| BetaInc | 3-args Function | The incomplete beta special function B(x; a, b), also called the incomplete Euler integral of the first kind | BetaInc(x,a,b) | 4.3 |\n| BetaI | 3-args Function | The regularized incomplete beta (or regularized beta) special function I(x; a, b), also called the regularized incomplete Euler integral of the first kind | BetaI(x,a,b) | 4.3 |\n| BetaReg | 3-args Function | The regularized incomplete beta (or regularized beta) special function I(x; a, b), also called the regularized incomplete Euler integral of the first kind | BetaReg(x,a,b) | 4.3 |\n\n## Variadic Functions\n|Key word|Category|Description|Example|Since|\n|---|---|---|---|---|\n| iff | Variadic Function | If function | iff( cond-1, expr-1; ... ; cond-n, expr-n ) | 1.0 |\n| min | Variadic Function | Minimum function | min(a1, ..., an) | 1.0 |\n| max | Variadic Function | Maximum function | max(a1, ..., an) | 1.0 |\n| ConFrac | Variadic Function | Continued fraction | ConFrac(a1, ..., an) | 1.0 |\n| ConPol | Variadic Function | Continued polynomial | ConPol(a1, ..., an) | 1.0 |\n| gcd | Variadic Function | Greatest common divisor | gcd(a1, ..., an) | 1.0 |\n| lcm | Variadic Function | Least common multiple | lcm(a1, ..., an) | 1.0 |\n| add | Variadic Function | Summation operator | add(a1, ..., an) | 2.4 |\n| multi | Variadic Function | Multiplication | multi(a1, ..., an) | 2.4 |\n| mean | Variadic Function | Mean / average value | mean(a1, ..., an) | 2.4 |\n| var | Variadic Function | Bias-corrected sample variance | var(a1, ..., an) | 2.4 |\n| std | Variadic Function | Bias-corrected sample standard deviation | std(a1, ..., an) | 2.4 |\n| rList | Variadic Function | Random number from given list of numbers | rList(a1, ..., an) | 3.0 |\n| coalesce | Variadic Function | Returns the first non-NaN value | coalesce(a1, ..., an) | 4.1 |\n| or | Variadic Function | Logical disjunction (OR) - variadic | or(a1, ..., an) | 4.1 |\n| and | Variadic Function | Logical conjunction (AND) - variadic | and(a1, ..., an) | 4.1 |\n| xor | Variadic Function | Exclusive or (XOR) - variadic | xor(a1, ..., an) | 4.1 |\n| argmin | Variadic Function | Arguments / indices of the minima | argmin(a1, ..., an) | 4.1 |\n| argmax | Variadic Function | Arguments / indices of the maxima | argmax(a1, ..., an) | 4.1 |\n| med | Variadic Function | The sample median | med(a1, ..., an) | 4.1 |\n| mode | Variadic Function | Mode - the value that appears most often | mode(a1, ..., an) | 4.1 |\n| base | Variadic Function | Returns number in given numeral system base represented by list of digits | base(b, d1, ..., dn) | 4.1 |\n| ndist | Variadic Function | Number of distinct values | ndist(v1, ..., vn) | 4.1 |\n\n## Calculus Operators / Iterated Operators\n|Key word|Category|Description|Example|Since|\n|---|---|---|---|---|\n| sum | Calculus Operator | Summation operator - SIGMA | sum( i, from, to, expr , <by> ) | 1.0 |\n| prod | Calculus Operator | Product operator - PI | prod( i, from, to, expr , <by> ) | 1.0 |\n| int | Calculus Operator | Definite integral operator | int( expr, arg, from, to ) | 1.0 |\n| der | Calculus Operator | Derivative operator | der( expr, arg, <point> ) | 1.0 |\n| der- | Calculus Operator | Left derivative operator | der-( expr, arg, <point> ) | 1.0 |\n| der+ | Calculus Operator | Right derivative operator | der+( expr, arg, <point> ) | 1.0 |\n| dern | Calculus Operator | n-th derivative operator | dern( expr, n, arg ) | 1.0 |\n| diff | Calculus Operator | Forward difference operator | diff( expr, arg, <delta> ) | 1.0 |\n| difb | Calculus Operator | Backward difference operator | difb( expr, arg, <delta> ) | 1.0 |\n| avg | Calculus Operator | Average operator | avg( i, from, to, expr , <by> ) | 2.4 |\n| vari | Calculus Operator | Bias-corrected sample variance operator | vari( i, from, to, expr , <by> ) | 2.4 |\n| stdi | Calculus Operator | Bias-corrected sample standard deviation operator | stdi( i, from, to, expr , <by> ) | 2.4 |\n| mini | Calculus Operator | Minimum value | mini( i, from, to, expr , <by> ) | 2.4 |\n| maxi | Calculus Operator | Maximum value | maxi( i, from, to, expr , <by> ) | 2.4 |\n| solve | Calculus Operator | f(x) = 0 equation solving, function root finding | solve( expr, a, b ) | 4.0 |\n\n## Random Variables\n|Key word|Category|Description|Example|Since|\n|---|---|---|---|---|\n| [Uni] |Random Variable|Random variable - Uniform continuous distribution U(0,1), usage example: 2*[Uni]|2*[Uni]|3.0|\n| [Int] |Random Variable|Random variable - random integer - usage example sin( 3*[Int] )|[Int]*3|3.0|\n| [Int1] |Random Variable|Random variable - random integer - Uniform discrete distribution U{-10^1, 10^1} - usage example sin( 3*[Int1] )|2*[Int1]|3.0|\n| [Int2] |Random Variable|Random variable - random integer - Uniform discrete distribution U{-10^2, 10^2} - usage example sin( 3*[Int2] )|[Int2]*3|3.0|\n| [Int3] |Random Variable|Random variable - random integer - Uniform discrete distribution U{-10^3, 10^3} - usage example sin( 3*[Int3] )|2*[Int3]|3.0|\n| [Int4] |Random Variable|Random variable - random integer - Uniform discrete distribution U{-10^4, 10^4} - usage example sin( 3*[Int4] )|[Int4]*3|3.0|\n| [Int5] |Random Variable|Random variable - random integer - Uniform discrete distribution U{-10^5, 10^5} - usage example sin( 3*[Int5] )|2*[Int5]|3.0|\n| [Int6] |Random Variable|Random variable - random integer - Uniform discrete distribution U{-10^6, 10^6} - usage example sin( 3*[Int6] )|[Int6]*3|3.0|\n| [Int7] |Random Variable|Random variable - random integer - Uniform discrete distribution U{-10^7, 10^7} - usage example sin( 3*[Int7] )|2*[Int7]|3.0|\n| [Int8] |Random Variable|Random variable - random integer - Uniform discrete distribution U{-10^8, 10^8} - usage example sin( 3*[Int8] )|[Int8]*3|3.0|\n| [Int9] |Random Variable|Random variable - random integer - Uniform discrete distribution U{-10^9, 10^9} - usage example sin( 3*[Int9] )|2*[Int9]|3.0|\n| [nat] |Random Variable|Random variable - random natural number including 0 - usage example sin( 3*[nat] )|[nat]*3|3.0|\n| [nat1] |Random Variable|Random variable - random natural number including 0 - Uniform discrete distribution U{0, 10^1} - usage example sin( 3*[nat1] )|2*[nat1]|3.0|\n| [nat2] |Random Variable|Random variable - random natural number including 0 - Uniform discrete distribution U{0, 10^2} - usage example sin( 3*[nat2] )|[nat2]*3|3.0|\n| [nat3] |Random Variable|Random variable - random natural number including 0 - Uniform discrete distribution U{0, 10^3} - usage example sin( 3*[nat3] )|2*[nat3]|3.0|\n| [nat4] |Random Variable|Random variable - random natural number including 0 - Uniform discrete distribution U{0, 10^4} - usage example sin( 3*[nat4] )|[nat4]*3|3.0|\n| [nat5] |Random Variable|Random variable - random natural number including 0 - Uniform discrete distribution U{0, 10^5} - usage example sin( 3*[nat5] )|2*[nat5]|3.0|\n| [nat6] |Random Variable|Random variable - random natural number including 0 - Uniform discrete distribution U{0, 10^6} - usage example sin( 3*[nat6] )|[nat6]*3|3.0|\n| [nat7] |Random Variable|Random variable - random natural number including 0 - Uniform discrete distribution U{0, 10^7} - usage example sin( 3*[nat7] )|2*[nat7]|3.0|\n| [nat8] |Random Variable|Random variable - random natural number including 0 - Uniform discrete distribution U{0, 10^8} - usage example sin( 3*[nat8] )|[nat8]*3|3.0|\n| [nat9] |Random Variable|Random variable - random natural number including 0 - Uniform discrete distribution U{0, 10^9} - usage example sin( 3*[nat9] )|2*[nat9]|3.0|\n| [Nat] |Random Variable|Random variable - random natural number - usage example sin( 3*[Nat] )|[Nat]*3|3.0|\n| [Nat1] |Random Variable|Random variable - random natural number - Uniform discrete distribution U{1, 10^1} - usage example sin( 3*[Nat1] )|2*[Nat1]|3.0|\n| [Nat2] |Random Variable|Random variable - random natural number - Uniform discrete distribution U{1, 10^2} - usage example sin( 3*[Nat2] )|[Nat2]*3|3.0|\n| [Nat3] |Random Variable|Random variable - random natural number - Uniform discrete distribution U{1, 10^3} - usage example sin( 3*[Nat3] )|2*[Nat3]|3.0|\n| [Nat4] |Random Variable|Random variable - random natural number - Uniform discrete distribution U{1, 10^4} - usage example sin( 3*[Nat4] )|[Nat4]*3|3.0|\n| [Nat5] |Random Variable|Random variable - random natural number - Uniform discrete distribution U{1, 10^5} - usage example sin( 3*[Nat5] )|2*[Nat5]|3.0|\n| [Nat6] |Random Variable|Random variable - random natural number - Uniform discrete distribution U{1, 10^6} - usage example sin( 3*[Nat6] )|[Nat6]*3|3.0|\n| [Nat7] |Random Variable|Random variable - random natural number - Uniform discrete distribution U{1, 10^7} - usage example sin( 3*[Nat7] )|2*[Nat7]|3.0|\n| [Nat8] |Random Variable|Random variable - random natural number - Uniform discrete distribution U{1, 10^8} - usage example sin( 3*[Nat8] )|[Nat8]*3|3.0|\n| [Nat9] |Random Variable|Random variable - random natural number - Uniform discrete distribution U{1, 10^9} - usage example sin( 3*[Nat9] )|2*[Nat9]|3.0|\n| [Nor] |Random Variable|Random variable - Normal distribution N(0,1) - usage example cos( 3*[Nor]+1 )|[Nor]*3|3.0|\n\n## Mathematical Constants\n|Key word|Category|Description|Example|Since|\n|---|---|---|---|---|\n| pi |Constant Value|Pi, Archimedes\' constant or Ludolph\'s number|2*pi|1.0|\n| e |Constant Value|Napier\'s constant, or Euler\'s number, base of Natural logarithm|e*3|1.0|\n| [gam] |Constant Value|Euler-Mascheroni constant|2*[gam]|1.0|\n| [phi] |Constant Value|Golden ratio|[phi]*3|1.0|\n| [PN] |Constant Value|Plastic constant|2*[PN]|1.0|\n| [B*] |Constant Value|Embree-Trefethen constant|[B*]*3|1.0|\n| [F\'d] |Constant Value|Feigenbaum constant alfa|2*[F\'d]|1.0|\n| [F\'a] |Constant Value|Feigenbaum constant delta|[F\'a]*3|1.0|\n| [C2] |Constant Value|Twin prime constant|2*[C2]|1.0|\n| [M1] |Constant Value|Meissel-Mertens constant|[M1]*3|1.0|\n| [B2] |Constant Value|Brun\'s constant for twin primes|2*[B2]|1.0|\n| [B4] |Constant Value|Brun\'s constant for prime quadruplets|[B4]*3|1.0|\n| [BN\'L] |Constant Value|De Bruijn-Newman constant|2*[BN\'L]|1.0|\n| [Kat] |Constant Value|Catalan\'s constant|[Kat]*3|1.0|\n| [K*] |Constant Value|Landau-Ramanujan constant|2*[K*]|1.0|\n| [K.] |Constant Value|Viswanath\'s constant|[K.]*3|1.0|\n| [B\'L] |Constant Value|Legendre\'s constant|2*[B\'L]|1.0|\n| [RS\'m] |Constant Value|Ramanujan-Soldner constant|[RS\'m]*3|1.0|\n| [EB\'e] |Constant Value|Erdos-Borwein constant|2*[EB\'e]|1.0|\n| [Bern] |Constant Value|Bernstein\'s constant|[Bern]*3|1.0|\n| [GKW\'l] |Constant Value|Gauss-Kuzmin-Wirsing constant|2*[GKW\'l]|1.0|\n| [HSM\'s] |Constant Value|Hafner-Sarnak-McCurley constant|[HSM\'s]*3|1.0|\n| [lm] |Constant Value|Golomb-Dickman constant|2*[lm]|1.0|\n| [Cah] |Constant Value|Cahen\'s constant|[Cah]*3|1.0|\n| [Ll] |Constant Value|Laplace limit|2*[Ll]|1.0|\n| [AG] |Constant Value|Alladi-Grinstead constant|[AG]*3|1.0|\n| [L*] |Constant Value|Lengyel\'s constant|2*[L*]|1.0|\n| [L.] |Constant Value|Levy\'s constant|[L.]*3|1.0|\n| [Dz3] |Constant Value|Apery\'s constant|2*[Dz3]|1.0|\n| [A3n] |Constant Value|Mills\' constant|[A3n]*3|1.0|\n| [Bh] |Constant Value|Backhouse\'s constant|2*[Bh]|1.0|\n| [Pt] |Constant Value|Porter\'s constant|[Pt]*3|1.0|\n| [L2] |Constant Value|Lieb\'s square ice constant|2*[L2]|1.0|\n| [Nv] |Constant Value|Niven\'s constant|[Nv]*3|1.0|\n| [Ks] |Constant Value|Sierpinski\'s constant|2*[Ks]|1.0|\n| [Kh] |Constant Value|Khinchin\'s constant|[Kh]*3|1.0|\n| [FR] |Constant Value|Fransen-Robinson constant|2*[FR]|1.0|\n| [La] |Constant Value|Landau\'s constant|[La]*3|1.0|\n| [P2] |Constant Value|Parabolic constant|2*[P2]|1.0|\n| [Om] |Constant Value|Omega constant|[Om]*3|1.0|\n| [MRB] |Constant Value|MRB constant|2*[MRB]|1.0|\n| [li2] |Constant Value|li(2) - logarithmic integral function at x=2|[li2]*3|2.3|\n| [EG] |Constant Value|Gompertz constant|2*[EG]|2.3|\n| [true] | Constant Value | Boolean True represented as double, [true] = 1 | [true] | 4.1 |\n| [false] | Constant Value | Boolean False represented as double, [false] = 0 | [false] | 4.1 |\n| [NaN] | Constant Value | Not-a-Number | [NaN] | 4.1 |\n\n\n## Physical Constant\n|Key word|Category|Description|Example|Since|\n|---|---|---|---|---|\n| [c] |Constant Value|\\<Physical Constant\\> Light speed in vacuum [m/s] (m=1, s=1)|[c]*3|4.0|\n| [G.] |Constant Value|\\<Physical Constant\\> Gravitational constant (m=1, kg=1, s=1)]|2*[G.]|4.0|\n| [g] |Constant Value|\\<Physical Constant\\> Gravitational acceleration on Earth [m/s^2] (m=1, s=1)|[g]*3|4.0|\n| [hP] |Constant Value|\\<Physical Constant\\> Planck constant (m=1, kg=1, s=1)|2*[hP]|4.0|\n| [h-] |Constant Value|\\<Physical Constant\\> Reduced Planck constant / Dirac constant (m=1, kg=1, s=1)]|[h-]*3|4.0|\n| [lP] |Constant Value|\\<Physical Constant\\> Planck length [m] (m=1)|2*[lP]|4.0|\n| [mP] |Constant Value|\\<Physical Constant\\> Planck mass [kg] (kg=1)|[mP]*3|4.0|\n| [tP] |Constant Value|\\<Physical Constant\\> Planck time [s] (s=1)|2*[tP]|4.0|\n\n## Astronomical Constant\n|Key word|Category|Description|Example|Since|\n|---|---|---|---|---|\n| [ly] |Constant Value|\\<Astronomical Constant\\> Light year [m] (m=1)|[ly]*3|4.0|\n| [au] |Constant Value|\\<Astronomical Constant\\> Astronomical unit [m] (m=1)|2*[au]|4.0|\n| [pc] |Constant Value|\\<Astronomical Constant\\> Parsec [m] (m=1)|[pc]*3|4.0|\n| [kpc] |Constant Value|\\<Astronomical Constant\\> Kiloparsec [m] (m=1)|2*[kpc]|4.0|\n| [Earth-R-eq] |Constant Value|\\<Astronomical Constant\\> Earth equatorial radius [m] (m=1)|[Earth-R-eq]*3|4.0|\n| [Earth-R-po] |Constant Value|\\<Astronomical Constant\\> Earth polar radius [m] (m=1)|2*[Earth-R-po]|4.0|\n| [Earth-R] |Constant Value|\\<Astronomical Constant\\> Earth mean radius (m=1)|[Earth-R]*3|4.0|\n| [Earth-M] |Constant Value|\\<Astronomical Constant\\> Earth mass [kg] (kg=1)|2*[Earth-M]|4.0|\n| [Earth-D] |Constant Value|\\<Astronomical Constant\\> Earth-Sun distance - semi major axis [m] (m=1)|[Earth-D]*3|4.0|\n| [Moon-R] |Constant Value|\\<Astronomical Constant\\> Moon mean radius [m] (m=1)|2*[Moon-R]|4.0|\n| [Moon-M] |Constant Value|\\<Astronomical Constant\\> Moon mass [kg] (kg=1)|[Moon-M]*3|4.0|\n| [Moon-D] |Constant Value|\\<Astronomical Constant\\> Moon-Earth distance - semi major axis [m] (m=1)|2*[Moon-D]|4.0|\n| [Solar-R] |Constant Value|\\<Astronomical Constant\\> Solar mean radius [m] (m=1)|[Solar-R]*3|4.0|\n| [Solar-M] |Constant Value|\\<Astronomical Constant\\> Solar mass [kg] (kg=1)|2*[Solar-M]|4.0|\n| [Mercury-R] |Constant Value|\\<Astronomical Constant\\> Mercury mean radius [m] (m=1)|[Mercury-R]*3|4.0|\n| [Mercury-M] |Constant Value|\\<Astronomical Constant\\> Mercury mass [kg] (kg=1)|2*[Mercury-M]|4.0|\n| [Mercury-D] |Constant Value|\\<Astronomical Constant\\> Mercury-Sun distance - semi major axis [m] (m=1)|[Mercury-D]*3|4.0|\n| [Venus-R] |Constant Value|\\<Astronomical Constant\\> Venus mean radius [m] (m=1)|2*[Venus-R]|4.0|\n| [Venus-M] |Constant Value|\\<Astronomical Constant\\> Venus mass [kg] (kg=1)|[Venus-M]*3|4.0|\n| [Venus-D] |Constant Value|\\<Astronomical Constant\\> Venus-Sun distance - semi major axis [m] (m=1)|2*[Venus-D]|4.0|\n| [Mars-R] |Constant Value|\\<Astronomical Constant\\> Mars mean radius [m] (m=1)|[Mars-R]*3|4.0|\n| [Mars-M] |Constant Value|\\<Astronomical Constant\\> Mars mass [kg] (kg=1)|2*[Mars-M]|4.0|\n| [Mars-D] |Constant Value|\\<Astronomical Constant\\> Mars-Sun distance - semi major axis [m] (m=1)|[Mars-D]*3|4.0|\n| [Jupiter-R] |Constant Value|\\<Astronomical Constant\\> Jupiter mean radius [m] (m=1)|2*[Jupiter-R]|4.0|\n| [Jupiter-M] |Constant Value|\\<Astronomical Constant\\> Jupiter mass [kg] (kg=1)|[Jupiter-M]*3|4.0|\n| [Jupiter-D] |Constant Value|\\<Astronomical Constant\\> Jupiter-Sun distance - semi major axis [m] (m=1)|2*[Jupiter-D]|4.0|\n| [Saturn-R] |Constant Value|\\<Astronomical Constant\\> Saturn mean radius [m] (m=1)|[Saturn-R]*3|4.0|\n| [Saturn-M] |Constant Value|\\<Astronomical Constant\\> Saturn mass [kg] (kg=1)|2*[Saturn-M]|4.0|\n| [Saturn-D] |Constant Value|\\<Astronomical Constant\\> Saturn-Sun distance - semi major axis [m] (m=1)|[Saturn-D]*3|4.0|\n| [Uranus-R] |Constant Value|\\<Astronomical Constant\\> Uranus mean radius [m] (m=1)|2*[Uranus-R]|4.0|\n| [Uranus-M] |Constant Value|\\<Astronomical Constant\\> Uranus mass [kg] (kg=1)|[Uranus-M]*3|4.0|\n| [Uranus-D] |Constant Value|\\<Astronomical Constant\\> Uranus-Sun distance - semi major axis [m] (m=1)|2*[Uranus-D]|4.0|\n| [Neptune-R] |Constant Value|\\<Astronomical Constant\\> Neptune mean radius [m] (m=1)|[Neptune-R]*3|4.0|\n| [Neptune-M] |Constant Value|\\<Astronomical Constant\\> Neptune mass [kg] (kg=1)|2*[Neptune-M]|4.0|\n| [Neptune-D] |Constant Value|\\<Astronomical Constant\\> Neptune-Sun distance - semi major axis [m] (m=1)|[Neptune-D]*3|4.0|\n\n## Metric prefixes\n|Key word|Category|Description|Example|Since|\n|---|---|---|---|---|\n| [%] |Unit|\\<Ratio, Fraction\\> Percentage = 0.01|2*[%]|4.0|\n| [%%] |Unit|\\<Ratio, Fraction\\> Promil, Per mille = 0.001|[%%]*3|4.0|\n| [Y] |Unit|\\<Metric prefix\\> Septillion / Yotta = 10^24|2*[Y]|4.0|\n| [sept] |Unit|\\<Metric prefix\\> Septillion / Yotta = 10^24|[sept]*3|4.0|\n| [Z] |Unit|\\<Metric prefix\\> Sextillion / Zetta = 10^21|2*[Z]|4.0|\n| [sext] |Unit|\\<Metric prefix\\> Sextillion / Zetta = 10^21|[sext]*3|4.0|\n| [E] |Unit|\\<Metric prefix\\> Quintillion / Exa = 10^18|2*[E]|4.0|\n| [quint] |Unit|\\<Metric prefix\\> Quintillion / Exa = 10^18|[quint]*3|4.0|\n| [P] |Unit|\\<Metric prefix\\> Quadrillion / Peta = 10^15|2*[P]|4.0|\n| [quad] |Unit|\\<Metric prefix\\> Quadrillion / Peta = 10^15|[quad]*3|4.0|\n| [T] |Unit|\\<Metric prefix\\> Trillion / Tera = 10^12|2*[T]|4.0|\n| [tril] |Unit|\\<Metric prefix\\> Trillion / Tera = 10^12|[tril]*3|4.0|\n| [G] |Unit|\\<Metric prefix\\> Billion / Giga = 10^9|2*[G]|4.0|\n| [bil] |Unit|\\<Metric prefix\\> Billion / Giga = 10^9|[bil]*3|4.0|\n| [M] |Unit|\\<Metric prefix\\> Million / Mega = 10^6|2*[M]|4.0|\n| [mil] |Unit|\\<Metric prefix\\> Million / Mega = 10^6|[mil]*3|4.0|\n| [k] |Unit|\\<Metric prefix\\> Thousand / Kilo = 10^3|2*[k]|4.0|\n| [th] |Unit|\\<Metric prefix\\> Thousand / Kilo = 10^3|[th]*3|4.0|\n| [hecto] |Unit|\\<Metric prefix\\> Hundred / Hecto = 10^2|2*[hecto]|4.0|\n| [hund] |Unit|\\<Metric prefix\\> Hundred / Hecto = 10^2|[hund]*3|4.0|\n| [deca] |Unit|\\<Metric prefix\\> Ten / Deca = 10|2*[deca]|4.0|\n| [ten] |Unit|\\<Metric prefix\\> Ten / Deca = 10|[ten]*3|4.0|\n| [deci] |Unit|\\<Metric prefix\\> Tenth / Deci = 0.1|2*[deci]|4.0|\n| [centi] |Unit|\\<Metric prefix\\> Hundredth / Centi = 0.01|[centi]*3|4.0|\n| [milli] |Unit|\\<Metric prefix\\> Thousandth / Milli = 0.001|2*[milli]|4.0|\n| [mic] |Unit|\\<Metric prefix\\> Millionth / Micro = 10^-6|[mic]*3|4.0|\n| [n] |Unit|\\<Metric prefix\\> Billionth / Nano = 10^-9|2*[n]|4.0|\n| [p] |Unit|\\<Metric prefix\\> Trillionth / Pico = 10^-12|[p]*3|4.0|\n| [f] |Unit|\\<Metric prefix\\> Quadrillionth / Femto = 10^-15|2*[f]|4.0|\n| [a] |Unit|\\<Metric prefix\\> Quintillionth / Atoo = 10^-18|[a]*3|4.0|\n| [z] |Unit|\\<Metric prefix\\> Sextillionth / Zepto = 10^-21|2*[z]|4.0|\n| [y] |Unit|\\<Metric prefix\\> Septillionth / Yocto = 10^-24|[y]*3|4.0|\n\n## Units of length\n|Key word|Category|Description|Example|Since|\n|---|---|---|---|---|\n| [m] |Unit|\\<Unit of length\\> Metre / Meter (m=1)|2*[m]|4.0|\n| [km] |Unit|\\<Unit of length\\> Kilometre / Kilometer (m=1)|[km]*3|4.0|\n| [cm] |Unit|\\<Unit of length\\> Centimetre / Centimeter (m=1)|2*[cm]|4.0|\n| [mm] |Unit|\\<Unit of length\\> Millimetre / Millimeter (m=1)|[mm]*3|4.0|\n| [inch] |Unit|\\<Unit of length\\> Inch (m=1)|2*[inch]|4.0|\n| [yd] |Unit|\\<Unit of length\\> Yard (m=1)|[yd]*3|4.0|\n| [ft] |Unit|\\<Unit of length\\> Feet (m=1)|2*[ft]|4.0|\n| [mile] |Unit|\\<Unit of length\\> Mile (m=1)|[mile]*3|4.0|\n| [nmi] |Unit|\\<Unit of length\\> Nautical mile (m=1)|2*[nmi]|4.0|\n\n## Units of area\n|Key word|Category|Description|Example|Since|\n|---|---|---|---|---|\n| [m2] |Unit|\\<Unit of area\\> Square metre / Square meter (m=1)|[m2]*3|4.0|\n| [cm2] |Unit|\\<Unit of area\\> Square centimetre / Square centimeter (m=1)|2*[cm2]|4.0|\n| [mm2] |Unit|\\<Unit of area\\> Square millimetre / Square millimeter (m=1)|[mm2]*3|4.0|\n| [are] |Unit|\\<Unit of area\\> Are (m=1)|2*[are]|4.0|\n| [ha] |Unit|\\<Unit of area\\> Hectare (m=1)|[ha]*3|4.0|\n| [acre] |Unit|\\<Unit of area\\> Acre (m=1)|2*[acre]|4.0|\n| [km2] |Unit|\\<Unit of area\\> Square kilometre / Square kilometer (m=1)|[km2]*3|4.0|\n\n## Units of volume\n|Key word|Category|Description|Example|Since|\n|---|---|---|---|---|\n| [mm3] |Unit|\\<Unit of volume\\> Cubic millimetre / Cubic millimeter (m=1)|2*[mm3]|4.0|\n| [cm3] |Unit|\\<Unit of volume\\> Cubic centimetre / Cubic centimeter (m=1)|[cm3]*3|4.0|\n| [m3] |Unit|\\<Unit of volume\\> Cubic metre / Cubic meter (m=1)|2*[m3]|4.0|\n| [km3] |Unit|\\<Unit of volume\\> Cubic kilometre / Cubic kilometer (m=1)|[km3]*3|4.0|\n| [ml] |Unit|\\<Unit of volume\\> Millilitre / Milliliter (m=1)|2*[ml]|4.0|\n| [l] |Unit|\\<Unit of volume\\> Litre / Liter (m=1)|[l]*3|4.0|\n| [gall] |Unit|\\<Unit of volume\\> Gallon (m=1)|2*[gall]|4.0|\n| [pint] |Unit|\\<Unit of volume\\> Pint (m=1)|[pint]*3|4.0|\n\n## Units of time\n|Key word|Category|Description|Example|Since|\n|---|---|---|---|---|\n| [s] |Unit|\\<Unit of time\\> Second (s=1)|2*[s]|4.0|\n| [ms] |Unit|\\<Unit of time\\> Millisecond (s=1)|[ms]*3|4.0|\n| [min] |Unit|\\<Unit of time\\> Minute (s=1)|2*[min]|4.0|\n| [h] |Unit|\\<Unit of time\\> Hour (s=1)|[h]*3|4.0|\n| [day] |Unit|\\<Unit of time\\> Day (s=1)|2*[day]|4.0|\n| [week] |Unit|\\<Unit of time\\> Week (s=1)|[week]*3|4.0|\n| [yearj] |Unit|\\<Unit of time\\> Julian year = 365.25 days (s=1)|2*[yearj]|4.0|\n\n## Units of mass\n|Key word|Category|Description|Example|Since|\n|---|---|---|---|---|\n| [kg] |Unit|\\<Unit of mass\\> Kilogram (kg=1)|[kg]*3|4.0|\n| [gr] |Unit|\\<Unit of mass\\> Gram (kg=1)|2*[gr]|4.0|\n| [mg] |Unit|\\<Unit of mass\\> Milligram (kg=1)|[mg]*3|4.0|\n| [dag] |Unit|\\<Unit of mass\\> Decagram (kg=1)|2*[dag]|4.0|\n| [t] |Unit|\\<Unit of mass\\> Tonne (kg=1)|[t]*3|4.0|\n| [oz] |Unit|\\<Unit of mass\\> Ounce (kg=1)|2*[oz]|4.0|\n| [lb] |Unit|\\<Unit of mass\\> Pound (kg=1)|[lb]*3|4.0|\n\n## Units of information\n|Key word|Category|Description|Example|Since|\n|---|---|---|---|---|\n| [b] |Unit|\\<Unit of information\\> Bit (bit=1)|2*[b]|4.0|\n| [kb] |Unit|\\<Unit of information\\> Kilobit (bit=1)|[kb]*3|4.0|\n| [Mb] |Unit|\\<Unit of information\\> Megabit (bit=1)|2*[Mb]|4.0|\n| [Gb] |Unit|\\<Unit of information\\> Gigabit (bit=1)|[Gb]*3|4.0|\n| [Tb] |Unit|\\<Unit of information\\> Terabit (bit=1)|2*[Tb]|4.0|\n| [Pb] |Unit|\\<Unit of information\\> Petabit (bit=1)|[Pb]*3|4.0|\n| [Eb] |Unit|\\<Unit of information\\> Exabit (bit=1)|2*[Eb]|4.0|\n| [Zb] |Unit|\\<Unit of information\\> Zettabit (bit=1)|[Zb]*3|4.0|\n| [Yb] |Unit|\\<Unit of information\\> Yottabit (bit=1)|2*[Yb]|4.0|\n| [B] |Unit|\\<Unit of information\\> Byte (bit=1)|[B]*3|4.0|\n| [kB] |Unit|\\<Unit of information\\> Kilobyte (bit=1)|2*[kB]|4.0|\n| [MB] |Unit|\\<Unit of information\\> Megabyte (bit=1)|[MB]*3|4.0|\n| [GB] |Unit|\\<Unit of information\\> Gigabyte (bit=1)|2*[GB]|4.0|\n| [TB] |Unit|\\<Unit of information\\> Terabyte (bit=1)|[TB]*3|4.0|\n| [PB] |Unit|\\<Unit of information\\> Petabyte (bit=1)|2*[PB]|4.0|\n| [EB] |Unit|\\<Unit of information\\> Exabyte (bit=1)|[EB]*3|4.0|\n| [ZB] |Unit|\\<Unit of information\\> Zettabyte (bit=1)|2*[ZB]|4.0|\n| [YB] |Unit|\\<Unit of information\\> Yottabyte (bit=1)|[YB]*3|4.0|\n\n## Units of energy\n|Key word|Category|Description|Example|Since|\n|---|---|---|---|---|\n| [J] |Unit|\\<Unit of energy\\> Joule (m=1, kg=1, s=1)|2*[J]|4.0|\n| [eV] |Unit|\\<Unit of energy\\> Electronovolt (m=1, kg=1, s=1)|[eV]*3|4.0|\n| [keV] |Unit|\\<Unit of energy\\> Kiloelectronovolt (m=1, kg=1, s=1)|2*[keV]|4.0|\n| [MeV] |Unit|\\<Unit of energy\\> Megaelectronovolt (m=1, kg=1, s=1)|[MeV]*3|4.0|\n| [GeV] |Unit|\\<Unit of energy\\> Gigaelectronovolt (m=1, kg=1, s=1)|2*[GeV]|4.0|\n| [TeV] |Unit|\\<Unit of energy\\> Teraelectronovolt (m=1, kg=1, s=1)|[TeV]*3|4.0|\n\n## Units of speed\n|Key word|Category|Description|Example|Since|\n|---|---|---|---|---|\n| [m/s] |Unit|\\<Unit of speed\\> Metre / Meter per second (m=1, s=1)|2*[m/s]|4.0|\n| [km/h] |Unit|\\<Unit of speed\\> Kilometre / Kilometer per hour (m=1, s=1)|[km/h]*3|4.0|\n| [mi/h] |Unit|\\<Unit of speed\\> Mile per hour (m=1, s=1)|2*[mi/h]|4.0|\n| [knot] |Unit|\\<Unit of speed\\> Knot (m=1, s=1)|[knot]*3|4.0|\n\n## Units of acceleration\n|Key word|Category|Description|Example|Since|\n|---|---|---|---|---|\n| [m/s2] |Unit|\\<Unit of acceleration\\> Metre / Meter per square second (m=1, s=1)|2*[m/s2]|4.0|\n| [km/h2] |Unit|\\<Unit of acceleration\\> Kilometre / Kilometer per square hour (m=1, s=1)|[km/h2]*3|4.0|\n| [mi/h2] |Unit|\\<Unit of acceleration\\> Mile per square hour (m=1, s=1)|2*[mi/h2]|4.0|\n\n## Units of angle\n|Key word|Category|Description|Example|Since|\n|---|---|---|---|---|\n| [rad] |Unit|\\<Unit of angle\\> Radian (rad=1)|[rad]*pi|4.0|\n| [deg] |Unit|\\<Unit of angle\\> Degree of arc (rad=1)|180*[deg]|4.0|\n| [\'] |Unit|\\<Unit of angle\\> Minute of arc (rad=1)|[\']*3|4.0|\n| [\'\'] |Unit|\\<Unit of angle\\> Second of arc (rad=1)|2*[\'\']|4.0|\n\n## Other parser symbols\n|Key word|Category|Description|Example|Since|\n|---|---|---|---|---|\n| ( |Parser Symbol|Left parentheses|(3+2)/4|1.0|\n| ) |Parser Symbol|Right parentheses|(3+2)/4|1.0|\n| , |Parser Symbol|Comma (function parameters)|min(2,3,1)|1.0|\n| ; |Parser Symbol|Semicolon (function parameters)|min(2;3;1)|1.0|\n\n[![paypal](https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=QJYYH86583LEN)\n\n# Enjoy :-)\n\nBest regards,\n*Mariusz Gromada*\n'