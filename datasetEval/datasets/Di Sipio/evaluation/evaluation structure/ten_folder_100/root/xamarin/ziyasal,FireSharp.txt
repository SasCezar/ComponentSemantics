b'#   **Fire#**\n\n![](https://raw.githubusercontent.com/ziyasal/FireSharp/master/misc/logo.png)  \n\nFirebase REST API wrapper for the .NET & Xamarin.\n\nChanges are sent to all subscribed clients automatically, so you can\nupdate your clients **in realtime** from the backend.\n\n[![AppVeyor Build status](https://ci.appveyor.com/api/projects/status/bj2sdp2a0w5095sv?svg=true)](https://ci.appveyor.com/project/lablabla/firesharp) [![Coverage Status](https://coveralls.io/repos/github/ziyasal/FireSharp/badge.svg?branch=master)](https://coveralls.io/github/ziyasal/FireSharp?branch=master) [![Stories in Ready](https://badge.waffle.io/ziyasal/firesharp.svg?label=ready&title=Ready)](http://waffle.io/ziyasal/firesharp)  \n\n**IMPORTANT :** [**v1 docs**](https://github.com/ziyasal/FireSharp/wiki/v1-Docs) moved [here](https://github.com/ziyasal/FireSharp/wiki/v1-Docs).\n\n#### Installation (NuGet)\n```csharp\n//**Install v2**\nInstall-Package FireSharp\n\n//**Install v1**\nInstall-Package FireSharp -Version 1.1.0\n```\n### Usage\n[FirebaseClient](https://github.com/ziyasal/FireSharp/blob/master/FireSharp/FirebaseClient.cs) uses [Newtonsoft.Json](https://github.com/JamesNK/Newtonsoft.Json) by default.\n\n#### How can I configure FireSharp?\n------------------------------\n\n```csharp\n  IFirebaseConfig config = new FirebaseConfig\n  {\n     AuthSecret = "your_firebase_secret",\n     BasePath = "https://yourfirebase.firebaseio.com/"\n  };\n````\n```csharp\nIFirebaseClient  client = new FirebaseClient(config);\n```\nSo far, supported methods are :\n\n#### Set\n```csharp\n\nvar todo = new Todo {\n                name = "Execute SET",\n                priority = 2\n            };\nSetResponse response = await _client.SetAsync("todos/set", todo);\nTodo result = response.ResultAs<Todo>(); //The response will contain the data written\n```\n#### Push\n```csharp\n\n var todo = new Todo {\n                name = "Execute PUSH",\n                priority = 2\n            };\nPushResponse response =await  _client.PushAsync("todos/push", todo);\nresponse.Result.name //The result will contain the child name of the new data that was added\n```\n#### Get\n```csharp\n\n FirebaseResponse response = await _client.GetAsync("todos/set");\n Todo todo=response.ResultAs<Todo>(); //The response will contain the data being retreived\n```\n#### Update\n```csharp\nvar todo = new Todo {\n                name = "Execute UPDATE!",\n                priority = 1\n            };\n\nFirebaseResponse response =await  _client.UpdateAsync("todos/set", todo);\nTodo todo = response.ResultAs<Todo>(); //The response will contain the data written\n```\n#### Delete\n```csharp\n\nFirebaseResponse response =await  _client.DeleteAsync("todos"); //Deletes todos collection\nConsole.WriteLine(response.StatusCode);\n```\n#### Listen **Streaming from the REST API**\n```csharp\nEventStreamResponse response = await _client.OnAsync("chat", (sender, args, context) => {\n       System.Console.WriteLine(args.Data);\n});\n\n//Call dispose to stop listening for events\nresponse.Dispose();\n```\n\n## Release Notes\n**2.1**\n- Firesharp now is a Net Standard library, so it\'s available for every platform.\n\n\n**2.0**\n- Use Microsoft HTTP Client Libraries instead of RestSharp\n- FireSharp is now Portable Library\n- Supports Streaming from the REST API (Firebase REST endpoints support the EventSource / Server-Sent Events protocol.)\n- It is fully asynchronous and designed to be non-blocking \n\nMore information about Firebase and the Firebase API is available at the\n[official website](http://www.firebase.com/).\n\n'