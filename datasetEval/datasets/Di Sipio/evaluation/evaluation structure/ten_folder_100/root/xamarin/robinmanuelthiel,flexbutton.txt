b'# FlexButton\n\nFlexible button control for Xamarin.Forms with events for different states, color overlays and adjustable shapes and paddings. Supports iOS, Android and UWP.\n\n[![NuGet](https://img.shields.io/nuget/v/Forms.Controls.FlexButton.svg?label=NuGet&style=flat-square)](https://www.nuget.org/packages/Forms.Controls.FlexButton/) [![Build Status](https://dev.azure.com/robinmanuelthiel/Flex%20Button/_apis/build/status/Main%20Build)](https://dev.azure.com/robinmanuelthiel/Flex%20Button/_build/latest?definitionId=1)\n\n**Features:**\n\n- Adjustable button size and shape\n- Icons with adjustable size\n- Color overlays for background and icon (normal and pressed state)\n- Events for button hold and release\n- Round button and Pill button (using corner radius)\n- Icon only, text only or mixed mode\n- Customizable Borders\n- Toggle Mode\n\n## How to use\n\n**Add the [NuGet package](https://www.nuget.org/packages/Forms.Controls.FlexButton/) to the Xamarin.Forms project and all platform projects**\n\n```bash\nPM> Install-Package Forms.Controls.FlexButton\n```\n\n**[iOS only] Initialize the control**\nIn your **AppDelegate.cs** call this after `Forms.Init();`\n\n```csharp\nFlexButton.Init();\n```\n\n**Add the XML namespace**\n\n```xml\nxmlns:flex="clr-namespace:Flex.Controls;assembly=Flex"\n```\n\n**Add the control**\n\n```xml\n<flex:FlexButton\n    WidthRequest="76"\n    HeightRequest="76"\n    CornerRadius="38"\n    HorizontalOptions="Center"\n    Icon="lightbulb.png"\n    ForegroundColor="#ffffff"\n    HighlightForegroundColor="#49516F"\n    BackgroundColor="#6279B8"\n    HighlightBackgroundColor="#8EA4D2" />\n```\n\n## Preview\n\nTake a look a the [Demo Project](/Flex.Demo) in this repository for a full sample.\n\n![Preview](/Design/FlexButton.gif)\n\n## API Reference\n\n| Property | Default | Description |\n|------------------|---------|-------------|\n| `Icon` | `null` | Name of the icon file to use |\n| `Text` | `string.Empty` | Button text to be displayed |\n| `FontSize` | Default | Font size of the button text |\n| `ForegroundColor` | `White` | Foreground color overlay for icon and text |\n| `BackgroundColor` | `Transparent` | Background color of the button |\n| `BorderColor` | `Transparent` | Border color of the button |\n| `HighlightForegroundColor` | `White` | Foreground color overlay for icon and text when pressed down |\n| `HighlightBackgroundColor` | `Transparent` | Background color of the button when pressed down |\n| `HighlightBorderColor` | `Transparent` | Background color of the border when pressed down |\n| `CornerRadius` | `0` | Button borner radius |\n| `Padding` | 30% of height, 10-30% of width  | Inside distance from icon to button borders |\n| `IconPadding` | 0 | Additional Padding around the icon to control distance to text |\n| `IconOrientation` | `IconOrientation.Left` | Positions the icon on a button that has icon and text |\n| `BorderThickness` | `0` | Width of the border in each direction |\n| `ToggleMode` | `false` | Sets the button in Toggle Mode |\n| `IsToggled` | `false` | Represents the Toggle state, when Toggle Mode is enabled |\n| `IconTintEnabled` | `true` | Enables tinting of the icon (Set to false, if your icon is colorized) |\n| `HasShadow` | `false` | Enables Xamarin.Forms Frame\'s Shadow around the button |\n| `MaxLines` | `1` | Maximum number of lines for test. Set it to `-1` for flexible amount of lines |\n\n| Event | Description |\n|------------------|---------|\n| `TouchedDown` | Triggered, when button got pressed down |\n| `TouchedUp` | Triggered, when button got released |\n| `Clicked` | Same as `TouchedUp` |\n| `Toggled` | Triggered, when the button got toggled on or off |\n'