b'![Embeddinator-4000 Logo](e4000-logo.png)\n\n| Windows                   | macOS                       |\n|---------------------------|-----------------------------|\n| [![windows-vs-x86][1]][2] | [![osx-clang-x86][3]][4]\n\n[1]: https://jenkins.mono-project.com/view/Xamarin.MaciOS/job/embeddinator-4000-windows/badge/icon\n[2]: https://jenkins.mono-project.com/view/Xamarin.MaciOS/job/embeddinator-4000-windows/\n[3]: https://travis-ci.org/mono/Embeddinator-4000.svg?branch=master\n[4]: https://travis-ci.org/mono/Embeddinator-4000\n\nEmbeddinator-4000 is a tool to turn existing .NET libraries into\nlibraries that can be consumed by other languages.   \n\nIt is a tool that takes a .NET assembly and generates the necessary\nglue to surface the .NET API as a native API.   The goal is to surface\n.NET libraries to all ecosystems where Mono/Xamarin run, and for each\nplatform we provide an interface that is native to that platform as well\nas the tools needed to turn a .NET library into something that can be \nconsumed on that platform.\n\nPresently there is support for .NET to C, Objective-C (across the various Apple platforms)\nand Java (Android and regular Java), across Windows, Linux and macOS platforms.\n\n## Getting Started\n\nCheck out our [documentation to get started](https://docs.microsoft.com/en-us/xamarin/tools/dotnet-embedding/index).\n\n## Community\n\nFeel free to join us at our [#managed-interop](https://gitter.im/managed-interop) Gitter discussion channel.\n\n## Building\n\n- Clone this repository \n- Initialize/update submodules: `git submodule update --recursive --init`\n- Open the solution file `Embeddinator-4000.sln` with Visual Studio or Visual Studio For Mac\n- Build\n\nIf you prefer to build from the command line Cake or Make can be used to build instead of Visual Studio For Mac. \n\n### Cake\n\nThe Android/C portions of the project can also be built with [Cake](https://cakebuild.net/) using the build.ps1 / build.sh scripts.\n\nOn OS X, you can setup your environment for Android by running a shell script:\n\n```\n./build.sh -t Generate-Android -v diagnostic\n```\n\nOn Windows, in Powershell:\n\n```\n.\\build.ps1 -t Generate-Android -v diagnostic\n```\n\nThis will download a master build of Xamarin.Android and extract it into `/external/Xamarin.Android`. \n\n`Embeddinator-4000.exe` will be compiled to `build/lib/Release`. The Cake script will also run Embeddinator against a test assembly, so you can be sure your system is setup properly.\n\n### Makefile\n\nThe Objective-C portions of the project can be built with `make` in `objcgen`.\n\n### Nuget Generation\n\nTo generate the nuget one can use either (they both invoke the same build process):\n\n- `make nuget` in `objcgen`\n- [Cake](https://cakebuild.net/) :`./build.sh -t Create-Package`\n\n\n## Usage\n\nThe getting started [documentation](https://docs.microsoft.com/en-us/xamarin/tools/dotnet-embedding/index) walks through basic usage of the Embeddinator. \n\nMore details on platform specific invocations can be found [here](Usage.md).\n\n\n## Development\n\nThe [contributing guide](Contributing.md) covers a number of areas to consider when contributing to Embeddinator-4000.\n\nA number of internal documentation files exist describing the project and internal structure of Embeddinator:\n\n- [General Project Structure](ProjectStructure.md)\n- [Automated Tests](tests/Tests.md)\n- [Objective-C Generator Internals](objcgen/Internals.md)\n\n\n'