b'## Jitter Physics\n\n[![JitterPhysics Build][appveyor-badge]][appveyor-link] [![JitterPhysics on NuGet][nuget-badge]][nuget-link]\n\nJitter Physics is a fast and lightweight 3D physics engine written in C#.\n\n| Jitter Physics Cloth                  | Speculative Contacts Jitter Physics                  |\n| :-----------------------------------: | :--------------------------------------------------: |\n| [![Jitter Physics Cloth][img1]][vid1] | [![Speculative Contacts Jitter Physics][img2]][vid2] |\n\n\n**Platforms & Frameworks**\n - Every platform which supports .NET, Mono or Xamarin\n - Works with the Mono framework on Linux/Mac without any recompilation \n - Also supports the Xbox360 and Windows Phone _(up to v0.1.7)_\n - No dependencies. Every 3D engine/framework is supported: OpenTK, SlimDX, \n   SharpDX, XNA, IrrlichtEngine, Urho3D  \n\n**Overall Design** \n - Written in pure C# with a clean and object orientated API \n - Optimized for low to no garbage collections and maximum speed \n - Supported Shapes: TriangleMesh, Terrain, Compound, MinkowskiSum, Box, Sphere, \n   Cylinder, Cone, Capsule, ConvexHull \n - Take advantage of multi-core CPUs by using the internal multithreading of \n   the engine \n\n## Jitter Physics (2D)\n\nThe ["Jitter-2D" branch][jitter2d] is still in development an is not complete.\nAt this time, it is probably better to make use of [Farseer Physics][farseer].\n\n## Quick Start\n\n### Initialize the Physics System\nCreate a world class and initialize it with a `CollisionSystem`:\n\n    CollisionSystem collision = new CollisionSystemSAP();\n    World world = new World(collision);\n\n### Add Objects to the World\nCreate a shape of your choice and pass it to a body:\n\n    Shape shape = new BoxShape(1.0f, 2.0f, 3.0f);\n    RigidBody body = new RigidBody(shape);\n\nIt\'s valid to use the same shape for different bodies. \nSet the position and orientation of the body by using it\'s properties. \nThe next step is to add the `Body` to the world:\n \n    world.AddBody(body);\n \n### Run the Simulation\nNow you can call the `Step` method to integrate the world one timestep further. \nThis should be done in you main game loop:\n \n    while (gameRunning)\n    {\n        world.Step(1.0f / 100.0f, true);\n        \n        // do other stuff, like drawing\n    }\n \nThe first parameter is the timestep. This value should be as small as possible \nto get a stable simulation. The second parameter is for whether using internal \nmultithreading or not. That\'s it the body is now simulated and affected by \ndefault gravity specified in `World.Gravity`. After each timestep the `Position` \nof the body should be different.\n\n## Credits\n\nThis library was originally written by Thorben Linneweber. Original source code can be found at https://code.google.com/archive/p/jitterphysics.\n\n\n[img1]: http://img.youtube.com/vi/cM23EJOFp3E/0.jpg\n[vid1]: http://www.youtube.com/watch?v=\n[img2]: http://img.youtube.com/vi/bKP2GZLlPWA/0.jpg\n[vid2]: http://www.youtube.com/watch?v=bKP2GZLlPWA\n[jitter2d]: https://github.com/mattleibow/jitterphysics/tree/Jitter-2D\n[farseer]: https://farseerphysics.codeplex.com/\n\n[appveyor-badge]: https://img.shields.io/appveyor/ci/mattleibow/JitterPhysics/master.svg?style=flat-square\n[appveyor-link]: https://ci.appveyor.com/project/mattleibow/jitterphysics\n[nuget-badge]: https://img.shields.io/nuget/v/JitterPhysics.svg?style=flat-square\n[nuget-link]: https://www.nuget.org/packages/JitterPhysics/\n'