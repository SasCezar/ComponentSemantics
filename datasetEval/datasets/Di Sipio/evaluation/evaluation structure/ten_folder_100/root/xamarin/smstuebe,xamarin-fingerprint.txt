b'# <img src="doc/xamarin_fingerprint.png" width="71" height="71"/> Biometric / Fingerprint plugin for Xamarin\n\nXamarin and MvvMCross plugin for accessing the fingerprint or other biometric sensors.\n\n| Type      | Stable                                                                                                                                                                    | Pre release                                                                                                                                                                  |\n| --------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| vanilla   | [![NuGet](https://img.shields.io/nuget/v/Plugin.Fingerprint.svg?label=NuGet&style=flat-square)](https://www.nuget.org/packages/Plugin.Fingerprint/)                       | [![NuGet](https://img.shields.io/nuget/vpre/Plugin.Fingerprint.svg?label=NuGet&style=flat-square)](https://www.nuget.org/packages/Plugin.Fingerprint/)                       |\n| MvvmCross | [![NuGet](https://img.shields.io/nuget/v/MvvmCross.Plugins.Fingerprint.svg?label=NuGet&style=flat-square)](https://www.nuget.org/packages/MvvmCross.Plugins.Fingerprint/) | [![NuGet](https://img.shields.io/nuget/vpre/MvvmCross.Plugins.Fingerprint.svg?label=NuGet&style=flat-square)](https://www.nuget.org/packages/MvvmCross.Plugins.Fingerprint/) |\n\n[Changelog](doc/changelog.md)\n\n## Support\n\nIf you like the quality and code you can support me \n\n- [![Donate](https://img.shields.io/badge/Donate-PayPal-green.svg?style=flat-square)](https://www.paypal.me/smstuebe)  \n- <a href="https://www.buymeacoffee.com/HLBu62Uv8" target="_blank"><img src="https://www.buymeacoffee.com/assets/img/custom_images/purple_img.png" alt="Buy Me A Coffee" style="height: auto !important;width: auto !important;" ></a>\n\nThanks!\n\nThe plugin supports the listed platforms.\n\n| Platform        | Version |\n| --------------- | ------- |\n| Xamarin.Android | 6.0     |\n| Xamarin.iOS     | 8.0     |\n| Xamarin.Mac     | 10.12   |\n| Windows UWP     | 10      |\n\n## Setup\n\n### iOS\n\nAdd `NSFaceIDUsageDescription` to your Info.plist to describe the reason your app uses Face ID. (see [Documentation](https://developer.apple.com/library/content/documentation/General/Reference/InfoPlistKeyReference/Articles/CocoaKeys.html#//apple_ref/doc/uid/TP40009251-SW75)). Otherwise the App will crash when you start a Face ID authentication on iOS 11.3+.\n\n```xml\n<key>NSFaceIDUsageDescription</key>\n<string>Need your face to unlock secrets!</string>\n```\n\n### Android\n\n**Set Target SDK version**\n\nThe target SDK version has to be >= 6.0. I recomment to use always the latest stable SDK version, if possible. You can set the target SDK version in your Android project properties.\n\n**Install Android X Migration**\n\nSince version 2, this plugin uses Android X. You have to install Xamarin.AndroidX.Migration in your Android project.\n\n**Request the permission in AndroidManifest.xml**\n\n```xml\n<uses-permission android:name="android.permission.USE_FINGERPRINT" />\n```\n\n**Set the resolver of the current Activity**\n\nSkip this, if you use the MvvMCross Plugin or don\'t use the dialog.\n\nWe need the current activity to display the dialog. You can use the [Current Activity Plugin](https://github.com/jamesmontemagno/Xamarin.Plugins/tree/master/CurrentActivity) from James Montemagno or implement your own functionality to retrieve the current activity. See Sample App for details.\n\n```csharp\nCrossFingerprint.SetCurrentActivityResolver(() => CrossCurrentActivity.Current.Activity);\n```\n\n## Usage\n\n### Example\n\n#### vanilla\n\n```csharp\nvar result = await CrossFingerprint.Current.AuthenticateAsync("Prove you have fingers!");\nif (result.Authenticated)\n{\n    // do secret stuff :)\n}\nelse\n{\n    // not allowed to do secret stuff :(\n}\n```\n\n#### using MvvMCross\n\n```csharp\nvar fpService = Mvx.Resolve<IFingerprint>(); // or use dependency injection and inject IFingerprint\n\nvar result = await fpService.AuthenticateAsync("Prove you have mvx fingers!");\nif (result.Authenticated)\n{\n    // do secret stuff :)\n}\nelse\n{\n    // not allowed to do secret stuff :(\n}\n```\n\n### Xamarin University public lecture\n\n[![Xamarin University public lecture](https://img.youtube.com/vi/n8m344IxlnY/0.jpg)](https://www.youtube.com/watch?v=n8m344IxlnY)\n\n### API\n\nThe API is defined by the `IFingerprint` interface:\n\n```csharp\n/// <summary>\n/// Checks the availability of fingerprint authentication.\n/// Checks are performed in this order:\n/// 1. API supports accessing the fingerprint sensor\n/// 2. Permission for accessint the fingerprint sensor granted\n/// 3. Device has sensor\n/// 4. Fingerprint has been enrolled\n/// <see cref="FingerprintAvailability.Unknown"/> will be returned if the check failed\n/// with some other platform specific reason.\n/// </summary>\n/// <param name="allowAlternativeAuthentication">\n/// En-/Disables the use of the PIN / Passwort as fallback.\n/// Supported Platforms: iOS, Mac\n/// Default: false\n/// </param>\nTask<FingerprintAvailability> GetAvailabilityAsync(bool allowAlternativeAuthentication = false);\n\n/// <summary>\n/// Checks if <see cref="GetAvailabilityAsync"/> returns <see cref="FingerprintAvailability.Available"/>.\n/// </summary>\n/// <param name="allowAlternativeAuthentication">\n/// En-/Disables the use of the PIN / Passwort as fallback.\n/// Supported Platforms: iOS, Mac\n/// Default: false\n/// </param>\n/// <returns><c>true</c> if Available, else <c>false</c></returns>\nTask<bool> IsAvailableAsync(bool allowAlternativeAuthentication = false);\n\n/// <summary>\n/// Requests the authentication.\n/// </summary>\n/// <param name="reason">Reason for the fingerprint authentication request. Displayed to the user.</param>\n/// <param name="cancellationToken">Token used to cancel the operation.</param>\n/// <returns>Authentication result</returns>\nTask<FingerprintAuthenticationResult> AuthenticateAsync(string reason, CancellationToken cancellationToken = default(CancellationToken));\n\n/// <summary>\n/// Requests the authentication.\n/// </summary>\n/// <param name="authRequestConfig">Configuration of the dialog that is displayed to the user.</param>\n/// <param name="cancellationToken">Token used to cancel the operation.</param>\n/// <returns>Authentication result</returns>\nTask<FingerprintAuthenticationResult> AuthenticateAsync(AuthenticationRequestConfiguration authRequestConfig, CancellationToken cancellationToken = default(CancellationToken));\n```\n\nThe returned `FingerprintAuthenticationResult` contains information about the authentication.\n\n```csharp\n/// <summary>\n/// Indicatates whether the authentication was successful or not.\n/// </summary>\npublic bool Authenticated { get { return Status == FingerprintAuthenticationResultStatus.Succeeded; } }\n\n/// <summary>\n/// Detailed information of the authentication.\n/// </summary>\npublic FingerprintAuthenticationResultStatus Status { get; set; }\n\n/// <summary>\n/// Reason for the unsucessful authentication.\n/// </summary>\npublic string ErrorMessage { get; set; }\n```\n\n### Example\n\n#### vanilla\n\n```csharp\nvar result = await CrossFingerprint.Current.AuthenticateAsync("Prove you have fingers!");\nif (result.Authenticated)\n{\n    // do secret stuff :)\n}\nelse\n{\n    // not allowed to do secret stuff :(\n}\n```\n\n#### using MvvMCross\n\n```csharp\nvar fpService = Mvx.Resolve<IFingerprint>(); // or use dependency injection and inject IFingerprint\n\nvar result = await fpService.AuthenticateAsync("Prove you have mvx fingers!");\nif (result.Authenticated)\n{\n    // do secret stuff :)\n}\nelse\n{\n    // not allowed to do secret stuff :(\n}\n```\n\n#### mocking in unit tests\n\n```C#\n//Create mock with LigthMock (http://www.lightinject.net/)\nvar mockFingerprintContext = new MockContext<IFingerprint>();\nvar mockFingerprint = new CrossFingerprintMock(mockFingerprintContext);\n\nmockFingerprintContext.Current = mockFingerprint;\n```\n\n### iOS\n\n#### Limitations\n\nYou can\'t create a custom dialog. The standard iOS Dialog will be shown.\n\n##### iOS 9+ only\n\n- cancelable programmatically with passed CancellationToken\n- custom fallback button title\n\n##### iOS 10+ only\n\n- custom cancel button title\n\n### Android\n\n#### Limitations\n\nYou can\'t use the alternative authentication method.\n\n#### Configuration\n\nIf you don\'t like the default dialog, you can easily customize it. You have to inherit from `FingerprintDialogFragment` e.g. like:\n\n```csharp\npublic class MyCustomDialogFragment : FingerprintDialogFragment\n{\n    public override View OnCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)\n    {\n        var view = base.OnCreateView(inflater, container, savedInstanceState);\n        view.Background = new ColorDrawable(Color.Magenta); // make it fancyyyy :D\n        return view;\n    }\n}\n```\n\nAnd somewhere in your code set your custom dialog fragment:\n\n```csharp\nCrossFingerprint.SetDialogFragmentType<MyCustomDialogFragment>();\n```\n\n### UWP\n\n#### Limitations\n\nYou can\'t use the alternative authentication method.\n\n## Testing on Simulators\n\n### iOS\n\n![Controlling the sensor on the iOS Simulator](doc/ios_simulator.png "Controlling the sensor on the iOS Simulator")\n\nWith the Hardware menu you can\n\n- Toggle the enrollment status\n- Trigger valid (<kbd>\xe2\x8c\x98</kbd> <kbd>\xe2\x8c\xa5</kbd> <kbd>M</kbd>) and invalid (<kbd>\xe2\x8c\x98</kbd> <kbd>\xe2\x8c\xa5</kbd> <kbd>N</kbd>) fingerprint sensor events\n\n### Android\n\n- start the emulator (Android >= 6.0)\n- open the settings app\n- go to Security > Fingerprint, then follow the enrollment instructions\n- when it asks for touch\n- open command prompt\n- `telnet 127.0.0.1 <emulator-id>` (`adb devices` prints "emulator-&lt;emulator-id&gt;")\n- `finger touch 1`\n- `finger touch 1`\n\nSending fingerprint sensor events for testing the plugin can be done with the telnet commands, too.\n\n**Note for Windows users:**\nYou have to enable telnet: Programs and Features > Add Windows Feature > Telnet Client\n\n## Nice to know\n\n### Android code shrinker (Proguard & r8)\n\nIf you use the plugin with Link all, Release Mode and ProGuard/r8 enabled, you may have to do the following:\n\n1. Create a `proguard.cfg` file in your android project and add the following:\n```\n    -dontwarn com.samsung.**\n    -keep class com.samsung.** {*;}\n```\n2. Include it to your project\n3. Properties > Build Action > ProguardConfiguration\n\n\n## Contribution\n\n<img src="http://i.imgur.com/WFBeQuG.png" /> + <img src="http://i.imgur.com/P4Ay9tm.png" />\n'