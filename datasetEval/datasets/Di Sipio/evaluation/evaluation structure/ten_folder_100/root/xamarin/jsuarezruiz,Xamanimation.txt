b'# Xamanimation - Animation Library for Xamarin.Forms\n\n**Xamanimation** is a library designed for Xamarin.Forms that aims to facilitate the use of **animations** to developers. Very simple use from **C# and XAML** code.\n\n![Xamanimation](Media/xamanimation.gif)\n\nWe can define animations in XAML to a visual element when loading through a Behavior, use a trigger in XAML to execute the animation or  from C# code.\n\nAvailable animations:\n\n- Color\n- FadeTo\n- Flip\n- Heart\n- Jump\n- Rotate\n- Scale\n- Shake\n- Translate\n- Turnstile\n\n## Installation\n\nTo install Xamanimation, run the following command in the Package Manager Console.\n\n    PM> Install-Package Xamanimation\n\n\n## Animations directly from XAML\n\nOne of the main advantages of the library is the possibility of using animations from **XAML**. We must use the following namespace:\n\n    xmlns:xamanimation="clr-namespace:Xamanimation;assembly=Xamanimation"\n\nLet\'s animate a BoxView:\n\n    <BoxView\n         x:Name="FadeBox"\n         HeightRequest="120"\n         WidthRequest="120"\n         Color="Blue" />\n\nwe can define animations directly in XAML (as Application or Page Resources):\n\n    <xamanimation:FadeToAnimation\n         x:Key="FadeToAnimation"\n         Target="{x:Reference FadeBox}"\n         Duration="2000"\n         Opacity="0"/>\n\nUsing the namespace of xamanimation, we have access to the whole set of animations of the library. In all of them there are a number of common **parameters** such as:\n\n- **Target**: Indicate the visual element to which we will apply the animation.\n- **Duration**: Duration of the animation in milliseconds.\n\nDepending on the animation type used, we will have more parameters to customize the specific animation. For example, in the case of Fade Animation we will have an Opacity property to set how we modify the opacity.\n\nTo launch the animation we have two options:\n\n- **Trigger**: Called BeginAnimation that allows us to launch an animation when a condition occurs.\n- **Behavior**: We have a Behavior called BeginAnimation that we can associate to a visual element so that indicating the desired animation, we can launch the same when the element load occurs.\n\nUsing the Clicked event of a button we can launch the previous animation using the trigger provided:\n\n    <Button \n         Text="Fade">\n         <Button.Triggers>\n              <EventTrigger Event="Clicked">\n                   <xamanimation:BeginAnimation\n                        Animation="{StaticResource FadeToAnimation}" />\n              </EventTrigger>\n         </Button.Triggers>\n    </Button>\n\nWe also have the concept of **Storyboard** as a set of animations that we can execute over time:\n\n    <xamanimation:StoryBoard\n         x:Key="StoryBoard"\n         Target="{x:Reference StoryBoardBox}">\n         <xamanimation:ScaleToAnimation  Scale="2"/>\n         <xamanimation:ShakeAnimation />\n    </xamanimation:StoryBoard>\n\n## Using C# \n\nIn the same way that we can use the animations of the library from XAML, we can do it from **C#** code. We have an extension method called **Animate** that expects an instance of any of the available animations.\n\nIf we want to animate a BoxView called AnimationBox:\n\n    <BoxView\n         x:Name="AnimationBox"\n         HeightRequest="120"\n         WidthRequest="120"\n         Color="Blue" />\n\nAccess the element, use the Animate method with the desired animation:\n\n    AnimationBox.Animate(new HeartAnimation());\n\n## Take control of the animation\n\nYou can control the duration of the animation using the **Duration** property. In addition to the type of **Easing** to use. Now, new properties have also been added such as:\n\n**Delay** Add a delay before play the animation.\n\n<img src="Media/xamanimation-delayed.gif" Width="250" />\n\n**Repeat Forever** Now you can create infinite animations if you need it.\n\n<img src="Media/xamanimation-repeat.gif" Width="250" />\n\n## Triggers!\n\nTriggers allow you to start animations declaratively in XAML based on events or property changes.\n\n```\n<Entry \n    FontSize="16" \n    BackgroundColor="LightGray">\n    <Entry.Triggers>\n        <Trigger TargetType="Entry" Property="IsFocused" Value="True">\n            <Trigger.EnterActions>\n                <xamanimation:AnimateDouble TargetProperty="Entry.FontSize" To="24"/>\n                <xamanimation:AnimateColor TargetProperty="Entry.TextColor" To="Red"/>\n                <xamanimation:AnimateColor TargetProperty="VisualElement.BackgroundColor" To="Yellow" Delay="1000"/>\n                <xamanimation:AnimateDouble TargetProperty="VisualElement.Rotation" To="12" Duration="100"/>\n            </Trigger.EnterActions>\n            <Trigger.ExitActions>\n                <xamanimation:AnimateDouble TargetProperty="{x:Static Entry.FontSizeProperty}" To="16"/>\n                <xamanimation:AnimateColor TargetProperty="{x:Static Entry.TextColorProperty}" To="Black"/>\n                <xamanimation:AnimateColor TargetProperty="{x:Static VisualElement.BackgroundColorProperty}" To="LightGray"/>\n                <xamanimation:AnimateDouble TargetProperty="{x:Static VisualElement.RotationProperty}" To="0"/>\n            </Trigger.ExitActions>\n        </Trigger>\n    </Entry.Triggers>\n</Entry>\n```\n<img src="Media/xamanimation-triggers.gif" Width="250" />\n\nYou can animate any property of type Int, Double, Color, Thickness or CornerRadius. Available options:\n* AnimateInt\n* AnimateColor\n* AnimateCornerRadius\n* AnimateDouble\n* AnimateThickness\n\n## Progress Animations\n\nSometimes you need to animate something based on a value that changes over time, for example as a a the result of a user interaction.\n\nA common scenario is using a scroll. A parallax effect, etc.\n\n```\n<BoxView \n    BackgroundColor="Red"\n    CornerRadius="24, 24, 0, 0">\n    <VisualElement.Behaviors>\n        <xamanimation:AnimateProgressColor\n            TargetProperty="VisualElement.BackgroundColor"\n            Progress="{Binding ScrollY, Source={x:Reference ScrollBehavior}}" \n            Minimum="0"\n            Maximum="200"\n            From="Black"\n            To="Red"/>\n        <xamanimation:AnimateProgressCornerRadius\n            TargetProperty="BoxView.CornerRadius"\n            Progress="{Binding ScrollY, Source={x:Reference ScrollBehavior}}" \n            Minimum="0"\n            Maximum="200"\n            From="24, 24, 0, 0"\n            To="0,0,0,0"/>\n    </VisualElement.Behaviors>\n</BoxView>\n```\n<img src="Media/xamanimation-progress.gif" Width="250" />\n\nAvailable options:\n* AnimateProgressInt\n* AnimateProgressColor\n* AnimateProgressCornerRadius\n* AnimateProgressDouble\n* AnimateProgressThickness\n\n## Transitions\n\nProvides the animated transition behavior on controls when they first appear. You can use this on individual objects or on containers of objects. In the latter case, child elements will animate into view in sequence rather than all at the same time.\n\n```\n<FlexLayout \n     Wrap="Wrap"\n\t Direction="Row"\n\t JustifyContent="Start"\n\t AlignItems="Start"\n\t AlignContent="Start">\n\t <FlexLayout.Behaviors>\n\t <xamanimation:EntranceTransition\n\t      Duration="1000"/>\n\t </FlexLayout.Behaviors>\n</FlexLayout>\n```\n<img src="Media/xamanimation-transitions.gif" Width="250" />\n\n## Feedback\n\nPlease use [GitHub issues](https://github.com/jsuarezruiz/xamanimation/issues) for questions or comments.\n\n## Copyright and license\n\nCode released under the [MIT license](https://opensource.org/licenses/MIT).\n'