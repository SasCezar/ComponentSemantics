b"# Illustrated Algorithms\nAlgorithm \xe2\x86\x92 AST \xe2\x86\x92 CSS (3 x JavaScript)\n\n[![Binary search](binary-search.gif)](https://illustrated-algorithms.now.sh/)\n\nInspired by [Grokking Algorithms](https://www.manning.com/books/grokking-algorithms) and [python-execution-trace](https://github.com/mihneadb/python-execution-trace), this project aims to reveal the mechanics behind algorithms via interactive visualizations of their execution.\n\nVisual representations of variables and operations augment the control flow, alongside actual source code. You can fast forward and rewind the execution to closely observe how an algorithm works.\n\n## Disclaimer \xe2\x9c\x8c\xef\xb8\x8f\n\nEdge cases and optimizations are beyond the scope of this project. The featured implementations are chosen for their simplicity and do not promise to work for data sets different from the illustrated ones. Please rely on other resources for learning algorithms in depth, from Wikipedia to other [visualization](https://visualgo.net/) [projects](https://www.youtube.com/watch?v=ywWBy6J5gz8). Also see community-driven [Footnotes](#footnotes). Thanks.\n\n## Principles\n\n- The same code that is displayed next to the illustration is also decorated using [babel-plugin-trace-execution](https://github.com/skidding/babel-plugin-trace-execution) and executed to record the context at every step. Literally the same source file.\n- Going back and forth between function execution (and call stack when algorithm uses recursion) is effortless. So is pausing and resuming.\n- Visualizations are easy to follow, fun to play with and simple enough to fit inside the screen of any modern phone.\n\n## Work in progress\n\n- Follow [@skidding](https://twitter.com/skidding) for updates\n- Check out gifs attached to [Releases](https://github.com/skidding/illustrated-algorithms/releases) to see project evolution\n- See [How to contribute](#how-to-contribute) below\n\n## Dynamic styles\n\nThis project uses [styled-jsx](https://github.com/zeit/styled-jsx), but takes the idea of *CSS-in-JS* even further. Sizing, positioning and transition offsets are computed by JS, all before elements hit the DOM. This provides complete control over layout (e.g. font scaling relative to container width, rounded to a multiplier of 2) and animation (e.g. pausing in the middle of a transition and rewinding). It's a wild concept that hopefully gets mainstream someday.\n\n## How to contribute\n\nConsider the following actions if you want to advance this project:\n\n- Find and/or fix bugs\n- Add tests to [babel-plugin-trace-execution](https://github.com/skidding/babel-plugin-trace-execution)\n- Improve rendering perf (already decent, but not ideal due to [how styles are applied](#dynamic-styles))\n- Propose algorithms to add (that can fit in a func <=25 lines of ES6)\n- Create elegant illustrations (sketches/wireframes do) \xe2\x80\x93 **Hello graphic designers and people who draw!**\n\nBefore submitting a PR, make sure to:\n- Briefly describe the value of your contribution\n- Stay in line with the project's mission (i.e. to make algorithms easy, see above sections)\n- Test code before committing it via `npm run test`\n- Thoroughly test the visual experience you're creating (e.g. algorithms must fit nicely on the screen)\n\n## Development\n\n```bash\nnpm i\n# Start Next.js server (localhost:3000)\nnpm run dev\n# Run tests\nnpm test\n# Start React Cosmos playground (localhost:8989)\nnpm run cosmos\n```\n\n## Footnotes\n\nWhile this project doesn't focus on algorithm implementation specifics, here's a list of valuable insights brought up by the community which serves to complement the visuals.\n\n#### Binary Search\n\n- [#21](https://github.com/skidding/illustrated-algorithms/issues/21) Calculating `mid` can be improved to avoid overflow when list is sufficiently large enough ([@mhaji](https://github.com/mhaji))\n\n#### Quicksort\n\n- [#19](https://github.com/skidding/illustrated-algorithms/issues/19) Extending implementation to support duplicates ([@ACollectionOfAtoms](https://github.com/ACollectionOfAtoms))\n\n---\n\nPlease note that this project is released with a [Contributor Code of Conduct.](CODE_OF_CONDUCT.md) By participating in this project you agree to abide by its terms.\n"