b'![Algorithm](http://www.cosmicmind.com/algorithm/github/algorithm-logo.png)\n\n## Welcome to Algorithm\n\nAlgorithm is a library of tools that is used to create intelligent applications.\n\n## Features\n\n- [x] Probability Tools \n- [x] Expected Value\n- [x] Programmable Probability Blocks\n- [x] Array Extensions\n- [x] Set Extensions\n\n## Data Structures\n\n- [x] DoublyLinkedList\n- [x] Stack\n- [x] Queue\n- [x] Deque\n- [x] RedBlackTree\n- [x] SortedSet\n- [x] SortedMultiSet\n- [x] SortedDictionary\n- [x] SortedMultiDictionary\n\n## Requirements\n\n* iOS 8.0+ / Mac OS X 10.9+\n* Xcode 8.0+\n\n## Communication\n\n- If you **need help**, use [Stack Overflow](http://stackoverflow.com/questions/tagged/cosmicmind). (Tag \'cosmicmind\')\n- If you\'d like to **ask a general question**, use [Stack Overflow](http://stackoverflow.com/questions/tagged/cosmicmind).\n- If you **found a bug**, _and can provide steps to reliably reproduce it_, open an issue.\n- If you **have a feature request**, open an issue.\n- If you **want to contribute**, submit a pull request.\n\n## Installation\n\n> **Embedded frameworks require a minimum deployment target of iOS 8.**\n> - [Download Algorithm](https://github.com/CosmicMind/Algorithm/archive/master.zip)\n\n## CocoaPods\n\n[CocoaPods](http://cocoapods.org) is a dependency manager for Cocoa projects. You can install it with the following command:\n\n```bash\n$ gem install cocoapods\n```\n\nTo integrate Algorithm\'s core features into your Xcode project using CocoaPods, specify it in your `Podfile`:\n\n```ruby\nsource \'https://github.com/CocoaPods/Specs.git\'\nplatform :ios, \'8.0\'\nuse_frameworks!\n\npod \'Algorithm\', \'~> 3.1.0\'\n```\n\nThen, run the following command:\n\n```bash\n$ pod install\n```\n\n## Carthage\n\nCarthage is a decentralized dependency manager that builds your dependencies and provides you with binary frameworks.\n\nYou can install Carthage with Homebrew using the following command:\n\n```bash\n$ brew update\n$ brew install carthage\n```\nTo integrate Algorithm into your Xcode project using Carthage, specify it in your Cartfile:\n\n```bash\ngithub "CosmicMind/Algorithm"\n```\n\nRun `carthage update` to build the framework and drag the built `Algorithm.framework` into your Xcode project.\n\n## Changelog\n\nAlgorithm is a growing project and will encounter changes throughout its development. It is recommended that the [Changelog](https://github.com/CosmicMind/Algorithm/wiki/Changelog) be reviewed prior to updating versions.\n\n# Samples\n\nThe following are samples to see how Algorithm may be used within your applications.\n\n* Visit the [Samples](https://github.com/CosmicMind/Samples) repo to see example projects using Algorithm.\n\n- [Samples](#samples)\n  - [Probability](#probability)\n      - [Basic Probability](#basic-probability)\n      - [Conditional Probability](#conditional-probability)\n  - [Expected Value](#expected-value)\n  - [DoublyLinkedList](#doublylinkedlist)\n  - [Stack](#stack)\n  - [Queue](#queue)\n  - [Deque](#deque)\n  - [RedBlackTree](#redblacktree)\n  - [SortedSet](#sortedset)\n  - [SortedMultiSet](#sortedmultiset)\n  - [SortedDictionary](#sorteddictionary)\n  - [SortedMultiDictionary](#sortedmultidictionary)\n  - [License](#license)\n\n<a name="probability"></a>\n## Probability\n\nEach data structure within Algorithm is equipped with probability tools.\n\n#### Basic Probability\n\nFor example, determining the probability of rolling a 3 using a die of 6 numbers.\n\n```swift\nlet die = [Int](arrayLiteral: 1, 2, 3, 4, 5, 6)\n\nif 0.1 < die.probability(of: 3) \n\t\t// Do something ...\n}\n```\n\n#### Conditional Probability\n\nFor conditional probabilities that require a more complex calculation, use block statements.\n\n```swift\nlet die = [Int](arrayLiteral: 1, 2, 3, 4, 5, 6)\n\nlet pOfX = die.probability { (number) in\n\treturn 5 < number || 0 == number % 3\n}\n\nif 0.33 < pOfX {\n\t// Do something ...\n}\n```\n\n<a name="expectedvalue"></a>\n## Expected Value\n\nThe expected value of rolling a 3 or 6 with 100 trials using a die of 6 numbers.\n\n```swift\nlet die = [Int](arrayLiteral: 1, 2, 3, 4, 5, 6)\n\nif 20 < die.expectedValue(trials: 100, for: 3, 6) {\n\t\t// Do something ...\n}\n```\n\n<a name="doublylinkedlist"></a>\n## DoublyLinkedList\n\nThe DoublyLinkedList data structure is excellent for large growing collections of data. Below is an example of its usage.\n\n```swift\nvar listA = DoublyLinkedList<Int>()\n        \nlistA.insert(atFront: 3)\nlistA.insert(atFront: 2)\nlistA.insert(atFront: 1)\n\nvar listB = DoublyLinkedList<Int>()\n\nlistB.insert(atBack: 4)\nlistB.insert(atBack: 5)\nlistB.insert(atBack: 6)\n\nvar listC = listA + listB\n\nlistC.cursorToFront()\n\nvar value = listC.cursor\n\nwhile nil != value {\n    // Do something ...\n    \n    value = listC.next()\n}\n```\n\n<a name="stack"></a>\n## Stack\n\nThe Stack data structure is a container of objects that are inserted and removed according to the last-in-first-out (LIFO) principle. Below is an example of its usage.\n\n```swift\nvar stack = Stack<Int>()\n\nstack.push(1)\nstack.push(2)\nstack.push(3)\n\nwhile !stack.isEmpty {\n\tlet value = stack.pop()\n\t\n\t// Do something ...\n}\n```\n\n<a name="queue"></a>\n## Queue\n\nThe Queue data structure is a container of objects that are inserted and removed according to the first-in-first-out (FIFO) principle. Below is an example of its usage.\n\n```swift\nvar queue = Queue<Int>()\n\nqueue.enqueue(1)\nqueue.enqueue(2)\nqueue.enqueue(3)\n\nwhile !queue.isEmpty {\n    let value = queue.dequeue()\n\n    // Do something ...\n}\n```\n\n<a name="deque"></a>\n## Deque\n\nThe Deque data structure is a container of objects that are inserted and removed according to the first-in-first-out (FIFO) and last-in-first-out (LIFO) principle. Essentially, a Deque is a Stack and Queue combined. Below are examples of its usage.\n\n```swift\nvar dequeA = Deque<Int>()\ndequeA.insert(atBack: 1)\ndequeA.insert(atBack: 2)\ndequeA.insert(atBack: 3)\n\nwhile !dequeA.isEmpty {\n\tlet value = dequeA.removeAtFront()\n\t\n\t// Do something ...\n}\n\nvar dequeB = Deque<Int>()\ndequeB.insert(atBack: 4)\ndequeB.insert(atBack: 5)\ndequeB.insert(atBack: 6)\n\nwhile !dequeB.isEmpty {\n\tlet value = dequeB.removeAtFront()\n\t\n\t// Do something ...\n}\n```\n\n<a name="redblacktree"></a>\n## RedBlackTree\n\nA RedBlackTree is a Balanced Binary Search Tree that maintains insert, remove, update, and search operations in a complexity of O(logn). The following implementation of a RedBlackTree also includes an order-statistic, which allows the data structure to be accessed using subscripts like an array or dictionary. RedBlackTrees may store unique keys or non-unique key values. Below is an example of its usage.\n\n```swift\nvar ages = RedBlackTree<String, Int>(uniqueKeys: true)\n\nages.insert(value: 16, for: "Sarah")\nages.insert(value: 12, for: "Peter")\nages.insert(value: 23, for: "Alex")\n\nlet node = ages[1]\n\nif "Peter" == node.key {\n    // Do something ...\n}\n```\n\n<a name="sortedset"></a>\n## SortedSet\n\nSortedSets are a powerful data structure for algorithm and analysis design. Elements within a SortedSet are unique and insert, remove, and search operations have a complexity of O(logn). The following implementation of a SortedSet also includes an order-statistic, which allows the data structure to be accessed using an index subscript like an array. Below are examples of its usage.\n\n```swift\nlet setA = SortedSet<Int>(elements: 1, 2, 3)\nlet setB = SortedSet<Int>(elements: 4, 3, 6)\nlet setC = SortedSet<Int>(elements: 7, 1, 2)\nlet setD = SortedSet<Int>(elements: 1, 7)\nlet setE = SortedSet<Int>(elements: 1, 6, 7)\n\n// Union.\nsetA + setB\nsetA.union(setB)\n\n// Intersection.\nsetC.intersection(setD)\n\n// Subset.\nsetD < setC\nsetD.isSubset(of: setC)\n\n// Superset.\nsetD > setC\nsetD.isSuperset(of: setC)\n\n// Contains.\nsetE.contains(setA.first!)\n\n// Probability.\nsetE.probability(of: setA.first!, setA.last!)\n```\n\n<a name="sortedmultiset"></a>\n## SortedMultiSet\n\nA SortedMultiSet is identical to a SortedSet, except that a SortedMultiSet allows non-unique elements. Look at [SortedSet](#sortedset) for examples of its usage.\n\n<a name="sorteddictionary"></a>\n## SortedDictionary\n\nA SortedDictionary is a powerful data structure that maintains a sorted set of keys with value pairs. Keys within a SortedDictionary are unique and insert, remove, update, and search operations have a complexity of O(logn).\n\n<a name="sortedmultidictionary"></a>\n## SortedMultiDictionary\n\nA SortedMultiDictionary is identical to a SortedDictionary, except that a SortedMultiDictionary allows non-unique keys. Below is an example of its usage.\n\n```swift\nstruct Student {\n    var name: String\n}\n\nlet sarah = Student(name: "Sarah")\nlet peter = Student(name: "Peter")\nlet alex = Student(name: "Alex")\n\nvar students = SortedMultiDictionary<String, Student>()\n\nstudents.insert(value: sarah, for: sarah.name)\nstudents.insert(value: peter, for: peter.name)\nstudents.insert(value: alex, for: alex.name)\n\nfor student in students {\n    // Do something ...\n}\n```\n\n## License\n\nThe MIT License (MIT)\n\nCopyright (C) 2019, CosmicMind, Inc. <http://cosmicmind.com>.\nAll rights reserved.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the "Software"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n'