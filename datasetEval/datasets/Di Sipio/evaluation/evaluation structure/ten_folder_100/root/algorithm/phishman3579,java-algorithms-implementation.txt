b'Java : Algorithms and Data Structure ![alt tag](https://api.travis-ci.org/phishman3579/java-algorithms-implementation.svg?branch=master)\n==============================\n\nAlgorithms and Data Structures implemented in Java\n\nThis is a collection of algorithms and data structures which I\'ve implement over the years in my academic and professional life. The code isn\'t overly-optimized but is written to be correct and readable. The algorithms and data structures are well tested and, unless noted, are believe to be 100% correct.\n\n## Created by Justin Wetherell\n\n* For questions use: http://groups.google.com/forum/#!forum/java-algorithms-implementation\n* Google:   http://code.google.com/p/java-algorithms-implementation\n* Github:   http://github.com/phishman3579/java-algorithms-implementation\n* LinkedIn: http://www.linkedin.com/in/phishman3579\n* E-mail:   phishman3579@gmail.com\n* Twitter:  http://twitter.com/phishman3579\n\n## Support me with a donation\n\n<a href="https://www.paypal.com/cgi-bin/webscr?cmd=_donations&business=phishman3579%40gmail%2ecom&lc=US&item_name=Support%20open%20source&item_number=JavaAlgorithms&currency_code=USD&bn=PP%2dDonationsBF%3abtn_donateCC_SM%2egif%3aNonHosted" target="_new"><img border="0" alt="Donate to this project" src="https://www.paypalobjects.com/en_US/i/btn/btn_donate_SM.gif"></a>\n\n# What\'s been implemented:\n\n## Table of Contents\n- [Data Structures](#data-structures)\n- [Mathematics](#mathematics)\n- [Numbers](#numbers)\n- [Graphs](#graphs)\n- [Search](#search)\n- [Sequences](#sequences)\n- [Sorts](#sorts)\n- [String Functions](#string-functions)\n\n## Data Structures\n* [AVL Tree](src/com/jwetherell/algorithms/data_structures/AVLTree.java)\n* [B-Tree](src/com/jwetherell/algorithms/data_structures/BTree.java)\n* [Binary Heap (backed by an array or a tree)](src/com/jwetherell/algorithms/data_structures/BinaryHeap.java)\n* [Binary Search Tree](src/com/jwetherell/algorithms/data_structures/BinarySearchTree.java)\n* [Compact Suffix Trie (backed by a Patricia Trie)](src/com/jwetherell/algorithms/data_structures/CompactSuffixTrie.java)\n* [Disjoint Set](src/com/jwetherell/algorithms/data_structures/DisjointSet.java)\n* [Fenwick Tree {Binary Indexed Tree (BIT)}](src/com/jwetherell/algorithms/data_structures/FenwickTree.java)\n* [Graph](src/com/jwetherell/algorithms/data_structures/Graph.java)\n  + Undirected\n  + Directed (Digraph)\n* [Hash Array Mapped Trie (HAMT)](src/com/jwetherell/algorithms/data_structures/HashArrayMappedTrie.java)\n* [Hash Map (associative array)](src/com/jwetherell/algorithms/data_structures/HashMap.java)\n* [Interval Tree](src/com/jwetherell/algorithms/data_structures/IntervalTree.java)\n* [Implicit Key Treap](src/com/jwetherell/algorithms/data_structures/ImplicitKeyTreap.java)\n* [KD Tree (k-dimensional tree or k-d tree)](src/com/jwetherell/algorithms/data_structures/KDTree.java)\n* [List [backed by an array or a linked list]](src/com/jwetherell/algorithms/data_structures/List.java)\n* [LCP Array (Longest Common Prefix) [backed by a Suffix Array]](src/com/jwetherell/algorithms/data_structures/LCPArray.java)\n* [Matrix](src/com/jwetherell/algorithms/data_structures/Matrix.java)\n* [Patricia Trie](src/com/jwetherell/algorithms/data_structures/PatriciaTrie.java)\n* [Quad-Tree (Point-Region or MX-CIF)](src/com/jwetherell/algorithms/data_structures/QuadTree.java)\n* [Queue [backed by an array or a linked list]](src/com/jwetherell/algorithms/data_structures/Queue.java)\n* [Radix Trie (associative array) [backed by a Patricia Trie]](src/com/jwetherell/algorithms/data_structures/RadixTrie.java)\n* [Red-Black Tree](src/com/jwetherell/algorithms/data_structures/RedBlackTree.java)\n* [Segment Tree](src/com/jwetherell/algorithms/data_structures/SegmentTree.java)\n* [Skip List](src/com/jwetherell/algorithms/data_structures/SkipList.java)\n* [Splay Tree](src/com/jwetherell/algorithms/data_structures/SplayTree.java)\n* [Stack [backed by an array or a linked list]](src/com/jwetherell/algorithms/data_structures/Stack.java)\n* [Suffix Array](src/com/jwetherell/algorithms/data_structures/SuffixArray.java)\n* [Suffix Tree (Ukkonen\'s algorithm)](src/com/jwetherell/algorithms/data_structures/SuffixTree.java)\n* [Suffix Trie [backed by a Trie]](src/com/jwetherell/algorithms/data_structures/SuffixTrie.java)\n* [Ternary Search Tree](src/com/jwetherell/algorithms/data_structures/TernarySearchTree.java)\n* [Treap](src/com/jwetherell/algorithms/data_structures/Treap.java)\n* [Tree](src/com/jwetherell/algorithms/data_structures/Tree.java)\n* [Tree Map (associative array) [backed by an AVL Tree]](src/com/jwetherell/algorithms/data_structures/TreeMap.java)\n* [Trie](src/com/jwetherell/algorithms/data_structures/Trie.java)\n* [Trie Map (associative array) [backed by a Trie]](src/com/jwetherell/algorithms/data_structures/TrieMap.java)\n\n## Mathematics\n* [Distance](src/com/jwetherell/algorithms/mathematics/Distance.java)\n  + chebyshev\n  + euclidean\n* [Division](src/com/jwetherell/algorithms/mathematics/Division.java)\n  + using a loop\n  + using recursion\n  + using shifts and multiplication\n  + using only shifts\n  + using logarithm\n* [Multiplication](src/com/jwetherell/algorithms/mathematics/Multiplication.java)\n  + using a loop\n  + using recursion\n  + using only shifts\n  + using logarithms\n  + [Fast Fourier Transform](src/com/jwetherell/algorithms/mathematics/FastFourierTransform.java)\n* [Exponentiation](src/com/jwetherell/algorithms/mathematics/Exponentiation.java)\n  + recursive exponentiation\n  + fast recursive exponentiation\n  + fast modular recursive exponentiation\n* [Primes](src/com/jwetherell/algorithms/mathematics/Primes.java)\n  + is prime\n  + prime factorization\n  + sieve of eratosthenes\n  + Miller-Rabin test\n  + [Co-Primes (relatively prime, mutually prime)](src/com/jwetherell/algorithms/mathematics/Coprimes.java)\n  + [Greatest Common Divisor](src/com/jwetherell/algorithms/mathematics/GreatestCommonDivisor.java)\n    - using Euclid\'s algorithm\n    - using recursion\n* [Permutations](src/com/jwetherell/algorithms/mathematics/Permutations.java)\n  + strings\n  + numbers\n* [Modular arithmetic](src/com/jwetherell/algorithms/mathematics/Modular.java)\n  + add\n  + subtract\n  + multiply\n  + divide\n  + power\n* [Knapsack](src/com/jwetherell/algorithms/mathematics/Knapsack.java) \n* [Ramer Douglas Peucker](src/com/jwetherell/algorithms/mathematics/RamerDouglasPeucker.java)   \n\n## Numbers\n* [Integers](src/com/jwetherell/algorithms/numbers/Integers.java) \n  + to binary String\n    - using divide and modulus\n    - using right shift and modulus\n    - using BigDecimal\n    - using divide and double\n  + is a power of 2\n    - using a loop\n    - using recursion\n    - using logarithm\n    - using bits\n  + to English (e.g. 1 would return "one")\n* [Longs](src/com/jwetherell/algorithms/numbers/Longs.java)\n  + to binary String\n    - using divide and modulus\n    - using right shift and modulus\n    - using BigDecimal\n* [Complex](src/com/jwetherell/algorithms/numbers/Complex.java)\n  + addition\n  + subtraction\n  + multiplication\n  + absolute value\n  + polar value\n \n## Graphs\n* Find shortest path(s) in a Graph from a starting Vertex\n  - [Dijkstra\'s algorithm (non-negative weight graphs)](src/com/jwetherell/algorithms/graph/Dijkstra.java)\n  - [Bellman-Ford algorithm (negative and positive weight graphs)](src/com/jwetherell/algorithms/graph/BellmanFord.java)\n* Find minimum spanning tree\n  - [Prim\'s (undirected graphs)](src/com/jwetherell/algorithms/graph/Prim.java)\n  - [Kruskal\'s (undirected graphs)](src/com/jwetherell/algorithms/graph/Kruskal.java)\n* Find all pairs shortest path\n  - [Johnsons\'s algorithm (negative and positive weight graphs)](src/com/jwetherell/algorithms/graph/Johnsons.java)\n  - [Floyd-Warshall (negative and positive weight graphs)](src/com/jwetherell/algorithms/graph/FloydWarshall.java)\n* [Cycle detection](src/com/jwetherell/algorithms/graph/CycleDetection.java)\n  - Depth first search while keeping track of visited Verticies\n  - [Connected Components](src/com/jwetherell/algorithms/graph/ConnectedComponents.java)\n* [Topological sort](src/com/jwetherell/algorithms/graph/TopologicalSort.java)\n* [A* path finding algorithm](src/com/jwetherell/algorithms/graph/AStar.java)\n* Maximum flow\n  - [Push-Relabel](src/com/jwetherell/algorithms/graph/PushRelabel.java)\n* Graph Traversal\n  - [Depth First Traversal](src/com/jwetherell/algorithms/graph/DepthFirstTraversal.java)\n  - [Breadth First Traversal](src/com/jwetherell/algorithms/graph/BreadthFirstTraversal.java)\n* [Edmonds Karp](src/com/jwetherell/algorithms/graph/EdmondsKarp.java)\n* Matching\n  - [Turbo Matching](src/com/jwetherell/algorithms/graph/TurboMatching.java)\n* [Lowest common ancestor in tree](src/com/jwetherell/algorithms/data_structures/Tree.java)\n\n\n## Search\n* Get index of value in array\n  + [Linear](src/com/jwetherell/algorithms/search/LinearSearch.java)\n  + [Quickselect](src/com/jwetherell/algorithms/search/QuickSelect.java)\n  + [Binary [sorted array input only]](src/com/jwetherell/algorithms/search/BinarySearch.java)\n  + [Lower bound [sorted array input only]](src/com/jwetherell/algorithms/search/LowerBound.java)\n  + [Upper bound [sorted array input only]](src/com/jwetherell/algorithms/search/UpperBound.java)\n  + Optimized binary (binary until a threashold then linear) [sorted array input only]\n  + [Interpolation [sorted array input only]](src/com/jwetherell/algorithms/search/InterpolationSearch.java)\n\n## Sequences\n* [Find longest common subsequence (dynamic programming)](src/com/jwetherell/algorithms/sequence/LongestCommonSubsequence.java)\n* [Find longest increasing subsequence (dynamic programming)](src/com/jwetherell/algorithms/sequence/LongestIncreasingSubsequence.java)\n* [Find number of times a subsequence occurs in a sequence (dynamic programming)](src/com/jwetherell/algorithms/sequence/SubsequenceCounter.java)\n* [Find i-th element in a Fibonacci sequence](src/com/jwetherell/algorithms/sequence/FibonacciSequence.java)\n  + using a loop\n  + using recursion\n  + using matrix multiplication\n  + using Binet\'s formula\n* [Find total of all elements in a sequence(Arithmetic Progression)](src/com/jwetherell/algorithms/sequence/ArithmeticProgression.java)\n  + using a loop\n  + using Triangular numbers\n* [Largest sum of contiguous subarray (Kadane\'s algorithm)](src/com/jwetherell/algorithms/sequence/LargestSumContiguousSubarray.java)\n* [Longest palin\xc2\xaddromic sub\xc2\xadse\xc2\xadquence (dynamic programming)](src/com/jwetherell/algorithms/sequence/LongestPalindromicSubsequence.java)\n\n## Sorts\n* [American Flag Sort](src/com/jwetherell/algorithms/sorts/AmericanFlagSort.java)\n* [Bubble Sort](src/com/jwetherell/algorithms/sorts/BubbleSort.java)\n* [Counting Sort (Integers only)](src/com/jwetherell/algorithms/sorts/CountingSort.java)\n* [Heap Sort](src/com/jwetherell/algorithms/sorts/HeapSort.java)\n* [Insertion Sort](src/com/jwetherell/algorithms/sorts/InsertionSort.java)\n* [Merge Sort](src/com/jwetherell/algorithms/sorts/MergeSort.java)\n* [Quick Sort](src/com/jwetherell/algorithms/sorts/QuickSort.java)\n* [Radix Sort (Integers only)](src/com/jwetherell/algorithms/sorts/RadixSort.java)\n* [Shell\'s Sort](src/com/jwetherell/algorithms/sorts/ShellSort.java)\n\n## String Functions\n### [String Functions](src/com/jwetherell/algorithms/strings/StringFunctions.java)\n* Reverse characters in a string\n  + using additional storage (a String or StringBuilder)\n  + using in-place swaps\n  + using in-place XOR\n* Reverse words in a string\n  + using char swaps and additional storage (a StringBuilder)\n  + using StringTokenizer and additional (a String)\n  + using split() method and additional storage (a StringBuilder and String[])\n  + using in-place swaps\n* Is Palindrome\n  + using additional storage (a StringBuilder)\n  + using in-place symetric element compares\n* Subsets of characters in a String\n* Edit (Levenshtein) Distance of two Strings (Recursive, Iterative)\n### [Manacher\'s algorithm (Find the longest Palindrome)](src/com/jwetherell/algorithms/strings/Manacher.java)\n### [KMP (Knuth\xe2\x80\x93Morris\xe2\x80\x93Pratt) Algorithm - Length of maximal prefix-suffix for each prefix](src/com/jwetherell/algorithms/strings/KnuthMorrisPratt.java)\n### [String rotations](src/com/jwetherell/algorithms/strings/Rotation.java)\n  + Find in lexicographically minimal string rotation\n  + Find in lexicographically maximal string rotation\n\n'