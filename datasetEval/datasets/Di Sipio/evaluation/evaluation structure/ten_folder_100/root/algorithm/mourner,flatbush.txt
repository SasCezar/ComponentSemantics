b'# Flatbush\n\nA really fast **static spatial index** for 2D points and rectangles in JavaScript.\n\nAn efficient implementation of the [packed Hilbert R-tree](https://en.wikipedia.org/wiki/Hilbert_R-tree#Packed_Hilbert_R-trees) algorithm. Enables fast spatial queries on a very large number of objects (e.g. millions), which is very useful in maps, data visualizations and computational geometry algorithms.\n\nSimilar to [RBush](https://github.com/mourner/rbush), with the following key differences:\n\n- **Static**: you can\'t add/remove items after initial indexing.\n- **Faster** indexing and search, with much lower **memory** footprint.\n- Index is stored as a single **array buffer** (so you can [transfer](https://developer.mozilla.org/en-US/docs/Web/API/Transferable) it between threads or store it as a compact binary file).\n\n[![Build Status](https://github.com/mourner/flatbush/workflows/Node%20CI/badge.svg)](https://github.com/mourner/flatbush/actions)\n[![minzipped size](https://badgen.net/bundlephobia/minzip/flatbush)](https://unpkg.com/flatbush)\n[![Simply Awesome](https://img.shields.io/badge/simply-awesome-brightgreen.svg)](https://github.com/mourner/projects)\n\n## Usage\n\n```js\n// initialize Flatbush for 1000 items\nconst index = new Flatbush(1000);\n\n// fill it with 1000 rectangles\nfor (const p of items) {\n    index.add(p.minX, p.minY, p.maxX, p.maxY);\n}\n\n// perform the indexing\nindex.finish();\n\n// make a bounding box query\nconst found = index.search(minX, minY, maxX, maxY).map((i) => items[i]);\n\n// make a k-nearest-neighbors query\nconst neighborIds = index.neighbors(x, y, 5);\n\n// instantly transfer the index from a worker to the main thread\npostMessage(index.data, [index.data]);\n\n// reconstruct the index from a raw array buffer\nconst index = Flatbush.from(e.data);\n\n```\n\n## Install\n\nInstall using NPM (`npm install flatbush`) or Yarn (`yarn add flatbush`), then:\n\n```js\n// import as an ES module\nimport Flatbush from \'flatbush\';\n\n// or require in Node / Browserify\nconst Flatbush = require(\'flatbush\');\n```\n\nOr use a browser build directly:\n\n```html\n<script src="https://unpkg.com/flatbush@3.1.0/flatbush.min.js"></script>\n```\n\n## API\n\n#### new Flatbush(numItems[, nodeSize, ArrayType])\n\nCreates a Flatbush index that will hold a given number of items (`numItems`). Additionally accepts:\n\n- `nodeSize`: size of the tree node (`16` by default); experiment with different values for best performance.\n- `ArrayType`: the array type used for coordinates storage (`Float64Array` by default);\nother types may be faster in certain cases (e.g. `Int32Array` when your data is integer).\n\n#### index.add(minX, minY, maxX, maxY)\n\nAdds a given rectangle to the index.\n\n#### index.finish()\n\nPerforms indexing of the added rectangles.\nTheir number must match the one provided when creating a `Flatbush` object.\n\n#### index.search(minX, minY, maxX, maxY[, filterFn])\n\nReturns an array of indices of items in a given bounding box.\n\n```js\nconst ids = index.search(10, 10, 20, 20);\n```\n\nIf given a `filterFn`, calls it on every found item (passing an item index)\nand only includes it if the function returned a truthy value.\n\n```js\nconst ids = index.search(10, 10, 20, 20, (i) => items[i].foo === \'bar\');\n```\n\n#### index.neighbors(x, y[, maxResults, maxDistance, filterFn])\n\nReturns an array of item indices in order of distance from the given `x, y`\n(known as K nearest neighbors, or KNN).\n\n```js\nconst ids = index.neighbors(10, 10, 5); // returns 5 ids\n```\n\n`maxResults` and `maxDistance` are `Infinity` by default.\nAlso accepts a `filterFn` similar to `index.search`.\n\n#### Flatbush.from(data)\n\nRecreates a Flatbush index from raw `ArrayBuffer` data\n(that\'s exposed as `index.data` on a previously indexed Flatbush instance).\nVery useful for transferring indices between threads or storing them in a file.\n\n#### Properties\n\n- `data`: array buffer that holds the index.\n- `minX`, `minY`, `maxX`, `maxY`: bounding box of the data.\n- `numItems`: number of stored items.\n- `nodeSize`: number of items in a node tree.\n- `ArrayType`: array type used for internal coordinates storage.\n- `IndexArrayType`: array type used for internal item indices storage.\n\n## Performance\n\nRunning `npm run bench` with Node v10.11.0:\n\nbench | flatbush | rbush\n--- | --- | ---\nindex 1,000,000 rectangles | 263ms | 1208ms\n1000 searches 10% | 594ms | 1105ms\n1000 searches 1% | 68ms | 213ms\n1000 searches 0.01% | 9ms | 27ms\n1000 searches of 100 neighbors | 29ms | 58ms\n1 search of 1,000,000 neighbors | 148ms | 781ms\n100,000 searches of 1 neighbor | 870ms | 1548ms\n'