b'# Dijkstra Cartography\n\n\n- All roads lead to my home (at least in Paris) [[HD 14016x9599 / 7.3MB](./results/HD/paris.png)]\n ![./results/SD/paris.png](./results/SD/paris.png)\n- The Amazon river / Rio Amazonas with all its tributaries [[HD 11962x7625 / 3MB](./results/HD/amazon.png)]\n![./results/SD/amazon.png](./results/SD/amazon.png)\n- Eastern European Railway (from Paris) [[HD 29255x9624 / 10.8MB](./results/HD/railway.png)]\n![./results/SD/railway.png](./results/SD/railway.png)\n- World Flights (from Paris) [[HD 17900x6600 / 17.72MB](./results/HD/flights.png)]\n![./results/SD/flights.png](./results/SD/flights.png)\n\n## Introduction\n\nI was fascinated by the project ["Roads to Rome"](http://roadstorome.moovellab.com/) by Moovellab but sad that it isn\'t opensource. Helped by [this project](https://github.com/Tristramg/roads-from-nd) (thanks @tristramg ) I started to build my own map.\n\nI did not have any GIS background but it was very interesting to discover what we can do with. The code isn\'t very good (I\'m not a *C++ guru*).\n\nThe project is named "*Dijkstra Cartography*" but sometimes [BFS algorithm](https://en.wikipedia.org/wiki/Breadth-first_search) is better (if all the edges have the same weight).\n\nThis code can be useful for cartographer, as I found a lot of errors for the river Amazon ([see here](./results/errors.png)) or.. to have your own poster \xf0\x9f\x98\x89.\n\n## Extract\n\nYou may not want to use the [planet.osm](http://wiki.openstreetmap.org/wiki/Planet.osm) file (644GB - all the openstreetmap data in one file).\nChoose the right file [here](https://download.geofabrik.de) and extract what you really need with openstreetmap\'s tools : osmconvert, osmfilter, osmosis, osmium...\n\nOne interesting way is that you can extract all the data within a polygon with osmconvert, and [here are some cities polygons](https://github.com/JamesChevalier/cities).\n\n## Routing\n\n| Map        | Routing system used                                      |\n| -----------|----------------------------------------------------------|\n| Paris      | [Graphhopper](https://github.com/graphhopper/graphhopper) - "Dijkstrabi" |\n| Amazon     | Dijkstra\'s algorithm                                     |\n| Railway    | [OSRM](https://github.com/Project-OSRM/osrm-backend)     |\n| Flights    | Dijkstra\'s algorithm  \n\nThe first thing to do is to gather the statistics of usage of all paths :\nfor each location, execute the routing algorithm you chose to your root location (your home for example).\nMerge all and sort the data by the most used path.\n\n\n\n## Projections\n\n| Map        | Projection                                    |\n| -----------|-----------------------------------------------|\n| Paris      | Lambert 93-I EPSG:27571                       |\n| Amazon     | ESRI:102032 (South America Equidistant Conic) |\n| Railway    | Mercator                                      |\n| Flights    | WSG84                                         |\n\nYou can follow [this guide](http://www.georeference.org/doc/guide_to_selecting_map_projections.htm), search [SpatialReference](http://spatialreference.org/ref/) or [ESPG.io](http://epsg.io/).\n\n\n## Drawing\nConsidering the data is sorted and well projected.\n\nThe width and height of the image are defined like this :\n\n```\nwidth = (maxX-minX)/scale;\nheight = (maxY-minY)/scale;\n```\n\nTo draw these paths, I used this function (plotted using R) :\n![./results/function.jpg](./results/function.jpg)\n\nas it gives me a percent (between [0;1] here) of how the line width must be  important. Also I can accentuate the decreasing by modifying parameters inside *exp()*.\n\nI used cairo and I was really suprised that I can understand these map without using any shapefile.\n\n\n\n## Details for each map\n\n- [Paris](./paris/)\n- [Amazon](./amazon/)\n- [Railway](./railway/)\n- [Flights](./flights/)\n\n## Bonus\n\n![./results/paris.gif](./results/paris.gif)\n\n## License\n\n[See here](./license.md).\n'