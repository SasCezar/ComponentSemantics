b'# supercluster [![Simply Awesome](https://img.shields.io/badge/simply-awesome-brightgreen.svg)](https://github.com/mourner/projects) [![Build Status](https://travis-ci.org/mapbox/supercluster.svg?branch=master)](https://travis-ci.org/mapbox/supercluster)\n\nA very fast JavaScript library for geospatial point clustering for browsers and Node.\n\n```html\n<script src="https://unpkg.com/supercluster@6.0.2/dist/supercluster.min.js"></script>\n```\n\n```js\nconst index = new Supercluster({\n    radius: 40,\n    maxZoom: 16\n});\nindex.load(points);\nindex.getClusters([-180, -85, 180, 85], 2);\n```\n\nClustering 6 million points in Leaflet:\n\n![clusters2](https://cloud.githubusercontent.com/assets/25395/11857351/43407b46-a40c-11e5-8662-e99ab1cd2cb7.gif)\n\n## Install\n\nInstall using NPM (`npm install supercluster`) or Yarn (`yarn add supercluster`), then:\n\n```js\n// import as a ES module\nimport Supercluster from \'supercluster\';\n\n// or require in Node / Browserify\nconst Supercluster = require(\'supercluster\');\n```\n\nOr use a browser build directly:\n\n```html\n<script src="https://unpkg.com/supercluster@6.0.2/dist/supercluster.min.js"></script>\n```\n\n## Methods\n\n#### `load(points)`\n\nLoads an array of [GeoJSON Feature](https://tools.ietf.org/html/rfc7946#section-3.2) objects. Each feature\'s `geometry` must be a [GeoJSON Point](https://tools.ietf.org/html/rfc7946#section-3.1.2). Once loaded, index is immutable.\n\n#### `getClusters(bbox, zoom)`\n\nFor the given `bbox` array (`[westLng, southLat, eastLng, northLat]`) and integer `zoom`, returns an array of clusters and points as [GeoJSON Feature](https://tools.ietf.org/html/rfc7946#section-3.2) objects.\n\n#### `getTile(z, x, y)`\n\nFor a given zoom and x/y coordinates, returns a [geojson-vt](https://github.com/mapbox/geojson-vt)-compatible JSON tile object with cluster/point features.\n\n#### `getChildren(clusterId)`\n\nReturns the children of a cluster (on the next zoom level) given its id (`cluster_id` value from feature properties).\n\n#### `getLeaves(clusterId, limit = 10, offset = 0)`\n\nReturns all the points of a cluster (given its `cluster_id`), with pagination support:\n`limit` is the number of points to return (set to `Infinity` for all points),\nand `offset` is the amount of points to skip (for pagination).\n\n#### `getClusterExpansionZoom(clusterId)`\n\nReturns the zoom on which the cluster expands into several children (useful for "click to zoom" feature) given the cluster\'s `cluster_id`.\n\n## Options\n\n| Option     | Default | Description                                                       |\n|------------|---------|-------------------------------------------------------------------|\n| minZoom    | 0       | Minimum zoom level at which clusters are generated.               |\n| maxZoom    | 16      | Maximum zoom level at which clusters are generated.               |\n| radius     | 40      | Cluster radius, in pixels.                                        |\n| extent     | 512     | (Tiles) Tile extent. Radius is calculated relative to this value. |\n| nodeSize   | 64      | Size of the KD-tree leaf node. Affects performance.               |\n| log        | false   | Whether timing info should be logged.                             |\n| generateId | false   | Whether to generate ids for input features in vector tiles.       |\n\n### Property map/reduce options\n\nIn addition to the options above, supercluster supports property aggregation with the following three options:\n\n- `map`: a function that returns cluster properties corresponding to a single point.\n- `reduce`: a reduce function that merges properties of two clusters into one.\n\nExample of setting up a `sum` cluster property that accumulates the sum of `myValue` property values:\n\n```js\nconst index = new Supercluster({\n    map: (props) => ({sum: props.myValue}),\n    reduce: (accumulated, props) => { accumulated.sum += props.sum; }\n});\n```\n\nNote that `reduce` must not mutate the second argument (`props`).\n\n## Developing Supercluster\n\n```\nnpm install       # install dependencies\nnpm run build     # generate dist/supercluster.js and dist/supercluster.min.js\nnpm test          # run tests\n```\n'