b'Arcus Cache Cloud\n=================\n\nArcus is a [memcached][memcached]-based cache cloud developed by [NAVER Corp][naver].\n[arcus-memcached](https://github.com/naver/arcus-memcached) has been heavily modified\nto support functional and performance requirements of NAVER services.\nArcus supports collection data structures (List, Set, B+tree)\nfor storing/retrieving multiple values as a structured form\nin addition to the basic Key-Value data model of memcached.\n\nArcus manages multiple clusters of memcached nodes using [ZooKeeper][zookeeper].\nEach cluster or cloud is identified by its service code.  Think of the service code as the cloud\'s name.\nThe user may add/remove memcached nodes/clouds on the fly.  And, Arcus detects failed nodes and automatically removes them.\n\nThe overall architecture is shown below. \nThe memcached node is identified by its name (IP address:port number).\nZooKeeper maintains a database of memcached node names and the service code (cloud) that they belong to.\nZooKeeper also maintains a list of alive nodes in each cloud (cache list).\n\nUpon startup, each memcached node contacts ZooKeeper and finds the service code that it belongs to.\nThen the node inserts its name on the cache list so Arcus client can see it.\nZooKeeper periodically checks if the cache node is alive, remove failed nodes from the cache cloud, and notifies the updated cache list to cache clients.\nWith the latest cache list,\nArcus clients do [consistent hashing][consistent hashing] to find the cache node \nfor each key-value operation.\nHubble collects and shows the statistics of the cache cloud.\n\n![Arcus Architecture](https://raw.githubusercontent.com/naver/arcus/master/docs/images/arcus-architecture.png)\n\n[naver]: http://www.naver.com "Naver"\n[zookeeper]: http://zookeeper.apache.org "ZooKeeper"\n[memcached]: http://www.memcached.org "Memcached"\n[consistent hashing]: http://en.wikipedia.org/wiki/Consistent_hashing "Consistent Hashing"\n\n## Supported OS Platform\n\nCurrently, Arcus only supports 64-bit Linux.\nIt has been tested on the following OS platforms.\n\n* CentOS 6.x 64bit\n* Ubuntu 12.04 LTS 64bit\n\nIf you are interested in supporting other OS platforms, please try building/running Arcus on them.\nAnd let us know of any issues.\n\n## Quick Start\n\nArcus setup usually follows three steps below.\n\n> 1. Preparation - clone and build this Arcus code, and deploy Arcus code/binary package.\n> 2. Zookeeper setup - initialize Zookeeper ensemble for Arcus and start Zookeeper processes.\n> 3. Memcached setup - register cache cloud information into Zookeeper and start cache nodes.\n\nTo quickly set up and test an Arcus cloud on the local machine, run the commands below.\nThey build memcached, set up a cloud of two memcached nodes in ZooKeeper, and start them, all on the local machine.\nThe commands assume RedHat/CentOS environment.\n\n```\n# Requirements: JDK & Ant\n\n# Install dependencies\nsudo yum install gcc gcc-c++ autoconf automake libtool pkgconfig cppunit-devel python-setuptools python-devel (CentOS)\nsudo apt-get install build-essential autoconf automake libtool libcppunit-dev python-setuptools python-dev (Ubuntu)\n\n\n# Clone & Build\ngit clone https://github.com/naver/arcus.git\ncd arcus/scripts\n./build.sh\n\n# Setup a local cache cloud with conf file. (Should be non-root user)\n./arcus.sh quicksetup conf/local.sample.json\n\n# Test\necho "stats" | nc localhost 11211 | grep version\nSTAT version 1.7.0\necho "stats" | nc localhost 11212 | grep version\nSTAT version 1.7.0\n```\n\nTo set up Arcus cache clouds on multiple machines, you need following two things.\n\n* [Arcus cloud configuration file](docs/arcus-cloud-configuration-file.md): Arcus cache cloud settings in JSON format\n* [Arcus cloud admin script (arcus.sh)](docs/arcus-admin-script-usage.md): A tool to control Arcus cache cloud.\n\nPlease see [Arcus cache cloud setup in multiple servers](docs/arcus-cloud-in-multiple-servers.md) for more details.\n\nOnce you finish setting up an Arcus cache cloud on multiple machines, you can quickly test Arcus on the command line,\nusing telnet and ASCII commands.\nSee [Arcus telnet interface](https://github.com/naver/arcus-memcached/blob/master/doc/arcus-telnet-interface.md).\nDetails on Arcus ASCII commands are in [Arcus ASCII protocol document](https://github.com/naver/arcus-memcached/blob/master/doc/arcus-ascii-protocol.md).\n\nTo develop Arcus application programs, please take a look at Arcus clients.\nArcus currently supports Java and C/C++ clients.  Each module includes a short tutorial\nwhere you can build and test "hello world" programs.\n- [Arcus Java client](https://github.com/naver/arcus-java-client)\n- [Arcus C/C++ client](https://github.com/naver/arcus-c-client)\n\n\n## Documents\n\n- [How To Install Dependencies](docs/howto-install-dependencies.md) for beginners\n- [Arcus Directory Structure](docs/arcus-directory-structure.md) after building\n- [Arcus Cloud Configuration File](docs/arcus-cloud-configuration-file.md)\n- [Arcus Admin Script Usage](docs/arcus-admin-script-usage.md)\n- [Arcus Cache Cloud Setup in Multiple Servers](docs/arcus-cloud-in-multiple-servers.md) \n\n'