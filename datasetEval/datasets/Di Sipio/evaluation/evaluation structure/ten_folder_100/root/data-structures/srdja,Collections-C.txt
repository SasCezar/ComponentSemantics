b'Collections-C\n=============\n\n> A library of generic data structures including a list, array, hashtable, deque etc..\n\n[![Codeship Status for srdja/Collections-C](https://app.codeship.com/projects/493e5560-6064-0137-ef52-72c4cd7e8b98/status?branch=master)](https://app.codeship.com/projects/344074)\n[![License: LGPL v3](https://img.shields.io/badge/License-LGPL%20v3-blue.svg)](http://www.gnu.org/licenses/lgpl-3.0)\n\n- [Examples](#examples)\n- [Building and Installing](#building-and-installation)\n- [Using the library](#using-collections-c-in-your-programs)\n- [Contributing](#contributing)\n\n## Examples\nCheck the [documentation page](https://srdja.github.io/Collections-C/) for mode detailed examples. (This is still in progress).\nThe source of the documentation can be found [here](https://github.com/srdja/cc-doc-slate).\n\n#### HashTable\n```c\n\n// Crate a new table\nHashTable *table;\nif (hashtable_new(&table) != CC_OK) {\n    // something went wrong\n    ...\n}\n// Add key-value pair\nif (hashtable_add(table, "some_key", "some_value") != CC_OK) {\n    // something went wrong\n    ...\n}\n// Retrieve a value associated with a key\nchar *value;\nif (hashtable_get(table, "some_key", (void*) &value) == CC_OK)\n    printf("%s", value);\n\n// Remove a key\nhashtable_remove(table, "foo", NULL);\nhashtable_destroy(table);\n```\n#### Array (dynamic array)\n```c\n// Create a new array\nArray *ar;\nif (array_new(&ar) != CC_OK) {\n    // something went wrong\n    ...\n}\n// Add an element\nenum cc_stat status = array_add(ar, "foo");\nif (status == CC_OK) {\n    ...\n} else if (status == CC_ERR_ALLOC) {\n    ...\n} else {\n    ...\n}\n// Retrieve a value\nchar *foo;\narray_get_at(ar, 0, (void*) &foo);\n\n// Remove a value\nchar *removed;\narray_remove_at(ar, 0, (void*) &removed);\n\narray_destroy(ar);\n```\n## Building and Installation\n\n### Dependencies\n\n- C compiler (gcc, clang, etc...)\n- cmake (>= 3.5)\n- [testing only] cpputest (>=3.8)\n- pkg-config\n\nThese packages can usually be installed through your distributions package manager.\n\nBuilding on windows requires [MinGW](http://mingw.org) which provides all the tools needed to build the project.\n\n### Building the project\n\nTo build the project, we first need to create a separate build directory:\n\n```\nmkdir build\n```\n\nNow that we\'ve created our build directory (assuming it\'s created in the projct root), we can `cd` into it and run `cmake` and pass the parent directory path to it, which is where the `CMakeLists.txt` file is located:\n\n```\ncd build\ncmake ..\n```\n\nOnce `cmake` is done generating makefiles, we can build the library by running `make` inside our build directory:\n\n```\nmake\n```\nThis will build both the static and the dynamic library.\n\n### Running tests\n\n```\nmake test\n```\n\nRunning individual tests\n```\nmake build\nbuild/test/array_test -c -v\n```\n### Installing\n\nTo install the library run:\n```\nsudo make install\n```\nBy default the libraries and headers will be installed in `/usr/local/lib/` and `/usr/local/include` directories.\n\n## Using Collections-C in your programs\n\n### A simple program\nIf we already built and installed the library, we can write a simple hello world program and save it to a file named `hello.c`:\n\n```c\n#include <stdio.h>\n#include <collectc/array.h>\n\nint main(int argc, char **argv) {\n    // Create a new array\n    Array *ar;\n    array_new(&ar);\n\n    // Add a string to the array\n    array_add(ar, "Hello World!\\n");\n\n    // Retreive the string and print it\n    char *str;\n    array_get_at(ar, 0, (void*) &str);\n    printf("%s", str);\n\n    return 0;\n}\n```\n\nNow we need to compile and link our program. Since `make` builds both the static and the dynamic library we can choose which one we wish to link into our program.\n\n### Linking statically\n\nIf we wish to statically link the library to our program we can pass the `-static` flag to the compiler\n\n```\ngcc hello.c -static -lcollectc -o hello\n```\n\n\nor similarly when compiling with clang:\n```\nclang hello.c -static -lcollectc -o hello\n```\n\nThis will link the library by copying it into the executable. We can use this option if we **don\'t** wish to have Collections-C as a **runtime dependency**, however this comes at the expense of generating a larger executable.\n\n### Linking dynamically\n\nWe can also choose to link with the library dynamically at runtime. This is the default behaviour if ommit the `-static` compiler flag:\n\n```\ngcc hello.c -lcollectc -o hello\n```\n\nor with clang:\n\n```\nclang hello.c -lcollectc -o hello\n```\n\nLinking dynamically produces a smaller executable, but requires `libcollectc.so` to be present on every system on which the program is going to be executed.\n\n### Linking problems\n\nSometimes the compiler may have trouble finding the library or the headers. This is usually because it\'s looking for them in the wrong directory, which may happen if the library or the headers or both are installed in a non-standard directory or not installed at all.\n\nIf this is the case, we can explicitly tell the compiler where to look for them by passing the `-I[path to headers]` and `-L[path to libraries]` options:\n\n```\ngcc hello.c `pkg-config --cflags --libs collectionc` -o hello\n```\n\n### Running the program\n\nIf everything went well with the compilation we can run the executable:\n\n```\n./hello\n```\n\nand it should print `Hello, World!` to the console.\n\n## Contributing\n\nContributions are welcome.\n\nIf you have a feature request, or have found a bug, feel free to open a [new issue](https://github.com/srdja/Collections-C/issues/new). If you wish to contribute code, see [CONTRIBUTING.md](https://github.com/srdja/Collections-C/blob/master/CONTRIBUTING.md) for more details.\n'