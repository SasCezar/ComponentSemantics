b'<!--\n  README.md\n\n  Copyright (C) 2006-2017 Anupam Sengupta (anupamsg@gmail.com)\n\n-->\n# **RubyTree** #\n\n[![Gem Version](https://badge.fury.io/rb/rubytree.png)](http://badge.fury.io/rb/rubytree)\n[![Travis Build Status](https://secure.travis-ci.org/evolve75/RubyTree.png)](http://travis-ci.org/evolve75/rubytree)\n[![Dependency Status](https://gemnasium.com/evolve75/RubyTree.png)](https://gemnasium.com/evolve75/RubyTree)\n[![Code Climate](https://codeclimate.com/github/evolve75/RubyTree.png)](https://codeclimate.com/github/evolve75/RubyTree)\n[![Coverage Status](https://coveralls.io/repos/evolve75/RubyTree/badge.png)](https://coveralls.io/r/evolve75/RubyTree)\n\n## DESCRIPTION: ##\n\n**RubyTree** is a pure Ruby implementation of the generic\n[tree data structure][tree_data_structure]. It provides a node-based model to\nstore named nodes in the tree, and provides simple APIs to access, modify and\ntraverse the structure.\n\nThe implementation is *node-centric*, where individual nodes in the tree are the\nprimary structural elements. All common tree-traversal methods ([pre-order][],\n[post-order][], and [breadth-first][]) are supported.\n\nThe library mixes in the [Enumerable][] and [Comparable][] modules to allow\naccess to the tree as a standard collection (iteration, comparison, etc.).\n\nA [Binary tree][] is also provided, which provides the [in-order][] traversal in\naddition to the other methods.\n\n**RubyTree** supports importing from, and exporting to [JSON][], and also\nsupports the Ruby\'s standard object [marshaling][].\n\nThis is a [BSD licensed][BSD] open source project, and is hosted at\n[github.com/evolve75/RubyTree][rt@github], and is available as a standard gem\nfrom [rubygems.org/gems/rubytree][rt_gem].\n\nThe home page for **RubyTree** is at [rubytree.anupamsg.me][rt_site].\n\n## WHAT\'S NEW: ##\n\nSee [History](./History.rdoc) for the detailed Changelog.\n\nSee [API-CHANGES](./API-CHANGES.rdoc) for the detailed description of\nAPI level changes.\n\n## GETTING STARTED: ##\n\nThis is a basic usage example of the library to create and manipulate a tree.\nSee the [API][rt_doc] documentation for more details.\n\n```ruby\n#!/usr/bin/env ruby\n#\n# example_basic.rb:: Basic usage of the tree library.\n#\n# Author:  Anupam Sengupta\n# Time-stamp: <2013-12-28 12:14:20 anupam>\n# Copyright (C) 2013 Anupam Sengupta <anupamsg@gmail.com>\n#\n# The following example implements this tree structure:\n#\n#                    +------------+\n#                    |    ROOT    |\n#                    +-----+------+\n#            +-------------+------------+\n#            |                          |\n#    +-------+-------+          +-------+-------+\n#    |  CHILD 1      |          |  CHILD 2      |\n#    +-------+-------+          +---------------+\n#            |\n#            |\n#    +-------+-------+\n#    | GRANDCHILD 1  |\n#    +---------------+\n\n# ..... Example starts.\nrequire \'tree\'                 # Load the library\n\n# ..... Create the root node first.\n# ..... Note that every node has a name and an optional content payload.\nroot_node = Tree::TreeNode.new("ROOT", "Root Content")\nroot_node.print_tree\n\n# ..... Now insert the child nodes.\n#       Note that you can "chain" the child insertions to any depth.\nroot_node << Tree::TreeNode.new("CHILD1", "Child1 Content") << Tree::TreeNode.new("GRANDCHILD1", "GrandChild1 Content")\nroot_node << Tree::TreeNode.new("CHILD2", "Child2 Content")\n\n# ..... Lets print the representation to stdout.\n# ..... This is primarily used for debugging purposes.\nroot_node.print_tree\n\n# ..... Lets directly access children and grandchildren of the root.\n# ..... The can be "chained" for a given path to any depth.\nchild1       = root_node["CHILD1"]\ngrand_child1 = root_node["CHILD1"]["GRANDCHILD1"]\n\n# ..... Now retrieve siblings of the current node as an array.\nsiblings_of_child1 = child1.siblings\n\n# ..... Retrieve immediate children of the root node as an array.\nchildren_of_root = root_node.children\n\n# ..... Retrieve the parent of a node.\nparent = child1.parent\n\n# ..... This is a depth-first and L-to-R pre-ordered traversal.\nroot_node.each { |node| node.content.reverse }\n\n# ..... Remove a child node from the root node.\nroot_node.remove!(child1)\n\n# .... Many more methods are available. Check out the documentation!\n```\n\nThis example can also be found at\n[examples/example_basic.rb](examples/example_basic.rb).\n\n## REQUIREMENTS: ##\n\n* [Ruby][] 2.2.x, 2.3.x or 2.4.x\n\n\n* Run-time Dependencies:\n    * [structured_warnings][]\n    * [JSON][] for converting to/from the JSON format\n\n\n* Development dependencies (not required for installing the gem):\n    * [Bundler][] for creating the stable build environment\n    * [Rake][] for building the package\n    * [Yard][] for the documentation\n    * [RSpec][] for additional Ruby Spec test files\n\n## INSTALL: ##\n\nTo install the [gem][rt_gem], run this command from a terminal/shell:\n\n    $ gem install rubytree\n\nThis should install the gem file for **RubyTree**. Note that you might need to\nhave super-user privileges (root/sudo) to successfully install the gem.\n\n## DOCUMENTATION: ##\n\nThe primary class **RubyTree** is {Tree::TreeNode}. See the class\ndocumentation for an example of using the library.\n\nIf the *ri* documentation was generated during install, you can use this\ncommand at the terminal to view the text mode ri documentation:\n\n    $ ri Tree::TreeNode\n\nDocumentation for the latest released version is available at:\n\n[rubytree.anupamsg.me/rdoc][rt_doc]\n\nDocumentation for the latest git HEAD is available at:\n\n[rdoc.info/projects/evolve75/RubyTree][rt_doc@head]\n\nNote that the documentation is formatted using [Yard][].\n\n## DEVELOPERS: ##\n\nThis section is only for modifying **RubyTree** itself. It is not required for\nusing the library!\n\nYou can download the latest released source code as a tar or zip file, as\nmentioned above in the installation section.\n\nAlternatively, you can checkout the latest commit/revision from the Version\nControl System. Note that **RubyTree**\'s primary [SCM][] is [git][] and is\nhosted on [github.com][rt@github].\n\n### Using the git Repository ###\n\nThe git repository is available at [github.com/evolve75/RubyTree][rt@github].\n\nFor cloning the git repository, use one of the following commands:\n\n    $ git clone git://github.com/evolve75/RubyTree.git\n\nor\n\n    $ git clone http://github.com/evolve75/RubyTree.git\n\n### Setting up the Development Environment ###\n\n**RubyTree** uses [Bundler][] to manage its dependencies. This allows for a\nsimplified dependency management, for both run-time as well as during build.\n\nAfter checking out the source, run:\n\n    $ gem install bundler\n    $ bundle install\n    $ rake test\n    $ rake doc:yard\n    $ rake gem:package\n\nThese steps will install any missing dependencies, run the tests/specs,\ngenerate the documentation, and finally generate the gem file.\n\nNote that the documentation uses [Yard][], which will be\ndownloaded and installed automatically by [Bundler][].\n\n## ACKNOWLEDGMENTS: ##\n\nA big thanks to the following contributors for helping improve **RubyTree**:\n\n1. [Dirk Breuer](http://github.com/railsbros-dirk) for contributing the JSON\n   conversion code.\n2. Vincenzo Farruggia for contributing the (sub)tree cloning code.\n3. [Eric Cline](https://github.com/escline) for the Rails JSON encoding fix.\n4. [Darren Oakley](https://github.com/dazoakley) for the tree merge methods.\n5. [Youssef Rebahi-Gilbert](https://github.com/ysf) for the code to check\n   duplicate node names in the tree (globally unique names).\n6. [Paul de Courcel](https://github.com/pdecourcel) for adding the\n   `postordered_each` method.\n7. [Jen Hamon](http://www.github.com/jhamon) for adding the `from_hash` method.\n8. [Evan Sharp](https://github.com/packetmonkey) for adding the `rename` and\n   `rename_child` methods.\n9. [Aidan Steele](https://github.com/aidansteele) for performance improvements\n   to `is_root?` and `node_depth`.\n10. [Marco Ziccadi](https://github.com/MZic) for adding the `path_as_string` and\n    `path_as_array` methods.\n\n## LICENSE: ##\n\n**RubyTree** is licensed under the terms of the [BSD][] license. See\n[LICENSE.md](./LICENSE.md) for details.\n\n{include:file:LICENSE.md}\n\n        __       _           _\n       /__\\_   _| |__  _   _| |_ _ __ ___  ___\n      / \\// | | | \'_ \\| | | | __| \'__/ _ \\/ _ \\\n     / _  \\ |_| | |_) | |_| | |_| | |  __/  __/\n     \\/ \\_/\\__,_|_.__/ \\__, |\\__|_|  \\___|\\___|\n                      |___/\n\n[BSD]:                  http://opensource.org/licenses/bsd-license.php "BSD License"\n[Binary tree]:          http://en.wikipedia.org/wiki/Binary_tree "Binary Tree Data Structure"\n[Bundler]:              http://bundler.io "Bundler"\n[Comparable]:           http://ruby-doc.org/core-2.4.2/Comparable.html "Comparable mix-in"\n[Enumerable]:           http://ruby-doc.org/core-2.4.2/Enumerable.html "Enumerable mix-in"\n[JSON]:                 http://flori.github.com/json "JSON"\n[Rake]:                 https://rubygems.org/gems/rake "Rake"\n[Ruby]:                 http://www.ruby-lang.org "Ruby Programming Language"\n[SCM]:                  http://en.wikipedia.org/wiki/Source_Code_Management "Source Code Management"\n[Yard]:                 http://yardoc.org "Yard Document Generator"\n[breadth-first]:        http://en.wikipedia.org/wiki/Breadth-first_search "Breadth-first (level-first) Traversal"\n[git]:                  http://git-scm.com "Git SCM"\n[in-order]:             http://en.wikipedia.org/wiki/Tree_traversal#In-order "In-order (symmetric) Traversal"\n[marshaling]:           http://ruby-doc.org/core-2.4.2/Marshal.html "Marshaling in Ruby"\n[post-order]:           http://en.wikipedia.org/wiki/Tree_traversal#Post-order "Post-ordered Traversal"\n[pre-order]:            http://en.wikipedia.org/wiki/Tree_traversal#Pre-order "Pre-ordered Traversal"\n[rt@github]:            http://github.com/evolve75/RubyTree "RubyTree Project Page on Github"\n[rt_doc@head]:          http://rdoc.info/projects/evolve75/RubyTree "RubyTree Documentation for VCS Head"\n[rt_doc]:               http://rubytree.anupamsg.me/rdoc "RubyTree Documentation"\n[rt_gem]:               http://rubygems.org/gems/rubytree "RubyTree Gem"\n[rt_site]:              http://rubytree.anupamsg.me "RubyTree Site"\n[structured_warnings]:  http://github.com/schmidt/structured_warnings "structured_warnings"\n[tree_data_structure]:  http://en.wikipedia.org/wiki/Tree_data_structure "Tree Data Structure"\n[RSpec]:                https://relishapp.com/rspec/\n\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/evolve75/rubytree/trend.png)](https://bitdeli.com/free "Bitdeli Badge")\n'