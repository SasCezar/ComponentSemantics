b'[<img src="/.translations/flags/gb.png">](/README.md) [<img src="/.translations/flags/fr.png">](/.translations/fr/README.md)\n\n# Write a hash table in C\n\n[Hash tables](https://en.wikipedia.org/wiki/Hash_table) are one of the most useful data structures. Their quick and scalable\ninsert, search and delete make them relevant to a large number of computer\nscience problems.\n\nIn this tutorial, we implement an [open-addressed](https://en.wikipedia.org/wiki/Open_addressing), [double-hashed](https://en.wikipedia.org/wiki/Double_hashing) hash table in\nC. By working through this tutorial, you will gain:\n\n- Understanding of how a fundamental data structure works under the hood\n- Deeper knowledge of when to use hash tables, when not to use them, and how\n  they can fail\n- Exposure to new C code\n\nC is a great language to write a hash table in because:\n\n- The language doesn\'t come with one included\n- It is a low-level language, so you get deeper exposure to how things work at a\n  machine level\n\nThis tutorial assumes some familiarity with programming and C syntax. The code\nitself is relatively straightforward, and most issues should be solvable with a\nweb search. If you run into further problems, please open a GitHub\n[Issue](https://github.com/jamesroutley/write-a-hash-table/issues).\n\nThe full implementation is around 200 lines of code, and should take around an\nhour or two to work through.\n\n## Contents\n\n1. [Introduction](/01-introduction)\n2. [Hash table structure](/02-hash-table)\n3. [Hash functions](/03-hashing)\n4. [Handling collisions](/04-collisions)\n5. [Hash table methods](/05-methods)\n6. [Resizing tables](/06-resizing)\n6. [Appendix: alternative collision handling](/07-appendix)\n\n## Credits\n\nThis tutorial was written by [James Routley](https://twitter.com/james_routley),\nwho blogs at [routley.io](https://routley.io).\n'