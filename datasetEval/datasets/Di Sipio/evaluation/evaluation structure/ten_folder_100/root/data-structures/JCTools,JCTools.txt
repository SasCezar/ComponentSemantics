b'[![Total alerts](https://img.shields.io/lgtm/alerts/g/JCTools/JCTools.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/JCTools/JCTools/alerts/)\n[![Coverage Status](https://coveralls.io/repos/github/JCTools/JCTools/badge.svg?branch=master)](https://coveralls.io/github/JCTools/JCTools?branch=master)\n[![Build Status](https://travis-ci.org/JCTools/JCTools.svg?branch=master)](https://travis-ci.org/JCTools/JCTools)\n[![Gitter](https://badges.gitter.im/JCTools/JCTools.svg)](https://gitter.im/JCTools/JCTools?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\n\nJCTools\n==========\nJava Concurrency Tools for the JVM. This project aims to offer some concurrent data structures currently missing from\nthe JDK:\n- SPSC/MPSC/SPMC/MPMC variations for concurrent queues:\n  * SPSC - Single Producer Single Consumer (Wait Free, bounded and unbounded)\n  * MPSC - Multi Producer Single Consumer (Lock less, bounded and unbounded)\n  * SPMC - Single Producer Multi Consumer (Lock less, bounded)\n  * MPMC - Multi Producer Multi Consumer (Lock less, bounded)\n  \n- SPSC/MPSC linked array queues offer a balance between performance, allocation and footprint\n\n- An expanded queue interface (MessagePassingQueue):\n  * relaxedOffer/Peek/Poll: trade off conflated guarantee on full/empty queue state with improved performance.\n  * drain/fill: batch read and write methods for increased throughput and reduced contention\n  \nThere\'s more to come and contributions/suggestions are most welcome. JCTools has enjoyed support from the community\nand contributions in the form of issues/tests/documentation/code have helped it grow.\nJCTools offers excellent performance at a reasonable price (FREE! under the Apache 2.0 License). It\'s stable and in use by such distinguished frameworks as Netty, RxJava and others. JCTools is also used by commercial products to great result.\n\nGet it NOW!\n==========\nAdd the latest version as a dependency using Maven:\n```xml\n        <dependency>\n            <groupId>org.jctools</groupId>\n            <artifactId>jctools-core</artifactId>\n            <version>2.1.1</version>\n        </dependency>\n```\n\nOr use the awesome, built from source, <https://jitpack.io/> version, you\'ll need to add the Jitpack repository:\n```xml\n        <repository>\n          <id>jitpack.io</id>\n           <url>https://jitpack.io</url>\n        </repository>\n```\n\nAnd setup the following dependency:\n```xml\n        <dependency>\n            <groupId>com.github.JCTools.JCTools</groupId>\n            <artifactId>jctools-core</artifactId>\n            <version>v2.1.1</version>\n        </dependency>\n```\n\nYou can also depend on latest snapshot from this repository (live on the edge) by setting the version to \'2.2-SNAPSHOT\'.\n\n\nBuild it from source\n==========\nJCTools is maven built and requires an existing Maven installation and JDK8 (only for building, runtime is 1.6 compliant).\n\nWith \'MAVEN_HOME/bin\' on the path and JDK8 set to your \'JAVA_HOME\' you should be able to run "mvn install" from this\ndirectory.\n\n\nBut I have a zero-dependency/single-jar project\n==========\nWhile you are free to copy & extend JCTools, we would much prefer it if you have a versioned dependency on JCTools to\nenable better support, upgrade paths and discussion. The shade plugin for Maven/Gradle is the preferred way to get\nJCTools fused with your library. Examples are available in the [ShadeJCToolsSamples](https://github.com/JCTools/ShadeJCToolsSamples) project.\n\n\nBenchmarks\n==========\nJCTools is benchmarked using both JMH benchmarks and handrolled harnesses. The benchmarks and related instructions can be\nfound in the jctools-benchmarks module [README](jctools-benchmarks/README.md). Go wild and please let us know how it did on your hardware.\n\nConcurrency Testing\n===========\n```\nmvn package\ncd jctools-concurrency-test\njava -jar target/concurrency-test.jar -v\n```\nCome up to the lab...\n==========\nExperimental work is available under the jctools-experimental module. Most of the stuff is developed with an eye to\neventually porting it to the core where it will be stabilized and released, but some implementations are kept purely for reference and some may never graduate. Beware the Jabberwock my child.\n\nHave Questions? Suggestions?\n==========\nThe best way to discuss JCTools is on the GitHub issues system. Any question is good, and GitHub provides a better\nplatform for knowledge sharing than twitter/mailing-list/gitter (or at least that\'s what we think).\n\nThanks!!!\n=====\nWe have kindly been awarded [IntelliJ IDEA](https://www.jetbrains.com/idea/) licences by [JetBrains](https://www.jetbrains.com/) to aid in the development of JCTools. It\'s a great suite of tools which has benefited the developers and ultimately the community.\n\nIt\'s an awesome and inspiring company, [**BUY THEIR PRODUCTS NOW!!!**](https://www.jetbrains.com/store/#edition=commercial)\n\nJCTools has enjoyed a steady stream of PRs, suggestions and user feedback. It\'s a community! Thank you all for getting involved!\n'