b'Nette Schema\n************\n\n[![Downloads this Month](https://img.shields.io/packagist/dm/nette/schema.svg)](https://packagist.org/packages/nette/schema)\n[![Build Status](https://travis-ci.org/nette/schema.svg?branch=master)](https://travis-ci.org/nette/schema)\n[![Coverage Status](https://coveralls.io/repos/github/nette/schema/badge.svg?branch=master)](https://coveralls.io/github/nette/schema?branch=master)\n[![Latest Stable Version](https://poser.pugx.org/nette/schema/v/stable)](https://github.com/nette/schema/releases)\n[![License](https://img.shields.io/badge/license-New%20BSD-blue.svg)](https://github.com/nette/schema/blob/master/license.md)\n\n\nIntroduction\n============\n\nHandy library for validating data structures against a given Schema.\n\nDocumentation can be found on the [website](https://doc.nette.org/schema).\n\nIf you like Nette, **[please make a donation now](https://nette.org/donate)**. Thank you!\n\n\nInstallation\n============\n\nThe recommended way to install is via Composer:\n\n```\ncomposer require nette/schema\n```\n\nIt requires PHP version 7.1 and supports PHP up to 7.4.\n\n\nUsage\n=====\n\n```php\n$processor = new Nette\\Schema\\Processor;\n\ntry {\n\t$normalized = $processor->process($schema, $data);\n} catch (Nette\\Schema\\ValidationException $e) {\n\techo \'Data are not valid: \' . $e->getMessage();\n}\n\n// in case of error it throws Nette\\Schema\\ValidationException\n```\n\nDefining schema\n---------------\n\n```php\nuse Nette\\Schema\\Expect;\n\n$schema = Expect::structure([\n    \'processRefund\' => Expect::bool(),\n    \'refundAmount\' => Expect::int(),\n]);\n\n$data = [\n    \'processRefund\' => true,\n    \'refundAmount\' => 17,\n];\n\n$normalized = $processor->process($schema, $data); // it passes\n```\n\nIf you\'re validating data passed, you can cast strings and booleans to the expected types defined by your schema:\n\n```php\n$schema = Expect::structure([\n    \'processRefund\' => Expect::scalar()->castTo(\'bool\'),\n    \'refundAmount\' => Expect::scalar()->castTo(\'int\'),\n]);\n\n$data = [\n    \'processRefund\' => 1,\n    \'refundAmount\' => \'17\',\n];\n\n$normalized = $processor->process($schema, $data); // it passes\n\nis_bool($normalized->processRefund); // true\nis_int($normalized->refundAmount); // true\n```\n\nBy default, all properties are optional and have default value `null`, or `[]` in the case of arrays.\n\nYou can change the default value as follows:\n\n```php\n$schema = Expect::structure([\n    \'processRefund\' => Expect::bool()->default(true), // or Expect::bool(true)\n]);\n\n$data = [];\n\n// validates, and sets defaults for missing properties\n$normalized = $processor->process($schema, $data);\n\n// $normalized->processRefund === true;\n```\n\n\nArrays of items\n---------------\n\nArray where only string items are allowed:\n\n```php\n$schema = Expect::arrayOf(\'string\');\n\n$processor->process($schema, [\'key1\' => \'a\', \'key2\' => \'b\']); // it passes\n$processor->process($schema, [\'key\' => 123]); // error: The option \'key\' expects to be string, int 123 given.\n```\n\nIndexed array (ie. with numeric keys) where only string items are allowed:\n\n```php\n$schema = Expect::listOf(\'string\');\n\n$processor->process($schema, [\'a\', \'b\']); // it passes\n$processor->process($schema, [\'key\' => \'a\']); // error, unexpected \'key\'\n```\n\nEnumerated values and anyOf()\n-----------------------------\n\nThe `anyOf()` is used to restrict a value to a fixed set of variants or subschemes:\n\n```php\n$schema = Expect::listOf(\n\tExpect::anyOf(\'a\', true, null)\n);\n\n$processor->process($schema, [\'a\', true, null, \'a\']); // it passes\n$processor->process($schema, [\'a\', false]); // error: The option \'1\' expects to be \'a\'|true|null, false given.\n```\n\nElements can be schema:\n\n```php\n$schema = Expect::listOf(\n\tExpect::anyOf(Expect::string(), true, null)\n);\n\n$processor->process($schema, [\'foo\', true, null, \'bar\']); // it passes\n$processor->process($schema, [123]); // error: The option \'0\' expects to be string|true|null, 123 given.\n```\n\nStructures\n----------\n\nStructures are objects with defined keys. Each of these key => pairs is conventionally referred to as a \xe2\x80\x9cproperty\xe2\x80\x9d.\n\nStructures accept arrays and objects and return `stdClass` objects (unless you change it with `castTo(\'array\')` etc).\n\nBy default, all properties are optional and have default value `null`. You can define mandatory properties via `required()`:\n\n```php\n$schema = Expect::structure([\n\t\'required\' => Expect::string()->required(),\n\t\'optional\' => Expect::string(), // default is null\n]);\n\n$processor->process($schema, [\'optional\' => \'\']); // error: option \'required\' is missing\n$processor->process($schema, [\'required\' => \'foo\']); // it passes, returns (object) [\'required\' => \'foo\', \'optional\' => null]\n```\n\nYou can define nullable properties via `nullable()`:\n\n```php\n$schema = Expect::structure([\n\t\'optional\' => Expect::string(),\n\t\'nullable\' => Expect::string()->nullable(),\n]);\n\n$processor->process($schema, [\'optional\' => null]); // error: \'optional\' expects to be string, null given.\n$processor->process($schema, [\'nullable\' => null]); // it passes, returns (object) [\'optional\' => null, \'nullable\' => null]\n```\n\nBy default, providing additional properties is forbidden:\n\n```php\n$schema = Expect::structure([\n\t\'key\' => Expect::string(),\n]);\n\n$processor->process($schema, [\'additional\' => 1]); // error: Unexpected option \'additional\'\n```\n\nThe `otherItems()` is used to control the handling of extra stuff, that is, properties whose names are not listed in `Expect::structure()`:\n\n```php\n$schema = Expect::structure([\n\t\'key\' => Expect::string(),\n])->otherItems(Expect::int());\n\n$processor->process($schema, [\'additional\' => 1]); // it passes\n```\n\nSize and ranges\n---------------\n\nYou can limit the number of elements or properties using the `min()` and `max()`:\n\n```php\n// array, at least 10 items, maximum 20 items\n$schema = Expect::array()->min(10)->max(20);\n```\n\nThe length of a string can be constrained using the `min()` and `max()`:\n\n```php\n// string, at least 10 characters long, maximum 20 characters\n$schema = Expect::string()->min(10)->max(20);\n```\n\nRanges of numbers are specified using a combination of `min()` and `max()`:\n\n```php\n// integer, between 10 and 20\n$schema = Expect::int()->min(10)->max(20);\n```\n\nRegular expressions\n-------------------\n\nString can be restricted by regular expression using the `pattern()`:\n\n```php\n// just 9 digits\n$schema = Expect::string()->pattern(\'\\d{9}\');\n```\n\nData mapping to objects\n-----------------------\n\nSchema can be generated from class:\n\n```php\nclass Config\n{\n\t/** @var string */\n\tpublic $dsn;\n\n\t/** @var string|null */\n\tpublic $user;\n\n\t/** @var string|null */\n\tpublic $password;\n\n\t/** @var bool */\n\tpublic $debugger = true;\n}\n\n$schema = Expect::from(new Config);\n\n$data = [\n\t\'dsn\' => \'sqlite\',\n\t\'user\' => \'root\'\n];\n\n$normalized = $processor->process($schema, $data);\n// $normalized is Config class\n// $normalized->dsn === \'sqlite\'\n// $normalized->user === \'root\'\n// $normalized->password === null\n// $normalized->debugger === true\n```\n\nYou can even use PHP 7.4 notation:\n\n\n```php\nclass Config\n{\n\tpublic string $dsn;\n\tpublic ?string $user;\n\tpublic ?string $password;\n\tpublic bool $debugger = true;\n}\n\n$schema = Expect::from(new Config);\n```\n\nOr use anonymous class:\n\n```php\n$schema = Expect::from(new class {\n\tpublic string $dsn;\n\tpublic ?string $user;\n\tpublic ?string $password;\n\tpublic bool $debugger = true;\n});\n```\n\nCustom normalization\n--------------------\n\n```php\n$schema = Expect::arrayOf(\'string\')\n\t->before(function ($v) { return explode(\' \', $v); });\n\n$normalized = $processor->process($schema, \'a b c\'); // it passes and returns [\'a\', \'b\', \'c\']\n```\n\nCustom constraints\n------------------\n\n```php\n$schema = Expect::arrayOf(\'string\')\n\t->assert(function ($v) { return count($v) % 2 === 0; }); // count must be even number\n\n$processor->process($schema, [\'a\', \'b\']); // it passes, 2 is even number\n$processor->process($schema, [\'a\', \'b\', \'c\']); // error, 3 is not even number\n```\n\nOr\n\n```php\n$schema = Expect::string()->assert(\'is_file\'); // file must exist\n```\n\nYou can add custom description for every assert. This description will be part of error message.\n\n```php\n$schema = Expect::arrayOf(\'string\')\n\t->assert(function ($v) { return count($v) % 2 === 0; }, \'Even items in array\');\n\n$processor->process($schema, [\'a\', \'b\', \'c\']); // Failed assertion "Even items in array" for option with value array.\n```\n'