b'# Crossbeam\n\n[![Build Status](https://travis-ci.org/crossbeam-rs/crossbeam.svg?branch=master)](\nhttps://travis-ci.org/crossbeam-rs/crossbeam)\n[![License](https://img.shields.io/badge/license-MIT%2FApache--2.0-blue.svg)](\nhttps://github.com/crossbeam-rs/crossbeam)\n[![Cargo](https://img.shields.io/crates/v/crossbeam.svg)](\nhttps://crates.io/crates/crossbeam)\n[![Documentation](https://docs.rs/crossbeam/badge.svg)](\nhttps://docs.rs/crossbeam)\n[![Rust 1.28+](https://img.shields.io/badge/rust-1.28+-lightgray.svg)](\nhttps://www.rust-lang.org)\n[![chat](https://img.shields.io/discord/569610676205781012.svg?logo=discord)](https://discord.gg/JXYwgWZ)\n\nThis crate provides a set of tools for concurrent programming:\n\n#### Atomics\n\n* [`AtomicCell`], a thread-safe mutable memory location.<sup>(no_std)</sup>\n* [`AtomicConsume`], for reading from primitive atomic types with "consume" ordering.<sup>(no_std)</sup>\n\n#### Data structures\n\n* [`deque`], work-stealing deques for building task schedulers.\n* [`ArrayQueue`], a bounded MPMC queue that allocates a fixed-capacity buffer on construction.\n* [`SegQueue`], an unbounded MPMC queue that allocates small buffers, segments, on demand.\n\n#### Memory management\n\n* [`epoch`], an epoch-based garbage collector.<sup>(alloc)</sup>\n\n#### Thread synchronization\n\n* [`channel`], multi-producer multi-consumer channels for message passing.\n* [`Parker`], a thread parking primitive.\n* [`ShardedLock`], a sharded reader-writer lock with fast concurrent reads.\n* [`WaitGroup`], for synchronizing the beginning or end of some computation.\n\n#### Utilities\n\n* [`Backoff`], for exponential backoff in spin loops.<sup>(no_std)</sup>\n* [`CachePadded`], for padding and aligning a value to the length of a cache line.<sup>(no_std)</sup>\n* [`scope`], for spawning threads that borrow local variables from the stack.\n\n*Features marked with <sup>(no_std)</sup> can be used in `no_std` environments.*<br/>\n*Features marked with <sup>(alloc)</sup> can be used in `no_std` environments, but only if `alloc`\nand `nightly` are enabled.*\n\n[`AtomicCell`]: https://docs.rs/crossbeam/*/crossbeam/atomic/struct.AtomicCell.html\n[`AtomicConsume`]: https://docs.rs/crossbeam/*/crossbeam/atomic/trait.AtomicConsume.html\n[`deque`]: https://docs.rs/crossbeam/*/crossbeam/deque/index.html\n[`ArrayQueue`]: https://docs.rs/crossbeam/*/crossbeam/queue/struct.ArrayQueue.html\n[`SegQueue`]: https://docs.rs/crossbeam/*/crossbeam/queue/struct.SegQueue.html\n[`channel`]: https://docs.rs/crossbeam/*/crossbeam/channel/index.html\n[`Parker`]: https://docs.rs/crossbeam/*/crossbeam/sync/struct.Parker.html\n[`ShardedLock`]: https://docs.rs/crossbeam/*/crossbeam/sync/struct.ShardedLock.html\n[`WaitGroup`]: https://docs.rs/crossbeam/*/crossbeam/sync/struct.WaitGroup.html\n[`epoch`]: https://docs.rs/crossbeam/*/crossbeam/epoch/index.html\n[`Backoff`]: https://docs.rs/crossbeam/*/crossbeam/utils/struct.Backoff.html\n[`CachePadded`]: https://docs.rs/crossbeam/*/crossbeam/utils/struct.CachePadded.html\n[`scope`]: https://docs.rs/crossbeam/*/crossbeam/fn.scope.html\n\n## Crates\n\nThe main `crossbeam` crate just [re-exports](src/lib.rs) tools from\nsmaller subcrates:\n\n* [`crossbeam-channel`](crossbeam-channel)\n  provides multi-producer multi-consumer channels for message passing.\n* [`crossbeam-deque`](crossbeam-deque)\n  provides work-stealing deques, which are primarily intended for building task schedulers.\n* [`crossbeam-epoch`](crossbeam-epoch)\n  provides epoch-based garbage collection for building concurrent data structures.\n* [`crossbeam-queue`](crossbeam-queue)\n  provides concurrent queues that can be shared among threads.\n* [`crossbeam-utils`](crossbeam-utils)\n  provides atomics, synchronization primitives, scoped threads, and other utilities.\n\nThere is one more experimental subcrate that is not yet included in `crossbeam`:\n\n* [`crossbeam-skiplist`](crossbeam-skiplist)\n  provides concurrent maps and sets based on lock-free skip lists.\n\n## Usage\n\nAdd this to your `Cargo.toml`:\n\n```toml\n[dependencies]\ncrossbeam = "0.7"\n```\n\nNext, add this to your crate:\n\n```rust\nextern crate crossbeam;\n```\n\n## Compatibility\n\nThe minimum supported Rust version is 1.28. Any change to this is considered a breaking change.\n\n## Contributing\n\nCrossbeam welcomes contribution from everyone in the form of suggestions, bug reports,\npull requests, and feedback. \xf0\x9f\x92\x9b\n\nIf you need ideas for contribution, there are several ways to get started:\n\n* Found a bug or have a feature request?\n  [Submit an issue](https://github.com/crossbeam-rs/crossbeam/issues/new)!\n* Issues and PRs labeled with\n  [feedback wanted](https://github.com/crossbeam-rs/crossbeam/issues?utf8=%E2%9C%93&q=is%3Aopen+sort%3Aupdated-desc+label%3A%22feedback+wanted%22+)\n  need feedback from users and contributors.\n* Issues labeled with\n  [good first issue](https://github.com/crossbeam-rs/crossbeam/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3A%22good+first+issue%22)\n  are relatively easy starter issues.\n\n#### RFCs\n\nWe also have the [RFCs](https://github.com/crossbeam-rs/rfcs) repository for more\nhigh-level discussion, which is the place where we brainstorm ideas and propose\nsubstantial changes to Crossbeam.\n\nYou are welcome to participate in any open\n[issues](https://github.com/crossbeam-rs/rfcs/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc)\nor\n[pull requests](https://github.com/crossbeam-rs/rfcs/pulls?q=is%3Apr+is%3Aopen+sort%3Aupdated-desc).\n\n#### Learning resources\n\nIf you\'d like to learn more about concurrency and non-blocking data structures, there\'s a\nlist of learning resources in our [wiki](https://github.com/crossbeam-rs/rfcs/wiki),\nwhich includes relevant blog posts, papers, videos, and other similar projects.\n\nAnother good place to visit is [merged RFCs](https://github.com/crossbeam-rs/rfcs/tree/master/text).\nThey contain elaborate descriptions and rationale for features we\'ve introduced to\nCrossbeam, but keep in mind that some of the written information is now out of date.\n\n#### Conduct\n\nThe Crossbeam project adheres to the\n[Rust Code of Conduct](https://github.com/rust-lang/rust/blob/master/CODE_OF_CONDUCT.md).\nThis describes the minimum behavior expected from all contributors.\n\n## License\n\nLicensed under either of\n\n * Apache License, Version 2.0 ([LICENSE-APACHE](LICENSE-APACHE) or http://www.apache.org/licenses/LICENSE-2.0)\n * MIT license ([LICENSE-MIT](LICENSE-MIT) or http://opensource.org/licenses/MIT)\n\nat your option.\n\nSome Crossbeam subcrates have additional licensing notices.\nTake a look at other readme files in this repository for more information.\n\n#### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in the work by you, as defined in the Apache-2.0 license, shall be\ndual licensed as above, without any additional terms or conditions.\n'