b"# Your basic graph [![GoDoc](https://godoc.org/github.com/yourbasic/graph?status.svg)][godoc-graph]\n\n### Golang library of basic graph algorithms\n\n![Topological ordering](top.png)\n\n*Topological ordering, image by [David Eppstein][de], [CC0 1.0][cc010].*\n\nThis library offers efficient and well-tested algorithms for\n\n- breadth-first and depth-first search,\n- topological ordering,\n- strongly and weakly connected components,\n- bipartion,\n- shortest paths,\n- maximum flow,\n- Euler walks,\n- and minimum spanning trees.\n\nThe algorithms can be applied to any graph data structure implementing\nthe two `Iterator` methods: `Order`, which returns the number of vertices,\nand `Visit`, which iterates over the neighbors of a vertex.\n\nAll algorithms operate on directed graphs with a fixed number\nof vertices, labeled from 0 to n-1, and edges with integer cost.\nAn undirected edge {v, w} of cost c is represented by the two\ndirected edges (v, w) and (w, v), both of cost c.\nA self-loop, an edge connecting a vertex to itself,\nis both directed and undirected.\n\n\n### Graph data structures\n\nThe type `Mutable` represents a directed graph with a fixed number\nof vertices and weighted edges that can be added or removed.\nThe implementation uses hash maps to associate each vertex\nin the graph with its adjacent vertices. This gives constant\ntime performance for all basic operations.\n\nThe type `Immutable` is a compact representation of an immutable graph.\nThe implementation uses lists to associate each vertex in the graph\nwith its adjacent vertices. This makes for fast and predictable\niteration: the Visit method produces its elements by reading\nfrom a fixed sorted precomputed list.\n\n\n### Virtual graphs\n\nThe subpackage `graph/build` offers a tool for building graphs of type `Virtual`.\n\nIn a virtual graph no vertices or edges are stored in memory,\nthey are instead computed as needed. New virtual graphs are constructed\nby composing and filtering a set of standard graphs, or by writing\nfunctions that describe the edges of a graph.\n\nThe following standard graphs are predefined:\n\n- empty graphs,\n- complete graphs and complete bipartite graphs,\n- grid graphs and complete *k*-ary trees,\n- cycle graphs and circulant graphs,\n- and hypergraphs.\n\nThe following operations are supported:\n\n- adding and deleting sets of edges,\n- adding cost functions,\n- filtering graphs by edge functions,\n- complement, intersection and union,\n- subgraphs,\n- connecting graphs at a single vertex,\n- joining two graphs by a set of edges,\n- matching two graphs by a set of edges,\n- cartesian product and tensor product.\n\nNon-virtual graphs can be imported, and used as building blocks,\nby the `Specific` function. Virtual graphs don't need to be \xe2\x80\x9cexported\xe2\x80\xac\xe2\x80\x9d;\nthey implement the `Iterator` interface and hence can be used directly\nby any algorithm in the graph package.\n\n\n### Installation\n\nOnce you have [installed Go][golang-install], run this command\nto install the `graph` package:\n\n    go get github.com/yourbasic/graph\n\n    \n### Documentation\n\nThere is an online reference for the package at\n[godoc.org/github.com/yourbasic/graph][godoc-graph].\n\n\n### Roadmap\n\n* The API of this library is frozen.\n* Bug fixes and performance enhancement can be expected.\n* New functionality might be included.\n* Version numbers adhere to [semantic versioning][sv].\n\nThe only accepted reason to modify the API of this package is to\nhandle issues that can't be resolved in any other reasonable way.\n\nNew features and performance enhancements are limited to basic\nalgorithms and data structures, akin to the ones that you might find\nin a computer science textbook.\n\nStefan Nilsson \xe2\x80\x93 [korthaj](https://github.com/korthaj)\n\n[godoc-graph]: https://godoc.org/github.com/yourbasic/graph\n[golang-install]: http://golang.org/doc/install.html\n[cc010]: https://creativecommons.org/publicdomain/zero/1.0/deed.en\n[de]: https://commons.wikimedia.org/wiki/User:David_Eppstein\n[sv]: http://semver.org/\n\n"