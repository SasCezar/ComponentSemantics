b'# CS-Playground-React: Algos & Data Structures\n\nAn interactive overview of common sorting algorithms and data structures, implemented in JavaScript, with optional "challenge mode" (get your code to pass all the tests!). This also includes several other miscellaneous algorithm challenges, similar to those asked in programming interviews. This is intended to help you brush up on your computer science fundamentals, algorithm, and problem solving skills. Contributions are welcome!\n\n__This is meant as a reference / review only &mdash; if you haven\'t already learned / solved these problems on your own, I recommend giving them a try in the editor first before looking at the solution code! If you get stuck, there are plenty of resources accessible right through the app to help you along. A full list of resources can also be found [here](https://github.com/no-stack-dub-sack/cs-playground-react/blob/master/RESOURCES.md).__\n\nThis project uses [CodeMirror](https://codemirror.net/) and [React-CodeMirror2](https://github.com/scniro/react-codemirror2/) to embed an editor into the browser (the original React-Codemirror is out of date, not maintained, and does not play well with React 16). It also uses a fun little hack to run the code and hijack `console.log`, creating a little REPL which outputs into a mock console. Oh, and a [little script](https://github.com/lingtalfi/simpledrag) I found to help with the resizable panes!\n\n![image](https://user-images.githubusercontent.com/18563015/38588156-5e5212ec-3cf2-11e8-8601-89ea6076c3a2.png)\nThe app is currently live here: https://cs-playground-react.surge.sh/\n\n## Saving / Clearing Code:\n- Any _NON-SOLUTION_ code you edit is persisted throughout the session via Redux, and state is persisted using local storage across sessions, so you can leave, close your browser, and come back later, and your code will still be there, without having to log in or create credentials. Be careful though! Once your browsers local storage is cleared, you will lose all of your work.\n- To reset the application state from within the app, call the `resetState()` function in the embedded editor.\n- If for some reason you do not want to save your code, leave the following comment before navigating away or closing your browser:\n```js\n// DO NOT SAVE\n```\n\n## Test Suites\n- Each challenge has an accompanying test suite to help you be sure that your solutions are correct. Every time you run your code, the tests will be run in the background and the results will be logged to the console.\n- Note that the tests are purely optional, and are disabled by default. This is to keep unwanted noise in the console down to a minimum, and to not force you to solve these problems in a specific way. Like most things in programming, each of these problems have several different solutions. In order to test them, I had to pick one way to solve each, and test for that way. This might be limiting if you want to choose an completely different approach to solving a particular problem.\n- To enable the tests, delete the `// SUPPRESS TESTS` comment at the bottom of the editor, to disable them again, add the `// SUPPRESS TESTS` comment to any part of the file (or you can use the shortcut keys: <kbd>CMD/CTRL</kbd>+<kbd>ALT</kbd>+<kbd>/</kbd>, which will toggle the `// SUPPRESS TESTS` comment at any time).\n- When the test suite for a particular problem is running, you may notice that some tests are disabled by default. This is mainly for really complicated data structure problems. Some tests are not required to ensure a fundamental understanding of a particular data structure, but still might be fun to solve anyway! So when this is the case, these tests are disabled, and are only enabled when you define the method in question on the class. If you don\'t define the method, they won\'t be tested, and not solving these problems won\'t count against you, or show up as a pesky, red, failing test.\n\n## Loop-Protect\nInfinite loop protection is enabled by default. Using [JSBin\'s loop-protect](https://github.com/jsbin/loop-protect) Babel transform, CS-Playground-React will automatically break loops that take over 500ms to run and will throw an error to let you know that there is likely a problem with your code. For instances where this is not the case, leave a \\`// DISABLE LOOP PROTECT\\` comment to run your code without loop protection. Beware! If you run code that does have an infinite loop while loop protect is disabled, you will crash the browser tab, so tread lightly when disabling this feature!\n\n## Key Bindings / Application Shortcut Keys:\n- The editor has SublimeText keybindings.\n- Additional keys bindings / shortcuts:\n  - Scroll through themes: <kbd>CMD/CTRL</kbd>+<kbd>ALT</kbd>+(<kbd>{</kbd> OR <kbd>}</kbd>)\n  - Go to the next challenge: <kbd>CMD/CTRL</kbd>+<kbd>SHIFT</kbd>+<kbd>.</kbd>\n  - Go to the previous challenge: <kbd>CMD/CTRL</kbd>+<kbd>SHIFT</kbd>+<kbd>,</kbd>\n  - Jump to solution / seed: <kbd>CMD/CTRL</kbd>+<kbd>SHIFT</kbd>+<kbd>S</kbd>\n  - Run code / tests: <kbd>CMD/CTRL</kbd>+<kbd>SHIFT</kbd>+<kbd>ENTER</kbd>\n  - Toggle Suppress Tests: <kbd>CMD/CTRL</kbd>+<kbd>ALT</kbd>+<kbd>/</kbd>\n  - Clear Console: <kbd>ALT</kbd>+<kbd>SHIFT</kbd>+<kbd>DELTE/BACKSPACE</kbd>\n  - Open autocomplete dropdown: <kbd>CTRL</kbd>+<kbd>SPACE</kbd>\n  - Focus Editor: <kbd>CMD/CTRL</kbd>+<kbd>\\\\</kbd>\n- Search / Replace functionalities:\n  - Start searching: <kbd>CMD/CTRL</kbd>+<kbd>F</kbd>\n  - Find next: <kbd>CMD/CTRL</kbd>+<kbd>G</kbd>\n  - Find previous: <kbd>CMD/CTRL</kbd>+<kbd>SHIFT</kbd>+<kbd>G</kbd>\n  - Replace: <kbd>CMD</kbd>+<kbd>ALT</kbd>+<kbd>F</kbd> OR <kbd>SHIFT</kbd>+<kbd>CTRL</kbd>+<kbd>F</kbd>\n  - Replace all: <kbd>SHIFT</kbd>+<kbd>CMD</kbd>+<kbd>ALT</kbd>+<kbd>F</kbd> OR <kbd>SHIFT</kbd>+<kbd>CTRL</kbd>+<kbd>R</kbd>\n  - Jump to line: <kbd>ALT</kbd>+<kbd>G</kbd>\n\n## Contents:\n### Sorting Algorithms:\n- Quicksort\n- Mergesort\n- Selection Sort\n- Insertion Sort\n- Bubble Sort\n- Heap Sort\n- Bucket Sort\n- Sorting Algorithm Benchmarks\n\n### Data Structures:\n- Stack\n- Queue\n- Priority Queue\n- Linked List\n- Doubly Linked List\n- Binary Search Tree\n- Max Heap\n- Hash Table\n- Graph\n\n### Algorithm Challenges\n**Easy:**\n- Sum All Primes\n- Generate Checkerboard\n- Flatten An Array\n- Reverse A String\n- Reverse Vowels\n- Is Palindrome _(coming soon)_\n- Fizz Buzz _(coming soon)_\n\n**Moderate/Difficult:**\n- Longest Common Prefix\n- No Two Consecutive Chars\n- Anagram Palindrome\n- Rotate An Image _(coming soon)_\n\n## To Install/Run:\n- Fork repo, clone locally, and run `npm install` or `yarn install`\n- In the root directory, run `npm start` or `yarn start`\n\n## \\*\\*_Challenge!_\nSome of my solutions are less than perfect. If you come up with a better one, or want to add a new algorithm or data structure that I haven\'t covered, feel free to submit a PR!\n\n### A note on JSDoc:\nThe [JSDoc](https://github.com/jsdoc3/jsdoc)-like documentation found throughout the editor\'s files are just that: JSDoc-_like_. These comments would not produce proper documentation if the JSDoc utility were ran on these source files. These comments, instead, loosely follow the JSDoc style, and are just meant as a recognizable reference for users, so that they can easily see how each function, parameter, class, property, and method is meant to be used. Eventually, there are plans for changing to actual JSDoc comments and corresponding markdown documentation, but this is currently not a high priority. Any new challenges, however, should be added with this style of comments.\n\n***\n\nThis project was bootstrapped with [Create React App](https://github.com/facebookincubator/create-react-app).\n\n<kbd><kbd><kbd><kbd><kbd><kbd><kbd><kbd><kbd><kbd><kbd><kbd><kbd><kbd><kbd><kbd><kbd><kbd><kbd><kbd><kbd><kbd><kbd><kbd><kbd><kbd><kbd><kbd><kbd><kbd><kbd><kbd><kbd><kbd>\n'