b'<p align="center">\n  <img src="unicorn-docs/unicorn.png">\n</p>\n\n# Unicorn Console \n\n[![Build Status](https://travis-ci.org/sunjay/UnicornConsole.svg?branch=master)](https://travis-ci.org/Gigoteur/UnicornConsole)\n[![LICENSE](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/Gigoteur/UnicornConsole/blob/master/LICENSE.md)\n[![Gitter](https://img.shields.io/gitter/room/nwjs/nw.js.svg)](https://gitter.im/UnicornConsole/Lobby)\n\n\nUnicorn Console is a quick and dirty engine that let you do what you want with a resolution of 400x240 pixels. The main engine is not dependant of a specific GFX library so you can use it where you want:\n  * [unicorn](https://github.com/Gigoteur/UnicornConsole/tree/master/unicorn): Main engine source code\n  * [unicorn-devkit](https://github.com/Gigoteur/UnicornConsole/tree/master/unicorn-devkit): SDL2 version\n  * [unicorn-libretro](https://github.com/Gigoteur/UnicornConsole/tree/master/unicorn-libretro): [libretro](http://www.libretro.com/index.php/api/) API version\n  * [unicorn-web](https://github.com/Gigoteur/UnicornConsole/tree/master/unicorn-web): Webassembly version\n  * [unicorn-android](https://github.com/Gigoteur/UnicornConsole/tree/master/unicorn-android): Android version\n  \n  \nTOC:\n  * [Features](#features)\n  * [Requirements](#requirements)\n  * [Download](#download)\n    + [Build](#build)\n  * [Create](#create)\n  * [API](#api)\n\n## Features\n\n  * Display: 400x240 pixels, 32 bits color\n  * Palette: predefined palettes/extend existing one\n  * Sprite: 3200 8x8 sprites\n  * Dynamic sprite: create/save sprites with all size\n  * Map: 400x60 cells, 3200x480 pixels\n  * Code: Rust/Javascript/Python/Lua\n  * Sound: chiptune support via [klystron](http://kometbomb.github.io/klystrack/) engine \n  * Editor: GFX/SOUND/CODE editor\n  \n\n## Download\n### Build\n\nCargo feature:\n  * cpython: enable python support\n  * unicorn_plugin_lua: enable lua support\n  * duktape: enable duktape (javascript) support\n  * libksnd: use the native version of klystron for the sound\n\nYou can choose to build the main UI to play/edit games:\n```\ncd unicorn-devkit\ncargo build --release\n```\n\nand run it with the default embedded game:\n```\n./target/release/uc-devkit\n```\n\nor load an existing one:\n```\n./target/release/uc-devkit ../unicorn/games/floppybird/floppybird.uni\n```\n\nYou can also choose to build the libretro version:\n```\ncd unicorn-libretro\ncargo build --release\n```\n\nAnd load the shared library with retroarch:\n```\nretroarch -L target/release/libunicorn_libretro.so ../unicorn/examples/api_demos.uni\n```\n\n\n\n\n## Create\n\n## API\n\nThe API is available for Rust/Javascript/Python/Lua.\n  * [Graphics](#graphics)\n    + [camera](#camera)\n    + [circ](#circ)\n    + [circfill](#circfill)\n    + [clip](#clip)\n    + [cls](#cls)\n    + [color](#color)\n    + [ellipse](#ellipse)\n    + [ellipsefill](#ellipsefill)\n    + [fget](#fget)\n    + [font](#font)\n    + [line](#line)\n    + [mode](#mode)\n    + [pal](#pal)\n    + [palt](#palt)\n    + [pget](#pget)\n    + [print](#print)\n    + [pset](#pset)\n    + [rect](#rect)\n    + [rectfill](#rectfill)\n    + [sget](#sget)\n    + [spr](#spr)\n    + [sset](#sset)\n    + [sspr](#sspr)\n    + [trigon](#trigon)\n  * [MAP](#map)\n    + [map](#map)\n    + [mget](#mget)\n    + [mset](#mset)\n  * [Noise](#noise)\n    + [noise](#noise)\n    + [noise_set_seed](#noise_set_seed)\n  * [Math](#math)\n  * [Memory](#memory)\n  * [Mouse Input](#mouse_input)\n  * [Palettes](#palettes)\n  * [Cart Data](#cart_data)\n\n### Graphics\n\n#### camera\n\n`camera([x, y])`\n\nSet the camera position.\n\n* _x_/_y_ are the coordinates to set the camera, and they could be optional (in this case, 0/0 will be used)\n\n#### circ\n\n`circ(x, y, r, [col])`\n\nDraw a circle:\n*  _x_/_y_ are the coordinates\n* _r_ is the radius of the circle\n* _col_ is the color of the circle\n\n#### circfill\n\n`circfill(x, y, r, [col])`\n\nDraw a filled circle:\n*  _x_/_y_ are the coordinates\n* _r_ is the radius of the circle\n* _col_ is the color of the circle\n\n[[https://j.gifs.com/nZl3GE.gif]]\n\n#### clip\n\n`clip([x, y, w, h])`\n\nSet a screen clipping region where:\n* x/y are the coordinate\n* w is the width\n* h is the height\n\n#### cls\n\nClear the screen.\n\n#### color\n\n`color(col)`\n\nset default color\n\n#### ellipse\n\n`ellipse(x, y, rx, ry, [col])`\n\nDraw an ellipse\n\n#### ellipsefill\n\n`ellipsefill(x, y, rx, ry, [col])`\n\ndraw filled ellipse\n\n#### fget\n\n`fget(n, [f])`\n\nget values of sprite flags\n\n#### font\n\n`font(name)`\n\nChange the font policy ("pico8", "bbc", "cbmII", "appleII")\n\n#### fset\n\n`fset(n, [f], v)`\n\nset values of sprite flags\n\n#### line\n\n`line(x0, y0, x1, y1, [col])`\n\ndraw line\n\n#### pal\n\n`pal(c0, c1)`\n\nSwitch the color c0 to color c1.\n\n#### palt\n\n`palt(col, t)`\n\nSet the transparency for color \'col\', where \'t\' is a boolean\n\n#### pget\n\n`pget(x, y)`\n\nGet the pixel color in x/y coordinate\n\n#### print\n\n`print (str, [x, y, [col]])`\n[Python: **unicorn_print**]\n\nDisplay a string on the screen\n\n#### pset\n\n`pset(x, y, col)`\n\nSet the pixel color with the value \'col\' in x/y coordinate\n\n#### rect\n\n`rect(x0, y0, x1, y1, [col])`\n\ndraw a rectangle\n\n#### rectfill\n\n`rectfill(x0, y0, x1, y1, [col])`\n\ndraw filled rectangle\n\n[[https://j.gifs.com/76MGDr.gif]]\n\n#### sget\n\n`sget(x, y)`\n\nget spritesheet pixel colour\n\n#### spr\n\n`spr(n, x, y, [w, h], [flip_x], [flip_y])`\n\nDraw a sprite:\n* _n_ is the sprite number\n* _x_/_y_ are the coordinate\n* _w_ and _h_ specify how many sprites wide to blit and are 1/1 values by default\n* _flip_x_ to flip horizontally the sprite\n* _flip_y_ to flip vertically the sprite\n\nColor 0 will be transparent by default (see [palt](https://github.com/Gigoteur/PX8/wiki/API-Documentation#palt)\n\n\n#### sset\n\n`sset(x, y, [col])`\n\nset spritesheet pixel colour\n\n#### sspr\n\n`sspr(sx, sy, sw, sh, dx, dy, [dw, dh], [flip_x], [flip_y])`\n\ndraw texture from spritesheet\n\n#### trigon\n\n`trigon(x1, y1, x2, y2, x3, y3, [col])`\n\ndraw trigon\n\n### Keyboard Input\n\n#### btn([i, [p]])\n\nget button i state for player p\n\n#### btnp([i, [p]])\n\nonly true when the button was not pressed the last frame; repeats every 4 frames after button held for 15 frames\n\n### Map\n\n#### map\n\n`map(cel_x, cel_y, sx, sy, cel_w, cel_h, [layer])`\n\n[Python: **spr_map**]\n\nDraw map; layers from flags; sprite 0 is empty\n\n#### mget\n\n`mget(x, y)`\n\nGet a map value\n\n#### mset\n\n`mset(x, y, v)`\n\nSet a map value\n\n### Noise\n\n#### noise\n\n`noise(x, y, z)`\n\n#### noise_set_seed\n\n`noise_set_seed(x)`\n\n### Math\n### Memory [**WIP**]\n### Mouse input [**WIP**]\n### Palettes [**WIP**]\n#### Cart Data [**WIP**]\n\n'