b'Lua Functional\n==============\n\n<img src="/doc/logo.png" align="right" width="174px" height="144px" />\n\n**Lua Fun** is a high-performance functional programming library for [Lua]\ndesigned with [LuaJIT\'s trace compiler][LuaJIT] in mind.\n\nLua Fun provides a set of more than 50 programming primitives typically\nfound in languages like Standard ML, Haskell, Erlang, JavaScript, Python and\neven Lisp. High-order functions such as ``map``, ``filter``, ``reduce``,\n``zip``, etc., make it easy to **write simple and efficient functional code**.\n\nLet\'s see an example:\n\n    > -- Functional style\n    > require "fun" ()\n    > -- calculate sum(x for x^2 in 1..n)\n    > n = 100\n    > print(reduce(operator.add, 0, map(function(x) return x^2 end, range(n))))\n    328350\n\n    > -- Object-oriented style\n    > local fun = require "fun"\n    > -- calculate sum(x for x^2 in 1..n)\n    > print(fun.range(n):map(function(x) return x^2 end):reduce(operator.add, 0))\n    328350\n\n**Lua Fun** takes full advantage of the innovative **tracing JIT compiler**\nto achieve transcendental performance on nested functional expressions.\nFunctional compositions and high-order functions can be translated into\n**efficient machine code**. Can you believe it? Just try to run the example\nabove with ``luajit -jdump`` and see what happens:\n\n    -- skip some initilization code --\n    ->LOOP:\n    0bcaffd0  movaps xmm5, xmm7\n    0bcaffd3  movaps xmm7, xmm1\n    0bcaffd6  addsd xmm7, xmm5\n    0bcaffda  ucomisd xmm7, xmm0\n    0bcaffde  jnb 0x0bca0024        ->5\n    0bcaffe4  movaps xmm5, xmm7\n    0bcaffe7  mulsd xmm5, xmm5\n    0bcaffeb  addsd xmm6, xmm5\n    0bcaffef  jmp 0x0bcaffd0        ->LOOP\n    ---- TRACE 1 stop -> loop\n\nThe functional chain above was translated by LuaJIT to (!) **one machine loop**\ncontaining just 10 CPU assembly instructions without CALL. Unbelievable!\n\nReadable? Efficient? Can your Python/Ruby/V8 do better?\n\nStatus\n------\n\n**Lua Fun** is in an early alpha stage. The library fully [documented]\n[Documentation] and covered with unit tests.\n\n[![Build Status](https://travis-ci.org/luafun/luafun.png)]\n(https://travis-ci.org/luafun/luafun)\n\nLuaJIT 2.1 alpha is recommended. The library designed in mind of fact that\n[LuaJIT traces tail-, up- and down-recursion][LuaJIT-Recursion] and has a lot of\n[byte code optimizations][LuaJIT-Optimizations]. Lua 5.1-5.3 are also\nsupported.\n\nThis is **master** (development) branch. API may be changed without any special\nnotice. Please use **stable** branch for your production deployments.\nIf you still want to use **master**, please don\'t forget to grep `git log`\nfor *Incompatible API changes* message. Thanks!\n\nPlease check out [documentation][Documentation] for more information.\n\nMisc\n----\n\n**Lua Fun** is distributed under the [MIT/X11 License] -\n(same as Lua and LuaJIT).\n\nThe library was written to use with [Tarantool] - an efficient in-memory\nstore and an asynchronous Lua application server.\n\nSee Also\n--------\n\n* [Documentation]\n* [RockSpec]\n* [RPM/DEB packages](https://packagecloud.io/rtsisyk/master)\n* lua-l@lists.lua.org\n* luajit@freelists.org\n* roman@tsisyk.com\n\n [Lua]: http://www.lua.org/\n [LuaJIT]: http://luajit.org/luajit.html\n [LuaJIT-Recursion]: http://lambda-the-ultimate.org/node/3851#comment-57679\n [LuaJIT-Optimizations]: http://wiki.luajit.org/Optimizations\n [MIT/X11 License]: http://opensource.org/licenses/MIT\n [Tarantool]: http://github.com/tarantool/tarantool\n [Getting Started]: https://luafun.github.io/getting_started.html\n [Documentation]: http://luafun.github.io/\n [RockSpec]: https://raw.github.com/luafun/luafun/master/fun-scm-1.rockspec\n\nPlease **"Star"** the project on GitHub to help it to survive! Thanks!\n\n*****\n\n**Lua Fun**. Simple, Efficient and Functional. In Lua. With JIT.\n'