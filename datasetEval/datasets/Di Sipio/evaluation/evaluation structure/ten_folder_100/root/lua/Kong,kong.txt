b'[![][kong-logo]][kong-url]\n\n[![Build Status][badge-travis-image]][badge-travis-url]\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://github.com/Kong/kong/blob/master/LICENSE)\n[![Twitter](https://img.shields.io/twitter/follow/thekonginc.svg?style=social&label=Follow)](https://twitter.com/intent/follow?screen_name=thekonginc)\n\nKong is a cloud-native, fast, scalable, and distributed Microservice\nAbstraction Layer *(also known as an API Gateway, API Middleware or in some\ncases Service Mesh)*. Made available as an open-source project in 2015, its\ncore values are high performance and extensibility.\n\nActively maintained, Kong is widely used in production at companies ranging\nfrom startups to Global 5000 as well as government organizations.\n\n[Installation](https://konghq.com/install) |\n[Documentation](https://docs.konghq.com) |\n[Forum](https://discuss.konghq.com) |\n[Blog](https://konghq.com/blog) |\nIRC (freenode): [#kong](https://webchat.freenode.net/?channels=kong) |\n[Nightly Builds][kong-nightly-master]\n\n## Summary\n\n- [**Why Kong?**](#why-kong)\n- [**Features**](#features)\n- [**Distributions**](#distributions)\n- [**Development**](#development)\n- [**Enterprise Support & Demo**](#enterprise-support--demo)\n- [**License**](#license)\n\n## Why Kong?\n\nIf you are building for the web, mobile, or IoT (Internet of Things) you will\nlikely end up needing common functionality to run your actual software. Kong\ncan help by acting as a gateway (or a sidecar) for microservices requests while\nproviding load balancing, logging, authentication, rate-limiting,\ntransformations, and more through plugins.\n\n[![][kong-benefits]][kong-url]\n\n## Features\n\n- **Cloud-Native**: Platform agnostic, Kong can run from bare metal to\n  Kubernetes.\n- **Dynamic Load Balancing**: Load balance traffic across multiple upstream\n  services.\n- **Hash-based Load Balancing**: Load balance with consistent hashing/sticky\n  sessions.\n- **Circuit-Breaker**: Intelligent tracking of unhealthy upstream services.\n- **Health Checks:** Active and passive monitoring of your upstream services.\n- **Service Discovery**: Resolve SRV records in third-party DNS resolvers like\n  Consul.\n- **Serverless**: Invoke and secure AWS Lambda or OpenWhisk functions directly\n  from Kong.\n- **WebSockets**: Communicate to your upstream services via WebSockets.\n- **gRPC**: Communicate to your gRPC services and observe your traffic with logging\n  and observability plugins\n- **OAuth2.0**: Easily add OAuth2.0 authentication to your APIs.\n- **Logging**: Log requests and responses to your system over HTTP, TCP, UDP,\n  or to disk.\n- **Security**: ACL, Bot detection, whitelist/blacklist IPs, etc...\n- **Syslog**: Logging to System log.\n- **SSL**: Setup a Specific SSL Certificate for an underlying service or API.\n- **Monitoring**: Live monitoring provides key load and performance server\n  metrics.\n- **Forward Proxy**: Make Kong connect to intermediary transparent HTTP proxies.\n- **Authentications**: HMAC, JWT, Basic, and more.\n- **Rate-limiting**: Block and throttle requests based on many variables.\n- **Transformations**: Add, remove, or manipulate HTTP requests and responses.\n- **Caching**: Cache and serve responses at the proxy layer.\n- **CLI**: Control your Kong cluster from the command line.\n- **REST API**: Kong can be operated with its RESTful API for maximum\n  flexibility.\n- **Geo-Replicated**: Configs are always up-to-date across different regions.\n- **Failure Detection & Recovery**: Kong is unaffected if one of your Cassandra\n  nodes goes down.\n- **Clustering**: All Kong nodes auto-join the cluster keeping their config\n  updated across nodes.\n- **Scalability**: Distributed by nature, Kong scales horizontally by simply\n  adding nodes.\n- **Performance**: Kong handles load with ease by scaling and using NGINX at\n  the core.\n- **Plugins**: Extendable architecture for adding functionality to Kong and\n  APIs.\n\nFor more info about plugins and integrations, you can check out the [Kong\nHub](https://docs.konghq.com/hub/).\n\n## Distributions\n\nKong comes in many shapes. While this repository contains its core\'s source\ncode, other repos are also under active development:\n\n- [Kong Docker](https://github.com/Kong/docker-kong): A Dockerfile for\n  running Kong in Docker.\n- [Kong Packages](https://github.com/Kong/kong/releases): Pre-built packages\n  for Debian, Red Hat, and OS X distributions (shipped with each release).\n- [Kong Vagrant](https://github.com/Kong/kong-vagrant): A Vagrantfile for\n  provisioning a development-ready environment for Kong.\n- [Kong Homebrew](https://github.com/Kong/homebrew-kong): Homebrew Formula\n  for Kong.\n- [Kong CloudFormation](https://github.com/Kong/kong-dist-cloudformation):\n  Kong in a 1-click deployment for AWS EC2.\n- [Kong AWS AMI](https://aws.amazon.com/marketplace/pp/B06WP4TNKL): Kong AMI on\n  the AWS Marketplace.\n- [Kong on Microsoft Azure](https://github.com/Kong/kong-dist-azure): Run Kong\n  using Azure Resource Manager.\n- [Kong on Heroku](https://github.com/heroku/heroku-kong): Deploy Kong on\n  Heroku in one click.\n- [Kong and Instaclustr](https://www.instaclustr.com/solutions/managed-cassandra-for-kong/): Let\n  Instaclustr manage your Cassandra cluster.\n- [Kubernetes Ingress Controller for Kong](https://github.com/Kong/kubernetes-ingress-controller):\n  Use Kong for Kubernetes Ingress.\n- [Nightly Builds][kong-nightly-master]: Builds of the master branch available\n  every morning at about 9AM PST.\n\n## Development\n\nIf you are planning on developing on Kong, you\'ll need a development\ninstallation. The `next` branch holds the latest unreleased source code.\n\nYou can read more about writing your own plugins in the [Plugin Development\nGuide](https://docs.konghq.com/latest/plugin-development/), or browse an\nonline version of Kong\'s source code documentation in the [Plugin Development\nKit (PDK) Reference](https://docs.konghq.com/latest/pdk/).\n\n#### Docker\n\nYou can use Docker / docker-compose and a mounted volume to develop Kong by\nfollowing the instructions on [Kong/kong-build-tools](https://github.com/Kong/kong-build-tools#developing-kong).\n\n#### Vagrant\n\nYou can use a Vagrant box running Kong and Postgres that you can find at\n[Kong/kong-vagrant](https://github.com/Kong/kong-vagrant).\n\n#### Source Install\n\nKong mostly is an OpenResty application made of Lua source files, but also\nrequires some additional third-party dependencies. We recommend installing\nthose by following the source install instructions at\nhttps://docs.konghq.com/install/source/.\n\nInstead of following the second step (Install Kong), clone this repository\nand install the latest Lua sources instead of the currently released ones:\n\n```shell\n$ git clone https://github.com/Kong/kong\n$ cd kong/\n\n# you might want to switch to the development branch. See CONTRIBUTING.md\n$ git checkout next\n\n# install the Lua sources\n$ luarocks make\n```\n\n#### Running for development\n\nCheck out the [development section](https://github.com/Kong/kong/blob/next/kong.conf.default#L244)\nof the default configuration file for properties to tweak in order to ease\nthe development process for Kong.\n\nModifying the [`lua_package_path`](https://github.com/openresty/lua-nginx-module#lua_package_path)\nand [`lua_package_cpath`](https://github.com/openresty/lua-nginx-module#lua_package_cpath)\ndirectives will allow Kong to find your custom plugin\'s source code wherever it\nmight be in your system.\n\n#### Tests\n\nInstall the development dependencies ([busted], [luacheck]) with:\n\n```shell\n$ make dev\n```\n\nKong relies on three test suites using the [busted] testing library:\n\n* Unit tests\n* Integration tests, which require Postgres and Cassandra to be up and running\n* Plugins tests, which require Postgres to be running\n\nThe first can simply be run after installing busted and running:\n\n```\n$ make test\n```\n\nHowever, the integration and plugins tests will spawn a Kong instance and\nperform their tests against it. As so, consult/edit the `spec/kong_tests.conf`\nconfiguration file to make your test instance point to your Postgres/Cassandra\nservers, depending on your needs.\n\nYou can run the integration tests (assuming **both** Postgres and Cassandra are\nrunning and configured according to `spec/kong_tests.conf`) with:\n\n```\n$ make test-integration\n```\n\nAnd the plugins tests with:\n\n```\n$ make test-plugins\n```\n\nFinally, all suites can be run at once by simply using:\n\n```\n$ make test-all\n```\n\nConsult the [run_tests.sh](.ci/run_tests.sh) script for a more advanced example\nusage of the tests suites and the Makefile.\n\nFinally, a very useful tool in Lua development (as with many other dynamic\nlanguages) is performing static linting of your code. You can use [luacheck]\n\\(installed with `make dev`\\) for this:\n\n```\n$ make lint\n```\n\n#### Makefile\n\nWhen developing, you can use the `Makefile` for doing the following operations:\n\n| Name               | Description                                            |\n| ------------------:| -------------------------------------------------------|\n| `install`          | Install the Kong luarock globally                      |\n| `dev`              | Install development dependencies                       |\n| `lint`             | Lint Lua files in `kong/` and `spec/`                  |\n| `test`             | Run the unit tests suite                               |\n| `test-integration` | Run the integration tests suite                        |\n| `test-plugins`     | Run the plugins test suite                             |\n| `test-all`         | Run all unit + integration + plugins tests at once     |\n\n## Enterprise Support & Demo\n\nIf you are working in a large organization you should learn more about [Kong\nEnterprise](https://konghq.com/kong-enterprise-edition/).\n\n## License\n\n```\nCopyright 2016-2019 Kong Inc.\n\nLicensed under the Apache License, Version 2.0 (the "License");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an "AS IS" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n[kong-url]: https://konghq.com/\n[kong-logo]: https://konghq.com/wp-content/uploads/2018/05/kong-logo-github-readme.png\n[kong-benefits]: https://konghq.com/wp-content/uploads/2018/05/kong-benefits-github-readme.png\n[kong-nightly-master]: https://bintray.com/kong/kong-nightly/master\n[badge-travis-url]: https://travis-ci.org/Kong/kong/branches\n[badge-travis-image]: https://travis-ci.org/Kong/kong.svg?branch=master\n\n[busted]: https://github.com/Olivine-Labs/busted\n[luacheck]: https://github.com/mpeterv/luacheck\n'