b'MoonSharp       [![Build Status](https://travis-ci.org/xanathar/moonsharp.svg?branch=master)](https://travis-ci.org/xanathar/moonsharp) [![Build Status](https://img.shields.io/nuget/v/MoonSharp.svg)](https://www.nuget.org/packages/MoonSharp/)\n=========\nhttp://www.moonsharp.org   \n\n\n\nA complete Lua solution written entirely in C# for the .NET, Mono, Xamarin and Unity3D platforms.\n\nFeatures:\n* 99% compatible with Lua 5.2 (with the only unsupported feature being weak tables support) \n* Support for metalua style anonymous functions (lambda-style)\n* Easy to use API\n* **Debugger** support for Visual Studio Code (PCL targets not supported)\n* Remote debugger accessible with a web browser and Flash (PCL targets not supported)\n* Runs on .NET 3.5, .NET 4.x, .NET Core, Mono, Xamarin and Unity3D\n* Runs on Ahead-of-time platforms like iOS\n* Runs on IL2CPP converted code\n* Runs on platforms requiring a .NET 4.x portable class library (e.g. Windows Phone)\n* No external dependencies, implemented in as few targets as possible\n* Easy and performant interop with CLR objects, with runtime code generation where supported\n* Interop with methods, extension methods, overloads, fields, properties and indexers supported\n* Support for the complete Lua standard library with very few exceptions (mostly located on the \'debug\' module) and a few extensions (in the string library, mostly)\n* Async methods for .NET 4.x targets\n* Supports dumping/loading bytecode for obfuscation and quicker parsing at runtime\n* An embedded JSON parser (with no dependencies) to convert between JSON and Lua tables\n* Easy opt-out of Lua standard library modules to sandbox what scripts can access\n* Easy to use error handling (script errors are exceptions)\n* Support for coroutines, including invocation of coroutines as C# iterators \n* REPL interpreter, plus facilities to easily implement your own REPL in few lines of code\n* Complete XML help, and walkthroughs on http://www.moonsharp.org\n\nFor highlights on differences between MoonSharp and standard Lua, see http://www.moonsharp.org/moonluadifferences.html\n\nPlease see http://www.moonsharp.org for downloads, infos, tutorials, etc.\n\n\n**License**\n\nThe program and libraries are released under a 3-clause BSD license - see the license section.\n\nParts of the string library are based on the KopiLua project (https://github.com/NLua/KopiLua).\nDebugger icons are from the Eclipse project (https://www.eclipse.org/).\n\n\n**Usage**\n\nUse of the library is easy as:\n\n```C#\ndouble MoonSharpFactorial()\n{\n\tstring script = @"    \n\t\t-- defines a factorial function\n\t\tfunction fact (n)\n\t\t\tif (n == 0) then\n\t\t\t\treturn 1\n\t\t\telse\n\t\t\t\treturn n*fact(n - 1)\n\t\t\tend\n\t\tend\n\n\treturn fact(5)";\n\n\tDynValue res = Script.RunString(script);\n\treturn res.Number;\n}\n```\n\nFor more in-depth tutorials, samples, etc. please refer to http://www.moonsharp.org/getting_started.html\n\n\n\n\n\n\n\n\n'