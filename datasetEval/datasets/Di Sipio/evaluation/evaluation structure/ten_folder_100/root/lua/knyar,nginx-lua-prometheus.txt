b'[![Build Status](https://secure.travis-ci.org/knyar/nginx-lua-prometheus.svg?branch=master)](http://travis-ci.org/knyar/nginx-lua-prometheus?branch=master)\n[![Coverage Status](https://coveralls.io/repos/github/knyar/nginx-lua-prometheus/badge.svg?branch=master)](https://coveralls.io/github/knyar/nginx-lua-prometheus?branch=master)\n\n# Prometheus metric library for Nginx\n\nThis is a Lua library that can be used with Nginx to keep track of metrics and\nexpose them on a separate web page to be pulled by\n[Prometheus](https://prometheus.io).\n\n## Installation\n\nYou need to install nginx package with lua support (`libnginx-mod-http-lua` on\nnewer Debian versions, or `nginx-extras` on older ones). The library file,\n`prometheus.lua`, needs to be available in `LUA_PATH`. If this is the only Lua\nlibrary you use, you can just point `lua_package_path` to the directory with\nthis git repo checked out (see example below).\n\nOpenResty users will find this library in [opm](https://opm.openresty.org/). It\nis also available via\n[luarocks](https://luarocks.org/modules/knyar/nginx-lua-prometheus).\n\n## Quick start guide\n\nTo track request latency broken down by server name and request count\nbroken down by server name and status, add the following to the `http` section\nof `nginx.conf`:\n\n```\nlua_shared_dict prometheus_metrics 10M;\nlua_package_path "/path/to/nginx-lua-prometheus/?.lua";\ninit_by_lua \'\n  prometheus = require("prometheus").init("prometheus_metrics")\n  metric_requests = prometheus:counter(\n    "nginx_http_requests_total", "Number of HTTP requests", {"host", "status"})\n  metric_latency = prometheus:histogram(\n    "nginx_http_request_duration_seconds", "HTTP request latency", {"host"})\n  metric_connections = prometheus:gauge(\n    "nginx_http_connections", "Number of HTTP connections", {"state"})\n\';\nlog_by_lua \'\n  metric_requests:inc(1, {ngx.var.server_name, ngx.var.status})\n  metric_latency:observe(tonumber(ngx.var.request_time), {ngx.var.server_name})\n\';\n```\n\nThis:\n* configures a shared dictionary for your metrics called `prometheus_metrics`\n  with a 10MB size limit;\n* registers a counter called `nginx_http_requests_total` with two labels:\n  `host` and `status`;\n* registers a histogram called `nginx_http_request_duration_seconds` with one\n  label `host`;\n* registers a gauge called `nginx_http_connections` with one label `state`;\n* on each HTTP request measures its latency, recording it in the histogram and\n  increments the counter, setting current server name as the `host` label and\n  HTTP status code as the `status` label.\n\nLast step is to configure a separate server that will expose the metrics.\nPlease make sure to only make it reachable from your Prometheus server:\n\n```\nserver {\n  listen 9145;\n  allow 192.168.0.0/16;\n  deny all;\n  location /metrics {\n    content_by_lua \'\n      metric_connections:set(ngx.var.connections_reading, {"reading"})\n      metric_connections:set(ngx.var.connections_waiting, {"waiting"})\n      metric_connections:set(ngx.var.connections_writing, {"writing"})\n      prometheus:collect()\n    \';\n  }\n}\n```\n\nMetrics will be available at `http://your.nginx:9145/metrics`. Note that the\ngauge metric in this example contains values obtained from nginx global state,\nso they get set immediately before metrics are returned to the client.\n\nIf you experience problems indicating that nginx doesn\'t know how to interpret\nlua-commands and you use an external module for nginx-lua-support (e.g. the\n`libnginx-mod-http-lua` package on Debian) try adding\n\n    load_module modules/ndk_http_module.so;\n    load_module modules/ngx_http_lua_module.so;\n\nto the beginning of `nginx.conf` to ensure the modules are loaded.\n\n\n## API reference\n\n### init()\n\n**syntax:** require("prometheus").init(*dict_name*, [*prefix*])\n\nInitializes the module. This should be called once from the\n[init_by_lua](https://github.com/openresty/lua-nginx-module#init_by_lua)\nsection in nginx configuration.\n\n* `dict_name` is the name of the nginx shared dictionary which will be used to\n  store all metrics. Defaults to `prometheus_metrics` if not specified.\n* `prefix` is an optional string which will be prepended to metric names on output\n\n\nReturns a `prometheus` object that should be used to register metrics.\n\nExample:\n```\ninit_by_lua \'\n  prometheus = require("prometheus").init("prometheus_metrics")\n\';\n```\n\n### prometheus:counter()\n\n**syntax:** prometheus:counter(*name*, *description*, *label_names*)\n\nRegisters a counter. Should be called once from the\n[init_by_lua](https://github.com/openresty/lua-nginx-module#init_by_lua)\nsection.\n\n* `name` is the name of the metric.\n* `description` is the text description that will be presented to Prometheus\n  along with the metric. Optional (pass `nil` if you still need to define\n  label names).\n* `label_names` is an array of label names for the metric. Optional.\n\n[Naming section](https://prometheus.io/docs/practices/naming/) of Prometheus\ndocumentation provides good guidelines on choosing metric and label names.\n\nReturns a `counter` object that can later be incremented.\n\nExample:\n```\ninit_by_lua \'\n  prometheus = require("prometheus").init("prometheus_metrics")\n  metric_bytes = prometheus:counter(\n    "nginx_http_request_size_bytes", "Total size of incoming requests")\n  metric_requests = prometheus:counter(\n    "nginx_http_requests_total", "Number of HTTP requests", {"host", "status"})\n\';\n```\n\n### prometheus:gauge()\n\n**syntax:** prometheus:gauge(*name*, *description*, *label_names*)\n\nRegisters a gauge. Should be called once from the\n[init_by_lua](https://github.com/openresty/lua-nginx-module#init_by_lua)\nsection.\n\n* `name` is the name of the metric.\n* `description` is the text description that will be presented to Prometheus\n  along with the metric. Optional (pass `nil` if you still need to define\n  label names).\n* `label_names` is an array of label names for the metric. Optional.\n\nReturns a `gauge` object that can later be set.\n\nExample:\n```\ninit_by_lua \'\n  prometheus = require("prometheus").init("prometheus_metrics")\n  metric_connections = prometheus:gauge(\n    "nginx_http_connections", "Number of HTTP connections", {"state"})\n\';\n```\n\n### prometheus:histogram()\n\n**syntax:** prometheus:histogram(*name*, *description*, *label_names*,\n  *buckets*)\n\nRegisters a histogram. Should be called once from the\n[init_by_lua](https://github.com/openresty/lua-nginx-module#init_by_lua)\nsection.\n\n* `name` is the name of the metric.\n* `description` is the text description. Optional.\n* `label_names` is an array of label names for the metric. Optional.\n* `buckets` is an array of numbers defining bucket boundaries. Optional,\n  defaults to 20 latency buckets covering a range from 5ms to 10s (in seconds).\n\nReturns a `histogram` object that can later be used to record samples.\n\nExample:\n```\ninit_by_lua \'\n  prometheus = require("prometheus").init("prometheus_metrics")\n  metric_latency = prometheus:histogram(\n    "nginx_http_request_duration_seconds", "HTTP request latency", {"host"})\n  metric_response_sizes = prometheus:histogram(\n    "nginx_http_response_size_bytes", "Size of HTTP responses", nil,\n    {10,100,1000,10000,100000,1000000})\n\';\n```\n\n### prometheus:collect()\n\n**syntax:** prometheus:collect()\n\nPresents all metrics in a text format compatible with Prometheus. This should be\ncalled in\n[content_by_lua](https://github.com/openresty/lua-nginx-module#content_by_lua)\nto expose the metrics on a separate HTTP page.\n\nExample:\n```\nlocation /metrics {\n  content_by_lua \'prometheus:collect()\';\n  allow 192.168.0.0/16;\n  deny all;\n}\n```\n\n### prometheus:metric_data()\n\n**syntax:** prometheus:metric_data()\n\nReturns metric data as an array of strings.\n\n### counter:inc()\n\n**syntax:** counter:inc(*value*, *label_values*)\n\nIncrements a previously registered counter. This is usually called from\n[log_by_lua](https://github.com/openresty/lua-nginx-module#log_by_lua)\nglobally or per server/location.\n\n* `value` is a value that should be added to the counter. Defaults to 1.\n* `label_values` is an array of label values.\n\nThe number of label values should match the number of label names defined when\nthe counter was registered using `prometheus:counter()`. No label values should\nbe provided for counters with no labels. Non-printable characters will be\nstripped from label values.\n\nExample:\n```\nlog_by_lua \'\n  metric_bytes:inc(tonumber(ngx.var.request_length))\n  metric_requests:inc(1, {ngx.var.server_name, ngx.var.status})\n\';\n```\n\n### counter:del()\n\n**syntax:** counter:del(*label_values*)\n\nDelete a previously registered counter. This is usually called when you don\'t \nneed to observe such counter (or a metric with specific label values in this \ncounter) any more. If this counter has labels, you have to pass `label_values` \nto delete the specific metric of this counter. If you want to delete all the \nmetrics of a counter with labels, you should call `Counter:reset()`.\n\n* `label_values` is an array of label values.\n\nThe number of label values should match the number of label names defined when\nthe counter was registered using `prometheus:counter()`. No label values should\nbe provided for counters with no labels. Non-printable characters will be\nstripped from label values.\n\n### counter:reset()\n\n**syntax:** counter:reset()\n\nDelete all metrics for a previously registered counter. If this counter have no \nlabels, it is just the same as `Counter:del()` function. If this counter have labels, \nit will delete all the metrics with different label values.\n\n### gauge:set()\n\n**syntax:** gauge:set(*value*, *label_values*)\n\nSets the current value of a previously registered gauge. This could be called\nfrom [log_by_lua](https://github.com/openresty/lua-nginx-module#log_by_lua)\nglobally or per server/location to modify a gauge on each request, or from\n[content_by_lua](https://github.com/openresty/lua-nginx-module#content_by_lua)\njust before `prometheus::collect()` to return a real-time value.\n\n* `value` is a value that the gauge should be set to. Required.\n* `label_values` is an array of label values.\n\n### gauge:inc()\n\n**syntax:** gauge:inc(*value*, *label_values*)\n\nIncrements or decrements a previously registered gauge. This is usually called \nwhen you want to observe the real-time value of a metric that can both be \nincreased and decreased.\n\n* `value` is a value that should be added to the gauge. It could be a negative \nvalue when you need to decrease the value of the gauge. Defaults to 1.\n* `label_values` is an array of label values.\n\nThe number of label values should match the number of label names defined when\nthe gauge was registered using `prometheus:gauge()`. No label values should\nbe provided for gauges with no labels. Non-printable characters will be\nstripped from label values.\n\n### gauge:del()\n\n**syntax:** gauge:del(*label_values*)\n\nDelete a previously registered gauge. This is usually called when you don\'t \nneed to observe such gauge (or a metric with specific label values in this \ngauge) any more. If this gauge has labels, you have to pass `label_values` \nto delete the specific metric of this gauge. If you want to delete all the \nmetrics of a gauge with labels, you should call `Gauge:reset()`.\n\n* `label_values` is an array of label values.\n\nThe number of label values should match the number of label names defined when\nthe gauge was registered using `prometheus:gauge()`. No label values should\nbe provided for gauges with no labels. Non-printable characters will be\nstripped from label values.\n\n### gauge:reset()\n\n**syntax:** gauge:reset()\n\nDelete all metrics for a previously registered gauge. If this gauge have no \nlabels, it is just the same as `Gauge:del()` function. If this gauge have labels, \nit will delete all the metrics with different label values.\n\n### histogram:observe()\n\n**syntax:** histogram:observe(*value*, *label_values*)\n\nRecords a value in a previously registered histogram. Usually called from\n[log_by_lua](https://github.com/openresty/lua-nginx-module#log_by_lua)\nglobally or per server/location.\n\n* `value` is a value that should be recorded. Required.\n* `label_values` is an array of label values.\n\nExample:\n```\nlog_by_lua \'\n  metric_latency:observe(tonumber(ngx.var.request_time), {ngx.var.server_name})\n  metric_response_sizes:observe(tonumber(ngx.var.bytes_sent))\n\';\n```\n\n### Built-in metrics\n\nThe module increments the `nginx_metric_errors_total` metric if it encounters\nan error (for example, when `lua_shared_dict` becomes full). You might want\nto configure an alert on that metric.\n\n## Caveats\n\n### Large number of metrics\n\nPlease keep in mind that all metrics stored by this library are kept in a\nsingle shared dictionary (`lua_shared_dict`). While exposing metrics the module\nhas to list all dictionary keys, which has serious performance implications for\ndictionaries with large number of keys (in this case this means large number\nof metrics OR metrics with high label cardinality). Listing the keys has to\nlock the dictionary, which blocks all threads that try to access it (i.e.\npotentially all nginx worker threads).\n\nThere is no elegant solution to this issue (besides keeping metrics in a\nseparate storage system external to nginx), so for latency-critical servers you\nmight want to keep the number of metrics (and distinct metric label values) to\na minimum.\n\n### Usage in stream module\n\nFor now, there is no way to share a dictionary between HTTP and Stream modules\nin Nginx. If you are using this library to collect metrics from stream module,\nyou will need to configure a separate endpoint to return them. Here\'s an\nexample.\n\n```\nserver {\n  listen 9145;\n  content_by_lua \'\n    local sock = assert(ngx.req.socket(true))\n    local data = sock:receive()\n    local location = "GET /metrics"\n    if string.sub(data, 1, string.len(location)) == location then\n      ngx.say("HTTP/1.1 200 OK")\n      ngx.say("Content-Type: text/plain")\n      ngx.say("")\n      ngx.say(table.concat(prometheus:metric_data(), ""))\n    else\n      ngx.say("HTTP/1.1 404 Not Found")\n    end\n  \';\n  }\n```\n\n## Development\n\n### Install dependencies for testing\n\n- `luarocks install luacheck`\n- `luarocks install luaunit`\n\n### Run tests\n\n- `luacheck --globals ngx -- prometheus.lua`\n- `lua prometheus_test.lua`\n\n### Releasing new version\n\n- update version in the `dist.ini`\n- rename `.rockspec` file and update version inside it\n- commit changes\n- push to luarocks: `luarocks upload nginx-lua-prometheus-0.20181120-1.rockspec`\n- upload to OPM: `opm build && opm upload`\n- create a new Git tag: `git tag 0.XXXXXXXX-X && git push origin 0.XXXXXXXX-X`\n\n## Credits\n\n- Created and maintained by Anton Tolchanov (@knyar)\n- Metrix prefix support contributed by david birdsong (@davidbirdsong)\n- Gauge support contributed by Cosmo Petrich (@cosmopetrich)\n\n## License\n\nLicensed under MIT license.\n'