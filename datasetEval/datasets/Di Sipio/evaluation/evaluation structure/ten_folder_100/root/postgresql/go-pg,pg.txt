b'# PostgreSQL client and ORM for Golang\n\n[![Build Status](https://travis-ci.org/go-pg/pg.svg?branch=master)](https://travis-ci.org/go-pg/pg)\n[![GoDoc](https://godoc.org/github.com/go-pg/pg?status.svg)](https://godoc.org/github.com/go-pg/pg)\n\n## Features\n\n- Basic types: integers, floats, string, bool, time.Time, net.IP, net.IPNet.\n- sql.NullBool, sql.NullString, sql.NullInt64, sql.NullFloat64 and [pg.NullTime](http://godoc.org/github.com/go-pg/pg#NullTime).\n- [sql.Scanner](http://golang.org/pkg/database/sql/#Scanner) and [sql/driver.Valuer](http://golang.org/pkg/database/sql/driver/#Valuer) interfaces.\n- Structs, maps and arrays are marshalled as JSON by default.\n- PostgreSQL multidimensional Arrays using [array tag](https://godoc.org/github.com/go-pg/pg#example-DB-Model-PostgresArrayStructTag) and [Array wrapper](https://godoc.org/github.com/go-pg/pg#example-Array).\n- Hstore using [hstore tag](https://godoc.org/github.com/go-pg/pg#example-DB-Model-HstoreStructTag) and [Hstore wrapper](https://godoc.org/github.com/go-pg/pg#example-Hstore).\n- [Composite types](https://godoc.org/github.com/go-pg/pg#example-DB-Model-CompositeType).\n- All struct fields are nullable by default and zero values (empty string, 0, zero time, empty map or slice, nil ptr) are marshalled as SQL `NULL`. `pg:",notnull"` is used to add SQL `NOT NULL` constraint and `pg:",use_zero"` to allow Go zero values.\n- [Transactions](http://godoc.org/github.com/go-pg/pg#example-DB-Begin).\n- [Prepared statements](http://godoc.org/github.com/go-pg/pg#example-DB-Prepare).\n- [Notifications](http://godoc.org/github.com/go-pg/pg#example-Listener) using `LISTEN` and `NOTIFY`.\n- [Copying data](http://godoc.org/github.com/go-pg/pg#example-DB-CopyFrom) using `COPY FROM` and `COPY TO`.\n- [Timeouts](http://godoc.org/github.com/go-pg/pg#Options) and canceling queries using context.Context.\n- Automatic connection pooling with [circuit breaker](https://en.wikipedia.org/wiki/Circuit_breaker_design_pattern) support.\n- Queries retries on network errors.\n- Working with models using [ORM](https://godoc.org/github.com/go-pg/pg#example-DB-Model) and [SQL](https://godoc.org/github.com/go-pg/pg#example-DB-Query).\n- Scanning variables using [ORM](https://godoc.org/github.com/go-pg/pg#example-DB-Select-SomeColumnsIntoVars) and [SQL](https://godoc.org/github.com/go-pg/pg#example-Scan).\n- [SelectOrInsert](https://godoc.org/github.com/go-pg/pg#example-DB-Insert-SelectOrInsert) using on-conflict.\n- [INSERT ... ON CONFLICT DO UPDATE](https://godoc.org/github.com/go-pg/pg#example-DB-Insert-OnConflictDoUpdate) using ORM.\n- Bulk/batch [inserts](https://godoc.org/github.com/go-pg/pg#example-DB-Insert-BulkInsert), [updates](https://godoc.org/github.com/go-pg/pg#example-DB-Update-BulkUpdate), and [deletes](https://godoc.org/github.com/go-pg/pg#example-DB-Delete-BulkDelete).\n- Common table expressions using [WITH](https://godoc.org/github.com/go-pg/pg#example-DB-Select-With) and [WrapWith](https://godoc.org/github.com/go-pg/pg#example-DB-Select-WrapWith).\n- [CountEstimate](https://godoc.org/github.com/go-pg/pg#example-DB-Model-CountEstimate) using `EXPLAIN` to get [estimated number of matching rows](https://wiki.postgresql.org/wiki/Count_estimate).\n- ORM supports [has one](https://godoc.org/github.com/go-pg/pg#example-DB-Model-HasOne), [belongs to](https://godoc.org/github.com/go-pg/pg#example-DB-Model-BelongsTo), [has many](https://godoc.org/github.com/go-pg/pg#example-DB-Model-HasMany), and [many to many](https://godoc.org/github.com/go-pg/pg#example-DB-Model-ManyToMany) with composite/multi-column primary keys.\n- [Soft deletes](https://godoc.org/github.com/go-pg/pg#example-DB-Model-SoftDelete).\n- [Creating tables from structs](https://godoc.org/github.com/go-pg/pg#example-DB-CreateTable).\n- [ForEach](https://godoc.org/github.com/go-pg/pg#example-DB-Model-ForEach) that calls a function for each row returned by the query without loading all rows into the memory.\n- Works with PgBouncer in transaction pooling mode.\n\n## Ecosystem\n\n- Migrations by [vmihailenco](https://github.com/go-pg/migrations) and [robinjoseph08](https://github.com/robinjoseph08/go-pg-migrations).\n- [Sharding](https://github.com/go-pg/sharding).\n- [Model generator from SQL tables](https://github.com/dizzyfool/genna).\n- [urlstruct](https://github.com/go-pg/urlstruct) to decode `url.Values` into structs.\n\n## Get Started\n\ngo-pg requires a Go version with [Modules](https://github.com/golang/go/wiki/Modules) support and uses import versioning. So please make sure to initialize a Go module before installing go-pg:\n\n```shell\ngo get github.com/go-pg/pg/v9\n```\n\n- [Wiki](https://github.com/go-pg/pg/wiki)\n- [API docs](http://godoc.org/github.com/go-pg/pg)\n- [Examples](http://godoc.org/github.com/go-pg/pg#pkg-examples)\n\n## Look & Feel\n\n```go\npackage pg_test\n\nimport (\n    "fmt"\n\n    "github.com/go-pg/pg/v9"\n    "github.com/go-pg/pg/v9/orm"\n)\n\ntype User struct {\n    Id     int64\n    Name   string\n    Emails []string\n}\n\nfunc (u User) String() string {\n    return fmt.Sprintf("User<%d %s %v>", u.Id, u.Name, u.Emails)\n}\n\ntype Story struct {\n    Id       int64\n    Title    string\n    AuthorId int64\n    Author   *User\n}\n\nfunc (s Story) String() string {\n    return fmt.Sprintf("Story<%d %s %s>", s.Id, s.Title, s.Author)\n}\n\nfunc ExampleDB_Model() {\n    db := pg.Connect(&pg.Options{\n        User: "postgres",\n    })\n    defer db.Close()\n\n    err := createSchema(db)\n    if err != nil {\n        panic(err)\n    }\n\n    user1 := &User{\n        Name:   "admin",\n        Emails: []string{"admin1@admin", "admin2@admin"},\n    }\n    err = db.Insert(user1)\n    if err != nil {\n        panic(err)\n    }\n\n    err = db.Insert(&User{\n        Name:   "root",\n        Emails: []string{"root1@root", "root2@root"},\n    })\n    if err != nil {\n        panic(err)\n    }\n\n    story1 := &Story{\n        Title:    "Cool story",\n        AuthorId: user1.Id,\n    }\n    err = db.Insert(story1)\n    if err != nil {\n        panic(err)\n    }\n\n    // Select user by primary key.\n    user := &User{Id: user1.Id}\n    err = db.Select(user)\n    if err != nil {\n        panic(err)\n    }\n\n    // Select all users.\n    var users []User\n    err = db.Model(&users).Select()\n    if err != nil {\n        panic(err)\n    }\n\n    // Select story and associated author in one query.\n    story := new(Story)\n    err = db.Model(story).\n        Relation("Author").\n        Where("story.id = ?", story1.Id).\n        Select()\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(user)\n    fmt.Println(users)\n    fmt.Println(story)\n    // Output: User<1 admin [admin1@admin admin2@admin]>\n    // [User<1 admin [admin1@admin admin2@admin]> User<2 root [root1@root root2@root]>]\n    // Story<1 Cool story User<1 admin [admin1@admin admin2@admin]>>\n}\n\nfunc createSchema(db *pg.DB) error {\n    for _, model := range []interface{}{(*User)(nil), (*Story)(nil)} {\n        err := db.CreateTable(model, &orm.CreateTableOptions{\n            Temp: true,\n        })\n        if err != nil {\n            return err\n        }\n    }\n    return nil\n}\n```\n\n## See also\n\n- [Golang msgpack](https://github.com/vmihailenco/msgpack)\n- [Golang message task queue](https://github.com/vmihailenco/taskq)\n'