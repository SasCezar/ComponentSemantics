b'# pg_flame [![Version](https://img.shields.io/badge/version-v1.1-blue.svg)](https://github.com/mgartner/pg_flame/releases) [![Build Status](https://travis-ci.com/mgartner/pg_flame.svg?branch=master)](https://travis-ci.com/mgartner/pg_flame)\n\nA flamegraph generator for Postgres `EXPLAIN ANALYZE` output.\n\n<a href="https://mgartner.github.io/pg_flame/flamegraph.html">\n  <img width="700" src="https://user-images.githubusercontent.com/1128750/67738754-16f0c300-f9cd-11e9-8fc2-6acc6f288841.png">\n</a>\n\n## Demo\n\nTry the demo [here](https://mgartner.github.io/pg_flame/flamegraph.html).\n\n## Installation\n\n### Download pre-compiled binary\n\nDownload one of the compiled binaries [in the releases\ntab](https://github.com/mgartner/pg_flame/releases). Once downloaded, move\n`pg_flame` into your `$PATH`.\n\n### Docker\n\nAlternatively, if you\'d like to use Docker to build the program, you can.\n\n```\n$ git clone https://github.com/mgartner/pg_flame.git\n$ cd pg_flame\n$ docker build --tag \'pg_flame\' .\n```\n\n### Build from source\n\nIf you\'d like to build a binary from the source code, run the following\ncommands. Note that compiling requires Go version 1.13+.\n\n```\n$ git clone https://github.com/mgartner/pg_flame.git\n$ cd pg_flame\n$ go build\n```\n\nA `pg_flame` binary will be created that you can place in your `$PATH`.\n\n## Usage\n\nThe `pg_flame` program reads a JSON query plan from standard input and writes\nthe flamegraph HTML to standard ouput. Therefore you can pipe and direct input\nand output however you desire.\n\n### Example: One-step\n\n```bash\n$ psql dbname -qAtc \'EXPLAIN (ANALYZE, BUFFERS, FORMAT JSON) SELECT id FROM users\' \\\n    | pg_flame \\\n    > flamegraph.html \\\n    && open flamegraph.html\n```\n\n### Example: Multi-step with SQL file\n\nCreate a SQL file with the `EXPLAIN ANALYZE` query.\n\n```sql\n-- query.sql\nEXPLAIN (ANALYZE, BUFFERS, FORMAT JSON)\nSELECT id\nFROM users\n```\n\nThen run the query and save the JSON to a file.\n\n```bash\n$ psql dbname -qAtf query.sql > plan.json\n```\n\nFinally, generate the flamegraph HTML.\n\n```\n$ cat plan.json | pg_flame > flamegraph.html\n```\n\n### Example: Docker\n\nIf you\'ve followed the Docker installation steps above, you can pipe query plan JSON to a container and save the output HTML.\n\n```\n$ psql dbname -qAtc \'EXPLAIN (ANALYZE, BUFFERS, FORMAT JSON) SELECT id FROM users\' \\\n    | docker run -i pg_flame \\\n    > flamegraph.html\n```\n\n## Background\n\n[Flamegraphs](http://www.brendangregg.com/flamegraphs.html) were invented by\nBrendan Gregg to visualize CPU consumption per code-path of profiled software.\nThey are useful visualization tools in many types of performance\ninvestigations. Flamegraphs have been used to visualize Oracle database\n[query\nplans](https://blog.tanelpoder.com/posts/visualizing-sql-plan-execution-time-with-flamegraphs/)\nand [query\nexecutions](https://externaltable.blogspot.com/2014/05/flame-graphs-for-oracle.html)\n, proving useful for debugging slow database queries.\n\nPg_flame is in extension of that work for Postgres query plans. It generates a\nvisual hierarchy of query plans. This visualization identifies the relative\ntime of each part of a query plan.\n\nThis tool relies on the\n[`spiermar/d3-flame-graph`](https://github.com/spiermar/d3-flame-graph) plugin to\ngenerate the flamegraph.\n'