b'# postgresqltuner.pl\n\n[![Build Status](https://travis-ci.org/jfcoz/postgresqltuner.svg?branch=master)](https://travis-ci.org/jfcoz/postgresqltuner)\n[![Donate](https://liberapay.com/assets/widgets/donate.svg)](https://liberapay.com/CoCoZ/donate)\n\n`postgresqltuner.pl` analyses your PostgreSQL instance and produces a report, giving hints.  It is inspired by [mysqltuner.pl](https://github.com/major/MySQLTuner-perl)\n\n## Demo\n\nHere is a sample output:\n\n~~~\npostgresqltuner.pl version 1.0.1\nChecking if OS commands are available on /var/run/postgresql...\n[OK]      I can run OS commands\nConnecting to /var/run/postgresql:5432 database template1 with user postgres...\n[OK]      The user acount used for reporting has superuser rights on this PostgreSQL instance\n=====  OS information  =====\n[INFO]    OS: linux Version: 4.9.0 Arch: x86_64-linux-gnu-thread-multi\n[INFO]    OS total memory: 94.36 GB\n[OK]      vm.overcommit_memory is good: no memory overcommitment\n[INFO]    Running (probably) directly on a physical machine\n[INFO]    Currently used I/O scheduler(s): mq-deadline\n=====  General instance informations  =====\n-----  Version  -----\n[OK]      You are using the latest major version (11.5 (Debian 11.5-1+deb10u1)) of PostreSQL\n-----  Uptime  -----\n[INFO]    Service uptime:  01h 41m 13s\n[WARN]    Uptime less than 1 day.  My report may be inaccurate\n-----  Databases  -----\n[INFO]    Database count (except templates): 3\n[INFO]    Database list (except templates): postgres wikistats adrenalib\n-----  Extensions  -----\n[INFO]    Number of activated extensions: 1\n[INFO]    Activated extensions: plpgsql\n[WARN]    Extension pg_stat_statements is disabled in database template1\n-----  Users  -----\n[OK]      No user account will expire in less than 7 days\n[OK]      No user with password=username\n[OK]      Password encryption enabled\n-----  Connection information  -----\n[INFO]    max_connections: 20\n[INFO]    Current used connections: 8 (40.00%)\n[INFO]    2 connections are reserved for super user (10.00%)\n[INFO]    Average connection age:  01h 08m 18s\n-----  Memory usage  -----\n[INFO]    Configured work_mem: 128.00 MB\n[INFO]    Using an average ratio of work_mem buffers by connection of 150% (use --wmp to change it)\n[INFO]    Total work_mem (per connection): 192.00 MB\n[INFO]    shared_buffers: 40.00 GB\n[INFO]    Track activity reserved size: 0.00 B\n[INFO]    maintenance_work_mem=2.00 GB\n[INFO]    Max memory usage:\n\t\t  shared_buffers (40.00 GB)\n\t\t+ max_connections * work_mem * average_work_mem_buffers_per_connection (20 * 128.00 MB * 150 / 100 = 3.75 GB)\n\t\t+ autovacuum_max_workers * maintenance_work_mem (2 * 2.00 GB = 4.00 GB)\n\t\t+ track activity size (0.00 B)\n\t\t= 47.75 GB\n[INFO]    effective_cache_size: 85.00 GB\n[INFO]    Cumulated size of all databases: 2.17 TB\n[INFO]    PostgreSQL maximum amount of memory used: 50.60% of system RAM\n[WARN]    PostgreSQL will not use more than 60% of the amount of RAM.  On a dedicated host you may increase PostgreSQL shared_buffers, as it may improve performances.\n[INFO]    max memory+effective_cache_size (less shared_buffers) is 98.29% of the amount of RAM\n[WARN]    The sum of max_memory and effective_cache_size is too high, the planner may create bad plans because the system buffercache will probably be smaller than expected, especially if the machine is NOT dedicated to PostgreSQL\n-----  Huge Pages  -----\n[OK]      huge_pages enabled in PostgreSQL\n[INFO]    Hugepagesize is 2048 kB\n[INFO]    HugePages_Total 21000 pages\n[INFO]    HugePages_Free 18004 pages\n[INFO]    Suggested number of Huge Pages: 21001 (Consumption peak: 43009080 / Huge Page size: 2048)\n-----  Logs  -----\n[OK]      log_hostname is off: no reverse DNS lookup latency\n[WARN]    Log of long queries deactivated.  It will be more difficult to optimize query performance\n[OK]      log_statement=none\n-----  Two-phase commit  -----\n[OK]      Currently no two-phase commit transactions\n-----  Autovacuum  -----\n[OK]      autovacuum is activated.\n[INFO]    autovacuum_max_workers: 2\n-----  Checkpoint  -----\n[OK]      checkpoint_completion_target(0.9) OK\n-----  Disk access  -----\n[BAD]     fsync is off.  You may lose data after a crash, DANGER!\n[OK]      synchronize_seqscans is on\n-----  WAL  -----\n-----  Planner  -----\n[OK]      I/O cost settings are set at their default values\n[BAD]     Some plan features are disabled: enable_partitionwise_aggregate,enable_partitionwise_join\n=====  Database information for database template1  =====\n-----  Database size  -----\n[INFO]    Database template1 total size: 8.02 MB\n[INFO]    Database template1 indexes size: 4.91 MB (61.21%)\n[INFO]    Database template1 indexes size: 3.11 MB (38.79%)\n-----  Tablespace location  -----\n[OK]      No tablespace in PGDATA\n-----  Shared buffer hit rate  -----\n[INFO]    shared_buffer_heap_hit_rate: 99.98%\n[INFO]    shared_buffer_toast_hit_rate: 97.31%\n[INFO]    shared_buffer_tidx_hit_rate: 98.97%\n[INFO]    shared_buffer_idx_hit_rate: 99.95%\n[OK]      This is very good (if this PostgreSQL instance was recently used as it usually is, and was not stopped since)\n-----  Indexes  -----\n[OK]      No invalid index\n[OK]      No unused indexes\n-----  Procedures  -----\n[OK]      No procedures with default costs\n\n=====  Configuration advice  =====\n-----  checkpoint  -----\n[URGENT] set fsync to on!\n-----  extension  -----\n[LOW] Enable pg_stat_statements in database template1 to collect statistics on all queries (not only those longer than log_min_duration_statement)\n-----  hugepages  -----\n[LOW] Change Huge Pages size from 2MB to 1GB\n[MEDIUM] set vm.nr_hugepages=21001 in /etc/sysctl.conf and run sysctl -p to reload it.  This will allocate Huge Pages (it may require a system reboot).\n~~~\n\n## To use it\n\n### Install it\n\nIt needs Perl with various modules, mainly `DBD::Pg`\n\n\n- On Debian or a derivative:\n```\napt-get install libdbd-pg-perl libdbi-perl perl-modules\n```\n- On Fedora or a derivative:\n```\nyum install perl-DBD-Pg perl-DBI perl-Term-ANSIColor\n```\n\n- On MacOS with Homebrew:\n```\nbrew install perl\ncpan DBD-pg\n```\n\nDownload the script.  Invoke one of:\n\n```\nwget -O postgresqltuner.pl postgresqltuner.pl\nwget -O postgresqltuner.pl https://postgresqltuner.pl\ncurl -Lo postgresqltuner.pl postgresqltuner.pl\ncurl -Lo postgresqltuner.pl https://postgresqltuner.pl\n```\n\nSet permissions:\n\n```\nchmod +x postgresqltuner.pl\n```\n\nThen invoke on the command line, as the "postgres" user, either:\n\n- By connecting to the PostgreSQL server via TCP:\n```\npostgresqltuner.pl --host=dbhost --database=testdb --user=username --password=qwerty\n```\n- ... or via an Unix socket:\n```\npostgres$ postgresqltuner.pl --host=/var/run/postgresql  # PostgreSQL socket directory\n```\n\nIf available, postgresqltuner.pl will use standard PostgreSQL variables like `PGHOST`, `PGPORT`, `PGDATABASE`, `PGUSERNAME`, and password from the `~/.pgpass` file.\n\n\n### With Docker\n\nInvoke on the command-line either:\n - via the plain network:\n```\ndocker run -it --rm jfcoz/postgresqltuner --host=dbhost --user=username --password=pass --database=testdb\n```\n - ... or via ssh:\n```\ndocker run -it --rm -v $HOME/.ssh:/root/.ssh jfcoz/postgresqltuner --host=dbhost --user=username --password=pass --database=testdb\n```\n - ... or via a docker link:\n```\ndocker run -it --rm --link your-postgresql-container:dbhost jfcoz/postgresqltuner --host=dbhost --user=username --password=pass --database=testdb\n```\n\n### SSH\n\nWhen using postgresqltuner.pl to inspect a remote PostgreSQL instance, it will use ssh to collect OS informations. You should configure ssh to connect to the remote host with private key authentication.\n\nYou can provide adequate options to ssh:\n\n- ... as commend-line options:\n```\n--sshopt=Port=2200 --sshopt=IdentityFile=...\n```\n\n- or in the configuration file "~/.ssh/config":\n```\nHost my-database-host\n\tIdentityFile=...\n\tPort=2200\n```\n\n### PostgreSQL passwords\n\nFor better security use a `~/.pgpass` file containing passwords, so no password will be saved in your shell history nor visible in a process complete name. [.pgpass documentation](https://www.postgresql.org/docs/current/static/libpq-pgpass.html)\n\n```\nhost:port:database:username:password\n```\n\n## Options\n\n- Average number of work_mem buffer per connection:\n\nA complex query can use many work_mem buffers. You can configure the average number of work_mem buffers per connection (in percent):\n\n```\n--wmp 300\n```\nThe default in 150%\n\n- SSD storage:\n\nIf the PostgreSQL instance runs in an hypervisor or with SSD storage, I cannot detect it accurately.\n```\n--ssd\n```\nAllow to specify that storage is on SSD. Especially useful if PostgreSQL runs in a VM using an underlying (on the physical machine) SSD.\n\n--nocolor\nThe report will not be colorized.  Useful to save it in a file by using shell redirection.\n\n## Special FreeBSD settings\n\nFreeBSD has support for virtual memory over-commit, using vm.overcommit configuration setting.\n\nThis setting is configured via /etc/sysctl.conf.\n\nChange \'vm.overcommit: 0 \' to \'vm.overcommit: 1\'.\n\nAlso, install [freecolor](https://kukunotes.wordpress.com/2014/11/17/freebsd-view-memory-usage/).\n'