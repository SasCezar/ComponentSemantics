b"# fullstack-apollo-express-postgresql-boilerplate\n\n[![Build Status](https://travis-ci.org/the-road-to-graphql/fullstack-apollo-express-postgresql-boilerplate.svg?branch=master)](https://travis-ci.org/the-road-to-graphql/fullstack-apollo-express-postgresql-boilerplate) [![Slack](https://slack-the-road-to-learn-react.wieruch.com/badge.svg)](https://slack-the-road-to-learn-react.wieruch.com/) [![Greenkeeper badge](https://badges.greenkeeper.io/the-road-to-graphql/fullstack-apollo-express-postgresql-boilerplate.svg)](https://greenkeeper.io/)\n\nA full-fledged Apollo Server with Apollo Client starter project with React and Express. [Read more about it in this tutorial to build it yourself](https://www.robinwieruch.de/graphql-apollo-server-tutorial/).\n\n**Family of universal fullstack repositories:**\n\nServer Applications:\n\n* [Node.js with Express + MongoDB](https://github.com/the-road-to-graphql/fullstack-apollo-express-mongodb-boilerplate)\n* [Node.js with Express + PostgreSQL](https://github.com/the-road-to-graphql/fullstack-apollo-express-postgresql-boilerplate)\n\nClient Applications:\n\n* [React Client](https://github.com/the-road-to-graphql/fullstack-apollo-react-boilerplate)\n* [React Native Client](https://github.com/morenoh149/fullstack-apollo-react-native-boilerplate)\n\n## Features of Client + Server\n\n* React (create-react-app) with Apollo Client\n  * Queries, Mutations, Subscriptions\n* Node.js with Express and Apollo Server\n  * cursor-based Pagination\n* PostgreSQL Database with Sequelize\n  * entities: users, messages\n* Authentication\n  * powered by JWT and local storage\n  * Sign Up, Sign In, Sign Out\n* Authorization\n  * protected endpoint (e.g. verify valid session)\n  * protected resolvers (e.g. e.g. session-based, role-based)\n  * protected routes (e.g. session-based, role-based)\n* performance optimizations\n  * example of using Facebook's dataloader\n* E2E testing\n\n## Installation\n\n* `git clone git@github.com:the-road-to-graphql/fullstack-apollo-express-postgresql-boilerplate.git`\n* `cd fullstack-apollo-express-postgresql-boilerplate`\n* `touch .env`\n* `npm install`\n* fill out *.env file* (see below)\n* start PostgreSQL database\n* `npm start`\n* visit `http://localhost:8000` for GraphQL playground\n\n#### .env file\n\nSince this boilerplate project is using PostgreSQL, you have to install it for your machine and get a database up and running. You find everything for the set up over here: [Setup PostgreSQL with Sequelize in Express Tutorial](https://www.robinwieruch.de/postgres-express-setup-tutorial). After you have created a database and a database user, you can fill out the environment variables in the *server/.env* file.\n\n```\nDATABASE=mydatabase\n\nDATABASE_USER=postgres\nDATABASE_PASSWORD=postgres\n\nSECRET=asdlplplfwfwefwekwself.2342.dawasdq\n```\n\nThe `SECRET` is just a random string for your authentication. Keep all these information secure by adding the *.env* file to your *.gitignore* file. No third-party should have access to this information.\n\n#### Testing\n\n* adjust `test:run-server` npm script with `TEST_DATABASE` environment variable in package.json to match your testing database name\n  * to match it from package.json: `createdb mytestdatabase` with psql\n* one terminal: npm run test:run-server\n* second terminal: npm run test:execute-test\n\n## Want to learn more about React + GraphQL + Apollo?\n\n* Don't miss [upcoming Tutorials and Courses](https://www.getrevue.co/profile/rwieruch)\n* Check out current [React Courses](https://roadtoreact.com)\n"