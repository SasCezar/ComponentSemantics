b'# SqlKata Query Builder\n\n[![Build status](https://ci.appveyor.com/api/projects/status/bh022c0ol5u6s41p?svg=true)](https://ci.appveyor.com/project/ahmad-moussawi/querybuilder)\n\n[![SqlKata on Nuget](https://img.shields.io/nuget/vpre/SqlKata.svg)](https://www.nuget.org/packages/SqlKata)\n\n[![SqlKata on MyGet](https://img.shields.io/myget/sqlkata/v/SqlKata.svg?label=myget)](https://www.myget.org/feed/sqlkata/package/nuget/SqlKata)\n\n<a href="https://twitter.com/ahmadmuzavi?ref_src=twsrc%5Etfw" class="twitter-follow-button" data-size="large" data-show-count="false">Follow @ahmadmuzavi</a> for the latest updates about SqlKata.\n\n![Quick Demo](https://i.imgur.com/jOWD4vk.gif)\n\n\nSqlKata Query Builder is a powerful Sql Query Builder written in C#.\n\nIt\'s secure and framework agnostic. Inspired by the top Query Builders available, like Laravel Query Builder, and Knex.\n\nSqlKata has an expressive API. it follows a clean naming convention, which is very similar to the SQL syntax.\n\nBy providing a level of abstraction over the supported database engines, that allows you to work with multiple databases with the same unified API.\n\nSqlKata supports complex queries, such as nested conditions, selection from SubQuery, filtering over SubQueries, Conditional Statements and others. Currently it has built-in compilers for SqlServer, MySql, PostgreSql and Firebird.\n\nCheckout the full documentation on [https://sqlkata.com](https://sqlkata.com)\n\n## Installation\n\nusing dotnet cli\n```sh\n$ dotnet add package SqlKata\n```\n\nusing Nuget Package Manager\n```sh\nPM> Install-Package SqlKata\n```\n\n\n## Quick Examples\n\n### Setup Connection\n\n```cs\nvar connection = new SqlConnection("...");\nvar compiler = new SqlCompiler();\nvar db = new QueryFactory(connection, compiler);\n```\n\n### Retrieve all records\n```cs\nvar books = db.Query("Books").Get();\n```\n\n### Retrieve published books only\n```cs\nvar books = db.Query("Books").WhereTrue("IsPublished").Get();\n```\n\n### Retrieve one book\n```cs\nvar introToSql = db.Query("Books").Where("Id", 145).Where("Lang", "en").First();\n```\n\n### Retrieve recent books: last 10\n```cs\nvar recent = db.Query("Books").OrderByDesc("PublishedAt").Limit(10).Get();\n```\n\n### Include Author information\n```cs\nvar books = db.Query("Books")\n    .Include(db.Query("Authors")) // Assumes that the Books table have a `AuthorId` column\n    .Get();\n```\n\nThis will include the property "Author" on each "Book"\n```json\n[{\n    "Id": 1,\n    "PublishedAt": "2019-01-01",\n    "AuthorId": 2\n    "Author": { // <-- included property\n        "Id": 2,\n        "...": ""\n    }\n}]\n```\n\n### Join with authors table\n\n```cs\nvar books = db.Query("Books")\n    .Join("Authors", "Authors.Id", "Books.AuthorId")\n    .Select("Books.*", "Authors.Name as AuthorName")\n    .Get();\n\nforeach(var book in books)\n{\n    Console.WriteLine($"{book.Title}: {book.AuthorName}");\n}\n```\n\n### Conditional queries\n```cs\nvar isFriday = DateTime.Today.DayOfWeek == DayOfWeek.Friday;\n\nvar books = db.Query("Books")\n    .When(isFriday, q => q.WhereIn("Category", new [] {"OpenSource", "MachineLearning"}))\n    .Get();\n```\n\n### Pagination\n\n```cs\nvar page1 = db.Query("Books").Paginate(10);\n\nforeach(var book in page1.List)\n{\n    Console.WriteLine(book.Name);\n}\n\n...\n\nvar page2 = page1.Next();\n```\n\n### Insert\n\n```cs\nint affected = db.Query("Users").Insert(new {\n    Name = "Jane",\n    CountryId = 1\n});\n```\n\n### Update\n\n```cs\nint affected = db.Query("Users").Where("Id", 1).Update(new {\n    Name = "Jane",\n    CountryId = 1\n});\n```\n\n### Delete\n\n```cs\nint affected = db.Query("Users").Where("Id", 1).Delete();\n```\n'