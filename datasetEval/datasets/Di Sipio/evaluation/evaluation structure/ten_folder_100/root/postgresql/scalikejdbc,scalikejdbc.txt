b'# ScalikeJDBC\n\n## Just write SQL and get things done!\n\nScalikeJDBC is a tidy SQL-based DB access library for Scala that naturally wraps JDBC and provides easy-to-use APIs.\n\nScalikeJDBC is practical and production-ready. Use this library for your real projects.\n\nhttp://scalikejdbc.org/\n\n[![Build Status](https://travis-ci.org/scalikejdbc/scalikejdbc.svg?branch=master)](https://travis-ci.org/scalikejdbc/scalikejdbc)\n[![Maven Central](https://img.shields.io/maven-central/v/org.scalikejdbc/scalikejdbc_2.12.svg?label=Maven%20Central)](https://search.maven.org/search?q=g:org.scalikejdbc%20AND%20a:scalikejdbc_2.12)\n[![Stargazers over time](https://starchart.cc/scalikejdbc/scalikejdbc.svg)](https://starchart.cc/scalikejdbc/scalikejdbc)\n\n## Gitter Chat for Casual Q&A\n\n- English: [![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/scalikejdbc/en?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n- \xe6\x97\xa5\xe6\x9c\xac\xe8\xaa\x9e (Japanese): [![Gitter](https://badges.gitter.im/_\xe3\x83\x81\xe3\x83\xa3\xe3\x83\x83\xe3\x83\x88\xe3\x81\xb8.svg)](https://gitter.im/scalikejdbc/ja?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n## Getting Started\n\nJust add ScalikeJDBC, a JDBC driver, and an slf4j implementation to your sbt build settings:\n\n```scala\nlibraryDependencies ++= Seq(\n  "org.scalikejdbc" %% "scalikejdbc"        % "3.4.+",\n  "com.h2database"  %  "h2"                 % "1.4.+",\n  "ch.qos.logback"  %  "logback-classic"    % "1.2.+"\n)\n```\n\nIf you\'re a Play2 user, take a look at play-support project, too:\n\nhttps://github.com/scalikejdbc/scalikejdbc-play-support\n\n#### First example\n\nAfter adding the above dependencies to your `build.sbt`, run `sbt console` and execute the following code:\n\n```scala\nimport scalikejdbc._\n\n// initialize JDBC driver & connection pool\nClass.forName("org.h2.Driver")\nConnectionPool.singleton("jdbc:h2:mem:hello", "user", "pass")\n\n// ad-hoc session provider on the REPL\nimplicit val session = AutoSession\n\n// table creation, you can run DDL by using #execute as same as JDBC\nsql"""\ncreate table members (\n  id serial not null primary key,\n  name varchar(64),\n  created_at timestamp not null\n)\n""".execute.apply()\n\n// insert initial data\nSeq("Alice", "Bob", "Chris") foreach { name =>\n  sql"insert into members (name, created_at) values (${name}, current_timestamp)".update.apply()\n}\n\n// for now, retrieves all data as Map value\nval entities: List[Map[String, Any]] = sql"select * from members".map(_.toMap).list.apply()\n\n// defines entity object and extractor\nimport java.time._\ncase class Member(id: Long, name: Option[String], createdAt: ZonedDateTime)\nobject Member extends SQLSyntaxSupport[Member] {\n  override val tableName = "members"\n  def apply(rs: WrappedResultSet) = new Member(\n    rs.long("id"), rs.stringOpt("name"), rs.zonedDateTime("created_at"))\n}\n\n// find all members\nval members: List[Member] = sql"select * from members".map(rs => Member(rs)).list.apply()\n\n// use paste mode (:paste) on the Scala REPL\nval m = Member.syntax("m")\nval name = "Alice"\nval alice: Option[Member] = withSQL {\n  select.from(Member as m).where.eq(m.name, name)\n}.map(rs => Member(rs)).single.apply()\n```\n\nHow did it go? If you\'d like to know more details or see more practical examples, see the full documentation at:\n\nhttp://scalikejdbc.org/\n\n\n## License\n\nPublished source code and binary files have the following copyright:\n\n```\nCopyright scalikejdbc.org\nApache License, Version 2.0\nhttp://www.apache.org/licenses/LICENSE-2.0.html\n```\n\n'