b'\n<p align="center"><a href="https://cube.dev"><img src="https://i.imgur.com/zYHXm4o.png" alt="Cube.js" width="300px"></a></p>\n\n[Website](https://cube.dev) \xe2\x80\xa2 [Docs](https://cube.dev/docs) \xe2\x80\xa2 [Examples](#examples) \xe2\x80\xa2 [Blog](https://cube.dev/blog) \xe2\x80\xa2 [Slack](https://slack.cube.dev) \xe2\x80\xa2 [Twitter](https://twitter.com/thecubejs)\n\n[![npm version](https://badge.fury.io/js/%40cubejs-backend%2Fserver.svg)](https://badge.fury.io/js/%40cubejs-backend%2Fserver)\n[![CircleCI](https://circleci.com/gh/cube-js/cube.js.svg?style=shield)](https://circleci.com/gh/cube-js/cube.js)\n\n__Cube.js is an open source modular framework to build analytical web applications__. It is primarily used to build internal business intelligence tools or to add customer-facing analytics to an existing application.\n\nCube.js was designed to work with Serverless Query Engines like AWS Athena and Google BigQuery. Multi-stage querying approach makes it suitable for handling trillions of data points. Most modern RDBMS work with Cube.js as well and can be tuned for adequate performance.\n\nUnlike others, it is not a monolith application, but a set of modules, which does one thing well. Cube.js provides modules to run transformations and modeling in data warehouse, querying and caching, managing API gateway and building UI on top of that.\n\n### Cube.js Backend\n\n- __Cube.js Schema.__ It acts as an ORM for analytics and allows to model everything from simple counts to cohort retention and funnel analysis.\n- __Cube.js Query Orchestration and Cache.__ It optimizes query execution by breaking queries into small, fast, reusable and materialzed pieces.\n- __Cube.js API Gateway.__ It provides idempotent long polling API which guarantees analytic query results delivery without request time frame limitations and tolerant to connectivity issues.\n\n### Cube.js Frontend\n\n- __Cube.js Javascript Client.__ \xd0\xa1ore set of methods to access Cube.js API Gateway and to work with query result sets.\n- __Cube.js React, Angular and Vue.__ Framework specific wrappers for Cube.js API.\n\n## Why Cube.js?\n\nIf you are building your own business intelligence tool or customer-facing analytics most probably you\'ll face the following problems:\n\n1. __Performance.__ Most of effort time in modern analytics software development is spent to provide adequate time to insight. In the world where every company data is a big data writing just SQL query to get insight isn\'t enough anymore.\n2. __SQL code organization.__ Modelling even a dozen of metrics with a dozen of dimensions using pure SQL queries sooner or later becomes a maintenance nightmare which ends up in building modelling framework.\n3. __Infrastructure.__ Key components every production-ready analytics solution requires: analytic SQL generation, query results caching and execution orchestration, data pre-aggregation, security, API for query results fetch, and visualization.\n\nCube.js has necessary infrastructure for every analytic application that heavily relies on its caching and pre-aggregation layer to provide several minutes raw data to insight delay and sub second API response times on a trillion of data points scale.\n\n![](https://raw.githubusercontent.com/statsbotco/cube.js/master/docs/old-was-vs-cubejs-way.png)\n\n\n## Contents\n\n- [Getting Started](#getting-started)\n- [Examples](#examples)\n- [Docs](https://cube.dev/docs)\n- [Tutorials](#tutorials)\n- [Community](#community)\n- [Architecture](#architecture)\n- [Contributing](#contributing)\n- [License](#license)\n\n## Getting Started\n\n### 1. Install with NPM or Yarn\n```bash\n$ npm install -g cubejs-cli\n# or\n$ yarn global add cubejs-cli\n```\n\n### 2. Connect to Your Database\nRun the following command to get started with Cube.js\n\n```bash\n$ cubejs create <project name> -d <database type>\n```\n\nspecifying the project name and your database using `-d` flag. Available options: \n\n* `postgres`\n* `mysql`\n* `mssql`\n* `athena`\n* `mongobi`\n* `bigquery`\n* `redshift`\n* `clickhouse`\n* `hive`\n* `snowflake`\n* `prestodb`\n* `oracle`\n\nFor example,\n\n```bash\n$ cubejs create hello-world -d postgres\n```\n\nOnce run, the `create` command will create a new project directory that contains the scaffolding for your new Cube.js project. This includes all the files necessary to spin up the Cube.js backend, example frontend code for displaying the results of Cube.js queries in a React app, and some example schema files to highlight the format of the Cube.js Data Schema layer.\n\nThe `.env` file in this project directory contains placeholders for the relevant database credentials. For MySQL and PostgreSQL, you\'ll need to fill in the target host, database name, user and password. For Athena, you\'ll need to specify the AWS access and secret keys with the [access necessary to run Athena queries](https://docs.aws.amazon.com/athena/latest/ug/access.html), and the target AWS region and [S3 output location](https://docs.aws.amazon.com/athena/latest/ug/querying.html) where query results are stored.\n\n### 3. Define Your Data Schema\n\nCube.js uses Data Schema to generate and execute SQL.\n\nIt acts as an ORM for your database and it is flexible enough to model everything from simple counts to cohort retention and funnel analysis. [Read more about Cube.js Schema](https://cube.dev/docs/getting-started-cubejs-schema).\n\nYou can generate schema files using developer Playground.\nTo do so please start dev server from project directory\n\n```bash\n$ npm run dev\n```\n\nThen go to `http://localhost:4000` and use UI to generate schema files.\n\n#### Manually creating Data Schema files\n\nYou can also add schema files to the `schema` folder manually:\n\n```javascript\n// schema/users.js\n\ncube(`Users`, {\n   measures: {\n     type: `count`\n   },\n\n   dimensions: {\n     age: {\n       type: `number`,\n       sql: `age`\n     },\n\n     createdAt: {\n       type: `time`,\n       sql: `createdAt`\n     },\n\n     country: {\n       type: `string`,\n       sql: `country`\n     }\n   }\n});\n```\n\n### 4. Visualize Results\nThe Cube.js client connects to the Cube.js Backend and lets you visualize your data. This section shows how to use Cube.js Javascript client.\n\nAs a shortcut you can run your dev server first:\n\n```\n$ npm run dev\n```\n\nThen open `http://localhost:4000` to see visualization examples. This will open a Developer Playground app. You can change the metrics and dimensions of the example to use the schema you defined above, change the chart types, generate sample code out of it and more!\n\n#### Cube.js Client Installation\n\nVanilla JS:\n```bash\n$ npm i --save @cubejs-client/core\n```\n\nReact:\n\n```bash\n$ npm i --save @cubejs-client/core\n$ npm i --save @cubejs-client/react\n```\n\n#### Example Usage\n\n##### Vanilla Javascript\nInstantiate Cube.js API and then use it to fetch data:\n\n```js\nimport cubejs from \'@cubejs-client/core\';\nimport Chart from \'chart.js\';\nimport chartjsConfig from \'./toChartjsData\';\n\nconst cubejsApi = cubejs(\n  \'YOUR-CUBEJS-API-TOKEN\',\n  { apiUrl: \'http://localhost:4000/cubejs-api/v1\' },\n);\n\nconst resultSet = await cubejsApi.load({\n  measures: [\'Stories.count\'],\n  timeDimensions: [{\n    dimension: \'Stories.time\',\n    dateRange: [\'2015-01-01\', \'2015-12-31\'],\n    granularity: \'month\'\n  }]\n})\nconst context = document.getElementById(\'myChart\');\nnew Chart(context, chartjsConfig(resultSet));\n```\n\n##### React\nImport `cubejs` and `QueryRenderer` components, and use them to fetch the data.\nIn the example below we use Recharts to visualize data.\n\n```jsx\nimport React from \'react\';\nimport { LineChart, Line, XAxis, YAxis } from \'recharts\';\nimport cubejs from \'@cubejs-client/core\';\nimport { QueryRenderer } from \'@cubejs-client/react\';\n\nconst cubejsApi = cubejs(\n  \'YOUR-CUBEJS-API-TOKEN\',\n  { apiUrl: \'http://localhost:4000/cubejs-api/v1\' },\n);\n\nexport default () => {\n  return (\n    <QueryRenderer\n      query={{\n        measures: [\'Stories.count\'],\n        dimensions: [\'Stories.time.month\']\n      }}\n      cubejsApi={cubejsApi}\n      render={({ resultSet }) => {\n        if (!resultSet) {\n          return \'Loading...\';\n        }\n\n        return (\n          <LineChart data={resultSet.rawData()}>\n            <XAxis dataKey="Stories.time"/>\n            <YAxis/>\n            <Line type="monotone" dataKey="Stories.count" stroke="#8884d8"/>\n          </LineChart>\n        );\n      }}\n    />\n  )\n}\n```\n\n\n## Examples\n\n| Demo | Code | Description |\n|:------|:----------:|:-------------|\n|[Examples Gallery](https://statsbotco.github.io/cubejs-client/)|[examples-gallery](./examples/examples-gallery)|Examples Gallery with different visualizations libraries|\n|[Stripe Dashboard](http://cubejs-stripe-dashboard-example.s3-website-us-west-2.amazonaws.com/)|[stripe-dashboard](./examples/stripe-dashboard)|Stripe Demo Dashboard built with Cube.js and Recharts|\n|[AWS Web Analytics](https://statsbotco.github.io/cubejs-client/aws-web-analytics/)|[aws-web-analytics](./examples/aws-web-analytics)|Web Analytics with AWS Lambda, Athena, Kinesis and Cube.js|\n|[Event Analytics](https://d1ygcqhosay4lt.cloudfront.net/)|[event-analytics](https://github.com/cube-js/cube.js/tree/master/examples/event-analytics)|Mixpanel like Event Analytics App built with Cube.js and Snowplow|\n|[Node Express Dashboard](https://express-analytics-dashboard.herokuapp.com)|[node-express-dashboard](https://github.com/cube-js/cube.js/tree/master/examples/express-analytics-dashboard)|Analytics Dashboard with Node, Express, and Cube.js|\n|[External Rollups](https://cubejs-external-rollups.herokuapp.com/)|[external-rollups](https://github.com/cube-js/cube.js/tree/master/examples/external-rollups)|Compare performance of direct BigQuery querying vs MySQL cached version for the same data|\n\n## Tutorials\n\n### Getting Started Tutorials\n- [React Dashboard: an Ultimate Guide](https://react-dashboard.cube.dev)\n- [Cube.js, the Open Source Dashboard Framework: Ultimate Guide ](https://cube.dev/blog/cubejs-open-source-dashboard-framework-ultimate-guide)\n- [Building MongoDB Dashboard using Node.js](https://cube.dev/blog/building-mongodb-dashboard-using-node.js)\n- [Node Express Analytics Dashboard with Cube.js](https://cube.dev/blog/node-express-analytics-dashboard-with-cubejs/)\n### Advanced\n- [Optimize Cube.js Performance with Pre-Aggregations](https://cube.dev/blog/high-performance-data-analytics-with-cubejs-pre-aggregations/)\n- [Building an Open Source Mixpanel Alternative. Part 1: Collecting and Displaying Events](https://cube.dev/blog/building-an-open-source-mixpanel-alternative-1/)\n- [Building an Open Source Mixpanel Alternative. Part 2: Conversion Funnels](https://cube.dev/blog/building-open-source-mixpanel-alternative-2/)\n- [Building Open Source Google Analytics from Scratch](https://cube.dev/blog/building-open-source-google-analytics-from-scratch/)\n- [React Query Builder with Cube.js](https://cube.dev/blog/react-query-builder-with-cubejs/)\n- [External Rollups: Using MySQL as a Cache Layer for BigQuery](https://cube.dev/blog/when-mysql-is-faster-than-bigquery/)\n\n\n## Community\n\nIf you have any questions or need help - [please join our Slack community](https://slack.cube.dev) of amazing developers and contributors.\n\n## Architecture\n__Cube.js acts as an analytics backend__, translating business logic (metrics and dimensions) into SQL and handling database connection. \n\nThe Cube.js javascript Client performs queries, expressed via dimensions, measures, and filters. The Server uses Cube.js Schema to generate a SQL code, which is executed by your database. The Server handles all the database connection, as well as pre-aggregations and caching layers. The result then sent back to the Client. The Client itself is visualization agnostic and works well with any chart library.\n\n<p align="center"><img src="https://i.imgur.com/FluGFqo.png" alt="Cube.js" width="100%"></p>\n\n## Contributing\n\nHow you can help:\n\n1. Upvote issues with \xf0\x9f\x91\x8d reaction so we know what\'s the demand for particular issue to prioritize it within road map.\n2. Create issues every time you feel something is missing or goes wrong.\n3. Ask questions on [Stack Overflow with cube.js tag](https://stackoverflow.com/questions/tagged/cube.js) if others can have these questions as well.\n4. Provide pull requests for all open issues and especially for those with `help wanted` and `good first issue` labels. \n\nAll sort of contributions are **welcome and extremely helpful** \xf0\x9f\x99\x8c Please refer to [the contribution guide](https://github.com/cube-js/cube.js/blob/master/CONTRIBUTING.md) for more information.\n\n## License\n\nCube.js Client is [MIT licensed](./packages/cubejs-client-core/LICENSE).\n\nCube.js Backend is [Apache 2.0 licensed](./packages/cubejs-server/LICENSE).\n'