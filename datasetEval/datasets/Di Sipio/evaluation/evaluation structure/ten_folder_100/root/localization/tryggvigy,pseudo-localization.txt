b'<sub>Inspired by pseudo-localization at [Netflix](https://medium.com/netflix-techblog/pseudo-localization-netflix-12fff76fbcbe) and [Firefox](https://reviewboard.mozilla.org/r/248606/diff/2#index_header)</sub>\n\n# pseudo-localization\n\n| English  | Pseudo Language |\n| ------------- | ------------- |\n| <img width="559" alt="screen shot 2018-08-12 at 1 23 18 pm" src="https://user-images.githubusercontent.com/2373958/44001651-21f32b42-9e36-11e8-80eb-5b88e8fd9b13.png"> | <img width="661" alt="after" src="https://user-images.githubusercontent.com/2373958/44311352-2a29fb00-a3e6-11e8-88ed-5485697f7a40.png"> |\n\n---\n\n[![Edit pseudo-localization-react](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/1q7n08or4j)\n\n`pseudo-localization` is a script that performs [pseudolocalization](https://en.wikipedia.org/wiki/Pseudolocalization) against the DOM or individual strings.\n\n[Demo here](https://tryggvigy.github.io/pseudo-localization/hamlet.html). Changing text nodes and adding or removing trees of elements will trigger a pseudo-localization run on all the new text added to the DOM. Try it yourself by changing text or adding/removing elements using the devtools.\n\n## Installation\n\n### Through npm\n```\nnpm install pseudo-localization\n```\n\n### Raw script (without npm)\nCopy paste the files in [`src`](https://github.com/tryggvigy/pseudo-localization/blob/master/src) and use as you wish. It\'s not a lot of code.\n\n\n# Usage\n\n### import or require the npm module\n\n`pseudo-localization` can be used like so:\n\n```js\nimport pseudoLocalization from \'pseudo-localization\';\n// Or using CommonJS\n// const pseudoLocalization = require(\'pseudo-localization\').default;\n\npseudoLocalization.start();\n\n// Later, if needed\npseudoLocalization.stop();\n```\n\nTo use `pseudo-localization` in React, Vue, Ember or anything else, hook the `start` and `stop` methods into your libraries\ncomponent lifecycles. In React for example:\n\n```js\nimport React from \'react\';\nimport pseudoLocalization from \'pseudo-localization\';\n\nclass PseudoLocalization extends React.Component {\n  componentDidMount() {\n    pseudoLocalization.start();\n  }\n  componentWillUnmount() {\n    pseudoLocalization.stop();\n  }\n}\n\n// And use it\n\nclass Page extends React.Component {\n  render() {\n    return (\n      <main>\n       <PseudoLocalization />\n       <h1>I will get pseudo localized along with everything else under document.body!</h1>\n      <main>\n    );\n  }\n}\n```\n\nUsing hooks? Here\'s an example:\n\n```jsx\nimport React from \'react\';\nimport pseudoLocalization from \'pseudo-localization\';\n\nfunction PseudoLocalization() {\n  React.useEffect(() => {\n    pseudoLocalization.start();\n\n    return () => {\n      pseudoLocalization.stop()\n    };\n  }, []);\n}\n\n// And use it\n\nfunction Page() {\n  return (\n    <main>\n      <PseudoLocalization />\n      <h1>I will get pseudo localized along with everything else under document.body!</h1>\n    <main>\n  );\n}\n```\n\nYou can also call the underlying `localize` function to pseudo-localize any string. This is useful for non-browser environments like nodejs.\n\n\n```js\nimport { localize } from \'pseudo-localization\';\n// Or using CommonJS\n// const { localize } = require(\'pseudo-localization\');\n\nconsole.log(localize(\'hello\')); // --> \xc4\xa7\xe1\xb8\x97\xe1\xb8\x97\xc5\x80\xc5\x80\xc7\xbf\xc7\xbf\nconsole.log(localize(\'hello\', { strategy: \'bidi\' })); // --> o\xca\x85\xca\x85\xc7\x9d\xc9\xa5\n```\n\nA good use-case for `localize` is testing that strings are _actually_ being localized and not hard coded.\n\n```js\nimport { localize } from \'pseudo-localization\';\nimport translate from \'./my-translation-lib\';\n\n// Pseudo localize every string returned from your normal translation function.\nconst _ = key => localize(translate(key, navigator.language));\n\n_(\'Some Localized Text\'); // \xc5\x9e\xc7\xbf\xc7\xbf\xe1\xb8\xbf\xe1\xb8\x97\xe1\xb8\x97 \xc4\xbf\xc7\xbf\xc7\xbf\xc6\x88\xc8\xa7\xc8\xa7\xc5\x80\xc4\xab\xe1\xba\x91\xe1\xb8\x97\xe1\xb8\x97\xe1\xb8\x93 \xc5\xa6\xe1\xb8\x97\xe1\xb8\x97\xe1\xba\x8b\xc5\xa7\n// Or, in React for example\nconst Header = () => <h1>{_(\'Localized Header Text\')}</h1>;\n```\n\nAny strings that do not pass through the translation function will now stand out in the UI because the will not be pseudo-localized.\n\n## Strategies\n`pseudo-localization` supports two strategies:\n\n1. accented\n2. bidi\n\n### accented - \xc8\xa6\xc8\xa7\xc6\x88\xc6\x88\xe1\xb8\x97\xe1\xb8\x97\xc6\x9e\xc5\xa7\xe1\xb8\x97\xe1\xb8\x97\xe1\xb8\x93 \xe1\xb8\x96\xe1\xb8\x97\xc6\x9e\xc9\xa0\xc5\x80\xc4\xab\xc4\xab\xc5\x9f\xc4\xa7\n\nUsage: `pseudoLocalization.start({ strategy: \'accented\' });` or simply `pseudoLocalization.start();`.\n\nIn Accented English all Latin letters are replaced by accented\nUnicode counterparts which don\'t impair the readability of the content.\nThis allows developers to quickly test if any given string is being\ncorrectly displayed in its \'translated\' form.  Additionally, simple\nheuristics are used to make certain words longer to better simulate the\nexperience of international users.\n\n<img width="622" alt="screen shot 2018-08-19 at 18 48 29" src="https://user-images.githubusercontent.com/2373958/44311259-62303e80-a3e4-11e8-884a-54c77416b922.png">\n\n\n### bidi - \xc9\xa5s\xc4\xb1\xca\x85\xc6\x83u\xc6\x8e \xc4\xb1p\xc4\xb1\xd4\x90\n\nUsage: `pseudoLocalization.start({ strategy: \'bidi\' });`.\n\nBidi English is a fake [RTL](https://developer.mozilla.org/en-US/docs/Glossary/rtl) locale.  All words are surrounded by\nUnicode formatting marks forcing the RTL directionality of characters.\nIn addition, to make the reversed text easier to read, individual\nletters are flipped.\n\n<img width="602" alt="screen shot 2018-08-19 at 18 45 49" src="https://user-images.githubusercontent.com/2373958/44311263-770cd200-a3e4-11e8-97e4-9a1896bd5975.png">\n\n\n## Why?\nTo catch localization problems like:\n- Translated text that is significantly longer than the source language, and does not fit within the UI constraints, or which causes text breaks at awkward positions.\n- Font glyphs that are significantly larger than, or possess diacritic marks not found in, the source language, and which may be cut off vertically.\n- Languages for which the reading order is not left-to-right, which is especially problematic for user input.\n- Application code that assumes all characters fit into a limited character set, such as ASCII or ANSI, which can produce actual logic bugs if left uncaught.\n\nIn addition, the pseudo-localization process may uncover places where an element should be localizable, but is hard coded in a source language.\n\n## Docs\n`pseudo-localization` exports three functions.\n- `pseudoLocalization.start(options)`\n- `pseudoLocalization.stop()`\n- `pseudoLocalization.localize(string, options)`\n\n### `pseudoLocalization.start(options)`\nPseudo localizes the page and watched the DOM for additions/updates to continuously pseudo localize new content.\n\nAccepts an `options` object as an argument. Here are the keys in the `options` object.\n\n#### `strategy` - default (`\'accented\'`)\nThe pseudo localization strategy to use when transforming strings. Accepted values are `accented` or `bidi`.\n\n#### `blacklistedNodeNames` - default (`[\'STYLE\']`)\nAn array of [Node.nodeName](https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeName) strings that will be ignored when localizing. This is useful for skipping `<style>`, `<text>` svg nodes or other nodes that potentially doesn\'t make sense to apply pseudo localization to. `<style>` is skipped by default when `blacklistedNodeNames` is not provided.\n\n### `pseudoLocalization.stop()`\nStops watching the DOM for additions/updates to continuously pseudo localize new content.\n\n### `pseudoLocalization.localize(string, options)`\nAccepts a string to apply pseudo localization to. Returns the pseudo localized version on the string.\nThis function is used by `pseudoLocalization.start` internally.\n\nAccepts an `options` object as an argument. Here are the keys in the `options` object.\n\n#### `strategy` - default (`\'accented\'`)\nThe pseudo localization strategy to use when transforming strings. Accepted values are `accented` or `bidi`.\n\n## CLI Interface\nFor easy scripting a CLI interface is exposed. The interface supports raw input, JSON files, and CommonJS modules.\n\n```bash\nnpx pseudo-localization ./path/to/file.json\n\n# pass in a JS transpiled ES module or an exported CJS module\nnpx pseudo-localization ./path/to/file\n\n# pass in JSON files through STDIN\ncat ./path/to/file.json | npx pseudo-localization --strategy bidi\n\n# pass a string via a pipe\necho hello world | npx pseudo-localization\n\n# direct input pseudo-localization\nnpx pseudo-localization -i "hello world"\n```\n\nCLI Options:\n\n```\npseudo-localization [src] [options]\n\nPseudo localize a string, JSON file, or a JavaScript object\n\nPositionals:\n  src  The source as a path or from STDIN                               [string]\n\nOptions:\n  -o, --output  Writes output to STDOUT by default. Optionally specify a JSON\n                file to write the pseudo-localizations to               [string]\n  -i, --input   Pass in direct input to pseudo-localization                 [string]\n  --debug       Print out all stack traces and other debug info        [boolean]\n  --pretty      Pretty print JSON output                               [boolean]\n  --strategy    Set the strategy for localization\n                             [choices: "accented", "bidi"] [default: "accented"]\n  --help        Show help                                              [boolean]\n  --version     Show version number                                    [boolean]\n```\n\n## Support\nWorks in all evergreen browsers.\n'