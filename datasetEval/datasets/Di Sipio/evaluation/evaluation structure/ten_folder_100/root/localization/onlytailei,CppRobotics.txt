b'# CppRobotics\n\nThis is the cpp implementation of the [PythonRobotics](https://github.com/AtsushiSakai/PythonRobotics)\n\n## Requirment\n- cmake\n- opencv 3.3\n- Eigen 3\n- [CppAD](https://www.coin-or.org/CppAD/Doc/install.htm) / [IPOPT](https://www.coin-or.org/Ipopt/documentation/node14.html) (*for MPC convex optimization*) [install tips](https://github.com/udacity/CarND-MPC-Quizzes/blob/master/install_Ipopt_CppAD.md)\n- ~~ROS~~ (*~~To make the repo lightweight :)~~. Yet, we may still need it for 3D visualization.*)\n\n## Build\n     $ mkdir build\n     $ cd build\n     $ cmake ../\n     $ make -j 8\n\nFind all the executable files in ***build/bin***.\n\n# Table of Contents\n* [Localization](#localization)\n    * [Extended kalmam filter](#extended-kalman-filter-localization)\n    * [Particle filter](#particle-filter-localization)\n    * Histogram filter\n* [Mapping](#mapping)\n    * Gaussian grid map\n* [SLAM](#SLAM)\n    * FastSLAM 1.0\n* [Path Planning](#path-planning)\n    * [Dijkstra](#dijkstra)\n    * [A Star](#a-star)\n    * [RRT](#rrt)\n    * [Dynamic Window Approach](#dynamic-window-approach)\n    * [Model Predictive Trajectory Generator](#model-predictive-trajectory-generator)\n    * [Cubic Spline Planner](#cubic-spline-planner)\n    * [State Lattice Planner](#state-lattice-planner)\n    * [Frenet Frame Trajectory](#frenet-frame-trajectory)\n* [Path Tracking Control](#path-tracking-control)\n    * [LQR Sterring Control](#lqr-steering-control)\n    * [LQR Speed and Steering Control](#lqr-speed-and-steering-control)\n    * [Model Predictive Speed and Steering Control](#mpc-speed-and-steering-control)\n* [Aerial Navigation](#aerial-navigation)\n     * Drone 3D Trajectory Following\n     * Rocket Powered Landing\n\n# Localization\n## Extended Kalman Filter Localization\n* green line: the groundtruth trajectory\n* black line: dead reckoning\n* red points: observations (e.g. GPS)\n* blue line: estimated positions\n\n<!-- ![ekf_gif](./gif/ekf.gif) -->\n<img src="https://ram-lab.com/file/tailei/gif/ekf.gif" alt="ekf" width="400"/>\n\n[Probabilistic Robotics](http://www.probabilistic-robotics.org/)\n\n## Particle Filter Localization\n* green line: the groundtruth trajectory\n* black line: dead reckoning\n* red points: landmarks\n* blue line: estimated positions\n\n<!-- ![pf_gif](./gif/pf.gif) -->\n<img src="https://ram-lab.com/file/tailei/gif/pf.gif" alt="pf" width="400"/>\n\n[Probabilistic Robotics](http://www.probabilistic-robotics.org/)\n\n# Path Planning\n\n## Dijkstra\n* blue point: the start point\n* red point: the goal point\n<img src="https://ram-lab.com/file/tailei/gif/dijkstra.gif" alt="dijkstra" width="400"/>\n\n## A star\n* blue point: the start point\n* red point: the goal point\n<img src="https://ram-lab.com/file/tailei/gif/a_star.gif" alt="a_star" width="400"/>\n\n## RRT\n* red circle: the start point\n* blue circle: the goal point\n* black circle: obstacles\n<img src="https://ram-lab.com/file/tailei/gif/rrt.gif" alt="rrt" width="400"/>\n\n## Dynamic Window Approach\n* blue circle: the target point\n* red circle: the robot\n\n<!-- ![dwa_gif](./gif/dwa.gif) -->\n<img src="https://ram-lab.com/file/tailei/gif/dwa.gif" alt="dwa" width="400"/>\n\n[The dynamic window approach to collision avoidance](https://ieeexplore.ieee.org/document/580977)\n\n## Model Predictive Trajectory Generator\nThis part is based on the bicycle motion model.\n* blue circle: the target point\n* red circle: the initial point\n\n<!-- ![mptg_gif](./gif/mptg.gif) -->\n<img src="https://ram-lab.com/file/tailei/gif/mptg.gif" alt="mptg" width="400"/>\n\n## Cubic Spline Planner\n\n<!-- ![mptg_gif](./gif/csp.png =500x) -->\n<img src="https://ram-lab.com/file/tailei/gif/csp.png" alt="csp" width="400"/>\n\n## State Lattice Planner\n* blue circle: the target point\n* red circle: the initial point\n\n<!-- ![mptg_gif](./gif/slp.gif) -->\n<img src="https://ram-lab.com/file/tailei/gif/slp.gif" alt="slp" width="400"/>\n\n[State Space Sampling of Feasible Motions for High-Performance Mobile Robot Navigation in Complex Environments](https://www.ri.cmu.edu/pub_files/pub4/howard_thomas_2008_1/howard_thomas_2008_1.pdf)\n\n## Frenet Frame Trajectory\n\n* black line: the planned spline path\n* red circle: the obstacle\n* blue circle: the planned trajectory\n* green circle: the real-time position of robot\n\n<img src="https://ram-lab.com/file/tailei/gif/frenet.gif" alt="frenet" width="400"/>\n\n[Optimal Trajectory Generation for Dynamic Street Scenarios in a Frenet Frame](https://www.researchgate.net/publication/224156269_Optimal_Trajectory_Generation_for_Dynamic_Street_Scenarios_in_a_Frenet_Frame)\n\n\n# Path Tracking Control\n## LQR Steering Control\n* black line: the planned spline path\n* red circle: the position under lqr control\n\n<img src="https://ram-lab.com/file/tailei/gif/lqr_steering.gif" alt="lqr_steering" width="400"/>\n\n\n## LQR Speed and Steering Control\n* black line: the planned spline path\n* red circle: the position under lqr control\n\n<img src="https://ram-lab.com/file/tailei/gif/lqr_full.gif" alt="lqr_full" width="400"/>\n\n\n## MPC Speed and Steering Control\n* black line: the planned spline path\n* blue line: the passed path\n* yellow cross: the reference trajectory for MPC    \n(To compile this part, you need to uncomment the related lines in CMakeLists.txt and install [CppAD](https://www.coin-or.org/CppAD/Doc/install.htm) and [IPOPT](https://www.coin-or.org/Ipopt/documentation/node14.html).)\n\n<img src="https://ram-lab.com/file/tailei/gif/mpc.gif" alt="mpc" width="400"/>\n'