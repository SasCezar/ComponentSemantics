b'# eo-locale\n\n[![build status](https://badgen.net/travis/ibitcy/eo-locale?icon=travis)](https://travis-ci.org/ibitcy/eo-locale)\n[![npm downloads](https://badgen.net/npm/dt/eo-locale?icon=npm&color=green)](https://www.npmjs.com/package/eo-locale)\n[![bundle size](https://badgen.net/bundlephobia/minzip/eo-locale@latest?icon=awesome)](https://bundlephobia.com/result?p=eo-locale@latest)\n\n* \xf0\x9f\x92\xaaRuns in all browsers and Node.js\n* \xf0\x9f\x93\xa6Tiny(2kB). Calculated by [size-limit](https://github.com/ai/size-limit) and [bundlephopia](https://bundlephobia.com/result?p=eo-locale@latest).\n* \xf0\x9f\x93\x9aSupports ICU format\n* \xf0\x9f\x8e\x93Based on Internationalization API and React Hooks\n* \xf0\x9f\x91\xabFamiliar react-intl API & patterns\n* \xe2\x9a\x99\xef\xb8\x8fBoth TS and Flow types included\n* \xf0\x9f\x8e\x84Optimized for [tree shaking](https://webpack.js.org/guides/tree-shaking/)\n\n# Motivation\n\nInternationalization is the process of adapting an application to work with different languages and regions. That can bring some benefits. Your target group can be broader than the one with the default language of the app. So by internationalizing an app, you may reach a bigger audience.\n\n> Internationalization it\'s not only about translation text. Users expect localized Dates, Number separators, Currencies.\n\n# How to install\n\n`npm i eo-locale --save` or `yarn add eo-locale`\n\n# Preact version\n\n`npm i @eo-locale/preact --save` or `yarn add @eo-locale/preact`\n\n# Examples\n\n### Format number\n\n```jsx\nimport { EOLocale } from \'eo-locale\';\n\n<EOLocale.Number value={1000} />\n// 1,000\n\n<EOLocale.Number\n  value={1000}\n  currency="EUR"\n  maximumFractionDigits={2}\n  minimumFractionDigits={2}\n  style="currency"\n/>\n// \xe2\x82\xac1,000.00\n```\n\n### Format messages\n\nAdd provider in root of your application\n\n```jsx\nimport { EOLocale } from \'eo-locale\';\n\nconst locales = [\n  {\n    language: \'en\',\n    messages: {\n      hello: \'Hello {name}!\'\n    }\n  },\n];\n\n<EOLocale.Provider language="en" locales={locales}>\n  <span>\n    <EOLocale.Text id="hello" name="World" /> // Helo World!\n  </span>\n</EOLocale.Provider>\n```\n\n### Format html\n\nJust set `html` prop to `true`\n\n```jsx\nimport { EOLocale } from \'eo-locale\';\n\nconst locales = [\n  {\n    language: \'en\',\n    messages: {\n      hello: \'Hello<br/>World!\'\n    }\n  },\n];\n\n<EOLocale.Text html id="hello" />\n// Hello\n// World!\n```\n\n### Format date\n\n```jsx\nimport { EOLocale } from \'eo-locale\';\n\n<EOLocale.Date value={new Date(2019, 2, 19)} />\n// 3/19/2019\n\n<EOLocale.Date\n  value={new Date(2019, 2, 19)}\n  day="numeric"\n  month="long"\n  year="numeric"\n  weekday="long"\n />\n // Tuesday, March 19, 2019\n```\n\n### Use without react\n\nInstall core package for projects without React.\n`npm i @eo-locale/core --save` or `yarn add @eo-locale/core`.\nYou can import `Translator` from `eo-locale` or `@eo-locale/core`.\n\n```js\nimport { Translator } from \'@eo-locale/core\';\n\nconst locales = [\n  {\n    language: \'en\',\n    messages: {\n      today: \'Today is {weekday}!\'\n    }\n  },\n];\n\nconst translator = new Translator(\'en\', locales);\n// translator.formatDate\n// translator.formatNumber\n// translator.translate\n```\n\n### Use components as props\n\n```jsx\nimport { EOLocale } from \'eo-locale\';\n\nconst locales = [\n  {\n    language: \'en\',\n    messages: {\n      today: \'Today is {weekday}!\'\n    }\n  },\n];\n\n<EOLocale.Text\n  id="today"\n  weekday={<EOLocale.Date value={new Date(2019, 2, 19)} weekday="long" />}\n/>\n// Today is Tuesday!\n```\n\n### Hook useTranslator\n\n```jsx\nimport { useTranslator } from \'eo-locale\';\n\nfunction SomeComponent() {\n  const translator = useTranslator();\n\n  return <div>{translator.formatNumber(1000)}</div>;\n}\n```\n\n### Plural\n\nBased on Intl.PluralRules. Works fine for any language.\n\n```jsx\nimport { EOLocale } from \'eo-locale\';\n\nconst locales = [\n  {\n    language: \'en\',\n    messages: {\n      items: \'{count, plural, one {You have one item} other {You have {count} items}}\'\n    }\n  },\n];\n\n<EOLocale.Text id="items" count={3} />\n// You have 3 items\n```\n\n### Client polyfill\n\n`npm i @eo-locale/polyfills --save` or `yarn add @eo-locale/polyfills`\n\n```js\nimport { clientPolyfill } from \'@eo-locale/polyfills\';\n\nclientPolyfill().then(() => {\n  // Init your application\n});\n```\n\n### Server polyfill\n\n```js\nimport { serverPolyfill } from \'@eo-locale/polyfills\';\n\nserverPolyfill([\'en\']);\n```\n'