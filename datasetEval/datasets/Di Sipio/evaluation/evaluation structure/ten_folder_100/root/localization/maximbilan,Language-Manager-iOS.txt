b'How to change localization internally in your iOS application\n============\n\nUnfortunately, there\xe2\x80\x99s no official way provided by <i>Apple</i> for this purpose. Let\xe2\x80\x99s look at two methods for solving this problem.\n\n## Method #1\n\n<i>Apple</i> provides a way to specify an application-specific language, by updating the <i>\xe2\x80\x9cAppleLanguages\xe2\x80\x9d</i> key in <b>NSUserDefaults</b>. For example:\n\n<pre>\n[[NSUserDefaults standardUserDefaults] setObject:@"fr" forKey:@"AppleLanguages"];\n[[NSUserDefaults standardUserDefaults] synchronize];\n</pre>\n\nFor working this method, you\xe2\x80\x99ll have to set it before <b>UIKit</b> initialized.\n\n<pre>\n#import &#60;UIKit/UIKit.h&#62;\n#import "AppDelegate.h"\n#import "LanguageManager.h"\n\nint main(int argc, char * argv[]) {\n    @autoreleasepool {\n        [[NSUserDefaults standardUserDefaults] setObject:@"fr" forKey:@"AppleLanguages"];\n        [[NSUserDefaults standardUserDefaults] synchronize];\n        return UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate class]));\n    }\n}\n\n</pre>\n\nThe problem of this method is that the app has to be relaunched to take effect.\n\n## Method #2\n\nThe solution is to swap the <b>mainBundle</b> of our application as soon as the user changes their language preferences inside the app.\n\nSee the category for <b>NSBundle</b>.\n\nHeader:\n\n<pre>\n#import &#60;Foundation/Foundation.h&#62;\n\n@interface NSBundle (Language)\n\n+ (void)setLanguage:(NSString *)language;\n\n@end\n</pre>\n\nImplementation:\n\n<pre>\n#import "NSBundle+Language.h"\n#import &#60;objc/runtime.h&#62;\n\nstatic const char kBundleKey = 0;\n\n@interface BundleEx : NSBundle\n\n@end\n\n@implementation BundleEx\n\n- (NSString *)localizedStringForKey:(NSString *)key value:(NSString *)value table:(NSString *)tableName\n{\n    NSBundle *bundle = objc_getAssociatedObject(self, &kBundleKey);\n    if (bundle) {\n        return [bundle localizedStringForKey:key value:value table:tableName];\n    }\n    else {\n        return [super localizedStringForKey:key value:value table:tableName];\n    }\n}\n\n@end\n\n@implementation NSBundle (Language)\n\n+ (void)setLanguage:(NSString *)language\n{\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        object_setClass([NSBundle mainBundle],[BundleEx class]);\n    });\n    id value = language ? [NSBundle bundleWithPath:[[NSBundle mainBundle] pathForResource:language ofType:@"lproj"]] : nil;\n    objc_setAssociatedObject([NSBundle mainBundle], &kBundleKey, value, OBJC_ASSOCIATION_RETAIN_NONATOMIC);\n}\n\n@end\n</pre>\n\nIn this method, a problem that may arise is updating elements on active screens. You can reload your <b>rootViewController</b> from our application delegate, will always work reliably.\n\n<pre>\n- (void)reloadRootViewController\n{\n    AppDelegate *delegate = [UIApplication sharedApplication].delegate;\n    NSString *storyboardName = @"Main";\n    UIStoryboard *storybaord = [UIStoryboard storyboardWithName:storyboardName bundle:nil];\n    delegate.window.rootViewController = [storybaord instantiateInitialViewController];\n}\n</pre>\n\nAll code you can see in this repository. With a simple example.\n\n![alt tag](https://raw.github.com/maximbilan/ios_language_manager/master/img/1.png)\n\nPlease, use for free and like it \xe2\x98\xba.\n\n<b>Note:</b> In the example project by default the app uses <i>method #2</i>. You can disable this. Just comment define <b>USE_ON_FLY_LOCALIZATION</b>.\n\nMore details on the blog <a href="http://www.factorialcomplexity.com/blog/2015/01/28/how-to-change-localization-internally-in-your-ios-application.html">here</a>.\n'