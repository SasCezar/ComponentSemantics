b'# Linguist - Multilingual urls and redirects for Laravel\n\nThis package provides an easy multilingual urls and redirection support for the Laravel framework. \n\nIn short Laravel will generate localized urls for links and redirections.\n\n```php\nroute(\'people\') \n```\n\n```\nhttp://site.com/people\nhttp://site.com/fr/people\n```\n\n> Linguist works perfectly well with https://github.com/tightenco/ziggy named Laravel routes for javascript package!\n\n## Installation\n\nLinguist is very easy to use. The locale slug is removed from the REQUEST_URI leaving the developer with the cleanest multilingual environment possible.\n\nInstall using Composer:\n\n```bash\ncomposer require keevitaja/linguist\n```\n\nThere are several options to make Linguist work.\n\n### Option 1: Modify the `public/index.php`\n\nAdd following line after the vendor autoloading to your projects `public/index.php` file.\n\n```php\n(new Keevitaja\\Linguist\\UriFixer)->fixit();\n```\n\nEnd result would be this:\n\n```php\n/*\n|--------------------------------------------------------------------------\n| Register The Auto Loader\n|--------------------------------------------------------------------------\n|\n| Composer provides a convenient, automatically generated class loader for\n| our application. We just need to utilize it! We\'ll simply require it\n| into the script here so that we don\'t have to worry about manual\n| loading any of our classes later on. It feels great to relax.\n|\n*/\n\nrequire __DIR__.\'/../vendor/autoload.php\';\n\n(new Keevitaja\\Linguist\\UriFixer)->fixit();\n```\n\n### Option 2: Use LocalizedKernel\n\n> Note: This option works only if you have not changed your applications root namespace. Default is `App`.\n\nIn your projects `bootstrap/app.php` swap the `App\\Http\\Kernel` with `Keevitaja\\Linguist\\LocalazedKernel`:\n\n```php\n/*\n|--------------------------------------------------------------------------\n| Bind Important Interfaces\n|--------------------------------------------------------------------------\n|\n| Next, we need to bind some important interfaces into the container so\n| we will be able to resolve them when needed. The kernels serve the\n| incoming requests to this application from both the web and CLI.\n|\n*/\n\n$app->singleton(\n    Illuminate\\Contracts\\Http\\Kernel::class,\n    //App\\Http\\Kernel::class\n    Keevitaja\\Linguist\\LocalizedKernel::class\n);\n```\n\n### Option 3: modify the `App\\Http\\Kernel`\n\n> Note: This also works with custom root namespace. \n\n```php\n<?php\n\nnamespace App\\Http;\n\nuse Illuminate\\Contracts\\Foundation\\Application;\nuse Illuminate\\Foundation\\Http\\Kernel as HttpKernel;\nuse Illuminate\\Routing\\Router;\nuse Keevitaja\\Linguist\\UriFixer;\n\nclass Kernel extends HttpKernel\n{\n\n    public function __construct(Application $app, Router $router)\n    {\n        (new UriFixer)->fixit();\n\n        parent::__construct($app, $router);\n    }\n```\n\n### Publish config\n\nFinally you need to publish the Linguist config to set your enabled locales and other relavant configurations. \n\n```\nphp artisan vendor:publish --provider="Keevitaja\\Linguist\\LinguistServiceProvider"\n```\n\nYour personal configuration file will be `config/linguist.php`.\n\n## Usage\n\nYou can add the LocalizeUrls middleware your web middleware group as the first item to get the linguist support:\n\n```php\n/**\n * The application\'s route middleware groups.\n *\n * @var array\n */\nprotected $middlewareGroups = [\n    \'web\' => [\n        \\Keevitaja\\Linguist\\LocalizeUrls::class,\n```\n\n> Note: This middleware has to be the first item in group!\n\nAnother option is to use Linguist in your applications service provider:\n\n```php\nclass AppServiceProvider extends ServiceProvider\n{\n    /**\n     * Bootstrap any application services.\n     *\n     * @return void\n     */\n    public function boot(\\Keevitaja\\Linguist\\Linguist $linguist)\n    {\n        $linguist->localize();\n    }\n```\n\n`UrlGenerator` will add the locale slug in front of the URI when needed. No extra actions needed.\n\n```php\nRoute::get(\'people\', [\'as\' => \'people.index\', \'uses\' => \'\'PeopleController@index\'\']);\n```\n\n```twig\n{{ route(\'people.index\') }} or {{ url(\'people\') }}\n```\n\n```\nhttp://site.com/people // default locale from linguist config\nhttp://site.com/fr/people\nhttp://site.com/ru/people\n```\n\nSwitcher is a little helper to get the current URLs for the locale switcher.\n\n```php\n$urls = dispatch_now(new \\Keevitaja\\Linguist\\Switcher);\n```\n\nNB! Both config and route caching are working!\n\n## Assets\n\nUse linguist helpers for a correct routing of assets\n\n**Regular Assets**\n \n ```twig\n <link rel="stylesheet" href="{{ linguist_asset(\'css/style.css\') }}">\n <script type="text/javascript" src="{{ linguist_asset(\'js/my_js.js\') }}"></script>\n ```\n \n **Secure Assets**\n \n ```twig\n <link rel="stylesheet" href="{{ secure_linguist_asset(\'css/style.css\') }}">\n <script type="text/javascript" src="{{ secure_linguist_asset(\'js/my_js.js\') }}"></script>\n```\n\n## Queues\n\nTo make localization work in queues you need to run `Linguist->localize($theLocaleYouWant)` inside the queued item.\n\n## Licence\n\nMIT'