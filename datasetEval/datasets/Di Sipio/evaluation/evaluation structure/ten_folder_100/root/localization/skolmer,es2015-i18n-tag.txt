b'# i18n Tagged Template Literals \n[![All Contributors](https://img.shields.io/badge/all_contributors-4-orange.svg?style=flat-square)](#contributors)\n[![Build Status](https://img.shields.io/travis/skolmer/es2015-i18n-tag/master.svg?style=flat)](https://travis-ci.org/skolmer/es2015-i18n-tag) [![Coverage Status](https://coveralls.io/repos/github/skolmer/es2015-i18n-tag/badge.svg?branch=master)](https://coveralls.io/github/skolmer/es2015-i18n-tag?branch=master) [![npm version](https://img.shields.io/npm/v/es2015-i18n-tag.svg?style=flat)](https://www.npmjs.com/package/es2015-i18n-tag) [![npm](https://img.shields.io/npm/dw/es2015-i18n-tag.svg)](https://www.npmjs.com/package/es2015-i18n-tag/) [![semantic-release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg)](https://github.com/semantic-release/semantic-release)\n[![Commitizen friendly](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/) [![MIT License](https://img.shields.io/npm/l/ghooks.svg)](http://opensource.org/licenses/MIT)\n\n[![NPM](https://nodei.co/npm/es2015-i18n-tag.png?downloads=true&downloadRank=true&stars=true)](https://www.npmjs.com/package/es2015-i18n-tag/) \n\n[![i18n Tagged Template Literals](images/es2015-i18n-tag-icon-big.jpg)](http://i18n-tag.kolmer.net/)\n\n## Table of Contents\n\n* [Overview](#overview)\n* [Features](#features)\n* [Compatibility](#compatibility)\n* [Examples](#examples)\n* [Installation](#installation)\n* [Usage](#usage)\n  * [UMD module on unpkg.com](#umd-module-on-unpkgcom) \n  * [Import and Configuration](#import-and-configuration)\n  * [Currency formatting](#currency-formatting)\n  * [Date formatting](#date-formatting)\n    * [Standard format strings](#standard-format-strings)\n  * [Percentage formatting](#percentage-formatting) \n  * [Number formatting](#number-formatting)\n  * [Pluralization](#pluralization)\n  * [Nested templates](#nested-templates)\n  * [Standard format strings](#standard-format-strings)\n  * [Translation Groups](#translation-groups)\n    * [Babel generated file module groups](#babel-generated-file-module-groups)\n      * [.babelrc](#babelrc) \n      * [Project Structure](#project-structure)\n      * [translations.de.json](#translationsdejson)\n      * [App.js](#appjs)\n      * [i18nGroup Class Decorator](#i18ngroup-class-decorator)\n  * [Configuration Groups](#configuration-groups)\n    * [i18n Option](#i18n-option)\n    * [i18nGroup Class Decorator](#i18ngroup-class-decorator)\n  * [Translating without template literals](#translating-without-template-literals)\n    * [Simple string translation](#simple-string-translation)\n    * [Using formatters](#using-formatters)\n    * [Using config and translation groups](#using-config-and-translation-groups)\n* [Translations as CommonJS Modules](#translations-as-commonjs-modules)\n  * [./my-lib/de/index.js](#my-libdeindexjs)\n  * [./my-lib/index.js](#my-libindexjs)\n  * [Import library with german translations into an app](#import-library-with-german-translations-into-an-app)\n* [Tools](#tools)\n  * [Build time translation](#build-time-translation)\n  * [JSON Schema](#json-schema)\n* [Credits](#credits)\n* [License](#license)\n\n## Overview\n\nThis template literal tag adds support for i18n and l10n (translation and internationalization) to your JavaScript project.\nIt provides the following benefits:\n\n* Very small footprint ![Common JS Module](https://badges.herokuapp.com/size/npm/es2015-i18n-tag/dist/lib/index.js?label=common%20js%20module) ![Minified + gzip](https://badges.herokuapp.com/size/npm/es2015-i18n-tag/dist/lib/index.umd.min.js?label=minified%20%2B%20gzip&gzip=true)\n* Powerful [ES2015 standard template literal](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#Tagged_template_literals) syntax\n* Internationalization based on [ECMA-402](http://www.ecma-international.org/ecma-402/2.0/) standard [Intl](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl) browser API\n* [JSON Schema](http://json-schema.org/documentation.html) powered translations\n* [Tools](#tools) that can be integrated into your build pipeline and [IDE](https://github.com/skolmer/i18n-tag-schema#ide-integration)\n\n## Features\n\n* Translate and internationalize your JavaScript project\n* Translate your JavaScript library at [buildtime](#build-time-translation)\n* Generate a [schema](#json-schema) of all i18n tagged template literals in your project for easy JSON based translations\n* Export translations [as CommonJS modules](#translations-as-commonjs-modules)\n* [Validate translations](https://github.com/skolmer/i18n-tag-schema#validate-translation-file) and track translation coverage of your project\n\n## Compatibility\n\nThis library is using the ECMAScript Internationalization API. ES Internationalization API is implemented in all modern Browsers. For node.js projects you can use Andy Earnshaw\'s excellent Intl.js polyfill [[#34](https://github.com/skolmer/es2015-i18n-tag/issues/34#issuecomment-303114372)]:\n* [Intl Browser Support](http://caniuse.com/#search=Intl)\n* [Intl Polyfill](https://github.com/andyearnshaw/Intl.js)\n\n## Examples\n\n* [JS Bin Playground](https://jsbin.com/rojilu/edit?js,output)\n* [React/webpack](https://github.com/skolmer/i18n-tag-examples/tree/master/ReactJS)\n* [jQuery/gulp](https://github.com/skolmer/i18n-tag-examples/tree/master/Simple)\n\n## Installation\n```sh\n$ npm install es2015-i18n-tag --save\n```\n\n## Usage\n\nThis library is available as CommonJS module and as UMD module that is consumable in CommonJS, AMD and with script tags. \nThe UMD module can be used in [environments that don\'t support CommonJS modules](https://jsbin.com/rojilu/edit?html,js,output). It is highly recommended to use es2015-i18n-tag as CommonJS module with babel and [webpack](https://github.com/skolmer/i18n-tag-examples/tree/master/ReactJS) or [browserify](https://github.com/skolmer/i18n-tag-examples/tree/master/Simple). In a Node.js environment you have to use the [Intl Polyfill](https://github.com/andyearnshaw/Intl.js#intljs-and-node) to add support for additional locales [[#34](https://github.com/skolmer/es2015-i18n-tag/issues/34#issuecomment-303114372)].\n\n### UMD module on unpkg.com\n\n`https://unpkg.com/es2015-i18n-tag/dist/lib/index.umd.min.js`\n\n### Import and Configuration\n```js   \nimport i18n, { i18nConfig }  from \'es2015-i18n-tag\'\n\ni18nConfig({\n    locales: \'de-DE\',    \n    group: \'my-lib\', // Optional, can be used to avoid configuration overrides. This is recommended for libraries!\n    translations: {\n        "Hello ${0}, you have ${1} in your bank account.": "Hallo ${0}, Sie haben ${1} auf Ihrem Bankkonto."\n    },\n    number: {      \n        [...options] // Intl NumberFormat options as described here: https://goo.gl/pDwbG2\n    },\n    date: {\n        [...options] // Intl DateTimeFormat options as described here: https://goo.gl/lslekB\n    }\n})\n\nconst name = \'Steffen\'\nconst amount = 1250.33\n      \nconsole.log(i18n`Hello ${ name }, you have ${ amount }:c in your bank account.`)\n// Hallo Steffen, Sie haben US$\xc2\xa01,250.33 auf Ihrem Bankkonto.\n```\n\n### Currency formatting\n```js  \ni18nConfig({\n    number: { \n        currency: \'EUR\'\n    }\n})\n\nconsole.log(i18n`Hello ${ name }, you have ${ amount }:c in your bank account.`)\n// Hallo Steffen, Sie haben \xe2\x82\xac\xc2\xa01,250.33 auf Ihrem Bankkonto.\n\nconsole.log(i18n`Hello ${ name }, you have ${ amount }:c(USD) in your bank account.`)\n// Hallo Steffen, Sie haben US$\xc2\xa01,250.33 auf Ihrem Bankkonto.\n```\n\n### Date formatting\n```js\ni18nConfig({\n    locales: \'en-US\',\n    date: { \n        hour12: false \n    }\n})\n\nconsole.log(i18n`Hello ${name}, the date is ${new Date(2012, 11, 20, 19, 0, 0)}:t.`)\n// Hello Steffen, the date is 12/20/2012, 19:00:00.\n```\n#### Standard format strings\n\n```js\nconst date = new Date(2012, 11, 20, 19, 0, 0);\n\ni18n`The date is ${date}:t(D).`\n\n// The date is Thursday, December 20, 2012.\n```\n\nThe following standard format strings can be applied to a template expression of type [Date](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date):\n\n\n| Format specifier | Description                             | Examples                                |\n|------------------|-----------------------------------------|-----------------------------------------|\n| "d"              | Short date pattern                      | 12/20/2012                              |\n| "D"              | Long date pattern                       | Thursday, December 20, 2012             |\n| "f"              | Full date/time pattern (short time)     | Thursday, December 20, 2012, 7:00 PM    |\n| "F"              | Full date/time pattern (long time)      | Thursday, December 20, 2012, 7:00:00 PM |\n| "g"              | General date/time pattern (short time)  | 12/20/2012, 7:00 PM                     |\n| "G"              | General date/time pattern (long time)   | 12/20/2012, 7:00:00 PM                  |\n| "M", "m"         | Month/day pattern                       | December 20                             |\n| "O", "o"         | ISO 8601 pattern                        | 2012-12-20T18:00:00.000Z                |\n| "R", "r"         | RFC 1123 pattern                        | Thu, 20 Dec 2012 18:00:00 GMT           |\n| "t"              | Short time pattern                      | 7:00 PM                                 |\n| "T"              | Long time pattern                       | 7:00:00 PM                              |\n| "Y", "y"         | Year month pattern                      | December 2012                           |\n\n### Percentage formatting\n```js       \nconsole.log(i18n`Hello ${name}, the percentage is ${0.01}:p.`)\n// Hello Steffen, the percentage is 1%.\n\nconsole.log(i18n`Hello ${name}, the percentage is ${0.005}:p(1).`)\n// Hello Steffen, the percentage is 0.5%.\n\ni18nConfig({\n    locales: \'de-DE\'\n})\nconsole.log(i18n`Hello ${name}, the percentage is ${0.01}:p.`)\n// Hello Steffen, the percentage is 1 %.\n```\n\n### Number formatting\n```js   \nconsole.log(i18n`Hello ${name}, the number is ${12345.678}:n(2).`)\n// Hello Steffen, the number is 12,345.67.\n\ni18nConfig({\n    locales: \'de-DE\'\n})\nconsole.log(i18n`Hello ${name}, the number is ${12345.678}:n(2).`)\n// Hello Steffen, the number is 12.345,67.\n```\n\n### Pluralization\n\nYou can use [nested templates](#nested-templates) for pluralization as shown in this [example](https://jsbin.com/zubugedeja/edit?js,output).\n\n### Nested templates\n```js\nlet hello = [\n    { name: "Steffen", percentage: 0.2 },\n    { name: "Jack", percentage: 0.8 }\n]\n        \nconsole.log(i18n`\n    <users>\n    ${hello.map((item) => i18n`\n        <user name="${item.name}">${item.percentage}:p</user>\n    `).join(\'\')}\n    </users>\n`)\n// <users>\n// \n//     <user name="Steffen">20%</user>\n// \n//     <user name="Jack">80%</user>\n// \n// </users>\n```\n> **NOTE:** For easy translation of multiline template literals use one of the following [json schema generators](#json-schema).\n\n### Standard format strings\n\nYou can add custom standard formatters similar to the predefined DateTime formatters. Valid types are `date`, `number` and `string`.\n```js\ni18nConfig({\n    standardFormatters: {\n        number: {\n            x: (locales, numberOptions, value) => value.toLocaleString(locales, Object.assign({}, numberOptions, { style: \'percent\' }))\n        }\n    }\n})\n\nconsole.log(i18n`${0.77}:n(x)`)\n// 77%\n```\n\n### Translation Groups\n\nTranslation groups can be very useful to group translations by context. It can also be useful to avoid key duplicates in larger projects.\nYou can use [babel-plugin-i18n-tag-translate](https://github.com/skolmer/babel-plugin-i18n-tag-translate) to inject the relative path of your module as group name. Babel will inject `const __translationGroup = \'relative/path/to/module.ext\'` into each module.\n\n#### Babel generated file module groups\n\n[Example](https://github.com/skolmer/i18n-tag-examples/tree/master/ReactJS)\n\n##### .babelrc\n```json\n{\n  "plugins": [\n    ["i18n-tag-translate", {\n      "groupDir": "./src"\n    }]\n  ]\n}\n```\n##### Project Structure\n```\n.\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 src\n|   \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 components\n|       \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 App.js\n|       \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 Clock.js\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 .babelrc\n```\n##### translations.de.json\n```json\n{\n    "components/App.js": {\n        "Welcome": "Willkommen"\n    },\n    "components/Clock.js": {\n        "Time": "Zeit"\n    }\n}\n```\n##### App.js\n```js\ni18n(__translationGroup)`Welcome` // Select translation from module group e.g. "components/App.js"\ni18n(\'components/Clock.js\')`Time` // Select translation from a custom group\n```\n##### i18nGroup Class Decorator\n```js\nimport { i18nGroup } from \'es2015-i18n-tag\'\n\n/* default syntax */\nclass Clock {\n    tick() {\n        return this.i18n`Time: ${new Date()}:t(T)` // you have to use the class instance of i18n to get the grouped translation\n    }\n}\nexport default i18nGroup(__translationGroup)(Clock)\n\n\n/* experimental class decorator syntax */\n@i18nGroup(__translationGroup)\nclass Clock {\n    tick() {\n        return this.i18n`Time: ${new Date()}:t(T)` // you have to use the class instance of i18n to get the grouped translation\n    }\n}\nexport default Clock\n```\n\n### Configuration Groups\n\nConfiguration groups should be used by libraries to avoid configuration overrides. Configuration groups are like namespaces and only applied if the group name is set via i18n tag or i18nGroup decorator.\n\n##### i18n Option\n```js\ni18n(__translationGroup, \'my-lib\')`Welcome` // Select translation from module group e.g. "components/App.js"\ni18n(\'components/Clock.js\', \'my-lib\')`Time` // Select translation from a custom group\n```\n##### i18nGroup Class Decorator\n```js\nimport { i18nGroup, i18nConfig } from \'es2015-i18n-tag\'\n\ni18nConfig({\n    locales: \'de-DE\',\n    group: \'my-lib\' // set translation and i18n config for \'my-lib\'\n    translations: {\n        "components/App.js": {\n            "Welcome": "Willkommen"\n        },\n        "components/Clock.js": {\n            "Time": "Zeit"\n        }\n    }\n})\n\n/* default syntax */\nclass Clock {\n    tick() {\n        return this.i18n`Time: ${new Date()}:t(T)`\n    }\n}\nexport default i18nGroup(__translationGroup, \'my-lib\')(Clock)\n\n\n/* experimental class decorator syntax */\n@i18nGroup(__translationGroup, \'my-lib\')\nclass Clock {\n    tick() {\n        return this.i18n`Time: ${new Date()}:t(T)`\n    }\n}\nexport default Clock\n```\n\n### Translating without template literals\n\nIf you have to translate variables that cannot be put into a template literal, you can use the `i18n.translate()` helper function.\n\n#### Simple string translation\n\n```js\ni18n.translate(\'Welcome\')\n\nvar somVar = \'translationkey\'\ni18n.translate(somVar) \n```\n\n#### Using formatters\n\n```js\nconst name = \'Steffen\'\nconst amount = 1250.33\n      \ni18n.translate(\'Hello ${0}, you have ${1} in your bank account.\', name, { value: amount, formatter: \'c\'})\n\ni18n.translate(\'Total: ${0}\', { value: amount, formatter: \'d\', format: 2})\n```\n\n#### Using config and translation groups\n\n```js\ni18n(__translationGroup, \'my-lib\').translate(\'Welcome\') // Select translation from module group e.g. "components/App.js"\ni18n(\'components/Clock.js\', \'my-lib\').translate(\'Time\') // Select translation from a custom group\n\nclass Clock {\n    tick() {\n        return this.i18n.translate(\'Time: ${0}\', { value: new Date(), formatter: \'t\', format: \'T\' })\n    }\n}\nexport default i18nGroup(__translationGroup, \'my-lib\')(Clock)\n```\n\n\n## Translations as CommonJS Modules\n\nIf you are working on a multilingual library it might be useful to export i18n settings and translations as CommonJS modules. This can be easily accomplished with webpack and [json-loader](https://github.com/webpack/json-loader) as shown in this example:\n\n[Example](https://github.com/skolmer/i18n-tag-examples/tree/master/MultilingualLibrary)\n\n### ./my-lib/de/index.js\n\n```js\nimport translations from \'json!../../translations/translation.de.json\'\n\ni18nConfig({\n    locales: \'de-DE\',\n    group: \'my-lib\' // set translation and i18n config for \'my-lib\'\n    number: { \n        currency: \'EUR\'\n    },\n    translations\n}) // set internationalization settings and add imported translations\n\n```\n\n### ./my-lib/index.js\n```js\n@i18nGroup(\'\', \'my-lib\')\nclass Clock {\n    tick() {\n        return this.i18n`Time: ${new Date()}:t(T)`\n    }\n}\n```\n\n### Import library with german translations into an app\n\n```js\nimport my-lib from \'my-lib\'\nimport \'my-lib/de\' // import german i18n configuration and translation\n```\n\n## Tools\n\n### Build time translation\n* [babel-plugin-i18n-tag-translate](https://github.com/skolmer/babel-plugin-i18n-tag-translate): Translate your template literals at build time or add filename groups [![npm version](https://img.shields.io/npm/v/babel-plugin-i18n-tag-translate.svg?style=flat)](https://www.npmjs.com/package/babel-plugin-i18n-tag-translate)\n\n### JSON Schema\n* [i18n-tag-schema](https://github.com/skolmer/i18n-tag-schema): JSON Schema based translation validation and tools [![npm version](https://img.shields.io/npm/v/i18n-tag-schema.svg?style=flat)](https://www.npmjs.com/package/i18n-tag-schema)\n* [vscode-18n-tag-schema](https://github.com/skolmer/vscode-i18n-tag-schema): Visual Studio Code Extension for JSON Schema based translation validation and tools [![Marketplace Version](https://vsmarketplacebadge.apphb.com/version-short/skolmer.vscode-i18n-tag-schema.svg)](https://marketplace.visualstudio.com/items?itemName=skolmer.vscode-i18n-tag-schema)\n\n## Credits\n\nThanks to [Jack Hsu](https://github.com/jaysoo) for his initial draft of an [i18n template literal](http://jaysoo.ca/2014/03/20/i18n-with-es6-template-strings/).\n\n## License\n\nCopyright (c) 2016-2019 Steffen Kolmer\n\nThis software is licensed under the MIT license.  See the `LICENSE` file\naccompanying this software for terms of use.\n\n## Contributors\n\nThanks goes to these wonderful people ([emoji key](https://github.com/all-contributors/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n<table>\n  <tr>\n    <td align="center"><a href="https://github.com/arthot"><img src="https://avatars1.githubusercontent.com/u/1815294?v=4" width="100px;" alt="Artem"/><br /><sub><b>Artem</b></sub></a><br /><a href="#infra-arthot" title="Infrastructure (Hosting, Build-Tools, etc)">\xf0\x9f\x9a\x87</a> <a href="https://github.com/skolmer/es2015-i18n-tag/commits?author=arthot" title="Tests">\xe2\x9a\xa0\xef\xb8\x8f</a> <a href="https://github.com/skolmer/es2015-i18n-tag/commits?author=arthot" title="Code">\xf0\x9f\x92\xbb</a></td>\n    <td align="center"><a href="http://nourish.je"><img src="https://avatars1.githubusercontent.com/u/1677829?v=4" width="100px;" alt="Steve Le Roy Harris"/><br /><sub><b>Steve Le Roy Harris</b></sub></a><br /><a href="#infra-simlrh" title="Infrastructure (Hosting, Build-Tools, etc)">\xf0\x9f\x9a\x87</a> <a href="https://github.com/skolmer/es2015-i18n-tag/commits?author=simlrh" title="Tests">\xe2\x9a\xa0\xef\xb8\x8f</a> <a href="https://github.com/skolmer/es2015-i18n-tag/commits?author=simlrh" title="Code">\xf0\x9f\x92\xbb</a></td>\n    <td align="center"><a href="https://github.com/SaiX123"><img src="https://avatars0.githubusercontent.com/u/29754416?v=4" width="100px;" alt="SaiX123"/><br /><sub><b>SaiX123</b></sub></a><br /><a href="#infra-SaiX123" title="Infrastructure (Hosting, Build-Tools, etc)">\xf0\x9f\x9a\x87</a> <a href="https://github.com/skolmer/es2015-i18n-tag/commits?author=SaiX123" title="Tests">\xe2\x9a\xa0\xef\xb8\x8f</a> <a href="https://github.com/skolmer/es2015-i18n-tag/commits?author=SaiX123" title="Code">\xf0\x9f\x92\xbb</a></td>\n    <td align="center"><a href="https://github.com/nor3"><img src="https://avatars3.githubusercontent.com/u/946620?v=4" width="100px;" alt="nor3"/><br /><sub><b>nor3</b></sub></a><br /><a href="https://github.com/skolmer/es2015-i18n-tag/commits?author=nor3" title="Tests">\xe2\x9a\xa0\xef\xb8\x8f</a> <a href="https://github.com/skolmer/es2015-i18n-tag/commits?author=nor3" title="Code">\xf0\x9f\x92\xbb</a></td>\n  </tr>\n</table>\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind welcome!\n'