b'# React Native Globalize\n[![NPM Version][npm-image]][npm-url] [![Build Status][build-image]][build-url] [![Coverage Status][coverage-image]][coverage-url] [![Dependency Status][depstat-image]][depstat-url] [![Dev Dependency Status][devdepstat-image]][devdepstat-url]\n\nSimple globalization library for React Native. Provides various formatting functions as well as easy-to-use React Native components.\n\n## About React Native Globalize\n\nReact Native Globalize can format (and parse) numbers, dates, currency, and messages (using the ICU message pattern) with the correct plural rules for the language/locale. This functionality depends on CLDR data for the languages/locales being used. By default, many (but not all) languages/locales and currencies are loaded by default and you can pass additional CLDR data in various ways. However, it is recommended to customize the CLDR data (see below) to only include what you need in order to minimize the bundle size and startup time.\n\n### Default Locales & Currencies\n```javascript\nconst locales = [\n  \'am\',           // Amharic\n  \'ar\',           // Arabic\n  \'bg\',           // Bulgarian\n  \'bn\',           // Bengali\n  \'ca\',           // Catalan\n  \'cs\',           // Czech\n  \'da\',           // Danish\n  \'de\',           // German\n  \'el\',           // Greek\n  \'en\',           // English (United States)\n  \'en-GB\',        // English (Great Britain)\n  \'es\',           // Spanish\n  \'es-419\',       // Spanish (Latin America & Caribbean)\n  \'et\',           // Estonian\n  \'fa\',           // Farsi\n  \'fi\',           // Finnish\n  \'fil\',          // Filipino\n  \'fr\',           // French\n  \'gu\',           // Gujarati\n  \'he\',           // Hebrew\n  \'hi\',           // Hindi\n  \'hr\',           // Croatian\n  \'hu\',           // Hungarian\n  \'id\',           // Indonesian\n  \'it\',           // Italian\n  \'ja\',           // Japanese\n  \'kn\',           // Kannada\n  \'ko\',           // Korean\n  \'lt\',           // Lithuanian\n  \'lv\',           // Latvian\n  \'ml\',           // Malayalam\n  \'mr\',           // Marathi\n  \'ms\',           // Malay\n  \'nb\',           // Norwegian\n  \'nl\',           // Dutch\n  \'pl\',           // Polish\n  \'pt\',           // Portuguese\n  \'pt-PT\',        // Portuguese (Portugal)\n  \'ro\',           // Romanian\n  \'ru\',           // Russian\n  \'sk\',           // Slovak\n  \'sl\',           // Slovenian\n  \'sr\',           // Serbian\n  \'sv\',           // Swedish\n  \'sw\',           // Swahili\n  \'ta\',           // Tamil\n  \'te\',           // Telugu\n  \'th\',           // Thai\n  \'tr\',           // Turkish\n  \'uk\',           // Ukrainian\n  \'vi\',           // Vietnamese\n  \'zh\',           // Chinese\n  \'zh-Hans\',      // Chinese (Simplified)\n  \'zh-Hant\',      // Chinese (Traditional)\n];\n\nconst currencies = [\n  \'CAD\',          // Canadian Dollar\n  \'EUR\',          // Euro\n  \'GBP\',          // British Pound\n  \'USD\',          // US Dollar\n];\n```\n\n### Customizing the included languages and/or currencies\n\n1. Fork this repo.\n2. Edit the `locales` and `currencies` arrays in `gulpfile.js` to suit your needs.\n3. Run `npm run cldr` or `yarn run cldr`.\n4. The `lib/cldr.json` file is now your own customized version with only what you need.\n\n## Installation\n\nAfter installing using npm/yarn, place `FormattedProvider` at the root of your application to propagate the required context to all components. Then use any of the included `Formatted*` components anywhere in your application or access the formatting functions directly using the `withGlobalize` HOC.\n\n**NOTE:** Version 2.0.0 and up requires React `>= 16.3.1` & React Native `>= 0.55.0`!\n\n## Usage\n\n### FormattedProvider\n#### Props\n| Prop | Type | Default | Description |\n| ---- | ---- | ------- | ----------- |\n| `locale` | `String` | `en` | The language/locale to be used for formatting. |\n| `currency` | `String` | `USD` | The default currency code to be used for currency formatting. |\n| `messages` | `Object` | | ICU-formatted messages for use with `FormattedMessage` and `getMessageFormatter`. |\n| `cldr` | `Array` | | Additional CLDR data to load (e.g. `cldr={[require(\'path/to/file.json\'), require(\'path/to/anotherFile.json\')]}`). |\n| `localeFallback` | `Boolean` | `false` | Automatically attempt to find a fallback when CLDR data for the selected locale is missing (e.g. `en_NZ` -> `en`). |\n| `warnOnMissingMessage` | `Boolean` | `true` | Display a warning message when a message key is missing. |\n\n```javascript\nimport { FormattedProvider } from \'react-native-globalize\';\n\nconst Messages = {\n  en: {\n    hello: \'Hello\',\n  },\n  es: {\n    hello: \'Hola\',\n  },\n};\n\nclass MyApp extends PureComponent {\n  render() {\n    return (\n      <FormattedProvider locale="en" currency="USD" messages={Messages}>\n        <App />\n      </FormattedProvider>\n    )\n  }\n}\n```\n\n### FormattedCurrency\n\n#### Props\n| Prop | Type | Default | Description |\n| ---- | ---- | ------- | ----------- |\n| `value` | `Number` | | ***Required.*** The number you want to format. |\n| `currency` | `String` | | Defaults to currency set on `FormattedWrapper`. |\n| `maximumFractionDigits` | `Int` | | Non-negative integer indicating the maximum fraction digits to be shown. Numbers will be rounded or padded with trailing zeroes as necessary. |\n| `minimumFractionDigits` | `Int` | | Non-negative integer indicating the minimum fraction digits to be shown. Numbers will be rounded or padded with trailing zeroes as necessary. |\n| `minimumIntegerDigits` | `Int` | | Non-negative integer indicating the minimum integer digits to be shown. Numbers will be padded with leading zeroes as necessary. |\n| `maximumSignificantDigits` | `Int` | | Non-negative integer indicating the maximum significant digits to be shown. Numbers will be rounded or padded with trailing zeroes as necessary. |\n| `minimumSignificantDigits` | `Int` | | Non-negative integer indicating the minimum significant digits to be shown. Numbers will be rounded or padded with trailing zeroes as necessary. |\n| `numberStyle` | `String` | `symbol` | Formatting style to use when displaying currency. Values: `symbol` ($1.00), `accounting`, `code` (1.00 USD), or `name` (1.00 US dollar). |\n| `round` | `String` | `round` | Controls the rounding method used when rouding required (e.g. when using `maximumFractionDigits`). Values: `ceil`, `floor`, `round`, or `truncate`.  |\n| `style` | `TextStyle` | | Styles to apply to resulting `Text` node. |\n| `useGrouping` | `Boolean` | `true` | Whether a grouping separator should be used. |\n| `accessibilityLabel` | `String` | | Accessibility label for screen readers. |\n| `adjustsFontSizeToFit` | `Boolean` | `false` | Whether font size should be scaled down to fit. |\n| `allowFontScaling` | `Boolean` | `true` | Whether fonts should scale to respect Text Size accessibility settings. |\n\n*Note: Using `maximumFractionDigits`, `minimumFractionDigits`, ..., `useGrouping` overrides the language default derived from CLDR.*\n\n```javascript\nimport { FormattedCurrency } from \'react-native-globalize\';\n\nclass MyComponent extends PureComponent {\n  render() {\n    return (\n      <FormattedCurrency\n        value={9.99}\n        currency="USD"\n        style={{ color: \'red\' }} />\n    );\n  }\n}\n// $9.99\n```\n\n### FormattedDate\n\n#### Props\n| Prop | Type | Default | Description |\n| ---- | ---- | ------- | ----------- |\n| `value` | `Date` | | ***Required.*** The date object you want to format. |\n| `date` | `String` | | One of: `full`, `long`, `medium`, `short`. Outputs just a date (e.g. `Monday, November 1, 2010`). |\n| `datetime` | `String` | | One of: `full`, `long`, `medium`, `short`. Outputs a datetime (e.g. `Monday, November 1, 2010 at 5:55:00 PM GMT-02:00`). |\n| `skeleton` | `String` | | Date format skeleton. See the [CLDR documentation](http://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table). *Not all options work* |\n| `style` | `TextStyle` | | Styles to apply to resulting `Text` node. |\n| `time` | `String` | | One of: `full`, `long`, `medium`, `short`. Outputs just a time (e.g. `5:55:00 PM GMT-02:00`). |\n| `accessibilityLabel` | `String` | | Accessibility label for screen readers. |\n| `adjustsFontSizeToFit` | `Boolean` | `false` | Whether font size should be scaled down to fit. |\n| `allowFontScaling` | `Boolean` | `true` | Whether fonts should scale to respect Text Size accessibility settings. |\n\n***Only ONE of `skeleton`, `date`, `time`, and `datetime` should be specified.***\n\n```javascript\nimport { FormattedDate } from \'react-native-globalize\';\n\nclass MyComponent extends PureComponent {\n  render() {\n    return (\n      <FormattedDate\n        value={new Date()}\n        style={{ color: \'red\' }}\n        skeleton="yMd" />\n    );\n  }\n}\n// 12/31/2015\n```\n\n### FormattedMessage\nFormat a message based on the ICU message format pattern and variables.\n\n#### Props\n| Prop | Type | Default | Description |\n| ---- | ---- | ------- | ----------- |\n| `message` | `Array/String` | | ***Required.*** The key of the message you want to format. Can be passed as a string (e.g. test/hello) or an array (e.g. [\'test\', \'hello\']). |\n| `defaultMessage` | `String` | | A string to display if the message key does not exist. Otherwise, the message key itself will be displayed. |\n| `style` | `TextStyle` | | Styles to apply to resulting `Text` node. |\n| `values` | `Object` | `{}` | Variables for replacement/formatting. |\n| `accessibilityLabel` | `String` | | Accessibility label for screen readers. |\n| `adjustsFontSizeToFit` | `Boolean` | `false` | Whether font size should be scaled down to fit. |\n| `allowFontScaling` | `Boolean` | `true` | Whether fonts should scale to respect Text Size accessibility settings. |\n\n* Values/variables can also be passed as props. Any additional props other than the 4 above will be merged with the `values` object. *Note: Specific props will override the `values` object if both are given and keys collide.*\n* Values ***can also be components***. See the last example below.\n* See [ICU message formatting guidelines](http://userguide.icu-project.org/formatparse/messages) for more info.\n\n```javascript\n// Messages added via FormattedWrapper\nconst Messages = {\n  en: {\n    hello: \'Hey {first} {middle} {last},\',\n    test: {\n      select: \'{gender, select, female {{host} invites {guest} to her party} male {{host} invites {guest} to his party} other {{host} invites {guest} to their party}}\',\n      plural: \'You have {count, plural, one {one task} other {{count} tasks}} remaining\',\n      component: \'Hey {name}, you asked me to remind you about {item} at {time}!\',\n    },\n  },\n};\n\n// Example 1\nimport { FormattedMessage } from \'react-native-globalize\';\n\nclass MyComponent extends PureComponent {\n  render() {\n    return (\n      <FormattedMessage\n        message="hello"\n        first="John"\n        middle="William"\n        last="Smith"\n        style={{ color: \'red\' }} />\n    );\n  }\n}\n// Hey John William Smith,\n\n// Example 2\nimport { FormattedMessage } from \'react-native-globalize\';\n\nclass MyComponent extends PureComponent {\n  render() {\n    return (\n      <FormattedMessage\n        message="test/select"\n        values={{ gender: \'male\', host: \'Josh\', guest: \'Andrea\' }}\n        style={{ color: \'red\' }} />\n    );\n  }\n}\n// Josh invites Andrea to his party\n\n// Example 3\nimport { FormattedMessage } from \'react-native-globalize\';\n\nclass MyComponent extends PureComponent {\n  render() {\n    return (\n      <FormattedMessage\n        message={[\'test\', \'select\']}\n        gender="female"\n        host="Jennifer"\n        guest="Michael"\n        style={{ color: \'red\' }} />\n    );\n  }\n}\n// Jennifer invites Michael to her party\n\n// Example 4\nimport { FormattedMessage } from \'react-native-globalize\';\n\nclass MyComponent extends PureComponent {\n  render() {\n    return (\n      <FormattedMessage\n        message="test/plural"\n        values={{ count: 4 }}\n        style={{ color: \'red\' }} />\n    );\n  }\n}\n// You have 4 tasks remaining\n\n// Example 5\nimport { FormattedMessage } from \'react-native-globalize\';\n\nclass MyComponent extends PureComponent {\n  render() {\n    return (\n      <FormattedMessage\n        message="test/component"\n        name="Josh"\n        item="buying groceries"\n        time={<FormattedDate value={new Date()} time="short" />} />\n    );\n  }\n}\n// Hey Josh, you asked me to remind you about buying groceries at 4:00 PM\n```\n\n### FormattedNumber\n\n#### Props\n| Prop | Type | Default | Description |\n| ---- | ---- | ------- | ----------- |\n| `value` | `Number` | | ***Required.*** The number you want to format. |\n| `style` | `TextStyle` | | Styles to apply to resulting `Text` node. |\n| `maximumFractionDigits` | `Int` | | Non-negative integer indicating the maximum fraction digits to be shown. Numbers will be rounded or padded with trailing zeroes as necessary. |\n| `minimumFractionDigits` | `Int` | | Non-negative integer indicating the minimum fraction digits to be shown. Numbers will be rounded or padded with trailing zeroes as necessary. |\n| `minimumIntegerDigits` | `Int` | | Non-negative integer indicating the minimum integer digits to be shown. Numbers will be padded with leading zeroes as necessary. |\n| `maximumSignificantDigits` | `Int` | | Non-negative integer indicating the maximum significant digits to be shown. Numbers will be rounded or padded with trailing zeroes as necessary. |\n| `minimumSignificantDigits` | `Int` | | Non-negative integer indicating the minimum significant digits to be shown. Numbers will be rounded or padded with trailing zeroes as necessary. |\n| `numberStyle` | `String` | `symbol` | Formatting style to use when displaying currency. Values: `symbol` ($1.00), `accounting`, `code` (1.00 USD), or `name` (1.00 US dollar). |\n| `round` | `String` | `round` | Controls the rounding method used when rouding required (e.g. when using `maximumFractionDigits`). Values: `ceil`, `floor`, `round`, or `truncate`.  |\n| `useGrouping` | `Boolean` | `true` | Whether a grouping separator should be used. |\n| `accessibilityLabel` | `String` | | Accessibility label for screen readers. |\n| `adjustsFontSizeToFit` | `Boolean` | `false` | Whether font size should be scaled down to fit. |\n| `allowFontScaling` | `Boolean` | `true` | Whether fonts should scale to respect Text Size accessibility settings. |\n\n*Note: Using `maximumFractionDigits`, `minimumFractionDigits`, ..., `useGrouping` overrides the language default derived from CLDR.*\n\n```javascript\nimport { FormattedNumber } from \'react-native-globalize\';\n\nclass MyComponent extends PureComponent {\n  render() {\n    return (\n      <FormattedNumber\n        value={1.5}\n        minimumFractionDigits={2}\n        style={{ color: \'red\' }} />\n    )\n  }\n}\n// 1.50\n\n// Arabic (ar) selected\nimport { FormattedNumber } from \'react-native-globalize\';\n\nclass MyComponent extends PureComponent {\n  render() {\n    return (\n      <FormattedNumber\n        value={3.141592}\n        style={{ color: \'red\' }} />\n    )\n  }\n}\n// \xd9\xa3\xd9\xab\xd9\xa1\xd9\xa4\xd9\xa2\n```\n\n### FormattedPlural\n\n#### Props\n| Prop | Type | Default | Description |\n| ---- | ---- | ------- | ----------- |\n| `value` | `Number` | | ***Required.*** The value you want to base plural selection on. |\n| `style` | `TextStyle` | | Styles to apply to resulting `Text` node. |\n| `type` | `String` | `cardinal` | Control plural type. Values: `cardinal` or `ordinal`. |\n| `other` | `Node` | | Node to output when plural type is `other` or when node for type is not specified. |\n| `zero` | `Node` | | Node to output when plural type is `zero`. |\n| `one` | `Node` | | Node to output when plural type is `one`. |\n| `two` | `Node` | | Node to output when plural type is `two`. |\n| `few` | `Node` | | Node to output when plural type is `few`. |\n| `many` | `Node` | | Node to output when plural type is `many`. |\n| `accessibilityLabel` | `String` | | Accessibility label for screen readers. |\n| `adjustsFontSizeToFit` | `Boolean` | `false` | Whether font size should be scaled down to fit. |\n| `allowFontScaling` | `Boolean` | `true` | Whether fonts should scale to respect Text Size accessibility settings. |\n\n```javascript\nimport { FormattedPlural } from \'react-native-globalize\';\n\nclass MyComponent extends PureComponent {\n  render() {\n    return (\n      <FormattedPlural\n        value={0}\n        zero={<Text>:(</Text>}\n        other={<Text>:)</Text>} />\n    );\n  }\n}\n// :(\n```\n\n### FormattedRelativeTime\n\n#### Props\n| Prop | Type | Default | Description |\n| ---- | ---- | ------- | ----------- |\n| `value` | `Date` | | ***Required.*** The date you want to use to compute the difference from. |\n| `unit` | `String` | | ***Required.*** One of: `best`, `second`, `minute`, `hour`, `day`, `week`, `month`, `year`. |\n| `form` | `Mixed`  | | One of: `short`, `narrow`, `0`, `false`. Change output type. |\n| `style` | `TextStyle` | | Styles to apply to resulting `Text` node. |\n| `accessibilityLabel` | `String` | | Accessibility label for screen readers. |\n| `adjustsFontSizeToFit` | `Boolean` | `false` | Whether font size should be scaled down to fit. |\n| `allowFontScaling` | `Boolean` | `true` | Whether fonts should scale to respect Text Size accessibility settings. |\n\n```javascript\nimport { FormattedRelativeTime } from \'react-native-globalize\';\n\nclass MyComponent extends PureComponent {\n  render() {\n    return (\n      <FormattedRelativeTime\n        value={myDateObject}\n        unit="best"\n        style={{ color: \'red\' }} />\n    );\n  }\n}\n// 2 days ago\n```\n\n### FormattedTime\n\nSee [`FormattedDate`](#formatteddate). All props and functionality are identical.\n\n### FormattedUnit\n\n#### Props\n| Prop | Type | Default | Description |\n| ---- | ---- | ------- | ----------- |\n| `value` | `Number` | | ***Required.*** The number you want to format. |\n| `unit` | `String` | | ***Required.*** The unit to be formatted (e.g. `day`, `mile-per-hour`). See `main.{locale}.units` in `cldr.json` for options. |\n| `form` | `Mixed`  | | One of: `long`, `short`, `narrow`. Change output type. |\n| `numberFormatter` | `Function` | | A custom number formatter function from `getNumberFormatter` for customizing how number is displayed in output. |\n| `style` | `TextStyle` | | Styles to apply to resulting `Text` node. |\n| `accessibilityLabel` | `String` | | Accessibility label for screen readers. |\n| `adjustsFontSizeToFit` | `Boolean` | `false` | Whether font size should be scaled down to fit. |\n| `allowFontScaling` | `Boolean` | `true` | Whether fonts should scale to respect Text Size accessibility settings. |\n\n```javascript\n// Example 1\nimport { FormattedUnit } from \'react-native-globalize\';\n\nclass MyComponent extends PureComponent {\n  render() {\n    return (\n      <FormattedUnit\n        unit="mile-per-hour"\n        value={75}\n      />\n    )\n  }\n}\n// 75 miles per hour\n\n// Example 2\nimport { FormattedUnit } from \'react-native-globalize\';\n\nclass MyComponent extends PureComponent {\n  render() {\n    // Requires `withGlobalize` HOC to inject globalize prop\n    const numberFormatter = this.props.globalize.getNumberFormatter({\n      minimumFractionDigits: 2,\n      useGrouping: false,\n    });\n\n    return (\n      <FormattedUnit\n        form="narrow"\n        numberFormatter={numberFormatter}\n        unit="area-square-mile"\n        value={5000}\n      />\n    )\n  }\n}\n// 5000.00mi\xc2\xb2\n```\n\n### withGlobalize\nYou can access formatting functions directly should you need programmatic access to the results or if a component is not appropriate. The `withGlobalize` HOC will inject a `globalize` prop into your component, allowing you to access the same methods the `Formatted*` components use. For this to work, you must still have `FormattedProvider` at the root of you application.\n\n```javascript\nimport { withGlobalize } from \'react-native-globalize\';\n\nclass MyComponent extends PureComponent {\n  myFunction() {\n    const dateFormatter = this.props.globalize.getDateFormatter({skeleton: \'yMd\'});\n    const formattedDate = dateFormatter(new Date());\n\n    const currencyFormatter = this.props.globalize.getCurrencyFormatter(\'USD\', { minimumFractionDigits: 0, maximumFractionDigits: 0 });\n    const formattedCurrency = currencyFormatter(9.99);\n\n    const currencySymbol = this.props.globalize.getCurrencySymbol();\n  }\n}\n\nexport default withGlobalize(MyComponent);\n```\n\n### Globalize\nA few static methods are also available on the Globalize class. You can check whether CLDR data has been loaded for a given locale, get an array of all loaded locales, load additional CLDR data, and load additional ICU-formatted messages. Check out the examples below.\n\n```javascript\nimport { Globalize } from \'react-native-globalize\';\n\n// Check if a locale has CLDR data\nGlobalize.localeIsLoaded(\'en\');\n// true\n\n// Get an array of all loaded locales\nGlobalize.availableLocales();\n// [ \'am\', \'ar\', ... ]\n\n// Load additional CLDR data\nGlobalize.load([require(\'path/to/cldr/file.json\')]);\n\n// Load additional messages\nGlobalize.loadMessages({\n  en: {\n    test: \'Hi Josh!\',\n  },\n});\n```\n\n## License\n\n```\n Copyright (c) 2015-2019 Josh Swan\n\n Licensed under the The MIT License (MIT) (the "License");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n    https://raw.githubusercontent.com/joshswan/react-native-globalize/master/LICENSE\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an "AS IS" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n```\n\n[build-url]: https://travis-ci.org/joshswan/react-native-globalize\n[build-image]: https://travis-ci.org/joshswan/react-native-globalize.svg?branch=master\n[coverage-url]: https://coveralls.io/github/joshswan/react-native-globalize?branch=master\n[coverage-image]: https://coveralls.io/repos/github/joshswan/react-native-globalize/badge.svg?branch=master\n[depstat-url]: https://david-dm.org/joshswan/react-native-globalize\n[depstat-image]: https://david-dm.org/joshswan/react-native-globalize.svg\n[devdepstat-url]: https://david-dm.org/joshswan/react-native-globalize#info=devDependencies\n[devdepstat-image]: https://david-dm.org/joshswan/react-native-globalize/dev-status.svg\n[npm-url]: https://www.npmjs.com/package/react-native-globalize\n[npm-image]: https://badge.fury.io/js/react-native-globalize.svg\n'