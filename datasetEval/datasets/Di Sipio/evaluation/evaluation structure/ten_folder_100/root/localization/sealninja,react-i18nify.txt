b'# React I18nify\n\n**Note**: Looking for the v1 documentation? [See v1 branch](https://github.com/sealninja/react-i18nify/tree/v1).\n\nSimple i18n translation and localization components and helpers for React applications.\n\n[![NPM version](https://img.shields.io/npm/v/react-i18nify.svg?style=flat-square)](https://npmjs.org/package/react-i18nify)\n[![Downloads](https://img.shields.io/npm/dm/react-i18nify.svg?style=flat-square)](https://npmjs.org/package/react-i18nify)\n[![Dependency Status](https://img.shields.io/david/sealninja/react-i18nify?style=flat-square)](https://david-dm.org/sealninja/react-i18nify)\n\nA working example of this package can be found [here at RunKit](https://runkit.com/npm/react-i18nify).\n\n## Installation\n\nInstall by using npm:\n\n```\nnpm i --save react-i18nify\n```\n\n## Getting started\n\nStart by setting the translations and locale to be used:\n\n```javascript\nimport { setTranslations, setLocale } from \'react-i18nify\';\n\nsetTranslations({\n  en: {\n    application: {\n      title: \'Awesome app with i18n!\',\n      hello: \'Hello, %{name}!\'\n    },\n    date: {\n      long: \'MMMM do, yyyy\'\n    },\n    export: \'Export %{count} items\',\n    export_0: \'Nothing to export\',\n    export_1: \'Export %{count} item\',\n    two_lines: <div>Line 1<br />Line 2<div>\n  },\n  nl: {\n    application: {\n      title: \'Toffe app met i18n!\',\n      hello: \'Hallo, %{name}!\'\n    },\n    date: {\n      long: \'d MMMM yyyy\'\n    },\n    export: \'Exporteer %{count} dingen\',\n    export_0: \'Niks te exporteren\',\n    export_1: \'Exporteer %{count} ding\',\n    two_lines: <div>Regel 1<br />Regel 2</div>\n  }\n});\n\nsetLocale(\'nl\');\n```\n\nNow you\'re all set up to unleash the power of `react-i18nify`!\n\n## Components\n\nThe easiest way to translate or localize in your React application is by using the `Translate` and `Localize` components:\n\n```javascript\nimport { Translate, Localize } from \'react-i18nify\';\n\n<Translate value="application.title" />\n  // => Toffe app met i18n!\n<Translate value="application.hello" name="Aad" />\n  // => Hallo, Aad!\n<Translate value="export" count={1} />\n  // => Exporteer 1 ding\n<Translate value="export" count={2} />\n  // => Exporteer 2 dingen\n<Translate value="two_lines" />\n  // => <div>Regel 1<br />Regel 2</div>\n\n<Localize value="07-2016-04" dateFormat="date.long" parseFormat="dd-yyyy-MM" />\n  // => 7 april 2016\n<Localize value="2015-09-03" dateFormat="date.long" />\n  // => 3 september 2015\n<Localize value={10/3} options={{style: \'currency\', currency: \'EUR\', minimumFractionDigits: 2, maximumFractionDigits: 2}} />\n  // => \xe2\x82\xac 3,33\n```\n\n## Helpers\n\nIf for some reason, you cannot use the components, you can use the `t` and `l` helpers instead:\n\n```javascript\nimport { t, l } from \'react-i18nify\';\n\nt(\'application.title\');\n  // => Toffe app met i18n!\nt(\'application.hello\', {name: \'Aad\'});\n  // => Hallo, Aad!\'\nt(\'export\', {count: 0});\n  // => Niks te exporteren\nt(\'application.unknown_translation\');\n  // => unknown_translation\nt(\'application\', {name: \'Aad\'});\n  // => {hello: \'Hallo, Aad!\', title: \'Toffe app met i18n!\'}\n\nl(1385856000000, { dateFormat: \'date.long\' });\n  // => 1 december 2013\nl(Math.PI, { maximumFractionDigits: 2 });\n  // => 3,14\n```\n\nIf you want these helpers to be re-rendered automatically when the locale or translations change, you have to wrap them in a `<I18n>` component using its `render` prop:\n\n```javascript\nimport { I18n, t } from \'react-i18nify\';\n\n<I18n render={() => <input placeholder={t("application.title")} />} />\n```\n\n## Locales\n\nreact-i18nify uses [date-fns](https://github.com/date-fns/date-fns) internally to handle localization. In order to reduce the base bundle size, react-i18nify only includes the `en-US` locale by default. If you need additional locales, you can add them manually using `addLocale` or `addLocales`. For a list of available locales, refer to the [date-fns list](https://github.com/date-fns/date-fns/tree/master/src/locale).\n\n```javascript\nimport { addLocale, addLocales, setLocale } from \'react-i18nify\';\nimport nl from \'date-fns/locale/nl\';\nimport it from \'date-fns/locale/it\';\n\n// Add a single locale\naddLocale(\'nl\', nl);\nsetLocale(\'nl\');\n\n// Add multiple locales\naddLocales({\n  nl: nl,\n  it: it,\n});\nsetLocale(\'it\');\n```\n\n## API Reference\n\n### `<Translate>`\n\nReact translate component, with the following props:\n\n* `value` (string)\n\nThe translation key to translate.\n\n* Other props\n\nAll other provided props will be used as replacements for the translation.\n\n### `<Localize>`\n\nReact localize component, with the following props:\n\n* `value` (number|string|object)\n\nThe number or date to localize.\n\n* `dateFormat` (string)\n\nThe translation key for providing the format string. Only needed for localizing dates.\nFor the full list of formatting tokens which can be used in the format string, see the [date-fns documentation](https://date-fns.org/v2.0.1/docs/format).\n\n* `parseFormat` (string)\n\nAn optional formatting string for parsing the value when localizing dates.\nFor the full list of formatting tokens which can be used in the parsing string, see the [date-fns documentation](https://date-fns.org/v2.0.1/docs/parse).\n\n* `options` (object)\n\nWhen localizing numbers, the localize component supports all options as provided by the Javascript built-in `Intl.NumberFormat` object.\nFor the full list of options, see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat.\n\n### `<I18n>`\n\nReact I18n wrapper component, with the following prop:\n\n* `render` (func)\n\nThe return value of the provide function will be rendered and automatically re-render when the locale or translations change.\n\n### `addLocale(name, locale)`\n\nAdd a [date-fns locale](https://github.com/date-fns/date-fns/tree/master/src/locale) to the available locales.\n\n```javascript\nimport { addLocale, setLocale } from \'react-i18nify\';\nimport nl from \'date-fns/locale/nl\';\n\naddLocale(\'nl\', nl);\nsetLocale(\'nl\');\n```\n\n### `addLocales(localesObject)`\n\nAdd multiple [date-fns locales](https://github.com/date-fns/date-fns/tree/master/src/locale) to the available locales at once.\n\n```javascript\nimport { addLocales, setLocale } from \'react-i18nify\';\nimport nl from \'date-fns/locale/nl\';\nimport it from \'date-fns/locale/it\';\n\naddLocales({\n  nl: nl,\n  it: it,\n});\nsetLocale(\'it\');\n```\n\n### `setLocale(locale, rerenderComponents = true)`\n\nThe used locale can be set with this function. By default, changing the locale will re-render all components.\nThis behavior can be prevented by providing `false` as a second argument.\n\n### `getLocale()`\n\nGet the currently used locale.\n\n### `setTranslations(translations, rerenderComponents = true)`\n\nThe used translations can be set with this function. By default, changing the translations will re-render all components.\nThis behavior can be prevented by providing `false` as a second argument.\n\n### `getTranslations()`\n\nGet the currently used translations.\n\n### `setLocaleGetter(fn)`\n\nAlternatively to using `setLocale`, you can provide a callback to return the locale with `setLocaleGetter`:\n\n```javascript\nimport { setLocaleGetter } from \'react-i18nify\';\n\nconst localeFunction = () => \'nl\';\n\nsetLocaleGetter(localeFunction);\n```\n\n### `setTranslationsGetter(fn)`\n\nAlternatively to using `setTranslations`, you can provide a callback to return the translations with `setTranslationsGetter`:\n\n```javascript\nimport { setTranslationsGetter } from \'react-i18nify\';\n\nconst translationsFunction = () => ({\n  en: { ... },\n  nl: { ... }\n});\n\nsetTranslationsGetter(translationsFunction);\n```\n\n### `setHandleMissingTranslation(fn)`\n\nBy default, when a translation is missing, the translation key will be returned in a slightly formatted way,\nas can be seen in the `t(\'application.unknown_translation\');` example above.\nYou can however overwrite this behavior by setting a function to handle missing translations.\n\n```javascript\nimport { setHandleMissingTranslation, t } from \'react-i18nify\';\n\nsetHandleMissingTranslation((key, replacements) => `Missing translation: ${key}`);\n\nt(\'application.unknown_translation\');\n  // => Missing translation: application.unknown_translation\n```\n\n### `t(key, replacements = {})`\n\nHelper function to translate a `key`, given an optional set of `replacements`. See the above Helpers section for examples.\n\n### `l(value, options)`\n\nHelper function to localize a `value`, given a set of `options`. See the above Helpers section for examples.\n\nFor localizing dates, the `date-fns` library is used.\nA `dateFormat` option can be used for providing a translation key with the format string.\nFor the full list of formatting tokens which can be used in the format string, see the [date-fns documentation](https://date-fns.org/v2.0.1/docs/format).\nMoreover, `parseFormat` option can be used for providing a formatting string for parsing the value.\nFor the full list of formatting tokens which can be used in the parsing string, see the [date-fns documentation](https://date-fns.org/v2.0.1/docs/parse).\n\nFor number formatting, the localize helper supports all options as provided by the Javascript built-in `Intl.NumberFormat` object.\nFor the full list of options, see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat.\n\n### `forceComponentsUpdate()`\n\nThis function can be called to force a re-render of all I18n components.\n\n## Example application with SSR\n\nAn example application with server-side rendering using features of `react-i18nify` can be found at https://github.com/sealninja/react-ssr-example.\n\n## License\n\nMIT\n\n<a href="https://sealninja.com"><img src="https://sealninja.com/assets/badge.png" alt="Sealninja" height="96"></a>\n'