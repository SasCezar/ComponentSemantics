b'# Angular l10n\n[![Build Status](https://travis-ci.org/robisim74/angular-l10n.svg?branch=master)](https://travis-ci.org/robisim74/angular-l10n) [![npm version](https://badge.fury.io/js/angular-l10n.svg)](https://badge.fury.io/js/angular-l10n) [![npm](https://img.shields.io/npm/dm/angular-l10n.svg)](https://www.npmjs.com/package/angular-l10n) [![npm](https://img.shields.io/npm/l/angular-l10n.svg)](https://www.npmjs.com/package/angular-l10n)\n> An Angular library to translate texts, dates and numbers\n\nThis library is for localization of **Angular** apps. It allows, in addition to translation, to format dates and numbers through [Internationalization API](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl)\n\n\n## Documentation\n[Angular l10n Specification](https://robisim74.github.io/angular-l10n/)\n\n\n## Architecture\n![Architecture](images/architecture.png)\n\n\n## Table of Contents\n- [Installation](#installation)\n- [Usage](#usage)\n- [Types](#types)\n- [Intl API](#intl-api)\n- [Previous versions](#previous-versions)\n- [Contributing](#contributing)\n- [License](#license)\n\n\n## Installation\n```Shell\nnpm install angular-l10n --save \n```\n\n\n## Usage\nYou can find a complete sample app [here](projects/angular-l10n-app)\n\n### Configuration\nCreate the configuration:\n```TypeScript\nexport const l10nConfig: L10nConfig = {\n    format: \'language-region\',\n    providers: [\n        { name: \'app\', asset: i18nAsset }\n    ],\n    cache: true,\n    keySeparator: \'.\',\n    defaultLocale: { language: \'en-US\', currency: \'USD\' },\n    schema: [\n        { locale: { language: \'en-US\', currency: \'USD\' }, dir: \'ltr\', text: \'United States\' },\n        { locale: { language: \'it-IT\', currency: \'EUR\' }, dir: \'ltr\', text: \'Italia\' }\n    ]\n};\n\nexport function initL10n(l10nLoader: L10nLoader): () => Promise<void> {\n    return () => l10nLoader.init();\n}\n\nconst i18nAsset = {\n    \'en-US\': {\n        greeting: "Hello world!",\n        whoIAm: "I am {{name}}"\n    },\n    \'it-IT\': {\n        greeting: "Ciao mondo!",\n        whoIAm: "Sono {{name}}"\n    }\n};\n```\nImport the modules and the configuration:\n```TypeScript\n@NgModule({\n    ...\n    imports: [\n        ...\n        L10nTranslationModule.forRoot(l10nConfig),\n        L10nIntlModule\n    ],\n    providers: [\n        {\n            provide: APP_INITIALIZER,\n            useFactory: initL10n,\n            deps: [L10nLoader],\n            multi: true\n        }\n    ],\n    bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```\n\n### Getting the translation\n#### Pure Pipes\n```Html\n<p title="{{ \'greeting\' | translate:locale.language }}">{{ \'greeting\' | translate:locale.language }}</p>\n<p>{{ \'whoIAm\' | translate:locale.language:{ name: \'Angular l10n\' } }}</p>\n\n<p>{{ today | l10nDate:locale.language:{ dateStyle: \'full\', timeStyle: \'short\' } }}</p>\n\n<p>{{ value | l10nNumber:locale.language:{ digits: \'1.2-2\', style: \'currency\' } }}</p>\n```\nPure pipes need to know when the _locale_ changes. So import `L10nLocale` injection token in the component:\n```TypeScript\nexport class AppComponent {\n\n    constructor(@Inject(L10N_LOCALE) public locale: L10nLocale) { }\n\n}\n```\n##### OnPush Change Detection Strategy\nTo support this strategy, there is an async version of each pipe:\n```Html\n<p>{{ \'greeting\' | translateAsync }}</p>\n```\n#### Directives\n```Html\n<p l10n-title title="greeting" l10nTranslate>greeting</p>\n<p [params]="{ name: \'Angular l10n\' }" l10nTranslate>whoIAm</p>\n\n<p [options]="{ dateStyle: \'full\', timeStyle: \'short\' }" l10nDate>{{ today }}</p>\n<p [options]="{ digits: \'1.2-2\', style: \'currency\' }" l10nNumber>{{ value }}</p>\n```\n#### APIs\n```TypeScript\nexport class AppComponent implements OnInit {\n\n    constructor(private translation: L10nTranslationService, private intl: L10nIntlService) { }\n\n    ngOnInit() {\n        this.translation.onChange().subscribe({\n            next: () => {\n                this.greeting = this.translation.translate(\'greeting\');\n                this.whoIAm = this.translation.translate(\'whoIAm\', { name: \'Angular l10n\' });\n\n                this.formattedToday = this.intl.formatDate(this.today, { dateStyle: \'full\', timeStyle: \'short\' });\n                this.formattedValue = this.intl.formatNumber(this.value, { digits: \'1.2-2\', style: \'currency\' });\n            }\n        });\n    }\n\n}\n```\n\n### Customize the library\nThe following features can be customized. You just have to implement the indicated class-interface and pass the token during configuration.\n\nE.g.\n```TypeScript\n@Injectable() export class HttpTranslationLoader implements L10nTranslationLoader {\n\n    private headers = new HttpHeaders({ \'Content-Type\': \'application/json\' });\n\n    constructor(@Optional() private http: HttpClient) { }\n\n    public get(language: string, provider: L10nProvider): Observable<{ [key: string]: any }> {\n        const url = `${provider.asset}-${language}.json`;\n        const options = {\n            headers: this.headers,\n            params: new HttpParams().set(\'v\', provider.options.version)\n        };\n        return this.http.get(url, options);\n    }\n\n}\n\nexport const l10nConfig: L10nConfig = {\n    ...\n    providers: [\n        { name: \'app\', asset: \'./assets/i18n/app\', options: { version: \'1.0.0\' } },\n    ],\n    ...\n};\n\n@NgModule({\n    ...\n    imports: [\n        ...\n        L10nTranslationModule.forRoot(\n            l10nConfig,\n            {\n                translationLoader: HttpTranslationLoader\n            }\n        )\n    ],\n    ...\n})\nexport class AppModule { }\n```\n#### Storage\nBy default, the library does not store the _locale_. To store it implement the `L10nStorage` class-interface, so that the next time the user has the _locale_ he selected.\n#### User Language\nBy default, the library attempts to set the _locale_ using the user\'s browser language, before falling back on the _default locale_. You can change this behavior by implementing the `L10nUserLanguage` class-interface, for example to get the language via server.\n#### Translation Loader\nBy default, you can only pass JavaScript objects as translation data provider. To implement a different loader, you can implement the `L10nTranslationLoader` class-interface, as in the example above.\n#### Translation Fallback\nYou can enable translation fallback during configuration:\n```TypeScript\nexport const l10nConfig: L10nConfig = {\n    ...\n    fallback: true,\n    ...\n};\n```\nBy default, the translation data will be merged in the following order:\n- `\'language\'`\n- `\'language[-script]\'`\n- `\'language[-script][-country]\'`\n\nTo change it, implement the `L10nTranslationFallback` class-interface.\n#### Translation Handler\nBy default, the library only parse the _params_. `L10nTranslationHandler` is the class-interface to implement to modify the behavior.\n#### Missing Translation Handler\nIf a key is not found, the same key is returned. To return a different value, you can implement the `L10nMissingTranslationHandler` class-interface.\n\n### Validation\nThere are two directives, that you can use with Template driven or Reactive forms: `l10nValidateNumber` and `l10nValidateDate`. To use them, you have to implement the `L10nValidation` class-interface, and import it with the validation module:\n```TypeScript\n@Injectable() export class LocaleValidation implements L10nValidation {\n\n    constructor(@Inject(L10N_LOCALE) private locale: L10nLocale) { }\n\n    public parseNumber(value: string, options?: L10nNumberFormatOptions, language = this.locale.language): number | null {\n        ...\n    }\n\n    public parseDate(value: string, options?: L10nDateTimeFormatOptions, language = this.locale.language): Date | null {\n        ...\n    }\n\n}\n\n@NgModule({\n    ...\n    imports: [\n        ...\n        L10nValidationModule.forRoot({ validation: LocaleValidation })\n    ],\n    ...\n})\nexport class AppModule { }\n```\n\n### Routing\nYou can enable the localized routing importing the routing module after others:\n```TypeScript\n@NgModule({\n    ...\n    imports: [\n        ...\n        L10nRoutingModule.forRoot()\n    ],\n    ...\n})\nexport class AppModule { }\n```\nA prefix containing the language is added to the path of each navigation, creating a semantic URL:\n```\nbaseHref/[language][-script][-country]/path\n\nhttps://example.com/en/home\nhttps://example.com/en-US/home\n```\nIf the localized link is called, the _locale_ is also set automatically.\n\nTo achieve this, the router configuration in your app is not rewritten: the URL is replaced, in order to provide the different localized contents both to the crawlers and to the users that can refer to the localized links.\n\nIf you don\'t want a localized routing for _default locale_, you can enable it during the configuration:\n```TypeScript\nexport const l10nConfig: L10nConfig = {\n    ...\n    defaultRouting: true\n};\n```\n\n\n## Types\nAngular l10n types that it is useful to know:\n- `L10nLocale`: contains a _language_, in the format `language[-script][-region][-extension]`, where:\n     - language: ISO 639 two-letter or three-letter code\n     - script: ISO 15924 four-letter script code\n     - region: ISO 3166 two-letter, uppercase code\n     - extension: \'u\' (Unicode) extensions\n     \n     Optionally a ISO 4217 three-letter code _currency_ and a _timezone_ from the IANA time zone database\n- `L10nFormat`: shows the format of the _language_ to be used for translations. The supported formats are: `\'language\' | \'language-script\' | \'language-region\' | \'language-script-region\'`. So, for example, you can have a _language_ like `en-US-u-ca-gregory-nu-latn` to format dates and numbers, but only use the `en-US` for translations setting `\'language-region\'`\n- `L10nDateTimeFormatOptions`: the type of _options_ used to format dates. Extends the Intl `DateTimeFormatOptions` interface, adding the _dateStyle_ and _timeStyle_ attributes\n- `L10nNumberFormatOptions`: the type of _options_ used to format numbers. Extends the Intl `NumberFormatOptions` interface, adding the _digits_ attribute\n\n\n## Intl API\nTo format dates and numbers, this library uses the [Intl API](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl)\n\nCheck the current browser support:\n- [ECMAScript compatibility tables](http://kangax.github.io/compat-table/esintl/)\n- [Can I use](http://caniuse.com/#feat=internationalization)\n\nAll modern browsers have implemented this API. You can use a polyfill like [Polyfill.io](https://polyfill.io/v3/) to extend support to old browsers.\n\nJust add one script tag in your `index.html`:\n```Html\n<script crossorigin="anonymous"\n    src="https://polyfill.io/v3/polyfill.min.js?flags=gated&features=Intl.~locale.en-US"></script>\n```\nWhen specifying the `features`, you have to specify what languages to load.\n\nOther polyfills:\n- For _timezone_: [Intl.DateTimeFormat timezone](https://github.com/formatjs/date-time-format-timezone)\n- For _timeAgo_ pipe and directive: [Intl.RelativeTimeFormat](https://www.npmjs.com/package/@formatjs/intl-relativetimeformat)\n\nThe `L10nIntlService` also provides methods for other APIs, such as _Collator_, _PluralRules_ and _ListFormat_.\n\n\n## Previous versions\n- **Angular v8 (Angular l10n v8.1.2)**\n    - [Branch](https://github.com/robisim74/angular-l10n/tree/angular_v8/docs)\n\n- **Angular v7 (Angular l10n v7.2.0)**\n    - [Branch](https://github.com/robisim74/angular-l10n/tree/angular_v7/docs)\n\n- **Angular v6 (Angular l10n v5.2.0)**\n    - [Branch](https://github.com/robisim74/angular-l10n/tree/angular_v6/docs)\n\n- **Angular v5 (Angular l10n v4.2.0)**\n    - [Branch](https://github.com/robisim74/angular-l10n/tree/angular_v5/docs)\n\n- **Angular v4 (Angular l10n v3.5.2)**\n    - [Branch](https://github.com/robisim74/angular-l10n/tree/angular_v4)\n\n- **Angular v2 (Angular l10n v2.0.11)**\n    - [Branch](https://github.com/robisim74/angular-l10n/tree/angular_v2)\n\n\n## Contributing\n- Building the library:\n    ```Shell\n    npm install\n    npm run build\n    ```\n\n- Testing:\n    ```Shell\n    npm test\n    ```\n\n- Serving the sample app:\n    ```Shell\n    npm start\n    ```\n\n\n## License\nMIT\n'