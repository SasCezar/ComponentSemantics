b'![Lang.js \xe2\x80\x93 Localization library written in JavaScript highly inspired on Laravel\'s Lang.](banner.png)\n\n[![Build Status](https://travis-ci.org/rmariuzzo/Lang.js.svg)](https://travis-ci.org/rmariuzzo/Lang.js)\n![Laravel 5.5](https://img.shields.io/badge/Laravel-5.5-f4645f.svg)\n![Laravel 5.0](https://img.shields.io/badge/Laravel-5.0-f4645f.svg)\n![NPM Montly Downloads](https://img.shields.io/npm/dm/lang.js.svg)\n[![GitHub license](https://img.shields.io/badge/license-MIT-blue.svg)](https://raw.githubusercontent.com/rmariuzzo/Lang.js/master/LICENSE)\n\n<br>\n<br>\n<br>\n\n## Installation\n\nDifferent installation methods:\n\n - NPM: `npm install lang.js`\n - Bower: `bower install lang.js`\n - Manually: [Download latest release](https://github.com/rmariuzzo/Lang.js/releases/latest)\n\n<br>\n<br>\n<br>\n\n[![Are you interested in the next version?](.github/next-version.svg)](https://github.com/rmariuzzo/Lang.js/tree/next)\n\n<br>\n<br>\n<br>\n\n## Documentation\n\n### Initialization\n\n```js\nvar lang = new Lang({\n    messages: source,\n    locale: \'fr\',\n    fallback: \'zn\'\n});\n```\n\nTo use `Lang.js` we need to specify at least the messages sources. This can be done during instantiation as shown in the previous code or later using the [`setMessages()`](#setmessages) method.\n\n### Messages source format\n\nThe messages source format looks like:\n\n```js\n{\n    "locale1.name": {\n        "key1": "value1",\n        "key2": "value2",\n        // ... and more key-value pairs.\n    },\n    "locale2.name": {\n        "key1": "value1",\n        "key2": "value2",\n        // ... and more key-value pairs.\n    },\n    // ... and more locales.\n}\n```\n\nSee the sample used in tests located at: `test/fixture/messages.json`.\n\n### Methods\n\n#### `setMessages`\n\nSet messages source. Check [messages source format](#messages-source-format).\n\n```js\nvar lang = new Lang();\nlang.setMessages(source);\n```\n\n#### `getLocale`\n\nGet the current locale, if none set, the default locale will be returned (`en`).\n\n```js\nvar lang = new Lang();\n\nlang.getLocale();\n// > "en"\n\nlang.setLocale(\'fr\');\nlang.getLocale();\n// > "fr"\n```\n\n#### `setLocale`\n\nSet the current locale.\n\n```js\nvar lang = new Lang();\n\nlang.setLocale(\'ht\');\nlang.getLocale();\n// > "ht"\n```\n\n#### `getFallback`\n\nGet the fallback locale.\n\n```js\nvar lang = new Lang();\n\nlang.getFallback();\n// > undefined\n\nlang.setFallback(\'de\');\nlang.getFallback();\n// > "de"\n```\n\n#### `setFallback`\n\nSet the fallback locale. When retrieving a message (using [`get()`](#get) or [`has()`](#has)) which is not defined in the specified locale, then it will try to find a message with the fallback locale (if set).\n\n```js\nvar lang = new Lang({\n    messages: {\n        \'en.greetings\': {\n            \'hi\': \'Hi\',\n            \'hello\': \'Hello\'\n        },\n        \'it.greetings\': {\n            \'hi\': \'Salve\'\n        }\n    }\n});\n\nlang.setLocale(\'it\');\nlang.get(\'greetings.hello\');\n// > "greetings.hello"\n\nlang.setFallback(\'en\');\nlang.get(\'greetings.hello\');\n// > "Hello"\n```\n\n#### `has`\n\nIndicate if a given key is defined on the messages source. Return `true` if the key is defined on the messages source, otherwise `false`. This method will try to get a message for the specified locale, if not found, then it will return a message for the fallback locale, if not found, then `false` will be returned.\n\n```js\nvar lang = new Lang({\n    messages: {\n        \'en.greetings\': {\n            \'hi\': \'Hi\'\n        },\n        \'es.greetings\': {\n            \'hi\': \'Hola\'\n        }\n    }\n});\n\nlang.has(\'greetings.hi\');\n// > true\n\nlang.has(\'greetings.hi\', \'es\');\n// > true\n\nlang.has(\'greetings.hello\');\n// > false\n```\n\n#### `get`\n\nGet a translation message if found, otherwise return the given key. This method will try to get a message for the specified locale, if not found, then it will return a message for the fallback locale, if not found, then the given key will be returned.\n\n```js\nvar lang = new Lang({\n    messages: {\n        \'en.greetings\': {\n            \'hi\': \'Hi\'\n        },\n        \'es.greetings\': {\n            \'hi\': \'Hola\'\n        }\n    }\n});\n\nlang.get(\'greetings.hi\');\n// > "Hi"\n\nlang.get(\'greetings.hi\', {}, \'es\');\n// > "Hola"\n\nlang.get(\'greetings.hello\');\n// > "greetings.hello"\n```\n\nGet a translation file from a nested directory\n\n```js\nLang.get(\'forum/thread.hello\');\n// > "Hello"\n\nLang.get(\'forum/thread.hello\', {}, \'es\');\n// > "Hola"\n```\n\n#### `trans`\n\nThis method act as an alias of [`get()`](#get).\n\n#### `choice`\n\nGet the plural or singular form of the message specified based on an integer value.\n\n```js\nvar lang = new Lang({\n    messages: {\n        \'en.fruits\': {\n            \'apple\': \'apple|apples\'\n        },\n        \'es.fruits\': {\n            \'apple\': \'manzana|manzanas\'\n        }\n    }\n});\n\nlang.choice(\'fruits.apple\', 1);\n// > "apple"\n\nlang.choice(\'fruits.apple\', 4);\n// > "apples"\n\nlang.choice(\'fruits.apple\', 4, {}, \'es\');\n// > "manzanas"\n```\nYou may even create more complex pluralization rules which specify translation strings for multiple number ranges:\n\n```js\nvar lang = new Lang({\n    messages: {\n        \'en.fruits\': {\n            \'apple\': \'{0} There are none|[1,19] There are some|[20,*] There are many\'\n        }\n    }\n});\n\nlang.choice(\'fruits.apple\', 0);   \n// > "There are none"\n\nlang.choice(\'fruits.apple\', 1);   \n// > "There are some"\n\nlang.choice(\'fruits.apple\', 3);   \n// > "There are some"\n\nlang.choice(\'fruits.apple\', 20);   \n// > "There are many"\n\nlang.choice(\'fruits.apple\', 22);   \n// > "There are many\n```\n\n#### `transChoice`\n\nThis method act as an alias of [`choice()`](#choice).\n\n<br>\n<br>\n<br>\n\n## Development\n\n 1. Fork this repository and clone it.\n 2. Create a branch from develop: `git checkout -b feature/xxxxxxx`\n 3. Submit a PR to be merge into develop branch.\n\n**[Get help!](https://gitter.im/rmariuzzo/Lang.js)**\n\n<br>\n<br>\n<br>\n\n## Testing\n\nTo run the tests use the following commands:\n\n - Single run: `npm run test`\n - Run on changes: `npm run test:watch`\n'