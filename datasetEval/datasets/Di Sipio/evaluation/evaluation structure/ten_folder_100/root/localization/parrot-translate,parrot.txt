b'# Parrot\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/ada80e50064e4d6a858c1e2e2164436a)](https://app.codacy.com/app/anthonynajjars/parrot?utm_source=github.com&utm_medium=referral&utm_content=parrot-translate/parrot&utm_campaign=badger)\n[![Docs](https://img.shields.io/badge/docs-latest-blue.svg)](https://anthonynsimon.gitbooks.io/parrot/content/)\n[![MIT License](https://img.shields.io/github/license/mashape/apistatus.svg?maxAge=2592000)](https://github.com/parrot-translate/parrot/blob/master/LICENSE)\n\nSelf-hosted Localization Management Platform built with Go and Angular 2.  \n\n\n[Documentation](https://anthonynsimon.gitbooks.io/parrot/content/)  \n[Website](http://parrot-translate.github.io/parrot.github.io/)  \n[Gitter Chat Room](https://gitter.im/parrot-translate)   \n\n\n> NOTE: the project is no longer mantained, we suggest you look at [traduora](https://github.com/traduora/traduora) as an alternative.\n\n<img src="https://anthonynsimon.com/img/misc/parrot.png" style="width: 720px;"/>\n\n## Features\n\n- Built-in UI (web app) ready to deploy.\n- REST API to easily extend or integrate Parrot into your pipeline.\n- Export to various formats: keyvaluejson, `po`, `strings`, `properties`, `xmlproperties`, `android`, `php`, `xlsx`, `yaml` and `csv`.\n- Easily rename project strings, Parrot takes care of keeping locales in sync.\n- Manage your project\'s team, assign collaborators and their roles.\n- Control API Client access for your projects.\n\n## Building from source and try it out\n\nStart out by cloning this repo into your GOPATH:\n\n```bash\n$ mkdir -p $GOPATH/src/github.com/parrot-translate/parrot\n$ cd $GOPATH/src/github.com/parrot-translate/parrot\n$ git clone https://github.com/parrot-translate/parrot.git .\n```\n\nMake sure you have Postgres running, by default Parrot\'s API server will look for it on `postgres://localhost:5432` and will try to connect to a database named `parrot`. You can configure this using the AppConfig, see the configuration section below for more info.\n\nTo start a pre-configured Postgres instance on docker, simply run:\n\n```bash\n$ dev-tools/start-postgres.sh\n```\n\nNow apply the database migrations. Using Alembic it\'s really simple:\n\n```bash\n$ cd migrations\n$ alembic upgrade head\n```\n\nOnce again, if you wish to configure the DB parameters, you need to override the default values. For Alembic you just need to go to the `migrations/alembic.ini` file and modify the `sqlalchemy.url` accordingly.\n\nFinally you can build Parrot from source:\n\n```bash\n# From the root dir \'parrot\'\n$ ./build/build-all.sh\n```\n\nNow we simply need start the API and serve the web app files.\n\n```bash\n$ dist/parrot_api\n```\nNavigate to http://localhost:9990/api/v1/ping and you should be able to see if the API is up.\n\nAnd on a separate terminal session, let\'s start a convinient Python HTTP server to serve the static web app files locally:\n\n```bash\n$ dev-tools/serve-web-app.sh\n```\n\nAnd to view the web app simply navigate to http://localhost:8080, it should open the login page of the web app.\n\n## Configuration\n### API\nAt the moment, configuring the API app is only possible via environment variables. Here\'s the available options with their default values:\n\n```\nPARROT_API_PORT, default value: "9990"\nPARROT_DB_NAME, default value: "postgres"\nPARROT_DB_CONN, default value: "postgres://postgres@localhost:5432/parrot?sslmode=disable"\nPARROT_AUTH_ISSUER, default value: "parrot@localhost"\nPARROT_AUTH_SIGNING_KEY, default value: "secret"\n```\n\n### Web App\nYou can also configure the Web App\'s backend endpoint by editing the file `parrot/web-app/src/environments/environment.prod.ts` accordingly before building the Web app. Available options:\n\n```\napiEndpoint, default value: "http://localhost:9990/api/v1"\n```\n\n## License\nThis project is licensed under the [MIT](https://github.com/anthonynsimon/parrot/blob/master/LICENSE) license.\n\n## Issues\nThe recommended medium to report and track issues is by opening one on [Github](https://github.com/parrot-translate/parrot/issues).\n\n## Contributing\nWant to hack on the project? Any kind of contribution is welcome!\nSimply follow the next steps:\n\n- Fork the project.\n- Create a new branch.\n- Make your changes and write tests when practical.\n- Commit your changes to the new branch.\n- Send a pull request, it will be reviewed shortly.\n\nIn case you want to add a feature, please create a new issue and briefly explain what the feature would consist of. For bugs or requests, before creating an issue please check if one has already been created for it.\n'