b'R.objc\n======\n\n[![Version](https://img.shields.io/cocoapods/v/R.objc.svg?style=flat)](http://cocoapods.org/pods/R.objc)\n[![License](https://img.shields.io/cocoapods/l/R.objc.svg?style=flat)](http://cocoapods.org/pods/R.objc)\n[![Platform](https://img.shields.io/cocoapods/p/R.objc.svg?style=flat)](http://cocoapods.org/pods/R.objc)\n\n![](https://github.com/SysdataSpA/R.objc/blob/master/R.objc_example.gif)\n\nIntroduction\n------------\n\nFreely inspired by [R.swift](https://github.com/mac-cain13/R.swift) (Thank you,\nguys!): get autocompleted localizable strings, asset catalogue images names and\nstoryboard objects.\n\nYou can have:\n\n-   **Compile time check**: no more incorrect strings that make your app crash\n    at runtime\n\n-   **Autocompletion**: never have to guess that image name again\n\nInstallation\n------------\n\n[CocoaPods](http://cocoapods.org/)\xc2\xa0is the recommended way of installation, as\nthis avoids including any binary files into your project.\n\n### Cocoapods\n\n1.  Add\xc2\xa0`pod \'R.objc\'`\xc2\xa0to your\xc2\xa0[Podfile](http://cocoapods.org/#get_started)\xc2\xa0and\n    run\xc2\xa0`pod install`\n\n2.  In XCode, click on your project in the Project Navigator\n\n3.  Choose your target under\xc2\xa0`TARGETS`, click the\xc2\xa0`Build Phases`\xc2\xa0tab and add\n    a\xc2\xa0`New Run Script Phase`\xc2\xa0by clicking the little plus icon in the top left\n\n4.  Drag the new\xc2\xa0`Run Script`\xc2\xa0phase\xc2\xa0**above**\xc2\xa0the\xc2\xa0`Compile Sources`\xc2\xa0phase,\n    expand it and paste the following script:\xc2\xa0\n\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    "${PODS_ROOT}/R.objc/Robjc" -p "$SRCROOT"\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n    (after -p option, you have to specify the root folder of your project, from\n    where to scan your code)\n\n5.  Build your project; in Finder you will now see `R.h`\xc2\xa0and `R.m`\xc2\xa0files in\n    the\xc2\xa0`$SRCROOT` folder: drag them into your project and\xc2\xa0**uncheck**\xc2\xa0`Copy\n    items if needed`\n\n6.  Repeat point 3 and 4 for every target in your project\n\n### Manual\n\n1.  Download latest version from the [releases\n    section](https://github.com/SysdataSpA/R.objc/releases)\n\n2.  Unzip in a folder anywhere you want.\n\n3.  In XCode, click on your project in the Project Navigator\n\n4.  Choose your target under\xc2\xa0`TARGETS`, click the\xc2\xa0`Build Phases`\xc2\xa0tab and add\n    a\xc2\xa0`New Run Script Phase`\xc2\xa0by clicking the little plus icon in the top left\n\n5.  Drag the new\xc2\xa0`Run Script`\xc2\xa0phase\xc2\xa0**above**\xc2\xa0the\xc2\xa0`Compile Sources`\xc2\xa0phase,\n    expand it and paste the following script:\xc2\xa0\n\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    "<path to the unzipped folder>/Robjc" -p "$SRCROOT"\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n    (we suggest to unzip the folder somewhere within your project folder, in\n    order to use the `$SRCROOT` shortcut for the path. **Don\'t add anything to\n    your Xcode project, or it won\'t build anymore**) (after -p option, you have\n    to specify the root folder of your project, from where to scan your code)\n\n6.  Build your project; in Finder you will now see `R.h`\xc2\xa0and `R.m`\xc2\xa0files in\n    the\xc2\xa0`$SRCROOT` folder: drag them into your project and\xc2\xa0**uncheck**\xc2\xa0`Copy\n    items if needed`\n\n7.  Repeat point 3 and 4 for every target in your project\n\nAt every build, the generated file will update automatically and there\'s no need\nto do anything.\n\nNormally, you would write code like this:\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[self.buttonProceed setTitle:NSLocalizedString(@"home_proceed", nil) forState:UIControlStateNormal];\nself.welcomeLabel.text = [NSString stringWithFormat:NSLocalizedString(@"home_title_welcome", nil), @"John"]; //"hello %@"\nself.radioButtonImageView.image = selected ? [UIImage imageNamed:@"checkedRadioButton"] : [UIImage imageNamed:@"uncheckedRadioButton"];\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nNow you can write\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[self.buttonProceed setTitle:R.string.localizable.homeProceed forState:UIControlStateNormal];\nself.welcomeLabel.text = [R.string.localizable homeTitleWelcome:@"John"];\nself.radioButtonImageView.image = selected ? R.image.checkedRadioButton : R.image.uncheckedRadioButton;\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n### Available command line options\n\nYou can add these options to customize R.objc behaviour:\n\n-   `-p` (or `--path`): **MANDATORY** path to the root of the project or from where you want the scan to begin\n\n-   `-e` (or `--excluded`): excluded dir path; all dirs within this path will be excluded; you can use `-e` option more than once, e.g. `-e $(SRCROOT)/Pods` `-e $(SRCROOT)/Carthage`\n\n-   `-v` (or `--verbose`): verbose logging\n\n-   `-s` (or `--sysdata`): for internal use only\n\n-   `-r` (or `--refactor`): R.objc will replace all occurrences of NSLocalizedString with the correct `R.string` reference\n\n-   `--skip-strings`: jump the strings step\n\n-   `--skip-images`: jump the images step\n\n-   `--skip-themes`: jump the themes step. Use this to avoid Giotto import error\n\n-   `--skip-storyboards`: jump the storyboards step\n\n-   `--skip-segues`: jump the segues step\n\n\nWhat can you do?\n----------------\n\n### Localizable strings\n\nYou can access localized strings with compile time checked keys usign keypath\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nR.string.localizable.commonWarning\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe keypath is composed like this: `R.string.<string_file_name>.<string_key>`\n\nIf you check the documentation of the string (alt+click) you\'ll see the original\nkey and all the localized values\n\nYou can access localized strings containing a string with format, passing\ndirectly parameters and obtaining the composed value\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[R.string.localizable alertMessage:@"username" value2:4.7];\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe methods is named like the key of the localized string with parameter 1\nimplicit; all other parameters are named value and numbered progressively.\nFormats in the string are mapped by the objects the represent (eg. `%f` is\nmapped as a `double`, `%@` ad an `id`)\n\n### Images\n\nAll images will be mapped, those in an asset catalogue and those outside.\n\nYou can access by\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nR.image.navbarLogo\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou\'ll get a `UIImage*` directly.\n\n### Storyboards\n\nAll storyboards in the bundle will be mapped in a\n`R.storyboard.<storyboard_name>` path. You\'ll have an\n\n`instantiateInitialViewController` method and a method to instantiate a view\ncontroller for every storyboard identifier found.\n\nExample:\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[R.storyboard.main instantiateInitialViewController];\n[R.storyboard.main loginViewController];\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n### Segues\n\nLike storyboards, in the segue object you\'ll find a list of all view controllers\nwhich are source of a segue. Starting from them, you can access their segues and\nget the segue identifier or perform segue passing source and sender objects\n\nExample:\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nR.segue.myViewController.goToNextSegue.identifier // identifier of the segue\n[R.segue.myViewController.goToNextSegue.identifier performWithSource:self sender:userInfo]; // perform segue\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n### Themes\n\nIf you are using [Giotto Theme Manager](https://github.com/SysdataSpA/Giotto), R.objc will search for theme_*.plist files in your project. You can then access to all your constants and styles.\n\nExample:\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[R.theme.styles.myStyle applyTo:self]; // apply the style MyStyle to object self\nR.theme.constants.COLOR_TEXT_LIGHT // reference to a constant in the theme\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n### Troubleshooting\n1. You may want to exclude Pods and/or Carthage dirs. To do so pass:\n```-e $(SRCROOT)/Pods -e $(SRCROOT)/Carthage```\n2. ```R.h:2:9: Module \'Giotto\' not found```\nAdd `pod \'Giotto\'` to Podfile or pass `--skip-themes` parameter.\n\n3. ```Duplicate interface definition for class \'R<some-resource-name>\'```\nCheck in the filesystem if there are more than one resource file with the same name:\n```find <path-project-dir> -iname *<some-resource-name>*``` Replace <some-resource-name> with actual resource from Xcode output.\n\nContribute\n----------\n\nWe\'ll love contributions, fell free to fork and submit pull requests for\nadditional generators or optimizations; for any question or idea write to\nteam.mobile[AT]sysdata.it\n'