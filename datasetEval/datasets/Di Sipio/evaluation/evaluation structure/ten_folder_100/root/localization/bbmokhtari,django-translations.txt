b'# Django Translations\n\n[![build](https://travis-ci.com/bbmokhtari/django-translations.svg?branch=master)](https://travis-ci.com/bbmokhtari/django-translations)\n[![python](https://img.shields.io/badge/python-3.5%7C3.6-0073b7.svg)](https://pypi.org/project/django-translations/)\n[![pypi](https://img.shields.io/badge/pypi-1.0.0-f9d35f.svg)](https://pypi.org/project/django-translations/)\n[![django](https://img.shields.io/badge/django-2.0%7C2.1-0C4B33.svg)](https://pypi.org/project/django-translations/)\n[![flake8](https://img.shields.io/badge/flake8-linted-green.svg)](https://travis-ci.com/bbmokhtari/django-translations)\n\nDjango model translation for perfectionists with deadlines.\n\n## Support the project\n\nIf you liked this project please consider giving it a star! \xe2\xad\x90\xef\xb8\x8f\n\n## Goal\n\nThere are two types of content, each of which has its own challenges for translation:\n\n- Static content: This is the content which is defined in the code.\n  _e.g. "Please enter a valid email address."_\n\n  Django already provides a\n  [solution](https://docs.djangoproject.com/en/2.1/topics/i18n/translation/)\n  for translating static content.\n\n- Dynamic content: This is the content which is stored in the database.\n  _(We can\'t know it beforehand!)_\n\n  Django Translations provides a solution\n  for translating dynamic content.\n\n## Requirements\n\n- Python (\\>=3.5)\n- Django (\\>=2.0)\n\n## Installation\n\n1.  Install Django Translations using pip:\n    \n    ``` bash\n    $ pip install django-translations\n    ```\n\n2.  Add `translations` to the `INSTALLED_APPS` in the settings of your\n    project:\n    \n    ``` python\n    INSTALLED_APPS += [\n        \'translations\',\n    ]\n    ```\n\n3.  Run `migrate`:\n    \n    ``` bash\n    $ python manage.py migrate\n    ```\n\n4.  Configure Django internationalization and localization settings:\n    \n    ``` python\n    USE_I18N = True          # use internationalization\n    USE_L10N = True          # use localization\n    \n    MIDDLEWARE += [          # locale middleware\n        \'django.middleware.locale.LocaleMiddleware\',\n    ]\n    \n    LANGUAGE_CODE = \'en-us\'  # default (fallback) language\n    LANGUAGES = (            # supported languages\n        (\'en\', \'English\'),\n        (\'en-gb\', \'English (Great Britain)\'),\n        (\'de\', \'German\'),\n        (\'tr\', \'Turkish\'),\n    )\n    ```\n    \n    Please note that these settings are for Django itself.\n\n## Basic Usage\n\n### Model\n\nInherit `Translatable` in any model you want translated:\n\n``` python\nfrom translations.models import Translatable\n\nclass Continent(Translatable):\n    code = models.Charfield(...)\n    name = models.Charfield(...)\n    denonym = models.Charfield(...)\n\n    class TranslatableMeta:\n        fields = [\'name\', \'denonym\']\n```\n\nNo migrations needed afterwards.\n\n### Admin\n\nUse the admin extensions:\n\n``` python\nfrom translations.admin import TranslatableAdmin, TranslationInline\n\nclass ContinentAdmin(TranslatableAdmin):\n    inlines = [TranslationInline,]\n```\n\nThis provides specialized translation inlines for the model.\n\n![image](https://raw.githubusercontent.com/bbmokhtari/django-translations/master/docs/_static/admin.png)\n\n## QuerySet\n\nUse the queryset extensions:\n\n``` python\n>>> from sample.models import Continent\n>>> continents = Continent.objects.all(\n... ).distinct(           # familiar distinct\n... ).probe([\'en\', \'de\']  # probe (filter, exclude, etc.) in English and German\n... ).filter(             # familiar filtering\n...     countries__cities__name__startswith=\'K\xc3\xb6ln\'\n... ).translate(\'de\'      # translate the results in German\n... ).translate_related(  # translate these relations as well\n...     \'countries\', \'countries__cities\',\n... )\n>>> print(continents)\n<TranslatableQuerySet [\n    <Continent: Europa>,\n]>\n>>> print(continents[0].countries.all())\n<TranslatableQuerySet [\n    <Country: Deutschland>,\n]>\n>>> print(continents[0].countries.all()[0].cities.all())\n<TranslatableQuerySet [\n    <City: K\xc3\xb6ln>,\n]>\n```\n\nThis provides a powerful yet familiar interface to work with the querysets.\n\n## Context\n\nUse the translation context:\n\n``` python\n>>> from translations.context import Context\n>>> from sample.models import Continent\n>>> continents = Continent.objects.all()\n>>> relations = (\'countries\', \'countries__cities\',)\n>>> with Context(continents, *relations) as context:\n...     context.read(\'de\')    # read the translations onto the context\n...     print(\':\')            # use the objects like before\n...     print(continents)\n...     print(continents[0].countries.all())\n...     print(continents[0].countries.all()[0].cities.all())\n... \n...     continents[0].countries.all()[0].name = \'Change the name\'\n...     context.update(\'de\')  # update the translations from the context\n... \n...     context.delete(\'de\')  # delete the translations of the context\n... \n...     context.reset()       # reset the translations of the context\n...     print(\':\')            # use the objects like before\n...     print(continents)\n...     print(continents[0].countries.all())\n...     print(continents[0].countries.all()[0].cities.all())\n:\n<TranslatableQuerySet [\n    <Continent: Asien>,\n    <Continent: Europa>,\n]>\n<TranslatableQuerySet [\n    <Country: Deutschland>,\n]>\n<TranslatableQuerySet [\n    <City: K\xc3\xb6ln>,\n]>\n:\n<TranslatableQuerySet [\n    <Continent: Asia>,\n    <Continent: Europe>,\n]>\n<TranslatableQuerySet [\n    <Country: Germany>,\n]>\n<TranslatableQuerySet [\n    <City: Cologne>,\n]>\n```\n\nThis can CRUD the translations of any objects (instance, queryset, list) and their relations.\n\n## Documentation\n\nFor more interesting capabilities browse through the\n[documentation](http://bbmokhtari.github.io/django-translations).\n'