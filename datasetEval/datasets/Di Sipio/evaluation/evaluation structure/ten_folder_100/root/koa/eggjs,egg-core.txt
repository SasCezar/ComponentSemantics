b"# egg-core\n\n[![NPM version][npm-image]][npm-url]\n[![build status][travis-image]][travis-url]\n[![Test coverage][codecov-image]][codecov-url]\n[![David deps][david-image]][david-url]\n[![Known Vulnerabilities][snyk-image]][snyk-url]\n[![npm download][download-image]][download-url]\n\n[npm-image]: https://img.shields.io/npm/v/egg-core.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/egg-core\n[travis-image]: https://img.shields.io/travis/eggjs/egg-core.svg?style=flat-square\n[travis-url]: https://travis-ci.org/eggjs/egg-core\n[codecov-image]: https://codecov.io/github/eggjs/egg-core/coverage.svg?branch=master\n[codecov-url]: https://codecov.io/github/eggjs/egg-core?branch=master\n[david-image]: https://img.shields.io/david/eggjs/egg-core.svg?style=flat-square\n[david-url]: https://david-dm.org/eggjs/egg-core\n[snyk-image]: https://snyk.io/test/npm/egg-core/badge.svg?style=flat-square\n[snyk-url]: https://snyk.io/test/npm/egg-core\n[download-image]: https://img.shields.io/npm/dm/egg-core.svg?style=flat-square\n[download-url]: https://npmjs.org/package/egg-core\n\nA core Pluggable framework based on [koa](https://github.com/koajs/koa).\n\n**Don't use it directly, see [egg].**\n\n## Usage\n\nDirectory structure\n\n```\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 package.json\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 app.js (optional)\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 agent.js (optional)\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 app\n|   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 router.js\n\xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 controller\n\xe2\x94\x82   \xe2\x94\x82   \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 home.js\n|   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 extend (optional)\n\xe2\x94\x82   |   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 helper.js (optional)\n\xe2\x94\x82   |   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 filter.js (optional)\n\xe2\x94\x82   |   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 request.js (optional)\n\xe2\x94\x82   |   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 response.js (optional)\n\xe2\x94\x82   |   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 context.js (optional)\n\xe2\x94\x82   |   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 application.js (optional)\n\xe2\x94\x82   |   \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 agent.js (optional)\n\xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 service (optional)\n\xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 middleware (optional)\n\xe2\x94\x82   \xe2\x94\x82   \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 response_time.js\n\xe2\x94\x82   \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 view (optional)\n|       \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 layout.html\n\xe2\x94\x82       \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 home.html\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 config\n|   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 config.default.js\n\xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 config.prod.js\n|   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 config.test.js (optional)\n|   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 config.local.js (optional)\n|   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 config.unittest.js (optional)\n\xe2\x94\x82   \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 plugin.js\n```\n\nThen you can start with code below\n\n```js\nconst Application = require('egg-core').EggCore;\nconst app = new Application({\n  baseDir: '/path/to/app'\n});\napp.ready(() => app.listen(3000));\n```\n\n## EggLoader\n\nEggLoader can easily load files or directories in your [egg] project. In addition, you can customize the loader with low level APIs.\n\n### constructor\n\n- {String} baseDir - current directory of application\n- {Object} app - instance of egg application\n- {Object} plugins - merge plugins for test\n- {Logger} logger - logger instance\xef\xbc\x8cdefault is console\n\n### High Level APIs\n\n#### loadPlugin\n\nLoad config/plugin.js\n\n#### loadConfig\n\nLoad config/config.js and config/{serverEnv}.js\n\n#### loadController\n\nLoad app/controller\n\n#### loadMiddleware\n\nLoad app/middleware\n\n#### loadApplicationExtend\n\nLoad app/extend/application.js\n\n#### loadContextExtend\n\nLoad app/extend/context.js\n\n#### loadRequestExtend\n\nLoad app/extend/request.js\n\n#### loadResponseExtend\n\nLoad app/extend/response.js\n\n#### loadHelperExtend\n\nLoad app/extend/helper.js\n\n#### loadCustomApp\n\nLoad app.js, if app.js export boot class, then trigger configDidLoad\n\n#### loadCustomAgent\n\nLoad agent.js, if agent.js export boot class, then trigger configDidLoad\n\n#### loadService\n\nLoad app/service\n\n### Low Level APIs\n\n#### getServerEnv()\n\nRetrieve application environment variable values via `serverEnv`. You can access directly by calling `this.serverEnv` after instantiation.\n\nserverEnv | description\n---       | ---\ndefault   | default environment\ntest      | system integration testing environment\nprod      | production environment\nlocal     | local environment on your own computer\nunittest  | unit test environment\n\n#### getEggPaths()\n\nTo get directories of the frameworks. A new framework is created by extending egg, then you can use this function to get all frameworks.\n\n#### getLoadUnits()\n\nA loadUnit is a directory that can be loaded by EggLoader, cause it has the same structure.\n\nThis function will get add loadUnits follow the order:\n\n1. plugin\n2. framework\n3. app\n\nloadUnit has a path and a type. Type must be one of those values: *app*, *framework*, *plugin*.\n\n```js\n{\n  path: 'path/to/application',\n  type: 'app'\n}\n```\n\n#### getAppname()\n\nTo get application name from *package.json*\n\n#### appInfo\n\nGet the infomation of the application\n\n- pkg: `package.json`\n- name: the application name from `package.json`\n- baseDir: current directory of application\n- env: equals to serverEnv\n- HOME: home directory of the OS\n- root: baseDir when local and unittest, HOME when other environment\n\n#### loadFile(filepath)\n\nTo load a single file. **Note:** The file must export as a function.\n\n#### loadToApp(directory, property, LoaderOptions)\n\nTo load files from directory in the application.\n\nInvoke `this.loadToApp('$baseDir/app/controller', 'controller')`, then you can use it by `app.controller`.\n\n#### loadToContext(directory, property, LoaderOptions)\n\nTo load files from directory, and it will be bound the context.\n\n```js\n// define service in app/service/query.js\nmodule.exports = class Query {\n  constructor(ctx) {\n    // get the ctx\n  }\n\n  get() {}\n};\n\n// use the service in app/controller/home.js\nmodule.exports = function*() {\n  this.body = this.service.query.get();\n};\n```\n\n#### loadExtend(name, target)\n\nLoader app/extend/xx.js to target, For example,\n\n```js\nthis.loadExtend('application', app);\n```\n\n### LoaderOptions\n\nParam          | Type           | Description\n-------------- | -------------- | ------------------------\ndirectory      | `String/Array` | directories to be loaded\ntarget         | `Object`       | attach the target object from loaded files\nmatch          | `String/Array` | match the files when load, default to `**/*.js`(if process.env.EGG_TYPESCRIPT was true, default to `[ '**/*.(js|ts)', '!**/*.d.ts' ]`)\nignore         | `String/Array` | ignore the files when load\ninitializer    | `Function`     | custom file exports, receive two parameters, first is the inject object(if not js file, will be content buffer), second is an `options` object that contain `path`\ncaseStyle      | `String/Function` | set property's case when converting a filepath to property list.\noverride       | `Boolean`      | determine whether override the property when get the same name\ncall           | `Boolean`      | determine whether invoke when exports is function\ninject         | `Object`       | an object that be the argument when invoke the function\nfilter         | `Function`     | a function that filter the exports which can be loaded\n\n## Questions & Suggestions\n\nPlease open an issue [here](https://github.com/eggjs/egg/issues).\n\n## License\n\n[MIT](LICENSE)\n\n[egg]: https://github.com/eggjs/egg\n"