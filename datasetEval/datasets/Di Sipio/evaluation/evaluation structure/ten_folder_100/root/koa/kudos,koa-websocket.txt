b"# koa-websocket\n\n[![Circle CI](https://circleci.com/gh/kudos/koa-websocket.svg?style=svg)](https://circleci.com/gh/kudos/koa-websocket)\n\n> Koa v2 is now the default. For Koa v1 support install with koa-websocket@2 and see the `legacy` branch.\n\nSupports `ws://` and `wss://`\n\n## Installation\n\n`npm install koa-websocket`\n\n## Usage\n\n```js\nconst Koa = require('koa'),\n  route = require('koa-route'),\n  websockify = require('koa-websocket');\n\nconst app = websockify(new Koa());\n\n// Regular middleware\n// Note it's app.ws.use and not app.use\napp.ws.use(function(ctx, next) {\n  // return `next` to pass the context (ctx) on to the next ws middleware\n  return next(ctx);\n});\n\n// Using routes\napp.ws.use(route.all('/test/:id', function (ctx) {\n  // `ctx` is the regular koa context created from the `ws` onConnection `socket.upgradeReq` object.\n  // the websocket is added to the context on `ctx.websocket`.\n  ctx.websocket.send('Hello World');\n  ctx.websocket.on('message', function(message) {\n    // do something with the message from client\n        console.log(message);\n  });\n}));\n\napp.listen(3000);\n```\n\nExample with Let's Encrypt ([the Greenlock package](https://git.daplie.com/Daplie/greenlock-koa)):\n\n```js\nconst Koa = require('koa');\nconst greenlock = require('greenlock-express');\nconst websockify = require('koa-websocket');\n \nconst le = greenlock.create({\n  // all your sweet Let's Encrypt options here\n});\n \n// the magic happens right here\nconst app = websockify(new Koa(), wsOptions, le.httpsOptions);\n \napp.ws.use((ctx) => {\n   // the websocket is added to the context as `ctx.websocket`.\n  ctx.websocket.on('message', function(message) {\n    // do something\n  });\n});\n \napp.listen(3000);\n```\n\nWith custom websocket options.\n\n```js\nconst Koa = require('koa'),\n  route = require('koa-route'),\n  websockify = require('koa-websocket');\n\nconst wsOptions = {};\nconst app = websockify(new Koa(), wsOptions);\n\napp.ws.use(route.all('/', (ctx) => {\n   // the websocket is added to the context as `ctx.websocket`.\n  ctx.websocket.on('message', function(message) {\n    // print message from the client\n    console.log(message);\n  });\n}));\n\napp.listen(3000);\n```\n\n## API\n#### websockify(KoaApp, [WebSocketOptions], [httpsOptions])\nThe WebSocket options object just get passed right through to the `new WebSocketServer(options)` call.\n\nThe optional HTTPS options object gets passed right into `https.createServer(options)`. If the HTTPS options are \npassed in, koa-websocket will use the built-in Node HTTPS server to provide support for the `wss://` protocol.\n\n## License\nMIT\n"