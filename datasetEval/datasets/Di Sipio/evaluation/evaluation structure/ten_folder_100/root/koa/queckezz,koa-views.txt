b"# koa-views\n\n[![Build status][travis-image]][travis-url]\n[![NPM version][npm-image]][npm-url]\n[![NPM downloads][npm-downloads-image]][npm-url]\n[![Dependency Status][david-image]][david-url]\n[![License][license-image]][license-url]\n\nTemplate rendering middleware for `koa@2`.\n\n## Installation\n\n```sh\nnpm install koa-views\n```\n\n## Templating engines\n\n`koa-views` is using [consolidate](https://github.com/tj/consolidate.js) under the hood.\n\n[List of supported engines](https://github.com/tj/consolidate.js#supported-template-engines)\n\n**NOTE**: you must still install the engines you wish to use, add them to your package.json dependencies.\n\n## Example\n\n```js\nvar views = require('koa-views');\n\n// Must be used before any router is used\napp.use(views(__dirname + '/views', {\n  map: {\n    html: 'underscore'\n  }\n}));\n\napp.use(async function (ctx) {\n  ctx.state = {\n    session: this.session,\n    title: 'app'\n  };\n\n  await ctx.render('user', {\n    user: 'John'\n  });\n});\n```\n\nFor more examples you can take a look at the [tests](./test/index.js).\n\n## Simple middleware\n\nIf you need to simply render pages with locals, you can install `koa-views-render`:\n\n```sh\nnpm install koa-views-render\n```\n\nThen simply use it on your routes and its arguments will be passed to `ctx.render`.\n\n```js\nvar render = require('koa-views-render');\n\n// ...\n\napp.use(render('home', { title : 'Home Page' }));\n```\n\n## API\n\n#### `views(root, opts)`\n\n* `root`: Where your views are located. Must be an absolute path. All rendered views are relative to this path\n* `opts` (optional)\n\n* `opts.autoRender`: Whether to use `ctx.body` to receive the rendered template string. Defaults to `true`.\n\n```js\napp.use(views(__dirname, { autoRender: false, extension: 'pug' }))\n\napp.use(async function (ctx) {\n  return await ctx.render('user.pug')\n})\n```\n\nvs.\n\n```js\napp.use(views(__dirname, { extension: 'pug' }))\n\napp.use(async function (ctx) {\n  await ctx.render('user.pug')\n})\n```\n\n* `opts.extension`: Default extension for your views\n\nInstead of providing the full file extension you can omit it.\n```js\napp.use(async function (ctx) {\n  await ctx.render('user.pug')\n})\n```\n\nvs.\n\n```js\napp.use(views(__dirname, { extension: 'pug' }))\n\napp.use(async function (ctx) {\n  await ctx.render('user')\n})\n```\n\n* `opts.map`: Map a file extension to an engine\n\nIn this example, each file ending with `.html` will get rendered using the `nunjucks` templating engine.\n```js\napp.use(views(__dirname, { map: {html: 'nunjucks' }}))\n\n// render `user.html` with nunjucks\napp.use(async function (ctx) {\n  await ctx.render('user.html')\n})\n```\n\n* `opts.engineSource`: replace consolidate as default engine source\n\nIf you\xe2\x80\x99re not happy with consolidate or want more control over the engines, you can override it with this options. `engineSource` should\nbe an object that maps an extension to a function that receives a path and options and returns a promise. In this example templates with the `foo` extension will always return `bar`.\n\n```js\napp.use(views(__dirname, { engineSource: {foo: () => Promise.resolve('bar')}}))\n\napp.use(async function (ctx) {\n  await ctx.render('index.foo')\n})\n```\n\n* `opts.options`: These options will get passed to the view engine. This is the time to add `partials` and `helpers` etc.\n\n```js\nconst app = new Koa()\n  .use(views(__dirname, {\n    map: { hbs: 'handlebars' },\n    options: {\n      helpers: {\n        uppercase: (str) => str.toUpperCase()\n      },\n\n      partials: {\n        subTitle: './my-partial' // requires ./my-partial.hbs\n      },\n      \n      cache: true // cache the template string or not\n    }\n  }))\n  .use(function (ctx) {\n    ctx.state = { title: 'my title', author: 'queckezz' }\n    return ctx.render('./my-view.hbs')\n  })\n```\n\n## Debug\n\nSet the `DEBUG` environment variable to `koa-views` when starting your server.\n\n```bash\n$ DEBUG=koa-views\n```\n\n## License\n\n[MIT](./license)\n\n[travis-image]: https://img.shields.io/travis/queckezz/koa-views.svg?style=flat-square\n[travis-url]: https://travis-ci.org/queckezz/koa-views\n[npm-image]: https://img.shields.io/npm/v/koa-views.svg?style=flat-square\n[npm-downloads-image]: https://img.shields.io/npm/dm/koa-views.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/koa-views\n[david-image]: http://img.shields.io/david/queckezz/koa-views.svg?style=flat-square\n[david-url]: https://david-dm.org/queckezz/koa-views\n[license-image]: http://img.shields.io/npm/l/koa-views.svg?style=flat-square\n[license-url]: ./license\n"