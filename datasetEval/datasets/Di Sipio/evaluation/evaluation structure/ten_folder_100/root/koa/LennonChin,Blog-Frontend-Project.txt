b"# Front and back end of the separation of the blog project - front-end project\n\n> Supported SSR Now.\n\nBlog has been online \xef\xbc\x8cwelcome to browse\xef\xbc\x9a[https://blog.coderap.com/](https://blog.coderap.com/)\n\n> [\xe4\xb8\xad\xe6\x96\x87\xe7\x89\x88\xe8\xaf\xb4\xe6\x98\x8e](https://github.com/LennonChin/Blog-Frontend-Project/blob/master/README_zh-cn.md)\n\n> The warehouse holds the front end code for the blog project, built using Vue.js.\n\n> Note 1: The current Master branch has begun data interworking with the backend. The full version of the test data can be viewed in this version: [6a10ff2](https://github.com/LennonChin/Blog-Frontend-Project/tree/6a10ff207e413c02d7e5eb810409144a65450e27)\n\n> Note 2: The backend code repository linked with this repository is linked here [BlogBackendProject](https://github.com/LennonChin/BlogBackendProject) and the backend code is implemented using Django + Xadmin + Django Rest Framework.\n\n## Front effect display\n\n### PC Platform\n\n![Home Page](https://github.com/LennonChin/Blog-Frontend-Project/blob/master/readme/exhibition/PC_1.gif)\n\n![Article Page](https://github.com/LennonChin/Blog-Frontend-Project/blob/master/readme/exhibition/PC_2.gif)\n\n![Article List Page](https://github.com/LennonChin/Blog-Frontend-Project/blob/master/readme/exhibition/PC_3.gif)\n\n![Timeline](https://github.com/LennonChin/Blog-Frontend-Project/blob/master/readme/exhibition/PC_4.gif)\n\n### Mobile Platform\n\n![Mobile effect](https://github.com/LennonChin/Blog-Frontend-Project/blob/master/readme/exhibition/MOBILE_1.png)\n\n## The overall technology stack\n\n- [Vue.js ^2.5.6](https://github.com/vuejs/vue)\n- [Vue-Router ^3.0.1](https://github.com/vuejs/vue-router)\n- [Vuex ^3.0.1](https://github.com/vuejs/vuex)\n- [Axios ^0.17.1](https://github.com/axios/axios)\n- [iView UI ^2.14.2](https://github.com/iview/iview)\n- [MavonEditor ^2.4.16](https://github.com/hinesboy/mavonEditor)\n- [Tocbot ^4.1.1](https://github.com/tscanlin/tocbot)\n- [vue-i18n ^8.0.0](https://github.com/kazupon/vue-i18n)\n- [vue-awesome-swiper ^3.1.2](https://github.com/surmon-china/vue-awesome-swiper)\n\n## Achieved basic functions\n\nHas now developed 17 pages, basically meet the needs of conventional blog. The page is as follows:\n\n- Homepage, Routing`/`\n- Article Home, Routing`/artices`\n- Gallery Homepage, Routing`/albums`\n- Movie Homepage, routing`/movies`\n- Reading Homepage, routing`/readings`\n- Article List page, route`/articles/category/:id`\n- Album list page, route`/albums/category/:id`\n- Movie list page, route`/movies/category/:id`\n- Reading list page, route`/readings/category/:id`\n- Book list page, route`/books/category/:id`\n- Book note list page, route`/book/notes/category/:id`\n- Article details page, route`/article/:id`\n- Album browsing page, routing`/album/:id`\n- Movie details page, route`/movie/:id`\n- Book details page, route`/book/:id`\n- Book note details page, route`/book/note/:id`\n- Timeline page, route`/timeline`\n\nAt present, the development of ordinary pages basically completed the development, the need for the next test to verify the details and Bug; article details page has achieved code highlighting, catalogs, reviews and other functions.\n\n> Note: ~~The code highlighting `Highlight.js` plug-in, and in order to reduce the packaging volume customize the plug-in JS package, custom plug-ins stored in`./src/common/js/highlight.pack.js`, if you need other highlights please Custom plug-ins, [custom tutorials here](http://highlightjs.readthedocs.io/en/latest/building-testing.html)~~. Now I removed highlight.js, replaced by using Pygments at backend, to improved render effect at frontend.\n\n## The next will be achieved\n\n- [x]  Will consider implementing SSR server rendering. ~~Due to the current backend Django Rest Framework, SSR support may be postponed. SSR support for some necessary pages is developing now.~~SSR can already work now.\n- [ ]  Access GitHub, WeChat, Weibo, Facebook and other third-party login comments.\n- [x] front-end page Markdown editor access Qiniu Cloud Storage to store pictures. (Completed)\n- [ ]  Optimize the details of the gallery display.\n- [ ]  Optimize packaging volume.\n\n## How to use\n\n1. Clone this project\n2. Install the node environment\n3. In the project root directory, execute the following command to install the dependencies:\n\n```shell\n# install dependencies\nnpm install\n```\n\n4. Next, you need to do some backend support for the project configuration:\n\n> Note: You can choose to browse the offline version: [6a10ff2](https://github.com/LennonChin/Blog-Frontend-Project/tree/6a10ff207e413c02d7e5eb810409144a65450e27), this version is not complete, but shows the most basic page, all the data are local test data.\n\nThe backend of this project uses Django + Xadmin + Django Rest Framework. The code repository is located at [BlogBackendProject](https://github.com/LennonChin/BlogBackendProject). You need to configure it online according to the repository code. After configuring, please refer to the `./src/api/client-api.js` and `./src/api/client-api.js` files in this project your interface configurations of both client environment and SSR environment, my configurations as follows:\n\n```javascript\n// client-api.js\nconst request = axios.create({\n  baseURL: process.env.NODE_ENV === 'development' ? 'https://localhost:8000/api/' : 'https://blog.coderap.com/api/'\n});\n\n// server-api.js\nconst request = axios.create({\n  baseURL: process.env.NODE_ENV === 'development' ? 'https://localhost:8000/api/' : 'http://localhost/api/'\n});\n```\n\n5. After the above configuration is completed, run the following command to enter the development environment:\n\n```shell\n# serve with hot reload at localhost: 9999\nnpm run dev\n```\n\nOr run the following command to package:\n\n```shell\n# build for production with minification\nnpm run build\n```\n\n## License\n\n[Apache-2.0](https://opensource.org/licenses/Apache-2.0)\n\nCopyright (c) 2016-present, LennonChin"