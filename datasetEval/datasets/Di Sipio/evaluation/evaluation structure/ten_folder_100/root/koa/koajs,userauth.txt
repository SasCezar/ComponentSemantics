b"koa-userauth\n=======\n\n[![NPM version][npm-image]][npm-url]\n[![build status][travis-image]][travis-url]\n[![Coveralls][coveralls-image]][coveralls-url]\n[![David deps][david-image]][david-url]\n\n[npm-image]: https://img.shields.io/npm/v/koa-userauth.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/koa-userauth\n[travis-image]: https://img.shields.io/travis/koajs/userauth.svg?style=flat-square\n[travis-url]: https://travis-ci.org/koajs/userauth\n[coveralls-image]: https://img.shields.io/coveralls/koajs/userauth.svg?style=flat-square\n[coveralls-url]: https://coveralls.io/r/koajs/userauth?branch=master\n[david-image]: https://img.shields.io/david/koajs/userauth.svg?style=flat-square\n[david-url]: https://david-dm.org/koajs/userauth\n\n\n`koa` user auth abstraction layer middleware.\n\n## Install\n\n```bash\n$ npm install koa-userauth\n```\n\n## Usage\n\n`koa-userauth` is dependent on [koa-session](https://github.com/koajs/session) or [koa-generic-session](https://github.com/koajs/generic-session).\n\n```js\nvar koa = require('koa');\nvar userauth = require('koa-userauth');\nvar session = require('koa-generic-session');\n\nvar app = new koa();\napp.keys = ['i m secret'];\n\napp.use(session());\napp.use(userauth({\n  match: '/user',\n  // auth system login url\n  loginURLFormatter: function (url) {\n    return 'http://login.demo.com/login?redirect=' + url;\n  },\n  // login callback and getUser info handler\n  getUser: async ctx => {\n    var token = this.query.token;\n    // get user\n    return user;\n  }\n}));\n```\n\n### Arguments\n\nIf `options.match` or `options.ignore` is `String` instance,\nwe will use [path-match](https://github.com/expressjs/path-match) transfer it to `Regex` instance.\n\n```js\n/**\n * User auth middleware.\n *\n * @param {Object} [options]\n *  - {String|Regex|Function(pathname, ctx)} match, detect which url need to check user auth.\n *      `''` empty string meaning match all, @see `path-match` package.\n *  - {String|Regex|Function(pathname, ctx)} ignore, detect which url no need to check user auth.\n *      If `match` exists, this argument will be ignored.\n *  - {Function(url, rootPath, ctx)} loginURLFormatter, format the login url.\n *  - {String} [rootPath], custom app url root path, default is '/'.\n *  - {String} [loginPath], default is '/login'.\n *  - {String} [loginCallbackPath], default is `options.loginPath + '/callback'`.\n *  - {String} [logoutPath], default is '/logout'.\n *  - {String} [userField], logined user field name on `this.session`, default is 'user', `this.session.user`.\n *  - {Async Function (ctx)} getUser, get user function, must get user info with `req`.\n *  - {Async Function (ctx, user)} [loginCallback], you can handle user login logic here,return [user, redirectUrl]\n *  - {Function(ctx)} [loginCheck], return true meaning logined. default is `true`.\n *  - {Async Function (ctx, user)} [logoutCallback], you can handle user logout logic here.return redirectUrl\n *  - {Function(ctx)} [getRedirectTarget], customize how to get the redirect target after login\n * @return {Async Function (next)} userauth middleware\n * @public\n */\n```\n\n## Login flow\n\n1. unauth user, redirect to `$loginPath?redirect=$currentURL`\n2. user visit `$loginPath`, redirect to `options.loginURLFormatter()` return login url.\n3. user visit $loginCallbackPath, handler login callback logic.\n4. If user login callback check success, will set `req.session[userField]`,\n   and redirect to `$currentURL`.\n5. If login check callback error, next(err).\n6. user visit `$logoutPath`, set `req.session[userField] = null`, and redirect back.\n\n![userauth flow](https://www.lucidchart.com/publicSegments/view/54ede23d-a75c-4690-9408-33a30a008a99/image.png)\n\n> [Source image file](https://www.lucidchart.com/documents/edit/4749f226-b75f-42ef-934f-b89f7bd68c7f?driveId=0ACmMEQjF7GJGUk9PVA)\n\n\n## License\n\n[MIT](LICENSE)\n"