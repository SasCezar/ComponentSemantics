b'# GraphQL Koa Middleware\n\n[![NPM version][npm-image]][npm-url]\n[![Build Status][travis-image]][travis-url]\n[![Test coverage][coveralls-image]][coveralls-url]\n[![Dependency Status][david_img]][david_site]\n\nCreate a GraphQL HTTP server with [Koa](http://koajs.com/).\n\nPort from [express-graphql](https://github.com/graphql/express-graphql)\n\n## Installation\n\n```\nnpm install --save koa-graphql\n```\n\n## Usage\n\nMount `koa-graphql` as a route handler:\n\n```js\nconst Koa = require(\'koa\');\nconst mount = require(\'koa-mount\');\nconst graphqlHTTP = require(\'koa-graphql\');\n\nconst app = new Koa();\n\napp.use(mount(\'/graphql\', graphqlHTTP({\n  schema: MyGraphQLSchema,\n  graphiql: true\n})));\n\napp.listen(4000);\n```\n\nWith koa-router@7\n\n```js\nconst Koa = require(\'koa\');\nconst Router = require(\'koa-router\'); // koa-router@7.x\nconst graphqlHTTP = require(\'koa-graphql\');\n\nconst app = new Koa();\nconst router = new Router();\n\nrouter.all(\'/graphql\', graphqlHTTP({\n  schema: MyGraphQLSchema,\n  graphiql: true\n}));\n\napp.use(router.routes()).use(router.allowedMethods());\n```\n\nFor Koa 1, use [koa-convert](https://github.com/koajs/convert) to convert the middleware:\n\n```js\nconst koa = require(\'koa\');\nconst mount = require(\'koa-mount\'); // koa-mount@1.x\nconst convert = require(\'koa-convert\');\nconst graphqlHTTP = require(\'koa-graphql\');\n\nconst app = koa();\n\napp.use(mount(\'/graphql\', convert.back(graphqlHTTP({\n  schema: MyGraphQLSchema,\n  graphiql: true\n}))));\n```\n\n> NOTE: Below is a copy from express-graphql\'s README. In this time I implemented almost same api, but it may be changed as time goes on.\n\n## Options\n\nThe `graphqlHTTP` function accepts the following options:\n\n  * **`schema`**: A `GraphQLSchema` instance from [`graphql-js`][].\n    A `schema` *must* be provided.\n\n  * **`graphiql`**: If `true`, presents [GraphiQL][] when the route with a\n    `/graphiql` appended is loaded in a browser. We recommend that you set\n    `graphiql` to `true` when your app is in development, because it\'s\n    quite useful. You may or may not want it in production.\n\n  * **`rootValue`**: A value to pass as the `rootValue` to the `graphql()`\n    function from [`graphql-js/src/execute.js`](https://github.com/graphql/graphql-js/blob/master/src/execution/execute.js#L122).\n\n  * **`context`**: A value to pass as the `context` to the `graphql()`\n    function from [`graphql-js/src/execute.js`](https://github.com/graphql/graphql-js/blob/master/src/execution/execute.js#L123). If `context` is not provided, the\n    `ctx` object is passed as the context.\n\n  * **`pretty`**: If `true`, any JSON response will be pretty-printed.\n\n  * **`formatError`**: An optional function which will be used to format any\n    errors produced by fulfilling a GraphQL operation. If no function is\n    provided, GraphQL\'s default spec-compliant [`formatError`][] function will be used.\n\n  * **`extensions`**: An optional function for adding additional metadata to the\n    GraphQL response as a key-value object. The result will be added to\n    `"extensions"` field in the resulting JSON. This is often a useful place to\n    add development time metadata such as the runtime of a query or the amount\n    of resources consumed. This may be an async function. The function is\n    given one object as an argument: `{ document, variables, operationName, result, context }`.\n\n  * **`validationRules`**: Optional additional validation rules queries must\n    satisfy in addition to those defined by the GraphQL spec.\n\n  * **`fieldResolver`**\n\n\n## HTTP Usage\n\nOnce installed at a path, `koa-graphql` will accept requests with\nthe parameters:\n\n  * **`query`**: A string GraphQL document to be executed.\n\n  * **`variables`**: The runtime values to use for any GraphQL query variables\n    as a JSON object.\n\n  * **`operationName`**: If the provided `query` contains multiple named\n    operations, this specifies which operation should be executed. If not\n    provided, a 400 error will be returned if the `query` contains multiple\n    named operations.\n\n  * **`raw`**: If the `graphiql` option is enabled and the `raw` parameter is\n    provided raw JSON will always be returned instead of GraphiQL even when\n    loaded from a browser.\n\nGraphQL will first look for each parameter in the URL\'s query-string:\n\n```\n/graphql?query=query+getUser($id:ID){user(id:$id){name}}&variables={"id":"4"}\n```\n\nIf not found in the query-string, it will look in the POST request body.\n\nIf a previous middleware has already parsed the POST body, the `request.body`\nvalue will be used. Use [`multer`][] or a similar middleware to add support\nfor `multipart/form-data` content, which may be useful for GraphQL mutations\ninvolving uploading files. See an [example using multer](https://github.com/chentsulin/koa-graphql/blob/e1a98f3548203a3c41fedf3d4267846785480d28/src/__tests__/http-test.js#L664-L732).\n\nIf the POST body has not yet been parsed, koa-graphql will interpret it\ndepending on the provided *Content-Type* header.\n\n  * **`application/json`**: the POST body will be parsed as a JSON\n    object of parameters.\n\n  * **`application/x-www-form-urlencoded`**: this POST body will be\n    parsed as a url-encoded string of key-value pairs.\n\n  * **`application/graphql`**: The POST body will be parsed as GraphQL\n    query string, which provides the `query` parameter.\n\n## Combining with Other koa Middleware\n\nBy default, the koa request is passed as the GraphQL `context`.\nSince most koa middleware operates by adding extra data to the\nrequest object, this means you can use most koa middleware just by inserting it before `graphqlHTTP` is mounted. This covers scenarios such as authenticating the user, handling file uploads, or mounting GraphQL on a dynamic endpoint.\n\nThis example uses [`koa-session`][] to provide GraphQL with the currently logged-in session.\n\n```js\nconst Koa = require(\'koa\');\nconst mount = require(\'koa-mount\');\nconst session = require(\'koa-session\');\nconst graphqlHTTP = require(\'koa-graphql\');\n\nconst app = new Koa();\napp.keys = [ \'some secret hurr\' ];\napp.use(session(app));\napp.use(function *(next) {\n  this.session.id = \'me\';\n  yield next;\n});\n\napp.use(mount(\'/graphql\', graphqlHTTP({\n  schema: MySessionAwareGraphQLSchema,\n  graphiql: true\n})));\n```\n\nThen in your type definitions, you can access the ctx via the third "context" argument in your `resolve` function:\n\n```js\nnew GraphQLObjectType({\n  name: \'MyType\',\n  fields: {\n    myField: {\n      type: GraphQLString,\n      resolve(parentValue, args, ctx) {\n        // use `ctx.session` here\n      }\n    }\n  }\n});\n```\n\n\n## Providing Extensions\n\nThe GraphQL response allows for adding additional information in a response to\na GraphQL query via a field in the response called `"extensions"`. This is added\nby providing an `extensions` function when using `graphqlHTTP`. The function\nmust return a JSON-serializable Object.\n\nWhen called, this is provided an argument which you can use to get information\nabout the GraphQL request:\n\n`{ document, variables, operationName, result, context }`\n\nThis example illustrates adding the amount of time consumed by running the\nprovided query, which could perhaps be used by your development tools.\n\n```js\nconst graphqlHTTP = require(\'koa-graphql\');\n\nconst app = new Koa();\n\napp.keys = [ \'some secret hurr\' ];\napp.use(session(app));\n\nconst extensions = ({ document, variables, operationName, result, context }) => {\n  return {\n    runTime: Date.now() - context.startTime,\n  };\n}\n\napp.use(mount(\'/graphql\', graphqlHTTP(request => {\n  return {\n    schema: MyGraphQLSchema,\n    context: { startTime: Date.now() },\n    graphiql: true,\n    extensions,\n  };\n})));\n```\n\nWhen querying this endpoint, it would include this information in the result,\nfor example:\n\n```js\n{\n  "data": { ... }\n  "extensions": {\n    "runTime": 135\n  }\n}\n```\n\n\n## Additional Validation Rules\n\nGraphQL\'s [validation phase](https://facebook.github.io/graphql/#sec-Validation) checks the query to ensure that it can be successfully executed against the schema. The `validationRules` option allows for additional rules to be run during this phase. Rules are applied to each node in an AST representing the query using the Visitor pattern.\n\nA validation rule is a function which returns a visitor for one or more node Types. Below is an example of a validation preventing the specific fieldname `metadata` from being queried. For more examples see the [`specifiedRules`](https://github.com/graphql/graphql-js/tree/master/src/validation/rules) in the [graphql-js](https://github.com/graphql/graphql-js) package.\n\n```js\nimport { GraphQLError } from \'graphql\';\n\nexport function DisallowMetadataQueries(context) {\n  return {\n    Field(node) {\n      const fieldName = node.name.value;\n\n      if (fieldName === "metadata") {\n        context.reportError(\n          new GraphQLError(\n            `Validation: Requesting the field ${fieldName} is not allowed`,\n          ),\n        );\n      }\n    }\n  };\n}\n```\n\n## Debugging Tips\n\nDuring development, it\'s useful to get more information from errors, such as\nstack traces. Providing a function to `formatError` enables this:\n\n```js\nformatError: (error, ctx) => ({\n  message: error.message,\n  locations: error.locations,\n  stack: error.stack ? error.stack.split(\'\\n\') : [],\n  path: error.path\n})\n```\n\n\n### Examples\n\n- [koa-graphql-relay-example](https://github.com/chentsulin/koa-graphql-relay-example)\n- [tests](https://github.com/chentsulin/koa-graphql/blob/master/src/__tests__/http-test.js)\n\n\n### Other relevant projects\n\nPlease checkout [awesome-graphql](https://github.com/chentsulin/awesome-graphql).\n\n### Contributing\n\nWelcome pull requests!\n\n### License\n\nBSD-3-Clause\n\n[`graphql-js`]: https://github.com/graphql/graphql-js\n[`formatError`]: https://github.com/graphql/graphql-js/blob/master/src/error/formatError.js\n[GraphiQL]: https://github.com/graphql/graphiql\n[`multer`]: https://github.com/expressjs/multer\n[`koa-session`]: https://github.com/koajs/session\n[npm-image]: https://img.shields.io/npm/v/koa-graphql.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/koa-graphql\n[travis-image]: https://travis-ci.org/chentsulin/koa-graphql.svg?branch=master\n[travis-url]: https://travis-ci.org/chentsulin/koa-graphql\n[coveralls-image]: https://coveralls.io/repos/chentsulin/koa-graphql/badge.svg?branch=master&service=github\n[coveralls-url]: https://coveralls.io/github/chentsulin/koa-graphql?branch=master\n[david_img]: https://david-dm.org/chentsulin/koa-graphql.svg\n[david_site]: https://david-dm.org/chentsulin/koa-graphql\n'