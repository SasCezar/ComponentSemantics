b'# uPlexa\n\nCopyright (c) 2018-2019 uPlexa.  \nCopyright (c) 2014-2019 The Monero Project.\n\nPortions Copyright (c) 2012-2013 The Cryptonote developers.\n\n## Development resources\n\n- Web: [uplexa.com](https://uplexa.com)\n- Mail: [uplexa@protonmail.com](mailto:uplexa@protonmail.com)\n- GitHub: [https://github.com/uPlexa/uplexa](https://github.com/uPlexa/uplexa)\n- Discord: (https://discord.gg/a7mAQwJ)\n\n## Vulnerability response\n\n- Our Vulnerability Response Process encourages responsible disclosure. Please send a message to uplexa@protonmail.com with "vuln" somewhere within the title, or reach out to QuantumL3aper in Discord.\n\n## Announcements\n\n- Subscribe to our Reddit for important announcements regarding uPlexa (https://www.reddit.com/r/uPlexa/)\n\n## Build\n\n## Coverage\n\n| Type      | Status |\n|-----------|--------|\n| License   | [![License](https://img.shields.io/badge/license-BSD3-blue.svg)](https://opensource.org/licenses/BSD-3-Clause)\n\n## Introduction\n\nuPlexa is a private, secure, untraceable, decentralised digital currency. You are your bank, you control your funds, and nobody can trace your transfers unless you allow them to do so.\n\n**Privacy:** uPlexa uses a cryptographically sound system to allow you to send and receive funds without your transactions being easily revealed on the blockchain (the ledger of transactions that everyone has). This ensures that your purchases, receipts, and all transfers remain absolutely private by default.\n\n**Security:** Using the power of a distributed peer-to-peer consensus network, every transaction on the network is cryptographically secured. Individual wallets have a 25 word mnemonic seed that is only displayed once, and can be written down to backup the wallet. Wallet files are encrypted with a passphrase to ensure they are useless if stolen.\n\n**Untraceability:** By taking advantage of ring signatures, a special property of a certain type of cryptography, uPlexa is able to ensure that transactions are not only untraceable, but have an optional measure of ambiguity that ensures that transactions cannot easily be tied back to an individual user or computer.\n\n## About this project\n\nThis is the core implementation of uPlexa. It is open source and completely free to use without restrictions, except for those specified in the license agreement below. There are no restrictions on anyone creating an alternative implementation of uPlexa that uses the protocol and network in a compatible manner.\n\nAs with many development projects, the repository on Github is considered to be the "staging" area for the latest changes. Before changes are merged into that branch on the main repository, they are tested by individual developers in their own branches, submitted as a pull request, and then subsequently tested by contributors who focus on testing and code reviews. That having been said, the repository should be carefully considered before using it in a production environment, unless there is a patch in the repository for a particular show-stopping issue you are experiencing. It is generally a better idea to use a tagged release for stability.\n\n**Anyone is welcome to contribute to uPlexa\'s codebase!** If you have a fix or code change, feel free to submit it as a pull request directly to the "master" branch. In cases where the change is relatively small or does not affect other parts of the codebase it may be merged in immediately by any one of the collaborators. On the other hand, if the change is particularly large or complex, it is expected that it will be discussed at length either well in advance of the pull request being submitted, or even directly on the pull request.\n\n## License\n\nSee [LICENSE](LICENSE).\n\n## Contributing\n\nIf you want to help out, see [CONTRIBUTING](CONTRIBUTING.md) for a set of guidelines.\n\n## Scheduled software upgrades\n\nuPlexa uses a fixed-schedule software upgrade (hard fork) mechanism to implement new features. This means that users of uPlexa (end users and service providers) should run current versions and upgrade their software on a regular schedule. Software upgrades occur during the months of March and August. The required software for these upgrades will be available prior to the scheduled date. Please check the repository prior to this date for the proper uPlexa software version. Below is the historical schedule and the projected schedule for the next upgrade.\nDates are provided in the format YYYY-MM-DD.\n\n\n| Software upgrade block height | Date       | Fork version | Minimum uPlexa version | Recommended uPlexa version | Details                                                                            |  \n| ------------------------------ | -----------| ----------------- | ---------------------- | -------------------------- | ---------------------------------------------------------------------------------- |\n| 2                        | 2018-10-23 | v9                | v0.1.9.0                 | v0.1.9.0                     | CryptoNight-UPX, BulletProof\n| 52279                        | 2018-11-25 | v10                | v0.2.0.0                 | v0.2.0.0                     | 120s block times, LWMA difficulty\n| 162,090\t\t\t| 2019-04-29 | v11\t\t| v0.2.1.0\t\t| v0.2.1.0\t\t\t| ALGO: UPXTWO (Crazy fast)\n| 295,550\t\t\t| 2019-11-01 | v12\t\t| v0.2.2.0\t\t| v0.2.2.0\t\t\t| Reward Halvening, Fee Reduction\nX\'s indicate that these details have not been determined as of commit date.\n\n## Release staging schedule and protocol\n\nApproximately three months prior to a scheduled software upgrade, a branch from Master will be created with the new release version tag. Pull requests that address bugs should then be made to both Master and the new release branch. Pull requests that require extensive review and testing (generally, optimizations and new features) should *not* be made to the release branch.\n\n## Compiling uPlexa from source\n\n### Dependencies\n\nThe following table summarizes the tools and libraries required to build. A\nfew of the libraries are also included in this repository (marked as\n"Vendored"). By default, the build uses the library installed on the system,\nand ignores the vendored sources. However, if no library is found installed on\nthe system, then the vendored source will be built and used. The vendored\nsources are also used for statically-linked builds because distribution\npackages often include only shared library binaries (`.so`) but not static\nlibrary archives (`.a`).\n\n| Dep          | Min. version  | Vendored | Debian/Ubuntu pkg  | Arch pkg     | Fedora            | Optional | Purpose        |\n| ------------ | ------------- | -------- | ------------------ | ------------ | ----------------- | -------- | -------------- |\n| GCC          | 4.7.3         | NO       | `build-essential`  | `base-devel` | `gcc`             | NO       |                |\n| CMake        | 3.5           | NO       | `cmake`            | `cmake`      | `cmake`           | NO       |                |\n| pkg-config   | any           | NO       | `pkg-config`       | `base-devel` | `pkgconf`         | NO       |                |\n| Boost        | 1.58          | NO       | `libboost-all-dev` | `boost`      | `boost-devel`     | NO       | C++ libraries  |\n| OpenSSL      | basically any | NO       | `libssl-dev`       | `openssl`    | `openssl-devel`   | NO       | sha256 sum     |\n| libzmq       | 3.0.0         | NO       | `libzmq3-dev`      | `zeromq`     | `cppzmq-devel`    | NO       | ZeroMQ library |\n| OpenPGM      | ?             | NO       | `libpgm-dev`       | `libpgm`     | `openpgm-devel`   | NO       | For ZeroMQ     |\n| libnorm[2]   | ?             | NO       | `libnorm-dev`      |              |               `   | YES      | For ZeroMQ     |\n| libunbound   | 1.4.16        | YES      | `libunbound-dev`   | `unbound`    | `unbound-devel`   | NO       | DNS resolver   |\n| libsodium    | ?             | NO       | `libsodium-dev`    | `libsodium`  | `libsodium-devel` | NO       | cryptography   |\n| libunwind    | any           | NO       | `libunwind8-dev`   | `libunwind`  | `libunwind-devel` | YES      | Stack traces   |\n| liblzma      | any           | NO       | `liblzma-dev`      | `xz`         | `xz-devel`        | YES      | For libunwind  |\n| libreadline  | 6.3.0         | NO       | `libreadline6-dev` | `readline`   | `readline-devel`  | YES      | Input editing  |\n| ldns         | 1.6.17        | NO       | `libldns-dev`      | `ldns`       | `ldns-devel`      | YES      | SSL toolkit    |\n| expat        | 1.1           | NO       | `libexpat1-dev`    | `expat`      | `expat-devel`     | YES      | XML parsing    |\n| GTest        | 1.5           | YES      | `libgtest-dev`[1]  | `gtest`      | `gtest-devel`     | YES      | Test suite     |\n| Doxygen      | any           | NO       | `doxygen`          | `doxygen`    | `doxygen`         | YES      | Documentation  |\n| Graphviz     | any           | NO       | `graphviz`         | `graphviz`   | `graphviz`        | YES      | Documentation  |\n\n\n[1] On Debian/Ubuntu `libgtest-dev` only includes sources and headers. You must\nbuild the library binary manually. This can be done with the following command ```sudo apt-get install libgtest-dev && cd /usr/src/gtest && sudo cmake . && sudo make && sudo mv libg* /usr/lib/ ```\n[2] libnorm-dev is needed if your zmq library was built with libnorm, and not needed otherwise\n\nDebian / Ubuntu one liner for all dependencies  \n``` sudo apt update && sudo apt install build-essential cmake pkg-config libboost-all-dev libssl-dev libzmq3-dev libunbound-dev libsodium-dev libunwind8-dev liblzma-dev libreadline6-dev libldns-dev libexpat1-dev doxygen graphviz libpgm-dev```\n\n### Cloning the repository\n\nClone recursively to pull-in needed submodule(s):\n\n`$ git clone --recursive https://github.com/uPlexa/uplexa`\n\nIf you already have a repo cloned, initialize and update:\n\n`$ cd uplexa && git submodule init && git submodule update`\n\n### Build instructions\n\nuPlexa uses the CMake build system and a top-level [Makefile](Makefile) that\ninvokes cmake commands as needed.\n\n#### On Linux and OS X\n\n* Install the dependencies\n* Change to the root of the source code directory, change to the most recent release branch, and build:\n\n        cd uplexa\n        git checkout stable\n        make release\n\n    *Optional*: If your machine has several cores and enough memory, enable\n    parallel build by running `make -j<number of threads>` instead of `make`. For\n    this to be worthwhile, the machine should have one core and about 2GB of RAM\n    available per thread.\n\n    *Note*: If cmake can not find zmq.hpp file on OS X, installing `zmq.hpp` from\n    https://github.com/zeromq/cppzmq to `/usr/local/include` should fix that error.\n\n    *Note*: The instructions above will compile the most stable release of the\n    uPlexa software. If you would like to use and test the most recent software,\n    use ```git checkout master```. The master branch may contain updates that are\n    both unstable and incompatible with release software, though testing is always\n    encouraged. If you would like to checkout the most stable branch, please use ```git checkout stable```\n\n* The resulting executables can be found in `build/release/bin`\n\n* Add `PATH="$PATH:$HOME/uplexa/build/release/bin"` to `.profile`\n\n* Run uPlexa with `uplexad --detach`\n\n* **Optional**: build and run the test suite to verify the binaries:\n\n        make release-test\n\n    *NOTE*: `core_tests` test may take a few hours to complete.\n\n* **Optional**: to build binaries suitable for debugging:\n\n         make debug\n\n* **Optional**: to build statically-linked binaries:\n\n         make release-static\n\nDependencies need to be built with -fPIC. Static libraries usually aren\'t, so you may have to build them yourself with -fPIC. Refer to their documentation for how to build them.\n\n* **Optional**: build documentation in `doc/html` (omit `HAVE_DOT=YES` if `graphviz` is not installed):\n\n        HAVE_DOT=YES doxygen Doxyfile\n\n#### On the Raspberry Pi\n\nTested on a Raspberry Pi Zero with a clean install of minimal Raspbian Stretch (2017-09-07 or later) from https://www.raspberrypi.org/downloads/raspbian/. If you are using Raspian Jessie, [please see note in the following section](#note-for-raspbian-jessie-users).\n\n* `apt-get update && apt-get upgrade` to install all of the latest software\n\n* Install the dependencies for uPlexa from the \'Debian\' column in the table above.\n\n* Increase the system swap size:\n```\n\tsudo /etc/init.d/dphys-swapfile stop  \n\tsudo nano /etc/dphys-swapfile  \n\tCONF_SWAPSIZE=1024  \n\tsudo /etc/init.d/dphys-swapfile start  \n```\n\n* If using an external hard disk without an external power supply, ensure it gets enough power to avoid hardware issues when syncing, by adding the line "max_usb_current=1" to /boot/config.txt\n\n* Clone uplexa and checkout most recent release version:\n```\n        git clone https://github.com/uPlexa/uplexa.git\n\tcd uplexa\n\tgit checkout tags/v0.2.1.0\n```\n* Build:\n```\n        make release\n```\n* Wait 4-6 hours\n\n* The resulting executables can be found in `build/release/bin`\n\n* Add `PATH="$PATH:$HOME/uplexa/build/release/bin"` to `.profile`\n\n* Run uPlexa with `uplexad --detach`\n\n* You may wish to reduce the size of the swap file after the build has finished, and delete the boost directory from your home directory\n\n#### *Note for Raspbian Jessie users:*\n\nIf you are using the older Raspbian Jessie image, compiling uPlexa is a bit more complicated. The version of Boost available in the Debian Jessie repositories is too old to use with uPlexa, and thus you must compile a newer version yourself. The following explains the extra steps, and has been tested on a Raspberry Pi 2 with a clean install of minimal Raspbian Jessie.\n\n* As before, `apt-get update && apt-get upgrade` to install all of the latest software, and increase the system swap size\n\n```\n\tsudo /etc/init.d/dphys-swapfile stop  \n\tsudo nano /etc/dphys-swapfile  \n\tCONF_SWAPSIZE=1024  \n\tsudo /etc/init.d/dphys-swapfile start  \n```\n\n* Then, install the dependencies for uPlexa except `libunwind` and `libboost-all-dev`\n\n* Install the latest version of boost (this may first require invoking `apt-get remove --purge libboost*` to remove a previous version if you\'re not using a clean install):\n```\n\tcd  \n\twget https://sourceforge.net/projects/boost/files/boost/1.64.0/boost_1_64_0.tar.bz2  \n\ttar xvfo boost_1_64_0.tar.bz2  \n\tcd boost_1_64_0  \n\t./bootstrap.sh  \n\tsudo ./b2  \n```\n* Wait ~8 hours\n```\n\tsudo ./bjam cxxflags=-fPIC cflags=-fPIC -a install\n```\n* Wait ~4 hours\n\n* From here, follow the [general Raspberry Pi instructions](#on-the-raspberry-pi) from the "Clone uplexa and checkout most recent release version" step.\n\n#### On Windows:\n\nBinaries for Windows are built on Windows using the MinGW toolchain within\n[MSYS2 environment](https://www.msys2.org). The MSYS2 environment emulates a\nPOSIX system. The toolchain runs within the environment and *cross-compiles*\nbinaries that can run outside of the environment as a regular Windows\napplication.\n\n**Preparing the build environment**\n\n* Download and install the [MSYS2 installer](https://www.msys2.org), either the 64-bit or the 32-bit package, depending on your system.\n* Open the MSYS shell via the `MSYS2 Shell` shortcut\n* Update packages using pacman:  \n\n        pacman -Syuu  \n\n* Exit the MSYS shell using Alt+F4  \n* Edit the properties for the `MSYS2 Shell` shortcut changing "msys2_shell.bat" to "msys2_shell.cmd -mingw64" for 64-bit builds or "msys2_shell.cmd -mingw32" for 32-bit builds\n* Restart MSYS shell via modified shortcut and update packages again using pacman:  \n\n        pacman -Syuu  \n\n\n* Install dependencies:\n\n    To build for 64-bit Windows:\n\n        pacman -S mingw-w64-x86_64-toolchain make mingw-w64-x86_64-cmake mingw-w64-x86_64-boost mingw-w64-x86_64-openssl mingw-w64-x86_64-zeromq mingw-w64-x86_64-libsodium mingw-w64-x86_64-hidapi\n\n    To build for 32-bit Windows:\n\n        pacman -S mingw-w64-i686-toolchain make mingw-w64-i686-cmake mingw-w64-i686-boost mingw-w64-i686-openssl mingw-w64-i686-zeromq mingw-w64-i686-libsodium mingw-w64-i686-hidapi\n\n* Open the MingW shell via `MinGW-w64-Win64 Shell` shortcut on 64-bit Windows\n  or `MinGW-w64-Win64 Shell` shortcut on 32-bit Windows. Note that if you are\n  running 64-bit Windows, you will have both 64-bit and 32-bit MinGW shells.\n\n**Cloning**\n\n* To git clone, run:\n\n        git clone --recursive https://github.com/uPlexa/uplexa.git\n\n**Building**\n\n* Change to the cloned directory, run:\n\n        cd uplexa\n\n* If you would like a specific [version/tag](https://github.com/uPlexa/uplexa/tags), do a git checkout for that version. eg. \'v0.2.1.0\'. If you dont care about the version and just want binaries from master, skip this step:\n\n        git checkout stable\n\n* If you are on a 64-bit system, run:\n\n        make release-static-win64\n\n* If you are on a 32-bit system, run:\n\n        make release-static-win32\n\n* The resulting executables can be found in `build/release/bin`\n\n* **Optional**: to build Windows binaries suitable for debugging on a 64-bit system, run:\n\n        make debug-static-win64\n\n* **Optional**: to build Windows binaries suitable for debugging on a 32-bit system, run:\n\n        make debug-static-win32\n\n* The resulting executables can be found in `build/debug/bin`\n\n### On FreeBSD:\n\nThe project can be built from scratch by following instructions for Linux above. If you are running uplexa in a jail you need to add the flag: `allow.sysvipc=1` to your jail configuration, otherwise lmdb will throw the error message: `Failed to open lmdb environment: Function not implemented`.\n\nWe expect to add uPlexa into the ports tree in the near future, which will aid in managing installations using ports or packages.\n\n### On OpenBSD:\n\n#### OpenBSD < 6.2\n\nThis has been tested on OpenBSD 5.8.\n\nYou will need to add a few packages to your system. `pkg_add db cmake gcc gcc-libs g++ gtest`.\n\nThe doxygen and graphviz packages are optional and require the xbase set.\n\nThe Boost package has a bug that will prevent librpc.a from building correctly. In order to fix this, you will have to Build boost yourself from scratch. Follow the directions here (under "Building Boost"):\nhttps://github.com/bitcoin/bitcoin/blob/master/doc/build-openbsd.md\n\nYou will have to add the serialization, date_time, and regex modules to Boost when building as they are needed by uPlexa.\n\nTo build: `env CC=egcc CXX=eg++ CPP=ecpp DEVELOPER_LOCAL_TOOLS=1 BOOST_ROOT=/path/to/the/boost/you/built make release-static-64`\n\n#### OpenBSD >= 6.2\n\nYou will need to add a few packages to your system. `pkg_add cmake zeromq libiconv`.\n\nThe doxygen and graphviz packages are optional and require the xbase set.\n\n\nBuild the Boost library using clang. This guide is derived from: https://github.com/bitcoin/bitcoin/blob/master/doc/build-openbsd.md\n\nWe assume you are compiling with a non-root user and you have `doas` enabled.\n\nNote: do not use the boost package provided by OpenBSD, as we are installing boost to `/usr/local`.\n\n```\n# Create boost building directory\nmkdir ~/boost\ncd ~/boost\n\n# Fetch boost source\nftp -o boost_1_64_0.tar.bz2 https://netcologne.dl.sourceforge.net/project/boost/boost/1.64.0/boost_1_64_0.tar.bz2\n\n# MUST output: (SHA256) boost_1_64_0.tar.bz2: OK\necho "7bcc5caace97baa948931d712ea5f37038dbb1c5d89b43ad4def4ed7cb683332 boost_1_64_0.tar.bz2" | sha256 -c\ntar xfj boost_1_64_0.tar.bz2\n\n# Fetch and apply boost patches, required for OpenBSD\nftp -o boost_test_impl_execution_monitor_ipp.patch https://raw.githubusercontent.com/openbsd/ports/bee9e6df517077a7269ff0dfd57995f5c6a10379/devel/boost/patches/patch-boost_test_impl_execution_monitor_ipp\nftp -o boost_config_platform_bsd_hpp.patch https://raw.githubusercontent.com/openbsd/ports/90658284fb786f5a60dd9d6e8d14500c167bdaa0/devel/boost/patches/patch-boost_config_platform_bsd_hpp\n\n# MUST output: (SHA256) boost_config_platform_bsd_hpp.patch: OK\necho "1f5e59d1154f16ee1e0cc169395f30d5e7d22a5bd9f86358f738b0ccaea5e51d boost_config_platform_bsd_hpp.patch" | sha256 -c\n# MUST output: (SHA256) boost_test_impl_execution_monitor_ipp.patch: OK\necho "30cec182a1437d40c3e0bd9a866ab5ddc1400a56185b7e671bb3782634ed0206 boost_test_impl_execution_monitor_ipp.patch" | sha256 -c\n\ncd boost_1_64_0\npatch -p0 < ../boost_test_impl_execution_monitor_ipp.patch\npatch -p0 < ../boost_config_platform_bsd_hpp.patch\n\n# Start building boost\necho \'using clang : : c++ : <cxxflags>"-fvisibility=hidden -fPIC" <linkflags>"" <archiver>"ar" <striper>"strip"  <ranlib>"ranlib" <rc>"" : ;\' > user-config.jam\n./bootstrap.sh --without-icu --with-libraries=chrono,filesystem,program_options,system,thread,test,date_time,regex,serialization,locale --with-toolset=clang\n./b2 toolset=clang cxxflags="-stdlib=libc++" linkflags="-stdlib=libc++" -sICONV_PATH=/usr/local\ndoas ./b2 -d0 runtime-link=shared threadapi=pthread threading=multi link=static variant=release --layout=tagged --build-type=complete --user-config=user-config.jam -sNO_BZIP2=1 -sICONV_PATH=/usr/local --prefix=/usr/local install\n```\n\nBuild cppzmq\n\nBuild the cppzmq bindings.\n\nWe assume you are compiling with a non-root user and you have `doas` enabled.\n\n```\n# Create cppzmq building directory\nmkdir ~/cppzmq\ncd ~/cppzmq\n\n# Fetch cppzmq source\nftp -o cppzmq-4.2.3.tar.gz https://github.com/zeromq/cppzmq/archive/v4.2.3.tar.gz\n\n# MUST output: (SHA256) cppzmq-4.2.3.tar.gz: OK\necho "3e6b57bf49115f4ae893b1ff7848ead7267013087dc7be1ab27636a97144d373 cppzmq-4.2.3.tar.gz" | sha256 -c\ntar xfz cppzmq-4.2.3.tar.gz\n\n# Start building cppzmq\ncd cppzmq-4.2.3\nmkdir build\ncd build\ncmake ..\ndoas make install\n```\n\nBuild uplexa: `env DEVELOPER_LOCAL_TOOLS=1 BOOST_ROOT=/usr/local make release-static`\n\n### On Solaris:\n\nThe default Solaris linker can\'t be used, you have to install GNU ld, then run cmake manually with the path to your copy of GNU ld:\n\n        mkdir -p build/release\n        cd build/release\n        cmake -DCMAKE_LINKER=/path/to/ld -D CMAKE_BUILD_TYPE=Release ../..\n        cd ../..\n\nThen you can run make as usual.\n\n### On Linux for Android (using docker):\n\n        # Build image (for ARM 32-bit)\n        docker build -f utils/build_scripts/android32.Dockerfile -t uplexa-android .\n        # Build image (for ARM 64-bit)\n        docker build -f utils/build_scripts/android64.Dockerfile -t uplexa-android .\n        # Create container\n        docker create -it --name uplexa-android uplexa-android bash\n        # Get binaries\n        docker cp uplexa-android:/src/build/release/bin .\n\n### Building portable statically linked binaries (Cross Compiling)\n\nBy default, in either dynamically or statically linked builds, binaries target the specific host processor on which the build happens and are not portable to other processors. Portable binaries can be built using the following targets:\n\n* ```make release-static-linux-x86_64``` builds binaries on Linux on x86_64 portable across POSIX systems on x86_64 processors\n* ```make release-static-linux-i686``` builds binaries on Linux on x86_64 or i686 portable across POSIX systems on i686 processors\n* ```make release-static-linux-armv8``` builds binaries on Linux portable across POSIX systems on armv8 processors\n* ```make release-static-linux-armv7``` builds binaries on Linux portable across POSIX systems on armv7 processors\n* ```make release-static-linux-armv6``` builds binaries on Linux portable across POSIX systems on armv6 processors\n* ```make release-static-win64``` builds binaries on 64-bit Windows portable across 64-bit Windows systems\n* ```make release-static-win32``` builds binaries on 64-bit or 32-bit Windows portable across 32-bit Windows systems\n\n### Cross Compiling\n\nYou can also cross-compile static binaries on Linux for Windows and macOS with the `depends` system.\n\n* ```make depends target=x86_64-linux-gnu``` for 64-bit linux binaries.\n* ```make depends target=x86_64-w64-mingw32``` for 64-bit windows binaries. Requires: python3 g++-mingw-w64-x86-64 wine1.6 bc\n* ```make depends target=x86_64-apple-darwin11``` for macOS binaries. Requires: cmake imagemagick libcap-dev librsvg2-bin libz-dev libbz2-dev libtiff-tools python-dev\n* ```make depends target=i686-linux-gnu``` for 32-bit linux binaries. Requires: g++-multilib bc\n* ```make depends target=i686-w64-mingw32``` for 32-bit windows binaries. Requires: python3 g++-mingw-w64-i686\n* ```make depends target=arm-linux-gnueabihf``` for armv7 binaries. Requires: g++-arm-linux-gnueabihf\n* ```make depends target=aarch64-linux-gnu``` for armv8 binaries. Requires: g++-aarch64-linux-gnu\n\nThe required packages are the names for each toolchain on apt. Depending on your distro, they may have different names.\n\nUsing `depends` might also be easier to compile uPlexa on Windows than using MSYS. Activate Windows Subsystem for Linux (WSL) with a distro (for example Ubuntu), install the apt build-essentials and follow the `depends` steps as depicted above.\n\nThe produced binaries still link libc dynamically. If the binary is compiled on a current distribution, it might not run on an older distribution with an older installation of libc. Passing `-DBACKCOMPAT=ON` to cmake will make sure that the binary will run on systems having at least libc version 2.17.\n\n## Installing uPlexa from a package\n\n**DISCLAIMER: These packages are not part of this repository or maintained by this project\'s contributors, and as such, do not go through the same review process to ensure their trustworthiness and security.**\n\nPackages are available for\n\n* Ubuntu and [snap supported](https://snapcraft.io/docs/core/install) systems, via a community contributed build.\n\n\tsnap install uplexa --beta\n\nInstalling a snap is very quick. Snaps are secure. They are isolated with all of their dependencies. Snaps also auto update when a new version is released.\n\n* Arch Linux (via [AUR](https://aur.archlinux.org/)):\n  - Stable release: [`uplexa`](https://aur.archlinux.org/packages/uplexa)\n  - Bleeding edge: [`uplexa-git`](https://aur.archlinux.org/packages/uplexa-git)\n\n* Void Linux:\n\n        xbps-install -S uplexa\n\n* GuixSD\n\n        guix package -i uplexa\n\n* Docker\n\n        # Build using all available cores\n        docker build -t uplexa .\n\n        # or build using a specific number of cores (reduce RAM requirement)\n        docker build --build-arg NPROC=1 -t uplexa .\n\n        # either run in foreground\n        docker run -it -v /uplexa/chain:/root/.bituplexa -v /uplexa/wallet:/wallet -p 18080:18080 uplexa\n\n        # or in background\n        docker run -it -d -v /uplexa/chain:/root/.bituplexa -v /uplexa/wallet:/wallet -p 18080:18080 uplexa\n\n* The build needs 3 GB space.\n* Wait one  hour or more\n\nPackaging for your favorite distribution would be a welcome contribution!\n\nYou can also cross-compile binaries on linux for windows and macos with the depends system. Go to contrib/depends and type:\n\n* ```make HOST=x86_64-linux-gnu``` for 64-bit linux binaries.\n* ```make HOST=x86_64-w64-mingw32``` for 64-bit windows binaries. Requires: python3 nsis g++-mingw-w64-x86-64 wine1.6 bc\n* ```make HOST=x86_64-apple-darwin11``` for darwin binaries. Requires: cmake imagemagick libcap-dev librsvg2-bin libz-dev libbz2-dev libtiff-tools python-dev\n* ```make HOST=i686-linux-gnu``` for 32-bit linux binaries. Requires: g++-multilib bc\n* ```make HOST=i686-w64-mingw32``` for 32-bit windows binaries. Requires: python3 nsis g++-mingw-w64-i686\n* ```make HOST=arm-linux-gnueabihf``` for armv6 binaries. Requires: g++-arm-linux-gnueabihf\n\nThe required packages are the names for each toolchain on apt. Depending on your distro, they may have different names.\nThen go back to the source dir and type for example for windows 64bit:\n\n* ```cmake -DCMAKE_TOOLCHAIN_FILE=`pwd`/contrib/depends/x86_64-w64-mingw32```\n\nUsing depends might also be easier to compile uplexa on windows than using msys. Activate windows subsystem for linux (for example ubuntu) install the apt build-essentials and follow the depends steps as depicted above.\n\n## Running uplexad\n\nThe build places the binary in `bin/` sub-directory within the build directory\nfrom which cmake was invoked (repository root by default). To run in\nforeground:\n\n    ./bin/uplexad\n\nTo list all available options, run `./bin/uplexad --help`.  Options can be\nspecified either on the command line or in a configuration file passed by the\n`--config-file` argument.  To specify an option in the configuration file, add\na line with the syntax `argumentname=value`, where `argumentname` is the name\nof the argument without the leading dashes, for example `log-level=1`.\n\nTo run in background:\n\n    ./bin/uplexad --log-file uplexad.log --detach\n\nTo run as a systemd service, copy\n[uplexad.service](utils/systemd/uplexad.service) to `/etc/systemd/system/` and\n[uplexad.conf](utils/conf/uplexad.conf) to `/etc/`. The [example\nservice](utils/systemd/uplexad.service) assumes that the user `uplexa` exists\nand its home is the data directory specified in the [example\nconfig](utils/conf/uplexad.conf).\n\nIf you\'re on Mac, you may need to add the `--max-concurrency 1` option to\nuplexa-wallet-cli, and possibly uplexad, if you get crashes refreshing.\n\n## Internationalization\n\nSee [README.i18n.md](README.i18n.md).\n\n## Using Tor\n\nWhile uPlexa isn\'t made to integrate with Tor, it can be used wrapped with torsocks, by\nsetting the following configuration parameters and environment variables:\n\n* `--p2p-bind-ip 127.0.0.1` on the command line or `p2p-bind-ip=127.0.0.1` in\n  uplexad.conf to disable listening for connections on external interfaces.\n* `--no-igd` on the command line or `no-igd=1` in uplexad.conf to disable IGD\n  (UPnP port forwarding negotiation), which is pointless with Tor.\n* `DNS_PUBLIC=tcp` or `DNS_PUBLIC=tcp://x.x.x.x` where x.x.x.x is the IP of the\n  desired DNS server, for DNS requests to go over TCP, so that they are routed\n  through Tor. When IP is not specified, uplexad uses the default list of\n  servers defined in [src/common/dns_utils.cpp](src/common/dns_utils.cpp).\n* `TORSOCKS_ALLOW_INBOUND=1` to tell torsocks to allow uplexad to bind to interfaces\n   to accept connections from the wallet. On some Linux systems, torsocks\n   allows binding to localhost by default, so setting this variable is only\n   necessary to allow binding to local LAN/VPN interfaces to allow wallets to\n   connect from remote hosts. On other systems, it may be needed for local wallets\n   as well.\n* Do NOT pass `--detach` when running through torsocks with systemd, (see\n  [utils/systemd/uplexad.service](utils/systemd/uplexad.service) for details).\n* If you use the wallet with a Tor daemon via the loopback IP (eg, 127.0.0.1:9050),\n  then use `--untrusted-daemon` unless it is your own hidden service.\n\nExample command line to start uplexad through Tor:\n\n    DNS_PUBLIC=tcp torsocks uplexad --p2p-bind-ip 127.0.0.1 --no-igd\n\n### Using Tor on Tails\n\nTAILS ships with a very restrictive set of firewall rules. Therefore, you need\nto add a rule to allow this connection too, in addition to telling torsocks to\nallow inbound connections. Full example:\n\n    sudo iptables -I OUTPUT 2 -p tcp -d 127.0.0.1 -m tcp --dport 18081 -j ACCEPT\n    DNS_PUBLIC=tcp torsocks ./uplexad --p2p-bind-ip 127.0.0.1 --no-igd --rpc-bind-ip 127.0.0.1 \\\n        --data-dir /home/amnesia/Persistent/your/directory/to/the/blockchain\n\n## Debugging\n\nThis section contains general instructions for debugging failed installs or problems encountered with uPlexa. First ensure you are running the latest version built from the Github repo.\n\n### Obtaining stack traces and core dumps on Unix systems\n\nWe generally use the tool `gdb` (GNU debugger) to provide stack trace functionality, and `ulimit` to provide core dumps in builds which crash or segfault.\n\n* To use gdb in order to obtain a stack trace for a build that has stalled:\n\nRun the build.\n\nOnce it stalls, enter the following command:\n\n```\ngdb /path/to/uplexad `pidof uplexad`\n```\n\nType `thread apply all bt` within gdb in order to obtain the stack trace\n\n* If however the core dumps or segfaults:\n\nEnter `ulimit -c unlimited` on the command line to enable unlimited filesizes for core dumps\n\nEnter `echo core | sudo tee /proc/sys/kernel/core_pattern` to stop cores from being hijacked by other tools\n\nRun the build.\n\nWhen it terminates with an output along the lines of "Segmentation fault (core dumped)", there should be a core dump file in the same directory as uplexad. It may be named just `core`, or `core.xxxx` with numbers appended.\n\nYou can now analyse this core dump with `gdb` as follows:\n\n`gdb /path/to/uplexad /path/to/dumpfile`\n\nPrint the stack trace with `bt`\n\n* To run uplexa within gdb:\n\nType `gdb /path/to/uplexad`\n\nPass command-line options with `--args` followed by the relevant arguments\n\nType `run` to run uplexad\n\n### Analysing memory corruption\n\nThere are two tools available:\n\n* ASAN\n\nConfigure uPlexa with the -D SANITIZE=ON cmake flag, eg:\n\n    cd build/debug && cmake -D SANITIZE=ON -D CMAKE_BUILD_TYPE=Debug ../..\n\nYou can then run the uplexa tools normally. Performance will typically halve.\n\n* valgrind\n\nInstall valgrind and run as `valgrind /path/to/uplexad`. It will be very slow.\n\n### LMDB\n\nInstructions for debugging suspected blockchain corruption as per @HYC\n\nThere is an `mdb_stat` command in the LMDB source that can print statistics about the database but it\'s not routinely built. This can be built with the following command:\n\n`cd ~/uplexa/external/db_drivers/liblmdb && make`\n\nThe output of `mdb_stat -ea <path to blockchain dir>` will indicate inconsistencies in the blocks, block_heights and block_info table.\n\nThe output of `mdb_dump -s blocks <path to blockchain dir>` and `mdb_dump -s block_info <path to blockchain dir>` is useful for indicating whether blocks and block_info contain the same keys.\n\nThese records are dumped as hex data, where the first line is the key and the second line is the data.\n'