b'# NodeJS RPC Client for Monero Daemon\n\nMonerod-js is a NodeJS RPC Client for Monero Daemon. \n\nIt is written in Typescript and transpiled to Javascript. Using Typescript for development comes with the benefit that all the return values are typed and errors may be spotted earlier.\n\nThe official Monero Daemon RPC documentation can be found [here](https://getmonero.org/knowledge-base/developer-guides/daemon-rpc).\n\nDeveloped for / Last tested with Monerod v0.10.3.1. \n\nCheckout the [CHANGELOG](CHANGELOG.md) to keep track of the latest changes.\n\n## Install\n```\nnpm install cryptoshrimpi/monerod-js\n```\n\n## Test\nYou need to install the dev dependencies to run the test suite:\n\n```\ncd node_modules/monerod-js\nnpm install\nnpm test\n```\n\nThe test\'s default daemon is `monero.whattheserver.me:8081`. In order to use your local node please edit `test.spec.ts` or `test.spec.js`. Some tests may fail if your daemon is configured to restrict access to certain RPC calls.\n\n## Usage\n\n### Example (Typescript)\n\n```typescript\nimport { MoneroDaemon } from "node_modules/monerod-js/lib/ts/monerod-js";\n\nvar monerod = new MoneroDaemon("monero.whattheserver.me", 8081);\n\nmonerod.getBlockCount().then((result) => {\n    console.log("Block count: " + result.count);\n}).catch((f) => {\n    console.log("Something went wrong: " + f);\n});\n```\n\n### Example (Javascript)\n\n```javascript\nconst m = require("./node_modules/monerod-js/lib/js/monerod-js");\n\nvar monerod = new m.MoneroDaemon("monero.whattheserver.me", 8081);\n\nmonerod.getBlockCount().then((result) => {\n    console.log("Block count: " + result.count);\n}).catch((f) => {\n    console.log("Something went wrong: " + f);\n});\n```\n\nRun the example code: \n```\ncd node_modules/monerod-js\nnode example.js\n```\n\n### Available methods\nPlease see [monerod-js.ts](lib/ts/monerod-js.ts) for a list of the specific return values of each method.\n\n\n```\ngetBlockCount()\n\nonGetBlockHash(blockHeight: number)\n\ngetBlockTemplate(walletAddress: string, reserveSize: number)\n\ngetLastBlockHeader()\n\ngetBlockHeaderByHash(hash: string)\n\ngetBlockHeaderByHeight(height: number)\n\ngetBlock(height: number, hash: string)\n\ngetConnections()\n\ngetInfo()\n\ngetHardFork()\n\nsetBans(bans: BansList)\n\ngetBans()\n\ngetHeight()\n\ngetTransactions(txsHashes: string[], decodeAsJson: boolean)\n\nsendRawTransaction(txAsHex: string)\n\ngetTransactionPool()\n\nsubmitBlock(blockBlobData: string)\n\ngetVersion()\n\ngetFeeEstimate()\n```\n\n## Beer\nIt is highly appreciated if you want to tip me with a beer.\n\nMonero: ```4ATwquCmjnUTuDcF2Yce4YMLexuyFMKF96W7gEA6QU8S5pffgFDi9i29R8yyvHq1MzBVNVXZXUuEtdqpgVRC2hTc7Vtuahu```\n\n## License\nMIT. See [LICENSE.md](LICENSE.md).'