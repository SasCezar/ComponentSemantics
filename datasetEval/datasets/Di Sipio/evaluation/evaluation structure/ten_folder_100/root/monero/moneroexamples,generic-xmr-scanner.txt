b'# Generic Monero Scanner\n\nThe project aims to develop generic online scanner/searcher for Monero. Its possible capability includes searching for:\n\n - outputs associated with given address and viewkey (already implemented with full support for subaddresses),\n - possible spendings based on only address and viewkey,\n - transactions which use our outputs as decoys/ring members,\n - transactions associated with given legacy payment ids,\n - multi-output transactions to subaddresses,\n - transactions with integrated payment ids,\n - and more ...\n\n## Online stagenet version\n\nThe current development version of the scanner on the stagenet network is available at:\n\n - [https://li1473-17.members.linode.com:4443/](https://li1473-17.members.linode.com:4443/)\n\n## Motivation\n\nThe idea is based on two projects:\n\n - [onion-monero-viewer](https://github.com/moneroexamples/onion-monero-viewer)\n - [transactions-export](https://github.com/moneroexamples/transactions-export)\n\nThe first project allowed for online identification of outputs associated with \ngiven address and viewkey. The second project additionally\nsearched for transactions which use the outputs as decoys/ring members. \nHowever, the first project got discontinued, while the second is a\ncommand-line program which limits its widespread use. \n\nThe generic Monero scanner is solution to these issues.\n\n## Technologies\n\nThe key technologies used in the scanner are:\n\n- [C++17](https://en.wikipedia.org/wiki/C%2B%2B17) - recent version of the C++ programming language.\n- [websockets](https://en.wikipedia.org/wiki/WebSocket) -  protocol for duplex communication between frontend and backend (support provided by [drogon](https://github.com/an-tao/drogon))\n- [FiberPool](https://github.com/moneroexamples/fiberpool) - single-file header-only C++17 [boost::fiber](https://github.com/boostorg/fiber) thread pool library\n- [xmregcore](https://github.com/moneroexamples/xmregcore) - core utilities used in moneroexample projects.\n\n## Example compilation on Ubuntu 18.04\n\n[![CircleCI](https://circleci.com/gh/moneroexamples/generic-xmr-scanner.svg?style=svg)](https://circleci.com/gh/moneroexamples/generic-xmr-scanner)\n\n### Monero download and compilation\n\nTo compile the project, most recent Monero development version (i.e., its `master` branch)\nneeds to be compiled first. \n\n```bash\n# first install monero dependencies\nsudo apt update\n\nsudo apt install git build-essential cmake libboost-all-dev miniupnpc libunbound-dev graphviz doxygen libunwind8-dev pkg-config libssl-dev libcurl4-openssl-dev libgtest-dev libreadline-dev libzmq3-dev libsodium-dev libhidapi-dev libhidapi-libusb0\n\n# go to home folder\ncd ~\n\n# get monero source code\ngit clone --recurse-submodules https://github.com/monero-project/monero.git\n\ncd monero/\n\n# compile\nmake\n```\n\nUsing `USE_SINGLE_BUILDDIR` flag is important. Without the flag, cmake of the project\nwill not be able to locate the compiled monero.\n\n### Project download and compilation\n\n```bash\n# go to home folder\ncd ~\n\n# drogon dependencies\nsudo apt install libjsoncpp-dev uuid-dev\n\ngit clone --recurse-submodules https://github.com/moneroexamples/generic-xmr-scanner\n\ncd generic-xmr-scanner\n\nmkdir build && cd build\n\ncmake ..\n\n# altearnatively can use cmake -DMONERO_DIR=/path/to/monero_folder ..\n# if monero is not in ~/monero\n\nmake\n```\n\nFollowing the compilation, `xmrscanner` executable should be available in the `build` folder.\n\n#### Html fronted\n\nThe project comes with basic html fronted located in `html` folder. Basic instruction for running `xmrscanner` over `http` or `https` (SSL) protocoles are given here:\n\n- https://github.com/moneroexamples/generic-xmr-scanner/tree/master/html#basic-html-client-for-the-scanner\n\n#### Program options\n\n```bash\nxmrscanner: generic monero scanner:\n  -h [ --help ]                         Help\n  -n [ --nettype ] arg (=2)             network type: 0-MAINNET, 1-TESTNET, \n                                        2-STAGENET\n  -b [ --blockchain-path ] arg          Non-default path to lmdb folder \n                                        containing the blockchain. Default is \n                                        /home/mwo2/.bitmonero/stagenet/lmdb\n  -d [ --da-path ] arg (=./config/default_addresses.json)\n                                        Non-default path to default_addresses.j\n                                        son file\n  -c [ --config-path ] arg (=./config/config.json)\n                                        Non-default path to config.json file\n  -f [ --fiberthreads ] arg (=0)        Number of fiberpool thread workers. \n                                        Default is 0 - based on hardware\n  -p [ --port ] arg (=8848)             Service port\n```\n\n## How can you help\n\nConstructive criticism, code and website edits are always good. They can be made through github.\n'