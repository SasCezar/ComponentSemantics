b'# webminerpool \n\n**Complete sources** for a Monero (cryptonight and variants) webminer. **Hard fork ready**.\n\n\n###\n_The server_ is written in **C#**, **optionally calling C**-routines to check hashes calculated by the clients. It acts as a proxy server for common pools.\n\n\n_The client_ runs in the browser using javascript and webassembly. \n**websockets** are used for the connection between the client and the server, **webassembly** to perform hash calculations, **web workers** for threads.\n\nThanks to [nierdz](https://github.com/notgiven688/webminerpool/pull/62) there is a **docker** file available. See below.\n\n# Will RandomX (enabled in October) be supported?\n\nNo. Not at the moment. The problem here is that in principle one could compile code "on the fly" utilizing\nwasm but unfortunately some floating point operations used by RandomX are not supported by wasm. Workarounds\nwould make the code slow.\n\nThe strategy is to rely on coins which are more easily mined in the browser. Pools like [moneroocean.stream](https://moneroocean.stream) let you mine them in direct exchange for Monero. \n\nTurtle coin utilizing cn-lite (very well mineable using webasm) will fork to another POW, called "chukwa".\nIf there is support for this POW change on moneroocean (AND the algorithm turns out to be profitable) we will follow. The code is already in place (branch argon2) but needs some serious cleaning and optimizing.\n\n# Currently supported algorithms\n\n| #  |  xmrig short notation | webminerpool internal | description |\n| -- | --------------| --------------------------------- | ------------------------------------------------ |\n| 1  | cn            | algo="cn", variant=-1             | autodetect cryptonight variant (block.major - 6) |\n| 2  | cn/0          | algo="cn", variant=0              | original cryptonight                             |\n| 3  | cn/1          | algo="cn", variant=1              | also known as monero7 and cryptonight v7         |\n| 4  | cn/2          | algo="cn", variant=2 or 3         | cryptonight variant 2                            |\n| 5  | cn/r          | algo="cn", variant=4              | cryptonight variant 4 also known as cryptonightR |\n| 6  | cn-lite       | algo="cn-lite", variant=-1        | same as #1 with memory/2, iterations/2           |\n| 7  | cn-lite/0     | algo="cn-lite", variant=0         | same as #2 with memory/2, iterations/2           |\n| 8  | cn-lite/1     | algo="cn-lite", variant=1         | same as #3 with memory/2, iterations/2           |\n| 9  | cn-pico/trtl  | algo="cn-pico", variant=2 or 3    | same as #4 with memory/8, iterations/8           |\n| 10 | cn-half       | algo="cn-half", variant=2 or 3    | same as #4 with memory/1, iterations/2           |\n| 11 | cn/rwz       | algo="cn-rwz", variant=2 or 3    | same as #4 with memory/1, iterations*3/4           |\n\n # What is new?\n\n - **September 3, 2019** \n\t- Added cn/rwz (CryptoNight v8 ReverseWaltz). (**client-side** / **server-side**)\n\n - **March 1, 2019** \n\t- Added cryptonight v4. Hard fork ready! Added support for cn/half and cn-pico/trtl. Added support for auto-algo switching. (**client-side** / **server-side**)\n\n- **September 27, 2018** \n\t- Added cryptonight v2. Hard fork ready! (**client-side** / **server-side**)\n\n- **June 15, 2018** \n\t- Support for blocks with more than 2^8 transactions. (**client-side** / **server-side**)\n\n- **May 21, 2018** \n\t- Support for multiple open tabs. Only one tab is constantly mining if several tabs/browser windows are open. (**client-side**)\n\n- **May 6, 2018** \n\t- Check if webasm is available. Please update the script. (**client-side**)\n\n- **May 5, 2018** \n\t- Support for multiple websocket servers in the client script (load-distribution).\n\n- **April 26, 2018** \n\t- A further improvement to fully support the [extended stratum protocol](https://github.com/xmrig/xmrig-proxy/blob/dev/doc/STRATUM_EXT.md#mining-algorithm-negotiation).  (**server-side**)\n\t- A simple json config-file holding all available pools. (**server-side**)\n\n- **April 22, 2018** \n\t- All cryptonight and cryptonight-light based coins are supported in a single miner. [Stratum extension](https://github.com/xmrig/xmrig-proxy/blob/dev/doc/STRATUM_EXT.md#mining-algorithm-negotiation) were implemented: The server now takes pool suggestions (algorithm and variant) into account. Defaults can be specified for each pool - that makes it possible to mine coins like Stellite, Turtlecoin,.. (**client/server-side**)\n\t- Client reconnect time gets larger with failed attempts. (**client-side**)\n\n# Repository Content\n\n### SDK\n\nThe SDK directory contains all client side mining scripts which allow mining in the browser.\n\n#### Minimal working example\n\n```html\n<script src="webmr.js"></script>\n\n<script>\n\tserver = "ws://localhost:8181"\n\tstartMining("minexmr.com","49kkH7rdoKyFsb1kYPKjCYiR2xy1XdnJNAY1e7XerwQFb57XQaRP7Npfk5xm1MezGn2yRBz6FWtGCFVKnzNTwSGJ3ZrLtHU"); \n</script>\n```\nwebmr.js can be found under SDK/miner_compressed.\n\nThe startMining function can take additional arguments\n\n```javascript\nstartMining(pool, address, password, numThreads, userid);\n```\n\n- pool, this has to be a pool registered at the server.\n- address, a valid XMR address you want to mine to.\n- password, password for your pool. Often not needed.\n- numThreads, the number of threads the miner uses. Use "-1" for auto-config.\n- userid, allows you to identify the number of hashes calculated by a user. Can be any string with a length < 200 characters.\n\nTo **throttle** the miner just use the global variable "throttleMiner", e.g. \n\n```javascript\nstartMining(..);\nthrottleMiner = 20;\n```\n\nIf you set this value to 20, the cpu workload will be approx. 80% (for 1 thread / CPU). Setting this value to 100 will not fully disable the miner but still\ncalculate hashes with 10% CPU load. \n\nIf you do not want to show the user your address or even the password you have to create  a *loginid*. With the *loginid* you can start mining with\n\n```javascript\nstartMiningWithId(loginid)\n```\n\nor with optional input parameters:\n\n```javascript\nstartMiningWithId(loginid, numThreads, userid)\n```\n\nGet a *loginid* by opening *register.html* in SDK/other. You also find a script which enumerates all available pools and a script which shows you the amount of hashes calculated by a *userid*. These files are quite self-explanatory.\n\n#### What are all the *.js files?\n\nSDK/miner_compressed/webmr.js simply combines \n\n 1. SDK/miner_raw/miner.js\n 2. SDK/miner_raw/worker.js\n 3. SDK/miner_raw/cn.js\n\nWhere *miner.js* handles the server-client connection, *worker.js* are web workers calculating cryptonight hashes using *cn.js* - a emscripten generated wrapped webassembly file. The webassembly file can also be compiled by you, see section hash_cn below.\n\n### Server\n\nThe C# server. It acts as proxy between the clients (the browser miners) and the pool server. Whenever several clients use the same credentials (pool, address and password) they get "bundled" into a single pool connection, i.e. only a single connection is seen by the pool server. This measure helps to prevent overloading regular pool servers with many low-hash web miners.\n\nThe server uses asynchronous websockets provided by the\n[FLECK](https://github.com/statianzo/Fleck) library. Smaller fixes were applied to keep memory usage low. The server code should be able to handle several thousand connections with modest resource usage.\n\nThe following compilation instructions apply for linux systems. Windows users have to use Visual Studio to compile the sources.\n\n To compile under linux (with mono and msbuild) use\n ```bash\n./build\n```\nand follow the instructions. No additional libraries are needed.\n\n```bash\nmono server.exe\n```\n\nshould run the server.\n\n Optionally you can compile the C-library **libhash**.so found in *hash_cn*. Place this library in the same folder as *server.exe*. If this library is present the server will make use of it and check hashes which gets submitted by the clients. If clients submit bad hashes ("low diff shares"), they get disconnected. The server occasionally writes ip-addresses to *ip_list*. These addresses should get (temporarily) banned on your server for example by adding them to [*iptables*](http://ipset.netfilter.org/iptables.man.html). The file can be deleted after the ban. See *Firewall.cs* for rules when a client is seen as malicious - submitting wrong hashes is one possibility.\n\n Without a **SSL certificate** the server will open a regular websocket (ws://0.0.0.0:8181). To use websocket secure (ws**s**://0.0.0.0:8181) you should place *certificate.pfx* (a  pkcs12 file) into the server directory. The default password which the server uses to load the certificate is "miner". To create a pkcs12 file from regular certificates, e.g. from [*Let\'s Encrypt*](https://letsencrypt.org/), use the command\n\n```bash\nopenssl pkcs12 -export -out certificate.pfx -inkey privkey.pem -in cert.pem -certfile chain.pem\n```\n\nThe server should autodetect the certificate on startup and create a secure websocket.\n\n**Attention:** Most linux based systems have a (low) fixed limit of\navailable file-descriptors configured ("ulimit"). This can cause an\nunwanted upper limit for the users who can connect (typical 1000). You\nshould change this limit if you want to have more connections.\n\n### hash_cn\n\nThe cryptonight hashing functions in C-code. With simple Makefiles (use the "make" command to compile) for use with gcc and emcc - the [emscripten](https://github.com/kripken/emscripten) webassembly compiler. *libhash* should be compiled so that the server can check hashes calculated by the user.\n\n# Dockerization\n\nFind the original pull request with instructions by nierdz [here](https://github.com/notgiven688/webminerpool/pull/62).\n\nAdded Dockerfile and entrypoint.sh.\nInside entrypoint.sh, if `$DOMAIN` is provided, a certificate is registered and packed in pkcs12 format to be used with server.exe.\n\n```bash\ncd webminerpool\ndocker build -t webminerpool .\n```\n\nTo run it: \n\n```bash\ndocker run -d -p 80:80 -p 8181:8181 -e DOMAIN=mydomain.com webminerpool\n```\n\nThe 80:80 bind is used to obtain a certificate.\nThe 8181:8181 bind is used for server itself.\n\nIf you want to bind these ports to a specific IP, you can do this:\n\n```bash\ndocker run -d -p xx.xx.xx.xx:80:80 -p xx.xx.xx.xx:8181:8181 -e DOMAIN=mydomain.com webminerpool\n```\n\nYou can even use docker-compose, here is a sample snippet:\n\n```\nwebminer:\n  container_name: webminer\n  image: webminer:1.0\n  build:\n    context: ./webminerpool\n    args:\n      - DONATION_LEVEL=${WEBMINER_DONATION_LEVEL}\n  restart: always\n  ports:\n    - ${WEBMINER_IP}:80:80\n    - ${WEBMINER_IP}:8181:8181\n  environment:\n    DOMAIN: ${WEBMINER_DOMAIN}\n  networks:\n    - my-network\n```\n\nTo use this snippet, you need to define `$WEBMINER_DONATION_LEVEL`, `$WEBMINER_DOMAIN` and `$WEBMINER_IP` in a `.env` file.\n\n# Developer Donations\n\ncontact: webminerpool@protonmail.com\n\nBy default a server-side 3% dev-donation is configured. Leaving this fee at the current level is highly appreciated. If you want\nto turn it off or just find the content of this repository helpful consider a one time donation, the addresses are as follows:\n\n\n```\nBTC - 175jHD6ErDhZHoW4u54q5mr98L9KSgm56D\nXMR - 49kkH7rdoKyFsb1kYPKjCYiR2xy1XdnJNAY1e7XerwQFb57XQaRP7Npfk5xm1MezGn2yRBz6FWtGCFVKnzNTwSGJ3ZrLtHU\nAEON - WmtUFkPrboCKzL5iZhia4iNHKw9UmUXzGgbm5Uo3HPYwWcsY1JTyJ2n335gYiejNysLEs1G2JZxEm3uXUX93ArrV1yrXDyfPH\n```\n'