b'# &lt;auto-check&gt; element\n\nAn input element that validates its value against a server endpoint.\n\n## Installation\n\n```\n$ npm install --save @github/auto-check-element\n```\n\n## Usage\n\n```js\nimport \'@github/auto-check-element\'\n```\n\n```erb\n<auto-check src="/signup-check/username" csrf="<%= authenticity_token_for("/signup-check/username") %>">\n  <input>\n</auto-check>\n```\n\n## Attributes\n\n- `src` is the server endpoint that will receive POST requests. The posted form contains a `value` parameter containing the text input to validate. Responding with a 200 OK status indicates the provided value is valid. Any other error status response indicates the provided value is invalid.\n- `csrf` is the [CSRF][] token for the posted form. It\'s available in the request body as a `authenticity_token` form parameter.\n- `required` is a boolean attribute that requires the validation to succeed before the surrounding form may be submitted.\n\n## Events\n\n### Network request lifecycle events\n\nRequest lifecycle events are dispatched on the `<auto-check>` element. These events do not bubble.\n\n- `loadstart` - The server fetch has started.\n- `load` - The network request completed successfully.\n- `error` - The network request failed.\n- `loadend` - The network request has completed.\n\nNetwork events are useful for displaying progress states while the request is in-flight.\n\n```js\nconst check = document.querySelector(\'auto-check\')\nconst container = check.parentElement\ncheck.addEventListener(\'loadstart\', () => container.classList.add(\'is-loading\'))\ncheck.addEventListener(\'loadend\', () => container.classList.remove(\'is-loading\'))\ncheck.addEventListener(\'load\', () => container.classList.add(\'is-success\'))\ncheck.addEventListener(\'error\', () => container.classList.add(\'is-error\'))\n```\n\n### Auto-check events\n\n**`auto-check-start`** is dispatched on when there has been input in the element. In `event.detail` you can find:\n\n- `setValidity`: A function to provide a custom failure message on the input. By default it is \'Verifying\xe2\x80\xa6\'.\n\n\n```js\nconst input = check.querySelector(\'input\')\n\ninput.addEventListener(\'auto-check-start\', function(event) {\n  const {setValidity} = event.detail\n  setValidity(\'Loading validation\')\n})\n```\n\n**`auto-check-send`** is dispatched before the network request begins. In `event.detail` you can find:\n\n- `body`: The FormData request body to modify before the request is sent.\n\n\n```js\nconst input = check.querySelector(\'input\')\n\ninput.addEventListener(\'auto-check-send\', function(event) {\n  const {body} = event.detail\n  body.append(\'custom_form_data\', \'value\')\n})\n```\n\n**`auto-check-success`** is dispatched when the server responds with 200 OK. In `event.detail` you can find:\n\n- `response`: The successful server [Response][]. Its body can be used for displaying server-provided messages.\n\n```js\ninput.addEventListener(\'auto-check-success\', async function(event) {\n  const message = await event.detail.response.text()\n  console.log(\'Validation passed\', message)\n})\n```\n\n**`auto-check-error`** is dispatched when the server responds with a 400 or 500 range error status. In `event.detail` you can find:\n\n- `response`: The failed server [Response][]. Its body can be used for displaying server-provided messages.\n- `setValidity`: A function to provide a custom failure message on the input. By default it is \'Validation failed\'.\n\n```js\ninput.addEventListener(\'auto-check-error\', async function(event) {\n  const {response, setValidity} = event.detail\n\n  setValidity(\'Validation failed\')\n\n  const message = await response.text()\n  console.log(\'Validation failed\', message)\n})\n```\n\n**`auto-check-complete`** is dispatched after either the success or error events to indicate the end of the auto-check lifecycle.\n\n```js\ninput.addEventListener(\'auto-check-complete\', function(event) {\n  console.log(\'Validation complete\', event)\n})\n```\n\n[CSRF]: https://en.wikipedia.org/wiki/Cross-site_request_forgery\n[Response]: https://developer.mozilla.org/en-US/docs/Web/API/Response\n\n## Browser support\n\nBrowsers without native [custom element support][support] require a [polyfill][].\n\n- Chrome\n- Firefox\n- Safari\n- Microsoft Edge\n\n[support]: https://caniuse.com/#feat=custom-elementsv1\n[polyfill]: https://github.com/webcomponents/custom-elements\n\n## Development\n\n```\nnpm install\nnpm test\n```\n\n## License\n\nDistributed under the MIT license. See LICENSE for details.\n'