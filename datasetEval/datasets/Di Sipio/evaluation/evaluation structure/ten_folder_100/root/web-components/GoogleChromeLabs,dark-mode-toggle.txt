b'# `<dark-mode-toggle>` Element\n\n[![Published on webcomponents.org](https://img.shields.io/badge/webcomponents.org-published-blue.svg)](https://www.webcomponents.org/element/dark-mode-toggle)\n\nA custom element that allows you to easily put a *Dark Mode \xf0\x9f\x8c\x92* toggle\nor switch on your site, so you can initially adhere to your users\' preferences according to\n[`prefers-color-scheme`](https://drafts.csswg.org/mediaqueries-5/#prefers-color-scheme),\nbut also allow them to (optionally permanently) override their system setting for just your site.\n\n\xf0\x9f\x93\x9a Read all(!) about dark mode in the related article\n[Hello Darkness, My Old Friend](https://web.dev/prefers-color-scheme/).\n\n## Installation\n\nInstall from npm:\n\n```bash\nnpm install --save dark-mode-toggle\n```\n\nThen import in your app:\n\n```js\nimport * as DarkModeToggle from \'./node_modules/dark-mode-toggle\';\n```\n\nElse, use a `<script type="module">` tag (served from Pika\'s CDN):\n\n```html\n<script type="module" src="https://cdn.pika.dev/dark-mode-toggle"></script>\n```\n\nOr, alternatively, use a `<script type="module">` tag (served from unpkg\'s CDN):\n\n```html\n<script type="module" src="https://unpkg.com/dark-mode-toggle"></script>\n```\n\n## Usage\n\nThere are two ways how you can use `<dark-mode-toggle>`:\n\n### \xe2\x91\xa0 Using different stylesheets per color scheme that are conditionally loaded\n\nThe custom element assumes that you have organized your CSS in different files\nthat you load conditionally based on the **`media`** attribute in the stylesheet\'s\ncorresponding `link` element. This is a great performance pattern,\nas you don\'t force people to download CSS that they don\'t need\nbased on their current theme preference, yet non-matching stylesheets still get loaded,\nbut don\'t compete for bandwidth in the critical rendering path.\nYou can also have more than one file per theme.\nThe example below illustrates the principle.\n\n<!--\n```\n<custom-element-demo>\n  <template>\n    <link rel="stylesheet" href="https://googlechromelabs.github.io/dark-mode-toggle/demo/common.css">\n    <link rel="stylesheet" href="https://googlechromelabs.github.io/dark-mode-toggle/demo/light.css" media="(prefers-color-scheme: light), (prefers-color-scheme: no-preference)">\n    <link rel="stylesheet" href="https://googlechromelabs.github.io/dark-mode-toggle/demo/dark.css" media="(prefers-color-scheme: dark)">\n    <script type="module" src="https://googlechromelabs.github.io/dark-mode-toggle/src/dark-mode-toggle.mjs"></script>\n    <style>\n      #dark-mode-toggle-1 {\n        --dark-mode-toggle-dark-icon: url("https://googlechromelabs.github.io/dark-mode-toggle/demo/moon.png");\n        --dark-mode-toggle-light-icon: url("https://googlechromelabs.github.io/dark-mode-toggle/demo/sun.png");\n        --dark-mode-toggle-remember-icon-checked: url("https://googlechromelabs.github.io/dark-mode-toggle/demo/checked.svg");\n        --dark-mode-toggle-remember-icon-unchecked: url("https://googlechromelabs.github.io/dark-mode-toggle/demo/unchecked.svg");\n        --dark-mode-toggle-remember-font: 0.75rem \'Helvetica\';\n        --dark-mode-toggle-legend-font: bold 0.85rem \'Helvetica\';\n        --dark-mode-toggle-label-font: 0.85rem \'Helvetica\';\n        --dark-mode-toggle-color: var(--text-color);\n        --dark-mode-toggle-background-color: none;\n        --dark-mode-toggle-active-mode-background-color: var(--accent-color);\n        --dark-mode-toggle-remember-filter: invert(100%);\n      }\n    </style>\n    <next-code-block></next-code-block>\n  </template>\n</custom-element-demo>\n```\n-->\n```html\n<!-- In the `<head>`\n  <link rel="stylesheet" href="common.css">\n  <link rel="stylesheet" href="light.css" media="(prefers-color-scheme: light), (prefers-color-scheme: no-preference)">\n  <link rel="stylesheet" href="dark.css" media="(prefers-color-scheme: dark)">\n  <script type="module" src="https://googlechromelabs.github.io/dark-mode-toggle/src/dark-mode-toggle.mjs"></script>\n-->\n<main>\n  <h1>Hi there</h1>\n  <img src="https://googlechromelabs.github.io/dark-mode-toggle/demo/cat.jpg"\n       alt="Sitting cat in front of a tree" width="320" height="195"\n       intrinsicsize="640x390">\n  <p>Check out the dark mode toggle in the upper right corner!</p>\n</main>\n<aside>\n  <dark-mode-toggle\n      id="dark-mode-toggle-1"\n      legend="Theme Switcher"\n      appearance="switch"\n      dark="Dark"\n      light="Light"\n      remember="Remember this"\n  ></dark-mode-toggle>\n</aside>\n```\n\n### \xe2\x91\xa1 Using a CSS class that you toggle\n\nIf you prefer to not split your CSS in different files based on the color scheme,\nyou can instead work with a class that you toggle, for example `class="dark"`.\nYou can see this in action in [this demo](https://dark-mode-class-toggle.glitch.me/).\n\n```js\nimport * as DarkModeToggle from \'https://cdn.pika.dev/dark-mode-toggle\';\n\nconst toggle = document.querySelector(\'dark-mode-toggle\');\nconst body = document.body;\n\n// Set or remove the `dark` class the first time.\ntoggle.mode === \'dark\' ? body.classList.add(\'dark\') : body.classList.remove(\'dark\');\n\n// Listen for toggle changes (which includes `prefers-color-scheme` changes)\n// and toggle the `dark` class accordingly.\ntoggle.addEventListener(\'colorschemechange\', () => {\n  body.classList.toggle(\'dark\', toggle.mode === \'dark\');\n});\n```\n\n## Demo\n\nSee the custom element in action in the\n[interactive demo](https://googlechromelabs.github.io/dark-mode-toggle/demo/index.html).\nIt shows four different kinds of synchronized `<dark-mode-toggle>`s.\nIf you use Chrome on an Android device, pay attention to the address bar\'s\ntheme color, and also note how the favicon changes.\n\n<img src="https://user-images.githubusercontent.com/145676/59537453-ec5b0d80-8ef6-11e9-9efb-c44ed9db24b6.png" width="400" alt="Dark"> <img src="https://user-images.githubusercontent.com/145676/59537454-ec5b0d80-8ef6-11e9-8a89-5e3fbda9c15c.png" width="400" alt="Light">\n\n## Properties\n\nProperties can be set directly on the custom element at creation time, or\ndynamically via JavaScript.\n\n\xf0\x9f\x91\x89 Note that the dark and light **icons** are set via CSS variables, see\n[Style Customization](#style-customization) below.\n\n| Name | Required | Values | Default | Description |\n| ---- | -------- | ------ | ------- | ----------- |\n| `mode` | No | Any of `"dark"` or `"light"` | Defaults to whatever the user\'s preferred color scheme is according to `prefers-color-scheme`, or `"light"` if the user\'s browser doesn\'t support the media query. | If set overrides the user\'s preferred color scheme. |\n| `appearance` | No | Any of `"toggle"` or `"switch"` | Defaults to `"toggle"`. | The `"switch"` appearance conveys the idea of a theme switcher (light/dark), whereas `"toggle"` conveys the idea of a dark mode toggle (on/off). |\n| `permanent` | No | `true` if present | Defaults to not remember the last choice. | If present remembers the last selected mode (`"dark"` or `"light"`), which allows the user to permanently override their usual preferred color scheme. |\n| `legend` | No | Any string | Defaults to no legend. | Any string value that represents the legend for the toggle or switch. |\n| `light` | No | Any string | Defaults to no label. | Any string value that represents the label for the `"light"` mode. |\n| `dark` | No | Any string | Defaults to no label. | Any string value that represents the label for the `"dark"` mode. |\n| `remember` | No | Any string | Defaults to no label. | Any string value that represents the label for the "remember the last selected mode" functionality. |\n\n## Events\n\n- `colorschemechange`: Fired when the color scheme gets changed.\n- `permanentcolorscheme`: Fired when the color scheme should be permanently remembered or not.\n\n## Complete Example\n\nInteracting with the custom element:\n\n```js\n/* On the page */\nconst darkModeToggle = document.querySelector(\'dark-mode-toggle\');\n\n// Set the mode to dark\ndarkModeToggle.mode = \'dark\';\n// Set the mode to light\ndarkModeToggle.mode = \'light\';\n\n// Set the legend to "Dark Mode"\ndarkModeToggle.legend = \'Dark Mode\';\n// Set the light label to "off"\ndarkModeToggle.light = \'off\';\n// Set the dark label to "on"\ndarkModeToggle.dark = \'on\';\n\n// Set the appearance to resemble a switch (theme: light/dark)\ndarkModeToggle.appearance = \'switch\';\n// Set the appearance to resemble a toggle (dark mode: on/off)\ndarkModeToggle.appearance = \'toggle\';\n\n// Set a "remember the last selected mode" label\ndarkModeToggle.remember = \'Remember this\';\n\n// Remember the user\'s last color scheme choice\ndarkModeToggle.setAttribute(\'permanent\', \'\');\n// Forget the user\'s last color scheme choice\ndarkModeToggle.removeAttribute(\'permanent\');\n```\n\nReacting on color scheme changes:\n\n```js\n  /* On the page */\n  document.addEventListener(\'colorschemechange\', (e) => {\n    console.log(`Color scheme changed to ${e.detail.colorScheme}.`);\n  });\n```\n\nReacting on "remember the last selected mode" functionality changes:\n\n```js\n  /* On the page */\n  document.addEventListener(\'permanentcolorscheme\', (e) => {\n    console.log(`${e.detail.permanent ? \'R\' : \'Not r\'\n        }emembering the last selected mode.`);\n  });\n```\n\n## Style Customization\n\nSee the demo source code for some concrete examples.\n\n| CSS Variable Name | Default | Description |\n| ----------------- | ------- | ----------- |\n| `--dark-mode-toggle-light-icon` | No icon | The icon for the light state in `background-image:` notation. |\n| `--dark-mode-toggle-dark-icon` | No icon | The icon for the dark state in `background-image:` notation. |\n| `--dark-mode-toggle-icon-size` | 1rem | The icon size in CSS length data type notation. |\n| `--dark-mode-toggle-remember-icon-checked` | No icon | The icon for the checked "remember the last selected mode" functionality in `background-image:` notation. |\n| `--dark-mode-toggle-remember-icon-unchecked` | No icon | The icon for the unchecked "remember the last selected mode" functionality in `background-image:` notation. |\n| `--dark-mode-toggle-color` | User-Agent stylesheet text color | The main text color in `color:` notation. |\n| `--dark-mode-toggle-background-color` | User-Agent stylesheet background color | The main background color in `background-color:` notation. |\n| `--dark-mode-toggle-legend-font` | User-Agent `<legend>` font | The font of the legend in shorthand `font:` notation. |\n| `--dark-mode-toggle-label-font` | User-Agent `<label>` font | The font of the labels in shorthand `font:` notation. |\n| `--dark-mode-toggle-remember-font` | User-Agent `<label>` font | The font of the "remember the last selected mode" functionality label in shorthand `font:` notation. |\n| `--dark-mode-toggle-icon-filter` | No filter | The filter for the dark icon (so you can use all black or all white icons and just invert one of them) in `filter:` notation. |\n| `--dark-mode-toggle-remember-filter` | No filter | The filter for the "remember the last selected mode" functionality icon (so you can use all black or all white icons and just invert one of them) in `filter:` notation. |\n| `--dark-mode-toggle-active-mode-background-color` | No background color | The background color for the currently active mode in `background-color:` notation. |\n\n## Hacking on `<dark-mode-toggle>`\n\nThe core custom element code lives in\n[`src/dark-mode-toggle.mjs`](https://github.com/GoogleChromeLabs/dark-mode-toggle/blob/master/src/dark-mode-toggle.mjs).\nYou can start hacking and testing your changes by running `npm run start`\nand then navigating to <http://localhost:8080/demo/>.\nNo build step required \xf0\x9f\x8e\x89, this happens automatically upon `npm publish`ing.\nIf for whatever reason you want to build locally, run `npm run build`.\nYou can lint by running `npm run lint`.\n\nThe HTML and the CSS used by `<dark-mode-toggle>` is hard-coded as a template literal\nin the file `src/dark-mode-toggle.mjs`.\nFor optimal performance, the contents of this literal are hand-minified.\nIf you need to tweak the HTML or the CSS, find the unminified template literal contents\nin `src/template-contents.tpl` and copy them over to `src/dark-mode-toggle.mjs`.\nOnce your changes are done, commit them to both the `*.tpl` file (in unminified form)\nand the `*.mjs` file (in minified form).\n\n(This is actually just making a strong argument for\n[CSS Modules](https://github.com/w3c/webcomponents/issues/759) and\n[HTML Modules](https://github.com/w3c/webcomponents/issues/645)\nthat would allow for proper tools integration).\n\n## Proudly used on\xe2\x80\xa6\n\n- [**v8.dev**](https://v8.dev/): V8 is Google\xe2\x80\x99s open source\n  high-performance JavaScript and WebAssembly engine, written in C++.\n  \n  ![v8.dev in light mode](https://user-images.githubusercontent.com/145676/66128744-c913b580-e5ee-11e9-8c44-e2ca1d24dacb.png)\n  \n  ![v8.dev in dark mode](https://user-images.githubusercontent.com/145676/66128803-ea74a180-e5ee-11e9-8792-c411a54346fc.png)\n\n- Your site here\xe2\x80\xa6\n\n## Notes\n\nThis is not an official Google product.\n\n## License\n\nCopyright 2019 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the "License");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an "AS IS" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n'