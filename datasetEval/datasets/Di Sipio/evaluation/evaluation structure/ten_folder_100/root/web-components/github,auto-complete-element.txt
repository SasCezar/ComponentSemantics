b'# &lt;auto-complete&gt; element\n\nAuto-complete input values from server search results.\n\n## Installation\n\n```\n$ npm install --save @github/auto-complete-element\n```\n\n## Usage\n\n```js\nimport \'@github/auto-complete-element\'\n```\n\n```html\n<auto-complete src="/users/search" aria-owns="users-popup">\n  <input type="text">\n  <ul id="users-popup"></ul>\n</auto-complete>\n```\n\nThe server response should include the items that matched the search query.\n\n```html\n<li role="option">Hubot</li>\n<li role="option">Bender</li>\n<li role="option">BB-8</li>\n<li role="option" aria-disabled="true">R2-D2 (powered down)</li>\n```\n\nThe `data-autocomplete-value` attribute can be used to define the value for an\nitem whose display text needs to be different:\n\n```html\n<li role="option" data-autocomplete-value="bb8">BB-8 (astromech)</li>\n```\n\n## Attributes\n\n- `open` is true when the auto-complete result list is visible\n- `value` is the selected value from the list or the empty string when cleared\n\n## Events\n\n### Network request lifecycle events\n\nRequest lifecycle events are dispatched on the `<auto-complete>` element. These events do not bubble.\n\n- `loadstart` - The server fetch has started.\n- `load` - The network request completed successfully.\n- `error` - The network request failed.\n- `loadend` - The network request has completed.\n\nNetwork events are useful for displaying progress states while the request is in-flight.\n\n```js\nconst completer = document.querySelector(\'auto-complete\')\nconst container = completer.parentElement\ncompleter.addEventListener(\'loadstart\', () => container.classList.add(\'is-loading\'))\ncompleter.addEventListener(\'loadend\', () => container.classList.remove(\'is-loading\'))\ncompleter.addEventListener(\'load\', () => container.classList.add(\'is-success\'))\ncompleter.addEventListener(\'error\', () => container.classList.add(\'is-error\'))\n```\n\n### Auto-complete events\n\n**`auto-complete-change`** is dispatched after a value is selected. In `event.detail` you can find:\n\n- `relatedTarget`: The HTMLInputElement controlling the auto-complete result list.\n\n```js\ncompleter.addEventListener(\'auto-complete-change\', function(event) {\n  console.log(\'Auto-completed value chosen or cleared\', completer.value)\n  console.log(\'Related input element\', event.relatedTarget)\n})\n```\n\n## Browser support\n\nBrowsers without native [custom element support][support] require a [polyfill][].\n\n- Chrome\n- Firefox\n- Safari\n- Microsoft Edge\n\n[support]: https://caniuse.com/#feat=custom-elementsv1\n[polyfill]: https://github.com/webcomponents/custom-elements\n\n## Development\n\n```\nnpm install\nnpm test\n```\n\n## License\n\nDistributed under the MIT license. See LICENSE for details.\n'