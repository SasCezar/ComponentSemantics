b'[![Known Vulnerabilities](https://snyk.io/test/github/web-padawan/polymer3-webpack-starter/badge.svg)](https://snyk.io/test/github/web-padawan/polymer3-webpack-starter)\n[![code style: prettier](https://img.shields.io/badge/code_style-prettier-ff69b4.svg)](https://github.com/prettier/prettier)\n[![Lighthouse score: 91/100](https://lighthouse-badge.appspot.com/?score=91&compact&category=PWA)](https://github.com/ebidel/lighthouse-badge)\n\n# Polymer 3 Webpack Starter\n\nThis is an example project demonstrating how you can build a frontend part of the JavaScript\napplication using [Vaadin components](https://vaadin.com/components) and [Vaadin Router](https://github.com/vaadin/vaadin-router) library, and leverage the benefits of the modern tools.\n\n[Lumo version \xe2\x86\x97](https://polymer3-webpack-starter.herokuapp.com/)\n|\n[Material version \xe2\x86\x97](https://polymer3-material-starter.herokuapp.com/)\n\n## Features\n\n- Latest Polymer 3 and up-to-date [webcomponentsjs](https://github.com/webcomponents/webcomponentsjs) polyfill\n- UI built using latest [Vaadin components](https://vaadin.com/components) shipped as ES modules\n- Application with two different themes: [Lumo](https://github.com/vaadin/vaadin-lumo-styles) and [Material](https://github.com/vaadin/vaadin-material-styles)\n- [Vaadin Router](https://vaadin.com/router) configured for code splitting and lazy loading\n- [webpack 4](https://github.com/webpack/webpack) for easy development and production bundling\n- Up-to-date [Babel 7](https://github.com/babel/babel) verified to work nice with Custom Elements\n- Modern build for evergreen browsers using [BabelMultiTargetPlugin](https://github.com/DanielSchaffer/webpack-babel-multi-target-plugin)\n- Minification of JavaScript using [Terser](https://github.com/terser-js/terser) supporting ES2015+\n- Minification of HTML and CSS in [tagged template literals](https://github.com/cfware/babel-plugin-template-html-minifier)\n- Automatic service worker generation using [Workbox](https://github.com/GoogleChrome/workbox)\n- Automatic [bundle analysis](https://github.com/webpack-contrib/webpack-bundle-analyzer) and report generation\n- Web server using [express](https://github.com/expressjs/express) and [History API](https://github.com/bripkens/connect-history-api-fallback) middleware\n- Compressing static files for production using [gzip](https://github.com/webpack-contrib/compression-webpack-plugin) and [Brotli](https://github.com/mynameiswhm/brotli-webpack-plugin) algorithm\n- Serving compressed files using [express-static-gzip](https://github.com/tkoenig89/express-static-gzip) middleware\n\n## Install dependencies\n\n```sh\nnpm i\n```\n\n## Start the development server\n\nStart `webpack-dev-server` on localhost `http://127.0.0.1:3000`:\n\n```sh\nnpm run dev\n```\n\n## Lint JS\n\n```sh\nnpm run lint:js\n```\n\n## Lint CSS\n\n```sh\nnpm run lint:css\n```\n\n## Lint JS and CSS\n\n```sh\nnpm run lint\n```\n\n\n## Build\n\nRun production build:\n\n```sh\nnpm run build\n```\n\nServe the built output on localhost `http://127.0.0.1:8000`:\n\n```sh\nnpm start\n```\n\n## Visualize build output\n\nRun production build and start HTTP server to show bundle report:\n\n```sh\nnpm run build:analyze\n```\n\n## Material version\n\nCheck out [material](https://github.com/web-padawan/polymer3-webpack-starter/tree/material) branch for [Material version](https://polymer3-material-starter.herokuapp.com/) of the starter, and a [full diff](https://github.com/web-padawan/polymer3-webpack-starter/compare/material) of changes.\n\n## Known limitations\n\n- Using `import.meta` suggested by Polymer docs is not supported out of the box, see [webpack/webpack#6719](https://github.com/webpack/webpack/issues/6719).\n  Support can be added with [babel-plugin-bundled-import-meta](https://github.com/cfware/babel-plugin-bundled-import-meta) or\n  webpack loader [import-meta-url-loader](https://github.com/open-wc/open-wc/blob/master/packages/webpack/loaders/import-meta-url-loader.js)\n'