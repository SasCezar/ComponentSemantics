b'![Prettyhtml Banner](/logo.png)\n\n[![Build Status](https://dev.azure.com/prettyhtml/Prettyhtml/_apis/build/status/Prettyhtml.prettyhtml)](https://dev.azure.com/prettyhtml/Prettyhtml/_build/latest?definitionId=1)\n[![lerna](https://img.shields.io/badge/maintained%20with-lerna-cc00ff.svg)](https://lernajs.io/)\n[![npm version](https://badge.fury.io/js/%40starptech%2Fprettyhtml.svg)](https://badge.fury.io/js/%40starptech%2Fprettyhtml)\n\nOpinionated general formatter for your Angular, Vue, Svelte or pure HTML5 templates. Try it on the [playground](https://prettyhtml.netlify.com/).\n\n## Features\n\n- Indentation based primary on node-level + tag length, not content.\n- Can parse Angular, Vue or HTML5 templates.\n- Formats embedded content with [prettier](https://github.com/prettier/prettier) with respect to your local settings.\n- Doesn\'t change the behaviour of your attributes and tags.\n- Remove all superfluous white-space. There are two additional rules:\n  - Collapses multiple blank lines into a single blank line.\n  - Empty lines at the start and end of blocks are removed. (Files always end with a single newline, though.)\n- Enforce consistent output of your HTML.\n- Follows the same option [philosophy](https://prettier.io/docs/en/option-philosophy.html) as prettier.\n\n## Framework specific features\n\n| Feature                         | Framework |\n| ------------------------------- | --------- |\n| HTML5                           | all       |\n| Self-closing custom elements    | vue       |\n| Self-closing none void elements | vue       |\n| Case-sensitive attributes       | angular   |\n| Case-sensitive elements         | angular   |\n\n## Packages\n\n- [prettyhtml](/packages/prettyhtml) CLI and API.\n- [prettyhtml-formatter](/packages/prettyhtml-formatter) Formatter.\n- [prettyhtml-hast-to-html](/packages/prettyhtml-hast-to-html) Stringifier.\n- [prettyhtml-hastscript](/packages/prettyhtml-hastscript) Hyperscript compatible DSL for creating virtual HAST trees.\n- [prettyhtml-sort-attributes](/packages/prettyhtml-sort-attributes) Sort attributes alphabetically.\n- [prettyhtml-quick](/packages/prettyhtml-quick) Formats your changed files based on Git.\n- [webparser](/packages/webparser) Optimized HTML parser for formatters\n- [expression-parser](/packages/expression-parser) Framework agnostic template expression parser.\n- [rehype-webparser](/packages/rehype-webparser) Adapter between HTML parser and rehype.\n- [rehype-minify-whitespace](/packages/rehype-minify-whitespace) Collapse whitespace.\n- [hast-util-from-parse](/packages/hast-util-from-webparser) Transform [webparser](/packages/webparser) AST to HAST.\n\n## Ignore element\n\nAdding this flag before a tag will preserve from whitespace and/or attribute wrapping.\n\n1. Preserve from indentation, whitespace and attribute wrapping\n\n```html\n<!--prettyhtml-ignore-->\n<div></div>\n```\n\n2. Preserve only from whitespace processing. This excludes indentation.\n\n```html\n<!--prettyhtml-preserve-whitespace-->\n<h1> foo </h1>\n```\n\n3. Preserve only from attribute wrapping\n\n```html\n<!--prettyhtml-preserve-attribute-wrapping-->\n<h1 foo="bar" ...> foo </h1>\n```\n\n## Install\n\n```bash\n# regular\n$ npm install @starptech/prettyhtml --global\n\n# when using proxy like sinopia/verdaccio\n$ npm install @starptech/prettyhtml --global --registry=https://registry.npmjs.org/\n```\n\n## CLI\n\nThis will process recursively all HTML files in the current directory.\n\n```\n$ prettyhtml example.html "./**/*.html"\n```\n\n### Help\n\n```\n$ prettyhtml --help\n```\n\n## Pre-Commit hook integration\n\nWe provide a simple package called [prettyhtml-quick](/packages/prettyhtml-quick) which is able to format only changed files. This example use [husky](https://github.com/typicode/husky) to manage git hooks in the package.json\n\n```json\n{\n  "husky": {\n    "hooks": {\n      "precommit": "prettyhtml-quick --staged"\n    }\n  }\n}\n```\n\n## API\n\n## `prettyhtml(doc: string, options?): vFile`\n\nFormats a string and returns a [`vFile`](https://github.com/vfile/vfile). The method can throw e.g when a parsing error was produced. The error is from type [`vfile-message`](https://github.com/vfile/vfile-message).\n\n##### `options`\n\n###### `options.tabWidth`\n\nThe space width of your indentation level (default: 2)\n\n###### `options.useTabs`\n\nUse tabs instead spaces for indentation (default: false)\n\n###### `options.printWidth`\n\nUse different maximum line length (default: 80)\n\n###### `options.usePrettier`\n\nUse prettier for embedded content (default: true)\n\n###### `options.prettier`\n\nUse custom prettier settings for embedded content (default: local config)\n\n###### `options.singleQuote`\n\nUse single quote instead double quotes (default: false)\n\n###### `options.wrapAttributes`\n\nForce to wrap attributes (when it has multiple, default: false)\n\n###### `options.sortAttributes`\n\nSort attributes alphabetically (default: false)\n\n## Editor support\n\n- [VSCode](https://github.com/StarpTech/prettyhtml-vscode) extension (not published yet)\n- [Vetur](https://vuejs.github.io/vetur/formatting.html#formatters) Vue tooling for VS Code\n\n## Why\n\nPrettier has [landed](https://github.com/prettier/prettier/releases/tag/1.15.0) HTML support some days ago. This is awesome and will help many people to reduce the headache of correct formatting in teams. The reason why I still using prettyhtml is clear:\n\n- It is very easy to maintain because we have a [specification](https://github.com/syntax-tree/hast) and an [ecosystem](https://github.com/rehypejs/rehype) (and @vfile, @syntax-tree) of plugins.\n- It should be able to format any superset of HTML as long it is parseable with minor tweaks. We use a modified version of the Angular 6 template parser. There is no need to maintain multiple parser.\n- Prettyhtml doesn\'t try to understand all Javascript frameworks in depth even when it means that the user has to update some places manually.\n\n## Acknowledgement\n\nBig thanks to the creators of the excellent [rehype](https://github.com/rehypejs/rehype) and [unified](https://github.com/unifiedjs/unified) ecosystem.\n'