b'# Compo\n\n![Travis Status](https://travis-ci.org/Swiip/compo.svg?branch=master)\n\nCompo is a JavaScript Web UI tiny library powering Web Components with a functional API and a Virtual DOM rendering.\n\nYou have to **compo**\xc2\xb7se your **compo**\xc2\xb7nents by enriching them with each feature through a central composing function. Markup and Style are considered as a feature you can add to your components.\n\n## Installation\n\n```\nnpm install compo\n\nyarn add compo\n```\n\n## Example\n\n```javascript\nimport {\n  html,\n  css,\n  createStore,\n  component,\n  withProp,\n  withStore,\n  withStyle,\n  withMarkup,\n} from \'compo\';\n\ncreateStore((state, action) => {\n  switch (action.type) {\n    case \'ADD\': return state + 1;\n    case \'SUB\': return state - 1;\n    default: return state;\n  }\n}, 0);\n\ncomponent(\n  \'my-counter-label\',\n  withProp(\'value\'),\n  withStyle(({ value }) => css`\n    :host {\n      color: ${value < 1 ? \'red\' : \'black\'};\n    }\n  `,),\n);\n\ncomponent(\n  \'my-counter\',\n  withStore(({ getState, dispatch }) => ({\n    counter: getState(),\n    add: () => dispatch({ type: \'ADD\' }),\n    sub: () => dispatch({ type: \'SUB\' }),\n  })),\n  withMarkup(({ counter, add, sub }) => html`\n    <div>\n      <my-counter-label value=${counter}>${counter}</my-counter-label>\n      <button onclick=${add}>+</button>\n      <button onclick=${sub}>-</button>\n    </div>\n  `),\n);\n```\n\n## API\n\n### component( name:String, ...enhancers:Array&lt;(Component =&gt; Component)&gt; ):void\n\nDefine a [Custom Element](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements) with named `name` and enhanced by each enhancers.\n\n- `name` is directly passed to `customElement.define()` so you have to follow Web Components constraints such as a `-` in the name and only used once in the application.\n- `enhancers` are function taking in parameter a component class definition and returning a new one, most often my extending it. You can create your own but you can use all the `with` prefixed enhancers provided in the framework.\n\n```javascript\ncomponent(\n  \'my-component\',\n  withProp(\'my-prop\')\n);\n```\n\n### withMarkup( (props =&gt; Markup) ):(Component =&gt; Component)\n\nDefine an enhancer which will render the `Markup` returned in the component and will re-render on every change detection.\n\nYou\'ll obtain an `Markup` object by using the `html` tagged template described bellow.\n\n```javascript\ncomponent(\n  \'my-component\',\n  withMarkup(() => html`<div>Hello World</div>`)\n);\n```\n\n### withStyle( (props =&gt; Style) ):(Component =&gt; Component)\n\nDefine an enhancer which will add a `style` block with the `Style` returned and will update the style on every change detection.\n\nThe `Style` object can be either a standard `string` or an object using the `css` tagged template described bellow.\n\n```javascript\ncomponent(\n  \'my-component\',\n  withStyle(() => css`:host { color: red; }`)\n);\n```\n\n### withProp( name ):(Component =&gt; Component)\n\nDefine an enhancer which will instrument and trigger an update on modification on the component property `name`.\n\n```javascript\ncomponent(\n  \'my-component\',\n  withProp(\'my-prop\')\n);\n```\n\n### withHandler( name, (props =&gt; handler) ):(Component =&gt; Component)\n\nDefine an enhancer which will add a `name` property to the component with `handler` returned to be used in the markup.\n\n```javascript\ncomponent(\n  \'my-component\',\n  withHandler(() => event => console.log(\'my handler\', event))\n)\n```\n\n### withConnected( (props =&gt; void) ):(Component =&gt; Component)\n\nDefine an enhancer which will run the function in parameter when the component is connected corresponding to the Custom Element standard `connectedCallback` function.\n\n```javascript\ncomponent(\n  \'my-component\',\n  withConnected(() => console.log(\'component connected\'))\n)\n```\n\n### withStore( ((store, props) =&gt; object) ):(Component =&gt; Component)\n\nDefine an enhancer which will run the function in parameter at every store updates and assign all return object properties to the component object.\n\nThe store must be created beforehand by using `createStore` described bellow.\n\n```javascript\ncomponent(\n  "my-component",\n  withStore(({ getState, dispatch }) => {\n    myData: getState().my.data,\n    myAction: () => dispatch({ type: "MY_ACTION" })\n  })\n)\n```\n\n### html\n\nES2015 tagged template allowing to create DOM templates with rich interpolations.\n\n```javascript\nhtml`\n  <my-component my-prop=${prop}>\n    ${content}\n  </my-component>\n`\n```\n\nKnown limitation: you currently can\'t use serveral interpolations in a single DOM node or property.\n\n### css\n\nES2015 tagged template allowing to create CSS content.\n\nTo be perfectly honest it does absolutely nothing right now! Still reserving the API can be good and it triggers syntax highlighting in many editors.\n\n```javascript\ncss`\n  my-component {\n    color: red;\n  }\n`\n```\n\n### createStore( ((state, action) =&gt; state), initialState ): Store\nInitialize the internal store with the reducer in argument.\n\nIn contrary to Redux, you don\'t always need to get the `Store` returned. It\'s automatically passed to the `withStore` enhancer.\n\n```javascript\ncreateStore((state, action) => {\n  switch (action.type) {\n    case \'ADD\': return state + 1;\n    case \'SUB\': return state - 1;\n    default: return state;\n  }\n}, 0);\n```\n\n## Router API\n\n### withRouteEvent( ( url, props ) =&gt; void ):(Component =&gt; Component)\n\nAllow the component to have a callback on every url changes.\n\n```javascript\ncomponent(\n  \'my-component\',\n  withRouteEvent((url) => console.log(\'new url\', url))\n)\n```\n\n### withRouteAction( [ handlerName ] = \'go\' ):(Component =&gt; Component)\n\nAdd a `handlerName` handler in the component which allow to trigger a routing to the url in parameter.\n\n```javascript\ncomponent(\n  \'my-component\',\n  withRouteAction(\'navigate\'),\n  withHandler(({ navigate }) => (event) => navigate("/my-route")),\n)\n```\n\n### Component `compo-path`\n\nBuilt-in component allowing to insert a component depending on the current path.\n* `path`: the path which trigger the component.\n* `component`: the Web Component to use.\n\n```html\n<my-container>\n  <compo-path path=${"/my-route-1"} component=${"my-component-1"}></compo-path>\n  <compo-path path=${"/my-route-2"} component=${"my-component-2"}></compo-path>\n</my-container>\n```\n\n## Examples\n\n### Counter\n\nMost basic example exactly the same as above in this readme.\n\nTry it in CodeSanbox: https://codesandbox.io/s/yv5y14o6pj\n\n## 2048\n\nAdvanced example implementing the popular 2048 game.\n\nTry it in CodeSanbox: https://codesandbox.io/s/k55w33zvkv\n\n## 2048 compat\n\nSame as 2048 but with polyfill loaded to be tested on other browsers than Chrome\n\n*Strangely doesn\'t work yet on CodeSanbox*\n\n## Routing\n\nBasic routing example using the integrated router\n\n## Inspiration\n\n### Other frameworks\n\n- [React](https://reactjs.org/) for the v-dom, applying changed by a diff mechanism.\n- [recompose](https://github.com/acdlite/recompose) for the composition API\n- [styled-components](https://www.styled-components.com/) for the CSS as ad integrant part as a component definition\n- [Redux](https://redux.js.org/) for the state management\n- [hyperapp](https://github.com/hyperapp/hyperapp) for proving that you can build a complete framework with only a few bytes\n\n### Blogs\n\n- https://medium.com/@deathmood/how-to-write-your-own-virtual-dom-ee74acc13060\n- http://2ality.com/2014/07/jsx-template-strings.html\n- https://gist.github.com/lygaret/a68220defa69174bdec5\n\n## Motivations\n\nIt started with the exploration of the Web Components and Shadow DOM APIs and followed by the willing to use v-dom concepts in this contexts.\n\nBased upon that foundations, the objective was to have a functional API like _recompose_ to power Web Components.\n\nMinimalism and staying close and bounded to the standards.\n\n## Compatibility\n\nCompo is not transpiled to old JavaScript and _really_ based upon Web Components so it only works out of the box on recent Chrome. It\'s also working quite well on Firefox 63.0 without any flag.\n\nIt\'s planned to have a compatibility build using polyfills.\n\n## Licence\n\nCompo is MIT licensed. See [LICENSE](./LICENSE.md).\n'