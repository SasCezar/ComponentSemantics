b'ajax-form\n=========\n\nHTML forms on performance-enhancing drugs.\n\n[![Build Status](https://travis-ci.org/rnicholus/ajax-form.svg?branch=master)](https://travis-ci.org/rnicholus/ajax-form)\n[![npm](https://img.shields.io/npm/v/ajax-form.svg)](https://www.npmjs.com/package/ajax-form)\n[![license](https://img.shields.io/badge/license-MIT-brightgreen.svg)](LICENSE)\n\n**Note: Ajax-form is not tied to Polymer. In fact, it has no dependencies at all, but should work just fine with Polymer or any other custom elements library. If you prefer to use a simple custom elements polyfill, ajax-form is also your best choice.**\n\n## What\'s wrong with a traditional `<form>`?\n1. Form submission changes/reloads the page, and it\'s not trivial to properly prevent this.\n2. You can\'t send custom headers with a submitted form.\n3. You can\'t (easily) parse the server response after a form is submitted.\n4. Programmatically tracking invalid forms/fields is frustrating.\n5. You can\'t send form data as JSON.\n6. You have no opportunity to programmatically augment user-entered data before it is sent to the server.\n7. Custom form elements (such as those created using the web components spec) cannot be submitted using a traditional unadulterated `<form>`.\n\nThe `ajax-form` custom element augments a traditional `<form>` to provide additional features and solve the problems listed above. See the [API documentation page](http://ajax-form.raynicholus.com) for complete documentation and demos.\n\n## Installation\n\n`npm install ajax-form`\n\n## Use\n\nUse ajax-form just like you would use a traditional form, with the exception of the required `is="ajax-form"` attribute that you _must_ include in your `<form>` element markup. Since ajax-form is a web component, you may need to include a web component polyfill, such as [webcomponents.js](http://webcomponents.org/) to ensure browsers\nthat do not implement the WC spec are able to make use of ajax-form. Ajax-form has *no* hard\ndependencies.\n\nA very simple use of `ajax-form` looks just like a normal `<form>`, with the addition of an `is` attribute:\n\n```html\n<form is="ajax-form" action="my/form/handler" method="post">\n    <label>Enter your name: <input type="text" name="full_name"></label>\n    ...\n</form>\n```\n\nSee the [API documentation page](http://ajax-form.raynicholus.com) for complete documentation and demos.\n\n\n## Integration\nAre you developing a form field web component?  Read the instructions below to ensure\nyour field integrates properly with ajax-form.\n\n### Submitting\nYour component will integrate nicely into ajax form provided your custom element\nexposes a `value` property that contains the current value of the field.  If this\nis not true, then your custom field must ensure a native HTML form field is part of\nthe light DOM.  In either case, the element with the `value` property must also\ncontain a `name` attribute.  Your user/integrator will need to include an\nappropriate value for this field.\n\n### Validation\nIf your custom field exposes a native HTML form field in the light DOM, then there\nis nothing more to do - ajax-form will respect any validation that your user/integrator\nadds to the field.  The constrain attribute(s) MUST be placed on the native HTML form\nfield.\n\nIf your custom field does NOT expose a native HTML form field in the light DOM by\ndefault, and you want ajax-form to respect validation constraints, then you will\nneed to include a little code to account for this.  Here are the steps to follow:\n\n1. Add an opaque, 0x0 `<input type="text">` field to the light DOM, just before your field.\n2. Add a `customElementRef` property to the input, with a value equal to your field.\n3. Ensure the validity of the input always matches the validity of your field.  You can\ndo this via the `setCustomValidity` method present on an `HTMLInputElement`.\n\nSee the [`setValidationTarget` method in the `<file-input>` custom element source code](https://github.com/rnicholus/file-input/blob/1.1.4/file-input.js#L104)\nfor an example.\n\n\n## Testing\n```\nnpm install\nnpm install -g grunt-cli\ngrunt\n```\n\n- Running `grunt` without any parameters will test against a few locally installed browsers (see the codebase for details).\n\n- Running `grunt shell:wctSauce` will run tests against a number of browsers in SauceLabs.  Ensure you have your SauceLabs username and key attached to the proper environment variables first.\n'