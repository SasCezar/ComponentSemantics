b'# panel\n\n[![Build Status](https://travis-ci.org/mixpanel/panel.svg?branch=master)](https://travis-ci.org/mixpanel/panel)\n[![NPM version](https://img.shields.io/npm/v/panel.svg)](https://www.npmjs.com/package/panel)\n\n[![Build Status](https://saucelabs.com/browser-matrix/panel.svg)](https://saucelabs.com/open_sauce/user/panel)\n\nApps made of composable, manageable Web Components. UIs with supercharged web standards!\n\n```javascript\nimport { Component } from \'panel\';\nimport counterTemplate from \'./counter.jade\';\n\ncustomElements.define(\'counter-app\', class extends Component {\n  get config() {\n    return {\n      defaultState: {count: 1},\n\n      helpers: {\n        decr: () => this.changeCounter(-1),\n        incr: () => this.changeCounter(1),\n      },\n\n      template: counterTemplate,\n    };\n  }\n\n  changeCounter(offset) {\n    this.update({count: this.state.count + offset});\n  }\n});\n\ndocument.body.appendChild(document.createElement(\'counter-app\'));\n```\n```jade\n.counter\n  .val Counter: #{count}\n  .controls\n    button.decr(on={click: $helpers.decr}) -\n    button.incr(on={click: $helpers.incr}) +\n```\n\n## Motivation and technologies\n\nPanel makes [Web Components](http://webcomponents.org/) suitable for constructing full web UIs, not just low-level building blocks. It does so by providing an easy-to-use state management and rendering layer built on Virtual DOM (the basis of the core rendering technology of [React](https://facebook.github.io/react/)). Through use of the [Snabbdom](https://github.com/snabbdom/snabbdom) Virtual DOM library and first-class support for multiple templating formats, Panel offers simple yet powerful APIs for rendering, animation, styling, and DOM lifecycle.\n\nEach Panel application is a Web Component, composed of DOM elements and potentially arbitrarily nested child components, each of which can technically be an app in its own right. Parent and child components can share `state`, in the form of Plain Old JavaScript Objects which are passed to templates for rendering. When `update()` is called on a component with state changes, the DOM gets updated according to the diff. Templates can be in any format that produces Snabbdom-compatible [hyperscript](https://github.com/snabbdom/snabbdom#snabbdomh), including raw Hyperscript code or Jade or JSX.\n\nThe architecture of Panel draws upon aspects of and technologies from [Mercury](https://github.com/Raynos/mercury), [Polymer](https://www.polymer-project.org), [React](https://facebook.github.io/react/), [Redux](http://redux.js.org/), [Cycle](http://cycle.js.org/), and [Backbone](http://backbonejs.org/), with an emphasis on simple pragmatism over functional purity thanks to Henrik Joreteg\'s ["Feather" app demo](https://github.com/HenrikJoreteg/feather-app). Panel eschews opaque abstractions and data flow management layers to provide a straightforward state-based rendering cycle. There are no built-in data flow abstractions like Mercury\'s channels, Flux/React\'s stores, Cycle\'s observables, Backbone\'s event soup and DOM dependencies. More complex state management systems such as Redux and RxJS can plug in to Panel seamlessly if desired (hint: in most apps, you just don\'t need it). A built-in router (based on the [Backbone Router](http://backbonejs.org/#Router)) can sync URL updates and HTML5 History with a Panel app\'s `state` for automatic updating and view-swapping.\n\nSince early 2016, Panel and Web Components have powered Mixpanel\'s most advanced new UIs in production, including [Insights](https://mixpanel.com/report/insights), [Dashboards](https://mixpanel.com/report/dashboard), [Signal](https://mixpanel.com/report/signal), and [JQL Console](https://mixpanel.com/report/jql-console).\n\n## Installation\n\n`npm install --save panel`\n\nIf your target environment does not implement HTML custom elements natively, you must supply a polyfill, such as [webcomponents.js](https://github.com/webcomponents/webcomponentsjs).\n\n## Documentation and examples\n\nAPI docs can be found at [http://mixpanel.github.io/panel/](http://mixpanel.github.io/panel/).\n\nFor some sample apps with explanations see [examples/](https://github.com/mixpanel/panel/tree/master/examples). These include demonstrations of using Panel with JSX and Redux.\n\nA brief tutorial is available in the [examples/tutorial](https://github.com/mixpanel/panel/tree/master/examples/tutorial) directory. The sample app accompanying the tutorial features routing, Jade templating, and infrastructure for practical usage such as Webpack/Babel configuration and inclusion of a Web Components polyfill.\n\nA Panel implementation of the [TodoMVC](http://todomvc.com/) app spec is available at [https://github.com/tdumitrescu/todomvc-panel](https://github.com/tdumitrescu/todomvc-panel).\n\n## Running tests\n\nBrowser tests run with Selenium through [web-component-tester](https://github.com/Polymer/tools/tree/master/packages/web-component-tester). Server-side rendering tests use `mocha` and `chai` directly.\n\n#### Run with locally installed browsers\n`npm test`\n\n#### Tunnel to [Sauce Labs](https://saucelabs.com/)\n`npm run build-test && npm run test-browser-sauce`\n\nSet credentials with environment variables `SAUCE_USERNAME` and `SAUCE_ACCESS_KEY`. The default browser/OS matrix is defined in `wct.conf.json`.\n\n## License\n\nMIT\n'