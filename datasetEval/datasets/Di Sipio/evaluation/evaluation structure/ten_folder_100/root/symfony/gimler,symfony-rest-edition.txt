b'Symfony REST Edition\n========================\n\n[![Build Status](https://travis-ci.org/gimler/symfony-rest-edition.png?branch=2.3)](https://travis-ci.org/gimler/symfony-rest-edition) [![Total Downloads](https://poser.pugx.org/gimler/symfony-rest-edition/downloads.png)](https://packagist.org/packages/gimler/symfony-rest-edition)\n\nWelcome to the Symfony REST Edition - a fully-functional Symfony2\napplication that you can use as the skeleton for your new applications.\n\nThis document contains information on how to download, install, and start\nusing Symfony. For a more detailed explanation, see the [Installation][1]\nchapter of the Symfony Documentation.\n\n1) Installing the REST Edition\n----------------------------------\n\nWhen it comes to installing the Symfony REST Edition, you have the\nfollowing options.\n\n### Use Composer (*recommended*)\n\nAs Symfony uses [Composer][2] to manage its dependencies, the recommended way\nto create a new project is to use it.\n\nIf you don\'t have Composer yet, download it following the instructions on\nhttp://getcomposer.org/ or just run the following command:\n\n    curl -s http://getcomposer.org/installer | php\n\nThen, use the `create-project` command to generate a new Symfony application:\n\n    php composer.phar create-project gimler/symfony-rest-edition --stability=dev path/to/install\n\nComposer will install Symfony and all its dependencies under the\n`path/to/install` directory.\n\n### Download an Archive File\n\nTo quickly test Symfony, you can also download an [archive][3] of the Standard\nEdition and unpack it somewhere under your web server root directory.\n\nIf you downloaded an archive "without vendors", you also need to install all\nthe necessary dependencies. Download composer (see above) and run the\nfollowing command:\n\n    php composer.phar install\n\n2) Checking your System Configuration\n-------------------------------------\n\nBefore starting coding, make sure that your local system is properly\nconfigured for Symfony.\n\nExecute the `check.php` script from the command line:\n\n    php app/check.php\n\nAccess the `config.php` script from a browser:\n\n    http://localhost/path/to/symfony/app/web/config.php\n\nIf you get any warnings or recommendations, fix them before moving on.\n\n3) Browsing the Demo Application\n--------------------------------\n\nCongratulations! You\'re now ready to use Symfony.\n\nFrom the `config.php` page, click the "Bypass configuration and go to the\nWelcome page" link to load up your first Symfony page.\n\nYou can also use a web-based configurator by clicking on the "Configure your\nSymfony Application online" link of the `config.php` page.\n\nTo see a real-live Symfony page in action, access the following page:\n\n    web/app_dev.php/notes\n\nUsing the console after installing httpie.org or some other http client\nyou can run some commands to test the API as well:\n\n    http "http://symfony-rest-edition.lo/app_dev.php/notes" --json -a restapi:secretpw\n    http POST "http://symfony-rest-edition.lo/app_dev.php/notes" --json -a restapi:secretpw < note.json\n    http "http://symfony-rest-edition.lo/app_dev.php/notes/0" --json -a restapi:secretpw\n    http "http://symfony-rest-edition.lo/app_dev.php/notes/0" "Accept:application/json;version=1.0" -a restapi:secretpw\n    http DELETE "http://symfony-rest-edition.lo/app_dev.php/notes/0" --json -a restapi:secretpw\n    http PUT "http://symfony-rest-edition.lo/app_dev.php/notes/0" --json -a restapi:secretpw < note.json\n    http PUT "http://symfony-rest-edition.lo/app_dev.php/notes/1" --json -a restapi:secretpw < note.json\n    http PUT "http://symfony-rest-edition.lo/app_dev.php/notes/2" --json -a restapi:secretpw < note.json\n    http PUT "http://symfony-rest-edition.lo/app_dev.php/notes/3" --json -a restapi:secretpw < note.json\n    http "http://symfony-rest-edition.lo/app_dev.php/notes?offset=1&limit=1" --json -a restapi:secretpw\n\nTo run the tests install PHPUnit 3.7+ and call:\n\n    phpunit -c app/\n\n4) Getting started with Symfony\n-------------------------------\n\nThis distribution is meant to be the starting point for your Symfony\napplications, but it also contains some sample code that you can learn from\nand play with.\n\nA great way to start learning Symfony is via the [Quick Tour][4], which will\ntake you through all the basic features of Symfony2.\n\nOnce you\'re feeling good, you can move onto reading the official\n[Symfony2 book][5].\n\nA default bundle, `AppBundle`, shows you Symfony2 in action. After\nplaying with it, you can remove it by following these steps:\n\n  * delete the `src/AppBundle` directory;\n\n  * remove the routing entries referencing AcmeBundle in\n    `app/config/routing_dev.yml`;\n\n  * remove the AcmeBundle from the registered bundles in `app/AppKernel.php`;\n\n  * remove the `web/bundles/acmedemo` directory;\n\n  * remove the `security.providers`, `security.firewalls.login` and\n    `security.firewalls.secured_area` entries in the `security.yml` file or\n    tweak the security configuration to fit your needs.\n\nWhat\'s inside?\n---------------\n\nThe Symfony REST Edition is configured with the following defaults:\n\n  * Twig is the only configured template engine;\n\n  * Translations are activated\n\n  * Doctrine ORM/DBAL is configured;\n\n  * Swiftmailer is configured;\n\n  * Annotations for everything are enabled.\n\nIt comes pre-configured with the following bundles:\n\n  * **FrameworkBundle** - The core Symfony framework bundle\n\n  * [**SensioFrameworkExtraBundle**][6] - Adds several enhancements, including\n    template and routing annotation capability\n\n  * [**DoctrineBundle**][7] - Adds support for the Doctrine ORM\n\n  * [**TwigBundle**][8] - Adds support for the Twig templating engine\n\n  * [**SecurityBundle**][9] - Adds security by integrating Symfony\'s security\n    component\n\n  * [**SwiftmailerBundle**][10] - Adds support for Swiftmailer, a library for\n    sending emails\n\n  * [**MonologBundle**][11] - Adds support for Monolog, a logging library\n\n  * [**AsseticBundle**][12] - Adds support for Assetic, an asset processing\n    library\n\n  * **WebProfilerBundle** (in dev/test env) - Adds profiling functionality and\n    the web debug toolbar\n\n  * **SensioDistributionBundle** (in dev/test env) - Adds functionality for\n    configuring and working with Symfony distributions\n\n  * [**SensioGeneratorBundle**][15] (in dev/test env) - Adds code generation\n    capabilities\n\n  * **AcmeDemoBundle** (in dev/test env) - A demo bundle with some example\n    code\n\n  * [**FOSRestBundle**][16] - Adds rest functionality\n\n  * [**FOSHttpCacheBundle**][21] - This bundle offers tools to improve HTTP caching with Symfony2\n\n  * [**NelmioApiDocBundle**][17] - Add API documentation features\n\n  * [**BazingaHateoasBundle**][18] - Adds HATEOAS support\n\n  * [**HautelookTemplatedUriBundle**][19] - Adds Templated URIs (RFC 6570) support\n\n  * [**BazingaRestExtraBundle**][20]\n\nEnjoy!\n\n[1]:  http://symfony.com/doc/2.7/book/installation.html\n[2]:  http://getcomposer.org/\n[3]:  https://github.com/gimler/symfony-rest-edition/archive/master.zip\n[4]:  http://symfony.com/doc/2.7/quick_tour/the_big_picture.html\n[5]:  http://symfony.com/doc/2.7/index.html\n[6]:  http://symfony.com/doc/2.7/bundles/SensioFrameworkExtraBundle/index.html\n[7]:  http://symfony.com/doc/2.7/book/doctrine.html\n[8]:  http://symfony.com/doc/2.7/book/templating.html\n[9]:  http://symfony.com/doc/2.7/book/security.html\n[10]: http://symfony.com/doc/2.7/cookbook/email.html\n[11]: http://symfony.com/doc/2.7/cookbook/logging/monolog.html\n[12]: http://symfony.com/doc/2.7/cookbook/assetic/asset_management.html\n[15]: http://symfony.com/doc/2.7/bundles/SensioGeneratorBundle/index.html\n[16]: https://github.com/FriendsOfSymfony/FOSRestBundle\n[17]: https://github.com/nelmio/NelmioApiDocBundle\n[18]: https://github.com/willdurand/BazingaHateoasBundle\n[19]: https://github.com/hautelook/TemplatedUriBundle\n[20]: https://github.com/willdurand/BazingaRestExtraBundle\n[21]: https://github.com/FriendsOfSymfony/FOSHttpCacheBundle/\n'