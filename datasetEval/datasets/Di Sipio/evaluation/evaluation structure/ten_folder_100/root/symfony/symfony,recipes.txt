b'Symfony Recipes\n===============\n\nSymfony recipes allow the automation of Composer packages configuration via the\n`Symfony Flex`_ Composer plugin.\n\nThis repository contains "official" recipes for Composer packages endorsed by\nthe Symfony Core Team. For contributed recipes, see the `contrib repository`_.\n\nCreating Recipes\n----------------\n\nSymfony recipes consist of a ``manifest.json`` config file and, optionally, any\nnumber of files and directories. Recipes must be stored on their own\nrepositories, outside of your Composer package repository. They must follow the\n``vendor/package/version/`` directory structure, where ``version`` is the\nminimum version supported by the recipe.\n\nThe following example shows the real directory structure of some Symfony recipes::\n\n    symfony/\n        console/\n            3.3/\n                bin/\n                manifest.json\n        framework-bundle/\n            3.3/\n                config/\n                public/\n                src/\n                manifest.json\n        requirements-checker/\n            1.0/\n                manifest.json\n\nAll the ``manifest.json`` file contents are optional and they are divided into\noptions and configurators.\n\n.. note::\n\n    Don\'t create a recipe for Symfony bundles if the only configuration in the\n    manifest is the registration of the bundle for all environments, as this is\n    done automatically.\n\n.. note::\n\n    When creating a recipe, don\'t create bundle config files under\n    ``config/packages/`` when no options are set.\n\nOptions\n-------\n\n``aliases`` option\n~~~~~~~~~~~~~~~~~~\n\nThis option (not available in the ``recipes-contrib`` repository) defines one or\nmore alternative names that can be used to install the dependency.\nIts value is an array of strings. For example, if a dependency\nis published as ``acme-inc/acme-log-monolog-handler``, it can define one or\nmore aliases to make it easier to install:\n\n.. code-block:: json\n\n    {\n        "aliases": ["acme-log", "acmelog"]\n    }\n\nDevelopers can now install this dependency with ``composer require acme-log``.\n\nConfigurators\n-------------\n\nRecipes define the different tasks executed when installing a dependency, such\nas running commands, copying files or adding new environment variables. Recipes\nonly contain the tasks needed to install and configure the dependency because\nSymfony is smart enough to reverse those tasks when uninstalling and\nunconfiguring the dependencies.\n\nThere are several types of tasks, which are called **configurators**:\n``copy-from-recipe``, ``copy-from-package``, ``bundles``, ``env``,\n``composer-scripts``, ``gitignore``, and ``post-install-output``.\n\n``bundles`` Configurator\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nEnables one or more bundles in the Symfony application by appending them to the\n``bundles.php`` file. Its value is an associative array where the key is the\nbundle class name and the value is an array of environments where it must be\nenabled. The supported environments are ``dev``, ``prod``, ``test`` and ``all``\n(which enables the bundle in all environments):\n\n.. code-block:: json\n\n    {\n        "bundles": {\n            "Symfony\\\\Bundle\\\\DebugBundle\\\\DebugBundle": ["dev", "test"],\n            "Symfony\\\\Bundle\\\\MonologBundle\\\\MonologBundle": ["all"]\n        }\n    }\n\nThe previous recipe is transformed into the following PHP code:\n\n.. code-block:: php\n\n    // config/bundles.php\n    return [\n        \'Symfony\\Bundle\\DebugBundle\\DebugBundle\' => [\'dev\' => true, \'test\' => true],\n        \'Symfony\\Bundle\\MonologBundle\\MonologBundle\' => [\'all\' => true],\n    ];\n\n``container`` Configurator\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nAdds new container parameters in the ``services.yaml`` file by adding your\nparameters in the ``container`` option.\n\nThis example creates a new ``locale`` container parameter with a default value\nin your container:\n\n.. code-block:: json\n\n    {\n        "container": {\n            "locale": "en"\n        }\n    }\n\n``copy-from-package`` Configurator\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nCopies files or directories from the Composer package contents to the Symfony\napplication. It\'s defined as an associative array where the key is the original\nfile/directory and the value is the target file/directory.\n\nThis example copies the ``bin/check.php`` script of the package into the binary\ndirectory of the application:\n\n.. code-block:: json\n\n    {\n        "copy-from-package": {\n            "bin/check.php": "%BIN_DIR%/check.php"\n        }\n    }\n\nThe ``%BIN_DIR%`` string is a placeholder that, when installing the recipe, is\nturned into the absolute path of the binaries directory of the Symfony app.\nThese are the available placeholders: ``%BIN_DIR%``, ``%CONF_DIR%``,\n``%CONFIG_DIR%``, ``%SRC_DIR%`` ``%VAR_DIR%`` and ``%PUBLIC_DIR%``.\n\nRecipes must use these placeholders instead of hardcoding the paths to be truly\nreusable. The placeholder values can be overridden in the ``extra`` section of\nyour ``composer.json`` file (where you can define your own placeholders too):\n\n.. code-block:: json\n\n    // composer.json\n    {\n        "...": "...",\n\n        "extra": {\n            // overriding the value of the default placeholders\n            "bin-dir": "bin/",\n            "config-dir": "config/",\n            "src-dir": "src/",\n            "var-dir": "var/",\n            "public-dir": "public/",\n\n            // defining a custom placeholder (can be accessed using\n            // %MY_SPECIAL_DIR% in the recipe)\n            "my-special-dir": "..."\n        }\n    }\n\n``copy-from-recipe`` Configurator\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIt\'s identical to ``copy-from-package`` but contents are copied from the recipe\nitself instead of from the Composer package contents. It\'s useful to copy the\ninitial configuration of the dependency and even a simple initial structure of\nfiles and directories:\n\n.. code-block:: json\n\n    "copy-from-recipe": {\n        "config/": "%CONFIG_DIR%/",\n        "src/": "%SRC_DIR%/"\n    }\n\n``env`` Configurator\n~~~~~~~~~~~~~~~~~~~~\n\nAdds the given list of environment variables to the ``.env`` and ``.env.dist``\nfiles stored in the root of the Symfony project:\n\n.. code-block:: json\n\n    {\n        "env": {\n            "APP_ENV": "dev"\n        }\n    }\n\nThis recipe is converted into the following content appended to the ``.env``\nand ``.env.dist`` files:\n\n.. code-block:: bash\n\n    ###> your-recipe-name-here ###\n    APP_ENV=dev\n    ###< your-recipe-name-here ###\n\nThe ``###> your-recipe-name-here ###`` section separators are needed by Symfony\nto detect the contents added by this dependency in case you uninstall it later.\nDon\'t remove or modify these separators.\n\n.. tip::\n\n    Use ``%generate(secret)%`` as the value of any environment variable to\n    replace it with a cryptographically secure random value of 16 bytes.\n\n``composer-scripts`` Configurator\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nRegisters scripts in the ``auto-scripts`` section of the ``composer.json`` file\nto execute them automatically when running ``composer install`` and ``composer\nupdate``. The value is an associative array where the key is the script to\nexecute (including all its arguments and options) and the value is the type of\nscript (``php-script`` for PHP scripts, ``script`` for any shell script and\n``symfony-cmd`` for Symfony commands):\n\n.. code-block:: json\n\n    {\n        "composer-scripts": {\n            "vendor/bin/security-checker security:check": "php-script",\n            "make cache-warmup": "script",\n            "assets:install --symlink --relative %PUBLIC_DIR%": "symfony-cmd"\n        }\n    }\n\n``gitignore`` Configurator\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nAdds patterns to the ``.gitignore`` file of the Symfony project. Define those\npatterns as a simple array of strings (a ``PHP_EOL`` character is added after\neach line):\n\n.. code-block:: json\n\n    {\n        "gitignore": [\n            ".env",\n            "/public/bundles/",\n            "/var/",\n            "/vendor/"\n        ]\n    }\n\nSimilar to other configurators, the contents are copied into the ``.gitignore``\nfile and wrapped with section separators (``###> your-recipe-name-here ###``)\nthat must not be removed or modified.\n\n``post-install-output`` Configurator\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nDisplays contents in the command console after the package has been installed.\nAvoid outputting meaningless information and use it only when you need to show\nhelp messages or the next step actions.\n\nThe contents must be defined in a file named ``post-install.txt`` (a\n``PHP_EOL`` character is added after each line). `Symfony Console styles and\ncolors`_ are supported too:\n\n.. code-block:: text\n\n    <bg=blue;fg=white>              </>\n    <bg=blue;fg=white> What\'s next? </>\n    <bg=blue;fg=white>              </>\n\n      * <fg=blue>Run</> your application:\n        1. Change to the project directory\n        2. Execute the <comment>make serve</> command;\n        3. Browse to the <comment>http://localhost:8000/</> URL.\n\n      * <fg=blue>Read</> the documentation at <comment>https://symfony.com/doc</>\n\nValidation\n----------\n\nWhen submitting a recipe, several checks are automatically executed to validate\nthe recipe:\n\n* YAML files suffix must be ``.yaml``, not ``.yml``;\n* YAML files must be valid;\n* YAML files must use 4 space indentations;\n* YAML files use ``null`` instead of ``~``;\n* YAML files under config/packages must not define a "parameters" section;\n* JSON files must be valid;\n* JSON files must use 4 space indentations;\n* Aliases are only supported in the main repository, not the contrib one;\n* Aliases must not be already defined by another package;\n* Aliases are not in the list of special Composer commands (nothing, lock, and mirrors);\n* The manifest file only contains supported keys;\n* The package must exist on Packagist;\n* The package must have at least one version on Packagist;\n* The package must have an MIT or BSD license;\n* The package must be of type "symfony-bundle" if a bundle is registered in the manifest;\n* The package must have a registered bundle in the manifest if type is "symfony-bundle";\n* The package does not only register a bundle for all environments;\n* The package does not depend on ``symfony/symfony`` or ``symfony/security``;\n* All text files should end with a newline;\n* All configuration file names under ``config`` should use the underscore notation;\n* No "semantically" empty configuration files are created under ``config/packages``;\n* All files are stored under a directory referenced by the "copy-from-recipe" section of "manifest.json";\n* The pull request does not contain merge commits;\n* The Symfony website must be referenced using HTTPs.\n\nFull Example\n------------\n\nCombining all the above configurators you can define powerful recipes, like the\none used by ``symfony/framework-bundle``:\n\n.. code-block:: json\n\n    {\n        "bundles": {\n            "Symfony\\\\Bundle\\\\FrameworkBundle\\\\FrameworkBundle": ["all"]\n        },\n        "copy-from-recipe": {\n            "config/": "%CONFIG_DIR%/",\n            "public/": "%PUBLIC_DIR%/",\n            "src/": "%SRC_DIR%/"\n        },\n        "composer-scripts": {\n            "cache:clear": "symfony-cmd",\n            "assets:install --symlink --relative %PUBLIC_DIR%": "symfony-cmd"\n        },\n        "env": {\n            "APP_ENV": "dev",\n            "APP_SECRET": "%generate(secret)%"\n        },\n        "gitignore": [\n            ".env",\n            "/public/bundles/",\n            "/var/",\n            "/vendor/"\n        ]\n    }\n\n.. _`Symfony Flex`: https://github.com/symfony/flex\n.. _`contrib repository`: https://github.com/symfony/recipes-contrib\n.. _`Symfony Console styles and colors`: https://symfony.com/doc/current/console/coloring.html\n'