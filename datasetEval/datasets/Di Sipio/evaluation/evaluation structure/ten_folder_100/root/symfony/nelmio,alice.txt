b'<p align="center">\n    <img src="doc/img/nelmio.png" width=300 />\n</p>\n\n<h1 align=center>Alice - Expressive fixtures generator</h1>\n\n[![Package version](https://img.shields.io/packagist/v/nelmio/alice.svg?style=flat-square)](https://packagist.org/packages/nelmio/alice)\n[![Build Status](https://img.shields.io/travis/nelmio/alice.svg?branch=master&style=flat-square)](https://travis-ci.org/nelmio/alice?branch=master)\n[![Slack](https://img.shields.io/badge/slack-%23alice--fixtures-red.svg?style=flat-square)](https://symfony.com/slack-invite)\n[![License](https://img.shields.io/badge/license-MIT-red.svg?style=flat-square)](LICENSE)\n\n\nRelying on [fzaninotto/Faker](https://github.com/fzaninotto/Faker), Alice\nallows you to create a ton of fixtures/fake data for use while developing\nor testing your project. It gives you a few essential tools to make it\nvery easy to generate complex data with constraints in a readable and easy\nto edit way, so that everyone on your team can tweak the fixtures if needed.\n\n**Warning: this doc is for alice 3.0. If you want to check the documentation\nfor 2.x, head [here](https://github.com/nelmio/alice/tree/2.x)**.\n\n**2.x is in maintenance mode: PRs are accepted, but no active development is done on it by the maintainers any longer.**\n\n\n## Table of Contents\n\n1. [Installation](#installation)\n1. [Example](#example)\n1. [Getting Started](doc/getting-started.md)\n    1. [Basic Usage](doc/getting-started.md#basic-usage)\n    1. [Framework integration](doc/getting-started.md#framework-integration)\n        1. [Symfony](doc/getting-started.md#symfony)\n1. [Complete Reference](doc/complete-reference.md)\n    1. [Creating Fixtures](doc/complete-reference.md#creating-fixtures)\n        1. [YAML](doc/complete-reference.md#yaml)\n        1. [PHP](doc/complete-reference.md#php)\n        1. [JSON](doc/complete-reference.md#json)\n    1. [Fixture Ranges](doc/complete-reference.md#fixture-ranges)\n    1. [Fixture Lists](doc/complete-reference.md#fixture-lists)\n    1. [Fixture Reference](doc/complete-reference.md#fixture-reference)\n    1. [Calling Methods](doc/complete-reference.md#calling-methods)\n        1. [Method arguments with flags](doc/complete-reference.md#method-arguments-with-flags)\n        1. [Method arguments with parameters](doc/complete-reference.md#method-arguments-with-parameters)\n    1. [Specifying Constructor Arguments](doc/complete-reference.md#specifying-constructor-arguments)\n    1. [Using a factory / a named constructor](doc/complete-reference.md#using-a-factory--a-named-constructor)\n    1. [Optional Data](doc/complete-reference.md#optional-data)\n    1. [Handling Unique Constraints](doc/complete-reference.md#handling-unique-constraints)\n1. [Handling Relations](doc/relations-handling.md)\n    1. [References](doc/relations-handling.md#references)\n    1. [Multiple References](doc/relations-handling.md#multiple-references)\n    1. [Self reference](doc/relations-handling.md#self-reference)\n    1. [Passing references to providers](doc/relations-handling.md#passing-references-to-providers)\n1. [Keep Your Fixtures Dry](doc/fixtures-refactoring.md)\n    1. [Fixture Inheritance](doc/fixtures-refactoring.md#fixture-inheritance)\n    1. [Including files](doc/fixtures-refactoring.md#including-files)\n    1. [Variables](doc/fixtures-refactoring.md#variables)\n    1. [Parameters](doc/fixtures-refactoring.md#parameters)\n        1. [Static parameters](doc/fixtures-refactoring.md#static-parameters)\n        1. [Dynamic parameters](doc/fixtures-refactoring.md#dynamic-parameters)\n        1. [Composite parameters](doc/fixtures-refactoring.md#composite-parameters)\n        1. [Usage with functions (constructor included)](doc/fixtures-refactoring.md#usage-with-functions-constructor-included)\n        1. [Inject external parameters](#inject-external-parameters)\n1. [Customize Data Generation](doc/customizing-data-generation.md)\n    1. [Faker Data](doc/customizing-data-generation.md#faker-data)\n        1. [Localized Fake Data](doc/customizing-data-generation.md#localized-fake-data)\n        1. [Random data](doc/customizing-data-generation.md#random-data)\n        1. [Default Providers](doc/customizing-data-generation.md#default-providers)\n            1. [Identity](doc/customizing-data-generation.md#identity)\n            1. [Current](doc/customizing-data-generation.md#current)\n            1. [Cast](doc/customizing-data-generation.md#cast)\n    1. [Custom Faker Data Providers](doc/customizing-data-generation.md#custom-faker-data-providers)\n1. [Advanced Guide](doc/advanced-guide.md#advanced-guide)\n    1. [Performance](doc/advanced-guide.md#performance)\n    1. [Expression Language (DSL)](doc/advanced-guide.md#expression-language-dsl)\n        1. [Parameters](doc/advanced-guide.md#parameters)\n        1. [Functions](doc/advanced-guide.md#functions)\n        1. [Identity](doc/advanced-guide.md#identity)\n        1. [Arrays](doc/advanced-guide.md#arrays)\n        1. [Optional](doc/advanced-guide.md#optional)\n        1. [References](doc/advanced-guide.md#references)\n        1. [Property Reference](doc/advanced-guide.md#property-reference)\n    1. [Extending Alice](doc/advanced-guide.md#extending-alice)\n        1. [Custom Flag](doc/advanced-guide.md#custom-flag)\n        1. [Custom Instantiation](doc/advanced-guide.md#custom-instantiator)\n        1. [Custom Accessor](doc/advanced-guide.md#custom-accessor)\n1. [Third-party libraries](#third-party-libraries)\n    1. [Symfony](#symfony)\n    1. [Nette](#nette)\n    1. [Zend Framework 2](#zend-framework-2)\n    1. [Framework Agnostic](#framework-agnostic)\n1. [Contribute](CONTRIBUTING.md#contribute)\n    1. [Differences between 2.x and 3.x](CONTRIBUTING.md#differences-between-2x-and-3x)\n    1. [Architecture](CONTRIBUTING.md#architecture)\n        1. [FixtureBuilder](CONTRIBUTING.md#fixturebuilder)\n        1. [Generator](CONTRIBUTING.md#generator)\n    1. [Expression Language](CONTRIBUTING.md#expression-language)\n    1. [Contributing](CONTRIBUTING.md#contributing)\n        1. [Testing](CONTRIBUTING.md#testing)\n        1. [Profiling](CONTRIBUTING.md#profiling)\n1. [Backward Compatibility Promise (BCP)](#backward-compatibility-promise-bcp)\n1. [Upgrade](#upgrade)\n    1. [Breaking changes between Alice 2.x and 3.0](UPGRADE.md#breaking-changes-between-alice-2x-and-30)\n\n\n## Installation\n\nThis is installable via [Composer](https://getcomposer.org/) as\n[nelmio/alice](https://packagist.org/packages/nelmio/alice):\n\n    composer require --dev nelmio/alice\n\n\n## Example\n\nHere is a complete example of entity declaration:\n\n```yaml\nNelmio\\Entity\\User:\n    user{1..10}:\n        username: \'<username()>\'\n        fullname: \'<firstName()> <lastName()>\'\n        birthDate: \'<date_create()>\'\n        email: \'<email()>\'\n        favoriteNumber: \'50%? <numberBetween(1, 200)>\'\n\nNelmio\\Entity\\Group:\n    group1:\n        name: Admins\n        owner: \'@user1\'\n        members: \'<numberBetween(1, 10)>x @user*\'\n        created: \'<dateTimeBetween("-200 days", "now")>\'\n        updated: \'<dateTimeBetween($created, "now")>\'\n```\n\nYou can then load them easily with:\n\n```php\n$loader = new Nelmio\\Alice\\Loader\\NativeLoader();\n$objectSet = $loader->loadFile(__DIR__.\'/fixtures.yml\');\n```\n\nOr load an array right away:\n\n```php\n$loader = new Nelmio\\Alice\\Loader\\NativeLoader();\n$objectSet = $loader->loadData([\n    \\Nelmio\\Entity\\User::class => [\n        \'user{1..10}\' => [\n            \'username\' => \'<username()>\',\n            \'fullname\' => \'<firstName()> <lastName()>\',\n            \'birthDate\' => \'<date_create()>\',\n            \'email\' => \'<email()>\',\n            \'favoriteNumber\' => \'50%? <numberBetween(1, 200)>\',\n        ],\n    ],\n    \\Nelmio\\Entity\\Group::class => [\n        \'group1\' => [\n            \'name\' => \'Admins\',\n            \'owner\' => \'@user1\',\n            \'members\' => \'<numberBetween(1, 10)>x @user*\',\n            \'created\' => \'<dateTimeBetween("-200 days", "now")>\',\n            \'updated\' => \'<dateTimeBetween($created, "now")>\',\n        ],\n    ],\n]);\n```\n\nFor more information, refer to [the documentation](#table-of-contents).\n\n\n## Third-party libraries\n\n### Framework Agnostic\n\n- [theofidry/AliceDataFixtures](https://github.com/theofidry/AliceDataFixtures)\n- [trappar/AliceGenerator](https://github.com/trappar/AliceGenerator)\n\n### Symfony\n\n- [hautelook/AliceBundle](https://github.com/hautelook/AliceBundle)\n- [h4cc/AliceFixturesBundle](https://github.com/h4cc/AliceFixturesBundle)\n- [knplabs/rad-fixtures-load](https://github.com/KnpLabs/rad-fixtures-load)\n\n\n### Nette\n\n-  [Zenify/DoctrineFixtures](https://github.com/Zenify/DoctrineFixtures)\n\n### Zend Framework 2:\n\n- [ma-si/aist-alice-fixtures](https://github.com/ma-si/aist-alice-fixtures)\n\n\n## Contribute\n\nCheck the [contribution guide](CONTRIBUTING.md).\n\n\n## Backward Compatibility Promise (BCP)\n\nThe policy is for the major part following the same as [Symfony\'s one][symfony-bc-policy] with a few changes or\nhighlights:\n\n- Code marked with `@private` or `@internal` are excluded from the BCP\n- `Nelmio\\Alice\\Loader\\NativeLoader` is excluded from the BCP: as it is the no DIC solution, registring a new service\n  may require a new method, in which case your code may break if you have already declared that method. To avoid that,\n  please beware of the naming of your methods to avoid any conflicts.\n\n\n## Upgrade\n\nCheck the [upgrade guide](UPGRADE.md).\n\n\n[symfony-bc-policy]: https://symfony.com/doc/current/contributing/code/bc.html\n'