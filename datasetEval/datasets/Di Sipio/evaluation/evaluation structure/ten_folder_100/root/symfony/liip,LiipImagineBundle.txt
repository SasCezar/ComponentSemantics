b'# LiipImagineBundle\n\n|       Travis-CI        |        Style-CI         |         Coverage        |        Downloads        |         Release         |\n|:----------------------:|:-----------------------:|:-----------------------:|:-----------------------:|:-----------------------:|\n| [![Travis](https://src.run/shield/liip/LiipImagineBundle/2.0/travis.svg)](https://src.run/service/liip/LiipImagineBundle/2.0/travis) | [![Style CI](https://src.run/shield/liip/LiipImagineBundle/2.0/styleci.svg)](https://src.run/service/liip/LiipImagineBundle/2.0/styleci) | [![Coverage](https://src.run/shield/liip/LiipImagineBundle/2.0/coveralls.svg)](https://src.run/service/liip/LiipImagineBundle/2.0/coveralls) | [![Downloads](https://src.run/shield/liip/LiipImagineBundle/packagist_dt.svg)](https://src.run/service/liip/LiipImagineBundle/packagist) | [![Latest Stable Version](https://src.run/shield/liip/LiipImagineBundle/packagist_v.svg)](https://src.run/service/liip/LiipImagineBundle/packagist) | \n\n*This bundle provides an image manipulation abstraction toolkit for\n[Symfony](http://symfony.com/)-based projects.*\n \n## Overview\n\n- [Filter Sets](http://symfony.com/doc/master/bundles/LiipImagineBundle/basic-usage.html):\n  Using any Symfony-supported configuration language (such as YML and XML), you can create *filter set* definitions that\n  specify transformation routines. These definitions include a set of\n  *[filters](http://symfony.com/doc/current/bundles/LiipImagineBundle/filters.html)* and\n  *[post-processors](http://symfony.com/doc/current/bundles/LiipImagineBundle/post-processors.html)*,\n  as well as other optional parameters.\n\n- [Filters](http://symfony.com/doc/master/bundles/LiipImagineBundle/filters.html):\n  Image transformations are applied using *filters*. A set of\n  [build-in filters](http://symfony.com/doc/current/bundles/LiipImagineBundle/filters.html) are provided by the bundle,\n  implementing the most common transformations; examples include\n  [thumbnail](http://symfony.com/doc/current/bundles/LiipImagineBundle/filters/sizing.html#thumbnails),\n  [scale](http://symfony.com/doc/current/bundles/LiipImagineBundle/filters/sizing.html#scale),\n  [crop](http://symfony.com/doc/current/bundles/LiipImagineBundle/filters/sizing.html#cropping-images),\n  [flip](http://symfony.com/doc/current/bundles/LiipImagineBundle/filters/orientation.html#flip),\n  [strip](http://symfony.com/doc/current/bundles/LiipImagineBundle/filters/general.html#strip), and\n  [watermark](http://symfony.com/doc/current/bundles/LiipImagineBundle/filters/general.html#watermark).\n  For more advances transformations, you can easily create your own\n  [custom filters](http://symfony.com/doc/master/bundles/LiipImagineBundle/filters.html#filter-custom).\n\n- [Post-Processors](http://symfony.com/doc/master/bundles/LiipImagineBundle/post-processors.html):\n  Modification of the resulting binary image file (created from your *filters*) are handled by *post-processors*.\n  Examples include\n  [JPEG Optim](http://symfony.com/doc/current/bundles/LiipImagineBundle/post-processors/jpeg-optim.html),\n  [Moz JPEG](http://symfony.com/doc/current/bundles/LiipImagineBundle/post-processors/jpeg-moz.html),\n  [Opti PNG](http://symfony.com/doc/current/bundles/LiipImagineBundle/post-processors/png-opti.html), and\n  [PNG Quant](http://symfony.com/doc/current/bundles/LiipImagineBundle/post-processors/png-quant.html). Just like filters\n  you can easily create your own\n  [custom post-processors](http://symfony.com/doc/master/bundles/LiipImagineBundle/post-processors.html#post-processors-custom).\n\n\n### Example\n\nSuppose you defined a `my_thumb` filter set, which can be configured to \nperform any number of different transformations. The simplest invocation would \nbe to pipe the path of your image to the provided `imagine_filter` Twig \nfilter.\n\n```twig\n<img src="{{ asset(\'/relative/path/to/image.jpg\') | imagine_filter(\'my_thumb\') }}" />\n```\n\n### Contributor Code of Conduct\n\nThis project is released with a [Contributor Code of Conduct](.github/CODE_OF_CONDUCT.md).\nBy participating in this project you agree to abide by its terms.\n\n### Attribution\n\n- Thanks to the many [contributors](https://github.com/liip/LiipImagineBundle/graphs/contributors) \n  who have dedicated their time and code to this project.\n\n- The standalone PHP\n  [Imagine Library](https://github.com/avalanche123/Imagine)\n  is used by this bundle for image transformations.\n\n- This package was forked from\n  [AvalancheImagineBundle](https://github.com/avalanche123/AvalancheImagineBundle)\n  with the goal of making the code more extensible. Reference\n  [AvalancheImagineBundle#25](https://github.com/avalanche123/AvalancheImagineBundle/pull/25)\n  for additional information on the reasoning for this fork.\n\n\n## Setup\n\n\n### Installation\n\nUsing this package is similar to all Symfony bundles. The following steps must \nbe performed\n\n1. [Download the Bundle](http://symfony.com/doc/master/bundles/LiipImagineBundle/installation.html#step-1-download-the-bundle)\n2. [Enable the Bundle](http://symfony.com/doc/master/bundles/LiipImagineBundle/installation.html#step-2-enable-the-bundle)\n3. [Register the Routes](http://symfony.com/doc/master/bundles/LiipImagineBundle/installation.html#step-3-register-the-bundle-s-routes)\n\nDetailed setup instructions can be found in the \n[installation](http://symfony.com/doc/master/bundles/LiipImagineBundle/installation.html)\nchapter of the documentation.\n\n\n### Configuration\n\nDetailed information on all available configuration options can be found in the\n[configuration](http://symfony.com/doc/master/bundles/LiipImagineBundle/configuration.html)\nchapter of the documentation.\n\n\n## Usage Primer\n\nGenerally, this bundle works by applying *filter sets* to images from inside\na template. Your *filter sets* are defined within the application\'s configuration\nfile (often `app/config/config.yml`) and are comprised of a collection of\n*filters*, *post-processors*, and other optional parameters.\n\nWe\'ll learn more about *post-processors* and other available parameters later,\nbut for now lets focus on how to define a simple *filter set* comprised of a\nfew *filters*.\n\n\n### Create Thumbnails\n\nBefore we get started, there is a small amount of configuration needed to ensure\nour [data loaders](http://symfony.com/doc/master/bundles/LiipImagineBundle/data-loaders.html)\nand [cache resolvers](http://symfony.com/doc/master/bundles/LiipImagineBundle/cache-resolvers.html)\noperate correctly. Use the following boilerplate in your configuration file.\n\n```yml\n# app/config/config.yml\n\nliip_imagine :\n\n    # configure resolvers\n    resolvers :\n\n        # setup the default resolver\n        default :\n\n            # use the default web path\n            web_path : ~\n\n    # your filter sets are defined here\n    filter_sets :\n\n        # use the default cache configuration\n        cache : ~\n```\n\nWith the basic configuration in place, we\'ll start with an example that fulfills a\ncommon use-case: creating thumbnails. Lets assume we want the resulting thumbnails\nto have the following transformations applied to them:\n\n- Scale and crop the image to 120x90px.\n- Add a 2px black border to the scaled image.\n- Adjust the image quality to 75.\n\nAdding onto our boilerplate from above, we need to define a *filter set* (which we\'ll\nname `my_thumb`) with two *filters* configured: the `thumbnail` and `background`\n*filters*.\n\n```yml\n# app/config/config.yml\n\nliip_imagine :\n    resolvers :\n        default :\n            web_path : ~\n\n    filter_sets :\n        cache : ~\n\n        # the name of the "filter set"\n        my_thumb :\n\n            # adjust the image quality to 75%\n            quality : 75\n\n            # list of transformations to apply (the "filters")\n            filters :\n\n                # create a thumbnail: set size to 120x90 and use the "outbound" mode\n                # to crop the image when the size ratio of the input differs\n                thumbnail  : { size : [120, 90], mode : outbound }\n\n                # create a 2px black border: center the thumbnail on a black background\n                # 4px larger to create a 2px border around the final image\n                background : { size : [124, 94], position : center, color : \'#000000\' }\n```\n\nYou\'ve now created a *filter set* called `my_thumb` that performs a thumbnail\ntransformation. The `thumbnail` filter sizes the image to the desired width\nand height (in this example, 120x90px), and its `mode: outbound` option causes\nthe resulting image to be cropped if the input ratio differs. The `background`\nfilter results in a 2px black border by creating a black canvas 124x94px in size,\nand positioning the thumbnail at its center.\n\n**Note:**\n*A *filter set* can have any number of *filters* defined for it. Simple\ntransformations may only require a single *filter* while complex\ntransformations can have an unlimited number of *filters* defined for them.*\n\nThere are a number of additional [filters](http://symfony.com/doc/master/bundles/LiipImagineBundle/filters.html),\nbut for now you can use your newly defined ``my_thumb`` *filter set* immediately\nwithin a template.\n\n*For Twig-based template, use:*\n\n```twig\n<img src="{{ asset(\'/relative/path/to/image.jpg\') | imagine_filter(\'my_thumb\') }}" />\n```\n\n*Or, for PHP-based template, use:*\n\n```php\n<img src="<?php $this[\'imagine\']->filter(\'/relative/path/to/image.jpg\', \'my_thumb\') ?>" />\n```\n\nBehind the scenes, the bundle applies the filter(s) to the image on-the-fly\nwhen the first page request is served. The transformed image is then cached\nfor subsequent requests. The final cached image path would be similar to\n`/media/cache/my_thumb/relative/path/to/image.jpg`.\n\n**Note:**\n*Using the ``dev`` environment you might find that images are not properly\nrendered via the template helper. This is often caused by having\n`intercept_redirect` enabled in your application configuration. To ensure\nimages are rendered, it is strongly suggested to disable this option:\n\n```yml\n# app/config/config_dev.yml\n\nweb_profiler :\n    intercept_redirects : false\n```\n\n\n### Runtime Options\n\nSometime, you may have a filter defined that fulfills 99% of your usage\nscenarios. Instead of defining a new filter for the erroneous 1% of cases,\nyou may instead choose to alter the behavior of a filter at runtime by\npassing the template helper an options array.\n\n*For Twig-based template, use:*\n\n```twig\n{% set runtimeConfig = {"thumbnail": {"size": [50, 50] }} %}\n\n<img src="{{ asset(\'/relative/path/to/image.jpg\') | imagine_filter(\'my_thumb\', runtimeConfig) }}" />\n```\n\n*Or, for PHP-based template, use:*\n\n```php\n<?php\n$runtimeConfig = array(\n    "thumbnail" => array(\n        "size" => array(50, 50)\n    )\n);\n?>\n\n<img src="<?php $this[\'imagine\']->filter(\'/relative/path/to/image.jpg\', \'my_thumb\', $runtimeConfig) ?>" />\n```\n\n\n### Path Resolution\n\nSometime you need to resolve the image path returned by this bundle for a\nfiltered image. This can easily be achieved using Symfony\'s console binary\nor programmatically from within a controller or other piece of code.\n\n\n#### Resolve with the Console\n\nYou can resolve an image URL using the console command\n`liip:imagine:cache:resolve`. The only required argument is one or more\nrelative image paths (which must be separated by a space).\n\n```bash\n$ php app/console liip:imagine:cache:resolve relative/path/to/image1.jpg relative/path/to/image2.jpg\n```\n\nAdditionally, you can use the ``--filters`` option to specify which filter\nyou want to resolve for (if the ``--filters`` option is omitted, all\navailable filters will be resolved).\n\n```bash\n$ php app/console liip:imagine:cache:resolve relative/path/to/image1.jpg --filters=my_thumb\n```\n\n\n#### Resolve Programmatically\n\nYou can resolve the image URL in your code using the `getBrowserPath`\nmethod of the `liip_imagine.cache.manager` service. Assuming you already\nhave the service assigned to a variable called `$imagineCacheManager`,\nyou would run:\n\n```php\n$imagineCacheManager->getBrowserPath(\'/relative/path/to/image.jpg\', \'my_thumb\');\n```\n\nOften, you need to perform this operation in a controller. Assuming your\ncontroller inherits from the base Symfony controller, you can take advantage\nof the inherited ``get`` method to request the ``liip_imagine.cache.manager``\nservice, from which you can call ``getBrowserPath`` on a relative image\npath to get its resolved location.\n\n```php\n/** @var CacheManager */\n$imagineCacheManager = $this->get(\'liip_imagine.cache.manager\');\n\n/** @var string */\n$resolvedPath = $imagineCacheManager->getBrowserPath(\'/relative/path/to/image.jpg\', \'my_thumb\');\n```\n\n\n## Filters\n\nThis bundle provides a set of built-in filters and you may easily\ndefine your own filters as well. Reference the\n[filters chapter](http://symfony.com/doc/master/bundles/LiipImagineBundle/filters.html)\nfrom our documentation.\n\n\n## Use as a Service\n\nIf you need to use your defined "filter sets" from within your controller, you \ncan fetch this bundle\'s FilterService from the service container to do the heavy\nlifting for you.\n\n```php\n<?php\n\nclass MyController extends Controller\n{\n    public function indexAction()\n    {\n        /** @var FilterService */\n        $imagine = $this\n            ->container\n            ->get(\'liip_imagine.service.filter\');\n\n        // 1) Simple filter, OR\n        $resourcePath = $imagine->getUrlOfFilteredImage(\'uploads/foo.jpg\', \'my_thumb\');\n        \n        // 2) Runtime configuration\n        $runtimeConfig = [\n            \'thumbnail\' => [\n                \'size\' => [200, 200]\n            ],\n        ];\n        $resourcePath = $imagine->getUrlOfFilteredImageWithRuntimeFilters(\n            \'uploads/foo.jpg\',\n            \'my_thumb\',\n            $runtimeConfig\n        );\n\n        // ..\n    }\n}\n\n?>\n```\n\n## Data Roots\n\nBy default, Symfony\'s `web/` directory is registered as a data root to load\nassets from. For many installations this will be sufficient, but sometime you\nmay need to load images from other locations. To do this, you must set the\n`data_root` parameter in your configuration (often located at `app/config/config.yml`).\n\n```yml\nliip_imagine:\n    loaders:\n        default:\n            filesystem:\n                data_root: /path/to/source/images/dir\n```\n\nAs of version `1.7.2` you can register multiple data root paths, and the \nfile locator will search each for the requested file.\n\n```yml\nliip_imagine:\n    loaders:\n        default:\n            filesystem:\n                data_root:\n                    - /path/foo\n                    - /path/bar\n```\n\nAs of version `1.7.3` you ask for the public resource paths from all registered bundles\nto be auto-registered as data roots. This allows you to load assets from the\n`Resources/public` folders that reside within the loaded bundles. To enable this\nfeature, set the `bundle_resources.enabled` configuration option to `true`.\n\n```yml\nliip_imagine:\n    loaders:\n        default:\n            filesystem:\n                bundle_resources:\n                    enabled: true\n```\n\nIf you want to register some of the `Resource/public` folders, but not all, you can do\nso by blacklisting the bundles you don\'t want registered or whitelisting the bundles you\ndo want registered. For example, to blacklist (not register) the bundles "FooBundle" and\n"BarBundle", you would use the following configuration.\n\n```yml\nliip_imagine:\n    loaders:\n        default:\n            filesystem:\n                bundle_resources:\n                    enabled: true\n                    access_control_type: blacklist\n                    access_control_list:\n                        - FooBundle\n                        - BarBundle\n```\n\nAlternatively, if you want to whitelist (only register) the bundles "FooBundle" and "BarBundle",\nyou would use the following configuration.\n\n```yml\nliip_imagine:\n    loaders:\n        default:\n            filesystem:\n                bundle_resources:\n                    enabled: true\n                    access_control_type: whitelist\n                    access_control_list:\n                        - FooBundle\n                        - BarBundle\n```\n\n### Permissions\n\nImage locations must be readable by your web server. On a system that supports \n`setfacl` (such as Linux/BSD), use\n\n```sh\nHTTPDUSER=`ps axo user,comm | grep -E \'[a]pache|[h]ttpd|[_]www|[w]ww-data|[n]ginx\' | grep -v root | head -1 | cut -d\\  -f1`\n\nsudo setfacl -R -m u:"$HTTPDUSER":rwX -m u:`whoami`:rwX /path/to/source/images/dir\n\nsudo setfacl -dR -m u:"$HTTPDUSER":rwX -m u:`whoami`:rwX /path/to/source/images/dir\n```\n\nSee the [Symfony Permissions documentation](http://symfony.com/doc/current/setup/file_permissions.html)\nfor commands compatible with macOS and other environments.\n\n\n### Using Apache\n\nYou need to grant read access for Apache by adding the following to your \nApache VHost configuration\n\n```xml\n<VirtualHost *:80>\n    <!-- Rest of directives like DocumentRoot or ServerName -->\n\n    Alias /FavouriteAlias /path/to/source/images/dir\n    <Directory "/path/to/source/images/dir">\n        AllowOverride None\n        Allow from All\n    </Directory>\n</VirtualHost>\n```\n\nAlternatively, you can place the directive in a separate file within your \nproject, and include it within your Apache VHost configuration. For example, \nyou can create the file `app/config/apache/photos.xml` and add the following \nto your VHost file\n\n```xml\n<VirtualHost *:80>\n    <!-- Rest of directives like DocumentRoot or ServerName -->\n\n    Include "/path/to/your/project/app/config/apache/photos.xml"\n</VirtualHost>\n```\n\nThis method keeps the file with the rest of your code, allowing you to change\nit easily or create different environment-dependent configuration files.\n\nOnce you have configured Apache properly, the relative path to an image with \nthe following absolute path `/path/to/source/images/dir/logo.png` must be\n`/FavouriteAlias/logo.png`.\n\n\n## Documentation\n\nFor more detailed information about the features of this bundle, refer to\nthe [documentation](http://symfony.com/doc/master/bundles/LiipImagineBundle).\n'