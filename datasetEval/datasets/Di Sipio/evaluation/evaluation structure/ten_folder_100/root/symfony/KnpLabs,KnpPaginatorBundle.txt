b'# Intro to KnpPaginatorBundle\n\nFriendly Symfony paginator to paginate everything\n\n[![Build Status](https://travis-ci.org/KnpLabs/KnpPaginatorBundle.svg?branch=master)](https://travis-ci.org/KnpLabs/KnpPaginatorBundle)\n\nGenerally this bundle is based on [Knp Pager component][knp_component_pager]. This\ncomponent introduces a different way for pagination handling. You can read more about the\ninternal logic on the given documentation link.\n\n[![knpbundles.com](http://knpbundles.com/KnpLabs/KnpPaginatorBundle/badge-short)](http://knpbundles.com/KnpLabs/KnpPaginatorBundle)\n\n**Note:** Keep **knp-components** in sync with this bundle. If you want to use\nolder version of KnpPaginatorBundle - use **v3.0** or **v4.X** tags in the repository which is\nsuitable to paginate **ODM MongoDB** and **ORM 2.0** queries\n\n## Latest updates\n\nFor notes about latest changes please read [`CHANGELOG`](https://github.com/KnpLabs/KnpPaginatorBundle/blob/master/CHANGELOG.md),\nfor required changes in your code please read [`UPGRADE`](https://github.com/KnpLabs/KnpPaginatorBundle/blob/master/docs/upgrade.md)\nchapter of documentation.\n\n## Requirements:\n\n- Knp Pager component `>=2.0`.\n- KnpPaginatorBundle\'s master compatible with Symfony `>=4.3` versions.\n- Twig `>=2.0` version is required if you use twig templating engine.\n\n## Features:\n\n- Does not require initializing specific adapters.\n- Can be customized in any way needed, etc.: pagination view, event subscribers.\n- Possibility to add custom filtering, sorting functionality depending on request parameters.\n- Separation of concerns, paginator is responsible for generating the pagination view only,\npagination view - for representation purposes.\n\n**Note:** using multiple paginators requires setting the **alias** in order to keep non\nconflicting parameters.\n\n## More detailed documentation:\n\n- Creating [custom pagination subscribers][doc_custom_pagination_subscriber]\n- [Extending pagination](#) class (todo, may require some refactoring)\n- [Customizing view][doc_templates] templates and arguments\n\n## Installation and configuration:\n\n### Pretty simple with [Composer](http://packagist.org), run\n\n```sh\ncomposer require knplabs/knp-paginator-bundle\n```\n\n### Add PaginatorBundle to your application kernel\n\nIf you don\'t use flex (you should), you need to manually enable bundle:\n\n```php\n// app/AppKernel.php\npublic function registerBundles()\n{\n    return [\n        // ...\n        new Knp\\Bundle\\PaginatorBundle\\KnpPaginatorBundle(),\n        // ...\n    ];\n}\n```\n\n<a name="configuration"></a>\n\n### Configuration example\n\nYou can configure default query parameter names and templates\n\n```yaml\nknp_paginator:\n    page_range: 5                       # number of links showed in the pagination menu (e.g: you have 10 pages, a page_range of 3, on the 5th page you\'ll see links to page 4, 5, 6)\n    default_options:\n        page_name: page                 # page query parameter name\n        sort_field_name: sort           # sort field query parameter name\n        sort_direction_name: direction  # sort direction query parameter name\n        distinct: true                  # ensure distinct results, useful when ORM queries are using GROUP BY statements\n        filter_field_name: filterField  # filter field query parameter name\n        filter_value_name: filterValue  # filter value query parameter name\n    template:\n        pagination: \'@KnpPaginator/Pagination/sliding.html.twig\'     # sliding pagination controls template\n        sortable: \'@KnpPaginator/Pagination/sortable_link.html.twig\' # sort link template\n        filtration: \'@KnpPaginator/Pagination/filtration.html.twig\'  # filters template\n```\n\n#### Additional pagination templates\nThat could be used out of the box in `knp_paginator.template.pagination` key:\n\n* `@KnpPaginator/Pagination/sliding.html.twig` (by default)\n* `@KnpPaginator/Pagination/twitter_bootstrap_v4_pagination.html.twig`\n* `@KnpPaginator/Pagination/twitter_bootstrap_v3_pagination.html.twig`\n* `@KnpPaginator/Pagination/twitter_bootstrap_pagination.html.twig`\n* `@KnpPaginator/Pagination/foundation_v5_pagination.html.twig`\n* `@KnpPaginator/Pagination/bulma_pagination.html.twig`\n* `@KnpPaginator/Pagination/semantic_ui_pagination.html.twig`\n* `@KnpPaginator/Pagination/materialize_pagination.html.twig`\n* `@KnpPaginator/Pagination/tailwindcss_pagination.html.twig`\n\n#### Additional sortable templates\nThat could be used out of the box in `knp_paginator.template.sortable` key:\n\n* `@KnpPaginator/Pagination/sortable_link.html.twig` (by default)\n* `@KnpPaginator/Pagination/twitter_bootstrap_v3_sortable_link.html.twig`\n* `@KnpPaginator/Pagination/font_awesome_sortable_link.html.twig`\n* `@KnpPaginator/Pagination/semantic_ui_sortable_link.html.twig`\n\n## Usage examples:\n\n### Controller\n\nCurrently paginator can paginate:\n\n- `array`\n- `Doctrine\\ORM\\Query`\n- `Doctrine\\ORM\\QueryBuilder`\n- `Doctrine\\ODM\\MongoDB\\Query\\Query`\n- `Doctrine\\ODM\\MongoDB\\Query\\Builder`\n- `Doctrine\\ODM\\PHPCR\\Query\\Query`\n- `Doctrine\\ODM\\PHPCR\\Query\\Builder\\QueryBuilder`\n- `Doctrine\\Common\\Collection\\ArrayCollection` - any Doctrine relation collection including\n- `ModelCriteria` - Propel ORM query\n- array with `Solarium_Client` and `Solarium_Query_Select` as elements\n\n```php\n// App\\Controller\\ArticleController.php\n\npublic function listAction(EntityManagerInterface $em, PaginatorInterface $paginator, Request $request)\n{\n    $dql   = "SELECT a FROM AcmeMainBundle:Article a";\n    $query = $em->createQuery($dql);\n\n    $pagination = $paginator->paginate(\n        $query, /* query NOT result */\n        $request->query->getInt(\'page\', 1), /*page number*/\n        10 /*limit per page*/\n    );\n\n    // parameters to template\n    return $this->render(\'article/list.html.twig\', [\'pagination\' => $pagination]);\n}\n```\n\n### View\n\n```twig\n{# total items count #}\n<div class="count">\n    {{ pagination.getTotalItemCount }}\n</div>\n<table>\n    <tr>\n        {# sorting of properties based on query components #}\n        <th>{{ knp_pagination_sortable(pagination, \'Id\', \'a.id\') }}</th>\n        <th{% if pagination.isSorted(\'a.Title\') %} class="sorted"{% endif %}>{{ knp_pagination_sortable(pagination, \'Title\', \'a.title\') }}</th>\n        <th>{{ knp_pagination_sortable(pagination, \'Release\', [\'a.date\', \'a.time\']) }}</th>\n    </tr>\n\n    {# table body #}\n    {% for article in pagination %}\n        <tr {% if loop.index is odd %}class="color"{% endif %}>\n            <td>{{ article.id }}</td>\n            <td>{{ article.title }}</td>\n            <td>{{ article.date | date(\'Y-m-d\') }}, {{ article.time | date(\'H:i:s\') }}</td>\n        </tr>\n    {% endfor %}\n</table>\n{# display navigation #}\n<div class="navigation">\n    {{ knp_pagination_render(pagination) }}\n</div>\n```\n\n### Translation in view\nFor translating the following text:\n* `%foo% name` with translation key `table_header_name`. The translation is in the domain `messages`.\n* `{0} No author|{1} Author|[2,Inf] Authors` with translation key `table_header_author`. The translation is in the domain `messages`.\n\ntranslationCount and translationParameters can be combined.\n\n```twig\n<table>\n    <tr>\n       {# sorting of properties based on query components #}\n       <th>{{ knp_pagination_sortable(pagination, \'Id\'|trans({foo:\'bar\'},\'messages\'), \'a.id\' )|raw }}</th>\n       <th{% if pagination.isSorted(\'a.Title\') %} class="sorted"{% endif %}>{{ knp_pagination_sortable(pagination, \'Title\', \'a.title\')|raw }}</th>\n       <th>{{ knp_pagination_sortable(pagination, \'Author\'|trans({}, \'messages\'), \'a.author\' )|raw }}</th>\n    </tr>\n\n    <!-- Content of the table -->\n</table>\n```\n\n### Dependency Injection\n\nYou can automatically inject a paginator service into another service by using the `knp_paginator.injectable` DIC tag.\nThe tag takes one optional argument `paginator`, which is the ID of the paginator service that should be injected.\nIt defaults to `knp_paginator`.\n\nThe class that receives the KnpPaginator service must implement `Knp\\Bundle\\PaginatorBundle\\Definition\\PaginatorAwareInterface`.\nIf you\'re too lazy you can also just extend the `Knp\\Bundle\\PaginatorBundle\\Definition\\PaginatorAware` base class.\n\n#### Lazy service\n\nThe `knp_paginator` service will be created lazily if the package `ocramius/proxy-manager` is installed.\n\nFor more information about lazy services, consult the [Symfony documentation on dependency injection](https://symfony.com/doc/current/service_container/lazy_services.html).\n\n###### XML configuration example\n\n```xml\n<?xml version="1.0" ?>\n\n<container xmlns="http://symfony.com/schema/dic/services"\n    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n    xsi:schemaLocation="http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd">\n\n    <parameters>\n        <parameter key="my_bundle.paginator_aware.class">MyBundle\\Repository\\PaginatorAwareRepository</parameter>\n    </parameters>\n\n    <services>\n        <service id="my_bundle.paginator_aware" class="my_bundle.paginator_aware.class">\n            <tag name="knp_paginator.injectable" paginator="knp_paginator" />\n        </service>\n    </services>\n</container>\n```\n\n[knp_component_pager]: https://github.com/KnpLabs/knp-components/blob/master/doc/pager/intro.md "Knp Pager component introduction"\n[doc_custom_pagination_subscriber]: https://github.com/KnpLabs/KnpPaginatorBundle/tree/master/docs/custom_pagination_subscribers.md "Custom pagination subscribers"\n[doc_templates]: https://github.com/KnpLabs/KnpPaginatorBundle/tree/master/docs/templates.md "Customizing Pagination templates"\n\n## Troubleshooting\n\n- Make sure the translator is activated in your Symfony config:\n\n```yaml\nframework:\n    translator: { fallbacks: [\'%locale%\'] }\n```\n\n- If your locale is not available, create your own translation file in\n`translations/KnpPaginatorBundle.en.yml` (substitute en for your own language code if needed)\n. Then add these lines:\n\n```yaml\nlabel_next: Next\nlabel_previous: Previous\n```\n\n## Maintainers\n\nPlease read [this post](https://knplabs.com/en/blog/news-for-our-foss-projects-maintenance) first.\n\nThis library is maintained by the following people (alphabetically sorted) :\n- @garak\n- @polc\n'