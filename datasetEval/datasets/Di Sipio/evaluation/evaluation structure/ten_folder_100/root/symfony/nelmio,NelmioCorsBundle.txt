b"# NelmioCorsBundle\n\n## About\n\nThe NelmioCorsBundle allows you to send [Cross-Origin Resource Sharing](http://enable-cors.org/)\nheaders with ACL-style per-URL configuration.\n\nIf you want to have a global overview of CORS workflow, you can browse\nthis [image](http://www.html5rocks.com/static/images/cors_server_flowchart.png).\n\n## Features\n\n* Handles CORS preflight OPTIONS requests\n* Adds CORS headers to your responses\n\n## Installation\n\nAn official [Symfony Flex](https://symfony.com/doc/current/setup/flex.html) recipe\nis available for this bundle.\nTo automatically install and configure it run:\n\n    $ composer req cors\n\nYou're done!\n\nAlternatively, if you don't use Symfony Flex, require the `nelmio/cors-bundle`\npackage in your `composer.json` and update your dependencies.\n\n    $ composer require nelmio/cors-bundle\n\nAdd the NelmioCorsBundle to your application's kernel:\n\n```php\n    public function registerBundles()\n    {\n        $bundles = [\n            // ...\n            new Nelmio\\CorsBundle\\NelmioCorsBundle(),\n            // ...\n        ];\n        // ...\n    }\n```\n\n## Configuration\n\nSymfony Flex generates a default configuration in `config/packages/nelmio_cors.yaml`.\n\nThe `defaults` are the default values applied to all the `paths` that match,\nunless overriden in a specific URL configuration. If you want them to apply\nto everything, you must define a path with `^/`.\n\nThis example config contains all the possible config values with their default\nvalues shown in the `defaults` key. In paths, you see that we allow CORS\nrequests from any origin on `/api/`. One custom header and some HTTP methods\nare defined as allowed as well. Preflight requests can be cached for 3600\nseconds.\n\n```yaml\n    nelmio_cors:\n        defaults:\n            allow_credentials: false\n            allow_origin: []\n            allow_headers: []\n            allow_methods: []\n            expose_headers: []\n            max_age: 0\n            hosts: []\n            origin_regex: false\n            forced_allow_origin_value: ~\n        paths:\n            '^/api/':\n                allow_origin: ['*']\n                allow_headers: ['X-Custom-Auth']\n                allow_methods: ['POST', 'PUT', 'GET', 'DELETE']\n                max_age: 3600\n            '^/':\n                origin_regex: true\n                allow_origin: ['^http://localhost:[0-9]+']\n                allow_headers: ['X-Custom-Auth']\n                allow_methods: ['POST', 'PUT', 'GET', 'DELETE']\n                max_age: 3600\n                hosts: ['^api\\.']\n```\n\n`allow_origin` and `allow_headers` can be set to `*` to accept any value, the\nallowed methods however have to be explicitly listed. `paths` must contain at least one item.\n\nIf `origin_regex` is set, `allow_origin` must be a list of regular expressions matching\nallowed origins. Remember to use `^` and `$` to clearly define the boundaries of the regex.\n\nBy default, the `Access-Control-Allow-Origin` response header value is \nthe `Origin` request header value (if it matches the rules you've defined with `allow_origin`),\nso it should be fine for most of use cases. If it's not, you can override this behavior \nby setting the exact value you want using `forced_allow_origin_value`.\n\nBe aware that even if you set `forced_allow_origin_value` to `*`, if you also set `allow_origin` to `http://example.com`,\nonly this specific domain will be allowed to access your resources.\n\n> **Note:** If you allow POST methods and have \n> [HTTP method overriding](http://symfony.com/doc/current/reference/configuration/framework.html#http-method-override)\n> enabled in the framework, it will enable the API users to perform PUT and DELETE \n> requests as well.\n\n## Cookbook\n\n### How to ignore preflight requests on New Relic?\n\nOn specific architectures with a moslty authenticated API, preflight request can represent a huge part of the traffic.\n\nIn such cases, you may not need to monitor on New Relic this traffic which is by the way categorized automatically as\n`unknown` by New Relic.\n\nA request listener can be written to ignore preflight requests:\n```php\nuse Symfony\\Component\\HttpKernel\\Event\\FilterResponseEvent;\n\nclass PreflightIgnoreOnNewRelicListener\n{\n    public function onKernelResponse(FilterResponseEvent $event)\n    {\n        if (!extension_loaded('newrelic')) {\n            return;\n        }\n\n        if ('OPTIONS' === $event->getRequest()->getMethod()) {\n            newrelic_ignore_transaction();\n        }\n    }\n}\n```\n\nRegister this listener, and voil\xc3\xa0!\n\n## License\n\nReleased under the MIT License, see LICENSE.\n"