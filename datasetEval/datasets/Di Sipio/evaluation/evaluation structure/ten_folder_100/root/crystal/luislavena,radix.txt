b'# Radix Tree\n\n[Radix tree](https://en.wikipedia.org/wiki/Radix_tree) implementation for\nCrystal language\n\n[![Build Status](https://img.shields.io/travis/luislavena/radix/master.svg)](https://travis-ci.org/luislavena/radix)\n[![Latest Release](https://img.shields.io/github/release/luislavena/radix.svg)](https://github.com/luislavena/radix/releases)\n\n## Installation\n\nAdd this to your application\'s `shard.yml`:\n\n```yaml\ndependencies:\n  radix:\n    github: luislavena/radix\n```\n\n## Usage\n\n### Building Trees\n\nYou can associate a *payload* with each path added to the tree:\n\n```crystal\nrequire "radix"\n\ntree = Radix::Tree(Symbol).new\ntree.add "/products", :products\ntree.add "/products/featured", :featured\n\nresult = tree.find "/products/featured"\n\nif result.found?\n  puts result.payload # => :featured\nend\n```\n\nThe types allowed for payload are defined on Tree definition:\n\n```crystal\ntree = Radix::Tree(Symbol).new\n\n# Good, since Symbol is allowed as payload\ntree.add "/", :root\n\n# Compilation error, Int32 is not allowed\ntree.add "/meaning-of-life", 42\n```\n\nCan combine multiple types if needed:\n\n```crystal\ntree = Radix::Tree(Int32 | String | Symbol).new\n\ntree.add "/", :root\ntree.add "/meaning-of-life", 42\ntree.add "/hello", "world"\n```\n\n### Lookup and placeholders\n\nYou can also extract values from placeholders (as named segments or globbing):\n\n```crystal\ntree.add "/products/:id", :product\n\nresult = tree.find "/products/1234"\n\nif result.found?\n  puts result.params["id"]? # => "1234"\nend\n```\n\nPlease see `Radix::Tree#add` documentation for more usage examples.\n\n## Caveats\n\nPretty much all Radix implementations have their limitations and this project\nis no exception.\n\nWhen designing and adding *paths* to a Tree, please consider that two different\nnamed parameters cannot share the same level:\n\n```crystal\ntree.add "/", :root\ntree.add "/:post", :post\ntree.add "/:category/:post", :category_post # => Radix::Tree::SharedKeyError\n```\n\nThis is because different named parameters at the same level will result in\nincorrect `params` when lookup is performed, and sometimes the value for\n`post` or `category` parameters will not be stored as expected.\n\nTo avoid this issue, usage of explicit keys that differentiate each path is\nrecommended.\n\nFor example, following a good SEO practice will be consider `/:post` as\nabsolute permalink for the post and have a list of categories which links to\nthe permalinks of the posts under that category:\n\n```crystal\ntree.add "/", :root\ntree.add "/:post", :post                    # this is post permalink\ntree.add "/categories", :categories         # list of categories\ntree.add "/categories/:category", :category # listing of posts under each category\n```\n\n## Implementation\n\nThis project has been inspired and adapted from\n[julienschmidt/httprouter](https://github.com/julienschmidt/httprouter) and\n[spriet2000/vertx-http-router](https://github.com/spriet2000/vertx-http-router)\nGo and Java implementations, respectively.\n\nChanges to logic and optimizations have been made to take advantage of\nCrystal\'s features.\n\n## Contributing\n\n1. Fork it ( https://github.com/luislavena/radix/fork )\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am \'Add some feature\'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [Luis Lavena](https://github.com/luislavena) - creator, maintainer\n'