b'[![Build status](http://img.shields.io/travis/ddfreyne/glove.svg)](https://travis-ci.org/ddfreyne/glove)\n\n# Glove\n\nGlove is a framework for making games. It is implemented in [Crystal](https://crystal-lang.org/).\n\n**\xe2\x9a\xa0 Caution! \xe2\x9a\xa0** Glove is experimental. Expect breaking changes. There are few tests. Do not use this for your own projects (yet). (Or do, and contribute back to Glove? That\xe2\x80\x99d be cool. I\xe2\x80\x99ll give you commit access. You can be one of the first people to write a proper game engine in Crystal.)\n\n## Usage\n\nTo use this shard, add the following lines to your `shard.yml`:\n\n```yaml\ndependencies:\n  glove:\n    git: git@github.com:ddfreyne/glove.git\n```\n\nGlove comes with shaders in its `shaders/` directory, which needs to be copied to where the executable is located. For example, the following will create a `target/` directory that contains the executable and the shaders directory:\n\n```bash\nrm -rf target/\nmkdir -p target\n\ncrystal build -o target/mygame src/mygame.cr\n\ncp -r lib/glove/src/shaders target/shaders\n```\n\nIt is useful to let the executable `cd` to the directory it is located in, before doing anything else, so that it can find the shaders easily:\n\n```crystal\nif full_path = Process.executable_path\n  Dir.cd(File.dirname(full_path))\nend\n```\n\nThe `target/` directory should also include any assets that the game needs to run; a more complete build script could therefore look as follows:\n\n```bash\nrm -rf target/\nmkdir -p target\n\ncrystal build -o target/mygame src/mygame.cr\n\ncp -r lib/glove/src/shaders target/shaders\ncp -r assets target/assets # <- added\n```\n\n## Example code\n\nHere is a trivial example that renders a card (from `assets/card.png`):\n\n```crystal\nrequire "glove"\n\nif full_path = Process.executable_path\n  Dir.cd(File.dirname(full_path))\nend\n\ncard =\n  Glove::Entity.new.tap do |e|\n    e << Glove::Components::Texture.new("assets/card.png")\n    e << Glove::Components::Transform.new.tap do |t|\n      t.width = 140_f32\n      t.height = 190_f32\n      t.translate_x = 400_f32\n      t.translate_y = 300_f32\n    end\n  end\n\nscene =\n  Glove::Scene.new.tap do |scene|\n    scene.spaces << Glove::Space.new.tap do |space|\n      space.entities << card\n    end\n  end\n\ngame = Glove::EntityApp.new(800, 600, "Inari")\ngame.clear_color = Glove::Color::WHITE\ngame.replace_scene(scene)\ngame.run\n```\n\n## Architecture\n\n* `Glove::EntityApp` is a generic game superclass that provides functionality for handling entities, and everything associated with it. Here is how a typical game would build an instance and run the game:\n\n  ```crystal\n  game = Glove::EntityApp.new(800, 600, "Inari")\n  game.clear_color = Glove::Color::WHITE\n  scene = Glove::Scene.new.tap do |scene|\n    # \xe2\x80\xa6 build scene here \xe2\x80\xa6\n  end\n  game.replace_scene(scene)\n  game.run\n  ```\n\n* `Glove::Entity` is a game object that is visible and/or reacts to user input.\n\n* `Glove::Component` is a property of an entity. A common component is `Glove::Components::Transform`, which adds width, height, rotation, scale, \xe2\x80\xa6 to an entity. Another common component is `Glove::Components::Camera`, which marks an entity as being a camera, and defines which part of a space (see below) will be rendered, with what rotation, etc.\n\n* `Glove::Action` defines a change to an entity. It can either be instant (e.g. remove entity) or act over time (e.g. move).\n\n* `Glove::Space` groups entities in a scene that logically belong together and can interact with each other. Entities in different spaces never interact. For example, one space might contain the game entities, and another space might contain UI elements.\n\n* `Glove::Scene` describes a scene (such as the main menu, credits, or in-game screen). It contains one or more spaces.\n\n* `Glove::System` describes logic for making changes to a space. A common system is a physics system, which would calculate velocities and update positions.\n\nThere are also a handful of simple data classes:\n\n* `Glove::Color`\n* `Glove::Point`\n* `Glove::Quad`\n* `Glove::Rect`\n* `Glove::Size`\n* `Glove::Vector`\n\n## Acknowledgements\n\nThis project started out by playing with [crystal-gl](https://github.com/ggiraldez/crystal-gl) by Gustavo Gir\xc3\xa1ldez.\n'