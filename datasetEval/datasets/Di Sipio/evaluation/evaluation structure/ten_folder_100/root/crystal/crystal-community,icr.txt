b'# ICR - Interactive Crystal [![Build Status](https://travis-ci.org/crystal-community/icr.svg?branch=master)](https://travis-ci.org/crystal-community/icr)\n\nInteractive console for [Crystal Programming Language](http://crystal-lang.org/).\n\n* [Usage](#usage)\n  * [Require local files](#require-local-files)\n* [Installation](#installation)\n  * [Arch Linux](#arch-linux)\n* [How does it work?](#how-does-it-work)\n* [Commands and special locals](#commands-and-special-locals)\n* [Update check](#update-check)\n* [Development](#development)\n* [Editor Integration](#editor-integration)\n* [Contributors](#contributors)\n\n## Usage\n\nIt\'s like irb, but for Crystal:\n\n![GIF demo](https://raw.githubusercontent.com/crystal-community/icr/master/demo/demo.gif)\n\n### Require local files\nYou can require local files by relative path (starts with `./`):\n```\nrequire "./src/my_cool_lib"\n```\n\nLibs can also be required from the cli:\n\n```\n$ icr -r colorize -r ./src/my_cool_lib\n```\n\n## Installation\nPrerequisites:\n* The latest version of crystal.\n* Readline (for Debian/Ubuntu install `libreadline6-dev` package).\n* LLVM development files.\n\nClone the repo:\n```\ngit clone https://github.com/crystal-community/icr.git\n```\nSwitch to repo-directory:\n```\ncd icr\n```\nBuild:\n```\nmake\n```\n\nInstall:\n\n```\nsudo make install\n```\n\n### As a shard dependency\n\nIf you would like to include icr as a dependency, you can add it to your `shard.yml`\n\n```yml\ndependencies:\n  icr:\n    github: crystal-community/icr\n    branch: master\n```\n\nThen just run `shards install` from your project!\n\nEnjoy!\n\n\n### Arch Linux\n\nArch Linux users can install ICR [from AUR](https://aur.archlinux.org/packages/crystal-icr/).\n\n\n## How does it work?\n* Every time you press `Enter` it adds a new instruction, generates a new crystal program, and executes it.\n* The output is split into 2 parts: regular program output (e.g. output from `puts 10`) and the value returned by the last command.\n* The regular output is saved, and when you type a new instruction, a new program is generated. The saved output is subtracted from the new output, and the difference is printed out. It creates an illusion that only new instructions are executed :)\n\n## Commands and special locals\n\n* `paste` - enables paste mode\n* `debug` - toggles debug mode off and on. In debug mode icr will print the code before executing it\n* `quit` or `exit` - exits current interactive console\n* `reset` - clears out all of the accumulated commands\n* `__` - holds the result of the last expression. Example:\n\n```crystal\nicr > "5" + "2"\n=> "52"\nicr > __.to_i - 10\n=> 42\n\n```\n\n## Update check\n\nICR periodically checks for the new releases on Github. If your current version is out of date, it will simply show you a notice at start.\n\nYou can disable this behavior using `--disable-update-check` CLI flag.\n\n## Development\n\nTo run tests:\n```\nmake test\n```\n\n## Editor integration\n\n - [inf-crystal.el](https://github.com/brantou/inf-crystal.el) - Connects REPL buffer to the ICR subprocess in Emacs\n\n## Contributors\n\n- [greyblake](https://github.com/greyblake) Potapov Sergey - creator, maintainer\n- [BlaXpirit](https://github.com/BlaXpirit) Oleh Prypin - fixes for Crystal 0.16\n- [puppetpies](https://github.com/puppetpies) Brian Hood - support of records\n- [jwoertink](https://github.com/jwoertink) Jeremy Woertink - support of -r option and number of other contributions\n- [veelenga](https://github.com/veelenga) V. Elenhaupt - maintenance\n- [MakeNowJust](https://github.com/MakeNowJust) TSUYUSATO Kitsune - syntax highlight support\n'