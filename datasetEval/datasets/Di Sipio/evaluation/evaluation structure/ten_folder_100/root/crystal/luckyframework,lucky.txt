b'[![github banner-short](https://user-images.githubusercontent.com/22394/26989908-dd99cc2c-4d22-11e7-9576-c6aeada2bd63.png)](http://luckyframework.org)\n\nThe goal: prevent bugs, forget about most performance issues, and spend more\ntime on code instead of debugging and fixing tests.\n\nIn summary, make writing stunning web applications fast, fun, and easy.\n\n## Coming from Rails?\n\n- [Ruby on Rails to Lucky on Crystal: Blazing fast, fewer bugs, and even more fun.\n  ](https://hackernoon.com/ruby-on-rails-to-lucky-on-crystal-blazing-fast-fewer-bugs-and-even-more-fun-104010913fec)\n\n## Try Lucky\n\nLucky has a [fresh new set of guides](https://luckyframework.org/guides/) that\nmake it easy to get started.\n\nFeel free to say hi or ask questions on our\n[chat room](https://gitter.im/luckyframework/Lobby).\n\n## Keep up-to-date\n\nKeep up to date by following [@luckyframework](https://twitter.com/luckyframework) on Twitter.\n\n## What\'s it look like?\n\n### JSON endpoint:\n\n```crystal\nclass Api::Users::Show < ApiAction\n  route do\n    json user_json\n  end\n\n  private def user_json\n    user = UserQuery.find(user_id)\n    {name: user.name, email: user.email}\n  end\nend\n```\n\n- `route` sets up a route for `"/api/users/:user_id"` automatically.\n- If you want you can set up custom routes like `get "sign_in"` for non REST routes.\n- A `user_id` method is generated because there is a `user_id` route parameter.\n- Use `json` to render JSON. [Extract\n  serializers](https://luckyframework.org/guides/writing-json-apis/#respond-with-json)\n  for reusable JSON responses.\n\n### Database models\n\n```crystal\n# Set up the model\nclass User < BaseModel\n  table :users do\n    column last_active_at : Time\n    column last_name : String\n    column nickname : String?\n  end\nend\n```\n\n- Sets up the columns that you\xe2\x80\x99d like to use, along with their types\n- You can add `?` to the type when the column can be `nil` . Crystal will then\n  help you remember not to call methods on it that won\'t work.\n- Lucky will set up presence validations for required fields\n  (`last_active_at` and `last_name` since they are not marked as nilable).\n\n### Querying the database\n\n```crystal\n# Add some methods to help query the database\nclass UserQuery < User::BaseQuery\n  def recently_active\n    last_active_at.gt(1.week.ago)\n  end\n\n  def sorted_by_last_name\n    last_name.lower.desc_order\n  end\nend\n\n# Query the database\nUserQuery.new.recently_active.sorted_by_last_name\n```\n\n- `User::BaseQuery` is automatically generated when you define a model. Inherit\n  from it to customize queries.\n- Set up named scopes with instance methods.\n- Lucky sets up methods for all the columns so that if you mistype a column\n  name it will tell you at compile-time.\n- Use the `lower` method on a `String` column to make sure Postgres sorts\n  everything in lowercase.\n- Use `gt` to get users last active greater than 1 week ago. Lucky has lots\n  of powerful abstractions for creating complex queries, and type specific\n  methods (like `lower`).\n\n### Rendering HTML:\n\n```crystal\nclass Users::Index < BrowserAction\n  route do\n    users = UserQuery.new.sorted_by_last_name\n    render IndexPage, users: users\n  end\nend\n\nclass Users::IndexPage < MainLayout\n  needs users : UserQuery\n\n  def content\n    render_new_user_button\n    render_user_list\n  end\n\n  private def render_new_user_button\n    link "New User", to: Users::New\n  end\n\n  private def render_user_list\n    ul class: "user-list" do\n      @users.each do |user|\n        li do\n          link user.name, to: Users::Show.with(user.id)\n          text " - "\n          text user.nickname || "No Nickname"\n        end\n      end\n    end\n  end\nend\n```\n\n- `needs users : UserQuery` tells the compiler that it must be passed users\n  of the type `UserQuery`.\n- If you forget to pass something that a page needs, it will let you know at\n  compile time. **Fewer bugs and faster debugging**.\n- Write tags with Crystal methods. Tags are automatically closed and\n  whitespace is removed.\n- Easily extract named methods since pages are made of regular classes and\n  methods. **This makes your HTML pages incredibly easy to read.**\n- Link to other pages with ease. Just use the action name: `Users::New`. Pass\n  params using `with`: `Users::Show.with(user.id)`. No more trying to remember path\n  helpers and whether the helper is pluralized or not - If you forget to pass a\n  param to a route, Lucky will let you know at compile-time.\n- Since we defined `column nickname : String?` as nilable, Lucky would fail\n  to compile the page if you just did `text user.nickname` since it disallows\n  printing `nil`. So instead we add a fallback `"No Nickname"`. **No more\n  accidentally printing empty text in HTML!**\n\n## Testing\n\nYou need to make sure to install the Crystal dependencies.\n\n1. Run `shards install`\n1. Run `crystal spec` from the project root.\n\n## Contributing\n\n1. Fork it ( https://github.com/luckyframework/web/fork )\n1. Create your feature branch (git checkout -b my-new-feature)\n1. Install docker and docker-compose: https://docs.docker.com/compose/install/\n1. Run `script/setup` to build the Docker containers with everything you need.\n1. Make your changes\n1. Make sure specs pass: `script/test`.\n1. Add a note to the CHANGELOG\n1. Commit your changes (git commit -am \'Add some feature\')\n1. Push to the branch (git push origin my-new-feature)\n1. Create a new Pull Request\n\n> Run specific tests with `script/test <path_to_spec>`\n\n## Contributors\n\n- [paulcsmith](https://github.com/paulcsmith) Paul Smith - creator, maintainer\n\n## Thanks & attributions\n\n- SessionHandler, CookieHandler and FlashHandler are based on [Amber](https://github.com/amberframework/amber). Thank you to the Amber team!\n- Thanks to Rails for inspiring many of the ideas that are easy to take for\n  granted. Convention over configuration, removing boilerplate, and most\n  importantly - focusing on developer happiness.\n- Thanks to Phoenix, Ecto and Elixir for inspiring Avram\'s save operations,\n  Lucky\'s single base actions and pipes, and focusing on helpful error\n  messages.\n- `lucky watch` based heavily on [Sentry](https://github.com/samueleaton/sentry). Thanks [@samueleaton](https://github.com/samueleaton)!\n'