b'# Jennifer [![Build Status](https://travis-ci.org/imdrasil/jennifer.cr.svg)](https://travis-ci.org/imdrasil/jennifer.cr) [![Latest Release](https://img.shields.io/github/release/imdrasil/jennifer.cr.svg)](https://github.com/imdrasil/jennifer.cr/releases) [![Docs](https://img.shields.io/badge/docs-available-brightgreen.svg)](https://imdrasil.github.io/jennifer.cr/docs/)\n\nActiveRecord pattern implementation for Crystal with a powerful query DSL, validation, relationship definition, translation and migration mechanism.\n\n## Installation\n\nAdd this to your application\'s `shard.yml`:\n\n```yaml\ndependencies:\n  jennifer:\n    github: imdrasil/jennifer.cr\n    version: "~> 0.8.4"\n```\n\n### Requirements\n\n- you need to choose one of the existing drivers for your DB: [mysql](https://github.com/crystal-lang/crystal-mysql) or [postgres](https://github.com/will/crystal-pg); sqlite3 adapter automatically installs required driver for it;\n- crystal `>= 0.31.0`.\n\n## Usage\n\nJennifer allows you to maintain everything for your models - from DB migrations and field mapping to callbacks and building queries. For detailed information see the [docs](https://imdrasil.github.io/jennifer.cr/docs/) and [API documentation](https://imdrasil.github.io/jennifer.cr/versions).\n\n### CLI\n\nFor command management Jennifer uses [Sam](https://github.com/imdrasil/sam.cr). Due to this you can easily create/migrate/drop database or invoke generator to bootstrap your models and migrations.\n\n### Migration\n\nJennifer has built-in database migration management system. Migrations allow you to organize all database changes.\n\nTo start using Jennifer you\'ll first need to generate a migration:\n\n```shell\n$ crystal sam.cr -- generate:migration CreateContact\n```\n\nthen fill the created migration file with content:\n\n```crystal\nclass CreateContact < Jennifer::Migration::Base\n  def up\n    # Postgres requires to create specific enum type\n    create_enum(:gender_enum, ["male", "female"])\n    create_table(:contacts) do |t|\n      t.string :name, {:size => 30}\n      t.integer :age\n      t.integer :tags, {:array => true}\n      t.field :gender, :gender_enum\n      t.timestamps\n    end\n  end\n\n  def down\n    drop_table :contacts\n    drop_enum(:gender_enum)\n  end\nend\n```\n\nand run\n\n```shell\n$ crystal sam.cr -- db:setup\n```\n\nto create the database and run the newly created migration.\n\n### Model\n\nJennifer provides next features:\n\n- flexible model schema definition\n- relationship definition (`belongs_to`, `has_many`, `has_one`, `has_and_belongs_to_many`) - including polymorphic ones\n- built-in extendable validations\n- model-specific query scope definition\n- callbacks\n- database view support\n- SQL translations\n\nHers is a model example:\n\n```crystal\nclass Contact < Jennifer::Model::Base\n  with_timestamps\n  mapping(\n    id: Primary32, # is an alias for Int32? primary key\n    name: String,\n    gender: { type: String?, default: "male" },\n    age: { type: Int32, default: 10 },\n    description: String?,\n    created_at: Time?,\n    updated_at: Time?\n  )\n\n  has_many :facebook_profiles, FacebookProfile\n  has_and_belongs_to_many :countries, Country\n  has_and_belongs_to_many :facebook_many_profiles, FacebookProfile, join_foreign: :profile_id\n  has_one :passport, Passport\n\n  validates_inclusion :age, 13..75\n  validates_length :name, minimum: 1, maximum: 15\n  validates_with_method :name_check\n\n  scope :older { |age| where { _age >= age } }\n  scope :ordered { order(name: :asc) }\n\n  def name_check\n    return unless description && description.not_nil!.size > 10\n    errors.add(:description, "Too large description")\n  end\nend\n```\n\n### Query DSL\n\nJennifer allows you to query the DB using a flexible DSL:\n\n```crystal\nContact\n  .all\n  .left_join(Passport) { _contact_id == _contact__id }\n  .order(id: :asc).order(Contact._name.asc.nulls_last)\n  .with_relation(:passport)\n  .to_a\nContact.all.eager_load(:countries).where { __countries { _name.like("%tan%") } }\nContact.all.group(:gender).group_avg(:age, PG::Numeric)\n```\n\nSupported features:\n\n- fetching model objects from the database\n- fetching records from a specific table\n- *magic* underscore  table column notation which allows effectively reference any table column or alias\n- eager loading of model associations any levels deep\n- support of common SQL functions (including aggregations) and mechanism to register own ones\n- flexible DSL of all SQL clauses (`SELECT`, `FROM`, `WHERE`, `JOIN`, `GROUP BY`, etc.)\n- `CTE` support\n- `JSON` operators\n- table and column aliasing\n\nMuch more about the query DSL can be found in the wiki [page](./docs/query_dsl.md).\n\n### Internationalization\n\nYou can easily configure error message generated for certain validation violation for a specific model or globally. Model and attribute names can be easily configured as well. For internationalization purpose [i18n](https://github.com/TechMagister/i18n.cr) is used. For more details how does it work see [wiki](./docs/internationalization_dsl.md).\n\n### Logging & Debugging\n\nJennifer uses a regular Crystal logging mechanism so you could specify your own logger or formatter:\n\n```crystal\n# Here is default logger configuration\nJennifer::Config.configure do |conf|\n  conf.logger = Logger.new(STDOUT).tap do |logger|\n    logger.formatter = Logger::Formatter.new do |_severity, datetime, _progname, message, io|\n      io << datetime << ": " << message\n    end\n\n    logger.level = Logger::DEBUG\n  end\nend\n```\n\nAll errors occurred during executing query includes query itself with arguments along side description. `Jennifer::Model::Base#inspect` returns model debug information filtered out all unnecessary information.\n\n```crystal\nAddress.first!.inspect\n# #<Address:0x7efde96ac0d0 id: 1, street: "Ant st. 69", contact_id: nil, created_at: 2019-06-10 11:11:11.665032000 +03:00 Local>\n```\n\nAlso, you can get a query execution plan explanation right from your code - just execute `#explain` on query to get appropriate information (output is database specific):\n\n```crystal\nContact.all.explain # => Seq Scan on contacts  (cost=0.00..14.30 rows=100.0 width=320)\n```\n\n### Testing tips\n\nThe fastest way to rollback all changes in the DB after test case is by using a transaction. So add:\n\n```crystal\nSpec.before_each do\n  Jennifer::Adapter.adapter.begin_transaction\nend\n\nSpec.after_each do\n  Jennifer::Adapter.adapter.rollback_transaction\nend\n```\n\nto your `spec_helper.cr`. NB. you could simply use regular deleting or truncation, but a transaction will provide a 15x speed up (at least for postgres; mysql gets less impact).\n\n> These functions can be safely used only under test environment.\n\n## Versioning\n\nNow that Jennifer is under heavy development, there could be many breaking changes. So please check the release notes to check if any of the changes may prevent you from using it. Also, until this library reaches a beta version, the next version rules will be followed:\n\n- all bug fixes, new minor features or (sometimes) ones that don\'t break the existing API will be added as a patch number (e.g. 0.3.**4**);\n\n- all breaking changes and new important features (as well as reaching a milestone) will be added by bumping the minor digit (0.**4**.0);\n\nSo even a patch version change could bring a lot of new stuff.\n\nIf there is a branch for the next release - it will be removed 1 month after the release. So please use them only as a hotfix or for experiments or contribution.\n\n## Development\n\n> Before developing any feature please create an issue where you describe your idea.\n\nTo setup dev environment run `./examples/setup.sh` - it creates `./examples/database.yml` configuration file. You can override there any values specific to your environment (like db user of password).\n\nTo create the databases:\n\n```shell\n# Postgres\n$ make sam db:setup\n\n# Mysql\n$ DB=mysql make sam db:setup\n```\n\n### Running tests\n\nAll unit tests are written using core `spec`. Also in `spec/spec_helper.cr` some custom unit test matchers are defined. All migrations are under the `./examples/migrations` directory.\n\nThe common way to run tests is just use using regular crystal spec tool:\n\n```shell\n$ crystal spec\n```\n\nPostgreSQL is used by default, but MySql is also supported while running tests by specifying environment variable `DB=mysql`:\n\nIn case you need to set the database user or password, use:\n\n```shell\n$ DB_USER=user DB_PASSWORD=pass crystal spec\n```\n\n#### Integration tests\n\nExcept unit tests there are also several *integration* tests. These tests checks possibility to compile and invoke jennifer functionality in some special edge cases (e.g. without defined models, migrations, etc.).\n\nTo run integration test just use standard spec runner:\n\n```shell\n$ crystal spec spec/integration/<test_name>.cr\n```\n\nEach test file is required to be invoked separately as it may have own configuration.\n\nTo run docker-related tests (by the way, all of them run only with mysql) firstly you should run docker container and specify environment variable `DOCKER=1`. For more details take a look at `spec/integration/sam/*` application files and `examples/run_docker_mysql.sh` docker boot script.\n\n## Documentation\n\nSelf documentation is not fully support yet but docs can be compiled using this shell script:\n\n```shell\n$ ./generate-docs.sh\n```\n\nNB. It also depends on then chosen adapter (postgres by default).\n\n## Similar shards\n\n- [crecto](https://github.com/Crecto/crecto) - based on Phoenix\'s Ecto lib and follows the repository pattern\n- [granite-orm](https://github.com/amberframework/granite) - lightweight ORM focusing on mapping fields from request to your objects\n- [topaz](https://github.com/topaz-crystal/topaz) - inspired by AR ORM with migration mechanism\n- [micrate](https://github.com/juanedi/micrate) - standalone database migration tool for crystal\n\n## Contributing\n\n1. [Fork it]( https://github.com/imdrasil/jennifer.cr/fork )\n2. Create your feature branch (git checkout -b my-new-feature)\n3. Commit your changes (git commit -am \'Add some feature\')\n4. Push to the branch (git push origin my-new-feature)\n5. Create a new Pull Request\n\nPlease ask me before starting work on smth.\n\n## Contributors\n\n- [imdrasil](https://github.com/imdrasil) Roman Kalnytskyi - creator, maintainer\n'