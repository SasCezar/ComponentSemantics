b'# Slang [![Build Status](https://travis-ci.org/jeromegn/slang.svg?branch=master)](https://travis-ci.org/jeromegn/slang) [![Dependency Status](https://shards.rocks/badge/github/jeromegn/slang/status.svg)](https://shards.rocks/github/jeromegn/slang) [![devDependency Status](https://shards.rocks/badge/github/jeromegn/slang/dev_status.svg)](https://shards.rocks/github/jeromegn/slang)\n\nLightweight, terse, templating language for Crystal.\n\n## Installation\n\nAdd this to your application\'s `shard.yml`:\n\n```yaml\ndependencies:\n  slang:\n    github: jeromegn/slang\n```\n\n## Usage\n\n### Preferred: use Kilt\n\n[Kilt](https://github.com/jeromegn/kilt) is included as a dependency for this project. It should help integrating non-ECR template engines.\n\n```\nrequire "kilt/slang"\n\nKilt.render("path/to/file.slang") #=> <compiled template>\n```\n\nExample with [Kemal](http://kemalcr.com) (includes Kilt):\n\n```crystal\nrequire "kilt/slang"\n\nget "/" do\n  render "path/to/file.slang"\nend\n```\n\n### Without Kilt\n\n```crystal\nString.build do |str|\n  Slang.embed("path/to/file.slang", "str")\nend\n```\n\n## Syntax\n\n```slim\ndoctype html\nhtml\n  head\n    meta name="viewport" content="width=device-width,initial-scale=1.0"\n    title This is a title\n    css:\n      h1 {color: red;}\n      p {color: green;}\n    style h2 {color: blue;}\n  body\n    /! Visible multi-line comment\n      span this is wrapped in a comment\n    /[if IE]\n      p Dat browser is old.\n    / Invisible multi-line comment\n      span this is wrapped in a comment\n    h1 This is a slang file\n    h2 This is blue\n    input type="checkbox" checked=false\n    input type="checkbox" checked=true\n    input type="checkbox" checked="checked"\n    span#some-id.classname\n      #hello.world.world2\n        - some_var = "hello world haha"\n        span\n          span data-some-var=some_var two-attr="fun" and a #{p("hello")}\n          span\n            span.deep_nested\n              p\n                | text inside of <p>\n              = Process.pid\n              | text node\n              \' other text node\n        span.alongside pid=Process.pid\n          custom-tag#with-id pid="#{Process.pid}"\n            - ["ah", "oh"].each do |s|\n              span = s\n    / This is an invisible comment\n    #amazing-div some-attr="hello"\n    /! This is a visible comment\n    script var num1 = 8*4;\n\n    javascript:\n      var num2 = 8*3;\n      alert("8 * 3 + 8 * 4 = " + (num1 + num2));\n```\n\nGiven the context:\n\n```crystal\nsome_var = "hello"\nstrings = ["ah", "oh"]\n```\n\nCompiles to HTML:\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta name="viewport" content="width=device-width,initial-scale=1.0">\n    <title>This is a title</title>\n    <style>\n      h1 {color: red;}\n      p {color: green;}\n    </style>\n    <style>h2 {color: blue;}</style>\n  </head>\n  <body>\n    <!--Visible multi-line comment\n      <span>this is wrapped in a comment</span>\n    -->\n    <!--[if IE]>\n      <p>Dat browser is old.</p>\n    <![endif]-->\n    <h1>This is a slang file</h1>\n    <h2>This is blue</h2>\n    <input type="checkbox"/>\n    <input type="checkbox" checked/>\n    <input type="checkbox" checked="checked"/>\n    <span id="some-id" class="classname">\n      <div id="hello" class="world world2">\n        <span>\n          <span data-some-var="hello world haha" two-attr="fun">and a hello</span>\n          <span>\n            <span class="deep_nested">\n              <p>\n                text inside of &lt;p&gt;\n              </p>\n              #{Process.pid}\n              text node\n              other text node\n            </span>\n          </span>\n        </span>\n        <span class="alongside" pid="#{Process.pid}">\n          <custom-tag id="with-id" pid="#{Process.pid}">\n            <span>ah</span>\n            <span>oh</span>\n          </custom-tag>\n        </span>\n      </div>\n    </span>\n    <div id="amazing-div" some-attr="hello"></div>\n    <!--This is a visible comment-->\n    <script>var num1 = 8*4;</script>\n    <script>\n      var num2 = 8*3;\n      alert("8 * 3 + 8 * 4 = " + (num1 + num2));\n    </script>\n  </body>\n</html>\n```\n\n## TODO\n\n- [x] Fix known limitations\n- [ ] More tests\n- [ ] Website\n- [ ] Documentation\n\n## Contributing\n\n1. Fork it ( https://github.com/jeromegn/slang/fork )\n2. Create your feature branch (git checkout -b my-new-feature)\n3. Commit your changes (git commit -am \'Add some feature\')\n4. Push to the branch (git push origin my-new-feature)\n5. Create a new Pull Request\n\n## Contributors\n\n- [jeromegn](https://github.com/jeromegn) Jerome Gravel-Niquet - creator, maintainer\n- [kRaw1er](https://github.com/kRaw1er) Dmitry Neveshkin\n- [elorest](https://github.com/elorest) Isaac Sloan\n'