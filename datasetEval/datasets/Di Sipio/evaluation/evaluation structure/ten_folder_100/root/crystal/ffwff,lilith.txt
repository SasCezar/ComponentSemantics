b'<h1 align="center">lilith</h1>\n\n<p align="center">\n<img src="./img/screenshot-2109.png" alt="screenshot of lilith"/>\n</p>\n\n<p align="center">\nA POSIX-like x86-64 kernel with a 32-bit userspace written in Crystal/C.\n</p>\n\n## Building\n\nlilith needs to be compiled with a patched crystal compiler, to build it, run the command:\n\n```\nmake toolchain/crystal/.build/crystal\n```\n\nYou will also need an appropriate `x86_64-elf` binutils toolchain in order to link and assemble the kernel, as well as `i686-elf` binutils to build the bootstrap code.\n\n```\nmake build/kernel\n```\n\n### Building the userspace\n\nA Makefile is provided for building the userspace toolchain, to build it, go to the `userspace/toolchain` directory and use `make`.\n\nOnce built, a patched version of GCC/Binutils will be installed in `userspace/toolchain/tools/bin`, simply set your PATH variable to that location and you can use the toolchain (with the `i386-elf-lilith` prefix)\n\nTo compile C programs for the system, you\'ll also need to build the libc. In the `userspace/toolchain` directory, do:\n\n```\nmake build_libc\n```\n\n## Running\n\nA CPU with x64 support is required to run the OS. The Makefile provides a script which will run QEMU on the kernel:\n\n```\nmake run\n```\n\nTo run with storage, an MBR-formatted hard drive image with a FAT16 partition must be provided in the running directory with the name `drive.img`. The kernel will automatically boot the `main.bin` executable on the hard drive, or panic if it can\'t be loaded.\n\n```\nmake run_img\n```\n\n## Features\n\n* [x] Basic x86-64 support\n* [x] Hybrid conservative-precise incremental garbage collector\n* [x] IDE/ATA support (well, it can only load from primary master)\n* [x] FAT16 support\n* [x] Basic syscalls (open, read, write, spawn,...)\n* [x] Preemptive multitasking!\n* [x] Userspace C library written in Crystal/C\n* [ ] And much more as I go...\n\n## License\n\nLilith is licensed under MIT. See LICENSE for more details.\n\n'