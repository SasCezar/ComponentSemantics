b'# `debug!(\xe2\x80\xa6)`\n\n[![Build Status](https://travis-ci.com/Sija/debug.cr.svg?branch=master)](https://travis-ci.com/Sija/debug.cr) [![Releases](https://img.shields.io/github/release/Sija/debug.cr.svg)](https://github.com/Sija/debug.cr/releases) [![License](https://img.shields.io/github/license/Sija/debug.cr.svg)](https://github.com/Sija/debug.cr/blob/master/LICENSE)\n\n*A macro for `puts`-style debugging fans.*\n\nDebuggers are great. But sometimes you just don\'t have the time and nerve to set\nup everything correctly and just want a quick way to inspect some values at runtime.\n\nThis projects provides `debug!(\xe2\x80\xa6)` macro that can be used in all circumstances\nwhere you would typically write `puts \xe2\x80\xa6` or `pp \xe2\x80\xa6`, but with a few extras.\n\n## Features\n\n * Easy to read, colorized output\n * Prints file name, line number, function name and the original expression\n * Adds type information for the printed-out value\n * Specialized pretty-printers for selected classes and modules (like `Indexable`)\n * Can be used inside expressions\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n   ```yaml\n   dependencies:\n     debug:\n       github: Sija/debug.cr\n   ```\n\n2. Run `shards install`\n\n3. Make sure you compile your program with ENV variable `DEBUG` set to `1`\n  (for instance `DEBUG=1 shards build`). Otherwise all `debug!(\xe2\x80\xa6)` calls\n  will become a no-op.\n\n4. Once your program is compiled, you need to pass `DEBUG=1` again on the\n  program start, in order to activate `debug!(\xe2\x80\xa6)` logging. Alternatively,\n  you can call `Debug.enabled = true` within your code to achieve the same\n  behaviour.\n\n## Usage\n\n```crystal\nrequire "debug"\n\n# You can use `debug!(...)` in expressions:\ndef factorial(n : Int)\n  return debug!(1) if debug!(n <= 1)\n  debug!(n * factorial(n - 1))\nend\n\nmessage = "hello"\ndebug!(message)\n\na = 2\nb = debug!(3 * a) + 1\n\nnumbers = {b, 13, 42}\ndebug!(numbers)\n\ndebug!("this line is executed")\n\nfactorial(4)\n```\n\nThe code above produces this output:\n\n![debug!(\xe2\x80\xa6) macro output](https://i.imgur.com/tn0WnEL.png)\n\n## Configuration\n\nYou can change the global defaults by calling `Debug.configure` with a block:\n\n```crystal\nDebug.configure do |settings|\n  settings.max_path_length = 100\n\n  settings.colors[:expression] = :magenta\n  settings.colors[:value] = :yellow\nend\n```\n\nThere\'s also `Debug::Logger.configure` method which allows you to change\nglobal defaults related to the logging itself.\n\n```crystal\nDebug::Logger.configure do |settings|\n  settings.progname = "foo.cr"\n\n  settings.show_severity = false\n  settings.show_datetime = true\n  settings.show_progname = true\n\n  settings.colors[:datetime] = :dark_gray\n  settings.colors[:progname] = :light_blue\n\n  settings.severity_colors[:debug] = :cyan\n  settings.severity_colors[:info] = :white\nend\n```\n\n## Customization\n\nIf you want `debug!(\xe2\x80\xa6)` to work for your custom class, you can simply overload\n`#to_debug(io)` method within your class.\n\n```crystal\nclass Foo\n  def to_debug(io)\n    io << "Foo(@bar = " << @bar.to_s.colorize(:green) << ")"\n  end\nend\n```\n\n## Development\n\nRun specs with:\n\n```\ncrystal spec\n```\n\n## Contributing\n\n1. Fork it (<https://github.com/Sija/debug.cr/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am \'Add some feature\'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [@Sija](https://github.com/Sija) Sijawusz Pur Rahnama - creator, maintainer\n'