b'# Crystagiri\n\nAn HTML parser library for Crystal like the amazing [Nokogiri](https://github.com/sparklemotion/nokogiri) Ruby gem.\n\n> I won\'t pretend that **Crystagiri** does much as **Nokogiri**. All help is welcome! :)\n\n## Installation\n\nAdd this to your application\'s `shard.yml`:\n\n```yaml\ndependencies:\n  crystagiri:\n    github: madeindjs/crystagiri\n```\n\nand then run\n\n```bash\n$ crystal deps\n```\n\n## Usage\n\n```crystal\nrequire "crystagiri"\n```\n\nThen you can simply instantiate  a `Crystagiri::HTML` object from an HTML `String` like this\n\n```crystal\ndoc = Crystagiri::HTML.new "<h1>Crystagiri is awesome!!</h1>"\n```\n\n... or directly load it from a Web URL or a pathname:\n\n```crystal\ndoc = Crystagiri::HTML.from_file "README.md"\ndoc = Crystagiri::HTML.from_url "http://example.com/"\n```\n\n> Also you can specify `follow: true` flag if you want to follow redirect URL\n\nThen you can search all [`XML::Node`](https://crystal-lang.org/api/XML/Node.html)s from the `Crystagiri::HTML` instance. The tags found will be `Crystagiri::Tag` objects with the `.node` property:\n\n* CSS query\n\n```Crystal\nputs doc.css("li > strong.title") { |tag| puts tag.node}\n# => <strong class="title"> .. </strong>\n# => <strong class="title"> .. </strong>\n```\n\n> **Known limitations**: Currently, you can\'t use CSS queries with complex search specifiers like `:nth-child`\n\n* HTML tag\n\n```Crystal\ndoc.where_tag("h2") { |tag| puts tag.content }\n# => Development\n# => Contributing\n```\n\n* HTML id\n\n```Crystal\nputs doc.at_id("main-content").tagname\n# => div\n```\n\n* HTML class attribute\n\n```Crystal\ndoc.where_class("summary") { |tag| puts tag.node }\n# => <div class="summary"> .. </div>\n# => <div class="summary"> .. </div>\n# => <div class="summary"> .. </div>\n```\n\n## Benchmark\n\nI know you love benchmarks between **Ruby** & **Crystal**, so here\'s one:\n\n```ruby\nrequire "nokogiri"\nt1 = Time.now\ndoc = Nokogiri::HTML File.read("spec/fixture/HTML.html")\n1..100000.times do\n  doc.at_css("h1")\n  doc.css(".step-title"){ |tag| tag }\nend\nputs "executed in #{Time.now - t1} milliseconds"\n```\n\n> executed in 00:00:11.10 seconds with Ruby 2.6.0 with RVM on old Mac\n\n```crystal\nrequire "crystagiri"\nt = Time.now\ndoc = Crystagiri::HTML.from_file "./spec/fixture/HTML.html"\n1..100000.times do\n  doc.at_css("h1")\n  doc.css(".step-title") { |tag| tag }\nend\nputs "executed in #{Time.now - t} milliseconds"\n```\n\n> executed in 00:00:03.09 seconds on Crystal 0.27.2 on LLVM 6.0.1 with release flag\n\nCrystagiri is more than **two time faster** than Nokogiri!!\n\n\n## Development\n\nClone this repository and navigate to it:\n\n```bash\n$ git clone https://github.com/madeindjs/crystagiri.git\n$ cd crystagiri\n```\n\nYou can generate all documentation with\n\n```bash\n$ crystal doc\n```\n\nAnd run **spec** tests to ensure everything works correctly\n\n```bash\n$ crystal spec\n```\n\n\n## Contributing\n\n1. Fork it ( https://github.com/madeindjs/crystagiri/fork )\n2. Create your feature branch `git checkout -b my-new-feature`\n3. Commit your changes `git commit -am "Add some feature"`\n4. Push to the branch `git push origin my-new-feature`\n5. Create a new Pull Request\n\n## Contributors\n\nSee the [list on Github](https://github.com/madeindjs/Crystagiri/graphs/contributors)\n'