b'![alt text](https://github.com/iGenius-Srl/IGColorPicker/blob/master/Resources/Logo.png "IGColorPicker")\n\n<p align="center">\n<img src="https://img.shields.io/badge/language-swift%204-orange.svg" alt="Language: Swift 4">\n<img src="https://img.shields.io/badge/license-MIT-000000.svg" alt="License: MIT">\n<img src="https://img.shields.io/badge/platform-iOS-blue.svg" alt="Platform: iOS">\n</p>\n\nIGColorPicker is a fantastic color picker \xf0\x9f\x8e\xa8 written in Swift. Developers can use our color picker just like we do in [crystal.io](https://crystal.io) or they can customize it with all the available features.\n\n![alt text](https://github.com/iGenius-Srl/IGColorPicker/blob/master/Resources/wall-examples.png "Examples")\n\n## Table of Contents\n* [**Documentation**](#documentation)\n  * [Colors](#colors)\n  * [Style](#style)\n  * [Other features](#other-features)\n* [**Installation**](#installation)\n  * [Example](#example)\n* [**Getting Started**](#getting-started)\n  * [ColorPickerView](#colorpickerview)\n  * [Delegate](#delegate)\n  * [Layout](#layout)\n* [**Project Details**](#project-details)\n  * [Requirements](#requirements)\n  * [Contributing](#contributing)\n  * [Author](#author)\n  * [License](#license)\n\n## Documentation\n### Colors\nThe color picker comes with our set of colors:\n\n![alt text](https://github.com/iGenius-Srl/IGColorPicker/blob/master/Resources/Palette.png "Color Palette")\n\nBut if you don\'t like them, you are free to use your own colors \xf0\x9f\x96\x8d:\n```swift\n\ncolorPickerView.colors = [UIColor.red, UIColor.yellow, UIColor.green, UIColor.black]\n\n```\n\n### Style\n* **style** ```enum```: look and feel of color picker cells\n  * **circle**\n\n    ![alt text](https://github.com/iGenius-Srl/IGColorPicker/blob/master/Resources/Circle.png "Circle style")\n\n  * **square**\n\n    ![alt text](https://github.com/iGenius-Srl/IGColorPicker/blob/master/Resources/Square.png "Square style")\n\n* **selectionStyle** ```enum```: style applied when a color is selected\n  * **check**\n\n    ![alt text](https://github.com/iGenius-Srl/IGColorPicker/blob/master/Resources/Check.png "Check selection style")\n\n  * **none**\n\n    ![alt text](https://github.com/iGenius-Srl/IGColorPicker/blob/master/Resources/None.png "None selection style")\n\n### Other features\n* **preselectedIndex** ```Int?```: the index of the preselected color in the color picker\n\n* **isSelectedColorTappable** ```Bool```: if true, the selected color can be deselected by a tap\n\n* **scrollToPreselectedIndex** ```Bool```: if true, the preselectedIndex is showed in the center of the color picker\n\n\n## Installation\n\nIGColorPicker is available through [CocoaPods](http://cocoapods.org). To install\nit, simply add the following line to your `Podfile`:\n\n```ruby\npod \'IGColorPicker\'\n```\n### Example\n\nTo run the example project, clone the repo, and run `pod install` from the Example directory first.\n\n## Getting Started\n### ColorPickerView\n\n`ColorPickerView` is just a class that inheritance from `UIView`, so you can both use a storyboard or you can create the color picker programmatically:\n\n#### Storyboard\n* Add a `UIView` to the storyboard. Go to the **Identity inspector** and in set its class to `ColorPickerView`.\n* Just drag and drop the view in the correct class  \xf0\x9f\xa4\x99\xf0\x9f\x8f\xbb\n\n#### Programmatically\nJust initialize the color picker like one would initialize a `UIView`, and add it as a subview to your view hierarchy.\n\n```swift\nimport IGColorPicker\n\nclass ViewController {\n  var colorPickerView: ColorPickerView!\n\n  override func viewDidLoad() {\n    super.viewDidLoad()\n\n    colorPickerView = ColorPickerView(frame: CGRect(x: 0.0, y: 0.0, width: widthSize, height: heightSize))\n    view.addSubview(colorPickerView)\n  }\n\n}\n\n```\n\n### Delegate\n`ColorPickerViewDelegate` is the delegate protocol that recognizes the tap gesture on a color. This is an option delegate, but if you need to know when the user selects a color you should implement it.\n\n```swift\n\n// Set the delegate \xf0\x9f\x99\x8b\xf0\x9f\x8f\xbb\xe2\x80\x8d\xe2\x99\x82\xef\xb8\x8f\ncolorPickerView.delegate = self\n\n// MARK: - ColorPickerViewDelegate\nextension ViewController: ColorPickerViewDelegate {\n\n  func colorPickerView(_ colorPickerView: ColorPickerView, didSelectItemAt indexPath: IndexPath) {\n    // A color has been selected\n  }\n\n  // This is an optional method\n  func colorPickerView(_ colorPickerView: ColorPickerView, didDeselectItemAt indexPath: IndexPath) {\n    // A color has been deselected\n  }\n\n}\n\n```\n\n### Layout\n\nEvery developer can customize the color picker layout in the way to fit with their design. To do that you have to implement our layout delegate `ColorPickerViewDelegateFlowLayout`\n\n```swift\n// Set the delegate \xf0\x9f\x99\x8b\xf0\x9f\x8f\xbb\xe2\x80\x8d\xe2\x99\x82\xef\xb8\x8f\ncolorPickerView.layoutDelegate = self\n\n// MARK: - ColorPickerViewDelegateFlowLayout\nextension ViewController: ColorPickerViewDelegateFlowLayout {\n\n  // ------------------------------------------------------------------\n  // All these methods are optionals, your are not to implement them \xf0\x9f\x96\x96\xf0\x9f\x8f\xbb\n  // ------------------------------------------------------------------\n\n  func colorPickerView(_ colorPickerView: ColorPickerView, sizeForItemAt indexPath: IndexPath) -> CGSize {\n    // The size for each cell\n    // \xf0\x9f\x91\x89\xf0\x9f\x8f\xbb WIDTH AND HEIGHT MUST BE EQUALS!\n  }\n\n  func colorPickerView(_ colorPickerView: ColorPickerView, minimumLineSpacingForSectionAt section: Int) -> CGFloat {\n    // Space between cells\n  }\n\n  func colorPickerView(_ colorPickerView: ColorPickerView, minimumInteritemSpacingForSectionAt section: Int) -> CGFloat {\n    // Space between rows\n  }\n\n  func colorPickerView(_ colorPickerView: ColorPickerView, insetForSectionAt section: Int) -> UIEdgeInsets {\n    // Inset used aroud the view\n  }\n\n}\n\n```\n\n## Project Details\n\n### Requirements\n* Swift 4.1\n* Xcode 9.0+\n* iOS 8.3+\n\n### Contributing\nFeel free to collaborate with ideas \xf0\x9f\x92\xad , issues \xe2\x81\x89\xef\xb8\x8f and/or pull requests \xf0\x9f\x94\x83.\n\nHere is a list of ToDo about bug fix and new features you can work on:\n* Custom check size\n* Support to custom view in `ColorPickerViewSelectStyle`\n* Support custom style in `ColorPickerViewStyle`\n* Substitute `M13Checkbox` with another framework. Or just create a custom checkbox with animation\n\n**P.S.** If you use IGColorPicker in your app we would love to hear about it! \xf0\x9f\x98\x89\n\n### License\n\n> Copyright (c) 2018 iGenius Srl\n\n> Permission is hereby granted, free of charge, to any person obtaining a copy\n> of this software and associated documentation files (the "Software"), to deal\n> in the Software without restriction, including without limitation the rights\n> to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n> copies of the Software, and to permit persons to whom the Software is\n> furnished to do so, subject to the following conditions:\n\n> The above copyright notice and this permission notice shall be included in\n> all copies or substantial portions of the Software.\n\n> THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n> IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n> FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n> AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n> LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n> OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n> THE SOFTWARE.\n'