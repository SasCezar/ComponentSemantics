b'## Commander\n\n[![Build Status](https://travis-ci.org/mrrooijen/commander.svg)](https://travis-ci.org/mrrooijen/commander)\n\nCommand-line interface builder for the [Crystal] programming language.\n\n\n#### Installation\n\nAdd this to your application\'s `shard.yml`:\n\n```yaml\ndependencies:\n  commander:\n    github: mrrooijen/commander\n    version: ~> 0.3.4\n```\n\n\n#### Usage\n\nPractically everything you need to know in one example:\n\n```crystal\nrequire "commander"\n\ncli = Commander::Command.new do |cmd|\n  cmd.use = "my_program"\n  cmd.long = "my program\'s (long) description."\n\n  cmd.flags.add do |flag|\n    flag.name = "env"\n    flag.short = "-e"\n    flag.long = "--env"\n    flag.default = "development"\n    flag.description = "The environment to run in."\n  end\n\n  cmd.flags.add do |flag|\n    flag.name = "port"\n    flag.short = "-p"\n    flag.long = "--port"\n    flag.default = 8080\n    flag.description = "The port to bind to."\n  end\n\n  cmd.flags.add do |flag|\n    flag.name = "timeout"\n    flag.short = "-t"\n    flag.long = "--timeout"\n    flag.default = 29.5\n    flag.description = "The wait time before dropping the connection."\n  end\n\n  cmd.flags.add do |flag|\n    flag.name = "verbose"\n    flag.short = "-v"\n    flag.long = "--verbose"\n    flag.default = false\n    flag.description = "Enable more verbose logging."\n    flag.persistent = true\n  end\n\n  cmd.run do |options, arguments|\n    options.string["env"]    # => "development"\n    options.int["port"]      # => 8080\n    options.float["timeout"] # => 29.5\n    options.bool["verbose"]  # => false\n    arguments                # => Array(String)\n    puts cmd.help            # => Render help screen\n  end\n\n  cmd.commands.add do |cmd|\n    cmd.use = "kill <pid>"\n    cmd.short = "Kills server by pid."\n    cmd.long = cmd.short\n    cmd.run do |options, arguments|\n      arguments # => ["62719"]\n    end\n  end\nend\n\nCommander.run(cli, ARGV)\n```\n\nHere\'s what the help page looks like for this configuration:\n\n```\n$ my_program help\n\nmy_program - my program\'s (long) description.\n\nUsage:\n  my_program [command] [flags] [arguments]\n\nCommands:\n  help [command]  # Help about any command.\n  kill <pid>      # Kills server by pid.\n\nFlags:\n  -e, --env      # The environment to run in. default: \'development\'.\n  -h, --help     # Help for this command. default: \'false\'.\n  -p, --port     # The port to bind to. default: \'8080\'.\n  -t, --timeout  # The wait time before dropping the connection. default: \'29.5\'.\n  -v, --verbose  # Enable more verbose logging. default: \'false\'.\n```\n\nThis is how you override the default options and pass in additional arguments:\n\n```\n$ my_program -ve production --port 8443 --timeout=25 arg1 arg2 arg3\n```\n\n```crystal\ncmd.run do |options, arguments|\n  options.string["env"]    # => "production"\n  options.int["port"]      # => 8443\n  options.float["timeout"] # => 25.0\n  options.bool["verbose"]  # => true\n  arguments                # => ["arg1", "arg2", "arg3"]\nend\n```\n\n\n#### Features\n\n- Define commands recursively.\n- Define flags on a per-command basis.\n  - Short argument flags (`-p 8080`)\n  - Short boolean flags (`-f`)\n  - Multi-short flags (`-fp 8080`, equivalent to `-f -p 8080`)\n  - Long argument flags (`--port 8080`, `--port=8080`)\n  - Long boolean flags (`--force`)\n  - Share flags with multiple commands (`verbose = Commander::Flag.new`)\n  - Persistent flags for recursively inheriting flags from a parent command (`flag.persistent = true`)\n  - Global flags by defining persistent flags on the root command (`flag.persistent = true`)\n  - Default values for each flag\n  - Automatically validates, parses and casts to the correct type\n  - Automatically passes all parsed `options` to `cmd.run`\n- Receive additional cli arguments per command (`arguments` in `cmd.run`)\n- Automatically generates a help page for each command\n  - Generates a `help` command for each command to access the help page\n  - Generates `-h, --help` flags for each command to access to help page\n- Provide `Commander.run(cli, ARGV)` to handle end-user input exceptions.\n\n\n#### File Structure and Testing\n\nRefer to [this answer](https://github.com/mrrooijen/commander/issues/13#issuecomment-320645899).\n\n\n#### Contributing\n\n1. Fork it ( https://github.com/mrrooijen/commander/fork )\n2. Create your feature branch (git checkout -b my-new-feature)\n3. Commit your changes (git commit -am \'Add some feature\')\n4. Push to the branch (git push origin my-new-feature)\n5. Create a new Pull Request\n\n[Crystal]: http://crystal-lang.org\n'