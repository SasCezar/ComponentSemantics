b'<img src="https://cloud.githubusercontent.com/assets/3483230/20856901/fad1885e-b95f-11e6-848d-c46e33d8290e.png" width="100px"/>\n\n# Topaz [![Build Status](https://travis-ci.org/topaz-crystal/topaz.svg?branch=master)](https://travis-ci.org/topaz-crystal/topaz) [![GitHub release](https://img.shields.io/github/release/topaz-crystal/topaz.svg)]()\n[![Dependency Status](https://shards.rocks/badge/github/topaz-crystal/topaz/status.svg)](https://shards.rocks/github/topaz-crystal/topaz)\n[![devDependency Status](https://shards.rocks/badge/github/topaz-crystal/topaz/dev_status.svg)](https://shards.rocks/github/topaz-crystal/topaz)\n\nTopaz is a simple and useful db wrapper for crystal lang.\nTopaz is inspired by active record design pattern, but not fully implemented.\nSee [sample code](https://github.com/topaz-crystal/topaz/blob/master/samples) for detail.\n[Here](https://github.com/topaz-crystal/topaz-kemal-sample) is another sample that shows how Topaz works in Kemal.  \nDepends on [crystal-lang/crystal-mysql](https://github.com/crystal-lang/crystal-mysql), [crystal-lang/crystal-sqlite3](https://github.com/crystal-lang/crystal-sqlite3) and [crystal-pg](https://github.com/will/crystal-pg)\n\n## Usage\n\n**1. Setup DB**\n```crystal\nTopaz::Db.setup("mysql://root@localhost/topaz") # For MySQL\nTopaz::Db.setup("postgres://root@localhost/topaz") # For PostgreSQL\nTopaz::Db.setup("sqlite3://./db/data.db") # For SQLite3\n```\n\n**2. Define models**\n```crystal\nclass SampleModel < Topaz::Model\n  columns(\n    name: String\n  )\nend\n\n# You can drop or create a table\nSampleModel.create_table\nSampleModel.drop_table\n```\n\n**3. Create, find, update and delete models**\n```crystal\ns = SampleModel.create("Sample Name")\n\nSampleModel.find(1).name\n# => "Sample Name"\nSampleModel.where("name = \'Sample Name\'").size\n# => 1\n```\nSee [sample code](https://github.com/topaz-crystal/topaz/blob/master/samples/model.cr) for detail.\n\n**4. Define associations between models**\n```crystal\nrequire "topaz"\n\nclass SampleParent < Topaz::Model\n  columns # Empty columns\n  has_many(children: {model: SampleChild, key: parent_id})\nend\n\nclass SampleChild < Topaz::Model\n  columns( # Define foreign key\n    parent_id: Int32\n  )\n  belongs_to(parent: {model: SampleParent, key: parent_id})\nend\n\np = SampleParent.create\n\nchild1 = SampleChild.create(p.id)\nchild2 = SampleChild.create(p.id)\nchild3 = SampleChild.create(p.id)\n\np.children.size\n# => 3\n\nchild1.parent.id\n# => 1\n```\nSee [sample code](https://github.com/topaz-crystal/topaz/blob/master/samples/association.cr) for detail.  \n\n**Other features**\n* Transaction\n* Table migration\n* `Model#to_json` and `Model#from_json`\n* `created_at` and `updated_at` column\n* Nullable column\n* Column with default value\n* Change id from Int32 to Int64\n\nSee [sample codes](https://github.com/topaz-crystal/topaz/tree/master/samples) for detail.\n\n**Supported data types.**  \nString, Int32, Int64, Float32, Float64\n\n## Development\n\nSetting up PostgreSQL:\n\n```\n$ psql\n  # CREATE USER root WITH CREATEDB;\n  # CREATE DATABASE topaz_test WITH OWNER = root;\n```\n\nSetting up MySQL:\n\n```\n$ mysql -u root\nmysql> create database topaz_test;\n```\n\n## Contributing\n\n1. Fork it ( https://github.com/topaz-crystal/topaz/fork )\n2. Create your feature branch (git checkout -b my-new-feature)\n3. Commit your changes (git commit -am \'Add some feature\')\n4. Push to the branch (git push origin my-new-feature)\n5. Create a new Pull Request\n\n## Contributors\n\n- [tbrand](https://github.com/tbrand) Taichiro Suzuki - creator, maintainer\n'