b'<p align="center">\n  <img src="https://sija.github.io/raven.cr/img/bug-fixing.svg" height="300" alt="Bug fixing illustration" />\n</p>\n\n<h1 align="center">\n  raven.cr \xe2\x80\xa2 the Crystal client for Sentry\n</h1>\n\n<p align="center">\n  <a href="https://travis-ci.org/Sija/raven.cr"><img src="https://travis-ci.org/Sija/raven.cr.svg?branch=master" alt="Build Status" /></a>\n  <a href="https://www.codacy.com/app/Sija/raven.cr"><img src="https://api.codacy.com/project/badge/Grade/32cb8814a14d4a6cbe39d6768142c59b" alt="Codacy Badge" /></a>\n  <a href="https://github.com/Sija/raven.cr/releases"><img src="https://img.shields.io/github/release/Sija/raven.cr.svg" alt="Releases" /></a>\n  <a href="https://github.com/Sija/raven.cr/blob/master/LICENSE"><img src="https://img.shields.io/github/license/Sija/raven.cr.svg" alt="License" /></a>\n  <a href="https://gitter.im/raven-cr/Lobby"><img src="https://img.shields.io/gitter/room/raven-cr/Lobby.svg" alt="Gitter Chat" /></a>\n</p>\n\nAn unofficial Crystal-language client and integration layer for the [Sentry](https://github.com/getsentry/sentry) error reporting API.\n\nBased on fine [raven-ruby](https://github.com/getsentry/raven-ruby) gem\nfrom folks at [@getsentry](https://github.com/getsentry).\n\n### Blog posts\n\n- [Crystal error tracking with Sentry](https://sija.pl/en/notes/crystal-error-tracking-with-sentry)\n- [Sentry error tracking for Kemal](https://sija.pl/en/notes/sentry-error-tracking-for-kemal)\n\n## Features\n\n- [x] Processors (data scrubbers)\n- [x] Interfaces (Message, Exception, Stacktrace, User, HTTP, ...)\n- [x] Contexts (tags, extra, `os`, `runtime`)\n- [x] Breadcrumbs\n- [x] Integrations ([Kemal](https://github.com/kemalcr/kemal), [Amber](https://github.com/amberframework/amber), [Lucky](https://github.com/luckyframework/lucky), [Sidekiq.cr](https://github.com/mperham/sidekiq.cr))\n- [x] Async support\n- [x] User Feedback\n- [x] Crash Handler\n\n## Installation\n\nAdd this to your application\'s `shard.yml`:\n\n```yaml\ndependencies:\n  raven:\n    github: Sija/raven.cr\n```\n\n## Usage\n\n```crystal\nrequire "raven"\n```\n\n### Raven only runs when SENTRY_DSN is set\n\nRaven will capture and send exceptions to the Sentry server whenever its DSN is set.\nThis makes environment-based configuration easy - if you don\'t want to send\nerrors in a certain environment, just don\'t set the DSN in that environment!\n\n```sh\n# Set your SENTRY_DSN environment variable.\nexport SENTRY_DSN=https://public@example.com/project-id\n```\n\n```crystal\n# Or you can configure the client in the code (not recommended - keep your DSN secret!)\nRaven.configure do |config|\n  config.dsn = "https://public@example.com/project-id"\nend\n```\n\n### Raven doesn\'t report some kinds of data by default\n\nIf used with integrations, Raven ignores some exceptions by default - most of\nthese are related to 404s or controller actions not being found.\n\nRaven doesn\'t report `POST`, `PUT`, `PATCH` data or cookies by default.\nIn addition, it will attempt to remove any obviously sensitive data,\nsuch as credit card or Social Security numbers.\nFor more information about how Sentry processes your data, [check out the documentation on the `processors` config setting.](https://docs.sentry.io/clients/ruby/config/)\n\n### Call\n\nRaven supports two methods of capturing exceptions:\n\n```crystal\nRaven.capture do\n  # capture any exceptions which happen during execution of this block\n  1 // 0\nend\n\nbegin\n  1 // 0\nrescue ex : DivisionByZeroError\n  Raven.capture(ex)\nend\n```\n\n### More configuration\n\nYou\'re all set - but there are a few more settings you may want to know about too!\n\n#### DSN\n\nWhile we advise that you set your Sentry DSN through the `SENTRY_DSN` environment\nvariable, there are two other configuration settings for controlling Raven:\n\n```crystal\n# DSN can be configured as a config setting instead.\n# Place in config/initializers or similar.\nRaven.configure do |config|\n  config.dsn = "your_dsn"\nend\n```\n\nAnd, while not necessary if using `SENTRY_DSN`, you can also provide an\n`environments` setting. Raven will only capture events when\n`SENTRY_ENVIRONMENT` matches an environment on the list.\n\n```crystal\nRaven.configure do |config|\n  config.environments = %w(staging production)\nend\n```\n\n#### async\n\nWhen an error or message occurs, the notification is immediately sent to Sentry.\nRaven can be configured to send asynchronously:\n\n```crystal\n# define your own handler\nconfig.async = ->(event : Raven::Event) {\n  spawn { Raven.send_event(event) }\n}\n# or use default implementation based on fibers (i.e. the one above)\nconfig.async = true\n```\n\nIf the `async` callback raises an exception, Raven will attempt to send synchronously.\n\nWe recommend creating a background job, using your background job processor,\nthat will send Sentry notifications in the background.\nRather than enqueuing an entire `Raven::Event` object, we recommend providing\nthe `Hash` representation of an event as a job argument.\n\nHere\xe2\x80\x99s an example for *Sidekiq.cr*:\n\n```crystal\nconfig.async = ->(event : Raven::Event) {\n  # enqueue the job with a hash...\n  SentryJob.async.perform(event.to_hash)\n  # or with JSON string\n  # SentryJob.async.perform(event.to_json)\n}\n\nclass SentryJob\n  include Sidekiq::Worker\n\n  sidekiq_options do |job|\n    job.queue = "sentry"\n    job.retry = true\n  end\n\n  def perform(event : Raven::Event::HashType)\n    Raven.send_event(event)\n  end\nend\n```\n\n#### transport_failure_callback\n\nIf Raven fails to send an event to Sentry for any reason\n(either the Sentry server has returned a 4XX or 5XX response),\nthis `Proc` will be called.\n\n```crystal\nconfig.transport_failure_callback = ->(event : Raven::Event::HashType) {\n  AdminMailer.async.perform("Oh god, it\'s on fire!", event)\n}\n```\n\n#### Context\n\nMuch of the usefulness of Sentry comes from additional context data with the events.\nRaven makes this very convenient by providing methods to set context data that\nis then submitted automatically with all events.\n\nThere are three primary methods for providing request context:\n\n```crystal\n# bind the logged in user\nRaven.user_context email: "foo@example.com"\n\n# tag the request with something interesting\nRaven.tags_context interesting: "yes"\n\n# provide a bit of additional context\nRaven.extra_context happiness: "very"\n```\n\nFor more information, see [Context](https://docs.sentry.io/clients/ruby/context/).\n\n## Crash Handler\n\nSince Crystal doesn\'t provide native handlers for unhandled exceptions\nand segfaults, *raven.cr* introduces its own crash handler compiled as\nexternal binary.\n\n### Setup\n\nThe easiest way of using it is by adding the appropriate entry to the project\'s `shard.yml`:\n\n```yaml\ntargets:\n  # other target definitions if any...\n\n  sentry.crash_handler:\n    main: lib/raven/src/crash_handler.cr\n```\n\nWith the above entry defined in `targets`, running `shards build` should result in\nbinary built in `bin/sentry.crash_handler`.\n\n__NOTE__: While building you might specify `SENTRY_DSN` env variable, which will be\ncompiled into the binary (as plain-text) and used by the handler.\n\n```sh\nSENTRY_DSN=<your_dsn> shards build sentry.crash_handler\n```\n\nPass `--release` flag to disable debug messages.\n\n### Usage\n\nYou need to run your app with previously built `bin/sentry.crash_handler` in\nfront.\n\n```sh\nbin/sentry.crash_handler bin/your_app --some arguments --passed to your program\n```\n\nAs one would expect, `STDIN` is passed to the original process, while\n`STDOUT` and `STDERR` are piped back from it.\n\n__NOTE__: You can always pass `SENTRY_DSN` env variable during execution\nin case you didn\'t do it while building the wrapper.\n\n## More Information\n\n- [Documentation](https://docs.sentry.io/clients/ruby)\n- [Bug Tracker](https://github.com/Sija/raven.cr/issues)\n- [Code Repository](https://github.com/Sija/raven.cr)\n\n## Contributing\n\n1. [Fork it](https://github.com/Sija/raven.cr/fork)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am \'Add some feature\'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new [Pull Request](https://github.com/Sija/raven.cr/pulls)\n\n## Contributors\n\n- [@Sija](https://github.com/Sija) Sijawusz Pur Rahnama - creator, maintainer\n'