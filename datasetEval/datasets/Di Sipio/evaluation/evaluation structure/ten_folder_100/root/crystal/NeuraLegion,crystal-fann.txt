b"# crystal-fann\n\n[![Join the chat at https://gitter.im/crystal-fann/Lobby](https://badges.gitter.im/crystal-fann/Lobby.svg)](https://gitter.im/crystal-fann/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n[![Build Status](https://travis-ci.org/NeuraLegion/crystal-fann.svg?branch=master)](https://travis-ci.org/NeuraLegion/crystal-fann)\n\nCrystal bindings for the FANN C lib\n\n## Installation\n\nAdd this to your application's `shard.yml`:\n\n```yaml\ndependencies:\n  crystal-fann:\n    github: NeuraLegion/crystal-fann\n```\n\n## Usage\n\nLook at the spec for most functions\n\n```crystal\nann = Fann::Network::Standard.new(2, [2], 1)\nann.randomize_weights(0.0, 1.0)\n3000.times do\n  ann.train_single([1.0, 0.0], [0.5])\nend\nresult = ann.run([1.0, 0.0])\n# Remember to close the network when done to free allocated C memory\nann.close\n(result < [0.55] && result > [0.45]).should be_true\n```\n\n```crystal\n# Work on array of test data (batch)\nann = Fann::Network::Standard.new(2, [3], 1)\ninput = [[0.0, 0.0], [0.0, 1.0], [1.0, 0.0], [1.0, 1.0]]\noutput = [[0.0], [1.0], [1.0], [0.0]]\ntrain_data = Fann::TrainData.new(input, output)\ndata = train_data.train_data\nann.randomize_weights(0.0, 1.0)\nif data\n  ann.train_batch(data, {:max_runs => 8000, :desired_mse => 0.001, :log_each => 1000})\nend\nresult = ann.run([1.0, 1.0])\nann.close\n(result < [0.15]).should be_true\n```\n\n```crystal\n# Work on array of test data using the Cascade2 algorithm (no hidden layers, net will build it alone)\nann = Fann::Network::Cascade.new(2, 1)\ninput = [[0.0, 0.0], [0.0, 1.0], [1.0, 0.0], [1.0, 1.0]]\noutput = [[0.0], [1.0], [1.0], [0.0]]\ntrain_data = Fann::TrainData.new(input, output)\ndata = train_data.train_data\nann.train_algorithm(LibFANN::TrainEnum::TrainRprop)\nann.randomize_weights(0.0, 1.0)\nif data\n  ann.train_batch(data, {:max_neurons => 500, :desired_mse => 0.001, :log_each => 10})\nend\nresult = ann.run([1.0, 1.0])\nann.close\n(result < [0.1]).should be_true\n```\n\n## Development\nAll C lib docs can be found here -> http://libfann.github.io/fann/docs/files/fann-h.html  \n\n- [x] Add TrainData class  \n- [x] Add network call method to train on train data  \n- [x] Add binding to the 'Parallel' binding to work on multi CPU at same time  \n- [ ] Clean unneeded bindings in the LibFANN binding  \n- [ ] Add specific Exceptions  \n- [ ] Add binding and checks for lib errors  \n\nI guess more stuff will be added once more people will use it.  \n\n## Contributing\n\n1. Fork it ( https://github.com/NeuraLegion/crystal-fann/fork )\n2. Create your feature branch (git checkout -b my-new-feature)\n3. Commit your changes (git commit -am 'Add some feature')\n4. Push to the branch (git push origin my-new-feature)\n5. Create a new Pull Request\n\n## Contributors\n\n- [bararchy](https://github.com/bararchy) - creator, maintainer\n- [libfann](https://github.com/libfann/fann) - c lib creators\n"