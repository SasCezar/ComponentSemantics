b'<img src="https://cloud.githubusercontent.com/assets/3483230/25668495/c3c28574-3061-11e7-9dbd-969d95eb4bf8.png" width="200" />\n\n[![Build Status](https://travis-ci.org/tbrand/router.cr.svg?branch=master)](https://travis-ci.org/tbrand/router.cr)\n[![GitHub tag](https://img.shields.io/github/tag/tbrand/router.cr.svg)](https://github.com/tbrand/router.cr/tags)\n\n---\n\nThe default web server of the Crystal is quite good :smile: but it weak at routing :cry:.  \nKemal or other web frameworks written in Crystal are awesome :smile:, but it\'s too fat for some purpose :cry:.\n\n**router.cr** is a **minimum** but **High Performance** middleware for Crystal web server.  \nSee the amazing performance of **router.cr** [here](https://github.com/tbrand/which_is_the_fastest).:rocket:\n\n## Installation\n\nAdd this to your application\'s `shard.yml`:\n\n```yaml\ndependencies:\n  router:\n    github: tbrand/router.cr\n```\n\n## Usage\n\n### Basic usage\n\n```crystal\nrequire "router"\n```\n\nInclude `Router` to utilize **router.cr**.\n```crystal\nclass WebServer\n  include Router\nend\n```\n\nDefine a method to draw all routes for your web server.\n```crystal\nclass WebServer\n  include Router\n  \n  def draw_routes\n    # Drawing routes HERE!\n  end\nend\n```\n\nIn that method, call HTTP method name (downcase) like `get` or `post` with PATH and BLOCK where\n - PATH  : String\n - BLOCK : block of HTTP::Server::Context, Hash(String, String) -> HTTP::Server::Context\n```crystal\nclass WebServer\n  include Router\n\n  def draw_routes\n    get "/" do |context, params|\n      context.response.print "Hello router.cr!"\n      context\n    end\n  end\nend\n```\n\nHere we\'ve defined a GET route at root path (/) that just print out "Hello router.cr" when we get access.\nTo activate (run) the route, just define run methods for your server with route_handler\n```crystal\nclass WebServer\n  include Router\n  \n  def draw_routes\n    get "/" do |context, params|\n      context.response.print "Hello router.cr!"\n      context\n    end\n  end\n  \n  def run\n    server = HTTP::Server.new(route_handler)\n    server.bind_tcp 8080\n    server.listen\n  end\nend\n```\nHere route_handler is getter defined in Router. So you can call `route_handler` at anywhere in WebServer instance.\n\nFinally, run your server.\n```crystal\nweb_server = WebServer.new\nweb_server.draw_routes\nweb_server.run\n```\n\nSee [sample](https://github.com/tbrand/router.cr/blob/master/sample/sample.cr) and [tips]([sample](https://github.com/tbrand/router.cr/blob/master/sample/tips.cr)) for details.\n\n### Path parameters\n\n`params` is a Hash(String, String) that is used when you define a path parameters such as `/user/:id` (`:id` is a parameters). Here is an example.\n```crystal\nclass WebServer\n  include Router\n\n  def draw_routes\n    get "/user/:id" do |context, params|\n      context.response.print params["id"] # get :id in url from params\n      context\n    end\n  end\nend\n```\n\nSee [sample](https://github.com/tbrand/router.cr/blob/master/sample/sample.cr) and [tips]([sample](https://github.com/tbrand/router.cr/blob/master/sample/tips.cr)) for details.\n\n## Contributing\n\n1. Fork it ( https://github.com/tbrand/router.cr/fork )\n2. Create your feature branch (git checkout -b my-new-feature)\n3. Commit your changes (git commit -am \'Add some feature\')\n4. Push to the branch (git push origin my-new-feature)\n5. Create a new Pull Request\n\n## Contributors\n\n- [tbrand](https://github.com/tbrand) Taichiro Suzuki - creator, maintainer\n'