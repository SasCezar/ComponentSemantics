b'# awscr-s3\n[![Build Status](https://travis-ci.org/taylorfinnell/awscr-s3.svg?branch=master)](https://travis-ci.org/taylorfinnell/awscr-s3)\n\nA Crystal shard for S3 and compatible services.\n\n## Installation\n\nAdd this to your application\'s `shard.yml`:\n\n```yaml\ndependencies:\n  awscr-s3:\n    github: taylorfinnell/awscr-s3\n```\n\n## Examples\n\n[Examples](https://github.com/taylorfinnell/awscr-s3/tree/master/examples)\n\n## Documentation\n\n[Documentation](https://taylorfinnell.github.io/awscr-s3/)\n\n## Usage\n\n```crystal\nrequire "awscr-s3"\n```\n\n## **Creating a Client**\n\n```crystal\nclient = Awscr::S3::Client.new("us-east1", "key", "secret")\n```\n\nFor S3 compatible services, like DigitalOcean Spaces or Minio, you\'ll need to set a custom endpoint:\n\n```crystal\nclient = Awscr::S3::Client.new("nyc3", "key", "secret", endpoint: "https://nyc3.digitaloceanspaces.com")\n```\n\nIf you wish you wish to you version 2 request signing you may specify the signer\n\n```crystal\nclient = Awscr::S3::Client.new("us-east1", "key", "secret", signer: :v2)\n```\n\n## **List Buckets**\n\n```crystal\nresp = client.list_buckets\nresp.buckets # => ["bucket1", "bucket2"]\n```\n\n## **Delete a bucket**\n\n```crystal\nclient = Client.new("region", "key", "secret")\nresp = client.delete_bucket("test")\nresp # => true\n```\n\n## Create a bucket\n\n```crystal\nclient = Client.new("region", "key", "secret")\nresp = client.put_bucket("test")\nresp # => true\n```\n\n## **Put Object**\n\n```crystal\nresp = client.put_object("bucket_name", "object_key", "myobjectbody")\nresp.etag # => ...\n```\n\nYou can also pass additional headers (e.g. metadata):\n\n```crystal\nclient.put_object("bucket_name", "object_key", "myobjectbody", {"x-amz-meta-name" => "myobject"})\n```\n\n## **Delete Object**\n\n```crystal\nresp = client.delete_object("bucket_name", "object_key")\nresp # => true\n```\n\n## **Check Bucket Existence**\n\n```crystal\nresp = client.head_bucket("bucket_name")\nresp # => true\n```\n\nRaises an exception if bucket does not exist.\n\n## **Batch Delete Objects**\n\n```crystal\nresp = client.batch_delete("bucket_name", ["key1", "key2"])\nresp.success? # => true\n```\n\n## **Get Object**\n\n```crystal\nresp = client.get_object("bucket_name", "object_key")\nresp.body # => myobjectbody\n```\n\n## **List Objects**\n\n```crystal\nclient.list_objects("bucket_name").each do |resp|\n  p resp.contents.map(&.key)\nend\n```\n\n## **Upload a file**\n\n```crystal\nuploader = Awscr::S3::FileUploader.new(client)\n\nFile.open(File.expand_path("myfile"), "r") do |file|\n  puts uploader.upload("bucket_name", "someobjectkey", file)\nend\n```\n\nYou can also pass additional headers (e.g. metadata):\n\n```crystal\nuploader = Awscr::S3::FileUploader.new(client)\n\nFile.open(File.expand_path("myfile"), "r") do |file|\n  puts uploader.upload("bucket_name", "someobjectkey", file, {"x-amz-meta-name" => "myobject"})\nend\n```\n\n## **Creating a `Presigned::Form`.**\n\n```crystal\nform = Awscr::S3::Presigned::Form.build("us-east-1", "access key", "secret key") do |form|\n  form.expiration(Time.unix(Time.now.to_unix + 1000))\n  form.condition("bucket", "mybucket")\n  form.condition("acl", "public-read")\n  form.condition("key", SecureRandom.uuid)\n  form.condition("Content-Type", "text/plain")\n  form.condition("success_action_status", "201")\nend\n```\n\nYou may use version 2 request signing via\n\n```crystal\nform = Awscr::S3::Presigned::Form.build("us-east-1", "access key", "secret key", signer: :v2) do |form|\n  ...\nend\n```\n\n**Converting the form to raw HTML (for browser uploads, etc).**\n\n```crystal\nputs form.to_html\n```\n\n**Submitting the form.**\n\n```crystal\ndata = IO::Memory.new("Hello, S3!")\nform.submit(data)\n```\n\n## **Creating a `Presigned::Url`.**\n\n```crystal\noptions = Awscr::S3::Presigned::Url::Options.new(\n   aws_access_key: "key",\n   aws_secret_key: "secret",\n   region: "us-east-1",\n   object: "test.txt",\n   bucket: "mybucket",\n   additional_options: {\n  "Content-Type" => "image/png"\n})\n\nurl = Awscr::S3::Presigned::Url.new(options)\np url.for(:put)\n```\n\nYou may use version 2 request signing via\n\n\n```crystal\noptions = Awscr::S3::Presigned::Url::Options.new(\n   aws_access_key: "key",\n   aws_secret_key: "secret",\n   region: "us-east-1",\n   object: "test.txt",\n   bucket: "mybucket",\n   signer: :v2\n)\n```\n'