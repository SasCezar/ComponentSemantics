b"# Table of Contents\n\n* [Scope](#scope)\n  * [Hello World](#hello-world)\n  * [Disclaimer](#disclaimer)\n* [Languages](#languages)\n  * [Ruby](#ruby)\n  * [Python](#python)\n  * [JavaScript](#javascript)\n  * [Dart](#dart)\n  * [Elixir](#elixir)\n  * [Java](#java)\n  * [Crystal](#crystal)\n  * [Nim](#nim)\n  * [GO](#go)\n  * [Rust](#rust)\n* [Tools](#tools)\n  * [Wrk](#wrk)\n  * [Platform](#platform)\n  * [RAM and CPU](#ram-and-cpu)\n* [Benchmarks](#benchmarks)\n  * [Results](#results)\n  * [Puma](#puma)\n  * [Gunicorn with Meinheld](#gunicorn-with-meinheld)\n  * [Node Cluster](#node-cluster)\n  * [Dart HttpServer](#dart-httpserver)\n  * [Plug with Cowboy](#plug-with-cowboy)\n  * [Jetty NIO](#jetty-nio)\n  * [Crystal HTTP](#crystal-http)\n  * [httpbeast](#httpbeast)\n  * [GO ServeMux](#go-servermux)\n  * [Hyper](#hyper)\n\n## Scope\nThe idea behind this repository is to benchmark different languages implementation of HTTP server.\n\n### Hello World\nThe *application* i tested is minimal: the HTTP version of the *Hello World* example.  \nThis approach allows including languages i barely know, since it is pretty easy to find such implementation online.  \nIf you're looking for more complex examples, you will have better luck with the [TechEmpower benchmarks](https://www.techempower.com/benchmarks/).\n\n### Disclaimer\nPlease do take the following numbers with a grain of salt: it is not my intention to promote one language over another basing on micro-benchmarks.  \nIndeed you should never pick a language just basing on its presumed performance.\n\n## Languages\nI have filtered the languages by single runtime (i.e. Java on JVM): this way i can focus on a specific stack, keeping it updated to the last available version/APIs. \nWhere possible i just relied on the standard library, but when it is not production-ready (i.e. Ruby, Python) or where the language footprint is deliberately minimal (i.e. Rust). \n\n### Ruby\n[Ruby](https://www.ruby-lang.org/en/) 2.6.5 is installed via [rbenv](https://github.com/rbenv/rbenv).  \nRuby is a general-purpose, interpreted, dynamic programming language, focused on simplicity and productivity. \n\n### Python\n[Python](https://www.python.org/) 3.8.0 is installed via homebrew.  \nPython is a widely used high-level, general-purpose, interpreted, dynamic programming language.  \n\n### JavaScript\n[Node.js](https://nodejs.org/en/) version 13.0.1 is installed by official OSX package.  \nNode.js is based on the V8 JavaScript engine, optimized by Google and supporting most of the new language's features.   \n\n### Dart\n[Dart](https://www.dartlang.org/) version 2.6.1 is installed via homebrew.  \nDart is a VM based, object-oriented, sound typed language using a C-style syntax that transcompiles optionally into JavaScript.\n\n### Elixir\n[Elixir](http://elixir-lang.org/) 1.9.1 is installed via homebrew.  \nElixir is a purely functional language that runs on the [Erlang](https://www.erlang.org/) VM and is strongly influenced by the Ruby syntax.\n\n### Java\n[Java](https://www.java.com/en/) JDK 13.0.0 is installed by official OSX package.  \nJava is a VM based, statically typed, general-purpose language that is thread safe, object-oriented and, from version 8, supports functional paradigms.\n\n### Crystal\n[Crystal](http://crystal-lang.org/) 0.31.1 is installed via homebrew.  \nCrystal has a syntax very close to Ruby, but brings some desirable features such as statically typing and ahead of time (AOT) compilation.  \n\n### Nim\n[Nim](http://nim-lang.org/) 1.0.0 is installed via homebrew.  \nNim is an AOT, Python inspired, statically typed language that comes with an ambitious compiler aimed to produce code in C, C++, JavaScript or ObjectiveC.\n\n### GO\n[GO](https://golang.org/) language version 1.13.3 is installed by official OSX package.  \nGO is an AOT language that focuses on simplicity and offers a broad standard library with [CSP](https://en.wikipedia.org/wiki/Communicating_sequential_processes) constructs built in.\n\n### Rust\n[Rust](https://www.rust-lang.org/) language version 1.38.0 is installed by official package.  \nRust is an AOT, garbage collector free programming language, preventing segfaults and granting thread safety.\n\n## Tools\n\n### Wrk\nI used [wrk](https://github.com/wg/wrk) as the loading tool.  \nI measured each application server six times, picking the best lap (but for VM based languages demanding longer warm-up).  \n```shell\nwrk -t 4 -c 100 -d30s --timeout 2000 http://0.0.0.0:9292\n```\n\n### Platform\nThese benchmarks are recorded on a MacBook PRO 15 mid 2015 having these specs:\n* macOS Mojave\n* 2.2 GHz Intel Core i7 (4 cores)\n* 16 GB 1600 MHz DDR3\n\n### RAM and CPU\nI measured RAM and CPU consumption by using macOS Activity Monitor dashboard and recording max consumption peak.  \nFor the languages relying on pre-forking parallelism i reported the average consumption by taking a snapshot during the stress period.\n\n## Benchmarks\n\n### Results\n| Language                  | App Server                                        | Requests/sec      | RAM (MB)  | CPU (%)  |\n| :------------------------ | :------------------------------------------------ | ----------------: |---------: |--------: |\n| [Elixir](#elixir)         | [Plug with Cowboy](#plug-with-cowboy)             |         45477.66  |     45.3  |   619.0  |\n| [Dart](#dart)             | [Dart HttpServer](#dart-httpserver)               |         48280.33  |     45.9  |   539.3  |\n| [Ruby](#ruby)             | [Puma](#puma)                                     |         56979.27  |    > 110  |   > 520  |\n| [JavaScript](#javascript) | [Node Cluster](#node-cluster)                     |         80078.68  |    > 150  |   > 300  |\n| [Rust](#rust)             | [Hyper](#hyper)                                   |         97421.94  |      4.5  |   450.0  |\n| [GO](#go)                 | [GO ServeMux](#go-servemux)                       |        106755.60  |      7.3  |   441.5  |\n| [Python](#python)         | [Gunicorn with Meinheld](#gunicorn-with-meinheld) |        110583.42  |     > 40  |   > 380  |\n| [Nim](#nim)               | [httpbeast](#httpbeast)                           |        113488.20  |     24.1  |    99.7  |\n| [Java](#java)             | [Jetty NIO](#jetty-nio)                           |        116388.13  |    233.1  |   436.3  |\n| [Crystal](#crystal)       | [Crystal HTTP](#crystal-http)                     |        120141.48  |      8.4  |   282.3  |\n\n                                                                                                   \n### Puma\nI tested Ruby by using a plain [Rack](http://rack.github.io/) application served by [Puma](http://puma.io).\n\n#### Bootstrap\n```shell\npuma -w 8 -t 2 --preload servers/rack_server.ru\n```\n\n\n### Gunicorn with Meinheld\nI tested Python by using [Gunicorn](http://gunicorn.org/) spawning [Meinheld](http://meinheld.org/) workers with a plain WSGI compliant server.\n\n#### Bootstrap\n```shell\ncd servers\ngunicorn -w 4 -k meinheld.gmeinheld.MeinheldWorker -b :9292 wsgi_server:app\n```\n\n\n### Node Cluster\nI used the cluster module included into Node's standard library.\n\n#### Bootstrap\n```shell\nnode servers/node_server.js\n```\n\n\n### Dart HttpServer\nI used the async HTTP server embedded into the Dart standard library and compiled it with `dart2native` AOT compiler.\n\n#### Bootstrap\n```shell\ndart2native servers/dart_server.dart -k aot\ndartaotruntime servers/dart_server.aot\n```\n\n\n### Plug with Cowboy\nI tested Elixir by using [Plug](https://github.com/elixir-lang/plug) library that provides a [Cowboy](https://github.com/ninenines/cowboy) adapter.\n\n#### Bootstrap\n```shell\ncd servers/plug_server\nMIX_ENV=prod mix compile\nMIX_ENV=prod mix run --no-halt\n```\n\n\n### Jetty NIO\nI tested Java by using [Jetty](http://www.eclipse.org/jetty/) with the non blocking IO (NIO) APIs.  \n\n#### Bootstrap\n```shell\ncd servers/jetty_server\njavac -cp jetty-all-uber.jar HelloWorld.java\njava -server -cp .:jetty-all-uber.jar HelloWorld\n```\n\n\n### Crystal HTTP\nI used Crystal HTTP server standard library, enabling parallelism by using the `preview_mt` flag.  \n\n#### Bootstrap\n```shell\ncrystal build -Dpreview_mt --release servers/crystal_server.cr\n./crystal_server\n```\n\n\n### httpbeast\nTo test Nim i opted for the [httpbeast](https://github.com/dom96/httpbeast) library: an asynchronous server relying on Nim HTTP standard library.\n\n#### Bootstrap\n```shell\nnim c --threads:on servers/httpbeast_server.nim\n./servers/httpbeast_server\n```\n\n\n### GO ServeMux\nI used the [HTTP ServeMux](https://golang.org/pkg/net/http/) GO standard library.\n\n#### Bootstrap\n```shell\ngo run servers/servemux_server.go\n```\n\n\n### Hyper\nI tested Rust by using the [Hyper](https://hyper.rs/), an HTTP implementation based on Tokio.io.\n\n#### Bootstrap\n```shell\ncd servers/hyper_server\ncargo run --release\n```\n"