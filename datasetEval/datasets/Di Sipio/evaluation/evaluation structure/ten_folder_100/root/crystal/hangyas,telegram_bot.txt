b'# TelegramBot\n\n[Telegram Bot API](https://core.telegram.org/bots/api) (3.2) wrapper for Crystal\n\n## Current features\n\napi methods and types:\n- [x] basic message types\n- [x] stickers\n- [x] inline mode\n- [x] payments\n- [x] games\n\n\ngetting updates:\n - [x] long polling\n - [x] webhooks\n\n\nadditional features:\n - [x] white & black lists\n - [x] command handler\n\n## Usage\n\nCreate your bot by inheriting from `TelegramBot::Bot`.\n\n### Commands\n\nDefine which commands your bot handles via the `cmd` method in the `CmdHandler` module. For example, respond `world` to `/hello` and perform simple calculation with `/add`:\n\n```crystal\nrequire "telegram_bot"\n\nclass MyBot < TelegramBot::Bot\n  include TelegramBot::CmdHandler\n\n  def initialize\n    super("MyBot", TOKEN)\n\n    cmd "hello" do |msg|\n      reply msg, "world!"\n    end\n\n    # /add 5 7 => 12\n    cmd "add" do |msg, params|\n      reply msg, "#{params[0].to_i + params[1].to_i}"\n    end\n  end\nend\n\nmy_bot = MyBot.new\nmy_bot.polling\n```\n\n### Custom handlers\n\nOverride any of the following `handle` methods to handle Telegram updates, be it [messages](https://core.telegram.org/bots/api#message), [inline queries](https://core.telegram.org/bots/api#inlinequery), [chosen inline results](https://core.telegram.org/bots/api#choseninlineresult) or [callback queries](https://core.telegram.org/bots/api#callbackquery):\n\n```crystal\ndef handle(message : Message)\n\ndef handle(inline_query : InlineQuery)\n\ndef handle(chosen_inline_result : ChosenInlineResult)\n\ndef handle(callback_query : CallbackQuery)\n\ndef handle_edited(message : Message)\n\ndef handle_channel_post(message : Message)\n\ndef handle_edited_channel_post(message : Message)\n```\n\nFor example, to echo all messages sent to the bot:\n\n```crystal\nclass EchoBot < TelegramBot::Bot\n  def handle(message : Message)\n    if text = message.text\n      reply message, text\n    end\n  end\nend\n\nEchoBot.new.polling\n```\n\nOr to answer inline queries with a list of articles:\n\n```crystal\nclass InlineBot < TelegramBot::Bot\n  def handle(inline_query : TelegramBot::InlineQuery)\n    results = Array(TelegramBot::InlineQueryResult).new\n\n    content = InputTextMessageContent.new "Article details"\n    results << TelegramBot::InlineQueryResultArticle.new("article/1", "My first article", content)\n\n    answer_inline_query(inline_query.id, results)\n  end\nend\n\nInlineBot.new.polling\n```\n\nRemember to [enable inline mode](https://core.telegram.org/bots/api#inline-mode) in BotFather to support inline queries.\n\n### Webhooks\n\nAll the examples above use the [`getUpdates`](https://core.telegram.org/bots/api#getupdates) method, constantly polling Telegram for new updates, by invoking the `polling` method on the bot.\n\nAnother option is to use the [`setWebhook`](https://core.telegram.org/bots/api#setwebhook) method to tell Telegram where to POST any updates for your bot. Note that you __must__ use HTTPS in this endpoint for Telegram to work, and you can use a self-signed certificate, which you can provide as part of the `setWebhook` method:\n\n```crystal\n# Certificate has the contents of the certificate, not the path to it\nbot.set_webhook(url, certificate)\n```\n\nAfter invoking `setWebhook`, have your bot start an HTTPS server with the `serve` command:\n\n```crystal\nbot.serve("0.0.0.0", 443, "path/to/ssl/certificate", "path/to/ssl/key")\n```\n\nIf you run your bot behind a proxy that performs SSL offloading (ie the proxy presents the certificate to Telegram, and then forwards the request to your app using plain HTTP), you may skip the last two parameters, and the bot will listen for HTTP requests instead of HTTPS.\n\nWhen running your bot in `serve` mode, the bot will favour executing any methods by sending a response as part of the Telegram request, rather than executing a new request.\n\n### White/blacklists\n\nHowever it\'s not part of the API you can set black or white lists in the bot\'s constructor to filter your users by username.\n\n`whitelist`: if user is not present on the list (or doesn\'t have username) the message won\'t be handled\n\n`blacklist`: if user is present on the list the message won\'t be handled\n\n\n## Installation\n\nAdd this to your application\'s `shard.yml`:\n\n```yaml\ndependencies:\n  telegram_bot:\n    github: hangyas/telegram_bot\n```\n\n\n## Contributing\n\n__Contributing is very welcomed!__\n\n1. Fork it ( https://github.com/hangyas/TelegramBot/fork )\n2. Create your feature branch (git checkout -b my-new-feature)\n3. Commit your changes (git commit -am \'Add some feature\')\n4. Push to the branch (git push origin my-new-feature)\n5. Create a new Pull Request\n\n## Contributors\n\n- [hangyas](https://github.com/hangyas) Kriszti\xc3\xa1n \xc3\x81d\xc3\xa1m - creator, maintainer\n'