b'# Crystal Bindings to Qt 5 <sup>Beta</sup>\n\nBindings for the Qt5 Framework using [bindgen](https://github.com/Papierkorb/bindgen).\n\n### Platform support\n\n| System            | Status           | Qt version | OOTB?   |\n| ----------------- | ---------------- | ---------- | ------- |\n| ArchLinux         | **Works always** | 5.10       | **YES** |\n| Ubuntu 17.04      | **Works**        | 5.9        | **YES** |\n| Ubuntu 16.04      | **Works**        | 5.5        | **YES** |\n| MacOS             | Help wanted      | ?          | ?       |\n| Windows           | Help wanted      | ?          | ?       |\n| Other systems     | Help wanted      | ?          | ?       |\n\n**Ready-to-use Qt versions:** 5.5 to 5.10\n\n## Project Goals\n\n* **Just Works\xe2\x84\xa2** - Drop the dependency into a project, and use it.\n* Providing an API that feels native to Crystal\n* Focus on the GUI components (That is, `QtCore`, `QtGui`, `QtWidgets`)\n\n## Usage\n\nAdd this to your application\'s `shard.yml`:\n\n```yaml\ndependencies:\n  qt5:\n    github: Papierkorb/qt5.cr\n    branch: master-ready-to-use\n```\n\nYour users will **require the Qt5 libraries** on their system.\n\n### Additional development dependencies\n\nUsing your systems package manager:\n\n* **ArchLinux** `pacman -S qt5-base`\n* **Debian** `apt-get install qtbase5-dev`\n* **Ubuntu** `apt-get install qtbase5-dev`\n\n### Sample code\n\nHave a look in [samples/](https://github.com/Papierkorb/qt5.cr/tree/master/samples)!\n\nA short **Hello World** snippet looks like this:\n\n```crystal\nrequire "qt5" # Require it!\n\nqApp = Qt::Application.new # Create the application\n\n# Display something on the screen\nlabel = Qt::Label.new "Hello from Crystal/Qt!"\nlabel.show\n\nQt::Application.exec # And run it!\n```\n\n![hello-qt](https://raw.githubusercontent.com/Papierkorb/qt5.cr/master/images/hello-qt.png)\n\n### A note on Qt\'s license\n\nA common misconception is that you have to pay for Qt to use it in closed-source\napplications.\n\nThis project assumes you\'ll link to Qt dynamically.  In this case, you can use\n**Qt free of charge** including for **closed-source, commercial applications**\nunder the terms of the **LGPL**.\n\nYou can build closed-source applications using Crystal, this shard, and Qt\n**for free**.\n\n**Note**: This section is to combat this misconception, the authors of `qt5.cr`\nare in no way responsible to check if the same terms apply **in your jurisdiction**.\n\n## Generating the bindings\n\nIf you want to work on `qt5.cr` itself, or have a custom build of Qt you want to\nuse, you\'ll have to generate the bindings yourself.\n\nThese steps can be followed from a project using `qt5.cr`, or from within\n`qt5.cr` itself.  For the latter, just check out the `master` branch instead\nof changing a `shard.yml`.\n\n**Important**: For this you\'ll also have to meet the dependencies of bindgen.\n\n### Naming scheme\n\nAs `qt5.cr` supports many different versions of Qt on different platforms,\ngenerated bindings follow a naming scheme.  The scheme is as follows:\n\n* `KERNEL-LIB_C-ARCH-qtVERSION`, e.g. `linux-gnu-x86_64-qt5.10`\n* `KERNEL` is the OS kernel, e.g. `linux`, `darwin`, `windows`\n* `LIB_C` is the lib C name, e.g. `gnu`, `musl`, `win32`\n* `ARCH` is the architecture, e.g. `i686`, `x86_64`, `arm`\n* `VERSION` is the Qt version, e.g. `5.5`, `5.6`, ...\n\nThe naming scheme is not strictly enforced.  However, it should always end with\n`-qtVERSION`!\n\n### Generating all binding versions\n\nThe `master-ready-to-use` branch is built using this method:\n\n1. Change into the `qt5.cr` directory\n2. If you want to change which bindings to generate, edit `support/generate_bindings.cr`\n3. Run `crystal support/generate_bindings.cr`\n\nThe script will automatically download, unpack, build and generate all\nconfigured versions of Qt.  It\'ll store the Qt5 versions in a directory called\n`download_cache/`.  Subsequent invocations of that script will use these cached\nassets.  **The first run may take a long time**.\n\n### Generating a specific binding version\n\n1. Use the `master` branch of `qt5.cr` in your `shard.yml`\n2. Run `crystal deps` to download dependencies\n3. Decide which version of Qt to use, and build the scheme (See above)\n4. Export the binding scheme: `export BINDING_PLATFORM=linux-gnu-x86_64-qt5.10`\n5. If you\'re not using your systems Qt: `export QMAKE=/path/to/qmake`\n6. Run bindgen: `lib/bindgen/tool.sh qt.yml --stats`\n7. Verify: `crystal spec`\n\n## Future things to do\n\n* Forwarding `qHash()` of wrapped types (to `Object#hash`)\n* Integration with **LibEvent**: Right now, Qt blocks the whole thread.\n* The rest of the billion Qt classes of interest\n* Everything in the **to be done** category\n* Integration for the `Qt Designer` UI designer\n* Integration for `Qt Linguist`\n  * Localization/Translation for your applications!\n* UI test library, with adapter for `spec`\n  * Also, actual tests - Let\'s catch whacko bugs right in the CI!\n* Automated copy (and adaption) of the Qt documentation, for easy Crystal-specific docs\n  * The Qt Docs license should allow this if done correctly\n\n## Contributing\n\n1. Talk to `Papierkorb` in `#crystal-lang` about what you\'re gonna do.\n2. You got the go-ahead?  The project\'s in an early state: Things may change without notice under you.\n3. Then do the rest, PR and all.  You know the drill.\n\n## Licenses\n\nThe Qt bindings, including the generated and manually-written parts, are subject\nto the MPL-2 license.  You can find a copy attached of the full license text in\nthe `LICENSE` file.\n\nThis project claims no copyright on the `Qt framework` or of any of its\ntrademarks, source, or any other assets.\n\n**Questions?** Contact [Papierkorb](https://github.com/Papierkorb).\n\n## Contributors\n\n- [Papierkorb](https://github.com/Papierkorb) Stefan Merettig - creator, maintainer\n'