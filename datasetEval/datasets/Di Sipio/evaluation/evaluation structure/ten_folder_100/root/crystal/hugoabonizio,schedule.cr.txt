b'# Schedule [![Build Status](https://travis-ci.org/hugoabonizio/schedule.cr.svg?branch=master)](https://travis-ci.org/hugoabonizio/schedule.cr)\n\n**Schedule** is a Crystal shard that provides a clear DSL to write periodic or scheduled tasks. It has the ability to stop or retry the job whenever is necessary, with proper ways to handle exceptions. See usage examples in [examples](https://github.com/hugoabonizio/schedule.cr/tree/master/examples) folder.\n\n\n## Installation\n\nAdd this to your application\'s `shard.yml`:\n\n```yaml\ndependencies:\n  schedule:\n    github: hugoabonizio/schedule.cr\n```\n\n## Usage\n\n[This blog post](https://blog.redpanthers.co/painless-cron-jobs-crystal-using-schedule/) describes the basic usage of **Schedule**.\n\n```crystal\nrequire "schedule"\n\n# Print "Hello!" each 2 seconds\nSchedule.every(2.seconds) do\n  puts "Hello!"\nend\n\n# Set a default exception handler\nSchedule.exception_handler do |ex|\n  puts "Exception recued! #{ex.message}"\nend\n\n# Stop or retry a task\nSchedule.every(100.milliseconds) do\n  begin\n    count += computed_value\n  rescue\n    Schedule.retry\n  end\n\n  Schedule.stop if count >= MAX_VALUE\nend\n\n# Execute a task after X interval\nSchedule.after(2.seconds) do\n  puts "Hi!"\nend\n\n# Schedule task every day at a particular time\n\nSchedule.every(:day, "16:00:00") do\n  puts "Good Afternoon!"\nend\n\n# Schedule task to run multiple time every day\n\nSchedule.every(:day, ["16:00:00", "18:00:00"]) do\n  puts "Greetings!"\nend\n\n# Schedule task to run a particular time at particular day of the week\n\nSchedule.every(:sunday, "16:00:00") do\n  puts "House Keeping"\nend\n\n# Schedule task to run multiple time on a given day\nSchedule.every(:sunday, ["16:00:00", "18:00:00"] do\n  puts "Greetings!"\nend\n\n```\n\n#### Scheduled tasks can be isolated having its own runner:\n```crystal\nrunner = Schedule::Runner.new\nrunner.every(100.milliseconds) do\n  Schedule.stop if condition\nend\n\nrunner.exception_handler do |ex|\n  puts ex.message\nend\n```\n\n### Flow control\n\nA task can be stopped or retried using ```Schedule.stop``` and ```Schedule.retry``` respectively.\n\n```crystal\nSchedule.every(10.seconds) do\n  result = try_to_update\n  Schedule.retry if result == -1\n  Schedule.stop if updates >= MAX_COUNT\nend\n```\n\n### Exception handlers\n\nYou can use the ```Schedule.exception_handler do ... end``` form to set an exception handler or directly pass a proc to the ```Schedule.exception_handler``` class property.\n\n```crystal\nhandler = ->(ex : Exception) { puts "Exception recued! #{ex.message}" }\nSchedule.exception_handler = handler\n```\n\n## Contributing\n\n1. Fork it ( https://github.com/hugoabonizio/schedule.cr/fork )\n2. Create your feature branch (git checkout -b my-new-feature)\n3. Commit your changes (git commit -am \'Add some feature\')\n4. Push to the branch (git push origin my-new-feature)\n5. Create a new Pull Request\n\n## Contributors\n\n- [hugoabonizio](https://github.com/hugoabonizio) Hugo Abonizio - creator, maintainer\n'