b'[![Build Status](https://travis-ci.org/drujensen/kemalyst.svg?branch=master)](https://travis-ci.org/drujensen/kemalyst)\n\n[Documentation](http://drujensen.github.io/kemalyst/)\n\n### Moved to Amber\n\nWe have joined forces with [Amber](http://www.amberframework.org) and have migrated most of the code and functionality over there.  We recommend looking at the project before starting anything new.  We will continue to maintain Kemalyst for bug fixes and crystal updates.\n\n# Kemalyst\n\nKemalyst is a yarlf (yet another rails like framework) that is based on\nsuper fast [kemal](https://github.com/sdogruyol/kemal). The framework\nleverages http handlers which are similar to Rack middleware.\n\nKemalyst follows the MVC pattern:\n  - Models are a simple ORM mapping and supports MySQL, PG and SQLite.\n  - Views are handled using [kilt](https://github.com/jeromegn/kilt) which support ECR (Erb like), SLang (Slim like), Crustache (Mustache like) or Temel (not sure what it\'s like).\n  - Controllers are http handlers that continue the chain of handlers after the routing takes place.\n\nKemalyst also supports:\n  - WebSockets provide two way communication for webapps that need dynamic updates\n  - Mailers render and deliver email via [smtp.cr](https://github.com/raydf/smtp.cr)\n  - Jobs perform background tasks using [sidekiq.cr](https://github.com/mperham/sidekiq.cr)\n  - Migrations provide ability to maintain your database schema\'s using [Micrate](https://github.com/juanedi/micrate)\n\nKemalyst also comes with a command line tool similar to `rails` called `kgen` to help you get started quickly.\n\n## Installation\n\n### Brew\n1. Install Crystal\n\n```sh\nbrew update\nbrew install crystal-lang\n```\n\n2. Install Kemalyst Generator\n\n```sh\nbrew tap kemalyst/kgen\nbrew install kgen\n```\n\n### Linux / Ubuntu\n\n1. Install Crystal\n\n```sh\ncurl https://dist.crystal-lang.org/apt/setup.sh | sudo bash\nsudo apt-get update\nsudo apt-get install build-essential crystal\n```\n2. Find the latest version of kgen at https://github.com/kemalyst/kemalyst-generator/releases\n\n2. Run the following. Make sure to update the version number to the latest:\n```\nexport KGEN_VERSION=0.8.0 //or latest version\ncurl -L https://github.com/kemalyst/kemalyst-generator/archive/v$KGEN_VERSION.tar.gz | sudo tar xvz -C /usr/local/share/. && cd /usr/local/share/kemalyst-generator-$KGEN_VERSION && sudo crystal deps && sudo make\nsudo ln -sf /usr/local/share/kemalyst-generator-$KGEN_VERSION/bin/kgen /usr/local/bin/kgen\n```\n\n3. Verify:\n```\nkgen --version\n```\n\n## Initialize\n\nCreate a new Kemalyst App using `kgen`\n```sh\nkgen init app [your_app] [options]\ncd [your_app]\n```\n\nThere are several options:\n  - -d [pg | mysql | sqlite] - defaults to pg\n  - -t [slang | ecr] - defaults to slang\n  - --deps - install dependencies quickly.  This is the same as running `shards install`\n\nThis will generate a traditional web application:\n - /config - The `database.yml` and `routes.cr` are here.\n - /lib - shards (similar to gems in rails) are installed here.\n - /public - Default location for html/css/js files.\n - /spec - all the crystal specs go here.\n - /src - all the source code goes here.\n\n## Generators\n\n`kgen generate` provides several generators:\n  - scaffold [name] [fields]\n  - model [name] [fields]\n  - controller [name] [methods]\n  - mailer [name] [fields]\n  - job [name] [fields]\n  - migration [name]\n\nAn example to generate scaffolding for a resource:\n```sh\nkgen generate scaffold Post name:string body:text draft:bool\n```\n\nThis will generate scaffolding for a Post:\n - src/controllers/post_controller.cr\n - src/models/post.cr\n - src/views/post/*\n - db/migrations/[datetimestamp]_create_post.sql\n - spec/controllers/post_controller_spec.cr\n - spec/models/post_spec.cr\n - appends route to config/routes.cr\n - appends navigation to src/layouts/_nav.slang\n\n### Run Locally\nTo test the app locally:\n\n1. Create a new database called `[your_app]` in the db you chose.\n2. Run `export DATABASE_URL=postgres://[username]:[password]@localhost:5432/[your_app]`or update the database url in `config/database.yml`.\n3. Migrate the database: `kgen migrate up`. You should see output like `\nMigrating db, current version: 0, target: [datetimestamp]\nOK   [datetimestamp]_create_shop.sql`\n4. Run the specs: `crystal spec`\n5. Start your app: `kgen watch`\n6. Then visit `http://0.0.0.0:3000`\n\nNote: The `kgen watch` command uses [Sentry](https://github.com/samueleaton/sentry) to watch for any changes in your source files, recompiling automatically.\n\nIf you don\'t want to use Sentry, you can compile and run manually:\n\n1. Build the app `crystal build --release src/[your_app].cr`\n2. Run with `./[your_app]`\n3. Visit `http://0.0.0.0:3000`\n\n\n### Run with Docker\n\nAnother option is to run using Docker.  A `Dockerfile` and `docker-compose.yml` is provided. If\nyou have docker setup, you can run:\n```sh\ndocker-compose up\n```\nNow visit the site:\n```sh\nopen "http://localhost:3000"\n```\n\nDocker Compose is running [Sentry](https://github.com/samueleaton/sentry) as well so\nany changes to your `/src` or `/config` will re-build and run your\napplication.\n\n### Configure App\n\nAll config settings are in the `/config` folder.  Each handler has its own\nsettings.  You will find the `database.yml` and `routes.cr` here.\n\n\n### Router\n\nThe router will perform a lookup based on the method and path and return the\nchain of handlers you specify in the `/config/routes.cr` file.\n\nYou can use any of these simplified macros: `get, post, patch, delete, all`\n\n```crystal\nget "/", HomeController, :index\n```\n\nOr you can specify the class directly:\n```crystal\nget "/",   HomeController::Index\n```\nYou can use `:variable` in the path and it will set a\ncontext.params["variable"] to the value in the url.\n\n```crystal\nget    "/posts/:id", DemoController, :show\n```\n\nYou may chain multiple handlers in a route:\n```crystal\nget "/", BasicAuth.instance("username", "password")\nget "/", HomeController, :index\n```\n\n#### Resource Routes\n\nYou can declare RESTful routes by using `resources` or `resource`:\n\nFor multiple resources:\n```crystal\nresources Demo\n```\n\nis the same as:\n```crystal\nget "/demos", DemoController, :index\nget "/demos/new", DemoController, :new\npost "/demos", DemoController, :create\nget "/demos/:id", DemoController, :show\nget "/demos/:id/edit", DemoController, :edit\npatch "/demos/:id", DemoController, :patch\ndelete "/demos/:id", DemoController, :delete\n```\n\nFor a single resource:\n```crystal\nresource Demo\n```\n\nis the same as:\n```crystal\nget "/demo/new", DemoController, :new\npost "/demo", DemoController, :create\nget "/demo", DemoController, :show\nget "/demo/edit", DemoController, :edit\npatch "/demo", DemoController, :update\ndelete "/demo", DemoController, :delete\n```\n\n### Controllers\n\nThe Controller inherits from HTTP::Handler which is the middleware similar to\nRack\'s middleware.  The handlers are chained together in a linked-list and\neach will perform some action against the HTTP::Server::Context and then call\nthe next handler in the chain.  The router will continue this chain for a\nspecific route.  The final handler should return the generated response that will be\nreturned as the body and then the chain will unwind and perform post handling.\n\nAn example of a controller:\n```crystal\nrequire "../models/post"\n\nclass PostController < Kemalyst::Controller\n  def index\n    posts = Post.all("ORDER BY created_at DESC")\n    html render("post/index.ecr", "main.ecr")\n  end\nend\n```\n\nThere are several helper macros that will set the content type and responses status:\n```crystal\n  redirect "path"                       # redirect to path\n  html     "<html></html>", 200         # content type `text/html` with status code of 200\n  text     "text", 200                  # content type `text/plain` with status code of 200\n  json     "{}".to_json, 200            # content type `application/json` with status code of 200\n  xml      "{}".to_xml, 200            # content type `application/xml` with status code of 200\n```\n\nThere are two render methods that will generate a string that can be passed to the above macros:\n```crystal\n  render   "filename.ecr"               # renders an .ecr template\n  render   "filename.ecr", "layout.ecr" # renders an .ecr template with layout\n```\n\nYou can use the rendering engine to generate `html`, `json`, `xml` or `text`:\n```crystal\nrequire "../models/post"\n\nclass HomeController < Kemalyst::Controller\n  def index\n    posts = Post.all("ORDER BY created_at DESC")\n    json render("post/index.json.ecr")\n  end\nend\n```\n\n### Views\n\nViews are rendered using [Kilt](http://github.com/jeromegn/kilt).  Currently,\nthere are 4 different templating languages supported by Kilt: `ecr`, `mustache`,\n`slang` and `temel`.  Kilt will select the templating engine based on the\nextension of the file so `index.ecr` will render the file using the ECR\nengine.\n\n\nThe render method is configured to look in the "src/views" path to keep the\ncontrollers simple.  You may also render with a layout which will look for\nthis in the "src/views/layouts" directory.\n\n```crystal\nhtml render "post/index.ecr", "main.ecr"\n```\nThis will render the index.ecr template inside the main.ecr layout. All local\nvariables assigned in the controller are available in the templates.\n\nAn example `views/post/index.ecr`:\n```erb\n<% posts.each do |post| %>\n  <div>\n    <h2><%= post.name %></h2>\n    <p><%= post.body %></p>\n    <p>\n      <a href="/posts/<%= post.id %>">read</a>\n      | <a href="/posts/<%= post.id %>/edit">edit</a> |\n      <a href="/posts/<%= post.id %>?_method=delete" onclick="return confirm(\'Are you sure?\');">delete</a>\n    </p>\n  </div>\n<% end %>\n```\n\nAnd an example of `views/layouts/main.ecr`:\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Example Layout</title>\n    <link rel="stylesheet" href="/stylesheets/main.css">\n  </head>\n  <body>\n    <div class="container">\n\n      <div class="row">\n      <% context.flash.each do |key, value| %>\n        <div class="alert alert-<%= key %>">\n          <p><%= value %></p>\n        </div>\n      <% end %>\n      </div>\n\n      <div class="row">\n        <div class="col-sm-12">\n          <%= content %>\n        </div>\n      </div>\n\n    </div>\n  </body>\n</html>\n```\nThe `<%= content %>` is where the template will be rendered in the layout.\n\nCSRF middleware is built in.  In your forms, add the `csrf_tag` using the helper method:\n```erb\n<form action="/demos/<%= demo.id %>" method="post">\n  <%= csrf_tag(context) %>\n  ...\n</form>\n```\n\n### Models\n\nThe models are a simple ORM mechanism that will map objects to rows in the database.  The mapping is done using several macros.\n\nAn example `models/post.cr`\n```crystal\nrequire "kemalyst-model/adapter/pg"\n\nclass Post < Kemalyst::Model\n  adapter pg\n  field name : String\n  field body : Text\n  field published : Bool\n  timestamps\nend\n```\nThe mapping will automatically create the id of type Int64.  If you include `timestamps`, a created_at and updated_at field\nmapping is created that will automatically get updated for you.\n\nYou can override the table name:\n```crystal\nrequire "kemalyst-model/adapter/pg"\n\nclass Comment < Kemalyst::Model\n  adapter pg\n  table_name post_comments\n  field post_id : Int64\n  field name String\n  field body : Text\nend\n```\n\nYou can override the `id` field:\n```crystal\nrequire "kemalyst-model/adapter/pg"\n\nclass Comment < Kemalyst::Model\n  adapter pg\n  primary my_id : Int32\n  ...\nend\n```\n\nThere are several methods that are provided in the model.\n- self.clear - "DELETE from table;" that will help with specs\n- save - Insert or update depending on if id is set\n- destroy(id) - "DELETE FROM table WHERE id = #{id}"\n- all(where) "SELECT * FROM table #{where};"\n- find(id) - "SELECT * FROM table WHERE id = #{id} LIMIT 1;"\n- find_by(field, value) - "SELECT * FROM table WHERE #{field} = #{value} LIMIT 1;"\n\nYou can find more details at [Kemalyst Model](https://github.com/drujensen/kemalyst-model)\n\n### WebSocket Controllers\n\nThe WebSocket Controller will handle upgrading a HTTP Request to a WebSocket\nConnection.\n\nAn example WebSocket Controller:\n```crystal\nclass Chat < Kemalyst::WebSocket\n  @sockets = [] of HTTP::WebSocket\n\n  def call(socket : HTTP::WebSocket)\n    @sockets.push socket\n    socket.on_message do |message|\n      @sockets.each do |a_socket|\n        a_socket.send message.to_json\n      end\n    end\n  end\nend\n```\n\nThe `Chat` class will override the `call` method that is expecting an\n`HTTP::WebSocket` to be passed which it would maintain and properly handle\nmessages to and from each socket.\n\nThis class will manage an array of `HTTP::Websocket`s and configures the\n`on_message` callback that will manage the messages that will be then be\npassed on to all of the other sockets.\n\nIt\'s important to realize that if the request is not asking to be upgraded to\na websocket, it will call the next handler in the path.  If there is no\nmore handlers configured, a 404 will be returned.\n\nHere is an example routing configuration:\n```crystal\nget "/", ChatController::Chat\nget "/", ChatController::Index\n```\nThe first one is a WebSocket Controller and the second is a standard\nController.  If the request is not a WebSocket upgrade request, it will\npass-through and call the second one that will return the html page.\n\nTo see an example application, checkout\n[Chat Kemalyst](https://github.com/drujensen/chat-kemalyst)\n\n### Mailers\n\nKemalyst provides the ability to generate mailers:\n```sh\nkgen g mailer Welcome email:string name:string\n```\n\nThis will generate the following files:\n\n  - config/mailer.yml\n  - spec/mailers/welcome_mailer_spec.cr\n  - src/mailers/welcome_mailer.cr\n  - src/views/layouts/mailer.slang\n  - src/views/mailers/welcome_mailer.slang\n\nThe mailer has the ability to set the `from`, `to`, `cc`, `bcc`, `subject` and `body`.\nYou may use the `render` helper to create the body of the email.\n\n```crystal\nclass WelcomeMailer < Kemalyst::Mailer\n  def initialize\n    super\n    from "Kemalyst", "info@kemalyst.com"\n  end\n\n  def deliver(name: String, email: String)\n    to name: name, email: email\n    subject "Welcome to Kemalyst"\n    body render("mailers/welcome_mailer.slang", "mailer.slang")\n    super()\n  end\nend\n```\n\nTo delivery a new email:\n```crystal\nmailer = WelcomeMailer.new\nmailer.deliver(name, email)\n```\n\nYou can deliver this in the controller but you may want to do this in a background job.\n\n### Jobs\n\nKemalyst provides a generator for with integration user sidekiq.cr for background jobs:\n```sh\nkgen g job Welcome name:string email:string\n```\n\nThis will generate:\n  - config/sidekiq.cr\n  - docker-sidekiq.yml\n  - spec/jobs/spec_helper.cr\n  - spec/jobs/welcome_job_spec.cr\n  - src/jobs/welcome_job.cr\n  - src/sidekiq.cr\n\nJobs are using `sidekiq.cr` for handling the background process.  Sidekiq uses `redis` to handle the queues and spins up several fibers to handle processing each job from the queue.\n\nYou will either need to install `redis` locally or you can use the `docker-sidekiq.yml` which is a pre-configured docker-compose file that will spin up the needed services.\n\nTo install redis locally and start the service:\n\n```sh\nbrew install redis\nbrew services start redis\n```\n\nSidekiq is expecting two environment variables to be configured:\n\n```sh\nexport REDIS_PROVIDER = REDIS_URL\nexport REDIS_URL = redis://localhost:6379\n```\n\nThen you can start and watch the sidekiq service using `kgen`:\n```sh\nkgen sidekiq\n```\nThis will watch for any changes to the jobs and recompile and launch sidekiq.\n\nOr you can compile and run the sidekiq.cr manually:\n```sh\ncrystal build --release src/sidekiq.cr\n./sidekiq\n```\n\nHere is an example background job that will deliver the email we created earlier:\n```crystal\nrequire "sidekiq"\nrequire "../mailers/welcome_mailer"\n\nclass WelcomeJob\n  include Sidekiq::Worker\n\n  def perform(name : String, email : String)\n    mailer = WelcomeMailer.new\n    mailer.deliver(name: name, email: email)\n  end\nend\n```\n\nTo execute the job, in your controller call:\n```crystal\nWelcomeJob.async.perform(name, email)\n```\n#### docker-sidekiq.yml\n\nIf you have docker installed, you can spin up all of the services needed with:\n```sh\ndocker-compose -f docker-sidekiq.yml up\n```\n\nThis will spin up the following containers:\n  - web: your web application using the command `kgen watch`\n  - sidekiq: sidekiq service using the command `kgen sidekiq`\n  - migrate: runs the migration scripts using the command `kgen migrate up`\n  - sidekiqweb: web interface to manage the sidekiq queues at http://localhost:3001\n  - mail: mail catcher smtp service on port 1025. You can view the email at http://localhost:1080\n  - redis: runs a redis instance version 3.2 on port 6379\n  - db: Mysql on port 3306 or Postgres on port 5432.  Sqlite doesn\'t need a db since it file based.\n\n### Validation\n\nAnother Library included with Kemalyst is validation of your models.\nYou can find more details at [Kemalyst Validators](https://github.com/drujensen/kemalyst-validators)\n\n### i18n Support\n\n[TechMagister](https://github.com/TechMagister) has created a HTTP::Handler that will integrate his i18n library.\nYou can find more details at [Kemalyst i18n](https://github.com/TechMagister/kemalyst-i18n)\n\n### Middleware HTTP::Handlers\n\nThere are 9 handlers that are pre-configured for Kemalyst.  This is similar in architecture to Rack Middleware:\n - Logger - Logs all requests/responses to the logger configured.\n - Error - Handles any Exceptions and renders a response.\n - Static - Delivers any static assets from the `./public` folder.\n - Session - Provides a Cookie Session hash that can be accessed from the `context.session["key"]`\n - Flash - Provides flash message hash that can be accessed from the `context.flash["danger"]`\n - Params - Unifies the parameters into `context.params["key"]`\n - Method - Provides ability to override the method using `_method` parameter\n - CSRF - Helps prevent Cross Site Request Forgery.\n - Router - Routes requests to other handlers based on the method and path.\n\nOther handlers available for Kemalyst:\n - CORS - Handles Cross Origin Resource Sharing.\n - BasicAuth - Provides Basic Authentication.\n\nYou may want to add, replace or remove handlers based on your situation.  You can do that in the\nApplication configuration `config/application.cr`:\n\n```crystal\nKemalyst::Application.config do |config|\n  # handlers will be chained in the order provided\n  config.handlers = [\n    Kemalyst::Handler::Logger.instance,\n    Kemalyst::Handler::Error.instance,\n    Kemalyst::Handler::Params.instance,\n    Kemalyst::Handler::CORS.instance,\n    Kemalyst::Handler::Router.instance\n  ]\nend\n```\n\n## Acknowledgement\n\nKemalyst is only possible with the use and help from many other crystal projects and developers.  Special thanks to you and your contributions!\n\n  - First and foremost the [Crystal Team](https://github.com/crystal-lang/crystal/graphs/contributors).\n  - [Kemal](https://github.com/kemalcr/kemal) Originally forked from here - [Serdar Dogruyol](https://github.com/sdogruyol)\n  - [spec-kemal](https://github.com/kemalcr/spec-kemal) - Kemal Spec for easy testing  [Serdar Dogruyol](https://github.com/sdogruyol)\n\n  - [Kilt](https://github.com/jeromegn/kilt) Rendering templates - [Jerome Gravel-Niquet](https://github.com/jeromegn)\n  - [Slang](https://github.com/jeromegn/slang) Slim-inspired templating language - [Jerome Gravel-Niquet](https://github.com/jeromegn)\n  - [Radix](https://github.com/luislavena/radix) Router is mostly copied from here - [Luis Lavena](https://github.com/luislavena)\n  - [smtp.cr](https://github.com/raydf/smtp.cr) SMTP Client for mailers - [Rayner De Los Santos F.](https://github.com/raydf)\n  - [crystal-db](https://github.com/crystal-lang/crystal-db) Common database driver - [Brian J. Cardiff](https://github.com/bcardiff)\n  - [crystal-sqlite](https://github.com/crystal-lang/crystal-sqlite) Sqlite Driver - [Brian J. Cardiff](https://github.com/bcardiff)\n  - [crystal-mysql](https://github.com/crystal-lang/crystal-mysql) Mysql Driver - [Brian J. Cardiff](https://github.com/bcardiff)\n  - [crystal-pg](https://github.com/will/crystal-pg) Postgres Driver - [Will Leinweber](https://github.com/will)\n  - [sidekiq.cr](https://github.com/mperham/sidekiq.cr) Sidekiq - [Mike Perham](https://github.com/mperham)\n\nFor Kemalyst Generator\n  - [mocks](https://github.com/waterlink/mocks.cr) Mocking Library - [Oleksii Fedorov](https://github.com/waterlink)\n  - [Crystal CLI](mosop/cli) CLI Library - [mosop](https://github.com/mosop)\n  - [Teeplate](mosop/teeplate) Template Rendering Library - [mosop](https://github.com/mosop)\n  - [ICR](https://github.com/greyblake/crystal-icr) Interactive Crystal - [Sergey Potapov](https://github.com/greyblake)\n  - [Sentry](https://github.com/samueleaton/sentry) Watch files, recompile and run - [Sam Eaton](https://github.com/samueleaton)\n  - [Micrate](https://github.com/juanedi/micrate) Rails like Migration Tool - [Juan Edi](juanedi)\n\n## Contributing\n\n1. Fork it ( https://github.com/drujensen/kemalyst/fork )\n2. Create your feature branch (git checkout -b my-new-feature)\n3. Commit your changes (git commit -am \'Add some feature\')\n4. Push to the branch (git push origin my-new-feature)\n5. Create a new Pull Request\n\n## Contributors\n\n- [drujensen](https://github.com/drujensen) Dru Jensen - creator, maintainer\n- [TechMagister](https://github.com/TechMagister) Arnaud Fernand\xc3\xa9s - contributor\n- [elorest](https://github.com/elorest) Isaac Sloan - contributor\n'