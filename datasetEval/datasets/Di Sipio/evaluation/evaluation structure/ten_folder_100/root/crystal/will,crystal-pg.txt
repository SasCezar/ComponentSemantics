b'# crystal-pg\nA native, non-blocking Postgres driver for Crystal\n\n[![Build Status](https://circleci.com/gh/will/crystal-pg/tree/master.svg?style=svg)](https://circleci.com/gh/will/crystal-pg/tree/master)\n\n\n## usage\n\nThis driver now uses the `crystal-db` project. Documentation on connecting,\nquerying, etc, can be found at:\n\n* https://crystal-lang.org/docs/database/\n* https://crystal-lang.org/docs/database/connection_pool.html\n\n### shards\n\nAdd this to your `shard.yml` and run `shards install`\n\n``` yml\ndependencies:\n  pg:\n    github: will/crystal-pg\n```\n\n### Listen/Notify\n\nThere are two ways to listen for notifications. For docs on `NOTIFY`, please\nread <https://www.postgresql.org/docs/current/static/sql-notify.html>.\n\n1. Any connection can be given a callback to run on notifications. However they\n   are only received when other traffic is going on.\n2. A special listen-only connection can be established for instant notification\n   processing with `PG.connect_listen`.\n\n``` crystal\n# see full example in examples/listen_notify.cr\nPG.connect_listen("postgres:///", "a", "b") do |n| # connect and  listen on "a" and "b"\n  puts "    got: #{n.payload} on #{n.channel}"     # print notifications as they come in\nend\n```\n\n### Arrays\n\nCrystal-pg supports several popular array types. If you only need a 1\ndimensional array, you can cast down to the appropriate Crystal type:\n\n``` crystal\nPG_DB.query_one("select ARRAY[1, null, 3]", &.read(Array(Int32?))\n# => [1, nil, 3]\n\nPG_DB.query_one("select \'{hello, world}\'::text[]", &.read(Array(String))\n# => ["hello", "world"]\n```\n\n## Requirements\n\nCrystal-pg is [regularly tested on](https://circleci.com/gh/will/crystal-pg)\nthe Postgres versions the [Postgres project itself supports](https://www.postgresql.org/support/versioning/).\nSince it uses protocol version 3, older versions probably also work but are not guaranteed.\n\n## Supported Datatypes\n\n- text\n- boolean\n- int8, int4, int2\n- float4, float8\n- timestamptz, date, timestamp (but no one should use ts when tstz exists!)\n- json and jsonb\n- uuid\n- bytea\n- numeric/decimal (1)\n- varchar\n- regtype\n- geo types: point, box, path, lseg, polygon, circle, line\n- array types: int8, int4, int2, float8, float4, bool, text, numeric, timestamptz, date, timestamp\n\n1: A note on numeric: In Postgres this type has arbitrary precision. In this\n    driver, it is represented as a `PG::Numeric` which retains all precision, but\n    if you need to do any math on it, you will probably need to cast it to a\n    float first. If you need true arbitrary precision, you can optionally\n    require `pg_ext/big_rational` which adds `#to_big_r`, but requires that you\n    have LibGMP installed.\n\n'