b'# Sam [![Build Status](https://travis-ci.org/imdrasil/sam.cr.svg)](https://travis-ci.org/imdrasil/sam.cr) [![Latest Release](https://img.shields.io/github/release/imdrasil/sam.cr.svg)](https://github.com/imdrasil/sam.cr/releases)\n\nSam is a Make-like utility which allows to specify tasks like Ruby\'s Rake do using plain Crystal code. This allows you to reuse existing application code base and/or include tasks from your dependencies.\n\n## Installation\n\nAdd this to your application\'s `shard.yml`:\n\n```yaml\ndependencies:\n  sam:\n    github: imdrasil/sam.cr\n    version: 0.3.2\n```\n\nAfter executing `shards install` Sam-file will be added to the root of your project (unless you already have one).\n\n## Usage\n\n### Task\n\nTasks are the main unit in `sam.cr`. Task has a name, a list of prerequisites and a list of actions (block of a code).\n\nSam extends the global context with own DSL. To define a task use `task` method which accepts the task name as the 1st argument.\n\n```crystal\ntask "name" do\nend\n```\n\nIf you want to define prerequisites, add the array with their names as the 2nd argument:\n\n```crystal\ntask "name", ["prereq1", "prereq2"] do\nend\n```\n\n#### Executing a task\n\nSam does no magic with your `sam.cr` file - it is just a common `.cr` source file which allows you to recompile it with any possible code you want such amount of times you need. Therefore the most obvious way to execute any task is:\n\n```shell\n$ crystal sam.cr -- name\n```\n\n> `--` here means that `name` is passed as an argument to executed file not `crystal` utility.\n\nIn addition to this you are able to configure your makefile to invoke sam tasks. This allows you to use shorten variant\n\n```shell\n$ make sam name\n```\n\n> This solution still requires `--` in some cases - see the following section.\n\nTo automatically preconfigure makefile run\n\n```shell\n$ crystal sam.cr -- generate:makefile\n```\n\nThis will modify existing Makefile or create new one. Be careful - this will silent all nonexisting makefile tasks on invocation.\n\nTo see a list of all available tasks with their descriptions:\n\n```shell\n$ crystal sam.cr -- help\n```\n\n#### Tasks with arguments\n\nTo pass arguments to your task just list them after it\'s name:\n\n```shell\n> crystal sam.cr -- name john rob ned\n```\n\nThey are passed to a task as a 2nd block argument.\n\n```crystal\ntask "name" do |_, args|\n  puts args[0].as(String)\nend\n```\n\n`args` here is an instance of `Sam::Args` class that contains arguments and named arguments passed to each task. Any argument passed from a console is treated as a `String` but `Int32` and `Float64` values also can be specified during task invocation from inside of another one.\n\n> Each task has own collection of arguments; only prerequisites shares with target task same `Args` instance.\n\nAs was mentioned named argument also can be specified by the following ways:\n\n- `-argument value`\n- `-argument "value with spaces"`\n- `argument=value`\n- `argument="value with spaces"`\n\nOne important restriction with named arguments usage and makefile-style task invocation: `--` should be placed to explicitly specify that specified arguments belongs to compiled program not crystal compiler:\n\n```shell\n$ make sam name john\n$ # but\n$ make same name -- argument=john\n```\n\nMore than one task can be specified (even with own arguments) - just separate them by `@` symbol:\n\n```shell\n$ crystal sam.cr -- name john @ surname argument=snow\n```\n\n#### Accessing tasks programmatically\n\nSam allow you to invoke tasks within another ones and even passing own args object. To do this just call `#invoke` method with task name (and arguments if needed) on task object passed as 1st argument:\n\n```crystal\ntask "name" do |t|\n  t.invoke("surname")\nend\n\ntask "surname" do\n  puts "Snow"\nend\n```\n\nIf specified task was already invoked before - it will be ignored. To force task invocation - use `#execute`.\n\n\nAnother task could be invoked from current using `invoke` method. It has next signatures:\n\n### Namespaces\n\nas projects grow amount of defined tasks grow as well. To simplify navigation and increase readability tasks can be grouped in namespaces:\n\n```crystal\nnamespace "main" do\n  task "build" do\n    # Build the main program\n  end\nend\n\nnamespace "samples" do\n  task "build" do\n    # Build the sample programs\n  end\nend\n\ntask "build", %w[main:build samples:build] do\nend\n```\n\n#### Name resolution\n\nWhen task is invoked from other one, provided path will float up through current task namespace and search given task path on each level until top level. Task could have same name as any existing namespace.\n\n```crystal\ntask "one" do\nend\n\nnamespace "one" do\n  namespace "two"\n    task "test" do |t|\n      t.invoke("one")\n    end\n  end\nend\n```\n\nIn the example above next paths are checked (in given order):\n\n* `one:two:one`\n* `one:one`\n* `one` (as task not namespace)\n\n### Share tasks\n\nSam tasks can be loaded from installed dependencies. To do this helper macro `load_dependencies` can be used:\n\n```crystal\nload_dependencies "lib1", "lib2"\n```\n\nThis is translated to\n\n```crystal\nrequire "./lib/lib1/tasks/sam.cr"\n```\n\n## Development\n\nBefore running tests call\n\n```shell\n$ crystal examples/sam.cr -- setup\n```\n\n## Contributing\n\n1. [Fork it]( https://github.com/imdrasil/sam.cr/fork )\n2. Create your feature branch (git checkout -b my-new-feature)\n3. Commit your changes (git commit -am \'Add some feature\')\n4. Push to the branch (git push origin my-new-feature)\n5. Create a new Pull Request\n\n## Contributors\n\n- [imdrasil](https://github.com/imdrasil/sam.cr) Roman Kalnytskyi - creator, maintainer\n'