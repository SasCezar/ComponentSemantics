b'# \xf0\x9f\x92\x8e Fast Crystal\n\nIt\'s Crystal version based on [ruby version](https://github.com/JuanitoFatas/fast-ruby).\n\nEach idiom has a corresponding code example that resides in [code](code).\n\nAll results listed in README.md are running with Crystal 0.25.0 (2018-06-15) LLVM 5.0.1 on OS X 10.13.5.\n\nMachine information: MacBook Pro (Retina, 15-inch, Mid 2015), 2.2 GHz Intel Core i7, 16 GB 1600 MHz DDR3.\n\nYour results may vary, but you get the idea. : )\n\n> Doubt the results? please discuss in [Crystal Issue#4383](https://github.com/crystal-lang/crystal/issues/4383).\n\n**Let\'s write faster code, together! :trollface:**\n\n## Measurement Tool\n\nUse Crystal\'s built-in [benchmark](https://crystal-lang.org/api/0.22.0/Benchmark.html).\n\n## Run the Benchmarks\n\n```bash\n$ make\n```\n\n### Template\n\n```crystal\nrequire "benchmark"\n\ndef fast\nend\n\ndef slow\nend\n\nBenchmark.ips do |x|\n  x.report("fast code description") { fast }\n  x.report("slow code description") { slow }\nend\n```\n\n## Idioms\n\n### Index\n\n- [Array](#array)\n- [Enumerable](#enumerable)\n- [General](#general)\n- [Hash](#hash)\n- [NamedTuple](#namedtuple)\n- [Proc & Block](#proc--block)\n- [String](#string)\n\n> Test in Crystal 0.27.0 [c9d1eef8f] (2018-11-01)  LLVM: 4.0.0 Default target: x86_64-unknown-linux-gnu \n\n### Array\n\n#### `first` vs `index[0]` [code](code/array/first-vs-index[0].cr)\n\n```\n$ crystal build --release --no-debug -o bin/array/first-vs-index[0] code/array/first-vs-index[0].cr\n$ ./bin/array/first-vs-index[0]\n\nArray#first 315.86M (  3.17ns) (\xc2\xb1 2.93%)  0 B/op        fastest\n  Array#[0] 286.12M (   3.5ns) (\xc2\xb1 3.81%)  0 B/op   1.10\xc3\x97 slower\n```\n\n#### `insert` vs `unshift` [code](code/array/insert-vs-unshift.cr)\n\n```\n$ crystal build --release --no-debug -o bin/array/insert-vs-unshift code/array/insert-vs-unshift.cr\n$ ./bin/array/insert-vs-unshift\n\n Array#insert   2.08  (481.08ms) (\xc2\xb1 2.43%)  1573639 B/op   1.00\xc3\x97 slower\nArray#unshift   2.09  (479.47ms) (\xc2\xb1 0.71%)  1573834 B/op        fastest\n```\n\n#### `last` vs `index[-1]` [code](code/array/last-vs-index[-1].cr)\n\n```\n$ crystal build --release --no-debug -o bin/array/last-vs-index[-1] code/array/last-vs-index[-1].cr\n$ ./bin/array/last-vs-index[-1]\n\nArray#[-1] 319.71M (  3.13ns) (\xc2\xb1 3.28%)  0 B/op   1.12\xc3\x97 slower\nArray#last 359.54M (  2.78ns) (\xc2\xb1 2.65%)  0 B/op        fastest\n```\n\n#### `range` vs `times.map` [code](code/array/range-vs-times.map.cr)\n\n```\n$ crystal build --release --no-debug -o bin/array/range-vs-times.map code/array/range-vs-times.map.cr\n$ ./bin/array/range-vs-times.map\n\nRange#to_a   1.43M (697.94ns) (\xc2\xb1 4.72%)  1712 B/op        fastest\nTimes#to_a   1.34M (748.45ns) (\xc2\xb1 1.79%)  1728 B/op   1.07\xc3\x97 slower\n```\n\n### Enumerable\n\n#### `each push` vs `map` [code](code/enumerable/each-push-vs-map.cr)\n\n```\n$ crystal build --release --no-debug -o bin/enumerable/each-push-vs-map code/enumerable/each-push-vs-map.cr\n$ ./bin/enumerable/each-push-vs-map\n\n             Array#map 591.74k (  1.69\xc2\xb5s) (\xc2\xb1 5.38%)   4048 B/op        fastest\n     Array#each + push 181.92k (   5.5\xc2\xb5s) (\xc2\xb113.94%)  13008 B/op   3.25\xc3\x97 slower\nArray#each_with_object 198.22k (  5.04\xc2\xb5s) (\xc2\xb1 3.97%)  13008 B/op   2.99\xc3\x97 slower\n```\n\n#### `each` vs `loop` [code](code/enumerable/each-vs-loop.cr)\n\n```\n$ crystal build --release --no-debug -o bin/enumerable/each-vs-loop code/enumerable/each-vs-loop.cr\n$ ./bin/enumerable/each-vs-loop\n\nWhile Loop   6.16M (162.44ns) (\xc2\xb1 1.73%)  0 B/op  67.16\xc3\x97 slower\n     #each 413.46M (  2.42ns) (\xc2\xb1 3.14%)  0 B/op        fastest\n```\n\n#### `each_with_index` vs `while loop` [code](code/enumerable/each_with_index-vs-while-loop.cr)\n\n```\n$ crystal build --release --no-debug -o bin/enumerable/each_with_index-vs-while-loop code/enumerable/each_with_index-vs-while-loop.cr\n$ ./bin/enumerable/each_with_index-vs-while-loop\n\n     While Loop   7.63M (131.02ns) (\xc2\xb1 1.73%)  0 B/op  54.60\xc3\x97 slower\neach_with_index 416.72M (   2.4ns) (\xc2\xb1 2.66%)  0 B/op        fastest\n```\n\n#### `map flatten` vs `flat_map` [code](code/enumerable/map-flatten-vs-flat_map.cr)\n\n```\n$ crystal build --release --no-debug -o bin/enumerable/map-flatten-vs-flat_map code/enumerable/map-flatten-vs-flat_map.cr\n$ ./bin/enumerable/map-flatten-vs-flat_map\n\n   Array#flat_map (Tuple) 984.86k (  1.02\xc2\xb5s) (\xc2\xb1 2.75%)  3744 B/op        fastest\nArray#map.flatten (Tuple) 642.58k (  1.56\xc2\xb5s) (\xc2\xb119.91%)  4800 B/op   1.53\xc3\x97 slower\n   Array#flat_map (Array) 201.88k (  4.95\xc2\xb5s) (\xc2\xb117.22%)  7357 B/op   4.88\xc3\x97 slower\nArray#map.flatten (Array) 185.32k (   5.4\xc2\xb5s) (\xc2\xb115.46%)  9622 B/op   5.31\xc3\x97 slower\n```\n\n#### `reverse.each` vs `reverse_each` [code](code/enumerable/reverse.each-vs-reverse_each.cr)\n\n```\n$ crystal build --release --no-debug -o bin/enumerable/reverse.each-vs-reverse_each code/enumerable/reverse.each-vs-reverse_each.cr\n$ ./bin/enumerable/reverse.each-vs-reverse_each\n\nArray#reverse.each   3.69M (270.87ns) (\xc2\xb115.54%)  480 B/op  103.72\xc3\x97 slower\nArray#reverse_each  382.9M (  2.61ns) (\xc2\xb1 8.07%)    0 B/op         fastest\n```\n\n#### `sort` vs `sort_by` [code](code/enumerable/sort-vs-sort_by.cr)\n\n```\n$ crystal build --release --no-debug -o bin/enumerable/sort-vs-sort_by code/enumerable/sort-vs-sort_by.cr\n$ ./bin/enumerable/sort-vs-sort_by\n\n   Enumerable#sort 119.22k (  8.39\xc2\xb5s) (\xc2\xb115.83%)  3136 B/op   1.45\xc3\x97 slower\nEnumerable#sort_by 172.67k (  5.79\xc2\xb5s) (\xc2\xb1 4.44%)  1056 B/op        fastest\n```\n\n### General\n\n#### Assignment [code](code/general/assignment.cr)\n\n```\n$ crystal build --release --no-debug -o bin/general/assignment code/general/assignment.cr\n$ ./bin/general/assignment\n\nSequential Assignment 482.28M (  2.07ns) (\xc2\xb1 4.79%)  0 B/op        fastest\n  Parallel Assignment 472.65M (  2.12ns) (\xc2\xb1 3.64%)  0 B/op   1.02\xc3\x97 slower\n```\n\n#### `hash` vs `struct` vs `namedtuple` [code](code/general/hash-vs-struct-vs-namedtuple.cr)\n\n```\n$ crystal build --release --no-debug -o bin/general/hash-vs-struct-vs-namedtuple code/general/hash-vs-struct-vs-namedtuple.cr\n$ ./bin/general/hash-vs-struct-vs-namedtuple\n\nNamedTuple 419.03M (  2.39ns) (\xc2\xb1 2.14%)    0 B/op   1.00\xc3\x97 slower\n    Struct 419.92M (  2.38ns) (\xc2\xb1 1.93%)    0 B/op        fastest\n      Hash   6.16M ( 162.4ns) (\xc2\xb114.52%)  288 B/op  68.19\xc3\x97 slower\n```\n\n#### `loop` vs `while_true` [code](code/general/loop-vs-while_true.cr)\n\n```\n$ crystal build --release --no-debug -o bin/general/loop-vs-while_true code/general/loop-vs-while_true.cr\n$ ./bin/general/loop-vs-while_true\n\n While Loop 472.45M (  2.12ns) (\xc2\xb1 4.31%)  0 B/op   1.00\xc3\x97 slower\nKernel Loop 473.31M (  2.11ns) (\xc2\xb1 3.74%)  0 B/op        fastest\n```\n\n#### `positional_argument` vs `named_argument` [code](code/general/positional_argument-vs-named_argument.cr)\n\n```\n$ crystal build --release --no-debug -o bin/general/positional_argument-vs-named_argument code/general/positional_argument-vs-named_argument.cr\n$ ./bin/general/positional_argument-vs-named_argument\n\n     Named arguments 479.43M (  2.09ns) (\xc2\xb1 2.37%)  0 B/op        fastest\nPositional arguments 474.47M (  2.11ns) (\xc2\xb1 3.40%)  0 B/op   1.01\xc3\x97 slower\n```\n\n#### `property` vs `getter_and_setter` [code](code/general/property-vs-getter_and_setter.cr)\n\n```\n$ crystal build --release --no-debug -o bin/general/property-vs-getter_and_setter code/general/property-vs-getter_and_setter.cr\n$ ./bin/general/property-vs-getter_and_setter\n\n         property   49.7M ( 20.12ns) (\xc2\xb1 8.54%)  32 B/op   1.02\xc3\x97 slower\ngetter_and_setter  50.92M ( 19.64ns) (\xc2\xb1 3.84%)  32 B/op        fastest\n```\n\n### Hash\n\n#### `[]?` vs `has_key?` [code](code/hash/%5B%5D%3F-vs-has_key%3F.cr)\n\n```\n$ crystal build --release --no-debug -o bin/hash/[]?-vs-has_key? code/hash/[]?-vs-has_key?.cr\n$ ./bin/hash/[]?-vs-has_key?\n\n     Hash#[]?  31.85M (  31.4ns) (\xc2\xb1 4.91%)  0 B/op   1.03\xc3\x97 slower\nHash#has_key?  32.81M ( 30.48ns) (\xc2\xb1 2.46%)  0 B/op        fastest\n```\n\n#### `bracket` vs `fetch` [code](code/hash/bracket-vs-fetch.cr)\n\n```\n$ crystal build --release --no-debug -o bin/hash/bracket-vs-fetch code/hash/bracket-vs-fetch.cr\n$ ./bin/hash/bracket-vs-fetch\n\n   NamedTuple#[] 405.21M (  2.47ns) (\xc2\xb1 3.18%)  0 B/op        fastest\nNamedTuple#fetch  332.9M (   3.0ns) (\xc2\xb1 4.41%)  0 B/op   1.22\xc3\x97 slower\n         Hash#[]   61.9M ( 16.16ns) (\xc2\xb1 1.45%)  0 B/op   6.55\xc3\x97 slower\n      Hash#fetch  63.61M ( 15.72ns) (\xc2\xb1 1.99%)  0 B/op   6.37\xc3\x97 slower\n```\n\n#### `clone` vs `dup` [code](code/hash/clone-vs-dup.cr)\n\n```\n$ crystal build --release --no-debug -o bin/hash/clone-vs-dup code/hash/clone-vs-dup.cr\n$ ./bin/hash/clone-vs-dup\n\n  Hash#dup   7.37M (135.63ns) (\xc2\xb1 4.11%)   480 B/op        fastest\nHash#clone 275.43k (  3.63\xc2\xb5s) (\xc2\xb1 3.55%)  7334 B/op  26.77\xc3\x97 slower\n```\n\n#### `keys each` vs `each_key` [code](code/hash/keys-each-vs-each_key.cr)\n\n```\n$ crystal build --release --no-debug -o bin/hash/keys-each-vs-each_key code/hash/keys-each-vs-each_key.cr\n$ ./bin/hash/keys-each-vs-each_key\n\nHash#keys.each   5.03M (198.88ns) (\xc2\xb1 6.79%)  240 B/op   1.23\xc3\x97 slower\n Hash#each_key    6.2M (161.42ns) (\xc2\xb1 3.15%)  160 B/op        fastest\n```\n\n#### `merge bang` vs `[]=` [code](code/hash/merge-bang-vs-[]=.cr)\n\n```\n$ crystal build --release --no-debug -o bin/hash/merge-bang-vs-[]= code/hash/merge-bang-vs-[]=.cr\n$ ./bin/hash/merge-bang-vs-[]=\n\nHash#merge!  56.89k ( 17.58\xc2\xb5s) (\xc2\xb1 3.64%)  26370 B/op   3.55\xc3\x97 slower\n   Hash#[]= 202.09k (  4.95\xc2\xb5s) (\xc2\xb1 3.15%)   5536 B/op        fastest\n```\n\n### Namedtuple\n\n#### `bracket` vs `fetch` [code](code/namedtuple/bracket-vs-fetch.cr)\n\n```\n$ crystal build --release --no-debug -o bin/namedtuple/bracket-vs-fetch code/namedtuple/bracket-vs-fetch.cr\n$ ./bin/namedtuple/bracket-vs-fetch\n\n   NamedTuple#[] 402.06M (  2.49ns) (\xc2\xb1 4.59%)  0 B/op        fastest\nNamedTuple#fetch 282.35M (  3.54ns) (\xc2\xb1 3.38%)  0 B/op   1.42\xc3\x97 slower\n```\n\n#### `fetch` vs `fetch_with_block` [code](code/namedtuple/fetch-vs-fetch_with_block.cr)\n\n```\n$ crystal build --release --no-debug -o bin/namedtuple/fetch-vs-fetch_with_block code/namedtuple/fetch-vs-fetch_with_block.cr\n$ ./bin/namedtuple/fetch-vs-fetch_with_block\n\nNamedTuple#fetch + const 264.98M (  3.77ns) (\xc2\xb1 3.42%)  0 B/op   1.53\xc3\x97 slower\nNamedTuple#fetch + block 404.11M (  2.47ns) (\xc2\xb1 3.34%)  0 B/op        fastest\n  NamedTuple#fetch + arg 335.23M (  2.98ns) (\xc2\xb1 4.66%)  0 B/op   1.21\xc3\x97 slower\n```\n\n### Proc & Block\n\n#### `block` vs `to_proc` [code](code/proc-and-block/block-vs-to_proc.cr)\n\n```\n$ crystal build --release --no-debug -o bin/proc-and-block/block-vs-to_proc code/proc-and-block/block-vs-to_proc.cr\n$ ./bin/proc-and-block/block-vs-to_proc\n\n         Block 442.81k (  2.26\xc2\xb5s) (\xc2\xb1 6.76%)  2656 B/op   1.03\xc3\x97 slower\nSymbol#to_proc 456.94k (  2.19\xc2\xb5s) (\xc2\xb1 4.43%)  2656 B/op        fastest\n```\n\n#### `proc call` vs `yield` [code](code/proc-and-block/proc-call-vs-yield.cr)\n\n```\n$ crystal build --release --no-debug -o bin/proc-and-block/proc-call-vs-yield code/proc-and-block/proc-call-vs-yield.cr\n$ ./bin/proc-and-block/proc-call-vs-yield\n\n    block.call 483.37M (  2.07ns) (\xc2\xb1 4.23%)  0 B/op   1.00\xc3\x97 slower\n block + yield 480.75M (  2.08ns) (\xc2\xb1 4.91%)  0 B/op   1.01\xc3\x97 slower\nblock argument 415.62M (  2.41ns) (\xc2\xb1 2.72%)  0 B/op   1.17\xc3\x97 slower\n         yield  484.6M (  2.06ns) (\xc2\xb1 3.19%)  0 B/op        fastest\n```\n\n### String\n\n#### Concatenation [code](code/string/concatenation.cr)\n\n```\n$ crystal build --release --no-debug -o bin/string/concatenation code/string/concatenation.cr\n$ ./bin/string/concatenation\n\n String#+  51.85M ( 19.29ns) (\xc2\xb1 5.05%)   32 B/op        fastest\nString#{}  10.14M ( 98.65ns) (\xc2\xb1 4.65%)  208 B/op   5.12\xc3\x97 slower\n String#%   5.68M (175.97ns) (\xc2\xb1 4.66%)  176 B/op   9.12\xc3\x97 slower\n```\n\n#### `ends string-matching-match` vs `end_with` [code](code/string/ends-string-matching-match-vs-end_with.cr)\n\n```\n$ crystal build --release --no-debug -o bin/string/ends-string-matching-match-vs-end_with code/string/ends-string-matching-match-vs-end_with.cr\n$ ./bin/string/ends-string-matching-match-vs-end_with\n\nString#end_with? 275.03M (  3.64ns) (\xc2\xb1 3.17%)   0 B/op        fastest\n       String#=~   9.57M ( 104.5ns) (\xc2\xb1 4.85%)  16 B/op  28.74\xc3\x97 slower\n```\n\n#### Equal-substring-of-char [code](code/string/equal-substring-of-char.cr)\n\n```\n$ crystal build --release --no-debug -o bin/string/equal-substring-of-char code/string/equal-substring-of-char.cr\n$ ./bin/string/equal-substring-of-char\n\n         "==="[0] == \'=\' 211.24M (  4.73ns) (\xc2\xb1 5.03%)   0 B/op        fastest\n    "==="[0].to_s == "="  25.83M ( 38.72ns) (\xc2\xb1 5.83%)  48 B/op   8.18\xc3\x97 slower\n"==="[0] == "=".chars[0]  29.16M ( 34.29ns) (\xc2\xb1 7.24%)  48 B/op   7.24\xc3\x97 slower\n```\n\n#### `equal` vs `match` [code](code/string/equal-vs-match.cr)\n\n```\n$ crystal build --release --no-debug -o bin/string/equal-vs-match code/string/equal-vs-match.cr\n$ ./bin/string/equal-vs-match\n\nString#match  14.78M ( 67.64ns) (\xc2\xb1 8.88%)  16 B/op   1.04\xc3\x97 slower\n  Regexp#===  15.34M ( 65.18ns) (\xc2\xb1 5.81%)  16 B/op        fastest\n   String#=~  14.31M ( 69.87ns) (\xc2\xb1 6.54%)  16 B/op   1.07\xc3\x97 slower\n```\n\n#### `gsub` vs `sub` [code](code/string/gsub-vs-sub.cr)\n\n```\n$ crystal build --release --no-debug -o bin/string/gsub-vs-sub code/string/gsub-vs-sub.cr\n$ ./bin/string/gsub-vs-sub\n\n String#sub   3.65M (273.64ns) (\xc2\xb117.12%)  1248 B/op        fastest\nString#gsub   1.36M ( 733.4ns) (\xc2\xb1 8.04%)  1248 B/op   2.68\xc3\x97 slower\n```\n\n#### `includes` vs `to_s.includes` [code](code/string/includes-vs-to_s.includes.cr)\n\n```\n$ crystal build --release --no-debug -o bin/string/includes-vs-to_s.includes code/string/includes-vs-to_s.includes.cr\n$ ./bin/string/includes-vs-to_s.includes\n\n  String#includes? 476.45M (   2.1ns) (\xc2\xb1 4.69%)  0 B/op   1.01\xc3\x97 slower\nNil#to_s#includes? 482.24M (  2.07ns) (\xc2\xb1 3.85%)  0 B/op        fastest\n```\n\n#### `nil` vs `to_s.empty` [code](code/string/nil-vs-to_s.empty.cr)\n\n```\n$ crystal build --release --no-debug -o bin/string/nil-vs-to_s.empty code/string/nil-vs-to_s.empty.cr\n$ ./bin/string/nil-vs-to_s.empty\n\n    String#nil? 486.03M (  2.06ns) (\xc2\xb1 2.80%)  0 B/op        fastest\nNil#to_s#empty? 485.69M (  2.06ns) (\xc2\xb1 3.11%)  0 B/op   1.00\xc3\x97 slower\n```\n\n#### `sub` vs `chomp` [code](code/string/sub-vs-chomp.cr)\n\n```\n$ crystal build --release --no-debug -o bin/string/sub-vs-chomp code/string/sub-vs-chomp.cr\n$ ./bin/string/sub-vs-chomp\n\nString#chomp"string"  46.49M ( 21.51ns) (\xc2\xb115.88%)   32 B/op        fastest\n  String#sub/regexp/   4.08M (244.86ns) (\xc2\xb114.63%)  176 B/op  11.38\xc3\x97 slower\n```\n\n## You may also like\n\n- [halite](https://github.com/icyleaf/halite) - HTTP Requests Client with a chainable REST API, built-in sessions and middlewares.\n- [totem](https://github.com/icyleaf/totem) - Load and parse a configuration file or string in JSON, YAML, dotenv formats.\n- [markd](https://github.com/icyleaf/markd) - Yet another markdown parser built for speed, Compliant to CommonMark specification.\n- [poncho](https://github.com/icyleaf/poncho) - A .env parser/loader improved for performance.\n- [popcorn](https://github.com/icyleaf/popcorn) - Easy and Safe casting from one type to another.\n'