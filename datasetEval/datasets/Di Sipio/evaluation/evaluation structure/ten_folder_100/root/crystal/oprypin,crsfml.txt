b'# ![CrSFML](logo.png)\n\n#### [Crystal][] bindings to [Simple and Fast Multimedia Library][sfml].\n\nDocumentation\n-------------\n\n- **[Installation](#installation)**\n\n- **[Tutorials][]**\n\n- **[API Documentation][]**\n\n- **[Examples](examples)** / **[Demos][]**\n\n\nIntroduction\n------------\n\n*CrSFML* is a library that allows SFML to be used with the Crystal programming language. [SFML][] is a library written in C++, so *CrSFML* also needs to ship C bindings to SFML, called *VoidCSFML*.\n\nTo quote the official site of SFML,\n\n> SFML provides a simple interface to the various components of your PC, to ease the development of games and multimedia applications.\n\nIndeed, SFML is most often used to make video games. It provides features such as hardware-accelerated 2D graphics, handling keyboard, mouse and gamepad input, vector and matrix manipulation, managing windows (can also be used as a base for OpenGL drawing), working with multiple image formats, audio playback and recording, basic networking... Check out some [demos][] of *CrSFML* to see what it can do.\n\n*CrSFML* consists almost entirely of automatically generated code, based on SFML\'s header files. The *master* git branch contains the [generator program](generate.cr) and the small manually written source files. The generated source code can be viewed at the [sources][] branch.\n\n### Differences between SFML and CrSFML\n\nThe API of *CrSFML* (a library for Crystal) attempts to be similar to SFML (a C++ library), but some general changes are present:\n\n- Methods are renamed to `snake_case`.\n- Getter, setter methods are changed:\n    - `x.getSomeProperty()` becomes `x.some_property`.\n    - `x.isSomeProperty()`, `x.hasSomeProperty()` become `x.some_property?`.\n    - `x.setSomeProperty(v)` becomes `x.some_property = v`.\n- Structs in Crystal are always passed by copy, so modifying them can be problematic. For example, `my_struct.x = 7` is fine but `array_of_structs[2].x = 5` will not work. To work around this, copy the whole struct, modify it, then write it back. Better yet, avoid the need to modify structs (work with them like with immutable objects).\n- Member functions, such as `loadFromFile`, that are used for initialization, each have a corresponding shorthand class method (`from_file`) that raises `SF::InitError` on failure.\n- SFML sometimes uses *enum* values as bitmasks. You can combine them using the `|` operator.\n- *enum* members are exposed at class level, so instead of `SF::Keyboard::Code::Slash` you can use `SF::Keyboard::Slash`.\n- SFML sometimes requires that an instance must remain alive as long as it is attached to the object. For example, a textured shape will cause errors if the texture object is destroyed. *CrSFML* prevents this problem by keeping a reference to the object.\n- The `Event` *union* and `EventType` *enum* are represented as a class hierarchy. Instead of `ev.type == SF::Event::Resized` use `ev.is_a?(SF::Event::Resized)`; instead of `ev.size.width` use `ev.width`.\n- Instead of subclassing `Drawable`, include the `Drawable` module with an abstract `draw` method.\n- Most of the [documentation](http://oprypin.github.io/crsfml/api/) is taken directly from SFML, so don\'t be surprised if it talks in C++ terms.\n\n\nInstallation\n------------\n\nNote that using [Shards][] is not enough to install *CrSFML*.\n\nThis section defines two sets of step-by-step instructions to install *CrSFML* but these are not the only ways to do it; they can even be mixed (see [VoidCSFML installation instructions](voidcsfml/README.md#installation) for an alternative look)\n\n- [Approach 1](#approach-1) **(recommended)**: Generate latest *CrSFML* and *VoidCSFML* source code; build and use them from a local directory\n    - Advantages:\n        - This is the right setup if you wish to:\n             - Distribute your application with the libraries\n             - Contribute to *CrSFML*\n        - Supports multiple recent [SFML versions](#install-sfml).\n    - Disadvantages:\n        - Need to always provide full path to *VoidCSFML* libraries when running a program using *CrSFML*.\n        - Can\'t install *CrSFML* directly through [shards][].\n- [Approach 2](#approach-2): Use pre-compiled sources; build *VoidCSFML* and install it globally; install a release of *CrSFML* through [shards][]\n    - Advantages:\n        - Convenient installation.\n    - Disadvantages:\n        - Global installation litters your system.\n        - Tied to a particular version of SFML.\n\n### Install SFML\n\nThe first step is to install the [SFML][] library itself. There are detailed [official instructions][sfml-install] on how to install it manually, however, on many systems there are easier ways.\n\nSFML versions 2.3.x through 2.5.x are supported by *CrSFML*.\n\n#### Linux\n\nMany Linux-based systems provide SFML through their package manager. Make sure to install the *-dev* packages if there is such a separation in your Linux distribution of choice.\n\nNote that most often the packages provided by Linux distributions are outdated. If you\'re installing an older version of SFML (not recommended), make sure that it\'s still [supported by *CrSFML*](#install-sfml). For installation with [Approach 2](#approach-2) getting the latest version is even more important.\n\nFor information on building SFML from source, check out [this article][sfml-install-linux] (but no need to install CSFML). It is as simple as downloading the source code and running:\n\n```bash\ncmake . && make && sudo make install\n```\n\n#### Mac\n\nThe easiest way to install SFML on macOS is through the [Homebrew][] package manager:\n\n```bash\nbrew update\nbrew install sfml\n```\n\nIt can also be installed by copying binaries, as described in [official instructions][sfml-install], or by building from source in the same way as [on Linux](#linux).\n\n\n### Approach 1\n\nPrerequisites: [Git][], [CMake][], [Crystal][], a C++ compiler\n\n#### [Install SFML](#install-sfml)\n\n#### Download latest generator source code\n\n```bash\ngit clone https://github.com/oprypin/crsfml\ncd crsfml\n```\n\n#### Build CrSFML\n\n```bash\ncmake . && make\n```\n\n> **Optional:** [out-of-source builds][] are also supported, but note that even the sources go to the build directory, so you would need to perform all the following steps inside the build directory and not the root *crsfml* directory.\n\nIf ran successfully, this generates all the source files for *VoidCSFML* and *CrSFML*, and also compiles *VoidCSFML*.\n\nIf SFML can\'t be found, make sure it is installed and consult the [CMake options](voidcsfml/README.md#cmake-options) section.\n\n#### Configure the path to VoidCSFML libraries\n\nNow the *voidcsfml* folder contains the dynamic libraries that are needed to run any *CrSFML* program. So you need to configure the full path to them whenever you work with *CrSFML* so the linker can find them. To apply these for the current shell session, run:\n\n```bash\nexport LIBRARY_PATH=/full/path/to/crsfml/voidcsfml  # Used during linking\nexport LD_LIBRARY_PATH="$LIBRARY_PATH"              # Used when running a binary\n\n# Try running an example:\ncd examples\ncrystal snakes.cr\n```\n\n#### Make CrSFML available to your project\n\nCreate a symbolic link to *CrSFML* in your project\'s *lib* folder.\n\n```bash\ncd ~/my-project\nmkdir lib\nln -s /full/path/to/crsfml/src lib/crsfml\n\n# Try importing it:\necho \'require "crsfml"\' >> my_project.cr\ncrystal my_project.cr\n```\n\nNow you\'re ready for the [tutorials][]!\n\n### Approach 2\n\nPrerequisites: [CMake][], [Crystal][], a C++ compiler\n\n#### [Install SFML](#install-sfml)\n\n#### Download a release of CrSFML\n\nFind the release of *CrSFML* that corresponds to your installed version of *SFML* (latest is strongly recommended) at the [releases][] page. Note that only releases starting at 2.4 are applicable, and only SFML versions since 2.4 are supported in this approach. The older releases are legacy CSFML-based releases.\n\nDownload and extract it, and remember the version of the release (let\'s say v1.2.3) for later.\n\n#### Install VoidCSFML\n\nGo to the *voidcsfml* subfolder, build *VoidCSFML* and install it globally:\n\n```bash\ncd voidcsfml\ncmake . && make && sudo make install\n```\n\nThis should put the headers in */usr/local/include* and the libs in */usr/local/lib*.\n\nIf SFML can\'t be found, make sure it is installed and consult the [CMake options](voidcsfml/README.md#cmake-options) section.\n\n#### Install a release of CrSFML\n\nCreate a shard.yml file in your project\'s folder (or add to it) with the following contents:\n\n```yaml\nname: awesome-game\nversion: 0.1.0\n\ndependencies:\n  crsfml:\n    github: oprypin/crsfml\n    version: 1.2.3\n```\n\n(Replace *1.2.3* with the actual version of *CrSFML* that you downloaded earlier.)\n\nResolve dependencies with [shards][]:\n\n```bash\ncrystal deps\n\n# Try importing it:\necho \'require "crsfml"\' >> awesome_game.cr\ncrystal awesome_game.cr\n```\n\nNow you\'re ready for the [tutorials][]!\n\n\nCredits\n-------\n\n*CrSFML* was made by [Oleh Prypin][blaxpirit].\n\n*CrSFML* is [licensed](LICENSE) under the terms and conditions of the *zlib/libpng* license.\n\nThis library uses and is based on [SFML][sfml-authors].\n\nThanks to [Alan Willms][alanwillms] for translating [tutorials][] to Crystal.\n\n\n[tutorials]: http://oprypin.github.io/crsfml/tutorials/\n[api documentation]: http://oprypin.github.io/crsfml/api/\n[releases]: https://github.com/oprypin/crsfml/releases\n[demos]: https://github.com/oprypin/crsfml-examples\n[sources]: https://github.com/oprypin/crsfml/tree/sources\n\n[sfml]: http://www.sfml-dev.org/ "Simple and Fast Multimedia Library"\n[csfml]: http://www.sfml-dev.org/download/csfml/\n[sfml-authors]: https://github.com/SFML/SFML#readme\n[sfml-install]: http://www.sfml-dev.org/tutorials/\n[sfml-install-linux]: http://blaxpirit.com/blog/12/build-sfml-and-csfml-on-linux.html\n\n[cmake]: https://cmake.org/\n[out-of-source builds]: https://cmake.org/Wiki/CMake_FAQ#Out-of-source_build_trees\n[homebrew]: http://brew.sh/\n[git]: https://git-scm.com/\n\n[crystal]: http://crystal-lang.org/\n[shards]: https://github.com/crystal-lang/shards\n\n[blaxpirit]: https://github.com/oprypin\n[alanwillms]: https://github.com/alanwillms\n'