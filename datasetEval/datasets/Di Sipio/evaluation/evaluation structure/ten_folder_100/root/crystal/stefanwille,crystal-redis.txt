b'# Redis Client for Crystal\n\n[![Build Status](https://img.shields.io/travis/stefanwille/crystal-redis/master.svg?style=flat)](https://travis-ci.org/stefanwille/crystal-redis) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](CONTRIBUTING.md#pull-requests)\n\nA Redis client for the Crystal programming language.\n\n## Features\n\n- Performance (> 680,000 commands per second using pipeline on a MacBook Air with a single client thread)\n- Pipelining\n- Transactions\n- LUA Scripting\n- All string commands\n- All hash commands\n- All list commands\n- All set commands\n- All hyperloglog commands\n- All commands for bit operations\n- All sorted set commands\n- Publish/subscribe\n\n## Installation\n\nAdd it to your `shard.yml`:\n\n```crystal\ndependencies:\n  redis:\n    github: stefanwille/crystal-redis\n    version: ~> 2.3.0\n```\n\nand then install the library into your project:\n\n```bash\n$ shards install\n```\n\n### Installation on MacOS X\n\nOn MacOS X you may get this error:\n\n```\nld: library not found for -lssl (this usually means you need to install the development package for libssl)\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\n...\n```\n\nOr this warning:\n\n```\nPackage libssl was not found in the pkg-config search path.\nPerhaps you should add the directory containing `libssl.pc\'\nto the PKG_CONFIG_PATH environment variable\nNo package \'libssl\' found\nPackage libcrypto was not found in the pkg-config search path.\nPerhaps you should add the directory containing `libcrypto.pc\'\nto the PKG_CONFIG_PATH environment variable\nNo package \'libcrypto\' found\n```\n\nThe problem is that Crystal can\'t find openssl, because it is not installed by default on MacOS X.\n\nThe fix:\n\n1.  Install openssl via [Homebrew](https://brew.sh/):\n\n```bash\n$ brew install openssl\n```\n\n2.  Set the environment variable `PKG_CONFIG_PATH`:\n\n```bash\n$ export PKG_CONFIG_PATH=/usr/local/opt/openssl/lib/pkgconfig\n```\n\nNote: Please write me if you know a better way!\n\n## Required Crystal Version\n\nThis library needs Crystal version >= 0.25.0\n\nI haven\'t tested older Crystal versions.\n\n## Usage\n\nRequire the package:\n\n```crystal\n  require "redis"\n```\n\nthen\n\n```crystal\n  redis = Redis.new\n```\n\nThen you can call Redis commands on the `redis` object:\n\n```crystal\n  redis.set("foo", "bar")\n  redis.get("foo")\n```\n\n#### Connection Pooling\n\nSince version 2.0.0, a connection pool is built in. It is used implicitly through `Redis::PooledClient`:\n\n```Crystal\nredis = Redis::PooledClient.new\n10.times do |i|\n  spawn do\n    redis.set("foo#{i}", "bar")\n    redis.get("foo#{i}") # => "bar"\n  end\nend\n```\n\nThis `redis` instance can be shared across fibers, and accepts the same Redis commands as the `Redis` class.\nIt automatically allocates and frees connections from/to the pool, per command.\n\n## Examples\n\nTo get started, see the examples:\n\n- There is a separate git repository [crystal-redis-examples](https://github.com/stefanwille/crystal-redis-examples) with examples.\n- start with this [basic example](https://github.com/stefanwille/crystal-redis-examples/blob/master/src/basic.cr)\n- look at [the other examples](https://github.com/stefanwille/crystal-redis-examples/blob/master/src/)\n- the [spec](https://github.com/stefanwille/crystal-redis/blob/master/spec/redis_spec.cr) contains even more usage examples\n\n## Documentation\n\n- [API documentation](http://stefanwille.github.io/crystal-redis) -\n  start reading it at the class `Redis`.\n- [Redis commands documentation](http://redis.io/commands) - the original Redis documentation is necessary, as the API documentation above is just a quick reference\n- [Redis documentation page](http://redis.io/documentation) - general information about Redis and its concepts\n\n## Performance\n\nI have benchmarked Crystal-Redis against several other client libraries in various programming languages in this [blog article](http://www.stefanwille.com/2015/05/redis-clients-crystal-vs-ruby-vs-c-vs-go/).\n\nHere are some results:\n\n- Crystal: With this library I get > 680,000 commands per second using pipeline on a MacBook Air with a single client thread.\n\n- C: The equivalent program written in C with Hiredis gets me 340,000 commands per second.\n\n- Ruby: Ruby 2.2.1 with the [redis-rb](https://github.com/redis/redis-rb) and Hiredis driver handles 150,000 commands per second.\n\n[Read more results](http://www.stefanwille.com/2015/05/redis-clients-crystal-vs-ruby-vs-c-vs-go/) for Go, Java, Node.js.\n\n## Status\n\nI have exercised every API method in the spec and built some example programs. Some people report production usage.\n\nI took great care to make this library very usable with respect to API, reliability and documentation.\n\n## Development\n\nThis project requires a locally running redis server running on port 6379 and with a Unix socket located at /tmp/redis.sock. In Homebrew\'s default redis.config the Unix domain socket option is disabled. To enable, edit `/usr/local/etc/redis.conf` or whatever your `redis.conf` is and uncomment this line:\n\n```\n# unixsocket /tmp/redis.sock\n```\n\nso that it reads\n\n```\nunixsocket /tmp/redis.sock\n```\n\nThen you can run the specs via\n\n`$ crystal spec`\n\n[See more information](https://github.com/stefanwille/crystal-redis/blob/master/CONTRIBUTING.md).\n\n### WARNING\n\nRunning the spec will delete database number 0!\n\n## Questions, Bugs & Support\n\nIf you have questions or need help, please open a ticket in the [GitHub issue tracker](https://github.com/stefanwille/crystal-redis/issues). This way others can benefit from the discussion.\n'