b'Filetype Support for [Crystal](http://crystal-lang.org/)\n========================================================\n[![Build Status](https://travis-ci.org/rhysd/vim-crystal.svg?branch=travis)](https://travis-ci.org/rhysd/vim-crystal)\n\nThis is filetype support for [Crystal programming language](http://crystal-lang.org/).\n\n- `crystal` filetype detection\n- Syntax highlight\n- Indentation\n- vim-matchit support\n- `crystal tool` integration ([implementations](http://crystal-lang.org/2015/09/05/tools.html), [context](http://crystal-lang.org/2015/09/05/tools.html), [formatter](http://crystal-lang.org/2015/10/16/crystal-0.9.0-released.html), and so on)\n- `crystal spec` integration\n- Syntax check (Using [Syntastic](https://github.com/scrooloose/syntastic))\n- Completion (currently for variable names)\n\n\n\n## Installation\n\nPlease copy `autoload`, `ftdetect`, `ftplugin`, `indent`, `plugin` and `syntax` directories into your `~/.vim` (or `~/vimfiles` in Windows) directory.\n\n```\n$ cp -R autoload ftdetect ftplugin indent plugin syntax ~/.vim/\n\n$ # If you use vim-syntastic\n$ cp -R syntax_checkers ~/.vim/\n```\n\nIf you use Vim8, `:packadd` is available to install. Please see `:help packages` for more detail.\n\nOtherwise, please use your favorite plugin manager like [vim-plug](https://github.com/junegunn/vim-plug).\n\n\n\n## Syntax Highlight\n\n![screenshot](https://raw.githubusercontent.com/rhysd/ss/master/vim-crystal/highlight1.png)\n\nThis plugin was firstly imported from Ruby\'s filetype plugin.  There are many differences between Ruby and Crystal but vim-crystal can\'t support all of them yet.  In addition, Crystal is growing rapidly and being added many changes.  If you\'ve found some issues or points to improve, pull requests and issues are welcome.\n\n\n\n## Spec Integration\n\n![screen shot: run spec](https://raw.githubusercontent.com/rhysd/ss/master/vim-crystal/spec.gif)\n\nRunning spec(s) and show the result in Vim.  The output is colorful if possible as executed in CLI.\n\n### `:CrystalSpecSwitch` (mapping to `gss`)\n\nIt switches current source file and its spec file.  This command assumes the standard directory layout which `crystal init` generates.\n\nIf you don\'t set `g:crystal_define_mappings` to 0, you can use this feature with mapping `gss`.\n\n### `:CrystalSpecRunAll` (mapping to `gsa`)\n\nIt runs the all specs for current file\'s project.\n\nIf you don\'t set `g:crystal_define_mappings` to 0, you can use this feature with mapping `gsa`.\n\n### `:CrystalSpecRunCurrent` (mapping to `gsc`)\n\nIt runs spec for current buffer.\n\n1. When current buffer is a spec source, `:CrystalSpecRunCurrent` runs the spec under the cursor.  You should execute this command after moving cursor to `it ... do` line or `describe ... do` line.\n2. When current buffer is not a spec source, `:CrystalSpecRunCurrent` finds corresponding spec source and runs all specs in the source.\n\nIf you don\'t set `g:crystal_define_mappings` to 0, you can use this feature with mapping `gsc`.\n\n## Formatter Integration\n\n![format screenshot](https://raw.githubusercontent.com/rhysd/ss/master/vim-crystal/formatting.gif)\n\nYou can run formatter manually by `:CrystalFormat` or automatically at saving buffer.\n\nWhen you set `g:crystal_auto_format` to `1`, current buffer is automatically formatted on `BufWritePre`.  The variable is set to `0` by default because `crystal tool format` currently seems buggy.\n\n\n## Tool Integration\n\n### `:CrystalDef` (mapping to `gd`)\n\nIt makes cursor jump to the definition of name under the cursor.  This command uses `crystal tool implementations`.\n\n![screenshort](https://raw.githubusercontent.com/rhysd/ss/master/vim-crystal/jump-to-definition.gif)\n\nIf you don\'t set `g:crystal_define_mappings` to 0, you can use this feature with mapping `gd`.\n\n### `:CrystalContext` (mapping to `gc`)\n\nIt shows the _context_ under the cursor. Context includes variable names and their types.\n\n![screenshot](https://raw.githubusercontent.com/rhysd/ss/master/vim-crystal/show-context.gif)\n\nIf you don\'t set `g:crystal_define_mappings` to 0, you can use this feature with mapping `gc`.\n\n### `:CrystalHierarchy`\n\nIt shows types hierarchy of current code.\n\n![screenshot](https://raw.githubusercontent.com/rhysd/ss/master/vim-crystal/show-hierarchy.gif)\n\n### `:CrystalImpl`\n\nIt shows how the identifier under the cursor is implemented. For example, when the cursor is on some\nproperty of an object instance, `:CrystalImpl` would report where the property is defined with\n`property` macro.\n\n### `:CrystalExpand`\n\nIt expands macro invocation under the cursor.\n\n\n## Completion\n\nOmni completion for crystal can be used by `<C-x><C-o>`.  (Please see `:help ins-completion`)\n\n![screenshot](https://raw.githubusercontent.com/rhysd/ss/master/vim-crystal/completion.gif)\n\nCurrently you can complete variable names.\n\n\n\n## License\n\nThis plugin is distributed under the [MIT License](http://opensource.org/licenses/MIT).\n\n```\nCopyright (c) 2014 rhysd\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the "Software"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\nINCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR\nPURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR\nTHE USE OR OTHER DEALINGS IN THE SOFTWARE.\n```\n'