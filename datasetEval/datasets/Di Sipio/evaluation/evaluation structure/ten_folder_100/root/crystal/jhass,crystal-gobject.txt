b'# gobject-introspection for [Crystal](http://crystal-lang.org)\n\nThe primary purpose of this shard is to provide compile-time generated\nbindings to libraries supporting GObject Introspection, so for example Gtk.\n\nSecondarily this project also aims to provide hand written extensions and\noverrides for the more popular GObject based libraries that make the bindings\nmore friendly to use and allow users to write more idiomatic Crystal.\nIn the midterm these should be extracted to their own shards that depend on this one.\n\nThis should be useable for simple projects but usually still requires familarity with\nthe C interface and usage of the original library. There\'s most likely still\nincorrect code generated, some methods may not even compile when invoked as\nCrystal does semantic checks only then. So this should be considered a work in\nprogress and contributions are very welcome!\n\n## Install\n\nInstall like any other shard. Additionally you\'ll need gobject-introspection installed\nas well as the GObject based library you want to use and its typelib file needs to be\navailable.\n\n## Usage\n\nFor libraries that have convenience wrappers you just require them under the `goject`\nnamespace. For example:\n\n```cr\nrequire "gobject/gdk"\n```\n\nGtk specifically has a convenience wrapper that starts the mainloop automatically:\n\n```cr\nrequire "gobject/gtk/autorun"\n```\n\nHowever the main entry point is the `require_gobject` macro:\n\n\n```cr\nrequire "gobject"\nrequire_gobject "Gio"\n```\n\nThis will replace itself with the entire generated binding code for, in this case,\nGio and its dependencies.\n\nThere\'s a very work in progress documentation generator under the `gi-doc` target.\nNote it is a modified version of the Crystal compiler\'s doc generator and thus\ncompiles almost the entire compiler, thus compiling this tool takes as much time\nand resources as compiling the compiler does. Also libraries as Gtk are huge! Generating\nfor Gtk and its dependencies will take a long time and generate about a gigabyte\nof documentation.\n\n## Contributing\n\nPull requests are welcome! If you encounter a bug, the first step is to produce\nthe most minimal example that reproduces it. Currently this has no testsuite,\nso the samples funciton as a sort of manual testsuite. That means including this minimal\nexample into an issue or pull request will not only allow others to verify the bug,\nbut also prevent it from reappearing as a regression.\n\nRunning `src/generator/build_namespace.cr` directly is a good way to inspect the generated code.\nAn alternative is to add `{% debug() %}` to the end of the `require_gobject`\nmacro definition in `src/gobject.cr`.\n\n### Architecture\n\ngobject-introspection is itself a C library, so we need to have bindings for it.\nIt is itself introspectable and we make use of that, however there\'s a bootstrapping\nproblem if we would try to use the main `require_gobject` macro for that, there are\nno bindings for what it\'s based on! So we have a second generator that writes the output\nto static files under `src/generated` under the target `gi-generator`. The initial version\nof this was bootstrapped using hand-written bindings. A good quick check whether any changes\nyou did still work, is to build and run this target twice, the first time to update the generated\nbindings and the second time to see if they still compile and produce the same output.\n\n`src/generator` has the driver code for any of the generators and tools. `src/g_i_repository`\ncontains the classes that define the Crystal code for each of the GObject Introspection info types.\n\nThe `gi-dump` target tries to completely map out all info that\'s present in a typelib, that is\nhow the current bindings see that info. Look at its options, you\'ll need to make use\nof them to drill in, otherwise it\'s just too much output due to how it displays\nthe same infos all over again and again recursively.\n\nFor now convenience extensions and overrides go under `src/library_name`,\nso for example `src/gtk` for Gtk or `src/g_lib` for GLib.'