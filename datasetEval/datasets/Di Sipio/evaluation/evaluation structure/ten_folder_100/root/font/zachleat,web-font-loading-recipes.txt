b'# web-font-loading-recipes\n\nA bunch of demos for different web font loading strategies. Some of these are included on [A Comprehensive Guide to Font Loading Strategies](https://www.zachleat.com/web/comprehensive-webfonts/), some of them are more _experimental_.\n\nDemos are hosted at https://www.zachleat.com/web-fonts/demos/\n\n## Table of Contents\n\n* [Recommended Methods](#recommended-methods)\n* [Further Enhancements](#further-enhancements)\n* [Experiments in Progress](#experiments-in-progress)\n* [Not Recommended but included for Posterity](#not-recommended-but-included-for-posterity)\n* [Anti-patterns and Deprecated Methods](#anti-patterns-and-deprecated-methods)\n* [Failed Experiments](#failed-experiments)\n\n## Recommended Methods\n\nAs web fonts are a progressive enhancement and with increasing support for the CSS Font Loading API, we can look forward to a time in which we won\xe2\x80\x99t need to inline a polyfill into the header (for even faster font loading). The simplified CSS Font Loading API recipes are the defaults, but polyfilled versions are included for broader browser support\xe2\x80\x94notably only the polyfilled versions will show web fonts in Internet Explorer and Edge web browsers (which do not have support for the CSS Font Loading API).\n\n### `font-display: swap`\n\n* _CSS_: `@font-face` descriptor\n* [Code](./font-display.html)\n* [Read more](https://www.zachleat.com/web/comprehensive-webfonts/#font-display)\n* [Demo](https://www.zachleat.com/web-fonts/demos/font-display.html)** _(4 web fonts)_\n\n### `preload`\n\n* _HTML_: `<link>` tag\n* [Code](./preload.html)\n* [Read more](https://www.zachleat.com/web/comprehensive-webfonts/#preload)\n* [Demo](https://www.zachleat.com/web-fonts/demos/preload.html)** _(4 web fonts\xe2\x80\x941 preloaded)_\n\n### `font-display: swap` with `preload`\n\n* _HTML_: `<link>` tag and _CSS_: `@font-face` descriptor\n* [Code](./font-display-preload.html)\n* Read more about [`font-display`](https://www.zachleat.com/web/comprehensive-webfonts/#font-display) and [`preload`](https://www.zachleat.com/web/comprehensive-webfonts/#preload)\n* [Demo](https://www.zachleat.com/web-fonts/demos/font-display-preload.html)** _(4 web fonts\xe2\x80\x941 preloaded)_\n\n### FOUT with a Class\n\n* _JavaScript_: CSS Font Loading API\n* [Code](./fout-with-class.html)\n* [Read more](https://www.zachleat.com/web/comprehensive-webfonts/#fout-class)\n* [Demo](https://www.zachleat.com/web-fonts/demos/fout-with-class.html) _(4 web fonts)_\n* or [using a polyfill](./fout-with-class-polyfill.html)\xe2\x80\x94[Demo](https://www.zachleat.com/web-fonts/demos/fout-with-class-polyfill.html) _(4 web fonts)_\n\n### FOUT\n\nSimilar to the above, but without using a class\xe2\x80\x94using only the CSS Font Loading API. This doesn\xe2\x80\x99t require any modification of the CSS, injects the web fonts using JS programmatically. I first saw this method in the [Webfont Handbook from @bramstein](https://abookapart.com/products/webfont-handbook).\n\n* _JavaScript_: CSS Font Loading API\n* [Code](./fout.html)\n* [Demo](https://www.zachleat.com/web-fonts/demos/fout.html) _(4 web fonts)_\n* Related: `.style.fontFamily` method (only works well with one family per page), first saw this in a [tweet from @simevidas](https://twitter.com/simevidas/status/829016037366566912)\n\n### FOFT\n\nTwo stage load, using one Roman font file in the first stage (with font-synthesis).\n\n* _JavaScript_: CSS Font Loading API\n* [Code](./foft.html)\n* [Read more](https://www.zachleat.com/web/comprehensive-webfonts/#foft)\n* [Demo](https://www.zachleat.com/web-fonts/demos/foft.html) _(5 web fonts, two are the same\xe2\x80\x94but only loaded once)_\n* or [using a polyfill](./foft-polyfill.html)\xe2\x80\x94[Demo](https://www.zachleat.com/web-fonts/demos/foft-polyfill.html) _(4 web fonts)_\n\n### Critical FOFT\n\n* _JavaScript_: CSS Font Loading API\n* [Code](./critical-foft.html)\n* [Read more](https://www.zachleat.com/web/comprehensive-webfonts/#critical-foft)\n* [Demo](https://www.zachleat.com/web-fonts/demos/critical-foft.html) _(5 web fonts\xe2\x80\x941 subset)_\n* or [using a polyfill](./critical-foft-polyfill.html)\xe2\x80\x94[Demo](https://www.zachleat.com/web-fonts/demos/critical-foft-polyfill.html) _(5 web fonts\xe2\x80\x941 subset)_\n\n### Critical FOFT with Data URI\n\n* _JavaScript_: CSS Font Loading API\n* [Code](./critical-foft-data-uri.html)\n* [Read more](https://www.zachleat.com/web/comprehensive-webfonts/#critical-foft-data-uri)\n* [Demo](https://www.zachleat.com/web-fonts/demos/critical-foft-data-uri.html) _(5 web fonts\xe2\x80\x941 subset inline Data URI)_\n* or [using a polyfill](./critical-foft-data-uri-polyfill.html)\xe2\x80\x94[Demo](https://www.zachleat.com/web-fonts/demos/critical-foft-data-uri-polyfill.html) _(5 web fonts\xe2\x80\x941 subset inline Data URI)_\n\n### Critical FOFT with `preload`\n\n* _HTML_: `<link>` tag and _JavaScript_: CSS Font Loading API\n* [Code](./critical-foft-preload.html)\n* [Read more](https://www.zachleat.com/web/comprehensive-webfonts/#critical-foft-preload)\n* [Demo](https://www.zachleat.com/web-fonts/demos/critical-foft-preload.html) _(5 web fonts\xe2\x80\x941 subset)_\n* or [using a polyfill](./critical-foft-preload-polyfill.html)\xe2\x80\x94[Demo](https://www.zachleat.com/web-fonts/demos/critical-foft-preload-polyfill.html) _(5 web fonts\xe2\x80\x941 subset)_\n\n### The eBay Method\n\n* _JavaScript_: CSS Font Loading API and [FontFaceObserver polyfill](https://github.com/bramstein/fontfaceobserver)\n* Code: [HTML](./ebay-method.html) and [Lazy-loaded JavaScript](./ebay-method.js)\n* Emulate `font-display: optional` with JavaScript.\n  * Notable that it lazy loads the font loading polyfill only if CSS Font Loading API is not supported\n* Read more at [eBay\xe2\x80\x99s Font Loading Strategy](http://www.ebaytechblog.com/2017/09/21/ebays-font-loading-strategy/).\n* [Demo](https://www.zachleat.com/web-fonts/demos/ebay-method.html) _(4 web fonts)_ (polyfill is lazy loaded when CSS Font Loading API is not supported)\n\n### \xe2\x80\x9cThe Compromise\xe2\x80\x9d: Critical FOFT with `preload`, with a polyfill fallback emulating `font-display: optional`\n\n* _HTML_: `<link>` tag and _JavaScript_: CSS Font Loading API and [FontFaceObserver polyfill](https://github.com/bramstein/fontfaceobserver)\n* Code: [HTML](./critical-foft-preload-fallback-optional.html) and [Lazy-loaded JavaScript](./critical-foft-preload-fallback-optional.js)\n* [Read more](https://www.zachleat.com/web/the-compromise/)\n  * Inspired by the eBay method above.\n* [Demo](https://www.zachleat.com/web-fonts/demos/critical-foft-preload-fallback-optional.html) _(5 web fonts\xe2\x80\x941 subset)_ (polyfill is lazy loaded when CSS Font Loading API is not supported)\n* Currently in use on [zachleat.com](https://www.zachleat.com/web/) and [smashingmagazine.com](https://www.smashingmagazine.com/)\n\n## Further Enhancements\n\nThese aren\xe2\x80\x99t necessarily font loading strategies on their own but they are extra enhancements you can layer on top of and pair with existing strategies.\n\n### Network Information API\n\nOpt out of web fonts on slow connection speeds.\n\n* [Code](./network-information-api.html) (shown with FOUT approach)\n* [Demo](https://www.zachleat.com/web-fonts/demos/network-information-api.html)\n* Related blog post: [Should I Use JavaScript to Load My Web Fonts?](https://www.filamentgroup.com/lab/js-web-fonts.html)\n\n### `prefers-reduced-motion` User Preference\n\nOpt out of web fonts when user has enabled `Reduce Motion` accessibility preference.\n\n* [Code](./prefers-reduced-motion.html) (shown with FOUT approach)\n* [Demo](https://www.zachleat.com/web-fonts/demos/prefers-reduced-motion.html)\n* Related blog post: [Should I Use JavaScript to Load My Web Fonts?](https://www.filamentgroup.com/lab/js-web-fonts.html)\n\n### `save-data` User Preference\n\nOpt out of web fonts when user has enabled `Data Saver` mode.\n\n* [Code](./save-data.html) (shown with FOUT approach)\n* [Demo](https://www.zachleat.com/web-fonts/demos/save-data.html)\n* Related blog post: [Should I Use JavaScript to Load My Web Fonts?](https://www.filamentgroup.com/lab/js-web-fonts.html)\n\n## Experiments in Progress\n\nYou\xe2\x80\x99ll probably see blog posts on these at some point.\n\n* Metric compatible web fonts\n  * Show how fonts can look without FOUT reflow if they are metric compatible.\n* [FOUT metric matching with a Variable Font](./variablefont-fout-test.html)\n  * Reduction in FOUT reflow (reduce text movement on web font render)\n  * Related: [Font style matcher](https://meowni.ca/font-style-matcher/) from @notwaldorf\n\n## Not Recommended but included for Posterity\n\n### `font-display: optional`\n\n* A little harsh to put this in the Not Recommended section but I like my web fonts on an empty-cache visit \xf0\x9f\x98\x8e\n* [Code](./font-display-optional.html)\n* [Demo](https://www.zachleat.com/web-fonts/demos/font-display-optional.html)** _(4 web fonts)_\n\n### System fonts\n\nC\xe2\x80\x99mon. \xf0\x9f\x98\x87\n\n* [Code](./dont.html)\n* [Documentation](https://www.zachleat.com/web/comprehensive-webfonts/#abstain)\n* [Demo](https://www.zachleat.com/web-fonts/demos/dont.html) _(0 web fonts)_\n\n### Unceremonious Web Fonts\n\n* [Code](./unceremonious-font-face.html)\n* [Documentation](https://www.zachleat.com/web/comprehensive-webfonts/#font-face)\n* [Demo](https://www.zachleat.com/web-fonts/demos/unceremonious-font-face.html)** _(4 web fonts)_\n\n### Unceremonious Web Fonts, WOFF2 Only (Cutting the Mustard)\n\nOld browsers [used to render FOIT without a timeout](https://www.zachleat.com/web/fout-foit-history/), which in practice made web fonts a single point of failure. Using WOFF2 only cuts the mustard to modern browsers that have a three second FOIT timeout for web fonts. We\xe2\x80\x99re anti-invisible text here, but this approach is worth mentioning.\n\n* [Code](./unceremonious-font-face-woff2-only.html)\n* [Demo](https://www.zachleat.com/web-fonts/demos/unceremonious-font-face-woff2-only.html)** _(4 web fonts)_\n\n### Unceremonious Faux Web Fonts\n\n`font-synthesis` is not a good end-product.\n\n* [Code](./unceremonious-faux-font-face.html)\n* [Demo](https://www.zachleat.com/web-fonts/demos/unceremonious-faux-font-face.html)** _(1 web font)_: Bold and italic variants are rendered using [font-synthesis](https://www.zachleat.com/web/webfont-glossary/#font-synthesis)\n\n## Anti-patterns and Deprecated Methods\n\n### \xe2\x9a\xa0\xef\xb8\x8f Inline Data URI\n\n* [Code](./inline-data-uri.html)\n* [Read more](https://www.zachleat.com/web/comprehensive-webfonts/#inline-data-uri)\n* [Demo](https://www.zachleat.com/web-fonts/demos/inline-data-uri.html) _(4 web fonts)_\n\n### \xe2\x9a\xa0\xef\xb8\x8f Asynchronous Data URI\n\n* [Code](./async-data-uri.html)\n* [Read more](https://www.zachleat.com/web/comprehensive-webfonts/#async-data-uri)\n* [Demo](https://www.zachleat.com/web-fonts/demos/async-data-uri.html) _(4 web fonts)_\n\n### \xe2\x9a\xa0\xef\xb8\x8f `<style>` Injection\n\nAnything that uses JavaScript to inject a new `<style>` with `@font-face` blocks inside. Really bad repaint cost\xe2\x80\x94avoid this. This is used in the Asynchronous Data URI method above but is also common in worse-performing methods too.\n\n### \xe2\x9a\xa0\xef\xb8\x8f `font-display: optional` and `preload`\n\n* [Code](./font-display-optional-preload.html)\n* [Read more: `preload` with `font-display: optional` is an Anti-pattern](https://www.zachleat.com/web/preload-font-display-optional/)\n* [Demo](https://www.zachleat.com/web-fonts/demos/font-display-optional-preload.html)** _(4 web fonts)_\n\n### \xe2\x9a\xa0\xef\xb8\x8f FOFT using only `font-display` (mixing `font-display` values across a `font-family`)\n\nThis method does not currently have cross-browser support. I\xe2\x80\x99m hoping this will change\xe2\x80\x94[learn more](https://twitter.com/zachleat/status/964173100001656832).\n\n* [Code](./font-display-mix.html)\n* [Demo](https://www.zachleat.com/web-fonts/demos/font-display-mix.html)** _(4 web fonts\xe2\x80\x941 `swap` / 3 `optional`)_\n\n## Failed Experiments\n\n### \xf0\x9f\x9a\xab Asynchronous CSS\n\nThis is a common thing people try\xe2\x80\x94they asynchronously load the CSS (and only the CSS). Heck, I used this behavior before I started studying web font loading.\n\n* **Failed**: lazy loading the CSS only delays the start of the FOIT. It does not prevent it.\n* [Read more at Lazy Loading Web Fonts is Probably Not What You Want](https://www.zachleat.com/web/lazy-loading-webfonts/)\n* [Code](./asynchronous-css.html) (learn more about [asynchronous CSS](https://github.com/zachleat/async-css-loading))\n* [Demo](https://www.zachleat.com/web-fonts/demos/asynchronous-css.html) _(4 web fonts)_\n\n### \xf0\x9f\x9a\xab `@supports` and `font-display`\n\n* Reasons for trying:\n  * might be nice to only use web fonts if you can FOUT with `font-display`\n  * might be nice to have FOUT with a class if `font-display` not supported (and work well without JS dependencies)\n* **Failed**: `@supports` doesn\xe2\x80\x99t work with font-face descriptors.\n* [Code](failed-supports.html)\n* [Demo](https://www.zachleat.com/web-fonts/demos/failed-supports.html)\n\n### \xf0\x9f\x9a\xab `font-family` Stack\n\n* Put two or more `font-family` web fonts in a single `font-family` stack.\n* **Failed**: The font matching algorithm selects the first web font that matches and attempts to load it (ignoring subsequent web font families). Even if you `preload` the subset first stage, it\xe2\x80\x99ll swap over due to `font-family` order priority.\n* [Code](font-family-stack.html)\n* [Demo](https://www.zachleat.com/web-fonts/demos/font-family-stack.html)\n\n* **Update**: While you can mitigate the above problem with `font-display`, perhaps modifying the order of the `font-family` stack and `@font-face` block ordering, there are still problems with removing the unnecessary subset web font from the page after the larger version has loaded. Font features that occur with glyphs that cross these font file boundaries will be broken (kerning, ligatures, et cetera). Relatedly, you cannot remove a CSS-paired `FontFace` object using the CSS Font Loading API (per the specification).\n\n---\n\n** Take note that these methods will FOUT in Internet Explorer and Edge by taking advantage of their default font loading behavior.\n'