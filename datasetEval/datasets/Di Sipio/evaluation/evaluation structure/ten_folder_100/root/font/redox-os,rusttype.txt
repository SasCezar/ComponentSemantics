b'# RustType\n[![crates.io](https://img.shields.io/crates/v/rusttype.svg)](https://crates.io/crates/rusttype)\n[![docs.rs](https://docs.rs/rusttype/badge.svg)](https://docs.rs/rusttype)\n\nRustType is a pure Rust alternative to libraries like FreeType.\n\nThe current capabilities of RustType:\n\n* Reading TrueType formatted fonts and font collections. This includes `*.ttf`\n  as well as a subset of `*.otf` font files.\n* Retrieving glyph shapes and commonly used properties for a font and its glyphs.\n* Laying out glyphs horizontally using horizontal and vertical metrics, and\n  glyph-pair-specific kerning.\n* Rasterising glyphs with sub-pixel positioning using an accurate analytical\n  algorithm (not based on sampling).\n* Managing a font cache on the GPU with the `gpu_cache` module. This keeps\n  recently used glyph renderings\n  in a dynamic cache in GPU memory to minimise texture uploads per-frame. It\n  also allows you keep the draw call count for text very low, as all glyphs are\n  kept in one GPU texture.\n\nNotable things that RustType does not support *yet*:\n\n* OpenType formatted fonts that are not just TrueType fonts (OpenType is a\n  superset of TrueType). Notably there is no support yet for cubic Bezier curves\n  used in glyphs.\n* Font hinting.\n* Ligatures of any kind\n* Some less common TrueType sub-formats.\n* Right-to-left and vertical text layout.\n\n## Testing & examples\nHeavier examples, tests & benchmarks are in the `./dev` directory. This avoids dev-dependency feature bleed.\n\nRun all tests with `cargo test --all --all-features`.\n\nRun examples with `cargo run --example <NAME> -p rusttype-dev`\n\n## Getting Started\n\nTo hit the ground running with RustType, look at `dev/examples/simple.rs`\nsupplied with the crate. It demonstrates loading a font file, rasterising an\narbitrary string, and displaying the result as ASCII art. If you prefer to just\nlook at the documentation, the entry point for loading fonts is\n`FontCollection`, from which you can access individual fonts, then their glyphs.\n\n## Future Plans\n\nThe initial motivation for the project was to provide easy-to-use font rendering for games.\nThere are numerous avenues for improving RustType. Ideas:\n\n* Some form of hinting for improved legibility at small font sizes.\n* Replacing the dependency on\n  [stb_truetype-rs](https://gitlab.redox-os.org/redox-os/stb_truetype-rs)\n  (a translation of [stb_truetype.h](https://github.com/nothings/stb/blob/master/stb_truetype.h)),\n  with OpenType font loading written in idiomatic Rust.\n* Add support for cubic curves in OpenType fonts.\n* Extract the rasterisation code into a separate vector graphics rendering crate.\n* Support for some common forms of ligatures.\n* And, eventually, support for embedded right-to-left Unicode text.\n\nIf you think you could help with achieving any of these goals, feel free to open\na tracking issue for discussing them.\n\n## Minimum supported rust compiler\nThis crate is maintained with [latest stable rust](https://gist.github.com/alexheretic/d1e98d8433b602e57f5d0a9637927e0c).\n\n## License\n\nLicensed under either of\n\n * Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or\n   http://www.apache.org/licenses/LICENSE-2.0)\n * MIT license ([LICENSE-MIT](LICENSE-MIT) or\n   http://opensource.org/licenses/MIT)\n\nat your option.\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in the work by you, as defined in the Apache-2.0 license, shall be\ndual licensed as above, without any additional terms or conditions.\n\n### See Also\n\n- [glyph_brush](https://github.com/alexheretic/glyph-brush) - can cache vertex generation & provides more complex layouts.\n'