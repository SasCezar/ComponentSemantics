b'_N.B. This is a fork of the_ [Source Code Pro repository](https://github.com/adobe-fonts/source-code-pro)\n\n### Hasklig \xe2\x80\x93 _Ligatures for code_\n\nProgramming languages are limited to relatively few characters. As a result, combined character operators surfaced quite early, such as the widely used arrow (`->`), comprised of a hyphen and greater sign. It looks like an arrow if you know the analogy and squint a bit.\n\nComposite glyphs are problematic in languages such as Haskell which utilize these complicated operators (`=>` `-<` `>>=` etc.) extensively. The readability of such complex code improves with pretty printing. Academic articles featuring Haskell code often use [lhs2tex](https://www.andres-loeh.de/lhs2tex/) to achieve an appealing rendering, but it is of no use when programming.\n\nSome Haskellers have resorted to Unicode symbols (`\xe2\x87\x92`, `\xe2\x86\x90` _etc._), which are valid in the <span style="font-variant: small-caps">ghc</span>. However they are one-character-wide and therefore eye-strainingly small. Furthermore, when displayed as substitutes to the underlying multi-character representation, as [vim2hs] (https://github.com/dag/vim2hs) does, the characters go out of alignment.\n\nHasklig solves the problem the way typographers have always solved ill-fitting characters which co-occur often: [ligatures](https://en.wikipedia.org/wiki/Typographic_ligature). The underlying code stays the same \xe2\x80\x94 only the representation changes.\n\nNot only can multi-character glyphs be rendered more vividly, other problematic things in monospaced fonts, such as spacing can be corrected.\n\n[**Download Hasklig Font Family v1.1**](https://github.com/i-tu/Hasklig/releases/download/1.1/Hasklig-1.1.zip)\n\n#### Hasklig\n![Hasklig Sample](hasklig_example.png?raw=true)\n\n#### Source Code Pro\n![Source Code Pro Sample](SourceCodeProSample.png?raw=true)\n\n### Release notes\n+ [v1.1](https://github.com/i-tu/Hasklig/releases/tag/1.1)\n    + New ligatures `->>`, `:::`, `>=>`, `<=<`, `<=>`, `<->`\n    + Switched to newer version of calt code by [Nikita Prokopov](https://github.com/tonsky/FiraCode). It "doesn\xe2\x80\x99t apply ligatures to long sequences of chars, e.g. !!!!, >>>>, etc"\n    + Fixed `++` and `+++` line inconsistency in heavy italic weights\n+ [v1.0](https://github.com/i-tu/Hasklig/releases/tag/1.0)\n    + Updates to the latest version of SCP\n    + Hasklig moves to a ligature substitution mechanism borrowed from the excellent [Fira Code by Nikita Prokopov](https://github.com/tonsky/FiraCode)\n+ [v0.9]((https://github.com/i-tu/Hasklig/releases/download/0.9/Hasklig-0.9.zip)): This is a major update so YMMV. Please report any issues.\n\t+ Converted to UFO format and updated base fonts to benefit from work done on [Source Code Pro](https://github.com/adobe-fonts/source-code-pro/):\n\t\t- ***Italics!***\n\t\t- Greek & Cyrillic script support\n\t\t- Better powerline symbols\n\t\t- [Much, much more](https://github.com/adobe-fonts/source-code-pro/releases/tag/2.010R-ro%2F1.030R-it)\n\t- Added tags that enable support for some IntelliJ IDEA Builds\n+ v0.4: New ligatures: `<*` `<*>` `<+>` `<$>` `***`  `<|>` `!!` `||` `===` `==>`,  [Powerline](https://github.com/powerline/powerline) symbol support\n+ v0.3: New ligatures: `<<<` `>>>` `<>` and `+++`\n+ v0.2: Lengthened `==` and `/=` to match other equals signs\n+ v0.1: Ligatures `<-` `->` `=>` `>>` `<<` `>>=` `=<<` `..` `...` `::` `-<` `>-` `-<<` `>>-` `++` `/=` and `==`\n\n#### Currently implemented symbols\n`<*` `<*>` `<+>` `<$>` `***` `<|` `|>`  `<|>` `!!` `||` `===` `==>` `<<<` `>>>` `<>` `+++` `<-` `->` `=>` `>>` `<<` `>>=` `=<<` `..` `...` `::` `-<` `>-` `-<<` `>>-` `++` `/=` `==`\n\n#### Editor Support\nThis list is compiled based on reports on the current state of support for code editors and terminals. This list\n\n#### Supported editors\n+ Atom (*[since v1.1.0](http://blog.atom.io/2015/10/29/atom-1-1-is-out.html)*)\n  - Can also be installed as package courtesy of [atom-hasklig](https://atom.io/packages/hasklig) by [adilparvez](https://github.com/adilparvez)\n+ BBEdit 11 ([Instructions](https://github.com/i-tu/Hasklig/issues/3#issue-46601683))\n+ Chocolat\n+ Geany\n+ gEdit\n+ iTerm2 (*[Currently only using beta build \xe2\x80\x93 3.1 and onwards](https://gitlab.com/gnachman/iterm2/issues/3568#note_13118332)*)\n+ Kate\n+ Konsole\n+ KWrite\n+ Leksah (_x64 W8 reported not working_)\n+ Light Table ([Instructions](https://github.com/LightTable/LightTable/issues/1459#issuecomment-57366504))\n+ MacVim (_Since release 79. See [Issue 32](https://github.com/i-tu/Hasklig/issues/32)_)\n+ QtCreator (_v.3.2.2 on GNU/Linux x64_)\n+ RStudio\n+ Smultron\n+ Sublime Text 3\n+ Terminal (OSX)\n+ TextEdit\n+ TextMate (_from version 2.0-alpha.9549 onwards_)\n+ Vico\n+ Visual Studio 2015\n+ Visual Studio Code\n+ Xcode (requires [an additional plugin](https://github.com/robertvojta/LigatureXcodePlugin))\n+ IntelliJ IDEA (*[since v2016.2](https://blog.jetbrains.com/idea/2016/07/intellij-idea-2016-2-is-here)*)\n\n#### No support\n- Emacs\n- gVim (_output corrupted. A_ [patch](https://groups.google.com/forum/#!topic/vim_dev/0sETSAwe5Wo) _exists, but it has not been incorporated into mainstream gVim._)\n- KDevelop 4\n- Notepad++\n- Xamarin Studio/Monodevelop\n\n\n### Building the fonts from source\n\n#### Requirements\n\nTo build the binary font files from source, you need to have installed the\n[Adobe Font Development Kit for OpenType](http://www.adobe.com/devnet/opentype/afdko.html) (AFDKO). The AFDKO\ntools are widely used for font development today, and are part of most font\neditor applications.\n\nSome SVG glyphs are inserted into the fonts using Python [FontTools](https://pypi.python.org/pypi/FontTools).\n\n#### Building font instances from masters\n\nThis repository only includes so-called *master* weights of the fonts (effectively extralight and black).\nThe shapes of the weights in between these extremities are calculated by `makeInstancesUFO` supplied with `.designspace` files.\nFor convenience, the shell script **buildInstances** is provided, which  executes `makeInstancesUFO`, calculating all the italic and regular font weight shapes.\n\n```sh\n$ ./buildInstances.sh\n```\n\n#### Building one font\n\nThe key to building OTF or TTF fonts is `makeotf`, which is part of the AFDKO toolset.\nInformation and usage instructions can be found by executing `makeotf -h`.\n\nIn this repository, all necessary files are in place for building the OTF and TTF fonts.\nFor example, build a binary OTF font for the Regular style like this:\n\n```sh\n$ cd Roman/Regular/\n$ makeotf -r\n```\n\n#### Building all fonts\n\nFor convenience, a shell script named **build** is provided in the root directory.\nIt builds all OTFs and TTFs, and can be executed by typing:\n\n```sh\n$ ./build.sh\n```\n\nor this on Windows:\n\n```sh\n> build.cmd\n```\n\n\n### Credits\nOriginal idea, design and implementation of code ligatures by Ian Tuomi 2014-2015.\nThis typeface extends [Source Code Pro](https://github.com/adobe-fonts/source-code-pro) with ligatures.\n'