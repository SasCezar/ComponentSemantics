b'[![Serverless](http://public.serverless.com/badges/v3.svg)](http://www.serverless.com)\n[![CircleCI Status](https://circleci.com/gh/craftship/codebox-npm.svg?style=shield)](https://circleci.com/gh/craftship/codebox-npm)\n[![Coverage Status](https://coveralls.io/repos/github/craftship/codebox-npm/badge.svg?branch=master&cb=1)](https://coveralls.io/github/craftship/codebox-npm?branch=master)\n\n<img src="https://s3-eu-west-1.amazonaws.com/learn.craftship.io/codebox_logo.png" height="150"/>\n\n## Overview\nCodebox npm is a serverless npm registry to allow companies that wish to keep their intellectual property. It allows sharing of npm modules within a company but additionally allows access to all of the modules on public npm. One other major difference is that it replaces `npm login` authentication to be via github / github enterprise.  Users are always required to be authenticated when using codebox as their npm registry.\n\nIt is currently compatible with the latest version of the npm & yarn cli.\n\n## Local Deployment\n\nThe quickest way to deploy your own npm registry from your local machine is to follow the following guide.\n\n### Prerequisites\n* A GitHub / GitHub Enterprise application is registered (e.g. [for GitHub](https://github.com/settings/developers)), you will need the `Client ID` and `Secret`.\n* You have `AWS` environment credentials setup with enough access to deploy Serverless resources on your local machine, you can follow the standard guide from Amazon [here](http://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/setup-credentials.html).\n* Latest version of Serverless installed globally (`npm install serverless -g` or `yarn global add serverless`).\n\n#### Steps\n* `serverless install --url https://github.com/craftship/codebox-npm/tree/0.21.2 --name my-npm-registry` - pick whichever name you prefer for your registry\n* `cd my-npm-registry`\n* `npm install`\n* Setup your environment variables:\n```\nexport CODEBOX_REGION="eu-west-1" # Set the AWS region you wish your registry to be deployed to\nexport CODEBOX_ADMINS="" # Comma seperated list of github usernames (e.g. "jon,kadi"), these users will be the only ones able to publish\nexport CODEBOX_REGISTRY="https://registry.npmjs.org/" # The NPM mirror you wish to proxy through to\nexport CODEBOX_BUCKET="my-npm-registry-storage" # The name of the bucket in which you wish to store your packages\nexport CODEBOX_GITHUB_URL="https://api.github.com/" # The GitHub / GitHub Enterprise **api** url\nexport CODEBOX_GITHUB_CLIENT_ID="client_id" # The client id for your GitHub application\nexport CODEBOX_GITHUB_SECRET="secret" # The secret for your GitHub application\nexport CODEBOX_RESTRICTED_ORGS="" # OPTIONAL: Comma seperated list of github organisations to only allow access to users in that org (e.g. "craftship,myorg").  Useful if using public GitHub for authentication, as by default all authenticated users would have access.\n```\n* `serverless deploy --stage prod` (pick which ever stage you wish)\n* `npm set registry <url>` - `<url>` being the base url shown in the terminal after deployment completes, such as:\n`https://abcd12345.execute-api.eu-west-1.amazonaws.com/dev/registry/`\n\n## Using it in your Repositories\nThe easiest way to ensure developers are using the correct private registry url is to setup a `.npmrc` file.  This contains default settings that npm will pick up on and will ensure the registry is set per repository.\n\nThis is especially great for repositories you wish developers to allow publishing and keep private.  Here is an example `.npmrc` file:\n\n\n```\nregistry=https://ab1cd3ef4.execute-api.eu-west-1.amazonaws.com/prod/registry\nalways-auth=true\n```\n\nIf a user is doing any `npm` operation for the first time in the repository then they will need to `npm login`.  `always-auth=true` allows yarn to be supported in your project.\n\n## `npm login` Usage\nOnce you are using the private registry you are required to always be authenticated with npm. This ensures not just anyone can request private packages that are not to be shared with the outside world.\n\nTo login you can use the `npm login` cli command, if you have 2FA enabled you will need to (when prompted) enter the username in the format of your GitHub username.otp e.g. `jonsharratt.123456`. Once logged in it will store a long life token that will be used going forward.\n\nYou are now able to use npm commands as normal.\n\n## `yarn login` Usage\nThe best way to setup yarn authentication is to do an initial `npm login` so it can support a 2FA login if you have it enabled.\n\nOnce done ensure you have a project based `.npmrc` config setup a per the "Using it in your Repositories" guide above.  The `always-auth=true` option ensures yarn will work with your `codebox-npm` registry.\n\nYarn does not require an explicit `yarn login` as in this scenario it uses your `.npmrc` config instead.\n\n## Admins / Publishing Packages\n`npm publish` works as it normally does via the npm CLI.  By default all users that authenticate have read only access.  If you wish to allow publish rights then you need to set the `CODEBOX_ADMINS` environment variable to a comma separated list of GitHub usernames such as `jonsharratt,kadikraman` and re-deploy.\n\n## Setup with your CI\nWe recommend creating a GitHub user that can represent your team as a service account.  Once created you can then use that account to `npm login` to the private registry.\n\nYou then need to get the generated token and login url (note the login url is not the same as the registry url).  Do this by running `cat ~/.npmrc`.  As an example you should see an entry that looks like the following:\n\n```\n//ab12cd34ef5.execute-api.eu-west-1.amazonaws.com/prod/:_authToken=dsfdsf678sdf78678768dsfsduihsd8798897989\n```\n\nIn your CI tool you can then set the following environment variables (e.g. using the example above):\n```\nNPM_REGISTRY_LOGIN_URL=//ab12cd34ef5.execute-api.eu-west-1.amazonaws.com/prod/\nNPM_AUTH_TOKEN=dsfdsf678sdf78678768dsfsduihsd8798897989\n```\n\nTo allow your CI to access to the npm registry you should have a `.npmrc` file in the root of your repository, if not, as mentioned above we recommend doing this.\n\nThen as a pre build step before any `npm install` / package installs run the following to inject the authentication url into your `.npmrc` file.\n\n```\necho "$NPM_REGISTRY_LOGIN_URL:_authToken=$NPM_AUTH_TOKEN" >> .npmrc\n```\n\n**Note:**\nYou can then reuse this build step for all of your repositories using your private npm registry.\n\n## Custom Domain\nIf you are happy with Codebox on the AWS domain and wish to move it to a custom domain, instructions can be found on the AWS website [here](http://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-custom-domains.html).\n\nOnce you have your custom domain setup you will need to ensure packages already published are migrated by running the following command (supply only the host of your custom domain):\n\n`serverless codebox domain --stage yourstage --host custom-domain.com`\n\n## Other Resources\n\n[Blog (Previously named Yith)](https://craftship.io/open/source/serverless/private/npm/registry/yith/2016/09/26/serverless-yith.html)\n\n[FAQ](https://github.com/craftship/codebox-npm/wiki/FAQ)\n'