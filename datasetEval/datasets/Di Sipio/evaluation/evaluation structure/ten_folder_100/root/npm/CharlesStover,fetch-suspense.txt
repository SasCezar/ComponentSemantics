b'# useFetch [![Tweet](https://img.shields.io/twitter/url/http/shields.io.svg?style=social)](https://twitter.com/intent/tweet?text=You%20can%20now%20use%20React%20Suspense%20with%20the%20Fetch%20API!&url=https://github.com/CharlesStover/fetch-suspense&via=CharlesStover&hashtags=react,reactjs,javascript,typescript,webdev,webdevelopment) [![version](https://img.shields.io/npm/v/fetch-suspense.svg)](https://www.npmjs.com/package/fetch-suspense) [![minified size](https://img.shields.io/bundlephobia/min/fetch-suspense.svg)](https://www.npmjs.com/package/fetch-suspense) [![minzipped size](https://img.shields.io/bundlephobia/minzip/fetch-suspense.svg)](https://www.npmjs.com/package/fetch-suspense) [![downloads](https://img.shields.io/npm/dt/fetch-suspense.svg)](https://www.npmjs.com/package/fetch-suspense) [![build](https://api.travis-ci.com/CharlesStover/fetch-suspense.svg)](https://travis-ci.com/CharlesStover/fetch-suspense/)\n\n`useFetch` is a React hook that supports the React 16.6 Suspense component\nimplementation.\n\nThe design decisions and development process for this package are outlined in\nthe Medium article\n[React Suspense with the Fetch API](https://medium.com/@Charles_Stover/react-suspense-with-the-fetch-api-a1b7369b0469).\n\n## Install\n\n* `npm install fetch-suspense` or\n* `yarn add fetch-suspense`\n\n## Examples\n\n### Basic Example\n\n```javascript\nimport useFetch from \'fetch-suspense\';\nimport React, { Suspense } from \'react\';\n\n// This fetching component will be delayed by Suspense until the fetch request\n//   resolves. The return value of useFetch will be the response of the server.\nconst MyFetchingComponent = () => {\n  const response = useFetch(\'/path/to/api\', { method: \'POST\' });\n  return \'The server responded with: \' + response;\n};\n\n// The App component wraps the asynchronous fetching component in Suspense.\n// The fallback component (loading text) is displayed until the fetch request\n//   resolves.\nconst App = () => {\n  return (\n    <Suspense fallback="Loading...">\n      <MyFetchingComponent />\n    </Suspense>\n  );\n};\n```\n\n### Using a Custom Fetch API\n\nIf you don\'t want to rely on the global `fetch` API, you can create your own\n`useFetch` hook by importing the `createUseFetch` helper function.\n\n```javascript\nimport { createUseFetch } from \'fetch-suspense\';\nimport myFetchApi from \'my-fetch-package\';\nimport React, { Suspense } from \'react\';\n\n// Create a useFetch hook using one\'s own Fetch API.\n// NOTE: useFetch hereafter refers to this constant, not the default export of\n//   the fetch-suspense package.\nconst useFetch = createUseFetch(myFetchApi);\n\n// This fetching component will be delayed by Suspense until the fetch request\n//   resolves. The return value of useFetch will be the response of the server.\nconst MyFetchingComponent = () => {\n  const response = useFetch(\'/path/to/api\', { method: \'POST\' });\n  return \'The server responded with: \' + response;\n};\n\n// The App component wraps the asynchronous fetching component in Suspense.\n// The fallback component (loading text) is displayed until the fetch request\n//   resolves.\nconst App = () => {\n  return (\n    <Suspense fallback="Loading...">\n      <MyFetchingComponent />\n    </Suspense>\n  );\n};\n```\n\n### Including Fetch Metadata\n\nTo include fetch metadata with your response, include an `options` parameter\nwith `metadata: true`.\n\n```javascript\nimport useFetch from \'fetch-suspense\';\nimport React, { Suspense } from \'react\';\n\n// This fetching component will be delayed by Suspense until the fetch request\n//   resolves. The return value of useFetch will be the response of the server\n//   AS WELL AS metadata for the request.\nconst MyFetchingComponent = () => {\n  const { contentType, response } = useFetch(\n    \'/path/to/api\',\n    { method: \'POST\' },\n    { metadata: true }, // <--\n  );\n  return `The server responded with ${contentType}: ${response}`;\n};\n\n// The App component wraps the asynchronous fetching component in Suspense.\n// The fallback component (loading text) is displayed until the fetch request\n//   resolves.\nconst App = () => {\n  return (\n    <Suspense fallback="Loading...">\n      <MyFetchingComponent />\n    </Suspense>\n  );\n};\n```\n\n## Options\n\nThe supported options for the third, options parameter are:\n\n### lifespan?: number\n\n_Default: 0_\n\nThe number of milliseconds to cache the result of the request. Each time the\ncomponent mounts before this many milliseconds have passed, it will return the\nresponse from the last time this same request was made.\n\nIf 0, the cache will be last the remainder of the browser session.\n\n### metadata?: boolean\n\n_Default: false_\n\nIf true, the `useFetch` hook will return metadata _in addition to_ the response\nfrom the fetch request. Instead of returning just the response, an interface\nas follows will be returned:\n\n```typescript\ninterface UseFetchResponse {\n  bodyUsed: boolean;\n  contentType: null | string;\n  headers: Headers;\n  ok: boolean;\n  redirected: boolean;\n  // The same response from the server that would be returned if metadata were\n  //   false. It is an Object is the server responded with JSON, and it is a\n  //   string if the server responded with plain text.\n  response: Object | string;\n  status: number;\n  statusText: string;\n  url: string;\n}\n```\n\nYou can access these properties easily through destructuring. See\n[Including Fetch Metadata](#including-fetch-metadata).\n\n## Sponsor \xf0\x9f\x92\x97\n\nIf you are a fan of this project, you may\n[become a sponsor](https://github.com/sponsors/CharlesStover)\nvia GitHub\'s Sponsors Program.\n'