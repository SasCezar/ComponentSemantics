b'# Angular Lib for OpenID Connect Code Flow with PKCE and Implicit Flow\n\n[![Build Status](https://travis-ci.org/damienbod/angular-auth-oidc-client.svg?branch=master)](https://travis-ci.org/damienbod/angular-auth-oidc-client) [![npm](https://img.shields.io/npm/v/angular-auth-oidc-client.svg)](https://www.npmjs.com/package/angular-auth-oidc-client) [![npm](https://img.shields.io/npm/dm/angular-auth-oidc-client.svg)](https://www.npmjs.com/package/angular-auth-oidc-client) [![npm](https://img.shields.io/npm/l/angular-auth-oidc-client.svg)](https://www.npmjs.com/package/angular-auth-oidc-client)\n\n> OpenID Code Flow with PKCE, OpenID Connect Implicit Flow\n\n## OpenID Certification\n\nThis library is <a href="http://openid.net/certification/#RPs">certified</a> by OpenID Foundation. (RP Implicit and Config RP)\n\n<a href="http://openid.net/certification/#RPs"><img src="https://damienbod.files.wordpress.com/2017/06/oid-l-certification-mark-l-rgb-150dpi-90mm.png" alt="" width="200" /></a>\n\n## Features\n\n-   version 4.1.0 Angular 4 to Angular 5.2.10, Version 6.0.0, Angular 6 onwards\n-   Supports OpenID Connect Code Flow with PKCE\n-   Supports OpenID Connect Implicit Flow http://openid.net/specs/openid-connect-implicit-1_0.html\n-   Complete client side validation for REQUIRED features\n-   OpenID Connect Session Management 1.0 http://openid.net/specs/openid-connect-session-1_0.html\n-   AOT build\n-   Can be lazy loaded\n\nDocumentation : [Quickstart](https://github.com/damienbod/angular-auth-oidc-client) | [API Documentation](https://github.com/damienbod/angular-auth-oidc-client/blob/master/API_DOCUMENTATION.md) | [Changelog](https://github.com/damienbod/angular-auth-oidc-client/blob/master/CHANGELOG.md)\n\n## Using the package\n\nNavigate to the level of your package.json and type\n\n```typescript\n npm install angular-auth-oidc-client\n```\n\nor with yarn\n\n```typescript\n yarn add angular-auth-oidc-client\n```\n\nor you can add the npm package to your package.json\n\n```typescript\n "angular-auth-oidc-client": "^10.0.10"\n```\n\nand type\n\n```typescript\n npm install\n```\n\n## Configuration\n\n### Approach 1: `APP_INITIALIZER`\n\nImport the module and services in your module.\n\nThe `OidcSecurityService` has a dependency on the `HttpClientModule` which needs to be imported. The angular-auth-oidc-client module supports all versions of Angular 4.3 onwards.\n\n## Loading the configuration from the server\n\n```typescript\nimport { HttpClientModule } from \'@angular/common/http\';\nimport { APP_INITIALIZER, NgModule } from \'@angular/core\';\nimport { BrowserModule } from \'@angular/platform-browser\';\nimport { RouterModule } from \'@angular/router\';\nimport { AuthModule, ConfigResult, OidcConfigService, OidcSecurityService, OpenIdConfiguration } from \'angular-auth-oidc-client\';\nimport { AppComponent } from \'./app.component\';\n\nconst oidc_configuration = \'assets/auth.clientConfiguration.json\';\n// if your config is on server side\n// const oidc_configuration = ${window.location.origin}/api/ClientAppSettings\n\nexport function loadConfig(oidcConfigService: OidcConfigService) {\n    return () => oidcConfigService.load(oidc_configuration);\n}\n\n@NgModule({\n    declarations: [AppComponent],\n    imports: [\n        BrowserModule,\n        HttpClientModule,\n        RouterModule.forRoot([\n            { path: \'\', component: AppComponent },\n            { path: \'home\', component: AppComponent },\n            { path: \'forbidden\', component: AppComponent },\n            { path: \'unauthorized\', component: AppComponent },\n        ]),\n        AuthModule.forRoot(),\n    ],\n    providers: [\n        OidcConfigService,\n        {\n            provide: APP_INITIALIZER,\n            useFactory: loadConfig,\n            deps: [OidcConfigService],\n            multi: true,\n        },\n    ],\n    bootstrap: [AppComponent],\n})\nexport class AppModule {\n    constructor(private oidcSecurityService: OidcSecurityService, private oidcConfigService: OidcConfigService) {\n        this.oidcConfigService.onConfigurationLoaded.subscribe((configResult: ConfigResult) => {\n\t\t\n            // Use the configResult to set the configurations\n\t\t\t\n            const config: OpenIdConfiguration = {\n                stsServer: configResult.customConfig.stsServer,\n                redirect_url: \'https://localhost:4200\',\n                client_id: \'angularClient\',\n                scope: \'openid profile email\',\n                response_type: \'code\',\n                silent_renew: true,\n                silent_renew_url: \'https://localhost:4200/silent-renew.html\',\n                log_console_debug_active: true,\n                // all other properties you want to set\n            };\n\n            this.oidcSecurityService.setupModule(config, configResult.authWellknownEndpoints);\n        });\n    }\n}\n```\n\n#### assets/auth.clientConfiguration.json\n\nSee [Auth documentation](https://github.com/damienbod/angular-auth-oidc-client/blob/master/API_DOCUMENTATION.md#authconfiguration)\nfor the detail of each field.\n\n```json\n{\n    "stsServer": "https://localhost:44318",\n    "redirect_url": "https://localhost:44311",\n    "client_id": "angularclient",\n    "response_type": "code",\n    "scope": "dataEventRecords securedFiles openid profile",\n    "post_logout_redirect_uri": "https://localhost:44311",\n    "start_checksession": true,\n    "silent_renew": true,\n    "silent_renew_url": "https://localhost:44311/silent-renew.html",\n    "post_login_route": "/home",\n    "forbidden_route": "/forbidden",\n    "unauthorized_route": "/unauthorized",\n    "log_console_warning_active": true,\n    "log_console_debug_active": true,\n    "max_id_token_iat_offset_allowed_in_seconds": 10\n}\n```\n\nAt present only the \'code\' with PKCE, \'id_token token\' or the \'id_token\' flows are supported:\n\n`"response_type": ["code" | "id_token token" | "id_token" ]`\n\n> Note the configuration json must have a property stsServer for this to work.\n\n### Approach 2. `Configuration without APP_INITIALIZER`\n\n```typescript\nexport class AppModule {\n    constructor(public oidcSecurityService: OidcSecurityService) {\n        const config: OpenIdConfiguration = {\n            stsServer: \'https://localhost:44363\',\n            redirect_url: \'https://localhost:44363\',\n            // The Client MUST validate that the aud (audience) Claim contains its client_id value registered at the Issuer identified by the iss (issuer) Claim as an audience.\n            // The ID Token MUST be rejected if the ID Token does not list the Client as a valid audience, or if it contains additional audiences not trusted by the Client.\n            client_id: \'singleapp\',\n            response_type: \'code\', // \'id_token token\' Implicit Flow\n            scope: \'dataEventRecords openid\',\n            post_logout_redirect_uri: \'https://localhost:44363/Unauthorized\',\n            start_checksession: false,\n            silent_renew: true,\n            silent_renew_url: \'https://localhost:44363/silent-renew.html\',\n            post_login_route: \'/dataeventrecords\',\n\n            forbidden_route: \'/Forbidden\',\n            // HTTP 401\n            unauthorized_route: \'/Unauthorized\',\n            log_console_warning_active: true,\n            log_console_debug_active: true,\n            // id_token C8: The iat Claim can be used to reject tokens that were issued too far away from the current time,\n            // limiting the amount of time that nonces need to be stored to prevent attacks.The acceptable range is Client specific.\n            max_id_token_iat_offset_allowed_in_seconds: 10,\n        };\n\n        const authWellKnownEndpoints: AuthWellKnownEndpoints = {\n            issuer: \'https://localhost:44363/.well-known/openid-configuration/jwks\',\n            authorization_endpoint: \'https://localhost:44363/connect/authorize\',\n            token_endpoint: \'https://localhost:44363/connect/token\',\n            userinfo_endpoint: \'https://localhost:44363/connect/userinfo\',\n            end_session_endpoint: \'https://localhost:44363/connect/endsession\',\n            check_session_iframe: \'https://localhost:44363/connect/checksession\',\n            revocation_endpoint: \'https://localhost:44363/connect/revocation\',\n            introspection_endpoint: \'https://localhost:44363/connect/introspect\',\n        };\n\n        this.oidcSecurityService.setupModule(config, authWellKnownEndpoints);\n    }\n}\n```\n\n### Custom STS server well known configuration\n\nSometimes it is required to load custom .well-known/openid-configuration. The load_using_custom_stsServer can be used for this.\n\n```typescript\nexport function loadConfig(oidcConfigService: OidcConfigService) {\n    return () =>\n        oidcConfigService.load_using_custom_stsServer(\n            \'https://login.microsoftonline.com/fabrikamb2c.onmicrosoft.com/v2.0/.well-known/openid-configuration?p=b2c_1_susi\'\n        );\n}\n```\n\n## Usage\n\n### Code Flow with PKCE\n\n> It is recomended flow in SPA applications, see [SECURELY USING THE OIDC AUTHORIZATION CODE FLOW AND A PUBLIC CLIENT WITH SINGLE PAGE APPLICATIONS](https://medium.com/@robert.broeckelmann/securely-using-the-oidc-authorization-code-flow-and-a-public-client-with-single-page-applications-55e0a648ab3a).\n>\n> Not all security service providers and servers support it yet.\n\nCreate the login, logout component and use the oidcSecurityService\n\n```typescript\nimport { Component, OnDestroy, OnInit } from \'@angular/core\';\nimport { OidcSecurityService } from \'angular-auth-oidc-client\';\nimport { filter, take } from \'rxjs/operators\';\n\n@Component({\n    selector: \'app-root\',\n    templateUrl: \'app.component.html\',\n})\nexport class AppComponent implements OnInit, OnDestroy {\n    isAuthenticated: boolean;\n    userData: any;\n\n    constructor(public oidcSecurityService: OidcSecurityService) {\n        if (this.oidcSecurityService.moduleSetup) {\n            this.doCallbackLogicIfRequired();\n        } else {\n            this.oidcSecurityService.onModuleSetup.subscribe(() => {\n                this.doCallbackLogicIfRequired();\n            });\n        }\n    }\n\n    ngOnInit() {\n        this.oidcSecurityService.getIsAuthorized().subscribe(auth => {\n            this.isAuthenticated = auth;\n        });\n\n        this.oidcSecurityService.getUserData().subscribe(userData => {\n            this.userData = userData;\n        });\n    }\n\n    ngOnDestroy(): void {}\n\n    login() {\n        this.oidcSecurityService.authorize();\n    }\n\n    logout() {\n        this.oidcSecurityService.logoff();\n    }\n\n    private doCallbackLogicIfRequired() {\n        // Will do a callback, if the url has a code and state parameter.\n        this.oidcSecurityService.authorizedCallbackWithCode(window.location.toString());\n    }\n}\n```\n\n#### Implicit Flow (Not recommended)\n\nThis flow is no longer recommended, but some servers support this flow only, and not the Code flow with PKCE.\n\nCreate the login, logout component and use the oidcSecurityService\n\n```typescript\nprivate doCallbackLogicIfRequired() {\n  if (window.location.hash) {\n    this.oidcSecurityService.authorizedImplicitFlowCallback();\n  }\n  }\n```\n\nAnd a simple template for the component.\n\n```typescript\n<button *ngIf="!isAuthenticated" (click)="login()">Login</button>\n<button *ngIf="isAuthenticated" (click)="logout()">Logout</button>\n\n<hr />\n\nIs Authenticated: {{ isAuthenticated }}\n\n<br />\n<br />\n\n{{ userData | json }}\n\n```\n\n## Silent Renew\n\nWhen silent renew is enabled, a DOM event will be automatically installed in the application\'s host window.\nThe event `oidc-silent-renew-message` accepts a `CustomEvent` instance with the token returned from the OAuth server\nin its `detail` field.\nThe event handler will send this token to the authorization callback and complete the validation.\n\nPoint the `silent_renew_url` property to an HTML file which contains the following script element to enable authorization.\n\n### Code Flow with PKCE\n\n```javascript\n<script>\n\twindow.onload = function () {\n\t\t/* The parent window hosts the Angular application */\n\t\tvar parent = window.parent;\n\t\t/* Send the id_token information to the oidc message handler */\n\t\tvar event = new CustomEvent(\'oidc-silent-renew-message\', { detail: window.location });\n\t\tparent.dispatchEvent(event);\n\t};\n</script>\n```\n\n### Silent Renew Angular-CLI\n\nAdd the silent-renew.html file to the angular.json assets configuration\n\n```javascript\n"assets": [\n              "projects/sample-code-flow/src/silent-renew.html",\n              "projects/sample-code-flow/src/favicon.ico",\n              "projects/sample-code-flow/src/assets"\n            ],\n```\n\n## Using the access_token\n\nIn the http services, add the token to the header using the oidcSecurityService\n\n```typescript\nprivate setHeaders() {\n\tthis.headers = new HttpHeaders();\n\tthis.headers = this.headers.set(\'Content-Type\', \'application/json\');\n\tthis.headers = this.headers.set(\'Accept\', \'application/json\');\n\n\tconst token = this._securityService.getToken();\n\tif (token !== \'\') {\n\t\tconst tokenValue = \'Bearer \' + token;\n\t\tthis.headers = this.headers.set(\'Authorization\', tokenValue);\n\t}\n}\n```\n\n## Using Guards\n\n```typescript\nimport { Injectable } from \'@angular/core\';\nimport { Router, Route, CanActivate, CanLoad, ActivatedRouteSnapshot, RouterStateSnapshot } from \'@angular/router\';\nimport { Observable } from \'rxjs\';\nimport { map } from \'rxjs/operators\';\n\nimport { OidcSecurityService } from \'angular-auth-oidc-client\';\n\n@Injectable()\nexport class AuthorizationGuard implements CanActivate, CanLoad {\n    constructor(private router: Router, private oidcSecurityService: OidcSecurityService) {}\n\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\n        return this.checkUser();\n    }\n\n    canLoad(state: Route): Observable<boolean> {\n        return this.checkUser();\n    }\n\n    private checkUser(): Observable<boolean> {\n        return this.oidcSecurityService.getIsAuthorized().pipe(\n            map((isAuthorized: boolean) => {\n                if (!isAuthorized) {\n                    this.router.navigate([\'/unauthorized\']);\n                    return false;\n                }\n                return true;\n            })\n        );\n    }\n}\n```\n\n### Note about Guards\n\nThe guard should only be applied to protected URLs. The guard should not be active on the default route, where the authorization request is processed.\n\n## Adding custom parameters to the authorization request\n\nCustom parameters can be added to the auth request by using the setCustomRequestParameters method. Here you could add ui_locale, acr or whatever you request for your token server.\n\n```typescript\nthis.oidcSecurityService.setCustomRequestParameters({ \'ui_locales\': culture});\n```\n\n## Custom Storage\n\nIf you need, you can create a custom storage (for example to use cookies).\n\nImplement `OidcSecurityStorage` class-interface and the `read` and `write` methods:\n\n```typescript\n@Injectable()\nexport class CustomStorage implements OidcSecurityStorage {\n\n    public read(key: string): any {\n        ...\n        return ...\n    }\n\n    public write(key: string, value: any): void {\n        ...\n    }\n\n}\n```\n\nThen provide the class in the module:\n\n```typescript\n@NgModule({\n    imports: [\n        ...\n        AuthModule.forRoot({ storage: CustomStorage })\n    ],\n    ...\n})\n```\n\nSee also `oidc.security.storage.ts` for an example.\n\n## Http Interceptor\n\nThe HttpClient allows you to write [interceptors](https://angular.io/guide/http#intercepting-all-requests-or-responses). A common usecase would be to intercept any outgoing HTTP request and add an authorization header. Keep in mind that injecting OidcSecurityService into the interceptor via the constructor results in a cyclic dependency. To avoid this use the [injector](https://angular.io/api/core/Injector) instead.\n\n```typescript\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n    private oidcSecurityService: OidcSecurityService;\n\n    constructor(private injector: Injector) {}\n\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        let requestToForward = req;\n\n        if (this.oidcSecurityService === undefined) {\n            this.oidcSecurityService = this.injector.get(OidcSecurityService);\n        }\n        if (this.oidcSecurityService !== undefined) {\n            let token = this.oidcSecurityService.getToken();\n            if (token !== \'\') {\n                let tokenValue = \'Bearer \' + token;\n                requestToForward = req.clone({ setHeaders: { Authorization: tokenValue } });\n            }\n        } else {\n            console.debug(\'OidcSecurityService undefined: NO auth header!\');\n        }\n\n        return next.handle(requestToForward);\n    }\n}\n```\n\n## Authorizing in a popup or iframe\n\nYou can call the Provider\'s authorization endpoint in a popup or iframe instead of navigating to it in the app\'s parent window.\nThis allows you to have the Provider\'s consent prompt display in a popup window to avoid unloading and reloading the app,\nor to authorize the user silently by loading the endpoint in a hidden iframe if that supported by the Provider.\n\nTo get the fully-formed authorization URL, pass a handler function to `OidcSecurityService.authorize`\n(this will also prevent the default behavior of loading the authorization endpoint in the current window):\n\n```typescript\nlogin() {\n    this.oidcSecurityService.authorize((authUrl) => {\n        // handle the authorrization URL\n        window.open(authUrl, \'_blank\', \'toolbar=0,location=0,menubar=0\');\n    });\n}\n```\n\n### Silent Renew Implicit Flow\n\n```javascript\n<script>\n    window.onload = function () {\n    /* The parent window hosts the Angular application */\n    var parent = window.parent;\n    /* Send the id_token information to the oidc message handler */\n    var event = new CustomEvent(\'oidc-silent-renew-message\', {detail: window.location.hash.substr(1) });\n    parent.dispatchEvent(event);\n};\n</script>\n```\n\nWhen silent renew is enabled, `getIsAuthorized()` will attempt to perform a renew before returning the authorization state.\nThis allows the application to authorize a user, that is already authenticated, without redirects.\n\nSilent renew requires CSP configuration, see next section.\n\n## X-Frame-Options / CSP ancestor / different domains\n\nIf deploying the client application and the STS server application with 2 different domains,\nthe X-Frame-Options HTTPS header needs to allow all iframes. Then use the CSP HTTPS header to only allow the required domains.\n**The silent renew requires this.**\n\nAdd this header to responses from the server that serves your SPA:\n\n```\nContent-Security-Policy: script-src \'self\' \'unsafe-inline\';style-src \'self\' \'unsafe-inline\';img-src \'self\' data:;font-src \'self\';frame-ancestors \'self\' https://localhost:44318;block-all-mixed-content\n```\n\nwhere `https://localhost:44318` is the address of your STS server.\n\ne.g. if you use NginX to serve your Angular application, it would be\n\n```\nhttp {\n  server {\n    ...\n    add_header Content-Security-Policy "script-src \'self\' \'unsafe-inline\';style-src \'self\' \'unsafe-inline\';img-src \'self\' data:;font-src \'self\';frame-ancestors \'self\' https://localhost:44318;block-all-mixed-content";\n```\n\n## Examples using:\n\nhttps://github.com/damienbod/AspNetCoreAngularSignalRSecurity\n\nhttps://github.com/damienbod/dotnet-template-angular\n\nhttps://github.com/damienbod/angular-auth-oidc-sample-google-openid\n\nhttps://github.com/HWouters/ad-b2c-oidc-angular\n\n### Using src code directly:\n\nhttps://github.com/damienbod/AspNet5IdentityServerAngularImplicitFlow\n\n## License\n\nMIT\n'