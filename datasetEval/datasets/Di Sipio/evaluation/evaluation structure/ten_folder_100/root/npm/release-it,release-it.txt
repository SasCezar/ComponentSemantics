b'# Release It! \xf0\x9f\x9a\x80\n\n\xf0\x9f\x9a\x80 Generic CLI tool to automate versioning and package publishing related tasks:\n\n<img align="right" src="./docs/assets/release-it.gif?raw=true" height="280">\n\n- Execute test & build commands\n- Bump version (in e.g. `package.json`)\n- [Git commit, tag, push](#git)\n- [Create release at GitHub](#github-releases) or [GitLab](#gitlab-releases)\n- [Generate changelog](#changelog)\n- [Publish to npm](#publish-to-npm)\n- [Manage pre-releases](#manage-pre-releases)\n- [Hooks](#hooks)\n- Extend with [plugins](#plugins)\n- Release from any [CI/CD environment](./docs/ci.md)\n\n[![Build Status](https://travis-ci.org/release-it/release-it.svg?branch=master)](https://travis-ci.org/release-it/release-it)\n[![npm version](https://badge.fury.io/js/release-it.svg)](https://badge.fury.io/js/release-it)\n[![codecov](https://codecov.io/gh/release-it/release-it/branch/master/graph/badge.svg)](https://codecov.io/gh/release-it/release-it)\n\n## Links\n\n- Since v11, [release-it supports plugins](https://github.com/release-it/release-it/issues/501), so virtually any\n  functionality can be added to your release process.\n- For **updates**, see [CHANGELOG.md](./CHANGELOG.md) for major updates, and\n  [releases](https://github.com/release-it/release-it/releases) for a detailed version history.\n- To **contribute**, please read [CONTRIBUTING.md](./CONTRIBUTING.md) first.\n- Please [open an issue](https://github.com/release-it/release-it/issues/new) if anything is missing or unclear in this\n  documentation.\n\n<details>\n  <summary><strong>Table of Contents</strong> (click to expand)</summary>\n\n<!-- toc -->\n\n- [Installation](#installation)\n- [Usage](#usage)\n- [Configuration](#configuration)\n- [Interactive vs. CI mode](#interactive-vs-ci-mode)\n- [Latest version](#latest-version)\n- [Prerequisite checks](#prerequisite-checks)\n- [Git](#git)\n- [Mercurial](#mercurial)\n- [GitHub Releases](#github-releases)\n- [GitLab Releases](#gitlab-releases)\n- [Changelog](#changelog)\n- [Publish to npm](#publish-to-npm)\n- [Manage pre-releases](#manage-pre-releases)\n- [Hooks](#hooks)\n- [Scripts (deprecated)](#scripts-deprecated)\n- [Plugins](#plugins)\n- [Distribution repository](#distribution-repository)\n- [Metrics](#metrics)\n- [Troubleshooting & debugging](#troubleshooting--debugging)\n- [Use release-it programmatically](#use-release-it-programmatically)\n- [Example projects using release-it](#example-projects-using-release-it)\n- [Resources](#resources)\n- [Credits](#credits)\n\n<!-- tocstop -->\n\n</details>\n\n## Installation\n\nAlthough release-it is a **generic** release tool, installation requires npm. A `package.json` file is not required. The\nrecommended way to install release-it also adds basic configuration. Answer one or two questions and it\'s ready:\n\n```bash\nnpm init release-it\n```\n\nAlternatively, install it manually, and add the `release` script to `package.json`:\n\n```bash\nnpm install --save-dev release-it\n```\n\n```json\n{\n  "name": "my-package",\n  "version": "1.0.0",\n  "scripts": {\n    "release": "release-it"\n  },\n  "devDependencies": {\n    "release-it": "*"\n  }\n}\n```\n\nNow you can run `npm run release` from the command line (any release-it arguments behind the `--`):\n\n```bash\nnpm run release\nnpm run release -- minor --ci\n```\n\n### Global usage\n\nUse release-it in any (non-npm) project, take it for a test drive, or install it globally:\n\n```bash\n# Run release-it from anywhere (without installation)\nnpx release-it\n\n# Install globally and run from anywhere\nnpm install --global release-it\nrelease-it\n```\n\n## Usage\n\nRelease a new version:\n\n```bash\nrelease-it\n```\n\nYou will be prompted to select the new version. To skip the first prompt, provide a specific increment or version:\n\n```bash\nrelease-it minor\nrelease-it 0.8.3\n```\n\nFor a "dry run", to show the interactivity and the commands it _would_ execute:\n\n```bash\nrelease-it --dry-run\n```\n\nNote: read-only commands are still executed (`$ ...`), while the rest is not (`! ...`):\n\n```bash\n$ git rev-parse --git-dir\n.git\n! git add package.json\n! git commit --message="Release 0.8.3"\n```\n\n## Configuration\n\nOut of the box, release-it has sane defaults, and [plenty of options](./conf/release-it.json) to configure it. Put\n(only) the options to override in a configuration file. This is where release-it looks for configuration:\n\n- `.release-it.json`\n- `.release-it.js` (export the configuration object: `module.exports = {}`)\n- `.release-it.yaml` (or `.yml`)\n- `.release-it.toml`\n- `package.json` (in the `release-it` property)\n\nUse `--config` to use another path for the configuration file. An example `.release-it.json`:\n\n```json\n{\n  "git": {\n    "tagName": "v${version}"\n  },\n  "github": {\n    "release": true\n  }\n}\n```\n\nOr in a `release-it` property in `package.json`:\n\n```json\n{\n  "name": "my-package",\n  "devDependencies": {\n    "release-it": "*"\n  },\n  "release-it": {\n    "github": {\n      "release": true\n    }\n  }\n}\n```\n\nOr use YAML in `.release-it.yml`:\n\n```yaml\ngit:\n  commitMessage: \'chore: release v${version}\'\n```\n\nOr TOML in `.release-it.toml`:\n\n```toml\n[hooks]\nbefore:init = "npm test"\n```\n\nAny option can also be set on the command-line, and will have highest priority. Example:\n\n```bash\nrelease-it minor --git.tagName=\'v${version}\' --github.release\n```\n\nBoolean arguments can be negated by using the `no-` prefix:\n\n```bash\nrelease-it --no-npm.publish\n```\n\n## Interactive vs. CI mode\n\nBy default, release-it is **interactive** and allows you to confirm each task before execution:\n\n<img src="./docs/assets/release-it-interactive.gif?raw=true" height="290">\n\nBy using the `--ci` option, the process is fully automated without prompts. The configured tasks will be executed as\ndemonstrated in the first animation above. On a Continuous Integration (CI) environment, this non-interactive mode is\nactivated automatically.\n\nNote: the old `-n` (or `--non-interactive`) option still works and is identical to `--ci`.\n\n## Latest version\n\nFor projects with a `package.json`, its `version` will be used. Otherwise, release-it uses the latest Git tag to\ndetermine which version should be released. In any case, as a last resort, `0.0.0` will be used as the latest version.\n\nUse `--no-increment` to not increment the version.\n\nUse `--no-npm` (or `"npm": false`) to ignore and skip bumping `package.json` (and skip `npm publish`).\n\nAlternatively, a plugin can be used to get the version from anywhere else (e.g. a `VERSION` file). Also see\n[plugins](./docs/plugins.md).\n\n## Prerequisite checks\n\nRead more about [prerequisites checks](./docs/prerequisites.md) release-it does to help prevent incorrect or polluted\nreleases.\n\n## Git\n\nGit projects are supported well by release-it, automating the tasks to stage, commit, tag and push releases to any Git\nremote.\n\n\xe2\x86\x92 See [Git](./docs/git.md) for more details.\n\n## Mercurial\n\nAn experimental [Mercurial plugin](https://github.com/release-it/mercurial) is available.\n\n## GitHub Releases\n\nThe "Releases" tab on GitHub projects links to a page to store the changelog cq. release notes. To add\n[GitHub releases](https://help.github.com/articles/creating-releases/) in your release-it flow:\n\n- Configure `github.release: true`.\n- Obtain a [personal access token](https://github.com/settings/tokens) (release-it only needs "repo" access; no "admin"\n  or other scopes).\n- Make sure the token is available as an environment variable. Example:\n\n```bash\nexport GITHUB_TOKEN="f941e0..."\n```\n\n\xe2\x86\x92 See [GitHub Releases](./docs/github-releases.md) for more details.\n\n## GitLab Releases\n\n[GitLab releases](https://docs.gitlab.com/ee/workflow/releases.html#releases) work just like GitHub releases:\n\n- Configure `gitlab.release: true`.\n- Obtain a [personal access token](https://gitlab.com/profile/personal_access_tokens) (release-it only needs the "api"\n  scope).\n- Make sure the token is available as an environment variable. Example:\n\n```bash\nexport GITLAB_TOKEN="f941e0..."\n```\n\n\xe2\x86\x92 See [GitLab Releases](./docs/gitlab-releases.md) for more details.\n\n## Changelog\n\nBy default, release-it generates a changelog, to show and help select a version for the new release. Additionally, this\nchangelog serves as the release notes for the GitHub or GitLab release.\n\nThe [default command](./conf/release-it.json) is based on `git log ...`. This setting (`git.changelog`) can be\noverridden. To customize the release notes for the GitHub or GitLab release, use `github.releaseNotes` or\n`gitlab.releaseNotes`. Make sure any of these commands output the changelog to `stdout`.\n\nInstead of executing a shell command, a (Handlebars) template can be used to generate the changelog. See\n[auto-changelog](./docs/changelog.md#auto-changelog) for more details. If your project follows conventions, such as the\n[Angular commit guidelines](https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#commits), the\n[@release-it/conventional-changelog](https://github.com/release-it/conventional-changelog) plugin is useful.\n\n\xe2\x86\x92 See [Changelog](./docs/changelog.md) for more details.\n\n## Publish to npm\n\nWith a `package.json` in the current directory, release-it will let `npm` bump the version in `package.json` (and\n`package-lock.json` if present), and publish to the npm registry.\n\n\xe2\x86\x92 See [Publish to npm](./docs/npm.md) for more details.\n\n## Manage pre-releases\n\nWith release-it, it\'s easy to create pre-releases: a version of your software that you want to make available, while\nit\'s not in the stable semver range yet. Often "alpha", "beta", and "rc" (release candidate) are used as identifier for\npre-releases. An example pre-release version is `2.0.0-beta.0`.\n\n\xe2\x86\x92 See [Manage pre-releases](./docs/pre-releases.md) for more details.\n\n## Hooks\n\nUse script hooks to run shell commands at any moment during the release process. The format is `[prefix]:[hook]` or\n`[prefix]:[plugin]:[hook]`:\n\n| part   | value                                                                      |\n| ------ | -------------------------------------------------------------------------- |\n| prefix | `before` or `after`                                                        |\n| plugin | `version`, `git`, `npm`, `github`, `gitlab` or `[plugin-name]`             |\n| hook   | `init`, `beforeBump`, `bump`, `beforeRelease`, `release` or `afterRelease` |\n\nUse the optional `plugin` to hook into a life cycle method before or after any plugin. The core plugins include\n`version`, `git`, `npm`, `github`, `gitlab`. When using a custom plugin, the plugin name will also be available (e.g.\n`@release-it/conventional-changelog` becomes `conventional-changelog`).\n\nSee [execution order](./docs/plugins.md#execution-order) for more details on execution order of plugin lifecycle\nmethods.\n\nAll commands can use configuration variables (like template strings). An array of commands can also be provided, they\nwill run one after another. Some example release-it configuration:\n\n```json\n{\n  "hooks": {\n    "before:init": ["npm run lint", "npm test"],\n    "after:my-plugin:bump": "./bin/my-script.sh",\n    "after:bump": "npm run build",\n    "after:git:release": "echo After git push, before github release",\n    "after:release": "echo Successfully released ${name} v${version} to ${repo.repository}."\n  }\n}\n```\n\nThe variables can be found in the [default configuration](./conf/release-it.json). Additionally, the following variables\nare exposed:\n\n```\nversion\nlatestVersion\nchangelog\nname\nrepo.remote, repo.protocol, repo.host, repo.owner, repo.repository, repo.project\n```\n\nAll variables are available in all hooks. The only exception is that the additional variables listed above are not\navailable in the `init` hook.\n\nUse `--verbose` to also log the output of the commands.\n\n## Scripts (deprecated)\n\nPlease use [hooks](#hooks) instead, as hooks are more flexible. The `scripts` will stay for a while, but will be removed\nin a few major releases after v12. Here\'s how to migrate:\n\n- `scripts.beforeStart` \xe2\x86\x92 `hooks.before:init`\n- `scripts.beforeBump` \xe2\x86\x92 `hooks.before:bump`\n- `scripts.afterBump` \xe2\x86\x92 `hooks.after:bump`\n- `scripts.beforeStage` \xe2\x86\x92 `hooks.after:bump`\n- `scripts.afterRelease` \xe2\x86\x92 `hooks.after:release`\n\n## Plugins\n\nSince v11, release-it can be extended in many, many ways.\n\n\xe2\x86\x92 See [plugins](./docs/plugins.md) for more details.\n\n## Distribution repository\n\nSome projects use a distribution repository. Generated files (such as compiled assets or documentation) can be\ndistributed to a separate repository. Or to a separate branch, such as a `gh-pages`. Some examples include\n[shim repositories](https://github.com/components) and a separate\n[packaged Angular.js repository](https://github.com/angular/bower-angular) for distribution on npm and Bower.\n\nThe `dist.repo` option was removed in v10, but similar setups can still be achieved. Please see the\n[distribution repository](./docs/recipes/distribution-repo.md) recipe for example configurations.\n\n## Metrics\n\nUse `--disable-metrics` to opt-out of sending some anonymous statistical data to Google Analytics. For details, refer to\n[lib/metrics.js](./lib/metrics.js). Please consider to not opt-out: more data means more support for future development.\n\n## Troubleshooting & debugging\n\n- With `release-it --verbose` (or `-V`), release-it prints every custom script/hook and its output.\n- With `release-it -VV`, release-it prints every command (also internal) and its output.\n- Prepend `DEBUG=release-it:* release-it [...]` to print configuration and more error details.\n- Use `DEBUG=* release-it [...]` to include debug output for dependencies, such as\n  [@octokit/rest](https://github.com/octokit/rest.js).\n\n## Use release-it programmatically\n\nWhile mostly used as a CLI tool, release-it can be used as a dependency to ingrate in your own scripts. See\n[use release-it programmatically](./docs/recipes/programmatic.md) for example code.\n\n## Example projects using release-it\n\n- [react-navigation/react-navigation](https://github.com/react-navigation/react-navigation)\n- [swagger-api/swagger-ui](https://github.com/swagger-api/swagger-ui)\n- [js-cookie/js-cookie](https://github.com/js-cookie/js-cookie)\n- [StevenBlack/hosts](https://github.com/StevenBlack/hosts)\n- [react-native-community/react-native-tab-view](https://github.com/react-native-community/react-native-tab-view)\n- [callstack/linaria](https://github.com/callstack/linaria)\n- [blockchain/blockchain-wallet-v4-frontend](https://github.com/blockchain/blockchain-wallet-v4-frontend)\n- [infor-design/enterprise](https://github.com/infor-design/enterprise)\n- [tsqllint/tsqllint](https://github.com/tsqllint/tsqllint)\n- [segmentio/typewriter](https://github.com/segmentio/typewriter)\n- [Repositories that depend on release-it](https://github.com/release-it/release-it/network/dependents)\n- GitHub search for\n  [projects with .release-it.json](https://github.com/search?o=desc&q=in%3Apath+.release-it.json&s=indexed&type=Code)\n\n## Resources\n\n- [semver.org](http://semver.org)\n- [GitHub Help](https://help.github.com) (\xe2\x86\x92 [About Releases](https://help.github.com/articles/about-releases/))\n- [npm Blog: Publishing what you mean to publish](https://blog.npmjs.org/post/165769683050/publishing-what-you-mean-to-publish)\n- [npm Documentation: package.json](https://docs.npmjs.com/files/package.json)\n- [Prereleases and npm](https://medium.com/@mbostock/prereleases-and-npm-e778fc5e2420)\n- [Glob Primer (node-glob)](https://github.com/isaacs/node-glob#glob-primer) (release-it uses\n  [globby](https://github.com/sindresorhus/globby#readme))\n\n## Credits\n\nMajor dependencies:\n\n- [ShellJS](https://documentup.com/shelljs/shelljs)\n- [Inquirer.js](https://github.com/SBoudrias/Inquirer.js)\n- [@octokit/rest](https://github.com/octokit/rest.js)\n\nThe following Grunt plugins have been a source of inspiration:\n\n- [grunt-release](https://github.com/geddski/grunt-release)\n- [grunt-release-component](https://github.com/walmartlabs/grunt-release-component)\n'