b'# shrinkpack\n\n> Fast, resilient, reproducible builds with npm install.\n\n[![NPM version](http://img.shields.io/npm/v/shrinkpack.svg?style=flat-square)](https://www.npmjs.com/package/shrinkpack)\n[![NPM downloads](http://img.shields.io/npm/dm/shrinkpack.svg?style=flat-square)](https://www.npmjs.com/package/shrinkpack)\n[![Dependency Status](http://img.shields.io/david/JamieMason/shrinkpack.svg?style=flat-square)](https://david-dm.org/JamieMason/shrinkpack)\n[![Build Status](http://img.shields.io/travis/JamieMason/shrinkpack/master.svg?style=flat-square)](https://travis-ci.org/JamieMason/shrinkpack)\n[![Follow JamieMason on GitHub](https://img.shields.io/github/followers/JamieMason.svg?style=social&label=Follow)](https://github.com/JamieMason)\n[![Follow fold_left on Twitter](https://img.shields.io/twitter/follow/fold_left.svg?style=social&label=Follow)](https://twitter.com/fold_left)\n\nShrinkpack complements the\n[npm shrinkwrap](https://docs.npmjs.com/cli/shrinkwrap) command by maintaining a\n`node_shrinkwrap` directory in your project, containing the exact same tarballs\nthat `npm install` downloads from\n[https://registry.npmjs.org](https://registry.npmjs.org).\n\nThe rest of the `npm install` process is exactly the same. The only difference\nis that no network activity is necessary when installing and building your\nproject. The `node_shrinkwrap` directory can be ignored in your editor (much\nlike is done with the `node_modules` directory) but is instead checked into\nsource control.\n\n> For context, please see the [target problem](#target-problem) and\n> [justification](#justification) sections of this README.\n\n## \xf0\x9f\x8c\xa9 Installation\n\n```\nnpm install --global shrinkpack\n```\n\n> **Note:** npm had a\n> [regression affecting shrinkwrap](https://github.com/npm/npm/pull/13214) in\n> versions 3.8.8 to 3.10.3.<br> Please ensure your version of `npm` is 3.10.4 or\n> newer, or 3.8.7 or older.\n\n## \xf0\x9f\x95\xb9 Usage\n\n### Command Line\n\n```\nUsage: shrinkpack [options] [directory]\n\nOptions:\n\n  -h, --help           output usage information\n  -V, --version        output the version number\n  -c, --compress       use compressed .tgz tarballs instead of .tar\n  -o, --keep-optional  do not exclude optional dependencies\n\nIcons:\n\n  + Added\n  \xe2\x86\x93 Downloaded\n  \xe2\x86\x92 Imported from Cache\n  i Information\n  - Removed\n  \xe2\x9c\x93 Resolved\n  12:34 Time Taken\n\nCompression:\n\n  Although compressed .tgz files have lower filesizes, storing binary files in\n  Git can result in a gradual increase in the time it takes to push to your\n  repository. Shrinkpack uses uncompressed, plain text .tar files by default,\n  which are handled optimally by Git in the same way that .md, .js, and .css\n  files are for example.\n```\n\n### Node.js\n\nShrinkpack works in 2 phases;\n\n1. Analyse the project and gather all the diffing information between the file\n   system and the shrinkwrap.\n2. Use the diffing information to bring the file system in sync with the\n   shrinkwrap.\n\n```js\nvar shrinkpack = require("shrinkpack");\n\nshrinkpack\n  .analyse({ compress: false, directory: process.cwd(), keepOptional: false })\n  .then(data => shrinkpack.update(data));\n```\n\nOr to run `shrinkpack` in full, including all the additional logging that you\nsee when using the CLI.\n\n```js\nvar shrinkpack = require("shrinkpack");\n\nshrinkpack\n  .cli({ compress: false, directory: process.cwd(), keepOptional: false })\n  .then(() => {});\n```\n\n## \xf0\x9f\xa4\x94 Target Problem\n\nOn most projects I\'ve worked on we\'ve had a [Jenkins](http://jenkins-ci.org/)\n(or similiar) continuous integration environment, where we would run tests,\nanalyse code, gather metrics, and create deployment packages.\n\nEach time code was pushed to our `develop` and `master` branches, a repeatable\nprocess was carried out where a clean workspace was created, the latest version\nof the project was installed and configured, then testing and code analysis took\nplace.\n\nWe were all very happy with this process and the convenience of npm in\nparticular, but the phase of our builds where `npm install` listed a huge amount\nof network traffic would always raise the same concerns;\n\n- This seems slow, wasteful, and inefficient.\n- We _really_ depend on registry.npmjs.org, what do we do if it goes down?\n\nThe first suggestion was always to check in our dependencies, but the idea of\nsome large and chatty commits whenever we chose to upgrade or change them would\nput us off.\n\nSome teams went a little further and decided that pain was acceptable and\ndecided to proceed, only to find that some packages such as\n[phantomjs](https://www.npmjs.com/package/phantomjs) and\n[node-sass](https://github.com/sass/node-sass) helpfully install the appropriate\nbinary for you depending on what system you\'re running.\n\nThis meant that if Chris added `phantomjs` or `node-sass` to the project on his\nMac and checked it into the repository, Helen wouldn\'t be able to use it on her\nWindows Machine.\n\nThe remaining alternatives were proxies, mirrors, and caches-of-sorts. None of\nwhich appealed to us and, grudgingly, we continued as we were\n(<abbr title="Your Mileage May Vary">YMMV</abbr>).\n\n## \xf0\x9f\xa4\xb7\xf0\x9f\x8f\xbd\xe2\x80\x8d\xe2\x99\x80\xef\xb8\x8f Justification\n\nWhenever we add, remove, or update an npm dependency \xe2\x80\x94 we should test our\napplication for regressions before locking down our dependencies to avoid them\nmutating over time.\n\n- You can\'t be sure of this without `npm shrinkwrap`.\n- Checking in `node_modules` is horrible (and doesn\'t work in many cases\n  anyway).\n- You can be reasonably sure of this with `npm shrinkwrap`.\n- You can be completely sure of this with `npm shrinkwrap` and `shrinkpack`.\n\n### npm shrinkwrap\n\n`npm shrinkwrap` is something I would recommend you use anyway, even if you\ndon\'t decide to use `shrinkpack`. It brings certainty and confidence over\nexactly what versions of every nested dependency you\'ve tested against and\napproved.\n\nA tagged release should be a locked-down, fixed point in time which has been\ntested sufficiently enough that it is approved and trusted. When fed into a\nrepeatable, automated deployment process it should always result in the same\noutput.\n\nWithout `npm shrinkwrap` that\'s not guaranteed.\n\nConsider this snippet from the `package.json` of a nested dependency in your\nproject as an example;\n\n```json\n"dependencies": {\n  "lolwut": ">=0.1.0"\n}\n```\n\nIf `lolwut@0.2.4` contains a regression and you\'re not using `npm shrinkwrap`,\nyour project now contains a regression.\n\n### shrinkpack\n\nWith you hopefully convinced of the merits of `npm shrinkwrap`, `shrinkpack`\nwill hopefully be seen as a small and complementary addition.\n\n`shrinkpack` takes the .tgz tarballs of that specific, shrinkwrapped dependency\ngraph saved by `npm shrinkwrap` and stores them within your project.\n\nThis means;\n\n- No need for repeated requests to registry.npmjs.org.\n- Each package/version pair can be checked in as a single tarball, avoiding\n  commits with all kinds of noisy diffs.\n- Packages can be checked in, while still installed by members of the team on\n  different operating systems.\n- Complements the typical `npm shrinkwrap` workflow.\n\n## \xf0\x9f\x8e\xaf Suitability to your project\n\n`shrinkpack` is intended for Developers of Apps, Blogs, and Websites \xe2\x80\x93 any\nproject which is the root consumer of dependencies and not a dependency itself.\nIf your project is intended to be installed as a dependency of another project\nusing `npm install`, let those downstream projects make their own decisions on\nbundling.\n\nThat said, if you\'re developing an npm package and want to use `shrinkpack` to\nspeed up and harden your development and CI environments, adding\n`npm-shrinkwrap.json` and `node_shrinkwrap` to your `.npmignore` file will allow\nyou to do that, without publishing your shrinkpacked dependencies to the\nregistry.\n\nIt\'s not recommended to publish a project with bundled or shrinkpacked\ndependencies to the registry. If that approach were to gain traction, it is\nlikely that the registry would become bloated due to the build up of duplicate\ncopies of packages, bundled amongst various other ones.\n\n## \xe2\x9d\x93 Tutorial\n\n### Create a new project\n\nHere we create a straightforward project which will use Git and npm.\n\n```\nmkdir shrinkpack-demo\ncd shrinkpack-demo\ngit init\necho node_modules >> .gitignore\necho npm-debug.log >> .gitignore\nnpm init --yes\n```\n\n<a href="https://asciinema.org/a/83790" target="_blank"><img src="https://asciinema.org/a/83790.png" alt="asciicast"></a>\n\n### Set some sensible npm defaults\n\nThe default behaviour when installing in npm is to 1) not update package.json\nand 2) include wildcards such as `^`, `~`, or `*` in the version numbers stored\nin package.json if using the `--save` option when installing.\n\nWe want each version of our project to be identical every time it is built, so\nwe can have complete confidence when the time comes to ship it. Therefore, we\nwant a package.json which is always up to date and that contains the exact\nversion numbers we have developed and tested against.\n\n```\necho save=true >> .npmrc\necho save-exact=true >> .npmrc\n```\n\n### Install dependencies\n\nFor the sake of an example, let\'s install the following packages. I\'ve chosen an\nolder version of commander so that we can go through how to update a\nshrinkpacked project later.\n\n```\nnpm install async commander@2.7.1 express lodash request\n```\n\n<a href="https://asciinema.org/a/83792" target="_blank"><img src="https://asciinema.org/a/83792.png" alt="asciicast"></a>\n\nThis is typical behaviour, npm downloads the packages from the registry and\ninstalls them, leaving the following directory structure;\n\n```\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 .gitignore\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 node_modules\n\xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 (lots of files and folders)\n\xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 package.json\n```\n\n### Shrinkwrap dependencies\n\nThe `--dev` option tells npm to also include `devDependencies` when creating an\n`npm-shrinkwrap.json` for your project.\n\n```\nnpm shrinkwrap --dev\n```\n\n<a href="https://asciinema.org/a/83795" target="_blank"><img src="https://asciinema.org/a/83795.png" alt="asciicast"></a>\n\n### Create a project-specific cache (optional)\n\nWhen using `shrinkpack`, the local file path to dependencies will be added to\nthe `npm` client\'s [local cache](https://docs.npmjs.com/cli/cache). This can be\nproblematic when working on several projects on a single machine\n([#31](https://github.com/JamieMason/shrinkpack/issues/31)).\n\nThis step prevents npm from using this project as a registry should you install\nthe same package/version pair on another project on your machine.\n\n```\necho cache=node_cache >> .npmrc\necho /node_cache >> .gitignore\n```\n\n### Shrinkpack dependencies\n\nWhenever you run `npm install`, npm downloads a .tgz file from\nhttp://registry.npmjs.org containing the installation for each package.\nShrinkpack saves these files in a `node_shrinkwrap` directory in your project,\nbefore updating each record in `npm-shrinkwrap.json` to point at those instead\nof the public registry.\n\n```\nshrinkpack .\n```\n\nEach entry will look something like this\n\n```json\n"lodash": {\n  "version": "4.0.0",\n  "from": "lodash@4.0.0",\n  "resolved": "./node_shrinkwrap/lodash-4.0.0.tgz"\n}\n```\n\n<a href="https://asciinema.org/a/83796" target="_blank"><img src="https://asciinema.org/a/83796.png" alt="asciicast"></a>\n\n### Check into Git\n\nBy this point, `git status` should list the following untracked files;\n\n```\n.gitignore\n.npmrc\nnode_shrinkwrap/\nnpm-shrinkwrap.json\npackage.json\n```\n\nLet\'s check them in.\n\n```\ngit add .\ngit commit -m \'chore(project): initial commit\'\n```\n\n<a href="https://asciinema.org/a/83797" target="_blank"><img src="https://asciinema.org/a/83797.png" alt="asciicast"></a>\n\n### Clean install\n\nWe check this code into Git and tell a co-worker that it\'s ready for them to\ncontribute to.\n\nOnce they have cloned the project, our co-worker runs;\n\n```\nnpm install --loglevel http\n```\n\nThis is new behaviour, npm didn\'t hit the network at all. Instead it read the\npackages from the `node_shrinkwrap` directory directly and installed them\nstraight away. Shrinkpack has allowed us to install our project without any\nnetwork activity whatsoever \xe2\x80\x93 and in a fraction of the time.\n\nIf everything went to plan, the only output will be these expected warnings\nbecause we didn\'t choose to add a `description` or `repository` to our\n`package.json`.\n\n> ```\n> npm WARN shrinkpack-demo@1.0.0 No description\n> npm WARN shrinkpack-demo@1.0.0 No repository field.\n> ```\n\n<a href="https://asciinema.org/a/83799" target="_blank"><img src="https://asciinema.org/a/83799.png" alt="asciicast"></a>\n\n### Update Dependencies\n\nLater, we may choose to add, update, or remove some dependencies;\n\n```\nnpm install commander@2.9.0\nnpm install react\nnpm uninstall express\n```\n\nWith our local `node_modules` now up to date, we now need to update our\n`npm-shrinkwrap.json` file and get our `node_shrinkwrap` directory back in sync\nwith the new changes.\n\n```\nnpm shrinkwrap --dev\nshrinkpack\n```\n\n<a href="https://asciinema.org/a/83806" target="_blank"><img src="https://asciinema.org/a/83806.png" alt="asciicast"></a>\n\n### Toggle Compression\n\nThe tarballs in the npm registry are gzipped for optimal network performance,\nbut storing binary files in Git repositories is not optimal. Git is\ndecentralized, so every developer has the full change history on their computer.\nChanges in large binary files cause Git repositories to grow by the size of the\nfile in question every time the file is changed and committed, this growth\ndirectly affects the amount of data end users need to retrieve when they need to\nclone the repository.\n\nYou can toggle between compressed and uncompressed tarballs with\n`shrinkpack --compress`.\n\n<a href="https://asciinema.org/a/83810" target="_blank"><img src="https://asciinema.org/a/83810.png" alt="asciicast"></a>\n\n### Remove Optional Dependencies\n\n`optionalDependencies` are removed by default, to avoid issues when trying to\n`npm shrinkwrap` your project on platforms where that optional dependency was\nnot installed. More detail is available in this\n[issue comment](https://github.com/JamieMason/shrinkpack/issues/17#issuecomment-202340196)\nand this behaviour can be overriden by using `shrinkpack --keep-optional`.\n\n## \xf0\x9f\x99\x8b\xf0\x9f\x8f\xbe\xe2\x80\x8d\xe2\x99\x80\xef\xb8\x8f Getting Help\n\n- Get help with issues by creating a\n  [Bug Report](https://github.com/JamieMason/shrinkpack/issues/new?template=bug_report.md).\n- Discuss ideas by opening a\n  [Feature Request](https://github.com/JamieMason/shrinkpack/issues/new?template=feature_request.md).\n'