b'<p align="center">\n  <img alt="Lerna" src="https://cloud.githubusercontent.com/assets/952783/15271604/6da94f96-1a06-11e6-8b04-dc3171f79a90.png" width="480">\n</p>\n\n<p align="center">\n  A tool for managing JavaScript projects with multiple packages.\n</p>\n\n<p align="center">\n  <a href="https://www.npmjs.com/package/lerna"><img alt="NPM Status" src="https://img.shields.io/npm/v/lerna.svg?style=flat"></a>\n  <a href="https://travis-ci.org/lerna/lerna"><img alt="Travis Status" src="https://img.shields.io/travis/lerna/lerna/master.svg?style=flat&label=travis"></a>\n</p>\n\n- [About](#about)\n- [Getting Started](#getting-started)\n- [How It Works](#how-it-works)\n- [Troubleshooting](#troubleshooting)\n- Commands\n  - [`lerna publish`](./commands/publish#readme)\n  - [`lerna version`](./commands/version#readme)\n  - [`lerna bootstrap`](./commands/bootstrap#readme)\n  - [`lerna list`](./commands/list#readme)\n  - [`lerna changed`](./commands/changed#readme)\n  - [`lerna diff`](./commands/diff#readme)\n  - [`lerna exec`](./commands/exec#readme)\n  - [`lerna run`](./commands/run#readme)\n  - [`lerna init`](./commands/init#readme)\n  - [`lerna add`](./commands/add#readme)\n  - [`lerna clean`](./commands/clean#readme)\n  - [`lerna import`](./commands/import#readme)\n  - [`lerna link`](./commands/link#readme)\n  - [`lerna create`](./commands/create#readme)\n- [Concepts](#concepts)\n- [Lerna.json](#lernajson)\n- [Global Flags](./core/global-options)\n- [Filter Flags](./core/filter-options)\n\n## About\n\nSplitting up large codebases into separate independently versioned packages\nis extremely useful for code sharing. However, making changes across many\nrepositories is _messy_ and difficult to track, and testing across repositories\ngets complicated really fast.\n\nTo solve these (and many other) problems, some projects will organize their\ncodebases into multi-package repositories (sometimes called [monorepos](https://github.com/babel/babel/blob/master/doc/design/monorepo.md)). Projects like [Babel](https://github.com/babel/babel/tree/master/packages), [React](https://github.com/facebook/react/tree/master/packages), [Angular](https://github.com/angular/angular/tree/master/modules),\n[Ember](https://github.com/emberjs/ember.js/tree/master/packages), [Meteor](https://github.com/meteor/meteor/tree/devel/packages), [Jest](https://github.com/facebook/jest/tree/master/packages), and many others develop all of their packages within a\nsingle repository.\n\n**Lerna is a tool that optimizes the workflow around managing multi-package\nrepositories with git and npm.**\n\nLerna can also reduce the time and space requirements for numerous\ncopies of packages in development and build environments - normally a\ndownside of dividing a project into many separate NPM packages. See the\n[hoist documentation](doc/hoist.md) for details.\n\n### What does a Lerna repo look like?\n\nThere\'s actually very little to it. You have a file structure that looks like this:\n\n```\nmy-lerna-repo/\n  package.json\n  packages/\n    package-1/\n      package.json\n    package-2/\n      package.json\n```\n\n### What can Lerna do?\n\nThe two primary commands in Lerna are `lerna bootstrap` and `lerna publish`.\n\n`bootstrap` will link dependencies in the repo together.\n`publish` will help publish any updated packages.\n\n### What can\'t Lerna do?\n\nLerna is not a deployment tool for serverless monorepos. Hoisting might be incompatible with traditional serverless monorepo deployment techniques.\n\n## Getting Started\n\n> The instructions below are for Lerna 3.x.\n> We recommend using it instead of 2.x for a new Lerna project.\n\nLet\'s start by installing Lerna as a dev dependency of your project with [npm](https://www.npmjs.com/).\n\n```sh\n$ mkdir lerna-repo && cd $_\n$ npx lerna init\n```\n\nThis will create a `lerna.json` configuration file as well as a `packages` folder, so your folder should now look like this:\n\n```\nlerna-repo/\n  packages/\n  package.json\n  lerna.json\n```\n\n## How It Works\n\nLerna allows you to manage your project using one of two modes: Fixed or Independent.\n\n### Fixed/Locked mode (default)\n\nFixed mode Lerna projects operate on a single version line. The version is kept in the `lerna.json` file at the root of your project under the `version` key. When you run `lerna publish`, if a module has been updated since the last time a release was made, it will be updated to the new version you\'re releasing. This means that you only publish a new version of a package when you need to.\n\nThis is the mode that [Babel](https://github.com/babel/babel) is currently using. Use this if you want to automatically tie all package versions together. One issue with this approach is that a major change in any package will result in all packages having a new major version.\n\n### Independent mode\n\n`lerna init --independent`\n\nIndependent mode Lerna projects allows maintainers to increment package versions independently of each other. Each time you publish, you will get a prompt for each package that has changed to specify if it\'s a patch, minor, major or custom change.\n\nIndependent mode allows you to more specifically update versions for each package and makes sense for a group of components. Combining this mode with something like [semantic-release](https://github.com/semantic-release/semantic-release) would make it less painful. (There is work on this already at [atlassian/lerna-semantic-release](https://github.com/atlassian/lerna-semantic-release)).\n\n> Set the `version` key in `lerna.json` to `independent` to run in independent mode.\n\n## Troubleshooting\n\nIf you encounter any issues while using Lerna please check out our [Troubleshooting](doc/troubleshooting.md)\ndocument where you might find the answer to your problem.\n\n## Frequently asked questions\n\nSee [FAQ.md](FAQ.md).\n\n## Concepts\n\nLerna will log to a `lerna-debug.log` file (same as `npm-debug.log`) when it encounters an error running a command.\n\nLerna also has support for [scoped packages](https://docs.npmjs.com/misc/scope).\n\nRun `lerna --help` to see all available commands and options.\n\n### lerna.json\n\n```json\n{\n  "version": "1.1.3",\n  "npmClient": "npm",\n  "command": {\n    "publish": {\n      "ignoreChanges": ["ignored-file", "*.md"],\n      "message": "chore(release): publish",\n      "registry": "https://npm.pkg.github.com"\n    },\n    "bootstrap": {\n      "ignore": "component-*",\n      "npmClientArgs": ["--no-package-lock"]\n    }\n  },\n  "packages": ["packages/*"]\n}\n```\n\n- `version`: the current version of the repository.\n- `npmClient`: an option to specify a specific client to run commands with (this can also be specified on a per command basis). Change to `"yarn"` to run all commands with yarn. Defaults to "npm".\n- `command.publish.ignoreChanges`: an array of globs that won\'t be included in `lerna changed/publish`. Use this to prevent publishing a new version unnecessarily for changes, such as fixing a `README.md` typo.\n- `command.publish.message`: a custom commit message when performing version updates for publication. See [@lerna/version](commands/version#--message-msg) for more details.\n- `command.publish.registry`: use it to set a custom registry url to publish to instead of\nnpmjs.org, you must already be authenticated if required.\n- `command.bootstrap.ignore`: an array of globs that won\'t be bootstrapped when running the `lerna bootstrap` command.\n- `command.bootstrap.npmClientArgs`: array of strings that will be passed as arguments directly to `npm install` during the `lerna bootstrap` command.\n- `command.bootstrap.scope`: an array of globs that restricts which packages will be bootstrapped when running the `lerna bootstrap` command.\n- `packages`: Array of globs to use as package locations.\n\nThe packages config in `lerna.json` is a list of globs that match directories containing a `package.json`, which is how lerna recognizes "leaf" packages (vs the "root" `package.json`, which is intended to manage the dev dependencies and scripts for the entire repo).\n\nBy default, lerna initializes the packages list as `["packages/*"]`, but you can also use another directory such as `["modules/*"]`, or `["package1", "package2"]`. The globs defined are relative to the directory that `lerna.json` lives in, which is usually the repository root. The only restriction is that you can\'t directly nest package locations, but this is a restriction shared by "normal" npm packages as well.\n\nFor example, `["packages/*", "src/**"]` matches this tree:\n\n```\npackages/\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 foo-pkg\n\xe2\x94\x82   \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 package.json\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 bar-pkg\n\xe2\x94\x82   \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 package.json\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 baz-pkg\n\xe2\x94\x82   \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 package.json\n\xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 qux-pkg\n    \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 package.json\nsrc/\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 admin\n\xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 my-app\n\xe2\x94\x82   \xe2\x94\x82   \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 package.json\n\xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 stuff\n\xe2\x94\x82   \xe2\x94\x82   \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 package.json\n\xe2\x94\x82   \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 things\n\xe2\x94\x82       \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 package.json\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 profile\n\xe2\x94\x82   \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 more-things\n\xe2\x94\x82       \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 package.json\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 property\n\xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 more-stuff\n\xe2\x94\x82   \xe2\x94\x82   \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 package.json\n\xe2\x94\x82   \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 other-things\n\xe2\x94\x82       \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 package.json\n\xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 upload\n    \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 other-stuff\n        \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 package.json\n```\n\nLocating leaf packages under `packages/*` is considered a "best-practice", but is not a requirement for using Lerna.\n\n#### Legacy Fields\n\nSome `lerna.json` fields are no longer in use. Those of note include:\n* `lerna`: originally used to indicate the current version of Lerna. [Made obsolete](https://github.com/lerna/lerna/pull/1122) and [removed](https://github.com/lerna/lerna/pull/1225) in v3\n\n### Common `devDependencies`\n\nMost `devDependencies` can be pulled up to the root of a Lerna repo with `lerna link convert`\n\nThe above command will automatically hoist things and use relative `file:` specifiers.\n\nHoisting has a few benefits:\n- All packages use the same version of a given dependency\n- Can keep dependencies at the root up-to-date with an automated tool such as [GreenKeeper](https://greenkeeper.io/)\n- Dependency installation time is reduced\n- Less storage is needed\n\nNote that `devDependencies` providing "binary" executables that are used by\nnpm scripts still need to be installed directly in each package where they\'re\nused.\n\nFor example the `nsp` dependency is necessary in this case for `lerna run nsp`\n(and `npm run nsp` within the package\'s directory) to work correctly:\n\n```json\n{\n  "scripts": {\n    "nsp": "nsp"\n  },\n  "devDependencies": {\n    "nsp": "^2.3.3"\n  }\n}\n```\n\n### Git Hosted Dependencies\n\nLerna allows target versions of local dependent packages to be written as a [git remote url](https://docs.npmjs.com/cli/install) with a `committish` (e.g., `#v1.0.0` or `#semver:^1.0.0`) instead of the normal numeric version range.\nThis allows packages to be distributed via git repositories when packages must be private and a [private npm registry is not desired](https://www.dotconferences.com/2016/05/fabien-potencier-monolithic-repositories-vs-many-repositories).\n\nPlease note that lerna does _not_ perform the actual splitting of git history into the separate read-only repositories. This is the responsibility of the user. (See [this comment](https://github.com/lerna/lerna/pull/1033#issuecomment-335894690) for implementation details)\n\n```\n// packages/pkg-1/package.json\n{\n  name: "pkg-1",\n  version: "1.0.0",\n  dependencies: {\n    "pkg-2": "github:example-user/pkg-2#v1.0.0"\n  }\n}\n\n// packages/pkg-2/package.json\n{\n  name: "pkg-2",\n  version: "1.0.0"\n}\n```\n\nIn the example above,\n\n- `lerna bootstrap` will properly symlink `pkg-2` into `pkg-1`.\n- `lerna publish` will update the committish (`#v1.0.0`) in `pkg-1` when `pkg-2` changes.\n\n### README Badge\n\nUsing Lerna? Add a README badge to show it off: [![lerna](https://img.shields.io/badge/maintained%20with-lerna-cc00ff.svg)](https://lerna.js.org/)\n\n```\n[![lerna](https://img.shields.io/badge/maintained%20with-lerna-cc00ff.svg)](https://lerna.js.org/)\n```\n\n### Wizard\n\nIf you prefer some guidance for cli (in case you\'re about to start using lerna or introducing it to a new team), you might like [lerna-wizard](https://github.com/szarouski/lerna-wizard). It will lead you through a series of well-defined steps:\n\n![lerna-wizard demo image](https://raw.githubusercontent.com/szarouski/lerna-wizard/2e269fb5a3af7100397a1f874cea3fa78089486e/demo.png)\n'