b'\nstmux\n=====\n\n**Simple Terminal Multiplexing for Node Environments**\n\n<p/>\n<img src="https://nodei.co/npm/stmux.png?downloads=true&stars=true" alt=""/>\n\n<p/>\n<img src="https://david-dm.org/rse/stmux.png" alt=""/>\n\nAbstract\n--------\n\nThis is a simple terminal multiplexing utility for Node.js\nenvironments. It is inspired by the awesome and unreachable\n[tmux](https://tmux.github.io/) native Unix utility. The stmux utility\nis intended to provide just a very tiny subset of the original\n[tmux](https://tmux.github.io/) functionality, but in a portable way for\nbare Node.js environments and with some special features for application\nbuild environments. Most notably, stmux has a built-time error\ndetection and notification feature, can automatically restart terminated commands,\nand can automatically close or wait after all spawned commands have\nsuccessfully or unsuccessfully terminated.\n\nInternally, stmux is based on the awesome\n[Blessed](https://github.com/chjj/blessed) screen rendering environment\nand emulates full XTerm-compatible pseudo-terminals\nto the spawned programs with the help of [Blessed XTerm](https://github.com/rse/blessed-xterm)\nand the underlying [XTerm.js](http://xtermjs.org) terminal rendering\nand [node-pty](https://github.com/Tyriar/node-pty) pseudo-terminal\nintegration modules.\n\nExample\n-------\n\nThe following command...\n\n```\n$ stmux -- [ [ -s 1/3 bash .. vim ] : mc ]\n```\n\n...leads to the following particular terminal multiplexing environment,\nwhere GNU bash, Vim and Midnight Commander are running side-by-side\ninside their own XTerm emulating terminal widget (and, just for fun,\n`CTRL+a` `?` was pressed to open up the stmux help window):\n\n![stmux usage](etc/screenshot1.png)\n\nIntention\n---------\n\nThis utility is primarily intended to be used from within a\n`package.json` `script` to easily side-by-side run various NPM-based\ncommands in a Node.js build-time environment. Sample `package.json`\nentries from a top-level NPM-based project follows, which on `npm run\ndev` allows one to conveniently run the commands of two sub-projects.\nFirst, the build-time of the frontend user interface (UI) project.\nSecond, the build-time of the backend server (SV) project. Third, the\nrun-time of the backend server project.\n\n```js\n{\n    ...\n    "dependencies": {\n        "stmux":      "*"\n    },\n    "scripts": {\n        "install":    "npm run install:ui && npm run install:sv",\n        "install:ui": "cd ui && npm install",\n        "install:sv": "cd sv && npm install",\n\n        "build":      "npm run build:ui && npm run build:sv",\n        "build:ui":   "cd ui && npm run build",\n        "build:sv":   "cd sv && npm run build",\n\n        "start":      "cd sv && npm start",\n\n        "clean":      "npm run clean:ui && npm run clean:sv"\n        "clean:ui":   "cd ui && npm run clean",\n        "clean:sv":   "cd sv && npm run clean",\n\n        "dev":        "stmux -w always -e ERROR -m beep,system -- [ [ \\"npm run dev:ui\\" .. \\"npm run dev:sv\\" ] : -s 1/3 -f \\"npm start\\" ]",\n        "dev:ui":     "cd ui && npm run build:watch"\n        "dev:sv":     "cd sv && npm run build:watch"\n    }\n}\n```\n\nIn case of a build-time error in the frontend user interface (SV), the\nresult might be similar to the following one:\n\n![stmux example](etc/screenshot2.png)\n\nInstallation\n------------\n\n```\n$ npm install -g stmux\n```\n\n### Dependency: node-gyp\n\nYou must have [node-gyp](https://github.com/nodejs/node-gyp) installed,\nas stmux requires [node-pty](https://github.com/Tyriar/node-pty) which\nmust be built with [node-gyp](https://github.com/nodejs/node-gyp) during\n`npm install`.\n\nPlease check out the documentation of\n[node-gyp](https://github.com/nodejs/node-gyp) on how to provide\nthe necessary C/C++ compiler environment on your operating system.\n\n* macOS: install the "Command Line Tools" under\n  "Preferences &gt; Downloads" in Xcode.\n* Windows: open an elevated `cmd.exe` and run the commands\n  `npm install --global windows-build-tools` and\n  `npm config set msvs_version 2015 --global`\n* Windows Subsystem for Linux (WSL), Ubuntu distribution: run the commands\n  `sudo apt-get update` and\n  `sudo apt-get install -y python make build-essential`\n* Under Linux or FreeBSD you usually don\'t have to do anything.\n\nUsage\n-----\n\nThe following command line arguments are supported:\n\n```\n$ stmux [-h] [-V] [-w <condition>] [-a <activator>] [-t <title>]\n        [-c <type>] [-n] [-e <regexp>] [-m <method>] [-M] [-f <file>]\n        [-- <spec>]\n```\n\n- `-h`, `--help`<br/>\n  Show usage help.\n- `-V`, `--version`<br/>\n  Show program version information.\n- `-w <condition>`, `--wait <condition>`<br/>\n  Wait after last finished command (and do not shutdown automatically),\n  either if any command terminated with an `error` or just `always`.\n- `-a <activator>`, `--activator <activator>`<br/>\n  Use `CTRL+<activator>` as the prefix to special commands.\n  The default activator character is `a`.\n- `-t <title>`, `--title <title>`<br/>\n  Set title on terminal. The default title is `stmux`.\n- `-c <type>`, `--cursor <type>`<br/>\n  Set type of cursor  to `block` (default), `underline` or `line`.\n- `-n`, `--number`<br/>\n  Show terminal number in terminal title.\n- `-e <regexp>[,...]`, `--error <regexp>[,...]`<br/>\n  Observe terminal lines for errors (global option).\n  One or more regular expressions can be specified and have to match on a single line.\n  If a regular expression is preceeded with the prefix `!`, it is\n  required that it does not match.\n- `-m <methods>`, `--method <methods>`<br/>\n  In case of detected errors, use the comma-separated\n  list of methods to perform user notification. The default\n  is no extra notification (just the terminal annotation).\n  Possible methods are `beep` and `system`.\n- `-M`, `--mouse`<br/>\n  Enable mouse event handling. This enables the focus switching\n  by left mouse click, the scrolling with mouse wheel and\n  sends down mouse events to the terminal as mouse key sequences.\n- `-f <file>`, `--file <file>`<br/>\n  Read specification `<spec>` from a configuration file. The\n  default is to use the specification inside the command line arguments\n  or (alternatively) to read the specification from `stdin`.\n\nThe following PEG-style grammar loosly describes the specification `<spec>`.\nFor exact details see the [real PEG grammar of stmux](src/stmux-2-parser.pegjs).\n\n```\nspec      ::= "[" directive (":"  directive)* "]"  /* vertical   split */\n            | "[" directive (".." directive)* "]"  /* horizontal split */\n\ndirective ::= option* spec                         /* RECURSION */\n            | option* string                       /* shell command */\n\noption    ::= ("-f" | "--focus")                   /* focus terminal initially */\n            | ("-r" | "--restart")                 /* restart command automatically */\n            | ("-d" | "--delay") number            /* delay <number> seconds on restart */\n            | ("-t" | "--title") string            /* set title of terminal */\n            | ("-s" | "--size") size               /* request a size on terminal */\n            | ("-e" | "--error") regexp            /* observe terminal for errors (local option) */\n\nsize      ::= /^\\d+$/                              /* fixed character size */\n            | /^\\d+\\.\\d+$/                         /* total size factor */\n            | /^\\d+\\/\\d+$/                         /* total size fraction */\n            | /^\\d+%$/                             /* total size percentage */\n```\n\nThe following keystrokes are supported under run-time:\n\n- `CTRL`+*activator* *activator*:<br/>\n  Send the `CTRL`+*activator* key-sequence to the focused terminal.\n- `CTRL`+*activator* `BACKSPACE`:<br/>\n  Switch the focus to the previous terminal in sequence.\n- `CTRL`+*activator* `SPACE`:<br/>\n  Switch the focus to the next terminal in sequence.\n- `CTRL`+*activator* `LEFT`/`RIGHT`/`UP`/`DOWN`:<br/>\n  Switch the focus to the best matching terminal in a direction.\n- `CTRL`+*activator* `1`/`2`/.../`9`:<br/>\n  Directly switch to a particular terminal.\n- `CTRL`+*activator* `n`:<br/>\n  Toggle showing/hiding of terminal numbers.\n- `CTRL`+*activator* `z`:<br/>\n  Toggle the zooming of focused terminal.\n- `CTRL`+*activator* `v`:<br/>\n  Switch the focused terminal into visual/scrolling mode.\n  Use `PAGEUP`/`PAGEDOWN` during this mode to scroll up/down.\n  Any other key leaves this mode.\n- `CTRL`+*activator* `l`:<br/>\n  Relayout the screen.\n- `CTRL`+*activator* `r`:<br/>\n  Restart the program in the focused terminal.\n- `CTRL`+*activator* `k`:<br/>\n  Kill the application and all shell commands in all terminals.\n- `CTRL`+*activator* `?`:<br/>\n  Show help window.\n\nSpecification Examples\n----------------------\n\n- `stmux [ A ]`:\n\n    ```\n    +-----------+\n    |           |\n    |     A     |\n    |           |\n    +-----------+\n    ```\n\n- `stmux [ A .. B ]`:\n\n    ```\n    +-----+-----+\n    |     |     |\n    |  A  |  B  |\n    |     |     |\n    +-----+-----+\n    ```\n\n- `stmux [ A : B ]`:\n\n    ```\n    +-----------+\n    |     A     |\n    +-----------+\n    |     B     |\n    +-----------+\n    ```\n\n- `stmux [ [ A .. B ] : C ]`:\n\n    ```\n    +-----+-----+\n    |  A  |  B  |\n    +-----+-----+\n    |     C     |\n    +-----------+\n    ```\n\n- `stmux [ [ A : B ] .. C ]`:\n\n    ```\n    +-----+-----+\n    |  A  |     |\n    +-----+  C  |\n    |  B  |     |\n    +-----+-----+\n    ```\n\n- `stmux [ [ A : B ] .. [ C : D ] ]`:\n\n    ```\n    +-----+-----+\n    |  A  |  C  |\n    +-----+-----+\n    |  B  |  D  |\n    +-----+-----+\n    ```\n\n- `stmux [ [ A .. B ] : [ C .. D ] ]`:\n\n    ```\n    +-----+-----+\n    |  A  |  B  |\n    +-----+-----+\n    |  C  |  D  |\n    +-----+-----+\n    ```\n\n- `stmux -- [ [ -s 1/3 A .. B ] : [ C .. -s 1/3 D ] ]`:\n\n    ```\n    +---+-------+\n    | A |    B  |\n    +---+---+---+\n    |    C  | D |\n    +-------+---+\n    ```\n\nLicense\n-------\n\nCopyright (c) 2017-2019 Dr. Ralf S. Engelschall (http://engelschall.com/)\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n"Software"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'