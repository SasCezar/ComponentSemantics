b'# np [![Build Status](https://travis-ci.org/sindresorhus/np.svg?branch=master)](https://travis-ci.org/sindresorhus/np) [![XO code style](https://img.shields.io/badge/code_style-XO-5ed9c7.svg)](https://github.com/xojs/xo)\n\n> A better `npm publish`\n\n<div>\n\t<br>\n\t<br>\n\t<a href="https://issuehunt.io">\n\t\t<img src="https://user-images.githubusercontent.com/170270/50307315-5c349200-0498-11e9-95bb-e51a8cfc2b15.png" width="600">\n\t</a>\n\t<br>\n\t<br>\n\t<br>\n</div>\n\n<img src="screenshot.gif" width="688">\n\n\n## Why\n\n- [Interactive UI](#interactive-ui)\n- Ensures you are publishing from the `master` branch\n- Ensures the working directory is clean and that there are no unpulled changes\n- Reinstalls dependencies to ensure your project works with the latest dependency tree\n- Runs the tests\n- Bumps the version in package.json and npm-shrinkwrap.json (if present) and creates a git tag\n- Prevents [accidental publishing](https://github.com/npm/npm/issues/13248) of pre-release versions under the `latest` [dist-tag](https://docs.npmjs.com/cli/dist-tag)\n- Publishes the new version to npm, optionally under a dist-tag\n- Rolls back the project to its previous state in case publishing fails\n- Pushes commits and tags (newly & previously created) to GitHub/GitLab\n- Supports [two-factor authentication](https://docs.npmjs.com/getting-started/using-two-factor-authentication)\n- Enables two-factor authentication on new repositories\n  <br>\n  <sub>(does not apply to external registries)</sub>\n- Opens a prefilled GitHub Releases draft after publish\n- Warns about the possibility of extraneous files being published\n\n\n## Prerequisite\n\n- Node.js 8 or later\n- npm 6.8.0 or later\n- Git 2.11 or later\n\n\n## Install\n\n```\n$ npm install --global np\n```\n\n\n## Usage\n\n```\n$ np --help\n\n  Usage\n    $ np <version>\n\n    Version can be:\n      patch | minor | major | prepatch | preminor | premajor | prerelease | 1.2.3\n\n  Options\n    --any-branch        Allow publishing from any branch\n    --no-cleanup        Skips cleanup of node_modules\n    --no-tests          Skips tests\n    --yolo              Skips cleanup and testing\n    --no-publish        Skips publishing\n    --tag               Publish under a given dist-tag\n    --no-yarn           Don\'t use Yarn\n    --contents          Subdirectory to publish\n    --no-release-draft  Skips opening a GitHub release draft\n\n  Examples\n    $ np\n    $ np patch\n    $ np 1.0.2\n    $ np 1.0.2-beta.3 --tag=beta\n    $ np 1.0.2-beta.3 --tag=beta --contents=dist\n```\n\n\n## Interactive UI\n\nRun `np` without arguments to launch the interactive UI that guides you through publishing a new version.\n\n<img src="screenshot-ui.png" width="1290">\n\n\n## Config\n\n`np` can be configured both locally and globally. When using the global `np` binary, you can configure any of the CLI flags in either a `.np-config.js` or `.np-config.json` file in the home directory. When using the local `np` binary, for example, in a `npm run` script, you can configure `np` by setting the flags in either a top-level `np` field in `package.json` or in a `.np-config.js` or `.np-config.json` file in the project directory.\n\nCurrently, these are the flags you can configure:\n\n- `anyBranch` - Allow publishing from any branch (`false` by default).\n- `cleanup` - Cleanup `node_modules` (`true` by default).\n- `tests` - Run `npm test` (`true` by default).\n- `yolo` - Skip cleanup and testing (`false` by default).\n- `publish` - Publish (`true` by default).\n- `tag` - Publish under a given dist-tag (`latest` by default).\n- `yarn` - Use yarn if possible (`true` by default).\n- `contents` - Subdirectory to publish (`.` by default).\n- `releaseDraft` - Open a GitHub release draft after releasing (`true` by default).\n\nFor example, this configures `np` to never use Yarn and to use `dist` as the subdirectory to publish:\n\n`package.json`\n```json\n{\n\t"name": "superb-package",\n\t"np": {\n\t\t"yarn": false,\n\t\t"contents": "dist"\n\t}\n}\n```\n\n`.np-config.json`\n```json\n{\n\t"yarn": false,\n\t"contents": "dist"\n}\n```\n\n`.np-config.js`\n```js\nmodule.exports = {\n\tyarn: false,\n\tcontents: \'dist\'\n};\n```\n\n_**Note:** The global config only applies when using the global `np` binary, and is never inherited when using a local binary._\n\n\n## Tips\n\n### npm hooks\n\nYou can use any of the test/version/publish related [npm lifecycle hooks](https://docs.npmjs.com/misc/scripts) in your package.json to add extra behavior.\n\nFor example, here we build the documentation before tagging the release:\n\n```json\n{\n\t"name": "my-awesome-package",\n\t"scripts": {\n\t\t"version": "./build-docs && git add docs"\n\t}\n}\n```\n\n### Release script\n\nYou can also add `np` to a custom script in `package.json`. This can be useful if you want all maintainers of a package to release the same way (Not forgetting to push Git tags, for example). However, you can\'t use `publish` as name of your script because it\'s an [npm defined lifecycle hook](https://docs.npmjs.com/misc/scripts).\n\n```json\n{\n\t"name": "my-awesome-package",\n\t"scripts": {\n\t\t"release": "np"\n\t},\n\t"devDependencies": {\n\t\t"np": "*"\n\t}\n}\n```\n\n### Signed Git tag\n\nSet the [`sign-git-tag`](https://docs.npmjs.com/misc/config#sign-git-tag) npm config to have the Git tag signed:\n\n```\n$ npm config set sign-git-tag true\n```\n\nOr set the [`version-sign-git-tag`](https://yarnpkg.com/lang/en/docs/cli/version/#toc-git-tags) Yarn config:\n\n```\n$ yarn config set version-sign-git-tag true\n```\n\n### Private packages\n\n<img src="private-packages.png" width="260" align="right">\n\nYou can use `np` for packages that aren\'t publicly published to npm (perhaps installed from a private git repo).\n\nSet `"private": true` in your `package.json` and the publish step will be skipped. All other steps\nincluding versioning and pushing tags will still be completed.\n\n### Public scoped packages\n\nTo publish [scoped packages](https://docs.npmjs.com/misc/scope#publishing-public-scoped-packages-to-the-public-npm-registry) to the public registry, you need to set the access level to `public`. You can do that by adding the following to your `package.json`:\n\n```json\n"publishConfig": {\n\t"access": "public"\n}\n```\n\n### Publish to a custom registry\n\nSet the [`registry` option](https://docs.npmjs.com/misc/config#registry) in package.json to the URL of your registry:\n\n```json\n"publishConfig":{\n\t"registry": "http://my-internal-registry.local"\n}\n```\n\n### Publish with a CI\n\nIf you use a Continuous Integration server to publish your tagged commits, use the `--no-publish` flag to skip the publishing step of `np`.\n\n### Publish to gh-pages\n\nTo publish to `gh-pages` (or any other branch that serves your static assets), install [`branchsite`](https://github.com/enriquecaballero/branchsite), an `np`-like CLI tool aimed to complement `np`, and create an [npm "post" hook](https://docs.npmjs.com/misc/scripts) that runs after `np`.\n\n```\n$ npm install --save-dev branchsite\n```\n\n```json\n"scripts":{\n\t"deploy": "np",\n\t"postdeploy": "bs"\n}\n```\n\n### Initial version\n\nFor new packages, start the `version` field in package.json at `0.0.0` and let `np` bump it to `1.0.0` or `0.1.0` when publishing.\n\n### Release an update to an old major version\n\nTo release a minor/patch version for an old major version, create a branch from the major version\'s git tag and run `np`:\n\n```console\n$ git checkout -b fix-old-bug v1.0.0 # Where 1.0.0 is the previous major version\n# Create some commits\xe2\x80\xa6\n$ git push --set-upstream origin HEAD\n$ np patch --any-branch --tag=v1\n```\n\n### Prerequisite step runs forever on macOS\n\nIf you\'re using macOS Sierra 10.12.2 or later, your SSH key passphrase is no longer stored into the keychain by default. This may cause the `prerequisite` step to run forever because it prompts for your passphrase in the background. To fix this, add the following lines to your `~/.ssh/config` and run a simple Git command like `git fetch`.\n\n```\nHost *\n AddKeysToAgent yes\n UseKeychain yes\n```\n\nIf you\'re running into other issues when using SSH, please consult [GitHub\'s support article](https://help.github.com/articles/connecting-to-github-with-ssh/).\n\n\n## Maintainers\n\n- [Sindre Sorhus](https://github.com/sindresorhus)\n- [Sam Verschueren](https://github.com/SamVerschueren)\n- [Itai Steinherz](https://github.com/itaisteinherz)\n'