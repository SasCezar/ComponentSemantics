b'![RSMQ: Redis Simple Message Queue for Node.js](https://img.webmart.de/rsmq_wide.png)\n\n# Redis Simple Message Queue\nA lightweight message queue for Node.js that requires no dedicated queue server. Just a Redis server.\n\n[![Build Status](https://secure.travis-ci.org/smrchy/rsmq.png?branch=master)](http://travis-ci.org/smrchy/rsmq)\n[![Dependency Status](https://david-dm.org/smrchy/rsmq.svg)](https://david-dm.org/smrchy/rsmq)\n\n**tl;dr:** If you run a Redis server and currently use Amazon SQS or a similar message queue you might as well use this fast little replacement. Using a shared Redis server multiple Node.js processes can send / receive messages.\n\n## Features\n* Lightweight: **Just Redis** and ~500 lines of javascript.\n* Speed: Send/receive 10000+ messages per second on an average machine. It\'s **just Redis**.\n* Guaranteed **delivery of a message to exactly one recipient** within a messages visibility timeout.\n* Received messages that are not deleted will reappear after the visibility timeout.\n* [Test coverage](http://travis-ci.org/smrchy/rsmq)\n* A message is deleted by the message id. The message id is returned by the `sendMessage` and `receiveMessage` method.\n* Messages stay in the queue unless deleted.\n* Optional RESTful interface via [rest-rsmq](https://github.com/smrchy/rest-rsmq)\n* Typescript Typings \xe2\x9d\xa4\xef\xb8\x8f\n* Optional Promise-based API (only if `Promise` is defined), just suffix your method with `Async`, eg: `sendMessage` -> `sendMessageAsync`, all queue methods are supported\n\n**Note:** RSMQ uses the Redis EVAL command (LUA scripts) so the minimum Redis version is 2.6+. \n\n## Usage\n* After creating a queue you can send messages to that queue.\n* The messages will be handled in a **FIFO** (first in first out) manner unless specified with a delay.\n* Every message has a unique `id` that you can use to delete the message. \n* The `sendMessage` method will return the `id` for a sent message.\n* The `receiveMessage` method will return an `id` along with the message and some stats.\n* Should you not delete the message it will be eligible to be received again after the visibility timeout is reached.\n* Please have a look at the `createQueue` and `receiveMessage` methods described below for optional parameters like **visibility timeout** and **delay**.\n\n## Installation\n`npm install rsmq`\n\n## Modules for RSMQ\nTo keep the core of *RSMQ* small additional functionality is available as modules:\n\n* [**rsmq-worker**](https://github.com/mpneuried/rsmq-worker) Helper to implement a worker with RSMQ.\n* [**rest-rsmq**](https://github.com/smrchy/rest-rsmq) A RESTful interface for RSMQ.\n* [**rsmq-cli**](https://github.com/mpneuried/rsmq-cli) A command-line interface / Terminal client for RSMQ.\n* [**rsmq-promise**](https://github.com/msfidelis/rsmq-promise) Promise interface for RSMQ\n\n## RSMQ in other languages\n\nThe simplicity of RSMQ is useful in other languages. Here is a list of implementations in other languages:\n\n* [**Java**](https://github.com/igr/jrsmq) RSMQ for Java. See [#48](https://github.com/smrchy/rsmq/issues/48)\n* [**PHP**](https://github.com/michsindelar/PhpRSMQ) RSMQ for PHP (work in progress)\n\nNote: Should you plan to port RSQM to another language please make sure to have tests to ensure compatibility with all RSMQ clients. And of course: let me know so i can mention your port here.\n\n## Methods\n\n### Constructor\nCreates a new instance of RSMQ.\n\nParameters:\n\n* `host` (String): *optional (Default: "127.0.0.1")* The Redis server\n* `port` (Number): *optional (Default: 6379)* The Redis port\n* `options` (Object): *optional (Default: {})* The [Redis options](https://github.com/NodeRedis/node_redis#options-object-properties) object. \n* `client` (RedisClient): *optional* A existing redis client instance. `host` and `server` will be ignored.\n* `ns` (String): *optional (Default: "rsmq")* The namespace prefix used for all keys created by RSMQ\n* `realtime` (Boolean): *optional (Default: false)* Enable realtime PUBLISH of new messages (see the [Realtime section](#realtime))\n* `password` (String): *optional (Default: null)* If your Redis server requires a password supply it here\n\nExample:\n\n```javascript\nconst RedisSMQ = require("rsmq");\nconst rsmq = new RedisSMQ( {host: "127.0.0.1", port: 6379, ns: "rsmq"} );\n```\n\n### Queue\n\n#### createQueue\nCreate a new queue.\n\nParameters:\n\n* `qname` (String): The Queue name. Maximum 160 characters; alphanumeric characters, hyphens (-), and underscores (_) are allowed.\n* `vt` (Number): *optional* *(Default: 30)* The length of time, in seconds, that a message received from a queue will be invisible to other receiving components when they ask to receive messages. Allowed values: 0-9999999 (around 115 days)\n* `delay` (Number): *optional* *(Default: 0)* The time in seconds that the delivery of all new messages in the queue will be delayed. Allowed values: 0-9999999 (around 115 days)\n* `maxsize` (Number): *optional* *(Default: 65536)* The maximum message size in bytes. Allowed values: 1024-65536 and -1 (for unlimited size)\n\nReturns:\n\n* `1` (Number)\n\nExample:\n\n```javascript\nrsmq.createQueue({ qname: "myqueue" }, function (err, resp) {\n\tif (err) {\n\t\tconsole.error(err)\n\t\treturn\n\t}\n\n\tif (resp === 1) {\n\t\tconsole.log("queue created")\n\t}\n});\n```\n\n#### listQueues\nList all queues\n\nReturns an array:\n\n* `["qname1", "qname2"]`\n\nExample:\n\n```javascript\nrsmq.listQueues(function (err, queues) {\n\tif (err) {\n\t\tconsole.error(err)\n\t\treturn\n\t}\n\n\tconsole.log("Active queues: " + queues.join( "," ) )\n});\n```\n\n#### deleteQueue\nDeletes a queue and all messages.\n\nParameters:\n\n* `qname` (String): The Queue name.\n\nReturns:\n\n* `1` (Number)\n\nExample:\n\n```javascript\nrsmq.deleteQueue({ qname: "myqueue" }, function (err, resp) {\n\tif (err) {\n\t\tconsole.error(err)\n\t\treturn\n\t}\n\n\tif (resp === 1) {\n\t\tconsole.log("Queue and all messages deleted.")\n\t} else {\n\t\tconsole.log("Queue not found.")\n\t}\n});\n```\n\n#### getQueueAttributes\nGet queue attributes, counter and stats\n\nParameters:\n\n* `qname` (String): The Queue name.\n\nReturns an object:\n\n* `vt` (Number): The visibility timeout for the queue in seconds\n* `delay` (Number): The delay for new messages in seconds\n* `maxsize` (Number): The maximum size of a message in bytes\n* `totalrecv` (Number): Total number of messages received from the queue\n* `totalsent` (Number): Total number of messages sent to the queue\n* `created` (Number): Timestamp (epoch in seconds) when the queue was created\n* `modified` (Number): Timestamp (epoch in seconds) when the queue was last modified with `setQueueAttributes`\n* `msgs` (Number): Current number of messages in the queue\n* `hiddenmsgs` (Number): Current number of hidden / not visible messages. A message can be hidden while "in flight" due to a `vt` parameter or when sent with a `delay`\n\nExample:\n\n```javascript\nrsmq.getQueueAttributes({ qname: "myqueue" }, function (err, resp) {\n\tif (err) {\n\t\tconsole.error(err);\n\t\treturn;\n\t}\n\n\tconsole.log("==============================================");\n\tconsole.log("=================Queue Stats==================");\n\tconsole.log("==============================================");\n\tconsole.log("visibility timeout: ", resp.vt);\n\tconsole.log("delay for new messages: ", resp.delay);\n\tconsole.log("max size in bytes: ", resp.maxsize);\n\tconsole.log("total received messages: ", resp.totalrecv);\n\tconsole.log("total sent messages: ", resp.totalsent);\n\tconsole.log("created: ", resp.created);\n\tconsole.log("last modified: ", resp.modified);\n\tconsole.log("current n of messages: ", resp.msgs);\n\tconsole.log("hidden messages: ", resp.hiddenmsgs);\n});\n```\n\n    \n#### setQueueAttributes\nSets queue parameters.\n\nParameters:\n\n* `qname` (String): The Queue name.\n* `vt` (Number): *optional* * The length of time, in seconds, that a message received from a queue will be invisible to other receiving components when they ask to receive messages. Allowed values: 0-9999999 (around 115 days)\n* `delay` (Number): *optional* The time in seconds that the delivery of all new messages in the queue will be delayed. Allowed values: 0-9999999 (around 115 days)\n* `maxsize` (Number): *optional* The maximum message size in bytes. Allowed values: 1024-65536 and -1 (for unlimited size)\n\nNote: At least one attribute (vt, delay, maxsize) must be supplied. Only attributes that are supplied will be modified.\n\nReturns an object:\n\n* `vt` (Number): The visibility timeout for the queue in seconds\n* `delay` (Number): The delay for new messages in seconds\n* `maxsize` (Number): The maximum size of a message in bytes\n* `totalrecv` (Number): Total number of messages received from the queue\n* `totalsent` (Number): Total number of messages sent to the queue\n* `created` (Number): Timestamp (epoch in seconds) when the queue was created\n* `modified` (Number): Timestamp (epoch in seconds) when the queue was last modified with `setQueueAttributes`\n* `msgs` (Number): Current number of messages in the queue\n* `hiddenmsgs` (Number): Current number of hidden / not visible messages. A message can be hidden while "in flight" due to a `vt` parameter or when sent with a `delay`\n\nExample:\n\n```javascript\nrsmq.setQueueAttributes({ qname: "myqueue", vt: "30"}, function (err, resp) {\n\tif (err) {\n\t\tconsole.error(err)\n\t\treturn\n\t}\n\n\tconsole.log("changed the invisibility time of messages that have been received to 30 seconds");\n\tconsole.log(resp);\n});\n```\n\n### Messages\n\n#### sendMessage\nSends a new message.\n\nParameters:\n\n* `qname` (String)\n* `message` (String)\n* `delay` (Number): *optional* *(Default: queue settings)* The time in seconds that the delivery of the message will be delayed. Allowed values: 0-9999999 (around 115 days)\n\nReturns:\n\n* `id` (String): The internal message id.\n\nExample:\n\n```javascript\nrsmq.sendMessage({ qname: "myqueue", message: "Hello World "}, function (err, resp) {\n\tif (err) {\n\t\tconsole.error(err)\n\t\treturn\n\t}\n\n\tconsole.log("Message sent. ID:", resp);\n});\n```\n\n#### receiveMessage\nReceive the next message from the queue.\n\nParameters:\n\n* `qname` (String): The Queue name.\n* `vt` (Number): *optional* *(Default: queue settings)* The length of time, in seconds, that the received message will be invisible to others. Allowed values: 0-9999999 (around 115 days)\n\nReturns an object:\n\n  * `message` (String): The message\'s contents.\n  * `id` (String): The internal message id.\n  * `sent` (Number): Timestamp of when this message was sent / created.\n  * `fr` (Number): Timestamp of when this message was first received.\n  * `rc` (Number): Number of times this message was received.\n\nNote: Will return an empty object if no message is there  \n\nExample:\n\n```javascript\nrsmq.receiveMessage({ qname: "myqueue" }, function (err, resp) {\n\tif (err) {\n\t\tconsole.error(err)\n\t\treturn\n\t}\n\n\tif (resp.id) {\n\t\tconsole.log("Message received.", resp)\n\t} else {\n\t\tconsole.log("No messages for me...")\n\t}\n});\n```\n\n#### deleteMessage\nParameters:\n\n* `qname` (String): The Queue name.\n* `id` (String): message id to delete.\n\nReturns:\n\n* `1` if successful, `0` if the message was not found (Number).\n\nExample:\n\n```javascript\nrsmq.deleteMessage({ qname: "myqueue", id: "dhoiwpiirm15ce77305a5c3a3b0f230c6e20f09b55" }, function (err, resp) {\n\tif (err) {\n\t\tconsole.error(err)\n\t\treturn\n\t}\n\n\tif (resp === 1) {\n\t\tconsole.log("Message deleted.")\n\t} else {\n\t\tconsole.log("Message not found.")\n\t}\n});\n```\n\n#### popMessage\nReceive the next message from the queue **and delete it**.\n\n**Important:** This method deletes the message it receives right away. There is no way to receive the message again if something goes wrong while working on the message.\n\nParameters:\n\n* `qname` (String): The Queue name.\n\nReturns an object:\n\n  * `message` (String): The message\'s contents.\n  * `id` (String): The internal message id.\n  * `sent` (Number): Timestamp of when this message was sent / created.\n  * `fr` (Number): Timestamp of when this message was first received.\n  * `rc` (Number): Number of times this message was received.\n\nNote: Will return an empty object if no message is there\n\nExample:\n\n```javascript\nrsmq.popMessage({ qname: "myqueue" }, function (err, resp) {\n\tif (err) {\n\t\tconsole.error(err)\n\t\treturn\n\t}\n\n\tif (resp.id) {\n\t\tconsole.log("Message received and deleted from queue", resp)\n\t} else {\n\t\tconsole.log("No messages for me...")\n\t}\n});\n```\n\n#### changeMessageVisibility\nChange the visibility timer of a single message.\nThe time when the message will be visible again is calculated from the current time (now) + `vt`.\n\nParameters:\n\n* `qname` (String): The Queue name.\n* `id` (String): The message id.\n* `vt` (Number): The length of time, in seconds, that this message will not be visible. Allowed values: 0-9999999 (around 115 days)\n\nReturns: \n\n* `1` if successful, `0` if the message was not found (Number).\n\nExample:\n\n```javascript\nrsmq.changeMessageVisibility({ qname: "myqueue", vt: "60", id: "dhoiwpiirm15ce77305a5c3a3b0f230c6e20f09b55" }, function (err, resp) {\n\tif (err) {\n\t\tconsole.error(err)\n\t\treturn\n\t}\n\n\tif (resp === 1) {\n\t\tconsole.log("message hidden for 60 seconds")\n\t}\n});\n```\n\n    \n### quit\nDisconnect the redis client.\nThis is only useful if you are using rsmq within a script and want node to be able to exit.\n\n## Realtime\nWhen [initializing](#initialize) RSMQ you can enable the realtime PUBLISH for new messages. On every new message that gets sent to RSQM via `sendMessage` a Redis PUBLISH will be issued to `{rsmq.ns}:rt:{qname}`.\n\nExample for RSMQ with default settings:\n\n* The queue `testQueue` already contains 5 messages.\n* A new message is being sent to the queue `testQueue`.\n* The following Redis command will be issued: `PUBLISH rsmq:rt:testQueue 6`\n\n### How to use the realtime option\nBesides the PUBLISH when a new message is sent to RSMQ nothing else will happen. Your app could use the Redis SUBSCRIBE command to be notified of new messages and issue a `receiveMessage` then. However make sure not to listen with multiple workers for new messages with SUBSCRIBE to prevent multiple simultaneous `receiveMessage` calls. \n\n## Changes\nsee the [CHANGELOG](https://github.com/smrchy/rsmq/blob/master/CHANGELOG.md)\n\n## Other projects\n|Name|Description|\n|:--|:--|\n|[**node-cache**](https://github.com/tcs-de/nodecache)|Simple and fast Node.js internal caching. Node internal in memory cache like memcached.|\n|[**redis-tagging**](https://github.com/smrchy/redis-tagging)|A Node.js helper library to make tagging of items in any legacy database (SQL or NoSQL) easy and fast.|\n|[**redis-sessions**](https://github.com/smrchy/redis-sessions)|An advanced session store for Node.js and Redis|\n|[**rsmq-worker**](https://github.com/mpneuried/rsmq-worker)|Helper to implement a worker based on [RSMQ (Redis Simple Message Queue)](https://github.com/smrchy/rsmq).|\n|[**connect-redis-sessions**](https://github.com/mpneuried/connect-redis-sessions)|A connect or express middleware to use [redis sessions](https://github.com/smrchy/redis-sessions) that lets you handle multiple sessions per user_id.|\n\n## The MIT License\nPlease see the LICENSE.md file.\n'