b'# GoBoy\n\n[![Build Status](https://travis-ci.org/Humpheh/goboy.svg?branch=master)](https://travis-ci.org/Humpheh/goboy)\n[![codecov](https://codecov.io/gh/Humpheh/goboy/branch/master/graph/badge.svg)](https://codecov.io/gh/Humpheh/goboy)\n[![Go Report Card](https://goreportcard.com/badge/github.com/Humpheh/goboy)](https://goreportcard.com/report/github.com/Humpheh/goboy)\n[![GoDoc](https://godoc.org/github.com/Humpheh/goboy?status.svg)](https://godoc.org/github.com/Humpheh/goboy)\n\nGoBoy is a multi-platform Nintendo GameBoy and GameBoy Color emulator written in go.\nThe emulator can run the majority of GB games and some CGB games. There is also\ncolour and sound support.\nThis emulator was primarily built as a development exercise and is still work in progress.\nPlease feel free to contribute if you\'re interested in GameBoy emulator development.\n\n<img src="docs/images/links-awakening-dx.png" width="400"><img src="docs/images/pkmn-gold-game.png" width="400">\n\nThe program includes debugging functions making it useful for understanding the emulator operation for\nbuilding one yourself. These functions include printing of opcodes and register values to the console at each\nstep (although will greatly slow down the emulation) and toggling of individual sound channels.\n\n## Installation\n\nDownload the [latest release](https://github.com/Humpheh/goboy/releases/latest) of GoBoy from the releases page. \n\n### Building from source\n\nWith go installed, you can install GoBoy into your go bin by running:\n```sh\ngo get github.com/Humpheh/goboy/cmd/goboy\n```\n\nIf you have Go 1.11 you can also do:\n```sh\ngit clone https://github.com/Humpheh/goboy.git\ncd goboy\ngo build -o goboy cmd/goboy/main.go\n```\n\nGoBoy is compatible with MacOS, Windows and Linux. Building on Windows 10 requires MinGW and on Linux, you\'ll need to install [gtk](https://www.gtk.org/download/linux.php).\n\nGoBoy uses the go library [pixel](https://github.com/faiface/pixel) for control binding and graphics rendering,\nwhich requires OpenGL. You may need to install some requirements which can be found on the\n[pixels readme](https://github.com/faiface/pixel#requirements).\n\n## Usage \n```sh\ngoboy zelda.gb\n```\nControls: <kbd>&larr;</kbd> <kbd>&uarr;</kbd> <kbd>&darr;</kbd> <kbd>&rarr;</kbd> <kbd>Z</kbd> <kbd>X</kbd> <kbd>Enter</kbd> <kbd>Backspace</kbd>\n\nThe colour palette can be cycled with <kbd>=</kbd> (in DMG mode), and the game can\nbe made fullscreen with <kbd>F</kbd>.\n\n\nOther options:\n```sh\n  -dmg\n    \tset to force dmg mode\n  -mute\n    \tmute sound output\n```\n\nDebug or experimental options:\n```sh\n  -cpuprofile string\n    \twrite cpu profile to file (debugging)\n  -disableVsync\n    \tset to disable vsync (debugging)\n  -stepthrough\n    \tstep through opcodes (debugging)\n  -unlocked\n    \tif to unlock the cpu speed (debugging)\n```\n\n### Debugging\nThere are a few keyboard shortcuts useful for debugging: \n\n<kbd>Q</kbd> - force toggle background<br/>\n<kbd>W</kbd> - force toggle sprites<br/>\n<kbd>A</kbd> - print gb background palette data (cgb)<br/>\n<kbd>S</kbd> - print sprite palette data (cgb)<br/>\n<kbd>D</kbd> - print background map to log<br/>\n<kbd>E</kbd> - toggle opcode printing to console (will slow down execution)<br/>\n<kbd>7,8,9,0</kbd> - toggle sound channels 1 through 4.\n\n### Saving \nIf the loaded rom supports a battery a `<rom-name>.sav` (e.g. `zelda.gb.sav`) file will be created\nnext to the loaded rom containing a dump of the RAM from the cartridge. A loop in the program will\nupdate this save file every second while the game is running.\n\n## Testing\nGoBoy currently passes all of the tests in Blargg\'s `cpu_instrs` and `instr_timing` test roms.\n\n<img src="docs/images/cpu-instrs.png" width="400"><img src="docs/images/instr-timing.png" width="400">\n\nThese roms are included in the source code along with a test to check the output is as expected\n(`instructions_test.go` and `timing_test.go`). These tests are also run on each commit.\n\n## Contributing\n\nPlease feel free to open pull requests to this project or play around if you\'re interested! There are\nstill plenty of small bugs that can easily be found through playing games on the emulator, or take a\ntask from the TODO list below!\n\n## Known Bugs and TODO list\n- [ ] Sprite Z-drawing\n- [x] Sprites near edge of screen not drawing\n- [x] Top half of sprite disappearing off top of screen\n- [x] Small sprites row glitch\n- [ ] BG tile window offset issue - visible on *Pokemon Red* splash screen - possibly mistimed interrupt?\n- [ ] *Harry Potter and The Chamber of Secrets* has odd sprite issues\n- [ ] Request to set screen to white does not do so\n- [x] MBC3 banking support\n- [ ] Improve APU (see *Pokemon Yellow* opening screen for reason why)\n- [ ] MBC3 clock support\n- [ ] Icon \n- [ ] White screen when off\n- [ ] Speed up CPU and PPU\n- [x] Resizable window\n- [ ] Platform native UI?\n- [ ] MBC4-7 support (?)\n- [ ] More DMG colour palettes\n- [ ] STOP opcode behaviour\n- [ ] Support save-states (could use gob)\n- [ ] Support boot roms\n- [ ] [Blargg\'s test ROMs](http://gbdev.gg8.se/wiki/articles/Test_ROMs)\n\n<img src="docs/images/links-awakening.png" width="400"><img src="docs/images/pkmn-tcg.png" width="400">\n\n<img src="docs/images/pkmn-gold.png" width="400"><img src="docs/images/pkmn-red.png" width="400">\n\n## Resources\nA large variety of resources were used to understand and test the GameBoy hardware. Some of these include:\n* <http://www.codeslinger.co.uk/pages/projects/gameboy/files/GB.pdf>\n* <https://github.com/retrio/gb-test-roms>\n* <http://www.codeslinger.co.uk/pages/projects/gameboy/beginning.html>\n* <http://bgb.bircd.org/> - invaluable for debugging\n* <https://github.com/AntonioND/giibiiadvance/tree/master/docs>\n* <https://github.com/trekawek/coffee-gb>\n'