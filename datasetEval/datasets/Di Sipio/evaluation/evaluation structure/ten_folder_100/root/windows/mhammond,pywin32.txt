b'# pywin32\n\nThis is the readme for the Python for Win32 (pywin32) extensions, which provides access to many of the Windows APIs from Python.\n\nSee [CHANGES.txt](https://github.com/mhammond/pywin32/blob/master/CHANGES.txt) for recent notable changes.\n\nNote that as of build 222, pywin32 has a new home at [github](https://github.com/mhammond/pywin32).\nYou can find build 221 and later on github and older versions can be found on\nthe old project home at [sourceforge](https://sourceforge.net/projects/pywin32/)\n\nA special shout-out to @xoviat who provided enormous help with the github move!\n\n## Support\n\nFeel free to [open issues](https://github.com/mhammond/pywin32/issues) for\nall bugs (or suspected bugs) in pywin32. [pull-requests](https://github.com/mhammond/pywin32/pulls)\nfor all bugs or features are also welcome.\n\nHowever, please **do not open github issues for general support requests**, or\nfor problems or questions using the modules in this package - they will be\nclosed. For such issues, please email the\n[python-win32 mailing list](http://mail.python.org/mailman/listinfo/python-win32) -\nnote that you must be subscribed to the list before posting.\n\n## Binaries\nBy far the easiest way to use pywin32 is to grab binaries from the [most recent release](https://github.com/mhammond/pywin32/releases)\n\n## Installing via PIP\n\nNote that PIP support is experimental.\n\nYou can install pywin32 via pip:\n> pip install pywin32\n\nNote that if you want to use pywin32 for "system wide" features, such as\nregistering COM objects or implementing Windows Services, then you must run\nthe following command from an elevated command prompt:\n\n> python Scripts/pywin32_postinstall.py -install\n\n## Building from source\nBuilding from source is extremely complicated due to the fact we support building\nold versions of Python using old versions of Windows SDKs. If you just want to\nbuild the most recent version, you can probably get away with installing th\nsame MSVC version used to build that version of Python, grabbing a recent\nWindows SDK and running `setup.py`\n\n`setup.py` is a standard distutils build script.  You probably want:\n\n> python setup.py install\n\nor\n\n> python setup.py --help\n\nYou can run `setup.py` without any arguments to see\nspecific information about dependencies.  A vanilla MSVC installation should\nbe able to build most extensions and list any extensions that could not be\nbuilt due to missing libraries - if the build actually fails with your\nconfiguration, please [open an issue](https://github.com/mhammond/pywin32/issues).\n\n## Release process\n\nThe following steps are performed when making a new release - this is mainly\nto form a checklist so mhammond doesn\'t forget what to do :)\n\n* Ensure CHANGES.txt has everything worth noting, commit it.\n\n* Update setup.py with the new build number.\n\n* Execute build.bat, wait forever, test the artifacts.\n\n* Commit setup.py (so the new build number is in the repo), create a new git tag\n\n* Upload the .exe installers to github, the .whl files to pypi.\n\n* Update setup.py with the new build number + ".1" (eg, 123.1), to ensure\n  future test builds aren\'t mistaken for the real release.\n\n* Send mail to python-win32\n'