b'About Walk\n==========\n\nWalk is a "Windows Application Library Kit" for the Go Programming Language.\n\nIts primarily useful for Desktop GUI development, but there is some more stuff.\n\nSetup\n=====\n\nMake sure you have a working Go installation.\nSee [Getting Started](http://golang.org/doc/install.html)\n\n##### Note\nWalk currently requires Go 1.11.x or later.\n\n##### To Install\nNow run `go get github.com/lxn/walk`\n\nUsing Walk\n==========\n\nThe preferred way to create GUIs with Walk is to use its declarative sub package,\nas illustrated in this small example:\n\n##### `test.go`\n\n```go\npackage main\n\nimport (\n\t"github.com/lxn/walk"\n\t. "github.com/lxn/walk/declarative"\n\t"strings"\n)\n\nfunc main() {\n\tvar inTE, outTE *walk.TextEdit\n\n\tMainWindow{\n\t\tTitle:   "SCREAMO",\n\t\tMinSize: Size{600, 400},\n\t\tLayout:  VBox{},\n\t\tChildren: []Widget{\n\t\t\tHSplitter{\n\t\t\t\tChildren: []Widget{\n\t\t\t\t\tTextEdit{AssignTo: &inTE},\n\t\t\t\t\tTextEdit{AssignTo: &outTE, ReadOnly: true},\n\t\t\t\t},\n\t\t\t},\n\t\t\tPushButton{\n\t\t\t\tText: "SCREAM",\n\t\t\t\tOnClicked: func() {\n\t\t\t\t\toutTE.SetText(strings.ToUpper(inTE.Text()))\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}.Run()\n}\n```\n\n##### Create Manifest `test.manifest`\n\n```xml\n<?xml version="1.0" encoding="UTF-8" standalone="yes"?>\n<assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0">\n    <assemblyIdentity version="1.0.0.0" processorArchitecture="*" name="SomeFunkyNameHere" type="win32"/>\n    <dependency>\n        <dependentAssembly>\n            <assemblyIdentity type="win32" name="Microsoft.Windows.Common-Controls" version="6.0.0.0" processorArchitecture="*" publicKeyToken="6595b64144ccf1df" language="*"/>\n        </dependentAssembly>\n    </dependency>\n    <application xmlns="urn:schemas-microsoft-com:asm.v3">\n        <windowsSettings>\n            <dpiAwareness xmlns="http://schemas.microsoft.com/SMI/2016/WindowsSettings">PerMonitorV2, PerMonitor</dpiAwareness>\n            <dpiAware xmlns="http://schemas.microsoft.com/SMI/2005/WindowsSettings">True</dpiAware>\n        </windowsSettings>\n    </application>\n</assembly>\n```\n\nThen either compile the manifest using the [rsrc tool](https://github.com/akavel/rsrc), like this:\n\n\tgo get github.com/akavel/rsrc\n\trsrc -manifest test.manifest -o rsrc.syso\n\nor rename the `test.manifest` file to `test.exe.manifest` and distribute it with the application instead.\n\n##### Build app\n\nIn the directory containing `test.go` run\n\n\tgo build\n\t\nTo get rid of the cmd window, instead run\n\n\tgo build -ldflags="-H windowsgui"\n\n##### Run app\n\t\n\ttest.exe\n\t\n##### Sample Output (Windows 7)\n\n![alt tag](http://i.imgur.com/lUrgE2Q.png)\n\n##### More Examples\nThere are some [examples](examples) that should get you started.\n\nApplication Manifest Files\n==========================\nWalk requires Common Controls 6. This means that you must put an appropriate\napplication manifest file either next to your executable or embedded as a\nresource.\n\nYou can copy one of the application manifest files that come with the examples.\n\nTo embed a manifest file as a resource, you can use the [rsrc tool](https://github.com/akavel/rsrc).\n\nIMPORTANT: If you don\'t embed a manifest as a resource, then you should not launch\nyour executable before the manifest file is in place.\nIf you do anyway, the program will not run properly. And worse, Windows will not\nrecognize a manifest file, you later drop next to the executable. To fix this,\nrebuild your executable and only launch it with a manifest file in place.\n\nCGo Optimizations\n=================\n\nThe usual default message loop includes calls to win32 API functions, which incurs a decent amount\nof runtime overhead coming from Go. As an alternative to this, you may compile Walk using an\noptional C implementation of the main message loop, by passing the `walk_use_cgo` build tag:\n\n   go build -tags walk_use_cgo\n'