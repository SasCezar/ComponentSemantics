b'About ``ntfy``\n==============\n|Version|_ |Docs|_ |Build|_ |WinBuild|_ |Coverage|_ |SayThanks|_\n\n.. |Version| image:: https://img.shields.io/pypi/v/ntfy.svg?logo=data%3Aimage/svg%2Bxml%3Bbase64%2CPHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHdpZHRoPSIyNDAiIGhlaWdodD0iMjQwIj48cGF0aCBmaWxsPSIjMzY3MWEyIiBkPSJNNjIuNDc2IDMzLjRjMC0xNi4zNiA0LjM4Ni0yNS4yNiAyOC42MDctMjkuNDk4IDE2LjQ0NC0yLjg4IDM3LjUyOC0zLjI0MiA1Ny4xOTMgMCAxNS41MzMgMi41NjQgMjguNjA3IDE0LjEzNCAyOC42MDcgMjkuNDk3djUzLjk3YzAgMTUuODMtMTIuNjkzIDI4Ljc5NS0yOC42MDcgMjguNzk1SDkxLjA4M2MtMTkuNDEgMC0zNS43NyAxNi41NS0zNS43NyAzNS4yNnYyNS44OTVIMzUuNjVjLTE2LjYzNiAwLTI2LjMyLTExLjk5My0zMC4zODgtMjguNzc2LTUuNDktMjIuNTQ2LTUuMjU2LTM1Ljk4IDAtNTcuNTc0QzkuODE4IDcyLjEzNyAyNC4zNzUgNjIuMTk4IDQxLjAxIDYyLjE5OGg3OC42OHYtNy4yMDRINjIuNDc2VjMzLjR6Ii8%2BPHBhdGggZmlsbD0iI2ZmZDA0NiIgZD0iTTE3Ni44ODMgMjA2LjEyM2MwIDE2LjM2LTE0LjE5OCAyNC42NDQtMjguNjA3IDI4Ljc3Ni0yMS42NzggNi4yMy0zOS4wNzUgNS4yNzMtNTcuMTkzIDAtMTUuMTMtNC40MS0yOC42MDctMTMuNDE3LTI4LjYwNy0yOC43OHYtNTMuOTdjMC0xNS41MzMgMTIuOTQ3LTI4Ljc5OCAyOC42MDctMjguNzk4aDU3LjE5M2MxOS4wNSAwIDM1Ljc3LTE2LjQ2NSAzNS43Ny0zNS45OFY2Mi4xOTZoMjEuNDQ0YzE2LjY1NiAwIDI0LjQ5NiAxMi4zNzYgMjguNjA3IDI4Ljc3NyA1LjcyMiAyMi43OCA1Ljk3NiAzOS44MTcgMCA1Ny41NzQtNS43ODUgMTcuMjUtMTEuOTcyIDI4Ljc3Ny0yOC42MDcgMjguNzc3aC04NS44djcuMjA1aDU3LjE5M3YyMS41OXoiLz48L3N2Zz4%3D\n.. _Version: https://pypi.org/project/ntfy/\n.. |Docs| image:: http://readthedocs.org/projects/ntfy/badge/?version=latest\n.. _Docs: http://ntfy.readthedocs.org/en/stable/?badge=latest\n.. |Build| image:: https://img.shields.io/travis/dschep/ntfy/master.svg?logo=data%3Aimage/svg%2Bxml%3Bbase64%2CPHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHhtbG5zOnhsaW5rPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rIiB2aWV3Qm94PSItMTQyLjUgLTE0Mi41IDMyIDE2IiB3aWR0aD0iMzIiIGhlaWdodD0iMTYiPjxjaXJjbGUgcj0iOCIgY3g9Ii0xMzQuNSIgY3k9Ii0xMzQuNSIgZmlsbD0iI2RkNDgxNCIvPjxnIGlkPSJhIiB0cmFuc2Zvcm09Im1hdHJpeCguMDU2NDYgMCAwIC4wNTY0NiAtMTM0LjUgLTEzNC41KSIgZmlsbD0iI2ZmZiI%252BPGNpcmNsZSBjeD0iLTk2LjQiIHI9IjE4LjkiLz48cGF0aCBkPSJNLTQ1LjYgNjguNGMtMTYuNi0xMS0yOS0yOC0zNC00Ny44IDYtNSA5LjgtMTIuMyA5LjgtMjAuNnMtMy44LTE1LjctOS44LTIwLjZjNS0xOS44IDE3LjQtMzYuNyAzNC00Ny44bDEzLjggMjMuMkMtNDYtMzUuMi01NS4zLTE4LjctNTUuMyAwYzAgMTguNyA5LjMgMzUuMiAyMy41IDQ1LjJ6Ii8%252BPC9nPjx1c2UgeGxpbms6aHJlZj0iI2EiIHRyYW5zZm9ybT0icm90YXRlKDEyMCAtMTM0LjUgLTEzNC41KSIgd2lkdGg9IjEwMCUiIGhlaWdodD0iMTAwJSIvPjx1c2UgeGxpbms6aHJlZj0iI2EiIHRyYW5zZm9ybT0icm90YXRlKC0xMjAgLTEzNC41IC0xMzQuNSkiIHdpZHRoPSIxMDAlIiBoZWlnaHQ9IjEwMCUiLz48Y2lyY2xlIGN5PSItMTM0LjUiIGN4PSItMTM0LjUiIHI9IjgiIGZpbGw9IiNkZDQ4MTQiLz48ZyB0cmFuc2Zvcm09Im1hdHJpeCguMDU2NDYgMCAwIC4wNTY0NiAtMTM0LjUgLTEzNC41KSIgZmlsbD0iI2ZmZiI%252BPGNpcmNsZSByPSIxOC45IiBjeD0iLTk2LjQiLz48cGF0aCBkPSJNLTQ1LjYgNjguNGMtMTYuNi0xMS0yOS0yOC0zNC00Ny44IDYtNSA5LjgtMTIuMyA5LjgtMjAuNnMtMy44LTE1LjctOS44LTIwLjZjNS0xOS44IDE3LjQtMzYuNyAzNC00Ny44bDEzLjggMjMuMkMtNDYtMzUuMi01NS4zLTE4LjctNTUuMyAwYzAgMTguNyA5LjMgMzUuMiAyMy41IDQ1LjJ6Ii8%252BPC9nPjx1c2UgaGVpZ2h0PSIxMDAlIiB3aWR0aD0iMTAwJSIgdHJhbnNmb3JtPSJyb3RhdGUoMTIwIC0xMzQuNSAtMTM0LjUpIiB4bGluazpocmVmPSIjYSIvPjx1c2UgaGVpZ2h0PSIxMDAlIiB3aWR0aD0iMTAwJSIgdHJhbnNmb3JtPSJyb3RhdGUoLTEyMCAtMTM0LjUgLTEzNC41KSIgeGxpbms6aHJlZj0iI2EiLz48cGF0aCBkPSJNLTExMS41NTUtMTMwLjAzMWE4LjY5OCA4LjY5OCAwIDAgMS0uODYgMS41NDZjLS40NTMuNjQ1LS44MjMgMS4wOTItMS4xMDkgMS4zNC0uNDQyLjQwNy0uOTE2LjYxNS0xLjQyNC42MjctLjM2NCAwLS44MDQtLjEwNC0xLjMxNS0uMzE0LS41MTQtLjIxLS45ODUtLjMxMy0xLjQxNy0uMzEzLS40NTIgMC0uOTM3LjEwMy0xLjQ1Ni4zMTMtLjUyLjIxLS45MzguMzItMS4yNTguMzMtLjQ4Ny4wMjEtLjk3Mi0uMTkzLTEuNDU3LS42NDMtLjMwOS0uMjctLjY5Ni0uNzMyLTEuMTU5LTEuMzg3LS40OTctLjctLjkwNS0xLjUxLTEuMjI1LTIuNDM0LS4zNDMtLjk5OS0uNTE1LTEuOTY2LS41MTUtMi45MDIgMC0xLjA3Mi4yMzItMS45OTcuNjk2LTIuNzcyYTQuMDgyIDQuMDgyIDAgMCAxIDEuNDU3LTEuNDc0IDMuOTIgMy45MiAwIDAgMSAxLjk3LS41NTZjLjM4NyAwIC44OTQuMTIgMS41MjQuMzU1LjYyOC4yMzYgMS4wMzIuMzU1IDEuMjA5LjM1NS4xMzIgMCAuNTgtLjE0IDEuMzQtLjQxOC43MTgtLjI1OSAxLjMyNS0uMzY2IDEuODIxLS4zMjQgMS4zNDcuMTA5IDIuMzU4LjY0IDMuMDMgMS41OTUtMS4yMDMuNzMtMS43OTkgMS43NTItMS43ODcgMy4wNjIuMDEgMS4wMjEuMzgxIDEuODcgMS4xMDkgMi41NDUuMzMuMzEzLjY5OC41NTUgMS4xMDguNzI3LS4wODkuMjU4LS4xODMuNTA1LS4yODIuNzQyem0tMy4wODgtMTIuMTQ5YzAgLjgtLjI5MiAxLjU0Ny0uODc1IDIuMjM5LS43MDMuODIyLTEuNTUzIDEuMjk3LTIuNDc2IDEuMjIyYTIuNTAyIDIuNTAyIDAgMCAxLS4wMTgtLjMwM2MwLS43NjguMzM0LTEuNTkuOTI4LTIuMjYzLjI5Ni0uMzQuNjczLS42MjMgMS4xMy0uODQ5LjQ1Ny0uMjIyLjg4OS0uMzQ1IDEuMjk1LS4zNjYuMDExLjEwNy4wMTYuMjE0LjAxNi4zMnoiIGZpbGw9IiNmZmYiLz48L3N2Zz4%3D\n.. _Build: https://travis-ci.org/dschep/ntfy\n.. |WinBuild| image:: https://img.shields.io/appveyor/ci/dschep/ntfy/master.svg?logo=data%3Aimage%2Fsvg%2Bxml%3Bbase64%2CPHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZlcnNpb249IjEuMSIgd2lkdGg9IjEyOCIgaGVpZ2h0PSIxMjgiIHZpZXdCb3g9IjAgMCAxMjggMTI4Ij48ZyBmaWxsPSIjMUJBMUUyIiB0cmFuc2Zvcm09InNjYWxlKDgpIj48cGF0aCBkPSJNMCAyLjI2NWw2LjUzOS0uODg4LjAwMyA2LjI4OC02LjUzNi4wMzd6Ii8%2BPHBhdGggZD0iTTYuNTM2IDguMzlsLjAwNSA2LjI5My02LjUzNi0uODk2di01LjQ0eiIvPjxwYXRoIGQ9Ik03LjMyOCAxLjI2MWw4LjY3LTEuMjYxdjcuNTg1bC04LjY3LjA2OXoiLz48cGF0aCBkPSJNMTYgOC40NDlsLS4wMDIgNy41NTEtOC42Ny0xLjIyLS4wMTItNi4zNDV6Ii8%2BPC9nPjwvc3ZnPg==\n.. _WinBuild: https://ci.appveyor.com/project/dschep/ntfy\n.. |Coverage| image:: https://coveralls.io/repos/github/dschep/ntfy/badge.svg?branch=master\n.. _Coverage: https://coveralls.io/github/dschep/ntfy?brach=master\n.. |Requires| image:: https://requires.io/github/dschep/ntfy/requirements.svg?branch=master\n.. _Requires: https://requires.io/github/dschep/ntfy/requirements/?branch=master\n.. |SayThanks| image:: https://img.shields.io/badge/Say%20Thanks-!-1EAEDB.svg\n.. _SayThanks: https://saythanks.io/to/dschep\n\n\n``ntfy`` brings notification to your shell. It can automatically provide\ndesktop notifications when long running commands finish or it can send\npush notifications to your phone when a specific command finishes.\nConfused? This video demonstrates some of this functionality:\n\n.. image:: https://raw.githubusercontent.com/dschep/ntfy/master/docs/demo.gif\n\nQuickstart\n----------\n\n.. code:: shell\n\n    $ sudo pip install ntfy\n    $ ntfy send test\n    # send a notification when the command `sleep 10` finishes\n    # this sends the message \'"sleep 10" succeeded in 0:10 minutes\'\n    $ ntfy done sleep 10\n    $ ntfy -b pushover -o user_key t0k3n send \'Pushover test!\'\n    $ ntfy -t \'ntfy\' send "Here\'s a custom notification title!"\n    $ echo -e \'backends: ["pushover"]\\npushover: {"user_key": "t0k3n"}\' > ~/.ntfy.yml\n    $ ntfy send "Pushover via config file!"\n    $ ntfy done --pid 6379  # pid extra\n    $ ntfy send ":tada: ntfy supports emoji! :100:"  # emoji extra\n    # Enable shell integration\n    $ echo \'eval "$(ntfy shell-integration)"\' >> ~/.bashrc\n\nInstall\n-------\nThe install technique in the quickstart is the suggested method of installation.\nIt can be installed in a virtualenv, but with some caveats: Linux notifications\nrequire ``--system-site-packages`` for the virtualenv and OS X notifications\ndon\'t work at all.\n\n**:penguin: NOTE:** `Linux Desktop Notifications <#linux-desktop-notifications---linux>`_\nrequire Python DBUS bindings. See `here <#linux-desktop-notifications---linux>`_ for more info.\n\nShell integration\n~~~~~~~~~~~~~~~~~\n``ntfy`` has support for **automatically** sending notifications when long\nrunning commands finish in bash and zsh. In bash it emulates zsh\'s preexec and\nprecmd functionality with `rcaloras/bash-preexec <https://github.com/rcaloras/bash-preexec>`_.\nTo enable it add the following to your ``.bashrc`` or ``.zshrc``:\n\n.. code:: shell\n\n    eval "$(ntfy shell-integration)"\n\nBy default it will only send notifications for commands lasting longer than 10\nseconds and if the terminal is focused. Terminal focus works on X11(Linux) and\nwith Terminal.app and iTerm2 on MacOS. Both options can be configured via the\n``--longer-than`` and ``--foreground-too`` options.\n\nTo avoid unnecessary notifications when running interactive programs, programs\nlisted in ``AUTO_NTFY_DONE_IGNORE`` don\'t generate notifications. For example:\n\n.. code:: shell\n\n    export AUTO_NTFY_DONE_IGNORE="vim screen meld"\n\nExtras\n~~~~~~\n``ntfy`` has a few features that require extra dependencies.\n    * ``ntfy done -p $PID`` requires installing as ``pip install ntfy[pid]``\n    * `emoji <https://en.wikipedia.org/wiki/Emoji>`_ support requires installing as ``pip install ntfy[emoji]``\n    * `XMPP <https://xmpp.org/>`_ support requires installing as ``pip install ntfy[xmpp]``\n    * `Telegram <https://telegram.org/>`_ support requires installing as ``pip install ntfy[telegram]``\n    * `Instapush <https://instapush.im/>`_ support requires installing as ``pip install ntfy[instapush]``\n    * `Slack <https://slack.com/>`_ support requires installing as ``pip install ntfy[slack]``\n    * `Rocket.Chat <https://Rocket.Chat>`_ support requires installing as ``pip install ntfy[rocketchat]``\n\nTo install multiple extras, separate with commas: e.g., ``pip install ntfy[pid,emoji]``.\n\nConfiguring ``ntfy``\n--------------------\n\n``ntfy`` is configured with a YAML file stored at ``~/.ntfy.yml`` or in standard platform specific locations:\n\n* Linux - ``~/.config/ntfy/ntfy.yml``\n* macOS - ``~/Library/Application Support/ntfy/ntfy.yml``\n* Windows - ``C:\\Users\\<User>\\AppData\\Local\\dschep\\ntfy.yml``\n\nBackends\n~~~~~~~~\n\nThe backends key specifies what backends to use by default. Each backend has\nits own configuration, stored in a key of its own name. For example:\n\n.. code:: yaml\n\n    ---\n    backends:\n        - pushover\n    pushover:\n        user_key: hunter2\n    pushbullet:\n        access_token: hunter2\n    simplepush:\n        key: hunter2\n    slack:\n        token: slacktoken\n        recipient: "#slackchannel"\n    xmpp:\n         jid: "user@gmail.com"\n         password: "xxxx"\n         mtype: "chat"\n         recipient: "me@jit.si"\n\nIf you want mulitple configs for the same backend type, you can specify any\nname and then specify the backend with a backend key. For example:\n\n.. code:: yaml\n\n    ---\n    pushover:\n        user_key: hunter2\n    cellphone:\n        backend: pushover\n        user_key: hunter2\n\nSee the backends below for available backends and options. As of v2.6.0 ``ntfy`` also supports\n`3rd party backends <#3rd-party-backends>`_\n\n`Pushover <https://pushover.net>`_ - ``pushover``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nRequired parameters:\n    * ``user_key``\n\nOptional parameters:\n    * ``sound``\n    * ``priority``\n    * ``expire``\n    * ``retry``\n    * ``callback``\n    * ``api_token`` - use your own application token\n    * ``device`` - target a device, if omitted, notification is sent to all devices\n    * ``url``\n    * ``url_title``\n    * ``html``\n\n`Pushbullet <https://pushbullet.com>`_ - ``pushbullet``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nRequired parameter:\n    * ``access_token`` - Your Pushbullet access token, created at https://www.pushbullet.com/#settings/account\n\nOptional parameters:\n    * ``device_iden`` - a device identifier, if omited, notification is sent to all devices\n    * ``email`` - send notification to pushbullet user with the specified email or send an email if they aren\'t a pushullet user\n\n`Simplepush <https://simplepush.io>`_ - ``simplepush``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nRequired parameter:\n    * ``key`` - Your Simplepush key, created by installing the Android App (no registration required) at https://simplepush.io\n\nOptional parameters:\n    * ``event`` - sets ringtone and vibration pattern for incoming notifications (can be defined in the simplepush app)\n\nXMPP - ``xmpp``\n~~~~~~~~~~~~~~~\nRequires parameters:\n    * ``jid``\n    * ``password``\n    * ``recipient``\nOptional parameters\n    * ``hostname`` (if not from jid)\n    * ``port``\n    * ``path_to_certs``\n    * ``mtype``\n\nRequires extras, install like this: ``pip install ntfy[xmpp]``.\n\nTo verify the SSL certificates offered by a server:\npath_to_certs = "path/to/ca/cert"\n\nWithout dnspython library installed, you will need\nto specify the server hostname if it doesn\'t match the jid.\n\nSpecify port if other than 5222.\nNOTE: Ignored without specified hostname\n\nNOTE: Google Hangouts doesn\'t support XMPP since 2017\n\n`Telegram <https://telegram.org>`_ - ``telegram``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nRequires extras, install like this: ``pip install ntfy[telegram]``.\n\nRequires ``ntfy`` to be installed as ``ntfy[telegram]``. This backend is\nconfigured the first time you will try to use it: ``ntfy -b telegram send\n"Telegram configured for ntfy"``.\n\n`Pushjet <https://pushjet.io/>`_ - ``pushjet``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nRequired parameter:\n    * ``secret`` - The Pushjet service secret token, created with http://docs.pushjet.io/docs/creating-a-new-service\n\nOptional parameters:\n    * ``endpoint`` - custom Pushjet API endpoint\n        (defaults to https://api.pushjet.io)\n    * ``level`` - The importance level from 1(low) to 5(high)\n    * ``link``\n\n`Notifico <https://n.tkte.ch/>`_ - ``notifico``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nRequired parameter:\n    * ``webhook`` - The webhook link, created at https://n.tkte.ch/\n                    (choose ``Plain Text`` service when creating the webhook)\n\n`Slack <https://slack.com>`_ - ``Slack``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nRequires extras, install like this: ``pip install ntfy[slack]``.\n\nRequired parameter:\n    * ``token`` - The Slack service secret token, created in https://api.slack.com/web#authentication\n    * ``recipient`` - The Slack channel or user to send notifications to. If you use the ``#`` symbol the message is send to a Slack channel and if you use the ``@`` symbol the message is send to a Slack user.\n\n`Instapush <https://instapush.im/>`_ - ``insta``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nRequires extras, install like this ``pip install ntfy[instapush]``.\n\nInstapush does not support notification title.\nIt sends template-driven notifications, so you have to setup you events on the dashboard first.\nThe backend is called insta due to homonymy with the instapush python wrapper\n\nRequired parameters:\n    * ``appid`` - The application id\n    * ``secret`` - The application secret\n    * ``event_name`` - The instapush event to be used\n    * ``trackers`` - The array of trakers to use\n\nNote on trackers:\nTrackers are placeholders for events (a sort of notification template). If you defined more than one tracker in your event\nyou\'ll have to provide more messages. At the moment, the only way to do so is to separate each message with a colon (:) character.\nYou can also escape the separator character:\nExample:\n\n.. code:: shell\n\n    ntfy -b insta send "message1:message2"\n    ntfy -b insta send "message1:message2\\:with\\:colons"\n\n`Prowl <https://www.prowlapp.com/>`_ - ``prowl``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nOptional parameters:\n    * ``api_key``\n    * ``provider_key``\n    * ``priority``\n    * ``url``\n\n`Linux Desktop Notifications <https://developer.gnome.org/notification-spec/>`_ - ``linux``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nWorks via `dbus`, works with most DEs like Gnome, KDE, XFCE and with libnotify.\n\nThe following dependecies should be installed.\n\n.. code:: shell\n\n    $ sudo apt install python-dbus # on ubuntu/debian\n\nYou will need to install some font that supports emojis (in Debian `fonts-symbola` or Gentoo `media-fonts/symbola`).\n\nOptional parameters:\n    * ``icon`` - Specifies path to the notification icon, empty string for no icon.\n    * ``urgency`` - Specifies the urgency level (low, normal, critical).\n    * ``transient`` - Skip the history (exp: the Gnome message tray) (true, false).\n    * ``soundfile`` - Specifies the notification sound file (e.g. /usr/share/sounds/notif.wav).\n    * ``timeout`` - Specifies notification expiration time level (-1 - system default, 0 - never expire).\n\nWindows Desktop Notifications - ``win32``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nUses ``pywin32``.\n\nMac OS X Notification Center - ``darwin``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nRequires ``ntfy`` to be installed globally (not in a virtualenv).\n\nSystem log - ``systemlog``\n~~~~~~~~~~~~~~~~~~~~~~~~~~\nUses the ``syslog`` core Python module, which is not available on Windows\nplatforms.\n\nOptional parameters:\n    * ``prio`` - Syslog priority level.  Default is ``ALERT``.  Possible values\n      are:\n\n      * EMERG\n      * ALERT\n      * CRIT\n      * ERR\n      * WARNING\n      * NOTICE\n      * INFO\n      * DEBUG\n\n    * ``facility`` - Syslog facility.  Default is ``LOCAL5``.  Possible values\n      are:\n\n      * KERN\n      * USER\n      * MAIL\n      * DAEMON\n      * AUTH\n      * LPR\n      * NEWS\n      * UUCP\n      * CRON\n      * SYSLOG\n      * LOCAL0\n      * LOCAL1\n      * LOCAL2\n      * LOCAL3\n      * LOCAL4\n      * LOCAL5\n      * LOCAL6\n      * LOCAL7\n\n    * ``fmt`` - Format of the message to be sent to the system logger.  The\n      title and the message are specified using the following placeholders:\n\n      * ``{title}``\n      * ``{message}``\n\n      Default is ``[{title}] {message}``.\n\n`Termux:API <https://play.google.com/store/apps/details?id=com.termux.api&hl=en>`_ - ``termux``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nRequires the app to be install from the Play store and the CLI utility be\ninstalled with ``apt install termux-api``.\n\n`Pushalot <https://pushalot.com>`_ - ``pushalot``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nRequired parameter:\n    * ``auth_token`` - Your private Pushalot auth token, found here https://pushalot.com/manager/authorizations\n\nOptional parameters:\n    * ``source`` - source of the notification\n    * ``ttl`` - message expire time in minutes (time to live)\n    * ``url`` - URL to include in the notifications\n    * ``url_title`` - visible URL title (ignored if no url specified)\n    * ``image`` - URL of image included in the notifications\n    * ``important`` - mark notifications as important\n    * ``silent`` - mark notifications as silent\n\n`Rocket.Chat <https://rocket.chat>`_ - ``rocketchat``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nRequires extras, install like this: ``pip install ntfy[rocketchat]``.\n\nRequired parameters:\n    * ``url`` - URL of your Rocket.Chat instance\n    * ``username`` - login username\n    * ``password`` - login password\n    * ``room`` - room/channel name to post in\n\n`Matrix.org <https://matrix.org>`_ - ``matrix``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nRequires extras, install like this: ``pip install ntfy[matrix]``.\n\nRequired parameters:\n    * ``url`` - URL of your homeserver instance\n    * ``roomId`` - room to post in\n    * ``userId`` - login userid\n    * ``password`` - login password\n    * ``token`` - access token\n\nYou must either specify ``token``, or ``userId`` and ``password``.\n\n\n`Webpush <https://github.com/dschep/ntfy-webpush>`_ - ``ntfy_webpush``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nWebpush support is provded by an external ntfy module, install like this: ``pip install ntfy ntfy-webpush``.\n\nRequired parameters:\n  * ``subscription_info`` - A `PushSubscription <https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription>`_ Object\n  * ``private_key`` - the path to private key file or anything else that works with `pywebpush <https://github.com/web-push-libs/pywebpush>`_.\n\nFor more info, see _`ntfy-webpush` <https://github.com/dschep/ntfy-webpush>`_\n\n\n3rd party backends\n~~~~~~~~~~~~~~~~~~\nTo use or implement your own backends, specify the full path of the module as your backend. The\nmodule needs to contain a module with a function called ``notify`` with the following signature:\n\n.. code:: python\n\n    def notify(title, message, **kwargs):\n        """\n        kwargs contains retcode if using ntfy done or ntfy shell-integration\n        and all options in your backend\'s section of the config\n        """\n        pass\n\n\nOther options\n~~~~~~~~~~~~~\n\nTitle is configurable with the `title` key in the config. Example:\n\n.. code:: yaml\n\n    ---\n    title: Customized Title\n\n\nBackends ToDo\n~~~~~~~~~~~~~\n-  `Airgram <http://www.airgramapp.com>`_\n-  `Boxcar <https://boxcar.io>`_\n\nTesting\n-------\n\n.. code:: shell\n\n    python setup.py test\n\nContributors\n------------\n- `dschep <https://github.com/dschep>`_ - Maintainer & Lead Developer\n- `danryder <https://github.com/danryder>`_ - XMPP Backend & emoji support\n- `oz123 <https://github.com/oz123>`_ - Linux desktop notification improvements\n- `schwert <https://github.com/schwert>`_ - PushJet support\n- `rahiel <https://github.com/rahiel>`_ - Telegram support\n- `tymm <https://github.com/tymm>`_ - Simplepush support\n- `jungle-boogie <https://github.com/jungle-boogie>`_ - Documentation updates\n- `tjbenator <https://github.com/tjbenator>`_ - Advanced Pushover options\n- `mobiusklein <https://github.com/mobiusklein>`_ - Win32 Bugfix\n- `rcaloras <https://github.com/rcaloras>`_ - Creator of `bash-prexec`, without which there woudn\'t be bash shell integration for `ntfy`\n- `eightnoteight <https://github.com/eightnoteight>`_ - Notifico support\n- `juanpabloaj <https://github.com/juanpabloaj>`_ - Slack support\n- `giuseongit <https://github.com/giuseongit>`_ - Instapush support\n- `jlesage <https://github.com/jlesage>`_ - Systemlog support\n- `sambrightman <https://github.com/sambrightman>`_ - Prowl support\n- `mlesniew <https://github.com/mlesniew>`_ - Pushalot support\n- `webworxshop <https://github.com/webworxshop>`_ - Rocket.Chat support\n- `rhabbachi <https://github.com/rhabbachi>`_ - transient option in Linux desktop notifications\n- `Half-Shot <https://github.com/Half-Shot>`_ - Matrix support\n'