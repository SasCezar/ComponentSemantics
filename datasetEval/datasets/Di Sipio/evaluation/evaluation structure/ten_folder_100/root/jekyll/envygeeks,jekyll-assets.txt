b'[![Code Climate](https://img.shields.io/codeclimate/maintainability/envygeeks/jekyll-assets.svg?style=for-the-badge)](https://codeclimate.com/github/envygeeks/jekyll-assets/maintainability)\n[![Code Climate](https://img.shields.io/codeclimate/c/envygeeks/jekyll-assets.svg?style=for-the-badge)](https://codeclimate.com/github/envygeeks/jekyll-assets/coverage)\n[![Travis CI](https://img.shields.io/travis/envygeeks/jekyll-assets/master.svg?style=for-the-badge)](https://travis-ci.org/envygeeks/jekyll-assets)\n[![Donate](https://img.shields.io/badge/-DONATE-yellow.svg?style=for-the-badge)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=LKGZAWXLZ8ZPG)\n![Gem Version](https://img.shields.io/gem/v/jekyll-assets.svg?style=for-the-badge)\n![Gem DL](https://img.shields.io/gem/dt/jekyll-assets.svg?style=for-the-badge)\n\n***This guide is for Jekyll Assets v3.1 which is currently in development, if you are looking for the docs for v3.0 please see: https://github.com/envygeeks/jekyll-assets/tree/v3.0-current***\n\n# Jekyll Assets\n\nJekyll Assets is a drop in [asset pipeline](http://guides.rubyonrails.org/asset_pipeline.html) that uses [Sprockets](https://github.com/rails/sprockets) to build specifically for Jekyll. It utilizes [Sprockets](https://github.com/rails/sprockets), and [Jekyll](https://jekyllrb.com) to try and achieve a clean, and extensible assets platform that supports plugins, caching, converting your assets. It even supports proxying of said assets in a way that does not interfere with either [Sprockets](https://github.com/rails/sprockets), or [Jekyll](https://jekyllrb.com), or your own source.  By default you can add Jekyll Assets to your Gemfile, as a plugin, and have it act as a drop-in replacement for Jekyll\'s basic SASS processors, with you only having to add it to your Gemfile, and updating your `<img>`, and `<link>`.\n\n## Installing\n\n```ruby\ngem "jekyll-assets", group: :jekyll_plugins\ngem "jekyll-assets", git: "https://github.com/envygeeks/jekyll-assets", group: :jekyll_plugins\ngem "jekyll-assets", "~> x.x.alpha", group: :jekyll_plugins\n```\n\n---\n\n### System Requirements\n\n* `ruby`: ***2.3+***\n* `sprockets`: ***4.0.beta+***\n* `uglifier`: ***4.0***\n* `jekyll`: ***3.5+***\n\n---\n\n## Configuration\n\nThe configuration file is the same as Jekyll\'s, which is `_config.yml`. Except we use the special key called `assets` inside of that file. All values listed below are default, you need not copy these into your configuration file unless you plan to change a value. *Setting a value makes it explicit, and shared across both **production**, and **development**.*\n\n```yaml\n# _config.yml\n\nassets:\n  source_maps: true # false on JEKYLL_ENV=production\n  destination: "/assets"\n  compression: false # true on JEKYLL_ENV=production\n  gzip: false\n  defaults:\n    js: { integrity: false } # true on JEKYLL_ENV=production\n    css: { integrity: false } # true on JEKYLL_ENV=production\n    img: { integrity: false } # true on JEKYLL_ENV=production\n  caching:\n    path: ".jekyll-cache/assets"\n    type: file # Possible values: memory, file\n    enabled: true\n  # --\n  # Assets you wish to always have compiled.\n  #   This can also be combined with raw_precompile which\n  #   copies assets without running through the pipeline\n  #   making them ultra fast.\n  # --\n  precompile: []\n  raw_precompile: [\n    #\n  ]\n  # --\n  # baseurl: whether or not to append site.baseurl\n  # destination: the folder you store them in on the CDN.\n  # url: the CDN url (fqdn, or w/ identifier).\n  # --\n  cdn:\n    baseurl: false\n    destination: false\n    url: null\n  # --\n  # These are all default. No need to add them\n  #   Only use this if you have more.\n  # --\n  sources:\n    - assets/css\n    - assets/fonts\n    - assets/images\n    - assets/videos\n    - assets/javascript\n    - assets/video\n    - assets/image\n    - assets/img\n    - assets/js\n    - _assets/css\n    - _assets/fonts\n    - _assets/images\n    - _assets/videos\n    - _assets/javascript\n    - _assets/video\n    - _assets/image\n    - _assets/img\n    - _assets/js\n    - css\n    - fonts\n    - images\n    - videos\n    - javascript\n    - video\n    - image\n    - img\n    - js\n  plugins:\n    css: { autoprefixer: {}}\n    img: { optim: {}}\n```\n\n## Tag `{% asset %}`, `<img>`\n\n```html\n{% asset src @magick:double alt=\'This is my alt\' %}\n{% asset src @magick:double alt=\'This is my alt\' %}\n<img src="src" asset="@magick:double" alt="This is my alt">\n<img src="src" alt="This is my alt" asset>\n```\n\n## Defaults\n\nWe provide several defaults that get set when you run an asset, depending on content type, this could be anything from type, all the way to integrity.  *If there is a default attribute you do not wish to be included, you can disable the attribute with `!attribute`, and it will be skipped over.*\n\n```liquid\n{% asset img.png !integrity %}\n{% asset bundle.css !type   %}\n```\n\n### Arguments\n\nOur tags will take any number of arguments, and convert them to HTML, and even attach them to your output if the HTML processor you use accepts that kind of data.  ***This applies to anything but hashes, and arrays.*** So adding say, a class, or id, is as easy as doing `id="val"` inside of your tag arguments.\n\n#### Built In\n\n| Arg | Description | Type | Return Type |\n|---|---|---|---|\n| `@path` | Path | `*/*` | `text`\n| `@data` | `data` URI | `*/*` | `text` |\n| `@inline` | CSS `<style>` | `text/css` | `text/html` |\n| | `text/svg+xml` XML | `image/svg+xml` | `text/svg+xml` |\n| | JavaScript `<script>` | `application/javascript` | `text/html` |\n| | Image `<img>` | `image/*` | `text/html` |\n| `srcset` | [Responsive]() `<img>` | `image/*` | `text/html` |\n| `srcset` + `@pic` | [Responsive]() `<pic>` | `image/*` | `text/html` |\n\n*Jekyll Assets uses [@envygeeks](https://github.com/envygeeks) `liquid-tag-parser` which supports advanced arguments (hash based arguments) as well as array based arguments.  When you see something like `k1:sk1=val` it will get converted to `k1 = { sk1: "val" }` in Ruby.  To find out more about how we process tags you should visit the documentation for [`liquid-tag-parser`](https://github.com/envygeeks/liquid-tag-parser)*\n\n#### Responsive Images\n\nJekyll Assets has the concept of responsive images, using the `picture` (when using `@pic` w/ `srcset`) and the `<img>` tag when using `srcset`. If you ship multiple `srcset` with your image, we will proxy, build and then ship out a `picture/img` tag with any number of `source/srcset`, and in the case of picture, with the original image being the `image`.\n\n##### `<picture>` usage, requires `@pic`\n###### Example\n\n```liquid\n{% asset img.png @pic\n    srcset:max-width="200 2x"\n    srcset:max-width="150 1.5x"\n    srcset:max-width="100 1x"\n      %}\n```\n\n```html\n<picture>\n  <source srcset="1.png 2x"   media="(max-width:200px)">\n  <source srcset="2.png 1.5x" media="(max-width:150px)">\n  <source srcset="3.png 1x"   media="(max-width:100px)">\n  <img src="img.png">\n</picture>\n```\n\n##### `<img>` usage\n###### Example\n\n```liquid\n{% asset img.png\n    srcset:width="200 2x"\n    srcset:width="150 1.5x"\n    srcset:width="100 1x"\n      %}\n\n{% asset img.svg\n    srcset:width="200 2x jpg"\n    srcset:width="150 1.5x jpg"\n    srcset:width="100 1x jpg"\n      %}\n\n{% asset img.png\n    srcset:width=200\n    srcset:width=150\n    srcset:width=200\n      %}\n```\n\n```html\n<img srcset="1.png 2x, 2.png 1.5x, 3.png 1x">\n<img srcset="1.jpg 2x, 2.jpg 1.5x, 3.jpg 1x">\n<img srcset="1.png 200w, 2.png 150w, 3.pnx 200w">\n```\n\n##### Args for `<img srcset>`\n\n| Arg         | Type                  | Description                                      |\n| ----------- | --------------------- | ------------------------------------------------ |\n| `width`     | Width [Density, Type] | Resize, set `srcset="<Src> <<Width>px/Density>"` |\n\n\n##### Args for `@pic`\n\n| Arg         | Type            | Description                                  |\n| ----------- | --------------- | -------------------------------------------- |\n| `min-width` | Width [Density] | Resize, set `media="(min-width: <Width>px)"` |\n| `max-width` | Width [Density] | Resize, set `media="(max-width: <Width>px)"` |\n| `sizes`     | Any             | Your value, unaltered, unparsed.             |\n| `media`     | Any             | Your value, unaltered, unparsed.             |\n\n*If you set `media`, w/ `max-width`, `min-width`, we will not ship `media`, we will simply resize and assume you know what you\'re doing.  Our parser is not complex, and does not make a whole lot of assumptions on your behalf, it\'s simple and only meant to make your life easier.  In the future we may make it more advanced.*\n\n## Liquid\n\nWe support liquid arguments for tag values (but not tag keys), and we also support Liquid pre-processing (with your Jekyll context) of most files if they end with `.liquid`.  This will also give you access to our filters as well as their filters, and Jekyll\'s filters, and any tags that are globally available.\n\n```liquid\n{% asset \'{{ site.bg_img }}\' %}\n{% asset \'{{ site.bg_img }}\' proxy:key=\'{{ value }}\' %}\n{% asset {{\\ site.bg_img\\ }} %}\n```\n\n### `.sass`, `.scss`\n\n```scss\nbody {\n  background-image: asset_url("\'{{ site.bg_img }}\'");\n  background-image: asset_url("\'{{ site.bg_img }}\' proxy:key=\'{{ value }}\'");\n  background-image: asset_url("{{\\ site.bg_img\\ }}");\n}\n```\n\n### `.liquid.ext`\n### `.ext.liquid`\n\n#### Supported file types:\n\n- .css\n- .sass\n- .scss\n- .js\n- .es6\n- .coffee\n- .svg\n\nYou have full access to your entire global context from any liquid\nprocessing we do.  Depending on where you do it, you might or might not also have access to your local (page) context as well. You can also do whatever you like, and be as dynamic as you like, including full loops, and conditional Liquid, since we pre-process your text files. *On Sprockets 4.x you can use `.liquid.ext` and `.ext.liquid`, but because of the way Sprockets 3.x works, we have opted to only allow the default extension of `.ext.liquid` when running on "Old Sprockets" (AKA 3.x.)  If you would like Syntax + Liquid you should opt to install Sprockets 4.x so you can get the more advanced features.*\n\n#### Importing\n\n***In order to import your Liquid pre-processed assets inside of Liquid or JS you should use a Sprockets `//require=`, Sprockets does not integrate that deeply into JavaScript and SASS to allow you to `@import` and pre-process.***\n\n## `.sass`, `.scss` Helpers\n\nWe provide two base helpers, `asset_path` to return the path of an asset, and `asset_url` which will wrap `asset_path` into a `url()` for you, making it easy for you to extract your assets and their paths inside of SCSS.  All other helpers that Sprockets themselves provide will use our `asset_path` helper, so you can use them like normal, *including with Liquid*\n\n```scss\nbody {\n  background-image: asset_url("img.png");\n}\n```\n\n### Proxies, and Other Arguments\n\nAny argument that is supported by our regular tags, is also supported by our `.sass`/`.scss` helpers, with a few obvious exceptions (like `srcset`).  This means that you can wrap your assets into `magick` if you wish, or `imageoptim` or any other proxy that is able to spit out a path for you to use.  The general rule is, that if it returns a path, or `@data` then it\'s safe to use within `.scss`/`.sass`, otherwise it will probably throw.\n\n```scss\nbody {\n  background-image: asset_url("img.png @magick:half")\n}\n```\n\n*Note: we do not validate your arguments, so if you send a conflicting argument that results in invalid CSS, you are responsible for that, in that if you ship us `srcset` we might or might not throw, depending on how the threads are ran. So it might ship HTML if you do it wrong, and it will break your CSS, this is by design so that if possible, in the future, we can allow more flexibility, or so that plugins can change based on arguments.*\n\n## List\n\nWe provide all *your* assets as a hash of Liquid Drops so you can get basic info that we wish you to have access to without having to prepare the class. **Note:** The keys in the `assets` array are the names of the original files, e.g., use `*.scss` instead of `*.css`.\n\n```liquid\n{{ assets["bundle.css"].content_type }} => "text/css"\n{{ assets["images.jpg"].width  }} => 62\n{{ assets["images.jpg"].height }} => 62\n```\n\nThe current list of available accessors:\n\n| Method         | Description                             |\n| -------------- | --------------------------------------- |\n| `content_type` | The RFC content type                    |\n| `height`       | The asset height ***(if available)***   |\n| `filename`     | The full path to the assets actual file |\n| `width`        | The asset width ***(if available)***    |\n| `digest_path`  | The prefixed path                       |\n| `integrity`    | The SRI hash (currently sha256)         |\n\n### Looping\n\n```liquid\n{% for k,v in assets %}\n  {{ k }}\n{% endfor %}\n```\n\n### Dynamic\n\nUsing Liquid Drop `assets`, you can check whether an asset is present.\n\n```liquid\n{% if assets[page.image] %}{% img \'{{ page.image }}\' %}\n{% else %}\n  {% img default.jpg %}\n{% endif %}\n```\n\n## Filter\n\n```liquid\n{{ src | asset:"@magick:double magick:quality=92" }}\n```\n\n## Polymer WebComponents\n\nWe have basic support for WebComponents when using Sprockets `~> 4.0.0.beta`, this will allow you to place your HTML in the `_assets/components` folder, `{% asset myComponent.html %}`, and get an import, you can place your regular JS files inside of the normal structure.\n\n### Example\n\n***test.html***\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    {% asset webcomponents.js %}\n    {% asset test.html %}\n  </head>\n  <body>\n    <contact-card starred>\n      {% asset profile.jpg %}\n      <span>Your Name</span>\n    </contact-card>\n  </body>\n</body>\n```\n\n***_assets/components/test.html***\n\n```html\n<dom-module id="contact-card">\n  <template>\n    <style>/* ... */</style>\n    <slot></slot>\n    <iron-icon icon="star" hidden$="{{!starred}}"></iron-icon>\n  </template>\n  <script>\n    class ContactCard extends Polymer.Element {\n      static get is() { return "contact-card"; }\n      static get properties() {\n        return {\n          starred: { type: Boolean, value: false }\n        }\n      }\n    }\n    customElements.define(ContactCard.is, ContactCard);\n  </script>\n</dom-module>\n```\n\n## Hooks\n\n| Point | Name | Instance | Args |\n| ---| --- | --- | --- |\n| `:env` | `:before_init` | \xe2\x9c\x94 | \xe2\x9c\x97 |\n| `:env` | `:after_init` | \xe2\x9c\x94 | \xe2\x9c\x97 |\n| `:env` | `:after_write` | \xe2\x9c\x94 | \xe2\x9c\x97 |\n| `:config` | `:before_merge` | \xe2\x9c\x97 | `Config{}` |\n| `:asset` | `:before_compile` | \xe2\x9c\x97 | `Asset`, `Manifest` |\n| `:asset` | `:after_compression` | \xe2\x9c\x97 | input{}, output{}, type=*/* |\n\n### Example\n\n```ruby\nJekyll::Assets::Hook.register :env, :before_init do\n  append_path "myPluginsCustomPath"\nend\n```\n\n```ruby\nJekyll::Assets::Hook.register :config, :init do |c|\n  c.deep_merge!({\n    plugins: {\n      my_plugin: {\n        opt: true\n      }\n    }\n  })\nend\n```\n\n#### Plugin Hooks\n\nYour plugin can also register it\'s own hooks on our Hook system, so that you can trigger hooks around your stuff as well, this is useful for extensive plugins that want more power.\n\n```ruby\nJekyll::Assets::Hook.add_point(:plugin, :hook)\n```\n\n```ruby\nJekyll::Assets::Hook.trigger(:plugin, :hook)  { |v| v.call(:arg) }\nJekyll::Assets::Hook.trigger(:plugin, :hook) do |v|\n  instance_eval(&v)\nend\n```\n\n## Default Plugins\n### Google Closure Alternates\n```\ngem "crass"\n```\n\nOnce crass is added, we will detect vendor prefixes, and add `/* @alternate */` to them, with or without compression enabled, and with protections against compression stripping.\n\n### Font Awesome\n\n```ruby\ngem "font-awesome-sass"\n```\n\n```scss\n@import "font-awesome-sprockets";\n@import "font-awesome";\nhtml {\n  // ...\n}\n```\n\n### CSS Auto-Prefixing\n\n```ruby\ngem "autoprefixer-rails"\n```\n\n```yml\nassets:\n  autoprefixer:\n    browsers:\n    - "last 2 versions"\n    - "IE > 9"\n```\n\n### Bootstrap\n\n```ruby\ngem "bootstrap-sass" # 3.x\ngem "bootstrap"      # 4.x\n```\n\n```scss\n@import \'bootstrap\'\nhtml {\n  // ...\n}\n```\n\n```scss\n//=require _bootstrap.css\n//=require bootstrap/_reboot.css\n```\n\n### ImageMagick\n\n```ruby\ngem "mini_magick"\n```\n\n#### Args\n\nSee the [MiniMagick docs](https://github.com/minimagick/minimagick#usage)\nto get an idea what `<value>` can be.\n\n| Name                        | Accepts Value |\n| --------------------------- | ------------- |\n| `magick:compress`           | \xe2\x9c\x94             |\n| `magick:resize`             | \xe2\x9c\x94             |\n| `magick:format`<sup>*</sup> | \xe2\x9c\x94             |\n| `magick:quality`            | \xe2\x9c\x94             |\n| `magick:rotate`             | \xe2\x9c\x94             |\n| `magick:gravity`            | \xe2\x9c\x94             |\n| `magick:crop`               | \xe2\x9c\x94             |\n| `magick:extent`             | \xe2\x9c\x94             |\n| `magick:flip`               | \xe2\x9c\x94             |\n| `magick:background`         | \xe2\x9c\x94             |\n| `magick:transparency`       | \xe2\x9c\x94             |\n| `@magick:double`            | \xe2\x9c\x97             |\n| `@magick:half`              | \xe2\x9c\x97             |\n\n<sup>\\*</sup> *`magick:format` requires an ext or a valid MIME content type like `image/jpeg` or `.jpg`.  We will `ImageMagick -format` on your behalf with that information by getting the extension.*\n\n### ImageOptim\n\n```ruby\ngem "image_optim"\ngem "image_optim_pack" # Optional\n```\n\n#### Configuration\n\n```yml\nassets:\n  plugins:\n    img:\n      optim:\n        {}\n```\n\nCheck the [ImageOptim](https://github.com/toy/image_optim#configuration) to get idea about configuration options, and to get a list of stuff you need to install on your system to use it, if you do not wish to use "image_optim_pack".\n\nTo disable ImageOptim (i.e. for development builds), use following configuration:\n\n```yml\nassets:\n  plugins:\n    img:\n      optim: false\n```\n\n#### Args\n\n| Name                              | Accepts Value |\n| --------------------------------- | ------------- |\n| `optim`                           | \xe2\x9c\x94             |\n| `@optim`                          | \xe2\x9c\x97             |\n\n***By default `@optim` will use the default `jekyll`, otherwise you can provide `optim=preset` and have it used that preset.  ImageOptim provides advanced, and default as their default presets, you can define your own preset via Jekyll Assets configuration listed above.***\n\n### libvips\n\n```ruby\ngem "ruby-vips"\n```\n\nThe "ruby-vips" gem requires a functional install of (libvips)[https://github.com/libvips/libvips/].\n\n#### Args\n\n| Name                  | Accepts Value |\n| --------------------- | ------------- |\n| `vips:compression`    | \xe2\x9c\x94             |\n| `vips:resize`         | \xe2\x9c\x94             |\n| `vips:format`         | \xe2\x9c\x94             |\n| `vips:quality`        | \xe2\x9c\x94             |\n| `vips:crop`           | \xe2\x9c\x94             |\n| `@vips:interlace`     | \xe2\x9c\x97             |\n| `vips:strip`          | \xe2\x9c\x94             |\n| `@vips:strip`         | \xe2\x9c\x97             |\n| `@vips:lossless`      | \xe2\x9c\x97             |\n| `@vips:near_lossless` | \xe2\x9c\x97             |\n| `@vips:double`        | \xe2\x9c\x97             |\n| `@vips:half`          | \xe2\x9c\x97             |\n\n##### vips:compression\n\nOnly has any meaning for lossless image formats such as PNG or lossless WEBP.\n\n```liquid\n{% asset image.png vips:compression=9 %}\n```\n\n##### vips:resize\n\nAccepts an argument of either \'width\', \'xheight\' or \'widthxheight\'.\n\nAll resize processes keep the original aspect ratio so width and height\nare used to specify the bounding box for the resize process.\n\nIf no height is specified the image is resized to fit withing a bounding\nbox of \'width\' x \'width\'. Similarly specifying just a height sets the\nbounding box for the resize to \'height\' x \'height\'. This form only exists\nfor compatibility with the "magick" plugin.\n\n```liquid\n{% asset image.png vips:resize=\'100\' %}\n```\n\n```liquid\n{% asset image.png vips:resize=\'100x50\' %}\n```\n\n##### vips:format\n\nConvert the image to the specified format. Format support depends on the\ncompile options of the libvips library.\n\nFormat is specified as the file extension such as \'.jpg\', \'.webp\' or \'.png\'.\n\n```liquid\n{% asset image.png vips:format=\'.webp\' %}\n```\n\n##### vips:quality\n\nOnly has any meaning for lossy image formats such as JPEG or WEBP.\n\n```liquid\n{% asset image.jpg vips:quality=90 %}\n```\n\n##### vips:crop\n\nOnly has any effect when combined with "vips:resize".\n\nUse the following arguments (all except "fill" are documented [here](http://libvips.github.io/libvips/API/current/libvips-conversion.html#VipsInteresting)):\n\n* fill: resize the image to the specified size while maintaining the aspect ratio\n  then fills the "empty" background with blurred version of the original image\n* none: do nothing\n* centre: crop from the centre\n* entropy: use an entropy measure\n* attention: look for features likely to draw human attention\n* low: position the crop towards the low coordinate\n* high: position the crop towards the high coordinate\n\n```liquid\n{% asset image.jpg vips:resize=\'100\' vips:crop=\'fill\' %}\n```\n\n##### vips:strip\n\nRemoves metadata from images.\n\nThis is set "true" by default, but can be disabled by passing "false".\n\n```liquid\n{% asset image.jpg vips:strip=false %}\n```\n\n##### vips:lossless and vips:near_lossless\n\nThese options only have any effect when the format is WEBP. This sets either\nlossless or near lossless mode.\n\n```liquid\n{% asset image.jpg vips:format=\'.webp\' @vips:lossless %}\n```\n\n### Building Your Own Plugins\n#### Globals\n\n| Name      | Class                   |\n| --------- | ----------------------- |\n| `@env`    | `Jekyll::Assets::Env`   |\n| `@args`   | `Liquid::Tag::Parser{}` |\n| `@jekyll` | `Jekyll::Site`          |\n| `@asset`  | `Sprockets::Asset`      |\n\n#### HTML\n\n| Name   | Class                      | Type            |\n| ------ | -------------------------- | --------------- |\n| `@doc` | `Nokogiri:: XML::Document` | `image/svg+xml` |\n| `@doc` | `Nokogiri::HTML::Document` | `image/*`       |\n\n## Migrating from Earlier Versions\n### Configuration\n\n*Before*\n\n```yaml\ncdn: https://example.com\n```\n\n*After*\n\n```yaml\ncdn:\n  url: https://example.com\n```\n\n### Images/CSS/JS\n\n*Before*\n\n```liquid\n{% css css.css %}\n{% img image.jpg width:60 class:image %}\n{% js js.js %}\n```\n\n*After*\n\n```liquid\n{% asset css.css %}\n{% asset image.jpg width=60 class=image %}\n{% asset js.js %}\n```\n\n### Custom Tags\n\n*Before*\n\n```liquid\n<link rel="apple-touch-icon-precomposed" href="{% asset_path icon.png %}">\n<link rel="apple-touch-icon-precomposed" href="{% asset_data icon.png %}">\n```\n\n*After*\n\n```liquid\n<link rel="apple-touch-icon-precomposed" href="{% asset icon.png @path %}">\n<link rel="apple-touch-icon-precomposed" href="{% asset icon.png @data %}">\n```\n'