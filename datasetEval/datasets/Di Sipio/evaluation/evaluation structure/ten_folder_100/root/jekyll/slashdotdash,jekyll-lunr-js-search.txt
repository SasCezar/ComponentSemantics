b'# [Jekyll](http://jekyllrb.com/) + [lunr.js](http://lunrjs.com/) = Static websites with powerful full-text search using JavaScript\n\nUse [lunr.js](http://lunrjs.com/) to provide simple full-text search, using JavaScript in your browser, for your Jekyll static website.\n\nInspired by Pascal Widdershoven\'s [Jekyll + indextank](https://github.com/PascalW/jekyll_indextank) and Michael Levin\'s [Sitemap.xml Generator](https://github.com/kinnetica/jekyll-plugins) plugins.\n\nThis Jekyll plugin handles the generation of a lunr.js compatible `.json` index file. Runtime search configuration is provided by a simple jQuery plugin.\n\nIt allows full-text search of all your Jekyll pages and posts. Executed by the client without any server-side processing (outside of serving static files).\n\n## How to use\n\n### 1. Install the plugin\n\nChoose to install as either a Ruby Gem, or by copying the pre-built plugin file to your Jekyll site.\n\n#### 1a. Install as a Ruby Gem\n\n1. Install the [jekyll-lunr-js-search](https://rubygems.org/gems/jekyll-lunr-js-search) Ruby Gem.\n\n        gem install jekyll-lunr-js-search\n\n2. Modify your Jekyll `_config.yml` file to include the Gem.\n\n        gems: [\'jekyll-lunr-js-search\']\n\n#### 1b. Install by copying the plugin to your Jekyll site.\n\n1. Place `build/jekyll_lunr_js_search.rb` inside the `_plugins` folder in the root of your Jekyll site.\n\nThe content from all Jekyll posts and pages will be indexed to a `js/index.json` file ready for lunr.js to consume. This happens each time the site is generated.\n\nA jQuery plugin is provided in `js/jquery.lunr.search.js` to handle the configuration of lunr.js with the search index JSON data generated by this plugin.\n\nDependencies for the jQuery plugin are as follows.\n\n* [jQuery](http://jquery.com)\n* [lunr.js](http://lunrjs.com)\n* [Mustache.js](https://github.com/janl/mustache.js)\n* [date.format.js](http://blog.stevenlevithan.com/archives/date-time-format)\n* [URI.js](http://medialize.github.com/URI.js/)\n\nA pre-built version of the jQuery plugin, along with all of the above dependencies, concatenated and minified is available from at [build/search.min.js](https://github.com/slashdotdash/jekyll-lunr-js-search/blob/master/build/search.min.js).\n\n### 2. Copy the jQuery plugin and add a script reference.\n\n#### 2a. Using the pre-built, minified plugin from the gem.\n\nThe plugin will automatically add the minified JavaScript file `js/search.min.js` to your `_site`.\n\nTo use it, you must add a script reference to the bottom of your nominated search page.\n\n        <script src="/js/search.min.js" type="text/javascript" charset="utf-8"></script>\n\n#### 2b. Using the jQuery plugin and managing its dependencies yourself.\n\n1. Copy `js/jquery.lunr.search.js` to your Jekyll site\'s JavaScript directory.\n2. Add a script reference to the bottom of your nominated search page for `jquery.lunr.search.js` and each of the dependencies outlined above.\n\n        <script src="/js/jquery-1.9.1.min.js" type="text/javascript" charset="utf-8"></script>\n        <script src="/js/lunr.min.js" type="text/javascript" charset="utf-8"></script>\n        <script src="/js/mustache.js" type="text/javascript" charset="utf-8"></script>\n        <script src="/js/date.format.js" type="text/javascript" charset="utf-8"></script>\n        <script src="/js/URI.min.js" type="text/javascript" charset="utf-8"></script>\n        <script src="/js/jquery.lunr.search.js" type="text/javascript" charset="utf-8"></script>\n\nMake sure you use the same version of lunr.js as the gem. The Jekyll log output includes the version used.\n\nIdeally you would concatenate, minify and optimise these six `.js` files using uglify/Google closure/etc to produce a single `search.min.js` file to reference (or use the pre-built script as described in 2a above).\n\n    <script src="/js/search.min.js" type="text/javascript" charset="utf-8"></script>\n\n### 4. Add a search form with a query input as shown.\n\n    <form action="/search" method="get">\n      <input type="text" id="search-query" name="q" placeholder="Search" autocomplete="off">\n    </form>\n\nSearch happens as you type, once at least three characters have been entered.\n\nProviding the form action and specifying the get method allows the user to hit return/enter to also submit the search.\nAmend the form\'s action URL as necessary for the search page on your own site.\n\n### 5. Add an element to contain the list of search result entries.\n\n    <section id="search-results" style="display: none;"> </section>\n\nThis may be initially hidden as the plugin will show the element when searching.\n\n### 6. Create a Mustache template to display the search results.\n\n    {% raw %}\n    <script id="search-results-template" type="text/mustache">\n      {{#entries}}\n        <article>\n          <h3>\n            {{#date}}<small><time datetime="{{pubdate}}" pubdate>{{displaydate}}</time></small>{{/date}}\n            <a href="{{url}}">{{title}}</a>\n          </h3>\n          {{#is_post}}\n          <ul>\n            {{#tags}}<li>{{.}} </li>{{/tags}}\n          </ul>\n          {{/is_post}}\n        </article>\n      {{/entries}}\n    </script>\n    {% endraw %}\n\nNote the use of `{% raw %}` and `{% endraw %}` to ensure the Mustache tags are not stripped out by Jekyll.\n\nThe fields available to display are as follows.\n\n#### entries\nList of search result entries (mandatory).\n#### date\nRaw published date for posts, or null for pages. Can be used to toggle display of the following dates in the template `{{#date}}has a date{{/date}} {{#!date}}no date{{/date}}`.\n#### pubdate\nPost published date, formatted as \'yyyy-mm-dd\', to be used in a html5 `<time datetime="{{pubdate}}">` element (posts only).\n#### displaydate\nPost published date, formatted as \'mmm dd, yyyy\', such as Oct 12, 2012 (posts only)\n#### title\nTitle of the Jekyll page or post.\n#### url\nURL of the Jekyll page or post that can be used to create a hyperlink `<a href="{{url}}">{{title}}</a>`.\n#### categories\nCategories (array) of the Jekyll page or post, can be used in a loop `{{#categories}}{{.}} {{/categories}}` to list them.\n#### tags\nTags (array) of the Jekyll page or post, can be used in a loop `{{#tags}}{{.}} {{/tags}}` to list them.\n#### is_post\nBooelan value, true if current result element is a post. Can be used to toggle display of specific elements in the template `{{#is_post}}is a post{{/is_post}}`\n\n### 7. Configure the jQuery plugin for the search input field.\n\n    <script type="text/javascript">\n      $(function() {\n        $(\'#search-query\').lunrSearch({\n          indexUrl  : \'/js/index.json\',           // url for the .json file containing search index data\n          results   : \'#search-results\',          // selector for containing search results element\n          template  : \'#search-results-template\', // selector for Mustache.js template\n          titleMsg  : \'<h1>Search results<h1>\',   // message attached in front of results (can be empty)\n          emptyMsg  : \'<p>Nothing found.</p>\'     // shown message if search returns no results\n        });\n      });\n    </script>\n\n### 8. To exclude pages from the search index.\n\nAdd the following `exclude_from_search` setting to any page\'s YAML config.\n\n    exclude_from_search: true\n\nOr add an array of exclusions (as individual regular expressions) to the site\'s `_config.yml` file.\n\n    lunr_search:\n      excludes: [rss.xml, atom.xml]\n\n### 9. Stop Words\n\nYou can also configure a stopwords file, and a minimum length of word to be included in the index file. This can be done by adding a search block to `_config.yml`. The default values are:\n\n    lunr_search:\n      stopwords: "stopwords.txt"\n      min_length: 3\n\nThe stopwords file must consist of one word per line, in lowercase, without punctuation.\n\n### 10. Alternate data directory\n\nYou can choose to store `index.json`, `search.min.js` and `lunr.min.js` in a different directory like this:\n\n    lunr_search:\n      js_dir: "javascript"\n\n## Demo\n\nSearch plugin is deployed to [10consulting.com/search](http://10consulting.com/search/).\nSome example search queries are [/search/?q=git](http://10consulting.com/search/?q=git), [/search/?q=cqrs](http://10consulting.com/search/?q=cqrs).\n\nIt also features on-demand loading of the search plugin `.js` when focusing into the search field on the [homepage](http://10consulting.com/). Look at the browser network requests clicking into the search input.\n\n## Building\n\nTo build the single `jekyll_lunr_js_search.rb` plugin file.\n\n### Requirements\n\nInstall [Bundler](http://bundler.io/) and then run the following.\n\n\tbundle install\n\nInstall [Bower](http://bower.io).\n\nTo build the plugin.\n\n    rake build\n\nThen copy `build/jekyll_lunr_js_search.rb` to your Jekyll site\'s `_plugins` folder and the `build/*.min.js` files to your site\'s `js` folder.\n\nIf you include the `.js` and `.js.map` files your browser developer console will link to the unminified code.'