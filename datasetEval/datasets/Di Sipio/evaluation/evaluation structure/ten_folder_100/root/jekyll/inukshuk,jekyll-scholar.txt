b'Jekyll-Scholar\n==============\n\nJekyll-Scholar is for all the academic bloggers out there. It is a set of\nextensions to [Jekyll](http://jekyllrb.com/), the awesome, blog aware, static\nsite generator; it formats your bibliographies and reading lists for the web\nand gives your blog posts citation super-powers.\n\n[![Build Status](https://travis-ci.org/inukshuk/jekyll-scholar.png?branch=master)](https://travis-ci.org/inukshuk/jekyll-scholar)\n[![Coverage Status](https://coveralls.io/repos/inukshuk/jekyll-scholar/badge.png)](https://coveralls.io/r/inukshuk/jekyll-scholar)\n\nAlready using Jekyll-Scholar and interested to help out? Please get in touch with us if you would like to become a maintainer!\n\nInstallation\n------------\n\n    $ [sudo] gem install jekyll-scholar\n\nOr add it to your `Gemfile`:\n\n    gem \'jekyll-scholar\'\n\n### Github Pages\n\nNote that it is not possible to use this plugin with the\n  [default Github pages workflow](https://help.github.com/articles/using-jekyll-with-pages/).\nGithub does not allow any but a few select plugins to run for security reasons,\nand Jekyll-Scholar is not among them.\nYou will have to generate your site locally and push the results to the `master` resp. `gh-pages`\nbranch of your site repository.\nYou can keep sources, configuration and plugins in a separate branch; see e.g.\n  [here](http://davidensinger.com/2013/07/automating-jekyll-deployment-to-github-pages-with-rake/)\nfor details.\n\n\n\nUsage\n-----\n\nInstall and setup a new [Jekyll](http://jekyllrb.com/) directory (see the\n[Jekyll-Wiki](https://github.com/mojombo/jekyll/wiki/Usage) for detailed\ninstructions). To enable the Jekyll-Scholar add the following statement\nto a file in your plugin directory (e.g., to `_plugins/ext.rb`):\n\n    require \'jekyll/scholar\'\n\nAlternatively, add `jekyll-scholar` to your `gem` list in your Jekyll\nconfiguration:\n\n    plugins: [\'jekyll/scholar\']\n\n### Configuration\n\nIn your Jekyll configuration file you can adjust the Jekyll-Scholar settings\nusing the `scholar` key. For example, the following sets the bibliography style\nto `mla`.\n\n    scholar:\n      style: mla\n\nThe table below describes some commonly used configuration options. For a\ndescription of all options and their defaults, see\n[`defaults.rb`](/lib/jekyll/scholar/defaults.rb).\n\n| Option | Default | Description |\n|--------|---------|-------------|\n| `style` | `apa` | Indicates the style used for the bibliography and citations. You can use any style that ships with [CiteProc-Ruby](https://github.com/inukshuk/citeproc-ruby) by name (e.g., apa, mla, chicago-fullnote-bibliography) which is usually the filename as seen [here](https://github.com/citation-style-language/styles) without the `.csl` ending; note that you have to use `dependent/style` if you want to use one from that directory. Alternatively you can add a link to any CSL  style (e.g., you could link to any of the styles available at the official [CSL style repository](https://github.com/citation-style-language/styles)). |\n| `locale` | `en` | Defines what language to use when formatting your references (this typically applies to localized terms, e.g., \'Eds.\' for editors in English). |\n| `source` | `./_bibliography` |  Indicates where your bibliographies are stored. |\n| `bibliography` | `references.bib` | Indicates the name of your default bibliography. For best results, please ensure that your bibliography is encoded as ASCII or UTF-8. A string that contains a `*` will be passed to `Dir::glob`, so `**/*.bib{,tex}` will find all files named `*.bib` and `*.bibtex` under `source`.  |\n| `allow_locale_overrides` | `false` | When `true`, allows the `language` entry in the BibTex to override the `locale` setting for individual entries. When the language is missing it will revert back to `locale`. The language value should be encoded using the two-letter [ISO 639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) standard. Ex. English = \'en\', Spanish = \'es\'. |\n| `sort_by` | `none` | Specifies if and how bibliography entries are sorted. Entries can be sorted on multiple fields, by using a list of keys, e.g. `year,month`. Ordering can be specified per sort level, e.g. `order: descending,ascending` will sort the years descending, but per year the months are ascending. If there are more sort keys than order directives, the last order entry is used for the remaining keys. |\n| `order` | `ascending` | Specifies order bibliography entries are sorted in. Can be `ascending` or descending. Ordering can be specified per sort level, e.g. `descending,ascending` will sort in descending on the first key then ascending order on the second key. If there are more sort keys than order directives, the last order entry is used for the remaining keys. |\n| `group_by` | `none` | Specifies how bibliography items are grouped. Grouping can be multi-level, e.g. `type, year` groups entries per publication type, and within those groups per year. |\n| `group_order` | `ascending` |  Ordering for groups is specified in the same way as the sort order. Publication types -- specified with group key `type`, can be ordered by adding `type_order` to the configuration. For example, `type_order: [article,techreport]` lists journal articles before technical reports. Types not mentioned in `type_order` are considered smaller than types that are mentioned. Types can be merge in one group using the `type_aliases` setting. By default `phdthesis` and `mastersthesis` are grouped as `thesis`. By using, for example, `type_aliases: { inproceedings: article}`, journal and conference articles appear in a single group. The display names for entry types are specified with `type_names`. Names for common types are provided, but they can be extended or overridden. For example, the default name for `article` is *Journal Articles*, but it can be changed to *Papers* using `type_names: { article: Papers }`. |\n| `bibtex_filters` | `latex,smallcaps,superscript` | Configures which [BibTeX-Ruby](https://github.com/inukshuk/bibtex-ruby) formatting filters values of entries should be passed through. The default `latex` filter converts LaTeX character escapes into unicode, `smallcaps` converts the `\\textsc` command into a HTML `<font style=\\"font-variant: small-caps\\">` tag, and `superscript` which converts the `\\textsuperscript` command into a HTML `<sup>` tag. |\n\n\n### Bibliographies\n\nOnce you have loaded Jekyll-Scholar, all files with the extension `.bib` or\n`.bibtex` will be converted when you run Jekyll (don\'t forget to add a YAML\nheader to the files); the file can contain regular HTML or Markdown and\nBibTeX entries; the latter will be formatted by Jekyll-Scholar according to\nthe citation style and language defined in your configuration file.\n\nFor example, if you had a file `bibliography.bib` in your root directory:\n\n    ---\n    ---\n    References\n    ==========\n\n    @book{ruby,\n      title     = {The Ruby Programming Language},\n      author    = {Flanagan, David and Matsumoto, Yukihiro},\n      year      = {2008},\n      publisher = {O\'Reilly Media}\n    }\n\nIt would be converted to `bibliography.html` with the following content:\n\n    <h1 id=\'references\'>References</h1>\n\n    <p>Flanagan, D., &#38; Matsumoto, Y. (2008). <i>The Ruby Programming Language</i>. O&#8217;Reilly Media.</p>\n\nThis makes it very easy for you to add your bibliography to your Jekyll-powered\nblog or website.\n\nIf you are using other converters to generate your site, don\'t worry, you can\nstill generate bibliographies using the `bibliography` tag. In your site\nor blog post, simply call:\n\n    {% bibliography %}\n\nThis will generate your default bibliography; if you use multiple, you can\nalso pass in a name to tell Jekyll-Scholar which bibliography it should render.\n\nLet\'s say you have two bibliographies stored in `_bibliography/books.bib` and\n`_bibliography/papers.bib`; you can include the bibliographies on your site\nby respectively calling `{% bibliography --file books %}` and\n`{% bibliography --file papers %}`. For example, you could have a file `references.md`\nwith several reference lists:\n\n    ---\n    title: My References\n    ---\n\n    {{ page.title }}\n    ================\n\n    The default Bibliography\n    ------------------------\n\n    {% bibliography %}\n\n    Secondary References\n    --------------------\n\n    {% bibliography --file secondary %}\n\nFinally, the bibliography tag supports an optional filter parameter. This\nfilter takes precedence over the global filter defined in your configuration.\n\n    {% bibliography --query @*[year=2013] %}\n\nThe example above would print a bibliography of all entires published in\nthe year 2013. Of course you can also combine the file and filter parameters\nlike this:\n\n    {% bibliography -f secondary -q @*[year=2013] %}\n\nThis would print the publications from 2013 of the bibliography at\n`_bibliography/secondary.bib`.\n\nFor more details about filters, see the corresponding section below or\nconsult the [BibTeX-Ruby](https://github.com/inukshuk/bibtex-ruby)\ndocumentation.\n\nIf you need to limit the number of entries in your bibliography, you can\nuse the `--max` option:\n\n    {% bibliography --max 5 %}\n\nThis would generate a bibliography containing only the first 5 entries\nof your bibliography (after query filters and sort options have been\napplied). Limiting entries is disabled if grouping is active.\n\n### Return number of publications in bibliography\n\nThe `bibliography_count` returns the number of items that would be\nrendered in a bibliography. This tag accepts the same parameters as the\n`bibliography` tag.\n\n    {% bibliography_count -f references --query @book[year <=2000] %}\n\nSee [#186](https://github.com/inukshuk/jekyll-scholar/blob/master/features/186.feature)\nfor further examples.\n\n### Bibliography Template\n\nYour bibliography is always rendered as an ordered list. Additionally,\neach reference is wrapped in an HTML tag (`span` by default but you can\nchange this using the `reference_tagname` setting) with the cite key\nas id. The reference string itself is governed by the rules in your\nCSL style but you can also customize the main template a little bit.\nBy default, the template is `{{reference}}` \xe2\x80\x93 this renders only the\nreference tag. The template uses Liquid to render and, in\naddition to the reference, exposes the cite-key (as `key`), the\nentry\'s `type`, the `index` in the bibliography, and the link to\nfile repository as `link`. Thus, you could\ncustomize the template in your configuration as follows:\n\n    scholar:\n      bibliography_template: <abbr>[{{key}}]</abbr>{{reference}}\n\nThis would be processed into something like:\n\n    <li><abbr>[ruby]</abbr><span id="ruby">Matsumoto, Y. (2008). <i>The Ruby Programming Language</i>. O&#8217;Reilly Media.</span></li>\n\nIf you have more complex requirements, it quickly becomes tedious to\nhave the template inside the configuration; for this reason, you can\nalso put the bibliography template into your layouts directory. Jekyll-Scholar\nwill load this template if the option set in your configuration matches\nan existing layout (without the file extension). That is to say, if you set:\n\n    scholar:\n      bibliography_template: bib\n\nAnd there is a file `_layouts/bib.html` (or with another extension) the\ncontents of this file will be used as the template. Please note that it is\nimportant for this file to contain the YAML front matter! For example, this\nwould be a more complex template file:\n\n    ---\n    ---\n    {{ reference }}\n\n    {% if entry.abstract %}\n    <p>{{ entry.abstract }}</p>\n    {% endif %}\n\n    <pre>{{ entry.bibtex }}</pre>\n\nYou can also override the default bibliography template, by passing the\n`--template` or `-T` option parameter to the bibliography tag.\n\n### Citations\n\nIf you want to reference books or papers from your bibliography in your blog\nposts, Jekyll-Scholar can help you, too. Simply use the `cite` tag with\nthe appropriate key of the item you want to cite and Jekyll-Scholar will\ncreate a formatted citation reference for you. For a quick example, take\nfollowing blog post:\n\n    ---\n    layout: default\n    title: A Blogging Scholar\n    ---\n\n    {{ page.title }}\n    ================\n\n    Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor\n    incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis\n    nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n    Duis \'aute irure dolor in reprehenderit in voluptate\' {% cite derrida:purveyor %}\n    velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat\n    cupidatat non proident, \'sunt in culpa qui officia deserunt mollit anim id est\n    laborum\' {% cite rabinowitz %}.\n\n    Duis \'aute irure dolor in reprehenderit in voluptate\' {% cite breton:surrealism %}\n    velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat\n    cupidatat non proident, \'sunt in culpa qui officia deserunt mollit anim id est\n    laborum\' {% cite rainey %}.\n\n    References\n    ----------\n\n    {% bibliography %}\n\nNote that this will print your entire bibliography in the Reference section.\nIf you would like to include only those entries you cited on the page, pass\nthe `cited` option to the bibliography tag:\n\n    {% bibliography --cited %}\n\nBy default, the `--cited` option will still sort your bibliography if you set\nthe sort option. Especially for styles using citation numbers, this is usually\nnot the desired behaviour. In such cases you can use `--cited_in_order` instead\nof `--cited` and your bibliography will contain all cited items in the order\nthey were cited on the page.\n\nFor longer quotes, Jekyll-Scholar provides a `quote` tag:\n\n    {% quote derrida:purveyor %}\n    Lorem ipsum dolor sit amet, consectetur adipisicing elit,\n    sed do eiusmod tempor.\n\n    Lorem ipsum dolor sit amet, consectetur adipisicing.\n    {% endquote %}\n\nFor example, this could be rendered as:\n\n    <blockquote>\n      <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit,<br/>\n      sed do eiusmod tempor.</p>\n      <p>Lorem ipsum dolor sit amet, consectetur adipisicing.</p>\n      <cite>\n        <a href="#derrida:purveyor">(Derrida, 1975)</a>\n      </cite>\n    </blockquote>\n\n#### Multiple citation\n\nYou can cite multiple items in a single citation by referencing all ids\nof the items you wish to quote separated by spaces. For example,\n`{% cite ruby microscope %}` would produce a cite tag like:\n\n    <a href="#ruby">(Flanagan &amp; Matsumoto 2008; Shaughnessy 2013)</a>\n\n#### Citations when there\'s more than one bibliography\n\nLet\'s return to the example above where you have two bibliographies stored\nin `_bibliography/books.bib` and `_bibliography/papers.bib`. We also must\nhave the main bibliography, e.g., `_bibliography/references.bib`. As we\nknow from above, it\'s possible to use bibliographies other than the main\nbibliography by calling `{% bibliography --file books %}` or\n`{% bibliography --file papers %}`.\n\nThough what if we want to cite an article that\'s not in the main bibliography?\nWe use the same approach as above; to cite an article in the `books.bib`\nbibliography, we simply call `{% cite ruby --file books %}`\n\n#### Suppressing author names\n\nSometimes you want to suppress author names in a citation, because the\nname has already been mentioned in your text; for such cases Jekyll-Scholar\nprovides the `--suppress_author` option (short form: `-A`):\n`...as Matz explains {% cite ruby -A -l 42 %}` would produce something\nlike: `...as Matz explains (2008, p. 42)`.\n\n#### Page numbers and locators\n\nIf you would like to add page numbers or similar locators to your citation,\nuse the `-l` or `--locator` option. For example, `{% cite ruby --locator 23-5 %}` would\nproduce a citation like `(Matsumoto, 2008, pp. 23-5)`.\n\nWhen quoting multiple items (see above) you can add multiple locators after\nthe list of ids. For example, `{% cite ruby microscope -l 2 -l 24 & 32 %}`.\n\nPage is the default locator, however, you can indicate the type of locator\nby adding a `-L` or `--label` option (one for each locator) for instance,\n`{% cite ruby microscope --label chapter --locator 3 -L figure -l 24 & 32 %}`\nproduces something like: `(Matsumoto, 2008, chap. 3; Shaughnessy, 2013, figs. 24 & 32)`.\n\n#### Displaying formatted references\n\nIf you want to display the full formatted reference entry, you can use the\n`reference` tag. For example, given the following Bibtex entry,\n\n    @book{ruby,\n      title     = {The Ruby Programming Language},\n      author    = {Flanagan, David and Matsumoto, Yukihiro},\n      year      = {2008},\n      publisher = {O\'Reilly Media}\n    }\n\nusing `{% reference ruby %}` anywhere in your page, it will print\n"Flanagan, D., & Matsumoto, Y. (2008). *The Ruby Programming Language.*.\nO\'Reilly Media" (the exact result depends on your formatting style).\n\nThe `reference` tag accepts the same --file/-f parameter as the bibliography\ntag. This can be handy if you want to use a special BibTeX file as input for\na specific page. As an example, the tag\n\n    {% reference ruby --file /home/foo/bar.bib %}\n\nwill attempt to read the key `ruby` from file `/home/foo/bar.bib`. It will not\nfallback to the default BibTeX file.\n\n#### Citation pointing to another page in your site\nIn some cases, you might want your citation to link to another page on your cite (ex. a separate works cited page). As a solution, add a relative path to your scholar configurations:\n\n~~~ yaml\n    scholar:\n      relative: "/relative/path/file.html"\n~~~\n\n\n#### Multiple bibliographies within one document (like [multibib.sty](http://www.ctan.org/pkg/multibib))\n\nWhen you have multiple `{% bibliography %}` sections in one file,\nJekyll-Scholar will generate several lists containing the same\npublications that have the same `id` attributes. As a result, when you\ncite a reference the link to an `id` attribute cannot be resolved\nuniquely. Your browser will always take you take you to the first\noccurrence of the `id`. Moreover, valid HTML requires unique `id`\nattributes. This scenario may happen, for example, if you cite the\nsame reference in different blog posts, and all of these posts are\nshown in one html document.\n\nAs a solution, Jekyll-Scholar provides the `--prefix` tag. In your\nfirst post you might cite as\n\n    ---\n    title: Post 1\n    ---\n    Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor\n    incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis\n    nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n    Duis \'aute irure dolor in reprehenderit in voluptate\'\n    {% cite derrida:purveyor --prefix post1 %} velit esse cillum\n    dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat\n    non proident, \'sunt in culpa qui officia deserunt mollit anim id\n    est laborum\' {% cite rabinowitz --prefix post1 %}.\n\n    References\n    ----------\n\n    {% bibliography --cited --prefix post1 %}\n\n\nFor the second blog post you would cite as follows:\n\n    ---\n    title: Post 2\n    ---\n    Duis \'aute irure dolor in reprehenderit in voluptate\'\n    {% cite rabinowitz --prefix post2 %} velit esse cillum\n    dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat\n    non proident, \'sunt in culpa qui officia deserunt mollit anim id\n    est laborum\' {% cite rainey --prefix post2  %}.\n\n    References\n    ----------\n\n    {% bibliography --cited --prefix post2 %}\n\nEven though both posts cite \'rabinowitz\', both citations will be\nassigned unique identifiers linking to the respective references\nsection, although both posts will be rendered into a single HTML\ndocument.\n\n#### Add a custom class for the citation reference\nBy default Jekyll Scholar generate a link with a class:\n\n    <a href="#ruby" class="citation">(Derrida, 1975)</a>\n\nYou can custom this class in your configuration:\n\n    scholar:\n      cite_class: citation\n\n### File Repositories\n\nFile repository support was added to Jekyll-Scholar starting at version\n2.0. Currently, if you have a folder in your site that contains PDF or\nPostscript files of your papers, you can use the configuration option\n`repository` to indicate this directory. When generating bibliographies,\nJekyll-Scholar will look in that folder to see if it contains a filename\nmatching each entry\'s BibTeX key: if it does, the path to that file\nwill be exposed to the bibliography template as the `link` property.\n\nSince version 4.1.0 repositories are not limited to PDF and PS files.\nThese files are mapped to the `links` property in your bibliography\ntemplate. Here is an example of template that utilizes this feature\nto link to supporting material in a ZIP archive:\n\n    {{ reference }} [<a href="{{links.zip}}">Supporting Materials</a>]\n\nSince version 5.9.0, Jekyll-Scholar matches files which begin with a BibTeX key\nand are immediately followed by a delimiter (default: "."). All text proceeding\nthe delimiter is treated as the file extension. For example, if two files named\n`key.pdf` and `key.slides.pdf` are found, `{{links.pdf}}` and\n`{{links[\'slides.pdf\']}}` will both be populated.  You can use the configuration\noption `repository_file_delimiter` to change the default delimiter.\n\n\n### Detail Pages\n\nIf your layouts directory contains a layout file for bibliography details\n(the `details_layout` configuration options), Jekyll-Scholar will generate\na details page for each entry in you main bibliography. That is to say, if\nyour bibliography contains the following entry:\n\n    @book{ruby,\n      title     = {The Ruby Programming Language},\n      author    = {Flanagan, David and Matsumoto, Yukihiro},\n      year      = {2008},\n      publisher = {O\'Reilly Media}\n    }\n\nThen a page \'bibliography/ruby.html\' will be generated according to your\ndetails page layout. In the layout file, you have access to all fields\nof your BibTeX entry. Here is an example of a details page layout:\n\n    ---\n    ---\n    <html>\n    <head></head>\n    <body>\n      <h1>{{ page.entry.title }}</h1>\n      <h2>{{ page.entry.author }}</h2>\n      <p>{{ page.entry.abstract }}</p>\n    </body>\n    </html>\n\nWhen Jekyll-Scholar generates detail pages, it also adds links to each\nentry\'s detail page to the generated bibliography. You can alter the\nname of the link via the \'details_link\' configuration option.\n\nJekyll-Scholar also provides a Liquid tag for conveniently adding links\nto individual detail pages. For example, if you would like to add a simple\nlink to one of the items in your bibliography on a page or in a blog post\nyou can use the `cite_details` tag to generate the link. For this to work,\nyou need to pass the BibTeX key of the element you want to reference to\nthe tag and, optionally, provide a text for the link (the default text\ncan be set via the \'details_link\' configuration option).\n\n    Duis \'aute irure dolor in reprehenderit in voluptate\' velit esse cillum\n    dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\n    proident {% cite_details key --text Click Here For More Details %}.\n\n\n### Bibliography Filters\n\nBy default, Jekyll-Scholar includes all entries in you main BibTeX file\nwhen generating bibliographies. If you want to include only those entries\nmatching certain criteria, you can do so by adjusting the \'query\'\nconfiguration option. For example:\n\n    query: "@book" #=> includes only books\n    query: "@article[year>=2003]" #=> includes only articles published 2003 or later\n    query: "@*[url]" #=> includes all entries with a url field\n    query: "@*[status!=review]" #=> includes all entries whose status field is not set to \'review\'\n    query: "@book[year <= 1900 && author ^= Poe]" #=> Books published before 1900 where the author matches /Poe/\n    query: "!@book" #=> includes all entries with a type other than book\n\nPlease note that some of these queries require BibTeX-Ruby 2.3.0 or\nlater versions. You can also overwrite the configuration\'s query parameter\nin each bibliography tag individually as described above.\n\nContributing\n------------\n\nThe Jekyll-Scholar source code is\n[hosted on GitHub](http://github.com/inukshuk/jekyll-scholar/).\nYou can check out a copy of the latest code using Git:\n\n    $ git clone https://github.com/inukshuk/jekyll-scholar.git\n\nTo use this lasted version instead of the one provide by RubyGems,\njust add the line\n\n    $:.unshift \'/full/path/to/the/repository/lib\'\n\nto your `_plugins/ext.rb` before requiring \'jekyll/scholar\', where\n`/full/path/to/the/repository` is the path to your local version\nof Jekyll-Scholar.\n\nWhen contributing to Jekyll-Scholar, please make sure to install\nall dependencies and run the cucumber features:\n\n    $ bundle install\n    $ rake\n\nIf you\'ve found a bug or have a question, please open an issue on the\n[Jekyll-Scholar issue tracker](http://github.com/inukshuk/jekyll-scholar/issues).\nOr, for extra credit, clone the Jekyll-Scholar repository, write a failing\nexample, fix the bug and submit a pull request.\n\nAdditionally, if we merged at least one of your pull request you will get\nwrite permissions to the repository if you want them.\n\nLicense\n-------\n\nJekyll-Scholar is distributed under the same license as Jekyll.\n\nCopyright (c) 2011-2015 [Sylvester Keil](http://sylvester.keil.or.at/)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \'Software\'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \'AS IS\', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n'