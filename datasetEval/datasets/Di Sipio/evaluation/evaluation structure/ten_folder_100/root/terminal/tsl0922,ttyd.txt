b'# ttyd - Share your terminal over the web [![](https://github.com/tsl0922/ttyd/workflows/frontend/badge.svg)](https://github.com/tsl0922/ttyd/actions?workflow=frontend) [![](https://github.com/tsl0922/ttyd/workflows/backend/badge.svg)](https://github.com/tsl0922/ttyd/actions?workflow=backend)\n\nttyd is a simple command-line tool for sharing terminal over the web, inspired by [GoTTY][1].\n\n![screenshot](https://github.com/tsl0922/ttyd/raw/master/screenshot.gif)\n\n# Features\n\n- Built on top of [Libwebsockets][2] with C for speed\n- Fully-featured terminal based on [Xterm.js][3] with [CJK][18] and IME support\n- Graphical [ZMODEM][16] integration with [lrzsz][17] support\n- SSL support based on [OpenSSL][4]\n- Run any custom command with options\n- Basic authentication support and many other custom options\n- Cross platform: macOS, Linux, FreeBSD/OpenBSD, [OpenWrt][5]/[LEDE][6], Windows\n\n# Installation\n\n## Install on macOS\n\nInstall with [homebrew][7]:\n\n```bash\nbrew install ttyd\n```\n\n## Install on Linux\n\n- Binary version: download from the [releases](https://github.com/tsl0922/ttyd/releases) page.\n- Build from source (debian/ubuntu):\n\n    ```bash\n    sudo apt-get install cmake g++ pkg-config git vim-common libwebsockets-dev libjson-c-dev libssl-dev\n    git clone https://github.com/tsl0922/ttyd.git\n    cd ttyd && mkdir build && cd build\n    cmake ..\n    make && make install\n    ```\n\n    You may also need to compile/install [libwebsockets][2] from source if the `libwebsockets-dev` package is outdated.\n    \n- Install on Gentoo:\nclone the repo at [https://bitbucket.org/mgpagano/ttyd/src/master/](https://bitbucket.org/mgpagano/ttyd/src/master/) and follow the directions [here](https://wiki.gentoo.org/wiki/Custom_repository#Creating_a_local_repository) for creating a local repository.\n\n\n## Install on Windows\n\nttyd can be built with [MSYS2][10] on windows, The build instructions is [here][13].\n\n> **NOTE:** Native windows console programs may not work correctly due to [pty incompatibility issues][11].\n As a workaround, you can use [winpty][12] as a wrapper to invoke the windows program, eg: `ttyd winpty cmd`.\n\n## Install on OpenWrt/LEDE\n\n[LEDE][6] `17.01.0` and later:\n\n```bash\nopkg install ttyd\n```\n\nYou may want to [compile it manually][14].\n\n# Usage\n\n## Command-line Options\n\n```\nttyd is a tool for sharing terminal over the web\n\nUSAGE:\n    ttyd [options] <command> [<arguments...>]\n\nVERSION:\n    1.5.2\n\nOPTIONS:\n    -p, --port              Port to listen (default: 7681, use `0` for random port)\n    -i, --interface         Network interface to bind (eg: eth0), or UNIX domain socket path (eg: /var/run/ttyd.sock)\n    -c, --credential        Credential for Basic Authentication (format: username:password)\n    -u, --uid               User id to run with\n    -g, --gid               Group id to run with\n    -s, --signal            Signal to send to the command when exit it (default: 1, SIGHUP)\n    -a, --url-arg           Allow client to send command line arguments in URL (eg: http://localhost:7681?arg=foo&arg=bar)\n    -R, --readonly          Do not allow clients to write to the TTY\n    -t, --client-option     Send option to client (format: key=value), repeat to add more options\n    -T, --terminal-type     Terminal type to report, default: xterm-256color\n    -O, --check-origin      Do not allow websocket connection from different origin\n    -m, --max-clients       Maximum clients to support (default: 0, no limit)\n    -o, --once              Accept only one client and exit on disconnection\n    -B, --browser           Open terminal with the default system browser\n    -I, --index             Custom index.html path\n    -6, --ipv6              Enable IPv6 support\n    -S, --ssl               Enable SSL\n    -C, --ssl-cert          SSL certificate file path\n    -K, --ssl-key           SSL key file path\n    -A, --ssl-ca            SSL CA file path for client certificate verification\n    -d, --debug             Set log level (default: 7)\n    -v, --version           Print the version and exit\n    -h, --help              Print this text and exit\n\nVisit https://github.com/tsl0922/ttyd to get more information and report bugs.\n```\n\n## Example Usage\n\nttyd starts web server at port `7681` by default, you can use the `-p` option to change it, the `command` will be started with `arguments` as options. For example, run:\n\n```bash\nttyd -p 8080 bash -x\n```\nThen open <http://localhost:8080> with a browser, you will get a bash shell with debug mode enabled.\n\n**More Examples:**\n\n- If you want to login with your system accounts on the web browser, run `ttyd login`.\n- You can even run a none shell command like vim, try: `ttyd vim`, the web browser will show you a vim editor.\n- Sharing single process with multiple clients: `ttyd tmux new -A -s ttyd vim`, run `tmux new -A -s ttyd` to connect to the tmux session from terminal.\n\n## Browser Support\n\nModern browsers, See [Browser Support][15].\n\n## SSL how-to\n\nGenerate SSL CA and self signed server/client certificates:\n\n```bash\n# CA certificate (FQDN must be different from server/client)\nopenssl genrsa -out ca.key 2048\nopenssl req -new -x509 -days 365 -key ca.key -subj "/C=CN/ST=GD/L=SZ/O=Acme, Inc./CN=Acme Root CA" -out ca.crt\n\n# server certificate (for multiple domains, change subjectAltName to: DNS:example.com,DNS:www.example.com)\nopenssl req -newkey rsa:2048 -nodes -keyout server.key -subj "/C=CN/ST=GD/L=SZ/O=Acme, Inc./CN=localhost" -out server.csr\nopenssl x509 -sha256 -req -extfile <(printf "subjectAltName=DNS:localhost") -days 365 -in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out server.crt\n\n# client certificate (the p12/pem format may be useful for some clients)\nopenssl req -newkey rsa:2048 -nodes -keyout client.key -subj "/C=CN/ST=GD/L=SZ/O=Acme, Inc./CN=client" -out client.csr\nopenssl x509 -req -days 365 -in client.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out client.crt\nopenssl pkcs12 -export -clcerts -in client.crt -inkey client.key -out client.p12\nopenssl pkcs12 -in client.p12 -out client.pem -clcerts\n```\n\nThen start ttyd:\n\n```bash\nttyd --ssl --ssl-cert server.crt --ssl-key server.key --ssl-ca ca.crt bash\n```\nYou may want to test the client certificate verification with `curl`:\n\n```bash\ncurl --insecure --cert client.p12[:password] -v https://localhost:7681\n```\n\nIf you don\'t want to enable client certificate verification, remove the `--ssl-ca` option.\n\n## Docker and ttyd\n\nDocker containers are jailed environments which are more secure, this is useful for protecting the host system, you may use ttyd with docker like this:\n\n- Sharing single docker container with multiple clients: `docker run -it --rm -p 7681:7681 tsl0922/ttyd`.\n- Creating new docker container for each client: `ttyd docker run -it --rm ubuntu`.\n\n# Credits\n\n- [GoTTY][1]: ttyd is a port of GoTTY to `C` language with many improvements.\n- [Libwebsockets][2]: is used to build the websocket server.\n- [Xterm.js][3]: is used to run the terminal emulator on the web, [hterm][8] is used previously.\n\n  [1]: https://github.com/yudai/gotty\n  [2]: https://libwebsockets.org\n  [3]: https://github.com/xtermjs/xterm.js\n  [4]: https://www.openssl.org\n  [5]: https://openwrt.org\n  [6]: https://www.lede-project.org\n  [7]: http://brew.sh\n  [8]: https://chromium.googlesource.com/apps/libapps/+/HEAD/hterm\n  [9]: https://github.com/tsl0922/ttyd/issues/6\n  [10]: http://msys2.github.io\n  [11]: https://github.com/mintty/mintty/blob/master/wiki/Tips.md#inputoutput-interaction-with-alien-programs\n  [12]: https://github.com/rprichard/winpty\n  [13]: https://github.com/tsl0922/ttyd/tree/master/msys2\n  [14]: https://github.com/tsl0922/ttyd/tree/master/openwrt\n  [15]: https://github.com/xtermjs/xterm.js#browser-support\n  [16]: https://en.wikipedia.org/wiki/ZMODEM\n  [17]: https://ohse.de/uwe/software/lrzsz.html\n  [18]: https://en.wikipedia.org/wiki/CJK_characters\n  [19]: https://cmake.org/\n'