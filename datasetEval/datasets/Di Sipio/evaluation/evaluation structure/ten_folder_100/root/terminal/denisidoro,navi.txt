b'# navi <img src="https://user-images.githubusercontent.com/3226564/65362934-b4432500-dbdf-11e9-8f75-815fbc5cbf8f.png" alt="icon" height="28px"/> [![CircleCI](https://circleci.com/gh/denisidoro/navi.svg?style=svg)](https://circleci.com/gh/denisidoro/navi) ![GitHub release (latest by date including pre-releases)](https://img.shields.io/github/v/release/denisidoro/navi?include_prereleases)\n\nAn interactive cheatsheet tool for the command-line so that you won\'t say the following anymore:\n\n>\xe2\x80\x94 *How to run that command again?*<br>\n\xe2\x80\x94 *Oh, it\'s not in my shell history*<br>\n\xe2\x80\x94 *Geez, it\'s almost what I wanted but I need to change some args*\n\n![Demo](https://user-images.githubusercontent.com/3226564/67864139-ebbcbf80-fb03-11e9-9abb-8e6664f77915.gif)\n\n**navi** allows you to browse through cheatsheets (that you may write yourself or download from maintainers) and execute commands, with argument values prompted to you.\n\nTable of contents\n-----------------\n\n   * [Installation](#installation)\n      * [Using Homebrew or Linuxbrew](#using-homebrew-or-linuxbrew)\n      * [Using git](#using-git)\n      * [Using oh-my-zsh](#using-oh-my-zsh)\n   * [Upgrading](#upgrading)\n   * [Usage](#usage)\n      * [Preventing execution](#preventing-execution)\n      * [Pre-filtering](#pre-filtering)\n      * [Searching online repositories](#searching-online-repositories)\n      * [Shell widget](#shell-widget)\n      * [More options](#more-options)\n   * [Trying out online](#trying-out-online)\n   * [Motivation](#motivation)\n   * [Cheatsheets](#cheatsheets)\n      * [Using your own custom cheatsheets](#using-your-own-custom-cheatsheets)\n      * [Submitting cheatsheets](#submitting-cheatsheets)\n   * [Cheatsheet syntax](#cheatsheet-syntax)\n      * [Syntax overview](#syntax-overview)\n      * [Variables](#variables)\n      * [Table formatting](#table-formatting)\n   * [List customization](#list-customization)\n   * [Related projects](#related-projects)\n   * [Etymology](#etymology)\n\nInstallation\n------------\n\n### Using Homebrew or Linuxbrew\n\nYou can use [Homebrew](http://brew.sh/) or [Linuxbrew](http://linuxbrew.sh/)\nto install **navi**:\n```sh\nbrew install denisidoro/tools/navi\n```\n\n### Using git\n\nAlternatively, you can `git clone` this repository:\n\n```sh\ngit clone --depth 1 https://github.com/denisidoro/navi /opt/navi\ncd /opt/navi\n\n# to install in your $PATH\nsudo make install \n\n# to install in an arbitrary folder\n./scripts/install /some/path\n\n# install fzf\n# refer to https://github.com/junegunn/fzf\n```\n\n### Using oh-my-zsh\n\nMake sure that your oh-my-zsh `$ZSH_CUSTOM` directory is configured, then clone navi into the plugins directory.\n```sh\nplugins_dir="$ZSH_CUSTOM/plugins"\nmkdir -p "$plugins_dir"\ncd "$plugins_dir"\ngit clone https://github.com/denisidoro/navi\n```\n\nThen, add it to the oh-my-zsh plugin array to automatically enable the zsh widget:\n```sh\nplugins=(docker tmux fzf navi)\n```\n\nLastly, reload your `zshrc` or spawn a new terminal to load navi. Once this is done, you should be able to use it \nas a [shell widget](#shell-widget) with no additional setup.\n\n> Please note that when installing as an oh-my-zsh plugin, `navi` will not be available as a command. If you also want \n> to be able to run the command interactively, you will need to do one of the following: \n\n- Install it to /usr/bin/local (via `sudo make install`)\n- Manually set `$PATH` so that navi can be found.\n\nYou can manually update your path by adding a line like this in your `.zshrc`:\n\n```sh\nexport PATH=$PATH:"$ZSH_CUSTOM/plugins/navi"\n```\n\nAnd verify that it works by running `which navi` after reloading your configuration.\n\n\nUpgrading\n---------\n\n**navi** is being actively developed and you might want to upgrade it once in a while. Please follow the instruction below depending on the installation method used:\n\n```sh\n# brew\nbrew upgrade navi\n\n# git or oh-my-zsh\ncd "$(navi home)"\ngit pull\n```\n\nUsage\n-----\n\nBy simply running `navi` you will be prompted with the default cheatsheets.\n\n### Preventing execution\n\nIf you run `navi --print`, the selected snippet won\'t be executed. It will be printed to stdout instead.\n\n### Pre-filtering\n\nIf you run `navi query <cmd>`, the results will be pre-filtered.\n\n### Searching online repositories\n\nIf you run `navi search <cmd>`, **navi** will try to download cheatsheets from online repositories as well.\n\nPlease note that these cheatsheets aren\'t curated by **navi**\'s maintainers and should be taken with a grain of salt. If you\'re not sure about executing these snippets, make sure to check the preview window or use the `--print` option.\n\n### Shell widget\n\nYou can use **navi** as a widget to your shell. This way, your history is correctly populated and you can edit the command as you wish before executing it.\n\nIn order to use it, add this line to your `.bashrc`-like file:\n```sh\n# bash\nsource "$(navi widget bash)"\n\n# zsh\nsource "$(navi widget zsh)"\n\n# fish\nsource (navi widget fish)\n```\n\nBy default, `Ctrl+G` is assigned to launching **navi**. If you want to change the keybinding, replace the argument of `bind` or `bindkey` in [the widget file](https://github.com/denisidoro/navi/search?q=filename%3Anavi.plugin.*&unscoped_q=filename%3Anavi.plugin.*).\n\nIf you want a widget for other shells, please upvote [this issue](https://github.com/denisidoro/navi/issues/37).\n\n\n### More options\n\nPlease refer to `navi --help` for more details.\n\nTrying out online\n--------------------\n\nIf you don\'t have access to bash at the moment and you want to live preview **navi**, head to [this playground](https://www.katacoda.com/denisidoro/scenarios/navi). It\'ll start a docker container with instructions for you to install and use the tool. Note: login required.\n\nMotivation\n----------\n\nThe main objectives are:\n- to increase discoverability, by finding snippets given keywords or descriptions;\n- to prevent you from running auxiliar commands, copying the result into the clipboard and then pasting into the original command;\n- to easily share one-liners with others so that they don\'t need to figure out how to write the commands;\n- to improve terminal usage as a whole.\n\nSure, you can find autocompleters out there for all your favorite commands. However, they are very specific and each one may offer a different learning curve.\n\nOr you can launch a browser and search for instructions on Google, but that takes some time.\n\n**navi**, on the other hand, intends to be a general purpose platform for bookmarking any snippet at a very low cost.\n\nCheatsheets\n-----------\n\n### Using your own custom cheatsheets\n\nIn this case, you need to pass a `:`-separated list of separated directories which contain `.cheat` files:\n```sh\nnavi --path "/folder/with/cheats"\n```\n\nAlternatively, you can set an environment variable in your `.bashrc`-like file:\n```sh\nexport NAVI_PATH="/folder/with/cheats:/another/folder"\n```\n\n### Submitting cheatsheets\n\nFeel free to fork this project and open a PR for me to include your contributions.\n\nCheatsheet syntax\n-----------------\n\nCheatsheets are described in `.cheat` files.\n\n### Syntax overview\n\n- lines starting with `%` should contain tags which will be added to any command in a given file;\n- lines starting with `#` should be descriptions of commands;\n- lines starting with `$` should contain commands that generate a list of possible values for a given argument;\n- all the other non-empty lines are considered as executable commands.\n\nFor example, this is a valid `.cheat` file:\n```sh\n% git, code\n\n# Change branch\ngit checkout <branch>\n\n$ branch: git branch | awk \'{print $NF}\'\n```\n\n### Variables\n\nThe interface prompts for variable names inside brackets (eg `<branch>`).\n\nVariable names should only include alphanumeric characters and `_`.\n\nThe command for generating possible inputs can refer other variables:\n```sh\n# If you select 2 for x, the possible values of y will be 12 and 22\necho <x> <y>\n\n$ x: echo -e \'1\\n2\\n3\'\n$ y: echo -e "$((x+10))\\n$((x+20))"\n```\n\n### Table formatting\n\nYou can pick a specific column of a selection and set the number of lines considered as headers:\n\n```sh\n# This will pick the 3rd column and use the first line as header\ndocker rmi <image_id>\n\n$ image_id: docker images --- --column 3 --headers 1\n```\n\nList customization\n------------------\n\nLists can be stylized with the [$FZF_DEFAULT_OPTS](https://github.com/junegunn/fzf) environment variable. This way, you can change the [color scheme](https://github.com/junegunn/fzf/wiki/Color-schemes), for example.\n\nIn addition:\n- the `--fzf-overrides` option allows you to hide columns, for example\n- the `--col-widths` option allows you to limit column widths\n\nPlease refer to `navi --help` for more details.\n\nRelated projects\n----------------\n\nThere are many similar projects out there ([bro](https://github.com/hubsmoke/bro), [eg](https://github.com/srsudar/eg), [cheat.sh](https://github.com/chubin/cheat.sh), [tldr](https://github.com/tldr-pages/tldr), [cmdmenu](https://github.com/amacfie/cmdmenu), [cheat](https://github.com/cheat/cheat), [beavr](https://github.com/denisidoro/beavr), [how2](https://github.com/santinic/how2) and [howdoi](https://github.com/gleitz/howdoi), to name a few).\n\nMost of them provide excellent cheatsheet repositories, but lack a nice UI and argument suggestions.\n\nIn any case, **navi** has the option to [search for some of these repositories](#searching-online-repositories).\n\nEtymology\n---------\n\nIn [The Legend of Zelda Ocarina of Time](https://zelda.gamepedia.com/Ocarina_of_Time), [navi](https://zelda.gamepedia.com/Navi) is a character that provides [Link](https://zelda.gamepedia.com/Link) with a variety of clues to help him solve puzzles and progress in his quest.\n'