b'<img align="right" src="README.md.d/thumb.png">\n\n# lsix\nLike "ls", but for images. Shows thumbnails in terminal using [sixel](https://en.wikipedia.org/wiki/Sixel)\ngraphics.\n\n\n## Usage\n\n    lsix [ FILES ... ]\n\n## Examples\n\n### Basic Usage\n\nJust typing `lsix` will show images in the current working directory.\nYou can also specify filenames and, of course, use shell wild cards\n(e.g., `lsix *jpg *png`).\n\nBecause lsix uses ImageMagick pretty much any image format will be\nsupported. However, some may be slow to render (like PDF), so lsix\ndoesn\'t show them unless you ask specifically. If you want to force a\nlisting of a certain type of image simply specify the filenames or\nuse a wildcard (`*.pdf` in the example below),.\n\n![Example 1 of lsix usage](/README.md.d/example1.png "Most basic usage")\n\n### Expanding GIFs \nIf you specify a GIF (or actually any file that has multiple images in\nit) on the command line, all the frames will get expanded and shown in\na montage. For example, `lsix nyancat.gif` shows all the frames. Note\nthat GIF stores some frames as only the pixels that differ from the\nprevious frame.\n![Example 2 of lsix usage](/README.md.d/example2.png "GIFs get expanded")\n\n### Terminal background color is detected\n\nYou may have noticed that PNGs and SVG files have correct alpha\nchannel for the terminal background. That is because lsix uses\nterminal escape sequences to try to figure out your foreground and\nbackground colors. (Foreground is used for the text fill color.)\n\nIn the first example below, after running `lsix` in a white on black\nxterm, I sent an escape sequence to swap foreground and background\ncolors. When I ran it again, `lsix` detected it and changed the\nbackground color to white. Of course, you can pick whatever default\ncolors you want (e.g., `xterm -bg blue`, in the second example below).\n\n![Example 3 of lsix usage](/README.md.d/example3.png "Reverse video works")\n![Example 4 of lsix usage](/README.md.d/example4.png "Even \'xterm -bg blue\' works")\n\n## Features\n\n* Detects if your terminal can display SIXEL graphics inline using [control sequences](https://invisible-island.net/xterm/ctlseqs/ctlseqs.html#h2-Sixel-Graphics).\n\n* Works great over ssh. Perfect for manipulating those images on the\n  web server when you can\'t quite remember what each one was. \n\n* Non-bitmap graphics often work fine (.svg, .eps, .pdf, .xcf).\n\n* Automatically detects if your terminal, like xterm, can increase the\n  number of color registers to improve the image quality and does so.\n\n* Automatically detects terminal\'s foreground and background colors.\n\n* In terminals that support dtterm WindowOps, the number of tiles per\n  row will adjust appropriately to the window width.\n\n* If there are many images in a directory (>21), lsix will display them\n  one row at a time so you don\'t need to wait for the entire montage\n  to be created.\n\n* If your filenames are too long, lsix will wrap the text before\n  passing it into ImageMagick\'s `montage`. (Without lsix, `montage` just\n  jumbles long filenames on top of one another.)\n\n* You can easily change things like the width of each tile in the\n  montage, the font family, and point size by editing simple variables\n  at the top of the file. *(Tip: try `convert -list font` to see what\n  fonts you have on your machine.)*\n\n* Unicode filenames work fine, as long as your font has the glyphs.\n\n## Installation\n\nJust put the [`lsix`](/lsix) file in your path (e.g., /usr/local/bin) and run\nit. It\'s just a BASH shell script.\n\nThe only prerequisite software is ImageMagick. If you don\'t have it\nyet, your OS\'s package manager will make it easy to get. (E.g.,\n`apt-get install imagemagick`).\n\n## Your Terminal must support Sixel graphics\n\nI developed this using [xterm](https://invisible-island.net/xterm/) in\nvt340 emulation mode, but I believe this should work on\nany Sixel compatible terminal. You may test your terminal by viewing a\nsingle image, like so:\n\n    convert  foo.jpg  -geometry 800x480  sixel:- \n\n### XTerm\n\nNote that xterm does not have Sixel mode enabled by default, so you\nneed to either run it like so:\n\n    xterm -ti vt340\n\nOr, make vt340 the default terminal type for xterm. Add the following\nto your `.Xresources` file and run `xrdb -merge .Xresources`.\n\n    ! Allow sixel graphics. (Try: "convert -colors 16 foo.jpg sixel:-").\n    xterm*decTerminalID\t:\tvt340\n    \nFurther, some distributions, such as Fedora, appear to not compile `xterm`\nwith sixel support. In that case, try an alternate terminal, such as\n`mlterm`.\n\n### SIXEL compatible terminals\n\n* XTerm (tested)\n* MLterm (tested)\n* iterm2 for MacOS (pending)\n* WSLtty (reported)\n* MinTTY (Cygwin) (reported)\n* Yaft, Linux framebuffer terminal (tested)\n\n### SIXEL incompatible terminals\n\n* All libvte based terminals\n  * gnome-terminal\n  * terminator\n  * lxterm\n\n## Configuration\n\nBecause `lsix` is currently designed to be very simple, there are no\ncommand line flags, no configuration files, no knobs to twiddle, or\nfrobs to frobnosticate. However, since the script is so simple, if you\nwant to make a change, it\'s pretty easy to do just by editing the\nfile. Everything is nicely commented with the most common default\nvariables at the top.\n\n## Contact the author\n\nI welcome feedback. If you use lsix and like it or have suggestions\nfor how it can be improved, please go ahead and send your thoughts to\nme [@hackerb9](https://github.com/hackerb9/lsix/issues/new) via\nGitHub.\n\n\n## Bugs\n\n* XTerm\'s reverse video mode (`xterm -rv`) is different from\n  specifying the foreground and background explicitly. There is a way\n  to detect the latter, but not the former. That means the background\n  color will be incorrect for folks who use XTerm\'s reverseVideo\n  resource. (See issue #20).\n\n* Screen width is currently limited to 1000px due to a misfeature in\n  xterm which caused it to silently show nothing. This limitation will\n  be removed once xterm can handle images greater than 1000x1000.\n\n* Directories specified on the command line should perhaps be\n  processed as if the user had cd\'d to that directory.\n\n* Filenames that begin with "@" are special to ImageMagick and it\'ll\n  freak out if you don\'t prepend a directory. (`lsix ./@foo.png`)\n  (This is a bug in ImageMagick, not lsix.)\n\n* Specifying the empty string `""` as a filename makes ImageMagick hang.\n  (This appears to be an ImageMagick bug / misfeature). \n\n* Long filenames are wrapped, but not intelligently. Would it\n  complicate this script too much to make it prefer to wrap on whites\n  space, dashes, underscores, and periods? Maybe.\n\n* If you run `lsix foo.avi`, you\'re asking for trouble.\n\n* Old versions of xterm need configuration to detect window size.\n\n    If you are using Xterm(343) or below, to have `lsix` automatically\n    adjust how many tiles it shows based on your window size, you\'ll need\n    to add the following to your .Xresources:\n\n        ! Allow lsix to read the terminal window size (op #14)\n        xterm*allowWindowOps      : False\n        xterm*disallowedWindowOps : 1,2,3,4,5,6,7,8,9,11,13,18,19,20,21,GetSelection,SetSelection,SetWinLines,SetXprop\n\n    Xterm\'s configuration for this is rather recondite. In order to allow\n    the operation checking the window size (#14), we have to tell xterm to\n    _not_ allow window ops, but then we explicitly list the ops\n    disallowed, and it just happens that that list does not include the\n    number 14. _(This_ _is_ _very_ _silly.)_\n\n\n\n## Future Issues\n\n* The Sixel standard doesn\'t appear to have a way to query the size of\n  the graphics screen. Reading the VT340 documentation, it appears\n  your program has to already know the resolution of the device you\'re\n  rendering on.\n\n  XTerm, as of version 344, has added [a control\n  sequence](https://invisible-island.net/xterm/ctlseqs/ctlseqs.html#h2-Functions-using-CSI-_-ordered-by-the-final-character_s_)\n  that solves the problem \xe2\x80\x94 `CSI ? Pi ; Pa ; Pv S` \xe2\x80\x94 but not all OSes\n  have upgraded to XTerm(344) and some terminals, such as `mlterm`,\n  haven\'t yet implemented it.\n\n  There is an alternate way to read the window size using the dtterm\n  WindowOps extension but it is not quite the right solution as the\n  geometry of the Sixel graphics screen is not necessarily the same as\n  the window size. (For example, xterm limits the graphics geometry to\n  1000x1000, even though the window can actually be larger.)\n\n  For now, if your terminal can handle it, `lsix` will use the dtterm\n  WindowOps to read your window size, but the chances of that working\n  are slim. For most people `lsix` will assume you are on a VT340\n  (800x480) and can fit only 6 tiles per row.\n\n* The Sixel standard also lacks a way to query the number of\n  color registers available. I used the extensions from `xterm` to do\n  so, but I do not know how widely implemented they are. If a terminal\n  does not respond, `lsix` presumes you\'re on an original vt340 and\n  uses only 16 color registers. (Sorry, 4-gray vt330 users! Time to\n  upgrade. ;-) )\n\n* mlterm (at least as of version 3.5.0) has a bug where it reverses\n  the sense of the sixel scrolling control sequence. \n\n  Possibly this is an attempt to simulate the VT240 hardware terminal\n  which did not scroll sixels. However, that behavior is considered\n  "deviant" according to the standard. (See [DEC STD\n  070](https://archive.org/details/bitsavers_decstandar0VideoSystemsReferenceManualDec91_74264381), chapter 9, section 12.1, Deviations.)\n  Lsix works around it for now by detecting `TERM=mlterm`, but we should\n  watch out for the mlterm team to eventually fix it.\n\n* [libsixel](https://github.com/saitoha/libsixel) is an excellent\n  project for writing programs that can output optimized Sixel\n  graphics commands. Because I have a lot of respect for the project,\n  I feel I should explain why `lsix` does not use libsixel.\n\n  * (a) I wanted lsix to work everywhere easily. Bash and imagemagick\n    are ubiquitous, so a shell script is a natural solution.\n\n  * (b) I wanted `lsix` to be simple enough that it could be easily\n    customized and extended by other people. (Including myself.)\n\n  * (c) ImageMagick has better support for reading different formats\n    than stb_image (the library used by libsixel\'s `img2sixel`). (For\n    example: xpm, svg, 16-bit png, and even sixel files are not\n    recognized by img2sixel). Since ImageMagick can read all of those\n    and write sixel output directly, it made sense to use it for both.\n\n  * (d) While libsixel is optimized and would surely be faster than\n    ImageMagick, it\'s overkill. For a simple directory listing, this\n    is plenty fast enough.\n\n## Resources\n\n  * [XTerm Control Sequences](https://invisible-island.net/xterm/ctlseqs/ctlseqs.html)\n  * [ImageMagick](https://imagemagick.org/)\n  * [VT340 Programmer\'s Reference](https://vt100.net/docs/vt3xx-gp/):\n    * [Chapter 14](https://vt100.net/docs/vt3xx-gp/chapter14.html). Sixels.\n    * [Chapter 16](https://vt100.net/docs/vt3xx-gp/chapter16.html#S16.3) Difference between Level 1 and Level 2 Sixel implementations.\n  * [DEC STD 070 Video Systems Reference Manual](https://archive.org/details/bitsavers_decstandar0VideoSystemsReferenceManualDec91_74264381).\n    A weighty tome which covers everything in exacting detail. I referred mostly to sections 4 (escape sequences) and 9 (sixel programming).\n'