b'*wttr.in \xe2\x80\x94 the right way to check the weather!*\n\nwttr.in is a console-oriented weather forecast service that supports various information\nrepresentation methods like terminal-oriented ANSI-sequences for console HTTP clients\n(curl, httpie, or wget), HTML for web browsers, or PNG for graphical viewers.\n\nwttr.in uses [wego](http://github.com/schachmat/wego) for visualization\nand various data sources for weather forecast information.\n\nYou can see it running here: [wttr.in](http://wttr.in).\n\n## Usage\n\nYou can access the service from a shell or from a Web browser like this:\n\n    $ curl wttr.in\n    Weather for City: Paris, France\n\n         \\   /     Clear\n          .-.      10 \xe2\x80\x93 11 \xc2\xb0C     \n       \xe2\x80\x95 (   ) \xe2\x80\x95   \xe2\x86\x91 11 km/h      \n          `-\xe2\x80\x99      10 km          \n         /   \\     0.0 mm         \n\n\nHere is an actual weather report for your location (it\'s live!):\n\n![Weather Report](http://wttr.in/MyLocation.png?)\n\n(It\'s not your actual location - GitHub\'s CDN hides your real IP address with its own IP address,\nbut it\'s still a live weather report in your language.)\n\nWant to get the weather information for a specific location? You can add the desired location to the URL in your\nrequest like this:\n\n    $ curl wttr.in/London\n    $ curl wttr.in/Moscow\n\nIf you omit the location name, you will get the report for your current location based on your IP address.\n\nUse 3-letter airport codes in order to get the weather information at a certain airport:\n\n    $ curl wttr.in/muc      # Weather for IATA: muc, Munich International Airport, Germany\n    $ curl wttr.in/ham      # Weather for IATA: ham, Hamburg Airport, Germany\n\nLet\'s say you\'d like to get the weather for a geographical location other than a town or city - maybe an attraction\nin a city, a mountain name, or some special location. Add the character `~` before the name to look up that special\nlocation name before the weather is then retrieved:\n\n\t$ curl wttr.in/~Vostok+Station\n\t$ curl wttr.in/~Eiffel+Tower\n\t$ curl wttr.in/~Kilimanjaro\n\nFor these examples, you\'ll see a line below the weather forecast output that shows the geolocation\nresults of looking up the location:\n\n\tLocation: Vostok Station, \xd1\x81\xd1\x82\xd0\xb0\xd0\xbd\xd1\x86\xd0\xb8\xd1\x8f \xd0\x92\xd0\xbe\xd1\x81\xd1\x82\xd0\xbe\xd0\xba, AAT, Antarctica [-78.4642714,106.8364678]\n    Location: Tour Eiffel, 5, Avenue Anatole France, Gros-Caillou, 7e, Paris, \xc3\x8ele-de-France, 75007, France [48.8582602,2.29449905432]\n\tLocation: Kilimanjaro, Northern, Tanzania [-3.4762789,37.3872648] \n\nYou can also use IP-addresses (direct) or domain names (prefixed with `@`) to specify a location:\n\n    $ curl wttr.in/@github.com\n    $ curl wttr.in/@msu.ru\n\nTo get detailed information online, you can access the [/:help](http://wttr.in/:help) page:\n\n    $ curl wttr.in/:help\n\n### Weather Units\n\nBy default the USCS units are used for the queries from the USA and the metric system for the rest of the world.\nYou can override this behavior by adding `?u` or `?m` to a URL like this:\n\n    $ curl wttr.in/Amsterdam?u\n    $ curl wttr.in/Amsterdam?m\n\n## Supported output formats\n\nwttr.in currently supports four output formats:\n\n* ANSI for the terminal;\n* ANSI for the terminal, one-line mode;\n* HTML for the browser;\n* PNG for the graphical viewers;\n* JSON for scripts and APIs.\n\nThe ANSI and HTML formats are selected basing on the User-Agent string.\nThe PNG format can be forced by adding `.png` to the end of the query:\n\n    $ wget wttr.in/Paris.png\n\nYou can use all of the options with the PNG-format like in an URL, but you have\nto separate them with `_` instead of `?` and `&`:\n\n    $ wget wttr.in/Paris_0tqp_lang=fr.png\n\nUseful options for the PNG format:\n\n* `t` for transparency (`transparency=150`);\n* transparency=0..255 for a custom transparency level.\n\nTransparency is a useful feature when weather PNGs are used to add weather data to pictures:\n\n    $ convert source.jpg <( curl wttr.in/Oymyakon_tqp0.png ) -geometry +50+50 -composite target.jpg\n\nIn this example:\n\n* `source.jpg` - source file;\n* `target.jpg` - target file;\n* `Oymyakon` - name of the location;\n* `tqp0` - options (recommended).\n\n![Picture with weather data](https://pbs.twimg.com/media/C69-wsIW0AAcAD5.jpg)\n\nYou can embed a special wttr.in widget, that displays the weather condition for the current or a selected location, into a HTML page using the [wttr-switcher](https://github.com/midzer/wttr-switcher). That is how it looks like: [wttr-switcher-example](https://midzer.github.io/wttr-switcher/) or on a real world web site: https://feuerwehr-eisolzried.de/.\n\n![Embedded wttr.in example at feuerwehr-eisolzried.de](https://user-images.githubusercontent.com/3875145/65265457-50eac180-db11-11e9-8f9b-2e1711dfc436.png)\n\n## JSON output\n\nThe JSON format is a feature providing access to wttr.in data through an easy-to-parse format, without requiring the user to create a complex script to reinterpret wttr.in\'s graphical output.\n\nTo fetch information in JSON format, use the following syntax:\n\n    $ curl wttr.in/Detroit?format=j1\n\nThis will fetch information on the Detroit region in JSON format. The j1 format code is used to allow for the use of other layouts for the JSON output.\n\nThe result will look something like the following:\n\n    {\n    "current_condition": [\n        {\n            "FeelsLikeC": "25", \n            "FeelsLikeF": "76", \n            "cloudcover": "100", \n            "humidity": "76", \n            "observation_time": "04:08 PM", \n            "precipMM": "0.2", \n            "pressure": "1019", \n            "temp_C": "22", \n            "temp_F": "72", \n            "uvIndex": 5, \n            "visibility": "16", \n            "weatherCode": "122", \n            "weatherDesc": [\n                {\n                    "value": "Overcast"\n                }\n            ], \n            "weatherIconUrl": [\n                {\n                    "value": ""\n                }\n            ], \n            "winddir16Point": "NNE", \n            "winddirDegree": "20", \n            "windspeedKmph": "7", \n            "windspeedMiles": "4"\n        }\n    ], \n    ...\n\nMost of these values are self-explanatory, aside from `weatherCode`. The `weatherCode` is an enumeration which you can find at either [the WorldWeatherOnline website](https://www.worldweatheronline.com/developer/api/docs/weather-icons.aspx) or [in the wttr.in source code](https://github.com/chubin/wttr.in/blob/master/lib/constants.py).\n\n## One-line output\n\nFor one-line output format, specify additional URL parameter `format`:\n\n```\n$ curl wttr.in/Nuremberg?format=3\nNuremberg: \xf0\x9f\x8c\xa6 +11\xe2\x81\xb0C\n```\n\nAvailable preconfigured formats: 1, 2, 3, 4 and the custom format using the percent notation (see below).\n\nYou can specify multiple locations separated with `:` (for repeating queries):\n\n```\n$ curl wttr.in/Nuremberg:Hamburg:Berlin?format=3\nNuremberg: \xf0\x9f\x8c\xa6 +11\xe2\x81\xb0C\n```\nOr to process all this queries at once:\n\n```\n$ curl -s \'wttr.in/{Nuremberg,Hamburg,Berlin}?format=3\'\nNuremberg: \xf0\x9f\x8c\xa6 +11\xe2\x81\xb0C\nHamburg: \xf0\x9f\x8c\xa6 +8\xe2\x81\xb0C\nBerlin: \xf0\x9f\x8c\xa6 +8\xe2\x81\xb0C\n```\n\nTo specify your own custom output format, use the special `%`-notation:\n\n```\n    c    Weather condition,\n    C    Weather condition textual name,\n    h    Humidity,\n    t    Temperature,\n    w    Wind,\n    l    Location,\n    m    Moonphase \xf0\x9f\x8c\x91\xf0\x9f\x8c\x92\xf0\x9f\x8c\x93\xf0\x9f\x8c\x94\xf0\x9f\x8c\x95\xf0\x9f\x8c\x96\xf0\x9f\x8c\x97\xf0\x9f\x8c\x98,\n    M    Moonday,\n    p    precipitation (mm),\n    o    Probability of Precipitation,\n    P    pressure (hPa),\n```\n\nSo, these two calls are the same:\n\n```\n    $ curl wttr.in/London?format=3\n    London: \xe2\x9b\x85\xef\xb8\x8f +7\xe2\x81\xb0C\n    $ curl wttr.in/London?format="%l:+%c+%t"\n    London: \xe2\x9b\x85\xef\xb8\x8f +7\xe2\x81\xb0C\n```\nKeep in mind, that when using in `tmux.conf`, you have to escape `%` with `%`, i.e. write there `%%` instead of `%`.\n\nIn programs, that are querying the service automatically (such as tmux), it is better to use some reasonable update interval. In tmux, you can configure it with `status-interval`.\n\nIf several, `:` separated locations, are specified in the query, specify update period\nas an additional query parameter `period=`:\n```\nset -g status-interval 60\nWEATHER=\'#(curl -s wttr.in/London:Stockholm:Moscow\\?format\\="%%l:+%%c%%20%%t%%60%%w&period=60")\'\nset -g status-right "$WEATHER ..."\n```\n![wttr.in in tmux status bar](https://wttr.in/files/example-tmux-status-line.png)\n\nTo see emojis in terminal, you need:\n\n1. Terminal support for emojis (was added to Cairo 1.15.8);\n2. Font with emojis support.\n\nFor the Emoji font, we recommend *Noto Color Emoji*, and a good alternative option would be the *Emoji One* font;\nboth of them support all necessary emoji glyphs.\n\nFont configuration:\n\n```\n$ cat ~/.config/fontconfig/fonts.conf\n<?xml version="1.0" encoding="UTF-8"?>\n<!DOCTYPE fontconfig SYSTEM "fonts.dtd">\n<fontconfig>\n  <alias>\n    <family>serif</family>\n    <prefer>\n      <family>Noto Color Emoji</family>\n    </prefer>\n  </alias>\n  <alias>\n    <family>sans-serif</family>\n    <prefer>\n      <family>Noto Color Emoji</family>\n    </prefer>\n  </alias>\n  <alias>\n    <family>monospace</family>\n    <prefer>\n      <family>Noto Color Emoji</family>\n    </prefer>\n  </alias>\n</fontconfig>\n```\n\n(to apply the configuration, run `fc-cache -f -v`)\n\n## Data-rich output format\n\nIn the experimental data-rich output format, that is available under the view code `v2`,\na lot of additional weather and astronomical information is available:\n\n* Temperature, and precepetation changes forecast throughout the days;\n* Moonphase for today and the next three days;\n* The current weather condition, temperature, humidity, windspeed and direction, pressure;\n* Timezone;\n* Dawn, sunrise, noon, sunset, dusk time for he selected location;\n* Precise geographical coordinates for the selected location.\n\n```\n  $ curl v2.wttr.in/M\xc3\xbcnchen\n```\n\nor\n\n```\n  $ curl wttr.in/M\xc3\xbcnchen?format=v2\n```\n\n\n![data-reach output format](https://wttr.in/files/example-wttr-v2.png)\n\n(The mode is experimental, and it has several limitations currently:\n\n* It works only in terminal;\n* Only English is supported).\n\nCurrently, you need some tweaks for some terminals, to get the best possible visualization.\n\n### URXVT\n\nDepending on your configuration you might be taking all steps, or only a few. URXVT currenly doesn\'t support emoji related fonts, but we can get almost the same effect using *Font-Symbola*. So add to your `.Xresources` file the following line:\n```\n    xft:symbola:size=10:minspace=False\n```\nYou can add it _after_ your preferred font and it will only show up when required.\nThen, if you see or feel like you\'re having spacing issues, add this: `URxvt.letterSpace: 0`\nFor some reason URXVT sometimes stops deciding right the word spacing and we need to force it this way.\n\nThe result, should look like:\n\n![URXVT Emoji line](https://user-images.githubusercontent.com/24360204/63842949-1d36d480-c975-11e9-81dd-998d1329bd8a.png)\n\n## Moon phases\n\nwttr.in can also be used to check the phase of the Moon. This example shows how to see the current Moon phase:\n\n    $ curl wttr.in/Moon\n\nGet the Moon phase for a particular date by adding `@YYYY-MM-DD`:\n\n    $ curl wttr.in/Moon@2016-12-25\n\nThe Moon phase information uses [pyphoon](https://github.com/chubin/pyphoon) as its backend.\n\n## Internationalization and localization\n\nwttr.in supports multilingual locations names that can be specified in any language in the world\n(it may be surprising, but many locations in the world don\'t have an English name).\n\nThe query string should be specified in Unicode (hex-encoded or not). Spaces in the query string\nmust be replaced with `+`:\n\n    $ curl wttr.in/\xd1\x81\xd1\x82\xd0\xb0\xd0\xbd\xd1\x86\xd0\xb8\xd1\x8f+\xd0\x92\xd0\xbe\xd1\x81\xd1\x82\xd0\xbe\xd0\xba\n    Weather report: \xd1\x81\xd1\x82\xd0\xb0\xd0\xbd\xd1\x86\xd0\xb8\xd1\x8f \xd0\x92\xd0\xbe\xd1\x81\xd1\x82\xd0\xbe\xd0\xba\n\n                   Overcast\n          .--.     -65 \xe2\x80\x93 -47 \xc2\xb0C\n       .-(    ).   \xe2\x86\x91 23 km/h\n      (___.__)__)  15 km\n                   0.0 mm\n\nThe language used for the output (except the location name) does not depend on the input language\nand it is either English (by default) or the preferred language of the browser (if the query\nwas issued from a browser) that is specified in the query headers (`Accept-Language`).\n\nThe language can be set explicitly when using console clients by using command-line options like this:\n\n    curl -H "Accept-Language: fr" wttr.in\n    http GET wttr.in Accept-Language:ru\n\nThe preferred language can be forced using the `lang` option:\n\n    $ curl wttr.in/Berlin?lang=de\n\nThe third option is to choose the language using the DNS name used in the query:\n\n    $ curl de.wttr.in/Berlin\n\nwttr.in is currently translated into 54 languages, and the number of supported languages is constantly growing.\n\nSee [/:translation](http://wttr.in/:translation) to learn more about the translation process, \nto see the list of supported languages and contributors, or to know how you can help to translate wttr.in\nin your language.\n\n![Queries to wttr.in in various languages](https://pbs.twimg.com/media/C7hShiDXQAES6z1.jpg)\n\n## Installation \n\nTo install the application:\n\n1. Install external dependencies\n2. Install Python dependencies used by the service\n3. Configure IP2Location (optional)\n4. Get a WorldWeatherOnline API and configure wego\n5. Configure wttr.in\n6. Configure the HTTP-frontend service\n\n### Install external dependencies\n\nwttr.in has the following external dependencies:\n\n* [golang](https://golang.org/doc/install), wego dependency\n* [wego](https://github.com/schachmat/wego), weather client for terminal\n\nAfter you install [golang](https://golang.org/doc/install), install `wego`:\n\n    $ go get -u github.com/schachmat/wego\n    $ go install github.com/schachmat/wego\n\n### Install Python dependencies\n\nPython requirements:\n\n* Flask\n* geoip2\n* geopy\n* requests\n* gevent\n\nIf you want to get weather reports as PNG files, you\'ll also need to install:\n\n* PIL\n* pyte (>=0.6)\n* necessary fonts\n\nYou can install most of them using `pip`. \n\nIf `virtualenv` is used:\n\n    $ virtualenv ve\n    $ ve/bin/pip install -r requirements.txt\n    $ ve/bin/python bin/srv.py\n\nAlso, you need to install the geoip2 database.\nYou can use a free database GeoLite2 that can be downloaded from (http://dev.maxmind.com/geoip/geoip2/geolite2/).\n\n### Configure IP2Location (optional)\n\nIf you want to use the IP2location service for IP-addresses that are not covered by GeoLite2,\nyou have to obtain a API key of that service, and after that save into the `~/.ip2location.key` file:\n\n```\n$ echo \'YOUR_IP2LOCATION_KEY\' > ~/.ip2location.key\n```\n\nIf you don\'t have this file, the service will be silently skipped (it is not a big problem,\nbecause the MaxMind database is pretty good).\n\n### Get a WorldWeatherOnline key and configure wego\n\nTo get a WorldWeatherOnline API key, you must register here:\n \n    https://developer.worldweatheronline.com/auth/register\n\nAfter you have a WorldWeatherOnline key, you can save it into the\nWWO key file: `~/.wwo.key`\n\nAlso, you have to specify the key in the `wego` configuration:\n\n    $ cat ~/.wegorc \n    {\n        "APIKey": "00XXXXXXXXXXXXXXXXXXXXXXXXXXX",\n        "City": "London",\n        "Numdays": 3,\n        "Imperial": false,\n        "Lang": "en"\n    }\n\nThe `City` parameter in `~/.wegorc` is ignored.\n\n### Configure wttr.in\n\nConfigure the following environment variables that define the path to the local `wttr.in`\ninstallation, to the GeoLite database, and to the `wego` installation. For example:\n\n    export WTTR_MYDIR="/home/igor/wttr.in"\n    export WTTR_GEOLITE="/home/igor/wttr.in/GeoLite2-City.mmdb"\n    export WTTR_WEGO="/home/igor/go/bin/wego"\n    export WTTR_LISTEN_HOST="0.0.0.0"\n    export WTTR_LISTEN_PORT="8002"\n\n\n### Configure the HTTP-frontend service\n\nIt\'s recommended that you also configure the web server that will be used to access the service:\n\n    server {\n        listen [::]:80;\n        server_name  wttr.in *.wttr.in;\n        access_log  /var/log/nginx/wttr.in-access.log  main;\n        error_log  /var/log/nginx/wttr.in-error.log;\n\n        location / {\n            proxy_pass         http://127.0.0.1:8002;\n\n            proxy_set_header   Host             $host;\n            proxy_set_header   X-Real-IP        $remote_addr;\n            proxy_set_header   X-Forwarded-For  $remote_addr;\n\n            client_max_body_size       10m;\n            client_body_buffer_size    128k;\n\n            proxy_connect_timeout      90;\n            proxy_send_timeout         90;\n            proxy_read_timeout         90;\n\n            proxy_buffer_size          4k;\n            proxy_buffers              4 32k;\n            proxy_busy_buffers_size    64k;\n            proxy_temp_file_write_size 64k;\n\n            expires                    off;\n        }\n    }\n'