b'# Terminal progress bar for Go  \n[![Coverage Status](https://coveralls.io/repos/github/cheggaaa/pb/badge.svg)](https://coveralls.io/github/cheggaaa/pb)\n\n## Installation\n\n```\ngo get github.com/cheggaaa/pb/v3\n```   \n\nDocumentation for v1 bar available [here](README_V1.md)\n\n## Quick start   \n\n```Go\npackage main\n\nimport (\n\t"time"\n\t\n\t"github.com/cheggaaa/pb/v3"\n)\n\nfunc main() {\n\tcount := 100000\n\t// create and start new bar\n\tbar := pb.StartNew(count)\n\t\n\t// start bar from \'default\' template\n\t// bar := pb.Default.Start(count)\n\t\n\t// start bar from \'simple\' template\n\t// bar := pb.Simple.Start(count)\n\t\n\t// start bar from \'full\' template\n\t// bar := pb.Full.Start(count)\n\t\n\tfor i := 0; i < count; i++ {\n\t\tbar.Increment()\n\t\ttime.Sleep(time.Millisecond)\n\t}\n\tbar.Finish()\n}\n\n```\n\nResult will be like this:\n\n```\n> go run test.go\n37158 / 100000 [================>_______________________________] 37.16% 1m11s\n```\n\n## Settings\n\n```Go  \n// create bar\nbar := pb.New(count)\n\n// refresh info every second (default 200ms)\nbar.SetRefreshRate(time.Second)\n\n// force set io.Writer, by default it\'s os.Stderr\nbar.SetWriter(os.Stdout)\n\n// bar will format numbers as bytes (B, Kb, Mb, etc)\nbar.Set(pb.Byte, true)\n\n// set custom bar template\nbar.SetTemplateString(myTemplate)\n\n// check for error after template set\nif err = bar.Err(); err != nil {\n    return\n}\n\n// start bar\nbar.Start()\n\n``` \n\n## Progress bar for IO Operations\n```go\npackage main\n\nimport (\n\t"crypto/rand"\n\t"io"\n\t"io/ioutil"\n\n\t"github.com/cheggaaa/pb/v3"\n)\n\nfunc main() {\n\n\tvar limit int64 = 1024 * 1024 * 500\n\t// we will copy 200 Mb from /dev/rand to /dev/null\n\treader := io.LimitReader(rand.Reader, limit)\n\twriter := ioutil.Discard\n\n\t// start new bar\n\tbar := pb.Full.Start64(limit)\n\t// create proxy reader\n\tbarReader := bar.NewProxyReader(reader)\n\t// copy from proxy reader\n\tio.Copy(writer, barReader)\n\t// finish bar\n\tbar.Finish()\n}\n\n```\n\n## Custom Progress Bar templates\n\nRendering based on builtin text/template package. You can use existing pb\'s elements or create you own.\n\nAll available elements are described in element.go file.  \n\n#### All in one example:\n```go\ntmpl := `{{ red "With funcs:" }} {{ bar . "<" "-" (cycle . "\xe2\x86\x96" "\xe2\x86\x97" "\xe2\x86\x98" "\xe2\x86\x99" ) "." ">"}} {{speed . | rndcolor }} {{percent .}} {{string . "my_green_string" | green}} {{string . "my_blue_string" | blue}}`\n// start bar based on our template\nbar := pb.ProgressBarTemplate(tmpl).Start64(limit)\n// set values for string elements\nbar.Set("my_green_string", "green").\n\tSet("my_blue_string", "blue")\n```'