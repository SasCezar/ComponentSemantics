b'# Maven Git Versioning Extension\n\n\n[![Maven Central](https://img.shields.io/maven-central/v/me.qoomon/maven-git-versioning-extension.svg)](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22me.qoomon%22%20AND%20a%3A%22maven-git-versioning-extension%22) [![Build Workflow](https://github.com/qoomon/maven-git-versioning-extension/workflows/Build/badge.svg)](https://github.com/qoomon/maven-git-versioning-extension/actions) [![LGTM Grade](https://img.shields.io/lgtm/grade/java/github/qoomon/maven-git-versioning-extension)](https://lgtm.com/projects/g/qoomon/maven-git-versioning-extension)\n\n[![Changelog](https://badgen.net/badge/changelog/%E2%98%85/blue)](#changelog)\n\n**\xe2\x84\xb9 Also available as [Gradle Plugin](https://github.com/qoomon/gradle-git-versioning-plugin)**\n\n\nThis extension will virtually set project versions, based on current **Git branch** or **Git tag**.\n\n\xe2\x84\xb9 **The pom files will not be modified, versions are modified in memory only.**\n* Get rid of...\n    * editing `pom.xml`\n    * managing version by git and within files\n    * Git merge conflicts\n\n![Example](doc/MavenGitVersioningExtension.png)\n\n## Install\n\n### Add Extension\n\ncreate or update `${basedir}/.mvn/extensions.xml` file\n\n```xml\n<extensions xmlns="http://maven.apache.org/EXTENSIONS/1.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n    xsi:schemaLocation="http://maven.apache.org/EXTENSIONS/1.0.0 http://maven.apache.org/xsd/core-extensions-1.0.0.xsd">\n\n    <extension>\n        <groupId>me.qoomon</groupId>\n        <artifactId>maven-git-versioning-extension</artifactId>\n        <version>LATEST</version>\n    </extension>\n\n</extensions>\n```\n\n\xe2\x84\xb9 Consider [CI/CD](#cicd) section when running this extension in a CI/CD environment \n\n## Configure Extension\n\nYou can configure the final version format for specific branches and tags separately.\n\nCreate `${basedir}/.mvn/maven-git-versioning-extension.xml`.\n\n**Example:** `maven-git-versioning-extension.xml`\n\n```xml\n<gitVersioning>\n    <branch>\n        <pattern>master</pattern>\n        <versionFormat>${version}</versionFormat>\n    </branch>\n    <branch>\n         <pattern><![CDATA[feature/(?<feature>.+)]]></pattern>\n         <versionFormat>${feature}-SNAPSHOT</versionFormat>\n     </branch>\n    <tag>\n        <pattern><![CDATA[v(?<tagVersion>[0-9].*)]]></pattern>\n        <versionFormat>${tagVersion}</versionFormat>\n    </tag>\n    <commit>\n        <versionFormat>${commit.short}</versionFormat>\n    </commit>\n</gitVersioning>\n```\n\n- *optional* `<updatePom>` global enable(`true`)/disable(`false`) version update in original pom file.\n\n- *optional* `<preferTags>` global enable(`true`)/disable(`false`) prefer tag rules over branch rules if both match.\n\n- `<branch>` specific version format definition.\n    - `<pattern>` An arbitrary regex to match branch names (has to be a **full match pattern** e.g. `feature/.+` )\n    - `<versionFormat>` An arbitrary string, see [Version Format & Placeholders](#version-format--placeholders)\n    - `<property>` A property definition to update the value of a property\n        - `<pattern>` An arbitrary regex to match property names\n        - `<value>` The definition of the new property value\n            - *optional* `<pattern>` An arbitrary regex to match property values\n            - `<format>` The new value format of the property, see [Version Format & Placeholders](#version-format--placeholders)\n    - *optional* `<updatePom>` Enable(`true`) or disable(`false`) version update in original pom fill (will override global `<updatePom>` value)\n    - \xe2\x9a\xa0 **considered if...**\n        * HEAD attached to a branch `git checkout <BRANCH>`<br>\n        * Or branch name is provided by environment variable or command line parameter\n\n- `<tag>` specific version format definition.\n    - `<pattern>` An arbitrary regex to match tag names (has to be a **full match pattern** e.g. `v[0-9].*` )\n    - `<versionFormat>` An arbitrary string, see [Version Format & Placeholders](#version-format--placeholders)\n    - `<property>` A property definition to update the value of a property\n        - `<pattern>` An arbitrary regex to match property names\n        - `<value>` The definition of the new property value\n            - *optional* `<pattern>` An arbitrary regex to match property values\n            - `<format>` The new value format of the property, see [Version Format & Placeholders](#version-format--placeholders)\n    - *optional* `<updatePom>` Enable(`true`) or disable(`false`) version update in original pom fill (will override global `<updatePom>` value)\n    - \xe2\x9a\xa0 **considered if...**\n        * HEAD is detached `git checkout <TAG>`<br>\n        * Or tag name is provided by environment variable or command line parameter\n  \n- `<commit>` specific version format definition.\n    - `<versionFormat>` An arbitrary string, see [Version Format & Placeholders](#version-format--placeholders)\n    - `<property>` A property definition to update the value of a property\n        - `<pattern>` An arbitrary regex to match property names\n        - `<value>` The definition of the new property value\n            - *optional* `<pattern>` An arbitrary regex to match property values\n            - `<format>` The new value format of the property, see [Version Format & Placeholders](#version-format--placeholders)\n    - \xe2\x9a\xa0 **considered if...**\n        * HEAD is detached `git checkout <COMMIT>` and no matching version tag is pointing to HEAD<br>\n\n#### Version Format & Placeholders\n\n\xe2\x84\xb9 `/` characters within final version will be replaced by `-`**\n\n- `${ref}`\n    - current ref name (branch name, tag name or commit hash)\n\n- `${branch}` (only available within branch configuration)\n    - The branch name of `HEAD`\n    - e.g. \'master\', \'feature/next-big-thing\', ...\n\n- `${tag}` (only available within tag configuration)\n    - The tag name that points at `HEAD`, if multiple tags point at `HEAD` latest version is selected\n    - e.g. \'version/1.0.1\', \'v1.2.3\', ...\n\n- `${commit}`\n    - The `HEAD` commit hash\n    - e.g. \'0fc20459a8eceb2c4abb9bf0af45a6e8af17b94b\'\n\n- `${commit.short}`\n    - The short `HEAD` commit hash (7 characters)\n    - e.g. \'0fc2045\'\n\n- `${commit.timestamp}`\n    - The `HEAD` commit timestamp (epoch seconds)\n    - e.g. \'1560694278\'\n    \n- `${commit.timestamp.datetime}`\n    - The `HEAD` commit timestamp formatted as `yyyyMMdd.HHmmss`\n    - e.g. \'20190616.161442\'\n\n- `Pattern Groups`\n    - Contents of group in the regex pattern can be addressed by `group name` or `group index` e.g.\n    - Named Group Example\n        ```groovy\n        pattern = \'feature/(?<feature>.+)\'\n        versionFormat = \'${feature}-SNAPSHOT\'    \n        ```\n    - Group Index Example\n        ```groovy\n        pattern = \'v([0-9].*)\'\n        versionFormat = \'${1}\'\n        ```\n        \n- `${version}`\n    - `version` set in `pom.xml`\n    - e.g. \'1.0.0-SNAPSHOT\'\n    \n- `${version.release}`\n    - `version` set in `pom.xml` without `-SNAPSHOT` postfix\n    - e.g. \'1.0.0\'\n\n- `${property.name}`\n    - name of matching property\n    - Only available within property format.\n    \n- `${property.value}`\n    - value of matching property\n    - Only available within property format.\n      \n### Parameters & Environment Variables\n\n- Disable Extension\n    - **Environment Variables**\n        - `export VERSIONING_DISABLE=true`\n    - **Command Line Parameters**\n        - `maven ... -Dversioning.disable=true`\n\n- Provide **branch** or **tag** name\n    - **Environment Variables**\n        - `export VERSIONING_GIT_BRANCH=$PROVIDED_BRANCH_NAME`\n        - `export VERSIONING_GIT_TAG=$PROVIDED_TAG_NAME`\n    - **Command Line Parameters**\n        - `maven ... -Dgit.branch=$PROVIDED_BRANCH_NAME`\n        - `maven ... -Dgit.tag=$PROVIDED_TAG_NAME`\n        \n  \xe2\x84\xb9 Especially useful for **CI builds** see [Miscellaneous Hints](#miscellaneous-hints)\n\n- Update `pom.xml`\n    - **Environment Variables**\n        - `export VERSIONING_UPDATE_POM=true`\n    - **Command Line Parameters**\n        - `maven ... -Dversioning.updatePom=true`\n\n- **Prefer Tags** for Versioning instead of Branches\n    - **Environment Variables**\n        - `export VERSIONING_PREFER_TAGS=true`\n    - **Command Line Parameters**\n        - `maven ... -Dversioning.preferTags=true`\n\n## Provided Project Properties\n\n- `git.commit` e.g. \'0fc20459a8eceb2c4abb9bf0af45a6e8af17b94b\'\n- `git.ref` value of branch of tag name, always set\n  - `git.branch` e.g. \'feature/next-big-thing\', only set for branch versioning\n  - `git.tag` e.g. \'v1.2.3\', only set for tag versioning\n- `git.commit.timestamp` e.g. \'1560694278\'\n- `git.commit.timestamp.datetime` e.g. \'2019-11-16T14:37:10Z\'\n\n## Miscellaneous Hints\n\n### Commandline To Print Project Version\n`mvn --non-recursive exec:exec -Dexec.executable=\'echo\' -Dexec.args=\'${project.version}\' -q`\n\n### CI/CD\nMost CI/CD systems do checkouts in a detached HEAD state so no branch information is available, however they provide environment variables with this information. You can provide those, by using [Parameters & Environment Variables](#parameters--environment-variables). Below you\'ll find some setup example for common CI/CD systems.\n\n#### GitLab CI Setup\nexecute this snippet before running your `maven` command\n```shell\nbefore_script:\n  - if [ -n "$CI_COMMIT_TAG" ]; then\n       export VERSIONING_GIT_TAG=$CI_COMMIT_TAG;\n    else\n       export VERSIONING_GIT_BRANCH=$CI_COMMIT_REF_NAME;\n    fi\n```\n\n#### Jenkins Setup\nexecute this snippet before running your `maven` command\n```shell\nif [[ "$GIT_BRANCH" = origin/tags/* ]]; then\n    export VERSIONING_GIT_TAG=${GIT_BRANCH#origin/tags/};\nelse \n    export VERSIONING_GIT_BRANCH=${GIT_BRANCH#origin/};\nfi\n```\n\n## Build\n```shell\n  - mvn install\n  # run integration tests after install, \n  # integration tests will run with LATEST version of extension installed\n  - mvn failsafe:integration-test\n```\n\n# Changelog\n## 4.7.0\n* New Provided properties, see [Provided Project Properties](#provided-roject-roperties)\n  * `git.commit.timestamp`\n  * `git.commit.timestamp.datetime`\n\n## 4.5.0\n* Add parameters and environment variable to disable extension. see [Parameters & Environment Variables](#parameters--environment-variables)\n\n## 4.1.0\n* Add config option(`<update>`) to update version in original pom file. see [Configure Extension](#configure-extension)\n\n## 4.0.0\n* Major Refactoring, Simplification\n* Also available as [Gradle Plugin](https://github.com/qoomon/gradle-git-versioning-plugin) \n* **New Provided Project Properties**\n  * `git.ref` value of branch of tag name, always set\n\n### Breaking Changes\n* **Restructured XML Config**\n  * renamed root tag `<configuration>` -> `<gitVersioning>`\n  * removed nested structure\n  * see [Configure Extension](#configure-extension)\n* **Renamed Environment Variables**\n  * `MAVEN_PROJECT_BRANCH` ->  `VERSIONING_GIT_BRANCH`\n  * `MAVEN_PROJECT_TAG` -> `VERSIONING_GIT_TAG`\n* **Renamed Maven Parameters**\n  * `-Dproject.branch` -> `-Dgit.branch`\n  * `-Dproject.tag` -> `-Dgit.tag`\n* **Removed Mave Parameters**\n  * `-DgitVersioning` - disable the extension by a parameter is no longer supported\n* **Renamed Provided Project Properties**\n  * `project.branch` -> `git.branch`\n  * `project.tag` -> `git.tag`\n  * `project.commit` -> `git.commit`\n\n'