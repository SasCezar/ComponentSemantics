b'# FakeTime for Java\n> FakeTime uses a native Java agent to replace `System.currentTimeMillis()` implementation with the one you can control using system properties.\n\n> Inspired by [arvindsv/faketime](https://github.com/arvindsv/faketime).\n\n[![Build Status](https://travis-ci.org/faketime-java/faketime.svg?branch=master)](https://travis-ci.org/faketime-java/faketime)\n\n```java\npublic class ExamRegistrationServiceTest implements FakeTimeMixin {\n  \n  @Autowired\n  ExamRegistrationService examRegistrationService;\n  \n  @Test\n  public void registrationExpiresAfterGivenPeriod() {\n    ExamRegistration registration = examRegistrationService.openRegistrationValidFor(Duration.ofDays(5));\n    \n    offsetRealTimeByDays(5);\n    \n    assertThat(registration.hasExpired()).isTrue();\n  }\n  \n  @Test\n  public void registrationIsValidDuringGivenPeriod() {\n    ExamRegistration registration = examRegistrationService.openRegistrationValidFor(Duration.ofDays(5));\n      \n    offsetRealTimeBy(Duration.ofDays(5).minusMinutes(1));\n      \n    assertThat(registration.hasExpired()).isFalse();\n  }\n  \n  @After\n  public void restoreRealTimeAfterTest() {\n    restoreRealTime();\n  }\n}\n```\n\n## Manual setup\nStart faking time in 4 easy steps:\n1. Download the `faketime-agent.jar` for your operating system from the [Maven Central](https://mvnrepository.com/artifact/io.github.faketime-java/faketime-agent) repository.\n```xml\n<!-- Windows 32bit -->\n<dependency>\n  <groupId>io.github.faketime-java</groupId>\n  <artifactId>faketime-agent</artifactId>\n  <version>0.8.0</version>\n  <classifier>windows32</classifier>\n</dependency>\n\n<!-- Windows 64bit -->\n<dependency>\n  <groupId>io.github.faketime-java</groupId>\n  <artifactId>faketime-agent</artifactId>\n  <version>0.8.0</version>\n  <classifier>windows64</classifier>\n</dependency>\n\n<!-- macOS 32bit -->\n<dependency>\n  <groupId>io.github.faketime-java</groupId>\n  <artifactId>faketime-agent</artifactId>\n  <version>0.8.0</version>\n  <classifier>mac32</classifier>\n</dependency>\n\n<!-- macOS 64bit -->\n<dependency>\n  <groupId>io.github.faketime-java</groupId>\n  <artifactId>faketime-agent</artifactId>\n  <version>0.8.0</version>\n  <classifier>mac64</classifier>\n</dependency>\n\n<!-- Linux 32bit -->\n<dependency>\n  <groupId>io.github.faketime-java</groupId>\n  <artifactId>faketime-agent</artifactId>\n  <version>0.8.0</version>\n  <classifier>linux32</classifier>\n</dependency>\n\n<!-- Linux 64bit -->\n<dependency>\n  <groupId>io.github.faketime-java</groupId>\n  <artifactId>faketime-agent</artifactId>\n  <version>0.8.0</version>\n  <classifier>linux64</classifier>\n</dependency>\n```\n2. Unpack the `jar` to get the agent, which is `faketime.dll` on Windows and `libfaketime` on other systems.\n3. Attach the agent to your Java program with following JVM arguments.\n```bash\n-agentpath:path/to/unpacked/faketime/binary\n-XX:+UnlockDiagnosticVMOptions\n-XX:DisableIntrinsic=_currentTimeMillis\n-XX:CompileCommand=quiet\n-XX:CompileCommand=exclude,java/lang/System.currentTimeMillis\n-XX:CompileCommand=exclude,jdk/internal/misc/VM.getNanoTimeAdjustment\n```\n4. Use system properties to manipulate `System.currentTimeMillis()`.\n```java\nSystem.out.println(System.currentTimeMillis()); // 1234567890\nSystem.setProperty("faketime.offset.ms", "-7890");\nSystem.out.println(System.currentTimeMillis()); // 1234560000\n\nSystem.setProperty("faketime.absolute.ms", "12345");\nSystem.out.println(System.currentTimeMillis()); // 12345\n```\n## Java 8 API\n```xml\n<dependency>\n  <groupId>io.github.faketime-java</groupId>\n  <artifactId>faketime-api</artifactId>\n  <version>0.8.0</version>\n  <scope>test</scope>\n</dependency>\n```\nIn case you get tired of converting everything to milliseconds there is a Java Time based API.\n```java\nFakeTime.stopAt(LocalDateTime.of(2000, 11, 10, 9, 8, 7));\nFakeTime.stopAt(2000, 11, 10, ZoneOffset.UTC);\nFakeTime.offsetRealByMinutes(100);\nFakeTime.offsetRealBy(Duration.ofHours(20));\nFakeTime.restoreReal();\n```\nAnd in case you get annoyed by writing `FakeTime` all the time there is a handy mixin.\n```java\npublic class MyTest implements FakeTimeMixin {\n  \n  @Test\n  public void someTimeTest() {\n    stopTimeAt(LocalDateTime.of(2000, 11, 10, 9, 8, 7));\n    stopTimeAt(2000, 11, 10, ZoneOffset.UTC);\n    offsetRealTimeByMinutes(100);\n    offsetRealTimeBy(Duration.ofHours(20));\n  }\n  \n  @After\n  public void restoreRealTimeAfterTest() {\n    restoreRealTime();\n  }\n}\n```\n## JUnit rule\n```xml\n<dependency>\n  <groupId>io.github.faketime-java</groupId>\n  <artifactId>faketime-junit</artifactId>\n  <version>0.8.0</version>\n  <scope>test</scope>\n</dependency>\n```\nThis rule calls `FakeTime.restoreReal()` after every test, so you don\'t have to.\n\n_Note: when using `faketime-junit` you don\'t need to add `faketime-api` as a `test` dependency_\n```java\npublic class MyTest implements FakeTimeMixin {\n  \n  @Rule\n  public FakeTimeRule fakeTimeRule = new FakeTimeRule();\n  \n  @Test\n  public void someTimeTest() {\n    stopTimeAt(2000, 11, 10);\n    \n    assertThat(LocalDate.now()).isEqualTo(LocalDate.of(2000, 11, 10));\n    \n    // next test will start with real time\n  }\n}\n```\n## Maven plugin\nFor further convenience there is a Maven plugin that downloads and unpacks the correct agent for your operating system.\nIt then sets a property that you can use in `surefire` or `failsafe` plugins to attach the agent.\n\n> Full example [here](https://github.com/faketime-java/faketime/blob/master/e2e-tests/pom.xml)\n```xml\n<build>\n  <plugins>\n    <plugin>\n      <groupId>org.apache.maven.plugins</groupId>\n      <artifactId>maven-surefire-plugin</artifactId>\n      <version>2.22.1</version>\n      <configuration>\n        <argLine>${faketime.argLine}</argLine>\n      </configuration>\n    </plugin>\n    \n    <plugin>\n      <groupId>io.github.faketime-java</groupId>\n      <artifactId>faketime-maven-plugin</artifactId>\n      <version>0.8.0</version>\n      <executions>\n        <execution>\n          <goals>\n            <goal>prepare</goal>\n          </goals>\n        </execution>\n      </executions>\n    </plugin>\n  </plugins>\n</build>\n```\n## Maven + IntelliJ\nIntelliJ has a cool feature that reads `argLine` from `pom.xml` and adds all arguments to the IDE test runner.\nThe only thing you need to do is to replace `${faketime.argLine}` with literal arguments, since IntelliJ is not aware of `${faketime.argLine}`.\n\n_Note: before running tests from IntelliJ make sure `faketime-maven-plugin` has downloaded the agent, otherwise tests won\'t start_\n\n> Full example [here](https://github.com/faketime-java/faketime/blob/master/e2e-tests/pom.xml)\n```xml\n<properties>\n  <faketime.binary>libfaketime</faketime.binary>\n</properties>\n\n<profiles>\n  <profile>\n    <id>faketimeBinary</id>\n    <activation>\n      <os>\n        <family>windows</family>\n      </os>\n    </activation>\n    <properties>\n      <faketime.binary>faketime.dll</faketime.binary>\n    </properties>\n  </profile>\n</profiles>\n\n<build>\n  <plugins>\n    <plugin>\n      <groupId>org.apache.maven.plugins</groupId>\n      <artifactId>maven-failsafe-plugin</artifactId>\n      <version>2.22.1</version>\n      <configuration>\n        <argLine>\n          -agentpath:${project.build.directory}/${faketime.binary}\n          -XX:+UnlockDiagnosticVMOptions\n          -XX:DisableIntrinsic=_currentTimeMillis\n          -XX:CompileCommand=quiet\n          -XX:CompileCommand=exclude,java/lang/System.currentTimeMillis\n          -XX:CompileCommand=exclude,jdk/internal/misc/VM.getNanoTimeAdjustment\n        </argLine>\n      </configuration>\n    </plugin>\n    \n    <plugin>\n      <groupId>io.github.faketime-java</groupId>\n      <artifactId>faketime-maven-plugin</artifactId>\n      <version>0.8.0</version>\n      <executions>\n        <execution>\n          <goals>\n            <goal>prepare</goal>\n          </goals>\n        </execution>\n      </executions>\n    </plugin>\n  </plugins>\n</build>\n```\n## Maven + Eclipse\n_Note: before running tests from Eclipse make sure `faketime-maven-plugin` has downloaded the agent, otherwise tests won\'t start_\n\n`Preferences > Java > Installed JREs > Select > Edit > Default VM arguments`\n```bash\n# if you\'re on Windows\n-agentpath:target/faketime.dll\n-XX:+UnlockDiagnosticVMOptions\n-XX:DisableIntrinsic=_currentTimeMillis\n-XX:CompileCommand=quiet\n-XX:CompileCommand=exclude,java/lang/System.currentTimeMillis\n-XX:CompileCommand=exclude,jdk/internal/misc/VM.getNanoTimeAdjustment\n\n# if you\'re on macOS/Linux\n-agentpath:target/libfaketime\n-XX:+UnlockDiagnosticVMOptions\n-XX:DisableIntrinsic=_currentTimeMillis\n-XX:CompileCommand=quiet\n-XX:CompileCommand=exclude,java/lang/System.currentTimeMillis\n-XX:CompileCommand=exclude,jdk/internal/misc/VM.getNanoTimeAdjustment\n```\n## Gradle\nThere are no instructions for Gradle yet, but if you\'ll figure this out, then don\'t be shy to make a pull request.\nBasically, you need to download and unpack the correct agent artifact and then add some JVM arguments to the test runner.\n'