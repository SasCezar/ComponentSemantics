b'# MicroModule\nRebuild multiple complete module structures within the module. Each complete module structure we called it MicroModule, Each MicroModule has its own `build.gradle` file where you can declare MicroModule dependencies. In addition, you can decide which MicroModules participate in the compilation of the module.\n\n<img src=\'https://github.com/EastWoodYang/MicroModule/blob/master/picture/1.png\'/>\n\n## Usage\n### Add MicroModule plugin **classpath** in root project build.gradle:\n\n    buildscript {\n        dependencies {\n\t        ...\n            classpath \'com.eastwood.tools.plugins:micro-module:1.4.0\'\n        }\n    }\n\n### Apply MicroModule plugin in application or library module build.gradle and add configuration options\xef\xbc\x9a\n\n    apply plugin: \'micro-module\'\n    apply plugin: \'com.android.library\' // or \'com.android.application\'\n\n    android {}\n\n\tmicroModule {\n\t    ...\n\t}\n\n\tdependencies {}\n\nApply MicroModule plugin **must before** apply android plugin, and `microModule {}` should between `android {}` and `dependencies {}`.\n\nThe MicroModule plugin defines the following methods in `microModule {}`:\n* **`codeCheckEnabled`**--`boolean`\n\n    Prevent two non-dependent MicroModules from generating references. Use `codeCheckEnabled` to declared code check enable state, \'true\' as default.\n\n* **`includeMain`**--`String`\n\n    Declare main MicroModule, affects the package name of the generated R class, and the AndroidManifest.xml merge. if not declared, will be declared as default if file with name `main` exist.\n\n* **`include`**--`String[]`\n\n    Declare other MicroModules.\n\n* **`export`**--`String[]`\n\n    Use `export` to decide which MicroModules participate in the compilation of the module. if not declared, all MicroModules which decleard by `include`, will participate in the compilation of the module.\n\n\n*Example 1. build.gradle file of library module in the dome.*\n\n\tmicroModule {\n\t    codeCheckEnabled true\n\t    include \':p_base\'\n\t    include \':p_common\'\n\t    include \':p_utils\'\n\t    export \':main\'\n\t}\n\n### Declare MicroModule dependencies in MicroModule build.gradle:\nThe MicroModule plugin provides a simple method for declaring dependencies on other MicroModules in `dependencies {}`.\n\n\tdependencies {\n\t    implementation microModule(\':p_common\')\n\t}\n\n\nThe method **`microModule`** has a only `string` parameter, the name of the MicroModule.\n\nYou can also declare dependencies on the other third party libraries in `dependencies {}`.\n\n*Example 2. build.gradle file of main MicroModule in the demo.*\n\n\tdependencies {\n\t    implementation fileTree(dir: \'main/libs\', include: [\'*.jar\'])\n\t    implementation \'com.android.support:appcompat-v7:27.1.1\'\n\t    implementation \'com.android.support.constraint:constraint-layout:1.1.0\'\n\n\t    implementation microModule(\':p_common\')\n\t}\n\n\n## MicroModule Android Studio Plugin\nProvides an action which allow you quickly create MicroModule or convert module to MicroModule.\n* Right click at module dir, in [New] group, you will find "MicroModule" action.\n* Right click at module dir, in [Refactor] group, you will find "Convert to MicroModule" action.\n\n<img src=\'https://github.com/EastWoodYang/MicroModule/blob/master/picture/3-1.png\'/>\n\n<img src=\'https://github.com/EastWoodYang/MicroModule/blob/master/picture/3-2.png\'/>\n\n**Install Step**:\n1. open [File] -> [Settings...] -> [plugins] -> [Browse repositories...]\n2. and search name **MicroModule**\n\n<img src=\'https://github.com/EastWoodYang/MicroModule/blob/master/picture/4.png\'/>\n\n**Plugin detail**:\n\n[https://plugins.jetbrains.com/plugin/10785-micromodule](https://plugins.jetbrains.com/plugin/10785-micromodule)\n\n## License\n\n```\n   Copyright 2018 EastWood Yang\n\n   Licensed under the Apache License, Version 2.0 (the "License");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an "AS IS" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```\n'