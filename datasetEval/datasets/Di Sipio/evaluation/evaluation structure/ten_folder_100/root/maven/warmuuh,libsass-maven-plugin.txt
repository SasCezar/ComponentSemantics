b"Libsass Maven Plugin [![Build Status](https://travis-ci.org/warmuuh/libsass-maven-plugin.svg?branch=master)](https://travis-ci.org/warmuuh/libsass-maven-plugin) [![Maven Central](https://img.shields.io/maven-central/v/com.github.warmuuh/libsass-maven-plugin.svg)](https://mvnrepository.com/artifact/com.github.warmuuh/libsass-maven-plugin)\r\n==========\r\n\r\nLibsass Maven Plugin uses [libsass](http://github.com/hcatlin/libsass) to compile sass files.\r\nUses [jsass](https://github.com/bit3/jsass) to interface with C-library.\r\n\r\nChangelog:\r\n* 0.2.10 - upgraded libsass to 3.5.3\r\n* 0.2.9 - upgraded libsass to 3.4.7\r\n  * refreshed output files for eclipse\r\n  * enhanced error output with failing files - thanks to @VsevolodGolovanov\r\n* 0.2.8 - upgraded libsass to 3.4.4\r\n  * used compilation classpath for including webjars\r\n  * fixed issue with os-dependent path-separator (using ';' for every OS)\r\n  * plugin now aware of incremental builds\r\n* 0.2.7 - upgraded libsass to 3.4.3\r\n  * added webjar support - thanks to @flipp5b \r\n* 0.2.6 - upgraded libsass to 3.4.0\r\n  * added libsass:watch goal to watch and recompile include directory - *thansk to @lorenzodee*\r\n* 0.2.5 - added copySourceToOutput, changed default outputstyle to 'nested', upgraded libsass to 3.3.6\r\n* 0.2.4 - fixed bug with empty spaces in path\r\n* 0.2.3 - upgrade to libsass 3.3.4\r\n* 0.2.2 - minor bugfixes, readded m2e lifecycle mapping \r\n* 0.2.1 - updated libsass to 3.3.3\r\n* 0.2.0 - switched native bindings to bit3 bindings (using libsass 3.3.2), **java8-only**\r\n* 0.1.7 - UTF8 encoding issue, used wrong file extension for sass style\r\n* 0.1.6 - added m2e eclipse intergation, thanks @dashorst\r\n* 0.1.5 - readded macOs binaries, thanks @tommix1987\r\n* 0.1.4 - added contained libsass-version to artifact-version (e.g. `0.1.4-libsass_3.2.4-SNAPSHOT`). \r\n  * switched to new libsass API (sass_context.h)\r\n  * removed image_path option (because of [#420](https://github.com/sass/libsass/issues/420))\r\n  * added failOnError flag to skip errors and continue the build, if wanted\r\n* 0.1.3 - fixed #10 - multi-module projects\r\n* 0.1.2 - added PR #4, updated to libsass version 3.1 for windows, linux, macos - *thanks to @npiguet, @ogolberg*\r\n* 0.1.1 - scss files can now be placed in inputpath/ directly\r\n* 0.1.0 - changed artefact group to `com.github.warmuuh`\r\n\r\nInstallation\r\n-----\r\nlibsass-maven-plugin is available on central-repository since version 0.1.2\r\n\r\nUsage\r\n-----\r\nConfigure plugin in your pom.xml:\r\n\r\n```\r\n<build>\r\n   <plugins>\r\n      <plugin>\r\n         <groupId>com.github.warmuuh</groupId>\r\n         <artifactId>libsass-maven-plugin</artifactId>\r\n         <version><VERSION>-libsass_3.4.4</version>\r\n         <executions>\r\n            <execution>\r\n               <phase>generate-resources</phase>\r\n               <goals>\r\n                  <goal>compile</goal>\r\n               </goals>\r\n            </execution>\r\n         </executions>\r\n         <configuration>\r\n            <inputPath>${basedir}/src/main/sass/</inputPath>\r\n            <outputPath>${basedir}/target/</outputPath>\r\n            <includePath>${basedir}/src/main/sass/plugins/</includePath>\r\n         </configuration>\r\n      </plugin>\r\n   </plugins>\r\n</build>\r\n```\r\n\r\nAlternatively, you can use the `watch` goal to have the plugin watch your files and recompile on change:\r\n```\r\nmvn com.github.warmuuh:libsass-maven-plugin:<version>-libsass_3.4.4:watch\r\n```\r\n\r\nConfiguration Elements\r\n----------------------\r\n\r\n<table>\r\n  <thead>\r\n    <tr>\r\n       <td>Element</td>\r\n       <td>Default value</td>\r\n       <td>Documentation</td>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>outputPath</td>\r\n      <td><code>${project.build.directory}</code></td>\r\n      <td>The directory in which the compiled CSS files will be placed.</td>\r\n    </tr>\r\n    <tr>\r\n      <td>inputPath</td>\r\n      <td><code>src/main/sass</code></td>\r\n      <td>\r\n        The directory from which the source <code>.scss</code> files will be read. This directory will be\r\n        traversed recursively, and all <code>.scss</code> files found in this directory or subdirectories\r\n        will be compiled.\r\n      </td>\r\n    </tr>\r\n    <tr>\r\n      <td>includePath</td>\r\n      <td><code>null</code></td>\r\n      <td>Additional include path, ';'-separated</td>\r\n    </tr>\r\n    <tr>\r\n      <td>outputStyle</td>\r\n      <td><code>nested</code></td>\r\n      <td>\r\n         Output style for the generated css code. One of <code>nested</code>, <code>expanded</code>,\r\n         <code>compact</code>, <code>compressed</code>. Note that as of libsass 3.1, <code>expanded</code>\r\n         and <code>compact</code> result in the same output as <code>nested</code>.\r\n      </td>\r\n    </tr>\r\n    <tr>\r\n      <td>generateSourceComments</td>\r\n      <td><code>false</code></td>\r\n      <td>\r\n         Emit comments in the compiled CSS indicating the corresponding source line. The default\r\n         value is <code>false</code>.\r\n      </td>\r\n    </tr>\r\n    <tr>\r\n      <td>generateSourceMap</td>\r\n      <td><code>true</code></td>\r\n      <td>\r\n        Generate source map files. The generated source map files will be placed in the directory\r\n        specified by <code>sourceMapOutputPath</code>.\r\n      </td>\r\n    </tr>\r\n    <tr>\r\n      <td>sourceMapOutputPath</td>\r\n      <td><code>${project.build.directory}</code></td>\r\n      <td>\r\n        The directory in which the source map files that correspond to the compiled CSS will be placed\r\n      </td>\r\n    </tr>\r\n    <tr>\r\n      <td>omitSourceMapingURL</td>\r\n      <td><code>false</code></td>\r\n      <td>\r\n        Prevents the generation of the <code>sourceMappingURL</code> special comment as the last\r\n        line of the compiled CSS.\r\n      </td>\r\n    </tr>\r\n    <tr>\r\n      <td>embedSourceMapInCSS</td>\r\n      <td><code>false</code></td>\r\n      <td>\r\n        Embeds the whole source map data directly into the compiled CSS file by transforming\r\n        <code>sourceMappingURL</code> into a data URI.\r\n      </td>\r\n    </tr>\r\n    <tr>\r\n      <td>embedSourceContentsInSourceMap</td>\r\n      <td><code>false</code></td>\r\n      <td>\r\n       Embeds the contents of the source <code>.scss</code> files in the source map file instead of the\r\n       paths to those files\r\n      </td>\r\n    </tr>\r\n    <tr>\r\n      <td>inputSyntax</td>\r\n      <td><code>scss</code></td>\r\n      <td>\r\n       Switches the input syntax used by the files to either <code>sass</code> or <code>scss</code>.\r\n      </td>\r\n    </tr>\r\n    <tr>\r\n      <td>precision</td>\r\n      <td><code>5</code></td>\r\n      <td>\r\n       Precision for fractional numbers\r\n      </td>\r\n    </tr>\r\n    <tr>\r\n      <td>enableClasspathAwareImporter</td>\r\n      <td><code>false</code></td>\r\n      <td>\r\n       Enables classpath aware importer which make possible to <code>@import</code> files from classpath and WebJars.\r\n       For classpath resources use <code>@import 'path/to/resource/in/classpath';</code>.\r\n       For WebJar resources a shortcut can be used: <code>@import '{package}/{path}';</code> imports resource\r\n       <code>META-INF/resources/webjars/{package}/{version}/{path}</code>.\r\n      </td>\r\n    </tr>\r\n     <tr>\r\n      <td>failOnError</td>\r\n      <td><code>true</code></td>\r\n      <td>\r\n       should fail the build in case of compilation errors.\r\n      </td>\r\n    </tr>\r\n    <tr>\r\n      <td>copySourceToOutput</td>\r\n      <td><code>false</code></td>\r\n      <td>\r\n       copies all files from source directory to output directory\r\n      </td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n\r\n\r\nLicense\r\n-------\r\n\r\nMIT License.\r\n"