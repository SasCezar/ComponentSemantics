b'# Dockerfile Maven\n\n[![Build Status](https://travis-ci.com/spotify/dockerfile-maven.svg?branch=master)](https://travis-ci.com/spotify/dockerfile-maven)\n[![Maven Central](https://img.shields.io/maven-central/v/com.spotify/dockerfile-maven.svg)](https://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.spotify%22%20dockerfile-maven)\n[![License](https://img.shields.io/github/license/spotify/dockerfile-maven.svg)](LICENSE)\n\n## Status: mature\n\n**At this point, we\'re not developing or accepting new features or even fixing non-critical bugs.**\n\nThis Maven plugin integrates Maven with Docker.\n\nThe design goals are:\n\n  - Don\'t do anything fancy.  `Dockerfile`s are how you build\n    Docker projects; that\'s what this plugin uses.  They are\n    mandatory.\n  - Make the Docker build process integrate with the Maven build\n    process.  If you bind the default phases, when you type `mvn\n    package`, you get a Docker image.  When you type `mvn deploy`,\n    your image gets pushed.\n  - Make the goals remember what you are doing.  You can type `mvn\n    dockerfile:build` and later `mvn dockerfile:tag` and later `mvn\n    dockerfile:push` without problems.  This also eliminates the need\n    for something like `mvn dockerfile:build -DalsoPush`; instead you\n    can just say `mvn dockerfile:build dockerfile:push`.\n  - Integrate with the Maven build reactor.  You can depend on the\n    Docker image of one project in another project, and Maven will\n    build the projects in the correct order.  This is useful when you\n    want to run integration tests involving multiple services.\n\nThis project adheres to the [Open Code of Conduct][code-of-conduct].\nBy participating, you are expected to honor this code.\n\nSee the [changelog for a list of releases][changelog]\n\n[code-of-conduct]: https://github.com/spotify/code-of-conduct/blob/master/code-of-conduct.md\n[changelog]: CHANGELOG.md\n\n## Set-up\n\nThis plugin requires Java 7 or later and Apache Maven 3 or later (dockerfile-maven-plugin <=1.4.6 needs\nMaven >= 3, and for other cases, Maven >= 3.5.2). To run the integration tests or to use the plugin in practice, a working\nDocker set-up is needed.\n\n## Example\n\nFor more examples, see the [integration test](./plugin/src/it) directory.\n\nIn particular, the [advanced](./plugin/src/it/advanced) test showcases a\nfull service consisting of two micro-services that are integration\ntested using `helios-testing`.\n\nThis configures the actual plugin to build your image with `mvn\npackage` and push it with `mvn deploy`.  Of course you can also say\n`mvn dockerfile:build` explicitly.\n\n```xml\n<plugin>\n  <groupId>com.spotify</groupId>\n  <artifactId>dockerfile-maven-plugin</artifactId>\n  <version>${dockerfile-maven-version}</version>\n  <executions>\n    <execution>\n      <id>default</id>\n      <goals>\n        <goal>build</goal>\n        <goal>push</goal>\n      </goals>\n    </execution>\n  </executions>\n  <configuration>\n    <repository>spotify/foobar</repository>\n    <tag>${project.version}</tag>\n    <buildArgs>\n      <JAR_FILE>${project.build.finalName}.jar</JAR_FILE>\n    </buildArgs>\n  </configuration>\n</plugin>\n```\n\nA corresponding `Dockerfile` could look like:\n\n```\nFROM openjdk:8-jre\nMAINTAINER David Flemstr\xc3\xb6m <dflemstr@spotify.com>\n\nENTRYPOINT ["/usr/bin/java", "-jar", "/usr/share/myservice/myservice.jar"]\n\n# Add Maven dependencies (not shaded into the artifact; Docker-cached)\nADD target/lib           /usr/share/myservice/lib\n# Add the service itself\nARG JAR_FILE\nADD target/${JAR_FILE} /usr/share/myservice/myservice.jar\n```\n\n**Important note**\n\nThe most Maven-ish way to reference the build artifact would probably\nbe to use the `project.build.directory` variable for referencing the\n\'target\'-directory. However, this results in an absolute path, which\nis not supported by the ADD command in the Dockerfile. Any such source\nmust be inside the *context* of the Docker build and therefor must be\nreferenced by a *relative path*. See https://github.com/spotify/dockerfile-maven/issues/101\n\n*Do **not** use `${project.build.directory}` as a way to reference your\nbuild directory.*\n\n## What does it give me?\n\nThere are many advantages to using this plugin for your builds.\n\n### Faster build times\n\nThis plugin lets you leverage Docker cache more consistently, vastly\nspeeding up your builds by letting you cache Maven dependencies in\nyour image.  It also encourages avoiding the `maven-shade-plugin`,\nwhich also greatly speeds up builds.\n\n### Consistent build lifecycle\n\nYou no longer have to say something like:\n\n    mvn package\n    mvn dockerfile:build\n    mvn verify\n    mvn dockerfile:push\n    mvn deploy\n\nInstead, it is simply enough to say:\n\n    mvn deploy\n\nWith the basic configuration, this will make sure that the image is\nbuilt and pushed at the correct times.\n\n### Depend on Docker images of other services\n\nYou can depend on the Docker information of another project, because\nthis plugin attaches project metadata when it builds Docker images.\nSimply add this information to any project:\n\n```xml\n<dependency>\n  <groupId>com.spotify</groupId>\n  <artifactId>foobar</artifactId>\n  <version>1.0-SNAPSHOT</version>\n  <type>docker-info</type>\n</dependency>\n```\n\nNow, you can read information about the Docker image of the project\nthat you depended on:\n\n```java\nString imageName = getResource("META-INF/docker/com.spotify/foobar/image-name");\n```\n\nThis is great for an integration test where you want the latest\nversion of another project\'s Docker image.\n\nNote that you have to register a Maven extension in your POM (or a\nparent POM) in order for the `docker-info` type to be supported:\n\n```xml\n<build>\n  <extensions>\n    <extension>\n      <groupId>com.spotify</groupId>\n      <artifactId>dockerfile-maven-extension</artifactId>\n      <version>${version}</version>\n    </extension>\n  </extensions>\n</build>\n```\n\n## Use other Docker tools that rely on Dockerfiles\n\nYour project(s) look like so:\n\n```\na/\n  Dockerfile\n  pom.xml\nb/\n  Dockerfile\n  pom.xml\n```\n\nYou can now use these projects with Fig or docker-compose or some\nother system that works with Dockerfiles.  For example, a\n`docker-compose.yml` might look like:\n\n```yaml\nservice-a:\n  build: a/\n  ports:\n  - \'80\'\n\nservice-b:\n  build: b/\n  links:\n  - service-a\n```\n\nNow, `docker-compose up` and `docker-compose build` will work as\nexpected.\n\n## Usage\n\nSee [usage docs](https://github.com/spotify/dockerfile-maven/blob/master/docs/usage.md).\n\n## Authentication\n\nSee [authentication docs](https://github.com/spotify/dockerfile-maven/blob/master/docs/authentication.md).\n\n## Releasing\n\nTo cut the Maven release:\n\n```\nmvn clean [-B -Dinvoker.skip -DskipTests -Darguments=\'-Dinvoker.skip -DskipTests\'] \\\n  -Dgpg.keyname=<key ID used for signing artifacts> \\\n  release:clean release:prepare release:perform\n```\n\nWe use [`gren`](https://github.com/github-tools/github-release-notes#installation) to create Releases in Github:\n\n```\ngren release\n```'