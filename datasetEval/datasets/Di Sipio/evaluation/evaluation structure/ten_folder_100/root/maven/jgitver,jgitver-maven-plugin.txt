b'# jgitver-maven-plugin\r\n\r\n[![Build Status](https://travis-ci.org/jgitver/jgitver-maven-plugin.svg?branch=master)](https://travis-ci.org/jgitver/jgitver-maven-plugin)\r\n[![Open Hub project report for jgitver-maven-plugin](https://www.openhub.net/p/jgitver-maven-plugin/widgets/project_thin_badge.gif)](https://www.openhub.net/p/jgitver-maven-plugin?ref=sample) [![Discuss](https://badges.gitter.im/jgitver/jgitver.svg)](https://gitter.im/jgitver/Lobby)\r\n\r\nThis plugin allows to define the pom version of your project using the information from your git history.\r\nIt calculates the version, a little bit like `git describe` would do but in a more efficient way for maven projects:\r\n\r\n- new commits have upper version than previous commit (in the way maven/semver interpret versions)\r\n- version calculation is based on git tags & branches\r\n- git lightweight tags allow for intermediate version controlling between releases\r\n    - allow to define what is the _next_ version pattern to use\r\n- minimal setup via maven extension\r\n\r\nHere is an illustration of the capabilities of the plugin\r\n\r\n![Example](src/doc/images/jgitver-maven-plugin-homepage.png?raw=true "Example")\r\n\r\n## Usage\r\n\r\n### Activation by maven core extension\r\n\r\nSince version `0.3.0` [jgitver-maven-plugin](#jgitver-maven-plugin) needs to be run as a maven core extension.  \r\nThe installation scripts below will use the latest version available ; if you are updating find the latest version [here](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22fr.brouillard.oss%22%20AND%20a%3A%22jgitver-maven-plugin%22) or [there](http://search.maven.org/solrsearch/select?q=g:%22fr.brouillard.oss%22+AND+a:%22jgitver-maven-plugin%22&core=gav&rows=1&wt=json).\r\n\r\n__via curl__\r\n\r\nfrom the root directory of your project, run:\r\n\r\n``` shell\r\nsh -c "$(curl -fsSL https://raw.githubusercontent.com/jgitver/jgitver-maven-plugin/master/src/doc/scripts/install.sh)"\r\n```\r\n\r\n__via wget__\r\n\r\nfrom the root directory of your project, run:\r\n\r\n``` shell\r\nsh -c "$(wget https://raw.githubusercontent.com/jgitver/jgitver-maven-plugin/master/src/doc/scripts/install.sh -O -)"\r\n```\r\n\r\n__manually__\r\n\r\n1. Create a directory `.mvn` under the root directory of your project.\r\n1. Create file `.mvn/extensions.xml`\r\n1. Put the following content to `.mvn/extensions.xml` (adapt to [latest version](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22fr.brouillard.oss%22%20a%3A%22jgitver-maven-plugin%22)).\r\n\r\n    ```xml\r\n    <extensions xmlns="http://maven.apache.org/EXTENSIONS/1.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\r\n      xsi:schemaLocation="http://maven.apache.org/EXTENSIONS/1.0.0 http://maven.apache.org/xsd/core-extensions-1.0.0.xsd">\r\n      <extension>\r\n        <groupId>fr.brouillard.oss</groupId>\r\n        <artifactId>jgitver-maven-plugin</artifactId>\r\n        <version>1.4.4</version>\r\n      </extension>\r\n    </extensions>\r\n    ```\r\n\r\n### Configuration\r\n\r\nIn order to control [jgitver-maven-plugin](#jgitver-maven-plugin) behavior, you can provide a configuration\r\nfile under `$rootProjectDir/.mvn/jgitver.config.xml`.\r\nThe configuration file must be compliant with the latest [jgitver-configuration-v1_1_0.xsd](https://jgitver.github.io/maven/configuration/jgitver-configuration-v1_1_0.xsd) xml schema.\r\n\r\nHere is an example configuration file:\r\n\r\n``` xml\r\n<configuration xmlns="http://jgitver.github.io/maven/configuration/1.1.0"\r\n\txmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\r\n\txsi:schemaLocation="http://jgitver.github.io/maven/configuration/1.1.0 https://jgitver.github.io/maven/configuration/jgitver-configuration-v1_1_0.xsd">\r\n    <mavenLike>true/false</mavenLike>   <!-- deprecated, use \'strategy\' instead -->\r\n    <strategy>MAVEN|CONFIGURABLE|PATTERN</strategy>\r\n    <policy>MAX|LATEST|NEAREST</policy>    <!-- LookupPolicy to select the base tag/commit for the version computation -->\r\n    <autoIncrementPatch>true/false</autoIncrementPatch>\r\n    <useCommitDistance>true/false</useCommitDistance>\r\n    <useDirty>true/false</useDirty>\r\n    <useGitCommitId>true/false</useGitCommitId>\r\n    <gitCommitIdLength>integer</gitCommitIdLength>  <!-- between [8,40] -->\r\n    <maxSearchDepth>integer</maxSearchDepth>  <!-- upper or equal to 1, ommited otherwise, default to infinite -->\r\n    <nonQualifierBranches>master</nonQualifierBranches> <!-- comma separated, example "master,integration" -->\r\n    <regexVersionTag>r([0-9]+)</regexVersionTag>  <!-- a java regular expression with a capture group matching only \r\n                                                       tags of the form r0, r1, ..., r34-->\r\n    <exclusions>    <!-- Optional list of directory path -->\r\n      <exclusion>relative directory path</exclusion>    <!-- relative path from project root directory -->\r\n    </exclusions>\r\n    <useDefaultBranchingPolicy>true/false</useDefaultBranchingPolicy>   <!-- uses jgitver#BranchingPolicy#DEFAULT_FALLBACK as fallback branch policy-->\r\n    <branchPolicies>\r\n        <branchPolicy>\r\n            <pattern>pattern</pattern>                  <!-- regex pattern -->\r\n            <!-- list of transformations to apply, if empty, defaults to REPLACE_UNEXPECTED_CHARS_UNDERSCORE, LOWERCASE_EN -->\r\n            <transformations>                           \r\n                <transformation>NAME</transformation> <!-- transformation name, one of jgitver#fr.brouillard.oss.jgitver.BranchingPolicy#BranchNameTransformations -->\r\n                ...\r\n            </transformations>\r\n        </branchPolicy>\r\n        ...\r\n    </branchPolicies>\r\n</configuration>\r\n```\r\n\r\nPlease consult [jgitver](https://github.com/jgitver/jgitver#configuration-modes--strategies) documentation to fully understand what the parameters do.\r\n\r\n_[Old](https://jgitver.github.io/maven/configuration/) xml schemas are kept for reference._\r\n\r\n#### Command line arguments\r\n\r\n- `-Djgitver.skip=true` : skips totally jgitver usage\r\n- `-Djgitver.config=FILE` : overrides default config file and uses FILE instead\r\n- `-Djgitver.use-version=VERSION` : execute jgitver but finally uses VERSION as the project version \r\n\r\n#### Working on a detached HEAD\r\n\r\nWhen working on a detached HEAD, no branch information exists anymore from git.  \r\nSince `1.3.0` it now possible to provide externally the _branch_ information via a system property or an envrionement variable.\r\n\r\n- `-Djgitver.branch=SOME_BRANCH_NAME`\r\n- `JGITVER_BRANCH=SOME_BRANCH_NAME && mvn validate` for bash like shells\r\n- `SET JGITVER_BRANCH=SOME_BRANCH_NAME`  \r\n    `mvn validate`  \r\n    for windows CMD (I don\'t know a one iner solution)\r\n\r\n\r\n### Available properties\r\n\r\nSince `0.2.0`, the plugin exposes git calculated properties available during the maven build.\r\nThose are available under the following properties name: "jgitver.meta" where `meta` is one of [Metadatas](https://github.com/jgitver/jgitver/blob/master/src/main/java/fr/brouillard/oss/jgitver/metadata/Metadatas.java#L25) name in lowercase.\r\n\r\nYou can then use them as standard maven properties in your build:\r\n\r\n``` xml\r\n<plugin>\r\n    <artifactId>maven-antrun-plugin</artifactId>\r\n    <executions>\r\n        <execution>\r\n            <phase>validate</phase>\r\n            <goals>\r\n                <goal>run</goal>\r\n            </goals>\r\n            <configuration>\r\n                <tasks>\r\n                    <echo>used version: ${jgitver.used_version}</echo>\r\n                    <echo>version calculated: ${jgitver.calculated_version}</echo>\r\n                    <echo>dirty: ${jgitver.dirty}</echo>\r\n                    <echo>head_committer_name: ${jgitver.head_committer_name}</echo>\r\n                    <echo>head_commiter_email: ${jgitver.head_commiter_email}</echo>\r\n                    <echo>head_commit_datetime: ${jgitver.head_commit_datetime}</echo>\r\n                    <echo>git_sha1_full: ${jgitver.git_sha1_full}</echo>\r\n                    <echo>git_sha1_8: ${jgitver.git_sha1_8}</echo>\r\n                    <echo>branch_name: ${jgitver.branch_name}</echo>\r\n                    <echo>head_tags: ${jgitver.head_tags}</echo>\r\n                    <echo>head_annotated_tags: ${jgitver.head_annotated_tags}</echo>\r\n                    <echo>head_lightweight_tags: ${jgitver.head_lightweight_tags}</echo>\r\n                    <echo>base_tag: ${jgitver.base_tag}</echo>\r\n                    <echo>all_tags: ${jgitver.all_tags}</echo>\r\n                    <echo>all_annotated_tags: ${jgitver.all_annotated_tags}</echo>\r\n                    <echo>all_lightweight_tags: ${jgitver.all_lightweight_tags}</echo>\r\n                    <echo>all_version_tags: ${jgitver.all_version_tags}</echo>\r\n                    <echo>all_version_annotated_tags: ${jgitver.all_version_annotated_tags}</echo>\r\n                    <echo>all_version_lightweight_tags: ${jgitver.all_version_lightweight_tags}</echo>\r\n                </tasks>\r\n            </configuration>\r\n        </execution>\r\n    </executions>\r\n</plugin>\r\n```\r\n\r\nresulted in my case\r\n\r\n```\r\n[INFO] Executing tasks\r\n     [echo] used version: 0.2.0-SNAPSHOT\r\n     [echo] version calculated: 0.2.0-SNAPSHOT\r\n     [echo] dirty: true\r\n     [echo] head_committer_name: Matthieu Brouillard\r\n     [echo] head_commiter_email: matthieu@brouillard.fr\r\n     [echo] head_commit_datetime: Thu Jun 30 14:06:14 2016 +0200\r\n     [echo] git_sha1_full: fadd88e04b25c794cea876b03d8234df5bf4e37b\r\n     [echo] git_sha1_8: fadd88e0\r\n     [echo] branch_name: master\r\n     [echo] head_tags:\r\n     [echo] head_annotated_tags:\r\n     [echo] head_lightweight_tags:\r\n     [echo] base_tag: v0.2.0\r\n     [echo] all_tags: v0.2.0,0.1.1,0.1.0,0.0.3,0.0.2,0.0.1\r\n     [echo] all_annotated_tags: 0.1.1,0.1.0,0.0.3,0.0.2,0.0.1\r\n     [echo] all_lightweight_tags: v0.2.0\r\n     [echo] all_version_tags: v0.2.0,0.1.1,0.1.0,0.0.3,0.0.2,0.0.1\r\n     [echo] all_version_annotated_tags: 0.1.1,0.1.0,0.0.3,0.0.2,0.0.1\r\n     [echo] all_version_lightweight_tags: v0.2.0\r\n[INFO] Executed tasks\r\n```\r\n\r\n## Example\r\n\r\nIf you want to give it a try you can use the following script that will setup a demo project under `/tmp/jgitver-tester`\r\n\r\n```\r\n# let\'s create a fake maven project under /tmp\r\ncd /tmp\r\nmvn archetype:generate -B -DarchetypeGroupId=org.apache.maven.archetypes -DarchetypeArtifactId=maven-archetype-quickstart \\\r\n  -DarchetypeVersion=1.1 -DgroupId=com.company -DartifactId=jgitver-tester -Dversion=0 -Dpackage=com.company.project\r\ncd jgitver-tester\r\n\r\n# init the created project with jgitver-maven-plugin\r\nsh -c "$(wget https://raw.githubusercontent.com/jgitver/jgitver-maven-plugin/master/src/doc/scripts/install.sh -O -)"\r\n\r\n# let\'s do some modifications/commits/tags\r\necho A > content\r\ngit init\r\ngit add .\r\ngit commit -m "initial commit"\r\necho B > content && git add -u && git commit -m "added B data"\r\ngit tag 1.0 -m "release 1.0"\r\necho C > content && git add -u && git commit -m "added C data"\r\ngit checkout -b cool-feature\r\necho D > content && git add -u && git commit -m "added D data"\r\ngit checkout master\r\necho E > content && git add -u && git commit -m "added E data"\r\nmvn validate\r\n```\r\n\r\nThen play around with it doing:\r\n\r\n- `mvn validate`\r\n- `mvn install`\r\n- `git checkout 1.0`\r\n- `mvn validate`\r\n- `git checkout cool-feature`\r\n- `mvn validate`\r\n\r\n## Requirements\r\n\r\n### Maven requirements\r\n\r\n[jgitver-maven-plugin](#jgitver-maven-plugin) requires at least maven-3.3.2 to work correctly.\r\n\r\nThink to modify your IDE settings regarding maven version ; if required do not use the embedded maven version of your IDE but an external one that fulfill the maven minimal requirements.  \r\n\r\n### Supported IDEs\r\n\r\n- Eclipse: tested with Eclipse Mars.2 Release 4.5.2\r\n- Netbeans: tested with NetBeans IDE 8.1 Build 201510222201\r\n- Intellij IDEA: tested with 2016.1.3\r\n\r\n## Build & release\r\n\r\n### Github Markdown rendering\r\n\r\nBefore pushing try to always verify that the modifications pushed in MD files will be correctly rendered by Github.  \r\nFor that purpose you can use [grip](https://github.com/joeyespo/grip).\r\n\r\n### Normal build\r\n\r\n- `mvn -Prun-its clean install`\r\n\r\nor using docker\r\n\r\n- _Linux_: `docker run --rm -v $(pwd):/root/sources -w /root/sources maven:3.5.4-jdk-8 mvn -Prun-its clean install`\r\n- _Windows_: `docker run --rm -v %CD%:/root/sources -w /root/sources maven:3.5.4-jdk-8 mvn -Prun-its clean install`\r\n- _Old linux command_: `docker run --rm -v $(pwd):/root/sources -w /root/sources maven:3.5.4-jdk-8 ./src/ci/build-with-external-it-fallback.sh`\r\n\r\nbuild and filter some IT tests\r\n\r\n- `mvn -Prun-its clean install "-Dinvoker.test=issues/issue-36*"`\r\n\r\nIf needed, one can also add in above docker command a volume sharing \r\nwith the maven local repository by adding something like `-v MLR_LOCATION:/root/.m2/repository` for example `-v D:\\dev\\mlr:/root/.m2/repository`.\r\n\r\n### Release\r\n\r\n- `mvn -Poss clean install`: this will simulate a full build for oss delivery (javadoc, source attachement, GPG signature, ...)\r\n- `git tag -a -s -m "release X.Y.Z, additionnal reason" X.Y.Z`: tag the current HEAD with the given tag name. The tag is signed by the author of the release. Adapt with gpg key of maintainer.\r\n    - Matthieu Brouillard command:  `git tag -a -s -u 2AB5F258 -m "release X.Y.Z, additionnal reason" X.Y.Z`\r\n    - Matthieu Brouillard [public key](https://sks-keyservers.net/pks/lookup?op=get&search=0x8139E8632AB5F258)\r\n- `mvn -Poss,release -DskipTests clean deploy`\r\n- `git push --follow-tags origin master`\r\n\r\n## Issues\r\n\r\n### I want to temporary disable the plugin execution\r\n\r\nSince `1.0.0`, it is possible to totally skip the plugin execution by launching maven with the user property `jgtiver.skip` set to `true`, example:\r\n\r\n- `mvn clean install -Djgitver.skip=true`\r\n\r\n### maven reports my project version to be 0 (or the one set in the pom.xml)\r\n\r\nIf your version is not calculated correctly by maven/jgitver, there are good chances that the plugin is not active.  \r\nPlease verify that you are using maven >= 3.3.2.\r\n\r\n### build fail because all project plugins & dependencies resolve to the same version\r\n\r\nif during a build all the plugins & dependencies are resolved to the exacts same version then chances are high that you have the _local maven repository_ as a subdirectory of your jgitver handled project.\r\n\r\nTo overcome this problem you have 2 possibilities:\r\n\r\n- separate correctly your project from the MLR and make sure the MLR is not a subdirectory of your jgitver managed project\r\n- configure jgitver (using `.mvn/jgitver.config.xml`) to ignore your subdirectory MLR, see the [configuration](#Configuration) paragraph\r\n    ``` xml\r\n    <configuration>\r\n        <exclusions>\r\n            <exclusion>path_to_your_mlr</exclusion>    <!-- can be .m2, .repository or something else -->\r\n        </exclusions>\r\n    </configuration>\r\n    ```\r\n\r\nsee also [#90](https://github.com/jgitver/jgitver-maven-plugin/issues/90) && [#91](https://github.com/jgitver/jgitver-maven-plugin/issues/91) for discussions on this topic.\r\n  \r\n### the invoker tests of my maven plugin project do not work anymore\r\n\r\nIf you develop a maven plugin project, you normally run maven-invoker-plugin to test your plugin.  \r\nUsing default configuration, maven-invoker-plugin will use a temporary local repository under `target/local-repo` and the IT tests will be executed from `target/it/XYZ`.\r\nIn this context, when executing tests, maven will try to activate extensions starting from the `target/it/XYZ` directory ; and it will find your extensions definition in the root directory of the project. This will lead in the activation of `jgitver-maven-plugin` for all your IT projects AND for the poms inside the temporary local repository under `target/local-repository`.\r\n\r\nTo avoid such behavior, you need to tell `jgitver-maven-plugin` to ignore some directories. If you do not have already a jgitver configuration file, create one under `.mvn/jgitver.config.xml` and declare some exclusions (see [configuration](#configuration)):\r\n\r\n``` xml\r\n<configuration>\r\n    <exclusions>\r\n        <exclusion>target/local-repo</exclusion>\r\n        <exclusion>target/it/**</exclusion>\r\n    </exclusions>\r\n</configuration>\r\n```\r\n\r\nYou can have a look at the configuration of [jgitver-maven-plugin](.mvn/jgitver.config.xml) itself.\r\n\r\n# License\r\n\r\njgitver-maven-plugin is delivered under the [Apache Licence, Version 2](https://opensource.org/licenses/Apache-2.0)\r\n'