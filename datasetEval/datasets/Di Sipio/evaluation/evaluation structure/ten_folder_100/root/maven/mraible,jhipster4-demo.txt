b'= Get Started with JHipster 4\n:author: Matt Raible\n:email:  matt@raibledesigns.com\n:revnumber: 1.2\n:revdate:   {docdate}\n:subject: JHipster\n:keywords: JHipster, Angular, Spring Boot, Bootstrap 4\n:icons: font\n:lang: en\n:language: javadocript\n:sourcedir: .\nifndef::env-github[]\n:icons: font\nendif::[]\nifdef::env-github,env-browser[]\n:toc: preamble\n:toclevels: 2\nendif::[]\nifdef::env-github[]\n:status:\n:outfilesuffix: .adoc\n:!toc-title:\n:caution-caption: :fire:\n:important-caption: :exclamation:\n:note-caption: :paperclip:\n:tip-caption: :bulb:\n:warning-caption: :warning:\nendif::[]\n:toc:\n\nThis article shows you how to build a simple blog application with https://www.jhipster.tech/2018/04/10/jhipster-release-4.14.3.html[JHipster 4.14.3]. You can also https://www.youtube.com/watch?v=XRREt1KB4Y8[watch a video of this tutorial on YouTube].\n\nNOTE: The YouTube video was built with JHipster 4.3.0, while this tutorial has been https://github.com/mraible/jhipster4-demo/pull/14[updated for 4.14.3].\n\nifdef::env-github[]\nTIP: It appears you\'re reading this document on GitHub. If you want a prettier view, install https://chrome.google.com/webstore/detail/asciidoctorjs-live-previe/iaalpfgpbocpdfblpnhhgllgbdbchmia[Asciidoctor.js Live Preview for Chrome], then view the https://raw.githubusercontent.com/mraible/jhipster4-demo/master/README.adoc[raw document]. Another option is to use the http://gist.asciidoctor.org/?github-mraible/jhipster4-demo//README.adoc[DocGist view].\nendif::[]\n\n.Source Code\n****\nIf you\'d like to get right to it, the https://github.com/mraible/jhipster4-demo[source code for this application is on GitHub]. To run the app, use `yarn && yarn webpack:build && ./mvnw`. To test it, run `./mvnw test`. To run its end-to-end tests, run `./mvnw` in one terminal and `yarn e2e` in another.\n****\n\n== What is JHipster?\n\nJHipster is one of those open-source projects you stumble upon and immediately think, "`Of course!`" It combines three very successful frameworks in web development: Bootstrap, Angular, and Spring Boot. Bootstrap was one of the first dominant web-component frameworks. Its largest appeal was that it only required a bit of HTML and it worked! All the efforts we made in the Java community to develop web components were shown a better path by Bootstrap. It leveled the playing field in HTML/CSS development, much like Apple\'s Human Interface Guidelines did for iOS apps.\n\nJHipster was started by Julien Dubois in October 2013 (Julien\'s first commit was on https://github.com/jhipster/generator-jhipster/commit/c8630ab7af7b6a99db880b3b0e2403806b7d2436[October 21, 2013]). The first public release (version 0.3.1) was launched December 7, 2013. Since then, the project has had over 115 releases! It is an open-source, Apache 2.0-licensed project on GitHub. It has a core team of 16 developers and over 280 contributors. You can find its homepage at http://www.jhipster.tech/[http://www.jhipster.tech]. If you look at https://github.com/jhipster/generator-jhipster[the project on GitHub], you can see it\'s mostly written in JavaScript (42%) and Java (27%).\n\nAt its core, JHipster is a http://yeoman.io/[Yeoman] generator. Yeoman is a code generator that you run with a `yo` command to generate complete applications or useful pieces of an application. Yeoman generators promote what the Yeoman team calls the "`Yeoman workflow`". This is an opinionated client-side stack of tools that can help developers quickly build beautiful web applications. It takes care of providing everything needed to get working without the normal pains associated with a manual setup.\n\nJHipster 4 is the same JHipster many developers know and love, with a couple bright and shiny new features: namely Angular and Bootstrap 4 support.\n\nNOTE: When I say "AngularJS", I mean Angular 1.x. "Angular" is the forward-looking name for Angular 2 and beyond.\n\n== Install JHipster 4\n\nThe http://www.jhipster.tech/installation/[Installing JHipster] instructions show you all the tools you\'ll need to use a released version of JHipster.\n\n. Install Java 8 http://www.oracle.com/technetwork/java/javase/downloads/index.html[from Oracle].\n. Install Git from https://git-scm.com.\n. Install Node.js from http://nodejs.org. JHipster recommends using a LTS release.\n. Install Yarn using the https://yarnpkg.com/en/docs/install[Yarn installation instructions].\n. Run the following command to install http://yeoman.io/[Yeoman].\n\n    yarn global add yo\n\n. Run the following command to install JHipster.\n\n    yarn global add generator-jhipster\n\n== Create a Project\n\nTo create a project, open a terminal window and create a directory. For example, `mdkdir blog`. Navigate into the directory and run `jhipster`. You\'ll be asked a number of questions about the type of application you want to create and what features you\'d like to include. The screenshot below shows the choices I made to create a simple blog application with Angular.\n\n.Generating the application\nimage::static/generating-blog.png[Generating the application, 1376, scaledwidth=100%]\n\nIf you\'d like to create the same application I did, you can place the following `.yo-rc.json` file in an empty directory and run `jhipster` in it. You won\'t be prompted to answer any questions because the answers are already in `.yo-rc.json`.\n\n[source,json]\n----\n{\n  "generator-jhipster": {\n    "promptValues": {\n      "packageName": "org.jhipster",\n      "nativeLanguage": "en"\n    },\n    "jhipsterVersion": "4.14.3",\n    "baseName": "blog",\n    "packageName": "org.jhipster",\n    "packageFolder": "org/jhipster",\n    "serverPort": "8080",\n    "authenticationType": "jwt",\n    "cacheProvider": "ehcache",\n    "enableHibernateCache": true,\n    "websocket": false,\n    "databaseType": "sql",\n    "devDatabaseType": "h2Disk",\n    "prodDatabaseType": "postgresql",\n    "searchEngine": false,\n    "messageBroker": false,\n    "serviceDiscoveryType": false,\n    "buildTool": "maven",\n    "enableSocialSignIn": false,\n    "enableSwaggerCodegen": false,\n    "jwtSecretKey": "66a6793747830fceb83801a2f66b634206014a82",\n    "clientFramework": "angularX",\n    "useSass": true,\n    "clientPackageManager": "yarn",\n    "applicationType": "monolith",\n    "testFrameworks": [\n      "gatling",\n      "protractor"\n    ],\n    "jhiPrefix": "jhi",\n    "enableTranslation": true,\n    "nativeLanguage": "en",\n    "languages": [\n      "en",\n      "es"\n    ]\n  }\n}\n----\n\nThe project creation process will take a couple minutes to run, depending on your internet connection speed. When it\'s finished, you should see output like the following.\n\n.Generation success\nimage::static/generation-success.png[Generation success, 1354, scaledwidth=100%]\n\nRun `./mvnw` to start the application and navigate to http://localhost:8080 in your favorite browser. The first thing you\'ll notice is a dapper-looking fellow explaining how you can sign in or register.\n\n.Default homepage\nimage::static/default-homepage.png[Default homepage, 1290, scaledwidth=100%]\n\nSign in with username `admin` and password `admin` and you\'ll have access to navigate through the Administration section. This section offers nice looking UIs on top of some Spring Boot\'s many monitoring and configuration features. It also allows you to administer users:\n\n.User management\nimage::static/user-management.png[User management, 1290, scaledwidth=100%]\n\nIt gives you insights into Application and JVM metrics:\n\n.Application metrics\nimage::static/app-metrics.png[Application and JVM Metrics, 1290, scaledwidth=100%]\n\nAnd it allows you to see the Swagger docs associated with its API.\n\n.Swagger docs\nimage::static/swagger-docs.png[Swagger docs, 1290, scaledwidth=100%]\n\nYou can run the following command (in a separate terminal window) to run the Protractor tests and confirm everything is working properly.\n\n----\nyarn e2e\n----\n\nAt this point, it\'s a good idea to check your project into Git so you can easily see what changes are made going forward.\n\n----\ngit add .\ngit commit -m "Project created"\n----\n\n== Generate Entities\n\nFor each entity you want to create, you will need:\n\n* a database table;\n* a Liquibase change set;\n* a JPA entity class;\n* a Spring Data `JpaRepository` interface;\n* a Spring MVC `RestController` class;\n* an Angular model, state, component, dialog components, service; and\n* several HTML pages for each component.\n\nIn addition, you should have integration tests to verify that everything works and performance tests to verify that it runs fast. In an ideal world, you\'d also have unit tests and integration tests for your Angular code.\n\nThe good news is JHipster can generate all of this code for you, including integration tests and performance tests. In addition, if you have entities with relationships, it will generate the necessary schema to support them (with foreign keys), and the TypeScript and HTML code to manage them. You can also set up validation to require certain fields as well as control their length.\n\nJHipster supports several methods of code generation. The first uses its https://www.jhipster.tech/creating-an-entity/[entity sub-generator]. The entity sub-generator is a command-line tool that prompts you with questions which you answer.\n\nhttps://start.jhipster.tech/jdl-studio/[JDL-Studio] is a browser-based tool for defining your domain model with JHipster Domain Language (JDL). Finally, https://www.jhipster.tech/jhipster-uml/[JHipster-UML] is an option for those that like UML. Supported UML editors include https://www.modeliosoft.com/[Modelio], http://www.umldesigner.org/[UML Designer], https://www.genmymodel.com/[GenMyModel] and http://www.visual-paradigm.com/[Visual Paradigm]. I like the visual nature of JDL-Studio, so I\'ll use it for this project.\n\nBelow is the entity diagram and JDL code needed to generate a simple blog with blogs, entries and tags.\n\n.Blog entity diagram\nimage::static/jdl-studio.png[Blog entity diagram, 1171, scaledwidth=100%]\n\nTIP: You can find a few other https://github.com/jhipster/jdl-samples[JDL samples on GitHub].\n\nIf you\'d like to follow along, copy/paste the contents of the file below into https://start.jhipster.tech/jdl-studio/[JDL-Studio].\n\n.blog.jh\n----\nentity Blog {\n\tname String required minlength(3),\n\thandle String required minlength(2)\n}\n\nentity Entry {\n\ttitle String required,\n\tcontent TextBlob required,\n\tdate ZonedDateTime required\n}\n\nentity Tag {\n\tname String required minlength(2)\n}\n\nrelationship ManyToOne {\n\tBlog{user(login)} to User,\n\tEntry{blog(name)} to Blog\n}\n\nrelationship ManyToMany {\n\tEntry{tag(name)} to Tag{entry}\n}\n\npaginate Entry, Tag with infinite-scroll\n----\n\nClick the download button in the top right corner to save it to your hard drive.\nRun the following command (in the `blog` directory) to import this file and generate entities, tests and a UI.\n\n----\njhipster import-jdl ~/Downloads/jhipster-jdl.jh\n----\n\nYou\'ll be prompted to overwrite `src/main/resources/config/liquibase/master.xml`. Type `a` to overwrite this file, as well as others.\n\nRestart the application with `/.mvnw` and run `yarn start` to view the UI for the generated entities. Create a couple blogs for the existing `admin` and `user` users, as well as a few blog entries.\n\nTIP: You don\'t _have_ to run `yarn start`, but doing so allows you to change your UI files and see the results immediately.\n\n.Blogs\nimage::static/blogs.png[Blogs, 1171, scaledwidth=100%]\n\n.Entries\nimage::static/entries.png[Entries, 1283, scaledwidth=100%]\n\nFrom these screenshots, you can see that users can see each other\'s data, and modify it.\n\nCheck your generated entities into Git.\n\n----\ngit add .\ngit commit -m "Entities generated"\n----\n\n== Add Business Logic\n\nTIP: To configure an IDE with your JHipster project, see https://www.jhipster.tech/configuring-ide/[Configuring your IDE]. Instructions exist for Eclipse, IntelliJ IDEA, Visual Studio Code, and NetBeans.\n\nTo add more security around blogs and entries, open `BlogResource.java` and find the `getAllBlogs()` method. Change the following line:\n\n[source,java]\n.src/main/java/org/jhipster/web/rest/BlogResource.java\n----\nreturn blogRepository.findAll();\n----\n\nTo:\n\n[source,java]\n.src/main/java/org/jhipster/web/rest/BlogResource.java\n----\nreturn blogRepository.findByUserIsCurrentUser();\n----\n\nThe `findByUserIsCurrentUser()` method is generated by JHipster in the `BlogRepository` class and allows limiting results by the current user.\n\n[source,java]\n.src/main/java/org/jhipster/repository/BlogRepository.java\n----\npublic interface BlogRepository extends JpaRepository<Blog,Long> {\n\n    @Query("select blog from Blog blog where blog.user.login = ?#{principal.username}")\n    List<Blog> findByUserIsCurrentUser();\n\n}\n----\n\nAfter making this change, re-compiling `BlogResource` should trigger a restart of the application thanks to http://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-devtools.html[Spring Boot\'s Developer tools]. If you navigate to http://localhost:9000/blogs, you should only see the blog for the current user.\n\n.Admin\'s blog\nimage::static/blogs-admin.png[Admin\'s blog, 1217, scaledwidth=100%]\n\nTo add this same logic for entries, open `EntryResource.java` and find the `getAllEntries()` method. Change the following line:\n\n[source,java]\n.src/main/java/org/jhipster/web/rest/EntryResource.java\n----\nPage<Entry> page = entryRepository.findAll(pageable);\n----\n\nTo:\n\n[source,java]\n.src/main/java/org/jhipster/web/rest/EntryResource.java\n----\nPage<Entry> page = entryRepository.findByBlogUserLoginOrderByDateDesc(\n    SecurityUtils.getCurrentUserLogin().orElse(null), pageable);\n----\n\nUsing your IDE, create this method in the `EntryRepository` class. It should look as follows:\n\n[source,java]\n.src/main/java/org/jhipster/repository/EntryRepository.java\n----\nPage<Entry> findByBlogUserLoginOrderByDateDesc(String currentUserLogin, Pageable pageable);\n----\n\nRecompile both changed classes and verify that the `user` user only sees the entries you created for them.\n\n.User\'s entries\nimage::static/entries-user.png[User\'s entries, 1216, scaledwidth=100%]\n\nAfter making this changes, commit them to Git.\n\n----\ngit add .\ngit commit -m "Add business logic"\n----\n\nYou might notice that this application doesn\'t look like a blog and it doesn\'t allow HTML in the content field.\n\n== Make UI Enhancements\n\nWhen doing UI development on a JHipster-generated application, it\'s nice to see your changes as soon as you save a file. JHipster 4 uses https://www.browsersync.io/[Browsersync] and https://webpack.github.io/[webpack] to power this feature. You enable this previously by running the following command in the `blog` directory.\n\n----\nyarn start\n----\n\nIn this section, you\'ll change the following:\n\n. Change the rendered content field to display HTML\n. Change the list of entries to look like a blog\n\n==== Allow HTML\n\nIf you enter HTML in the `content` field of a blog entry, you\'ll notice it\'s escaped on the list screen.\n\n.Escaped HTML\nimage::static/entries-with-html-escaped.png[Escaped HTML, 1216, scaledwidth=100%]\n\nTo change this behavior, open `entry.component.html` and change the following line:\n\n[source,html]\n.src/main/webapp/app/entities/entry/entry.component.html\n----\n<td>{{entry.content}}</td>\n----\n\nTo:\n\n[source,html]\n.src/main/webapp/app/entities/entry/entry.component.html\n----\n<td [innerHTML]="entry.content"></td>\n----\n\nAfter making this change, you\'ll see that the HTML is no longer escaped.\n\n.HTML in entries\nimage::static/entries-with-html.png[Escaped HTML, 1216, scaledwidth=100%]\n\n==== Improve the layout\n\nTo make the list of entries look like a blog, replace `<div class="table-responsive">` with HTML so it uses a stacked layout in a single column.\n\n[source,html]\n.src/main/webapp/app/entities/entry/entry.component.html\n----\n<div class="table-responsive" *ngIf="entries">\n    <div infinite-scroll (scrolled)="loadPage(page + 1)" [infiniteScrollDisabled]="page >= links[\'last\']" [infiniteScrollDistance]="0">\n        <div *ngFor="let entry of entries; trackBy: trackId">\n            <h2>{{entry.title}}</h2>\n            <small>Posted on {{entry.date | date: \'short\'}} by {{entry.blog.user.login}}</small>\n            <div [innerHTML]="entry.content"></div>\n            <div class="btn-group mb-2 mt-1">\n                <button type="submit"\n                        [routerLink]="[\'/\', { outlets: { popup: \'entry/\'+ entry.id + \'/edit\'} }]"\n                        replaceUrl="true"\n                        class="btn btn-primary btn-sm">\n                    <span class="fa fa-pencil"></span>\n                    <span class="hidden-md-down" jhiTranslate="entity.action.edit">Edit</span>\n                </button>\n                <button type="submit"\n                        [routerLink]="[\'/\', { outlets: { popup: \'entry/\'+ entry.id + \'/delete\'} }]"\n                        replaceUrl="true"\n                        class="btn btn-danger btn-sm">\n                    <span class="fa fa-remove"></span>\n                    <span class="hidden-md-down" jhiTranslate="entity.action.delete">Delete</span>\n                </button>\n            </div>\n        </div>\n    </div>\n</div>\n----\n\nNow it looks more like a regular blog!\n\n.Blog entries\nimage::static/blog-entries.png[Blog entries, 1216, scaledwidth=100%]\n\nCommit all your changes to Git.\n\n----\ngit add .\ngit commit -m "UI enhancements"\n----\n\n== Deploy to the Cloud\n\nA JHipster application can be deployed anywhere a Spring Boot application can be deployed.\n\nJHipster ships with support for deploying to https://www.jhipster.tech/cloudfoundry/[Cloud Foundry], https://www.jhipster.tech/heroku/[Heroku], https://www.jhipster.tech/kubernetes/[Kubernetes], https://www.jhipster.tech/aws/[AWS], and https://www.jhipster.tech/boxfuse/[AWS with Boxfuse]. I\'m using Heroku in this example because it doesn\'t cost me anything to host it.\n\nWhen you prepare a JHipster application for production, it\'s recommended to use the pre-configured "`production`" profile. With Maven, you can package your application by specifying the `prod` profile when building.\n\n----\nmvn -Pprod package\n----\n\nThe production profile is used to build an optimized JavaScript client. You can invoke this using webpack by running `yarn run webpack:prod`.\nThe production profile also configures gzip compression with a servlet filter, cache headers, and monitoring via\nhttps://github.com/dropwizard/metrics[Metrics]. If you have a http://graphite.wikidot.com/[Graphite] server configured in\nyour `application-prod.yml` file, your application will automatically send metrics data to it.\n\nWhen you run this command, you\'ll likely get a test failure.\n\n----\nResults :\n\nFailed tests:\n  BlogResourceIntTest.getAllBlogs:177 Status expected:<200> but was:<500>\n\nTests run: 162, Failures: 1, Errors: 0, Skipped: 0\n----\n\nThe reason this happens is shown in a stack trace in your terminal.\n\n----\norg.springframework.dao.InvalidDataAccessApiUsageException: Authentication object cannot be null\n----\n\nTo fix this, you can use Spring Security Test\'s http://docs.spring.io/spring-security/site/docs/current/reference/html/test-method.html#test-method-withmockuser[`@WithMockUser`]. Open `BlogResourceIntTest.java` and inject  `UserRepository` as a dependency.\n\n[source,java]\n.src/test/java/org/jhipster/web/rest/BlogResourceIntTest.java\n----\n@Autowired\nprivate UserRepository userRepository;\n----\n\nChange the `createEntity()` method so its not `static` and uses the `userRepository` to set a user on the blog entity.\n\n[source,java]\n----\npublic Blog createEntity(EntityManager em) {\n    Blog blog = new Blog()\n            .name(DEFAULT_NAME)\n            .handle(DEFAULT_HANDLE)\n            .user(userRepository.findOneByLogin("user").get());\n    return blog;\n}\n----\n\nAdd `@WithMockUser` to the `getAllBlogs()` method.\n\n[source,java]\n----\n@Test\n@Transactional\n@WithMockUser\npublic void getAllBlogs() throws Exception {\n----\n\nAfter fixing this test, you should be able to run `mvn -Pprod package` without any failures. Since everything works, commit it!\n\n----\ngit add .\ngit commit -m "Fix tests"\n----\n\nTo deploy this application to Heroku, I logged in to my account using `heroku login` from the command line. I already had the https://devcenter.heroku.com/articles/heroku-command-line[Heroku CLI] installed.\n\n----\n$ heroku login\nEnter your Heroku credentials:\nEmail: matt@raibledesigns.com\nPassword: *******************\nLogged in as matt@raibledesigns.com\n----\n\nI ran `jhipster heroku` as recommended in the http://www.jhipster.tech/heroku/[Deploying to Heroku] documentation. I used the name "`jhipster4x-demo`" for my application when prompted. I selected "`Git (compile on Heroku)`" as the type of deployment.\n\n----\n$ jhipster heroku\nUsing JHipster version installed locally in current project\'s node_modules\nExecuting jhipster:heroku\nOptions:\nHeroku configuration is starting\n? Name to deploy as: jhipster4x-demo\n? On which region do you want to deploy ? us\n? Which type of deployment do you want ? Git (compile on Heroku)\n\nUsing existing Git repository\n\nHeroku CLI deployment plugin already installed\n\nCreating Heroku application and setting up node environment\nhttps://jhipster-4-x-demo.herokuapp.com/ | https://git.heroku.com/jhipster-4-x-demo.git\n\nProvisioning addons\nCreated heroku-postgresql --as DATABASE\n\nCreating Heroku deployment files\n   create src/main/resources/config/bootstrap-heroku.yml\n   create src/main/resources/config/application-heroku.yml\n   create Procfile\n conflict pom.xml\n? Overwrite pom.xml? overwrite this and all others\n    force pom.xml\n\nSkipping build\n\nUpdating Git repository\ngit add .\ngit commit -m "Deploy to Heroku" --allow-empty\n\nConfiguring Heroku\n\nDeploying application\n\n... building ...\n\nremote:        https://jhipster-4-x-demo.herokuapp.com/ deployed to Heroku\nremote:\nremote: Verifying deploy... done.\nTo https://git.heroku.com/jhipster-4-x-demo.git\n * [new branch]\nHEAD -> master\n\nYour app should now be live. To view it run\n\theroku open\nAnd you can view the logs with this command\n\theroku logs --tail\nAfter application modification, redeploy it with\n\tjhipster heroku\nCongratulations, JHipster execution is complete!\n----\n\nI ran `heroku open`, logged as `admin` and was pleased to see it worked!\n\n.JHipster 4 demo on Heroku\nimage::static/jhipster4-demo-heroku.png[JHipster 4 demo on Heroku, 1244, scaledwidth=100%]\n\n== Learn More about JHipster\n\nI hope you\'ve enjoyed learning how JHipster can help you develop hip web applications! It\'s a nifty project, with an easy-to-use entity generator, a pretty UI and many Spring Boot best-practice patterns. The project team follows five simple https://www.jhipster.tech/policies/[policies], paraphrased here:\n\n1. The development team votes on policies.\n2. JHipster uses technologies with their default configurations as much as possible.\n3. Only add options when there is sufficient added value in the generated code.\n4. For the Java code, follow the default IntelliJ IDEA formatting and coding guidelines.\n5. Use strict versions for third-party libraries.\n\nThese policies help the project maintain its sharp edge and streamline its development process. If you have features you\'d like to add or if you\'d like to refine existing features, you can https://github.com/jhipster/generator-jhipster[watch the project on GitHub] and https://github.com/jhipster/generator-jhipster/blob/master/CONTRIBUTING.md[help with its development] and support. We\'re always looking for help!\n\nNow that you\'ve learned how to use Angular, Bootstrap 4, and Spring Boot with JHipster, go forth and develop great applications!\n\n== Source Code\n\nThe source code for this project is available on GitHub at https://github.com/mraible/jhipster4-demo.\n\nhttps://travis-ci.org[Travis CI] is continually testing this project with configuration from its https://github.com/mraible/jhipster4-demo/blob/master/.travis.yml[`.travis.yml`] file.\n\n== About the author\n\nMatt Raible is a web developer and Java Champion. He loves to architect and build slick-looking UIs using Sass and TypeScript. When he\'s not evangelizing https://okta.com[Okta] and open source, he likes to ski with his family, drive his VWs, and enjoy craft beer.\n\nMatt writes on the http://developer.okta.com/blog[Okta developer blog], his https://raibledesigns.com/[personal blog], and you can find him on Twitter https://twitter.com/mraible[@mraible].\n\nMatt is a developer on the JHipster team, authored the https://www.infoq.com/minibooks/jhipster-4x-mini-book[JHipster Mini-Book], and helped create https://www.pluralsight.com/courses/play-by-play-developing-microservices-mobile-apps-jhipster[Play by Play: Developing Microservices and Mobile Apps with JHipster].\n'