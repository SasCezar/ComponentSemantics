b'[![License Apache 2.0](https://img.shields.io/badge/license-Apache%20License%202.0-green.svg)](http://www.apache.org/licenses/LICENSE-2.0)   \n[![Maven central](https://maven-badges.herokuapp.com/maven-central/com.igormaznitsa/jcp/badge.svg)](http://search.maven.org/#artifactdetails|com.igormaznitsa|jcp|7.0.2|jar)   \n[![Codacy Badge](https://api.codacy.com/project/badge/grade/c6acda63097a40c68d8ca8eaef6180d8)](https://www.codacy.com/app/rrg4400/java-comment-preprocessor)   \n[![Java 1.8+](https://img.shields.io/badge/java-1.8%2b-green.svg)](http://www.oracle.com/technetwork/java/javase/downloads/index.html)   \n[![Maven 3.0+](https://img.shields.io/badge/maven-3.0%2b-green.svg)](https://maven.apache.org/)   \n[![Gradle 3.0+](https://img.shields.io/badge/gradle-3.0%2b-green.svg)](https://gradle.org/)   \n[![Ant 1.8.2+](https://img.shields.io/badge/ant-1.8.2%2b-green.svg)](http://ant.apache.org/)   \n[![PayPal donation](https://img.shields.io/badge/donation-PayPal-red.svg)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=AHWJHJFBAWGL2)   \n[![Yandex.Money donation](https://img.shields.io/badge/donation-\xd0\xaf.\xd0\xb4\xd0\xb5\xd0\xbd\xd1\x8c\xd0\xb3\xd0\xb8-yellow.svg)](http://yasobe.ru/na/iamoss)   \n\n![Logo](assets/logo.png)\n\n# Changelog\n- **7.0.2 (15 jul 2019)**\n  - fixed leaks of system scoped dependencies in generated pom.xml\n\n- **7.0.1 (19 apr 2019)**\n  - minor refactoring\n  \n- **7.0.0 (31 mar 2019)**\n  - **reworked and renamed some parameters for Maven and ANT plug-ins**\n  - **removed maven `clear` goal**\n  - **removed maven `preprocessTest` goal (use flag `useTestSources` instead)**\n  - added embedded Gradle plugin `com.igormaznitsa.jcp`\n  - added function `STR esc(STR)`\n  - fixed build under JDK 9+\n  - XML functions work through embedded [Apache Xalan](https://xalan.apache.org/) and [Apache Xerces](http://xerces.apache.org/)\n  - **minimal needed Java version changed to 1.8**\n  - refactoring\n\n- **6.1.4 (16 jun 2018)**\n  - [#19](https://github.com/raydac/java-comment-preprocessor/issues/19) removed dependencies to meta packages (their sources moved into project)\n\n[Full changelog](https://github.com/raydac/java-comment-preprocessor/blob/master/changelog.txt)\n\n# Introduction\nSince 2001 I was strongly involved in development for J2ME mobile devices, it was too expensive to support the same sources for different devices if to use standard Java OOP approach, so that I choosed C/C++ approach and developed preprocessor which made my life much easier. Inintially it was a proprietary project but since 2011 it became OSS project.   \n\nI guess, at present it is the most powerful Java preprocessor with support of two-pass preprocessing, document part support, loops and even use XML files as data sources ([I generated static files with it](jcp-tests/jcp-test-static-site)). Now it is implemented as a fat-jar and includes Maven, ANT and Gradle interfaces and can be used with these tools. For work it needs JDK 1.8+.\n\n# Documap\n\n![Documap](assets/documap.png)\n\n# How to use\n\nThe Preprocessor can work as:\n  - a CLI tool\n  - a Java library\n  - [a Maven goal](jcp-tests/jcp-test-maven)\n  - [an ANT task](jcp-tests/jcp-test-ant)\n  - [a Gradle task](jcp-tests/jcp-test-gradle)\n\nThe Preprocessor is published in the Maven Central (it is not published in Gradle central, so that use the Maven central)\n```\n    <build>\n        <plugins>\n...\n           <plugin>\n                <groupId>com.igormaznitsa</groupId>\n                <artifactId>jcp</artifactId>\n                <version>7.0.2</version>\n                <executions>\n                    <execution>\n                        <id>preprocessSources</id>\n                        <phase>generate-sources</phase>\n                        <goals>\n                            <goal>preprocess</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n...\n        </plugins>\n    </build>    \n```\n\n# How to use from command line\nThe Preprocessor jar can be started under Java as a console application. Let\'s take a look at short example below how to start in command line under Linux The Easy variant of usage:\n```\njava -jar jcp-7.0.2.jar  --i:./test --o:./result\n```\nThe Example just preprocess files from ./test folder which extensions allowed to be preprocessed by default, and places result into ./result folder, but keep in your mind that the preprocessor copies not all files, XML files will not be preprocessed by default. Files which extension are not marked for preprocessing will be just copied (of course if the extensions is not in the list of excluded file extensions)\n\nMore complex example:\n```\njava -jar jcp-7.0.2.jar  --c --r --v --f:java,xml --ef:none --i:./test --o:./result  \'--p:HelloWorld=$Hello world$\'\n```\n- --c clear the destination folder before work\n- --r remove all Java-style comments from preprocessed result files\n- --v show verbose log about preprocessing process\n- --f include .java and .xml files into preprocessing (by default the preprocessor doesn\'t preprocess XNL files and the extension should to be defined explicitly)\n- --ef don\'t exclude any extension from preprocessing\n- --i use ./test as source folder\n- --o use ./result as destination folder\n- --p define named global variable HelloWorld? with the \'Hello world\' content\n- --z turn on checking of file content before replacement, if the same content then preprocessor will not replace the file  \n- --es allow whitespace between comment and directive (by default it is turned off)\n\n# Internal test examples\n- [Prepare sources for Javassist](jcp-tests/jcp-test-javassist)\n- [Make multi-versioned JAR  for JEP-238](jcp-tests/jcp-test-jep238)\n- [Generate static file from XML sources](jcp-tests/jcp-test-static-site)\n- [Simple Android Gradle-based project](jcp-tests/jcp-test-android)\n\n# Example of Java sources with directives\nIn Java the only allowed way to inject directives and to not break work of tools and conpilers - is to use commented space, so that the preprocessor uses it.\n```Java\n//#local TESTVAR="TEST LOCAL VARIABLE"\n//#echo TESTVAR=/*$TESTVAR$*/\n//#include "./test/_MainProcedure.java"\n\npublic static final void testproc()\n{\n System.out.println(/*$VARHELLO$*/);\n System.out.println("// Hello commentaries");\n //#local counter=10\n        //#while counter!=0\n        System.out.println("Number /*$counter$*/");\n        //#local counter=counter-1\n        //#end\n System.out.println("Current file name is /*$SRV_CUR_FILE$*/");\n System.out.println("Output dir is /*$SRV_OUT_DIR$*/");\n //#if issubstr("Hello","Hello world")\n System.out.println("Substring found");\n //#endif\n}\n```\n\n# Multi-sectioned documents\nIn opposite a regular document, a Java document has as minimum two sections - prefix (where situated import and special information) and body. For access to such sections there are special preprocessing directives `//#prefix[-|+]`, `//#postfix[-|+]`. They allow to turn on or turn off output into prefix and postfix sections.\n```Java\n//#prefix+\n import java.lang.*;\n //#prefix-\n public class Main {\n  //#prefix+\n  import java.util.*;\n  //#prefix-\n  public static void main(String ... args){}\n }\n```\n# How to remove all coments from sources\nSometime it is very useful to remove totally all comments from sources, such possiblitiy was included into JCP and can be activated through special flag or command line switcher. The Example of use for comment removing through CLI interface\n```\njava -jar ./jcp-7.0.2.jar --i:/sourceFolder --o:/resultFolder -ef:none --r\n```\n'