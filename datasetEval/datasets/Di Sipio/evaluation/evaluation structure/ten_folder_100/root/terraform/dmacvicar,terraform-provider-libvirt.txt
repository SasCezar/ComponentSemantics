b'# Terraform provider for libvirt\n\n- [![Gitter chat](https://badges.gitter.im/terraform-provider-libvirt/Lobby.png)](https://gitter.im/terraform-provider-libvirt/Lobby) ([IRC gateway](https://irc.gitter.im/))\n- Planning board: [Github Projects](https://github.com/dmacvicar/terraform-provider-libvirt/projects/1)\n\n\n![alpha](https://img.shields.io/badge/stability%3F-beta-yellow.svg) [![Build Status](https://travis-ci.org/dmacvicar/terraform-provider-libvirt.svg?branch=master)](https://travis-ci.org/dmacvicar/terraform-provider-libvirt)\n___\nThis is a terraform provider that lets you provision\nservers on a [libvirt](https://libvirt.org/) host via [Terraform](https://terraform.io/).\n\n## Table of Content\n- [Introduction and Goals](#intro)\n- [Downloading](#downloading)\n- [Installing](#installing)\n- [Quickstart](#using-the-provider)\n- [Building from source](#building-from-source)\n- [How to contribute](CONTRIBUTING.md)\n- [Upstream project using this provider](#upstream-projects-using-terraform-libvirt)\n\n## Website Docs\n- [Libvirt Provider](website/docs/index.html.markdown)\n- [CloudInit](website/docs/r/cloudinit.html.markdown)\n- [CoreOS Ignition](website/docs/r/coreos_ignition.html.markdown)\n- [Domains](website/docs/r/domain.html.markdown)\n- [Networks](website/docs/r/network.markdown)\n- [Volumes](website/docs/r/volume.html.markdown)\n\n# Introduction & Goals\n\nThis project exists:\n\n* To allow teams to get the benefits [Software Defined Infrastructure](https://en.wikipedia.org/wiki/Software-defined_infrastructure) Terraform provides, on top of classical and cheap virtualization infrastructure provided by Linux and [KVM](https://www.linux-kvm.org)\n  This helps in very dynamic [DevOps](https://en.wikipedia.org/wiki/DevOps), Development and Testing activities.\n* To allow for mixing KVM resources with other infrastructure Terraform is able to manage\n\nWhat is *NOT* in scope:\n\n* To support every advanced feature [libvirt](https://libvirt.org/) supports\n\n  This would make the mapping from terraform complicated and not maintanable. See the [How to contribute](CONTRIBUTING.md) section to understand how to approach new features.\n  \n## Downloading\n\nBuilds for openSUSE, CentOS, Ubuntu, Fedora are created with openSUSE\'s [OBS](https://build.opensuse.org). The build definitions are available for both the [stable](https://build.opensuse.org/package/show/systemsmanagement:terraform/terraform-provider-libvirt) and [master](https://build.opensuse.org/package/show/systemsmanagement:terraform:unstable/terraform-provider-libvirt) branches.\n\n## Using published binaries/builds\n\n* *Stable releases*: Head to the [releases section](https://github.com/dmacvicar/terraform-provider-libvirt/releases) and download the latest stable release build for your distribution.\n* *git master builds*: Head to the [download area of the OBS project](https://download.opensuse.org/repositories/systemsmanagement:/terraform:/unstable/) and download the build for your distribution.\n\n## Using packages\n\nFollow the instructions for your distribution:\n\n* [Packages for stable releases](https://software.opensuse.org/download/package?project=systemsmanagement:terraform&package=terraform-provider-libvirt)\n* [Packages for current git master](https://software.opensuse.org/download/package?project=systemsmanagement:terraform:unstable&package=terraform-provider-libvirt)\n\n## Building from source\n\n### Requirements\n\n-\t[Terraform](https://www.terraform.io/downloads.html)\n-\t[Go](https://golang.org/doc/install) (to build the provider plugin)\n-\t[libvirt](https://libvirt.org/downloads.html) 1.2.14 or newer development headers\n-\t`cgo` is required by the [libvirt-go](https://github.com/libvirt/libvirt-go) package. `export CGO_ENABLED="1"`\n\n\nThis project uses [go modules](https://github.com/golang/go/wiki/Modules) to vendor all its\ndependencies.\n\nYou do not have to interact with `modules` since the vendored packages are **already included in the repo**.\n\nEnsure you have the latest version of Go installed on your system, terraform usually\ntakes advantage of features available only inside of the latest stable release.\n\nYou need also need libvirt-dev(el) package installed.\n\n### Building The Provider\n\nClone repository to: `$GOPATH/src/github.com/dmacvicar/terraform-provider-libvirt`\n\n```console\nmkdir -p $GOPATH/src/github.com/dmacvicar; cd $GOPATH/src/github.com/dmacvicar\ngit clone https://github.com/dmacvicar/terraform-provider-libvirt.git\n```\n\nEnter the provider directory and build the provider\n\n```console\ncd $GOPATH/src/github.com/dmacvicar/terraform-provider-libvirt\nmake install\n```\n\nIf you are using Go >= 1.11, you don\'t need to build inside GOPATH:\n\n```\nexport GO111MODULE=on\nexport GOFLAGS=-mod=vendor\nmake install\n```\n\nYou will now find the binary at `$GOPATH/bin/terraform-provider-libvirt`.\n\n# Installing\n\n*  Check that libvirt daemon 1.2.14 or newer is running on the hypervisor (`virsh version --daemon`)\n* `mkisofs` is required to use the [CloudInit](website/docs/r/cloudinit.html.markdown)\n\n[Copied from the Terraform documentation](https://www.terraform.io/docs/configuration/providers.html#third-party-plugins):\n\nAt present Terraform can automatically install only the providers distributed by HashiCorp. Third-party providers can be manually installed by placing their plugin executables in one of the following locations depending on the host operating system:\n\n> On Linux and unix systems, in the sub-path `.terraform.d/plugins` in your user\'s home directory.\n\n> On Windows, in the sub-path `terraform.d/plugins` beneath your user\'s "Application Data" directory.\n\nterraform init will search this directory for additional plugins during plugin initialization.\n\n## Using the provider\n\nHere is an example that will setup the following:\n\n+ A virtual server resource\n\n(create this as libvirt.tf and run terraform commands from this directory):\n```hcl\nprovider "libvirt" {\n    uri = "qemu:///system"\n}\n```\n\nYou can also set the URI in the LIBVIRT_DEFAULT_URI environment variable.\n\nNow, define a libvirt domain:\n\n```hcl\nresource "libvirt_domain" "terraform_test" {\n  name = "terraform_test"\n}\n```\n\nNow you can see the plan, apply it, and then destroy the infrastructure:\n\n```console\n$ terraform init\n$ terraform plan\n$ terraform apply\n$ terraform destroy\n```\n\nLook at more advanced examples [here](examples/)\n\n### Using multiple hypervisors / provider instances\n\nYou can target different libvirt hosts instantiating the [provider multiple times](https://www.terraform.io/docs/configuration/providers.html#multiple-provider-instances). [Example](examples/v0.12/multiple).\n\n\n### Using qemu-agent\n\nFrom its documentation, [qemu-agent](https://wiki.libvirt.org/page/Qemu_guest_agent):\n\n>It is a daemon program running inside the domain which is supposed to help management applications with executing functions which need assistance of the guest OS.\n\nUntil terraform-provider-libvirt 0.4.2, qemu-agent was used by default to get network configuration. However, if qemu-agent is not running, this creates a delay until connecting to it times-out.\n\nIn current versions, we default to not to attempt connecting to it, and attempting to retrieve network interface information from the agent needs to be enabled explicitly with `qemu_agent = true`, further details [here](https://github.com/dmacvicar/terraform-provider-libvirt/blob/master/website/docs/r/domain.html.markdown). Note that you still need to make sure the agent is running in the OS, and that is unrelated to this option.\n\nNote: when using bridge network configurations you need to enable the `qemu_agent = true`. otherwise you will not retrieve the ip adresses of domains. \n\nBe aware that this variables may be subject to change again in future versions.\n\n## Upstream projects using terraform-libvirt:\n\n* [sumaform](https://github.com/moio/sumaform)\n   sumaform is a way to quickly configure, deploy, test [Uyuni](https://www.uyuni-project.org/) and [SUSE Manager](https://www.suse.com/products/suse-manager/) setups with clients and servers.\n\n* [ha-cluster-sap](https://github.com/SUSE/ha-sap-terraform-deployments)\n  Automated HA and SAP Deployments in Public/Private Clouds (including Libvirt/KVM)\n\n* [ceph-open-terrarium](https://github.com/MalloZup/ceph-open-terrarium)\n   ceph-open-terrarium is a way to quickly configure, deploy, tests CEPH cluster without or with [Deepsea](https://github.com/SUSE/DeepSea)\n\n* [kubic](https://github.com/kubic-project)\n    *   [kubic-terraform-kvm](https://github.com/kubic-project/kubic-terraform-kvm) Kubic Terraform script using KVM/libvirt\n\n* [Community Driven Docker Examples](contrib/)\n   Docker examples showing how to use the Libvirt Provider\n\n* [Openshift 4 Installer](https://github.com/openshift/installer)\n  The Openshift 4 Installer uses Terraform for cluster orchestration and relies on terraform-provider-libvirt for\n  libvirt platform.\n\n## Authors\n\n* Duncan Mac-Vicar P. <dmacvicar@suse.de>\n\nSee also the list of [contributors](https://github.com/dmacvicar/terraform-provider-libvirt/graphs/contributors) who participated in this project.\n\nThe structure and boilerplate is inspired from the [Softlayer](https://github.com/finn-no/terraform-provider-softlayer) and [Google](https://github.com/terraform-providers/terraform-provider-google) Terraform provider sources.\n\n## License\n\n* Apache 2.0, See LICENSE file\n'