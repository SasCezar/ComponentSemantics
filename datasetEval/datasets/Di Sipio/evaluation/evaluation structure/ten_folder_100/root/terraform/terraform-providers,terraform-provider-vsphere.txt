b'# Terraform vSphere Provider\n\nThis is the repository for the Terraform vSphere Provider, which one can use\nwith Terraform to work with VMware vSphere Products, notably [vCenter\nServer][vmware-vcenter] and [ESXi][vmware-esxi].\n\n[vmware-vcenter]: https://www.vmware.com/products/vcenter-server.html\n[vmware-esxi]: https://www.vmware.com/products/esxi-and-esx.html\n\nFor general information about Terraform, visit the [official\nwebsite][tf-website] and the [GitHub project page][tf-github].\n\n[tf-website]: https://terraform.io/\n[tf-github]: https://github.com/hashicorp/terraform\n\nThis provider plugin is maintained by the Terraform team at [HashiCorp](https://www.hashicorp.com/).\n\n# Using the Provider\n\nThe current version of this provider requires Terraform v0.10.2 or higher to\nrun.\n\nNote that you need to run `terraform init` to fetch the provider before\ndeploying. Read about the provider split and other changes to TF v0.10.0 in the\nofficial release announcement found [here][tf-0.10-announce].\n\n[tf-0.10-announce]: https://www.hashicorp.com/blog/hashicorp-terraform-0-10/\n\n## Full Provider Documentation\n\nThe provider is documented in full on the Terraform website and can be found\n[here][tf-vsphere-docs]. Check the provider documentation for details on\nentering your connection information and how to get started with writing\nconfiguration for vSphere resources.\n\n[tf-vsphere-docs]: https://www.terraform.io/docs/providers/vsphere/index.html\n\n### Controlling the provider version\n\nNote that you can also control the provider version. This requires the use of a\n`provider` block in your Terraform configuration if you have not added one\nalready.\n\nThe syntax is as follows:\n\n```hcl\nprovider "vsphere" {\n  version = "~> 1.5"\n  ...\n}\n```\n\nVersion locking uses a pessimistic operator, so this version lock would mean\nanything within the 1.x namespace, including or after 1.5.0. [Read\nmore][provider-vc] on provider version control.\n\n[provider-vc]: https://www.terraform.io/docs/configuration/providers.html#provider-versions\n\n# Building The Provider\n\n**NOTE:** Unless you are [developing](#developing-the-provider) or require a\npre-release bugfix or feature, you will want to use the officially released\nversion of the provider (see [the section above](#using-the-provider)).\n\n## Cloning the Project\n\nFirst, you will want to clone the repository to\n`$GOPATH/src/github.com/terraform-providers/terraform-provider-vsphere`:\n\n```sh\nmkdir -p $GOPATH/src/github.com/terraform-providers\ncd $GOPATH/src/github.com/terraform-providers\ngit clone git@github.com:terraform-providers/terraform-provider-vsphere\n```\n\n## Running the Build\n\nAfter the clone has been completed, you can enter the provider directory and\nbuild the provider.\n\n```sh\ncd $GOPATH/src/github.com/terraform-providers/terraform-provider-vsphere\nmake build\n```\n\n## Installing the Local Plugin\n\nAfter the build is complete, copy the `terraform-provider-vsphere` binary into\nthe same path as your `terraform` binary, and re-run `terraform init`.\n\nAfter this, your project-local `.terraform/plugins/ARCH/lock.json` (where `ARCH`\nmatches the architecture of your machine) file should contain a SHA256 sum that\nmatches the local plugin. Run `shasum -a 256` on the binary to verify the values\nmatch.\n\n# Developing the Provider\n\n**NOTE:** Before you start work on a feature, please make sure to check the\n[issue tracker][gh-issues] and existing [pull requests][gh-prs] to ensure that\nwork is not being duplicated. For further clarification, you can also ask in a\nnew issue.\n\n[gh-issues]: https://github.com/terraform-providers/terraform-provider-vsphere/issues\n[gh-prs]: https://github.com/terraform-providers/terraform-provider-vsphere/pulls\n\nIf you wish to work on the provider, you\'ll first need [Go][go-website]\ninstalled on your machine (version 1.9+ is **required**). You\'ll also need to\ncorrectly setup a [GOPATH][gopath], as well as adding `$GOPATH/bin` to your\n`$PATH`.\n\n[go-website]: https://golang.org/\n[gopath]: http://golang.org/doc/code.html#GOPATH\n\nSee [Building the Provider](#building-the-provider) for details on building the provider.\n\n# Testing the Provider\n\n**NOTE:** Testing the vSphere provider is currently a complex operation as it\nrequires having a vCenter endpoint to test against, which should be hosting a\nstandard configuration for a vSphere cluster. Some of the tests will work\nagainst ESXi, but YMMV.\n\n## Configuring Environment Variables\n\nMost of the tests in this provider require a comprehensive list of environment\nvariables to run. See the individual `*_test.go` files in the\n[`vsphere/`](vsphere/) directory for more details. The next section also\ndescribes how you can manage a configuration file of the test environment\nvariables.\n\n### Using the `.tf-vsphere-devrc.mk` file\n\nThe [`tf-vsphere-devrc.mk.example`](tf-vsphere-devrc.mk.example) file contains\nan up-to-date list of environment variables required to run the acceptance\ntests. Copy this to `$HOME/.tf-vsphere-devrc.mk` and change the permissions to\nsomething more secure (ie: `chmod 600 $HOME/.tf-vsphere-devrc.mk`), and\nconfigure the variables accordingly.\n\n## Running the Acceptance Tests\n\nAfter this is done, you can run the acceptance tests by running:\n\n```sh\n$ make testacc\n```\n\nIf you want to run against a specific set of tests, run `make testacc` with the\n`TESTARGS` parameter containing the run mask as per below:\n\n```sh\nmake testacc TESTARGS="-run=TestAccVSphereVirtualMachine"\n```\n\nThis following example would run all of the acceptance tests matching\n`TestAccVSphereVirtualMachine`. Change this for the specific tests you want to\nrun.\n'