b'# Terraboard\n\nWebsite: [https://camptocamp.github.io/terraboard](https://camptocamp.github.io/terraboard)\n\n![Terraboard Logo](logo/terraboard_logo.png)\n\n\xf0\x9f\x8c\x8d \xf0\x9f\x93\x8b A web dashboard to inspect Terraform States\n\n\n[![Docker Pulls](https://img.shields.io/docker/pulls/camptocamp/terraboard.svg)](https://hub.docker.com/r/camptocamp/terraboard/)\n[![Go Report Card](https://goreportcard.com/badge/github.com/camptocamp/terraboard)](https://goreportcard.com/report/github.com/camptocamp/terraboard)\n[![Gitter](https://img.shields.io/gitter/room/camptocamp/terraboard.svg)](https://gitter.im/camptocamp/terraboard)\n[![Build Status](https://travis-ci.org/camptocamp/terraboard.svg?branch=master)](https://travis-ci.org/camptocamp/terraboard)\n[![Coverage Status](https://coveralls.io/repos/github/camptocamp/terraboard/badge.svg?branch=master)](https://coveralls.io/github/camptocamp/terraboard?branch=master)\n[![By Camptocamp](https://img.shields.io/badge/by-camptocamp-fb7047.svg)](http://www.camptocamp.com)\n\n## What is it?\n\nTerraboard is a web dashboard to visualize and query\n[Terraform](https://terraform.io) states. It currently features:\n\n- an overview page listing the most recently updated state files with their\n  activity\n- a state page with state file details, including versions and resource\n  attributes\n- a search interface to query resources by type, name or attributes\n- a diff interface to compare state between versions\n\nIt currently only supports S3 as a remote state backend, and dynamoDB for\nretrieving lock informations.\n\n\n### Overview\n\nThe overview presents all the state files in the S3 bucket, by most recent\nmodification date.\n\n![Screenshot Overview](screenshots/main.png)\n\n\n### Search\n\nThe search view allows to find resources by various criteria.\n\n![Screenshot Search](screenshots/search.png)\n\n\n### State\n\nThe state view presents details of a Terraform state at a given version.\n\n![Screenshot State](screenshots/state.png)\n\n\n### Compare\n\nFrom the state view, you can compare the current state version with another\nversion.\n\n![Screenshot Compare](screenshots/compare.png)\n\n\n### Requirements\n\nTerraboard currently supports getting the Terraform states from AWS S3. It\nrequires:\n\n* A **versioned** S3 bucket name with one or more Terraform states,\n  named with a `.tfstate` suffix\n* AWS credentials with the following rights on the bucket:\n   - `s3:GetObject`\n   - `s3:ListBucket`\n   - `s3:ListBucketVersions`\n   - `s3:GetObjectVersion`\n* A running PostgreSQL database\n* If you want to retrieve lock states\n  [from a dynamoDB table](https://www.terraform.io/docs/backends/types/s3.html#dynamodb_table),\n  you need to make sure the provided AWS credentials have `dynamodb:Scan` access to that\n  table.\n\n## Configuration\n\nTerraboard currently supports configuration in three different ways:\n\n1. Environment variables\n2. CLI parameters\n3. Configuration file (YAML). A configuration file example can be found in the root directory of this repository.\n\nThe precedence of configurations is as described below.\n\n### Available parameters\n\n|CLI|ENV|YAML|Description|Default|\n|---|---|----|-----------|-------|\n|`-V` or `--version`| - | - | Prints version | - |\n|`-p` or `--port`|`PORT`|`web.port`|Port to listen on| 8080 |\n|`-c` or `--config-file`|`CONFIG_FILE`|-|Config File path| - |\n|`-l` or `--log-level` | `TERRABOARD_LOG_LEVEL` | `log.level` | Set log level (debug, info, warn, error, fatal, panic) | info |\n|`--log-format` | `TERRABOARD_LOG_FORMAT` | `log.format` | Set log format (plain, json) | plain |\n|`--db-host` | `DB_HOST` | `db.host` | Database host | db |\n|`--db-port` | `DB_PORT` | `db.port` | Database port | 5432 |\n|`--db-user` | `DB_USER` | `db.user` | Database user | gorm |\n|`--db-password` | `DB_PASSWORD` | `db.password` | Database password | - |\n|`--db-name` | `DB_NAME` | `db.name` | Database name | gorm |\n|`--no-sync` | - | `db.no-sync` | Do not sync database | false |\n|`--sync-interval` | - | `db.sync-interval` | DB sync interval (in minutes) | 1 |\n|`--dynamodb-table` | `AWS_DYNAMODB_TABLE` | `aws.dynamodb-table` | AWS DynamoDB table for locks | - |\n|`--s3-bucket` | `AWS_BUCKET` | `aws.bucket` | AWS S3 bucket | - |\n|`--key-prefix` | `AWS_KEY_PREFIX` | `aws.key-prefix` | AWS Key Prefix | - |\n|`--file-extension` | `AWS_FILE_EXTENSION` | `aws.file-extension` | File extension of state files | .tfstate |\n|`--base-url` | `TERRABOARD_BASE_URL` | `web.base-url` | Base URL | / |\n|`--logout-url` | `TERRABOARD_LOGOUT_URL` | `web.logout-url` | Logout URL | - |\n\n## Use with Docker\n\nEither use the included docker-compose file, or run two containers from the commandline:\nthe app itself and a PostgreSQL database for it to store information in.\n\n```shell\n# Set AWS credentials as environment variables:\nexport AWS_ACCESS_KEY_ID=<access_key>\nexport AWS_SECRET_ACCESS_KEY=<access_secret>\n# Spin up the two containers and a network for them to communciate on:\ndocker network create terranet\ndocker run --name db \\\n  -e POSTGRES_USER=gorm \\\n  -e POSTGRES_DB=gorm \\\n  -e POSTGRES_PASSWORD="<mypassword>" \\\n   --net terranet \\\n  --restart=always postgres -d\ndocker run -p 8080:8080 \\\n -e AWS_REGION="<region>" \\\n -e AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID}" \\\n -e AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY}" \\\n -e AWS_BUCKET="<bucket>" \\\n -e AWS_DYNAMODB_TABLE="<table>" \\\n -e DB_PASSWORD="<mypassword>" \\\n --net terranet \\\n camptocamp/terraboard:latest\n```\n\nThen point your browser to http://localhost:8080.\n\nTo use the included compose file, you will need to configure an [OAuth application](https://developer.github.com/apps/building-oauth-apps/).\n\nConfiguration file can be provided to the container using a [volume](https://docs.docker.com/compose/compose-file/#volumes) or a [configuration](https://docs.docker.com/compose/compose-file/#configs).\n\n## Use with Rancher\n\n[Camptocamp\'s Rancher Catalog](https://github.com/camptocamp/camptocamp-rancher-catalog)\ncontains a Terraboard template to automate its installation in Cattle.\n\n\n## Authentication and base URL\n\nTerraboard does not implement authentication. Instead, it is recommended to use\nan authentication proxy such as [oauth2_proxy](https://github.com/bitly/oauth2_proxy).\n\nIf you need to set a route path for Terraboard, you can set a base URL by\npassing it as the `BASE_URL` environment variable.\n\nWhen using an authentication proxy, Terraboard will retrieve the logged in\nuser and email from the headers passed by the proxy.\nYou can also pass a `TERRABOARD_LOGOUT_URL` parameter to allow users to\nsign out of the proxy.\n\n\n## Install from source\n\n```shell\n$ go get github.com/camptocamp/terraboard\n```\n\n## Development\n\n### Architecture\n\nTerraboard is made of two components:\n\n#### A server process\n\nThe server is written in go and runs a web server which serves:\n\n  - the API on known access points, taking the data from the PostgreSQL\n    database\n  - the index page (from [static/index.html](static/index.html)) on all other\n    URLs\n\nThe server also has a routine which regularly (every 1 minute) feeds\nthe PostgreSQL database from the S3 bucket.\n\n#### A web UI\n\nThe UI is an AngularJS application served from `index.html`. All the UI code\ncan be found in the [static/](static/) directory.\n\n\n\n### Testing\n\n```shell\n$ docker-compose build && docker-compose up -d\n# Point your browser to http://localhost\n```\n\n### Contributing\n\n\nSee [CONTRIBUTING.md](CONTRIBUTING.md)\n\n\n## Terraboard Logo\n\nThe Terraboard logo is based on [an image by Daniel R. Strebe, CC BY-SA 3.0, 15 August 2011](https://en.wikipedia.org/wiki/Azimuthal_equidistant_projection#/media/File:Azimuthal_equidistant_projection_SW.jpg)\n'