b'# Vultr Terraform Provider\n\nThis is a Terraform provider for Vultr. Find out more about [Vultr](https://www.vultr.com/about/).\n\n[![Build Status](https://travis-ci.org/squat/terraform-provider-vultr.svg?branch=master)](https://travis-ci.org/squat/terraform-provider-vultr)\n[![Go Report Card](https://goreportcard.com/badge/github.com/squat/terraform-provider-vultr)](https://goreportcard.com/report/github.com/squat/terraform-provider-vultr)\n\n## Requirements\n\n* A Vultr account and API key\n* [Terraform](https://www.terraform.io/downloads.html) 0.12+\n* [Go](https://golang.org/doc/install) 1.8 (to build the provider plugin)\n\n## Usage\n\nDownload `terraform-provider-vultr` from the [releases page](https://github.com/squat/terraform-provider-vultr/releases) and follow the instructions to [install it as a plugin](https://www.terraform.io/docs/plugins/basics.html#installing-a-plugin). After placing it into your plugins directory,  run `terraform init` to initialize it.\n\n*Note*: in order to build and install the provider from the latest commit on master, run:\n```sh\ngo get -u github.com/squat/terraform-provider-vultr\n```\n\nand then register the plugin by symlinking the binary to the [third-party plugins directory](https://www.terraform.io/docs/configuration/providers.html#third-party-plugins):\n```sh\nmkdir -p ~/.terraform.d/plugins\nln -s "$GOPATH/bin/terraform-provider-vultr" ~/.terraform.d/plugins/terraform-provider-vultr\n```\n\nSet an environment variable containing the Vultr API key:\n```\nexport VULTR_API_KEY=<your-vultr-api-key>\n```\n*Note*: as an alternative, the API key can be specified in configuration as shown below.\n\n## Examples\n\n```tf\n// Configure the Vultr provider. \n// Alternatively, export the API key as an environment variable: `export VULTR_API_KEY=<your-vultr-api-key>`.\nprovider "vultr" {\n  api_key = "<your-vultr-api-key>"\n}\n\n// Find the ID of the Silicon Valley region.\ndata "vultr_region" "silicon_valley" {\n  filter {\n    name   = "name"\n    values = ["Silicon Valley"]\n  }\n}\n\n// Find the ID for CoreOS Container Linux.\ndata "vultr_os" "container_linux" {\n  filter {\n    name   = "family"\n    values = ["coreos"]\n  }\n}\n\n// Find the ID for a starter plan.\ndata "vultr_plan" "starter" {\n  filter {\n    name   = "price_per_month"\n    values = ["5.00"]\n  }\n\n  filter {\n    name   = "ram"\n    values = ["1024"]\n  }\n}\n\n// Find the ID of an existing SSH key.\ndata "vultr_ssh_key" "squat" {\n  filter {\n    name   = "name"\n    values = ["squat"]\n  }\n}\n\n// Create a Vultr virtual machine.\nresource "vultr_instance" "example" {\n  name              = "example"\n  region_id         = "${data.vultr_region.silicon_valley.id}"\n  plan_id           = "${data.vultr_plan.starter.id}"\n  os_id             = "${data.vultr_os.container_linux.id}"\n  ssh_key_ids       = ["${data.vultr_ssh_key.squat.id}"]\n  hostname          = "example"\n  tag               = "container-linux"\n  firewall_group_id = "${vultr_firewall_group.example.id}"\n}\n\n// Create a new firewall group.\nresource "vultr_firewall_group" "example" {\n  description = "example group"\n}\n\n// Add a firewall rule to the group allowing SSH access.\nresource "vultr_firewall_rule" "ssh" {\n  firewall_group_id = "${vultr_firewall_group.example.id}"\n  cidr_block        = "0.0.0.0/0"\n  protocol          = "tcp"\n  from_port         = 22\n  to_port           = 22\n}\n```\n\n## Development\n\nTo develop the plugin locally, install the following dependencies:\n* [Go](https://golang.org/doc/install) 1.8 (to build the provider plugin)\n* [Glide](https://github.com/Masterminds/glide#install) (to install and maintain dependencies)\n* [glide-vc](https://github.com/sgotti/glide-vc#install) (to clean up dependencies)\n\nTo build the plugin run:\n```sh\nmake build\n```\n\nTo update Go dependencies run:\n```sh\nmake vendor\n```\n'