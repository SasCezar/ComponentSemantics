b"# Kubernetes - DigitalOcean - Terraform\n\nDeploy your Kubernetes cluster on DigitalOcean using Terraform.\n\n## Requirements\n\n* [DigitalOcean](https://www.digitalocean.com/) account\n* DigitalOcean Token [In DO's settings/tokens/new](https://cloud.digitalocean.com/settings/tokens/new)\n* [Terraform](https://www.terraform.io/)\n\n### On Mac\n\nWith brew installed, all tools can be installed with\n\n```bash\nbrew install terraform kubectl \n```\n\nDo all the following steps from a development machine. It does not matter _where_ it is, as long as it is connected to the internet. This one will be subsequently used to access the cluster via `kubectl`.\n\n## Generate private / public keys\n\n```\nssh-keygen -t rsa -b 4096\n```\n\nThe system will prompt you for a file path to save the key, we will go with `~/.ssh/id_rsa` in this tutorial.\n\n## Add your public key in the DigitalOcean control panel\n\n[Do it here](https://cloud.digitalocean.com/settings/security). Name it and paste the public key just below `Add SSH Key`.\n\n## Add this key to your SSH agent\n\n```bash\neval `ssh-agent -s`\nssh-add ~/.ssh/id_rsa\n```\n\n## Invoke Terraform\n\nWe put our DigitalOcean token in the file `./secrets/DO_TOKEN` (this directory is mentioned in `.gitignore`, of course, so we don't leak it)\n\nThen we setup the environment variables (step into `this repository` root).\n\n```bash\nexport TF_VAR_do_token=$(cat ./secrets/DO_TOKEN)\nexport TF_VAR_ssh_fingerprint=$(ssh-keygen -E MD5 -lf ~/.ssh/id_rsa.pub | awk '{print $2}' | sed 's/MD5://g')\n```\n\nIf you are using an older version of OpenSSH (<6.9), replace the last line with\n```bash\nexport TF_VAR_ssh_fingerprint=$(ssh-keygen -lf ~/.ssh/id_rsa.pub | awk '{print $2}')\n```\n\nThere is a convenience script for you in `./setup_terraform.sh`. Invoke it as\n\n```bash\n. ./setup_terraform.sh\n```\n\nOptionally, you can customize the datacenter *region* via:\n```bash\nexport TF_VAR_do_region=fra1\n```\nThe default region is `nyc3`. You can find a list of available regions from [DigitalOcean](https://developers.digitalocean.com/documentation/v2/#list-all-regions).\n\nAfter setup, call `terraform apply`\n\n```bash\nterraform apply\n```\n\nThat should do! `kubectl` is configured, so you can just check the nodes (`get no`) and the pods (`get po`).\n\n```bash\n$ KUBECONFIG=$PWD/secrets/admin.conf kubectl get no\nNAME          LABELS                               STATUS\nX.X.X.X   kubernetes.io/hostname=X.X.X.X   Ready     2m\nY.Y.Y.Y   kubernetes.io/hostname=Y.Y.Y.Y   Ready     2m\n\n$ KUBECONFIG=$PWD/secrets/admin.conf kubectl --namespace=kube-system get po\nNAME                                   READY     STATUS    RESTARTS   AGE\nkube-apiserver-X.X.X.X                    1/1       Running   0          13m\nkube-controller-manager-X.X.X.X           1/1       Running   0          12m\nkube-proxy-X.X.X.X                        1/1       Running   0          12m\nkube-proxy-X.X.X.X                        1/1       Running   0          11m\nkube-proxy-X.X.X.X                        1/1       Running   0          12m\nkube-scheduler-X.X.X.X                    1/1       Running   0          13m\n```\n\nYou are good to go. Now, we can keep on reading to dive into the specifics.\n\n### Setup `kubectl`\n\nAfter the installation is complete, `terraform` will put the kubeconfig in `secrets/admin.conf`. Test your brand new cluster\n\n```bash\nKUBECONF=$PWD/secrets/admin.conf kubectl get nodes\n```\n\nYou should get something similar to\n\n```\n$ kubectl get nodes\nNAME          LABELS                               STATUS\nX.X.X.X       kubernetes.io/hostname=X.X.X.X       Ready\n```\n\n### Deploy microbot with External IP\n\nThe file `04-microbot.yaml` will be rendered (i.e. replace the value `EXT_IP1`), and then `kubectl` will create the Service and Replication Controller.\n\nTo see the IP of the service, run `kubectl get svc` and look for the `EXTERNAL-IP` (should be the first worker's ext-ip).\n"