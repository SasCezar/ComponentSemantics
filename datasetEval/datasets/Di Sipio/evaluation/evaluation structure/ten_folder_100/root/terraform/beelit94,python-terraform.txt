b'## Introduction\n\npython-terraform is a python module provide a wrapper of `terraform` command line tool. \n`terraform` is a tool made by Hashicorp, please refer to https://terraform.io/\n\n### Status\n[![Build Status](https://travis-ci.org/beelit94/python-terraform.svg?branch=develop)](https://travis-ci.org/beelit94/python-terraform)\n\n## Installation\n    pip install python-terraform\n    \n## Usage\n#### For any terraform command\n\n    from python_terraform import *\n    t = Terraform()\n    return_code, stdout, stderr = t.<cmd_name>(*arguments, **options)\n\n**Note**: method name same as reserved keyword like `import` won\'t be accepted by python interpreter,\nto be able to call the method, you could call cmd_name by adding `_cmd` after command name, for example,\n`import` here could be called by\n\n    from python_terraform import *\n    t = Terraform()\n    return_code, stdout, stderr = t.import_cmd(*arguments, **options)\n\nor just call cmd method directly\n\n    from python_terraform import *\n    t = Terraform()\n    return_code, stdout, stderr = t.cmd(<cmd_name>, *arguments, **options)\n    \n#### For any argument\nsimply pass the string to arguments of the method, for example,\n\n    terraform apply target_dir \n        --> <instance>.apply(\'target_dir\')\n    terraform import aws_instance.foo i-abcd1234 \n        --> <instance>.import(\'aws_instance.foo\', \'i-abcd1234\')\n\n#### For any options\n    \n* dash to underscore\n\n    remove first dash, and then use underscore to replace dash symbol as option name\n        \n        ex. -no-color --> no_color\n\n* for a simple flag option\n\n    use ```IsFlagged/None``` as value for raising/not raising flag, for example, \n    \n        terraform taint -allow-missing \n           --> <instance>.taint(allow\xef\xbc\xbfmissing=IsFlagged)\n        terraform taint \n           --> <instance>.taint(allow\xef\xbc\xbfmissing=None) or <instance>.taint()\n        terraform apply -no-color\n           --> <instance>.apply(no_color=IsFlagged)\n        \n* for a boolean value option\n    \n    assign True or False, for example,\n    \n        terraform apply -refresh=true --> <instance>.apply(refresh=True)\n         \n* if a flag could be used multiple times, assign a list to it\'s value\n        \n        terraform apply -target=aws_instance.foo[1] -target=aws_instance.foo[2]\n        ---> \n        <instance>.apply(target=[\'aws_instance.foo[1]\', \'aws_instance.foo[2]\'])\n* for the "var" flag, assign dictionary to it\n\n        terraform apply -var=\'a=b\' -var=\'c=d\'\n        --> tf.apply(var={\'a\':\'b\', \'c\':\'d\'})\n* if an option with None as value, it won\'t be used\n\n#### Terraform Output\n\nBy default, stdout and stderr are captured and returned. This causes the application to appear to hang. To print terraform output in real time, provide the `capture_output` option with any value other than `None`. This will cause the output of terraform to be printed to the terminal in real time. The value of `stdout` and `stderr` below will be `None`.\n\n\n    from python_terraform import Terraform\n    t = Terraform()\n    return_code, stdout, stderr = t.<cmd_name>(capture_output=False)\n\n## Examples\n### Have a test.tf file under folder "/home/test" \n#### 1. apply with variables a=b, c=d, refresh=false, no color in the output\nIn shell:\n\n    cd /home/test\n    terraform apply -var=\'a=b\' -var=\'c=d\' -refresh=false -no-color\n    \nIn python-terraform:\n\n    from python_terraform import *\n    tf = Terraform(working_dir=\'/home/test\')\n    tf.apply(no_color=IsFlagged, refresh=False, var={\'a\':\'b\', \'c\':\'d\'})\n    \nor\n\n    from python_terraform import *\n    tf = Terraform()\n    tf.apply(\'/home/test\', no_color=IsFlagged, refresh=False, var={\'a\':\'b\', \'c\':\'d\'})\n\nor\n\n    from python_terraform import *\n    tf = Terraform(working_dir=\'/home/test\', variables={\'a\':\'b\', \'c\':\'d\'})\n    tf.apply(no_color=IsFlagged, refresh=False)\n    \n#### 2. fmt command, diff=true\nIn shell:\n\n    cd /home/test\n    terraform fmt -diff=true \n    \nIn python-terraform:\n    \n    from python_terraform import *\n    tf = terraform(working_dir=\'/home/test\')\n    tf.fmt(diff=True)\n\n    \n## default values\nfor apply/plan/destroy command, assign with following default value to make \ncaller easier in python\n\n1. ```input=False```, in this case process won\'t hang because you missing a variable\n1. ```no_color=IsFlagged```, in this case, stdout of result is easier for parsing\n\n## Implementation\nIMHO, how terraform design boolean options is confusing. \nTake `input=True` and `-no-color` option of `apply` command for example,\nthey\'re all boolean value but with different option type. \nThis make api caller don\'t have a general rule to follow but to do \na exhaustive method implementation which I don\'t prefer to.\nTherefore I end-up with using `IsFlagged` or `IsNotFlagged` as value of option \nlike `-no-color` and `True/False` value reserved for option like `refresh=true`\n\n\n\n\n    \n\n    \n    \n'