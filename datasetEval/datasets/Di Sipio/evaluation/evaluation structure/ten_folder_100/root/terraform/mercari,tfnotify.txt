b'tfnotify\n========\n\n[![][circleci-svg]][circleci] [![][codecov-svg]][codecov] [![][goreportcard-svg]][goreportcard]\n\n[circleci]: https://circleci.com/gh/mercari/tfnotify/tree/master\n[circleci-svg]: https://circleci.com/gh/mercari/tfnotify/tree/master.svg?style=svg\n[codecov]: https://codecov.io/gh/mercari/tfnotify\n[codecov-svg]: https://codecov.io/gh/mercari/tfnotify/branch/master/graph/badge.svg\n[goreportcard]: https://goreportcard.com/report/github.com/mercari/tfnotify\n[goreportcard-svg]: https://goreportcard.com/badge/github.com/mercari/tfnotify\n\ntfnotify parses Terraform commands\' execution result and applies it to an arbitrary template and then notifies it to GitHub comments etc.\n\n## Motivation\n\nThere are commands such as `plan` and `apply` on Terraform command, but many developers think they would like to check if the execution of those commands succeeded.\nTerraform commands are often executed via CI like Circle CI, but in that case you need to go to the CI page to check it.\nThis is very troublesome. It is very efficient if you can check it with GitHub comments or Slack etc.\nYou can do this by using this command.\n\n<img src="./misc/images/1.png" width="600">\n\n<img src="./misc/images/2.png" width="500">\n\n<img src="./misc/images/3.png" width="600">\n\n## Installation\n\nGrab the binary from GitHub Releases (Recommended)\n\nor\n\n```console\n$ go get -u github.com/mercari/tfnotify\n```\n\n\n### What tfnotify does\n\n1. Parse the execution result of Terraform\n2. Bind parsed results to Go templates\n3. Notify it to any platform (e.g. GitHub) as you like\n\nDetailed specifications such as templates and notification destinations can be customized from the configration files (described later).\n\n## Usage\n\n### Basic\n\ntfnotify is just CLI command. So you can run it from your local after grabbing the binary.\n\nBasically tfnotify waits for the input from Stdin. So tfnotify needs to pipe the output of Terraform command like the following:\n\n```console\n$ terraform plan | tfnotify plan\n```\n\nFor `plan` command, you also need to specify `plan` as the argument of tfnotify. In the case of `apply`, you need to do `apply`. Currently supported commands can be checked with `tfnotify --help`.\n\n### Configurations\n\nWhen running tfnotify, you can specify the configuration path via `--config` option (if it\'s omitted, it defaults to `{.,}tfnotify.y{,a}ml`).\n\nThe example settings of GitHub and GitHub Enterprise, Slack, [Typetalk](https://www.typetalk.com/) are as follows. Incidentally, there is no need to replace TOKEN string such as `$GITHUB_TOKEN` with the actual token. Instead, it must be defined as environment variables in CI settings.\n\n[template](https://golang.org/pkg/text/template/) of Go can be used for `template`. The templates can be used in `tfnotify.yaml` are as follows:\n\nPlaceholder | Usage\n---|---\n`{{ .Title }}` | Like `## Plan result`\n`{{ .Message }}` | A string that can be set from CLI with `--message` option\n`{{ .Result }}` | Matched result by parsing like `Plan: 1 to add` or `No changes`\n`{{ .Body }}` | The entire of Terraform execution result\n`{{ .Link }}` | The link of the build page on CI\n\n#### Template Examples\n\n<details>\n<summary>For GitHub</summary>\n\n```yaml\n---\nci: circleci\nnotifier:\n  github:\n    token: $GITHUB_TOKEN\n    repository:\n      owner: "mercari"\n      name: "tfnotify"\nterraform:\n  fmt:\n    template: |\n      {{ .Title }}\n\n      {{ .Message }}\n\n      {{ .Result }}\n\n      {{ .Body }}\n  plan:\n    template: |\n      {{ .Title }} <sup>[CI link]( {{ .Link }} )</sup>\n      {{ .Message }}\n      {{if .Result}}\n      <pre><code>{{ .Result }}\n      </pre></code>\n      {{end}}\n      <details><summary>Details (Click me)</summary>\n\n      <pre><code>{{ .Body }}\n      </pre></code></details>\n  apply:\n    template: |\n      {{ .Title }}\n      {{ .Message }}\n      {{if .Result}}\n      <pre><code>{{ .Result }}\n      </pre></code>\n      {{end}}\n      <details><summary>Details (Click me)</summary>\n\n      <pre><code>{{ .Body }}\n      </pre></code></details>\n```\n\n</details>\n\n<details>\n<summary>For GitHub Enterprise</summary>\n\n```yaml\n---\nci: circleci\nnotifier:\n  github:\n    token: $GITHUB_TOKEN\n    base_url: $GITHUB_BASE_URL\n    repository:\n      owner: "mercari"\n      name: "tfnotify"\nterraform:\n  fmt:\n    template: |\n      {{ .Title }}\n\n      {{ .Message }}\n\n      {{ .Result }}\n\n      {{ .Body }}\n  plan:\n    template: |\n      {{ .Title }} <sup>[CI link]( {{ .Link }} )</sup>\n      {{ .Message }}\n      {{if .Result}}\n      <pre><code>{{ .Result }}\n      </pre></code>\n      {{end}}\n      <details><summary>Details (Click me)</summary>\n\n      <pre><code>{{ .Body }}\n      </pre></code></details>\n  apply:\n    template: |\n      {{ .Title }}\n      {{ .Message }}\n      {{if .Result}}\n      <pre><code>{{ .Result }}\n      </pre></code>\n      {{end}}\n      <details><summary>Details (Click me)</summary>\n\n      <pre><code>{{ .Body }}\n      </pre></code></details>\n```\n\n</details>\n\n<details>\n<summary>For GitLab</summary>\n\n```yaml\n---\nci: gitlabci\nnotifier:\n  gitlab:\n    token: $GITLAB_TOKEN\n    base_url: $GITLAB_BASE_URL\n    repository:\n      owner: "mercari"\n      name: "tfnotify"\nterraform:\n  fmt:\n    template: |\n      {{ .Title }}\n\n      {{ .Message }}\n\n      {{ .Result }}\n\n      {{ .Body }}\n  plan:\n    template: |\n      {{ .Title }} <sup>[CI link]( {{ .Link }} )</sup>\n      {{ .Message }}\n      {{if .Result}}\n      <pre><code> {{ .Result }}\n      </pre></code>\n      {{end}}\n      <details><summary>Details (Click me)</summary>\n      <pre><code> {{ .Body }}\n      </pre></code></details>\n  apply:\n    template: |\n      {{ .Title }}\n      {{ .Message }}\n      {{if .Result}}\n      <pre><code> {{ .Result }}\n      </pre></code>\n      {{end}}\n      <details><summary>Details (Click me)</summary>\n      <pre><code> {{ .Body }}\n      </pre></code></details>\n```\n</details>\n\n<details>\n<summary>For Slack</summary>\n\n```yaml\n---\nci: circleci\nnotifier:\n  slack:\n    token: $SLACK_TOKEN\n    channel: $SLACK_CHANNEL_ID\n    bot: $SLACK_BOT_NAME\nterraform:\n  plan:\n    template: |\n      {{ .Message }}\n      {{if .Result}}\n      ```\n      {{ .Result }}\n      ```\n      {{end}}\n      ```\n      {{ .Body }}\n      ```\n```\n\n</details>\n\n<details>\n<summary>For Typetalk</summary>\n\n```yaml\n---\nci: circleci\nnotifier:\n  typetalk:\n    token: $TYPETALK_TOKEN\n    topic_id: $TYPETALK_TOPIC_ID\nterraform:\n  plan:\n    template: |\n      {{ .Message }}\n      {{if .Result}}\n      ```\n      {{ .Result }}\n      ```\n      {{end}}\n      ```\n      {{ .Body }}\n      ```\n```\n\n</details>\n\n### Supported CI\n\nCurrently, supported CI are here:\n\n- Circle CI\n- Travis CI\n- AWS CodeBuild\n- TeamCity\n- Drone\n- Jenkins\n- GitLab CI\n\n### Private Repository Considerations\nGitHub private repositories require the `repo` and `write:discussion` permissions.\n\n### Jenkins Considerations\n- Plugin\n  - [Git Plugin](https://wiki.jenkins.io/display/JENKINS/Git+Plugin)\n- Environment Variable\n  - `PULL_REQUEST_NUMBER` or `PULL_REQUEST_URL` are required to set by user for Pull Request Usage\n\n## Committers\n\n * Masaki ISHIYAMA ([@b4b4r07](https://github.com/b4b4r07))\n\n## Contribution\n\nPlease read the CLA below carefully before submitting your contribution.\n\nhttps://www.mercari.com/cla/\n\n## License\n\nCopyright 2018 Mercari, Inc.\n\nLicensed under the MIT License.\n'