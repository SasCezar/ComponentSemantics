b'<img src=\'https://github.com/eerkunt/terraform-compliance/blob/master/logo.png\' align=right height=100 valign=top><h1 align="center">terraform-compliance</h1>\n\n<div align="center">\n  <!-- Website -->\n  <a href="https://terraform-compliance.com">\n    <img src="https://img.shields.io/badge/website-https%3A%2F%2Fterraform--compliance.com-blue" alt="Website" />\n  </a>\n  \n  <!-- Build Status -->\n  <a href="https://travis-ci.org/eerkunt/terraform-compliance">\n    <img src="https://img.shields.io/travis/eerkunt/terraform-compliance/master.svg" alt="Build" />\n  </a>\n  \n  <!-- Coverage -->\n  <a href="https://coveralls.io/repos/github/eerkunt/terraform-compliance/">\n    <img src="https://coveralls.io/repos/github/eerkunt/terraform-compliance/badge.svg?branch=master" alt="coverage report" />\n  </a>\n  \n  \n  <!-- Docker Ready -->\n  <a href="https://hub.docker.com/r/eerkunt/terraform-compliance/">\n    <img src="https://img.shields.io/badge/docker-ready-blue.svg?longCache=true&style=flat" alt="docker version is ready" />\n  </a>\n\n  <!-- License -->\n  <a href="https://pypi.org/project/terraform-compliance/">\n    <img src="https://img.shields.io/pypi/l/terraform-compliance.svg" alt="License" />\n  </a>\n\n  <!-- PyPI Version -->\n  <a href="https://pypi.org/project/terraform-compliance/">\n    <img src="https://img.shields.io/pypi/v/terraform-compliance.svg" alt="Package Version" />\n  </a>\n</div>\n\n<br />\n<br />\n\n`terraform-compliance` is a lightweight, security and compliance focused test framework against terraform to enable negative testing capability for your infrastructure-as-code.\n\n\n- __compliance:__ Ensure the implemented code is following security standards, your own custom standards\n- __behaviour driven development:__ We have BDD for nearly everything, why not for IaC ?\n- __portable:__ just install it from `pip` or run it via `docker`. See [Installation](https://terraform-compliance.com/pages/installation/)\n- __pre-deploy:__ it validates your code before it is deployed\n- __easy to integrate:__ it can run in your pipeline (or in git hooks) to ensure all deployments are validated.\n- __segregation of duty:__ you can keep your tests in a different repository where a separate team is responsible. \n- __why ?:__ why not ?\n\n## Idea\n\n`terraform-compliance` mainly focuses on [negative testing](https://en.wikipedia.org/wiki/Negative_testing) instead\nof having fully-fledged [functional tests](https://en.wikipedia.org/wiki/Functional_testing) that are mostly used for\nproving a component of code is performing properly. \n\nFortunately, `terraform` is a marvellous abstraction layer for any API \nthat __creates__/__updates__/__destroys__ entities. `terraform` also provides the \n[capability](https://www.terraform.io/docs/commands/plan.html#detailed-exitcode) \nto ensure everything is up-to-date between the local configuration and the remote API(s) responses. \n\nGiven the fact, `terraform` is used mostly against Cloud APIs, what was missing is to ensure \nyour code against your infrastructure must follow specific policies. Currently HashiCorp provides \n[Sentinel](https://www.hashicorp.com/sentinel/) for Enterprise Products. `terraform-compliance` is providing a \nsimilar functionality only for `terraform` while it is free-to-use and it is Open Source.\n\nE.g. a sample policy could be, if you are working with `AWS`, you should not create an `S3 bucket`, \nwithout having any `encryption`. Of course, this is just an example which may or not be applicable \nfor your case.\n\n`terraform-compliance` provides a test framework to create these policies that will be executed against \nyour [terraform plan](https://www.terraform.io/docs/commands/plan.html) in a context where both \ndevelopers and security teams can understand easily while reading it, by applying [Behaviour Driven \nDevelopment](https://en.wikipedia.org/wiki/Behavior-driven_development) Principles.\n\nAs returning back to the example, our example defined above will be translated into a BDD Feature \nand Scenario, as also seen in below ;\n\n```\nif you are working with AWS, you should not create an S3 bucket, without having any encryption\n```\n\ntranslates into ;\n\n```gherkin\nGiven I have AWS S3 Bucket defined\nThen it must contain server_side_encryption_configuration\n```\n\n`server_side_encryption_configuration` is coming from the terraform code, as shown below ;\n\n```\nresource "aws_s3_bucket" "b" {\n  bucket = "my-bucket"\n  acl    = "private"\n\n  server_side_encryption_configuration {\n    rule {\n      apply_server_side_encryption_by_default {\n        kms_master_key_id = "${aws_kms_key.mykey.arn}"\n        sse_algorithm     = "aws:kms"\n      }\n    }\n  }\n}\n```\n\nThis policy ( Scenario ) will allow all S3 buckets newly created or updated must have encryption configuration set within the code. In an ideal way, this Scenario (among with all other Scenarios) will run on a CI/CD pipeline that will ensure that nothing is deployed by violating your policies.\n\nSee [Examples](https://terraform-compliance.com/pages/Examples/) for more sample use cases.\n\n![Example Run](https://github.com/eerkunt/terraform-compliance/blob/master/terraform-compliance-demo.gif?raw=true)\n\n## Supporting / Requirements\n\n`terraform-compliance` only supports `terraform` 0.12.+. In order to use older versions of `terraform`,\nyou can use [0.6.4](https://github.com/eerkunt/terraform-compliance/releases/tag/0.6.4) of the tool, \nbut many capabilities will not be supported and maintaining of `0.6.4` version is ended.\n\nSome of the features that you will be missing can be listed as ;\n\n- Complete `terraform` interpolations support\n- `terraform` modules, variables and providers support.\n- Any filtering function for advanced queries\n- Many missing resources requires `tag`ging.\n- .. and many more ..\n\nYou can have a look to the [CHANGELOG](https://github.com/eerkunt/terraform-compliance/blob/master/CHANGELOG.md)\nfor further information.\n\n## License\n[MIT](https://tldrlegal.com/license/mit-license)\n'