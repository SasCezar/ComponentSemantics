b'# Terraforming\n\n[![Build Status](https://travis-ci.org/dtan4/terraforming.svg?branch=master)](https://travis-ci.org/dtan4/terraforming)\n[![Code Climate](https://codeclimate.com/github/dtan4/terraforming/badges/gpa.svg)](https://codeclimate.com/github/dtan4/terraforming)\n[![Coverage Status](https://coveralls.io/repos/github/dtan4/terraforming/badge.svg?branch=increase-test-cov-160528)](https://coveralls.io/github/dtan4/terraforming)\n[![Gem Version](https://badge.fury.io/rb/terraforming.svg)](http://badge.fury.io/rb/terraforming)\n[![MIT License](http://img.shields.io/badge/license-MIT-blue.svg?style=flat)](LICENSE)\n[![Docker Repository on Quay.io](https://quay.io/repository/dtan4/terraforming/status "Docker Repository on Quay.io")](https://quay.io/repository/dtan4/terraforming)\n[![Join the chat at https://gitter.im/dtan4/terraforming](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/dtan4/terraforming?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nExport existing AWS resources to [Terraform](https://terraform.io/) style (tf, tfstate)\n\n- [Supported version](#supported-version)\n- [Installation](#installation)\n- [Prerequisites](#prerequisites)\n- [Usage](#usage)\n  -  [Export tf](#export-tf)\n  -  [Export tfstate](#export-tfstate)\n    -  [Example: Export all](#example-export-all)\n- [Run as Docker container](#run-as-docker-container-)\n- [Development](#development)\n- [Contributing](#contributing)\n- [Similar projects](#similar-projects)\n- [License](#license)\n\n## Supported version\n\n- Ruby 2.3 or higher is required\n- Terraform v0.9.3 or higher is recommended\n  - Some resources (e.g. `iam_instance_profile`) uses newer resource specification\n\n## Installation\n\nAdd this line to your application\'s Gemfile:\n\n```ruby\ngem \'terraforming\'\n```\n\nAnd then execute:\n\n    $ bundle\n\nOr install it yourself as:\n\n    $ gem install terraforming\n\n## Prerequisites\n\nYou need to set AWS credentials.\n\n```bash\nexport AWS_ACCESS_KEY_ID=XXXXXXXXXXXXXXXXXXXX\nexport AWS_SECRET_ACCESS_KEY=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\nexport AWS_REGION=xx-yyyy-0\n```\n\nYou can also specify credential profile in `~/.aws/credentials` by `--profile` option.\n\n```bash\n$ cat ~/.aws/credentials\n[hoge]\naws_access_key_id = Hoge\naws_secret_access_key = FugaFuga\n\n# Pass profile name by --profile option\n$ terraforming s3 --profile hoge\n```\n\nYou can assume a role by using the `--assume` option.\n\n```bash\n$ terraforming s3 --assume arn:aws:iam::123456789123:role/test-role\n```\n\nYou can force the AWS SDK to utilize the CA certificate that is bundled with the SDK for systems where the default OpenSSL certificate is not installed (e.g. Windows) by utilizing the `--use-bundled-cert` option.\n\n```bash\nPS C:\\> terraforming ec2 --use-bundled-cert\n```\n\n## Usage\n\n```bash\n$ terraforming\nCommands:\n  terraforming alb             # ALB\n  terraforming asg             # AutoScaling Group\n  terraforming cwa             # CloudWatch Alarm\n  terraforming dbpg            # Database Parameter Group\n  terraforming dbsg            # Database Security Group\n  terraforming dbsn            # Database Subnet Group\n  terraforming ddb             # DynamoDB\n  terraforming ec2             # EC2\n  terraforming ecc             # ElastiCache Cluster\n  terraforming ecsn            # ElastiCache Subnet Group\n  terraforming efs             # EFS File System\n  terraforming eip             # EIP\n  terraforming elb             # ELB\n  terraforming help [COMMAND]  # Describe available commands or one specific command\n  terraforming iamg            # IAM Group\n  terraforming iamgm           # IAM Group Membership\n  terraforming iamgp           # IAM Group Policy\n  terraforming iamip           # IAM Instance Profile\n  terraforming iamp            # IAM Policy\n  terraforming iampa           # IAM Policy Attachment\n  terraforming iamr            # IAM Role\n  terraforming iamrp           # IAM Role Policy\n  terraforming iamu            # IAM User\n  terraforming iamup           # IAM User Policy\n  terraforming igw             # Internet Gateway\n  terraforming kmsa            # KMS Key Alias\n  terraforming kmsk            # KMS Key\n  terraforming lc              # Launch Configuration\n  terraforming nacl            # Network ACL\n  terraforming nat             # NAT Gateway\n  terraforming nif             # Network Interface\n  terraforming r53r            # Route53 Record\n  terraforming r53z            # Route53 Hosted Zone\n  terraforming rds             # RDS\n  terraforming rs              # Redshift\n  terraforming rt              # Route Table\n  terraforming rta             # Route Table Association\n  terraforming s3              # S3\n  terraforming sg              # Security Group\n  terraforming sn              # Subnet\n  terraforming snst            # SNS Topic\n  terraforming snss            # SNS Subscription\n  terraforming sqs             # SQS\n  terraforming vgw             # VPN Gateway\n  terraforming vpc             # VPC\n\nOptions:\n  [--merge=MERGE]                                # tfstate file to merge\n  [--overwrite], [--no-overwrite]                # Overwrite existng tfstate\n  [--tfstate], [--no-tfstate]                    # Generate tfstate\n  [--profile=PROFILE]                            # AWS credentials profile\n  [--region=REGION]                              # AWS region\n  [--use-bundled-cert], [--no-use-bundled-cert]  # Use the bundled CA certificate from AWS SDK\n```\n\n### Export tf\n\n```bash\n$ terraforming <resource> [--profile PROFILE]\n```\n\n(e.g. S3 buckets):\n\n```bash\n$ terraforming s3\n```\n\n```hcl\nresource "aws_s3_bucket" "hoge" {\n    bucket = "hoge"\n    acl    = "private"\n}\n\nresource "aws_s3_bucket" "fuga" {\n    bucket = "fuga"\n    acl    = "private"\n}\n```\n\n### Export tfstate\n\n```bash\n$ terraforming <resource> --tfstate [--merge TFSTATE_PATH] [--overwrite] [--profile PROFILE]\n```\n\n(e.g. S3 buckets):\n\n```bash\n$ terraforming s3 --tfstate\n```\n\n```json\n{\n  "version": 1,\n  "serial": 1,\n  "modules": {\n    "path": [\n      "root"\n    ],\n    "outputs": {\n    },\n    "resources": {\n      "aws_s3_bucket.hoge": {\n        "type": "aws_s3_bucket",\n        "primary": {\n          "id": "hoge",\n          "attributes": {\n            "acl": "private",\n            "bucket": "hoge",\n            "id": "hoge"\n          }\n        }\n      },\n      "aws_s3_bucket.fuga": {\n        "type": "aws_s3_bucket",\n        "primary": {\n          "id": "fuga",\n          "attributes": {\n            "acl": "private",\n            "bucket": "fuga",\n            "id": "fuga"\n          }\n        }\n      }\n    }\n  }\n}\n```\n\nIf you want to merge exported tfstate to existing `terraform.tfstate`, specify `--tfstate --merge=/path/to/terraform.tfstate` option.\nYou can overwrite existing `terraform.tfstate` by specifying `--overwrite` option together.\n\nExisting `terraform.tfstate`:\n\n```bash\n# /path/to/terraform.tfstate\n\n{\n  "version": 1,\n  "serial": 88,\n  "remote": {\n    "type": "s3",\n    "config": {\n      "bucket": "terraforming-tfstate",\n      "key": "tf"\n    }\n  },\n  "modules": {\n    "path": [\n      "root"\n    ],\n    "outputs": {\n    },\n    "resources": {\n      "aws_elb.hogehoge": {\n        "type": "aws_elb",\n        "primary": {\n          "id": "hogehoge",\n          "attributes": {\n            "availability_zones.#": "2",\n            "connection_draining": "true",\n            "connection_draining_timeout": "300",\n            "cross_zone_load_balancing": "true",\n            "dns_name": "hoge-12345678.ap-northeast-1.elb.amazonaws.com",\n            "health_check.#": "1",\n            "id": "hogehoge",\n            "idle_timeout": "60",\n            "instances.#": "1",\n            "listener.#": "1",\n            "name": "hoge",\n            "security_groups.#": "2",\n            "source_security_group": "default",\n            "subnets.#": "2"\n          }\n        }\n      }\n    }\n  }\n}\n```\n\nTo generate merged tfstate:\n\n```bash\n$ terraforming s3 --tfstate --merge=/path/to/tfstate\n```\n\n```json\n{\n  "version": 1,\n  "serial": 89,\n  "remote": {\n    "type": "s3",\n    "config": {\n      "bucket": "terraforming-tfstate",\n      "key": "tf"\n    }\n  },\n  "modules": {\n    "path": [\n      "root"\n    ],\n    "outputs": {\n    },\n    "resources": {\n      "aws_elb.hogehoge": {\n        "type": "aws_elb",\n        "primary": {\n          "id": "hogehoge",\n          "attributes": {\n            "availability_zones.#": "2",\n            "connection_draining": "true",\n            "connection_draining_timeout": "300",\n            "cross_zone_load_balancing": "true",\n            "dns_name": "hoge-12345678.ap-northeast-1.elb.amazonaws.com",\n            "health_check.#": "1",\n            "id": "hogehoge",\n            "idle_timeout": "60",\n            "instances.#": "1",\n            "listener.#": "1",\n            "name": "hoge",\n            "security_groups.#": "2",\n            "source_security_group": "default",\n            "subnets.#": "2"\n          }\n        }\n      },\n      "aws_s3_bucket.hoge": {\n        "type": "aws_s3_bucket",\n        "primary": {\n          "id": "hoge",\n          "attributes": {\n            "acl": "private",\n            "bucket": "hoge",\n            "id": "hoge"\n          }\n        }\n      },\n      "aws_s3_bucket.fuga": {\n        "type": "aws_s3_bucket",\n        "primary": {\n          "id": "fuga",\n          "attributes": {\n            "acl": "private",\n            "bucket": "fuga",\n            "id": "fuga"\n          }\n        }\n      }\n    }\n  }\n}\n```\n\nAfter writing exported tf and tfstate to files, execute `terraform plan` and check the result.\nThere should be no diff.\n\n```bash\n$ terraform plan\nNo changes. Infrastructure is up-to-date. This means that Terraform\ncould not detect any differences between your configuration and\nthe real physical resources that exist. As a result, Terraform\ndoesn\'t need to do anything.\n```\n\n#### Example: Export all\nExample assuming you want to export everything from us-west-2 and you are using ~/.aws/credentials with a `default` profile\n```bash\nexport AWS_REGION=us-west-2\nterraforming help | grep terraforming | grep -v help | awk \'{print "terraforming", $2, "--profile", "default", ">", $2".tf";}\' | bash\n# find files that only have 1 empty line (likely nothing in AWS)\nfind . -type f -name \'*.tf\' | xargs wc -l | grep \' 1 .\'\n```\n\n### Caveats\n\n- `terraforming kmsk` does not export EXTERNAL origin key, bacause Terraform does not support it.\n\n## Run as Docker container [![Docker Repository on Quay.io](https://quay.io/repository/dtan4/terraforming/status "Docker Repository on Quay.io")](https://quay.io/repository/dtan4/terraforming)\n\nTerraforming Docker Image is available at [quay.io/dtan4/terraforming](https://quay.io/repository/dtan4/terraforming) and developed at [dtan4/dockerfile-terraforming](https://github.com/dtan4/dockerfile-terraforming).\n\nPull the Docker image:\n\n```bash\n$ docker pull quay.io/dtan4/terraforming:latest\n```\n\nAnd then run Terraforming as a Docker container:\n\n```bash\n$ docker run \\\n    --rm \\\n    --name terraforming \\\n    -e AWS_ACCESS_KEY_ID=XXXXXXXXXXXXXXXXXXXX \\\n    -e AWS_SECRET_ACCESS_KEY=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx \\\n    -e AWS_REGION=xx-yyyy-0 \\\n    quay.io/dtan4/terraforming:latest \\\n    terraforming s3\n```\n\n## Development\n\nAfter checking out the repo, run `script/setup` to install dependencies. Then, run `script/console` for an interactive prompt that will allow you to experiment.\n\nTo install this gem onto your local machine, run `bundle exec rake install`. To release a new version, update the version number in `version.rb`, and then run `bundle exec rake release` to create a git tag for the version, push git commits and tags, and push the `.gem` file to [rubygems.org](https://rubygems.org).\n\n## Contributing\n\nPlease read [Contribution Guide](CONTRIBUTING.md) at first.\n\n1. Fork it ( https://github.com/dtan4/terraforming/fork )\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am \'Add some feature\'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Similar projects\n\nThere are some similar tools to import your existing infrastructure to Terraform configuration.\n\n- [GoogleCloudPlatform/terraformer](https://github.com/GoogleCloudPlatform/terraformer)\n- [cycloidio/terracognita](https://github.com/cycloidio/terracognita/)\n\n## License\n\n[![MIT License](http://img.shields.io/badge/license-MIT-blue.svg?style=flat)](LICENSE)\n'