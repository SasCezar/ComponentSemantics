b'# tf_aws_bastion_s3_keys\n\nA Terraform module for creating resilient bastion host using auto-scaling group (min=max=desired=1) and populate its `~/.ssh/authorized_keys` with public keys fetched from S3 bucket.\n\nThis module can append public keys, setup cron to update them and run additional commands at the end of setup. Note that if it is set up to update the keys, removing a key from the bucket will also remove it from the bastion host.\n\nOnly SSH access is allowed to the bastion host.\n\n## Input variables:\n\n  * `name` - Name (default, `bastion`)\n  * `instance_type` - Instance type (default, `t2.micro`)\n  * `instance_volume_size_gb` - The root volume size, in gigabytes (default, `8`)\n  * `ami` - AMI ID of Ubuntu (see `samples/ami.tf`)\n  * `region` - Region (default, `eu-west-1`)\n  * `iam_instance_profile` - IAM instance profile which is allowed to access S3 bucket (see `samples/iam_s3_readonly.tf`)\n  * `enable_monitoring` - Whether to enable detailed monitoring (default, `true`)\n  * `s3_bucket_name` - S3 bucket name which contains public keys (see `samples/s3_ssh_public_keys.tf`)\n  * `s3_bucket_uri `\xe2\x80\x93 S3 URI which contains the public keys. If specified, `s3_bucket_name` will be ignored\n  * `vpc_id` - VPC where bastion host should be created\n  * `subnet_ids` - List of subnet IDs where auto-scaling should create instances\n  * `keys_update_frequency` - How often to update keys. A cron timespec or an empty string to turn off (default)\n  * `additional_user_data_script` - Additional user-data script to run at the end\n  * `associate_public_ip_address` - Whether to auto-assign public IP to the instance (by default - `false`)\n  * `eip` - EIP to put into EC2 tag (can be used with scripts like https://github.com/skymill/aws-ec2-assign-elastic-ip, default - empty value)\n  * `key_name` - Launch configuration key name to be applied to created instance(s).\n  * `allowed_cidr` - A list of CIDR Networks to allow ssh access to. Defaults to "0.0.0.0/0"\n  * `allowed_ipv6_cidr` - A list of IPv6 CIDR Networks to allow ssh access to. Defaults to "::/0"\n  * `allowed_security_groups` - A list of Security Group ID\'s to allow access to the bastion host (useful if bastion is deployed internally) Defaults to empty list\n  * `extra_tags` - Optional a list of Key/Values Tags to be associated to the bastion host (see [Interpolated Tags](https://www.terraform.io/docs/providers/aws/r/autoscaling_group.html))\n  * `apply_changes_immediately` - Whether to apply `aws_launch_configuration` and update instances in autoscaling group (by default - `false`)\n\n## Outputs:\n\n  * `ssh_user` - SSH user to login to bastion\n  * `security_group_id` - ID of the security group the bastion host is launched in\n  * `asg_id` - The ID of the AutoScalingGroup the bastion host is launched within\n\n## Example:\n\nBasic example - In your terraform code add something like this:\n\n```hcl\nmodule "bastion" {\n  source                      = "github.com/terraform-community-modules/tf_aws_bastion_s3_keys"\n  instance_type               = "t2.micro"\n  ami                         = "ami-123456"\n  region                      = "eu-west-1"\n  iam_instance_profile        = "s3_readonly"\n  s3_bucket_name              = "public-keys-demo-bucket"\n  vpc_id                      = "vpc-123456"\n  subnet_ids                  = ["subnet-123456", "subnet-6789123", "subnet-321321"]\n  keys_update_frequency       = "5,20,35,50 * * * *"\n  additional_user_data_script = "date"\n}\n```\n\nIf you want to assign EIP to instance launched by an auto-scaling group you can provide the desired `eip` as module input and then execute `additional_user_data_script` which sets EIP. This way you can use Route53 with EIP, which will always point to existing bastion instance. You will also need to add `ec2:AssociateAddress` permission to `iam_instance_profile` (see `samples/iam_allow_associateaddress.tf`):\n\n```hcl\nmodule "bastion" {\n  // see above\n  eip = "${aws_eip.bastion.public_ip}"\n  iam_instance_profile        = "s3_readonly-allow_associateaddress"\n  additional_user_data_script = <<EOF\nREGION=$(curl -s http://169.254.169.254/latest/dynamic/instance-identity/document | grep region | awk -F\\" \'{print $4}\')\nINSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)\naws ec2 associate-address --region $REGION --instance-id $INSTANCE_ID --allocation-id ${aws_eip.bastion.id}\nEOF\n}\n\nresource "aws_eip" "bastion" {\n  vpc = true\n}\n\nresource "aws_route53_record" "bastion" {\n  zone_id = "..."\n  name    = "bastion.example.com"\n  type    = "A"\n  ttl     = "3600"\n  records = ["${aws_eip.bastion.public_ip}"]\n}\n```\n\nAfter you run `terraform apply` you should be able to login to your bastion host like:\n\n```\n$ ssh ${module.bastion.ssh_user}@${aws_eip.bastion.public_ip}\n```\n\nor even like this:\n\n```\n$ ssh ubuntu@bastion.example.com\n```\n\nPS: In some cases you may consider adding flag `-A` to ssh command to enable forwarding of the authentication agent connection.\n\n## Authors\n\nCreated and maintained by [Anton Babenko](https://github.com/antonbabenko).\nHeavily inspired by [hashicorp/atlas-examples](https://github.com/hashicorp/atlas-examples/tree/master/infrastructures/terraform/aws/network/bastion).\n\n# License\n\nApache 2 Licensed. See LICENSE for full details.\n'