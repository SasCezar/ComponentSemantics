b'# Ansible Terraform Provider\nA Terraform provider serving as an interop layer for an Ansible [dynamic\ninventory script][1].\n\nRead the [introductory blog post][3] for an explanation of the design\nmotivations behind this provider.\n\n## Installation\n\nInstallation can be accomplished in two different ways:\n\n1. Installing a pre-compiled release (recommended)\n2. Compiling from source\n\n### Installing a Pre-Compiled Release\n\nDownloading and installing a pre-compiled `terraform-provider-ansible` release\nis the recommended method of installation since it requires no additional tools\nor libraries to be installed on your workstation.\n\n1. Visit the [releases][4] page and download the latest release for your target\n   architecture.\n\n2. Unzip the downloaded file and copy the `terraform-provider-ansible` binary\n   to a designated directory as described in Terraform\'s [plugin installation\n   instructions][2].\n\n### Compiling From Source\n\n> Note: Terraform requires Go 1.11 or later to successfully compile.\n\n> Note: Dependencies are no longer included in this repository. You may need the\n[bazaar][10] version control utility to download some of Terraform\'s Go-lang\nmodule dependencies.\n\nIf you\'d like to take advantage of features not yet available in a pre-compiled\nrelease, you can compile `terraform-provider-ansible` from source.\n\nIn order to compile, you will need to have Go installed on your workstation.\nOfficial instructions on how to install Go can be found [here][5].\n\nAlternatively, you can use [gimme][6] as a quick and easy way to install Go:\n\n```shell\n$ sudo wget -O /usr/local/bin/gimme https://raw.githubusercontent.com/travis-ci/gimme/master/gimme\n$ sudo chmod +x /usr/local/bin/gimme\n$ gimme 1.10\n# copy the output to your `.bashrc` and source `.bashrc`.\n```\n\nOnce you have a working Go installation, you can compile\n`terraform-provider-ansible` by doing the following:\n\n```shell\n$ go get github.com/nbering/terraform-provider-ansible\n$ cd $GOPATH/src/github.com/nbering/terraform-provider-ansible\n$ make\n```\n\nYou should now have a `terraform-provider-ansible` binary located at\n`$GOPATH/bin/terraform-provider-ansible`. Copy this binary to a designated\ndirectory as described in Terraform\'s [plugin installation instructions][2]\n\n## Terraform Configuration Example\n\n```hcl\nresource "ansible_host" "example" {\n    inventory_hostname = "example.com"\n    groups = ["web"]\n    vars = {\n        ansible_user = "admin"\n    }\n}\n\nresource "ansible_group" "web" {\n  inventory_group_name = "web"\n  children = ["foo", "bar", "baz"]\n  vars = {\n    foo = "bar"\n    bar = 2\n  }\n}\n```\n\n## Compatibility\n\nVersion [1.0.0][7] of this project is compatible with Terraform version\n[0.12-beta2][8]. You will also need [2.0.0][11]+ of the terraform-inventory\nscript, as the internal structure of Terraform state files has changed. \n\nIf you need a version compatible with an earlier version of\nTerraform, use version [0.0.4][9].\n\nWhen upgrading to Terraform 0.12.x, you may need to change your configuration\nfiles to reflect changes to the new version of the Hashicorp Configuration\nLanaguage (HCL). The only known incompatibility is that `vars` attributes now\nrequire an equals operator (`=`).\n\n**0.11.x**\n```hcl\nresource "ansible_host" "example" {\n    inventory_hostname = "example.com"\n    vars {\n        ansible_user = "admin"\n    }\n}\n```\n\n**0.12.x**\n```hcl\nresource "ansible_host" "example" {\n    inventory_hostname = "example.com"\n    vars = {\n        ansible_user = "admin"\n    }\n}\n```\n\n## Alternatives and Similar Projects\n### [jonmorehouse/terraform-provisioner-ansible](https://github.com/jonmorehouse/terraform-provisioner-ansible)\nA Terraform Provisioner that runs Ansible-Local on a target machine at creation-time.\n\n### [adammck/terraform-inventory](https://github.com/adammck/terraform-inventory)\nA very similar solution to this one, without the Logical provider. Depends on\nspecific Terraform resource types, and relies heavily on cloud-providers\' tag\nimplementations.\n\n### [Ansible Module: Terraform](http://docs.ansible.com/ansible/devel/modules/terraform_module.html)\nAn Ansible module that runs Terraform plans and deployments.\n\n## License\n\nContributions specific to this project are made available under the\n[Mozilla Public License](./LICENSE).\n\nCode under the `vendor/` directory is copyright of the various package owners,\nand made available under their own license considerations.\n\n[1]: https://github.com/nbering/terraform-inventory/\n[2]: https://www.terraform.io/docs/plugins/basics.html#installing-a-plugin\n[3]: http://nicholasbering.ca/tools/2018/01/08/introducing-terraform-provider-ansible/\n[4]: https://github.com/nbering/terraform-provider-ansible/releases\n[5]: https://golang.org/doc/install\n[6]: https://github.com/travis-ci/gimme\n[7]: https://github.com/nbering/terraform-provider-ansible/releases/tag/v1.0.0\n[8]: https://github.com/hashicorp/terraform/releases/tag/v0.12.0-beta2\n[9]: https://github.com/nbering/terraform-provider-ansible/releases/tag/v0.0.4\n[10]: https://bazaar.canonical.com/en/\n[11]: https://github.com/nbering/terraform-inventory/releases/tag/v2.0.0\n'