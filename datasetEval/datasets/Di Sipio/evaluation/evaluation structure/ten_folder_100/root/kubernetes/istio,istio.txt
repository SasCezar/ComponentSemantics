b"[![Go Report Card](https://goreportcard.com/badge/github.com/istio/istio)](https://goreportcard.com/report/github.com/istio/istio)\n[![GoDoc](https://godoc.org/istio.io/istio?status.svg)](https://godoc.org/istio.io/istio)\n\n# Istio\n\nAn open platform to connect, manage, and secure microservices.\n\n- For in-depth information about how to use Istio, visit [istio.io](https://istio.io)\n- To ask questions and get assistance from our community, visit [discuss.istio.io](https://discuss.istio.io)\n- To learn how to participate in our overall community, visit [our community page](https://istio.io/about/community)\n\nIn this README:\n\n- [Introduction](#introduction)\n- [Repositories](#repositories)\n- [Issue management](#issue-management)\n\nIn addition, here are some other documents you may wish to read:\n\n- [Istio Community](https://github.com/istio/community) - describes how to get involved and contribute to the Istio project\n- [Istio Developer's Guide](https://github.com/istio/istio/wiki/Preparing-for-Development) - explains how to set up and use an Istio development environment\n- [Project Conventions](https://github.com/istio/istio/wiki/Development-Conventions) - describes the conventions we use within the code base\n- [Creating Fast and Lean Code](https://github.com/istio/istio/wiki/Writing-Fast-and-Lean-Code) - performance-oriented advice and guidelines for the code base\n\nYou'll find many other useful documents on our [Wiki](https://github.com/istio/istio/wiki).\n\n## Introduction\n\nIstio is an open platform for providing a uniform way to integrate\nmicroservices, manage traffic flow across microservices, enforce policies\nand aggregate telemetry data. Istio's control plane provides an abstraction\nlayer over the underlying cluster management platform, such as Kubernetes.\n\nIstio is composed of these components:\n\n- **Envoy** - Sidecar proxies per microservice to handle ingress/egress traffic\n   between services in the cluster and from a service to external\n   services. The proxies form a _secure microservice mesh_ providing a rich\n   set of functions like discovery, rich layer-7 routing, circuit breakers,\n   policy enforcement and telemetry recording/reporting\n   functions.\n\n  > Note: The service mesh is not an overlay network. It\n  > simplifies and enhances how microservices in an application talk to each\n  > other over the network provided by the underlying platform.\n\n- **Mixer** - Central component that is leveraged by the proxies and microservices\n   to enforce policies such as authorization, rate limits, quotas, authentication, request\n   tracing and telemetry collection.\n\n- **Pilot** - A component responsible for configuring the proxies at runtime.\n\n- **Citadel** - A centralized component responsible for certificate issuance and rotation.\n\n- **Citadel Agent** - A per-node component responsible for certificate issuance and rotation.\n\n- **Galley**- Central component for validating, ingesting, aggregating, transforming and distributing config within Istio.\n\nIstio currently supports Kubernetes and Consul-based environments. We plan support for additional platforms such as\nCloud Foundry, and Mesos in the near future.\n\n## Repositories\n\nThe Istio project is divided across a few GitHub repositories.\n\n- [istio/istio](README.md). This is the main repository that you are\ncurrently looking at. It hosts Istio's core components and also\nthe sample programs and the various documents that govern the Istio open source\nproject. It includes:\n\n    - [security](security/). This directory contains security related code,\nincluding Citadel (acting as Certificate Authority), citadel agent, etc.\n\n    - [pilot](pilot/). This directory\ncontains platform-specific code to populate the\n[abstract service model](https://istio.io/docs/concepts/traffic-management/#pilot), dynamically reconfigure the proxies\nwhen the application topology changes, as well as translate\n[routing rules](https://istio.io/docs/reference/config/networking/) into proxy specific configuration.\n\n    - [istioctl](istioctl/). This directory contains code for the\n[_istioctl_](https://istio.io/docs/reference/commands/istioctl.html) command line utility.\n\n    - [mixer](mixer/). This directory\ncontains code to enforce various policies for traffic passing through the\nproxies, and collect telemetry data from proxies and services. There\nare plugins for interfacing with various cloud platforms, policy\nmanagement services, and monitoring services.\n\n- [istio/api](https://github.com/istio/api). This repository defines\ncomponent-level APIs and common configuration formats for the Istio platform.\n\n- [istio/proxy](https://github.com/istio/proxy). The Istio proxy contains\nextensions to the [Envoy proxy](https://github.com/envoyproxy/envoy) (in the form of\nEnvoy filters), that allow the proxy to delegate policy enforcement\ndecisions to Mixer.\n\n## Issue management\n\nWe use GitHub combined with ZenHub to track all of our bugs and feature requests. Each issue we track has a variety of metadata:\n\n- **Epic**. An epic represents a feature area for Istio as a whole. Epics are fairly broad in scope and are basically product-level things.\nEach issue is ultimately part of an epic.\n\n- **Milestone**. Each issue is assigned a milestone. This is 0.1, 0.2, ..., or 'Nebulous Future'. The milestone indicates when we\nthink the issue should get addressed.\n\n- **Priority/Pipeline**. Each issue has a priority which is represented by the Pipeline field within GitHub. Priority can be one of\nP0, P1, P2, or >P2. The priority indicates how important it is to address the issue within the milestone. P0 says that the\nmilestone cannot be considered achieved if the issue isn't resolved.\n\nWe don't annotate issues with Releases; Milestones are used instead. We don't use GitHub projects at all, that\nsupport is disabled for our organization.\n"