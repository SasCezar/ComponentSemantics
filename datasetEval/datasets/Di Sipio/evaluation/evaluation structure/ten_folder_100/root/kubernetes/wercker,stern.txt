b'# stern\n\n[![wercker status](https://app.wercker.com/status/fb1ed340ffed75c22dc301c38ab0893c/s/master "wercker status")](https://app.wercker.com/project/byKey/fb1ed340ffed75c22dc301c38ab0893c)\n\nStern allows you to `tail` multiple pods on Kubernetes and multiple containers\nwithin the pod. Each result is color coded for quicker debugging.\n\nThe query is a regular expression so the pod name can easily be filtered and\nyou don\'t need to specify the exact id (for instance omitting the deployment\nid). If a pod is deleted it gets removed from tail and if a new pod is added it\nautomatically gets tailed.\n\nWhen a pod contains multiple containers Stern can tail all of them too without\nhaving to do this manually for each one. Simply specify the `container` flag to\nlimit what containers to show. By default all containers are listened to.\n\n## Installation\n\nIf you don\'t want to build from source go grab a [binary release](https://github.com/wercker/stern/releases)\n\n[Govendor](https://github.com/kardianos/govendor) is required to install vendored dependencies.\n\n```\nmkdir -p $GOPATH/src/github.com/wercker\ncd $GOPATH/src/github.com/wercker\ngit clone https://github.com/wercker/stern.git && cd stern\ngovendor sync\ngo install\n```\n\n### Homebrew\n\nOn macOS, you can also install Stern using [Homebrew](https://brew.sh/):\n```\nbrew install stern\n```\n\n## Usage\n\n```\nstern pod-query [flags]\n```\n\nThe `pod` query is a regular expression so you could provide `"web-\\w"` to tail\n`web-backend` and `web-frontend` pods but not `web-123`.\n\n### cli flags\n\n| flag                 | default          | purpose                                                                                                      |\n|----------------------|------------------|--------------------------------------------------------------------------------------------------------------|\n| `--container`        | `.*`             | Container name when multiple containers in pod (regular expression)                                          |\n| `--exclude-container`|                  | Container name to exclude when multiple containers in pod (regular expression)                               |\n| `--container-state`  | `running`        | Tail containers with status in running, waiting or terminated. Default to running.                           |\n| `--timestamps`       |                  | Print timestamps                                                                                             |\n| `--since`            |                  | Return logs newer than a relative duration like 52, 2m, or 3h. Displays all if omitted                       |\n| `--context`          |                  | Kubernetes context to use. Default to `kubectl config current-context`                                       |\n| `--exclude`          |                  | Log lines to exclude; specify multiple with additional `--exclude`; (regular expression)                     |\n| `--namespace`        |                  | Kubernetes namespace to use. Default to namespace configured in Kubernetes context                           |\n| `--kubeconfig`       | `~/.kube/config` | Path to kubeconfig file to use                                                                               |\n| `--all-namespaces`   |                  | If present, tail across all namespaces. A specific namespace is ignored even if specified with --namespace.  |\n| `--selector`         |                  | Selector (label query) to filter on. If present, default to `.*` for the pod-query.                          |\n| `--tail`             | `-1`             | The number of lines from the end of the logs to show. Defaults to -1, showing all logs.                      |\n| `--color`            | `auto`           | Force set color output. `auto`: colorize if tty attached, `always`: always colorize, `never`: never colorize |\n| `--output`           | `default`        | Specify predefined template. Currently support: [default, raw, json] See templates section                   |\n| `template`           |                  | Template to use for log lines, leave empty to use --output flag                                              |\n\nSee `stern --help` for details\n\nStern will use the `$KUBECONFIG` environment variable if set. If both the\nenvironment variable and `--kubeconfig` flag are passed the cli flag will be\nused.\n\n### templates\n\nstern supports outputting custom log messages.  There are a few predefined\ntemplates which you can use by specifying the `--output` flag:\n\n| output    | description                                                                                           |\n|-----------|-------------------------------------------------------------------------------------------------------|\n| `default` | Displays the namespace, pod and container, and decorates it with color depending on --color           |\n| `raw`     | Only outputs the log message itself, useful when your logs are json and you want to pipe them to `jq` |\n| `json`    | Marshals the log struct to json. Useful for programmatic purposes                                     |\n\nIt accepts a custom template through the `--template` flag, which will be\ncompiled to a Go template and then used for every log message. This Go template\nwill receive the following struct:\n\n| property        | type   | description               |\n|-----------------|--------|---------------------------|\n| `Message`       | string | The log message itself    |\n| `Namespace`     | string | The namespace of the pod  |\n| `PodName`       | string | The name of the pod       |\n| `ContainerName` | string | The name of the container |\n\nThe following functions are available within the template (besides the [builtin\nfunctions](https://golang.org/pkg/text/template/#hdr-Functions)):\n\n| func    | arguments             | description                                                     |\n|---------|-----------------------|-----------------------------------------------------------------|\n| `json`  | `object`              | Marshal the object and output it as a json text                 |\n| `color` | `color.Color, string` | Wrap the text in color (.ContainerColor and .PodColor provided) |\n\n\n\n## Examples:\n\nTail the `gateway` container running inside of the `envvars` pod on staging\n```\nstern envvars --context staging --container gateway\n```\n\nTail the `staging` namespace excluding logs from `istio-proxy` container\n```\nstern -n staging --exclude-container istio-proxy .\n```\n\nShow auth activity from 15min ago with timestamps\n```\nstern auth -t --since 15m\n```\n\nFollow the development of `some-new-feature` in minikube\n```\nstern some-new-feature --context minikube\n```\n\nView pods from another namespace\n```\nstern kubernetes-dashboard --namespace kube-system\n```\n\nTail the pods filtered by `run=nginx` label selector across all namespaces\n```\nstern --all-namespaces -l run=nginx\n```\n\nFollow the `frontend` pods in canary release\n```\nstern frontend --selector release=canary\n```\n\nPipe the log message to jq:\n```\nstern backend -o json | jq .\n```\n\nOnly output the log message itself:\n```\nstern backend -o raw\n```\n\nOutput using a custom template:\n\n```\nstern --template \'{{.Message}} ({{.Namespace}}/{{.PodName}}/{{.ContainerName}})\' backend\n```\n\nOutput using a custom template with stern-provided colors:\n\n```\nstern --template \'{{.Message}} ({{.Namespace}}/{{color .PodColor .PodName}}/{{color .ContainerColor .ContainerName}})\' backend\n```\n\n## Completion\n\nStern supports command-line auto completion for bash or zsh. `stern\n--completion=(bash|zsh)` outputs the shell completion code which work by being\nevaluated in `.bashrc`, etc for the specified shell. In addition, Stern\nsupports dynamic completion for `--namespace` and `--context`. In order to use\nthat, kubectl must be installed on your environment.\n\nIf you use bash, stern bash completion code depends on the\n[bash-completion](https://github.com/scop/bash-completion). On the macOS, you\ncan install it with homebrew as follows:\n\n```\n$ brew install bash-completion\n```\n\nNote that bash-completion must be sourced before sourcing the stern bash\ncompletion code in `.bashrc`.\n\n```sh\nsource <(brew --prefix)/etc/bash-completion\nsource <(stern --completion=bash)\n```\n\nIf you use zsh, just source the stern zsh completion code in `.zshrc`.\n\n```sh\nsource <(stern --completion=zsh)\n```\n\n## Contributing to this repository\n\nOracle welcomes contributions to this repository from anyone.  Please see\n[CONTRIBUTING](CONTRIBUTING.md) for details.\n'