b'# etcd\n\n[![Go Report Card](https://goreportcard.com/badge/github.com/etcd-io/etcd?style=flat-square)](https://goreportcard.com/report/github.com/etcd-io/etcd)\n[![Coverage](https://codecov.io/gh/etcd-io/etcd/branch/master/graph/badge.svg)](https://codecov.io/gh/etcd-io/etcd)\n[![Build Status Travis](https://img.shields.io/travis/etcd-io/etcdlabs.svg?style=flat-square&&branch=master)](https://travis-ci.com/etcd-io/etcd)\n[![Build Status Semaphore](https://semaphoreci.com/api/v1/etcd-io/etcd/branches/master/shields_badge.svg)](https://semaphoreci.com/etcd-io/etcd)\n[![Docs](https://img.shields.io/badge/docs-latest-green.svg)](https://etcd.io/docs)\n[![Godoc](http://img.shields.io/badge/go-documentation-blue.svg?style=flat-square)](https://godoc.org/github.com/etcd-io/etcd)\n[![Releases](https://img.shields.io/github/release/etcd-io/etcd/all.svg?style=flat-square)](https://github.com/etcd-io/etcd/releases)\n[![LICENSE](https://img.shields.io/github/license/etcd-io/etcd.svg?style=flat-square)](https://github.com/etcd-io/etcd/blob/master/LICENSE)\n\n**Note**: The `master` branch may be in an *unstable or even broken state* during development. Please use [releases][github-release] instead of the `master` branch in order to get stable binaries.\n\n![etcd Logo](logos/etcd-horizontal-color.svg)\n\netcd is a distributed reliable key-value store for the most critical data of a distributed system, with a focus on being:\n\n* *Simple*: well-defined, user-facing API (gRPC)\n* *Secure*: automatic TLS with optional client cert authentication\n* *Fast*: benchmarked 10,000 writes/sec\n* *Reliable*: properly distributed using Raft\n\netcd is written in Go and uses the [Raft][raft] consensus algorithm to manage a highly-available replicated log.\n\netcd is used [in production by many companies](./ADOPTERS.md), and the development team stands behind it in critical deployment scenarios, where etcd is frequently teamed with applications such as [Kubernetes][k8s], [locksmith][locksmith], [vulcand][vulcand], [Doorman][doorman], and many others. Reliability is further ensured by [**rigorous testing**](https://github.com/etcd-io/etcd/tree/master/functional).\n\nSee [etcdctl][etcdctl] for a simple command line client.\n\n[raft]: https://raft.github.io/\n[k8s]: http://kubernetes.io/\n[doorman]: https://github.com/youtube/doorman\n[locksmith]: https://github.com/coreos/locksmith\n[vulcand]: https://github.com/vulcand/vulcand\n[etcdctl]: https://github.com/etcd-io/etcd/tree/master/etcdctl\n\n## Community meetings\n\netcd contributors and maintainers have monthly (every four weeks) meetings at 11:00 AM (USA Pacific) on Thursday.\n\nAn initial agenda will be posted to the [shared Google docs][shared-meeting-notes] a day before each meeting, and everyone is welcome to suggest additional topics or other agendas.\n\n[shared-meeting-notes]: https://docs.google.com/document/d/16XEGyPBisZvmmoIHSZzv__LoyOeluC5a4x353CX0SIM/edit\n\n\nTime:\n- [Jan 10th, 2019 11:00 AM video](https://www.youtube.com/watch?v=0Cphtbd1OSc&feature=youtu.be)\n- [Feb 7th, 2019 11:00 AM video](https://youtu.be/U80b--oAlYM)\n- [Mar 7th, 2019 11:00 AM video](https://youtu.be/w9TI5B7D1zg)\n- [Apr 4th, 2019 11:00 AM video](https://youtu.be/oqQR2XH1L_A)\n- [May 2nd, 2019 11:00 AM video](https://youtu.be/wFwQePuDWVw)\n- [May 30th, 2019 11:00 AM video](https://youtu.be/2t1R5NATYG4)\n- [Jul 11th, 2019 11:00 AM video](https://youtu.be/k_FZEipWD6Y)\n- [Jul 25, 2019 11:00 AM video](https://youtu.be/VSUJTACO93I)\n- [Aug 22, 2019 11:00 AM video](https://youtu.be/6IBQ-VxQmuM) \n- [Sep 19, 2019 11:00 AM video](https://youtu.be/SqfxU9DhBOc)\n- Nov 14, 2019 11:00 AM\n- Dec 12, 2019 11:00 AM\n\nJoin Hangouts Meet: [meet.google.com/umg-nrxn-qvs](https://meet.google.com/umg-nrxn-qvs)\n\nJoin by phone: +1 405-792-0633\xe2\x80\xac PIN: \xe2\x80\xaa299 906\xe2\x80\xac#\n\n\n## Getting started\n\n### Getting etcd\n\nThe easiest way to get etcd is to use one of the pre-built release binaries which are available for OSX, Linux, Windows, and Docker on the [release page][github-release].\n\nFor more installation guides, please check out [play.etcd.io](http://play.etcd.io) and [operating etcd](https://github.com/etcd-io/etcd/tree/master/Documentation#operating-etcd-clusters).\n\nFor those wanting to try the very latest version, [build the latest version of etcd][dl-build] from the `master` branch. This first needs [*Go*](https://golang.org/) installed (version 1.13+ is required). All development occurs on `master`, including new features and bug fixes. Bug fixes are first targeted at `master` and subsequently ported to release branches, as described in the [branch management][branch-management] guide.\n\n[github-release]: https://github.com/etcd-io/etcd/releases\n[branch-management]: ./Documentation/branch_management.md\n[dl-build]: ./Documentation/dl_build.md#build-the-latest-version\n\n### Running etcd\n\nFirst start a single-member cluster of etcd.\n\nIf etcd is installed using the [pre-built release binaries][github-release], run it from the installation location as below:\n\n```bash\n/tmp/etcd-download-test/etcd\n```\n\nThe etcd command can be simply run as such if it is moved to the system path as below:\n\n```bash\nmv /tmp/etcd-download-test/etcd /usr/local/bin/\netcd\n```\n\nIf etcd is [built from the master branch][dl-build], run it as below:\n\n```bash\n./bin/etcd\n```\n\nThis will bring up etcd listening on port 2379 for client communication and on port 2380 for server-to-server communication.\n\nNext, let\'s set a single key, and then retrieve it:\n\n```\netcdctl put mykey "this is awesome"\netcdctl get mykey\n```\n\netcd is now running and serving client requests. For more, please check out:\n\n- [Interactive etcd playground](http://play.etcd.io)\n- [Animated quick demo](./Documentation/demo.md)\n\n### etcd TCP ports\n\nThe [official etcd ports][iana-ports] are 2379 for client requests, and 2380 for peer communication.\n\n[iana-ports]: http://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt\n\n### Running a local etcd cluster\n\nFirst install [goreman](https://github.com/mattn/goreman), which manages Procfile-based applications.\n\nOur [Procfile script](./Procfile) will set up a local example cluster. Start it with:\n\n```bash\ngoreman start\n```\n\nThis will bring up 3 etcd members `infra1`, `infra2` and `infra3` and etcd `grpc-proxy`, which runs locally and composes a cluster.\n\nEvery cluster member and proxy accepts key value reads and key value writes.\n\nFollow the steps in [Procfile.learner](./Procfile.learner) to add a learner node to the cluster. Start the learner node with:\n\n```bash\ngoreman -f ./Procfile.learner start\n```\n\n### Next steps\n\nNow it\'s time to dig into the full etcd API and other guides.\n\n- Read the full [documentation][fulldoc].\n- Explore the full gRPC [API][api].\n- Set up a [multi-machine cluster][clustering].\n- Learn the [config format, env variables and flags][configuration].\n- Find [language bindings and tools][integrations].\n- Use TLS to [secure an etcd cluster][security].\n- [Tune etcd][tuning].\n\n[fulldoc]: ./Documentation/docs.md\n[api]: ./Documentation/dev-guide/api_reference_v3.md\n[clustering]: ./Documentation/op-guide/clustering.md\n[configuration]: ./Documentation/op-guide/configuration.md\n[integrations]: ./Documentation/integrations.md\n[security]: ./Documentation/op-guide/security.md\n[tuning]: ./Documentation/tuning.md\n\n## Contact\n\n- Mailing list: [etcd-dev](https://groups.google.com/forum/?hl=en#!forum/etcd-dev)\n- IRC: #[etcd](irc://irc.freenode.org:6667/#etcd) on freenode.org\n- Planning/Roadmap: [milestones](https://github.com/etcd-io/etcd/milestones), [roadmap](./ROADMAP.md)\n- Bugs: [issues](https://github.com/etcd-io/etcd/issues)\n\n## Contributing\n\nSee [CONTRIBUTING](CONTRIBUTING.md) for details on submitting patches and the contribution workflow.\n\n## Reporting bugs\n\nSee [reporting bugs](Documentation/reporting_bugs.md) for details about reporting any issues.\n\n## Reporting a security vulnerability\n\nSee [security disclosure and release process](security/README.md) for details on how to report a security vulnerability and how the etcd team manages it.\n\n## Issue and PR management\n\nSee [issue triage guidelines](Documentation/triage/issues.md) for details on how issues are managed.\n\nSee [PR management](Documentation/triage/PRs.md) for guidelines on how pull requests are managed.\n\n## etcd Emeritus Maintainers\n\nThese emeritus maintainers dedicated a part of their career to etcd and reviewed code, triaged bugs, and pushed the project forward over a substantial period of time. Their contribution is greatly appreciated.\n\n* Fanmin Shi \n* Anthony Romano \n\n### License\n\netcd is under the Apache 2.0 license. See the [LICENSE](LICENSE) file for details.\n'