b'# Prometheus Operator\n[![Build Status](https://travis-ci.org/coreos/prometheus-operator.svg?branch=master)](https://travis-ci.org/coreos/prometheus-operator)\n[![Go Report Card](https://goreportcard.com/badge/coreos/prometheus-operator "Go Report Card")](https://goreportcard.com/report/coreos/prometheus-operator)\n[![Slack](https://img.shields.io/badge/join%20slack-%23prometheus--operator-brightgreen.svg)](http://slack.k8s.io/)\n\n**Project status: *beta*** Not all planned features are completed. The API, spec, status and other user facing objects may change, but in a backward compatible way.\n\nThe Prometheus Operator for Kubernetes provides easy monitoring definitions for Kubernetes\nservices and deployment and management of Prometheus instances.\n\nOnce installed, the Prometheus Operator provides the following features:\n\n* **Create/Destroy**: Easily launch a Prometheus instance for your Kubernetes namespace,\n  a specific application or team easily using the Operator.\n\n* **Simple Configuration**: Configure the fundamentals of Prometheus like versions, persistence,\n  retention policies, and replicas from a native Kubernetes resource.\n\n* **Target Services via Labels**: Automatically generate monitoring target configurations based\n  on familiar Kubernetes label queries; no need to learn a Prometheus specific configuration language.\n\nFor an introduction to the Prometheus Operator, see the initial [blog\npost](https://coreos.com/blog/the-prometheus-operator.html).\n\n## Prometheus Operator vs. kube-prometheus vs. community helm chart\n\nThe Prometheus Operator makes the Prometheus configuration Kubernetes native\nand manages and operates Prometheus and Alertmanager clusters. It is a piece of\nthe puzzle regarding full end-to-end monitoring.\n\n[kube-prometheus](https://github.com/coreos/kube-prometheus) combines the Prometheus Operator\nwith a collection of manifests to help getting started with monitoring\nKubernetes itself and applications running on top of it.\n\nThe [stable/prometheus-operator](https://github.com/helm/charts/tree/master/stable/prometheus-operator)\nhelm chart provides a similar feature set to kube-prometheus. This chart is maintained by the community.\nFor more information, please see the [chart\'s readme](https://github.com/helm/charts/tree/master/stable/prometheus-operator#prometheus-operator)\n\n## Prerequisites\n\nVersion `>=0.18.0` of the Prometheus Operator requires a Kubernetes\ncluster of version `>=1.8.0`. If you are just starting out with the\nPrometheus Operator, it is highly recommended to use the latest version.\n\nIf you have an older version of Kubernetes and the Prometheus Operator running,\nwe recommend upgrading Kubernetes first and then the Prometheus Operator.\n\n## CustomResourceDefinitions\n\nThe Operator acts on the following [custom resource definitions (CRDs)](https://kubernetes.io/docs/tasks/access-kubernetes-api/extend-api-custom-resource-definitions/):\n\n* **`Prometheus`**, which defines a desired Prometheus deployment.\n  The Operator ensures at all times that a deployment matching the resource definition is running.\n\n* **`ServiceMonitor`**, which declaratively specifies how groups\n  of services should be monitored. The Operator automatically generates Prometheus scrape configuration\n  based on the definition.\n\n* **`PodMonitor`**, which declaratively specifies how groups\n  of pods should be monitored. The Operator automatically generates Prometheus scrape configuration\n  based on the definition.\n\n* **`PrometheusRule`**, which defines a desired Prometheus rule file, which can\n  be loaded by a Prometheus instance containing Prometheus alerting and\n  recording rules.\n\n* **`Alertmanager`**, which defines a desired Alertmanager deployment.\n  The Operator ensures at all times that a deployment matching the resource definition is running.\n\nTo learn more about the CRDs introduced by the Prometheus Operator have a look\nat the [design doc](Documentation/design.md).\n\n## Quickstart\n\nNote that this quickstart does not provision an entire monitoring stack; if that is what you are looking for see the [kube-prometheus](https://github.com/coreos/kube-prometheus) project. If you want the whole stack, but have already applied the `bundle.yaml`, delete the bundle first (`kubectl delete -f bundle.yaml`).\n\nTo quickly try out _just_ the Prometheus Operator inside a cluster, run the following command:\n\n```sh\nkubectl apply -f bundle.yaml\n```\n\n> Note: make sure to adapt the namespace in the ClusterRoleBinding if deploying in a namespace other than the default namespace.\n\nTo run the Operator outside of a cluster:\n\n```sh\nmake\nscripts/run-external.sh <kubectl cluster name>\n```\n\n## Removal\n\nTo remove the operator and Prometheus, first delete any custom resources you created in each namespace. The\noperator will automatically shut down and remove Prometheus and Alertmanager pods, and associated ConfigMaps.\n\n```sh\nfor n in $(kubectl get namespaces -o jsonpath={..metadata.name}); do\n  kubectl delete --all --namespace=$n prometheus,servicemonitor,podmonitor,alertmanager\ndone\n```\n\nAfter a couple of minutes you can go ahead and remove the operator itself.\n\n```sh\nkubectl delete -f bundle.yaml\n```\n\nThe operator automatically creates services in each namespace where you created a Prometheus or Alertmanager resources,\nand defines three custom resource definitions. You can clean these up now.\n\n```sh\nfor n in $(kubectl get namespaces -o jsonpath={..metadata.name}); do\n  kubectl delete --ignore-not-found --namespace=$n service prometheus-operated alertmanager-operated\ndone\n\nkubectl delete --ignore-not-found customresourcedefinitions \\\n  prometheuses.monitoring.coreos.com \\\n  servicemonitors.monitoring.coreos.com \\\n  podmonitors.monitoring.coreos.com \\\n  alertmanagers.monitoring.coreos.com \\\n  prometheusrules.monitoring.coreos.com\n```\n\n## Development\n\n### Prerequisites\n\n- golang environment\n- docker (used for creating container images, etc.)\n- minikube (optional)\n\n### Testing\n\n> Ensure that you\'re running tests in the following path:\n> `$GOPATH/src/github.com/coreos/prometheus-operator` as tests expect paths to\n> match. If you\'re working from a fork, just add the forked repo as a remote and\n> pull against your local coreos checkout before running tests.\n\n#### Running *unit tests*:\n\n`make test-unit`\n\n#### Running *end-to-end* tests on local minikube cluster:\n\n1. `minikube start --kubernetes-version=v1.10.0 --memory=4096\n    --extra-config=apiserver.authorization-mode=RBAC`\n2. `eval $(minikube docker-env) && make image` - build Prometheus Operator\n    docker image on minikube\'s docker\n3. `make test-e2e`\n\n#### Running *end-to-end* tests on local kind cluster:\n\n1. `kind create cluster --image=kindest/node:<latest>`. e.g `v1.16.2` version. \n2. `export KUBECONFIG="$(kind get kubeconfig-path --name="kind")"`\n3. `make image` - build Prometheus Operator  docker image locally.\n4. `for n in "operator" "config-reloader"; do kind load docker-image "quay.io/coreos/prometheus-$n:$(git rev-parse --short HEAD)"; done` - publish \nbuilt locally images to be accessible inside kind. \n5. `make test-e2e`\n\n## Contributing\n\nMany files (documentation, manifests, ...) in this repository are\nauto-generated. E.g. `bundle.yaml` originates from the _Jsonnet_ files in\n`/jsonnet/prometheus-operator`. Before proposing a pull request:\n\n1. Commit your changes.\n2. Run `make generate-in-docker`.\n3. Commit the generated changes.\n\n\n## Security\n\nIf you find a security vulnerability related to the Prometheus Operator, please\ndo not report it by opening a GitHub issue, but instead please send an e-mail to\nthe maintainers of the project found in the [OWNERS](OWNERS) file.\n\n[operator-vs-kube]: https://github.com/coreos/prometheus-operator/issues/2510#issuecomment-476692399\n'