b'# Hipster Shop: Cloud-Native Microservices Demo Application\n\nThis project contains a 10-tier microservices application. The application is a\nweb-based e-commerce app called **\xe2\x80\x9cHipster Shop\xe2\x80\x9d** where users can browse items,\nadd them to the cart, and purchase them.\n\n**Google uses this application to demonstrate use of technologies like\nKubernetes/GKE, Istio, Stackdriver, gRPC and OpenCensus**. This application\nworks on any Kubernetes cluster (such as a local one), as well as Google\nKubernetes Engine. It\xe2\x80\x99s **easy to deploy with little to no configuration**.\n\nIf you\xe2\x80\x99re using this demo, please **\xe2\x98\x85Star** this repository to show your interest!\n\n> \xf0\x9f\x91\x93**Note to Googlers:** Please fill out the form at\n> [go/microservices-demo](http://go/microservices-demo) if you are using this\n> application.\n\n## Screenshots\n\n| Home Page                                                                                                         | Checkout Screen                                                                                                    |\n| ----------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------ |\n| [![Screenshot of store homepage](./docs/img/hipster-shop-frontend-1.png)](./docs/img/hipster-shop-frontend-1.png) | [![Screenshot of checkout screen](./docs/img/hipster-shop-frontend-2.png)](./docs/img/hipster-shop-frontend-2.png) |\n\n## Service Architecture\n\n**Hipster Shop** is composed of many microservices written in different\nlanguages that talk to each other over gRPC.\n\n[![Architecture of\nmicroservices](./docs/img/architecture-diagram.png)](./docs/img/architecture-diagram.png)\n\nFind **Protocol Buffers Descriptions** at the [`./pb` directory](./pb).\n\n| Service                                              | Language      | Description                                                                                                                       |\n| ---------------------------------------------------- | ------------- | --------------------------------------------------------------------------------------------------------------------------------- |\n| [frontend](./src/frontend)                           | Go            | Exposes an HTTP server to serve the website. Does not require signup/login and generates session IDs for all users automatically. |\n| [cartservice](./src/cartservice)                     | C#            | Stores the items in the user\'s shopping cart in Redis and retrieves it.                                                           |\n| [productcatalogservice](./src/productcatalogservice) | Go            | Provides the list of products from a JSON file and ability to search products and get individual products.                        |\n| [currencyservice](./src/currencyservice)             | Node.js       | Converts one money amount to another currency. Uses real values fetched from European Central Bank. It\'s the highest QPS service. |\n| [paymentservice](./src/paymentservice)               | Node.js       | Charges the given credit card info (mock) with the given amount and returns a transaction ID.                                     |\n| [shippingservice](./src/shippingservice)             | Go            | Gives shipping cost estimates based on the shopping cart. Ships items to the given address (mock)                                 |\n| [emailservice](./src/emailservice)                   | Python        | Sends users an order confirmation email (mock).                                                                                   |\n| [checkoutservice](./src/checkoutservice)             | Go            | Retrieves user cart, prepares order and orchestrates the payment, shipping and the email notification.                            |\n| [recommendationservice](./src/recommendationservice) | Python        | Recommends other products based on what\'s given in the cart.                                                                      |\n| [adservice](./src/adservice)                         | Java          | Provides text ads based on given context words.                                                                                   |\n| [loadgenerator](./src/loadgenerator)                 | Python/Locust | Continuously sends requests imitating realistic user shopping flows to the frontend.                                              |\n\n## Features\n\n- **[Kubernetes](https://kubernetes.io)/[GKE](https://cloud.google.com/kubernetes-engine/):**\n  The app is designed to run on Kubernetes (both locally on "Docker for\n  Desktop", as well as on the cloud with GKE).\n- **[gRPC](https://grpc.io):** Microservices use a high volume of gRPC calls to\n  communicate to each other.\n- **[Istio](https://istio.io):** Application works on Istio service mesh.\n- **[OpenCensus](https://opencensus.io/) Tracing:** Most services are\n  instrumented using OpenCensus trace interceptors for gRPC/HTTP.\n- **[Stackdriver APM](https://cloud.google.com/stackdriver/):** Many services\n  are instrumented with **Profiling**, **Tracing** and **Debugging**. In\n  addition to these, using Istio enables features like Request/Response\n  **Metrics** and **Context Graph** out of the box. When it is running out of\n  Google Cloud, this code path remains inactive.\n- **[Skaffold](https://skaffold.dev):** Application\n  is deployed to Kubernetes with a single command using Skaffold.\n- **Synthetic Load Generation:** The application demo comes with a background\n  job that creates realistic usage patterns on the website using\n  [Locust](https://locust.io/) load generator.\n\n## Installation\n\nWe offer three installation methods:\n\n1. **Running locally with \xe2\x80\x9cDocker for Desktop\xe2\x80\x9d** (~20 minutes) You will build\n   and deploy microservices images to a single-node Kubernetes cluster running\n   on your development machine.\n\n2. **Running on Google Kubernetes Engine (GKE)\xe2\x80\x9d** (~30 minutes) You will build,\n   upload and deploy the container images to a Kubernetes cluster on Google\n   Cloud.\n\n3. **Using pre-built container images:** (~10 minutes, you will still need to\n   follow one of the steps above up until `skaffold run` command). With this\n   option, you will use pre-built container images that are available publicly,\n   instead of building them yourself, which takes a long time).\n\n### Option 1: Running locally with \xe2\x80\x9cDocker for Desktop\xe2\x80\x9d\n\n> \xf0\x9f\x92\xa1 Recommended if you\'re planning to develop the application or giving it a\n> try on your local cluster.\n\n1. Install tools to run a Kubernetes cluster locally:\n\n   - kubectl (can be installed via `gcloud components install kubectl`)\n   - Docker for Desktop (Mac/Windows): It provides Kubernetes support as [noted\n     here](https://docs.docker.com/docker-for-mac/kubernetes/).\n   - [skaffold]( https://skaffold.dev/docs/install/) (ensure version \xe2\x89\xa5v0.20)\n\n1. Launch \xe2\x80\x9cDocker for Desktop\xe2\x80\x9d. Go to Preferences:\n\n   - choose \xe2\x80\x9cEnable Kubernetes\xe2\x80\x9d,\n   - set CPUs to at least 3, and Memory to at least 6.0 GiB\n   - on the "Disk" tab, set at least 32 GB disk space\n\n1. Run `kubectl get nodes` to verify you\'re connected to \xe2\x80\x9cKubernetes on Docker\xe2\x80\x9d.\n\n1. Run `skaffold run` (first time will be slow, it can take ~20 minutes).\n   This will build and deploy the application. If you need to rebuild the images\n   automatically as you refactor the code, run `skaffold dev` command.\n\n1. Run `kubectl get pods` to verify the Pods are ready and running. The\n   application frontend should be available at http://localhost:80 on your\n   machine.\n\n### Option 2: Running on Google Kubernetes Engine (GKE)\n\n> \xf0\x9f\x92\xa1 Recommended if you\'re using Google Cloud Platform and want to try it on\n> a realistic cluster.\n\n1.  Install tools specified in the previous section (Docker, kubectl, skaffold)\n\n1.  Create a Google Kubernetes Engine cluster and make sure `kubectl` is pointing\n    to the cluster.\n\n    ```sh\n    gcloud services enable container.googleapis.com\n    ```\n\n    ```sh\n    gcloud container clusters create demo --enable-autoupgrade \\\n        --enable-autoscaling --min-nodes=3 --max-nodes=10 --num-nodes=5 --zone=us-central1-a\n    ```\n\n    ```\n    kubectl get nodes\n    ```\n\n1.  Enable Google Container Registry (GCR) on your GCP project and configure the\n    `docker` CLI to authenticate to GCR:\n\n    ```sh\n    gcloud services enable containerregistry.googleapis.com\n    ```\n\n    ```sh\n    gcloud auth configure-docker -q\n    ```\n\n1.  In the root of this repository, run `skaffold run --default-repo=gcr.io/[PROJECT_ID]`,\n    where [PROJECT_ID] is your GCP project ID.\n\n    This command:\n\n    - builds the container images\n    - pushes them to GCR\n    - applies the `./kubernetes-manifests` deploying the application to\n      Kubernetes.\n\n    **Troubleshooting:** If you get "No space left on device" error on Google\n    Cloud Shell, you can build the images on Google Cloud Build: [Enable the\n    Cloud Build\n    API](https://console.cloud.google.com/flows/enableapi?apiid=cloudbuild.googleapis.com),\n    then run `skaffold run -p gcb --default-repo=gcr.io/[PROJECT_ID]` instead.\n\n1.  Find the IP address of your application, then visit the application on your\n    browser to confirm installation.\n\n        kubectl get service frontend-external\n\n    **Troubleshooting:** A Kubernetes bug (will be fixed in 1.12) combined with\n    a Skaffold [bug](https://github.com/GoogleContainerTools/skaffold/issues/887)\n    causes load balancer to not to work even after getting an IP address. If you\n    are seeing this, run `kubectl get service frontend-external -o=yaml | kubectl apply -f-`\n    to trigger load balancer reconfiguration.\n\n### Option 3: Using Pre-Built Container Images\n\n> \xf0\x9f\x92\xa1 Recommended if you want to deploy the app faster in fewer steps to an\n> existing cluster.\n\n**NOTE:** If you need to create a Kubernetes cluster locally or on the cloud,\nfollow "Option 1" or "Option 2" until you reach the `skaffold run` step.\n\nThis option offers you pre-built public container images that are easy to deploy\nby deploying the [release manifest](./release) directly to an existing cluster.\n\n**Prerequisite**: a running Kubernetes cluster (either local or on cloud).\n\n1. Clone this repository, and go to the repository directory\n1. Run `kubectl apply -f ./release/kubernetes-manifests.yaml` to deploy the app.\n1. Run `kubectl get pods` to see pods are in a Ready state.\n1. Find the IP address of your application, then visit the application on your\n   browser to confirm installation.\n\n   ```sh\n   kubectl get service/frontend-external\n   ```\n\n### (Optional) Deploying on a Istio-installed GKE cluster\n\n> **Note:** you followed GKE deployment steps above, run `skaffold delete` first\n> to delete what\'s deployed.\n\n1. Create a GKE cluster (described in "Option 2").\n\n1. Use [Istio on GKE add-on](https://cloud.google.com/istio/docs/istio-on-gke/installing)\n   to install Istio to your existing GKE cluster.\n\n   ```sh\n   gcloud beta container clusters update demo \\\n       --zone=us-central1-a \\\n       --update-addons=Istio=ENABLED \\\n       --istio-config=auth=MTLS_PERMISSIVE\n   ```\n\n   > NOTE: If you need to enable `MTLS_STRICT` mode, you will need to update\n   > several manifest files:\n   >\n   > - `kubernetes-manifests/frontend.yaml`: delete "livenessProbe" and\n   >   "readinessProbe" fields.\n   > - `kubernetes-manifests/loadgenerator.yaml`: delete "initContainers" field.\n\n1. (Optional) Enable Stackdriver Tracing/Logging with Istio Stackdriver Adapter\n   by [following this guide](https://cloud.google.com/istio/docs/istio-on-gke/installing#enabling_tracing_and_logging).\n\n1. Install the automatic sidecar injection (annotate the `default` namespace\n   with the label):\n\n   ```sh\n   kubectl label namespace default istio-injection=enabled\n   ```\n\n1. Apply the manifests in [`./istio-manifests`](./istio-manifests) directory.\n   (This is required only once.)\n\n   ```sh\n   kubectl apply -f ./istio-manifests\n   ```\n\n1. Deploy the application with `skaffold run --default-repo=gcr.io/[PROJECT_ID]`.\n\n1. Run `kubectl get pods` to see pods are in a healthy and ready state.\n\n1. Find the IP address of your Istio gateway Ingress or Service, and visit the\n   application.\n\n   ```sh\n   INGRESS_HOST="$(kubectl -n istio-system get service istio-ingressgateway \\\n      -o jsonpath=\'{.status.loadBalancer.ingress[0].ip}\')"\n   echo "$INGRESS_HOST"\n   ```\n\n   ```sh\n   curl -v "http://$INGRESS_HOST"\n   ```\n\n### Cleanup\n\nIf you\'ve deployed the application with `skaffold run` command, you can run\n`skaffold delete` to clean up the deployed resources.\n\nIf you\'ve deployed the application with `kubectl apply -f [...]`, you can\nrun `kubectl delete -f [...]` with the same argument to clean up the deployed\nresources.\n\n## Conferences featuring Hipster Shop\n\n- [Google Cloud Next\'18 London \xe2\x80\x93 Keynote](https://youtu.be/nIq2pkNcfEI?t=3071)\n  showing Stackdriver Incident Response Management\n- Google Cloud Next\'18 SF\n  - [Day 1 Keynote](https://youtu.be/vJ9OaAqfxo4?t=2416) showing GKE On-Prem\n  - [Day 3 \xe2\x80\x93 Keynote](https://youtu.be/JQPOPV_VH5w?t=815) showing Stackdriver\n    APM (Tracing, Code Search, Profiler, Google Cloud Build)\n  - [Introduction to Service Management with Istio](https://www.youtube.com/watch?v=wCJrdKdD6UM&feature=youtu.be&t=586)\n- [KubeCon EU 2019 - Reinventing Networking: A Deep Dive into Istio\'s Multicluster Gateways - Steve Dake, Independent](https://youtu.be/-t2BfT59zJA?t=982)\n\n---\n\nThis is not an official Google project.\n'