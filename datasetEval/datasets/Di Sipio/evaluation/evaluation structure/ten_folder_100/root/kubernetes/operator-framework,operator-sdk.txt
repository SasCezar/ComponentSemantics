b'<img src="doc/images/operator_logo_sdk_color.svg" height="125px"></img>\n\n[![Build Status](https://travis-ci.org/operator-framework/operator-sdk.svg?branch=master)](https://travis-ci.org/operator-framework/operator-sdk)\n[![License](http://img.shields.io/:license-apache-blue.svg)](http://www.apache.org/licenses/LICENSE-2.0.html)\n[![Go Report Card](https://goreportcard.com/badge/github.com/operator-framework/operator-sdk)](https://goreportcard.com/report/github.com/operator-framework/operator-sdk)\n\n## Overview\n\nThis project is a component of the [Operator Framework][of-home], an open source toolkit to manage Kubernetes native applications, called Operators, in an effective, automated, and scalable way. Read more in the [introduction blog post][of-blog].\n\n[Operators][operator_link] make it easy to manage complex stateful applications on top of Kubernetes. However writing an operator today can be difficult because of challenges such as using low level APIs, writing boilerplate, and a lack of modularity which leads to duplication.\n\nThe Operator SDK is a framework that uses the [controller-runtime][controller_runtime] library to make writing operators easier by providing:\n- High level APIs and abstractions to write the operational logic more intuitively\n- Tools for scaffolding and code generation to bootstrap a new project fast\n- Extensions to cover common operator use cases\n\n## Workflow\n\nThe SDK provides workflows to develop operators in Go, Ansible, or Helm.\n\nThe following workflow is for a new **Go** operator:\n1. Create a new operator project using the SDK Command Line Interface(CLI)\n2. Define new resource APIs by adding Custom Resource Definitions(CRD)\n3. Define Controllers to watch and reconcile resources\n4. Write the reconciling logic for your Controller using the SDK and controller-runtime APIs\n5. Use the SDK CLI to build and generate the operator deployment manifests\n\nThe following workflow is for a new **Ansible** operator:\n1. Create a new operator project using the SDK Command Line Interface(CLI)\n2. Write the reconciling logic for your object using ansible playbooks and roles\n3. Use the SDK CLI to build and generate the operator deployment manifests\n4. Optionally add additional CRD\'s using the SDK CLI and repeat steps 2 and 3\n\nThe following workflow is for a new **Helm** operator:\n1. Create a new operator project using the SDK Command Line Interface(CLI)\n2. Create a new (or add your existing) Helm chart for use by the operator\'s reconciling logic\n3. Use the SDK CLI to build and generate the operator deployment manifests\n4. Optionally add additional CRD\'s using the SDK CLI and repeat steps 2 and 3\n\n## Prerequisites\n\n- [git][git_tool]\n- [go][go_tool] version v1.13+.\n- [mercurial][mercurial_tool] version 3.9+\n- [docker][docker_tool] version 17.03+.\n  - Alternatively [podman][podman_tool] `v1.2.0+` or [buildah][buildah_tool] `v1.7+`\n- [kubectl][kubectl_tool] version v1.12.0+.\n- Access to a Kubernetes v1.12.0+ cluster.\n- Optional: [delve](https://github.com/go-delve/delve/tree/master/Documentation/installation) version 1.2.0+ (for `up local --enable-delve`).\n\n## Quick Start\n\n### Install the Operator SDK CLI\n\nFollow the steps in the [installation guide][install_guide] to learn how to install the Operator SDK CLI tool.\n\n**Note:** If you are using a release version of the SDK, make sure to follow the documentation for that version. e.g.: For version 0.8.1, see docs in https://github.com/operator-framework/operator-sdk/tree/v0.8.1.\n\n### Create and deploy an app-operator\n\n```sh\n# Create an app-operator project that defines the App CR.\n$ mkdir -p $HOME/projects/example-inc/\n# Create a new app-operator project\n$ cd $HOME/projects/example-inc/\n$ operator-sdk new app-operator --repo github.com/example-inc/app-operator\n$ cd app-operator\n\n# Add a new API for the custom resource AppService\n$ operator-sdk add api --api-version=app.example.com/v1alpha1 --kind=AppService\n\n# Add a new controller that watches for AppService\n$ operator-sdk add controller --api-version=app.example.com/v1alpha1 --kind=AppService\n\n# Build and push the app-operator image to a public registry such as quay.io\n$ operator-sdk build quay.io/example/app-operator\n$ docker push quay.io/example/app-operator\n\n# Update the operator manifest to use the built image name (if you are performing these steps on OSX, see note below)\n$ sed -i \'s|REPLACE_IMAGE|quay.io/example/app-operator|g\' deploy/operator.yaml\n# On OSX use:\n$ sed -i "" \'s|REPLACE_IMAGE|quay.io/example/app-operator|g\' deploy/operator.yaml\n\n# Setup Service Account\n$ kubectl create -f deploy/service_account.yaml\n# Setup RBAC\n$ kubectl create -f deploy/role.yaml\n$ kubectl create -f deploy/role_binding.yaml\n# Setup the CRD\n$ kubectl create -f deploy/crds/app.example.com_appservices_crd.yaml\n# Deploy the app-operator\n$ kubectl create -f deploy/operator.yaml\n\n# Create an AppService CR\n# The default controller will watch for AppService objects and create a pod for each CR\n$ kubectl create -f deploy/crds/app.example.com_v1alpha1_appservice_cr.yaml\n\n# Verify that a pod is created\n$ kubectl get pod -l app=example-appservice\nNAME                     READY     STATUS    RESTARTS   AGE\nexample-appservice-pod   1/1       Running   0          1m\n\n# Test the new Resource Type\n$ kubectl describe appservice example-appservice\nName:         example-appservice\nNamespace:    myproject\nLabels:       <none>\nAnnotations:  <none>\nAPI Version:  app.example.com/v1alpha1\nKind:         AppService\nMetadata:\n  Cluster Name:        \n  Creation Timestamp:  2018-12-17T21:18:43Z\n  Generation:          1\n  Resource Version:    248412\n  Self Link:           /apis/app.example.com/v1alpha1/namespaces/myproject/appservices/example-appservice\n  UID:                 554f301f-0241-11e9-b551-080027c7d133\nSpec:\n  Size:  3\n\n# Cleanup\n$ kubectl delete -f deploy/crds/app.example.com_v1alpha1_appservice_cr.yaml\n$ kubectl delete -f deploy/operator.yaml\n$ kubectl delete -f deploy/role.yaml\n$ kubectl delete -f deploy/role_binding.yaml\n$ kubectl delete -f deploy/service_account.yaml\n$ kubectl delete -f deploy/crds/app.example.com_appservices_crd.yaml\n```\n\n**Note:** Follow the steps in the [Getting Started Repository][getting_started] to learn how to develop your Operator projects.\n \n## Command Line Interface\n\nTo learn more about the SDK CLI, see the [SDK CLI Reference][sdk_cli_ref], or run `operator-sdk [command] -h`.\n\n## User Guides\n\nTo learn more about the writing an operator in Go, see the [user guide][guide].\n\nThe SDK also supports developing an operator using Ansible or Helm. See the [Ansible][ansible_user_guide] and [Helm][helm_user_guide] operator user guides.\n\n### Operator capability level\n\nNote that each operator type has a different set of capabilities. When choosing what type to use for your project, it is important to understand the features and limitations of each of the project types and the use cases for your operator.\n\n![operator-capability-level](./doc/images/operator-capability-level.png)\n\n## Samples\n\nTo explore any operator samples built using the operator-sdk, see the [operator-sdk-samples][samples].\n\n## FAQ\n\nFor common Operator SDK related questions, see the [FAQ][faq].\n\n## Contributing\n\nSee [CONTRIBUTING][contrib] for details on submitting patches and the contribution workflow.\n\nSee the [proposal docs][proposals_docs] and issues for ongoing or planned work.\n\n## Reporting bugs\n\nSee [reporting bugs][bug_guide] for details about reporting any issues.\n\n## License\n\nOperator SDK is under Apache 2.0 license. See the [LICENSE][license_file] file for details.\n\n[install_guide]: ./doc/user/install-operator-sdk.md\n[operator_link]: https://coreos.com/operators/\n[proposals_docs]: ./doc/proposals\n[sdk_cli_ref]: ./doc/sdk-cli-reference.md\n[guide]: ./doc/user-guide.md\n[samples]: https://github.com/operator-framework/operator-sdk-samples\n[of-home]: https://github.com/operator-framework\n[of-blog]: https://coreos.com/blog/introducing-operator-framework\n[contrib]: ./CONTRIBUTING.MD\n[bug_guide]:./doc/dev/reporting_bugs.md\n[license_file]:./LICENSE\n[git_tool]:https://git-scm.com/downloads\n[go_tool]:https://golang.org/dl/\n[mercurial_tool]:https://www.mercurial-scm.org/downloads\n[docker_tool]:https://docs.docker.com/install/\n[podman_tool]:https://github.com/containers/libpod/blob/master/install.md\n[buildah_tool]:https://github.com/containers/buildah/blob/master/install.md\n[kubectl_tool]:https://kubernetes.io/docs/tasks/tools/install-kubectl/\n[controller_runtime]: https://github.com/kubernetes-sigs/controller-runtime\n[ansible_user_guide]:./doc/ansible/user-guide.md\n[helm_user_guide]:./doc/helm/user-guide.md\n[faq]: ./doc/faq.md\n[getting_started]: https://github.com/operator-framework/getting-started/blob/master/README.md\n\n'