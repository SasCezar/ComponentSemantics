b'# melody\n\n[![Build Status](https://travis-ci.org/olahol/melody.svg)](https://travis-ci.org/olahol/melody)\n[![Coverage Status](https://img.shields.io/coveralls/olahol/melody.svg?style=flat)](https://coveralls.io/r/olahol/melody)\n[![GoDoc](https://godoc.org/github.com/olahol/melody?status.svg)](https://godoc.org/github.com/olahol/melody)\n\n> :notes: Minimalist websocket framework for Go.\n\nMelody is websocket framework based on [github.com/gorilla/websocket](https://github.com/gorilla/websocket)\nthat abstracts away the tedious parts of handling websockets. It gets out of\nyour way so you can write real-time apps. Features include:\n\n* [x] Clear and easy interface similar to `net/http` or Gin.\n* [x] A simple way to broadcast to all or selected connected sessions.\n* [x] Message buffers making concurrent writing safe.\n* [x] Automatic handling of ping/pong and session timeouts.\n* [x] Store data on sessions.\n\n## Install\n\n```bash\ngo get gopkg.in/olahol/melody.v1\n```\n\n## [Example: chat](https://github.com/olahol/melody/tree/master/examples/chat)\n\n[![Chat](https://cdn.rawgit.com/olahol/melody/master/examples/chat/demo.gif "Demo")](https://github.com/olahol/melody/tree/master/examples/chat)\n\nUsing [Gin](https://github.com/gin-gonic/gin):\n```go\npackage main\n\nimport (\n\t"github.com/gin-gonic/gin"\n\t"gopkg.in/olahol/melody.v1"\n\t"net/http"\n)\n\nfunc main() {\n\tr := gin.Default()\n\tm := melody.New()\n\n\tr.GET("/", func(c *gin.Context) {\n\t\thttp.ServeFile(c.Writer, c.Request, "index.html")\n\t})\n\n\tr.GET("/ws", func(c *gin.Context) {\n\t\tm.HandleRequest(c.Writer, c.Request)\n\t})\n\n\tm.HandleMessage(func(s *melody.Session, msg []byte) {\n\t\tm.Broadcast(msg)\n\t})\n\n\tr.Run(":5000")\n}\n```\n\nUsing [Echo](https://github.com/labstack/echo):\n```go\npackage main\n\nimport (\n\t"github.com/labstack/echo"\n\t"github.com/labstack/echo/engine/standard"\n\t"github.com/labstack/echo/middleware"\n\t"gopkg.in/olahol/melody.v1"\n\t"net/http"\n)\n\nfunc main() {\n\te := echo.New()\n\tm := melody.New()\n\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\n\te.GET("/", func(c echo.Context) error {\n\t\thttp.ServeFile(c.Response().(*standard.Response).ResponseWriter, c.Request().(*standard.Request).Request, "index.html")\n\t\treturn nil\n\t})\n\n\te.GET("/ws", func(c echo.Context) error {\n\t\tm.HandleRequest(c.Response().(*standard.Response).ResponseWriter, c.Request().(*standard.Request).Request)\n\t\treturn nil\n\t})\n\n\tm.HandleMessage(func(s *melody.Session, msg []byte) {\n\t\tm.Broadcast(msg)\n\t})\n\n\te.Run(standard.New(":5000"))\n}\n```\n\n## [Example: gophers](https://github.com/olahol/melody/tree/master/examples/gophers)\n\n[![Gophers](https://cdn.rawgit.com/olahol/melody/master/examples/gophers/demo.gif "Demo")](https://github.com/olahol/melody/tree/master/examples/gophers)\n\n```go\npackage main\n\nimport (\n\t"github.com/gin-gonic/gin"\n\t"gopkg.in/olahol/melody.v1"\n\t"net/http"\n\t"strconv"\n\t"strings"\n\t"sync"\n)\n\ntype GopherInfo struct {\n\tID, X, Y string\n}\n\nfunc main() {\n\trouter := gin.Default()\n\tmrouter := melody.New()\n\tgophers := make(map[*melody.Session]*GopherInfo)\n\tlock := new(sync.Mutex)\n\tcounter := 0\n\n\trouter.GET("/", func(c *gin.Context) {\n\t\thttp.ServeFile(c.Writer, c.Request, "index.html")\n\t})\n\n\trouter.GET("/ws", func(c *gin.Context) {\n\t\tmrouter.HandleRequest(c.Writer, c.Request)\n\t})\n\n\tmrouter.HandleConnect(func(s *melody.Session) {\n\t\tlock.Lock()\n\t\tfor _, info := range gophers {\n\t\t\ts.Write([]byte("set " + info.ID + " " + info.X + " " + info.Y))\n\t\t}\n\t\tgophers[s] = &GopherInfo{strconv.Itoa(counter), "0", "0"}\n\t\ts.Write([]byte("iam " + gophers[s].ID))\n\t\tcounter += 1\n\t\tlock.Unlock()\n\t})\n\n\tmrouter.HandleDisconnect(func(s *melody.Session) {\n\t\tlock.Lock()\n\t\tmrouter.BroadcastOthers([]byte("dis "+gophers[s].ID), s)\n\t\tdelete(gophers, s)\n\t\tlock.Unlock()\n\t})\n\n\tmrouter.HandleMessage(func(s *melody.Session, msg []byte) {\n\t\tp := strings.Split(string(msg), " ")\n\t\tlock.Lock()\n\t\tinfo := gophers[s]\n\t\tif len(p) == 2 {\n\t\t\tinfo.X = p[0]\n\t\t\tinfo.Y = p[1]\n\t\t\tmrouter.BroadcastOthers([]byte("set "+info.ID+" "+info.X+" "+info.Y), s)\n\t\t}\n\t\tlock.Unlock()\n\t})\n\n\trouter.Run(":5000")\n}\n```\n\n### [More examples](https://github.com/olahol/melody/tree/master/examples)\n\n## [Documentation](https://godoc.org/github.com/olahol/melody)\n\n## Contributors\n\n* Ola Holmstr\xc3\xb6m (@olahol)\n* Shogo Iwano (@shiwano)\n* Matt Caldwell (@mattcaldwell)\n* Heikki Uljas (@huljas)\n* Robbie Trencheny (@robbiet480)\n* yangjinecho (@yangjinecho)\n\n## FAQ\n\nIf you are getting a `403` when trying  to connect to your websocket you can [change allow all origin hosts](http://godoc.org/github.com/gorilla/websocket#hdr-Origin_Considerations):\n\n```go\nm := melody.New()\nm.Upgrader.CheckOrigin = func(r *http.Request) bool { return true }\n```\n'