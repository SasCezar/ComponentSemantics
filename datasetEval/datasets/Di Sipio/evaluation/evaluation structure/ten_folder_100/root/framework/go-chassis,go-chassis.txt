b'![](logo.png)\n\n[![Build Status](https://travis-ci.org/go-chassis/go-chassis.svg?branch=master)](https://travis-ci.org/go-chassis/go-chassis)  [![Coverage Status](https://coveralls.io/repos/github/go-chassis/go-chassis/badge.svg)](https://coveralls.io/github/go-chassis/go-chassis) [![Go Report Card](https://goreportcard.com/badge/github.com/go-chassis/go-chassis)](https://goreportcard.com/report/github.com/go-chassis/go-chassis) [![GoDoc](https://godoc.org/github.com/go-chassis/go-chassis?status.svg)](https://godoc.org/github.com/go-chassis/go-chassis) [![HitCount](http://hits.dwyl.io/go-chassis/go-chassis.svg)](http://hits.dwyl.io/go-chassis/go-chassis)  [![Join Slack](https://img.shields.io/badge/Join-Slack-orange.svg)](https://join.slack.com/t/go-chassis/shared_invite/enQtMzk0MzAyMjEzNzEyLTRjOWE3NzNmN2IzOGZhMzZkZDFjODM1MDc5ZWI0YjcxYjM1ODNkY2RkNmIxZDdlOWI3NmQ0MTg3NzBkNGExZGU)      \n\n[\xe4\xb8\xad\xe6\x96\x87\xe7\x89\x88README](README_cn.md)\n\nGo-Chassis is a microservice framework for rapid development of microservices in Go\n\n### Why use Go chassis\n\ngo chassis is designed as a protocol-independent framework, any protocol \nis able to integrate with go chassis and leverage same function like load balancing,\ncircuit breaker,rate limiting, routing management, those function resilient your service\n\ngo chassis makes service observable by bringing open tracing and prometheus to it.\n\ngo chassis is flexible, many different modules can be replaced by other implementation, \nlike registry, metrics, handler chain, config server etc \n\nWith many build-in function like route management, circuit breaker, load balancing, monitoring etc,\nyour don\'t need to investigate, implement and integrate many solutions yourself.\n\ngo chassis supports Istio control panel, go chassis can bring better performance to go program, \nyou can use Istio configurations to control go chassis.\n\n# Features\n - **Pluggable registrator and discovery service**: Support Service center, istio pilot, kubernetes and file based registry, \n fit both client side discovery and server side discovery pattern \n - **Pluggable Protocol**: You can custom your own protocol, by default support http and grpc\n - **Multiple server management**: you can separate API by protocols and ports\n - **Circuit breaker**: Protect your micro service system in runtime\n - **Route management**: Able to route to different service based on weight and match rule to achieve Canary Release easily\n - **Client side Load balancing**: Able to custom strategy\n - **Rate limiting**: Both client side and server side rate limiting\n - **Pluggable Cipher**: Able to custom your own cipher for AKSK and TLS certs\n - **Handler Chain**: Able to add your own code during service calling for client and server side\n - **Metrics**: Able to expose Prometheus metric API automatically and custom metrics reporter\n - **Tracing**:Use opentracing-go as standard library, easy to integrate tracing impl\n - **Logger**: You can custom your own writer to sink log, by default support file and stdout\n - **Hot-reconfiguraion**: Powered by go-archaius, configurations can be reload in runtime, like load balancing, circuit breaker, rate limiting\n - **Dynamic Configuration framework**: Powered by go-archaius, developer is able to develop a service which has hot-reconfiguration feature easily\n - **Fault Injection**: In consumer side, you can inject faults to bring chaos testing into your system\n - **API gateway and service mesh solution**: powered by [servicecomb-mesher](https://github.com/apache/servicecomb-mesher). \n - **Open API 2.0 support** go chassis will automatically generate Open API 2.0 doc and register it to service center. you can manage all the API docs in one place\n\nYou can check [plugins](https://github.com/go-chassis/go-chassis-plugins) to see more features\n\n# Get started \n1.Generate go mod\n```bash\ngo mod init\n```\n2.Add go chassis \n```shell script\nGO111MODULE=on go get github.com/go-chassis/go-chassis\n```\nif you are facing network issue \n```bash\nexport GOPROXY=https://goproxy.io\n```\n\n3.[Write your first http micro service](http://docs.go-chassis.com/getstarted/writing-rest.html)\n\n\n# Documentations\nYou can see more documentations in [here](http://docs.go-chassis.com/), \nthis online doc is for latest version of go chassis, if you want to see your version\'s doc,\nfollow [here](docs/README.md) to generate it in local\n\n# Examples\nYou can check examples [here](examples)\n\nNOTICE: Now examples is migrating to [here](https://github.com/go-chassis/go-chassis-examples)\n# Communication Protocols\nGo-Chassis supports 3 types of communication protocol.\n1. Rest - REST is an approach that leverages the HTTP protocol for communication.\n2. Highway - This is a RPC communication protocol, it was deprecated.\n3. grpc - native grpc protocol, go chassis bring circuit breaker, route management etc to grpc.\n## Debug suggestion for dlv:\nAdd `-tags debug` into go build arguments before debugging, if your go version is go1.10 onward.\n\nexample:\n\n```shell\ngo build -tags debug -o server -gcflags "all=-N -l" server.go\n```\n\nChassis customized `debug` tag to resolve dlv debug issue:\n\nhttps://github.com/golang/go/issues/23733\n\nhttps://github.com/derekparker/delve/issues/865\n\n# Eco system\nthis part introduce some eco systems that go chassis can run with\n## Apache ServiceComb\nWith ServiceComb service center as registry, go chassis supply more features like contract management \nand [multiple service registry](https://github.com/apache/servicecomb-service-center/blob/master/docs/aggregate.md), \nhighly recommended. that will not prevent you from using kubernetes or Istio, \nBecause service center can aggregate heterogeneous registry \nand give you a unified service registry entry point.\n\n## Kubernetes and Istio\ngo chassis has k8s registry and Istio registry plugins, and support Istio traffic management\nyou can use spring cloud or Envoy with go chassis under same service discovery service.\n\n# Other project using go-chassis\n- [apache/servicecomb-kie](https://github.com/apache/servicecomb-kie): \nA distributed configuration management service, go chassis and mesher integrate with it,\nso that user can manage service configurations by this service.\n- [apache/servicecomb-mesher](https://github.com/apache/servicecomb-mesher): \nA service mesh able to co-work with go chassis, \nit is able to run as a [API gateway](https://mesher.readthedocs.io/en/latest/configurations/edge.html) also.\n- [KubeEdge](https://github.com/kubeedge/kubeedge): Kubernetes Native Edge Computing Framework (project under CNCF) https://kubeedge.io\n\n# To start developing go chassis\n\n1. Install [go 1.12+](https://golang.org/doc/install) \n\n2. Clone the project\n\n```sh\ngit clone git@github.com:go-chassis/go-chassis.git\n```\n\n3. Download vendors\n```shell\ncd go-chassis\nexport GO111MODULE=on \ngo mod download\n#optional\nexport GO111MODULE=on \ngo mod vendor\n```\nNOTICE\xef\xbc\x9aif you do not use mod, We can not ensure you the compatibility. \nhowever you can still maintain your own vendor, \nwhich means you have to solve compiling issue your own.\n\n\n4. Install [service-center](http://servicecomb.apache.org/release/)\n\n\n'