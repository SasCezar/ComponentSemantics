b"# qiankun\xef\xbc\x88\xe4\xb9\xbe\xe5\x9d\xa4\xef\xbc\x89\n\n[![npm version](https://img.shields.io/npm/v/qiankun.svg?style=flat-square)](https://www.npmjs.com/package/qiankun) [![coverage](https://img.shields.io/codecov/c/github/umijs/qiankun.svg?style=flat-square)](https://codecov.io/gh/umijs/qiankun) [![npm downloads](https://img.shields.io/npm/dt/qiankun.svg?style=flat-square)](https://www.npmjs.com/package/qiankun) [![Build Status](https://img.shields.io/travis/umijs/qiankun.svg?style=flat-square)](https://travis-ci.org/umijs/qiankun)\n\n> In Chinese traditional culture `qian` means heaven and `kun` stands for earth, so `qiankun` is the universe.\n\nAn implementation of [Micro Frontends](https://micro-frontends.org/), based on [single-spa](https://github.com/CanopyTax/single-spa), but made it production-ready.\n\n## \xf0\x9f\xa4\x94 Motivation\n\nAs we know what micro-frontends aims for:\n\n> Techniques, strategies and recipes for building a **modern web app** with **multiple teams** using **different JavaScript frameworks**. \xe2\x80\x94 [Micro Frontends](https://micro-frontends.org/)\n\nAn independent development experience is very important for a large system, especially with an enterprise application. But if you've tried to implement a micro-frontends architecture in such a system, you'll usually hurt your brain with such problems:\n\n- How to compose your independent sub apps into your main system?\n- How to guarantee your sub apps to be isolated by each other?\n- and so on...\n\nWe built an library to help you solve these glitch problems automatically without any mental burden of yours, then named it `qiankun`.\n\n**Probably the most complete micro-frontends solution you ever met\xf0\x9f\xa7\x90.**\n\n## \xf0\x9f\x93\xa6 Installation\n\n```shell\n$ yarn add qiankun  # or npm i qiankun -S\n```\n\n## \xf0\x9f\x94\xa8 Getting Started\n\n### 1. Create master framework with qiankun\n\n```ts\nimport { registerMicroApps, start } from 'qiankun';\n\nfunction render({ appContent, loading }) {\n  const container = document.getElementById('container');\n  ReactDOM.render(<Framework loading={loading} content={appContent} />, container);\n}\n\nfunction genActiveRule(routerPrefix) {\n  return location => location.pathname.startsWith(routerPrefix);\n}\n\nregisterMicroApps([\n  {\n    name: 'react app', // app name registered\n    entry: '//localhost:7100',\n    render,\n    activeRule: genActiveRule('/react'),\n  },\n  {\n    name: 'vue app',\n    entry: { scripts: ['//localhost:7100/main.js'] },\n    render,\n    activeRule: genActiveRule('/vue'),\n  },\n]);\n\nstart();\n```\n\n### 2. Export the lifecycles from your sub app entry\n\n```ts\nexport async function bootstrap() {\n  console.log('react app bootstraped');\n}\n\nexport async function mount(props) {\n  console.log(props);\n  ReactDOM.render(<App />, document.getElementById('react15Root'));\n}\n\nexport async function unmount() {\n  ReactDOM.unmountComponentAtNode(document.getElementById('react15Root'));\n}\n```\n\nFor more lifecycle information, see [single-spa lifecycles](https://single-spa.js.org/docs/building-applications.html#registered-application-lifecycle)\n\n### 3. Config your sub app bundler\n\nWhile you wanna build a sub app to integrate to qiankun, pls make sure your bundler have the required configuration below:\n\n#### webpack:\n\n```js\noutput: {\n  library: `${packageName}-[name]`,\n  libraryTarget: 'umd',\n  jsonpFunction: `webpackJsonp_${packageName}`,\n}\n```\n\nsee https://webpack.js.org/configuration/output/#outputlibrary\n\n#### parcel:\n\n```shell\nparcel serve entry.js --global myvariable\n```\n\nsee https://en.parceljs.org/cli.html#expose-modules-as-umd\n\n## \xf0\x9f\x92\xbf Examples\n\n```shell\n$yarn\n$yarn install:examples\n$yarn start\n```\n\nVisit `http://localhost:7099`\n\n![](./examples/example.gif)\n\n## :sparkles: Features\n\n- Based on [single-spa](https://github.com/CanopyTax/single-spa)\n- HTML Entry\n- Config Entry\n- **Isolated styles**\n- **JS Sandbox**\n- Assets Prefetch\n- [@umijs/plugin-qiankun](https://github.com/umijs/umi-plugin-qiankun) integration\n\n## \xf0\x9f\x93\x96 API\n\n### registerMicroApps\n\n```typescript\ntype RegistrableApp = {\n  // name to identify your app\n  name: string;\n  // where your sub app served from, supported html entry and config entry\n  entry: string | { scripts?: string[]; styles?: string[]; html?: string };\n  // render function called around sub app lifecycle\n  render: (props?: { appContent: string; loading: boolean }) => any;\n  // when sub app active\n  activeRule: (location: Location) => boolean;\n  // props pass through to sub app\n  props?: object;\n};\n\ntype Lifecycle<T extends object> = (app: RegistrableApp<T>) => Promise<any>;\ntype LifeCycles<T extends object> = {\n  beforeLoad?: Lifecycle<T> | Array<Lifecycle<T>>;\n  beforeMount?: Lifecycle<T> | Array<Lifecycle<T>>;\n  afterMount?: Lifecycle<T> | Array<Lifecycle<T>>;\n  beforeUnmount?: Lifecycle<T> | Array<Lifecycle<T>>;\n  afterUnmount?: Lifecycle<T> | Array<Lifecycle<T>>;\n};\n\nfunction registerMicroApps<T extends object = {}>(\n  apps: Array<RegistrableApp<T>>,\n  lifeCycles?: LifeCycles<T>,\n  opts?: RegisterMicroAppsOpts,\n): void;\n```\n\n### start\n\n```typescript\nfunction start(options: Options): void;\n```\n\nOptions\n\n| param | description | default |\n| --- | --- | --- |\n| prefetch | Whether to prefetch assets of sub apps after first sub app mounted | true |\n| jsSandbox | While sandbox enabled, we could guarantee that sub apps is isolated with each others | true |\n| singular | Only one sub app display at one runtime, that means a sub app will wait to mount until the before one unmounted | true |\n| fetch | Set a custom fetch function | `window.fetch` |\n\n### setDefaultMountApp\n\nSet which sub app shoule be active by default after master loaded.\n\n```typescript\nfunction setDefaultMountApp(defaultAppLink: string): void;\n```\n\n### runAfterFirstMounted\n\n```typescript\nfunction runAfterFirstMounted(effect: () => void): void;\n```\n\n## \xf0\x9f\x8e\xaf Roadmap\n\n- [ ] Parcel apps integration (multiple sub apps displayed at the same time, but only one uses router at most)\n- [ ] Communication development kits between master and sub apps\n- [ ] Custom side effects hijacker\n- [ ] Nested Microfrontends\n\n## \xe2\x9d\x93 FAQ\n\nhttps://github.com/umijs/qiankun/wiki/FAQ\n\n## \xf0\x9f\x91\xac Community\n\nhttps://github.com/umijs/umi#community\n\n## \xf0\x9f\x8e\x81 Acknowledgements\n\n- [single-spa](https://github.com/CanopyTax/single-spa) What an awesome meta-framework for micro-frontends!\n"