b'Apollo\n======\n\n[![Circle Status](https://circleci.com/gh/spotify/apollo.svg?style=shield&circle-token=5a9eb086ae3cec87e62fc8b6cdeb783cb318e3b9)](https://circleci.com/gh/spotify/apollo)\n[![Codecov](https://img.shields.io/codecov/c/github/spotify/apollo.svg)](https://codecov.io/gh/spotify/apollo)\n[![Maven Central](https://img.shields.io/maven-central/v/com.spotify/apollo-parent.svg)](https://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.spotify%22%20apollo*)\n[![License](https://img.shields.io/github/license/spotify/apollo.svg)](LICENSE.txt)\n\n## Status: Bug-fix only\n\nApollo is heavily used within Spotify, however, most of its development is currently done internally leveraging Apollo\'s module system. We want to signal this current state to the community by putting the project in maintenance mode.   \nThis project will no longer have new features or accept PRs for new features. We will continue to accept bug fixes and update dependencies. \n\n\nApollo is a set of Java libraries that we use at Spotify when writing microservices. Apollo includes modules such as an HTTP server and a URI routing system, making it trivial to implement restful API services. \n\nApollo has been used in production at Spotify for a long time. As a part of the work to release version 1.0.0 we moved the development of Apollo into the open.\n\nThere are three main libraries in Apollo:\n\n* [apollo-http-service](apollo-http-service)\n* [apollo-api](apollo-api)\n* [apollo-core](apollo-core)\n\n### Apollo HTTP Service\nThe [apollo-http-service](apollo-http-service) library is a standardized assembly of Apollo\nmodules. It incorporates both apollo-api and apollo-core and ties them together with other\nmodules to get a standard api service using http for incoming and outgoing communication.\n\n### Apollo API\nThe [apollo-api](apollo-api) library is the Apollo library you are most likely to interact with.\nIt gives you the tools you need to define your service routes and your request/reply handlers.\n\nHere, for example, we define that our service will respond to a GET request on the path `/` with\nthe string `"hello world"`:\n```java\npublic static void init(Environment environment) {\n  environment.routingEngine()\n      .registerAutoRoute(Route.sync("GET", "/", requestContext -> "hello world"));\n}\n```\n\n> Note that, for an Apollo-based service, you can see the routes defined for a service by querying\n[`/_meta/0/endpoints`](apollo-api-impl/src/main/java/com/spotify/apollo/meta/model).\n\nThe apollo-api library provides several ways to help you define your request/reply handlers.\nYou can specify how responses should be serialized (such as JSON). Read more about\nthis library in the [Apollo API Readme](apollo-api).\n\n### Apollo Core\nThe [apollo-core](apollo-core) library manages the lifecycle (loading, starting, and stopping) of\nyour service. You do not usually need to interact directly with apollo-core; think of it merely \nas "plumbing". For more information about this library, see the [Apollo Core Readme](apollo-core).\n\n### Apollo Test\nIn addition to the three main Apollo libraries listed above, to help you write tests for your\nservice we have an additional library called [apollo-test](apollo-test). It has helpers to set up\na service for testing, and to mock outgoing request responses.\n\n### Getting Started with Apollo\nApollo will be distributed as a set of Maven artifacts, which makes it easy to get started no matter the build tool; Maven, Ant + Ivy or Gradle. Below is a very simple but functional service \xe2\x80\x94 more extensive examples are available in the [examples](examples) directory. Until these are released, you can build and install Apollo from source by running `mvn install`.\n\n```java\npublic final class App {\n\n    public static void main(String... args) throws LoadingException {\n        HttpService.boot(App::init, "my-app", args);\n    }\n\n    static void init(Environment environment) {\n        environment.routingEngine()\n            .registerAutoRoute(Route.sync("GET", "/", rc -> "hello world"));\n    }\n }\n```\n\n### Links\n\n[Introduction Website](https://spotify.github.io/apollo)<br />\n[JavaDocs](https://spotify.github.io/apollo/maven/apidocs)<br />\n[Maven site](https://spotify.github.io/apollo/maven)\n\n### Diagrams\n\n[![Apollo set-up](https://cdn.rawgit.com/spotify/apollo/master/website/source/set-up.svg)](website/source/set-up.svg)\n\n[![Apollo in runtime](https://cdn.rawgit.com/spotify/apollo/master/website/source/runtime.svg)](website/source/runtime.svg)\n\n## Code of conduct\nThis project adheres to the [Open Code of Conduct][code-of-conduct]. By participating, you are expected to honor this code.\n\n[code-of-conduct]: https://github.com/spotify/code-of-conduct/blob/master/code-of-conduct.md\n'