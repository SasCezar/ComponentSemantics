b'# Rocket\n\n[![Build Status](https://dev.azure.com/SergioBenitez/Rocket/_apis/build/status/SergioBenitez.Rocket?branchName=master)](https://dev.azure.com/SergioBenitez/Rocket/_build/latest?definitionId=3&branchName=master)\n[![Rocket Homepage](https://img.shields.io/badge/web-rocket.rs-red.svg?style=flat&label=https&colorB=d33847)](https://rocket.rs)\n[![Current Crates.io Version](https://img.shields.io/crates/v/rocket.svg)](https://crates.io/crates/rocket)\n[![Chat on Matrix](https://img.shields.io/badge/style-matrix-blue.svg?style=flat&label=chat)](https://riot.im/app/#/room/#mozilla_#rocket:matrix.org)\n[![IRC: #rocket on irc.mozilla.org](https://img.shields.io/badge/style-%23rocket-blue.svg?style=flat&label=mozilla)](https://kiwiirc.com/client/irc.mozilla.org/#rocket)\n\nRocket is a web framework for Rust (nightly) with a focus on ease-of-use,\nexpressibility, and speed. Here\'s an example of a complete Rocket application:\n\n```rust\n#![feature(proc_macro_hygiene)]\n\n#[macro_use] extern crate rocket;\n\n#[get("/<name>/<age>")]\nfn hello(name: String, age: u8) -> String {\n    format!("Hello, {} year old named {}!", age, name)\n}\n\nfn main() {\n    rocket::ignite().mount("/hello", routes![hello]).launch();\n}\n```\n\nVisiting `localhost:8000/hello/John/58`, for example, will trigger the `hello`\nroute resulting in the string `Hello, 58 year old named John!` being sent to the\nbrowser. If an `<age>` string was passed in that can\'t be parsed as a `u8`, the\nroute won\'t get called, resulting in a 404 error.\n\n## Documentation\n\nRocket is extensively documented:\n\n  * [Overview]: A brief look at what makes Rocket special.\n  * [Quickstart]: How to get started as quickly as possible.\n  * [Getting Started]: How to start your first Rocket project.\n  * [Guide]: A detailed guide and reference to Rocket.\n  * [API Documentation]: The "rustdocs".\n\n[Quickstart]: https://rocket.rs/guide/quickstart\n[Getting Started]: https://rocket.rs/guide/getting-started\n[Overview]: https://rocket.rs/overview/\n[Guide]: https://rocket.rs/guide/\n[API Documentation]: https://api.rocket.rs/rocket/\n\nThe official community support channels are the `#rocket` IRC channel on the\n[Mozilla IRC Server] at `irc.mozilla.org` and the bridged [Rocket room on\nMatrix]. If you\'re not familiar with IRC, we recommend chatting through [Matrix\nvia Riot] or via the [Kiwi web IRC client]. You can learn more about IRC via\nMozilla\'s [Getting Started with IRC] guide.\n\n[Mozilla IRC Server]: https://wiki.mozilla.org/IRC\n[Rocket room on Matrix]: https://riot.im/app/#/room/#mozilla_#rocket:matrix.org\n[Matrix via Riot]: https://riot.im/app/#/room/#mozilla_#rocket:matrix.org\n[Kiwi web IRC client]: https://kiwiirc.com/client/irc.mozilla.org/#rocket\n[Getting Started with IRC]: https://developer.mozilla.org/en-US/docs/Mozilla/QA/Getting_Started_with_IRC\n\n## Building\n\n### Nightly\n\nRocket requires a nightly version of Rust as it makes heavy use of syntax\nextensions. This means that the first two unwieldly lines in the introductory\nexample above are required.\n\n### Core, Codegen, and Contrib\n\nAll of the Rocket libraries are managed by Cargo. As a result, compiling them is\nsimple.\n\n  * Core: `cd lib && cargo build`\n  * Codegen: `cd codegen && cargo build`\n  * Contrib: `cd contrib && cargo build --all-features`\n\n### Examples\n\nRocket ships with an extensive number of examples in the `examples/` directory\nwhich can be compiled and run with Cargo. For instance, the following sequence\nof commands builds and runs the `Hello, world!` example:\n\n```\ncd examples/hello_world\ncargo run\n```\n\nYou should see `Hello, world!` by visiting `http://localhost:8000`.\n\n## Testing\n\nTo test Rocket, simply run `./scripts/test.sh` from the root of the source tree.\nThis will build and test the `core`, `codegen`, and `contrib` libraries as well\nas all of the examples. The `test.sh` script accepts no flags or either the\n`--release` flag to test in release mode or the `--contrib` flag to test all\n`contrib` modules individually. This script gets run by CI.\n\nTo test a crate individually, run `cargo test --all-features` in the\ncorresponding crate directory.\n\n### Core\n\nTesting for the core library is done inline in the corresponding module. For\nexample, the tests for routing can be found at the bottom of the\n`lib/src/router/mod.rs` file.\n\n### Codegen\n\nCode generation tests can be found in `codegen/tests`. We use the [compiletest]\nlibrary, which was extracted from `rustc`, for testing. See the [compiler test\ndocumentation] for information on how to write compiler tests.\n\n[compiletest]: https://crates.io/crates/compiletest_rs\n[compiler test documentation]: https://github.com/rust-lang/rust/blob/master/src/test/COMPILER_TESTS.md\n\n## Documentation\n\nYou can build the Rocket API documentation locally by running\n`./scripts/mk-docs.sh`. The resulting documentation is what gets uploaded to\n[api.rocket.rs](https://api.rocket.rs/).\n\n## Contributing\n\nContributions are absolutely, positively welcome and encouraged! Contributions\ncome in many forms. You could:\n\n  1. Submit a feature request or bug report as an [issue].\n  2. Ask for improved documentation as an [issue].\n  3. Comment on [issues that require feedback].\n  4. Contribute code via [pull requests].\n\n[issue]: https://github.com/SergioBenitez/Rocket/issues\n[issues that require feedback]: https://github.com/SergioBenitez/Rocket/issues?q=is%3Aissue+is%3Aopen+label%3A%22feedback+wanted%22\n[pull requests]: https://github.com/SergioBenitez/Rocket/pulls\n\nWe aim to keep Rocket\'s code quality at the highest level. This means that any\ncode you contribute must be:\n\n  * **Commented:** Public items _must_ be commented.\n  * **Documented:** Exposed items _must_ have rustdoc comments with\n    examples, if applicable.\n  * **Styled:** Your code should be `rustfmt`\'d when possible.\n  * **Simple:** Your code should accomplish its task as simply and\n     idiomatically as possible.\n  * **Tested:** You must add (and pass) convincing tests for any functionality you add.\n  * **Focused:** Your code should do what it\'s supposed to do and nothing more.\n\nAll pull requests are code reviewed and tested by the CI. Note that unless you\nexplicitly state otherwise, any contribution intentionally submitted for\ninclusion in Rocket by you shall be dual licensed under the MIT License and\nApache License, Version 2.0, without any additional terms or conditions.\n\n## License\n\nRocket is licensed under either of the following, at your option:\n\n * Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or http://www.apache.org/licenses/LICENSE-2.0)\n * MIT License ([LICENSE-MIT](LICENSE-MIT) or http://opensource.org/licenses/MIT)\n\nThe Rocket website source is licensed under [separate terms](site#license).\n'