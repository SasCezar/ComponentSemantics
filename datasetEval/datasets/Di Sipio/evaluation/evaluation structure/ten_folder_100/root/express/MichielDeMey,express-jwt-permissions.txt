b'# Express JWT Permissions\n\n[![Build Status](https://travis-ci.org/MichielDeMey/express-jwt-permissions.svg?branch=master)](https://travis-ci.org/MichielDeMey/express-jwt-permissions)\n[![Coverage Status](https://coveralls.io/repos/MichielDeMey/express-jwt-permissions/badge.svg?branch=master&service=github)](https://coveralls.io/github/MichielDeMey/express-jwt-permissions?branch=master)\n[![npm](https://img.shields.io/npm/dm/express-jwt-permissions.svg?maxAge=2592000)](https://www.npmjs.com/package/express-jwt-permissions)\n\n[![js-standard-style](https://cdn.rawgit.com/feross/standard/master/badge.svg)](https://github.com/feross/standard)\n\nMiddleware that checks JWT tokens for permissions, recommended to be used in conjunction with [express-jwt](https://github.com/auth0/express-jwt).\n\n## Install\n\n```\nnpm install express-jwt-permissions --save\n```\n\n## Usage\n\nThis middleware assumes you already have a JWT authentication middleware such as [express-jwt](https://github.com/auth0/express-jwt).\n\nThe middleware will check a decoded JWT token to see if a token has permissions to make a certain request.\n\nPermissions should be described as an array of strings inside the JWT token, or as a space-delimited [OAuth 2.0 Access Token Scope](https://tools.ietf.org/html/rfc6749#section-3.3) string.\n\n```json\n"permissions": [\n  "status",\n  "user:read",\n  "user:write"\n]\n```\n\n```json\n"scope": "status user:read user:write"\n```\n\nIf your JWT structure looks different you should map or reduce the results to produce a simple Array or String of permissions.\n\n### Using permission Array\nTo verify a permission for all routes using an array:\n\n```javascript\nvar guard = require(\'express-jwt-permissions\')()\n\napp.use(guard.check(\'admin\'))\n```\n\nIf you require different permissions per route, you can set the middleware per route.\n\n```javascript\nvar guard = require(\'express-jwt-permissions\')()\n\napp.get(\'/status\', guard.check(\'status\'), function(req, res) { ... })\napp.get(\'/user\', guard.check([\'user:read\']), function(req, res) { ... })\n```\n\nLogical combinations of required permissions can be made using nested arrays.\n\nSingle string\n```js\n// Required: "admin"\napp.use(guard.check(\n  \'admin\'\n))\n```\n\nArray of strings\n\n```javascript\n// Required: "read" AND "write"\napp.use(guard.check(\n  [\'read\', \'write\']\n))\n```\n\nArray of arrays of strings\n\n```javascript\n// Required: "read" OR "write"\napp.use(guard.check([\n  [\'read\'],\n  [\'write\']\n]))\n\n// Required: "admin" OR ("read" AND "write")\napp.use(guard.check([\n  [\'admin\'],\n  [\'read\', \'write\']\n]))\n```\n\n### Configuration\nTo set where the module can find the user property (default `req.user`) you can set the `requestProperty` option.\n\nTo set where the module can find the permissions property inside the `requestProperty` object (default `permissions`), set the `permissionsProperty` option.\n\nExample:\n\nConsider you\'ve set your permissions as `scope` on `req.identity`, your JWT structure looks like:\n\n```json\n"scope": "user:read user:write"\n```\n\nYou can pass the configuration into the module:\n\n```javascript\nvar guard = require(\'express-jwt-permissions\')({\n  requestProperty: \'identity\',\n  permissionsProperty: \'scope\'\n})\n\napp.use(guard.check(\'user:read\'))\n```\n\n## Error handling\n\nThe default behavior is to throw an error when the token is invalid, so you can add your custom logic to manage unauthorized access as follows:\n\n```javascript\napp.use(guard.check(\'admin\'))\n\napp.use(function (err, req, res, next) {\n  if (err.code === \'permission_denied\') {\n    res.status(403).send(\'Forbidden\');\n  }\n});\n```\n\n**Note** that your error handling middleware should be defined after the jwt-permissions middleware.\n\n## Excluding paths\n\nThis library has integration with [express-unless](https://github.com/jfromaniello/express-unless) to allow excluding paths, please refer to their [usage](https://github.com/jfromaniello/express-unless#usage).\n\n```javascript\nconst checkForPermissions = guard\n  .check([\'admin\'])\n  .unless({ path: \'/not-secret\' })\n\napp.use(checkForPermissions)\n```\n\n## Tests\n\n```\n$ npm install\n$ npm test\n```\n\n## License\n\nThis project is licensed under the MIT license. See the [LICENSE](LICENSE.txt) file for more info.\n'