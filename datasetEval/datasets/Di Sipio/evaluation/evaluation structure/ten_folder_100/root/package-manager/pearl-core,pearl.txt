b'Pearl\n=====\n\nBecause only in the best Shells you will find a Pearl...\n\n<h1 align="center">\n    <a href="https://github.com/pearl-core/pearl"><img\n        alt="Pearl"\n        width=300px\n        src="https://rawgit.com/pearl-core/logo/master/pearl.png"></a>\n</h1>\n\n|Project Status|Communication|\n|:-----------:|:-----------:|\n|[![Build status](https://api.travis-ci.org/pearl-core/pearl.png?branch=master)](https://travis-ci.org/pearl-core/pearl) | [![Join the gitter chat at https://gitter.im/pearl-core/pearl](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/pearl-core/pearl?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge) |\n\n**Table of Contents**\n- [Description](#description)\n- [Quickstart](#quickstart)\n- [Installation](#installation)\n  - [Dependencies](#dependencies)\n  - [Linux](#linux)\n  - [OSX](#osx)\n- [Create your own Pearl package in seconds!](#create-your-own-pearl-package-in-seconds)\n- [Create your own Pearl repository in seconds!](#create-your-own-pearl-repository-in-seconds)\n- [Troubleshooting](#troubleshooting)\n- [Contributing](#contributing)\n\nDescription\n===========\n**Pearl** is a lightweight package manager for automating reproducible environments\nbetween different systems (Linux and OSX).\nIt can be used for dotfiles, plugins, programs and any form of code\naccessible via git.\n\nAs soon as a package gets installed, its content can be activated out of the box\naccording to certain events, like, for instance, a shell startup (Bash, Zsh or Fish) or\nan editor startup (Vim or Emacs). This is possible via a smart and simple\n[hook mechanism](#create-your-own-pearl-package-in-seconds)\nthat integrates the package content within the Pearl ecosystem.\n\nThe main advantages on using Pearl are:\n\n- Create your own Pearl package ***in seconds*** (any git repository is already a Pearl package)!\n- Full control and sync of your dotfiles across different systems.\n- Automatic bootstrap of the package content whenever shells or editors get started.\n- Access to a wide range of existing packages via the [OPH (Official Pearl Hub)](https://github.com/pearl-hub).\n- Allows to create your own package repository that can be shared with your friends!\n- Stable codebase with 100+ unit tests and exhaustive integration tests via [Travis](https://travis-ci.org/pearl-core/pearl) for Linux and OSX.\n- Small number of [dependencies](#dependencies) needed in order to ensure compatibility with most of the systems.\n\nComparison with similar solution: Ansible\n-----------------------------------------\nYou could achieve something similar from what Pearl provide by using\n[Ansible](https://www.ansible.com/). Ansible is a powerful software for IT\nautomation which can be widely used for many use cases.\nDespite of this, Ansible has few drawbacks when using it for lightweight forms of automations:\n\n- Pearl uses bash for writing simple scripts for automation:\n  - it makes easier the integration with other programs in the system (without existing Playbooks may be hard and tedious to achieve this in Ansible);\n  - bash is a powerful, accessible and well-known language;\n- Ansible requires way more dependencies than Pearl;\n- Ansible requires knowledge about how Ansible Playbooks works;\n- Pearl uses built-in [functions](https://github.com/fsquillace/buava/blob/master/README.md#table-of-buava-functions) and [variables](#structure-of-a-pearl-package) which heavily simplify construction of scripts for automation;\n- Pearl makes easier to remove packages and restore the system to an initial state;\n\nQuickstart\n==========\nThe Pearl CLI script allows to: `list`, `search`, `install`, `update`, `emerge`,\n`remove` the Pearl packages defined according to the configuration located in `~/.config/pearl/pearl.conf`\n\n![quickstart](https://raw.githubusercontent.com/pearl-core/resources/master/pearl-opt3.gif)\n\nList\n----\n- List all the available packages:\n\n```sh\n$ pearl list\n...\npearl/dot-git\n    Awesome git dotfiles (https://github.com/pearl-hub/git)\npearl/sesaila [installed]\n    Awesome aliases for Bash, Zsh and Fish shells (https://github.com/pearl-hub/sesaila)\npearl/airline [installed]\n    Status/tabline for vim (https://github.com/vim-airline/vim-airline)\npearl/trash-cli [installed]\n    Command line interface to the freedesktop.org trashcan (https://github.com/pearl-hub/trash-cli)\n...\n```\n\nSearch\n------\n- Search for `vim` Pearl packages:\n\n```sh\n$ pearl search vim\n* Updating https://github.com/pearl-hub/repo.git repository\npearl/dot-vim\n    Awesome vim dotfiles (https://github.com/pearl-hub/vim)\n```\n\nInstall\n-------\n- Install `pearl/dot-vim` package (as soon as the package is installed the package is ready out of the box in vim editor!):\n\n```sh\n$ pearl install dot-vim\n* Updating https://github.com/pearl-hub/repo.git repository\n* Installing pearl/dot-vim package\n```\n\n- Install `pearl/trash-cli` package:\n\n```sh\n$ pearl install trash-cli\n* Updating https://github.com/pearl-hub/repo.git repository\n* Installing pearl/trash-cli package\n$ trash -h\nUsage: trash [OPTION]... FILE...\n\nPut files in trash\n...\n...\n```\n\nUpdate\n-------\n- Update `pearl/dot-vim` package:\n\n```sh\n$ pearl update dot-vim\n* Updating https://github.com/pearl-hub/repo.git repository\n* Updating pearl/dot-vim package\n```\n\n- Update Pearl and all its packages installed:\n\n```sh\n$ pearl update\n...\n* Updating https://github.com/pearl-hub/repo.git repository\n* Updating Pearl script\n* Updating pearl/dot-vim package\n* Updating pearl/airline package\n* Updating pearl/trash-cli package\n* Updating pearl/caprica package\n...\n```\n\nEmerge\n------\nEmerge is an idempotent command for either installing or updating a package\ndepending whether the package is already installed or not. This command turns\nto be particularly useful for establishing dependencies between packages.\nSee the section [below](#define-dependencies-between-pearl-packages)\nfor more details.\n\nRemove\n-------\n- Remove `pearl/dot-vim` package:\n\n```sh\n$ pearl remove dot-vim\n* Updating https://github.com/pearl-hub/repo.git repository\n* Removing pearl/dot-vim package\n```\n\n- Remove Pearl and all its packages installed:\n\n```sh\n$ pearl remove\n...\nAre you sure to REMOVE all the Pearl packages in $PEARL_HOME folder? (N/y)\n* Updating https://github.com/pearl-hub/repo.git repository\n* Removing pearl/dot-vim package\n* Removing pearl/airline package\n* Removing pearl/trash-cli package\n* Removing pearl/caprica package\n...\n```\n\nRecommended Pearl Hub packages to install:\n-------------------------------\n\n- [cmd](https://github.com/pearl-hub/cmd)\n- [kyrat](https://github.com/pearl-hub/kyrat)\n- [ranger](https://github.com/pearl-hub/ranger)\n- [sesaila](https://github.com/pearl-hub/sesaila)\n- [trash-cli](https://github.com/pearl-hub/trash-cli)\n- [txum](https://github.com/pearl-hub/txum)\n\nFor dotfiles packages take a look [here](https://github.com/pearl-hub?q=dot).\n\nCheck out the [OPH (Official Pearl Hub)](https://github.com/pearl-hub)\nfor more packages you might be interested.\n\nInstallation\n============\n\nDependencies\n------------\nBefore installing Pearl be sure that all dependencies are properly installed in your system.\nThe Pearl dependencies are the following:\n\n- [bash (>=4.1)](https://www.gnu.org/software/bash/)\n- [git (>=1.8)](https://git-scm.com/)\n- [GNU coreutils](https://www.gnu.org/software/coreutils/)\n- [grep](https://www.gnu.org/software/grep/) optional\n- [sed](https://www.gnu.org/software/sed/) optional\n\nPearl supports also the following shells:\n\n- [fish (>=2.2.0)](https://fishshell.com/)\n- [zsh (>=5.2)](http://www.zsh.org/)\n\nLinux\n-----\nAssuming all Pearl [dependencies](#dependencies) are properly installed\nin the system, to install Pearl run the following:\n```sh\nwget https://raw.githubusercontent.com/pearl-core/installer/master/install.sh\n# or\ncurl -LO  https://raw.githubusercontent.com/pearl-core/installer/master/install.sh\n\nbash install.sh\n```\n\nOSX\n---\nIn order to install all Pearl dependencies, you first need to install [Homebrew](http://brew.sh/).\n\nTo install all the needed dependencies via Homebrew:\n```sh\nbrew update\nbrew install bash git coreutils grep gnu-sed\n```\n\nOnce all Pearl dependencies are properly installed in the system, to install Pearl\nrun the following:\n```sh\nwget https://raw.githubusercontent.com/pearl-core/installer/master/install.sh\n# or\ncurl -LO  https://raw.githubusercontent.com/pearl-core/installer/master/install.sh\n\nbash install.sh\n```\n\n**IMPORTANT NOTE**: Pearl gets loaded through `~/.bashrc`. The problem is that in OSX,\nthe terminal opens a login shell and only `~/.bash_profile` will get executed.\nRun the following only if `~/.bashrc` is not loaded within `~/.bash_profile` file:\n\n```sh\necho "[[ -f ~/.bashrc ]] && source ~/.bashrc" >> ~/.bash_profile\n```\n\nThis will make sure that `~/.bashrc` will run at shell startup.\n\nCreate your own Pearl package in seconds!\n===============\n**Any git repository is already a Pearl package**. For instance, in order\nto see a dotfiles repository in Pearl, you just need to change\nthe Pearl configuration file located in `$HOME/.config/pearl/pearl.conf`.\n\nAdd the following line to `pearl.conf` file:\n\n    PEARL_PACKAGES["joe-dotfiles"]="https://github.com/joe/mydotfiles.git"\n\nIn other words, update the `PEARL_PACKAGES` array with a new entry containing the\nname of the package (i.e. `joe-dotfiles`) and the git url (i.e. `https://github.com/joe/mydotfiles.git`).\n\n***That\'s it!*** The package will be ready to be [installed](#install),\n[updated](#update), [emerged](#emerge) and [removed](#remove) via the Pearl system.\n\nAlso, an optional description of the package can be defined via `PEARL_PACKAGES_DESCR` array:\n\n    PEARL_PACKAGES_DESCR["joe-dotfiles"]="The Joe\'s dotfiles"\n\n## Structure of a Pearl package ##\nYour own git repository can contain an **optional** directory\nnamed `pearl-config` used by Pearl to integrate the package with the Pearl environment.\n\n    / (package root)\n    \xe2\x94\x82\n    \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 pearl-config (optional directory)\n    \xe2\x94\x82   \xe2\x94\x82\n    \xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 install.sh\n    \xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 config.sh\n    \xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 config.bash\n    \xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 config.zsh\n    \xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 config.fish\n    \xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 config.vim\n    \xe2\x94\x82   \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 config.el\n    \xe2\x94\x82\n    \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 (additional package content)\n\nThe files inside `pearl-config` are also **optional** scripts:\n\n- `install.sh` - contains the [hooks functions](#hook-functions) executed during the `install`, `update` and `remove` events.\n- `config.sh` - will be sourced whenever a new Bash/Zsh shell is starting up.\n- `config.bash` - will be sourced whenever a new Bash shell is starting up.\n- `config.zsh` - will be sourced whenever a new Zsh shell is starting up.\n- `config.fish` - will be sourced whenever a new Fish shell is starting up.\n- `config.vim` - will be executed whenever Vim editor is starting up.\n- `config.el` - will be sourced whenever Emacs editor is starting up.\n\nThe following variables can be used in any of the previous scripts:\n\n- `PEARL_HOME`          - Pearl location (default: `$HOME/.config/pearl`)\n- `PEARL_ROOT`          - Pearl script location\n- `PEARL_PKGDIR`        - Pearl package location\n- `PEARL_PKGVARDIR`     - Pearl package location containing data needed for package\n- `PEARL_PKGNAME`       - Pearl package name\n- `PEARL_PKGREPONAME`   - Pearl package repo name (useful to detect and interact with packages within the same repo)\n\nAdditionally, the script `install.sh` can use the utility functions available in\n[Buava](https://github.com/fsquillace/buava) and Pearl [*utils*](lib/utils) directory that\nmake easier the integration with Pearl ecosystem.\n\nUseful examples of Pearl packages can be checked in the\n[Official Pearl Hub](https://github.com/pearl-hub).\n\n**Note**: Legacy Pearl versions were using a different directory named `pearl-metadata`. This directory is meant to be deprecated in the upcoming Pearl major version.\n\n### The install.sh script ###\n#### Hook functions ####\n- `post_install`  - Called *after* an installation of the package occurs.\n- `pre_update`    - Called *before* an update of the package occurs.\n- `post_update`   - Called *after* an update of the package occurs.\n- `pre_remove`    - Called *before* a removal of the package occurs.\n- `post_remove`   - Called *after* a removal of the package occurs.\n\n#### An install.sh script example ####\n\n    post_install() {\n        warn "Remember to setup your config located in: ~/.dotfile"\n        # Do a smart backup before modifying the file\n        backup ${HOME}/.dotfile\n        "# New dotfile" > ${HOME}/.dotfile\n        link tmux "$PEARL_PKGDIR/mytmux.conf"\n\n        info "Awesome - new package installed!"\n        return 0\n    }\n    post_update() {\n        post_install\n        return 0\n    }\n    pre_remove() {\n        info "dotfiles package removed"\n        unlink tmux "$PEARL_PKGDIR/mytmux.conf"\n\n        # Do an idempotent delete\n        delete ${HOME}/.dotfile\n        return 0\n    }\n\nThe `info` and `warn` are functions that print a message\nusing different colors (namely cyan and yellow).\n\nThe `link` `unlink` are idempotent functions (the result will not change\nif the function will be called multiple times) that are able\nto link/unlink a config file in order to be loaded at startup by a certain program.\n\nThe `backup` keeps the last three backups of the file and do not perform backup\nif the file has not modified since the latest backup. The `delete` is a\nfunction for idempotent remove (it will not raise an error if the file\nno longer exist).\n\nAll these functions belong to the [Buava](https://github.com/fsquillace/buava) package\nin [`utils.sh`](https://github.com/fsquillace/buava/blob/master/lib/utils.sh)\nand to the Pearl [`utils.sh`](lib/utils/utils.sh) script. You can use them\ninside the `install.sh` to any hook function.\n\n**Very important note**: All the hook functions **must** be\n[**idempotent**](https://en.wikipedia.org/wiki/Idempotence)\n(the commands of each hook function must produce the same result even if\nthe command gets executed multiple times).\nAll buava commands are idempotent and this will help to write hook functions\nvery quickly.\n\n**Note**: For OSX system, the GNU version `sed` and `grep` are automatically\nimported in `install.sh` and can be directly used if needed.\n\n## Create a Pearl package from a local directory ##\nPearl package system will work even for local directories. This is particularly useful\nwhenever a Pearl package needs to be tested before pushing to a git repository.\n\nFor instance, the following lines in `pearl.conf` file will add a package located in\n`/home/joe/dotfiles`:\n\n    PEARL_PACKAGES["joe-dotfiles"]="/home/joe/dotfiles"\n    PEARL_PACKAGES_DESCR["joe-dotfiles"]="The Joe\'s dotfiles"\n\nThe directory path must be an absolute path.\n\nThe package will be ready to be [installed](#install), [updated](#update),\n[emerged](#emerge) and [removed](#remove) via the Pearl system.\n\nThe directory content can be structured in the exact way as described\nin the [section](#structure-of-a-pearl-package) above.\n\n## Define dependencies between Pearl packages ##\nSuppose you have a package `mypack` which depends on another package `mydep`,\nyou can update the `mypack` `install.sh` file in this way:\n\n    post_install() {\n        # Install/update the dependency here:\n        pearl emerge ${PEARL_PKGREPONAME}/mydep\n    }\n    post_update() {\n        post_install\n    }\n    pre_remove() {\n        # Uncomment below to strictly remove the dependency\n        # during the removal of the current package:\n        #pearl remove ${PEARL_PKGREPONAME}/mydep\n    }\n\nThe `PEARL_PKGREPONAME` variable will make sure to define dependencies only\nbetween packages of the same repository.\nTo see a real example in Pearl Hub, take a look at the [Kyrat install.sh](https://github.com/pearl-hub/kyrat/blob/master/pearl-config/install.sh).\n\n## Use third-party git repository not available in Pearl Hub ##\nIf you want to use a third-party git repository\nthat is not available in the [Official Pearl Hub](https://github.com/pearl-hub),\nyou can:\n\n* Create your own git repository and use the `PEARL_PKGVARDIR` directory (recommended)\n* Create your own git repository and use [git submodule](https://git-scm.com/docs/git-submodule)\n* Point directly to the third-party git repository\n\nTo see examples of Pearl packages from third-party git repos take a look at the\n[Official Pearl Hub](https://github.com/pearl-hub).\n\n### Create your own git repository and use the `PEARL_PKGVARDIR` directory (recommended) ###\nYou can use the `PEARL_PKGVARDIR` directory during the installation phase to install the third-party git repository.\nThis is the best way to incorporate third-party project into Pearl ecosystem.\n\nHere it is an example of `install.sh` file which install the ranger file manager into the directory `${PEARL_PKGVARDIR}/ranger`:\n\n    function post_install(){\n        install_or_update_git_repo https://github.com/ranger/ranger.git "${PEARL_PKGVARDIR}/ranger" master\n    }\n\n    function post_update(){\n        post_install\n    }\n\n    function pre_remove(){\n        rm -rf ${PEARL_PKGVARDIR}/ranger\n    }\n\nThe function `install_or_update_git_repo` comes from the [Buava](https://github.com/fsquillace/buava)\nlibrary in [`utils.sh`](https://github.com/fsquillace/buava/blob/master/lib/utils.sh)\nwhich is natively available in Pearl during the installation.\nYou can even use the functions `install_git_repo` or `update_git_repo` which respectively install or update the git repository.\n\nFor a full example take a look at the [ranger](https://github.com/pearl-hub/ranger) Pearl Hub package.\n\n### Create your own git repository and use git submodule ###\nInside your git repository, you just need to add the third-party git repo as a\n[git submodule](https://git-scm.com/docs/git-submodule).\nFor instance, to add the [powerline](https://github.com/powerline/powerline) in your Pearl package,\nyou can introduce a submodule in the `module` directory:\n\n    git submodule add https://github.com/powerline/powerline.git module\n\nThe filesystem structure of the package will become something like this:\n\n    / (package root)\n    \xe2\x94\x82\n    \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 pearl-config   (optional directory)\n    \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 module/        (contains third-party code)\n    \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 (additional package content)\n\nThen, you just need to modify the config scripts in order to integrate the third-party\nproject inside Pearl environment.\n\n### Point directly to the third-party git repository ###\nLet\'s suppose you want to install the [vim-rails](https://github.com/tpope/vim-rails) plugin.\nIn your Pearl configuration (~/.config/pearl/pearl.conf), add your new Pearl package:\n\n    PEARL_PACKAGES["vim-rails"]="https://github.com/tpope/vim-rails.git"\n    PEARL_PACKAGES_DESCR["vim-rails"]="Ruby on Rails power tools"\n\nInstall the package:\n\n    pearl install vim-rails\n\nVoila\', your new vim plugin is ready to be used!\n\nThis approach is particularly useful whenever you do not need to specify\nany pearl config to *"enrich"* the third-party project inside\nthe Pearl environment.\n\n\nCreate your own Pearl repository in seconds!\n===============\nA Pearl repository is just a git repository containing a file located in `pearl-config/pearl.conf`\nwith a list of packages. For instance, the *OPH* repository is available\n[here](https://github.com/pearl-hub/repo).\n\nIn order to use the new repository (i.e. "https://github.com/myrepo/pearl-repo.git"),\nupdate the `pearl.conf` file by adding the following line:\n\n    PEARL_REPOS+=("https://github.com/myrepo/pearl-repo.git")\n\nTroubleshooting\n===============\n\n## Corrupted Pearl Home directory ##\n\n> **Q**: What should I do if I accidentally removed files/packages in `$PEARL_HOME`?\n\n> **A**: You can recover the structure of the `$PEARL_HOME` by running:\n\n    $> pearl init\n\n> The command will create all the essential directories and symlinks in `$PEARL_HOME`.\n> It is harmless to run the `init` command multiple times since it is idempotent.\n\n## Corrupted package ##\n\n> **Q**: Why I can no longer update/remove a package?\n\n> **A**: This is probably because either one of the hook functions\n> is failing or the package content is corrupted. You can forcely delete a package by simply\n> removing its directory:\n\n    $> rm -rf $PEARL_HOME/packages/pearl/<packagename>\n\n> After that, you can reinstall the package again.\n> The Pearl packages contain a dedicated directory `var` for storing\n> data needed for the package itself.\n> The `var` data are always managed by the package and they never gets deleted by Pearl\n> during the package removal.\n> If you want to delete the content in `var` package:\n\n    $> rm -rf $PEARL_HOME/var/pearl/<packagename>\n\n## Package shell variables/functions not visible in current shell after installation ##\n\n> **Q**: Why are not package\'s environment variables/functions visible in\n> my current shell after installing/updating the package?\n\n> **A**: After package install/update, the variables or\n> functions related to the current shell and defined in `pearl-config/config.*`\n> may not be available because a reload of Pearl configuration file is required.\n> You can fix this by simply run the function `pearl-source` which reloads\n> the configuration. The use of such function is not always required but depends\n> whether the variables/functions involve the current shell where the\n> package `install`/`update` occurred (i.e. a new variable defined in `config.sh`\n> and the current shell is a bash or zsh). Alternatively, user can always\n> create a new shell and the package resources will be available as\n> expected.\n\n## Error during package install\n\n> Q: Why Do I get the following error:\n\n    Error on executing \'post_install\' hook. Rolling back...\n\n> A: This occurs when the `post_install` hook function fails.\n> Pearl will attempt to roll back and force a removal of the package. In this way\n> you can attempt to install the package again once the hook function gets\n> fixed.\n\nContributing\n============\n\nYou could help improving Pearl and the [OPH](https://github.com/pearl-hub) in the following ways:\n\n- [Reporting Bugs](CONTRIBUTING.md#reporting-bugs)\n- [Suggesting Enhancements](CONTRIBUTING.md#suggesting-enhancements)\n- [Writing Code](CONTRIBUTING.md#your-first-code-contribution)\n'