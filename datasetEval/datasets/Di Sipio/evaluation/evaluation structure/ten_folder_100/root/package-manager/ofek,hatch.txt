b"Hatch\n=====\n\n.. image:: https://img.shields.io/pypi/v/hatch.svg?style=flat-square\n    :target: https://pypi.org/project/hatch\n    :alt: Latest PyPI version\n\n.. image:: https://img.shields.io/travis/ofek/hatch/master.svg?style=flat-square\n    :target: https://travis-ci.org/ofek/hatch\n    :alt: Travis CI\n\n.. image:: https://img.shields.io/appveyor/ci/ofek/hatch/master.svg?style=flat-square\n    :target: https://ci.appveyor.com/project/ofek/hatch\n    :alt: AppVeyor CI\n\n.. image:: https://img.shields.io/codecov/c/github/ofek/hatch/master.svg?style=flat-square\n    :target: https://codecov.io/gh/ofek/hatch\n    :alt: Codecov\n\n.. image:: https://img.shields.io/pypi/pyversions/hatch.svg?style=flat-square\n    :target: https://pypi.org/project/hatch\n    :alt: Supported Python versions\n\n.. image:: https://img.shields.io/pypi/l/hatch.svg?style=flat-square\n    :target: https://choosealicense.com/licenses\n    :alt: License\n\n-----\n\nHatch is a productivity tool designed to make your workflow easier and more\nefficient, while also reducing the number of other tools you need to know.\nIt aims to make the 90% use cases as pleasant as possible.\n\nFor me personally, Hatch has entirely replaced the manual (or entire!)\nuse of these:\n\n- `Cookiecutter PyPackage <https://github.com/audreyr/cookiecutter-pypackage>`_\n- `pip <https://github.com/pypa/pip>`_\n- `virtualenv <https://github.com/pypa/virtualenv>`_\n- `pyenv <https://github.com/pyenv/pyenv>`_\n- `Pew <https://github.com/berdario/pew>`_\n- `inve <https://gist.github.com/datagrok/2199506>`_\n- `pytest`_\n- `Coverage.py <https://github.com/nedbat/coveragepy>`_\n- `twine <https://github.com/pypa/twine>`_\n- `bumpversion <https://github.com/peritus/bumpversion>`_\n- `zest.releaser <https://github.com/zestsoftware/zest.releaser>`_\n- `Incremental <https://github.com/twisted/incremental>`_\n- ``python setup.py ...``\n\n.. code-block::\n\n               /^\\/^\\\n             _|__|  O|\n    \\/     /~     \\_/ \\\n     \\____|__________/  \\\n            \\_______      \\\n                    `\\     \\                 \\\n                      |     |                  \\\n                     /      /                    \\\n                    /     /                       \\\n                  /      /                         \\ \\\n                 /     /                            \\  \\\n               /     /             _----_            \\   \\\n              /     /           _-~      ~-_         |   |\n             (      (        _-~    _--_    ~-_     _/   |\n              \\      ~-____-~    _-~    ~-_    ~-_-~    /\n                ~-_           _-~          ~-_       _-~\n                   ~--______-~                ~-___-~\n\n\n.. contents:: **Table of Contents**\n    :backlinks: none\n\nFeatures\n--------\n\n- Completely cross-platform (terminal colors too!) \\\\(\\*_^)/\n- Configurable project creation, with good defaults\n- Easiest virtual environment management available, with support for all shells\n- Package management defaults to a per-user basis, allowing global usage with\n  elevated privileges (`for your safety <https://news.ycombinator.com/item?id=15256121>`_)\n- Configurable semantic version bumping\n- Robust build/package cleanup\n- Easy testing with code coverage\n- Simple building and releasing for PyPI\n- All commands are environment-aware w.r.t. python/pip\n\nUsage\n-----\n\nStarting a new project is as easy as:\n\n.. code-block:: bash\n\n    $ hatch new my-app\n    Created project `my-app`\n\nNow you have a fully functional package that can be built and distributed.\n\n.. code-block:: bash\n\n    $ tree --dirsfirst my-app\n    my-app\n    \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 my_app\n    \xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 __init__.py\n    \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 tests\n    \xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 __init__.py\n    \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 LICENSE-APACHE\n    \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 LICENSE-MIT\n    \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 MANIFEST.in\n    \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 README.rst\n    \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 requirements.txt\n    \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 setup.py\n    \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 tox.ini\n\n    2 directories, 8 files\n\nYou can also bump the version of most projects without any setup:\n\n.. code-block:: bash\n\n    $ git clone -q https://github.com/requests/requests && cd requests\n    $ hatch grow build\n    Updated /home/ofek/requests/requests/__version__.py\n    2.18.4 -> 2.18.4+build.1\n    $ hatch grow fix\n    Updated /home/ofek/requests/requests/__version__.py\n    2.18.4+build.1 -> 2.18.5\n    $ hatch grow pre\n    Updated /home/ofek/requests/requests/__version__.py\n    2.18.5 -> 2.18.5-rc.1\n    $ hatch grow minor\n    Updated /home/ofek/requests/requests/__version__.py\n    2.18.5-rc.1 -> 2.19.0\n    $ hatch grow major\n    Updated /home/ofek/requests/requests/__version__.py\n    2.19.0 -> 3.0.0\n\nChecking code coverage is a breeze:\n\n.. code-block:: bash\n\n    $ git clone https://github.com/ofek/privy && cd privy\n    $ hatch test -c\n    ========================= test session starts ==========================\n    platform linux -- Python 3.5.2, pytest-3.2.1, py-1.4.34, pluggy-0.4.0\n    rootdir: /home/ofek/privy, inifile:\n    plugins: xdist-1.20.0, mock-1.6.2, httpbin-0.0.7, forked-0.2, cov-2.5.1\n    collected 10 items\n\n    tests/test_privy.py ..........\n\n    ====================== 10 passed in 4.34 seconds =======================\n\n    Tests completed, checking coverage...\n\n    Name                  Stmts   Miss Branch BrPart  Cover   Missing\n    -----------------------------------------------------------------\n    privy/__init__.py         1      0      0      0   100%\n    privy/core.py            30      0      0      0   100%\n    privy/utils.py           13      0      4      0   100%\n    tests/__init__.py         0      0      0      0   100%\n    tests/test_privy.py      57      0      0      0   100%\n    -----------------------------------------------------------------\n    TOTAL                   101      0      4      0   100%\n\nCreating virtual envs is incredibly simple:\n\n.. code-block:: bash\n\n    $ hatch env my-app\n    Already using interpreter /usr/bin/python3\n    Successfully saved virtual env `my-app` to `/home/ofek/.virtualenvs/my-app`.\n    $ hatch env -ll\n    Virtual environments found in /home/ofek/.virtualenvs:\n\n    my-app ->\n      Version: 3.5.2\n      Implementation: CPython\n\nand using them is just as fluid:\n\n.. code-block:: bash\n\n    $ which python\n    /usr/bin/python\n    $ hatch shell my-app\n    (my-app) $ which python\n    /home/ofek/.virtualenvs/my-app/bin/python\n\nKeep reading for so much more!\n\nInstallation\n------------\n\nHatch is distributed on `PyPI`_ as a universal wheel and is available on\nLinux/macOS and Windows and supports Python 3.5+ and PyPy.\n\n.. code-block:: bash\n\n    $ pip3 install --user hatch\n\nor simply ``pip`` if that already points to a Python 3 version.\n\nIf ``hatch`` doesn't work on your system immediately after that, please\nrun `this command <https://github.com/ofek/pybin#installation>`_ then\n`that command <https://github.com/ofek/pybin#pybin-put>`_.\n\nAfter the first installation, you may want to run ``hatch config --restore`` to\nensure your config file is available.\n\nGuide\n-----\n\n- `Command reference <https://github.com/ofek/hatch/blob/master/COMMANDS.rst>`_\n- `Configuration <https://github.com/ofek/hatch/blob/master/CONFIG.rst>`_\n\nContributing\n------------\n\nTODO\n^^^^\n\n*meta*\n    - next to the snake ascii art, put a ``hatch``\\ ed egg (blocks ``1.0.0``)\n\n*project creation*\n    - Support `AppVeyor <https://www.appveyor.com/>`_ and `CircleCI <https://circleci.com/>`_.\n    - Minimally support `Mercurial <https://en.wikipedia.org/wiki/Mercurial>`_\n\n*Commands*\n    - ``bench`` - use `<https://github.com/ionelmc/pytest-benchmark>`_ (blocks ``1.0.0``)\n    - ``python`` - installs the desired version of Python. will work on each platform\n    - ``style`` - maybe not needed. use `<https://github.com/PyCQA/flake8>`_\n    - ``docs`` - maybe not needed. use `<https://github.com/sphinx-doc/sphinx/>`_\n\nLicense\n-------\n\nHatch is distributed under the terms of both\n\n- `Apache License, Version 2.0 <https://choosealicense.com/licenses/apache-2.0>`_\n- `MIT License <https://choosealicense.com/licenses/mit>`_\n\nat your option.\n\nCredits\n-------\n\n- All the people who work on `Click <https://github.com/pallets/click>`_\n- All the people involved in the `Python packaging <https://github.com/pypa>`_ ecosystem\n- All the people involved in the `pytest`_ ecosystem\n- `Ned Batchelder <https://twitter.com/nedbat>`_, for his\n  `Coverage.py <https://github.com/nedbat/coveragepy>`_ is the unsung heroic tool of the\n  Python community. Without it, users would be exposed to more bugs before we are.\n- `Te-j\xc3\xa9 Rodgers <https://github.com/mr-rodgers>`_ for bestowing me the name ``hatch`` on `PyPI`_\n\nHistory\n-------\n\nImportant changes are emphasized.\n\nmaster\n^^^^^^\n\n0.23.0\n^^^^^^\n\n- Fixed wheel packaging\n\n0.22.0\n^^^^^^\n\n- Upgrade ``userpath`` dependency\n- Fixed shipped test suite\n\n0.21.0\n^^^^^^\n\n- ``adduserpath`` dependency has claimed/been renamed ``userpath``\n- Fixed various build errors\n- Don't require internet for tests\n\n0.20.0\n^^^^^^\n\n- `Conda <https://conda.io/docs/glossary.html#miniconda-glossary>`_ can now be installed\n  on every platform with a simple ``hatch conda`` \\\\[^,^]/\n- ``new``/``init`` commands now enter an interactive mode if no project name is specified!\n\n0.19.0\n^^^^^^\n\n- ``test``\\ ing now supports the use of a project's dedicated virtual\n  env and any dev requirements can be installed in it automatically!\n\n0.18.0\n^^^^^^\n\n- ``release`` now allows the use of custom repositories!\n- **Fix:** ``clean``\\ ing now correctly ignores a project's dedicated virtual\n  env. This behavior can be disabled with the new ``-nd/--no-detect`` flag.\n\n0.17.1\n^^^^^^\n\n- Handle `<https://bugs.python.org/issue22490>`_\n\n0.17.0\n^^^^^^\n\n- Hatch now guarantees Windows support via AppVeyor!\n- No project detection will occur if a virtual env is active.\n\n0.16.0\n^^^^^^\n\n- Virtual envs created with ``env``, ``new``, ``init``, and ``shell`` commands can\n  now access the system site-packages with the ``-g/--global-packages`` flag!\n- Improved ``setup.py`` generation.\n\n0.15.0\n^^^^^^\n\n- ``use`` renamed to ``shell``, though it will remain as an alias!\n- ``new``/``init`` commands now only emit a warning when there is no config file.\n- You can now specify what Python to use when creating a virtual env\n  in the ``new``/``init`` command.\n- **Fix:** ``use`` no longer requires the env name argument to be ``.`` when\n  targeting a project's dedicated virtual env.\n\nView `all history <https://github.com/ofek/hatch/blob/master/HISTORY.rst>`_\n\n.. _pytest: https://github.com/pytest-dev\n.. _PyPI: https://pypi.org\n"