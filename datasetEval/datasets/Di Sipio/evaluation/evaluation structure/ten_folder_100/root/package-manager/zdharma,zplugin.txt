b'[![paypal](https://img.shields.io/badge/-Donate-yellow.svg?longCache=true&style=for-the-badge)](https://www.paypal.me/ZdharmaInitiative)\n[![paypal](https://www.paypalobjects.com/en_US/i/btn/btn_donate_LG.gif)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=D54B3S7C6HGME)\n[![patreon](https://img.shields.io/badge/-Patreon-orange.svg?longCache=true&style=for-the-badge)](https://www.patreon.com/psprint)\n<br/>New: You can request a feature when donating, even fancy or advanced ones get implemented this way. [There are\nreports](DONATIONS.md) about what is being done with the money received.\n\n<p align="center">\n<img src="https://raw.githubusercontent.com/zdharma/zplugin/master/doc/img/zplugin.png" />\n</p>\n\n[![Status][status-badge]][status-link] [![MIT License][MIT-badge]][MIT-link] [![][ver-badge]][ver-link] ![][act-badge] [![Chat at https://gitter.im/zplugin/Lobby][lobby-badge]][lobby-link]\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON\'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n**Table of Contents**  *generated with [DocToc](https://github.com/thlorenz/doctoc)*\n\n- [News](#news)\n- [Zplugin](#zplugin)\n- [Zplugin Wiki](#zplugin-wiki)\n- [Installation](#installation)\n  - [Option 1 - Automatic Installation (Recommended)](#option-1---automatic-installation-recommended)\n  - [Option 2 - Manual Installation](#option-2---manual-installation)\n- [Usage](#usage)\n  - [Introduction](#introduction)\n  - [Example Usage](#example-usage)\n  - [Ice Modifiers](#ice-modifiers)\n  - [Zplugin Commands](#zplugin-commands)\n  - [Updating Zplugin and Plugins](#updating-zplugin-and-plugins)\n  - [Using Oh My Zsh Themes](#using-oh-my-zsh-themes)\n- [Completions](#completions)\n  - [Calling `compinit` Without Turbo Mode](#calling-compinit-without-turbo-mode)\n  - [Calling `compinit` With Turbo Mode](#calling-compinit-with-turbo-mode)\n  - [Ignoring Compdefs](#ignoring-compdefs)\n  - [Disabling System-Wide `compinit` Call (Ubuntu)](#disabling-system-wide-compinit-call-ubuntu)\n- [Zplugin Module](#zplugin-module)\n  - [Motivation](#motivation)\n  - [Installation](#installation-1)\n  - [Measuring Time of `source`s](#measuring-time-of-sources)\n  - [Debugging](#debugging)\n- [Hints and Tips](#hints-and-tips)\n  - [Customizing Paths](#customizing-paths)\n  - [Non-GitHub (Local) Plugins](#non-github-local-plugins)\n  - [Extending Git](#extending-git)\n  - [Preinstalling Plugins](#preinstalling-plugins)\n- [Getting Help and Community](#getting-help-and-community)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n# News\n\n<details>\n  <summary>Here are the new features and updates added to zplugin in the last 90 days.</summary>\n\n* 25-11-2019\n  - A new subcommand `run` that executes a command in the given plugin\'s directory. It\n    has an `-l` option that will reuse the previously provided plugin. So that it\'s\n    possible to do:\n\n    ```zsh\n    zplg run my/plugin ls\n    zplg run -l cat \\*.plugin.zsh\n    zplg run -l pwd\n    ```\n\n* 07-11-2019\n  - Added a prefix-char: `@` that can be used before plugins if their name collides\n    with one of the ice-names. For example `sharkdp/fd` collides with the `sh` ice\n    (which causes the plugin to be loaded with the POSIX `sh` emulation applied). To\n    load it, do e.g.:\n\n    ```zsh\n    zplugin as"null" wait"2" lucid from"gh-r" for \\\n        mv"exa* -> exa" sbin"exa"  ogham/exa \\\n        mv"fd* -> fd" sbin"fd/fd"  @sharkdp/fd \\\n        sbin"fzf" junegunn/fzf-bin\n    ```\n\n    i.e.: precede the plugin name with `@`. Note: `sbin\'\'` is an ice added by the\n    [z-a-bin-gem-node](https://github.com/zplugin/z-a-bin-gem-node) annex, it provides\n    the command to the command line without altering `$PATH`.\n\n    See the [Zplugin Wiki](http://zdharma.org/zplugin/wiki/For-Syntax/) for more\n    information on the for-syntax.\n\n* 06-11-2019\n  - A new syntax, called for-syntax. Example:\n\n    ```zsh\n     zplugin as"program" atload\'print Hi!\' for \\\n         atinit\'print First!\' zdharma/null \\\n         atinit\'print Second!\' svn OMZ::plugins/git\n    ```\n\n    The output:\n\n    ```\n    First!\n    Hi!\n    Second!\n    Hi!\n    ```\n\n    And also:\n\n    ```zsh\n    % print -rl $path | egrep -i \'(/git|null)\'\n    /root/.zplugin/snippets/OMZ::plugins/git\n    /root/.zplugin/plugins/zdharma---null\n    ```\n\n    To load in light mode, use a new `light-mode` ice. More examples and information\n    can be found on the [Zplugin Wiki](http://zdharma.org/zplugin/wiki/For-Syntax/).\n\n* 03-11-2019\n  - A new value for the `as\'\'` ice \xe2\x80\x93 `null`. Specifying `as"null"` is like specifying\n    `pick"/dev/null" nocompletions`, i.e.: it disables the sourcing of the default\n    script file of a plugin or snippet and also disables the installation of\n    completions.\n\n* 30-10-2019\n  - A new ice `trigger-load\'\'` \xe2\x80\x93 create a function that loads given plugin/snippet,\n    with an option (to use it, precede the ice content with `!`) to automatically\n    forward the call afterwards. Example use:\n\n    ```zsh\n    # Invoking the command `crasis\' will load the plugin that\n    # provides the function `crasis\', and it will be then\n    # immediately invoked with the same arguments\n    zplugin ice trigger-load\'!crasis\'\n    zplugin load zdharma/zplugin-crasis\n    ```\n\n* 22-10-2019\n  - A new ice `countdown` \xe2\x80\x93\xc2\xa0causes an interruptable (by Ctrl-C) countdown 5\xe2\x80\xa64\xe2\x80\xa63\xe2\x80\xa62\xe2\x80\xa61\xe2\x80\xa60\n    to be displayed before running the `atclone\'\'`, `atpull\'\'` and `make` ices.\n\n* 21-10-2019\n  - The `times` command has a new option `-m` \xe2\x80\x93 it shows the **moments** of the plugin\n    load times \xe2\x80\x93 i.e.: how late after loading Zplugin a plugin has been loaded.\n\n* 20-10-2019\n  - The `zplugin` completion now completes also snippets! The command `snippet`, but\n    also `delete`, `recall`, `edit`, `cd`, etc. all receive such completing.\n  - The `ice` subcommand can now be skipped \xe2\x80\x93 just pass in the ices, e.g.:\n    ```zsh\n    zplugin atload"zpcompinit; zpcdreplay" blockf\n    zplugin light zsh-users/zsh-completions\n    ```\n  - The `compile` command is able to compile snippets.\n  - The plugins that add their subdirectories into `$fpath` can be now `blockf`-ed \xe2\x80\x93\n    the functions located in the dirs will be correctly auto-loaded.\n\n* 12-10-2019\n  - Special value for the `id-as\'\'` ice \xe2\x80\x93 `auto`. It sets the plugin/snippet ID\n    automatically to the last component of its spec, e.g.:\n\n    ```zsh\n    zplugin ice id-as"auto"\n    zplugin load robobenklein/zinc\n    ```\n\n    will load the plugin as `id-as\'zinc\'`.\n\n* 14-09-2019\n  - There\'s a Vim plugin which extends syntax highlighting of zsh scripts with coloring\n    of the Zplugin commands. [Project\n    homepage](https://github.com/zplugin/zplugin-vim-syntax).\n\n* 13-09-2019\n  - New ice `aliases` which loads plugin with the aliases mechanism enabled. Use for\n    plugins that define **and use** aliases in their scripts.\n\n* 11-09-2019\n  - New ice-mods `sh`,`bash`,`ksh`,`csh` that load plugins (and snippets) with the\n    **sticky emulation** feature of Zsh \xe2\x80\x93 all functions defined within the plugin will\n    automatically switch to the desired emulation mode before executing and switch back\n    thereafter. In other words it is now possible to load e.g. bash plugins with\n    Zplugin, provided that the emulation level done by Zsh is sufficient, e.g.:\n\n    ```zsh\n    zplugin ice bash pick"bash_it.sh" \\\n            atinit"BASH_IT=${ZPLGM[PLUGINS_DIR]}/Bash-it---bash-it" \\\n            atclone"yes n | ./install.sh"\n    zplugin load Bash-it/bash-it\n    ```\n\n    This script loads correctly thanks to the emulation, however it isn\'t functional\n    because it uses `type -t \xe2\x80\xa6` to check if a function exists.\n\n* 10-09-2019\n  - A new ice-mod `reset\'\'` that ivokes `git reset --hard` (or the provided command)\n    before `git pull` and `atpull\'\'` ice. It can be used it to implement altering (i.e.\n    patching) of the plugin\'s files inside the `atpull\'\'` ice \xe2\x80\x93 `git` will report no\n    conflicts when doing `pull`, and the changes can be then again introduced by the\n    `atpull\'\'` ice.\n  - Three new Zplugin annexes (i.e.\n    [extensions](http://zdharma.org/zplugin/wiki/Annexes/)):\n\n      - [z-a-man](https://github.com/zplugin/z-a-man)\n\n        Generates man pages and code-documentation man pages from plugin\'s README.md\n        and source files (the code documentation is obtained from\n        [Zshelldoc](https://github.com/zdharma/zshelldoc)).\n\n      - [z-a-test](https://github.com/zplugin/z-a-test)\n\n        Runs tests (if detected `test` target in a `Makefile` or any `*.zunit` files)\n        on plugin installation and non-empty update.\n\n      - [z-a-patch-dl](https://github.com/zplugin/z-a-patch-dl)\n\n        Allows easy download and applying of patches, to e.g. aid building a binary\n        program equipped in the plugin.\n\n  - A new variable is being recognized by the installation script:\n    `$ZPLG_BIN_DIR_NAME`. It configures the directory within `$ZPLG_HOME` to which\n    Zplugin should be cloned.\n\n* 09-08-2019\n  - A new ice-mod `wrap-track\'\'` which gets `;`-separated list of functions that are to\n    be tracked **once** when executing. In other words you can extend the tracking\n    beyond the moment of loading of a plugin.\n  - The unloading of Zle widgets is now more smart \xe2\x80\x93 it takes into account the chains\n    of plugins that can overload the Zle widgets, and solves the interactions that\n    result out of it.\n\n* 29-07-2019\n  - `delete` now supports following options:\n    * `--all` \xe2\x80\x93 deletes all plugins and snippets (a purge, similar to `rm -rf\n      ${ZPLGM[PLUGINS_DIR]} ${ZPLGM[SNIPPETS_DIR]}`)\n    * `--clean` \xe2\x80\x93 deletes only plugins and snippets that are **currently not loaded**\n      in the current session.\n\n* 09-07-2019\n  - Zplugin can now have **its own plugins**, called **z-plugins**! Check out an\n    example but fully functional z-plugin\n    [zdharma/z-p-submods](https://github.com/zdharma/z-p-submods) and a document that\n    explains on how to implement your own z-plugin\n    ([here](../../wiki/Z-PLUGINS)).\n\n* 08-07-2019\n  - You can now do `zplugin ice wait ...` and it will work as `zplugin ice wait\'0\' ...`\n    :) I.e. when there\'s no value to the `wait\'\'` ice then a value of `0` is being\n    substituted.\n\n* 02-07-2019\n  - [Cooperation of Fast-Syntax-Highlighting and\n    Zplugin](https://asciinema.org/a/254630) \xe2\x80\x93 a new precise highlighting for\n    Zplugin in F-Sy-H.\n\n* 01-07-2019\n  - `atclone\'\'`, `atpull\'\'` & `make\'\'` get run in the same subshell, thus an e.g.\n    export done in `atclone\'\'` will be visible during the `make`.\n\n* 26-06-2019\n  - `notify\'\'` contents gets evaluated, i.e. can contain active code like `$(tail -1\n    /var/log/messages)`, etc.\n\n* 23-06-2019\n  - New ice mod `subscribe\'\'`/`on-update-of\'\'` which works like the\n    `wait\'\'` ice-mod, i.e. defers loading of a plugin, but it **looks at\n    modification time of the given file(s)**, and when it changes, it then\n    triggers loading of the plugin/snippet:\n\n    ```zsh\n    % zplugin ice on-update-of\'{~/files-*,/tmp/files-*}\' lucid \\\n        atload"echo I have been loaded" \\\n        notify"Yes that\'s true :)"\n    % zplugin load zdharma/null\n    % touch ~/files-1\n    The plugin has been loaded\n    %\n    Yes that\'s true :)\n    ```\n    The plugin/snippet will be sourced as many times as the file gets updated.\n\n* 22-06-2019\n  - New ice mod `reset-prompt` that will issue `zle .reset-prompt` after loading the\n    plugin or snippet, causing the prompt to be recomputed. Useful with themes &\n    Turbo mode.\n\n  - New ice-mod `notify\'\'` which will cause to display an under-prompt notification\n    when the plugin or snippet gets loaded. E.g.:\n\n    ```zsh\n    % zplugin ice wait"0" lucid notify"zdharma/null has been loaded"\n    % zplugin light zdharma/null\n    %\n    zdharma/null has been loaded\n    ```\n\n    In case of problems with the loading a warning message will be output:\n\n    ```\n    % zplugin ice notify atload\'return 7\'\n    % zplugin light zdharma/null\n    %\n    notify: Plugin not loaded / loaded with problem, the return code: 7\n    ```\n\n    Refer to [Ice Modifiers](#ice-modifiers) section for a complete description.\n\n* 29-05-2019\n  - Turbo mode, i.e. the `wait\'\'` ice-mode now supports a suffix \xe2\x80\x93 the letter `a`, `b`\n    or `c`. The meaning is illustrated by the following example:\n\n    ```zsh\n    zplugin ice wait"0b" as"command" pick"wd.sh" atinit"echo Firing 1" lucid\n    zplugin light mfaerevaag/wd\n    zplugin ice wait"0a" as"command" pick"wd.sh" atinit"echo Firing 2" lucid\n    zplugin light mfaerevaag/wd\n\n    # The output\n    Firing 2\n    Firing 1\n    ```\n\n    As it can be seen, the second plugin has been loaded first. That\'s because there\n    are now three sub-slots (the `a`, `b` and `c`) in which the plugin/snippet loadings\n    can be put into. Plugins from the same time-slot with suffix `a` will be loaded\n    before plugins with suffix `b`, etc.\n\n    In other words, instead of `wait\'1\'` you can enter `wait\'1a\'`,\n    `wait\'1b\'` and `wait\'1c\'` \xe2\x80\x93 to this way **impose order** on the loadings\n    **regardless of the order of `zplugin` commands**.\n\n</details>\n\nTo see the full history check [the changelog](CHANGELOG.md).\n\n# Zplugin\n\nZplugin is an elastic and fast Zshell plugin manager that will allow you to\ninstall everything from GitHub and other sites.\n\nZplugin is currently the only plugin manager out there that has Turbo mode which yields\n**50-73% faster Zsh startup!**. Check out a speed comparison with other popular plugin\nmanagers [here](https://github.com/zdharma/pm-perf-test).\n\nZplugin gives **reports** from plugin load describing what aliases, functions,\nbindkeys, Zle widgets, zstyles, completions, variables, `PATH` and `FPATH`\nelements a plugin has set up.\n\nSupported is **unloading** of plugin and ability to list, (un)install and\nselectively disable, enable plugin\'s completions.\n\nThe system does not use `$FPATH`, loading multiple plugins doesn\'t clutter\n`$FPATH` with the same number of entries (e.g. `10`). Code is immune to\n`KSH_ARRAYS`. Completion management functionality is provided to allow user\nto call `compinit` only once in `.zshrc`.\n\n# Zplugin Wiki\n\nThe information in this README is complemented by the [Zplugin wiki](http://zdharma.org/zplugin/wiki/). The README is an introductory overview of Zplugin while the wiki gives a complete and in-depth information with examples. Make sure to read it to get the most out of Zplugin.\n\n# Installation\n\n## Option 1 - Automatic Installation (Recommended)\n\nThe easiest way to install Zplugin is to execute:\n\n```zsh\nsh -c "$(curl -fsSL https://raw.githubusercontent.com/zdharma/zplugin/master/doc/install.sh)"\n```\n\nThis will install Zplugin in `~/.zplugin/bin`. `.zshrc` will be updated with three\nlines of code that will be added to the bottom. The lines will be sourcing\n`zplugin.zsh` and setting up completion for command `zplugin`. After installing and\nreloading the shell compile Zplugin with `zplugin self-update`.\n\n## Option 2 - Manual Installation\n\nTo manually install Zplugin clone the repo to e.g. `~/.zplugin/bin`:\n\n```sh\nmkdir ~/.zplugin\ngit clone https://github.com/zdharma/zplugin.git ~/.zplugin/bin\n```\n\nand source it from `.zshrc` (above compinit):\n\n```sh\nsource ~/.zplugin/bin/zplugin.zsh\n```\n\nIf you place the `source` below `compinit`, then add those two lines after the `source`:\n```sh\nautoload -Uz _zplugin\n(( ${+_comps} )) && _comps[zplugin]=_zplugin\n```\n\nVarious paths can be customized, see section [Customizing Paths](#customizing-paths).\n\nAfter installing and reloading the shell compile Zplugin with `zplugin self-update`.\n\n# Usage\n\n## Introduction\n\n[Click here to read the introduction to Zplugin](http://zdharma.org/zplugin/wiki/INTRODUCTION/). It explains basic usage and some of the more unique features of Zplugin such as the Turbo mode. If you\'re new to Zplugin we highly recommend you read it at least once.\n\n## Example Usage\n\nAfter installing Zplugin you can start adding some actions (load some plugins) to `~/.zshrc`, at bottom. Some examples:\n\n```zsh\n# Two regular plugins loaded without tracking.\nzplugin light zsh-users/zsh-autosuggestions\nzplugin light zdharma/fast-syntax-highlighting\n\n# Plugin history-search-multi-word loaded with tracking.\nzplugin load zdharma/history-search-multi-word\n\n# Load the pure theme, with zsh-async library that\'s bundled with it.\nzplugin ice pick"async.zsh" src"pure.zsh"\nzplugin light sindresorhus/pure\n\n# Binary release in archive, from GitHub-releases page.\n# After automatic unpacking it provides program "fzf".\nzplugin ice from"gh-r" as"program"\nzplugin load junegunn/fzf-bin\n\n# One other binary release, it needs renaming from `docker-compose-Linux-x86_64`.\n# This is done by ice-mod `mv\'{from} -> {to}\'. There are multiple packages per\n# single version, for OS X, Linux and Windows \xe2\x80\x93 so ice-mod `bpick\' is used to\n# select Linux package \xe2\x80\x93\xc2\xa0in this case this is actually not needed, Zplugin will\n# grep operating system name and architecture automatically when there\'s no `bpick\'.\nzplugin ice from"gh-r" as"program" mv"docker* -> docker-compose" bpick"*linux*"\nzplugin load docker/compose\n\n# Vim repository on GitHub \xe2\x80\x93 a typical source code that needs compilation \xe2\x80\x93 Zplugin\n# can manage it for you if you like, run `./configure` and other `make`, etc. stuff.\n# Ice-mod `pick` selects a binary program to add to $PATH. You could also install the\n# package under the path $ZPFX, see: http://zdharma.org/zplugin/wiki/Compiling-programs\nzplugin ice as"program" atclone"rm -f src/auto/config.cache; ./configure" \\\n    atpull"%atclone" make pick"src/vim"\nzplugin light vim/vim\n\n# Scripts that are built at install (there\'s single default make target, "install",\n# and it constructs scripts by `cat\'ing a few files). The make\'\' ice could also be:\n# `make"install PREFIX=$ZPFX"`, if "install" wouldn\'t be the only, default target.\nzplugin ice as"program" pick"$ZPFX/bin/git-*" make"PREFIX=$ZPFX"\nzplugin light tj/git-extras\n\n# Handle completions without loading any plugin, see "clist" command.\n# This one is to be ran just once, in interactive session.\nzplugin creinstall %HOME/my_completions\n```\n\n```zsh\n# For GNU ls (the binaries can be gls, gdircolors, e.g. on OS X when installing the\n# coreutils package from Homebrew; you can also use https://github.com/ogham/exa)\nzplugin ice atclone"dircolors -b LS_COLORS > c.zsh" atpull\'%atclone\' pick"c.zsh" nocompile\'!\'\nzplugin light trapd00r/LS_COLORS\n```\n[You can see an extended explanation of LS_COLORS in the wiki.](http://zdharma.org/zplugin/wiki/LS_COLORS-explanation/)\n\n```zsh\n# make\'!...\' -> run make before atclone & atpull\nzplugin ice as"program" make\'!\' atclone\'./direnv hook zsh > zhook.zsh\' atpull\'%atclone\' src"zhook.zsh"\nzplugin light direnv/direnv\n```\n[You can see an extended explanation of direnv in the wiki.](http://zdharma.org/zplugin/wiki/Direnv-explanation/)\n\nIf you\'re interested in more examples then check out the [zplugin-configs\nrepository](https://github.com/zdharma/zplugin-configs) where users have uploaded their\n`~/.zshrc` and Zplugin configurations. Feel free to\n[submit](https://github.com/zdharma/zplugin-configs/issues/new?template=request-to-add-zshrc-to-the-zplugin-configs-repo.md)\nyour `~/.zshrc` there if it contains Zplugin commands.\n\nYou can also check out the [Gallery of Zplugin Invocations](http://zdharma.org/zplugin/wiki/GALLERY/) for some additional examples.\n\n## Ice Modifiers\n\nFollowing `ice` modifiers are to be\n[passed](http://zdharma.org/zplugin/wiki/Alternate-Ice-Syntax/) to `zplugin ice ...` to\nobtain described effects.  The word `ice` means something that\'s added (like ice to a\ndrink) \xe2\x80\x93 and in Zplugin it means adding modifier to a next `zplugin` command, and also\nsomething that\'s temporary because it melts \xe2\x80\x93 and this means that the modification will\nlast only for a **single** next `zplugin` command.\n\nSome Ice-modifiers are highlighted and clicking on them will take you to the\nappropriate wiki page for an extended explanation.\n\nYou may safely assume a given ice works with both plugins and snippets unless\nexplicitly stated otherwise.\n\n### Cloning Options\n| Modifier | Description |\n|:-:|-|\n| `proto` |<div align="justify" style="text-align: justify;"> Change protocol to `git`,`ftp`,`ftps`,`ssh`, `rsync`, etc. Default is `https`. **Does not work with snippets.** </div>|\n| [**`from`**](http://zdharma.org/zplugin/wiki/Private-Repositories/) |<div align="justify" style="text-align: justify;"> Clone plugin from given site. Supported are `from"github"` (default), `..."github-rel"`, `..."gitlab"`, `..."bitbucket"`, `..."notabug"` (short names: `gh`, `gh-r`, `gl`, `bb`, `nb`). Can also be a full domain name (e.g. for GitHub enterprise). **Does not work with snippets.**</div>|\n| `ver` |<div align="justify" style="text-align: justify;"> Used with `from"gh-r"` (i.e. downloading a binary release, e.g. for use with `as"program"`) \xe2\x80\x93 selects which version to download. Default is latest, can also be explicitly `ver"latest"`. Works also with regular plugins, checkouts e.g. `ver"abranch"`, i.e. a specific version. **Does not work with snippets.**</div>|\n| `bpick` |<div align="justify" style="text-align: justify;"> Used to select which release from GitHub Releases to download, e.g. `zplg ice from"gh-r" as"program" bpick"*Darwin*"; zplg load docker/compose`. **Does not work with snippets.** </div>|\n| `depth` |<div align="justify" style="text-align: justify;"> Pass `--depth` to `git`, i.e. limit how much of history to download. **Does not work with snippets.**</div>|\n| `cloneopts` |<div align="justify" style="text-align: justify;"> Pass the contents of `cloneopts` to `git clone`. Defaults to `--recursive` i.e. Change cloning options. **Does not work with snippets.** </div>|\n| `svn` |<div align="justify" style="text-align: justify;"> Use Subversion for downloading snippet. GitHub supports `SVN` protocol, this allows to clone subdirectories as snippets, e.g. `zplugin ice svn; zplugin snippet OMZ::plugins/git`. Other ice `pick` can be used to select file to source (default are: `*.plugin.zsh`, `init.zsh`, `*.zsh-theme`). **Does not work with plugins.**</div>|\n\n### Selection of Files (To Source, \xe2\x80\xa6)\n| Modifier | Description |\n|:-:|-|\n| [**`pick`**](http://zdharma.org/zplugin/wiki/Sourcing-multiple-files/) |<div align="justify" style="text-align: justify;"> Select the file to source, or the file to set as command (when using `snippet --command` or the ice `as"program"`); it is a pattern, alphabetically first matched file is being chosen; e.g. `zplugin ice pick"*.plugin.zsh"; zplugin load \xe2\x80\xa6`.</div>|\n| [**`src`**](http://zdharma.org/zplugin/wiki/Sourcing-multiple-files) |<div align="justify" style="text-align: justify;"> Specify additional file to source after sourcing main file or after setting up command (via `as"program"`). It is not a pattern but a plain file name.</div>|\n| [**`multisrc`**](http://zdharma.org/zplugin/wiki/Sourcing-multiple-files) |<div align="justify" style="text-align: justify;"> Allows to specify multiple files for sourcing, enumerated with spaces as the separators (e.g. `multisrc\'misc.zsh grep.zsh\'`) and also using brace-expansion syntax (e.g. `multisrc\'{misc,grep}.zsh\'`). Supports patterns.</div>|\n\n### Conditional Loading\n| Modifier | Description |\n|:-:|-|\n| [**`wait`**](http://zdharma.org/zplugin/wiki/Example-wait-conditions) |<div align="justify" style="text-align: justify;"> Postpone loading a plugin or snippet. For `wait\'1\'`, loading is done `1` second after prompt. For `wait\'[[ ... ]]\'`, `wait\'(( ... ))\'`, loading is done when given condition is meet. For `wait\'!...\'`, prompt is reset after load. Zsh can start 73% faster thanks to postponed loading. **Fact:** when `wait` is used without value, it works as `wait\'0\'`.</div>|\n| [**`load`**](http://zdharma.org/zplugin/wiki/Multiple-prompts) |<div align="justify" style="text-align: justify;"> A condition to check which should cause plugin to load. It will load once, the condition can be still true, but will not trigger second load (unless plugin is unloaded earlier, see `unload` below). E.g.: `load\'[[ $PWD = */github* ]]\'`.</div>|\n| [**`unload`**](http://zdharma.org/zplugin/wiki/Multiple-prompts) |<div align="justify" style="text-align: justify;"> A condition to check causing plugin to unload. It will unload once, then only if loaded again. E.g.: `unload\'[[ $PWD != */github* ]]\'`.</div>|\n| `cloneonly` |<div align="justify" style="text-align: justify;"> Don\'t load the plugin / snippet, only download it </div>|\n| `if` |<div align="justify" style="text-align: justify;"> Load plugin or snippet only when given condition is fulfilled, for example: `zplugin ice if\'[[ -n "$commands[otool]" ]]\'; zplugin load ...`.</div>|\n| `has` |<div align="justify" style="text-align: justify;"> Load plugin or snippet only when given command is available (in $PATH), e.g. `zplugin ice has\'git\' ...` </div>|\n| `subscribe` / `on-update-of` |<div align="justify" style="text-align: justify;"> Postpone loading of a plugin or snippet until the given file(s) get updated, e.g. `subscribe\'{~/files-*,/tmp/files-*}\'` </div>|\n| `trigger-load` |<div align="justify" style="text-align: justify;">Creates a function that loads the associated plugin/snippet, with an option (to use it, precede the ice content with `!`) to automatically forward the call afterwards, to a command of the same name as the function. Can obtain multiple functions to create \xe2\x80\x93\xc2\xa0sparate with `;`.</div> |\n\n### Plugin Output\n| Modifier | Description |\n|:-:|-|\n| `silent` |<div align="justify" style="text-align: justify;"> Mute plugin\'s or snippet\'s `stderr` & `stdout`. Also skip `Loaded ...` message under prompt for `wait`, etc. loaded plugins, and completion-installation messages.</div>|\n| `lucid` |<div align="justify" style="text-align: justify;"> Skip `Loaded ...` message under prompt for `wait`, etc. loaded plugins (a subset of `silent`).</div>|\n| `notify` |<div align="justify" style="text-align: justify;"> Output given message under-prompt after successfully loading a plugin/snippet. In case of problems with the loading, output a warning message and the return code. If starts with `!` it will then always output the given message. Hint: if the message is empty, then it will just notify about problems.</div>|\n\n### Completions\n| Modifier | Description |\n|:-:|-|\n| `blockf` |<div align="justify" style="text-align: justify;"> Disallow plugin to modify `fpath`. Useful when a plugin wants to provide completions in traditional way. Zplugin can manage completions and plugin can be blocked from exposing them.</div>|\n| `nocompletions` |<div align="justify" style="text-align: justify;"> Don\'t detect, install and manage completions for this plugin. Completions can be installed later with `zplugin creinstall {plugin-spec}`.</div>|\n\n### Command Execution After Cloning, Updating or Loading\n| Modifier | Description |\n|:-:|-|\n| `mv` |<div align="justify" style="text-align: justify;"> Move file after cloning or after update (then, only if new commits were downloaded). Example: `mv "fzf-* -> fzf"`. It uses `->` as separator for old and new file names. Works also with snippets.</div>|\n| `cp` |<div align="justify" style="text-align: justify;"> Copy file after cloning or after update (then, only if new commits were downloaded). Example: `cp "docker-c* -> dcompose"`. Ran after `mv`.</div>|\n| [**`atclone`**](http://zdharma.org/zplugin/wiki/atload-and-other-at-ices) |<div align="justify" style="text-align: justify;"> Run command after cloning, within plugin\'s directory, e.g. `zplugin ice atclone"echo Cloned"`. Ran also after downloading snippet.</div>|\n| [**`atpull`**](http://zdharma.org/zplugin/wiki/atload-and-other-at-ices) |<div align="justify" style="text-align: justify;"> Run command after updating (**only if new commits are waiting for download**), within plugin\'s directory. If starts with "!" then command will be ran before `mv` & `cp` ices and before `git pull` or `svn update`. Otherwise it is ran after them. Can be `atpull\'%atclone\'`, to repeat `atclone` Ice-mod.</div>|\n| [**`atinit`**](http://zdharma.org/zplugin/wiki/atload-and-other-at-ices) |<div align="justify" style="text-align: justify;"> Run command after directory setup (cloning, checking it, etc.) of plugin/snippet but before loading.</div>|\n| [**`atload`**](http://zdharma.org/zplugin/wiki/atload-and-other-at-ices) |<div align="justify" style="text-align: justify;"> Run command after loading, within plugin\'s directory. Can be also used with snippets. Passed code can be preceded with `!`, it will then be tracked (if using `load`, not `light`).</div>|\n| `run-atpull` |<div align="justify" style="text-align: justify;"> Always run the atpull hook (when updating), not only when there are new commits to be downloaded.</div>|\n| `nocd` |<div align="justify" style="text-align: justify;"> Don\'t switch the current directory into the plugin\'s directory when evaluating the above ice-mods `atinit\'\'`,`atload\'\'`, etc.</div>|\n| [**`make`**](http://zdharma.org/zplugin/wiki/Installing-with-make) |<div align="justify" style="text-align: justify;"> Run `make` command after cloning/updating and executing `mv`, `cp`, `atpull`, `atclone` Ice mods. Can obtain argument, e.g. `make"install PREFIX=/opt"`. If the value starts with `!` then `make` is ran before `atclone`/`atpull`, e.g. `make\'!\'`.</div>|\n| `countdown` |<div align="justify" style="text-align: justify;">Causes an interruptable (by Ctrl-C) countdown 5\xe2\x80\xa64\xe2\x80\xa63\xe2\x80\xa62\xe2\x80\xa61\xe2\x80\xa60 to be displayed before executing `atclone\'\'`,`atpull\'\'` and `make` ices</div>|\n\n### Sticky-Emulation Of Other Shells\n| Modifier | Description |\n|:-:|-|\n| `sh`, `!sh` |<div align="justify" style="text-align: justify;">Source the plugin\'s (or snippet\'s) script with `sh` emulation so that also all functions declared within the file will get a *sticky* emulation assigned \xe2\x80\x93 when invoked they\'ll execute also with the `sh` emulation set-up. The `!sh` version switches additional options that are rather not important from the portability perspective.</div>|\n| `bash`, `!bash` |<div align="justify" style="text-align: justify;">The same as `sh`, but with the `SH_GLOB` option disabled, so that Bash regular expressions work.</div>|\n| `ksh`, `!ksh` |<div align="justify" style="text-align: justify;">The same as `sh`, but emulating `ksh` shell.</div>|\n| `csh`, `!csh` |<div align="justify" style="text-align: justify;">The same as `sh`, but emulating `csh` shell.</div>|\n\n### Others\n| Modifier | Description |\n|:-:|-|\n| `as` |<div align="justify" style="text-align: justify;"> Can be `as"program"` (also the alias: `as"command"`), and will cause to add script/program to `$PATH` instead of sourcing (see `pick`). Can also be `as"completion"` \xe2\x80\x93 use with plugins or snippets in whose only underscore-starting `_*` files you are interested in. The third possible value is `as"null"` \xe2\x80\x93 a shorthand for `pick"/dev/null" nocompletions` \xe2\x80\x93 i.e.: it disables the default script-file sourcing and also the installation of completions.</div>|\n| [**`id-as`**](http://zdharma.org/zplugin/wiki/id-as/) |<div align="justify" style="text-align: justify;"> Nickname a plugin or snippet, to e.g. create a short handler for long-url snippet.</div>|\n| `compile` |<div align="justify" style="text-align: justify;"> Pattern (+ possible `{...}` expansion, like `{a/*,b*}`) to select additional files to compile, e.g. `compile"(pure\\|async).zsh"` for `sindresorhus/pure`.</div> |\n| `nocompile` |<div align="justify" style="text-align: justify;"> Don\'t try to compile `pick`-pointed files. If passed the exclamation mark (i.e. `nocompile\'!\'`), then do compile, but after `make\'\'` and `atclone\'\'` (useful if Makefile installs some scripts, to point `pick\'\'` at the location of their installation).</div>|\n| `service` |<div align="justify" style="text-align: justify;"> Make following plugin or snippet a *service*, which will be ran in background, and only in single Zshell instance. See [zservices-organization](https://github.com/zservices) page.</div>|\n| `reset-prompt` |<div align="justify" style="text-align: justify;"> Reset the prompt after loading the plugin/snippet (by issuing `zle .reset-prompt`). Note: normally it\'s sufficient to precede the value of `wait\'\'` ice with `!`.</div>|\n| `bindmap` |<div align="justify" style="text-align: justify;"> To hold `;`-separated strings like `Key(s)A -> Key(s)B`, e.g. `^R -> ^T; ^A -> ^B`. In general, `bindmap\'\'`changes bindings (done with the `bindkey` builtin) the plugin does. The example would cause the plugin to map Ctrl-T instead of Ctrl-R, and Ctrl-B instead of Ctrl-A. **Does not work with snippets.**</div>|\n| `trackbinds` |<div align="justify" style="text-align: justify;"> Shadow but only `bindkey` calls even with `zplugin light ...`, i.e. even with tracking disabled (fast loading), to allow `bindmap` to remap the key-binds. The same effect has `zplugin light -b ...`, i.e. additional `-b` option to the `light`-subcommand. **Does not work with snippets.**</div>|\n| [**`wrap-track`**](http://zdharma.org/zplugin/wiki/wrap-track) |<div align="justify" style=\'text-align: justify;\'> Takes a `;`-separated list of function names that are to be tracked (meaning gathering report and unload data) **once** during execution. It works by wrapping the functions with a tracking-enabling and disabling snippet of code. In summary, `wrap-track` allows to extend the tracking beyond the moment of loading of a plugin. Example use is to `wrap-track` a precmd function of a prompt (like `_p9k_precmd()` of powerlevel10k) or other plugin that _postpones its initialization till the first prompt_ (like e.g.: zsh-autosuggestions). **Does not work with snippets.**</div>|\n| `aliases` |<div align="justify" style="text-align: justify;">Load the plugin with the aliases mechanism enabled. Use with plugins that define **and use** aliases in their scripts.</div>|\n| `light-mode` |<div align="justify" style="text-align: justify;">Load the plugin without the tracking, i.e.: as if it would be loaded with the `light` command. Useful for the for-syntax, where there is no `load` nor `light` subcommand</div>|\n\n### Order of Execution\n\nOrder of execution of related Ice-mods: `atinit` -> `atpull!` -> `make\'!!\'` -> `mv` -> `cp` -> `make!` -> `atclone`/`atpull` -> `make` -> `(plugin script loading)` -> `src` -> `multisrc` -> `atload`.\n\n## Zplugin Commands\n\nFollowing commands are passed to `zplugin ...` to obtain described effects.\n\n### Help\n\n| Command | Description |\n|:-:|-|\n| `-h, --help, help` |<div align="justify" style="text-align: justify;"> Usage information.</div>|\n| `man` |<div align="justify" style="text-align: justify;"> Manual.</div>|\n\n### Loading and Unloading\n\n| Command | Description |\n|:-:|-|\n| `load {plg-spec}` |<div align="justify" style="text-align: justify;"> Load plugin, can also receive absolute local path.</div>|\n| `light [-b] {plg-spec}` |<div align="justify" style="text-align: justify;"> Light plugin load, without reporting/tracking. `-b` \xe2\x80\x93 track `bindkey`-calls only. There\'s also `light-mode` ice which can be used to induce the no-tracking (i.e.: *light*) loading, regardless of the command used.</div>|\n| `unload [-q] {plg-spec}` |<div align="justify" style="text-align: justify;"> Unload plugin loaded with `zplugin load ...`. `-q` \xe2\x80\x93 quiet.</div>|\n| `snippet [-f] {url}` |<div align="justify" style="text-align: justify;"> Source local or remote file (by direct URL). `-f` \xe2\x80\x93 don\'t use cache (force redownload).</div>|\n\n### Completions\n\n| Command | Description |\n|:-:|-|\n| <code> clist [*columns*], completions [*columns*] </code> |<div align="justify" style="text-align: justify;"> List completions in use, with <code>*columns*</code> completions per line. `zpl clist 5` will for example print 5 completions per line. Default is 3.</div>|\n| `cdisable {cname}` |<div align="justify" style="text-align: justify;"> Disable completion `cname`.</div>|\n| `cenable {cname}` |<div align="justify" style="text-align: justify;"> Enable completion `cname`.</div>|\n| `creinstall [-q] {plg-spec}` |<div align="justify" style="text-align: justify;"> Install completions for plugin, can also receive absolute local path. `-q` \xe2\x80\x93 quiet.</div>|\n| `cuninstall {plg-spec}` |<div align="justify" style="text-align: justify;"> Uninstall completions for plugin.</div>|\n| `csearch` |<div align="justify" style="text-align: justify;"> Search for available completions from any plugin.</div>|\n| `compinit` |<div align="justify" style="text-align: justify;"> Refresh installed completions.</div>|\n| `cclear` |<div align="justify" style="text-align: justify;"> Clear stray and improper completions.</div>|\n| `cdlist` |<div align="justify" style="text-align: justify;"> Show compdef replay list.</div>|\n| `cdreplay [-q]` |<div align="justify" style="text-align: justify;"> Replay compdefs (to be done after compinit). `-q` \xe2\x80\x93 quiet.</div>|\n| `cdclear [-q]` |<div align="justify" style="text-align: justify;"> Clear compdef replay list. `-q` \xe2\x80\x93 quiet.</div>|\n\n### Tracking of the Active Session\n\n| Command | Description |\n|:-:|-|\n| `dtrace, dstart` |<div align="justify" style="text-align: justify;"> Start tracking what\'s going on in session.</div>|\n| `dstop` |<div align="justify" style="text-align: justify;"> Stop tracking what\'s going on in session.</div>|\n| `dunload` |<div align="justify" style="text-align: justify;"> Revert changes recorded between dstart and dstop.</div>|\n| `dreport` |<div align="justify" style="text-align: justify;"> Report what was going on in session.</div>|\n| `dclear` |<div align="justify" style="text-align: justify;"> Clear report of what was going on in session.</div>|\n\n### Reports and Statistics\n\n| Command | Description |\n|:-:|-|\n| `times [-s] [-m]` |<div align="justify" style="text-align: justify;"> Statistics on plugin load times, sorted in order of loading. `-s` \xe2\x80\x93 use seconds instead of milliseconds. `-m` \xe2\x80\x93 show plugin loading moments.</div>|\n| `zstatus` |<div align="justify" style="text-align: justify;"> Overall Zplugin status.</div>|\n| `report {plg-spec}\\|--all` |<div align="justify" style="text-align: justify;"> Show plugin report. `--all` \xe2\x80\x93 do it for all plugins.</div>|\n| `loaded [keyword], list [keyword]` |<div align="justify" style="text-align: justify;"> Show what plugins are loaded (filter with \'keyword\').</div>|\n| `ls` |<div align="justify" style="text-align: justify;"> List snippets in formatted and colorized manner. Requires **tree** program.</div>|\n| `status {plg-spec}\\|URL\\|--all` |<div align="justify" style="text-align: justify;"> Git status for plugin or svn status for snippet. `--all` \xe2\x80\x93 do it for all plugins and snippets.</div>|\n| `recently [time-spec]` |<div align="justify" style="text-align: justify;"> Show plugins that changed recently, argument is e.g. 1 month 2 days.</div>|\n| `bindkeys` |<div align="justify" style="text-align: justify;"> Lists bindkeys set up by each plugin.</div>|\n\n### Compiling\n\n| Command | Description |\n|:-:|-|\n| `compile {plg-spec}\\|--all` |<div align="justify" style="text-align: justify;"> Compile plugin. `--all` \xe2\x80\x93 compile all plugins.</div>|\n| `uncompile {plg-spec}\\|--all` |<div align="justify" style="text-align: justify;"> Remove compiled version of plugin. `--all` \xe2\x80\x93 do it for all plugins.</div>|\n| `compiled` |<div align="justify" style="text-align: justify;"> List plugins that are compiled.</div>|\n\n### Other\n\n| Command | Description |\n|:-:|-|\n| `self-update` |<div align="justify" style="text-align: justify;"> Updates and compiles Zplugin.</div>|\n| `update [-q] [-r] {plg-spec}\\|URL\\|--all` |<div align="justify" style="text-align: justify;"> Git update plugin or snippet.<br> `--all` \xe2\x80\x93 update all plugins and snippets.<br>  `-q` \xe2\x80\x93 quiet.<br> `-r` \\| `--reset` \xe2\x80\x93 run `git reset --hard` / `svn revert` before pulling changes.</div>|\n| `ice <ice specification>` |<div align="justify" style="text-align: justify;"> Add ice to next command, argument is e.g. from"gitlab".</div>|\n| `delete {plg-spec}\\|URL\\|--clean\\|--all` |<div align="justify" style="text-align: justify;"> Remove plugin or snippet from disk (good to forget wrongly passed ice-mods).  <br> `--all` \xe2\x80\x93 purge.<br> `--clean` \xe2\x80\x93 delete plugins and snippets that are not loaded.</div>|\n| `cd {plg-spec}` |<div align="justify" style="text-align: justify;"> Cd into plugin\'s directory. Also support snippets if fed with URL.</div>|\n| `edit {plg-spec}` |<div align="justify" style="text-align: justify;"> Edit plugin\'s file with $EDITOR.</div>|\n| `glance {plg-spec}` |<div align="justify" style="text-align: justify;"> Look at plugin\'s source (pygmentize, {,source-}highlight).</div>|\n| `stress {plg-spec}` |<div align="justify" style="text-align: justify;"> Test plugin for compatibility with set of options.</div>|\n| `changes {plg-spec}` |<div align="justify" style="text-align: justify;"> View plugin\'s git log.</div>|\n| `create {plg-spec}` |<div align="justify" style="text-align: justify;"> Create plugin (also together with GitHub repository).</div>|\n| `srv {service-id} [cmd]` |<div align="justify" style="text-align: justify;"> Control a service, command can be: stop,start,restart,next,quit; `next` moves the service to another Zshell.</div>|\n| `recall {plg-spec}\\|URL` |<div align="justify" style="text-align: justify;"> Fetch saved ice modifiers and construct `zplugin ice ...` command.</div>|\n| `env-whitelist [-v] [-h] {env..}` |<div align="justify" style="text-align: justify;"> Allows to specify names (also patterns) of variables left unchanged during an unload. `-v` \xe2\x80\x93 verbose.</div>|\n| `module` |<div align="justify" style="text-align: justify;"> Manage binary Zsh module shipped with Zplugin, see `zplugin module help`.</div>|\n| `add-fpath\\|fpath` `[-f\\|--front]` `{plg-spec}` `[subdirectory]` |<div align="justify" style="text-align: justify;">Adds given plugin (not yet snippet) directory to `$fpath`. If the second argument is given, it is appended to the directory path. If the option `-f`/`--front` is given, the directory path is prepended instead of appended to `$fpath`. The `{plg-spec}` can be absolute path, i.e.: it\'s possible to also add regular directories.</div>|\n| `run` `[-l]` `[plugin]` `{command}` |<div align="justify" style="text-align: justify;">Runs the given command in the given plugin\'s directory. If the option `-l` will be given then the plugin should be skipped \xe2\x80\x93 the option will cause the previous plugin to be reused.</div>|\n\n## Updating Zplugin and Plugins\n\nTo update Zplugin issue `zplugin self-update` in the command line.\n\nTo update all plugins and snippets, issue `zplugin update`. If you wish to update only\na single plugin/snippet instead issue `zplugin update NAME_OF_PLUGIN`. A list of\ncommits will be shown:\n\n<p align="center">\n<img src="./doc/img/update.png" />\n</p>\n\nSome plugins require performing an action each time they\'re updated. One way you can do\nthis is by using the `atpull` ice modifier. For example, writing `zplugin ice atpull\'./configure\'` before loading a plugin will execute `./configure` after a successful update. Refer to [Ice Modifiers](#ice-modifiers) for more information.\n\nThe ice modifiers for any plugin or snippet are stored in their directory in a\n`._zplugin` subdirectory, hence the plugin doesn\'t have to be loaded to be correctly\nupdated. There\'s one other file created there, `.zplugin_lstupd` \xe2\x80\x93 it holds the log of\nthe new commits pulled-in in the last update.\n\n## Using Oh My Zsh Themes\n\nTo use **themes** created for Oh My Zsh you might want to first source the `git` library there:\n\n```SystemVerilog\nzplugin snippet http://github.com/robbyrussell/oh-my-zsh/raw/master/lib/git.zsh\n# Or using OMZ:: shorthand:\nzplugin snippet OMZ::lib/git.zsh\n```\n\nIf the library will not be loaded, then similar to following errors will be appearing:\n\n```\n........:1: command not found: git_prompt_status\n........:1: command not found: git_prompt_short_sha\n```\n\nThen you can use the themes as snippets (`zplugin snippet {file path or GitHub URL}`).\nSome themes require not only Oh My Zsh\'s Git **library**, but also Git **plugin** (error\nabout `current_branch` function can be appearing). Load this Git-plugin as single-file\nsnippet directly from OMZ:\n\n```SystemVerilog\nzplugin snippet OMZ::plugins/git/git.plugin.zsh\n```\n\nSuch lines should be added to `.zshrc`. Snippets are cached locally, use `-f` option to download\na fresh version of a snippet, or `zplugin update {URL}`. Can also use `zplugin update --all` to\nupdate all snippets (and plugins).\n\nMost themes require `promptsubst` option (`setopt promptsubst` in `zshrc`), if it isn\'t set, then\nprompt will appear as something like: `... $(build_prompt) ...`.\n\nYou might want to suppress completions provided by the git plugin by issuing `zplugin cdclear -q`\n(`-q` is for quiet) \xe2\x80\x93\xc2\xa0see below **Ignoring Compdefs**.\n\nTo summarize:\n\n```SystemVerilog\n# Load OMZ Git library\nzplugin snippet OMZ::lib/git.zsh\n\n# Load Git plugin from OMZ\nzplugin snippet OMZ::plugins/git/git.plugin.zsh\nzplugin cdclear -q # <- forget completions provided up to this moment\n\nsetopt promptsubst\n\n# Load theme from OMZ\nzplugin snippet OMZ::themes/dstufft.zsh-theme\n\n# Load normal GitHub plugin with theme depending on OMZ Git library\nzplugin light NicoSantangelo/Alpharized\n```\n\nSee also the Wiki page: [Example Oh My Zsh\nSetup](http://zdharma.org/zplugin/wiki/Example-Oh-My-Zsh-setup/).\n\n# Completions\n\n## Calling `compinit` Without Turbo Mode\n\nWith no Turbo mode in use, compinit can be called normally, i.e.: as `autoload compinit;\ncompinit`. This should be done after loading of all plugins and before possibly calling\n`zplugin cdreplay`.  Also, plugins aren\'t allowed to simply run `compdefs`. You can\ndecide whether to run `compdefs` by issuing `zplugin cdreplay` (reads: `compdef`-replay).\nTo summarize:\n\n```sh\nsource ~/.zplugin/bin/zplugin.zsh\n\nzplugin load "some/plugin"\n...\ncompdef _gnu_generic fd  # this will be intercepted by Zplugin, because as the compinit\n                         # isn\'t yet loaded, thus there\'s no such function `compdef\'; yet\n                         # Zplugin provides its own `compdef\' function which saves the\n                         # completion-definition for later possible re-run with `zplugin\n                         # cdreplay` or `zpcdreplay` (the second one can be used in hooks\n                         # like atload\'\', atinit\'\', etc.)\n...\nzplugin load "other/plugin"\n\nautoload -Uz compinit\ncompinit\n\nzplugin cdreplay -q # -q is for quiet; actually run all the `compdef\'s saved before\n                    #`compinit` call (`compinit\' declares the `compdef\' function, so\n                    # it cannot be used until `compinit` is ran; Zplugin solves this\n                    # via intercepting the `compdef\'-calls and storing them for later\n                    # use with `zplugin cdreplay\')\n```\n\nThis allows to call compinit once.\nPerformance gains are huge, example shell startup time with double `compinit`: **0.980** sec, with\n`cdreplay` and single `compinit`: **0.156** sec.\n\n## Calling `compinit` With Turbo Mode\n\nIf you load completions using `wait\'\'` Turbo mode then you can add\n`atinit\'zpcompinit\'` to syntax-highlighting plugin (which should be the last\none loaded, as their (2 projects, [z-sy-h](https://github.com/zsh-users/zsh-syntax-highlighting) &\n[f-sy-h](https://github.com/zdharma/fast-syntax-highlighting))\n documentation state), or `atload\'zpcompinit\'` to last\ncompletion-related plugin. `zpcompinit` is a function that just runs `autoload\ncompinit; compinit`, created for convenience. There\'s also `zpcdreplay` which\nwill replay any caught compdefs so you can also do: `atinit\'zpcompinit;\nzpcdreplay\'`, etc. Basically, the whole topic is the same as normal `compinit` call,\nbut it is done in `atinit` or `atload` hook of the last related plugin with use of the\nhelper functions (`zpcompinit`,`zpcdreplay` & `zpcdclear` \xe2\x80\x93 see below for explanation\nof the last one).\n\n## Ignoring Compdefs\n\nIf you want to ignore compdefs provided by some plugins or snippets, place their load commands\nbefore commands loading other plugins or snippets, and issue `zplugin cdclear` (or\n`zpcdclear`, designed to be used in hooks like `atload\'\'`):\n\n```SystemVerilog\nsource ~/.zplugin/bin/zplugin.zsh\nzplugin snippet OMZ::plugins/git/git.plugin.zsh\nzplugin cdclear -q # <- forget completions provided by Git plugin\n\nzplugin load "some/plugin"\n...\nzplugin load "other/plugin"\n\nautoload -Uz compinit\ncompinit\nzplugin cdreplay -q # <- execute compdefs provided by rest of plugins\nzplugin cdlist # look at gathered compdefs\n```\n\n## Disabling System-Wide `compinit` Call (Ubuntu)\n\nOn Ubuntu users might get surprised that e.g. their completions work while they didn\'t\ncall `compinit` in their `.zshrc`. That\'s because the function is being called in\n`/etc/zshrc`. To disable this call \xe2\x80\x93 what is needed to avoid the slowdown and if user\nloads any completion-equipped plugins, i.e. almost on 100% \xe2\x80\x93 add the following lines to\n`~/.zshenv`:\n\n```zsh\n# Skip the not really helping Ubuntu global compinit\nskip_global_compinit=1\n```\n\n# Zplugin Module\n\n## Motivation\n\nThe module is a binary Zsh module (think about `zmodload` Zsh command, it\'s that topic) which transparently and\nautomatically **compiles sourced scripts**. Many plugin managers do not offer compilation of plugins, the module is\na solution to this. Even if a plugin manager does compile plugin\'s main script (like Zplugin does), the script can\nsource smaller helper scripts or dependency libraries (for example, the prompt `geometry-zsh/geometry` does that)\nand there are very few solutions to that, which are demanding (e.g. specifying all helper files in plugin load\ncommand and tracking updates to the plugin \xe2\x80\x93 in Zplugin case: by using `compile` ice-mod).\n\n  ![image](https://raw.githubusercontent.com/zdharma/zplugin/images/mod-auto-compile.png)\n\n## Installation\n\n### Without Zplugin\n\nTo install just the binary Zplugin module **standalone** (Zplugin is not needed, the module can be used with any\nother plugin manager), execute:\n\n```zsh\nsh -c "$(curl -fsSL https://raw.githubusercontent.com/zdharma/zplugin/master/doc/mod-install.sh)"\n```\n\nThis script will display what to add to `~/.zshrc` (2 lines) and show usage instructions.\n\n### With Zplugin\n\nZplugin users can build the module by issuing following command instead of running above `mod-install.sh` script\n(the script is for e.g. `zgen` users or users of any other plugin manager):\n\n```zsh\nzplugin module build\n```\n\nThis command will compile the module and display instructions on what to add to `~/.zshrc`.\n\n## Measuring Time of `source`s\n\nBesides the compilation-feature, the module also measures **duration** of each script sourcing. Issue `zpmod\nsource-study` after loading the module at top of `~/.zshrc` to see a list of all sourced files with the time the\nsourcing took in milliseconds on the left. This feature allows to profile the shell startup. Also, no script can\npass-through that check and you will obtain a complete list of all loaded scripts, like if Zshell itself was\ntracking this. The list can be surprising.\n\n## Debugging\n\nTo enable debug messages from the module set:\n\n```zsh\ntypeset -g ZPLG_MOD_DEBUG=1\n```\n\n# Hints and Tips\n\n## Customizing Paths\n\nFollowing variables can be set to custom values, before sourcing Zplugin. The\nprevious global variables like `$ZPLG_HOME` have been removed to not pollute\nthe namespace \xe2\x80\x93\xc2\xa0there\'s single `$ZPLGM` ("*ZPLUGIN MAP*") hash instead of `8` string\nvariables. Please update your dotfiles.\n\n```\ndeclare -A ZPLGM  # initial Zplugin\'s hash definition, if configuring before loading Zplugin, and then:\n```\n| Hash Field | Description |\n-------------|--------------\n| ZPLGM[BIN_DIR]         |\xc2\xa0Where Zplugin code resides, e.g.: "~/.zplugin/bin"                      |\n| ZPLGM[HOME_DIR]        |\xc2\xa0Where Zplugin should create all working directories, e.g.: "~/.zplugin" |\n| ZPLGM[PLUGINS_DIR]     | Override single working directory \xe2\x80\x93 for plugins, e.g. "/opt/zsh/zplugin/plugins" |\n| ZPLGM[COMPLETIONS_DIR] | As above, but for completion files, e.g. "/opt/zsh/zplugin/root_completions"     |\n| ZPLGM[SNIPPETS_DIR]    |\xc2\xa0As above, but for snippets |\n| ZPLGM[ZCOMPDUMP_PATH]  | Path to `.zcompdump` file, with the file included (i.e. its name can be different) |\n| ZPLGM[COMPINIT_OPTS]   | Options for `compinit` call (i.e. done by `zpcompinit`), use to pass -C to speed up loading |\n| ZPLGM[MUTE_WARNINGS]   | If set to `1`, then mutes some of the Zplugin warnings, specifically the `plugin already registered` warning |\n\nThere is also `$ZPFX`, set by default to `~/.zplugin/polaris` \xe2\x80\x93 a directory\nwhere software with `Makefile`, etc. can be pointed to, by e.g. `atclone\'./configure --prefix=$ZPFX\'`.\n\n## Non-GitHub (Local) Plugins\n\nUse `create` subcommand with user name `_local` (the default) to create plugin\'s\nskeleton in `$ZPLGM[PLUGINS_DIR]`. It will be not connected with GitHub repository\n(because of user name being `_local`). To enter the plugin\'s directory use `cd` command\nwith just plugin\'s name (without `_local`, it\'s optional).\n\nIf user name will not be `_local`, then Zplugin will create repository also on GitHub\nand setup correct repository origin.\n\n\n## Extending Git\n\nThere are several projects that provide git extensions. Installing them with\nZplugin has many benefits:\n\n - all files are under `$HOME` \xe2\x80\x93 no administrator rights needed,\n - declarative setup (like Chef or Puppet) \xe2\x80\x93 copying `.zshrc` to different account\n   brings also git-related setup,\n - easy update by e.g. `zplugin update --all`.\n\nBelow is a configuration that adds multiple git extensions, loaded in Turbo mode,\ntwo seconds after prompt:\n\n```zsh\nzplugin ice wait"2" lucid as"program" pick"bin/git-dsf"\nzplugin light zdharma/zsh-diff-so-fancy\n\nzplugin ice wait"2" lucid as"program" pick"$ZPFX/bin/git-now" make"prefix=$ZPFX install"\nzplugin light iwata/git-now\n\nzplugin ice wait"2" lucid as"program" pick"$ZPFX/bin/git-alias" make"PREFIX=$ZPFX" nocompile\nzplugin light tj/git-extras\n\nzplugin ice wait"2" lucid as"program" atclone\'perl Makefile.PL PREFIX=$ZPFX\' atpull\'%atclone\' \\\n            make\'install\' pick"$ZPFX/bin/git-cal"\nzplugin light k4rthik/git-cal\n```\n\nTarget directory for installed files is `$ZPFX` (`~/.zplugin/polaris` by default).\n\n## Preinstalling Plugins\n\nIf you create a Docker image that uses Zplugin, or want to install Turbo-loaded\nplugins before the shell starts interactively, you can invoke the\nzplugin-scheduler function in such a way, that it:\n\n - installs plugins without waiting for the prompt (i.e. it\'s script friendly),\n - installs **all** plugins instantly, without respecting the `wait\'\'` argument.\n\nTo accomplish this, use `burst` argument and call `-zplg-scheduler` function.\nExample `Dockerfile` entry:\n\n``` zsh\nRUN zsh -i -c -- \'-zplg-scheduler burst || true\'\n```\n\nAn example `Dockerfile` can be found\n[**here**](https://github.com/robobenklein/configs/blob/master/Dockerfile).\n\n# Getting Help and Community\n\nDo you need help or wish to get in touch with other Zplugin users?\n\n- Visit our subreddit [r/zplugin](https://www.reddit.com/r/zplugin/).\n\n- Chat with us in our IRC channel. Connect to [chat.freenode.net:6697](ircs://chat.freenode.net:6697/%23zplugin) (SSL) or [chat.freenode.net:6667](irc://chat.freenode.net:6667/%23zplugin) and join #zplugin. Following is a quick access via Webchat [![IRC](https://kiwiirc.com/buttons/chat.freenode.net/zplugin.png)](https://kiwiirc.com/client/chat.freenode.net:+6697/#zplugin)\n\n- Or via Gitter [![Chat at https://gitter.im/zplugin/Lobby][lobby-badge]][lobby-link]\n\n[status-badge]: https://travis-ci.org/zdharma/zplugin.svg?branch=master\n[status-link]: https://travis-ci.org/zdharma/zplugin\n[MIT-badge]: https://img.shields.io/badge/license-MIT-blue.svg\n[MIT-link]: ./LICENSE\n[ver-badge]: https://img.shields.io/github/tag/zdharma/zplugin.svg\n[ver-link]: https://github.com/zdharma/zplugin/releases\n[act-badge]: https://img.shields.io/github/commit-activity/y/zdharma/zplugin.svg\n[lobby-badge]: https://badges.gitter.im/zplugin/Lobby.svg\n[lobby-link]: https://gitter.im/zplugin/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge\n\n<!-- vim:tw=87\n-->\n'