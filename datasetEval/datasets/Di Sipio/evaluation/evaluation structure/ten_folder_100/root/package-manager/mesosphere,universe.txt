b'# Mesosphere Universe\n\n| Build | Status |\n|---|---|\n|CI   | [![Build Status](https://teamcity.mesosphere.io/app/rest/builds/buildType:(id:Oss_Universe_Ci)/statusIcon?guest=1)](https://teamcity.mesosphere.io/viewType.html?buildTypeId=Oss_Universe_Ci&guest=1)|\n| Universe Server | [![Build Status](https://teamcity.mesosphere.io/app/rest/builds/buildType:(id:Oss_Universe_UniverseServer)/statusIcon?guest=1)](https://teamcity.mesosphere.io/viewType.html?buildTypeId=Oss_Universe_UniverseServer&guest=1)|\n\nMesosphere Universe registry of packages made available for DC/OS Clusters.\n\n#### Table of Contents\n* [Universe Purpose](#universe-purpose)\n  * [Library Dependencies](#library-dependencies)\n* [Publish a Package](#publish-a-package-1)\n  * [Creating a Package](#creating-a-package)\n    * [`package.json`](#packagejson)\n      * [`.minDcosReleaseVersion`](#mindcosreleaseversion)\n    * [`config.json`](#configjson)\n    * [`marathon.json.mustache`](#marathonjsonmustache)\n    * [`command.json`](#commandjson)\n    * [`resource.json`](#resourcejson)\n      * [Docker Images](#docker-images)\n      * [Images](#images)\n      * [CLI Resources](#cli-resources)\n  * [Submit your Package](#submit-your-package)\n* [Repository Consumption](#repository-consumption-1)\n  * [Universe Server](#universe-server)\n    * [Build Universe Server locally](#build-universe-server-locally)\n    * [Run Universe Server](#run-universe-server)\n  * [Consumption Protocol](#consumption-protocol)\n  * [Supported DC/OS Versions](#supported-dcos-versions)\n\n\n## Universe Purpose\nYou can publish and store packages in the Universe repository. The packages can then be consumed by DC/OS. This git repo facilitates these three necessary functions - to publish, store and consume packages. You can publish and store packages in the Universe repository. The packages can then be consumed by DC/OS. If you are new to Universe and Packages, this [Get Started Guide](docs/tutorial/GetStarted.md) is highly recommended.\n\n### Library dependencies\n* [jq](https://stedolan.github.io/jq/download/) is installed in your environment.\n* `python3` is installed in your environment (minimum python3.5).\n* Docker is installed in your environment.\n\n### Publish a Package\n\nTo publish a package to Universe, fork this repo and open a Pull Request. A set of automated builds will be run against\nthe Pull Request to ensure the modifications made in the PR leave the Universe well formed.\nSee [Creating a Package](#creating-a-package) for details.\n\n### Registry of Packages\n\nThe registry of published packages is maintained as the contents of this repo in the `repo/packages` directory. As of\nrepository version `3.0` multiple packaging versions are allowed to co-exist in the same repository. Validation of\npackages are coordinated based on the packaging version defined in `package.json`.\n\n### Repository Consumption\n\nIn order for published packages to be consumed and installed in a DC/OS Cluster the Universe Server needs to be built\nand run in a location accessible by the DC/OS Cluster. See [Universe Server](#universe-server) for details on\nbuilding the Universe artifacts and Server.\n\n## Publish a Package\n\n### Creating a Package\n\nEach package has its own directory, with one subdirectory for each package revision. Each package revision directory\ncontains the set of files necessary to create a consumable package that can be used by a DC/OS Cluster to install\nthe package.\n```\n\xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 repo/package/F/foo\n \xc2\xa0\xc2\xa0 \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 0\n \xc2\xa0\xc2\xa0 \xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 command.json\n \xc2\xa0\xc2\xa0 \xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 config.json\n \xc2\xa0\xc2\xa0 \xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 marathon.json.mustache\n \xc2\xa0\xc2\xa0 \xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 resource.json\n \xc2\xa0\xc2\xa0 \xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 package.json\n \xc2\xa0\xc2\xa0 \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 1\n \xc2\xa0\xc2\xa0 \xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 command.json\n \xc2\xa0\xc2\xa0 \xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 config.json\n \xc2\xa0\xc2\xa0 \xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 marathon.json.mustache\n \xc2\xa0\xc2\xa0 \xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 resource.json\n \xc2\xa0\xc2\xa0 \xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 package.json\n \xc2\xa0\xc2\xa0 \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 ...\n```\n\n\n#### `package.json`\n\n|Packaging Version|   |\n|-----------------|---|\n|2.0|required|\n|3.0|required|\n|4.0|required|\n\nEvery package in Universe must have a `package.json` file which specifies the high level metadata about the package.\n\nCurrently, a package can specify one of three values for `.packagingVersion`\neither `2.0` or `3.0` or `4.0`; which version is declared\nwill dictate which other files are required for the complete package as well as the schema(s) all the files must\nadhere to. Below is a snippet that represents a version `4.0` package.\n\nSee [`repo/meta/schema/package-schema.json`](repo/meta/schema/package-schema.json) for the full json schema outlining\nwhat properties are available for each corresponding version of a package.\n\n```json\n{\n  "packagingVersion": "4.0",\n  "name": "foo",\n  "version": "1.2.3",\n  "tags": ["mesosphere", "framework"],\n  "maintainer": "help@bar.io",\n  "description": "Does baz.",\n  "scm": "https://github.com/bar/foo.git",\n  "website": "http://bar.io/foo",\n  "framework": true,\n  "upgradesFrom": ["1.2.2"],\n  "downgradesTo": ["1.2.2"],\n  "minDcosReleaseVersion": "1.10",\n  "postInstallNotes": "Have fun foo-ing and baz-ing!",\n  "licenses": [{"name": "My license", "url": "http://example.com/license_url"}]\n}\n```\n\nFor the first version of the package, add this line to the beginning of `preInstallNotes`: ```This DC/OS Service is currently in preview. There may be bugs, incomplete features, incorrect documentation, or other discrepancies. Preview packages should never be used in production!``` It will be removed once the package has been tested and used by the community.\n\n###### `.minDcosReleaseVersion`\n\n|Packaging Version|   |\n|-----------------|---|\n|2.0|not supported|\n|3.0|optional|\n|4.0|optional|\n\nIntroduced in `packagingVersion` `3.0`, `.minDcosReleaseVersion` can be specified as a property of `package.json`.\nWhen `.minDcosReleaseVersion` is specified the package will only be made available to DC/OS clusters with a DC/OS\nRelease Version greater than or equal to (`>=`) the value specified.\n\nFor example, `"minDcosReleaseVersion" : "1.8"` will prevent the package from being installed on clusters older than DC/OS 1.8.\n\n###### `.upgradesFrom`\n\n|Packaging Version|   |\n|-----------------|---|\n|2.0|not supported|\n|3.0|not supported|\n|4.0|optional|\n\nIntroduced in `packagingVersion` `4.0`, `.upgradesFrom` can be specified as a property of `package.json`.\nWhen `.upgradesFrom` is specified this indicates to users that the package is able to upgrade from any of\nthe versions listed in the property. It is the resposibility of the package creator to make sure that this\nis indeed the case.\n\n###### `.downgradesTo`\n\n|Packaging Version|   |\n|-----------------|---|\n|2.0|not supported|\n|3.0|not supported|\n|4.0|optional|\n\nIntroduced in `packagingVersion` `4.0`, `.downgradesTo` can be specified as a property of `package.json`.\nWhen `.downgradesTo` is specified this indicates to users that the package is able to downgrade to any of\nthe versions listed in the property. It is the resposibility of the package creator to make sure that this\nis indeed the case.\n\n#### `config.json`\n\n|Packaging Version|   |\n|-----------------|---|\n|2.0|optional|\n|3.0|optional|\n|4.0|optional|\n\nThis file describes the configuration properties supported by the package, represented as a\n[json-schema](http://spacetelescope.github.io/understanding-json-schema/). Each property can specify whether or not it\nis required, a default value, as well as some basic validation.\n\nUsers can then [override specific values](https://docs.mesosphere.com/1.7/usage/services/config/) at\ninstallation time by passing an options file to the DC/OS CLI or by setting config values through the\nDC/OS UI (since DC/OS 1.7).\n\n```json\n{\n  "type": "object",\n  "properties": {\n    "foo": {\n      "type": "object",\n      "properties": {\n        "baz": {\n          "type": "integer",\n          "description": "How many times to do baz.",\n          "minimum": 0,\n          "maximum": 16,\n          "required": false,\n          "default": 4\n        }\n      },\n      "required": ["baz"]\n    }\n  },\n  "required": ["foo"]\n}\n```\n\n\n#### `marathon.json.mustache`\n\n|Packaging Version|   |\n|-----------------|---|\n|2.0|required|\n|3.0|optional|\n|4.0|optional|\n\nThis file is a [mustache template](http://mustache.github.io/) that when rendered will create a\n[Marathon](http://github.com/mesosphere/marathon) app definition capable of running your service.\n\nVariables in the mustache template will be evaluated from a union object created by merging three objects in the\nfollowing order:\n\n1. Defaults specified in `config.json`\n\n2. User supplied options from either the DC/OS CLI or the DC/OS UI\n\n3. The contents of `resource.json`\n\n```json\n{\n  "id": "foo",\n  "cpus": 1.0,\n  "mem": 1024,\n  "instances": 1,\n  "args": ["{{{foo.baz}}}"],\n  "container": {\n    "type": "DOCKER",\n    "docker": {\n      "image": "{{resource.assets.container.docker.foo23b1cfe8e04a}}",\n      "network": "BRIDGE",\n      "portMappings": [\n        {\n          "containerPort": 8080,\n          "hostPort": 0,\n          "servicePort": 0,\n          "protocol": "tcp"\n        }\n      ]\n    }\n  }\n}\n```\n\nSee the\n[Marathon API Documentation](https://mesosphere.github.io/marathon/docs/rest-api.html)\nfor more detailed instruction on app definitions.\n\n#### `command.json`\n\n|Packaging Version|   |\n|-----------------|---|\n|2.0|optional|\n|3.0|optional **[Deprecated]**|\n|4.0|not supported|\n\nAs of `packagingVersion` `3.0`, `command.json` is deprecated in favor of the `.cli` property of `resource.json`.\nSee [CLI Resources](#cli-resources) for details.\n\nDescribes how to install the package\'s CLI via pip, the Python package manager. This document represents the\nformat of a Pip requirements file where each element in the array is a line in the requirements file.\n\n```json\n{\n  "pip": [\n    "https://pypi.python.org/packages/source/f/foo/foo-1.2.3.tar.gz"\n  ]\n}\n```\n\nPackaging version 4.0 does not support command.json. The presence of command.json in the\ndirectory will fail the universe validation.\n\n#### `resource.json`\n\n|Packaging Version|   |\n|-----------------|---|\n|2.0|optional|\n|3.0|optional|\n|4.0|optional|\n\nThis file contains all of the externally hosted resources (E.g. Docker images, HTTP objects and\nimages) needed to install the application.\n\nSee [`repo/meta/schema/v2-resource-schema.json`](repo/meta/schema/v2-resource-schema.json) and\n[`repo/meta/schema/v3-resource-schema.json`](repo/meta/schema/v3-resource-schema.json) for the full\njson schema outlining what properties are available for each corresponding version of a package.\n\n```json\n{\n  "images": {\n    "icon-small": "http://some.org/foo/small.png",\n    "icon-medium": "http://some.org/foo/medium.png",\n    "icon-large": "http://some.org/foo/large.png",\n    "screenshots": [\n      "http://some.org/foo/screen-1.png",\n      "http://some.org/foo/screen-2.png"\n    ]\n  },\n  "assets": {\n    "uris": {\n      "log4j-properties": "http://some.org/foo/log4j.properties"\n    },\n    "container": {\n      "docker": {\n        "23b1cfe8e04a": "some-org/foo:1.0.0"\n      }\n    }\n  }\n}\n```\n\n##### Docker Images\n\nFor the Docker image, please use the image ID for the referenced image. You can find this by\npulling the image locally and running `docker images some-org/foo:1.0.0`.\n\n##### Images\n\nWhile `images` is an optional field, it is highly recommended you include icons and screenshots\nin `resource.json` and update the path definitions accordingly. Specifications are as follows:\n\n* `icon-small`: 48px (w) x 48px (h)\n* `icon-medium`: 96px (w) x 96px (h)\n* `icon-large`: 256px (w) x 256px (h)\n* `screenshots[...]`: 1200px (w) x 675px (h)\n\n**NOTE:** To ensure your service icons look beautiful on retina-ready displays,\nplease supply 2x versions of all icons. No changes are needed to\n`resource.json` - simply supply an additional icon file with the text `@2x` in\nthe name before the file extension.\nFor example, the icon `icon-cassandra-small.png` would have a retina-ready\nalternate image named `icon-cassandra-small@2x.png`.\n\n##### CLI Resources\n\n|Packaging Version|   |\n|-----------------|---|\n|2.0|not supported|\n|3.0|optional|\n|4.0|optional|\n\nThe new `.cli` property allows for a package to configure native CLI subcommands for several platforms and\narchitectures.\n\n```json\n{\n  "cli":{\n    "binaries":{\n      "darwin":{\n        "x86-64":{\n          "contentHash":[\n            { "algo": "sha256", "value": "..." }\n          ],\n          "kind": "executable",\n          "url":"https://some.org/foo/1.0.0/cli/darwin/dcos-foo"\n        }\n      },\n      "linux":{\n        "x86-64":{\n          "contentHash":[\n            { "algo":"sha256", "value":"..." }\n          ],\n          "kind":"executable",\n          "url":"https://some.org/foo/1.0.0/cli/linux/dcos-foo"\n        }\n      },\n      "windows":{\n        "x86-64":{\n          "contentHash":[\n            { "algo":"sha256", "value":"..." }\n          ],\n          "kind":"executable",\n          "url":"https://some.org/foo/1.0.0/cli/windows/dcos-foo"\n        }\n      }\n    }\n  }\n}\n```\n\n### Submit your Package\n\nDevelopers are invited to publish a package containing their DC/OS Service by submitting a Pull Request targeted at\nthe `version-3.x` branch of this repo.\n\nFull Instructions:\n\n1. Fork this repo and clone the fork:\n\n  ```bash\n  git clone https://github.com/<user>/universe.git /path/to/universe\n  ```\n\n2. Run the verification and build script:\n\n  ```bash\n  scripts/build.sh\n  ```\n\n3. Verify all build steps completed successfully\n4. Ensure the license field in package.json is completed. Without a license attribution we cannot accept pull requests.\n5. Submit a pull request against the `version-3.x` branch with your changes. Every pull request opened will have a set\n   of automated verifications run against it. These automated verification are reported against the pull request using\n   the GitHub status API. All verifications must pass in order for a pull request to be eligible for merge.\n\n6. Respond to manual review feedback provided by the DC/OS Community.\n  * Each Pull Request to Universe will also be manually reviewed by a member of the DC/OS Community. To ensure your\n    package is able to be made available to users as quickly as possible be sure to respond to the feedback provided.\n7. Add a getting started example of how to install and use the DC/OS package. To add the example, fork the [`examples`](https://github.com/dcos/examples) repo and send in a pull request. Re-use the format from the existing examples there.\n\n\n## Repository Consumption\n\nIn order for Universe to be consumed by DC/OS the build process needs to be run to create the Universe Server. This section describes how to test a package before releasing it to public Universe. See [Local Universe](https://docs.mesosphere.com/latest/administering-clusters/deploying-a-local-dcos-universe/) for running universe server on air-gapped clusters.\n\n### Universe Server\n\nUniverse Server is a new component introduce alongside `packagingVersion` `3.0`. In order for Universe to be able to\nprovide packages for many versions of DC/OS at the same time, it is necessary for a server to be responsible for serving\nthe correct set of packages to a cluster based on the cluster\'s version.\n\nAll Pull Requests opened for Universe and the `version-3.x` branch will have their Docker image built and published\nto the DockerHub image [`mesosphere/universe-server`](https://hub.docker.com/r/mesosphere/universe-server/).\nIn the artifacts tab of the build results you can find `docker/server/marathon.json` which can be used to run the\nUniverse Server for testing in your DC/OS cluster.  For each Pull Request, click the details link of the "Universe Server\nDocker image" status report to view the build results.\n\n#### Build Universe Server locally\n\n1. Validate and build the Universe artifacts\n  ```bash\n  scripts/build.sh\n  ```\n\n2. Build the Universe Server Docker image\n  ```bash\n  DOCKER_IMAGE="my-org/my-image" DOCKER_TAG="my-package" docker/server/build.bash\n  ```\n  This will create a Docker image `universe-server:my-package` and `docker/server/target/marathon.json` on your local machine\n\n3. If you would like to publish the built Docker image, run\n  ```bash\n  DOCKER_IMAGE="my-org/my-image" DOCKER_TAG="my-package" docker/server/build.bash publish\n  ```\n\n#### Run Universe Server\n\nUsing the `marathon.json` that is created when building Universe Server we can run a Universe Server in our DC/OS\nCluster which can then be used to install packages.\n\nRun the following commands to configure DC/OS to use the custom Universe Server (DC/OS 1.8+):\n\n```bash\ndcos marathon app add marathon.json\ndcos package repo add --index=0 dev-universe http://universe.marathon.mesos:8085/repo\n```\n\nFor DC/OS 1.7, a different URL must be used:\n\n```bash\ndcos marathon app add marathon.json\ndcos package repo add --index=0 dev-universe http://universe.marathon.mesos:8085/repo-1.7\n```\n\n### Consumption Protocol\n\nA DC/OS Cluster can be configured to point to multiple Universe Servers; each Universe Server will be fetched via\nHTTPS or HTTP. When a DC/OS Cluster attempts to fetch the package set from a Universe Server, the Universe Server\nwill provide ONLY those packages which can be run on the cluster.\n\nFor example:\nA DC/OS 1.6.1 Cluster will only receive packages with a `minDcosReleaseVersion` less than or equal to (`<=`) `1.6.1`\nin the format the DC/OS Cluster expects.\n\n```\n +----------------------+   +-----------------------+\n \xe2\x94\x82public universe server\xe2\x94\x82   \xe2\x94\x82private universe server\xe2\x94\x82\n +----------------------+   +-----------------------+\n                http \\         / http\n                      \\       /\n                       \\     /\n                       +-----+           +--------+\n                       \xe2\x94\x82DC/OS\xe2\x94\x82-----------\xe2\x94\x82Marathon\xe2\x94\x82\n                       +-----+    http   +--------+\n```\n\n### Supported DC/OS Versions\nCurrently Universe Server provides support for the following versions of DC/OS\n\n| DC/OS Release Version | Support Level |\n|-----------------------|---------------|\n| 1.6.1                 | Deprecated    |\n| 1.7                   | Deprecated    |\n| 1.8                   | Full Support  |\n| 1.9                   | Full Support  |\n| 1.10                  | Full Support  |\n| 1.11                  | Full Support  |\n| 1.12                  | Full Support  |\n| 1.13                  | Full Support  |\n| 2.0                   | Full Support  |\n'