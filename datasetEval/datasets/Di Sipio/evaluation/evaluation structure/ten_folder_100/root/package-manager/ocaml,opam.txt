b'# opam - A package manager for OCaml\n\n[![TravisCI Build Status](https://travis-ci.org/ocaml/opam.svg?branch=master)](https://travis-ci.org/ocaml/opam)\n[![AppVeyor Build Status](https://ci.appveyor.com/api/projects/status/github/ocaml/opam?branch=master&svg=true)](https://ci.appveyor.com/project/AltGr/opam)\n\nOpam is a source-based package manager for OCaml. It supports multiple simultaneous\ncompiler installations, flexible package constraints, and a Git-friendly development\nworkflow.\n\nOpam was created and is maintained by [OCamlPro](http://www.ocamlpro.com).\n\nTo get started, checkout the [Install](http://opam.ocaml.org/doc/Install.html)\nand [Usage](http://opam.ocaml.org/doc/Usage.html) guides.\n\n## Compiling this repo\n\nEither from an existing opam installation, use `opam pin add opam-devel\n--dev`, or:\n\n* Make sure you have the required dependencies installed:\n  - GNU make\n  - OCaml >= 4.02.3 (or see [below](#compiling-without-ocaml))\n  - A C++ compiler (unless building without a solver, see `./configure --without-mccs`)\n* Run `./configure`\n* Run `make lib-ext` as advertised by `./configure` if you don\'t have the\n  dependencies installed. This will locally take care of all OCaml dependencies\n  for you (downloading them, unless you used the inclusive archive we provide\n  for each release).\n* Run `make`\n* Run `make install`\n\nThis is all you need for installing and using opam, but if you want to use the\n`opam-lib` (to work on opam-related tools), you need to link it to installed\nlibraries, rather than use `make lib-ext` which would cause conflicts. It\'s\neasier to already have a working opam installation in this case, so you can do\nit as a second step.\n\n* Make sure to have ocamlfind, ocamlgraph, cmdliner >= 0.9.8, cudf >= 0.7,\n  dose3 >= 5, re >= 1.5.0, opam-file-format installed. Or run `opam install\n  . --deps-only` if you already have a working instance. Re-run\n  `./configure` once done\n* Run `make libinstall` at the end\n\n_Note_: If you install on your system (without changing the prefix), you will\nneed to install as root (`sudo`). As sudo do not propagate environment\nvariables, there wil be some errors. You can use `sudo -E "PATH=$PATH" in order\nto be sure to have the good environment for install.\n\n## Developer mode\n\nIf you are developing OPAM, you may enable developer features by including the\n`--enable-developer-mode` parameter with `./configure`.\n\n## Compiling on Native Windows\n\n```\nBUILDING ON WINDOWS IS A WORK-IN-PROGRESS AND THESE INSTRUCTIONS WILL EVOLVE!\n```\n\nCygwin (https://www.cygwin.com/setup-x86_64.exe) is always required to build opam on\nWindows. Both the 64-bit and 32-bit versions of Cygwin may be used (you can build\n32-bit opam using 64-bit Cygwin and vice versa though note that you must be running\n64-bit Windows in order to build the 64-bit version).\n\nThe following Cygwin packages are required:\n* From Devel - `make`\n* From Devel - `patch` (not required if OCaml and all required packages are\n                        pre-installed)\n* From Interpreters - `m4` (unless required packages are pre-installed or built\n                            using `make lib-ext` rather than `make lib-pkg` - `m4`\n                            is required by findlib\'s build system)\n* From Devel - `mingw64-i686-gcc-core` & `mingw64-x86_64-gcc-core` (not required if\n                                                                 building with MSVC)\n\nAlternatively, having downloaded Cygwin\'s setup program, Cygwin can be installed\nusing the following command line:\n\n`setup-x86_64 --root=C:\\cygwin64 --quiet-mode --no-desktop --no-startmenu --packages=make,mingw64-i686-gcc-core,mingw64-x86_64-gcc-core,m4,patch`\n\nThe `--no-desktop` and `--no-startmenu` switches may be omitted in order to create\nshortcuts on the Desktop and Start Menu respectively. Executed this way, setup will\nstill be interactive, but the packages will have been pre-selected. To make setup\nfully unattended, choose a mirror URL from https://cygwin.com/mirrors.lst and add\nthe --site switch to the command line\n(e.g. `--site=http://www.mirrorservice.org/sites/sourceware.org/pub/cygwin/`).\n\nIt is recommended that you set the `CYGWIN` environment variable to\n`nodosfilewarning winsymlinks:native`.\n\nCygwin is started either from a shortcut or by running:\n\n```\nC:\\cygwin64\\bin\\mintty -\n```\n\nIt is recommended that opam be built outside Cygwin\'s root\n(so in `/cygdrive/c/...`). From an elevated Cygwin shell, edit `/etc/fstab` and\nensure that the file\'s content is exactly:\n\n```\nnone /cygdrive cygdrive noacl,binary,posix=0,user 0 0\n```\n\nThe change is the addition of the `noacl` option to the mount instructions for\n`/cygdrive` and this stops from Cygwin from attempting to emulate POSIX permissions\nover NTFS (which can result in strange and unnecessary permissions showing up in\nWindows Explorer). It is necessary to close and restart all Cygwin terminal windows\nafter changing `/etc/fstab`.\n\nopam is able to be built **without** a pre-installed OCaml compiler. For the MSVC\nports of OCaml, the Microsoft Windows SDK 7 or later or Microsoft Visual Studio is\nrequired (https://www.microsoft.com/en-gb/download/details.aspx?id=8442 - either x86\nor x64 may be installed, as appropriate to your system). It is not necessary to\nmodify PATH, INCLUDE or LIB - opam\'s build system will automatically detect the\nrequired changes.\n\nIf OCaml is not pre-installed, run:\n```\nmake compiler [OCAML_PORT=mingw64|mingw|msvc64|msvc|auto]\n```\nThe `OCAML_PORT` variable determines which flavour of Windows OCaml is compiled -\n`auto` will attempt to guess. As long as `gcc` is **not** installed in Cygwin\n(i.e. the native C compiler *for Cygwin*), `OCAML_PORT` does not need to be\nspecified and `auto` will be assumed. Once the compiler is built, you may run:\n```\nmake lib-pkg\n```\nto install the dependencies as findlib packages to the compiler. Building `lib-pkg`\nrequires the ability to create native symbolic links (and the `CYGWIN` variable\n*must* include `winsymlinks:native`) - this means that either Cygwin must be run\nelevated from an account with administrative privileges or your user account must be\ngranted the SeCreateSymbolicLinkPrivilege either by enabling Developer mode on\nWindows 10, or using Local Security Policy on earlier versions of Windows.\nAlternatively, you may run `configure` and use `make lib-ext`, as advised.\n\nYou can then `configure` and build opam as above.\n\n## Compiling without OCaml\n\n`make cold` is provided as a facility to compile OCaml, then bootstrap opam.\nYou don\'t need need to run `./configure` in that case, but\nyou may specify `CONFIGURE_ARGS` if needed, e.g.:\n\n```\nmake cold CONFIGURE_ARGS="--prefix ~/local"\nmake cold-install\n```\n\nNOTE: You\'ll still need GNU make.\n\n## Bug tracker\n\nHave a bug or a feature request ? Please open an issue on [our\nbug-tracker](https://github.com/ocaml/opam/issues). Please search for existing\nissues before posting, and include the output of `opam config report` and any\ndetails that may help track down the issue.\n\n## Documentation\n\n#### User Manual\n\nThe main documentation entry point to opam is the user manual,\navailable using `opam --help`. To get help for a specific command, use\n`opam <command> --help`.\n\n#### Guides and Tutorials\n\nA collection of guides and tutorials is available\n[online](http://opam.ocaml.org/doc/Usage.html). They are generated from the\nfiles in [doc/pages](https://github.com/ocaml/opam/tree/master/doc/pages).\n\n#### API, Code Documentation and Developer Manual\n\nA more thorough technical document describing opam and specifying the package\ndescription format is available in the\n[developer manual](http://opam.ocaml.org/doc/manual/dev-manual.html). `make\ndoc` will otherwise make the API documentation available under `doc/`.\n\n## Community\n\nKeep track of development and community news.\n\n* Have a question that\'s not a feature request or bug report?\n  [Ask on the mailing list](http://lists.ocaml.org/listinfo/infrastructure).\n\n* Chat with fellow opamers on IRC. On the `irc.freenode.net` server,\n  in the `#ocaml` or the `#opam` channel.\n\n## Contributing\n\nWe welcome contributions ! Please use Github\'s pull-request mechanism against\nthe master branch of the [opam repository](https://github.com/ocaml/opam). If\nthat\'s not an option for you, you can use `git format-patch` and email us.\n\n## Versioning\n\nThe release cycle respects [Semantic Versioning](http://semver.org/).\n\n## Related repositories\n\n- [ocaml/opam-repository](https://github.com/ocaml/opam-repository) is the\n  official repository for opam packages and compilers. A number of non-official\n  repositories are also available on the interwebs, for instance on\n  [Github](https://github.com/search?q=opam-repo&type=Repositories).\n- [opam2web](https://github.com/ocaml/opam2web) generates a collection of\n  browsable HTML files for a given repository. It is used to generate\n  http://opam.ocaml.org.\n- [opam-rt](https://github.com/ocaml/opam-rt) is the regression framework for opam.\n- [opam-publish](https://github.com/AltGr/opam-publish) is a tool to facilitate\n  the creation, update and publication of opam packages.\n\n## Copyright and license\n\nThe version comparison function in `src/core/opamVersionCompare.ml` is part of\nthe Dose library and Copyright 2011 Ralf Treinen.\n\nAll other code is:\n\nCopyright 2012-2016 OCamlPro\nCopyright 2012 INRIA\n\nAll rights reserved. Opam is distributed under the terms of the GNU Lesser\nGeneral Public License version 2.1, with the special exception on linking\ndescribed in the file LICENSE.\n\nOpam is distributed in the hope that it will be useful, but WITHOUT ANY\nWARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\nPARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.\n\n'