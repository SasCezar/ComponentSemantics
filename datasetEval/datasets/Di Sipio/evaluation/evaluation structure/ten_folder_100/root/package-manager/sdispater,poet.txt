b'# Poet: Dependency Management for Python\n\n`poet` has been deprecated in favor of [poetry](https://github.com/sdispater/poetry).\n\n![Poet build status](https://travis-ci.org/sdispater/poet.svg)\n\nPoet helps you declare, manage and install dependencies of Python projects, ensuring you have the right stack everywhere.\n\nThe package is **highly experimental** at the moment so expect things to change and break. However, if you feel adventurous\nI\'d gladly appreciate feedback and pull requests.\n\n![Poet Install](https://raw.githubusercontent.com/sdispater/poet/develop/assets/poet-install.gif)\n\n## Installation\n\n```bash\npip install pypoet\n```\n\n### Enable tab completion for Bash, Fish, or Zsh\n\n`poet` supports generating completion scripts for Bash, Fish, and Zsh.\nSee `poet help completions` for full details, but the gist is as simple as using one of the following:\n\n```bash\n# Bash\n$ poet completions bash > /etc/bash_completion.d/poet.bash-completion\n\n# Bash (macOS/Homebrew)\n$ poet completions bash > $(brew --prefix)/etc/bash_completion.d/poet.bash-completion\n\n# Fish\n$ poet completions fish > ~/.config/fish/completions/poet.fish\n\n# Zsh\n$ poet completions zsh > ~/.zfunc/_poet\n```\n\n*Note:* you may need to restart your shell in order for the changes to take\neffect.\n\nFor `zsh`, you must then add the following line in your `~/.zshrc` before\n`compinit`:\n\n```zsh\nfpath+=~/.zfunc\n```\n\n\n## Introduction\n\n`poet` is a tool to handle dependencies installation, building and packaging of Python packages.\nIt only needs one file to do all of that: `poetry.toml`.\n\n```toml\n[package]\nname = "pypoet"\nversion = "0.1.0"\ndescription = "Poet helps you declare, manage and install dependencies of Python projects, ensuring you have the right stack everywhere."\n\nlicense = "MIT"\n\nauthors = [\n    "S\xc3\xa9bastien Eustace <sebastien@eustace.io>"\n]\n\nreadme = \'README.md\'\n\nrepository = "https://github.com/sdispater/poet"\nhomepage = "https://github.com/sdispater/poet"\n\nkeywords = [\'packaging\', \'poet\']\n\ninclude = [\'poet/**/*\', \'LICENSE\']\n\npython = ["~2.7", "^3.2"]\n\n\n[dependencies]\ntoml = "^0.9"\nrequests = "^2.13"\nsemantic_version = "^2.6"\npygments = "^2.2"\ntwine = "^1.8"\nwheel = "^0.29"\npip-tools = "^1.8.2"\ncleo = { git = "https://github.com/sdispater/cleo.git", branch = "master" }\n\n[dev-dependencies]\npytest = "^3.0"\npytest-cov = "^2.4"\ncoverage = "<4.0"\nhttpretty = "^0.8.14"\n\n[scripts]\npoet = \'poet:app.run\'\n```\n\nThere are some things we can notice here:\n\n* It will try to enforce [semantic versioning](http://semver.org) as the best practice in version naming.\n* You can specify the readme, included and excluded files: no more `MANIFEST.in`.\n`poet` will also use VCS ignore files (like `.gitignore`) to populate the `exclude` section.\n* Keywords (up to 5) can be specified and will act as tags on the packaging site.\n* The dependencies sections support caret, tilde, wildcard, inequality and multiple requirements.\n* You must specify the python versions for which your package is compatible.\n\n\n`poet` will also detect if you are inside a virtualenv and install the packages accordingly. So, `poet` can\nbe installed globally and used everywhere.\n\n## Why?\n\nPackaging system and dependency management in Python is rather convoluted and hard to understand for newcomers.\nEven for seasoned developers it might be cumbersome at times to create all files needed in a Python project: `setup.py`,\n`requirements.txt`, `setup.cfg`, `MANIFEST.in`.\n\nSo I wanted a tool that would limit everything to a single configuration file to do everything: dependency management, packaging\nand publishing.\n\nIt takes inspiration in tools that exist in other languages, like `composer` (PHP) or `cargo` (Rust).\n\nNote that there is no magic here, `poet` uses existing tools (`pip`, `twine`, `setuptools`, `distutils`, `pip-tools`) under the hood\nto achieve that in a more intuitive way.\n\n\n## Commands\n\n\n### new\n\nThis command will help you setup a default package architecture.\n\n```bash\npoet new my_package\n```\n\nThis will create a `my_package` directory with the following architecture:\n\n```text\nmy_package\n    \xe2\x94\x9c README.md\n    \xe2\x94\x9c my_package/\n    \xe2\x94\x82   \xe2\x94\x94 __init__.py\n    \xe2\x94\x9c poetry.toml\n    \xe2\x94\x94 tests/\n        \xe2\x94\x9c __init__.py\n        \xe2\x94\x94 test_my_package.py\n```\n\nIf your package is a single module, you can tell `poet` to use the `module` layout:\n\n```bash\npoet new my_package --layout module\n```\n\nThis will produce the following structure:\n\n```text\nmy_package\n    \xe2\x94\x9c README.md\n    \xe2\x94\x9c my_package.py\n    \xe2\x94\x9c poetry.toml\n    \xe2\x94\x94 tests/\n        \xe2\x94\x9c __init__.py\n        \xe2\x94\x94 test_my_package.py\n```\n\nIf you already have created the directory that will hold your package, inside the directory just do:\n\n```bash\npoet install .\n```\n\nThe name of the project will be the name of the directory. If you want to specify another name\nadd the `--name` option to the command\n\n```bash\npoet install --name my_package .\n```\n\n#### Options\n\n   * `--name`: Name of the package.\n   * `--layout`: Layout to use (Default: `standard`).\n   * `--no-tests`: Do not create the tests directory.\n   * `--rst`: Create a README in the ReStructuredText format.\n\n\n### init\n\nThis command will help you create a `poetry.toml` file interactively\nby prompting you to provide basic information about your package.\n\nIt will interactively ask you to fill in the fields, while using some smart defaults.\n\n```bash\npoet init\n```\n\nHowever, if you just want a basic template and fill the information directly, you can just do:\n\n```bash\npoet init default\n```\n\n#### Options\n\n   * `--name`: Name of the package.\n   * `--description`: Description of the package.\n   * `--author`: Author of the package.\n   * `--require`: Package to require with a version constraint. Should be in format `foo:1.0.0`.\n   * `--require-dev`: Development requirements, see `--require`.\n   * `--index`: Index to use when searching for packages.\n\n\n### install\n\nThe `install` command reads the `poetry.toml` file from the current directory, resolves the dependencies,\nand installs them.\n\n```bash\npoet install\n```\n\nIf there is a `poetry.lock` file in the current directory,\nit will use the exact versions from there instead of resolving them.\nThis ensures that everyone using the library will get the same versions of the dependencies.\n\nIf there is no `poetry.lock` file, Poet will create one after dependency resolution.\n\nYou can specify to the command that yo do not want the development dependencies installed by passing\nthe `--no-dev` option.\n\n```bash\npoet install --no-dev\n```\n\nYou can also specify the features you want installed by passing the `--f|--features` option (See [Features](#features) for more info)\n\n```bash\npoet install --features "mysql pgsql"\npoet install -f mysql -f pgsql\n```\n\n#### Options\n\n* `--no-dev`: Do not install dev dependencies.\n* `-f|--features`: Features to install (multiple values allowed).\n* `--no-progress`: Removes the progress display that can mess with some terminals or scripts which don\'t handle backspace characters.\n* `--index`: The index to use when installing packages.\n\n\n### update\n\nIn order to get the latest versions of the dependencies and to update the `poetry.lock` file,\nyou should use the `update` command.\n\n```bash\npoet update\n```\n\nThis will resolve all dependencies of the project and write the exact versions into `poetry.lock`.\n\nIf you just want to update a few packages and not all, you can list them as such:\n\n```bash\npoet update requests toml\n```\n\n#### Options\n\n* `--no-progress`: Removes the progress display that can mess with some terminals or scripts which don\'t handle backspace characters.\n* `--index`: The index to use when installing packages.\n\n\n### package\n\nThe `package` command builds the source and wheels archives.\n\n#### Options\n\n* `--no-universal`: Do not build a universal wheel.\n* `--no-wheels`: Build only the source package.\n*  `-c|--clean`: Make a clean package.\n\n### publish\n\nThis command builds (if not already built) and publishes the package to the remote repository.\n\nIt will automatically register the package before uploading if this is the first time it is submitted.\n\n#### Options\n\n* `-r|--repository`: The repository to register the package to (default: `pypi`). Should match a section of your `~/.pypirc` file.\n\n### search\n\nThis command searches for packages on a remote index.\n\n```bash\npoet search requests pendulum\n```\n\n#### Options\n\n* `-i|--index`: The index to use.\n* `-N|--only-name`: Search only in name.\n\n### lock\n\nThis command locks (without installing) the dependencies specified in `poetry.toml`.\n\n```bash\npoet lock\n```\n\n#### Options\n\n* `--no-progress`: Removes the progress display that can mess with some terminals or scripts which don\'t handle backspace characters.\n* `-i|--index`: The index to use.\n* `-f|--force`: Force locking.\n\n\n### check\n\nThe `check` command will check if the `poetry.toml` file is valid.\n\n```bash\npoet check\n```\n\n\n## The `poetry.toml` file\n\nA `poetry.toml` file is composed of multiple sections.\n\n### package\n\nThis section describes the specifics of the package\n\n#### name\n\nThe name of the package. **Required**\n\n#### version\n\nThe version of the package. **Required**\n\nThis should follow [semantic versioning](http://semver.org/). However it will not be enforced and you remain\nfree to follow another specification.\n\n#### description\n\nA short description of the package. **Required**\n\n#### license\n\nThe license of the package.\n\nThe recommended notation for the most common licenses is (alphabetical):\n\n* Apache-2.0\n* BSD-2-Clause\n* BSD-3-Clause\n* BSD-4-Clause\n* GPL-2.0\n* GPL-2.0+\n* GPL-3.0\n* GPL-3.0+\n* LGPL-2.1\n* LGPL-2.1+\n* LGPL-3.0\n* LGPL-3.0+\n* MIT\n\nOptional, but it is highly recommended to supply this.\nMore identifiers are listed at the [SPDX Open Source License Registry](https://www.spdx.org/licenses/).\n\n#### authors\n\nThe authors of the package. This is a list of authors and should contain at least one author.\n\nAuthors must be in the form `name <email>`.\n\n#### readme\n\nThe readme file of the package. **Required**\n\nThe file can be either `README.rst` or `README.md`.\nIf it\'s a markdown file you have to install the [pandoc](https://github.com/jgm/pandoc) utility so that it can be automatically\nconverted to a RestructuredText file.\n\nYou also need to have the [pypandoc](https://pypi.python.org/pypi/pypandoc/) package installed. If you install `poet` via\n`pip` you can use the `markdown-readme` extra to do so.\n\n```bash\npip install pypoet[markdown-readme]\n```\n\n#### homepage\n\nAn URL to the website of the project. **Optional**\n\n#### repository\n\nAn URL to the repository of the project. **Optional**\n\n#### documentation\n\nAn URL to the documentation of the project. **Optional**\n\n#### keywords\n\nA list of keywords (max: 5) that the package is related to. **Optional**\n\n#### python\n\nA list of Python versions for which the package is compatible. **Required**\n\n#### include and exclude\n\nA list of patterns that will be included in the final package.\n\nYou can explicitly specify to Poet that a set of globs should be ignored or included for the purposes of packaging.\nThe globs specified in the exclude field identify a set of files that are not included when a package is built.\n\nIf a VCS is being used for a package, the exclude field will be seeded with the VCS\xe2\x80\x99 ignore settings (`.gitignore` for git for example).\n\n```toml\n[package]\n# ...\ninclude = ["package/**/*.py", "package/**/.c"]\n```\n\n```toml\nexclude = ["package/excluded.py"]\n```\n\nIf you packages lies elsewhere (say in a `src` directory), you can tell `poet` to find them from there:\n\n```toml\ninclude = { from = \'src\', include = \'**/*\' }\n```\n\nSimilarly, you can tell that the `src` directory represent the `foo` package:\n\n```toml\ninclude = { from = \'src\', include = \'**/*\', as = \'foo\' }\n```\n\n### `dependencies` and `dev-dependencies`\n\nPoet is configured to look for dependencies on [PyPi](https://pypi.python.org/pypi) by default.\nOnly the name and a version string are required in this case.\n\n```toml\n[dependencies]\nrequests = "^2.13.0"\n```\n\n#### Caret requirement\n\n**Caret requirements** allow SemVer compatible updates to a specified version.\nAn update is allowed if the new version number does not modify the left-most non-zero digit in the major, minor, patch grouping.\nIn this case, if we ran `poet update requests`, poet would update us to version `2.14.0` if it was available,\nbut would not update us to `3.0.0`.\nIf instead we had specified the version string as `^0.1.13`, poet would update to `0.1.14` but not `0.2.0`.\n`0.0.x` is not considered compatible with any other version.\n\nHere are some more examples of caret requirements and the versions that would be allowed with them:\n\n```text\n^1.2.3 := >=1.2.3 <2.0.0\n^1.2 := >=1.2.0 <2.0.0\n^1 := >=1.0.0 <2.0.0\n^0.2.3 := >=0.2.3 <0.3.0\n^0.0.3 := >=0.0.3 <0.0.4\n^0.0 := >=0.0.0 <0.1.0\n^0 := >=0.0.0 <1.0.0\n```\n\n#### Tilde requirements\n\n**Tilde requirements** specify a minimal version with some ability to update.\nIf you specify a major, minor, and patch version or only a major and minor version, only patch-level changes are allowed.\nIf you only specify a major version, then minor- and patch-level changes are allowed.\n\n`~1.2.3` is an example of a tilde requirement.\n\n```text\n~1.2.3 := >=1.2.3 <1.3.0\n~1.2 := >=1.2.0 <1.3.0\n~1 := >=1.0.0 <2.0.0\n```\n\n#### Wildcard requirements\n\n**Wildcard requirements** allow for any version where the wildcard is positioned.\n\n`*`, `1.*` and `1.2.*` are examples of wildcard requirements.\n\n```text\n* := >=0.0.0\n1.* := >=1.0.0 <2.0.0\n1.2.* := >=1.2.0 <1.3.0\n```\n\n#### Inequality requirements\n\n**Inequality requirements** allow manually specifying a version range or an exact version to depend on.\n\nHere are some examples of inequality requirements:\n\n```text\n>= 1.2.0\n> 1\n< 2\n!= 1.2.3\n```\n\n#### Multiple requirements\n\nMultiple version requirements can also be separated with a comma, e.g. `>= 1.2, < 1.5`.\n\n#### `git` dependencies\n\nTo depend on a library located in a `git` repository,\nthe minimum information you need to specify is the location of the repository with the git key:\n\n```toml\n[dependencies]\nrequests = { git = "https://github.com/kennethreitz/requests.git" }\n```\n\nSince we haven\xe2\x80\x99t specified any other information, Poet assumes that we intend to use the latest commit on the `master` branch\nto build our project.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to specify something else.\nHere\'s an example of specifying that you want to use the latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrequests = { git = "https://github.com/kennethreitz/requests.git", branch = "next" }\n```\n\n#### Python restricted dependencies\n\nYou can also specify that a dependency should be installed only for specific Python versions:\n\n```toml\n[dependencies]\npathlib2 = { version = "^2.2", python = "~2.7" }\n```\n\n```toml\n[dependencies]\npathlib2 = { version = "^2.2", python = ["~2.7", "^3.2"] }\n```\n\n### `scripts`\n\nThis section describe the scripts or executable that will be installed when installing the package\n\n```toml\n[scripts]\npoet = \'poet:app.run\'\n```\n\nHere, we will have the `poet` script installed which will execute `app.run` in the `poet` package.\n\n### `features`\n\nPoet supports features to allow expression of:\n\n* optional dependencies, which enhance a package, but are not required; and\n* clusters of optional dependencies.\n\n```toml\n[package]\nname = "awesome"\n\n[features]\nmysql = ["mysqlclient"]\npgsql = ["psycopg2"]\n\n[dependencies]\n# These packages are mandatory and form the core of this package\xe2\x80\x99s distribution.\nmandatory = "^1.0"\n\n# A list of all of the optional dependencies, some of which are included in the\n# above `features`. They can be opted into by apps.\npsycopg2 = { version = "^2.7", optional = true }\nmysqlclient = { version = "^1.3", optional = true }\n```\n\nWhen installing packages, you can specify features by using the `-f|--features` option:\n\n```bash\npoet install --features "mysql pgsql"\npoet install -f mysql -f pgsql\n```\n\n### `entry_points`\n\nPoet supports arbitrary [setuptools entry points](http://setuptools.readthedocs.io/en/latest/setuptools.html). To match the example in the setuptools documentation, you would use the following:\n\n```toml\n[entry-points] # Optional super table\n\n[entry-points."blogtool.parsers"]\n".rst" = "some_module::SomeClass"\n```\n\n## Resources\n\n* [Official Website](https://github.com/sdispater/poet)\n* [Issue Tracker](https://github.com/sdispater/poet/issues)\n'