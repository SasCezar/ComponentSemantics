b"Packages\n========\n\n> Source code repository management made simple.\n\n[![Build Status](https://travis-ci.org/terramar-labs/packages.svg?branch=master)](https://travis-ci.org/terramar-labs/packages)\n\nPackages is a PHP 5.6 and 7.x application providing an interface and tools for maintaining a private [Composer](https://getcomposer.org) repository. Packages extends [Satis](https://github.com/composer/satis), adding a web frontend and useful management functionality like GitHub and GitLab integration.\n\nPackages automatically registers GitLab, GitHub, and Bitbucket project webhooks to keep Satis up to date every time you push code. Packages also features a web management interface that allows for easy management of exposed packages and configured source control repositories.\n\nPackages version 3 works on a plugin based system based around source code repositories. Packages can trigger, with each code push, many automated tasks like documentation generation or code  analysis. The simple event-based architecture allows easy creation of new automation tasks.\n\n[View the docs online](http://docs.terramarlabs.com/packages/3.2).\n\nInstallation\n------------\n\nRequirements:\n * PHP 5.6 or later\n * [Composer](https://getcomposer.org)\n * Some database platform supported by [Doctrine 2](http://doctrine-project.org) (sqlite works great!)\n * [Redis](https://redis.io/) \n\nDownload the [latest release](https://github.com/terramar-labs/packages/releases/latest), or clone the repository.\n\n```bash\ngit clone git@github.com:terramar-labs/packages.git\n```\n\n### Install dependencies\n\nSwitch to the project root directory and run `composer install`.\n\n```bash\ncd packages\ncomposer install\n```\n\n### Edit configuration\n\nCopy `config.yml.dist` to `config.yml` and edit as appropriate.\n\n```bash\ncp config.yml.dist config.yml\nvi config.yml\n```\n\n### Generate the database schema\n\nPackages uses Doctrine ORM to auto-generate the database schema for your configured platform.\n\n```bash\nbin/console orm:schema-tool:create\n```\n\nRunning the application\n-----------------------\n\nStart PHP's built-in webserver to run the Packages web application with minimal effort.\n\n```bash\n# Visit http://localhost:8080 to see the landing page.\nphp -S localhost:8080 -t web\n```\n\n### Start a Resque worker\n\nFor fully-automatic integration with GitHub, GitLab, and your Satis repository, you must always have at least one Resque worker running. \n\n```bash\nbin/console resque:worker:start\n```\n\n> For more information on Resque workers, check [the dedicated section](http://docs.terramarlabs.com/packages/3.2/managing-packages/resque).\n\n\nUsing the application\n---------------------\n\nRead the [usage and design documentation](http://docs.terramarlabs.com/packages/3.2/getting-started/usage) for an overview of Packages functionality.\n\n\n### Development/debug mode\n\nVisit `index_dev.php` in your browser to view the site with the `dev` environment configuration. In this env, views and the service container are not cached, so changes made are immediately visible.\n\n### Customizing\n\nCheck out the [Contributing Guide](CONTRIBUTING.md) for the recommended way to set up your development environment.\n\nSome tips:\n\n* Views are written using Twig and stored in `views/`.\n  * Views are cached in `prod` env; use `http://localhost:8080/index_dev.php` to develop.\n  * All pages inherit from `views/base.html.twig`, except for\n  * Public landing page views inherit from `views/Default/base.html.twig`.\n* [Composer Components](http://robloach.github.io/component-installer/) are used to manage front-end dependencies. The respective `web/images/`, `web/js/bootstrap.min.js`, and such are symlinks pointing to the real files installed by Composer in `vendor/`.\n* Check [the documentation](http://docs.terramarlabs.com/packages/3.2/managing-packages/customizing) for additional information.\n\n\nDocker support\n--------------\n\nPackages comes with an example `docker-compose.yml` that starts an nginx container and a Redis container, ready to get up and running quickly.\n\nVisit [the documentation](http://docs.terramarlabs.com/packages/3.2/getting-started/docker) to get started.\n\nTroubleshooting\n---------------\n\n1. `index_dev.php` contains a non-localhost block, comment it out when using Docker.\n2. Manage Resque and Satis using the `bin/console` command-line utility.\n  * **Build the Satis `packages.json` file** with the `satis:build` command.\n    ```bash\n    bin/console satis:build\n    ```\n  * **View queued Resque jobs in Redis** with the `resque:queue:list` command.\n    ```bash\n    bin/console resque:queue:list\n    ```\n  * **View active Resque workers** with the `resque:worker:list` command.\n    ```bash\n    bin/console resque:worker:list\n    ```\n  * **Start a Resque worker** with `resque:worker:start`.\n    ```bash\n    bin/console resque:worker:start\n    ```\n3. Check the Resque logs to see if Resque is working properly.\n  ```bash\n  tail -f logs/resque.log\n  ```\n  \n"