b'# kiss\n\nTiny and straightforward package manager for KISS written in POSIX `sh`.\n\n- Only 500~ lines of POSIX `sh` (*excluding blank lines and comments*).\n- Runtime dependency detection.\n- Incremental package installation.\n- Fast dependency solver.\n- File conflict detection.\n- Binary stripping.\n- `shellcheck` compliant.\n\n## Usage\n\n```sh\n\xe2\x9e\x9c kiss\n=> kiss [b|c|i|l|r|s|u] [pkg] [pkg] [pkg]\n=> build:     Build a package.\n=> checksum:  Generate checksums.\n=> install:   Install a package.\n=> list:      List installed packages.\n=> remove:    Remove a package.\n=> search:    Search for a package.\n=> update:    Check for updates.\n```\n\n## Package format\n\nSee: <https://getkiss.org/pages/package-system/>\n\n\n## Customization\n\n```sh\n# The package manager is controlled through environment variables.\n#\n# These can be set in your \'.profile\' or \'/etc/profile.d\' to have\n# the options apply all the time.\n#\n# These can also be set in the current shell to have them apply\n# only for the current session.\n#\n# NOTE: The values shown below are the defaults.\n\n# Managing repositories.\n#\n# This works exactly like \'$PATH\' (Colon separated).\n#\n# A list of repositories the package manager will use. You can\n# add your own repositories or remove the default ones.\nexport KISS_PATH=/var/db/kiss/repo/core:/var/db/kiss/repo/extra:/var/db/kiss/repo/xorg\n\n# Delete junk from packages.\n#\n# This works exactly like \'$PATH\' (Colon separated).\n#\n# A list of paths and files to remove from built packages.\n#\n# Set this to a blank value to keep all of the below files\n# and directories around. This can be customized to keep or\n# remove whatever you like.\nexport KISS_RM=usr/share/doc:usr/share/gtk-doc:usr/share/info:usr/share/polkit-1:usr/share/gettext:usr/share/locale:etc/bash_completion.d:usr/share/zsh\n\n# Force package installation or removal.\n#\n# This can be used to bypass the dependency checks on installation\n# and removal of packages.\n#\n# Set it to \'1\' to force.\nexport KISS_FORCE=0\n\n# Root directory.\n#\n# Where installed packages will go. You won\'t ever need\n# to touch this during normal usage.\n#\n# This can be used to have the package manager run in a "fake root".\nexport KISS_ROOT=/\n\n# Keep build, package and extraction cache directories for debugging\n# purposes.\n#\n# Set it to \'1\' to enable.\nexport KISS_DEBUG=0\n\n# Use a reproducible cache naming scheme.\n#\n# The package manager builds packages inside \'build-$PID/\' with \'$PID\'\n# being the package manager\'s process ID. This allows for multiple\n# builds to happen at once.\n#\n# You can override this and _know_ the location beforehand with the\n# below environment variable. \'KISS_PID=test\' will build the package\n# in \'build-test\'.\n#\n# Unset by default.\nexport KISS_PID=\n\n\n#\n# non-package-manager related options.\n# These are listed for clarity.\n#\n\n\n# Cache directory location.\nexport XDG_CACHE_HOME=$HOME/.cache/\n\n# Compiler.\nexport CC=gcc\nexport CXX=g++\n\n# AR.\nexport AR=ar\n\n# NM.\nexport NM=nm\n\n# RANLIB.\nexport RANLIB=ranlib\n\n# Compiler flags.\n# Good value: CFLAGS/CXXFLAGS=\'-march=native -pipe -O2\'\nexport CFLAGS=\nexport CXXFLAGS=\n\n# Linker flags.\nexport LDFLAGS=\n\n# Make flags.\n# Good value: MAKEFLAGS=\'-j 4\' (number of cores).\nexport MAKEFLAGS=\n\n# Cmake Generator.\n# Good value (Ninja):     export CMAKE_GENERATOR=Ninja\n# Good value (Makefiles): export CMAKE_GENERATOR=\nexport CMAKE_GENERATOR=\n```\n\n## Extending the package manager\n\nThe `contrib` directory contains a set of simple scripts to extend the package manager. These scripts can be installed through the `kiss-utils` package.\n\n- `kiss-chroot`: Enter a KISS `chroot`.\n- `kiss-depends-finder`: Find missing dependencies by parsing \'ldd\'.\n- `kiss-depends`: Display a package\'s dependencies.\n- `kiss-export`: Turn an installed package into a KISS tarball.\n- `kiss-manifest-tree`: Display all files as tree owned by a package.\n- `kiss-manifest`: Display all files owned by a package.\n- `kiss-maintainer`: Display the package maintainers.\n- `kiss-orphans`: List orphaned packages.\n- `kiss-owns`: Check which package owns a file.\n- `kiss-revdepends`: Display packages which depend on package.\n- `kiss-size`: Show the size on disk for an installed package.\n'