b'# Whalebrew\n\nWhalebrew creates aliases for Docker images so you can run them as if they were native commands. It\'s like Homebrew, but with Docker images.\n\nDocker works well for packaging up development environments, but there are lots of tools that aren\'t tied to a particular project: `awscli` for managing your AWS account, `ffmpeg` for converting video, `wget` for downloading files, and so on. Whalebrew makes those things work with Docker, too.\n\n    $ whalebrew install whalebrew/whalesay\n    Unable to find image \'whalebrew/whalesay\' locally\n    Using default tag: latest\n    latest: Pulling from whalebrew/whalesay\n    c60055a51d74: Pull complete\n    755da0cdb7d2: Pull complete\n    969d017f67e6: Pull complete\n    Digest: sha256:5f3a2782b400b2b23774709e0685d65b4493c6cbdb62fff6bbbd2a6bd393845b\n    Status: Downloaded newer image for whalebrew/whalesay:latest\n    \xf0\x9f\x90\xb3  Installed whalebrew/whalesay to /usr/local/bin/whalesay\n    $ whalesay cool\n     ______\n    < cool >\n     ------\n       \\\n        \\\n         \\\n                       ##        .\n                 ## ## ##       ==\n              ## ## ## ##      ===\n          /""""""""""""""""___/ ===\n     ~~~ {~~ ~~~~ ~~~ ~~~~ ~~ ~ /  ===- ~~~\n          \\______ o          __/\n           \\    \\        __/\n             \\____\\______/\n\n\nWhalebrew can run almost any CLI tool, but it isn\'t for everything (e.g. where commands must start instantly). It works particularly well for:\n\n* **Complex dependencies.** For example, a Python app that requires C libraries, specific package versions, and other CLI tools that you don\'t want to clutter up your machine with.\n* **Cross-platform portability.** Package managers tend to be very closely tied to the system they are running on. Whalebrew packages work on any modern version of macOS, Linux, and Windows (coming soon).\n\n## Install\n\nFirst, [install Docker](https://docs.docker.com/engine/installation/). The easiest way to do this on macOS is by installing [Docker for Mac](https://docs.docker.com/docker-for-mac/).\n\nNext, you can install whalebrew via Homebrew on macOS and Linux:\n\n    brew install whalebrew\n\nIf you\'re not using Homebrew, you can download a binary and use that:\n\n    curl -L "https://github.com/whalebrew/whalebrew/releases/download/0.2.3/whalebrew-$(uname -s)-$(uname -m)" -o /usr/local/bin/whalebrew; chmod +x /usr/local/bin/whalebrew\n\nWindows support is theoretically possible, but not implemented yet.\n\n## Usage\n\n### Install packages\n\n    $ whalebrew install whalebrew/wget\n\nThis will install the image `whalebrew/wget` as `/usr/local/bin/wget`.\n\nThe images in the `whalebrew` organization are a set of images that are known to work well with Whalebrew. You can also install any other images on Docker Hub too, but they may not work well:\n\n    $ whalebrew install bfirsh/ffmpeg\n\n### Find packages\n\n    $ whalebrew search\n    whalebrew/ack\n    whalebrew/awscli\n    whalebrew/docker-cloud\n    whalebrew/ffmpeg\n    whalebrew/gnupg\n    ...\n\n    $ whalebrew search wget\n    whalebrew/wget\n\n### List installed packages\n\n    $ whalebrew list\n    COMMAND     IMAGE\n    ffmpeg      bfirsh/ffmpeg\n    wget        whalebrew/wget\n    whalebrew   whalebrew/whalebrew\n    whalesay    whalebrew/whalesay\n\n### Uninstall packages\n\n    $ whalebrew uninstall wget\n\n### Upgrade packages\n\nTo upgrade a single package, just pull its image:\n\n    $ docker pull whalebrew/wget\n\n## Configuration\n\nWhalebrew is configured with environment variables, which you can either provide at runtime or put in your `~/.bashrc` file (or whatever shell you use).\n\n - `WHALEBREW_INSTALL_PATH`: The directory to install packages in. (default: `/usr/local/bin`)\n - `WHALEBREW_CONFIG_DIR`: The directory to store configuration in. (default: `~/.whalebrew`)\n\n## How it works\n\nWhalebrew is simple, and leans as much as possible on native Docker features:\n\n* Packages are installed as files in `/usr/local/bin` (or a directory that you configure) with a [shebang](https://en.wikipedia.org/wiki/Shebang_(Unix)) to make them executable. The content of the file is YAML that describes the options to pass to `docker run`, similar to a Compose service. For example:\n\n        #!/usr/bin/env whalebrew\n        image: whalebrew/whalesay\n\n* When a package is executed, Whalebrew will run the specified image with Docker, mount the current working directory in `/workdir`, and pass through all of the arguments.\n\n  To understand what it is doing, you can imagine it as a shell script that looks something like this:\n\n      docker run -it -v "$(pwd)":/workdir -w /workdir $IMAGE "$@"\n\n## Creating packages\n\nPackages are Docker images published on Docker Hub. The requirements to make them work are:\n\n* They must have the command to be run set as the entrypoint.\n* They must only work with files in `/workdir`.\n\nThat\'s it. So long as your image is set up to work that way, it\'ll work with Whalebrew.\n\n### Configuration\n\nThere are some labels you can use to configure how Whalebrew installs your image:\n\n* `io.whalebrew.name`: The name to give the command. Defaults to the name of the image.\n* `io.whalebrew.config.environment`: A list of environment variables to pass into the image from the current environment when the command is run. For example, putting this in your `Dockerfile` will pass through the values of `TERM` and `FOOBAR_NAME` in your shell when the command is run:\n\n        LABEL io.whalebrew.config.environment \'["TERM", "FOOBAR_NAME"]\'\n\n* `io.whalebrew.config.volumes`: A list of volumes to mount when the command is run. For example, putting this in your image\'s `Dockerfile` will mount `~/.docker` as `/root/.docker` in read-only mode:\n\n        LABEL io.whalebrew.config.volumes \'["~/.docker:/root/.docker:ro"]\'\n\n* `io.whalebrew.config.ports`: A list of host port to container port mappings to create when the command is run. For example, putting this in your image\'s `Dockerfile` will map container port 8100 to host port 8100:\n\n        LABEL io.whalebrew.config.ports \'["8100:8100"]\'\n\n* `io.whalebrew.config.networks`: A list of networks to connect on the container.\n\n        LABEL io.whalebrew.config.networks \'["host"]\'\n\n* `io.whalebrew.config.working_dir`: The path the working directory should be bound to in the container. For example putting this in your image\'s `Dockerfile` will ensure the working directory is available in /working_directory in the container\n\n        LABEL io.whalebrew.config.working_dir \'/working_directory\'\n\n* `io.whalebrew.config.keep_container_user`: Set this variable to true to keep the default container USER. When set to true, whalebrew will not run the command as the current user using the docker `-u` flag\n\n        LABEL io.whalebrew.config.keep_container_user \'true\'\n\n* `io.whalebrew.config.missing_volumes`: The behaviour to handle missing files or volumes into the container.\n\n        LABEL io.whalebrew.config.skip_missing_volumes \'skip\'\n\n        Possible values are\n        - \'error\' to raise an error when trying to mount a non existing volume *this is the default behaviour*\n        - \'skip\' to prevent binding the volume\n        - \'mount\' to mount the volume anyway. This will result in docker [creating a host directory](https://docs.docker.com/engine/reference/commandline/run/#mount-volume--v---read-only)\n\n* `io.whalebrew.required_version`: Specifies the minimum whalebrew version to required to run the package. Examples: `<1.0.0`, `>0.1.0`, `>0.1.0 <1.0.0`\n\n#### Using user environment variables\n\nThe labels `io.whalebrew.config.working_dir`, `io.whalebrew.config.volumes` and `io.whalebrew.config.environment` are expanded with user environment variables when the container is launched.\n\nFor example, if your image has this line in your `Dockerfile`:\n\n        LABEL io.whalebrew.config.working_dir \'$PWD\'\n\nAt runtime, it will bind your working directory into the container at the same path and set it as the working directory.\n\n#### Using hooks\n\nIn some cases, you might want to execute custom actions, like checking the integrity of the image or adding the whalebrew scripts to your whalebrew repository.\nTo do so, whalebrew will call git-like hooks when handling installation/uninstallation of a package.\nThose hooks must be executable files located in `${WHALEBREW_CONFIG_DIR}/hooks`.\n\nWhalebrew supports the following hooks:\n\n|command & arguments|description|\n|-|-|\n|`pre-install ${DOCKER_IMAGE} ${EXECUTABLE_NAME}`|This hook is called before installing a package. Failure of this hook will fail the installation process|\n|`post-install ${EXECUTABLE_NAME}`|This hook is called after a package is installed. Failure of this hook will fail the installation process, but the package is not uninstalled|\n|`pre-uninstall ${EXECUTABLE_NAME}`|This hook is called before uninstalling a package. Failure of this hook will fail the uninstallation process|\n|`post-uninstall ${EXECUTABLE_NAME}`|This hook is called after a package is uninstalled. Failure of this hook will fail the uninstallation process, but the package is not uninstalled|\n\n### Whalebrew images\n\nWe maintain a set of packages which are known to follow these requirements under the `whalebrew` organization on [GitHub](https://github.com/whalebrew) and [Docker Hub](https://hub.docker.com/u/whalebrew/). If you want to add a package to this, open a pull request against [whalebrew-packages](https://github.com/whalebrew/whalebrew-packages).\n\n## Thanks\n\n* Justin Cormack for [the original idea](https://github.com/justincormack/dockercommand-cli) and generally just being very clever.\n'