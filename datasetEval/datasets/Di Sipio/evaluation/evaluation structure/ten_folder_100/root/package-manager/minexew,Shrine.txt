b'Shrine\n======\n\n![Screenshot](http://imgur.com/1yYsUHI.png)\n\nShrine is a TempleOS distribution that aims to be more modern & approachable.\n\nShrine aims to improve upon TempleOS in several aspects:\n- Approachability: Shrine ships with Lambda Shell, a more traditional Unix-like command interpreter\n- Connectivity: TCP/IP stack! Internet access!\n- Software access: Shrine includes a package downloader\n- Versatility: unlike stock TempleOS, Shrine requires only 64MB RAM, making it feasible for cloud micro-instances and similar setups (note: this is planned, but currently not true)\n\nSoftware included in Shrine:\n- Mfa (minimalist file access)\n- Lsh (Lambda Shell)\n- Pkg (package downloader)\n- Wget\n\nSetting up with networking\n==========================\n- Native Stack (highly experimental)\n  - configure your VM networking: *Adapter Type: PCnet-PCI II* (QEMU: `-netdev user,id=u1 -device pcnet,netdev=u1`)\n  - *Attached to: NAT* seems to be the most reliable setting, Bridged Mode also works somewhat\n  - On boot, Shrine will automatically attempt to acquire an IP address. If you don\'t get a message about "Configuring network", the adapter was not detected.\n\n- To enable tunelled networking through Snail:\n  - configure your VM: COM3 - TCP, server, 7777 (in VirtualBox, server = UNCHECK *Connect to existing*)\n  - (make sure to *disable* networking for the VM, otherwise Native Stack will get precedence)\n  - start the VM\n  - run ./snail.py\n  - you will now be able to access the Internet, try for example `pkg-list`\n\n- To enable file access through Mfa, configure the VM as follows:\n  - configure your VM: COM1 - TCP, server, 7770\n  - start `/Apps/Mfa.HC.Z` in the VM\n  - on the host, use ./mfa.py to transfer commands and files\n  - for example: `./mfa.py list /Apps/Mfa.HC.Z Mfa.HC`\n\nBoth of these can be used simultaneously.\n\nPackage management functions\n============================\n\nNote: In Lsh, use `pkg-install xyz` in place of `PkgInstall("xyz")` etc.\n\n- `PkgList;`\n\n  List all packages available in the repository.\n\n- `PkgInstall(U8* package_name);`\n\n  Download & install a specific package.\n\n- `PkgInstallFromFile(U8* manifest_path);`\n\n  Manually install a downloaded package. Manifest must reference an existing .ISO.C path.\n\n- `PkgMakeFromDir(U8* manifest_path, U8* src_dir);`\n\n  Build a package from directory contents. For an example manifest, check [here](Shrine/Packages/Lsh/manifest). Manifest must reference a valid .ISO.C path which will be used as **output**!\n\n- `PkgMakeFromFile(U8* manifest_path, U8* file_path);`\n\n  Build a package from a single file. See above for details.\n\n[See here](PACKAGES.md) for more information about how packages work.\n\nBuilding from source\n====================\n\n[See here](BUILDING.md)\n'