b'# cmake-conan\n\n[![Build status](https://ci.appveyor.com/api/projects/status/0y2994lfwcpw9232/branch/master?svg=true)](https://ci.appveyor.com/project/ConanCIintegration/cmake-conan/branch/master)\n\n[![Build Status](https://travis-ci.org/conan-io/cmake-conan.svg?branch=master)](https://travis-ci.org/conan-io/cmake-conan)\n\nCMake wrapper for the Conan C and C++ package manager.\n\n\nThis cmake module allows to launch ``conan install`` from cmake.\n\nThe branches in this repo are:\n- **develop**: PR are merged to this branch. Latest state of development\n- **master**: Latest release\n- **tagged releases**: https://github.com/conan-io/cmake-conan/releases. \n\nYou probably want to use a tagged release to ensure controlled upgrades.\n\nYou can just clone or grab the *conan.cmake* file and put in in your project.\nOr it can be used in this way. Note the ``v0.14`` tag in the URL, change it to point to your desired release:\n\n\n```cmake\n\ncmake_minimum_required(VERSION 2.8)\nproject(myproject CXX)\n\n# Download automatically, you can also just copy the conan.cmake file\nif(NOT EXISTS "${CMAKE_BINARY_DIR}/conan.cmake")\n   message(STATUS "Downloading conan.cmake from https://github.com/conan-io/cmake-conan")\n   file(DOWNLOAD "https://github.com/conan-io/cmake-conan/raw/v0.14/conan.cmake"\n                 "${CMAKE_BINARY_DIR}/conan.cmake")\nendif()\n\ninclude(${CMAKE_BINARY_DIR}/conan.cmake)\n\nconan_cmake_run(REQUIRES Hello/0.1@memsharded/testing\n                BASIC_SETUP \n                BUILD missing)\n\nadd_executable(main main.cpp)\ntarget_link_libraries(main ${CONAN_LIBS})\n```\n\n## conan_cmake_run() options\n\n\n### REQUIRES, OPTIONS\n```cmake\nconan_cmake_run(REQUIRES Hello/0.1@memsharded/testing\n                         Bye/2.1@otheruser/testing\n                OPTIONS Pkg:shared=True\n                        OtherPkg:option=value\n                )\n```\n\nDefine requirements and their options. These values are written to a temporary `conanfile.py`. If you need more advanced functionality, like conditional requirements, you can define your own `conanfile.txt` or `conanfile.py` and provide\nit with the ``CONANFILE`` argument\n\n### CMAKE_TARGETS\n\nIf you want to use targets, you could do:\n\n```cmake\ninclude(conan.cmake)\nconan_cmake_run(REQUIRES Hello/0.1@memsharded/testing\n                BASIC_SETUP CMAKE_TARGETS\n                BUILD missing)\n\nadd_executable(main main.cpp)\ntarget_link_libraries(main CONAN_PKG::Hello)\n```\n\nThis will do a ``conan_basic_setup(TARGETS)`` for modern CMake targets definition.\n\n### CONANFILE\n\nIf you want to use your own ``conanfile.txt`` or ``conanfile.py`` instead of generating a temporary one, you could do:\n\n```cmake\ninclude(conan.cmake)\nconan_cmake_run(CONANFILE conanfile.txt  # or relative build/conanfile.txt\n                BASIC_SETUP CMAKE_TARGETS\n                BUILD missing)\n```\n\nThe resolution of the path will be relative to the root ``CMakeLists.txt`` file.\n\n\n### KEEP_RPATHS\n\n```cmake\ninclude(conan.cmake)\nconan_cmake_run(CONANFILE conanfile.txt\n                BASIC_SETUP KEEP_RPATHS)\n```\n\n### NO_OUTPUT_DIRS\n\n```cmake\ninclude(conan.cmake)\nconan_cmake_run(CONANFILE conanfile.txt\n                BASIC_SETUP NO_OUTPUT_DIRS)\n```\n\nPass to ``conan_basic_setup(NO_OUTPUT_DIRS)`` so *conanbuildinfo.cmake* does not change the output directories (lib, bin).\n\n### ARCH\n\n```cmake\ninclude(conan.cmake)\nconan_cmake_run(ARCH armv7)\n```\n\nUse it to override the architecture detection and force to call conan with the provided one. The architecture should\nexist in *settings.yml*.\n\n\n### BUILD_TYPE\n\n```cmake\ninclude(conan.cmake)\nconan_cmake_run(BUILD_TYPE "None")\n```\n\nUse it to override the build_type detection and force to call conan with the provided one. The build type should\nexist in *settings.yml*.\n\n### PROFILE\n```cmake\ninclude(conan.cmake)\nconan_cmake_run(PROFILE default)\n```\n\nUse it to use the "default" (or your own profile) conan profile rather than inferring settings from CMake.\nWhen it is defined, the CMake automatically detected settings are not used at all,\nand are overridden by the values from the profile.\n\n### PROFILE_AUTO\n```cmake\ninclude(conan.cmake)\nconan_cmake_run(PROFILE default\n                PROFILE_AUTO build_type)\n```\n\nUse the CMake automatically detected value, instead of the profile one. The above\nmeans use the profile named "default", but override its content with the ``build_type``\nautomatically detected by CMake.\n\nThe precedence for settings definition is:\n\n```\nCMake detected < PROFILE < PROFILE_AUTO < Explicit ``conan_cmake_run()`` args\n```\n\nThe ``ALL`` value is used to use all detected settings from CMake, instead of the ones\ndefined in the profile:\n\n```cmake\ninclude(conan.cmake)\nconan_cmake_run(PROFILE default\n                PROFILE_AUTO ALL)\n```\n\nThis is still useful, as the profile can have many other things defined (options, build_requires, etc).\n\n\n### CMAKE_BUILD_TYPE\n\nTo use the [cmake_multi](http://docs.conan.io/en/latest/integrations/cmake.html#cmake-multi-configuration-environments) generator you just need to make sure ``CMAKE_BUILD_TYPE`` is empty and use a CMake generator that supports multi-configuration.\n\nIf the ``BUILD_TYPE`` is explictly passed to ``conan_cmake_run()``, then single configuration ``cmake`` generator will be used.\n\n\n### SETTINGS\n```cmake\ninclude(conan.cmake)\nconan_cmake_run(...\n                SETTINGS arch=armv6\n                SETTINGS cppstd=14)\n```\n\n### ENV\n```cmake\ninclude(conan.cmake)\nconan_cmake_run(...\n                ENV env_var=value\n                ENV Pkg:env_var2=value2)\n```\n\nDefine command line environment variables. Even if with CMake it is also possible to\ndirectly define environment variables, with this syntax you can define environment\nvariables per-package, as the above is equivalent to:\n\n```bash\n$ conan install .... -e env_var=value -e Pkg:env_var2=value\n```\n\nIf environment variables were defined in a given profile, command line arguments\nhave higher precedence, so these values would be used instead of the profiles ones.\n\n### INSTALL_FOLDER\n\nProvide the ``conan install --install-folder=[folder]`` argument:\n\n```cmake\ninclude(conan.cmake)\nconan_cmake_run(...\n                INSTALL_FOLDER myfolder\n                )\n```\n\n### GENERATORS\n\nAdd additional [generators](https://docs.conan.io/en/latest/reference/generators.html?highlight=generator). It may useful to add the [virtualrunenv](https://docs.conan.io/en/latest/mastering/virtualenv.html#virtualrunenv-generator)-generator:\n\n```cmake\ninclude(conan.cmake)\nconan_cmake_run(...\n                GENERATORS virtualrunenv)\n```\n## Other macros and functions\n\n### conan_check()\n\nChecks conan availability in PATH.\nArguments ``REQUIRED`` and ``VERSION`` are optional.\n\nExample usage:\n```\nconan_check(VERSION 1.0.0 REQUIRED)\n```\n\n### conan_add_remote()\n\nAdds a remote.\nArguments ``URL`` and ``NAME`` are required, ``INDEX`` is optional.\n\nExample usage:\n```\nconan_add_remote(NAME bincrafters INDEX 1\n            URL https://api.bintray.com/conan/bincrafters/public-conan)\n```\n    \n\n## Creating packages\n\nThis cmake wrapper launches conan, installing dependencies, and injecting a ``conan_basic_setup()`` call. So it is for end-users only, but not necessary at all for creating packages, because conan already downloaded and installed dependencies the moment that a package needs to be built. If you are using the same CMakeLists.txt for both consuming and creating packages, consider doing something like:\n\n\n```cmake\nif(CONAN_EXPORTED) # in conan local cache\n    # standard conan installation, deps will be defined in conanfile.py\n    # and not necessary to call conan again, conan is already running\n    include(${CMAKE_BINARY_DIR}/conanbuildinfo.cmake)\n    conan_basic_setup()\nelse() # in user space\n    include(conan.cmake)\n    # Make sure to use conanfile.py to define dependencies, to stay consistent\n    conan_cmake_run(CONANFILE conanfile.py\n                    BASIC_SETUP)\nendif()\n```\n\n\nPlease check the source code for other options and arguments.\n\n## Development, contributors\n\nThere are some tests, you can run in python, with nosetests, for example:\n\n```bash\n$ nosetests . --nocapture\n```\n'