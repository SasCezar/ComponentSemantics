b'<p align="center">\n  <a href="https://yarnpkg.com/">\n    <img alt="Yarn" src="https://github.com/yarnpkg/assets/blob/master/yarn-kitten-full.png?raw=true" width="546">\n  </a>\n</p>\n\n<p align="center">\n  Fast, reliable, and secure dependency management.\n</p>\n\n<p align="center">\n  <a href="https://github.com/yarnpkg/berry"><img alt="GitHub Actions status" src="https://github.com/yarnpkg/berry/workflows/Integration/badge.svg"></a>\n  <a href="https://discord.gg/yarnpkg"><img alt="Discord Chat" src="https://img.shields.io/discord/226791405589233664.svg"></a>\n  <img alt="Stable Release" src="https://img.shields.io/github/release/yarnpkg/yarn.svg?style=flat">\n  <img alt="Prerelease" src="https://img.shields.io/github/release-pre/yarnpkg/yarn.svg?style=flat">\n</p>\n\n---\n\nYarn is a modern package manager split into various packages. Its novel architecture allows to do things currently impossible with existing solutions:\n\n- Yarn supports plugins; adding a plugin is as simple as adding it into your repository\n- Yarn supports Node by default but isn\'t limited to it - plugins can add support for other languages\n- Yarn supports [workspaces](https://next.yarnpkg.com/features/workspaces) natively, and its CLI takes advantage of that\n- Yarn uses a portable shell to execute package scripts, guaranteeing they work the same way on Windows and Linux\n- Yarn is first and foremost a Node API that can be used programmatically (via [@yarnpkg/core](packages/yarnpkg-core))\n- Yarn is written in TypeScript, and fully typechecked\n\n## Install\n\nConsult the [dedicated page](https://next.yarnpkg.com/getting-started/install) for more details.\n\n## Documentation\n\nThe documentation is being reworked to contain an updated content and a refreshed design, and the most up-to-date version can be found on the repository GitHub pages: [next.yarnpkg.com](https://next.yarnpkg.com/)\n\n## Current status\n\nOn top of our classic integration tests, we also run Yarn every day against the latest versions of the toolchains used by our community - just in case, really. Everything should be green!\n\n| Toolchain | E2E Tests | Tooling | E2E Tests |\n| --- | --- | --- | --- |\n| [Create-React-App](https://github.com/yarnpkg/berry/blob/master/.github/workflows/e2e-cra-workflow.yml) | [![](https://github.com/yarnpkg/berry/workflows/E2E%20CRA/badge.svg)]() | [ESLint](https://github.com/yarnpkg/berry/blob/master/.github/workflows/e2e-eslint-workflow.yml) | [![](https://github.com/yarnpkg/berry/workflows/E2E%20ESLint/badge.svg)]() |\n| [Gatsby](https://github.com/yarnpkg/berry/blob/master/.github/workflows/e2e-gatsby-workflow.yml) | [![](https://github.com/yarnpkg/berry/workflows/E2E%20Gatsby/badge.svg)]() | [Husky](https://github.com/yarnpkg/berry/blob/master/.github/workflows/e2e-husky-workflow.yml) | [![](https://github.com/yarnpkg/berry/workflows/E2E%20Husky/badge.svg)]() |\n| [Next.js](https://github.com/yarnpkg/berry/blob/master/.github/workflows/e2e-next-workflow.yml) | [![](https://github.com/yarnpkg/berry/workflows/E2E%20Next/badge.svg)]() | [Prettier](https://github.com/yarnpkg/berry/blob/master/.github/workflows/e2e-prettier-workflow.yml) | [![](https://github.com/yarnpkg/berry/workflows/E2E%20Prettier/badge.svg)]() |\n| | | [Jest](https://github.com/yarnpkg/berry/blob/master/.github/workflows/e2e-jest-workflow.yml) | [![](https://github.com/yarnpkg/berry/workflows/E2E%20Jest/badge.svg)]() |\n| | | [Mocha](https://github.com/yarnpkg/berry/blob/master/.github/workflows/e2e-mocha-workflow.yml) | [![](https://github.com/yarnpkg/berry/workflows/E2E%20Mocha/badge.svg)]() |\n| | | [TypeScript](https://github.com/yarnpkg/berry/blob/master/.github/workflows/e2e-typescript-workflow.yml) | [![](https://github.com/yarnpkg/berry/workflows/E2E%20TypeScript/badge.svg)]() |\n| | | [Webpack](https://github.com/yarnpkg/berry/blob/master/.github/workflows/e2e-webpack-workflow.yml) | [![](https://github.com/yarnpkg/berry/workflows/E2E%20Webpack/badge.svg)]() |\n\n## Build your own bundle\n\nClone this repository, then run the following commands:\n\n```bash\nyarn build:cli\n```\n\n**How it works**\n\nAfter building the CLI your global `yarn` will immediately start to reflect your local changes. This is because Yarn will pick up the `yarnPath` settings in this repository\'s `.yarnrc.yml`, which is configured to use the newly built CLI if available.\n\n**Works out of the box!**\n\nNote that no other command is needed! Given that our dependencies are checked-in within the repository (within the [`.yarn/cache`](.yarn/cache) directory), you don\'t even need to run `yarn install`. Everything just works right after cloning the project, and is guaranteed to continue to work ten years from now \xf0\x9f\x99\x82\n\n## Yarn plugins\n\n### Default plugins\n\nThose plugins typically come bundled with Yarn. You don\'t need to do anything special to use them.\n\n- [\xe2\x98\x85 plugin-constraints](packages/plugin-constraints) adds support for `yarn constraints check` and `yarn constraints fix`.\n- [\xe2\x98\x85 plugin-dlx](packages/plugin-dlx) adds support for the [`yarn dlx`](https://next.yarnpkg.com/cli/dlx) command.\n- [\xe2\x98\x85 plugin-essentials](packages/plugin-essentials) adds various commands deemed necessary for a package manager (add, remove, ...).\n- [\xe2\x98\x85 plugin-file](packages/plugin-file) adds support for using the `file:` protocol within your dependencies.\n- [\xe2\x98\x85 plugin-github](packages/plugin-github) adds support for using Github references as dependencies. [This plugin doesn\'t use git.](https://stackoverflow.com/a/13636954/880703)\n- [\xe2\x98\x85 plugin-http](packages/plugin-http) adds support for using straight URL references as dependencies (tgz archives only).\n- [\xe2\x98\x85 plugin-init](packages/plugin-init) adds support for the [`yarn init`](https://next.yarnpkg.com/cli/init) command.\n- [\xe2\x98\x85 plugin-link](packages/plugin-link) adds support for using `link:` and `portal:` references as dependencies.\n- [\xe2\x98\x85 plugin-npm](packages/plugin-npm) adds support for using [semver ranges](https://semver.org) as dependencies, resolving them to an NPM-like registry.\n- [\xe2\x98\x85 plugin-npm-cli](packages/plugin-npm-cli) adds support for the NPM-specific commands ([`yarn npm login`](https://next.yarnpkg.com/cli/npm/login), [`yarn npm publish`](https://next.yarnpkg.com/cli/npm/publish), ...).\n- [\xe2\x98\x85 plugin-pack](packages/plugin-pack) adds support for the [`yarn pack`](https://next.yarnpkg.com/cli/pack) command.\n- [\xe2\x98\x85 plugin-pnp](packages/plugin-pnp) adds support for installing Javascript dependencies through the [Plug\'n\'Play](https://next.yarnpkg.com/features/pnp) specification.\n\n### Contrib plugins\n\nAlthough developed on the same repository as Yarn itself, those plugins are optional and need to be explicitly installed through `yarn plugin import @yarnpkg/<plugin-name>`.\n\n- [\xe2\x98\x86 plugin-exec](packages/plugin-exec) adds support for using the `exec:` protocol within your dependencies.\n- [\xe2\x98\x86 plugin-stage](packages/plugin-pack) adds support for the [`yarn stage`](https://next.yarnpkg.com/cli/stage) command.\n- [\xe2\x98\x86 plugin-typescript](packages/plugin-typescript) improves the user experience when working with TypeScript.\n- [\xe2\x98\x86 plugin-workspace-tools](packages/plugin-workspace-tools) adds support for the [`yarn workspaces foreach`](https://next.yarnpkg.com/cli/workspaces/foreach) command.\n\n### Third-party plugins\n\nPlugins can be developed by third-party entities. To use them within your applications, just specify the full plugin URL when calling [`yarn plugin import`](https://next.yarnpkg.com/cli/plugin/import). Note that plugins aren\'t fetched from the npm registry at this time - they must be distributed as a single JavaScript file.\n\n### Creating a new plugin\n\nTo create your own plugin, please refer to the [documentation](https://next.yarnpkg.com/features/plugins).\n\n## Generic packages\n\nThe following packages are generic and can be used in a variety of purposes (including to implement other package managers, but not only):\n\n- [@yarnpkg/core](packages/yarnpkg-core) allows any application to manipulate a project programmatically.\n- [@yarnpkg/fslib](packages/yarnpkg-fslib) is a set of tools to abstract the filesystem through type-safe primitives.\n- [@yarnpkg/json-proxy](packages/yarnpkg-json-proxy) allows to temporarily convert any POD object to an immutable object.\n- [@yarnpkg/libzip](packages/yarnpkg-libzip) contains zlib+libzip bindings compiled to WebAssembly.\n- [@yarnpkg/parsers](packages/yarnpkg-parsers) can be used to parse the language used by [@yarnpkg/shell](packages/yarnpkg-shell).\n- [@yarnpkg/pnp](packages/yarnpkg-pnp) can be used to generate [Plug\'n\'Play](https://next.yarnpkg.com/features/pnp)-compatible hooks.\n- [@yarnpkg/pnpify](packages/yarnpkg-pnpify) is a CLI tool to transparently add PnP support to various tools.\n- [@yarnpkg/shell](packages/yarnpkg-shell) is a portable bash-like shell interpreter.\n\n## Yarn packages\n\nThe following packages are meant to be used by Yarn itself, and probably won\'t be useful to other applications:\n\n- [@yarnpkg/builder](packages/yarnpkg-builder) contains a CLI tool to package berry and its plugins.\n- [@yarnpkg/cli](packages/yarnpkg-cli) is a CLI entry point built on top of [@yarnpkg/core](packages/yarnpkg-core).\n'