b'|Logo|\n\nConan\n=====\n\nDecentralized, open-source (MIT), C/C++ package manager.\n\n- Homepage: https://conan.io/\n- Github: https://github.com/conan-io/conan\n- Docs: https://docs.conan.io/en/latest/\n- Slack: https://cpplang.now.sh/ (#conan channel)\n- Twitter: https://twitter.com/conan_io\n\n\nConan is a package manager for C and C++ developers:\n\n- It is fully decentralized. Users can host their packages in their servers, privately. Integrates with Artifactory and Bintray.\n- Portable. Works across all platforms, including Linux, OSX, Windows (with native and first-class support, WSL, MinGW),\n  Solaris, FreeBSD, embedded and cross-compiling, docker, WSL\n- Manage binaries. It can create, upload and download binaries for any configuration and platform,\n  even cross-compiling, saving lots of time in development and continuous integration. The binary compatibility\n  can be configured and customized. Manage all your artifacts in the same way on all platforms.\n- Integrates with any build system, including any proprietary and custom one. Provides tested support for major build systems\n  (CMake, MSBuild, Makefiles, Meson, etc).\n- Extensible: Its python based recipes, together with extensions points allows for great power and flexibility.\n- Large and active community, especially in Github (https://github.com/conan-io/conan) and Slack (https://cpplang.now.sh/ #conan channel).\n  This community also creates and maintains packages in Conan-center and Bincrafters repositories in Bintray.\n- Stable. Used in production by many companies, since 1.0 there is a commitment not to break package recipes and documented behavior. \n\n\n\n+------------------------+-------------------------+-------------------------+-------------------------+\n| **master**             | **develop**             |  **Coverage**           |    **Code Climate**     |\n+========================+=========================+=========================+=========================+\n| |Build Status Master|  | |Build Status Develop|  |  |Develop coverage|     |   |Develop climate|     |\n+------------------------+-------------------------+-------------------------+-------------------------+\n\n\nSetup\n=====\n\nPlease read https://docs.conan.io/en/latest/installation.html\n\nFrom binaries\n-------------\n\nWe have installers for `most platforms here <http://conan.io>`__ but you\ncan run **conan** from sources if you want.\n\nFrom pip\n--------\n\nConan is compatible with Python 2 and Python 3.\n\n- Install pip following `pip docs`_.\n- Install conan:\n\n    .. code-block:: bash\n\n        $ pip install conan\n\nYou can also use `test.pypi.org <https://test.pypi.org/project/conan/#history>`_ repository to install development (non-stable) Conan versions:\n\n\n    .. code-block:: bash\n\n        $ pip install --index-url https://test.pypi.org/simple/ conan\n\n\nFrom Homebrew (OSx)\n-------------------\n\n- Install Homebrew following `brew homepage`_.\n\n  .. code-block:: bash\n\n      $ brew update\n      $ brew install conan\n\nFrom source\n-----------\n\nYou can run **conan** client and server in Windows, MacOS, and Linux.\n\n- **Install pip following** `pip docs`_.\n\n- **Clone conan repository:**\n\n  .. code-block:: bash\n\n      $ git clone https://github.com/conan-io/conan.git\n\n- **Install in editable mode**\n\n    .. code-block:: bash\n\n        $ cd conan && sudo pip install -e .\n\n  If you are in Windows, using ``sudo`` is not required.\n\n- **You are ready, try to run conan:**\n\n  .. code-block::\n\n    $ conan --help\n\n    Consumer commands\n      install    Installs the requirements specified in a conanfile (.py or .txt).\n      config     Manages configuration. Edits the conan.conf or installs config files.\n      get        Gets a file or list a directory of a given reference or package.\n      info       Gets information about the dependency graph of a recipe.\n      search     Searches package recipes and binaries in the local cache or in a remote.\n    Creator commands\n      new        Creates a new package recipe template with a \'conanfile.py\'.\n      create     Builds a binary package for a recipe (conanfile.py) located in the current dir.\n      upload     Uploads a recipe and binary packages to a remote.\n      export     Copies the recipe (conanfile.py & associated files) to your local cache.\n      export-pkg Exports a recipe & creates a package with given files calling \'package\'.\n      test       Test a package, consuming it with a conanfile recipe with a test() method.\n    Package development commands\n      source     Calls your local conanfile.py \'source()\' method.\n      build      Calls your local conanfile.py \'build()\' method.\n      package    Calls your local conanfile.py \'package()\' method.\n    Misc commands\n      profile    Lists profiles in the \'.conan/profiles\' folder, or shows profile details.\n      remote     Manages the remote list and the package recipes associated with a remote.\n      user       Authenticates against a remote with user/pass, caching the auth token.\n      imports    Calls your local conanfile.py or conanfile.txt \'imports\' method.\n      copy       Copies conan recipes and packages to another user/channel.\n      remove     Removes packages or binaries matching pattern from local cache or remote.\n      alias      Creates and exports an \'alias recipe\'.\n      download   Downloads recipe and binaries to the local cache, without using settings.\n\n    Conan commands. Type "conan <command> -h" for help\n\nContributing to the project\n===========================\n\nFeedback and contribution are always welcome in this project.\nPlease read our `contributing guide <https://github.com/conan-io/conan/blob/develop/.github/CONTRIBUTING.md>`_.\n\nRunning the tests\n=================\n\nUsing tox\n---------\n\n.. code-block:: bash\n\n    $ tox\n\nIt will install the needed requirements and launch `nose` skipping some heavy and slow tests.\nIf you want to run the full test suite:\n\n.. code-block:: bash\n\n    $ tox -e full\n\nWithout tox\n-----------\n\n**Install python requirements**\n\n.. code-block:: bash\n\n    $ pip install -r conans/requirements.txt\n    $ pip install -r conans/requirements_server.txt\n    $ pip install -r conans/requirements_dev.txt\n\n\nOnly in OSX:\n\n.. code-block:: bash\n\n    $ pip install -r conans/requirements_osx.txt # You can omit this one if not running OSX\n\n\nIf you are not Windows and you are not using a python virtual environment, you will need to run these\ncommands using `sudo`.\n\nBefore you can run the tests, you need to set a few environment variables first.\n\n.. code-block:: bash\n\n    $ export PYTHONPATH=$PYTHONPATH:$(pwd)\n\nOn Windows it would be (while being in the conan root directory):\n\n.. code-block:: bash\n\n    $ set PYTHONPATH=.\n\nEnsure that your ``cmake`` has version 2.8 or later. You can see the\nversion with the following command:\n\n.. code-block:: bash\n\n    $ cmake --version\n\nThe appropriate values of ``CONAN_COMPILER`` and ``CONAN_COMPILER_VERSION`` depend on your\noperating system and your requirements.\n\nThese should work for the GCC from ``build-essential`` on Ubuntu 14.04:\n\n.. code-block:: bash\n\n    $ export CONAN_COMPILER=gcc\n    $ export CONAN_COMPILER_VERSION=4.8\n\nThese should work for OS X:\n\n.. code-block:: bash\n\n    $ export CONAN_COMPILER=clang\n    $ export CONAN_COMPILER_VERSION=3.5\n\nFinally, some tests use conan to package Go-lang\nlibraries, so you might **need to install go-lang** in your computer and\nadd it to the path.\n\nYou can run the actual tests like this:\n\n.. code-block:: bash\n\n    $ nosetests .\n\n\nThere are a couple of test attributes defined, as ``slow`` that you can use\nto filter the tests, and do not execute them:\n\n.. code-block:: bash\n\n    $ nosetests . -a !slow\n\nA few minutes later it should print ``OK``:\n\n.. code-block:: bash\n\n    ............................................................................................\n    ----------------------------------------------------------------------\n    Ran 146 tests in 50.993s\n\n    OK\n\nTo run specific tests, you can specify the test name too, something like:\n\n.. code-block:: bash\n\n    $ nosetests conans.test.command.config_install_test:ConfigInstallTest.install_file_test --nocapture\n\nThe ``--nocapture`` argument can be useful to see some output that otherwise is captured by nosetests.\n\nLicense\n-------\n\n`MIT LICENSE <./LICENSE.md>`__\n\n.. |Build Status Master| image:: https://conan-ci.jfrog.info/buildStatus/icon?job=ConanTestSuite/master\n   :target: https://conan-ci.jfrog.info/job/ConanTestSuite/job/master\n\n.. |Build Status Develop| image:: https://conan-ci.jfrog.info/buildStatus/icon?job=ConanTestSuite/develop\n   :target: https://conan-ci.jfrog.info/job/ConanTestSuite/job/develop\n\n.. |Master coverage| image:: https://codecov.io/gh/conan-io/conan/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/conan-io/conan/branch/master\n\n.. |Develop coverage| image:: https://codecov.io/gh/conan-io/conan/branch/develop/graph/badge.svg\n   :target: https://codecov.io/gh/conan-io/conan/branch/develop\n\n.. |Coverage graph| image:: https://codecov.io/gh/conan-io/conan/branch/develop/graphs/tree.svg\n   :height: 50px\n   :width: 50 px\n   :alt: Conan develop coverage\n\n.. |Develop climate| image:: https://api.codeclimate.com/v1/badges/081b53e570d5220b34e4/maintainability.svg\n   :target: https://codeclimate.com/github/conan-io/conan/maintainability\n   \n.. |Logo| image:: https://conan.io/img/jfrog_conan_logo.png\n\n\n.. _`pip docs`: https://pip.pypa.io/en/stable/installing/\n\n.. _`brew homepage`: http://brew.sh/\n'