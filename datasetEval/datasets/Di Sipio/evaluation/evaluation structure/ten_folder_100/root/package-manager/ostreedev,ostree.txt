b'libostree\n---------\n\nNew! See the docs online at [Read The Docs (OSTree)](https://ostree.readthedocs.org/en/latest/ )\n\n-----\n\nThis project is now known as "libostree", though it is still appropriate to use\nthe previous name: "OSTree" (or "ostree"). The focus is on projects which use\nlibostree\'s shared library, rather than users directly invoking the command line\ntools (except for build systems). However, in most of the rest of the\ndocumentation, we will use the term "OSTree", since it\'s slightly shorter, and\nchanging all documentation at once is impractical. We expect to transition to\nthe new name over time.\n\nAs implied above, libostree is both a shared library and suite of command line\ntools that combines a "git-like" model for committing and downloading bootable\nfilesystem trees, along with a layer for deploying them and managing the\nbootloader configuration.\n\nThe core OSTree model is like git in that it checksums individual files and has\na content-addressed-object store. It\'s unlike git in that it "checks out" the\nfiles via hardlinks, and they thus need to be immutable to prevent corruption.\nTherefore, another way to think of OSTree is that it\'s just a more polished\nversion of\n[Linux VServer hardlinks](http://linux-vserver.org/index.php?title=util-vserver:Vhashify&oldid=2285).\n\n**Features:**\n\n - Transactional upgrades and rollback for the system\n - Replicating content incrementally over HTTP via GPG signatures and "pinned TLS" support\n - Support for parallel installing more than just 2 bootable roots\n - Binary history on the server side (and client)\n - Introspectable shared library API for build and deployment systems\n - Flexible support for multiple branches and repositories, supporting\n   projects like [flatpak](https://github.com/flatpak/flatpak) which\n   use libostree for applications, rather than hosts.\n\nOperating systems and distributions using OSTree\n---------------------\n\n[Endless OS](https://endlessos.com/) uses libostree for their host system as\nwell as flatpak. See\ntheir [eos-updater](https://github.com/endlessm/eos-updater)\nand [deb-ostree-builder](https://github.com/dbnicholson/deb-ostree-builder)\nprojects.\n\nFedora derivatives use rpm-ostree (noted below); there are 3 variants using OSTree:\n\n - [Fedora CoreOS](https://getfedora.org/en/coreos/)\n - [Fedora Silverblue](https://silverblue.fedoraproject.org/)\n - [Fedora IoT](https://iot.fedoraproject.org/)\n\nRed Hat Enterprise Linux CoreOS is a derivative of Fedora CoreOS, used in [OpenShift 4](https://try.openshift.com/).\nThe [machine-config-operator](https://github.com/openshift/machine-config-operator/blob/master/docs/OSUpgrades.md)\nmanages upgrades.  RHEL CoreOS is also the successor to RHEL Atomic Host, which\nuses rpm-ostree as well.\n\n[GNOME Continuous](https://wiki.gnome.org/Projects/GnomeContinuous) is\nwhere OSTree was born - as a high performance continuous delivery/testing\nsystem for GNOME.\n\n[Liri OS](https://liri.io/download/silverblue/) has the option to install\ntheir distribution using ostree.\n\nDistribution build tools\n------------------------\n\n[meta-updater](https://github.com/advancedtelematic/meta-updater) is\na layer available for [OpenEmbedded](http://www.openembedded.org/wiki/Main_Page)\nsystems.\n\n[QtOTA](http://doc.qt.io/QtOTA/) is Qt\'s over-the-air update framework\nwhich uses libostree.\n\nThe [BuildStream](https://gitlab.com/BuildStream/buildstream) build and\nintegration tool uses libostree as a caching system to store and share\nbuilt artifacts.\n\nFedora [coreos-assembler](https://github.com/coreos/coreos-assembler) is\nthe build tool used to generate Fedora CoreOS derivatives.\n\nProjects linking to libostree\n-----------------------------\n\n[rpm-ostree](https://github.com/projectatomic/rpm-ostree) is used by the\nFedora-derived operating systems listed above.  It is a full hybrid\nimage/package system.  By default it uses libostree to atomically replicate a base OS\n(all dependency resolution is done on the server), but it supports "package layering", where\nadditional RPMs can be layered on top of the base.  This brings a "best of both worlds""\nmodel for image and package systems.\n\n[eos-updater](https://github.com/endlessm/eos-updater) is a daemon that implements updates\non EndlessOS.\n\n[flatpak](https://github.com/flatpak/flatpak) uses libostree for desktop\napplication containers. Unlike most of the other systems here, flatpak does not\nuse the "libostree host system" aspects (e.g. bootloader management), just the\n"git-like hardlink dedup". For example, flatpak supports a per-user OSTree\nrepository.\n\nLanguage bindings\n----\n\nlibostree is accessible via [GObject Introspection](https://gi.readthedocs.io/en/latest/);\nany language which has implemented the GI binding model should work.\nFor example, Both [pygobject](https://pygobject.readthedocs.io/en/latest/)\nand [gjs](https://gitlab.gnome.org/GNOME/gjs) are known to work\nand further are actually used in libostree\'s test suite today.\n\nSome bindings take the approach of using GI as a lower level and\nwrite higher level manual bindings on top; this is more common\nfor statically compiled languages.  Here\'s a list of such bindings:\n\n - [ostree-go](https://github.com/ostreedev/ostree-go/)\n - [ostree-rs](https://gitlab.com/fkrull/ostree-rs/)\n\nBuilding\n--------\n\nReleases are available as GPG signed git tags, and most recent\nversions support extended validation using\n[git-evtag](https://github.com/cgwalters/git-evtag).\n\nHowever, in order to build from a git clone, you must update the\nsubmodules.  If you\'re packaging OSTree and want a tarball, I\nrecommend using a "recursive git archive" script.  There are several\navailable online;\n[this code](https://github.com/ostreedev/ostree/blob/master/packaging/Makefile.dist-packaging#L11)\nin OSTree is an example.\n\nOnce you have a git clone or recursive archive, building is the\nsame as almost every autotools project:\n\n```\ngit submodule update --init\nenv NOCONFIGURE=1 ./autogen.sh\n./configure --prefix=...\nmake\nmake install DESTDIR=/path/to/dest\n```\n\nMore documentation\n------------------\n\nNew! See the docs online at [Read The Docs (OSTree)](https://ostree.readthedocs.org/en/latest/ )\n\nContributing\n------------\n\nSee [Contributing](CONTRIBUTING.md).\n\n\nLicensing\n-------\n\nThe licensing for the *code* of libostree can be canonically found in the individual files;\nand the overall status in the [COPYING](https://github.com/ostreedev/ostree/blob/master/COPYING)\nfile in the source.  Currently, that\'s LGPLv2+.  This also covers the man pages and API docs.\n\nThe license for the manual documentation in the `doc/` directory is:\n`SPDX-License-Identifier: (CC-BY-SA-3.0 OR GFDL-1.3-or-later)`\nThis is intended to allow use by Wikipedia and other projects.\n\nIn general, files should have a `SPDX-License-Identifier` and that is canonical.\n'