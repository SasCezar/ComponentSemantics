b'<p align="center">\n  <img src="https://ds300.github.io/patch-package/patch-package.svg" width="80%" alt="patch-package" />\n</p>\n\n`patch-package` lets app authors instantly make and keep fixes to npm\ndependencies. It\'s a vital band-aid for those of us living on the bleeding edge.\n\n```sh\n# fix a bug in one of your dependencies\nvim node_modules/some-package/brokenFile.js\n\n# run patch-package to create a .patch file\nnpx patch-package some-package\n\n# commit the patch file to share the fix with your team\ngit add patches/some-package+3.14.15.patch\ngit commit -m "fix brokenFile.js in some-package"\n```\n\nPatches created by `patch-package` are automatically and gracefully applied when\nyou use `npm`(>=5) or `yarn`.\n\nNo more waiting around for pull requests to be merged and published. No more\nforking repos just to fix that one tiny thing preventing your app from working.\n\n## Set-up\n\nIn package.json\n\n```diff\n "scripts": {\n+  "postinstall": "patch-package"\n }\n```\n\nThen\n\n### npm\n\n    npm i patch-package\n\nYou can use `--save-dev` if you don\'t need to run npm in production, e.g. if\nyou\'re making a web frontend.\n\n### yarn\n\n    yarn add patch-package postinstall-postinstall\n\nYou can use `--dev` if you don\'t need to run yarn in production, e.g. if you\'re\nmaking a web frontend.\n\nTo understand why yarn needs the `postinstall-postinstall` package see:\n[Why use postinstall-postinstall](#why-use-postinstall-postinstall-with-yarn)\n\n### yarn workspaces\n\nSame as for yarn \xe2\x98\x9d\xef\xb8\x8f Note that if you want to patch un-hoisted packages you\'ll\nneed to repeat the setup process for the child package. Also make sure you\'re in\nthe child package directory when you run `patch-package` to generate the patch\nfiles.\n\n## Usage\n\n### Making patches\n\nFirst make changes to the files of a particular package in your node_modules\nfolder, then run\n\n    yarn patch-package package-name\n\nor use npx (included with `npm > 5.2`)\n\n    npx patch-package package-name\n\nwhere `package-name` matches the name of the package you made changes to.\n\nIf this is the first time you\'ve used `patch-package`, it will create a folder\ncalled `patches` in the root dir of your app. Inside will be a file called\n`package-name+0.44.0.patch` or something, which is a diff between normal old\n`package-name` and your fixed version. Commit this to share the fix with your\nteam.\n\n#### Options\n\n- `--use-yarn`\n\n  By default, patch-package checks whether you use npm or yarn based on which\n  lockfile you have. If you have both, it uses npm by default. Set this option\n  to override that default and always use yarn.\n\n- `--exclude <regexp>`\n\n  Ignore paths matching the regexp when creating patch files. Paths are relative\n  to the root dir of the package to be patched.\n\n  Default value: `package\\\\.json$`\n\n- `--include <regexp>`\n\n  Only consider paths matching the regexp when creating patch files. Paths are\n  relative to the root dir of the package to be patched.\n\n  Default value: `.*`\n\n- `--case-sensitive-path-filtering`\n\n  Make regexps used in --include or --exclude filters case-sensitive.\n\n- `--patch-dir`\n\n  Specify the name for the directory in which to put the patch files.\n\n#### Nested packages\n\nIf you are trying to patch a package at, e.g.\n`node_modules/package/node_modules/another-package` you can just put a `/`\nbetween the package names:\n\n    npx patch-package package/another-package\n\nIt works with scoped packages too\n\n    npx patch-package @my/package/@my/other-package\n\n### Updating patches\n\nUse exactly the same process as for making patches in the first place, i.e. make\nmore changes, run patch-package, commit the changes to the patch file.\n\n### Applying patches\n\nRun `patch-package` without arguments to apply all patches in your project.\n\n#### Options\n\n- `--reverse`\n\n  Un-applies all patches.\n\n  Note that this will fail if the patched files have changed since being\n  patched. In that case, you\'ll probably need to re-install `node_modules`.\n\n  This option was added to help people using CircleCI avoid\n  [an issue around caching and patch file updates](https://github.com/ds300/patch-package/issues/37)\n  but might be useful in other contexts too.\n\n- `--patch-dir`\n\n  Specify the name for the directory in which the patch files are located\n\n#### Notes\n\nTo apply patches individually, you may use `git`:\n\n    git apply --ignore-whitespace patches/package-name+0.44.2.patch\n\nor `patch` in unixy environments:\n\n    patch -p1 -i patches/package-name+0.44.2.patch\n\n### Dev-only patches\n\nIf you deploy your package to production (e.g. your package is a server) then\nany patched `devDependencies` will not be present when patch-package runs in\nproduction. It will happily ignore those patch files if the package to be\npatched is listed directly in the `devDependencies` of your package.json. If\nit\'s a transitive dependency patch-package can\'t detect that it is safe to\nignore and will throw an error. To fix this, mark patches for transitive dev\ndependencies as dev-only by renaming from, e.g.\n\n    package-name+0.44.0.patch\n\nto\n\n    package-name+0.44.0.dev.patch\n\nThis will allow those patch files to be safely ignored when\n`NODE_ENV=production`.\n\n## Benefits of patching over forking\n\n- Sometimes forks need extra build steps, e.g. with react-native for Android.\n  Forget that noise.\n- Get told in big red letters when the dependency changed and you need to check\n  that your fix is still valid.\n- Keep your patches colocated with the code that depends on them.\n- Patches can be reviewed as part of your normal review process, forks probably\n  can\'t\n\n## When to fork instead\n\n- The change is too consequential to be developed in situ.\n- The change would be useful to other people as-is.\n- You can afford to make a proper PR to upstream.\n\n## Isn\'t this dangerous?\n\nNope. The technique is quite robust. Here are some things to keep in mind\nthough:\n\n- It\'s easy to forget to run `yarn` or `npm` when switching between branches\n  that do and don\'t have patch files.\n- Long lived patches can be costly to maintain if they affect an area of code\n  that is updated regularly and you want to update the package regularly too.\n- Big semantic changes can be hard to review. Keep them small and obvious or add\n  plenty of comments.\n- Changes can also impact the behaviour of other untouched packages. It\'s\n  normally obvious when this will happen, and often desired, but be careful\n  nonetheless.\n\n## Why use postinstall-postinstall with Yarn?\n\nMost times when you do a `yarn`, `yarn add`, `yarn remove`, or `yarn install`\n(which is the same as just `yarn`) Yarn will completely replace the contents of\nyour node_modules with freshly unpackaged modules. patch-package uses the\n`postinstall` hook to modify these fresh modules, so that they behave well\naccording to your will.\n\nYarn only runs the `postinstall` hook after `yarn` and `yarn add`, but not after\n`yarn remove`. The `postinstall-postinstall` package is used to make sure your\n`postinstall` hook gets executed even after a `yarn remove`.\n\n## License\n\nMIT\n\n[![Empowered by Futurice\'s open source sponsorship program](https://img.shields.io/badge/sponsor-chilicorn-ff69b4.svg)](http://futurice.com/blog/sponsoring-free-time-open-source-activities?utm_source=github&utm_medium=spice&utm_campaign=patch-package)\n'