b'<a name="documentr_top"></a>[![official JetBrains project](https://jb.gg/badges/official.svg)](https://confluence.jetbrains.com/display/ALL/JetBrains+on+GitHub) [![Join the chat at https://gitter.im/JetBrains/gradle-intellij-plugin](https://img.shields.io/badge/chat-%20%20-brightgreen.svg)](https://gitter.im/JetBrains/gradle-intellij-plugin?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge) [![Gradle Plugin Release](https://img.shields.io/badge/gradle%20plugin-0.4.14-blue.svg)](https://plugins.gradle.org/plugin/org.jetbrains.intellij) [![GitHub Release](https://img.shields.io/github/release/jetbrains/gradle-intellij-plugin.svg)](https://github.com/jetbrains/gradle-intellij-plugin/releases) \n\n# gradle-intellij-plugin\n\n<h4><a id="the-latest-version" class="anchor" aria-hidden="true" href="#the-latest-version"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>The latest version is 0.4.14</h4>\n\n> \n**This project requires Gradle 3.4 or newer**\n\nThis plugin allows you to build plugins for IntelliJ platform using specific IntelliJ SDK and bundled plugins.\n\nThe plugin adds extra IntelliJ-specific dependencies, patches processResources tasks to fill some tags \n(name, version) in `plugin.xml` with appropriate values, patches compile tasks to instrument code with \nnullability assertions and forms classes made with IntelliJ GUI Designer and provides some build steps which might be\nhelpful while developing plugins for IntelliJ platform.\n\n\n\n# Getting started\n\nHere is [the manual](https://www.jetbrains.org/intellij/sdk/docs/tutorials/build_system/prerequisites.html) on how\nto start developing plugins for IntelliJ IDEA using Gradle.\n\nAlso, please take a look at [the FAQ](../../blob/master/FAQ.md).\n\n# Usage\n \n## Gradle \n\n```groovy\nplugins {\n  id "org.jetbrains.intellij" version "0.4.14"\n}\n```\n \n### Snapshot version\n\n<summary>Use the following code to get the latest features</summary>\n\n```groovy\nbuildscript {\n  repositories {\n    mavenCentral()\n    maven {\n      url "https://oss.sonatype.org/content/repositories/snapshots/"\n    }\n    maven { \n      url \'https://dl.bintray.com/jetbrains/intellij-plugin-service\' \n    }\n    \n  }\n  dependencies {\n    classpath "org.jetbrains.intellij.plugins:gradle-intellij-plugin:0.5.0-SNAPSHOT"\n  }\n}\n\napply plugin: \'org.jetbrains.intellij\'\n```\n</details>\n\n### Tasks\n\nPlugin introduces the following tasks\n\n| **Task** | **Description** |\n| -------- | --------------- |\n| `buildPlugin`            | Assembles plugin and prepares zip archive for deployment. |\n| `patchPluginXml`         | Collects all plugin.xml files in sources and fill since/until build and version attributes. |\n| `prepareSandbox`         | Creates proper structure of plugin, copies patched plugin xml files and fills sandbox directory with all of it. |\n| `prepareTestingSandbox`  | Prepares sandbox that will be used while running tests. |\n| `buildSearchableOptions` | Builds an index of UI components (a.k.a. searchable options) for the plugin by running a headless IDE instance.<br>Note, that this is a `runIde` task with predefined arguments and all properties of `runIde` task are also applied to `buildSearchableOptions` tasks. |\n| `jarSearchableOptions`   | Creates a jar file with searchable options to be distributed with the plugin. |\n| `runIde`                 | Executes an IntelliJ IDEA instance with the plugin you are developing. |\n| `publishPlugin`          | Uploads plugin distribution archive to https://plugins.jetbrains.com. |\n| `verifyPlugin`           | Validates completeness and contents of plugin.xml descriptors as well as plugin\xe2\x80\x99s archive structure. |\n\n## Configuration\n\nPlugin provides the following options to configure target IntelliJ SDK and build archive\n\n### Setup DSL\n\nThe following attributes are a part of the Setup DSL <kbd>intellij { ... }</kbd> in which allows you to setup the environment and dependencies.\n\n| Attributes | Values | \n| :------------- | :--------- | \n| <kbd>pluginName</kbd> - The name of the target zip-archive and defines the name of plugin artifact.|**Acceptable Values:** <br/><kbd>String</kbd> - `\'gradle-intellij-plugin\'` <br/><br/>**Default Value:** <kbd>$project.name</kbd>|\n\n#### IntelliJ Platform Properties\n| Attributes | Values | \n| :------------- | :--------- | \n| <kbd>version</kbd> - The version of the IntelliJ Platform IDE that will be used to build the plugin. <br/><br/>Please see [Plugin Compatibility](https://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/plugin_compatibility.html) in SDK docs for more details.<br/><br/>**Notes:**    <ul>        <li>Value may have `IC-`, `IU-`, `CL-`, `PY-`, `PC-`, `RD` or `JPS-` prefix in order to define IDE distribution type.</li>        <li>`intellij.version` and `intellij.localPath` should not be specified at the same time.</li>    </ul>|**Acceptable Values:**    <ul>        <li><kbd>version #</kbd><br/>`\'2017.2.5\'` or `\'IC-2017.2.5\'` </li>        <li><kbd>build #</kbd><br/>`\'172.4343\'` or `\'IU-172.4343\'` </li>        <li><kbd>\'LATEST-EAP-SNAPSHOT\'</kbd></li>    </ul><br/><br/>All available JetBrains IDEs versions can be found at [Intellij Artifacts](https://www.jetbrains.org/intellij/sdk/docs/reference_guide/intellij_artifacts.html) page.<br/><br/>**Default Value:** <kbd>\'LATEST-EAP-SNAPSHOT\'</kbd>|\n| <kbd>type</kbd> - The type of IDE distribution.|**Acceptable Values:**    <ul>        <li><kbd>\'IC\'</kbd> - IntelliJ IDEA Community Edition. </li>        <li><kbd>\'IU\'</kbd> - IntelliJ IDEA Ultimate Edition. </li>        <li><kbd>\'JPS\'</kbd> - JPS-only. </li>        <li><kbd>\'CL\'</kbd> - CLion. </li>        <li><kbd>\'PY\'</kbd> - PyCharm Professional Edition. </li>        <li><kbd>\'PC\'</kbd> - PyCharm Community Edition. </li>        <li><kbd>\'RD\'</kbd> - Rider.</li>    </ul>**Default Value:** <kbd>\'IC\'</kbd>|\n| <kbd>localPath</kbd> - The path to locally installed IDE distribution that should be used as a dependency. <br/><br/>**Notes:**    <ul>        <li>`intellij.version` and `intellij.localPath` should not be specified at the same time.</li>    </ul>|**Acceptable Values:** <br/><kbd>path</kbd> - `\'/Applications/IntelliJIDEA.app\'`</br></br>**Default Value:** <kbd>null</kbd>|\n| <kbd>plugins</kbd> - The list of bundled IDE plugins and plugins from the [JetBrains Plugin Repository](https://plugins.jetbrains.com/). <br/><br/>Please see [Plugin Dependencies](http://www.jetbrains.org/intellij/sdk/docs/basics/plugin_structure/plugin_dependencies.html) in SDK docs for more details.<br/><br/>**Notes:**    <ul>        <li>For plugins from the JetBrains Plugin Repository use format `pluginId:version`.</li>        <li>For bundled plugins use directory name of the plugin in IDE distribution (e.g. `Groovy` for `IDEA/plugins/Groovy`).</li>        <li>For sub-projects use project reference `project(\':subproject\')`.</li>        <li>If you need to refer plugin\'s classes from your project, you also have to define a dependency in your `plugin.xml`.</li>    </ul>|**Acceptable Values:**    <ol>        <li><kbd>org.plugin.id:version[@channel]</kbd><br/>`\'org.intellij.plugins.markdown:8.5.0\', \'org.intellij.scala:2017.2.638@nightly\'`</li>        <li><kbd>bundledPluginName</kbd><br/>`\'android\', \'Groovy\'`</li>        <li><kbd>project(\':projectName\')</kbd><br/>`project(\':plugin-subproject\')`</li>    </ol>**Default Value\\:** none|\n\n#### Building Properties\n| Attributes | Values | \n| :------------- | :--------- | \n| <kbd>updateSinceUntilBuild</kbd> - Should plugin patch `plugin.xml` with since and until build values? <br/><br/>**Notes:**    <ul>        <li>If `true` then user-defined values from `patchPluginXml.sinceBuild` and `patchPluginXml.untilBuild` will be used (or their default values if none set). </li>    </ul>|**Acceptable Values:** <kbd>true</kbd> <kbd>false</kbd><br/><br/>**Default Value:** <kbd>true</kbd>|\n| <kbd>sameSinceUntilBuild</kbd> - Should plugin patch `plugin.xml` with an until build value that is just an "open" since build?  <br/><br/>**Notes:**    <ul>        <li>Is useful for building plugins against EAP IDE builds.</li>        <li>If `true` then the user-defined value from `patchPluginXml.sinceBuild` (or its default value) will be used as a `since` and an "open" `until` value. </li>        <li>If `patchPluginXml.untilBuild` has a value set, then `sameSinceUntilBuild` is ignored.</li>    </ul>|**Acceptable Values:** <kbd>true</kbd> <kbd>false</kbd><br/><br/>**Default Value:** <kbd>false</kbd>|\n| <kbd>instrumentCode</kbd> - Should plugin instrument java classes with nullability assertions and compile forms created by IntelliJ GUI Designer?|**Acceptable Values:** <kbd>true</kbd> <kbd>false</kbd><br/><br/>**Default Value:** <kbd>true</kbd>|\n\n#### Run/Debug IDE Properties\n| Attributes | Values | \n| :------------- | :--------- | \n| <kbd>alternativeIdePath</kbd> - The absolute path to the locally installed JetBrains IDE. <br/><br/>**Notes:**    <ul>        <li>Use this property if you want to test your plugin in any non-IDEA JetBrains IDE such as WebStorm or Android Studio.</li>        <li>Empty value means that the IDE that was used for compiling will be used for running/debugging as well.</li>    </ul>|**Acceptable Values:** <br/><kbd>path</kbd> - `\'/Applications/Android Studio.app\'`<br/><br/>**Default Value:** none|\n| <kbd>sandboxDirectory</kbd> - The path of sandbox directory that is used for running IDE with developing plugin.|**Acceptable Values:** <br/><kbd>path</kbd> - `\'${project.rootDir}/.sandbox\'` <br/><br/>**Default Value:** <kbd>\'${project.buildDir}/idea-sandbox\'</kbd>|\n\n#### Infrastructure Properties\n| Attributes | Values | \n| :------------- | :--------- | \n| <kbd>intellijRepo</kbd>, <kbd>pluginsRepo</kbd>, <kbd>jreRepo</kbd> - Urls of repositories for downloading IDE distributions, plugin dependencies and JetBrains Java Runtime. <br/><br/>|**Acceptable Values:** <br/><kbd>url</kbd><br/><br/>**Default Value:** <kbd>jetbrains.com/intellij-repository</kbd>, <kbd>plugins.jetbrains.com/maven</kbd>, <kbd>jetbrains.bintray.com/intellij-jdk</kbd>|\n| <kbd>downloadSources</kbd> - Should plugin download IntelliJ sources while initializing Gradle build? <br/><br/>**Notes:**    <ul>        <li>Since sources are not needed while testing on CI, you can set it to `false` for a particular environment.</li>    </ul>|**Acceptable Values:** <kbd>true</kbd> <kbd>false</kbd><br/><br/>**Default Value:** <kbd>true</kbd> if `CI` environment variable is not set|\n| <kbd>ideaDependencyCachePath</kbd> - The absolute path to the local directory that should be used for storing IDE distributions. <br/><br/>**Notes:**    <ul>        <li>Empty value means the Gradle cache directory will be used.</li>    </ul>|**Acceptable Values:** <br/><kbd>path</kbd> - `\'<example>\'`<br/><br/>**Default Value:** none|\n\n\n### Running DSL\n\n`RunIde` tasks (both `runIde` and `buildSearchableOptions`) extend [JavaExec](https://docs.gradle.org/current/dsl/org.gradle.api.tasks.JavaExec.html) Gradle task,\nall configuration attributes of `JavaExec` task can be used in `RunIde` as well.\n\nIn addition to that, following attributes may be used to customize IDE running:\n\n| **Attributes**              | **Default Value**  |\n| :-------------------------- | :----------------- |\n| <kbd>jbrVersion</kbd> JetBrains Java runtime version to use when running the IDE with the plugin. | **Acceptable Values:** <kbd>String</kbd> - E.g. `\'8u112b752.4\'`, `\'8u202b1483.24\'`, or `\'11_0_2b159\'`. Prefixes `jbrex`, `jbrx` or `jbr` are allowed.<br/><br/>All JetBrains Java versions are available at [BinTray](https://bintray.com/jetbrains/intellij-jbr/).<br/><br/>**Default Value:** <kdb>null</kdb> for IDE &lt; 2017.3, <kdb>builtin java version</kdb>  for IDE &gt;= 2017.3 |\n| <kbd>ideDirectory</kbd> Path to IDE distribution that will be used to run the IDE with the plugin. | path to IDE-dependency |\n| <kbd>configDirectory</kbd> Path to configuration directory. | <kbd>${intellij.sandboxDirectory}/config</kbd> |\n| <kbd>pluginsDirectory</kbd> Path to plugins directory. | <kbd>${intellij.sandboxDirectory}/plugins</kbd> |\n| <kbd>systemDirectory</kbd> Path to indexes directory. | <kbd>${intellij.sandboxDirectory}/system</kbd> |\n\n### Patching DSL\nThe following attributes are a part of the Patching DSL <kbd>patchPluginXml { ... }</kbd> in which allows Gradle to patch specific attributes in a set of `plugin.xml` files.\n\n| **Attributes**            | **Default Value** |\n| :------------------------ |  :---------------- |\n| <kbd>version</kbd> is a value for the `<version>` tag.                                | <kbd>project.version</kbd> |\n| <kbd>sinceBuild</kbd> is for the `since-build` attribute of the `<idea-version>` tag. | <kbd>intellij.version</kbd> in `Branch.Build.Fix` format |\n| <kbd>untilBuild</kbd> is for the `until-build` attribute of the `<idea-version>` tag. | <kbd>intellij.version</kbd> in `Branch.Build.*` format |\n| <kbd>pluginDescription</kbd> is for the `<description>` tag.                          | none |\n| <kbd>changeNotes</kbd> is for the `<change-notes>` tag.                               | none |\n| <kbd>pluginXmlFiles</kbd> is a collection of xml files to patch.                      | All `plugin.xml` files with `<idea-plugin>` |\n| <kbd>destinationDir</kbd> is a directory to store patched xml files.                  | <kbd>\'${project.buildDir}/patchedPluginXmlFiles\'</kbd> |\n\n### Publishing DSL\nThe following attributes are a part of the Publishing DSL <kbd>publishPlugin { ... }</kbd> in which allows Gradle to upload a working plugin to the JetBrains Plugin Repository. Note that you need to upload the plugin to the repository at least once manually (to specify options like the license, repository URL etc.) before uploads through Gradle can be used.\n\nSee the instruction on how to generate authentication token: https://www.jetbrains.org/intellij/sdk/docs/plugin_repository/api/plugin_upload.html\n\nAlso here is the tutorial on how to configure plugin publishing: https://www.jetbrains.org/intellij/sdk/docs/tutorials/build_system/deployment.html\n\n| **Attributes**              | **Default Value**  |\n| :-------------------------- | :----------------- |\n| <kbd>token</kbd> Authentication token. | none |\n| <kbd>channels</kbd> List of channel names to upload plugin to.  | <kbd>[default]</kbd> |\n| <kbd>host</kbd>  URL host of a plugin repository.               | <kbd>https://plugins.jetbrains.com</kbd> |\n| <kbd>distributionFile</kbd> Jar or Zip file of plugin to upload. | output of `buildPlugin` task |\n\n### Instrumenting DSL\nThe following attributes help you to tune instrumenting behaviour in <kbd>instrumentCode { ... }</kbd> block.\n\n| **Attributes**            | **Default Value** |\n| :------------------------ |  :---------------- |\n| <kbd>compilerVersion</kbd> is a version of instrumenting compiler. It\'s used for non-IDEA plugins (e.g. CLion or Rider). | <kbd>Build number of the IDE dependency</kbd> |\n\n### build.gradle\n\n```groovy\nplugins {\n  id "org.jetbrains.intellij" version "0.4.14"\n}\n\nintellij {\n  version \'IC-2018.3\'\n  plugins = [\'coverage\', \'org.intellij.plugins.markdown:8.5.0.20160208\']\n  pluginName \'MyPlugin\'\n\n}\npublishPlugin {\n  token \'ssdfhasdfASDaq23jhnasdkjh\'\n  channels \'nightly\'\n} \n```\n\n# Examples\n\nAs examples of using this plugin you can check out following projects:\n\n- [Go plugin](https://github.com/go-lang-plugin-org/go-lang-idea-plugin) and its [TeamCity build configuration](https://teamcity.jetbrains.com/project.html?projectId=IntellijIdeaPlugins_Go&tab=projectOverview)\n- [Erlang plugin](https://github.com/ignatov/intellij-erlang) and its [TeamCity build configuration](https://teamcity.jetbrains.com/project.html?projectId=IntellijIdeaPlugins_Erlang&tab=projectOverview)\n- [Rust plugin](https://github.com/intellij-rust/intellij-rust) and its [TeamCity build configuration](https://teamcity.jetbrains.com/project.html?projectId=IntellijIdeaPlugins_Rust&tab=projectOverview)\n- [AWS CloudFormation plugin](https://github.com/shalupov/idea-cloudformation) and its [TeamCity build configuration](https://teamcity.jetbrains.com/project.html?projectId=IdeaAwsCloudFormation&tab=projectOverview)\n- [Bash plugin](https://github.com/jansorg/BashSupport) and its [TeamCity build configuration](https://teamcity.jetbrains.com/project.html?projectId=IntellijIdeaPlugins_BashSupport&tab=projectOverview)\n- [Perl5 plugin](https://github.com/hurricup/Perl5-IDEA) and its [Travis configuration file](https://github.com/hurricup/Perl5-IDEA/blob/master/.travis.yml)\n- [Bamboo Soy plugin](https://github.com/google/bamboo-soy) and its [Travis configuration file](https://github.com/google/bamboo-soy/blob/master/.travis.yml)\n- [Android Drawable Importer plugin](https://github.com/winterDroid/android-drawable-importer-intellij-plugin)\n- [Android Material Design Icon Generator plugin](https://github.com/konifar/android-material-design-icon-generator-plugin)\n- [AceJump plugin](https://github.com/johnlindquist/AceJump)  \n\t- Uses the Gradle Kotlin DSL\n- [EmberJS plugin](https://github.com/Turbo87/intellij-emberjs)\n- [HCL plugin](https://github.com/VladRassokhin/intellij-hcl)\n- [Robot plugin](https://github.com/AmailP/robot-plugin)\n- [TOML plugin](https://github.com/stuartcarnie/toml-plugin)\n- [SQLDelight Android Studio Plugin](https://github.com/square/sqldelight/tree/master/sqldelight-idea-plugin)\n- [idear plugin](https://github.com/breandan/idear)\n  - Uses the Gradle Kotlin DSL\n- [Android WiFi ADB plugin](https://github.com/pedrovgs/AndroidWiFiADB)\n- [SonarLint plugin](https://github.com/SonarSource/sonar-intellij)\n- [IdeaVim plugin](https://github.com/JetBrains/ideavim) and its [TeamCity build configuration](https://teamcity.jetbrains.com/project.html?projectId=IdeaVim&guest=1)\n- [Adb Idea](https://github.com/pbreault/adb-idea) is configured to build and run against stable, beta or preview (canary) releases of Android Studio\n- [Gerrit](https://github.com/uwolfer/gerrit-intellij-plugin) uses Travis CI inclusive automated publishing of releases to GitHub and JetBrains plugin repository (triggered by version tag creation)\n- [.ignore](https://github.com/hsz/idea-gitignore)\n- [Minecraft Development](https://github.com/minecraft-dev/MinecraftDev) and its [TeamCity build configuration](https://ci.demonwav.com/viewType.html?buildTypeId=MinecraftDevIntelliJ_Build)\n  - Uses the Gradle Kotlin DSL\n  - Mixes Java, Kotlin, and Groovy code\n  - Uses Grammar Kit\n  - Uses a Kotlin version not bundled with IntelliJ\n- [Mainframer Integration](https://github.com/elpassion/mainframer-intellij-plugin)\n\t- Uses the Gradle Kotlin DSL\n\t- Fully written in kotlin\n\t- Uses RxJava\n- [Unity 3D plugin](https://github.com/JetBrains/resharper-unity) for JetBrains Rider\n- [AEM Tools plugin](https://github.com/aemtools/aemtools) for Adobe Experience Manager integration\n\t- Uses the Gradle Kotlin DSL\n\t- Fully written in kotlin\n\t- Uses template language\n- [F# plugin](https://github.com/JetBrains/fsharp-support/tree/master/rider-fsharp) for JetBrains Rider\n\t- Uses the Gradle Kotlin DSL\n- [Intellij Rainbow Brackets](https://github.com/izhangzhihao/intellij-rainbow-brackets)\n\t- Fully written in kotlin\n\t- Uses other intellij plugins as test dependencies\n\t- Circle CI configuration file & Travis CI configuration file\n\t- Gradle task to verify plugin compatibility cross intellij versions\n\t- Auto subbmit anonymous feedback as github issues\n# Contributing\n\nContributing tips:\n\nYou can debug the source code of gradle-intellij-plugin (e.g. put breakpoints there) if you add a reference to your local copy into `settings.gradle` of your IntelliJ plugin:\n\n```groovy\nincludeBuild \'/path/to/gradle-intellij-plugin\'\n```\n\n# License\n\n\n```\nCopyright 2019 org.jetbrains.intellij.plugins\n\n    Licensed under the Apache License, Version 2.0 (the "License");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an "AS IS" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n```\n\n\n--\n\n> `This README.md file was hand-crafted with care utilising synapticloop`[`templar`](https://github.com/synapticloop/templar/)`->`[`documentr`](https://github.com/synapticloop/documentr/)\n\n--\n\n'