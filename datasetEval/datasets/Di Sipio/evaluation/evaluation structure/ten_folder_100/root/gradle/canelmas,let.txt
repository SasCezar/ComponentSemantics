b'Let\n====\n\n[![Android Arsenal](https://img.shields.io/badge/Android%20Arsenal-Let-green.svg?style=true)](https://android-arsenal.com/details/1/2843) [![](https://img.shields.io/badge/AndroidWeekly-%23182-red.svg)](http://androidweekly.net/issues/issue-182)\n[![Join the chat at https://gitter.im/canelmas/let](https://badges.gitter.im/canelmas/let.svg)](https://gitter.im/canelmas/let?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nAnnotation based simple API flavoured with [AOP](https://en.wikipedia.org/wiki/Aspect-oriented_programming) to handle new Android runtime permission model.\n\nIf you check [Google\'s Samples](https://github.com/googlesamples/android-RuntimePermissions/blob/master/Application/src/main/java/com/example/android/system/runtimepermissions/MainActivity.java)\nabout the new permission model, you\'ll see a lot of boiler plate code for requesting, handling\nand retrying the request for required permissions.\n\nLet will minimize the boiler plate code you have to write for requesting and handling permissions and hence \nhelp you keep your code more readable.  \n  \nLet let Handle\n====\n\nAnnotate your methods requiring permissions with `@AskPermission` and let Let handle the rest.\n \n```java\n@AskPermission(ACCESS_FINE_LOCATION)\nprivate void getUserLocationAndDoSomething() {\n    Toast.makeText(\n        SampleActivity.this, \n        "Now that I have the permission I need, I\'ll get your location and do something with it", \n        Toast.LENGTH_SHORT\n    ).show();\n    ...\n}\n```\n\n```java\n@AskPermission({\n            Manifest.permission.READ_CONTACTS,\n            Manifest.permission.CALL_PHONE,\n            Manifest.permission.CAMERA\n})\nprivate void skipTutorial() {\n    // permissions needed for the best app experience are granted; let\'s go to the app\'s home screen\n    startActivity(new Intent(this, HomeActivity.class));\n}\n```\n\nLet will check these annotated methods and execute them unless the permissions required are granted;\notherwise Let will put on hold the method execution and request these permissions at runtime. After examining \nthe permission request result, Let will execute the method already put on hold only if the permissions are granted by user.\n  \nLet will also inform about the rationales before making any permission request\nand tell about denied permissions; whether they\'re simply denied or with \'Never Ask Again\' checked.   \n \nJust make sure to override the `onRequestPermissionsResult` in your Activity or Fragment, where your\n`@AskPermission` annotated methods are located:\n\n```java\n@Override\npublic void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {\n    Let.handle(this, requestCode, permissions, grantResults);\n}\n```\n\nAnd make sure your Activity or Fragment implements `RuntimePermissionListener` in order to get notified \nabout denied permissions and rationales:\n\n```java\npublic class SampleActivity extends AppCompatActivity implements RuntimePermissionListener {\n    \n    // ....\n    \n    @Override\n    public void onShowPermissionRationale(List<String> permissions, final RuntimePermissionRequest request) {\n        /**\n        * you may show permission rationales in a dialog, wait for user confirmation and retry the permission \n        * request by calling request.retry()    \n        */               \n    }\n  \n    @Override\n    public void onPermissionDenied(List<DeniedPermission> deniedPermissionList) {\n        /**\n        * Do whatever you need to do about denied permissions:\n        *   - update UI\n        *   - if permission is denied with \'Never Ask Again\', prompt a dialog to tell user\n        *   to go to the app settings screen in order to grant again the permission denied \n        */              \n    }\n    \n    //  ...\n}\n```\n\nUsage\n====\n\nAdd it to your project today!\n\n```groovy\n\nbuildscript {\n    repositories {                    \n        jcenter()        \n    }\n\n    dependencies {        \n        classpath \'com.canelmas.let:let-plugin:0.1.11\'\n    }\n}\n\napply plugin: \'com.android.application\'\napply plugin: \'let\'\n\nrepositories {        \n    jcenter()\n}\n```\n\nFor kotlin :\n```groovy\n\nbuildscript {\n    repositories {\n        jcenter()\n    }\n\n    dependencies {\n        classpath \'com.canelmas.let:let-plugin:1.0.0-beta1\'\n    }\n}\n\napply plugin: \'com.android.application\'\napply plugin: \'let\'\n\nrepositories {\n    jcenter()\n}\n```\n\n\nProguard\n====\n\nMake sure your proguard rule set includes following lines: \n\n    -keep class com.canelmas.let.** { *; }\n    -keepnames class * implements com.canelmas.let.RuntimePermissionListener\n\n    -keepclassmembers class * implements com.canelmas.let.RuntimePermissionListener {\n        public void onRequestPermissionsResult(***);\n    }\n\n    -keepclasseswithmembernames class * {\n        @com.canelmas.let.* <methods>;\n    }\n\nLicense\n====\n\n    Copyright 2016 Can Elmas\n\n    Licensed under the Apache License, Version 2.0 (the "License");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an "AS IS" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n'