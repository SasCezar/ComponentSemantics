b'![logo](logo.png)\n\n[![release](https://img.shields.io/badge/release-0.0.5-green.svg)](http://jcenter.bintray.com/com/ximsfei/stark)\n![build](https://img.shields.io/badge/build-passing-green.svg)\n![pr](https://img.shields.io/badge/PRs-welcome-blue.svg)\n[![license](https://img.shields.io/badge/license-Apache--2.0-blue.svg)](#license)\n\nStark is a hot-fix framework for Android. It supports swapping new implementations of classes without restarting a running Android application, and updated Android resources (icons, layout, etc) while only restarting the Android Activity.\n\n## Sample Usage\n\n1. git clone https://github.com/ximsfei/Stark.git\n2. cd Stark\n3. ./gradlew :stark-sample:clean :stark-sample:assembleDebug\n4. adb install -r stark-sample/build/outputs/apk/debug/stark-sample-debug.apk\n5. Launch sample APK.\n6. Fix code and resources.\n\nFix Code\n\n> SecondActivity.java\n\n```java\npublic class SecondActivity extends Activity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        content.setText("Code bug");\n//        content.setText("aha, Code Bug Fix");\n//        Toast.makeText(this, "fixed", Toast.LENGTH_SHORT).show();\n    }\n}\n```\n\nFix Resources\n\n> strings.xml\n\n```xml\n    <string name="fix_text">Resources bug</string>\n    <!--<string name="fix_text">Aha, Resources Bug Fix</string>-->\n```\n\nChange the `TextView` in activity_main.xml and activity_second.xml to `Button`.\n\n7. ./gradlew :stark-sample:clean :stark-sample:starkGeneratePatchDebug\n8. adb push stark-sample/build/outputs/apk/debug/stark-sample-debug.patch /sdcard/Android/data/com.ximsfei.stark.app/fix.apk\n9. Launch sample APK.\n10. Click the Button of applyPatch.\n11. Click the Button of recreate.\n12. Observe whether the code and resources are fixed.\n\n## Getting Started\n\nThe Gradle Dependency is available via [jCenter](https://bintray.com/pengfeng/ximsfei),\n\nFirstly, add dependency directly in your root project\'s build.gradle:\n\n```gradle\nbuildscript {\n    repositories {\n        jcenter()\n    }\n    dependencies {\n        classpath \'com.ximsfei:stark-gradle:0.0.5\'\n    }\n}\n```\n\nSecondly, apply `com.ximsfei.stark` plugin and add stark core dependencies in your Android application project\'s build.gradle:\n\n```gradle\napply plugin: \'com.android.application\'\napply plugin: \'com.ximsfei.stark\'\n\ndependencies {\n    implementation \'com.ximsfei:stark-core:0.0.5\'\n    implementation \'io.sigpipe:jbsdiff:1.0\'\n}\n```\n\n*Note: Stark depends on jbsdiff, you need add jbsdiff dependency in your build.gradle*\n\nInitialize stark framework in application\'s `attachBaseContext`:\n\n```java\npublic class YourApp extends Application {\n    @Override\n    protected void attachBaseContext(Context base) {\n        super.attachBaseContext(base);\n        Stark.get().load(base);\n    }\n}\n```\n\nAfter got the patch file, invoke the `applyPatchAsync` method to apply patch.\n\n```java\npublic class AnyClass {\n    public void applyPatch(Context context, String path) {\n        Stark.get().applyPatchAsync(context, path);\n    }\n}\n```\n\nAfter adding the dependencies and apply plugin, refresh gradle project, stark plugin will add two more tasks for you:\n\nYou can find them in the gradle stark task group.\n\n1. starkBackup + BuildType\n\nAfter running the `assemble + BuildType`, run the backup task can backup the files needed to generate the patch for you.\n\nEven you can enable an automatic backup configuration in the [stark.properties](#configuration-files) file. \n\n2. starkGeneratePatch + BuildType\n\nWhen you find a bug in an online apk, you can fix the code and run the `starkGeneratePatch + BuildType` task to generate hot-fix patch.\n\nThe `starkGeneratePatch + BuildType` task relies on files backed up by the `starkBackup + BuildType` task.\n\n## ProGuard\n\n```pro\n-keep class com.ximsfei.stark.core.runtime.** {public *;}\n```\n\n## Configuration files\n\nAlso, the stark plugin will generate two configuration files in your Android application project dir:\n\n> stark.properties\n\n```properties\n# If autoBackup is true.\n# Stark plugin will automatically backup the files needed to generate the patch.\n# Otherwise, you need to run the stark backup task manually.\nautoBackup=false\n\n# If allStark is true.\n# Stark plugin will inject redirection code into all BuildType(debug/release).\n# You\'d better disable this configuration at the development stage.\nallStark=false\n\n# If releaseStark is true.\n# Stark plugin will inject redirection code into release stage.\nreleaseStark=true\n\n# If your project needs to use multidex.\n# You\'d better get rid of the `multiDexEnabled = true` in build.gradle and enable it here.\nmultiDexEnabled=false\n```\n\n> stark-rules.txt\n\n```text\n# Add project specific stark rules here.\n# include packages that need  to be fixed in the future.\n# exclude packages that never to be fixed in the future.\n\n-include: applicationId.\n\n-exclude: android.support.\n```\n\n## Contributing\n\nFor more information about contributing, see our [contributing guide](CONTRIBUTING.md).\n\n## More\n\n* Read the [Chinese wiki](https://github.com/ximsfei/Stark/wiki)\n\n## Thinks\n\nThanks to InstantRun, Tinker, Small, jbsdiff and Robust.\n\n## About Author\n\nPengfeng Wang(\xe7\x8e\x8b\xe9\xb9\x8f\xe9\x94\x8b)\n\nemail: ximsfei@gmail.com\n\n## [License](LICENSE)\n'