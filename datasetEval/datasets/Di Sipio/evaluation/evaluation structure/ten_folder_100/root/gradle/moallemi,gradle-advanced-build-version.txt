b"# Gradle Advanced Build Version Plugin\n\nA plugin to generate the Android version code and version name automatically.\n\n## Contents\n1. [Installation](#installation)\n2. [How to use](#how-to-use)\n3. [Version Name Configuration](#version-name-configuration)\n4. [Version Code Configuration](#version-code-configuration)\n5. [File output options](#file-output-options)\n\n## Installation\n\nAdd the advanced-build-version plugin to your build script and use the property `advancedVersioning.versionName` and\n`advancedVersioning.versionCode` where you need:\n\n```groovy\nbuildscript {\n  repositories {\n      jcenter()\n  }\n\n  dependencies {\n      classpath 'org.moallemi.gradle.advanced-build-version:gradle-plugin:1.6.0'\n  }\n}\n\napply plugin: 'org.moallemi.advanced-build-version'\n```\n\n## How to use\n\n```\nadvancedVersioning {\n    nameOptions { }\n    codeOptions { }\n    outputOptions { }\n}\n\ndef appVersionName = advancedVersioning.versionName\ndef appVersionCode = advancedVersioning.versionCode\n```\n\n## Version Name Configuration\n\nYou can customize version name in your `build.gradle` file as follow:\n\n```groovy\nadvancedVersioning {\n    nameOptions {\n        versionMajor 1\n        versionMinor 3\n        versionPatch 6\n        versionBuild 8\n    }\n}\n```\nthe above configuration will output `1.3.6.8`\n\nthere is no need to specify all params because they will be handled automatically. for example\n\n```groovy\nadvancedVersioning {\n    nameOptions {\n        versionMajor 1\n        versionBuild 8\n    }\n}\n```\nwill output `1.0.0.8` and\n\n```groovy\nadvancedVersioning {\n    nameOptions {\n        versionMajor 1\n        versionMinor 3\n    }\n}\n```\n\nwill output `1.3`\n\n## Version Code Configuration\n\nTo customize version code in your `build.gradle` file write:\n\n```groovy\nadvancedVersioning {\n    codeOptions {\n        versionCodeType org.moallemi.gradle.internal.VersionCodeType.DATE\n    }\n}\n```\n\n`versionCodeType` can be one of following params:\n \n * `org.moallemi.gradle.internal.VersionCodeType.DATE` formatted number e.g.: 1501101614\n * `org.moallemi.gradle.internal.VersionCodeType.JALALI_DATE` will output 931017\n * `org.moallemi.gradle.internal.VersionCodeType.AUTO_INCREMENT_DATE` will output 101101614\n * `org.moallemi.gradle.internal.VersionCodeType.AUTO_INCREMENT_ONE_STEP` will output e.g: 24. this\n property stores AI_VERSION_CODE in `version.properties` file in build.gradle directory, you may\n also change `dependsOnTasks` property to specify that on witch tasks should increase version code\n (default is every task that contains 'release' in its name)\n\n```groovy\nadvancedVersioning {\n  codeOptions {\n      versionCodeType org.moallemi.gradle.internal.VersionCodeType.AUTO_INCREMENT_ONE_STEP\n      dependsOnTasks 'release' // defaultValue\n  }\n}\n```\n\nSetting multiple tasks for `dependsOnTasks` property:\n```groovy\nadvancedVersioning {\n  codeOptions {\n      versionCodeType org.moallemi.gradle.internal.VersionCodeType.AUTO_INCREMENT_ONE_STEP\n      dependsOnTasks 'debug', 'release', 'assemble'\n  }\n}\n```\n\n## File output options\nYou can also rename the output generated apk file with this plugin. it can be done just by enabling \nthe `renameOutput` option:\n\n```groovy\nadvancedVersioning {\n  outputOptions {\n      renameOutput true\n  }\n}\n```\n\nIf your app name is MyApp with 2.7 version name and you are in debug mode, the output apk file name \nwill be: `MyApp-2.7-debug.apk`\n\nYou can customize the output name by using this params:\n\n* `${appName}`: name of main module\n* `${projectName}`: name of root project\n* `${flavorName}`: flavor name\n* `${buildType}`: build type\n* `${versionName}`: version name\n* `${versionCode}`: version code\n\n```groovy\nadvancedVersioning {\n  outputOptions {\n      renameOutput true\n      nameFormat '${appName}-${buildType}-${versionName}'\n  }\n}\n```\n\nAnd you can also use custom string in `nameFormat` like:\n\n```groovy\nadvancedVersioning {\n  outputOptions {\n      renameOutput true\n      nameFormat '${appName}-google-play-${versionName}'\n  }\n}\n```\n\nIf your app name is MyApp with 4.6.1 version name the output apk file name will be: \n`MyApp-google-play-4.6.1.apk`\n"