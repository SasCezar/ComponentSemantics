b'<img src="https://raw.githubusercontent.com/mattbdean/JRAW/master/art/header.png" alt="The Java Reddit API Wrapper" />\n\n[![travis-ci build status](https://img.shields.io/travis/mattbdean/JRAW.svg)](https://travis-ci.org/mattbdean/JRAW)\n[![Latest release](https://img.shields.io/github/release/mattbdean/JRAW.svg)](https://bintray.com/thatjavanerd/maven/JRAW/_latestVersion)\n[![Kotlin 1.2.41](https://img.shields.io/badge/Kotlin-1.2.41-blue.svg)](http://kotlinlang.org)\n[![API coverage](https://img.shields.io/badge/API_coverage-49%25-9C27B0.svg)](https://github.com/thatJavaNerd/JRAW/blob/master/ENDPOINTS.md)\n[![Codecov branch](https://img.shields.io/codecov/c/github/mattbdean/JRAW.svg)](https://codecov.io/gh/mattbdean/JRAW)\n\n```groovy\nrepositories {\n    jcenter()\n}\ndependencies {\n    implementation "net.dean.jraw:JRAW:$jrawVersion"\n}\n```\n\n## Documentation\n\nThe full documentation is available [on GitBooks](https://mattbdean.gitbooks.io/jraw), but here\'s a sneak peek:\n\n```java\n// Assuming we have a \'script\' reddit app\nCredentials oauthCreds = Credentials.script(username, password, clientId, clientSecret);\n\n// Create a unique User-Agent for our bot\nUserAgent userAgent = new UserAgent("bot", "my.cool.bot", "1.0.0", "myRedditUsername");\n\n// Authenticate our client\nRedditClient reddit = OAuthHelper.automatic(new OkHttpNetworkAdapter(userAgent), oauthCreds);\n\n// Get info about the user\nAccount me = reddit.me().about();\n```\n\n### Javadoc\n\nJRAW uses JitPack to host its Javadoc.\n\n```\nhttps://jitpack.io/com/github/mattbdean/JRAW/VERSION/javadoc/index.html\n```\n\n`VERSION` can be a specific commit hash (like [`d6843bf`](https://jitpack.io/com/github/mattbdean/JRAW/d6843bf/javadoc/index.html)), a tag (like [`v1.0.0`](https://jitpack.io/com/github/mattbdean/JRAW/v1.0.0/javadoc/index.html)), or the HEAD of a branch (like [`master-SNAPSHOT`](https://jitpack.io/com/github/mattbdean/JRAW/master-SNAPSHOT/javadoc/index.html)).\n\nJitPack produces Javadoc only when necessary, so the first time someone accesses the Javadoc for a specific build it may take a little bit.\n\n## Android\n\nJRAW doesn\'t target Android specifically, but there is an [extension library](https://github.com/mattbdean/JRAW-Android) that solves some quality of life issues. Also be sure to check out the [example app](https://github.com/mattbdean/JRAW-Android/tree/master/example-app) that shows how to get users logged in.\n\n## Contributing\n\nTo get started you\'ll need to create two [reddit OAuth2 apps](https://www.reddit.com/prefs/apps), one script and one installed, and then create a subreddit.\n\nTo have this done automatically for you, run this command:\n\n```sh\n$ ./gradlew :meta:credentials --no-daemon --console plain\n```\n\nYour testing account should have at least 100 karma, otherwise you\'ll run into issues when trying to create a subreddit.\n\n`lib/src/test/resources/credentials.json`:\n\n```json\n{\n    "script": {\n        "username": "...",\n        "password": "...",\n        "clientId": "...",\n        "clientSecret": "..."\n    },\n    "app": {\n        "clientId": "...",\n        "redirectUrl": "..."\n    },\n    "moderationSubreddit": "..."\n}\n```\n\nThen you can go ahead and run the tests\n\n```sh\n$ ./gradlew test\n```\n\nTests are written with [Spek](http://spekframework.org/) and assertions are done with [Expekt](https://github.com/winterbe/expekt).\n\nIn order to get the integration tests of the `docs` module to pass, you\'ll need [gitbook-cli](https://github.com/GitbookIO/gitbook-cli) installed globally. You shouldn\'t have to worry about this, as most of the contributions are likely to be towards the core library and not its accessory modules.\n\n### Code Style\n\nKotlin code follows the [official conventions](https://kotlinlang.org/docs/reference/coding-conventions.html) provided by JetBrains (with a few exceptions).\n\nA few hard and fast rules:\n\n - UTF-8 everywhere\n - 4 spaces for indentation\n - 120 line length\n\n## Releasing\n\nDefine these variables in `gradle.properties`:\n\n```properties\n# Go to gitbook.com -> Account Settings -> Applications/Tokens to get an API key\ngitbookUsername=<gitbook username>\ngitbookPassword=<gitbook API key or password>\n\n# Go to bintray.com -> Edit Profile -> API Key to get your account\'s API key\nbintrayUser=<bintray username>\nbintrayKey=<bintray API key>\n\n# If this property doesn\'t match the target release, all release-related tasks\n# will be disabled\nauthorizeRelease=<version to release>\n```\n\nUpdate the version in the root [build.gradle](https://github.com/mattbdean/JRAW/blob/master/build.gradle) and then run the `:lib:release` task to perform a release.\n\n```\n$ ./gradlew release --no-daemon --console plain\n```\n\nThis task will:\n\n 1. Clean everything and run `:lib`\'s tests\n 2. Run `:meta:update` (see [here](https://github.com/mattbdean/JRAW/tree/master/meta) for what this does)\n 3. Creates a commit for the version. This commit must be pushed manually later.\n 4. Updates the GitBook site and creates a new tag in the Git repo.\n 5. Uploads artifacts (sources, Javadoc, and compiled) to [Bintray](https://bintray.com/thatjavanerd/maven/JRAW)\n\nAfter running the task:\n\n 1. Push the newly-created commit\n 2. Create a [GitHub release](https://github.com/mattbdean/JRAW/releases/new) targeting that commit. Attach all jars generated in `lib/build/libs`.\n 3. Publish the uploaded jars on [Bintray](https://bintray.com/thatjavanerd/maven/JRAW)\n'