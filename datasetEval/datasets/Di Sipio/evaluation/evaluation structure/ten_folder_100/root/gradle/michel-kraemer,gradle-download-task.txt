b'Gradle Download Task [![Actions Status](https://github.com/michel-kraemer/gradle-download-task/workflows/Java%20CI/badge.svg)](https://github.com/michel-kraemer/gradle-download-task/actions) [![codecov](https://codecov.io/gh/michel-kraemer/gradle-download-task/branch/master/graph/badge.svg)](https://codecov.io/gh/michel-kraemer/gradle-download-task) [![Apache License, Version 2.0](https://img.shields.io/badge/license-Apache--2.0-blue.svg)](http://www.apache.org/licenses/LICENSE-2.0)\n====================\n\nThis is a download task for [Gradle](http://www.gradle.org/).\nIt displays progress information just as Gradle does when it retrieves\nan artifact from a repository.\n\nThe plugin has been successfully tested with Gradle 2.0 up to 6.0.1.\nIt should work with newer versions as well.\n\n<img width="559" src="https://raw.githubusercontent.com/michel-kraemer/gradle-download-task/e6bbe00dedd5e0bdaab12f4b1980bd51d22d10d1/gradle-download-task.gif">\n\nApply plugin configuration\n--------------------------\n\n### Gradle 2.1 and higher\n\n```groovy\nplugins {\n    id "de.undercouch.download" version "4.0.2"\n}\n```\n\n### Gradle 2.0\n\n```groovy\nbuildscript {\n    repositories {\n        jcenter()\n    }\n    dependencies {\n        classpath \'de.undercouch:gradle-download-task:4.0.2\'\n    }\n}\n\napply plugin: \'de.undercouch.download\'\n```\n\nUsage\n-----\n\nAfter you have applied the plugin configuration (see above), you can use the\n`Download` task as follows:\n\n```groovy\ntask downloadFile(type: Download) {\n    src \'http://www.example.com/index.html\'\n    dest buildDir\n}\n```\n\nBy default, the plugin always performs a download even if the destination file\nalready exists. If you want to prevent files from being downloaded again, use\nthe `overwrite` flag (see [description below](#download-task)).\n\n```groovy\ntask downloadFile(type: Download) {\n    src \'http://www.example.com/index.html\'\n    dest buildDir\n    overwrite false\n}\n```\n\nAs an alternative to the `Download` task, you may also use the `download`\nextension to retrieve a file anywhere in your build script:\n\n```groovy\ntask myTask {\n    doLast {\n        //do something ...\n        //... then download a file\n        download {\n            src \'http://www.example.com/index.html\'\n            dest buildDir\n            overwrite false\n        }\n        //... do something else\n    }\n}\n```\n\nMinimum requirements\n--------------------\n\nThe plugin requires:\n\n* Gradle 2.x or higher\n* Java 7 or higher\n\nIf you need to run the plugin with Gradle 1.x or Java 6, use\ngradle-download-task version 3.4.3.\n\nExamples\n--------\n\n### Only download a file if it has been modified on the server\n\n```groovy\ntask downloadFile(type: Download) {\n    src \'http://www.example.com/index.html\'\n    dest buildDir\n    onlyIfModified true\n}\n```\n\nNote that this feature depends on the server and whether it supports the\n`If-Modified-Since` request header and provides a `Last-Modified`\ntimestamp in its response.\n\n### Sequentially download a list of files to a directory\n\n```groovy\ntask downloadMultipleFiles(type: Download) {\n    src([\n        \'http://www.example.com/index.html\',\n        \'http://www.example.com/test.html\'\n    ])\n    dest buildDir\n}\n```\n\nPlease note that you have to specify a directory as destination if you\ndownload multiple files. Otherwise, the plugin will fail.\n\n### Download files from a directory\n\nIf you want to download all files from a directory and the server\nprovides a simple directory listing, you can use the following code:\n\n```groovy\ntask downloadDirectory {\n    doLast {\n        def dir = \'http://central.maven.org/maven2/de/undercouch/gradle-download-task/1.0/\'\n        def urlLister = new org.apache.ivy.util.url.ApacheURLLister()\n        def files = urlLister.listFiles(new URL(dir))\n        download {\n           src files\n           dest buildDir\n        }\n    }\n}\n```\n\n### Download and extract a ZIP file\n\nTo download and unpack a ZIP file, you can combine the download task\nplugin with Gradle\'s built-in support for ZIP files:\n\n```groovy\ntask downloadZipFile(type: Download) {\n    src \'https://github.com/michel-kraemer/gradle-download-task/archive/1.0.zip\'\n    dest new File(buildDir, \'1.0.zip\')\n}\n\ntask downloadAndUnzipFile(dependsOn: downloadZipFile, type: Copy) {\n    from zipTree(downloadZipFile.dest)\n    into buildDir\n}\n```\n\n### More examples\n\nPlease have a look at the `examples` directory for more code samples. You can\nalso read my blog post about\n[common recipes for gradle-download-task](https://michelkraemer.com/recipes-for-gradle-download/).\n\nDownload task\n-------------\n\nThe download task and the extension support the following properties.\n\n### General\n\n<dl>\n<dt>src</dt>\n<dd>The URL from which to retrieve the file. Can be a list of URLs if\nmultiple files should be downloaded. <em>(required)</em></dd>\n<dt>dest</dt>\n<dd>The file or directory where to store the file <em>(required)</em></dd>\n<dt>quiet</dt>\n<dd><code>true</code> if progress information should not be displayed\n<em>(default: <code>false</code>)</em></dd>\n<dt>overwrite</dt>\n<dd><code>true</code> if existing files should be overwritten <em>(default:\n<code>true</code>)</em></dd>\n<dt>onlyIfModified (alias: onlyIfNewer)</dt>\n<dd><code>true</code> if the file should only be downloaded if it\nhas been modified on the server since the last download <em>(default:\n<code>false</code>)</em></dd>\n</dl>\n\n<em>Tip!</em> You may provide Groovy Closures to the `src` and `dest`\nproperties to calculate their value at runtime.\n\n### Connection\n\n<dl>\n<dt>acceptAnyCertificate</dt>\n<dd><code>true</code> if HTTPS certificate verification errors should be ignored\nand any certificate (even an invalid one) should be accepted.\n<em>(default: <code>false</code>)</em></dd>\n<dt>compress</dt>\n<dd><code>true</code> if compression should be used during download <em>(default:\n<code>true</code>)</em></dd>\n<dt>header</dt>\n<dd>The name and value of a request header to set when making the download\nrequest <em>(optional)</em></dd>\n<dt>headers</dt>\n<dd>A map of request headers to set when making the download\nrequest <em>(optional)</em></dd>\n<dt>connectTimeout</dt>\n<dd>The maximum number of milliseconds to wait until a connection is established.\nA value of <code>0</code> (zero) means infinite timeout. A negative value\nis interpreted as undefined. <em>(default: <code>30 seconds</code>)</em></dd>\n<dt>readTimeout</dt>\n<dd>The maximum time in milliseconds to wait for data from the server.\nA value of <code>0</code> (zero) means infinite timeout. A negative value\nis interpreted as undefined. <em>(default: <code>30 seconds</code>)</em></dd>\n<dt>retries</dt>\n<dd>Specifies the maximum number of retry attempts if a request has failed.\nBy default, requests are never retried and the task fails immediately if the\nfirst request does not succeed. If the value is greater than <code>0</code>,\nfailed requests are retried regardless of the actual error. This includes\nfailed connection attempts and file-not-found errors (404). A negative value\nmeans infinite retries. <em>(default: <code>0</code>)</em></dd>\n</dl>\n\n### Authentication\n\n<dl>\n<dt>username</dt>\n<dd>The username for <code>Basic</code> or <code>Digest</code> authentication\n<em>(optional)</em></dd>\n<dt>password</dt>\n<dd>The password for <code>Basic</code> or <code>Digest</code> authentication\n<em>(optional)</em></dd>\n<dt>authScheme</dt>\n<dd>The authentication scheme to use (valid values are <code>Basic</code> and\n<code>Digest</code>). If <code>username</code> and <code>password</code> are\nset, the default value of this property will be <code>Basic</code>. Otherwise,\nthis property has no default value. <em>(optional)</em></dd>\n</dl>\n\n### Advanced\n\n<dl>\n<dt>downloadTaskDir</dt>\n<dd>The directory where the plugin stores information that should persist\nbetween builds. It will only be created if necessary.\n<em>(default: <code>${buildDir}/download-task</code>)</em></dd>\n<dt>tempAndMove</dt>\n<dd><code>true</code> if the file should be downloaded to a temporary location\nand, upon successful execution, moved to the final location. If\n<code>overwrite</code> is set to <code>false</code>, this flag is useful to\navoid partially downloaded files if Gradle is forcefully closed or the system\ncrashes. Note that the plugin always deletes partial downloads on connection\nerrors, regardless of the value of this flag. The default temporary location\ncan be configured with the <code>downloadTaskDir</code> property. <em>(default:\n<code>false</code>)</em></dd>\n<dt>useETag</dt>\n<dd>Use this flag in combination with <code>onlyIfModified</code>. If both\nflags are <code>true</code>, the plugin will check a file\'s timestamp as well\nas its entity tag (ETag) and only download it if it has been modified on the\nserver since the last download. The plugin can differentiate between\n<a href="https://tools.ietf.org/html/rfc7232#section-2.1">strong and weak\nETags</a>. Possible values are:\n<dl>\n<dt><code>false</code> <em>(default)</em></dt>\n<dd>Do not use the ETag</dd>\n<dt><code>true</code></dt>\n<dd>Use the ETag but display a warning if it is weak</dd>\n<dt><code>"all"</code></dt>\n<dd>Use the ETag and do not display a warning if it is weak</dd>\n<dt><code>"strongOnly"</code></dt>\n<dd>Only use the ETag if it is strong</dd>\n</dl></dd>\n<dt>cachedETagsFile</dt>\n<dd>The location of the file that keeps entity tags (ETags) received\nfrom the server. <em>(default: <code>${downloadTaskDir}/etags.json</code>)</em></dd>\n</dl>\n\nVerify task\n-----------\n\nThe plugin also provides a `Verify` task that can be used to check the integrity\nof a downloaded file by calculating its checksum and comparing it to a\npre-defined value. The task succeeds if the file\'s checksum equals the\ngiven value and fails if it doesn\'t.\n\nUse the task as follows:\n\n```groovy\ntask verifyFile(type: Verify) {\n    src new File(buildDir, \'file.ext\')\n    algorithm \'MD5\'\n    checksum \'ce114e4501d2f4e2dcea3e17b546f339\'\n}\n```\n\nYou can combine the download task and the verify task as follows:\n\n```groovy\ntask downloadFile(type: Download) {\n    src \'http://www.example.com/index.html\'\n    dest buildDir\n}\n\ntask verifyFile(type: Verify, dependsOn: downloadFile) {\n    src new File(buildDir, \'index.html\')\n    algorithm \'MD5\'\n    checksum \'09b9c392dc1f6e914cea287cb6be34b0\'\n}\n```\n\nThe verify task supports the following properties:\n\n<dl>\n<dt>src</dt>\n<dd>The file to verify <em>(required)</em></dd>\n<dt>checksum</dt>\n<dd>The actual checksum to verify against <em>(required)</em></dd>\n<dt>algorithm</dt>\n<dd>The algorithm to use to compute the checksum. See the\n<a href="http://docs.oracle.com/javase/7/docs/technotes/guides/security/StandardNames.html#MessageDigest">list of algorithm names</a>\nfor more information. <em>(default: <code>MD5</code>)</em></dd>\n</dl>\n\nProxy configuration\n-------------------\n\nYou can configure a proxy server by setting standard JVM system properties. The\nplugin uses the same system properties as Gradle. You can set them in the build\nscript directly. For example, the proxy host can be set as follows:\n\n```groovy\nSystem.setProperty("http.proxyHost", "www.somehost.org");\n```\n\nAlternatively, you can set the properties in a `gradle.properties` file like\nthis:\n\n```properties\nsystemProp.http.proxyHost=www.somehost.org\nsystemProp.http.proxyPort=8080\nsystemProp.http.proxyUser=userid\nsystemProp.http.proxyPassword=password\nsystemProp.http.nonProxyHosts=*.nonproxyrepos.com|localhost\n```\n\nPut this file in your project\'s root directory or in your Gradle home directory.\n\nHTTPS is also supported:\n\n```properties\nsystemProp.https.proxyHost=www.somehost.org\nsystemProp.https.proxyPort=8080\nsystemProp.https.proxyUser=userid\nsystemProp.https.proxyPassword=password\nsystemProp.https.nonProxyHosts=*.nonproxyrepos.com|localhost\n```\n\nMigrating from version 3.x to 4.x\n---------------------------------\n\nIn gradle-download-task 4.x, we made the following breaking changes to the\nAPI:\n\n* The plugin now requires Gradle 2.x (or higher) and Java 7 (or higher)\n* We removed the `timeout` property and introduced `connectTimeout` and\n  `readTimeout` instead. This allows you to control the individual timeouts\n  better. Also, it improves compatibility with Gradle 5.x, where all tasks have\n  a `timeout` property by default. \n* The `credentials` property has been removed. The same applies to the\n  possibility to pass instances of Apache HttpClient\'s `AuthScheme` to the\n  `authScheme` property. The strings `Basic` and `Digest` are now the only\n  accepted values. There is no replacement. If you need this functionality,\n  please file an issue.\n* The properties `requestInterceptor` and `responseInterceptor` have been\n  removed. There is no replacement. Again, if you need this functionality,\n  please file an issue.\n\nLicense\n-------\n\nThe plugin is licensed under the\n[Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0).\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an "AS IS" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n'