b"# Gradle static analysis plugin\n[![](https://ci.novoda.com/buildStatus/icon?job=gradle-static-analysis-plugin)](https://ci.novoda.com/job/gradle-static-analysis-plugin/lastSuccessfulBuild) [![](https://img.shields.io/badge/License-Apache%202.0-lightgrey.svg)](LICENSE.txt) [![Bintray](https://api.bintray.com/packages/novoda-oss/maven/gradle-static-analysis-plugin/images/download.svg)](https://bintray.com/novoda-oss/maven/gradle-static-analysis-plugin/_latestVersion)\n\nA Gradle plugin to easily apply the same setup of static analysis tools across different Android, Java or Kotlin projects.\n\nSupports [Task Configuration Avoidance](https://docs.gradle.org/current/userguide/task_configuration_avoidance.html) so that you have zero overhead in build speeds when you use this plugin!\n\n## Description\nGradle supports many popular static analysis (Checkstyle, PMD, FindBugs, etc) via a set of built-in plugins.\nUsing these plugins in an Android module will require an additional setup to compensate for the differences between\nthe model adopted by the Android plugin compared to the the Java one.\n\nThe `gradle-static-analysis-plugin` aims to provide:\n- flexible, configurable penalty strategy for builds\n- easy, Android-friendly integration for all static analysis\n- convenient way of sharing same setup across different projects\n- healthy, versionable and configurable defaults\n\n### Supported tools\nThe plugin supports various static analysis tools for Java, Kotlin and Android projects:\n\n * [`Checkstyle`](docs/tools/checkstyle.md)\n * [`PMD`](docs/tools/pmd.md)\n * [`FindBugs`](docs/tools/findbugs.md) [DEPRECATED] [Removed in Gradle 6.0]\n * [`SpotBugs`](docs/tools/spotbugs.md)\n * [`Detekt`](docs/tools/detekt.md)\n * [`Android Lint`](docs/tools/android_lint.md)\n * [`KtLint`](docs/tools/ktlint.md)\n \nPlease note that the tools availability depends on the project the plugin is applied to. For more details please refer to the\n[supported tools](docs/supported-tools.md) page.\n\n### Tools in-consideration\n                          \n * `CPD (Duplicate Code Detection) ` [#150](https://github.com/novoda/gradle-static-analysis-plugin/issues/150)\n * `error-prone` [#151](https://github.com/novoda/gradle-static-analysis-plugin/issues/151)\n * `Jetbrains IDEA Inspections` [#152](https://github.com/novoda/gradle-static-analysis-plugin/issues/152)\n\nFor all tools in consideration, please refer to [issues](https://github.com/novoda/gradle-static-analysis-plugin/issues?q=is%3Aissue+is%3Aopen+label%3A%22new+tool%22). \n\n### Out-of-the-box support for Android projects\nAndroid projects use a Gradle model that is not compatible with the Java one, supported by the built-in static analysis tools plugins.\nApplying `gradle-static-analysis-plugin` to your Android project will make sure all the necessary tasks are created and correctly configured\nwithout any additional hassle.\n\n## Add the plugin to your project\nApply the plugin from jCenter as a classpath dependency\n\n```gradle\nbuildscript {\n    repositories {\n       jcenter()\n    }\n    dependencies {\n        classpath 'com.novoda:gradle-static-analysis-plugin:1.2'\n    }\n}\n\napply plugin: 'com.novoda.static-analysis'\n```\n        \nor from the [Gradle Plugins Repository](https://plugins.gradle.org/):\n\n```gradle\nplugins {\n    id 'com.novoda.static-analysis' version '1.2'\n}\n\n```\n\n## Simple usage\nA typical configuration for the plugin will look like:\n\n```gradle\nstaticAnalysis {\n    penalty {\n        maxErrors = 0\n        maxWarnings = 0\n    }\n    checkstyle { }\n    pmd { }\n    findbugs { }\n    spotbugs { }\n    detekt { }\n    lintOptions { }\n}\n```\n\nThis will enable all the tools with their default settings and create `evaluateViolations` task. Running `./gradlew evaluateViolations` task will run all configured tools and print the reports to console. For more advanced configurations, please refer to the\n[advanced usage](docs/advanced-usage.md) and to the [supported tools](docs/supported-tools.md) pages.\n\n## Sample app\nThere are two sample Android projects available, one consisting of a regular app - available [here](https://github.com/novoda/gradle-static-analysis-plugin/tree/master/sample) - and the other comprising a multi-module setup available [here](https://github.com/novoda/gradle-static-analysis-plugin/tree/master/sample-multi-module). Both sample projects showcase a setup featuring Checkstyle, FindBugs, SpotBugs, PMD, Lint, Ktlint and Detekt.\n\n## Snapshots\n[![CI status](https://ci.novoda.com/buildStatus/icon?job=gradle-static-analysis-plugin-snapshot)](https://ci.novoda.com/job/gradle-static-analysis-plugin-snapshot/lastBuild/console) [![Download from Bintray](https://api.bintray.com/packages/novoda-oss/snapshots/gradle-static-analysis-plugin/images/download.svg)](https://bintray.com/novoda-oss/snapshots/gradle-static-analysis-plugin/_latestVersion)\n\nSnapshot builds from [`develop`](https://github.com/novoda/gradle-static-analysis-plugin/compare/master...develop) are automatically deployed to a [repository](https://bintray.com/novoda-oss/snapshots/gradle-static-analysis-plugin/_latestVersion) that is not synced with JCenter.\nTo consume a snapshot build add an additional maven repo as follows:\n```\nrepositories {\n    maven {\n        url 'https://dl.bintray.com/novoda-oss/snapshots/'\n    }\n}\n```\n\nYou can find the latest snapshot version following this [link](https://bintray.com/novoda-oss/snapshots/gradle-static-analysis-plugin/_latestVersion).\n\n## Roadmap\n\nThis project is routinely used by many Novoda projects and by other external projects with no known critical issues.\n\nFuture improvements and new tool integrations can be found on the repository's\n[issue tracker](https://github.com/novoda/gradle-static-analysis-plugin/issues?q=is%3Aopen+is%3Aissue+label%3Aenhancement).\n"