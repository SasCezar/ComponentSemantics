b'# Ktlint Gradle\n\n**Provides a convenient wrapper plugin over the [ktlint](https://github.com/pinterest/ktlint) project.**\n\nLatest plugin version: [9.1.1](/CHANGELOG.md#911---2019-11-12)\n\n[![Join the chat at https://kotlinlang.slack.com](https://img.shields.io/badge/slack-@kotlinlang/ktlint-yellow.svg?logo=slack)](https://kotlinlang.slack.com/messages/CKS3XG0LS)\n[![Build Status](https://travis-ci.org/JLLeitschuh/ktlint-gradle.svg?branch=master)](https://travis-ci.org/JLLeitschuh/ktlint-gradle)\n[![ktlint](https://img.shields.io/badge/code%20style-%E2%9D%A4-FF4081.svg)](https://ktlint.github.io/)\n[![Gradle Plugin Portal](https://img.shields.io/maven-metadata/v/https/plugins.gradle.org/m2/org/jlleitschuh/gradle/ktlint/org.jlleitschuh.gradle.ktlint.gradle.plugin/maven-metadata.xml.svg?colorB=007ec6&label=gradlePluginPortal)](https://plugins.gradle.org/plugin/org.jlleitschuh.gradle.ktlint)\n\nThis plugin creates convenient tasks in your Gradle project\nthat run [ktlint](https://github.com/pinterest/ktlint) checks or do code\nauto format.\n\nPlugin can be applied to any project, but only activates if that project has the kotlin plugin applied.\nThe assumption being that you would not want to lint code you weren\'t compiling.\n\n## Table of content\n- [Supported Kotlin plugins](#supported-kotlin-plugins)\n- [How to use](#how-to-use)\n  - [Minimal support versions](#minimal_supported_versions)\n  - [Ktlint plugin](#ktlint-plugin)\n    - [Simple setup](#simple-setup)\n    - [Using new plugin API](#using-new-plugin-api)\n    - [How to apply to all subprojects](#applying-to-subprojects)\n  - [Intellij IDEA plugin](#intellij-idea-only-plugin)\n    - [Simple setup](#idea-plugin-simple-setup)\n    - [Using new plugin API](#idea-plugin-setup-using-new-plugin-api)\n  - [Plugin configuration](#configuration)\n    - [Customer reporters](#custom-reporters)\n  - [Samples](#samples)\n- [Task details](#tasks-added)\n  - [Main tasks](#main-tasks)\n  - [Additional tasks](#additional-helper-tasks)\n- [FAQ](#faq)\n- [Developers](#developers)\n  - [Importing the project](#importing)\n  - [Building the project](#building)\n- [Links](#links)\n\n## Supported Kotlin plugins\n\nThis plugin supports following kotlin plugins:\n- "kotlin"\n- "kotlin-android"\n- "kotlin2js"\n- "kotlin-platform-common"\n- "kotlin-platform-js"\n- "kotlin-platform-jvm"\n- "kotlin-multiplatform"\n- project kotlin script files\n- "org.jetbrains.kotlin.js"\n\nIf you know any new Kotlin plugin that are not in this list - please,\nopen a [new issue](https://github.com/JLLeitschuh/ktlint-gradle/issues/new).\n\n## How to use\n\n### Minimal supported versions\n\nThis plugin was written using the new API available for gradle script kotlin builds.\nThis API is available in new versions of gradle.\n\nMinimal supported [Gradle](www.gradle.org) version: `5.4.1`\n\nMinimal supported [ktlint](https://github.com/pinterest/ktlint) version: `0.22.0`\n\n### Ktlint plugin\n\n#### Simple setup\n\nBuild script snippet for use in all Gradle versions:\n```groovy\nbuildscript {\n  repositories {\n    maven {\n      url "https://plugins.gradle.org/m2/"\n    }\n  }\n  dependencies {\n    classpath "org.jlleitschuh.gradle:ktlint-gradle:<current_version>"\n  }\n}\n\napply plugin: "org.jlleitschuh.gradle.ktlint"\n```\n\n\n#### Using new plugin API\n\nBuild script snippet for new, incubating, plugin mechanism introduced in Gradle 2.1:\n```groovy\nplugins {\n  id "org.jlleitschuh.gradle.ktlint" version "<current_version>"\n}\n```\n\n\n#### Applying to subprojects\n\nOptionally apply plugin to all project modules:\n```groovy\nsubprojects {\n    apply plugin: "org.jlleitschuh.gradle.ktlint" // Version should be inherited from parent\n    \n    // Optionally configure plugin\n    ktlint {\n       debug = true\n    }\n}\n```\n\n### IntelliJ Idea Only Plugin\n\n**Note:** This plugin is automatically applied by the main `ktlint` plugin.\n\nThis plugin just adds [special tasks](#additional-helper-tasks) that can generate IntelliJ IDEA codestyle\nrules using ktlint.\n\n#### Idea plugin simple setup\n\nFor all gradle versions:\n\nUse the same `buildscript` logic as [above](#simple-setup), but with this instead of the above suggested `apply` line.\n\n```groovy\napply plugin: "org.jlleitschuh.gradle.ktlint-idea"\n```\n\n#### Idea plugin setup using new plugin API\n\nBuild script snippet for new, incubating, plugin mechanism introduced in Gradle 2.1:\n```groovy\nplugins {\n  id "org.jlleitschuh.gradle.ktlint-idea" version "<current_version>"\n}\n```\n\n### Configuration\nThe following configuration block is _optional_.\n\nIf you don\'t configure this the defaults defined\nin the [KtlintExtension](plugin/src/main/kotlin/org/jlleitschuh/gradle/ktlint/KtlintExtension.kt)\nobject will be used.\n\nThe version of ktlint used by default _may change_ between patch versions of this plugin.\nIf you don\'t want to inherit these changes then make sure you lock your version here.\n\n```groovy\nimport org.jlleitschuh.gradle.ktlint.reporter.ReporterType\n\nktlint {\n    version = "0.22.0"\n    debug = true\n    verbose = true\n    android = false\n    outputToConsole = true\n    outputColorName = "RED"\n    ignoreFailures = true\n    enableExperimentalRules = true\n    additionalEditorconfigFile = file("/some/additional/.editorconfig")\n    disabledRules = ["final-newline"]\n    reporters {\n        reporter "plain"\n        reporter "checkstyle"\n        \n        customReporters {\n            "csv" {\n                fileExtension = "csv"\n                dependency = project(":project-reporters:csv-reporter")\n            }\n            "yaml" {\n                fileExtension = "yml"\n                dependency = "com.example:ktlint-yaml-reporter:1.0.0"\n            }\n        }\n    }\n    kotlinScriptAdditionalPaths {\n        include fileTree("scripts/")\n    }\n    filter {\n        exclude("**/generated/**")\n        include("**/kotlin/**")\n    }\n}\n\ndependencies {\n    ktlintRuleset "com.github.username:rulseset:master-SNAPSHOT"\n    ktlintRuleset files("/path/to/custom/rulseset.jar")\n    ktlintRuleset project(":chore:project-ruleset") \n}\n```\n\nor in kotlin script:\n```kotlin\nimport org.jlleitschuh.gradle.ktlint.reporter.ReporterType\n\nktlint {\n    version.set("0.22.0")\n    debug.set(true)\n    verbose.set(true)\n    android.set(false)\n    outputToConsole.set(true)\n    outputColorName.set("RED")\n    ignoreFailures.set(true)\n    enableExperimentalRules.set(true)\n    additionalEditorconfigFile.set(file("/some/additional/.editorconfig"))\n    disabledRules.set(setOf("final-newline"))\n    reporters {\n        reporter(ReporterType.PLAIN)\n        reporter(ReporterType.CHECKSTYLE)\n        \n        customReporters {\n            register("csv") {\n                fileExtension = "csv"\n                dependency = project(":project-reporters:csv-reporter")\n            }\n            register("yaml") {\n                fileExtension = "yml"\n                dependency = "com.example:ktlint-yaml-reporter:1.0.0"\n            }\n        }\n    }\n    kotlinScriptAdditionalPaths {\n        include(fileTree("scripts/"))\n    }\n    filter {\n        exclude("**/generated/**")\n        include("**/kotlin/**")\n    }\n}\n\ndependencies {\n    ktlintRuleset("com.github.username:rulseset:master-SNAPSHOT")\n    ktlintRuleset(files("/path/to/custom/rulseset.jar"))\n    ktlintRuleset(project(":chore:project-ruleset")) \n}\n```\n\n#### Custom reporters\n\n**Note**: If Ktlint custom reporter creates report output file internally, for example:\n```kotlin\nclass CsvReporter(\n    private val out: PrintStream\n) : Reporter {\n    override fun onLintError(file: String, err: LintError, corrected: Boolean) {\n        val line = "$file;${err.line};${err.col};${err.ruleId};${err.detail};$corrected"\n        out.println(line)\n        File("some_other_file.txt").write(line) // <-- Here!!!\n    }\n}\n```\n"some_other_file.txt" won\'t be captured as task output. This may lead to the problem,\nthat task will always be not "UP_TO_DATE" and caching will not work.\n\n### Samples\n\nThis repository provides following examples how to setup this plugin:\n- [android-app](/samples/android-app) - applies plugin to android application project\n- [kotlin-gradle](/samples/kotlin-gradle) - applies plugin to plain Kotlin project that uses groovy in `build.gradle` files\n- [kotlin-js](/samples/kotlin-js) - applies plugin to kotlin js project\n- [kotlin-ks](/samples/kotlin-ks) - applies plugin to plain Kotlin project that uses Kotlin DSL in `build.gradle.kts` files\n- [kotlin-multiplatform-common](/samples/kotlin-multiplatform-common) - applies plugin to Kotlin common multiplatform module\n- [kotlin-multiplatform-js](/samples/kotlin-multiplatform-js) - applies plugin to Kotlin Javascript multiplatform module\n- [kotlin-multiplatform-jvm](/samples/kotlin-multiplatform-jvm) - applies plugin to Kotlin JVM multiplatform module\n- [kotlin-rulesets-using](/samples/kotlin-rulesets-using) - adds custom [example](/samples/kotlin-ruleset-creating) ruleset\n- [kotlin-reporter-using](/samples/kotlin-reporter-using) - adds custom [example](/samples/kotlin-reporter-creating) reporter \n\n## Tasks Added\n\n### Main tasks\n\nThis plugin adds two maintasks to every source set: `ktlint[source set name]SourceSetCheck` and `ktlint[source set name]SourceSetFormat`.\nAdditionally, a simple `ktlintCheck` task has also been added that checks all of the source sets for that project.\nSimilarly, a `ktlintFormat` task has been added that formats all of the source sets.\n\nAndroid projects, additionally, will have meta tasks for Android variants, that will process all source sets in variant.\nFor example, if app has `foo` flavor, following meta tasks will be added:\n`ktlintFooDebugCheck`, `ktlintFooReleaseCheck`, `ktlintFooDebugFormat`, `ktlintFooReleaseFormat`.\n\nAdditionally plugin adds two task for project kotlin script files: `ktlintKotlinScriptCheck` and `ktlintKotlinScriptFormat`.\n\n### Additional helper tasks\n\nFollowing additional  tasks are added:\n- `ktlintApplyToIdea` - The task generates IntelliJ IDEA (or Android Studio) Kotlin\n                        style files in the project `.idea/` folder. **Note** that this tasks will overwrite the existing style file.\n- `ktlintApplyToIdeaGlobally` - The task generates IntelliJ IDEA (or Android Studio) Kotlin\n                                style files in the user home IDEA\n                                (or Android Studio) settings folder. **Note** that this task will overwrite the existing style file.\n- `addKtlintCheckGitPreCommitHook` - adds [Git](https://www.git-scm.com/) `pre-commit` hook, \nthat runs ktlint check over staged files.\n- `addKtlintFormatGitPreCommitHook` - adds [Git](https://www.git-scm.com/) `pre-commit` hook, \nthat runs ktlint format over staged files and adds fixed files back to commit.\n\nAll this additional tasks are always added **only** to the root project.\n\n## FAQ\n\n- Is it possible to not stop tasks execution if some of subprojects tasks failed?\n\nYes. Just use gradle `--continue` option:\n```shell\n$ ./gradlew --continue ktlintCheck\n```\n\n- Can I mix old plugin and new plugin API setup in my project\n(see [simple-setup](#simple-setup) and [using new plugin API setup](#using-new-plugin-api))?\n\nNo. This approaches are not equivalent how they work. The problem that\nplugin may not find some of kotlin plugins if both approaches are used\nin the project configuration. Especially it is related to Android plugin.\n\n- Does plugin check changed files incrementally?\n\nYes, check tasks support it. On first run task will check all files in the source set, on\nsubsequent runs it will check only added/modified files.\n\nFormat tasks does not check file incrementally.\n\n## Developers\n\n### Importing\n\nImport the [settings.gradle.kts](settings.gradle.kts) file into your IDE.\n\nTo enable the Android sample either define the `ANDROID_HOME` environmental variable or\nadd a `local.properties` file to the project root folder with the following content:\n```properties\nsdk.dir=<android-sdk-location>\n```\n\n### Building\n\nBuilding the plugin: `./plugin/gradlew build`\n\nOn how to run the current plugin snapshot check on sample projects: `./gradlew ktlintCheck`\n\n### Running tests from [IDEA IDE](https://www.jetbrains.com/idea/)\n\nTo run tests in [IDEA IDE](https://www.jetbrains.com/idea/), \nfirstly you need to run following gradle task (or after any dependency change):\n\n```bash\n$ ./plugin/gradlew pluginUnderTestMetadata\n```\n\nOptionally you can add this step test run configuration.\n\n## Links\n\n[Ktlint Gradle Plugin on the Gradle Plugin Registry](https://plugins.gradle.org/plugin/org.jlleitschuh.gradle.ktlint)\n'