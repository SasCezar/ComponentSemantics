b'# Watson APIs Java SDK\n[![All Contributors](https://img.shields.io/badge/all_contributors-1-orange.svg?style=flat-square)](#contributors)\n\n[![Build Status](https://travis-ci.org/watson-developer-cloud/java-sdk.svg?branch=master)](https://travis-ci.org/watson-developer-cloud/java-sdk)\n[![Slack](https://wdc-slack-inviter.mybluemix.net/badge.svg)](https://wdc-slack-inviter.mybluemix.net)\n[![Maven Central](https://maven-badges.herokuapp.com/maven-central/com.ibm.watson/java-sdk/badge.svg)](https://maven-badges.herokuapp.com/maven-central/com.ibm.watson/java-sdk)\n[![CLA assistant](https://cla-assistant.io/readme/badge/watson-developer-cloud/java-sdk)](https://cla-assistant.io/watson-developer-cloud/java-sdk)\n\nJava client library to use the [Watson APIs][wdc].\n\n<details>\n  <summary>Table of Contents</summary>\n  \n  * [Before you begin](#before-you-begin)\n  * [Installation](#installation)\n    * [Maven](#maven)\n    * [Gradle](#gradle)\n  * [Usage](#usage)\n  * [Running in IBM Cloud](#running-in-ibm-cloud)\n  * [Authentication](#authentication)\n    * [IAM](#iam)\n    * [Username and password](#username-and-password)\n    * [ICP](#icp)\n    * [Cloud Pak for Data](#cloud-pak-for-data)\n  * [Using the SDK](#using-the-sdk)\n    * [Parsing responses](#parsing-responses)\n    * [Configuring the HTTP client](#configuring-the-http-client)\n    * [Making asynchronous API calls](#making-asynchronous-api-calls)\n    * [Default headers](#default-headers)\n    * [Sending request headers](#sending-request-headers)\n    * [Canceling requests](#canceling-requests)\n  * [FAQ](#faq)\n  * IBM Watson Services\n    * [Assistant](assistant)\n    * [Compare and Comply](compare-comply)\n    * [Discovery](discovery)\n    * [Language Translator](language-translator)\n    * [Natural Language Classifier](natural-language-classifier)\n    * [Natural Language Understanding](natural-language-understanding)\n    * [Personality Insights](personality-insights)\n    * [Speech to Text](speech-to-text)\n    * [Text to Speech](text-to-speech)\n    * [Tone Analyzer](tone-analyzer)\n    * [Tradeoff Analytics](tradeoff-analytics)\n    * [Visual Recognition](visual-recognition)\n  * [Android](#android)\n  * [Debug](#debug)\n  * [Eclipse and Intellij](#working-with-eclipse-and-intellij-idea)\n  * [License](#license)\n  * [Contributing](#contributing)\n  * [Featured projects](#featured-projects)\n\n</details>\n\n## Before you begin\n* You need an [IBM Cloud][ibm-cloud-onboarding] account.\n\n## Installation\n\n##### Maven\nAll the services:\n\n```xml\n<dependency>\n\t<groupId>com.ibm.watson</groupId>\n\t<artifactId>ibm-watson</artifactId>\n\t<version>8.0.1</version>\n</dependency>\n```\n\nOnly Discovery:\n\n```xml\n<dependency>\n\t<groupId>com.ibm.watson</groupId>\n\t<artifactId>discovery</artifactId>\n\t<version>8.0.1</version>\n</dependency>\n```\n\n##### Gradle\nAll the services:\n\n```gradle\n\'com.ibm.watson:ibm-watson:8.0.1\'\n```\n\nOnly Assistant:\n\n```gradle\n\'com.ibm.watson:assistant:8.0.1\'\n```\n\n##### JAR\n\nDownload the jar with dependencies [here][jar].\n\nNow, you are ready to see some [examples](https://github.com/watson-developer-cloud/java-sdk/tree/master/examples/src/main/java/com/ibm/watson).\n\n## Usage\n\nThe examples within each service assume that you already have service credentials. If not,\nyou will have to [create a service](#getting-credentials) in IBM Cloud.\n\nIf you are running your application in IBM Cloud (or other platforms based on Cloud Foundry), you don\'t need to specify the\ncredentials; the library will get them for you by looking at the [`VCAP_SERVICES`][vcap_services] environment variable.\n\n## Running in IBM Cloud\n\nWhen running in IBM Cloud (or other platforms based on Cloud Foundry), the library will automatically get the credentials from [`VCAP_SERVICES`][vcap_services].\nIf you have more than one plan, you can use `CredentialUtils` to get the service credentials for an specific plan.\n\n## Authentication\n\nWatson services are migrating to token-based Identity and Access Management (IAM) authentication.\n\n- With some service instances, you authenticate to the API by using **[IAM](#iam)**.\n- In other instances, you authenticate by providing the **[username and password](#username-and-password)** for the service instance.\n- If you\'re using a Watson service on Cloud Pak for Data, you\'ll need to authenticate in a [specific way](#cloud-pak-for-data).\n\n### Getting credentials\n\nTo find out which authentication to use, view the service credentials. You find the service credentials for authentication the same way for all Watson services:\n\n1.  Go to the IBM Cloud [Dashboard](https://cloud.ibm.com/) page.\n1.  Either click an existing Watson service instance in your [resource list](https://cloud.ibm.com/resources) or click [**Create resource > AI**](https://cloud.ibm.com/catalog?category=ai) and create a service instance.\n1. Click on the **Manage** item in the left nav bar of your service instance.\n\nOn this page, you should be able to see your credentials for accessing your service instance.\n\nIn your code, you can use these values in the service constructor or with a method call after instantiating your service.\n\n### Supplying credentials\n\nThere are two ways to supply the credentials you found above to the SDK for authentication.\n\n#### Credential file (easier!)\n\nWith a credential file, you just need to put the file in the right place and the SDK will do the work of parsing it and authenticating. You can get this file by clicking the **Download** button for the credentials in the **Manage** tab of your service instance.\n\nThe file downloaded will be called `ibm-credentials.env`. This is the name the SDK will search for and **must** be preserved unless you want to configure the file path (more on that later). The SDK will look for your `ibm-credentials.env` file in the following places (in order):\n\n- Your system\'s home directory\n- The top-level directory of the project you\'re using the SDK in\n\nAs long as you set that up correctly, you don\'t have to worry about setting any authentication options in your code. So, for example, if you created and downloaded the credential file for your Discovery instance, you just need to do the following:\n\n```java\nDiscovery service = new Discovery("2019-04-30");\n```\n\nAnd that\'s it!\n\nIf you\'re using more than one service at a time in your code and get two different `ibm-credentials.env` files, just put the contents together in one `ibm-credentials.env` file and the SDK will handle assigning credentials to their appropriate services.\n\nIf you would like to configure the location/name of your credential file, you can set an environment variable called `IBM_CREDENTIALS_FILE`. **This will take precedence over the locations specified above.** Here\'s how you can do that:\n\n```bash\nexport IBM_CREDENTIALS_FILE="<path>"\n```\n\nwhere `<path>` is something like `/home/user/Downloads/<file_name>.env`.\n\n#### Manually\n\nIf you\'d prefer to set authentication values manually in your code, the SDK supports that as well. The way you\'ll do this depends on what type of credentials your service instance gives you.\n\n##### IAM\n\nSome services use token-based Identity and Access Management (IAM) authentication. IAM authentication uses a service API key to get an access token that is passed with the call. Access tokens are valid for approximately one hour and must be regenerated.\n\nYou supply either an IAM service **API key** or an **access token**:\n\n- Use the API key to have the SDK manage the lifecycle of the access token. The SDK requests an access token, ensures that the access token is valid, and refreshes it if necessary.\n- Use the access token if you want to manage the lifecycle yourself. For details, see [Authenticating with IAM tokens](https://cloud.ibm.com/docs/services/watson/getting-started-iam.html).\n\n\nSupplying the IAM API key:\n\n```java\n// letting the SDK manage the IAM token\nAuthenticator authenticator = new IamAuthenticator("<iam_api_key>");\nDiscovery service = new Discovery("2019-04-30", authenticator);\n```\n\nSupplying the access token:\n\n```java\n// assuming control of managing IAM token\nAuthenticator authenticator = new BearerTokenAuthenticator("<access_token>");\nDiscovery service = new Discovery("2019-04-30", authenticator);\n```\n\n#### Username and password\n\n```java\nAuthenticator authenticator = new BasicAuthenticator("<username>", "<password>");\nDiscovery service = new Discovery("2019-04-30", authenticator);\n```\n\n#### ICP\nAuthenticating with ICP is similar to the basic username and password method, except that you need to make sure to disable SSL verification to authenticate properly. See [here](#configuring-the-http-client) for more information.\n\n```java\nAuthenticator authenticator = new BasicAuthenticator("<username>", "<password>");\nDiscovery service = new Discovery("2019-04-30", authenticator);\n\nHttpConfigOptions options = new HttpConfigOptions.Builder()\n  .disableSslVerification(true)\n  .build();\n\nservice.configureClient(options);\n```\n\n#### Cloud Pak for Data\nLike IAM, you can pass in credentials to let the SDK manage an access token for you or directly supply an access token to do it yourself.\n\n```java\n// letting the SDK manage the token\nAuthenticator authenticator = new CloudPakForDataAuthenticator(\n  "<CP4D token exchange base URL>",\n  "<username>",\n  "<password>",\n  true, // disabling SSL verification\n  null,\n);\nDiscovery service = new Discovery("2019-04-30", authenticator);\nservice.setServiceUrl("<service CP4D URL>");\n```\n\n```java\n// assuming control of managing the access token\nAuthenticator authenticator = new BearerTokenAuthenticator("<access_token>");\nDiscovery service = new Discovery("2019-04-30", authenticator);\nservice.setServiceUrl("<service CP4D URL>");\n```\n\nBe sure to both disable SSL verification when authenticating and set the endpoint explicitly to the URL given in Cloud Pak for Data.\n\n## Using the SDK\n\n### Parsing responses\n\nNo matter which method you use to make an API request (`execute()`, `enqueue()`, or `reactiveRequest()`), you\'ll get back an object of form `Response<T>`, where `T` is the model representing the specific response model.\n\nHere\'s an example of how to parse that response and get additional information beyond the response model:\n\n```java\n// listing our workspaces with an instance of the Assistant v1 service\nResponse<WorkspaceCollection> response = service.listWorkspaces().execute();\n\n// pulling out the specific API method response, which we can manipulate as usual\nWorkspaceCollection collection = response.getResult();\nSystem.out.println("My workspaces: " + collection.getWorkspaces());\n\n// grabbing headers that came back with our API response\nHeaders responseHeaders = response.getHeaders();\nSystem.out.println("Response header names: " + responseHeaders.names());\n```\n\n### Configuring the HTTP client\n\nThe HTTP client can be configured by using the `configureClient()` method on your service object, passing in an `HttpConfigOptions` object. Currently, the following options are supported:\n- Disabling SSL verification (only do this if you really mean to!) \xe2\x9a\xa0\xef\xb8\x8f\n- Using a proxy (more info here: [OkHTTPClient Proxy authentication how to?](https://stackoverflow.com/a/35567936/456564))\n- Setting HTTP logging verbosity\n\nHere\'s an example of setting the above:\n\n```java\nDiscovery service = new Discovery("2019-04-30");\n\n// setting configuration options\nHttpConfigOptions options = new HttpConfigOptions.Builder()\n  .disableSslVerification(true)\n  .proxy(new Proxy(Proxy.Type.HTTP, new InetSocketAddress("proxyHost", 8080)))\n  .loggingLevel(HttpConfigOptions.LoggingLevel.BASIC)\n  .build();\n\nservice.configureClient(options);\n```\n\n### Making asynchronous API calls\n\nThe basic, synchronous way to make API calls with this SDK is through the use of the `execute()` method. Using this method looks something like this:\n```java\n// make API call\nResponse<ListEnvironmentsResponse> response = service.listEnvironments().execute();\n\n// continue execution\n```\n\nHowever, if you need to perform these calls in the background, there are two other methods to do this asynchronously: `enqueue()` and `reactiveRequest()`.\n\n#### `enqueue()`\n\nThis method allows you to set a callback for the service response through the use of the `ServiceCallback` object. Here\'s an example:\n```java\n// make API call in the background\nservice.listEnvironments().enqueue(new ServiceCallback<ListEnvironmentsResponse>() {\n  @Override\n  public void onResponse(Response<ListEnvironmentsResponse> response) {\n    System.out.println("We did it! " + response);\n  }\n\n  @Override\n  public void onFailure(Exception e) {\n    System.out.println("Whoops...");\n  }\n});\n\n// continue working in the meantime!\n```\n\n#### `reactiveRequest()`\n\nIf you\'re a fan of the [RxJava](https://github.com/ReactiveX/RxJava) library, this method lets you leverage that to allow for "reactive" programming. The method will return a `Single<T>` which you can manipulate how you please. Example:\n```java\n// get stream with request\nSingle<Response<ListEnvironmentsResponse>> observableRequest\n  = service.listEnvironments().reactiveRequest();\n\n// make API call in the background\nobservableRequest\n  .subscribeOn(Schedulers.single())\n  .subscribe(response -> System.out.println("We did it with s~t~r~e~a~m~s! " + response));\n\n// continue working in the meantime!\n```\n\n### Default headers\n\nDefault headers can be specified at any time by using the `setDefaultHeaders(Map<String, String> headers)` method.\n\nThe example below sends the `X-Watson-Learning-Opt-Out` header in every request preventing Watson from using the payload to improve the service.\n\n```java\nPersonalityInsights service = new PersonalityInsights("2017-10-13", new NoAuthAuthenticator());\n\nMap<String, String> headers = new HashMap<String, String>();\nheaders.put(WatsonHttpHeaders.X_WATSON_LEARNING_OPT_OUT, "true");\n\nservice.setDefaultHeaders(headers);\n\n// All the api calls from now on will send the default headers\n```\n\n### Sending request headers\n\nCustom headers can be passed with any request. To do so, add the header to the `ServiceCall` object before executing the request. For example, this is what it looks like to send the header `Custom-Header` along with a call to the Watson Assistant service:\n\n```java\nResponse<WorkspaceCollection> workspaces = service.listWorkspaces()\n  .addHeader("Custom-Header", "custom_value")\n  .execute();\n```\n\n### Canceling requests\n\nIt\'s possible that you may want to cancel a request you make to a service. For example, you may set some timeout threshold and just want to cancel an asynchronous if it doesn\'t respond in time. You can do that by calling the `cancel()` method on your `ServiceCall` object. For example:\n\n```java\n// time to consider timeout (in ms)\nlong timeoutThreshold = 3000;\n\n// storing ServiceCall object we\'ll use to list our Assistant v1 workspaces\nServiceCall<WorkspaceCollection> call = service.listWorkspaces();\n\nlong startTime = System.currentTimeMillis();\ncall.enqueue(new ServiceCallback<WorkspaceCollection>() {\n  @Override\n  public void onResponse(Response<WorkspaceCollection> response) {\n    // store the result somewhere\n    fakeDb.store("my-key", response.getResult());\n  }\n\n  @Override\n  public void onFailure(Exception e) {\n    System.out.println("The request failed :(");\n  }\n});\n\n// keep waiting for the call to complete while we\'re within the timeout bounds\nwhile ((fakeDb.retrieve("my-key") == null) && (System.currentTimeMillis() - startTime < timeoutThreshold)) {\n  Thread.sleep(500);\n}\n\n// if we timed out and it\'s STILL not complete, we\'ll just cancel the call\nif (fakeDb.retrieve("my-key") == null) {\n    call.cancel();\n}\n```\n\nDoing so will call your `onFailure()` implementation.\n\n## FAQ\n\n### Does this SDK play well with Android?\n\nIt does! You should be able to plug this dependency into your Android app without any issue. In addition, we have an Android SDK meant to be used with this library that adds some Android-specific functionality, which you can find [here](https://github.com/watson-developer-cloud/android-sdk).\n\n### How can I contribute?\n\nGreat question (and please do)! You can find contributing information [here](.github/CONTRIBUTING.md).\n\n### Where can I get more help with using Watson APIs?\n\nIf you have a question about/problem with using the Watson APIs in general, feel free to ask a question on [dW Answers](https://developer.ibm.com/answers/questions/ask/?topics=watson) or trusty [Stack Overflow](http://stackoverflow.com/questions/ask?tags=ibm-watson).\n\n### Does IBM have any other open source work?\n\nWe do :sunglasses:  http://ibm.github.io/\n\n[wdc]: https://www.ibm.com/watson/developer/\n[ibm_cloud]: https://cloud.ibm.com\n[apache_maven]: http://maven.apache.org/\n[vcap_services]: https://cloud.ibm.com/docs/services/watson/getting-started-variables.html\n[ibm-cloud-onboarding]: http://cloud.ibm.com/registration?target=/developer/watson&cm_sp=WatsonPlatform-WatsonServices-_-OnPageNavLink-IBMWatson_SDKs-_-Java\n\n## Featured projects\nWe\'d love to highlight cool open-source projects that use this SDK! If you\'d like to get your project added to the list, feel free to make an issue linking us to it.\n\n[jar]: https://github.com/watson-developer-cloud/java-sdk/releases/download/java-sdk-8.0.1/ibm-watson-8.0.1-jar-with-dependencies.jar\n\n## Contributors \xe2\x9c\xa8\n\nThanks goes to these wonderful people ([emoji key](https://allcontributors.org/docs/en/emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n<table>\n  <tr>\n    <td align="center"><a href="https://www.linkedin.com/in/logan-patino/"><img src="https://avatars2.githubusercontent.com/u/8710772?v=4" width="100px;" alt="Logan Patino"/><br /><sub><b>Logan Patino</b></sub></a><br /><a href="https://github.com/watson-developer-cloud/java-sdk/commits?author=lpatino10" title="Code">\xf0\x9f\x92\xbb</a> <a href="#design-lpatino10" title="Design">\xf0\x9f\x8e\xa8</a> <a href="https://github.com/watson-developer-cloud/java-sdk/issues?q=author%3Alpatino10" title="Bug reports">\xf0\x9f\x90\x9b</a></td>\n  </tr>\n</table>\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind welcome!\n'