b'# gradle-completion\nBash and Zsh completion support for [Gradle](https://gradle.org).\n\nThis provides _fast_ tab completion for:\n\n * Gradle tasks for the current project and sub-projects\n * Gradle CLI switches (e.g. `--parallel`)\n * Common Gradle properties (e.g. `-Dorg.gradle.debug`)\n\nIt also handles custom default build files, so `rootProject.buildFileName = \'build.gradle.kts\'` is supported.\n\nSee instructions [for bash](https://github.com/gradle/gradle-completion/blob/master/README.md#installation-for-bash-32) or [for zsh](https://github.com/gradle/gradle-completion/blob/master/README.md#installation-for-zsh-50), then consider optional [additional configuration](https://github.com/gradle/gradle-completion/blob/master/README.md#additional-configuration).\n\nHere\'s a demo for the gradle project itself:\n![Completion demo](gradle-completion-4.0.gif)\n\n## Installation for Zsh 5.0+\n\n### Install via [Homebrew](https://brew.sh)\n\n```\nbrew install gradle-completion\n\n# Ensure /usr/local/share/zsh/site-functions is on $fpath. You should get a result from the following\necho $fpath | grep "/usr/local/share/zsh/site-functions"\n```\n\n### Install as [oh-my-zsh](https://ohmyz.sh/) plugin\n\nDownload and place the plugin and completion script into your oh-my-zsh plugins directory. \n```\ngit clone git://github.com/gradle/gradle-completion ~/.oh-my-zsh/plugins/gradle-completion\n```\n\nAdd `gradle-completion` to the plugins array in your \'.zshrc\' file.\n```\nplugins+=(gradle-completion)\n```\n\n### Install manually\n\nDownload and place `_gradle` on your `$fpath`. I recommend `$HOME/.zsh/gradle-completion`:\n```\ngit clone git://github.com/gradle/gradle-completion ~/.zsh/gradle-completion\n```\n\nAdd the following do your \'.zshrc\' file:\n```\necho "\\nfpath=($HOME/.zsh/gradle-completion \\$fpath)" >> ~/.zshrc\n```\n\nStart a new terminal session. You may need to disable the `gradle` plugin for `oh-my-zsh`.\n\n#### (Optional) Manual Completion Cache Initialization\nCompletion cache initialization happens the first time you invoke completion,\nand usually takes a few seconds, depending on the size of your project. You can\nmanually initialize the cache and avoid interrupting your development mojo by\nrunning:\n\n```bash\ncd path/to/your-project\nsource ~/.zsh/gradle-completion/_gradle 1>&2 2>/dev/null; __gradle-completion-init\n```\n\n## Installation for Bash 3.2+\n\n### Install via [Homebrew](https://brew.sh)\n\n```\nbrew install gradle-completion\n\n# Source completion scripts from bash-completion in your bash profile\necho \'[[ -r "/usr/local/etc/profile.d/bash_completion.sh" ]] && . "/usr/local/etc/profile.d/bash_completion.sh"\' >> ~/.bash_profile\n\n# Load changes to bash profile\nsource ~/.bash_profile\n```\n\n### Install manually\n\nDownload and place `gradle-completion.bash` in your `bash_completion.d` folder, usually `/etc/bash_completion.d`, `/usr/local/etc/bash_completion.d`, or `$HOME/bash_completion.d`:\n```\nmkdir $HOME/bash_completion.d\ncurl -LA gradle-completion https://edub.me/gradle-completion-bash -o $HOME/bash_completion.d/gradle-completion.bash\n```\n\nNOTE: Ensure `bash-completion` 1.2+ is installed using your favorite package manager or by following the [bash-completion installation instructions](https://github.com/scop/bash-completion/blob/master/README.md#installation).\n\nAdd the following to your `.bash_profile` (macOS) or `.bashrc` (Linux) file:\n```\nsource $HOME/bash_completion.d/gradle-completion.bash\n```\n\nStart a new terminal session.\n\n#### (Optional) Manual Completion Cache Initialization\nCompletion cache initialization happens the first time you invoke completion,\nand usually takes a few seconds, depending on the size of your project. You can\nmanually initialize the cache and avoid interrupting your development mojo by\nrunning:\n\n```bash\ncd path/to/your-project\n__gradle-completion-init\n```\n\n## Additional Configuration\n\n#### Excluding build scripts from UP-TO-DATE check\nTab completion checks known build scripts to see if they\'ve been changed and refreshes the task cache if so.\nYou can exclude build scripts from this check (and speed up completion) by specifying:\n\n```bash\n# Default is `"/(build|integTest|out)/"`\nexport GRADLE_COMPLETION_EXCLUDE_PATTERN="/(build|integTest|samples|smokeTest|testFixtures|templates|out|features)/"\n# Essentially turn off checking for changed scripts\nexport GRADLE_COMPLETION_EXCLUDE_PATTERN="gradle"\n```\n\n#### Completion cache\nOne can manually (re)generate the completion cache by invoking `__gradle-completion-init` after the\ncompletion script has been sourced. This graciously avoids an unexpected cache build when invoking\ncompletion.\n\nThe build script cache is invalidated if any *.gradle or *.gradle.kts files change.\nHowever, these completion scripts do not search for new build scripts every time completion is invoked, because\nthat would make completion ~20x slower (unless you have so really good ideas on this).\n\nBy default, the build script cache is invalidated every 3 weeks (30240 minutes).\nYou can configure this value by exporting a new value for `$GRADLE_CACHE_TTL_MINUTES`:\n```bash\nexport GRADLE_CACHE_TTL_MINUTES=$(expr 1440 \\* number_of_days_you_want)\n```\n\n#### Implicit Tasks\nGradle allows you to access tasks of subprojects from the project root implicitly.\nFor example, given these tasks:\n```\n:foo\n:help\n:bar:baz\n```\n\nYou can execute `gradle baz` from the project root and it will execute `:bar:baz`.\n\ngradle-completion will not tab complete these tasks by default because it adds a\nsignificant number of completion options, which may not be what you want and\nnegatively impacts completion speed.\n\nTo allow completion of implicit tasks, set `$GRADLE_COMPLETION_UNQUALIFIED_TASKS=true`:\n\n```bash\nexport GRADLE_COMPLETION_UNQUALIFIED_TASKS="true"\n```\n\nYou may need to invalidate the cache using the cache config above or by executing `touch build.gradle`.\n\n## Troubleshooting\nIf zsh completion isn\'t working, first try checking your `$fpath` with `echo $fpath`.\n\nzsh completion using `./gradlew` may not work on Linux if you don\'t have `.` on your `$PATH`,\nso I recommend adding it in your `~/.zshrc` file:\n```bash\nexport PATH=".:$PATH"\n```\n\n> HEADS UP: If you get an error \'parse error near `]]"\', please [upgrade zsh](http://stackoverflow.com/questions/17648621/how-do-i-update-zsh-to-the-latest-version).\nzsh 5.0.5 has a bug in script parsing that is fixed as of zsh 5.0.8. See issues #4 and #7 for more details.\n\nIf zsh completion reports "Generating Gradle task cache..." every time, the zsh completion cache\nmay be disabled. Enable it by adding the following to your `~/.zshrc` file:\n```bash\nzstyle \':completion:*\' use-cache on\n```\n\n## Contributing\n\nSee the [contributing guide](CONTRIBUTING.md).\n\n## Acknowledgements\nBash completion is inspired by [Nolan Lawson\'s Gradle tab completion for bash](https://gist.github.com/nolanlawson/8694399).\n\nZsh completion is an improved version of [zsh](https://github.com/zsh-users/zsh)\'s built-in Gradle completion.\n\nCurrent improvements over built-in support:\n - Subproject tasks are completed\n - Gradle CLI options are current as of Gradle 5.2\n - Common Gradle properties are completed\n - Handles default build file as specified in settings.gradle\n - ~20x faster completion speed for medium to large projects\n - Completion cache updates in the background after first invocation\n'