b'# Resizer\n[![Android Arsenal](https://img.shields.io/badge/Android%20Arsenal-Resizer-green.svg?style=flat)](https://android-arsenal.com/details/1/6155) [![](https://jitpack.io/v/hkk595/Resizer.svg)](https://jitpack.io/#hkk595/Resizer)\n\n<p align="center"><img width="50%" height="auto" src="https://raw.githubusercontent.com/hkk595/Resizer/master/app/src/main/res/drawable/library_logo.png"/></p>\n\nInspired by zetbaitsu\'s [Compressor](https://github.com/zetbaitsu/Compressor), Resizer is a lightweight and easy-to-use Android library for image scaling. It allows you to resize an image file to a smaller or bigger one while keeping the aspect ratio.\n\n#### Include Resizer into your project\n1. Add the JitPack repository to your top-level build.gradle at the end of repositories\n```groovy\nallprojects {\n    repositories {\n        maven { url \'https://jitpack.io\' }\n    }\n}\n```\n2. Add the dependency in your module-level build.gradle\n```groovy\ndependencies {\n    compile \'com.github.hkk595:Resizer:v1.5\'\n}\n```\n\n#### Pass in the original image file and get the resized image as a new file\n```java\nFile resizedImage = new Resizer(this)\n        .setTargetLength(1080)\n        .setQuality(80)\n        .setOutputFormat("JPEG")\n        .setOutputFilename("resized_image")\n        .setOutputDirPath(storagePath)\n        .setSourceImage(originalImage)\n        .getResizedFile();\n```\n#### Pass in the original image file and get the resized image as a new bitmap\n```java\nBitmap resizedImage = new Resizer(this)\n        .setTargetLength(1080)\n        .setSourceImage(originalImage)\n        .getResizedBitmap();\n```\nNote: You only need to specify the target length (in pixel) of the longer side (or either side if it\'s a square) of the image. Resizer will calculate the rest automatically.\n\n#### Using RxJava 2 with RxAndroid to get the resized image asynchronously\n```java\nfinal File[] resizedImage = new File[1];\nnew Resizer(this)\n        .setTargetLength(1080)\n        .setQuality(80)\n        .setOutputFormat("JPEG")\n        .setOutputFilename("resized_image")\n        .setOutputDirPath(storagePath)\n        .setSourceImage(originalImage)\n        .getResizedFileAsFlowable()\n        .subscribeOn(Schedulers.io())\n        .observeOn(AndroidSchedulers.mainThread())\n        .subscribe(new Consumer<File>() {\n            @Override\n            public void accept(File file) {\n                resizedImage[0] = file;\n            }\n        }, new Consumer<Throwable>() {\n            @Override\n            public void accept(Throwable throwable) {\n                throwable.printStackTrace();\n            }\n        });\n```\n```java\nfinal Bitmap[] resizedImage = new Bitmap[1];\nnew Resizer(this)\n        .setTargetLength(1080)\n        .setSourceImage(originalImage)\n        .getResizedBitmapAsFlowable()\n        .subscribeOn(Schedulers.io())\n        .observeOn(AndroidSchedulers.mainThread())\n        .subscribe(new Consumer<Bitmap>() {\n            @Override\n            public void accept(Bitmap bitmap) {\n                resizedImage[0] = bitmap;\n            }\n        }, new Consumer<Throwable>() {\n            @Override\n            public void accept(Throwable throwable) {\n                throwable.printStackTrace();\n            }\n        });\n```\nNote: You don\'t need to declare the new image as final nor array if it\'s an instance variable of the class, instead of a local variable in a function.\n\n#### Refer to the [JavaDoc](https://hkk595.github.io/Resizer) for more details.\n\n#### Library specification\n    Minimum SDK: API 16\n     \n    Default settings:\n    targetLength: 1080\n    quality: 80\n    outputFormat: JPEG\n    outputFilename: same as the source file\n    outputDirPath: the external files directory of your app\n     \n    Supported input formats:\n    BMP\n    GIF\n    JPEG\n    PNG\n    WEBP\n     \n    Supported output formats:\n    JPEG\n    PNG\n    WEBP\n     \n    Supported quality range: 0~100\n    The higher value, the better image quality but larger file size\n    PNG, which is a lossless format, will ignore the quality setting\n\n## License\n    MIT License\n     \n    Copyright (c) 2017 K.K. Ho\n     \n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the "Software"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n     \n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n     \n    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE.\n'