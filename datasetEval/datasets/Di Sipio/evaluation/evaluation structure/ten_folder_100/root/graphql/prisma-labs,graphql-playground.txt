b'<p align="center"><img src="https://imgur.com/5fzMbyV.png" width="269"></p>\n\n[![npm version](https://badge.fury.io/js/graphql-playground-react.svg)](https://badge.fury.io/js/graphql-playground-react) [![CircleCI](https://circleci.com/gh/prisma/graphql-playground.svg?style=shield)](https://circleci.com/gh/prisma/graphql-playground)\n\nGraphQL IDE for better development workflows (GraphQL Subscriptions, interactive docs & collaboration). <br />\n**You can download the [desktop app](https://github.com/prisma/graphql-playground/releases) or use the web version at graphqlbin.com: [Demo](https://graphqlbin.com/v2/6RQ6TM)**\n\n[![](https://i.imgur.com/AE5W6OW.png)](https://graphqlbin.com/v2/6RQ6TM)\n\n## Installation\n\n```sh\n$ brew cask install graphql-playground\n```\n\n## Features\n\n- \xe2\x9c\xa8 Context-aware autocompletion & error highlighting\n- \xf0\x9f\x93\x9a Interactive, multi-column docs (keyboard support)\n- \xe2\x9a\xa1\xef\xb8\x8f Supports real-time GraphQL Subscriptions\n- \xe2\x9a\x99 GraphQL Config support with multiple Projects & Endpoints\n- \xf0\x9f\x9a\xa5 Apollo Tracing support\n\n## FAQ\n\n### How is this different from [GraphiQL](https://github.com/graphql/graphiql)?\n\nGraphQL Playground uses components of GraphiQL under the hood but is meant as a more powerful GraphQL IDE enabling better (local) development workflows. Compared to GraphiQL, the GraphQL Playground ships with the following additional features:\n\n- Interactive, multi-column schema documentation\n- Automatic schema reloading\n- Support for GraphQL Subscriptions\n- Query history\n- Configuration of HTTP headers\n- Tabs\n\nSee the following question for more additonal features.\n\n### What\'s the difference between the desktop app and the web version?\n\nThe desktop app is the same as the web version but includes these additional features:\n\n- Partial support for [graphql-config](https://github.com/prismagraphql/graphql-config) enabling features like multi-environment setups (no support for sending HTTP headers).\n- Double click on `*.graphql` files.\n\n### How does GraphQL Bin work?\n\nYou can easily share your Playgrounds with others by clicking on the "Share" button and sharing the generated link. You can think about GraphQL Bin like Pastebin for your GraphQL queries including the context (endpoint, HTTP headers, open tabs etc).\n\n<a href="https://graphqlbin.com/OksD" target="_blank">\n <img src="https://camo.githubusercontent.com/daf8c64dbde3097fdbe782c0645552550d530a73/68747470733a2f2f696d6775722e636f6d2f48316e36346c4c2e706e67" alt="" data-canonical-src="https://imgur.com/H1n64lL.png" style="max-width:100%;">\n</a>\n\n> You can also find the announcement blog post [here](https://blog.graph.cool/introducing-graphql-playground-f1e0a018f05d).\n\n## Settings\n\nIn the top right corner of the Playground window you can click on the settings icon.\nThese are the settings currently available:\n\n```js\n{\n  \'editor.cursorShape\': \'line\', // possible values: \'line\', \'block\', \'underline\'\n  \'editor.fontFamily\': `\'Source Code Pro\', \'Consolas\', \'Inconsolata\', \'Droid Sans Mono\', \'Monaco\', monospace`,\n  \'editor.fontSize\': 14,\n  \'editor.reuseHeaders\': true, // new tab reuses headers from last tab\n  \'editor.theme\': \'dark\', // possible values: \'dark\', \'light\'\n  \'general.betaUpdates\': false,\n  \'prettier.printWidth\': 80,\n  \'prettier.tabWidth\': 2,\n  \'prettier.useTabs\': false,\n  \'request.credentials\': \'omit\', // possible values: \'omit\', \'include\', \'same-origin\'\n  \'schema.polling.enable\': true, // enables automatic schema polling\n  \'schema.polling.endpointFilter\': \'*localhost*\', // endpoint filter for schema polling\n  \'schema.polling.interval\': 2000, // schema polling interval in ms\n  \'schema.disableComments\': boolean,\n  \'tracing.hideTracingResponse\': true,\n}\n```\n\n## Usage\n\n### Properties\n\nThe React component `<Playground />` and all middlewares expose the following options:\n\n- `props` (Middlewares & React Component)\n  - `endpoint` [`string`](optional) - the GraphQL endpoint url.\n  - `subscriptionEndpoint` [`string`](optional) - the GraphQL subscriptions endpoint url.\n  - `workspaceName` [`string`](optional) - in case you provide a GraphQL Config, you can name your workspace here\n  - `config` [`string`](optional) - the JSON of a GraphQL Config. See an example [here](https://github.com/prismagraphql/graphql-playground/blob/master/packages/graphql-playground-react/src/localDevIndex.tsx#L47)\n  - `settings` [`ISettings`](optional) - Editor settings in json format as [described here](https://github.com/prismagraphql/graphql-playground#settings)\n\n```ts\ninterface ISettings {\n  \'editor.cursorShape\': \'line\' | \'block\' | \'underline\'\n  \'editor.fontFamily\': string\n  \'editor.fontSize\': number\n  \'editor.reuseHeaders\': boolean\n  \'editor.theme\': \'dark\' | \'light\'\n  \'general.betaUpdates\': boolean\n  \'prettier.printWidth\': number\n  \'prettier.tabWidth\': number\n  \'prettier.useTabs\': boolean\n  \'request.credentials\': \'omit\' | \'include\' | \'same-origin\'\n  \'schema.polling.enable\': boolean\n  \'schema.polling.endpointFilter\': string\n  \'schema.polling.interval\': number\n  \'schema.disableComments\': boolean\n  \'tracing.hideTracingResponse\': boolean\n}\n```\n\n- `schema` [`IntrospectionResult`](optional) - The result of an introspection query (an object of this form: `{__schema: {...}}`) The playground automatically fetches the schema from the endpoint. This is only needed when you want to override the schema.\n- `tabs` [`Tab[]`](optional) - An array of tabs to inject. **Note: When using this feature, tabs will be resetted each time the page is reloaded**\n\n```ts\ninterface Tab {\n\tendpoint: string\n\tquery: string\n\tname?: string\n\tvariables?: string\n\tresponses?: string[]\n\theaders?: { [key: string]: string }\n}\n```\n\nIn addition to this, the React app provides some more properties:\n\n- `props` (React Component)\n- `createApolloLink` [`(session: Session, subscriptionEndpoint?: string) => ApolloLink`] - this is the equivalent to the `fetcher` of GraphiQL. For each query that is being executed, this function will be called\n\n`createApolloLink` is only available in the React Component and not the middlewares, because the content must be serializable as it is being printed into a HTML template.\n\n### As HTML Page\n\nIf you simply want to render the Playground HTML on your own, for example when implementing a GraphQL Server, there are 2 options for you:\n\n1.  [The bare minimum HTML needed to render the Playground](https://github.com/prismagraphql/graphql-playground/blob/master/packages/graphql-playground-html/minimal.html)\n2.  [The Playground HTML with full loading animation](https://github.com/prismagraphql/graphql-playground/blob/master/packages/graphql-playground-html/withAnimation.html)\n\nNote: In case you do not want to serve assets from a CDN (like jsDelivr) and instead use a local copy, you will need to install `graphql-playground-react` from npm, and then replace all instances of `//cdn.jsdelivr.net/npm` with `./node_modules`. An example can be found [here](https://github.com/prismagraphql/graphql-playground/blob/master/packages/graphql-playground-html/minimalWithoutCDN.html)\n\n### As React Component\n\n#### Install\n\n```sh\nyarn add graphql-playground-react\n```\n\n#### Use\n\nGraphQL Playground provides a React component responsible for rendering the UI and Session management.\nThere are **3 dependencies** needed in order to run the `graphql-playground-react` React component.\n\n1.  _Open Sans_ and _Source Code Pro_ fonts\n2.  Rendering the `<Playground />` component\n\nThe GraphQL Playground requires **React 16**.\n\nIncluding Fonts (`1.`)\n\n```html\n<link\n\thref="https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700|Source+Code+Pro:400,700"\n\trel="stylesheet"\n/>\n```\n\nIncluding stylesheet and the component (`2., 3.`)\n\n```js\nimport React from \'react\'\nimport ReactDOM from \'react-dom\'\nimport { Provider } from \'react-redux\'\nimport { Playground, store } from \'graphql-playground-react\'\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<Playground endpoint="https://api.graph.cool/simple/v1/swapi" />\n\t</Provider>,\n\tdocument.body,\n)\n```\n\n### As Server Middleware\n\n#### Install\n\n```sh\n# Pick the one that matches your server framework\nyarn add graphql-playground-middleware-express  # for Express or Connect\nyarn add graphql-playground-middleware-hapi\nyarn add graphql-playground-middleware-koa\nyarn add graphql-playground-middleware-lambda\n```\n\n#### Usage with example\n\nWe have a full example for each of the frameworks below:\n\n- **Express:** See [packages/graphql-playground-middleware-express/examples/basic](https://github.com/prismagraphql/graphql-playground/tree/master/packages/graphql-playground-middleware-express/examples/basic)\n\n- **Hapi:** See [packages/graphql-playground-middleware-hapi](https://github.com/prismagraphql/graphql-playground/tree/master/packages/graphql-playground-middleware-hapi)\n\n- **Koa:** See [packages/graphql-playground-middleware-koa](https://github.com/prismagraphql/graphql-playground/tree/master/packages/graphql-playground-middleware-koa)\n\n- **Lambda (as serverless handler):** See [serverless-graphql-apollo](https://github.com/serverless/serverless-graphql-apollo) or a quick example below.\n\n### As serverless handler\n\n#### Install\n\n```sh\nyarn add graphql-playground-middleware-lambda\n```\n\n#### Usage\n\n`handler.js`\n\n```js\nimport lambdaPlayground from \'graphql-playground-middleware-lambda\'\n// or using require()\n// const lambdaPlayground = require(\'graphql-playground-middleware-lambda\').default\n\nexports.graphqlHandler = function graphqlHandler(event, context, callback) {\n\tfunction callbackFilter(error, output) {\n\t\t// eslint-disable-next-line no-param-reassign\n\t\toutput.headers[\'Access-Control-Allow-Origin\'] = \'*\'\n\t\tcallback(error, output)\n\t}\n\n\tconst handler = graphqlLambda({ schema: myGraphQLSchema })\n\treturn handler(event, context, callbackFilter)\n}\n\nexports.playgroundHandler = lambdaPlayground({\n\tendpoint: \'/dev/graphql\',\n})\n```\n\n`serverless.yml`\n\n```yaml\nfunctions:\n  graphql:\n    handler: handler.graphqlHandler\n    events:\n      - http:\n          path: graphql\n          method: post\n          cors: true\n  playground:\n    handler: handler.playgroundHandler\n    events:\n      - http:\n          path: playground\n          method: get\n          cors: true\n```\n\n## Development\n\n```sh\n$ cd packages/graphql-playground-react\n$ yarn\n$ yarn start\n```\n\nOpen\n[localhost:3000/localDev.html?endpoint=https://api.graph.cool/simple/v1/swapi](http://localhost:3000/localDev.html?endpoint=https://api.graph.cool/simple/v1/swapi) for local development!\n\n## Custom Theme\n\nFrom `graphql-playground-react@1.7.0` on you can provide a `codeTheme` property to the React Component to customize your color theme.\nThese are the available options:\n\n```ts\nexport interface EditorColours {\n\tproperty: string\n\tcomment: string\n\tpunctuation: string\n\tkeyword: string\n\tdef: string\n\tqualifier: string\n\tattribute: string\n\tnumber: string\n\tstring: string\n\tbuiltin: string\n\tstring2: string\n\tvariable: string\n\tmeta: string\n\tatom: string\n\tws: string\n\tselection: string\n\tcursorColor: string\n\teditorBackground: string\n\tresultBackground: string\n\tleftDrawerBackground: string\n\trightDrawerBackground: string\n}\n```\n\n### Versions\n\nThis is repository is a "mono repo" and contains multiple packages using [Yarn workspaces](https://yarnpkg.com/lang/en/docs/workspaces/). Please be aware that versions are **not** synchronised between packages. The versions of the [release page](https://github.com/graphcool/graphql-playground/releases) refer to the electron app.\n\n### Packages\n\nIn the folder `packages` you\'ll find the following packages:\n\n- `graphql-playground-electron`: Cross-platform electron app which uses `graphql-playground-react`\n- `graphql-playground-html`: Simple HTML page rendering a version of `graphql-playground-react` hosted on JSDeliver\n- `graphql-playground-middleware-express`: Express middleware using `graphql-playground-html`\n- `graphql-playground-middleware-hapi`: Hapi middleware using `graphql-playground-html`\n- `graphql-playground-middleware-koa`: Koa middleware using `graphql-playground-html`\n- `graphql-playground-middleware-lambda`: AWS Lambda middleware using `graphql-playground-html`\n- `graphql-playground-react`: Core of GraphQL Playground built with ReactJS\n\n<a name="help-and-community" />\n\n## Help & Community [![Slack Status](https://slack.prisma.io/badge.svg)](https://slack.prisma.io)\n\nJoin our [Slack community](http://slack.graph.cool/) if you run into issues or have questions. We love talking to you!\n\n<p align="center"><a href="https://oss.prisma.io"><img src="https://imgur.com/IMU2ERq.png" alt="Prisma" height="170px"></a></p>\n'