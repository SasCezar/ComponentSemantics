b'<h1 align="center"><img src="vulcain.svg" alt="Vulcain: Use HTTP/2 Server Push to create fast and idiomatic client-driven REST APIs" title="Use HTTP/2 Server Push to create fast and idiomatic client-driven REST APIs"></h1>\n\nVulcain is a brand new protocol using HTTP/2 Server Push to create fast and idiomatic **client-driven REST** APIs.\n\nAn open source gateway server which you can put on top of **any existing web API** to instantly turn it into a Vulcain-compatible one is also provided!\n\nIt supports [hypermedia APIs](https://restfulapi.net/hateoas/) but also any "legacy" API by documenting its relations [using OpenAPI](docs/gateway/openapi.md).\n\n[![GoDoc](https://godoc.org/github.com/dunglas/vulcain?status.svg)](https://godoc.org/github.com/dunglas/vulcain/gateway)\n[![Build Status](https://github.com/dunglas/vulcain/workflows/CI/badge.svg)](https://github.com/dunglas/vulcain/actions)\n[![codecov](https://codecov.io/gh/dunglas/vulcain/branch/master/graph/badge.svg)](https://codecov.io/gh/dunglas/vulcain)\n[![Go Report Card](https://goreportcard.com/badge/github.com/dunglas/vulcain)](https://goreportcard.com/report/github.com/dunglas/vulcain)\n\n![Vulcain Schema](schemas/preload+fields-header.png)\n\nGrab What You Need... Burn The REST!\n\n* [Introduction](#introduction)\n  * [Pushing Relations](#pushing-relations)\n  * [Filtering Resources](#filtering-resources)\n* [Gateway Server](docs/gateway/)\n  * [Install](docs/gateway/install.md)\n  * [Configuration](docs/gateway/config.md)\n  * [Mapping a Non-Hypermedia API using OpenAPI](docs/gateway/openapi.md)\n* [Comparison with GraphQL and Other API Formats](docs/graphql.md)\n* [Using GraphQL as Query Language for Vulcain](docs/graphql.md#using-graphql-as-query-language-for-vulcain)\n* [Demo API](CONTRIBUTING.md)\n* [Cache Considerations](docs/cache.md)\n* [Formal Specification](spec/vulcain.md)\n* [Getting Help](docs/help.md)\n\nThe protocol has been published as [an Internet Draft](https://datatracker.ietf.org/doc/draft-dunglas-vulcain/) that [is maintained in this repository](spec/vulcain.md).\n\nA reference, production-grade, implementation [**gateway server**](docs/gateway/install.md) is also available in this repository.\nIt\'s free software (AGPL) written in Go. A Docker image is provided.\n\n## Introduction\n\nOver the years, several formats have been created to fix performance bottlenecks impacting web APIs: [over fetching, under fetching](https://stackoverflow.com/a/44568365/1352334), [the n+1 problem](https://restfulapi.net/rest-api-n-1-problem/)...\n\n[Current solutions for these problems (GraphQL, JSON:API\'s embedded resources and sparse fieldsets, ...)](docs/graphql.md) are smart [network hacks](https://apisyouwonthate.com/blog/lets-stop-building-apis-around-a-network-hack) for HTTP/1. But these hacks come with (too) many drawbacks when it comes to HTTP cache, logs and even security.\n\nFortunately, thanks to the new features introduced in HTTP/2, it\'s now possible to create true REST APIs fixing these problems with ease and class! Here comes Vulcain!\n\nSee also [the comparison between Vulcain and GraphQL and other API formats](docs/graphql.md).\n\n## Pushing Relations\n\n![Preload Schema](schemas/preload-header.png)\n\nConsidering the following resources:\n\n`/books`\n\n```json\n{\n    "member": [\n        "/books/1",\n        "/books/2"\n    ]\n}\n```\n\n`/books/1`\n\n```json\n{\n    "title": "1984",\n    "author": "/authors/1"\n}\n```\n\n`/books/2`\n\n```json\n{\n    "title": "Homage to Catalonia",\n    "author": "/authors/1"\n}\n```\n\n`/authors/1`\n\n```json\n{\n    "givenName": "George",\n    "familyName": "Orwell"\n}\n```\n\nThe `Preload` HTTP header introduced by Vulcain can be used to ask the server to immediately push resources related to the requested one using HTTP/2 Server Push:\n\n```http\nGET /books/ HTTP/2\nPreload: /member/*/author\n```\n\nIn addition to `/books`, a Vulcain server will use HTTP/2 Server Push to push the `/books/1`, `/books/2` and `/authors/1` resources!\n\nExample in JavaScript:\n\n```javascript\nconst bookResp = await fetch("/books/1", { headers: { Preload: "/author" } });\nconst bookJSON = await bookResp.json();\n\n// Returns immediately, the resource has been pushed and is already in the push cache\nconst authorResp = await fetch(bookJSON.author);\n// ...\n```\n\n[Full example, including collections](fixtures/static/main.js), see also [use GraphQL as query language for Vulcain](docs/graphql.md#using-graphql-as-query-language-for-vulcain).\n\nThanks to [HTTP/2 multiplexing](https://stackoverflow.com/a/36519379/1352334), pushed responses will be sent in parallel.\n\nWhen the client will follow the links and issue a new HTTP request (for instance using `fetch()`), the corresponding response will already be in cache, and will be used instantly!\n\nFor non-hypermedia APIs (when the identifier of the related resource is a simple string or int), [use an OpenAPI specification to configure links between resources](docs/gateway/openapi.md).\nTip: the easiest way to create a hypermedia API is to use [the API Platform framework](https://api-platform.com) (by the same author as Vulcain).\n\n[More than 90% of users](https://caniuse.com/#feat=http2) have devices supporting HTTP/2. However, for the remaining 10%, and for cases where using HTTP/2 Server Push isn\'t allowed such as when resources are [served by different authorities](https://tools.ietf.org/html/rfc7540#section-10.1), Vulcain allows to gracefully fallback to [`preload` links](https://www.w3.org/TR/preload/), which can be used together with [the 103 status code](https://tools.ietf.org/html/rfc8297).\n\n### Query Parameter\n\nAlternatively to HTTP headers, the `preload` query parameter can be used:\n\n![Preload Query Schema](schemas/preload-query.png)\n\n## Filtering Resources\n\n![Fields Schema](schemas/fields-header.png)\n\nThe `Fields` HTTP header allows the client to ask the server to return only the specified fields of the requested resource, and of the preloaded related resources.\n\nMultiple `Fields` HTTP headers can be passed. All fields matching at least one of these headers will be returned. Other fields of the resource  will be omitted.\n\nConsidering the following resources:\n\n`/books/1`\n\n```json\n{\n    "title": "1984",\n    "genre": "novel",\n    "author": "/authors/1"\n}\n```\n\n`/authors/1`\n\n```json\n{\n    "givenName": "George",\n    "familyName": "Orwell"\n}\n```\n\nAnd the following HTTP request:\n\n```http\nGET /books/1 HTTP/2\nPreload: /author\nFields: /author/familyName\nFields: /genre\n```\n\nA Vulcain server will return a response containing the following JSON document:\n\n```json\n{\n    "genre": "novel",\n    "author": "/authors/1"\n}\n```\n\nIt will also push the following filtered `/authors/1` resource:\n\n```json\n{\n    "familyName": "Orwell"\n}\n```\n\n### Query Parameter\n\nAlternatively to HTTP headers, the `fields` query parameter can be used to filter resources:\n\n![Preload Query Schema](schemas/fields-query.png)\n\n## See Also\n\n* [Mapping a non-hypermedia API using OpenAPI](docs/gateway/openapi.md)\n* [Cache considerations](docs/cache.md)\n* [Using GraphQL with Vulcain](docs/graphql.md#using-graphql-as-query-language-for-vulcain)\n* [Using other selectors such as XPath and CSS selectors for non-JSON documents](spec/vulcain.md#selectors) (only JSON Pointer [is currently supported](https://github.com/dunglas/vulcain/issues/3) by the Gateway Server)\n\n## License and Copyright \n\ntl;dr:\n\n* proprietary software **can** implement the Vulcain specification\n* proprietary software **can** be used behind the Vulcain Gateway Server without having to share their sources\n* modifications made to the Vulcain Gateway Server **must** be shared\n* alternatively, a commercial license is available for the Vulcain Gateway Server\n\n[The specification](spec/vulcain.md) is available under [the IETF copyright policy](https://trustee.ietf.org/copyright-faq.html). The Vulcain **specification** can be implemented by any software, including proprietary software.\n\nThe Vulcain Gateway Server is licensed under [AGPL-3.0](LICENSE). This license implies that if you modify the Vulcain Gateway Server, you must share those modifications. However, the AGPL-3.0 license applies only to the gateway server itself, **not to software used behind the gateway**.\n\nFor companies not wanting, or not able to use AGPL-3.0 licensed software, commercial licenses are also available. [Contact us for more information](mailto:dunglas+vulcain@gmail.com).\n\n## Credits\n\nCreated by [K\xc3\xa9vin Dunglas](https://dunglas.fr). Sponsored by [Les-Tilleuls.coop](https://les-tilleuls.coop).\n\nSome ideas and code used in Vulcain\'s reference implementation have been taken from [Hades](https://github.com/gabesullice/hades) by [Gabe Sullice](https://github.com/gabesullice), an HTTP/2 reverse proxy for JSON:API backend.\n\nSee also [the prior arts](docs/prior-art.md).\n'