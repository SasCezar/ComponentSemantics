b'# graphqurl\n\nMade by the team at [hasura.io](https://hasura.io), `graphqurl` is a curl like CLI for GraphQL:\n- CLI for making GraphQL queries with autocomplete\n- Run GraphiQL locally against any endpoint\n- Use as a library with Node.js or from the browser\n- Supports subscriptions\n- Export GraphQL schema\n\n[![oclif](https://img.shields.io/badge/cli-oclif-brightgreen.svg)](https://oclif.io)\n[![Version](https://img.shields.io/npm/v/graphqurl.svg)](https://npmjs.org/package/graphqurl)\n\n[![Azure Pipelines](https://dev.azure.com/hasura/graphqurl/_apis/build/status/hasura.graphqurl?branchName=master)](https://dev.azure.com/hasura/graphqurl/_build/latest?definitionId=1&branchName=master)\n[![Appveyor CI](https://ci.appveyor.com/api/projects/status/github/hasura/graphqurl?branch=master&svg=true)](https://ci.appveyor.com/project/hasura-bot/graphqurl/branch/master)\n[![Downloads/week](https://img.shields.io/npm/dw/graphqurl.svg)](https://npmjs.org/package/graphqurl)\n[![License](https://img.shields.io/npm/l/graphqurl.svg)](https://github.com/hasura/graphqurl/blob/master/LICENSE)\n<!--[![Codecov](https://codecov.io/gh/hasura/graphqurl/branch/master/graph/badge.svg)](https://codecov.io/gh/hasura/graphqurl)-->\n\n----------------\n![Graphqurl Demo](assets/subscription.gif)\n---\n![GraphiQL Demo](assets/graphiql.gif)\n---\n![Subscriptions triggering bash](assets/bash_trigger.gif)\n----------------\n\n## Installation\n\n### CLI\n\n```bash\nnpm install -g graphqurl\n```\n\n### Node Library\n\n```bash\nnpm install --save graphqurl\n```\n\n## Usage\n\n### CLI\n\n#### Query\n\n```bash\ngq https://my-graphql-endpoint/graphql \\\n     -H \'Authorization: token <token>\' \\\n     -q \'query { table { column } }\'\n```\n\n#### Auto-complete\n\nGraphQURL can auto-complete queries using schema introspection. Execute the\ncommand without providing a query string:\n\n```bash\n$ gq <endpoint> [-H <header:value>]\nEnter the query, use TAB to auto-complete, Ctrl+Q to execute, Ctrl+C to cancel\ngql>\n```\n\nYou can use `TAB` to trigger auto-complete. `Ctrl+C` to cancel the input and\n`Ctrl+Q`/`Enter` to execute the query.\n\n#### GraphiQL\n\nOpen GraphiQL with a given endpoint:\n\n```bash\ngq <endpoint> -i\n```\n\n> This is a custom GraphiQL where you can specify request\'s headers.\n\n#### Mutation\n\nMutations with variables can be executed by providing the variables with `-v`\nflag.\n\n```bash\ngq <endpoint> \\\n   -v \'name=hasura\' \\\n   -q \'mutation ($name: String) { table (objects: [{ name: $name }]) }\'\n```\n\n#### Subscription\n\nSubscriptions can be executed and the response is streamed on to stdout.\n\n```bash\ngq <endpoint> \\\n   -q \'subscription { table { column } }\'\n```\n\n#### Export schema\n\nExport GraphQL schema to GraphQL or JSON format:\n\n```bash\ngq <endpoint> --introspect > schema.graphql\n\n# json\ngq <endpoint> --introspect --format json > schema.json\n```\n\n### Command\n\n```bash\n$ gq ENDPOINT [-q QUERY]\n```\n\n#### Args\n\n* `ENDPOINT`: graphql endpoint (can be also set as `GRAPHQURL_ENDPOINT` env var)\n\n#### Options\n\n- `-q, --query=query`: graphql query to execute\n- `-H, --header="key:value"`: request header\n- `-v, --variable="key=value"`: variables used in the query\n- `-n, --name=name`: name of the graphql definition to execute, use only if there are multiple definitions\n- `--queryFile=/path/to/queryfile`: file to read the query from\n- `--variablesFile=/path/to/variablefile`: file to read the query variables from\n- `-i, --graphiql`: open graphiql with the given endpoint, headers, query and variables\n- `-p, --graphiqlPort=graphiqlPort`: [default: 4500] port to use for graphiql\n- `-a, --graphiqlAddress=graphiqlAddress`: [default: localhost] address to use for graphiql\n- `-l, --singleLine`: show output in a single line, do not prettify\n- `--version`: show CLI version\n- `-h, --help`: show CLI help\n\n### Node Library\n\n#### Using callbacks:\n\n```js\nconst { query } = require(\'graphqurl\');\n\nfunction successCallback(response, queryType, parsedQuery) {\n  if (queryType === \'subscription\') {\n    // handle subscription response\n  } else {\n    // handle query/mutation response\n  }\n}\n\nfunction errorCallback(error, queryType, parsedQuery) {\n  console.error(error);\n}\n\nquery(\n  {\n    query: \'query { table { column } }\',\n    endpoint: \'https://my-graphql-endpoint/graphql\',\n    headers: {\n      \'x-access-key\': \'mysecretxxx\',\n    }\n  },\n  successCallback,\n  errorCallback\n);\n\n```\n\n#### Using Promises:\n\nFor queries and mutations,\n\n```js\nconst { query } = require(\'graphqurl\');\n\nquery(\n  {\n    query: \'query { table { column } }\',\n    endpoint: \'https://my-graphql-endpoint/graphql\',\n    headers: {\n      \'x-access-key\': \'mysecretxxx\',\n    }\n  }\n).then((response) => console.log(response))\n .catch((error) => console.error(error));\n```\n\nFor subscriptions,\n\n```js\nconst { query } = require(\'graphqurl\');\n\nquery(\n  {\n    query: \'subscription { table { column } }\',\n    endpoint: \'https://my-graphql-endpoint/graphql\',\n    headers: {\n      \'x-access-key\': \'mysecretxxx\',\n    }\n  }\n).then((observable) => {\n  observable.subscribe(\n    (event) => {\n      console.log(\'Event received: \', event);\n      // handle event\n    },\n    (error) => {\n      console.log(\'Error: \', error);\n      // handle error\n    }\n  )\n})\n .catch((error) => console.error(error));\n```\n\n> Subscriptions are not supported in browsers yet.\n\n### API\n\n#### query(options, successCallback, errorCallback)\n\n- **options**: [Object, *required*] GraphQL query options with the following properties:\n  - endpoint: [String, *required*] GraphQL endpoint\n  - query: [String, *required*] GraphQL query string\n  - headers: [Object] Request headers, defaults to `{}`\n  - variables: [Object] GraphQL query variables, defaults to \'{}\'\n  - name: [String] Operation name. Used only if the `query` string contains multiple operations.\n- **successCallback**: [Function] Success callback which is called after a successful response. It is called with the following parameters:\n  - response: The response of your query\n  - queryType: The type of query you made i.e. one [`query`, `mutation`, `subscription`]\n  - parsedQuery: The query parsed into a GraphQL document\n- **errorCallback**: [Function] Error callback which is called after the occurrence of an error. It is called with the following parameters:\n  - error: The occurred error\n  - queryType: [String] The type of query you made i.e. one [`query`, `mutation`, `subscription`]\n  - parsedQuery: [Object] The query parsed into a GraphQL document\n- **Returns**: [Promise (response) ]If `successCallback` and `errorCallback` are not provided, this function returns the response wrapped in a promise.\n  - response: response is a GraphQL compliant JSON object in case of `queries` and `mutations`. However, if you make a subscription, it returns an observable that you can later subscribe to. Check [this example](#subscriptions) to see how to subscribe to observables.\n\n## More Examples\n\n### Node Library\n\n#### Queries\n\nQuery example with variables\n\n```js\nconst { query } = require(\'graphqurl\');\n\nquery(\n  {\n    query: `\n      query ($name: String) {\n        table(where: { column: $name }) {\n          id\n          column\n        }\n      }\n    `,\n    endpoint: \'https://my-graphql-endpoint/graphql\',\n    headers: {\n      \'x-access-key\': \'mysecretxxx\',\n    },\n    variables: {\n      name: \'Alice\'\n    }\n  }\n).then((response) => console.log(response))\n .catch((error) => console.error(error));\n```\n\n#### Mutations\n\n```js\nconst { query } = require(\'graphqurl\');\n\nquery(\n  {\n    query: `\n      mutation ($id_insert_input: String!, $column_insert_input: String!) {\n        insert_to_table (\n          id: $id_insert_input,\n          column: $column_insert_input\n        ) {\n          affected_rows\n        }\n      }\n    `,\n    endpoint: \'https://my-graphql-endpoint/graphql\',\n    headers: {\n      \'x-access-key\': \'mysecretxxx\',\n    },\n    variables: {\n      id_insert_input: \'id_ak23sdfkjk2\',\n      column_insert_input: \'Bob\'\n    }\n  }\n).then((response) => console.log(response))\n .catch((error) => console.error(error));\n```\n\n#### Subscriptions\n\nUsing promises,\n\n```js\nconst { query } = require(\'graphqurl\');\n\nconst eventCallback = (event) => {\n  console.log(\'Event received:\', event);\n  // handle event\n};\n\nconst errorCallback = (error) => {\n  console.log(\'Error:\', error)\n};\n\nquery(\n  {\n    query: \'subscription { table { column } }\',\n    endpoint: \'https://my-graphql-endpoint/graphql\',\n    headers: {\n      \'Authorization\': \'Bearer Andkw23kj=Kjsdk2902ksdjfkd\'\n    }\n  },\n).then((observable) => {\n  observable.subscribe(\n    (event) => {\n      console.log(\'Event received\', event);\n      // handle event\n    },\n    (error) => {\n      console.log(\'Error\', error);\n      // handle error\n    }\n  )\n}).catch(errorCallback);\n```\n\nLets do the above subscription using callbacks,\n\n```js\nconst { query } = require(\'graphqurl\');\n\nfunction eventCallback(event) {\n  console.log(\'Event received:\', event);\n  // handle event\n}\n\nfunction errorCallback(error) {\n  console.log(\'Error:\', error)\n}\n\nquery(\n  {\n    query: \'subscription { table { column } }\',\n    endpoint: \'https://my-graphql-endpoint/graphql\',\n    headers: {\n      \'Authorization\': \'Bearer Andkw23kj=Kjsdk2902ksdjfkd\'\n    }\n  },\n  eventCallback,\n  errorCallback\n);\n```\n\n### CLI\n\nGeneric example:\n\n```bash\ngq \\\n     https://my-graphql-endpoint/graphql \\\n     -H \'Authorization: token <token>\' \\\n     -H \'X-Another-Header: another-header-value\' \\\n     -v \'variable1=value1\' \\\n     -v \'variable2=value2\' \\\n     -q \'query { table { column } }\'\n```\n\nReading the query and variables from a file:\n\n```bash\ngq \\\n     https://my-graphql-endpoint/graphql \\\n     -H \'Authorization: token <token>\' \\\n     -H \'X-Another-Header: another-header-value\' \\\n     --variableFile=\'./queryVariables.json\' \\\n     --queryFile=\'./query.gql\n```\n\nExecuting only a particular named query from a file that contains many queries:\n\n```bash\ngq <endpoint> --queryFile ./queries.gql --name getItems\n```\n\n---\nMaintained with :heart: by <a href="https://hasura.io">Hasura</a>\n'