b'\n# Apollo GraphQL Client for Android and the JVM\n\n[![GitHub license](https://img.shields.io/badge/license-MIT-lightgrey.svg?maxAge=2592000)](https://raw.githubusercontent.com/apollographql/apollo-android/master/LICENSE) [![Join Spectrum](https://img.shields.io/badge/spectrum-join-orange)](https://spectrum.chat/apollo/apollo-android)\n[![Build status](https://travis-ci.org/apollographql/apollo-android.svg?branch=master)](https://travis-ci.org/apollographql/apollo-android)\n[![GitHub release](https://img.shields.io/github/release/apollographql/apollo-android.svg)](https://github.com/apollographql/apollo-android/releases/latest)\n\nApollo-Android is a GraphQL compliant client that generates Java and Kotlin models from standard GraphQL queries.  These models give you a typesafe API to work with GraphQL servers.  Apollo will help you keep your GraphQL query statements together, organized, and easy to access. Change a query and recompile your project - Apollo code gen will rebuild your data model.  Code generation also allows Apollo to read and unmarshal responses from the network without the need of any reflection.\n\nApollo-Android is designed primarily with Android in mind but you can use it in any Java/Kotlin app. The android-only parts are in `apollo-android-support` and are only needed to use SQLite as a cache or the android main thread for callbacks.\n\nApollo-android features:\n\n* Automatic generation of typesafe models.\n* Support for Java and Kotlin code generation.\n* Queries, Mutations and Subscriptions.\n* Reflection-free parsing of responses.\n* HTTP cache.\n* Normalized cache.\n* File Upload.\n* Custom scalar types.\n* Support for RxJava2 and Coroutines. \n\n## Adding Apollo-Android to your Project\n\nThe latest Gradle plugin version is [ ![Download](https://api.bintray.com/packages/apollographql/android/apollo-gradle-plugin/images/download.svg) ](https://bintray.com/apollographql/android/apollo-gradle-plugin/_latestVersion)\n\nTo use this plugin, add the dependency to your project\'s root build.gradle file:\n\n```groovy\nbuildscript {\n  repositories {\n    jcenter()\n  }\n  dependencies {\n    classpath("com.apollographql.apollo:apollo-gradle-plugin:x.y.z")\n  }\n}\n```\n\nThen add the dependencies to your app\'s build.gradle and apply file and apply the `com.apollographql.android` plugin:\n\n```groovy\napply plugin: \'com.apollographql.android\'\n\nrepositories {\n    jcenter()\n}\n\ndependencies {\n  implementation("com.apollographql.apollo:apollo-runtime:x.y.z")\n  \n  // If not already on your classpath, you might need the jetbrains annotations\n  compileOnly("org.jetbrains:annotations:13.0")\n  testCompileOnly("org.jetbrains:annotations:13.0")\n}\n```\n\n**NOTE: Apollo Gradle plugin requires Gradle 5.1.1 or higher.**\n\n## Generating models from your queries\n\n1) Create a directory for your GraphQL files like you would do for Java/Kotlin: `src/main/graphql/com/com/example/`. Apollo-Android will generate models in the `com.apollographql.apollo.sample` package.\n2) Add your `schema.json` to the directory at `src/main/graphql/com/example/schema.json`. If you don\'t have a `schema.json` file yet, read the section about [downloading a schema file](#downloading-a-schemajson-file). \n3) Put your GraphQL queries in a `.graphql` files. For an exemple: `src/main/graphql/com/example/feed.graphql`: \n\n```\nquery FeedQuery($type: FeedType!, $limit: Int!) {\n  feed(type: $type, limit: $limit) {\n    comments {\n      ...FeedCommentFragment\n    }\n    repository {\n      ...RepositoryFragment\n    }\n    postedBy {\n      login\n    }\n  }\n}\n\nfragment RepositoryFragment on Repository {\n  name\n  full_name\n  owner {\n    login\n  }\n}\n\nfragment FeedCommentFragment on Comment {\n  id\n  postedBy {\n    login\n  }\n  content\n}\n```\n\n4) Decide if you want to generate Kotlin or Java models:\n\n```groovy\napollo {\n  generateKotlinModels = true // or false\n}\n```\n\n5) Execute `./gradlew :generateApolloClasses` to generate the models from your queries. This will create a generated `FeedQuery` Java or Kotlin source file for your query.\n\n## Consuming Code\n\nApollo includes an `ApolloClient` to interact with your server and cache.\n\nTo make a query using the generated models:\n```java\napolloClient.query(\n  FeedQuery.builder()\n    .limit(10)\n    .type(FeedType.HOT)\n    .build()\n).enqueue(new ApolloCall.Callback<FeedQuery.Data>() {\n\n  @Override public void onResponse(@NotNull Response<FeedQuery.Data> dataResponse) {\n\n    final StringBuffer buffer = new StringBuffer();\n    for (FeedQuery.Data.Feed feed : dataResponse.data().feed()) {\n      buffer.append("name:" + feed.repository().fragments().repositoryFragment().name());\n().login());\n      buffer.append(" postedBy: " + feed.postedBy().login());\n    }\n\n    // onResponse returns on a background thread. If you want to make UI updates make sure they are done on the Main Thread.\n    MainActivity.this.runOnUiThread(new Runnable() {\n      @Override public void run() {\n        TextView txtResponse = (TextView) findViewById(R.id.txtResponse);\n        txtResponse.setText(buffer.toString());\n      }\n    });\n      \n  }\n\n  @Override public void onFailure(@NotNull Throwable t) {\n    Log.e(TAG, t.getMessage(), t);\n  }\n});       \n```\n\n## Custom Scalar Types\n\nApollo supports Custom Scalar Types like `Date`.\n\nYou first need to define the mapping in your build.gradle file. This maps from the GraphQL type to the Java/Kotlin class to use in code.\n\n```groovy\napollo {\n  customTypeMapping = [\n    "Date" : "java.util.Date"\n  ]\n}\n```\n\nNext register your custom adapter & add it to your Apollo Client Builder:\n\n```java\n dateCustomTypeAdapter = new CustomTypeAdapter<Date>() {\n      @Override public Date decode(CustomTypeValue value) {\n        try {\n          return DATE_FORMAT.parse(value.value.toString());\n        } catch (ParseException e) {\n          throw new RuntimeException(e);\n        }\n      }\n\n      @Override public CustomTypeValue encode(Date value) {\n        return new CustomTypeValue.GraphQLString(DATE_FORMAT.format(value));\n      }\n    };\n\nApolloClient.builder()\n  .serverUrl(serverUrl)\n  .okHttpClient(okHttpClient)\n  .addCustomTypeAdapter(CustomType.DATE, dateCustomTypeAdapter)\n  .build();\n```\n\nIf you have compiler warnings as errors (`options.compilerArgs << "-Xlint" << "-Werror"`)\nturned on, your custom type will not compile. You can add a switch `suppressRawTypesWarning` to the\napollo plugin configuration which will annotate your generated class with the proper suppression\n(`@SuppressWarnings("rawtypes")`:\n\n```groovy\napollo {\n    customTypeMapping = [\n      "URL" : "java.lang.String"\n    ]\n    suppressRawTypesWarning = "true"\n}\n```\n\n## Downloading a schema.json file\n\nYou can get a schema.json file by running an introspection query on your endpoint. Else, you can use the apollo CLI. See [here](https://github.com/apollographql/apollo-tooling#apollo-clientdownload-schema-output) for instructions.\n\n## Intellij Plugin\n\nThe [JS Graphql Intellij Plugin](https://jimkyndemeyer.github.io/js-graphql-intellij-plugin/) provides auto-completion, error highlighting, and go-to-definition functionality for your graphql files. You can create a [.graphqlconfig](https://jimkyndemeyer.github.io/js-graphql-intellij-plugin/docs/developer-guide#working-with-graphql-endpoints-and-scratch-files) file in order to use GraphQL scratch files to work with your schema outside product code, e.g. by writing temporary queries to test resolvers.\n\n## Releases\n\nOur [change log](CHANGELOG.md) has the release history. \n\nReleases are hosted on [jcenter](https://jcenter.bintray.com/com/apollographql/apollo/).\n\nLatest development changes are available in Sonatype\'s snapshots repository:\n\n```\n  repositories {\n    maven { url \'https://oss.sonatype.org/content/repositories/snapshots/\' }\n  }\n```\n\n## Advanced topics\n\nAdvanced topics are available in the [doc folder](doc):\n\n* [doc/caching.md](doc/caching.md) \n* [doc/plugin-configuration.md](doc/plugin-configuration.md) \n* [doc/android.md](doc/android.md) \n* [doc/file-upload.md](doc/file-upload.md)\n* [doc/rxjava2.md](doc/rxjava2.md)\n* [doc/coroutines.md](doc/coroutines.md) \n* [doc/persisted-queries.md](doc/no-runtime.md)\n* [doc/no-runtime.md](doc/no-runtime.md) \n* [doc/subscriptions.md](doc/subscriptions.md) \n\n## License\n\n```\nThe MIT License (MIT)\n\nCopyright (c) 2017 Meteor Development Group, Inc.\n```\n'