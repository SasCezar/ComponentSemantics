b'# react-imgpro\n\n[![Build Status](https://travis-ci.org/nitin42/react-imgpro.svg?branch=master)](https://travis-ci.org/nitin42/react-imgpro)\n![status](https://img.shields.io/badge/version-1.3.14-brightgreen.svg)\n![status](https://img.shields.io/badge/size-13.1KB-brightgreen.svg)\n![status](https://img.shields.io/badge/status-stable-brightgreen.svg)\n![yarn](https://img.shields.io/badge/yarn-1.9.4-blue.svg)\n\n> Image Processing Component for React\n\n<p align="center">\n  <img src="./images/react-impro.png" height="200" width="200">\n</p>\n\n## Introduction\n\n`react-imgpro` is a image processing component for React. This component process an image with filters supplied as props and returns a [base64](https://en.wikipedia.org/wiki/Base64) image. \n\n**Example**\n\n```jsx\n\nconst mix = {\n    color: \'mistyrose\',\n    amount: 10\n}\n\nclass App extends React.Component {\n  state = { src: \'\', err: null }\n  render() {\n    return (\n      <ProcessImage\n        image=\'http://365.unsplash.com/assets/paul-jarvis-9530891001e7f4ccfcef9f3d7a2afecd.jpg\'\n        colors={{\n          mix\n        }}\n        resize={{ width: 500, height: 500, mode: \'bilinear\' }}\n        processedImage={(src, err) => this.setState({ src, err, })}\n      />     \n    )\n  }\n}\n```\n\n<p align="center">\n<img src="./images/introduction.jpg" height="400" width="800">\n</p>\n\n## Motivation\n\n<p align="center">\n  <img src="https://i.gyazo.com/16f09cba02f9dfeb272cc574f9fbbcff.png">\n</p>\n\nI was working on a project last month which involved a lot of image processing and I\'d to rely on third party libraries. But before using them directly, I\'d to learn different concepts in gl (shaders) and then try to implement them in React. The difficult part was not learning but it was the verbosity, boilerplate code and redundancy introduced by the libraries in the codebase. It was getting difficult to organise all the things \xf0\x9f\x98\x9e\n\nSo I wanted a layer of abstraction which would make it easy to manipulate the colors of the image, applying filters and gl shaders efficiently with ease. And React\'s component based model was perfect for hiding all the implementation details in a component \xf0\x9f\x98\x84 \n\n## Demo\n\n<p align="center">\n  <img src="http://g.recordit.co/XmhTiP84TD.gif">\n</p>\n\n## Install\n\n```\nnpm install react-imgpro\n```\n\nThis also depends on `react` so make sure you\'ve installed it.\n\nOR\n\nThe UMD build is also available via [jsDelivr](https://www.jsdelivr.com).\n\n```\n<script src="https://cdn.jsdelivr.net/npm/react@16/umd/react.production.min.js"></script>\n<script src="https://cdn.jsdelivr.net/npm/react-imgpro@1/build/main.js"></script>\n```\n\n## Usage\n\n```jsx\nimport React from \'react\';\nimport ProcessImage from \'react-imgpro\';\n\nclass App extends React.Component {\n  state = {\n    src: \'\',\n    err: null\n  }\n  \n  render() {\n    return (\n      <ProcessImage\n        image=\'http://365.unsplash.com/assets/paul-jarvis-9530891001e7f4ccfcef9f3d7a2afecd.jpg\'\n        resize={{ width: 500, height: 500 }}\n        colors={{\n          mix: {\n            color: \'mistyrose\',\n            amount: 20\n          }\n        }}\n        processedImage={(src, err) => this.setState({ src, err})}\n      />\n    )\n  }\n}\n\n```\n\n## Documentation\n\nSee the detailed documentation [here](./Docs).\n\n## SSR support ?\n\nYes, `react-imgpro` supports SSR.\n\n## Contributing\n\n[Contributing guide](https://github.com/nitin42/react-imgpro/blob/master/Docs/CONTRIBUTING.MD).\n\n## Extra resources\n\nIf you want to use blenders, plugins and perform event based calculations, try [CamanJS](http://camanjs.com/).\n\n## License\n\nMIT\n\n<a href="https://app.codesponsor.io/link/FCRW65HPiwhNtebDx2tTc53E/nitin42/react-imgpro" rel="nofollow"><img src="https://app.codesponsor.io/embed/FCRW65HPiwhNtebDx2tTc53E/nitin42/react-imgpro.svg" style="width: 888px; height: 68px;" alt="Sponsor" /></a>\n'