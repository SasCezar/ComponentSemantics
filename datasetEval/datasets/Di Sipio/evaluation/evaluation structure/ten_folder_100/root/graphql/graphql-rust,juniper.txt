b'<img src="https://github.com/graphql-rust/juniper/raw/master/assets/logo/juniper-dark-word.png" alt="Juniper" width="500" />\n\n> GraphQL server library for Rust\n\n[![Build Status](https://travis-ci.org/graphql-rust/juniper.svg?branch=master)](https://travis-ci.org/graphql-rust/juniper)\n[![Build Status](https://dev.azure.com/graphql-rust/GraphQL%20Rust/_apis/build/status/graphql-rust.juniper)](https://dev.azure.com/graphql-rust/GraphQL%20Rust/_build/latest?definitionId=1)\n[![codecov](https://codecov.io/gh/graphql-rust/juniper/branch/master/graph/badge.svg)](https://codecov.io/gh/graphql-rust/juniper)\n[![Crates.io](https://img.shields.io/crates/v/juniper.svg?maxAge=2592000)](https://crates.io/crates/juniper)\n[![Gitter chat](https://badges.gitter.im/juniper-graphql/gitter.svg)](https://gitter.im/juniper-graphql)\n\n---\n\n[GraphQL][graphql] is a data query language developed by Facebook intended to\nserve mobile and web application frontends.\n\n_Juniper_ makes it possible to write GraphQL servers in Rust that are\ntype-safe and blazingly fast. We also try to make declaring and resolving\nGraphQL schemas as convenient as possible as Rust will allow.\n\nJuniper does not include a web server - instead it provides building blocks to\nmake integration with existing servers straightforward. It optionally provides a\npre-built integration for the [Hyper][hyper], [Iron][iron], [Rocket], and [Warp][warp] frameworks, including\nembedded [Graphiql][graphiql] and [GraphQL Playground][playground] for easy debugging.\n\n- [Cargo crate](https://crates.io/crates/juniper)\n- [API Reference][docsrs]\n- [Book][book]: Guides and Examples ([current][book] | [master][book_master])\n\nThe book is also available for the master branch and older versions published after 0.11.1. See the [book index][book_index].\n\n\n## Getting Started\n\nThe best place to get started is the [Juniper Book][book], which contains\nguides with plenty of examples, covering all features of Juniper. (very much WIP)\n\nTo get started quickly and get a feel for Juniper, check out the\n[Quickstart][book_quickstart] section.\n\nFor specific information about macros, types and the Juniper api, the\n[API Reference][docsrs] is the best place to look.\n\nYou can also check out [src/tests/schema.rs][test_schema_rs] to see a complex\nschema including polymorphism with traits and interfaces.\nFor an example of web framework integration,\nsee the [hyper][hyper_examples], [rocket][rocket_examples], [iron][iron_examples], and [warp][warp_examples] examples folders.\n\n## Features\n\nJuniper supports the full GraphQL query language according to the\n[specification][graphql_spec], including interfaces, unions, schema\nintrospection, and validations.\nIt does not, however, support the schema language. Consider using [juniper-from-schema][] for generating code from a schema file.\n\nAs an exception to other GraphQL libraries for other languages, Juniper builds\nnon-null types by default. A field of type `Vec<Episode>` will be converted into\n`[Episode!]!`. The corresponding Rust type for e.g. `[Episode]` would be\n`Option<Vec<Option<Episode>>>`.\n\n## Integrations\n\n### Data types\n\nJuniper has automatic integration with some very common Rust crates to make\nbuilding schemas a breeze. The types from these crates will be usable in\nyour Schemas automatically.\n\n- [uuid][uuid]\n- [url][url]\n- [chrono][chrono]\n\n### Web Frameworks\n\n- [hyper][hyper]\n- [rocket][rocket]\n- [iron][iron]\n- [warp][warp]\n\n## Guides & Examples\n\n- [Juniper + actix-web example](https://github.com/actix/examples/tree/master/juniper)\n\n## API Stability\n\nJuniper has not reached 1.0 yet, thus some API instability should be expected.\n\n[graphql]: http://graphql.org\n[graphiql]: https://github.com/graphql/graphiql\n[playground]: https://github.com/prisma/graphql-playground\n[iron]: http://ironframework.io\n[graphql_spec]: http://facebook.github.io/graphql\n[test_schema_rs]: https://github.com/graphql-rust/juniper/blob/master/juniper/src/tests/schema.rs\n[tokio]: https://github.com/tokio-rs/tokio\n[hyper_examples]: https://github.com/graphql-rust/juniper/tree/master/juniper_hyper/examples\n[rocket_examples]: https://github.com/graphql-rust/juniper/tree/master/juniper_rocket/examples\n[iron_examples]: https://github.com/graphql-rust/juniper/tree/master/juniper_iron/examples\n[hyper]: https://hyper.rs\n[rocket]: https://rocket.rs\n[book]: https://graphql-rust.github.io/juniper/current\n[book_master]: https://graphql-rust.github.io/juniper/master\n[book_index]: https://graphql-rust.github.io/juniper\n[book_quickstart]: https://graphql-rust.github.io/juniper/current/quickstart.html\n[docsrs]: https://docs.rs/juniper\n[warp]: https://github.com/seanmonstar/warp\n[warp_examples]: https://github.com/graphql-rust/juniper/tree/master/juniper_warp/examples\n[uuid]: https://crates.io/crates/uuid\n[url]: https://crates.io/crates/url\n[chrono]: https://crates.io/crates/chrono\n[juniper-from-schema]: https://github.com/davidpdrsn/juniper-from-schema\n'