b'# GraphQL for .NET\n\n[![Build Status](https://ci.appveyor.com/api/projects/status/github/graphql-dotnet/graphql-dotnet?branch=master&svg=true)](https://ci.appveyor.com/project/graphql-dotnet-ci/graphql-dotnet)\n[![NuGet](https://img.shields.io/nuget/v/GraphQL.svg)](https://www.nuget.org/packages/GraphQL/)\n[![Join the chat at https://gitter.im/graphql-dotnet/graphql-dotnet](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/graphql-dotnet/graphql-dotnet?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nThis is an implementation of [Facebook\'s GraphQL](https://github.com/facebook/graphql) in .NET.\n\nThis project uses a [lexer/parser](http://github.com/graphql-dotnet/parser) originally written by [Marek Magdziak](https://github.com/mkmarek) and released with a MIT license.  Thank you Marek!\n\n## Installation\n\nYou can install the latest version via [NuGet](https://www.nuget.org/packages/GraphQL/).\n\n```\nPM> Install-Package GraphQL\n```\n\nOr you can get the latest pre-release packages from the [MyGet feed](https://www.myget.org/F/graphql-dotnet/api/v3/index.json).\n\n\n## Documentation\n\nhttp://graphql-dotnet.github.io\n\n## Examples\n\nhttps://github.com/graphql-dotnet/examples\n\n## Training\n\n* [API Development in .NET with GraphQL](https://www.lynda.com/NET-tutorials/API-Development-NET-GraphQL/664823-2.html) - [Glenn Block](https://twitter.com/gblock) demonstrates how to use the GraphQL .NET framework to build a fully functional GraphQL endpoint.\n\n## Upgrade Guides\n\n* [0.17.x to 2.x](https://graphql-dotnet.github.io/docs/guides/migration)\n* [0.11.0](/upgrade-guides/v0.11.0.md)\n* [0.8.0](/upgrade-guides/v0.8.0.md)\n\n## Basic Usage\n\nDefine your schema with a top level query object then execute that query.\n\nFully-featured examples can be found [here](https://github.com/graphql-dotnet/examples).\n\n### Hello World\n\n```csharp\nvar schema = Schema.For(@"\n  type Query {\n    hello: String\n  }\n");\n\nvar root = new { Hello = "Hello World!" };\nvar json = schema.Execute(_ =>\n{\n  _.Query = "{ hello }";\n  _.Root = root;\n});\n\nConsole.WriteLine(json);\n```\n\n### Schema First Approach\n\nThis example uses the [Graphql schema language](https://graphql.org/learn/schema/#type-language).  See the [documentation](https://graphql-dotnet.github.io/docs/getting-started/introduction) for more examples and information.\n\n```csharp\npublic class Droid\n{\n  public string Id { get; set; }\n  public string Name { get; set; }\n}\n\npublic class Query\n{\n  [GraphQLMetadata("droid")]\n  public Droid GetDroid()\n  {\n    return new Droid { Id = "123", Name = "R2-D2" };\n  }\n}\n\nvar schema = Schema.For(@"\n  type Droid {\n    id: ID\n    name: String\n  }\n\n  type Query {\n    droid: Droid\n  }\n", _ => {\n    _.Types.Include<Query>();\n});\n\nvar json = schema.Execute(_ =>\n{\n  _.Query = "{ droid { id name } }";\n});\n```\n\n### Parameters\n\n```csharp\npublic class Droid\n{\n  public string Id { get; set; }\n  public string Name { get; set; }\n}\n\npublic class Query\n{\n  private List<Droid> _droids = new List<Droid>\n  {\n    new Droid { Id = "123", Name = "R2-D2" }\n  };\n\n  [GraphQLMetadata("droid")]\n  public Droid GetDroid(string id)\n  {\n    return _droids.FirstOrDefault(x => x.Id == id);\n  }\n}\n\nvar schema = Schema.For(@"\n  type Droid {\n    id: ID\n    name: String\n  }\n\n  type Query {\n    droid(id: ID): Droid\n  }\n", _ => {\n    _.Types.Include<Query>();\n});\n\nvar json = schema.Execute(_ =>\n{\n  _.Query = $"{{ droid(id: \\"123\\") {{ id name }} }}";\n});\n```\n\n## Roadmap\n\n### Grammar / AST\n- Grammar and AST for the GraphQL language should be compatible with the [June 2018 specification](http://facebook.github.io/graphql/June2018/).\n\n### Operation Execution\n- [x] Scalars\n- [x] Objects\n- [x] Lists of objects/interfaces\n- [x] Interfaces\n- [x] Unions\n- [x] Arguments\n- [x] Variables\n- [x] Fragments\n- [x] Directives\n  - [x] Include\n  - [x] Skip\n  - [x] Custom\n- [x] Enumerations\n- [x] Input Objects\n- [x] Mutations\n- [x] Subscriptions\n- [x] Async execution\n\n### Validation\n- [x] Arguments of correct type\n- [x] Default values of correct type\n- [x] Fields on correct type\n- [x] Fragments on composite types\n- [x] Known argument names\n- [x] Known directives\n- [x] Known fragment names\n- [x] Known type names\n- [x] Lone anonymous operations\n- [x] No fragment cycles\n- [x] No undefined variables\n- [x] No unused fragments\n- [x] No unused variables\n- [x] Overlapping fields can be merged\n- [x] Possible fragment spreads\n- [x] Provide non-null arguments\n- [x] Scalar leafs\n- [x] Unique argument names\n- [x] Unique directives per location\n- [x] Unique fragment names\n- [x] Unique input field names\n- [x] Unique operation names\n- [x] Unique variable names\n- [x] Variables are input types\n- [x] Variables in allowed position\n- [x] Single root field\n\n### Schema Introspection\n- [x] __typename\n- [x] __type\n  - [x] name\n  - [x] kind\n  - [x] description\n  - [x] fields\n  - [x] interfaces\n  - [x] possibleTypes\n  - [x] enumValues\n  - [x] inputFields\n  - [x] ofType\n- [x] __schema\n  - [x] types\n  - [x] queryType\n  - [x] mutationType\n  - [x] subscriptionType\n  - [x] directives\n\n\n### Publishing Nugets\n\n```\nyarn run setVersion 2.0.0\ngit commit/push\ndownload nuget from AppVeyor\nupload nuget package to github\npublish nuget from MyGet\n```\n\n### Running on OSX with mono\nTo run this project on OSX with mono you will need to add some configuration.  Make sure mono is installed and add the following to your bash configuration:\n\n```bash\nexport FrameworkPathOverride=/Library/Frameworks/Mono.framework/Versions/4.6.2/lib/mono/4.5/\n```\n\nSee the following for more details:\n\n* [Building VS 2017 MSBuild csproj Projects with Mono on Linux](https://stackoverflow.com/questions/42747722/building-vs-2017-msbuild-csproj-projects-with-mono-on-linux)\n* [using .NET Framework as targets framework, the osx/unix build fails](https://github.com/dotnet/netcorecli-fsc/wiki/.NET-Core-SDK-rc4#using-net-framework-as-targets-framework-the-osxunix-build-fails)\n'