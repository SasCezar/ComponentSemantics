b'# Rejoiner\n\n[![Build Status](https://travis-ci.org/google/rejoiner.svg?branch=master)](https://travis-ci.org/google/rejoiner)\n[![Coverage Status](https://coveralls.io/repos/github/google/rejoiner/badge.svg?branch=master)](https://coveralls.io/github/google/rejoiner?branch=master)\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/b43373716f2241a8bebd332e438b2454)](https://www.codacy.com/app/siderakis/rejoiner?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=google/rejoiner&amp;utm_campaign=Badge_Grade)\n[![Maven Central](https://maven-badges.herokuapp.com/maven-central/com.google.api.graphql/rejoiner/badge.svg)](http://mvnrepository.com/artifact/com.google.api.graphql/rejoiner/0.0.4)\n\n\n - Creates a uniform GraphQL schema from microservices\n - Allows the GraphQL schema to be flexibly defined and composed as shared components\n - Generates GraphQL types from Proto definitions\n - Populates request Proto based on GraphQL query parameters\n - Supplies a DSL to modify the generated schema\n - Joins data sources by annotating methods that fetch data\n - Creates Proto [FieldMasks](https://developers.google.com/protocol-buffers/docs/reference/java/com/google/protobuf/FieldMask) based on GraphQL selectors\n\n ![Rejoiner Overview](./website/static/rejoiner_overview.svg)\n\n## Experimental Features\n\nThese features are actively being developed.\n\n - Expose any GraphQL schema as a gRPC service.\n - Lossless end to end proto scalar types when using gRPC.\n - Relay support [[Example](./examples/src/main/java/com/google/api/graphql/examples/library)]\n - GraphQL Stream (based on gRPC streaming) [[Example](./examples/src/main/java/com/google/api/graphql/examples/streaming)]\n\n## Schema Module\n\nSchemaModule is a Guice module that is used to generate parts of a GraphQL\nschema. It finds methods and fields that have Rejoiner annotations when it\'s\ninstantiated. It then looks at the parameters and return type of these methods\nin order to generate the appropriate GraphQL schema. Examples of queries,\nmutations, and schema modifications are presented below.\n\n## GraphQL Query\n\n```java\nfinal class TodoQuerySchemaModule extends SchemaModule {\n  @Query("listTodo")\n  ListenableFuture<ListTodoResponse> listTodo(ListTodoRequest request, TodoClient todoClient) {\n    return todoClient.listTodo(request);\n  }\n}\n```\n\nIn this example `request` is of type `ListTodoRequest` (a protobuf message), so\nit\'s used as a parameter in the generated GraphQL query. `todoService` isn\'t a\nprotobuf message, so it\'s provided by the Guice injector.\n\nThis is useful for providing rpc services or database access objects for\nfetching data. Authentication data can also be provided here.\n\nCommon implementations for these annotated methods:\n - Make gRPC calls to microservices which can be implemented in any language\n - Load protobuf messages directly from storage\n - Perform arbitrary logic to produce the result\n\n## GraphQL Mutation\n\n```java\nfinal class TodoMutationSchemaModule extends SchemaModule {\n  @Mutation("createTodo")\n  ListenableFuture<Todo> createTodo(\n      CreateTodoRequest request, TodoService todoService, @AuthenticatedUser String email) {\n    return todoService.createTodo(request, email);\n  }\n}\n```\n\n## Adding edges between GraphQL types\n\nIn this example we are adding a reference to the User type on the Todo type.\n```java\nfinal class TodoToUserSchemaModule extends SchemaModule {\n  @SchemaModification(addField = "creator", onType = Todo.class)\n  ListenableFuture<User> todoCreatorToUser(UserService userService, Todo todo) {\n    return userService.getUserByEmail(todo.getCreatorEmail());\n  }\n}\n```\nIn this case the Todo parameter is the parent object which can be referenced to\nget the creator\'s email.\n\nThis is how types are joined within and across APIs.\n\n![Rejoiner API Joining](./website/static/rejoiner.svg)\n\n## Removing a field\n\n```java\nfinal class TodoModificationsSchemaModule extends SchemaModule {\n  @SchemaModification\n  TypeModification removePrivateTodoData =\n      Type.find(Todo.getDescriptor()).removeField("privateTodoData");\n}\n```\n\n## Building the GraphQL schema\n```java\nimport com.google.api.graphql.rejoiner.SchemaProviderModule;\n\npublic final class TodoModule extends AbstractModule {\n  @Override\n  protected void configure() {\n    // Guice module that provides the generated GraphQLSchema instance\n    install(new SchemaProviderModule());\n\n    // Install schema modules\n    install(new TodoQuerySchemaModule());\n    install(new TodoMutationSchemaModule());\n    install(new TodoModificationsSchemaModule());\n    install(new TodoToUserSchemaModule());\n  }\n}\n```\n\n## Getting started\n\n### Dependency information\n\nApache Maven\n```xml\n<dependency>\n    <groupId>com.google.api.graphql</groupId>\n    <artifactId>rejoiner</artifactId>\n    <version>0.0.4</version>\n</dependency>\n```\n\nGradle/Grails\n`compile \'com.google.api.graphql:rejoiner:0.0.4\'`\n\nScala SBT\n`libraryDependencies += "com.google.api.graphql" % "rejoiner" % "0.0.4"`\n\n\n## Supported return types\n\nAll generated proto messages extend `Message`.\n - Any subclass of `Message`\n - `ImmutableList<? extends Message>`\n - `ListenableFuture<? extends Message>`\n - `ListenableFuture<ImmutableList<? extends Message>>`\n\n## Project information\n\n - Rejoiner is built on top of [GraphQL-Java](https://github.com/graphql-java/graphql-java) which provides the core\n   GraphQL capabilities such as query parsing, validation, and execution.  \n - Java code is formatted using [google-java-format](https://github.com/google/google-java-format).\n - Note: This is not an official Google product.\n'