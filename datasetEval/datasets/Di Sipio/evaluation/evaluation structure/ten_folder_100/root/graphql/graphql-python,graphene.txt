b'**We are looking for contributors**! Please check the [ROADMAP](https://github.com/graphql-python/graphene/blob/master/ROADMAP.md) to see how you can help \xe2\x9d\xa4\xef\xb8\x8f\n\n---\n\n# ![Graphene Logo](http://graphene-python.org/favicon.png) [Graphene](http://graphene-python.org) [![Build Status](https://travis-ci.org/graphql-python/graphene.svg?branch=master)](https://travis-ci.org/graphql-python/graphene) [![PyPI version](https://badge.fury.io/py/graphene.svg)](https://badge.fury.io/py/graphene) [![Coverage Status](https://coveralls.io/repos/graphql-python/graphene/badge.svg?branch=master&service=github)](https://coveralls.io/github/graphql-python/graphene?branch=master)\n\n## Introduction\n\n[Graphene](http://graphene-python.org) is a Python library for building GraphQL schemas/types fast and easily.\n\n- **Easy to use:** Graphene helps you use GraphQL in Python without effort.\n- **Relay:** Graphene has builtin support for Relay.\n- **Data agnostic:** Graphene supports any kind of data source: SQL (Django, SQLAlchemy), NoSQL, custom Python objects, etc.\n  We believe that by providing a complete API you could plug Graphene anywhere your data lives and make your data available\n  through GraphQL.\n\n## Integrations\n\nGraphene has multiple integrations with different frameworks:\n\n| integration       | Package                                                                                 |\n| ----------------- | --------------------------------------------------------------------------------------- |\n| Django            | [graphene-django](https://github.com/graphql-python/graphene-django/)                   |\n| SQLAlchemy        | [graphene-sqlalchemy](https://github.com/graphql-python/graphene-sqlalchemy/)           |\n| Google App Engine | [graphene-gae](https://github.com/graphql-python/graphene-gae/)                         |\n| Peewee            | _In progress_ ([Tracking Issue](https://github.com/graphql-python/graphene/issues/289)) |\n\nAlso, Graphene is fully compatible with the GraphQL spec, working seamlessly with all GraphQL clients, such as [Relay](https://github.com/facebook/relay), [Apollo](https://github.com/apollographql/apollo-client) and [gql](https://github.com/graphql-python/gql).\n\n## Installation\n\nFor instaling graphene, just run this command in your shell\n\n```bash\npip install "graphene>=2.0"\n```\n\n## 2.0 Upgrade Guide\n\nPlease read [UPGRADE-v2.0.md](/UPGRADE-v2.0.md) to learn how to upgrade.\n\n## Examples\n\nHere is one example for you to get started:\n\n```python\nclass Query(graphene.ObjectType):\n    hello = graphene.String(description=\'A typical hello world\')\n\n    def resolve_hello(self, info):\n        return \'World\'\n\nschema = graphene.Schema(query=Query)\n```\n\nThen Querying `graphene.Schema` is as simple as:\n\n```python\nquery = \'\'\'\n    query SayHello {\n      hello\n    }\n\'\'\'\nresult = schema.execute(query)\n```\n\nIf you want to learn even more, you can also check the following [examples](examples/):\n\n- **Basic Schema**: [Starwars example](examples/starwars)\n- **Relay Schema**: [Starwars Relay example](examples/starwars_relay)\n\n## Documentation\n\nDocumentation and links to additional resources are available at\nhttps://docs.graphene-python.org/en/latest/\n\n## Contributing\n\nAfter cloning this repo, create a [virtualenv](https://virtualenv.pypa.io/en/stable/) and ensure dependencies are installed by running:\n\n```sh\nvirtualenv venv\nsource venv/bin/activate\npip install -e ".[test]"\n```\n\nWell-written tests and maintaining good test coverage is important to this project. While developing, run new and existing tests with:\n\n```sh\npy.test graphene/relay/tests/test_node.py # Single file\npy.test graphene/relay # All tests in directory\n```\n\nAdd the `-s` flag if you have introduced breakpoints into the code for debugging.\nAdd the `-v` ("verbose") flag to get more detailed test output. For even more detailed output, use `-vv`.\nCheck out the [pytest documentation](https://docs.pytest.org/en/latest/) for more options and test running controls.\n\nYou can also run the benchmarks with:\n\n```sh\npy.test graphene --benchmark-only\n```\n\nGraphene supports several versions of Python. To make sure that changes do not break compatibility with any of those versions, we use `tox` to create virtualenvs for each Python version and run tests with that version. To run against all Python versions defined in the `tox.ini` config file, just run:\n\n```sh\ntox\n```\n\nIf you wish to run against a specific version defined in the `tox.ini` file:\n\n```sh\ntox -e py36\n```\n\nTox can only use whatever versions of Python are installed on your system. When you create a pull request, Travis will also be running the same tests and report the results, so there is no need for potential contributors to try to install every single version of Python on their own system ahead of time. We appreciate opening issues and pull requests to make graphene even more stable & useful!\n\n### Building Documentation\n\nThe documentation is generated using the excellent [Sphinx](http://www.sphinx-doc.org/) and a custom theme.\n\nAn HTML version of the documentation is produced by running:\n\n```sh\nmake docs\n```\n'