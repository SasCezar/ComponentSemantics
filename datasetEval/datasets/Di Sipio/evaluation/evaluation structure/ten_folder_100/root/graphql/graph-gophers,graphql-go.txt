b'# graphql-go [![Sourcegraph](https://sourcegraph.com/github.com/graph-gophers/graphql-go/-/badge.svg)](https://sourcegraph.com/github.com/graph-gophers/graphql-go?badge) [![Build Status](https://semaphoreci.com/api/v1/graph-gophers/graphql-go/branches/master/badge.svg)](https://semaphoreci.com/graph-gophers/graphql-go) [![GoDoc](https://godoc.org/github.com/graph-gophers/graphql-go?status.svg)](https://godoc.org/github.com/graph-gophers/graphql-go)\n\n<p align="center"><img src="docs/img/logo.png" width="300"></p>\n\nThe goal of this project is to provide full support of the [GraphQL draft specification](https://facebook.github.io/graphql/draft) with a set of idiomatic, easy to use Go packages.\n\nWhile still under heavy development (`internal` APIs are almost certainly subject to change), this library is\nsafe for production use.\n\n## Features\n\n- minimal API\n- support for `context.Context`\n- support for the `OpenTracing` standard\n- schema type-checking against resolvers\n- resolvers are matched to the schema based on method sets (can resolve a GraphQL schema with a Go interface or Go struct).\n- handles panics in resolvers\n- parallel execution of resolvers\n- subscriptions\n   - [sample WS transport](https://github.com/graph-gophers/graphql-transport-ws)\n\n## Roadmap\n\nWe\'re trying out the GitHub Project feature to manage `graphql-go`\'s [development roadmap](https://github.com/graph-gophers/graphql-go/projects/1).\nFeedback is welcome and appreciated.\n\n## (Some) Documentation\n\n### Basic Sample\n\n```go\npackage main\n\nimport (\n        "log"\n        "net/http"\n\n        graphql "github.com/graph-gophers/graphql-go"\n        "github.com/graph-gophers/graphql-go/relay"\n)\n\ntype query struct{}\n\nfunc (_ *query) Hello() string { return "Hello, world!" }\n\nfunc main() {\n        s := `\n                type Query {\n                        hello: String!\n                }\n        `\n        schema := graphql.MustParseSchema(s, &query{})\n        http.Handle("/query", &relay.Handler{Schema: schema})\n        log.Fatal(http.ListenAndServe(":8080", nil))\n}\n```\n\nTo test:\n```sh\n$ curl -XPOST -d \'{"query": "{ hello }"}\' localhost:8080/query\n```\n\n### Resolvers\n\nA resolver must have one method or field for each field of the GraphQL type it resolves. The method or field name has to be [exported](https://golang.org/ref/spec#Exported_identifiers) and match the schema\'s field\'s name in a non-case-sensitive way.\nYou can use struct fields as resolvers by using `SchemaOpt: UseFieldResolvers()`. For example,\n```\nopts := []graphql.SchemaOpt{graphql.UseFieldResolvers()}\nschema := graphql.MustParseSchema(s, &query{}, opts...)\n```   \n\nWhen using `UseFieldResolvers` schema option, a struct field will be used *only* when:\n- there is no method for a struct field\n- a struct field does not implement an interface method\n- a struct field does not have arguments\n\nThe method has up to two arguments:\n\n- Optional `context.Context` argument.\n- Mandatory `*struct { ... }` argument if the corresponding GraphQL field has arguments. The names of the struct fields have to be [exported](https://golang.org/ref/spec#Exported_identifiers) and have to match the names of the GraphQL arguments in a non-case-sensitive way.\n\nThe method has up to two results:\n\n- The GraphQL field\'s value as determined by the resolver.\n- Optional `error` result.\n\nExample for a simple resolver method:\n\n```go\nfunc (r *helloWorldResolver) Hello() string {\n\treturn "Hello world!"\n}\n```\n\nThe following signature is also allowed:\n\n```go\nfunc (r *helloWorldResolver) Hello(ctx context.Context) (string, error) {\n\treturn "Hello world!", nil\n}\n```\n\n### Custom Errors\n\nErrors returned by resolvers can include custom extensions by implementing the `ResolverError` interface:\n\n```go\ntype ResolverError interface {\n\terror\n\tExtensions() map[string]interface{}\n}\n```\n\nExample of a simple custom error:\n\n```go\ntype droidNotFoundError struct {\n\tCode    string `json:"code"`\n\tMessage string `json:"message"`\n}\n\nfunc (e droidNotFoundError) Error() string {\n\treturn fmt.Sprintf("error [%s]: %s", e.Code, e.Message)\n}\n\nfunc (e droidNotFoundError) Extensions() map[string]interface{} {\n\treturn map[string]interface{}{\n\t\t"code":    e.Code,\n\t\t"message": e.Message,\n\t}\n}\n```\n\nWhich could produce a GraphQL error such as:\n\n```go\n{\n  "errors": [\n    {\n      "message": "error [NotFound]: This is not the droid you are looking for",\n      "path": [\n        "droid"\n      ],\n      "extensions": {\n        "code": "NotFound",\n        "message": "This is not the droid you are looking for"\n      }\n    }\n  ],\n  "data": null\n}\n```\n\n### Community Examples\n\n[tonyghita/graphql-go-example](https://github.com/tonyghita/graphql-go-example) - A more "productionized" version of the Star Wars API example given in this repository.\n\n[deltaskelta/graphql-go-pets-example](https://github.com/deltaskelta/graphql-go-pets-example) - graphql-go resolving against a sqlite database.\n\n[OscarYuen/go-graphql-starter](https://github.com/OscarYuen/go-graphql-starter) - A starter application integrated with dataloader, psql and basic authentication.\n\n[zaydek/graphql-go-walkthrough](https://github.com/ZAYDEK/graphql-go-walkthrough) - A beginner friendly walkthrough for prospective developers.\n'