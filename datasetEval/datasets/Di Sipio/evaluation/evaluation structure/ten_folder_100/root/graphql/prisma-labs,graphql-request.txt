b'# graphql-request\n\n[![CircleCI](https://circleci.com/gh/prisma/graphql-request.svg?style=shield)](https://circleci.com/gh/prisma/graphql-request) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)\n\n\xf0\x9f\x93\xa1 Minimal GraphQL client supporting Node and browsers for scripts or simple apps\n\n## Features\n\n- Most **simple and lightweight** GraphQL client\n- Promise-based API (works with `async` / `await`)\n- Typescript support (Flow coming soon)\n\n## Install\n\n```sh\nnpm install graphql-request\n```\n\n## Quickstart\n\nSend a GraphQL query with a single line of code. \xe2\x96\xb6\xef\xb8\x8f [Try it out](https://runkit.com/593130bdfad7120012472003/593130bdfad7120012472004).\n\n```js\nimport { request } from \'graphql-request\'\n\nconst query = `{\n  Movie(title: "Inception") {\n    releaseDate\n    actors {\n      name\n    }\n  }\n}`\n\nrequest(\'https://api.graph.cool/simple/v1/movies\', query).then(data =>\n  console.log(data)\n)\n```\n\n## Usage\n\n```js\nimport { request, GraphQLClient } from \'graphql-request\'\n\n// Run GraphQL queries/mutations using a static function\nrequest(endpoint, query, variables).then(data => console.log(data))\n\n// ... or create a GraphQL client instance to send requests\nconst client = new GraphQLClient(endpoint, { headers: {} })\nclient.request(query, variables).then(data => console.log(data))\n```\n\n## Examples\n\n### Authentication via HTTP header\n\n```js\nimport { GraphQLClient } from \'graphql-request\'\n\nasync function main() {\n  const endpoint = \'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr\'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: \'Bearer MY_TOKEN\',\n    },\n  })\n\n  const query = /* GraphQL */ `\n    {\n      Movie(title: "Inception") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch(error => console.error(error))\n```\n\n[TypeScript Source](examples/authentication-via-http-header.ts)\n\n### Passing more options to fetch\n\n```js\nimport { GraphQLClient } from \'graphql-request\'\n\nasync function main() {\n  const endpoint = \'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr\'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    credentials: \'include\',\n    mode: \'cors\',\n  })\n\n  const query = /* GraphQL */ `\n    {\n      Movie(title: "Inception") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch(error => console.error(error))\n```\n\n[TypeScript Source](examples/passing-more-options-to-fetch.ts)\n\n### Using variables\n\n```js\nimport { request } from \'graphql-request\'\n\nasync function main() {\n  const endpoint = \'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr\'\n\n  const query = /* GraphQL */ `\n    query getMovie($title: String!) {\n      Movie(title: $title) {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const variables = {\n    title: \'Inception\',\n  }\n\n  const data = await request(endpoint, query, variables)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch(error => console.error(error))\n```\n\n[TypeScript Source](examples/using-variables.ts)\n\n### Error handling\n\n```js\nimport { request } from \'graphql-request\'\n\nasync function main() {\n  const endpoint = \'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr\'\n\n  const query = /* GraphQL */ `\n    {\n      Movie(title: "Inception") {\n        releaseDate\n        actors {\n          fullname # "Cannot query field \'fullname\' on type \'Actor\'. Did you mean \'name\'?"\n        }\n      }\n    }\n  `\n\n  try {\n    const data = await request(endpoint, query)\n    console.log(JSON.stringify(data, undefined, 2))\n  } catch (error) {\n    console.error(JSON.stringify(error, undefined, 2))\n    process.exit(1)\n  }\n}\n\nmain().catch(error => console.error(error))\n```\n\n[TypeScript Source](examples/error-handling)\n\n### Using `require` instead of `import`\n\n```js\nconst { request } = require(\'graphql-request\')\n\nasync function main() {\n  const endpoint = \'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr\'\n\n  const query = /* GraphQL */ `\n    {\n      Movie(title: "Inception") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await request(endpoint, query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch(error => console.error(error))\n```\n\n### Cookie support for `node`\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nrequire(\'fetch-cookie/node-fetch\')(require(\'node-fetch\'))\n\nimport { GraphQLClient } from \'graphql-request\'\n\nasync function main() {\n  const endpoint = \'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr\'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: \'Bearer MY_TOKEN\',\n    },\n  })\n\n  const query = /* GraphQL */ `\n    {\n      Movie(title: "Inception") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch(error => console.error(error))\n```\n\n[TypeScript Source](examples/cookie-support-for-node)\n\n### Receiving a raw response\n\nThe `request` method will return the `data` or `errors` key from the response.\nIf you need to access the `extensions` key you can use the `rawRequest` method:\n\n```js\nimport { rawRequest } from \'graphql-request\'\n\nasync function main() {\n  const endpoint = \'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr\'\n\n  const query = /* GraphQL */ `\n    {\n      Movie(title: "Inception") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const { data, errors, extensions, headers, status } = await rawRequest(\n    endpoint,\n    query\n  )\n  console.log(\n    JSON.stringify({ data, errors, extensions, headers, status }, undefined, 2)\n  )\n}\n\nmain().catch(error => console.error(error))\n```\n\n[TypeScript Source](examples/receiving-a-raw-response)\n\n### More examples coming soon...\n\n- Fragments\n- Using [`graphql-tag`](https://github.com/apollographql/graphql-tag)\n\n## FAQ\n\n### What\'s the difference between `graphql-request`, Apollo and Relay?\n\n`graphql-request` is the most minimal and simplest to use GraphQL client. It\'s perfect for small scripts or simple apps.\n\nCompared to GraphQL clients like Apollo or Relay, `graphql-request` doesn\'t have a built-in cache and has no integrations for frontend frameworks. The goal is to keep the package and API as minimal as possible.\n\n### So what about Lokka?\n\nLokka is great but it still requires [a lot of setup code](https://github.com/kadirahq/lokka-transport-http) to be able to send a simple GraphQL query. `graphql-request` does less work compared to Lokka but is a lot simpler to use.\n\n## Help & Community [![Slack Status](https://slack.prisma.io/badge.svg)](https://slack.prisma.io)\n\nJoin our [Slack community](http://slack.prisma.io/) if you run into issues or have questions. We love talking to you!\n\n<p align="center"><a href="https://oss.prisma.io"><img src="https://imgur.com/IMU2ERq.png" alt="Prisma" height="170px"></a></p>\n'