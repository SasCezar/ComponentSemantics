b'<div align="center">\n\t<br>\n\t<br>\n\t<img width="360" src="media/logo.svg" alt="Got">\n\t<br>\n\t<br>\n\t<br>\n\t<p align="center">Huge thanks to <a href="https://moxy.studio"><img src="https://sindresorhus.com/assets/thanks/moxy-logo.svg" width="150"></a> for sponsoring Sindre Sorhus!\n\t</p>\n\t<br>\n\t<br>\n</div>\n\n> Simplified HTTP requests\n\n[![Build Status: Linux](https://travis-ci.org/sindresorhus/got.svg?branch=master)](https://travis-ci.org/sindresorhus/got)\n[![Coverage Status](https://coveralls.io/repos/github/sindresorhus/got/badge.svg?branch=master)](https://coveralls.io/github/sindresorhus/got?branch=master)\n[![Downloads](https://img.shields.io/npm/dm/got.svg)](https://npmjs.com/got)\n[![Install size](https://packagephobia.now.sh/badge?p=got)](https://packagephobia.now.sh/result?p=got)\n\nGot is a human-friendly and powerful HTTP request library.\n\nIt was created because the popular [`request`](https://github.com/request/request) package is bloated: [![Install size](https://packagephobia.now.sh/badge?p=request)](https://packagephobia.now.sh/result?p=request)\n\nGot is for Node.js. For browsers, we recommend [Ky](https://github.com/sindresorhus/ky).\n\n**This readme reflects the next major version that is currently in development. You probably want [the v9 readme](https://www.npmjs.com/package/got).**\n\n\n## Highlights\n\n- [Promise & stream API](#api)\n- [Request cancelation](#aborting-the-request)\n- [RFC compliant caching](#cache-adapters)\n- [Follows redirects](#followredirect)\n- [Retries on failure](#retry)\n- [Progress events](#onuploadprogress-progress)\n- [Handles gzip/deflate/brotli](#decompress)\n- [Timeout handling](#timeout)\n- [Errors with metadata](#errors)\n- [JSON mode](#json-mode)\n- [WHATWG URL support](#url)\n- [Hooks](#hooks)\n- [Instances with custom defaults](#instances)\n- [Composable](documentation/advanced-creation.md#merging-instances)\n- [Plugins](documentation/lets-make-a-plugin.md)\n- [Electron support](#useelectronnet)\n- [Used by 3000+ packages and 1.4M+ repos](https://github.com/sindresorhus/got/network/dependents)\n- Actively maintained\n\n[Moving from Request?](documentation/migration-guides.md)\n\n[See how Got compares to other HTTP libraries](#comparison)\n\n## Install\n\n```\n$ npm install got\n```\n\n\n## Usage\n\n```js\nconst got = require(\'got\');\n\n(async () => {\n\ttry {\n\t\tconst response = await got(\'https://sindresorhus.com\');\n\t\tconsole.log(response.body);\n\t\t//=> \'<!doctype html> ...\'\n\t} catch (error) {\n\t\tconsole.log(error.response.body);\n\t\t//=> \'Internal server error ...\'\n\t}\n})();\n```\n\n###### Streams\n\n```js\nconst stream = require(\'stream\');\nconst {promisify} = require(\'util\');\nconst fs = require(\'fs\');\nconst got = require(\'got\');\n\nconst pipeline = promisify(stream.pipeline);\n\n(async () => {\n    await pipeline(\n        got.stream(\'https://sindresorhus.com\'),\n        fs.createWriteStream(\'index.html\')\n    );\n\n    // For POST, PUT, and PATCH methods `got.stream` returns a `stream.Writable`\n    await pipeline(\n        fs.createReadStream(\'index.html\'),\n        got.stream.post(\'https://sindresorhus.com\')\n    );\n})();\n```\n\n**Tip:** Using `from.pipe(to)` doesn\'t forward errors. If you use it, switch to [`Stream.pipeline(from, ..., to, callback)`](https://nodejs.org/api/stream.html#stream_stream_pipeline_streams_callback) instead (available from Node v10).\n\n### API\n\nIt\'s a `GET` request by default, but can be changed by using different methods or via `options.method`.\n\n**By default, Got will retry on failure. To disable this option, set [`retry`](#retry) to `0`.**\n\n#### got([url], [options])\n\nReturns a Promise for a [`response` object](#response) or a [stream](#streams-1) if `options.isStream` is set to true.\n\n##### url\n\nType: `string | object`\n\nThe URL to request, as a string, a [`https.request` options object](https://nodejs.org/api/https.html#https_https_request_options_callback), or a [WHATWG `URL`](https://nodejs.org/api/url.html#url_class_url).\n\nProperties from `options` will override properties in the parsed `url`.\n\nIf no protocol is specified, it will throw a `TypeError`.\n\n**Note:** this can also be an option.\n\n##### options\n\nType: `object`\n\nAny of the [`https.request`](https://nodejs.org/api/https.html#https_https_request_options_callback) options.\n\n###### prefixUrl\n\nType: `string | URL`\n\nWhen specified, `prefixUrl` will be prepended to `url`. The prefix can be any valid URL, either relative or absolute. A trailing slash `/` is optional, one will be added automatically, if needed, when joining `prefixUrl` and `url`. The `url` argument cannot start with a `/` when using this option.\n\nUseful when used with `got.extend()` to create niche-specific Got-instances.\n\n**Note:** `prefixUrl` will be ignored if the `url` argument is a URL instance.\n\n**Tip:** If the input URL still contains the initial `prefixUrl`, you can change it as many times as you want. Otherwise it will throw an error.\n\n```js\nconst got = require(\'got\');\n\n(async () => {\n\tawait got(\'unicorn\', {prefixUrl: \'https://cats.com\'});\n\t//=> \'https://cats.com/unicorn\'\n\n\tconst instance = got.extend({\n\t\tprefixUrl: \'https://google.com\'\n\t});\n\n\tawait instance(\'unicorn\', {\n\t\thooks: {\n\t\t\tbeforeRequest: [\n\t\t\t\toptions => {\n\t\t\t\t\toptions.prefixUrl = \'https://cats.com\';\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t});\n\t//=> \'https://cats.com/unicorn\'\n})();\n```\n\n###### headers\n\nType: `object`<br>\nDefault: `{}`\n\nRequest headers.\n\nExisting headers will be overwritten. Headers set to `undefined` will be omitted.\n\n###### isStream\n\nType: `boolean`<br>\nDefault: `false`\n\nReturns a `Stream` instead of a `Promise`. This is equivalent to calling `got.stream(url, [options])`.\n\n###### body\n\nType: `string | Buffer | stream.Readable` or [`form-data` instance](https://github.com/form-data/form-data)\n\n**Note:** The `body` option cannot be used with the `json` or `form` option.\n\n**Note:** If you provide this option, `got.stream()` will be read-only.\n\nIf present in `options` and `options.method` is not set, it will throw a `TypeError`.\n\nThe `content-length` header will be automatically set if `body` is a `string` / `Buffer` / `fs.createReadStream` instance / [`form-data` instance](https://github.com/form-data/form-data), and `content-length` and `transfer-encoding` are not manually set in `options.headers`.\n\n###### json\n\nType: `object | Array | number | string | boolean | null` *(JSON-serializable values)*\n\n**Note:** If you provide this option, `got.stream()` will be read-only.\n\nJSON body. If the `Content-Type` header is not set, it will be set to `application/json`.\n\n###### context\n\nType: `object`\n\nUser data. In contrast to other options, `context` is not enumerable.\n\n**Note:** The object is never merged, it\'s just passed through. Got will not modify the object in any way.\n\nIt\'s very useful for storing auth tokens:\n\n```js\nconst got = require(\'got\');\n\nconst instance = got.extend({\n\thooks: {\n\t\tbeforeRequest: [\n\t\t\toptions => {\n\t\t\t\tif (!options.context && !options.context.token) {\n\t\t\t\t\tthrow new Error(\'Token required\');\n\t\t\t\t}\n\n\t\t\t\toptions.headers.token = options.context.token;\n\t\t\t}\n\t\t]\n\t}\n});\n\n(async () => {\n\tconst context = {\n\t\ttoken: \'secret\'\n\t};\n\n\tconst response = await instance(\'https://httpbin.org/headers\', {context});\n\n\t// Let\'s see the headers\n\tconsole.log(response.body);\n})();\n```\n\n###### responseType\n\nType: `string`<br>\nDefault: `\'default\'`\n\n**Note:** When using streams, this option is ignored.\n\nParsing method used to retrieve the body from the response.\n\n- `\'default\'` - Will give a string unless the body is overwritten in a `afterResponse` hook or if `options.decompress` is set to false - Will give a Buffer if the response is compresssed.\n- `\'text\'` - Will give a string no matter what.\n- `\'json\'` - Will give an object, unless the body is invalid JSON, then it will throw.\n- `\'buffer\'` - Will give a Buffer, ignoring `options.encoding`. It will throw if the body is a custom object.\n\nThe promise has `.json()` and `.buffer()` and `.text()` methods which set this option automatically.\n\nExample:\n\n```js\n// This\nconst body = await got(url).json();\n\n// is the same as this\nconst body = await got(url, {responseType: \'json\'});\n```\n\n###### resolveBodyOnly\n\nType: `string`<br>\nDefault: `false`\n\nWhen set to `true` the promise will return the [Response body](#body-1) instead of the [Response](#response) object.\n\n###### cookieJar\n\nType: `object` | [`tough.CookieJar` instance](https://github.com/salesforce/tough-cookie#cookiejar)\n\n**Note:** If you provide this option, `options.headers.cookie` will be overridden.\n\nCookie support. You don\'t have to care about parsing or how to store them. [Example](#cookies).\n\n###### cookieJar.setCookie\n\nType: `Function<Promise>`\n\nThe function takes two arguments: `rawCookie` (`string`) and `url` (`string`).\n\n###### cookieJar.getCookieString\n\nType: `Function<Promise>`\n\nThe function takes one argument: `url` (`string`).\n\n###### ignoreInvalidCookies\n\nType: `boolean`<br>\nDefault: `false`\n\nIgnore invalid cookies instead of throwing an error. Only useful when the `cookieJar` option has been set. Not recommended.\n\n###### encoding\n\nType: `string`<br>\nDefault: `\'utf8\'`\n\n[Encoding](https://nodejs.org/api/buffer.html#buffer_buffers_and_character_encodings) to be used on `setEncoding` of the response data.\n\nTo get a [`Buffer`](https://nodejs.org/api/buffer.html), you need to set [`responseType`](#responseType) to `buffer` instead.\n\n###### form\n\nType: `object | true`\n\n**Note:** If you provide this option, `got.stream()` will be read-only.\n\nThe form body is converted to query string using [`(new URLSearchParams(object)).toString()`](https://nodejs.org/api/url.html#url_constructor_new_urlsearchparams_obj).\n\nIf set to `true` and the `Content-Type` header is not set, it will be set to `application/x-www-form-urlencoded`.\n\n###### searchParams\n\nType: `string | object<string, string | number> | URLSearchParams`\n\nQuery string that will be added to the request URL. This will override the query string in `url`.\n\nIf you need to pass in an array, you can do it using a `URLSearchParams` instance:\n\n```js\nconst got = require(\'got\');\n\nconst searchParams = new URLSearchParams([[\'key\', \'a\'], [\'key\', \'b\']]);\n\ngot(\'https://example.com\', {searchParams});\n\nconsole.log(searchParams.toString());\n//=> \'key=a&key=b\'\n```\n\nAnd if you need a different array format, you could use the [`query-string`](https://github.com/sindresorhus/query-string) package:\n\n```js\nconst got = require(\'got\');\nconst queryString = require(\'query-string\');\n\nconst searchParams = queryString.stringify({key: [\'a\', \'b\']}, {arrayFormat: \'bracket\'});\n\ngot(\'https://example.com\', {searchParams});\n\nconsole.log(searchParams);\n//=> \'key[]=a&key[]=b\'\n```\n\n###### timeout\n\nType: `number | object`\n\nMilliseconds to wait for the server to end the response before aborting the request with [`got.TimeoutError`](#gottimeouterror) error (a.k.a. `request` property). By default, there\'s no timeout.\n\nThis also accepts an `object` with the following fields to constrain the duration of each phase of the request lifecycle:\n\n- `lookup` starts when a socket is assigned and ends when the hostname has been resolved. Does not apply when using a Unix domain socket.\n- `connect` starts when `lookup` completes (or when the socket is assigned if lookup does not apply to the request) and ends when the socket is connected.\n- `secureConnect` starts when `connect` completes and ends when the handshaking process completes (HTTPS only).\n- `socket` starts when the socket is connected. See [request.setTimeout](https://nodejs.org/api/http.html#http_request_settimeout_timeout_callback).\n- `response` starts when the request has been written to the socket and ends when the response headers are received.\n- `send` starts when the socket is connected and ends with the request has been written to the socket.\n- `request` starts when the request is initiated and ends when the response\'s end event fires.\n\n###### retry\n\nType: `number | object`<br>\nDefault:\n- limit: `2`\n- calculateDelay: `(attemptCount, retryOptions, error, computedValue) => computedValue`\n- methods: `GET` `PUT` `HEAD` `DELETE` `OPTIONS` `TRACE`\n- statusCodes: [`408`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/408) [`413`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/413) [`429`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429) [`500`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500) [`502`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/502) [`503`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/503) [`504`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/504)\n- maxRetryAfter: `undefined`\n- errorCodes: `ETIMEDOUT` `ECONNRESET` `EADDRINUSE` `ECONNREFUSED` `EPIPE` `ENOTFOUND` `ENETUNREACH` `EAI_AGAIN`\n\nAn object representing `limit`, `calculateDelay`, `methods`, `statusCodes`, `maxRetryAfter` and `errorCodes` fields for maximum retry count, retry handler, allowed methods, allowed status codes, maximum [`Retry-After`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After) time and allowed error codes.\n\n**Note:** When using streams, this option is ignored. If the connection is reset when downloading, you need to catch the error and clear the file you were writing into to prevent duplicated content.\n\nIf `maxRetryAfter` is set to `undefined`, it will use `options.timeout`.<br>\nIf [`Retry-After`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After) header is greater than `maxRetryAfter`, it will cancel the request.\n\nDelays between retries counts with function `1000 * Math.pow(2, retry) + Math.random() * 100`, where `retry` is attempt number (starts from 1).\n\nThe `calculateDelay` property is a `function` with `attemptCount`, `retryOptions`, `error` and `computedValue` arguments for current retry count, the retry options, error and default computed value. The function must return a delay in milliseconds (`0` return value cancels retry).\n\nBy default, it retries *only* on the specified methods, status codes, and on these network errors:\n- `ETIMEDOUT`: One of the [timeout](#timeout) limits were reached.\n- `ECONNRESET`: Connection was forcibly closed by a peer.\n- `EADDRINUSE`: Could not bind to any free port.\n- `ECONNREFUSED`: Connection was refused by the server.\n- `EPIPE`: The remote side of the stream being written has been closed.\n- `ENOTFOUND`: Couldn\'t resolve the hostname to an IP address.\n- `ENETUNREACH`: No internet connection.\n- `EAI_AGAIN`: DNS lookup timed out.\n\n###### followRedirect\n\nType: `boolean`<br>\nDefault: `true`\n\nDefines if redirect responses should be followed automatically.\n\nNote that if a `303` is sent by the server in response to any request type (`POST`, `DELETE`, etc.), Got will automatically request the resource pointed to in the location header via `GET`. This is in accordance with [the spec](https://tools.ietf.org/html/rfc7231#section-6.4.4).\n\n###### methodRewriting\n\nType: `boolean`<br>\nDefault: `true`\n\nBy default, redirects will use [method rewriting](https://tools.ietf.org/html/rfc7231#section-6.4). For example, when sending a POST request and receiving a `302`, it will resend the body to the new location using the same HTTP method (`POST` in this case).\n\n###### maxRedirects\n\nType: `number`<br>\nDefault: `10`\n\nIf exceeded, the request will be aborted and a `MaxRedirectsError` will be thrown.\n\n###### decompress\n\nType: `boolean`<br>\nDefault: `true`\n\nDecompress the response automatically. This will set the `accept-encoding` header to `gzip, deflate, br` on Node.js 11.7.0+ or `gzip, deflate` for older Node.js versions, unless you set it yourself.\n\nBrotli (`br`) support requires Node.js 11.7.0 or later.\n\nIf this is disabled, a compressed response is returned as a `Buffer`. This may be useful if you want to handle decompression yourself or stream the raw compressed data.\n\n###### cache\n\nType: `object`<br>\nDefault: `false`\n\n[Cache adapter instance](#cache-adapters) for storing cached response data.\n\n###### dnsCache\n\nType: `object`<br>\nDefault: `false`\n\n[Cache adapter instance](#cache-adapters) for storing cached DNS data.\n\n###### request\n\nType: `Function`<br>\nDefault: `http.request` `https.request` *(Depending on the protocol)*\n\nCustom request function. The main purpose of this is to [support HTTP2 using a wrapper](#experimental-http2-support).\n\n###### useElectronNet\n\nType: `boolean`<br>\nDefault: `false`\n\nWhen used in Electron, Got will use [`electron.net`](https://electronjs.org/docs/api/net/) instead of the Node.js `http` module. According to the Electron docs, it should be fully compatible, but it\'s not entirely. See [#443](https://github.com/sindresorhus/got/issues/443) and [#461](https://github.com/sindresorhus/got/issues/461).\n\n###### throwHttpErrors\n\nType: `boolean`<br>\nDefault: `true`\n\nDetermines if a `got.HTTPError` is thrown for error responses (non-2xx status codes).\n\nIf this is disabled, requests that encounter an error status code will be resolved with the `response` instead of throwing. This may be useful if you are checking for resource availability and are expecting error responses.\n\n###### agent\n\nSame as the [`agent` option](https://nodejs.org/api/http.html#http_http_request_url_options_callback) for `http.request`, but with an extra feature:\n\nIf you require different agents for different protocols, you can pass a map of agents to the `agent` option. This is necessary because a request to one protocol might redirect to another. In such a scenario, Got will switch over to the right protocol agent for you.\n\n```js\nconst got = require(\'got\');\nconst HttpAgent = require(\'agentkeepalive\');\nconst {HttpsAgent} = HttpAgent;\n\ngot(\'https://sindresorhus.com\', {\n\tagent: {\n\t\thttp: new HttpAgent(),\n\t\thttps: new HttpsAgent()\n\t}\n});\n```\n\n###### hooks\n\nType: `object<string, Function[]>`\n\nHooks allow modifications during the request lifecycle. Hook functions may be async and are run serially.\n\n###### hooks.init\n\nType: `Function[]`<br>\nDefault: `[]`\n\nCalled with plain [request options](#options), right before their normalization. This is especially useful in conjunction with [`got.extend()`](#instances) and [`got.create()`](documentation/advanced-creation.md) when the input needs custom handling.\n\nSee the [Request migration guide](documentation/migration-guides.md#breaking-changes) for an example.\n\n**Note:** This hook must be synchronous!\n\n###### hooks.beforeRequest\n\nType: `Function[]`<br>\nDefault: `[]`\n\nCalled with [normalized](source/normalize-arguments.ts) [request options](#options). Got will make no further changes to the request before it is sent (except the body serialization). This is especially useful in conjunction with [`got.extend()`](#instances) and [`got.create()`](documentation/advanced-creation.md) when you want to create an API client that, for example, uses HMAC-signing.\n\nSee the [AWS section](#aws) for an example.\n\n###### hooks.beforeRedirect\n\nType: `Function[]`<br>\nDefault: `[]`\n\nCalled with [normalized](source/normalize-arguments.ts) [request options](#options) and the redirect [response](#response). Got will make no further changes to the request. This is especially useful when you want to avoid dead sites. Example:\n\n```js\nconst got = require(\'got\');\n\ngot(\'https://example.com\', {\n\thooks: {\n\t\tbeforeRedirect: [\n\t\t\t(options, response) => {\n\t\t\t\tif (options.hostname === \'deadSite\') {\n\t\t\t\t\toptions.hostname = \'fallbackSite\';\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t}\n});\n```\n\n###### hooks.beforeRetry\n\nType: `Function[]`<br>\nDefault: `[]`\n\n**Note:** When using streams, this hook is ignored.\n\nCalled with [normalized](source/normalize-arguments.ts) [request options](#options), the error and the retry count. Got will make no further changes to the request. This is especially useful when some extra work is required before the next try. Example:\n\n```js\nconst got = require(\'got\');\n\ngot.post(\'https://example.com\', {\n\thooks: {\n\t\tbeforeRetry: [\n\t\t\t(options, error, retryCount) => {\n\t\t\t\tif (error.statusCode === 413) { // Payload too large\n\t\t\t\t\toptions.body = getNewBody();\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t}\n});\n```\n\n**Note:** When retrying in a `afterResponse` hook, all remaining `beforeRetry` hooks will be called without the `error` and `retryCount` arguments.\n\n###### hooks.afterResponse\n\nType: `Function[]`<br>\nDefault: `[]`\n\n**Note:** When using streams, this hook is ignored.\n\nCalled with [response object](#response) and a retry function. Calling the retry function will trigger `beforeRetry` hooks.\n\nEach function should return the response. This is especially useful when you want to refresh an access token. Example:\n\n```js\nconst got = require(\'got\');\n\nconst instance = got.extend({\n\thooks: {\n\t\tafterResponse: [\n\t\t\t(response, retryWithMergedOptions) => {\n\t\t\t\tif (response.statusCode === 401) { // Unauthorized\n\t\t\t\t\tconst updatedOptions = {\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\ttoken: getNewToken() // Refresh the access token\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t\t// Save for further requests\n\t\t\t\t\tinstance.defaults.options = got.mergeOptions(instance.defaults.options, updatedOptions);\n\n\t\t\t\t\t// Make a new retry\n\t\t\t\t\treturn retryWithMergedOptions(updatedOptions);\n\t\t\t\t}\n\n\t\t\t\t// No changes otherwise\n\t\t\t\treturn response;\n\t\t\t}\n\t\t],\n\t\tbeforeRetry: [\n\t\t\t(options, error, retryCount) => {\n\t\t\t\t// This will be called on `retryWithMergedOptions(...)`\n\t\t\t}\n\t\t]\n\t},\n\tmutableDefaults: true\n});\n```\n\n###### hooks.beforeError\n\nType: `Function[]`<br>\nDefault: `[]`\n\nCalled with an `Error` instance. The error is passed to the hook right before it\'s thrown. This is especially useful when you want to have more detailed errors.\n\n**Note:** Errors thrown while normalizing input options are thrown directly and not part of this hook.\n\n```js\nconst got = require(\'got\');\n\ngot(\'https://api.github.com/some-endpoint\', {\n\thooks: {\n\t\tbeforeError: [\n\t\t\terror => {\n\t\t\t\tconst {response} = error;\n \t\t\t\tif (response && response.body) {\n\t\t\t\t\terror.name = \'GitHubError\';\n\t\t\t\t\terror.message = `${response.body.message} (${error.statusCode})`;\n\t\t\t\t}\n\n \t\t\t\treturn error;\n\t\t\t}\n\t\t]\n\t}\n});\n```\n\n#### Response\n\nThe response object will typically be a [Node.js HTTP response stream](https://nodejs.org/api/http.html#http_class_http_incomingmessage), however, if returned from the cache it will be a [response-like object](https://github.com/lukechilds/responselike) which behaves in the same way.\n\n##### request\n\nType: `object`\n\n**Note:** This is not a [http.ClientRequest](https://nodejs.org/api/http.html#http_class_http_clientrequest).\n\n- `options` - The Got options that were set on this request.\n\n##### body\n\nType: `string | object | Buffer` *(Depending on `options.responseType`)*\n\nThe result of the request.\n\n##### url\n\nType: `string`\n\nThe request URL or the final URL after redirects.\n\n##### ip\n\nType: `string`\n\nThe remote IP address.\n\n**Note:** Not available when the response is cached. This is hopefully a temporary limitation, see [lukechilds/cacheable-request#86](https://github.com/lukechilds/cacheable-request/issues/86).\n\n##### requestUrl\n\nType: `string`\n\nThe original request URL.\n\n##### timings\n\nType: `object`\n\nThe object contains the following properties:\n\n- `start` - Time when the request started.\n- `socket` - Time when a socket was assigned to the request.\n- `lookup` - Time when the DNS lookup finished.\n- `connect` - Time when the socket successfully connected.\n- `upload` - Time when the request finished uploading.\n- `response` - Time when the request fired the `response` event.\n- `end` - Time when the response fired the `end` event.\n- `error` - Time when the request fired the `error` event.\n- `phases`\n\t- `wait` - `timings.socket - timings.start`\n\t- `dns` - `timings.lookup - timings.socket`\n\t- `tcp` - `timings.connect - timings.lookup`\n\t- `request` - `timings.upload - timings.connect`\n\t- `firstByte` - `timings.response - timings.upload`\n\t- `download` - `timings.end - timings.response`\n\t- `total` - `timings.end - timings.start` or `timings.error - timings.start`\n\n**Note:** The time is a `number` representing the milliseconds elapsed since the UNIX epoch.\n\n##### isFromCache\n\nType: `boolean`\n\nWhether the response was retrieved from the cache.\n\n##### redirectUrls\n\nType: `string[]`\n\nThe redirect URLs.\n\n##### retryCount\n\nType: `number`\n\nThe number of times the request was retried.\n\n#### Streams\n\n**Note:** Progress events, redirect events and request/response events can also be used with promises.\n\n**Note:** To access `response.isFromCache` you need to use `got.stream(url, options).isFromCache`. The value will be undefined until the `response` event.\n\n#### got.stream(url, [options])\n\nSets `options.isStream` to `true`.\n\nReturns a [duplex stream](https://nodejs.org/api/stream.html#stream_class_stream_duplex) with additional events:\n\n##### .on(\'request\', request)\n\n`request` event to get the request object of the request.\n\n**Tip:** You can use `request` event to abort request:\n\n```js\ngot.stream(\'https://github.com\')\n\t.on(\'request\', request => setTimeout(() => request.abort(), 50));\n```\n\n##### .on(\'response\', response)\n\nThe `response` event to get the response object of the final request.\n\n##### .on(\'redirect\', response, nextOptions)\n\nThe `redirect` event to get the response object of a redirect. The second argument is options for the next request to the redirect location.\n\n##### .on(\'uploadProgress\', progress)\n##### .on(\'downloadProgress\', progress)\n\nProgress events for uploading (sending a request) and downloading (receiving a response). The `progress` argument is an object like:\n\n```js\n{\n\tpercent: 0.1,\n\ttransferred: 1024,\n\ttotal: 10240\n}\n```\n\nIf it\'s not possible to retrieve the body size (can happen when streaming), `total` will be `undefined`.\n\n```js\n(async () => {\n\tconst response = await got(\'https://sindresorhus.com\')\n\t\t.on(\'downloadProgress\', progress => {\n\t\t\t// Report download progress\n\t\t})\n\t\t.on(\'uploadProgress\', progress => {\n\t\t\t// Report upload progress\n\t\t});\n\n\tconsole.log(response);\n})();\n```\n\n##### .on(\'error\', error, body, response)\n\nThe `error` event emitted in case of a protocol error (like `ENOTFOUND` etc.) or status error (4xx or 5xx). The second argument is the body of the server response in case of status error. The third argument is a response object.\n\n#### got.get(url, [options])\n#### got.post(url, [options])\n#### got.put(url, [options])\n#### got.patch(url, [options])\n#### got.head(url, [options])\n#### got.delete(url, [options])\n\nSets `options.method` to the method name and makes a request.\n\n### Instances\n\n#### got.extend(...options)\n\nConfigure a new `got` instance with default `options`. The `options` are merged with the parent instance\'s `defaults.options` using [`got.mergeOptions`](#gotmergeoptionsparentoptions-newoptions). You can access the resolved options with the `.defaults` property on the instance.\n\n```js\nconst client = got.extend({\n\tprefixUrl: \'https://example.com\',\n\theaders: {\n\t\t\'x-unicorn\': \'rainbow\'\n\t}\n});\n\nclient.get(\'/demo\');\n\n/* HTTP Request =>\n * GET /demo HTTP/1.1\n * Host: example.com\n * x-unicorn: rainbow\n */\n```\n\n```js\n(async () => {\n\tconst client = got.extend({\n\t\tprefixUrl: \'httpbin.org\',\n\t\theaders: {\n\t\t\t\'x-foo\': \'bar\'\n\t\t}\n\t});\n\tconst {headers} = await client.get(\'/headers\').json();\n\t//=> headers[\'x-foo\'] === \'bar\'\n\n\tconst jsonClient = client.extend({\n\t\tresponseType: \'json\',\n\t\tresolveBodyOnly: true,\n\t\theaders: {\n\t\t\t\'x-baz\': \'qux\'\n\t\t}\n\t});\n\tconst {headers: headers2} = await jsonClient.get(\'/headers\');\n\t//=> headers2[\'x-foo\'] === \'bar\'\n\t//=> headers2[\'x-baz\'] === \'qux\'\n})();\n```\n\nAdditionally, `got.extend()` accepts two properties from the `defaults` object: `mutableDefaults` and `handlers`. Example:\n\n```js\n// You can now modify `mutableGot.defaults.options`.\nconst mutableGot = got.extend({mutableDefaults: true});\n\nconst mergedHandlers = got.extend({\n\thandlers: [\n\t\t(options, next) => {\n\t\t\tdelete options.headers.referer;\n\n\t\t\treturn next(options);\n\t\t}\n\t]\n});\n```\n\n**Note:** Handlers can be asynchronous. The recommended approach is:\n\n```js\nconst handler = (options, next) => {\n\tif (options.stream) {\n\t\t// It\'s a Stream\n\t\treturn next(options);\n\t}\n\n\t// It\'s a Promise\n\treturn (async () => {\n\t\ttry {\n\t\t\tconst response = await next(options);\n\t\t\tresponse.yourOwnProperty = true;\n\t\t\treturn response;\n\t\t} catch (error) {\n\t\t\t// Every error will be replaced by this one.\n\t\t\t// Before you receive any error here,\n\t\t\t// it will be passed to the `beforeError` hooks first.\n\t\t\t// Note: this one won\'t be passed to `beforeError` hook. It\'s final.\n\t\t\tthrow new Error(\'Your very own error.\');\n\t\t}\n\t})();\n};\n\nconst instance = got.extend({handlers: [handler]});\n```\n\n#### got.extend(...instances)\n\nMerges many instances into a single one:\n- options are merged using [`got.mergeOptions()`](#gotmergeoptionsparentoptions-newoptions) (+ hooks are merged too),\n- handlers are stored in an array (you can access them through `instance.defaults.handlers`).\n\n#### got.extend(...options, ...instances, ...)\n\nIt\'s possible to combine options and instances.<br>\nIt gives the same effect as `got.extend(...options).extend(...instances)`:\n\n```js\nconst a = {headers: {cat: \'meow\'}};\nconst b = got.create({\n\toptions: {\n\t\theaders: {\n\t\t\tcow: \'moo\'\n\t\t}\n\t}\n});\n\n// The same as `got.extend(a).extend(b)`.\n// Note `a` is options and `b` is an instance.\ngot.extend(a, b);\n//=> {headers: {cat: \'meow\', cow: \'moo\'}}\n```\n\n#### got.mergeOptions(parentOptions, newOptions)\n\nExtends parent options. Avoid using [object spread](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax#Spread_in_object_literals) as it doesn\'t work recursively:\n\n```js\nconst a = {headers: {cat: \'meow\', wolf: [\'bark\', \'wrrr\']}};\nconst b = {headers: {cow: \'moo\', wolf: [\'auuu\']}};\n\n{...a, ...b}            // => {headers: {cow: \'moo\', wolf: [\'auuu\']}}\ngot.mergeOptions(a, b)  // => {headers: {cat: \'meow\', cow: \'moo\', wolf: [\'auuu\']}}\n```\n\nOptions are deeply merged to a new object. The value of each key is determined as follows:\n\n- If the new property is set to `undefined`, it keeps the old one.\n- If both properties are an instances of `URLSearchParams`, a new URLSearchParams instance is created. The values are merged using [`urlSearchParams.append(key, value)`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams/append).\n- If the parent property is an instance of `URL` and the new value is a `string` or `URL`, a new URL instance is created: [`new URL(new, parent)`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL#Syntax).\n- If the new property is a plain `object`:\n\t- If the parent property is a plain `object` too, both values are merged recursively into a new `object`.\n\t- Otherwise, only the new value is deeply cloned.\n- If the new property is an `Array`, it overwrites the old one with a deep clone of the new property.\n- Otherwise, the new value is assigned to the key.\n\n#### got.defaults\n\nType: `object`\n\nThe Got defaults used in that instance.\n\n##### [options](#options)\n\n##### handlers\n\nType: `Function[]`<br>\nDefault: `[]`\n\nAn array of functions. You execute them directly by calling `got()`. They are some sort of "global hooks" - these functions are called first. The last handler (*it\'s hidden*) is either [`asPromise`](source/as-promise.ts) or [`asStream`](source/as-stream.ts), depending on the `options.isStream` property.\n\nEach handler takes two arguments:\n\n###### [options](#options)\n\n###### next()\n\nReturns a `Promise` or a `Stream` depending on [`options.isStream`](#isstream).\n\n```js\nconst settings = {\n\thandlers: [\n\t\t(options, next) => {\n\t\t\tif (options.isStream) {\n\t\t\t\t// It\'s a Stream, so we can perform stream-specific actions on it\n\t\t\t\treturn next(options)\n\t\t\t\t\t.on(\'request\', request => {\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\trequest.abort();\n\t\t\t\t\t\t}, 50);\n\t\t\t\t\t});\n\t\t\t}\n\n\t\t\t// It\'s a Promise\n\t\t\treturn next(options);\n\t\t}\n\t],\n\toptions: got.mergeOptions(got.defaults.options, {\n\t\tresponseType: \'json\'\n\t})\n};\n\nconst jsonGot = got.create(settings);\n```\n\n##### mutableDefaults\n\nType: `boolean`<br>\nDefault: `false`\n\nA read-only boolean describing whether the defaults are mutable or not. If set to `true`, you can [update headers over time](#hooksafterresponse), for example, update an access token when it expires.\n\n## Errors\n\nEach error contains an `options` property which are the options Got used to create a request - just to make debugging easier.\n\n#### got.CacheError\n\nWhen a cache method fails, for example, if the database goes down or there\'s a filesystem error.\n\n#### got.RequestError\n\nWhen a request fails. Contains a `code` property with error class code, like `ECONNREFUSED`.\n\n#### got.ReadError\n\nWhen reading from response stream fails.\n\n#### got.ParseError\n\nWhen server response code is 2xx, and parsing body fails. Includes a `response` property.\n\n#### got.HTTPError\n\nWhen the server response code is not 2xx. Includes a `response` property.\n\n#### got.MaxRedirectsError\n\nWhen the server redirects you more than ten times. Includes a `response` property.\n\n#### got.UnsupportedProtocolError\n\nWhen given an unsupported protocol.\n\n#### got.CancelError\n\nWhen the request is aborted with `.cancel()`.\n\n#### got.TimeoutError\n\nWhen the request is aborted due to a [timeout](#timeout). Includes an `event` and `timings` property.\n\n## Aborting the request\n\nThe promise returned by Got has a [`.cancel()`](https://github.com/sindresorhus/p-cancelable) method which when called, aborts the request.\n\n```js\n(async () => {\n\tconst request = got(url, options);\n\n\t// \xe2\x80\xa6\n\n\t// In another part of the code\n\tif (something) {\n\t\trequest.cancel();\n\t}\n\n\t// \xe2\x80\xa6\n\n\ttry {\n\t\tawait request;\n\t} catch (error) {\n\t\tif (request.isCanceled) { // Or `error instanceof got.CancelError`\n\t\t\t// Handle cancelation\n\t\t}\n\n\t\t// Handle other errors\n\t}\n})();\n```\n\nWhen using hooks, simply throw an error to abort the request.\n\n```js\n(async () => {\n\tconst request = got(url, {\n\t\thooks: {\n\t\t\tbeforeRequest: [\n\t\t\t\t() => {\n\t\t\t\t\tthrow new Error(\'Oops. Request canceled.\');\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t});\n\n\ttry {\n\t\tawait request;\n\t} catch (error) {\n\t\t// \xe2\x80\xa6\n\t}\n})();\n```\n\n<a name="cache-adapters"></a>\n## Cache\n\nGot implements [RFC 7234](http://httpwg.org/specs/rfc7234.html) compliant HTTP caching which works out of the box in-memory and is easily pluggable with a wide range of storage adapters. Fresh cache entries are served directly from the cache, and stale cache entries are revalidated with `If-None-Match`/`If-Modified-Since` headers. You can read more about the underlying cache behavior in the [`cacheable-request` documentation](https://github.com/lukechilds/cacheable-request). For DNS cache, Got uses [`cacheable-lookup`](https://github.com/szmarczak/cacheable-lookup).\n\nYou can use the JavaScript `Map` type as an in-memory cache:\n\n```js\nconst got = require(\'got\');\nconst map = new Map();\n\n(async () => {\n\t\tlet response = await got(\'https://sindresorhus.com\', {cache: map});\n\t\tconsole.log(response.isFromCache);\n\t\t//=> false\n\n\t\tresponse = await got(\'https://sindresorhus.com\', {cache: map});\n\t\tconsole.log(response.isFromCache);\n\t\t//=> true\n})();\n```\n\nGot uses [Keyv](https://github.com/lukechilds/keyv) internally to support a wide range of storage adapters. For something more scalable you could use an [official Keyv storage adapter](https://github.com/lukechilds/keyv#official-storage-adapters):\n\n```\n$ npm install @keyv/redis\n```\n\n```js\nconst got = require(\'got\');\nconst KeyvRedis = require(\'@keyv/redis\');\n\nconst redis = new KeyvRedis(\'redis://user:pass@localhost:6379\');\n\ngot(\'https://sindresorhus.com\', {cache: redis});\n```\n\nGot supports anything that follows the Map API, so it\'s easy to write your own storage adapter or use a third-party solution.\n\nFor example, the following are all valid storage adapters:\n\n```js\nconst storageAdapter = new Map();\n// Or\nconst storageAdapter = require(\'./my-storage-adapter\');\n// Or\nconst QuickLRU = require(\'quick-lru\');\nconst storageAdapter = new QuickLRU({maxSize: 1000});\n\ngot(\'https://sindresorhus.com\', {cache: storageAdapter});\n```\n\nView the [Keyv docs](https://github.com/lukechilds/keyv) for more information on how to use storage adapters.\n\n\n## Proxies\n\nYou can use the [`tunnel`](https://github.com/koichik/node-tunnel) package with the `agent` option to work with proxies:\n\n```js\nconst got = require(\'got\');\nconst tunnel = require(\'tunnel\');\n\ngot(\'https://sindresorhus.com\', {\n\tagent: tunnel.httpOverHttp({\n\t\tproxy: {\n\t\t\thost: \'localhost\'\n\t\t}\n\t})\n});\n```\n\nAlternatively, use [`global-agent`](https://github.com/gajus/global-agent) to configure a global proxy for all HTTP/HTTPS traffic in your program.\n\n\n## Cookies\n\nYou can use the [`tough-cookie`](https://github.com/salesforce/tough-cookie) package:\n\n```js\nconst {promisify} = require(\'util\');\nconst got = require(\'got\');\nconst {CookieJar} = require(\'tough-cookie\');\n\n(async () => {\n\tconst cookieJar = new CookieJar();\n\tconst setCookie = promisify(cookieJar.setCookie.bind(cookieJar));\n\n\tawait setCookie(\'foo=bar\', \'https://example.com\');\n\tawait got(\'https://example.com\', {cookieJar});\n})();\n```\n\n\n## Form data\n\nYou can use the [`form-data`](https://github.com/form-data/form-data) package to create POST request with form data:\n\n```js\nconst fs = require(\'fs\');\nconst got = require(\'got\');\nconst FormData = require(\'form-data\');\n\nconst form = new FormData();\n\nform.append(\'my_file\', fs.createReadStream(\'/foo/bar.jpg\'));\n\ngot.post(\'https://example.com\', {\n\tbody: form\n});\n```\n\n\n## OAuth\n\nYou can use the [`oauth-1.0a`](https://github.com/ddo/oauth-1.0a) package to create a signed OAuth request:\n\n```js\nconst got = require(\'got\');\nconst crypto  = require(\'crypto\');\nconst OAuth = require(\'oauth-1.0a\');\n\nconst oauth = OAuth({\n\tconsumer: {\n\t\tkey: process.env.CONSUMER_KEY,\n\t\tsecret: process.env.CONSUMER_SECRET\n\t},\n\tsignature_method: \'HMAC-SHA1\',\n\thash_function: (baseString, key) => crypto.createHmac(\'sha1\', key).update(baseString).digest(\'base64\')\n});\n\nconst token = {\n\tkey: process.env.ACCESS_TOKEN,\n\tsecret: process.env.ACCESS_TOKEN_SECRET\n};\n\nconst url = \'https://api.twitter.com/1.1/statuses/home_timeline.json\';\n\ngot(url, {\n\theaders: oauth.toHeader(oauth.authorize({url, method: \'GET\'}, token)),\n\tresponseType: \'json\'\n});\n```\n\n\n## Unix Domain Sockets\n\nRequests can also be sent via [unix domain sockets](http://serverfault.com/questions/124517/whats-the-difference-between-unix-socket-and-tcp-ip-socket). Use the following URL scheme: `PROTOCOL://unix:SOCKET:PATH`.\n\n- `PROTOCOL` - `http` or `https` *(optional)*\n- `SOCKET` - Absolute path to a unix domain socket, for example: `/var/run/docker.sock`\n- `PATH` - Request path, for example: `/v2/keys`\n\n```js\ngot(\'http://unix:/var/run/docker.sock:/containers/json\');\n\n// Or without protocol (HTTP by default)\ngot(\'unix:/var/run/docker.sock:/containers/json\');\n```\n\n\n## AWS\n\nRequests to AWS services need to have their headers signed. This can be accomplished by using the [`aws4`](https://www.npmjs.com/package/aws4) package. This is an example for querying an ["API Gateway"](https://docs.aws.amazon.com/apigateway/api-reference/signing-requests/) with a signed request.\n\n```js\nconst got = require(\'got\');\nconst AWS = require(\'aws-sdk\');\nconst aws4 = require(\'aws4\');\n\nconst chain = new AWS.CredentialProviderChain();\n\n// Create a Got instance to use relative paths and signed requests\nconst awsClient = got.extend({\n\tprefixUrl: \'https://<api-id>.execute-api.<api-region>.amazonaws.com/<stage>/\',\n\thooks: {\n\t\tbeforeRequest: [\n\t\t\tasync options => {\n\t\t\t\tconst credentials = await chain.resolvePromise();\n\t\t\t\taws4.sign(options, credentials);\n\t\t\t}\n\t\t]\n\t}\n});\n\nconst response = await awsClient(\'endpoint/path\', {\n\t// Request-specific options\n});\n```\n\n\n## Testing\n\nYou can test your requests by using the [`nock`](https://github.com/node-nock/nock) package to mock an endpoint:\n\n```js\nconst got = require(\'got\');\nconst nock = require(\'nock\');\n\nnock(\'https://sindresorhus.com\')\n\t.get(\'/\')\n\t.reply(200, \'Hello world!\');\n\n(async () => {\n\tconst response = await got(\'https://sindresorhus.com\');\n\tconsole.log(response.body);\n\t//=> \'Hello world!\'\n})();\n```\n\nFor real integration testing we recommend using [`ava`](https://github.com/avajs/ava) with [`create-test-server`](https://github.com/lukechilds/create-test-server). We\'re using a macro so we don\'t have to `server.listen()` and `server.close()` every test. Take a look at one of our tests:\n\n```js\ntest(\'retry function gets iteration count\', withServer, async (t, server, got) => {\n\tlet knocks = 0;\n\tserver.get(\'/\', (request, response) => {\n\t\tif (knocks++ === 1) {\n\t\t\tresponse.end(\'who`s there?\');\n\t\t}\n\t});\n\n\tawait got({\n\t\tretry: {\n\t\t\tcalculateDelay: ({attemptCount}) => {\n\t\t\t\tt.true(is.number(attemptCount));\n\t\t\t\treturn attemptCount < 2;\n\t\t\t}\n\t\t}\n\t});\n});\n```\n\n\n## Tips\n\n### JSON mode\n\nTo pass an object as the body, you need to use the `json` option. It will be stringified using `JSON.stringify`. Example:\n\n```js\nconst got = require(\'got\');\n\n(async () => {\n\tconst {body} = await got.post(\'https://httpbin.org/anything\', {\n\t\tjson: {\n\t\t\thello: \'world\'\n\t\t},\n\t\tresponseType: \'json\'\n\t});\n\n\tconsole.log(body.data);\n\t//=> \'{"hello":"world"}\'\n})();\n```\n\nTo receive a JSON body you can either set `responseType` option to `json` or use `promise.json()`. Example:\n\n```js\nconst got = require(\'got\');\n\n(async () => {\n\tconst body = await got.post(\'https://httpbin.org/anything\', {\n\t\tbody: {\n\t\t\thello: \'world\'\n\t\t}\n\t}).json();\n\n\tconsole.log(body);\n\t//=> {\xe2\x80\xa6}\n})();\n```\n\n### User Agent\n\nIt\'s a good idea to set the `\'user-agent\'` header so the provider can more easily see how their resource is used. By default, it\'s the URL to this repo. You can omit this header by setting it to `undefined`.\n\n```js\nconst got = require(\'got\');\nconst pkg = require(\'./package.json\');\n\ngot(\'https://sindresorhus.com\', {\n\theaders: {\n\t\t\'user-agent\': `my-package/${pkg.version} (https://github.com/username/my-package)`\n\t}\n});\n\ngot(\'https://sindresorhus.com\', {\n\theaders: {\n\t\t\'user-agent\': undefined\n\t}\n});\n```\n\n### 304 Responses\n\nBear in mind; if you send an `if-modified-since` header and receive a `304 Not Modified` response, the body will be empty. It\'s your responsibility to cache and retrieve the body contents.\n\n### Custom endpoints\n\nUse `got.extend()` to make it nicer to work with REST APIs. Especially if you use the `prefixUrl` option.\n\n**Note:** Not to be confused with [`got.create()`](documentation/advanced-creation.md), which has no defaults.\n\n```js\nconst got = require(\'got\');\nconst pkg = require(\'./package.json\');\n\nconst custom = got.extend({\n\tprefixUrl: \'example.com\',\n\tresponseType: \'json\',\n\theaders: {\n\t\t\'user-agent\': `my-package/${pkg.version} (https://github.com/username/my-package)`\n\t}\n});\n\n// Use `custom` exactly how you use `got`\n(async () => {\n\tconst list = await custom(\'/v1/users/list\');\n})();\n```\n\n### Experimental HTTP2 support\n\nGot provides an experimental support for HTTP2 using the [`http2-wrapper`](https://github.com/szmarczak/http2-wrapper) package:\n\n```js\nconst got = require(\'got\');\nconst {request} = require(\'http2-wrapper\');\n\nconst h2got = got.extend({request});\n\n(async () => {\n\tconst {body} = await h2got(\'https://nghttp2.org/httpbin/headers\');\n\tconsole.log(body);\n})();\n```\n\n## Comparison\n\n|                       |       `got`      | [`request`][r0] |  [`node-fetch`][n0]  |    [`ky`][k0]     |  [`axios`][a0]   |  [`superagent`][s0]  |\n|-----------------------|:----------------:|:---------------:|:--------------------:|:-----------------:|:----------------:|:--------------------:|\n| HTTP/2 support        |        \xe2\x9d\x94        |        \xe2\x9d\x8c       |          \xe2\x9d\x8c         |         \xe2\x9d\x8c        |        \xe2\x9d\x8c       |          \xe2\x9c\x94\xef\xb8\x8f\\*\\*      |\n| Browser support       |        \xe2\x9d\x8c       |        \xe2\x9d\x8c       |          \xe2\x9c\x94\xef\xb8\x8f\\*       |         \xe2\x9c\x94\xef\xb8\x8f        |        \xe2\x9c\x94\xef\xb8\x8f       |          \xe2\x9c\x94\xef\xb8\x8f          |\n| Electron support      |        \xe2\x9c\x94\xef\xb8\x8f       |        \xe2\x9d\x8c       |          \xe2\x9d\x8c         |         \xe2\x9d\x8c        |        \xe2\x9d\x8c       |          \xe2\x9d\x8c          |\n| Promise API           |        \xe2\x9c\x94\xef\xb8\x8f       |        \xe2\x9c\x94\xef\xb8\x8f       |          \xe2\x9c\x94\xef\xb8\x8f         |         \xe2\x9c\x94\xef\xb8\x8f        |        \xe2\x9c\x94\xef\xb8\x8f       |          \xe2\x9c\x94\xef\xb8\x8f          |\n| Stream API            |        \xe2\x9c\x94\xef\xb8\x8f       |        \xe2\x9c\x94\xef\xb8\x8f       |     Node.js only     |         \xe2\x9d\x8c        |        \xe2\x9d\x8c       |          \xe2\x9c\x94\xef\xb8\x8f          |\n| Request cancelation   |        \xe2\x9c\x94\xef\xb8\x8f       |        \xe2\x9d\x8c       |          \xe2\x9c\x94\xef\xb8\x8f         |         \xe2\x9c\x94\xef\xb8\x8f        |        \xe2\x9c\x94\xef\xb8\x8f       |          \xe2\x9c\x94\xef\xb8\x8f          |\n| RFC compliant caching |        \xe2\x9c\x94\xef\xb8\x8f       |        \xe2\x9d\x8c       |          \xe2\x9d\x8c         |         \xe2\x9d\x8c        |        \xe2\x9d\x8c       |          \xe2\x9d\x8c          |\n| Cookies (out-of-box)  |        \xe2\x9c\x94\xef\xb8\x8f       |        \xe2\x9c\x94\xef\xb8\x8f       |          \xe2\x9d\x8c         |         \xe2\x9d\x8c        |        \xe2\x9d\x8c       |          \xe2\x9d\x8c          |\n| Follows redirects     |        \xe2\x9c\x94\xef\xb8\x8f       |        \xe2\x9c\x94\xef\xb8\x8f       |          \xe2\x9c\x94\xef\xb8\x8f         |         \xe2\x9c\x94\xef\xb8\x8f        |        \xe2\x9c\x94\xef\xb8\x8f       |          \xe2\x9c\x94\xef\xb8\x8f          |\n| Retries on failure    |        \xe2\x9c\x94\xef\xb8\x8f       |        \xe2\x9d\x8c       |          \xe2\x9d\x8c         |         \xe2\x9c\x94\xef\xb8\x8f        |        \xe2\x9d\x8c       |          \xe2\x9c\x94\xef\xb8\x8f          |\n| Progress events       |        \xe2\x9c\x94\xef\xb8\x8f       |        \xe2\x9d\x8c       |          \xe2\x9d\x8c         |         \xe2\x9c\x94\xef\xb8\x8f\\*\\*\\*  |   Browser only   |          \xe2\x9c\x94\xef\xb8\x8f          |\n| Handles gzip/deflate  |        \xe2\x9c\x94\xef\xb8\x8f       |        \xe2\x9c\x94\xef\xb8\x8f       |          \xe2\x9c\x94\xef\xb8\x8f         |         \xe2\x9c\x94\xef\xb8\x8f        |        \xe2\x9c\x94\xef\xb8\x8f       |          \xe2\x9c\x94\xef\xb8\x8f          |\n| Advanced timeouts     |        \xe2\x9c\x94\xef\xb8\x8f       |        \xe2\x9d\x8c       |          \xe2\x9d\x8c         |         \xe2\x9d\x8c        |        \xe2\x9d\x8c       |          \xe2\x9d\x8c          |\n| Timings               |        \xe2\x9c\x94\xef\xb8\x8f       |        \xe2\x9c\x94\xef\xb8\x8f       |          \xe2\x9d\x8c         |         \xe2\x9d\x8c        |        \xe2\x9d\x8c       |          \xe2\x9d\x8c          |\n| Errors with metadata  |        \xe2\x9c\x94\xef\xb8\x8f       |        \xe2\x9d\x8c       |          \xe2\x9d\x8c         |         \xe2\x9c\x94\xef\xb8\x8f        |        \xe2\x9c\x94\xef\xb8\x8f       |          \xe2\x9d\x8c          |\n| JSON mode             |        \xe2\x9c\x94\xef\xb8\x8f       |        \xe2\x9c\x94\xef\xb8\x8f       |          \xe2\x9c\x94\xef\xb8\x8f         |         \xe2\x9c\x94\xef\xb8\x8f        |        \xe2\x9c\x94\xef\xb8\x8f       |          \xe2\x9c\x94\xef\xb8\x8f          |\n| Custom defaults       |        \xe2\x9c\x94\xef\xb8\x8f       |        \xe2\x9c\x94\xef\xb8\x8f       |          \xe2\x9d\x8c         |         \xe2\x9c\x94\xef\xb8\x8f        |        \xe2\x9c\x94\xef\xb8\x8f       |          \xe2\x9d\x8c          |\n| Composable            |        \xe2\x9c\x94\xef\xb8\x8f       |        \xe2\x9d\x8c       |          \xe2\x9d\x8c         |         \xe2\x9d\x8c        |        \xe2\x9d\x8c       |          \xe2\x9c\x94\xef\xb8\x8f          |\n| Hooks                 |        \xe2\x9c\x94\xef\xb8\x8f       |        \xe2\x9d\x8c       |          \xe2\x9d\x8c         |         \xe2\x9c\x94\xef\xb8\x8f        |        \xe2\x9c\x94\xef\xb8\x8f       |          \xe2\x9d\x8c          |\n| Issues open           |  [![][gio]][g1]  | [![][rio]][r1]  |    [![][nio]][n1]    |   [![][kio]][k1]  |  [![][aio]][a1] |    [![][sio]][s1]     |\n| Issues closed         |  [![][gic]][g2]  | [![][ric]][r2]  |    [![][nic]][n2]    |   [![][kic]][k2]  |  [![][aic]][a2] |    [![][sic]][s2]     |\n| Downloads             |  [![][gd]][g3]   |  [![][rd]][r3]  |    [![][nd]][n3]     |   [![][kd]][k3]   |  [![][ad]][a3]  |    [![][sd]][s3]      |\n| Coverage              |  [![][gc]][g4]   |  [![][rc]][r4]  |    [![][nc]][n4]     |   [![][kc]][k4]   |  [![][ac]][a4]  |    [![][sc]][s4]      |\n| Build                 |  [![][gb]][g5]   |  [![][rb]][r5]  |    [![][nb]][n5]     |   [![][kb]][k5]   |  [![][ab]][a5]  |    [![][sb]][s5]      |\n| Bugs                  |  [![][gbg]][g6]  | [![][rbg]][r6]  |    [![][nbg]][n6]    |   [![][kbg]][k6]  |  [![][abg]][a6] |    [![][sbg]][s6]     |\n| Dependents            |  [![][gdp]][g7]  | [![][rdp]][r7]  |    [![][ndp]][n7]    |   [![][kdp]][k7]  |  [![][adp]][a7] |    [![][sdp]][s7]     |\n| Install size          |  [![][gis]][g8]  | [![][ris]][r8]  |    [![][nis]][n8]    |   [![][kis]][k8]  |  [![][ais]][a8] |    [![][sis]][s8]     |\n\n\\* It\'s almost API compatible with the browser `fetch` API.<br>\n\\*\\* Need to switch the protocol manually.<br>\n\\*\\*\\* Currently, only \'DownloadProgress\' event is supported, \'UploadProgress\' event is not supported.<br>\n\xe2\x9d\x94 Experimental support.\n\n<!-- GITHUB -->\n[k0]: https://github.com/sindresorhus/ky\n[r0]: https://github.com/request/request\n[n0]: https://github.com/bitinn/node-fetch\n[a0]: https://github.com/axios/axios\n[s0]: https://github.com/visionmedia/superagent\n\n<!-- ISSUES OPEN -->\n[gio]: https://badgen.net/github/open-issues/sindresorhus/got?label\n[kio]: https://badgen.net/github/open-issues/sindresorhus/ky?label\n[rio]: https://badgen.net/github/open-issues/request/request?label\n[nio]: https://badgen.net/github/open-issues/bitinn/node-fetch?label\n[aio]: https://badgen.net/github/open-issues/axios/axios?label\n[sio]: https://badgen.net/github/open-issues/visionmedia/superagent?label\n\n[g1]: https://github.com/sindresorhus/got/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n[k1]: https://github.com/sindresorhus/ky/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n[r1]: https://github.com/request/request/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n[n1]: https://github.com/bitinn/node-fetch/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n[a1]: https://github.com/axios/axios/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n[s1]: https://github.com/visionmedia/superagent/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n\n<!-- ISSUES CLOSED -->\n[gic]: https://badgen.net/github/closed-issues/sindresorhus/got?label\n[kic]: https://badgen.net/github/closed-issues/sindresorhus/ky?label\n[ric]: https://badgen.net/github/closed-issues/request/request?label\n[nic]: https://badgen.net/github/closed-issues/bitinn/node-fetch?label\n[aic]: https://badgen.net/github/closed-issues/axios/axios?label\n[sic]: https://badgen.net/github/closed-issues/visionmedia/superagent?label\n\n[g2]: https://github.com/sindresorhus/got/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n[k2]: https://github.com/sindresorhus/ky/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n[r2]: https://github.com/request/request/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n[n2]: https://github.com/bitinn/node-fetch/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n[a2]: https://github.com/axios/axios/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n[s2]: https://github.com/visionmedia/superagent/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n\n<!-- DOWNLOADS -->\n[gd]: https://badgen.net/npm/dm/got?label\n[kd]: https://badgen.net/npm/dm/ky?label\n[rd]: https://badgen.net/npm/dm/request?label\n[nd]: https://badgen.net/npm/dm/node-fetch?label\n[ad]: https://badgen.net/npm/dm/axios?label\n[sd]: https://badgen.net/npm/dm/superagent?label\n\n[g3]: https://www.npmjs.com/package/got\n[k3]: https://www.npmjs.com/package/ky\n[r3]: https://www.npmjs.com/package/request\n[n3]: https://www.npmjs.com/package/node-fetch\n[a3]: https://www.npmjs.com/package/axios\n[s3]: https://www.npmjs.com/package/superagent\n\n<!-- COVERAGE -->\n[gc]: https://badgen.net/coveralls/c/github/sindresorhus/got?label\n[kc]: https://badgen.net/codecov/c/github/sindresorhus/ky?label\n[rc]: https://badgen.net/coveralls/c/github/request/request?label\n[nc]: https://badgen.net/coveralls/c/github/bitinn/node-fetch?label\n[ac]: https://badgen.net/coveralls/c/github/mzabriskie/axios?label\n[sc]: https://badgen.net/codecov/c/github/visionmedia/superagent?label\n\n[g4]: https://coveralls.io/github/sindresorhus/got\n[k4]: https://codecov.io/gh/sindresorhus/ky\n[r4]: https://coveralls.io/github/request/request\n[n4]: https://coveralls.io/github/bitinn/node-fetch\n[a4]: https://coveralls.io/github/mzabriskie/axios\n[s4]: https://codecov.io/gh/visionmedia/superagent\n\n<!-- BUILD -->\n[gb]: https://badgen.net/travis/sindresorhus/got?label\n[kb]: https://badgen.net/travis/sindresorhus/ky?label\n[rb]: https://badgen.net/travis/request/request?label\n[nb]: https://badgen.net/travis/bitinn/node-fetch?label\n[ab]: https://badgen.net/travis/axios/axios?label\n[sb]: https://badgen.net/travis/visionmedia/superagent?label\n\n[g5]: https://travis-ci.org/sindresorhus/got\n[k5]: https://travis-ci.org/sindresorhus/ky\n[r5]: https://travis-ci.org/request/request\n[n5]: https://travis-ci.org/bitinn/node-fetch\n[a5]: https://travis-ci.org/axios/axios\n[s5]: https://travis-ci.org/visionmedia/superagent\n\n<!-- BUGS -->\n[gbg]: https://badgen.net/github/label-issues/sindresorhus/got/bug/open?label\n[kbg]: https://badgen.net/github/label-issues/sindresorhus/ky/bug/open?label\n[rbg]: https://badgen.net/github/label-issues/request/request/Needs%20investigation/open?label\n[nbg]: https://badgen.net/github/label-issues/bitinn/node-fetch/bug/open?label\n[abg]: https://badgen.net/github/label-issues/axios/axios/type:bug/open?label\n[sbg]: https://badgen.net/github/label-issues/visionmedia/superagent/Bug/open?label\n\n[g6]: https://github.com/sindresorhus/got/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3Abug\n[k6]: https://github.com/sindresorhus/ky/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3Abug\n[r6]: https://github.com/request/request/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3A"Needs+investigation"\n[n6]: https://github.com/bitinn/node-fetch/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3Abug\n[a6]: https://github.com/axios/axios/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3Atype:bug\n[s6]: https://github.com/visionmedia/superagent/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3ABug\n\n<!-- DEPENDENTS -->\n[gdp]: https://badgen.net/npm/dependents/got?label\n[kdp]: https://badgen.net/npm/dependents/ky?label\n[rdp]: https://badgen.net/npm/dependents/request?label\n[ndp]: https://badgen.net/npm/dependents/node-fetch?label\n[adp]: https://badgen.net/npm/dependents/axios?label\n[sdp]: https://badgen.net/npm/dependents/superagent?label\n\n[g7]: https://www.npmjs.com/package/got?activeTab=dependents\n[k7]: https://www.npmjs.com/package/ky?activeTab=dependents\n[r7]: https://www.npmjs.com/package/request?activeTab=dependents\n[n7]: https://www.npmjs.com/package/node-fetch?activeTab=dependents\n[a7]: https://www.npmjs.com/package/axios?activeTab=dependents\n[s7]: https://www.npmjs.com/package/visionmedia?activeTab=dependents\n\n<!-- INSTALL SIZE -->\n[gis]: https://badgen.net/packagephobia/install/got?label\n[kis]: https://badgen.net/packagephobia/install/ky?label\n[ris]: https://badgen.net/packagephobia/install/request?label\n[nis]: https://badgen.net/packagephobia/install/node-fetch?label\n[ais]: https://badgen.net/packagephobia/install/axios?label\n[sis]: https://badgen.net/packagephobia/install/superagent?label\n\n[g8]: https://packagephobia.now.sh/result?p=got\n[k8]: https://packagephobia.now.sh/result?p=ky\n[r8]: https://packagephobia.now.sh/result?p=request\n[n8]: https://packagephobia.now.sh/result?p=node-fetch\n[a8]: https://packagephobia.now.sh/result?p=axios\n[s8]: https://packagephobia.now.sh/result?p=superagent\n\n#### Install size of the dependencies\n\n|                   Dependency                   |          Install size         |\n|------------------------------------------------|-------------------------------|\n| [@sindresorhus/is][url-is]                     | ![][size-is]                  |\n| [@szmarczak/http-timer][url-http-timer]        | ![][size-http-timer]          |\n| [cacheable-request][url-cacheable-request]     | ![][size-cacheable-request]   |\n| [decompress-response][url-decompress-response] | ![][size-decompress-response] |\n| [duplexer3][url-duplexer3]                     | ![][size-duplexer3]           |\n| [get-stream][url-get-stream]                   | ![][size-get-stream]          |\n| [lowercase-keys][url-lowercase-keys]           | ![][size-lowercase-keys]      |\n| [mimic-response][url-mimic-response]           | ![][size-mimic-response]      |\n| [p-cancelable][url-p-cancelable]               | ![][size-p-cancelable]        |\n| [to-readable-stream][url-to-readable-stream]   | ![][size-to-readable-stream]  |\n|                                                | ![][gis]                      |\n\n[size-is]: https://badgen.net/packagephobia/install/@sindresorhus/is?label\n[size-http-timer]: https://badgen.net/packagephobia/install/@szmarczak/http-timer?label\n[size-cacheable-request]: https://badgen.net/packagephobia/install/cacheable-request?label\n[size-decompress-response]: https://badgen.net/packagephobia/install/decompress-response?label\n[size-duplexer3]: https://badgen.net/packagephobia/install/duplexer3?label\n[size-get-stream]: https://badgen.net/packagephobia/install/get-stream?label\n[size-lowercase-keys]: https://badgen.net/packagephobia/install/lowercase-keys?label\n[size-mimic-response]: https://badgen.net/packagephobia/install/mimic-response?label\n[size-p-cancelable]: https://badgen.net/packagephobia/install/p-cancelable?label\n[size-to-readable-stream]: https://badgen.net/packagephobia/install/to-readable-stream?label\n\n[url-is]: https://github.com/sindresorhus/is\n[url-http-timer]: https://github.com/szmarczak/http-timer\n[url-cacheable-request]: https://github.com/lukechilds/cacheable-request\n[url-decompress-response]: https://github.com/sindresorhus/decompress-response\n[url-duplexer3]: https://github.com/floatdrop/duplexer3\n[url-get-stream]: https://github.com/sindresorhus/get-stream\n[url-lowercase-keys]: https://github.com/sindresorhus/lowercase-keys\n[url-mimic-response]: https://github.com/sindresorhus/mimic-response\n[url-p-cancelable]: https://github.com/sindresorhus/p-cancelable\n[url-to-readable-stream]: https://github.com/sindresorhus/to-readable-stream\n\n## Related\n\n- [gh-got](https://github.com/sindresorhus/gh-got) - Got convenience wrapper to interact with the GitHub API\n- [gl-got](https://github.com/singapore/gl-got) - Got convenience wrapper to interact with the GitLab API\n- [travis-got](https://github.com/samverschueren/travis-got) - Got convenience wrapper to interact with the Travis API\n- [graphql-got](https://github.com/kevva/graphql-got) - Got convenience wrapper to interact with GraphQL\n- [GotQL](https://github.com/khaosdoctor/gotql) - Got convenience wrapper to interact with GraphQL using JSON-parsed queries instead of strings\n- [got-fetch](https://github.com/alexghr/got-fetch) - Got with a `fetch` interface\n\n\n## Maintainers\n\n[![Sindre Sorhus](https://github.com/sindresorhus.png?size=100)](https://sindresorhus.com) | [![Szymon Marczak](https://github.com/szmarczak.png?size=100)](https://github.com/szmarczak) | [![Alexander Tesfamichael](https://github.com/AlexTes.png?size=100)](https://github.com/AlexTes) | [![Brandon Smith](https://github.com/brandon93s.png?size=100)](https://github.com/brandon93s) | [![Luke Childs](https://github.com/lukechilds.png?size=100)](https://github.com/lukechilds)\n---|---|---|---|---\n[Sindre Sorhus](https://sindresorhus.com) | [Szymon Marczak](https://github.com/szmarczak) | [Alexander Tesfamichael](https://alextes.me) | [Brandon Smith](https://github.com/brandon93s) | [Luke Childs](https://github.com/lukechilds)\n\n###### Former\n\n- [Vsevolod Strukchinsky](https://github.com/floatdrop)\n\n\n---\n\n<div align="center">\n\t<b>\n\t\t<a href="https://tidelift.com/subscription/pkg/npm-got?utm_source=npm-got&utm_medium=referral&utm_campaign=readme">Get professional support for this package with a Tidelift subscription</a>\n\t</b>\n\t<br>\n\t<sub>\n\t\tTidelift helps make open source sustainable for maintainers while giving companies<br>assurances about security, maintenance, and licensing for their dependencies.\n\t</sub>\n</div>\n'