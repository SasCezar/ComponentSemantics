b'# ndb\n\n<!-- [START badges] -->\n[![Build Status](https://img.shields.io/travis/com/GoogleChromeLabs/ndb/master.svg)](https://travis-ci.com/GoogleChromeLabs/ndb)\n[![NPM ndb package](https://img.shields.io/npm/v/ndb.svg)](https://npmjs.org/package/ndb)\n<!-- [END badges] -->\n\n<img src="https://raw.githubusercontent.com/ChromeDevTools/devtools-logo/master/192.png" height="200" align="right">\n\n> ndb is an improved debugging experience for Node.js, enabled by Chrome DevTools\n\n## Installation\n\nCompatibility: ndb requires Node >=8.0.0. It works best with Node >=10.\n\nInstallation: ndb depends on [Puppeteer](https://github.com/GoogleChrome/puppeteer) which downloads a recent version of Chromium (~170MB Mac, ~280MB Linux, ~280MB Win).\n\n```bash\n# global install with npm:\nnpm install -g ndb\n\n\n# alternatively, with yarn:\nyarn global add ndb\n```\n\nGlobal installation may fail with different permission errors, you can find help in this [thread](https://github.com/GoogleChromeLabs/ndb/issues/20).\n\nWindows users: Installation may fail on Windows during compilation the native dependencies. The following command may help: `npm install -g windows-build-tools`\n\n### Local install\n\nIf you want ndb available from an npm script (eg. `npm run debug` runs `ndb index.js`), you can install it as a development dependency:\n\n```bash\n# local install with npm:\nnpm install --save-dev ndb\n\n\n# alternatively, with yarn:\nyarn add ndb --dev\n```\n\nYou can then [set up an npm script](https://docs.npmjs.com/misc/scripts#examples). In this case, ndb will not be available in your system path.\n\n\n## Getting Started\n\nYou can start debugging your Node.js application using one of the following ways:\n\n- Use `ndb` instead of the `node` command\n\n```bash\nndb server.js\n\n# Alternatively, you can prepend `ndb`\nndb node server.js\n```\n\n- Prepend `ndb` in front of any other binary\n\n```bash\n# If you use some other binary, just prepend `ndb`\n## npm run unit\nndb npm run unit\n\n# Debug any globally installed package\n## mocha\nndb mocha\n\n# To use a local binary, use `npx` and prepend before it\nndb npx mocha\n```\n\n- Launch `ndb` as a standalone application \n   - Then, debug any npm script from your `package.json`, e.g. unit tests\n\n```bash\n# cd to your project folder (with a package.json)\nndb .\n# In Sources panel > "NPM Scripts" sidebar, click the selected "Run" button \n```\n\n- Use `Ctrl`/`Cmd` + `R` to restart last run\n- Run any node command from within ndb\'s integrated terminal and ndb will connect automatically\n- Run any open script source by using \'Run this script\' context menu item, ndb will connect automatically as well\n\n- Use `--prof` flag to profile your app, `Ctrl`/`Cmd` + `R` restarts profiling\n```bash\nndb --prof npm run unit\n```\n\n## What can I do?\n\n`ndb` has some powerful features exclusively for Node.js:\n1. Child processes are detected and attached to.\n1. You can place breakpoints before the modules are required.\n1. You can edit your files within the UI. On Ctrl-S/Cmd-S, DevTools will [save the changes to disk](https://developers.google.com/web/tools/chrome-devtools/workspaces/).\n1. By default, ndb [blackboxes](https://developers.google.com/web/tools/chrome-devtools/javascript/reference#blackbox) all scripts outside current working directory to improve focus. This includes node internal libraries (like `_stream_wrap.js`, `async_hooks.js`, `fs.js`) This behaviour may be changed by "Blackbox anything outside working dir" setting. \n\nIn addition, you can use all the DevTools functionality that you\'ve used in [typical Node debugging](https://medium.com/@paul_irish/debugging-node-js-nightlies-with-chrome-devtools-7c4a1b95ae27):\n- breakpoint debugging, async stacks (AKA long stack traces), [async stepping](https://developers.google.com/web/updates/2018/01/devtools#async), etc...\n- console (top-level await, object inspection, advanced filtering)\n- [eager evaluation](https://developers.google.com/web/updates/2018/05/devtools#eagerevaluation) in console (requires Node >= 10)\n- JS sampling profiler\n- memory profiler\n\n### Screenshot\n![image](https://user-images.githubusercontent.com/39191/43023843-14a085a6-8c21-11e8-85b7-b9fd3405938a.png)\n\n\n## Contributing\n\nCheck out [contributing guide](https://github.com/GoogleChromeLabs/ndb/blob/master/CONTRIBUTING.md) to get an overview of ndb development.\n\n#### Thanks to the \'OG\' `ndb`\n\nIn early 2011, [@smtlaissezfaire](https://github.com/smtlaissezfaire) released the first serious debugger for Node.js, under the `ndb` package name. It\'s still preserved at [github.com/smtlaissezfaire/ndb](https://github.com/smtlaissezfaire/ndb#readme). We thank Scott for generously donating the package name.\n'