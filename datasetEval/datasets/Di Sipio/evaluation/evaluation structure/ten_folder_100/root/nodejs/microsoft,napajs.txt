b'[![Build Status for Linux/MacOS](https://travis-ci.org/Microsoft/napajs.svg?branch=master)](https://travis-ci.org/Microsoft/napajs)\n[![Build Status for Windows](https://ci.appveyor.com/api/projects/status/github/Microsoft/napajs?branch=master&svg=true)](https://ci.appveyor.com/project/napajs/napajs)\n[![npm version](https://badge.fury.io/js/napajs.svg)](https://www.npmjs.com/package/napajs)\n[![Downloads](https://img.shields.io/npm/dm/napajs.svg)](https://www.npmjs.com/package/napajs)\n\n# Napa.js\nNapa.js is a multi-threaded JavaScript runtime built on [V8](https://github.com/v8/v8), which was originally designed to develop highly iterative services with non-compromised performance in Bing. As it evolves, we find it useful to complement [Node.js](https://nodejs.org) in CPU-bound tasks, with the capability of executing JavaScript in multiple V8 isolates and communicating between them. Napa.js is exposed as a Node.js module, while it can also be embedded in a host process without Node.js dependency.\n\n## Installation\nInstall the latest stable version:\n```\nnpm install napajs\n```\nOther options can be found in [Build Napa.js](https://github.com/Microsoft/napajs/wiki/build-napa.js).\n\n## Quick Start\n```js\nconst napa = require(\'napajs\');\nconst zone1 = napa.zone.create(\'zone1\', { workers: 4 });\n\n// Broadcast code to all 4 workers in \'zone1\'.\nzone1.broadcast(\'console.log("hello world");\');\n\n// Execute an anonymous function in any worker thread in \'zone1\'.\nzone1.execute(\n    (text) => text, \n    [\'hello napa\'])\n    .then((result) => {\n        console.log(result.value);\n    });\n```\nMore examples:\n* [Estimate PI in parallel](./examples/tutorial/estimate-pi-in-parallel)\n* [Max sub-matrix of 1s with layered parallelism](./examples/tutorial/max-square-sub-matrix)\n* [Parallel Quick Sort](./examples/tutorial/parallel-quick-sort)\n* [Recursive Fibonacci with multiple JavaScript threads](./examples/tutorial/recursive-fibonacci)\n* [Synchronized loading](./examples/tutorial/synchronized-loading)\n\n## Features\n- Multi-threaded JavaScript runtime.\n- Node.js compatible module architecture with NPM support.\n- API for object transportation, object sharing and synchronization across JavaScript threads.\n- API for pluggable logging, metric and memory allocator.\n- Distributed as a Node.js module, as well as supporting embed scenarios.\n\n## Documentation\n- [Napa.js Home](https://github.com/Microsoft/napajs/wiki)\n- [API Reference](./docs/api/index.md)\n- [FAQ](https://github.com/Microsoft/napajs/wiki/FAQ)\n\n# Contribute\nYou can contribute to Napa.js in following ways:\n\n* [Report issues](https://github.com/Microsoft/napajs/issues) and help us verify fixes as they are checked in.\n* Review the [source code changes](https://github.com/Microsoft/napajs/pulls).\n* Contribute to core module compatibility with Node.\n* Contribute bug fixes.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).<br> For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact opencode@microsoft.com with any additional questions or comments.\n\n# License\nCopyright (c) Microsoft Corporation. All rights reserved.\n\nLicensed under the [MIT](https://github.com/Microsoft/napajs/blob/master/LICENSE.txt) License.\n'