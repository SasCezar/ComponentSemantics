b'\xef\xbb\xbf<h1 align="center">\n<br>\n  <a href="https://github.com/leonardomso/33"><img src="https://i.imgur.com/dsHmk6H.jpg" alt="33 Concepts Every JS Developer Should Know" width=200"></a>\n  <br>\n    <br>\n  33 Concepts Every JavaScript Developer Should Know\n  <br><br>\n</h1>\n\n[![Follow me](https://img.shields.io/twitter/follow/leonardomso.svg?style=for-the-badge)](https://twitter.com/leonardomso)\n\n## Introduction\n\nThis repository was created with the intention of helping developers master their concepts in JavaScript. It is not a requirement, but a guide for future studies. It is based on an article written by [Stephen Curtis](https://twitter.com/stephenthecurt) and you can read it [here](https://medium.com/@stephenthecurt/33-fundamentals-every-javascript-developer-should-know-13dd720a90d1).\n\n**\xf0\x9f\x9a\x80 Considered by GitHub as one of the [top open source projects of 2018!](https://blog.github.com/2018-12-13-new-open-source-projects/)**\n\n## Community\n\nFeel free to submit a PR adding a link to your own recaps or reviews. If you want to translate the repo into your native language, please feel free to do so.\n\nAll the translations for this repo will be listed below:\n\n- [Chinese](https://github.com/stephentian/33-js-concepts) \xe2\x80\x94 Re Tian\n- [Portuguese-BR](https://github.com/tiagoboeing/33-js-concepts) \xe2\x80\x94 Tiago Boeing\n- [Korean](https://github.com/yjs03057/33-js-concepts.git) \xe2\x80\x94 Suin Lee\n- [Spanish](https://github.com/adonismendozaperez/33-js-conceptos) \xe2\x80\x94 Adonis Mendoza\n- [Turkish](https://github.com/ilker0/33-js-concepts) \xe2\x80\x94 \xc4\xb0lker Demir\n- [Russian](https://github.com/gumennii/33-js-concepts) \xe2\x80\x94 Mihail Gumennii\n- [Ti\xe1\xba\xbfng Vi\xe1\xbb\x87t](https://github.com/nguyentranchung/33-js-concepts) \xe2\x80\x94 Nguy\xe1\xbb\x85n Tr\xe1\xba\xa7n Chung\n- [Polish](https://github.com/lip3k/33-js-concepts) \xe2\x80\x94 Dawid Lipinski\n- [Persian](https://github.com/majidalavizadeh/33-js-concepts) \xe2\x80\x94 Majid Alavizadeh\n- [Indonesian](https://github.com/rijdz/33-js-concepts) \xe2\x80\x94 Rijdzuan Sampoerna\n- [French](https://github.com/robinmetral/33-concepts-js) \xe2\x80\x94 Robin M\xc3\xa9tral\n- [Hindi](https://github.com/vikaschauhan/33-js-concepts) \xe2\x80\x94 Vikas Chauhan\n- [Greek](https://github.com/DimitrisZx/33-js-concepts) \xe2\x80\x94 Dimitris Zarachanis\n- [Japanese](https://github.com/oimo23/33-js-concepts) \xe2\x80\x94 oimo23\n- [German](https://github.com/burhannn/33-js-concepts) \xe2\x80\x94 burhannn\n- [Ukrainian](https://github.com/AndrewSavetchuk/33-js-concepts-ukrainian-translation) \xe2\x80\x94 Andrew Savetchuk\n- [Sinhala](https://github.com/ududsha/33-js-concepts) \xe2\x80\x94 Udaya Shamendra\n- [Italian](https://github.com/Donearm/33-js-concepts) - Gianluca Fiore\n\n---\n\n## Table of Contents\n\n1. **[Call Stack](#1-call-stack)**\n2. **[Primitive Types](#2-primitive-types)**\n3. **[Value Types and Reference Types](#3-value-types-and-reference-types)**\n4. **[Implicit, Explicit, Nominal, Structuring and Duck Typing](#4-implicit-explicit-nominal-structuring-and-duck-typing)**\n5. **[== vs === vs typeof](#5--vs--vs-typeof)**\n6. **[Function Scope, Block Scope and Lexical Scope](#6-function-scope-block-scope-and-lexical-scope)**\n7. **[Expression vs Statement](#7-expression-vs-statement)**\n8. **[IIFE, Modules and Namespaces](#8-iife-modules-and-namespaces)**\n9. **[Message Queue and Event Loop](#9-message-queue-and-event-loop)**\n10. **[setTimeout, setInterval and requestAnimationFrame](#10-settimeout-setinterval-and-requestanimationframe)**\n11. **[JavaScript Engines](#11-javascript-engines)**\n12. **[Bitwise Operators, Type Arrays and Array Buffers](#12-bitwise-operators-type-arrays-and-array-buffers)**\n13. **[DOM and Layout Trees](#13-dom-and-layout-trees)**\n14. **[Factories and Classes](#14-factories-and-classes)**\n15. **[this, call, apply and bind](#15-this-call-apply-and-bind)**\n16. **[new, Constructor, instanceof and Instances](#16-new-constructor-instanceof-and-instances)**\n17. **[Prototype Inheritance and Prototype Chain](#17-prototype-inheritance-and-prototype-chain)**\n18. **[Object.create and Object.assign](#18-objectcreate-and-objectassign)**\n19. **[map, reduce, filter](#19-map-reduce-filter)**\n20. **[Pure Functions, Side Effects and State Mutation](#20-pure-functions-side-effects-and-state-mutation)**\n21. **[Closures](#21-closures)**\n22. **[High Order Functions](#22-high-order-functions)**\n23. **[Recursion](#23-recursion)**\n24. **[Collections and Generators](#24-collections-and-generators)**\n25. **[Promises](#25-promises)**\n26. **[async/await](#26-asyncawait)**\n27. **[Data Structures](#27-data-structures)**\n28. **[Expensive Operation and Big O Notation](#28-expensive-operation-and-big-o-notation)**\n29. **[Algorithms](#29-algorithms)**\n30. **[Inheritance, Polymorphism and Code Reuse](#30-inheritance-polymorphism-and-code-reuse)**\n31. **[Design Patterns](#31-design-patterns)**\n32. **[Partial Applications, Currying, Compose and Pipe](#32-partial-applications-currying-compose-and-pipe)**\n33. **[Clean Code](#33-clean-code)**\n\n\n---\n\n## 1. Call Stack\n\n### Articles\n\n * \xf0\x9f\x93\x9c [Understanding Javascript Call Stack, Event Loops \xe2\x80\x94 Gaurav Pandvia](https://medium.com/@gaurav.pandvia/understanding-javascript-function-executions-tasks-event-loop-call-stack-more-part-1-5683dea1f5ec)\n * \xf0\x9f\x93\x9c [Understanding the JavaScript Call Stack \xe2\x80\x94 Charles Freeborn](https://medium.freecodecamp.org/understanding-the-javascript-call-stack-861e41ae61d4)\n * \xf0\x9f\x93\x9c [Javascript: What Is The Execution Context? What Is The Call Stack? \xe2\x80\x94 Valentino Gagliardi](https://www.valentinog.com/blog/js-execution-context-call-stack/)\n * \xf0\x9f\x93\x9c [What is the JS Event Loop and Call Stack? \xe2\x80\x94 Jess Telford](https://gist.github.com/jesstelford/9a35d20a2aa044df8bf241e00d7bc2d0)\n * \xf0\x9f\x93\x9c [Call Stack \xe2\x80\x94 MDN](https://developer.mozilla.org/en-US/docs/Glossary/Call_stack)\n * \xf0\x9f\x93\x9c [Understanding Execution Context and Execution Stack in Javascript \xe2\x80\x94 Sukhjinder Arora](https://blog.bitsrc.io/understanding-execution-context-and-execution-stack-in-javascript-1c9ea8642dd0)\n * \xf0\x9f\x93\x9c [How JavaScript Works: An Overview of the Engine, the Runtime, and the Call Stack \xe2\x80\x94 Alexander Zlatkov](https://blog.sessionstack.com/how-does-javascript-actually-work-part-1-b0bacc073cf)\n * \xf0\x9f\x93\x9c [The Ultimate Guide to Execution Contexts, Hoisting, Scopes, and Closures in JavaScript \xe2\x80\x94 Tyler McGinnis](https://tylermcginnis.com/ultimate-guide-to-execution-contexts-hoisting-scopes-and-closures-in-javascript/)\n\n### Videos\n\n * \xf0\x9f\x8e\xa5 [Javascript: the Call Stack explained \xe2\x80\x94 Coding Blocks India](https://www.youtube.com/watch?v=w6QGEiQceOM)\n * \xf0\x9f\x8e\xa5 [The JS Call Stack Explained In 9 Minutes \xe2\x80\x94 Colt Steele](https://www.youtube.com/watch?v=W8AeMrVtFLY)\n * \xf0\x9f\x8e\xa5 [JavaScript Execution Stack \xe2\x80\x94 Codecademy](https://www.youtube.com/watch?v=jT0USJeNFEA)\n * \xf0\x9f\x8e\xa5 [What is the Call Stack? \xe2\x80\x94 Eric Traub](https://www.youtube.com/watch?v=w7QWQlkLY_s)\n * \xf0\x9f\x8e\xa5 [The Call Stack \xe2\x80\x94 Kevin Drumm](https://www.youtube.com/watch?v=Q2sFmqvpBe0)\n * \xf0\x9f\x8e\xa5 [Understanding JavaScript Execution \xe2\x80\x94 Codesmith](https://www.youtube.com/watch?v=Z6a1cLyq7Ac&list=PLWrQZnG8l0E4kd1T_nyuVoxQUaYEWFgcD)\n * \xf0\x9f\x8e\xa5 [Call Stack & Event Loop \xe2\x80\x94 movies com](https://www.youtube.com/watch?v=mk0lu9MKBto)\n * \xf0\x9f\x8e\xa5 [The Ultimate Guide to Execution Contexts, Hoisting, Scopes, and Closures in JavaScript \xe2\x80\x94 Tyler McGinnis](https://www.youtube.com/watch?v=Nt-qa_LlUH0)\n  * \xf0\x9f\x8e\xa5 [What the heck is the event loop anyway? \xe2\x80\x94 Philip Roberts](https://www.youtube.com/watch?v=8aGhZQkoFbQ)\n  * \xf0\x9f\x8e\xa5 [La PILA DE EJECUCI\xc3\x93N (Call Stack) de JavaScript \xe2\x80\x94 La Cocina del C\xc3\xb3digo](https://www.youtube.com/watch?v=ygA5U7Wgsg8)\n\n**[\xe2\xac\x86 Back to Top](#table-of-contents)**\n\n---\n\n## 2. Primitive Types\n\n### Articles\n\n * \xf0\x9f\x93\x9c [How numbers are encoded in JavaScript \xe2\x80\x94 Dr. Axel Rauschmayer](http://2ality.com/2012/04/number-encoding.html)\n * \xf0\x9f\x93\x9c [What You Need to Know About JavaScript Number Type \xe2\x80\x94 Max Wizard K](https://medium.com/dailyjs/javascripts-number-type-8d59199db1b6)\n * \xf0\x9f\x93\x9c [What Every JavaScript Developer Should Know About Floating Point Numbers \xe2\x80\x94 Chewxy](https://blog.chewxy.com/2014/02/24/what-every-javascript-developer-should-know-about-floating-point-numbers/)\n * \xf0\x9f\x93\x9c [The Secret Life of JavaScript Primitives \xe2\x80\x94 Angus Croll](https://javascriptweblog.wordpress.com/2010/09/27/the-secret-life-of-javascript-primitives/)\n * \xf0\x9f\x93\x9c [Primitive Types \xe2\x80\x94 Flow](https://flow.org/en/docs/types/primitives/)\n * \xf0\x9f\x93\x9c [(Not) Everything in JavaScript is an Object \xe2\x80\x94 Daniel Li](http://blog.brew.com.hk/not-everything-in-javascript-is-an-object/)\n * \xf0\x9f\x93\x9c [JavaScript data types and data structures \xe2\x80\x94 MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Primitive_values)\n * \xf0\x9f\x93\x9c [Diving Deeper in JavaScripts Objects \xe2\x80\x94 Arfat Salman](https://blog.bitsrc.io/diving-deeper-in-javascripts-objects-318b1e13dc12)\n * \xf0\x9f\x93\x9c [The differences between Object.freeze() vs Const in JavaScript \xe2\x80\x94 Bolaji Ayodeji](https://medium.com/@bolajiayodeji/the-differences-between-object-freeze-vs-const-in-javascript-4eacea534d7c)\n\n### Videos\n\n * \xf0\x9f\x8e\xa5 [JavaScript Reference vs Primitive Types \xe2\x80\x94 Academind](https://www.youtube.com/watch?v=9ooYYRLdg_g)\n * \xf0\x9f\x8e\xa5 [JavaScript Primitive Types \xe2\x80\x94 Simon Sez IT](https://www.youtube.com/watch?v=HsbWQsSCE5Y)\n * \xf0\x9f\x8e\xa5 [Value Types and Reference Types in JavaScript \xe2\x80\x94 Programming with Mosh](https://www.youtube.com/watch?v=e-_mDyqm2oU)\n * \xf0\x9f\x8e\xa5 [JavaScript Primitive Data Types \xe2\x80\x94 Avelx](https://www.youtube.com/watch?v=qw3j0A3DIzQ)\n * \xf0\x9f\x8e\xa5 [Everything you never wanted to know about JavaScript numbers \xe2\x80\x94 Bartek Szopka](https://www.youtube.com/watch?v=MqHDDtVYJRI)\n * \xf0\x9f\x8e\xa5 [What are variables in Javascript? \xe2\x80\x94 JS For Everyone](https://www.youtube.com/watch?v=B4Bbmei_thw)\n * \xf0\x9f\x8e\xa5 [TIPOS DE DATOS PRIMITIVOS en JAVASCRIPT - La Cocina del C\xc3\xb3digo](https://www.youtube.com/watch?v=cC65D2q5f8I)\n\n**[\xe2\xac\x86 Back to Top](#table-of-contents)**\n\n---\n\n## 3. Value Types and Reference Types\n\n### Articles\n\n * \xf0\x9f\x93\x9c [Explaining Value vs. Reference in Javascript \xe2\x80\x94 Arnav Aggarwal](https://codeburst.io/explaining-value-vs-reference-in-javascript-647a975e12a0)\n * \xf0\x9f\x93\x9c [Understand Value and Reference Types in JavaScript \xe2\x80\x94 Zsolt Nagy](https://www.zsoltnagy.eu/understand-value-and-reference-types-in-javascript/)\n * \xf0\x9f\x93\x9c [Primitive Types & Reference Types in JavaScript \xe2\x80\x94 Bran van der Meer](https://gist.github.com/branneman/7fb06d8a74d7e6d4cbcf75c50fec599c)\n * \xf0\x9f\x93\x9c [Value Types, Reference Types and Scope in JavaScript \xe2\x80\x94 Ben Aston](https://medium.com/@benastontweet/lesson-1b-javascript-fundamentals-380f601ba851)\n * \xf0\x9f\x93\x9c [Back to roots: JavaScript Value vs Reference \xe2\x80\x94 Miro Koczka](https://medium.com/dailyjs/back-to-roots-javascript-value-vs-reference-8fb69d587a18)\n * \xf0\x9f\x93\x9c [Grasp \xe2\x80\x9cBy Value\xe2\x80\x9d and \xe2\x80\x9cBy Reference\xe2\x80\x9d in JavaScript \xe2\x80\x94 L\xc3\xa9na Faure](https://hackernoon.com/grasp-by-value-and-by-reference-in-javascript-7ed75efa1293)\n * \xf0\x9f\x93\x9c [JavaScript Reference and Copy Variables \xe2\x80\x94 V\xc3\xadtor Capretz](https://hackernoon.com/javascript-reference-and-copy-variables-b0103074fdf0)\n * \xf0\x9f\x93\x9c [JavaScript Primitive vs Reference Values](http://www.javascripttutorial.net/javascript-primitive-vs-reference-values/)\n * \xf0\x9f\x93\x9c [JavaScript by Reference vs. by Value \xe2\x80\x94 nrabinowitz](https://stackoverflow.com/questions/6605640/javascript-by-reference-vs-by-value)\n * \xf0\x9f\x93\x9c [JavaScript Interview Prep: Primitive vs. Reference Types \xe2\x80\x94 Mike Cronin](https://dev.to/mostlyfocusedmike/javascript-interview-prep-primitive-vs-reference-types-3o4f)\n\n### Videos\n\n * \xf0\x9f\x8e\xa5 [Javascript Pass by Value vs Pass by Reference \xe2\x80\x94 techsith](https://www.youtube.com/watch?v=E-dAnFdq8k8)\n * \xf0\x9f\x8e\xa5 [JavaScript Value vs Reference Types \xe2\x80\x94 Programming with Mosh](https://www.youtube.com/watch?v=fD0t_DKREbE)\n\n**[\xe2\xac\x86 Back to Top](#table-of-contents)**\n\n---\n\n## 4. Implicit, Explicit, Nominal, Structuring and Duck Typing\n\n### Articles\n\n * \xf0\x9f\x93\x9c [What you need to know about Javascript\'s Implicit Coercion \xe2\x80\x94 Promise Tochi](https://dev.to/promhize/what-you-need-to-know-about-javascripts-implicit-coercion-e23)\n * \xf0\x9f\x93\x9c [JavaScript Type Coercion Explained \xe2\x80\x94 Alexey Samoshkin](https://medium.freecodecamp.org/js-type-coercion-explained-27ba3d9a2839)\n * \xf0\x9f\x93\x9c [Javascript Coercion Explained \xe2\x80\x94 Ben Garrison](https://hackernoon.com/javascript-coercion-explained-545c895213d3)\n * \xf0\x9f\x93\x9c [What exactly is Type Coercion in Javascript? - Stack Overflow](https://stackoverflow.com/questions/19915688/what-exactly-is-type-coercion-in-javascript)\n * \xf0\x9f\x93\x9c [You Don\'t Know JS: Types & Grammar [Book] \xe2\x80\x94 Kyle Simpson](https://www.oreilly.com/library/view/you-dont-know/9781491905159/ch04.html)\n * \xf0\x9f\x93\x9c [Type Coercion in JavaScript, and why everyone gets it wrong.](https://thedevs.network/blog/type-coercion-in-javascript-and-why-everyone-gets-it-wrong)\n\n ### Videos\n\n * \xf0\x9f\x8e\xa5 [== ? === ??? ...#@^% - Shirmung Bielefeld](https://www.youtube.com/watch?v=qGyqzN0bjhc&t)\n * \xf0\x9f\x8e\xa5 [Coercion in Javascript - Hitesh Choudhary](https://www.youtube.com/watch?v=b04Q_vyqEG8)\n * \xf0\x9f\x8e\xa5 [JavaScript Questions: What is Coercion? - Steven Hancock](https://www.youtube.com/watch?v=z4-8wMSPJyI)\n * \xf0\x9f\x8e\xa5 [Typing: Static vs Dynamic, Weak vs. Strong - Codexpanse](https://www.youtube.com/watch?v=C5fr0LZLMAs)\n\n**[\xe2\xac\x86 Back to Top](#table-of-contents)**\n\n---\n\n## 5. == vs === vs typeof\n\n### Articles\n\n * \xf0\x9f\x93\x9c [JavaScript Double Equals vs. Triple Equals \xe2\x80\x94 Brandon Morelli](https://codeburst.io/javascript-double-equals-vs-triple-equals-61d4ce5a121a)\n * \xf0\x9f\x93\x9c [Should I use === or == equality comparison operator in JavaScript? \xe2\x80\x94 Panu Pitkamaki](https://bytearcher.com/articles/equality-comparison-operator-javascript/)\n * \xf0\x9f\x93\x9c [== vs === JavaScript: Double Equals and Coercion \xe2\x80\x94 AJ Meyghani](https://www.codementor.io/javascript/tutorial/double-equals-and-coercion-in-javascript)\n * \xf0\x9f\x93\x9c [Why Use the Triple-Equals Operator in JavaScript? \xe2\x80\x94 Louis Lazaris](https://www.impressivewebs.com/why-use-triple-equals-javascipt/)\n * \xf0\x9f\x93\x9c [What is the difference between == and === in JavaScript? \xe2\x80\x94 Craig Buckler](https://www.oreilly.com/learning/what-is-the-difference-between-and-in-javascript)\n * \xf0\x9f\x93\x9c [Why javascript\'s typeof always return "object"? \xe2\x80\x94 Stack Overflow](https://stackoverflow.com/questions/3787901/why-javascripts-typeof-always-return-object)\n * \xf0\x9f\x93\x9c [Checking Types in Javascript \xe2\x80\x94 Toby Ho](http://tobyho.com/2011/01/28/checking-types-in-javascript/)\n * \xf0\x9f\x93\x9c [How to better check data types in JavaScript \xe2\x80\x94 Webbjocke](https://webbjocke.com/javascript-check-data-types/)\n * \xf0\x9f\x93\x9c [Checking for the Absence of a Value in JavaScript \xe2\x80\x94 Tomer Aberbach](https://tomeraberba.ch/html/post/checking-for-the-absence-of-a-value-in-javascript.html)\n\n### Videos\n\n * \xf0\x9f\x8e\xa5 [JavaScript - The typeof operator \xe2\x80\x94 Java Brains](https://www.youtube.com/watch?v=ol_su88I3kw)\n * \xf0\x9f\x8e\xa5 [Javascript typeof operator \xe2\x80\x94 DevDelight](https://www.youtube.com/watch?v=qPYhTPt_SbQ)\n\n**[\xe2\xac\x86 Back to Top](#table-of-contents)**\n\n---\n\n## 6. Function Scope, Block Scope and Lexical Scope\n\n### Articles\n\n * \xf0\x9f\x93\x9c [You Don\'t Know JS: Scope & Closures [Book] \xe2\x80\x94 Kyle Simpson](https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/scope%20%26%20closures/ch3.md)\n * \xf0\x9f\x93\x9c [JavaScript Functions\xe2\x80\x8a\xe2\x80\x94\xe2\x80\x8aUnderstanding The Basics \xe2\x80\x94 Brandon Morelli](https://codeburst.io/javascript-functions-understanding-the-basics-207dbf42ed99)\n * \xf0\x9f\x93\x9c [The battle between Function Scope and Block Scope \xe2\x80\x94 Marius Herring](http://www.deadcoderising.com/2017-04-11-es6-var-let-and-const-the-battle-between-function-scope-and-block-scope/)\n * \xf0\x9f\x93\x9c [Emulating Block Scope in JavaScript \xe2\x80\x94 Josh Clanton](http://adripofjavascript.com/blog/drips/emulating-block-scope-in-javascript.html)\n * \xf0\x9f\x93\x9c [The Difference Between Function and Block Scope in JavaScript \xe2\x80\x94 Joseph Cardillo](https://medium.com/@josephcardillo/the-difference-between-function-and-block-scope-in-javascript-4296b2322abe)\n * \xf0\x9f\x93\x9c [Function Scopes and Block Scopes in JavaScript \xe2\x80\x94 Samer Buna](https://edgecoders.com/function-scopes-and-block-scopes-in-javascript-25bbd7f293d7)\n * \xf0\x9f\x93\x9c [Understanding Scope and Context in JavaScript | Ryan Morr](http://ryanmorr.com/understanding-scope-and-context-in-javascript/)\n * \xf0\x9f\x93\x9c [JavaScript Scope and Closures \xe2\x80\x94 Zell Liew](https://css-tricks.com/javascript-scope-closures/)\n * \xf0\x9f\x93\x9c [Understanding Scope in JavaScript \xe2\x80\x94 Wissam Abirached](https://developer.telerik.com/topics/web-development/understanding-scope-in-javascript/)\n * \xf0\x9f\x93\x9c [Speaking JavaScript - Variables: Scopes, Environments, and Closures \xe2\x80\x94 Dr. Axel Rauschmayer](http://speakingjs.com/es5/ch16.html)\n * \xf0\x9f\x93\x9c [Understanding Scope in JavaScript \xe2\x80\x95 Hammad Ahmed](https://scotch.io/tutorials/understanding-scope-in-javascript)\n * \xf0\x9f\x93\x9c [When to use a function declaration vs. a function expression \xe2\x80\x95 Amber Wilkie](https://medium.freecodecamp.org/when-to-use-a-function-declarations-vs-a-function-expression-70f15152a0a0)\n * \xf0\x9f\x93\x9c [A JavaScript Fundamentals Cheat Sheet: Scope, Context, and \xe2\x80\x9cthis\xe2\x80\x9d \xe2\x80\x95 Alexandra Fren](https://dev.to/alexandrafren/a-javascript-fundamentals-cheat-sheet-scope-context-and-this-28ai)\n\n### Videos\n\n * \xf0\x9f\x8e\xa5 [What Makes Javascript Weird ... and Awesome pt. 4 \xe2\x80\x94 LearnCode.academy](https://www.youtube.com/watch?v=SBwoFkRjZvE)\n * \xf0\x9f\x8e\xa5 [Variable Scope in JavaScript \xe2\x80\x94 Kirupa Chinnathambi](https://www.youtube.com/watch?v=dhp57T3p760)\n * \xf0\x9f\x8e\xa5 [JavaScript Block Scope and Function Scope \xe2\x80\x94 mmtuts](https://www.youtube.com/watch?v=aK_nuUAdr8E)\n * \xf0\x9f\x8e\xa5 [What the Heck is Lexical Scope? \xe2\x80\x94 NWCalvank](https://www.youtube.com/watch?v=GhNA0r10MmA)\n\n**[\xe2\xac\x86 Back to Top](#table-of-contents)**\n\n---\n\n## 7. Expression vs Statement\n\n### Articles\n\n * \xf0\x9f\x93\x9c [All you need to know about Javascript\'s Expressions, Statements and Expression Statements \xe2\x80\x94 Promise Tochi](https://dev.to/promhize/javascript-in-depth-all-you-need-to-know-about-expressions-statements-and-expression-statements-5k2)\n * \xf0\x9f\x93\x9c [Function Expressions vs Function Declarations \xe2\x80\x94 Paul Wilkins](https://www.sitepoint.com/function-expressions-vs-declarations/)\n * \xf0\x9f\x93\x9c [JavaScript Function \xe2\x80\x94 Declaration vs Expression \xe2\x80\x94 Ravi Roshan](https://medium.com/@raviroshan.talk/javascript-function-declaration-vs-expression-f5873b8c7b38)\n * \xf0\x9f\x93\x9c [Function Declarations vs. Function Expressions \xe2\x80\x94 Mandeep Singh](https://medium.com/@mandeep1012/function-declarations-vs-function-expressions-b43646042052)\n * \xf0\x9f\x93\x9c [Function Declarations vs. Function Expressions \xe2\x80\x94 Anguls Croll](https://javascriptweblog.wordpress.com/2010/07/06/function-declarations-vs-function-expressions/)\n\n### Videos\n\n * \xf0\x9f\x8e\xa5 [Expressions vs. Statements in JavaScript \xe2\x80\x94 Hexlet](https://www.youtube.com/watch?v=WVyCrI1cHi8)\n * \xf0\x9f\x8e\xa5 [JavaScript - Expression vs. Statement \xe2\x80\x94 WebTunings](https://www.youtube.com/watch?v=3jDpNGJkupA)\n * \xf0\x9f\x8e\xa5 [Function Statements and Function Expressions \xe2\x80\x94 Codeacademy](https://www.youtube.com/watch?v=oB5rH_9bqAI)\n\n**[\xe2\xac\x86 Back to Top](#table-of-contents)**\n\n---\n\n## 8. IIFE, Modules and Namespaces\n\n### Articles\n\n * \xf0\x9f\x93\x9c [Mastering Immediately-Invoked Function Expressions \xe2\x80\x95 Chandra Gundamaraju](https://medium.com/@vvkchandra/essential-javascript-mastering-immediately-invoked-function-expressions-67791338ddc6)\n * \xf0\x9f\x93\x9c [Do ES6 Modules make the case of IIFEs obsolete?](https://hashnode.com/post/do-es6-modules-make-the-case-of-iifes-obsolete-civ96wet80scqgc538un20es0)\n * \xf0\x9f\x93\x9c [A 10 minute primer to JavaScript modules, module formats, module loaders and module bundlers \xe2\x80\x95 Jurgen Van de Moere](https://www.jvandemo.com/a-10-minute-primer-to-javascript-modules-module-formats-module-loaders-and-module-bundlers/)\n * \xf0\x9f\x93\x9c [Modules \xe2\x80\x95 Exploring JS](http://exploringjs.com/es6/ch_modules.html)\n * \xf0\x9f\x93\x9c [ES modules: A cartoon deep-dive \xe2\x80\x94 Lin Clark](https://hacks.mozilla.org/2018/03/es-modules-a-cartoon-deep-dive/)\n * \xf0\x9f\x93\x9c [Understanding ES6 Modules \xe2\x80\x94 Craig Buckler](https://www.sitepoint.com/understanding-es6-modules/)\n * \xf0\x9f\x93\x9c [An overview of ES6 Modules in JavaScript \xe2\x80\x94 Brent Graham](https://blog.cloud66.com/an-overview-of-es6-modules-in-javascript/)\n * \xf0\x9f\x93\x9c [ES6 Modules in Depth \xe2\x80\x94 Nicol\xc3\xa1s Bevacqua](https://ponyfoo.com/articles/es6-modules-in-depth)\n * \xf0\x9f\x93\x9c [ES6 modules, Node.js and the Michael Jackson Solution \xe2\x80\x94 Alberto Gimeno](https://medium.com/dailyjs/es6-modules-node-js-and-the-michael-jackson-solution-828dc244b8b)\n * \xf0\x9f\x93\x9c [JavaScript Modules: A Beginner\xe2\x80\x99s Guide \xe2\x80\x94 Preethi Kasireddy](https://medium.freecodecamp.org/javascript-modules-a-beginner-s-guide-783f7d7a5fcc)\n * \xf0\x9f\x93\x9c [Using JavaScript modules on the web](https://developers.google.com/web/fundamentals/primers/modules)\n * \xf0\x9f\x93\x9c [JavaScript Modules: From IIFEs to CommonJS to ES6 Modules \xe2\x80\x94 Tyler McGinnis](https://medium.freecodecamp.org/javascript-modules-from-iifes-to-commonjs-to-es6-modules-4d10c16f55d4)\n\n### Videos\n\n * \xf0\x9f\x8e\xa5 [Immediately Invoked Function Expression - Beau teaches JavaScript \xe2\x80\x94 freeCodeCamp](https://www.youtube.com/watch?v=3cbiZV4H22c)\n * \xf0\x9f\x8e\xa5 [Understanding JavaScript IIFE](https://www.youtube.com/watch?v=I5EntfMeIIQ)\n * \xf0\x9f\x8e\xa5 [JavaScript Modules: ES6 Import and Export \xe2\x80\x94 Kyle Robinson](https://www.youtube.com/watch?v=_3oSWwapPKQ)\n * \xf0\x9f\x8e\xa5 [ES6 - Modules \xe2\x80\x94 Ryan Christiani](https://www.youtube.com/watch?v=aQr2bV1BPyE)\n * \xf0\x9f\x8e\xa5 [ES6 Modules in the Real World \xe2\x80\x94 Sam Thorogood](https://www.youtube.com/watch?v=fIP4pjAqCtQ)\n * \xf0\x9f\x8e\xa5 [ES6 Modules \xe2\x80\x94 TempleCoding](https://www.youtube.com/watch?v=5P04OK6KlXA)\n\n**[\xe2\xac\x86 Back to Top](#table-of-contents)**\n\n---\n\n## 9. Message Queue and Event Loop\n\n### Articles\n\n * \xf0\x9f\x93\x9c [JavaScript Event Loop Explained \xe2\x80\x94 Anoop Raveendran](https://medium.com/front-end-hacking/javascript-event-loop-explained-4cd26af121d4)\n * \xf0\x9f\x93\x9c [The JavaScript Event Loop: Explained \xe2\x80\x94 Erin Sweson-Healey](https://blog.carbonfive.com/2013/10/27/the-javascript-event-loop-explained/)\n * \xf0\x9f\x93\x9c [What is the Event Loop in Javascript \xe2\x80\x94 WP Tutor.io](https://www.wptutor.io/web/js/javascript-event-loop)\n * \xf0\x9f\x93\x9c [Understanding JS: The Event Loop \xe2\x80\x94 Alexander Kondov](https://hackernoon.com/understanding-js-the-event-loop-959beae3ac40)\n * \xf0\x9f\x93\x9c [Understanding the JavaScript Event Loop \xe2\x80\x94 Ashish Gupta](https://www.zeolearn.com/magazine/understanding-the-javascript-event-loop)\n * \xf0\x9f\x93\x9c [Event Loop in Javascript \xe2\x80\x94 Manjula Dube](https://code.likeagirl.io/what-the-heck-is-event-loop-1e414fccef49)\n * \xf0\x9f\x93\x9c [The JavaScript Event Loop \xe2\x80\x94 Flavio Copes](https://flaviocopes.com/javascript-event-loop/)\n * \xf0\x9f\x93\x9c [How JavaScript works: Event loop \xe2\x80\x94 Alexander Zlatkov](https://blog.sessionstack.com/how-javascript-works-event-loop-and-the-rise-of-async-programming-5-ways-to-better-coding-with-2f077c4438b5)\n * \xf0\x9f\x93\x9c [Tasks, microtasks, queues and schedules \xe2\x80\x94 Jake Archibald](https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/)\n * \xf0\x9f\x93\x9c [Visualising the JavaScript Event Loop with a Pizza Restaurant analogy \xe2\x80\x94 Priyansh Jain](https://dev.to/presto412/visualising-the-javascript-event-loop-with-a-pizza-restaurant-analogy-47a8)\n\n### Videos\n\n * \xf0\x9f\x8e\xa5 [What the heck is the event loop anyway? | JSConf EU \xe2\x80\x94 Philip Roberts](https://www.youtube.com/watch?v=8aGhZQkoFbQ)\n * \xf0\x9f\x8e\xa5 [JavaScript Event Loop \xe2\x80\x94 ComScience Simplified](https://www.youtube.com/watch?v=XzXIMZMN9k4)\n * \xf0\x9f\x8e\xa5 [I\'m stuck in an Event Loop \xe2\x80\x94 Philip Roberts](https://www.youtube.com/watch?v=6MXRNXXgP_0)\n * \xf0\x9f\x8e\xa5 [In The Loop - Jake Archibald | JSConf.Asia 2018](https://www.youtube.com/watch?v=cCOL7MC4Pl0)\n * \xf0\x9f\x8e\xa5 [Desmitificando el Event Loop (Spanish)](https://www.youtube.com/watch?v=Eqq2Rb7LzYE)\n\n\n**[\xe2\xac\x86 Back to Top](#table-of-contents)**\n\n---\n\n## 10. setTimeout, setInterval and requestAnimationFrame\n\n### Articles\n\n * \xf0\x9f\x93\x9c [setTimeout and setInterval \xe2\x80\x94 JavaScript.Info](https://javascript.info/settimeout-setinterval)\n * \xf0\x9f\x93\x9c [Why not to use setInterval \xe2\x80\x94 Akanksha Sharma](https://dev.to/akanksha_9560/why-not-to-use-setinterval--2na9)\n * \xf0\x9f\x93\x9c [setTimeout VS setInterval \xe2\x80\x94 Develoger](https://develoger.com/settimeout-vs-setinterval-cff85142555b)\n * \xf0\x9f\x93\x9c [Using requestAnimationFrame \xe2\x80\x94 Chris Coyier](https://css-tricks.com/using-requestanimationframe/)\n * \xf0\x9f\x93\x9c [Understanding JavaScript\'s requestAnimationFrame() \xe2\x80\x94 JavaScript Kit](http://www.javascriptkit.com/javatutors/requestanimationframe.shtml)\n * \xf0\x9f\x93\x9c [Handling time intervals in JavaScript - Amit Merchant](https://www.amitmerchant.com/Handling-Time-Intervals-In-Javascript/)\n\n### Videos\n\n * \xf0\x9f\x8e\xa5 [Javascript: How setTimeout and setInterval works \xe2\x80\x94 Coding Blocks India](https://www.youtube.com/watch?v=6bPKyl8WYWI)\n * \xf0\x9f\x8e\xa5 [setTimeout and setInterval in JavaScript \xe2\x80\x94 techsith](https://www.youtube.com/watch?v=TbCgGWe8LN8)\n * \xf0\x9f\x8e\xa5 [JavaScript Timers \xe2\x80\x94 Steve Griffith](https://www.youtube.com/watch?v=0VVJSvlUgtg)\n * \xf0\x9f\x8e\xa5 [JavaScript setTimeout, setInterval & clearInterval \xe2\x80\x94 DoingITeasyChannel](https://www.youtube.com/watch?v=BVALvvy5bZY)\n * \xf0\x9f\x8e\xa5 [JavaScript setTimeOut and setInterval Explained \xe2\x80\x94 Theodore Anderson](https://www.youtube.com/watch?v=mVKfrWCOB60)\n\n**[\xe2\xac\x86 Back to Top](#table-of-contents)**\n\n---\n\n## 11. JavaScript Engines\n\n### Articles\n\n * \xf0\x9f\x93\x9c [JavaScript Engines \xe2\x80\x94 Jen Looper](http://www.softwaremag.com/javascript-engines/)\n * \xf0\x9f\x93\x9c [Understanding How the Chrome V8 Engine Translates JavaScript into Machine Code \xe2\x80\x94 DroidHead](https://medium.freecodecamp.org/understanding-the-core-of-nodejs-the-powerful-chrome-v8-engine-79e7eb8af964)\n * \xf0\x9f\x93\x9c [Understanding V8\xe2\x80\x99s Bytecode \xe2\x80\x94 Franziska Hinkelmann](https://medium.com/dailyjs/understanding-v8s-bytecode-317d46c94775)\n * \xf0\x9f\x93\x9c [How the V8 engine works? \xe2\x80\x94 Thibault Laurens](http://thibaultlaurens.github.io/javascript/2013/04/29/how-the-v8-engine-works/)\n * \xf0\x9f\x93\x9c [A Brief History of Google\xe2\x80\x99s V8 Javascript Engine \xe2\x80\x94 Clair Smith](https://www.mediacurrent.com/blog/brief-history-googles-v8-javascript-engine/)\n * \xf0\x9f\x93\x9c [JavaScript essentials: why you should know how the engine works - Rainer Hahnekamp](https://medium.freecodecamp.org/javascript-essentials-why-you-should-know-how-the-engine-works-c2cc0d321553)\n * \xf0\x9f\x93\x9c [JavaScript engine fundamentals: Shapes and Inline Caches](https://mathiasbynens.be/notes/shapes-ics)\n * \xf0\x9f\x93\x9c [JavaScript engine fundamentals: optimizing prototypes](https://mathiasbynens.be/notes/prototypes)\n * \xf0\x9f\x93\x9c [How V8 optimizes array operations](https://v8.dev/blog/elements-kinds)\n\n\n### Videos\n\n * \xf0\x9f\x8e\xa5 [JavaScript Engines: The Good Parts\xe2\x84\xa2 \xe2\x80\x94 Mathias Bynens & Benedikt Meurer](https://www.youtube.com/watch?v=5nmpokoRaZI)\n\n**[\xe2\xac\x86 Back to Top](#table-of-contents)**\n\n---\n\n## 12. Bitwise Operators, Type Arrays and Array Buffers\n\n### Articles\n\n * \xf0\x9f\x93\x9c [Programming with JS: Bitwise Operations \xe2\x80\x94 Alexander Kondov](https://hackernoon.com/programming-with-js-bitwise-operations-393eb0745dc4)\n * \xf0\x9f\x93\x9c [Using JavaScript\xe2\x80\x99s Bitwise Operators in Real Life \xe2\x80\x94 ian m](https://codeburst.io/using-javascript-bitwise-operators-in-real-life-f551a731ff5)\n * \xf0\x9f\x93\x9c [JavaScript Bitwise Operators \xe2\x80\x94 w3resource](https://www.w3resource.com/javascript/operators/bitwise-operator.php)\n * \xf0\x9f\x93\x9c [Bitwise Operators in Javascript \xe2\x80\x94 Joe Cha](https://medium.com/bother7-blog/bitwise-operators-in-javascript-65c4c69be0d3)\n * \xf0\x9f\x93\x9c [A Comprehensive Primer on Binary Computation and Bitwise Operators in Javascript \xe2\x80\x94 Paul Brown](https://medium.com/techtrument/a-comprehensive-primer-on-binary-computation-and-bitwise-operators-in-javascript-81acf8341f04)\n * \xf0\x9f\x93\x9c [How can I understand Bitwise operation in JavaScript?](https://www.quora.com/How-can-I-understand-Bitwise-operation-in-JavaScript)\n\n ### Videos\n\n * \xf0\x9f\x8e\xa5 [JavaScript Bitwise Operators \xe2\x80\x94 Programming with Mosh](https://www.youtube.com/watch?v=mesu75PTDC8)\n\n**[\xe2\xac\x86 Back to Top](#table-of-contents)**\n\n---\n\n## 13. DOM and Layout Trees\n\n### Articles\n\n * \xf0\x9f\x93\x9c [How To Understand and Modify the DOM in JavaScript \xe2\x80\x94 Tania Rascia](https://www.digitalocean.com/community/tutorials/introduction-to-the-dom)\n * \xf0\x9f\x93\x9c [What\xe2\x80\x99s the Document Object Model, and why you should know how to use it \xe2\x80\x94 Leonardo Maldonado](https://medium.freecodecamp.org/whats-the-document-object-model-and-why-you-should-know-how-to-use-it-1a2d0bc5429d)\n * \xf0\x9f\x93\x9c [JavaScript DOM Tutorial with Example \xe2\x80\x94 Guru99](https://www.guru99.com/how-to-use-dom-and-events-in-javascript.html)\n * \xf0\x9f\x93\x9c [What is the DOM? \xe2\x80\x94 Chris Coyier](https://css-tricks.com/dom/)\n * \xf0\x9f\x93\x9c [Traversing the DOM with JavaScript \xe2\x80\x94 Zell Liew](https://zellwk.com/blog/dom-traversals/)\n * \xf0\x9f\x93\x9c [Eloquent JavaScript [Book] \xe2\x80\x94 The Document Object Model](https://eloquentjavascript.net/14_dom.html)\n * \xf0\x9f\x93\x9c [DOM Tree](https://javascript.info/dom-nodes)\n * \xf0\x9f\x93\x9c [How to traverse the DOM in Javascript \xe2\x80\x94 Vojislav Gruji\xc4\x87](https://medium.com/javascript-in-plain-english/how-to-traverse-the-dom-in-javascript-d6555c335b4e)\n * \xf0\x9f\x93\x9c [Render Tree Construction \xe2\x80\x94 Ilya Grigorik](https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction)\n * \xf0\x9f\x93\x9c [What exactly is the DOM?](https://bitsofco.de/what-exactly-is-the-dom/)\n * \xf0\x9f\x93\x9c [A Vanilla JS Guide On Mastering the DOM \xe2\x80\x94 Brian Pak](https://dev.to/bouhm/a-vanilla-js-guide-on-mastering-the-dom-3l9b)\n\n ### Videos\n\n * \xf0\x9f\x8e\xa5 [JavaScript DOM \xe2\x80\x94 The Net Ninja](https://www.youtube.com/watch?v=FIORjGvT0kk)\n * \xf0\x9f\x8e\xa5 [JavaScript DOM Crash Course \xe2\x80\x94 Traversy Media](https://www.youtube.com/watch?v=0ik6X4DJKCc)\n\n**[\xe2\xac\x86 Back to Top](#table-of-contents)**\n\n---\n\n## 14. Factories and Classes\n\n### Articles\n\n * \xf0\x9f\x93\x9c [How To Use Classes in JavaScript \xe2\x80\x94 Tania Rascia](https://www.digitalocean.com/community/tutorials/understanding-classes-in-javascript)\n * \xf0\x9f\x93\x9c [Javascript Classes \xe2\x80\x94 Under The Hood \xe2\x80\x94 Majid](https://medium.com/tech-tajawal/javascript-classes-under-the-hood-6b26d2667677)\n * \xf0\x9f\x93\x9c [ES6 Classes \xe2\x80\x94 Nathaniel Foster](https://www.javascriptjanuary.com/blog/es6-classes)\n * \xf0\x9f\x93\x9c [Better JavaScript with ES6, Pt. II: A Deep Dive into Classes \xe2\x80\x95 Peleke Sengstacke](https://scotch.io/tutorials/better-javascript-with-es6-pt-ii-a-deep-dive-into-classes)\n * \xf0\x9f\x93\x9c [Understand the Factory Design Pattern in Plain JavaScript \xe2\x80\x94 Aditya Agarwal](https://medium.com/front-end-hacking/understand-the-factory-design-pattern-in-plain-javascript-20b348c832bd)\n * \xf0\x9f\x93\x9c [Factory Functions in JavaScript \xe2\x80\x94 Josh Miller](https://atendesigngroup.com/blog/factory-functions-javascript)\n * \xf0\x9f\x93\x9c [The Factory Pattern in JS ES6 \xe2\x80\x94 SnstsDev](https://medium.com/@SntsDev/the-factory-pattern-in-js-es6-78f0afad17e9)\n * \xf0\x9f\x93\x9c [Class vs Factory function: exploring the way forward \xe2\x80\x94 Cristi Salcescu](https://medium.freecodecamp.org/class-vs-factory-function-exploring-the-way-forward-73258b6a8d15)\n * \xf0\x9f\x93\x9c [How ES6 classes really work and how to build your own \xe2\x80\x94 Robert Grosse](https://medium.com/@robertgrosse/how-es6-classes-really-work-and-how-to-build-your-own-fd6085eb326a)\n * \xf0\x9f\x93\x9c [Understanding `super` in JavaScript](https://jordankasper.com/understanding-super-in-javascript)\n\n ### Videos\n\n * \xf0\x9f\x8e\xa5 [JavaScript Factory Functions \xe2\x80\x94 Programming with Mosh](https://www.youtube.com/watch?v=jpegXpQpb3o)\n * \xf0\x9f\x8e\xa5 [Factory Functions in JavaScript \xe2\x80\x94 Fun Fun Function](https://www.youtube.com/watch?v=ImwrezYhw4w)\n * \xf0\x9f\x8e\xa5 [Javascript Tutorial Function Factories \xe2\x80\x94 Crypto Chan](https://www.youtube.com/watch?v=R7-IwpH80UE)\n\n**[\xe2\xac\x86 Back to Top](#table-of-contents)**\n\n---\n\n## 15. this, call, apply and bind\n\n### Articles\n\n * \xf0\x9f\x93\x9c [How-to: call() , apply() and bind() in JavaScript \xe2\x80\x94 Niladri Sekhar Dutta](https://www.codementor.io/niladrisekhardutta/how-to-call-apply-and-bind-in-javascript-8i1jca6jp)\n * \xf0\x9f\x93\x9c [JavaScript\xe2\x80\x99s Apply, Call, and Bind Methods are Essential for JavaScript Professionals \xe2\x80\x94 Richard Bovell](http://javascriptissexy.com/javascript-apply-call-and-bind-methods-are-essential-for-javascript-professionals/)\n * \xf0\x9f\x93\x9c [WTF is this - Understanding the this keyword, call, apply, and bind in JavaScript \xe2\x80\x94 Tyler McGinnis](https://tylermcginnis.com/this-keyword-call-apply-bind-javascript/)\n * \xf0\x9f\x93\x9c [Javascript: call(), apply() and bind() \xe2\x80\x94 Omer Goldberg](https://medium.com/@omergoldberg/javascript-call-apply-and-bind-e5c27301f7bb)\n * \xf0\x9f\x93\x9c [The difference between call / apply / bind \xe2\x80\x94 Ivan Sifrim](https://medium.com/@ivansifrim/the-differences-between-call-apply-bind-276724bb825b)\n * \xf0\x9f\x93\x9c [Mastering \'this\' in JavaScript: Callbacks and bind(), apply(), call() \xe2\x80\x94 Michelle Gienow](https://thenewstack.io/mastering-javascript-callbacks-bind-apply-call/)\n * \xf0\x9f\x93\x9c [JavaScript\xe2\x80\x99s apply, call, and bind explained by hosting a cookout \xe2\x80\x94 Kevin Kononenko](https://dev.to/kbk0125/javascripts-apply-call-and-bind-explained-by-hosting-a-cookout-32jo)\n * \xf0\x9f\x93\x9c [How AND When to use bind, call, and apply in Javascript \xe2\x80\x94 Eigen X](https://www.eigenx.com/blog/https/mediumcom/eigen-x/how-and-when-to-use-bind-call-and-apply-in-javascript-77b6f42898fb)\n * \xf0\x9f\x93\x9c [JavaScript .bind() vs .apply() and .call() \xe2\x80\x94 Hack Sparrow](https://www.hacksparrow.com/javascript-bind-vs-apply-and-call.html)\n * \xf0\x9f\x93\x9c [call() \xe2\x80\x94 MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call)\n * \xf0\x9f\x93\x9c [bind() \xe2\x80\x94 MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/bind)\n * \xf0\x9f\x93\x9c [apply() \xe2\x80\x94 MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply)\n * \xf0\x9f\x93\x9c [What is \'this\' in JavaScript? \xe2\x80\x94 Daniel Li](http://blog.brew.com.hk/what-is-this-in-javascript/)\n * \xf0\x9f\x93\x9c [Let me explain to you what is `this`. (Javascript) \xe2\x80\x94 Jason Yu](https://dev.to/ycmjason/let-me-explain-to-you-what-is-this-javascript-44ja)\n * \xf0\x9f\x93\x9c [Understanding the \xe2\x80\x9cthis\xe2\x80\x9d Keyword in JavaScript \xe2\x80\x94 Pavan](https://medium.com/quick-code/understanding-the-this-keyword-in-javascript-cb76d4c7c5e8)\n * \xf0\x9f\x93\x9c [How to understand the keyword this and context in JavaScript \xe2\x80\x94 Lukas Gisder-Dub\xc3\xa9](https://medium.freecodecamp.org/how-to-understand-the-keyword-this-and-context-in-javascript-cd624c6b74b8)\n * \xf0\x9f\x93\x9c [What the heck is this in Javascript? \xe2\x80\x94 Hridayesh Sharma](https://dev.to/_hridaysharma/what-the-heck-is-this-in-javascript-37n1)\n * \xf0\x9f\x93\x9c [This and Bind In Javascript \xe2\x80\x94 Brian Barbour](https://dev.to/steelvoltage/this-and-bind-in-javascript-2pam)\n * \xf0\x9f\x93\x9c [3 Techniques for Maintaining Your Sanity Using "This" in JavaScript \xe2\x80\x94 Carl](https://dev.to/canderson93/3-techniques-for-maintaining-your-sanity-using-this-in-javascript-3idf)\n * \xf0\x9f\x93\x9c [3Mastering the JavaScript "this" Keyword \xe2\x80\x94 Aakash Srivastav](https://dev.to/aakashsr/mastering-the-javascript-this-keyword-4pfa)\n\n  ### Videos\n\n * \xf0\x9f\x8e\xa5 [JavaScript call, apply and bind \xe2\x80\x94 techsith](https://www.youtube.com/watch?v=c0mLRpw-9rI)\n * \xf0\x9f\x8e\xa5 [JavaScript Practical Applications of Call, Apply and Bind functions\xe2\x80\x94 techsith](https://www.youtube.com/watch?v=AYVYxezrMWA)\n * \xf0\x9f\x8e\xa5 [JavaScript (call, bind, apply) \xe2\x80\x94 curious aatma](https://www.youtube.com/watch?v=Uy0NOXLBraE)\n * \xf0\x9f\x8e\xa5 [Understanding Functions and \'this\' In The World of ES2017 \xe2\x80\x94 Bryan Hughes](https://www.youtube.com/watch?v=AOSYY1_np_4)\n * \xf0\x9f\x8e\xa5 [bind and this - Object Creation in JavaScript - FunFunFunction](https://www.youtube.com/watch?v=GhbhD1HR5vk)\n * \xf0\x9f\x8e\xa5 [JavaScript Practical Applications of Call, Apply and Bind functions \xe2\x80\x94 techsith](https://www.youtube.com/watch?v=AYVYxezrMWA)\n * \xf0\x9f\x8e\xa5 [JS Function Methods call(), apply(), and bind() \xe2\x80\x94 Steve Griffith](https://www.youtube.com/watch?v=uBdH0iB1VDM)\n\n**[\xe2\xac\x86 Back to Top](#table-of-contents)**\n\n---\n\n## 16. new, Constructor, instanceof and Instances\n\n### Articles\n\n * \xf0\x9f\x93\x9c [JavaScript For Beginners: the \xe2\x80\x98new\xe2\x80\x99 operator \xe2\x80\x94 Brandon Morelli](https://codeburst.io/javascript-for-beginners-the-new-operator-cee35beb669e)\n * \xf0\x9f\x93\x9c [Let\xe2\x80\x99s demystify JavaScript\xe2\x80\x99s \xe2\x80\x98new\xe2\x80\x99 keyword \xe2\x80\x94 Cynthia Lee](https://medium.freecodecamp.org/demystifying-javascripts-new-keyword-874df126184c)\n * \xf0\x9f\x93\x9c [Constructor, operator "new" \xe2\x80\x94 JavaScript.Info](https://javascript.info/constructor-new)\n * \xf0\x9f\x93\x9c [Understanding JavaScript Constructors \xe2\x80\x94 Faraz Kelhini](https://css-tricks.com/understanding-javascript-constructors/)\n * \xf0\x9f\x93\x9c [Use Constructor Functions \xe2\x80\x94 Openclassrooms](https://openclassrooms.com/en/courses/3523231-learn-to-code-with-javascript/4379006-use-constructor-functions)\n * \xf0\x9f\x93\x9c [Beyond `typeof` and `instanceof`: simplifying dynamic type checks \xe2\x80\x94 Dr. Axel Rauschmayer](http://2ality.com/2017/08/type-right.html)\n * \xf0\x9f\x93\x9c [What Is the Instanceof Operator in JavaScript \xe2\x80\x94 appendTo](https://appendto.com/2016/10/what-is-the-instanceof-operator-in-javascript/)\n * \xf0\x9f\x93\x9c [Function and Object, instances of each other \xe2\x80\x94 Kiro Risk](https://javascriptrefined.io/function-and-object-instances-of-each-other-1e1095d5faac)\n\n**[\xe2\xac\x86 Back to Top](#table-of-contents)**\n\n---\n\n## 17. Prototype Inheritance and Prototype Chain\n\n### Articles\n\n * \xf0\x9f\x93\x9c [Javascript : Prototype vs Class \xe2\x80\x94 Valentin PARSY](https://medium.com/@parsyval/javascript-prototype-vs-class-a7015d5473b)\n * \xf0\x9f\x93\x9c [JavaScript engine fundamentals: optimizing prototypes \xe2\x80\x94 Mathias Bynens](https://mathiasbynens.be/notes/prototypes)\n * \xf0\x9f\x93\x9c [JavaScript Prototype \xe2\x80\x94 NC Patro](https://codeburst.io/javascript-prototype-cb29d82b8809)\n * \xf0\x9f\x93\x9c [Prototype in Javascript \xe2\x80\x94 Sandeep Ranjan](https://www.codementor.io/sandeepranjan2007/prototype-in-javascipt-knbve0lqo)\n * \xf0\x9f\x93\x9c [Prototypes in JavaScript \xe2\x80\x94 Rupesh Mishra](https://hackernoon.com/prototypes-in-javascript-5bba2990e04b)\n * \xf0\x9f\x93\x9c [Prototype in JavaScript: it\xe2\x80\x99s quirky, but here\xe2\x80\x99s how it works \xe2\x80\x94 Pranav Jindal](https://medium.freecodecamp.org/prototype-in-js-busted-5547ec68872)\n * \xf0\x9f\x93\x9c [Inheritance and the prototype chain \xe2\x80\x94 MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain)\n * \xf0\x9f\x93\x9c [Understanding JavaScript: Prototype and Inheritance \xe2\x80\x94 Alexander Kondov](https://hackernoon.com/understanding-javascript-prototype-and-inheritance-d55a9a23bde2)\n * \xf0\x9f\x93\x9c [Understanding Classes (ES5) and Prototypal Inheritance in JavaScript \xe2\x80\x94 Hridayesh Sharma](https://dev.to/_hridaysharma/understanding-classes-es5-and-prototypal-inheritance-in-javascript-n8d)\n * \xf0\x9f\x93\x9c [prototype, __proto__ and Prototypal inheritance in JavaScript \xe2\x80\x94 Varun Dey](https://dev.to/varundey/prototype-proto-and-prototypal-inheritance-in-javascript-2inl)\n * \xf0\x9f\x93\x9c [Prototypal Inheritance \xe2\x80\x94 JavaScript.Info](https://javascript.info/prototype-inheritance)\n * \xf0\x9f\x93\x9c [How To Work with Prototypes and Inheritance in JavaScript \xe2\x80\x94 Tania Rascia](https://www.digitalocean.com/community/tutorials/understanding-prototypes-and-inheritance-in-javascript)\n * \xf0\x9f\x93\x9c [Master JavaScript Prototypes & Inheritance \xe2\x80\x94 Arnav Aggarwal](https://codeburst.io/master-javascript-prototypes-inheritance-d0a9a5a75c4e)\n * \xf0\x9f\x93\x9c [You Don\'t Know JS [Book] Chapter 5: Prototypes \xe2\x80\x94 Kyle Simpson](https://github.com/getify/You-Dont-Know-JS/blob/master/this%20%26%20object%20prototypes/ch5.md)\n * \xf0\x9f\x93\x9c [JavaScript\xe2\x80\x99s Prototypal Inheritance Explained Using CSS \xe2\x80\x94 Nash Vail](https://medium.freecodecamp.org/understanding-prototypal-inheritance-in-javascript-with-css-93b2fcda75e4)\n * \xf0\x9f\x93\x9c [Prototypal Inheritance in JavaScript \xe2\x80\x94 Jannis Redmann](https://gist.github.com/derhuerst/a585c4916b1c361cc6f0)\n * \xf0\x9f\x93\x9c [Classical and Prototypical Inheritance in JavaScript \xe2\x80\x94 Danny Cornelisse](http://www.competa.com/blog/classical-prototypical-inheritance-javascript/)\n * \xf0\x9f\x93\x9c [Demystifying ES6 Classes And Prototypal Inheritance \xe2\x80\x95 Neo Ighodaro](https://scotch.io/tutorials/demystifying-es6-classes-and-prototypal-inheritance)\n * \xf0\x9f\x93\x9c [Intro To Prototypal Inheritance \xe2\x80\x94 Dharani Jayakanthan](https://dev.to/danny/intro-to-prototypal-inheritance---js-9di)\n * \xf0\x9f\x93\x9c [Classes in JavaScript - Explained \xe2\x80\x94 Daniel Li](http://blog.brew.com.hk/classes-in-javascript-explained/)\n * \xf0\x9f\x93\x9c [You Don\'t Know JS: this & Object Prototypes \xe2\x80\x94 Kyle Simpson](https://github.com/getify/You-Dont-Know-JS/blob/master/this%20%26%20object%20prototypes/ch4.md)\n * \xf0\x9f\x93\x9c [Let\xe2\x80\x99s Build Prototypal Inheritance in JS \xe2\x80\x94 var-che](https://dev.to/varche/let-s-build-prototypal-inheritance-in-js-56mm)\n * \xf0\x9f\x93\x9c [Objects, Prototypes and Classes in JavaScript \xe2\x80\x94 Atta](https://dev.to/attacomsian/objects-prototypes-and-classes-in-javascript-3i9b)\n * \xf0\x9f\x93\x9c [JavaScript Prototypal Inheritance and Object Creation \xe2\x80\x94 Nick Shoup](https://dev.to/shoupn/javascript-prototypes-and-object-creation-2onh)\n * \xf0\x9f\x93\x9c [The magical world of JavaScript prototypes \xe2\x80\x94 Bel\xc3\xa9n](https://dev.to/ladybenko/the-magical-world-of-javascript-prototypes-1mhg)\n\n ### Videos\n\n * \xf0\x9f\x8e\xa5 [Javascript Prototype Inheritance \xe2\x80\x94 Avelx](https://www.youtube.com/watch?v=sOrtAjyk4lQ)\n * \xf0\x9f\x8e\xa5 [JavaScript Prototype Inheritance Explained pt. I \xe2\x80\x94 techsith](https://www.youtube.com/watch?v=7oNWNlMrkpc)\n * \xf0\x9f\x8e\xa5 [JavaScript Prototype Inheritance Explained pt. II \xe2\x80\x94 techsith](https://www.youtube.com/watch?v=uIlj6_z_wL8)\n * \xf0\x9f\x8e\xa5 [JavaScript Prototype Inheritance Explained \xe2\x80\x94 Kyle Robinson](https://www.youtube.com/watch?v=qMO-LTOrJaE)\n * \xf0\x9f\x8e\xa5 [Advanced Javascript - Prototypal Inheritance In 1 Minute](https://www.youtube.com/watch?v=G6l5CHl67HQ)\n * \xf0\x9f\x8e\xa5 [An Overview Of Classical Javascript Classes and Prototypal Inheritance \xe2\x80\x94 Pentacode](https://www.youtube.com/watch?v=phwzuiJJPpQ)\n * \xf0\x9f\x8e\xa5 [Object Oriented JavaScript - Prototype \xe2\x80\x94 The Net Ninja](https://www.youtube.com/watch?v=4jb4AYEyhRc)\n * \xf0\x9f\x8e\xa5 [Prototype in JavaScript \xe2\x80\x94 kudvenkat](https://www.youtube.com/watch?v=2rkEbcptR64)\n * \xf0\x9f\x8e\xa5 [JavaScript Using Prototypes \xe2\x80\x94 O\'Reilly](https://www.youtube.com/watch?v=oCwCcNvaXAQ)\n * \xf0\x9f\x8e\xa5 [A Beginner\'s Guide to Javascript\'s Prototype \xe2\x80\x94 Tyler Mcginnis](https://www.youtube.com/watch?v=XskMWBXNbp0)\n * \xf0\x9f\x8e\xa5 [Prototypes in Javascript - p5.js Tutorial \xe2\x80\x94 The Coding Train](https://www.youtube.com/watch?v=hS_WqkyUah8)\n\n\n**[\xe2\xac\x86 Back to Top](#table-of-contents)**\n\n---\n\n## 18. Object.create and Object.assign\n\n### Articles\n\n * \xf0\x9f\x93\x9c [Object.create() \xe2\x80\x94 MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create)\n * \xf0\x9f\x93\x9c [Object.create in JavaScript \xe2\x80\x94 Rupesh Mishra](https://hackernoon.com/object-create-in-javascript-fa8674df6ed2)\n * \xf0\x9f\x93\x9c [Object.create(): the New Way to Create Objects in JavaScript \xe2\x80\x94 Rob Gravelle](https://www.htmlgoodies.com/beyond/javascript/object.create-the-new-way-to-create-objects-in-javascript.html)\n * \xf0\x9f\x93\x9c [Basic Inheritance with Object.create \xe2\x80\x94 Joshua Clanton](http://adripofjavascript.com/blog/drips/basic-inheritance-with-object-create.html)\n * \xf0\x9f\x93\x9c [Object.create() In JavaScript \xe2\x80\x94 GeeksforGeeks](https://www.geeksforgeeks.org/object-create-javascript/)\n * \xf0\x9f\x93\x9c [Understanding the difference between Object.create() and the new operator \xe2\x80\x94 Jonathan Voxland](https://medium.com/@jonathanvox01/understanding-the-difference-between-object-create-and-the-new-operator-b2a2f4749358)\n * \xf0\x9f\x93\x9c [JavaScript Object Creation: Patterns and Best Practices \xe2\x80\x94 Jeff Mott](https://www.sitepoint.com/javascript-object-creation-patterns-best-practises/)\n * \xf0\x9f\x93\x9c [Dealing With Objects in JavaScript With Object.assign, Object.keys and hasOwnProperty](https://alligator.io/js/dealing-with-objects/)\n * \xf0\x9f\x93\x9c [Copying Objects in JavaScript \xe2\x80\x95 Orinami Olatunji](https://scotch.io/bar-talk/copying-objects-in-javascript)\n * \xf0\x9f\x93\x9c [Object.assign() \xe2\x80\x94 MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\n * \xf0\x9f\x93\x9c [JavaScript: Object.assign() \xe2\x80\x94 Thiago S. Adriano](https://codeburst.io/javascript-object-assign-bc9696dcbb6e)\n * \xf0\x9f\x93\x9c [How to deep clone a JavaScript Object \xe2\x80\x94 Flavio Copes](https://flaviocopes.com/how-to-clone-javascript-object/)\n * \xf0\x9f\x93\x9c [Object Assignment vs. Primitive Assignment in JavaScript for Beginners \xe2\x80\x94 Nick Scialli](https://dev.to/nas5w/object-assignment-vs-primitive-assignment-in-javascript-for-beginners-2moi)\n\n ### Videos\n\n * \xf0\x9f\x8e\xa5 [Object.assign() explained \xe2\x80\x94 Aaron Writes Code](https://www.youtube.com/watch?v=aw7NfYhR5rc)\n * \xf0\x9f\x8e\xa5 [Object.assign() Method \xe2\x80\x94 techsith](https://www.youtube.com/watch?v=9Ky4X6inpi4)\n\n**[\xe2\xac\x86 Back to Top](#table-of-contents)**\n\n---\n\n## 19. map, reduce, filter\n\n### Articles\n\n * \xf0\x9f\x93\x9c [JavaScript Functional Programming \xe2\x80\x94 map, filter and reduce \xe2\x80\x94 Bojan Gvozderac](https://medium.com/jsguru/javascript-functional-programming-map-filter-and-reduce-846ff9ba492d)\n * \xf0\x9f\x93\x9c [Learn map, filter and reduce in Javascript \xe2\x80\x94 Jo\xc3\xa3o Miguel Cunha](https://medium.com/@joomiguelcunha/learn-map-filter-and-reduce-in-javascript-ea59009593c4)\n * \xf0\x9f\x93\x9c [JavaScript\xe2\x80\x99s Map, Reduce, and Filter \xe2\x80\x94 Dan Martensen](https://danmartensen.svbtle.com/javascripts-map-reduce-and-filter)\n * \xf0\x9f\x93\x9c [How to Use Map, Filter, & Reduce in JavaScript \xe2\x80\x94 Peleke Sengstacke](https://code.tutsplus.com/tutorials/how-to-use-map-filter-reduce-in-javascript--cms-26209)\n * \xf0\x9f\x93\x9c [JavaScript \xe2\x80\x94 Learn to Chain Map, Filter, and Reduce \xe2\x80\x94 Brandon Morelli](https://codeburst.io/javascript-learn-to-chain-map-filter-and-reduce-acd2d0562cd4)\n * \xf0\x9f\x93\x9c [Javascript data structure with map, reduce, filter and ES6 \xe2\x80\x94 Deepak Gupta](https://codeburst.io/write-beautiful-javascript-with-%CE%BB-fp-es6-350cd64ab5bf)\n * \xf0\x9f\x93\x9c [Understanding map, filter and reduce in Javascript \xe2\x80\x94 Luuk Gruijs](https://hackernoon.com/understanding-map-filter-and-reduce-in-javascript-5df1c7eee464)\n * \xf0\x9f\x93\x9c [Functional Programming in JS: map, filter, reduce (Pt. 5) \xe2\x80\x94 Omer Goldberg](https://hackernoon.com/functional-programming-in-js-map-filter-reduce-pt-5-308a205fdd5f)\n * \xf0\x9f\x93\x9c [JavaScript: Map, Filter, Reduce \xe2\x80\x94 William S. Vincent](https://wsvincent.com/functional-javascript-map-filter-reduce/)\n * \xf0\x9f\x93\x9c [Arrow Functions: Fat and Concise Syntax in JavaScript \xe2\x80\x94 Kyle Pennell](https://www.sitepoint.com/es6-arrow-functions-new-fat-concise-syntax-javascript/)\n * \xf0\x9f\x93\x9c [JavaScript: Arrow Functions for Beginners \xe2\x80\x94 Brandon Morelli](https://codeburst.io/javascript-arrow-functions-for-beginners-926947fc0cdc)\n * \xf0\x9f\x93\x9c [When (and why) you should use ES6 arrow functions \xe2\x80\x94 and when you shouldn\xe2\x80\x99t \xe2\x80\x94 Cynthia Lee](https://medium.freecodecamp.org/when-and-why-you-should-use-es6-arrow-functions-and-when-you-shouldnt-3d851d7f0b26)\n * \xf0\x9f\x93\x9c [JavaScript \xe2\x80\x94 Learn & Understand Arrow Functions \xe2\x80\x94 Brandon Morelli](https://codeburst.io/javascript-learn-understand-arrow-functions-fe2083533946)\n * \xf0\x9f\x93\x9c [(JavaScript )=> Arrow functions \xe2\x80\x94 sigu](https://medium.com/podiihq/javascript-arrow-functions-27d4c3334b83)\n * \xf0\x9f\x93\x9c [Javascript.reduce() \xe2\x80\x94 Paul Anderson](https://medium.com/@panderson.dev/javascript-reduce-79aab078da23)\n * \xf0\x9f\x93\x9c [Why you should replace forEach with map and filter in JavaScript \xe2\x80\x94 Roope Hakulinen](https://gofore.com/en/why-you-should-replace-foreach/)\n * \xf0\x9f\x93\x9c [Simplify your JavaScript \xe2\x80\x93 Use .map(), .reduce(), and .filter() \xe2\x80\x94 Etienne Talbot](https://medium.com/poka-techblog/simplify-your-javascript-use-map-reduce-and-filter-bd02c593cc2d)\n * \xf0\x9f\x93\x9c [JavaScript\xe2\x80\x99s Reduce Method Explained By Going On a Diet \xe2\x80\x94 Kevin Kononenko](https://blog.codeanalogies.com/2018/07/24/javascripts-reduce-method-explained-by-going-on-a-diet/)\n * \xf0\x9f\x93\x9c [Difference between map, filter and reduce in JavaScript \xe2\x80\x94 Amirata Khodaparast](https://medium.com/@amiratak88/difference-between-map-filter-and-reduce-in-javascript-822ff79d5160)\n * \xf0\x9f\x93\x9c [Map\xe2\x87\x84Filter\xe2\x87\x84Reduce\xe2\x86\xbb \xe2\x80\x94 ashay mandwarya](https://hackernoon.com/map-filter-reduce-ebbed4be4201)\n * \xf0\x9f\x93\x9c [Finding Your Way With .map() \xe2\x80\x94 Brandon Wozniewicz](https://medium.freecodecamp.org/finding-your-way-with-map-aecb8ca038f6)\n * \xf0\x9f\x93\x9c [How to write your own map, filter and reduce functions in JavaScript \xe2\x80\x94 Hemand Nair](https://medium.freecodecamp.org/how-to-write-your-own-map-filter-and-reduce-functions-in-javascript-ab1e35679d26)\n * \xf0\x9f\x93\x9c [How to Manipulate Arrays in JavaScript \xe2\x80\x94 Bolaji Ayodeji](https://www.freecodecamp.org/news/manipulating-arrays-in-javascript/)\n * \xf0\x9f\x93\x9c [How to simplify your codebase with map(), reduce(), and filter() in JavaScript \xe2\x80\x94 Alex Permyakov](https://itnext.io/15-useful-javascript-examples-of-map-reduce-and-filter-74cbbb5e0a1f)\n * \xf0\x9f\x93\x9c [.map(), .filter(), and .reduce() \xe2\x80\x94 Andy Pickle](https://dev.to/pickleat/map-filter-and-reduce-2efb)\n * \xf0\x9f\x93\x9c [Map/Filter/Reduce Crash Course \xe2\x80\x94 Chris Achard](https://dev.to/chrisachard/map-filter-reduce-crash-course-5gan)\n * \xf0\x9f\x93\x9c [Map, Filter and Reduce \xe2\x80\x93 Animated \xe2\x80\x94 JavaScript Teacher](https://medium.com/@js_tut/map-filter-and-reduce-animated-7fe391a35a47)\n * \xf0\x9f\x93\x9c [Map, Filter, Reduce and others Arrays Iterators You Must Know to Become an Algorithms Wizard \xe2\x80\x94 Mauro Bono](https://dev.to/uptheirons78/map-filter-reduce-and-others-arrays-iterators-you-must-know-to-become-an-algorithms-wizard-4209)\n * \xf0\x9f\x93\x9c [How to Use JavaScript\xe2\x80\x99s .map, .filter, and .reduce \xe2\x80\x94 Avery Duffin](https://medium.com/better-programming/how-to-javascripts-map-vs-filter-vs-reduce-80d87a5a0a24)\n\n ### Videos\n\n * \xf0\x9f\x8e\xa5 [Map, Filter and Reduce \xe2\x80\x94 Lydia Hallie](https://www.youtube.com/watch?v=UXiYii0Y7Nw)\n * \xf0\x9f\x8e\xa5 [Functional JavaScript: Map, forEach, Reduce, Filter \xe2\x80\x94 Theodore Anderson](https://www.youtube.com/watch?v=vytzLlY_wmU)\n * \xf0\x9f\x8e\xa5 [JavaScript Array superpowers: Map, Filter, Reduce (part I) \xe2\x80\x94 Michael Rosata](https://www.youtube.com/watch?v=qTeeVd8hOFY)\n * \xf0\x9f\x8e\xa5 [JavaScript Array superpowers: Map, Filter, Reduce (part 2) \xe2\x80\x94 Michael Rosata](https://www.youtube.com/watch?v=gIm9xLYudL0)\n * \xf0\x9f\x8e\xa5 [JavaScript Higher Order Functions - Filter, Map, Sort & Reduce \xe2\x80\x94 Epicop](https://www.youtube.com/watch?v=zYBeEPxNSbw)\n * \xf0\x9f\x8e\xa5 [[Array Methods 2/3] .filter + .map + .reduce \xe2\x80\x94 CodeWithNick](https://www.youtube.com/watch?v=4qWlqD0yYTU)\n * \xf0\x9f\x8e\xa5 [Arrow functions in JavaScript - What, Why and How \xe2\x80\x94 Fun Fun Function](https://www.youtube.com/watch?v=6sQDTgOqh-I)\n * \xf0\x9f\x8e\xa5 [Learning Functional Programming with JavaScript \xe2\x80\x94 Anjana Vakil - JSUnconf](https://www.youtube.com/watch?v=e-5obm1G_FY&t=1521s)\n * \xf0\x9f\x8e\xa5 [Map - Parte 2 JavaScript - Fun Fun Function](https://www.youtube.com/watch?v=bCqtb-Z5YGQ&t=17s)\n * \xf0\x9f\x8e\xa5 [Reduce basics - Part 3 of FP in JavaScript - Fun Fun Function](https://www.youtube.com/watch?v=Wl98eZpkp-c)\n * \xf0\x9f\x8e\xa5 [Reduce Advanced - Part 4 of FP in JavaScript - Fun Fun Function](https://www.youtube.com/watch?v=1DMolJ2FrNY&t=621s)\n\n**[\xe2\xac\x86 Back to Top](#table-of-contents)**\n\n---\n\n## 20. Pure Functions, Side Effects and State Mutation\n\n### Articles\n\n * \xf0\x9f\x93\x9c [Javascript and Functional Programming \xe2\x80\x94 Pure Functions \xe2\x80\x94 Omer Goldberg](https://hackernoon.com/javascript-and-functional-programming-pt-3-pure-functions-d572bb52e21c)\n * \xf0\x9f\x93\x9c [Master the JavaScript Interview: What is a Pure Function? \xe2\x80\x94 Eric Elliott](https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-pure-function-d1c076bec976)\n * \xf0\x9f\x93\x9c [JavaScript: What Are Pure Functions And Why Use Them? \xe2\x80\x94 James Jeffery](https://medium.com/@jamesjefferyuk/javascript-what-are-pure-functions-4d4d5392d49c)\n * \xf0\x9f\x93\x9c [Pure functions in JavaScript \xe2\x80\x94 @nicoespeon](http://www.nicoespeon.com/en/2015/01/pure-functions-javascript/)\n * \xf0\x9f\x93\x9c [Functional Programming: Pure Functions \xe2\x80\x94 Arne Brasseur](https://www.sitepoint.com/functional-programming-pure-functions/)\n * \xf0\x9f\x93\x9c [Pure Functions In Javascript \xe2\x80\x94 Krunal](https://appdividend.com/2017/04/10/pure-functions-in-javascript/)\n * \xf0\x9f\x93\x9c [Making your JavaScript Pure \xe2\x80\x94 Jack Franklin](https://alistapart.com/article/making-your-javascript-pure)\n * \xf0\x9f\x93\x9c [To mutate, or not to mutate, in JavaScript](https://slemgrim.com/mutate-or-not-to-mutate/)\n * \xf0\x9f\x93\x9c [Arrays, Objects and Mutations \xe2\x80\x94 Federico Kn\xc3\xbcssel](https://medium.com/@fknussel/arrays-objects-and-mutations-6b23348b54aa)\n * \xf0\x9f\x93\x9c [The State of Immutability \xe2\x80\x94 Maciej Sikora](https://medium.com/dailyjs/the-state-of-immutability-169d2cd11310)\n * \xf0\x9f\x93\x9c [How to deal with dirty side effects in your pure functional JavaScript \xe2\x80\x94 James Sinclair](https://jrsinclair.com/articles/2018/how-to-deal-with-dirty-side-effects-in-your-pure-functional-javascript/)\n * \xf0\x9f\x93\x9c [Preventing Side Effects in JavaScript \xe2\x80\x94 David Walsh](https://davidwalsh.name/preventing-sideeffects-javascript)\n * \xf0\x9f\x93\x9c [Wielding Pure Functions in JavaScript and Function Composition \xe2\x80\x94 Peleke Sengstacke\n](https://scotch.io/tutorials/wielding-pure-functions-in-javascript-and-function-composition)\n * \xf0\x9f\x93\x9c [JavaScript: Pure Functions \xe2\x80\x94 William S. Vincent](https://wsvincent.com/javascript-pure-functions/)\n * \xf0\x9f\x93\x9c [Functional programming paradigms in modern JavaScript: Pure functions \xe2\x80\x94 Alexander Kondov](https://hackernoon.com/functional-programming-paradigms-in-modern-javascript-pure-functions-797d9abbee1)\n * \xf0\x9f\x93\x9c [Understanding Javascript Mutation and Pure Functions \xe2\x80\x94 Chidume Nnamdi](https://blog.bitsrc.io/understanding-javascript-mutation-and-pure-functions-7231cc2180d3)\n * \xf0\x9f\x93\x9c [Functional-ish JavaScript \xe2\x80\x94 Daniel Brain](https://medium.com/@bluepnume/functional-ish-javascript-205c05d0ed08)\n\n ### Videos\n\n * \xf0\x9f\x8e\xa5 [Pure Functions \xe2\x80\x94 Hexlet](https://www.youtube.com/watch?v=dZ41D6LDSBg)\n * \xf0\x9f\x8e\xa5 [Pure Functions - Functional Programming in JavaScript \xe2\x80\x94 Paul McBride](https://www.youtube.com/watch?v=Jh_Uzqzz_wM)\n * \xf0\x9f\x8e\xa5 [JavaScript Pure Functions \xe2\x80\x94 Seth Alexander](https://www.youtube.com/watch?v=frT3H-eBmPc)\n * \xf0\x9f\x8e\xa5 [JavaScript Pure vs Impure Functions Explained \xe2\x80\x94 Theodore Anderson](https://www.youtube.com/watch?v=AHbRVJzpB54)\n * \xf0\x9f\x8e\xa5 [Pure Functions - Programa\xc3\xa7\xc3\xa3o Funcional: Parte 1 - Fun Fun Function](https://www.youtube.com/watch?v=BMUiFMZr7vk)\n\n**[\xe2\xac\x86 Back to Top](#table-of-contents)**\n\n---\n\n## 21. Closures\n\n### Articles\n\n * \xf0\x9f\x93\x9c [Closures \xe2\x80\x94 MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures)\n * \xf0\x9f\x93\x9c [I never understood JavaScript closures \xe2\x80\x94 Olivier De Meulder](https://medium.com/dailyjs/i-never-understood-javascript-closures-9663703368e8)\n * \xf0\x9f\x93\x9c [Closure \xe2\x80\x94 JavaScript.Info](https://javascript.info/closure)\n * \xf0\x9f\x93\x9c [Understand JavaScript Closures With Ease \xe2\x80\x94 Richard Bovell](http://javascriptissexy.com/understand-javascript-closures-with-ease/)\n * \xf0\x9f\x93\x9c [Understanding JavaScript Closures \xe2\x80\x94 Codesmith](https://codeburst.io/understanding-javascript-closures-da6aab330302)\n * \xf0\x9f\x93\x9c [Understand Closures in JavaScript \xe2\x80\x94 Brandon Morelli](https://codeburst.io/understand-closures-in-javascript-d07852fa51e7)\n * \xf0\x9f\x93\x9c [A simple guide to help you understand closures in JavaScript \xe2\x80\x94 Prashant Ram](https://medium.freecodecamp.org/javascript-closures-simplified-d0d23fa06ba4)\n * \xf0\x9f\x93\x9c [Understanding JavaScript Closures: A Practical Approach \xe2\x80\x94 Paul Upendo](https://scotch.io/tutorials/understanding-javascript-closures-a-practical-approach)\n * \xf0\x9f\x93\x9c [Understanding JavaScript: Closures \xe2\x80\x94 Alexander Kondov](https://hackernoon.com/understanding-javascript-closures-4188edf5ea1b)\n * \xf0\x9f\x93\x9c [How to use JavaScript closures with confidence \xe2\x80\x94 L\xc3\xa9na Faure](https://hackernoon.com/how-to-use-javascript-closures-with-confidence-85cd1f841a6b)\n * \xf0\x9f\x93\x9c [JavaScript closures by example \xe2\x80\x94 tyler](https://howchoo.com/g/mge2mji2mtq/javascript-closures-by-example)\n * \xf0\x9f\x93\x9c [JavaScript\xe2\x80\x8a\xe2\x80\x94\xe2\x80\x8aClosures and Scope \xe2\x80\x94 Alex Aitken](https://codeburst.io/javascript-closures-and-scope-3784c75b9290)\n * \xf0\x9f\x93\x9c [Discover the power of closures in JavaScript\xe2\x80\x8a\xe2\x80\x94\xe2\x80\x8aCristi Salcescu](https://medium.freecodecamp.org/discover-the-power-of-closures-in-javascript-5c472a7765d7)\n * \xf0\x9f\x93\x9c [Simplified JavaScript: Getting Started with Closures\xe2\x80\x8a\xe2\x80\x94\xe2\x80\x8aCode Like A Girl](https://code.likeagirl.io/simplified-javascript-getting-started-with-closures-f40f65317d00)\n * \xf0\x9f\x93\x9c [The Ultimate Guide to Hoisting, Scopes, and Closures in JavaScript\xe2\x80\x8a\xe2\x80\x94\xe2\x80\x8aTyler McGinnis](https://tylermcginnis.com/ultimate-guide-to-execution-contexts-hoisting-scopes-and-closures-in-javascript/)\n * \xf0\x9f\x93\x9c [Getting Closure\xe2\x80\x8a\xe2\x80\x94\xe2\x80\x8aRealLifeJS](http://reallifejs.com/the-meat/getting-closure/)\n * \xf0\x9f\x93\x9c [Understanding Closures in JavaScript\xe2\x80\x8a\xe2\x80\x94\xe2\x80\x8aSukhjinder Arora](https://blog.bitsrc.io/a-beginners-guide-to-closures-in-javascript-97d372284dda)\n * \xf0\x9f\x93\x9c [A basic guide to Closures in JavaScript\xe2\x80\x8a\xe2\x80\x94\xe2\x80\x8aParathan Thiyagalingam](https://medium.freecodecamp.org/a-basic-guide-to-closures-in-javascript-9fc8b7e3463e)\n * \xf0\x9f\x93\x9c [Closures: Using Memoization\xe2\x80\x8a\xe2\x80\x94\xe2\x80\x8aBrian Barbour](https://dev.to/steelvoltage/closures-using-memoization-3597)\n * \xf0\x9f\x93\x9c [A Brief Introduction to Closures and Lexical Scoping in JavaScript\xe2\x80\x8a\xe2\x80\x94\xe2\x80\x8aAshutosh K Singh\n](https://medium.com/better-programming/a-brief-introduction-to-closures-and-lexical-scoping-in-javascript-8a5866496232)\n * \xf0\x9f\x93\x9c [Demystify Closures\xe2\x80\x8a\xe2\x80\x94\xe2\x80\x8astereobooster](https://dev.to/stereobooster/demystify-closures-5g42)\n\n ### Videos\n\n * \xf0\x9f\x8e\xa5 [Javascript Closure \xe2\x80\x94 techsith](https://www.youtube.com/watch?v=71AtaJpJHw0)\n * \xf0\x9f\x8e\xa5 [Closures \xe2\x80\x94 Fun Fun Function](https://www.youtube.com/watch?v=CQqwU2Ixu-U)\n * \xf0\x9f\x8e\xa5 [Closures in JavaScript \xe2\x80\x94 techsith](https://www.youtube.com/watch?v=-xqJo5VRP4A)\n * \xf0\x9f\x8e\xa5 [JavaScript Closures 101: What is a closure? \xe2\x80\x94 JavaScript Tutorials](https://www.youtube.com/watch?v=yiEeiMN2Khs)\n * \xf0\x9f\x8e\xa5 [Closures \xe2\x80\x94 freeCodeCamp](https://www.youtube.com/watch?v=1JsJx1x35c0)\n * \xf0\x9f\x8e\xa5 [JavaScript Closures \xe2\x80\x94 CodeWorkr](https://www.youtube.com/watch?v=-rLrGAXK8WE)\n\n**[\xe2\xac\x86 Back to Top](#table-of-contents)**\n\n---\n\n## 22. High Order Functions\n\n### Articles\n\n * \xf0\x9f\x93\x9c [Higher-Order Functions \xe2\x80\x94 Eloquent JavaScript [Book]](https://eloquentjavascript.net/05_higher_order.html)\n * \xf0\x9f\x93\x9c [Higher-Order Functions in JavaScript \xe2\x80\x94 M. David Green](https://www.sitepoint.com/higher-order-functions-javascript/)\n * \xf0\x9f\x93\x9c [Higher Order Functions: Using Filter, Map and Reduce for More Maintainable Code \xe2\x80\x94 Guido Schmitz](https://medium.freecodecamp.org/higher-order-functions-in-javascript-d9101f9cf528)\n * \xf0\x9f\x93\x9c [First-class and Higher Order Functions: Effective Functional JavaScript \xe2\x80\x94 Hugo Di Francesco](https://hackernoon.com/effective-functional-javascript-first-class-and-higher-order-functions-713fde8df50a)\n * \xf0\x9f\x93\x9c [Higher Order Functions in JavaScript \xe2\x80\x94 John Hannah](https://www.lullabot.com/articles/higher-order-functions-in-javascript)\n * \xf0\x9f\x93\x9c [Higher-order Functions \xe2\x80\x94 Richard Bovell](http://javascriptissexy.com/tag/higher-order-functions/)\n * \xf0\x9f\x93\x9c [Higher Order Functions in JavaScript \xe2\x80\x94 Zsolt Nagy](http://www.zsoltnagy.eu/higher-order-functions-in-javascript/)\n * \xf0\x9f\x93\x9c [Fun With Higher Order Functions In JavaScript \xe2\x80\x94 Derick](https://derickbailey.com/2015/10/21/fun-with-higher-order-functions-in-javascript/)\n * \xf0\x9f\x93\x9c [Just a reminder on how to use high order functions \xe2\x80\x94 Pedro Filho](https://github.com/pedroapfilho/high-order-functions)\n * \xf0\x9f\x93\x9c [Understanding Higher-Order Functions in JavaScript \xe2\x80\x94 Sukhjinder Arora](https://blog.bitsrc.io/understanding-higher-order-functions-in-javascript-75461803bad)\n\n ### Videos\n\n * \xf0\x9f\x8e\xa5 [JavaScript Higher Order Functions & Arrays \xe2\x80\x94 Traversy Media](https://www.youtube.com/watch?v=rRgD1yVwIvE)\n * \xf0\x9f\x8e\xa5 [Higher Order Functions \xe2\x80\x94 Fun Fun Function](https://www.youtube.com/watch?v=BMUiFMZr7vk)\n * \xf0\x9f\x8e\xa5 [Higher Order Functions in Javascript \xe2\x80\x94 Raja Yogan](https://www.youtube.com/watch?v=dTlpYnmBW9I)\n * \xf0\x9f\x8e\xa5 [Higher Order Iterators in JavaScript \xe2\x80\x94 Fun Fun Function](https://www.youtube.com/watch?v=GYRMNp1SKXA)\n * \xf0\x9f\x8e\xa5 [Higher Order Functions in JavaScript \xe2\x80\x94 The Coding Train](https://www.youtube.com/watch?v=H4awPsyugS0)\n * \xf0\x9f\x8e\xa5 [Part 1: An Introduction to Callbacks and Higher Order Functions - Codesmith](https://www.youtube.com/watch?v=7E8ctomPQJw)\n * \xf0\x9f\x8e\xa5 [Part 2: Understanding Why We Need Higher Order Functions - Codesmith](https://www.youtube.com/watch?v=28MXziDZkE4)\n\n**[\xe2\xac\x86 Back to Top](#table-of-contents)**\n\n---\n\n## 23. Recursion\n\n### Articles\n\n * \xf0\x9f\x93\x9c [Recursion in JavaScript \xe2\x80\x94 Kevin Ennis](https://medium.freecodecamp.org/recursion-in-javascript-1608032c7a1f)\n * \xf0\x9f\x93\x9c [Understanding Recursion in JavaScript \xe2\x80\x94 Zak Frisch](https://medium.com/@zfrisch/understanding-recursion-in-javascript-992e96449e03)\n * \xf0\x9f\x93\x9c [Learn and Understand Recursion in JavaScript \xe2\x80\x94 Brandon Morelli](https://codeburst.io/learn-and-understand-recursion-in-javascript-b588218e87ea)\n * \xf0\x9f\x93\x9c [Recursion in Functional JavaScript \xe2\x80\x94 M. David Green](https://www.sitepoint.com/recursion-functional-javascript/)\n * \xf0\x9f\x93\x9c [Programming with JS: Recursion \xe2\x80\x94 Alexander Kondov](https://hackernoon.com/programming-with-js-recursion-31371e2bf808)\n * \xf0\x9f\x93\x9c [Anonymous Recursion in JavaScript \xe2\x80\x94 simo](https://dev.to/simov/anonymous-recursion-in-javascript)\n * \xf0\x9f\x93\x9c [Recursion, iteration and tail calls in JS \xe2\x80\x94 loverajoel](http://www.jstips.co/en/javascript/recursion-iteration-and-tail-calls-in-js/)\n * \xf0\x9f\x93\x9c [Understanding Recursion in JavaScript with Confidence \xe2\x80\x94 Jay](https://www.thecodingdelight.com/understanding-recursion-javascript/)\n * \xf0\x9f\x93\x9c [Intro to Recursion \xe2\x80\x94 Brad Newman](https://medium.com/@newmanbradm/intro-to-recursion-984a8bd50f4b)\n * \xf0\x9f\x93\x9c [Accio Recursion!: Your New Favorite JavaScript Spell \xe2\x80\x94 Leanne Cabey](https://medium.com/datadriveninvestor/accio-recursion-your-new-favorite-javascript-spell-7e10d3125fb3)\n\n ### Videos\n\n * \xf0\x9f\x8e\xa5 [Recursion In JavaScript \xe2\x80\x94 techsith](https://www.youtube.com/watch?v=VtG0WAUvq2w)\n * \xf0\x9f\x8e\xa5 [Recursion \xe2\x80\x94 Fun Fun Function](https://www.youtube.com/watch?v=k7-N8R0-KY4)\n * \xf0\x9f\x8e\xa5 [Recursion and Recursive Functions \xe2\x80\x94 Hexlet](https://www.youtube.com/watch?v=vLhHyGTkjCs)\n * \xf0\x9f\x8e\xa5 [Recursion: Recursion() \xe2\x80\x94 JS Monthly \xe2\x80\x94 Lucas da Costa](https://www.youtube.com/watch?v=kGXVsd8pBLw)\n * \xf0\x9f\x8e\xa5 [Recursive Function in JavaScript \xe2\x80\x94 kudvenkat](https://www.youtube.com/watch?v=uyjsR9eNTIw)\n * \xf0\x9f\x8e\xa5 [What on Earth is Recursion? \xe2\x80\x94 Computerphile](https://www.youtube.com/watch?v=Mv9NEXX1VHc)\n * \xf0\x9f\x8e\xa5 [Javascript Tutorial 34: Introduction To Recursion \xe2\x80\x94 codedamn](https://www.youtube.com/watch?v=9NO5dXSlbv8)\n * \xf0\x9f\x8e\xa5 [Recursion, Iteration, and JavaScript: A Love Story | JSHeroes 2018 \xe2\x80\x94 Anjana Vakil](https://www.youtube.com/watch?v=FmiQr4nfoPQ)\n\n**[\xe2\xac\x86 Back to Top](#table-of-contents)**\n\n---\n\n## 24. Collections and Generators\n\n### Articles\n\n * \xf0\x9f\x93\x9c [ES6 In Depth: Collections \xe2\x80\x94 Jason Orendorff](https://hacks.mozilla.org/2015/06/es6-in-depth-collections/)\n * \xf0\x9f\x93\x9c [ES6 Collections: Using Map, Set, WeakMap, WeakSet \xe2\x80\x94 Kyle Pennell](https://www.sitepoint.com/es6-collections-map-set-weakmap-weakset/)\n * \xf0\x9f\x93\x9c [ES6 WeakMaps, Sets, and WeakSets in Depth \xe2\x80\x94 Nicol\xc3\xa1s Bevacqua](https://ponyfoo.com/articles/es6-weakmaps-sets-and-weaksets-in-depth)\n * \xf0\x9f\x93\x9c [Introduction to Sets in JavaScript \xe2\x80\x94 Alligator.io](https://alligator.io/js/sets-introduction/)\n * \xf0\x9f\x93\x9c [Introduction to Maps in JavaScript \xe2\x80\x94 Alligator.io](https://alligator.io/js/maps-introduction/)\n * \xf0\x9f\x93\x9c [Map, Set, WeakMap and WeakSet \xe2\x80\x94 JavaScript.Info](https://javascript.info/map-set-weakmap-weakset)\n * \xf0\x9f\x93\x9c [Maps in ES6 - A Quick Guide \xe2\x80\x94 Ben Mildren](https://dev.to/mildrenben/maps-in-es6---a-quick-guide-35pk)\n * \xf0\x9f\x93\x9c [ES6 \xe2\x80\x94 Set vs Array \xe2\x80\x94 What and when? \xe2\x80\x94 Maya Shavin](https://medium.com/front-end-hacking/es6-set-vs-array-what-and-when-efc055655e1a)\n * \xf0\x9f\x93\x9c [ES6 \xe2\x80\x94 Map vs Object \xe2\x80\x94 What and when? \xe2\x80\x94 Maya Shavin](https://medium.com/front-end-hacking/es6-map-vs-object-what-and-when-b80621932373)\n * \xf0\x9f\x93\x9c [ES6: Working with Sets in JavaScript \xe2\x80\x94 Dead Code Rising](http://www.deadcoderising.com/es6-working-with-sets-in-javascript/)\n * \xf0\x9f\x93\x9c [Array vs Set vs Map vs Object \xe2\x80\x94 Real-time use cases in Javascript (ES6/ES7) \xe2\x80\x94 Rajesh Babu](https://codeburst.io/array-vs-set-vs-map-vs-object-real-time-use-cases-in-javascript-es6-47ee3295329b)\n * \xf0\x9f\x93\x9c [How to create an array of unique values in JavaScript using Sets \xe2\x80\x94 Claire Parker-Jones](https://dev.to/claireparker/how-to-create-an-array-of-unique-values-in-javascript-using-sets-5dg6)\n * \xf0\x9f\x93\x9c [What You Should Know About ES6 Maps \xe2\x80\x94 Just Chris](https://hackernoon.com/what-you-should-know-about-es6-maps-dc66af6b9a1e)\n * \xf0\x9f\x93\x9c [ES6 Maps in Depth \xe2\x80\x94 Nicol\xc3\xa1s Bevacqua](https://ponyfoo.com/articles/es6-maps-in-depth)\n * \xf0\x9f\x93\x9c [Generator \xe2\x80\x94 MDN web docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator)\n * \xf0\x9f\x93\x9c [What are JavaScript Generators and how to use them \xe2\x80\x94 Vladislav Stepanov](https://codeburst.io/what-are-javascript-generators-and-how-to-use-them-c6f2713fd12e)\n * \xf0\x9f\x93\x9c [Understanding JavaScript Generators With Examples  \xe2\x80\x94 Arfat Salman](https://codeburst.io/understanding-generators-in-es6-javascript-with-examples-6728834016d5)\n * \xf0\x9f\x93\x9c [The Basics of ES6 Generators \xe2\x80\x94 Kyle Simpson](https://davidwalsh.name/es6-generators)\n * \xf0\x9f\x93\x9c [Here\'s everything you\'d want to know about ES2015+ generators \xe2\x80\x94 Lucas Chen](https://dev.to/parkroolucas/here-s-everything-you-d-want-to-know-about-es2015-generators-13an)\n\n\n\n ### Videos\n\n * \xf0\x9f\x8e\xa5 [JavaScript ES6 / ES2015 Set, Map, WeakSet and WeakMap \xe2\x80\x94 Traversy Media](https://www.youtube.com/watch?v=ycohYSx5h9w)\n * \xf0\x9f\x8e\xa5 [The Differences between ES6 Maps and Sets \xe2\x80\x94 Steve Griffith](https://www.youtube.com/watch?v=m4abICrldQI)\n * \xf0\x9f\x8e\xa5 [Javascript Generators - THEY CHANGE EVERYTHING - ES6 Generators Harmony Generators \xe2\x80\x94 LearnCode.academy](https://www.youtube.com/watch?v=QO07THdLWQo)\n\n**[\xe2\xac\x86 Back to Top](#table-of-contents)**\n\n---\n\n## 25. Promises\n\n### Articles\n\n * \xf0\x9f\x93\x9c [Promise \xe2\x80\x94 MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\n * \xf0\x9f\x93\x9c [JavaScript Promises for Dummies \xe2\x80\x95 Jecelyn Yeen](https://scotch.io/tutorials/javascript-promises-for-dummies)\n * \xf0\x9f\x93\x9c [Understanding promises in JavaScript \xe2\x80\x94 Gokul N K](https://hackernoon.com/understanding-promises-in-javascript-13d99df067c1)\n * \xf0\x9f\x93\x9c [Master the JavaScript Interview: What is a Promise? \xe2\x80\x94 Eric Elliott](https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-promise-27fc71e77261)\n * \xf0\x9f\x93\x9c [An Overview of JavaScript Promises \xe2\x80\x94 Sandeep Panda](https://www.sitepoint.com/overview-javascript-promises/)\n * \xf0\x9f\x93\x9c [How to use Promises in JavaScript \xe2\x80\x94 Prashant Ram](https://medium.freecodecamp.org/promises-in-javascript-explained-277b98850de)\n * \xf0\x9f\x93\x9c [Implementing Promises In JavaScript \xe2\x80\x94 Maciej Cieslar](https://medium.freecodecamp.org/how-to-implement-promises-in-javascript-1ce2680a7f51)\n * \xf0\x9f\x93\x9c [JavaScript: Promises explained with simple real life analogies \xe2\x80\x94 Shruti Kapoor](https://codeburst.io/javascript-promises-explained-with-simple-real-life-analogies-dd6908092138)\n * \xf0\x9f\x93\x9c [Promises for Asynchronous Programming \xe2\x80\x94 Exploring JS](http://exploringjs.com/es6/ch_promises.html)\n * \xf0\x9f\x93\x9c [JavaScript Promises Explained By Gambling At A Casino \xe2\x80\x94 Kevin Kononenko](https://blog.codeanalogies.com/2018/08/26/javascript-promises-explained-by-gambling-at-a-casino/)\n * \xf0\x9f\x93\x9c [ES6 Promises: Patterns and Anti-Patterns \xe2\x80\x94 Bobby Brennan](https://medium.com/datafire-io/es6-promises-patterns-and-anti-patterns-bbb21a5d0918)\n * \xf0\x9f\x93\x9c [A Simple Guide to ES6 Promises \xe2\x80\x94 Brandon Morelli](https://codeburst.io/a-simple-guide-to-es6-promises-d71bacd2e13a)\n * \xf0\x9f\x93\x9c [The ES6 Promises \xe2\x80\x94 Manoj Singh Negi](https://codeburst.io/the-es6-promises-87a979ab27e4)\n * \xf0\x9f\x93\x9c [ES6 Promises in Depth \xe2\x80\x94 Nicol\xc3\xa1s Bevacqua](https://ponyfoo.com/articles/es6-promises-in-depth)\n * \xf0\x9f\x93\x9c [Playing with Javascript Promises: A Comprehensive Approach \xe2\x80\x94 Rajesh Babu](https://codeburst.io/playing-with-javascript-promises-a-comprehensive-approach-25ab752c78c3)\n * \xf0\x9f\x93\x9c [How to Write a JavaScript Promise \xe2\x80\x94 Brandon Wozniewicz](https://medium.freecodecamp.org/how-to-write-a-javascript-promise-4ed8d44292b8)\n * \xf0\x9f\x93\x9c [A Coding Writer\xe2\x80\x99s Guide: An Introduction To ES6 Promises \xe2\x80\x94 Andrew Ly](https://medium.com/@andrewly07/a-coding-writers-guide-an-introduction-to-es6-promises-9ff9f9e88f6c)\n * \xf0\x9f\x93\x9c [Asynchronous JavaScript | Callbacks | Closures | Promises \xe2\x80\x94 Full Stack Geek](https://dev.to/full_stackgeek/asynchronous-javascript-callbacks-closures-promises-353h)\n * \xf0\x9f\x93\x9c [Understanding Promises in JavaScript \xe2\x80\x94 Chris Noring](https://dev.to/itnext/reverse-engineering-understand-promises-1jfc)\n * \xf0\x9f\x93\x9c [Converting callbacks to promises \xe2\x80\x94 Zell Liew](https://dev.to/zellwk/converting-callbacks-to-promises-nhn)\n * \xf0\x9f\x93\x9c [JavaScript Promises: Zero To Hero Plus Cheat Sheet \xe2\x80\x94 Joshua Saunders](https://medium.com/dailyjs/javascript-promises-zero-to-hero-plus-cheat-sheet-64d75051cffa)\n\n ### Videos\n\n * \xf0\x9f\x8e\xa5 [Let\'s Learn ES6 - Promises \xe2\x80\x94 Ryan Christiani](https://www.youtube.com/watch?v=vQ3MoXnKfuQ)\n * \xf0\x9f\x8e\xa5 [JavaScript ES6 / ES2015 Promises \xe2\x80\x94 Traversy Media](https://www.youtube.com/watch?v=XJEHuBZQ5dU)\n * \xf0\x9f\x8e\xa5 [Promises \xe2\x80\x94 Fun Fun Function](https://www.youtube.com/watch?v=2d7s3spWAzo)\n * \xf0\x9f\x8e\xa5 [Error Handling Promises in JavaScript \xe2\x80\x94 Fun Fun Function](https://www.youtube.com/watch?v=f8IgdnYIwOU)\n * \xf0\x9f\x8e\xa5 [Promises Part 1 - Topics of JavaScript/ES6 \xe2\x80\x94 The Coding Train](https://www.youtube.com/watch?v=QO4NXhWo_NM)\n\n**[\xe2\xac\x86 Back to Top](#table-of-contents)**\n\n---\n\n## 26. async/await\n\n### Articles\n\n * \xf0\x9f\x93\x9c [async/await \xe2\x80\x94 JavaScript.Info](https://javascript.info/async-await)\n * \xf0\x9f\x93\x9c [Understanding async/await in Javascript \xe2\x80\x94 Gokul N K](https://hackernoon.com/understanding-async-await-in-javascript-1d81bb079b2c)\n * \xf0\x9f\x93\x9c [Asynchronous Programming \xe2\x80\x94 Eloquent JavaScript](https://eloquentjavascript.net/11_async.html)\n * \xf0\x9f\x93\x9c [Exploring Async/Await Functions in JavaScript \xe2\x80\x94 Alligator.io](https://alligator.io/js/async-functions/)\n * \xf0\x9f\x93\x9c [Asynchronous Javascript using async/await \xe2\x80\x94 Joy Warugu](https://scotch.io/tutorials/asynchronous-javascript-using-async-await)\n * \xf0\x9f\x93\x9c [Modern Asynchronous JavaScript with async/await \xe2\x80\x94 Flavio Copes](https://flaviocopes.com/javascript-async-await/)\n * \xf0\x9f\x93\x9c [Asynchronous JavaScript: From Callback Hell to Async and Await \xe2\x80\x94 Demir Selmanovic](https://www.toptal.com/javascript/asynchronous-javascript-async-await-tutorial)\n * \xf0\x9f\x93\x9c [Javascript \xe2\x80\x94 ES8 Introducing async/await Functions \xe2\x80\x94 Ben Garrison](https://medium.com/@_bengarrison/javascript-es8-introducing-async-await-functions-7a471ec7de8a)\n * \xf0\x9f\x93\x9c [How to escape async/await hell \xe2\x80\x94 Aditya Agarwal](https://medium.freecodecamp.org/avoiding-the-async-await-hell-c77a0fb71c4c)\n * \xf0\x9f\x93\x9c [Understanding JavaScript\xe2\x80\x99s async await \xe2\x80\x94 Nicol\xc3\xa1s Bevacqua](https://ponyfoo.com/articles/understanding-javascript-async-await)\n * \xf0\x9f\x93\x9c [JavaScript Async/Await: Serial, Parallel and Complex Flow \xe2\x80\x94 TechBrij](https://techbrij.com/javascript-async-await-parallel-sequence)\n * \xf0\x9f\x93\x9c [Asynchronous Programming \xe2\x80\x94 Exploring JS](http://exploringjs.com/es6/ch_async.html)\n * \xf0\x9f\x93\x9c [From JavaScript Promises to Async/Await: why bother? \xe2\x80\x94 Chris Nwamba](https://blog.pusher.com/promises-async-await/)\n * \xf0\x9f\x93\x9c [Flow Control in Modern JS: Callbacks to Promises to Async/Await \xe2\x80\x94 Craig Buckler](https://www.sitepoint.com/flow-control-callbacks-promises-async-await/)\n * \xf0\x9f\x93\x9c [JavaScript: Promises and Why Async/Await Wins the Battle \xe2\x80\x94 Nick Parsons](https://dzone.com/articles/javascript-promises-and-why-asyncawait-wins-the-ba)\n * \xf0\x9f\x93\x9c [How To Master Async/Await With This Real World Example \xe2\x80\x94 Adrian Hajdin](https://medium.freecodecamp.org/how-to-master-async-await-with-this-real-world-example-19107e7558ad)\n * \xf0\x9f\x93\x9c [How to improve your asynchronous Javascript code with async and await \xe2\x80\x94 Indrek Lasn](https://medium.freecodecamp.org/improve-your-asynchronous-javascript-code-with-async-and-await-c02fc3813eda)\n * \xf0\x9f\x93\x9c [Making Fetches Easy With Async Await \xe2\x80\x94 Mickey Sheridan](https://medium.com/@micksheridan.24/making-fetches-easy-with-async-await-8a1246efa1f6)\n * \xf0\x9f\x93\x9c [7 Reasons Why JavaScript Async/Await Is Better Than Plain Promises \xe2\x80\x94 Mostafa Gaafar](https://dev.to/gafi/7-reasons-to-always-use-async-await-over-plain-promises-tutorial-4ej9)\n * \xf0\x9f\x93\x9c [Asynchronous Operations in JavaScript \xe2\x80\x94 Jscrambler(https://dev.to/jscrambler/asynchronous-operations-in-javascript-2p6b)\n * \xf0\x9f\x93\x9c [Async/await: A slight design flaw. \xe2\x80\x94 Joey(https://dev.to/joeyhub/async-await-a-slight-design-flaw-2h2j)\n\n ### Videos\n\n * \xf0\x9f\x8e\xa5 [Async + Await \xe2\x80\x94 Wes Bos](https://www.youtube.com/watch?v=9YkUCxvaLEk)\n * \xf0\x9f\x8e\xa5 [Asynchrony: Under the Hood \xe2\x80\x94 Shelley Vohr](https://www.youtube.com/watch?v=SrNQS8J67zc)\n * \xf0\x9f\x8e\xa5 [async/await in JavaScript - What, Why and How \xe2\x80\x94 Fun Fun Function](https://www.youtube.com/watch?v=568g8hxJJp4&index=3&list=PL0zVEGEvSaeHJppaRLrqjeTPnCH6)\n * \xf0\x9f\x8e\xa5 [async/await Part 1 - Topics of JavaScript/ES8 \xe2\x80\x94 The Coding Train](https://www.youtube.com/watch?v=XO77Fib9tSI&index=3&list=PLRqwX-V7Uu6bKLPQvPRNNE65kBL62mVfx)\n * \xf0\x9f\x8e\xa5 [async/await Part 2 - Topics of JavaScript/ES8 \xe2\x80\x94 The Coding Train](https://www.youtube.com/watch?v=chavThlNz3s&index=4&list=PLRqwX-V7Uu6bKLPQvPRNNE65kBL62mVfx)\n  * \xf0\x9f\x8e\xa5 [Complete Guide to JS Async & Await ES2017/ES8 \xe2\x80\x94 Colt Steele](https://www.youtube.com/watch?v=krAYA4rvbdA)\n\n**[\xe2\xac\x86 Back to Top](#table-of-contents)**\n\n---\n\n## 27. Data Structures\n\n### Articles\n\n * \xf0\x9f\x93\x9c [Data Structures in JavaScript \xe2\x80\x94 Thon Ly](https://medium.com/siliconwat/data-structures-in-javascript-1b9aed0ea17c)\n * \xf0\x9f\x93\x9c [Algorithms and Data Structures in JavaScript \xe2\x80\x94 Oleksii Trekhleb](https://itnext.io/algorithms-and-data-structures-in-javascript-a71548f902cb)\n * \xf0\x9f\x93\x9c [Data Structures: Objects and Arrays \xe2\x80\x95 Chris Nwamba](https://scotch.io/courses/10-need-to-know-javascript-concepts/data-structures-objects-and-arrays)\n * \xf0\x9f\x93\x9c [Data structures in JavaScript \xe2\x80\x94 Benoit Vallon](http://blog.benoitvallon.com/data-structures-in-javascript/data-structures-in-javascript/)\n * \xf0\x9f\x93\x9c [Playing with Data Structures in Javascript \xe2\x80\x94 Anish K.](https://blog.cloudboost.io/playing-with-data-structures-in-javascript-stack-a55ebe50f29d)\n * \xf0\x9f\x93\x9c [The Little Guide of Queue in JavaScript \xe2\x80\x94 Germ\xc3\xa1n Cutraro](https://hackernoon.com/the-little-guide-of-queue-in-javascript-4f67e79260d9)\n * \xf0\x9f\x93\x9c [All algorithms writing with JavaScript in the book \'Algorithms Fourth Edition\'](https://github.com/barretlee/algorithms)\n * \xf0\x9f\x93\x9c [Collection of classic computer science paradigms in JavaScript](https://github.com/nzakas/computer-science-in-javascript)\n * \xf0\x9f\x93\x9c [All the things you didn\'t know you wanted to know about data structures](https://github.com/jamiebuilds/itsy-bitsy-data-structures)\n * \xf0\x9f\x93\x9c [JavaScript Data Structures: Singly Linked List: Setup \xe2\x80\x94 miku86](https://dev.to/miku86/javascript-data-structures-singly-linked-list-setup-4950)\n\n ### Videos\n\n * \xf0\x9f\x8e\xa5 [Algorithms in JavaScript \xe2\x80\x94 Seth Koch](https://www.youtube.com/watch?v=PylQlISSH8U&list=PLujX4CIdBGCa-65N3uN8CDbUMrYsHBrz-)\n * \xf0\x9f\x8e\xa5 [Algorithms In Javascript | Ace Your Interview \xe2\x80\x94 Eduonix Learning Solutions](https://www.youtube.com/watch?v=H_EBPZgiAas&list=PLDmvslp_VR0zYUSth_8O69p4_cmvZEgLa)\n * \xf0\x9f\x8e\xa5 [Data Structures and Algorithms in JavaScript \xe2\x80\x94 freeCodeCamp](https://www.youtube.com/watch?v=Gj5qBheGOEo&list=PLWKjhJtqVAbkso-IbgiiP48n-O-JQA9PJ)\n * \xf0\x9f\x8e\xa5 [Learning JavaScript Data Structures and Algorithms: Sorting \xe2\x80\x94 Packt Video](https://www.youtube.com/watch?v=Ymh_AurrMbA)\n\n**[\xe2\xac\x86 Back to Top](#table-of-contents)**\n\n---\n\n## 28. Expensive Operation and Big O Notation\n\n### Articles\n\n * \xf0\x9f\x93\x9c [Big O Notation in Javascript \xe2\x80\x94 C\xc3\xa9sar Ant\xc3\xb3n Dorantes](https://medium.com/cesars-tech-insights/big-o-notation-javascript-25c79f50b19b)\n * \xf0\x9f\x93\x9c [Time Complexity/Big O Notation \xe2\x80\x94 Tim Roberts](https://medium.com/javascript-scene/time-complexity-big-o-notation-1a4310c3ee4b)\n * \xf0\x9f\x93\x9c [Big O in JavaScript \xe2\x80\x94 Gabriela Medina](https://medium.com/@gmedina229/big-o-in-javascript-36ff67766051)\n * \xf0\x9f\x93\x9c [Big O Search Algorithms in JavaScript \xe2\x80\x94 Bradley Braithwaite](http://www.bradoncode.com/blog/2012/04/big-o-algorithm-examples-in-javascript.html)\n * \xf0\x9f\x93\x9c [Time Complexity Analysis in JavaScript \xe2\x80\x94 Jennifer Bland](https://www.jenniferbland.com/time-complexity-analysis-in-javascript/)\n * \xf0\x9f\x93\x9c [Algorithms in plain English: time complexity and Big-O Notation \xe2\x80\x94 Michael Olorunnisola](https://medium.freecodecamp.org/time-is-complex-but-priceless-f0abd015063c)\n\n### Videos\n\n * \xf0\x9f\x8e\xa5 [JavaScript: Intro to Big O Notation and Function Runtime \xe2\x80\x94 Eric Traub](https://www.youtube.com/watch?v=HgA5VOFan5E)\n * \xf0\x9f\x8e\xa5 [Essential Big O for JavaScript Developers \xe2\x80\x94 Dave Smith](https://www.youtube.com/watch?v=KatlvCFHPRo)\n * \xf0\x9f\x8e\xa5 [Big O Notation - Time Complexity Analysis \xe2\x80\x94 WebTunings](https://www.youtube.com/watch?v=ALl86xJiTD8)\n\n**[\xe2\xac\x86 Back to Top](#table-of-contents)**\n\n---\n\n## 29. Algorithms\n\n### Articles\n\n * \xf0\x9f\x93\x9c [Data Structures and Algorithms using ES6](https://github.com/Crizstian/data-structure-and-algorithms-with-ES6)\n * \xf0\x9f\x93\x9c [Algorithms and data structures implemented in JavaScript with explanations and links to further readings](https://github.com/trekhleb/javascript-algorithms)\n * \xf0\x9f\x93\x9c [JS: Interview Algorithm](http://www.thatjsdude.com/interview/js1.html)\n * \xf0\x9f\x93\x9c [Algorithms in JavaScript \xe2\x80\x94 Thon Ly](https://medium.com/siliconwat/algorithms-in-javascript-b0bed68f4038)\n * \xf0\x9f\x93\x9c [JavaScript Objects, Square Brackets and Algorithms \xe2\x80\x94 Dmitri Grabov](https://medium.freecodecamp.org/javascript-objects-square-brackets-and-algorithms-e9a2916dc158)\n * \xf0\x9f\x93\x9c [Atwood\'s Law applied to CS101 - Classic algorithms and data structures implemented in JavaScript](https://github.com/felipernb/algorithms.js)\n * \xf0\x9f\x93\x9c [Data Structures and Algorithms library in JavaScript](https://github.com/yangshun/lago)\n * \xf0\x9f\x93\x9c [Collection of computer science algorithms and data structures written in JavaScript](https://github.com/idosela/algorithms-in-javascript)\n\n**[\xe2\xac\x86 Back to Top](#table-of-contents)**\n\n---\n\n## 30. Inheritance, Polymorphism and Code Reuse\n\n### Articles\n\n * \xf0\x9f\x93\x9c [Class inheritance, super \xe2\x80\x94 JavaScript.Info](https://javascript.info/class-inheritance)\n * \xf0\x9f\x93\x9c [Inheritance in JavaScript \xe2\x80\x94 MDN](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Inheritance)\n * \xf0\x9f\x93\x9c [Inheritance in JavaScript \xe2\x80\x94 Rupesh Mishra](https://hackernoon.com/inheritance-in-javascript-21d2b82ffa6f)\n * \xf0\x9f\x93\x9c [Simple Inheritance with JavaScript \xe2\x80\x94 David Catuhe](https://www.sitepoint.com/simple-inheritance-javascript/)\n * \xf0\x9f\x93\x9c [JavaScript \xe2\x80\x94 Inheritance, delegation patterns and Object linking \xe2\x80\x94 NC Patro](https://codeburst.io/javascript-inheritance-25fe61ab9f85)\n * \xf0\x9f\x93\x9c [Object Oriented JavaScript: Polymorphism with examples \xe2\x80\x94 Knoldus Blogs](https://blog.knoldus.com/object-oriented-javascript-polymorphism-with-examples/)\n * \xf0\x9f\x93\x9c [Program Like Proteus \xe2\x80\x94 A beginner\xe2\x80\x99s guide to polymorphism in Javascript \xe2\x80\x94 Sam Galson](https://medium.com/yld-engineering-blog/program-like-proteus-a-beginners-guide-to-polymorphism-in-javascript-867bea7c8be2)\n * \xf0\x9f\x93\x9c [Object-oriented JavaScript: A Deep Dive into ES6 Classes \xe2\x80\x94 Jeff Mott](https://www.sitepoint.com/object-oriented-javascript-deep-dive-es6-classes/)\n\n  ### Videos\n\n * \xf0\x9f\x8e\xa5 [Inheritance in JavaScript \xe2\x80\x94 kudvenkat](https://www.youtube.com/watch?v=yXlFR81tDBM)\n * \xf0\x9f\x8e\xa5 [JavaScript ES6 Classes and Inheritance \xe2\x80\x94 Traversy Media](https://www.youtube.com/watch?v=RBLIm5LMrmc)\n * \xf0\x9f\x8e\xa5 [Polymorphism in JavaScript \xe2\x80\x94 kudvenkat](https://www.youtube.com/watch?v=zdovG9cuEBA)\n\n**[\xe2\xac\x86 Back to Top](#table-of-contents)**\n\n---\n\n## 31. Design Patterns\n\n### Articles\n\n * \xf0\x9f\x93\x9c [4 JavaScript Design Patterns You Should Know \xe2\x80\x94 Devan Patel](https://scotch.io/bar-talk/4-javascript-design-patterns-you-should-know)\n * \xf0\x9f\x93\x9c [JavaScript Design Patterns \xe2\x80\x93 Beginner\'s Guide to Mobile Web Development \xe2\x80\x94 Soumyajit Pathak](https://medium.com/beginners-guide-to-mobile-web-development/javascript-design-patterns-25f0faaaa15)\n * \xf0\x9f\x93\x9c [JavaScript Design Patterns \xe2\x80\x94 Akash Pal](https://medium.com/front-end-hacking/javascript-design-patterns-ed9d4c144c81)\n * \xf0\x9f\x93\x9c [Javascript Design Patterns: What They Are & How To Use Them \xe2\x80\x94 Patrick Simpson](https://seesparkbox.com/foundry/javascript_design_patterns)\n * \xf0\x9f\x93\x9c [JavaScript Design Patterns: Understanding Design Patterns in JavaScript - Sukhjinder Arora](https://blog.bitsrc.io/understanding-design-patterns-in-javascript-13345223f2dd)\n * \xf0\x9f\x93\x9c [All the 23 (GoF) design patterns implemented in Javascript \xe2\x80\x94 Felipe Beline](https://github.com/fbeline/Design-Patterns-JS)\n * \xf0\x9f\x93\x9c [The Power of the Module Pattern in JavaScript \xe2\x80\x94 jsmanifest](https://medium.com/better-programming/the-power-of-the-module-pattern-in-javascript-3c73f7cd10e8)\n * \xf0\x9f\x93\x9c [Learning JavaScript Design Patterns \xe2\x80\x94 Addy Osmani ](https://addyosmani.com/resources/essentialjsdesignpatterns/book/)\n * \xf0\x9f\x93\x9c [Design Patterns for Developers using JavaScript pt. I \xe2\x80\x94 Oliver Mensah](https://dev.to/omensah/design-patterns-for-developers-using-javascript----part-one--b3e)\n * \xf0\x9f\x93\x9c [Design Patterns for Developers using JavaScript pt. II \xe2\x80\x94 Oliver Mensah](https://dev.to/omensah/design-patterns-for-developers-using-javascript---part-two--3p39)\n * \xf0\x9f\x93\x9c [Design patterns in modern JavaScript development](https://levelup.gitconnected.com/design-patterns-in-modern-javascript-development-ec84d8be06ca)\n * \xf0\x9f\x93\x9c [Understanding Design Patterns: Iterator using Dev.to and Medium social networks! \xe2\x80\x94 Carlos Caballero](https://dev.to/carlillo/understanding-design-patterns-iterator-using-dev-to-and-medium-social-networks-3bdd)\n * \xf0\x9f\x93\x9c [JavaScript Design Patterns - Factory Pattern \xe2\x80\x94 KristijanFi\xc5\xa1trek](https://dev.to/kristijanfistrek/javascript-design-patterns-factory-pattern-562p)\n\n\n  ### Videos\n\n * \xf0\x9f\x8e\xa5 [JavaScript Design Patterns \xe2\x80\x94 Udacity](https://www.udacity.com/course/javascript-design-patterns--ud989)\n * \xf0\x9f\x8e\xa5 [JavaScript Patterns for 2017 \xe2\x80\x94 Scott Allen](https://www.youtube.com/watch?v=hO7mzO83N1Q)\n\n **[\xe2\xac\x86 Back to Top](#table-of-contents)**\n\n---\n\n## 32. Partial Applications, Currying, Compose and Pipe\n\n### Articles\n\n * \xf0\x9f\x93\x9c [Use function composition in JavaScript \xe2\x80\x94 R\xc3\xa9mi](https://www.codementor.io/michelre/use-function-composition-in-javascript-gkmxos5mj)\n * \xf0\x9f\x93\x9c [Currying in JavaScript ES6 \xe2\x80\x94 Adam Bene](https://blog.benestudio.co/currying-in-javascript-es6-540d2ad09400)\n * \xf0\x9f\x93\x9c [Composition and Currying Elegance in JavaScript \xe2\x80\x94 Pragyan Das](https://medium.com/@pragyan88/writing-middleware-composition-and-currying-elegance-in-javascript-8b15c98a541b)\n * \xf0\x9f\x93\x9c [Functional JavaScript: Function Composition For Every Day Use \xe2\x80\x94 Joel Thoms](https://hackernoon.com/javascript-functional-composition-for-every-day-use-22421ef65a10)\n * \xf0\x9f\x93\x9c [Functional Composition: compose() and pipe() \xe2\x80\x94 Anton Paras](https://medium.com/@acparas/what-i-learned-today-july-2-2017-ab9a46dbf85f)\n * \xf0\x9f\x93\x9c [Why The Hipsters Compose Everything: Functional Composing In JavaScript \xe2\x80\x94 A. Sharif](http://busypeoples.github.io/post/functional-composing-javascript/)\n * \xf0\x9f\x93\x9c [A Gentle Introduction to Functional JavaScript pt III: Functions for making functions \xe2\x80\x94 James Sinclair](https://jrsinclair.com/articles/2016/gentle-introduction-to-functional-javascript-functions/)\n * \xf0\x9f\x93\x9c [Curry And Compose (why you should be using something like ramda in your code) \xe2\x80\x94 jsanchesleao](https://jsleao.wordpress.com/2015/02/22/curry-and-compose-why-you-should-be-using-something-like-ramda-in-your-code/)\n * \xf0\x9f\x93\x9c [Function Composition in JavaScript with Pipe \xe2\x80\x94 Andy Van Slaars](https://vanslaars.io/post/create-pipe-function/)\n * \xf0\x9f\x93\x9c [Practical Functional JavaScript with Ramda \xe2\x80\x94 Andrew D\'Amelio, Yuri Takhteyev](https://developer.telerik.com/featured/practical-functional-javascript-ramda/)\n * \xf0\x9f\x93\x9c [The beauty in Partial Application, Currying, and Function Composition \xe2\x80\x94 Joel Thoms](https://hackernoon.com/the-beauty-in-partial-application-currying-and-function-composition-d885bdf0d574)\n * \xf0\x9f\x93\x9c [Curry or Partial Application? \xe2\x80\x94 Eric Elliott](https://medium.com/javascript-scene/curry-or-partial-application-8150044c78b8)\n * \xf0\x9f\x93\x9c [Partial Application in JavaScript \xe2\x80\x94 Ben Alman](http://benalman.com/news/2012/09/partial-application-in-javascript/)\n * \xf0\x9f\x93\x9c [Partial Application of Functions \xe2\x80\x94 Functional Reactive Ninja](https://hackernoon.com/partial-application-of-functions-dbe7d9b80760)\n * \xf0\x9f\x93\x9c [Currying vs Partial Application \xe2\x80\x94 Deepak Gupta](https://codeburst.io/javascript-currying-vs-partial-application-4db5b2442be8)\n * \xf0\x9f\x93\x9c [Partial Application in ECMAScript 2015 \xe2\x80\x94 Ragan Wald](http://raganwald.com/2015/04/01/partial-application.html)\n * \xf0\x9f\x93\x9c [Functional Composition in Javascript \xe2\x80\x94 Joe Cortopassi](https://joecortopassi.com/articles/functional-composition-in-javascript/)\n * \xf0\x9f\x93\x9c [So You Want to be a Functional Programmer pt. I \xe2\x80\x94 Charles Scalfani](https://medium.com/@cscalfani/so-you-want-to-be-a-functional-programmer-part-1-1f15e387e536)\n * \xf0\x9f\x93\x9c [So You Want to be a Functional Programmer pt. II \xe2\x80\x94 Charles Scalfani](https://medium.com/@cscalfani/so-you-want-to-be-a-functional-programmer-part-2-7005682cec4a)\n * \xf0\x9f\x93\x9c [So You Want to be a Functional Programmer pt. III \xe2\x80\x94 Charles Scalfani](https://medium.com/@cscalfani/so-you-want-to-be-a-functional-programmer-part-3-1b0fd14eb1a7)\n * \xf0\x9f\x93\x9c [So You Want to be a Functional Programmer pt. IV \xe2\x80\x94 Charles Scalfani](https://medium.com/@cscalfani/so-you-want-to-be-a-functional-programmer-part-4-18fbe3ea9e49)\n * \xf0\x9f\x93\x9c [So You Want to be a Functional Programmer pt. V \xe2\x80\x94 Charles Scalfani](https://medium.com/@cscalfani/so-you-want-to-be-a-functional-programmer-part-5-c70adc9cf56a)\n * \xf0\x9f\x93\x9c [Functional-Light JavaScript Chapter 3: Managing Function Inputs \xe2\x80\x94 Kyle Simpson](https://github.com/getify/Functional-Light-JS/blob/master/manuscript/ch3.md)\n * \xf0\x9f\x93\x9c [An introduction to the basic principles of Functional Programming \xe2\x80\x94 TK](https://medium.freecodecamp.org/an-introduction-to-the-basic-principles-of-functional-programming-a2c2a15c84)\n * \xf0\x9f\x93\x9c [Concepts of Functional Programming in Javascript \xe2\x80\x94 TK](https://medium.com/the-renaissance-developer/concepts-of-functional-programming-in-javascript-6bc84220d2aa)\n * \xf0\x9f\x93\x9c [An Introduction to Functional Programming Style in JavaScript \xe2\x80\x94 JavaScript Teacher](https://medium.freecodecamp.org/an-introduction-to-functional-programming-style-in-javascript-71fcc050f064)\n * \xf0\x9f\x93\x9c [A practical guide to writing more functional JavaScript \xe2\x80\x94 Nadeesha Cabral](https://medium.freecodecamp.org/a-practical-guide-to-writing-more-functional-javascript-db49409f71)\n * \xf0\x9f\x93\x9c [A simple explanation of functional pipe in JavaScript \xe2\x80\x94 Ben Lesh](https://dev.to/benlesh/a-simple-explanation-of-functional-pipe-in-javascript-2hbj)\n\n  ### Videos\n\n * \xf0\x9f\x8e\xa5 [Compose vs Pipe: Functional Programming in JavaScript \xe2\x80\x94 Chyld Studios](https://www.youtube.com/watch?v=Wl2ejJOqHUU)\n * \xf0\x9f\x8e\xa5 [JavaScript Functional Programing: Compose \xe2\x80\x94 Theodore Anderson](https://www.youtube.com/watch?v=jigHxo9YR30)\n * \xf0\x9f\x8e\xa5 [Function Composition - Functional JavaScript \xe2\x80\x94 NWCalvank](https://www.youtube.com/watch?v=mth5WpEc4Qs)\n * \xf0\x9f\x8e\xa5 [JavaScript Function Composition Explained \xe2\x80\x94 Theodore Anderson](https://www.youtube.com/watch?v=Uam37AlzPYw)\n * \xf0\x9f\x8e\xa5 [Let\'s code with function composition \xe2\x80\x94 Fun Fun Function](https://www.youtube.com/watch?v=VGB9HbL1GHk)\n * \xf0\x9f\x8e\xa5 [Partial Application vs. Currying \xe2\x80\x94 NWCalvank](https://www.youtube.com/watch?v=DzLkRsUN2vE)\n * \xf0\x9f\x8e\xa5 [JavaScript Partial Application \xe2\x80\x94 Theodore Anderson](https://www.youtube.com/watch?v=jkebgHEcvac)\n\n**[\xe2\xac\x86 Back to Top](#table-of-contents)**\n\n---\n\n## 33. Clean Code\n\n### Articles\n\n * \xf0\x9f\x93\x9c [Clean Code concepts adapted for JavaScript \xe2\x80\x94 Ryan McDermott](https://github.com/ryanmcdermott/clean-code-javascript)\n * \xf0\x9f\x93\x9c [JavaScript Clean Coding Best Practices \xe2\x80\x94 Andr\xc3\xa1s T\xc3\xb3th](https://blog.risingstack.com/javascript-clean-coding-best-practices-node-js-at-scale/)\n * \xf0\x9f\x93\x9c [Function parameters in JavaScript Clean Code \xe2\x80\x94 Kevin Peters](https://medium.com/@kevin_peters/function-parameters-in-javascript-clean-code-4caac109159b)\n * \xf0\x9f\x93\x9c [Keeping your code clean \xe2\x80\x94 Samuel James](https://codeburst.io/keeping-your-code-clean-d30bcffd1a10)\n * \xf0\x9f\x93\x9c [Best Practices for Using Modern JavaScript Syntax \xe2\x80\x94 M. David Green](https://www.sitepoint.com/modern-javascript-best-practices/)\n * \xf0\x9f\x93\x9c [best practices for cross node/web development - Jimmy W\xc3\xa4rting](https://github.com/cross-js/cross-js)\n * \xf0\x9f\x93\x9c [Writing Clean Code - Dylan Paulus](https://dev.to/ganderzz/on-writing-clean-code-57cm)\n\n### Videos\n*  \xf0\x9f\x8e\xa5 [JavaScript Pro Tips - Code This, NOT That](https://www.youtube.com/watch?v=Mus_vwhTCq0)\n\n **[\xe2\xac\x86 Back to Top](#table-of-contents)**\n'