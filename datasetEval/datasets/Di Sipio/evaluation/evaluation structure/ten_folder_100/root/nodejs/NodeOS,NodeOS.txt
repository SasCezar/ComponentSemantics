b"<!---\nNodeOS\n\nCopyright (c) 2013-2017 Jacob Groundwater, Jes\xc3\xbas Legan\xc3\xa9s-Combarro 'piranna' and\nother contributors\n\nMIT License\n-->\n\n[![Build Status](https://semaphoreapp.com/api/v1/projects/71d72807-779a-40d3-a8d4-523cd0a52eb3/356164/shields_badge.svg)](https://semaphoreapp.com/nodeos/nodeos)\n[![Stories in Ready](https://badge.waffle.io/NodeOS/NodeOS.png?label=ready&title=Ready)](https://waffle.io/NodeOS/NodeOS)\n[![Join the chat at https://gitter.im/NodeOS/NodeOS](https://badges.gitter.im/NodeOS/NodeOS.svg)](https://gitter.im/NodeOS/NodeOS?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![MIT Licence](https://badges.frapsoft.com/os/mit/mit.svg)](https://opensource.org/licenses/mit-license.php)   \n\n# NodeOS\n\n[![Greenkeeper badge](https://badges.greenkeeper.io/NodeOS/NodeOS.svg)](https://greenkeeper.io/)\n\nLightweight operating system using [Node.js](http://nodejs.org) as userspace.\n\nNodeOS is an operating system built entirely in Javascript and managed by\n[npm](https://www.npmjs.com). Any package in `npm` is a NodeOS package, that\nmeans a selection of more than 400.000 packages. The goal of NodeOS is to\nprovide just enough to let `npm` provide the rest. Since anyone can contribute\nto it, anyone can create NodeOS packages.\n\nThis project won the Spanish [9th National Free Software Championship](https://www.concursosoftwarelibre.org/1415)\non the Systems category and was Honorable Mention of its [10th edition](https://www.concursosoftwarelibre.org/1516).\nIt was also presented as the degree thesis of [Jes\xc3\xbas Leganes Combarro](https://github.com/piranna)\nwith a qualification of 10/10 with distinction.\n\n## Useful links\n\n* [New Wiki (under work)](https://nodeos.gitbooks.io/nodeos)\n* [pre-build releases images](https://github.com/NodeOS/NodeOS/releases)\n* [1.0 Roadmap](https://github.com/NodeOS/NodeOS/issues/37)\n* [2.0 Roadmap](https://github.com/NodeOS/NodeOS/issues/146)\n* [media files](https://github.com/NodeOS/media) (logos, wallpapers...)\n* [discussion](https://github.com/NodeOS/NodeOS/issues)\n\n[![Join the Discussion](http://i.imgur.com/hUjSLXt.png)](https://github.com/NodeOS/NodeOS/issues)\n\n## Introduction\n\nNodeOS is a Node.js based operating system, built-off of the Linux kernel. The\nNodeOS Project is aiming to, and can already run on some of the following\nplatforms:\n\n- **real hardware** like desktops, laptops, or SoC's (Raspberry Pi)\n- **cloud providers** like Joyent, Amazon or Rackspace\n- **virtual machines** like QEmu, VirtualBox, VMWare and KVM\n- **PaaS providers** like Heroku or Joyent's Manta\n- **container providers** like Docker & Vagga\n\nCore development is being done in layers. There could be some differences to\nadjust better to each target platform, but the general structure is:\n\n- *barebones* custom Linux kernel with an initramfs that boots to a Node.js REPL\n- *initramfs* Initram environment to mount the users partition & boot the system\n- *usersfs*   multi-user environment with the same behaviour of traditional OSes\n\n### Booting process\n\nAll the layers are bootable, leading *barebones* to a raw naked Node.js\n[REPL](http://nodejs.org/api/repl.html) prompt as PID 1, while *initramfs* exec\nactual NodeOS code to isolate user code from the core system and, if available,\nmount a partition  with the users' home directories and root filesystems.\n\nIf a *usersfs* partition is being set at boot time, it will be mounted and the\nsystem will consider each one of its folders as the home folder for a valid user\non the system, and will execute a `init` file in the root of each of them. If\nfound, the `root` user will be the first to be considered and will have access\nto all of the home directories, but by design it will not be possible to elevate\npermissions once the system has finished booting.\n\n### Hacking\n\nIf you are hacking on NodeOS for a somewhat production environment, you are\nlikely interested on building a custom *usersfs* image or modify it once booted,\nsince each user is isolated from the others and everyone can be able to define\nits own root filesystem, but you can customize all other layers if you want. For\nexample, you can modify *initramfs* to login users and mount their home folders\nfrom a cloud service or craft a system without global services (no `root` user),\nor also dedicate a full NodeOS instance to a single Node.js application.\n\n\n## Pre-built Images\n\nReady to use [pre-build images](https://github.com/NodeOS/NodeOS/releases) are\nautomatically generated after each commit in master branch that sucessfully\n[pass the tests](https://semaphoreapp.com/nodeos/nodeos). To exec them, you'll\nneed to have [QEmu](http://wiki.qemu.org/Main_Page) installed on your system.\n\nThe *iso* can be written to a CD-R or flashed to a USB pendrive, but will only\nprovide the read-only rootfs and the changes will be done in memory, losing them\nafter reboot, so you'll manually need to set a read-write *usersfs* partition if\nyou want to persist them. On the other hand, if you want to flash it to a USB\npendrive, We recommended doing it by using `bin/installUSB` command so it will\nautomatically create a read-write *usersfs* partition to fill the remaining\nspace and use it as persistent storage.\n\n## Build NodeOS in five steps\n\n1. Download the project source code:\n\n   ```bash\n   git clone git@github.com:NodeOS/NodeOS.git\n   cd NodeOS\n   ```\n\n2. Install the required build tools. On a Ubuntu based system you can do it by\n   executing:\n\n   ```bash\n   sudo bin/install-dependencies\n   ```\n\n3. Install NodeOS build dependencies:\n\n   ```bash\n   npm install\n   ```\n\n4. Build NodeOS:\n\n    ```bash\n    npm run build\n    ```\n\n   By default it will generate some files that can be used with QEmu, compiled\n   for your current machine architecture. You can  configure the build process\n   by passing some environment variables. For example, to force to build for 32\n   bits, use `BITS=32 npm install` instead.\n\n5. Exec your freshly compiled NodeOS image:\n\n   ```bash\n   npm start\n   ```\n\n   It will automatically detect what CPU architecture will need to be used on\n   QEmu and exec the correct emulation.\n\n...profit! :-D\n\nIf you encounter an error when building NodeOS, take a look at\n[the wiki](https://github.com/NodeOS/NodeOS/wiki/Fixing-NodeOS-Build-Errors) or\nopen an [issue](https://github.com/NodeOS/NodeOS/issues).\n\n## Single Process OS\n\nNodeOS can be used as a Single Process OS, where only run a single executable.\nTo do so, set the `SINGLE_USER` environment variable to the name of a `npm`\nmodule when executing `npm run build`. This will run fully from initram,\npersistence can be achieved by setting this environment variable to an empty\nstring and later using a custom `usersfs` partition, but this is still\nexperimental.\n\n## NodeOS on LXC containers (Docker and vagga)\n\nNodeOS fully officially supports Docker, published images are available at the\n[DockerHub NodeOS organization](https://hub.docker.com/u/nodeos). If you are\ninterested in helping or testing, you can build them from source code.\n\nVagga support is fairly experimental, and help here will be greatly appreciated.\n\n### Quick Start\n\n1. [Install Docker](http://docs.docker.io/en/latest/installation/)\n2. One Liner\n\n   ```bash\n   sudo docker run -t -i nodeos/nodeos\n   ```\n\n### Build from Source\n\n```bash\ngit clone https://github.com/NodeOS/NodeOS.git\ncd NodeOS\nPLATFORM=docker npm install\n```\n\n## License\n\nMIT\n\nThis software consists of voluntary contributions made by many individuals. For\nexact contribution history, see the revision history available at\nhttps://github.com/NodeOS/NodeOS\n"