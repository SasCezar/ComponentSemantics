b'[![ggez logo](docs/ggez-logo-maroon-full.svg)](http://ggez.rs/)\n# What is this?\n[![Build Status](https://travis-ci.org/ggez/ggez.svg?branch=master)](https://travis-ci.org/ggez/ggez)\n[![Build status](https://ci.appveyor.com/api/projects/status/3v9lsq6n9li7kxim/branch/master?svg=true)](https://ci.appveyor.com/project/svenstaro/ggez/branch/master)\n[![Docs Status](https://docs.rs/ggez/badge.svg)](https://docs.rs/ggez)\n[![license](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/ggez/ggez/blob/master/LICENSE)\n[![Crates.io](https://img.shields.io/crates/v/ggez.svg)](https://crates.io/crates/ggez)\n[![Crates.io](https://img.shields.io/crates/d/ggez.svg)](https://crates.io/crates/ggez)\n\nggez is a Rust library to create a Good Game Easily.\n\nMore specifically, ggez is a lightweight cross-platform game framework\nfor making 2D games with minimum friction.  It aims to implement an\nAPI based on (a Rustified version of) the [L\xc3\x96VE](https://love2d.org/)\ngame framework.  This means it contains basic and portable 2D\ndrawing, sound, resource loading and event handling, but finer details\nand performance characteristics may be different than L\xc3\x96VE.\n\nggez is not meant to be everything to everyone, but rather a good\nbase upon which to build.  Thus it takes a fairly\nbatteries-included approach without needing a million additions\nand plugins for everything imaginable, but also does not dictate\nhigher-level functionality such as physics engine or entity\ncomponent system.  Instead the goal is to allow you to use\nwhichever libraries you want to provide these functions, or build\nyour own libraries atop ggez.\n\n## Features\n\n* Filesystem abstraction that lets you load resources from folders or zip files\n* Hardware-accelerated 2D rendering built on the `gfx-rs` graphics engine\n* Loading and playing .ogg, .wav and .flac files via the `rodio` crate\n* TTF font rendering with `rusttype` and `glyph_brush`.\n* Interface for handling keyboard and mouse events easily through callbacks\n* Config file for defining engine and game settings\n* Easy timing and FPS measurement functions.\n* Math library integration with `mint`.\n* Some more advanced graphics options: shaders, sprite batches and render targets\n\n## Supported platforms\n\n * Fully supported: Windows, Linux\n * Not officially supported but might work anyway: Mac, iOS\n * Work in progress: WebAssembly\n * Not officially supported yet (but maybe you can help!): Android\n\nFor details, see [docs/BuildingForEveryPlatform.md](docs/BuildingForEveryPlatform.md)\n\n## Who\'s using ggez?\n\nCheck out the [projects list!](docs/Projects.md)\n\n## Usage\n\nggez requires rustc >= 1.36 and is distributed on\ncrates.io.  To include it in your project, just add the dependency\nline to your `Cargo.toml` file:\n\n```text\nggez = "0.5"\n```\n\nggez consists of three main parts: A `Context` object which\ncontains all the state required to interface with the computer\'s\nhardware, an `EventHandler` trait that the user implements to\nregister callbacks for events, and various sub-modules such as\n`graphics` and `audio` that provide the functionality to actually\nget stuff done.  The general pattern is to create a struct holding\nyour game\'s data which implements the `EventHandler` trait.\nCreate a new `Context` object with default objects from a `ContextBuilder`\nor `Conf` object, and then call `event::run()` with\nthe `Context` and an instance of your `EventHandler` to run your game\'s\nmain loop.\n\nSee the [API docs](https://docs.rs/ggez/) for full documentation, or the [examples](/examples) directory for a number of commented examples of varying complexity.  Most examples show off\na single feature of ggez, while `astroblasto` and `snake` are small but complete games.\n\n## Getting started\n\nFor a quick tutorial on ggez, see the [Hello ggez](https://github.com/ggez/ggez/blob/master/docs/guides/HelloGgez.md) guide in the `docs/` directory.\n\n## Examples\n\nSee the `examples/` directory in the source.  Most examples show off\na single feature of ggez, while `astroblasto` is a small  but\ncomplete Asteroids-like game.\n\nTo run the examples, just check out the source and execute `cargo run --example`\nin the root directory:\n\n```text\ngit clone https://github.com/ggez/ggez.git\ncd ggez\ncargo run --example 05_astroblasto\n```\n\nIf this doesn\'t work, see the\n[FAQ](https://github.com/ggez/ggez/blob/master/docs/FAQ.md) for solutions\nto common problems.\n\n### Basic Project Template\n\n```rust,no_run\nuse ggez::{graphics, Context, ContextBuilder, GameResult};\nuse ggez::event::{self, EventHandler};\n\nfn main() {\n    // Make a Context.\n    let (mut ctx, mut event_loop) = ContextBuilder::new("my_game", "Cool Game Author")\n\t\t.build()\n\t\t.expect("aieee, could not create ggez context!");\n\n    // Create an instance of your event handler.\n    // Usually, you should provide it with the Context object to\n    // use when setting your game up.\n    let mut my_game = MyGame::new(&mut ctx);\n\n    // Run!\n    match event::run(&mut ctx, &mut event_loop, &mut my_game) {\n        Ok(_) => println!("Exited cleanly."),\n        Err(e) => println!("Error occured: {}", e)\n    }\n}\n\nstruct MyGame {\n    // Your state here...\n}\n\nimpl MyGame {\n    pub fn new(_ctx: &mut Context) -> MyGame {\n        // Load/create resources such as images here.\n        MyGame {\n            // ...\n        }\n    }\n}\n\nimpl EventHandler for MyGame {\n    fn update(&mut self, _ctx: &mut Context) -> GameResult<()> {\n        // Update code here...\n        Ok(())\n    }\n\n    fn draw(&mut self, ctx: &mut Context) -> GameResult<()> {\n        graphics::clear(ctx, graphics::WHITE);\n        // Draw code here...\n        graphics::present(ctx)\n    }\n}\n```\n\n## Implementation details\n\nggez is built upon `winit` for windowing and events, `rodio` for\nsound, and a 2D drawing engine implemented in `gfx` using the OpenGL\nbackend (which currently defaults to use OpenGL 3.2).  It is entirely\nthread-safe (though platform constraints mean the event-handling loop\nand drawing must be done in the main thread), and portable to Windows\nand Linux.\n\nggez is Pure Rust(tm).\n\n## Help!\n\nSources of information:\n\n * The [FAQ](https://github.com/ggez/ggez/blob/master/docs/FAQ.md) has answers to common questions and problems.\n * The [API docs](https://docs.rs/ggez/), a lot of design stuff is explained there.\n * Check out the [examples](https://github.com/ggez/ggez/tree/master/examples).\n\n If you still have problems or questions, feel free to ask!  Easiest ways are:\n\n * open an issue on [the Github issue tracker](https://github.com/ggez/ggez/issues)\n * say hi on the [unofficial Rust Discord server](http://bit.ly/rust-community)\n'