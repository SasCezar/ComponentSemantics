b"# qengine\n[![Build Status](https://travis-ci.com/klaussilveira/qengine.svg?branch=master)](https://travis-ci.com/klaussilveira/qengine)\n[![GitHub license](https://img.shields.io/github/license/klaussilveira/qengine.svg)](https://github.com/klaussilveira/qengine/blob/master/LICENSE)\n\nqengine is a cross-platform retro game engine. It is aimed at nostalgic game\ndevelopers that miss simple times and enjoy creating games like it's 1997. The\nsoftware renderer provides the aesthetic that we all love and the engine\nlimitations exist to make your creativity shine.\n\nThe engine is a fork of the Quake II codebase that focuses on serving as a base\nfor standalone games. Unlike other ports, it does not aim at being compatible\nwith mods or the base Quake II game. In fact, many features were removed to\nreduce the complexity of the codebase and make the process of creating new\ngames on top of the engine easier and faster.\n\nSome notable changes include:\n\n- Removal of overly specific gameplay code, such as enemies and weapons\n- Merge of modules into a single package. No more DLLs, just a single\nexecutable for client and another for server\n- Removal of OpenGL\n- Minimal dependencies\n\n![qengine screenshot](docs/screenshot.png)\n\n## Free, open source and community-driven\nqengine stands on the shoulders of giants from the Quake II community. The code\nis built upon Yamagi Quake II, which itself contains code from other amazing\nprojects:\n\n- Hecatomb\n- Icculus Quake 2\n- KMQuake2\n- Q2Pro\n- QuDoS\n- r1q2\n- stereo quake\n- zeq2\n\n## Goals\n- Provide a clean and maintainable base game engine\n- Improve stability across different platforms\n- Enhance the software renderer\n- Improve documentation of asset pipeline\n\n## License\nqengine is released under the terms of the GPL version 2. See the LICENSE\nfile for further information.\n\n## Compiling\n\n    $ mkdir build\n    $ cd build\n    $ cmake ..\n    $ make\n\nIf you don't want to build the docs, or you don't want to install the deps\nthey require, you can pass `-DBUILD_DOCS=OFF` to cmake.\n\n    $ cmake -DBUILD_DOCS=OFF ..\n    $ make\n\n## Running\nThe engine will look for game data in the `assets` folder. You can start from\nscratch, or use the original Quake II game data if you own it.\n\n## Tools\nIncluded with the engine there are quite a few useful tools. They are:\n\n### Mapping\n- qbsp3\n- qrad3\n- qvis3\n- bspinfo\n\n### Textures\n- pcx2wal\n- pcx2pal\n- colormap\n- 16to8\n\n### UI\n- uigen\n- fontgen\n\n### Compiling maps\n    $ build/tools/qbsp3 assets/maps/sample.map\n    $ build/tools/qvis3 assets/maps/sample.bsp\n    $ build/tools/qrad3 assets/maps/sample.bsp\n\n## Base assets\nIn order to run, the engine needs a few base assets, such as sounds, models\nand UI textures. Most of them are already included in the `assets` folder.\n\n## Palette\nThe engine works with a 256 color palette. However, the `colormap.pcx` file is a 256x320 color re-arrangement of those colors, resulting in 64 shades of each.\n\nA GIMP palette is included to facilitate creation of new graphics for the engine: `assets/palette.gpl`\n\nIf you want more creative freedom, you can easily create a new palette. Create\na PCX file with the 256 colors you have chosen and then:\n\n    $ build/tools/pcx2pal palette.pcx palette.pal\n    $ build/tools/colormap palette.pal colormap.pcx\n"