b'<img src="https://raw.githubusercontent.com/Equilibrium-Games/Acid/master/Documents/Acid_03.png" alt="Acid" height="130px">\n\n[![Financial Contributors on Open Collective](https://opencollective.com/Acid/all/badge.svg?label=financial+contributors)](https://opencollective.com/Acid) [![Trello](https://img.shields.io/badge/board-trello-blue.svg)](https://trello.com/b/ZRvpbbYC/acid)\n[![CodeDocs](https://codedocs.xyz/EQMG/Acid.svg)](https://codedocs.xyz/EQMG/Acid/)\n[![Build Status](https://travis-ci.org/EQMG/Acid.svg?branch=master)](https://travis-ci.org/EQMG/Acid)\n[![Build status](https://ci.appveyor.com/api/projects/status/e1an80wt6rb5nfk3?svg=true)](https://ci.appveyor.com/project/Mattparks/acid)\n\nAcid is an open-source, cross-platform game engine written in modern C++17 and structured to be fast, simple, and extremely modular.\n\nVulkan is the sole graphics API, Vulkan can be accessed in apps with the provided Acid rendering pipeline. Metal is supported through [MoltenVK](https://github.com/KhronosGroup/MoltenVK); eventually, DirectX will be supported in a similar way.\n\nThis project is being worked on part-time by a single developer, this is under heavy development, expect bugs, API changes, and plenty of missing features.\n\n## Features\n * Multiplatform (Windows, Linux, MacOS, 32bit and 64bit)\n * Multithreaded command buffers and thread safety\n * On the fly GLSL to SPIR-V compilation and reflection\n * Deferred physically based rendering (PBR)\n * Networking (HTTP, FTP, UDP, TCP)\n * Object serialization (JSON, XML)\n * Resource management using serialization\n * Event delegate callbacks with scoped functions\n * Bullet physics\n * Entity component system\n * Particle effect systems\n * File multi-path searching, and packaging\n * GUI and SDF font rendering\n * Audio systems (AIFF, OGG, WAV, MP3)\n * Shadow mapping\n * Post effects pipeline (Lensflare, Glow, Blur, SSAO, ...)\n * Model file loading (OBJ, GLTF2)\n * Animations loading (COLLADA)\n * Image file loading (JPG, PNG, TIFF, BMP, PSD, SVG)\n\n## Dependencies\n * [Vulkan](https://www.khronos.org/vulkan) - Vulkan interface\n * [Glslang](https://github.com/KhronosGroup/glslang) - Shader compiling\n * [GLFW](https://github.com/glfw/glfw) - Window creation\n * [OpenAL](http://kcat.strangesoft.net/openal.html) - Audio interface\n * [Bullet3](https://github.com/bulletphysics/bullet3) - Physics integration\n * [PhysFS](https://icculus.org/physfs) - Archive file access\n\n# Code Snippets\n```cpp\n// Imports a 2D texture using nearest filtering.\nauto guiBlack = Image2d::Create("Guis/Black.png", VK_FILTER_NEAREST);\n\n// Imports a 3D cubemap (face names defined in Cubemap.cpp).\nauto skyboxSnowy = ImageCube::Create("Objects/SkyboxSnowy", ".png");\n\n// Imports a OBJ model.\nauto dragon = ModelObj::Create("Objects/Testing/ModelDragon.obj");\n\n// Creates a sphere model with 20 latitude and longitude bands with a radius of 1.\nauto sphere = ModelSphere::Create(20, 20, 1.0f);\n\n// Plays a 3D sound (sound buffer resource internally managed), at half volume.\nSound jump("Sounds/Jump.ogg", Audio::Type::Effect, false, true, 0.5f);\n\n// Loads a entity from a prefab file.\nauto playerObject = GetStructure()->CreateEntity("Objects/Player/Player.json");\nplayerObject->AddComponent<Transform>();\n\n// Creates a entity in code.\nauto sphere = GetStructure()->CreateEntity();\nsphere->AddComponent<Transform>(Vector3f(6.7f, 6.7f, -8.0f), Vector3f(0.0f, Maths::Radians(180.0f), 0.0f), Vector3f(3.0f));\nsphere->AddComponent<Mesh>(ModelSphere::Create(20, 20, 1.0f), // This will used the sphere buffers created earlier.\n\tstd::make_unique<MaterialDefault>(Colour::White, Image2d::Create("Objects/Testing/Albedo.png"), 0.0f, 0.5f,\n\t\tImage2d::Create("Objects/Testing/Material.png"), Image2d::Create("Objects/Testing/Normal.png")));\nsphere->AddComponent<Rigidbody>(std::make_unique<ColliderSphere>(), 2.0f); // Will be created weighing 2 units.\n\n// Vector maths.\nVector2f a(3.0f, -7.2f);\nVector2f b(-1.74f, 15.4f);\nVector2f c = a * b;\n// Distance between the two points.\nfloat distance = a.Distance(b);\n// Right shift of the x and y bits by 1.\nVector2i rightShift = Vector2i(5, 9) >> 1;\n\n// Split a string by spaces.\nstd::string stringSource = "Hello world!";\nstd::vector<std::string> stringSplit = String::Split(stringSource, \' \');\n\n// Will run a lambda on window resize, and when this object is deleted the lamdba is removed.\nWindow::Get()->OnSize().Add([](Vector2ui size) {\n\tLog::Out("Hello world: ", size, \'\\n\');\n});\n\n// A value container that calls a delegate on value assignments.\nDelegateValue<Vector3f> da;\nda.Add([](Vector3f value) {\n\tLog::Out("New value: ", value, \'\\n\');\n});\nda = {10.0f, -4.11f, 99.991f};\n\n// Time addition.\nTime dateTime = 4h + 2min + 11s + 9ms + 1us + 4ns;\n\n// Calls the function once after 150 milliseconds.\nTimers::Get()->Once(150ms, []() {\n\tLog::Out("Timer Once After\\n");\n});\n// Calls the function every 4 seconds. \nTimers::Get()->Every(4s, []() {\n\tLog::Out("Timer Every Tick\\n");\n});\n// Calls the funcion every 7 seconds 3 times.\nTimers::Get()->Repeat(7s, 3, []() {\n\tstatic uint32_t i = 0;\n\tLog::Out("Timer Repeat Tick #", i, \'\\n\');\n\ti++;\n});\n```\n\n## Screenshots\n<img src="/Documents/Screenshot1.png" alt="Acid" width="600px">\n\n<img src="/Documents/Screenshot2.png" alt="Acid" width="600px">\n\n<img src="/Documents/Screenshot3.png" alt="Acid" width="600px">\n\n<img src="/Documents/Screenshot4.png" alt="Acid" width="600px">\n\n<img src="/Documents/Screenshot5.png" alt="Acid" width="600px">\n\n## Compiling\nAll platforms depend on [CMake](https://cmake.org/download), 3.11 or higher, to generate IDE/make files.\n\nCmake options (default ON):\n* `BUILD_TESTS`\n* `ACID_INSTALL_EXAMPLES`\n* `ACID_INSTALL_RESOURCES`  \n\nIf you installed Acid using only system libs, then `find_package(Acid)` will work from Cmake. Versioning is also supported.  \nWhen using `find_package(Acid)` the imported target `Acid::Acid` will be created.  \nThe `ACID_RESOURCES_DIR` variable will also be available, which will point to the on-disk location of `Acid/Resources` (if installed).\n\n[Python 3](https://www.python.org/downloads/), [Vulkan SDK](https://www.lunarg.com/vulkan-sdk/), [OpenAL](https://www.openal.org/downloads/), and [OpenAL SDK](https://openal-soft.org/#download) are required to develop Acid.\n\nMake sure you have environment variables `VULKAN_SDK` and `OPENALDIR` set to the paths you have Vulkan and OpenAL installed into.\n\nEnsure you are using a compiler with full C++17 support, on Windows it is recommended that you use MSVC or [MinGW w64](https://sourceforge.net/projects/mingw-w64/?source=navbar).\n\nIf using Visual Studio it must be 2015 or later. Use the Visual Studio installer and select both "Desktop development with C++" and "Windows SDK" if they are not already installed. Then on Visual Studio Acid can be opened as a CMake workspace folder.\n\nOn Linux Acid requires `xorg-dev`, `libopenal1`, and `libvulkan1` to be installed. Read about how to setup [Vulkan on Linux](https://vulkan.lunarg.com/doc/sdk/latest/linux/getting_started.html) so a Vulkan SDK is found.\n\nSetup on MacOS is similar to the setup on Linux, a compiler that supports C++17 is required, such as XCode 10.0.\n\n## Contributing\nYou can contribute to Acid in any way you want, we are always looking for help. You can learn about Acids code style from the [GUIDELINES.md](.github/GUIDELINES.md).\n\n## Contributors\n\n### Code Contributors\n\nThis project exists thanks to all the people who contribute. [[Contribute](CONTRIBUTING.md)].\n<a href="https://github.com/EQMG/Acid/graphs/contributors"><img src="https://opencollective.com/Acid/contributors.svg?width=890&button=false" /></a>\n\n### Financial Contributors\n\nBecome a financial contributor and help us sustain our community. [[Contribute](https://opencollective.com/Acid/contribute)]\n\n#### Individuals\n\n<a href="https://opencollective.com/Acid"><img src="https://opencollective.com/Acid/individuals.svg?width=890"></a>\n\n#### Organizations\n\nSupport this project with your organization. Your logo will show up here with a link to your website. [[Contribute](https://opencollective.com/Acid/contribute)]\n\n<a href="https://opencollective.com/Acid/organization/0/website"><img src="https://opencollective.com/Acid/organization/0/avatar.svg"></a>\n<a href="https://opencollective.com/Acid/organization/1/website"><img src="https://opencollective.com/Acid/organization/1/avatar.svg"></a>\n<a href="https://opencollective.com/Acid/organization/2/website"><img src="https://opencollective.com/Acid/organization/2/avatar.svg"></a>\n<a href="https://opencollective.com/Acid/organization/3/website"><img src="https://opencollective.com/Acid/organization/3/avatar.svg"></a>\n<a href="https://opencollective.com/Acid/organization/4/website"><img src="https://opencollective.com/Acid/organization/4/avatar.svg"></a>\n<a href="https://opencollective.com/Acid/organization/5/website"><img src="https://opencollective.com/Acid/organization/5/avatar.svg"></a>\n<a href="https://opencollective.com/Acid/organization/6/website"><img src="https://opencollective.com/Acid/organization/6/avatar.svg"></a>\n<a href="https://opencollective.com/Acid/organization/7/website"><img src="https://opencollective.com/Acid/organization/7/avatar.svg"></a>\n<a href="https://opencollective.com/Acid/organization/8/website"><img src="https://opencollective.com/Acid/organization/8/avatar.svg"></a>\n<a href="https://opencollective.com/Acid/organization/9/website"><img src="https://opencollective.com/Acid/organization/9/avatar.svg"></a>\n'