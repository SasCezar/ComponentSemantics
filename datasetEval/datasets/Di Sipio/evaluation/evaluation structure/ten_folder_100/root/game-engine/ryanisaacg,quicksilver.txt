b'![Quicksilver Logo](./logo.svg)\n\n[![Build Status](https://travis-ci.org/ryanisaacg/quicksilver.svg)](https://travis-ci.org/ryanisaacg/quicksilver)\n[![Crates.io](https://img.shields.io/crates/v/quicksilver.svg)](https://crates.io/crates/quicksilver)\n[![Docs Status](https://docs.rs/quicksilver/badge.svg)](https://docs.rs/quicksilver)\n[![dependency status](https://deps.rs/repo/github/ryanisaacg/quicksilver/status.svg)](https://deps.rs/repo/github/ryanisaacg/quicksilver)\n\nA Rust 2D game framework, for both the Web and Desktop\n\n## A quick example\n\nCreate a rust project and add this line to your `Cargo.toml` file under `[dependencies]`:\n\n    quicksilver = "*"\n\nThen replace `src/main.rs` with the following (the contents of quicksilver\'s examples/draw-geometry.rs):\n\n```rust\n// Draw some multi-colored geometry to the screen\nextern crate quicksilver;\n\nuse quicksilver::{\n    Result,\n    geom::{Circle, Line, Rectangle, Transform, Triangle, Vector},\n    graphics::{Background::Col, Color},\n    lifecycle::{Settings, State, Window, run},\n};\n\nstruct DrawGeometry;\n\nimpl State for DrawGeometry {\n    fn new() -> Result<DrawGeometry> {\n        Ok(DrawGeometry)\n    }\n\n    fn draw(&mut self, window: &mut Window) -> Result<()> {\n        window.clear(Color::WHITE)?;\n        window.draw(&Rectangle::new((100, 100), (32, 32)), Col(Color::BLUE));\n        window.draw_ex(&Rectangle::new((400, 300), (32, 32)), Col(Color::BLUE), Transform::rotate(45), 10);\n        window.draw(&Circle::new((400, 300), 100), Col(Color::GREEN));\n        window.draw_ex(\n            &Line::new((50, 80),(600, 450)).with_thickness(2.0),\n            Col(Color::RED),\n            Transform::IDENTITY,\n            5\n        );\n        window.draw_ex(\n            &Triangle::new((500, 50), (450, 100), (650, 150)),\n            Col(Color::RED),\n            Transform::rotate(45) * Transform::scale((0.5, 0.5)),\n            0\n        );\n        Ok(())\n    }\n}\n\nfn main() {\n    run::<DrawGeometry>("Draw Geometry", Vector::new(800, 600), Settings::default());\n}\n```\n\nRun this with `cargo run` or, if you have the wasm32 toolchain installed, you can build for the web (instructions below).\n\n## Learning Quicksilver\n\nA good way to get started with Quicksilver is to [read and run the examples](https://github.com/ryanisaacg/quicksilver/tree/master/examples) and go through the tutorial modules [on docs.rs](https://docs.rs/quicksilver). If you have any question, feel free to hop onto Gitter or open an issue.\n\n## Made with Quicksilver\n\n- Documentation / Tutorials\n    - [tomassedovic](https://github.com/tomassedovic): [quicksilver-roguelike](https://github.com/tomassedovic/quicksilver-roguelike)\n- Games\n    - [WushuWorks](https://github.com/WushuWorks): [I am the Elder God](https://wushuworks.github.io/I-am-the-Elder-God/)\n    - [codec-abc](https://github.com/codec-abc): [RustyVolley](https://github.com/RustyVolley/RustyVolleySrc)\n    - [rickyhan](https://github.com/rickyhan): [Kingston Crabfight Simulator](https://github.com/rickyhan/crabs)\n    - [robotcaleb](https://github.com/robotcaleb): [Replay](https://robotcaleb.github.io/Replay/)\n    - [rsribeiro](https://github.com/rsribeiro/): [Evil Alligator](https://rsribeiro.github.io/website/)\n    - [nycex](https://gitlab.com/nycex): [Axosnake](https://gitlab.com/nycex/axosnake)\n\nWant to add your project? Feel free to open an issue or PR!\n\n## Building and Deploying a Quicksilver application\n\nQuicksilver should always compile and run on the latest stable version of Rust, for both web and desktop.\n\nMake sure to put all your assets in a top-level folder of your crate called `static/`. *All* Quicksilver file loading-APIs will expect paths that originate in the static folder, so `static/image.png` should be referenced as `image.png`.\n\n### Linux dependencies\n\nOn Windows and Mac, all you\'ll need to build Quicksilver is a recent stable version of `rustc` and `cargo`. A few of Quicksilver\'s dependencies require Linux packages to build, namely `libudev`, `zlib`, and `alsa`. To install these on Ubuntu or Debian, run the command `sudo apt install libudev-dev zlib1g-dev alsa libasound2-dev`.\n\n### Deploying for desktop\n\nIf you\'re deploying for desktop platforms, build in release mode (`cargo build --release`) \nand copy the executable file produced (found at "target/release/") and any assets you used (image files \netc) and create an archive (on Windows a zip file, on Unix a tar file). You should be able to distribute\nthis archive with no problems; if there are any, please open an issue.\n\n### Deploying for the web\n\nIf you\'re deploying for the web, first make sure you\'ve [installed the cargo web tool](https://github.com/koute/cargo-web). Then use the `cargo web deploy` to build your application for distribution (located at `target/deploy`).\n\nIf you want to test your application locally, use `cargo web start` and open your favorite browser to the port it provides. \n\n## Optional Features\n\nQuicksilver by default tries to provide all features a 2D application may need, but not all applications need these features. \nThe optional features available are \ncollision support (via [ncollide2d](https://github.com/sebcrozet/ncollide)), \nfont support (via [rusttype](https://github.com/redox-os/rusttype)), \ngamepad support (via [gilrs](https://gitlab.com/gilrs-project/gilrs)), \nsaving (via [serde_json](https://github.com/serde-rs/json)),\ncomplex shape / svg rendering (via [lyon](https://github.com/nical/lyon)),\nand sounds (via [rodio](https://github.com/tomaka/rodio)). \n\nEach are enabled by default, but you can [specify which features](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choosing-features) you actually want to use. \n\n## Supported Platforms\n\nThe engine is supported on Windows, macOS, Linux, and the web via WebAssembly. \nThe web is only supported via the `wasm32-unknown-unknown` Rust target, not through emscripten.\nIt might work with emscripten but this is not an ongoing guarantee.\n\nOn desktop it requires OpenGL 3.2; on the web it requires WebGL 1.0.\n\nMobile support would be a future possibility, but likely only through external contributions.\n\n'