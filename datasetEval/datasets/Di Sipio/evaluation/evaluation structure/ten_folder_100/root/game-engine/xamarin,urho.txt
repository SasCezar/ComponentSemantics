b'\xef\xbb\xbf# ![](http://developer.xamarin.com/guides/cross-platform/urho/introduction/Images/UrhoSharp_icon.png) UrhoSharp\n\n[![Join the chat at https://gitter.im/xamarin/urho](https://badges.gitter.im/xamarin/urho.svg)](https://gitter.im/xamarin/urho?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nUrhoSharp is a lightweight Game Engine suitable for using with C# and\nF# to create games and 3D applications. The game engine is available \nas a **NETStandard 2.0** library, allowing your game code to be written \nonce and shared across all platforms. UrhoSharp is powered by [Urho3D](http://urho3d.github.io/),\na game engine that has been under development for more than a decade.\nMore information can be found in the [UrhoSharp\ndocumentation](http://developer.xamarin.com/guides/cross-platform/urho/introduction/).\nThe bindings for Urho3D are licensed under the MIT license, as found\non the LICENSE file.\n\n**Key advantages:**\n- Lightweight - ~10mb per platform including basic assets\n- Embeddable - can be embedded into any app as a subview (UIView, NSView, Panel, etc).\n- Open-source - C# bindings and the underlying C++ engine Urho3D are licensed under the MIT License\n- Powerful 3rd parties - Bullet, Box2D, Recast/Detour, kNet, FreeType\n- Advanced graphics using physically based rendering (PBR), Skeletal animation, Inverse Kinematics etc\n- Simple code-first approach (however, it still supports native Urho3D editor)\n\n**Supported platforms:**\n- Windows, WPF, WinForms (net45)\n- iOS (xamarin.ios10)\n- macOS \n- Android (monodroid81)\n- UWP (uap10.0.16299)\n- **AR: HoloLens, ARKit, ARCore**\n- Mixed Reality\n- Xamarin.Forms (iOS, Android, UWP)\n- Ubuntu\n  \n  \n  \n![Sample](Screenshots/Android.gif) ![Sample](Screenshots/SamplyGame.gif)\n\n![Sample](Screenshots/ARKit.gif)\n\nSamples\n=======\n\nSample code lives in https://github.com/xamarin/urho-samples and\nrepository has them as a git submodule. Samples use UrhoSharp via nuget.\n\n# Setup\n\nAvailable on NuGet: \n* [UrhoSharp](http://www.nuget.org/packages/UrhoSharp) - the main package,\ncontains implementations for all platforms including native binaries and basic assets\n* [UrhoSharp.Tools](http://www.nuget.org/packages/UrhoSharp.Tools) - contains compiled binaries for AssetImporter and PackageTool for Windows and macOS\n* [UrhoSharp.WinForms](http://www.nuget.org/packages/UrhoSharp.WinForms) - WinForms control\n* [UrhoSharp.WPF](http://www.nuget.org/packages/UrhoSharp.WPF) - WPF control\n* [UrhoSharp.Cocoa](http://www.nuget.org/packages/UrhoSharp.Cocoa) - Cocoa control (macOS)\n* [UrhoSharp.Forms](http://www.nuget.org/packages/UrhoSharp.Forms) - Xamarin.Forms support for iOS, Android and UWP\n* [UrhoSharp.SharpReality](http://www.nuget.org/packages/UrhoSharp.SharpReality) - HoloLens and Mixed Reality platforms\n* [UrhoSharp.HoloLens](http://www.nuget.org/packages/UrhoSharp.HoloLens) - deprecated. Was renamed to UrhoSharp.SharpReality\n\nQuick start\n===========\n\nTo help developers get up and running quickly with UrhoSharp we are\nproviding a [solution\ntemplate](https://visualstudiogallery.msdn.microsoft.com/0851993e-16e9-417e-92f2-6bdb39308ed2)\nfor Visual Studio (you can find it in "Online templates" tab).  This\ntemplate consists of PCL+Android+iOS+Mac/Windows with a simple scene\nand some assets (Xamarin Studio templates will be available soon):\n\n![VS](https://habrastorage.org/files/f22/b49/ded/f22b49dedc264396a47015784bd9b35f.gif)\n\nHow to build bindings\n=====================\n\nThis is currently a little messy, so YMMV.\n\nIn order to compile binaries for all platforms you will need both\nWindows and OS X environment.  Please follow these steps:\n\n## Compile UrhoSharp on macOS\n\nYou will need:\n- XCode\n- Visual Studio for Mac\n- Homebrew (`/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)`)\n- CMake (`brew install cmake`)\n- Command Line tools (`xcode-select --install`)\n- Android NDK + ANDROID_NDK_HOME environment variable\n\nNOTE: `UrhoSharp.csproj` and `UrhoSharp.Forms.csproj` are SDK-style NETStandard2.0 projects with multi-targeting, \nunfortunately Visual Studio for Mac currently doesn\'t fully support such projects so you have to compile\nthem using `msbuild` CLI, e.g. `cd Bindings/Forms && msbuild /restore UrhoSharp.Forms.csproj /p:Configuration=Release /p:Platform=AnyCpu`\n\nIf you have an error message `tool \'xcodebuild\' requires Xcode, but active developer directory \'/Library/Developer/CommandLineTools\' is a command line tools instance` during compilation try to switch developer directory like this `sudo xcode-select -s /Applications/Xcode.app/Contents/Developer`\n\n**1. Clone the repository including submodules**\n\n```\ngit clone git@github.com:xamarin/urho.git --recursive\n```\n\n**2. Compile Urho.pch, SharpieBinder and generate bindigs**\n\nThe following command will download Clang 3.7.0 if you do not have it\ninstalled, and use this to scan the Urho header files, then compile the sources\nto PCH, parse it via SharpieBinder and generate C# bindings. Additionally \nthere is a perl script to generate bindings to Urho3D events.\n\n```\nmake Generated\n```\n\n**3. Compile UrhoSharp for Mac (fat dylib)**\n```\nmake Mac\n```\nit usually takes 5-10 minutes.\n\n**4. Compile UrhoSharp for iOS (fat dylib: i386, x86_64, armv7, arm64)**\n```\nmake iOS SDK_VER=12.1\n```\n\n**5. Compile UrhoSharp for Android (armeabi, armeabi-v7a, arm64, x86, x86_64)** \n```\nmake -j5 Android\n```\n-j5 means a job per ABI. Make sure you have installed Android SDK and NDK (see MakeAndroid file)\nThis target can also be executed on Windows.\n\n## Compile UrhoSharp on Windows\n\nObviously you can\'t do it on OS X so you have to switch to Windows\nenvironment. Make sure you have installed:\n\nYou will need:\n- Visual Studio 2017\n- [CMake 3.10](https://cmake.org/download)\n\nOpen "Command Prompt for Visual Studio" (or regular CMD with msbuild.exe added to the PATH)\nGo to the project root directory and execute\n```\nMakeWindows.bat x64 Release 2017 OpenGL\n```\nAll compiled binaries could be found in the Bin/{platform} folder.\nYou can also change the parameters, for example the following command:\n```\nMakeWindows.bat x86 Debug 2017 DirectX\n```\nCompiles debug version of mono-urho.dll with DirectX as a backend.\n\n## Compile UrhoSharp on Linux*\n\nSpecial thanks to [@aktowns](https://gist.github.com/aktowns)\nPrerequisites for Ubuntu 16.06\n```\nsudo apt-get install cmake clang-3.7 avr-libc libglew-dev libsdl2-dev libsdl2-image-dev libglm-dev libfreetype6-dev libgl1-mesa-dev libx11-dev\n```\nThen just execute:\n```\nmake Linux\n```\n*Tested on Ubuntu 16.06, Fedora 25 and WSL\n\nUpdating Documentation\n======================\n\nOnce you have a build, run the `refresh-docs` target, like this:\n\n```\nmake refresh-docs\n```\n\nThis will update the documentation based on the API changes.  Then you\ncan use a tool like DocWriter [1] on the Mac to edit the contents, or\njust edit the ECMA XML documentation by hand with an XML editor.\n\n[1] http://github.com/xamarin/DocWriter\n'