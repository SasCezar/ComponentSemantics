b'<p align="center"><img src="logo/LOGOTYPE-HORIZONTAL-BLUE.png"></p>\n\n# Pixel [![Build Status](https://travis-ci.org/faiface/pixel.svg?branch=master)](https://travis-ci.org/faiface/pixel) [![GoDoc](https://godoc.org/github.com/faiface/pixel?status.svg)](https://godoc.org/github.com/faiface/pixel) [![Go Report Card](https://goreportcard.com/badge/github.com/faiface/pixel)](https://goreportcard.com/report/github.com/faiface/pixel) [![Join the chat at https://gitter.im/pixellib/Lobby](https://badges.gitter.im/pixellib/Lobby.svg)](https://gitter.im/pixellib/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n\nA hand-crafted 2D game library in Go. Take a look into the [features](#features) to see what it can\ndo.\n\n```\ngo get github.com/faiface/pixel\n```\n\nIf you are using Modules (Go 1.11 or higher) and want a mutable copy of the source code:\n\n```\ngit clone https://github.com/faiface/pixel # clone outside of $GOPATH\ncd pixel\ngo install ./...\n```\n\nSee [requirements](#requirements) for the list of libraries necessary for compilation.\n\nAll significant changes are documented in [CHANGELOG.md](CHANGELOG.md).\n\n## Tutorial\n\nThe [Wiki of this repo](https://github.com/faiface/pixel/wiki) contains an extensive tutorial\ncovering several topics of Pixel. Here\'s the content of the tutorial parts so far:\n\n- [Creating a Window](https://github.com/faiface/pixel/wiki/Creating-a-Window)\n- [Drawing a Sprite](https://github.com/faiface/pixel/wiki/Drawing-a-Sprite)\n- [Moving, scaling and rotating with Matrix](https://github.com/faiface/pixel/wiki/Moving,-scaling-and-rotating-with-Matrix)\n- [Pressing keys and clicking mouse](https://github.com/faiface/pixel/wiki/Pressing-keys-and-clicking-mouse)\n- [Drawing efficiently with Batch](https://github.com/faiface/pixel/wiki/Drawing-efficiently-with-Batch)\n- [Drawing shapes with IMDraw](https://github.com/faiface/pixel/wiki/Drawing-shapes-with-IMDraw)\n- [Typing text on the screen](https://github.com/faiface/pixel/wiki/Typing-text-on-the-screen)\n- [Using a custom fragment shader](https://github.com/faiface/pixel/wiki/Using-a-custom-fragment-shader)\n\n## [Examples](https://github.com/faiface/pixel-examples)\n\nThe [examples](https://github.com/faiface/pixel-examples) repository contains a few\nexamples demonstrating Pixel\'s functionality.\n\n**To run an example**, navigate to it\'s directory, then `go run` the `main.go` file. For example:\n\n```\n$ cd pixel-examples/platformer\n$ go run main.go\n```\n\nHere are some screenshots from the examples!\n\n| [Lights](https://github.com/faiface/pixel-examples/blob/master/lights) | [Platformer](https://github.com/faiface/pixel-examples/blob/master/platformer) |\n| --- | --- |\n| ![Lights](https://github.com/faiface/pixel-examples/blob/master/lights/screenshot.png) | ![Platformer](https://github.com/faiface/pixel-examples/blob/master/platformer/screenshot.png) |\n\n| [Smoke](https://github.com/faiface/pixel-examples/blob/master/smoke) | [Typewriter](https://github.com/faiface/pixel-examples/blob/master/typewriter) |\n| --- | --- |\n| ![Smoke](https://github.com/faiface/pixel-examples/blob/master/smoke/screenshot.png) | ![Typewriter](https://github.com/faiface/pixel-examples/blob/master/typewriter/screenshot.png) |\n\n| [Raycaster](https://github.com/faiface/pixel-examples/blob/master/community/raycaster) | [Gizmo](https://github.com/Lallassu/gizmo) |\n| --- | --- |\n| ![Raycaster](https://github.com/faiface/pixel-examples/blob/master/community/raycaster/screenshot.png) | ![Gizmo](https://github.com/Lallassu/gizmo/blob/master/preview.png) |\n\n## Features\n\nHere\'s the list of the main features in Pixel. Although Pixel is still under heavy development,\n**there should be no major breakage in the API.** This is not a 100% guarantee, though.\n\n- Fast 2D graphics\n  - Sprites\n  - Primitive shapes with immediate mode style\n    [IMDraw](https://github.com/faiface/pixel/wiki/Drawing-shapes-with-IMDraw) (circles, rectangles,\n    lines, ...)\n  - Optimized drawing with [Batch](https://github.com/faiface/pixel/wiki/Drawing-efficiently-with-Batch)\n  - Text drawing with [text](https://godoc.org/github.com/faiface/pixel/text) package\n- Audio through a separate [Beep](https://github.com/faiface/beep) library.\n- Simple and convenient API\n  - Drawing a sprite to a window is as simple as `sprite.Draw(window, matrix)`\n  - Wanna know where the center of a window is? `window.Bounds().Center()`\n  - [...](https://godoc.org/github.com/faiface/pixel)\n- Full documentation and tutorial\n- Works on Linux, macOS and Windows\n- Window creation and manipulation (resizing, fullscreen, multiple windows, ...)\n- Keyboard (key presses, text input) and mouse input without events\n- Well integrated with the Go standard library\n  - Use `"image"` package for loading pictures\n  - Use `"time"` package for measuring delta time and FPS\n  - Use `"image/color"` for colors, or use Pixel\'s own `color.Color` format, which supports easy\n    multiplication and a few more features\n  - Pixel uses `float64` throughout the library, compatible with `"math"` package\n- Geometry transformations with\n  [Matrix](https://github.com/faiface/pixel/wiki/Moving,-scaling-and-rotating-with-Matrix)\n  - Moving, scaling, rotating\n  - Easy camera implementation\n- Off-screen drawing to Canvas or any other target (Batch, IMDraw, ...)\n- Fully garbage collected, no `Close` or `Dispose` methods\n- Full [Porter-Duff](http://ssp.impulsetrain.com/porterduff.html) composition, which enables\n  - 2D lighting\n  - Cutting holes into objects\n  - Much more...\n- Pixel let\'s you draw stuff and do your job, it doesn\'t impose any particular style or paradigm\n- Platform and backend independent [core](https://godoc.org/github.com/faiface/pixel)\n- Core Target/Triangles/Picture pattern makes it easy to create new drawing targets that do\n  arbitrarily crazy stuff (e.g. graphical effects)\n- Small codebase, ~5K lines of code, including the backend [glhf](https://github.com/faiface/glhf)\n  package\n\n ## Related repositories\n\n Here are some packages which use Pixel:\n - [TilePix](https://github.com/bcvery1/tilepix) Makes handling TMX files built with [Tiled](https://www.mapeditor.org/)\n trivially easy to work with using Pixel.\n\n## Missing features\n\nPixel is in development and still missing few critical features. Here\'re the most critical ones.\n\n- ~~Audio~~\n- ~~Drawing text~~\n- Antialiasing (filtering is supported, though)\n- ~~Advanced window manipulation (cursor hiding, window icon, ...)~~\n- Better support for Hi-DPI displays\n- Mobile (and perhaps HTML5?) backend\n- ~~More advanced graphical effects (e.g. blur)~~ (solved with the addition of GLSL effects)\n- Tests and benchmarks\n- Vulkan support\n\n**Implementing these features will get us to the 1.0 release.** Contribute, so that it\'s as soon as\npossible!\n\n## Requirements\n\nIf you\'re using Windows and having trouble building Pixel, please check [this\nguide](https://github.com/faiface/pixel/wiki/Building-Pixel-on-Windows) on the\n[wiki](https://github.com/faiface/pixel/wiki).\n\n[PixelGL](https://godoc.org/github.com/faiface/pixel/pixelgl) backend uses OpenGL to render\ngraphics. Because of that, OpenGL development libraries are needed for compilation. The dependencies\nare same as for [GLFW](https://github.com/go-gl/glfw).\n\nThe OpenGL version used is **OpenGL 3.3**.\n\n- On macOS, you need Xcode or Command Line Tools for Xcode (`xcode-select --install`) for required\n  headers and libraries.\n- On Ubuntu/Debian-like Linux distributions, you need `libgl1-mesa-dev` and `xorg-dev` packages.\n- On CentOS/Fedora-like Linux distributions, you need `libX11-devel libXcursor-devel libXrandr-devel\n  libXinerama-devel mesa-libGL-devel libXi-devel` packages.\n- See [here](http://www.glfw.org/docs/latest/compile.html#compile_deps) for full details.\n\n**The combination of Go 1.8, macOS and latest XCode seems to be problematic** as mentioned in issue\n[#7](https://github.com/faiface/pixel/issues/7). This issue is probably not related to Pixel.\n**Upgrading to Go 1.8.1 fixes the issue.**\n\n## Contributing\n\nPixel is in, let\'s say, mid-stage of development. Many of the important features are here, some are\nmissing. That\'s why **contributions are very important and welcome!** All alone, I will be able to\nfinish the library, but it\'ll take a lot of time. With your help, it\'ll take much less. I encourage\neveryone to contribute, even with just an idea. Especially welcome are **issues** and **pull\nrequests**.\n\n**However, I won\'t accept everything. Pixel is being developed with thought and care.** Each\ncomponent was designed and re-designed multiple times. Code and API quality is very important here.\nAPI is focused on simplicity and expressiveness.\n\nWhen contributing, keep these goals in mind. It doesn\'t mean that I\'ll only accept perfect pull\nrequests. It just means that I might not like your idea. Or that your pull requests could need some\nrewriting. That\'s perfectly fine, don\'t let it put you off. In the end, we\'ll just end up with a\nbetter result.\n\nTake a look at [CONTRIBUTING.md](CONTRIBUTING.md) for further information.\n\nFor any kind of discussion, feel free to use our\n[Gitter](https://gitter.im/pixellib/Lobby)\ncommunity.\n\n## License\n\n[MIT](LICENSE)\n'