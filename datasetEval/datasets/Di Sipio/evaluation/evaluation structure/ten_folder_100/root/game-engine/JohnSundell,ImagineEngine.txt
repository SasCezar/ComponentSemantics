b'<p align="center">\n    <img src="Logo.png" width="484" max-width="80%" alt="Imagine Engine" />\n</p>\n\n<p align="center">\n    <a href="https://dashboard.buddybuild.com/apps/59e21f30b84107000143844a/build/latest?branch=master">\n        <img src="https://dashboard.buddybuild.com/api/statusImage?appID=59e21f30b84107000143844a&branch=master&build=latest" />\n    </a>\n    <img src="https://img.shields.io/badge/Swift-5.0-orange.svg" />\n    <a href="https://cocoapods.org/pods/ImagineEngine">\n        <img src="https://img.shields.io/cocoapods/v/ImagineEngine.svg" alt="CocoaPods" />\n    </a>\n    <a href="https://github.com/Carthage/Carthage">\n        <img src="https://img.shields.io/badge/carthage-compatible-4BC51D.svg?style=flat" alt="Carthage" />\n    </a>\n    <a href="https://twitter.com/johnsundell">\n        <img src="https://img.shields.io/badge/contact-@johnsundell-blue.svg?style=flat" alt="Twitter: @johnsundell" />\n    </a>\n</p>\n\nWelcome to **Imagine Engine**, an ongoing project that aims to create a fast, high performance Swift 2D game engine for Apple\'s platforms that is also a joy to use. You are hereby invited to participate in this new community to build a tool with an ambitious but clear goal - to enable you to easily build any game that you can imagine.\n\n## Fast Core Animation-based rendering\n\nImagine Engine uses Core Animation as its rendering backend - just like Apple\'s UI frameworks like UIKit and AppKit do. By leveraging the power of Core Animation\'s hardware accelerated 2D rendering capabilities, Imagine Engine is able to push lots of pixels onto the screen at the same time. That means more objects, more effects and less restrictions when designing your games.\n\n## An easy to use API\n\nBesides its goal of being blazingly fast at rendering & updating your games, Imagine Engine aims to provide an easy to use API that anyone can learn - regardless of game development experience.\n\nStart with just a few lines of code...\n\n```swift\nlet scene = Scene(size: UIScreen.main.bounds.size)\n\nlet label = Label(text: "Hello world")\nlabel.position = scene.center\nscene.add(label)\n\nlet window = GameWindow(scene: scene)\nwindow.makeKeyAndVisible()\n```\n\n...and smoothly scale up as your game grows in complexity on either iOS, macOS or tvOS.\n\n\xf0\x9f\x8c\x83 **Scenes present your game content**\n\nA scene can be a level, a menu or a "Game over" screen. You can easily switch the active scene of a game. Here\'s how you can create a scene with a blue background color:\n\n```swift\nlet scene = Scene(size: Size(width: 500, height: 300))\nscene.backgroundColor = .blue\ngame.scene = scene\n```\n\n\xf0\x9f\x8e\xad **Actors bring your game to life**\n\nActors are what will make up most of the active objects in any game. They are movable, animatable, can handle collisions and much more. Here\'s an example of how you can create a player that renders a "Running" animation, and constantly moves to the right:\n\n```swift\nlet player = Actor()\nplayer.animation = Animation(name: "Running", frameCount: 5, frameDuration: 0.15)\nplayer.velocity.dx = 50\nscene.add(player)\n```\n\n\xf0\x9f\x93\xa6 **Easily create platforms and tiled textures with Blocks**\n\nUsing blocks you can easily tile textures together to form objects that can scale nicely to any size, without having to scale any texture. This is done by stitching together up to 9 different textures to form a block of textures rendered side by side. Here\'s how you can easily create a block from a folder named "Platform" that contains the textures that should be stitched together:\n\n```swift\nlet block = Block(size: Size(width: 300, height: 300), textureCollectionName: "Platform")\nscene.add(block)\n```\n\n\xf0\x9f\x85\xb0\xef\xb8\x8f **Render text using Labels**\n\nLabels let you add text content to your game. They automatically resize to fit your text content (unless you don\'t want them to) and can be used to implement things like UI, score counters, etc. Here\'s an example of adding a label to a scene:\n\n```swift\nlet label = Label(text: "Welcome to my game!")\nlabel.position = scene.center\nscene.add(label)\n```\n\n\xe2\x9a\xa1\xef\xb8\x8f **Use Events to drive your game logic**\n\nEvents enable you to quickly script your games to drive your own logic. Imagine Engine\'s various objects contain built in events that can be used to observe whenever an object was moved, collided with something, etc. You can also define your own events that can be used to communicate between various parts of your code. Here\'s how you can observe whenever two actors collided with each other:\n\n```swift\nlet player = Actor()\nlet enemy = Actor()\n\nplayer.events.collided(with: enemy).observe {\n    // Game over\n}\n```\n\n\xf0\x9f\x8f\x83 **Create animations and effects using Actions**\n\nActions let you make objects do something over a period of time, for example moving, resizing, fading in and out etc. Imagine Engine contains a suite of built-in actions and also makes it easy for you to define your own. Here\'s how an actor can be moved over 3 seconds:\n\n```swift\nlet actor = Actor()\nscene.add(actor)\nactor.move(byX: 200, y: 100, duration: 3)\n```\n\n\xf0\x9f\x94\x8c **Easily extend Imagine Engine with Plugins**\n\nInstead of relying on subclassing and overriding methods, Imagine Engine is designed to be easily extended through plugins. This enables you to share code between different games, and create new open source projects that add new functionality to the engine. You can attach plugins to most of Imagine Engine\'s objects, here\'s an example of creating a plugin that creates a new actor every time the scene is clicked or tapped:\n\n```swift\nclass MyPlugin: Plugin {\n    func activate(for scene: Scene, in game: Game) {\n        scene.events.clicked.observe { scene in\n            let actor = Actor()\n            actor.position = scene.center\n            scene.add(actor)\n        }\n    }\n}\n```\n\n\xf0\x9f\x95\x90 **Precise timing using Timelines**\n\nManaging time and delayed events can sometimes be tricky in game development. Imagine Engine aims to make this a lot easier through its timeline API, that enables you to schedule single or repeated events in the future without having to worry about screen updates or if the game is paused. Here\'s how you can add an event to spawn a new enemy every 5 seconds:\n\n```swift\nscene.timeline.repeat(withInterval: 5) {\n    let enemy = Actor()\n    enemy.animation = Animation(name: "Enemy", frameCount: 5, frameDuration: 0.15)\n    scene.add(enemy)\n}\n```\n\n## Platform support\n\n- [X] \xf0\x9f\x93\xb1 iOS 9 or later\n- [X] \xf0\x9f\x96\xa5 macOS 10.12 or later\n- [X] \xf0\x9f\x93\xba tvOS 10 or later\n\nImagine Engine supports all of Apple\'s platforms except watchOS. The API is also completely cross platform, so that you don\'t have to scatter `#if`s all over your game code.\n\n## Xcode templates\n\nImagine Engine ships with Xcode project templates that makes it super easy to get started with a new project. [You can find more information & installation instructions here](XcodeTemplates).\n\n## Let\'s get started!\n\nTo get started, check out the [tutorials section](https://github.com/JohnSundell/ImagineEngine/tree/master/Documentation/Tutorials), which contains tutorials that will walk you through building your first Imagine Engine-powered games with very few lines of code. No previous game developer experience required!\n\nIf you need help getting started or have a question about Imagine Engine, feel free to [open an issue](https://github.com/JohnSundell/ImagineEngine/issues/new)! We\'re a friendly community who would love to get more people involved.\n\nImagine Engine is in active development, with new features being constantly added. Need something new, or want to help out making the engine even more capable? [Browse and create new issues](https://github.com/JohnSundell/ImagineEngine/issues) or [open a PR](https://github.com/JohnSundell/ImagineEngine/pull/new/master).\n\nLets build some awesome games together! \xf0\x9f\x9a\x80\n'