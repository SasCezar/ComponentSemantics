b'Arcan\n=====\n\nArcan is a powerful development framework for creating virtually anything from\nuser interfaces for specialized embedded applications all the way to full-blown\nstandalone desktop environments.\n\nAt its heart lies a robust and portable multimedia engine, with a well-tested\nand well-documented Lua scripting interface. The development emphasizes\nsecurity, debuggability and performance -- guided by a principle of least\nsurprise in terms of API design.\n\nFor more details about capabilities, design, goals, current development,\nroadmap, changelogs, notes on contributing and so on, please refer to the\n[arcan-wiki](https://github.com/letoram/arcan/wiki).\n\nThere is also a [website](https://arcan-fe.com) that collects other links,\nannouncements, releases, videos / presentations and so on.\n\n* For community contact, check out the IRC channel #arcan on irc.freenode.net.\n\n* For developer information, see the HACKING.md\n\nFor curated issues, use the [git-bug](https://github.com/MichaelMure/git-bug)\ntool to browse the currently tracked and acknowledged issues and their details.\n\nWe do check the github issues page for user communication from time to time,\nand append as necessary, but it is not a priority.\n\nGetting Started\n====\n\nSome distributions, e.g. [voidlinux](https://voidlinux.org) have most of arcan\nas part of its packages, so you can save yourself some work going for one of\nthose.\n\nDocker- container templates (mainly used for headless development and testing)\ncan be found here: [dockerfiles](https://github.com/letoram/arcan-docker).\n\n## Compiling from Source\n\nThere are many ways to tune the build steps in order to reduce dependencies.\nThere are even more ways to configure and integrate the components depending\non what you are going for,\n\nMost options are exposed via the build output from running cmake on the src\ndirectory.\n\nFor the sake of simplicity over size, there is a build preset, \'everything\'\nwhich is the one we will use here.\n\n### Dependencies\n\nSpecific package names depend on your distribution, but common ones are:\n\n    sqlite3, openal-soft, sdl2, opengl, luajit, gbm, kms, freetype, harfbuzz\n    libxkbcommon\n\nFor encoding and decoding options you would also want:\n\n    libvlc-core (videolan), the ffmpeg suite, leptonica, tesseract\n    libvncserver libusb1\n\nFirst we need some in-source dependencies that are cloned manually for now:\n\n    git clone https://github.com/letoram/arcan.git\n    cd external/git\n    ../clone.sh\n    cd ../arcan\n\nThese are typically not needed, with the exception of our temporary openAL\npatches pending refactoring of that subsystem in time for the ~0.7 series of\nreleases.\n\n### Compiling\n\nNow we can configure and build the main engine:\n\n    mkdir build\n    cd build\n    cmake -DBUILD_PRESET="everything" ../src\n\nLike with other CMake based projects, you can add:\n\n    -DCMAKE_BUILD_TYPE=Debug\n\nTo switch from a release build to a debug one.\n\nWhen it has finished probing dependencies, you will get a report of which\ndependencies that has been found and which features that were turned on/off,\nor alert you if some of the required dependencies could not be found.\n\nMake and install like normal (i.e. make, sudo make install). A number of\nbinaries are produced, with the \'main\' one being called simply arcan. To\ntest \'in source\' (without installing) you should be able to run:\n\n     ./arcan -T ../data/scripts -p ../data/resources ../data/appl/welcome\n\nThe -T argument sets our built-in/shared set of scripts, the -p where shared\nresources like fonts and so on can be found, and the last argument being\nthe actual \'script\' to run.\n\nWith installation, this should reduce to:\n\n     arcan welcome\n\nIt will automatically try to figure out if it should be a native display\nserver or run nested within another or even itself based on the presence\nof various environment variables (DISPLAY, WAYLAND\\_DISPLAY, ARCAN\\_CONNPATH).\n\n\'welcome\' is a name of a simple builtin welcome screen, that will shut down\nautomatically after a few seconds of use. For something of more directly\nuseful, you can try the builtin appl \'console\':\n\n    arcan console\n\nWhich should work just like your normal console command-line, but with the\nadded twist of being able to run (arcan compatible) graphical applications\nas well.\n\n### Headless Mode\n\nThe \'everything\' build option should also produce a binary called\n\'arcan\\_headless\', at least on BSDs and Linux. This binary can be used to run\narcan without interfering with your other graphics and display system. Given\naccess to a \'render node\' (/dev/dri/renderD128 and so on) and it should also\nwork fine inside containers and other strict sandboxing solutions.\n\nTo make it useful, it can record/stream to a virtual screen. An example of\nsuch a setup following the example above would be:\n\n    ARCAN_VIDEO_ENCODE=protocol=vnc arcan_headless console\n\nAssuming the build-system found the libvncserver dependency, this should\nleave you with an exposed (insecure, unprotected, ...) vnc server at\nlocalhost+5900. See afsrv\\_encode for a list of arguments that can be added\nto the encode environment in order to control what happens.\n\nRelated Projects\n================\n\nIf you are not interested in developing something of your own, you will\nlikely find little use with the parts of this project alone. Here are some\nprojects that you might want to look into:\n\n* [Durden](https://github.com/letoram/durden) is the main desktop\n  environment that uses this project as its display server.\n\n* [Safespaces](https://github.com/letoram/safespaces) is an experimental\n  VR/3D desktop environment.\n\n* [Prio](https://github.com/letoram/prio) is a simple window manager\n  that mimics Plan9- Rio.\n\nTo get support for more types of clients and so on, there is also:\n\n* Wayland support (see Tools below).\n\n* [QEmu](https://github.com/letoram/qemu) a patched QEmu version that\n  adds a -ui arcan option.\n\n* [Xarcan](https://github.com/letoram/xarcan) is a patched Xorg that\n  allows you to run an X session \'as a window\'.\n\nTools\n=====\n\nThe default build above does not include any support tools other than the\nconfiguration tool, arcan\\_db. You have to manually build the ones that\nare of interest to you.\n\nThese tools are located in \'src/tools\', with their own specific README.md\nfiles for instructions on compilation and use.\n\nThe main tools of interest are:\n\n## arcan-db\n\nAll runtime configuration is consolidated into a database, either the default\n\'arcan.sqlite\' one or an explicitly set one (arcan -d mydb.sqlite). This is\nused for platform specific options, engine specific options and for trusted\nclients that the running scripts are allowed to start. It is also used as a\nconfiguration key-value store for any arcan applications that are running.\n\nAs a quick example, this is how to inspect and modify keys that \'Durden\'\nare currently using:\n\n    arcan_db show_appl durden\n    arcan_db add_appl_kv durden shadow_on true\n\nAdvanced configuration for some video platforms can be set via the reserved\narcan appl name. This would, for instance, set the primary graphics card\ndevice name for the \'egl-dri\' platform version:\n\n    arcan_db add_appl_kv arcan video_device=/dev/dri/card2\n\nTo add \'launch targets\', you can use something like:\n\n    arcan_db add_target BIN arcan-net -l netfwd\n    arcan_db add_config arcan-net default 10.0.0.10 6666\n\nThis allow applications to start a program as a trusted child (that inherits\nits connection primitives rather than to try and find them using some OS\ndependent namespace). The example above would have spawned arcan-net in the\nlocal mode where clients connecting to the \'netfwd\' connpath would be\nredirected to the server listening at 10.0.0.10:6666.\n\nThere are many controls and options for this tool, so it is suggested that you\nlook at its manpage for further detail and instructions.\n\n## Waybridge\n\nWaybridge adds support for wayland and X clients (via Xwayland). It can\nbe run as either a global system service, e.g.\n\n    arcan-wayland -xwl\n\nOr on a case by case basis, like:\n\n    arcan-wayland -exec weston-terminal\n\nFor a compliant wayland client, and:\n\n    arcan-wayland -xwl -exec xterm\n\nFor an X client. The \'per case\' basis is recommended as it is safer and\nmore secure than letting multiple clients share the same bridge process.\n\n## Acfgfs\n\nAcfgfs is a tool that lets you mount certain arcan applications as a FUSE\nfile-system. The application has to explicitly support it. For the Durden\ndesktop environment, you can use global/settings/system/control=somename\nand then:\n\n    arcan_cfgfs --control=/path/to/durden/ipc/somename /mnt/desktop\n\nAnd desktop control / configuration should be exposed in the specified\nmountpoint.\n\n## Aclip\n\nAclip is a clipboard manager similar to Xclip. It allows for bridging the\nclipboard between a desktop environment like Durden, and that of an X server.\n\nThis requires that clipboard bridging has been allowed (disabled by default\nfor security reaons). In Durden this is activated via\nglobal/settings/system/clipboard where you can control how much clipboard\naccess the tool gets.\n\n## Aloadimage\n\nAloadimage is a simple sandboxing image loader, similar to xloadimage. It\nis useful both for testing client behavior when developing applications\nusing arcan, but also as an image viewer in its own right, with reasonably\nfast image loading, basic playlist controls and so on.\n\n## Net\n\nArcan-net is a tool that allows you to forward one or many arcan clients\nover a network. It is built by default, and can be triggered both as a\nseparate network tool as well as being launched indirectly from shmif by\nsetting ARCAN\\_CONNPATH=a12://id@host:port.\n\n## Vrbridge\n\nVR bridge is an optional input driver that provides the arcan\\_vr binary\nwhich adds support for various head-mounted displays. More detailed\ninstructions on its setup and use can be found as part of the Safespaces\nproject mentioned in the \'Related Projects \'section.\n\n## Trayicon\n\nArcan-trayicon is a tool that chain-loads another arcan client, along with\ntwo reference images (active and inactive). It tries to register itself in\nthe icon-tray of a running arcan application, though it must explicitly\nenable the support. In Durden, this is done via the path:\n\n    global/settings/statusbar/buttons/right/add_external=tray\n\nThen you can use:\n\n    ARCAN_CONNPATH=tray arcan-trayicon active.svg inactive.svg afsrv_terminal\n\nOr some other arcan client that will then be loaded when the tray button is\nclicked, confined into a popup and then killed off as the popup is destroyed.\nThis is a quick and convenient way to wrap various system services and external\ncommand scripts.\n'