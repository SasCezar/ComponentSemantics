b'[![Pub](https://img.shields.io/pub/v/flame.svg?style=popout)](https://pub.dartlang.org/packages/flame) [![Build Status - Travis](https://travis-ci.org/flame-engine/flame.svg?branch=master)](https://travis-ci.org/flame-engine/flame) [![Discord](https://img.shields.io/discord/509714518008528896.svg)](https://discord.gg/pxrBmy4)\n\n# :fire: flame\n\n<img src="https://i.imgur.com/vFDilXT.png" width="400">\n\nA minimalist Flutter game engine.\n\nAny help is appreciated! Comment, suggestions, issues, PR\'s! Give us a star to help!\n\n## Help\n\nWe have a Flame help channel on Fireslime\'s Discord, join it [here](https://discord.gg/pxrBmy4). Also we now have a [FAQ](FAQ.md), so please search your questions there first.\n\n## Goals\n\nThe goal of this project is to provided a complete set of out-of-the-way solutions for the common problems every game developed in Flutter will share.\n\nCurrently it provides you with: a few utilities, images/sprites/sprite sheets, audio, a game loop and a component/object system.\n\nYou can use whatever ones you want, as they are all somewhat independent.\n\n## Support\n\nSupport us by becoming a patron on Patreon\n\n[![Patreon](https://c5.patreon.com/external/logo/become_a_patron_button.png)](https://www.patreon.com/fireslime)\n\nOr making a single donation buying us a coffee:\n\n[![Buy Me A Coffee](https://user-images.githubusercontent.com/835641/60540201-fcd7fa00-9ce4-11e9-87ec-1e98568e9f58.png)](https://www.buymeacoffee.com/fireslime)\n\nYou can also show support by showing on your repository that your game is made with Flame by using one of the following badges:\n\n[![Powered by Flame](https://img.shields.io/badge/Powered%20by-%F0%9F%94%A5-orange.svg)](https://flame-engine.org)\n[![Powered by Flame](https://img.shields.io/badge/Powered%20by-%F0%9F%94%A5-orange.svg?style=flat-square)](https://flame-engine.org)\n[![Powered by Flame](https://img.shields.io/badge/Powered%20by-%F0%9F%94%A5-orange.svg?style=for-the-badge)](https://flame-engine.org)\n\n```\n[![Powered by Flame](https://img.shields.io/badge/Powered%20by-%F0%9F%94%A5-orange.svg)](https://flame-engine.org)\n[![Powered by Flame](https://img.shields.io/badge/Powered%20by-%F0%9F%94%A5-orange.svg?style=flat-square)](https://flame-engine.org)\n[![Powered by Flame](https://img.shields.io/badge/Powered%20by-%F0%9F%94%A5-orange.svg?style=for-the-badge)](https://flame-engine.org)\n```\n\n## Contributing\n\nFound a bug on Flame and want to contribute with a PR? PRs are always very welcome, just be sure to create your PR from the `develop` branch.\n\n## External Modules\n\nFlame is modular, and you can always pick and choose. Some modules are extracted to separate plugins; some are bundled with flame, and some must be added separately.\n\n* [audioplayers](https://github.com/luanpotter/audioplayers) is the audio engine behind flame. It\'s included.\n* [tiled](https://github.com/feroult/tiled.dart) adds support for parsing and using TMX files from Tiled. It\'s included.\n* [box2d](https://github.com/feroult/box2d.dart) adds wrappers over Box2D for the physics engine. It\'s included.\n\n* [flame_gamepad](https://github.com/fireslime/flame_gamepad) adds support to gamepad. Android only. It\'s not included, add to your pubspec as desired.\n* [play_games](https://github.com/luanpotter/play_games) integrates to Google Play Games Services (GPGS). Adds login, achievements, saved games and leaderboard. Android only. It\'s not included, add to your pubspec as desired. Be sure to check the instructions on how to configure, as it\'s not trivial.\n\n## Usage\n\nJust drop it in your `pubspec.yaml`:\n\n```yaml\ndependencies:\n  flame: ^0.17.0\n```\n\nAnd start using it!\n\n__Important__\n\nWe strive to keep Flame working on the Flutter\'s stable channel, currently on version v1.7.8+hotfix.2, be sure to check which channel are you using if you encounter any trouble.\n\n## Documentation\n\nThe complete documentation can be found [here](doc/README.md).\n\nA very cool docs site can be found [here](https://flame-engine.org/).\n\n## Getting started\n\nCheck out this great series of articles/tutorials written by [Alekhin](https://github.com/japalekhin)\n\n - [Create a Mobile Game with Flutter and Flame \xe2\x80\x93 Beginner Tutorial](https://jap.alekhin.io/create-mobile-game-flutter-flame-beginner-tutorial)\n - [2D Casual Mobile Game Tutorial \xe2\x80\x93 Step by Step with Flame and Flutter (Part 1 of 5)](https://jap.alekhin.io/2d-casual-mobile-game-tutorial-flame-flutter-part-1)\n - [Game Graphics and Animation Tutorial \xe2\x80\x93 Step by Step with Flame and Flutter (Part 2 of 5)](https://jap.alekhin.io/game-graphics-and-animation-tutorial-flame-flutter-part-2)\n - [Views and Dialog Boxes Tutorial \xe2\x80\x93 Step by Step with Flame and Flutter (Part 3 of 5)](https://jap.alekhin.io/views-dialog-boxes-tutorial-flame-flutter-part-3)\n - [Scoring, Storage, and Sound Tutorial \xe2\x80\x93 Step by Step with Flame and Flutter (Part 4 of 5)](https://jap.alekhin.io/scoring-storage-sound-tutorial-flame-flutter-part-4)\n - [Game Finishing and Packaging Tutorial \xe2\x80\x93 Step by Step with Flame and Flutter (Part 5 of 5)](https://jap.alekhin.io/game-finishing-packaging-tutorial-flame-flutter-part-5)\n \nWe also offer a curated list of Games, Libraries and Articles over at [awesome-flame](https://github.com/flame-engine/awesome-flame).\n\n## Structure\n\nThe only structure you are required to comply is a assets folder with two sub folders: audio and images.\n\nAn example:\n\n```dart\n  Flame.audio.play(\'explosion.mp3\');\n\n  Flame.images.load(\'player.png\');\n  Flame.images.load(\'enemy.png\');\n```\n\nThe file structure would have to be:\n\n```\n.\n\xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 assets\n    \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 audio\n    \xe2\x94\x82   \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 explosion.mp3\n    \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 images\n        \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 enemy.png\n        \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 player.png\n```\n\nDon\'t forget to add these files to your `pubspec.yaml` file:\n\n```\nflutter:\n  assets:\n    - assets/audio/explosion.mp3\n    - assets/images/player.png\n    - assets/images/enemy.png\n```\n\n## Modules\n\nThe modular approach allows you to use any of these modules independently, or together, or as you wish.\n\n### Audio\n\nTo play an audio, just use the `Flame.audio.play` method:\n\n```dart\n    import \'package:flame/flame.dart\';\n\n    Flame.audio.play(\'explosion.mp3\');\n```\n\nYou can pre-load your audios in the beginning and avoid delays with the `loadAll` method:\n\n```dart\n    // in a async prepare function for your game\n    await Flame.audio.loadAll([\'explosion.mp3\']);\n```\n\n[Complete Audio Guide](doc/audio.md)\n\n[Looping Background Music Guide](doc/bgm.md)\n\n### Images\n\nIf you are using the Component module and doing something simple, you probably won\'t need to use these classes; use `SpriteComponent` or `AnimationComponent` instead.\n\nIf you want to load an image and render it on the `Canvas`, you can use the `Sprite` class:\n\n```dart\n    import \'package:flame/sprite.dart\';\n\n    Sprite sprite = Sprite(\'player.png\');\n\n    // in your render loop\n    sprite.render(canvas, width, height);\n```\n\nNote that the render method will do nothing while the image has not been loaded; you can check for completion using the `loaded` method.\n\n[Complete Images Guide](doc/images.md)\n\n### Component\n\nThis class represent a single object on the screen, being a floating rectangle or a rotating sprite.\n\nThe base abstract class has the common expected methods update and render to be implemented.\n\nThe intermediate inheritance `PositionComponent` adds `x`, `y`, `width`, `height` and `angle` to your Components, as well as some useful methods like distance and angleBetween.\n\nThe most commonly used implementation, `SpriteComponent`, can be created with a `Sprite`:\n\n```dart\n    import \'package:flame/components/component.dart\';\n\n    // on your constructor or init logic\n    Sprite sprite = Sprite(\'player.png\');\n\n    const size = 128.0;\n    final player = SpriteComponent.fromSprite(size, size, sprite); // width, height, sprite\n\n    // screen coordinates\n    player.x = ... // 0 by default\n    player.y = ... // 0 by default\n    player.angle = ... // 0 by default\n\n    // on your render method...\n    player.render(canvas); // it will render only if the image is loaded and the x, y, width and height parameters are not null\n```\n\nEvery `Component` has a few other methods that you can optionally implement, that are used by the `BaseGame` class. If you are not using the base game, you can alternatively use these methods on your own game loop.\n\nThe `resize` method is called whenever the screen is resized, and in the beginning once when the component is added via the `add` method. You need to apply here any changes to the x, y, width and height of your component, or any other changes, due to the screen resizing. You can start these variables here, as the sprite won\'t be rendered until everything is set.\n\nThe `destroy` method can be implemented to return true and warn the `BaseGame` that your object is marked for destruction, and it will be remove after the current update loop. It will then no longer be rendered or updated.\n\nThe `isHUD` method can be implemented to return true (default false) to make the `BaseGame` ignore the `camera` for this element.\n\nThere are also other implementations:\n\n* The `AnimationComponent` takes an `Animation` object and renders a cyclic animated sprite (more details about Animations [here](doc/images.md#Animation))\n* The `ParallaxComponent` can render a parallax background with several frames\n* The `Box2DComponent`, that has a physics engine built-in (using the [Box2D](https://github.com/google/box2d.dart) port for Dart)\n\n[Complete Components Guide](doc/components.md)\n\n### Game Loop\n\nThe Game Loop module is a simple abstraction over the game loop concept. Basically most games are built upon two methods: \n\n* The render method takes the canvas ready for drawing the current state of the game.\n* The update method receives the delta time in milliseconds since last update and allows you to move the next state.\n\nThe class `Game` can be subclassed and will provide both these methods for you to implement. In return it will provide you with a `widget` property that returns the game widget, that can be rendered in your app.\n\nYou can either render it directly in your `runApp`, or you can have a bigger structure, with routing, other screens and menus for your game.\n\nTo start, just add your game widget directly to your runApp, like so:\n\n```dart\n    main() {\n        Game game = MyGameImpl();\n        runApp(game.widget);\n    }\n```\n\nInstead of implementing the low level `Game` class, you should probably use the more full-featured `BaseGame` class.\n\nThe `BaseGame` implements a `Component` based `Game` for you; basically it has a list of `Component`s and repasses the `update` and `render` calls appropriately. You can still extend those methods to add custom behavior, and you will get a few other features for free, like the repassing of `resize` methods (every time the screen is resized the information will be passed to the resize methods of all your components) and also a basic camera feature (that will translate all your non-HUD components in order to center in the camera you specified).\n\nA very simple `BaseGame` implementation example can be seen below:\n\n```dart\n    class MyCrate extends SpriteComponent {\n\n        // creates a component that renders the crate.png sprite, with size 16 x 16\n        MyCrate() : SpriteComponent.fromSprite(16.0, 16.0, new Sprite(\'crate.png\'));\n\n        @override\n        void resize(Size size) {\n            // we don\'t need to set the x and y in the constructor, we can set then here\n            this.x = (size.width - this.width)/ 2;\n            this.y = (size.height - this.height) / 2;\n        }\n    }\n\n    class MyGame extends BaseGame {\n        MyGame() {\n            add(new MyCrate()); // this will call resize the first time as well\n        }\n    }\n```\n\n### Input\n\nInside `package:flame/gestures.dart` you can find a whole set of `mixin` which can be included on your game class instance to be able to receive touch input events\n\n__Example__\n\n```dart\nclass MyGame extends Game with TapDetector {\n  // Other methods ommited\n\n  @override\n  void onTapDown(TapDownDetails details) {\n    print("Player tap down on ${details.globalPosition.dx} - ${details.globalPosition.dy}");\n  }\n\n  @override\n  void onTapUp(TapUpDetails details) {\n    print("Player tap up on ${details.globalPosition.dx} - ${details.globalPosition.dy}");\n  }\n}\n```\n\n[Complete Input Guide](doc/input.md)\n\n## Credits\n\n * All the friendly contributors and people who are helping in the community.\n * My own [audioplayers](https://github.com/luanpotter/audioplayer) lib, which in turn is forked from [rxlabz\'s](https://github.com/rxlabz/audioplayer).\n * The Dart port of [Box2D](https://github.com/google/box2d.dart).\n * [inu-no-policemen\'s post on reddit](https://www.reddit.com/r/dartlang/comments/69luui/minimal_flutter_game_loop/), which helped me a lot with the basics\n * Everyone who answered my beginner\'s questions on Stack Overflow\n'