b"![EnTT: Gaming meets modern C++](https://user-images.githubusercontent.com/1812216/42513718-ee6e98d0-8457-11e8-9baf-8d83f61a3097.png)\n\n<!--\n@cond TURN_OFF_DOXYGEN\n-->\n[![GitHub version](https://badge.fury.io/gh/skypjack%2Fentt.svg)](https://github.com/skypjack/entt/releases)\n[![Build Status](https://github.com/skypjack/entt/workflows/build/badge.svg)](https://github.com/skypjack/entt/actions)\n[![Coverage](https://codecov.io/gh/skypjack/entt/branch/master/graph/badge.svg)](https://codecov.io/gh/skypjack/entt)\n[![Try online](https://img.shields.io/badge/try-online-brightgreen)](https://godbolt.org/z/v8txVr)\n[![Gitter chat](https://badges.gitter.im/skypjack/entt.png)](https://gitter.im/skypjack/entt)\n[![Donate](https://img.shields.io/badge/donate-paypal-blue.svg)](https://www.paypal.me/skypjack)\n[![Patreon](https://img.shields.io/badge/become-patron-red.svg)](https://www.patreon.com/bePatron?c=1772573)\n\n`EnTT` is a header-only, tiny and easy to use library for game programming and\nmuch more written in **modern C++**, mainly known for its innovative\n**entity-component-system (ECS)** model.<br/>\n[Among others](https://github.com/skypjack/entt/wiki/EnTT-in-Action), it's used\nin [**Minecraft**](https://minecraft.net/en-us/attribution/) by Mojang and the\n[**ArcGIS Runtime SDKs**](https://developers.arcgis.com/arcgis-runtime/) by\nEsri. Open an issue or submit a PR if you don't see your project in the list!\n\n---\n\nDo you want to **keep up with changes** or do you have a **question** that\ndoesn't require you to open an issue?<br/>\nJoin the [gitter channel](https://gitter.im/skypjack/entt) and meet other users\nlike you. The more we are, the better for everyone.\n\nWondering why your **debug build** is so slow on Windows or how to represent a\n**hierarchy** with components?<br/>\nCheck out the\n[FAQ](https://github.com/skypjack/entt/wiki/Frequently-Asked-Questions) and the\n[wiki](https://github.com/skypjack/entt/wiki) if you have these or other doubts,\nyour answers may already be there.\n\nIf you use `EnTT` and you want to say thanks or support the project, please\n**consider becoming a\n[sponsor](https://github.com/users/skypjack/sponsorship)**.<br/>\nYou can help me make the difference.\n[Many thanks](https://skypjack.github.io/sponsorship/) to those who supported me\nand still support me today.\n\n# Table of Contents\n\n* [Introduction](#introduction)\n  * [Code Example](#code-example)\n  * [Motivation](#motivation)\n  * [Performance](#performance)\n* [Build Instructions](#build-instructions)\n  * [Requirements](#requirements)\n  * [Library](#library)\n  * [Documentation](#documentation)\n  * [Tests](#tests)\n* [Packaging Tools](#packaging-tools)\n* [EnTT in Action](#entt-in-action)\n* [Contributors](#contributors)\n* [License](#license)\n* [Support](#support)\n<!--\n@endcond TURN_OFF_DOXYGEN\n-->\n\n# Introduction\n\nThe entity-component-system (also known as _ECS_) is an architectural pattern\nused mostly in game development. For further details:\n\n* [Entity Systems Wiki](http://entity-systems.wikidot.com/)\n* [Evolve Your Hierarchy](http://cowboyprogramming.com/2007/01/05/evolve-your-heirachy/)\n* [ECS on Wikipedia](https://en.wikipedia.org/wiki/Entity%E2%80%93component%E2%80%93system)\n\nThis project started off as a pure entity-component system. Over time the\ncodebase has grown as more and more classes and functionalities were added.<br/>\nHere is a brief, yet incomplete list of what it offers today:\n\n* Statically generated integer **identifiers** for types (assigned either at\n  compile-time or at runtime).\n* A `constexpr` utility for human readable **resource names**.\n* A minimal **configuration system** built using the monostate pattern.\n* An incredibly fast **entity-component system** based on sparse sets, with its\n  own _pay for what you use_ policy to adjust performance and memory usage\n  according to the users' requirements.\n* Views and groups to iterate entities and components and allow different access\n  patterns, from **perfect SoA** to fully random.\n* A lot of **facilities** built on top of the entity-component system to help\n  the users and avoid reinventing the wheel (dependencies, snapshot, actor\n  class, support for **reactive systems** and so on).\n* The smallest and most basic implementation of a **service locator** ever seen.\n* A built-in, non-intrusive and macro-free runtime **reflection system**.\n* A **cooperative scheduler** for processes of any type.\n* All that is needed for **resource management** (cache, loaders, handles).\n* Delegates, **signal handlers** (with built-in support for collectors) and a\n  tiny event dispatcher for immediate and delayed events to integrate in loops.\n* A general purpose **event emitter** as a CRTP idiom based class template.\n* And **much more**! Check out the\n  [**wiki**](https://github.com/skypjack/entt/wiki).\n\nConsider this list a work in progress as well as the project. The whole API is\nfully documented in-code for those who are brave enough to read it.\n\nCurrently, `EnTT` is tested on Linux, Microsoft Windows and OSX. It has proven\nto work also on both Android and iOS.<br/>\nMost likely it won't be problematic on other systems as well, but it hasn't been\nsufficiently tested so far.\n\n## Code Example\n\n```cpp\n#include <entt/entt.hpp>\n#include <cstdint>\n\nstruct position {\n    float x;\n    float y;\n};\n\nstruct velocity {\n    float dx;\n    float dy;\n};\n\nvoid update(entt::registry &registry) {\n    auto view = registry.view<position, velocity>();\n\n    for(auto entity: view) {\n        // gets only the components that are going to be used ...\n\n        auto &vel = view.get<velocity>(entity);\n\n        vel.dx = 0.;\n        vel.dy = 0.;\n\n        // ...\n    }\n}\n\nvoid update(std::uint64_t dt, entt::registry &registry) {\n    registry.view<position, velocity>().each([dt](auto &pos, auto &vel) {\n        // gets all the components of the view at once ...\n\n        pos.x += vel.dx * dt;\n        pos.y += vel.dy * dt;\n\n        // ...\n    });\n}\n\nint main() {\n    entt::registry registry;\n    std::uint64_t dt = 16;\n\n    for(auto i = 0; i < 10; ++i) {\n        auto entity = registry.create();\n        registry.assign<position>(entity, i * 1.f, i * 1.f);\n        if(i % 2 == 0) { registry.assign<velocity>(entity, i * .1f, i * .1f); }\n    }\n\n    update(dt, registry);\n    update(registry);\n\n    // ...\n}\n```\n\n## Motivation\n\nI started developing `EnTT` for the _wrong_ reason: my goal was to design an\nentity-component system to beat another well known open source solution both in\nterms of performance and possibly memory usage.<br/>\nIn the end, I did it, but it wasn't very satisfying. Actually it wasn't\nsatisfying at all. The fastest and nothing more, fairly little indeed. When I\nrealized it, I tried hard to keep intact the great performance of `EnTT` and to\nadd all the features I wanted to see in *my own library* at the same time.\n\nNowadays, `EnTT` is finally what I was looking for: still faster than its\n_competitors_, lower memory usage in the average case, a really good API and an\namazing set of features. And even more, of course.\n\n## Performance\n\nThe proposed entity-component system is incredibly fast to iterate entities and\ncomponents, this is a fact. Some compilers make a lot of optimizations because\nof how `EnTT` works, some others aren't that good. In general, if we consider\nreal world cases, `EnTT` is somewhere between a bit and much faster than many of\nthe other solutions around, although I couldn't check them all for obvious\nreasons.\n\nIf you are interested, you can compile the `benchmark` test in release mode (to\nenable compiler optimizations, otherwise it would make little sense) by setting\nthe `BUILD_BENCHMARK` option of `CMake` to `ON`, then evaluate yourself whether\nyou're satisfied with the results or not.\n\nHonestly I got tired of updating the README file whenever there is an\nimprovement.<br/>\nThere are already a lot of projects out there that use `EnTT` as a basis for\ncomparison (this should already tell you a lot). Many of these benchmarks are\ncompletely wrong, many others are simply incomplete, good at omitting some\ninformation and using the wrong function to compare a given feature. Certainly\nthere are also good ones but they age quickly if nobody updates them, especially\nwhen the library they are dealing with is actively developed.\n\nThe choice to use `EnTT` should be based on its carefully designed API, its\nset of features and the general performance, **not** because some single\nbenchmark shows it to be the fastest tool available.\n\nIn the future I'll likely try to get even better performance while still adding\nnew features, mainly for fun.<br/>\nIf you want to contribute and/or have suggestions, feel free to make a PR or\nopen an issue to discuss your idea.\n\n# Build Instructions\n\n## Requirements\n\nTo be able to use `EnTT`, users must provide a full-featured compiler that\nsupports at least C++17.<br/>\nThe requirements below are mandatory to compile the tests and to extract the\ndocumentation:\n\n* `CMake` version 3.2 or later.\n* `Doxygen` version 1.8 or later.\n\nAlternatively, `Bazel` is also supported as a build system (credits to\n[zaucy](https://github.com/zaucy) who introduced what's required with\n[this](https://github.com/skypjack/entt/pull/291) pull request and offered to\nmaintain it).<br/>\nIn the documentation below I'll still refer to `CMake`, this being the official\nbuild system of the library.\n\nIf you are looking for a C++14 version of `EnTT`, check out the git tag `cpp14`.\n\n## Library\n\n`EnTT` is a header-only library. This means that including the `entt.hpp` header\nis enough to include the library as a whole and use it. For those who are\ninterested only in the entity-component system, consider to include the sole\n`entity/registry.hpp` header instead.<br/>\nIt's a matter of adding the following line to the top of a file:\n\n```cpp\n#include <entt/entt.hpp>\n```\n\nUse the line below to include only the entity-component system instead:\n\n```cpp\n#include <entt/entity/registry.hpp>\n```\n\nThen pass the proper `-I` argument to the compiler to add the `src` directory to\nthe include paths.\n\n## Documentation\n\nThe documentation is based on [doxygen](http://www.doxygen.nl/).\nTo build it:\n\n    $ cd build\n    $ cmake .. -DBUILD_DOCS=ON\n    $ make\n\nThe API reference will be created in HTML format within the directory\n`build/docs/html`. To navigate it with your favorite browser:\n\n    $ cd build\n    $ your_favorite_browser docs/html/index.html\n\n<!--\n@cond TURN_OFF_DOXYGEN\n-->\nIt's also available [online](https://skypjack.github.io/entt/) for the latest\nversion.<br/>\nFinally, there exists a [wiki](https://github.com/skypjack/entt/wiki) dedicated\nto the project where users can find all related documentation pages.\n<!--\n@endcond TURN_OFF_DOXYGEN\n-->\n\n## Tests\n\nTo compile and run the tests, `EnTT` requires *googletest*.<br/>\n`cmake` will download and compile the library before compiling anything else.\nIn order to build the tests, set the CMake option `BUILD_TESTING` to `ON`.\n\nTo build the most basic set of tests:\n\n* `$ cd build`\n* `$ cmake -DBUILD_TESTING=ON ..`\n* `$ make`\n* `$ make test`\n\nNote that benchmarks are not part of this set.\n\n# Packaging Tools\n\n`EnTT` is available for some of the most known packaging tools. In particular:\n\n* [`Conan`](https://bintray.com/skypjack/conan/entt%3Askypjack/_latestVersion),\n  the C/C++ Package Manager for Developers.\n\n* [`vcpkg`](https://github.com/Microsoft/vcpkg/tree/master/ports/entt),\n  Microsoft VC++ Packaging Tool.<br/>\n  You can download and install `EnTT` in just a few simple steps:\n\n  ```\n  $ git clone https://github.com/Microsoft/vcpkg.git\n  $ cd vcpkg\n  $ ./bootstrap-vcpkg.sh\n  $ ./vcpkg integrate install\n  $ vcpkg install entt\n  ```\n\n  The `EnTT` port in `vcpkg` is kept up to date by Microsoft team members and\n  community contributors.<br/>\n  If the version is out of date, please\n  [create an issue or pull request](https://github.com/Microsoft/vcpkg) on the\n  `vcpkg` repository.\n\n* [`Homebrew`](https://github.com/skypjack/homebrew-entt), the missing package\n  manager for macOS.<br/>\n  Available as a homebrew formula. Just type the following to install it:\n\n  ```\n  brew install skypjack/entt/entt\n  ```\n\nConsider this list a work in progress and help me to make it longer.\n\n<!--\n@cond TURN_OFF_DOXYGEN\n-->\n# EnTT in Action\n\n`EnTT` is widely used in private and commercial applications. I cannot even\nmention most of them because of some signatures I put on some documents time\nago. Fortunately, there are also people who took the time to implement open\nsource projects based on `EnTT` and did not hold back when it came to\ndocumenting them.\n\n[Here](https://github.com/skypjack/entt/wiki/EnTT-in-Action) you can find an\nincomplete list of games, applications and articles that can be used as a\nreference.\n\nIf you know of other resources out there that are about `EnTT`, feel free to\nopen an issue or a PR and I'll be glad to add them to the list.\n\n# Contributors\n\n`EnTT` was written initially as a faster alternative to other well known and\nopen source entity-component systems. Nowadays this library is moving its first\nsteps. Much more will come in the future and hopefully I'm going to work on it\nfor a long time.<br/>\nRequests for features, PR, suggestions ad feedback are highly appreciated.\n\nIf you find you can help me and want to contribute to the project with your\nexperience or you do want to get part of the project for some other reasons,\nfeel free to contact me directly (you can find the mail in the\n[profile](https://github.com/skypjack)).<br/>\nI can't promise that each and every contribution will be accepted, but I can\nassure that I'll do my best to take them all seriously.\n\nIf you decide to participate, please see the guidelines for\n[contributing](CONTRIBUTING.md) before to create issues or pull\nrequests.<br/>\nTake also a look at the\n[contributors list](https://github.com/skypjack/entt/blob/master/AUTHORS) to\nknow who has participated so far.\n<!--\n@endcond TURN_OFF_DOXYGEN\n-->\n\n# License\n\nCode and documentation Copyright (c) 2017-2019 Michele Caini.<br/>\nLogo Copyright (c) 2018-2019 Richard Caseres.\n\nCode released under\n[the MIT license](https://github.com/skypjack/entt/blob/master/LICENSE).\nDocumentation released under\n[CC BY 4.0](https://creativecommons.org/licenses/by/4.0/).<br/>\nLogo released under\n[CC BY-SA 4.0](https://creativecommons.org/licenses/by-sa/4.0/).\n\n<!--\n@cond TURN_OFF_DOXYGEN\n-->\n# Support\n\nIf you want to support this project, you can\n[offer me](https://github.com/users/skypjack/sponsorship) an espresso.<br/>\nIf you find that it's not enough, feel free to\n[help me](https://www.paypal.me/skypjack) the way you prefer.\n<!--\n@endcond TURN_OFF_DOXYGEN\n-->\n"