b'# Coffee\n\n[![Integration status](https://github.com/hecrj/coffee/workflows/Integration/badge.svg)](https://github.com/hecrj/coffee/actions)\n[![Documentation](https://docs.rs/coffee/badge.svg)](https://docs.rs/coffee)\n[![Crates.io](https://img.shields.io/crates/v/coffee.svg)](https://crates.io/crates/coffee)\n[![License](https://img.shields.io/crates/l/coffee.svg)](https://github.com/hecrj/coffee/blob/master/LICENSE)\n[![Gitter chat](https://badges.gitter.im/hecrj/coffee.png)](https://gitter.im/hecrj/coffee)\n\nAn opinionated 2D game engine for Rust focused on simplicity, explicitness, and\ntype-safety.\n\n__Coffee is in a very early stage of development.__ Active development is\nplanned during 2019 (and hopefully beyond that!). Many [basic features are still\nmissing], some [dependencies are experimental], and there are probably _many_\nbugs. [Feel free to contribute!]\n\n[basic features are still missing]: https://github.com/hecrj/coffee/issues?q=is%3Aissue+is%3Aopen+label%3Afeature\n[dependencies are experimental]: #implementation-details\n[Feel free to contribute!]: #contributing--feedback\n\n## Features\n  * [Responsive, customizable GUI]\n  * Declarative, type-safe loading screens with progress tracking\n  * Built-in [debug view with performance metrics]\n  * Fixed, deterministic timestep\n  * Explicit, easy to use, hardware-accelerated 2D graphics API\n  * Multiplatform support leveraging OpenGL, Vulkan, Metal, D3D11, and D3D12\n  * [Explicit and efficient batched draws]\n  * [Mesh support]\n  * Texture array support\n  * Off-screen rendering\n  * TrueType font rendering\n  * Gamepad support\n\nAnd more! Check out the [examples] to see them in action.\n\n[Responsive, customizable GUI]: https://gfycat.com/gloomyweakhammerheadshark\n[debug view with performance metrics]: https://github.com/hecrj/coffee/blob/master/images/debug.png\n[Explicit and efficient batched draws]: https://gfycat.com/beautifulseparatebeetle\n[Mesh support]: https://gfycat.com/academicglossykingfisher\n\n## Usage\nAdd `coffee` as a dependency in your `Cargo.toml` and enable a graphics backend\nfeature (`opengl`, `vulkan`, `metal`, `dx11`, or `dx12`):\n\n```toml\ncoffee = { version = "0.3", features = ["opengl"] }\n```\n\nRust is quite slow in debug mode. If you experience performance issues when\ndrawing hundreds of sprites, enable compiler optimizations in your `Cargo.toml`.\nI recommend level 2 optimizations in order to stay closer to `--release`\nperformance:\n\n```toml\n[profile.dev]\nopt-level = 2\n```\n\n__Coffee moves fast and the `master` branch can contain breaking changes!__ If\nyou want to learn about a specific release, check out [the release list].\n\n[the release list]: https://github.com/hecrj/coffee/releases\n\n## Overview\nHere is a minimal example that will open a window:\n\n```rust\nuse coffee::graphics::{Color, Frame, Window, WindowSettings};\nuse coffee::load::Task;\nuse coffee::{Game, Result, Timer};\n\nfn main() -> Result<()> {\n    MyGame::run(WindowSettings {\n        title: String::from("A caffeinated game"),\n        size: (1280, 1024),\n        resizable: true,\n        fullscreen: false,\n        maximized: false,\n    })\n}\n\nstruct MyGame {\n    // Your game state and assets go here...\n}\n\nimpl Game for MyGame {\n    type Input = (); // No input data\n    type LoadingScreen = (); // No loading screen\n\n    fn load(_window: &Window) -> Task<MyGame> {\n        // Load your game assets here. Check out the `load` module!\n        Task::succeed(|| MyGame { /* ... */ })\n    }\n\n    fn draw(&mut self, frame: &mut Frame, _timer: &Timer) {\n        // Clear the current frame\n        frame.clear(Color::BLACK);\n\n        // Draw your game here. Check out the `graphics` module!\n    }\n}\n```\n\nBrowse the [documentation] and the [examples] to learn more!\n\n[documentation]: https://docs.rs/coffee\n[examples]: https://github.com/hecrj/coffee/tree/master/examples\n\n## Implementation details\nCoffee builds upon\n\n  * [`winit`] for windowing and mouse/keyboard events.\n  * [`gfx` pre-ll] for OpenGL support, based heavily on the [`ggez`] codebase.\n  * [`wgpu`] for _experimental_ Vulkan, Metal, D3D11 and D3D12 support.\n  * [`stretch`] for responsive GUI layouting based on Flexbox.\n  * [`glyph_brush`] for TrueType font rendering.\n  * [`gilrs`] for gamepad support.\n  * [`nalgebra`] for the `Point`, `Vector`, and `Transformation` types.\n  * [`image`] for image loading and texture array building.\n\n[`winit`]: https://github.com/rust-windowing/winit\n[`gfx` pre-ll]: https://github.com/gfx-rs/gfx/tree/pre-ll\n[`wgpu`]: https://github.com/gfx-rs/wgpu\n[`stretch`]: https://github.com/vislyhq/stretch\n[`glyph_brush`]: https://github.com/alexheretic/glyph-brush/tree/master/glyph-brush\n[`gilrs`]: https://gitlab.com/gilrs-project/gilrs\n[`nalgebra`]: https://github.com/rustsim/nalgebra\n[`image`]: https://github.com/image-rs/image\n\n## Contributing / Feedback\nI am quite new to Rust, systems programming, and computer graphics. I am\nlearning along the way as I build the engine for a game I am currently\ndeveloping. I am always glad to to learn from anyone.\n\nIf you want to contribute, you are more than welcome to be a part of the\nproject! Check out the current [issues] if you want to find something to work\non. Try to share you thoughts first! Feel free to open a new issue if you want\nto discuss new ideas.\n\nAny kind of feedback is welcome! You can open an issue or, if you want to talk,\nyou can find me (and a bunch of awesome folks) over the `#games-and-graphics`\nchannel in the [Rust Community Discord]. I go by `@lone_scientist` there.\n\n[issues]: https://github.com/hecrj/coffee/issues\n[Rust Community Discord]: https://bit.ly/rust-community\n\n## Credits / Thank you\n  * [`ggez`], an awesome, easy-to-use, good game engine that introduced me to\n    Rust. Its graphics implementation served me as a guide to implement OpenGL\n    support for Coffee.\n  * [Kenney], creators of amazing free game assets with no strings attached. The\n    built-in GUI renderer in Coffee uses a modified version of their UI sprites.\n\n[`ggez`]: https://github.com/ggez/ggez\n[Kenney]: https://kenney.nl\n'