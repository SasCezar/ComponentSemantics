b'# tiny-pico8-touch-ui\n\nA tiny library which makes it easy to add touch controls to your [PICO-8](https://www.lexaloffle.com/pico-8.php) web game.\n\n### [Try it here!](https://benwiley4000.github.io/tiny-pico8-touch-ui/)\n\nPICO-8\'s default web export doesn\'t yet support touch controls, but I want my game to support mobile, which means supporting touch. If you\'re like me, you might find the built-in API for controlling touch button inputs from a web page a bit esoteric, and not super easy to read/write. Why not write a tiny API wrapper that makes this much easier?\n\nIf you have a page that looks like this:\n\n```html\n<!-- ... cart stuff -->\n<button id="left"> < </button>\n<button id="right"> > </button>\n<button id="up"> /\\ </button>\n<button id="down"> \\/ </button>\n<button id="o"> O </button>\n<button id="x"> X </button>\n<!-- ... script stuff -->\n```\n\nInclude [this](tiny-pico8-touch-ui.js) in your page...\n\n```html\n<script src="tiny-pico8-touch-ui.js"></script>\n```\n\nThen later you can register buttons like this:\n\n```html\n<script>\n  registerP8Btn(document.getElementById(\'left\'), 0);\n  registerP8Btn(document.getElementById(\'right\'), 1);\n  registerP8Btn(document.getElementById(\'up\'), 2);\n  registerP8Btn(document.getElementById(\'down\'), 3);\n  registerP8Btn(document.getElementById(\'o\'), 4);\n  registerP8Btn(document.getElementById(\'x\'), 5);\n</script>\n```\n\nAre you trying to support multiple players? Then you can do:\n\n```js\nregisterP8Btn(document.getElementById(\'x-P1\'), 5, 0 /* player 1 */);\nregisterP8Btn(document.getElementById(\'x-P2\'), 5, 1 /* player 2 */);\n```\n\nThat\'s it!\n\n> [FAQ](#faq)\n\n## fetching script from CDN\n\nIf you prefer to fetch tiny-pico8-touch-ui.js from a CDN:\n\n```html\n<script src="https://unpkg.com/tiny-pico8-touch-ui"></script>\n```\n\n(It\'s better to specify a specific version string rather than letting unpkg serve you the latest version each time the page is fetched; try opening https://unpkg.com/tiny-pico8-touch-ui in a web browser first so it resolves to a more specific URL, then include that as your script `src`.)\n\n## installing as a module\n\nYou can also install from npm:\n\n```console\nnpm install --save tiny-pico8-touch-ui\n```\n\nAnd use like this:\n\n```js\nvar registerP8Btn = require(\'tiny-pico8-touch-ui\');\n\nregisterP8Btn(document.getElementById(\'left\'), 0);\n```\n\n## building example site\n\nTo build a new copy of the example javascript export, open PICO-8 and run:\n\n```console\nload example.p8\nexport index.js\n```\n\nThen open index.html in a web browser.\n\n## FAQ\n\n### that worked, but there\'s no sound!\n\nThat will happen on many phones (not because of this library, but because PICO-8 starts running before the user has interacted with the screen).\n\nTo get around that, you can defer running your game until after the user has clicked on the screen. Here\'s a way to do that (this is undocumented and might change in a future PICO-8 release):\n\n```html\n<button id="myGameStartButton">Start!</button>\n<script>\n  var Module = {};\n  // ...\n  // This part is important!!\n  Module.noInitialRun = true;\n</script>\n<script src="mygame.js"></script>\n<script>\n  var game_started = false;\n  function startGame() {\n    if (game_started) return;\n    game_started = true;\n    Module.calledRun = false;\n    window.shouldRunNow = true;\n    run();\n  }\n  document.querySelector(\'#myGameStartButton\')\n    .addEventListener(\'click\', startGame);\n</script>\n```\n\n### ok that works, but I don\'t actually want to display touch controls if the page is loaded on a computer\n\nCheck for a `touchstart` event and set a variable so when the subsequent `click` event follows, you know to show touch controls.\n\n```html\n<style>\n  .touch_controls {\n    display: none;\n  }\n  .using_touch .touch_controls {\n    display: initial;\n  }\n</style>\n<div class="touch_controls">\n  <button id="left"> < </button>\n  <!-- ... -->\n</div>\n<!-- ... -->\n<script>\n  var game_started = false;\n  var using_touch = false;\n  function startGame() {\n    if (game_started) return;\n    game_started = true;\n    if (using_touch) {\n      document.body.classList.add(\'using_touch\');\n    }\n    Module.calledRun = false;\n    window.shouldRunNow = true;\n    run();\n  }\n  document.querySelector(\'#myGameStartButton\')\n    .addEventListener(\'click\', startGame);\n  \n  // on a touch device, touchstart always\n  // gets processed before click\n  function activateTouch() {\n    using_touch = true;\n  }\n  document.addEventListener(\'touchstart\', activateTouch);\n</script>\n```\n'