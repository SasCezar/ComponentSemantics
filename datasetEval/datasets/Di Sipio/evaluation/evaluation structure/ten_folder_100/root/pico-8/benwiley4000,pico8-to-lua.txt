b"# pico8-to-lua\n\nA command-line utility written in Lua that converts the [PICO-8](https://www.lexaloffle.com/pico-8.php) variety of extended Lua syntax to standard Lua syntax.\n\nIt's a thin wrapper around the internal syntax converter from [PICOLOVE](https://github.com/picolove/picolove).\n\nReasons you might find this useful:\n- You want to run a tool built for Lua on your code, and the tool won't recognize it because you're using special PICO-8 syntax\n- You want better syntax highlighting support in your text editor\n- You want to extract a function you wrote for PICO-8 and use it in a different Lua program\n\n### You might also try...\n\nWhile I was working on this project, [picotool](https://github.com/dansanderson/picotool) was updated to support a `--pure-lua` argument to its `listlua` command, which will do roughly the same thing as this!\n\n## Installation\n\n1. Install [Lua](https://www.lua.org/start.html) for your operating system. This doesn't come with PICO-8, which has its own Lua compiler, so you'll need to install Lua separately.\n2. You can either:\n\n    a. Install with [LuaRocks](https://luarocks.org/):\n    ```console\n    $ luarocks install pico8-to-lua\n    ```\n\n    b. Clone the repository from GitHub and enter the project directory:\n    ```console\n    $ git clone https://github.com/benwiley4000/pico8-to-lua.git\n    $ cd pico-to-lua/\n    ```\n\n## Usage\n\n> ***NOTE:*** All the examples assume you have installed `pico-to-lua` globally, but if you're using it from inside the cloned directory, you can replace all instances of `pico8-to-lua` with `./pico8-to-lua.lua` (or `lua pico8-to-lua.lua` for non-UNIX environments) in the commands that you run.\n\nAssuming you have an input Lua file that looks like this:\n\n```lua\n-- input.lua\nfunction next_even_number(num)\n if (num % 2 != 0) num += 1\n return num\nend\n```\n\nYou can generate a standard Lua version with the command:\n\n```console\n$ pico8-to-lua input.lua\n```\n\nYou should see this output:\n\n```lua\nfunction next_even_number(num)\n if num % 2 ~= 0 then num = num +  1 end\n return num\nend\n```\n\nYou can also use a `.p8` file as input...\n\n```lua\npico-8 cartridge // http://www.pico-8.com\nversion 16\n__lua__\nfunction _init()\n local num = 0b10\n if (num+1==0b11) print('yes!')\nend\n```\n\n```console\n$ pico8-to-lua input.p8\n```\n\n...which will output transformed p8 file contents:\n\n```lua\npico-8 cartridge // http://www.pico-8.com\nversion 16\n__lua__\nfunction _init()\n local num = 0x2\n if num+1==0x3 then print('yes!') end\nend\n```\n\nIf you only want the lua output, you can pass the `--lua-only` flag when the input is a p8 file:\n\n```console\n$ pico8-to-lua input.p8 --lua-only\n```\n\n```lua\nfunction _init()\n local num = 0x2\n if num+1==0x3 then print('yes!') end\nend\n```\n\nIf you're in a UNIX environment, you can pipe the output directly to a file:\n\n```console\n$ pico8-to-lua input.lua > output.lua\n```\n\n```\n$ pico8-to-lua input.p8 > output.p8\n```\n\nOr you can pipe into another program:\n\n```console\n$ pico8-to-lua input.p8 --lua-only | luacheck -\n```\n\nYou can even pipe output from another program into this one by passing `-` as the filename argument:\n\n```console\n$ cat input.lua | pico8-to-lua - > output.lua\n```\n\n```console\n$ curl https://someurl.com/mycart.p8 | pico8-to-lua - --lua-only | luacheck -\n```\n"