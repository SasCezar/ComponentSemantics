b'# Pico-8 Development Tools\nThis repo includes snippets, demo carts and libraries to help make Pico-8 games.\n\nSome of the code is my own, a lot of it is taken from the Pico-8 Community and\ntweaked a bit my me so I could understand it...or just make a nice wrapper for it.\n\nAll the code here is intended to be a *starting point* for your own development.\nChange, tweak and reuse code as you need.\n\n* [Follow @morningtoast on Twitter](http://twitter.com/morningtoast)\n* [Find me on the Pico-8 BBS](http://www.lexaloffle.com/pico-8.php)\n* [Play some of my Pico-8 games](http://morningtoast.itch.io/)\n\n---\n\n## Contents\n* `boilterplate.p8` - Ready to go cart with basic structure and helpers\n* `blankcart.p8` - Barebones for cart\n* `mousetouch.p8` - Functions for mouse/touch detection\n* `explosion_lib.p8` - Explosion particle library\n* `fadetext.p8` - Fading text screens. For game startup.\n* `glitchfx.p8` - Scanline glitch effect\n\n\n## My approach\nI approach most of my games with the same process and structure, as you\'ll find\nin the boilerplate. I\'ll do my best to explain myself a bit.\n\n### Defining a scene\nI think about each major type of content as a scene. So the title screen\nis a scene. The tutorial is a scene. The game over is a scene. And the main\ngameplay is a scene. Every time the game content and/or interaction changes, that\'s\nwhen I define a new scene.\n\nEach scene has its own init, update and draw functions.\n\nInside each of those functions exists calls to the specific item/object functions,\nlike moving the player, enemy movement, backgrounds, UI...whatever.\n\nYou\'ll see that the boilerplate comes with 3 predefined scenes: title, game over,\nand gameplay. And specifically, the gameplay scene calls the player functions.\n\n### Keep the main loop lean\nThe main system loops - _update() and _draw() - I try to keep as lean\nas possible. I define an global cart update and cart draw function that is\ncalled within the system loop all the time. I then assign these cart functions\nto appropriate scene update/draw functions. Then when I need to switch scenes, I just \nreassign and go from there.\n\nThis lets me not only chain together a bunch of scenes to make a complete game,\nit lets me run any given scene individually at any time during development,\nwhich makes for much easier debugging and building.\n\n\n### Getting better at saving tokens\nToken count is the only real risk in Pico-8 as far as I\'m concerned. However, for\nmost games, that count will never be reached. I\'ve only had one game reach the\nlimit and that was because of my quasi-poor coding and not because my game was\nbig or anything fancy. But out of that, I learned a lot.\n\nI tried to bring my existing programming knowledge to Pico-8 and while it helped me\nthink of how to solve a problem, it didn\'t help me in code. Bringing forward\nmodern coding practices into Pico-8 will kill your token count. \n\nCheck out this article for token-saving techniques. Good stuff.\n[https://github.com/seleb/PICO-8-Token-Optimizations](https://github.com/seleb/PICO-8-Token-Optimizations)\n\nI\'ve found it saves more to be *feel* less efficient with your code. Once you start\nadding complexity while trying to be smart about things, that\'s when you\'ll start\nto burn tokens. Don\'t bring modern worries to this "old school" language.\n\n## Code quality rarely matters\nI see a lot of people on the Pico-8 forum talking about how bad their code is\nand saying it could be better...well, of course it could. It can always be\nbetter, but here\'s the thing - the quality of your code doesn\'t matter.\n\nRemember, you\'re making a game for people to play. You\'re not making something\nto be able to tout your coding skill. The person playing your game doesn\'t care\nabout your code. As long as they can play your game, they\'re happy.\n\nWhich should go to say code quality *does* matter if starts to impact\nhow your players experience the game. Otherwise, it doesn\'t matter one lick.\n\nAs long as you get your game working and doing what you want, your code is\ngreat. Don\'t worry about it. You\'ll get judged on **game quality** before you get\njudged on code quality. Don\'t lose sleep over well-formed code or too many variables\nor whatever. If your game works, it works...move along.\n\n[This article](http://www.gameinformer.com/b/news/archive/2014/03/20/robotron-2084-creator-eugene-jarvis-breaks-down-the-arcade-classic.aspx) talks about Eugene Jarvis\'s game development and there\'s a great quote that I try\nto remember when making Pico-8 games.\n\n> ...creating classic arcade games meant that they had to focus all on gameplay, challenge, difficulty ramping, and more, since relying on realism was out of the question\n\nRolled inside that list is quality of code. Do battle with your game ideas and\nplayer experience, don\'t do battle with your code.\n'