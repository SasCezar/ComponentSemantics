b'# pico-test\n\n<p>\n  <a href="https://www.npmjs.com/package/pico-test">\n    <img alt="npm version" src="https://img.shields.io/npm/v/pico-test.svg" />\n  </a>\n  <a href="https://travis-ci.org/jozanza/pico-test">\n    <img alt="build status" src="https://travis-ci.org/jozanza/pico-test.svg" />\n  </a>\n  <a href="http://standardjs.com/">\n    <img alt="code style"  src="https://img.shields.io/badge/code%20style-standard-brightgreen.svg" />\n  </a>\n</p>\n\n> **Note:** This project is still in its initial stages, so I\'d love feedback about the API and issue reports.\n\n### Intro\n\nPICO-8 is great but debugging your code in this little vm can be a chore.  \n\nIf you\'re tired of riddling your carts with `printh`s or have given up on test-driven development, this tool should help you out.\n\n### Installation\n\n    npm i -g pico-test\n\n> **Note:** you can also download it directly from the [releases section](https://github.com/jozanza/pico-test/releases)\n\n### Usage\n\nCopy/paste the following snippet into the cart you wish to test:\n\n```lua\nfunction test(title,f)\nlocal desc=function(msg,f)\n printh(\'\xe2\x9a\xa1:desc:\'..msg)\n f()\nend\nlocal it=function(msg,f)\n printh(\'\xe2\x9a\xa1:it:\'..msg)\n local xs={f()}\n for i=1,#xs do\n  if xs[i] == true then\n   printh(\'\xe2\x9a\xa1:assert:true\')\n  else\n   printh(\'\xe2\x9a\xa1:assert:false\')\n  end\n end\n printh(\'\xe2\x9a\xa1:it_end\')\nend\nprinth(\'\xe2\x9a\xa1:test:\'..title)\nf(desc,it)\nprinth(\'\xe2\x9a\xa1:test_end\')\nend\n```\n\nNext, be sure PICO-8 is aliased properly in your terminal. You may have to do something like the following:\n\n    alias pico-8=\'/Applications/PICO-8.app/Contents/MacOS/pico8\'\n\nLast, run Pico-8 from your terminal and pipe its output to `pico-test`.\n\n    pico-8 | pico-test\n\nEach time your run your cart, test results will be printed to `stdout`. Now, you just have to write some tests! :)\n\n### API\n\n`pico-test`\'s api is will be pretty familiar if you\'ve ever used [mocha](https://mochajs.org/). There are only 3 functions to learn: `test()`, `desc()`, and `it()`\n\n#### test(title:string, fn:function)\n\ninitiates testing, wraps around test descriptions and tests, providing the callback `fn` with two args: `desc` and `it` \xe2\x80\x93 the other two functions in this API.\n\n| Type     | Param | Description |\n|----------|-------|-------------|\n| String   | title | title of test suite\n| Function | fn    | callback to call with `desc` and `it`\n\n#### desc(description:string, fn:function)\n\nDescribes a set of tests. This function is applied as the first argument of the callback function passed to `test`\n\n| Type     | Param       | Description |\n|----------|-------------|-------------|\n| String   | description | description for tests to be run inside of param `fn`\n| Function | fn          | callback to call with `desc` and `it`\n\n\n#### it(message:string, fn:function)\n\nReturns one or more boolean values representing test assertions. all returned values must be `true` or your test will fail. This function is applied as the second argument of the callback function passed to `test`\n\n| Type     | Param   | Description |\n|----------|---------|-------------|\n| String   | message | message starting with "should"\n| Function | fn      | callback to return assertions from\n\n\n### Example\n\nHere\'s what it looks like in action:\n\n```lua\n-- here\'s an object with methods we want to test\nlocal math={\n  gt=function(a,b) return a>b end,\n  lt=function(a,b) return a<b end,\n  mul=function(a,b) return a*b end,\n  div=function(a,b) return a/b end\n}\n\ntest(\'math functions\', function(desc,it)\n  desc(\'math.gt()\', function()\n    local gt = math.gt\n    it(\'should return type boolean\', function()\n      return \'boolean\' == type(gt(1,0))\n    end)\n    it(\'should give same result as > operator\', function()\n      return gt(1,0)\n    end)\n  end)\n\n  desc(\'math.lt()\', function()\n    local lt = math.lt\n    it(\'should return type boolean\',function()\n      return \'boolean\' == type(lt(1,0))\n    end)\n    it(\'should give same result as < operator\',function()\n      return lt(1, 0) == false\n    end)\n  end)\n\n  desc(\'math.mul()\', function()\n    local mul = math.mul\n    it(\'should return type number\', function()\n      local a = rnd(time())\n      local b = rnd(time())\n      return \'number\' == type(mul(a,b))\n    end)\n    it(\'should give same result as * operator\', function()\n      local x=rnd(time())\n      return\n        x*1 == mul(x,1),\n        x*2 == mul(x,2),\n        x*3 == mul(x,3)\n   end)\n  end)\n\n  desc(\'math.div()\', function()\n    local div = math.div\n    it(\'should return type number\', function()\n      local a = rnd(time())\n      local b = rnd(time())\n      return \'number\' == type(div(a,b))\n    end)\n    it(\'should give same result as / operator\', function()\n      local x=1+rnd(time())\n      return\n        x/1 == div(x,1),\n        x/2 == div(x,2),\n        x/3 == div(x,3)\n    end)\n  end)\n\nend)\n```\n\n### License\n\nCopyright (c) 2015 Josiah Savary. Made available under The MIT License (MIT).\n'