b"# p8advent\n\nThis will eventually be an adventure game toolkit for the [Pico-8 virtual \nconsole](http://www.lexaloffle.com/pico-8.php). Right now it's just some data\nformat and workflow experiments. :)\n\nCurrently the only thing here are some experiments with packing text strings \ninto cart data. The `p8advent` tool (see `tool.py`) uses a specially-marked \nLua source file to create a Pico-8 cart with string literals extracted into \nthe cart data region, packed using a given text packing library.\n\n`textlib` was an early attempt at a dictionary-based packing library that \nfocused on English words, inspired by methods used by old text adventure \ngames. It stores both the code stream and the dictionary in cart data, and so\nrequires minimal RAM to access strings. In the context of Pico-8, it's not \nvery satisfying: the compression rate for a long wordy text (_A Tale of Two\nCities_ by Charles Dickens) only compressed to about 75% the original size. \nSimply packing the 6-bit character set into 8-bit strings (a reasonable \nmethod not yet implemented here) would be as effective, so a fancier \nalgorithm has to do better than this.\n\n`lzwlib` uses the LZW compression algorithm with variable-width codes. All \nstrings share the same dictionary to maximize packing, but are stored \nbyte-aligned with headers so they can be accessed directly. This requires \nthat the Lua code reconstruct the dictionary in RAM before accessing any \nstrings. The Dickens test text compresses to 48% when using as much Lua RAM \nas possible for the largest possible dictionary. Capping the dictionary at\n4,096 entries bumps this up to about 60% for this text.\n\nOf course, ToTC is not a typical text corpus for a game, even a large \ntext-based game. I'll need to make an actual game that uses a lot of text to \ndemonstrate that fancy packing techniques are actually profitable. It seems \nlikely that a game that uses both text and graphics and wants to store \nstrings could simply use a bit stream of 6-bit characters.\n"