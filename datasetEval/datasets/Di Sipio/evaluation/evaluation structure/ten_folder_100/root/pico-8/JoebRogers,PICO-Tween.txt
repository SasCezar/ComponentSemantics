b"[![Maintenance](https://img.shields.io/badge/Maintained%3F-yes-brightgreen.svg)](https://github.com/JoebRogers/PICO-Tween/graphs/commit-activity) \n[![License](https://img.shields.io/github/license/mashape/apistatus.svg)](https://en.wikipedia.org/wiki/MIT_License) \n[![Ask Me Anything !](https://img.shields.io/badge/Ask%20me-anything-1abc9c.svg)](https://joebrogers.com) \n[![Twitter Follow](https://img.shields.io/twitter/follow/JoebMakesGames.svg?style=social&label=Follow)](https://twitter.com/JoebMakesGames)\n[![Made With PICO-8](https://img.shields.io/badge/Made%20With-PICO--8-ff004d.svg?style=flat&logo=data%3Aimage%2Fpng%3Bbase64%2CiVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAlUlEQVQ4jWP8v5gBFTxOR%2BVXPfuPwp8SxIjCt%2BBG4TIxUBkMfgNZGIyi0IRmoobZxxeo0rcPocp%2FEEEJ08HvZaobyPj%2FjTpqmLAeJM2EtgMo3MHvZeqnw9X%2FXVHSUdhnP5Qw%2Fc%2B7CUVDS%2BsWFH6QpuyIT4cMT8xQBJI%2B1aHwj1%2F3RgnTVJbrKGH29egxFPWD38tUNxAAun4liexlTtMAAAAASUVORK5CYII%3D)](https://www.lexaloffle.com/pico-8.php)\n\n![PICO-Tween](img/logo.gif)\n\nPICO-Tween is a port of the easing functions developed by Robert Penner. This port was based on the Lua port by EmmanuelOga \nand optimised to suit the PICO-8 by refactoring to remove unnecessary tokens and making it compatible with the way the PICO-8\nhandles math functions.\n\nSome important things to note:\n\n- Despite being optimised, this library as a whole is still huge. It would be in your best interests to grab only\nthe functions you plan on using, along with their support functions/variables.\n\n- The overall token count for the library is ~~1556~~ 2083, with an average of around 40-60 tokens per easing function.\n\n- ~~This library has had the elastic easing functions removed as they relied on asin and acos, which are not\navailable within the PICO-8. My math skills do not extend far enough for me to implement a solution for them \nthat doesn't rely on those functions.~~\n\n- Thanks to the Nvidea CG Toolkit references, the library now comes with implementations of asin and acos. This means\nthat elastic easings have been reincluded and should be working as intended.\n\n- An important thing to note is that in order for the sine easings to work correctly, I've used the radian based\nconversion for the base sin and cos functions without the y inversion:\n```lua\ncos1 = cos function cos(angle) return cos1(angle/(3.1415*2)) end\nsin1 = sin function sin(angle) return sin1(-angle/(3.1415*2)) end\n```\nIf you rely on sin and cos within your game and don't want to use radian based angles, then you'll need to adapt your\ninput to the easing function accordingly to perform these calculations manually.\n\n## PICO-TweenMachine\n\nAlongside this library, I've also released an extension library to act as a support for this. It's a lightweight wrapper\nto help drive and manage all tween objects and related code in order to reduce boilerplate and mess, as well as simplify\nthe process of creating and using tweens.\n\nYou can view the repository here: [PICO-TweenMachine](https://github.com/JoebRogers/PICO-TweenMachine).\n\n## Setup\n\nLike any PICO-8 library, integrating this library into your cart is as simple as copy/pasting the source\ninto the top of your code (I recommend the top in order to avoid problems with object ordering).\n\nIf you only need a small number of easing functions and are planning on using them individually, be sure to \ncheck for their dependencies. For example, there is a definition of Pi at the top of the library that might need to be\ncopied over, along with radian based sin and cos function redefinitions used within the sine easing functions.\n\n## Basic Usage\n\nAny of these functions should be simple to just plug in and play, provided you have a basic knowledge of how to use\neasing functions.\n\nHere is a basic example of using the linear function to move across the screen:\n\n```lua\nfunction linear(t, b, c, d)\n  return c * t / d + b\nend\n\nlocal distance = 50\nlocal duration = 1\n\nfunction downFunc(v)\n  return linear(v, 0, distance, duration)\nend\n\nfunction upFunc(v)\n  return linear(v, distance, -distance, duration)\nend\n\nlocal easeProp = 0\nlocal timeElapsed = 0\nlocal currentFunc = downFunc\nlocal lastTime = time()\nlocal dt = 0\n\nfunction _update()\n  t = time()\n  dt = t - lastTime\n  lastTime = t\n  timeElapsed += dt\n\n  if timeElapsed > duration then\n    timeElapsed = 0\n    if currentFunc == downFunc then currentFunc = upFunc else currentFunc = downFunc end\n  end\n\n  easeProp = currentFunc(timeElapsed)\nend\n\nfunction _draw()\n  rectfill(0, 0, 128, 128, 3)\n  circfill(64, 40 + easeProp, 20, 15)\nend\n```\n\nYou should get the following results:\n\n![Basic Usage Demo](img/basic-usage-demo.gif)\n\n## Examples\n\nYou can find a test cart that allows you to cycle through all of the easing functions in the [cart](cart/pico-tween-demo.p8) folder \nif you want to load it up into the console and play around with it!\n\nHere are some example gifs:\n\n![Bounce Out](img/bounce-out.gif)\n\n![Out In Cubic](img/out-in-cubic.gif)\n\n## Credits\n\nThis library port wouldn't have been possible without the original easings functions by [Robert Penner.](http://robertpenner.com/easing/)\n\nIt also wouldn't have been anywhere near as easy without the Lua port for the functions by [EmmanuelOga](https://github.com/EmmanuelOga/easing)\n"