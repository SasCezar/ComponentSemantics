b"This is the core engine of a language ('I') and its virtual machine (all of this in PICO-8).\nYou can extend this engine (see how _SHW or _CLS are implemented).\nYou can create synonyms for a simplier use (see _ADD and _+).\n\nThe programs must be writen in a line. Terms are separated by space.\n\nThe engine is stack based (like forth): '5 4 + .' => shows 9\n\nThe operators + - * / and flr function are available.\nThe '#' duplicates the last value (of the stack).\n\nYou can evaluate (5 + 4) * (3 + 2) with '5 4 + 3 2 + * .' => 45\n\nCreate a sub function\n\n:NAME <sequence of instructions> ;\n\n':A 5 4 + ; :B 3 2 + ; A B * .' => 45\n\nYou can call the sub function NAME with its NAME (see A and B in the sample).\n\nCreate SQUARE and evaluate 3^2:\n\n':SQUARE # * ; 3 SQUARE .' => 9\n\nConditional call\n\n?NAME\n\nIf the last value in the stack isn't zero it calls NAME else it goes to the next instruction.\n\nThis is usefull to create tests and loops:\n\n':SA # . 1 - ; :LP SA # ?LP ; 5 LP 0 .'\n\nCount down from 5 to 0 (then stop).\n\nYou can use variables:\n>NAME (load value from stack)\n<NAME (push value in the stack)\n\n'1 >A <A <A + .' =>2\n\nYou can use many :EVAL call to enter your program (one line per call).\nYou can use as many i_core engines as you want at the same time (object).\nYou can execute the whole program (:EXEC) or run it :STEP by step.\n\n:STATE returns 3 when done. You can restart with :STATE(0).\n\nIf you have read the description so far, you may have a question.\nThis sounds crazy... So, why?\n\nI'm working on two games. In the first you have to build a program by stacking graphic items to draw on screen to replicate a drawing with the minimal amonth of items. In the second, some robots fight together using genetic algorithms to evolve (by sharing part of their own code to create new ones).\n\nI think I can share this library and my interest in doing this.\n\nSample of use :\n- https://github.com/jihem/i_core/blob/master/i_editor/pico8/i_editor.pdf\n\njihem\n\nI_C( \xc2\xb0)RE is now available in pico8, tic-80, monkey2, cpp and go (last implementation with some extensions and a CLI REPL).\n"