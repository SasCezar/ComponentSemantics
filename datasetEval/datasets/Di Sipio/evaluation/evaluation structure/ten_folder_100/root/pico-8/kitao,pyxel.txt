b'# <img src="https://raw.githubusercontent.com/kitao/pyxel/master/pyxel/examples/assets/pyxel_logo_152x64.png">\n\n[ [English](https://github.com/kitao/pyxel/blob/master/README.md) | [\xe6\x97\xa5\xe6\x9c\xac\xe8\xaa\x9e](https://github.com/kitao/pyxel/blob/master/README.ja.md) | [\xe4\xb8\xad\xe6\x96\x87](https://github.com/kitao/pyxel/blob/master/README.cn.md) | [\xed\x95\x9c\xea\xb5\xad\xec\x96\xb4](https://github.com/kitao/pyxel/blob/master/README.ko.md) | [Espa\xc3\xb1ol](https://github.com/kitao/pyxel/blob/master/README.es.md) ]\n\n**Pyxel** is a retro game engine for Python.\n\nThanks to its simple specifications inspired by retro gaming consoles, such as only 16 colors can be displayed and only 4 sounds can be played back at the same time, you can feel free to enjoy making pixel art style games.\n\n<a href="https://github.com/kitao/pyxel/blob/master/pyxel/examples/01_hello_pyxel.py" target="_blank">\n<img src="https://raw.githubusercontent.com/kitao/pyxel/master/pyxel/examples/screenshots/01_hello_pyxel.gif" width="48%">\n</a>\n\n<a href="https://github.com/kitao/pyxel/blob/master/pyxel/examples/02_jump_game.py" target="_blank">\n<img src="https://raw.githubusercontent.com/kitao/pyxel/master/pyxel/examples/screenshots/02_jump_game.gif" width="48%">\n</a>\n\n<a href="https://github.com/kitao/pyxel/blob/master/pyxel/examples/03_draw_api.py" target="_blank">\n<img src="https://raw.githubusercontent.com/kitao/pyxel/master/pyxel/examples/screenshots/03_draw_api.gif" width="48%">\n</a>\n\n<a href="https://github.com/kitao/pyxel/blob/master/pyxel/examples/04_sound_api.py" target="_blank">\n<img src="https://raw.githubusercontent.com/kitao/pyxel/master/pyxel/examples/screenshots/04_sound_api.gif" width="48%">\n</a>\n\n<a href="https://github.com/kitao/pyxel/blob/master/pyxel/editor/screenshots/image_tilemap_editor.gif" target="_blank">\n<img src="https://raw.githubusercontent.com/kitao/pyxel/master/pyxel/editor/screenshots/image_tilemap_editor.gif" width="48%">\n</a>\n\n<a href="https://github.com/kitao/pyxel/blob/master/pyxel/editor/screenshots/sound_music_editor.gif" target="_blank">\n<img src="https://raw.githubusercontent.com/kitao/pyxel/master/pyxel/editor/screenshots/sound_music_editor.gif" width="48%">\n</a>\n\nThe specifications of the gaming console, APIs, and palettes of Pyxel are referring to awesome [PICO-8](https://www.lexaloffle.com/pico-8.php) and [TIC-80](https://tic.computer/).\n\nPyxel is open source and free to use. Let\'s start making a retro game with Pyxel!\n\n## Specifications\n\n- Run on Windows, Mac, and Linux\n- Code writing with Python3\n- Fixed 16 color palette\n- 256x256 sized 3 image banks\n- 256x256 sized 8 tilemaps\n- 4 channels with 64 definable sounds\n- 8 musics which can combine arbitrary sounds\n- Keyboard, mouse, and gamepad inputs\n- Image and sound editor\n\n### Color Palette\n\n<img src="https://raw.githubusercontent.com/kitao/pyxel/master/pyxel/examples/screenshots/05_color_palette.png">\n\n## How to Install\n\n### Windows\n\nAfter installing [Python3](https://www.python.org/) (version 3.7 or higher), the following `pip` command installs Pyxel:\n\n```sh\npip install -U pyxel\n```\n\n### Mac\n\nAfter installing [Python3](https://www.python.org/) (version 3.7 or higher) and [SDL2](https://www.libsdl.org/), install Pyxel with `pip` command.\n\nIf [Homebrew](https://brew.sh/) package manager is ready, the following command installs all the necessary packages:\n\n```sh\nbrew install python3 sdl2 sdl2_image\npip3 install -U pyxel\n```\n\n### Linux\n\nInstall [Python3](https://www.python.org/) (version 3.7 or higher) and the required packages in a way appropriate for each distribution.\n\n**Ubuntu:**\n\n```sh\nsudo apt install python3 python3-pip libsdl2-dev libsdl2-image-dev\nsudo -H pip3 install -U pyxel\n```\n\n### Other environment\n\nTo install Pyxel in an environment other than the above (32-bit Linux, Raspberry PI, etc.), follow the steps below for building:\n\n#### Install necessary tools and packages\n\n- C++ build toolchain (should include gcc and make command)\n- libsdl2-dev and libsdl2-image-dev\n- [Python3](https://www.python.org/) (version 3.7 or highter) and pip command\n\n#### Execute the following command in any folder\n\n```sh\ngit clone https://github.com/kitao/pyxel.git\ncd pyxel\nmake -C pyxel/core clean all\npip3 install .\n```\n\n### Install examples\n\nAfter installing Pyxel, the examples of Pyxel will be copied to the current directory with the following command:\n\n```sh\ninstall_pyxel_examples\n```\n\nThe examples to be copied are as follows:\n\n- [01_hello_pyxel.py](https://github.com/kitao/pyxel/blob/master/pyxel/examples/01_hello_pyxel.py) - Simplest application\n- [02_jump_game.py](https://github.com/kitao/pyxel/blob/master/pyxel/examples/02_jump_game.py) - Jump game with Pyxel resource file\n- [03_draw_api.py](https://github.com/kitao/pyxel/blob/master/pyxel/examples/03_draw_api.py) - Demonstration of drawing API\n- [04_sound_api.py](https://github.com/kitao/pyxel/blob/master/pyxel/examples/04_sound_api.py) - Demonstration of sound API\n- [05_color_palette.py](https://github.com/kitao/pyxel/blob/master/pyxel/examples/05_color_palette.py) - Color palette list\n- [06_click_game.py](https://github.com/kitao/pyxel/blob/master/pyxel/examples/06_click_game.py) - Mouse click game\n- [07_snake.py](https://github.com/kitao/pyxel/blob/master/pyxel/examples/07_snake.py) - Snake game with BGM\n- [08_triangle_api.py](https://github.com/kitao/pyxel/blob/master/pyxel/examples/08_triangle_api.py) - Demonstration of triangle drawing API\n\nThe examples can be executed like normal Python code:\n\n**Windows:**\n\n```sh\ncd pyxel_examples\npython 01_hello_pyxel.py\n```\n\n**Mac / Linux:**\n\n```sh\ncd pyxel_examples\npython3 01_hello_pyxel.py\n```\n\n## How to Use\n\n### Create a Pyxel Application\n\nAfter importing the Pyxel module in your python code, specify the window size with `init` function first, then starts the Pyxel application with `run` function.\n\n```python\nimport pyxel\n\npyxel.init(160, 120)\n\ndef update():\n    if pyxel.btnp(pyxel.KEY_Q):\n        pyxel.quit()\n\ndef draw():\n    pyxel.cls(0)\n    pyxel.rect(10, 10, 20, 20, 11)\n\npyxel.run(update, draw)\n```\n\nThe arguments of `run` function are `update` function to update each frame and `draw` function to draw screen when necessary.\n\nIn an actual application, it is recommended to wrap pyxel code in a class as below:\n\n```python\nimport pyxel\n\nclass App:\n    def __init__(self):\n        pyxel.init(160, 120)\n        self.x = 0\n        pyxel.run(self.update, self.draw)\n\n    def update(self):\n        self.x = (self.x + 1) % pyxel.width\n\n    def draw(self):\n        pyxel.cls(0)\n        pyxel.rect(self.x, 0, 8, 8, 9)\n\nApp()\n```\n\nIt is also possible to write simple code using `show` and `flip` functions to draw simple graphics and animations.\n\nThe `show` function displays the screen and waits until the `ESC` key is pressed.\n\n```python\nimport pyxel\n\npyxel.init(120, 120)\npyxel.cls(1)\npyxel.circb(60, 60, 40, 7)\npyxel.show()\n```\n\nThe `flip` function updates the screen once.\n\n```python\nimport pyxel\n\npyxel.init(120, 80)\n\nwhile True:\n    pyxel.cls(3)\n    pyxel.rectb(pyxel.frame_count % 160 - 40, 20, 40, 40, 7)\n    pyxel.flip()\n```\n\n### Special Controls\n\nThe following special controls can be performed while a Pyxel application is running:\n\n- `Esc`<br>\nQuit the application\n- `Alt(Option)+1`<br>\nSave the screenshot to the desktop\n- `Alt(Option)+2`<br>\nReset the recording start time of the screen capture video\n- `Alt(Option)+3`<br>\nSave the screen capture video (gif) to the desktop (up to 30 seconds)\n- `Alt(Option)+0`<br>\nToggle the performance monitor (fps, update time, and draw time)\n- `Alt(Option)+Enter`<br>\nToggle full screen\n\n### How to Create a Resource\n\nThe attached Pyxel Editor can create images and sounds used in a Pyxel application.\n\nPyxel Editor starts with the following command:\n\n```sh\npyxeleditor [pyxel_resource_file]\n```\n\nIf the specified Pyxel resource file (.pyxres) exists, the file is loaded, and if it does not exist, a new file is created with the specified name.\nIf the resource file is omitted, the name is `my_resource.pyxres`.\n\nAfter starting Pyxel Editor, the file can be switched by dragging and dropping another resource file. If the resource file is dragged and dropped while holding down ``Ctrl`` key, only the resource type (image/tilemap/sound/music) that is currently being edited will be loaded. This operation enables to combine multiple resource file into one.\n\nThe created resource file can be loaded with the `load` function.\n\nPyxel Editor has the following edit modes.\n\n**Image Editor:**\n\nThe mode to edit the image banks.\n\n<img src="https://raw.githubusercontent.com/kitao/pyxel/master/pyxel/editor/screenshots/image_editor.gif">\n\nBy dragging and dropping a png file onto the Image Editor screen, the image can be loaded into the currently selected image bank.\n\n**Tilemap Editor:**\n\nThe mode to edit tilemaps in which images of the image banks are arranged in a tile pattern.\n\n<img src="https://raw.githubusercontent.com/kitao/pyxel/master/pyxel/editor/screenshots/tilemap_editor.gif">\n\n**Sound Editor:**\n\nThe mode to edit sounds.\n\n<img src="https://raw.githubusercontent.com/kitao/pyxel/master/pyxel/editor/screenshots/sound_editor.gif">\n\n**Music Editor:**\n\nThe mode to edit musics in which the sounds are arranged in order of playback.\n\n<img src="https://raw.githubusercontent.com/kitao/pyxel/master/pyxel/editor/screenshots/music_editor.gif">\n\n### Other resource creation methods\n\nPyxel images and tilemaps can also be created in the following way:\n\n- Create an image from a list of strings with `Image.set` or `Tilemap.set` function\n- Load a png file in Pyxel palette with `Image.load` function\n\nBecause Pyxel uses the same palette as [PICO-8](https://www.lexaloffle.com/pico-8.php), when creating png images for Pyxel, it is recommended to use [Aseprite](https://www.aseprite.org/) in PICO-8 palette mode.\n\nPyxel sounds can also be created in the following way:\n\n- Create a sound from strings with `Sound.set` or `Music.set` function\n\nPlease refer to the API reference for usage of these functions.\n\n### How to Create a Stand-Alone Executable\n\nBy using the attached Pyxel Packager, a stand-alone executable that will work even in environments where Python is not installed can be created.\n\nTo create a stand-alone executable, specify the Python file to be used to launch the application with the `pyxelpackager` command as follows:\n\n```sh\npyxelpackager python_file\n```\n\nWhen the process is complete, a stand-alone executable is created in the `dist` folder.\n\nIf resources such as .pyxres and .png files are also necessary, put them under the `assets` folder and they will be included.\n\nIt is also possible to specify an icon with the ``-i icon_file`` option.\n\n## API Reference\n\n### System\n\n- `width`, `height`<br>\nThe width and height of the screen\n\n- `frame_count`<br>\nThe number of the elapsed frames\n\n- `init(width, height, [caption], [scale], [palette], [fps], [border_width], [border_color], [quit_key])`<br>\nInitialize the Pyxel application with screen size (`width`, `height`). The maximum width and height of the screen is 256<br>\nIt is also possible to specify the window title with `caption`, the display magnification with `scale`, the palette color with `palette`, the frame rate with `fps`, the margin width and color outside the screen with `border_width` and `border_color`, and the key to quit the application with `quit_key`. `palette` is specified as a list of 16 elements of 24 bit color, `border_color` as 24 bit color.\n\n- `run(update, draw)`<br>\nStart the Pyxel application and call `update` function for frame update and `draw` function for drawing\n\n- `quit()`<br>\nQuit the Pyxel application at the end of the current frame\n\n- `flip()`<br>\nForce drawing the screen (do not use in normal applications)\n\n- `show()`<br>\nDraw the screen and wait forever (do not use in normal applications)\n\n### Resource\n\n- `save(filename)`<br>\nSave the resource file (.pyxres) to the directory of the execution script\n\n- `load(filename, [image], [tilemap], [sound], [music])`<br>\nRead the resource file (.pyxres) from the directory of the execution script. If ``False`` is specified for the resource type (image/tilemap/sound/music), the resource will not be loaded.\n\n### Input\n- `mouse_x`, `mouse_y`<br>\nThe current position of the mouse cursor\n\n- `btn(key)`<br>\nReturn `True` if `key` is pressed, otherwise return `False` ([key definition list](https://github.com/kitao/pyxel/blob/master/pyxel/__init__.py))\n\n- `btnp(key, [hold], [period])`<br>\nReturn `True` if `key` is pressed at that frame, otherwise return `False`. When `hold` and `period` are specified, `True` will be returned at the `period` frame interval when the `key` is held down for more than `hold` frames\n\n- `btnr(key)`<br>\nReturn `True` if `key` is released at that frame, otherwise return `False`\n\n- `mouse(visible)`<br>\nIf `visible` is `True`, show the mouse cursor. If `False`, hide it. Even if the mouse cursor is not displayed, its position is updated.\n\n### Graphics\n\n- `image(img, [system])`<br>\nOperate the image bank `img`(0-2) (see the Image class). If `system` is `True`, the image bank for system can be accessed. 3 is for the font and resource editor. 4 is for the display screen<br>\ne.g. `pyxel.image(0).load(0, 0, "title.png")`\n\n- `tilemap(tm)`<br>\nOperate the tilemap `tm`(0-7) (see the Tilemap class)\n\n- `clip(x, y, w, h)`<br>\nSet the drawing area of the screen from (`x`, `y`) to width `w` and height `h`. Reset the drawing area to full screen with `clip()`\n\n- `pal(col1, col2)`<br>\nReplace color `col1` with `col2` at drawing. `pal()` to reset to the initial palette\n\n- `cls(col)`<br>\nClear screen with color `col`\n\n- `pix(x, y, col)`<br>\nDraw a pixel of color `col` at (`x`, `y`)\n\n- `line(x1, y1, x2, y2, col)`<br>\nDraw a line of color `col` from (`x1`, `y1`) to (`x2`, `y2`)\n\n- `rect(x, y, w, h, col)`<br>\nDraw a rectangle of width `w`, height `h` and color `col` from (`x`, `y`)\n\n- `rectb(x, y, w, h, col)`<br>\nDraw the outline of a rectangle of width `w`, height `h` and color `col` from (`x`, `y`)\n\n- `circ(x, y, r, col)`<br>\nDraw a circle of radius `r` and color `col` at (`x`, `y`)\n\n- `circb(x, y, r, col)`<br>\nDraw the outline of a circle of radius `r` and color `col` at (`x`, `y`)\n\n- `tri(x1, y1, x2, y2, x3, y3, col)`<br>\nDraw a triangle with vertices (`x1`, `y1`), (`x2`, `y2`), (`x3`, `y3`) and color `col`\n\n- `trib(x1, y1, x2, y2, x3, y3, col)`<br>\nDraw the outline of a triangle with vertices (`x1`, `y1`), (`x2`, `y2`), (`x3`, `y3`) and color `col`\n\n- `blt(x, y, img, u, v, w, h, [colkey])`<br>\nCopy the region of size (`w`, `h`) from (`u`, `v`) of the image bank `img`(0-2) to (`x`, `y`). If negative value is set for `w` and/or `h`, it will reverse horizontally and/or vertically. If `colkey` is specified, treated as transparent color\n\n- `bltm(x, y, tm, u, v, w, h, [colkey])`<br>\nDraw the tilemap `tm`(0-7) to (`x`, `y`) according to the tile information of size (`w`, `h`) from (`u`, `v`). If `colkey` is specified, treated as transparent color. A tile of the tilemap is drawn with a size of 8x8, and if the tile number is 0, indicates the region (0, 0)-(7, 7) of the image bank, if 1, indicates (8, 0)-(15, 0)\n\n- `text(x, y, s, col)`<br>\nDraw a string `s` of color `col` at (`x`, `y`)\n\n### Audio\n\n- `sound(snd, [system])`<br>\nOperate the sound `snd`(0-63) (see the Sound class). If `system` is `True`, the sound 64 for system can be accessed<br>\ne.g. `pyxel.sound(0).speed = 60`\n\n- `music(msc)`<br>\nOperate the music `msc`(0-7) (see the Music class)\n\n- `play_pos(ch)`<br>\nGet the sound playback position of channel `ch`. The 100\'s and 1000\'s indicate the sound number and the 1\'s and 10\'s indicate the note number. When playback is stopped, return `-1`\n\n- `play(ch, snd, loop=False)`<br>\nPlay the sound `snd`(0-63) on channel `ch`(0-3). Play in order when `snd` is a list\n\n- `playm(msc, loop=False)`<br>\nPlay the music `msc`(0-7)\n\n- `stop([ch])`<br>\nStop playback of all channels. If `ch`(0-3) is specified, stop the corresponding channel only\n\n### Image Class\n\n- `width`, `height`<br>\nThe width and height of the image\n\n- `data`<br>\nThe data of the image (256x256 two-dimentional list)\n\n- `get(x, y)`<br>\nRetrieve the data of the image at (`x`, `y`)\n\n- `set(x, y, data)`<br>\nSet the data of the image at (`x`, `y`) by a value or a list of strings<br>\ne.g. `pyxel.image(0).set(10, 10, ["1234", "5678", "9abc", "defg"])`\n\n- `load(x, y, filename)`<br>\nRead the png image from the directory of the execution script at (`x`, `y`)\n\n- `copy(x, y, img, u, v, w, h)`<br>\nCopy the region of size (`w`, `h`) from (`u`, `v`) of the image bank `img`(0-2) to (`x`, `y`)\n\n### Tilemap Class\n\n- `width`, `height`<br>\nThe width and height of the tilemap\n\n- `data`<br>\nThe data of the tilemap (256x256 two-dimentional list)\n\n- `refimg`<br>\nThe image bank referenced by the tilemap\n\n- `get(x, y)`<br>\nRetrieve the data of the tilemap at (`x`, `y`)\n\n- `set(x, y, data)`<br>\nSet the data of the tilemap at (`x`, `y`) by a value or a list of strings.<br>\ne.g. `pyxel.tilemap(0).set(0, 0, ["000102", "202122", "a0a1a2", "b0b1b2"])`\n\n- `copy(x, y, tm, u, v, w, h)`<br>\nCopy the region of size (`w`, `h`) from (`u`, `v`) of the tilemap `tm`(0-7) to (`x`, `y`)\n\n### Sound Class\n\n- `note`<br>\nList of note(0-127) (33 = \'A2\' = 440Hz)\n\n- `tone`<br>\nList of tone(0:Triangle / 1:Square / 2:Pulse / 3:Noise)\n\n- `volume`<br>\nList of volume(0-7)\n\n- `effect`<br>\nList of effects(0:None / 1:Slide / 2:Vibrato / 3:FadeOut)\n\n- `speed`<br>\nThe length of one note(120 = 1 second per tone)\n\n- `set(note, tone, volume, effect, speed)`<br>\nSet a note, tone, volume, and effect with a string. If the tone, volume, and effect length are shorter than the note, it is repeated from the beginning\n\n- `set_note(note)`<br>\nSet the note with a string made of \'CDEFGAB\'+\'#-\'+\'0123\' or \'R\'. Case-insensitive and whitespace is ignored<br>\ne.g. `pyxel.sound(0).set_note("G2B-2D3R RF3F3F3")`\n\n- `set_tone(tone)`<br>\nSet the tone with a string made of \'TSPN\'. Case-insensitive and whitespace is ignored<br>\ne.g. `pyxel.sound(0).set_tone("TTSS PPPN")`\n\n- `set_volume(volume)`<br>\nSet the volume with a string made of \'01234567\'. Case-insensitive and whitespace is ignored<br>\ne.g. `pyxel.sound(0).set_volume("7777 7531")`\n\n- `set_effect(effect)`<br>\nSet the effect with a string made of \'NSVF\'. Case-insensitive and whitespace is ignored<br>\ne.g. `pyxel.sound(0).set_effect("NFNF NVVS")`\n\n### Music Class\n\n- `ch0`<br>\nList of sound(0-63) play on channel 0. If an empty list is specified, the channel is not used for playback\n\n- `ch1`<br>\nList of sound(0-63) play on channel 1. If an empty list is specified, the channel is not used for playback\n\n- `ch2`<br>\nList of sound(0-63) play on channel 2. If an empty list is specified, the channel is not used for playback\n\n- `ch3`<br>\nList of sound(0-63) play on channel 3. If an empty list is specified, the channel is not used for playback\n\n- `set(ch0, ch1, ch2, ch3)`<br>\nSet the list of sound(0-63) of all channels. If an empty list is specified, that channel is not used for playback<br>\ne.g. `pyxel.music(0).set([0, 1], [2, 3], [4], [])`\n\n- `set_ch0(data)`<br>\nSet the list of sound(0-63) of channel 0\n\n- `set_ch1(data)`<br>\nSet the list of sound(0-63) of channel 1\n\n- `set_ch2(data)`<br>\nSet the list of sound(0-63) of channel 2\n\n- `set_ch3(data)`<br>\nSet the list of sound(0-63) of channel 3\n\n## How to Contribute\n\n### Submitting an issue\n\nUse the [issue tracker](https://github.com/kitao/pyxel/issues) to submit bug reports and feature/enhancement requests.\nBefore submitting a new issue, search the issue tracker to ensure that there is no similar open issue.\n\nWhen submitting a report, select the appropriate template from [this link](https://github.com/kitao/pyxel/issues/new/choose).\n\n### Manual testing\n\nAnyone manually testing the code and reporting bugs or suggestions for enhancements in the issue tracker are very welcome!\n\n### Submitting a pull request\n\nPatches/fixes are accepted in form of pull requests (PRs). Make sure the issue the pull request addresses is open in the issue tracker.\n\nSubmitted pull request is deemed to have agreed to publish under [MIT license](https://github.com/kitao/pyxel/blob/master/LICENSE).\n\n## Other Information\n\n- [Wiki](https://github.com/kitao/pyxel/wiki)\n- [Subreddit](https://www.reddit.com/r/pyxel/)\n\n## License\n\nPyxel is under [MIT license](http://en.wikipedia.org/wiki/MIT_License). It can be reused within proprietary software provided that all copies of the licensed software include a copy of the MIT License terms and the copyright notice.\n\nPyxel uses the following libraries:\n\n- [SDL2](https://www.libsdl.org/)\n- [gif-h](https://github.com/ginsweater/gif-h)\n- [miniz-cpp](https://github.com/tfussell/miniz-cpp)\n- [PyInstaller](https://www.pyinstaller.org/)\n'