b'8pack\n====================\n\nUtility that injects modular Lua source into a [PICO-8](https://www.lexaloffle.com/pico-8.php) project. \n---\n\n## Installation\n````bash\nnpm install 8pack -g\n````\n\n## Examples\n\nCreate *sample.lua.p8* from *sample.lua* using newest PICO-8 template\n````bash\n8pack tests/sample.lua\n````\n\nInject *sample.lua* source into *foo.p8*. Will overwrite *foo.p8* if already exists.\n````bash\n8pack tests/sample.lua foo.p8  \n````\n\nWatch */tests/sample.lua* for changes and overwrite to */tests/sample.lua.p8*\n````bash\n8pack /tests/sample.lua -w  \n````\n\nWrite */tests/sample.lua* source to */tests/foo.p8* using PICO-8 0.1.10c template \n````bash\n8pack tests/sample.lua /tests/foo.p8 --template 0.1.10c\n````\n\n## Modules\nLua modules can be imported via ```require(\'./libs/lib\')``` and will be injected to the top of the p8 file as global variables. \nEach module must return a table, variable or a function. Use node.js style path prefixes to access parent directories: ``require(\'../lib\')``\n\n\n*main.lua:*\n```lua\nlocal liba = require(\'./liba\');\n\nfunction _init()\n    state = {\n        hi = "hello world",\n        i = 0,\n        someFunct = function()\n            return 1\n        end,\n        someOtherFunct = function()\n            return 0\n        end\n    }\nend\n\nfunction _update60()\n    state.i = state.i + rnd(liba.iterator);\nend\n\nfunction _draw()\n    cls();\n    print(liba.foo() .. \' \' .. state.i, 0, 116, 7);\nend\n```\n\n*./liba.lua module:*\n```lua\nlocal lib = {\n    foo = function()\n        return \'hello world\'\n    end,\n}\nlib.iterator = 1\n\nreturn lib;\n```\n\nEach injection is instantiated as a new function in pico8 code thus no code can be shared between modules.\nAs a workaround 8pack creates a ``globals`` table as the topmost variable inside the project which can be accessed from every module.\n\n*./helpers.lua module:*\n```lua\nlocal helpers = {\n    setLevel = function(level)\n        globals.level = level\n    end,\n}\n\nreturn lib;\n```\n\n*./game.lua module:*\n```lua\nreturn {\n   nextLevel = function() \n     globals.level =  globals.level+1\n     return globals.level\n   end\n} \n```\n\n## JetBrains Watcher Arguments\nInstall 8pack globally and add 8pack bin as watcher with following arguments for on-the-fly injection \n````\n$ProjectFileDir$/projectroot.lua $ProjectFileDir$/project.p8\n````\ne.g. for Lua watcher in PhpStorm 2017.3 on Windows 10 (I\'m using the official Lua plugin)\n![Screenshot](https://github.com/kepikoi/8pack/raw/master/screenshots/jetbrains.png)\n\n\n## ToDos\n* Circular dependancy checks \n* Module order checks\n* Prevent pedundant imports\n* Honor token limits\n* Compress code'