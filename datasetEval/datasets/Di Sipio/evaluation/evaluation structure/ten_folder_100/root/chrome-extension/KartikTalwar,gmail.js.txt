b'# Gmail.js - JavaScript API for Gmail\n\n![Build status](https://api.travis-ci.org/KartikTalwar/gmail.js.svg?branch=master)\n[![npm](https://img.shields.io/npm/v/gmail-js.svg)](https://www.npmjs.com/package/gmail-js)\n\n### What Gmail.js is and isn\'t\n\nGmail.js is meant to be used for creating WebExtension-based browser-extensions, for Chrome, Firefox and other compatible browsers.\n\nIt cannot be used server-side with Node, or from another web-app to interface with Gmail.\n\n**Note:** This is not an official Gmail API, and isn\'t affiliated with Google.\n\n**Note:** Gmail.js requires jQuery to work\n\n### TL;DR Summary\n\n- Lots of API methods to work with gmail. See documentation below.\n- Easy to use API. Data & DOM.\n- Reasonably complete TypeScript-support.\n- Many methods are contextual and will work with whatever is on screen when no arguments are given.\n- Obtain email data, react to event, etc. No need for OAuth!\n- Main methods allow you to observe certain events with **`gmail.observe.on(\'lots_of_actions_here\', callback())`** or similar **`gmail.observe.before(...)`** and **`gmail.observe.after(...)`**\n- Create an issue/pull request for feedback, requests and fixes. See [CONTRIBUTING.md](https://github.com/KartikTalwar/gmail.js/blob/master/CONTRIBUTING.md) for more details.\n\n### Using Gmail.js\n\nIf you know how to create WebExtensions-based extensions for Firefox and Chrome, you can get started by pulling Gmail.js like this:\n\n```\nnpm install gmail-js\n```\n\n**Note:** Please ensure that Gmail.js is injected into the regular DOM.\nGmail.js does not work as a content-script.\n\nFor some ready to use examples/boilerplate repos, look no further:\n\n- **[GmailJS Node Boilerplate](https://github.com/josteink/gmailjs-node-boilerplate)** - Example for how to create a browser-extension using GmailJS and modern javascript with NodeJS and script-bundling for instant load-times.\n- **[GmailJS Legacy Boilerplate](https://github.com/KartikTalwar/gmail-chrome-extension-boilerplate)** - Example for how to create a browser-extension using traditional script-loading. (Requires less tooling, but is less reliable)\n\n### Content Security Policy\n\nContent Security Policy (CSP) will prevent direct injection. Please see the following repository to get around the policies. More details can also be found in issue [#75](https://github.com/KartikTalwar/gmail.js/issues/75)\n\nSee the examples linked above for how to get around that.\n\n## Setup\n\n- **Gmail.js requires jQuery to work**\n\n### Quick Usage - Chrome Console\n\n![](https://f.cloud.github.com/assets/461702/1628984/83ddb250-5728-11e3-9dbc-70a13c2becb0.JPG)\n\n```js\n// {inject jquery.js} by copy pasting this in your console\nvar jq = document.createElement(\'script\');\njq.src = "https://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js";\ndocument.getElementsByTagName(\'body\')[0].appendChild(jq);\n\n// {inject gmail.js} by copy pasting gmail.js contents or via url like jquery above\n// var Gmail = {.....} // paste gmail.js code here\n\n// start using!\n// you can also pass in a reference to jQuery upon init - Gmail(localJQuery)\nvar gmail = Gmail();\ngmail.get.user_email();\n```\n\n\n## Typescript\n\nUsing gmail-js with TypeScript is relatively easy, but if you use normal `import` syntax it\nwill fail. Instead you need to use `require`-syntax to load it:\n\n````typescript\nconst GmailFactory = require("gmail-js");\nconst gmail = new GmailFactory.Gmail() as Gmail;\n// working on the gmail-object now provides type-safety.\n````\n\n## Methods\n\n### Summary (click for more info)\n\n#### GET\n\n\n- [gmail.get**.user_email()**](#gmailgetuser_email)\n- [gmail.get**.manager_email()**](#gmailgetmanager_email)\n- [gmail.get**.current_page()**](#gmailgetcurrent_page)\n\n- [gmail.get**.new.email_id()**](#gmailnewgetemail_id)\n- [gmail.get**.new.email_data()**](#gmailnewgetemail_dataidentifier)\n- [gmail.get**.new.thread_id()**](#gmailnewgetthread_id)\n- [gmail.get**.new.thread_data()**](#gmailnewgetthread_dataidentifier)\n\n- [gmail.get**.email_subject()**](#gmailgetemail_subject)\n- [gmail.get**.compose_ids()**](#gmailgetcompose_ids)\n- [gmail.get**.email_source_async(identifier=undefined, callback, error_callback, preferBinary)**](#gmailgetemail_source_asyncidentifierundefined-callback-error_callback-preferBinaryfalse)\n- [gmail.get**.email_source_promise(identifier=undefined, preferBinary)**](#gmailgetemail_source_promiseidentifierundefined-preferBinaryfalse)\n- [gmail.get**.search_query()**](#gmailgetsearch_query)\n- [gmail.get**.unread_emails()**](#gmailgetunread_emails)\n - [gmail.get**.unread_inbox_emails()**](#gmailgetunread_emails)\n  - [gmail.get**.unread_draft_emails()**](#gmailgetunread_emails)\n  - [gmail.get**.unread_spam_emails()**](#gmailgetunread_emails)\n  - [gmail.get**.unread_forum_emails()**](#gmailgetunread_emails)\n  - [gmail.get**.unread_update_emails()**](#gmailgetunread_emails)\n  - [gmail.get**.unread_promotion_emails()**](#gmailgetunread_emails)\n  - [gmail.get**.unread_social_emails()**](#gmailgetunread_emails)\n- [gmail.get**.last_active()**](#gmailgetlast_active)\n- [gmail.get**.storage_info()**](#gmailgetstorage_info)\n- [gmail.get**.loggedin_accounts()**](#gmailgetloggedin_accounts)\n- [gmail.get**.beta()**](#gmailgetbeta)\n- [gmail.get**.localization()**](#gmailgetlocalization)\n\n#### GET (deprecated methods)\n\n- [gmail.get**.thread_id()**](#gmailgetthread_id)\n- [gmail.get**.email_id()**](#gmailgetemail_id)\n- [gmail.get**.email_ids()**](#gmailgetemail_ids)\n- [gmail.get**.email_data(email_id=undefined)**](#gmailgetemail_datathread_idundefined)\n- [gmail.get**.email_data_async(email_id=undefined, callback)**](#gmailgetemail_data_asyncemail_idundefined-callback)\n- [gmail.get**.displayed_email_data()**](#gmailgetdisplayed_email_data)\n- [gmail.get**.displayed_email_data_async(callback)**](#gmailgetdisplayed_email_data_asynccallback)\n- [gmail.get**.selected_emails_data()**](#gmailgetselected_emails_data)\n- [gmail.get**.visible_emails()**](#gmailgetvisible_emails)\n- [gmail.get**.visible_emails_async(callback)**](#gmailgetvisible_emails_asynccallback)\n\n\n\n#### CHECK\n\n\n- [gmail.check**.is_new_data_layer()**](#gmailcheckis_new_data_layer)\n- [gmail.check**.is_new_gui()**](#gmailcheckis_new_gui)\n- [gmail.check**.is_thread()**](#gmailcheckis_thread)\n- [gmail.check**.is_inside_email()**](#gmailcheckis_inside_email)\n- [gmail.check**.is_plain_text()**](#gmailcheckis_plain_text)\n- [gmail.check**.is_preview_pane()**](#gmailcheckis_preview_pane)\n- [gmail.check**.is_multiple_inbox()**](#gmailcheckis_multiple_inbox)\n- [gmail.check**.is_horizontal_split()**](#gmailcheckis_horizontal_split)\n- [gmail.check**.are_shortcuts_enabled()**](#gmailcheckare_shortcuts_enabled)\n- [gmail.check**.is_vertical_split()**](#gmailcheckis_vertical_split)\n- [gmail.check**.is_tabbed_inbox()**](#gmailcheckis_tabbed_inbox)\n- [gmail.check**.is_right_side_chat()**](#gmailcheckis_right_side_chat)\n- [gmail.check**.should_compose_fullscreen()**](#gmailcheckshould_compose_fullscreen)\n- [gmail.check**.is_conversation_view()**](#gmailcheckis_conversation_view)\n- [gmail.check**.is_google_apps_user()**](#gmailcheckis_google_apps_user)\n- [gmail.check**.is_priority_inbox()**](#gmailcheckis_priority_inbox)\n- [gmail.check**.is_rapportive_installed()**](#gmailcheckis_rapportive_installed)\n- [gmail.check**.is_streak_installed()**](#gmailcheckis_streak_installed)\n- [gmail.check**.is_anydo_installed()**](#gmailcheckis_anydo_installed)\n- [gmail.check**.is_boomerang_installed()**](#gmailcheckis_boomerang_installed)\n- [gmail.check**.is_xobni_installed()**](#gmailcheckis_xobni_installed)\n- [gmail.check**.is_signal_installed()**](#gmailcheckis_signal_installed)\n\n\n#### CHAT\n\n\n- [gmail.chat**.is_hangouts()**](#gmailchatis_hangouts)\n\n\n### COMPOSE\n\n- [gmail.compose**.start_compose()**](#gmailcomposestart_compose)\n\n\n#### OBSERVE\nIt is considered best practice to wait for the gmail interface to be loaded before observing any XHR actions.\n```js\ngmail.observe.on("load", function(){\n    //... now you can safely register other observers using gmail.observe.on\n});\n```\n\n- [gmail.observe**.http_requests()**](#gmailobservehttp_requests)\n- [gmail.observe**.actions()**](#gmailobserveactions)\n- [gmail.observe**.register(action, class/args, parent)**](#gmailobserveregisteraction-classargs-parentnull) - registers a custom DOM observer\n- [gmail.observe**.off(action,type)**](#gmailobserveoffactionnulltypenull)\n- [gmail.observe**.on(action, callback)**](#gmailobserveonaction-callback)\n  - **XHR observers**\n  - **`load`** - When the gmail interface has finished loading\n  - **`http_event`** - When gmail any CRUD operation happens on gmail\n  - **`poll`** - When gmail automatically polls the server to check for new emails every few seconds\n  - **`new_email`** - When a new email appears in the inbox\n  - **`open_email`** - When an email is opened from the inbox view\n  - **`refresh`** - When you click the refresh button\n  - **`unread`** - When a conversation(s) is marked unread\n  - **`read`** - When a conversation(s) is marked read\n  - **`delete`** - When a conversation(s) is deleted\n  - **`delete_message_in_thread`** - When a conversation(s) is deleted inside a thread\n  - **`mark_as_spam`** - When a conversation(s) is marked as spam\n  - **`mark_as_not_spam`** - When a conversation(s) is unchecked as spam\n  - **`label`** - When a conversation(s) get applied a label\n  - **`archive`** - When a conversation(s) is archieved\n  - **`move_to_inbox`** - When a conversation(s) is moved to the inbox\n  - **`delete_forever`** - When a conversation(s) is deleted forever\n  - **`star`** - When a conversation(s) is starred\n  - **`unstar`** - When a conversation(s) is unstarred\n  - **`undo_send`** - When the Undo Send button is clicked after trying to send a new email\n  - **`mark_as_important`** - When a conversation(s) is marked as important\n  - **`mark_as_not_important`** - When a conversation(s) is marked as not important\n  - **`filter_messages_like_these`** - When a filter button is triggered for a conversation\n  - **`mute`** - When a conversation(s) is muted\n  - **`unmute`** - When a conversation(s) is unmuted\n  - **`add_to_tasks`** - When an item is added to google tasks\n  - **`move_label`** - When a conversation(s) is moved to a label folder\n  - **`save_draft`** - When a draft is saved\n  - **`discard_draft`** - When a draft is dicarded\n  - **`send_message`** - When a message is sent (except scheduled messages)\n  - **`send_scheduled_message`** - When a message is scheduled for sending (but not actually sent)\n  - **`expand_categories`** - When a category is expanded from the left nav sidebar\n  - **`restore_message_in_thread`** - When a deleted message is restored inside a thread\n  - **`delete_label`** - When a label is deleted\n  - **`show_newly_arrived_message`** - When inside an email and a new email arrives in the thread\n  - **`upload_attachment`** - When an attachment is being uploaded to an email being composed\n  - **DOM observers**\n  - **`compose`** - When a new compose window is opened, or a message is replied to or forwarded\n  - **`recipient_change`** - When an email being written (either new compose, reply or forward) has its to, cc or bcc recipients updated\n  - **`view_thread`** - When a conversation thread is opened to read\n  - **`view_email`* - When an individual email is loaded within a conversation thread.\n      It\'s worth noting this event is only triggered when the email is actually rendered in the DOM. Gmail tends to cache the rendered emails, so it should not be expected to fire reliably for every viewing of the same email. It will most likely fire once, for the initial and possibly only rendering.\n  - **`load_email_menu`** - When the dropdown menu next to the reply button is clicked\n- [gmail.observe**.before(action, callback)**](#gmailobservebeforeaction-callback)\n- [gmail.observe**.after(action, callback)**](#gmailobserveafteraction-callback)\n- gmail.observe**.bind(type, action, callback)** - implements the on, after, before callbacks\n- gmail.observe**.on_dom(action, callback)** - implements the DOM observers - called by `gmail.observe.on`\n- gmail.observe**.bound(action, type)** - checks if a specific action and/or type has any bound observers\n- gmail.observe**.trigger(type, events, xhr)** - fires any specified events for this type (on, after, before) with specified parameters\n\n#### DOM\n\nThese methods return the DOM data itself\n\n- gmail.dom**.inboxes()**\n- gmail.dom**.inbox_content()**\n- [gmail.dom**.visible_messages()**](#gmaildomvisiblemessages)\n- gmail.dom**.email_subject()**\n- gmail.dom**.email_body()**\n- gmail.dom**.email_contents()**\n- gmail.dom**.get_left_sidebar_links()**\n- gmail.dom**.header()**\n- gmail.dom**.search_bar()**\n- gmail.dom**.toolbar()**\n- gmail.dom**.right_toolbar()**\n- [gmail.dom**.compose()**](#gmaildomcomposecompose_el) - compose dom object - receives the DOM element for the compose window and provides methods to interact\n- gmail.dom**.composes()** - retrieves an array of `gmail.dom.compose` objects representing any open compose windows\n- [gmail.dom**.email()**](#gmaildomemailemail_el-or-email_id) - email dom object - receives an email DOM element or email id for an email currently being viewed. Abstracts interaction with that email.\n- [gmail.dom**.thread()**](#gmaildomthreadthread_el) - thread dom object - receives a conversation thread DOM element currently being viewed. Abstracts interaction with that thread.\n\n#### TOOLS\n\nThese are some helper functions that the rest of the methods use. See source for input params\n\n- gmail.tools**.infobox(message, time)**\n  + Adds the yellow info box on top of gmail with the given message\n- gmail.tools**.rerender(callback)**\n  + Re-renders the UI using the available data.\n- gmail.tools**.xhr_watcher()**\n- gmail.tools**.parse_url()**\n- gmail.tools**.deparam()**\n- gmail.tools**.parse_view_data()**\n- gmail.tools**.parse_email_data()**\n- gmail.tools**.extract_email_address(str)**\n- gmail.tools**.extract_name(str)**\n- gmail.tools**.make_request()**\n- gmail.tools**.make_request_async()**\n- gmail.tools**.make_request_download_promise(url, preferBinary)** - function specialized for downloading email MIME messages or attachments.\n- gmail.tools**.sleep(ms)**\n- gmail.tools**.multitry(ms_delay, tries, func, bool_success_check)**\n- gmail.tools**.i18n(label)**\n- gmail.tools**.toggle_minimize()**\n- [gmail.tools**.add_toolbar_button(content_html, onclick_action, custom_style_class)**](#gmailtoolsadd_toolbar_buttoncontent_html-onclick_action-custom_style_class)\n- [gmail.tools**.add_right_toolbar_button(content_html, onclick_action, custom_style_class)**](#gmailtoolsadd_right_toolbar_buttoncontent_html-onclick_action-custom_style_class)\n- [gmail.tools**.add_compose_button(compose_ref, content_html, onclick_action, custom_style_class)**](#gmailtoolsadd_toolbar_buttoncompose_ref-content_html-onclick_action-custom_style_class)\n- [gmail.tools**.add_modal_window(title, content_html, onClickOk, onClickCancel, onClickClose)**](#gmailtoolsadd_modal_windowtitle-content_html-onClickOk-onClickCancel-onClickClose)\n- [gmail.tools**.remove_modal_window()**](#gmailtoolsremove_modal_window)\n\n#### TRACKER\n\nThese are some of the variables that are tracked and kept in memory while the rest of the methods are in use.\n\n- gmail.version\n- gmail.tracker**.events**\n- gmail.tracker**.xhr_init**\n- gmail.tracker**.xhr_open**\n- gmail.tracker**.xhr_send**\n- gmail.tracker**.watchdog**\n- gmail.tracker**.view_data**\n- gmail.tracker**.email_data**\n- gmail.tracker**.ik**\n- gmail.tracker**.rid**\n\n\n\n### Details\n\n\n#### gmail.new.get.email_id()\n\nObtains the new-style email-ID from the email currently on screen.\nExtracted via DOM.\n\nThis ID can only be used by `gmail.new.get.*`-functions.\n\nCan be provided email-element from HTML DOM, or Gmail DOMEmail object\nto look up specific email ID.\n\n#### gmail.new.get.thread_id()\n\nObtains the new-style thread-ID from the email currently on screen.\nExtracted via DOM.\n\nThis ID can only be used by `gmail.new.get.*`-functions.\n\n#### gmail.new.get.email_data(identifier)\n\nReturns a data-object for the requested email, if found in the\nemail-cache.\n\n`identifier` must be an object or string which uniquely identifies\nan email:\n\n- new-style email-id\n- legacy-style email-id (will cause warning)\n- DomEmail instance\n- EmailData instance\n\nIf no email-data can be found in Gmail.JS email-cache,\n`null` or `undefined` is returned instead.\n\nThis method returns immediately, uses no XHR, and has no\nasync-equivalent.\n\nPlease note: Email-data is intercepted and stored in the cache\nonly when Gmail itself has requested or used and email.\n\nThis typically happens when loading a label (pre-loading all emails in\nview) or when navigating to view a full thread.\n\nThat means that calling the same method later may return data even if\nthe first invocation returned `null`.\n\n\n```json\n{\n  "id": "msg-f:1581064946762017791",\n  "legacy_email_id": "15f1123136926bff",\n  "thread_id": "thread-f:1581064946762017791",\n  "smtp_id": "<87zi8wmmhw.fsf@gmail.com>",\n  "subject": "[PATCH] Flymake support for C/C++",\n  "timestamp": 1507821032297,\n  "content_html": "Hi,<br>\\n<br>\\nHere&#39;s a proposal for supporting Flymake in C/C++. This patch...",\n  "date": "2017-10-12T15:10:32.297Z",\n  "from": {\n    "address": "joaotavora@gmail.com",\n    "name": ""\n  },\n  "to": [\n    {\n      "address": "emacs-devel@gnu.org"\n    }\n  ],\n  "cc": [\n    {\n      "address": "acm@muc.de"\n    },\n    {\n      "address": "eliz@gnu.org"\n    }\n  ],\n  "bcc": [],\n  "attachments": [\n    {\n      "attachment_id": "0.1",\n      "name": "0001-Add-a-Flymake-backend-for-C.patch",\n      "type": "application/x-patch",\n      "url": "https://mail.google.com/mail/?ui=2&ik=94da28fb67&attid=0.1&permmsgid=msg-f:1581064946762017791&th=15f1123136926bff&view=att&zw",\n      "size": 11225\n    }\n  ]\n}\n```\n\n#### gmail.new.get.thread_data(identifier)\n\nReturns a data-object for the requested email-thread, if found in the\nemail-cache.\n\n`identifier` must be an object or string which uniquely identifies\na thread:\n\n- a new-style thread-id\n- new-style email-id\n- legacy-style email-id (will cause warning)\n- DomEmail instance\n- DomThread instance\n- EmailData instance\n\nIf no thread-data can be found in Gmail.JS email-cache,\n`null` or `undefined` is returned instead.\n\nThis method returns immediately, uses no XHR, and has no\nasync-equivalent.\n\nPlease note: Email-data is intercepted and stored in the cache\nonly when Gmail itself has requested or used and email.\n\nThis typically happens when loading a label (pre-loading all emails in\nview) or when navigating to view a full thread.\n\nThat means that calling the same method later may return data even if\nthe first invocation returned `null`.\n\n\n```json\n{\n    "thread_id": "thread-f:1581064946762017791",\n    "emails": [...email_data elements...]\n}\n```\n\n#### gmail.get.email_source(identifier=undefined)\n\nDeprecated function. Will be removed. Migrate to\n`gmail.get.email_source_async` or `gmail.get.email_source_promise`\ninstead.\n\n#### gmail.get.email_source_async(identifier=undefined, callback, error_callback, preferBinary=false)\n\nRetrieves raw MIME message source from the gmail server for the\nspecified email identifier.\n\n`identifier` must be an object or string which uniquely identifies\nan email:\n\n- new-style email-id\n- legacy-style email-id (will cause warning)\n- DomEmail instance\n- EmailData instance\n\nIf not specified, current email will be resolved automatically.\n\nBy default, once retrieved the resulting data will be passed to\n`callback` in text-format. **This may corrupt the actual email\nMIME-data, by causing irreversible content-encoding\nconsistency-errors.**\n\nIf you need to parse this data in a proper MIME-parser later, the only\nway to avoid this kind of error is to download the data in binary\nformat and do your own decoding inside your own MIME-parser.\n\nTo get the email-source in binary form, you must set the\n`preferBinary`-parameter to `true`.\n\n#### gmail.get.email_source_promise(identifier=undefined, preferBinary=false)\n\nDoes the same as above but implements it using ES6 promises.\n\n\n#### gmail.get.user_email()\n\nReturns the current user\'s email address\n\n```js\n"california@gmail.com"\n```\n\n#### gmail.get.manager_email()\n\nReturns the email address of the user currently managing the account (if the inbox is used by the owner, this function returns the same value as [gmail.get**.user_email()**](#gmailgetuser_email))\n\n```js\n"california@gmail.com"\n```\n\n#### gmail.get.delegated_to_email()\n\nReturns the email address of the user the account is currently delegated to (if the inbox is used by the owner, this function returns null)\n\n```js\n"california@gmail.com"\n```\n\n#### gmail.get.storage_info()\n\nReturns current user\'s file storage stats\n\n```json\n{\n  "used": "0 GB",\n  "total": "15 GB",\n  "percent": 0\n}\n```\n\n#### gmail.get.current_page()\n\nReturns what page of gmail the user is currently on. These are the possible responses\n\n```js\n[\'sent\', \'inbox\', \'starred\', \'drafts\', \'imp\', \'chats\', \'all\', \'spam\', \'trash\', \'circle\'] // pages\n"email" // inside email conversation\n"/search/[.+]" // inside search view\n"/label/[.+]" // inside label view\n"/category/[.+]" // inside category view\n"/settings/[.+]" // settings sub-page (excluding settings root page)\n```\n\n#### gmail.get.email_subject()\n\nReturns the opened email\'s subject from the DOM\n\n```js\n"test"\n```\n\n\n### gmail.get.compose_ids()\n\nReturns the latest/last email id of emails that have been saved as drafts (currently open)\n\n```js\n["14469c73bba6ff53", "14469c7b8581ccfa"]\n```\n\n\n#### gmail.get.search_query()\n\nReturns the search bar data\n\n```js\n"from:hi@kartikt.com is:unread"\n```\n\n#### gmail.get.unread_emails()\n\nReturns a count of total unread emails for the current account.\n\n```json\n{\n  "inbox": 2,\n  "drafts": 0,\n  "spam": 0,\n  "forum": 0,\n  "notifications": 0,\n  "promotions": 0,\n  "social": 0\n}\n```\n\nYou can also request the data individually\n\n- **gmail.get.unread_inbox_emails()**\n- **gmail.get.unread_draft_emails()**\n- **gmail.get.unread_spam_emails()**\n- **gmail.get.unread_forum_emails()**\n- **gmail.get.unread_update_emails()**\n- **gmail.get.unread_promotion_emails()**\n- **gmail.get.unread_social_emails()**\n\n\n#### gmail.get.last_active()\n\nGets user\'s account activity data\n\n```json\n{\n  "time": "9:41 pm",\n  "ip": "54.234.192.48",\n  "mac_address": "2620:101:f000:702:a966:ab42:4a46:195e",\n  "time_relative": "31 minutes ago"\n}\n```\n\n#### gmail.get.loggedin_accounts()\n\nReturns a list of signed-in accounts (multiple user accounts setup in gmail)\n\n```json\n[{"name":"California","email":"california@gmail.com"}]\n```\n\n#### gmail.get.beta()\n\nAlthough hand picked, this method returns the checks on beta features and deployments\n\n```json\n{"new_nav_bar":true}\n```\n\n#### gmail.get.localization()\n\nReturns the Gmail localization, e.g. \'US\'.\n\n#### gmail.check.is_new_data_layer()\n\nReturns `True` if the user is running Gmail with the new 2018 data-layer `False` otherwise\n\n#### gmail.check.is_new_gui()\n\nReturns `True` if the user is running Gmail with the new 2018 GUI `False` otherwise\n\n#### gmail.check.is_thread()\n\nReturns `True` if the conversation is threaded `False` otherwise\n\n#### gmail.check.is_preview_pane()\n\nReturns `True` if gmail is in split pane mode (vertical or horizontal) `False` otherwise\n\n#### gmail.check.is_multiple_inbox()\n\nReturns `True` if user has multiple inbox lab enabled, `False` otherwise\n\n#### gmail.check.is_horizontal_split()\n\nReturns `True` if the pane split mode is horiontal `False` otherwise\n\n#### gmail.check.are_shortcuts_enabled()\n\nReturns `True` if user has enabled mail action shortcuts, `False` otherwise\n\n#### gmail.check.is_vertical_split()\n\nReturns `True` if the pane mode is vertical `False` otherwise\n\n#### gmail.check.is_tabbed_inbox()\n\nReturns `True` if tabbed inbox view is enabled `False` otherwise\n\n#### gmail.check.is_right_side_chat()\n\nReturns `True` if chat is on the right sidebar `False` otherwise\n\n#### gmail.check.should_compose_fullscreen()\n\nReturns `True` if compose is in fullscreen mode `False` otherwise\n\n#### gmail.check.is_conversation_view()\n\nReturns `True` if emails are displayed as threads, `False` otherwise (i.e. displayed individually)\n\n#### gmail.check.is_google_apps_user()\n\nReturns `True` if the current user is google apps user (email not ending in gmail.com) `False` otherwise\n\n#### gmail.check.is_inside_email()\n\nReturns `True` if you are currently inside an email conversation `False` otherwise\n\n#### gmail.check.is_plain_text()\n\nReturns `True` if compose is in plain text mode, `False` if in rich text mode\n\n#### gmail.check.is_priority_inbox()\n\nReturns `True` if priority inbox is enabled `False` otherwise\n\n#### gmail.check.is_rapportive_installed()\n\nReturns `True` if [rapportive](http://rapportive.com/) chrome extension is installed `False` otherwise\n\n#### gmail.check.is_streak_installed()\n\nReturns `True` if [streak](http://streak.com) chrome extension is installed `False` otherwise\n\n#### gmail.check.is_anydo_installed()\n\nReturns `True` if [any.do](http://any.do) chrome extension is installed `False` otherwise\n\n#### gmail.check.is_boomerang_installed()\n\nReturns `True` if [boomerang](http://www.boomeranggmail.com/) chrome extension is installed `False` otherwise\n\n#### gmail.check.is_xobni_installed()\n\nReturns `True` if [xobni](https://www.xobni.com) chrome extension is installed `False` otherwise\n\n#### gmail.check.is_signal_installed()\n\nReturns `True` if [Signal](https://trysignal.com) chrome extension is installed `False` otherwise\n\n\n#### gmail.chat.is_hangouts()\n\nReturns `True` if the account supports the new hangout UI for chat `False` otherwise (native chat window)\n\n\n#### gmail.compose.start_compose()\n\n-Clicks on the compose button making the inbox compose view to popup\n\n\n#### gmail.observe.http_requests()\n\nAfter an observer has been bound through `gmail.observe.bind()` (via a call to events `gmail.observe.before()`, `gmail.observe.on()`, or `gmail.observe.after()`), this method keeps track of the last 50 http events.\nThe items contain the sent requested parameterized data\n\n```json\n[{\n  "method": "POST",\n  "url": {\n    "ui": "2",\n    "ik": "13fa7f7088",\n    "rid": "ed0e..",\n    "view": "tl",\n    "start": "0",\n    "num": "30",\n    "lhop": "169846",\n    "ltup": "%5Ei",\n    "slmm": "1427abc6106ac10b",\n    "scid": "q2h353hw6dv9",\n    "avw": "1194",\n    "ntlv": "10",\n    "auto": "1",\n    "ver": "-z-h-bKmWwI.en.",\n    "am": "!6hSPXvkvPMjmReGu2-2BQXCk3IltF-jNSk0J8Cg_jNeaoSbpJgHQYdkXe6T_WPYyyATD3DSiOA",\n    "vas": "1",\n    "ari": "120",\n    "_reqid": "4582876",\n    "pcd": "1",\n    "mb": "0",\n    "rt": "j",\n    "search": "inbox"\n  },\n  "body": "",\n  "url_raw": "?ui=2&ik=13fa7f7088&rid=ed0e..&view=tl&start=0&num=30&lhop=169846&ltup=%5Ei&slmm=1427abc6106ac10b&scid=q2h353hw6dv9&avw=1194&ntlv=10&auto=1&ver=-z-h-bKmWwI.en.&am=!6hSPXvkvPMjmReGu2-2BQXCk3IltF-jNSk0J8Cg_jNeaoSbpJgHQYdkXe6T_WPYyyATD3DSiOA&vas=1&ari=120&_reqid=4582876&pcd=1&mb=0&rt=j&search=inbox"\n}]\n```\n\n#### gmail.observe.actions()\n\nSimilar to `gmail.observe.http_requests()` this keeps track of the last 10 gmail actions (vs all http requests).\nActions here correspond to things like clicking refres, archiving, deleting, starring etc.\n\n#### gmail.observe.on(action, callback)\n\nThis is the key feature of gmail.js. This method allows you to add triggers to all of these actions so you can build\nyour custom extension/tool with this library.\n\nYou simply specify the action name and your function that the method will return data to when the actions are triggered\nand it does the rest. **You can have multiple triggers**\n\nYour callback will be fired directly after Gmail\'s XMLHttpRequest has been sent off the the Gmail servers.\n\n**Available Actions**\n\n  - **http_event** - When gmail any CRUD operation happens on gmail\n  - **poll** - When gmail automatically polls the server to check for new emails every few seconds\n  - **new_email** - When a new email appears in the inbox\n  - **open_email** - When an email is opened from the inbox view\n  - **refresh** - When you click the refresh button\n  - **unread** - When a conversation(s) is marked unread\n  - **read** - When a conversation(s) is marked read\n  - **delete** - When a conversation(s) is deleted\n  - **delete_message_in_thread** - When a conversation(s) is deleted inside and is part of a thread\n  - **mark_as_spam** - When a conversation(s) is marked as spam\n  - **mark_as_not_spam** - When a conversation(s) is unchecked as spam\n  - **label** - When a conversation(s) get applied a label\n  - **archive** - When a conversation(s) is archieved\n  - **move_to_inbox** - When a conversation(s) is moved to the inbox\n  - **delete_forever** - When a conversation(s) is deleted forever\n  - **star** - When a conversation(s) is starred\n  - **unstar** - When a conversation(s) is unstarred\n  - **`undo_send`** - When the Undo Send button is clicked after trying to send a new email\n  - **mark_as_important** - When a conversation(s) is marked as important\n  - **mark_as_not_important** - When a conversation(s) is marked as not important\n  - **filter_messages_like_these** - When a filter button is triggered for a conversation\n  - **mute** - When a conversation(s) is muted\n  - **unmute** - When a conversation(s) is unmuted\n  - **add_to_tasks** - When an item is added to google tasks\n  - **move_label** - When a conversation(s) is moved to a label folder\n  - **save_draft** - When a draft is saved\n  - **discard_draft** - When a draft is dicarded\n  - **send_message** - When a message is sent (except scheduled messages)\n  - **send_scheduled_message** - When a message is scheduled for sending (but not actually sent)\n  - **expand_categories** - When a category is expanded from the left nav sidebar\n  - **restore_message_in_thread** - When a deleted message is restored inside a thread\n  - **delete_label** - When a label is deleted\n  - **show_newly_arrived_message** - When inside an email and a new email arrives in the thread\n\nThe on method also supports observering specific DOM events in the Gmail Interface (for example when a new compose window is opened). These are only available via the `on` method (not the `before` or `after` methods).\n\n**Available DOM Actions/Observers**\n\n - **load** - When the gmail interface has completed loading\n - **compose** - When a new compose window opens, or a message is replied to or forwarded\n - **compose_cancelled** - When an existing compose window is closed.\n - **recipient_change** - When the recipient (to, cc or bcc) is changed when composing a new email or replying/forwarding an email\n - **view_thread** - When a new coversation thread is opened\n - **view_email** - When an individual email is loaded within a thread (also fires when thread loads displaying the latest email)\n - **load_email_menu** - When the dropdown menu next to the reply button is clicked\n\n```js\ngmail.observe.on("http_event", function(params) {\n  console.log("url data:", params);\n})\n\ngmail.observe.on("unread", function(id, url, body, xhr) {\n  console.log("id:", id, "url:", url, \'body\', body, \'xhr\', xhr);\n})\n\ngmail.observe.on("read", function(id, url, body, xhr) {\n  console.log("id:", id, "url:", url, \'body\', body, \'xhr\', xhr);\n})\n\ngmail.observe.on("delete", function(id, url, body, xhr) {\n  console.log("id:", id, "url:", url, \'body\', body, \'xhr\', xhr);\n})\n\ngmail.observe.on("mark_as_spam", function(id, url, body, xhr) {\n  console.log("id:", id, "url:", url, \'body\', body, \'xhr\', xhr);\n})\n\ngmail.observe.on("mark_as_not_spam", function(id, url, body, xhr) {\n  console.log("id:", id, "url:", url, \'body\', body, \'xhr\', xhr);\n})\n\ngmail.observe.on("label", function(id, url, body, label, xhr) {\n  console.log("id:", id, "url:", url, \'body\', body, "label", label, \'xhr\', xhr);\n})\n\ngmail.observe.on("archive", function(id, url, body, xhr) {\n  console.log("id:", id, "url:", url, \'body\', body, \'xhr\', xhr);\n})\n\ngmail.observe.on("move_to_inbox", function(id, url, body, xhr) {\n  console.log("id:", id, "url:", url, \'body\', body, \'xhr\', xhr);\n})\n\ngmail.observe.on("delete_forever", function(id, url, body, xhr) {\n  console.log("id:", id, "url:", url, \'body\', body, \'xhr\', xhr);\n})\n\ngmail.observe.on("delete_message_in_thread", function(id, url, body) {\n  console.log("id:", id, "url:", url, \'body\', body);\n})\n\ngmail.observe.on("restore_message_in_thread", function(id, url, body) {\n  console.log("id:", id, "url:", url, \'body\', body);\n})\n\ngmail.observe.on("star", function(id, url, body, xhr) {\n  console.log("id:", id, "url:", url, \'body\', body, \'xhr\', xhr);\n})\n\ngmail.observe.on("unstar", function(id, url, body, xhr) {\n  console.log("id:", id, "url:", url, \'body\', body, \'xhr\', xhr);\n})\n\ngmail.observe.on("undo_send", function(url, body, data, xhr) {\n  console.log(\'body\', body, \'xhr\', xhr, \'msg_id : \', body.m);\n})\n\ngmail.observe.on("mark_as_important", function(id, url, body, xhr) {\n  console.log("id:", id, "url:", url, \'body\', body, \'xhr\', xhr);\n})\n\ngmail.observe.on("mark_as_not_important", function(id, url, body, xhr) {\n  console.log("id:", id, "url:", url, \'body\', body, \'xhr\', xhr);\n})\n\ngmail.observe.on("filter_messages_like_these", function(id, url, body, xhr) {\n  console.log("id:", id, "url:", url, \'body\', body, \'xhr\', xhr);\n})\n\ngmail.observe.on("mute", function(id, url, body, xhr) {\n  console.log("id:", id, "url:", url, \'body\', body, \'xhr\', xhr);\n})\n\ngmail.observe.on("unmute", function(id, url, body, xhr) {\n  console.log("id:", id, "url:", url, \'body\', body, \'xhr\', xhr);\n})\n\ngmail.observe.on("add_to_tasks", function(url, body, data, xhr) {\n  console.log("url:", url, \'body\', body, \'task_data\', data, \'xhr\', xhr);\n})\n\ngmail.observe.on("move_label", function(id, url, body, xhr) {\n  console.log("id:", id, "url:", url, \'body\', body, \'xhr\', xhr);\n})\n\ngmail.observe.on("save_draft", function(url, body, data, xhr) {\n  console.log("url:", url, \'body\', body, \'email_data\', data, \'xhr\', xhr);\n})\n\ngmail.observe.on("discard_draft", function(id, url, body, xhr) {\n  console.log("id:", id, "url:", url, \'body\', body, \'xhr\', xhr);\n})\n\ngmail.observe.on("send_message", function(url, body, data, xhr) {\n  console.log("url:", url, \'body\', body, \'email_data\', data, \'xhr\', xhr);\n})\n\ngmail.observe.on("send_scheduled_message", function(url, body, data, xhr) {\n  console.log("url:", url, \'body\', body, \'email_data\', data, \'xhr\', xhr);\n})\n\ngmail.observe.on("expand_categories", function(url, body, data, xhr) {\n  console.log("url:", url, \'body\', body, \'expanded_data\', data, \'xhr\', xhr);\n})\n\ngmail.observe.on("delete_label", function(id, url, body, xhr) {\n  console.log("id:", id, "url:", url, \'body\', body, \'xhr\', xhr);\n})\n\ngmail.observe.on("show_newly_arrived_message", function(id, url, body) {\n  console.log("id:", id, "url:", url, \'body\', body);\n})\n\ngmail.observe.on("poll", function(url, body, data, xhr) {\n  console.log("url:", url, \'body\', body, \'data\', data, \'xhr\', xhr);\n})\n\ngmail.observe.on("new_email", function(id, url, body, xhr) {\n  console.log("id:", id, "url:", url, \'body\', body, \'xhr\', xhr);\n})\n\ngmail.observe.on("refresh", function(url, body, data, xhr) {\n  console.log("url:", url, \'body\', body, \'data\', data, \'xhr\', xhr);\n})\n\ngmail.observe.on("open_email", function(id, url, body, xhr) {\n  console.log("id:", id, "url:", url, \'body\', body, \'xhr\', xhr);\n  console.log(gmail.get.email_data(id));\n})\n\ngmail.observe.on("upload_attachment", function(file, xhr) {\n  console.log("file", file, \'xhr\', xhr);\n})\n\n// DOM observers\ngmail.observe.on("compose", function(compose, type) {\n\n  // type can be compose, reply or forward\n  console.log(\'api.dom.compose object:\', compose, \'type is:\', type );  // gmail.dom.compose object\n});\n\ngmail.observe.on(\'recipient_change\', function(match, recipients) {\n  console.log(\'recipients changed\', match, recipients);\n});\n\ngmail.observe.on(\'view_thread\', function(obj) {\n  console.log(\'conversation thread opened\', obj); // gmail.dom.thread object\n});\n\ngmail.observe.on(\'view_email\', function(obj) {\n  console.log(\'individual email opened\', obj);  // gmail.dom.email object\n});\n\ngmail.observe.on(\'load_email_menu\', function(match) {\n  console.log(\'Menu loaded\',match);\n\n  // insert a new element into the menu\n  $(\'<div />\').addClass(\'J-N-Jz\')\n      .html(\'New element\')\n      .appendTo(match);\n});\n\n```\n\n#### gmail.observe.before(action, callback)\n\nSimilar to `gmail.observe.on`, this method allows you to bind callbacks to specific events.\n\nAll of the standard actions in `gmail.observe.on` work here, with the exception of the DOM actions\n\nThe main difference between `on` and `before` is that these callbacks are fired *before* Gmail\'s XMLHttpRequest has been sent off the the Gmail servers.This means, where relevant, your callback function can change it prior to it departing by editing the xhrParams.body_params object in the passed xhr parameter.\n\n```js\ngmail.observe.before(\'send_message\', function(url, body, data, xhr){\n  var body_params = xhr.xhrParams.body_params;\n\n  // lets cc this email to someone extra if the subject is \'Fake example\'\n  if(data.subject == \'Fake example\') {\n    if(body_params.cc) {\n      if(typeof body_params.cc != \'object\') body_params.cc = [ body_params.cc ];\n    } else {\n      body_params.cc = [];\n    }\n    body_params.cc.push(\'brent@zeald.com\');\n  }\n\n  // now change the subject\n  body_params.subject = \'Subject overwritten!\';\n  console.log("sending message, url:", url, \'body\', body, \'email_data\', data, \'xhr\', xhr);\n});\n```\n#### gmail.observe.after(action, callback)\n\nSimilar to `gmail.observe.on`, this method allows you to bind callbacks to specific events.\n\nAll of the standard actions in `gmail.observe.on` work here, with the exception of the DOM actions\n\nThe main difference between `on` and `after` is that these callbacks are fired once Gmail\'s XMLHttpRequest has returned from the Gmail servers (on the XMLHttpRequest `onreadystatechange` event).\n\nIn addition to the usual parameters received by a callback, callbacks you define for an `after` event receive an additional `response` parameter prior to the last xhr parameter. This response parameter is a parsed object representation of the response from the Gmail servers.\n\nSo for example, the `send_message` action would receive:\n\n```js\ngmail.observe.after("send_message", function(url, body, data, response, xhr) {\n  console.log("message sent", "url:", url, \'body\', body, \'email_data\', data, \'response\', response, \'xhr\', xhr);\n})\n```\n\n#### gmail.observe.off(action=null,type=null)\n\nTurn off an observe action. Providing it no argument will disable all observers.\n\nType is either before, after, on or dom. If not specified will disable all types of specified observer.\n\n```js\ngmail.observe.on(\'poll\', function(x,y,z){});\ngmail.observe.before(\'refresh\', function(x,y,z){});\ngmail.observe.after(\'send_message\', function(x,y,z){});\n\ngmail.observe.off(\'poll\',\'on\'); // disables on poll\ngmail.observe.off(\'poll\'); // disables all poll events of any type\ngmail.observe.off(null,\'before\'); // disables all before observers\ngmail.observe.off();  // disables all\n```\n\n#### gmail.observe.register(action, class/args)\n\nAllow an application to register a custom DOM observer specific to their application.\nAdds it to the configured DOM observers that will then be supported by the dom insertion observer.\n*Note* this method must be called prior to binding any handlers to specific actions/observers using `on`, `before` or `after`.\nOnce you start binding handlers, you cannot register any further custom observers.\n\nThis method can be called two different ways:\n\nSimple:\n  - action - the name of the new DOM observer\n  - class - the class of an inserted DOM element that identifies that this action should be triggered\n\nComplex:\n  - action - the name of the new DOM observer\n  - args - an object containin properties for each of the supported DOM observer configuration agruments:\n    - class - the class of an inserted DOM element that identifies that this action should be triggered\n    - selector - if you need to match more than just the className of a specific element to indicate a match, you can use this selector for further checking (uses element.is(selector) on matched element). E.g. if there are multiple elements with a class indicating an observer should fire, but you only want it to fire on a specific id, then you would use this\n    - sub_selector - if specified, we do a jquery element.find for the passed selector on the inserted element and ensure we can find a match\n    - handler - if specified this handler is called if a match is found. Otherwise default calls the callback & passes the jQuery matchElement\n\n```js\n\n// this will register an observer that fires each time the autosuggest listbox pops up / changes\n// as you type an email address into a compose\ngmail.observe.register(\'compose_email_select\', {\n  class: \'Jd-axF\',\n  selector: \'div.Jd-axF:first-child\'\n});\ngmail.observe.on(\'compose_email_select\', function(match) {\n  console.log(\'Email select popup\',match);\n});\n\n```\n\n### gmail.dom.visible_messages()\nReturns basic data for all the messages currently visible in the messages view. Taken from the DOM.\n\n```json\n[\n{\n    "summary": "Hey Bill",\n    "from": {\n        "email": "joe@gmail.com",\n        "name": "Joe",\n    },\n    "$el": tr#:9b.zA.zE.inboxsdk__thread_row,\n    "thread_id": "thread-f:1628504557508152478",\n    "legacy_email_id": undefined,\n},\n{\n    "summary": "The best of Gmail, wherever you are",\n    "from": {\n        "name": "Gmail",\n        "email": "mail-noreply@google.com"\n    },\n    "$el": tr#:9b.zA.zE.inboxsdk__thread_row,\n    "thread_id": "#thread-f:1634069952006597946"\n    "legacy_email_id": undefined,\n},\n]\n```\n\n\n### gmail.dom.compose(compose_el)\n\nAn object used to abstract interation with a compose popup.\nRepresents a compose window in the DOM and provides a bunch of methods and properties to access & interact with the window.\n\nExpects a jQuery DOM element for the compose div.\n\n```javascript\n// you can use an observer to retrieve a compose object\ngmail.observe.on(\'compose\', function(compose, composeType) {\n  // compose type can be one of "reply" | "forward" | "compose"\n  console.log(\'Compose object:\', compose, \'compose type:\', composeType);\n});\n```\n\nCompose methods:\n\n- **.id()** - retrieve the compose id\n- **.email_id()** - retrieve the draft email id\n- **.is_inline()** - is this compose instance inline (as with reply & forwards) or a popup (as with a new compose)\n- **.recipients(options)** - retrieves `to`, `cc`, `bcc` and returns them in a hash of arrays.\n  Options:\n  - *.type* - string  `to`, `cc`, or `bcc` to check a specific one\n  - *.flat* - boolean if `true` will just return an array of all recipients instead of splitting out into to, cc, and bcc\n- **.to()** - retrieve the current `to` recipients\n- **.cc()** - retrieve the current `cc` recipients\n- **.bcc()** - retrieve the current `bcc` recipients\n- **.subject(subject)** - get/set the current subject\n- **.from()** - get the from email, if user only has one email account they can send from, returns that email address\n- **.body(body)** - get/set the email body\n- **.send()** - triggers the same action as clicking the "send" button would do.\n- **.find(selector)** - map find through to jquery element\n- **.close()** - close compose window\n- **.dom(lookup)** - retrieve preconfigured dom elements for this compose window.\n    Lookup can be one of `\'to\' | \'cc\' | \'bcc\' | \'id\' | \'draft\' | \'subject\' | \'subjectbox\'\n  | \'all_subjects\' | \'body\' | \'reply\' | \'forward\' | \'from\' | \'send_button\'`\n\n### gmail.dom.email(email_el or email_id)\n\nAn object for interacting with an email currently present in the DOM. Represents an individual email message within a thread, and provides a number of methods and properties to access & interact with the interface and email data.\n\nExpects a jQuery DOM element for the email div (div.adn as returned by the ``view_email`` observer), or an email_id\n\n- **.id** - property storing the id of the email\n- **.email_id()** - draft id of the email\n- **.body([body])** - allows get/set the html body in the DOM\n- **.to([to_array])** - allows retrieve or updating to/from DOM who the email is addressed to\n- **.from([email_address],[name])** - allows get/set who the email is from in the DOM\n- **.attachments()** - retrieves the attachments for the email in the DOM\n- **.data()** - retrieves object of email data from the Gmail servers\n- **.source()** - retrieves the email raw source from the Gmail servers\n- **.dom()** - retrieves the primary element, or other defined elements from the DOM\n\n#### gmail.dom.email.body([body=null])\n\nGet/Set the full email body as it sits in the DOM. Note: This gets & sets the body html after it has been parsed & marked up by GMAIL. To retrieve it as it exists in the email message source, use a call to ``.data()``\n\nIf you want the actual DOM element use .dom(\'body\');\n\nReceives optional argument containing html to update the email body with.\n\n```js\nvar email = new gmail.dom.email(email_id); // optionally can pass relevant $(\'div.adn\');\nvar body = email.body();\nvar id = email.id;\n\n// add a heading at the start of the email and update in the interface\nemail.body(\'<h1>My New Heading!</h1>\' + body);\n```\n\n#### gmail.dom.email.to([to_array=null])\n\nGet/Set who the email is showing as To.\nOptionally receives an array of objects containing email and/or name properties. If received replaces the values in the DOM.\nReturns an array of objects containing email & name of who is showing in the DOM as the email is to.\n\n```js\nvar email = new gmail.dom.email(email_id);\nvar to = email.to();\nconsole.log(\'Email is to\', to); // [{email: \'user@user.com\', name: \'Display Name\'}, {email: \'user2@user.com\', name: \'User Two\'}]\n\n// update values that appear in the interface. This supports the popup hovers in gmail interface etc\nto = email.to([\n  {email: \'user@user.com\', name: \'Display Name\'},\n  {email: \'user2@user.com\', name: \'User Two\'}\n]);\n```\n#### gmail.dom.email.from([email_address=null], [display_name=null])\n\nGet/Set the sender of the email that is displayed in the interface.\nOptionally receives email and name properties. If received updates the values in the DOM\nReturns an object containing email & name of the sender and dom element\n\n```js\nvar email = new gmail.dom.email(email_id);\nvar from = email.from();\nconsole.log(\'Email is from\', from); // {email: \'user@user.com\', name: \'Display Name\'}\n\n// update who the email is from in the interface\nfrom.name = \'New Name\';\nemail.from(from);\n```\n\n#### gmail.dom.email.data()\n\nRetrieve relevant email data from the Gmail servers for this email\nMakes use of the gmail.get.email_data() method\nReturns an object containing the email data. Caches email data for all emails in the thread\n\n```js\nvar email = new gmail.dom.email(email_id);\nvar data = email.data();\nconsole.log(\'Email data is\',data);\n```\n\n#### gmail.dom.email.source()\n\nRetrieve email source for this email from the Gmail servers\nMakes use of the gmail.get.email_source() method\nReturns string of email raw source\n\n```js\nvar email = new gmail.dom.email(email_id);\nvar source = email.source();\nconsole.log(\'Email source is\',source);\n```\n\n#### gmail.dom.email.dom([lookup=null])\n\nRetrieve preconfigured dom elements for this email\nAbstracts relevant dom elements so code can be centralized - making it easier to update if Gmail updates its interface\nRetrieves the primary DOM element if you pass no lookup\nSupported lookups:\n      -  _null_ (primary element)\n      -  body\n      -  from\n      -  to\n      -  to_wrapper\n      -  timestamp\n      -  star\n      -  reply_button\n      -  menu_button\n      -  details_button\n\n```js\nvar email = new gmail.dom.email(email_id);\nvar el = email.dom();\nvar to_dom = email.dom(\'to\');\nconsole.log(\'El is\',el,\'To elements are\',to);\n```\n\n### gmail.dom.thread(thread_el)\n\nAn object for interacting with a conversation thread currently present in the DOM. Provides methods to access & interact with the interface.\n\nExpects a jQuery DOM element for the thread wrapper div (div.if as returned by the ``view_thread`` observer)\n\n- **.dom()** - retrieves the primary element, or other defined elements from the DOM\n\n#### gmail.dom.thread.dom([lookup=null])\n\nRetrieve preconfigured dom elements for this conversation thread\nAbstracts relevant dom elements so code can be centralized - making it easier to update if Gmail updates its interface\nRetrieves the primary DOM element if you pass no lookup\nSupported lookups:\n      -  _null_ (primary element)\n      -  opened_email\n      -  subject\n      -  labels\n\n```js\nvar thread = new gmail.dom.thread($(\'div.if\'));\nvar el = thread.dom();\nvar subject = thread.dom(\'subject\');\nconsole.log(\'El is\',el,\'Subject element is\',subject);\n```\n\n#### gmail.tools.add_toolbar_button(content_html, onclick_action, custom_style_class)\n\nAdd a new button to Gmail Toolbar\n\n```js\ngmail.tools.add_toolbar_button(\'content_html\', function() {\n  // Code here\n}, \'Custom Style Classes\');\n```\n\n#### gmail.tools.add_right_toolbar_button(content_html, onclick_action, custom_style_class)\n\nAdd a new button to Gmail Toolbar on the right hand side\n\n```js\ngmail.tools.add_right_toolbar_button(\'content_html\', function() {\n  // Code here\n}, \'Custom Style Classes\');\n```\n\n#### gmail.tools.add_compose_button(compose_ref, content_html, onclick_action, custom_style_class)\n\nAdd button to compose window.\nYou can use gmail.dom.composes() to get compose reference.\n\n```js\nvar compose_ref = gmail.dom.composes()[0];\ngmail.tools.add_compose_button(compose_ref, \'content_html\', function() {\n  // Code here\n}, \'Custom Style Classes\');\n```\n\n#### gmail.tools.add_attachment_button(attachment_ref, content_html, customCssClass, tooltip, onclick_action)\n\nAdd a button to an attachment in email-view.\n\n```js\nvar emailDom = gmail.dom.email(gmail.get.email_id());\nvar attachments = emailDom.attachments();\n\nvar iconUrl = "https://upload.wikimedia.org/wikipedia/commons/thumb/5/53/Google_%22G%22_Logo.svg/1024px-Google_%22G%22_Logo.svg.png";\nvar html = \'<img src="\' + iconUrl + \'" width="21" height="21" />\';\n\nfor (let attachment of attachments) {\n    gmail.tools.add_attachment_button(attachment, html, null, "Custom button!", function() {\n        console.log("Attachment " + attachment.name + " clicked!");\n\n        gmail.get.email_data_async(emailDom.id, (data) => {\n            email = data.threads[emailDom.id];\n            attachment_details = email.attachments_details.filter(\n                i => i.name === attachment.name\n            )[0];\n            console.log("This attachment has URL: " + attachment_details.url);\n            // download using api.tools.make_request_download_promise!\n        });\n    });\n}\n```\n\n#### gmail.tools.add_modal_window(title, content_html, onClickOk, onClickCancel, onClickClose)\n\nCreate a modal window with specified title, content and callback functions.\n\n```onClickOk``` triggers when the user clicks the OK button on the modal window. ```onClickCancel``` triggers when the user clicks the Cancel button on the modal window. ```onClickClose``` triggers when the user clicks the X in the upper right hand side of the modal window.\n\nBy default, if ```onClickCancel``` or ```onClickClose``` are left blank, their corresponding buttons will remove the modal window by calling ```gmail.tools.remove_modal_window```.\n\n```js\ngmail.tools.add_modal_window(\'Clean inbox\', \'Do you want to continue?\',\nfunction() {\n\tcleanMyInbox();\n\tgmail.tools.remove_modal_window();\n});\n```\n\n![](https://cloud.githubusercontent.com/assets/137350/6630847/abbcd6e0-c971-11e4-9153-9327444a6ddd.png)\n\n#### gmail.tools.remove_modal_window()\n\nRemoves a modal window created using ```gmail.tools.create_modal_window```.\n\n```js\ngmail.tools.add_modal_window(\'Clean inbox\', \'Do you want to continue?\',\nfunction() {\n\tcleanMyInbox();\n\tgmail.tools.remove_modal_window();\n});\n```\n#### gmail.tools.toggle_minimize()\n\nShow/Hide compose window ```gmail.tools.toggle_minimize```.\n\n```js\ngmail.tools.toggle_minimize\n```\n\n### Details - Deprecated methods\n\n#### gmail.get.thread_id()\n\n**Note: This method can only be used with other deprecated methods,\nand is itself deprecated. Use `gmail.new.get.thread_id()` instead.**\n\nGets current email-thread\'s ID.\n\nThis can be used together with `gmail.get.email_data()` to obtain\nindividual email IDs.\n\n\n#### gmail.get.email_id()\n\n**Note: This method can only be used with other deprecated methods,\nand is itself deprecated. Use `gmail.new.get.email_id()` instead.**\n\nSame as `gmail.get.thread_id()`, but kept for compatibilty.\nUsing this method generates a warning!\n\n```js\n"141de25dc0b48e4f"\n```\n\n#### gmail.get.email_ids()\n\n**Note: This method can only be used with other deprecated methods,\nand is itself deprecated. Use `gmail.new.get.thread_id()` and\n`gmail.new.get.thread_data()` instead.**\n\nReturns a list of email IDs for each thread in the conversation\n\n```js\n["141de25dc0b48e4f"]\n```\n\n#### gmail.get.visible_emails()\n\n**DEPRECATED! This function relies on XHR-invocation against a deprecated Gmail API and is is very likely to fail. Migrate to `gmail.new.get.*`-API instead.**\n\nReturns a list of emails from the server that are currently visible in the inbox view. The data does not come from the DOM\n\n```json\n[{"id": "1425a3693a4c45d0",\n  "title": "<b>What if video games were real? On YouTube</b>",\n  "excerpt": "View email in a web browser Header Super Mario Brothers Parkour by Warialasky Super Mario Brothers",\n  "time": "Fri, Nov 15, 2013 at 12:23 AM",\n  "sender": "noreply@youtube.com",\n  "attachment": "",\n  "labels": ["^all", "^i", "^smartlabel_social", "^unsub"]}]\n```\n\n#### gmail.get.visible_emails_async(callback)\n\n**DEPRECATED! This function relies on XHR-invocation against a deprecated Gmail API and is is very likely to fail. Migrate to `gmail.new.get.*`-API instead.**\n\nDoes the same as above but accepts a callback function\n\n#### gmail.get.selected_emails_data()\n\n**DEPRECATED! This function relies on XHR-invocation against a deprecated Gmail API and is is very likely to fail. Migrate to `gmail.new.get.*`-API instead.**\n\nReturns a list of object representation from emails that are currently **selected** in the inbox view.\nThe data does not come from the DOM\n\n```json\n[{\n  "thread_id":"141d44da39d6caf8",\n  "first_email": "141d44da39d6caf9",\n  "last_email": "141d44da39d6caf9",\n  "total_emails": 1,\n  "total_threads": ["141d44da39d6caf8"],\n  "people_involved": [\n    ["Kartik Talwar", "hi@kartikt.com"],\n    ["California", "california@gmail.com"]\n  ],\n  "subject": "test",\n  "threads": {\n    "141d44da39d6caf8": {\n      "reply_to_id": "",\n      "reply_to": "replytome@gmail.com",\n      "is_deleted" : false,\n      "from": "California",\n      "to" : ["hi@kartikt.com"],\n      "cc" : [],\n      "bcc" : [],\n      "from_email": "california@gmail.com",\n      "timestamp": 1382246359000,\n      "datetime": "Sun, Nov 20, 2013 at 1:19 AM",\n      "content_plain": "another test",\n      "subject": "test",\n      "content_html": "<div dir=\\"ltr\\">another test</div>\\n"\n    }\n  }\n},{\n  "thread_id":"141d44da39d6caf8",\n  "first_email": "141d44da39d6caf8",\n  "last_email": "141d44da39d6caf8",\n  "total_emails": 1,\n  "total_threads": ["141d44da39d6caf8"],\n  "people_involved": [\n    ["Kartik Talwar", "hi@kartikt.com"],\n    ["California", "california@gmail.com"]\n  ],\n  "subject": "test",\n  "threads": {\n    "141d44da39d6caf8": {\n      "reply_to_id": "",\n      "reply_to": null,\n      "is_deleted" : false,\n      "from": "California",\n      "to" : ["hi@kartikt.com"],\n      "cc" : [],\n      "bcc" : [],\n      "from_email": "california@gmail.com",\n      "timestamp": 1382246359000,\n      "datetime": "Sun, Nov 20, 2013 at 1:19 AM",\n      "content_plain": "another test",\n      "subject": "test",\n      "content_html": "<div dir=\\"ltr\\">another test</div>\\n"\n    }\n  }\n}]\n```\n\n#### gmail.get.email_data(thread_id=undefined)\n\n**DEPRECATED! This function relies on XHR-invocation against a deprecated Gmail API and is is very likely to fail. Use `gmail.new.get.email_data()` and `gmail.new.get.thread_data()` instead!**\n\nReturns an object representation of the opened email contents and metadata. It takes the optional thread_id parameter where\nthe data for the specified thread is returned instead of the email-thread currently visible in the dom.\n\n`thread_id` is added for updated gmail thread behaviour which adds support for emails created in [inbox](https://inbox.google.com). first_email remains as the first message in the thread.\n\n```json\n{\n  "thread_id":"141d44da39d6caf8",\n  "first_email": "141d44da39d6caf8",\n  "last_email": "141d44da39d6caf8",\n  "total_emails": 1,\n  "total_threads": ["141d44da39d6caf8"],\n  "people_involved": [\n    ["Kartik Talwar", "hi@kartikt.com"],\n    ["California", "california@gmail.com"]\n  ],\n  "subject": "test",\n  "threads": {\n    "141d44da39d6caf8": {\n      "reply_to_id": "",\n      "reply_to": "replytome@gmail.com",\n      "is_deleted" : false,\n      "from": "California",\n      "to" : ["hi@kartikt.com"],\n      "cc" : [],\n      "bcc" : [],\n      "from_email": "california@gmail.com",\n      "timestamp": 1382246359000,\n      "datetime": "Sun, Nov 20, 2013 at 1:19 AM",\n      "content_plain": "another test",\n      "subject": "test",\n      "content_html": "<div dir=\\"ltr\\">another test</div>\\n",\n      "attachments": [\n          "some_file.pdf"\n      ],\n      "attachments_details": [\n      {\n          "attachment_id": "0.1",\n          "name": "some_file.pdf",\n          "size": 11235,\n          "type": "application/pdf",\n          "url": "https://mail.google.com/u/0/?ui=......"\n      }]\n    }\n  }\n}\n```\n\n#### gmail.get.email_data_async(email_id=undefined, callback)\n\n**DEPRECATED! This function relies on XHR-invocation against a deprecated Gmail API and is is very likely to fail. Use `gmail.new.get.email_data()` and `gmail.new.get.thread_data()` instead!**\n\nDoes the same as above but accepts a callback function.\n\n\n#### gmail.get.displayed_email_data()\n\n**DEPRECATED! This function relies on XHR-invocation against a deprecated Gmail API and is is very likely to fail. Migrate to `gmail.new.get.*`-API instead.**\n\nReturns an object representation of the emails that are being displayed.\n\n```json\n{\n  "thread_id":"141d44da39d6caf8",\n  "first_email": "145881e7a8befff6",\n  "last_email": "145881e7a8befff6",\n  "total_emails": 1,\n  "total_threads": ["145881e7a8befff6"],\n  "people_involved": [\n    ["Kartik Talwar", "hi@kartikt.com"],\n    ["California", "california@gmail.com"]\n  ],\n  "subject": "test",\n  "threads": {\n    "145881e7a8befff6": {\n      "reply_to_id": "",\n      "reply_to": "replytome@gmail.com",\n      "is_deleted" : false,\n      "from": "California",\n      "to" : ["hi@kartikt.com"],\n      "cc" : [],\n      "bcc" : [],\n      "from_email": "california@gmail.com",\n      "timestamp": 1382246359000,\n      "datetime": "Sun, Nov 20, 2013 at 1:19 AM",\n      "content_plain": "another test",\n      "subject": "test",\n      "content_html": "<div dir=\\"ltr\\">another test</div>\\n",\n      "attachments": [\n          "some_file.pdf"\n      ],\n      "attachments_details": [\n      {\n          "attachment_id": "0.1",\n          "name": "some_file.pdf",\n          "size": 11235,\n          "type": "application/pdf",\n          "url": "https://mail.google.com/u/0/?ui=......"\n      }]\n    }\n  }\n}\n\n```\n\n#### gmail.get.displayed_email_data_async(callback)\n\n**DEPRECATED! This function relies on XHR-invocation against a deprecated Gmail API and is is very likely to fail. Migrate to `gmail.new.get.*`-API instead.**\n\nDoes the same as above but accepts a callback function.\n\n\n## Author and Licensing\n\n| [![twitter/therealkartik](https://0.gravatar.com/avatar/1eb9ae38e862518d907a8392c0062e95?s=70)](https://twitter.com/TheRealKartik "Follow @TheRealKartik on Twitter") | Inspired by gmailr.js |\n|---| --- |\n| [Kartik Talwar](http://kartikt.com/) |  See [License.md](LICENSE.md) |\n'