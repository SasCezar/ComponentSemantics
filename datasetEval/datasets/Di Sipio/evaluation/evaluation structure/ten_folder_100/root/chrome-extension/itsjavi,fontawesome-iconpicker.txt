b'fontawesome-iconpicker\n========================\n\n<!--[![Build Status](https://img.shields.io/travis/farbelous/fontawesome-iconpicker/master.svg?style=flat-square)](https://travis-ci.org/farbelous/fontawesome-iconpicker)-->\n<!--[![npm@next](https://img.shields.io/npm/v/fontawesome-iconpicker/next.svg?style=flat-square)](https://www.npmjs.com/package/fontawesome-iconpicker?activeTab=versions)-->\n[![npm](https://img.shields.io/npm/v/fontawesome-iconpicker.svg?style=flat-square)](https://www.npmjs.com/package/fontawesome-iconpicker)\n\n\nFont Awesome Icon Picker is a fully customizable plugin for Twitter Bootstrap,\nwith a powerful base API, based on [bootstrap-popover-picker](https://farbelous.github.io/bootstrap-popover-picker/)\n\nYou can use Font Awesome 5 or another font icon set of your choice (icon list is totally customizable).\n\n[View demos](https://farbelous.github.io/fontawesome-iconpicker/)\n\n## Instantiation\n\nYou can call the plugin in several ways:\n\n```javascript\n// Create instance if not exists (returns a jQuery object)\n$(\'.my\').iconpicker();\n$(\'.my\').iconpicker({ /*options*/ }); // you can also specify options via data-* attributes\n\n// For the first matched element, access to a plugin property value\n$(\'.my\').data(\'iconpicker\').iconpickerProperty;\n\n// For the first matched element, call a plugin instance method with the given args\n$(\'.my\').data(\'iconpicker\').iconpickerMethod(\'methodArg1\', \'methodArg2\' /* , other args */);\n\n// Call and apply a plugin method to EACH matched element.\n$.iconpicker.batch(\'.my\', \'iconpickerMethod\', \'methodArg1\', \'methodArg2\' /* , other args */); ->\n```\n\n## Triggered Events\n\nAll of them exposes the plugin instance through event.iconpickerInstance\n\nIn order of call:\n\n* iconpickerCreate\n* iconpickerCreated\n* iconpickerShow\n* iconpickerShown\n* iconpickerSelect (also exposes event.iconpickerItem and event.iconpickerValue)\n* iconpickerUpdate\n* iconpickerInvalid (also exposes event.iconpickerValue)\n* iconpickerSetValue (also exposes event.iconpickerValue)\n* iconpickerSetSourceValue (also exposes event.iconpickerValue)\n* iconpickerUpdated\n* iconpickerSelected (also exposes event.iconpickerItem and event.iconpickerValue)\n* iconpickerHide\n* iconpickerHidden\n* iconpickerDestroy\n* iconpickerDestroyed\n\n```javascript\n// Bind iconpicker events to the element\n$(\'.my\').on(\'iconpickerSelected\', function(event){\n  /* event.iconpickerValue */\n});\n```\n\n## Popover placement extensions\n\nThis plugin comes with more placement options than the original Bootstrap Popover.\nHere are all the possibilities in detail:\n\n            1 2 3 4 5\n            G       6\n            F       7\n            E       8\n            D C B A 9\n\n    0.      inline (no placement, display as inline-block)\n    1.      topLeftCorner\n    2.      topLeft\n    3.      top (center)\n    4.      topRight\n    5.      topRightCorner\n    6.      rightTop\n    7.      right (center)\n    8.      rightBottom\n    9.      bottomRightCorner\n    A.      bottomRight\n    B.      bottom (center)\n    C.      bottomLeft\n    D.      bottomLeftCorner\n    E.      leftBottom\n    F.      left (center)\n    G.      leftTop\n\n\n## Available options\n\n```javascript\nvar options = {\n    title: false, // Popover title (optional) only if specified in the template\n    selected: false, // use this value as the current item and ignore the original\n    defaultValue: false, // use this value as the current item if input or element value is empty\n    placement: \'bottom\', // (has some issues with auto and CSS). auto, top, bottom, left, right\n    collision: \'none\', // If true, the popover will be repositioned to another position when collapses with the window borders\n    animation: true, // fade in/out on show/hide ?\n    //hide iconpicker automatically when a value is picked. it is ignored if mustAccept is not false and the accept button is visible\n    hideOnSelect: false,\n    showFooter: false,\n    searchInFooter: false, // If true, the search will be added to the footer instead of the title\n    mustAccept: false, // only applicable when there\'s an iconpicker-btn-accept button in the popover footer\n    selectedCustomClass: \'bg-primary\', // Appends this class when to the selected item\n    icons: [], // list of icon objects [{title:String, searchTerms:String}]. By default, all Font Awesome icons are included.\n    fullClassFormatter: function(val) {\n        return \'fa \' + val;\n    },\n    input: \'input,.iconpicker-input\', // children input selector\n    inputSearch: false, // use the input as a search box too?\n    container: false, //  Appends the popover to a specific element. If not set, the selected element or element parent is used\n    component: \'.input-group-addon,.iconpicker-component\', // children component jQuery selector or object, relative to the container element\n    // Plugin templates:\n    templates: {\n        popover: \'<div class="iconpicker-popover popover"><div class="arrow"></div>\' +\n            \'<div class="popover-title"></div><div class="popover-content"></div></div>\',\n        footer: \'<div class="popover-footer"></div>\',\n        buttons: \'<button class="iconpicker-btn iconpicker-btn-cancel btn btn-default btn-sm">Cancel</button>\' +\n            \' <button class="iconpicker-btn iconpicker-btn-accept btn btn-primary btn-sm">Accept</button>\',\n        search: \'<input type="search" class="form-control iconpicker-search" placeholder="Type to filter" />\',\n        iconpicker: \'<div class="iconpicker"><div class="iconpicker-items"></div></div>\',\n        iconpickerItem: \'<a role="button" href="#" class="iconpicker-item"><i></i></a>\',\n    }\n};\n```\n'