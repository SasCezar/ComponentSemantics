b'# git-cola: The highly caffeinated Git GUI\n\n    git-cola is a powerful Git GUI with a slick and intuitive user interface.\n\n    Copyright (C) 2007-2018, David Aguilar and contributors\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 2 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n## SCREENSHOTS\n\nScreenshots are available on the\n[git-cola screenshots page](https://git-cola.github.io/screenshots.html).\n\n## DOWNLOAD\n\n    apt install git-cola\n\nNew releases are available on the\n[git-cola download page](https://git-cola.github.io/downloads.html).\n\n## FORK\n\n    git clone git://github.com/git-cola/git-cola.git\n\n[![git-cola build status](https://api.travis-ci.org/git-cola/git-cola.svg?branch=master)](https://travis-ci.org/git-cola/git-cola)\n\n[git-cola on github](https://github.com/git-cola/git-cola)\n\n[git-cola google group](https://groups.google.com/group/git-cola/)\n\n\n# NUTRITIONAL FACTS\n\n## ACTIVE INGREDIENTS\n\n* [git](https://git-scm.com/) 1.6.3 or newer.\n\n* [Python](https://python.org/) 2.6 or newer (Python 2+3 compatible).\n\n* [QtPy](https://github.com/spyder-ide/qtpy) 1.1.0 or newer.\n\n* [argparse](https://pypi.python.org/pypi/argparse) 1.1 or newer.\n  argparse is part of the stdlib in Python 2.7; install argparse separately if\n  you are running on Python 2.6.\n\n* [Sphinx](http://sphinx-doc.org/) for building the documentation.\n\n*git-cola* uses *QtPy*, so you can choose between *PyQt4*, *PyQt5*, and\n*PySide* by setting the `QT_API` environment variable to `pyqt4`, `pyqt5` or\n`pyside` as desired.  `qtpy` defaults to `pyqt5` and falls back to `pyqt4`\nif `pyqt5` is not installed.\n\nAny of the following Python Qt libraries must be installed:\n\n* [PyQt4](https://www.riverbankcomputing.com/software/pyqt/download)\n  4.6 or newer\n\n* [PyQt5](https://www.riverbankcomputing.com/software/pyqt/download5)\n  5.2 or newer\n\n* [PySide](https://github.com/PySide/PySide)\n  1.1.0 or newer\n\nSet `QT_API=pyqt4` in your environment if you have both\nversions of *PyQt* installed and want to ensure that PyQt4 is used.\n\n*NOTE*: *git-cola* includes a vendored copy of its *QtPy* dependency.\n\nWe provide a copy of the `qtpy` module when installing *git-cola* so that you\nare not required to install *QtPy* separately.  If you\'d like to provide your\nown `qtpy` module, for example from the `python-qtpy` Debian package, then use\n`make NO_VENDOR_LIBS=1 ...` when invoking `make`, or export\n`GIT_COLA_NO_VENDOR_LIBS=1` into the build environment.\n\nPython3 users on debian will need to install `python3-distutils` in order\nto run the Makefile\'s installation steps.  `distutils` is a Python build\nrequirement, but not needed at runtime.\n\n\n## ADDITIVES\n\n*git-cola* enables additional features when the following\nPython modules are installed.\n\n[send2trash](https://github.com/hsoft/send2trash) enables cross-platform\n"Send to Trash" functionality.\n\n# BREWING INSTRUCTIONS\n\n## RUN FROM SOURCE\n\nYou don\'t need to install *git-cola* to run it.\nRunning *git-cola* from its source tree is the easiest\nway to try the latest version.\n\n    git clone git://github.com/git-cola/git-cola.git\n    cd git-cola\n    ./bin/git-cola\n    ./bin/git-dag\n\nHaving *git-cola*\'s *bin/* directory in your path allows you to run\n*git cola* like a regular built-in Git command:\n\n    # Replace "$PWD/bin" with the path to git-cola\'s bin/ directory\n    PATH="$PWD/bin":"$PATH"\n    export PATH\n\n    git cola\n    git dag\n\nThe instructions below assume that you have *git-cola* present in your\n`$PATH`.  Replace "git cola" with "./bin/git-cola" as needed if you\'d like to\njust run it in-place.\n\n# DOCUMENTATION\n\n* [HTML documentation](https://git-cola.readthedocs.io/en/latest/)\n\n* [git-cola manual](share/doc/git-cola/git-cola.rst)\n\n* [git-dag manual](share/doc/git-cola/git-dag.rst)\n\n* [Keyboard shortcuts](https://git-cola.github.io/share/doc/git-cola/hotkeys.html)\n\n* [Contributing guidelines](CONTRIBUTING.md)\n\n# INSTALLATION\n\nNormally you can just do "make install" to install *git-cola*\nin your `$HOME` directory (`$HOME/bin`, `$HOME/share`, etc).\nIf you want to do a global install you can do\n\n    make prefix=/usr install\n\nThe platform-specific installation methods below use the native\npackage manager.  You should use one of these so that all of *git-cola*\'s\ndependencies are installed.\n\nDistutils is used by the `Makefile` via `setup.py` to install *git-cola* and\nits launcher scripts.  distutils replaces the `#!/usr/bin/env python` lines in\nscripts with the full path to python at build time, which can be undesirable\nwhen the runtime python is not the same as the build-time python.  To disable\nthe replacement of the `#!/usr/bin/env python` lines, pass `USE_ENV_PYTHON=1`\nto `make`.\n\n## LINUX\n\nLinux is it! Your distro has probably already packaged git-cola.\nIf not, please file a bug against your distribution ;-)\n\n### arch\n\nAvailable in the [AUR](https://aur.archlinux.org/packages/git-cola/).\n\n### debian, ubuntu\n\n    apt install git-cola\n\n### fedora\n\n    dnf install git-cola\n\n### gentoo\n\n    emerge git-cola\n\n### opensuse, sle\n\n    zypper install git-cola\n\n### slackware\n\nAvailable in [SlackBuilds.org](http://slackbuilds.org/result/?search=git-cola).\n\n## Ubuntu\n\nThe default version on 18.04 is older and is missing features and enhancements.\nUse this [PPA](https://launchpad.net/~pavreh/+archive/ubuntu/git-cola)\nmaintained by @pavreh to get a newer version.\n\n## MAC OS X\n\n[Homebrew](https://brew.sh/) is the easiest way to install\ngit-cola\'s *Qt4* and *PyQt4* dependencies.  We will use Homebrew to install\nthe git-cola recipe, but build our own .app bundle from source.\n\n[Sphinx](http://sphinx-doc.org/latest/install.html) is used to build the\ndocumentation.\n\n    brew install sphinx-doc\n    brew install git-cola\n\nOnce brew has installed git-cola you can:\n\n1. Clone git-cola\n\n    `git clone git://github.com/git-cola/git-cola.git && cd git-cola`\n\n2. Build the git-cola.app application bundle\n\n    ```\n    make \\\n        PYTHON=$(brew --prefix python3)/bin/python3 \\\n        PYTHON_CONFIG=$(brew --prefix python3)/bin/python3-config \\\n        SPHINXBUILD=$(brew --prefix sphinx-doc)/bin/sphinx-build \\\n        git-cola.app\n   ```\n\n3. Copy it to _/Applications_\n\n    `rm -fr /Applications/git-cola.app && cp -r git-cola.app /Applications`\n\nNewer versions of Homebrew install their own `python3` installation and\nprovide the `PyQt5` modules for `python3` only.  You have to use\n`python3 ./bin/git-cola` when running from the source tree.\n\n### UPGRADING USING HOMEBREW\n\nIf you upgrade using `brew` then it is recommended that you re-install\n*git-cola*\'s dependencies when upgrading.  Re-installing ensures that the\nPython modules provided by Homebrew will be properly setup.\n\nThis is required when upgrading to a modern (post-10.11 El Capitan) Mac OS X.\nHomebrew now bundles its own Python3 installation instead of using the\nsystem-provided default Python.\n\n\n    # update homebrew\n    brew update\n\n    # uninstall git-cola and its dependencies\n    brew uninstall git-cola\n    brew uninstall pyqt5\n    brew uninstall sip\n\n    # re-install git-cola and its dependencies\n    brew install git-cola\n\n## WINDOWS INSTALLATION\n\n**IMPORTANT** If you have a 64-bit machine, install the 64-bit versions only.\nDo not mix 32-bit and 64-bit versions.\n\nDownload and install the following:\n\n* [Git for Windows](https://git-for-windows.github.io/)\n\n* [Git Cola](https://github.com/git-cola/git-cola/releases)\n\nOnce these are installed you can run *git cola* from the Start menu.\n\nSee "WINDOWS (continued)" below for more details.\n\n# GOODIES\n\n*git cola* ships with an interactive rebase editor called *git-xbase*.\n*git-xbase* is used to reorder and choose commits when rebasing.\nStart an interactive rebase through the "Rebase" menu, or through the\n*git cola rebase* sub-command to start the *git-xbase* editor:\n\n    git cola rebase origin/master\n\n*git-xbase* can be launched independently of *git cola* by telling\n`git rebase` to use it as its editor through the `GIT_SEQUENCE_EDITOR`\nenviironment variable:\n\n    env GIT_SEQUENCE_EDITOR="$PWD/share/git-cola/bin/git-xbase" \\\n    git rebase -i origin/master\n\n# COMMAND-LINE TOOLS\n\nThe *git-cola* command exposes various sub-commands that allow you to quickly\nlaunch tools that are available from within the *git-cola* interface.\nFor example, `./bin/git-cola find` launches the file finder,\nand `./bin/git-cola grep` launches the grep tool.\n\nSee `git cola --help-commands` for the full list of commands.\n\n    $ git cola --help-commands\n    usage: git-cola [-h]\n    \n                    {cola,am,archive,branch,browse,config,\n                     dag,diff,fetch,find,grep,merge,pull,push,\n                     rebase,remote,search,stash,tag,version}\n                    ...\n    \n    valid commands:\n      {cola,am,archive,branch,browse,config,\n       dag,diff,fetch,find,grep,merge,pull,push,\n       rebase,remote,search,stash,tag,version}\n\n        cola                start git-cola\n        am                  apply patches using "git am"\n        archive             save an archive\n        branch              create a branch\n        browse              browse repository\n        config              edit configuration\n        dag                 start git-dag\n        diff                view diffs\n        fetch               fetch remotes\n        find                find files\n        grep                grep source\n        merge               merge branches\n        pull                pull remote branches\n        push                push remote branches\n        rebase              interactive rebase\n        remote              edit remotes\n        search              search commits\n        stash               stash and unstash changes\n        tag                 create tags\n        version             print the version\n\n## HACKING\n\nThe following commands should be run during development:\n\n    # Run the unit tests\n    $ make test\n\n    # Run tests and longer-running pylint and flake8 checks\n    $ make check\n\n    # Run tests against multiple python interpreters using tox\n    $ make tox\n\nThe test suite can be found in the [test](test) directory.\n\nThe tests are setup to run automatically when code is pushed using\n[Travis CI](https://travis-ci.org/git-cola/git-cola).\nCheckout the [Travis config file](.travis.yml) for more details.\n\nAuto-format `po/*.po` files before committing when updating translations:\n\n    $ make po\n\nWhen submitting patches, consult the\n[contributing guidelines](CONTRIBUTING.md).\n\n## SOURCE INSTALL\n\nFor Linux/Unix-like environments with symlinks, an easy way to use the latest\n`git cola` is to keep a clone of the repository and symlink it into your\n`~/bin` directory.  If `$HOME/bin` is not already in your `$PATH` you can\nadd these two lines to the bottom of your `~/.bashrc` to make the linked\ntools available.\n\n        PATH="$HOME/bin":"$PATH"\n        export PATH\n\nThen, install git-cola by linking it into your `~/bin`:\n\n        mkdir -p ~/src ~/bin\n        git clone git://github.com/git-cola/git-cola.git ~/src/git-cola\n        (cd ~/bin &&\n         ln -s ../src/git-cola/bin/git-cola &&\n         ln -s ../src/git-cola/bin/git-dag)\n\nYou should then get the latest `git cola` in your shell.\n\n# WINDOWS (continued)\n\n## Development\n\nIn order to develop *git cola* on Windows you will need to install\nPython3 and pip.  Install PyQt5 using `pip install PyQt5`\nto make the PyQt5 bindings available to Python.\n\nOnce these are installed you can use `python.exe` to run\ndirectly from the source tree.  For example, from a Git Bash terminal:\n\n    /c/Python36/python.exe ./bin/git-cola\n\n## Multiple Python versions\n\nIf you have multiple versions of Python installed, the `contrib/win32/cola`\nlauncher script might choose the newer version instead of the python\nthat has PyQt installed.  In order to resolve this, you can set the\n`cola.pythonlocation` git configuration variable to tell cola where to\nfind python.  For example:\n\n    git config --global cola.pythonlocation /c/Python36\n\n## BUILDING WINDOWS INSTALLERS\n\nWindows installers are built using\n\n* [Pynsist](https://pynsist.readthedocs.io/en/latest/).\n\n* [NSIS](http://nsis.sourceforge.net/Main_Page) is also needed.\n\nTo build the installer using *Pynsist* run:\n\n   ./contrib/win32/run-pynsist.sh\n\nThis will generate an installer in `build/nsis/`.\n\n## WINDOWS HISTORY BROWSER CONFIGURATION UPGRADE\n\nYou may need to configure your history browser if you are upgrading from an\nolder version of *git-cola*.\n\n`gitk` was originally the default history browser, but `gitk` cannot be\nlaunched as-is on Windows because `gitk` is a shell script.\n\nIf you are configured to use `gitk`, then change your configuration to\ngo through Git\'s `sh.exe` on Windows.  Similarly,we must go through\n`python.exe` if we want to use `git-dag`.\n\nIf you want to use *gitk* as your history browser open the\n*Preferences* screen and change the history browser command to:\n\n    "C:/Program Files/Git/bin/sh.exe" --login -i C:/Git/bin/gitk\n\n*git-dag* became the default history browser on Windows in `v2.3`, so new\nusers should not need to configure anything.\n'