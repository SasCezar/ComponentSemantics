b"![Git Town](https://originate.github.io/git-town/documentation/logo-horizontal.svg)\n\n[![Build Status](https://travis-ci.org/Originate/git-town.svg?branch=master)](https://travis-ci.org/Originate/git-town)\n[![Go Report Card](https://goreportcard.com/badge/github.com/Originate/git-town)](https://goreportcard.com/report/github.com/Originate/git-town)\n[![License](https://img.shields.io/:license-MIT-blue.svg?style=flat)](LICENSE)\n[![Help Contribute to Open Source](https://www.codetriage.com/originate/git-town/badges/users.svg)](https://www.codetriage.com/originate/git-town)\n\nGit Town makes software development teams who use Git even more productive and\nhappy. It adds Git commands that support\n[GitHub Flow](http://scottchacon.com/2011/08/31/github-flow.html),\n[Git Flow](https://www.atlassian.com/git/tutorials/comparing-workflows/feature-branch-workflow),\nthe [Nvie model](https://nvie.com/posts/a-successful-git-branching-model),\n[GitLab Flow](https://about.gitlab.com/2014/09/29/gitlab-flow/), and other\nworkflows more directly, and it allows you to perform many common Git operations\nfaster and easier.\n\nSee [git-town.com](https://www.git-town.com) for documentation and this\n[Softpedia article](https://www.softpedia.com/get/Programming/Other-Programming-Files/Git-Town.shtml)\nfor an independent review.\n\n## Commands\n\nGit Town provides these additional Git commands:\n\n**Development Workflow**\n\n- [git town hack](/documentation/commands/hack.md) - cuts a new up-to-date\n  feature branch off the main branch\n- [git town sync](/documentation/commands/sync.md) - updates the current branch\n  with all ongoing changes\n- [git town new-pull-request](/documentation/commands/new-pull-request.md) -\n  create a new pull request\n- [git town ship](/documentation/commands/ship.md) - delivers a completed\n  feature branch and removes it\n\n**Repository Maintenance**\n\n- [git town kill](/documentation/commands/kill.md) - removes a feature branch\n- [git town prune-branches](/documentation/commands/prune-branches.md) - delete\n  all merged branches\n- [git town rename-branch](/documentation/commands/rename-branch.md) - rename a\n  branch\n- [git town append](/documentation/commands/append.md) - insert a new branch as\n  a child of the current branch\n- [git town prepend](/documentation/commands/prepend.md) - insert a new branch\n  between the current branch and its parent\n- [git town repo](/documentation/commands/repo.md) - view the repository\n  homepage\n\n**Git Town Configuration**\n\n- [git town config](/documentation/commands/config.md) - displays or updates\n  your Git Town configuration\n- [git town new-branch-push-flag](/documentation/commands/new-branch-push-flag.md) -\n  configures whether new empty branches are pushed to origin\n- [git town main-branch](/documentation/commands/main-branch.md) - displays or\n  sets the main development branch for the current repo\n- [git town offline](/documentation/commands/offline.md) - enables/disables\n  offline mode\n- [git town perennial-branches](/documentation/commands/perennial-branches.md) -\n  displays or updates the perennial branches for the current repo\n- [git town pull-branch-strategy](/documentation/commands/pull-branch-strategy.md) -\n  displays or sets the strategy with which perennial branches are updated\n- [git town set-parent-branch](/documentation/commands/set-parent-branch.md) -\n  updates a branch's parent\n\n**Other Commands**\n\n- [git town alias](/documentation/commands/alias.md) - adds or removes shorter\n  aliases for Git Town commands\n- [git town install-fish-autocompletion](/documentation/commands/install-fish-autocompletion.md) -\n  installs the autocompletion definition for [Fish shell](http://fishshell.com)\n- [git town version](/documentation/commands/version.md) - displays the\n  installed version of Git Town\n\n## Installation\n\nSince version 4.0, Git Town runs natively on all platforms without any\ndependencies. Check out our\n[installation instructions](http://www.git-town.com/install.html) for more\ndetails.\n\n### Aliasing\n\nEach command can be\n[aliased](https://git-scm.com/book/en/v2/Git-Basics-Git-Aliases) individually to\nremove the `town` prefix with:\n\n```\ngit config --global alias.hack 'town hack'\n```\n\nNow you can run `git hack` instead of `git town hack`. As a convenience, you can\nadd or remove global aliases for all `git-town` commands with:\n\n```\ngit town alias <true | false>\n```\n\n## Configuration\n\nGit Town is configured on a per-repository basis. Upon first use in a\nrepository, you will be prompted for the required configuration. Use the\n[git town config](/documentation/commands/config.md) command to view or update\nyour configuration at any time.\n\n#### Required configuration\n\n- the main development branch\n- the\n  [perennial branches](/documentation/development/branch_hierarchy.md#perennial-branches)\n\n#### Optional Configuration\n\nThe following configuration options have defaults, so the configuration wizard\ndoes not ask about them.\n\n- the pull branch strategy\n\n  - how to sync the main branch / perennial branches with their upstream\n  - default: `rebase`\n  - possible values: `merge`, `rebase`\n\n- the new branch push flag\n  - whether or not branches created by hack / append / prepend should be pushed\n    to remote repo\n  - default: `false`\n  - possible values: `true`, `false`\n\n## Documentation\n\nIn addition to the online documentation here, you can run `git town` on the\ncommand line for an overview of the Git Town commands, or `git help <command>`\n(e.g. `git help sync`) for help with an individual command.\n\n## Contributing\n\nFound a bug or have an idea for a new feature?\n[Open an issue](https://github.com/Originate/git-town/issues/new) or - even\nbetter - get down, go to town, and fire a feature-tested\n[pull request](https://help.github.com/articles/using-pull-requests/) our way!\nCheck out our [contributing guide](/CONTRIBUTING.md) to start coding.\n"