b'<p align="center"><img src="docs/images/logo/horizontal-400x150.png" alt="picocli" height="150px"></p>\n\n[![GitHub Release](https://img.shields.io/github/release/remkop/picocli.svg)](https://github.com/remkop/picocli/releases) \n[![Build Status](https://travis-ci.org/remkop/picocli.svg?branch=master)](https://travis-ci.org/remkop/picocli) \n[![codecov](https://codecov.io/gh/remkop/picocli/branch/master/graph/badge.svg)](https://codecov.io/gh/remkop/picocli) \n[![Follow @remkopopma](https://img.shields.io/twitter/follow/remkopopma.svg?style=social)](https://twitter.com/intent/follow?screen_name=remkopopma) \n[![Follow @picocli](https://img.shields.io/twitter/follow/picocli.svg?style=social)](https://twitter.com/intent/follow?screen_name=picocli) \n[![Follow picocli on StackShare](https://img.shields.io/badge/Follow%20on-StackShare-blue.svg?logo=stackshare&style=flat)](https://stackshare.io/picocli)\n\n# picocli - a mighty tiny command line interface\n\nPicocli aims to be the easiest-to-use way to create rich command line applications that can run on and off the JVM.\n\nPicocli is a modern library and framework, written in Java, that contains both an annotations API and a programmatic API. It features usage help with [ANSI colors and styles](https://picocli.info/#_ansi_colors_and_styles), [TAB autocompletion](https://picocli.info/autocomplete.html) and nested subcommands.\nIn a single file, so you can include it _in source form_.\nThis lets users run picocli-based applications without requiring picocli as an external dependency.\n\nPicocli-based applications can be ahead-of-time compiled to <img src="https://www.graalvm.org/resources/img/logo-colored.svg" alt="GraalVM">\n[native images](https://picocli.info/#_graalvm_native_images), with extremely fast startup time and lower memory requirements,\nwhich can be distributed as a single executable file.\nPicocli comes with an [annotation processor](https://github.com/remkop/picocli/releases#4.0.0-annotation-processor) that automatically Graal-enables your jar during compilation.\n\nPicocli applications can be very compact with no boilerplate code: your command (or subcommand) can be executed with a [single line of code](#example "(example below)").\nSimply implement `Runnable` or `Callable`, or put the business logic of your command in a `@Command`-annotated method.\n\n<a id="picocli_demo"></a>\n![Picocli Demo help message with ANSI colors](docs/images/picocli.Demo.png?raw=true)\n\nHow it works: annotate your class and picocli initializes it from the command line arguments,\nconverting the input to strongly typed data. Supports git-like [subcommands](https://picocli.info/#_subcommands)\n(and nested [sub-subcommands](https://picocli.info/#_nested_sub_subcommands)),\nany option prefix style, POSIX-style [grouped short options](https://picocli.info/#_short_options),\ncustom [type converters](https://picocli.info/#_custom_type_converters),\n[password options](http://picocli.info/#_interactive_password_options) and more.\n\nPicocli distinguishes between [named options](https://picocli.info/#_options) and\n[positional parameters](https://picocli.info/#_positional_parameters) and allows _both_ to be \n[strongly typed](https://picocli.info/#_strongly_typed_everything).\n[Multi-valued fields](https://picocli.info/#_multiple_values) can specify \nan exact number of parameters or a [range](https://picocli.info/#_arity) (e.g., `0..*`, `1..2`).\nSupports [Map options](https://picocli.info/#_maps) like `-Dkey1=val1 -Dkey2=val2`, where both key and value can be strongly typed.\nParser [tracing](https://picocli.info/#_tracing) facilitates troubleshooting.\nCommand-line [argument files](https://picocli.info/#AtFiles) (@-files) allow applications to handle very long command lines.\n\nGenerates polished and easily tailored [usage help](https://picocli.info/#_usage_help)\nand  [version help](https://picocli.info/#_version_help),\nusing [ANSI colors](https://picocli.info/#_ansi_colors_and_styles) where possible.\nRequires at minimum Java 5, but is designed to facilitate the use of Java 8 lambdas. Tested on all Java versions between 5 and 14 (inclusive).\n\nPicocli-based command line applications can have [TAB autocompletion](https://picocli.info/autocomplete.html),\ninteractively showing users what options and subcommands are available.\nWhen an option has [`completionCandidates`](https://picocli.info/#__code_completion_candidates_code_variable) or has an `enum` type, autocompletion can also suggest option values.\nPicocli can generate completion scripts for bash and zsh, and offers [`picocli-shell-jline2`](picocli-shell-jline2/README.md) and [`picocli-shell-jline3`](picocli-shell-jline3/README.md) modules with JLine `Completer` implementations for building interactive shell applications.\n\nPicocli-based applications can easily [integrate](https://picocli.info/#_dependency_injection) with Dependency Injection containers.\nThe [Micronaut](https://micronaut.io/) microservices framework has [built-in support](https://docs.micronaut.io/latest/guide/index.html#commandLineApps) for picocli.\nPicocli ships with a [`picocli-spring-boot-starter` module](https://github.com/remkop/picocli/tree/master/picocli-spring-boot-starter) \nthat includes a `PicocliSpringFactory` and Spring Boot auto-configuration to use Spring dependency injection in your picocli command line application.\nThe user manual has an [example](https://picocli.info/#_guice_example) of integrating with Guice.\n\n### Releases\n* [All Releases](https://github.com/remkop/picocli/releases)\n* Latest: 4.1.1 [Release Notes](https://github.com/remkop/picocli/releases/tag/v4.1.1)\n* Older: Picocli 4.0 [Release Notes](https://github.com/remkop/picocli/releases/tag/v4.0.0)\n* Older: Picocli 3.0 [Release Notes](https://github.com/remkop/picocli/releases/tag/v3.0.0)\n* Older: Picocli 2.0 [Release Notes](https://github.com/remkop/picocli/releases/tag/v2.0.0)\n\n### Documentation\n* [4.x User manual: https://picocli.info](https://picocli.info)\n* [4.x Quick Guide](https://picocli.info/quick-guide.html)\n* [4.x API Javadoc](https://picocli.info/apidocs/)\n* [Command line autocompletion](https://picocli.info/autocomplete.html)\n* [Programmatic API](https://picocli.info/picocli-3.0-programmatic-api.html)\n* [FAQ](https://github.com/remkop/picocli/wiki/FAQ)\n* [GraalVM AOT Compilation to Native Image](https://picocli.info/picocli-on-graalvm.html) <img src="https://www.graalvm.org/resources/img/logo-colored.svg" > \n\n### Older\n* [3.x User manual](https://picocli.info/man/3.x)\n* [3.x Quick Guide](https://picocli.info/man/3.x/quick-guide.html)\n* [3.x API Javadoc](https://picocli.info/man/3.x/apidocs/)\n* [2.x User manual](https://picocli.info/man/2.x)\n* [2.x API Javadoc](https://picocli.info/man/2.x/apidocs/)\n* [1.x User manual](https://picocli.info/man/1.x)\n\n### Articles & Presentations\n#### English\n* [Picocli Structured Objects](https://gist.github.com/hanslovsky/8276da86c53bc6d95bf01447cd5cb2b7#file-00_picocli-structured-objects-md) (2019-09-10) by [Philipp Hanslovsky](https://gist.github.com/hanslovsky) explains how to use picocli\'s support for repeating argument groups to add or configure structured objects from the command line.\n* [Create a Java Command Line Program with Picocli|Baeldung](https://www.baeldung.com/java-picocli-create-command-line-program) (2019-05-07) by [Fran\xc3\xa7ois Dupire](https://www.baeldung.com/author/francois-dupire/).\n* A whirlwind tour of picocli [JAX Magazine "Putting the spotlight on Java tools"](https://jaxenter.com/jax-mag-java-tools-157592.html) (2019-04-08).\n* [An Introduction to PicoCLI](https://devops.datenkollektiv.de/an-introduction-to-picocli.html) (2019-02-10) by [devop](https://devops.datenkollektiv.de/author/devop.html).\n* [Corda CLI UX (User Experience) Guide](https://docs.corda.net/head/cli-ux-guidelines.html) (2018 by R3 Limited) gives useful advice.\n* [Develop a CLI tool using groovy scripts](https://medium.com/@chinthakadinadasa/develop-a-cli-tool-using-groovy-scripts-a7d545eecddd) (2018-10-26) by [Chinthaka Dinadasa](https://medium.com/@chinthakadinadasa).\n* [Migrating from Commons CLI to picocli](https://picocli.info/migrating-from-commons-cli.html). You won\'t regret it! :-) (also on: [DZone](https://dzone.com/articles/migrating-from-commons-cli-to-picocli) and [Java Code Geeks](https://www.javacodegeeks.com/2018/11/migrating-commons-cli-picocli.html)).\n* [Groovy 2.5 CliBuilder Renewal](https://picocli.info/groovy-2.5-clibuilder-renewal.html) (also on [blogs.apache.org](https://blogs.apache.org/logging/entry/groovy-2-5-clibuilder-renewal)). In two parts: [Part 1](https://picocli.info/groovy-2.5-clibuilder-renewal-part1.html) (also on: [DZone](https://dzone.com/articles/groovy-25-clibuilder-renewal), [Java Code Geeks](https://www.javacodegeeks.com/2018/06/groovy-clibuilder-renewal-part-1.html)), [Part 2](https://picocli.info/groovy-2.5-clibuilder-renewal-part2.html) (also on: [DZone](https://dzone.com/articles/groovy-25-clibuilder-renewal-part-2), [Java Code Geeks](https://www.javacodegeeks.com/2018/06/groovy-clibuilder-renewal-part-2.html)). \n* Micronaut user manual for running microservices [standalone with picocli](https://docs.micronaut.io/snapshot/guide/index.html#commandLineApps).\n* [Java Command-Line Interfaces (Part 30): Observations](http://marxsoftware.blogspot.jp/2017/11/java-cmd-line-observations.html) by Dustin Marx about picocli 2.0.1 (also on: [DZone](https://dzone.com/articles/java-command-line-interfaces-part-30-finale-observations), [Java Code Geeks](https://www.javacodegeeks.com/2017/11/java-command-line-interfaces-part-30-observations.html))\n* [Java Command-Line Interfaces (Part 10): Picocli](http://marxsoftware.blogspot.jp/2017/08/picocli.html) by Dustin Marx about picocli 0.9.7 (also on: [DZone](https://dzone.com/articles/java-command-line-interfaces-part-10-picocli), [Java Code Geeks](https://www.javacodegeeks.com/2017/08/java-command-line-interfaces-part-10-picocli.html)) \n* [Picocli 2.0: Groovy Scripts on Steroids](https://picocli.info/picocli-2.0-groovy-scripts-on-steroids.html) (also on: [DZone](https://dzone.com/articles/picocli-v2-groovy-scripts-on-steroids), [Java Code Geeks](https://www.javacodegeeks.com/2018/01/picocli-2-0-groovy-scripts-steroids.html))\n* [Picocli 2.0: Do More With Less](https://picocli.info/picocli-2.0-do-more-with-less.html) (also on: [DZone](https://dzone.com/articles/whats-new-in-picocli-20), [Java Code Geeks](https://www.javacodegeeks.com/2018/01/picocli-2-0-less.html))\n* [Announcing picocli 1.0](https://picocli.info/announcing-picocli-1.0.html) (also on: [DZone](https://dzone.com/articles/announcing-picocli-10))\n\n#### \xd1\x80\xd1\x83\xd1\x81\xd1\x81\xd0\xba\xd0\xb8\xd0\xb9\n* [\xd0\x98\xd0\xbd\xd1\x82\xd0\xb5\xd1\x80\xd1\x84\xd0\xb5\xd0\xb9\xd1\x81\xd1\x8b \xd0\xba\xd0\xbe\xd0\xbc\xd0\xb0\xd0\xbd\xd0\xb4\xd0\xbd\xd0\xbe\xd0\xb9 \xd1\x81\xd1\x82\xd1\x80\xd0\xbe\xd0\xba\xd0\xb8 Java: picocli](https://habr.com/ru/company/otus/blog/419401/) (2018-08-06): Russian translation by [MaxRokatansky](https://habr.com/ru/users/MaxRokatansky/) of Dustin Marx\' blog post.\n\n#### Fran\xc3\xa7ais\n* [VIDEO] [Des applications en ligne de commande avec Picocli et GraalVM (N. Peters)](https://www.youtube.com/watch?v=8ENbMwkaFyk) (2019-05-07): 15 minute presentation by Nicolas Peters during Devoxx FR. Presentation slides are [available on GitHub](https://t.co/tXhtpTpAff?amp=1).\n\n#### \xe6\x97\xa5\xe6\x9c\xac\xe8\xaa\x9e\n* [GraalVM \xe3\x81\xa8 Picocli\xe3\x81\xa7 Java\xe3\x81\xae\xe3\x83\x8d\xe3\x82\xa4\xe3\x83\x86\xe3\x82\xa3\xe3\x83\x96\xe3\x82\xb3\xe3\x83\x9e\xe3\x83\xb3\xe3\x83\x89\xe3\x83\xa9\xe3\x82\xa4\xe3\x83\xb3\xe3\x82\xa2\xe3\x83\x97\xe3\x83\xaa\xe3\x82\x92\xe4\xbd\x9c\xe3\x82\x8d\xe3\x81\x86](https://remkop.github.io/presentations/20190906/) (2019-09-06) Slides for my lightning talk presentation at [\xe3\x80\x90\xe6\x9d\xb1\xe4\xba\xac\xe3\x80\x91JJUG \xe3\x83\x8a\xe3\x82\xa4\xe3\x83\x88\xe3\x82\xbb\xe3\x83\x9f\xe3\x83\x8a\xe3\x83\xbc: \xe3\x83\x93\xe3\x83\xbc\xe3\x83\xab\xe7\x89\x87\xe6\x89\x8b\xe3\x81\xabLT\xe5\xa4\xa7\xe4\xbc\x9a 9/6\xef\xbc\x88\xe9\x87\x91\xef\xbc\x89](https://jjug.doorkeeper.jp/events/95987)\n* [Picocli\xef\xbc\x8bSpring Boot \xe3\x81\xa7\xe3\x82\xb3\xe3\x83\x9e\xe3\x83\xb3\xe3\x83\x89\xe3\x83\xa9\xe3\x82\xa4\xe3\x83\xb3\xe3\x82\xa2\xe3\x83\x97\xe3\x83\xaa\xe3\x82\xb1\xe3\x83\xbc\xe3\x82\xb7\xe3\x83\xa7\xe3\x83\xb3\xe3\x82\x92\xe4\xbd\x9c\xe6\x88\x90\xe3\x81\x97\xe3\x81\xa6\xe3\x81\xbf\xe3\x82\x8b](https://ksby.hatenablog.com/entry/2019/07/20/092721) (2019-07-20) by [\xe3\x81\x8b\xe3\x82\x93\xe3\x81\x8c\xe3\x82\x8b\xe3\x83\xbc\xe3\x81\x95\xe3\x82\x93\xe3\x81\xae\xe6\x97\xa5\xe8\xa8\x98](https://ksby.hatenablog.com/).\n* [GraalVM \xe3\x81\xae native image \xe3\x82\x92\xe4\xbd\xbf\xe3\x81\xa3\xe3\x81\xa6 Java \xe3\x81\xa7\xe7\x88\x86\xe9\x80\x9f Lambda \xe3\x81\xae\xe5\xa4\xa2\xe3\x82\x92\xe8\xa6\x8b\xe3\x82\x8b](https://qiita.com/kencharos/items/69e43965515f368bc4a3) (2019-05-02) by [@kencharos](https://qiita.com/kencharos)\n\n#### \xe4\xb8\xad\xe6\x96\x87\n* [\xe4\xbb\x8eCommons CLI\xe8\xbf\x81\xe7\xa7\xbb\xe5\x88\xb0Picocli](https://blog.csdn.net/genghaihua/article/details/88529409) (2019-03-13): Chinese translation of Migrating from Commons CLI to picocli, thanks to [genghaihua](https://me.csdn.net/genghaihua).\n* [Picocli 2.0: Steroids\xe4\xb8\x8a\xe7\x9a\x84Groovy\xe8\x84\x9a\xe6\x9c\xac](https://picocli.info/zh/picocli-2.0-groovy-scripts-on-steroids.html)\n* [Picocli 2.0: \xe4\xbb\xa5\xe5\xb0\x91\xe6\xb1\x82\xe5\xa4\x9a](https://picocli.info/zh/picocli-2.0-do-more-with-less.html) \n\n### Mailing List\nJoin the [picocli Google group](https://groups.google.com/d/forum/picocli) if you are interested in discussing anything picocli-related and receiving announcements on new releases.\n\n### Credit\n<img src="https://picocli.info/images/logo/horizontal-400x150.png" height="100"> \n\n[Reallinfo](https://github.com/reallinfo) designed the new picocli logo! Many thanks! \n\n### Commitments\n\n| This project follows [semantic versioning](http://semver.org/) and adheres to the **[Zero Bugs Commitment](https://github.com/classgraph/classgraph/blob/master/Zero-Bugs-Commitment.md)**. |\n|------------------------|\n\n## Adoption\n\n<img src="https://picocli.info/images/groovy-logo.png" height="50">  <img src="https://picocli.info/images/1x1.png" width="10"> <img src="http://micronaut.io/images/micronaut_mini_copy_tm.svg" height="50">  <img src="https://picocli.info/images/1x1.png" width="10"><img src="https://picocli.info/images/junit5logo-172x50.png" height="50"> <img src="https://picocli.info/images/1x1.png" width="10"> <img src="https://picocli.info/images/debian-logo-192x50.png" height="50"> <img src="https://picocli.info/images/1x1.png" width="10"> <img src="https://picocli.info/images/karate-logo.png" height="50" width="50"/>  <img src="https://picocli.info/images/checkstyle-logo-260x50.png" height="50"><img src="https://picocli.info/images/1x1.png" width="10">  <img src="https://picocli.info/images/ballerina-logo.png" height="40"><img src="https://picocli.info/images/1x1.png" width="10">  <img src="https://picocli.info/images/apache-hive-logo.png" height="50"><img src="https://picocli.info/images/1x1.png" width="10">  <img src="https://hadoop.apache.org/hadoop-logo.jpg" height="50"><img src="https://picocli.info/images/1x1.png" width="10"> <img src="https://picocli.info/images/apache-ozone-logo.png" height="50"> <img src="https://picocli.info/images/1x1.png" width="10">  <img src="https://picocli.info/images/stackshare-logo.png" height="50"> <img src="https://ignite.apache.org/images/Ignite_tm_Logo_blk_RGB.svg" height="50"> <img src="https://camo.githubusercontent.com/501aae78d282faf7a904bbb92f46eb8d19445ad5/687474703a2f2f736c696e672e6170616368652e6f72672f7265732f6c6f676f732f736c696e672e706e67" height="50"> \n<img src="https://avatars1.githubusercontent.com/u/541152?s=200&v=4" height="50">  <img src="https://camo.qiitausercontent.com/ec81e80366e061c8488b25c013003267b7a578d4/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3939352f33323331306534352d303537332d383534322d373035652d6530313138643434323632302e706e67" height="50">\n<img src="https://spring.io/img/spring-by-pivotal.png" height="50">\n<img src="https://www.schemacrawler.com/images/schemacrawler_logo.svg" height="50">\n<img src="https://avatars1.githubusercontent.com/u/22600631?s=200&v=4" height="50">\n<img src="https://fisco-bcos-documentation.readthedocs.io/en/latest/_static/images/FISCO_BCOS_Logo.svg" height="50">\n<img src="https://avatars0.githubusercontent.com/u/35625214?s=200&v=4" height="50">\n<img src="https://avatars1.githubusercontent.com/u/2386734?s=200&v=4" height="50">\n<img src="https://www.e-contract.be/images/logo.svg" height="50">\n<img src="https://present.co/images/logn-new@2x.png" height="50">\n<img src="https://avatars2.githubusercontent.com/u/13641167?s=200&v=4" height="50">\n<img src="https://www.viva64.com/media/img/logo.png" height="50">\n<img src="https://concord.walmartlabs.com/assets/img/logo.png" height="50">\n<img src="https://res-3.cloudinary.com/crunchbase-production/image/upload/c_lpad,h_120,w_120,f_auto,b_white,q_auto:eco/etxip1k2sx4sphvwgkdu" height="50">\n\n* Picocli is now part of Groovy. From Groovy 2.5, all Groovy command line tools are picocli-based, and picocli is the underlying parser for Groovy\'s [CliBuilder DSL](http://groovy-lang.org/dsls.html#_clibuilder). \n* Picocli is now part of Micronaut. The Micronaut CLI has been rewritten with picocli, and Micronaut has dedicated support for running microservices [standalone with picocli](https://docs.micronaut.io/snapshot/guide/index.html#commandLineApps).\n* Picocli is now part of JUnit 5. JUnit 5.3 migrated its `ConsoleLauncher` from jopt-simple to picocli to support @-files (argument files); this helps users who need to specify many tests on the command line and run into system limitations.\n* Debian now offers a [libpicocli-java package](https://tracker.debian.org/pkg/picocli). Thanks to [Miroslav Kravec](https://udd.debian.org/dmd/?kravec.miroslav%40gmail.com).\n* Picocli is used in the Intuit [Karate](https://github.com/intuit/karate) standalone JAR / executable.\n* Picocli is part of [Ballerina](https://ballerina.io/). Ballerina uses picocli for all its command line utilities.\n* Picocli is used in the [CheckStyle](https://checkstyle.org/cmdline.html) standalone JAR / executable from Checkstyle 8.15.\n* Picocli is included in the [OpenJDK Quality Outreach](https://wiki.openjdk.java.net/display/quality/Quality+Outreach) list of Free Open Source Software (FOSS) projects that actively test against OpenJDK builds.\n* Picocli is used in the Apache Hadoop Ozone/HDDS command line tools, the Apache Hive benchmark CLI, Apache [Ignite TensorFlow](https://github.com/apache/ignite), and Apache Sling [Feature Model Converter](https://github.com/apache/sling-org-apache-sling-feature-modelconverter).\n* Picocli is listed on [StackShare](https://stackshare.io/picocli). Please add it to your stack and add/upvote reasons why you like picocli!\n* Picocli is used in Pinterest [ktlint](https://ktlint.github.io/).\n* Picocli is used in Spring IO [nohttp-cli](https://github.com/spring-io/nohttp/tree/master/nohttp-cli).\n\n<img src="https://picocli.info/images/downloads-201909.png">\n\nGlad to see more people are using picocli. We must be doing something right. :-) \n\n### Help to promote picocli\nIf you like picocli and your project is on GitHub, consider adding this badge to your README.md: [![picocli](https://img.shields.io/badge/picocli-4.1.1-green.svg)](https://github.com/remkop/picocli)\n```\n[![picocli](https://img.shields.io/badge/picocli-4.1.1-green.svg)](https://github.com/remkop/picocli)\n```\n\n\n## Example\n\nAnnotate fields with the command line parameter names and description. Optionally implement `Runnable` or `Callable` to delegate error handling and requests for usage help or version help to picocli. For example:\n\n\n```java\nimport picocli.CommandLine;\nimport picocli.CommandLine.Option;\nimport picocli.CommandLine.Parameters;\nimport java.io.File;\n\n@Command(name = "example", mixinStandardHelpOptions = true, version = "Picocli example 4.0")\npublic class Example implements Runnable {\n\n    @Option(names = { "-v", "--verbose" },\n      description = "Verbose mode. Helpful for troubleshooting. Multiple -v options increase the verbosity.")\n    private boolean[] verbose = new boolean[0];\n\n    @Parameters(arity = "1..*", paramLabel = "FILE", description = "File(s) to process.")\n    private File[] inputFiles;\n    \n    public void run() {\n        if (verbose.length > 0) {\n            System.out.println(inputFiles.length + " files to process...");\n        }\n        if (verbose.length > 1) {\n            for (File f : inputFiles) {\n                System.out.println(f.getAbsolutePath());\n            }\n        }\n    }\n    \n    public static void main(String[] args) {\n        // By implementing Runnable or Callable, parsing, error handling and handling user\n        // requests for usage help or version help can be done with one line of code.\n\n        int exitCode = new CommandLine(new Example()).execute(args);\n        System.exit(exitCode);\n    }\n}\n```\n\nImplement `Runnable` or `Callable`, and your command can be [executed](https://picocli.info/#execute) in one line of code. The example above uses the `CommandLine.execute` method to parse the command line, handle errors, handle requests for usage and version help, and invoke the business logic. Applications can call `System.exit` with the returned exit code to signal success or failure to their caller.\n\n```bash\n$ java Example -v inputFile1 inputFile2\n\n2 files to process...\n```\n\nThe `CommandLine.execute` method automatically prints the usage help message if the user requested help or when the input was invalid.\n\n![Usage help message with ANSI colors](docs/images/ExampleUsageANSI.png?raw=true)\n\nThis can be customized in many ways. See the user manual [section on Executing Commands](https://picocli.info/#execute) for details.\n\n## Usage Help with ANSI Colors and Styles\n\nColors, styles, headers, footers and section headings are easily [customized with annotations](https://picocli.info/#_ansi_colors_and_styles).\nFor example:\n\n![Longer help message with ANSI colors](docs/images/UsageHelpWithStyle.png?raw=true)\n\nSee the [source code](https://github.com/remkop/picocli/blob/v0.9.4/src/test/java/picocli/Demo.java#L337). \n\n\n\n## Usage Help API\n\nPicocli annotations offer many ways to customize the usage help message.\n\nIf annotations are not sufficient, you can use picocli\'s [Help API](https://picocli.info/#_usage_help_api) to customize even further.\nFor example, your application can generate help like this with a custom layout:\n\n![Usage help message with two options per row](docs/images/UsageHelpWithCustomLayout.png?raw=true)\n\nSee the [source code](https://github.com/remkop/picocli/blob/master/src/test/java/picocli/CustomLayoutDemo.java#L61).\n\n## Download\nYou can add picocli as an external dependency to your project, or you can include it as source.\nSee the [source code](https://github.com/remkop/picocli/blob/master/src/main/java/picocli/CommandLine.java). Copy and paste it into a file called `CommandLine.java`, add it to your project, and enjoy!\n\n### Gradle\n```\ncompile \'info.picocli:picocli:4.1.1\'\n```\n### Maven\n```\n<dependency>\n  <groupId>info.picocli</groupId>\n  <artifactId>picocli</artifactId>\n  <version>4.1.1</version>\n</dependency>\n```\n### Scala SBT\n```\nlibraryDependencies += "info.picocli" % "picocli" % "4.1.1"\n```\n### Ivy\n```\n<dependency org="info.picocli" name="picocli" rev="4.1.1" />\n```\n### Grape\n```groovy\n@Grapes(\n    @Grab(group=\'info.picocli\', module=\'picocli\', version=\'4.1.1\')\n)\n```\n### Leiningen\n```\n[info.picocli/picocli "4.1.1"]\n```\n### Buildr\n```\n\'info.picocli:picocli:jar:4.1.1\'\n```\n'