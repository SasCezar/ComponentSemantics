b'\n![Gitkube Logo](artifacts/gitkube-h-w.png)\n\n# Gitkube\n\nGitkube is a tool for building and deploying Docker images on Kubernetes using `git push`. \n\nAfter a simple initial setup, users can simply keep `git push`-ing their repos to build and deploy to Kubernetes automatically.\n\n[![GoDoc](https://godoc.org/github.com/hasura/gitkube?status.svg)](https://godoc.org/github.com/hasura/gitkube) \n\n![Gitkube](https://raw.githubusercontent.com/hasura/gitkube/master/artifacts/gitkube.gif)\n\n## When should I use gitkube?\n1. Ideal for development where you can push your WIP branch to the cluster to test.\n2. Reference implementation for writing git-based automation on your server. Fork this repo and create your own CRD + controller + git remote hook that can do things on the Kubernetes cluster.\n\n## Features:\n- No dependencies except native tooling (git, kubectl)\n- Plug and play installation\n- Simple public key based authentication\n- RBAC ready - Control access to git remotes using RBAC\n- Support for namespace based multi-tenancy - Remotes can only deploy to their own namespace\n- No assumptions about repository structure \n\n## Getting started\n\nGitkube will run on any Kubernetes vendor/distribution AS IS. In case you find any difficulties in the setup, please comment on [#33](https://github.com/hasura/gitkube/issues/33) \n\n#### Install gitkube\n\n##### Using kubectl\n\n```sh\nkubectl create -f https://storage.googleapis.com/gitkube/gitkube-setup-stable.yaml\n\n#expose gitkubed service\nkubectl --namespace kube-system expose deployment gitkubed --type=LoadBalancer --name=gitkubed\n```\n\n##### Using gitkube CLI \n\n1. Install Gitkube CLI:\n   - Linux/MacOS\n   ``` bash\n   curl https://raw.githubusercontent.com/hasura/gitkube/master/gimme.sh | bash\n   ```\n   - Windows (using [scoop](https://scoop.sh))\n   ```bat\n   scoop install gitkube\n   ```\n   Or download the latest [release](https://github.com/hasura/gitkube/releases) and add it to your `PATH`.\n\n2. Use Gitkube CLI to install Gitkube on the cluster:\n   ```bash\n   gitkube install\n   ```\n\n#### Provider walkthroughs\n\nThe above installation steps work on most Kubernetes clusters. Detailed walkthroughs for few specific providers are also available:\n\n| Provider        | Link          |\n|-----------------|---------------|\n| minikube        |[minikube](docs/minikube.md) |\n\n#### Example\nFollow this [example](https://github.com/hasura/gitkube-example) repo for a typical workflow of gitkube.\n\n\n## How it works\n\nGitkube has three components:\n\n1. Remote: Custom resource defined by a K8s CRD\n2. gitkube-controller: Controller that manages Remote objects and propogates changes to gitkubed \n3. gitkubed: Git host that builds docker image from the repo and rolls out deployment\n\n### High-level architecture\n\n![Architecture](https://raw.githubusercontent.com/hasura/gitkube/master/artifacts/gitkube-v0.1.png)\n\n### Workflow\n- Local dev: User creates a base git repo for the application with Dockerfile and K8s deployment\n- Setting Remote: User defines a spec for Remote containing the rules for `git push` \n- Deploying application: Once a Remote is setup, application can be deployed to K8s using `git push <remote> master`\n\n#### Local dev\nUser should have a git repo with source code and a Dockerfile. User should also create a base K8s deployment for the application.\n\n#### Setting Remote\nA Remote resource consists of 3 parts:\n\n1. authorizedKeys: List of ssh-keys for authorizing `git push`.\n2. registry: Details of docker registry where images are pushed post-build.\n3. deployments: Spec for building docker image and updating corresponding K8s deployment.\n\nHere is a typical spec for a Remote:\n```yaml\napiVersion: gitkube.sh/v1alpha1\nkind: Remote\nmetadata:\n  name: sampleremote\n  namespace: default\nspec:\n\n# Insert ssh-keys for allowing users to git push\n  authorizedKeys:\n  - "ssh-rsa your-ssh-public-key"\n\n# Provide registry details: https://github.com/hasura/gitkube/blob/master/docs/registry.md\n  registry:\n    url: "docker.io/user"\n    credentials:\n      secretRef: regsecret                # Name of docker-registry secret\n\n# Define deployment rules\n  deployments:\n  - name: www                             # Name of K8s deployment which is updated on git push\n    containers: \n    - name: www                           # Name of container in the deployment which is built during git push\n      path: example/www                   # Docker build context path in the git repo\n      dockerfile: example/www/Dockerfile  # Location of Dockerfile for the source code\n```\n\n#### Deploying application\n\nOnce a Remote is created, it gets a git remote URL which you can find in its `status` spec\n\n```sh\n$ kubectl get remote sampleremote -o yaml\n...\nstatus:\n  remoteUrl: ssh://default-sampleremote@35.225.226.96/~/git/default-sampleremote\n  remoteUrlDesc: ""\n```\n\nAdd the generated `remoteUrl` in git\n\n```sh\n$ git remote add sampleremote ssh://default-sampleremote@35.225.226.96/~/git/default-sampleremote\n```\n\nAnd finally, `git push`\n\n```sh\n$ git push sampleremote master\n```\n\n## Roadmap\n\nGitkube is open to evolution. Some of the features to be added in future include:  \n\n- Allowing all apps (daemonset, statefulset) to be deployed using `git push`. Current support is limited to deployments. [#19](https://github.com/hasura/gitkube/issues/19)\n- Allowing different git hooks to be integrated [#20](https://github.com/hasura/gitkube/issues/20)\n\n## Contributing\n\nGitkube is an open source project licensed under Apache License 2.0\n\nContributions are welcome.\n\n## Community and Support\n\n- Join the [Gitkube channel](https://kubernetes.slack.com/messages/CA68R8ZBN/) in the Kubernetes Slack group\n\n- <a href="https://twitter.com/intent/follow?screen_name=gitkube"><img src="https://img.shields.io/twitter/follow/gitkube.svg?style=social&logo=twitter" alt="follow on Twitter"></a>\n\n- Subscribe to the [Gitkube mailing list](http://eepurl.com/dsxoH9)\n\n## Maintainers\n\nThis project has come out of the work at [hasura.io](https://hasura.io). \nCurrent maintainers [@Tirumarai](https://twitter.com/Tirumarai), [@shahidh_k](https://twitter.com/shahidh_k). \n\nFollow [@gitkube](https://twitter.com/gitkube) to stay updated.\n\nGitkube logo concept and design by [Samudra Gupta](https://www.linkedin.com/in/samudra-gupta-b6a3a238/). \n'