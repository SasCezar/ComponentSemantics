b'<p align="center">\n  <img src="doc/logo-header.svg" alt="bat - a cat clone with wings"><br>\n  <a href="https://travis-ci.org/sharkdp/bat"><img src="https://travis-ci.org/sharkdp/bat.svg?branch=master" alt="Build Status"></a>\n  <a href="https://ci.appveyor.com/project/sharkdp/bat"><img src="https://ci.appveyor.com/api/projects/status/cptsmtbiwbnr2vhf?svg=true"></a>\n  <img src="https://img.shields.io/crates/l/bat.svg" alt="license">\n  <a href="https://crates.io/crates/bat"><img src="https://img.shields.io/crates/v/bat.svg?colorB=319e8c" alt="Version info"></a><br>\n  A <i>cat(1)</i> clone with syntax highlighting and Git integration.\n</p>\n\n<p align="center">\n  <a href="#syntax-highlighting">Key Features</a> \xe2\x80\xa2\n  <a href="#how-to-use">How To Use</a> \xe2\x80\xa2\n  <a href="#installation">Installation</a> \xe2\x80\xa2\n  <a href="#customization">Customization</a> \xe2\x80\xa2\n  <a href="#project-goals-and-alternatives">Project goals, alternatives</a> \xe2\x80\xa2\n  Translation [<a href="https://github.com/chinanf-boy/bat-zh">\xe4\xb8\xad\xe6\x96\x87</a>][<a href="doc/README-ja.md">\xe6\x97\xa5\xe6\x9c\xac\xe6\x96\x87</a>]\n</p>\n\n### Syntax highlighting\n\n`bat` supports syntax highlighting for a large number of programming and markup\nlanguages:\n\n![Syntax highlighting example](https://imgur.com/rGsdnDe.png)\n\n### Git integration\n\n`bat` communicates with `git` to show modifications with respect to the index\n(see left side bar):\n\n![Git integration example](https://i.imgur.com/2lSW4RE.png)\n\n### Show non-printable characters\n\nYou can use the `-A`/`--show-all` option to show and highlight non-printable\ncharacters:\n\n![Non-printable character example](https://i.imgur.com/WndGp9H.png)\n\n### Automatic paging\n\n`bat` can pipe its own output to `less` if the output is too large for one screen.\n\n### File concatenation\n\nOh.. you can also use it to concatenate files :wink:. Whenever\n`bat` detects a non-interactive terminal (i.e. when you pipe into another process\nor into a file), `bat` will act as a drop-in replacement for `cat` and\nfall back to printing the plain file contents.\n\n## How to use\n\nDisplay a single file on the terminal\n\n```bash\n> bat README.md\n```\n\nDisplay multiple files at once\n\n```bash\n> bat src/*.rs\n```\n\nRead from stdin, determine the syntax automatically\n\n```bash\n> curl -s https://sh.rustup.rs | bat\n```\n\nRead from stdin, specify the language explicitly\n\n```bash\n> yaml2json .travis.yml | json_pp | bat -l json\n```\n\nShow and highlight non-printable characters:\n```bash\n> bat -A /etc/hosts\n```\n\nUse it as a `cat` replacement:\n\n```bash\nbat > note.md  # quickly create a new file\n\nbat header.md content.md footer.md > document.md\n\nbat -n main.rs  # show line numbers (only)\n\nbat f - g  # output \'f\', then stdin, then \'g\'.\n```\n\n### Integration with other tools\n\n#### `find` or `fd`\n\nYou can use the `-exec` option of `find` to preview all search results with `bat`:\n```bash\nfind \xe2\x80\xa6 -exec bat {} +\n```\n\nIf you happen to use [`fd`](https://github.com/sharkdp/fd), you can use the `-X`/`--exec-batch` option to do the same:\n```bash\nfd \xe2\x80\xa6 -X bat\n```\n\n#### `ripgrep`\n\nWith [`batgrep`](https://github.com/eth-p/bat-extras/blob/master/doc/batgrep.md), `bat` can be used as the printer for [`ripgrep`](https://github.com/BurntSushi/ripgrep) search results.\n\n```bash\nbatgrep needle src/\n```\n\n#### `tail -f`\n\n`bat` can be combined with `tail -f` to continuously monitor a given file with syntax highlighting.\n```bash\ntail -f /var/log/pacman.log | bat --paging=never -l log\n```\nNote that we have to switch off paging in order for this to work. We have also specified the syntax\nexplicitly (`-l log`), as it can not be auto-detected in this case.\n\n#### `git`\n\nYou can combine `bat` with `git show` to view an older version of a given file with proper syntax\nhighlighting:\n```bash\ngit show v0.6.0:src/main.rs | bat -l rs\n```\n\nNote that syntax highlighting within diffs is currently not supported. If you are looking for this, check out [`delta`](https://github.com/dandavison/delta).\n\n#### `xclip`\n\nThe line numbers and Git modification markers in the output of `bat` can make it hard to copy\nthe contents of a file. To prevent this, you can call `bat` with the `-p`/`--plain` option or\nsimply pipe the output into `xclip`:\n```bash\nbat main.cpp | xclip\n```\n`bat` will detect that the output is being redirected and print the plain file contents.\n\n#### `man`\n\n`bat` can be used as a colorizing pager for `man`, by setting the\n`MANPAGER` environment variable:\n\n```bash\nexport MANPAGER="sh -c \'col -bx | bat -l man -p\'"\nman 2 select\n```\n\nIt might also be necessary to set `MANROFFOPT="-c"` if you experience\nformatting problems.\n\nIf you prefer to have this bundled in a new command, you can also use [`batman`](https://github.com/eth-p/bat-extras/blob/master/doc/batman.md).\n\nNote that the [Manpage syntax](assets/syntaxes/Manpage.sublime-syntax) is developed in this repository and still needs some work.\n\n#### `prettier` / `shfmt` / `rustfmt`\n\nThe [`prettybat`](https://github.com/eth-p/bat-extras/blob/master/doc/prettybat.md) script is a wrapper that will format code and print it with `bat`.\n\n\n## Installation\n\n[![Packaging status](https://repology.org/badge/vertical-allrepos/bat.svg)](https://repology.org/project/bat/versions)\n\n### On Ubuntu\n*... and other Debian-based Linux distributions.*\n\nYou can install [the Ubuntu `bat` package](https://packages.ubuntu.com/eoan/bat) or [the Debian `bat` package](https://packages.debian.org/sid/bat) since Ubuntu Eoan 19.10 or Debian unstable sid.\n\n```bash\napt install bat\n```\n\nIf you want to run the latest release of bat or if you are on older versions of Ubuntu/Debian, download the latest `.deb` package from the [release page](https://github.com/sharkdp/bat/releases)\nand install it via:\n```bash\nsudo dpkg -i bat_0.12.1_amd64.deb  # adapt version number and architecture\n```\n\n### On Alpine Linux\n\nYou can install [the `bat` package](https://pkgs.alpinelinux.org/packages?name=bat)\nfrom the official sources, provided you have the appropriate repository enabled:\n\n```bash\napk add bat\n```\n\n### On Arch Linux\n\nYou can install [the `bat` package](https://www.archlinux.org/packages/community/x86_64/bat/)\nfrom the official sources:\n\n```bash\npacman -S bat\n```\n\n### On Fedora\n\nYou can install [the `bat` package](https://koji.fedoraproject.org/koji/packageinfo?packageID=27506) from the official [Fedora Modular](https://docs.fedoraproject.org/en-US/modularity/using-modules/) repository.\n\n```bash\ndnf install bat\n```\n\n### On Gentoo Linux\n\nYou can install [the `bat` package](https://packages.gentoo.org/packages/sys-apps/bat)\nfrom the official sources:\n\n```bash\nemerge sys-apps/bat\n```\n\n### On Void Linux\n\nYou can install `bat` via xbps-install:\n```bash\nxbps-install -S bat\n```\n\n### On FreeBSD\n\nYou can install a precompiled [`bat` package](https://www.freshports.org/textproc/bat) with pkg:\n\n```bash\npkg install bat\n```\n\nor build it on your own from the FreeBSD ports:\n\n```bash\ncd /usr/ports/textproc/bat\nmake install\n```\n\n### Via nix\n\nYou can install `bat` using the [nix package manager](https://nixos.org/nix):\n\n```bash\nnix-env -i bat\n```\n\n### On openSUSE\n\nYou can install `bat` with zypper:\n\n```bash\nzypper install bat\n```\n\n### On macOS\n\nYou can install `bat` with [Homebrew](http://braumeister.org/formula/bat):\n\n```bash\nbrew install bat\n```\n\nOr install `bat` with [MacPorts](https://ports.macports.org/port/bat/summary):\n\n```bash\nport install bat\n```\n\n### On Windows\n\nYou can download prebuilt binaries from the [Release page](https://github.com/sharkdp/bat/releases),\nor install it with [scoop](https://scoop.sh/) or [Chocolatey](https://chocolatey.org):\n\n```bash\nscoop install bat\n```\n\n```bash\nchoco install bat\n```\n\n[See below](#using-bat-on-windows) for notes.\n\n### Via Docker\n\nThere is a [Docker image](https://hub.docker.com/r/danlynn/bat/) that you can use to run `bat` in a container:\n```bash\ndocker pull danlynn/bat\nalias bat=\'docker run -it --rm -e BAT_THEME -e BAT_STYLE -e BAT_TABS -v "$(pwd):/myapp" danlynn/bat\'\n```\n\n### Via Ansible\n\nYou can install `bat` with [Ansible](https://www.ansible.com/):\n\n```bash\n# Install role on local machine\nansible-galaxy install aeimer.install_bat\n```\n\n```yaml\n---\n# Playbook to install bat\n- host: all\n  roles:\n    - aeimer.install_bat\n```\n\n- [Ansible Galaxy](https://galaxy.ansible.com/aeimer/install_bat)\n- [GitHub](https://github.com/aeimer/ansible-install-bat)\n\nThis should work with the following distributions:\n- Debian/Ubuntu\n- ARM (eg. Raspberry PI)\n- Arch Linux\n- Void Linux\n- FreeBSD\n- MacOS\n\n### From binaries\n\nCheck out the [Release page](https://github.com/sharkdp/bat/releases) for\nprebuilt versions of `bat` for many different architectures. Statically-linked\nbinaries are also available: look for archives with `musl` in the file name.\n\n### From source\n\nIf you want to build `bat` from source, you need Rust 1.35 or\nhigher. You can then use `cargo` to build everything:\n\n```bash\ncargo install bat\n```\n\nOn some platforms, you might need to install `llvm` and/or `libclang-dev`.\n\n## Customization\n\n### Highlighting theme\n\nUse `bat --list-themes` to get a list of all available themes for syntax\nhighlighting. To select the `TwoDark` theme, call `bat` with the\n`--theme=TwoDark` option or set the `BAT_THEME` environment variable to\n`TwoDark`. Use `export BAT_THEME="TwoDark"` in your shell\'s startup file to\nmake the change permanent. Alternatively, use `bat`s\n[configuration file](https://github.com/sharkdp/bat#configuration-file).\n\nIf you want to preview the different themes on a custom file, you can use\nthe following command (you need [`fzf`](https://github.com/junegunn/fzf) for this):\n```bash\nbat --list-themes | fzf --preview="bat --theme={} --color=always /path/to/file"\n```\n\n`bat` looks good on a dark background by default. However, if your terminal uses a\nlight background, some themes like `GitHub` or `OneHalfLight` will work better for you.\nYou can also use a custom theme by following the\n[\'Adding new themes\' section below](https://github.com/sharkdp/bat#adding-new-themes).\n\n### Output style\n\nYou can use the `--style` option to control the appearance of `bat`s output.\nYou can use `--style=numbers,changes`, for example, to show only Git changes\nand line numbers but no grid and no file header. Set the `BAT_STYLE` environment\nvariable to make these changes permanent or use `bat`s\n[configuration file](https://github.com/sharkdp/bat#configuration-file).\n\n### Adding new syntaxes / language definitions\n\n`bat` uses the excellent [`syntect`](https://github.com/trishume/syntect/)\nlibrary for syntax highlighting. `syntect` can read any\n[Sublime Text `.sublime-syntax` file](https://www.sublimetext.com/docs/3/syntax.html)\nand theme. To add new syntax definitions, do the following.\n\nCreate a folder with syntax definition files:\n\n```bash\nmkdir -p "$(bat --config-dir)/syntaxes"\ncd "$(bat --config-dir)/syntaxes"\n\n# Put new \'.sublime-syntax\' language definition files\n# in this folder (or its subdirectories), for example:\ngit clone https://github.com/tellnobody1/sublime-purescript-syntax\n```\n\nNow use the following command to parse these files into a binary cache:\n\n```bash\nbat cache --build\n```\n\nFinally, use `bat --list-languages` to check if the new languages are available.\n\nIf you ever want to go back to the default settings, call:\n\n```bash\nbat cache --clear\n```\n\n### Adding new themes\n\nThis works very similar to how we add new syntax definitions.\n\nFirst, create a folder with the new syntax highlighting themes:\n```bash\nmkdir -p "$(bat --config-dir)/themes"\ncd "$(bat --config-dir)/themes"\n\n# Download a theme in \'.tmTheme\' format, for example:\ngit clone https://github.com/greggb/sublime-snazzy\n\n# Update the binary cache\nbat cache --build\n```\n\nFinally, use `bat --list-themes` to check if the new themes are available.\n\n### Using a different pager\n\n`bat` uses the pager that is specified in the `PAGER` environment variable. If this variable is not\nset, `less` is used by default. If you want to use a different pager, you can either modify the\n`PAGER` variable or set the `BAT_PAGER` environment variable to override what is specified in\n`PAGER`.\n\nIf you want to pass command-line arguments to the pager, you can also set them via the\n`PAGER`/`BAT_PAGER` variables:\n\n```bash\nexport BAT_PAGER="less -RF"\n```\n\nInstead of using environment variables, you can also use `bat`s [configuration file](https://github.com/sharkdp/bat#configuration-file) to configure the pager (`--pager` option).\n\n**Note**: By default, if the pager is set to `less` (and no command-line options are specified),\n`bat` will pass the following command line\noptions to the pager: `-R`/`--RAW-CONTROL-CHARS`, `-F`/`--quit-if-one-screen` and `-X`/`--no-init`.\nThe first (`-R`) is needed to interpret ANSI colors correctly. The second option (`-F`) instructs\nless to exit immediately if the output size is smaller than the vertical size of the terminal.\nThis is convenient for small files because you do not have to press `q` to quit the pager. The\nthird option (`-X`) is needed to fix a bug with the `--quit-if-one-screen` feature in old versions\nof `less`. Unfortunately, it also breaks mouse-wheel support in `less`. If you want to enable\nmouse-wheel scrolling, you can either pass just `-R` (as in the example above, this will disable\nthe quit-if-one-screen feature), or you can use a recent version of `less` and pass `-RF` which\nwill hopefully enable both quit-if-one-screen and mouse-wheel scrolling.\n\nIf scrolling still doesn\'t work for you, you can try to pass the `-S` option in addition.\n\n### Dark mode\n\nIf you make use of the dark mode feature in macOS, you might want to configure `bat` to use a different\ntheme based on the OS theme. The following snippet uses the `default` theme when in the light mode\nand the `GitHub` theme when in the dark mode.\n\n```bash\nalias cat="bat --theme=\\$(defaults read -globalDomain AppleInterfaceStyle &> /dev/null && echo default || echo GitHub)"\n```\n\n## Configuration file\n\n`bat` can also be customized with a configuration file. The location of the file is dependent\non your operating system. To get the default path for your system, call\n```\nbat --config-file\n```\n\nAlternatively, you can use the `BAT_CONFIG_PATH` environment variable to point `bat` to a\nnon-default location of the configuration file:\n```bash\nexport BAT_CONFIG_PATH="/path/to/bat.conf"\n```\n\n### Format\n\nThe configuration file is a simple list of command line arguments. Use `bat --help` to see a full list of possible options and values. In addition, you can add comments by prepending a line with the `#` character.\n\nExample configuration file:\n```bash\n# Set the theme to "TwoDark"\n--theme="TwoDark"\n\n# Show line numbers, Git modifications and file header (but no grid)\n--style="numbers,changes,header"\n\n# Use italic text on the terminal (not supported on all terminals)\n--italic-text=always\n\n# Add mouse scrolling support in less (does not work with older\n# versions of "less")\n--pager="less -FR"\n\n# Use C++ syntax (instead of C) for .h header files\n--map-syntax h:cpp\n\n# Use "gitignore" highlighting for ".ignore" files\n--map-syntax .ignore:.gitignore\n```\n\n## Using `bat` on Windows\n\n`bat` mostly works out-of-the-box on Windows, but a few features may need extra configuration.\n\n### Paging\n\nWindows only includes a very limited pager in the form of `more`. You can download a Windows binary\nfor `less` [from its homepage](http://www.greenwoodsoftware.com/less/download.html) or [through\nChocolatey](https://chocolatey.org/packages/Less). To use it, place the binary in a directory in\nyour `PATH` or [define an environment variable](#using-a-different-pager). The [Chocolatey package](#on-windows) installs `less` automatically.\n\n### Colors\n\nWindows 10 natively supports colors in both `conhost.exe` (Command Prompt) and PowerShell since\n[v1511](https://en.wikipedia.org/wiki/Windows_10_version_history#Version_1511_(November_Update)), as\nwell as in newer versions of bash. On earlier versions of Windows, you can use\n[Cmder](http://cmder.net/), which includes [ConEmu](https://conemu.github.io/).\n\n**Note:** The Git and MSYS versions of `less` do not correctly interpret colors on Windows. If you\ndon\xe2\x80\x99t have any other pagers installed, you can disable paging entirely by passing `--paging=never`\nor by setting `BAT_PAGER` to an empty string.\n\n### Cygwin\n\n`bat` on Windows does not natively support Cygwin\'s unix-style paths (`/cygdrive/*`). When passed an absolute cygwin path as an argument, `bat` will encounter the following error: `The system cannot find the path specified. (os error 3)`\n\nThis can be solved by creating a wrapper or adding the following function to your `.bash_profile` file:\n\n```bash\nbat() {\n    local index\n    local args=("$@")\n    for index in $(seq 0 ${#args[@]}) ; do\n        case "${args[index]}" in\n        -*) continue;;\n        *)  [ -e "${args[index]}" ] && args[index]="$(cygpath --windows "${args[index]}")";;\n        esac\n    done\n    command bat "${args[@]}"\n}\n```\n\n## Troubleshooting\n\n### Terminals & colors\n\n`bat` handles terminals *with* and *without* truecolor support. However, the colors in the syntax\nhighlighting themes are not optimized for 8-bit colors and it is therefore strongly recommended\nthat you use a terminal with 24-bit truecolor support (`terminator`, `konsole`, `iTerm2`, ...).\nSee [this article](https://gist.github.com/XVilka/8346728) for more details and a full list of\nterminals with truecolor support.\n\nMake sure that your truecolor terminal sets the `COLORTERM` variable to either `truecolor` or\n`24bit`. Otherwise, `bat` will not be able to determine whether or not 24-bit escape sequences\nare supported (and fall back to 8-bit colors).\n\n### Line numbers and grid are hardly visible\n\nPlease try a different theme (see `bat --list-themes` for a list). The `OneHalfDark` and\n`OneHalfLight` themes provide grid and line colors that are brighter.\n\n### File encodings\n\n`bat` natively supports UTF-8 as well as UTF-16. For every other file encoding, you may need to\nconvert to UTF-8 first because the encodings can typically not be auto-detected. You can `iconv`\nto do so.\nExample: if you have a PHP file in Latin-1 (ISO-8859-1) encoding, you can call:\n``` bash\niconv -f ISO-8859-1 -t UTF-8 my-file.php | bat\n```\nNote: you might have to use the `-l`/`--language` option if the syntax can not be auto-detected\nby `bat`.\n\n## Development\n\n```bash\n# Recursive clone to retrieve all submodules\ngit clone --recursive https://github.com/sharkdp/bat\n\n# Build (debug version)\ncd bat\ncargo build --bins\n\n# Run unit tests and integration tests\ncargo test\n\n# Install (release version)\ncargo install\n\n# Build a bat binary with modified syntaxes and themes\nbash assets/create.sh\ncargo install -f\n```\n\n## Maintainers\n\n- [sharkdp](https://github.com/sharkdp)\n- [eth-p](https://github.com/eth-p)\n\n## Project goals and alternatives\n\n`bat` tries to achieve the following goals:\n\n- Provide beautiful, advanced syntax highlighting\n- Integrate with Git to show file modifications\n- Be a drop-in replacement for (POSIX) `cat`\n- Offer a user-friendly command-line interface\n\nThere are a lot of alternatives, if you are looking for similar programs. See\n[this document](doc/alternatives.md) for a comparison.\n'