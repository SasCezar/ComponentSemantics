b'# Bubble-Picker\n\n[![License](http://img.shields.io/badge/license-MIT-green.svg?style=flat)]()\n[![](https://jitpack.io/v/igalata/Bubble-Picker.svg)](https://jitpack.io/#igalata/Bubble-Picker)\n\n<a href=\'https://play.google.com/store/apps/details?id=com.igalata.bubblepickerdemo&pcampaignid=MKT-Other-global-all-co-prtnr-py-PartBadge-Mar2515-1\'><img alt=\'Get it on Google Play\' src=\'https://play.google.com/intl/en_us/badges/images/generic/en_badge_web_generic.png\' height="70" width="180"/></a>\n\nCheck this [project on dribbble](https://dribbble.com/shots/3349372-Bubble-Picker-Open-Source-Component)\n\nRead how we did it [on Medium](https://medium.com/@igalata13/how-to-create-a-bubble-selection-animation-on-android-627044da4854#.ajonc010b)\n\n<img src="shot.gif"/>\n\n## Requirements\n- Android SDK 16+\n\n## Usage\n\nAdd to your root build.gradle:\n```Groovy\nallprojects {\n\trepositories {\n\t...\n\tmaven { url "https://jitpack.io" }\n\t}\n}\n```\n\nAdd the dependency:\n```Groovy\ndependencies {\n\tcompile \'com.github.igalata:Bubble-Picker:v0.2.4\'\n}\n```\n\n## How to use this library\n\nAdd `BubblePicker` to your xml layout\n\n```xml\n<?xml version="1.0" encoding="utf-8"?>\n<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"\n    xmlns:app="http://schemas.android.com/apk/res-auto"\n    android:layout_width="match_parent"\n    android:layout_height="match_parent">\n\n    <com.igalata.bubblepicker.rendering.BubblePicker\n        android:id="@+id/picker"\n        android:layout_width="match_parent"\n        android:layout_height="match_parent"\n        app:backgroundColor="@android:color/white" />\n\n</FrameLayout>\n```\n\nOverride onResume() and onPause() methods to call the same methods from the `BubblePicker`\n\nKotlin\n```kotlin\noverride fun onResume() {\n      super.onResume()\n      picker.onResume()\n}\n\noverride fun onPause() {\n      super.onPause()\n      picker.onPause()\n}\n```\n\nJava\n```java\n@Override\nprotected void onResume() {\n      super.onResume();\n      picker.onResume();\n}\n\n@Override\nprotected void onPause() {\n      super.onPause();\n      picker.onPause();\n}\n```\n\nPass the `PickerItem` list to the `BubblePicker`\n\nKotlin\n```kotlin\nval titles = resources.getStringArray(R.array.countries)\nval colors = resources.obtainTypedArray(R.array.colors)\nval images = resources.obtainTypedArray(R.array.images)\n\npicker.adapter = object : BubblePickerAdapter {\n\n            override val totalCount = titles.size\n\n            override fun getItem(position: Int): PickerItem {\n                return PickerItem().apply {\n                    title = titles[position]\n                    gradient = BubbleGradient(colors.getColor((position * 2) % 8, 0),\n                            colors.getColor((position * 2) % 8 + 1, 0), BubbleGradient.VERTICAL)\n                    typeface = mediumTypeface\n                    textColor = ContextCompat.getColor(this@DemoActivity, android.R.color.white)\n                    backgroundImage = ContextCompat.getDrawable(this@DemoActivity, images.getResourceId(position, 0))\n                }\n            }\n}\n```\n\nJava\n```java\nfinal String[] titles = getResources().getStringArray(R.array.countries);\nfinal TypedArray colors = getResources().obtainTypedArray(R.array.colors);\nfinal TypedArray images = getResources().obtainTypedArray(R.array.images);\n\npicker.setAdapter(new BubblePickerAdapter() {\n            @Override\n            public int getTotalCount() {\n                return titles.length;\n            }\n\n            @NotNull\n            @Override\n            public PickerItem getItem(int position) {\n                PickerItem item = new PickerItem();\n                item.setTitle(titles[position]);\n                item.setGradient(new BubbleGradient(colors.getColor((position * 2) % 8, 0),\n                        colors.getColor((position * 2) % 8 + 1, 0), BubbleGradient.VERTICAL));\n                item.setTypeface(mediumTypeface);\n                item.setTextColor(ContextCompat.getColor(DemoActivity.this, android.R.color.white));\n                item.setBackgroundImage(ContextCompat.getDrawable(DemoActivity.this, images.getResourceId(position, 0)));\n                return item;\n            }\n});\n```\n\nSpecify the `BubblePickerListener` to get notified about events\n\nKotlin\n```kotlin\npicker.listener = object : BubblePickerListener {\n            override fun onBubbleSelected(item: PickerItem) {\n\n            }\n\n            override fun onBubbleDeselected(item: PickerItem) {\n\n            }\n}\n```\n\nJava\n```java\npicker.setListener(new BubblePickerListener() {\n            @Override\n            public void onBubbleSelected(@NotNull PickerItem item) {\n                \n            }\n\n            @Override\n            public void onBubbleDeselected(@NotNull PickerItem item) {\n\n            }\n});\n```\n\nTo get all selected items use `picker.selectedItems` variable in Kotlin or `picker.getSelectedItems()` method in Java.\n\nFor more usage examples please review the sample app\n\n## Changelog\n\n### Version: 0.2.4\n\n* Added a possibility to setup the `BubblePicker` using `BubblePickerAdapter`\n\n### Version: 0.2.3\n\n* Fixed black textures issue on some devices\n\n### Version: 0.2.1\n\n* `BubblePicker.centerImmediately` veriable added, so it\'s possible to place the bubbles \n in the center of the view immediately\n\n### Version: 0.2\n\n* `icon` parameter added to place an image on a bubble along with the title \n* `iconOnTop` parameter added to control position of the icon on a bubble\n* `textSize` parameter added\n* `BubblePicker.bubbleSize` variable now can be changed from 1 to 100\n\n## Known iOS versions of the animation\n\n* https://github.com/Ronnel/BubblePicker\n* https://github.com/efremidze/Magnetic\n\n## License\n\nMIT License\n\nCopyright (c) 2017 Irina Galata\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the "Software"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n'