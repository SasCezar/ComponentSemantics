b'# StarWars.Android\n\n[![License](http://img.shields.io/badge/license-MIT-green.svg?style=flat)]()\n[![Maven](https://img.shields.io/maven-central/v/com.yalantis/starwarstiles.svg)]()\n[![](https://jitpack.io/v/yalantis/starwars.android.svg)](https://jitpack.io/#yalantis/starwars.android)\n[![Yalantis](https://raw.githubusercontent.com/Yalantis/PullToRefresh/develop/PullToRefreshDemo/Resources/badge_dark.png)](https://yalantis.com/?utm_source=github)\n\nThis component implements transition animation to crumble view into tiny pieces.\n\n\n\n<img src="star_wars-concept.gif" />\n<br>Check this <a href="https://dribbble.com/shots/2109991-Star-Wars-App-concept">project on dribbble</a>.\n\nAlso, read how it was done in [our blog](https://yalantis.com/blog/star-wars-the-force-awakens-or-how-to-crumble-view-into-tiny-pieces-on-android)\n\n##Requirements\n- Android SDK 15+\n- OpenGL ES 2.0+\n\n##Usage\n\nAdd to your module\'s build.gradle:\n```Groovy\ndependencies {\n    //...\n    compile \'com.yalantis:starwarstiles:0.1.1\'\n}\n```\n\nWrap your fragment or activity main view in TilesFrameLayout:\n```xml\n<com.yalantis.starwars.TilesFrameLayout\n  android:id="@+id/tiles_frame_layout"\n  android:layout_height="match_parent"\n  android:layout_width="match_parent"\n  app:sw_animationDuration="1500"\n  app:sw_numberOfTilesX="35">\n\n  <!-- Your views go here -->\n     \n</com.yalantis.starwars.TilesFrameLayout>\n```\n\n\nAdjust animation with these parameters:\n- ```app:sw_animationDuration``` \xe2\x80\x93 duration in milliseconds\n- ```app:sw_numberOfTilesX``` \xe2\x80\x93  the number of square tiles the plane is tessellated into broadwise\n\n```java\nmTilesFrameLayout = (TilesFrameLayout) findViewById(R.id.tiles_frame);\nmTilesFrameLayout.setOnAnimationFinishedListener(this);\n```\nIn your activity or fragment\xe2\x80\x99s onPause() and onResume() it\xe2\x80\x99s important to call the corresponding methods:\n```java\n@Override\npublic void onResume() {\n    super.onResume();\n    mTilesFrameLayout.onResume();\n}\n\n@Override\npublic void onPause() {\n    super.onPause();\n    mTilesFrameLayout.onPause();\n}\n```\nTo start the animation simply call:\n```java\nmTilesFrameLayout.startAnimation();\n```\nYour callback will be called when the animation ends:\n```java\n@Override\npublic void onAnimationFinished() {\n   // Hide or remove your view/fragment/activity here\n}\n```\n\nHave fun! :)\n\n#### Let us know!\n\nWe\xe2\x80\x99d be really happy if you sent us links to your projects where you use our component. Just send an email to github@yalantis.com And do let us know if you have any questions or suggestion regarding the animation. \n\nP.S. We\xe2\x80\x99re going to publish more awesomeness wrapped in code and a tutorial on how to make UI for iOS (Android) better than better. Stay tuned!\n\n## License\n\n\tThe MIT License (MIT)\n\n\tCopyright \xc2\xa9 2017 Yalantis, https://yalantis.com\n\n\tPermission is hereby granted, free of charge, to any person obtaining a copy\n\tof this software and associated documentation files (the "Software"), to deal\n\tin the Software without restriction, including without limitation the rights\n\tto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\tcopies of the Software, and to permit persons to whom the Software is\n\tfurnished to do so, subject to the following conditions:\n\n\tThe above copyright notice and this permission notice shall be included in\n\tall copies or substantial portions of the Software.\n\n\tTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\tIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\tFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\tAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\tLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\tOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\tTHE SOFTWARE.\n\n'