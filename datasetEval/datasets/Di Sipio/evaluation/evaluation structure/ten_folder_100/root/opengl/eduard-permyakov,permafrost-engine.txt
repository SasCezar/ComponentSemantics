b"## ![Logo](docs/images/logo.png) ##\n\nPermafrost Engine is an OpenGL 3.3 Real Time Strategy game engine written in C. \nIt is made in the image of old classics, but incorporating some modern ideas.\n\n## Engine Showcase ##\n\n###### Hellknight from DOOM 3 by id Sofware ######\n![Hellknight](docs/images/hellknight.gif)\n###### Sinbad by Zi Ye ######\n![Sinbad](docs/images/sinbad.gif)\n###### Tile-Based Map ######\n![Terrain](docs/images/terrain.png)\n###### Map Editor ######\n![Map Editor](docs/images/editor.png)\n###### Baked Navigation Grid ######\n![Navigation Grid](docs/images/navigation.png)\n\n## Engine Summary ##\n\n* OpenGL 3.3 programmable pipeline\n* Custom ASCII model format with Blender export script\n* Skeletal animation with GPU skinning\n* Phong reflection model with materials\n* Directional light shadow mapping\n* RTS camera, FPS camera\n* Rendering of tile-based world parsed from ASCII file\n* Water rendering (including reflection, refraction, soft edge effects)\n* Export/Import of game entites to/from ASCII files\n* Engine internals exposed to Python 2.7 for scripting\n* Event system\n* UI framework (Nuklear-based)\n* Efficient raycasting\n* Map/Scene editor\n* Pause/Resume system\n* Fast rendering of huge maps\n* Map navigation graph/grid generation\n* Implementation of 'boids' steering/flocking behaviours\n* Hierarchial flow field pathfinding\n* Dynamic collision avoidance of multiple entities using Hybrid Reciprocal Velocity Obstacles and the ClearPath algorithm\n* Efficient spatial indexing using a quadtree\n* RTS minimap\n* RTS-style unit selection\n* RTS unit combat system\n* Support for different resolutions and aspect ratios\n* Configurable graphics settings\n* Serialization and deserialization of the Python interpreter state\n* Cross-platform (Linux and Windows)\n\n## Dependencies ##\n\n* SDL2 2.0.7\n* GLEW 2.1.0\n* python 2.7.13\n* stb_image.h, stb_image_resize.h\n* khash.h\n* nuklear.h\n\nAll dependencies can be built from source and distributed\nalong with the game binary if desired. \n\n## Building Permafrost Engine ##\n\n#### On Linux ####\n\n1. `git clone --recursive https://github.com/eduard-permyakov/permafrost-engine.git`\n2. `cd permafrost-engine`\n3. `make deps` to build the shared library dependencies to `./lib`\n4. `make pf`\n5. `make run` to run the demo or `make run_editor` to run the map editor\n\n#### On Windows ####\n\n1. Python must be compiled using MSVC build tools and the solution file found in the\n   the source's `PCbuild` directory. Afterwards, copy `python27.dll`(and extension shared\n   libraries if you wish) and the `Lib` folder to `./lib`. Alternatively, you may try \n   to link against an existing Python installation elsewhere on your system.\n2. The rest of the source code can be built with MinGW and MSYS using largely the same steps\n   as on Linux.\n3. `run.bat` or `run_editor.bat` will launch the binary with appropriate arguments.\n\n## License ##\n\nPermafrost Engine is licensed under the GPLv3, with a special linking exception.\n\n## Comments/Questions ##\n\nComments or questions regarding the project or the source code? E-mail: edward.permyakov@gmail.com\n\n"