b'glad\n====\n\nGL/GLES/EGL/GLX/WGL Loader-Generator based on the official specs.\n\nUse the [webservice](https://glad.dav1d.de) to generate the files you need!\n\n\n```c\n#include <glad/glad.h>\n\nint main(int argc, char **argv)\n{\n    // .. setup the context\n\n    if(!gladLoadGL()) {\n        printf("Something went wrong!\\n");\n        exit(-1);\n    }\n    printf("OpenGL %d.%d\\n", GLVersion.major, GLVersion.minor);\n\n    // .. render here ..\n}\n```\n\nExamples: \n * [simple.c](https://github.com/Dav1dde/glad/blob/master/example/c/simple.c)\n * [hellowindow2.cpp](https://github.com/Dav1dde/glad/blob/master/example/c%2B%2B/hellowindow2.cpp)\n using [GLFW](https://glfw.org):\n\n\n## Usage ##\n\n\n**If you don\'t want to install glad you can use the [webservice](https://glad.dav1d.de)**\n\n\nOtherwise either install glad via pip:\n\n    # Windows\n    pip install glad\n\n    # Linux\n    pip install --user glad\n    # Linux global (root)\n    pip install glad\n\n    glad --help\n\nTo install the most recent version from Github:\n\n    pip install --upgrade git+https://github.com/dav1dde/glad.git#egg=glad\n\nOr launch glad directly (after cloning the repository):\n\n    python -m glad --help\n\n\nPossible commandline options:\n\n    usage: glad [-h] [--profile {core,compatibility}] --out-path OUT\n                     [--api API] --generator {c,d,volt}\n                     [--extensions EXTENSIONS] [--spec {gl,egl,glx,wgl}]\n                     [--no-loader]\n    \n    Uses the official Khronos-XML specs to generate a GL/GLES/EGL/GLX/WGL Loader\n    made for your needs. Glad currently supports the languages C, D and Volt.\n    \n    optional arguments:\n      -h, --help            show this help message and exit\n      --profile {core,compatibility}\n                            OpenGL profile (defaults to compatibility)\n      --out-path OUT        Output path for loader\n      --api API             API type/version pairs, like "gl=3.2,gles=", no\n                            version means latest\n      --generator {c,c-debug,d,volt}\n                            Language to generate the binding for\n      --extensions EXTENSIONS\n                            Path to extensions file or comma separated list of\n                            extensions, if missing all extensions are included\n      --spec {gl,egl,glx,wgl}\n                            Name of the spec\n      --reproducible        Makes the build reproducible by not fetching \n                            the latest specification from Khronos\n      --no-loader\n      --omit-khrplatform    Omits inclusion of the khrplatform.h file which is\n                            often unnecessary. Only has an effect if used\n                            together with c generators.\n      --local-files         Forces every file directly into the output directory.\n                            No src or include subdirectories are generated. Only\n                            has an effect if used together with c generators.\n\n\nTo generate a loader for C with two extensions, it could look like this:\n\n    python main.py --generator=c --extensions=GL_EXT_framebuffer_multisample,GL_EXT_texture_filter_anisotropic --out-path=GL\n\n`--out-path` and `--generator` are required!\nIf the `--extensions` option is missing, glad adds support for all extensions found in the specification.\n\nWhen integrating glad into your build system the `--reproducible` option is highly recommended,\nit prevents the build from failing in case Khronos made incompatible changes to the specification.\n\n\n## Generators ##\n\n### C/C++ ###\n\n```c\nstruct gladGLversionStruct {\n    int major;\n    int minor;\n};\n\nextern struct gladGLversionStruct GLVersion;\n\ntypedef void* (* GLADloadproc)(const char *name);\n\n/*\n * Load OpenGL using the internal loader.\n * Returns the true/1 if loading succeeded.\n *\n */\nint gladLoadGL(void);\n\n/*\n * Load OpenGL using an external loader like SDL_GL_GetProcAddress.\n *\n * Substitute GL with the API you generated\n *\n */\nint gladLoadGLLoader(GLADloadproc);\n```\n\n`glad.h` completely replaces any `gl.h` or `gl3.h` only include `glad.h`.\n\n```c\n    if(!gladLoadGL()) { exit(-1); }\n    printf("OpenGL Version %d.%d loaded", GLVersion.major, GLVersion.minor);\n    \n    if(GLAD_GL_EXT_framebuffer_multisample) {\n        /* GL_EXT_framebuffer_multisample is supported */ \n    }\n    \n    if(GLAD_GL_VERSION_3_0) {\n        /* We support at least OpenGL version 3 */\n    }\n```\n\nOn non-Windows platforms glad requires `libdl`, make sure to link with it (`-ldl` for gcc)!\n\nNote, there are two kinds of extension/version symbols, e.g. `GL_VERSION_3_0` and\n`GLAD_VERSION_3_0`. Latter is a runtime boolean (represented as integer), whereas\nthe first (not prefixed with `GLAD_`) is a compiletime-constant, indicating that this\nheader supports this version (the official headers define these symbols as well).\nThe runtime booleans are only valid *after* a succesful call to `gladLoadGL` or `gladLoadGLLoader`.\n\n\n### C/C++ Debug ###\n\nThe C-Debug generator extends the API by these two functions:\n\n```c\n// this symbol only exists if generated with the c-debug generator\n#define GLAD_DEBUG\ntypedef void (* GLADcallback)(const char *name, void *funcptr, int len_args, ...);\n\n/*\n * Sets a callback which will be called before every function call\n * to a function loaded by glad.\n *\n */\nGLAPI void glad_set_pre_callback(GLADcallback cb);\n\n/*\n * Sets a callback which will be called after every function call\n * to a function loaded by glad.\n *\n */\nGLAPI void glad_set_post_callback(GLADcallback cb);\n```\n\nTo call a function like `glGetError` in a callback prefix it with `glad_`, e.g.\nthe default post callback looks like this:\n\n```c\nvoid _post_call_callback_default(const char *name, void *funcptr, int len_args, ...) {\n    GLenum error_code;\n    error_code = glad_glGetError();\n\n    if (error_code != GL_NO_ERROR) {\n        fprintf(stderr, "ERROR %d in %s\\n", error_code, name);\n    }\n}\n```\n\nYou can also submit own implementations for every call made by overwriting\nthe function pointer with the name of the function prefixed by `glad_debug_`.\n\nE.g. you could disable the callbacks for glClear with `glad_debug_glClear = glad_glClear`, where\n`glad_glClear` is the function pointer loaded by glad.\n\nThe `glClear` macro is defined as `#define glClear glad_debug_glClear`,\n`glad_debug_glClear` is initialized with a default implementation, which calls \nthe two callbacks and the real function, in this case `glad_glClear`. \n\n\n### D ###\n\nImport `glad.gl` for OpenGL functions/extensions, import `glad.loader` to import\nthe functions needed to initialize glad and load the OpenGL functions.\n\n```d\n    enforce(gladLoadGL()); // optionally you can pass a loader to this function\n    writefln("OpenGL Version %d.%d loaded", GLVersion.major, GLVersion.minor);\n    \n    if(GL_EXT_framebuffer_multisample) { \n        /* GL_EXT_framebuffer_multisample is supported */ \n    }\n    \n    if(GL_VERSION_3_0) {\n        /* We support at least OpenGL version 3 */\n    }\n```\n\nOn non-Windows platforms glad requires `libdl`, make sure to link with it (`L-ldl` for dmd)!\n\n\n## FAQ ##\n\n### How do I build glad or how do I integrate glad?\n\nEasiest way of using glad is through the [webservice](https://glad.dav1d.de).\n\nAlternatively glad integrates with:\n\n* `CMake` \n* [Conan](https://bintray.com/bincrafters/public-conan/glad%3Abincrafters)   \n[![Download](https://api.bintray.com/packages/bincrafters/public-conan/glad%3Abincrafters/images/download.svg) ](https://bintray.com/bincrafters/public-conan/glad%3Abincrafters/_latestVersion)\n\nThanks for all the help and support maintaining those!\n\n### glad includes windows.h [#42](https://github.com/Dav1dde/glad/issues/42)\n\n**Since 0.1.30:** glad does not include `windows.h` anymore.\n\n**Before 0.1.30:**\nDefining `APIENTRY` before including `glad.h` solves this problem:\n\n```c\n#ifdef _WIN32\n    #define APIENTRY __stdcall\n#endif\n\n#include <glad/glad.h>\n```\n\nBut make sure you have the correct definition of `APIENTRY` for platforms which define `_WIN32` but don\'t use `__stdcall`\n\n### What\'s the license of glad generated code? [#101](https://github.com/Dav1dde/glad/issues/101)\n\nAny of Public Domain, WTFPL or CC0.\n\n\n## Contribute ##\n\nContributing is easy! Found a bug? Message me or make a pull request! Added a new generator backend?\nMake a pull request!\n\nSpecial thanks for all the people who contributed and are going to contribute!\nAlso to these who helped me solve a problem when I simply could not think of a solution.\n'