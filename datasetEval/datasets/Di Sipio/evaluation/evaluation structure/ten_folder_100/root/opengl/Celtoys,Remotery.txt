b'Remotery\n--------\n\n[![Build Status](https://travis-ci.org/Celtoys/Remotery.svg?branch=master)](https://travis-ci.org/Celtoys/Remotery)\n[![Build status](https://ci.appveyor.com/api/projects/status/d1o8620mws9ihbsd?svg=true)](https://ci.appveyor.com/project/Celtoys/remotery)\n\nA realtime CPU/GPU profiler hosted in a single C file with a viewer that runs in a web browser.\n\n![screenshot](screenshot.png?raw=true)\n\nSupported Platforms:\n\n* Windows\n* Windows UWP (Hololens)\n* Linux\n* OSX\n* iOS\n* Android\n* XBox One\n* FreeBSD\n\nSupported GPU Profiling APIS:\n\n* D3D 11\n* OpenGL\n* CUDA\n* Metal\n\nFeatures:\n\n* Lightweight instrumentation of multiple threads running on the CPU.\n* Web viewer that runs in Chrome, Firefox and Safari. Custom WebSockets server\n  transmits sample data to the browser on a latent thread.\n* Profiles itself and shows how it\'s performing in the viewer.\n* Console output for logging text.\n* Console input for sending commands to your game.\n\n\nCompiling\n---------\n\n* Windows (MSVC) - add lib/Remotery.c and lib/Remotery.h to your program. Set include\n  directories to add Remotery/lib path. The required library ws2_32.lib should be picked\n  up through the use of the #pragma comment(lib, "ws2_32.lib") directive in Remotery.c.\n\n* Mac OS X (XCode) - simply add lib/Remotery.c, lib/Remotery.h and lib/Remotery.mm to your program.\n\n* Linux (GCC) - add the source in lib folder. Compilation of the code requires -pthreads for\n  library linkage. For example to compile the same run: cc lib/Remotery.c sample/sample.c\n  -I lib -pthread -lm\n  \n* FreeBSD - the easiest way is to take a look at the official port \n  ([devel/remotery](https://www.freshports.org/devel/remotery/)) and modify the port\'s \n  Makefile if needed. There is also a package available via `pkg install remotery`.\n\nYou can define some extra macros to modify what features are compiled into Remotery:\n\n    Macro               Default     Description\n\n    RMT_ENABLED         1           Disable this to not include any bits of Remotery in your build\n    RMT_USE_TINYCRT     0           Used by the Celtoys TinyCRT library (not released yet)\n    RMT_USE_CUDA        0           Assuming CUDA headers/libs are setup, allow CUDA profiling\n    RMT_USE_D3D11       0           Assuming Direct3D 11 headers/libs are setup, allow D3D11 GPU profiling\n    RMT_USE_OPENGL      0           Allow OpenGL GPU profiling (dynamically links OpenGL libraries on available platforms)\n    RMT_USE_METAL       0           Allow Metal profiling of command buffers\n\n\nBasic Use\n---------\n\nSee the sample directory for further examples. A quick example:\n\n    int main()\n    {\n        // Create the main instance of Remotery.\n        // You need only do this once per program.\n        Remotery* rmt;\n        rmt_CreateGlobalInstance(&rmt);\n\n        // Explicit begin/end for C\n        {\n            rmt_BeginCPUSample(LogText, 0);\n            rmt_LogText("Time me, please!");\n            rmt_EndCPUSample();\n        }\n\n        // Scoped begin/end for C++\n        {\n            rmt_ScopedCPUSample(LogText, 0);\n            rmt_LogText("Time me, too!");\n        }\n\n        // Destroy the main instance of Remotery.\n        rmt_DestroyGlobalInstance(rmt);\n    }\n\n\nRunning the Viewer\n------------------\n\nDouble-click or launch `vis/index.html` from the browser.\n\n\nSampling CUDA GPU activity\n--------------------------\n\nRemotery allows for profiling multiple threads of CUDA execution using different asynchronous streams\nthat must all share the same context. After initialising both Remotery and CUDA you need to bind the\ntwo together using the call:\n\n    rmtCUDABind bind;\n    bind.context = m_Context;\n    bind.CtxSetCurrent = &cuCtxSetCurrent;\n    bind.CtxGetCurrent = &cuCtxGetCurrent;\n    bind.EventCreate = &cuEventCreate;\n    bind.EventDestroy = &cuEventDestroy;\n    bind.EventRecord = &cuEventRecord;\n    bind.EventQuery = &cuEventQuery;\n    bind.EventElapsedTime = &cuEventElapsedTime;\n    rmt_BindCUDA(&bind);\n\nExplicitly pointing to the CUDA interface allows Remotery to be included anywhere in your project without\nneed for you to link with the required CUDA libraries. After the bind completes you can safely sample any\nCUDA activity:\n\n    CUstream stream;\n\n    // Explicit begin/end for C\n    {\n        rmt_BeginCUDASample(UnscopedSample, stream);\n        // ... CUDA code ...\n        rmt_EndCUDASample(stream);\n    }\n\n    // Scoped begin/end for C++\n    {\n        rmt_ScopedCUDASample(ScopedSample, stream);\n        // ... CUDA code ...\n    }\n\nRemotery supports only one context for all threads and will use cuCtxGetCurrent and cuCtxSetCurrent to\nensure the current thread has the context you specify in rmtCUDABind.context.\n\n\nSampling Direct3D 11 GPU activity\n---------------------------------\n\nRemotery allows sampling of GPU activity on your main D3D11 context. After initialising Remotery, you need\nto bind it to D3D11 with a single call from the thread that owns the device context:\n\n    // Parameters are ID3D11Device* and ID3D11DeviceContext*\n    rmt_BindD3D11(d3d11_device, d3d11_context);\n\nSampling is then a simple case of:\n\n    // Explicit begin/end for C\n    {\n        rmt_BeginD3D11Sample(UnscopedSample);\n        // ... D3D code ...\n        rmt_EndD3D11Sample();\n    }\n\n    // Scoped begin/end for C++\n    {\n        rmt_ScopedD3D11Sample(ScopedSample);\n        // ... D3D code ...\n    }\n\nSupport for multiple contexts can be added pretty easily if there is demand for the feature. When you shutdown\nyour D3D11 device and context, ensure you notify Remotery before shutting down Remotery itself:\n\n    rmt_UnbindD3D11();\n\n\nSampling OpenGL GPU activity\n----------------------------\n\nRemotery allows sampling of GPU activity on your main OpenGL context. After initialising Remotery, you need\nto bind it to OpenGL with the single call:\n\n    rmt_BindOpenGL();\n\nSampling is then a simple case of:\n\n    // Explicit begin/end for C\n    {\n        rmt_BeginOpenGLSample(UnscopedSample);\n        // ... OpenGL code ...\n        rmt_EndOpenGLSample();\n    }\n\n    // Scoped begin/end for C++\n    {\n        rmt_ScopedOpenGLSample(ScopedSample);\n        // ... OpenGL code ...\n    }\n\nSupport for multiple contexts can be added pretty easily if there is demand for the feature. When you shutdown\nyour OpenGL device and context, ensure you notify Remotery before shutting down Remotery itself:\n\n    rmt_UnbindOpenGL();\n\n\nSampling Metal GPU activity\n---------------------------\n\nRemotery can sample Metal command buffers issued to the GPU from multiple threads. As the Metal API does not\nsupport finer grained profiling, samples will return only the timing of the bound command buffer, irrespective\nof how many you issue. As such, make sure you bind and sample the command buffer for each call site:\n\n    rmt_BindMetal(mtl_command_buffer);\n    rmt_ScopedMetalSample(command_buffer_name);\n\nThe C API supports begin/end also:\n\n    rmt_BindMetal(mtl_command_buffer);\n    rmt_BeginMetalSample(command_buffer_name);\n    ...\n    rmt_EndMetalSample();\n\n\nApplying Configuration Settings\n-------------------------------\n\nBefore creating your Remotery instance, you can configure its behaviour by retrieving its settings object:\n\n    rmtSettings* settings = rmt_Settings();\n\nSome important settings are:\n\n    // Redirect any Remotery allocations to your own malloc/free, with an additional context pointer\n    // that gets passed to your callbacks.\n    settings->malloc;\n    settings->free;\n    settings->mm_context;\n\n    // Specify an input handler that receives text input from the Remotery console, with an additional\n    // context pointer that gets passed to your callback.\n    // The handler will be called from the Remotery thread so synchronization with a mutex or atomics\n    // might be needed to avoid race conditions with your threads.\n    settings->input_handler;\n    settings->input_handler_context;\n'