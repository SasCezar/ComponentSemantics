b'# Diligent Engine <img src="https://github.com/DiligentGraphics/DiligentCore/blob/master/media/diligentgraphics-logo.png" height=64 align="right" valign="middle">\n**A Modern Cross-Platform Low-Level 3D Graphics Library** [![Tweet](https://img.shields.io/twitter/url/http/shields.io.svg?style=social)](https://twitter.com/intent/tweet?text=An%20easy-to-use%20cross-platform%20graphics%20library%20that%20takes%20full%20advantage%20of%20%23Direct3D12%20and%20%23VulkanAPI&url=https://github.com/DiligentGraphics/DiligentEngine)\n\n[Diligent Engine](http://diligentgraphics.com/diligent-engine/) is a lightweight cross-platform graphics\nAPI abstraction library and rendering framework. It is designed to take full advantage of Direct3D12, Vulkan\nand Metal, while supporting older platforms via Direct3D11, OpenGL and OpenGLES. Diligent Engine exposes common\nfront-end  API and uses HLSL as universal shading language on all platforms and rendering back-ends. \nPlatform-specific shader representations (GLSL, DX bytecode or SPIRV) can be used with corresponding back-ends.\nThe engine is intended to be used as graphics subsystem in a game engine or any other 3D application. \nIt is distributed under [Apache 2.0 license](License.txt) and is free to use.\n\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](License.txt)\n[![Chat on gitter](https://badges.gitter.im/gitterHQ/gitter.png)](https://gitter.im/diligent-engine)\n[![Build Status](https://ci.appveyor.com/api/projects/status/github/DiligentGraphics/DiligentEngine?svg=true)](https://ci.appveyor.com/project/DiligentGraphics/diligentengine)\n[![Build Status](https://travis-ci.org/DiligentGraphics/DiligentEngine.svg?branch=master)](https://travis-ci.org/DiligentGraphics/DiligentEngine)\n\n## Features\n\n* Cross-platform\n  * Exact same client code for all supported platforms and rendering backends\n    * No `#if defined(_WIN32)` ... `#elif defined(LINUX)` ... `#elif defined(ANDROID)` ...\n    * No `#if defined(D3D11)` ... `#elif defined(D3D12)` ... `#elif defined(OPENGL)` ...\n  * Exact same HLSL shaders (VS, PS, GS, HS, DS, CS) run on all platforms and all back-ends \n* High performance\n* Modular design\n  * Components are clearly separated logically and physically and can be used as needed\n  * Only take what you need for your project\n* Clear object-based interface\n  * No hidden global states\n* Key graphics features:\n  * [Automatic shader resource binding](http://diligentgraphics.com/2016/03/23/resource-binding-model-in-diligent-engine-2-0/) designed to leverage next-generation graphics APIs\n  * Multithreaded command buffer generation\n    * [50,000 draw calls at 300 fps](https://github.com/DiligentGraphics/DiligentEngine/tree/master/Projects/Asteroids) with D3D12/Vulkan backend\n  * Multithreaded resource creation\n  * [Automatic or explicit control over resource state transitions](http://diligentgraphics.com/2018/12/09/resource-state-management/)\n  * Descriptor and memory management\n  * Shader resource reflection\n* Extensive validation and error reporting\n* Modern c++ features to make code fast and reliable\n\n## High-level Rendering components\n\n* [Atmospheric light scattering post-effect](https://github.com/DiligentGraphics/DiligentFX/tree/master/Postprocess/EpipolarLightScattering)\n* [Tone mapping utilities](https://github.com/DiligentGraphics/DiligentFX/tree/master/Shaders/PostProcess/ToneMapping/public)\n* [Physically-based GLTF2.0 renderer](https://github.com/DiligentGraphics/DiligentFX/tree/master/GLTF_PBR_Renderer)\n* [Shadows](https://github.com/DiligentGraphics/DiligentFX/tree/master/Components#shadows)\n* [Integration with Dear Imgui](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Samples/ImguiDemo)\n  [and Nuklear](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Samples/NuklearDemo)\n\n## Supported Plaforms and Low-Level Graphics APIs\n\n| Platform                     | APIs                                        |  Build Status    |\n| ---------------------------- | ------------------------------------------- | ---------------- | \n| <img src="https://github.com/DiligentGraphics/DiligentCore/blob/master/media/windows-logo.png" width=24 valign="middle"> Win32 (Windows desktop)| Direct3D11, Direct3D12, OpenGL4.2+, Vulkan     | [![Build Status](https://ci.appveyor.com/api/projects/status/github/DiligentGraphics/DiligentEngine?svg=true)](https://ci.appveyor.com/project/DiligentGraphics/diligentengine) |\n| <img src="https://github.com/DiligentGraphics/DiligentCore/blob/master/media/uwindows-logo.png" width=24 valign="middle"> Universal Windows     | Direct3D11, Direct3D12                         | [![Build Status](https://ci.appveyor.com/api/projects/status/github/DiligentGraphics/DiligentEngine?svg=true)](https://ci.appveyor.com/project/DiligentGraphics/diligentengine) |\n| <img src="https://github.com/DiligentGraphics/DiligentCore/blob/master/media/linux-logo.png" width=24 valign="middle"> Linux                    | OpenGL4.2+, Vulkan                             | [![Build Status](https://travis-ci.org/DiligentGraphics/DiligentEngine.svg?branch=master)](https://travis-ci.org/DiligentGraphics/DiligentEngine)      |\n| <img src="https://github.com/DiligentGraphics/DiligentCore/blob/master/media/android-logo.png" width=24 valign="middle"> Android                | OpenGLES3.0+                                   |\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t    |\n| <img src="https://github.com/DiligentGraphics/DiligentCore/blob/master/media/macos-logo.png" width=24 valign="middle"> MacOS                    | OpenGL4.1, Vulkan (via [MoltenVK](https://github.com/KhronosGroup/MoltenVK)) | [![Build Status](https://travis-ci.org/DiligentGraphics/DiligentEngine.svg?branch=master)](https://travis-ci.org/DiligentGraphics/DiligentEngine) |\n| <img src="https://github.com/DiligentGraphics/DiligentCore/blob/master/media/apple-logo.png" width=24 valign="middle"> iOS                      | OpenGLES3.0, Vulkan (via [MoltenVK](https://github.com/KhronosGroup/MoltenVK)) | [![Build Status](https://travis-ci.org/DiligentGraphics/DiligentEngine.svg?branch=master)](https://travis-ci.org/DiligentGraphics/DiligentEngine)      |\n\n# Table of Contents\n\n- [Cloning the Repository](#cloning)\n  - [Repository Structure](#repository_structure)\n- [Build and Run Instructions](#build_and_run)\n  - [Win32](#build_and_run_win32)\n  - [Universal Windows Platform](#build_and_run_uwp)\n  - [Linux](#build_and_run_linux)\n  - [Android](#build_and_run_android)\n  - [MacOS](#build_and_run_macos)\n  - [iOS](#build_and_run_ios)\n  - [Integrating Diligent Engine with Existing Build System](#build_and_run_integration)\n  - [Build Options](#build_option)\n  - [Customizing Build](#build_and_run_customizing)\n- [Getting started with the API](#getting_started)\n- [Tutorials](#tutorials)\n- [Samples](#samples)\n- [Demos](#demos)\n- [High-Level Rendering Components](#high_level_components)\n- [License](#license)\n- [Contributing](#contributing)\n- [References](#references)\n- [Release History](#release_history)\n\n<a name="cloning"></a>\n# Cloning the Repository\n\nThis is the master repository that contains four [submodules](https://git-scm.com/book/en/v2/Git-Tools-Submodules). To get the repository and all submodules, use the following command:\n\n```\ngit clone --recursive https://github.com/DiligentGraphics/DiligentEngine.git\n```\n\nWhen updating existing repository, don\'t forget to update all submodules:\n\n```\ngit pull\ngit submodule update --recursive\n```\n\nIt is also a good idea to re-run CMake and perform clean rebuild after getting the latest version.\n\n<a name="repository_structure"></a>\n## Repository Structure\n\nMaster repository includes the following submodules:\n\n* [Core](https://github.com/DiligentGraphics/DiligentCore) submodule implements \n  [Direct3D11](https://github.com/DiligentGraphics/DiligentCore/tree/master/Graphics/GraphicsEngineD3D11), \n  [Direct3D12](https://github.com/DiligentGraphics/DiligentCore/tree/master/Graphics/GraphicsEngineD3D12),\n  [OpenGL/GLES](https://github.com/DiligentGraphics/DiligentCore/tree/master/Graphics/GraphicsEngineOpenGL), and\n  [Vulkan](https://github.com/DiligentGraphics/DiligentCore/tree/master/Graphics/GraphicsEngineVulkan) back-ends.\n  The module is self-contained and can be built by its own.\n* [Tools](https://github.com/DiligentGraphics/DiligentTools) submodule contains \n  [texture loading library](https://github.com/DiligentGraphics/DiligentTools/tree/master/TextureLoader),\n  [asset loading library](https://github.com/DiligentGraphics/DiligentTools/blob/master/AssetLoader),\n  [dear imgui implementation](https://github.com/DiligentGraphics/DiligentTools/blob/master/Imgui),\n  [native application implementation](https://github.com/DiligentGraphics/DiligentTools/blob/master/NativeApp), and \n  [Render Script](https://github.com/DiligentGraphics/DiligentTools/tree/master/RenderScript), a Lua-based run-time \n  graphics resource managing system. Tools module depends on Core module.\n* [DiligentFX](https://github.com/DiligentGraphics/DiligentFX) is a high-level rendering framework that implements\n  various rendering components. The module depends on Core and Tools modules.\n* [Samples](https://github.com/DiligentGraphics/DiligentSamples) submodule contains tutorials and sample applications \n  intended to demonstrate the usage of the Diligent Engine API. The module depends on Core, Tools and DiligentFX modules.\n\n<a name="build_and_run"></a>\n# Build and Run Instructions\n\nDiligent Engine uses [CMake](https://cmake.org/) as a cross-platform build tool. \nTo start using cmake, download the [latest release](https://cmake.org/download/) (3.15 or later is required).\nAnother build prerequisite is [Python interpreter](https://www.python.org/downloads/) (3.0 or later is required).\nIf after following the instuctions below you have build/run issues, please take a look at [troubleshooting](Troubleshooting.md).\n\n<a name="build_and_run_win32"></a>\n## Win32\n\nTo generate build files for Windows desktop platform, use either CMake GUI or command line tool. For example, to generate \n[Visual Studio 2017](https://www.visualstudio.com/vs/community) 64-bit solution and project files in *build/Win64* folder, \nnavigate to the engine\'s root folder and run the following command:\n\n```\ncmake -S . -B ./build/Win64 -G "Visual Studio 15 2017" -A x64\n```\n\nYou can generate Win32 solution that targets Win8.1 SDK using the following command:\n\n```\ncmake -D CMAKE_SYSTEM_VERSION=8.1 -S . -B ./build/Win64_8.1 -G "Visual Studio 15 2017" -A x64\n```\n\nIf you use MinGW, you can generate the make files using the command below (please be aware of some [known build issues](https://github.com/DiligentGraphics/DiligentEngine/issues/31)):\n\n```\ncmake -S . -B ./build/MinGW -G "MinGW Makefiles"\n```\n\n**WARNING!** In current implementation, full path to cmake build folder **must not contain white spaces**.\n\nTo enable Vulkan validation layers, you will need to download [Vulkan SDK](https://www.lunarg.com/vulkan-sdk/) and add environemt\nvariable `VK_LAYER_PATH` that contains path to the *Bin* directory in VulkanSDK installation folder.\n\nMake sure that Visual C++ ATL Support is installed via Visual Studio Installer.\n\nOpen *DiligentEngine.sln* file in *build/Win64* folder, select configuration and build the engine. Set the desired project\nas startup project (by default, GLTF Viewer will be selected) and run it. \n\nBy default, sample and tutorial applications will show rendering backend selection dialog box. Use the following command line options to force\nD3D11, D3D12, OpenGL, or Vulkan mode: **-mode D3D11**, **-mode D3D12**, **-mode GL**, or **-mode Vk**. If you want to run an application\noutside of Visual Studio environment, the application\'s assets folder must be set as working directory. (For Visual Studio, this \nis automatically configured by CMake). Alternatively, you can navigate to the build target or install folder and run the executable from there.\n\n\n<a name="build_and_run_uwp"></a>\n## Universal Windows Platform\n\nTo generate build files for Universal Windows platform, you need to define the following two cmake variables:\n\n* `CMAKE_SYSTEM_NAME=WindowsStore`\n* `CMAKE_SYSTEM_VERSION=< Windows SDK Version >`\n\nFor example, to generate Visual Studio 2017 64-bit solution and project files in *build/UWP64* folder, run the following command\nfrom the engine\'s root folder:\n\n```\ncmake -D CMAKE_SYSTEM_NAME=WindowsStore -D CMAKE_SYSTEM_VERSION=10.0 -S . -B ./build/UWP64 -G "Visual Studio 15 2017" -A x64\n```\n\nYou can target specific SDK version by refining CMAKE_SYSTEM_VERSION, for instance:\n\n```\ncmake -D CMAKE_SYSTEM_NAME=WindowsStore -D CMAKE_SYSTEM_VERSION=10.0.16299.0 -S . -B ./build/UWP64 -G "Visual Studio 15 2017" -A x64\n```\n\nSet the desired project as startup project (by default, GLTF Viewer will be selected) and run it. \n\nBy default, appplications will run in D3D12 mode. You can select D3D11 or D3D12 using the following command line options:\n**-mode D3D11**, **-mode D3D12**.\n\nNote: it is possible to generate solution that targets Windows 8.1 by defining CMAKE_SYSTEM_VERSION=8.1 cmake variable, but it will fail\nto build as it will use Visual Studio 2013 (v120) toolset that lacks proper c++11 support.\n\n\n<a name="build_and_run_linux"></a>\n## Linux\n\nYour Linux environment needs to be set up for c++ development. If it already is, make sure your c++ tools are up to date\nas Diligent Engine uses modern c++ features (gcc/g++ 7 or later is recommended). You may need to install the following packages:\n\n1. gcc, make and other essential c/c++ tools:\n\n```\nsudo apt-get update\nsudo apt-get upgrade\nsudo apt-get install build-essential\n```\n\n2. cmake\n\n```\nsudo apt-get install cmake\n```\n\n3. Other required packages:\n\n```\nsudo apt-get install libx11-dev\nsudo apt-get install mesa-common-dev\nsudo apt-get install mesa-utils\nsudo apt-get install libgl-dev\n```\n\nTo configure Vulkan you will also need to:\n\n* Install latest Vulkan drivers and libraries for your GPU\n* Install [Vulkan SDK](https://www.lunarg.com/vulkan-sdk/)\n  * To make sure that you system is properly configured you can try to build and run samples from the SDK\n\nTo generate make files for debug configuration, run the following CMake command from the engine\'s root folder:\n\n```\ncmake -S . -B ./build/Linux64 -G "Unix Makefiles" -DCMAKE_BUILD_TYPE="Debug"\n```\n\nTo build the engine, run the following command:\n\n```\ncmake --build ./build/Linux64\n```\n\nThe engine\'s root folder contains [Visual Studio Code](https://code.visualstudio.com/) settings files that configure\nthe IDE to build the engine. You can run applications directly from the IDE. To run an application from the command line,\nthe app\'s assets folder must be current directory.\n\n\n<a name="build_and_run_android"></a>\n## Android\n\nPlease make sure that your machine is set up for Android development. Download \n[Android Studio](https://developer.android.com/studio/index.html),\n[install and configure the NDK and CMake](https://developer.android.com/studio/projects/install-ndk)\nand other required tools. If you are not using CMake version bundled with Android Studio, make sure\nyour build files are [properly configured](https://developer.android.com/studio/projects/add-native-code.html#use_a_custom_cmake_version).\nTo verify that your environment is properly set up, try building the\n[teapots sample](https://github.com/googlesamples/android-ndk/tree/master/teapots).\n\nOpen *DiligentSamples/Android* or *UnityPlugin/Android* folders with Android Studio to build and run\nthe engine samples and Unity emulator on Android.\n\n\n<a name="build_and_run_macos"></a>\n## MacOS\n\nAfter you clone the repo, run the following command from the engine\'s root folder to generate Xcode project\n(you need to have [CMake](https://cmake.org/) installed on the system):\n\n```\ncmake -S . -B ./build/MacOS -G "Xcode"\n```\n\nThe project will be located in `build/MacOS` folder.\n\n### Configuring Vulkan Build Environment\n\nBy default there is no Vulkan implementation on MacOS. Diligent Engine links against Vulkan loader\nand can use a Vulkan Portability implementation such as [MoltenVK](https://github.com/KhronosGroup/MoltenVK)\nor [gfx-portability](https://github.com/gfx-rs/portability). Install [VulkanSDK](https://vulkan.lunarg.com/sdk/home#mac)\nand make sure that your system is properly configured as described\n[here](https://vulkan.lunarg.com/doc/view/latest/mac/getting_started.html#user-content-command-line).\nIn particular, you may need to define the following environment variables (assuming that Vulkan SDK is installed at\n`~/LunarG/vulkansdk-macos` and you want to use MoltenVK):\n\n```\nexport VULKAN_SDK=~/LunarG/vulkansdk-macos/macOS\nexport PATH=$VULKAN_SDK/bin:$PATH\nexport DYLD_LIBRARY_PATH=$VULKAN_SDK/lib:$DYLD_LIBRARY_PATH\nexport VK_ICD_FILENAMES=$VULKAN_SDK/etc/vulkan/icd.d/MoltenVK_icd.json\nexport VK_LAYER_PATH=$VULKAN_SDK/etc/vulkan/explicit_layer.d\n```\n\nNote that environment variables set in the shell are not seen by the applications launched from Launchpad\nor other desktop GUI. Thus to make sure that an application finds Vulkan libraries, it needs to be started from \nthe command line. Due to the same reason, the xcode project file should also be opened from the shell using \n`open` command. With Xcode versions 7 and later, this behavior may need to be enabled first using the\nfollowing command:\n\n```\ndefaults write com.apple.dt.Xcode UseSanitizedBuildSystemEnvironment -bool NO\n```\n\nPlease refer to [this page](https://vulkan.lunarg.com/doc/sdk/latest/mac/getting_started.html) for more details.\n\n\n<a name="build_and_run_ios"></a>\n## iOS\n\nRun the command below from the engine\'s root folder to generate Xcode project configured for iOS build\n(you need to have [CMake](https://cmake.org/) installed on your Mac):\n\n```cmake\ncmake -DCMAKE_TOOLCHAIN_FILE=DiligentCore/ios.toolchain.cmake -DIOS_PLATFORM=OS64 -H. -Bbuild/IOS -GXcode\n```\n\nOpen Xcode project file in `build/IOS` folder and build the engine. To run the applications on an iOS device,\nyou will need to set appropriate development team in the project settings.\n\n### Configuring Vulkan Build Environment\n\nTo enable Vulkan on iOS, download and install [VulkanSDK](https://vulkan.lunarg.com/sdk/home#mac). There is no Vulkan loader\non iOS, and Diligent Engine links directly with MoltenVK dynamic library that implements Vulkan on Metal.\nNote that iOS simulator does not currently support Metal, and MoltenVK libraries are only available for arm64 architecture.\nTo enable Vulkan in Diligent Engine on iOS, specify the path to Vulkan SDK when running CMake, for example (assuming\nthat Vulkan SDK is installed at `/LunarG/vulkansdk-macos`):\n\n```cmake\ncmake -DCMAKE_TOOLCHAIN_FILE=DiligentCore/ios.toolchain.cmake -DIOS_PLATFORM=OS64 -DIOS_ARCH=arm64 -DVULKAN_SDK=/LunarG/vulkansdk-macos -H. -Bbuild/IOS -GXcode\n```\n\nXcode project [cannot be completely configured by CMake](https://github.com/DiligentGraphics/DiligentSamples/issues/9).\nFor every executable target, the following manual steps have to be performed:\n\n* Open *Build Phases* tab and add a new *Copy Files* phase.\n* Select  `Executables` in the `Destination` list.\n* Drag `MoltenVK/iOS/dynamic/libMoltenVK.dylib` dynamic library from Vulkan SDK into the copy files list.\n* Make sure that *Code Sign On Copy* checkbox is marked.\n\nPlease refer to [MoltenVK user guide](https://github.com/KhronosGroup/MoltenVK/blob/master/Docs/MoltenVK_Runtime_UserGuide.md#install)\nfor more details. \n\n<a name="build_and_run_integration"></a>\n## Integrating Diligent Engine with Existing Build System\n\nDiligent has modular structure, so for your project you can only use these \nsubmodules that implement the required functionality.\nThe diagram below shows the dependencies between modules.\n\n```\n  Core\n   |\n   +------>Tools----------.\n   |        |             |\n   |        V             |\n   +------->FX---------.  |\n   |                   |  |\n   |                   V  V\n   \'----------------->Samples\n```\n\n### Your Project Uses Cmake\n\nIf your project uses CMake, adding Diligent Engine requires just few lines of code. \nSuppose that the directory structure looks like this:\n\n```\n|\n+-DiligentCore\n+-HelloDiligent.cpp\n```\n\nThen the following steps need to be done:\n* Call `add_subdirectory(DiligentCore)`\n* Add *DiligentCore* to the list of include directories\n* Add dependencies on the targets implementing required rendering backends\n\nBelow is an example of a CMake file:\n\n```cmake\ncmake_minimum_required (VERSION 3.6)\n\nproject(HelloDiligent CXX)\n\nadd_subdirectory(DiligentCore)\n\nadd_executable(HelloDiligent WIN32 HelloDiligent.cpp)\ntarget_compile_options(HelloDiligent PRIVATE -DUNICODE -DENGINE_DLL)\ntarget_include_directories(HelloDiligent PRIVATE "DiligentCore")\n\ntarget_link_libraries(HelloDiligent\nPRIVATE\n    Diligent-GraphicsEngineD3D11-shared\n    Diligent-GraphicsEngineOpenGL-shared\n    Diligent-GraphicsEngineD3D12-shared\n    Diligent-GraphicsEngineVk-shared\n)\ncopy_required_dlls(HelloDiligent)\n```\n\n`copy_required_dlls()` is a convenience function that copies shared libraries next to\nthe executable so that the system can find and load them. Alternatively, you can link against \nstatic (as well as shared) versions of libraries using `target_link_libraries()` command. In this case \nthere is no need to explicitly add *DiligentCore* to the list of include directories as the targets export\nall required include paths.\nPlease also take a look at getting started tutorials for \n[Windows](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Tutorials/Tutorial00_HelloWin32) and \n[Linux](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Tutorials/Tutorial00_HelloLinux).\n\n### Your Project Does Not Use Cmake\n\nIf your project doesn\'t use CMake, it is recommended to build libraries with CMake and add them to your build system.\nFor Windows platforms, you can download the latest build artifacts from [appveyor](https://ci.appveyor.com/project/DiligentGraphics/diligentcore).\n\nGlobal CMake installation directory is controlled by\n[CMAKE_INTALL_PREFIX](https://cmake.org/cmake/help/latest/variable/CMAKE_INSTALL_PREFIX.html) variable. \nNote that it defaults to `/usr/local` on UNIX and `c:/Program Files/${PROJECT_NAME}` on Windows, which may not\nbe what you want. Use `-D CMAKE_INSTALL_PREFIX=install` to use local `install` folder instead:\n\n```\ncmake -S . -B ./build/Win64 -D CMAKE_INSTALL_PREFIX=install -G "Visual Studio 15 2017" -A x64\n```\n\nTo install libraries and header files, run the following CMake command from the build folder:\n\n```cmake\ncmake --build . --target install\n```\n\nDiligentCore installation directory will contain everything required to integrate the engine:\n\n* *headers* subdirectory will contain all required header files. Add this directory to your include search directories.\n* *lib* subdirectory will contain static libraries.\n* *bin* subdirectory will contain dynamic libraries.\n\nAn easier way is to link with dynamic libraries. When linking statically, you will need to list DiligentCore as well \nas all third-party libraries used by the engine. Besides that, you will also need to specify platform-specific system libraries. \nFor example, for Windows platform, the list of libraries your project will need to link against may look like this:\n\n```\nDiligentCore.lib glslang.lib HLSL.lib OGLCompiler.lib OSDependent.lib spirv-cross-core.lib SPIRV.lib SPIRV-Tools-opt.lib SPIRV-Tools.lib glew-static.lib vulkan-1.lib dxgi.lib d3d11.lib d3d12.lib d3dcompiler.lib opengl32.lib\n```\n\nVulkan libraries can be found in [DiligentCore/ThirdParty/vulkan/libs](https://github.com/DiligentGraphics/DiligentCore/tree/master/ThirdParty/vulkan/libs) directory.\n\nDiligent Engine headers require one of the following platform macros to be defined as `1`:\n`PLATFORM_WIN32`, `PLATFORM_UNIVERSAL_WINDOWS`, `PLATFORM_ANDROID`, `PLATFORM_LINUX`, `PLATFORM_MACOS`, `PLATFORM_IOS`.\n\nYou can control which components of the engine you want to install using the following CMake options:\n`DILIGENT_INSTALL_CORE`, `DILIGENT_INSTALL_FX`, `DILIGENT_INSTALL_SAMPLES`, and `DILIGENT_INSTALL_TOOLS`.\n\nAnother way to intergrate the engine is to generate build files (such as Visual Studio projects) and add them to your\nbuild system. Build customization described below can help tweak the settings for your specific needs.\n\n\n<a name="build_option"></a>\n## Build Options\n\nBy default, all back-ends available on current platform are built. To disable specific back-ends,\nuse the following options: `DILIGENT_NO_DIRECT3D11`, `DILIGENT_NO_DIRECT3D12`, `DILIGENT_NO_OPENGL`,\n`DILIGENT_NO_VULKAN`, `DILIGENT_NO_METAL`.\nThe options can be set through cmake UI or from the command line as in the example below:\n\n```\ncmake -D DILIGENT_NO_DIRECT3D11=TRUE -S . -B ./build/Win64 -G "Visual Studio 15 2017" -A x64\n```\n\nAdditionally, individual engine components can be enabled or disabled using the following options:\n`DILIGENT_BUILD_FX`, `DILIGENT_BUILD_SAMPLES`, `DILIGENT_BUILD_DEMOS`, `DILIGENT_BUILD_UNITY_PLUGIN`,\n`DILIGENT_BUILD_RENDER_SCRIPT`. If you only want to build `SampleBase` project, you can use \n`DILIGENT_BUILD_SAMPLE_BASE_ONLY` option.\n\nBy default Vulkan back-end is linked with glslang that enables compiling HLSL and GLSL shaders to SPIRV at run time.\nIf run-time compilation is not required, glslang can be disabled with `DILIGENT_NO_GLSLANG` cmake option. This will significantly \nreduce the size of the Vulkan back-end binary.\n\n\n<a name="build_and_run_customizing"></a>\n## Customizing Build\n\nDiligent Engine allows clients to customize build settings by providing configuration script file that defines two optional \n[cmake functions](https://cmake.org/cmake/help/latest/command/function.html):\n\n* `custom_configure_build()` - defines global build properties such as build configurations, c/c++ compile flags, link flags etc.\n* `custom_configure_target()` - defines custom settings for every target in the build.\n\nThe path to the configuration script should be provided through `BUILD_CONFIGURATION_FILE` variable when running \ncmake and must be relative to the cmake root folder, for example:\n\n```\ncmake -D BUILD_CONFIGURATION_FILE=BuildConfig.cmake -S . -B ./build/Win64 -G "Visual Studio 15 2017" -A x64\n```\n\n### Customizing global build settings with custom_configure_build() function\n\nIf defined, `custom_configure_build()` function is called before any build target is added. By default,\ncmake defines the following four configurations: Debug, Release, RelWithDebInfo, MinSizeRel. If you want, \nyou can define your own build configurations by setting `CMAKE_CONFIGURATION_TYPES` variable. For instance,\nif you want to have only two configuration: Debug and ReleaseMT, add the following line to the `custom_configure_build()`\nfunction:\n\n```cmake\nset(CMAKE_CONFIGURATION_TYPES Debug ReleaseMT CACHE STRING "Configuration types: Debug, ReleaseMT" FORCE)\n```\n\nThe build system needs to know the list of debug and release (optimized) configurations, so the following\ntwo variables must also be set when `CMAKE_CONFIGURATION_TYPES` variable is defined:\n\n```cmake\nset(DEBUG_CONFIGURATIONS DEBUG CACHE INTERNAL "" FORCE)\nset(RELEASE_CONFIGURATIONS RELEASEMT CACHE INTERNAL "" FORCE)\n```\n\nNote that due to cmake specifics, configuration names listed in `DEBUG_CONFIGURATIONS` and `RELEASE_CONFIGURATIONS`\n**must be capitalized**.\n\nIf you define any configuration other than four standard cmake ones, you also need to set the following variables, for every\nnew configuration:\n\n* `CMAKE_C_FLAGS_<Config>` - c compile flags\n* `CMAKE_CXX_FLAGS_<Config>` - c++ compile flags\n* `CMAKE_EXE_LINKER_FLAGS_<Config>` - executable link flags\n* `CMAKE_SHARED_LINKER_FLAGS_<Config>` - shared library link flags\n\nFor instance:\n\n```cmake\nset(CMAKE_C_FLAGS_RELEASEMT "/MT" CACHE INTERNAL "" FORCE)\nset(CMAKE_CXX_FLAGS_RELEASEMT "/MT" CACHE INTERNAL "" FORCE)\nset(CMAKE_EXE_LINKER_FLAGS_RELEASEMT "/OPT:REF" CACHE INTERNAL "" FORCE)\nset(CMAKE_SHARED_LINKER_FLAGS_RELEASEMT "/OPT:REF" CACHE INTERNAL "" FORCE)\n```\n\nBelow is an example of custom_configure_build() function:\n\n```cmake\nfunction(custom_configure_build)\n    if(CMAKE_CONFIGURATION_TYPES)\n        # Debug configurations\n        set(DEBUG_CONFIGURATIONS DEBUG CACHE INTERNAL "" FORCE)\n        # Release (optimized) configurations\n        set(RELEASE_CONFIGURATIONS RELEASEMT CACHE INTERNAL "" FORCE)\n        # CMAKE_CONFIGURATION_TYPES variable defines build configurations generated by cmake\n        set(CMAKE_CONFIGURATION_TYPES Debug ReleaseMT CACHE STRING "Configuration types: Debug, ReleaseMT" FORCE)\n\n        set(CMAKE_CXX_FLAGS_RELEASEMT "/MT" CACHE INTERNAL "" FORCE)\n        set(CMAKE_C_FLAGS_RELEASEMT "/MT" CACHE INTERNAL "" FORCE)\n        set(CMAKE_EXE_LINKER_FLAGS_RELEASEMT "/OPT:REF" CACHE INTERNAL "" FORCE)\n        set(CMAKE_SHARED_LINKER_FLAGS_RELEASEMT "/OPT:REF" CACHE INTERNAL "" FORCE)\n    endif()\nendfunction()\n```\n\n\n### Customizing individual target build settings with custom_configure_target() function\n\nIf defined, `custom_configure_target()` is called for every target created by the build system and\nallows configuring target-specific properties.\n\nBy default, the build system sets some target properties. If `custom_configure_target()` sets all required properties,\nit can tell the build system that no further processing is required by setting `TARGET_CONFIGURATION_COMPLETE`\n[parent scope](https://cmake.org/cmake/help/latest/command/set.html#set-normal-variable) variable to `TRUE`:\n\n```cmake\nset(TARGET_CONFIGURATION_COMPLETE TRUE PARENT_SCOPE)\n```\n\nThe following is an example of `custom_configure_target()` function:\n\n```cmake\nfunction(custom_configure_target TARGET)\n    set_target_properties(${TARGET} PROPERTIES\n        STATIC_LIBRARY_FLAGS_RELEASEMT /LTCG\n    )\n    set(TARGET_CONFIGURATION_COMPLETE TRUE PARENT_SCOPE)   \nendfunction()\n```\n\n<a name="getting_started"></a>\n# Getting started with the API\n\nPlease refer to [this page](https://github.com/DiligentGraphics/DiligentCore#api-basics). Also, tutorials and samples listed below is a good place to start.\n\n\n<a name="tutorials"></a>\n# [Tutorials](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Tutorials)\n\n| Tutorial   | Screenshot  | Description          |\n|------------|-------------|----------------------|\n| [01 - Hello Triangle](https://github.com/DiligentGraphics/DiligentSamples/blob/master/Tutorials/Tutorial01_HelloTriangle) | ![](https://github.com/DiligentGraphics/DiligentSamples/blob/master/Tutorials/Tutorial01_HelloTriangle/Screenshot.png) | This tutorial shows how to render simple triangle using Diligent Engine API. |\n| [02 - Cube](https://github.com/DiligentGraphics/DiligentSamples/blob/master/Tutorials/Tutorial02_Cube) | ![](https://github.com/DiligentGraphics/DiligentSamples/blob/master/Tutorials/Tutorial02_Cube/Animation_Small.gif) | This tutorial demonstrates how to render an actual 3D object, a cube. It shows how to load shaders from files, create and use vertex, index and uniform buffers. |\n| [03 - Texturing](https://github.com/DiligentGraphics/DiligentSamples/blob/master/Tutorials/Tutorial03_Texturing) | ![](https://github.com/DiligentGraphics/DiligentSamples/blob/master/Tutorials/Tutorial03_Texturing/Animation_Small.gif) | This tutorial demonstrates how to apply a texture to a 3D object. It shows how to load a texture from file, create shader resource binding object and how to sample a texture in the shader. |\n| [04 - Instancing](https://github.com/DiligentGraphics/DiligentSamples/blob/master/Tutorials/Tutorial04_Instancing) | ![](https://github.com/DiligentGraphics/DiligentSamples/blob/master/Tutorials/Tutorial04_Instancing/Animation_Small.gif) | This tutorial demonstrates how to use instancing to render multiple copies of one object using unique transformation matrix for every copy. |\n| [05 - Texture Array](https://github.com/DiligentGraphics/DiligentSamples/blob/master/Tutorials/Tutorial05_TextureArray) | ![](https://github.com/DiligentGraphics/DiligentSamples/blob/master/Tutorials/Tutorial05_TextureArray/Animation_Small.gif) | This tutorial demonstrates how to combine instancing with texture arrays to use unique texture for every instance. |\n| [06 - Multithreading](https://github.com/DiligentGraphics/DiligentSamples/blob/master/Tutorials/Tutorial06_Multithreading) | ![](https://github.com/DiligentGraphics/DiligentSamples/blob/master/Tutorials/Tutorial06_Multithreading/Animation_Small.gif) | This tutorial shows how to generate command lists in parallel from multiple threads. |\n| [07 - Geometry Shader](https://github.com/DiligentGraphics/DiligentSamples/blob/master/Tutorials/Tutorial07_GeometryShader) | ![](https://github.com/DiligentGraphics/DiligentSamples/blob/master/Tutorials/Tutorial07_GeometryShader/Animation_Small.gif) | This tutorial shows how to use geometry shader to render smooth wireframe. |\n| [08 - Tessellation](https://github.com/DiligentGraphics/DiligentSamples/blob/master/Tutorials/Tutorial08_Tessellation) | ![](https://github.com/DiligentGraphics/DiligentSamples/blob/master/Tutorials/Tutorial08_Tessellation/Animation_Small.gif) | This tutorial shows how to use hardware tessellation to implement simple adaptive terrain rendering algorithm. |\n| [09 - Quads](https://github.com/DiligentGraphics/DiligentSamples/blob/master/Tutorials/Tutorial09_Quads) | ![](https://github.com/DiligentGraphics/DiligentSamples/blob/master/Tutorials/Tutorial09_Quads/Animation_Small.gif) | This tutorial shows how to render multiple 2D quads, frequently swithcing textures and blend modes. |\n| [10 - Data Streaming](https://github.com/DiligentGraphics/DiligentSamples/blob/master/Tutorials/Tutorial10_DataStreaming) | ![](https://github.com/DiligentGraphics/DiligentSamples/blob/master/Tutorials/Tutorial10_DataStreaming/Animation_Small.gif) | This tutorial shows dynamic buffer mapping strategy using `MAP_FLAG_DISCARD` and `MAP_FLAG_DO_NOT_SYNCHRONIZE` flags to efficiently stream varying amounts of data to GPU. |\n| [11 - Resource Updates](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Tutorials/Tutorial11_ResourceUpdates) | ![](https://github.com/DiligentGraphics/DiligentSamples/blob/master/Tutorials/Tutorial11_ResourceUpdates/Animation_Small.gif) | This tutorial demonstrates different ways to update buffers and textures in Diligent Engine and explains important internal details and performance implications related to each method. |\n| [12 - Render Target](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Tutorials/Tutorial12_RenderTarget) | ![](https://github.com/DiligentGraphics/DiligentSamples/blob/master/Tutorials/Tutorial12_RenderTarget/Animation_Small.gif) | This tutorial demonstrates how to render a 3d cube into an offscreen render target and do a simple post-processing effect. |\n| [13 - Shadow Map](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Tutorials/Tutorial13_ShadowMap) | ![](https://github.com/DiligentGraphics/DiligentSamples/blob/master/Tutorials/Tutorial13_ShadowMap/Animation_Small.gif) | This tutorial demonstrates how to render basic shadows using a shadow map. |\n| [14 - Compute Shader](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Tutorials/Tutorial14_ComputeShader) | ![](https://github.com/DiligentGraphics/DiligentSamples/blob/master/Tutorials/Tutorial14_ComputeShader/Animation_Small.gif) | This tutorial shows how to implement a simple particle simulation system using compute shaders. |\n| [15 - Multiple Windows](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Tutorials/Tutorial15_MultipleWindows) | ![](https://github.com/DiligentGraphics/DiligentSamples/blob/master/Tutorials/Tutorial15_MultipleWindows/Screenshot.png) | This tutorial demonstrates how to use Diligent Engine to render to multiple windows. |\n| [16 - Bindless Resources](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Tutorials/Tutorial16_BindlessResources) | ![](https://github.com/DiligentGraphics/DiligentSamples/blob/master/Tutorials/Tutorial16_BindlessResources/Animation_Small.gif) | This tutorial shows how to implement bindless resources, a technique that leverages dynamic shader resource indexing feature enabled by the next-gen APIs to significantly improve rendering performance. |\n| [17 - MSAA](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Tutorials/Tutorial17_MSAA) | ![](https://github.com/DiligentGraphics/DiligentSamples/blob/master/Tutorials/Tutorial17_MSAA/Animation_Small.gif) | This tutorial demonstrates how to use multisample anti-aliasing (MSAA) to make geometrical edges look smoother and more temporarily stable. |\n\n<a name="samples"></a>\n# [Samples](https://github.com/DiligentGraphics/DiligentSamples)\n\n| Sample     | Screenshot  | Description          |\n|------------|-------------|----------------------|\n| [Atmosphere Sample](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Samples/Atmosphere) | ![](https://github.com/DiligentGraphics/DiligentSamples/blob/master/Samples/Atmosphere/Animation_Small.gif) | This sample demonstrates how to integrate [Epipolar Light Scattering](https://github.com/DiligentGraphics/DiligentFX/tree/master/Postprocess/EpipolarLightScattering) post-processing effect into an application to render physically-based atmosphere. |\n| [GLTF Viewer](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Samples/GLTFViewer) | <img src="https://github.com/DiligentGraphics/DiligentFX/blob/master/GLTF_PBR_Renderer/screenshots/flight_helmet.jpg" width=240> | This sample demonstrates how to use the [Asset Loader](https://github.com/DiligentGraphics/DiligentTools/tree/master/AssetLoader) and [GLTF PBR Renderer](https://github.com/DiligentGraphics/DiligentFX/tree/master/GLTF_PBR_Renderer) to load and render GLTF models. |\n| [Shadows](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Samples/Shadows) | <img src="https://github.com/DiligentGraphics/DiligentSamples/blob/master/Samples/Shadows/Screenshot.jpg" width=240> | This sample demonstrates how to use the [Shadowing component](https://github.com/DiligentGraphics/DiligentFX/tree/master/Components#shadows) to render high-quality shadows. |\n| [Dear ImGui Demo](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Samples/ImguiDemo) | <img src="https://github.com/DiligentGraphics/DiligentSamples/blob/master/Samples/ImguiDemo/Screenshot.png" width=240> | This sample demonstrates the integration of the engine with [dear imgui](https://github.com/ocornut/imgui) UI library. |\n| [Nuklear Demo](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Samples/NuklearDemo) | <img src="https://github.com/DiligentGraphics/DiligentSamples/blob/master/Samples/NuklearDemo/Screenshot.png" width=240> | This sample demonstrates the integration of the engine with [nuklear](https://github.com/vurtun/nuklear) UI library. |\n\n<a name="demos"></a>\n# Demos\n\n| Project    | Screenshot  | Description          |\n|------------|-------------|----------------------|\n| [Asteroids Performance Benchmark](https://github.com/DiligentGraphics/DiligentEngine/tree/master/Projects/Asteroids) | ![](Projects/Asteroids/Screenshot.png) | This demo is designed to be a performance benchmark and is based on [this demo](https://software.intel.com/en-us/articles/asteroids-and-directx-12-performance-and-power-savings) developed by Intel. It renders 50,000 unique textured asteroids. Every asteroid is a combination of one of 1000 unique meshes and one of 10 unique textures. The sample uses original D3D11 and D3D12 native implementations, and adds implementation using Diligent Engine API to allow comparing performance of different rendering modes. |\n| [Unity Integration Demo](https://github.com/DiligentGraphics/DiligentEngine/tree/master/unityplugin) | ![](unityplugin/GhostCubePlugin/Screenshot.png) | This project demonstrates integration of Diligent Engine with Unity |\n\n<a name="high_level_components"></a>\n# High-Level Rendering Components\n\nHigh-level rendering functionality is implemented by [DiligentFX module](https://github.com/DiligentGraphics/DiligentFX).\nThe following components are now available:\n\n* [Epipolar light scattering post-effect](https://github.com/DiligentGraphics/DiligentFX/tree/master/Postprocess/EpipolarLightScattering)\n<img src="https://github.com/DiligentGraphics/DiligentFX/blob/master/Postprocess/EpipolarLightScattering/media/LightScattering.png" width=240>\n\n* [Tone mapping shader utilities](https://github.com/DiligentGraphics/DiligentFX/tree/master/Shaders/PostProcess/ToneMapping/public)\n\n<a name="gltf_loader_and_renderer"></a>\n* [GLTF2.0 Loader](https://github.com/DiligentGraphics/DiligentTools/tree/master/AssetLoader)\n  and [Physically-based renderer with image-based lighting](https://github.com/DiligentGraphics/DiligentFX/tree/master/GLTF_PBR_Renderer).\n  \n|||\n|-----------------|-----------------|\n| ![](https://github.com/DiligentGraphics/DiligentFX/blob/master/GLTF_PBR_Renderer/screenshots/damaged_helmet.jpg) | ![](https://github.com/DiligentGraphics/DiligentFX/blob/master/GLTF_PBR_Renderer/screenshots/flight_helmet.jpg) |\n| ![](https://github.com/DiligentGraphics/DiligentFX/blob/master/GLTF_PBR_Renderer/screenshots/mr_spheres.jpg)     | ![](https://github.com/DiligentGraphics/DiligentSamples/blob/master/Samples/GLTFViewer/screenshots/cesium_man_large.gif)  |\n\n\n* [Shadows](https://github.com/DiligentGraphics/DiligentFX/tree/master/Components#shadows)\n<img src="https://github.com/DiligentGraphics/DiligentFX/blob/master/Components/media/Powerplant-Shadows.jpg" width=240>\n\n\n<a name="products"></a>\n# Products using Diligent Engine\n\nWe would appreciate it if you could send us a link in case your product uses Diligent Engine.\n\n* Your product here (please submit a [PR](https://github.com/DiligentGraphics/DiligentEngine/pulls))!\n\n\n<a name="license"></a>\n# License\n\nSee [Apache 2.0 license](License.txt).\n\nThis project has some third-party dependencies, each of which may have independent licensing:\n\n* Core module:\n  * [SPIRV-Cross](https://github.com/KhronosGroup/SPIRV-Cross): SPIRV parsing and cross-compilation tools.\n  * [SPIRV-Headers](https://github.com/KhronosGroup/SPIRV-Headers): SPIRV header files.\n  * [SPIRV-Tools](https://github.com/KhronosGroup/SPIRV-Tools): SPIRV optimization and validation tools.\n  * [glslang](https://github.com/KhronosGroup/glslang): Khronos reference compiler and validator for GLSL, ESSL, and HLSL.\n  * [glew](http://glew.sourceforge.net/): OpenGL Extension Wrangler Library.\n* Tools module:\n  * [libjpeg](http://libjpeg.sourceforge.net/): C library for reading and writing JPEG image files.\n  * [libtiff](http://www.libtiff.org/): TIFF Library and Utilities.\n  * [libpng](http://www.libpng.org/pub/png/libpng.html): Official PNG reference library.\n  * [zlib](https://zlib.net/): A compression library.\n  * [lua](https://www.lua.org/): Lua programming language run time.\n  * [tinygltf](https://github.com/syoyo/tinygltf): A header only C++11 glTF 2.0 library.\n  * [dear imgui](https://github.com/ocornut/imgui): A bloat-free immediate mode graphical user interface library.\n\n\n<a name="contributing"></a>\n# Contributing\n\nTo contribute your code, submit a [Pull Request](https://github.com/DiligentGraphics/DiligentEngine/pulls) \nto this repository. **Diligent Engine** is licensed under the [Apache 2.0 license](License.txt) that guarantees \nthat code in the **DiligentEngine** repository is free of Intellectual Property encumbrances. In submitting code to\nthis repository, you are agreeing that the code is free of any Intellectual Property claims.  \n\nDiligent Engine uses [clang-format](https://clang.llvm.org/docs/ClangFormat.html) to ensure\nconsistent source code style throught the code base. The format is validated by appveyor and travis\nfor each commit and pull request, and the build will fail if any code formatting issue is found. Please refer\nto [this page](https://github.com/DiligentGraphics/DiligentCore/blob/master/doc/code_formatting.md) for instructions\non how to set up clang-format and automatic code formatting.\n\n<a name="references"></a>\n# References\n\n[API Reference](https://cdn.rawgit.com/DiligentGraphics/DiligentCore/4949ec8a/doc/html/index.html)\n\n\n<a name="release_history"></a>\n# Release History\n\nSee [Release History](ReleaseHistory.md)\n\n------------------------------\n\n[diligentgraphics.com](http://diligentgraphics.com)\n\n[![Diligent Engine on Twitter](https://github.com/DiligentGraphics/DiligentCore/blob/master/media/twitter.png)](https://twitter.com/diligentengine)\n[![Diligent Engine on Facebook](https://github.com/DiligentGraphics/DiligentCore/blob/master/media/facebook.png)](https://www.facebook.com/DiligentGraphics/)\n'