b'# Android-GPUImage-Plus\nImage, Camera And Video Filters Based On OpenGL\n\n>To get pure lib without ffmpeg(No feature of video recording), please checkout the branch [min](https://github.com/wysaid/android-gpuimage-plus/tree/min). The whole jni module will be less than 600KB.\n\n## New Feature\n\nSee the `image deform demo`.\n\n![](screenshots/6.gif) ![](screenshots/5.gif)\n\n## Gradle dependency ##\n\n```\nrepositories {\n    jcenter()\n}\n\n//Choose only one of them\ndependencies {\n    //All arch: armeabi, armeabi-v7a, arm64-v8a, x86\n    compile \'org.wysaid:gpuimage-plus:2.6.3\'\n\n    //Pure graphics lib without ffmpeg. (all arch for branch \'min\')\n    compile \'org.wysaid:gpuimage-plus:2.6.3-min\'\n}\n```\n\n## Abstract ##\n\n*  This repo is an Android Studio Project, comprising "cgeDemo", "library" two sub-modules. Hundreds of built-in filters are available in the demo. \xf0\x9f\x98\x8bIf you\'d like to add your own filter, please take a look at the manual page. Or you can follow the demo code. The new custom filter should be written in C++.\n\n* Demo and Library will be updated as needed. Welcome for your questions or PR.\n\n* To build with the jni part, pleasae try:\n```\nexport NDK=path/of/your/ndk\ncd folder/of/jni (android-gpuimage-plus/library/src/main/jni)\n\n#This will make all arch: armeabi, armeabi-v7a arm64-v8a, x86, mips\n./buildJNI\n#Or use "sh buildJNI"\n\n#Try this if you failed to run the shell above\nexport CGE_USE_VIDEO_MODULE=1\n$NDK/ndk-build\n\n#If you don\'t want anything except the image filter,\n#Do as below to build with only cge module\n#No ffmpeg, opencv or faceTracker.\n#And remove the loading part of ffmpeg&facetracker\n$NDK/ndk-build\n\n#For Window user, you should include the `.cmd` extension to `ndk-build` like this:\ncd your_path_to\\android-gpuimage-plus-master\\library\\src\\main\\jni\nyour_path_to_ndk\\ndk-bundle\\ndk-build.cmd\n\n#Also remember to comment out these line in NativeLibraryLoader\n//System.loadLibrary("ffmpeg");\n//CGEFFmpegNativeLibrary.avRegisterAll();\n```\n\n> You can find precompiled libs here: [android-gpuimage-plus-libs](https://github.com/wysaid/android-gpuimage-plus-libs) (The precompiled \'.so\' files are generated with NDK-r16b)\n\nNote that the generated file "libFaceTracker.so" is not necessary. So just remove this file if you don\'t want any feature of it.\n\n* iOS version: [https://github.com/wysaid/ios-gpuimage-plus](https://github.com/wysaid/ios-gpuimage-plus "http://wysaid.org")\n\n## Manual ##\n\n### 1. Usage ###\n\n___Sample Code for doing a filter with Bitmap___\n```\n//Simply apply a filter to a Bitmap.\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n\n    Bitmap srcImage = ...;\n\n    //HSL Adjust (hue: 0.02, saturation: -0.31, luminance: -0.17)\n    //Please see the manual for more details.\n    String ruleString = "@adjust hsl 0.02 -0.31 -0.17";\n\n    Bitmap dstImage = CGENativeLibrary.filterImage_MultipleEffects(src, ruleString, 1.0f);\n\n    //Then the dstImage is applied with the filter.\n    //It\'s so convenient, isn\'t it?\n\n    //Save the result image to /sdcard/libCGE/rec_???.jpg.\n    ImageUtil.saveBitmap(dstImage);\n}\n```\n\n### 2. Custom Shader Filter ###\n\n#### 2.1 Write your own filter ####\n>Your filter must inherit [CGEImageFilterInterfaceAbstract](https://github.com/wysaid/android-gpuimage-plus/blob/master/library/src/main/jni/include/cgeImageFilter.h#L42) or its child class. Most of the filters are inherited from [CGEImageFilterInterface](https://github.com/wysaid/android-gpuimage-plus/blob/master/library/src/main/jni/include/cgeImageFilter.h#L57) because it has many useful functions.\n\n```\n// A simple customized filter to do a color reversal.\nclass MyCustomFilter : public CGE::CGEImageFilterInterface\n{\npublic:\n    \n    bool init()\n    {\n        CGEConstString fragmentShaderString = CGE_SHADER_STRING_PRECISION_H\n        (\n        varying vec2 textureCoordinate;  //defined in \'g_vshDefaultWithoutTexCoord\'\n        uniform sampler2D inputImageTexture; // the same to above.\n\n        void main()\n        {\n            vec4 src = texture2D(inputImageTexture, textureCoordinate);\n            src.rgb = 1.0 - src.rgb;  //Simply reverse all channels.\n            gl_FragColor = src;\n        }\n        );\n\n        //m_program is defined in \'CGEImageFilterInterface\'\n        return m_program.initWithShaderStrings(g_vshDefaultWithoutTexCoord, s_fsh);\n    }\n\n    //void render2Texture(CGE::CGEImageHandlerInterface* handler, GLuint srcTexture, GLuint vertexBufferID)\n    //{\n    //  //Your own render functions here.\n    //  //Do not override this function to use the CGEImageFilterInterface\'s.\n    //}\n};\n```\n\n>Note: To add your own shader filter with c++. [Please see the demo for further details](https://github.com/wysaid/android-gpuimage-plus/blob/master/library/src/main/jni/source/customFilter_N.cpp).\n\n#### 2.2 Run your own filter ####\n\n__In C++, you can use a CGEImageHandler to do that:__\n```\n//Assume the gl context already exists:\n//JNIEnv* env = ...;\n//jobject bitmap = ...;\nCGEImageHandlerAndroid handler;\nCustomFilterType* customFilter = new CustomFilterType();\n\n//You should handle the return value (false is returned when failed.)\ncustomFilter->init();\nhandler.initWithBitmap(env, bitmap);\n\n//The customFilter will be released when the handler\' destructor is called.\n//So you don\'t have to call \'delete customFilter\' if you add it into the handler.\nhandler.addImageFilter(customFilter);\n\nhandler.processingFilters(); //Run the filters.\n\njobject resultBitmap = handler.getResultBitmap(env);\n```\n\n>If no gl context exists, the class [CGESharedGLContext](https://github.com/wysaid/android-gpuimage-plus/blob/master/library/src/main/jni/interface/cgeSharedGLContext.h#L22) may be helpful.\n\n\n__In Java, you can simply follow the sample:__\n\nSee: [CGENativeLibrary.cgeFilterImageWithCustomFilter](https://github.com/wysaid/android-gpuimage-plus/blob/master/cgeDemo/src/main/java/org/wysaid/cgeDemo/TestCaseActivity.java#L123)\n\n__Or to do with a [CGEImageHandler](https://github.com/wysaid/android-gpuimage-plus/blob/master/library/src/main/java/org/wysaid/nativePort/CGEImageHandler.java#L93)__\n\n### 3. Filter Rule String ###\n\nDoc: <https://github.com/wysaid/android-gpuimage-plus/wiki>\n\nEn: [https://github.com/wysaid/android-gpuimage-plus/wiki/Parsing-String-Rule-(EN)](https://github.com/wysaid/android-gpuimage-plus/wiki/Parsing-String-Rule-(EN) "http://wysaid.org")\n\nCh: [https://github.com/wysaid/android-gpuimage-plus/wiki/Parsing-String-Rule-(ZH)](https://github.com/wysaid/android-gpuimage-plus/wiki/Parsing-String-Rule-(ZH) "http://wysaid.org")\n\n## Tool ##\n\nSome utils are available for creating filters: [https://github.com/wysaid/cge-tools](https://github.com/wysaid/cge-tools "http://wysaid.org")\n\n[![Tool](https://raw.githubusercontent.com/wysaid/cge-tools/master/screenshots/0.jpg "cge-tool")](https://github.com/wysaid/cge-tools)\n\n## License ##\n\n[MIT License](https://github.com/wysaid/android-gpuimage-plus/blob/master/LICENSE)\n\n## Donate ##\n\nAlipay:\n\n![Alipay](https://raw.githubusercontent.com/wysaid/android-gpuimage-plus/master/screenshots/alipay.jpg "alipay")\n\nPaypal: \n\n[![Paypal](https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif "Paypal")](http://blog.wysaid.org/p/donate.html)\n'