b'# Physically Based Rendering\n(c) 2017 - 2018 Micha\xc5\x82 Siejak ([@Nadrin](https://twitter.com/Nadrin))\n\nAn implementation of physically based shading model & image based lighting in various graphics APIs.\n\n![Screenshot](https://raw.githubusercontent.com/Nadrin/PBR/master/data/screenshot.jpg)\n\nAPI         | SLOC | Implementation status\n------------|------|----------------------\nOpenGL 4.5  | 508  | Done\nVulkan      | 1843 | Done\nDirect3D 11 | 673  | Done\nDirect3D 12 | 1205 | Done\n\n## About\n\nThe goal of this project is to showcase the use of various modern graphics APIs and to provide a clear side-by-side comparison of them.\nI believe that an implementation of physically based shading is a sufficiently non-trivial use case for that comparison to be useful.\n\nEach implementation is completely self contained within a single source/header pair residing directly in ```src``` directory.\nThe coding style is mostly procedural ("C with classes") using simple POD structs for grouping related data together.\nThis was done for simplicity, readability, and to not impose any particular renderer design/organization.\n\nShared functionality (loading of images & 3D models, application event loop & entry point, misc utility functions)\ncan be found in ```src/common``` directory.\n\nPlease note that it was not my goal to try to come up with the most efficient/optimized use of each API. The rendered scene is very simple anyway\n(only handful of drawcalls, mostly static data), and when in doubt I tried to refrain from using "clever" tricks and went for simple solutions.\n\nShaders are heavily commented because there\'s where interesting stuff happens. :)\n\n## Building\n\n### Windows\n\n#### Prerequisites\n\n- Windows 10 or Windows Server 2016 (x64 versions)\n- Visual Studio 2017 (any edition)\n- Relatively recent version of Windows 10 SDK\n- [LunarG Vulkan SDK](https://vulkan.lunarg.com/sdk/home)\n\n#### How to build\n\nVisual Studio solution is available at ```projects/msvc2017/PBR.sln```. After successful build the resulting executable\nand all needed DLLs can be found in ```data``` directory. Note that precompiled third party libraries are only available\nfor x64 target.\n\n### Linux\n\n#### Prerequisites\n\n - C/C++ compiler supporting C++14\n - CMake 3.8 or newer\n - pkg-config\n - [glslang from Khronos](https://github.com/KhronosGroup/glslang/releases/tag/master-tot)\n - Development files for GLFW3, Assimp, OpenGL & Vulkan\n \n#### How to build\n\n1. Install prerequisites; for Debian/Ubuntu:\n```\nsudo apt install build-essential cmake pkg-config libglfw3-dev libassimp-dev libgl1-mesa-dev libvulkan-dev\n```\n    \n2. Download & install glslang. Make sure that `glslangValidator` binary is in `PATH` or in `/opt/glslang/bin`.\n\n3. Configure & build the project:\n```\nmkdir -p projects/cmake/build\ncd projects/cmake/build\ncmake ..\nmake install\n```\n\n4. After successful build the resulting executable can be found in ```data``` directory.\n\n### macOS\n\n[Help wanted](https://github.com/Nadrin/PBR/issues/2).\n\n## Running\n\nMake sure to run from within ```data``` directory as all paths are relative to it. API to be used can be specified on the command line\nas a single parameter (```-opengl```, ```-vulkan```, ```-d3d11```, or ```-d3d12```). When run with no parameters ```-d3d11``` is used\non Windows, and ```-opengl``` on other platforms.\n\n### Controls\n\nInput        | Action\n-------------|-------\nLMB drag     | Rotate camera\nRMB drag     | Rotate 3D model\nScroll wheel | Zoom in/out\nF1-F3        | Toggle analytical lights on/off\n\n## Bibliography\n\nThis implementation of physically based shading is largely based on information obtained from the following courses:\n\n- [Real Shading in Unreal Engine 4](http://blog.selfshadow.com/publications/s2013-shading-course/karis/s2013_pbs_epic_notes_v2.pdf), Brian Karis, SIGGRAPH 2013\n- [Moving Frostbite to Physically Based Rendering](https://seblagarde.wordpress.com/2015/07/14/siggraph-2014-moving-frostbite-to-physically-based-rendering/), S\xc3\xa9bastien Lagarde, Charles de Rousiers, SIGGRAPH 2014\n\nOther resources that helped me in research & implementation:\n\n- [Adopting Physically Based Shading Model](https://seblagarde.wordpress.com/2011/08/17/hello-world/), S\xc3\xa9bastien Lagarde\n- [Microfacet Models for Refraction through Rough Surfaces](https://www.cs.cornell.edu/~srm/publications/EGSR07-btdf.pdf), Bruce Walter et al., Eurographics, 2007\n- [An Inexpensive BRDF Model for Physically-Based Rendering](http://igorsklyar.com/system/documents/papers/28/Schlick94.pdf), Christophe Schlick, Eurographics, 1994\n- [GPU-Based Importance Sampling](https://developer.nvidia.com/gpugems/GPUGems3/gpugems3_ch20.html), Mark Colbert, Jaroslav K\xc5\x99iv\xc3\xa1nek, GPU Gems 3, 2007\n- [Hammersley Points on the Hemisphere](http://holger.dammertz.org/stuff/notes_HammersleyOnHemisphere.html), Holger Dammertz\n- [Notes on Importance Sampling](http://blog.tobias-franke.eu/2014/03/30/notes_on_importance_sampling.html), Tobias Franke\n- [Specular BRDF Reference](http://graphicrants.blogspot.com/2013/08/specular-brdf-reference.html), Brian Karis\n- [To PI or not to PI in game lighting equation](https://seblagarde.wordpress.com/2012/01/08/pi-or-not-to-pi-in-game-lighting-equation/), S\xc3\xa9bastien Lagarde\n- [Physically Based Rendering: From Theory to Implementation, 2nd ed.](https://www.amazon.com/Physically-Based-Rendering-Second-Implementation/dp/0123750792), Matt Pharr, Greg Humphreys, 2010\n- [Advanced Global Illumination, 2nd ed.](https://www.amazon.com/Advanced-Global-Illumination-Second-Philip/dp/1568813074), Philip Dutr\xc3\xa9, Kavita Bala, Philippe Bekaert, 2006\n- [Photographic Tone Reproduction for Digital Images](https://www.cs.utah.edu/~reinhard/cdrom/), Erik Reinhard et al., 2002\n\n## Third party libraries\n\nThis project makes use of the following open source libraries:\n\n- [Open Asset Import Library](http://assimp.sourceforge.net/)\n- [stb_image](https://github.com/nothings/stb)\n- [GLFW](http://www.glfw.org/)\n- [GLM](https://glm.g-truc.net/)\n- [D3D12 Helper Library](https://github.com/Microsoft/DirectX-Graphics-Samples/tree/master/Libraries/D3DX12)\n- [glad](https://github.com/Dav1dde/glad) (used to generate OpenGL function loader)\n- [volk](https://github.com/zeux/volk) (meta loader for Vulkan API)\n\n## Included assets\n\nThe following assets are bundled with the project:\n\n- "Cerberus" gun model by [Andrew Maximov](http://artisaverb.info).\n- HDR environment map by [Bob Groothuis](http://www.bobgroothuis.com/blog/) obtained from [HDRLabs sIBL archive](http://www.hdrlabs.com/sibl/archive.html) (distributed under [CC-BY-NC-SA 3.0](https://creativecommons.org/licenses/by-nc-sa/3.0/us/)).\n'