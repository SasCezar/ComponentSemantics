b'<a href="https://repology.org/metapackage/teeworlds/versions">\r\n    <img src="https://repology.org/badge/vertical-allrepos/teeworlds.svg" alt="Packaging status" align="right">\r\n</a>\r\n\r\nTeeworlds [![CircleCI](https://circleci.com/gh/teeworlds/teeworlds.svg?style=svg)](https://circleci.com/gh/teeworlds/teeworlds) [![Travis CI Build Status](https://travis-ci.org/teeworlds/teeworlds.svg?branch=master)](https://travis-ci.org/teeworlds/teeworlds) [![AppVeyor Build Status](https://ci.appveyor.com/api/projects/status/github/teeworlds/teeworlds?branch=master&svg=true)](https://ci.appveyor.com/project/heinrich5991/teeworlds)\r\n=========\r\n\r\nA retro multiplayer shooter\r\n---------------------------\r\n\r\nTeeworlds is a free online multiplayer game, available for all major\r\noperating systems. Battle with up to 16 players in a variety of game\r\nmodes, including Team Deathmatch and Capture The Flag. You can even\r\ndesign your own maps!\r\n\r\nThis software is provided \'as-is\', without any express or implied\r\nwarranty. In no event will the authors be held liable for any damages\r\narising from the use of this software. See license.txt for full license\r\ntext including copyright information.\r\n\r\nPlease visit https://www.teeworlds.com/ for up-to-date information about\r\nthe game, including new versions, custom maps and much more.\r\n\r\nOriginally written by Magnus Auvinen.\r\n\r\n\r\nBuilding on Linux or macOS\r\n==========================\r\n\r\nInstalling dependencies\r\n-----------------------\r\n\r\n    # Debian/Ubuntu\r\n    sudo apt install build-essential cmake git libfreetype6-dev libsdl2-dev libpnglite-dev libwavpack-dev python3\r\n\r\n    # Fedora\r\n    sudo dnf install @development-tools cmake gcc-c++ git freetype-devel mesa-libGLU-devel pnglite-devel python3 SDL2-devel wavpack-devel\r\n\r\n    # Arch Linux (doesn\'t have pnglite in its repositories)\r\n    sudo pacman -S --needed base-devel cmake freetype2 git glu python sdl2 wavpack\r\n\r\n    # macOS\r\n    brew install cmake freetype sdl2\r\n\r\n\r\nDownloading repository\r\n----------------------\r\n\r\n    git clone https://github.com/teeworlds/teeworlds --recurse-submodules\r\n    cd teeworlds\r\n\r\n    # If you already cloned the repository before, use:\r\n    # git submodule update --init\r\n\r\n\r\nBuilding\r\n--------\r\n\r\n    mkdir -p build\r\n    cd build\r\n    cmake ..\r\n    make\r\n\r\nOn subsequent builds, you only have to repeat the `make` step.\r\n\r\nYou can then run the client with `./teeworlds` and the server with\r\n`./teeworlds_srv`.\r\n\r\n\r\nBuild options\r\n-------------\r\n\r\nThe following options can be passed to the `cmake ..` command line (between the\r\n`cmake` and `..`) in the "Building" step above.\r\n\r\n`-GNinja`: Use the Ninja build system instead of Make. This automatically\r\nparallizes the build and is generally **faster**. (Needs `sudo apt install\r\nninja-build` on Debian, `sudo dnf install ninja-build` on Fedora, and `sudo\r\npacman -S --needed ninja` on Arch Linux.)\r\n\r\n`-DDEV=ON`: Enable debug mode and disable some release mechanics. This leads to\r\n**faster** builds.\r\n\r\n`-DCLIENT=OFF`: Disable generation of the client target. Can be useful on\r\nheadless servers which don\'t have graphics libraries like SDL2 installed.\r\n\r\n\r\nBuilding on Windows with Visual Studio\r\n======================================\r\n\r\nDownload and install some version of [Microsoft Visual\r\nStudio](https://www.visualstudio.com/) (as of writing, MSVS Community 2017)\r\nwith the following components:\r\n\r\n* Desktop development with C++ (on the main page)\r\n* Python development (on the main page)\r\n* Git for Windows (in Individual Components \xe2\x86\x92 Code tools)\r\n\r\nRun Visual Studio. Open the Team Explorer (View \xe2\x86\x92 Team Explorer, Ctrl+^,\r\nCtrl+M). Click Clone (in the Team Explorer, Connect \xe2\x86\x92 Local Git Repositories).\r\nEnter `https://github.com/teeworlds/teeworlds` into the first input box. Wait\r\nfor the download to complete (terminals might pop up).\r\n\r\nWait until the CMake configuration is done (watch the Output windows at the\r\nbottom).\r\n\r\nSelect `teeworlds.exe` in the Select Startup Item\xe2\x80\xa6 combobox next to the green\r\narrow. Wait for the compilation to finish.\r\n\r\nFor subsequent builds you only have to click the button with the green arrow\r\nagain.\r\n\r\n\r\nBuilding on Windows with MinGW\r\n==============================\r\n\r\nDownload and install MinGW with at least the following components:\r\n\r\n- mingw-developer-toolkit-bin\r\n- mingw32-base-bin\r\n- mingw32-gcc-g++-bin\r\n- msys-base-bin\r\n\r\nAlso install [Git](https://git-scm.com/downloads) (for downloading the source\r\ncode), [Python](https://www.python.org/downloads/) and\r\n[CMake](https://cmake.org/download/).\r\n\r\nOpen CMake ("CMake (cmake-gui)" in the start menu). Click "Browse Source"\r\n(first line) and select the directory with the Teeworlds source code. Next,\r\nclick "Browse Build" and create a subdirectory for the build (e.g. called\r\n"build"). Then click "Configure". Select "MinGW Makefiles" as the generator and\r\nclick "Finish". Wait a bit (until the progress bar is full). Then click\r\n"Generate".\r\n\r\nYou can now build Teeworlds by executing `mingw32-make` in the build directory.\r\n\r\n\r\nBuilding with bam, guides for all operating systems\r\n===================================================\r\n\r\nYou can also compile Teeworlds with bam, a custom build system. Instructions\r\nfor that can be found at https://www.teeworlds.com/?page=docs&wiki=hacking.\r\n'