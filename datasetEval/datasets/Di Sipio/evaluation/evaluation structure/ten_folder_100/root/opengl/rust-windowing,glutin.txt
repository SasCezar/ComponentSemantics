b'# glutin -  OpenGL, UTilities and INput\nA low-level library for OpenGL context creation, written in pure Rust.\n\n[![](https://meritbadge.herokuapp.com/glutin)](https://crates.io/crates/glutin)\n[![Docs.rs](https://docs.rs/glutin/badge.svg)](https://docs.rs/glutin)\n[![Build Status](https://travis-ci.org/rust-windowing/glutin.png?branch=master)](https://travis-ci.org/rust-windowing/glutin)\n[![Build status](https://ci.appveyor.com/api/projects/status/lexg1h4eyp7eg0nj/branch/master?svg=true)](https://ci.appveyor.com/project/Osspial/glutin/branch/master)\n\n```toml\n[dependencies]\nglutin = "0.22.0-alpha4"\n```\n\n## [Documentation](https://docs.rs/glutin)\n## [0.21.0 Migration guide](https://gentz.rocks/posts/glutin-v0-21-0-migration-guide/)\n\n## Contact Us\n\nJoin us in any of these:\n\n[![Freenode](https://img.shields.io/badge/freenode.net-%23glutin-red.svg)](http://webchat.freenode.net?channels=%23glutin&uio=MTY9dHJ1ZSYyPXRydWUmND10cnVlJjExPTE4NSYxMj10cnVlJjE1PXRydWU7a)\n[![Matrix](https://img.shields.io/badge/Matrix-%23Glutin%3Amatrix.org-blueviolet.svg)](https://matrix.to/#/#Glutin:matrix.org)\n[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/tomaka/glutin?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n## Usage Examples\n\nWarning: these are examples for master. For the latest released version, 0.21, view [here.](https://github.com/rust-windowing/glutin/tree/2e816ae2654ba80eb3e201d0ce51d238cc105226)\n\n### Try it!\n\n```bash\ngit clone https://github.com/rust-windowing/glutin\ncd glutin\ncargo run --example window\n```\n\n### Usage\n\nGlutin is an OpenGL context creation library and doesn\'t directly provide OpenGL bindings for you.\n\nFor examples, please look [here.](https://github.com/rust-windowing/glutin/tree/master/glutin_examples)\n\nNote that glutin aims at being a low-level brick in your rendering infrastructure. You are encouraged to write another layer of abstraction between glutin and your application.\n\nGlutin is only officially supported on the latest stable version of the Rust compiler.\n\n## Platform-specific notes\n\n### Android\n\nTo compile the examples for android, you have to use the `cargo apk` utility.\n\nSee [the `android-rs-glue` repository](https://github.com/rust-windowing/android-rs-glue) for instructions.\n\n### Emscripten with asmjs\n\nIn order to use glutin with emscripten, start by compiling your code with `--target=asmjs-unknown-emscripten`.\n\nThen create an HTML document that contains this:\n\n```html\n<canvas id="canvas"></canvas>\n<script type="text/javascript">\nvar Module = {\n    canvas: document.getElementById(\'canvas\')\n};\n</script>\n<script type="text/javascript" src="target/asmjs-unknown-emscripten/debug/..." async></script>\n```\n\n*Note: adjust the `src` element of the script to point to the .js file that was produced by the compilation.*\n\nThe `Module` object is the link between emscripten and the HTML page.\nSee also [this documentation](https://kripken.github.io/emscripten-site/docs/api_reference/module.html).\n\n### X11\n\nThe plan is that glutin tries to dynamically link-to and use wayland if possible. If it doesn\'t work, it will try xlib instead. This is work-in-progress.\n\n### Wayland\n\nDue to an issue with how mesa and Wayland play together, all shared contexts must use the same events pool as each other.\n\n## Common issues\n\nHelp! I\'m receiving `NoAvailablePixelFormat`!\n\n - See: https://github.com/rust-windowing/glutin/issues/952#issuecomment-467228004\n - If you are on Windows w/ an AMD gpu and are requesting a non-srgb non-floating point surface, see: https://github.com/rust-windowing/glutin/issues/1219\n\n'