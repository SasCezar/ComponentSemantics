b"PyOpenCL: Pythonic Access to OpenCL, with Arrays and Algorithms\n---------------------------------------------------------------\n\n.. image:: https://gitlab.tiker.net/inducer/pyopencl/badges/master/pipeline.svg\n    :alt: Gitlab Build Status\n    :target: https://gitlab.tiker.net/inducer/pyopencl/commits/master\n.. image:: https://dev.azure.com/ak-spam/inducer/_apis/build/status/inducer.pyopencl?branchName=master\n    :alt: Azure Build Status\n    :target: https://dev.azure.com/ak-spam/inducer/_build/latest?definitionId=5&branchName=master\n.. image:: https://badge.fury.io/py/pyopencl.png\n    :alt: Python Package Index Release Page\n    :target: https://pypi.org/project/pyopencl/\n\n(Also: `Travis CI <https://travis-ci.org/inducer/pyopencl/builds>`_ to build binary wheels for releases, see `#264 <https://github.com/inducer/pyopencl/pull/264>`_)\n\nPyOpenCL lets you access GPUs and other massively parallel compute\ndevices from Python. It tries to offer computing goodness in the\nspirit of its sister project `PyCUDA <https://mathema.tician.de/software/pycuda>`_:\n\n* Object cleanup tied to lifetime of objects. This idiom, often\n  called\n  `RAII <https://en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization>`_\n  in C++, makes it much easier to write correct, leak- and\n  crash-free code.\n\n* Completeness. PyOpenCL puts the full power of OpenCL's API at\n  your disposal, if you wish.  Every obscure `get_info()` query and \n  all CL calls are accessible.\n\n* Automatic Error Checking. All CL errors are automatically\n  translated into Python exceptions.\n\n* Speed. PyOpenCL's base layer is written in C++, so all the niceties\n  above are virtually free.\n\n* Helpful and complete `Documentation <https://documen.tician.de/pyopencl>`__\n  as well as a `Wiki <https://wiki.tiker.net/PyOpenCL>`_.\n\n* Liberal license. PyOpenCL is open-source under the \n  `MIT license <https://en.wikipedia.org/wiki/MIT_License>`_\n  and free for commercial, academic, and private use.\n\n* Broad support. PyOpenCL was tested and works with Apple's, AMD's, and Nvidia's \n  CL implementations.\n\nSimple 4-step `install instructions <https://documen.tician.de/pyopencl/misc.html#installation>`_\nusing Conda on Linux and macOS (that also install a working OpenCL implementation!)\ncan be found in the `documentation <https://documen.tician.de/pyopencl/>`__.\n\nWhat you'll need if you do *not* want to use the convenient instructions above and\ninstead build from source:\n\n*   gcc/g++ new enough to be compatible with pybind11\n    (see their `FAQ <https://pybind11.readthedocs.io/en/stable/faq.html>`_)\n*   `numpy <https://numpy.org>`_, and\n*   an OpenCL implementation. (See this `howto <https://wiki.tiker.net/OpenCLHowTo>`_ for how to get one.)\n\nPlaces on the web related to PyOpenCL:\n\n* `Python package index <https://pypi.python.org/pypi/pyopencl>`_ (download releases)\n\n* `Documentation <https://documen.tician.de/pyopencl>`__ (read how things work)\n* `Conda Forge <https://anaconda.org/conda-forge/pyopencl>`_ (download binary packages for Linux, macOS, Windows)\n* `C. Gohlke's Windows binaries <https://www.lfd.uci.edu/~gohlke/pythonlibs/#pyopencl>`_ (download Windows binaries)\n* `Github <https://github.com/inducer/pyopencl>`_ (get latest source code, file bugs)\n* `Wiki <https://wiki.tiker.net/PyOpenCL>`_ (read installation tips, get examples, read FAQ)\n"