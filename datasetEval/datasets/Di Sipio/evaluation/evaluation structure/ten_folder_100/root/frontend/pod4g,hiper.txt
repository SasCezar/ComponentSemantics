b'**English** | [\xe4\xb8\xad\xe6\x96\x87](./README.zh-CN.md)\n\n<p align="center"><img src="http://7xt9n8.com2.z0.glb.clouddn.com/hiper-logo-512.png" alt="Hiper" width="175"></p>\n\n<p align="center">\xf0\x9f\x9a\x80 A statistical analysis tool for performance testing</p>\n\n<p align="center">\n    <img src="https://img.shields.io/circleci/project/vuejs/vue/dev.svg" alt="">\n    <img src="https://img.shields.io/badge/license-MIT-blue.svg" alt="">\n    <img src="https://img.shields.io/badge/PRs-welcome-brightgreen.svg" alt="">\n</p>\n\n## Hiper\n\nThe name is short for **Hi** **per**formance <del>Or **Hi**gh **per**formance</del>\n\n## Important\n\nHi guys, Please present your issue in English \n\n\xe8\xaf\xb7\xe4\xbd\xbf\xe7\x94\xa8\xe8\x8b\xb1\xe8\xaf\xad\xe6\x8f\x90issue\n\n## Install\n\n``` bash\nnpm install hiper -g\n\n# or use yarn:\n# yarn global add hiper\n```\n\n## The output\n\nNotice: `It takes period (m)s to load ...`. the `period` means **This test takes time**. So -n go up and the period go up. not a bug\n \n![Hiper](http://7xt9n8.com2.z0.glb.clouddn.com/hiper9.png)\n\n## PerformanceTiming\n\n![timing](http://7xt9n8.com2.z0.glb.clouddn.com/PerformanceTiming.png)\n\n| Key                            | Value                                        |\n| :----------------------------- | :------------------------------------------- |\n| DNS lookup time                | domainLookupEnd          - domainLookupStart |\n| TCP connect time               | connectEnd               - connectStart      |\n| TTFB                           | responseStart            - requestStart      |\n| Download time of the page      | responseEnd              - responseStart     |\n| After DOM Ready download time  | domComplete              - domInteractive    |\n| White screen time              | domInteractive           - navigationStart   |\n| DOM Ready time                 | domContentLoadedEventEnd - navigationStart   |\n| Load time                      | loadEventEnd             - navigationStart   |\n\nhttps://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming\n\n## Usage\n\n```bash\nhiper --help\n\nUsage: hiper [options] [url]\n\n\xf0\x9f\x9a\x80 A statistical analysis tool for performance testing\n\nOptions:\n\n   -v, --version                output the version number\n   -n, --count <n>              specified loading times (default: 20)\n   -c, --config <path>          load the configuration file\n   -u, --useragent <ua>         to set the useragent\n   -H, --headless [b]           whether to use headless mode (default: true)\n   -e, --executablePath <path>  use the specified chrome browser\n   --no-cache                   disable cache (default: false)\n   --no-javascript              disable javascript (default: false)\n   --no-online                  disable network (defalut: false)\n   -h, --help                   output usage information\n```\n\nFor instance\n\n```bash\n # We can omit the protocol header if has omited, the protocol header will be `https://`\n\n # The simplest usage\n hiper baidu.com\n\n # if the url has any parameter, surround the url with double quotes\n hiper "baidu.com?a=1&b=2"\n\n #  Load the specified page 100 times\n hiper -n 100 "baidu.com?a=1&b=2"\n\n #  Load the specified page 100 times without `cache`\n hiper -n 100 "baidu.com?a=1&b=2" --no-cache\n\n #  Load the specified page 100 times without `javascript`\n hiper -n 100 "baidu.com?a=1&b=2" --no-javascript\n \n #  Load the specified page 100 times with `headless = false`\n hiper -n 100 "baidu.com?a=1&b=2" -H false\n\n #  Load the specified page 100 times with set `useragent`\n hiper -n 100 "baidu.com?a=1&b=2" -u "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.181 Safari/537.36"\n```\n\n## Config\n\n#### Support `.json` and `.js` config\n\n1. **json**\n\n```javascript\n{\n   // options Pointing to a specific chrome executable, this configuration is generally not required unless you want to test a specific version of chrome\n   "executablePath": "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome",\n   // required The url you want to test\n   "url": "https://example.com",\n   // options Cookies required for this test. It\'s usually a cookie for login information Array | Object\n   "cookies": [{\n      "name": "token",\n      "value": "9+cL224Xh6VuRT",\n      "domain": "example.com",\n      "path": "/",\n      "size": 294,\n      "httpOnly": true\n   }],\n   // options default: 20 Test times\n   "count": 100,\n   // options default: true Whether to use headless mode \n   "headless": true,\n   // options default: false Disable cache \n   "noCache": false,\n   // options default: false Disable javascript\n   "noJavascript": false,\n   // options default: false Disable network\n   "noOnline": false,\n   // options Set the useragent information\n   "useragent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.181 Safari/537.36",\n   // options Set the viewport information\n   "viewport": {\n      // options\n      "width": 375,\n      // options\n      "height": 812,\n      // options default: 1 devicePixelRatio\n      "deviceScaleFactor": 3,\n      // options default: false Whether to simulate mobile\n      "isMobile": false,\n      // options default: false Whether touch events are supported\n      "hasTouch": false,\n      // options default: false Is it horizontal or not\n      "isLandscape": false\n   }\n}\n```\n\n2. **js**\n\nHaving a JS file for config allows people to use ENV variables. For example, let\'s say I want to test the site on an authenticated state. I can pass some cookie that is used to identify me through ENV variables and having a JS based config file makes this simple. For example\n\n```javascript\n\nmodule.exports = {\n    ....\n    cookies:  [{\n        name: \'token\',\n        value: process.env.authtoken,\n        domain: \'example.com\',\n        path: \'/\',\n        httpOnly: true\n    }],\n    ....\n}\n```\n\n``` bash\n# Load the above configuration file (Let\'s say this file is under /home/)\nhiper -c /home/config.json\n\n# Or you can also use JS files for configuration\nhiper -c /home/config.js\n```\n\n## Pain point\n\nAfter we have developed a project or optimized the performance of a project, \n\nhow do we measure the performance of this project?\n\nA common approach is to look at the data in the `performance` and `network` in the `Dev Tool`, record a few key performance metrics, and refresh them a few times before looking at those performance metrics,\n\nSometimes we find that due to the small sample size, the current **Network/CPU/Memory** load is heavily impacted, and sometimes the optimized project is slower than before the optimization. \n\nIf there is a tool, request web page many times, and then taking out the various performance indicators averaging, we can **very accurately** know the optimization is positive or negative. \n\nIn addition, you can also make a comparison and get **accurate data** about **how much you have optimized**. This tool is designed to solve the pain point.\n\n> At the same time, this tool is also a good tool for us to learn about the "browser\'s process of load and rendering" and "performance optimization", so that we don\'t get wrong conclusions when there are too few samples\n\n## Roadmap\n\n1. Better documentation\n2. i18n\n3. Increase the analysis statistics of resource items loaded on the page\n4. Statistical reports can be generated\n5. Data visualization\n\n## Contributing\n\n1. Fork it\n2. Create your feature branch (git checkout -b my-new-feature)\n3. Commit your changes (git commit -am \'Add some feature\')\n4. Push to the branch (git push origin my-new-feature)\n5. Create new Pull Request\n\n## License\n\n[MIT](http://opensource.org/licenses/MIT)\n\nWelcome Star and PR\n\nCopyright (c) 2018 liyanfeng(pod4g)\n\n\n\n'