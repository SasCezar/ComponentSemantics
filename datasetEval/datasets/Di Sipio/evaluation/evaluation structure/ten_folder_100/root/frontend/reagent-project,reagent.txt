b'\n# Reagent\n\n![Reagent-Project](logo.png)\n\nA simple [ClojureScript](http://github.com/clojure/clojurescript) interface to [React](http://facebook.github.io/react/).\n\nReagent provides a way to write efficient React components using (almost) nothing but plain ClojureScript functions.\n\n  * **[Detailed intro with live examples](http://reagent-project.github.io/)**\n  * **[News](http://reagent-project.github.io/news/index.html)**\n  * **[Documentation, 0.8](https://cljdoc.org/d/reagent/reagent/0.8.1/doc/documentation-index)**\n  * **Documentation, next release, 0.9**\n      * **[API docs](http://reagent-project.github.io/docs/master/)**\n      * **[Tutorials and FAQ](https://github.com/reagent-project/reagent/tree/master/doc)**\n  * **Community discussion and support channels**\n    * **[#reagent](https://clojurians.slack.com/messages/reagent/)** channel in [Clojure Slack](http://clojurians.net/)\n    * **[Reagent Project Mailing List](https://groups.google.com/forum/#!forum/reagent-project)**\n  * **Commercial video material**\n    * [Learn Reagent Free](https://www.jacekschae.com/learn-reagent-free/tycit?coupon=REAGENT)\n    * [Learn Reagent Pro](https://www.jacekschae.com/learn-reagent-pro/tycit?coupon=REAGENT) (Affiliate link, $30 discount)\n    * [Learn Re-frame Free](https://www.jacekschae.com/learn-re-frame-free/tycit?coupon=REAGENT)\n    * [Learn Re-frame Pro](https://www.jacekschae.com/learn-re-frame-pro/tycit?coupon=REAGENT) (Affiliate link, $30 discount)\n    * [purelyfunctional.tv ](https://purelyfunctional.tv/guide/reagent/)\n    * [Lambda Island Videos](https://lambdaisland.com/collections/react-reagent-re-frame)\n\n### Usage\n\nTo create a new Reagent project using [Leiningen](http://leiningen.org/) template simply run:\n\n    lein new reagent myproject\n\nIf you wish to only create the assets for ClojureScript without a Clojure backend then do the following instead:\n\n    lein new reagent-frontend myproject\n\nThis will setup a new Reagent project with some reasonable defaults, see here for more [details](https://github.com/reagent-project/reagent-template).\n\nTo use Reagent in an existing project you add this to your dependencies in `project.clj`:\n\n[![Clojars Project](http://clojars.org/reagent/latest-version.svg)](http://clojars.org/reagent) <br>\n[![CircleCI](https://circleci.com/gh/reagent-project/reagent.svg?style=svg)](https://circleci.com/gh/reagent-project/reagent)\n\nThis is all you need to do if you want the standard version of React. If you want to use your own build of React (or React from a CDN), you have to use `:exclusions` variant of the dependency, and also provide `react` and `react-dom` namespaces (by creating `.cljs` files with just `ns` form, or by adding your own `:foreign-libs` entries).\n\n    [reagent "0.x.x" :exclusions [cljsjs/react cljsjs/react-dom]]\n\n## Examples\n\nReagent uses [Hiccup-like](https://github.com/weavejester/hiccup) markup instead of React\'s sort-of html. It looks like this:\n\n```clj\n(defn some-component []\n  [:div\n   [:h3 "I am a component!"]\n   [:p.someclass\n    "I have " [:strong "bold"]\n    [:span {:style {:color "red"}} " and red"]\n    " text."]])\n```\n\nReagent extends standard Hiccup in one way: it is possible to "squeeze" elements together by using a `>` character.\n\n```clj\n[:div\n  [:p\n    [:b "Nested Element"]]]\n```\n\ncan be written as:\n\n```clj\n[:div>p>b "Nested Element"]\n```\n\n> **Since version 0.8:** The `:class` attribute also supports collections of classes, and nil values are removed:\n>\n> ```clj\n> [:div {:class ["a-class" (when active? "active") "b-class"]}]\n> ```\n\nYou can use one component inside another:\n\n```clj\n(defn calling-component []\n  [:div "Parent component"\n   [some-component]])\n```\n\nAnd pass properties from one component to another:\n\n```clj\n(defn child [name]\n  [:p "Hi, I am " name])\n\n(defn childcaller []\n  [child "Foo Bar"])\n```\n\nYou mount the component into the DOM like this:\n\n```clj\n(defn mountit []\n  (r/render [childcaller]\n            (.-body js/document)))\n```\n\nassuming we have imported Reagent like this:\n\n```clj\n(ns example\n  (:require [reagent.core :as r]))\n```\n\nState is handled using Reagent\'s version of `atom`, like this:\n\n```clj\n(defonce click-count (r/atom 0))\n\n(defn state-ful-with-atom []\n  [:div {:on-click #(swap! click-count inc)}\n   "I have been clicked " @click-count " times."])\n```\n\nAny component that dereferences a `reagent.core/atom` will be automatically re-rendered.\n\nIf you want do some setting up when the component is first created, the component function can return a new function that will be called to do the actual rendering:\n\n```clj\n(defn timer-component []\n  (let [seconds-elapsed (r/atom 0)]\n    (fn []\n      (js/setTimeout #(swap! seconds-elapsed inc) 1000)\n      [:div\n       "Seconds Elapsed: " @seconds-elapsed])))\n```\n\nThis way you can avoid using React\'s lifecycle callbacks like `getInitialState` and `componentWillMount` most of the time.\n\nBut you can still use them if you want to, either using `reagent.core/create-class` or by attaching meta-data to a component function:\n\n```clj\n(defonce my-html (r/atom ""))\n\n(defn plain-component []\n  [:p "My html is " @my-html])\n\n(def component-with-callback\n  (with-meta plain-component\n    {:component-did-mount\n     (fn [this]\n       (reset! my-html (.-innerHTML (reagent/dom-node this))))}))\n```\n\nSee the examples directory for more examples.\n\n\n## Performance\n\nReact is pretty darn fast, and so is Reagent. It should even be faster than plain old javascript React a lot of the time, since ClojureScript allows us to skip a lot of unnecessary rendering (through judicious use of React\'s `shouldComponentUpdate`).\n\nThe ClojureScript overhead is kept down, thanks to lots of caching.\n\nCode size is a little bigger than React.js, but still quite small. The todomvc example clocks in at roughly 79K gzipped, using advanced compilation.\n\n\n## About\n\nThe idea and some of the code for making components atom-like comes from [pump](https://github.com/piranha/pump). The reactive-atom idea (and some code) comes from [reflex](https://github.com/lynaghk/reflex).\n\nThe license is MIT.\n'