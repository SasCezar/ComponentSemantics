b'# LivingStyleGuide [![Build Status](https://travis-ci.org/livingstyleguide/livingstyleguide.svg?branch=v2)](https://travis-ci.org/livingstyleguide/livingstyleguide)\n\nEasily create living style guides/front-end style guides/pattern libraries by adding Markdown documentation to\nyour Sass project. [Follow @LSGorg](https://twitter.com/LSGorg) for updates.\n\n![preview](https://cloud.githubusercontent.com/assets/103399/3854622/2fb68574-1eda-11e4-862c-33e7d7943c56.jpg)\n\n* On the left: [homify.com](https://www.homify.com)\xe2\x80\x99s style guide (non-public repository)\n* On the right: http://style-guide.eurucamp.org/2015/ ([public repository](https://github.com/eurucamp/livingstyleguide-eurucamp))\n\n----\n\n\n## Getting Started\n\n* [Command Line Interface](#command-line-interface)\n* [Rails Integration](#rails-integration)\n* [Middleman Integration](#middleman-integration)\n* [Grunt](#grunt)\n* [Gulp](#gulp)\n* [Broccoli](#broccoli)\n* [Ember CLI](#ember-cli)\n* [Writing Examples](#writing-examples)\n* [Styling the Style Guide](#styling-the-style-guide)\n\n\n## Command Line Interface\n\n1. Setup\n   ```\n   $ gem install livingstyleguide\n   ```\n\n2. Create *_sass/styleguide.lsg_* (replace `sass/` with the directory name of your Sass files) with:\n   ```\n   // Replace with your default Sass/SCSS file name:\n   @scss application.css.scss\n\n   // Set the HTML title of the document:\n   @title My Living Style Guide\n\n   // Import all your style guide files\n   @import sass/**/*.lsg\n   ```\n\n3. Write documentation for each module *sass/partials/_buttons.lsg* (to describe *_buttons.scss* in the same folder):\n\n\n        # Buttons\n\n        ```\n        <button class="button">Example button</button>\n        ```\n\n        ```\n        <button class="button -primary">Example button</button>\n        ```\n\n4. Call `livingstyleguide compile sass/styleguide.lsg public/styleguide.html`\n   This will automatically:\n   * Combine all Markdown files and convert them to HTML\n   * Create a beautiful style guide\n   * Saves the style guide as _public/styleguide.html_\n   * Show the HTML source syntax highlighted close to each example\n\n\n### Tips for the Command Line Interface\n\n* Create your project with or without [Compass](http://compass-style.org).\n* This can be easily integrated into non-Ruby build systems.\n* If you omit the input and output filenames, STDIN and STDOUT will be used.\n\n\n## Rails Integration\n\nBe aware: From LSG v2 on Rails 3.x is not supported due to outdated\nSprockets and Tilt versions.\n\n1. Setup:\n   Add this line to your application\xe2\x80\x99s _Gemfile_:\n\n   ``` ruby\n   gem "livingstyleguide"\n   ```\n\n   And then execute:\n\n   ```\n   $ bundle\n   $ rails s\n   ```\n\n2. Create *_app/assets/stylesheets/styleguide.html.lsg_* with:\n   ```\n   // Replace with your default Sass/SCSS file name:\n   @scss application.css.scss\n\n   // Set the HTML title of the document:\n   @title My Living Style Guide\n\n   // Import all your style guide files\n   @import **/*.lsg\n   ```\n\n3.  Write documentation for each module *app/assets/stylesheets/partials/_buttons.lsg* (to describe *_buttons.sass* in the same folder):\n\n        # Buttons\n\n        ```\n        <button class="button">Example button</button>\n        ```\n\n        ```\n        <button class="button -primary">Example button</button>\n        ```\n\n4. Open <http://localhost:3000/assets/styleguide.html>.\n   This will automatically:\n   * Combine all Markdown files and convert them to HTML\n   * Create a beautiful style guide\n   * Show the HTML source syntax highlighted close to each example\n\n### Tips for Rails\n\n*  Add the _styleguide.html_ to the precompile list in _config/application.rb_:\n\n   ``` ruby\n   config.assets.precompile += ["styleguide.html"]\n   ```\n* There is a [Rails example application](https://github.com/livingstyleguide/examples/tree/master/rails-example) available on Github.\n*  Use _sass-rails_ > v5 to allow _Sass_ > v3.2:\n\n   ``` ruby\n   # Gemfile:\n   gem "sass-rails", "~> 5.0.0.beta1"\n   ```\n\n   See [issue #99](https://github.com/livingstyleguide/livingstyleguide/issues/99) for discussions.\n\n\n### Using it with Rails 4\n\nSince Rails 4 non-digest assets are not created anymore. If you want a public sharable url consider using something like [Non Stupid Digest Assets](https://github.com/alexspeller/non-stupid-digest-assets)\n\n\n## Middleman Integration\n\n1. Setup:\n   Add this line to your application\xe2\x80\x99s _Gemfile_:\n\n   ```\n   gem "livingstyleguide"\n   ```\n\n   And then execute:\n\n   ```\n   $ bundle\n   $ middleman\n   ```\n\n2. Create *_source/styleguide.html.lsg_* with:\n   ```\n   // Replace with your default Sass/SCSS file name:\n   @scss application.css.scss\n\n   // Set the HTML title of the document:\n   @title My Living Style Guide\n\n   // Import all your style guide files\n   @import css/**/*.lsg\n   ```\n\n3. Write documentation for each module *source/css/partials/_buttons.lsg* (to describe *_buttons.sass* in the same folder):\n\n        # Buttons\n\n        ```\n        <button class="button">Example button</button>\n        ```\n\n        ```\n        <button class="button -primary">Example button</button>\n        ```\n\n4. Open <http://localhost:4567/styleguide.html>.\n   This will automatically:\n   * Combine all Markdown files and convert them to HTML\n   * Create a beautiful style guide\n   * Show the HTML source syntax highlighted close to each example\n\n### Tips for Middleman\n\n* Don\xe2\x80\x99t put the _styleguide.html.lsg_ into your CSS folder (`source/css/`). It won\xe2\x80\x99t work.\n* There is a [Middleman example application](https://github.com/livingstyleguide/examples/tree/master/middleman-example) available on Github.\n* A more complex production project can [be found online](http://livingstyleguide.com/eurucamp/). The complete source of this Middleman project [is available on Github](https://github.com/eurucamp/livingstyleguide-eurucamp). You\xe2\x80\x99ll find a lot of configuration on how to make the style guide look beautiful.\n\n\n## Grunt\n\nSee [NexwayGroup/grunt-livingstyleguide](https://github.com/NexwayGroup/grunt-livingstyleguide#readme).\n\n\n## Gulp\n\nSee [efacilitation/gulp-livingstyleguide](https://github.com/efacilitation/gulp-livingstyleguide#readme).\n\n\n## Broccoli\n\nSee [livingstyleguide/broccoli-livingstyleguide](https://github.com/livingstyleguide/broccoli-livingstyleguide#usage).\n\n\n## Ember CLI\n\nSee [livingstyleguide/broccoli-livingstyleguide](https://github.com/livingstyleguide/broccoli-livingstyleguide#usage) (comments on Ember CLI can be found there).\n\n\n----\n\n\n## Writing the style guide\n\nJust write normal Markdown. The style guide examples are written in code blocks surrounded by three backticks:\n\n    ```\n    <h1>This is an example</h1>\n    ```\n\nJust make sure, when you write a headline, put a space between `#` and the headline.\nIn other words: `# Headline`, not `#Headline`.\n\nIn addition to Markdown, there are several commands (starting with an `@`) which automate things to make generating style guides more fun. Commands can be used within and outside of code blocks, but will have a different meaning. Commands available are:\n\n* [@import](#importing-files)\n* [@colors](#colors)\n* [@haml](#haml-examples)\n* [@scss](#manipulating-css-per-example)\n* [@javascript](#javascript-examples)\n* [@coffee-script/@coffee](#coffeescript-examples)\n* [@font-example](#font-examples)\n* [@require](#require-ruby-files-or-gems)\n\n\n## Importing Files\n\nYou can import any other *.lsg file at any place within any *.lsg file:\n\n    ```\n    // Import a file:\n    @import folder/file.lsg\n\n    // Import a file (`.lsg` will be added by default):\n    @import folder/file\n\n    // Import a file starting with `_` (folder/_file.lsg); this works automatically:\n    @import folder/file\n\n    // Import multiple files:\n    @import folder/*.lsg\n    @import folder/*\n\n    // Importing from multiple folders:\n    @import **/*.lsg\n    @import **/*\n\n    // Importing a Haml file (the resulting HTML will be rendered into the style guide):\n    @import folder/file.haml\n    @import folder/*.haml\n    @import **/*.haml\n    ```\n\nAll file types supported by [Tilt](https://github.com/rtomayko/tilt#readme) can be imported.\nBy default, `@import` is looking for `*.lsg` files.\n\n\n## Writing Examples\n\nA default example outputs the HTML source as:\n\n* Real HTML in a wrapper to display the results\n* Syntax-highligted code below\n\nExample:\n\n    ```\n    <button class="button">Example button</button>\n    ```\n\nThere are more **commands** to generate output. They start with an `@` and can be put in the code block:\n\n\n### Colors\n\nYou can automatically generate color swatches out of your Sass variables:\n\n    @colors {\n      $light-red  $gray  $green  $red  $dark-red  $black\n    }\n\nBy clicking the color swatch in the style guide, users can copy the hex code of\nthe color (useful for designers). When pointing the cursor on the variable name,\nit will be copied on click instead (useful for developers).\n\nThe output will respect newlines. The example below will create a 3 \xc3\x97 3 matrix\nof color swatches and groups shades in columns which might be more easy to\nunderstand. `-` leaves a cell empty in the matrix:\n\n    @colors {\n      -       $light-red  $gray\n      $green  $red        -\n      -       $dark-red   $black\n    }\n\nThe LivingStyleGuide also supports CSS colors and Sass functions. All of them\nwill work:\n\n    @colors {\n      red        #ca1f70              #FFF               rgba(0, 0, 0, 0.5)\n      $my-color  my-color-function()  lighten(red, 10%)  darken($my-color, 20%)\n    }\n\n\n### Haml Examples\n\nThis will output the code as HTML but display the syntax highlighted\nsource as Haml ([learn how to use Haml by default](#default-commands)):\n\n    ```\n    @haml\n    %button.button Example button\n    ```\n\n\n### Manipulating CSS per example\n\nYou can add any CSS to each example if it helps to make it better in the style guide only.\nFor example, add some margin between elements:\n\n    ```\n    <button class="button">Example button</button>\n    <button class="button -primary">Example button</button>\n    @css {\n      .button + .button {\n        margin-left: 3em;\n      }\n    }\n    ```\n\nThis adds `3em` margin between both buttons.\nTo avoid this to affect other examples, the CSS code will be scoped to this example only (each example automatically gets a unique id).\n\nIf you need the same CSS code for several examples, you can put the CSS outside of the example.\nThis way it will be scoped to the current file:\n\n\n    ```\n    <button class="button">Example button</button>\n    <button class="button -primary">Example button</button>\n    ```\n\n    ```\n    <a class="button">Example button</a>\n    <a class="button -primary">Example button</a>\n    ```\n\n    @css {\n      .button + .button {\n        margin-left: 3em;\n      }\n    }\n\nFor Sass you can also use `@sass` and `@scss`:\n\n    @sass\n      .button + .button\n        margin-left: 3em\n\n    @scss {\n      .button + .button {\n        margin-left: 3em;\n      }\n    }\n\nWithin the `@scss`/`@sass` helper, all variables, mixins, \xe2\x80\xa6 of your project are\navailable. For example, if `my-styles.scss` sets `$my-project-margin`, you can\nwrite this:\n\n    @scss my-styles.scss\n\n    @scss {\n      .button + .button {\n        margin-left: $my-project-margin;\n      }\n    }\n\nIt is possible to add Sass code without scoping (works for `@css/scss/sass`).\n\n    @scss scope: global {\n      .code { ... }\n    }\n\nOr as a shortcut inspired by Sass\xe2\x80\x99 global variables (for `@scss/@sass`):\n\n    @scss !global {\n      .code { ... }\n    }\n\n\n### JavaScript Examples\n\nThis will show and execute the JavaScript, e.\xc2\xa0g. you designed tabs and\nneed few lines of jQuery to bring them alive.\n\n    ```\n    @javascript {\n      $(".button").click(function() {\n        alert("Hello World!");\n      });\n    }\n    ```\n\n\n### CoffeeScript Examples\n\nSame example but using [CoffeeScript](http://coffeescript.org). It will be\nexecuted as JavaScript and displayed as CoffeeScript:\n\n    ```\n    @coffee-script\n      $(".button").click ->\n        alert "Hello World!"\n    ```\n\n\n### Font Examples\n\nShow which fonts should be used on your website\xe2\x80\x94this will output and example text block (A\xe2\x80\x94Z, a\xe2\x80\x94z, 0\xe2\x80\x949, and some special characters) of the given font. It accepts valid CSS like for `font: 32px comic sans ms;`.\n\n\n    @font-example 32px comic sans ms\n\n\nUse your own text (defaults to \xe2\x80\x9cABC\xe2\x80\xa6\\nabc\xe2\x80\xa6\\n123\xe2\x80\xa6\\n!&\xe2\x80\xa6\xe2\x80\x9d if not set):\n\n    @font-example 32px comic sans ms {\n      Schwei\xc3\x9fgequ\xc3\xa4lt z\xc3\xbcndet Typograf Jakob\n      verflixt \xc3\xb6de Pangramme an.\n    }\n\n\n### Require Ruby files or Gems\n\nYou can require any Ruby file (e.g. for custom commands) or Ruby Gems (e.g. a\nCompass plugin:\n\n    Loads `my-ruby-file.rb`:\n    @require my-ruby-file\n\n    Loads the Susy Gem (must be installed on your system):\n    @require susy\n\n\n### Output Code\n\nIf you just want to output code with no extras (just like in a normal Markdown file), you only need to add the language:\n\n    ``` html\n    <div>Some HTML that just gets syntax-higlighted but not put into the document\xe2\x80\x99s DOM</div>\n    ```\n\nNo syntax highlighter:\n\n    ``` plain\n    <div>Some HTML that just gets syntax-higlighted but not put into the document\xe2\x80\x99s DOM</div>\n    ```\n\n\n### Default Options\n\nYou can set options to apply to all commands or all commands giving a\nname.\nThis is useful, when you depend on Haml or other templating engines.\nAdd a list of default commands to your _styleguide.html.lsg_:\n\nFor example without defaults:\n\n    @header\n      @haml\n      .my-header My Style Guide\n\n    ```\n    @haml\n    .my-example\n    ```\n\nWith defaults:\n\n    @default type: haml\n\n    @header\n      .my-header My Style Guide\n\n    ```\n    .my-example\n    ```\n\n## Working with Existing View Templates\n\nIf you want your style guide to work as an API, you might have views\nalready written somewhere else and don\xe2\x80\x99t want to write the same HTML\ncode into the style guide.\n\nFirst, there is the `@data` command, which sets local variables to\nrender the view:\n\n    ```\n    <h1><%= foo %></h1>\n    @type erb\n    @data {\n      "foo": "bar"\n    }\n    ```\n\nThis will render as `<h1>bar</h1>` in the HTML but show the ERB source\nbelow. The data is written using JSON or YAML syntax (as JSON is a subset of\nYAML):\n\n    ```\n    <h1><%= foo %></h1>\n    @type erb\n    @data format: yaml\n      foo: bar\n    ```\n\nIf there is already a view template, let\xe2\x80\x99s name it\n`views/headline.html.erb`, you can use it:\n\n    ```\n    @use views/headline.html.erb\n    @data {\n      "foo": "bar"\n    }\n    ```\n\nNote: You don\xe2\x80\x99t need to set the `@type` as this is taken from the view\ntemplate file suffix.\n\n\n### Tipp: Edge Cases\n\nBy repeating using the same template with different data, you can show\nedge cases\xe2\x80\x94like very long user names or missing values\xe2\x80\x94in your style\nguide.\n\n\n## Styling the Style Guide\n\n### Custom Header\n\nThe examples in [the screenshot above](#readme) use custom headers to have an individual look.\nYou can add whatever HTML you want and some Sass to style it to your _styleguide.html.lsg:_\n\n```\n@header {\n  <div class="my-header">\n    <img src="my-style-guide-logo.svg" alt="My Style Guide">\n    <h1>My Style Guide</h1>\n  </div>\n}\n```\n\nYou can use any templating engine supported by Tilt:\n\n```\n@header type: haml\n  .my-header\n    %img(src="my-style-guide-logo.svg" alt="My Style Guide")\n    %h1 My Style Guide\n```\n\n\n### Custom Footer\n\nSee [Custom Header](#custom-header), just use `@footer`.\n\n\n### Custom Head Elements\n\nSee [Custom Header](#custom-header), just use `@head`. This way you can\nadd any `<meta>` tag or link additional files.\n\n\n### Search\n\nEnable search for the style guide:\n\n```\n@search-box\n```\n\nThis will add a search box on top of the style guide which commands the content via JavaScript.\n\nYou can also customize (e.g. translate) the placeholder for the search box:\n\n```\n@search-box placeholder: Buscar\n```\n\n\n### Custom Settings\n\nMost of the design of the style guide itself, is calculated by few variables in the _styleguide.html.lsg:_\n\n```\n@style font-family: comic sans ms, arial, sans-serif\n@style font-size: 7em\n@style background-color: red\n@style border-color: $my-color\n@style color: #eee\n@style code-color: darken(red, 10%)\n@style color-swatch-border-radius: 0\n```\n\n* For a full list of options, [have a look at the source](https://github.com/livingstyleguide/livingstyleguide/blob/master/stylesheets/_livingstyleguide.scss) (just strip `$lsg-` from the variables).\n* Every Sass expression is allowed\n* Variables defined in your production Sass are available\n* `code-color` generates a whole color scheme for syntax highlighting in your corporate colors\n* `color-swatch-border-radius: 0` creates squared color swatches\n\nJust play a bit and create an individual style guide which represents your personal taste :)\n\n\n## Including JavaScript\n\nIf you need external JavaScript files to be included in the style guide, there are two options: before (in the `<head>`) or after (just before the closing `</body>`). It accepts a list of URLs (ending with `*.js`) or plain JavaScript code:\n\n```\n@javascript-before assets/modernizr.js\n\n@javascript-after http://code.jquery.com/jquery-2.1.3.min.js\n@javascript-after assets/application.js\n@javascript-after {\n  $(function() {\n    // custom code\n  });\n}\n```\n\nIf you use [@javascript](#javascript-examples) or [@coffee-script](#coffeescript-examples), your application files and jQuery might need to be included in the `javascript-before` section.\n\n\n### Using CoffeeScript\n\nSame example as above, just using CoffeeScript. Note, it is using the\nindented syntax (no colon but indent following lines by two spaces)\nwhich works well with CoffeeScript.\n\n```\n@javascript-before assets/modernizr.js\n\n@javascript-after http://code.jquery.com/jquery-2.1.3.min.js\n@javascript-after assets/application.js\n@javascript-after transpiler: coffee-script\n  $ ->\n    # custom code\n```\n\n----\n\n\n## Installation\n\nAdd this line to your application\xe2\x80\x99s Gemfile:\n\n``` ruby\ngem "livingstyleguide"\n```\n\nAnd then execute:\n\n    $ bundle\n\nOr install it yourself as:\n\n    $ gem install livingstyleguide\n\n\n----\n\n\n## Contributing\n\n1. Fork it\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Check your changes for coding style:\n  * `scss-lint -c .scss-style.yml **/*.scss`\n  * `rubocop --config .ruby-style.yml`\n4. Commit your changes (`git commit -am "Add some feature"`)\n5. Push to the branch (`git push origin my-new-feature`)\n6. Create new Pull Request\n\n\n----\n\n\n## Code of Conduct\n\nWe do follow the [Contributor Covenant Code of Conduct]; our version including contact information can be found in [CODE-OF-CONDUCT.de].\n\n\n[Contributor Covenant Code of Conduct]: https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n[CODE-OF-CONDUCT.de]: https://livingstyleguide.org/code-of-conduct.html\n\n\n----\n\n\n## Copyright\n\nCopyright 2012\xe2\x80\x942017 [Nico Hagenburger](http://www.hagenburger.net).\nSee [MIT-LICENSE.md](MIT-LICENSE.md) for details.\nGet in touch with [@hagenburger](http://twitter.com/hagenburger) on Twitter or [open an issue](https://github.com/livingstyleguide/livingstyleguide/issues/new).\n'