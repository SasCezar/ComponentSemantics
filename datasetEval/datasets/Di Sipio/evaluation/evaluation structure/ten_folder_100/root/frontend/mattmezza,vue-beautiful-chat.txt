b'# vue-beautiful-chat\n\n`vue-beautiful-chat` provides an intercom-like chat window that can be included easily in any project for free. It provides no messaging facilities, only the view component.\n\n`vue-beautiful-chat` is porting to vue of `react-beautiful-chat` (which you can find [here](https://github.com/mattmezza/react-beautiful-chat))\n\n<a href="https://www.npmjs.com/package/vue-beautiful-chat" target="\\_parent">\n  <img alt="" src="https://img.shields.io/npm/dm/vue-beautiful-chat.svg" />\n</a>\n<a href="https://github.com/mattmezza/vue-beautiful-chat" target="\\_parent">\n  <img alt="" src="https://img.shields.io/github/stars/mattmezza/vue-beautiful-chat.svg?style=social&label=Star" />\n</a>\n\nGo to [FAQ](#faq) \xe2\xac\x87\xef\xb8\x8f\n\n![gif](https://media.giphy.com/media/3ohs4wE4DqXw84xAMo/giphy.gif)\n\n## Features\n\n- Customizeable\n- Backend agnostic\n- Free\n\n## [Demo](https://mattmezza.github.io/vue-beautiful-chat/)\n\n## Table of Contents\n- [Installation](#installation)\n- [Example](#example)\n- [Components](#components)\n\n## Installation\n\n```\n$ yarn add vue-beautiful-chat\n```\n\n## Example\n```javascript\nimport Chat from \'vue-beautiful-chat\'\nVue.use(Chat)\n```\n\n```html\n<template>\n  <div>\n    <beautiful-chat\n      :participants="participants"\n      :titleImageUrl="titleImageUrl"\n      :onMessageWasSent="onMessageWasSent"\n      :messageList="messageList"\n      :newMessagesCount="newMessagesCount"\n      :isOpen="isChatOpen"\n      :close="closeChat"\n      :icons="icons"\n      :open="openChat"\n      :showEmoji="true"\n      :showFile="true"\n      :showTypingIndicator="showTypingIndicator"\n      :colors="colors"\n      :alwaysScrollToBottom="alwaysScrollToBottom"\n      :messageStyling="messageStyling"\n      @onType="handleOnType"\n      @edit="editMessage" />\n  </div>\n</template>\n```\n```javascript\nimport CloseIcon from \'vue-beautiful-chat/src/assets/close-icon.png\'\nimport OpenIcon from \'vue-beautiful-chat/src/assets/logo-no-bg.svg\'\nimport FileIcon from \'vue-beautiful-chat/src/assets/file.svg\'\nimport CloseIconSvg from \'vue-beautiful-chat/src/assets/close.svg\'\n\nexport default {\n  name: \'app\',\n  data() {\n    return {\n      icons:{\n        open:{\n          img: OpenIcon,\n          name: \'default\',\n        },\n        close:{\n          img: CloseIcon,\n          name: \'default\',\n        },\n        file:{\n          img: FileIcon,\n          name: \'default\',\n        },\n        closeSvg:{\n          img: CloseIconSvg,\n          name: \'default\',\n        },\n      },\n      participants: [\n        {\n          id: \'user1\',\n          name: \'Matteo\',\n          imageUrl: \'https://avatars3.githubusercontent.com/u/1915989?s=230&v=4\'\n        },\n        {\n          id: \'user2\',\n          name: \'Support\',\n          imageUrl: \'https://avatars3.githubusercontent.com/u/37018832?s=200&v=4\'\n        }\n      ], // the list of all the participant of the conversation. `name` is the user name, `id` is used to establish the author of a message, `imageUrl` is supposed to be the user avatar.\n      titleImageUrl: \'https://a.slack-edge.com/66f9/img/avatars-teams/ava_0001-34.png\',\n      messageList: [\n          { type: \'text\', author: `me`, data: { text: `Say yes!` } },\n          { type: \'text\', author: `user1`, data: { text: `No.` } }\n      ], // the list of the messages to show, can be paginated and adjusted dynamically\n      newMessagesCount: 0,\n      isChatOpen: false, // to determine whether the chat window should be open or closed\n      showTypingIndicator: \'\', // when set to a value matching the participant.id it shows the typing indicator for the specific user\n      colors: {\n        header: {\n          bg: \'#4e8cff\',\n          text: \'#ffffff\'\n        },\n        launcher: {\n          bg: \'#4e8cff\'\n        },\n        messageList: {\n          bg: \'#ffffff\'\n        },\n        sentMessage: {\n          bg: \'#4e8cff\',\n          text: \'#ffffff\'\n        },\n        receivedMessage: {\n          bg: \'#eaeaea\',\n          text: \'#222222\'\n        },\n        userInput: {\n          bg: \'#f4f7f9\',\n          text: \'#565867\'\n        }\n      }, // specifies the color scheme for the component\n      alwaysScrollToBottom: false, // when set to true always scrolls the chat to the bottom when new events are in (new message, user starts typing...)\n      messageStyling: true // enables *bold* /emph/ _underline_ and such (more info at github.com/mattezza/msgdown)\n    }\n  },\n  methods: {\n    sendMessage (text) {\n      if (text.length > 0) {\n        this.newMessagesCount = this.isChatOpen ? this.newMessagesCount : this.newMessagesCount + 1\n        this.onMessageWasSent({ author: \'support\', type: \'text\', data: { text } })\n      }\n    },\n    onMessageWasSent (message) {\n      // called when the user sends a message\n      this.messageList = [ ...this.messageList, message ]\n    },\n    openChat () {\n      // called when the user clicks on the fab button to open the chat\n      this.isChatOpen = true\n      this.newMessagesCount = 0\n    },\n    closeChat () {\n      // called when the user clicks on the botton to close the chat\n      this.isChatOpen = false\n    },\n    handleScrollToTop () {\n      // called when the user scrolls message list to top\n      // leverage pagination for loading another page of messages\n  \t},\n    handleOnType () {\n      console.log(\'Emit typing event\')\n    },\n    editMessage(message){\n      const m = this.messageList.find(m=>m.id === message.id);\n      m.isEdited = true;\n      m.data.text = message.data.text;\n    }\n}\n```\n\nFor more detailed examples see the demo folder.\n\n## Components\n\n### Launcher\n\n`Launcher` is the only component needed to use vue-beautiful-chat. It will react dynamically to changes in messages. All new messages must be added via a change in props as shown in the example.\n\n#### Props\n\n|prop | type   | description |\n|-----|--------|---------------|\n| *participants | [agentProfile] | Represents your product or service\'s customer service agents. Fields for each agent: id, name, imageUrl|\n| *onMessageWasSent | function(message) | Called when a message a message is sent with a message object as an argument. |\n| *isOpen | Boolean | The bool indicating whether or not the chat window should be open. |\n| *open | Function | The function passed to the component that mutates the above mentioned bool toggle for opening the chat |\n| *close | Function | The function passed to the component that mutates the above mentioned bool toggle for closing the chat |\n| messageList | [message] | An array of message objects to be rendered as a conversation. |\n| showEmoji | Boolean | A bool indicating whether or not to show the emoji button\n| showFile | Boolean | A bool indicating whether or not to show the file chooser button\n| showTypingIndicator | Boolean | A bool indicating whether or not to show the `typing` indicator\n| colors | Object | An object containing the specs of the colors used to paint the component. [See here](#faq)\n| messageStyling | Boolean | A bool indicating whether or not to enable `msgdown` support for message formatting in chat. [See here](#faq)\n\n#### Events\n\n|event | params   | description |\n|-----|--------|---------------|\n| onType | undefined | Fires when user types on the message input |\n| edit | `message` | Fires after user edited message |\n\n#### Slots\n\n##### header\n\nReplacing default header.\n\n``` html\n<template v-slot:header> \n  \xf0\x9f\xa4\x94 Good chat between {{participants.map(m=>m.name).join(\' & \')}} \n</template>\n```\n\n##### user-avatar\n\nReplacing user avatar.\nParams: `message`, `user`\n\n``` html\n<template v-slot:user-avatar="{ message, user }">\n  <div style="border-radius:50%; color: pink; font-size: 15px; line-height:25px; text-align:center;background: tomato; width: 25px !important; height: 25px !important; min-width: 30px;min-height: 30px;margin: 5px; font-weight:bold" v-if="message.type === \'text\' && user && user.name">\n    {{user.name.toUpperCase()[0]}}\n  </div>\n</template>\n```\n\n##### text-message-body\n\nChange markdown for text message.\nParams: `message`\n\n``` html\n<template v-slot:text-message-body="{ message }">\n  <small style="background:red" v-if="message.meta">\n    {{message.meta}}\n  </small>\n  {{message.text}}\n</template>\n```\n\n##### system-message-body\n\nChange markdown for system message.\nParams: `message`\n\n``` html\n<template v-slot:system-message-body="{ message }">\n  [System]: {{message.text}}\n</template>\n```\n\n### Message Objects\n\nMessage objects are rendered differently depending on their type. Currently, only text, emoji and file types are supported. Each message object has an `author` field which can have the value \'me\' or the id of the corresponding agent.\n\n``` javascript\n{\n  author: \'support\',\n  type: \'text\',\n  id: 1, // or text \'1\'\n  isEdited: false,\n  data: {\n    text: \'some text\',\n    meta: \'06-16-2019 12:43\'\n  }\n}\n\n{\n  author: \'me\',\n  type: \'emoji\',\n  id: 1, // or text \'1\'\n  isEdited: false,\n  data: {\n    code: \'someCode\'\n  }\n}\n\n{\n  author: \'me\',\n  type: \'file\',\n  id: 1, // or text \'1\'\n  isEdited: false,\n  data: {\n\tfile: {\n\t\tname: \'file.mp3\',\n\t\turl: \'https:123.rf/file.mp3\'\n\t  }\n\t}\n}\n\n```\n\n\n#### Quick replies\n\nWhen sending a message, you can provide a set of sentences that will be displayed in the user chat as quick replies. Adding in the message object a `suggestions` field with the value an array of strings will trigger this functionality\n\n```javascript\n{\n  author: \'support\',\n  type: \'text\',\n  id: 1, // or text \'1\'\n  data: {\n    text: \'some text\',\n    meta: \'06-16-2019 12:43\'\n  },\n  suggestions: [\'some quick reply\', ..., \'another one\']\n}\n```\n\n### FAQ\n\n<details><summary>How to get the demo working?</summary>\n<p>\n\n- `cd vue-beautiful-chat`\n- `yarn watch` # this starts the compiler so everytime you edit files they get compiled\n- `cd demo`\n- `yarn dev` # this starts a web server on localhost:8080 so the demo shows up - it also watches for the demo files changes\n\n</p>\n</details>\n\n<details><summary>How can I add a feature or fix a bug?</summary>\n<p>\n\n- Fork the repository\n- Fix/add your changes\n- `yarn build` on the root to have the library compiled with your latest changes\n- create a pull request describing what you did\n- discuss the changes with the maintainer\n- boom! your changes are added to the main repo\n- a release is created almost once per week \xf0\x9f\x98\x89\n\n</p>\n</details>\n\n<details><summary>How can I customize the colors?</summary>\n<p>\n\n- When initializing the component, pass an object specifying the colors used:\n\n```javascript\n\nlet redColors = {\n  header: {\n    bg: \'#D32F2F\',\n    text: \'#fff\'\n  },\n  launcher: {\n    bg: \'#D32F2F\'\n  },\n  messageList: {\n    bg: \'#fff\'\n  },\n  sentMessage: {\n    bg: \'#F44336\',\n    text: \'#fff\'\n  },\n  receivedMessage: {\n    bg: \'#eaeaea\',\n    text: \'#222222\'\n  },\n  userInput: {\n    bg: \'#fff\',\n    text: \'#212121\'\n  }\n}\n\n<beautiful-chat\n      ...\n      :colors="redColors" />\n```\n\nThis is the red variant. Please check [this file](https://github.com/mattmezza/vue-beautiful-chat/tree/master/demo/src/colors.js) for the list of variants shown in the demo page online.\n\nPlease note that you need to pass an Object containing each one of the color properties otherwise the validation will fail.\n\n</p>\n</details>\n<details><summary>How can I add message formatting?</summary>\n<p>\n\nGood news, message formatting is already added for you. You can enable it by setting `messageStyling` to `true` and you will be using the [msgdown](https://github.com/mattmezza/msgdown) library. You can enable/disable the formatting support at any time, or you can let users do it whenever they prefer.\n\n</p>\n</details>\n\n # Join the team \n Do you want to collaborate? Join the project at https://crowdforge.io/projects/581\n'