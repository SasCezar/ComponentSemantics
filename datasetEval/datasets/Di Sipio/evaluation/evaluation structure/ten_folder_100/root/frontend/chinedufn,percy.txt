b'Percy\n=====\n\n[![Build status](https://circleci.com/gh/chinedufn/percy.svg?style=shield&circle-token=:circle-token)](https://circleci.com/gh/chinedufn/percy)\n\n> A modular toolkit for building interactive frontend browser apps with Rust + WebAssembly. Supports server side rendering.\n\n## [The Percy Book](https://chinedufn.github.io/percy/)\n\n[The Percy Book](https://chinedufn.github.io/percy/)\n\nPercy is modular toolkit geared towards building single page web apps entirely in Rust that can also be rendered at the server.\n\nThis allows you to build search engine friendly browser applications in Rust.\n\n---\n\n## What is an isomorphic web app?\n\nAn isomorphic web application allows the same application code (in our case Rust code) to be run on both the server-side and the client-side (usually a web browser).\n\nSo the server would render the application into a `String` of HTML and send that down to the client.\n\nThen the client would take over, re-rendering the application to a DOM `Node` whenever application state changes.\n\nIn a browser our application renders to an `HtmlElement`, and on the server our application renders to a `String`.\n\n## API Documentation\n\n- [virtual-dom-rs API docs](https://chinedufn.github.io/percy/api/virtual_dom_rs/macro.html.html)\n\n- [html-macro API docs](https://chinedufn.github.io/percy/api/html_rs_macro)\n\n- [router-rs API docs](https://chinedufn.github.io/percy/api/router_rs)\n\n- [css-rs-macro API docs](https://chinedufn.github.io/percy/api/css_rs_macro)\n\n## Getting Started\n\nFor a full example of an isomorphic web app in Rust check out the [isomorphic example](examples/isomorphic).\n\n---\n\nThe best way to get up to speed is by checking out [The Percy Book](https://chinedufn.github.io/percy/), but here are some\nvery basic examples to get your feet wet with.\n\n### Quickstart - Getting your feet wet\n\nYou can create applications that only have server side rendering, client side rendering, or both!\n\nHere\'s a quick-and-easy working example of client side rendering that you can try right now!\n\n---\n\nFirst, Create a new project using\n\n```sh\ncargo new client-side-web-app --lib\ncd client-side-web-app\n```\n\nAdd the following files to your project.\n\n```sh\ntouch build.sh\ntouch index.html\n```\n\nHere\'s the end directory structure:\n\n```sh\n.\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 Cargo.toml\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 build.sh\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 index.html\n\xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 src\n    \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 lib.rs\n```\n\nNow edit each file with the following contents:\n\n```sh\n# contents of build.sh\n\n#!/bin/bash\n\ncd "$(dirname "$0")"\n\nmkdir -p public\n\nCSS_FILE="$(pwd)/public/app.css"\nOUTPUT_CSS=$CSS_FILE wasm-pack build --no-typescript --dev --target no-modules --out-dir ./public\ncp index.html public/\n```\n\n```rust\n// contents of src/lib.rs\n\n#![feature(proc_macro_hygiene)]\n\nuse wasm_bindgen::prelude::*;\nuse web_sys;\nuse web_sys::MouseEvent;\n\nuse css_rs_macro::css;\nuse virtual_dom_rs::prelude::*;\n\n#[wasm_bindgen]\nstruct App {\n  dom_updater: DomUpdater\n}\n\n#[wasm_bindgen]\nimpl App {\n    #[wasm_bindgen(constructor)]\n    pub fn new () -> App {\n        let start_view = html! { <div> Hello </div> };\n\n        let window = web_sys::window().unwrap();\n        let document = window.document().unwrap();\n        let body = document.body().unwrap();\n\n        let mut dom_updater = DomUpdater::new_append_to_mount(start_view, &body);\n\n        let greetings = "Hello, World!";\n\n        let end_view = html! {\n           // Use regular Rust comments within your html\n           <div class="big blue">\n              /* Interpolate values using braces */\n              <strong>{ greetings }</strong>\n\n              <button\n                class=MY_COMPONENT_CSS\n                onclick=|_event: MouseEvent| {\n                   web_sys::console::log_1(&"Button Clicked!".into());\n                }\n              >\n                // No need to wrap text in quotation marks (:\n                Click me and check your console\n              </button>\n           </div>\n        };\n\n        dom_updater.update(end_view);\n\n        App { dom_updater }\n    }\n}\n\nstatic MY_COMPONENT_CSS: &\'static str = css!{r#"\n:host {\n    font-size: 24px;\n    font-weight: bold;\n}\n"#};\n\nstatic _MORE_CSS: &\'static str = css!{r#"\n.big {\n  font-size: 30px;\n}\n\n.blue {\n  color: blue;\n}\n"#};\n```\n\n```toml\n# contents of Cargo.toml\n\n[package]\nname = "client-side-web-app"\nversion = "0.1.0"\nauthors = ["Friends of Percy"]\nedition = "2018"\n\n[lib]\ncrate-type = ["cdylib"] # Don\'t forget this!\n\n[dependencies]\nwasm-bindgen = "0.2.37"\njs-sys = "0.3.14"\nvirtual-dom-rs = "0.6"\ncss-rs-macro = "0.1"\n\n[dependencies.web-sys]\nversion = "0.3"\nfeatures = [\n    "Document",\n    "MouseEvent",\n    "Window",\n    "console"\n]\n```\n\n```html\n<!-- contents of index.html -->\n<!DOCTYPE html>\n<html lang="en">\n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1">\n        <link rel="stylesheet" type="text/css" href="app.css"/>\n        <title>Client Side Demo</title>\n    </head>\n    <body style=\'margin: 0; padding: 0; width: 100%; height: 100%;\'>\n        <script src=\'/client_side_web_app.js\'></script>\n        <script>\n            window.wasm_bindgen(`/client_side_web_app_bg.wasm`).then(() => {\n                const { App } = window.wasm_bindgen\n                new App()\n            })\n        </script>\n    </body>\n</html>\n```\n\nNow run\n\n```sh\n# Used to compile your Rust code to WebAssembly\ncargo install wasm-pack\n\n# Or any other static file server that supports the application/wasm mime type\nnpm install -g http-server\n\nchmod +x ./build.sh\n./build.sh\n\n# Visit localhost:8080 in your browser\nhttp-server ./public --open\n```\n\nAnd you should see the following:\n\n![Client side example](./example.png)\n\nNice work!\n\n## More Examples\n\n- [Isomorphic web app](examples/isomorphic)\n\n- [CSS in Rust](examples/css-in-rust)\n\n- [Unit Testing View Components](examples/unit-testing-components)\n\n- [Open an Issue or PR if you have an idea for a useful example!](https://github.com/chinedufn/percy/issues)\n\n## Contributing\n\nAlways feel very free to open issues and PRs with any questions / thoughts that you have!\n\nEven if it feels basic or simple - if there\'s a question on your mind that you can\'t quickly answer yourself then that\'s a failure\nin the documentation.\n\nMuch more information on how to contribute to the codebase can be found in the [contributing section](https://chinedufn.github.io/percy/contributing/getting-started.html) of The Percy Book!\n\n## To Test\n\nTo run all of the unit, integration and browser tests, [grab the dependencies then](https://chinedufn.github.io/percy/contributing/getting-started.html) :\n\n```sh\n./test.sh\n```\n\n## See Also\n\n- [virtual-dom](https://github.com/Matt-Esch/virtual-dom) - a JavaScript virtual-dom implementation that I took inspiration from.\n\n- [How to write your own Virtual DOM](https://medium.com/@deathmood/how-to-write-your-own-virtual-dom-ee74acc13060) - helped me better understand how a virtual-dom works.\n\n- [Sheetify](https://github.com/stackcss/sheetify) inspired the css! macro\n\n## License\n\nMIT\n'