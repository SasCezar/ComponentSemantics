b'# vue-2-boilerplate\n> A boilerplate for building medium to large Vue 2 single page applications\n\nThis boilerplate is based on the Vue webpack template.\nCommon topics are discussed in the VueJS [docs](http://vuejs-templates.github.io/webpack). Make sure to read it!\n\n## Usage\nTo get up and running run:\n``` bash\n$ npm install\n$ npm run serve\n```\nYes, that\'s it. Only two commands!\n\nIf you still think that\'s too much effort, you could also run:\n``` bash\n$ npm i && npm run serve\n```\nBut yeah, this will basically do the same as `npm install`.\nIf even this is too much of a deal, try creating an alias and bind `npm install && npm run serve` to `npmis`.\n\n## Configuration ##\n> Wait a minute, you just said that I only need to run npm install?\n> What\'s this? I need to do more?\n\nYeah, to get up and running real quick, `npm install` is enough.\nBut if you want to, let\'s say, connect to an external API, there\'s a little bit more involved.\nYou need to configure your application a bit more, explained below:\n\n### Environment variables ###\nIn the root of the boilerplate is a predefined environment file.\nCopy the file and name it `.env` or a configuration specific file like `.env.dev`.\nFor more information, visit the [docs](https://github.com/vuejs/vue-cli/blob/dev/docs/env.md).\n\n## What\'s included ##\n- `npm run serve`: first-in-class development experience.\n- `npm run build`: production ready build.\n- `npm run unit`: start the Karma Test Runner.\n- `npm run e2e`: start the Nightwatch Test Runner.\n- `npm run lint`: lint the files using ESLint.\n\n## Important Files ##\nSo there are two important files that needs to be addressed:\n\n### main.js ###\nThis file will load your single page application and bootstrap all the plugins that are used.\nIt will also serve as the entry point which will be loaded and compiled using webpack.\n\n### App.vue ###\nThe main Vue file.\nThis file will load the page inside the `router-view`-component.\nIt will check if the user is authenticated and load the resources accordingly.\n\n## Directory Structure ##\nInside the `src`-directory, are a couple directories that needs to be addressed:\n\n### Assets ###\nThe assets that you want to use are places inside this directory.\nThis can be images, stylesheets, videos... you name it.\n\n### Components ###\nYour components will be placed inside this directory.\nAs you can see, this boilerplate comes already shipped with a pre-made card component.\n\n### Layouts ###\nYour layout files will be placed inside this directory.\nWhen you are building a large single page application, you will be using different layouts.\nFor instance, your login-page or register-page will have a different layout than your account-page.\n\nThe boilerplate comes out of the box with two layouts included.\nA minimal layout, used for the login and register page, and a default layout, used for the home and account page.\n\n### Locale ###\nThe Vue I18n plugin is used for localization.\nIn the locale directory you\'ll find an example for internalization.\nThis boilerplate comes with examples for English and Dutch out of the box, but feel free to add more!\n\n### Mixins ###\nThe mixins you want to use with Vue will be placed inside this directory.\n\nInside the mixins directory is a `slot`-mixin.\nThis mixin will add the `hasSlot()`-method to all the components it is used in.\n\n### Plugins ###\nThis boilerplate comes with a couple of plugins you can use.\nIt will load and configure:\n - axios\n - bootstrap\n - font-awesome\n - vue-i18n\n - vue-router\n - vuex\n - vuex-router-sync\n\nDon\'t like one of those plugins?\nJust remove the file from the `plugins`-directory and remove the entry from the `main.js`-file.\nAlso make sure to remove the package and dependencies from the `package.json`-file.\n\n### Proxies ###\nProxies are used to perform AJAX-requests.\nThis boilerplate comes with a base proxy which can be used to make performing AJAX-requests fairly easy.\nCreate a new proxy, for example `UserProxy`, and extend the `Proxy`.\nThis way you\'ve got access to the `all`, `find`, `update`, `create` and `destroy` methods.\nThe boilerplate comes with an `AccountProxy` and `AuthProxy` by default.\n\n### Routes ###\nIn this directory you can specify the routes that are used by this application.\nVue Router loads the routes located in this directory.\n\n### Store ###\nAs mentioned before, Vuex is used as a single point of truth.\nTo learn more about Vuex, visit the [documentation](http://vuex.vuejs.org)\n\n### Transformers ###\nTransformers are used to transform the incoming and outgoing requests.\nIf you have an API where you can retrieve posts from, a post wil look something like this:\n``` JSON\n{\n  "id" : 1,\n  "title" : "Hello World!",\n  "content" : "Lorem Ipsum",\n  "created_at" : "today"\n}\n```\nHowever, it feels weird to use snake_cased variables inside your camelCased application.\nThis is where transformers come in.\nSo given the previous example, using a transformer, it will look something like this:\n``` JSON\n{\n  "id" : 1,\n  "title" : "Hello World!",\n  "content" : "Lorem Ipsum",\n  "createdAt" : "today"\n}\n```\n\n### Utils ###\nHere you can place handy utils you want to use inside your application.\n\n### Views ###\nThe pages are placed inside this directory.\nBy default it comes with an `Account/Index.vue`, `Home/Index.vue`, `Login/Index.vue` and a `Register/Index.vue` page,\nbut feel free to add more.\n\n### Test ###\nBoth the Unit Tests and the End-2-End Tests are within the `test/` folder.\nUnit Tests should go inside the `test/unit/specs` folder.\nE2e Tests should go inside the `test/e2e/specs` folder.\nYou can read more about both test on the [Webpack Boilerplate Testing Session](http://vuejs-templates.github.io/webpack/unit.html).\n\n## Got questions or improvements? ##\nFeel free to hit me up on:\n - [Gitter](https://gitter.im/petervmeijgaard)\n - [GitHub](https://github.com/petervmeijgaard)\n - [Twitter](https://twitter.com/petervmeijgaard)\n\nOr create an [issue](https://github.com/petervmeijgaard/vue-2-boilerplate/issues)\n\n## Fork It And Make Your Own ##\nWhat are you waiting for?!\nMake something awesome!\n\n## License ##\nThe MIT License (MIT)\n\nCopyright (c) 2016 - 2018 Peter van Meijgaard\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n'