b'<p align="center">\n  <a href="https://kingsora.github.io/OverlayScrollbars">\n    <a href="https://kingsora.github.io/OverlayScrollbars"><img src="https://kingsora.github.io/OverlayScrollbars/design/logo.svg" width="200" height="133" alt="OverlayScrollbars"></a>\n  </a>\n</p>\n<h6 align="center">\n    <a href="https://github.com/KingSora/OverlayScrollbars/blob/master/package.json"><img src="https://img.shields.io/david/kingsora/overlayscrollbars.svg?style=flat-square" alt="Dependencies"></a>\n    <a href="https://www.npmjs.com/package/overlayscrollbars"><img src="https://img.shields.io/npm/dt/overlayscrollbars.svg?style=flat-square" alt="Downloads"></a>\n    <a href="https://www.npmjs.com/package/overlayscrollbars"><img src="https://img.shields.io/npm/v/overlayscrollbars.svg?style=flat-square" alt="Version"></a>\n    <a href="https://github.com/KingSora/OverlayScrollbars/blob/master/LICENSE"><img src="https://img.shields.io/github/license/kingsora/overlayscrollbars.svg?style=flat-square" alt="License"></a>\n</h6>\n<h3 align="center">\n    <a href="https://kingsora.github.io/OverlayScrollbars">Website</a>\n    &nbsp;&nbsp;&bull;&nbsp;&nbsp;\n    <a href="https://kingsora.github.io/OverlayScrollbars/#!documentation">Documentation</a>\n    &nbsp;&nbsp;&bull;&nbsp;&nbsp;\n    <a href="https://kingsora.github.io/OverlayScrollbars/#!demos">Demos</a>\n    &nbsp;&nbsp;&bull;&nbsp;&nbsp;\n    <a href="https://kingsora.github.io/OverlayScrollbars/#!extensions">Extensions</a>\n    &nbsp;&nbsp;&bull;&nbsp;&nbsp;\n    <a href="https://kingsora.github.io/OverlayScrollbars/#!faq">FAQ</a>\n</h3>\n\n> OverlayScrollbars is a javascript scrollbar plugin which hides native scrollbars, provides\ncustom styleable overlay scrollbars and keeps the native functionality and feeling.\n\n## Why\n\nI\'ve created this plugin because I hate ugly and space consuming scrollbars. Similar plugins haven\'t met my requirements in terms of features, quality, simplicity, license or browser support.\n\n## Goals & Features\n\n - A simple, powerful and good documented API.\n - High browser compatibility (<b>IE8+</b>, <b>Safari6+</b>, <b>Firefox</b>, <b>Opera</b>, <b>Chrome</b> and <b>Edge</b>).\n - Usage of the most recent technologies to ensure maximum efficiency and performance on newer browsers.\n - Can be used without any dependencies or with jQuery.\n - Automatic update detection - after the initialization you don\'t have to worry about updating.\n - Extremely powerful scroll method with features like animations, relative coordinates, scrollIntoView and more.\n - Mouse and touch support.\n - Textarea and Body support.\n - RTL Direction support. (with normalization)\n - Simple and effective scrollbar-styling.\n - Rich extension system.\n - TypeScript support.\n\n## Framework Wrapper\n\nOverlayScrollbars provides its own wrapper components for popular component-based front-end frameworks:\n\n<img align="left" src="https://kingsora.github.io/OverlayScrollbars/frameworks/react/logo.svg" width="80" height="80" alt="React">\n\n\n<a href="https://www.npmjs.com/package/overlayscrollbars-react"><img src="https://img.shields.io/npm/v/overlayscrollbars-react.svg?style=flat-square" alt="Version"></a>\n<a href="https://www.npmjs.com/package/overlayscrollbars-react"><img src="https://img.shields.io/npm/dt/overlayscrollbars-react.svg?style=flat-square" alt="Downloads"></a>\n[README](https://github.com/KingSora/OverlayScrollbars/tree/master/packages/overlayscrollbars-react)\n\n```sh\nnpm install overlayscrollbars-react\n```\n\n<img align="left" src="https://kingsora.github.io/OverlayScrollbars/frameworks/vue/logo.svg" width="80" height="80" alt="Vue">\n\n<a href="https://www.npmjs.com/package/overlayscrollbars-vue"><img src="https://img.shields.io/npm/v/overlayscrollbars-vue.svg?style=flat-square" alt="Version"></a>\n<a href="https://www.npmjs.com/package/overlayscrollbars-vue"><img src="https://img.shields.io/npm/dt/overlayscrollbars-vue.svg?style=flat-square" alt="Downloads"></a>\n[README](https://github.com/KingSora/OverlayScrollbars/tree/master/packages/overlayscrollbars-vue)\n\n```sh\nnpm install overlayscrollbars-vue\n```\n\n<img align="left" src="https://kingsora.github.io/OverlayScrollbars/frameworks/angular/logo.svg" width="80" height="80" alt="Angular">\n\n<a href="https://www.npmjs.com/package/overlayscrollbars-ngx"><img src="https://img.shields.io/npm/v/overlayscrollbars-ngx.svg?style=flat-square" alt="Version"></a>\n<a href="https://www.npmjs.com/package/overlayscrollbars-ngx"><img src="https://img.shields.io/npm/dt/overlayscrollbars-ngx.svg?style=flat-square" alt="Downloads"></a>\n[README](https://github.com/KingSora/OverlayScrollbars/tree/master/packages/overlayscrollbars-ngx)\n\n```sh\nnpm install overlayscrollbars-ngx\n```\n\n## Sponsors\n<table>\n    <tr>\n        <td>\n            <a href="https://www.browserstack.com" target="_blank">\n                <img align="center" src="https://kingsora.github.io/OverlayScrollbars/img/browserstack.png" width="250">\n            </a>\n        </td>\n        <td>\n            Thanks to <a href="https://www.browserstack.com" target="_blank">BrowserStack</a> for sponsoring open source projects and letting me test OverlayScrollbars for free.\n        </td>\n    </tr>\n</table>\n\n## Dependencies\n\n**The default version doesn\'t requires any dependencies!**\n\nIf you are using the jQuery dependent version it obviously requires [jQuery](https://jquery.com/) to work.  \nIt was tested with the jQuery versions: 1.9.1, 2.x, 3.x, and it won\'t work with jQuery slim.\n\n## Download\n\n#### manually\nDownload OverlayScrollbars manually from [Releases](https://github.com/KingSora/OverlayScrollbars/releases).\n\n#### cdn\nYou can use OverlayScrollbars via a [cdn](https://cdnjs.com/libraries/overlayscrollbars).\n\n#### npm\nOverlayScrollbars can be downloaded from [npm](https://www.npmjs.com/package/overlayscrollbars).\n\n```sh\nnpm install overlayscrollbars\n```\n\n## Usage\n\n#### HTML\n\nLoad your CSS file(s) before the JS file(s), to prevent unexpected bugs.\n\nInclude **OverlayScrollbars.css** and **OverlayScrollbars.js** to your HTML file.  \n\n```html\n<!-- Plugin CSS -->\n<link type="text/css" href="path/to/OverlayScrollbars.css" rel="stylesheet"/>\n<!-- Plugin JS -->\n<script type="text/javascript" src="path/to/OverlayScrollbars.js"></script>\n```\n\nIf you are using the jQuery version, include [jQuery](https://jquery.com/) before the plugin and use **jquery.overlayScrollbars.js**\n\n```html\n<!-- Plugin CSS -->\n<link type="text/css" href="path/to/OverlayScrollbars.css" rel="stylesheet"/>\n<!-- jQuery JS -->\n<script type="text/javascript" src="path/to/jquery.js"></script>\n<!-- Plugin JS -->\n<script type="text/javascript" src="path/to/jquery.overlayScrollbars.js"></script>\n```\n\n#### JavaScript\n\nInitialize the plugin after your document has been fully loaded.\n\nDefault initialization:\n```js\ndocument.addEventListener("DOMContentLoaded", function() {\n    //The first argument are the elements to which the plugin shall be initialized\n    //The second argument has to be at least a empty object or a object with your desired options\n    OverlayScrollbars(document.querySelectorAll(\'body\'), { });\n});\n```\n\njQuery initialization:\n```js\n$(function() {\n    //The passed argument has to be at least a empty object or a object with your desired options\n    $(\'body\').overlayScrollbars({ });\n});\n```\n\n#### TypeScript\n\nOverlayScrollbars provides its own [TypeScript declarations](https://www.npmjs.com/package/@types/overlayscrollbars):\n```sh\nnpm install @types/overlayscrollbars\n```\n\nI recommend setting these options in your **tsconfig.json**:\n```json\n{\n    "compilerOptions": {\n        "allowSyntheticDefaultImports": true,\n        "esModuleInterop": true\n    }\n}\n```\n\n\n## Options\n\nDue to clarity I can\'t provide all informations here.  \nTake the table below only as a overview of all options.  \n[Please read the much more detailed documentation](https://kingsora.github.io/OverlayScrollbars/#!documentation).  \n\n\n<table>\n    <thead>\n        <tr>\n            <th align="left" colspan="2">option</th>\n            <th align="left">type</th>\n            <th align="left">default</th>\n            <th align="left">description</th>\n        </tr>\n    </thead>\n    <tr>\n        <td colspan="2">className</td>\n        <td>string / null</td>\n        <td><code>"os-theme-dark"</code></td>\n        <td>The class name which shall be added to the host element.</td>\n    </tr>\n    <tr>\n        <td colspan="2">resize</td>\n        <td>string</td>\n        <td><code>"none"</code></td>\n        <td>The resize behavior of the host element. This option works exactly like the CSS3 resize property.</td>\n    </tr>\n    <tr>\n        <td colspan="2">sizeAutoCapable</td>\n        <td>boolean</td>\n        <td><code>true</code></td>\n        <td>Indicates whether the host element is capable of "auto" sizes such as: <code>width: auto</code> and <code>height: auto</code>.</td>\n    </tr>\n    <tr>\n        <td colspan="2">clipAlways</td>\n        <td>boolean</td>\n        <td><code>true</code></td>\n        <td>Indicates whether the content shall be clipped always.</td>\n    </tr>\n    <tr>\n        <td colspan="2">normalizeRTL</td>\n        <td>boolean</td>\n        <td><code>true</code></td>\n        <td>Indicates whether RTL scrolling shall be normalized.</td>\n    </tr>\n    <tr>\n        <td colspan="2">paddingAbsolute</td>\n        <td>boolean</td>\n        <td><code>false</code></td>\n        <td>Indicates whether the padding for the content shall be absolute.</td>\n    </tr>\n    <tr>\n        <td colspan="2">autoUpdate</td>\n        <td>boolean / null</td>\n        <td><code>null</code></td>\n        <td>Indicates whether the plugin instance shall be updated continuously within a update loop.</td>\n    </tr>\n    <tr>\n        <td colspan="2">autoUpdateInterval</td>\n        <td>number</td>\n        <td><code>33</code></td>\n        <td>The interval in milliseconds in which a auto update shall be performed for this instance.</td>\n    </tr>\n    <tr>\n        <th align="left" colspan="5">nativeScrollbarsOverlaid : {</th>\n    </tr>\n    <tr>\n        <td></td>\n        <td>showNativeScrollbars</td>\n        <td>boolean</td>\n        <td><code>false</code></td>\n        <td>Indicates whether the native overlaid scrollbars shall be visible.</td>\n    </tr>\n    <tr>\n        <td></td>\n        <td>initialize</td>\n        <td>boolean</td>\n        <td><code>true</code></td>\n        <td>\n            Indicates whether the plugin shall be initialized even if the native scrollbars are overlaid.<br>\n            If you initialize the plugin on the body element, I recommend to set this option to false.\n        </td>\n    </tr>\n    <tr>\n        <th align="left" colspan="5">}</th>\n    </tr>\n    <tr>\n        <th align="left" colspan="5">overflowBehavior : {</th>\n    </tr>\n    <tr>\n        <td></td>\n        <td>x</td>\n        <td>string</td>\n        <td><code>"scroll"</code></td>\n        <td>The overflow behavior for the x (horizontal) axis.</td>\n    </tr>\n    <tr>\n        <td></td>\n        <td>y</td>\n        <td>string</td>\n        <td><code>"scroll"</code></td>\n        <td>The overflow behavior for the y (vertical) axis.</td>\n    </tr>\n    <tr>\n        <th align="left" colspan="5">}</th>\n    </tr>\n    <tr>\n        <th align="left" colspan="5">scrollbars : {</th>\n    </tr>\n    <tr>\n        <td></td>\n        <td>visibility</td>\n        <td>string</td>\n        <td><code>"auto"</code></td>\n        <td>The basic visibility of the scrollbars.</td>\n    </tr>\n    <tr>\n        <td></td>\n        <td>autoHide</td>\n        <td>string</td>\n        <td><code>"never"</code></td>\n        <td>The possibility to hide visible scrollbars automatically after a certain action.</td>\n    </tr>\n    <tr>\n        <td></td>\n        <td>autoHideDelay</td>\n        <td>number</td>\n        <td><code>800</code></td>\n        <td>The delay in milliseconds before the scrollbars gets hidden automatically.</td>\n    </tr>\n    <tr>\n        <td></td>\n        <td>dragScrolling</td>\n        <td>boolean</td>\n        <td><code>true</code></td>\n        <td>Defines whether the scrollbar-handle supports drag scrolling.</td>\n    </tr>\n    <tr>\n        <td></td>\n        <td>clickScrolling</td>\n        <td>boolean</td>\n        <td><code>false</code></td>\n        <td>Defines whether the scrollbar-track supports click scrolling.</td>\n    </tr>\n    <tr>\n        <td></td>\n        <td>touchSupport</td>\n        <td>boolean</td>\n        <td><code>true</code></td>\n        <td>Indicates whether the scrollbar reacts to touch events.</td>\n    </tr>\n    <tr>\n        <td></td>\n        <td>snapHandle</td>\n        <td>boolean</td>\n        <td><code>false</code></td>\n        <td>Indicates whether the scrollbar handle-offset shall be snapped.</td>\n    </tr>\n    <tr>\n        <th align="left" colspan="5">}</th>\n    </tr>\n    <tr>\n        <th align="left" colspan="5">textarea : {</th>\n    </tr>\n    <tr>\n        <td></td>\n        <td>dynWidth</td>\n        <td>boolean</td>\n        <td><code>false</code></td>\n        <td>Indiactes whether the textarea width will be dynamic (content dependent).</td>\n    </tr>\n    <tr>\n        <td></td>\n        <td>dynHeight</td>\n        <td>boolean</td>\n        <td><code>false</code></td>\n        <td>Indiactes whether the textarea height will be dynamic (content dependent).</td>\n    </tr>\n    <tr>\n        <td></td>\n        <td>inheritedAttrs</td>\n        <td>string / array / null</td>\n        <td><code>["style", "class"]</code></td>\n        <td><b>During initialization:</b> Attributes which the generated host-element shall inherit from from the target textarea-element.<br/>\n<b>During destruction:</b> Attributes which the target textarea-element shall inherit from from the generated host-element.</td>\n    </tr>\n    <tr>\n        <th align="left" colspan="5">}</th>\n    </tr>\n    <tr>\n        <th align="left" colspan="5">callbacks : {</th>\n    </tr>\n    <tr>\n        <td></td>\n        <td>onInitialized</td>\n        <td>function / null</td>\n        <td><code>null</code></td>\n        <td>Gets fired after the plugin was initialized. It takes no arguments.</td>\n    </tr>\n    <tr>\n        <td></td>\n        <td>onInitializationWithdrawn</td>\n        <td>function / null</td>\n        <td><code>null</code></td>\n        <td>Gets fired after the initialization of the plugin was aborted due to the option <code>nativeScrollbarsOverlaid : { initialize : false }</code>. It takes no arguments.</td>\n    </tr>\n    <tr>\n        <td></td>\n        <td>onDestroyed</td>\n        <td>function / null</td>\n        <td><code>null</code></td>\n        <td>Gets fired after the plugin was destryoed. It takes no arguments.</td>\n    </tr>\n    <tr>\n        <td></td>\n        <td>onScrollStart</td>\n        <td>function / null</td>\n        <td><code>null</code></td>\n        <td>Gets fired after the user starts scrolling. It takes one argument.</td>\n    </tr>\n    <tr>\n        <td></td>\n        <td>onScroll</td>\n        <td>function / null</td>\n        <td><code>null</code></td>\n        <td>Gets fired after every scroll. It takes one argument.</td>\n    </tr>\n    <tr>\n        <td></td>\n        <td>onScrollStop</td>\n        <td>function / null</td>\n        <td><code>null</code></td>\n        <td>Gets fired after the user stops scrolling. It takes one argument.</td>\n    </tr>\n    <tr>\n        <td></td>\n        <td>onOverflowChanged</td>\n        <td>function / null</td>\n        <td><code>null</code></td>\n        <td>Gets fired after the overflow has changed. It takes one argument.</td>\n    </tr>\n    <tr>\n        <td></td>\n        <td>onOverflowAmountChanged</td>\n        <td>function / null</td>\n        <td><code>null</code></td>\n        <td>Gets fired after the overflow amount has changed. It takes one argument.</td>\n    </tr>\n    <tr>\n        <td></td>\n        <td>onDirectionChanged</td>\n        <td>function / null</td>\n        <td><code>null</code></td>\n        <td>Gets fired after the direction has changed. It takes one argument.</td>\n    </tr>\n    <tr>\n        <td></td>\n        <td>onContentSizeChanged</td>\n        <td>function / null</td>\n        <td><code>null</code></td>\n        <td>Gets fired after the content size has changed. It takes one argument.</td>\n    </tr>\n    <tr>\n        <td></td>\n        <td>onHostSizeChanged</td>\n        <td>function / null</td>\n        <td><code>null</code></td>\n        <td>Gets fired after the host size or host padding has changed. It takes one argument.</td>\n    </tr>\n    <tr>\n        <td></td>\n        <td>onUpdated</td>\n        <td>function / null</td>\n        <td><code>null</code></td>\n        <td>Gets fired after the host size has changed. It takes one argument.</td>\n    </tr>\n    <tr>\n        <th align="left" colspan="5">}</th>\n    </tr>\n</table>\n\n## Methods\n\nClick on the method name to open a more detailed documentation.\n\n#### Instance methods:\n\n<table>\n    <thead>\n        <tr>\n            <th align="left">name</th>\n            <th align="left">description</th>\n        </tr>\n    </thead>\n    <tr>\n        <td><b><a href="https://kingsora.github.io/OverlayScrollbars/#!documentation/method-options" target="_blank">.options()</a></b></td>\n        <td>Returns or sets the options of the instance.</td>\n    </tr>\n    <tr>\n        <td colspan="2">\n            example(s):<br> \n            <pre lang="js">\n//get options\nvar options = instance.options();\n//set options\ninstance.options({ className : null });</pre>\n        </td>\n    </tr>\n    <tr>\n        <td><b><a href="https://kingsora.github.io/OverlayScrollbars/#!documentation/method-update" target="_blank">.update()</a></b></td>\n        <td>Updates the instance.</td>\n    </tr>\n    <tr>\n        <td colspan="2">\n            example(s):<br> \n            <pre lang="js">\n//soft update\ninstance.update();\n//hard update\ninstance.update(true);</pre>\n        </td>\n    </tr>\n    <tr>\n        <td><b><a href="https://kingsora.github.io/OverlayScrollbars/#!documentation/method-sleep" target="_blank">.sleep()</a></b></td>\n        <td>Disables every observation of the DOM and puts the instance to "sleep". This behavior can be reset by calling the <code>update()</code> method.</td>\n    </tr>\n    <tr>\n        <td colspan="2">\n            example(s):<br> \n            <pre lang="js">\n//put the instance to sleep\ninstance.sleep();</pre>\n        </td>\n    </tr>\n    <tr>\n        <td><b><a href="https://kingsora.github.io/OverlayScrollbars/#!documentation/method-scroll" target="_blank">.scroll()</a></b></td>\n        <td>Returns the scroll information or sets the scroll position.</td>\n    </tr>\n    <tr>\n        <td colspan="2">\n            example(s):<br> \n            <pre lang="js">\n//get scroll information\nvar scrollInfo = instance.scroll();\n//scroll 50px on both axis\ninstance.scroll(50);\n//add 10px to the scroll offset of each axis\ninstance.scroll({ x : "+=10", y : "+=10" });\n//scroll to 50% on both axis with a duration of 1000ms\ninstance.scroll({ x : "50%", y : "50%" }, 1000);\n//scroll to the passed element with a duration of 1000ms\ninstance.scroll($(selector), 1000);</pre>\n        </td>\n    </tr>\n    <tr>\n        <td><b><a href="https://kingsora.github.io/OverlayScrollbars/#!documentation/method-scrollstop" target="_blank">.scrollStop()</a></b></td>\n        <td>Stops the current scroll-animation.</td>\n    </tr>\n    <tr>\n        <td colspan="2">\n            example(s):<br> \n            <pre lang="js">\n//scroll-animation duration is 10 seconds\ninstance.scroll({ y : "100%" }, 10000);\n//abort the 10 seconds scroll-animation immediately\ninstance.scrollStop();\n//scroll-animation duration is 1 second\ninstance.scroll({ y : "100%" }, 1000);</pre>\n        </td>\n    </tr>\n    <tr>\n        <td><b><a href="https://kingsora.github.io/OverlayScrollbars/#!documentation/method-getelements" target="_blank">.getElements()</a></b></td>\n        <td>Returns all relevant elements.</td>\n    </tr>\n    <tr>\n        <td colspan="2">\n            example(s):<br> \n            <pre lang="js">\n//get the element to which the plugin was applied\nvar pluginTarget = instance.getElements().target;</pre>\n        </td>\n    </tr>\n    <tr>\n        <td><b><a href="https://kingsora.github.io/OverlayScrollbars/#!documentation/method-getstate" target="_blank">.getState()</a></b></td>\n        <td>Returns a object which describes the current state of this instance.</td>\n    </tr>\n    <tr>\n        <td colspan="2">\n            example(s):<br> \n            <pre lang="js">\n//get the state of the plugin instance\nvar pluginState = instance.getState();</pre>\n        </td>\n    </tr>\n    <tr>\n        <td><b><a href="https://kingsora.github.io/OverlayScrollbars/#!documentation/method-destroy" target="_blank">.destroy()</a></b></td>\n        <td>Destroys and disposes the current instance and removes all added elements form the DOM.</td>\n    </tr>\n    <tr>\n        <td colspan="2">\n            example(s):<br> \n            <pre lang="js">\n//destroy the instance\ninstance.destroy();</pre>\n        </td>\n    </tr>\n    <tr>\n        <td><b><a href="https://kingsora.github.io/OverlayScrollbars/#!documentation/method-ext" target="_blank">.ext()</a></b></td>\n        <td>Returns the instance of a certain extension of the current plugin instance.</td>\n    </tr>\n    <tr>\n        <td colspan="2">\n            example(s):<br> \n            <pre lang="js">\n//get the instance of the extension "myExtension"\nvar extensionInstance = instance.ext("myExtension");</pre>\n        </td>\n    </tr>\n    <tr>\n        <td><b><a href="https://kingsora.github.io/OverlayScrollbars/#!documentation/method-addext" target="_blank">.addExt()</a></b></td>\n        <td>Adds a extension to the current instance.</td>\n    </tr>\n    <tr>\n        <td colspan="2">\n            example(s):<br> \n            <pre lang="js">\n//add the registered extension "myExtension" to the plugin instance\nvar extensionInstance = instance.addExt("myExtension");</pre>\n        </td>\n    </tr>\n    <tr>\n        <td><b><a href="https://kingsora.github.io/OverlayScrollbars/#!documentation/method-removeext" target="_blank">.removeExt()</a></b></td>\n        <td>Removes a extension from the current instance.</td>\n    </tr>\n    <tr>\n        <td colspan="2">\n            example(s):<br> \n            <pre lang="js">\n//add the registered extension "myExtension" to the plugin instance\ninstance.addExt("myExtension");\n//remove the added extension "myExtension" from the plugin instance\ninstance.removeExt("myExtension");</pre>\n        </td>\n    </tr>\n</table>\n\n#### Global methods:\n\n<table>\n    <thead>\n        <tr>\n            <th align="left">name</th>\n            <th align="left">description</th>\n        </tr>\n    </thead>\n    <tr>\n        <td><b><a href="https://kingsora.github.io/OverlayScrollbars/#!documentation/gmethod-defaultoptions" target="_blank">OverlayScrollbars.defaultOptions()</a></b></td>\n        <td>Returns or Sets the default options for each new plugin initialization.</td>\n    </tr>\n    <tr>\n        <td colspan="2">\n            example(s):<br> \n            <pre lang="js">\n//get the current defaultOptions\nvar defaultOptions = OverlayScrollbars.defaultOptions();\n//set new default options\nOverlayScrollbars.defaultOptions({\n    className : "my-custom-class",\n    resize    : "both"\n});</pre>\n        </td>\n    </tr>\n    <tr>\n        <td><b><a href="https://kingsora.github.io/OverlayScrollbars/#!documentation/gmethod-globals" target="_blank">OverlayScrollbars.globals()</a></b></td>\n        <td>Returns a plain object which contains global information about the plugin and each instance of it.</td>\n    </tr>\n    <tr>\n        <td colspan="2">\n            example(s):<br> \n            <pre lang="js">\n//get the global information\nvar globals = OverlayScrollbars.globals();</pre>\n        </td>\n    </tr>\n    <tr>\n        <td><b><a href="https://kingsora.github.io/OverlayScrollbars/#!documentation/gmethod-extension" target="_blank">OverlayScrollbars.extension()</a></b></td>\n        <td>Registers, Unregisters or returns extensions.</td>\n    </tr>\n    <tr>\n        <td colspan="2">\n            example(s):<br> \n            <pre lang="js">\n//register a dummy extension with the name "myExtension"\nOverlayScrollbars.extension("myExtension", function() { return { }; });\n//unregister the extension with the name "myExtension"\nOverlayScrollbars.extension("myExtension", null);\n//get the extension-object with the name "myExtension"\nvar registeredExtension = OverlayScrollbars.extension("myExtension");\n//get all registered extension-objects\nvar extensionObjects = OverlayScrollbars.extension();</pre>\n        </td>\n    </tr>\n        <tr>\n        <td><b><a href="https://kingsora.github.io/OverlayScrollbars/#!documentation/gmethod-valid" target="_blank">OverlayScrollbars.valid()</a></b></td>\n        <td>Checks whether the passed object is a non-destroyed OverlayScrollbars instance.</td>\n    </tr>\n    <tr>\n        <td colspan="2">\n            example(s):<br> \n            <pre lang="js">\n//create OverlayScrollbars instance\nvar osInstance = OverlayScrollbars(document.body, { });\n//returns true\nOverlayScrollbars.valid(osInstance);\n//destroy the instance\nosInstance.destroy();\n//returns false\nOverlayScrollbars.valid(osInstance);\n//returns false\nOverlayScrollbars.valid({ });</pre>\n        </td>\n    </tr>\n</table>\n\n## Future Plans\n\n - Minimize the code as much as possible.\n - Frequent updates in terms of bug-fixes and enhancements.\n\n## License\n\nMIT \n'