b'# SPPermissions\n\n<img align="left" src="https://github.com/ivanvorobei/SPPermissions/blob/master/Assets/Readme/Preview - 5.0.jpg" width="470"/>\n\n### About\nSPPermissions is an API to ask for user permissions using Swift. The API provides for three UI options (list, dialog & native). The UI/UX is in an **Apple style** and supports iPad, dark mode, & tvOS. Also you can check the state permissions using the API.\n\nVisit my store for iOS developers:\n\n[![xcode-shop.com](https://github.com/ivanvorobei/SPPermissions/blob/master/Assets/Buttons/xcode-shop.svg)](https://xcode-shop.com)\n\nIf you like the project, do not forget to `put star \xe2\x98\x85` and follow me on GitHub:\n\n[![https://github.com/ivanvorobei](https://github.com/ivanvorobei/SPPermissions/blob/master/Assets/Buttons/follow-me-on-github.svg)](https://github.com/ivanvorobei)\n\nTo help on this project, see the [\xd0\xa1ooperation](#\xd1\x81ooperation) section or our [chat](https://t.me/sppermissions).\n\n## 5.x Migration\n\nI have migrated `SPPermissions` to the new `5.0` vesion. If you find any bugs or need any of the old functionality - please create an issue or write me. If you want stay on the old version (4.x), add this to your Podfile:\n\n```ruby\npod \'SPPermissions\', \'4.1.4\'\n```\n\nI recomended that you install the new version and create an issue if you have a problem. I generally response to and resolve all issues in 24-48 hours.\n\n## Navigate\n\n- [Requirements](#requirements)\n- [Installation](#installation)\n    - [CocoaPods](#cocoapods)\n    - [Swift Package Manager](#swift-package-manager)\n    - [Carthage](#carthage)\n    - [Manually](#manually)\n- [Usage](#usage)\n    - [Dialog](#dialog)\n    - [List](#list)\n    - [Native](#native)\n- [Permissions](#permissions)\n- [DataSource & Delegate](#datasource--delegate)\n- [Good Practices](#good-practices)\n- [Keys in Info.plist](#keys-in-infoplist)\n    - [Localization](#localization-keys)\n- [\xd0\xa1ooperation](#\xd1\x81ooperation)\n- [License](#license)\n\n## Requirements\n\nSwift `4.2` & `5.0`. Ready for use on iOS 11+\n\n## Installation\n\n### CocoaPods:\n\n[CocoaPods](https://cocoapods.org) is a dependency manager for Cocoa projects. For usage and installation instructions, visit their website. To integrate `SPPermissions` into your Xcode project using CocoaPods, specify it in your `Podfile`:\n\n```ruby\npod \'SPPermissions/Notification\'\n```\n\nDue to Apple\'s new policy regarding permission access you need to specifically define what kind of permissions you want to access using subspecs. For example if you want to access `Camera`, `Location` & `Microphone` you define the following:\n\n```ruby\npod \'SPPermissions/Camera\'\npod \'SPPermissions/Location\'\npod \'SPPermissions/Microphone\'\n```\n\n<details><summary>Available subspecs</summary>\n<p>\n\n```ruby\npod \'SPPermissions/Camera\'\n```\n```ruby\npod \'SPPermissions/Contacts\'\n```\n```ruby\npod \'SPPermissions/Calendar\'\n```\n```ruby\npod \'SPPermissions/PhotoLibrary\'\n```\n```ruby\npod \'SPPermissions/Notification\'\n```\n```ruby\npod \'SPPermissions/Microphone\'\n```\n```ruby\npod \'SPPermissions/Reminders\'\n```\n```ruby\npod \'SPPermissions/SpeechRecognizer\'\n```\n```ruby\npod \'SPPermissions/Location\'\n```\n```ruby\npod \'SPPermissions/Motion\'\n```\n```ruby\npod \'SPPermissions/MediaLibrary\'\n```\n\n</p>\n</details>\n\n### Swift Package Manager\n\nThe [Swift Package Manager](https://swift.org/package-manager/) is a tool for managing the distribution of Swift code. It\xe2\x80\x99s integrated with the Swift build system to automate the process of downloading, compiling, and linking dependencies.\n\nTo integrate `SPPermissions` into your Xcode project using Xcode 11, specify it in `File > Swift Packages > Add`:\n\n```ogdl\nhttps://github.com/ivanvorobei/SPPermissions\n```\n\nAfter integrate need add configuration. See example [SPPermissionsConfiguration.xcconfig](https://github.com/ivanvorobei/SPPermissions/blob/master/Source/Supporting%20Files/SPPermissionsConfiguration.xcconfig) file or example project. If you don\'t know how add configuration file, see this [short video](https://youtu.be/1kR5HGVhJfk).\n\n### Carthage\n\n[Carthage](https://github.com/Carthage/Carthage) is a decentralized dependency manager that builds your dependencies and provides you with binary frameworks. To integrate `SPPermissions` into your Xcode project using Carthage, specify it in your `Cartfile`:\n\n```ogdl\ngithub "ivanvorobei/SPPermissions"\n```\n\nBy default available all permissions. You can provide custom build flags _before_ building the dynamic framework to only compile\nwith permissions you request. Open file [SPPermissionsConfiguration.xcconfig](https://github.com/ivanvorobei/SPPermissions/blob/master/Source/Supporting%20Files/SPPermissionsConfiguration.xcconfig) in `Source/SPPermissions/Supporting Files`, comment unusable permissions and rebuild:\n\n```ruby\ncarthage build\n```\n\n### Manually\n\nIf you prefer not to use any of dependency managers, you can integrate `SPPermissions` into your project manually. Put `Source/SPPermissions` folder in your Xcode project. Make sure to enable `Copy items if needed` and `Create groups`.\n\nAfter it need add configuration. See example [SPPermissionsConfiguration.xcconfig](https://github.com/ivanvorobei/SPPermissions/blob/master/Source/SPPermissions/Supporting%20Files/SPPermissionsConfiguration.xcconfig) file or example project. If you don\'t know how add configuration file, see this [short video](https://youtu.be/1kR5HGVhJfk).\n\n## Usage\n\nThis project had separate modules for the display UI options. The interfaces are: `Dialog`, `List` and `Native`. Each interface has delegates and a datasource. If you want see an example app, open `SPPermissions.xcodeproj` and choose the `Example` target. \n\n### Dialog\n\nThis is a Modal alert, which was used in the previous version (<5.x). I recomend the use of this alert style when your requested permissions are less than three. Usage example:\n\n```swift\nlet controller = SPPermissions.dialog([.camera, .photoLibrary])\n\n// Ovveride texts in controller\ncontroller.titleText = "Title Text"\ncontroller.headerText = "Header Text"\ncontroller.footerText = "Footer Text"\n\n// Set `DataSource` or `Delegate` if need. \n// By default using project texts and icons.\ncontroller.dataSource = self\ncontroller.delegate = self\n\n// Always use this method for present\ncontroller.present(on: self)\n```\n\n### List\n\nNative `UITableViewController` with support for the iPad. Use it with more than two permissions. An example of how it is used:\n\n```swift\nlet controller = SPPermissions.list([.calendar, .camera, .contacts])\n\n// Ovveride texts in controller\ncontroller.titleText = "Title Text"\ncontroller.headerText = "Header Text"\ncontroller.footerText = "Footer Text"\n\n// Set `DataSource` or `Delegate` if need. \n// By default using project texts and icons.\ncontroller.dataSource = self\ncontroller.delegate = self\n\n// Always use this method for present\ncontroller.present(on: self)\n```\n\n### Native\n\nRequest permissions with native alerts. You can request many permissions at once:\n\n```swift\nlet controller = SPPermissions.native([.calendar, .camera, .contacts])\n\n// Set `Delegate` if need. \ncontroller.delegate = self\n\n// Always use this method for request. \n// You can pass any controller, this request becouse need implement base protocol.\ncontroller.present(on: self)\n```\n\n## Permissions\n\n<p float="left">\n    <img src="https://github.com/ivanvorobei/SPPermissions/blob/master/Assets/Permissions/Camera.svg" width="105">\n    <img src="https://github.com/ivanvorobei/SPPermissions/blob/master/Assets/Permissions/Photos.svg" width="105">\n    <img src="https://github.com/ivanvorobei/SPPermissions/blob/master/Assets/Permissions/Notifications.svg" width="105">\n    <img src="https://github.com/ivanvorobei/SPPermissions/blob/master/Assets/Permissions/Locations.svg" width="105">\n    <img src="https://github.com/ivanvorobei/SPPermissions/blob/master/Assets/Permissions/Microphone.svg" width="105">\n    <img src="https://github.com/ivanvorobei/SPPermissions/blob/master/Assets/Permissions/Calendar.svg" width="105">\n    <img src="https://github.com/ivanvorobei/SPPermissions/blob/master/Assets/Permissions/Contacts.svg" width="105">\n    <img src="https://github.com/ivanvorobei/SPPermissions/blob/master/Assets/Permissions/Reminders.svg" width="105">\n    <img src="https://github.com/ivanvorobei/SPPermissions/blob/master/Assets/Permissions/Motion.svg" width="105">\n    <img src="https://github.com/ivanvorobei/SPPermissions/blob/master/Assets/Permissions/Media.svg" width="105">\n    <img src="https://github.com/ivanvorobei/SPPermissions/blob/master/Assets/Permissions/Speech.svg" width="105">\n</p>\n\nTo check the state of any permission, call enum `SPPermission`: \n\n```swift\nlet state = SPPermission.calendar.isAuthorized\n```\n\nAlso available is the func `isDenied`. This returns false if the permission has not been requested before.\n\n## DataSource & Delegate\n\nFor a customized permssions view, implement `SPPermissionsDataSource`:\n\n```swift\nfunc configure(_ cell: SPPermissionTableViewCell, for permission: SPPermission) -> SPPermissionTableViewCell {\n    return cell\n}\n```\n\nUsing a delegate, you can customize texts, colors, and icons. For a default view configure with the default values. After configuration return the cell.\n\nYou can customize:\n\n```swift\n// Titles\ncell.permissionTitleLabel.text = "Notifications"\ncell.permissionDescriptionLabel.text = "Remind about payment to your bank"\ncell.button.allowTitle = "Allow"\ncell.button.allowedTitle = "Allowed"\n\n// Colors\ncell.iconView.color = .systemBlue\ncell.button.allowedBackgroundColor = .systemBlue\ncell.button.allowTitleColor = .systemBlue\n\n// If you want set custom image.\ncell.set(UIImage(named: "IMAGE-NAME")!)\n```\n\n### Delegate\n\nIn the delegate you can implement these methods: \n\n```swift\n// Events\nfunc didAllow(permission: SPPermission) {}\nfunc didDenied(permission: SPPermission) {}\nfunc didHide() {}\n\n// Denied alert. Show alert if permission denied.\nfunc deniedData(for permission: SPPermission) -> SPPermissionDeniedAlertData?\n```\n\n### Denied alert\n\nIf you don\'t want show an alert if a permission is denied, return `nil` in the delegate. You can set the text in the alert: \n\n```swift\nfunc deniedData(for permission: SPPermission) -> SPPermissionDeniedAlertData? {\n    if permission == .notification {\n        let data = SPPermissionDeniedAlertData()\n        data.alertOpenSettingsDeniedPermissionTitle = "Permission denied"\n        data.alertOpenSettingsDeniedPermissionDescription = "Please, go to Settings and allow permission."\n        data.alertOpenSettingsDeniedPermissionButtonTitle = "Settings"\n        data.alertOpenSettingsDeniedPermissionCancelTitle = "Cancel"\n        return data\n    } else {\n        // If returned nil, alert will not show.\n        return nil\n    }\n}\n```\n\nIf you don\'t implement this method, the alert will appear with default text. To disable the alert need return `nil`.\n\n## Good Practices\n\nI recommend that you show the user all of the permission options, even if some of them are already allowed. But if you want to request only non-allowed permissions, use this code:\n\n```swift\nlet controller = SPPermissions.list([.notification, .reminders].filter { !$0.isAuthorized } )\ncontroller.present(on: self)\n```\n\nA good way to check for the need to show a dialog: check that all permissions are currently authorized by the user:\n\n```swift\nlet permissions = [.notification, .reminders].filter { !$0.isAuthorized }\nif permissions.isEmpty {\n    // No need show dialog\n} else {\n    // Show dialog\n}\n```\n\nIf you request location services, you can show both `.locationWhenInUse` & `.locationAlwaysAndWhenInUse`. If the user allowed `always` mode, they can also change to `when in use` mode:\n\n```swift\nlet controller = SPPermissions.dialog([.locationWhenInUse, .locationAlwaysAndWhenInUse])\ncontroller.present(on: self)\n```\n\n## Keys in Info.plist\n\nYou need to add some keys to the `Info.plist` file with descriptions. List of keys:\n\n- NSCameraUsageDescription\n- NSContactsUsageDescription\n- NSCalendarsUsageDescription\n- NSMicrophoneUsageDescription\n- NSAppleMusicUsageDescription\n- NSSpeechRecognitionUsageDescription\n- NSMotionUsageDescription\n- NSLocationWhenInUseUsageDescription\n- NSLocationAlwaysAndWhenInUseUsageDescription\n- NSLocationAlwaysUsageDescription (iOS 10 and earlier)\n\nDo not use the description as the name of the key.\n\n### Localization keys\n\nIf you use xliff localization export, keys will be create automatically. If you prefer do the localization file manually, you need to create `InfoPlist.strings`, select languages in the right side menu and add keys as keys in plist-file. See:\n\n```\n"NSCameraUsageDescription" = "Here description of usage camera";\n```\n\n## \xd0\xa1ooperation\n\nThe use of this project is completely free. If you can make a contribution, it will help with development. Here is a list of tasks and what needs to be done:\n\n- Add docs in source files. Add a description of public methods and parameters. \n- Subtitles for this [video](https://youtu.be/1kR5HGVhJfk) in any of your native languages, where I tell you how to connect a configuration file.\n- Help me translate my app [Debts - Spending tracker](https://itunes.apple.com/app/id1446635818) for other languages. \n- Add an icon for tv os example target.\n\n## Design previous version\n\nI developed `SPPermissions` in an \'Apple-way\'. To accomplish this, I checked 30 apps to get UI-elements for this project. I then took screenshots and re-drew the elements in Sketch. For example, the project\'s `Allow` button is similar to the `Get` button in the AppStore. Check this [timelapse](https://youtu.be/1mDdX7fQRv4) to see how I designed the `4.0` version of  `SPPermissions`:\n\n[![Timelaps on YouTube](https://github.com/ivanvorobei/SPPermissions/blob/master/Assets/Readme/YouTube.jpg)](https://youtu.be/1mDdX7fQRv4)\n\n## License\n\n`SPPermissions` is released under the MIT license. Check `LICENSE` for details.\n'