b'| <img alt="logo" src="https://raw.githubusercontent.com/CocoaDebug/CocoaDebug/master/pic/logo.png" width="250"/> | <ul align="left"><li><a href="https://github.com/CocoaDebug/CocoaDebug/wiki/%E4%B8%AD%E6%96%87%E4%BB%8B%E7%BB%8D">\xe4\xb8\xad\xe6\x96\x87\xe4\xbb\x8b\xe7\xbb\x8d</a><li><a href="#introduction">Introduction</a><li><a href="#installation">Installation</a><li><a href="#usage">Usage</a><li><a href="#parameters">Parameters</a></ul> |\n| -------------- | -------------- |\n| Travis CI | [![Build Status](https://travis-ci.org/CocoaDebug/CocoaDebug.svg?branch=master)](https://travis-ci.org/CocoaDebug/CocoaDebug) |\n| Codacy | [![Codacy Badge](https://api.codacy.com/project/badge/Grade/6aac8606d10f403a811cafdf870bb552)](https://www.codacy.com/app/CocoaDebug/CocoaDebug?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=CocoaDebug/CocoaDebug&amp;utm_campaign=Badge_Grade) |\n| Codecov | [![codecov](https://codecov.io/gh/CocoaDebug/CocoaDebug/branch/master/graph/badge.svg)](https://codecov.io/gh/CocoaDebug/CocoaDebug) |\n| Frameworks | [![Carthage Compatible](https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat)](https://github.com/Carthage/Carthage) [![CocoaPods Compatible](https://img.shields.io/cocoapods/v/CocoaDebug.svg)](https://img.shields.io/cocoapods/v/CocoaDebug.svg) |\n| Languages | ![Languages](https://img.shields.io/badge/languages-Swift%20%7C%20ObjC-blue.svg) |\n| Platform | ![Platform](https://img.shields.io/badge/platforms-iOS%208.0+-blue.svg) |\n| Licence | <img src="https://img.shields.io/badge/license-MIT-blue.svg?style=flat" alt="License MIT"/> |\n\n<span style="float:none" />\n\n## Introduction\n\n![example](https://raw.githubusercontent.com/CocoaDebug/CocoaDebug/master/pic/example.gif)\n\n- [x] Shake to hide or show the black bubble. (support both device and simulator)\n\n- [x] Long press the black bubble to show `UIDebuggingInformationOverlay`. (Apple\'s Private API, support iOS 10/11/12)\n\n- [x] Application memory usage and *FPS*.\n\n- [x] List all `print()` and `NSLog()` messages which have been written by developer in Xcode.\n\n- [x] List of all the network requests sent by the application.\n\n- [x] List crash errors.\n\n- [x] Share network details via email or copy to clipboard when you are in the *Network Details* page.\n\n- [x] Copy logs. (long press the text, then select all or select copy)\n\n- [x] Search logs by keyword.\n\n- [x] List application and device informations, including: *version*, *build*, *bundle name*, *bundle id*, *screen resolution*, *device*, *iOS version*\n\n- [x] List all sandbox folders and files, supporting to preview and edit.\n\n- [x] List HTML logs, including `console.log()`,`console.debug()`,`console.warn()`,`console.error()`,`console. info()`. (support both `WKWebView` and `UIWebView`).\n\n- [x] Support `JSON` and Google\'s `Protocol buffers`\n\n## Installation\n\n### CocoaPods\n\n```ruby\ntarget \'YourTargetName\' do\n    pod \'CocoaDebug\', :configurations => [\'Debug\']\nend\n```\n\n### Carthage\n\n```ogdl\ngithub "CocoaDebug/CocoaDebug"\n```\n\n### Framework\n\n[Download](https://github.com/CocoaDebug/CocoaDebug/raw/master/CocoaDebug.framework.zip)\n\n> WARNING: Don\'t submit `.ipa` to AppStore which has been linked with the `CocoaDebug.framework`. This [Integration Guide](https://github.com/CocoaDebug/CocoaDebug/wiki/Integration-Guide) outline a way to use build configurations to isolate linking the framework to `Debug` builds only.\n\n## Usage\n\n### Swift\n\t\n\t//AppDelegate.swift\n\t \n    #if DEBUG\n        import CocoaDebug\n    #endif\n\t\n    #if DEBUG\n        CocoaDebug.enable()\n    #endif\n\n    public func print<T>(file: String = #file, function: String = #function, line: Int = #line, _ message: T, color: UIColor = .white) {\n        #if DEBUG\n            swiftLog(file, function, line, message, color, false)\n        #endif\n    }\n\t\n\n### Objective-C\n\t\n\t//AppDelegate.m\n\t \n    #ifdef DEBUG\n        @import CocoaDebug;\n    #endif\n\t\n    #ifdef DEBUG\n        [CocoaDebug enable];\n    #endif\n\n> Please check `Example_Swift.xcodeproj` and `Example_Objc.xcodeproj` for more advanced usage.\n\n> NOTE: Be careful with `Other Swift Flags` & `Preprocessor Macros` when using Swift & Objective-C in one project. You can refer to [here](https://stackoverflow.com/questions/24111854/in-absence-of-preprocessor-macros-is-there-a-way-to-define-practical-scheme-spe).  \n\n## Parameters\n\nWhen you initialize CocoaDebug, you can customize the following parameter values before `CocoaDebug.enable()`.\n\n- `serverURL` - If the crawled URLs contain server URL ,set these URLs bold font to be marked. not mark when this value is nil. default value is **nil**.\n\n- `ignoredURLs` - Set the URLs which should not crawled, ignoring case, crawl all URLs when the value is nil. default value is **nil**.\n\n- `onlyURLs` - Set the URLs which are only crawled, ignoring case, crawl all URLs when the value is nil. default value is **nil**.\n\n- `tabBarControllers` - Set controllers to be added as child controllers of UITabBarController. default value is **nil**.\n\n- `logMaxCount` - The maximum count of logs which CocoaDebug display. default value is **1000**.\n\n- `emailToRecipients` - Set the initial recipients to include in the email\xe2\x80\x99s \xe2\x80\x9cTo\xe2\x80\x9d field when share via email. default value is **nil**.\n\n- `emailCcRecipients` - Set the initial recipients to include in the email\xe2\x80\x99s \xe2\x80\x9cCc\xe2\x80\x9d field when share via email. default value is **nil**.\n\n- `mainColor` - Set the main color with hexadecimal format. default value is **#42d459**.\n\n## TODO\n\n- [Unit Testing](https://codecov.io/gh/CocoaDebug/CocoaDebug)\n\n## Thanks\n\nSpecial thanks to [remirobert](https://github.com/remirobert).\n\n## License\n\nCocoaDebug is released under the [MIT license](https://github.com/CocoaDebug/CocoaDebug/blob/master/LICENSE).\n'