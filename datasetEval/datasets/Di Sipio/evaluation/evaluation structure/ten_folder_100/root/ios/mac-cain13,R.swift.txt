b'# R.swift [![Version](https://img.shields.io/cocoapods/v/R.swift.svg?style=flat)](https://cocoapods.org/pods/R.swift) [![License](https://img.shields.io/cocoapods/l/R.swift.svg?style=flat)](blob/master/License) ![Platform](https://img.shields.io/cocoapods/p/R.swift.svg?style=flat)\n\n_Get strong typed, autocompleted resources like images, fonts and segues in Swift projects_\n\n## Why use this?\n\nIt makes your code that uses resources:\n- **Fully typed**, less casting and guessing what a method will return\n- **Compile time checked**, no more incorrect strings that make your app crash at runtime\n- **Autocompleted**, never have to guess that image name again\n\nCurrently you type:\n```swift\nlet icon = UIImage(named: "settings-icon")\nlet font = UIFont(name: "San Francisco", size: 42)\nlet color = UIColor(named: "indicator highlight")\nlet viewController = CustomViewController(nibName: "CustomView", bundle: nil)\nlet string = String(format: NSLocalizedString("welcome.withName", comment: ""), locale: NSLocale.current, "Arthur Dent")\n```\n\nWith R.swift it becomes:\n```swift\nlet icon = R.image.settingsIcon()\nlet font = R.font.sanFrancisco(size: 42)\nlet color = R.color.indicatorHighlight()\nlet viewController = CustomViewController(nib: R.nib.customView)\nlet string = R.string.localizable.welcomeWithName("Arthur Dent")\n```\n\nCheck out [more examples](Documentation/Examples.md) or hear about [how Fabric.app uses R.swift](https://news.realm.io/news/slug-javi-soto-building-fabric-in-swift/#rswift-2956)!\n\n## Demo\n\n**Autocompleted images:**\n\n![Autocompleted images](Documentation/Images/DemoUseImage.gif)\n\n**Compiletime checked images:**\n\n![Compiletime checked images](Documentation/Images/DemoRenameImage.gif)\n\nThis is only the beginning, check out [more examples](Documentation/Examples.md)!\n\n## CocoaHeadsNL presentation\n\nMathijs Kadijk presented R.swift at the September 2016 CocoaHeadsNL meetup.\nTalking about the ideas behind R.swift and demonstrating how to move from plain stringly-typed iOS code to statically typed code.\n\n<a href="https://vimeo.com/185173151"><img src="https://i.vimeocdn.com/video/594835658.jpg?mw=1920&mh=1080&q=70" width="560" alt="R.swift presentation at CocoaHeadsNL"></a>\n\n## Features\n\nAfter installing R.swift into your project you can use the `R`-struct to access resources. If the struct is outdated just build and R.swift will correct any missing/changed/added resources.\n\nR.swift currently supports these types of resources:\n- [Images](Documentation/Examples.md#images)\n- [Fonts](Documentation/Examples.md#custom-fonts)\n- [Resource files](Documentation/Examples.md#resource-files)\n- [Colors](Documentation/Examples.md#colors)\n- [Localized strings](Documentation/Examples.md#localized-strings)\n- [Storyboards](Documentation/Examples.md#storyboards)\n- [Segues](Documentation/Examples.md#segues)\n- [Nibs](Documentation/Examples.md#nibs)\n- [Reusable cells](Documentation/Examples.md#reusable-table-view-cells)\n\nRuntime validation with [`R.validate()`](Documentation/Examples.md#runtime-validation):\n- If all images used in storyboards and nibs are available\n- If all named colors used in storyboards and nibs are available\n- If all view controllers with storyboard identifiers can be loaded\n- If all custom fonts can be loaded\n\n## Q&A\n\n- [Why was R.swift created?](Documentation/QandA.md#why-was-rswift-created)\n- [Why should I choose R.swift over alternative X or Y?](Documentation/QandA.md#why-should-i-choose-rswift-over-alternative-x-or-y)\n- [What are the requirements to run R.swift?](Documentation/QandA.md#what-are-the-requirements-to-run-rswift)\n- [How to use methods with a `Void` argument?](Documentation/QandA.md#how-to-use-methods-with-a-void-argument)\n- [How to fix missing imports in the generated file?](Documentation/QandA.md#how-to-fix-missing-imports-in-the-generated-file)\n- [How to use classes with the same name as their module?](Documentation/QandA.md#how-to-use-classes-with-the-same-name-as-their-module)\n- [Can I ignore resources?](Documentation/Ignoring.md)\n- [Can I use R.swift in a library?](Documentation/QandA.md#can-i-use-rswift-in-a-library)\n- [How does R.swift work?](Documentation/QandA.md#how-does-rswift-work)\n- [How to upgrade to a new major version?](Documentation/Migration.md)\n\n## Installation\n\n[CocoaPods](http://cocoapods.org) is the recommended way of installation, as this avoids including any binary files into your project.\n\n_Note on Carthage: R.swift is a tool used in a build step, it is not a dynamic library. Therefore [it is not possible](https://github.com/mac-cain13/R.swift/issues/42) to install it with Carthage._\n\n### CocoaPods (recommended)\n\n1. Add `pod \'R.swift\'` to your [Podfile](http://cocoapods.org/#get_started) and run `pod install`\n2. In Xcode: Click on your project in the file list, choose your target under `TARGETS`, click the `Build Phases` tab and add a `New Run Script Phase` by clicking the little plus icon in the top left\n3. Drag the new `Run Script` phase **above** the `Compile Sources` phase and **below** `Check Pods Manifest.lock`, expand it and paste the following script:  \n   ```\n   "$PODS_ROOT/R.swift/rswift" generate "$SRCROOT/R.generated.swift"\n   ```\n4. Add `$TEMP_DIR/rswift-lastrun` to the "Input Files" and `$SRCROOT/R.generated.swift` to the "Output Files" of the Build Phase\n5. Build your project, in Finder you will now see a `R.generated.swift` in the `$SRCROOT`-folder, drag the `R.generated.swift` files into your project and **uncheck** `Copy items if needed`\n\n_Screenshot of the Build Phase can be found [here](Documentation/Images/BuildPhaseExample.png)_\n\n_Tip:_ Add the `*.generated.swift` pattern to your `.gitignore` file to prevent unnecessary conflicts.\n\n### [Mint](https://github.com/yonaskolb/mint)\n\n#### First, Install `R.Swift` Binary and Run Script Phase\n\n1. Add `mac-cain13/R.swift` to your [Mintfile](https://github.com/yonaskolb/Mint#mintfile) and run `mint bootstrap`  to install this package without linking it globally (recommended)\n2. In Xcode: Click on your project in the file list, choose your target under `TARGETS`, click the `Build Phases` tab and add a `New Run Script Phase` by clicking the little plus icon in the top left\n3. Drag the new `Run Script` phase **above** the `Compile Sources` phase, expand it and paste the following script:  \n   ```\n   if mint list | grep -q \'R.swift\'; then\n     mint run R.swift rswift generate "$SRCROOT/R.generated.swift"\n   else\n     echo "error: R.swift not installed; run \'mint bootstrap\' to install"\n     return -1\n   fi\n   ```\n4. Add `$TEMP_DIR/rswift-lastrun` to the "Input Files" and `$SRCROOT/R.generated.swift` to the "Output Files" of the Build Phase\n5. Build your project, in Finder you will now see a `R.generated.swift` in the `$SRCROOT`-folder, drag the `R.generated.swift` files into your project and **uncheck** `Copy items if needed`\n\n_Screenshot of the Build Phase can be found [here](Documentation/Images/BuildPhaseExample.png)_\n\n_Tip:_ Add the `*.generated.swift` pattern to your `.gitignore` file to prevent unnecessary conflicts.\n\n#### Second, Install `R.Swift.Library` via the Swift Package Manager (requires Xcode 11)\n\nIf you see a build error `No such module \'Rswift\'` when trying to `#import Rswift` at the top of the `R.generated.swift` file, then you will also need to install the *library* via the Swift Package Manager available in Xcode 11+.\n\nHead over to the [R.Swift.Library](https://github.com/mac-cain13/R.swift.Library) repo and follow the [Swift Package Manager installation instructions](https://github.com/mac-cain13/R.swift.Library#swift-package-manager-requires-xcode-11).\n\n### Manually\n\n0. Add the [R.swift.Library](https://github.com/mac-cain13/R.swift.Library#Installation) to your project\n1. [Download](https://github.com/mac-cain13/R.swift/releases) a R.swift release, unzip it and put it into your source root directory\n2. In Xcode: Click on your project in the file list, choose your target under `TARGETS`, click the `Build Phases` tab and add a `New Run Script Phase` by clicking the little plus icon in the top left\n3. Drag the new `Run Script` phase **above** the `Compile Sources` phase, expand it and paste the following script:  \n   ```\n   "$SRCROOT/rswift" generate "$SRCROOT/R.generated.swift"\n   ```\n4. Add `$TEMP_DIR/rswift-lastrun` to the "Input Files" and `$SRCROOT/R.generated.swift` to the "Output Files" of the Build Phase\n5. Build your project, in Finder you will now see a `R.generated.swift` in the `$SRCROOT`-folder, drag the `R.generated.swift` files into your project and **uncheck** `Copy items if needed`\n\n_Screenshot of the Build Phase can be found [here](Documentation/Images/BuildPhaseExample.png)_\n\n_Tip:_ Add the `*.generated.swift` pattern to your `.gitignore` file to prevent unnecessary conflicts.\n\n### Building from source\n\nR.swift is built using [Swift Package Manager (SPM)](https://github.com/apple/swift-package-manager).\n\n1. Check out the code\n2. Run `swift build -c release` from the root directory\n3. Follow the manual installation steps with the binary you now have\n\nFor developing on R.swift in Xcode, run `swift package generate-xcodeproj --xcconfig-overrides RswiftConfig.xcconfig`.\n\n## Contribute\n\nWe\'ll love contributions, read the [contribute docs](Documentation/Contribute.md) for info on how to report issues, submit ideas and submit pull requests!\n\n## License\n\n[R.swift](https://github.com/mac-cain13/R.swift) and [R.swift.Library](https://github.com/mac-cain13/R.swift.Library) are created by [Mathijs Kadijk](https://github.com/mac-cain13) and released under a [MIT License](License).\n\nSpecial thanks to [Tom Lokhorst](https://github.com/tomlokhorst) for his major contributions and help maintaining this project.\n'