b'# FoldingTabBar.iOS \n[![CocoaPods Compatible](https://img.shields.io/cocoapods/v/FoldingTabBar.svg)](https://img.shields.io/cocoapods/v/FoldingTabBar.svg)\n[![Carthage compatible](https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat)](https://github.com/Carthage/Carthage)\n\nFolding Tab Bar and Tab Bar Controller\n\nInspired by [this project on Dribbble](https://dribbble.com/shots/2003376-Tab-Bar-Animation)\n\nAlso, read how it was done in our [blog](https://yalantis.com/blog/how_we_created_tab_bar_animation_for_ios/?utm_source=github)\n\n![Preview](https://d13yacurqjgara.cloudfront.net/users/495792/screenshots/2003376/tab_bar_animation_fin-02.gif)\n\n\n## Requirements\niOS 7.0\n\n## Installation\n\n#### [CocoaPods](http://cocoapods.org)\n\n```ruby\npod \'FoldingTabBar\', \'~> 1.2.1\'\n```\n\n#### [Carthage](https://github.com/Carthage/Carthage)\n\n```\ngithub "Yalantis/FoldingTabBar.iOS" ~> 1.2.1\n```\n\n#### Manual Installation\n\nAlternatively you can directly add all the source files from FoldingTabBar folder to your project.\n\n1. Download the [latest code version](https://github.com/Yalantis/FoldingTabBar.iOS/archive/master.zip) or add the repository as a git submodule to your git-tracked project. \n2. Open your project in Xcode, then drag and drop all the folder directories in FoldingTabBar folder onto your project (use the "Product Navigator view"). Make sure to select Copy items when asked if you extracted the code archive outside of your project. \n\n\n## Introduction\n\n#### YALFoldingTabBarController\n`YALFoldingTabBarController` is a subclass of `UITabBarController` with custom animating `YALFoldingTabBar`. \n\n#### YALFoldingTabBar\nYALFoldingTabBar is a subclass of a standard UIView. We wanted to make this component expand and contract in response to a user tapping. When the component is closed you can only see a central button (\xe2\x80\x9c+\xe2\x80\x9d). When tapping on it, our custom Tab Bar expands letting other tabBarItems appear, so that the user can switch the controllers.\n\nEach separate tabBarItem can have two additional buttons on the left and right. These buttons can be used to let a user interact with a selected screen on the YALFoldingTabBarController without even having to leave it. \n\n#### YALTabBarItem\n`YALTabBarItem` is a model to configure your tab bar items with images. \n\n\n## Usage\n\nOption 1: The simplest way is to use `YALFoldingTabBarController` as it is. You can also subclass it if you indend to change the default behaviour.\n\nOption 2: You can write your own implementation of `UITabBarController `and use `YALFoldingTabBar` or its subclass.\n\nHere is an instruction of how to use `YALFoldingTabBarController` in the Storyboard.\n\n1. Add native `UITabBarController` to the storyboard, establish relationships with its view controllers.\n2.  Choose `YALFoldingTabBarController` as custom class for `UITabBarController`.\n3.  Choose `YALCustomHeightTabBar` as custom class for `UITabBar` inside `YALFoldingTabBarController`\n3.  In AppDelegate method take out an instance of `YALFoldingTabBarController` from the window.rootViewController and supply it with images for the left and right tabBarItems respectively. Also you can add your own image for the center button of `YALFoldingTabBar`.\n\n## Objective-C\n\n```objective-c\n    YALFoldingTabBarController *tabBarController = (YALFoldingTabBarController *) self.window.rootViewController;\n\n    //prepare leftBarItems\n    YALTabBarItem *item1 = [[YALTabBarItem alloc] initWithItemImage:[UIImage imageNamed:@"nearby_icon"]\n                                                      leftItemImage:nil\n                                                     rightItemImage:nil];\n    \n    \n    YALTabBarItem *item2 = [[YALTabBarItem alloc] initWithItemImage:[UIImage imageNamed:@"profile_icon"]\n                                                      leftItemImage:[UIImage imageNamed:@"edit_icon"]\n                                                     rightItemImage:nil];\n    \n    tabBarController.leftBarItems = @[item1, item2];\n\n    //prepare rightBarItems\n    YALTabBarItem *item3 = [[YALTabBarItem alloc] initWithItemImage:[UIImage imageNamed:@"chats_icon"]\n                                                      leftItemImage:[UIImage imageNamed:@"search_icon"]\n                                                     rightItemImage:[UIImage imageNamed:@"new_chat_icon"]];\n    \n    \n    YALTabBarItem *item4 = [[YALTabBarItem alloc] initWithItemImage:[UIImage imageNamed:@"settings_icon"]\n                                                      leftItemImage:nil\n                                                     rightItemImage:nil];\n    tabBarController.rightBarItems = @[item3, item4];\n\n```\n## Swift\n\n```swift\n    if let tabBarController = window?.rootViewController as? YALFoldingTabBarController {\n\n        //leftBarItems\n\n        let firstItem = YALTabBarItem(\n            itemImage: UIImage(named: "nearby_icon")!,\n            leftItemImage: nil,\n            rightItemImage: nil\n        )\n\n        let secondItem = YALTabBarItem(\n            itemImage: UIImage(named: "profile_icon")!,\n            leftItemImage: UIImage(named: "edit_icon")!,\n            rightItemImage: nil\n        )\n\n        tabBarController.leftBarItems = [firstItem, secondItem]\n\n        //rightBarItems\n\n        let thirdItem = YALTabBarItem(\n            itemImage: UIImage(named: "chats_icon")!,\n            leftItemImage: UIImage(named: "search_icon")!,\n            rightItemImage: UIImage(named: "new_chat_icon")!\n        )\n\n        let forthItem = YALTabBarItem(\n            itemImage: UIImage(named: "settings_icon")!,\n            leftItemImage: nil,\n            rightItemImage: nil\n        )\n\n        tabBarController.rightBarItems = [thirdItem, forthItem]\n    }\n```\n\n If you want to handle touches on extra tabBarItems import `YALTabBarDelegate` protocol to the subclass of the proper `UIVIewController` and implement these methods: \n##Objective-C\n\n```objective-c\n- (void)tabBarDidSelectExtraLeftItem:(YALFoldingTabBar *)tabBar;\n- (void)tabBarDidSelectExtraRightItem:(YALFoldingTabBar *)tabBar;\n```\n## Swift\n\n```swift\nfunc tabBarDidSelectExtraLeftItem(tabBar: YALFoldingTabBar!)\nfunc tabBarDidSelectExtraRightItem(tabBar: YALFoldingTabBar!)\n```\n\nIf you want to handle touches on tabBarItems by indexes import `YALTabBarDelegate` protocol to the subclass of the proper `UIVIewController` and implement these methods: \n## Objective-C\n\n```objective-c\n- (void)tabBar:(YALFoldingTabBar *)tabBar didSelectItemAtIndex:(NSUInteger)index;\n- (BOOL)tabBar:(YALFoldingTabBar *)tabBar shouldSelectItemAtIndex:(NSUInteger)index;\n```\n## Swift\n\n```swift\nfunc tabBar(tabBar: YALFoldingTabBar!, didSelectItemAtIndex index: UInt)\nfunc tabBar(tabBar: YALFoldingTabBar!, shouldSelectItemAtIndex index: UInt) -> Bool\n```\n\n If you want to observe contracting and expanding animation states in `YALFoldingTabBar` the following methods of `YALTabBarDelegate` protocol can be implemented:\n## Objective-C\n\n```objective-c\n- (void)tabBarWillCollapse:(YALFoldingTabBar *)tabBar;\n- (void)tabBarWillExpand:(YALFoldingTabBar *)tabBar;\n\n- (void)tabBarDidCollapse:(YALFoldingTabBar *)tabBar;\n- (void)tabBarDidExpand:(YALFoldingTabBar *)tabBar;\n```\n## Swift\n\n```swift\nfunc tabBarWillCollapse(tabBar: YALFoldingTabBar!)\nfunc tabBarWillExpand(tabBar: YALFoldingTabBar!)\n\nfunc tabBarDidCollapse(tabBar: YALFoldingTabBar!)\nfunc tabBarDidExpand(tabBar: YALFoldingTabBar!)\n```\n\n## Important notes\nBecause we changed the height of the default `UITabBar` you should adjust your content to the bottom of  viewcontroller\'s superview, and ignore Bottom Layout Guide.  You should also uncheck \'Under bottom bars\'  ![\'](http://i.stack.imgur.com/Owlcz.png)\n\nYou can see how we did it on the example project.\n\n## Tips for customization\nYou can make the following configurations for custom tabBar:\n\n1) Specify height \n## Objective-C\n\n```objective-c\ntabBarController.tabBarViewHeight = YALTabBarViewDefaultHeight;\n```  \n## Swift\n\n```swift\ntabBarController.tabBarViewHeight = YALTabBarViewDefaultHeight\n```  \n\n2) Specify insets and offsets\n## Objective-C\n\n```objective-c\n    tabBarController.tabBarView.tabBarViewEdgeInsets = YALTabBarViewHDefaultEdgeInsets;\n    tabBarController.tabBarView.tabBarItemsEdgeInsets = YALTabBarViewItemsDefaultEdgeInsets;\n    tabBarController.tabBarView.offsetForExtraTabBarItems = YALForExtraTabBarItemsDefaultOffset;\n```\n## Swift\n\n```swift\ntabBarController.tabBarView.tabBarViewEdgeInsets = YALTabBarViewHDefaultEdgeInsets\ntabBarController.tabBarView.tabBarItemsEdgeInsets = YALTabBarViewItemsDefaultEdgeInsets\ntabBarController.tabBarView.offsetForExtraTabBarItems = YALForExtraTabBarItemsDefaultOffset\n```\n\n3) Specify colors\n## Objective-C\n\n```objective-c\n    tabBarController.tabBarView.backgroundColor = [UIColor colorWithRed:94.0/255.0 green:91.0/255.0 blue:149.0/255.0 alpha:1];\n    tabBarController.tabBarView.tabBarColor = [UIColor colorWithRed:72.0/255.0 green:211.0/255.0 blue:178.0/255.0 alpha:1];\n    tabBarController.tabBarView.dotColor = [UIColor colorWithRed:94.0/255.0 green:91.0/255.0 blue:149.0/255.0 alpha:1];\n``` \n## Swift\n\n```swift\ntabBarController.tabBarView.backgroundColor = UIColor(\n                                                  red: 94.0/255.0,\n                                                  green: 91.0/255.0,\n                                                  blue: 149.0/255.0,\n                                                  alpha: 1\n                                              )\n\ntabBarController.tabBarView.tabBarColor = UIColor(\n                                              red: 72.0/255.0,\n                                              green: 211.0/255.0,\n                                              blue: 178.0/255.0,\n                                              alpha: 1\n                                          )\n\ntabBarController.tabBarView.dotColor = UIColor(\n                                           red: 94.0/255.0,\n                                           green: 91.0/255.0,\n                                           blue: 149.0/255.0,\n                                           alpha: 1\n                                       )\n```\n4) Specify height for additional left and right buttons\n## Objective-C\n\n```objective-c\n    tabBarController.tabBarView.extraTabBarItemHeight = YALExtraTabBarItemsDefaultHeight;\n```  \n## Swift\n\n```swift\ntabBarController.tabBarView.extraTabBarItemHeight = YALExtraTabBarItemsDefaultHeight\n```  \n\n## Let us know!\n\nWe\xe2\x80\x99d be really happy if you sent us links to your projects where you use our component. Just send an email to github@yalantis.com And do let us know if you have any questions or suggestion regarding the animation. \n\nP.S. We\xe2\x80\x99re going to publish more awesomeness wrapped in code and a tutorial on how to make UI for iOS (Android) better than better. Stay tuned!\n\n## License\n\n    The MIT License (MIT)\n\n    Copyright \xc2\xa9 2017 Yalantis\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the "Software"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in\n    all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n    THE SOFTWARE.\n    \n'