b'KolodaView ![cocoapods](https://img.shields.io/cocoapods/v/Koloda.svg)[![Carthage compatible](https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat)](https://github.com/Carthage/Carthage) ![Swift 5.0](https://img.shields.io/badge/Swift-5.0-orange.svg)\n--------------\n\n[![Yalantis](https://raw.githubusercontent.com/Yalantis/PullToMakeSoup/master/PullToMakeSoupDemo/Resouces/badge_dark.png)](https://Yalantis.com/?utm_source=github)\n\nCheck this [article on our blog](https://yalantis.com/blog/how-we-built-tinder-like-koloda-in-swift/).\nAnd another one [article on our blog](https://yalantis.com/blog/koloda-tinder-like-animation-version-2-prototyping-in-pixate-and-development-in-swift/)\n\n![Preview](https://github.com/Yalantis/Koloda/blob/master/Koloda_v2_example_animation.gif)\n![Preview](https://github.com/Yalantis/Koloda/blob/master/Koloda_v1_example_animation.gif)\n\nPurpose\n--------------\n\nKolodaView is a class designed to simplify the implementation of Tinder like cards on iOS. It adds convenient functionality such as a UITableView-style dataSource/delegate interface for loading views dynamically, and efficient view loading, unloading .\n\nSupported OS & SDK Versions\n-----------------------------\n\n* Supported build target - iOS 11.0 (Xcode 9)\n\nARC Compatibility\n------------------\n\nKolodaView requires ARC.\n\nThread Safety\n--------------\n\nKolodaView is subclassed from UIView and - as with all UIKit components - it should only be accessed from the main thread. You may wish to use threads for loading or updating KolodaView contents or items, but always ensure that once your content has loaded, you switch back to the main thread before updating the KolodaView.\n\nInstallation\n--------------\nTo install via CocoaPods add this lines to your Podfile. You need CocoaPods v. 1.1 or higher\n```ruby\nuse_frameworks!\npod "Koloda"\n```\n\nTo install via Carthage add this lines to your Cartfile\n```ruby\ngithub "Yalantis/Koloda"\n```\n\nTo install manually the KolodaView class in an app, just drag the KolodaView, DraggableCardView, OverlayView class files (demo files and assets are not needed) into your project. Also you need to install facebook-pop. Or add bridging header if you are using CocoaPods.\n\nUsage\n--------------\n\n1. Import `Koloda` module to your `MyKolodaViewController` class\n\n    ```swift\n    import Koloda\n    ```\n2. Add `KolodaView` to `MyKolodaViewController`, then set dataSource and delegate for it\n    ```swift\n    class MyKolodaViewController: UIViewController {\n        @IBOutlet weak var kolodaView: KolodaView!\n\n        override func viewDidLoad() {\n            super.viewDidLoad()\n\n            kolodaView.dataSource = self\n            kolodaView.delegate = self\n        }\n    }\n    ```\n3. Conform your `MyKolodaViewController` to `KolodaViewDelegate` protocol and override some methods if you need, e.g.\n    ```swift\n    extension MyKolodaViewController: KolodaViewDelegate {\n        func kolodaDidRunOutOfCards(_ koloda: KolodaView) {\n            koloda.reloadData()\n        }\n\n        func koloda(_ koloda: KolodaView, didSelectCardAt index: Int) {\n            UIApplication.shared.openURL(URL(string: "https://yalantis.com/")!)\n        }\n    }\n    ```\n4. Conform `MyKolodaViewController` to `KolodaViewDataSource` protocol and implement all the methods , e.g.\n    ```swift\n    extension MyKolodaViewController: KolodaViewDataSource {\n\n        func kolodaNumberOfCards(_ koloda:KolodaView) -> Int {\n            return images.count\n        }\n\n        func kolodaSpeedThatCardShouldDrag(_ koloda: KolodaView) -> DragSpeed {\n            return .fast\n        }\n\n        func koloda(_ koloda: KolodaView, viewForCardAt index: Int) -> UIView {\n            return UIImageView(image: images[index])\n        }\n\n        func koloda(_ koloda: KolodaView, viewForCardOverlayAt index: Int) -> OverlayView? {\n            return Bundle.main.loadNibNamed("OverlayView", owner: self, options: nil)[0] as? OverlayView\n        }\n    }\n    ```\n5. `KolodaView` works with default implementation. Override it to customize its behavior\n\nAlso check out [an example project with carthage](https://github.com/serejahh/Koloda-Carthage-usage).\n\nProperties\n--------------\n\nThe KolodaView has the following properties:\n```swift\nweak var dataSource: KolodaViewDataSource?\n```\nAn object that supports the KolodaViewDataSource protocol and can provide views to populate the KolodaView.\n```swift\nweak var delegate: KolodaViewDelegate?\n```\nAn object that supports the KolodaViewDelegate protocol and can respond to KolodaView events.\n```swift\nprivate(set) public var currentCardIndex\n```\nThe index of front card in the KolodaView (read only).\n```swift\nprivate(set) public var countOfCards\n```\nThe count of cards in the KolodaView (read only). To set this, implement the `kolodaNumberOfCards:` dataSource method.\n```swift\npublic var countOfVisibleCards\n```\nThe count of displayed cards in the KolodaView.\n\nMethods\n--------------\n\nThe KolodaView class has the following methods:\n```swift\npublic func reloadData()\n```\nThis method reloads all KolodaView item views from the dataSource and refreshes the display.\n```swift\npublic func resetCurrentCardIndex()\n```\nThis method resets currentCardIndex and calls reloadData, so KolodaView loads from the beginning.\n```swift\npublic func revertAction()\n```\nApplies undo animation and decrement currentCardIndex.\n```swift\npublic func applyAppearAnimationIfNeeded()\n```\nApplies appear animation if needed.\n```swift\npublic func swipe(_ direction: SwipeResultDirection, force: Bool = false)\n```\nApplies swipe animation and action, increment currentCardIndex.\n\n```swift\nopen func frameForCard(at index: Int) -> CGRect\n```\n\nCalculates frames for cards. Useful for overriding. See example to learn more about it.\n\nProtocols\n---------------\n\nThe KolodaView follows the Apple convention for data-driven views by providing two protocol interfaces, KolodaViewDataSource and KolodaViewDelegate.\n\n#### The KolodaViewDataSource protocol has the following methods:\n```swift\nfunc koloda(_ kolodaNumberOfCards koloda: KolodaView) -> Int\n```\nReturn the number of items (views) in the KolodaView.\n```swift\nfunc koloda(_ koloda: KolodaView, viewForCardAt index: Int) -> UIView\n```\nReturn a view to be displayed at the specified index in the KolodaView.\n```swift\nfunc koloda(_ koloda: KolodaView, viewForCardOverlayAt index: Int) -> OverlayView?\n```\nReturn a view for card overlay at the specified index. For setting custom overlay action on swiping(left/right), you should override didSet of overlayState property in OverlayView. (See Example)\n```swift\nfunc kolodaSpeedThatCardShouldDrag(_ koloda: KolodaView) -> DragSpeed\n```\nAllow management of the swipe animation duration\n\n#### The KolodaViewDelegate protocol has the following methods:\n```swift\nfunc koloda(_ koloda: KolodaView, allowedDirectionsForIndex index: Int) -> [SwipeResultDirection]\n```\nReturn the allowed directions for a given card, defaults to `[.left, .right]`\n```swift\nfunc koloda(_ koloda: KolodaView, shouldSwipeCardAt index: Int, in direction: SwipeResultDirection) -> Bool\n```\nThis method is called before the KolodaView swipes card. Return `true` or `false` to allow or deny the swipe.\n```swift\nfunc koloda(_ koloda: KolodaView, didSwipeCardAt index: Int, in direction: SwipeResultDirection)\n```\nThis method is called whenever the KolodaView swipes card. It is called regardless of whether the card was swiped programatically or through user interaction.\n```swift\nfunc kolodaDidRunOutOfCards(_ koloda: KolodaView)\n```\nThis method is called when the KolodaView has no cards to display.\n```swift\nfunc koloda(_ koloda: KolodaView, didSelectCardAt index: Int)\n```\nThis method is called when one of cards is tapped.\n```swift\nfunc kolodaShouldApplyAppearAnimation(_ koloda: KolodaView) -> Bool\n```\nThis method is fired on reload, when any cards are displayed. If you return YES from the method or don\'t implement it, the koloda will apply appear animation.\n```swift\nfunc kolodaShouldMoveBackgroundCard(_ koloda: KolodaView) -> Bool\n```\nThis method is fired on start of front card swipping. If you return YES from the method or don\'t implement it, the koloda will move background card with dragging of front card.\n```swift\nfunc kolodaShouldTransparentizeNextCard(_ koloda: KolodaView) -> Bool\n```\nThis method is fired on koloda\'s layout and after swiping. If you return YES from the method or don\'t implement it, the koloda will transparentize next card below front card.\n```swift\nfunc koloda(_ koloda: KolodaView, draggedCardWithPercentage finishPercentage: CGFloat, in direction: SwipeResultDirection)\n```\nThis method is called whenever the KolodaView recognizes card dragging event.\n```swift\nfunc kolodaSwipeThresholdRatioMargin(_ koloda: KolodaView) -> CGFloat?\n```\nReturn the percentage of the distance between the center of the card and the edge at the drag direction that needs to be dragged in order to trigger a swipe. The default behavior (or returning NIL) will set this threshold to half of the distance\n```swift\nfunc kolodaDidResetCard(_ koloda: KolodaView)\n```\nThis method is fired after resetting the card.\n```swift\nfunc koloda(_ koloda: KolodaView, didShowCardAt index: Int)\n```\nThis method is called after a card has been shown, after animation is complete\n```swift\nfunc koloda(_ koloda: KolodaView, shouldDragCardAt index: Int) -> Bool\n```\nThis method is called when the card is beginning to be dragged. If you return YES from the method or\ndon\'t implement it, the card will move in the direction of the drag. If you return NO the card will\nnot move.\n\nRelease Notes\n----------------\n\nVersion 5.0\n- Swift 5.0 via [@maxxfrazer](https://github.com/maxxfrazer)\n\nVersion 4.7\n- fixed a bug with card responding during swiping via [@lixiang1994](https://github.com/lixiang1994)\n- fixed a bug with inappropriate layouting via [@soundsmitten](https://github.com/soundsmitten)\n\nVersion 4.6\n- update some properties to be publicitly settable via [@sroik](https://github.com/sroik) and [@leonardoherbert](https://github.com/leonardoherbert)\n- Xcode 9 back compatibility via [@seriyvolk83](https://github.com/seriyvolk83)\n- added posibility to have the card stack at the top or bottom via [@lorenzOliveto](https://github.com/lorenzOliveto)\n\nVersion 4.5\n- Swift 4.2 via [@evilmint](https://github.com/evilmint)\n\nVersion 4.4\n- Swift 4.1 via [@irace](https://github.com/irace)\n- Added `isLoop` property via [@brownsoo](https://github.com/brownsoo)\n- Take into account card\'s alpha channel via [@bwhtmn](https://github.com/bwhtmn)\n\nVersion 4.3\n- Swift 4 support\n- iOS 11 frame bugfix\n\nVersion 4.0\n- Swift 3 support\n- Get rid of UInt\n- Common bugfix\n\nVersion 3.1\n\n- Multiple Direction Support\n- Delegate methods for swipe disabling\n\nVersion 3.0\n\n- Ability to dynamically insert/delete/reload specific cards\n- External animator\n- Major refactoring. [More information](https://github.com/Yalantis/Koloda/releases/tag/3.0.0)\n- Swift 2.2 support\n\nVersion 2.0\n\n- Swift 2.0 support\n\nVersion 1.1\n\n- New delegate methods\n- Fixed minor issues\n\nVersion 1.0\n\n- Release version.\n\n#### Apps using KolodaView\n\n- [BroApp](https://itunes.apple.com/ua/app/bro-social-networking-bromance/id1049979758?mt=8).\n\n![Preview](https://github.com/Yalantis/Koloda/blob/master/Example/UsageExamples/bro.gif)\n- [Storage Space Plus](https://itunes.apple.com/us/app/storage-space-plus-compress/id1086277462?mt=8).\n- [Color Dating](https://itunes.apple.com/us/app/color-dating-free-app-for/id1100827439?mt=8).\n- [Ao Dispor](https://itunes.apple.com/pt/app/ao-dispor/id1185556583)\n\n#### Let us know!\n\nWe\xe2\x80\x99d be really happy if you sent us links to your projects where you use our component. Just send an email to github@yalantis.com And do let us know if you have any questions or suggestion regarding the animation.\n\nP.S. We\xe2\x80\x99re going to publish more awesomeness wrapped in code and a tutorial on how to make UI for iOS (Android) better than better. Stay tuned!\n\nLicense\n----------------\n\nThe MIT License (MIT)\n\nCopyright \xc2\xa9 2019 Yalantis\n\nPermission is hereby granted free of charge to any person obtaining a copy of this software and associated documentation files (the "Software") to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n'