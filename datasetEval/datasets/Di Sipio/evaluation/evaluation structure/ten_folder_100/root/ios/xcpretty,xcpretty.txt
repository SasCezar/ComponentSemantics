b"![logo](http://i.imgur.com/i2fElxx.png)\n\n__`xcpretty` is a fast and flexible formatter for `xcodebuild`__.<br/>\nIt does one thing, and it should do it well.\n\n[![Gem version](http://img.shields.io/gem/v/xcpretty.svg)](http://rubygems.org/gems/xcpretty)\n[![Build Status](https://travis-ci.org/supermarin/xcpretty.svg?branch=master)](https://travis-ci.org/supermarin/xcpretty)\n[![Code Climate](http://img.shields.io/codeclimate/github/supermarin/xcpretty.svg)](https://codeclimate.com/github/supermarin/xcpretty)\n[![Reviewed by Hound](https://img.shields.io/badge/Reviewed_by-Hound-8E64B0.svg)](https://houndci.com)\n\n## Installation\n``` bash\n$ gem install xcpretty\n```\n\n## Usage\n``` bash\n$ xcodebuild [flags] | xcpretty\n```\n`xcpretty` is designed to be piped with `xcodebuild` and thus keeping 100%\ncompatibility with it. It's even a bit faster than `xcodebuild` itself, since\nit saves your terminal some prints.\n\n__Important:__ If you're running `xcpretty` on a CI like Travis or Jenkins, you\nmay want to exit with same status code as `xcodebuild`.\nCI systems usually use status codes to determine if the build has failed.\n\n``` bash\n$ set -o pipefail && xcodebuild [flags] | xcpretty\n#\n# OR\n#\n$ xcodebuild [flags] | xcpretty && exit ${PIPESTATUS[0]}\n```\n\n## Raw xcodebuild output\nYou might want to use `xcpretty` together with `tee` to store the raw log in a\nfile, and get the pretty output in the terminal. This might be useful if you\nwant to inspect a failure in detail and aren't able to tell from the pretty\noutput.\n\nHere's a way of doing it:\n``` bash\n$ xcodebuild [flags] | tee xcodebuild.log | xcpretty\n```\n\n## Formats\n\n- `--simple`, `-s` (default)\n![xcpretty --simple](http://i.imgur.com/LdmozBS.gif)\n\n- `--test`, `-t` (RSpec style)\n![xcpretty alpha](http://i.imgur.com/VeTQQub.gif)\n- `--tap` ([Test Anything Protocol](http://testanything.org)-compatible output)\n- `--knock`, `-k` (a [simplified version](https://github.com/chneukirchen/knock) of the Test Anything Protocol)\n\n## ANSI / UTF-8\n\n- `--[no-]color`: Show build icons in color. (you can add it to `--simple` or `--test` format).\n  Defaults to auto-detecting color availability.\n- `--[no-]utf`: Use unicode characters in build output or only ASCII.\n  Defaults to auto-detecting the current locale.\n\n## Reporters\n\n- `--report junit`, `-r junit`: Creates a JUnit-style XML report at `build/reports/junit.xml`, compatible with Jenkins and TeamCity CI.\n\n- `--report html`, `-r html`: Creates a simple HTML report at `build/reports/tests.html`.\n![xcpretty html](http://i.imgur.com/0Rnux3v.gif)\n\n- `--report json-compilation-database`, `-r json-compilation-database`: Creates a [JSON compilation database](http://clang.llvm.org/docs/JSONCompilationDatabase.html) at `build/reports/compilation_db.json`. This is a format to replay single compilations independently of the build system.\n\nWriting a report to a custom path can be specified using `--output PATH`.\n\n## Extensions\n\n`xcpretty` supports custom formatters through the use of the\n`--formatter` flag, which takes a path to a file as an argument. The\nfile must contain a Ruby subclass of `XCPretty::Formatter`, and\nreturn that class at the end of the file. The class\ncan override the `format_*` methods to hook into output parsing\nevents.\n\n### Known extensions\n\n* [xcpretty-travis-formatter](https://github.com/kattrali/xcpretty-travis-formatter): support for cleaner output in TravisCI using code folding\n\nThe recommended format is a gem containing the formatter and named\nwith an `xcpretty-` prefix, for easier discovery.\n\n\n## Team\n\n- [Marin Usalj](http://github.com/supermarin) http://supermar.in\n- [Delisa Mason](http://github.com/kattrali) http://delisa.me\n"