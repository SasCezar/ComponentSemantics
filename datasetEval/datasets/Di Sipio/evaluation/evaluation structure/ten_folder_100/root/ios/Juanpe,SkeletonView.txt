b'![](Assets/header2.jpg)\n\n<p align="center">\n    <a href="https://app.bitrise.io/app/6d289a17e22c8323">\n      <img src="https://app.bitrise.io/app/6d289a17e22c8323/status.svg?token=fI7gKC41XD9-aRXDScCKBw&branch=master">\n    </a>\n    <a href="https://codebeat.co/projects/github-com-juanpe-skeletonview-master"><img alt="codebeat badge" src="https://codebeat.co/badges/f854fdfd-31e5-4689-ba04-075d83653e60" /></a>\n    <a href="https://github.com/Juanpe/SkeletonView">\n        <img src="https://img.shields.io/cocoapods/p/SkeletonView.svg" alt="Platforms">\n    </a>\n    <img src="https://img.shields.io/badge/Swift-5-orange.svg" />\n    <a href="https://cocoapods.org/pods/SkeletonView">\n        <img src="https://img.shields.io/cocoapods/v/SkeletonView.svg" alt="CocoaPods" />\n    </a>\n    <a href="https://github.com/Carthage/Carthage">\n        <img src="https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat" alt="Carthage" />\n    </a>\n    <a href="https://github.com/apple/swift-package-manager">\n        <img src="https://img.shields.io/badge/SPM-compatible-brightgreen.svg" alt="SPM" />\n    </a>\n    <a href="https://twitter.com/JuanpeCatalan">\n        <img src="https://img.shields.io/badge/contact-@JuanpeCatalan-blue.svg?style=flat" alt="Twitter: @JuanpeCatalan" />\n    </a>\n    <br/>\n    <a href="https://gitter.im/SkeletonView/community?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge">\n        <img src="https://badges.gitter.im/SkeletonView/community.svg?style=flat" />\n    </a>\n    <a href="https://twitter.com/intent/tweet?text=Wow%20This%20library%20is%20awesome:&url=https%3A%2F%2Fgithub.com%2FJuanpe%2FSkeletonView">\n      <img src="https://img.shields.io/twitter/url/https/github.com/Juanpe/SkeletonView.svg?style=social" alt="License" />\n    </a>\n</p>\n\n\xf0\x9f\x8c\x8e  Translations: </br>\n[\xf0\x9f\x87\xa8\xf0\x9f\x87\xb3](https://github.com/Juanpe/SkeletonView/blob/master/README_zh.md) by [@WhatsXie](https://twitter.com/WhatsXie) </br>\n[\xf0\x9f\x87\xa7\xf0\x9f\x87\xb7](https://github.com/Juanpe/SkeletonView/blob/master/README_pt-br.md) by [@brunomunizaf](https://twitter.com/brunomuniz_af) </br>\n[\xf0\x9f\x87\xb0\xf0\x9f\x87\xb7](https://github.com/Juanpe/SkeletonView/blob/master/README_ko.md) by [@techinpark](https://twitter.com/techinpark)\n\nToday almost all apps have async processes, such as Api requests, long running processes, etc. And while the processes are working, usually developers place a loading view to show users that something is going on.\n\n```SkeletonView``` has been conceived to address this need, an elegant way to show users that something is happening and also prepare them to which contents he is waiting.\n\nEnjoy it! \xf0\x9f\x99\x82\n\n* [Features](#-features)\n* [Guides](#-guides)\n* [Installation](#-installation)\n  * [Cocoapods](#using-cocoapods)\n  * [Carthage](#using-carthage)\n  * [SPM](#using-swift-package-manager)\n* [How to use](#-how-to-use)\n  * [Collections](#-collections)\n  * [Multiline text](#-multiline-text)\n  * [Custom colors](#-custom-colors)\n  * [Appearance](#-appearance)\n  * [Custom animations](#-custom-animations)\n  * [Transitions](#-transitions)\n  * [Hierarchy](#-hierarchy)\n  * [Debug](#-debug)\n* [Documentation](#-documentation)\n* [Supported OS & SDK Versions](#-supported-os--sdk-versions)\n* [Next steps](#-next-steps)\n* [Contributing](#-contributing)\n* [Mentions](#-mentions)\n* [Author](#-author)\n* [License](#-license)\n\n\n## \xf0\x9f\x8c\x9f Features\n\n- [x] Easy to use\n- [x] All UIViews are skeletonables\n- [x] Fully customizable\n- [x] Universal (iPhone & iPad)\n- [x] Interface Builder friendly\n- [x] Simple Swift syntax\n- [x] Lightweight readable codebase\n\n## \xf0\x9f\x8e\xac Guides\n\n [<img src="Assets/thumb_getting_started.png">](https://youtu.be/75kgOhWsPNA)\n\n## \xf0\x9f\x93\xb2 Installation\n\n#### Using [CocoaPods](https://cocoapods.org)\n\nEdit your `Podfile` and specify the dependency:\n\n```ruby\npod "SkeletonView"\n```\n\n#### Using [Carthage](https://github.com/carthage)\n\nEdit your `Cartfile` and specify the dependency:\n\n```bash\ngithub "Juanpe/SkeletonView"\n```\n\n#### Using [Swift Package Manager](https://github.com/apple/swift-package-manager)\n\nOnce you have your Swift package set up, adding `SkeletonView` as a dependency is as easy as adding it to the `dependencies` value of your `Package.swift`.\n\n```swift\n  dependencies: [\n    .package(url: "https://github.com/Juanpe/SkeletonView.git", from: "1.7.0")\n  ]\n```\n\n\n\n## \xf0\x9f\x90\x92 How to use\n\nOnly **3** steps needed to use `SkeletonView`:\n\n**1.** Import SkeletonView in proper place.\n```swift\nimport SkeletonView\n```\n\n**2.** Now, set which views will be `skeletonables`. You achieve this in two ways:\n\n**Using code:**\n```swift\navatarImageView.isSkeletonable = true\n```\n**Using IB/Storyboards:**\n\n![](Assets/storyboard.png)\n\n**3.** Once you\'ve set the views, you can show the **skeleton**. To do so, you have **4** choices:\n\n```swift\n(1) view.showSkeleton()                 // Solid\n(2) view.showGradientSkeleton()         // Gradient\n(3) view.showAnimatedSkeleton()         // Solid animated\n(4) view.showAnimatedGradientSkeleton() // Gradient animated\n```\n\n**Preview**\n\n<table>\n<tr>\n<td width="25%">\n<center>Solid</center>\n</td>\n<td width="25%">\n<center>Gradient</center>\n</td>\n<td width="25%">\n<center>Solid Animated</center>\n</td>\n<td width="25%">\n<center>Gradient Animated</center>\n</td>\n</tr>\n<tr>\n<td width="25%">\n<img src="Assets/solid.png"></img>\n</td>\n<td width="25%">\n<img src="Assets/gradient.png"></img>\n</td>\n<td width="25%">\n<img src="Assets/solid_animated.gif"></img>\n</td>\n<td width="25%">\n<img src="Assets/gradient_animated.gif"></img>\n</td>\n</tr>\n</table>\n\n> **IMPORTANT!**\n>>```SkeletonView``` is recursive, so if you want show the skeleton in all skeletonable views, you only need to call the show method in the main container view. For example, with UIViewControllers\n\n### Extra\n\n#### Skeleton views layout\n\nSometimes skeleton layout may not fit your layout because the parent view bounds have changed. ~For example, rotating the device.~\n\nYou can relayout the skeleton views like so:\n\n```swift\noverride func viewDidLayoutSubviews() {\n    view.layoutSkeletonIfNeeded()\n}\n```\n\n\xe2\x9a\xa0\xef\xb8\x8f\xe2\x9a\xa0\xef\xb8\x8f You shouldn\'t call this method. From *version 1.8.1* you don\'t need to call this method, the library does automatically. So, you can use this method *ONLY* in the cases when you need to update the layout of the skeleton manually.\n\n#### Update skeleton configuration\n\nYou can change the skeleton configuration at any time like its colour, animation, etc. with the following methods:\n\n```swift\n(1) view.updateSkeleton()                 // Solid\n(2) view.updateGradientSkeleton()         // Gradient\n(3) view.updateAnimatedSkeleton()         // Solid animated\n(4) view.updateAnimatedGradientSkeleton() // Gradient animated\n```\n\n### \xf0\x9f\x8c\xbf Collections\n\n Now, ```SkeletonView``` is compatible with ```UITableView``` and ```UICollectionView```.\n\n#### UITableView\n\nIf you want to show the skeleton in a ```UITableView```, you need to conform to ```SkeletonTableViewDataSource``` protocol.\n\n``` swift\npublic protocol SkeletonTableViewDataSource: UITableViewDataSource {\n    func numSections(in collectionSkeletonView: UITableView) -> Int\n    func collectionSkeletonView(_ skeletonView: UITableView, numberOfRowsInSection section: Int) -> Int\n    func collectionSkeletonView(_ skeletonView: UITableView, cellIdentifierForRowAt indexPath: IndexPath) -> ReusableCellIdentifier\n}\n```\nAs you can see, this protocol inherits from ```UITableViewDataSource```, so you can replace this protocol with the skeleton protocol.\n\nThis protocol has a default implementation:\n\n``` swift\nfunc numSections(in collectionSkeletonView: UITableView) -> Int\n// Default: 1\n```\n\n``` swift\nfunc collectionSkeletonView(_ skeletonView: UITableView, numberOfRowsInSection section: Int) -> Int\n// Default:\n// It calculates how many cells need to populate whole tableview\n```\n\nThere is only one method you need to implement to let Skeleton know the cell identifier. This method doesn\'t have default implementation:\n ``` swift\n func collectionSkeletonView(_ skeletonView: UITableView, cellIdentifierForRowAt indexPath: IndexPath) -> ReusableCellIdentifier\n ```\n\n**Example**\n ``` swift\n func collectionSkeletonView(_ skeletonView: UITableView, cellIdentifierForRowAt indexPath: IndexPath) -> ReusableCellIdentifier {\n    return "CellIdentifier"\n}\n ```\n\n> **IMPORTANT!**\n> If you are using resizable cells (`tableView.rowHeight = UITableViewAutomaticDimension` ), it\'s mandatory define the `estimatedRowHeight`.\n\n\xf0\x9f\x91\xa9\xf0\x9f\x8f\xbc\xe2\x80\x8d\xf0\x9f\x8f\xab  **How specify which elements are skeletonables?**\n\nHere is an illustration that shows how you should specify which elements are skeletonables when you are using an `UITableView`:\n\n![](Assets/tableview_scheme.png)\n\nAs you can see, we have to make skeletonable the tableview, the cell and the UI elements, but we don\'t need to set as skeletonable the `contentView`\n\n####  UICollectionView\n\nFor ```UICollectionView```, you need to conform to ```SkeletonCollectionViewDataSource``` protocol.\n\n``` swift\npublic protocol SkeletonCollectionViewDataSource: UICollectionViewDataSource {\n    func numSections(in collectionSkeletonView: UICollectionView) -> Int\n    func collectionSkeletonView(_ skeletonView: UICollectionView, numberOfItemsInSection section: Int) -> Int\n    func collectionSkeletonView(_ skeletonView: UICollectionView, cellIdentifierForItemAt indexPath: IndexPath) -> ReusableCellIdentifier\n}\n```\n\nThe rest of the process is the same as ```UITableView```\n\n### \xf0\x9f\x93\xb0 Multiline text\n\n\n![](Assets/multilines2.png)\n\nWhen using elements with text, ```SkeletonView``` draws lines to simulate text.\nBesides, you can decide how many lines you want. If  ```numberOfLines``` is set to zero, it will calculate how many lines needed to populate the whole skeleton and it will be drawn. Instead, if you set it to one, two or any number greater than zero, it will only draw this number of lines.\n\n##### \xf0\x9f\x8e\x9b Customize\n\nYou can set some properties for multilines elements.\n\n\n| Property | Values | Default | Preview\n| ------- | ------- |------- | -------\n| **Filling percent** of the last line. | `0...100` | `70%` | ![](Assets/multiline_lastline.png)\n| **Corner radius** of lines. (**NEW**) | `0...10` | `0` | ![](Assets/multiline_corner.png)\n\n\n\nTo modify the percent or radius **using code**, set the properties:\n```swift\ndescriptionTextView.lastLineFillPercent = 50\ndescriptionTextView.linesCornerRadius = 5\n```\n\nOr, if you prefer use **IB/Storyboard**:\n\n![](Assets/multiline_customize.png)\n\n### \xf0\x9f\x8e\xa8 Custom colors\n\nYou can decide which color the skeleton is tinted with. You only need to pass as a parameter the color or gradient you want.\n\n**Using solid colors**\n``` swift\nview.showSkeleton(usingColor: UIColor.gray) // Solid\n// or\nview.showSkeleton(usingColor: UIColor(red: 25.0, green: 30.0, blue: 255.0, alpha: 1.0))\n```\n**Using gradients**\n``` swift\nlet gradient = SkeletonGradient(baseColor: UIColor.midnightBlue)\nview.showGradientSkeleton(usingGradient: gradient) // Gradient\n```\n\nBesides, ```SkeletonView``` features 20 flat colors \xf0\x9f\xa4\x99\xf0\x9f\x8f\xbc\n\n```UIColor.turquoise, UIColor.greenSea, UIColor.sunFlower, UIColor.flatOrange  ...```\n\n![](Assets/flatcolors.png)\n###### Image captured from website [https://flatuicolors.com](https://flatuicolors.com)\n\n### \xf0\x9f\xa6\x8b Appearance\n\n**NEW** The skeletons have a default appearance. So, when you don\'t specify the color, gradient or multilines properties, `SkeletonView` uses the default values.\n\nDefault values:\n- **tintColor**: UIColor\n    - *default: `.skeletonDefault` (same as `.clouds` but adaptive to dark mode)*\n- **gradient**: SkeletonGradient\n  - *default: `SkeletonGradient(baseColor: .skeletonDefault)`*\n- **multilineHeight**: CGFloat\n  - *default: 15*\n- **multilineSpacing**: CGFloat\n  - *default: 10*\n- **multilineLastLineFillPercent**: Int\n  - *default: 70*\n- **multilineCornerRadius**: Int\n  - *default: 0*\n\nTo get these default values you can use `SkeletonAppearance.default`. Using this property you can set the values as well:\n```Swift\nSkeletonAppearance.default.multilineHeight = 20\nSkeletonAppearance.default.tintColor = .green\n```\n\nYou can also specifiy these line appearance properties on a per-label basis:\n- **lastLineFillPercent**: Int\n- **linesCornerRadius**: Int\n- **skeletonLineSpacing**: CGFloat\n- **skeletonPaddingInsets**: UIEdgeInsets\n\n\n### \xf0\x9f\xa4\x93 Custom animations\n\n```SkeletonView``` has two built-in animations, *pulse* for solid skeletons and *sliding* for gradients.\n\nBesides, if you want to do your own skeleton animation, it\'s really easy.\n\n\nSkeleton provides the `showAnimatedSkeleton` function which has a ```SkeletonLayerAnimation``` closure where you can define your custom animation.\n\n```swift\npublic typealias SkeletonLayerAnimation = (CALayer) -> CAAnimation\n```\n\nYou can call the function like this:\n\n```swift\nview.showAnimatedSkeleton { (layer) -> CAAnimation in\n  let animation = CAAnimation()\n  // Customize here your animation\n\n  return animation\n}\n```\n\nIt\'s available ```SkeletonAnimationBuilder```. It\'s a builder to make ```SkeletonLayerAnimation```.\n\nToday, you can create **sliding animations** for gradients, deciding the **direction** and setting the **duration** of the animation (default = 1.5s).\n\n```swift\n// func makeSlidingAnimation(withDirection direction: GradientDirection, duration: CFTimeInterval = 1.5) -> SkeletonLayerAnimation\n\nlet animation = SkeletonAnimationBuilder().makeSlidingAnimation(withDirection: .leftToRight)\nview.showAnimatedGradientSkeleton(usingGradient: gradient, animation: animation)\n\n```\n\n```GradientDirection``` is an enum, with this cases:\n\n|  Direction | Preview\n|------- | -------\n| .leftRight | ![](Assets/sliding_left_to_right.gif)\n| .rightLeft | ![](Assets/sliding_right_to_left.gif)\n| .topBottom | ![](Assets/sliding_top_to_bottom.gif)\n| .bottomTop | ![](Assets/sliding_bottom_to_top.gif)\n| .topLeftBottomRight | ![](Assets/sliding_topLeft_to_bottomRight.gif)\n| .bottomRightTopLeft | ![](Assets/sliding_bottomRight_to_topLeft.gif)\n\n> **\xf0\x9f\x98\x89 TRICK!**\nExist another way to create sliding animations, just using this shortcut:\n>>```let animation = GradientDirection.leftToRight.slidingAnimation()```\n\n\n\n### \xf0\x9f\x8f\x84 Transitions\n\n```SkeletonView``` has build-in transitions to **show** or **hide** the skeletons in a *smoother* way \xf0\x9f\xa4\x99\n\nTo use the transition, simply add the ```transition``` parameter to your ```showSkeleton()``` or ```hideSkeleton()``` function with the transition time, like this:\n\n```swift\nview.showSkeleton(transition: .crossDissolve(0.25))     //Show skeleton cross dissolve transition with 0.25 seconds fade time\nview.hideSkeleton(transition: .crossDissolve(0.25))     //Hide skeleton cross dissolve transition with 0.25 seconds fade time\n\n```\n\n**Preview**\n\n<table>\n<tr>\n<td width="50%">\n<center>None</center>\n</td>\n<td width="50%">\n<center>Cross dissolve</center>\n</td>\n</tr>\n<tr>\n<td width="50%">\n<img src="Assets/skeleton_transition_nofade.gif"></img>\n</td>\n<td width="50%">\n<img src="Assets/skeleton_transition_fade.gif"></img>\n</td>\n</tr>\n</table>\n\n\n### \xf0\x9f\x91\xa8\xe2\x80\x8d\xf0\x9f\x91\xa7\xe2\x80\x8d\xf0\x9f\x91\xa6 Hierarchy\n\nSince ```SkeletonView``` is recursive, and we want skeleton to be very efficient, we want to stop recursion as soon as possible. For this reason, you must set the container view as `Skeletonable`, because Skeleton will stop looking for `skeletonable` subviews as soon as a view is not Skeletonable, breaking then the recursion.\n\nBecause an image is worth a thousand words:\n\nIn this example we have a `UIViewController` with a `ContainerView` and a `UITableView`. When the view is ready, we show the skeleton using this method:\n```\nview.showSkeleton()\n```\n\n> ```\xc3\xacsSkeletonable```= \xe2\x98\xa0\xef\xb8\x8f\n\n| Configuration | Result|\n|:-------:|:-------:|\n|<img src="Assets/no_skeletonable.jpg" width="350"/> | <img src="Assets/no_skeletonables_result.png" width="350"/>|\n|<img src="Assets/container_no_skeletonable.jpg" width="350"/> | <img src="Assets/no_skeletonables_result.png" width="350"/>|\n|<img src="Assets/container_skeletonable.jpg" width="350"/> | <img src="Assets/container_skeletonable_result.png" width="350"/>|\n|<img src="Assets/all_skeletonables.jpg" width="350"/>| <img src="Assets/all_skeletonables_result.png" width="350"/>|\n|<img src="Assets/tableview_no_skeletonable.jpg" width="350"/> | <img src="Assets/tableview_no_skeletonable_result.png" height="350"/>|\n|<img src="Assets/tableview_skeletonable.jpg" width="350"/> | <img src="Assets/tableview_skeletonable_result.png" height="350"/>|\n\n\n### \xf0\x9f\x94\xac Debug\n\n**NEW** In order to facilitate the debug tasks when something is not working fine. `SkeletonView` has some new tools.\n\nFirst, `UIView` has available a new property with his skeleton info:\n```swift\nvar skeletonDescription: String\n\n```\nThe skeleton representation looks like this:\n\n![](Assets/debug_description.png)\n\nBesides, you can activate the new **debug mode**. You just add the environment variable `SKELETON_DEBUG` and activate it.\n\n![](Assets/debug_mode.png)\n\nThen, when the skeleton appears, you can see the view hierarchy in the Xcode console.\n\n<details>\n<summary>Open to see an output example </summary>\n<img src="Assets/hierarchy_output.png" />\n</details>\n\n\n\n### \xf0\x9f\x93\x9a Documentation\nComing soon...\xf0\x9f\x98\x85\n\n### \xf0\x9f\x93\x8b Supported OS & SDK Versions\n\n* iOS 9.0+\n* tvOS 9.0+\n* Swift 5\n\n## \xf0\x9f\x93\xac Next steps\n\n* [x] Set the filling percent of the last line in multiline elements\n* [x] Add more gradient animations\n* [x] Supported resizable cells\n* [x] CollectionView compatible\n* [x] tvOS compatible\n* [x] Add recovery state\n* [x] Custom default appearance\n* [x] Debug mode\n* [x] Add animations when it shows/hides the skeletons\n* [ ] Custom collections compatible\n* [ ] MacOS and WatchOS compatible\n\n## \xe2\x9d\xa4\xef\xb8\x8f Contributing\nThis is an open source project, so feel free to contribute. How?\n- Open an [issue](https://github.com/Juanpe/SkeletonView/issues/new).\n- Send feedback via [email](mailto://juanpecatalan.com).\n- Propose your own fixes, suggestions and open a pull request with the changes.\n\nSee [all contributors](https://github.com/Juanpe/SkeletonView/graphs/contributors)\n\n###### Project generated with [SwiftPlate](https://github.com/JohnSundell/SwiftPlate)\n\n## \xf0\x9f\x93\xa2 Mentions\n\n- [iOS Dev Weekly #327](https://iosdevweekly.com/issues/327#start)\n- [Hacking with Swift Articles](https://www.hackingwithswift.com/articles/40/skeletonview-makes-loading-content-beautiful)\n- [Top 10 Swift Articles November](https://medium.mybridge.co/swift-top-10-articles-for-the-past-month-v-nov-2017-dfed7861cd65)\n- [30 Amazing iOS Swift Libraries (v2018)](https://medium.mybridge.co/30-amazing-ios-swift-libraries-for-the-past-year-v-2018-7cf15027eee9)\n- [AppCoda Weekly #44](http://digest.appcoda.com/issues/appcoda-weekly-issue-44-81899)\n- [iOS Cookies Newsletter #103](https://us11.campaign-archive.com/?u=cd1f3ed33c6527331d82107ba&id=48131a516d)\n- [Swift Developments Newsletter #113](https://andybargh.com/swiftdevelopments-113/)\n- [iOS Goodies #204](http://ios-goodies.com/post/167557280951/week-204)\n- [Swift Weekly #96](http://digest.swiftweekly.com/issues/swift-weekly-issue-96-81759)\n- [CocoaControls](https://www.cocoacontrols.com/controls/skeletonview)\n- [Awesome iOS Newsletter #74](https://ios.libhunt.com/newsletter/74)\n- [Swift News #36](https://www.youtube.com/watch?v=mAGpsQiy6so)\n- [Best iOS articles, new tools & more](https://medium.com/flawless-app-stories/best-ios-articles-new-tools-more-fcbe673e10d)\n\n\n\n## \xf0\x9f\x91\xa8\xf0\x9f\x8f\xbb\xe2\x80\x8d\xf0\x9f\x92\xbb Author\n[1.1]: http://i.imgur.com/tXSoThF.png\n[1]: http://www.twitter.com/JuanpeCatalan\n\n* Juanpe Catal\xc3\xa1n [![alt text][1.1]][1]\n\n<a class="bmc-button" target="_blank" href="https://www.buymeacoffee.com/CDou4xtIK"><img src="https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png" alt="Buy me a coffee" style="height: 41px !important;width: 174px !important;box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;-webkit-box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;"><span style="margin-left:5px"></span></a>\n\n## \xf0\x9f\x91\xae\xf0\x9f\x8f\xbb License\n\n```\nMIT License\n\nCopyright (c) 2017 Juanpe Catal\xc3\xa1n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the "Software"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n```\n'