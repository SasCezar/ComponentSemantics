b'NVActivityIndicatorView\n=======================\n\n[![Build Status](https://travis-ci.org/ninjaprox/NVActivityIndicatorView.svg?branch=master)](https://travis-ci.org/ninjaprox/NVActivityIndicatorView)\n[![Cocoapods Compatible](https://img.shields.io/cocoapods/v/NVActivityIndicatorView.svg)](https://img.shields.io/cocoapods/v/NVActivityIndicatorView.svg)\n[![Carthage Compatible](https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat)](https://github.com/Carthage/Carthage)\n[![Reviewed by Hound](https://img.shields.io/badge/Reviewed_by-Hound-8E64B0.svg)](https://houndci.com)\n\n## Introduction\n`NVActivityIndicatorView` is a collection of awesome loading animations.\n\nThis is original a fork from [DGActivityIndicatorView](https://github.com/gontovnik/DGActivityIndicatorView), inspired by [Loaders.css](https://github.com/ConnorAtherton/loaders.css), written in Swift with full implementation of animations, plus more.\n\nYou can also find Objective-C version of this [here](https://github.com/ninjaprox/DGActivityIndicatorView).\n\n## Demo\n![alt tag](https://raw.githubusercontent.com/ninjaprox/NVActivityIndicatorView/master/Demo.gif)\n\nFor first-hand experience, just open the project and run it.\n\n## Animation types\n\n| Type | Type | Type | Type |\n|---|---|---|---|\n|1. ballPulse | 2. ballGridPulse | 3. ballClipRotate | 4. squareSpin|\n|5. ballClipRotatePulse | 6. ballClipRotateMultiple | 7. ballPulseRise | 8. ballRotate|\n|9. cubeTransition | 10. ballZigZag | 11. ballZigZagDeflect | 12. ballTrianglePath|\n|13. ballScale | 14. lineScale | 15. lineScaleParty | 16. ballScaleMultiple|\n|17. ballPulseSync | 18. ballBeat | 19. lineScalePulseOut | 20. lineScalePulseOutRapid|\n|21. ballScaleRipple | 22. ballScaleRippleMultiple | 23. ballSpinFadeLoader | 24. lineSpinFadeLoader|\n|25. triangleSkewSpin | 26. pacman | 27. ballGridBeat | 28. semiCircleSpin|\n|29. ballRotateChase | 30. orbit | 31. audioEqualizer | 32. circleStrokeSpin|\n\n## Installation\n\n### Cocoapods\n\nInstall [Cocoapods](https://cocoapods.org/#install) if need be.\n\n```bash\n$ gem install cocoapods\n```\n\nAdd `NVActivityIndicatorView` in your `Podfile`.\n\n```ruby\nuse_frameworks!\n\npod \'NVActivityIndicatorView\'\n```\n\nIf you\'re using `NVActivityIndicatorView` in an app extension, use `NVActivityIndicatorView/AppExtension` instead.\n\n```ruby\nuse_frameworks!\n\npod \'NVActivityIndicatorView/AppExtension\'\n```\n\nThen, run the following command.\n\n```bash\n$ pod install\n```\n\n_**Note:** Please refer to the migration note for version [`3.7.0`](#version-370) below._\n\n### Carthage\n\nInstall [Carthage](https://github.com/Carthage/Carthage#installing-carthage) if need be.\n\n```bash\n$ brew update\n$ brew install carthage\n```\n\nAdd `NVActivityIndicatorView` in your `Cartfile`.\n\n```ruby\ngithub "ninjaprox/NVActivityIndicatorView"\n```\n\nRun `carthage` to build the framework and drag the built `NVActivityIndicatorView.framework` in the folder appropriateto the platform, e.g. iOS, tvOS, into your Xcode project.\n\n_**Note:** You might encounter compile issue, if so please use `carthage` branch instead. Check issue [#101](https://github.com/ninjaprox/NVActivityIndicatorView/issues/101) for more information._\n\n### Manual\n\nCopy `NVActivityIndicatorView` folder to your project. That\'s it.\n\n_**Note:** Make sure that all files in `NVActivityIndicatorView` included in Compile Sources in Build Phases._\n\n_**Note:** If you encounter issues while uploading the app to iTunes Connect, remove the `Info.plist` file in `NVActivityIndicatorView`. Check issue [#129](https://github.com/ninjaprox/NVActivityIndicatorView/issues/129) for more information._\n\n## Migration\n\n### Version 4.4.0\n\nThis version requires Xcode 10.1 and Swift 4.2.\n\n### Version 4.0.0\n\nThis version requires Xcode 9.0 and Swift 4.\n\n### Version 3.7.0\n\nThis version splits `NVActivityIndicatorView` pod to 2 subpods `NVActivityIndicatorView/Presenter` and `NVActivityIndicatorView/AppExtension`. There is no need to change `pod NVActivityIndicatorView` to `pod NVActivityIndicatorView/Presenter` since it will be installed by default if you use the main pod name.\n\nHowever, if you want to use `NVActivityIndicatorView` in an app extension, use `pod NVActivityIndicatorView/AppExtension` instead.\n\n_**Note:** Related issue [#119](https://github.com/ninjaprox/NVActivityIndicatorView/issues/119)._\n\n## Usage\n\nFirstly, import `NVActivityIndicatorView`.\n\n```swift\nimport NVActivityIndicatorView\n```\n\n### Initialization\n\nThen, there are two ways you can create `NVActivityIndicatorView`:\n\n- By storyboard, changing class of any `UIView` to `NVActivityIndicatorView`.\n\n_**Note:** Set Module to `NVActivityIndicatorView`._\n\n- By code, using initializer. All parameters other than `frame` are optional and `NVActivityIndicatorView.DEFAULT_*` are used as default values.\n\n```swift\nNVActivityIndicatorView(frame: frame, type: type, color: color, padding: padding)\n```\n\n### Control\n\nStart animating.\n\n```swift\nactivityIndicatorView.startAnimating()\n```\n\nStop animating.\n\n```swift\nactivityIndicatorView.stopAnimating()\n```\n\nDetermine if it is animating.\n\n```swift\nanimating = activityIndicatorView.isAnimating\n```\n\n### Change properties\n\nIn storyboard, you can change all properties in Attributes inspector tab of Utilities panel.\n\n_**Note:** Use one of values (case-insensitive) in [Animation types](#animation-types) for `Type Name`._\n\nAll properties are public so you can change them after initializing.\n\n_**Note:** All changes must be made before calling `startAnimating()`._\n\n### UI blocker\n\nBy conforming `NVActivityIndicatorViewable` protocol, you can use `NVActivityIndicatorView` as UI blocker for `UIViewController`.\n\n```swift\nclass ViewController: UIViewController, NVActivityIndicatorViewable { }\n```\n\nStart animating.\n\n```swift\nstartAnimating(size, message) // plus other parameters as in initializer.\n```\n\nStop animating.\n\n```swift\nstopAnimating()\n```\n\nCheck if it is animating.\n\n```swift\nanimating = isAnimating\n```\n\nOr you can use `NVActivityIndicatorPresenter` to display UI blocker anywhere.\n\nStart animating.\n\n```swift\nlet activityData = ActivityData()\n\nNVActivityIndicatorPresenter.sharedInstance.startAnimating(activityData)\n```\n\n_**Note:** Check [documentation](https://nvactivityindicatorview.vinhis.me) for detail of `ActivityData`._\n\nStop animating.\n\n```swift\nNVActivityIndicatorPresenter.sharedInstance.stopAnimating()\n```\n\nChange message.\n\n```swift\nNVActivityIndicatorPresenter.sharedInstance.setMessage("Done")\n```\n\nCheck if it is animating.\n\n```swift\nanimating = NVActivityIndicatorPresenter.sharedInstance.isAnimating\n```\n\n#### Fade in/out animation\n\nYou have control over showing and hiding UI blocker animation.\n\n```swift\nstartAnimating(fadeInAnimation: fadeInAnimation)\nstopAnimating(fadeOutAnimation)\n```\n\nCheck `DEFAULT_FADE_IN_ANIMATION` and `DEFAULT_FADE_OUT_ANIMATION` for examples of how to implement animation.\n\n## Acknowledgment\n\nThanks [Connor Atherton](https://github.com/ConnorAtherton) for great loaders and [Danil Gontovnik](https://github.com/gontovnik) for kick-start.\n\n## License\n\nThe MIT License (MIT)\n\nCopyright (c) 2016 Vinh Nguyen [@ninjaprox](http://twitter.com/ninjaprox)\n'