b'<p align="center">\n  <img src="https://avatars0.githubusercontent.com/u/13637225?v=3&s=600" width="33%">\n</p>\n\nSwinject\n========\n\n[![Travis CI](https://travis-ci.org/Swinject/Swinject.svg?branch=master)](https://travis-ci.org/Swinject/Swinject)\n[![Carthage compatible](https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat)](https://github.com/Carthage/Carthage)\n[![CocoaPods Version](https://img.shields.io/cocoapods/v/Swinject.svg?style=flat)](http://cocoapods.org/pods/Swinject)\n[![License](https://img.shields.io/cocoapods/l/Swinject.svg?style=flat)](http://cocoapods.org/pods/Swinject)\n[![Platforms](https://img.shields.io/badge/platform-iOS%20%7C%20macOS%20%7C%20tvOS%20%7C%20watchOS%20%7C%20Linux-lightgrey.svg)](http://cocoapods.org/pods/Swinject)\n[![Swift Version](https://img.shields.io/badge/Swift-2.2--3.1.x-F16D39.svg?style=flat)](https://developer.apple.com/swift)\n[![Reviewed by Hound](https://img.shields.io/badge/Reviewed_by-Hound-8E64B0.svg)](https://houndci.com)\n\nSwinject is a lightweight [dependency injection](https://en.wikipedia.org/wiki/Dependency_injection) framework for Swift.\n\nDependency injection (DI) is a software design pattern that implements Inversion of Control (IoC) for resolving dependencies. In the pattern, Swinject helps your app split into loosely-coupled components, which can be developed, tested and maintained more easily. Swinject is powered by the Swift generic type system and first class functions to define dependencies of your app simply and fluently.\n\n## Features\n\n- [x] [Pure Swift Type Support](./Documentation/README.md#user-content-pure-swift-type-support)\n- [x] [Injection with Arguments](./Documentation/DIContainer.md#registration-with-arguments-to-di-container)\n- [x] [Initializer/Property/Method Injections](./Documentation/InjectionPatterns.md)\n- [x] [Initialization Callback](./Documentation/InjectionPatterns.md#user-content-initialization-callback)\n- [x] [Circular Dependency Injection](./Documentation/CircularDependencies.md)\n- [x] [Object Scopes as None (Transient), Graph, Container (Singleton) and Hierarchy](./Documentation/ObjectScopes.md)\n- [x] Support of both Reference and [Value Types](./Documentation/Misc.md#value-types)\n- [x] [Self-registration (Self-binding)](./Documentation/Misc.md#self-registration-self-binding)\n- [x] [Container Hierarchy](./Documentation/ContainerHierarchy.md)\n- [x] [Thread Safety](./Documentation/ThreadSafety.md)\n- [x] [Modular Components](./Documentation/Assembler.md)\n\n## Extensions\n\n- **[SwinjectPropertyLoader](https://github.com/Swinject/SwinjectPropertyLoader)**: Loading property values from resources.\n- **[SwinjectStoryboard](https://github.com/Swinject/SwinjectStoryboard)**: Automatic dependency injection via Storyboard.\n- **[Swinject-CodeGen](https://github.com/Swinject/Swinject-CodeGen)**: Type-safe code generation of `Container` from a CSV/YAML file defining dependencies.\n- **[SwinjectAutoregistration](https://github.com/Swinject/SwinjectAutoregistration)**: Automatic registration of services by leveraging the Swift Generics.\n\n## Requirements\n\n- iOS 8.0+ / Mac OS X 10.10+ / watchOS 2.0+ / tvOS 9.0+\n- Swift 2.2 or 2.3\n  - Xcode 7.0+\n- Swift 3\n  - Xcode 8.0+\n- Swift 3.2, 4.x\n  - Xcode 9.0+\n- Carthage 0.18+ (if you use)\n- CocoaPods 1.1.1+ (if you use)\n\n## Installation\n\nSwinject is available through [Carthage](https://github.com/Carthage/Carthage) or [CocoaPods](https://cocoapods.org).\n\n### Carthage\n\nTo install Swinject with Carthage, add the following line to your `Cartfile`.\n\n#### Swift 2.2 or 2.3\n\n```\ngithub "Swinject/Swinject" ~> 1.1.4\n```\n\n#### Swift 3.x or 4.x\n\n```\ngithub "Swinject/Swinject"\n\n# Uncomment if you use SwinjectStoryboard\n# github "Swinject/SwinjectStoryboard"\n```\n\nThen run `carthage update --no-use-binaries` command or just `carthage update`. For details of the installation and usage of Carthage, visit [its project page](https://github.com/Carthage/Carthage).\n\n\n### CocoaPods\n\nTo install Swinject with CocoaPods, add the following lines to your `Podfile`.\n\n#### Swift 2.2 or 2.3\n\n```ruby\nsource \'https://github.com/CocoaPods/Specs.git\'\nplatform :ios, \'8.0\' # or platform :osx, \'10.10\' if your target is OS X.\nuse_frameworks!\n\npod \'Swinject\', \'~> 1.1.4\'\n```\n\n#### Swift 3.x\n\n```ruby\nsource \'https://github.com/CocoaPods/Specs.git\'\nplatform :ios, \'8.0\' # or platform :osx, \'10.10\' if your target is OS X.\nuse_frameworks!\n\npod \'Swinject\'\n\n# Uncomment if you use SwinjectStoryboard\n# pod \'SwinjectStoryboard\'\n```\n\nThen run `pod install` command. For details of the installation and usage of CocoaPods, visit [its official website](https://cocoapods.org).\n\n## Documentation\n\n- [Technical documents](./Documentation) including patterns of dependency injection and examples.\n- [API reference](http://cocoadocs.org/docsets/Swinject/)\n\n## Basic Usage\n\nFirst, register a service and component pair to a `Container`, where the component is created by the registered closure as a factory. In this example, `Cat` and `PetOwner` are component classes implementing `Animal` and `Person` service protocols, respectively.\n\n```swift\nlet container = Container()\ncontainer.register(Animal.self) { _ in Cat(name: "Mimi") }\ncontainer.register(Person.self) { r in\n    PetOwner(pet: r.resolve(Animal.self)!)\n}\n```\n\nThen get an instance of a service from the container. The person is resolved to a pet owner, and playing with the cat named Mimi!\n\n```swift\nlet person = container.resolve(Person.self)!\nperson.play() // prints "I\'m playing with Mimi."\n```\n\nWhere definitions of the protocols and classes are\n\n```swift\nprotocol Animal {\n    var name: String? { get }\n}\n\nclass Cat: Animal {\n    let name: String?\n\n    init(name: String?) {\n        self.name = name\n    }\n}\n```\n\nand\n\n```swift\nprotocol Person {\n    func play()\n}\n\nclass PetOwner: Person {\n    let pet: Animal\n\n    init(pet: Animal) {\n        self.pet = pet\n    }\n\n    func play() {\n        let name = pet.name ?? "someone"\n        print("I\'m playing with \\(name).")\n    }\n}\n```\n\nNotice that the `pet` of `PetOwner` is automatically set as the instance of `Cat` when `Person` is resolved to the instance of `PetOwner`. If a container already set up is given, you do not have to care what are the actual types of the services and how they are created with their dependency.\n\n## Where to Register Services\n\nServices must be registered to a container before they are used. The typical registration approach will differ depending upon whether you are using `SwinjectStoryboard` or not.\n\nThe following view controller class is used in addition to the protocols and classes above in the examples below.\n\n```swift\nclass PersonViewController: UIViewController {\n    var person: Person?\n}\n```\n\n### With SwinjectStoryboard\n\nImport SwinjectStoryboard at the top of your swift source file if you use Swinject v2 in Swift 3.\n\n```swift\n// Only Swinject v2 in Swift 3.\nimport SwinjectStoryboard\n```\n\nServices should be registered in an extension of `SwinjectStoryboard` if you use `SwinjectStoryboard`. Refer to [the project page of SwinjectStoryboard](https://github.com/Swinject/SwinjectStoryboard) for further details.\n\n```swift\nextension SwinjectStoryboard {\n    @objc class func setup() {\n        defaultContainer.register(Animal.self) { _ in Cat(name: "Mimi") }\n        defaultContainer.register(Person.self) { r in\n            PetOwner(pet: r.resolve(Animal.self)!)\n        }\n        defaultContainer.register(PersonViewController.self) { r in\n            let controller = PersonViewController()\n            controller.person = r.resolve(Person.self)\n            return controller\n        }\n    }\n}\n```\n\n### Without SwinjectStoryboard\n\nIf you do not use `SwinjectStoryboard` to instantiate view controllers, services should be registered to a container in your application\'s `AppDelegate`. Registering before exiting `application:didFinishLaunchingWithOptions:` will ensure that the services are setup appropriately before they are used.\n\n```swift\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n    var window: UIWindow?\n    let container: Container = {\n        let container = Container()\n        container.register(Animal.self) { _ in Cat(name: "Mimi") }\n        container.register(Person.self) { r in\n            PetOwner(pet: r.resolve(Animal.self)!)\n        }\n        container.register(PersonViewController.self) { r in\n            let controller = PersonViewController()\n            controller.person = r.resolve(Person.self)\n            return controller\n        }\n        return container\n    }()\n\n    func application(\n        _ application: UIApplication,\n        didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey : Any]? = nil) -> Bool {\n\n        // Instantiate a window.\n        let window = UIWindow(frame: UIScreen.main.bounds)\n        window.makeKeyAndVisible()\n        self.window = window\n\n        // Instantiate the root view controller with dependencies injected by the container.\n        window.rootViewController = container.resolve(PersonViewController.self)\n\n        return true\n    }\n}\n```\n\nNotice that the example uses a convenience initializer taking a closure to register services to the new instance of `Container`.\n\n## Play in Playground!\n\nThe project contains `Sample-iOS.playground` to demonstrate the features of Swinject. Download or clone the project, run the playground, modify it, and play with it to learn Swinject.\n\nTo run the playground in the project, first build the project, then select `Editor > Execute Playground` menu in Xcode.\n\n## Example Apps\n\n- [SwinjectSimpleExample](https://github.com/Swinject/SwinjectSimpleExample) demonstrates dependency injection and Swinject in a simple weather app that lists current weather information at some locations.\n- [SwinjectMVVMExample](https://github.com/Swinject/SwinjectMVVMExample) demonstrates dependency injection with Swift and reactive programming with [ReactiveCocoa](https://github.com/ReactiveCocoa/ReactiveCocoa) in MVVM architecture.\n\n## Blog Posts\n\nThe following blog posts introduce Swinject and the concept of dependency injection.\n\n- [Dependency Injection Framework for Swift - Introduction to Swinject](https://yoichitgy.github.io/post/dependency-injection-framework-for-swift-introduction-to-swinject/)\n- [Dependency Injection Framework for Swift - Simple Weather App Example with Swinject Part 1/2](https://yoichitgy.github.io/post/dependency-injection-framework-for-swift-simple-weather-app-example-with-swinject-part-1/)\n- [Dependency Injection Framework for Swift - Simple Weather App Example with Swinject Part 2/2](https://yoichitgy.github.io/post/dependency-injection-framework-for-swift-simple-weather-app-example-with-swinject-part-2/)\n\n## Contribution Guide\n\nA guide to [submit issues](https://github.com/Swinject/Swinject/issues), to ask general questions, or to [open pull requests](https://github.com/Swinject/Swinject/pulls) is [here](CONTRIBUTING.md).\n\n## Question?\n\n- [Slack](https://join.slack.com/t/swinject/shared_invite/enQtNjk0NjE0NjMzOTIyLTI5NWJiNDU5NGI1MTUwZDI3MDU2ZTM2YTMwMWRhMjI0ZmFlODk4MDI5OWUwNzY1YjlhOTRjYWM2NjZmOTVhNTU) feel free to discuss anything Swinject related.\n- [Stack Overflow](https://stackoverflow.com/questions/tagged/swinject) we are trying to monitor questions tagged `swinject`\n\n## Credits\n\nThe DI container features of Swinject are inspired by:\n\n- [Ninject](http://ninject.org) - [Enkari, Ltd](https://github.com/enkari) and [the Ninject project contributors](https://github.com/ninject/Ninject/graphs/contributors).\n- [Autofac](http://autofac.org) - [Autofac Project](https://github.com/autofac/Autofac).\n\nand highly inspired by:\n\n- [Funq](http://funq.codeplex.com) - [Daniel Cazzulino](http://www.codeplex.com/site/users/view/dcazzulino) and [the project team](http://funq.codeplex.com/team/view).\n\n## License\n\nMIT license. See the [LICENSE file](LICENSE.txt) for details.\n'