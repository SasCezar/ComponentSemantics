b"Manageyum\r\n==============\r\n\r\n\r\n# Quick start\r\nThe only development dependency of this project is [Node.js](https://nodejs.org). So just make sure you have it installed.\r\nThen type few commands known to every Node developer...\r\n```\r\ngit clone https://github.com/sivaramsi/manageyum.git\r\ncd manageyum\r\nnpm install\r\nnpm start\r\n```\r\n... and boom! You have a running desktop application on your screen.\r\n\r\n\r\n## Folders for application code\r\n\r\nThe application is split between two main folders...\r\n\r\n`src` - this folder is intended for files which need to be transpiled or compiled (files which can't be used directly by electron).\r\n\r\n`app` - contains all static assets (put here images, css, html etc.) which don't need any pre-processing.\r\n\r\nThe build process compiles all stuff from the `src` folder and puts it into the `app` folder, so after the build has finished, your `app` folder contains the full, runnable application.\r\n\r\nTreat `src` and `app` folders like two halves of one bigger thing.\r\n\r\nThe drawback of this design is that `app` folder contains some files which should be git-ignored and some which shouldn't (see `.gitignore` file). But thanks to this two-folders split development builds are much (much!) faster.\r\n\r\n# Development\r\n\r\n### Installation\r\n\r\n```\r\nnpm install\r\n```\r\nIt will also download Electron runtime and install dependencies for the second `package.json` file inside the `app` folder.\r\n\r\n### Starting the app\r\n\r\n```\r\nnpm start\r\n```\r\n\r\n### Adding npm modules to your app\r\n\r\nRemember to add your dependencies to `app/package.json` file:\r\n```\r\ncd app\r\nnpm install name_of_npm_module --save\r\n```\r\n\r\n# License\r\n\r\nReleased under the MIT license.\r\n"