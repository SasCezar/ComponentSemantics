b"|LOGO|\n============================\n|BADGE_VERSION| |BADGE_CHAT|\n============================\n\n.. |LOGO| image:: https://raw.githubusercontent.com/geduldig/TwitterAPI/master/logo.png \n.. |BADGE_VERSION| image:: http://img.shields.io/pypi/v/TwitterAPI.svg\n   :target: https://crate.io/packages/TwitterAPI \n.. |BADGE_CHAT| image:: https://badges.gitter.im/Join%20Chat.svg\n   :alt: Join the chat at https://gitter.im/geduldig/TwitterAPI\n   :target: https://gitter.im/geduldig/TwitterAPI?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge\n\nTwitterAPI is a Python package for accessing Twitter's REST APIs and Streaming APIs. It supports OAuth 1.0 and OAuth 2.0 authentication.  And, it works with the latest Python versions in both 2.x and 3.x branches. \n\nREST APIs that are supported are: Public API, Collections API, Curator API, Ads API, Webhook API, Premium Search API.\n\nInstallation\n------------\nFrom the command line::\n\n\tpip install TwitterAPI\n\nDocumentation\n-------------\n* `An Introduction <http://geduldig.github.com/TwitterAPI>`_\n* `Authentication <http://geduldig.github.com/TwitterAPI/authentication.html>`_\n* `Error Handling <http://geduldig.github.com/TwitterAPI/errors.html>`_\n* `Paging Results <http://geduldig.github.com/TwitterAPI/paging.html>`_\n* `Tiny Examples <http://geduldig.github.com/TwitterAPI/examples.html>`_\n* `Fault Tolerant Streams and Pages <http://geduldig.github.com/TwitterAPI/faulttolerance.html>`_\n\nSome Code...\n------------\n[See `TwitterAPI/examples <https://github.com/geduldig/TwitterAPI/tree/master/examples>`_ for working examples.]\n\nFirst, authenticate with your application credentials::\n\n\tfrom TwitterAPI import TwitterAPI\n\tapi = TwitterAPI(consumer_key, consumer_secret, access_token_key, access_token_secret)\n\nTweet something::\n\n\tr = api.request('statuses/update', {'status':'This is a tweet!'})\n\tprint(r.status_code)\n\nGet tweet by its id::\n\n\tr = api.request('statuses/show/:%d' % 210462857140252672)\n\tprint(r.text)\n\nGet some tweets::\n\n\tr = api.request('search/tweets', {'q':'pizza'})\n\tfor item in r:\n\t\tprint(item)\n\nStream tweets from New York City::\n\n\tr = api.request('statuses/filter', {'locations':'-74,40,-73,41'})\n\tfor item in r:\n\t\tprint(item)\n\t\t\nNotice that ``request()`` works with all endpoints found in either the REST APIs or the Streaming APIs. Usually ``request()`` takes two arguments: a Twitter endpoint and a dictionary of endpoint parameters.  The above examples use ``get_iterator()`` to consume each tweet object.  The iterator knows how to iterate results returned from either the REST APIs or the Streaming APIs.  \n\nYou also have access to the response object returned by ``request()``.  From a response object ``r`` you can get the raw response with ``r.text`` and the HTTP status code with ``r.status_code``.  See the `requests <http://docs.python-requests.org/en/latest/user/quickstart/>`_ library documentation for more details.\n\nExtra Goodies\n-------------\nCommand-Line Utility (`examples/cli <https://github.com/geduldig/TwitterAPI/blob/master/examples/cli>`_)\n"