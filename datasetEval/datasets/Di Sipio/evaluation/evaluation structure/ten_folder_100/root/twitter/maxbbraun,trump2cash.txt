b'# Trump2Cash\n\nThis bot watches [Donald Trump\'s tweets](https://twitter.com/realDonaldTrump)\nand waits for him to mention any publicly traded companies. When he does, it\nuses sentiment analysis to determine whether his opinions are positive or\nnegative toward those companies. The bot then automatically executes trades on\nthe relevant stocks according to the expected market reaction. It also tweets\nout a summary of its findings in real time at\n[@Trump2Cash](https://twitter.com/Trump2Cash).\n\n*You can read more about the background story [here](https://trump2cash.biz).*\n\n[![Trump2Cash](https://cdn-images-1.medium.com/max/1400/1*VbnhlLnZz0KvWO0QsM5Ihw.png)](https://trump2cash.biz)\n\nThe code is written in Python and is meant to run on a\n[Google Compute Engine](https://cloud.google.com/compute/) instance. It uses the\n[Twitter Streaming APIs](https://dev.twitter.com/streaming/overview) to get\nnotified whenever Trump tweets. The entity detection and sentiment analysis is\ndone using Google\'s\n[Cloud Natural Language API](https://cloud.google.com/natural-language/) and the\n[Wikidata Query Service](https://query.wikidata.org/) provides the company data.\nThe [TradeKing API](https://developers.tradeking.com/) does the stock trading.\n\nThe [`main`](main.py) module defines a callback where incoming tweets are\nhandled and starts streaming Trump\'s feed:\n\n```python\ndef twitter_callback(tweet):\n    companies = analysis.find_companies(tweet)\n    if companies:\n        trading.make_trades(companies)\n        twitter.tweet(companies, tweet)\n\nif __name__ == "__main__":\n    twitter.start_streaming(twitter_callback)\n```\n\nThe core algorithms are implemented in the [`analysis`](analysis.py) and\n[`trading`](trading.py) modules. The former finds mentions of companies in the\ntext of the tweet, figures out what their ticker symbol is, and assigns a\nsentiment score to them. The latter chooses a trading strategy, which is either\nbuy now and sell at close or sell short now and buy to cover at close. The\n[`twitter`](twitter.py) module deals with streaming and tweeting out the\nsummary.\n\nFollow these steps to run the code yourself:\n\n### 1. Create VM instance\n\nCheck out the [quickstart](https://cloud.google.com/compute/docs/quickstart-linux)\nto create a Cloud Platform project and a Linux VM instance with Compute Engine,\nthen SSH into it for the steps below. Pick a predefined\n[machine type](https://cloud.google.com/compute/docs/machine-types) matching\nyour preferred price and performance.\n\n#### Container\n\nAlternatively, you can use the [`Dockerfile`](Dockerfile) to build a\n[Docker container](https://www.docker.com/what-container) and\n[run it on Compute Engine](https://cloud.google.com/compute/docs/containers/deploying-containers)\nor other platforms.\n\n```shell\ndocker build -t trump2cash .\ndocker tag trump2cash gcr.io/<YOUR_GCP_PROJECT_NAME>/trump2cash\ndocker push gcr.io/<YOUR_GCP_PROJECT_NAME>/trump2cash:latest\n```\n\n### 2. Set up auth\n\nThe authentication keys for the different APIs are read from shell environment\nvariables. Each service has different steps to obtain them.\n\n#### Twitter\n\nLog in to your [Twitter](https://twitter.com/) account and\n[create a new application](https://apps.twitter.com/app/new). Under the *Keys\nand Access Tokens* tab for [your app](https://apps.twitter.com/) you\'ll find\nthe *Consumer Key* and *Consumer Secret*. Export both to environment variables:\n\n```shell\nexport TWITTER_CONSUMER_KEY="<YOUR_CONSUMER_KEY>"\nexport TWITTER_CONSUMER_SECRET="<YOUR_CONSUMER_SECRET>"\n```\n\nIf you want the tweets to come from the same account that owns the application,\nsimply use the *Access Token* and *Access Token Secret* on the same page. If\nyou want to tweet from a different account, follow the\n[steps to obtain an access token](https://dev.twitter.com/oauth/overview). Then\nexport both to environment variables:\n\n```shell\nexport TWITTER_ACCESS_TOKEN="<YOUR_ACCESS_TOKEN>"\nexport TWITTER_ACCESS_TOKEN_SECRET="<YOUR_ACCESS_TOKEN_SECRET>"\n```\n\n#### Google\n\nFollow the\n[Google Application Default Credentials instructions](https://developers.google.com/identity/protocols/application-default-credentials#howtheywork)\nto create, download, and export a service account key.\n\n```shell\nexport GOOGLE_APPLICATION_CREDENTIALS="/path/to/credentials-file.json"\n```\n\nYou also need to [enable the Cloud Natural Language API](https://cloud.google.com/natural-language/docs/getting-started#set_up_your_project)\nfor your Google Cloud Platform project.\n\n#### TradeKing\n\nLog in to your [TradeKing](https://www.tradeking.com/) account and\n[create a new application](https://developers.tradeking.com/applications/CreateApplication).\nBehind the *Details* button for\n[your application](https://developers.tradeking.com/Applications) you\'ll find\nthe *Consumer Key*, *Consumer Secret*, *OAuth (Access) Token*, and *Oauth (Access)\nToken Secret*. Export them all to environment variables:\n\n```shell\nexport TRADEKING_CONSUMER_KEY="<YOUR_CONSUMER_KEY>"\nexport TRADEKING_CONSUMER_SECRET="<YOUR_CONSUMER_SECRET>"\nexport TRADEKING_ACCESS_TOKEN="<YOUR_ACCESS_TOKEN>"\nexport TRADEKING_ACCESS_TOKEN_SECRET="<YOUR_ACCESS_TOKEN_SECRET>"\n```\n\nAlso export your TradeKing account number, which you\'ll find under\n*[My Accounts](https://investor.tradeking.com/Modules/Dashboard/dashboard.php)*:\n\n```shell\nexport TRADEKING_ACCOUNT_NUMBER="<YOUR_ACCOUNT_NUMBER>"\n```\n\n### 3. Install dependencies\n\nThere are a few library dependencies, which you can install using\n[pip](https://pip.pypa.io/en/stable/quickstart/):\n\n```shell\n$ pip install -r requirements.txt\n```\n\n### 4. Run the tests\n\nVerify that everything is working as intended by running the tests with\n[pytest](https://doc.pytest.org/en/latest/getting-started.html) using this\ncommand:\n\n```shell\n$ export USE_REAL_MONEY=NO && pytest *.py -vv\n```\n\n### 5. Run the benchmark\n\nThe [benchmark report](benchmark.md) shows how the current implementation of the\nanalysis and trading algorithms would have performed against historical data.\nYou can run it again to benchmark any changes you may have made:\n\n```shell\n$ python benchmark.py > benchmark.md\n```\n\n### 6. Start the bot\n\nEnable real orders that use your money:\n\n```shell\n$ export USE_REAL_MONEY=YES\n```\n\nHave the code start running in the background with this command:\n\n```shell\n$ nohup python main.py &\n```\n\n## License\n\nCopyright 2017 Max Braun\n\nLicensed under the Apache License, Version 2.0 (the "License");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an "AS IS" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n'