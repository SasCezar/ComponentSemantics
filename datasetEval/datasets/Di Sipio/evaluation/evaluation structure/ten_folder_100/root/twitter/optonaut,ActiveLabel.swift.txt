b'# ActiveLabel.swift [![Carthage compatible](https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat)](https://github.com/Carthage/Carthage) [![Build Status](https://travis-ci.org/optonaut/ActiveLabel.swift.svg)](https://travis-ci.org/optonaut/ActiveLabel.swift)\n\nUILabel drop-in replacement supporting Hashtags (#), Mentions (@), URLs (http://) and custom regex patterns, written in Swift\n\n## Features\n\n* Swift 5.0 (1.1.0) and 4.2 (1.0.1)\n* Default support for **Hashtags, Mentions, Links**\n* Support for **custom types** via regex\n* Ability to enable highlighting only for the desired types\n* Ability to trim urls\n* Super easy to use and lightweight\n* Works as `UILabel` drop-in replacement\n* Well tested and documented\n\n![](ActiveLabelDemo/demo.gif)\n\n\n## Install (iOS 10+)\n\n### Carthage\n\nAdd the following to your `Cartfile` and follow [these instructions](https://github.com/Carthage/Carthage#adding-frameworks-to-an-application)\n\n```\ngithub "optonaut/ActiveLabel.swift"\n```\n\n### CocoaPods\n\nCocoaPods 0.36 adds supports for Swift and embedded frameworks. To integrate ActiveLabel into your project add the following to your `Podfile`:\n\n```ruby\nplatform :ios, \'10.0\'\nuse_frameworks!\n\npod \'ActiveLabel\'\n```\n\n## Usage\n\n```swift\nimport ActiveLabel\n\nlet label = ActiveLabel()\nlabel.numberOfLines = 0\nlabel.enabledTypes = [.mention, .hashtag, .url]\nlabel.text = "This is a post with #hashtags and a @userhandle."\nlabel.textColor = .black\nlabel.handleHashtagTap { hashtag in\n    print("Success. You just tapped the \\(hashtag) hashtag")\n}\n```\n\n## Custom types\n\n```swift\nlet customType = ActiveType.custom(pattern: "\\\\swith\\\\b") //Regex that looks for "with"\nlabel.enabledTypes = [.mention, .hashtag, .url, customType]\nlabel.text = "This is a post with #hashtags and a @userhandle."\nlabel.customColor[customType] = UIColor.purple\nlabel.customSelectedColor[customType] = UIColor.green\n    \nlabel.handleCustomTap(for: customType) { element in \n    print("Custom type tapped: \\(element)") \n}\n```\n\n## Enable/disable highlighting\n\nBy default, an ActiveLabel instance has the following configuration\n\n```swift\nlabel.enabledTypes = [.mention, .hashtag, .url]\n```\n\nBut feel free to enable/disable to fit your requirements\n\n\n## Batched customization\n\nWhen using ActiveLabel, it is recommended to use the `customize(block:)` method to customize it. The reason is that ActiveLabel is reacting to each property that you set. So if you set 3 properties, the textContainer is refreshed 3 times.\n\nWhen using `customize(block:)`, you can group all the customizations on the label, that way ActiveLabel is only going to refresh the textContainer once.\n\nExample:\n\n```swift\nlabel.customize { label in\n    label.text = "This is a post with #multiple #hashtags and a @userhandle."\n    label.textColor = UIColor(red: 102.0/255, green: 117.0/255, blue: 127.0/255, alpha: 1)\n    label.hashtagColor = UIColor(red: 85.0/255, green: 172.0/255, blue: 238.0/255, alpha: 1)\n    label.mentionColor = UIColor(red: 238.0/255, green: 85.0/255, blue: 96.0/255, alpha: 1)\n    label.URLColor = UIColor(red: 85.0/255, green: 238.0/255, blue: 151.0/255, alpha: 1)\n    label.handleMentionTap { self.alert("Mention", message: $0) }\n    label.handleHashtagTap { self.alert("Hashtag", message: $0) }\n    label.handleURLTap { self.alert("URL", message: $0.absoluteString) }\n}\n```\n\n## Trim long urls\n\nYou have the possiblity to set the maximum lenght a url can have;\n\n```swift\nlabel.urlMaximumLength = 30\n```\n\nFrom now on, a url that\'s bigger than that, will be trimmed.\n\n`https://afancyurl.com/whatever` -> `https://afancyurl.com/wh...`\n\n## API\n\n##### `mentionColor: UIColor = .blueColor()`\n##### `mentionSelectedColor: UIColor?`\n##### `hashtagColor: UIColor = .blueColor()`\n##### `hashtagSelectedColor: UIColor?`\n##### `URLColor: UIColor = .blueColor()`\n##### `URLSelectedColor: UIColor?`\n##### `customColor: [ActiveType : UIColor]`\n##### `customSelectedColor: [ActiveType : UIColor]`\n##### `lineSpacing: Float?`\n\n##### `handleMentionTap: (String) -> ()`\n\n```swift\nlabel.handleMentionTap { userHandle in print("\\(userHandle) tapped") }\n```\n\n##### `handleHashtagTap: (String) -> ()`\n\n```swift\nlabel.handleHashtagTap { hashtag in print("\\(hashtag) tapped") }\n```\n\n##### `handleURLTap: (NSURL) -> ()`\n\n```swift\nlabel.handleURLTap { url in UIApplication.shared.openURL(url) }\n```\n\n##### `handleCustomTap(for type: ActiveType, handler: (String) -> ())`\n\n```swift\nlabel.handleCustomTap(for: customType) { element in print("\\(element) tapped") }\n```\n\n##### `filterHashtag: (String) -> Bool`\n\n```swift\nlabel.filterHashtag { hashtag in validHashtags.contains(hashtag) }\n```\n\n##### `filterMention: (String) -> Bool`\n\n```swift\nlabel.filterMention { mention in validMentions.contains(mention) }\n```\n\n## Alternatives\n\nBefore writing `ActiveLabel` we\'ve tried a lot of the following alternatives but weren\'t quite satisfied with the quality level or ease of usage, so we decided to contribute our own solution.\n\n* [TTTAttributedLabel](https://github.com/TTTAttributedLabel/TTTAttributedLabel) (ObjC) - A drop-in replacement for UILabel that supports attributes, data detectors, links, and more\n* [STTweetLabel](https://github.com/SebastienThiebaud/STTweetLabel) (ObjC) - A UILabel with #hashtag @handle and links tappable\n* [AMAttributedHighlightLabel](https://github.com/rootd/AMAttributedHighlightLabel) (ObjC) - A UILabel subclass with mention/hashtag/link highlighting\n* [KILabel](https://github.com/Krelborn/KILabel) (ObjC) - A simple to use drop in replacement for UILabel for iOS 7 and above that highlights links such as URLs, twitter style usernames and hashtags and makes them touchable\n'