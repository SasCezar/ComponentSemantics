b'[![License](https://img.shields.io/badge/license-MIT-lightgrey.svg)](https://github.com/cuzv/PhotoBrowser/blob/master/LICENSE)\n[![CocoaPods Compatible](https://img.shields.io/badge/CocoaPods-v0.8.1-green.svg)](https://github.com/CocoaPods/CocoaPods)\n[![Carthage Compatible](https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat)](https://github.com/Carthage/Carthage)\n[![Weibo](https://img.shields.io/badge/Weibo-cuzval-yellowgreen.svg)](https://weibo.com/cuzval/)\n[![Twitter](https://img.shields.io/twitter/url/http/shields.io.svg?style=social)](https://twitter.com/cuzval)\n\n# PhotoBrowser\n\nPhotoBrowser is a light weight photo browser, like the wechat, weibo image viewer.\n\nNow, the pure Swift version named [SlidingPhoto](https://github.com/cuzv/SlidingPhoto) is available.\n\n### Features\n\n-   [x] Present & Dismissal animation & gesture\n-   [x] GIF support\n-   [x] Display long picture\n\n## How does it look like?\n\n<p align="left">\n<img src="./Preview/1.gif" width=240px">&nbsp;<img src="./Preview/2.gif" width=240px">&nbsp;<img src="./Preview/3.gif" width=240px">\n</p>\n\n## Usage\n\n- Like the `UITableView` API, We have `DataSource` an `Delegate` for load data and handle action\n- Tell `PhotoBrowser` how many pages would you like to present by conforms protocol `PBViewControllerDataSource` and implement `numberOfPagesInViewController:` selector\n- Optional set the initialize page by `pb_startPage` property\n- Use for static Image - Conforms protocol `PBViewControllerDataSource` and implement `viewController:imageForPageAtIndex:` selector\n- Use for web image - Conforms protocol `PBViewControllerDataSource` and implement `viewController:presentImageView:forPageAtIndex:progressHandler` selector\n- Support animation - Conforms protocol `PBViewControllerDataSource` and implement `thumbViewForPageAtIndex:` tell the start and ended imageView position\n- Action callbacks - Conforms protocol `PBViewControllerDelegate` and implement `viewController:didSingleTapedPageAtIndex:presentedImage:` or `viewController:didLongPressedPageAtIndex:presentedImage:` handle single tap or long press action\n\n## Demo code\n\n``` objective-c\n...\nPBViewController *pbViewController = [PBViewController new];\n// Use your own subclass of UIImageView to display.\npbViewController.imageViewClass = PBImageView.class;\npbViewController.pb_dataSource = self;\npbViewController.pb_delegate = self;\npbViewController.pb_startPage = sender.tag;\n[self presentViewController:pbViewController animated:YES completion:nil];\n...\n\n...\n#pragma mark - PBViewControllerDataSource\n\n- (NSInteger)numberOfPagesInViewController:(PBViewController *)viewController {\n    return self.frames.count;\n}\n\n- (void)viewController:(PBViewController *)viewController presentImageView:(UIImageView *)imageView forPageAtIndex:(NSInteger)index progressHandler:(void (^)(NSInteger, NSInteger))progressHandler {\n    NSString *url = [NSString stringWithFormat:@"https://raw.githubusercontent.com/cuzv/PhotoBrowser/dev/Example/Assets/%@.jpg", @(index + 1)];\n    UIImage *placeholder = self.imageViews[index].image;\n    [imageView sd_setImageWithURL:[NSURL URLWithString:url]\n                 placeholderImage:placeholder\n                          options:0\n                         progress:progressHandler\n                        completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, NSURL *imageURL) {\n                        }];\n}\n\n- (UIView *)thumbViewForPageAtIndex:(NSInteger)index {\n    if (self.thumb) {\n        return self.imageViews[index];\n    }\n    return nil;\n}\n\n#pragma mark - PBViewControllerDelegate\n\n- (void)viewController:(PBViewController *)viewController didSingleTapedPageAtIndex:(NSInteger)index presentedImage:(UIImage *)presentedImage {\n    [self dismissViewControllerAnimated:YES completion:nil];\n}\n```\n\nFor more information checkout the Example in project.\n\n## License\n\n`PhotoBrowser` is available under the MIT license. See the LICENSE file for more info.\n'