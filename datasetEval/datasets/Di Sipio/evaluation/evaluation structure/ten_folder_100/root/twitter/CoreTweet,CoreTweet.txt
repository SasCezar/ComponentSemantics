b'CoreTweet\n=========\n\n[![Build Status on Travis CI](https://travis-ci.org/CoreTweet/CoreTweet.svg?branch=test%2Ftravis)](https://travis-ci.org/CoreTweet/CoreTweet)\n[![Build Status on AppVeyor](https://ci.appveyor.com/api/projects/status/github/CoreTweet/CoreTweet)](https://ci.appveyor.com/project/azyobuzin/CoreTweet)\n[![Gitter chat](https://badges.gitter.im/CoreTweet/gitter.png)](https://gitter.im/CoreTweet)\n\nYet Another .NET Twitter Library...\n\nSimplest authorizing:\n```csharp\nvar session = OAuth.Authorize("consumer_key", "consumer_secret");\nvar tokens = OAuth.GetTokens(session, "PINCODE");\n```\n\nTweeting is very easy:\n```csharp\ntokens.Statuses.Update(status => "hello");\n```\n\nWe provide the most modern way to use Twitter\'s API asynchronously:\n```csharp\nvar tokenSource = new CancellationTokenSource();\nvar task = tokens.Statuses.UpdateWithMediaAsync(\n    new { status = "Yummy!", media = new FileInfo(@"C:\\test.jpg") },\n    tokenSource.Token\n);\n// oh! that was a photo of my dog!!\ntokenSource.Cancel();\n```\n\nGo with the Streaming API and LINQ:\n```csharp\nvar sampleStream = tokens.Streaming.Sample()\n    .OfType<StatusMessage>()\n    .Select(x => x.Status);\nforeach(var status in sampleStream)\n    Console.WriteLine("{0}: {1}", status.User.ScreenName, status.Text);\n```\n\nGet fantastic experiences with Rx:\n```csharp\nvar disposable = tokens.Streaming.FilterAsObservable(track => "tea")\n    .OfType<StatusMessage>()\n    .Subscribe(x => Console.WriteLine("{0} says about tea: {1}", x.Status.User.ScreenName, x.Status.Text));\n\nawait Task.Delay(30 * 1000);\ndisposable.Dispose();\n```\n\nVarious types of method overloads:\n```csharp\ntokens.Statuses.Update(status => "hello");\n\ntokens.Statuses.Update(new { status = "hello" });\n\ntokens.Statuses.Update(new YourClass("hello"));\n\ntokens.Statuses.Update(status: "hello");\n\ntokens.Statuses.Update(new Dictionary<string, object>()\n{\n    {"status", "hello"}\n});\n```\n\nOh yes why don\'t you throw away any ```StatusUpdateOptions``` and it kinds???\n\n## Latest Build Results\n\n* [Mono on Linux](https://travis-ci.org/CoreTweet/CoreTweet)\n* [Microsoft .NET Framework on Windows Azure](https://ci.appveyor.com/project/azyobuzin/CoreTweet)\n\n## Platforms\n\nWe support both of Windows .NET and Mono, and CoreTweet works on following platforms:\n\n* .NET Framework 3.5 (without Rx support)\n* .NET Framework 4.0\n* .NET Framework 4.5\n* .NET Standard 1.3\n* Universal Windows Platform\n* Xamarin Android / iOS\n\n## Documentation\n\nDocuments of API is [here](http://coretweet.github.io/docs/index.html).\n\nVisit [Wiki](https://github.com/CoreTweet/CoreTweet/wiki) to get more information such as examples.\n\n## Install\n\nNow available on [NuGet](https://www.nuget.org/packages/CoreTweet)!\n```\nPM> Install-Package CoreTweet\n```\n\nOr please download a binary from [Releases](https://github.com/CoreTweet/CoreTweet/releases).\n\n## Build\n\nYou can\'t build PCL/WindowsRT binaries on Mono (on Linux) because they require non-free libraries.\n\n### On Windows\n\n#### Requires\n\n* .NET Framework 4.6\n* Windows PowerShell\n* Visual Studio 2017\n* .NET Core 2.1 SDK\n* Doxygen (optional: used to generate documentation)\n\n#### Step\n\n* Run PowerShell as an admin and execute\n\n```\nSet-ExecutionPolicy AllSigned\n```\n\n* Run build.ps1\n\n### On Linux and other Unix-like\n\n#### Requires\n\n* Mono 4.x or above\n* make\n* XBuild\n* Doxygen (optional: used to generate documentation)\n\n#### Step\n\n* Run make\n\n## Contributing\n\nPlease report to [Issues](https://github.com/CoreTweet/CoreTweet/issues?state=open) if you find any problems.\n\nWe seriously need your help for writing documents.\n\nPlease go to [Wiki](https://github.com/CoreTweet/CoreTweet/wiki) and write API documents, articles or/and some tips!\n\nPull requests are welcome.\n\n## License\n\nThis software is licensed under the MIT License.\n'