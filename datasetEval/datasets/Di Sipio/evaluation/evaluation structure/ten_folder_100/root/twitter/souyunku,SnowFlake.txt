b'# snowflake\xe7\x9a\x84\xe7\xbb\x93\xe6\x9e\x84\xe5\xa6\x82\xe4\xb8\x8b(\xe6\xaf\x8f\xe9\x83\xa8\xe5\x88\x86\xe7\x94\xa8-\xe5\x88\x86\xe5\xbc\x80):\n\n# \xe6\xa6\x82\xe8\xbf\xb0\n\n\xe5\x88\x86\xe5\xb8\x83\xe5\xbc\x8f\xe7\xb3\xbb\xe7\xbb\x9f\xe4\xb8\xad\xef\xbc\x8c\xe6\x9c\x89\xe4\xb8\x80\xe4\xba\x9b\xe9\x9c\x80\xe8\xa6\x81\xe4\xbd\xbf\xe7\x94\xa8\xe5\x85\xa8\xe5\xb1\x80\xe5\x94\xaf\xe4\xb8\x80ID\xe7\x9a\x84\xe5\x9c\xba\xe6\x99\xaf\xef\xbc\x8c\xe8\xbf\x99\xe7\xa7\x8d\xe6\x97\xb6\xe5\x80\x99\xe4\xb8\xba\xe4\xba\x86\xe9\x98\xb2\xe6\xad\xa2ID\xe5\x86\xb2\xe7\xaa\x81\xe5\x8f\xaf\xe4\xbb\xa5\xe4\xbd\xbf\xe7\x94\xa836\xe4\xbd\x8d\xe7\x9a\x84UUID\xef\xbc\x8c\xe4\xbd\x86\xe6\x98\xafUUID\xe6\x9c\x89\xe4\xb8\x80\xe4\xba\x9b\xe7\xbc\xba\xe7\x82\xb9\xef\xbc\x8c\xe9\xa6\x96\xe5\x85\x88\xe4\xbb\x96\xe7\x9b\xb8\xe5\xaf\xb9\xe6\xaf\x94\xe8\xbe\x83\xe9\x95\xbf\xef\xbc\x8c\xe5\x8f\xa6\xe5\xa4\x96UUID\xe4\xb8\x80\xe8\x88\xac\xe6\x98\xaf\xe6\x97\xa0\xe5\xba\x8f\xe7\x9a\x84\xe3\x80\x82\n\n\xe6\x9c\x89\xe4\xba\x9b\xe6\x97\xb6\xe5\x80\x99\xe6\x88\x91\xe4\xbb\xac\xe5\xb8\x8c\xe6\x9c\x9b\xe8\x83\xbd\xe4\xbd\xbf\xe7\x94\xa8\xe4\xb8\x80\xe7\xa7\x8d\xe7\xae\x80\xe5\x8d\x95\xe4\xb8\x80\xe4\xba\x9b\xe7\x9a\x84ID\xef\xbc\x8c\xe5\xb9\xb6\xe4\xb8\x94\xe5\xb8\x8c\xe6\x9c\x9bID\xe8\x83\xbd\xe5\xa4\x9f\xe6\x8c\x89\xe7\x85\xa7\xe6\x97\xb6\xe9\x97\xb4\xe6\x9c\x89\xe5\xba\x8f\xe7\x94\x9f\xe6\x88\x90\xe3\x80\x82\n\n\xe8\x80\x8ctwitter\xe7\x9a\x84snowflake\xe8\xa7\xa3\xe5\x86\xb3\xe4\xba\x86\xe8\xbf\x99\xe7\xa7\x8d\xe9\x9c\x80\xe6\xb1\x82\xef\xbc\x8c\xe6\x9c\x80\xe5\x88\x9dTwitter\xe6\x8a\x8a\xe5\xad\x98\xe5\x82\xa8\xe7\xb3\xbb\xe7\xbb\x9f\xe4\xbb\x8eMySQL\xe8\xbf\x81\xe7\xa7\xbb\xe5\x88\xb0Cassandra\xef\xbc\x8c\xe5\x9b\xa0\xe4\xb8\xbaCassandra\xe6\xb2\xa1\xe6\x9c\x89\xe9\xa1\xba\xe5\xba\x8fID\xe7\x94\x9f\xe6\x88\x90\xe6\x9c\xba\xe5\x88\xb6\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\xe5\xbc\x80\xe5\x8f\x91\xe4\xba\x86\xe8\xbf\x99\xe6\xa0\xb7\xe4\xb8\x80\xe5\xa5\x97\xe5\x85\xa8\xe5\xb1\x80\xe5\x94\xaf\xe4\xb8\x80ID\xe7\x94\x9f\xe6\x88\x90\xe6\x9c\x8d\xe5\x8a\xa1\xe3\x80\x82\n\n# \xe7\xbb\x93\xe6\x9e\x84\n\nsnowflake\xe7\x9a\x84\xe7\xbb\x93\xe6\x9e\x84\xe5\xa6\x82\xe4\xb8\x8b(\xe6\xaf\x8f\xe9\x83\xa8\xe5\x88\x86\xe7\x94\xa8-\xe5\x88\x86\xe5\xbc\x80):\n\n```\n0 - 0000000000 0000000000 0000000000 0000000000 0 - 00000 - 00000 - 000000000000\n```\n\n\xe7\xac\xac\xe4\xb8\x80\xe4\xbd\x8d\xe4\xb8\xba\xe6\x9c\xaa\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x8c\xe6\x8e\xa5\xe4\xb8\x8b\xe6\x9d\xa5\xe7\x9a\x8441\xe4\xbd\x8d\xe4\xb8\xba\xe6\xaf\xab\xe7\xa7\x92\xe7\xba\xa7\xe6\x97\xb6\xe9\x97\xb4(41\xe4\xbd\x8d\xe7\x9a\x84\xe9\x95\xbf\xe5\xba\xa6\xe5\x8f\xaf\xe4\xbb\xa5\xe4\xbd\xbf\xe7\x94\xa869\xe5\xb9\xb4)\xef\xbc\x8c\xe7\x84\xb6\xe5\x90\x8e\xe6\x98\xaf5\xe4\xbd\x8ddatacenterId\xe5\x92\x8c5\xe4\xbd\x8dworkerId(10\xe4\xbd\x8d\xe7\x9a\x84\xe9\x95\xbf\xe5\xba\xa6\xe6\x9c\x80\xe5\xa4\x9a\xe6\x94\xaf\xe6\x8c\x81\xe9\x83\xa8\xe7\xbd\xb21024\xe4\xb8\xaa\xe8\x8a\x82\xe7\x82\xb9\xef\xbc\x89 \xef\xbc\x8c\xe6\x9c\x80\xe5\x90\x8e12\xe4\xbd\x8d\xe6\x98\xaf\xe6\xaf\xab\xe7\xa7\x92\xe5\x86\x85\xe7\x9a\x84\xe8\xae\xa1\xe6\x95\xb0\xef\xbc\x8812\xe4\xbd\x8d\xe7\x9a\x84\xe8\xae\xa1\xe6\x95\xb0\xe9\xa1\xba\xe5\xba\x8f\xe5\x8f\xb7\xe6\x94\xaf\xe6\x8c\x81\xe6\xaf\x8f\xe4\xb8\xaa\xe8\x8a\x82\xe7\x82\xb9\xe6\xaf\x8f\xe6\xaf\xab\xe7\xa7\x92\xe4\xba\xa7\xe7\x94\x9f4096\xe4\xb8\xaaID\xe5\xba\x8f\xe5\x8f\xb7\xef\xbc\x89\n\n\xe4\xb8\x80\xe5\x85\xb1\xe5\x8a\xa0\xe8\xb5\xb7\xe6\x9d\xa5\xe5\x88\x9a\xe5\xa5\xbd64\xe4\xbd\x8d\xef\xbc\x8c\xe4\xb8\xba\xe4\xb8\x80\xe4\xb8\xaaLong\xe5\x9e\x8b\xe3\x80\x82(\xe8\xbd\xac\xe6\x8d\xa2\xe6\x88\x90\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe9\x95\xbf\xe5\xba\xa6\xe4\xb8\xba18)\n\nsnowflake\xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84ID\xe6\x95\xb4\xe4\xbd\x93\xe4\xb8\x8a\xe6\x8c\x89\xe7\x85\xa7\xe6\x97\xb6\xe9\x97\xb4\xe8\x87\xaa\xe5\xa2\x9e\xe6\x8e\x92\xe5\xba\x8f\xef\xbc\x8c\xe5\xb9\xb6\xe4\xb8\x94\xe6\x95\xb4\xe4\xb8\xaa\xe5\x88\x86\xe5\xb8\x83\xe5\xbc\x8f\xe7\xb3\xbb\xe7\xbb\x9f\xe5\x86\x85\xe4\xb8\x8d\xe4\xbc\x9a\xe4\xba\xa7\xe7\x94\x9fID\xe7\xa2\xb0\xe6\x92\x9e\xef\xbc\x88\xe7\x94\xb1datacenter\xe5\x92\x8cworkerId\xe4\xbd\x9c\xe5\x8c\xba\xe5\x88\x86\xef\xbc\x89\xef\xbc\x8c\xe5\xb9\xb6\xe4\xb8\x94\xe6\x95\x88\xe7\x8e\x87\xe8\xbe\x83\xe9\xab\x98\xe3\x80\x82\xe6\x8d\xae\xe8\xaf\xb4\xef\xbc\x9asnowflake\xe6\xaf\x8f\xe7\xa7\x92\xe8\x83\xbd\xe5\xa4\x9f\xe4\xba\xa7\xe7\x94\x9f26\xe4\xb8\x87\xe4\xb8\xaaID\xe3\x80\x82\n\n\n**\xe6\x9c\xac\xe6\x9c\xba\xe5\xae\x9e\xe6\xb5\x8b\xef\xbc\x9a100\xe4\xb8\x87\xe4\xb8\xaaID \xe8\x80\x97\xe6\x97\xb65\xe7\xa7\x92**\n\n```java\n/**\n * \xe6\x8f\x8f\xe8\xbf\xb0: Twitter\xe7\x9a\x84\xe5\x88\x86\xe5\xb8\x83\xe5\xbc\x8f\xe8\x87\xaa\xe5\xa2\x9eID\xe9\x9b\xaa\xe8\x8a\xb1\xe7\xae\x97\xe6\xb3\x95snowflake (Java\xe7\x89\x88)\n *\n * @author yanpenglei\n * @create 2018-03-13 12:37\n **/\npublic class SnowFlake {\n\n    /**\n     * \xe8\xb5\xb7\xe5\xa7\x8b\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\xe6\x88\xb3\n     */\n    private final static long START_STMP = 1480166465631L;\n\n    /**\n     * \xe6\xaf\x8f\xe4\xb8\x80\xe9\x83\xa8\xe5\x88\x86\xe5\x8d\xa0\xe7\x94\xa8\xe7\x9a\x84\xe4\xbd\x8d\xe6\x95\xb0\n     */\n    private final static long SEQUENCE_BIT = 12; //\xe5\xba\x8f\xe5\x88\x97\xe5\x8f\xb7\xe5\x8d\xa0\xe7\x94\xa8\xe7\x9a\x84\xe4\xbd\x8d\xe6\x95\xb0\n    private final static long MACHINE_BIT = 5;   //\xe6\x9c\xba\xe5\x99\xa8\xe6\xa0\x87\xe8\xaf\x86\xe5\x8d\xa0\xe7\x94\xa8\xe7\x9a\x84\xe4\xbd\x8d\xe6\x95\xb0\n    private final static long DATACENTER_BIT = 5;//\xe6\x95\xb0\xe6\x8d\xae\xe4\xb8\xad\xe5\xbf\x83\xe5\x8d\xa0\xe7\x94\xa8\xe7\x9a\x84\xe4\xbd\x8d\xe6\x95\xb0\n\n    /**\n     * \xe6\xaf\x8f\xe4\xb8\x80\xe9\x83\xa8\xe5\x88\x86\xe7\x9a\x84\xe6\x9c\x80\xe5\xa4\xa7\xe5\x80\xbc\n     */\n    private final static long MAX_DATACENTER_NUM = -1L ^ (-1L << DATACENTER_BIT);\n    private final static long MAX_MACHINE_NUM = -1L ^ (-1L << MACHINE_BIT);\n    private final static long MAX_SEQUENCE = -1L ^ (-1L << SEQUENCE_BIT);\n\n    /**\n     * \xe6\xaf\x8f\xe4\xb8\x80\xe9\x83\xa8\xe5\x88\x86\xe5\x90\x91\xe5\xb7\xa6\xe7\x9a\x84\xe4\xbd\x8d\xe7\xa7\xbb\n     */\n    private final static long MACHINE_LEFT = SEQUENCE_BIT;\n    private final static long DATACENTER_LEFT = SEQUENCE_BIT + MACHINE_BIT;\n    private final static long TIMESTMP_LEFT = DATACENTER_LEFT + DATACENTER_BIT;\n\n    private long datacenterId;  //\xe6\x95\xb0\xe6\x8d\xae\xe4\xb8\xad\xe5\xbf\x83\n    private long machineId;     //\xe6\x9c\xba\xe5\x99\xa8\xe6\xa0\x87\xe8\xaf\x86\n    private long sequence = 0L; //\xe5\xba\x8f\xe5\x88\x97\xe5\x8f\xb7\n    private long lastStmp = -1L;//\xe4\xb8\x8a\xe4\xb8\x80\xe6\xac\xa1\xe6\x97\xb6\xe9\x97\xb4\xe6\x88\xb3\n\n    public SnowFlake(long datacenterId, long machineId) {\n        if (datacenterId > MAX_DATACENTER_NUM || datacenterId < 0) {\n            throw new IllegalArgumentException("datacenterId can\'t be greater than MAX_DATACENTER_NUM or less than 0");\n        }\n        if (machineId > MAX_MACHINE_NUM || machineId < 0) {\n            throw new IllegalArgumentException("machineId can\'t be greater than MAX_MACHINE_NUM or less than 0");\n        }\n        this.datacenterId = datacenterId;\n        this.machineId = machineId;\n    }\n\n    /**\n     * \xe4\xba\xa7\xe7\x94\x9f\xe4\xb8\x8b\xe4\xb8\x80\xe4\xb8\xaaID\n     *\n     * @return\n     */\n    public synchronized long nextId() {\n        long currStmp = getNewstmp();\n        if (currStmp < lastStmp) {\n            throw new RuntimeException("Clock moved backwards.  Refusing to generate id");\n        }\n\n        if (currStmp == lastStmp) {\n            //\xe7\x9b\xb8\xe5\x90\x8c\xe6\xaf\xab\xe7\xa7\x92\xe5\x86\x85\xef\xbc\x8c\xe5\xba\x8f\xe5\x88\x97\xe5\x8f\xb7\xe8\x87\xaa\xe5\xa2\x9e\n            sequence = (sequence + 1) & MAX_SEQUENCE;\n            //\xe5\x90\x8c\xe4\xb8\x80\xe6\xaf\xab\xe7\xa7\x92\xe7\x9a\x84\xe5\xba\x8f\xe5\x88\x97\xe6\x95\xb0\xe5\xb7\xb2\xe7\xbb\x8f\xe8\xbe\xbe\xe5\x88\xb0\xe6\x9c\x80\xe5\xa4\xa7\n            if (sequence == 0L) {\n                currStmp = getNextMill();\n            }\n        } else {\n            //\xe4\xb8\x8d\xe5\x90\x8c\xe6\xaf\xab\xe7\xa7\x92\xe5\x86\x85\xef\xbc\x8c\xe5\xba\x8f\xe5\x88\x97\xe5\x8f\xb7\xe7\xbd\xae\xe4\xb8\xba0\n            sequence = 0L;\n        }\n\n        lastStmp = currStmp;\n\n        return (currStmp - START_STMP) << TIMESTMP_LEFT //\xe6\x97\xb6\xe9\x97\xb4\xe6\x88\xb3\xe9\x83\xa8\xe5\x88\x86\n                | datacenterId << DATACENTER_LEFT       //\xe6\x95\xb0\xe6\x8d\xae\xe4\xb8\xad\xe5\xbf\x83\xe9\x83\xa8\xe5\x88\x86\n                | machineId << MACHINE_LEFT             //\xe6\x9c\xba\xe5\x99\xa8\xe6\xa0\x87\xe8\xaf\x86\xe9\x83\xa8\xe5\x88\x86\n                | sequence;                             //\xe5\xba\x8f\xe5\x88\x97\xe5\x8f\xb7\xe9\x83\xa8\xe5\x88\x86\n    }\n\n    private long getNextMill() {\n        long mill = getNewstmp();\n        while (mill <= lastStmp) {\n            mill = getNewstmp();\n        }\n        return mill;\n    }\n\n    private long getNewstmp() {\n        return System.currentTimeMillis();\n    }\n\n    public static void main(String[] args) {\n        SnowFlake snowFlake = new SnowFlake(2, 3);\n\n        long start = System.currentTimeMillis();\n        for (int i = 0; i < 1000000; i++) {\n            System.out.println(snowFlake.nextId());\n        }\n\n        System.out.println(System.currentTimeMillis() - start);\n\n\n    }\n}\n```'