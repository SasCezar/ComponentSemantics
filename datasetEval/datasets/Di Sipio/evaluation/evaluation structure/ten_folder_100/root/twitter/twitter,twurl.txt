b'Twurl\n=====\n\nTwurl is like curl, but tailored specifically for the Twitter API.\nIt knows how to grant an access token to a client application for\na specified user and then sign all requests with that access token.\n\nIt also provides other development and debugging conveniences such\nas defining aliases for common requests, as well as support for\nmultiple access tokens to easily switch between different client\napplications and Twitter accounts.\n\n\nInstalling Twurl\n----------------\n\nTwurl can be installed using ruby gems:\n\n```\ngem install twurl\n```\n\n\nGetting Started\n---------------\n\nIf you haven\'t already, the first thing to do is apply for a developer account to access Twitter APIs: \n\n```\nhttps://developer.twitter.com/en/apply-for-access\n```\n  \nAfter you have that access you can create a Twitter app and generate a consumer key and secret.  \n  \n\nWhen you have your consumer key and its secret you authorize\nyour Twitter account to make API requests with your consumer key\nand secret.\n\n```\ntwurl authorize --consumer-key key       \\\n                --consumer-secret secret\n```\n\nThis will return an URL that you should open up in your browser.\nAuthenticate to Twitter, and then enter the returned PIN back into\nthe terminal.  Assuming all that works well, you will be authorized\nto make requests with the API. Twurl will tell you as much.\n\n\nMaking Requests\n---------------\n\nThe simplest request just requires that you specify the path you\nwant to request.\n\n```\ntwurl /1.1/statuses/home_timeline.json\n```\n\nSimilar to curl, a GET request is performed by default.\n\nYou can implicitly perform a POST request by passing the -d option,\nwhich specifies POST parameters.\n\n```\ntwurl -d \'status=Testing twurl\' /1.1/statuses/update.json\n```\n\nYou can explicitly specify what request method to perform with\nthe -X (or --request-method) option.\n\n```\ntwurl -X POST /1.1/statuses/destroy/1234567890.json\n```\n\n\nCreating aliases\n----------------\n\n```\ntwurl alias h /1.1/statuses/home_timeline.json\n```\n\nYou can then use "h" in place of the full path.\n\n```\ntwurl h\n```\n\nPaths that require additional options such as request parameters for example can\nbe used with aliases the same as with full explicit paths, just as you might\nexpect.\n\n```\ntwurl alias tweet /1.1/statuses/update.json\ntwurl tweet -d "status=Aliases in twurl are convenient"\n```\n\n\nChanging your default profile\n-----------------------------\n\nThe first time you authorize a client application to make requests on behalf of your account, twurl stores your access token information in its .twurlrc file. Subsequent requests will use this profile as the default profile. You can use the \'accounts\' subcommand to see what client applications have been authorized for what user names:\n\n```\ntwurl accounts\n  noradio\n    HQsAGcBm5MQT4n6j7qVJw\n    hhC7Koy2zRsTZvQh1hVlSA (default)\n  testiverse\n    guT9RsJbNQgVe6AwoY9BA\n```\n\nNotice that one of those consumer keys is marked as the default. To change the default use the \'set\' subcommand, passing then either just the username, if it\'s unambiguous, or the username and consumer key pair if it isn\'t unambiguous:\n\n```\ntwurl set default testiverse\ntwurl accounts\n  noradio\n    HQsAGcBm5MQT4n6j7qVJw\n    hhC7Koy2zRsTZvQh1hVlSA\n  testiverse\n    guT9RsJbNQgVe6AwoY9BA (default)\n```\n\n```\ntwurl set default noradio HQsAGcBm5MQT4n6j7qVJw\ntwurl accounts\n  noradio\n    HQsAGcBm5MQT4n6j7qVJw (default)\n    hhC7Koy2zRsTZvQh1hVlSA\n  testiverse\n    guT9RsJbNQgVe6AwoY9BA\n```\n\nContributors\n------------\n\nMarcel Molina <marcel@twitter.com> / @noradio\nErik Michaels-Ober / @sferik\n'