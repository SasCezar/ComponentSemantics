b'<p align="center">\n\t<img width="412px" src="https://underground.works/clockwork/images/github/title.png">\n\t<img src="https://underground.works/clockwork/images/github/clockwork-intro.png">\n</p>\n\n\n### What is Clockwork?\n\nClockwork is a browser extension, providing tools for debugging and profiling your PHP applications, including request data, application log, database queries, routes, visualisation of application runtime and more.\n\nClockwork uses a server-side component, that gathers all the data and easily integrates with any PHP project, including out-of-the-box support for major frameworks.\n\nRead more and try it out on the [Clockwork website](https://underground.works/clockwork).\n\n*This repository contains the server-side component of Clockwork.*\n\n### Installation\n\n*This readme contains installation and usage instructions for the Laravel framework, for other integrations check out the [Clockwork website](https://underground.works/clockwork).*\n\nInstall the Clockwork library via Composer.\n\n```shell\n$ composer require itsgoingd/clockwork\n```\n\nIf you are running the latest Laravel version, congratulations you are done!\n\nFor Laravel versions older than 5.5, you\'ll need to register the service provider, in your `config/app.php`:\n\n```php\n\'providers\' => [\n\t...\n\tClockwork\\Support\\Laravel\\ClockworkServiceProvider::class\n]\n```\n\nBy default, Clockwork will only be available in debug mode, you can change this and other settings in the configuration file. Use the `vendor:publish` Artisan command to publish the configuration file into your config directory.\n\nClockwork comes with a `clock()` helper function, which provides an easy way to add records to the Clockwork log and events to the timeline.\n\nIf you prefer to use a Facade, add following to your `config/app.php`:\n\n```php\n\'aliases\' => [\n\t...\n\t\'Clockwork\' => Clockwork\\Support\\Laravel\\Facade::class,\n]\n```\n\n**Note:** If you are using Laravel route cache, you will need to refresh it using the `route:cache` Artisan command.\n\n### Usage\n\nTo interact with the data collected by Clockwork, you will need to\n\n- install the [Chrome extension](https://chrome.google.com/webstore/detail/clockwork/dmggabnehkmmfmdffgajcflpdjlnoemp)\n- or the [Firefox add-on](https://addons.mozilla.org/en-US/firefox/addon/clockwork-dev-tools/)\n- or use the web UI `http://your.app/__clockwork`\n\nClockwork comes with a `clock()` helper function, which provides an easy way to add records to the Clockwork log or events to the timeline.\n\nYou can also access Clockwork using the `Clockwork` facade, resolving from the container `app(\'clockwork\')` or typehinting `Clockwork\\Clockwork`.\n\n#### Logging\n\nAll data logged using the Laravel log methods will also appear in the Clockwork log tab for the request.\n\nYou can also use the Clockwork log directly, with the benefit of rich logging capabilities. You can safely log any variable, from a simple string to an object.\n\nLogging data to Clockwork can be done using the helper function, which even supports logging multiple values at once\n\n```php\nclock(User::first(), auth()->user(), $username)\n```\n\nIf you want to specify a log level, you can use the long-form call\n\n```php\nclock()->info("User {$username} logged in!")\n```\n\n#### Timeline\n\nClockwork adds some general application runtime timeline events for you by default.\n\nTo add a custom event to the timeline, you\'ll need to start an event with an unique name and description first.\n\n```php\nclock()->startEvent(\'twitter-api-call\', "Loading users latest tweets via Twitter API")\n```\n\nAfter executing the tracked block of code, you can end the event, using it\'s unique name.\n\n```php\nclock()->endEvent(\'twitter-api-call\')\n```\n\nEvents that are not stopped explicitly will simply finish when the application runtime ends.\n\n#### Configuration\n\nBy default, Clockwork will only be available in debug mode, you can change this and more settings in the configuration file.\n\nYou can publish the configuration file using the `vendor:publish` artisan command to\n\n- set when Clockwork should be enabled\n- enable or disable the web UI\n- configure how the request metadata is stored\n- set what data should be collected\n- how long Clockwork stores log files\n\n### Licence\n\nCopyright (c) 2013 Miroslav Rigler\n\nMIT License\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n"Software"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n'