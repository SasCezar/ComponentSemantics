b'<img src="docs/images/preview-fg_macOS_dark@2x.png"\n     alt="Preview of cast device selection popup"\n     align="right"\n     width="462">\n\n# fx_cast\n\nFirefox extension that implements the [Chrome sender API](https://developers.google.com/cast/docs/reference/chrome/) and exposes it to web apps to enable cast support.\n\nCommunication with receiver devices is handled by a native application (bridge). Check the [implementation notes](IMPLEMENTATION.md) for more info.\n\n**No full public release yet! Pre-release beta version is incomplete and likely buggy.**\n\n## Installing\n\n### Supported platforms\n\n* Linux\n* macOS\n* Windows\n\nInstall the Firefox extension and companion bridge application. These are separate downloads that can be found on the [website](https://hensm.github.io/fx_cast/) or in the [GitHub releases](https://github.com/hensm/fx_cast/releases) section.\n\nmacOS/Windows version has an installer, Linux packages can be installed via the command line:\n\n````sh\n# Debian/Ubuntu\nsudo dpkg -i fx_cast_bridge-<version>-<arch>.deb\n\n# Fedora\nsudo dnf install fx_cast_bridge-<version>-<arch>.rpm\n````\n\n### Package managers\n* #### Arch Linux (AUR) - https://aur.archlinux.org/packages/fx_cast/\n  ````sh\n  yay -S fx_cast\n  ````\n\n## Building\n\n### Requirements\n\n* dpkg (for building deb packages)\n* rpm (for building rpm packages)\n* macOS (for building macOS installer packages)\n\n#### Installing dependencies\nmacOS:\n\n````sh\nbrew install dpkg rpm makensis\n````\n\nDebian/Ubuntu:\n\n````sh\nsudo apt install dpkg rpm nsis\n````\n\nFedora:\n\n````sh\nsudo dnf install dpkg rpm-build mingw-nsis\n````\n\nArchlinux:\n\n\n```sh\nsudo pacman -S nvm dpkg\nyay -S rpm-org nsis\n\n# Downgrade to node10\necho \'source /usr/share/nvm/init-nvm.sh\' >> ~/.bashrc\nnvm install 10.12.0\n```\n\n### Instructions\n\n````sh\ngit clone https://github.com/hensm/fx_cast.git\ncd fx_cast\nnpm install\nnpm run build\nnpm run install-manifest\n````\n\nThis will build the ext and app, outputting to `dist/`:\n\n* #### `dist/app/`  \n   ... contains the bridge binary and manifest with the path pointing that binary. `install-manifest` copies this manifest to the proper location (or adds its current location to the registry).\n* #### `dist/ext/`  \n    ... contains the unpacked extension.\n\nWatching ext changes:\n\n````sh\nnpm run watch --prefix ./ext\n````\n\nLaunch Firefox and auto-reload on rebuild (run in separate terminal):\n\n````sh\nnpm run start --prefix ./ext\n````\n\n### Packaging\n\nmacOS packages can only be created on macOS, Linux .deb/.rpm packages can be built on any platform with `dpkg-deb` and `rpmbuild` binaries, and Windows installers can be created on any platform with the `makensis` binary.\n\n* #### `dist/app/`  \n    ... contains the installer package: `fx_cast_bridge-<version>-<arch>.(pkg|deb|rpm|exe)`\n* #### `dist/ext/`  \n    ... contains the built extension in the format `fx_cast-<version>.zip`.\n\nBuild and package app and extension for current platform:\n\n````sh\nnpm run package\n````\n\nPackaging examples:\n\n````sh\n# Linux platforms\nnpm run package --prefix ./app -- --platform=linux --packageType=deb\nnpm run package --prefix ./app -- --platform=linux --packageType=rpm\n\n# Windows\nnpm run package --prefix ./app -- --platform=win32\n\n# macOS\nnpm run package --prefix ./app -- --platform=darwin\n````\n\n##### Package script arguments\n\n* `--platform` `"win32"`,`"darwin"`,`"linux"`  \n    Select the platform to build for. Defaults to current platform.\n* `--arch` `"x64"`,`"x86"`  \n    Select platform arch to build for. Defaults to current platform arch.\n* `--packageType` `"deb"`,`"rpm"`  \n    Select the package type. Defaults to `deb`. Only relevant when building for Linux.\n\n### Testing\n\nTesting requires geckodriver (or chromedriver for Chrome parity testing). See [selenium-webdriver](https://www.npmjs.com/package/selenium-webdriver#installation) installation instructions (ignore `npm install`).\n\nTest results will be displayed within the opened browser tab.\n\n````sh\nnpm run build --prefix ./app\nnpm run install-manifest\nnpm run package --prefix ./ext\nnpm test\nSELENIUM_BROWSER=chrome npm test\n````\n\n\n## Usage\n\nMost sites won\'t load the cast API unless the browser presents itself as Chrome. The extension includes a method of spoofing the user agent string, sites can be whitelisted via the options page. Whitelist entries are specified as [match patterns](https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Match_patterns). To whitelist all sites, add `<all_urls>` to the whitelist, though this could cause breakage on random sites.\n\nHTML5 media elements have a "Cast..." context menu item that triggers a sender application. Only works on remote (non-local) media that isn\'t DRM-encumbered.\n\nCast-enabled websites will load the sender API shim and display a cast button as in Chrome, provided there are no bugs/incompatibilities with the shim.\n\n\n## Video Demos\n\nNetflix / HTML5:\n\n[<img width="200" src="https://img.youtube.com/vi/Ex9dWKYguEE/0.jpg" alt="fx_cast Netflix" />](https://www.youtube.com/watch?v=Ex9dWKYguEE)\n[<img width="200" src="https://img.youtube.com/vi/16r8lQKeEX8/0.jpg" alt="fx_cast HTML5" />](https://www.youtube.com/watch?v=16r8lQKeEX8)\n\n\n## Credit\n\n_**Note**: Since it seems to be causing confusion, this project does not use electron. The electron-chromecast library was only used as a reference for the initial implementation of the API shim._\n\n* [electron-chromecast](https://github.com/GPMDP/electron-chromecast)\n* [node-castv2](https://github.com/thibauts/node-castv2)\n* [chrome-native-messaging](https://github.com/jdiamond/chrome-native-messaging)\n* [icons8](https://icons8.com/)\n\n## Donation\n\n### PayPal\n\nTo donate via PayPal:\n\n[<img src="https://www.paypal.com/en_US/i/btn/btn_donateCC_LG.gif" alt="Donate with PayPal button">](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=3Z2FTMSG976WN&source=url)\n\n<img alt="Donate with PayPal" src="https://i.imgur.com/oisL6Eo.png">\n'