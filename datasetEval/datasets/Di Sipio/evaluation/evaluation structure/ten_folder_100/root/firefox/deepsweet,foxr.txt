b'# foxr\n\n[![npm](https://flat.badgen.net/npm/v/foxr)](https://www.npmjs.com/package/foxr) [![install size](https://flat.badgen.net/packagephobia/install/foxr)](https://packagephobia.now.sh/result?p=foxr) [![tests](https://flat.badgen.net/travis/deepsweet/foxr/master?label=tests)](https://travis-ci.org/deepsweet/foxr) [![coverage](https://flat.badgen.net/codecov/c/github/deepsweet/foxr/master)](https://codecov.io/github/deepsweet/foxr)\n\nNode.js API to control Firefox.\n\n<img src="logo.svg" width="110" height="110" align="right" alt="logo"/>\n\n* uses a built-in [Marionette](https://vakila.github.io/blog/marionette-act-i-automation/) through [remote protocol](https://firefox-source-docs.mozilla.org/testing/marionette/marionette/index.html)\n* no [Selenium WebDriver](https://github.com/SeleniumHQ/selenium/wiki/FirefoxDriver) is needed\n* works with [Headless mode](https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/Headless_mode)\n* compatible subset of [Puppeteer](https://github.com/GoogleChrome/puppeteer) API\n\nAt this point Foxr is more a proof of concept, [work is pretty much in progress](https://github.com/deepsweet/foxr/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3Aenhancement).\n\n## Example\n\nRun a locally installed Firefox:\n\n```sh\n/path/to/firefox -headless -marionette -safe-mode\n```\n\nOr a [dockerized version](https://github.com/deepsweet/firefox-headless-remote):\n\n```sh\ndocker run -it --rm --shm-size 2g -p 2828:2828 deepsweet/firefox-headless-remote:68\n```\n\n```js\nimport foxr from \'foxr\'\n// const foxr = require(\'foxr\').default\n\n(async () => {\n  try {\n    const browser = await foxr.connect()\n    const page = await browser.newPage()\n\n    await page.goto(\'https://example.com\')\n    await page.screenshot({ path: \'example.png\' })\n    await browser.close()\n  } catch (error) {\n    console.error(error)\n  }\n})()\n```\n\n## Install\n\n```sh\nyarn add --dev foxr\n# or\nnpm install --save-dev foxr\n```\n\n## API\n\n### Foxr\n\n#### `connect`\n\nConnect to the Marionette endpoint.\n\n```ts\ntype TConnectOptions = {\n  host?: string,\n  port?: number,\n  defaultViewport?: {\n    width?: number,\n    height?: number\n  }\n}\n\nfoxr.connect(options?: TConnectOptions): Promise<Browser>\n```\n\n* `host` \xe2\x80\x93 `\'localhost\'` by default\n* `port` \xe2\x80\x93 `2828` by default\n* `defaultViewport`\n  * `width` \xe2\x80\x93 `800` by default\n  * `height` \xe2\x80\x93 `600` by default\n\n#### `launch`\n\n```ts\ntype TLaunchOptions = {\n  args?: string[],\n  dumpio?: boolean,\n  executablePath: string,\n  headless?: boolean\n} & TConnectOptions\n\nfoxr.launch(options?: TLaunchOptions): Promise<Browser>\n```\n\n* `args` \xe2\x80\x93 array of additional args, `[\'-marionette\', \'-safe-mode\', \'-no-remote\']` by default\n* `dumpio` \xe2\x80\x93 print browser process stdout and stderr, `false` by default\n* `executablePath` \xe2\x80\x93 path to Firefox executable, required\n* `headless` \xe2\x80\x93 whether to run browser in headless mode, `true` by default\n\n### Browser\n\n#### `close`\n\n```ts\nbrowser.close(): Promise<void>\n```\n\n#### `disconnect`\n\n```ts\nbrowser.disconnect(): Promise<void>\n```\n\n#### `newPage`\n\n```ts\nbrowser.newPage(): Promise<Page>\n```\n\n#### `pages`\n\n```ts\nbrowser.pages(): Promise<Page[]>\n```\n\n#### `install`\n\n```ts\nbrowser.install(extensionPath: string, isTemporary: boolean): Promise<string | null>\n```\n\n#### `uninstall`\n\n```ts\nbrowser.install(extensionId: string): Promise<void>\n```\n\n#### `getPref`\n\n```ts\nbrowser.getPref(pref: string, defaultBranch: boolean = false): Promise<any>\n```\n\n#### `setPref`\n\n```ts\nbrowser.setPref(pref: string, value: string | number | boolean, defaultBranch: boolean = false): Promise<void>\n```\n\n### Page\n\n#### `$`\n\n```ts\npage.$(selector: string): Promise<ElementHandle | null>\n```\n\n#### `$$`\n\n```ts\npage.$$(selector: string): Promise<ElementHandle[]>\n```\n\n#### `$eval`\n\n```ts\npage.$eval(selector: string, func: TSerializableFunction, ...args: TEvaluateArg[]): Promise<TJsonValue | void>\n```\n\n#### `$$eval`\n\n```ts\npage.$$eval(selector: string, func: TSerializableFunction, ...args: TEvaluateArg[]): Promise<Array<TJsonValue | void>>\n```\n\n#### `bringToFront`\n\n```ts\npage.bringToFront(): Promise<void>\n```\n\n#### `browser`\n\n```ts\npage.browser(): TBrowser\n```\n\n#### `close`\n\n```ts\npage.close(): Promise<void>\n```\n\n#### `content`\n\n```ts\npage.content(): Promise<string>\n```\n\n#### `evaluate`\n\n```ts\npage.evaluate(target: string): Promise<TJsonValue | void>\npage.evaluate(target: TSerializableFunction, ...args: TEvaluateArg[]): Promise<TJsonValue | void>\n```\n\n#### `evaluateHandle`\n\n```ts\npage.evaluate(target: string): Promise<JSHandle>\npage.evaluate(target: TSerializableFunction, ...args: TEvaluateArg[]): Promise<JSHandle>\n```\n\n#### `focus`\n\n```ts\npage.focus(selector: string): Promise<void>\n```\n\n#### `goto`\n\n```ts\npage.goto(url: string): Promise<void>\n```\n\n#### `screenshot`\n\n```ts\npage.screenshot(options?: { path?: string }): Promise<Buffer>\n```\n\n#### `setContent`\n\n```ts\npage.setContent(html: string): Promise<void>\n```\n\n#### `title`\n\n```ts\npage.title(): Promise<string>\n```\n\n#### `url`\n\n```ts\npage.url(): Promise<string>\n```\n\n#### `viewport`\n\n```ts\npage.viewport(): Promise<{ width: number, height: number }>\n```\n\n### JSHandle\n\n\xe2\x80\xa6\n\n### ElementHandle\n\n#### `$`\n\n```ts\nelementHandle.$(selector: string): Promise<ElementHandle | null>\n```\n\n#### `$$`\n\n```ts\nelementHandle.$$(selector: string): Promise<ElementHandle[]>\n```\n\n#### `click`\n\n```ts\ntype TOptions = {\n  button?: \'left\' | \'middle\' | \'right\',\n  clickCount?: number\n}\n\nelementHandle.click(options?: TOptions): Promise<void>\n```\n\n#### `focus`\n\n```ts\nelementHandle.focus(): Promise<void>\n```\n\n#### `hover`\n\n```ts\nelementHandle.hover(): Promise<void>\n```\n\n#### `press`\n\n```ts\nelementHandle.press(key: string): Promise<void>\n```\n\nWhere `key` is of the [possible keys](./src/keys.ts) or a single character.\n\n#### `screenshot`\n\n```ts\nelementHandle.screenshot(options?: { path?: string }): Promise<Buffer>\n```\n\n#### `type`\n\n```ts\nelementHandle.type(text: string): Promise<void>\n```\n\n## Development\n\nSee [my Start task runner preset](https://github.com/deepsweet/_/tree/master/packages/start-preset-node-ts-lib) for details.\n\n## References\n\n* Python Client: [API](https://marionette-client.readthedocs.io/en/latest/reference.html), [source](https://searchfox.org/mozilla-central/source/testing/marionette/client/)\n* Perl Client: [API](https://metacpan.org/pod/Firefox::Marionette), [source](https://metacpan.org/source/DDICK/Firefox-Marionette-0.57/lib/Firefox)\n* Node.js client (outdated): [source](https://github.com/mozilla-b2g/gaia/tree/master/tests/jsmarionette/client)\n* [Marionette Google Group](https://groups.google.com/forum/#!forum/mozilla.tools.marionette)\n'