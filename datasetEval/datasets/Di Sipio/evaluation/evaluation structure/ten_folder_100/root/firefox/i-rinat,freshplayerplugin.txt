b"About\n=====\n\nPPAPI-host NPAPI-plugin adapter.\n\nAs you know, Adobe have suspended further development of Flash player\nplugin for GNU/Linux. Latest available as an NPAPI plugin version 11.2\nwill get security updates for five years (since its release on May\n4th, 2012), but further development have been ceased. Fortunately or\nnot, newer versions are still available for Linux as a part of Chrome\nbrowser, where Flash comes bundled in a form of PPAPI plugin. PPAPI or\nPepper Plugin API is an interface promoted by Chromium/Chrome team for\nbrowser plugins. It's NPAPI-inspired yet significantly different API\nwhich have every conceivable function plugin may want. Two-dimensional\ngraphics, OpenGL ES, font rendering, network access, audio, and so\non. It's huge, there are 111 groups of functions, called interfaces\nwhich todays Chromium browser offers to plugins. Although specs are not\nfinal yet, and new interface versions are arising, with some older\nones getting deleted; rate of change have significantly slowed down.\n\nFor various reasons Firefox developers are not interested now in\nimplementing PPAPI in Firefox.  However that does not mean it cannot\nbe done.\n\nThe main goal of this project is to get PPAPI (Pepper) Flash player\nworking in Firefox. This can be done in two ways. First one is to\nimplement full PPAPI interface in Firefox itself. Other one is to\nimplement a wrapper, some kind of adapter which will look like browser\nto PPAPI plugin and look like NPAPI plugin for browser.\n\nFirst approach requires strong knowledge of Firefox internals, and\nmoreover additional effort to get the code into\nmainstream. Maintaining a set of patches doesn't look like a good\nidea. Second approach allows to concentrate on two APIs only. Yes one\nof them is big, but still graspable. Second way will be used for the\nproject. It will benefit other browsers too, not only Firefox.\n\n\nStatus\n======\n\nMostly works. Looks like all essential APIs are implemented.\n\nKnown issues\n============\n\ndescribed [here](doc/known-issues.md).\n\nSecurity note\n=============\n\nAll available Pepper Plugin API documentation usually accompanied with\nassertions of enhanced security due to active sandboxing usage. It's\nworth to note, that API itself doesn't make any sandboxing, it's only\nallows sandboxed implementations. This particular implementation\n**doesn't implement any sandbox**. That means if any malicious code breaks\nthrough plugin security, there is no additional barriers. This is the\nsame level of security as NPAPI Flash have.\n\nInstall\n=======\n\nProject is using cmake (>=2.8.8) build system.\n\n* Install prerequisites.\n```\n    Debian/Ubuntu:\n    $ sudo apt-get install cmake gcc g++ pkg-config ragel libasound2-dev \\\n           libssl-dev libglib2.0-dev libpango1.0-dev libgl1-mesa-dev     \\\n           libevent-dev libgtk2.0-dev libxrandr-dev libxrender-dev       \\\n           libxcursor-dev libv4l-dev libgles2-mesa-dev libavcodec-dev    \\\n           libva-dev libvdpau-dev libdrm-dev libicu-dev\n    Fedora:\n    $ sudo dnf install cmake gcc gcc-c++ pkgconfig ragel alsa-lib-devel openssl-devel \\\n           glib2-devel pango-devel mesa-libGL-devel libevent-devel gtk2-devel         \\\n           libXrandr-devel libXrender-devel libXcursor-devel libv4l-devel             \\\n           mesa-libGLES-devel  ffmpeg-devel libva-devel libvdpau-devel libdrm-devel   \\\n           pulseaudio-libs-devel libicu-devel\n\n```\n* (optional) To enable PulseAudio support, install `libpulse-dev`.\n* (optional) To enable JACK support, install `libjack-jackd2-dev` and `libsoxr-dev`\n\n* Create a `build` subdirectory in the root directory, from that folder, call\n```\n    $ cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo ..\n    $ make\n```\n\n* Put generated `libfreshwrapper-flashplayer.so` into browser plugins directory (`~/.mozilla/plugins`)\n  or install system-wide by calling:\n```\n    # make install\n```\n\nBy default `make install` will put plugin(s) to `${CMAKE_INSTALL_PREFIX}/lib${LIB_SUFFIX}/mozilla/plugins`. The\npath could be changed either by changing CMake parameter `CMAKE_INSTALL_PREFIX`, or by setting\n`MOZPLUGIN_INSTALL_DIR`.\n\nWhen loaded by browser it will search for `libpepflashplayer.so` in a directories\nwhere it can be: in Chrome (stable/beta/unstable) directory, and in\n`/usr/lib/pepperflashplugin-nonfree/` (pepperflashplugin-nonfree puts it there).\nIt should be enough to get it running, but if it doesn't, specify full path in\n`~/.config/freshwrapper.conf`. You may find sample configuration file in `/data`.\nIt's better to have `manifest.json` alongside with `libpepflashplayer.so`,\nactual Flash version will be taken from that manifest.\n\nHardware-accelerated video decoding code requires relatively new version of libavcodec\n(January 2013, version 54.39.0). If you don't have it yet, code won't compile unless\nyou disable hwdec by `WITH_HWDEC=0`. To do so, change configuration step command to:\n```\n    $ cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DWITH_HWDEC=0 ..\n```\n\nNote, even if built, hardware-accelerated video decoding is still disabled by default.\nYou need to explicitly enable it in configuration file.\n\nInstall / OpenGL|ES 2 support\n-----------------------------\n\nAlthough it's better to use system implementation of OpenGL|ES 2, it's still possible\nto leverage [ANGLE](https://code.google.com/p/angleproject/) GLES2 emulation by adding\n`WITH_GLES2=0` to cmake command line at configuration time (`-DWITH_GLES2=0` to be exact).\nNote, that requires C++11-capable compiler.\n\n\nLicense\n=======\n\nThe MIT License. See `LICENSE` file for full text.\n\nDirectory `3rdparty/` contains source code from 3rd parties which can be\ndistributed under other license terms. See source code for details.\n"