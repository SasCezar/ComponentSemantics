b'# Node REM\n\nNodeJS Rest Express MongoDB (REM) - a production-ready lightweight backend setup.\n\n[![Build Status](https://travis-ci.org/ngduc/node-rem.svg?branch=master)](https://travis-ci.org/ngduc/node-rem) [![Maintainability](https://api.codeclimate.com/v1/badges/11155b15b675ef311f72/maintainability)](https://codeclimate.com/github/ngduc/node-rem/maintainability)\n\n\xf0\x9f\x8c\x9f It rains ~~cats and dogs~~ features:\n\n```\n  Typescript      Express 4.15       CORS     Helmet    DotEnv   joi (validation)   forever\n  Mongoose 4.9    Passport  JWT      Await\n  Tslint          Apidoc    Docker   Husky    Morgan    Travis   Windows (Powershell)\n  Tests\n            Mocha  Chai     Sinon    istanbul\n  MORE:\n            HTTPS           HTTP2 (spdy)      Socketio 2.1       Init DB Data\n            Slack message   Nodemailer        Mailgun            Email Templates    Forgot Password\n            VSCode Debug    Dependabot        Codacy             File upload (multer)\n      API\n            API response    (data, meta: limit, offset, sort)    Transform res\n            apiJson         Pagination query\n            Regex query     Whitelist fields in response         Populate deep fields\n            mstime          API response time     Stack trace in Response\n```\n  - More details in [Feature Documentation](src_docs/features.md)\n  - [Live Demo](https://node-rem-demo.now.sh/) (login & inspect API calls to learn more)\n\n### \xf0\x9f\x93\xa6 Installation\n\nClone this project:\n```\ngit clone https://github.com/ngduc/node-rem.git your-app\ncd your-app\nrm -rf .git\nyarn\n```\n- Update `package.json` and `.env` file with your information.\n- Run `yarn dev`, it will create a new Mongo DB "node-rem"\n- Verify: use Postman to POST https://localhost:3009/v1/auth/register to create a new user. (set payload to have email, password)\n\n### \xf0\x9f\x94\xa7 Commands\n\nRequire: `MongoDB` and `NodeJS v8.12.0 +`\n\n```\nyarn dev      launch DEV mode\nyarn start    launch PROD mode\nyarn stop\n\nyarn test     Run tests   (requires MongoDB)\n```\n\n### \xf0\x9f\x93\x96 Features\n\nYour simple `API Route Handler` will have a nice syntax like this: (packed with ~~vitamins~~ cool stuffs)\n```js\nexports.list = async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const data = (await User.list(req)).transform(req); // query & run userSchema.transform() for response\n    apiJson({ req, res, data, model: User }); // return standard API Response\n  } catch (e) {\n    next(e);\n  }\n};\n```\n\nAPI Response is similar to [JSON API](http://jsonapi.org/examples/#pagination) standard:\n\n```js\nGET https://localhost:3009/v1/users?fields=id,name&name=*john* (get id & name only in response)\nGET https://localhost:3009/v1/users?role=admin&page=1&perPage=20 (query & pagination)\nGET https://localhost:3009/v1/users?role=admin&limit=5&offset=0&sort=email:desc,createdAt\n{\n    "meta": {\n        "limit": 5,\n        "offset": 0,\n        "sort": {\n            "email": -1,\n            "createdAt": 1\n        },\n        "totalCount": 4,\n        "timer": 3.85,\n        "timerAvg": 5.62\n    },\n    "data": [\n        {\n            "id": "5bad07cdc099dfbe49ef69d7",\n            "name": "John Doe",\n            "email": "john.doe@gmail.com",\n            "role": "admin",\n            "createdAt": "2018-09-27T16:39:41.498Z"\n        },\n        // more items...\n    ]\n}\n```\nExample of generated API Docs (using `apidoc`) - https://node-rem.netlify.com\n\n### \xf0\x9f\x93\x96 Documentation\n\n- [Feature Documentation](src_docs/features.md)\n- [Build System](src_docs/build.md)\n- [Dependencies Notes](src_docs/dependencies.md)\n- [Change Log](CHANGELOG.md)\n\n### \xf0\x9f\x99\x8c Thanks\n\nAll contributions are welcome!\n\n[danielfsousa/express-rest-es2017-boilerplate](https://github.com/danielfsousa/express-rest-es2017-boilerplate)\n'