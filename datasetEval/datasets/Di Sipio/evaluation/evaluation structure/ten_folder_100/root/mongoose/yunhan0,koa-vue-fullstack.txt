b"# Koa Vue Fullstack Boilerplate\n##### \xf0\x9f\x8e\x89\xf0\x9f\x8e\x89\xf0\x9f\x8e\x89 Upgrade Webpack to v4!\n<sup> Project based on Webpack3 is in [Releases](https://github.com/yunhan0/koa-vue-fullstack/releases). </sup>\n\n### Preface\n##### Vue.js, Koa.js, Node.js, and MongoDB fullstack lightweight example application. Authentication, CRUD, and access control included.\nThis project aims to build a small but structured full-stack application, so it would be relatively clear for a programmer/beginner to understand how to build a website from scratch.\n\n### Demo:\nClick [here](http://yunhan.li/koa-vue-fullstack) to see demo website. Server is deployed on heroku's free plan :) \xf0\x9f\x90\xa2\xf0\x9f\x90\xa2\xf0\x9f\x90\xa2.<br>\n<pre>\nemail: admin@example.com\npassword: 123456\n</pre>\n\n### Environment:\n- Server\n    - [Koa](http://koajs.com/)\n    - Koa Router, Koa Cors, Koa Bodyparser\n    - Mongoose\n    - Node ~~v8.9.4~~ v10.12.0\n- Client\n    - [Vue](https://vuejs.org/)\n    - [iView](https://www.iviewui.com/)\n    - [Axios](https://github.com/axios/axios) (HTTP Client Library)\n    - ~~Webpack 3~~ Webpack 4\n    - WebpackDevServer (Development mode only)\n\n### Architecture\n\n    \xe2\x94\x9c\xe2\x94\x80client               # frontend folder\n    \xe2\x94\x82  \xe2\x94\x9c\xe2\x94\x80src               # frontend src\n    \xe2\x94\x82  \xe2\x94\x82  \xe2\x94\x9c\xe2\x94\x80api\n    \xe2\x94\x82  \xe2\x94\x82  \xe2\x94\x9c\xe2\x94\x80router\n    \xe2\x94\x82  \xe2\x94\x82  \xe2\x94\x9c\xe2\x94\x80styles\n    \xe2\x94\x82  \xe2\x94\x82  \xe2\x94\x9c\xe2\x94\x80components\n    \xe2\x94\x82  \xe2\x94\x82  \xe2\x94\x9c\xe2\x94\x80store          # state management\n    \xe2\x94\x82  \xe2\x94\x82  \xe2\x94\x82  \xe2\x94\x94\xe2\x94\x80modules\n    \xe2\x94\x82  \xe2\x94\x82  \xe2\x94\x94\xe2\x94\x80view           # app pages\n    \xe2\x94\x82  \xe2\x94\x82     \xe2\x94\x94\xe2\x94\x80auth\n    \xe2\x94\x82  \xe2\x94\x94\xe2\x94\x80static            # static folder\n    |\n    \xe2\x94\x94\xe2\x94\x80server               # server folder\n       \xe2\x94\x94\xe2\x94\x80src               # server src\n          \xe2\x94\x9c\xe2\x94\x80api            # server api list\n          \xe2\x94\x82  \xe2\x94\x9c\xe2\x94\x80auth        # completely token-based authentication\n          \xe2\x94\x82  \xe2\x94\x9c\xe2\x94\x80thing\n          \xe2\x94\x82  \xe2\x94\x94\xe2\x94\x80user\n          \xe2\x94\x9c\xe2\x94\x80config         # server configurations\n          \xe2\x94\x82  \xe2\x94\x9c\xe2\x94\x80index       # default server port, mongo uri, etc settings\n          \xe2\x94\x82  \xe2\x94\x9c\xe2\x94\x80security    # security settins\n          \xe2\x94\x82  \xe2\x94\x94\xe2\x94\x80seed        # populate database with sample data on server start\n          \xe2\x94\x9c\xe2\x94\x80entry.js       # entry file for environment setup\n          \xe2\x94\x9c\xe2\x94\x80main.js        # main file after entry\n          \xe2\x94\x94\xe2\x94\x80routes.js      # router\n\n### Run through Docker\n```bash\n    cd server # You can boost the server by using Docker\n    docker-compose up\n    # Open a new tab\n    cd client\n    npm install\n    npm start\n```\n\n### Setup Locally:\n- Steps:\nThe server and client are completely seperated in this project, so go to each client and server folder and run:\n\n```bash\n    cd client\n    npm install\n    npm start # Running dev client\n    # Open a new tab\n    mongod    # Boost Mongo DB\n    # Open a new tab\n    cd server\n    # CREATE a .env file under server folder, and copy and paste the contents of .env.default file into this .env, and assign values\n    touch .env\n    npm install\n    npm start # Running dev server\n```\n\n- Others:\n```bash\nnpm run build      # Running production mode\nnpm run eslint     # Check your coding style\nnpm run eslint-fix # Use auto ESLint fix\n```\n"