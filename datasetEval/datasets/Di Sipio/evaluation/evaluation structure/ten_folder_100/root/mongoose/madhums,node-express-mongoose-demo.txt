b"\n[![Build Status](https://travis-ci.org/madhums/node-express-mongoose-demo.svg?branch=master)](https://travis-ci.org/madhums/node-express-mongoose-demo)\n[![Dependencies](https://img.shields.io/david/madhums/node-express-mongoose-demo.svg?style=flat)](https://david-dm.org/madhums/node-express-mongoose-demo)\n[![Code Climate](https://codeclimate.com/github/codeclimate/codeclimate/badges/gpa.svg)](https://codeclimate.com/github/madhums/node-express-mongoose-demo)\n[![Join Gitter Chat](https://img.shields.io/badge/gitter-join%20chat%20%E2%86%92-brightgreen.svg?style=flat)](https://gitter.im/madhums/node-express-mongoose-demo?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n# Nodejs Express Mongoose Demo\n\nThis is a demo application illustrating various features used in everyday web development, with a fine touch of best practices. The demo app is a blog application where users can signup, create an article, delete an article and add comments etc.\n\nTable of contents:\n\n<!-- TOC depthFrom:2 depthTo:6 withLinks:1 updateOnSave:1 orderedList:0 -->\n\n- [Boilerplate](#boilerplate)\n- [Install](#install)\n- [Tests](#tests)\n- [Docker](#docker)\n- [License](#license)\n\n<!-- /TOC -->\n\n## Boilerplate\n\nWant to build something from scratch? use the [boilerplate](https://github.com/madhums/node-express-mongoose)\n\n* Checkout the [apps that are built using this approach](https://github.com/madhums/node-express-mongoose/wiki/Apps-built-using-this-approach)\n* The [wiki](https://github.com/madhums/node-express-mongoose/wiki) is wip, it has some information about the way application is setup.\n\n## Install\n\n```sh\ngit clone git://github.com/madhums/node-express-mongoose-demo.git\nnpm install\ncp .env.example .env\nnpm start\n```\n\nThen visit [http://localhost:3000/](http://localhost:3000/)\n\n**NOTE:** Do not forget to set the twitter, google, linkedin and github `CLIENT_ID`s and `SECRET`s. In `development` env, you can set the env variables in `.env` and replace the values there. In `production` env, it is not safe to keep the ids and secrets in a file, so you need to set it up via commandline. If you are using heroku checkout how environment variables are set [here](https://devcenter.heroku.com/articles/config-vars).\n\n## Tests\n\n```sh\nnpm test\n```\n\n## Docker\n\nYou can also use docker for development. Make sure you run npm install on your host machine so that code linting and everything works fine.\n\n```sh\nnpm i\ncp .env.example .env\n```\n\nStart the services\n\n```sh\ndocker-compose up -d\n```\n\nView the logs\n\n```sh\ndocker-compose logs -f\n```\n\nIn case you install a npm module while developing, it should also be installed within docker container, to do this first install the module you want with simple `npm i module name`, then run it within docker container\n\n```sh\ndocker-compose exec node npm i\n```\n\nIf you make any changes to the file, nodemon should automatically pick up and restart within docker (you can see this in the logs)\n\nTo run tests\n\n```sh\ndocker-compose exec -e MONGODB_URL=mongodb://mongo:27017/noobjs_test node npm test\n```\n\nNote that we are overriding the environment variable set in `.env` file because we don't want our data erased by the tests.\n\nNote: The difference between exec and run is that, exec executes the command within the running container and run will spin up a new container to run that command. So if you want to run only the tests without docker-compose up, you may do so by running `docker-compose run -e MONGODB_URL=mongodb://mongo:27017/noobjs_test node npm test`\n\n## License\n\nMIT\n"