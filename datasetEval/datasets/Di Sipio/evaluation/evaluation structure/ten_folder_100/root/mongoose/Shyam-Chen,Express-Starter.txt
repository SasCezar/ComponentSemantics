b'# Express Starter\n\n:truck: A boilerplate for Node.js, Express, Mongoose, Heroku, Atlas, Nodemon, PM2, and Babel.\n\n[![Build Status](https://img.shields.io/circleci/project/github/Shyam-Chen/Express-Starter/master.svg)](https://circleci.com/gh/Shyam-Chen/Express-Starter)\n[![Coverage Status](https://img.shields.io/codecov/c/github/Shyam-Chen/Express-Starter/master.svg)](https://codecov.io/gh/Shyam-Chen/Express-Starter)\n //\n[![Dependency Status](https://img.shields.io/david/Shyam-Chen/Express-Starter.svg)](https://david-dm.org/Shyam-Chen/Express-Starter)\n[![devDependency Status](https://img.shields.io/david/dev/Shyam-Chen/Express-Starter.svg)](https://david-dm.org/Shyam-Chen/Express-Starter?type=dev)\n\n:rainbow: [Live Demo](https://backend-starter-kit.herokuapp.com/)\n\nThis seed repository provides the following features:\n\n* ---------- **Essentials** ----------\n* [x] Application routing with [**Express**](http://expressjs.com/).\n* [x] Data query language with [**GraphQL**](http://graphql.org/).\n* [x] Object document mapping with [**Mongoose**](http://mongoosejs.com/).\n* [x] Object relational mapping with [**Sequelize**](http://docs.sequelizejs.com/).\n* [x] Utility functions with [**Lodash**](https://lodash.com/).\n* [x] Authenticate requests with [**Passport**](http://passportjs.org/).\n* [x] Real-time bidirectional communication with [**Socket.IO**](https://socket.io/).\n* [x] In-memory data structure store with [**Redis**](https://redis.io/).\n* [X] Jobs and messages with [**Bull**](https://github.com/OptimalBits/bull).\n* [x] Online payments with [**Stripe**](https://stripe.com/).\n* [x] OpenAPI specification with [**Swagger**](https://swagger.io/).\n* ---------- **Tools** ----------\n* [x] Next generation JavaScript with [**Babel**](https://github.com/babel/babel).\n* [x] JavaScript static code analyzer with [**ESLint**](https://github.com/eslint/eslint).\n* [x] Unit testing with [**Jest**](https://github.com/facebook/jest).\n* [x] End-to-End testing with [**Supertest**](https://github.com/visionmedia/supertest).\n* [x] Test coverage integration with [**Codecov**](https://codecov.io/).\n* [x] Automatically restart application with [**Nodemon**](https://github.com/remy/nodemon).\n* [x] Keeping application alive with [**PM2**](https://github.com/Unitech/pm2).\n* ---------- **Environments** ----------\n* [x] JavaScript runtime with [**Node.js**](https://nodejs.org/).\n* [x] Fast and deterministic builds with [**Yarn**](https://github.com/yarnpkg/yarn).\n* [x] Version control with [**Git**](https://github.com/git/git).\n* [x] Code repository with [**GitHub**](https://github.com/).\n* [x] Cloud application hosting with [**Heroku**](https://www.heroku.com/).\n* [x] Cloud NoSQL database hosting with [**Atlas**](https://www.mongodb.com/cloud/atlas).\n* [x] Cloud SQL database hosting with [**ElephantSQL**](https://www.elephantsql.com/).\n* [x] Cloud storage\xe2\x80\x8e hosting with [**Cloudinary**](https://cloudinary.com/).\n* [x] Cloud memory cache hosting with [**RedisLabs**](https://redislabs.com/).\n* [x] API gateway service with [**WSO2**](https://wso2.com/).\n* [x] Centralized logging and analysis service with [**LogDNA**](https://logdna.com/).\n* [x] Error tracking service with [**Sentry**](https://sentry.io/).\n* [x] Performance and security with [**Cloudflare**](https://www.cloudflare.com/).\n* [x] Software container with [**Docker**](https://github.com/docker/docker).\n* [x] Continuous integration with [**CircleCI**](https://circleci.com/).\n\nThinking in ...\n\n* [x] REST Stack\n* [x] GraphQL Stack\n* [x] Microservices\n\n## Table of Contents\n\n* [Getting Started](#getting-started)\n* [Dockerization](#dockerization)\n* [Configuration](#configuration)\n* [Using Libraries](#using-libraries)\n* [Directory Structure](#directory-structure)\n\n## Getting Started\n\nFollow steps to execute this boilerplate.\n\n1. Clone this boilerplate\n\n```bash\n$ git clone --depth 1 https://github.com/Shyam-Chen/Express-Starter.git <PROJECT_NAME>\n$ cd <PROJECT_NAME>\n```\n\n2. Install dependencies\n\n```bash\n$ yarn install\n```\n\n3. Start a local server\n\n```bash\n$ yarn start\n```\n\n4. Compile code\n\n```bash\n$ yarn build\n```\n\n5. Check code quality\n\n```bash\n$ yarn lint\n```\n\n6. Runs unit tests\n\n```bash\n$ yarn unit\n```\n\n7. Runs end-to-end tests\n\n```bash\n$ yarn e2e\n```\n\n## Dockerization\n\nDockerize an application.\n\n1. Build and run the container in the background\n\n```bash\n$ docker-compose up -d app\n```\n\n2. Run a command in a running container\n\n```bash\n$ docker-compose exec app <COMMAND>\n```\n\n3. Remove the old container before creating the new one\n\n```bash\n$ docker-compose rm -fs\n```\n\n4. Restart up the container in the background\n\n```bash\n$ docker-compose up -d --build app\n```\n\n5. Push images to Docker Cloud\n\n```diff\n# .gitignore\n\n  .DS_Store\n  node_modules\n  dist\n  coverage\n+ dev.Dockerfile\n+ stage.Dockerfile\n+ prod.Dockerfile\n  *.log\n```\n\n```bash\n$ docker login\n$ docker build -f ./tools/<dev|stage|prod>.Dockerfile -t <IMAGE_NAME>:<IMAGE_TAG> .\n\n# checkout\n$ docker images\n\n$ docker tag <IMAGE_NAME>:<IMAGE_TAG> <DOCKER_ID_USER>/<IMAGE_NAME>:<IMAGE_TAG>\n$ docker push <DOCKER_ID_USER>/<IMAGE_NAME>:<IMAGE_TAG>\n\n# remove\n$ docker rmi <REPOSITORY>:<TAG>\n# or\n$ docker rmi <IMAGE_ID>\n```\n\n6. Pull images from Docker Cloud\n\n```diff\n# circle.yml\n\n  echo "${HEROKU_TOKEN}" | docker login -u "${HEROKU_USERNAME}" --password-stdin registry.heroku.com\n- docker build -f ./tools/$DEPLOYMENT_ENVIRONMENT.Dockerfile -t $APP_NAME .\n+ docker pull <DOCKER_ID_USER>/<IMAGE_NAME>:<IMAGE_TAG>\n- docker tag $APP_NAME registry.heroku.com/$APP_NAME/web\n+ docker tag <IMAGE_NAME>:<IMAGE_TAG> registry.heroku.com/<HEROKU_PROJECT>/web\n  docker push registry.heroku.com/<HEROKU_PROJECT>/web\n```\n\n## Configuration\n\n### Default environments\n\nSet your local environment variables.\n\n```js\n// src/env.js\n\nexport const NODE_ENV = process.env.NODE_ENV || \'development\';\n\nexport const HOST = process.env.HOST || \'0.0.0.0\';\nexport const PORT = process.env.PORT || 3000;\n\nexport const SECRET = process.env.SECRET || \'PUT_YOUR_SECRET_HERE\';\n\nexport const MONGODB_URI = process.env.MONGODB_URI || \'<PUT_YOUR_MONGODB_URI_HERE>\';\nexport const POSTGRES_URL = process.env.POSTGRES_URL || \'PUT_YOUR_POSTGRES_URL_HERE\';\n\nexport const REDIS_PORT = process.env.REDIS_PORT || \'<PUT_YOUR_REDIS_PORT_HERE>\';\nexport const REDIS_HOST = process.env.REDIS_HOST || \'<PUT_YOUR_REDIS_HOST_HERE>\';\n\n// ...\n```\n\n### Deployment environments\n\nSet your deployment environment variables.\n\n```dockerfile\n# tools/<dev|stage|prod>.Dockerfile\n\n# envs --\nENV SECRET <PUT_YOUR_SECRET_HERE>\n\nENV MONGODB_URI <PUT_YOUR_MONGODB_URI>\nENV POSTGRES_URL <PUT_YOUR_POSTGRES_URL_HERE>\n\nENV REDIS_PORT <PUT_YOUR_REDIS_PORT_HERE>\nENV REDIS_HOST <PUT_YOUR_REDIS_HOST_HERE>\n\n# ...\n# -- envs\n```\n\n## Using Libraries\n\n1. Example of REST\n\n```js\nimport { Router } from \'express\';\n\nimport { List } from \'./document\';\n\nconst router = Router();\n\nrouter.get(\'/\', async (req, res) => {\n  const data = await List.find({}).exec();\n  res.json(data);\n});\n\nexport default router;\n```\n\n2. Example of GraphQL\n\n```js\nimport gql from \'graphql-tag\';\n\nimport { List } from \'./document\';\n\nexport const listTypeDefs = gql`\n  type List {\n    _id: ID!\n    text: String!\n  }\n\n  type Query {\n    list: [List]\n  }\n`;\n\nexport const listResolvers = {\n  Query: {\n    async list(root, { _id, text }) {\n      const data = await List.find({}).exec();\n      return data;\n    },\n  },\n};\n```\n\n3. Example of Document\n\n```js\nimport mongoose, { Schema } from \'mongoose\';\n\nconst listSchema = new Schema({\n  text: {\n    type: String,\n    required: true,\n  },\n});\n\nexport const List = mongoose.model(\'List\', listSchema);\n```\n\n4. Example of Relational\n\n```js\nimport Sequelize from \'sequelize\';\n\nimport sequelize from \'~/core/sequelize\';\n\nexport const RelationalList = sequelize.define(\'List\', {\n  text: Sequelize.STRING,\n});\n```\n\n5. Example of Lodash\n\n```js\nimport { of } from \'rxjs\';\nimport { lowerFirst, pad } from \'lodash\';\n\nof(lowerFirst(\'Hello\'), pad(\'World\', 5))\n  .subscribe(value => console.log(value));\n  // hello\n  // World\n```\n\n6. Example of ReactiveX\n\n```js\nimport { timer, of } from \'rxjs\';\nimport { mapTo, combineAll } from \'rxjs/operators\';\n\ntimer(2000)\n  .pipe(\n    mapTo(of(\'Hello\', \'World\')),\n    combineAll(),\n  )\n  .subscribe(value => console.log(value));\n  // ["Hello"]\n  // ["World"]\n```\n\n7. Example of Socket\n\n```js\nconnSocket.emit(\'A\', { foo: \'bar\' });\nconnSocket.on(\'B\', data => console.log(data));  // { foo: \'baz\' }\n```\n\n```html\n<script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js"></script>\n<script>\nconst socket = io(\'http://localhost:3000/\');\n\nsocket.on(\'connect\', () => console.log(\'Socket: Accept a connection.\'));\n\nsocket.on(\'A\', (data) => {\n  console.log(data);  // { foo: \'bar\' }\n  socket.emit(\'B\', { foo: \'baz\' });\n});\n</script>\n```\n\n8. Example of Redis\n\n```js\nimport redis from \'~/core/redis\';\n\nredis.hmset(\'thing\', {\n  foo: \'js\',\n  bar: \'html\',\n  baz: \'css\',\n});\n\nredis.hgetall(\'thing\', (err, object) => {\n  console.log(object);\n});\n```\n\n## Directory Structure\n\nThe structure follows the LIFT Guidelines.\n\n```coffee\n.\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 src\n\xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 core -> core feature module\n\xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 <FEATURE> -> feature modules\n\xe2\x94\x82   \xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 __tests__\n\xe2\x94\x82   \xe2\x94\x82   \xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 <FEATURE>.e2e-spec.js\n\xe2\x94\x82   \xe2\x94\x82   \xe2\x94\x82   \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 <FEATURE>.spec.js\n\xe2\x94\x82   \xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 _<THING> -> feature of private things\n\xe2\x94\x82   \xe2\x94\x82   \xe2\x94\x82   \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 ...\n\xe2\x94\x82   \xe2\x94\x82   \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 <FEATURE>.js\n\xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 <GROUP> -> module group\n\xe2\x94\x82   \xe2\x94\x82   \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 <FEATURE> -> feature modules\n\xe2\x94\x82   \xe2\x94\x82       \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 __tests__\n\xe2\x94\x82   \xe2\x94\x82       \xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 <FEATURE>.e2e-spec.js\n\xe2\x94\x82   \xe2\x94\x82       \xe2\x94\x82   \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 <FEATURE>.spec.js\n\xe2\x94\x82   \xe2\x94\x82       \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 _<THING> -> feature of private things\n\xe2\x94\x82   \xe2\x94\x82       \xe2\x94\x82   \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 ...\n\xe2\x94\x82   \xe2\x94\x82       \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 <FEATURE>.js\n\xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 shared -> shared feature module\n\xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 app.js\n\xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 env.js\n\xe2\x94\x82   \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 server.js\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 tools\n\xe2\x94\x82   \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 ...\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 .editorconfig\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 .eslintrc\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 .gitignore\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 .prettierrc\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 babel.config\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 circle.yml\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 docker-compose.yml\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 Dockerfile\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 jest.config.js\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 LICENSE\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 package.json\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 processes.js\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 README.md\n\xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 yarn.lock\n```\n'