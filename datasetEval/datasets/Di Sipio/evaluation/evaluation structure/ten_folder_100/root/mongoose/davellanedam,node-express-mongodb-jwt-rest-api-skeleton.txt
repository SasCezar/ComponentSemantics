b'# Node.js express.js MongoDB JWT REST API - Basic Project Skeleton\n\n[![Author](http://img.shields.io/badge/author-@davellanedam-blue.svg?style=flat-square)](https://twitter.com/davellanedam)\n[![Software License](https://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat-square)](https://github.com/davellanedam/node-express-mongodb-jwt-rest-api-skeleton/blob/master/LICENSE)\n[![Tag](https://img.shields.io/github/tag/davellanedam/node-express-mongodb-jwt-rest-api-skeleton.svg?style=flat-square)](https://github.com/davellanedam/node-express-mongodb-jwt-rest-api-skeleton/tags)\n[![Travis](https://img.shields.io/travis/com/davellanedam/node-express-mongodb-jwt-rest-api-skeleton.svg?style=flat-square)](<>)\n[![npm downloads](https://img.shields.io/npm/dt/node-express-mongodb-jwt-rest-api-skeleton.svg?style=flat-square&label=npm%20downloads)](<>)\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/fb6f20533c0f41b6b00da95ba634cd5e)](https://www.codacy.com/app/davellanedam/node-express-mongodb-jwt-rest-api-skeleton?utm_source=github.com&utm_medium=referral&utm_content=davellanedam/node-express-mongodb-jwt-rest-api-skeleton&utm_campaign=Badge_Grade)\n\n## Getting started\n\nThis is a basic API REST skeleton written on JavaScript using async/await. Great for building a starter web API for your front-end (Android, iOS, Vue, react, angular, or anything that can consume an API)\n\nThis project is created to help other developers create a **basic REST API in an easy way with Node.js**. This basic example shows how powerful and simple JavaScript can be. Do you want to contribute? Pull requests are always welcome to show more features.\n\n## Buy me a coffee\n\nHi! I\'m Daniel Avellaneda, I\'m an open source enthusiast and devote my free time to building projects in this field.\n\nI\'m the creator and maintainer of [node-express-mongodb-jwt-rest-api-skeleton](https://github.com/davellanedam/node-express-mongodb-jwt-rest-api-skeleton/blob/master/README.md) and [vue-skeleton-mvp](https://github.com/davellanedam/vue-skeleton-mvp/blob/master/README.md)\n\nThese projects are a "starter web app kit" for any developer who wants to build their own app without starting from scratch: API + Frontend\n\nBoth projects have been downloaded thousands of times by web developers around the world.\n\nI\'m doing my best to provide you a good experience when using my apps, so if you like what I\'m doing and wish to say "thanks!", please buy me a coffee :coffee:\n\n<a href="https://www.buymeacoffee.com/muGHf41NT" target="_blank"><img src="https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png" alt="Buy Me A Coffee" style="height: auto !important;width: auto !important;" ></a>\n\nFeel free to send me a tweet <https://twitter.com/davellanedam>, share this with others or make a pull request\n\n## Features\n\n-   Multiple environment ready (development, production)\n-   Custom email/password user system with basic security and blocking for preventing brute force attacks.\n-   Compressed responses.\n-   Secured HTTP headers.\n-   CORS ready.\n-   Cache ready (Redis).\n-   HTTP request logger in development mode.\n-   i18n ready (for sending emails in multiple languages).\n-   User roles.\n-   Pagination ready.\n-   User profile.\n-   Users list for admin area.\n-   Cities model and controller example.\n-   Login access log with IP, browser and country location (for country it looks for the header `cf-ipcountry` that CloudFlare creates when protecting your website).\n-   API autogenerated documentation by Postman.\n-   API collection example for Postman.\n-   Testing with mocha/chai for API endpoints.\n-   NPM scripts for cleaning and seeding the MongoDB database.\n-   NPM script for keeping good source code formatting using prettier and ESLint.\n-   Use of ESLint for good coding practices.\n-   Mailer example with Nodemailer and Mailgun.\n-   Ability to refresh token\n-   JWT Tokens, make requests with a token after login with `Authorization` header with value `Bearer yourToken` where `yourToken` is the **signed and encrypted token** given in the response from the login process.\n\n## Requirements\n\n-   Node.js **8+**\n-   MongoDB **3.6+**\n-   Redis **5.0+**\n\n## Demo\n\nA demo of this API is located at: <https://api-demo.daniel-avellaneda.com>\n\n### Login credentials\n\nemail: `admin@admin.com`  \npassword: `12345`\n\n**IMPORTANT:** Database resets every 30 mins like "12:00am, 12:30am, 1:00am" and so on. So anything you do with the API will be lost after a short time.\n\n[API documentation](###api-documentation)  \n[Postman API example collection](###postman-api-example-collection)  \nIf you want to test it don\xc2\xb4t forget to change the server variable to:  \n`https://api-demo.daniel-avellaneda.com`\n\nDemo is also linked to a VueJS project that shows how this API can be integrated to a frontend that is able to consume an API.  \nRepo is here: <https://github.com/davellanedam/vue-skeleton-mvp>  \nRunning demo is here: <https://vue-demo.daniel-avellaneda.com>\n\n## How to install\n\n### Using Git (recommended)\n\n1.  Clone the project from github. Change "myproject" to your project name.\n\n```bash\ngit clone https://github.com/davellanedam/node-express-mongodb-jwt-rest-api-skeleton.git ./myproject\n```\n\n### Using manual download ZIP\n\n1.  Download repository\n2.  Uncompress to your desired directory\n\n### Install npm dependencies after installing (Git or manual download)\n\n```bash\ncd myproject\nnpm install\nnpm update\n```\n\n### Setting up environments (development or production)\n\n1.  In the root this repository you will find a file named `.env.example`\n2.  Create a new file by copying and pasting the file and then renaming it to just `.env`\n3.  The file `.env` is already ignored, so you never commit your credentials.\n4.  Change the values of the file to your environment (development or production)\n5.  Upload the `.env` to your environment server(development or production)\n6.  If you use the postman collection to try the endpoints, change value of the variable `server` on your environment to the url of your server, for development mode use <http://localhost:3000>\n\n**IMPORTANT:** By default token expires in 3 days (4320 minutes set in .env.example). You can refresh token at endpoint GET /token. If everything it\xc2\xb4s ok you will get a new token.\n\n### Mailer\n\nTo ensure the deliverability of emails sent by this API, `Mailgun` is used for mailing users when they sign up, so if you want to use that feature go sign up at their website <https://www.mailgun.com>\n\nIf you want to try a different method it\xc2\xb4s ok, I used <https://nodemailer.com> for this API and they have different transport methods like: smtp.\n\n### i18n\n\nLanguage is automatically detected from `Accept-Language` header on the request. So either you send locale manually on the request or your browser will send its default, if `Accept-Language` header is not sent then it will use `en` locale as default.\n\n## How to run\n\n### Database cleaning and seeding samples\n\nThere are 3 available commands for this: `fresh`, `clean` and `seed`.\n\n```bash\nnpm run command\n```\n\n-   `fresh` cleans and then seeds the database with dynamic data.\n-   `clean` cleans the database.\n-   `seed` seeds the database with dynamic data.\n\n### Running in development mode (lifting API server)\n\n```bash\nnpm run dev\n```\n\nYou will know server is running by checking the output of the command `npm run dev`\n\n```bash\n****************************\n*    Starting Server\n*    Port: 3000\n*    NODE_ENV: development\n*    Database: MongoDB\n*    DB Connection: OK\n****************************\n```\n\n### Running tests\n\nIt\xc2\xb4s a good practice to do tests at your code, so a sample of how to do that in `mocha/chai` is also included in the `/test` directory\n\n```bash\nnpm run test\n```\n\n### Formatting code\n\nFormat your code with prettier by typing:\n\n```bash\nnpm run format\n```\n\n### Formatting markdown files\n\nFormat all your markdown files with remark by typing:\n\n```bash\nnpm run remark\n```\n\n### Linting code\n\nLint your code with ESLint by typing:\n\n```bash\nnpm run lint\n```\n\n## Usage\n\nOnce everything is set up to test API routes either use Postman or any other api testing application. Default username/password combination for login is `admin@admin.com/12345`.\n\n### API documentation\n\n<https://documenter.getpostman.com/view/487539/RWaHwoLV>\n\n### Postman API example collection\n\nYou can import the example collection to Postman. To import, click the import button located and select `postman-example.json` located within the root directory.\n\nGo to `manage environments` to create environments for development, production, etc. On each of the environments you create you will need to:\n\n1.  Create a new key `authToken` and within the `/login` request this value is automatically updated after a successfull login through a script located in the `tests` tab. Each time you make a request to the API it will send `Authorization` header with the `token` value in the request, you can check this on the headers of users or cities endpoints in the Postman example.\n\n2.  Create a second key `server` with the url of your server, for development mode use <http://localhost:3000>\n\nThis is a REST API, so it works using the following HTTP methods:\n\n-   GET (Read): Gets a list of items, or a single item\n-   POST (Create): Creates an item\n-   PATCH (Update): Updates an item\n-   DELETE: Deletes an item\n\n### Creating new models\n\nIf you need to add more models to the project just create a new file in `/app/models/` and it will be loaded dynamically.\n\n### Creating new routes\n\nIf you need to add more routes to the project just create a new file in `/app/routes/` and it will be loaded dynamically.\n\n### Creating new controllers\n\nWhen you create a new controller file, try to also create another file with validations. Ex. `countries.js` and `countries.validate.js`. An example of this is included in the repository.\n\n## Bugs or improvements\n\nFeel free to report any bugs or improvements. Pull requests are always welcome.\n\n## License\n\nThis project is open-sourced software licensed under the MIT License. See the LICENSE file for more information.\n'