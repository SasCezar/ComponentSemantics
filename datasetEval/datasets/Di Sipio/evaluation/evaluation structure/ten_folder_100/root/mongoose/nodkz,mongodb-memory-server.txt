b'# mongodb-memory-server\n\n[![CircleCI](https://img.shields.io/circleci/project/github/nodkz/mongodb-memory-server/master.svg)](https://circleci.com/gh/nodkz/workflows/mongodb-memory-server)\n[![NPM version](https://img.shields.io/npm/v/mongodb-memory-server.svg)](https://www.npmjs.com/package/mongodb-memory-server)\n[![Downloads stat](https://img.shields.io/npm/dt/mongodb-memory-server.svg)](http://www.npmtrends.com/mongodb-memory-server)\n[![Commitizen friendly](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/)\n![TypeScript compatible](https://img.shields.io/badge/typescript-compatible-brightgreen.svg)\n\nThis package spins up a actual/real MongoDB Server programmatically from node for testing or mocking during development. By default it holds the data in memory. Fresh spinned up `mongod` process takes about 7Mb of memory. The server will allow you to connect your favorite ODM or client library to the MongoDB Server and run integration tests isolated from each other.\n\nOn install, this package downloads the latest MongoDB binaries and saves it to a cache folder.\n\nOn starting a new instance of the memory server, if the binary cannot be found, it will be auto-downloaded. So the first run may take some time. All further runs will be fast, because they will use the downloaded binaries.\n\nThis package automatically downloads binaries from [https://fastdl.mongodb.org/](https://fastdl.mongodb.org/) according to your operating system. You can see all available versions by the following links [Linux](https://www.mongodb.org/dl/linux) (Ubuntu, RHEL, Debian, SUSE, Amazon), [OSX](https://www.mongodb.org/dl/osx), [Win](https://www.mongodb.org/dl/win32).\n\n> If your network is behind a proxy, make sure that it is configured through the `HTTPS_PROXY` or `HTTP_PROXY` environment variable.\n\nEvery `MongoMemoryServer` instance creates and starts fresh MongoDB server on some free port. You may start up several mongod simultaneously. When you terminate your script or call `stop()` MongoDB server(s) will be automatically shutdown.\n\nPerfectly [works with Travis CI](https://github.com/nodkz/graphql-compose-mongoose/commit/7a6ac2de747d14281f9965f418065e97a57cfb37) without additional `services` and `addons` options in `.travis.yml`.\n\n## Installation\n\nThis tool provides three packages for different purposes:\n\n- With auto-download mongod binary on npm install\n- Without auto-download on npm install\n\nChoose any package, because they are the same. Differs only by default configuration, which you may override (see section [Available options](#available-options)).\n\n### `mongodb-memory-server`\n\nAuto-downloads the latest `mongod` binary on npm install to: `node_modules/.cache`.\n\n```bash\nyarn add mongodb-memory-server --dev\nOR\nnpm install mongodb-memory-server --save-dev\n```\n\n### `mongodb-memory-server-global`\n\nAuto-downloads the latest `mongod` binary on npm install to: `%HOME/.cache`.\n\n```bash\nyarn add mongodb-memory-server-global --dev\nOR\nnpm install mongodb-memory-server-global --save-dev\n```\n\n### `mongodb-memory-server-core`\n\nDoes NOT auto-download `mongod` on npm install.\n\n```bash\nyarn add mongodb-memory-server-core --dev\nOR\nnpm install mongodb-memory-server-core --save-dev\n```\n\n_Note: the package does try to download `mongod` upon server start if it cannot find the binary._\n\n## Usage\n\n### Simple server start:\n\n```js\nimport { MongoMemoryServer } from \'mongodb-memory-server\';\n\nconst mongod = new MongoMemoryServer();\n\nconst uri = await mongod.getConnectionString();\nconst port = await mongod.getPort();\nconst dbPath = await mongod.getDbPath();\nconst dbName = await mongod.getDbName();\n\n// some code\n//   ... where you may use `uri` for as a connection string for mongodb or mongoose\n\n// you may check instance status, after you got `uri` it must be `true`\nmongod.getInstanceInfo(); // return Object with instance data\n\n// you may stop mongod manually\nawait mongod.stop();\n\n// when mongod killed, it\'s running status should be `false`\nmongod.getInstanceInfo();\n\n// even you forget to stop `mongod` when you exit from script\n// special childProcess killer will shutdown it for you\n```\n\n### Available options\n\nAll options are optional.\n\n```js\nconst mongod = new MongoMemoryServer({\n  instance: {\n    port?: ?number, // by default choose any free port\n    ip?: string, // by default \'127.0.0.1\', for binding to all IP addresses set it to `::,0.0.0.0`,\n    dbName?: string, // by default generate random dbName\n    dbPath?: string, // by default create in temp directory\n    storageEngine?: string, // by default `ephemeralForTest`, available engines: [ \'devnull\', \'ephemeralForTest\', \'mmapv1\', \'wiredTiger\' ]\n    debug?: boolean, // by default false\n    replSet?: string, // by default no replica set, replica set name\n    auth?: boolean, // by default `mongod` is started with \'--noauth\', start `mongod` with \'--auth\'\n    args?: string[], // by default no additional arguments, any additional command line arguments for `mongod` `mongod` (ex. [\'--notablescan\'])\n  },\n  binary: {\n    version?: string, // by default \'latest\'\n    downloadDir?: string, // by default node_modules/.cache/mongodb-memory-server/mongodb-binaries\n    platform?: string, // by default os.platform()\n    arch?: string, // by default os.arch()\n    debug?: boolean, // by default false\n    checkMD5?: boolean, // by default false OR process.env.MONGOMS_MD5_CHECK\n    systemBinary?: string, // by default undefined or process.env.MONGOMS_SYSTEM_BINARY\n  },\n  debug?: boolean, // by default false\n  autoStart?: boolean, // by default true\n});\n```\n\n#### Options which can be set via ENVIRONMENT variables\n\n```txt\nMONGOMS_DOWNLOAD_DIR=/path/to/mongodb/binaries\nMONGOMS_PLATFORM=linux\nMONGOMS_ARCH=x64\nMONGOMS_VERSION=3\nMONGOMS_DEBUG=1 # also available case-insensitive values: "on" "yes" "true"\nMONGOMS_DOWNLOAD_MIRROR=host # your mirror host to download the mongodb binary\nMONGOMS_DOWNLOAD_URL=url # full URL to download the mongodb binary\nMONGOMS_DISABLE_POSTINSTALL=1 # if you want to skip download binaries on `npm i` command\nMONGOMS_SYSTEM_BINARY=/usr/local/bin/mongod # if you want to use an existing binary already on your system.\nMONGOMS_MD5_CHECK=1 # if you want to make MD5 check of downloaded binary.\n# Passed constructor parameter `binary.checkMD5` has higher priority.\n```\n\n#### Options which can be set via package.json\'s `config` section\n\nYou can also use package.json\'s `config` section to configure installation process.\nEnvironment variables have higher priority than contents of package.json.\n\n```json\n{\n  "config": {\n    "mongodbMemoryServer": {\n      "downloadDir": "/path/to/mongodb/binaries",\n      "platform": "linux",\n      "arch": "x64",\n      "version": "3",\n      "debug": "1",\n      "downloadMirror": "url",\n      "disablePostinstall": "1",\n      "systemBinary": "/usr/local/bin/mongod",\n      "md5Check": "1"\n    }\n  }\n}\n```\n\n### Replica Set start:\n\n```js\nimport { MongoMemoryReplSet } from \'mongodb-memory-server\';\n\nconst replSet = new MongoMemoryReplSet({\n  debug: false,\n  replSet: { storageEngine: \'wiredTiger\' },\n});\nawait replSet.waitUntilRunning();\nconst uri = await replSet.getConnectionString();\n// or you may obtain the connection config parts:\n// const port = await replSet.getPort();\n// const dbPath = await replSet.getDbPath();\n// const dbName = await replSet.getDbName();\n\n// some code, eg. for mongoose\nmongoose.set(\'useFindAndModify\', false);\nmongoose.set(\'useCreateIndex\', true);\nmongoose.connect(uri, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true,\n});\n// after some useful code don\'t forget to disconnect\nmongoose.disconnect();\n\n// stop replica set manually\nreplSet.stop();\n// or it should be stopped automatically when you exit from script\n```\n\n### Available options for Replica Set\n\nAll options are optional.\n\n```js\nconst replSet = new MongoMemoryReplSet({\n  autoStart, // same as for MongoMemoryServer\n  binary: binaryOpts, // same as for MongoMemoryServer\n  debug, // same as for MongoMemoryServer\n  instanceOpts: [\n    {\n      args, // any additional instance specific args\n      port, // port number for the instance\n      dbPath, // path to database files for this instance\n      storageEngine, // same storage engine options\n    },\n    // each entry will result in a MongoMemoryServer\n  ],\n  // unless otherwise noted below these values will be in common with all instances spawned.\n  replSet: {\n    name, // replica set name (default: \'testset\')\n    auth, //  enable auth support? (default: false)\n    args, // any args specified here will be combined with any per instance args from `instanceOpts`\n    count, // number of `mongod` processes to start; (default: 1)\n    dbName, // default database for db URI strings. (default: uuid.v4())\n    ip, // by default \'127.0.0.1\', for binding to all IP addresses set it to `::,0.0.0.0`\n    oplogSize, // size (in MB) for the oplog; (default: 1)\n    spawn, // spawn options when creating the child processes\n    storageEngine, // default storage engine for instance. (Can be overridden per instance)\n    configSettings: {\n      // Optional settings for replSetInitiate command. See https://docs.mongodb.com/manual/reference/command/replSetInitiate/\n      chainingAllowed: boolean, // When true it allows secondary members to replicate from other secondary members. When false, secondaries can replicate only from the primary.\n      heartbeatTimeoutSecs: number, // Number of seconds that the replica set members wait for a successful heartbeat from each other. If a member does not respond in time, other members mark the delinquent member as inaccessible.\n      heartbeatIntervalMillis: number, // The frequency in milliseconds of the heartbeats.\n      electionTimeoutMillis: number, // The time limit in milliseconds for detecting when a replica set\xe2\x80\x99s primary is unreachable.\n      catchUpTimeoutMillis: number, // Time limit for a newly elected primary to sync (catch up) with the other replica set members that may have more recent writes.\n    },\n  },\n});\n```\n\n### Simple test with MongoClient\n\nTake a look at this [test file](https://github.com/nodkz/mongodb-memory-server/blob/master/packages/mongodb-memory-server-core/src/__tests__/singleDB-test.ts).\n\n### Provide connection string to mongoose\n\n```js\nimport mongoose from \'mongoose\';\nimport { MongoMemoryServer } from \'mongodb-memory-server\';\n\nconst mongoServer = new MongoMemoryServer();\n\nmongoose.Promise = Promise;\nmongoServer.getConnectionString().then((mongoUri) => {\n  const mongooseOpts = {\n    // options for mongoose 4.11.3 and above\n    autoReconnect: true,\n    reconnectTries: Number.MAX_VALUE,\n    reconnectInterval: 1000,\n    useMongoClient: true, // remove this line if you use mongoose 5 and above\n  };\n\n  mongoose.connect(mongoUri, mongooseOpts);\n\n  mongoose.connection.on(\'error\', (e) => {\n    if (e.message.code === \'ETIMEDOUT\') {\n      console.log(e);\n      mongoose.connect(mongoUri, mongooseOpts);\n    }\n    console.log(e);\n  });\n\n  mongoose.connection.once(\'open\', () => {\n    console.log(`MongoDB successfully connected to ${mongoUri}`);\n  });\n});\n```\n\nFor additional information I recommend you to read this article [Testing a GraphQL Server using Jest with Mongoose](https://medium.com/entria/testing-a-graphql-server-using-jest-4e00d0e4980e)\n\n### Several mongoose connections simultaneously\n\n```js\nimport mongoose from \'mongoose\';\nimport { MongoMemoryServer } from \'mongodb-memory-server\';\n\nmongoose.Promise = Promise;\n\nconst mongoServer1 = new MongoMemoryServer();\nconst mongoServer2 = new MongoMemoryServer();\n\n// Firstly create connection objects, which you may import in other files and create mongoose models.\n// Connection to databases will be estimated later (after model creation).\nconst connections = {\n  conn1: mongoose.createConnection(),\n  conn2: mongoose.createConnection(),\n  conn3: mongoose.createConnection(),\n};\n\nconst mongooseOpts = { // options for mongoose 4.11.3 and above\n  promiseLibrary: Promise;\n  autoReconnect: true,\n  reconnectTries: Number.MAX_VALUE,\n  reconnectInterval: 1000,\n  useMongoClient: true, // remove this line if you use mongoose 5 and above\n};\n\nmongoServer1.getConnectionString(\'server1_db1\').then((mongoUri) => {\n  connections.conn1.open(mongoUri, mongooseOpts);\n  connection.once(\'open\', () => {\n    console.log(`MongoDB successfully connected to ${mongoUri}`);\n  });\n});\n\nmongoServer1.getConnectionString(\'server1_db2\').then((mongoUri) => {\n  connections.conn2.open(mongoUri, mongooseOpts);\n  connection.once(\'open\', () => {\n    console.log(`MongoDB successfully connected to ${mongoUri}`);\n  });\n});\n\nmongoServer2.getConnectionString(\'server2_db\').then((mongoUri) => {\n  connections.conn3.open(mongoUri, mongooseOpts);\n  connection.once(\'open\', () => {\n    console.log(`MongoDB successfully connected to ${mongoUri}`);\n  });\n});\n\nexport default connections;\n\n\n// somewhere in other file\nimport { Schema } from \'mongoose\';\nimport { conn1, conn2, conn3 } from \'./file_above\';\n\nconst userSchema = new Schema({\n  name: String,\n});\n\nconst taskSchema = new Schema({\n  userId: String,\n  task: String,\n});\n\nexport default {\n  User: conn1.model(\'user\', userSchema),\n  Task: conn2.model(\'task\', taskSchema),\n  UserOnServer2: conn3.model(\'user\', userSchema),\n}\n```\n\nNote: When you create mongoose connection manually, you should do:\n\n```js\nimport mongoose from \'mongoose\';\n\nconst opts = { useMongoClient: true }; // remove this option if you use mongoose 5 and above\nconst conn = mongoose.createConnection(); // just create connection instance\nconst User = conn.model(\'User\', new mongoose.Schema({ name: String })); // define model\nconn.open(uri, opts); // open connection to database (NOT `connect` method!)\n```\n\nWith default connection:\n\n```js\nimport mongoose from \'mongoose\';\n\nconst opts = { useMongoClient: true }; // remove this option if you use mongoose 5 and above\nmongoose.connect(uri, opts);\nconst User = mongoose.model(\'User\', new mongoose.Schema({ name: String })); // define model\n```\n\n### Simple Mocha/Chai test example\n\nStart Mocha with `--timeout 60000` cause first download of MongoDB binaries may take a time.\n\n```js\nimport mongoose from \'mongoose\';\nimport { MongoMemoryServer } from \'mongodb-memory-server\';\n\nlet mongoServer;\nconst opts = { useMongoClient: true }; // remove this option if you use mongoose 5 and above\n\nbefore((done) => {\n  mongoServer = new MongoMemoryServer();\n  mongoServer\n    .getConnectionString()\n    .then((mongoUri) => {\n      return mongoose.connect(mongoUri, opts, (err) => {\n        if (err) done(err);\n      });\n    })\n    .then(() => done());\n});\n\nafter(async () => {\n  await mongoose.disconnect();\n  await mongoServer.stop();\n});\n\ndescribe(\'...\', () => {\n  it(\'...\', async () => {\n    const User = mongoose.model(\'User\', new mongoose.Schema({ name: String }));\n    const cnt = await User.count();\n    expect(cnt).to.equal(0);\n  });\n});\n```\n\n### Simple Jest test example\n\n```js\nimport mongoose from \'mongoose\';\nimport { MongoMemoryServer } from \'mongodb-memory-server\';\n\n// May require additional time for downloading MongoDB binaries\njasmine.DEFAULT_TIMEOUT_INTERVAL = 600000;\n\nlet mongoServer;\nconst opts = { useMongoClient: true }; // remove this option if you use mongoose 5 and above\n\nbeforeAll(async () => {\n  mongoServer = new MongoMemoryServer();\n  const mongoUri = await mongoServer.getConnectionString();\n  await mongoose.connect(mongoUri, opts, (err) => {\n    if (err) console.error(err);\n  });\n});\n\nafterAll(async () => {\n  await mongoose.disconnect();\n  await mongoServer.stop();\n});\n\ndescribe(\'...\', () => {\n  it(\'...\', async () => {\n    const User = mongoose.model(\'User\', new mongoose.Schema({ name: String }));\n    const cnt = await User.count();\n    expect(cnt).toEqual(0);\n  });\n});\n```\n\nAdditional examples of Jest tests:\n\n- simple example with `mongodb` in [tests in current package](https://github.com/nodkz/mongodb-memory-server/blob/master/src/__tests__/)\n- more complex example with `mongoose` in [graphql-compose-mongoose](https://github.com/nodkz/graphql-compose-mongoose/blob/master/src/__mocks__/mongooseCommon.js)\n\n### AVA test runner\n\nFor AVA written [detailed tutorial](https://github.com/zellwk/ava/blob/8b7ccba1d80258b272ae7cae6ba4967cd1c13030/docs/recipes/endpoint-testing-with-mongoose.md) how to test mongoose models by @zellwk.\n\n### Docker Alpine\n\nThere isn\'t currently an official MongoDB release for alpine linux. This means that we can\'t pull binaries for Alpine\n(or any other platform that isn\'t officially supported by MongoDB), but you can use a Docker image that already has mongod\nbuilt in and then set the MONGOMS_SYSTEM_BINARY variable to point at that binary. This should allow you to use\nmongodb-memory-server on any system on which you can install mongod.\n\n## Travis\n\n**It is very important** to limit spawned number of Jest workers for avoiding race condition. Cause Jest spawn huge amount of workers for every node environment on same machine. [More details](https://github.com/facebook/jest/issues/3765)\nUse `--maxWorkers 4` or `--runInBand` option.\n\n```diff\nscript:\n-  - yarn run coverage\n+  - yarn run coverage -- --maxWorkers 4\n```\n\n## Credits\n\nInspired by alternative runners for [mongodb-prebuilt](https://github.com/winfinit/mongodb-prebuilt):\n\n- [mockgoose](https://github.com/mockgoose/Mockgoose)\n- [mongomem](https://github.com/CImrie/mongomem)\n\n## License\n\nMIT\n\n## Maintainers\n\n- [@nodkz](https://github.com/nodkz) Pavel Chertorogov\n- [@AJRdev](https://github.com/AJRdev) Andre Ranarivelo\n'