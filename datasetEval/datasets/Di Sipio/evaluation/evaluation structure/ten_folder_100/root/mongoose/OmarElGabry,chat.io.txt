b'![Screenshot](https://raw.githubusercontent.com/OmarElGabry/chat.io/master/public/img/chat.io.gif)\n\n# chat.io\n[![Dependency Status](https://www.versioneye.com/user/projects/57d746d1df40d0004a4a9e21/badge.svg?style=flat-square)](https://www.versioneye.com/user/projects/57d746d1df40d0004a4a9e21)\n[![Scrutinizer Code Quality](https://scrutinizer-ci.com/g/OmarElGabry/chat.io/badges/quality-score.png?b=master)](https://scrutinizer-ci.com/g/OmarElGabry/chat.io/?branch=master)\n[![Code Climate](https://codeclimate.com/github/OmarElGabry/chat.io/badges/gpa.svg)](https://codeclimate.com/github/OmarElGabry/chat.io)\n[![FOSSA Status](https://app.fossa.io/api/projects/git%2Bgithub.com%2FOmarElGabry%2Fchat.io.svg?type=shield)](https://app.fossa.io/projects/git%2Bgithub.com%2FOmarElGabry%2Fchat.io?ref=badge_shield)\n\nA Real Time Chat Application built using Node.js, Express, Mongoose, Socket.io, Passport, & Redis.\n\n## Index\n+ [Demo](#demo)\n+ [Features](#features)\n+ [Installation](#installation)\n+ [How It Works](#how-it-works)\n+ [Support](#support)\n+ [Contribute](#contribute)\n+ [License](#license)\n\n## Demo<a name="demo"></a>\nCheck [Demo](http://chatio.herokuapp.com/)\n\n## Features<a name="features"></a>\n+ Uses Express as the application Framework.\n+ Manages Sessions using [express-session](https://github.com/expressjs/session) package.\n+ Authenticates via username and password using [Passport](https://github.com/jaredhanson/passport).\n+ Passwords are hashed using [bcrypt-nodejs](https://github.com/shaneGirish/bcrypt-nodejs) package.\n+ Social Authentication via Facebook and Twitter using [Passport](https://github.com/jaredhanson/passport).\n+ Real-time communication between a client and a server using [Socket.io](https://github.com/socketio/socket.io).\n+ Uses [MongoDB](https://github.com/mongodb/mongo), [Mongoose](https://github.com/Automattic/mongoose) and [MongoLab(mLab)](https://mlab.com/) for storing and querying data.\n+ Stores session in a [MongoDB](https://github.com/mongodb/mongo) using [connect-mongo](https://github.com/kcbanner/connect-mongo); a MongoDB-based session store.\n+ Uses [Redis](https://github.com/antirez/redis) as an Adapter for [Socket.io](https://github.com/socketio/socket.io).\n+ Logging Errors and Exceptions using [Winston](https://github.com/winstonjs/winston).\n\n## Installation<a name="installation"></a>\n### Running Locally\nMake sure you have [Node.js](https://nodejs.org/) and [npm](https://www.npmjs.com/) installed.\n\n1. Clone or Download the repository\n\n\t```\n\t$ git clone https://github.com/OmarElGabry/chat.io.git\n\t$ cd chat.io\n\t```\n2. Install Dependencies\n\n\t```\n\t$ npm install\n\t```\n2. Edit configuration file in _app/config/config.json_ with your credentials(see [Setup Configurations](#configurations)).\n3. Download and Install [Redis](http://redis.io/download).\n4. Running Redis Server(as Admin)\n\n\t```\n\t$ redis-server\n\t``` \n5. Start the application\n\n\t```\n\t$ npm start\n\t```\nYour app should now be running on [localhost:3000](http://localhost:3000/).\n\n### Deploying to Heroku\nMake sure you have the [Heroku Toolbelt](https://toolbelt.heroku.com/) installed.\n\n1. Create a new Heroku application, and push your chat application to a Git remote repository\n\n\t```\n\t$ heroku create\n\t$ git push heroku master\n\t```\n\t\n\tor\n\t\n\t[![Deploy to Heroku](https://www.herokucdn.com/deploy/button.png)](https://heroku.com/deploy)\n\n2. Now, you need to set up configuration variables on Heroku. \n\t1. Go to Settings -> Reveal Config Vars.\n\t2. Add configuration variables. All needed variables are inside _app/config/index.js_. \n\tTypically, these are the configuration variables you need to assign: \n\t```{ dbURI, sessionSecret, facebookClientID, facebookClientSecret, twitterConsumerKey, twitterConsumerSecret }```(see [Setup Configurations](#configurations)).\n\n3. One last step is to add [Redis](http://redis.io/) as an Add-on on Heroku.\n\t1. Go to Resources -> Add-ons\n\t2. Select Heroku Redis\n\t> You need to setup a billing account even if the add-on is free.\n4. Open your chat application in the browser\n\n\t```\n\t$ heroku open\n\t```\n\n\n\n## How It Works<a name="how-it-works"></a>\n### Setup Configurations<a name="configurations"></a>\nThe configurations on production will be assigned from Environment Variables on Heroku, while the development configurations reside inside _app/config/config.json_ file.\n\n#### MongoDB & MongoLab\nYou need to create a database on MongoLab, then create a database user, get the `MongoDB URI`, and assign it to `dbURI`.\n\n#### Facebook & Twitter\nYou need to register a new application on both Facebook and Twitter to get your tokens by which users can grant access to your application, and login using their social accounts.\n\n##### Registering the app on Facebook\n1. Go to [Facebook Developers](https://developers.facebook.com/)\n2. Add new app, and fill the required information.\n3. Get your `App ID`, `App Secret`.\n4. Go to Add Product -> Facebook Login -> Valid OAuth redirect URIs\n5. Add Valid Callback URIs\n6. Go to App Review -> Make your application public.\n\nNow, you can assign the `App ID` to `facebookClientID`, and `App Secret` to `facebookClientSecret`.\n##### Registering the app on Twitter\n1. Go to [Twitter Apps](https://apps.twitter.com/)\n2. Create new app, and fill the required information.\n3. Add Website & Callback URL\n4. Get your `Consumer Key`, `Consumer Secret`.\n\nNow, you can assign the `Consumer Key` to `twitterConsumerKey`, and `Consumer Secret` to `twitterConsumerSecret`.\n\n##### The Callback URL\n- It can point back to your localhost; _[http://localhost:3000/auth/facebook/callback](http://localhost:3000/auth/facebook/callback)_\n\n- When deploy to Heroku, you will have something look like this; _[http://my-chat-app.herokuapp.com/auth/facebook/callback](http://my-chat-app.herokuapp.com/auth/facebook/callback)_\n\n#### Session\nThe session needs a random string to make sure the session id in the browser is random. That random string is used to encrypt the session id in the browser, _Why?_ To prevent session id guessing.\n\n\n### Database<a name="database"></a>\nMongoose is used to interact with a MongoDB that\'s hosted by MongoLab. \n\n#### Schemas\nThere are two schemas; users and rooms. \n\nEach user has a username, passowrd, social Id, and picture. If the user is logged via username and password, then social Id has to be null, and the if logged in via a social account, then the password will be null.\n\nEach room has a title, and array of connections. Each item in the connections array represents a user connected through a unique socket; object composed of _{userId + socketId}_. Both of them together are unique.\n\n### Models<a name="models"></a>\nEach model wraps Mongoose Model object, overrides and provides some methods. There are two models; User and Room.\n\n### Session<a name="session"></a>\nSession in Express applications are best managed using [express-session](https://github.com/expressjs/session) package. Session data are stored locally on your computer, while it\'s stored in the database on the production environment. Session data will be deleted upon logging out.\n\n### User Authentication<a name="auth"></a>\nUser can login using either a username and password, or login via a social account. User authentication is done using [Passport](https://github.com/jaredhanson/passport). Passport has extensive, and step-by-step [documentation](http://passportjs.org/docs/) on how to implement each way of authentication.\n\n### Sockets<a name="sockets"></a>\nHaving an active connection opened between the client and the server so client can send and receive data. This allows real-time communication using TCP sockets. This is made possible by [Socket.io](https://github.com/socketio/socket.io).\n\nThe client starts by connecting to the server through a socket(maybe also assigned to a specific namespace). Once connections is successful, client and server can emit and listen to events. \n\nThere are two namespaces used; `/rooms` and `/chatroom`.\n\n### Logger<a name="logger"></a>\nAnd It doesn\'t go without saying, you need to monitor your application. [Winston](https://github.com/winstonjs/winston) can log and catch Uncaught Exceptions. All logs are displayed in the console, and saved in _debug.log_ file. \n\nOn Heroku, you can monitor the logs by clicking on _More -> View Logs_ on the top left of your application dashboard.\n\n## Support <a name="support"></a>\nI\'ve written this script in my free time during my studies. If you find it useful, please support the project by spreading the word.\n\n## Contribute <a name="contribute"></a>\n\nContribute by creating new issues, sending pull requests on Github or you can send an email at: omar.elgabry.93@gmail.com\n\n## License <a name="license"></a>\nBuilt under [MIT](http://www.opensource.org/licenses/mit-license.php) license.\n\n\n[![FOSSA Status](https://app.fossa.io/api/projects/git%2Bgithub.com%2FOmarElGabry%2Fchat.io.svg?type=large)](https://app.fossa.io/projects/git%2Bgithub.com%2FOmarElGabry%2Fchat.io?ref=badge_large)'