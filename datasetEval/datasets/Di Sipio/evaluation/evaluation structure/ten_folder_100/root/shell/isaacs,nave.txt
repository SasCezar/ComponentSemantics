b'# nave\n\nVirtual Environments for Node.\n\nSwitch out your node version and global npm install space in one\ncommand.  Supports named environments. Uses subshells by default so\nthat you can `^D` or `exit` out of an environment quickly.  No need to\nedit `.bashrc` or `.profile`, just install and go.\n\n## Installation\n\nIf you want a global `nave` command, you could install this thing with\nnpm.  But that\'s not really necessary.  You can run the `nave.sh`\nshell script from here, or symlink it wherever you want.\n\n### with [npm](http://npm.im)\n\nIf you have npm, presumably you already have Node, so it\'s a tiny bit\nsilly, but maybe you like installing the top-level Node some other\nway, and install your subshell version switcher with npm.  Why is a\nbash program in npm anyway?  It\'s fine.  Bits don\'t judge.\n\n```\nnpm install -g nave\n```\n\n### with [basher](https://github.com/basherpm/basher)\n\n```\nbasher install isaacs/nave\n```\n\n## Usage\n\nTo use a version of node, you do this:\n\n```\nnave use <some version>\n```\n\nIf you want to name a virtual env, you can do this:\n\n```\nnave use <some name>\n```\n\nIf that virtual env doesn\'t already exist, it\'ll prompt you to choose\na version.\n\nBoth of these commands drop you into a subshell.  Exit the shell with\n`exit` or `^D` to go back from whence you came.\n\nHere\'s the full usage statement:\n\n```\nUsage: nave <cmd>\n\nCommands:\n\ninstall <version>     Install the version specified (ex: 12.8.0)\ninstall <name> <ver>  Install the version as a named env\nuse <version>         Enter a subshell where <version> is being used\nuse <ver> <program>   Enter a subshell, and run "<program>", then exit\nuse <name> <ver>      Create a named env, using the specified version.\n                      If the name already exists, but the version differs,\n                      then it will update the link.\nusemain <version>     Install in /usr/local/bin (ie, use as your main nodejs)\nclean <version>       Delete the source code for <version>\nuninstall <version>   Delete the install for <version>\nls                    List versions currently installed\nls-remote             List remote node versions\nls-all                List remote and local node versions\nlatest                Show the most recent dist version\ncache                 Clear or view the cache\nhelp                  Output help information\nauto                  Find a .naverc and then be in that env\nauto <dir>            cd into <dir>, then find a .naverc, and be in that env\nauto <dir> <cmd>      cd into <dir>, then find a .naverc, and run a command\n                      in that env\nget <variable>        Print out various nave config values.\nexit                  Unset all the NAVE environs (use with \'exec\')\n\nVersion Strings:\nAny command that calls for a version can be provided any of the\nfollowing "version-ish" identifies:\n\n- x.y.z       A specific SemVer tuple\n- x.y         Major and minor version number\n- x           Just a major version number\n- lts         The most recent LTS (long-term support) node version\n- lts/<name>  The latest in a named LTS set. (argon, boron, etc.)\n- lts/*       Same as just "lts"\n- latest      The most recent (non-LTS) version\n- stable      Backwards-compatible alias for "lts".\n\nTo exit a nave subshell, type \'exit\' or press ^D.\nTo run nave *without* a subshell, do \'exec nave use <version>\'.\nTo clear the settings from a nave env, use \'exec nave exit\'\n```\n\n## Subshell-free operation\n\nIf you prefer to not enter a subshell, just run nave with `exec`\n\n```bash\nexec nave use lts/argon\n```\n\nYou could even add something like this to your `.bashrc` file to save\non typing:\n\n```bash\nn () {\n  exec nave "$@"\n}\n```\n\n## Running shell script with specific version of Node.js\n\nIf there is need to run a shell script with version of node.js provided by nave following snippet can be inserted into script:\n```bash\n[ "${IN_SUBSHELL}" != "$0" ] && exec env IN_SUBSHELL="$0" nave use 5.0.0 bash "$0" "$@" || :\n```\n\n\n## AUTOMAGICAL!\n\nYou can put a `.naverc` file in the root of your project (or\nanywhere).  This file should contain the version that you want to use.\nIt can be something like `lts/boron` or `6.8` or `latest`\n\n```\necho lts/boron > ~/projects/my-project/.naverc\n```\n\nThen you can run `nave auto` to load the appropriate environment.\n\n### BUT THAT\'S NOT NEARLY MAGICAL OR AUTO ENOUGH FOR ME THOUGH\n\nIf you want to get even more absurd/automated, put this in your bash\nsettings (like `~/.bashrc` or whatever)\n\n```\nalias cd=\'exec nave auto\'\n```\n\nand then every time you `cd` into a different folder, it\'ll\nautomatically load the correct nave settings, or exit nave-land if no\nautomatic stuff could be found.\n\nNote that doing this will also cause it to *exit* the nave environment\nwhen you cd to a directory that doesn\'t have a nave setting, so it can\ninterfere with "normal" nave operation.\n\nAlso, aliasing `cd` is a very all-consuming type of change to make to\none\'s system.  You might wish to give it some other name, so that you\ncan switch directories without affecting environment variables as a\npotentially surprising side effect, or even just run `exec nave auto`\nas an explicit action whenever you want this behavior to happen.\n\nBottom line, it\'s your shell, and I hope that this helps you enjoy it\nmore :)\n\n## env vars\n\n* `$NAVE` The current shell.  Either a version, or a name and version.\n* `$NAVENAME` The name of the current shell.  Equal to `$NAVEVERSION`\n  in unnammed environments.\n* `$NAVEVERSION` The version of node that the current shell is\n  pointing to.  (This should comply with `node -v`.)\n* `$NAVELVL` The level of nesting in the subshell.\n* `$NAVE_DEBUG` Set to 1 to run nave in `bash -x` style.\n* `$NAVE_DIR` Set to the location where you\'d like nave to do its\n  business.  Defaults to `~/.nave`.\n* `$NAVE_CONFIG` Set this to an array of arguments to pass to\n  `./configure`.  Defaults to `("--debug")`.  (Note that parens are\n  required to supply multiple arguments.  I use `("--debug"\n  "--without-npm")` on my own system, since I\'m usually using nave to\n  test npm, so installing it in the subshell doesn\'t help much.)  This\n  can be set in the `~/.naverc` file, or in your normal\n  `~/.bash{rc,_profile}` files.\n* `$NAVE_JOBS` If set, this will be the number of jobs to run when\n  building node.  If this isn\'t set, it\'ll use the `$JOBS` env, then\n  try to guess a reasonable value based on the number of CPUs, then\n  fall back on 2 if `sysctl -n hw.ncpu` fails.\n* `$NAVE_SRC_ONLY` Set to `"1"` to only build from source, rather than\n  fetching binaries.\n\n## Compatibility\n\nPrior to version 0.2, nave would run programs as `node <program>`.\nHowever, this is somewhat more limiting, so was dropped.  If you\nprefer the old style, just prefix your command with `node`.\n\nNave requires bash.  It will probably never work on Windows, or other\nsystems lack a native Bourne Again Shell.  Sorry.\n\nNave logins work with any shell, but executing a command in the nave\nenvironment (ie, `nave use 12 node program.js`) requires that your shell\nsupport the `-c` argument.  (Bash, sh, zsh, and fish all work fine.)\n\n## Configuration\n\nNave will source `~/.naverc` on initialization of a new subshell, if it\nexists and is readable.\n\nYou may control the place where nave puts things by setting the\n`NAVE_DIR` environment variable.  However, note that this must be set\nsomewhere *other* than `~/.naverc`, since it needs to be set in the\n*parent* shell where the `nave` command is invoked.\n\nBy default, nave puts its stuff in `~/.nave/`.  If this directory does\nnot exist and cannot be created, then it will attempt to use the location\nof the nave.sh bash script itself.  If it cannot write to this location,\nthen it will exit with an error.\n\n## Credits\n\nnave borrows concepts, inspiration, and code from Tim Caswell\'s "nvm"\nand Kris Kowal\'s "sea" programs.\n\nSea is really nice, but is very tied to Narwhal.  Also, it\'s a\nrequire.paths manager, which nave is not.\n\nNvm is also really nice, but has to be sourced rather than being run, and\nthus is a little bit wonky for some use cases.  But it doesn\'t involve\nsubshells, which makes it better for some others.\n'