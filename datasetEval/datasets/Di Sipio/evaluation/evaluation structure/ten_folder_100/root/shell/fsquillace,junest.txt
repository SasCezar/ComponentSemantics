b'JuNest\n======\nThe lightweight Arch Linux based distro that runs upon any Linux distros without root access.\n\n<h1 align="center">\n    <a href="https://github.com/fsquillace/junest"><img\n        alt="JuNest"\n        width=250px\n        src="https://cdn.rawgit.com/fsquillace/junest-logo/master/junest.svg"></a>\n</h1>\n\n|Project Status|Donation|Communication|\n|:------------:|:------:|:-----------:|\n| [![Build status](https://api.travis-ci.org/fsquillace/junest.png?branch=master)](https://travis-ci.org/fsquillace/junest) [![OpenHub](https://www.openhub.net/p/junest/widgets/project_thin_badge.gif)](https://www.openhub.net/p/junest) | [![PayPal](https://img.shields.io/badge/PayPal-Donate%20a%20beer-blue.svg)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=8LEHQKBCYTACY) | [![Join the gitter chat at https://gitter.im/fsquillace/junest](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/fsquillace/junest?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge) [![RSS](https://img.shields.io/badge/RSS-News-orange.svg)](http://fsquillace.github.io/junest-site/feed.xml) |\n\n**Table of Contents**\n- [Description](#description)\n- [Quickstart](#quickstart)\n- [Installation](#installation)\n- [Usage](#usage)\n- [Advanced usage](#advanced-usage)\n- [Internals](#internals)\n- [Troubleshooting](#troubleshooting)\n- [More documentation](#more-documentation)\n- [Contributing](#contributing)\n- [Authors](#authors)\n\nDescription\n===========\n**JuNest** (Jailed User NEST) is a lightweight Arch Linux based distribution that allows to have\nan isolated GNU/Linux environment inside any generic host GNU/Linux OS\nand without the need to have root privileges for installing packages.\n\nJuNest contains mainly the package managers (called [pacman](https://wiki.archlinux.org/index.php/Pacman)\nthat allows to access\nto a wide range of packages from the Arch Linux repositories.\n\nThe main advantages on using JuNest are:\n\n- Install packages without root privileges.\n- Partial isolated environment which you can install packages without affecting a production system.\n- Access to a wide range of packages in particular on GNU/Linux distros that may contain limited repositories (such as CentOS and RedHat).\n- Available for `x86_64` and `arm` architectures but you can build your own image from scratch too!\n- Run on a different architecture from the host OS via QEMU\n- All Arch Linux lovers can have their favourite distro everywhere!\n\nJuNest follows the [Arch Linux philosophy](https://wiki.archlinux.org/index.php/The_Arch_Way).\n\nHow different is JuNest from Docker and Vagrant?\n------------------------------------------------\nAlthough JuNest sounds similar to a virtualisation/Linux container -like system,\nJuNest differentiate a lot between Docker and Vagrant.\nIn fact, the purpose of JuNest is **not** to\nbuild a complete isolated environment but, conversely, is the ability to run\nprograms as they were running natively from the host OS. Almost everything is shared\nbetween host OS and the JuNest sandbox (kernel, process subtree, network, mounting, etc)\nand only the root filesystem gets isolated\n(as the programs installed in JuNest need to reside elsewhere).\n\nThis allows interaction between processes belonging to both host OS and JuNest.\nFor instance, you can install `top` command in JuNest in order to monitor\nany processes belonging to the host OS.\n\nQuickstart\n==========\n\nSetup environment\n-----------------\n\nThe first operation required is to install the JuNest environment in the\nlocation of your choice (by default `~/.junest`, configurable via the environment variable `JUNEST_HOME`):\n\n```sh\njunest setup\n```\n\nThe script will download the image from the repository and will place it to the default directory `~/.junest`.\n\nAccess to environment\n---------------------\n\nBy default, JuNest run via the Linux namespaces (aka `ns`) as the backend program. To access via `ns` just type:\n\n```sh\njunest\n```\n\nAnother execution mode is via [Proot](https://wiki.archlinux.org/index.php/Proot):\n\n```sh\njunest proot [-f]\n```\n\nWhere `-f` allow fakeroot access to install/remove packages.\n\nThere are multiple backend programs, each with its own pros/cons.\nTo know more about the JuNest execution modes depending on the backend program\nused, see the [Usage](#usage) section below.\n\n\nHave fun!\n---------\n\nIf you are new on Arch Linux and you are not familiar with `pacman` package manager\nvisit the [pacman rosetta page](https://wiki.archlinux.org/index.php/Pacman_Rosetta).\n\nJuNest provides a modified version of `makepkg` in `/opt/makepkg/bin` that\nallows you to build packages from [AUR](https://aur.archlinux.org/) repository.\nRemember that in order to build packages, `base-devel` package group is required\nfirst:\n\n```sh\npacman -Sy --ignore sudo base-devel\n```\n\nInstallation\n============\n\n## Dependencies ##\nJuNest comes with a very short list of dependencies in order to be installed in most\nof GNU/Linux distributions.\nBefore installing JuNest be sure that all dependencies are properly installed in your system:\n\n- [bash (>=4.0)](https://www.gnu.org/software/bash/)\n- [GNU coreutils](https://www.gnu.org/software/coreutils/)\n\nThe minimum recommended Linux kernel of the host OS is 2.6.32 on x86 (64 bit)\nand ARM architectures. It is still possible to run JuNest on lower\n2.6.x host OS kernels but errors may appear, and some applications may\ncrash. For further information, read the [Troubleshooting](#troubleshooting)\nsection below.\n\n\n## Method one (Recommended) ##\nJust clone the JuNest repo somewhere (for example in ~/.local/share/junest):\n\n    git clone git://github.com/fsquillace/junest ~/.local/share/junest\n    export PATH=~/.local/share/junest/bin:$PATH\n\n### Installation using AUR (Arch Linux only) ###\nIf you are using an Arch Linux system you can, alternatively, install JuNest from the [AUR repository](https://aur.archlinux.org/packages/junest-git/).\nAfter installing junest will be located in `/opt/junest/`\n\n## Method two ##\nAlternatively, another installation method would be to directly download the JuNest image and place it to the default directory `~/.junest`:\n\n    ARCH=<one of "x86_64", "arm">\n    mkdir ~/.junest\n    curl https://s3-eu-west-1.amazonaws.com/junest-repo/junest/junest-${ARCH}.tar.gz | tar -xz -C ~/.junest\n    export PATH=~/.junest/opt/junest/bin:$PATH\n\nUsage\n=====\nThere are three different ways you can run JuNest depending on the backend program you decide to use.\n\nLinux namespaces based\n----------------------\nThe [Linux namespaces](http://man7.org/linux/man-pages/man7/namespaces.7.html)\nrepresents the default backend program for JuNest.\nThe requirements for having Linux namespaces working are:\n\n1. Kernel starting from Linux 3.8 allows unprivileged processes to create\nuser and mount namespaces.\n1. The Linux kernel distro must have the user namespace enabled.\n\nIn the last years, the majority of GNU/Linux distros have the user namespace\nenabled by default. This means that you do not need to have root privileges to\naccess to the JuNest environment via this method.\nThis\n[wiki](https://github.com/fsquillace/junest/wiki/Linux-distros-with-user-namespace-enabled-by-default)\nprovides the state of the user namespace on several GNU/Linux distros.\n\nIn order to run JuNest via Linux namespaces:\n\n- As fakeroot - Allow to install/remove packages: `junest ns` or `junest`\n\nPRoot based\n-----------\n[Proot](https://wiki.archlinux.org/index.php/Proot) represents a portable\nsolution that works well in most of GNU/Linux distros available.\nOne of the major drawbacks is the fact that Proot is not officially\nsupported anymore, therefore, Proot bugs may no longer be fixed.\n\nIn order to run JuNest via Proot:\n\n- As normal user - Allow to make basic operations: `junest proot`\n\n- As fakeroot - Allow to install/remove packages: `junest proot -f`\n\nChroot based\n------------\nThis solution suits only for privileged users. JuNest provides the possibility\nto run the environment via `chroot` program.\nIn particular, it uses a special program called `GRoot`, an enhanced `chroot`\nwrapper, that allows to bind mount directories specified by the user, such as\n`/proc`, `/sys`, `/dev`, `/tmp` and `$HOME`, before\nexecuting any programs inside the JuNest sandbox. In case the mounting will not\nwork, JuNest is even providing the possibility to run the environment directly via\nthe pure `chroot` command.\n\nIn order to run JuNest via `chroot` solutions:\n\n- As root via `GRoot` - Allow to have fully root privileges inside JuNest environment (you need to be root for executing this): `junest groot`\n\n- As root via `chroot` - Allow to have fully root privileges inside JuNest environment (you need to be root for executing this): `junest root`\n\nExecution modes comparison table\n----------------\nThe following table shows the capabilities that each backend program is able to perform:\n\n|     | QEMU | Root privileges required | Manage Official Packages | Manage AUR Packages | Portability | Support | User modes |\n| --- | ---- | ------------------------ | ------------------------ | ------------------- | ----------- | ------- | ---------- |\n| **Linux Namespaces** | NO | NO | YES | YES | Poor | YES | `fakeroot` only |\n| **Proot** | YES | NO | YES | YES | YES | Poor | Normal user and `fakeroot` |\n| **Chroot** | NO | YES | YES | YES | YES | YES | `root` only |\n\nAdvanced usage\n==============\n## Build image ##\nYou can build a new JuNest image from scratch by running the following command:\n\n```sh\njunest build [-n]\n```\n\nThe script will create a directory containing all the essentials\nfiles in order to make JuNest working properly (such as `pacman` and `proot`).\nThe option `-n` will skip the final validation tests if they are not needed.\nRemember that the script to build the image must run in an Arch Linux OS with\narch-install-scripts and the base-devel packages installed.\nTo change the build directory just use the `JUNEST_TEMPDIR` (by default /tmp).\n\nAfter creating the image `junest-x86_64.tar.gz` you can install it by running:\n\n```sh\njunest setup -i junest-x86_64.tar.gz\n```\n\nFor more details, you can also take a look at\n[junest-builder](https://github.com/fsquillace/junest-builder)\nthat contains the script and systemd service used for the automatic building\nof the JuNest image.\n\nRelated wiki page:\n\n- [How to build a JuNest image using QEMU](https://github.com/fsquillace/junest/wiki/How-to-build-a-JuNest-image-using-QEMU)\n\n## Run JuNest using a different architecture via QEMU ##\nThe following command will download the ARM JuNest image and will run QEMU in\ncase the host OS runs on `x86_64` architecture:\n\n```sh\n$> export JUNEST_HOME=~/.junest-arm\n$> junest setup -a arm\n$> junest proot -- uname -m\narmv7l\n```\n\n## Bind directories ##\nTo bind a host directory to a guest location, you can use proot arguments:\n\n```sh\njunest proot -b "-b /mnt/mydata:/home/user/mydata"\n```\n\nThe option `-b` to provide options to the backeng program will work with PRoot, Namespace and GRoot backend programs.\nCheck out the backend program options by passing `--help` option:\n\n```sh\njunest [u|g|p] -b "--help"\n```\n\n## Systemd integration ##\nAlthough JuNest has not been designed to be a complete container, it is even possible to\nvirtualize the process tree thanks to the [systemd container](https://wiki.archlinux.org/index.php/Systemd-nspawn).\nThe JuNest containter allows to run services inside the container that can be\nvisible from the host OS through the network.\nThe drawbacks of this are that the host OS must use systemd as a service manager,\nand the container can only be executed using root privileges.\n\nTo boot a JuNest container:\n\n```sh\nsudo systemd-nspawn -bD ~/.junest\n```\n\nRelated wiki page:\n\n- [How to run junest as a container](https://github.com/fsquillace/junest/wiki/How-to-run-JuNest-as-a-container)\n- [How to run services using Systemd](https://github.com/fsquillace/junest/wiki/How-to-run-services-using-Systemd)\n\nInternals\n=========\n\nThere are two main chroot jail used in JuNest.\nThe main one is [proot](https://wiki.archlinux.org/index.php/Proot) which\nallows unprivileged users to execute programs inside a sandbox and\nGRoot, a small and portable version of\n[arch-chroot](https://wiki.archlinux.org/index.php/Chroot) which is an\nenhanced chroot for privileged users that mounts the primary directories\n(i.e. `/proc`, `/sys`, `/dev` and `/run`) before executing any programs inside\nthe sandbox.\n\n## Automatic fallback to classic chroot ##\nIf GRoot fails for some reasons in the host system (i.e. it is not able to\nmount one of the directories),\nJuNest automatically tries to fallback to the classic chroot.\n\n## Automatic fallback for all the dependent host OS executables ##\nJuNest attempts first to run the executables in the host OS located in different\npositions (`/usr/bin`, `/bin`, `/usr/sbin` and `/sbin`).\nAs a fallback it tries to run the same executable if it is available in the JuNest\nenvironment.\n\n## Automatic building of the JuNest images ##\nThere is not periodic automation build of the JuNest images yet.\nThis was due to the difficulty to automate builds for arm architecture.\nThe JuNest image for the `x86_64` is built periodically every once every three\nmonths.\n\n## Static QEMU binaries ##\nThere are static QEMU binaries included in JuNest image that allows to run JuNest\nin a different architecture from the host system. They are located in `/opt/qemu`\ndirectory.\n\nTroubleshooting\n===============\n\nFor Arch Linux related FAQs take a look at the [General troubleshooting page](https://wiki.archlinux.org/index.php/General_troubleshooting).\n\n## Cannot use AUR repository ##\n\n> **Q**: Why do I get the following error when I try to install a package?\n\n    Cannot find the gzip binary required for compressing man and info pages.\n\n> **A**: JuNest comes with a very basic number of packages.\n> In order to install AUR packages you need to install the package group `base-devel` first\n> that contains all the essential packages for compiling from source code (such as gcc, make, patch, etc):\n\n    #> pacman -S --ignore sudo base-devel\n\n> Remember to ignore `sudo` as it conflicts with `sudo-fake` package.\n\n## No servers configured for repository ##\n\n> **Q**: Why I cannot install packages?\n\n    #> pacman -S lsof\n    Packages (1): lsof-4.88-2\n\n    Total Download Size:    0.09 MiB\n    Total Installed Size:   0.21 MiB\n\n    error: no servers configured for repository: core\n    error: no servers configured for repository: community\n    error: failed to commit transaction (no servers configured for repository)\n    Errors occurred, no packages were upgraded.\n\n> **A**: You need simply to update the mirrorlist file according to your location:\n\n    # Uncomment the repository line according to your location\n    #> nano /etc/pacman.d/mirrorlist\n    #> pacman -Syy\n\n## Locate the package for a given file ##\n\n> **Q**: How do I find which package a certain file belongs to?\n\n> **A**: JuNest is a really small distro, therefore you frequently need to find\n> the package name for a certain file. `pkgfile` is an extremely useful package\n> that allows you to detect the package of a given file.\n> For instance, if you want to find the package name for the command `getopt`:\n\n    #> pacman -S pkgfile\n    #> pkgfile --update\n    $> pkgfile getop\n    core/util-linux\n\n> Alternatively, you can use directly `pacman` command only. Take a look [here](https://wiki.archlinux.org/index.php/General_troubleshooting#Message:_%22error_while_loading_shared_libraries%22).\n\n## Kernel too old ##\n\n> **Q**: Why do I get the error: "FATAL: kernel too old"?\n\n> **A**: This is because the binaries from the precompiled package are\n> compiled for Linux kernel 2.6.32. When JuNest is started without further\n> options, it tries to run a shell from the JuNest chroot. The system sees that\n> the host OS kernel is too old and refuses to start the shell.\n\n> The solution is to present a higher "fake" kernel version to the JuNest\n> chroot. PRoot offers the *-k* option for this, and JuNest passes this option\n> on to PRoot when *-p* is prepended. For example, to fake a kernel version of\n> 3.10, issue the following command:\n\n    $> junest proot -b "-k 3.10"\n\n> As Arch Linux ships binaries for kernel version 2.6.32, the above error is\n> not unique to the precompiled package from JuNest. It will also appear when\n> trying to run binaries that were later installed in the JuNest chroot with\n> the `pacman` command.\n\n> In order to check if an executable inside JuNest chroot is compatible with\n> the kernel of the host OS just use the `file` command, for instance:\n\n    $> file ~/.junest/usr/bin/bash\n    ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked\n    (uses shared libs), for GNU/Linux 2.6.32,\n    BuildID[sha1]=ec37e49e7188ff4030052783e61b859113e18ca6, stripped\n\n> The output shows the minimum recommended Linux kernel version.\n\n## Kernel doesn\'t support private futexes ##\n\n> **Q**: Why do I get the warning: "kompat: this kernel doesn\'t support private\n> futexes and PRoot can\'t emulate them."?\n\n> **A**: This happens on older host OS kernels when the trick of showing a fake\n> kernel version to the JuNest chroot is applied (see above:\n> [Kernel too old](#kernel-too-old)).\n\n> The consequence of showing a fake kernel version to the JuNest chroot is that\n> in the background, PRoot needs to translate requests from applications in the\n> chroot to the old kernel of the host OS. Some of the newer kernel\n> functionality can be emulated, but private futexes cannot be translated.\n\n> Private Futexes were introduced in Linux kernel 2.6.22. Therefore, the above\n> problem likely appears on old Linux systems, for example RHEL5 systems, which\n> are based on Linux kernel 2.6.18. Many of the core tools like `which`, `man`,\n> or `vim` run without problems while others, especially XOrg-based programs,\n> are more likely to show the warning. These are also more likely to crash\n> unexpectedly.\n\n> Currently, there is no (easy) workaround for this. In order to be fully\n> compatible with kernels below 2.6.22, both the precompiled package from\n> JuNest and all software that is installed later needs to be compiled for this\n> kernel. Most likely this can only be achieved by building the needed software\n> packages from source, which kind of contradicts JuNest\'s distro-in-a-distro\n> philosophy.\n\n## SUID permissions ##\n> **Q**: Why I do not have permissions for ping?\n\n    $> ping www.google.com\n    ping: icmp open socket: Operation not permitted\n\n> **A**: The ping command uses *suid* permissions that allow to execute the command using\n> root privileges. The fakeroot mode is not able to execute a command set with suid,\n> and you may need to use root privileges. There are other few commands that\n> have *suid* permission, you can list the commands from your JuNest environment\n> with the following command:\n\n    $> find /usr/bin -perm +4000\n\n## No characters are visible on a graphic application ##\n\n> **Q**: Why I do not see any characters in the application I have installed?\n\n> **A**: This is probably because there are no\n> [fonts](https://wiki.archlinux.org/index.php/Font_Configuration) installed in\n> the system.\n\n> To quick fix this, you can just install a fonts package:\n\n    #> pacman -S gnu-free-fonts\n\n## Differences between filesystem and package ownership ##\n\n> **Q**: Why do I get warning when I install a package using root privileges?\n\n    #> pacman -S systat\n    ...\n    warning: directory ownership differs on /usr/\n    filesystem: 1000:100  package: 0:0\n    ...\n\n> **A**: In these cases the package installation went smoothly anyway.\n> This should happen every time you install package with root privileges\n> since JuNest will try to preserve the JuNest environment by assigning ownership\n> of the files to the real user.\n\n## Unprivileged user namespace disable at kernel compile time or kernel too old ##\n\n> **Q**: Why do I get this warning when I run JuNest via Linux namespaces?\n\n    $> junest ns\n    Unprivileged user namespace is disabled at kernel compile time or kernel too old (<3.8). Proceeding anyway...\n\n> **A**: This means that JuNest detected that the host OS either\n> does not have a newer kernel version or the unprivileged user namespace\n> is not enabled at kernel compile time.\n> JuNest does not stop the execution of the program but it attempts to run it\n> anyway. Try to use Proot as backend program in case is not possible to invoke namespaces.\n\n## Unprivileged user namespace disabled\n\n> **Q**: Why do I get this warning when I run JuNest via Linux namespaces?\n\n    $> junest ns\n    Unprivileged user namespace disabled. Root permissions are required to enable it: sudo sysctl kernel.unprivileged_userns_clone=1\n\n> **A**: This means that JuNest detected that the host OS either\n> does not have a newer Linux version or the user namespace is not enabled.\n> JuNest does not stop the execution of the program but it attempts to run it\n> anyway. If you have root permissions try to enable it, otherwise try to use\n> Proot as backend program.\n\nMore documentation\n==================\nThere are additional tutorials in the\n[JuNest wiki page](https://github.com/fsquillace/junest/wiki).\n\nContributing\n============\nContributions are welcome! You could help improving JuNest in the following ways:\n\n- [Reporting Bugs](CONTRIBUTING.md#reporting-bugs)\n- [Suggesting Enhancements](CONTRIBUTING.md#suggesting-enhancements)\n- [Writing Code](CONTRIBUTING.md#your-first-code-contribution)\n\nAuthors\n=======\nJuNest was originally created in late 2014 by [Filippo Squillace (feel.sqoox@gmail.com)](https://github.com/fsquillace).\n\nHere is a list of [**really appreciated contributors**](https://github.com/fsquillace/junest/graphs/contributors)!\n\n[![](https://sourcerer.io/fame/fsquillace/fsquillace/junest/images/0)](https://sourcerer.io/fame/fsquillace/fsquillace/junest/links/0)[![](https://sourcerer.io/fame/fsquillace/fsquillace/junest/images/1)](https://sourcerer.io/fame/fsquillace/fsquillace/junest/links/1)[![](https://sourcerer.io/fame/fsquillace/fsquillace/junest/images/2)](https://sourcerer.io/fame/fsquillace/fsquillace/junest/links/2)[![](https://sourcerer.io/fame/fsquillace/fsquillace/junest/images/3)](https://sourcerer.io/fame/fsquillace/fsquillace/junest/links/3)[![](https://sourcerer.io/fame/fsquillace/fsquillace/junest/images/4)](https://sourcerer.io/fame/fsquillace/fsquillace/junest/links/4)[![](https://sourcerer.io/fame/fsquillace/fsquillace/junest/images/5)](https://sourcerer.io/fame/fsquillace/fsquillace/junest/links/5)[![](https://sourcerer.io/fame/fsquillace/fsquillace/junest/images/6)](https://sourcerer.io/fame/fsquillace/fsquillace/junest/links/6)[![](https://sourcerer.io/fame/fsquillace/fsquillace/junest/images/7)](https://sourcerer.io/fame/fsquillace/fsquillace/junest/links/7)\n'