b'[![Gem Version](https://badge.fury.io/rb/one_gadget.svg)](https://badge.fury.io/rb/one_gadget)\n[![Build Status](https://travis-ci.org/david942j/one_gadget.svg?branch=master)](https://travis-ci.org/david942j/one_gadget)\n[![Downloads](http://ruby-gem-downloads-badge.herokuapp.com/one_gadget?type=total&color=orange)](https://rubygems.org/gems/one_gadget)\n[![Code Climate](https://codeclimate.com/github/david942j/one_gadget/badges/gpa.svg)](https://codeclimate.com/github/david942j/one_gadget)\n[![Issue Count](https://codeclimate.com/github/david942j/one_gadget/badges/issue_count.svg)](https://codeclimate.com/github/david942j/one_gadget)\n[![Test Coverage](https://codeclimate.com/github/david942j/one_gadget/badges/coverage.svg)](https://codeclimate.com/github/david942j/one_gadget/coverage)\n[![Inline docs](https://inch-ci.org/github/david942j/one_gadget.svg?branch=master)](https://inch-ci.org/github/david942j/one_gadget)\n[![Yard Docs](http://img.shields.io/badge/yard-docs-blue.svg)](https://www.rubydoc.info/github/david942j/one_gadget/)\n[![MIT License](https://img.shields.io/badge/license-MIT-blue.svg)](http://choosealicense.com/licenses/mit/)\n\n## OneGadget\n\nWhen playing ctf pwn challenges we usually need the one-gadget RCE (remote code execution),\nwhich leads to call `execve(\'/bin/sh\', NULL, NULL)`.\n\nThis gem provides such gadgets finder, no need to use objdump or IDA-pro every time like a fool :wink:\n\nTo use this tool, type `one_gadget /path/to/libc` in command line and enjoy the magic :laughing:\n\n## Installation\n\nAvailable on RubyGems.org!\n```bash\n$ gem install one_gadget\n```\n\nNote: requires ruby version >= 2.1.0, you can use `ruby --version` to check.\n\n## Supported Architectures\n\n- [x] i386\n- [x] amd64 (x86-64)\n- [x] aarch64 (ARMv8)\n\n## Implementation\n\nOneGadget uses symbolic execution to find the constraints of gadgets to be successful.\n\nThe article introducing how I develop this tool can be found [on my blog](https://david942j.blogspot.com/2017/02/project-one-gadget-in-glibc.html).\n\n## Usage\n\n### Command Line Interface\n\n```bash\n$ one_gadget\n# Usage: one_gadget <FILE|-b BuildID> [options]\n#     -b, --build-id BuildID           BuildID[sha1] of libc.\n#     -f, --[no-]force-file            Force search gadgets in file instead of build id first.\n#     -l, --level OUTPUT_LEVEL         The output level.\n#                                      OneGadget automatically selects gadgets with higher successful probability.\n#                                      Increase this level to ask OneGadget show more gadgets it found.\n#                                      Default: 0\n#     -n, --near FUNCTIONS/FILE        Order gadgets by their distance to the given functions or to the GOT functions of the given file.\n#     -r, --[no-]raw                   Output gadgets offset only, split with one space.\n#     -s, --script exploit-script      Run exploit script with all possible gadgets.\n#                                      The script will be run as \'exploit-script $offset\'.\n#         --info BuildID               Show version information given BuildID.\n#         --base BASE_ADDRESS          The base address of libc.\n#                                      Default: 0\n#         --version                    Current gem version.\n\n```\n\n```bash\n$ one_gadget /lib/x86_64-linux-gnu/libc.so.6\n# 0x4f2c5 execve("/bin/sh", rsp+0x40, environ)\n# constraints:\n#   rsp & 0xf == 0\n#   rcx == NULL\n#\n# 0x4f322 execve("/bin/sh", rsp+0x40, environ)\n# constraints:\n#   [rsp+0x40] == NULL\n#\n# 0x10a38c execve("/bin/sh", rsp+0x70, environ)\n# constraints:\n#   [rsp+0x70] == NULL\n\n```\n![x86_64](https://github.com/david942j/one_gadget/blob/master/examples/x86_64.png?raw=true)\n\n#### Given BuildID\n```bash\n$ one_gadget -b aad7dbe330f23ea00ca63daf793b766b51aceb5d\n# 0x45526 execve("/bin/sh", rsp+0x30, environ)\n# constraints:\n#   rax == NULL\n#\n# 0x4557a execve("/bin/sh", rsp+0x30, environ)\n# constraints:\n#   [rsp+0x30] == NULL\n#\n# 0xf1651 execve("/bin/sh", rsp+0x40, environ)\n# constraints:\n#   [rsp+0x40] == NULL\n#\n# 0xf24cb execve("/bin/sh", rsp+0x60, environ)\n# constraints:\n#   [rsp+0x60] == NULL\n\n```\n![build id](https://github.com/david942j/one_gadget/blob/master/examples/from_build_id.png?raw=true)\n\n#### Gadgets Near Functions\n\n##### Why\n\nConsider this scenario when exploiting:\n1. Able to write on GOT (Global Offset Table)\n2. Base address of libc is *unknown*\n\nIn this scenario you can choose to write two low-byte on a GOT entry with one-gadget\'s two low-byte.\nIf the function offset on GOT is close enough with the one-gadget,\nyou will have at least 1/16 chance of success.\n\n##### Usage\n\nReorder gadgets according to the distance of given functions.\n\n```bash\n$ one_gadget /lib/x86_64-linux-gnu/libc.so.6 --near exit,mkdir\n# [OneGadget] Gadgets near exit(0x43120):\n# 0x4f2c5 execve("/bin/sh", rsp+0x40, environ)\n# constraints:\n#   rsp & 0xf == 0\n#   rcx == NULL\n#\n# 0x4f322 execve("/bin/sh", rsp+0x40, environ)\n# constraints:\n#   [rsp+0x40] == NULL\n#\n# 0x10a38c execve("/bin/sh", rsp+0x70, environ)\n# constraints:\n#   [rsp+0x70] == NULL\n#\n# [OneGadget] Gadgets near mkdir(0x10fbb0):\n# 0x10a38c execve("/bin/sh", rsp+0x70, environ)\n# constraints:\n#   [rsp+0x70] == NULL\n#\n# 0x4f322 execve("/bin/sh", rsp+0x40, environ)\n# constraints:\n#   [rsp+0x40] == NULL\n#\n# 0x4f2c5 execve("/bin/sh", rsp+0x40, environ)\n# constraints:\n#   rsp & 0xf == 0\n#   rcx == NULL\n#\n\n```\n![near](https://github.com/david942j/one_gadget/blob/master/examples/near.png?raw=true)\n\nRegular expression is acceptable.\n```bash\n$ one_gadget /lib/x86_64-linux-gnu/libc.so.6 --near \'write.*\' --raw\n# [OneGadget] Gadgets near writev(0x1166a0):\n# 1090444 324386 324293\n#\n# [OneGadget] Gadgets near write(0x110140):\n# 1090444 324386 324293\n#\n\n```\n\nPass an ELF file as the argument, OneGadget will take all GOT functions for processing.\n```bash\n$ one_gadget /lib/x86_64-linux-gnu/libc.so.6 --near spec/data/test_near_file.elf --raw\n# [OneGadget] Gadgets near exit(0x43120):\n# 324293 324386 1090444\n#\n# [OneGadget] Gadgets near puts(0x809c0):\n# 324386 324293 1090444\n#\n# [OneGadget] Gadgets near printf(0x64e80):\n# 324386 324293 1090444\n#\n# [OneGadget] Gadgets near strlen(0x9dc70):\n# 324386 324293 1090444\n#\n# [OneGadget] Gadgets near __cxa_finalize(0x43520):\n# 324293 324386 1090444\n#\n# [OneGadget] Gadgets near __libc_start_main(0x21ab0):\n# 324293 324386 1090444\n#\n\n```\n\n#### Show All Gadgets\n\nSometimes `one_gadget` finds too many gadgets to show them in one screen,\nby default gadgets would be filtered automatically *according to the difficulty of constraints*.\n\nUse option `--level 1` to show all gadgets found instead of only those with higher probabilities.\n\n```bash\n$ one_gadget /lib/x86_64-linux-gnu/libc.so.6 --level 1\n# 0x4f2c5 execve("/bin/sh", rsp+0x40, environ)\n# constraints:\n#   rsp & 0xf == 0\n#   rcx == NULL\n#\n# 0x4f322 execve("/bin/sh", rsp+0x40, environ)\n# constraints:\n#   [rsp+0x40] == NULL\n#\n# 0xe569f execve("/bin/sh", r14, r12)\n# constraints:\n#   [r14] == NULL || r14 == NULL\n#   [r12] == NULL || r12 == NULL\n#\n# 0xe5858 execve("/bin/sh", [rbp-0x88], [rbp-0x70])\n# constraints:\n#   [[rbp-0x88]] == NULL || [rbp-0x88] == NULL\n#   [[rbp-0x70]] == NULL || [rbp-0x70] == NULL\n#\n# 0xe585f execve("/bin/sh", r10, [rbp-0x70])\n# constraints:\n#   [r10] == NULL || r10 == NULL\n#   [[rbp-0x70]] == NULL || [rbp-0x70] == NULL\n#\n# 0xe5863 execve("/bin/sh", r10, rdx)\n# constraints:\n#   [r10] == NULL || r10 == NULL\n#   [rdx] == NULL || rdx == NULL\n#\n# 0x10a38c execve("/bin/sh", rsp+0x70, environ)\n# constraints:\n#   [rsp+0x70] == NULL\n#\n# 0x10a398 execve("/bin/sh", rsi, [rax])\n# constraints:\n#   [rsi] == NULL || rsi == NULL\n#   [[rax]] == NULL || [rax] == NULL\n\n```\n\n#### Other Architectures\n\n##### i386\n```bash\n$ one_gadget /lib32/libc.so.6\n# 0x3cbea execve("/bin/sh", esp+0x34, environ)\n# constraints:\n#   esi is the GOT address of libc\n#   [esp+0x34] == NULL\n#\n# 0x3cbec execve("/bin/sh", esp+0x38, environ)\n# constraints:\n#   esi is the GOT address of libc\n#   [esp+0x38] == NULL\n#\n# 0x3cbf0 execve("/bin/sh", esp+0x3c, environ)\n# constraints:\n#   esi is the GOT address of libc\n#   [esp+0x3c] == NULL\n#\n# 0x3cbf7 execve("/bin/sh", esp+0x40, environ)\n# constraints:\n#   esi is the GOT address of libc\n#   [esp+0x40] == NULL\n#\n# 0x6729f execl("/bin/sh", eax)\n# constraints:\n#   esi is the GOT address of libc\n#   eax == NULL\n#\n# 0x672a0 execl("/bin/sh", [esp])\n# constraints:\n#   esi is the GOT address of libc\n#   [esp] == NULL\n#\n# 0x13573e execl("/bin/sh", eax)\n# constraints:\n#   ebx is the GOT address of libc\n#   eax == NULL\n#\n# 0x13573f execl("/bin/sh", [esp])\n# constraints:\n#   ebx is the GOT address of libc\n#   [esp] == NULL\n\n```\n![i386](https://github.com/david942j/one_gadget/blob/master/examples/i386.png?raw=true)\n\n##### AArch64\n```bash\n$ one_gadget spec/data/aarch64-libc-2.27.so\n# 0x3f160 execve("/bin/sh", sp+0x70, environ)\n# constraints:\n#   address x20+0x338 is writable\n#   x3 == NULL\n#\n# 0x3f184 execve("/bin/sh", sp+0x70, environ)\n# constraints:\n#   addresses x19+0x4, x20+0x338 are writable\n#   [sp+0x70] == NULL\n#\n# 0x3f1a8 execve("/bin/sh", x21, environ)\n# constraints:\n#   addresses x19+0x4, x20+0x338 are writable\n#   [x21] == NULL || x21 == NULL\n#\n# 0x63e90 execl("/bin/sh", x1)\n# constraints:\n#   x1 == NULL\n\n```\n![aarch64](https://github.com/david942j/one_gadget/blob/master/examples/aarch64.png?raw=true)\n\n#### Combine with Script\nPass your exploit script as `one_gadget`\'s arguments, it can\ntry all gadgets one by one, so you don\'t need to try every possible gadgets manually.\n\n```bash\n$ one_gadget ./spec/data/libc-2.19.so -s \'echo "offset ->"\'\n```\n\n![--script](https://github.com/david942j/one_gadget/blob/master/examples/script.png?raw=true)\n\n### In Ruby Scripts\n```ruby\nrequire \'one_gadget\'\nOneGadget.gadgets(file: \'/lib/x86_64-linux-gnu/libc.so.6\')\n#=> [324293, 324386, 1090444]\n\n# or in shorter way\none_gadget(\'/lib/x86_64-linux-gnu/libc.so.6\', level: 1)\n#=> [324293, 324386, 939679, 940120, 940127, 940131, 1090444, 1090456]\n\n# from build id\none_gadget(\'b417c0ba7cc5cf06d1d1bed6652cedb9253c60d0\')\n#=> [324293, 324386, 1090444]\n\n```\n\n### To Python Lovers\n```python\nimport subprocess\ndef one_gadget(filename):\n  return map(int, subprocess.check_output([\'one_gadget\', \'--raw\', filename]).split(\' \'))\n\none_gadget(\'/lib/x86_64-linux-gnu/libc.so.6\')\n#=> [324293, 324386, 1090444]\n\n```\n\n## Make OneGadget Better\nAny suggestion or feature request is welcome! Feel free to send a pull request.\n\nPlease let me know if you find any libc that make OneGadget fail to find gadgets.\nAnd, if you like this work, I\'ll be happy to be [starred](https://github.com/david942j/one_gadget/stargazers) :grimacing:\n'