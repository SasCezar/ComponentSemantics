b"# sh\n\n[![GoDoc](https://godoc.org/mvdan.cc/sh?status.svg)](https://godoc.org/mvdan.cc/sh)\n[![fuzzit](https://app.fuzzit.dev/badge?org_id=mvdan)](https://fuzzit.dev)\n\nA shell parser, formatter, and interpreter. Supports [POSIX Shell], [Bash], and\n[mksh]. Requires Go 1.12 or later.\n\n### Quick start\n\nTo parse shell scripts, inspect them, and print them out, see the [syntax\nexamples](https://godoc.org/mvdan.cc/sh/syntax#pkg-examples).\n\nFor high-level operations like performing shell expansions on strings, see the\n[shell examples](https://godoc.org/mvdan.cc/sh/shell#pkg-examples).\n\n### shfmt\n\nGo 1.11 and later can download the latest v2 stable release:\n\n\tcd $(mktemp -d); go mod init tmp; go get mvdan.cc/sh/cmd/shfmt\n\nThe latest v3 pre-release can be downloaded in a similar manner, using the `/v3`\nmodule:\n\n\tcd $(mktemp -d); go mod init tmp; go get mvdan.cc/sh/v3/cmd/shfmt\n\nFinally, any older release can be built with their respective older Go versions\nby manually cloning, checking out a tag, and running `go build ./cmd/shfmt`.\n\n`shfmt` formats shell programs. It can use tabs or any number of spaces to\nindent. See [canonical.sh](syntax/canonical.sh) for a quick look at its default\nstyle.\n\nYou can feed it standard input, any number of files or any number of directories\nto recurse into. When recursing, it will operate on `.sh` and `.bash` files and\nignore files starting with a period. It will also operate on files with no\nextension and a shell shebang.\n\n\tshfmt -l -w script.sh\n\nTypically, CI builds should use the command below, to error if any shell scripts\nin a project don't adhere to the format:\n\n\tshfmt -d .\n\nUse `-i N` to indent with a number of spaces instead of tabs. There are other\nformatting options - see `shfmt -h`. For example, to get the formatting\nappropriate for [Google's Style][google-style] guide, use `shfmt -i 2 -ci`.\n\nIf any [EditorConfig] files are found, they will be used to apply formatting\noptions. If any parser or printer flags are given to the tool, no EditorConfig\nfiles will be used. A default like `-i=0` can be used for this purpose.\n\nAn example of the options available:\n\n```editorconfig\n[*.sh]\n# like -i=4\nindent_style = space\nindent_size = 4\n\nshell_variant      = posix # like -ln=posix\nbinary_next_line   = true  # like -bn\nswitch_case_indent = true  # like -ci\nspace_redirects    = true  # like -sr\nkeep_padding       = true  # like -kp\n```\n\nPackages are available on [Arch], [CRUX], [Docker], [FreeBSD], [Homebrew],\n[NixOS], [Scoop], [Snapcraft], and [Void].\n\n#### Replacing `bash -n`\n\n`bash -n` can be useful to check for syntax errors in shell scripts. However,\n`shfmt >/dev/null` can do a better job as it checks for invalid UTF-8 and does\nall parsing statically, including checking POSIX Shell validity:\n\n```sh\n$ echo '${foo:1 2}' | bash -n\n$ echo '${foo:1 2}' | shfmt\n1:9: not a valid arithmetic operator: 2\n$ echo 'foo=(1 2)' | bash --posix -n\n$ echo 'foo=(1 2)' | shfmt -p\n1:5: arrays are a bash feature\n```\n\n### gosh\n\n\tcd $(mktemp -d); go mod init tmp; go get mvdan.cc/sh/v3/cmd/gosh\n\nExperimental shell that uses `interp`. Work in progress, so don't expect\nstability just yet.\n\n### Fuzzing\n\nThis project makes use of [go-fuzz] to find crashes and hangs in both the parser\nand the printer. To get started, run:\n\n\tgit checkout fuzz\n\t./fuzz\n\n### Caveats\n\n* When indexing Bash associative arrays, always use quotes. The static parser\n  will otherwise have to assume that the index is an arithmetic expression.\n\n```sh\n$ echo '${array[spaced string]}' | shfmt\n1:16: not a valid arithmetic operator: string\n$ echo '${array[dash-string]}' | shfmt\n${array[dash - string]}\n```\n\n* `$((` and `((` ambiguity is not supported. Backtracking would complicate the\n  parser and make streaming support via `io.Reader` impossible. The POSIX spec\n  recommends to [space the operands][posix-ambiguity] if `$( (` is meant.\n\n```sh\n$ echo '$((foo); (bar))' | shfmt\n1:1: reached ) without matching $(( with ))\n```\n\n* Some builtins like `export` and `let` are parsed as keywords. This is to allow\n  statically parsing them and building their syntax tree, as opposed to just\n  keeping the arguments as a slice of arguments.\n\n### JavaScript\n\nA subset of the Go packages are available as an npm package called [mvdan-sh].\nSee the [_js](_js) directory for more information.\n\n### Docker\n\nTo build a Docker image, checkout a specific version of the repository and run:\n\n\tdocker build -t my:tag -f cmd/shfmt/Dockerfile .\n\n### Related projects\n\n* Alternative docker images - by [jamesmstone][dockerized-jamesmstone], [PeterDaveHello][dockerized-peterdavehello]\n* [format-shell] - Atom plugin for `shfmt`\n* [micro] - Editor with a built-in plugin for `shfmt`\n* [modd] - A developer tool that responds to filesystem changes, using `sh`\n* [shell-format] - VS Code plugin for `shfmt`\n* [vim-shfmt] - Vim plugin for `shfmt`\n\n[arch]: https://www.archlinux.org/packages/community/x86_64/shfmt/\n[bash]: https://www.gnu.org/software/bash/\n[crux]: https://github.com/6c37/crux-ports-git/tree/HEAD/shfmt\n[docker]: https://hub.docker.com/r/mvdan/shfmt/\n[dockerized-jamesmstone]: https://hub.docker.com/r/jamesmstone/shfmt/\n[dockerized-peterdavehello]: https://github.com/PeterDaveHello/dockerized-shfmt/\n[editorconfig]: https://editorconfig.org/\n[examples]: https://godoc.org/mvdan.cc/sh/syntax#pkg-examples\n[format-shell]: https://atom.io/packages/format-shell\n[freebsd]: https://github.com/freebsd/freebsd-ports/tree/HEAD/devel/shfmt\n[go-fuzz]: https://github.com/dvyukov/go-fuzz\n[google-style]: https://google.github.io/styleguide/shell.xml\n[homebrew]: https://github.com/Homebrew/homebrew-core/blob/HEAD/Formula/shfmt.rb\n[micro]: https://micro-editor.github.io/\n[mksh]: https://www.mirbsd.org/mksh.htm\n[modd]: https://github.com/cortesi/modd\n[mvdan-sh]: https://www.npmjs.com/package/mvdan-sh\n[nixos]: https://github.com/NixOS/nixpkgs/blob/HEAD/pkgs/tools/text/shfmt/default.nix\n[posix shell]: https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html\n[posix-ambiguity]: https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_06_03\n[shell-format]: https://marketplace.visualstudio.com/items?itemName=foxundermoon.shell-format\n[scoop]: https://github.com/lukesampson/scoop/blob/HEAD/bucket/shfmt.json\n[snapcraft]: https://snapcraft.io/shfmt\n[vim-shfmt]: https://github.com/z0mbix/vim-shfmt\n[void]: https://github.com/voidlinux/void-packages/blob/HEAD/srcpkgs/shfmt/template\n"