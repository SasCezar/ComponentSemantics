b'# Bats-core: Bash Automated Testing System (2018)\n\n[![Latest release](https://img.shields.io/github/release/bats-core/bats-core.svg)](https://github.com/bats-core/bats-core/releases/latest)\n[![npm package](https://img.shields.io/npm/v/bats.svg)](https://www.npmjs.com/package/bats)\n[![License](https://img.shields.io/github/license/bats-core/bats-core.svg)](https://github.com/bats-core/bats-core/blob/master/LICENSE.md)\n[![Continuous integration status for Linux and macOS](https://img.shields.io/travis/bats-core/bats-core/master.svg?label=travis%20build)](https://travis-ci.org/bats-core/bats-core)\n[![Continuous integration status for Windows](https://img.shields.io/appveyor/ci/bats-core/bats-core/master.svg?label=appveyor%20build)](https://ci.appveyor.com/project/bats-core/bats-core)\n\n[![Join the chat in bats-core/bats-core on gitter](https://badges.gitter.im/bats-core/bats-core.svg)][gitter]\n\nBats is a [TAP][]-compliant testing framework for Bash.  It provides a simple\nway to verify that the UNIX programs you write behave as expected.\n\n[TAP]: https://testanything.org\n\nA Bats test file is a Bash script with special syntax for defining test cases.\nUnder the hood, each test case is just a function with a description.\n\n```bash\n#!/usr/bin/env bats\n\n@test "addition using bc" {\n  result="$(echo 2+2 | bc)"\n  [ "$result" -eq 4 ]\n}\n\n@test "addition using dc" {\n  result="$(echo 2 2+p | dc)"\n  [ "$result" -eq 4 ]\n}\n```\n\nBats is most useful when testing software written in Bash, but you can use it to\ntest any UNIX program.\n\nTest cases consist of standard shell commands. Bats makes use of Bash\'s\n`errexit` (`set -e`) option when running test cases. If every command in the\ntest case exits with a `0` status code (success), the test passes. In this way,\neach line is an assertion of truth.\n\n## Table of contents\n\n<!-- toc -->\n\n- [Installation](#installation)\n  * [Supported Bash versions](#supported-bash-versions)\n  * [Homebrew](#homebrew)\n  * [npm](#npm)\n  * [Installing Bats from source](#installing-bats-from-source)\n  * [Installing Bats from source onto Windows Git Bash](#installing-bats-from-source-onto-windows-git-bash)\n  * [Running Bats in Docker](#running-bats-in-docker)\n    + [Building a Docker image](#building-a-docker-image)\n- [Usage](#usage)\n- [Writing tests](#writing-tests)\n  * [`run`: Test other commands](#run-test-other-commands)\n  * [`load`: Share common code](#load-share-common-code)\n  * [`skip`: Easily skip tests](#skip-easily-skip-tests)\n  * [`setup` and `teardown`: Pre- and post-test hooks](#setup-and-teardown-pre--and-post-test-hooks)\n  * [Code outside of test cases](#code-outside-of-test-cases)\n  * [File descriptor 3 (read this if Bats hangs)](#file-descriptor-3-read-this-if-bats-hangs)\n  * [Printing to the terminal](#printing-to-the-terminal)\n  * [Special variables](#special-variables)\n- [Testing](#testing)\n- [Support](#support)\n- [Contributing](#contributing)\n- [Contact](#contact)\n- [Version history](#version-history)\n- [Background](#background)\n  * [What\'s the plan and why?](#whats-the-plan-and-why)\n  * [Why was this fork created?](#why-was-this-fork-created)\n- [Copyright](#copyright)\n\n<!-- tocstop -->\n\n## Installation\n\n### Supported Bash versions\n\nThe following is a list of Bash versions that are currently supported by Bats.\nThis list is composed of platforms that Bats has been tested on and is known to\nwork on without issues.\n\n- Bash versions:\n  - Everything from `3.2.57(1)` and higher (macOS\'s highest version)\n\n- Operating systems:\n  - Arch Linux\n  - Alpine Linux\n  - Ubuntu Linux\n  - FreeBSD `10.x` and `11.x`\n  - macOS\n  - Windows 10\n\n- Latest version for the following Windows platforms:\n  - Git for Windows Bash (MSYS2 based)\n  - Windows Subsystem for Linux\n  - MSYS2\n  - Cygwin\n\n### Homebrew\n\nOn macOS, you can install [Homebrew](https://brew.sh/) if you haven\'t already,\nthen run:\n\n```bash\n$ brew install bats-core\n```\n\n### npm\n\nYou can install the [Bats npm package](https://www.npmjs.com/package/bats) via:\n\n```\n# To install globally:\n$ npm install -g bats\n\n# To install into your project and save it as one of the "devDependencies" in\n# your package.json:\n$ npm install --save-dev bats\n```\n\n### Installing Bats from source\n\nCheck out a copy of the Bats repository. Then, either add the Bats `bin`\ndirectory to your `$PATH`, or run the provided `install.sh` command with the\nlocation to the prefix in which you want to install Bats. For example, to\ninstall Bats into `/usr/local`,\n\n    $ git clone https://github.com/bats-core/bats-core.git\n    $ cd bats-core\n    $ ./install.sh /usr/local\n\n__Note:__ You may need to run `install.sh` with `sudo` if you do not have\npermission to write to the installation prefix.\n\n### Installing Bats from source onto Windows Git Bash\n\nCheck out a copy of the Bats repository and install it to `$HOME`. This\nwill place the `bats` executable in `$HOME/bin`, which should already be\nin `$PATH`.\n\n    $ git clone https://github.com/bats-core/bats-core.git\n    $ cd bats-core\n    $ ./install.sh $HOME\n\n### Running Bats in Docker\n\nThere is an official image on the Docker Hub:\n\n    $ docker run -it bats/bats:latest --version\n\n#### Building a Docker image\n\nCheck out a copy of the Bats repository, then build a container image:\n\n    $ git clone https://github.com/bats-core/bats-core.git\n    $ cd bats-core\n    $ docker build --tag bats/bats:latest .\n\nThis creates a local Docker image called `bats/bats:latest` based on [Alpine\nLinux](https://github.com/gliderlabs/docker-alpine/blob/master/docs/usage.md) \n(to push to private registries, tag it with another organisation, e.g. \n`my-org/bats:latest`).\n\nTo run Bats\' internal test suite (which is in the container image at\n`/opt/bats/test`):\n\n    $ docker run -it bats/bats:latest /opt/bats/test\n\nTo run a test suite from your local machine, mount in a volume and direct Bats\nto its path inside the container:\n\n    $ docker run -it -v "$(pwd):/code" bats/bats:latest /code/test\n\nThis is a minimal Docker image. If more tools are required this can be used as a \nbase image in a Dockerfile using `FROM <Docker image>`.  In the future there may \nbe images based on Debian, and/or with more tools installed (`curl` and `openssl`,\nfor example). If you require a specific configuration please search and +1 an\nissue or [raise a new issue](https://github.com/bats-core/bats-core/issues).\n\nFurther usage examples are in [the wiki](https://github.com/bats-core/bats-core/wiki/Docker-Usage-Examples).\n\n## Usage\n\nBats comes with two manual pages. After installation you can view them with `man\n1 bats` (usage manual) and `man 7 bats` (writing test files manual). Also, you\ncan view the available command line options that Bats supports by calling Bats\nwith the `-h` or `--help` options. These are the options that Bats currently\nsupports:\n\n```\nBats x.y.z\nUsage: bats [-cr] [-f <regex>] [-j <jobs>] [-p | -t] <test>...\n       bats [-h | -v]\n\n  <test> is the path to a Bats test file, or the path to a directory\n  containing Bats test files (ending with ".bats").\n\n  -c, --count      Count the number of test cases without running any tests\n  -f, --filter     Filter test cases by names matching the regular expression\n  -h, --help       Display this help message\n  -j, --jobs       Number of parallel jobs to run (requires GNU parallel)\n  -p, --pretty     Show results in pretty format (default for terminals)\n  -r, --recursive  Include tests in subdirectories\n  -t, --tap        Show results in TAP format\n  -v, --version    Display the version number\n\n  For more information, see https://github.com/bats-core/bats-core\n```\n> **Mac OSX/Darwin Warning:** If you\'re executing bats directly (`bin/bats`) you need to `brew install coreutils` to obtain `greadlink`. Darwin\'s readlink does not include the -f option. This may be fixed [by this PR](https://github.com/bats-core/bats-core/pull/217), which needs reviewers.\n\nTo run your tests, invoke the `bats` interpreter with one or more paths to test\nfiles ending with the `.bats` extension, or paths to directories containing test\nfiles. (`bats` will only execute `.bats` files at the top level of each\ndirectory; it will not recurse unless you specify the `-r` flag.)\n\nTest cases from each file are run sequentially and in isolation. If all the test\ncases pass, `bats` exits with a `0` status code. If there are any failures,\n`bats` exits with a `1` status code.\n\nWhen you run Bats from a terminal, you\'ll see output as each test is performed,\nwith a check-mark next to the test\'s name if it passes or an "X" if it fails.\n\n    $ bats addition.bats\n     \xe2\x9c\x93 addition using bc\n     \xe2\x9c\x93 addition using dc\n\n    2 tests, 0 failures\n\nIf Bats is not connected to a terminal\xe2\x80\x94in other words, if you run it from a\ncontinuous integration system, or redirect its output to a file\xe2\x80\x94the results are\ndisplayed in human-readable, machine-parsable [TAP format][TAP].\n\nYou can force TAP output from a terminal by invoking Bats with the `--tap`\noption.\n\n    $ bats --tap addition.bats\n    1..2\n    ok 1 addition using bc\n    ok 2 addition using dc\n\n### Parallel Execution\n\nBy default, Bats will execute your tests serially. However, Bats supports\nparallel execution of tests (provided you have [GNU parallel][gnu-parallel] or\na compatible replacement installed) using the `--jobs` parameter. This can\nresult in your tests completing faster (depending on your tests and the testing\nhardware).\n\nOrdering of parallised tests is not guaranteed, so this mode may break suites\nwith dependencies between tests (or tests that write to shared locations). When\nenabling `--jobs` for the first time be sure to re-run bats multiple times to\nidentify any inter-test dependencies or non-deterministic test behaviour.\n\n[gnu-parallel]: https://www.gnu.org/software/parallel/\n\n## Writing tests\n\nEach Bats test file is evaluated _n+1_ times, where _n_ is the number of\ntest cases in the file. The first run counts the number of test cases,\nthen iterates over the test cases and executes each one in its own\nprocess.\n\nFor more details about how Bats evaluates test files, see [Bats Evaluation\nProcess][bats-eval] on the wiki.\n\n[bats-eval]: https://github.com/bats-core/bats-core/wiki/Bats-Evaluation-Process\n\n### `run`: Test other commands\n\nMany Bats tests need to run a command and then make assertions about its exit\nstatus and output. Bats includes a `run` helper that invokes its arguments as a\ncommand, saves the exit status and output into special global variables, and\nthen returns with a `0` status code so you can continue to make assertions in\nyour test case.\n\nFor example, let\'s say you\'re testing that the `foo` command, when passed a\nnonexistent filename, exits with a `1` status code and prints an error message.\n\n```bash\n@test "invoking foo with a nonexistent file prints an error" {\n  run foo nonexistent_filename\n  [ "$status" -eq 1 ]\n  [ "$output" = "foo: no such file \'nonexistent_filename\'" ]\n}\n```\n\nThe `$status` variable contains the status code of the command, and the\n`$output` variable contains the combined contents of the command\'s standard\noutput and standard error streams.\n\nA third special variable, the `$lines` array, is available for easily accessing\nindividual lines of output. For example, if you want to test that invoking `foo`\nwithout any arguments prints usage information on the first line:\n\n```bash\n@test "invoking foo without arguments prints usage" {\n  run foo\n  [ "$status" -eq 1 ]\n  [ "${lines[0]}" = "usage: foo <filename>" ]\n}\n```\n\n__Note:__ The `run` helper executes its argument(s) in a subshell, so if\nwriting tests against environmental side-effects like a variable\'s value\nbeing changed, these changes will not persist after `run` completes.\n\n### `load`: Share common code\n\nYou may want to share common code across multiple test files. Bats includes a\nconvenient `load` command for sourcing a Bash source file relative to the\nlocation of the current test file. For example, if you have a Bats test in\n`test/foo.bats`, the command\n\n```bash\nload test_helper\n```\n\nwill source the script `test/test_helper.bash` in your test file. This can be\nuseful for sharing functions to set up your environment or load fixtures.\n\nIf you want to source a file using an absolute file path then the file extension\nmust be included. For example\n\n```bash\nload /test_helpers/test_helper.bash\n```\n\n### `skip`: Easily skip tests\n\nTests can be skipped by using the `skip` command at the point in a test you wish\nto skip.\n\n```bash\n@test "A test I don\'t want to execute for now" {\n  skip\n  run foo\n  [ "$status" -eq 0 ]\n}\n```\n\nOptionally, you may include a reason for skipping:\n\n```bash\n@test "A test I don\'t want to execute for now" {\n  skip "This command will return zero soon, but not now"\n  run foo\n  [ "$status" -eq 0 ]\n}\n```\n\nOr you can skip conditionally:\n\n```bash\n@test "A test which should run" {\n  if [ foo != bar ]; then\n    skip "foo isn\'t bar"\n  fi\n\n  run foo\n  [ "$status" -eq 0 ]\n}\n```\n\n__Note:__ `setup` and `teardown` hooks still run for skipped tests.\n\n### `setup` and `teardown`: Pre- and post-test hooks\n\nYou can define special `setup` and `teardown` functions, which run before and\nafter each test case, respectively. Use these to load fixtures, set up your\nenvironment, and clean up when you\'re done.\n\n### Code outside of test cases\n\nYou can include code in your test file outside of `@test` functions.  For\nexample, this may be useful if you want to check for dependencies and fail\nimmediately if they\'re not present. However, any output that you print in code\noutside of `@test`, `setup` or `teardown` functions must be redirected to\n`stderr` (`>&2`). Otherwise, the output may cause Bats to fail by polluting the\nTAP stream on `stdout`.\n\n### File descriptor 3 (read this if Bats hangs)\n\nBats makes a separation between output from the code under test and output that\nforms the TAP stream (which is produced by Bats internals). This is done in\norder to produce TAP-compliant output. In the [Printing to the\nterminal](#printing-to-the-terminal) section, there are details on how to use\nfile descriptor 3 to print custom text properly.\n\nA side effect of using file descriptor 3 is that, under some circumstances, it\ncan cause Bats to block and execution to seem dead without reason. This can\nhappen if a child process is spawned in the background from a test. In this\ncase, the child process will inherit file descriptor 3. Bats, as the parent\nprocess, will wait for the file descriptor to be closed by the child process\nbefore continuing execution. If the child process takes a lot of time to\ncomplete (eg if the child process is a `sleep 100` command or a background\nservice that will run indefinitely), Bats will be similarly blocked for the same\namount of time.\n\n**To prevent this from happening, close FD 3 explicitly when running any command\nthat may launch long-running child processes**, e.g. `command_name 3>&-` .\n\n### Printing to the terminal\n\nBats produces output compliant with [version 12 of the TAP protocol][TAP]. The\nproduced TAP stream is by default piped to a pretty formatter for human\nconsumption, but if Bats is called with the `-t` flag, then the TAP stream is\ndirectly printed to the console.\n\nThis has implications if you try to print custom text to the terminal. As\nmentioned in [File descriptor 3](#file-descriptor-3), bats provides a special\nfile descriptor, `&3`, that you should use to print your custom text. Here are\nsome detailed guidelines to refer to:\n\n- Printing **from within a test function**:\n  - To have text printed from within a test function you need to redirect the\n    output to file descriptor 3, eg `echo \'text\' >&3`. This output will become\n    part of the TAP stream. You are encouraged to prepend text printed this way\n    with a hash (eg `echo \'# text\' >&3`) in order to produce 100% TAP compliant\n    output. Otherwise, depending on the 3rd-party tools you use to analyze the\n    TAP stream, you can encounter unexpected behavior or errors.\n\n  - The pretty formatter that Bats uses by default to process the TAP stream\n    will filter out and not print text output to file descriptor 3.\n\n  - Text that is output directly to stdout or stderr (file descriptor 1 or 2),\n    ie `echo \'text\'` is considered part of the test function output and is\n    printed only on test failures for diagnostic purposes, regardless of the\n    formatter used (TAP or pretty).\n\n- Printing **from within the `setup` or `teardown` functions**: The same hold\n  true as for printing with test functions.\n\n- Printing **outside test or `setup`/`teardown` functions**:\n  - Regardless of where text is redirected to (stdout, stderr or file descriptor\n    3) text is immediately visible in the terminal.\n\n  - Text printed in such a way, will disable pretty formatting. Also, it will\n    make output non-compliant with the TAP spec. The reason for this is that\n    each test file is evaluated n+1 times (as metioned\n    [earlier](#writing-tests)). The first run will cause such output to be\n    produced before the [_plan line_][tap-plan] is printed, contrary to the spec\n    that requires the _plan line_ to be either the first or the last line of the\n    output.\n\n  - Due to internal pipes/redirects, output to stderr is always printed first.\n\n[tap-plan]: https://testanything.org/tap-specification.html#the-plan\n\n### Special variables\n\nThere are several global variables you can use to introspect on Bats tests:\n\n* `$BATS_TEST_FILENAME` is the fully expanded path to the Bats test file.\n* `$BATS_TEST_DIRNAME` is the directory in which the Bats test file is located.\n* `$BATS_TEST_NAMES` is an array of function names for each test case.\n* `$BATS_TEST_NAME` is the name of the function containing the current test\n  case.\n* `$BATS_TEST_DESCRIPTION` is the description of the current test case.\n* `$BATS_TEST_NUMBER` is the (1-based) index of the current test case in the\n  test file.\n* `$BATS_TMPDIR` is the location to a directory that may be used to store\n  temporary files.\n\n## Testing\n\n```sh\nbin/bats --tap test\n```\nSee also the [CI](.travis.yml) settings for the current test environment and\nscripts.\n\n## Support\n\nThe Bats source code repository is [hosted on\nGitHub](https://github.com/bats-core/bats-core). There you can file bugs on the\nissue tracker or submit tested pull requests for review.\n\nFor real-world examples from open-source projects using Bats, see [Projects\nUsing Bats](https://github.com/bats-core/bats-core/wiki/Projects-Using-Bats) on\nthe wiki.\n\nTo learn how to set up your editor for Bats syntax highlighting, see [Syntax\nHighlighting](https://github.com/bats-core/bats-core/wiki/Syntax-Highlighting)\non the wiki.\n\n## Contributing\n\nFor now see the ``docs`` folder for project guides, work with us on the wiki\nor look at the other communication channels.\n\n## Contact\n\n- We are `#bats` on freenode;\n- Or leave a message on [gitter].\n\n## Version history\n\nSee `docs/CHANGELOG.md`.\n\n## Background\n\n### What\'s the plan and why?\n\n**Tuesday, September 19, 2017:** This was forked from [Bats][bats-orig] at\ncommit [0360811][].  It was created via `git clone --bare` and `git push\n--mirror`.\n\n[bats-orig]: https://github.com/sstephenson/bats\n[0360811]: https://github.com/sstephenson/bats/commit/03608115df2071fff4eaaff1605768c275e5f81f\n\nThis [bats-core repo](https://github.com/bats-core/bats-core) is the community-maintained Bats project.\n\n### Why was this fork created?\n\nThere was an initial [call for maintainers][call-maintain] for the original Bats repository, but write access to it could not be obtained. With development activity stalled, this fork allowed ongoing maintenance and forward progress for Bats.\n\n[call-maintain]: https://github.com/sstephenson/bats/issues/150\n\n## Copyright\n\n\xc2\xa9 2017-2018 bats-core organization\n\n\xc2\xa9 2011-2016 Sam Stephenson\n\nBats is released under an MIT-style license; see `LICENSE.md` for details.\n\nSee the [parent project](https://github.com/bats-core) at GitHub or the\n[AUTHORS](AUTHORS) file for the current project maintainer team.\n\n[gitter]: https://gitter.im/bats-core/bats-core?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge\n'