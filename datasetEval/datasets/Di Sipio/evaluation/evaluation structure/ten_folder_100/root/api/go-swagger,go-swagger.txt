b'# Swagger 2.0 [![Build Status](https://circleci.com/gh/go-swagger/go-swagger.svg?style=shield)](https://circleci.com/gh/go-swagger/go-swagger) [![Build status](https://ci.appveyor.com/api/projects/status/x377t5o9ennm847o/branch/master?svg=true)](https://ci.appveyor.com/project/casualjim/go-swagger/branch/master) [![codecov](https://codecov.io/gh/go-swagger/go-swagger/branch/master/graph/badge.svg)](https://codecov.io/gh/go-swagger/go-swagger) [![GitHub version](https://badge.fury.io/gh/go-swagger%2Fgo-swagger.svg)](https://badge.fury.io/gh/go-swagger%2Fgo-swagger)\n[![Slack Status](https://slackin.goswagger.io/badge.svg)](https://slackin.goswagger.io)\n[![license](http://img.shields.io/badge/license-Apache%20v2-orange.svg)](https://raw.githubusercontent.com/swagger-api/swagger-spec/master/LICENSE)\n[![GoDoc](https://godoc.org/github.com/go-swagger/go-swagger?status.svg)](http://godoc.org/github.com/go-swagger/go-swagger)\n[![Docker Repository on Quay](https://quay.io/repository/goswagger/swagger/status "Docker Repository on Quay")](https://quay.io/repository/goswagger/swagger)\n[![FOSSA Status](https://app.fossa.io/api/projects/git%2Bgithub.com%2Fgo-swagger%2Fgo-swagger.svg?type=shield)](https://app.fossa.io/projects/git%2Bgithub.com%2Fgo-swagger%2Fgo-swagger?ref=badge_shield)\n[![GolangCI](https://golangci.com/badges/github.com/go-swagger/go-swagger.svg)](https://golangci.com)\n[![Go Report Card](https://goreportcard.com/badge/github.com/go-swagger/go-swagger)](https://goreportcard.com/report/github.com/go-swagger/go-swagger)\n\nThis package contains a golang implementation of Swagger 2.0 (aka [OpenAPI 2.0](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md)):\nit knows how to serialize and deserialize swagger specifications.\n\n[Swagger](https://swagger.io/) is a simple yet powerful representation of your RESTful API.<br>\n\n> ![swagger](https://raw.githubusercontent.com/go-swagger/go-swagger/master/docs/favicon-16x16.png) **Swagger in a nutshell**\n>\n> With the largest ecosystem of API tooling on the planet, thousands of developers are supporting Swagger in almost every modern programming language and deployment environment.\n>\n> With a Swagger-enabled API, you get interactive documentation, client SDK generation and discoverability. We created Swagger to help fulfill the promise of APIs.\n>\n> Swagger helps companies like Apigee, Getty Images, Intuit, LivingSocial, McKesson, Microsoft, Morningstar, and PayPal build the best possible services with RESTful APIs. Now in version 2.0, Swagger is more enabling than ever. And it\'s 100% open source software.\n\n##  Features\n`go-swagger` brings to the go community a complete suite of fully-featured, high-performance, API components to  work with a Swagger API: server, client and data model.\n\n* Generates a server from a swagger specification\n* Generates a client from a swagger specification\n* Supports most features offered by jsonschema and swagger, including polymorphism\n* Generates a swagger specification from annotated go code\n* Additional tools to work with a swagger spec\n* Great customization features, with vendor extensions and customizable templates\n\nOur focus with code generation is to produce idiomatic, fast go code, which plays nice with golint, go vet etc.\n\n##  Project status\n`go-swagger` is now feature complete and has stabilized its API.\n\nMost features and building blocks are now in a stable state, with a rich set of CI tests.\n\nThe go-openapi community actively continues bringing fixes and enhancements to this code base.\n\nThere is still much room for improvement: contributors and PR\'s are welcome. You may also get in touch with maintainers on [our slack channel](https://slackin.goswagger.io).\n\n## Documentation\n<https://goswagger.io>\n\n## FAQ\nQ&A contributed by the community:\n\n<https://goswagger.io/faq/>\n\n## How is this different from go generator in swagger-codegen?\n**tl;dr** The main difference at this moment is that this one actually works...\n\nThe swagger-codegen project only generates a _workable_ go client and even there it will only support flat models.\nFurther, the go server generated by swagger-codegen is mostly a stub.\n\n> **Motivation**\n> Why is this not done as a part of the swagger-codegen project? Because:\n>\n> * I don\'t really know java very well and so I\'d be learning both java and the object model of the codegen which was in heavy flux as opposed to doing go and I really wanted to go experience of designing a large codebase with it.\n> * Go\'s super limited type system makes it so that it doesn\'t fit well in the model of swagger-codegen\n> * Go\'s idea of polymorphism doesn\'t reconcile very well with a solution designed for languages that actually have inheritance and so forth.\n> * For supporting types like `[][][]map[string][][]int64` I don\'t think it\'s possible with mustache\n>\n> I gravely underestimated the amount of work that would be involved in making something useful out of it.\n> My personal mission: I want the jvm to go away, it was great way back when now it\'s just silly (vm in container on vm in vm in container)\n\n## What\'s inside?\n\nHere is an outline of available features (see the full list [here](https://goswagger.io/features.html)):\n\n- An object model that serializes swagger-compliant yaml or json\n- A tool to work with swagger\n  - Serve swagger UI for any swagger spec file\n  - Flexible code generation, with customizable templates\n    - Generate go API server based on swagger spec\n    - Generate go API client from a swagger spec\n  -  Validate a swagger spec document, with extra rules outlined [here](https://github.com/apigee-127/sway/blob/master/docs/README.md#semantic-validation)\n  -  Generate a spec document based on annotated code\n- A runtime to work with Rest API and middlewares\n  - Serve spec\n  - Routing\n  - Validation\n  - Authorization\n  - Swagger docs UI\n  - A Diff tool which will cause a build to fail if a change in the spec breaks backwards compatibility\n\nThere is more to that...\n\n- A [typed JSON Schema implementation](https://goswagger.io/use/model.html), supporting most Draft 4 features\n- Extended string and numeric formats: [strfmt](https://github.com/go-openapi/strfmt)\n- Utilities to work with JSON, convert data types and pointers: [swag](https://github.com/go-openapi/swag)\n- A jsonschema (Draft 4) validator, with full $ref support: [validate](https://github.com/go-openapi/validate)\n- Custom validation interface\n\n## Installing\n`go-swagger` is available as binary or docker releases as well as from source: [more details](https://goswagger.io/install.html).\n\n## Use-cases\nThe main package of the toolkit, go-swagger/go-swagger, provides command line tools to help working with swagger.\n\nThe toolkit is highly customizable and allows endless possibilities to work with OpenAPI2.0 specifications.\n\nBeside the go-swagger CLI tool and generator, the [go-openapi packages](https://github.com/go-openapi) provide modular functionality to build custom solutions on top of OpenAPI.\n\nThe CLI supports shell autocompletion utilities: see [here](https://goswagger.io/cli_helpers.html).\n\n### Serve specification UI\nMost basic use-case: serve a UI for your spec:\n\n```\nswagger serve https://raw.githubusercontent.com/swagger-api/swagger-spec/master/examples/v2.0/json/petstore-expanded.json\n```\n\n### Validate a specification\nTo [validate](https://goswagger.io/usage/validate.html) a Swagger specification:\n\n```\nswagger validate https://raw.githubusercontent.com/swagger-api/swagger-spec/master/examples/v2.0/json/petstore-expanded.json\n```\n\n### Generate an API server\nTo generate a [server for a swagger spec](https://goswagger.io/generate/server.html) document:\n\n```\nswagger generate server [-f ./swagger.json] -A [application-name [--principal [principal-name]]\n```\n\n### Generate an API client\nTo generate a [client for a swagger spec](https://goswagger.io/generate/client.html) document:\n\n```\nswagger generate client [-f ./swagger.json] -A [application-name [--principal [principal-name]]\n```\n\n### Generate a spec from source\nTo generate a [swagger spec document for a go application](https://goswagger.io/generate/spec.html):\n\n```\nswagger generate spec -o ./swagger.json\n```\n\n### Generate a data model\nTo generate model structures and validators exposed by the API:\n\n```\nswagger generate model --spec={spec}\n```\n\n### Transform specs\n\nThere are [several commands](https://goswagger.io/use/transform.html) allowing you to transform your spec.\n\nResolve and expand $ref\'s in your spec as inline definitions:\n```\nswagger expand {spec}\n```\n\nFlatten your spec: all external $ref\'s are imported into the main document and inline schemas reorganized as definitions.\n```\nswagger flatten {spec}\n```\n\nMerge specifications (composition):\n```\nswagger mixin {spec1} {spec2}\n```\n\n### Compare specs\n\nThe  diff command allows you to check backwards compatibility.\nType ```swagger diff --help``` for info.\n\n```\nswagger diff {spec1} {spec2}\n```\n\n## Try it\n\nTry `go-swagger` in a free online workspace using Gitpod:\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io#https://github.com/go-swagger/go-swagger)\n\n## Licensing\n\nThe toolkit itself is licensed as Apache Software License 2.0. Just like swagger, this does not cover code generated by the toolkit. That code is entirely yours to license however you see fit.\n\n\n[![FOSSA Status](https://app.fossa.io/api/projects/git%2Bgithub.com%2Fgo-swagger%2Fgo-swagger.svg?type=large)](https://app.fossa.io/projects/git%2Bgithub.com%2Fgo-swagger%2Fgo-swagger?ref=badge_large)\n\n## Who is using this project?\n\nTo name but a few... (feel free to sign in there if you are using this project):\n\n> In the list below, we tried to figure out the public repos where you\'ll find examples on how to use `go-swagger` and `go-openapi`:\n\n[3DSIM](https://github.com/3DSIM)  \n[Alibaba PouchAPI](https://github.com/alibaba/pouch)  \n[CheckR](https://github.com/checkr/flagr)  \n[Cilium](https://github.com/cilium/cilium)  \n[CoreOS](https://github.com/coreos/go-quay)  \n[DigitalOcean](https://github.com/digitalocean/go-netbox)  \n[EVE Central](https://github.com/evecentral)  \nIron.io\n[JaegerTracing](https://github.com/jaegertracing/jaeger)  \n[Kubernetes-Helm](https://github.com/kubernetes-helm/monocular)  \n[Kubernetes](https://godoc.org/k8s.io/apiextensions-apiserver/pkg/apiserver)  \n[ManifoldCo](https://github.com/manifoldco)  \n[Metaparticle.io](https://github.com/metaparticle-io/metaparticle-ast)  \n[Netlify](https://github.com/netlify/open-api)  \n[Nutanix](https://github.com/nutanix)  \n[OAS2](https://github.com/hypnoglow/oas2)  \n[OVH API](https://github.com/appscode/go-ovh)  \n[RackHD](https://github.com/RackHD/RackHD)  \n[ScaleFT](https://github.com/authclub/billforward)  \n[StratoScale](https://github.com/Stratoscale/swagger)  \n[Terraform Provider OpenAPI](https://github.com/dikhan/terraform-provider-openapi)  \n[VMWare](https://github.com/vmware/dispatch)  \n...\n\n## Note to users migrating from older releases\n\n### Using 0.5.0\n\nBecause 0.5.0 and master have diverged significantly, you should checkout the tag 0.5.0 for go-swagger when you use the currently released version.\n\n### Migrating from 0.5.0 to 0.6.0\n\nYou will have to rename some imports:\n\n```\ngithub.com/go-swagger/go-swagger/httpkit/validate to github.com/go-openapi/validate\ngithub.com/go-swagger/go-swagger/httpkit to github.com/go-openapi/runtime\ngithub.com/naoina/denco to github.com/go-openapi/runtime/middleware/denco\ngithub.com/go-swagger/go-swagger to github.com/go-openapi\n```\n\n### Migrating from 0.12 to 0.13\n\nSpec flattening and $ref resolution brought breaking changes in model generation, since all complex things generate their own definitions.\n\n### Migrating from 0.14 to 0.15\n\nGenerated servers no more import the following package (replaced by go1.8 native functionality):\n```\ngithub.com/tylerb/graceful\n```\n\nSpec flattening now defaults to minimal changes to models and should be workable for 0.12 users.\n\nUsers who prefer to stick to 0.13 and 0.14 default flattening mode may now use the `--with-flatten=full` option.\n\nNote that the `--skip-flatten` option has been phased out and replaced by the more explicit `--with-expand` option.\n'