b'# <img src="https://content.public.files.stdlib.com/www/static/images/standard-library-logo-wordmark.svg" width="300">\n## [Standard Library is an API Development, Hosting and Integration Platform](https://stdlib.com)\n\n**Standard Library Setup** |\n[Node](https://github.com/stdlib/lib-node) |\n[Python](https://github.com/stdlib/lib-python) |\n[Ruby](https://github.com/stdlib/lib-ruby) |\n[Web](https://github.com/stdlib/lib-js)\n\n# Introduction\n\n\nStandard Library is the *fastest, easiest* way to build infinitely scalable,\nself-healing APIs. The Standard Library platform consists of three components:\n\n1. A central registry and library for APIs\n2. A scalable, serverless hosting platform\n3. Simple command line tooling for building and managing API development\n\nStandard Library is based on Function as a Service ("serverless") architecture,\ninitially popularized by AWS Lambda. You can use Standard Library to build modular, scalable APIs\nfor yourself and other developers in *minutes* without having to manage servers,\ngateways, domains, write documentation, or build SDKs. Your development workflow\nhas never been easier - focus on writing code you love, let Standard Library handle\neverything else.\n\nStandard Library uses an **open specification** called\n[FunctionScript](https://github.com/FunctionScript/FunctionScript) for function definitions and\nexecution. If you run into concerns or questions as you\'re building from this\nguide, please reference the FunctionScript repository. :)\n\nYou can view services published by our large and growing developer community\n[on the Standard Library search page](https://stdlib.com/search).\n\n![stdlib-process](https://content.public.files.stdlib.com/www/static/images/stdlib_usage.gif)\n\n# Table of Contents\n\n1. [Getting Started](#getting-started)\n1. [Creating Your First Service](#creating-your-first-service)\n1. [Connecting Service Endpoints](#connecting-service-endpoints)\n1. [Accessing Your APIs From Other Applications](#accessing-your-apis-from-other-applications)\n1. [Accessing Your APIs Over HTTP](#accessing-your-apis-over-http)\n1. [Running Your APIs as Background Workers](#running-your-apis-as-background-workers)\n1. [Version Control and Package Management](#version-control-and-package-management)\n1. [Logging](#logging)\n1. [Sourcecode](#sourcecode)\n1. [Additional Functionality](#additional-functionality)\n1. [Acknowledgements](#acknowledgements)\n1. [Contact](#contact)\n\n# Getting Started\n\nTo get started with Standard Library, first make sure you have Node 6.x installed,\n[available from the official Node.js website](https://nodejs.org). Next install\nthe Standard Library CLI tools with:\n\n```\n$ npm install lib.cli -g\n```\n\nAnd you\'re now ready to start building!\n\n# Upgrading From Previous Versions\n\nIf you\'re running a previous version of Standard Library and having issues with the CLI,\ntry cleaning up the old CLI binary links first;\n\n```\n$ rm /usr/local/bin/f\n$ rm /usr/local/bin/lib\n$ rm /usr/local/bin/stdlib\n```\n\n# Creating Your First Service\n\nThe first thing you\'ll want to do is create a workspace. Create a new directory\nyou intend to build your services in and initialize the workspace.\n\n```\n$ mkdir stdlib-workspace\n$ cd stdlib-workspace\n$ lib init\n```\n\nYou\'ll be asked for an e-mail address to log in to the Standard Library registry.\nIf you don\'t yet have an account, you can create one by going to https://stdlib.com/.\nNote that you can skip account creation with `lib init --no-login`.\nYou\'ll be unable to use the registry, but it\'s useful for creating workspaces\nwhen you don\'t have internet access.\n\nNext, create your service:\n\n```\n$ lib create <service>\n```\n\nYou\'ll be asked for a default function name, which is the entry point\ninto your service (useful if you only want a single entry point). This will automatically\ngenerate a service project scaffold in `stdlib-workspace/<username>/<service>`.\n\nOnce created, enter the service directory:\n\n```\n$ cd your_username/your_service\n```\n\nIn this directory, you\'ll see something like:\n\n```\n- functions/\n  - __main__.js\n- package.json\n- env.json\n- WELCOME.md\n- README.md\n```\n\nAt this point, there\'s a "hello world" function that\'s been automatically\ncreated (`__main__.js`). Standard Library comes paired with a simple `lib` command for\ntesting your functions locally and running them in the cloud.\nTo test your function:\n\n```shell\n$ lib .\n"hello world"\n```\n\nIf we examine the `functions/__main__.js` file, we see the following:\n\n```javascript\n/**\n* A basic Hello World function\n* @param {string} name Who you\'re saying hello to\n* @returns {string}\n*/\nmodule.exports = async (name = \'world\', context) => {\n  return `hello ${name}`;\n};\n```\n\nWe can pass parameters to it using the CLI by specifying named parameters:\n\n```shell\n$ lib . --name "dolores abernathy"\n"hello dolores abernathy"\n```\n\nNote that `context` is a magic parameter (automatically populated with\n  execution details, when provided) as is `callback` (terminates execution),\n  so these **don\'t need to be documented** and **can not be specified as\n  parameters when executing the function**.\n\n## Pushing to the Cloud\n\nTo push your function to a development environment in the cloud...\n\n```shell\n$ lib up dev\n$ lib your_username.your_service[@dev]\n"hello world"\n```\n\nAnd to release it (when you\'re ready!)\n\n```shell\n$ lib release\n$ lib your_username.your_service\n"hello world"\n```\n\nYou can check out your service on the web, and use it in applications using our\nfunctions gateway, `api.stdlib.com`.\n\n```\nhttps://your_username.api.stdlib.com/your_service/\n```\n\nThat\'s it! You haven\'t written a line of code yet, and you have mastery over\nbuilding a service, testing it in a development (staging) environment online,\nand releasing it for private (or public) consumption.\n\n**Note:** By default, APIs that you publish with `lib release` will have a visible\ndocumentation page in the Standard Library public registry. You can keep your page private,\nas well as restrict execution access or add collaborators to your API,\nby modifying your API\'s permissions. For more information, see this [docs page](https://docs.stdlib.com/main/#/access-control/api-permissions).\n\n**Another Note:** Staging environments (like the one created with `lib up dev`)\nare *mutable* and can be replaced indefinitely. Releases (`lib release`) are\n*immutable* and can never be overwritten. However, any service can be torn down\nwith `lib down <environment>` or `lib down -r <version>` (but releases\n\tcan\'t be replaced once removed, to prevent mistakes and / or bad actors).\n\n# Connecting Service Endpoints\n\nYou\'ll notice that you can create more than one function per service. While\nyou can structure your project however you\'d like internally, it should also\nbe noted that these functions have zero-latency access to each other. You\ncan access them internally with the `lib` [package on NPM](https://github.com/stdlib/lib-node),\nwhich behaves similarly to the `lib` command for testing. Use:\n\n```\n$ npm install lib --save\n```\n\nIn your main service directory to add it, and use it like so:\n\n#### functions/add.js\n```javascript\nmodule.exports = async (a = 0, b = 0) => {\n  return a + b;\n};\n```\n\n#### functions/add_double.js\n```javascript\nconst lib = require(\'lib\');\n\nmodule.exports = async (a = 0, b = 0, context) => {\n  let result = await lib[`${context.service.identifier}.add`]({a: a, b: b});\n  return result * 2;\n};\n```\n\nIn this case, calling `lib .add --a 1 --b 2` will return `3` and `lib .add_double --a 1 --b 2`\nwill return `6`. The `context` magic parameter is used for its\n`context.service.identifier` property, which will return the string `"your_username.your_service[@local]"`\nin the case of local execution, `"your_username.your_service[@ENV]"` when deployed to an\nenvironment or release (where `ENV` is your environment name or semver).\n\n# Accessing Your APIs From Other Applications\n\nAs mentioned in the previous section, you can use the NPM `lib` package that\'s\n[available on GitHub and NPM](https://github.com/stdlib/lib-node) to access your\nAPIs from legacy Node.js applications and even the web browser. We\'ll\nhave more SDKs coming out in the following months.\n\nAn existing app would call a function (username.bestTrekChar with version 0.2.1):\n\n```javascript\nconst lib = require(\'lib\');\n\nlib.username.bestTrekChar[\'@0.2.1\']({name: \'spock\'}, function (err, result) {\n\n  if (err) {\n    // handle it\n  }\n\n  // do something with result\n\n});\n```\n\nWhich would speak to your API...\n\n```javascript\nmodule.exports = async (name = \'kirk\') => {\n\n  if (name === \'kirk\') {\n    return \'why, thank, you, too, kind\';\n  } else if (name === \'spock\') {\n    return \'i think this feeling is called "pleased"\';\n  } else {\n    throw new Error(\'Only kirk and spock supported.\');\n  }\n\n};\n```\n\n# Accessing Your APIs Over HTTP\n\nWe definitely recommend using the [lib library on NPM](https://github.com/stdlib/lib-node)\nto make API calls as specified above, but you can also make HTTPS\nrequests directly to the Standard Library gateway. HTTP query parameters are mapped\nautomatically to parameters by name.\n\n```\nhttps://username.api.stdlib.com/liveService@1.12.2/?name=BATMAN\n```\n\nMaps directly to:\n\n```javascript\n/**\n* Hello World\n* @param {string} name\n* @returns {string}\n*/\nmodule.exports = async (name = \'world\') => {\n  // returns "HELLO BATMAN" from above HTTP query\n  return `Hello ${name}`;\n};\n```\n\n# Running Your APIs as Background Workers\n\nTo run any Standard Library service as a background worker (immediately returns a\n  response, runs function after), simply append ":bg" to the URL before\n  the HTTP query parameters (search portion of the URL), for example (from\n  above):\n\n```\nhttps://username.api.stdlib.com/liveService@1.12.2/:bg?name=BATMAN\n```\n\nTo do so from the `lib-node` library, use:\n\n```javascript\nlib({bg: true}).username.liveService[\'@1.12.2\'](...);\n```\n\n## Background Responses\n\nThe default background response will be a content type of `text/plain` with a\nstring indicating the function name you\'re executing. There are currently\nthree different options for background responses that you define before you\ndeploy your function.\n\n### info (DEFAULT)\n\nSet `@bg info` in your comment definition like so:\n\n```javascript\n/**\n* Hello World\n* @bg info\n* @param {string} name\n* @returns {string}\n*/\nmodule.exports = async (name = \'world\') => {\n  return `Hello ${name}`;\n};\n```\n\nThis is the default as well (if nothing is specified).\n\n### empty\n\nSet `@bg empty` in your comment definition like so:\n\n```javascript\n/**\n* Hello World\n* @bg empty\n* @param {string} name\n* @returns {string}\n*/\nmodule.exports = async (name = \'world\') => {\n  return `Hello ${name}`;\n};\n```\n\nWill return an empty (0 length) response.\n\n### params\n\nSet `@bg params` in your comment definition like so:\n\n```javascript\n/**\n* Hello World\n* @bg params\n* @param {string} name\n* @returns {string}\n*/\nmodule.exports = async (name = \'world\') => {\n  return `Hello ${name}`;\n};\n```\n\nThis will return `{"name":"world"}` in this example (if no other parameters are\n  specified) as this parameter has a default value. This will spit back any\n  and all parameters sent to the function, even if they\'re not part of the\n  function signature.\n\n# Version Control and Package Management\n\nA quick note on version control - Standard Library is *not* a replacement for normal\ngit-based workflows, it is a supplement focused around service creation and\nexecution.\n\nYou have unlimited access to any release (that hasn\'t been torn down)\nwith `lib pkg <serviceIdentifier>` to download the tarball (`.tgz`) and\n`lib get <serviceIdentifier>` to automatically download and unpack the\ntarball to a working directory.\n\nTarballs (and package contents) are *closed-source*.\nNobody but you (and potentially your teammates) has access to these. It\'s up to\nyou whether or not you share the guts of your service with others on GitHub or NPM.\n\nAs mentioned above: releases are *immutable* and can not be overwritten (but can\n\tbe removed, just not replaced afterwards) and development / staging environments\n\tare *mutable*, you can overwrite them as much as you\'d like.\n\n# Logging\n\nLogging for services is enabled by default. When running a service locally with\n`lib .` or `lib .functionname`, all logs will be output in your console. The very\nlast output (normally a JSON-compatible string) is the return value of the function.\n\nTo view remote logs (in dev or release environments), use the following syntax:\n\n```shell\n:: Lists all logs for the service\n$ lib logs username.servicename\n\n:: Lists main service endpoint logs for "dev" environment\n$ lib logs username.servicename[@dev]\n\n:: Lists service endpoint named "test" logs for "dev" environment\n$ lib logs username.servicename[@dev].test\n\n:: Lists all logs for "dev" environment\n$ lib logs username.servicename[@dev]*\n$ lib logs username.servicename[@dev].*\n```\n\nThe default log type is `stdout`, though you can specify `stderr` with\n`lib logs username.servicename -t stderr`.\n\nLimit the number of lines to show with the `-l` argument (or `--lines`).\n\n# Sourcecode\n\nStandard Library Sourcecode is designed to streamline the creation of different types of projects.\nSources provide defaults for things like boilerplate code, workflows, and directory\nsetup so you can get right to development and implementation of more complex functionality.\nYou can create services from existing source codes, or create and share your own sources.\n\n## Installing A Service from Sourcecode\n\nYou can create a service from a source code directly from the command line. To create a service using a source code,\nnavigate to a Standard Library root directory and run\n\n```\n$ lib create -s <source name>\n```\n\nWhere `<source name>` is something like `@slack/app` with an optionally specified version or\nenvironment. This will create a new service based off the source code.\n\n## Creating Sources\n\nTo turn a existing service into a source code, navigate to the service and run\n\n```\n$ lib source\n```\n\nThis will copy the current directory contents into a new folder and add a `source.json` file\nbased off of the `env.json` file. To deploy a draft of the source code to the cloud, you can run\n\n```\n$ lib source:draft <draft environment name>\n```\n\nTo publish a versioned, immutable source code to the registry you can run\n\n```\n$ lib source:publish\n```\n\nYou can also fork an existing source code, that belongs to you, a teammate, or is publicly available with\n\n```\n$ lib source:fork -s <source name> -a <alias>\n```\n\nWhich you can then modify and publish again under your own account. For more information about source codes, check out the [docs](http://docs.stdlib.com/main/#/introduction)\n\n\n# Additional Functionality\n\nStandard Library comes packed with a bunch of other goodies - if your service goes down\nfor any reason (the service platform is acting up), use `lib restart`.\nSimilarly, as we roll out updates to the platform the builds we\'re using on\nAWS Lambda may change. You can update your service to our latest build using\n`lib rebuild`. We may recommend this from time-to-time, so pay attention\nto e-mails and the community.\n\nTo see a full list of commands available for the CLI tools, type:\n\n```\n$ lib help\n```\n\nWe\'ve conveniently copy-and-pasted the output here for you to peruse;\n\n```\n* [all arguments converted to parameters]\n\t-b                   Execute as a Background Function\n\t-d                   Specify debug mode (prints Gateway logs)\n\t-t                   Specify a Library Token\n\t-w                   Specify a Webhook (Deprecated)\n\t--*                  all verbose flags converted to named keyword parameters\n\n\tRuns a Standard Library function, i.e. "lib user.service[@ver]" (remote) or "lib ." (local)\n\ncreate [service]\n\t-d                   (DEPRECATED) Dev Mode - Specify another HTTP address for the Template Service (e.g. localhost:8170)\n\t-f                   Force command if not in root directory\n\t-n                   No login - don\'t require an internet connection\n\t-s                   Source - creates service from a Standard Library sourcecode\n\t-t                   (DEPRECATED) Template - a Standard Library service template to use\n\t-w                   Write over - overwrite the current directory contents\n\t--develop            (DEPRECATED) Dev Mode - Specify another HTTP address for the Template Service (e.g. localhost:8170)\n\t--force              Force command if not in root directory\n\t--no-login           No login - don\'t require an internet connection\n\t--source             Source - creates service from a Standard Library sourcecode\n\t--template           (DEPRECATED) Template - a stdlib service template to use\n\t--write-over         Write over - overwrite the current directory contents\n\n\tCreates a new (local) service\n\ndown [environment]\n\t-r                   Remove a release version (provide number)\n\t--release            Remove a release version (provide number)\n\n\tRemoves Standard Library package from registry and cloud environment\n\nfunction:create [name] [description] [param_1] [param_2] [...] [param_n]\n\t-n                   New directory: Create as a __main__.js file, with the name representing the directory\n\t--new                New directory: Create as a __main__.js file, with the name representing the directory\n\n\tCreates a new function for a service, locally\n\nget [full service name]\n\t-f                   Force command if not in root directory\n\t-w                   Write over - overwrite the target directory contents\n\t--force              Force command if not in root directory\n\t--write-over         Write over - overwrite the target directory contents\n\n\tRetrieves and extracts Standard Library package\n\nhosts\n\tDisplays created hostname routes from source custom hostnames to target services you own\n\nhosts:add [source] [target]\n\tAdds a new hostname route from a source custom hostname to a target service you own\n\nhosts:remove [source]\n\tRemoves a hostname route from a source custom hostname to a target service you own\n\nhttp\n\t-p                   Port (default 8170)\n\t--port               Port (default 8170)\n\n\tCreates HTTP Server for Current Service\n\ninfo [username | full service name]\n\tRetrieves information about a user or package\n\ninit [environment]\n\t-f                   Force command to overwrite existing workspace\n\t-n                   No login - don\'t require an internet connection\n\t--force              Force command to overwrite existing workspace\n\t--no-login           No login - don\'t require an internet connection\n\n\tInitializes Standard Library workspace\n\nlogin\n\t--email              E-Mail\n\t--password           Password\n\n\tLogs in to Standard Library in this directory\n\nlogout\n\tLogs out of Standard Library in this workspace\n\nlogs [service]\n\t-l                   The number of log lines you want to retrieve\n\t-t                   The log type you want to retrieve. Allowed values are "stdout" and "stderr".\n\t--lines              The number of log lines you want to retrieve\n\t--type               The log type you want to retrieve. Allowed values are "stdout" and "stderr".\n\n\tRetrieves logs for a given service\n\npkg [full service name]\n\t-f                   Force command if not in root directory\n\t-o                   Output path for the .tgz package\n\t--force              Force command if not in root directory\n\t--output             Output path for the .tgz package\n\n\tDownloads Standard Library tarball (.tgz)\n\nrebuild [environment]\n\t-r                   Rebuild a release package\n\t--release            Rebuild a release package\n\n\tRebuilds a service (useful for registry performance updates), alias of `lib restart -b`\n\nrelease\n\tPushes release of Standard Library package to registry and cloud (Alias of `lib up -r`)\n\nrestart [environment]\n\t-b                   Rebuild service fully\n\t-r                   Restart a release package\n\t--build              Rebuild service fully\n\t--release            Restart a release package\n\n\tRestarts a Standard Library service (if necessary)\n\nrollback\n\tRolls back (removes) release of Standard Library package (alias of `lib down -r`)\n\nsource\n\n\tConverts a local service to Standard Library sourcecode by creating "source.json"\n\nsource:draft [draftName]\n\t-p                   Publishes as a release\n\t--publish            Publishes as a release\n\n\tPushes a draft of Standard Library source code to the registry\n\nsource:fork\n\t-a                   Alias (Optional) - The new alias of the source\n\t-f                   Force command if not in root directory\n\t-i                   Install - install this sourcecode as a new library service\n\t-s                   Source (Required) - The name of the sourcecode to fork\n\t-w                   Write over - overwrite the target directory contents\n\t--alias              Alias (Optional) - The new alias of the source\n\t--force              Force command if not in root directory\n\t--install            Install - install this sourcecode as a new library service\n\t--source             Source (Required) - The name of the sourcecode to fork\n\t--write-over         Write over - overwrite the target directory contents\n\n\tDownloads and Forks Sourcecode from Standard Library\n\nsource:publish\n\tPublishes a versioned release of Standard Library sourcecode to registry (alias of `lib source:draft -p`)\n\nsource:remove [environment]\n\t-p                   Removes a published release version (provide number)\n\t--publish            Removes a published release version (provide number)\n\n\tRemoves Standard Library sourcecode from the registry\n\ntasks:create [service] [function]\n\t-v                   Service version (default lastest release)\n\t--version            Service version (default lastest release)\n\n\tCreates a Scheduled Task from a Standard Library service\n\ntasks:destroy\n\tStops a Standard Library scheduled task\n\ntasks:list\n\t-j                   Returns tasks as a JSON object\n\t--json               Returns tasks as a JSON object\n\n\tLists your scheduled tasks\n\nup [environment]\n\t-r                   Upload a release package\n\t--release            Upload a release package\n\n\tPushes Standard Library package to registry and cloud environment\n\nuser\n\t-s                   <key> <value> Sets a specified key-value pair\n\t--new-password       Sets a new password via a prompt\n\t--reset-password     <email> Sends a password reset request for the specified e-mail address\n\t--set                <key> <value> Sets a specified key-value pair\n\n\tRetrieves (and sets) current user information\n\nversion\n\tReturns currently installed version of Standard Library command line tools\n```\n\n# That\'s it!\n\nYep, it\'s really that easy. To keep up-to-date on developments, please\nstar us here on GitHub, and sign up a user account for the registry. You\ncan read more about service hosting and keep track of official updates on\n[the official Standard Library website, stdlib.com](https://stdlib.com).\n\n# Acknowledgements\n\nStandard Library is a product of and &copy; 2019 Polybit Inc.\n\nWe\'d love for you to pay attention to [@StandardLibrary](https://twitter.com/StandardLibrary) and\nwhat we\'re building next! If you\'d consider joining the team, [shoot us an e-mail](mailto:careers@stdlib.com).\n\nYou can also follow me, the original author, on Twitter: [@keithwhor](https://twitter.com/keithwhor).\n\nIssues encouraged, PRs welcome, and we\'re happy to have you on board!\nEnjoy and happy building :)\n\n# Thanks\n\nSpecial thanks to the people and companies that have believed in and supported our\nvision and development over the years.\n\n- Slack [@SlackHQ](https://twitter.com/SlackHQ)\n- Stripe [@Stripe](https://twitter.com/Stripe)\n- Romain Huet [@romainhuet](https://twitter.com/romainhuet)\n- Chad Fowler [@chadfowler](https://twitter.com/chadfowler)\n- Brian LeRoux [@brianleroux](https://twitter.com/brianleroux)\n- Ahmad Nassri [@AhmadNassri](https://twitter.com/AhmadNassri)\n\n... and many more!\n'