b'# Build Eloquent queries from API requests\n\n[![Latest Version on Packagist](https://img.shields.io/packagist/v/spatie/laravel-query-builder.svg?style=flat-square)](https://packagist.org/packages/spatie/laravel-query-builder)\n[![Build Status](https://img.shields.io/circleci/project/github/spatie/laravel-query-builder/master.svg?style=flat-square)](https://circleci.com/gh/spatie/laravel-query-builder)\n[![StyleCI](https://styleci.io/repos/117567334/shield?branch=master)](https://styleci.io/repos/117567334)\n[![Quality Score](https://img.shields.io/scrutinizer/g/spatie/laravel-query-builder.svg?style=flat-square)](https://scrutinizer-ci.com/g/spatie/laravel-query-builder)\n[![Total Downloads](https://img.shields.io/packagist/dt/spatie/laravel-query-builder.svg?style=flat-square)](https://packagist.org/packages/spatie/laravel-query-builder)\n\nThis package allows you to filter, sort and include eloquent relations based on a request. The `QueryBuilder` used in this package extends Laravel\'s default Eloquent builder. This means all your favorite methods and macros are still available. Query parameter names follow the [JSON API specification](http://jsonapi.org/) as closely as possible.\n\n## Basic usage\n\n### Filter a query based on a request: `/users?filter[name]=John`:\n\n```php\nuse Spatie\\QueryBuilder\\QueryBuilder;\n\n$users = QueryBuilder::for(User::class)\n    ->allowedFilters(\'name\')\n    ->get();\n\n// all `User`s that contain the string "John" in their name\n```\n\n[Read more about filtering features like: partial filters, exact filters, scope filters, custom filters, ignored values, default filter values, ...](https://docs.spatie.be/laravel-query-builder/v2/features/filtering/)\n\n### Including relations based on a request: `/users?include=posts`:\n\n```php\n$users = QueryBuilder::for(User::class)\n    ->allowedIncludes(\'posts\')\n    ->get();\n\n// all `User`s with their `posts` loaded\n```\n\n[Read more about include features like: including nested relationships, including relationship count, ...](https://docs.spatie.be/laravel-query-builder/v2/features/including-relationships/)\n\n### Sorting a query based on a request: `/users?sort=id`:\n\n```php\n$users = QueryBuilder::for(User::class)\n    ->allowedSorts(\'id\')\n    ->get();\n\n// all `User`s sorted by ascending id\n```\n\n[Read more about sorting features like: custom sorts, sort direction, ...](https://docs.spatie.be/laravel-query-builder/v2/features/sorting/)\n\n### Works together nicely with existing queries:\n\n```php\n$query = User::where(\'active\', true);\n\n$userQuery = QueryBuilder::for($query) // start from an existing Builder instance\n    ->withTrashed() // use your existing scopes\n    ->allowedIncludes(\'posts\', \'permissions\')\n    ->where(\'score\', \'>\', 42); // chain on any of Laravel\'s query builder methods\n```\n\n### Selecting fields for a query: `/users?fields=id,email`\n\n```php\n$users = QueryBuilder::for(User::class)\n    ->allowedFields([\'id\', \'email\'])\n    ->get();\n\n// the fetched `User`s will only have their id & email set\n```\n\n[Read more about selecting fields.](https://docs.spatie.be/laravel-query-builder/v2/features/selecting-fields/)\n\n### Appending attributes to a query: `/users?append=full_name`\n\n```php\n$users = QueryBuilder::for(User::class)\n    ->allowedAppends(\'full_name\')\n    ->get()\n    ->toJson();\n\n// the resulting JSON will have the `getFullNameAttribute` attributes included\n```\n\n[Read more about appending attributes.](https://docs.spatie.be/laravel-query-builder/v2/features/appending-attributes/)\n\n## Installation\n\nYou can install the package via composer:\n\n```bash\ncomposer require spatie/laravel-query-builder\n```\n\nRead the installation notes on the docs site: [https://docs.spatie.be/laravel-query-builder/v2/installation-setup](https://docs.spatie.be/laravel-query-builder/v2/installation-setup/).\n\n## Documentation\n\nYou can find the documentation on [https://docs.spatie.be/laravel-query-builder/v2](https://docs.spatie.be/laravel-query-builder/v2).\n\nFind yourself stuck using the package? Found a bug? Do you have general questions or suggestions for improving the media library? Feel free to [create an issue on GitHub](https://github.com/spatie/laravel-query-builder/issues), we\'ll try to address it as soon as possible.\n\nIf you\'ve found a bug regarding security please mail [freek@spatie.be](mailto:freek@spatie.be) instead of using the issue tracker.\n\n### Upgrading from v1 to v2\n\nPlease see [UPGRADING.md](UPGRADING.md) for details.\n\n### Testing\n\n```bash\ncomposer test\n```\n\n### Changelog\n\nPlease see [CHANGELOG](CHANGELOG.md) for more information what has changed recently.\n\n## Contributing\n\nPlease see [CONTRIBUTING](CONTRIBUTING.md) for details.\n\n### Security\n\nIf you discover any security related issues, please email freek@spatie.be instead of using the issue tracker.\n\n## Postcardware\n\nYou\'re free to use this package, but if it makes it to your production environment we highly appreciate you sending us a postcard from your hometown, mentioning which of our package(s) you are using.\n\nOur address is: Spatie, Samberstraat 69D, 2060 Antwerp, Belgium.\n\nWe publish all received postcards [on our company website](https://spatie.be/en/opensource/postcards).\n\n## Credits\n\n- [Alex Vanderbist](https://github.com/AlexVanderbist)\n- [All Contributors](../../contributors)\n\n## Support us\n\nSpatie is a webdesign agency based in Antwerp, Belgium. You\'ll find an overview of all our open source projects [on our website](https://spatie.be/opensource).\n\nDoes your business depend on our contributions? Reach out and support us on [Patreon](https://www.patreon.com/spatie).\nAll pledges will be dedicated to allocating workforce on maintenance and new awesome stuff.\n\n## License\n\nThe MIT License (MIT). Please see [License File](LICENSE.md) for more information.\n\n'