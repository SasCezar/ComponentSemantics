b'# DuckRails [![GitHub version](https://badge.fury.io/gh/iridakos%2Fduckrails.svg?a=5)](https://badge.fury.io/gh/iridakos%2Fduckrails?a=5) [![Build Status](https://travis-ci.org/iridakos/duckrails.svg?branch=master)](https://travis-ci.org/iridakos/duckrails)\n\nDuckRails is a development tool.\n\nIts main purpose is to allow developers to quickly mock API endpoints that for many possible reasons they can\'t reach at a specific time.\n\n> If it looks like a duck, walks like a duck and quacks like a duck, then it\'s a duck :duck:\n\n![Home Page](https://github.com/iridakos/duckrails/blob/master/documentation/readme/resources/duckrails-home-page.png?raw=true)\n\n## How it works\n\nThe application allows creating new routes dynamically to which developers can assign static or dynamic responses:\n\n- body\n- headers\n- content type\n- status code\n\nor even cause delays, timeouts etc.\n\n### Guides\n\nThe repository\'s [wiki pages](https://github.com/iridakos/duckrails/wiki) contain all you need to know.\n* [What is DuckRails?](https://github.com/iridakos/duckrails/wiki/What-is-DuckRails%3F)\n* [Setting up the application](https://github.com/iridakos/duckrails/wiki/Setting-up-the-application)\n  * [natively](https://github.com/iridakos/duckrails/wiki/Setup-DuckRails-natively)\n  * [via docker](https://github.com/iridakos/duckrails/wiki/Setup-DuckRails-via-Docker)\n* [Using DuckRails](https://github.com/iridakos/duckrails/wiki/Using-DuckRails)\n  * [The mock form](https://github.com/iridakos/duckrails/wiki/Using-the-mock-form)\n  * [The mock index page](https://github.com/iridakos/duckrails/wiki/Using-the-mock-index-page)\n* [Creating mocks](https://github.com/iridakos/duckrails/wiki/Creating-mocks)\n  * [Route paths with variables](https://github.com/iridakos/duckrails/wiki/Route-paths-with-variables)\n  * [Static mock](https://github.com/iridakos/duckrails/wiki/Creating-a-simple-static-mock)\n  * [Dynamic mock with embedded Ruby](https://github.com/iridakos/duckrails/wiki/Creating-a-dynamic-mock-with-embedded-ruby)\n  * [Dynamic mock with JavaScript](https://github.com/iridakos/duckrails/wiki/Creating-a-dynamic-mock-with-Javascript)\n  * [Mock wrapping an existing API call](https://github.com/iridakos/duckrails/wiki/Creating-a-dynamic-mock-that-wraps-an-existing-API-call)\n  * [Advanced mock (WIP)](https://github.com/iridakos/duckrails/wiki/Creating-an-advanced-mock)\n\nYou can find the old DuckRails\' guides [at my blog](http://iridakos.com/2016/04/01/duckrails-guide.html).\n\n### Example\n\nMocks index page\n\n![Mocks index page](https://github.com/iridakos/duckrails/blob/master/documentation/readme/resources/duckrails-mock-index-page.png?raw=true)\n\nChanging mocks order\n\n![Change mocks order](https://github.com/iridakos/duckrails/blob/master/documentation/readme/resources/duckrails-change-mock-order.png?raw=true)\n\nSetting general mock properties\n\n![General mock properties](https://github.com/iridakos/duckrails/blob/master/documentation/readme/resources/duckrails-mock-general-tab.png?raw=true)\n\nDefining the response body\n\n![Defining the response body](https://github.com/iridakos/duckrails/blob/master/documentation/readme/resources/duckrails-mock-response-body-tab.png?raw=true)\n\nSetting response headers\n\n![Setting response headers](https://github.com/iridakos/duckrails/blob/master/documentation/readme/resources/duckrails-mock-headers-tab.png?raw=true)\n\nSetting some advanced configuration (delays, dynamic headers, content type & status)\n\n![Advanced configuration](https://github.com/iridakos/duckrails/blob/master/documentation/readme/resources/duckrails-mock-advanced.png?raw=true)\n\nUpon save the route becomes available to the application and you can use the endpoint:\n\n![Request](http://i.imgur.com/NaCIqs9.png)\n![Headers](http://i.imgur.com/1jZciKH.png)\n\n## Supported response functionality\n\nYou can define static or dynamic responses for a mock.\n\nCurrently supported dynamic types are:\n\n- Embedded Ruby\n- JavaScript\n\n### Embedded Ruby\n\nWhen specifying dynamic content of embedded Ruby (more options to be added), you can read as local variables:\n\n- `@parameters`: The parameters of the request\n- `@request`: The request\n- `@response`: The response\n\n### JavaScript\n\nWhen specifying dynamic content of JavaScript type, you can read as local variables:\n\n- `parameters`: The parameters of the request\n- `headers`: The request headers\n\nThe script should always return a string (for JSON use `JSON.stringify(your_variable)`)\n\n### Route paths\n\nYou can specify routes and access their parts in the *@parameters* variable, for example:\n\n`/authors/:author_id/posts/:post_id`\n\ngive you access to the parameters with:\n\n`@parameters[:author_id]`\n\n`@parameters[:post_id]`\n\n## Quick setup (development environment)\n\n* Clone the repository.\n* Copy the sample database configuration file (`config/database.yml.sample`) under `config/database.yml` and edit it to reflect your preferred db configuration (defaults to sqlite3). If you change the database adapter, make sure you include the appropriate gem in your `Gemfile` (ex. for mysql `gem \'mysql2\'`)\n* Execute `bundle install` to install the required gems.\n* Execute `rake db:setup` to setup the database.\n* Execute `rails server` to start the application on the default port.\n* Duckrails can be run concurrently and in parallelism, thus instead of the default rails server, you may start the [puma](https://github.com/puma/puma) server with something like: `bundle exec puma -t 8:16 -w 3`\n\n## Better setup (production environment)\n* Clone the repository.\n* Copy the sample database configuration file (`config/database.yml.sample`) under `config/database.yml` and edit it to reflect your preferred db configuration (defaults to sqlite3). If you change the database adapter, make sure you include the appropriate gem in your `Gemfile` (ex. for mysql `gem \'mysql2\'`)\n* Execute `bundle install` to install the required gems.\n* Export an env variable for your [secret key base](http://stackoverflow.com/questions/23726110/missing-production-secret-key-base-in-rails): `export SECRET_KEY_BASE="your_secret_key_base_here"`\n* Execute `RAILS_ENV=production rake db:setup` to setup the database.\n* Execute `RAILS_ENV=production rake assets:precompile` to generate the assets.\n* Execute `bundle exec rails s -e production` to start the application on the default port.\n* Duckrails can be run concurrently and in parallelism, thus instead of the default rails server, you may start the [puma](https://github.com/puma/puma) server with something like: `RAILS_ENV=production bundle exec puma -t 8:16 -w 3`\n\n## Database configuration\n\nThe application is by default configured to use sqlite3. If you want to use another configuration, update the `config/database.yml` accordingly to match your setup.\n\n## Docker\n\nA docker image is available at docker hub under [iridakos/duckrails](https://hub.docker.com/r/iridakos/duckrails/).\n\nTo obtain the image use:\n\n`docker pull iridakos/duckrails`\n\nTo start the application and bind it to a port (ex. 4000) use:\n\n`docker run -p 4000:80 iridakos/duckrails:latest`\n\n## Contributing\n\n1. Fork it ( https://github.com/iridakos/duckrails/fork )\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am \'Add some feature\'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## License\n\nThis application is open source under the [MIT License](https://opensource.org/licenses/MIT) terms.\n'