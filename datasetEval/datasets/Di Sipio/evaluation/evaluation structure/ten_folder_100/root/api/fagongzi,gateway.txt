b'<img src="./images/logo.png" height=80></img>\n\n[![Gitter](https://badges.gitter.im/fagongzi/gateway.svg)](https://gitter.im/fagongzi/gateway?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\n[![Build Status](https://api.travis-ci.org/fagongzi/gateway.svg)](https://travis-ci.org/fagongzi/gateway)\n[![Go Report Card](https://goreportcard.com/badge/github.com/fagongzi/gateway)](https://goreportcard.com/report/github.com/fagongzi/gateway)\n\nGateway/[\xe7\xae\x80\xe4\xbd\x93\xe4\xb8\xad\xe6\x96\x87](README_CN.md)\n-------\nGateway is a restful API gateway based on HTTP, which can be used as a unified API access layer.\n\n## Tutorial\nA very detailed tutorial for beginners. [Link](./docs/tutorial.md)  \nBelow are video tutorials.  \nBasics:  \n[![](https://img.youtube.com/vi/2qMWmdcw7o4/0.jpg)](https://www.youtube.com/watch?v=2qMWmdcw7o4)  \n\nAlternative bilibili.com video link: https://www.bilibili.com/video/av73432556/\n\nRouting Configuration Tutorial:  \n[![](https://img.youtube.com/vi/D1pI6opB_ks/0.jpg)](https://www.youtube.com/watch?v=D1pI6opB_ks)  \n\nAlternative bilibili.com video link: https://www.bilibili.com/video/av73432836/\n\nJWT Plugin Configuration Tutorial:  \n[![](https://img.youtube.com/vi/sLb16YDSlBs/0.jpg)](https://www.youtube.com/watch?v=sLb16YDSlBs)  \n\nAlternative bilibili.com video link: https://www.bilibili.com/video/av73433002/\n\n## Attention\nPlease make sure your Go version is 1.10 or above. Otherwise, **undefined "math/rand".Shuffle** error will occur when compiling. [StackOverFlow Link](https://stackoverflow.com/questions/52172794/getting-undefined-rand-shuffle-in-golang)\n\n\n## Features\n* Traffic Control (on Server or API)\n* Circuit Breaker (on Server or API)\n* Load Balance\n* Service Discovery\n* Plugin\n* Routing (Divert Traffic, Duplicate Traffic)\n* API Aggregation\n* API Argument Check\n* API Access Control (White and Black List)\n* API Default Return Value\n* API Customized Return Value\n* API Result Cache\n* JWT Authorization\n* API Metric Imports Prometheus\n* API Retry After Failure\n* Backend Server Health Check\n* Open Management of API (GRPC\xe3\x80\x81Restful)\n* Websocket Support\n* Online Data Migration Support\n\n## Docker\n\nThe following content requires reader some knowledge of Docker. You can refer to [this book][2], or check out [the official documentation][1]\xe3\x80\x82\n\n### Quick Start\nUse `docker pull fagongzi/gateway` command to download gateway Docker image.\n`docker run -d -p 9093:9093 -p 80:80 -p 9092:9092 fagongzi/gateway` initiates the container. 3 Ports are exposed:\n\n* 80\n\n  Proxy\'s HTTP port, this port is for client access.\n\n* 9092\n\n  APIServer\'s external GRPC port\n\n* 9093\n\n  APIServer\'s external HTTP Restful port. Visit `http://127.0.0.1:9093/ui/index.html` to access the web UI.\n\nRunning parameters can be set by the following environment varaibles. Configuration overrides default.\n\n- GW_PROXY_OPTS\n\n   All options in `proxy --help` are supported.\n\n- API_SERVER_OPTS\n\n   All options in `apiserver --help` are supported.\n\n- ETCD_OPTS\n\n   All options in `etcd --help` are supported.\n\n### Available Docker Images\n* `fagongzi/proxy`\n\n   proxy component, `production ready`\n\n* `fagongzi/apiserver`\n\n   apiserver component, `production ready`\n\n### Quick start with docker-compose\n```bash\ndocker-compose up -d\n```\n\nUse `http://127.0.0.1:9093/ui/index.html` to access `apiserver`\n\nUse `http://127.0.0.1` to access to your API\n\n## Architecture\n![](./images/arch.png)\n\n## Web UI\nAvailable Gateway Web UI Projects\xef\xbc\x9a\n* [Official](https://github.com/fagongzi/gateway-ui-vue)\n* [gateway_ui](https://github.com/archfish/gateway_ui)\n* [gateway_admin_ui](https://github.com/wilehos/gateway_admin_ui)\n\n## Components\nGateway consists of `proxy` and `apiserver`.\n\n### Proxy\nProxy is a component which provides service to clients. Proxy is a stateless node. Multiple proxies can be deployed to handle huge traffic.\n[More](./docs/proxy.md).\n\n### ApiServer\nApiServer provides GRPC and Restful to manage metadata for users. ApiServer integrates  official Web UI. \n[More](./docs/apiserver.md).\n\n## Concepts of Gateway\n### Server\nA server is a a real backend service.\n[More](./docs/server.md).\n\n### Cluster\nCluster consists of servers which provide the same service. A server is chosen to handle a specific request based on a load balance strategy.\n[More](./docs/cluster.md).\n\n### API\nAPI is a key concept of Gateway. We can manage external APIs in Gateway and their distribution rules, aggregation rules and URL matching rules.\n[More](./docs/api.md).\n\n### Routing\nRouting is a route strategy. Cookie, Querystring, Header and Path in HTTP Request dictate traffic distribution and traffic duplication to a specific cluster. Through this feature, AB test and online traffic divertion is achieved.\n[More](./docs/routing.md).\n\n## Getting Involved\n[More](./docs/build.md)\n\n## WeChat\n![](./images/qr.jpg)\n\n[1]: https://docs.docker.com/ "Docker Documentation"\n[2]: https://github.com/yeasy/docker_practice "docker_practice"\n'