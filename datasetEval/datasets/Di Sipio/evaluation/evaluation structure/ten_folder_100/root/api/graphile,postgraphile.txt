b'<img width="120" height="120" title="PostGraphile logo" src="https://cdn.rawgit.com/graphile/graphile.github.io/a6225f8c3052df5c276ecef28aeb0cade1aec16a/logos/postgraphile.optimized.svg" />\n\n# PostGraphile\n\n[![Patreon sponsor button](https://img.shields.io/badge/sponsor-via%20Patreon-orange.svg)](https://patreon.com/benjie)\n[![Discord chat room](https://img.shields.io/discord/489127045289476126.svg)](http://discord.gg/graphile)\n[![Package on npm](https://img.shields.io/npm/v/postgraphile.svg?style=flat)](https://www.npmjs.com/package/postgraphile)\n![MIT license](https://img.shields.io/npm/l/postgraphile.svg)\n[![Follow](https://img.shields.io/badge/twitter-@GraphileHQ-blue.svg)](https://twitter.com/GraphileHQ)\n\n_**Instant lightning-fast GraphQL API backed primarily by your PostgreSQL database. Highly customisable and extensible thanks to incredibly powerful plugin system.**_ _Formerly "PostGraphQL"._\n\n## Documentation: [graphile.org/postgraphile](https://graphile.org/postgraphile)\n\n<!-- SPONSORS_BEGIN -->\n\n## Crowd-funded open-source software\n\nTo help us develop this software sustainably under the MIT license, we ask\nall individuals and businesses that use it to help support its ongoing\nmaintenance and development via sponsorship.\n\n### [Click here to find out more about sponsors and sponsorship.](https://www.graphile.org/sponsor/)\n\nAnd please give some love to our featured sponsors \xf0\x9f\xa4\xa9:\n\n<table><tr>\n<td align="center"><a href="http://chads.website/"><img src="https://www.graphile.org/images/sponsors/chadf.png" width="90" height="90" alt="Chad Furman" /><br />Chad Furman</a></td>\n<td align="center"><a href="https://storyscript.io/?utm_source=postgraphile"><img src="https://www.graphile.org/images/sponsors/storyscript.png" width="90" height="90" alt="Storyscript" /><br />Storyscript</a></td>\n<td align="center"><a href="http://p72.vc/"><img src="https://www.graphile.org/images/sponsors/p72.png" width="90" height="90" alt="Point72 Ventures" /><br />Point72 Ventures</a></td>\n</tr></table>\n\n<!-- SPONSORS_END -->\n\n## About\n\n**GraphQL** is a new way of communicating with your server. It eliminates the problems of over- and under-fetching, incorporates strong data types, has built-in introspection, documentation and deprecation capabilities, and is implemented in many programming languages. This all leads to gloriously low-latency user experiences, better developer experiences, and much increased productivity. Because of all this, GraphQL is typically used as a replacement for (or companion to) RESTful API services.\n\n**PostgreSQL** is the self-proclaimed \xe2\x80\x9cworld\xe2\x80\x99s most advanced open source database,\xe2\x80\x9d with each new release bring more amazing features and performance gains. Thinking of your database as a plain CRUD store is now an archaic viewpoint as modern PostgreSQL can do so much for you &mdash; from authorization with Row-Level Security (RLS, introduced in PG9.5), through Foreign Data Wrappers (FDW), to real time notifications with `LISTEN`/`NOTIFY`.\n\n**PostGraphile** pairs these two incredible technologies together, helping you not only build applications more rapidly, but to build lightning-fast applications. PostGraphile allows you to access the power of PostgreSQL through a well designed, extensible, customisable and incredibly performant GraphQL server. It automatically detects tables, columns, indexes, relationships, views, types, functions, comments, and more - providing a GraphQL server that is highly intelligent about your data, and that automatically updates itself without restarting when you change your database schema.\n\nWith PostGraphile, a well designed database schema should serve the basis for a well thought out API. PostgreSQL already has amazing authorization and relationship infrastructure, _why duplicate that logic_ in a custom API? A PostGraphile API is likely to provide a more performant and standards compliant GraphQL API than any created in-house, and can be built in a fraction of the time. Focus on your product and let PostGraphile worry about the API layer. Once you need to expand beyond this, we have a powerful plugin system including many [community contributed plugins](https://www.graphile.org/postgraphile/community-plugins/). For a critical evaluation of PostGraphile to determine if it fits in your tech stack, read [evaluating PostGraphile for your project](https://www.graphile.org/postgraphile/evaluating/).\n\n## Introduction\n\nWatch a talk by the original author [Caleb](https://twitter.com/calebmer) at GraphQL Summit for a walk-through of building an application with PostGraphile in under 7 minutes. This was using v2 (then called PostGraphQL); we\'re now up to v4 which has many more bells and whistles!\n\n[![PostGraphile at GraphQL Summit](https://img.youtube.com/vi/b3pwlCDy6vY/0.jpg)](https://www.youtube.com/watch?v=b3pwlCDy6vY)\n\nHear from the current maintainer [Benjie](https://twitter.com/benjie) at GraphQL Finland about the benefits of Database-Driven GraphQL Development:\n\n[![Database Driven GraphQL Development at GraphQL Finland](https://img.youtube.com/vi/XDOrhTXd4pE/0.jpg)](https://www.youtube.com/watch?v=XDOrhTXd4pE)\n\n## Usage\n\n**Documentation: [graphile.org/postgraphile](https://graphile.org/postgraphile)**\n\nYou can use PostGraphile via the CLI, as a Node.js middleware, or use the GraphQL schema directly. Make sure to check out the **[full usage instructions](https://graphile.org/postgraphile/usage/)** on the documentation website. We also have a [PostgreSQL schema design guide](https://www.graphile.org/postgraphile/postgresql-schema-design/) you can follow to build a fully functional PostGraphile API.\n\n### CLI\n\nTo get started you can install PostGraphile globally:\n\n```bash\nnpm install -g postgraphile\n```\n\n\xe2\x80\xa6and then just run it! By default, PostGraphile will connect to your local database at `postgres://localhost:5432` and introspect the `public` schema. See [the available CLI flags](https://www.graphile.org/postgraphile/usage-cli/) with:\n\n```bash\npostgraphile --help\n```\n\nWhen you\'re ready to use PostGraphile for your own project, you\'re advised to install it locally with `yarn`, and run it with `npx`:\n\n```bash\nyarn add postgraphile\nnpx postgraphile --help\n```\n\n### Middleware\n\nYou can also use PostGraphile as [native HTTP, Connect, Express, or Koa (experimental) middleware](https://www.graphile.org/postgraphile/usage-library/), e.g.:\n\n```bash\nyarn add postgraphile\n```\n\n```js\nimport { createServer } from \'http\';\nimport postgraphile from \'postgraphile\';\n\ncreateServer(postgraphile());\n```\n\nCheck out [hapi-postgraphile](https://github.com/mshick/hapi-postgraphile) if you\'re interested in using PostGraphile as a [hapi](https://github.com/hapijs/hapi) server plugin.\n\n### Docker\n\nTo run via Docker, simply pass the [CLI options](https://www.graphile.org/postgraphile/usage-cli/) to the Docker container:\n\n```bash\ndocker pull graphile/postgraphile\ndocker run --init graphile/postgraphile --help\n```\n\nE.g. you might run this command (substituting the relevant variables):\n\n```bash\ndocker run --init -p 5000:5000 graphile/postgraphile --connection postgres://POSTGRES_USER:POSTGRES_PASSWORD@POSTGRES_HOST:POSTGRES_PORT/POSTGRES_DATABASE --schema app_public --watch\n```\n\n## Read More\n\n**Full documentation for PostGraphile is located at [graphile.org/postgraphile](https://graphile.org/postgraphile).**\n\nPostGraphile features include:\n\n- Authorization (security) provided by PostgreSQL:\n  - [role-based access control (RBAC)](https://www.postgresql.org/docs/10/static/sql-grant.html)\n  - [row-level security (RLS)][row-level-security]\n- [Automatic GraphQL relations from SQL relations](https://www.graphile.org/postgraphile/relations/)\n- [PostgreSQL procedure support][procedure documentation]:\n  - [Custom queries][advanced queries documentation]\n  - [Custom mutations](https://www.graphile.org/postgraphile/custom-mutations/)\n  - [Computed columns](https://www.graphile.org/postgraphile/computed-columns/)\n- Development UI (GraphiQL) built in\n- `--watch` mode, auto-detects changes in SQL schema, hot-reloads changes into GraphiQL\n- [Automatic documentation, enhanced by PostgreSQL `COMMENT`s](http://www.postgresql.org/docs/current/static/sql-comment.html)\n- [Schema customisation through smart comments](https://www.graphile.org/postgraphile/smart-comments/)\n- [Simple JWT authentication straight from the database](https://www.graphile.org/postgraphile/security/)\n- [Cursor-based pagination, Relay (classic & modern) compatible](https://www.graphile.org/postgraphile/connections/)\n- Global object identifiers (`nodeId` by default, but Relay-favoured `id` with `--classic-ids`)\n- Relay-compatible mutations\n- [Use direct from the CLI](https://www.graphile.org/postgraphile/usage-cli/)\n- [Use as Express, Connect, or Koa middleware](https://www.graphile.org/postgraphile/usage-library/)\n- [Just use the generated GraphQL schema](https://www.graphile.org/postgraphile/usage-schema/)\n\n[procedure documentation]: https://www.graphile.org/postgraphile/procedures/\n[advanced queries documentation]: https://www.graphile.org/postgraphile/custom-queries/\n[row-level-security]: http://www.postgresql.org/docs/current/static/ddl-rowsecurity.html\n\n## Requirements\n\n[Full requirements are on the website](https://www.graphile.org/postgraphile/requirements/), but a basic summary is:\n\n- Node v8.6+\n- PostgreSQL 9.6+ (officially; but currently works with 9.4+)\n- Linux, macOS or Windows\n\nCaveats:\n\n- PostGraphile does not have automated tests on Windows, if you notice any\n  issues please file them (or send a PR!)\n\n## Supporting PostGraphile\n\nThe fastest and easiest way you can help PostGraphile thrive is by [sponsoring\nongoing development and maintenance](https://graphile.org/sponsor/).\n\nWant to help testing and developing PostGraphile? Check out the [contributing\ndocument](CONTRIBUTING.md) to get started quickly!\n\nCommercial support, consultancy and development services are available direct\nfrom the maintainer; see [Professional Services](https://www.graphile.org/support/)\nfor more information, or get in touch!\n\nThe maintainer of this project is [@Benjie](https://twitter.com/benjie) -\nfollow him on Twitter!\n\n## Thanks\n\nHuge thanks to [the individuals and companies who sponsor PostGraphile\'s\ndevelopment](SPONSORS.md) - their financial contributions enable more time to\nbe spent on the project: from bug fixes, to code review, to new features! If\nyou want to help the project advance more rapidly, please join them in\n[supporting this project](https://graphile.org/sponsor/) \xf0\x9f\x99\x8f\n\nA humongous, heart-felt, thank you to the original author of PostGraphile -\n[Caleb Meredith](https://twitter.com/calebmer) - for everything he put into\nPostGraphile! He\'s now graduated from the project and we all wish him the best\nfor his future ventures!\n\nThanks also to the people working on\n[PostgREST](https://github.com/begriffs/postgrest) which was a huge inspiration\nfor this project!\n\nThanks and enjoy \xf0\x9f\x91\x8d\n'