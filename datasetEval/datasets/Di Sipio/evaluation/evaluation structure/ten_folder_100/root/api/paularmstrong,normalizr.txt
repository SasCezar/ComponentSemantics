b'# normalizr [![build status](https://img.shields.io/travis/paularmstrong/normalizr/master.svg?style=flat-square)](https://travis-ci.org/paularmstrong/normalizr) [![Coverage Status](https://img.shields.io/coveralls/paularmstrong/normalizr/master.svg?style=flat-square)](https://coveralls.io/github/paularmstrong/normalizr?branch=master) [![npm version](https://img.shields.io/npm/v/normalizr.svg?style=flat-square)](https://www.npmjs.com/package/normalizr) [![npm downloads](https://img.shields.io/npm/dm/normalizr.svg?style=flat-square)](https://www.npmjs.com/package/normalizr) [![Greenkeeper badge](https://badges.greenkeeper.io/paularmstrong/normalizr.svg)](https://greenkeeper.io/)\n\n## Install\n\nInstall from the NPM repository using yarn or npm:\n\n```shell\nyarn add normalizr\n```\n\n```shell\nnpm install normalizr\n```\n\n## Motivation\n\nMany APIs, public or not, return JSON data that has deeply nested objects. Using data in this kind of structure is often very difficult for JavaScript applications, especially those using [Flux](http://facebook.github.io/flux/) or [Redux](http://redux.js.org/).\n\n## Solution\n\nNormalizr is a small, but powerful utility for taking JSON with a schema definition and returning nested entities with their IDs, gathered in dictionaries.\n\n## Documentation\n\n* [Introduction](/docs/introduction.md)\n  * [Build Files](/docs/introduction.md#build-files)\n* [Quick Start](/docs/quickstart.md)\n* [API](/docs/api.md)\n  * [normalize](/docs/api.md#normalizedata-schema)\n  * [denormalize](/docs/api.md#denormalizeinput-schema-entities)\n  * [schema](/docs/api.md#schema)\n* [Using with JSONAPI](/docs/jsonapi.md)\n\n## Examples\n\n* [Normalizing GitHub Issues](/examples/github)\n* [Relational Data](/examples/relationships)\n* [Interactive Redux](/examples/redux)\n\n## Quick Start\n\nConsider a typical blog post. The API response for a single post might look something like this:\n\n```json\n{\n  "id": "123",\n  "author": {\n    "id": "1",\n    "name": "Paul"\n  },\n  "title": "My awesome blog post",\n  "comments": [\n    {\n      "id": "324",\n      "commenter": {\n        "id": "2",\n        "name": "Nicole"\n      }\n    }\n  ]\n}\n```\n\nWe have two nested entity types within our `article`: `users` and `comments`. Using various `schema`, we can normalize all three entity types down:\n\n```js\nimport { normalize, schema } from \'normalizr\';\n\n// Define a users schema\nconst user = new schema.Entity(\'users\');\n\n// Define your comments schema\nconst comment = new schema.Entity(\'comments\', {\n  commenter: user\n});\n\n// Define your article\nconst article = new schema.Entity(\'articles\', {\n  author: user,\n  comments: [comment]\n});\n\nconst normalizedData = normalize(originalData, article);\n```\n\nNow, `normalizedData` will be:\n\n```js\n{\n  result: "123",\n  entities: {\n    "articles": {\n      "123": {\n        id: "123",\n        author: "1",\n        title: "My awesome blog post",\n        comments: [ "324" ]\n      }\n    },\n    "users": {\n      "1": { "id": "1", "name": "Paul" },\n      "2": { "id": "2", "name": "Nicole" }\n    },\n    "comments": {\n      "324": { id: "324", "commenter": "2" }\n    }\n  }\n}\n```\n\n## Dependencies\n\nNone.\n\n## Credits\n\nNormalizr was originally created by [Dan Abramov](http://github.com/gaearon) and inspired by a conversation with [Jing Chen](https://twitter.com/jingc). Since v3, it was completely rewritten and maintained by [Paul Armstrong](https://twitter.com/paularmstrong). It has also received much help, enthusiasm, and contributions from [community members](https://github.com/paularmstrong/normalizr/graphs/contributors).\n'