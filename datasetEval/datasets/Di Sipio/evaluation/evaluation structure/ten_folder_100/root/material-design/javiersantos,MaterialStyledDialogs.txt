b'<h1 align="center">MaterialStyledDialogs <a href="https://github.com/javiersantos/MaterialStyledDialogs#how-to-include"><img src="https://jitpack.io/v/javiersantos/MaterialStyledDialogs.svg"></a></h1>\n<h4 align="center">Android Library</h4>\n\n<p align="center">\n  <a target="_blank" href="https://android-arsenal.com/api?level=11"><img src="https://img.shields.io/badge/API-11%2B-orange.svg"></a>\n  <a target="_blank" href="https://travis-ci.org/javiersantos/MaterialStyledDialogs"><img src="https://travis-ci.org/javiersantos/MaterialStyledDialogs.svg?branch=master"></a>\n  <a target="_blank" href="http://android-arsenal.com/details/1/3136"><img src="https://img.shields.io/badge/Android%20Arsenal-MaterialStyledDialogs-blue.svg"></a>\n  <a target="_blank" href="https://www.paypal.me/javiersantos" title="Donate using PayPal"><img src="https://img.shields.io/badge/paypal-donate-yellow.svg" /></a>\n</p>\n\n<p align="center">Android Library that shows a beautiful and customizable Material designed dialog with header. Based on <a target="_blank" href="https://github.com/afollestad/material-dialogs">material-dialogs</a> and inspired by this <a target="_blank" href="https://dribbble.com/shots/2439453-Sprocket-AND-1-3-3-OS-Consistent-Dialogs">dribbble</a>.</p>\n\n![MaterialStyledDialogs](https://raw.githubusercontent.com/javiersantos/MaterialStyledDialogs/master/Screenshots/banner.png)\n\n## Sample Project\nYou can download the latest sample APK from Google Play:\n\n<a target="_blank" href="https://play.google.com/store/apps/details?id=com.github.javiersantos.materialstyleddialogs.demo"><img src="https://play.google.com/intl/en_us/badges/images/generic/en-play-badge.png" height="60"></a>\n\n## How to include\nAdd the repository to your project **build.gradle**:\n```Gradle\nrepositories {\n    jcenter()\n    maven {\n        url "https://jitpack.io"\n    }\n}\n```\n\nAnd add the library to your module **build.gradle**:\n```Gradle\ndependencies {\n    compile \'com.github.javiersantos:MaterialStyledDialogs:2.1\'\n}\n```\n\n## Usage\n### Basic Dialog\nA basic dialog will show the provided title (optional) and description, using your primary color as the header background. You have access to methods such as `setTitle()`, `setContent()`, `setIcon()`, `setCancelable()`, `dismiss()`, etc. Customizations are explained below.\n\n```Java\nnew MaterialStyledDialog.Builder(this)\n\t.setTitle("Awesome!")\n\t.setDescription("What can we improve? Your feedback is always welcome.")\n\t.show();\n```\nor using the builder...\n\n```Java\nMaterialStyledDialog dialog = new MaterialStyledDialog.Builder(this)\n\t.setTitle("Awesome!")\n\t.setDescription("What can we improve? Your feedback is always welcome.")\n\t.build();\n...\ndialog.show();\n```\n\n## Customizations ([Wiki](https://github.com/javiersantos/MaterialStyledDialogs/wiki))\n\n### Setting a style\n\n<table align="center">\n    <tr>\n        <th>\n            <img src="https://raw.githubusercontent.com/javiersantos/MaterialStyledDialogs/master/Screenshots/style-1.png" height="400" />\n        </td>\n        <th>\n            <img src="https://raw.githubusercontent.com/javiersantos/MaterialStyledDialogs/master/Screenshots/style-2.png" height="400" />\n        </td>\n    </tr>\n    <tr>\n    \t<td>Header with Icon (default): .setStyle(Style.HEADER_WITH_ICON)</td>\n    \t<td>Header with Title: .setStyle(Style.HEADER_WITH_TITLE)</td>\n    </tr>\n</table>\n\n```Java\nnew MaterialStyledDialog.Builder(this)\n\t.setTitle("Awesome!")\n\t.setDescription("What can we improve? Your feedback is always welcome.")\n\t.setStyle(Style.HEADER_WITH_ICON)\n\t//.setStyle(Style.HEADER_WITH_TITLE)\n\t.show();\n```\n\n### Displaying an icon\nThe dialog icon is displayed in the center of the dialog (as seen it the screenshots).\n\n```Java\nnew MaterialStyledDialog.Builder(this)\n\t.setTitle("Awesome!")\n\t.setDescription("What can we improve? Your feedback is always welcome.")\n\t.setIcon(R.drawable.ic_launcher)\n\t//.setIcon(ContextCompat.getDrawable(this, R.drawable.ic_launcher))\n\t.show();\n```\n\n### Using a custom header color\nBy default, your primary color will be used for the header background. However you can customize this by adding:\n\n```Java\nnew MaterialStyledDialog.Builder(this)\n\t.setTitle("Awesome!")\n\t.setDescription("What can we improve? Your feedback is always welcome.")\n\t.setHeaderColor(R.color.dialog_header)\n\t.show();\n```\n\n### Using an image as the header background\nCustomize your dialog by adding a drawable instead of a color.\n\n```Java\nnew MaterialStyledDialog.Builder(this)\n\t.setTitle("Awesome!")\n\t.setDescription("What can we improve? Your feedback is always welcome.")\n\t.setHeaderDrawable(R.drawable.header)\n\t//.setHeaderDrawable(ContextCompat.getDrawable(this, R.drawable.heaer))\n\t.show();\n```\n\n### Adding a darker/grey overlay to the header background\nSome icons or drawables may fit better when using a darker/grey overlay. Using the `.withDarkerOverlay()` method the library will apply a color filter to the header background. `false` by default.\n\n```Java\nnew MaterialStyledDialog.Builder(this)\n\t.setTitle("Awesome!")\n\t.setDescription("What can we improve? Your feedback is always welcome.")\n\t.setHeaderDrawable(R.drawable.header)\n\t.withDarkerOverlay(true)\n\t.show();\n```\n\n### Adding icon and dialog animations\nAn animation to the icon will be displayed when the dialog is opened. `true` by default.\n\n```Java\nnew MaterialStyledDialog.Builder(this)\n\t.setTitle("Awesome!")\n\t.setDescription("What can we improve? Your feedback is always welcome.")\n\t.withIconAnimation(true)\n\t.show();\n```\n\nThe dialog will be displayed with an animation when it is opened and closed. `false` by default.\n\n```Java\nnew MaterialStyledDialog.Builder(this)\n\t.setTitle("Awesome!")\n\t.setDescription("What can we improve? Your feedback is always welcome.")\n\t.withDialogAnimation(true)\n\t//.withDialogAnimation(true, Duration.SLOW)\n\t.show();\n```\n\n### Adding buttons and callbacks\nButtons are showed at the end of the bottom dialog. You can add your own text and actions/callbacks.\n\n```Java\nnew MaterialStyledDialog.Builder(this)\n\t.setTitle("Awesome!")\n\t.setDescription("What can we improve? Your feedback is always welcome.")\n\t.setPositiveText(R.string.button)\n\t.onPositive(new MaterialDialog.SingleButtonCallback() {\n\t\t@Override\n\t\tpublic void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which) {\n\t\t\tLog.d("MaterialStyledDialogs", "Do something!");\n\t})\n\t//.setNegativeText(...)\n\t//.onNegative(...)\n\t//.setNeutralText(...)\n\t//.onNeutral(...)\n\t.show();\n```\n\nIf no `onPositive(...)`, `onNegative(...)` or `onNeutral(...)` callbacks are provided, then the bottom dialog will be dismissed when tapping de button.\n\nIf `autoDismiss()` is turned `false`, then you must manually dismiss the dialog in these callbacks. Auto dismiss is `true` by default.\n\nA divider before the buttons can be added using the `.withDivider(true)` method (`false` by default).\n\n### Dismissing when touching outside\nThe `setCancelable()` method lets you disable dismissing the bottom dialog when you tap outside the dialog window. `true` by default.\n\n```Java\nnew MaterialStyledDialog.Builder(this)\n\t.setTitle("Awesome!")\n\t.setDescription("What can we improve? Your feedback is always welcome.")\n\t.setCancelable(true)\n\t.show();\n```\n\n### Adding a custom view\nYou can add custom view to your bottom dialog just by adding the layout to the `setCustomView()` method.\n\n```Java\nnew MaterialStyledDialog.Builder(this)\n\t.setTitle("Awesome!")\n\t.setDescription("What can we improve? Your feedback is always welcome.")\n\t.setCustomView(your_custom_view) // Old standard padding: .setCustomView(your_custom_view, 20, 20, 20, 0)\n\t//.setCustomView(your_custom_view, 10, 20, 10, 20) // int left, int top, int right, int bottom\n\t.show();\n```\n\nA detailed description is available at: https://github.com/javiersantos/MaterialStyledDialogs/wiki/Adding-a-custom-view\n\n### Making the content scrollable\nIf your dialog content is too long you may prefer to make it scrollable. By using the next method you can specify the minimum number of lines to show the scroll bar (`5 lines` by default).\n\n```Java\nnew MaterialStyledDialog.Builder(this)\n\t.setTitle("Awesome!")\n\t.setDescription("A loooooooooong looooooooooong really loooooooooong content. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam pulvinar sem nibh, et efficitur massa mattis eget. Phasellus condimentum ligula.")\n\t.setScrollable(true)\n\t//.setScrollable(true, 10)\n\t.show();\n```\n\n## License\n\tCopyright 2016-2018 Javier Santos\n\n\tLicensed under the Apache License, Version 2.0 (the "License");\n\tyou may not use this file except in compliance with the License.\n\tYou may obtain a copy of the License at\n\n\t   http://www.apache.org/licenses/LICENSE-2.0\n\n\tUnless required by applicable law or agreed to in writing, software\n\tdistributed under the License is distributed on an "AS IS" BASIS,\n\tWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\tSee the License for the specific language governing permissions and\n\tlimitations under the License.\n\n\tMaterialStyledDialogs includes code from material-dialogs, which is \n\tlicensed under the MIT license. You may obtain a copy at\n\t\n\t   https://github.com/afollestad/material-dialogs/blob/master/LICENSE.txt\n'