b'# Floating Action Button Speed Dial\n\n[![Maven metadata URI](https://img.shields.io/maven-metadata/v/http/jcenter.bintray.com/com/leinardi/android/speed-dial/maven-metadata.xml.svg?style=plastic)](https://jcenter.bintray.com/com/leinardi/android/speed-dial/maven-metadata.xml)\n[![Travis](https://img.shields.io/travis/leinardi/FloatingActionButtonSpeedDial/master.svg?style=plastic)](https://travis-ci.org/leinardi/FloatingActionButtonSpeedDial)\n[![GitHub license](https://img.shields.io/github/license/leinardi/FloatingActionButtonSpeedDial.svg?style=plastic)](https://github.com/leinardi/FloatingActionButtonSpeedDial/blob/master/LICENSE) \n[![Stars](https://img.shields.io/github/stars/leinardi/FloatingActionButtonSpeedDial.svg?style=social&label=Stars)](https://github.com/leinardi/FloatingActionButtonSpeedDial/stargazers) \n\n\n<img src="/art/demo_1.gif" width="290" align="right" hspace="0" />\n\nAndroid library providing an implementation of the [Material Design Floating Action Button Speed Dial](https://material.io/guidelines/components/buttons-floating-action-button.html#buttons-floating-action-button-transitions).\n\n## Features\n- [x] MinSdk 14\n- [x] Highly customizable (label, icon, ripple, fab and label background colors, themes support) \n- [x] Same animations as in [Inbox by Gmail](https://play.google.com/store/apps/details?id=com.google.android.apps.inbox)\n- [x] Option to have different icons for open/close state\n- [x] Optional overlay/touch guard layout\n- [x] Support for bottom, left and right menu expansion (left and right have no labels)\n- [x] Out-of-the box support for Snackbar behavior\n- [x] Optional support for `RecyclerView` and `NestedScrollView` behavior\n- [x] Support for VectorDrawable\n- [x] Easy to use\n\n## How to use\n### Gradle setup\n#### Official releases\nThe library is available on Jcenter so no additonal repository is required.\n\nDependencies entry (latest version on Jcenter [![Maven metadata URI](https://img.shields.io/maven-metadata/v/http/jcenter.bintray.com/com/leinardi/android/speed-dial/maven-metadata.xml.svg?style=flat)](https://jcenter.bintray.com/com/leinardi/android/speed-dial/maven-metadata.xml)):\n```groovy\nimplementation "com.leinardi.android:speed-dial:3.1.1"\n```\n#### Snapshots (development branch)\nYou can use JitPack to test the latest `master` (remember that `master` is the development branch and can be unstable or completely broken).\n\nAdd the JitPack repository to your build file:\n```groovy\nmaven { url \'https://jitpack.io\' }\n```\n\nAdd the dependency\n```groovy\nimplementation \'com.github.leinardi:FloatingActionButtonSpeedDial:master-SNAPSHOT\'\n```\n\n### Basic use\n#### `SpeedDialView`\nAdd the `SpeedDialView` to your layout:\n\n```xml\n<com.leinardi.android.speeddial.SpeedDialView\n    android:id="@+id/speedDial"\n    android:layout_width="wrap_content"\n    android:layout_height="wrap_content"\n    android:layout_gravity="bottom|end"\n    app:sdMainFabClosedSrc="@drawable/ic_add_white_24dp" />\n```\n\n#### Action items\nAdd the items to the `SpeedDialView`:\n```kotlin\nval speedDialView = findViewById<SpeedDialView>(R.id.speedDial)\nspeedDialView.addActionItem(\n    SpeedDialActionItem.Builder(R.id.fab_no_label, R.drawable.ic_link_white_24dp)\n        .create())\n```\n\nIf the color customization is not requested, it is also possible to inflate the Action items\nform a Menu Resource:\n```kotlin\nspeedDialView.inflate(R.menu.menu_speed_dial)\n```\nOnly the attributes `android:id`, `android:icon` and `android:title` are supported.\n\n#### Click listeners\nAdd the click listeners:\n```kotlin\nspeedDialView.setOnActionSelectedListener(SpeedDialView.OnActionSelectedListener { actionItem ->\n    when (actionItem.id) {\n        R.id.fab_no_label -> {\n            showToast("No label action clicked!\\nClosing with animation")\n            speedDialView.close() // To close the Speed Dial with animation\n            return@OnActionSelectedListener true // false will close it without animation\n        }\n    }\n    false\n})\n```\n\n### Optional steps\n#### Add the main action click listener\n```kotlin\nspeedDialView.setOnChangeListener(object : SpeedDialView.OnChangeListener {\n    override fun onMainActionSelected(): Boolean {\n        showToast("Main action clicked!")\n        return false // True to keep the Speed Dial open\n    }\n\n    override fun onToggleChanged(isOpen: Boolean) {\n        Log.d(TAG, "Speed dial toggle state changed. Open = $isOpen")\n    }\n})\n```\n\n#### Customizing the items\nThe `SpeedDialActionItem.Builder` provides several setters to customize the aspect of one item:\n\n```kotlin\nspeedDialView.addActionItem(SpeedDialActionItem.Builder(R.id.fab_custom_color, drawable)\n        .setFabBackgroundColor(ResourcesCompat.getColor(getResources(), R.color.material_white_1000, getTheme()))\n        .setFabImageTintColor(ResourcesCompat.getColor(getResources(), R.color.inbox_primary, getTheme()))\n        .setLabel(getString(R.string.label_custom_color))\n        .setLabelColor(Color.WHITE)\n        .setLabelBackgroundColor(ResourcesCompat.getColor(getResources(), R.color.inbox_primary, getTheme()))\n        .setLabelClickable(false)\n        .create())\n```\nIs is also possible to specify a theme to easily change the FAB background and ripple effect color:\n\n```kotlin\nspeedDialView.addActionItem(SpeedDialActionItem.Builder(R.id.fab_custom_theme, R.drawable.ic_theme_white_24dp)\n        .setLabel(getString(R.string.label_custom_theme))\n        .setTheme(R.style.AppTheme_Purple)\n        .create())\n```\n```xml\n<style name="AppTheme.Purple" parent="AppTheme">\n    <item name="colorPrimary">@color/material_purple_500</item>\n    <item name="colorPrimaryDark">@color/material_purple_700</item>\n    <item name="colorAccent">@color/material_purple_a700</item>\n    <item name="colorControlHighlight">@color/material_purple_200</item>\n</style>\n```\n\n#### Adding an overlay/touch guard when the menu is open (like Inbox by Gmail)\nYou simply need to add the `SpeedDialOverlayLayout` to your layout:\n\n```xml\n<com.leinardi.android.speeddial.SpeedDialOverlayLayout\n    android:id="@+id/overlay"\n    android:layout_width="match_parent"\n    android:layout_height="match_parent" />\n```\nand then provide the instance of that layout to the `SpeedDialView`:\n\n```xml\n<com.leinardi.android.speeddial.SpeedDialView\n    android:id="@+id/speedDial"\n    android:layout_width="wrap_content"\n    android:layout_height="wrap_content"\n    app:sdMainFabClosedSrc="@drawable/ic_add_white_24dp"\n    app:sdOverlayLayout="@id/overlay" />\n```\nor\n```kotlin\nval overlayLayout = findViewById<SpeedDialOverlayLayout>(R.id.overlay)\nspeedDialView.setSpeedDialOverlayLayout(overlayLayout)\n```\n\n#### Hiding the FAB when scrolling a `RecyclerView` or a `NestedScrollView`\nJust apply the `ScrollingViewSnackbarBehavior` to the `SpeedDialView`. This can be done via XML using\nthe convenience string resource `@string/speeddial_scrolling_view_snackbar_behavior`:\n\n```xml\n<com.leinardi.android.speeddial.SpeedDialView\n    android:id="@+id/speedDial"\n    android:layout_width="wrap_content"\n    android:layout_height="wrap_content"\n    app:layout_behavior="@string/speeddial_scrolling_view_snackbar_behavior" />\n```\n\nOr programmatically:\n```kotlin\nval params = speedDialView.layoutParams as CoordinatorLayout.LayoutParams\nparams.behavior = SpeedDialView.ScrollingViewSnackbarBehavior()\nspeedDialView.requestLayout()\n```\n\nNB: for the behaviors to work, `SpeedDialView` needs to be a direct child of `CoordinatorLayout`\n\n#### Disabling `SnackbarBehavior`\nSince the `SnackbarBehavior` is enabled by default and, afaik, it is not possible to remove a Behavior, simply use apply the `SpeedDialView.NoBehavior` instead:\n```kotlin\nval params = speedDialView.layoutParams as CoordinatorLayout.LayoutParams\nparams.behavior = SpeedDialView.NoBehavior()\nspeedDialView.requestLayout()\n```\n\n### Sample project\nA fully working example is available [here](/sample).\n\n## Demo\n### Video\nhttps://www.youtube.com/watch?v=tWowiF5ElAg\n### Sample app\n[![Get it on the Play Store](/art/playstore_getiton.png)](https://play.google.com/store/apps/details?id=com.leinardi.android.speeddial.sample)\n\n## Screenshots\n### API 27, API 16, bottom and left expansion\n<img src="/art/screenshot_api_27.png" width="215"/> <img src="/art/screenshot_api_16.png" width="215"/> <img src="/art/screenshot_api_27_top_fab_bottom_expansion.png" width="215"/> <img src="/art/screenshot_api_27_bottom_fab_left_expansion.png" width="215"/>\n\n## FAQ\n### How can I create a new resource ID, required by the `SpeedDialActionItem.Builder`?\nIt can be done in XML using the `<item type="id" />`:\n```xml\n<resources>\n    <item name="fab_action1" type="id" />\n    <item name="fab_action2" type="id" />\n    <item name="fab_action3" type="id" />\n    <item name="fab_action4" type="id" />\n</resources>\n```\n\n### How can I change the maximum length of the label?\nYou can set a different value for the max length of the label overriding `sd_label_max_width`:\n```\n<dimen name="sd_label_max_width">240dp</dimen>\n```\n\nMore info [here](https://developer.android.com/guide/topics/resources/more-resources.html#Id).\n\n### How can I change the color of the overlay / touch guard layout?\nThe color of the `SpeedDialOverlayLayout` can be changed simply using the `android:background` attribute or, programmatically, using the equivalent setter like any other view.\n\n### How can I prevent the overlay / touch guard layout from going over the `Toolbar` inside a `CoordinatorLayout`?\nIt can be done using the attribute `app:layout_behavior="@string/appbar_scrolling_view_behavior"`:\n```xml\n<com.leinardi.android.speeddial.SpeedDialOverlayLayout\n    android:id="@+id/overlay"\n    android:layout_width="match_parent"\n    android:layout_height="match_parent"\n    app:layout_behavior="@string/appbar_scrolling_view_behavior" />\n```\n\n## Changelog\nSee the [CHANGELOG.md](/CHANGELOG.md)\n\n## Credits\nThis project is based on [floating-action-menu by ArthurGhazaryan](https://github.com/ArthurGhazaryan/floating-action-menu).\n\n## Licenses\n```\nCopyright 2019 Roberto Leinardi.\n\nLicensed to the Apache Software Foundation (ASF) under one or more contributor\nlicense agreements.  See the NOTICE file distributed with this work for\nadditional information regarding copyright ownership.  The ASF licenses this\nfile to you under the Apache License, Version 2.0 (the "License"); you may not\nuse this file except in compliance with the License.  You may obtain a copy of\nthe License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an "AS IS" BASIS, WITHOUT\nWARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\nLicense for the specific language governing permissions and limitations under\nthe License.\n```\n'