b'# MaterialSheetFab\n[![Maven Central](https://img.shields.io/maven-central/v/com.gordonwong/material-sheet-fab.svg)](https://oss.sonatype.org/content/repositories/releases/com/gordonwong/material-sheet-fab/)\n[![Codacy Badge](https://api.codacy.com/project/badge/grade/7bc537c29cfc4b74917fb0b2448d7127)](https://www.codacy.com/app/gowong/material-sheet-fab)\n[![GitHub license](https://img.shields.io/badge/license-MIT-brightgreen.svg)](https://raw.githubusercontent.com/gowong/material-sheet-fab/master/LICENSE)\n[![Android Arsenal](https://img.shields.io/badge/Android%20Arsenal-MaterialSheetFab-green.svg?style=flat)](https://android-arsenal.com/details/1/2178)\n[![Android Weekly](https://img.shields.io/badge/Android%20Weekly-166-green.svg?style=flat)](http://androidweekly.net/issues/issue-166)\n\n\nLibrary that implements the floating action button to sheet [transition](https://www.google.com/design/spec/components/buttons-floating-action-button.html#buttons-floating-action-button-transitions) from Google\'s Material Design documentation. It can be used with any FAB library on Android 4.0+ (API levels >= 14).  \n\n![Transition](art/bgmonitor.gif)\n\n## Installation\n### Gradle\nAdd the dependency (available from mavenCentral and jcenter) to your `build.gradle`:  \n```groovy\nimplementation \'com.gordonwong:material-sheet-fab:1.2.1\'\n```\n\n### Proguard\nModify your proguard configuration (if your app is using Proguard).\n```java\n-keep class io.codetail.animation.arcanimator.** { *; }\n```\n\n## Usage\n### Implement the FAB:  \nYou can use any FAB library as long as it implements the `AnimatedFab` interface.  \n```java\nimport android.support.design.widget.FloatingActionButton;\n\npublic class Fab extends FloatingActionButton implements AnimatedFab {\n\n   /**\n    * Shows the FAB.\n    */\n    @Override\n    public void show() {\n        show(0, 0);\n    }\n\n    /**\n     * Shows the FAB and sets the FAB\'s translation.\n     *\n     * @param translationX translation X value\n     * @param translationY translation Y value\n     */\n    @Override\n    public void show(float translationX, float translationY) {\n        // NOTE: Using the parameters is only needed if you want\n        // to support moving the FAB around the screen.\n        // NOTE: This immediately hides the FAB. An animation can \n        // be used instead - see the sample app.\n        setVisibility(View.VISIBLE);\n    }\n\n    /**\n     * Hides the FAB.\n     */\n    @Override\n    public void hide() {\n        // NOTE: This immediately hides the FAB. An animation can\n        // be used instead - see the sample app.\n        setVisibility(View.INVISIBLE);\n    }\n}\n```\n\n### Modify the layouts:  \n```xml\n<RelativeLayout\n    android:layout_width="match_parent"\n    android:layout_height="match_parent">\n\n   <!-- Your FAB implementation -->\n   <path.to.your.fab\n        android:id="@+id/fab"\n        android:layout_alignParentBottom="true"\n        android:layout_alignParentEnd="true"\n        android:layout_alignParentRight="true" />\n\n    <!-- Overlay that dims the screen -->\n    <com.gordonwong.materialsheetfab.DimOverlayFrameLayout\n        android:id="@+id/overlay"\n        android:layout_width="match_parent"\n        android:layout_height="match_parent" />\n\n    <!-- Circular reveal container for the sheet -->\n    <io.codetail.widget.RevealLinearLayout\n        android:layout_width="match_parent"\n        android:layout_height="match_parent"\n        android:gravity="end|bottom"\n        android:orientation="vertical">\n\n        <!-- Sheet that contains your items -->\n        <android.support.v7.widget.CardView\n            android:id="@+id/fab_sheet"\n            android:layout_width="250dp"\n            android:layout_height="300dp">\n            \n            <!-- TODO: Put your sheet items here -->\n            \n        </android.support.v7.widget.CardView>\n    </io.codetail.widget.RevealLinearLayout>\n</RelativeLayout>\n```\n\n### Initialize the MaterialSheetFab:  \nThis can be in your Activity or Fragment.  \n```java\npublic class MaterialSheetFabActivity extends Activity {\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        Fab fab = (Fab) findViewById(R.id.fab);\n        View sheetView = findViewById(R.id.fab_sheet);\n        View overlay = findViewById(R.id.dim_overlay);\n        int sheetColor = getResources().getColor(R.color.fab_sheet_color);\n        int fabColor = getResources().getColor(R.color.fab_color);\n\n        // Initialize material sheet FAB\n        materialSheetFab = new MaterialSheetFab<>(fab, sheetView, overlay,\n            sheetColor, fabColor);\n    }\n}\n```\n\n### Optional:\n**Close sheet on back button:**  \n```java\n@Override\npublic void onBackPressed() {\n    if (materialSheetFab.isSheetVisible()) {\n        materialSheetFab.hideSheet();\n    } else {\n        super.onBackPressed();\n    }\n}\n```\n\n**Listen to events:**  \n```java\nmaterialSheetFab.setEventListener(new MaterialSheetFabEventListener() {\n    @Override\n    public void onShowSheet() {\n        // Called when the material sheet\'s "show" animation starts.\n    }\n    \n    @Override\n    public void onSheetShown() {\n        // Called when the material sheet\'s "show" animation ends.\n    }\n\n    @Override\n    public void onHideSheet() {\n        // Called when the material sheet\'s "hide" animation starts.\n    }\n     \n    public void onSheetHidden() {\n        // Called when the material sheet\'s "hide" animation ends.\n    }\n});\n```\n\n**Move the FAB around the screen** (this is useful for coordinating with [snackbars](http://www.google.com/design/spec/components/snackbars-toasts.html)):  \n```java\nmaterialSheetFab.showFab(translationX, translationY);\n```\n\n## Sample app\n[![Get it on Google Play](https://developer.android.com/images/brand/en_generic_rgb_wo_60.png)](https://play.google.com/store/apps/details?id=com.gordonwong.materialsheetfab.sample)\n\n![Sample 1](art/sample1.png) ![Sample 2](art/sample2.png)\n\nTake a look at the [sample code](./sample/) and try the [app](https://play.google.com/store/apps/details?id=com.gordonwong.materialsheetfab.sample).\n\n## Apps using MaterialSheetFab\nFeel free to open a pull request to include your app here.\n\nIcon | App\n --- | ---\n![BG Monitor](http://bg-monitor.com/images/favicon.png)|[BG Monitor - Diabetes Management](http://bg-monitor.com/)\n\n## Changelog\nSee changelog [here](./CHANGELOG.md).\n\n## Credits\nThe following libraries are used:  \n[CircularReveal](https://github.com/ozodrukh/CircularReveal) - Adds circular reveal animation on Android versions < 5.0  \n[ArcAnimator](https://github.com/asyl/ArcAnimator) - Used to animate FAB in an arc\n\n## License\n```\nThe MIT License (MIT)\n\nCopyright (c) 2015 Gordon Wong\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the "Software"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n```\n'