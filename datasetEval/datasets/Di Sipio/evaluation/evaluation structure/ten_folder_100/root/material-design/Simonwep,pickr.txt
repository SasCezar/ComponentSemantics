b'<h1 align="center">\n    <img src="https://user-images.githubusercontent.com/30767528/57573928-1e78db80-7430-11e9-940c-aecbf3226b7c.png" alt="Logo">\n</h1>\n\n<h3 align="center">\n    Flat, Simple, Hackable Color-Picker.\n</h3>\n\n<p align="center">\n  <img alt="gzip size" src="https://img.badgesize.io/https://raw.githubusercontent.com/Simonwep/pickr/master/dist/pickr.min.js?compression=gzip&style=flat-square">\n  <img alt="brotli size" src="https://img.badgesize.io/https://raw.githubusercontent.com/Simonwep/pickr/master/dist/pickr.min.js?compression=brotli&style=flat-square">\n  <a href="https://travis-ci.org/Simonwep/pickr"><img\n     alt="Build Status"\n     src="https://img.shields.io/travis/Simonwep/pickr.svg?style=popout-square"></a>\n  <a href="https://www.npmjs.com/package/@simonwep/pickr"><img\n     alt="Download count"\n     src="https://img.shields.io/npm/dm/@simonwep/pickr.svg?style=popout-square"></a>\n  <img alt="No dependencies" src="https://img.shields.io/badge/dependencies-none-27ae60.svg?style=popout-square">\n  <a href="https://www.jsdelivr.com/package/npm/@simonwep/pickr"><img\n     alt="JSDelivr download count"\n     src="https://data.jsdelivr.com/v1/package/npm/@simonwep/pickr/badge"></a>\n  <img alt="Current version"\n       src="https://img.shields.io/github/tag/Simonwep/pickr.svg?color=3498DB&label=version&style=flat-square">\n  <a href="https://www.patreon.com/simonwep"><img\n     alt="Support me"\n     src="https://img.shields.io/badge/patreon-support-3498DB.svg?style=popout-square"></a>\n</p>\n\n<br>\n\n<h3 align="center">\n  <img alt="Demo" src="https://user-images.githubusercontent.com/30767528/53578134-4e297e80-3b77-11e9-9d74-4d2ed547c274.gif"/>\n</h3>\n\n<h4 align="center">\n  <a href="https://simonwep.github.io/pickr/">Fully Featured demo</a>\n</h4>\n\n<br>\n\n<p align="center">\n    <a href="https://opencollective.com/pickr/donate" target="_blank">\n        <img src="https://user-images.githubusercontent.com/30767528/63641974-ade08c80-c6b7-11e9-827a-faa526b5c2bf.png" height="37"/>\n    </a>\n    <a href="https://www.buymeacoffee.com/aVc3krbXQ" target="_blank">\n        <img src="https://user-images.githubusercontent.com/30767528/63641973-9d301680-c6b7-11e9-9d29-2ad1da50fdce.png"></a>\n    </a>\n</p>\n\n### Features\n* Themes\n* Simple usage\n* Zero dependencies\n* Multiple color representations\n* Color comparison\n* Opacity control\n* Detail adjustments via. mouse-wheel\n* Responsive and auto-positioning\n* Supports touch devices\n* Swatches for quick-selection\n* Fully accessible \n* [Shadow-dom support](#selection-through-a-shadow-dom)\n\n### Themes\n|Classic|Monolith|Nano|\n|-------|--------|----|\n|![Classic theme](https://user-images.githubusercontent.com/30767528/59562615-01d35300-902f-11e9-9f07-44c9d16dbb99.png)|![Monolith](https://user-images.githubusercontent.com/30767528/59562603-c9cc1000-902e-11e9-9c84-1a606fa5f206.png)|![Nano](https://user-images.githubusercontent.com/30767528/59562578-8ec9dc80-902e-11e9-9882-2dacad5e6fa5.png)|\n\n> Nano uses css-grid thus it won\'t work in older browsers.\n\n## Getting Started\n### Node\nNote: The readme is always up-to-date with the latest commit. See [Releases](https://github.com/Simonwep/pickr/releases) for installation instructions regarding to the latest version.\n\nInstall via npm:\n```shell\n$ npm install @simonwep/pickr\n```\n\nInstall via yarn:\n```shell\n$ yarn add @simonwep/pickr\n```\n\nInclude code and style:\n```js\n\n// One of the following themes\nimport \'@simonwep/pickr/dist/themes/classic.min.css\';   // \'classic\' theme\nimport \'@simonwep/pickr/dist/themes/monolith.min.css\';  // \'monolith\' theme\nimport \'@simonwep/pickr/dist/themes/nano.min.css\';      // \'nano\' theme\n\n// Modern or es5 bundle (pay attention to the note below!)\nimport Pickr from \'@simonwep/pickr\';\nimport Pickr from \'@simonwep/pickr/dist/pickr.es5.min\';\n```\n---\n\n> Attention: The es5-bundle (e.g. legacy version) is quite big (around a triple of the modern bundle). \n> Please take into consideration to use the modern version and add polyfills later to your final bundle!\n> (Or better: give a hint to users that they should use the latest browsers)\n\n### Browser\n\njsdelivr:\n```html\n\n<!-- One of the following themes -->\n<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@simonwep/pickr/dist/themes/classic.min.css"/> <!-- \'classic\' theme -->\n<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@simonwep/pickr/dist/themes/monolith.min.css"/> <!-- \'monolith\' theme -->\n<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@simonwep/pickr/dist/themes/nano.min.css"/> <!-- \'nano\' theme -->\n\n<!-- Modern or es5 bundle -->\n<script src="https://cdn.jsdelivr.net/npm/@simonwep/pickr/dist/pickr.min.js"></script>\n<script src="https://cdn.jsdelivr.net/npm/@simonwep/pickr/dist/pickr.es5.min.js"></script>\n```\n\nBe sure to load the `pickr.min.js` (or the es5 version) **after** `pickr.min.css`. Moreover the `script` tag doesn\'t work with the `defer` attribute.\n\n## Usage\n```javascript\n// Simple example, see optional options for more configuration.\nconst pickr = Pickr.create({\n    el: \'.color-picker\',\n    theme: \'classic\', // or \'monolith\', or \'nano\'\n\n    swatches: [\n        \'rgba(244, 67, 54, 1)\',\n        \'rgba(233, 30, 99, 0.95)\',\n        \'rgba(156, 39, 176, 0.9)\',\n        \'rgba(103, 58, 183, 0.85)\',\n        \'rgba(63, 81, 181, 0.8)\',\n        \'rgba(33, 150, 243, 0.75)\',\n        \'rgba(3, 169, 244, 0.7)\',\n        \'rgba(0, 188, 212, 0.7)\',\n        \'rgba(0, 150, 136, 0.75)\',\n        \'rgba(76, 175, 80, 0.8)\',\n        \'rgba(139, 195, 74, 0.85)\',\n        \'rgba(205, 220, 57, 0.9)\',\n        \'rgba(255, 235, 59, 0.95)\',\n        \'rgba(255, 193, 7, 1)\'\n    ],\n\n    components: {\n\n        // Main components\n        preview: true,\n        opacity: true,\n        hue: true,\n\n        // Input / output Options\n        interaction: {\n            hex: true,\n            rgba: true,\n            hsla: true,\n            hsva: true,\n            cmyk: true,\n            input: true,\n            clear: true,\n            save: true\n        }\n    }\n});\n```\n\n## Events\nSince version `0.4.x` Pickr is event-driven. Use the `on(event, cb)` and `off(event, cb)` functions to bind / unbind eventlistener.\n\n| Event      | Description | Arguments |\n| -------------- | ----------- | --------- |\n| `init`         | Initialization done - pickr can be used | `PickrInstance` |\n| `hide`         | Pickr got closed | `PickrInstance` |\n| `show`         | Pickr got opened | `PickrInstance` |\n| `save`         | User clicked the save / clear button. Also fired on clear with `null` as color. | `HSVaColorObject or null, PickrInstance` |\n| `clear`        | User cleared the color. | `PickrInstance` |\n| `change`       | Color has changed (but not saved). Also fired on `swatchselect` | `HSVaColorObject, PickrInstance` |\n| `changestop`   | User stopped to change the color | ` PickrInstance` |\n| `cancel`       | User clicked the cancel button (return to previous color). | `PickrInstance` |\n| `swatchselect` | User clicked one of the swatches | `HSVaColorObject, PickrInstance` |\n\n> Example:\n```js\npickr.on(\'init\', instance => {\n    console.log(\'init\', instance);\n}).on(\'hide\', instance => {\n    console.log(\'hide\', instance);\n}).on(\'show\', (color, instance) => {\n    console.log(\'show\', color, instance);\n}).on(\'save\', (color, instance) => {\n    console.log(\'save\', color, instance);\n}).on(\'clear\', instance => {\n    console.log(\'clear\', instance);\n}).on(\'change\', (color, instance) => {\n    console.log(\'change\', color, instance);\n}).on(\'changestop\', instance => {\n    console.log(\'changestop\', instance);\n}).on(\'cancel\', instance => {\n    console.log(\'cancel\', instance);\n}).on(\'swatchselect\', (color, instance) => {\n    console.log(\'swatchselect\', color, instance);\n});\n```\n\n## Options\n```javascript\nconst pickr = new Pickr({\n\n    // Selector or element which will be replaced with the actual color-picker.\n    // Can be a HTMLElement.\n    el: \'.color-picker\',\n\n    // Where the pickr-app should be added as child.\n    container: \'body\',\n\n    // Which theme you want to use. Can be \'classic\', \'monolith\' or \'nano\'\n    theme: \'classic\',\n\n    // Nested scrolling is currently not supported and as this would be really sophisticated to add this\n    // it\'s easier to set this to true which will hide pickr if the user scrolls the area behind it.\n    closeOnScroll: false,\n\n    // Custom class which gets added to the pcr-app. Can be used to apply custom styles.\n    appClass: \'custom-class\',\n\n    // Don\'t replace \'el\' Element with the pickr-button, instead use \'el\' as a button.\n    // If true, appendToBody will also be automatically true.\n    useAsButton: false,\n\n    // Size of gap between pickr (widget) and the corresponding reference (button) in px \n    padding: 8,\n\n    // If true pickr won\'t be floating, and instead will append after the in el resolved element.\n    // It\'s possible to hide it via .hide() anyway.\n    inline: false,\n\n    // If true, pickr will be repositioned automatically on page scroll or window resize.\n    // Can be set to false to make custom positioning easier.\n    autoReposition: true,\n\n    // Defines the direction in which the knobs of hue and opacity can be moved.\n    // \'v\' => opacity- and hue-slider can both only moved vertically.\n    // \'hv\' => opacity-slider can be moved horizontally and hue-slider vertically.\n    // Can be used to apply custom layouts\n    sliders: \'v\',\n\n    // Start state. If true \'disabled\' will be added to the button\'s classlist.\n    disabled: false,\n\n    // If true, the user won\'t be able to adjust any opacity.\n    // Opacity will be locked at 1 and the opacity slider will be removed.\n    // The HSVaColor object also doesn\'t contain an alpha, so the toString() methods just\n    // print HSV, HSL, RGB, HEX, etc.\n    lockOpacity: false,\n\n    // Precision of output string (only effective if components.interaction.input is true)\n    outputPrecision: 0,\n\n    // If set to false it would directly apply the selected color on the button and preview.\n    comparison: true,\n\n    // Default color. If you\'re using a named color such as red, white ... set \n    // a value for defaultRepresentation too as there is no button for named-colors.\n    default: \'#42445a\',\n\n    // Optional color swatches. When null, swatches are disabled.\n    // Types are all those which can be produced by pickr e.g. hex(a), hsv(a), hsl(a), rgb(a), cmyk, and also CSS color names like \'magenta\'.\n    // Example: swatches: [\'#F44336\', \'#E91E63\', \'#9C27B0\', \'#673AB7\'],\n    swatches: null,\n\n    // Default color representation of the input/output textbox.\n    // Valid options are `HEX`, `RGBA`, `HSVA`, `HSLA` and `CMYK`.\n    defaultRepresentation: \'HEX\',\n\n    // Option to keep the color picker always visible.\n    // You can still hide / show it via \'pickr.hide()\' and \'pickr.show()\'.\n    // The save button keeps its functionality, so still fires the onSave event when clicked.\n    showAlways: false,\n\n    // Close pickr with a keypress.\n    // Default is \'Escape\'. Can be the event key or code.\n    // (see: https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key)\n    closeWithKey: \'Escape\',\n\n    // Defines the position of the color-picker.\n    // Any combinations of top, left, bottom or right with one of these optional modifiers: start, middle, end\n    // Examples: top-start / right-end\n    // If clipping occurs, the color picker will automatically choose its position.\n    position: \'bottom-middle\',\n\n    // Enables the ability to change numbers in an input field with the scroll-wheel.\n    // To use it set the cursor on a position where a number is and scroll, use ctrl to make steps of five\n    adjustableNumbers: true,\n\n    // Show or hide specific components.\n    // By default only the palette (and the save button) is visible.\n    components: {\n\n        // Defines if the palette itself should be visible.\n        // Will be overwritten with true if preview, opacity or hue are true\n        palette: true,\n\n        preview: true, // Display comparison between previous state and new color\n        opacity: true, // Display opacity slider\n        hue: true,     // Display hue slider\n\n        // show or hide components on the bottom interaction bar.\n        interaction: {\n\n            // Buttons, if you disable one but use the format in default: or setColor() - set the representation-type too!\n            hex: false,  // Display \'input/output format as hex\' button  (hexadecimal representation of the rgba value)\n            rgba: false, // Display \'input/output format as rgba\' button (red green blue and alpha)\n            hsla: false, // Display \'input/output format as hsla\' button (hue saturation lightness and alpha)\n            hsva: false, // Display \'input/output format as hsva\' button (hue saturation value and alpha)\n            cmyk: false, // Display \'input/output format as cmyk\' button (cyan mangenta yellow key )\n\n            input: false, // Display input/output textbox which shows the selected color value.\n                         // the format of the input is determined by defaultRepresentation,\n                         // and can be changed by the user with the buttons set by hex, rgba, hsla, etc (above).\n            cancel: false, // Display Cancel Button, resets the color to the previous state\n            clear: false, // Display Clear Button; same as cancel, but keeps the window open\n            save: false,  // Display Save Button,\n        },\n    },\n\n    // Button strings, brings the possibility to use a language other than English.\n    strings: {\n       save: \'Save\',  // Default for save button\n       clear: \'Clear\', // Default for clear button\n       cancel: \'Cancel\' // Default for cancel button\n    }\n});\n```\n\n## Selection through a Shadow-DOM\nExample setup:\n```html\n<div class="entry">\n  #shadow-root\n    <div class="innr">\n       <div class="another">\n         #shadow-root\n           <div class="pickr"></div>\n       </div>\n    </div>\n</div>\n```\n\nTo select the `.pickr` element you can use the custom `>>` shadow-dom-selector in `el`:\n```js\nel: \'.entry >> .innr .another >> .pickr\'\n```\n\nEvery `ShadowRoot` of the query-result behind a `>>` gets used in the next query selection.\nAn alternative would be to provide the target-element itself as `el`.\n\n## The HSVaColor object\nAs default color representation is hsva (`hue`, `saturation`, `value` and `alpha`) used, but you can also convert it to other formats as listed below.\n\n* hsva.toHSVA() _- Converts the object to a hsva array._\n* hsva.toHSLA() _- Converts the object to a hsla array._\n* hsva.toRGBA() _- Converts the object to a rgba array._\n* hsva.toHEXA() _- Converts the object to a hexa-decimal array._\n* hsva.toCMYK() _- Converts the object to a cmyk array._\n* hsva.clone() _- Clones the color object._\n\nThe `toString()` is overridden so you can get a color representation string.\n\n```javascript\nhsva.toRGBA(); // Returns [r, g, b, a]\nhsva.toRGBA().toString(); // Returns rgba(r, g, b, a) with highest precision\nhsva.toRGBA().toString(3); // Returns rgba(r, g, b, a), rounded to the third decimal\n```\n\n## Methods\n* pickr.setHSVA(h`:Number`,s`:Number`,v`:Number`,a`:Float`, silent`:Boolean`) _- Set an color, returns true if the color has been accepted._\n* pickr.setColor(str: `:String | null`, silent`:Boolean`)`:Boolean` _- Parses a string which represents a color (e.g. `#fff`, `rgb(10, 156, 23)`) or name e.g. \'magenta\', returns true if the color has been accepted. `null` will clear the color._\n\nIf `silent` is true (Default is false), the button won\'t change the current color.\n\n* pickr.on(event`:String`, cb`:Function`)`:Pickr` _- Appends an event listener to the given corresponding event-name (see section Events)._\n* pickr.off(event`:String`, cb`:Function`)`:Pickr` _- Removes an event listener from the given corresponding event-name (see section Events)._\n* pickr.show()`:Pickr` _- Shows the color-picker._\n* pickr.hide()`:Pickr` _- Hides the color-picker._\n* pickr.disable()`:Pickr` _- Disables pickr and adds the `disabled` class to the button._\n* pickr.enable()`:Pickr` _- Enables pickr and removes the `disabled` class from the button._\n* pickr.isOpen()`:Pickr` _- Returns true if the color picker is currently open._\n* pickr.getRoot()`:Object` _- Returns the dom-tree of pickr as tree-structure._\n* pickr.getColor()`:HSVaColor` _- Returns the current HSVaColor object._\n* pickr.getSelectedColor()`:HSVaColor` _- Returns the currently applied color._\n* pickr.destroy() _- Destroys all functionality._\n* pickr.destroyAndRemove() _- Destroys all functionality and removes the pickr element including the button._\n* pickr.setColorRepresentation(type`:String`)`:Boolean` _- Change the current color-representation. Valid options are `HEX`, `RGBA`, `HSVA`, `HSLA` and `CMYK`, returns false if type was invalid._\n* pickr.getColorRepresentation()`:String` _- Returns the currently used color-representation (eg. `HEXA`, `RGBA`...)_\n* pickr.applyColor(silent`:Boolean`)`:Pickr` _- Same as pressing the save button. If silent is true the `onSave` event won\'t be called._\n* pickr.addSwatch(color`:String`)`:Boolean` _- Adds a color to the swatch palette. Returns `true` if the color has been successful added to the palette._\n* pickr.removeSwatch(index`:Number`)`:Boolean`_- Removes a color from the swatch palette by its index, returns true if successful._\n\n## Static methods\n**Pickr**\n* Pickr.create(options`:Object`)`:Pickr` _- Creates a new instance._\n\n**Pickr.utils**\n* once(element`:HTMLElement`, event`:String`, fn`:Function`[, options `:Object`]) _- Attach an event handle which will be fired only once_\n* on(elements`:HTMLElement(s)`, events`:String(s)`, fn`:Function`[, options `:Object`]) _- Attach an event handler function._\n* off(elements`:HTMLElement(s)`, event`:String(s)`, fn`:Function`[, options `:Object`]) _- Remove an event handler._\n* createElementFromString(html`:String`)`:HTMLElement` _- Creates an new HTML Element out of this string._\n* eventPath(evt`:Event`)`:[HTMLElement]` _- A polyfill for the event-path event propery._\n* removeAttribute(el`:HTMLElement`, name`:String`) _- Removes an attribute from a HTMLElement and returns the value._\n* createFromTemplate(str`:String`) _- See [inline doumentation](https://github.com/Simonwep/pickr/blob/master/src/js/lib/utils.js#L88)._\n* resolveElement(val`:String|HTMLElement`) _- Resolves a `HTMLElement`, supports `>>>` as shadow dom selector._\n* adjustableInputNumbers(el`:InputElement`, mapper`:Function`) _- Creates the possibility to change the numbers in an inputfield via mouse scrolling.\nThe mapper function takes three arguments: the matched number, an multiplier and the index of the match._\n\nUse this utils carefully, it\'s not for sure that they will stay forever!\n\n## FAQ\n> How do I initialize multiple pickr\'s? Can I access the instance via `class` or `id`?\n\nNo, you can\'t. You need to keep track of your instance variables - pickr is (not yet) a web-component.\nThe best option would be to create new elements via `document.createElement` and directly pass it as `el`.\n[example](https://jsfiddle.net/Simonwep/9ghk71c3/).\n\n> I want to use pickr in a form, how can I do that?\n\nYou can use `useAsButton: true` and pass a reference (or selector) of your input-element as `el`. Then you can update the input-element whenever a change was made. [example](https://jsfiddle.net/Simonwep/wL1zyqcd/).\n\n## Contributing\nIf you want to open a issue, create a Pull Request or simply want to know how you can run it on your local machine, please read the [Contributing guide](https://github.com/Simonwep/pickr/blob/master/.github/CONTRIBUTING.md).\n'