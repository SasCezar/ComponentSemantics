b'# Alerter - An Android Alerter Library, now in Kotlin!\n\nThis library aims to overcome the limitations of Toasts and Snackbars, while reducing the\ncomplexity of your layouts.\n\n[![Download](https://api.bintray.com/packages/tapadoo/maven/alerter/images/download.svg)](https://bintray.com/tapadoo/maven/alerter/_latestVersion) [![API](https://img.shields.io/badge/API-14%2B-orange.svg?style=flat)](https://android-arsenal.com/api?level=14) [![Android Arsenal](https://img.shields.io/badge/Android%20Arsenal-Alerter-blue.svg?style=flat)](https://android-arsenal.com/details/1/5302) [![Android Weekly](https://img.shields.io/badge/Android%20Weekly-%23245-blue.svg)](http://androidweekly.net/issues/issue-245)\n\n[![Header](./documentation/header.png)](https://play.google.com/store/apps/details?id=com.tapadoo.alerter_demo)\n\n## General\n\nWith simplicity in mind, the Alerter employs the builder pattern to facilitate easy integration into any app.\nA customisable Alert view is dynamically added to the Decor View of the Window, overlaying all content. \n\n## Gradle\n\n```groovy\ndependencies {\n    implementation \'com.tapadoo.android:alerter:$current-version\'\n}\n```\n\n## Kotlin\n\nVersion 3.0.0 and above requires Kotlin\n\n## AndroidX\n\nVersion 4.0.0 includes support for AndroidX dependencies. If you experience issues with this update, \nplease ensure you have enabled AndroidX & Jetifier in your `gradle.properties` file:\n\n```properties\nandroid.useAndroidX=true\nandroid.enableJetifier=true\n```\n\n# Usage\n\n![Default Alert](./documentation/alert_default.gif)\n\nFrom an Activity -\n\n```kotlin\nAlerter.create(this@DemoActivity)\n       .setTitle("Alert Title")\n       .setText("Alert text...")\n       .show()\n```\n\nOr from a Fragment -\n\n```kotlin\nAlerter.create(activity)\n       .setTitle("Alert Title")\n       .setText("Alert text...")\n       .show()\n```\n\nTo check if an alert is showing - \n\n\n```kotlin\nAlerter.isShowing()\n```\n\nTo hide a currently showing Alert - \n\n```kotlin\nAlerter.hide()\n```\n\n# Customisation\n\n### Background Colour\n\n```kotlin\nAlerter.create(this@DemoActivity)\n       .setTitle("Alert Title")\n       .setText("Alert text...")\n       .setBackgroundColorRes(R.color.colorAccent) // or setBackgroundColorInt(Color.CYAN)\n       .show()\n```\n\n![Coloured Alert](./documentation/alert_coloured.gif)\n\n### Icon\n\n```kotlin\nAlerter.create(this@DemoActivity)\n       .setText("Alert text...")\n       .setIcon(R.drawable.alerter_ic_mail_outline)\n       .setIconColorFilter(0) // Optional - Removes white tint\n       .setIconSize(R.dimen.custom_icon_size) // Optional - default is 38dp\n       .show()\n```\n\n![Custom Icon Alert](./documentation/alert_icon.gif)\n\n### On screen duration, in milliseconds\n\n```kotlin\nAlerter.create(this@DemoActivity)\n       .setTitle("Alert Title")\n       .setText("Alert text...")\n       .setDuration(10000)\n       .show()\n```\n\n### Without title\n\n```kotlin\nAlerter.create(this@DemoActivity)\n       .setText("Alert text...")\n       .show()\n```\n\n![Text Only Alert](./documentation/alert_text_only.gif)\n\n### Adding an On Click Listener\n\n```kotlin\n Alerter.create(this@DemoActivity)\n        .setTitle("Alert Title")\n        .setText("Alert text...")\n        .setDuration(10000)\n        .setOnClickListener(View.OnClickListener {\n            Toast.makeText(this@DemoActivity, "OnClick Called", Toast.LENGTH_LONG).show();\n        })\n        .show()\n```\n\n![On Click Alert](./documentation/alert_on_click.gif)\n\n### Verbose text\n\n```kotlin\n Alerter.create(this@DemoActivity)\n        .setTitle("Alert Title")\n        .setText("The alert scales to accommodate larger bodies of text. " +\n                 "The alert scales to accommodate larger bodies of text. " +\n                 "The alert scales to accommodate larger bodies of text.")\n        .show()\n```\n\n![Verbose Alert](./documentation/alert_verbose.gif)\n\n### Custom Enter/Exit Animations\n\n```kotlin\n  Alerter.create(this@KotlinDemoActivity)\n         .setTitle("Alert Title")\n         .setText("Alert text...")\n         .setEnterAnimation(R.anim.alerter_slide_in_from_left)\n         .setExitAnimation(R.anim.alerter_slide_out_to_right)\n         .show()\n```\n\n### Visibility Callbacks\n\n```kotlin\n Alerter.create(this@KotlinDemoActivity)\n        .setTitle("Alert Title")\n        .setText("Alert text...")\n        .setDuration(10000)\n        .setOnShowListener(OnShowAlertListener {\n            Toast.makeText(this@KotlinDemoActivity, "Show Alert", Toast.LENGTH_LONG).show()\n        })\n        .setOnHideListener(OnHideAlertListener {\n            Toast.makeText(this@KotlinDemoActivity, "Hide Alert", Toast.LENGTH_LONG).show()\n        })\n        .show()\n```\n\n### Custom Fonts and Text Appearance\n\n```kotlin \n Alerter.create(this@DemoActivity)\n        .setTitle("Alert Title")\n        .setTitleAppearance(R.style.AlertTextAppearance_Title)\n        .setTitleTypeface(Typeface.createFromAsset(getAssets(), "Pacifico-Regular.ttf"))\n        .setText("Alert text...")\n        .setTextAppearance(R.style.AlertTextAppearance_Text)\n        .setTextTypeface(Typeface.createFromAsset(getAssets(), "ScopeOne-Regular.ttf"))\n        .show()\n```\n\n![Verbose Alert](./documentation/alert_custom_font.gif)\n\n### Swipe to Dismiss\n\n```kotlin\n Alerter.create(this@DemoActivity)\n        .setTitle("Alert Title")\n        .setText("Alert text...")\n        .enableSwipeToDismiss()\n        .show()\n```\n![Verbose Alert](./documentation/alert_swipe_to_dismiss.gif)\n\n### Progress Bar\n\n```kotlin\n Alerter.create(this@DemoActivity)\n        .setTitle("Alert Title")\n        .setText("Alert text...")\n        .enableProgress(true)\n        .setProgressColorRes(R.color.colorAccent)\n        .show()\n```\n\n![Verbose Alert](./documentation/alert_progress_bar.gif)\n\n### With Buttons\n\n```kotlin\n Alerter.create(this@KotlinDemoActivity)\n        .setTitle(R.string.title_activity_example)\n        .setText("Alert text...")\n        .addButton("Okay", R.style.AlertButton, View.OnClickListener {\n            Toast.makeText(this@KotlinDemoActivity, "Okay Clicked", Toast.LENGTH_LONG).show()\n        })\n        .addButton("No", R.style.AlertButton, View.OnClickListener {\n            Toast.makeText(this@KotlinDemoActivity, "No Clicked", Toast.LENGTH_LONG).show()\n        })\n        .show()\n```\n\n![Verbose Alert](./documentation/alert_with_buttons.gif)\n\n### With Custom Layout\n```kotlin\n Alerter.create(this@KotlinDemoActivity, R.layout.custom_layout)\n        .setBackgroundColorRes(R.color.colorAccent)\n        .also { alerter ->\n            val tvCustomView = alerter.getLayoutContainer()?.tvCustomLayout\n            tvCustomView?.setText(R.string.with_custom_layout)\n        }\n        .show()\n```\n\n![Verbose Alert](./documentation/alert_with_custom_layout.gif)\n\n## Licence\n\nSee the [LICENSE](LICENSE.md) file for license rights and limitations (MIT).\n\nCopyright 2017 Tapadoo, Dublin.\n\n![Alt Text](https://tapadoo.com/wp-content/themes/tapadoo/assets/images/tapadoo_logo_dark.png)\n'