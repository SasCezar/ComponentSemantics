b'`json-c`\n========\n\n1. [Overview and Build Status](#overview)\n2. [Building on Unix](#buildunix)\n3. [Install Prerequisites](#installprereq)\n4. [Building with partial threading support](#buildthreaded)\n5. [Building with CMake](#CMake)\n6. [Linking to libjson-c](#linking)\n7. [Using json-c](#using)\n\nJSON-C - A JSON implementation in C <a name="overview"></a>\n-----------------------------------\n\nBuild Status\n* [AppVeyor Build](https://ci.appveyor.com/project/hawicz/json-c) ![AppVeyor Build Status](https://ci.appveyor.com/api/projects/status/github/json-c/json-c?branch=master&svg=true)\n* [Travis Build](https://travis-ci.org/json-c/json-c) ![Travis Build Status](https://travis-ci.org/json-c/json-c.svg?branch=master)\n\nJSON-C implements a reference counting object model that allows you to easily\nconstruct JSON objects in C, output them as JSON formatted strings and parse\nJSON formatted strings back into the C representation of JSON objects.\nIt aims to conform to [RFC 7159](https://tools.ietf.org/html/rfc7159).\n\nBuilding on Unix and Windows with `vcpkg`, `gcc`/`g++`, `curl`, `unzip`, and `tar`\n--------------------------------------------------\n\nYou can download and install JSON-C using the [vcpkg](https://github.com/Microsoft/vcpkg/) dependency manager:\n\n    git clone https://github.com/Microsoft/vcpkg.git\n    cd vcpkg\n    ./bootstrap-vcpkg.sh\n    ./vcpkg integrate install\n    vcpkg install json-c\n\nThe JSON-C port in vcpkg is kept up to date by Microsoft team members and community contributors. If the version is out of date, please [create an issue or pull request](https://github.com/Microsoft/vcpkg) on the vcpkg repository.\n\nBuilding on Unix with `git`, `gcc` and `autotools` <a name="buildunix"></a>\n--------------------------------------------------\n\nHome page for json-c: https://github.com/json-c/json-c/wiki\n\n### Prerequisites:\n\nSee also the "Installing prerequisites" section below.\n\n - `gcc`, `clang`, or another C compiler\n - `libtool>=2.2.6b`\n\nIf you\'re not using a release tarball, you\'ll also need:\n\n - `autoconf>=2.64` (`autoreconf`)\n - `automake>=1.13`\n\nMake sure you have a complete `libtool` install, including `libtoolize`.\n\nTo generate docs (e.g. as part of make distcheck) you\'ll also need:\n - `doxygen>=1.8.13`\n\n### Build instructions:\n\n`json-c` GitHub repo: https://github.com/json-c/json-c\n\n```sh\n$ git clone https://github.com/json-c/json-c.git\n$ cd json-c\n$ sh autogen.sh\n```\n\nfollowed by\n\n```sh\n$ ./configure  # --enable-threading\n$ make\n$ make install\n```\n\nTo build and run the test programs:\n\n```sh\n$ make check\n$ make USE_VALGRIND=0 check   # optionally skip using valgrind\n```\n\nInstall prerequisites <a name="installprereq"></a>\n-----------------------\n\nIf you are on a relatively modern system, you\'ll likely be able to install\nthe prerequisites using your OS\'s packaging system.\n\n### Install using apt (e.g. Ubuntu 16.04.2 LTS)\n```sh\nsudo apt install git\nsudo apt install autoconf automake libtool\nsudo apt install valgrind # optional\n```\n\nThen start from the "git clone" command, above.\n\n### Manually install and build autoconf, automake and libtool\n\nFor older OS\'s that don\'t have up-to-date versions of the packages will\nrequire a bit more work. For example, CentOS release 5.11, etc...\n\n```sh\ncurl -O http://ftp.gnu.org/gnu/autoconf/autoconf-2.69.tar.gz\ncurl -O http://ftp.gnu.org/gnu/automake/automake-1.15.tar.gz\ncurl -O http://ftp.gnu.org/gnu/libtool/libtool-2.2.6b.tar.gz\n\ntar xzf autoconf-2.69.tar.gz\ntar xzf automake-1.15.tar.gz\ntar xzf libtool-2.2.6b.tar.gz\n\nexport PATH=${HOME}/ac_install/bin:$PATH\n\n(cd autoconf-2.69 && \\\n  ./configure --prefix ${HOME}/ac_install && \\\n  make && \\\n  make install)\n\n(cd automake-1.15 && \\\n  ./configure --prefix ${HOME}/ac_install && \\\n  make && \\\n  make install)\n\n(cd libtool-2.2.6b && \\\n  ./configure --prefix ${HOME}/ac_install && \\\n  make && \\\n  make install)\n```\n\n\nBuilding with partial threading support <a name="buildthreaded"></a>\n----------------------------------------\n\nAlthough json-c does not support fully multi-threaded access to\nobject trees, it has some code to help make its use in threaded programs\na bit safer.  Currently, this is limited to using atomic operations for\njson_object_get() and json_object_put().\n\nSince this may have a performance impact, of at least 3x slower\naccording to https://stackoverflow.com/a/11609063, it is disabled by\ndefault.  You may turn it on by adjusting your configure command with:\n   --enable-threading\n\nSeparately, the default hash function used for object field keys,\nlh_char_hash, uses a compare-and-swap operation to ensure the random\nseed is only generated once.  Because this is a one-time operation, it\nis always compiled in when the compare-and-swap operation is available.\n\nBuilding with CMake <a name="CMake"></a>\n--------------------\n\nTo use [CMake](https://cmake.org/cmake-tutorial/), build it like:\n\n```sh\nmkdir build\ncd build\ncmake ../\nmake\n```\n\nCMake can take a few options.\n\nVariable             | Type   | Description\n---------------------|--------|--------------\nCMAKE_INSTALL_PREFIX | String | The install location.\nBUILD_SHARED_LIBS    | Bool   | The default build generates a dynamic (dll/so) library.  Set this to OFF to create a static library instead.\nENABLE_RDRAND        | Bool   | Enable RDRAND Hardware RNG Hash Seed\nENABLE_THREADING     | Bool   | Enable partial threading support\n\nPass these options as `-D` on CMake\'s command-line.\n\n```sh\ncmake -DBUILD_SHARED_LIBS=OFF ...\n```\n\nTesting with cmake:\n\nBy default, if valgrind is available running tests uses it.\nThat can slow the tests down considerably, so to disable it use:\n```sh\nexport USE_VALGRIND=0\n```\n\nTo run tests:\n```sh\nmkdir build-test\ncd build-test\n# VALGRIND=1 causes -DVALGRIND=1 to be included when building\nVALGRIND=1 cmake ..\nmake\n\nmake test\n# By default, if valgrind is available running tests uses it.\nmake USE_VALGRIND=0 test   # optionally skip using valgrind\n```\n\nIf a test fails, check `Testing/Temporary/LastTest.log`, \n`tests/testSubDir/${testname}/${testname}.vg.out`, and other similar files.\nIf there is insufficient output try:\n```sh\nVERBOSE=1 make test\n```\nor\n```sh\nJSONC_TEST_TRACE=1 make test\n```\nand check the log files again.\n\n\n\nLinking to `libjson-c` <a name="linking">\n----------------------\n\nIf your system has `pkgconfig`,\nthen you can just add this to your `makefile`:\n\n```make\nCFLAGS += $(shell pkg-config --cflags json-c)\nLDFLAGS += $(shell pkg-config --libs json-c)\n```\n\nWithout `pkgconfig`, you would do something like this:\n\n```make\nJSON_C_DIR=/path/to/json_c/install\nCFLAGS += -I$(JSON_C_DIR)/include/json-c\nLDFLAGS+= -L$(JSON_C_DIR)/lib -ljson-c\n```\n\n\nUsing json-c <a name="using">\n------------\n\nTo use json-c you can either include json.h, or preferrably, one of the\nfollowing more specific header files:\n\n* json_object.h  - Core types and methods.\n* json_tokener.h - Methods for parsing and serializing json-c object trees.\n* json_pointer.h - JSON Pointer (RFC 6901) implementation for retrieving\n                   objects from a json-c object tree.\n* json_object_iterator.h - Methods for iterating over single json_object instances.\n* json_visit.h   - Methods for walking a tree of json-c objects.\n* json_util.h    - Miscelleanous utility functions.\n\nFor a full list of headers see [files.html](http://json-c.github.io/json-c/json-c-0.13.1/doc/html/files.html)\n\n'