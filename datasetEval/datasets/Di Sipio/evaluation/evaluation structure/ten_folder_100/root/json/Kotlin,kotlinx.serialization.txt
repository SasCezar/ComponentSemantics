b'# Kotlin cross-platform / multi-format reflectionless serialization\n\n[![JetBrains incubator project](https://jb.gg/badges/incubator.svg)](https://confluence.jetbrains.com/display/ALL/JetBrains+on+GitHub)\n[![GitHub license](https://img.shields.io/badge/license-Apache%20License%202.0-blue.svg?style=flat)](http://www.apache.org/licenses/LICENSE-2.0)\n[![TeamCity build](https://img.shields.io/teamcity/http/teamcity.jetbrains.com/s/KotlinTools_KotlinxSerialization_Ko.svg)](https://teamcity.jetbrains.com/viewType.html?buildTypeId=KotlinTools_KotlinxSerialization_Ko&guest=1)\n[![Download](https://api.bintray.com/packages/kotlin/kotlinx/kotlinx.serialization.runtime/images/download.svg) ](https://bintray.com/kotlin/kotlinx/kotlinx.serialization.runtime/_latestVersion)\n\nKotlin serialization consists of a compiler plugin, which automatically produces visitor code for classes, and runtime library, which uses generated code to serialize objects without reflection.\n\n* Supports Kotlin classes marked as `@Serializable` and standard collections.\n* Supports JSON, CBOR, and Protobuf formats out-of-the-box.\n* The same code works on Kotlin/JVM, Kotlin/JS and Kotlin/Native\n\n## Runtime overview\n\nThis project contains the runtime library. Runtime library provides:\n\n* Interfaces which are called by compiler-generated code (`Encoder`, `Decoder`).\n* Basic skeleton implementations of these interfaces in which you should override some methods if you want to\n  implement custom data format.\n* Some internal classes like built-ins and collections serializers.\n* Ready-to-use serialization formats.\n* Other useful classes that benefit from serialization framework (e.g. object-to-Map transformer)\n\nYou can open example projects for [JS](examples/example-js), [JVM](examples/example-jvm) or [Native](examples/example-native) to get started playing with it.\n\n## Table of contents\n\n* [Quick example](#quick-example)\n* [Current status](#current-project-status)\n* [Library installing](#setup)\n    + [Gradle](#gradle)\n    + [Gradle (with `plugins` block)](#gradle-with-plugins-block)\n    + [Android/JVM](#androidjvm)\n    + [Multiplatform (common, JS, Native)](#multiplatform-common-js-native)\n    + [Maven/JVM](#mavenjvm)\n    + [Incompatible changes from older versions](#incompatible-changes)\n* [Troubleshooting IntelliJ IDEA](#troubleshooting-intellij-idea)\n* [Usage](docs/runtime_usage.md)\n* [More examples of supported Kotlin classes](docs/examples.md)\n* [Writing custom serializers](docs/custom_serializers.md)\n* [Multiplatform polymorphic serialization](docs/polymorphism.md)\n* [Add-on formats](formats/README.md)\n* [Building library and compiler plugin from source](docs/building.md)\n* [Instructions for old versions under Kotlin 1.2 and migration guide](docs/old12.md)\n\n\n## Quick example\n\n```kotlin\n\nimport kotlinx.serialization.*\nimport kotlinx.serialization.json.*\n\n@Serializable\ndata class Data(val a: Int, val b: String = "42")\n\nfun main() {\n    // Json also has .Default configuration which provides more reasonable settings,\n    // but is subject to change in future versions\n    val json = Json(JsonConfiguration.Stable)\n    // serializing objects\n    val jsonData = json.stringify(Data.serializer(), Data(42))\n    // serializing lists\n    val jsonList = json.stringify(Data.serializer().list, listOf(Data(42)))\n    println(jsonData) // {"a": 42, "b": "42"}\n    println(jsonList) // [{"a": 42, "b": "42"}]\n\n    // parsing data back\n    val obj = json.parse(Data.serializer(), """{"a":42}""") // b is optional since it has default value\n    println(obj) // Data(a=42, b="42")\n}\n```\n\nTo learn more about JSON usage and other formats, see [usage](docs/runtime_usage.md).\nMore examples of various kinds of Kotlin classes that can be serialized can be found [here](docs/examples.md).\n\n## Current project status\n\nStarting from Kotlin 1.3-RC2, serialization plugin is shipped with the rest of Kotlin compiler distribution, and the IDEA plugin is bundled into the Kotlin plugin.\n\nRuntime library is under reconstruction to match the corresponding [KEEP](https://github.com/Kotlin/KEEP/blob/serialization/proposals/extensions/serialization.md), so some features described there can be not implemented yet. While library is stable and has successfully been used in various scenarios, there is no API compatibility guarantees between versions, that\'s why it is called experimental.\nThis document describes setup for Kotlin 1.3 and higher. To watch instructions regarding 1.2, follow [this document](docs/old12.md).\n\n## Setup\n\nUsing Kotlin Serialization requires Kotlin compiler `1.3.30` or higher.\nMake sure that you have corresponding Kotlin plugin installed in the IDE.\nSince serialization is now bundled into Kotlin plugin, no additional plugins for IDE are required (but make sure you have deleted old additional plugin for 1.2, if you had one).\nExample projects on JVM are available for [Gradle](examples/example-jvm/build.gradle) and [Maven](examples/example-jvm/pom.xml).\n\n### Gradle\n\nYou have to add the serialization plugin as the other [compiler plugins](https://kotlinlang.org/docs/reference/compiler-plugins.html):\n\n```gradle\nbuildscript {\n    ext.kotlin_version = \'1.3.60\'\n    repositories { jcenter() }\n\n    dependencies {\n        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"\n        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"\n    }\n}\n```\n\nDon\'t forget to apply the plugin:\n\n```gradle\napply plugin: \'kotlin\' // or \'kotlin-multiplatform\' for multiplatform projects\napply plugin: \'kotlinx-serialization\'\n```\n\nNext, you have to add dependency on the serialization runtime library. Note that while plugin have version the same as compiler one, runtime library has different coordinates, repository and versioning.\n\n```gradle\nrepositories {\n    // artifacts are published to JCenter\n    jcenter()\n}\n\ndependencies {\n    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"\n    compile "org.jetbrains.kotlinx:kotlinx-serialization-runtime:0.14.0" // JVM dependency\n}\n```\n\n### Gradle (with `plugins` block)\n\nYou can setup serialization plugin with the kotlin plugin using [Gradle plugins DSL](https://docs.gradle.org/current/userguide/plugins.html#sec:plugins_block) **instead** of traditional `apply plugin`:\n\n```gradle\nplugins {\n    id \'org.jetbrains.kotlin.multiplatform\' version \'1.3.60\' // or any other kotlin plugin\n    id \'org.jetbrains.kotlin.plugin.serialization\' version \'1.3.60\'\n}\n```\n\nNote: plugin marker for serialization has been published in Kotlin 1.3.50. If you need to use the earlier Kotlin version, see [KT-27612](https://youtrack.jetbrains.com/issue/KT-27612) for workaround with [plugin resolution rules](https://docs.gradle.org/current/userguide/plugins.html#sec:plugin_resolution_rules).\n\nRuntime library should be added to dependencies the same way as before.\n\n### Android/JVM\n\nLibrary should work on Android "as is". If you\'re using proguard, you need\nto add this to your `proguard-rules.pro`:\n\n```proguard\n-keepattributes *Annotation*, InnerClasses\n-dontnote kotlinx.serialization.SerializationKt\n-keep,includedescriptorclasses class com.yourcompany.yourpackage.**$$serializer { *; } # <-- change package name to your app\'s\n-keepclassmembers class com.yourcompany.yourpackage.** { # <-- change package name to your app\'s\n    *** Companion;\n}\n-keepclasseswithmembers class com.yourcompany.yourpackage.** { # <-- change package name to your app\'s\n    kotlinx.serialization.KSerializer serializer(...);\n}\n```\n\nYou may also want to keep all custom serializers you\'ve defined.\n\n### Multiplatform (common, JS, Native)\n\nPlatform artifacts have the same names as JVM one, but with additional suffix (e.g. `org.jetbrains.kotlinx:kotlinx-serialization-runtime-native`). For Native artifact, Gradle metadata is required (put the line `enableFeaturePreview(\'GRADLE_METADATA\')` in your `gradle.properties`) and minimal supported version of Gradle is 5.3.\n\nTypically, you need the following dependencies in your multiplatform project (don\'t forget to rename [source sets](https://kotlinlang.org/docs/reference/building-mpp-with-gradle.html#configuring-source-sets) according to your setup):\n\n```gradle\nsourceSets {\n    commonMain {\n        dependencies {\n            implementation kotlin(\'stdlib-common\')\n            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$serialization_version"\n        }\n    }\n    commonTest {\n        dependencies {\n            implementation kotlin(\'test-common\')\n            implementation kotlin(\'test-annotations-common\')\n        }\n    }\n    jvmMain {\n        dependencies {\n            implementation kotlin(\'stdlib-jdk8\')\n            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serialization_version"\n        }\n    }\n    jvmTest {\n        dependencies {\n            implementation kotlin(\'test\')\n            implementation kotlin(\'test-junit\')\n        }\n    }\n    jsMain {\n        dependencies {\n            implementation kotlin(\'stdlib-js\')\n            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-js:$serialization_version"\n        }\n    }\n    jsTest {\n        dependencies {\n            implementation kotlin(\'test-js\')\n        }\n    }\n    nativeMain {\n        dependencies {\n            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:$serialization_version"\n        }\n    }\n    nativeTest {}\n}\n```\n\nJavaScript example is located at [`example-js`](examples/example-js) folder.\nMultiplatform example is located at [`example-multiplatform`](examples/example-multiplatform) folder.\n\n### Maven/JVM\n\nEnsure the proper version of Kotlin and serialization version:\n\n```xml\n<properties>\n    <kotlin.version>1.3.60</kotlin.version>\n    <serialization.version>0.14.0</serialization.version>\n</properties>\n```\n\nInclude kotlinx bintray repository for library:\n\n```xml\n<repositories>\n    <repository>\n        <id>bintray-kotlin-kotlinx</id>\n        <name>bintray</name>\n        <url>https://kotlin.bintray.com/kotlinx</url>\n    </repository>\n</repositories>\n```\n\nYou also can use JCenter.\n\nAdd serialization plugin to Kotlin compiler plugin:\n\n```xml\n<build>\n    <plugins>\n        <plugin>\n            <groupId>org.jetbrains.kotlin</groupId>\n            <artifactId>kotlin-maven-plugin</artifactId>\n            <version>${kotlin.version}</version>\n            <executions>\n                <execution>\n                    <id>compile</id>\n                    <phase>compile</phase>\n                    <goals>\n                        <goal>compile</goal>\n                    </goals>\n                </execution>\n            </executions>\n            <configuration>\n                <compilerPlugins>\n                    <plugin>kotlinx-serialization</plugin>\n                </compilerPlugins>\n            </configuration>\n            <dependencies>\n                <dependency>\n                    <groupId>org.jetbrains.kotlin</groupId>\n                    <artifactId>kotlin-maven-serialization</artifactId>\n                    <version>${kotlin.version}</version>\n                </dependency>\n            </dependencies>\n        </plugin>\n    </plugins>\n</build>\n```\n\nAdd dependency on serialization runtime library:\n\n```xml\n<dependency>\n    <groupId>org.jetbrains.kotlinx</groupId>\n    <artifactId>kotlinx-serialization-runtime</artifactId>\n    <version>${serialization.version}</version>\n</dependency>\n```\n\n### Incompatible changes\n\nLibrary versions `0.14.0` and higher require Kotlin 1.3.60 and higher and incompatible with previous versions.\n\nAll versions of library before `0.13.0` are using Gradle metadata v0.4 and therefore it is recommended to use Gradle 4.8-5.1 to build.\n\nLibrary versions `0.11.0` and higher require Kotlin 1.3.30 and higher and incompatible with previous versions.\n\nAll versions of library before `0.10.0` are using Gradle metadata v0.3 and therefore require Gradle 4.7 for build.\n\nMaven plugin coordinates before Kotlin 1.3.20 were `kotlinx-maven-serialization-plugin`.\n\nFor deprecated `kotlin-platform-native` plugin, you need to use `kotlinx-serialization-native` plugin (see [#2210](https://github.com/JetBrains/kotlin-native/issues/2210#issuecomment-429753168)).\n\n## Troubleshooting IntelliJ IDEA\n\nSerialization support should work out of the box, if you have 1.3.x Kotlin plugin installed and have imported the project from Maven or Gradle with serialization enabled in their buildscripts. If you have Kotlin 1.3.10 or lower, you have to delegate build to Gradle (`Settings - Build, Execution, Deployment - Build Tools - Gradle - Runner -` tick `Delegate IDE build/run actions to gradle`). Starting from 1.3.11, no delegation is required.\nIn case of problems, force project re-import from Gradle.\n'