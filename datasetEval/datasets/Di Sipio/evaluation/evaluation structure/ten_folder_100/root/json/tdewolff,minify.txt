b'# Minify <a name="minify"></a> [![Build Status](https://travis-ci.org/tdewolff/minify.svg?branch=master)](https://travis-ci.org/tdewolff/minify) [![GoDoc](http://godoc.org/github.com/tdewolff/minify?status.svg)](http://godoc.org/github.com/tdewolff/minify) [![Coverage Status](https://coveralls.io/repos/github/tdewolff/minify/badge.svg?branch=master)](https://coveralls.io/github/tdewolff/minify?branch=master)\n\n**[Online demo](https://go.tacodewolff.nl/minify) if you need to minify files *now*.**\n\n**[Command line tool](https://github.com/tdewolff/minify/tree/master/cmd/minify) that minifies concurrently and supports watching file changes.**\n\n**[All releases](https://github.com/tdewolff/minify/releases) for various platforms.**\n\n- [Arch Linux](https://aur.archlinux.org/packages/minify/)\n- [FreeBSD](https://www.freshports.org/textproc/minify)\n\n---\n\n*Did you know that the shortest valid piece of HTML5 is `<!doctype html><html lang><title>x</title>`? See for yourself at the [W3C Validator](http://validator.w3.org/)!*\n\nMinify is a minifier package written in [Go][1]. It provides HTML5, CSS3, JS, JSON, SVG and XML minifiers and an interface to implement any other minifier. Minification is the process of removing bytes from a file (such as whitespace) without changing its output and therefore shrinking its size and speeding up transmission over the internet and possibly parsing. The implemented minifiers are designed for high performance.\n\nThe core functionality associates mimetypes with minification functions, allowing embedded resources (like CSS or JS within HTML files) to be minified as well. Users can add new implementations that are triggered based on a mimetype (or pattern), or redirect to an external command (like ClosureCompiler, UglifyCSS, ...).\n\n#### Table of Contents\n\n- [Minify](#minify)\n\t- [Prologue](#prologue)\n\t- [Installation](#installation)\n\t- [API stability](#api-stability)\n\t- [Testing](#testing)\n\t- [Performance](#performance)\n\t- [HTML](#html)\n\t\t- [Whitespace removal](#whitespace-removal)\n\t- [CSS](#css)\n\t- [JS](#js)\n\t- [JSON](#json)\n\t- [SVG](#svg)\n\t- [XML](#xml)\n\t- [Usage](#usage)\n\t\t- [New](#new)\n\t\t- [From reader](#from-reader)\n\t\t- [From bytes](#from-bytes)\n\t\t- [From string](#from-string)\n\t\t- [To reader](#to-reader)\n\t\t- [To writer](#to-writer)\n\t\t- [Middleware](#middleware)\n\t\t- [Custom minifier](#custom-minifier)\n\t\t- [Mediatypes](#mediatypes)\n\t- [Examples](#examples)\n\t\t- [Common minifiers](#common-minifiers)\n\t\t- [Custom minifier](#custom-minifier-example)\n\t\t- [ResponseWriter](#responsewriter)\n\t\t- [Templates](#templates)\n\t- [License](#license)\n\n### Status\n\n* CSS: **fully implemented**\n* HTML: **fully implemented**\n* JS: improved JSmin implementation\n* JSON: **fully implemented**\n* SVG: partially implemented; in development\n* XML: **fully implemented**\n\n### Roadmap\n\n- [ ] Use ASM/SSE to further speed-up core parts of the parsers/minifiers\n- [ ] Improve JS minifiers by shortening variables and proper semicolon omission\n- [ ] Speed-up SVG minifier, it is very slow\n- [x] Proper parser error reporting and line number + column information\n- [ ] Generation of source maps (uncertain, might slow down parsers too much if it cannot run separately nicely)\n- [ ] Create a cmd to pack webfiles (much like webpack), ie. merging CSS and JS files, inlining small external files, minification and gzipping. This would work on HTML files.\n\n## Prologue\nMinifiers or bindings to minifiers exist in almost all programming languages. Some implementations are merely using several regular expressions to trim whitespace and comments (even though regex for parsing HTML/XML is ill-advised, for a good read see [Regular Expressions: Now You Have Two Problems](http://blog.codinghorror.com/regular-expressions-now-you-have-two-problems/)). Some implementations are much more profound, such as the [YUI Compressor](http://yui.github.io/yuicompressor/) and [Google Closure Compiler](https://github.com/google/closure-compiler) for JS. As most existing implementations either use JavaScript, use regexes, and don\'t focus on performance, they are pretty slow.\n\nThis minifier proves to be that fast and extensive minifier that can handle HTML and any other filetype it may contain (CSS, JS, ...). It is usually orders of magnitude faster than existing minifiers.\n\n## Installation\nRun the following command\n\n\tgo get -u github.com/tdewolff/minify/v2\n\nor add the following imports and run the project with `go get`\n``` go\nimport (\n\t"github.com/tdewolff/minify/v2"\n\t"github.com/tdewolff/minify/v2/css"\n\t"github.com/tdewolff/minify/v2/html"\n\t"github.com/tdewolff/minify/v2/js"\n\t"github.com/tdewolff/minify/v2/json"\n\t"github.com/tdewolff/minify/v2/svg"\n\t"github.com/tdewolff/minify/v2/xml"\n)\n```\n\n## API stability\nThere is no guarantee for absolute stability, but I take issues and bugs seriously and don\'t take API changes lightly. The library will be maintained in a compatible way unless vital bugs prevent me from doing so. There has been one API change after v1 which added options support and I took the opportunity to push through some more API clean up as well. There are no plans whatsoever for future API changes.\n\n## Testing\nFor all subpackages and the imported `parse` package, test coverage of 100% is pursued. Besides full coverage, the minifiers are [fuzz tested](https://github.com/tdewolff/fuzz) using [github.com/dvyukov/go-fuzz](http://www.github.com/dvyukov/go-fuzz), see [the wiki](https://github.com/tdewolff/minify/wiki) for the most important bugs found by fuzz testing. These tests ensure that everything works as intended and that the code does not crash (whatever the input). If you still encounter a bug, please file a [bug report](https://github.com/tdewolff/minify/issues)!\n\n## Performance\nThe benchmarks directory contains a number of standardized samples used to compare performance between changes. To give an indication of the speed of this library, I\'ve ran the tests on my Thinkpad T460 (i5-6300U quad-core 2.4GHz running Arch Linux) using Go 1.9.2.\n\n```\nname                              time/op\nCSS/sample_bootstrap.css-4          2.26ms \xc2\xb1 0%\nCSS/sample_gumby.css-4              2.92ms \xc2\xb1 1%\nHTML/sample_amazon.html-4           2.33ms \xc2\xb1 2%\nHTML/sample_bbc.html-4              1.02ms \xc2\xb1 1%\nHTML/sample_blogpost.html-4          171\xc2\xb5s \xc2\xb1 2%\nHTML/sample_es6.html-4              14.5ms \xc2\xb1 0%\nHTML/sample_stackoverflow.html-4    2.41ms \xc2\xb1 1%\nHTML/sample_wikipedia.html-4        4.76ms \xc2\xb1 0%\nJS/sample_ace.js-4                  7.41ms \xc2\xb1 0%\nJS/sample_dot.js-4                  63.7\xc2\xb5s \xc2\xb1 0%\nJS/sample_jquery.js-4               2.99ms \xc2\xb1 0%\nJS/sample_jqueryui.js-4             5.92ms \xc2\xb1 2%\nJS/sample_moment.js-4               1.09ms \xc2\xb1 1%\nJSON/sample_large.json-4            2.95ms \xc2\xb1 0%\nJSON/sample_testsuite.json-4        1.51ms \xc2\xb1 1%\nJSON/sample_twitter.json-4          6.75\xc2\xb5s \xc2\xb1 1%\nSVG/sample_arctic.svg-4             62.3ms \xc2\xb1 1%\nSVG/sample_gopher.svg-4              218\xc2\xb5s \xc2\xb1 0%\nSVG/sample_usa.svg-4                33.1ms \xc2\xb1 3%\nXML/sample_books.xml-4              36.2\xc2\xb5s \xc2\xb1 0%\nXML/sample_catalog.xml-4            14.9\xc2\xb5s \xc2\xb1 0%\nXML/sample_omg.xml-4                6.31ms \xc2\xb1 1%\n\nname                              speed\nCSS/sample_bootstrap.css-4        60.8MB/s \xc2\xb1 0%\nCSS/sample_gumby.css-4            63.9MB/s \xc2\xb1 1%\nHTML/sample_amazon.html-4          203MB/s \xc2\xb1 2%\nHTML/sample_bbc.html-4             113MB/s \xc2\xb1 1%\nHTML/sample_blogpost.html-4        123MB/s \xc2\xb1 2%\nHTML/sample_es6.html-4            70.7MB/s \xc2\xb1 0%\nHTML/sample_stackoverflow.html-4  85.2MB/s \xc2\xb1 1%\nHTML/sample_wikipedia.html-4      93.6MB/s \xc2\xb1 0%\nJS/sample_ace.js-4                86.9MB/s \xc2\xb1 0%\nJS/sample_dot.js-4                81.0MB/s \xc2\xb1 0%\nJS/sample_jquery.js-4             82.8MB/s \xc2\xb1 0%\nJS/sample_jqueryui.js-4           79.3MB/s \xc2\xb1 2%\nJS/sample_moment.js-4             91.2MB/s \xc2\xb1 1%\nJSON/sample_large.json-4           258MB/s \xc2\xb1 0%\nJSON/sample_testsuite.json-4       457MB/s \xc2\xb1 1%\nJSON/sample_twitter.json-4         226MB/s \xc2\xb1 1%\nSVG/sample_arctic.svg-4           23.6MB/s \xc2\xb1 1%\nSVG/sample_gopher.svg-4           26.7MB/s \xc2\xb1 0%\nSVG/sample_usa.svg-4              30.9MB/s \xc2\xb1 3%\nXML/sample_books.xml-4             122MB/s \xc2\xb1 0%\nXML/sample_catalog.xml-4           130MB/s \xc2\xb1 0%\nXML/sample_omg.xml-4               180MB/s \xc2\xb1 1%\n```\n\n## HTML\n\nHTML (with JS and CSS) minification typically shaves off about 10%.\n\nThe HTML5 minifier uses these minifications:\n\n- strip unnecessary whitespace and otherwise collapse it to one space (or newline if it originally contained a newline)\n- strip superfluous quotes, or uses single/double quotes whichever requires fewer escapes\n- strip default attribute values and attribute boolean values\n- strip some empty attributes\n- strip unrequired tags (`html`, `head`, `body`, ...)\n- strip unrequired end tags (`tr`, `td`, `li`, ... and often `p`)\n- strip default protocols (`http:`, `https:` and `javascript:`)\n- strip all comments (including conditional comments, old IE versions are not supported anymore by Microsoft)\n- shorten `doctype` and `meta` charset\n- lowercase tags, attributes and some values to enhance gzip compression\n\nOptions:\n\n- `KeepConditionalComments` preserve all IE conditional comments such as `<!--[if IE 6]><![endif]-->` and `<![if IE 6]><![endif]>`, see https://msdn.microsoft.com/en-us/library/ms537512(v=vs.85).aspx#syntax\n- `KeepDefaultAttrVals` preserve default attribute values such as `<script type="application/javascript">`\n- `KeepDocumentTags` preserve `html`, `head` and `body` tags\n- `KeepEndTags` preserve all end tags\n- `KeepWhitespace` preserve whitespace between inline tags but still collapse multiple whitespace characters into one\n\nAfter recent benchmarking and profiling it became really fast and minifies pages in the 10ms range, making it viable for on-the-fly minification.\n\nHowever, be careful when doing on-the-fly minification. Minification typically trims off 10% and does this at worst around about 20MB/s. This means users have to download slower than 2MB/s to make on-the-fly minification worthwhile. This may or may not apply in your situation. Rather use caching!\n\n### Whitespace removal\nThe whitespace removal mechanism collapses all sequences of whitespace (spaces, newlines, tabs) to a single space. If the sequence contained a newline or carriage return it will collapse into a newline character instead. It trims all text parts (in between tags) depending on whether it was preceded by a space from a previous piece of text and whether it is followed up by a block element or an inline element. In the former case we can omit spaces while for inline elements whitespace has significance.\n\nMake sure your HTML doesn\'t depend on whitespace between `block` elements that have been changed to `inline` or `inline-block` elements using CSS. Your layout *should not* depend on those whitespaces as the minifier will remove them. An example is a menu consisting of multiple `<li>` that have `display:inline-block` applied and have whitespace in between them. It is bad practise to rely on whitespace for element positioning anyways!\n\n## CSS\n\nMinification typically shaves off about 10%-15%. This CSS minifier will _not_ do structural changes to your stylesheets. Although this could result in smaller files, the complexity is quite high and the risk of breaking website is high too.\n\nThe CSS minifier will only use safe minifications:\n\n- remove comments and unnecessary whitespace (but keep `/*! ... */` which usually contains the license)\n- remove trailing semicolons\n- optimize `margin`, `padding` and `border-width` number of sides\n- shorten numbers by removing unnecessary `+` and zeros and rewriting with/without exponent\n- remove dimension and percentage for zero values\n- remove quotes for URLs\n- remove quotes for font families and make lowercase\n- rewrite hex colors to/from color names, or to three digit hex\n- rewrite `rgb(`, `rgba(`, `hsl(` and `hsla(` colors to hex or name\n- use four digit hex for alpha values (`transparent` &#8594; `#0000`)\n- replace `normal` and `bold` by numbers for `font-weight` and `font`\n- replace `none` &#8594; `0` for `border`, `background` and `outline`\n- lowercase all identifiers except classes, IDs and URLs to enhance gzip compression\n- shorten MS alpha function\n- rewrite data URIs with base64 or ASCII whichever is shorter\n- calls minifier for data URI mediatypes, thus you can compress embedded SVG files if you have that minifier attached\n- shorten aggregate declarations such as `background` and `font`\n\nIt does purposely not use the following techniques:\n\n- (partially) merge rulesets\n- (partially) split rulesets\n- collapse multiple declarations when main declaration is defined within a ruleset (don\'t put `font-weight` within an already existing `font`, too complex)\n- remove overwritten properties in ruleset (this not always overwrites it, for example with `!important`)\n- rewrite properties into one ruleset if possible (like `margin-top`, `margin-right`, `margin-bottom` and `margin-left` &#8594; `margin`)\n- put nested ID selector at the front (`body > div#elem p` &#8594; `#elem p`)\n- rewrite attribute selectors for IDs and classes (`div[id=a]` &#8594; `div#a`)\n- put space after pseudo-selectors (IE6 is old, move on!)\n\nThere are a couple of comparison tables online, such as [CSS Minifier Comparison](http://www.codenothing.com/benchmarks/css-compressor-3.0/full.html), [CSS minifiers comparison](http://www.phpied.com/css-minifiers-comparison/) and [CleanCSS tests](http://goalsmashers.github.io/css-minification-benchmark/). Comparing speed between each, this minifier will usually be between 10x-300x faster than existing implementations, and even rank among the top for minification ratios. It falls short with the purposely not implemented and often unsafe techniques.\n\nOptions:\n\n- `Decimals` number of decimals to preserve for numbers, `-1` means no trimming\n- `KeepCSS2` prohibits using CSS3 syntax (such as exponents in numbers, or `rgba(` &#8594; `rgb(`), might be incomplete\n\n## JS\n\nThe JS minifier is pretty basic. It removes comments, whitespace and line breaks whenever it can. It employs all the rules that [JSMin](http://www.crockford.com/javascript/jsmin.html) does too, but has additional improvements. For example the prefix-postfix bug is fixed.\n\nCommon speeds of PHP and JS implementations are about 100-300kB/s (see [Uglify2](http://lisperator.net/uglifyjs/), [Adventures in PHP web asset minimization](https://www.happyassassin.net/2014/12/29/adventures-in-php-web-asset-minimization/)). This implementation or orders of magnitude faster, around ~80MB/s.\n\nTODO:\n- shorten local variables / function parameters names\n- precise semicolon and newline omission\n\n## JSON\n\nMinification typically shaves off about 15% of filesize for common indented JSON such as generated by [JSON Generator](http://www.json-generator.com/).\n\nThe JSON minifier only removes whitespace, which is the only thing that can be left out.\n\n## SVG\n\nThe SVG minifier uses these minifications:\n\n- trim and collapse whitespace between all tags\n- strip comments, empty `doctype`, XML prelude, `metadata`\n- strip SVG version\n- strip CDATA sections wherever possible\n- collapse tags with no content to a void tag\n- minify style tag and attributes with the CSS minifier\n- minify colors\n- shorten lengths and numbers and remove default `px` unit\n- shorten `path` data\n- use relative or absolute positions in path data whichever is shorter\n\nTODO:\n- convert attributes to style attribute whenever shorter\n- merge path data? (same style and no intersection -- the latter is difficult)\n\nOptions:\n\n- `Decimals` number of decimals to preserve for numbers, `-1` means no trimming\n\n## XML\n\nThe XML minifier uses these minifications:\n\n- strip unnecessary whitespace and otherwise collapse it to one space (or newline if it originally contained a newline)\n- strip comments\n- collapse tags with no content to a void tag\n- strip CDATA sections wherever possible\n\nOptions:\n\n- `KeepWhitespace` preserve whitespace between inline tags but still collapse multiple whitespace characters into one\n\n## Usage\nAny input stream is being buffered by the minification functions. This is how the underlying buffer package inherently works to ensure high performance. The output stream however is not buffered. It is wise to preallocate a buffer as big as the input to which the output is written, or otherwise use `bufio` to buffer to a streaming writer.\n\n### New\nRetrieve a minifier struct which holds a map of mediatype &#8594; minifier functions.\n``` go\nm := minify.New()\n```\n\nThe following loads all provided minifiers.\n``` go\nm := minify.New()\nm.AddFunc("text/css", css.Minify)\nm.AddFunc("text/html", html.Minify)\nm.AddFunc("image/svg+xml", svg.Minify)\nm.AddFuncRegexp(regexp.MustCompile("^(application|text)/(x-)?(java|ecma)script$"), js.Minify)\nm.AddFuncRegexp(regexp.MustCompile("[/+]json$"), json.Minify)\nm.AddFuncRegexp(regexp.MustCompile("[/+]xml$"), xml.Minify)\n```\n\nYou can set options to several minifiers.\n``` go\nm.Add("text/html", &html.Minifier{\n\tKeepDefaultAttrVals: true,\n\tKeepWhitespace: true,\n})\n```\n\n### From reader\nMinify from an `io.Reader` to an `io.Writer` for a specific mediatype.\n``` go\nif err := m.Minify(mediatype, w, r); err != nil {\n\tpanic(err)\n}\n```\n\n### From bytes\nMinify from and to a `[]byte` for a specific mediatype.\n``` go\nb, err = m.Bytes(mediatype, b)\nif err != nil {\n\tpanic(err)\n}\n```\n\n### From string\nMinify from and to a `string` for a specific mediatype.\n``` go\ns, err = m.String(mediatype, s)\nif err != nil {\n\tpanic(err)\n}\n```\n\n### To reader\nGet a minifying reader for a specific mediatype.\n``` go\nmr := m.Reader(mediatype, r)\nif _, err := mr.Read(b); err != nil {\n\tpanic(err)\n}\n```\n\n### To writer\nGet a minifying writer for a specific mediatype. Must be explicitly closed because it uses an `io.Pipe` underneath.\n``` go\nmw := m.Writer(mediatype, w)\nif mw.Write([]byte("input")); err != nil {\n\tpanic(err)\n}\nif err := mw.Close(); err != nil {\n\tpanic(err)\n}\n```\n\n### Middleware\nMinify resources on the fly using middleware. It passes a wrapped response writer to the handler that removes the Content-Length header. The minifier is chosen based on the Content-Type header or, if the header is empty, by the request URI file extension. This is on-the-fly processing, you should preferably cache the results though!\n``` go\nfs := http.FileServer(http.Dir("www/"))\nhttp.Handle("/", m.Middleware(fs))\n```\n\n### Custom minifier\nAdd a minifier for a specific mimetype.\n``` go\ntype CustomMinifier struct {\n\tKeepLineBreaks bool\n}\n\nfunc (c *CustomMinifier) Minify(m *minify.M, w io.Writer, r io.Reader, params map[string]string) error {\n\t// ...\n\treturn nil\n}\n\nm.Add(mimetype, &CustomMinifier{KeepLineBreaks: true})\n// or\nm.AddRegexp(regexp.MustCompile("/x-custom$"), &CustomMinifier{KeepLineBreaks: true})\n```\n\nAdd a minify function for a specific mimetype.\n``` go\nm.AddFunc(mimetype, func(m *minify.M, w io.Writer, r io.Reader, params map[string]string) error {\n\t// ...\n\treturn nil\n})\nm.AddFuncRegexp(regexp.MustCompile("/x-custom$"), func(m *minify.M, w io.Writer, r io.Reader, params map[string]string) error {\n\t// ...\n\treturn nil\n})\n```\n\nAdd a command `cmd` with arguments `args` for a specific mimetype.\n``` go\nm.AddCmd(mimetype, exec.Command(cmd, args...))\nm.AddCmdRegexp(regexp.MustCompile("/x-custom$"), exec.Command(cmd, args...))\n```\n\n### Mediatypes\nUsing the `params map[string]string` argument one can pass parameters to the minifier such as seen in mediatypes (`type/subtype; key1=val2; key2=val2`). Examples are the encoding or charset of the data. Calling `Minify` will split the mimetype and parameters for the minifiers for you, but `MinifyMimetype` can be used if you already have them split up.\n\nMinifiers can also be added using a regular expression. For example a minifier with `image/.*` will match any image mime.\n\n## Examples\n### Common minifiers\nBasic example that minifies from stdin to stdout and loads the default HTML, CSS and JS minifiers. Optionally, one can enable `java -jar build/compiler.jar` to run for JS (for example the [ClosureCompiler](https://code.google.com/p/closure-compiler/)). Note that reading the file into a buffer first and writing to a pre-allocated buffer would be faster (but would disable streaming).\n``` go\npackage main\n\nimport (\n\t"log"\n\t"os"\n\t"os/exec"\n\n\t"github.com/tdewolff/minify/v2"\n\t"github.com/tdewolff/minify/v2/css"\n\t"github.com/tdewolff/minify/v2/html"\n\t"github.com/tdewolff/minify/v2/js"\n\t"github.com/tdewolff/minify/v2/json"\n\t"github.com/tdewolff/minify/v2/svg"\n\t"github.com/tdewolff/minify/v2/xml"\n)\n\nfunc main() {\n\tm := minify.New()\n\tm.AddFunc("text/css", css.Minify)\n\tm.AddFunc("text/html", html.Minify)\n\tm.AddFunc("image/svg+xml", svg.Minify)\n\tm.AddFuncRegexp(regexp.MustCompile("^(application|text)/(x-)?(java|ecma)script$"), js.Minify)\n\tm.AddFuncRegexp(regexp.MustCompile("[/+]json$"), json.Minify)\n\tm.AddFuncRegexp(regexp.MustCompile("[/+]xml$"), xml.Minify)\n\n\t// Or use the following for better minification of JS but lower speed:\n\t// m.AddCmdRegexp(regexp.MustCompile("^(application|text)/(x-)?(java|ecma)script$"), exec.Command("java", "-jar", "build/compiler.jar"))\n\n\tif err := m.Minify("text/html", os.Stdout, os.Stdin); err != nil {\n\t\tpanic(err)\n\t}\n}\n```\n\n### <a name="custom-minifier-example"></a> Custom minifier\nCustom minifier showing an example that implements the minifier function interface. Within a custom minifier, it is possible to call any minifier function (through `m minify.Minifier`) recursively when dealing with embedded resources.\n``` go\npackage main\n\nimport (\n\t"bufio"\n\t"fmt"\n\t"io"\n\t"log"\n\t"strings"\n\n\t"github.com/tdewolff/minify/v2"\n)\n\nfunc main() {\n\tm := minify.New()\n\tm.AddFunc("text/plain", func(m *minify.M, w io.Writer, r io.Reader, _ map[string]string) error {\n\t\t// remove newlines and spaces\n\t\trb := bufio.NewReader(r)\n\t\tfor {\n\t\t\tline, err := rb.ReadString(\'\\n\')\n\t\t\tif err != nil && err != io.EOF {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tif _, errws := io.WriteString(w, strings.Replace(line, " ", "", -1)); errws != nil {\n\t\t\t\treturn errws\n\t\t\t}\n\t\t\tif err == io.EOF {\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\treturn nil\n\t})\n\n\tin := "Because my coffee was too cold, I heated it in the microwave."\n\tout, err := m.String("text/plain", in)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(out)\n\t// Output: Becausemycoffeewastoocold,Iheateditinthemicrowave.\n}\n```\n\n### ResponseWriter\n#### Middleware\n``` go\nfunc main() {\n\tm := minify.New()\n\tm.AddFunc("text/css", css.Minify)\n\tm.AddFunc("text/html", html.Minify)\n\tm.AddFunc("image/svg+xml", svg.Minify)\n\tm.AddFuncRegexp(regexp.MustCompile("^(application|text)/(x-)?(java|ecma)script$"), js.Minify)\n\tm.AddFuncRegexp(regexp.MustCompile("[/+]json$"), json.Minify)\n\tm.AddFuncRegexp(regexp.MustCompile("[/+]xml$"), xml.Minify)\n\n\tfs := http.FileServer(http.Dir("www/"))\n\thttp.Handle("/", m.Middleware(fs))\n}\n```\n\n#### ResponseWriter\n``` go\nfunc Serve(w http.ResponseWriter, r *http.Request) {\n\tmw := m.ResponseWriter(w, r)\n\tdefer mw.Close()\n\tw = mw\n\n\thttp.ServeFile(w, r, path.Join("www", r.URL.Path))\n}\n```\n\n#### Custom response writer\nResponseWriter example which returns a ResponseWriter that minifies the content and then writes to the original ResponseWriter. Any write after applying this filter will be minified.\n``` go\ntype MinifyResponseWriter struct {\n\thttp.ResponseWriter\n\tio.WriteCloser\n}\n\nfunc (m MinifyResponseWriter) Write(b []byte) (int, error) {\n\treturn m.WriteCloser.Write(b)\n}\n\n// MinifyResponseWriter must be closed explicitly by calling site.\nfunc MinifyFilter(mediatype string, res http.ResponseWriter) MinifyResponseWriter {\n\tm := minify.New()\n\t// add minfiers\n\n\tmw := m.Writer(mediatype, res)\n\treturn MinifyResponseWriter{res, mw}\n}\n```\n\n``` go\n// Usage\nfunc(w http.ResponseWriter, req *http.Request) {\n\tw = MinifyFilter("text/html", w)\n\tif _, err := io.WriteString(w, "<p class="message"> This HTTP response will be minified. </p>"); err != nil {\n\t\tpanic(err)\n\t}\n\tif err := w.Close(); err != nil {\n\t\tpanic(err)\n\t}\n\t// Output: <p class=message>This HTTP response will be minified.\n}\n```\n\n### Templates\n\nHere\'s an example of a replacement for `template.ParseFiles` from `template/html`, which automatically minifies each template before parsing it.\n\nBe aware that minifying templates will work in most cases but not all. Because the HTML minifier only works for valid HTML5, your template must be valid HTML5 of itself. Template tags are parsed as regular text by the minifier.\n\n``` go\nfunc compileTemplates(filenames ...string) (*template.Template, error) {\n\tm := minify.New()\n\tm.AddFunc("text/html", html.Minify)\n\n\tvar tmpl *template.Template\n\tfor _, filename := range filenames {\n\t\tname := filepath.Base(filename)\n\t\tif tmpl == nil {\n\t\t\ttmpl = template.New(name)\n\t\t} else {\n\t\t\ttmpl = tmpl.New(name)\n\t\t}\n\n\t\tb, err := ioutil.ReadFile(filename)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\tmb, err := m.Bytes("text/html", b)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\ttmpl.Parse(string(mb))\n\t}\n\treturn tmpl, nil\n}\n```\n\nExample usage:\n\n``` go\ntemplates := template.Must(compileTemplates("view.html", "home.html"))\n```\n\n## License\nReleased under the [MIT license](LICENSE.md).\n\n[1]: http://golang.org/ "Go Language"\n'