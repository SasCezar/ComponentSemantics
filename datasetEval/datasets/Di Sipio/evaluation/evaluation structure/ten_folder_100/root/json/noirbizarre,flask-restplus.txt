b'==============\nFlask RestPlus\n==============\n\n.. image:: https://secure.travis-ci.org/noirbizarre/flask-restplus.svg?branch=master\n    :target: https://travis-ci.org/noirbizarre/flask-restplus?branch=master\n    :alt: Build status\n.. image:: https://coveralls.io/repos/noirbizarre/flask-restplus/badge.svg?branch=master\n    :target: https://coveralls.io/r/noirbizarre/flask-restplus?branch=master\n    :alt: Code coverage\n.. image:: https://readthedocs.org/projects/flask-restplus/badge/?version=latest\n    :target: https://flask-restplus.readthedocs.io/en/latest/\n    :alt: Documentation status\n.. image:: https://img.shields.io/pypi/l/flask-restplus.svg\n    :target: https://pypi.org/project/flask-restplus\n    :alt: License\n.. image:: https://img.shields.io/pypi/pyversions/flask-restplus.svg\n    :target: https://pypi.org/project/flask-restplus\n    :alt: Supported Python versions\n.. image:: https://badges.gitter.im/Join%20Chat.svg\n   :alt: Join the chat at https://gitter.im/noirbizarre/flask-restplus\n   :target: https://gitter.im/noirbizarre/flask-restplus?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge\n\nFlask-RESTPlus is an extension for `Flask`_ that adds support for quickly building REST APIs.\nFlask-RESTPlus encourages best practices with minimal setup.\nIf you are familiar with Flask, Flask-RESTPlus should be easy to pick up.\nIt provides a coherent collection of decorators and tools to describe your API\nand expose its documentation properly using `Swagger`_.\n\n\nCompatibility\n=============\n\nFlask-RestPlus requires Python 2.7 or 3.4+.\n\n\nInstallation\n============\n\nYou can install Flask-Restplus with pip:\n\n.. code-block:: console\n\n    $ pip install flask-restplus\n\nor with easy_install:\n\n.. code-block:: console\n\n    $ easy_install flask-restplus\n\n\nQuick start\n===========\n\nWith Flask-Restplus, you only import the api instance to route and document your endpoints.\n\n.. code-block:: python\n\n    from flask import Flask\n    from flask_restplus import Api, Resource, fields\n\n    app = Flask(__name__)\n    api = Api(app, version=\'1.0\', title=\'TodoMVC API\',\n        description=\'A simple TodoMVC API\',\n    )\n\n    ns = api.namespace(\'todos\', description=\'TODO operations\')\n\n    todo = api.model(\'Todo\', {\n        \'id\': fields.Integer(readOnly=True, description=\'The task unique identifier\'),\n        \'task\': fields.String(required=True, description=\'The task details\')\n    })\n\n\n    class TodoDAO(object):\n        def __init__(self):\n            self.counter = 0\n            self.todos = []\n\n        def get(self, id):\n            for todo in self.todos:\n                if todo[\'id\'] == id:\n                    return todo\n            api.abort(404, "Todo {} doesn\'t exist".format(id))\n\n        def create(self, data):\n            todo = data\n            todo[\'id\'] = self.counter = self.counter + 1\n            self.todos.append(todo)\n            return todo\n\n        def update(self, id, data):\n            todo = self.get(id)\n            todo.update(data)\n            return todo\n\n        def delete(self, id):\n            todo = self.get(id)\n            self.todos.remove(todo)\n\n\n    DAO = TodoDAO()\n    DAO.create({\'task\': \'Build an API\'})\n    DAO.create({\'task\': \'?????\'})\n    DAO.create({\'task\': \'profit!\'})\n\n\n    @ns.route(\'/\')\n    class TodoList(Resource):\n        \'\'\'Shows a list of all todos, and lets you POST to add new tasks\'\'\'\n        @ns.doc(\'list_todos\')\n        @ns.marshal_list_with(todo)\n        def get(self):\n            \'\'\'List all tasks\'\'\'\n            return DAO.todos\n\n        @ns.doc(\'create_todo\')\n        @ns.expect(todo)\n        @ns.marshal_with(todo, code=201)\n        def post(self):\n            \'\'\'Create a new task\'\'\'\n            return DAO.create(api.payload), 201\n\n\n    @ns.route(\'/<int:id>\')\n    @ns.response(404, \'Todo not found\')\n    @ns.param(\'id\', \'The task identifier\')\n    class Todo(Resource):\n        \'\'\'Show a single todo item and lets you delete them\'\'\'\n        @ns.doc(\'get_todo\')\n        @ns.marshal_with(todo)\n        def get(self, id):\n            \'\'\'Fetch a given resource\'\'\'\n            return DAO.get(id)\n\n        @ns.doc(\'delete_todo\')\n        @ns.response(204, \'Todo deleted\')\n        def delete(self, id):\n            \'\'\'Delete a task given its identifier\'\'\'\n            DAO.delete(id)\n            return \'\', 204\n\n        @ns.expect(todo)\n        @ns.marshal_with(todo)\n        def put(self, id):\n            \'\'\'Update a task given its identifier\'\'\'\n            return DAO.update(id, api.payload)\n\n\n    if __name__ == \'__main__\':\n        app.run(debug=True)\n\n\nContributors\n============\n\nFlask-RESTPlus is brought to you by @noirbizarre. Since early 2019 @SteadBytes,\n@a-luna, @j5awry, @ziirish volunteered to help @noirbizarre keep the project up\nand running.\nOf course everyone is welcome to contribute and we will be happy to review your\nPR\'s or answer to your issues.\n\n\nDocumentation\n=============\n\nThe documentation is hosted `on Read the Docs <http://flask-restplus.readthedocs.io/en/latest/>`_\n\n\n.. _Flask: http://flask.pocoo.org/\n.. _Swagger: http://swagger.io/\n\n\nContribution\n============\nWant to contribute! That\'s awesome! Check out `CONTRIBUTING.rst! <https://github.com/noirbizarre/flask-restplus/blob/master/CONTRIBUTING.rst>`_'