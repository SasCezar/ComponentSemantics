b'<div align="center">\n\t<br>\n\t<div>\n\t\t<img width="600" height="600" src="media/logo.svg" alt="ky">\n\t</div>\n\t<p align="center">Huge thanks to <a href="https://lunanode.com"><img src="https://sindresorhus.com/assets/thanks/lunanode-logo.svg" width="170"></a> for sponsoring me!</p>\n\t<br>\n\t<br>\n\t<br>\n\t<br>\n</div>\n\n> Ky is a tiny and elegant HTTP client based on the browser [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch)\n\n[![Build Status](https://travis-ci.com/sindresorhus/ky.svg?branch=master)](https://travis-ci.com/sindresorhus/ky) [![codecov](https://codecov.io/gh/sindresorhus/ky/branch/master/graph/badge.svg)](https://codecov.io/gh/sindresorhus/ky) [![](https://badgen.net/bundlephobia/minzip/ky)](https://bundlephobia.com/result?p=ky)\n\nKy targets [modern browsers](#browser-support) and [Deno](https://github.com/denoland/deno). For older browsers, you will need to transpile and use a [`fetch` polyfill](https://github.com/github/fetch). For Node.js, check out [Got](https://github.com/sindresorhus/got). For isomorphic needs (like SSR), check out [`ky-universal`](https://github.com/sindresorhus/ky-universal).\n\nIt\'s just a tiny file with no dependencies.\n\n\n## Benefits over plain `fetch`\n\n- Simpler API\n- Method shortcuts (`ky.post()`)\n- Treats non-2xx status codes as errors\n- Retries failed requests\n- JSON option\n- Timeout support\n- URL prefix option\n- Instances with custom defaults\n- Hooks\n\n\n## Install\n\n```\n$ npm install ky\n```\n\n###### Download\n\n- [Normal](https://cdn.jsdelivr.net/npm/ky/index.js)\n- [Minified](https://cdn.jsdelivr.net/npm/ky/index.min.js)\n\n###### CDN\n\n- [jsdelivr](https://www.jsdelivr.com/package/npm/ky)\n- [unpkg](https://unpkg.com/ky)\n\n\n## Usage\n\n```js\nimport ky from \'ky\';\n\n(async () => {\n\tconst parsed = await ky.post(\'https://example.com\', {json: {foo: true}}).json();\n\n\tconsole.log(parsed);\n\t//=> `{data: \'\xf0\x9f\xa6\x84\'}`\n})();\n```\n\nWith plain `fetch`, it would be:\n\n```js\n(async () => {\n\tclass HTTPError extends Error {}\n\n\tconst response = await fetch(\'https://example.com\', {\n\t\tmethod: \'POST\',\n\t\tbody: JSON.stringify({foo: true}),\n\t\theaders: {\n\t\t\t\'content-type\': \'application/json\'\n\t\t}\n\t});\n\n\tif (!response.ok) {\n\t\tthrow new HTTPError(\'Fetch error:\', response.statusText);\n\t}\n\n\tconst parsed = await response.json();\n\n\tconsole.log(parsed);\n\t//=> `{data: \'\xf0\x9f\xa6\x84\'}`\n})();\n```\n\nIf you are using [Deno](https://github.com/denoland/deno), import Ky from a URL. For example, using a CDN:\n\n```js\nimport ky from \'https://unpkg.com/ky/index.js\';\n```\n\nIn environments that do not support `import`, you can load `ky` in [UMD format](https://medium.freecodecamp.org/anatomy-of-js-module-systems-and-building-libraries-fadcd8dbd0e). For example, using `require()`:\n\n```js\nconst ky = require(\'ky/umd\').default;\n```\n\nWith the UMD version, it\'s also easy to use `ky` [without a bundler](#how-do-i-use-this-without-a-bundler-like-webpack) or module system.\n\n\n## API\n\n### ky(input, options?)\n\nThe `input` and `options` are the same as [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch), with some exceptions:\n\n- The `credentials` option is `same-origin` by default, which is the default in the spec too, but not all browsers have caught up yet.\n- Adds some more options. See below.\n\nReturns a [`Response` object](https://developer.mozilla.org/en-US/docs/Web/API/Response) with [`Body` methods](https://developer.mozilla.org/en-US/docs/Web/API/Body#Methods) added for convenience. So you can, for example, call `ky.get(input).json()` directly without having to await the `Response` first. When called like that, an appropriate `Accept` header will be set depending on the body method used. Unlike the `Body` methods of `window.Fetch`; these will throw an `HTTPError` if the response status is not in the range of `200...299`. Also, `.json()` will return an empty string if the response status is `204` instead of throwing a parse error due to an empty body.\n\n### ky.get(input, options?)\n### ky.post(input, options?)\n### ky.put(input, options?)\n### ky.patch(input, options?)\n### ky.head(input, options?)\n### ky.delete(input, options?)\n\nSets `options.method` to the method name and makes a request.\n\nWhen using a `Request` instance as `input`, any URL altering options (such as `prefixUrl`) will be ignored.\n\n#### options\n\nType: `object`\n\n##### method\n\nType: `string`\\\nDefault: `get`\n\nHTTP method used to make the request.\n\nInternally, the standard methods (`GET`, `POST`, `PUT`, `PATCH`, `HEAD` and `DELETE`) are uppercased in order to avoid server errors due to case sensitivity.\n\n##### json\n\nType: `object`\n\nShortcut for sending JSON. Use this instead of the `body` option. Accepts a plain object which will be `JSON.stringify()`\'d and the correct header will be set for you.\n\n##### searchParams\n\nType: `string | object<string, string | number | boolean> | Array<Array<string | number | boolean>> | URLSearchParams`\\\nDefault: `\'\'`\n\nSearch parameters to include in the request URL. Setting this will override all existing search parameters in the input URL.\n\nAccepts any value supported by [`URLSearchParams()`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams/URLSearchParams).\n\n##### prefixUrl\n\nType: `string | URL`\n\nA prefix to prepend to the `input` URL when making the request. It can be any valid URL, either relative or absolute. A trailing slash `/` is optional and will be added automatically, if needed, when it is joined with `input`. Only takes effect when `input` is a string. The `input` argument cannot start with a slash `/` when using this option.\n\nUseful when used with [`ky.extend()`](#kyextenddefaultoptions) to create niche-specific Ky-instances.\n\n```js\nimport ky from \'ky\';\n\n// On https://example.com\n\n(async () => {\n\tawait ky(\'unicorn\', {prefixUrl: \'/api\'});\n\t//=> \'https://example.com/api/unicorn\'\n\n\tawait ky(\'unicorn\', {prefixUrl: \'https://cats.com\'});\n\t//=> \'https://cats.com/unicorn\'\n})();\n```\n\nNotes:\n - After `prefixUrl` and `input` are joined, the result is resolved against the [base URL](https://developer.mozilla.org/en-US/docs/Web/API/Node/baseURI) of the page (if any).\n - Leading slashes in `input` are disallowed when using this option to enforce consistency and avoid confusion about how the `input` URL is handled, given that `input` will not follow the normal URL resolution rules when `prefixUrl` is being used, which changes the meaning of a leading slash.\n\n##### retry\n\nType: `object | number`\\\nDefault:\n- `limit`: `2`\n- `methods`: `get` `put` `head` `delete` `options` `trace`\n- `statusCodes`: [`408`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/408) [`413`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/413) [`429`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429) [`500`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500) [`502`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/502) [`503`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/503) [`504`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/504)\n- `maxRetryAfter`: `undefined`\n\nAn object representing `limit`, `methods`, `statusCodes` and `maxRetryAfter` fields for maximum retry count, allowed methods, allowed status codes and maximum [`Retry-After`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After) time.\n\nIf `retry` is a number, it will be used as `limit` and other defaults will remain in place.\n\nIf `maxRetryAfter` is set to `undefined`, it will use `options.timeout`. If [`Retry-After`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After) header is greater than `maxRetryAfter`, it will cancel the request.\n\nDelays between retries is calculated with the function `0.3 * (2 ** (retry - 1)) * 1000`, where `retry` is the attempt number (starts from 1).\n\n```js\nimport ky from \'ky\';\n\n(async () => {\n\tconst parsed = await ky(\'https://example.com\', {\n\t\tretry: {\n\t\t\tlimit: 10,\n\t\t\tmethods: [\'get\'],\n\t\t\tstatusCodes: [413]\n\t\t}\n\t}).json();\n})();\n```\n\n##### timeout\n\nType: `number | false`\\\nDefault: `10000`\n\nTimeout in milliseconds for getting a response. Can not be greater than 2147483647.\nIf set to `false`, there will be no timeout.\n\n##### hooks\n\nType: `object<string, Function[]>`\\\nDefault: `{beforeRequest: [], beforeRetry: [], afterResponse: []}`\n\nHooks allow modifications during the request lifecycle. Hook functions may be async and are run serially.\n\n###### hooks.beforeRequest\n\nType: `Function[]`\\\nDefault: `[]`\n\nThis hook enables you to modify the request right before it is sent. Ky will make no further changes to the request after this. The hook function receives `request` and `options` as arguments. You could, for example, modify the `request.headers` here.\n\nThe hook can return a [`Request`](https://developer.mozilla.org/en-US/docs/Web/API/Request) to replace the outgoing request, or return a [`Response`](https://developer.mozilla.org/en-US/docs/Web/API/Response) to completely avoid making an HTTP request. This can be used to mock a request, check an internal cache, etc. An **important** consideration when returning a request or response from this hook is that any remaining `beforeRequest` hooks will be skipped, so you may want to only return them from the last hook.\n\n```js\nimport ky from \'ky\';\n\nconst api = ky.extend({\n\thooks: {\n\t\tbeforeRequest: [\n\t\t\trequest => {\n\t\t\t\trequest.headers.set(\'X-Requested-With\', \'ky\');\n\t\t\t}\n\t\t]\n\t}\n});\n\n(async () => {\n\tconst users = await api.get(\'https://example.com/api/users\');\n\t// ...\n})();\n```\n\n###### hooks.beforeRetry\n\nType: `Function[]`\\\nDefault: `[]`\n\nThis hook enables you to modify the request right before retry. Ky will make no further changes to the request after this. The hook function receives the normalized request and options, an error instance and the retry count as arguments. You could, for example, modify `request.headers` here.\n\n```js\nimport ky from \'ky\';\n\n(async () => {\n\tawait ky(\'https://example.com\', {\n\t\thooks: {\n\t\t\tbeforeRetry: [\n\t\t\t\tasync (request, options, errors, retryCount) => {\n\t\t\t\t\tconst token = await ky(\'https://example.com/refresh-token\');\n\t\t\t\t\trequest.headers.set(\'Authorization\', `token ${token}`);\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t});\n})();\n```\n\n###### hooks.afterResponse\n\nType: `Function[]`\\\nDefault: `[]`\n\nThis hook enables you to read and optionally modify the response. The hook function receives normalized request, options, and a clone of the response as arguments. The return value of the hook function will be used by Ky as the response object if it\'s an instance of [`Response`](https://developer.mozilla.org/en-US/docs/Web/API/Response).\n\n```js\nimport ky from \'ky\';\n\n(async () => {\n\tawait ky(\'https://example.com\', {\n\t\thooks: {\n\t\t\tafterResponse: [\n\t\t\t\t(_request, _options, response) => {\n\t\t\t\t\t// You could do something with the response, for example, logging.\n\t\t\t\t\tlog(response);\n\n\t\t\t\t\t// Or return a `Response` instance to overwrite the response.\n\t\t\t\t\treturn new Response(\'A different response\', {status: 200});\n\t\t\t\t},\n\n\t\t\t\t// Or retry with a fresh token on a 403 error\n\t\t\t\tasync (request, options, response) => {\n\t\t\t\t\tif (response.status === 403) {\n\t\t\t\t\t\t// Get a fresh token\n\t\t\t\t\t\tconst token = await ky(\'https://example.com/token\').text();\n\n\t\t\t\t\t\t// Retry with the token\n\t\t\t\t\t\trequest.headers.set(\'Authorization\', `token ${token}`);\n\n\t\t\t\t\t\treturn ky(request);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t});\n})();\n```\n\n##### throwHttpErrors\n\nType: `boolean`\\\nDefault: `true`\n\nThrow a `HTTPError` for error responses (non-2xx status codes).\n\nSetting this to `false` may be useful if you are checking for resource availability and are expecting error responses.\n\n##### onDownloadProgress\n\nType: `Function`\n\nDownload progress event handler.\n\nThe function receives a `progress` and `chunk` argument:\n- The `progress` object contains the following elements: `percent`, `transferredBytes` and `totalBytes`. If it\'s not possible to retrieve the body size, `totalBytes` will be `0`.\n- The `chunk` argument is an instance of `Uint8Array`. It\'s empty for the first call.\n\n```js\nimport ky from \'ky\';\n\n(async () => {\n\tawait ky(\'https://example.com\', {\n\t\tonDownloadProgress: (progress, chunk) => {\n\t\t\t// Example output:\n\t\t\t// `0% - 0 of 1271 bytes`\n\t\t\t// `100% - 1271 of 1271 bytes`\n\t\t\tconsole.log(`${progress.percent * 100}% - ${progress.transferredBytes} of ${progress.totalBytes} bytes`);\n\t\t}\n\t});\n})();\n```\n\n### ky.extend(defaultOptions)\n\nCreate a new `ky` instance with some defaults overridden with your own.\n\nIn contrast to `ky.create()`, `ky.extend()` inherits defaults from its parent.\n\n### ky.create(defaultOptions)\n\nCreate a new Ky instance with complete new defaults.\n\n```js\nimport ky from \'ky\';\n\n// On https://my-site.com\n\nconst api = ky.create({prefixUrl: \'https://example.com/api\'});\n\n(async () => {\n\tawait api.get(\'users/123\');\n\t//=> \'https://example.com/api/users/123\'\n\n\tawait api.get(\'/status\', {prefixUrl: \'\'});\n\t//=> \'https://my-site.com/status\'\n})();\n```\n\n#### defaultOptions\n\nType: `object`\n\n### ky.HTTPError\n\nExposed for `instanceof` checks. The error has a `response` property with the [`Response` object](https://developer.mozilla.org/en-US/docs/Web/API/Response).\n\n### ky.TimeoutError\n\nThe error thrown when the request times out.\n\n### ky.stop\n\nA `Symbol` that can be returned by a `beforeRetry` hook to stop the retry. This will also short circuit the remaining `beforeRetry` hooks.\n\n```js\nimport ky from \'ky\';\n\n(async () => {\n\tawait ky(\'https://example.com\', {\n\t\thooks: {\n\t\t\tbeforeRetry: [\n\t\t\t\tasync (request, options, errors, retryCount) => {\n\t\t\t\t\tconst shouldStopRetry = await ky(\'https://example.com/api\');\n\t\t\t\t\tif (shouldStopRetry) {\n\t\t\t\t\t\treturn ky.stop;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t});\n})();\n```\n\n\n## Tips\n\n### Sending Form Data\n\nSending form data in Ky is identical to `fetch`. Just pass a [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) instance to the `body` option. The `Content-Type` header will be automatically set to `multipart/form-data`.\n\n```js\nimport ky from \'ky\';\n\n(async () => {\n\t// `multipart/form-data`\n\tconst formData = new FormData();\n\tformData.append(\'food\', \'fries\');\n\tformData.append(\'drink\', \'icetea\');\n\n\tawait ky.post(url, {\n\t\tbody: formData\n\t});\n})();\n```\n\nIf you want to send the data in `application/x-www-form-urlencoded` format, you will need to encode the data with [`URLSearchParams`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams).\n\n```js\nimport ky from \'ky\';\n\n(async () => {\n\t// `application/x-www-form-urlencoded`\n\tconst searchParams = new URLSearchParams();\n\tsearchParams.set(\'food\', \'fries\');\n\tsearchParams.set(\'drink\', \'icetea\');\n\n\tawait ky.post(url, {\n\t\tbody: searchParams\n\t});\n})();\n```\n\n### Cancellation\n\nFetch (and hence Ky) has built-in support for request cancellation through the [`AbortController` API](https://developer.mozilla.org/en-US/docs/Web/API/AbortController). [Read more.](https://developers.google.com/web/updates/2017/09/abortable-fetch)\n\nExample:\n\n```js\nimport ky from \'ky\';\n\nconst controller = new AbortController();\nconst {signal} = controller;\n\nsetTimeout(() => {\n\tcontroller.abort();\n}, 5000);\n\n(async () => {\n\ttry {\n\t\tconsole.log(await ky(url, {signal}).text());\n\t} catch (error) {\n\t\tif (error.name === \'AbortError\') {\n\t\t\tconsole.log(\'Fetch aborted\');\n\t\t} else {\n\t\t\tconsole.error(\'Fetch error:\', error);\n\t\t}\n\t}\n})();\n```\n\n\n## FAQ\n\n#### How do I use this in Node.js?\n\nCheck out [`ky-universal`](https://github.com/sindresorhus/ky-universal#faq).\n\n#### How do I use this with a web app (React, Vue.js, etc.) that uses server-side rendering (SSR)?\n\nCheck out [`ky-universal`](https://github.com/sindresorhus/ky-universal#faq).\n\n#### How do I test a browser library that uses this?\n\nEither use a test runner that can run in the browser, like Mocha, or use [AVA](http://ava.li) with `ky-universal`. [Read more.](https://github.com/sindresorhus/ky-universal#faq)\n\n#### How do I use this without a bundler like Webpack?\n\nUpload the [`index.js`](index.js) file in this repo somewhere, for example, to your website server, or use a CDN version. Then import the file.\n\n```html\n<script type="module">\nimport ky from \'https://cdn.jsdelivr.net/npm/ky@latest/index.js\';\n\n(async () => {\n\tconst parsed = await ky(\'https://jsonplaceholder.typicode.com/todos/1\').json();\n\n\tconsole.log(parsed.title);\n\t//=> \'delectus aut autem\n})();\n</script>\n```\n\nAlternatively, you can use the [`umd.js`](umd.js) file with a traditional `<script>` tag (without `type="module"`), in which case `ky` will be a global.\n\n```html\n<script src="https://cdn.jsdelivr.net/npm/ky@latest/umd.js"></script>\n<script>\n(async () => {\n\tconst client = ky.default;\n\n\tconst parsed = await client(\'https://jsonplaceholder.typicode.com/todos/1\').json();\n\n\tconsole.log(parsed.title);\n\t//=> \'delectus aut autem\n})();\n</script>\n```\n\n#### How is it different from [`got`](https://github.com/sindresorhus/got)\n\nSee my answer [here](https://twitter.com/sindresorhus/status/1037406558945042432). Got is maintained by the same people as Ky.\n\n#### How is it different from [`axios`](https://github.com/axios/axios)?\n\nSee my answer [here](https://twitter.com/sindresorhus/status/1037763588826398720).\n\n#### How is it different from [`r2`](https://github.com/mikeal/r2)?\n\nSee my answer in [#10](https://github.com/sindresorhus/ky/issues/10).\n\n#### What does `ky` mean?\n\nIt\'s just a random short npm package name I managed to get. It does, however, have a meaning in Japanese:\n\n> A form of text-able slang, KY is an abbreviation for \xe7\xa9\xba\xe6\xb0\x97\xe8\xaa\xad\xe3\x82\x81\xe3\x81\xaa\xe3\x81\x84 (kuuki yomenai), which literally translates into \xe2\x80\x9ccannot read the air.\xe2\x80\x9d It\'s a phrase applied to someone who misses the implied meaning.\n\n\n## Browser support\n\nThe latest version of Chrome, Firefox, and Safari.\n\n\n## Node.js support\n\nKy requires Node.js 10 or later, but it indicates Node.js 8 in package.json so you can use it with Node.js 8 by polyfilling the globals without having Yarn fail on install. However, you should just use [`ky-universal`](https://github.com/sindresorhus/ky-universal).\n\n\n## Related\n\n- [ky-universal](https://github.com/sindresorhus/ky-universal) - Use Ky in both Node.js and browsers\n- [got](https://github.com/sindresorhus/got) - Simplified HTTP requests for Node.js\n\n\n## Maintainers\n\n- [Sindre Sorhus](https://github.com/sindresorhus)\n- [Szymon Marczak](https://github.com/szmarczak)\n- [Seth Holladay](https://github.com/sholladay)\n'