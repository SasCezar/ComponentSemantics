b'# jsonbox.io\nA HTTP based JSON storage. It lets you store, read & modify JSON data over HTTP APIs for FREE. Ideal for small projects, prototypes or hackathons, where you don\'t have to spin up your own data store.\n\n## API Documentation\n\nBase URL: `https://jsonbox.io/`\n\n### Create\nYou can create a record (or add a record) to a box by using HTTP post to `jsonbox.io/${BOX_ID}`.\n```sh\ncurl -X POST \'https://jsonbox.io/demobox_6d9e326c183fde7b\' \\\n    -H \'content-type: application/json\' \\\n    -d \'{"name": "Jon Snow", "age": 25}\'\n```\nResponse:\n```json\n{"_id":"5d776a25fd6d3d6cb1d45c51","name":"Jon Snow","age":25,"_createdOn":"2019-09-10T09:17:25.607Z"}\n```\n\nYou can also create multiple records at once by passing an array \n```sh\ncurl -X POST \'https://jsonbox.io/demobox_6d9e326c183fde7b\' \\\n    -H \'content-type: application/json\' \\\n    -d \'[{"name": "Daenerys Targaryen", "age": 25}, {"name": "Arya Stark", "age": 16}]\'\n```\n```json\n[\n  {"_id":"5d776b75fd6d3d6cb1d45c52","name":"Daenerys Targaryen","age":25,"_createdOn":"2019-09-10T09:23:01.105Z"},\n  {"_id":"5d776b75fd6d3d6cb1d45c53","name":"Arya Stark","age":16,"_createdOn":"2019-09-10T09:23:01.105Z"}\n]\n```\nYou can also pass in an optional collections parameter in the URL to group records `jsonbox.io/${BOX_ID}/${COLLECTION}`.\n\n_Note: A valid `${BOX_ID}` & `${COLLECTION}` should contain only alphanumeric characters & \\_. `${BOX_ID}` should be atleast 20 character long._\n\n### Read\nUse HTTP GET to read all the records or a single record. You can also query & sort the records. \n```sh\ncurl -X GET \'https://jsonbox.io/demobox_6d9e326c183fde7b\'\n```\n```json\n[\n  {"_id":"5d776b75fd6d3d6cb1d45c52","name":"Daenerys Targaryen","age":25,"_createdOn":"2019-09-10T09:23:01.105Z"},\n  {"_id":"5d776b75fd6d3d6cb1d45c53","name":"Arya Stark","age":16,"_createdOn":"2019-09-10T09:23:01.105Z"},\n  {"_id":"5d776a25fd6d3d6cb1d45c51","name":"Jon Snow","age":25,"_createdOn":"2019-09-10T09:17:25.607Z"}\n]\n```\n\nTo get all records inside a collection _Sample collection name: "users"_:\n```sh\ncurl -X GET \'https://jsonbox.io/demobox_6d9e326c183fde7b/users\'\n```\n\nTo sort the records by a specific field use `sort` query param. In the below example the output will be sorted in the descending order of the age.\n```sh\ncurl -X GET \'https://jsonbox.io/demobox_6d9e326c183fde7b?sort=-age\'\n```\n\nTo read a specific record use `jsonbox.io/${BOX_ID}/${RECORD_ID}`.\n```sh\ncurl -X GET \'https://jsonbox.io/demobox_6d9e326c183fde7b/5d776a25fd6d3d6cb1d45c51\'\n```\n\nTo query records, you have to pass the key & value as shown below.\n```sh\ncurl -X GET \'https://jsonbox.io/demobox_6d9e326c183fde7b?q=name:arya%20stark\'\n```\n\nAll the accepted query params are as follows.\n\n| Param       | Description                                                                                   | Default     |\n|-------------|-----------------------------------------------------------------------------------------------|-------------|\n| sort        | Used to sort the result set by the specific field. Add a prefix "-" to sort in reverse order. | -\\_createdOn |\n| skip        | Used to skip certain no. of fields. Can be used for pagination.                               | 0           |\n| limit       | Used to limit the results to a specific count. Can be used for pagination. Max. is 1000.      | 20          |\n| q           | Query for filtering values. Check out the format below.                                       |             |\n\n#### Filtering\nYou can pass a filter in a query by passing them in URL param `q` as shown below:\n```sh\ncurl -X GET \'https://jsonbox.io/demobox_6d9e326c183fde7b?q=name:arya%20stark,age:>13\'\n```\nThe above sample will look for the name `arya stark` and age greater than 13. You can filter on `Number`, `String` & `Boolean` values only.\n\nDifferent filters for Numeric values.\n\n|                                                                      | Sample                       |\n|----------------------------------------------------------------------|------------------------------|\n| To filter values greater than or less than a specific value          | `q=age:>10` or `q=age:<10`   |\n| To filter values greater (or less) than or equal to a specific value | `q=age:>=10` or `q=age:<=10` |\n| To filter values that match a specific value.                        | `q=age:=10`                  |\n\nDifferent filters for String values.\n\n|                                                                    | Sample              |\n|--------------------------------------------------------------------|---------------------|\n| Filter values that start with a specific string                    | `q=name:arya*`      |\n| Filter values that end with a specific string                      | `q=name:*stark`     |\n| Filter values where a specific string appears anywhere in a string | `q=name:*ya*`       |\n| Filter values that match a specific string                         | `q=name:arya%20stark` |\n\nYou can combine multiple fields by separating them with commas as shown below:\n```\nhttps://jsonbox.io/demobox_6d9e326c183fde7b?q=name:arya%20stark,age:>13,isalive:true\n```\n\n### Update\nUse HTTP PUT to update record one by one. Please note that this will not patch the record, it is full update. _A Bulk update is not supported yet._\n```sh\ncurl -X PUT \'https://jsonbox.io/demobox_6d9e326c183fde7b/5d776b75fd6d3d6cb1d45c53\' \\\n    -H \'content-type: application/json\' \\\n    -d \'{"name": "Arya Stark", "age": 18}\'\n```\n\n### Delete\nTwo approaches are available for delete\n* To delete a specific record use HTTP DELETE with jsonbox.io/${BOX_ID}/${RECORD_ID}\n```sh\ncurl -X DELETE \'https://jsonbox.io/demobox_6d9e326c183fde7b/5d776b75fd6d3d6cb1d45c53\'\n```\n* To delete based on a filter use HTTP DELETE with jsonbox.io/${BOX_ID}?q={QUERY}\n```sh\ncurl -X DELETE \'https://jsonbox.io/demobox_6d9e326c183fde7b?q=name:arya%20stark,age:>13\'\n```\n\n### Limitations\nAdded some limitations to avoid abuse.\n\n1. The request body cannot be more than 10KB.\n2. Can\'t push or pull more than 1000 records at a time.\n3. There is no limit on the number of records you store in a box, but please don\'t abuse the API by storing large datasets of more than **5000** records. This is meant for small projects and that\'s why it is offered FREE of cost.\n\n### Wrappers\n*Note: The wrappers listed here are from other sources and it is not been tested on validated by us*\n- **Go**: [peteretelej/jsonbox](https://godoc.org/github.com/peteretelej/jsonbox) ([Github](https://github.com/peteretelej/jsonbox))\n- **Java**: \n  1. [https://search.maven.org/artifact/io.jsonbox/jsonbox](https://search.maven.org/artifact/io.jsonbox/jsonbox) ([Github](https://github.com/leonardiwagner/jsonbox-java))\n  2. [https://github.com/leeu1911/jsonbox-java](https://github.com/leeu1911/jsonbox-java)\n- **Node**: [https://www.npmjs.com/package/jsonbox-node](https://www.npmjs.com/package/jsonbox-node) ([Github](https://github.com/0xflotus/jsonbox-node))\n- **Python**: [https://pypi.org/project/jsonbox/](https://pypi.org/project/jsonbox/) ([Github](https://github.com/harlev/jsonbox-python))\n- **React**: [https://www.npmjs.com/package/react-jsonbox](https://www.npmjs.com/package/react-jsonbox) ([Github](https://github.com/SaraVieira/react-jsonbox))\n- **Rust**: [https://crates.io/crates/jsonbox](https://crates.io/crates/jsonbox) ([Github](https://github.com/kuy/jsonbox-rs))\n\n### Running a local version with Docker\nsee [docker.md](docker/docker.md)\n\n### Contribution\nAny feedback, pull request or issue is welcome.\n\n### How to Contribute\nFork this repo and then clone it:\n```\ngit clone https://github.com/<your_name>/jsonbox.git\n```\n\nYou need MongoDB to run this application. If you don\'t already have MongoDB, go to the  [official documentation](https://docs.mongodb.com/manual/installation/) and follow the instructions there. Once you have MongoDB installed, run\n```\nmongo\n```\nto start the MongoDB instance. Then `cd` into directory where the repo was cloned and install the dependencies:\n```\nnpm install\n```\nThen just run \n```\nnpm start\n```\nto start the development server on port `3000`. Your jsonbox instance will be running on `http://localhost:3000`.\n\n\nAlternatively, you can also use a Docker to run the application in a container:\n```\ndocker run -d -p 27017:27017 -v ~/data:/data/db mongo\n```\n\n### LICENSE\nMIT\n'