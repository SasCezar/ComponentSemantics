b'# asar - Electron Archive\n\n[![CircleCI build status](https://circleci.com/gh/electron/asar/tree/master.svg?style=svg)](https://circleci.com/gh/electron/asar/tree/master)\n[![AppVeyor build status](https://ci.appveyor.com/api/projects/status/mrfwfr0uxlbwkuq3?svg=true)](https://ci.appveyor.com/project/electron-bot/asar)\n[![dependencies](http://img.shields.io/david/electron/asar.svg?style=flat-square)](https://david-dm.org/electron/asar)\n[![npm version](http://img.shields.io/npm/v/asar.svg?style=flat-square)](https://npmjs.org/package/asar)\n\nAsar is a simple extensive archive format, it works like `tar` that concatenates\nall files together without compression, while having random access support.\n\n## Features\n\n* Support random access\n* Use JSON to store files\' information\n* Very easy to write a parser\n\n## Command line utility\n\n### Install\n\n```bash\n$ npm install asar\n```\n\n### Usage\n\n```bash\n$ asar --help\n\n  Usage: asar [options] [command]\n\n  Commands:\n\n    pack|p <dir> <output>\n       create asar archive\n\n    list|l <archive>\n       list files of asar archive\n\n    extract-file|ef <archive> <filename>\n       extract one file from archive\n\n    extract|e <archive> <dest>\n       extract archive\n\n\n  Options:\n\n    -h, --help     output usage information\n    -V, --version  output the version number\n\n```\n\n#### Excluding multiple resources from being packed\n\nGiven:\n```\n    app\n(a) \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 x1\n(b) \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 x2\n(c) \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 y3\n(d) \xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 x1\n(e) \xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 z1\n(f) \xe2\x94\x82\xc2\xa0\xc2\xa0     \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 x2\n(g) \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 z4\n(h)     \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 w1\n```\n\nExclude: a, b\n```bash\n$ asar pack app app.asar --unpack-dir "{x1,x2}"\n```\n\nExclude: a, b, d, f\n```bash\n$ asar pack app app.asar --unpack-dir "**/{x1,x2}"\n```\n\nExclude: a, b, d, f, h\n```bash\n$ asar pack app app.asar --unpack-dir "{**/x1,**/x2,z4/w1}"\n```\n\n## Using programatically\n\n### Example\n\n```javascript\nconst asar = require(\'asar\');\n\nconst src = \'some/path/\';\nconst dest = \'name.asar\';\n\nawait asar.createPackage(src, dest);\nconsole.log(\'done.\');\n```\n\nPlease note that there is currently **no** error handling provided!\n\n### Transform\nYou can pass in a `transform` option, that is a function, which either returns\nnothing, or a `stream.Transform`. The latter will be used on files that will be\nin the `.asar` file to transform them (e.g. compress).\n\n```javascript\nconst asar = require(\'asar\');\n\nconst src = \'some/path/\';\nconst dest = \'name.asar\';\n\nfunction transform (filename) {\n  return new CustomTransformStream()\n}\n\nawait asar.createPackageWithOptions(src, dest, { transform: transform });\nconsole.log(\'done.\');\n```\n\n## Using with grunt\n\nThere is also an unofficial grunt plugin to generate asar archives at [bwin/grunt-asar][grunt-asar].\n\n## Format\n\nAsar uses [Pickle][pickle] to safely serialize binary value to file, there is\nalso a [node.js binding][node-pickle] of `Pickle` class.\n\nThe format of asar is very flat:\n\n```\n| UInt32: header_size | String: header | Bytes: file1 | ... | Bytes: file42 |\n```\n\nThe `header_size` and `header` are serialized with [Pickle][pickle] class, and\n`header_size`\'s [Pickle][pickle] object is 8 bytes.\n\nThe `header` is a JSON string, and the `header_size` is the size of `header`\'s\n`Pickle` object.\n\nStructure of `header` is something like this:\n\n```json\n{\n   "files": {\n      "tmp": {\n         "files": {}\n      },\n      "usr" : {\n         "files": {\n           "bin": {\n             "files": {\n               "ls": {\n                 "offset": "0",\n                 "size": 100,\n                 "executable": true\n               },\n               "cd": {\n                 "offset": "100",\n                 "size": 100,\n                 "executable": true\n               }\n             }\n           }\n         }\n      },\n      "etc": {\n         "files": {\n           "hosts": {\n             "offset": "200",\n             "size": 32\n           }\n         }\n      }\n   }\n}\n```\n\n`offset` and `size` records the information to read the file from archive, the\n`offset` starts from 0 so you have to manually add the size of `header_size` and\n`header` to the `offset` to get the real offset of the file.\n\n`offset` is a UINT64 number represented in string, because there is no way to\nprecisely represent UINT64 in JavaScript `Number`. `size` is a JavaScript\n`Number` that is no larger than `Number.MAX_SAFE_INTEGER`, which has a value of\n`9007199254740991` and is about 8PB in size. We didn\'t store `size` in UINT64\nbecause file size in Node.js is represented as `Number` and it is not safe to\nconvert `Number` to UINT64.\n\n[pickle]: https://chromium.googlesource.com/chromium/src/+/master/base/pickle.h\n[node-pickle]: https://www.npmjs.org/package/chromium-pickle\n[grunt-asar]: https://github.com/bwin/grunt-asar\n'