b'<img src="./assets/logo-color.png" alt="Navalia Logo" style="text-align: center;" width="300" >\n\n[![npm version](https://badge.fury.io/js/navalia.svg)](https://badge.fury.io/js/navalia)\n[![Build Status](https://travis-ci.org/joelgriffith/navalia.svg?branch=master)](https://travis-ci.org/joelgriffith/navalia)\n[![dependencies Status](https://david-dm.org/joelgriffith/navalia/status.svg)](https://david-dm.org/joelgriffith/navalia)\n[![styled with prettier](https://img.shields.io/badge/styled_with-prettier-ff69b4.svg)](https://github.com/prettier/prettier)\n\n# DEPRECATION WARNING: Unfortunately it\'s time for me to deprecate this library as I cannot give it the time it needs. If you\'re interested in maintaining this lib, send me message (joel at joelgriffith dot net). I\'d recommend using something like chromeless or puppeteer if possible. Thanks!\n\nThe bullet-proof, fast, and most feature-rich Chrome driver around. Navalia lets you interact with Chrome and run parallel work with ease. Not using JavaScript? There\'s a GraphQL server that you can use to communicate with over HTTP allowing any runtime to drive Chrome.\n\n- [\xf0\x9f\x93\x9d View the library documentation here](https://joelgriffith.github.io/navalia/)\n- [\xf0\x9f\x8e\xa8 Looking for test inspiration? Navalia uses itself for tests.](./integration/api.test.ts)\n\n## Features\n\n- Scrape webpage data, even from JavaScript-heavy sites.\n- Run automated functional tests.\n- Discover visual regressions in your site.\n- Capture screenshots, pdfs, execute javascript, insert text, and more.\n- The largest API for interacting with Chrome.\n\n## GraphQL Front-end\n\nSimply run `navalia` with a specified port e.g.\n\n```bash\n$ npm i -g navalia\n$ navalia --port 4000\n```\n\n![NavaliaQL](./assets/NavaliaQL.gif)\n\n## Recipes\n\n- [Functional Testing](https://codeburst.io/composable-end-to-end-tests-for-react-apps-2ec82170af62)\n- [Website Code Coverage](https://codeburst.io/capturing-unused-application-code-2b7594a9fe06)\n- [Visual Regression Testing](https://codeburst.io/automatic-visual-regression-testing-23cc06471dd)\n\n## Usage\n\nThe API for interacting with a browser is simple and chainable. You can call all methods individually and `await`/`then` the resulting value, or chain multiple together and collect their responses in a single result.\n\n*Chaining*\n\n```js\nconst { Chrome } = require(\'navalia\');\nconst chrome = new Chrome();\n\nchrome\n  .goto(\'https://amazon.com\')\n  .type(\'input\', \'Kindle\')\n  .click(\'.buy-now\')\n  .end()\n  .then((responses) => {\n    console.log(responses); // [\'https://www.amazon.com/\', true, true, true]\n  });\n```\n\n*Await*\n\n```js\nimport { Chrome } from \'navalia\';\nconst chrome = new Chrome();\n\nasync function buyItOnAmazon() {\n  const url = await chrome.goto(\'https://amazon.com\');\n  const typed = await chrome.type(\'input\', \'Kindle\');\n  const clicked = await chrome.click(\'.buy-now\');\n\n  chrome.done();\n\n  console.log(url, typed, clicked); // \'https://www.amazon.com/\', true, true\n}\n\nbuyItOnAmazon();\n```\n\n## Roadmap\n\nIn no particular order, this is the vision of navalia going forward:\n\n- [X] Expanded browser API (pdf rendering, network watching, more).\n- [ ] Bring more vendors onto the framework.\n- [ ] Better typings around externals with no @type support.\n- [X] Parameterization on killing long-running jobs.\n- [ ] Unit testing all features.\n- [ ] Integration testing with the various vendors so our API\'s don\'t break when theirs do.\n- [X] Travis, coveralls, greenkeeper, and other handy-dandy tools to automate chore tasks.\n'