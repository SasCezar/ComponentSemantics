b'# About chromedp [![GoDoc][1]][2]\n\nPackage chromedp is a faster, simpler way to drive browsers supporting the\n[Chrome DevTools Protocol][3] in Go without external dependencies (like\nSelenium or PhantomJS).\n\n## Installing\n\nInstall in the usual Go way:\n\n\tgo get -u github.com/chromedp/chromedp\n\n## Examples\n\nRefer to the [GoDoc page][5] for the documentation and examples. Additionally,\nthe [examples][4] repository contains more complex examples.\n\n## Frequently Asked Questions\n\n> I can\'t see any Chrome browser window\n\nBy default, Chrome is run in headless mode. See `DefaultExecAllocatorOptions`, and\n[an example](https://godoc.org/github.com/chromedp/chromedp#example-ExecAllocator)\nto override the default options.\n\n> I\'m seeing "context canceled" errors\n\nWhen the connection to the browser is lost, `chromedp` cancels the context, and\nit may result in this error. This occurs, for example, if the browser is closed\nmanually, or if the browser process has been killed or otherwise terminated.\n\n> Chrome exits as soon as my Go program finishes\n\nOn Linux, `chromedp` is configured to avoid leaking resources by force-killing\nany started Chrome child processes. If you need to launch a long-running Chrome\ninstance, manually start Chrome and connect using `RemoteAllocator`.\n\n> Executing an action without `Run` results in "invalid context"\n\nBy default, a `chromedp` context does not have an executor, however one can be\nspecified manually if necessary; see [issue #326](https://github.com/chromedp/chromedp/issues/326)\nfor an example.\n\n> I can\'t use an `Action` with `Run` because it returns many values\n\nWrap it with an `ActionFunc`:\n\n```go\nchromedp.Run(ctx, chromedp.ActionFunc(func(ctx context.Context) error {\n\t_, err := domain.SomeAction().Do(ctx)\n\treturn err\n}))\n```\n\n> I want to use chromedp on a headless environment\n\nThe simplest way is to run the Go program that uses chromedp inside the\n[chromedp/headless-shell][6] image. That image contains `headless-shell`, a\nsmaller headless build of Chrome, which `chromedp` is able to find out of the\nbox.\n\n## Resources\n\n* [chromedp: A New Way to Drive the Web][7] - GopherCon SG 2017 talk\n* [Chrome DevTools Protocol][3] - Chrome DevTools Protocol Domain documentation\n* [chromedp examples][4] - various `chromedp` examples\n* [`github.com/chromedp/cdproto`][8] - GoDoc listing for the CDP domains used by `chromedp`\n* [`github.com/chromedp/cdproto-gen`][9] - tool used to generate `cdproto`\n* [`github.com/chromedp/chromedp-proxy`][10] - a simple CDP proxy for logging CDP clients and browsers\n\n[1]: https://godoc.org/github.com/chromedp/chromedp?status.svg\n[2]: https://godoc.org/github.com/chromedp/chromedp\n[3]: https://chromedevtools.github.io/devtools-protocol/\n[4]: https://github.com/chromedp/examples\n[5]: https://godoc.org/github.com/chromedp/chromedp\n[6]: https://hub.docker.com/r/chromedp/headless-shell/\n[7]: https://www.youtube.com/watch?v=_7pWCg94sKw\n[8]: https://godoc.org/github.com/chromedp/cdproto\n[9]: https://github.com/chromedp/cdproto-gen\n[10]: https://github.com/chromedp/chromedp-proxy\n'