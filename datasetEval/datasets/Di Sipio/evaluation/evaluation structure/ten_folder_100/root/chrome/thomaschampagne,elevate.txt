b"[![Build Status](https://travis-ci.org/thomaschampagne/elevate.svg?branch=develop)](https://travis-ci.org/thomaschampagne/elevate)\n[![Artifacts Downloads](https://img.shields.io/badge/artifacts-download-00a8fb.svg)](https://thomaschampagne.github.io/elevate/#/builds)\n[![Language grade: JavaScript](https://img.shields.io/lgtm/grade/javascript/g/thomaschampagne/elevate.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/thomaschampagne/elevate/context:javascript)\n[![Total alerts](https://img.shields.io/lgtm/alerts/g/thomaschampagne/elevate.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/thomaschampagne/elevate/alerts/)\n[![Chrome Web Store](https://img.shields.io/chrome-web-store/v/dhiaggccakkgdfcadnklkbljcgicpckn.svg)](https://chrome.google.com/webstore/detail/elevate-for-strava/dhiaggccakkgdfcadnklkbljcgicpckn) \n[![Chrome Web Store](https://img.shields.io/chrome-web-store/users/dhiaggccakkgdfcadnklkbljcgicpckn.svg)](https://chrome.google.com/webstore/detail/elevate-for-strava/dhiaggccakkgdfcadnklkbljcgicpckn)\n[![Chrome Web Store](https://img.shields.io/chrome-web-store/stars/dhiaggccakkgdfcadnklkbljcgicpckn.svg)](https://chrome.google.com/webstore/detail/elevate-for-strava/dhiaggccakkgdfcadnklkbljcgicpckn/reviews) [![Chrome Web Store](https://img.shields.io/chrome-web-store/rating-count/dhiaggccakkgdfcadnklkbljcgicpckn.svg)](https://chrome.google.com/webstore/detail/elevate-for-strava/dhiaggccakkgdfcadnklkbljcgicpckn/reviews)\n\n# Install Elevate\n\n## From a Chrome based browser\n\nGo to [https://thomaschampagne.github.io/elevate/](https://thomaschampagne.github.io/elevate/)\n\nYou should be able to install it in all Chrome based browser such as Chrome, Chrome Canary, Chromium, Opera, Vivaldi, Yandex, and more ...\n\n## From continuous integration\nUsing latest **develop** branch builds: https://thomaschampagne.github.io/elevate/#/builds\n\nInstall steps with a standalone build: https://github.com/thomaschampagne/elevate/wiki/How-to-install-elevate-build-archive\n\n## From the sources\n\nGo to chapter [Environment setup](#environment-setup).\n\n# Development\n\n## Project structure description\n\nThe project is split into 2 sub-projects: the _core_ and the _embedded app_.\n\n### Core\n\nThe core contains the plugin's behaviour that acts directly on _strava.com_ website. This includes _extended stats on activities & segments efforts, best splits, google maps support, etc..._\n\n> The core sources are located in **plugin/core** directory\n\n### Embedded app\n\nThe embedded app contains features like fitness trend, year progressions, ... and global plugin settings such as _common settings, athlete settings & zones settings._\n\n> The embedded app sources are located in **plugin/app** directory\n\n**Notice**: The **plugin/common** directory contains sources shared by both sub-projects.\n\n## Description of frameworks & tools used.\n\n_Core_ and _embedded app_ have been developed using [TypeScript](https://www.typescriptlang.org) language. TypeScript adds typing & class-based syntax over javascript then compiles back to JavaScript. [Understand TypeScript in 5 minutes](https://learnxinyminutes.com/docs/typescript/).\n\n### At a glance...\n\n### Core dependencies\n* [Webpack](https://github.com/webpack/webpack) as packager and dynamic EcmaScript module loader.\n* [Q](http://documentup.com/kriskowal/q/) as promise library for JavaScript.\n* [Chart.js](http://www.chartjs.org/) for JavaScript charting.\n\n\n### Embedded app dependencies\n* [Angular](https://angular.io/) as frontend framework\n* [Angular Material](https://material.angular.io/) for material designed components.\n* [Metrics Graphics](https://www.metricsgraphicsjs.org/) and [d3js](https://d3js.org/) for charting.\n\n### Shared dependencies\n* [Lodash](https://lodash.com) to get a whole mess of useful functional programming helpers in typescript/javascript.\n* [MomentJS](https://momentjs.com/) to parse, validate, manipulate, and display dates and times.\n\n### Tools\n\n* [NodeJS](https://nodejs.org/en/) as javascript runtime environment.\n* [Npm](https://www.npmjs.com/) as package manager to fetch project dependencies\n\n## Environment setup\n\n### Install requirements\n\nHere's what you need to install to run the extension in a chrome based browser:\n\n- Chrome based browser (Chrome, Chromium, Chrome Canary, Opera,...), of course...\n- NodeJS [here](https://nodejs.org). Version 10.x is required.\n\nThat's all :)\n\n### Clone the project\n\nUsing HTTPS\n```bash\ngit clone https://github.com/thomaschampagne/elevate.git\n```\n\nOr using SSH\n\n```bash\ngit clone git@github.com:thomaschampagne/elevate.git\n```\n\n### Fetch NPM dependencies\n\nThe `npm` command should be installed on your system through the NodeJS installation. \n\nEnter in project directory\n```bash\ncd elevate\n```\n\nThen install NPM dependencies with\n```bash\nnpm install\n```\n\n### Build plugin\n\nOnce you have installed the NPM dependencies, you can build the plugin with the following command:\n\n```bash\nnpm run build\n```\n\nBoth _core_ and _embedded app_ will be built.\n\nOnce the build is completed, the plugin will be located in **dist/** directory.\n\nA production build can be also run with\n\n```bash\nnpm run build:prod\n```\n\nThis will disable TypeScript debug sources map and enable [Ahead-of-Time](https://angular.io/guide/aot-compiler) compilation for _embedded app_.\n\n### Load plugin into your browser\n\nInto your chrome based browser:\n\n* Open new tab and type **chrome://extensions**, then enter.\n* Tick **Developer Mode** checkbox.\n* Click **Load Unpacked Extension** button, then choose **dist/** directory (this is where you have the **manifest.json** file)\n* Make sure to disable other instances of elevate. You can re-enable them back from same tab.\n* Open strava.com\n\n### Build plugin on files changes\n\nIn order to avoid to re-run the painful `npm run build` task on each file changes. You could run the following command:\n\n```bash\nnpm start\n```\n\nThis task will watch for files changes and automatically rebuild plugin to **dist/** directory. It's a way more suitable and faster for a development workflow.\n\n### Run unit tests\n\nThe below command will run _core_ and _embedded app_ unit tests into a headless chrome.\n\n```bash\nnpm test\n```\n\nShould be **run** and has to **pass** before any work submission.\n\n### Packaging\n\nYou can package the extension with the following command\n\n```bash\nnpm run package\n```\n\nA production build will be executed for this task.\n\nOn packaging done, a release archive will be generated in **package/** directory.\n\n### Package with Docker\n\nCreate docker image from `Dockerfile`\n\n```bash\ndocker build . -t elevate-chrome-builder\n```\n\nRun a docker production build through a container. Replace `/path/to/your/directory/` with a folder on your host to fetch the packaged build when done.\n\n```bash\ndocker run --rm --name elevate-chrome-build -v /path/to/your/directory/:/package elevate-chrome-builder\n```\n\n### Clean project\n\nSimply run\n\n```\nnpm run clean\n```\n\nThis will clean **dist/**, **package/** & __*.js *.map__ generated files\n\n# Git-Flow Repository structure\n\nThe project repository is fitted for **GitFlow** branches management workflow.\n\nLearn more @  http://nvie.com/posts/a-successful-git-branching-model/\n"