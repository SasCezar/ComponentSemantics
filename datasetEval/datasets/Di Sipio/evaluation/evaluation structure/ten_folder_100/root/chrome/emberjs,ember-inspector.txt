b'# Ember Inspector [![Build Status](https://github.com/emberjs/ember-inspector/workflows/Build%20and%20Publish/badge.svg?branch=master)](https://github.com/emberjs/ember-inspector/actions?query=branch%3Amaster+workflow%3A%22Build+and+Publish%22)\n\nAdds an Ember tab to the browser\'s Developer Tools that allows you to inspect\nEmber objects in your application.\n\n## Installation\n\n### Chrome\n\nInstall the extension from the [Chrome Web Store](https://chrome.google.com/webstore/detail/ember-inspector/bmdblncegkenkacieihfhpjfppoconhi).\n\nOR:\n\n- Clone the repository\n- cd into the repo directory\n- run `yarn install`\n- run `yarn global add ember-cli`\n- run `yarn build` to build the `dist` directory\n- Visit `chrome://extensions` in Chrome\n- Make sure `Developer mode` is checked\n- Click on \'Load unpacked extension...\'\n- Choose the `dist/chrome` folder in the cloned repo\n- Close and re-open developer tools if it\'s already open\n\n### Firefox\n\nInstall the [Firefox addon](https://addons.mozilla.org/en-US/firefox/addon/ember-inspector/).\n\nOR:\n\n- Clone the repository\n- cd into the repo directory\n- run `yarn install`\n- run `yarn global add ember-cli`\n- run `yarn build` to build the `dist` directory\n- Visit `about:debugging` in Firefox\n- Click on \'Load Temporary Addon-on\'\n- Choose the `dist/firefox/manifest.json` file in the cloned repo\n\n### Opera\n\n- Clone the repository\n- cd into the repo directory\n- run `yarn install`\n- run `yarn global add ember-cli`\n- run `yarn build` to build the `dist` directory\n- Visit `chrome://extensions` in Opera\n- Make sure `Developer mode` is checked\n- Click on \'Load unpacked extension...\'\n- Choose the `dist/chrome` folder in the cloned repo\n- Close and re-open developer tools if it\'s already open\n\n### Bookmarklet (All Browsers)\n\n```javascript\njavascript: (function() { var s = document.createElement(\'script\'); s.src = \'//ember-extension.s3.amazonaws.com/dist_bookmarklet/load_inspector.js\'; document.body.appendChild(s); }());\n```\n\nInternet explorer will open an iframe instead of a popup due to the lack of support for cross-origin messaging.\n\nFor development:\n\n- run `yarn serve:bookmarklet`\n- create a bookmark (make sure you unblock the popup when you run the bookmarklet):\n\n```javascript\njavascript: (function() { var s = document.createElement(\'script\'); s.src = \'http://localhost:9191/bookmarklet/load_inspector.js\'; document.body.appendChild(s); }());\n```\n\n## Building and Testing:\n\nRun `yarn install && yarn global add ember-cli to install the required modules.\n\n- `yarn build` to build the files in the `dist` directory\n- `yarn watch` To watch the files and re-build in `dist` when anything changes (useful during development).\n- `yarn test` To run the tests in the terminal\n- `yarn start` To start the test server at `localhost:4200/testing/tests`\n\n\n## Deploy new version:\n\n#### Patch versions\n\nPatch versions are only committed to the stable branch. So we need to cherry-pick the commits we need from master and bump stable to the new patch version.\n\n- `git checkout stable`\n- Cherry-pick the needed commits from master to stable.\n- Add the change log entry and commit. We use [github-changelog-generator](https://github.com/github-changelog-generator/github-changelog-generator) for this.\n  You will want to follow the installation instructions on their README, and take note that you will need to provide a GitHub token.\n  Once installed, and you add a token, you can run `yarn changelog` in your terminal.\n- `yarn version --patch`\n- `git push --tags`\n- `git push`\n- PR the change log entry to the master branch.\n\n#### Minor and major versions\n\nWhen releasing a major/minor version, master would already have this version set, so what we need to do is to merge master into stable and release.\n\n- `git checkout stable`\n- `git merge -X theirs master`\n- Add the change log entry and commit. We use [github-changelog-generator](https://github.com/github-changelog-generator/github-changelog-generator) for this.\n  You will want to follow the installation instructions on their README, and take note that you will need to provide a GitHub token.\n  Once installed, and you add a token, you can run `yarn changelog` in your terminal.\n- `yarn version` (keep the same version number)\n- `git push --tags`\n- `git push`\n- PR the change log entry to the master branch, as well as increment `package.json` to the next major/minor version.\n\n### Locking a version\n\nWe can take a snapshot of the current inspector version to support a specific Ember version range. This allows us to stop supporting old Ember versions in master without breaking the published inspector for old Ember apps. It works by serving a different inspector version based on the current app\'s Ember version.\n\nThe Ember versions supported by the current inspector are indicated in the `emberVersionsSupported` array in `package.json`.\n\nHere are the steps to lock an inspector version:\n\n- Release a new version (See "Minor and major versions") if there are unreleased commits in `master`. Skip this step if there are not new commits after the last release.\n- Makes sure you have a `config/secrets.json` file with the correct AWS credentials to push to S3. You can use `config/secrets.json.sample` as a starting point.\n- Create a new branch (from `stable`) named after the Ember version range that will be supported by this branch. The min version in the range is the first element in the `emberVersionsSupported` array in `package.json`. The max version in the range is the first version that will *not* be supported. For example, a branch named `ember-0.0.0-2.7.0` means it supports Ember 0.0.0 -> 2.6.0, and a branch named `ember-2.7.0-3.4.0` means it supports Ember 2.7.0 -> Ember 3.3.2.\n- Update `package.json`\'s `emberVersionsSupported`: add a second element that indicates the minimum Ember version the `master` branch *will not* support.\n- Commit the branch.\n- Run `yarn lock-version`. This will build, compress, and upload this version to S3.\n- Checkout the `master` branch.\n- Update `package.json`\'s `previousEmberVersionsSupported`: add the first Ember version supported by the recently locked snapshot (the first element in the `emberVersionsSupported` array).\n- Update `package.json`\'s `emberVersionsSupported`: Take the last element from `previousEmberVersionsSupported` and set it as the first element in this array. Set an empty string as the second element to indicate there\'s currently no maximum Ember version supported yet. `emberVersionsSupported` array length should always be `2` indicating a [min, max] range.\n- Commit.\n\n##### Example scenario\n\nBelow is an example scenario that assumes the current `master` branch supports Ember version 2.7.0+ and we want to lock the version such that `master` will support 3.4.0+. It also assumes the last Ember Inspector version released was 3.9.0.\n\n- Release a new inspector version `3.10.0` if there are unreleased commits in `master`.\n- Create a new branch from `stable` called `ember-2.7.0-3.4.0`.\n- Update `package.json`\'s `emberVersionsSupported` from `["2.7.0", ""]` to `["2.7.0", "3.4.0"]`.\n- Commit with message "Lock Ember version at 2.7.0-3.4.0" and push the branch.\n- Run `yarn lock-version`.\n- Checkout the `master` branch.\n- Create a new branch *from master* called `lock-3.4.0` (branch name here is not important).\n- Update `package.json`\'s `previousEmberVersionsSupported` from `["0.0.0"]` to `["0.0.0", "2.7.0"]`.\n- Update `package.json`\'s `emberVersionsSupported` from `["2.7.0", ""]` to `["3.4.0", ""]`.\n- Commit and open a PR against `master`.\n\n### Window Messages\n\nThe Ember Inspector uses window messages, so if you are using window messages in your application code, make sure you [verify the sender](https://developer.mozilla.org/en-US/docs/Web/API/window.postMessage#Security_concerns) and add checks to your event listener so as not to conflict with the inspector\'s messages.\n'