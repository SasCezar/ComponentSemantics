b'<h1 align="center">\n  <img src="https://raw.githubusercontent.com/smooth-code/jest-puppeteer/master/resources/jest-puppeteer-logo.png" alt="jest-puppeteer" title="jest-puppeteer" width="300">\n</h1>\n<p align="center" style="font-size: 1.2rem;">Run your tests using Jest & Puppeteer \xf0\x9f\x8e\xaa\xe2\x9c\xa8</p>\n\n[![License](https://img.shields.io/npm/l/jest-puppeteer.svg)](https://github.com/smooth-code/jest-puppeteer/blob/master/LICENSE)\n[![Donate](https://opencollective.com/jest-puppeteer/backers/badge.svg)](https://opencollective.com/jest-puppeteer/donate)\n[![npm package](https://img.shields.io/npm/v/jest-puppeteer/latest.svg)](https://www.npmjs.com/package/jest-puppeteer)\n[![npm downloads](https://img.shields.io/npm/dm/jest-puppeteer.svg)](https://www.npmjs.com/package/jest-puppeteer)\n[![Build Status](https://img.shields.io/travis/smooth-code/jest-puppeteer.svg)](https://travis-ci.org/smooth-code/jest-puppeteer)\n![Code style](https://img.shields.io/badge/code_style-prettier-ff69b4.svg)\n[![Dependencies](https://img.shields.io/david/smooth-code/jest-puppeteer.svg?path=packages%2Fjest-puppeteer)](https://david-dm.org/smooth-code/jest-puppeteer?path=packages/jest-puppeteer)\n[![DevDependencies](https://img.shields.io/david/dev/smooth-code/jest-puppeteer.svg)](https://david-dm.org/smooth-code/jest-puppeteer?type=dev)\n\n```bash\n# for jest 22~23\nnpm install --save-dev jest-puppeteer@3.9.0 puppeteer jest\n# for jest 24+\nnpm install --save-dev jest-puppeteer puppeteer jest\n```\n\n> Requires Jest v22+\n> TypeScript users should additionally install `@types/puppeteer`, `@types/jest-environment-puppeteer` and `@types/expect-puppeteer`\n\n## Supporting jest-puppeteer\n\njest-puppeteer is an MIT-licensed open source project. It\'s an independent project with ongoing development made possible thanks to the support of these awesome [backers](/BACKERS.md). If you\'d like to join them, please consider:\n\n- [Become a backer or sponsor on OpenCollective](https://opencollective.com/jest-puppeteer).\n\n### Gold Sponsors\n\nGold Sponsors are those who have pledged \\$100/month and more to jest-puppeteer.\n\n[![gold-sponsors](https://opencollective.com/jest-puppeteer/tiers/gold-sponsors.svg?avatarHeight=120&width=600)](https://opencollective.com/jest-puppeteer/order/6045)\n\n## Usage\n\nUpdate your Jest configuration:\n\n```json\n{\n  "preset": "jest-puppeteer"\n}\n```\n\n**NOTE**: Be sure to remove any existing `testEnvironment` option from your Jest configuration. The `jest-puppeteer` preset needs to manage that option itself.\n\nUse Puppeteer in your tests:\n\n```js\ndescribe(\'Google\', () => {\n  beforeAll(async () => {\n    await page.goto(\'https://google.com\')\n  })\n\n  it(\'should display "google" text on page\', async () => {\n    await expect(page).toMatch(\'google\')\n  })\n})\n```\n\n### Running puppeteer in CI environments\n\nMost continuous integration platforms limit the number of threads one can use. If you have more than one test suite running puppeteer chances are that your test will timeout. This is because jest will try to run puppeteer in parallel and the CI platform won\'t be able to handle all the parallel jobs in time. A fix to this is to run your test serially when in a CI environment. Users have discovered that [running test serially in such environments can render up to 50%](https://jestjs.io/docs/en/troubleshooting#tests-are-extremely-slow-on-docker-and-or-continuous-integration-ci-server) of performance gains.\n\nThis can be achieved through the CLI by running:\n\n```sh\njest --runInBand\n```\n\nAlternatively, you can set jest to use as a max number of workers the amount that your CI environment supports:\n\n```\njest --maxWorkers=2\n```\n\n## Recipes\n\n### Writing tests using Puppeteer\n\nWriting integration test can be done using [Puppeteer API](<(https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md)>) but it can be complicated and hard because API is not designed for testing.\n\nTo make it simpler, [expect-puppeteer API](https://github.com/smooth-code/jest-puppeteer/tree/master/packages/expect-puppeteer/README.md#api) add some specific matchers if you make expectation on a [Puppeteer Page](https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md#class-page).\n\nSome examples:\n\n#### Find a text in the page\n\n```js\n// Assert that current page contains \'Text in the page\'\nawait expect(page).toMatch(\'Text in the page\')\n```\n\n#### Click a button\n\n```js\n// Assert that a button containing text "Home" will be clicked\nawait expect(page).toClick(\'button\', { text: \'Home\' })\n```\n\n#### Fill a form\n\n```js\n// Assert that a form will be filled\nawait expect(page).toFillForm(\'form[name="myForm"]\', {\n  firstName: \'James\',\n  lastName: \'Bond\',\n})\n```\n\n### Put in debug mode\n\nDebugging tests can be hard sometimes and it is very useful to be able to pause tests in order to inspect the browser. Jest Puppeteer exposes a method `jestPuppeteer.debug()` that suspends test execution and gives you opportunity to see what\'s going on in the browser.\n\n```js\nawait jestPuppeteer.debug()\n```\n\n### Start a server\n\nJest Puppeteer integrates a functionality to start a server when running your test suite. It automatically closes the server when tests are done.\n\nTo use it, specify a server section in your `jest-puppeteer.config.js`.\n\n```js\n// jest-puppeteer.config.js\nmodule.exports = {\n  server: {\n    command: \'node server.js\',\n    port: 4444,\n  },\n}\n```\n\nOther options are documented in [jest-dev-server](https://github.com/smooth-code/jest-puppeteer/tree/master/packages/jest-dev-server).\n\n### Configure Puppeteer\n\nJest Puppeteer automatically detects the best config to start Puppeteer but sometimes you may need to specify custom options. All Puppeteer [launch](https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md#puppeteerlaunchoptions) or [connect](https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md#puppeteerconnectoptions) options can be specified in `jest-puppeteer.config.js` at the root of the project. Since it is JavaScript, you can use all the stuff you need, including environment.\n\nThe browser context can be also specified. By default, the browser context is shared. `incognito` is available if you want more isolation between running instances. More information available in [jest-puppeteer-environment readme](https://github.com/smooth-code/jest-puppeteer/blob/master/packages/jest-environment-puppeteer/README.md)\n\n```js\n// jest-puppeteer.config.js\nmodule.exports = {\n  launch: {\n    dumpio: true,\n    headless: process.env.HEADLESS !== \'false\',\n  },\n  browserContext: \'default\',\n}\n```\n\n### Configure ESLint\n\nJest Puppeteer exposes three new globals: `browser`, `page`, `context`. If you want to avoid errors, you can add them to your `.eslintrc.js`:\n\n```js\n// .eslintrc.js\nmodule.exports = {\n  env: {\n    jest: true,\n  },\n  globals: {\n    page: true,\n    browser: true,\n    context: true,\n    jestPuppeteer: true,\n  },\n}\n```\n\n### Custom `setupTestFrameworkScriptFile` or `setupFilesAfterEnv`\n\nIf you use custom setup files, you\'ll need to include `expect-puppeteer` yourself in order to use the matchers it provides. Add the following to your setup file.\n\n```js\n// setup.js\nrequire(\'expect-puppeteer\')\n\n// Your custom setup\n// ...\n```\n\n```js\n// jest.config.js\nmodule.exports = {\n  // ...\n  setupTestFrameworkScriptFile: \'./setup.js\',\n  // or\n  setupFilesAfterEnv: [\'./setup.js\'],\n}\n```\n\n### Extend `PuppeteerEnvironment`\n\nSometimes you want to use your own environment, to do that you can extend `PuppeteerEnvironment`.\n\nFirst, create your own js file for custom environment.\n\n```js\n// custom-environment.js\nconst PuppeteerEnvironment = require(\'jest-environment-puppeteer\')\n\nclass CustomEnvironment extends PuppeteerEnvironment {\n  async setup() {\n    await super.setup()\n    // Your setup\n  }\n\n  async teardown() {\n    // Your teardown\n    await super.teardown()\n  }\n}\n\nmodule.exports = CustomEnvironment\n```\n\nThen, assigning your js file path to the [`testEnvironment`](https://facebook.github.io/jest/docs/en/configuration.html#testenvironment-string) property in your Jest configuration.\n\n```js\n{\n  // ...\n  "testEnvironment": "./custom-environment.js"\n}\n```\n\nNow your custom `setup` and `teardown` will be triggered before and after each test suites.\n\n### Create your own `globalSetup` and `globalTeardown`\n\nIt is possible to create your own [`globalSetup`](https://facebook.github.io/jest/docs/en/configuration.html#globalsetup-string) and [`globalTeardown`](https://facebook.github.io/jest/docs/en/configuration.html#globalteardown-string).\n\nFor this use case, `jest-environment-puppeteer` exposes two methods: `setup` and `teardown`, so that you can wrap them with your own global setup and global teardown methods as the following example:\n\n```js\n// global-setup.js\nconst { setup: setupPuppeteer } = require(\'jest-environment-puppeteer\')\n\nmodule.exports = async function globalSetup(globalConfig) {\n  await setupPuppeteer(globalConfig)\n  // Your global setup\n}\n```\n\n```js\n// global-teardown.js\nconst { teardown: teardownPuppeteer } = require(\'jest-environment-puppeteer\')\n\nmodule.exports = async function globalTeardown(globalConfig) {\n  // Your global teardown\n  await teardownPuppeteer(globalConfig)\n}\n```\n\nThen assigning your js file paths to the [`globalSetup`](https://facebook.github.io/jest/docs/en/configuration.html#globalsetup-string) and [`globalTeardown`](https://facebook.github.io/jest/docs/en/configuration.html#globalteardown-string) property in your Jest configuration.\n\n```js\n{\n  // ...\n  "globalSetup": "./global-setup.js",\n  "globalTeardown": "./global-teardown.js"\n}\n```\n\nNow your custom `globalSetup` and `globalTeardown` will be triggered once before and after all test suites.\n\n### Create React App\n\nYou can find an [example of create-react-app setup in this repository](https://github.com/smooth-code/jest-puppeteer/tree/master/examples/create-react-app).\n\n## API\n\n### `global.browser`\n\nGive access to the [Puppeteer Browser](https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md#class-browser).\n\n```js\nit(\'should open a new page\', async () => {\n  const page = await browser.newPage()\n  await page.goto(\'https://google.com\')\n})\n```\n\n### `global.page`\n\nGive access to a [Puppeteer Page](https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md#class-page) opened at start (you will use it most of time).\n\n```js\nit(\'should fill an input\', async () => {\n  await page.type(\'#myinput\', \'Hello\')\n})\n```\n\n### `global.context`\n\nGive access to a [browser context](https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md#class-browsercontext) that is instantiated when the browser is launched. You can control whether each test has its own isolated browser context using the `browserContext` option in your `jest-puppeteer.config.js`.\n\n### `global.expect(page)`\n\nHelper to make Puppeteer assertions, [see documentation](https://github.com/smooth-code/jest-puppeteer/tree/master/packages/expect-puppeteer/README.md#api).\n\n```js\nawait expect(page).toMatch(\'A text in the page\')\n// ...\n```\n\n### `global.jestPuppeteer.debug()`\n\nPut test in debug mode.\n\n- Jest is suspended (no timeout)\n- A `debugger` instruction to Chromium, if Puppeteer has been launched with `{ devtools: true }` it will stop\n\n```js\nit(\'should put test in debug mode\', async () => {\n  await jestPuppeteer.debug()\n})\n```\n\n### `global.jestPuppeteer.resetPage()`\n\nReset global.page\n\n```js\nbeforeEach(async () => {\n  await jestPuppeteer.resetPage()\n})\n```\n\n### `global.jestPuppeteer.resetBrowser()`\n\nReset global.browser, global.context, and global.page\n\n```js\nbeforeEach(async () => {\n  await jestPuppeteer.resetBrowser()\n})\n```\n\n### `jest-puppeteer.config.js`\n\nYou can specify a `jest-puppeteer.config.js` at the root of the project or define a custom path using `JEST_PUPPETEER_CONFIG` environment variable.\n\n- `launch` <[object]> [All Puppeteer launch options](https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md#puppeteerlaunchoptions) can be specified in config. Since it is JavaScript, you can use all stuff you need, including environment.\n- `connect` <[object]> [All Puppeteer connect options](https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md#puppeteerconnectoptions) can be specified in config. This is an alternative to `launch` config, allowing you to connect to an already running instance of Chrome.\n- `server` <[Object]> Server options allowed by [jest-dev-server](https://github.com/smooth-code/jest-puppeteer/tree/master/packages/jest-dev-server)\n\n#### Example 1\n\n```js\n// jest-puppeteer.config.js\nmodule.exports = {\n  launch: {\n    dumpio: true,\n    headless: process.env.HEADLESS !== \'false\',\n  },\n  server: {\n    command: \'node server.js\',\n    port: 4444,\n  },\n}\n```\n\n#### Example 2\n\nThis example uses an already running instance of Chrome by passing the active web socket endpoint to `connect`. This is useful, for example, when you want to connect to Chrome running in the cloud.\n\n```js\n// jest-puppeteer.config.js\nconst wsEndpoint = fs.readFileSync(endpointPath, \'utf8\')\n\nmodule.exports = {\n  connect: {\n    browserWSEndpoint: wsEndpoint,\n  },\n  server: {\n    command: \'node server.js\',\n    port: 4444,\n  },\n}\n```\n\n## Inspiration\n\nThanks to Fumihiro Xue for his great [Jest example](https://github.com/xfumihiro/jest-puppeteer-example).\n\n## License\n\nMIT\n'