b'# Cuprite - Headless Chrome driver for Capybara #\n\n[![Build Status](https://travis-ci.org/machinio/cuprite.svg?branch=master)](https://travis-ci.org/machinio/cuprite)\n\nCuprite is a pure Ruby driver (read as _no_ Java/Selenium/WebDriver/ChromeDriver\nrequirement) for [Capybara](https://github.com/teamcapybara/capybara). It allows\nyou to run your Capybara tests on a headless [Chrome](https://www.google.com/chrome/)\nor [Chromium](https://www.chromium.org/) by [CDP protocol](https://chromedevtools.github.io/devtools-protocol/).\nUnder the hood it uses [Ferrum](https://github.com/route/ferrum) which is\nhigh-level API to the browser again by CDP protocol.\n\nThe emphasis was made on raw CDP protocol because Headless Chrome allows you to\ndo so many things that are barely supported by WebDriver because it should have\nconsistent design with other browsers. The design of the driver will be as\nclose to [Poltergeist](https://github.com/teampoltergeist/poltergeist) as\npossible though it\'s not a goal.\n\n## Install ##\n\nAdd these lines to your `Gemfile` and run `bundle install`.\n\n``` ruby\ngem "cuprite", group: :test\n```\n\nIn your test setup add:\n\n``` ruby\nrequire "capybara/cuprite"\nCapybara.javascript_driver = :cuprite\nCapybara.register_driver(:cuprite) do |app|\n  Capybara::Cuprite::Driver.new(app, window_size: [1200, 800])\nend\n```\n\nIf you already had tests on Poltergeist then it should simply work, for Selenium\nyou better check your code for `.manage` calls because things are much easier\nwith Cuprite, see the documentation below.\n\n## Install Chrome ##\n\nThere\'s no official Chrome or Chromium package for Linux don\'t install it this\nway because it either will be outdated or unofficial, both are bad. Download it\nfrom official [source](https://www.chromium.org/getting-involved/download-chromium).\nChrome binary should be in the `PATH` or `BROWSER_PATH` or you can pass it as an\noption\n\n## Customization ##\n\nYou can customize options with the following code in your test setup:\n\n``` ruby\nCapybara.register_driver(:cuprite) do |app|\n  Capybara::Cuprite::Driver.new(app, options)\nend\n```\n\n#### Running in Docker ####\n\nIn docker as root you must pass the no-sandbox browser option:\n\n```ruby\nCapybara::Cuprite::Driver.new(app, browser_options: { \'no-sandbox\': nil })\n```\n\n* options `Hash`\n  * `:browser_path` (String) - Path to chrome binary, you can also set ENV\n      variable as `BROWSER_PATH=some/path/chrome bundle exec rspec`.\n  * `:headless` (Boolean) - Set browser as headless or not, `true` by default.\n  * `:slowmo` (Integer | Float) - Set a delay to wait before sending command.\n      Usefull companion of headless option, so that you have time to see changes.\n  * `:logger` (Object responding to `puts`) - When present, debug output is\n      written to this object.\n  * `:timeout` (Numeric) - The number of seconds we\'ll wait for a response when\n      communicating with browser. Default is 5.\n  * `:js_errors` (Boolean) - When true, JavaScript errors get re-raised in Ruby.\n  * `:window_size` (Array) - The dimensions of the browser window in which to\n      test, expressed as a 2-element array, e.g. [1024, 768]. Default: [1024, 768]\n  * `:browser_options` (Hash) - Additional command line options,\n      [see them all](https://peter.sh/experiments/chromium-command-line-switches/)\n      e.g. `{ "ignore-certificate-errors" => nil }`\n  * `:extensions` (Array) - An array of JS files to be preloaded into the browser\n  * `:port` (Integer) - Remote debugging port for headless Chrome\n  * `:host` (String) - Remote debugging address for headless Chrome\n  * `:url` (String) - URL for a running instance of Chrome. If this is set, a\n      browser process will not be spawned.\n  * `:url_blacklist` (Array) - array of strings to match against requested URLs\n  * `:url_whitelist` (Array) - array of strings to match against requested URLs\n  * `:process_timeout` (Integer) - How long to wait for the Chrome process to\n      respond on startup\n\n### Clicking/Scrolling ###\n\n* `page.driver.click(x, y)` Click a very specific area of the screen.\n* `page.driver.scroll_to(left, top)` Scroll to given position.\n* `element.send_keys(*keys)` Send keys to given node.\n\n### Request headers ###\n\nManipulate HTTP request headers like a boss:\n\n``` ruby\npage.driver.headers # => {}\npage.driver.headers = { "User-Agent" => "Cuprite" }\npage.driver.add_headers("Referer" => "https://example.com")\npage.driver.headers # => { "User-Agent" => "Cuprite", "Referer" => "https://example.com" }\n```\n\nNotice that `headers=` will overwrite already set headers. You should use\n`add_headers` if you want to add a few more. These headers will apply to all\nsubsequent HTTP requests (including requests for assets, AJAX, etc). They will\nbe automatically cleared at the end of the test.\n\n### Network traffic ###\n\n* `page.driver.network_traffic` Inspect network traffic (resources have been\n  loaded) on the current page. This returns an array of request objects.\n\n\n```ruby\npage.driver.network_traffic # => [Request, ...]\nrequest = page.driver.network_traffic.first\nrequest.response\n```\n\nPlease note that network traffic is not cleared when you visit new page. You can\nmanually clear the network traffic by calling `page.driver.clear_network_traffic`\nor `page.driver.reset`\n\n### Manipulating cookies ###\n\nThe following methods are used to inspect and manipulate cookies:\n\n* `page.driver.cookies` - a hash of cookies accessible to the current\n  page. The keys are cookie names. The values are `Cookie` objects, with\n  the following methods: `name`, `value`, `domain`, `path`, `size`, `secure?`,\n  `httponly?`, `session?`, `expires`.\n* `page.driver.set_cookie(name, value, options = {})` - set a cookie.\n  The options hash can take the following keys: `:domain`, `:path`,\n  `:secure`, `:httponly`, `:expires`. `:expires` should be a\n  `Time` object.\n* `page.driver.remove_cookie(name)` - remove a cookie\n* `page.driver.clear_cookies` - clear all cookies\n\n### Screenshot ###\n\nBesides capybara screenshot method you can get image as Base64:\n\n* `page.driver.render_base64(format, options)`\n\n### Authorization ###\n\n* `page.driver.basic_authorize(user, password)`\n* `page.driver.set_proxy(ip, port, type, user, password)`\n\n### URL Blacklisting & Whitelisting ###\nCuprite supports URL blacklisting, which allows you to prevent scripts from\nrunning on designated domains:\n\n```ruby\npage.driver.browser.url_blacklist = ["http://www.example.com"]\n```\n\nand also URL whitelisting, which allows scripts to only run\non designated domains:\n\n```ruby\npage.driver.browser.url_whitelist = ["http://www.example.com"]\n```\n\nIf you are experiencing slower run times, consider creating a URL whitelist of\ndomains that are essential or a blacklist of domains that are not essential,\nsuch as ad networks or analytics, to your testing environment.\n\n### Remote debugging ###\n\nIf you use the `inspector: true` option, remote debugging will be enabled. When\nthis option is enabled, you can insert `page.driver.debug` into your tests to\npause the test and launch a browser which gives you the Chrome inspector to view\nall your open pages and inspect them.\n\nYou could set the inspector option via an environment variable:\n\n```ruby\nCapybara.register_driver :cuprite do |app|\n  Capybara::Cuprite::Driver.new(app, inspector: ENV[\'INSPECTOR\'])\nend\n```\n\n## License ##\n\nCopyright 2018-2019 Machinio\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n"Software"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n'