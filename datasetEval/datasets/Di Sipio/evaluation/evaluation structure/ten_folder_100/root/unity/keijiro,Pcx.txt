b'Pcx - Point Cloud Importer/Renderer for Unity\n=============================================\n\n![GIF](https://i.imgur.com/zc6P96x.gif)\n![GIF](https://i.imgur.com/lpWIiXu.gif)\n\n**Pcx** is a custom importer and renderer that allows for handling point cloud data\nin Unity.\n\nSystem Requirements\n-------------------\n\n- Unity 2017.3\n\nPcx uses the 32-bit vertex index format that is newly introduced in Unity\n2017.3, so it\'s not compatible with the previous versions of Unity.\n\nSupported Formats\n-----------------\n\nCurrently Pcx only supports PLY binary little-endian format.\n\nInstallation\n------------\n\nDownload and import one of the `.unitypackage` files from [Releases] page.\n\nYou can also use [Git support on Package Manager] to import the package. Add\nthe following line to the `dependencies` section in the package manifest file\n(`Packages/manifest.json`). Note that this feature is only available in\nUnity 2018.3. See [the forum thread][Git support on Package Manager] for\nfuther details.\n\n```\n"jp.keijiro.pcx": "https://github.com/keijiro/Pcx.git#upm"\n```\n\n[Releases]: https://github.com/keijiro/Pcx/releases\n[Git support on Package Manager]:\n    https://forum.unity.com/threads/git-support-on-package-manager.573673/\n\nContainer Types\n---------------\n\n![Inspector](https://i.imgur.com/Da0p6uV.png)\n\nThere are three types of container for point clouds.\n\n### Mesh\n\nPoints are to be contained in a `Mesh` object. They can be rendered with the\nstandard `MeshRenderer` component. It\'s recommended to use the custom shaders\nincluded in Pcx (`Point Cloud/Point` and `Point Cloud/Disk`).\n\n### ComputeBuffer\n\nPoints are to be contained in a `PointCloudData` object, which uses\n`ComputeBuffer` to store point data. It can be rendered with using the\n`PointCloudRenderer` component.\n\n### Texture\n\nPoints are baked into `Texture2D` objects that can be used as attribute maps\nin [Visual Effect Graph].\n\n[Visual Effect Graph]: https://unity.com/visual-effect-graph\n\nRendering Methods\n-----------------\n\nThere are two types of rendering methods in Pcx.\n\n### Point (point primitives)\n\nPoints are rendered as point primitives when using the `Point Cloud/Point`\nshader.\n\n![Points](https://i.imgur.com/aY4QMtb.png)\n![Points](https://i.imgur.com/jJAhLI2.png)\n\nThe size of points can be adjusted by changing the material properties.\n\n![Inspector](https://i.imgur.com/gEMmxTH.png)\n\nThese size properties are only supported on some platforms; It may work with\nOpenGLCore and Metal, but never work with D3D11/12.\n\nThis method is also used when the point size is set to zero in\n`PointCloudRenderer`.\n\n### Disk (geometry shader)\n\nPoints are rendered as small disks when using the `Point Cloud/Disk` shader or\n`PointCloudRenderer`.\n\n![Disks](https://i.imgur.com/fcq5E3m.png)\n\nThis method requires geometry shader support.\n\nAcknowledgements\n----------------\n\nThe point cloud files used in the examples of Pcx are created by authors listed\nbelow. These files are licensed under the Creative Commons Attribution license\n([CC BY 4.0]). Please see the following original pages for further details.\n\n- richmond-azaelias.ply - Azaleas, Isabella Plantation, Richmond Park.\n  Created by [Thomas Flynn].\n  https://sketchfab.com/models/188576acfe89480f90c38d9df9a4b19a\n\n- anthidium-forcipatum.ply - Anthidium forcipatum \xe2\x99\x80 (Point Cloud).\n  Created by [Thomas Flynn].\n  https://sketchfab.com/models/3493da15a8db4f34929fc38d9d0fcb2c\n\n- Guanyin.ply - Guanyin (Avalokitesvara). Created by [Geoffrey Marchal].\n  https://sketchfab.com/models/9db9a5dfb6744a5586dfcb96cb8a7dc5\n\n[Thomas Flynn]: https://sketchfab.com/nebulousflynn\n[Geoffrey Marchal]: https://sketchfab.com/geoffreymarchal\n[CC BY 4.0]: https://creativecommons.org/licenses/by/4.0/\n\nLicense\n-------\n\n[MIT](LICENSE.txt)\n'