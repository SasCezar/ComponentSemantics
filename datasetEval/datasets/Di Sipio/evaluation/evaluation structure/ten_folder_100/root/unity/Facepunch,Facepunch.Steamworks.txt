b'# Facepunch.Steamworks\nAnother fucking c# Steamworks implementation\n\n[![Build Status](http://build.facepunch.com/buildStatus/icon?job=Facepunch/Facepunch.Steamworks/master)](http://build.facepunch.com/job/Facepunch/job/Facepunch.Steamworks/job/master/)\n\n## Features\n\n| Feature | Supported |\n|----------|------------ |\n| Windows | \xe2\x9c\x94 |\n| Linux | \xe2\x9c\x94 |\n| MacOS | \xe2\x9c\x94 |\n| Unity Support | \xe2\x9c\x94 |\n| Unity IL2CPP Support | \xe2\x9c\x94 |\n| Async Callbacks (steam callresults) | \xe2\x9c\x94 |\n| Events (steam callbacks) | \xe2\x9c\x94 |\n| Single C# dll (no native requirements apart from Steam) | \xe2\x9c\x94 |\n| Open Source | \xe2\x9c\x94 |\n| MIT license | \xe2\x9c\x94 |\n| Any 32bit OS | \xe2\x9d\x8c |\n\n## Why\n\nThe Steamworks C# implementations I found that were compatible with Unity have worked for a long time. But I hate them all. For a number of different reasons.\n\n* They\'re not C#, they\'re just a collection of functions.\n* They\'re not up to date.\n* They require a 3rd party native dll.\n* They can\'t be compiled into a standalone dll (in Unity).\n* They\'re not free\n* They have a restrictive license.\n\nC# is meant to make things easier. So lets try to wrap it up in a way that makes it all easier.\n\n## What\n\n### Get your own information\n\n```csharp\n    SteamClient.SteamId // Your SteamId\n    SteamClient.Name // Your Name\n```\n\n### View your friends list\n\n```csharp\nforeach ( var friend in SteamFriends.GetFriends() )\n{\n    Console.WriteLine( "{friend.Id}: {friend.Name}" );\n    Console.WriteLine( "{friend.IsOnline} / {friend.SteamLevel}" );\n    \n    friend.SendMessage( "Hello Friend" );\n}\n```\n\n\n### App Info\n\n```csharp\n    Console.WriteLine( SteamApps.GameLanguage ); // Print the current game language\n    var installDir = SteamApps.AppInstallDir( 4000 ); // Get the path to the Garry\'s Mod install folder\n\n    var fileinfo = await SteamApps.GetFileDetailsAsync( "hl2.exe" ); // async get file details\n    DoSomething( fileinfo.SizeInBytes, fileinfo.Sha1 );\n```\n\n### Get Avatars\n\n```csharp\n    var image = await SteamFriends.GetLargeAvatarAsync( steamid );\n    if ( !image.HasValue ) return DefaultImage;\n\n    return MakeTextureFromRGBA( image.Data, image.Width, image.Height );\n```\n\n### Get a list of servers\n\n```csharp\nusing ( var list = new ServerList.Internet() )\n{\n    list.AddFilter( "map", "de_dust" );\n    await list.RunQueryAsync();\n\n    foreach ( var server in list.Responsive )\n    {\n        Console.WriteLine( $"{server.Address} {server.Name}" );\n    }\n}\n```\n\n### Achievements\n\nList them\n\n```csharp\n    foreach ( var a in SteamUserStats.Achievements )\n    {\n        Console.WriteLine( $"{a.Name} ({a.State}})" );\n    }\t\n```\n\nUnlock them\n\n```csharp\n    var ach = new Achievement( "GM_PLAYED_WITH_GARRY" );\n    ach.Trigger();\n```\n\n### Voice\n\n```csharp\n    SteamUser.VoiceRecord = KeyDown( "V" );\n\n    if ( SteamUser.HasVoiceData )\n    {\n        var bytesrwritten = SteamUser.ReadVoiceData( stream );\n        // Send Stream Data To Server or Something\n    }\n```\n\n\n### Auth\n\n```csharp\n    // Client sends ticket data to server somehow\n    var ticket = SteamUser.GetAuthSessionTicket();\n\n    // server listens to event\n    SteamServer.OnValidateAuthTicketResponse += ( steamid, ownerid, rsponse ) =>\n    {\n        if ( rsponse == AuthResponse.OK )\n            TellUserTheyCanBeOnServer( steamid );\n        else\n            KickUser( steamid );\n    };\n\n    // server gets ticket data from client, calls this function.. which either returns\n    // false straight away, or will issue a TicketResponse.\n    if ( !SteamServer.BeginAuthSession( ticketData, clientSteamId ) )\n    {\n        KickUser( clientSteamId );\n    }\n\n    //\n    // Client is leaving, cancels their ticket OnValidateAuth is called on the server again\n    // this time with AuthResponse.AuthTicketCanceled\n    //\n    ticket.Cancel();\n```\n\n### Utils\n\n```csharp\n    SteamUtils.SecondsSinceAppActive;\n    SteamUtils.SecondsSinceComputerActive;\n    SteamUtils.IpCountry;\n    SteamUtils.UsingBatteryPower;\n    SteamUtils.CurrentBatteryPower;\n    SteamUtils.AppId;\n    SteamUtils.IsOverlayEnabled;\n    SteamUtils.IsSteamRunningInVR;\n    SteamUtils.IsSteamInBigPictureMode;\n```\n\n### Workshop\n\nDownload a workshop item by ID\n\n```csharp\n    SteamUGC.Download( 1717844711 );\n```\n\nGet a workshop item information\n\n```csharp\n    var itemInfo = await Ugc.Item.Get( 1720164672 );\n\n    Console.WriteLine( $"Title: {itemInfo?.Title}" );\n    Console.WriteLine( $"IsInstalled: {itemInfo?.IsInstalled}" );\n    Console.WriteLine( $"IsDownloading: {itemInfo?.IsDownloading}" );\n    Console.WriteLine( $"IsDownloadPending: {itemInfo?.IsDownloadPending}" );\n    Console.WriteLine( $"IsSubscribed: {itemInfo?.IsSubscribed}" );\n    Console.WriteLine( $"NeedsUpdate: {itemInfo?.NeedsUpdate}" );\n    Console.WriteLine( $"Description: {itemInfo?.Description}" );\n```\n\nQuery a list of workshop items\n\n```csharp\n    var q = Ugc.Query.All\n                    .WithTag( "Fun" )\n                    .WithTag( "Movie" )\n                    .MatchAllTags();\n\n    var result = await q.GetPageAsync( 1 );\n\n    Console.WriteLine( $"ResultCount: {result?.ResultCount}" );\n    Console.WriteLine( $"TotalCount: {result?.TotalCount}" );\n\n    foreach ( Ugc.Item entry in result.Value.Entries )\n    {\n        Console.WriteLine( $" {entry.Title}" );\n    }\n```\n\nQuery items created by friends\n\n```csharp\n    var q = Ugc.UserQuery.All\n                        .CreatedByFriends();\n```\n\nQuery items created by yourself\n\n```csharp\n    var q = Ugc.UserQuery.All\n                        .FromSelf();\n```\n\nPublish your own file\n\n```csharp\n    var result = await Ugc.Editor.NewCommunityFile\n                      .WithTitle( "My New FIle" )\n                      .WithDescription( "This is a description" )\n                      .WithContent( "c:/folder/addon/location" )\n                      .WithTag( "awesome" )\n                      .WithTag( "small" )\n                      .SubmitAsync( iProgressBar );\n```\n\n### Steam Cloud\n\nWrite a cloud file\n\n```csharp\n    SteamRemoteStorage.FileWrite( "file.txt", fileContents );\n```\n\nRead a cloud file\n\n```csharp\n    var fileContents = SteamRemoteStorage.ReadFile( "file.txt" );\n```\n\nList all files\n\n```csharp\n    foreach ( var file in SteamRemoteStorage.Files )\n    {\n        Console.WriteLine( $"{file} ({SteamRemoteStorage.FileSize(file)} {SteamRemoteStorage.FileTime( file )})" );\n    }\n```\n\n\n### Steam Inventory\n\nGet item definitions\n\n```csharp\n    foreach ( InventoryDef def in SteamInventory.Definitions )\n    {\n        Console.WriteLine( $"{def.Name}" );\n    }\n```\n\nGet items that are for sale in the item shop\n\n```csharp\n    var defs = await SteamInventory.GetDefinitionsWithPricesAsync();\n\n    foreach ( var def in defs )\n    {\n        Console.WriteLine( $"{def.Name} [{def.LocalPriceFormatted}]" );\n    }\n```\n\nGet a list of your items\n\n```csharp\n    var result = await SteamInventory.GetItems();\n\n    // result is disposable, good manners to dispose after use\n    using ( result )\n    {\n        var items = result?.GetItems( bWithProperties );\n\n        foreach ( InventoryItem item in items )\n        {\n            Console.WriteLine( $"{item.Id} / {item.Quantity} / {item.Def.Name} " );\n        }\n    }\n```\n\n# Getting Started\n\n## Client\n\nTo initialize a client you can do this.\n\n```csharp\nusing Steamworks;\n\n// ...\n\ntry \n{\n    SteamClient.Init( 4000 );\n}\ncatch ( System.Exception e )\n{\n    // Couldn\'t init for some reason (steam is closed etc)\n}\n```\n\nReplace 4000 with the appid of your game. You shouldn\'t call any Steam functions before you initialize.\n\nWhen you\'re done, when you\'re closing your game, just shutdown.\n\n```csharp\nSteamClient.Shutdown();\n```\n\n## Server\n\nTo create a server do this.\n\n```csharp\nvar serverInit = new SteamServerInit( "gmod", "Garry Mode" )\n{\n    GamePort = 28015,\n    Secure = true,\n    QueryPort = 28016\n};\n\ntry\n{\n    Steamworks.SteamServer.Init( 4000, serverInit );\n}\ncatch ( System.Exception )\n{\n    // Couldn\'t init for some reason (dll errors, blocked ports)\n}\n```\n\n# Help\n\nWanna help? Go for it, pull requests, bug reports, yes, do it.\n\nYou can also hit up the [Steamworks Thread](http://steamcommunity.com/groups/steamworks/discussions/0/1319961618833314524/) for help/discussion.\n\n# License\n\nMIT - do whatever you want.\n'