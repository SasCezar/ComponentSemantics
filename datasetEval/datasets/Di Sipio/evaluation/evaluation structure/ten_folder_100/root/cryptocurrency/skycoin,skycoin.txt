b'![skycoin logo](https://user-images.githubusercontent.com/26845312/32426705-d95cb988-c281-11e7-9463-a3fce8076a72.png)\n\n# Skycoin\n\n[![Build Status](https://travis-ci.com/skycoin/skycoin.svg)](https://travis-ci.com/skycoin/skycoin)\n[![GoDoc](https://godoc.org/github.com/skycoin/skycoin?status.svg)](https://godoc.org/github.com/skycoin/skycoin)\n[![Go Report Card](https://goreportcard.com/badge/github.com/skycoin/skycoin)](https://goreportcard.com/report/github.com/skycoin/skycoin)\n\nSkycoin is a next-generation cryptocurrency.\n\nSkycoin was written from scratch and designed over four years to realize the\nideal of Bitcoin and represents the apex of cryptocurrency design.\nSkycoin is not designed to add features to Bitcoin,\nbut rather improves Bitcoin by increasing simplicity,\nsecurity and stripping out everything non-essential.\n\nSome people have hyped the Skycoin Project as leading into "Bitcoin 3.0".\nThe coin itself is not "Bitcoin 3.0",\nbut is rather "Bitcoin 1.0". Bitcoin is a prototype crypto-coin.\nSkycoin was designed to be what Bitcoin would look like if it were built from\nscratch, to remedy the rough edges in the Bitcoin design.\n\n- no duplicate coin-base outputs\n- enforced checks for hash collisions\n- simple deterministic wallets\n- no transaction malleability\n- no signature malleability\n- removal of the scripting language\n- CoinJoin and normal transactions are indistinguishable\n- elimination of edge-cases that prevent independent node implementations\n- <=10 second transaction times\n- elimination of the need for mining to achieve blockchain consensus\n\n## Links\n\n* [skycoin.net](https://www.skycoin.net)\n* [Skycoin Blog](https://www.skycoin.net/blog)\n* [Skycoin Docs](https://www.skycoin.net/docs)\n* [Skycoin Blockchain Explorer](https://explorer.skycoin.net)\n* [Skycoin Development Telegram Channel](https://t.me/skycoindev)\n* [Skycoin Github Wiki](https://github.com/skycoin/skycoin/wiki)\n\n## Table of Contents\n\n<!-- MarkdownTOC levels="1,2,3,4,5" autolink="true" bracket="round" -->\n\n- [Changelog](#changelog)\n- [Installation](#installation)\n\t- [Go 1.10+ Installation and Setup](#go-110-installation-and-setup)\n\t- [Go get skycoin](#go-get-skycoin)\n\t- [Run Skycoin from the command line](#run-skycoin-from-the-command-line)\n\t- [Show Skycoin node options](#show-skycoin-node-options)\n\t- [Run Skycoin with options](#run-skycoin-with-options)\n\t- [Docker image](#docker-image)\n\t- [Building your own images](#building-your-own-images)\n\t- [Development image](#development-image)\n- [API Documentation](#api-documentation)\n\t- [REST API](#rest-api)\n\t- [Skycoin command line interface](#skycoin-command-line-interface)\n- [Integrating Skycoin with your application](#integrating-skycoin-with-your-application)\n- [Contributing a node to the network](#contributing-a-node-to-the-network)\n- [Creating a new coin](#creating-a-new-coin)\n- [Daemon CLI Options](#daemon-cli-options)\n- [URI Specification](#uri-specification)\n- [Wire protocol user agent](#wire-protocol-user-agent)\n- [Development](#development)\n\t- [Modules](#modules)\n\t- [Client libraries](#client-libraries)\n\t- [Running Tests](#running-tests)\n\t- [Running Integration Tests](#running-integration-tests)\n\t\t- [Stable Integration Tests](#stable-integration-tests)\n\t\t- [Live Integration Tests](#live-integration-tests)\n\t\t- [Debugging Integration Tests](#debugging-integration-tests)\n\t\t- [Update golden files in integration testdata](#update-golden-files-in-integration-testdata)\n\t- [Test coverage](#test-coverage)\n\t\t- [Test coverage for the live node](#test-coverage-for-the-live-node)\n\t- [Formatting](#formatting)\n\t- [Code Linting](#code-linting)\n\t- [Profiling](#profiling)\n\t- [Fuzzing](#fuzzing)\n\t\t- [base58](#base58)\n\t\t- [encoder](#encoder)\n\t- [Dependencies](#dependencies)\n\t\t- [Rules](#rules)\n\t\t- [Management](#management)\n\t- [Configuration Modes](#configuration-modes)\n\t\t- [Development Desktop Client Mode](#development-desktop-client-mode)\n\t\t- [Server Daemon Mode](#server-daemon-mode)\n\t\t- [Electron Desktop Client Mode](#electron-desktop-client-mode)\n\t\t- [Standalone Desktop Client Mode](#standalone-desktop-client-mode)\n\t- [Wallet GUI Development](#wallet-gui-development)\n\t\t- [Translations](#translations)\n\t- [Releases](#releases)\n\t\t- [Update the version](#update-the-version)\n\t\t- [Pre-release testing](#pre-release-testing)\n\t\t- [Creating release builds](#creating-release-builds)\n\t\t- [Release signing](#release-signing)\n- [Responsible Disclosure](#responsible-disclosure)\n\n<!-- /MarkdownTOC -->\n\n## Changelog\n\n[CHANGELOG.md](CHANGELOG.md)\n\n## Installation\n\nSkycoin supports go1.10+.\n\n### Go 1.10+ Installation and Setup\n\n[Golang 1.10+ Installation/Setup](./INSTALLATION.md)\n\n### Go get skycoin\n\n```sh\n$ go get github.com/skycoin/skycoin/cmd/...\n```\n\nThis will download `github.com/skycoin/skycoin` to `$GOPATH/src/github.com/skycoin/skycoin`.\n\nYou can also clone the repo directly with `git clone https://github.com/skycoin/skycoin`,\nbut it must be cloned to this path: `$GOPATH/src/github.com/skycoin/skycoin`.\n\n### Run Skycoin from the command line\n\n```sh\n$ cd $GOPATH/src/github.com/skycoin/skycoin\n$ make run-client\n```\n\n### Show Skycoin node options\n\n```sh\n$ cd $GOPATH/src/github.com/skycoin/skycoin\n$ make run-help\n```\n\n### Run Skycoin with options\n\nExample:\n\n```sh\n$ cd $GOPATH/src/github.com/skycoin/skycoin\n$ make ARGS="--launch-browser=false -data-dir=/custom/path" run\n```\n\n### Docker image\n\nThis is the quickest way to start using Skycoin using Docker.\n\n```sh\n$ docker volume create skycoin-data\n$ docker volume create skycoin-wallet\n$ docker run -ti --rm \\\n    -v skycoin-data:/data/.skycoin \\\n    -v skycoin-wallet:/wallet \\\n    -p 6000:6000 \\\n    -p 6420:6420 \\\n    skycoin/skycoin\n```\n\nThis image has a `skycoin` user for the skycoin daemon to run, with UID and GID 10000.\nWhen you mount the volumes, the container will change their owner, so you\nmust be aware that if you are mounting an existing host folder any content you\nhave there will be own by 10000.\n\nThe container will run with some default options, but you can change them\nby just appending flags at the end of the `docker run` command. The following\nexample will show you the available options.\n\n```sh\n$ docker run --rm skycoin/skycoin -help\n```\n\nAccess the dashboard: [http://localhost:6420](http://localhost:6420).\n\nAccess the API: [http://localhost:6420/version](http://localhost:6420/version).\n\n### Building your own images\n\n[Building your own images](docker/images/mainnet/README.md).\n\n### Development image\n\nThe [skycoin/skycoindev-cli docker image](docker/images/dev-cli/README.md) is provided in order to make\neasy to start developing Skycoin. It comes with the compiler, linters, debugger\nand the vim editor among other tools.\n\nThe [skycoin/skycoindev-dind docker image](docker/images/dev-docker/README.md) comes with docker installed\nand all tools available on `skycoin/skycoindev-cli:develop` docker image.\n\nAlso, the [skycoin/skycoindev-vscode docker image](docker/images/dev-vscode/README.md) is provided\nto facilitate the setup of the development process with [Visual Studio Code](https://code.visualstudio.com)\nand useful tools included in `skycoin/skycoindev-cli`.\n\n## API Documentation\n\n### REST API\n\n[REST API](src/api/README.md).\n\n### Skycoin command line interface\n\n[CLI command API](cmd/cli/README.md).\n\n## Integrating Skycoin with your application\n\n[Skycoin Integration Documentation](INTEGRATION.md)\n\n## Contributing a node to the network\n\nAdd your node\'s `ip:port` to the [peers.txt](peers.txt) file.\nThis file will be periodically uploaded to https://downloads.skycoin.net/blockchain/peers.txt\nand used to seed client with peers.\n\n*Note*: Do not add Skywire nodes to `peers.txt`.\nOnly add Skycoin nodes with high uptime and a static IP address (such as a Skycoin node hosted on a VPS).\n\n## Creating a new coin\n\nSee the [newcoin tool README](./cmd/newcoin/README.md)\n\n## Daemon CLI Options\n\nSee the [Skycoin Daemon CLI options](./cmd/skycoin/README.md)\n\n## URI Specification\n\nSkycoin URIs obey the same rules as specified in Bitcoin\'s [BIP21](https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki).\nThey use the same fields, except with the addition of an optional `hours` parameter, specifying the coin hours.\n\nExample Skycoin URIs:\n\n* `skycoin:2hYbwYudg34AjkJJCRVRcMeqSWHUixjkfwY`\n* `skycoin:2hYbwYudg34AjkJJCRVRcMeqSWHUixjkfwY?amount=123.456&hours=70`\n* `skycoin:2hYbwYudg34AjkJJCRVRcMeqSWHUixjkfwY?amount=123.456&hours=70&label=friend&message=Birthday%20Gift`\n\nAdditonally, if no `skycoin:` prefix is present when parsing, the string may be treated as an address:\n\n* `2hYbwYudg34AjkJJCRVRcMeqSWHUixjkfwY`\n\nHowever, do not use this URI in QR codes displayed to the user, because the address can\'t be disambiguated from other Skyfiber coins.\n\n## Wire protocol user agent\n\n[Wire protocol user agent description](https://github.com/skycoin/skycoin/wiki/Wire-protocol-user-agent)\n\n## Development\n\nWe have two branches: `master` and `develop`.\n\n`develop` is the default branch and will have the latest code.\n\n`master` will always be equal to the current stable release on the website, and should correspond with the latest release tag.\n\n### Modules\n\n* `api` - REST API interface\n* `cipher` - cryptographic library (key generation, addresses, hashes)\n* `cipher/base58` - Base58 encoding\n* `cipher/encoder` - reflect-based deterministic runtime binary encoder\n* `cipher/encrypt` - at-rest data encryption (chacha20poly1305+scrypt)\n* `cipher/go-bip39` - BIP-39 seed generation\n* `cli` - CLI library\n* `coin` - blockchain data structures (blocks, transactions, unspent outputs)\n* `daemon` - top-level application manager, combining all components (networking, database, wallets)\n* `daemon/gnet` - networking library\n* `daemon/pex` - peer management\n* `params` - configurable transaction verification parameters\n* `readable` - JSON-encodable representations of internal structures\n* `skycoin` - core application initialization and configuration\n* `testutil` - testing utility methods\n* `transaction` - methods for creating transactions\n* `util` - miscellaneous utilities\n* `visor` - top-level blockchain database layer\n* `visor/blockdb` - low-level blockchain database layer\n* `visor/historydb` - low-level blockchain database layer for historical blockchain metadata\n* `wallet` - wallet file management\n\n### Client libraries\n\nSkycoin implements client libraries which export core functionality for usage from\nother programming languages.\n\n* [libskycoin C client library and SWIG interface](https://github.com/skycoin/libskycoin)\n* [skycoin-lite: Javascript and mobile bindings](https://github.com/skycoin/skycoin-lite)\n\n### Running Tests\n\n```sh\n$ make test\n```\n\n### Running Integration Tests\n\nThere are integration tests for the CLI and HTTP API interfaces. They have two\nrun modes, "stable" and "live".\n\nThe stable integration tests will use a skycoin daemon\nwhose blockchain is synced to a specific point and has networking disabled so that the internal\nstate does not change.\n\nThe live integration tests should be run against a synced or syncing node with networking enabled.\n\n#### Stable Integration Tests\n\n```sh\n$ make integration-test-stable\n```\n\nor\n\n```sh\n$ ./ci-scripts/integration-test-stable.sh -v -w\n```\n\nThe `-w` option, run wallet integrations tests.\n\nThe `-v` option, show verbose logs.\n\n#### Live Integration Tests\n\nThe live integration tests run against a live runnning skycoin node, so before running the test, we\nneed to start a skycoin node:\n\n```sh\n$ ./run-daemon.sh\n```\n\nAfter the skycoin node is up, run the following command to start the live tests:\n\n```sh\n$ make integration-test-live\n```\n\nThe above command will run all tests except the wallet-related tests. To run wallet tests, we\nneed to manually specify a wallet file, and it must have at least `2 coins` and `256 coinhours`,\nit also must have been loaded by the node.\n\nWe can specify the wallet by setting two environment variables:\n\n* `API_WALLET_ID`, which is the filename (without path), that is loaded by the daemon to test against.\n  This is the `"id"` field in API requests. It is used by the API integration tests.\n  The wallet directory that the daemon uses can be controlled with the `-wallet-dir` option.\n* `CLI_WALLET_FILE`, which is the filename (with path), to be used by the CLI integration tests\n\nIf the wallet is encrypted, also set `WALLET_PASSWORD`.\n\nExample of running the daemon with settings for integration tests:\n\n```sh\n$ export API_WALLET_ID="$valid_wallet_filename"\n$ export CLI_WALLET_FILE="$HOME/.skycoin/wallets/$valid_wallet_filename"\n$ export WALLET_PASSWORD="$wallet_password"\n$ make run-integration-test-live\n```\n\nThen run the tests with the following command:\n\n```sh\n$ make integration-test-live-wallet\n```\n\nThere are two other live integration test modes for CSRF disabled and networking disabled.\n\nTo run the CSRF disabled tests:\n\n```sh\n$ export API_WALLET_ID="$valid_wallet_filename"\n$ export CLI_WALLET_FILE="$HOME/.skycoin/wallets/$valid_wallet_filename"\n$ export WALLET_PASSWORD="$wallet_password"\n$ make run-integration-test-live-disable-csrf\n```\n\n```sh\n$ make integration-test-live-disable-csrf\n```\n\nTo run the networking disabled tests, which require a live wallet:\n\n```sh\n$ export API_WALLET_ID="$valid_wallet_filename"\n$ export CLI_WALLET_FILE="$HOME/.skycoin/wallets/$valid_wallet_filename"\n$ export WALLET_PASSWORD="$wallet_password"\n$ make run-integration-test-live-disable-networking\n```\n\nThen run the tests with the following command:\n\n```sh\n$ make integration-test-live-wallet\n```\n\n#### Debugging Integration Tests\n\nRun specific test case:\n\nIt\'s annoying and a waste of time to run all tests to see if the test we real care\nis working correctly. There\'s an option: `-r`, which can be used to run specific test case.\nFor example: if we only want to test `TestStableAddressBalance` and see the result, we can run:\n\n```sh\n$ ./ci-scripts/integration-test-stable.sh -v -r TestStableAddressBalance\n```\n\n#### Update golden files in integration testdata\n\nGolden files are expected data responses from the CLI or HTTP API saved to disk.\nWhen the tests are run, their output is compared to the golden files.\n\nTo update golden files, use the provided `make` command:\n\n```sh\n$ make update-golden-files\n```\n\nWe can also update a specific test case\'s golden file with the `-r` option.\nFor example:\n```sh\n$ ./ci-scripts/integration-test-stable.sh -v -u -r TestStableAddressBalance\n```\n\n### Test coverage\n\nCoverage is automatically generated for `make test` and integration tests run against a stable node.\nThis includes integration test coverage. The coverage output files are placed in `coverage/`.\n\nTo merge coverage from all tests into a single HTML file for viewing:\n\n```sh\n$ make check\n$ make merge-coverage\n```\n\nThen open `coverage/all-coverage.html` in the browser.\n\n#### Test coverage for the live node\n\nSome tests can only be run with a live node, for example wallet spending tests.\nTo generate coverage for this, build and run the skycoin node in test mode before running the live integration tests.\n\nIn one shell:\n\n```sh\n$ make run-integration-test-live-cover\n```\n\nIn another shell:\n\n```sh\n$ make integration-test-live\n```\n\nAfter the tests have run, CTRL-C to exit the process from the first shell.\nA coverage file will be generated at `coverage/skycoin-live.coverage.out`.\n\nMerge the coverage with `make merge-coverage` then open the `coverage/all-coverage.html` file to view it,\nor generate the HTML coverage in isolation with `go tool cover -html`\n\n### Formatting\n\nAll `.go` source files should be formatted `goimports`.  You can do this with:\n\n```sh\n$ make format\n```\n\n### Code Linting\n\nInstall prerequisites:\n\n```sh\n$ make install-linters\n```\n\nRun linters:\n\n```sh\n$ make lint\n```\n\n### Profiling\n\nA full CPU profile of the program from start to finish can be obtained by running the node with the `-profile-cpu` flag.\nOnce the node terminates, a profile file is written to `-profile-cpu-file` (defaults to `cpu.prof`).\nThis profile can be analyzed with\n\n```sh\n$ go tool pprof cpu.prof\n```\n\nThe HTTP interface for obtaining more profiling data or obtaining data while running can be enabled with `-http-prof`.\nThe HTTP profiling interface can be controlled with `-http-prof-host` and listens on `localhost:6060` by default.\n\nSee https://golang.org/pkg/net/http/pprof/ for guidance on using the HTTP profiler.\n\nSome useful examples include:\n\n```sh\n$ go tool pprof http://localhost:6060/debug/pprof/profile?seconds=10\n$ go tool pprof http://localhost:6060/debug/pprof/heap\n```\n\nA web page interface is provided by http/pprof at http://localhost:6060/debug/pprof/.\n\n### Fuzzing\n\nFuzz tests are run with [go-fuzz](https://github.com/dvyukov/go-fuzz).\n[Follow the instructions on the go-fuzz page](https://github.com/dvyukov/go-fuzz) to install it.\n\nFuzz tests are written for the following packages:\n\n#### base58\n\nTo fuzz the `cipher/base58` package,\n\n```sh\n$ make fuzz-base58\n```\n\n#### encoder\n\nTo fuzz the `cipher/encoder` package,\n\n```sh\n$ make fuzz-encoder\n```\n\n### Dependencies\n\n#### Rules\n\nDependencies must not require `cgo`.  This means dependencies cannot be wrappers around C libraries.\nRequiring `cgo` breaks cross compilation and interferes with repeatable (deterministic) builds.\n\nCritical cryptographic dependencies used by code in package `cipher` are archived inside the `cipher` folder,\nrather than in the `vendor` folder.  This prevents a user of the `cipher` package from accidentally using a\ndifferent version of the `cipher` dependencies than were developed, which could have catastrophic but hidden problems.\n\n#### Management\n\nDependencies are managed with [dep](https://github.com/golang/dep).\n\nTo [install `dep` for development](https://github.com/golang/dep/blob/master/docs/installation.md#development):\n\n```sh\n$ go get -u github.com/golang/dep/cmd/dep\n```\n\n`dep` vendors all dependencies into the repo.\n\nIf you change the dependencies, you should update them as needed with `dep ensure`.\n\nUse `dep help` for instructions on vendoring a specific version of a dependency, or updating them.\n\nWhen updating or initializing, `dep` will find the latest version of a dependency that will compile.\n\nExamples:\n\nInitialize all dependencies:\n\n```sh\n$ dep init\n```\n\nUpdate all dependencies:\n\n```sh\n$ dep ensure -update -v\n```\n\nAdd a single dependency (latest version):\n\n```sh\n$ dep ensure github.com/foo/bar\n```\n\nAdd a single dependency (more specific version), or downgrade an existing dependency:\n\n```sh\n$ dep ensure github.com/foo/bar@tag\n```\n\n### Configuration Modes\nThere are 4 configuration modes in which you can run a skycoin node:\n- Development Desktop Daemon\n- Server Daemon\n- Electron Desktop Client\n- Standalone Desktop Client\n\n#### Development Desktop Client Mode\nThis mode is configured via `run-client.sh`\n```bash\n$ ./run-client.sh\n```\n\n#### Server Daemon Mode\nThe default settings for a skycoin node are chosen for `Server Daemon`, which is typically run from source.\nThis mode is usually preferred to be run with security options, though `-disable-csrf` is normal for server daemon mode, it is left enabled by default.\n\n```bash\n$ ./run-daemon.sh\n```\n\nTo disable CSRF:\n\n```bash\n$ ./run-daemon.sh -disable-csrf\n```\n\n#### Electron Desktop Client Mode\nThis mode configures itself via electron-main.js\n\n#### Standalone Desktop Client Mode\nThis mode is configured by compiling with `STANDALONE_CLIENT` build tag.\nThe configuration is handled in `cmd/skycoin/skycoin.go`\n\n### Wallet GUI Development\n\nThe compiled wallet source should be checked in to the repo, so that others do not need to install node to run the software.\n\nInstructions for doing this:\n\n[Wallet GUI Development README](src/gui/static/README.md)\n\n#### Translations\n\nYou can find information about how to work with translation files in the [Translations README](./src/gui/static/src/assets/i18n/README.md).\n\n### Releases\n\n#### Update the version\n\n0. If the `master` branch has commits that are not in `develop` (e.g. due to a hotfix applied to `master`), merge `master` into `develop`\n0. Make sure the translations are up to date. See the [i18n README](./src/gui/static/src/assets/i18n/README.md) for instructions on how to update translations and how to check if they are up to date.\n0. Compile the `src/gui/static/dist/` to make sure that it is up to date (see [Wallet GUI Development README](src/gui/static/README.md))\n0. Update version strings to the new version in the following files: `electron/package-lock.json`, `electron/package.json`, `electron/skycoin/current-skycoin.json`, `src/cli/cli.go`, `src/gui/static/src/current-skycoin.json`, `src/cli/integration/testdata/status*.golden`, `template/coin.template`, `README.md` files .\n0. If changes require a new database verification on the next upgrade, update `src/skycoin/skycoin.go`\'s `DBVerifyCheckpointVersion` value\n0. Update `CHANGELOG.md`: move the "unreleased" changes to the version and add the date\n0. Update the files in https://github.com/skycoin/repo-info by following the [metadata update procedure](https://github.com/skycoin/repo-info/#updating-skycoin-repository-metadate),\n0. Merge these changes to `develop`\n0. Follow the steps in [pre-release testing](#pre-release-testing)\n0. Make a PR merging `develop` into `master`\n0. Review the PR and merge it\n0. Tag the `master` branch with the version number. Version tags start with `v`, e.g. `v0.20.0`.\n    Sign the tag. If you have your GPG key in github, creating a release on the Github website will automatically tag the release.\n    It can be tagged from the command line with `git tag -as v0.20.0 $COMMIT_ID`, but Github will not recognize it as a "release".\n0. Make sure that the client runs properly from the `master` branch\n0. Release builds are created and uploaded by travis. To do it manually, checkout the `master` branch and follow the [create release builds](electron/README.md) instructions.\n\nIf there are problems discovered after merging to `master`, start over, and increment the 3rd version number.\nFor example, `v0.20.0` becomes `v0.20.1`, for minor fixes.\n\n#### Pre-release testing\n\nPerforms these actions before releasing:\n\n* `make check`\n* `make integration-test-live`\n* `make integration-test-live-disable-networking` (requires node run with `-disable-networking`)\n* `make integration-test-live-disable-csrf` (requires node run with `-disable-csrf`)\n* `make intergration-test-live-wallet` (see [live integration tests](#live-integration-tests)) 6 times: with an unencrypted and encrypted wallet for each wallet type: `deterministic`, `bip44` and `collection`\n* `go run cmd/cli/cli.go checkdb` against a fully synced database\n* `go run cmd/cli/cli.go checkDBDecoding` against a fully synced database\n* On all OSes, make sure that the client runs properly from the command line (`./run-client.sh` and `./run-daemon.sh`)\n* Build the releases and make sure that the Electron client runs properly on Windows, Linux and macOS.\n    * Use a clean data directory with no wallets or database to sync from scratch and verify the wallet setup wizard.\n    * Load a test wallet with nonzero balance from seed to confirm wallet loading works\n    * Send coins to another wallet to confirm spending works\n    * Restart the client, confirm that it reloads properly\n* For both the Android and iOS mobile wallets, configure the node url to be https://staging.node.skycoin.net\n  and test all operations to ensure it will work with the new node version.\n\n#### Creating release builds\n\n[Create Release builds](electron/README.md).\n\n#### Release signing\n\nReleases are signed with this PGP key:\n\n`0x5801631BD27C7874`\n\nThe fingerprint for this key is:\n\n```\npub   ed25519 2017-09-01 [SC] [expires: 2023-03-18]\n      10A7 22B7 6F2F FE7B D238  0222 5801 631B D27C 7874\nuid                      GZ-C SKYCOIN <token@protonmail.com>\nsub   cv25519 2017-09-01 [E] [expires: 2023-03-18]\n```\n\nKeybase.io account: https://keybase.io/gzc\n\nFollow the [Tor Project\'s instructions for verifying signatures](https://www.torproject.org/docs/verifying-signatures.html.en).\n\nIf you can\'t or don\'t want to import the keys from a keyserver, the signing key is available in the repo: [gz-c.asc](gz-c.asc).\n\nReleases and their signatures can be found on the [releases page](https://github.com/skycoin/skycoin/releases).\n\nInstructions for generating a PGP key, publishing it, signing the tags and binaries:\nhttps://gist.github.com/gz-c/de3f9c43343b2f1a27c640fe529b067c\n\n## Responsible Disclosure\n\nSecurity flaws in skycoin source or infrastructure can be sent to security@skycoin.net.\nBounties are available for accepted critical bug reports.\n\nPGP Key for signing:\n\n```\n-----BEGIN PGP PUBLIC KEY BLOCK-----\n\nmDMEWaj46RYJKwYBBAHaRw8BAQdApB44Kgde4Kiax3M9Ta+QbzKQQPoUHYP51fhN\n1XTSbRi0I0daLUMgU0tZQ09JTiA8dG9rZW5AcHJvdG9ubWFpbC5jb20+iJYEExYK\nAD4CGwMFCwkIBwIGFQgJCgsCBBYCAwECHgECF4AWIQQQpyK3by/+e9I4AiJYAWMb\n0nx4dAUCWq/TNwUJCmzbzgAKCRBYAWMb0nx4dKzqAP4tKJIk1vV2bO60nYdEuFB8\nFAgb5ITlkj9PyoXcunETVAEAhigo4miyE/nmE9JT3Q/ZAB40YXS6w3hWSl3YOF1P\nVQq4OARZqPjpEgorBgEEAZdVAQUBAQdAa8NkEMxo0dr2x9PlNjTZ6/gGwhaf5OEG\nt2sLnPtYxlcDAQgHiH4EGBYKACYCGwwWIQQQpyK3by/+e9I4AiJYAWMb0nx4dAUC\nWq/TTQUJCmzb5AAKCRBYAWMb0nx4dFPAAQD7otGsKbV70UopH+Xdq0CDTzWRbaGw\nFAoZLIZRcFv8zwD/Z3i9NjKJ8+LS5oc8rn8yNx8xRS+8iXKQq55bDmz7Igw=\n=5fwW\n-----END PGP PUBLIC KEY BLOCK-----\n```\n\nKey ID: [0x5801631BD27C7874](https://pgp.mit.edu/pks/lookup?search=0x5801631BD27C7874&op=index)\n\nThe fingerprint for this key is:\n\n```\npub   ed25519 2017-09-01 [SC] [expires: 2023-03-18]\n      10A7 22B7 6F2F FE7B D238  0222 5801 631B D27C 7874\nuid                      GZ-C SKYCOIN <token@protonmail.com>\nsub   cv25519 2017-09-01 [E] [expires: 2023-03-18]\n```\n\nKeybase.io account: https://keybase.io/gzc\n'