b'# coincoin\n\n[![Build Status](https://travis-ci.org/robinmonjo/coincoin.svg?branch=master)](https://travis-ci.org/robinmonjo/blockchain)\n\n<img align="right" src="logo.png" width="128px">\n\n`coincoin` is a cryptocurrency proof-of-concept implemented in Elixir. It\'s an umbrella project that focuses on the 2 main components of (most of) the existing cryptocurrencies: the **blockchain** and **digital transactions**.\n\nIt\'s goal is to be **as simple as possible** but complete enough to technically understand what\'s going on behind Bitcoin or Ethereum for example.\n\n## Setup\n\nBlockchains are P2P softwares. To start using `coincoin`, we need to setup multiple nodes and connect them together.\n\nYou need [Elixir](https://elixir-lang.org/install.html) installed. Clone this repository and go to the root of the project.\n\nThen pull the dependencies using `mix deps.get`\n\nTo setup a 3 nodes blockchain, spawn 3 tabs in your terminal (node1, node2 and node3) and run:\n\n- node1: `iex -S mix phx.server` (defaults: `PORT=4000 P2P_PORT=5000`)\n- node2: `PORT=4001 P2P_PORT=5001 iex -S mix phx.server`\n- node3: `PORT=4002 P2P_PORT=5002 iex -S mix phx.server`\n\nThen connect the nodes to create a P2P network:\n\n```elixir\n$node2> Blockchain.connect("localhost:5000") # connect node2 to node1\n\n$node3> Blockchain.connect("localhost:5001") # connect node3 to node2\n```\n\nThis will setup a simple network:\n\n```\nnode1 <--> node2 <--> node3\n```\n\nYou can also use the `robinmonjo/coincoin` docker image available on the [docker hub](https://hub.docker.com/r/robinmonjo/coincoin/):\n\n```bash\ndocker run -it robinmonjo/coincoin\n```\n\nIf you use Docker, in the `Blockchain.connect/1` call make sure to pass your container IP address and that this address is reachable.\n\n**Notes:**\n\n- if you don\'t want to interact with the REST API, you can skip the `PORT` env var and use `iex -S mix` instead of `iex -S mix phx.server`\n- `Blockchain.connect(5000)` is equivalent to `Blockchain.connect("localhost:5000")`\n- for releases use `make release`\n\n## Usage\n\nWhen started, `coincoin` will start 3 apps:\n\n- [`blockchain`](apps/blockchain/README.md): a minimal blockchain\n- [`token`](apps/token/README.md): a minimal cryptocurrency implemented on top of the blockchain\n- [`blockchain_web`](apps/blockchain_web/README.md): a web interface to manage nodes of the blockchain\n\nTo manipulate the blockchain and store random data in it using the `iex` console checkout the [`blockchain` app](apps/blockchain/README.md). To do the same using a REST API, checkout the [`blockchain_web` app](apps/blockchain_web/README.md). And finally to play with a cryptocurrency and use the blockchain as a distributed ledger, checkout the [`token` app](apps/token/README.md).\n\n## Why coincoin ?\n\nLately I heard a lot about:\n\n1. how Elixir is awesome and is the future of complex system / web development\n2. how blockchain technology will be the next big thing\n\nSo what about building a cryptocurrency proof-of-concept in Elixir ?\n\nAs I\'m sure about **1**, I still have some doubts about **2** eventough technologies behind cryptocurrencies are exciting.\n\n> Also "coin-coin" in french is the noise of a duck (hence Scrooge McDuck)\n\n## Final words\n\nIssues, suggestions and pull requests are very welcome \xf0\x9f\x98\x8a\n'