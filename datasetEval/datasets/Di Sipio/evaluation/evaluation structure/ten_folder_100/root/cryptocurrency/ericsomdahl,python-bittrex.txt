b'python-bittrex  \n==============\n\n[![Build Status](https://travis-ci.org/ericsomdahl/python-bittrex.svg?branch=master)](https://travis-ci.org/ericsomdahl/python-bittrex)\n[![PyPI version](https://badge.fury.io/py/python-bittrex.svg)](https://badge.fury.io/py/python-bittrex)\n\nPython bindings for bittrex.  I am Not associated -- use at your own risk, etc.\n\n\nInstallation\n-------------\n\n### for most recent stable release\n`pip install python-bittrex`\n\n### for bleeding edge development \n`pip install git+https://github.com/ericsomdahl/python-bittrex.git`\n\nAPI Documentation\n-------------\n**API 1.1 is considered stable**\n\n[Official API Documentation](https://bittrex.com/Home/Api)\n\n**API 2.0 is BETA, use at your own risk**\n\n[Unofficial 2.0 API Documentation](https://github.com/thebotguys/golang-bittrex-api/wiki/Bittrex-API-Reference-(Unofficial)) - The golang guys have been diligently following the rapid changes to the 2.0 Beta, but use at your own risk.\n\n\nExample Usage for Bittrex API\n-------------\n\n```python\nfrom bittrex.bittrex import Bittrex, API_V2_0\n\nmy_bittrex = Bittrex(None, None, api_version=API_V2_0)  # or defaulting to v1.1 as Bittrex(None, None)\nmy_bittrex.get_markets()\n```\n\nThis call to get_markets returns an object such as the following:\n\n```python\n{\'success\': True, \'message\': \'\', \'result\': [{\'MarketCurrency\': \'LTC\', ...\n```\n\nAPI_V2_0 and API_V1_1 are constants that can be imported from Bittrex.\n\nTo access account methods, an API key for your account is required and can be \ngenerated on the `Settings` then `API Keys` page. \nMake sure you save the secret, as it will not be visible \nafter navigating away from the page. \n\n```python\nfrom bittrex.bittrex import *\n\nmy_bittrex = Bittrex("<my_api_key>", "<my_api_secret>", api_version="<API_V1_1> or <API_V2_0>")\n\nmy_bittrex.get_balance(\'ETH\')\n\n```\n\nThis call to get_balance returns an object such as the following:\n\n```python\n{\'success\': True, \n \'message\': \'\',\n \'result\': {\'Currency\': \'ETH\', \'Balance\': 0.0, \'Available\': 0.0, \n            \'Pending\': 0.0, \'CryptoAddress\': None}\n}\n```\n\nv1.1 constants of interest:\n---\n```\nBUY_ORDERBOOK = \'buy\'\nSELL_ORDERBOOK = \'sell\'\nBOTH_ORDERBOOK = \'both\'\n```\n\nv2.0 constants of interest\n---\nThese are used by get_candles()\n```\nTICKINTERVAL_ONEMIN = \'oneMin\'\nTICKINTERVAL_FIVEMIN = \'fiveMin\'\nTICKINTERVAL_HOUR = \'hour\'\nTICKINTERVAL_THIRTYMIN = \'thirtyMin\'\nTICKINTERVAL_DAY = \'Day\'\n```\nthese are used by trade_sell() and trade_buy()\n```\nORDERTYPE_LIMIT = \'LIMIT\'\nORDERTYPE_MARKET = \'MARKET\'\n\nTIMEINEFFECT_GOOD_TIL_CANCELLED = \'GOOD_TIL_CANCELLED\'\nTIMEINEFFECT_IMMEDIATE_OR_CANCEL = \'IMMEDIATE_OR_CANCEL\'\nTIMEINEFFECT_FILL_OR_KILL = \'FILL_OR_KILL\'\n\nCONDITIONTYPE_NONE = \'NONE\'\nCONDITIONTYPE_GREATER_THAN = \'GREATER_THAN\'\nCONDITIONTYPE_LESS_THAN = \'LESS_THAN\'\nCONDITIONTYPE_STOP_LOSS_FIXED = \'STOP_LOSS_FIXED\'\nCONDITIONTYPE_STOP_LOSS_PERCENTAGE = \'STOP_LOSS_PERCENTAGE\'\n```\n\nTesting\n-------\n\n\nIn order to run the integration tests, a file called "secrets.json" must be added to the test folder.\nStructure it as follows, adding your API keys:\n\n```json\n{\n  "key": "mykey",\n  "secret": "mysecret"\n}\n```\n'