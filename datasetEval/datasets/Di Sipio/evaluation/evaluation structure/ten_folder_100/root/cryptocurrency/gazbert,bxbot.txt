b'# BX-bot\n\n[![Build Status](https://travis-ci.org/gazbert/bxbot.svg?branch=master)](https://travis-ci.org/gazbert/bxbot)\n[![Sonarcloud Status](https://sonarcloud.io/api/project_badges/measure?project=gazbert_bxbot&metric=alert_status)](https://sonarcloud.io/dashboard?id=gazbert_bxbot)\n[![Join the chat at https://gitter.im/BX-bot/Lobby](https://badges.gitter.im/BX-bot/Lobby.svg)](https://gitter.im/BX-bot/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\t\t \t \n \n## What is BX-bot?\n\n<img src="./docs/bxbot-cropped.png" align="right" width="25%" />\n\nBX-bot (_Bex_) is a simple [Bitcoin](https://bitcoin.org) trading bot written in Java for trading on cryptocurrency \n[exchanges](https://bitcoin.org/en/exchanges).\n\nThe project contains the basic infrastructure to trade on a [cryptocurrency](http://coinmarketcap.com/) exchange...\nexcept for the trading strategies - you\'ll need to write those yourself! A simple \n[example](./bxbot-strategies/src/main/java/com/gazbert/bxbot/strategies/ExampleScalpingStrategy.java) of a \n[scalping](http://www.investopedia.com/articles/trading/02/081902.asp) strategy is included to get you started with the\nTrading API - take a look [here](https://github.com/ta4j/ta4j) for more ideas.\n\nExchange Adapters for using [Bitstamp](https://www.bitstamp.net), [Bitfinex](https://www.bitfinex.com),\n[OKCoin](https://www.okcoin.com/), [itBit](https://www.itbit.com/),\n[Kraken](https://www.kraken.com), and [Gemini](https://gemini.com/) are included.\nFeel free to improve these or contribute new adapters to the project; that would be \n[shiny!](https://en.wikipedia.org/wiki/Firefly_(TV_series))\n\nThe Trading API provides support for [limit orders](http://www.investopedia.com/terms/l/limitorder.asp)\ntraded at the [spot price](http://www.investopedia.com/terms/s/spotprice.asp).\n \n**Warning:** Trading Bitcoin carries significant financial risk; you could lose money. This software is provided \'as is\'\nand released under the [MIT license](http://opensource.org/licenses/MIT).\n\n## Architecture\n![bxbot-core-architecture.png](./docs/bxbot-core-architecture.png)\n\n- **Trading Engine** - the execution unit. It provides a framework for integrating Exchange Adapters and executing \n                       Trading Strategies.\n- **Exchange Adapters** - the data stream unit. They provide access to a given exchange.\n- **Trading Strategies** - the decision or strategy unit. This is where the trading decisions happen.\n- **Trading API** - Trading Strategies use this API to make trades. Exchange Adapters implement this to provide access\n  to a given exchange.\n- **Strategy API** - Trading Strategies implement this so the Trading Engine can execute them.\n \nTrading Strategies and Exchange Adapters are injected by the Trading Engine on startup. The bot uses a simple \n[YAML](https://en.wikipedia.org/wiki/YAML) backed dependency injection framework to achieve this; the long term goal is\nto convert it into a fully configurable [Spring Boot](http://projects.spring.io/spring-boot/) app.\n\nThe bot was designed to fail hard and fast if any unexpected errors occur in the Exchange Adapters or Trading Strategies:\nit will log the error, send an email alert (if configured), and then shut down.\n\n## Installation Guide\n  \nThe bot runs on Linux, macOS, and Windows.\n\nBX-bot requires a Java 11 JDK ([openjdk-11-jdk](http://openjdk.java.net/projects/jdk/11/) or \n[Oracle JDK 11](https://www.oracle.com/technetwork/java/javase/downloads/jdk11-downloads-5066655.html))\nto be installed on the machine you are going to use to build and run the bot. \n\nYou can use [Maven](https://maven.apache.org) or [Gradle](https://gradle.org/) to build the bot.\nThe instructions below are for Linux/macOS, but equivalent Windows scripts are included.\n\nDownload the latest [Release](https://github.com/gazbert/bxbot/releases) and unzip the bot.\n\n#### Maven\n1. If you plan on using your own Trading Strategies/Exchange Adapters packaged in separate jar files, you\'ll need to add\n   the dependency in the [bxbot-app/pom.xml](./bxbot-app/pom.xml) - see the commented out dependency examples inside it.\n1. From the project root, run `./mvnw clean assembly:assembly` to produce the distribution \n   artifacts `bxbot-app-<version>-dist.tar.gz` and `bxbot-app-<version>-dist.zip` in the `./target` folder.\n1. Copy either the `bxbot-app-<version>-dist.tar.gz` or the `bxbot-app-<version>-dist.zip` onto the machine you \n   want to run the bot and unzip it someplace.\n1. Configure the bot as required - see the main _[Configuration](#configuration)_ section.\n   The bot\'s default configuration uses the \n   [`ExampleScalpingStrategy`](./bxbot-strategies/src/main/java/com/gazbert/bxbot/strategies/ExampleScalpingStrategy.java), \n   but you\'ll probably want to [code your own](#how-do-i-write-my-own-trading-strategy)! The \n   [`TestExchangeAdapter`](./bxbot-exchanges/src/main/java/com/gazbert/bxbot/exchanges/TestExchangeAdapter.java) is\n   configured by default - it makes public API calls to [Bitstamp](https://www.bitstamp.net), but stubs out the private\n   API (order management) calls; it\'s good for testing your initial setup without actually sending orders to the\n   exchange.   \n1. Usage: `./bxbot.sh [start|stop|status]`   \n    \n#### Gradle    \n1. If you plan on using your own Trading Strategies/Exchange Adapters packaged in separate jar files, you\'ll need to add\n   the dependency in the [bxbot-app/build.gradle](bxbot-app/build.gradle) - see the commented out dependency examples \n   inside it.\n1. From the project root, run `./gradlew clean build` to build the bot.   \n1. Then run `./gradlew buildTarGzipDist` or `./gradlew buildZipDist` to build the distribution \n   artifact: either `bxbot-app-<version>.tar.gz` or `bxbot-app-<version>.zip` respectively. \n   It will be placed in the `./build/distributions` folder.\n1. Copy the artifact onto the machine you want to run the bot and unzip it someplace.\n1. Configure the bot as described in step 4 of the previous [Maven](#maven) section.\n1. Usage: `./bxbot.sh [start|stop|status]`\n\n### Docker\nIf you want to just play around with the \n[`ExampleScalpingStrategy`](./bxbot-strategies/src/main/java/com/gazbert/bxbot/strategies/ExampleScalpingStrategy.java) \nand evaluate the bot, Docker is the way to go.\n\n1. Install [Docker](https://docs.docker.com/engine/installation/) on the machine you want to run the bot.\n1. Fetch the BX-bot image from [Docker Hub](https://hub.docker.com/r/gazbert/bxbot/): `docker pull gazbert/bxbot:x.x.x` -\n   replace `x.x.x` with the [Release](https://github.com/gazbert/bxbot/releases) version of the bot you want to run, e.g.\n   `docker pull gazbert/bxbot:0.12.1`\n1. Run the Docker container: `docker container run --name bxbot-x.x.x -it gazbert/bxbot:x.x.x bash`\n1. Change into the bot\'s directory: `cd bxbot*`\n1. Configure the bot as described in step 4 of the previous [Maven](#maven) section.\n1. Usage: `./bxbot.sh [start|stop|status]`\n1. You can detach from the container and leave the bot running using the `CTRL-p` `CTRL-q` key sequence.\n1. To re-attach to the Docker container, run `docker container ls` to get the CONTAINER ID. \n   Then run: `docker container attach <CONTAINER ID>`   \n   \n## Build Guide\nIf you plan on developing the bot, you\'ll need [openjdk-11-jdk](http://openjdk.java.net/projects/jdk/11/) or \n[Oracle JDK 11](https://www.oracle.com/technetwork/java/javase/downloads/jdk11-downloads-5066655.html) installed on your\n dev box.\n\nYou can use [Maven](https://maven.apache.org) or [Gradle](https://gradle.org/) to build the bot and pull down the \ndependencies. BX-bot depends on [Spring Boot](http://projects.spring.io/spring-boot/), \n[log4j](http://logging.apache.org/log4j), [JavaMail](https://java.net/projects/javamail/pages/Home), \n[Google Gson](https://code.google.com/p/google-gson/), [Google Guava](https://github.com/google/guava), and \n[Snake YAML](https://bitbucket.org/asomov/snakeyaml).\n\nThe instructions below are for Linux/macOS, but equivalent Windows scripts are included.\n\nClone the repo locally (master branch).\n\n### Maven\n1. From the project root, run `./mvnw clean install`.\n   If you want to run the exchange integration tests, use `./mvnw clean install -Pint`. \n   To execute both unit and integration tests, use `./mvnw clean install -Pall`.\n1. Take a look at the Javadoc in the `./target/apidocs` folders of the bxbot-trading-api, bxbot-strategy-api, \n   and bxbot-exchange-api modules after the build completes.\n   \n### Gradle\n1. From the project root, run `./gradlew build`.\n   If you want to run the exchange integration tests, use `./gradlew integrationTests`.\n   To execute both unit and integration tests, use `./gradlew build integrationTests`.\n1. To generate the Javadoc, run `./gradlew javadoc` and look in the `./build/docs/javadoc` folders of the \n   bxbot-trading-api, bxbot-strategy-api, and bxbot-exchange-api modules.\n   \n## Issue & Change Management\nIssues and new features are managed using the project [Issue Tracker](https://github.com/gazbert/bxbot/issues) -\nsubmit bugs here.\n \nYou are welcome to take on new features or fix bugs! See [here](CONTRIBUTING.md) for how to get involved. \n\nFor help and general questions about BX-bot, check out the [Gitter](https://gitter.im/BX-bot/Lobby) channel.\n\n## Testing\nThe bot has undergone basic unit testing on a _best-effort_ basis. \n\nThere is a continuous integration build running on [Travis CI](https://travis-ci.org/gazbert/bxbot).\n\nThe latest stable build can always be found on the [Releases](https://github.com/gazbert/bxbot/releases) page. \nThe SNAPSHOT builds on master are active development builds, but the tests should always pass and the bot should always \nbe deployable.\n\n## User Guide\n### Configuration\nThe bot provides a simple plugin framework for:\n\n* Exchanges to integrate with.\n* Markets to trade on.\n* Trading Strategies to execute.\n\nIt uses [YAML](https://en.wikipedia.org/wiki/YAML) configuration files. These live in the [`config`](./config) folder.\nAny config changes require a restart of the bot to take effect.\n\nSample configurations for running on different exchanges can be found in the \n[`config/samples`](./config/samples)folder.\n\n##### Engine\nThe [`engine.yaml`](./config/engine.yaml) file is used to configure the Trading Engine.\n\n```yaml\nengine:\n  botId: my-bitstamp-bot_1\n  botName: Bitstamp Bot\n  emergencyStopCurrency: BTC\n  emergencyStopBalance: 1.0\n  tradeCycleInterval: 20\n```\n\nAll fields are mandatory.\n\n* The `botId` value is a unique identifier for the bot. Value must be an alphanumeric string. \n  Underscores and dashes are also permitted.\n\n* The `botName` is a friendly name for the bot. Value must be an alphanumeric string. Spaces are allowed.\n      \n* The `emergencyStopCurrency` value must be set to prevent catastrophic loss on the exchange. \n  This is normally the currency you intend to hold a long position in. It should be set to the currency short code for \n  the wallet, e.g. BTC, LTC, USD. This value can be case sensitive for some exchanges - check the Exchange Adapter\n  documentation.\n\n* The `emergencyStopBalance` value must be set to prevent catastrophic loss on the exchange. \n  The Trading Engine checks this value at the start of every trade cycle: if your `emergencyStopCurrency` wallet\n  balance on the exchange drops below this value, the Trading Engine will log it, send an Email Alert (if configured)\n  and then shut down. If you set this value to 0, the bot will bypass the check - be careful.\n\n* The `tradeCycleInterval` value is the interval in _seconds_ that the Trading Engine will wait/sleep before executing\n  each trade cycle. The minimum value is 1 second. Some exchanges allow you to hit them harder than others. However, \n  while their API documentation might say one thing, the reality is you might get socket timeouts and 5xx responses if \n  you hit it too hard. You\'ll need to experiment with the trade cycle interval for different exchanges.\n\n##### Exchange Adapters\nYou specify the Exchange Adapter you want BX-bot to use in the \n[`exchange.yaml`](./config/exchange.yaml) file. \n\nBX-bot supports 1 exchange per bot. \nThis keeps things simple and helps minimise risk: problems on one exchange should not impact trading on another.\n\n```yaml\nexchange:\n  name: Bitstamp\n  adapter: com.gazbert.bxbot.exchanges.BitstampExchangeAdapter\n  \n  authenticationConfig:\n    clientId: your-client-id\n    key: your-api-key\n    secret: your-secret-key\n           \n  networkConfig:\n    connectionTimeout: 15\n    nonFatalErrorCodes: [502, 503, 520, 522, 525]            \n    nonFatalErrorMessages:\n      - Connection reset\n      - Connection refused\n      - Remote host closed connection during handshake\n      - Unexpected end of file from server\n      \n  otherConfig:\n    not-needed-on-bitstamp-1: here for illustration purposes only\n    not-needed-on-bitstamp-2: here for illustration purposes again\n```\n\nAll fields are mandatory unless stated otherwise.\n\n* The `name` value is a friendly name for the Exchange. It is used in log statements to display the Exchange\'s name.\n  Value must be an alphanumeric string. Spaces are allowed.\n\n* For the `adapter` value, you must specify the fully qualified name of the Exchange Adapter class for the Trading\n  Engine to inject on startup. The class must be on the runtime classpath. See the \n  _[How do I write my own Exchange Adapter?](#how-do-i-write-my-own-exchange-adapter)_ section for more details.\n\n* The `authenticationConfig` section is used by the inbuilt Exchange Adapters to configure their exchange trading\n  API credentials - see the sample `exchange.yaml` config files for details.\n\n* The `networkConfig` section is optional. It is used by the inbuilt Exchange Adapters to set their network\n  configuration as detailed below:\n\n    * The `connectionTimeout` field is optional. This is the timeout value that the exchange adapter will wait on socket\n      connect/socket read when communicating with the exchange. Once this threshold has been breached,\n      the exchange adapter will give up and throw an\n      [`ExchangeNetworkException`](./bxbot-trading-api/src/main/java/com/gazbert/bxbot/trading/api/ExchangeNetworkException.java).\n      The sample Exchange Adapters are single threaded: if a request gets blocked, it will block all subsequent\n      requests from getting to the exchange. This timeout value prevents an indefinite block. If not set, it defaults \n      to 30 seconds.\n\n    * The `nonFatalErrorCodes` field is optional. It contains a list of HTTP status codes that will trigger the\n      adapter to throw a non-fatal `ExchangeNetworkException`. This allows the bot to recover from temporary network\n      issues. See the sample `exchange.yaml` config files for status codes to use.\n\n    * The `nonFatalErrorMessages` field is optional. It contains a list of `java.io` Exception message content that will\n      trigger the adapter to throw a non-fatal `ExchangeNetworkException`. This allows the bot to recover from\n      temporary network issues. See the sample `exchange.yaml` config files for messages to use.\n\n* The `otherConfig` section is optional. It is not needed for Bitstamp, but shown above for illustration purposes.\n  If present, at least 1 item must be set - these are repeating key/value String pairs.\n  This section is used by the inbuilt Exchange Adapters to set any additional config, e.g. buy/sell fees.\n\n##### Markets\nYou specify which markets you want to trade on in the \n[`markets.yaml`](./config/markets.yaml) file.\n\n```yaml\n  markets:            \n    - id: btcusd    \n      name: BTC/USD        \n      baseCurrency: BTC\n      counterCurrency: USD\n      enabled: true\n      tradingStrategyId: scalping-strategy\n  \n    - id: ltcusd\n      name: LTC/BTC\n      baseCurrency: LTC\n      counterCurrency: BTC\n      enabled: false\n      tradingStrategyId: scalping-strategy\n```\n\nAll fields are mandatory unless stated otherwise.\n\n* The `id` value is the market id as defined on the exchange. E.g. the BTC/USD market id is `btcusd` on \n  [Bitstamp](https://www.bitstamp.net/api/) - see `currency_pair` values.\n\n* The `name` value is a friendly name for the market. The is used in the logs to display the market\'s name.\n  Value must be an alphanumeric string.\n\n* The `baseCurrency` value is the currency short code for the base currency in the currency pair. When you buy or \n  sell a currency pair, you are performing that action on the base currency. The base currency is the commodity you \n  are buying or selling. E.g. in a BTC/USD market, the first currency (BTC) is the base currency and the second\n  currency (USD) is the counter currency.\n\n* The `counterCurrency` value is the currency short code for the counter currency in the currency pair. This is also\n  known as the _quote_ currency.\n\n* The `enabled` value allows you to toggle trading on the market. Remember, config changes are only applied on startup.\n\n* The `tradingStrategyId` value _must_ match a strategy `id` defined in your `strategies.yaml` config.\n  Currently, BX-bot only supports 1 `strategy` per `market`.\n\n##### Strategies #####\nYou specify the Trading Strategies you wish to use in the \n[`strategies.yaml`](./config/strategies.yaml) file.\n\n```yaml\nstrategies:\n  - id: scalping-strategy\n    name: Basic Scalping Strat\n    description: >\n      A simple scalper that buys at the current BID price, holds until current market price has \n      reached a configurable minimum percentage gain, then sells at current ASK price, thereby\n      taking profit from the spread.       \n    # This strategy is injected using the bot\'s custom injection framework using its className\n    className: com.gazbert.bxbot.strategies.ExampleScalpingStrategy\n    configItems:\n      counter-currency-buy-order-amount: 20                        \n      minimum-percentage-gain: 2\n            \n  - id: macd-strategy\n    name: MACD Based Strat\n    description: Strat uses MACD data to take long position in USD.    \n    # This strategy is injected using a Spring beanName\n    beanName: yourMacdStrategyBean\n    configItems:\n      counter-currency-buy-order-amount: 20      \n      shortEmaInterval: 12            \n      longEmaInterval: 26            \n```\n\nAll fields are mandatory unless stated otherwise.\n\n* The `id` value is a unique identifier for the strategy. The `markets.yaml` `tradingStrategyId` entries \n  cross-reference this. Value must be an alphanumeric string. Underscores and dashes are also permitted.\n\n* The `name` value is a friendly name for the strategy. The is used in the logs to display the strategy\'s name.\n  Value must be an alphanumeric string. Spaces are allowed.\n\n* The `description` value is optional.\n\nYou configure the loading of your strategy using either a `className` _or_ a `beanName`; you cannot specify both. \n\n* For the `className` value, you must specify the fully qualified name of your Strategy class for the Trading Engine\n  to load and execute. This will use the bot\'s custom injection framework. The class must be on the runtime classpath.\n  If you set this value to load your strategy, you cannot set the `beanName` value.\n  \n* For the `beanName` value, you must specify the Spring bean name of you Strategy component class for the Trading Engine\n  to load and execute. You will also need to annotate your strategy class with `@Component("yourMacdStrategyBean")` - \n  see the [example strategy](./bxbot-strategies/src/main/java/com/gazbert/bxbot/strategies/ExampleScalpingStrategy.java).\n  This results in Spring injecting the bean.\n  If you set this value to load your strategy, you cannot set the `className` value.        \n\n* The `configItems` section is optional. It allows you to set key/value pair config items. This config is passed\n  to your Trading Strategy when the bot starts up; see the \n  _[How do I write my own Trading Strategy?](#how-do-i-write-my-own-trading-strategy)_ section.\n\n##### Email Alerts\nYou specify the Email Alerts config in the \n[`email-alerts.yaml`](./config/email-alerts.yaml) file.\n\nThis config is used to send email alerts when the bot is forced to shut down due to an unexpected error occurring in the \nTrading Strategies or Exchange Adapters. The email is sent to the SMTP host using TLS.\n\n```yaml\nemailAlerts:\n  enabled: false\n  smtpConfig:\n    host: smtp.gmail.com\n    tlsPort: 587\n    accountUsername: your.account.username@gmail.com\n    accountPassword: your.account.password\n    fromAddress: from.addr@gmail.com\n    toAddress: to.addr@gmail.com\n```\n\nAll fields are mandatory unless stated otherwise.\n\n* If `enabled` is set to true, the bot will send email alerts to the `toAddress` if it needs to shut down due to a\n  critical error. \n\n* The `smtpConfig` config is optional and only required if `enabled` is set to true. \n  Sample SMTP config for using a Gmail account is shown above - all elements within `smtpConfig` are mandatory. \n\n### How do I write my own Trading Strategy?\n_"Battle not with monsters, lest ye become a monster, and if you gaze into the abyss, the abyss gazes also into you."_ -\nFriedrich Nietzsche\n\nThe best place to start is with the\n[`ExampleScalpingStrategy`](./bxbot-strategies/src/main/java/com/gazbert/bxbot/strategies/ExampleScalpingStrategy.java) -\nmore ideas can be found in the excellent [ta4j](https://github.com/ta4j/ta4j) project.\nThere is also a Trading Strategy specific channel on [Gitter](https://gitter.im/BX-bot/trading-strategies).\n  \nYour strategy must implement the \n[`TradingStrategy`](./bxbot-strategy-api/src/main/java/com/gazbert/bxbot/strategy/api/TradingStrategy.java)\ninterface. This allows the Trading Engine to:\n\n* Inject your strategy on startup.\n* Pass any configuration (set in the `strategies.yaml`) to your strategy.\n* Invoke your strategy at each trade cycle.\n\nYou load your strategy using either `className` _or_ `beanName` in the `strategies.yaml` file - see the \n_[Strategies Configuration](#strategies)_ section for full details. The choice is yours, but `beanName` is the way to\ngo if you want to use other Spring features in your strategy, e.g. a \n[Repository](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Repository.html) \nto store your trade data.   \n\nThe Trading Engine will only send 1 thread through your Trading Strategy; you do not have to code for concurrency.\n\n##### Making Trades\nYou use the [`TradingApi`](./bxbot-trading-api/src/main/java/com/gazbert/bxbot/trading/api/TradingApi.java)\nto make trades etc. The API is passed to your Trading Strategy implementation `init` method when the bot starts up. \nSee the Javadoc for full details of the API.\n\n##### Error Handling\nYour Trading Strategy implementation should throw a \n[`StrategyException`](./bxbot-strategy-api/src/main/java/com/gazbert/bxbot/strategy/api/StrategyException.java)\nwhenever it \'breaks\'. BX-bot\'s error handling policy is designed to fail hard and fast; it will log the error, send an\nEmail Alert (if configured), and shut down.\n\nNote that the inbuilt Exchange Adapters will (some more often than others!) throw an\n[`ExchangeNetworkException`](./bxbot-trading-api/src/main/java/com/gazbert/bxbot/trading/api/ExchangeNetworkException.java)\nif they encounter network issues connecting with the exchange. Your strategy should always catch this exception and\nchoose what to do next, e.g. retry the previous Trading API call, or \'swallow\' the exception and wait until the Trading\nEngine invokes the strategy again at the next trade cycle.\n\n##### Configuration\nYou specify the Trading Strategies you wish to use in the `strategies.yaml` file - see the\n_[Strategies Configuration](#strategies)_ section for full details.\n\nThe `configItems` section in the `strategies.yaml` allows you to set key/value pair config items to pass to your\nTrading Strategy implementation. On startup, the Trading Engine will pass the config to your Trading Strategy\'s \n`init(TradingApi tradingApi, Market market, StrategyConfig config)` method. \n\n##### Dependencies\nYour Trading Strategy implementation has a compile-time dependency on the [Strategy API](./bxbot-strategy-api)\nand the [Trading API](./bxbot-trading-api).\n\nThe inbuilt\n[`ExampleScalpingStrategy`](./bxbot-strategies/src/main/java/com/gazbert/bxbot/strategies/ExampleScalpingStrategy.java)\nalso has a compile-time dependency on log4j and Google Guava.\n\n##### Packaging & Deployment #####\nTo get going fast, you can code your Trading Strategy and place it in the\n[bxbot-strategies](./bxbot-strategies/src/main/java/com/gazbert/bxbot/strategies)\nmodule alongside the example strategy. When you build the project, your Trading Strategy will be included in the\nBX-bot jar. You can also create your own jar for your strats, e.g. `my-strats.jar`, and include it on BX-bot\'s \nruntime classpath - see the _[Installation Guide](#the-manual-way)_ for how to do this.\n\n### How do I write my own Exchange Adapter?\n_"I was seldom able to see an opportunity until it had ceased to be one."_ - Mark Twain\n\nThe best place to start is with one of the inbuilt Exchange Adapters - see the latest \n[`BitstampExchangeAdapter`](./bxbot-exchanges/src/main/java/com/gazbert/bxbot/exchanges/BitstampExchangeAdapter.java)\nfor example. There is also an Exchange Adapter specific channel on [Gitter](https://gitter.im/BX-bot/exchange-adapters).\n\nYour adapter must implement the \n[`TradingApi`](./bxbot-trading-api/src/main/java/com/gazbert/bxbot/trading/api/TradingApi.java)\nand the [`ExchangeAdapter`](./bxbot-exchange-api/src/main/java/com/gazbert/bxbot/exchange/api/ExchangeAdapter.java)\ninterfaces. This allows the:\n            \n* Trading Engine to inject your adapter on startup.\n* Trading Engine to pass any configuration (set in the `exchange.yaml`) to your adapter.\n* Trading Strategies to invoke your adapter\'s implementation of the `TradingApi` at each trade cycle.\n\n[`AbstractExchangeAdapter`](./bxbot-exchanges/src/main/java/com/gazbert/bxbot/exchanges/AbstractExchangeAdapter.java)\nis a handy base class that all the inbuilt Exchange Adapters extend - it could be useful.\n\nThe Trading Engine will only send 1 thread through your Exchange Adapter; you do not have to code for concurrency.\n\n##### Error Handling\nYour Exchange Adapter implementation should throw a\n[`TradingApiException`](./bxbot-trading-api/src/main/java/com/gazbert/bxbot/trading/api/TradingApiException.java)\nwhenever it breaks; the Trading Strategies should catch this and decide how they want to proceed.\n\nThe Trading API provides an\n[`ExchangeNetworkException`](./bxbot-trading-api/src/main/java/com/gazbert/bxbot/trading/api/ExchangeNetworkException.java)\nfor adapters to throw when they cannot connect to the exchange to make Trading API calls. This allows for\nTrading Strategies to recover from temporary network failures. The `exchange.yaml` config file has an \noptional `networkConfig` section, which contains `nonFatalErrorCodes` and `nonFatalErrorMessages` elements - \nthese can be used to tell the adapter when to throw the exception.\n\nThe first release of the bot is _single-threaded_ for simplicity. The downside to this is that if an API call to the \nexchange gets blocked on IO, BX-bot will get stuck until your Exchange Adapter frees the block. The Trading API provides\nan `ExchangeNetworkException` for your adapter to throw if it times-out connecting to the exchange. It is your \nresponsibility to free up any blocked connections - see the \n[`AbstractExchangeAdapter`](./bxbot-exchanges/src/main/java/com/gazbert/bxbot/exchanges/AbstractExchangeAdapter.java)\nfor an example how to do this.\n\nThe Trading Engine will also call your adapter directly when performing the _Emergency Stop_ check to see if the \n`emergencyStopCurrency` wallet balance on the exchange drops below the configured `emergencyStopBalance` value.\nIf this call to the [`TradingApi`](./bxbot-trading-api/src/main/java/com/gazbert/bxbot/trading/api/TradingApi.java)\n`getBalanceInfo()` fails and is not due to a `ExchangeNetworkException`, the Trading Engine will log the error, send an \nEmail Alert (if configured), and shut down. If the API call failed due to an `ExchangeNetworkException`, the \nTrading Engine will log the error and sleep until the next trade cycle.\n\n##### Configuration\nYou provide your Exchange Adapter details in the `exchange.yaml` file - see the \n_[Exchange Adapters Configuration](#exchange-adapters)_ section for full details.\n\nThe `otherConfig` section in the `exchange.yaml` allows you to set key/value pair config items to pass to your\nExchange Adapter implementation. On startup, the Trading Engine will pass the config to your Exchange Adapter\'s \n`init(ExchangeConfig config)` method. \n\n##### Dependencies\nYour Exchange Adapter implementation has a compile-time dependency on the [Trading API](./bxbot-trading-api).\n\nThe inbuilt Exchange Adapters also have compile-time dependencies on log4j, Google Gson, and Google Guava.\n\n##### Packaging & Deployment\nTo get going fast, you can code your Exchange Adapter and place it in the \n[bxbot-exchanges](./bxbot-exchanges/src/main/java/com/gazbert/bxbot/exchanges) module alongside the other inbuilt\nadapters. When you build the project, your Exchange Adapter will be included in the BX-bot jar. You can also create \nyour own jar for your adapters, e.g. `my-adapters.jar`, and include it on BX-bot\'s runtime classpath -\nsee the _[Installation Guide](#the-manual-way)_ for how to do this.\n\n### Logging\nLogging for the bot is provided by [log4j](http://logging.apache.org/log4j). The log file is written to `logs/bxbot.log` \nusing a rolling policy. When a log file size reaches 100 MB or a new day is started, it is archived and a new log file \nis created. BX-bot will create up to 7 archives on the same day; these are stored in a directory based on the current \nyear and month. Only the last 90 archives are kept. Each archive is compressed using gzip. The logging level is set \nat `info`. You can change this default logging configuration in the [`config/log4j2.xml`](./config/log4j2.xml) file.\n\nWe recommend running at `info` level, as `debug` level logging will produce a *lot* of\noutput from the Exchange Adapters; it\'s very handy for debugging, but not so good for your disk space!\n \n## Coming Soon... (Definitely Maybe)\nThe following features are in the pipeline:\n\n- A REST API for administering the bot. It\'s being developed on the \n  [bxbot-restapi](https://github.com/gazbert/bxbot/tree/bxbot-restapi) branch.\n- A UI built with [React](https://reactjs.org/) - it will consume the REST API. \n  \nSee the [Project Board](https://github.com/gazbert/bxbot/projects/2) for timescales and progress.\n'