b'# Docjure\n\nDocjure makes reading and writing Office documents in Clojure easy.\n\n## Usage\n\n### Example: Read a Price List spreadsheet\n\n```clj\n(use \'dk.ative.docjure.spreadsheet)\n\n;; Load a spreadsheet and read the first two columns from the\n;; price list sheet:\n(->> (load-workbook "spreadsheet.xlsx")\n     (select-sheet "Price List")\n     (select-columns {:A :name, :B :price}))\n\n;=> [{:name "Foo Widget", :price 100}, {:name "Bar Widget", :price 200}]\n```\n\n### Example: Read a single cell\n\nIf you want to read a single cell value, you can use the `select-cell` function which\ntakes an Excel-style cell reference (A2) and returns the cell. In order to get the\nactual value, use `read-cell`\n\n```clj\n(use \'dk.ative.docjure.spreadsheet)\n(read-cell\n (->> (load-workbook "spreadsheet.xslx")\n      (select-sheet "Price List")\n      (select-cell "A1")))\n```\n\n### Example: Load a Workbook from a Resource\nThis example loads a workbook from a named file. In the case of running\nin the application server, the file typically resides in the resources directory,\nand it\'s not on the caller\'s path. To cover this scenario, we provide\nthe function \'load-workbook-from-resource\' that takes a named resource\nas the parameter. After a minor modification, the same example will look like:\n\n```clj\n(->> (load-workbook-from-resource "spreadsheet.xlsx")\n     (select-sheet "Price List")\n     (select-columns {:A :name, :B :price}))\n```\n\n### Example: Load a Workbook from a Stream\nThe function \'load-workbook\' is a multimethod, and the first example takes\na file name as a parameter. The overloaded version of \'load-workbook\'\ntakes an InputStream. This may be useful when uploading a workbook to the server\nover HTTP connection as multipart form data. In this case, the web framework\npasses a byte buffer, and the example should be modified as (note that you have\nto use \'with-open\' to ensure that the stream will be closed):\n\n```clj\n\n(with-open [stream (clojure.java.io/input-stream bytes)]\n  (->> (load-workbook stream)\n       (select-sheet "Price List")\n       (select-columns {:A :name, :B :price})))\n```\n\n### Example: Create a spreadsheet\nThis example creates a spreadsheet with a single sheet named "Price List".\nIt has three rows. We apply a style of yellow background colour and bold font\nto the top header row, then save the spreadsheet.\n\n```clj\n(use \'dk.ative.docjure.spreadsheet)\n\n;; Create a spreadsheet and save it\n(let [wb (create-workbook "Price List"\n                          [["Name" "Price"]\n                           ["Foo Widget" 100]\n                           ["Bar Widget" 200]])\n      sheet (select-sheet "Price List" wb)\n      header-row (first (row-seq sheet))]\n  (set-row-style! header-row (create-cell-style! wb {:background :yellow,\n                                                     :font {:bold true}}))\n  (save-workbook! "spreadsheet.xlsx" wb))\n```\n\n### Example: Create a workbook with multiple sheets\nThis example creates a spreadsheet with multiple sheets. Simply add more\nsheet-name and data pairs. To create a sheet with no data, pass `nil` as\nthe data argument.\n\n```clj\n(use \'dk.ative.docjure.spreadsheet)\n\n;; Create a spreadsheet and save it\n(let [wb (create-workbook "Squares"\n                          [["N" "N^2"]\n                           [1 1]\n                           [2 4]\n                           [3 9]]\n                          "Cubes"\n                          [["N" "N^3"]\n                           [1 1]\n                           [2 8]\n                           [3 27]])]\n   (save-workbook! "exponents.xlsx" wb)))\n```\n\n### Example: Use Excel Formulas in Clojure\n\nDocjure allows you not only to evaluate a formula cell in a speadsheet, it also\nprovides a way of exposing a formla in a cell as a Clojure function using the\n`cell-fn` function.\n\n    (use \'dk.ative.docjure.spreadsheet)\n    ;; Load a speadsheet and take the first sheet, construct a function from cell A2, taking\n    ;; A1 as input.\n    (def formula-from-a2 (cell-fn "A2"\n                                      (first (sheet-seq (load-workbook "spreadsheet.xslx")))\n                                      "A1"))\n\n    ;; Returns value of cell A2, as if value in cell A1 were 1.0\n    (formula-from-a2 1.0)\n\n### Example: Handling Error Cells\n\nIf the spreadsheet being read contains cells with errors the default\nbehaviour of the library is to return a keyword representing the\nerror as the cell value.\n\nFor example, given a spreadsheet with errors:\n\n```clj\n(use \'dk.ative.docjure.spreadsheet)\n\n(def sample-cells (->> (load-workbook "spreadsheet.xlsx")\n                       (sheet-seq)\n                       (mapcat cell-seq)))\n\nsample-cells\n\n;=> (#<XSSFCell 15.0> #<XSSFCell NA()> #<XSSFCell 35.0> #<XSSFCell 13/0> #<XSSFCell 33.0> #<XSSFCell 96.0>)\n```\n\nReading error cells, or cells that evaluate to an error (e.g. divide by\nzero) returns a keyword representing the type of error from\n`read-cell`.\n\n```clj\n(->> sample-cells\n     (map read-cell))\n\n;=> (15.0 :NA 35.0 :DIV0 33.0 96.0)\n```\n\nHow you handle errors will depend on your application. You may want to\nreplace specific errors with a default value and remove others for\nexample:\n\n```clj\n(->> sample-cells\n     (map read-cell)\n     (replace {:DIV0 0.0})\n     (remove keyword?))\n\n;=> (15.0 35.0 0.0 33.0 96.0)\n```\n\nThe following is a list of all possible [error values](https://poi.apache.org/apidocs/org/apache/poi/ss/usermodel/FormulaError.html#enum_constant_summary):\n\n```clj\n#{:VALUE :DIV0 :CIRCULAR_REF :REF :NUM :NULL :FUNCTION_NOT_IMPLEMENTED :NAME :NA}\n```\n\n### Example: Iterating over spreadsheet data\n\n#### A note on sparse data\n\nIt\'s worth understanding a bit about the underlying structure of a spreadsheet before you\nstart iterating over the contents.\n\nSpreadsheets are designed to be sparse - not all rows in the spreadsheet must physically exist,\nand not all cells in a row must physically exist.  This is how you can create data at ZZ:65535 without\nusing huge amounts of storage.\n\nThus each cell can be in 3 states - with data, blank, or nonexistent (null).  There\'s a special type [CellType.BLANK](https://poi.apache.org/apidocs/org/apache/poi/ss/usermodel/CellType.html#BLANK) for blank cells, but missing cells are just returned as nil.\n\nSimilarly rows can exist with cells, or exist but be empty, or they can not exist at all.\n\nPrior to Docjure 1.11 the iteration functions wrapped the underlying Apache POI iterators, which skipped over missing data - this could cause surprising behaviour, especially when there were missing cells inside tabular data.\n\nSince Docjure 1.11 iteration now returns `nil` values for missing rows and cells - this is a *breaking change* - any code that calls `row-seq` or `cell-seq` now needs to deal with possible nil values.\n\n#### Iterating over rows\n\nYou can iterate over all the rows in a worksheet with `row-seq`:\n\n```clj\n(->> (load-workbook "test.xls")\n     (select-sheet "first")\n     row-seq)\n```\n\nThis will return a sequence of `org.apache.poi.usermodel.Row` objects, or `nil` for any missing rows.  You can use `(remove nil? (row-seq ...) )` if you are happy to ignore missing rows, but then be aware the nth result in the sequence might not match the nth row in the spreadsheet.\n\n\n#### Iterating over cells\n\nYou can iterate over all the cells in a row with `cell-seq` - this returns a sequence of `org.apache.poi.usermodel.Cell` objects, or `nil` for missing cells.  Note that `(read-cell nil)` returns `nil` so it\'s safe to apply `read-cell` to the results of `cell-seq`\n\n```clj\n(->> (load-workbook "test.xls")\n     (select-sheet "first")\n     row-seq\n     (remove nil?)\n     (map cell-seq)\n     (map #(map read-cell %)))\n```\n\nFor example, if you run the above snippet on a sparse spreadsheet like:\n\n| First Name | Middle Name | Last Name |\n|---\n| Edger | Allen | Poe |\n| `(missing row)` |\n| John | `(missing)` | Smith |\n\nThen it will return:\n\n```clj\n(("First Name" "Middle Name" "Last Name")\n ("Edger" "Allen" "Poe")\n ("John" nil "Smith"))\n```\n\n### Automatically get the Docjure jar from Clojars\n\nThe Docjure jar is distributed on\n[Clojars](http://clojars.org/dk.ative/docjure). Here you can find both\nrelease builds and snapshot builds of pre-release versions.\n\nIf you are using the Leiningen build tool just add this line to the\n:dependencies list in project.clj to use it:\n\n```clj\n[dk.ative/docjure "1.12.0"]\n```\n\nRemember to issue the \'lein deps\' command to download it.\n\n\n\n#### Example project.clj for using Docjure 1.12.0\n\n```clj\n(defproject some.cool/project "1.0.0-SNAPSHOT"\n      :description "Spreadsheet magic using Docjure"\n      :dependencies [[org.clojure/clojure "1.8.0"]\n                     [dk.ative/docjure "1.12.0"]])\n```\n\n## Installation\nYou need to install the Leiningen build tool to build the library.\nYou can get it here: [Leiningen](http://github.com/technomancy/leiningen)\n\nThe library uses the Apache POI library which will be downloaded by\nthe "lein deps" command.\n\nThen build the library:\n\n     lein deps\n     lein compile\n     lein test\n\nTo run the tests on all supported Clojure versions use:\n\n    lein all test\n\n\n## Build Status\n[![Build Status](https://travis-ci.org/mjul/docjure.svg?branch=master)](https://travis-ci.org/mjul/docjure)\n\n## License\n\nCopyright (c) 2009-2018 Martin Jul\n\nDocjure is licensed under the MIT License. See the LICENSE file for\nthe license terms.\n\nDocjure uses the Apache POI library, which is licensed under the\n[Apache License v2.0](http://www.apache.org/licenses/LICENSE-2.0).\n\nFor more information on Apache POI refer to the\n[Apache POI web site](http://poi.apache.org/).\n\n\n## Contact information\n\n* [Docjure on GitHub](https://github.com/mjul/docjure)\n\nMartin Jul\n\n* Email: martin@.....com\n* Twitter: mjul\n* GitHub: [mjul](https://github.com/mjul)\n\n\n## Contributors\nThis library includes great contributions from\n\n* [Carl Baatz](https://github.com/cbaatz) (cbaatz)\n* [Michael van Acken](https://github.com/mva) (mva)\n* [Ragnar Dahl\xc3\xa9n](https://github.com/ragnard) (ragnard)\n* [Vijay Kiran](https://github.com/vijaykiran) (vijaykiran)\n* [Jon Neale](https://github.com/jonneale) (jonneale)\n* ["Naipmoro"](https://github.com/naipmoro) (naipmoro)\n* [Nikolay Durygin](https://github.com/nidu) (nidu)\n* [Oliver Holworthy](https://github.com/oholworthy) (oholworthy)\n* ["rakhra"](https://github.com/rakhra) (rakhra)\n* [Igor Tovstopyat-Nelip](https://github.com/igortn) (igortn)\n* [Dino Kova\xc4\x8d](https://github.com/reisub) (reisub)\n* [Lars Trieloff](https://github.com/trieloff) (trieloff)\n* [Jens Bendisposto](https://github.com/bendisposto) (bendisposto)\n* [Stuart Hinson](https://github.com/stuarth) (stuarth)\n* [Dan Petranek](https://github.com/dpetranek) (dpetranek)\n* [Aleksander Madland Stapnes](https://github.com/madstap) (madstap)\n* [Korny Sietsma](https://github.com/kornysietsma) (kornysietsma)\n* [Antti Virtanen](https://github.com/lokori) (lokori)\n* [alephyud](https://github.com/alephyud) (alephyud)\n* [Markku Rontu](https://github.com/Macroz) (macroz)\n* [Harold](https://github.com/harold) (harold)\n* [Alex Scott](https://github.com/axrs) (axrs)\n* [Maur\xc3\xadcio Szabo](https://github.com/mauricioszabo) (mauricioszabo)\n\nThank you very much!\n'