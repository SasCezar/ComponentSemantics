b'<img src="logo/logo-300dpi.png" width="400px">\n\n[![CircleCI](https://circleci.com/gh/borkdude/clj-kondo/tree/master.svg?style=shield)](https://circleci.com/gh/borkdude/clj-kondo/tree/master)\n[![Build status](https://ci.appveyor.com/api/projects/status/3jdro7mu17nv3rb3/branch/master?svg=true)](https://ci.appveyor.com/project/borkdude/clj-kondo/branch/master)\n[![Clojars Project](https://img.shields.io/clojars/v/clj-kondo.svg)](https://clojars.org/clj-kondo)\n[![cljdoc badge](https://cljdoc.org/badge/clj-kondo/clj-kondo)](https://cljdoc.org/d/clj-kondo/clj-kondo/CURRENT)\n[![project chat](https://img.shields.io/badge/slack-join_chat-brightgreen.svg)](https://clojurians.slack.com/messages/CHY97NXE2)\n\nA linter for Clojure code that sparks joy.\n\n<img src="screenshots/demo.png" width="50%" align="right">\n\n## Rationale\n\nYou don\'t mind the occasional [inline\ndef](https://blog.michielborkent.nl/2017/05/25/inline-def-debugging/) for\ndebugging, but you would like to get rid of them before making your code\npublic. Also, unnecessary `do` and `let` nestings don\'t really add any value to\nyour life. Let clj-kondo help you tidy your code.\n\n## Features\n\nclj-kondo detects:\n\n* inline `def` expressions\n* redundant `do` and `let` wrappings\n* arity errors:\n  - within the same namespace and across namespaces\n  - of static Java method calls\n  - of local `let` and `letfn` binding calls\n  - of recursive calls (including `recur`)\n* unused private vars\n* private and deprecated var usage\n* required but unused namespaces\n* referred but unused vars\n* duplicate requires\n* unused function arguments and let bindings\n* unused imports\n* redefined vars\n* unresolved symbols\n* misplaced docstrings\n* duplicate map keys and set elements\n* missing map keys\n* invalid number of forms in binding vectors\n* missing assertions in `clojure.test/deftest`\n* alias consistency\n* [type checking](doc/types.md)\n* Datalog syntax checking\n\nbefore your REPL knows it.\n\nIt suggests several style guide recommendations, such as:\n\n* rules from Stuart Sierra\'s [how to ns](https://stuartsierra.com/2016/clojure-how-to-ns.html)\n* use `:else` as the catch-all test expression in `cond` (see [Clojure style guide](https://github.com/bbatsov/clojure-style-guide#else-keyword-in-cond))\n* use `seq` instead of `(not (empty? ,,,))` (see [Clojure style guide](https://github.com/bbatsov/clojure-style-guide#nil-punning))\n\n<img src="screenshots/wrong-arity.png" width="50%" align="right">\n\nIt has support for syntax of commonly used macros like\n`clojure.core.async/alt!!`, `schema.core/defn` and `potemkin/import-vars`.\n\nIt provides [analysis data](analysis) so you build your own custom linters.\n\nThis linter is:\n\n* compatible with `.clj`, `.cljs`, `.cljc` and `.edn` files\n* build tool and editor agnostic\n* a static code analyzer\n* compiled to native code using GraalVM\n\nTry clj-kondo at the [interactive playground](https://clj-kondo.michielborkent.nl).\n\n## [Installation](doc/install.md)\n\n## [Running on the JVM](doc/jvm.md)\n\n## [Running with Docker](doc/docker.md)\n\n## Usage\n\n### Command line\n\nLint from stdin:\n\n``` shellsession\n$ echo \'(def x (def x 1))\' | clj-kondo --lint -\n<stdin>:1:8: warning: inline def\n```\n\nLint a file:\n\n``` shellsession\n$ echo \'(def x (def x 1))\' > /tmp/foo.clj\n$ clj-kondo --lint /tmp/foo.clj\n/tmp/foo.clj:1:8: warning: inline def\n```\n\nLint a directory:\n\n``` shellsession\n$ clj-kondo --lint src\nsrc/clj_kondo/test.cljs:7:1: warning: redundant do\nsrc/clj_kondo/calls.clj:291:3: error: Wrong number of args (1) passed to clj-kondo.calls/analyze-calls\n```\n\nLint a project classpath:\n\n``` shellsession\n$ clj-kondo --lint "$(lein classpath)"\n```\n\n## Project setup\n\nTo detect lint errors across namespaces in your project, a cache is needed. To\nlet clj-kondo know where to create one, make a `.clj-kondo` directory in the\nroot of your project, meaning on the same level as your `project.clj`,\n`deps.edn` or `build.boot`. A cache will be created inside of it when you run\n`clj-kondo`.  Before linting inside your editor, it is recommended to lint the\nentire classpath to teach `clj-kondo` about all the libraries you are using,\nincluding Clojure and/or ClojureScript itself:\n\n``` shellsession\n$ clj-kondo --lint "<classpath>"\n```\n\nBuild tool specific ways to get a classpath:\n- `lein classpath`\n- `boot with-cp -w -f -`\n- `clojure -Spath`\n\nSo for `lein` the entire command would be:\n\n    $ clj-kondo --lint "$(lein classpath)"\n\nNow you are ready to lint single files using [editor\nintegration](doc/editor-integration.md). A simulation of what happens when you\nedit a file in your editor:\n\n``` shellsession\n$ echo \'(select-keys)\' | clj-kondo --lang cljs --lint -\n<stdin>:1:1: error: Wrong number of args (0) passed to cljs.core/select-keys\n```\n\nSince clj-kondo now knows about your version of ClojureScript via the cache,\nit detects that the number of arguments you passed to `select-keys` is\ninvalid. Each time you edit a file, the cache is incrementally updated, so\nclj-kondo is informed about new functions you just wrote.\n\nIf you want to use a different directory to read and write the cache, use the\n`--cache-dir` option. To disable the cache even if you have a `.clj-kondo`\ndirectory, use `--cache false`.\n\n## [Configuration](doc/config.md)\n\n## [Editor integration](doc/editor-integration.md)\n\n## Exit codes\n\n- `0`: no errors or warnings were found\n- `2`: more than one warning was found\n- `3`: more than one error was found\n\nAll other error codes indicate an unexpected error.\n\n## [Analysis data](analysis)\n\n## [Developer documentation](doc/dev.md)\n\n## Thanks to:\n\n- [joker](https://github.com/candid82/joker) for inspiration\n- [rewrite-clj](https://github.com/xsc/rewrite-clj) for the Clojure parser code\n- [eastwood](https://github.com/jonase/eastwood) for `var-info.edn` and inspiration\n- [contributors](https://github.com/borkdude/clj-kondo/graphs/contributors) and\n  other users posting issues with bug reports and ideas\n- [Nikita Prokopov](https://github.com/tonsky) for the logo\n\n## Support this project\n\nDo you enjoy this project? Consider buying me a [hot\nbeverage](https://ko-fi.com/borkdude).\n\n## License\n\nCopyright \xc2\xa9 2019 Michiel Borkent\n\nDistributed under the EPL License, same as Clojure. See LICENSE.\n\nThe directory `inlined` contains source from [`tools.reader`](https://github.com/clojure/tools.reader) which is licensed under the EPL license.\n\nThe directory `parser` contains modified source from [`rewrite-clj`](https://github.com/xsc/rewrite-clj) which is licensed under the MIT license.\n'