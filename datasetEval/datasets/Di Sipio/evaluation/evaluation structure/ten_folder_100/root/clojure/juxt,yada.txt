b'# yada\n\n[![CircleCI](https://circleci.com/gh/juxt/yada.svg?style=svg)](https://circleci.com/gh/juxt/yada)\n\nyada is a web library for Clojure, designed to support the creation of production services via HTTP.\n\nIt has the following features:\n\n* Standards-based, comprehensive HTTP coverage (content negotiation, conditional requests, etc.)\n* Parameter validation and coercion, automatic Swagger support\n* Rich extensibility (methods, mime-types, security and more)\n* Asynchronous, efficient interceptor-chain design built on [manifold](https://github.com/ztellman/manifold)\n* Excellent performance, suitable for heavy production workloads\n\nyada is a sibling library to [bidi](http://github.com/juxt/bidi) - whereas bidi is based on _routes as data_, yada is based on _resources as data_.\n\nThe user-manual for the latest (1.x) release is available at\n[https://juxt.pro/yada](https://juxt.pro/yada) and offline (see below).\n\nThe user-manual is also available as an e-book or PDF, at\n[Leanpub](https://leanpub.com/yada).\n\n## Installation\n\nFor the latest stable release, add the following dependency to your `project.clj` or `build.boot` file:\n\n```\n[yada "1.2.15"]\n```\n\nFor the latest alpha release, add the following dependency to your `project.clj` or `build.boot` file:\n\n```\n[yada "1.3.0-alpha9"]\n```\n\n\n[![Build Status](https://travis-ci.org/juxt/yada.svg?branch=master)](https://travis-ci.org/juxt/yada.svg?branch=master)\n\n## Create a yada handler\n\nTypically, yada handlers are created from a configuation expressed in data.\n\n```clojure\n(require \'[yada.yada :as yada])\n\n(yada/handler\n  {:methods\n    {:get\n      {:produces "text/html"\n       :response "<h1>Hello World!</h1>"}}})\n```\n\nThis is a simple example, there are a lot more options in yada than can be expressed here, but the approach is the same. The data configuration can be hand-authored, or generated programmatically leading enabling creation of consistent APIs at an industrial scale.\n\n## Dependencies\n\nyada requires the following :-\n\n- a Java JDK/JRE installation, version 8 or above\n- Clojure 1.8.0\n\nSupport for other web-severs, such as undertow, are on the road-map.\n\n## Future compatibility\n\nIf you want to ensure that your code will not break with future releases of yada, you should only use functions from the `yada.yada` namespaces.\n\nYou are free to use other public functions in yada, but please be warned that these can and do change between releases.\n\n## Lean yada\n\nBy default, yada is batteries-included, bringing in a large number of dependencies.\n\nHowever, a leaner version of yada is available which cuts out Swagger, swagger-ui, JSON (cheshire), Transit, buddy, core.async, SSE and other fat.\n\nThe following differences apply:\n\n- yada doesn\'t automatically encode/decode JSON bodies, or render JSON as HTML\n- no parameter validation or coercion\n- no Swagger\n- no SSE (currently)\n- no JWT\n- no Transit\n\nTo use the lean (or any other) variant of yada, specify the\nappropriate classifier in your `project.clj` or `build.boot` file:\n\n```clojure\n[yada/lean "1.2.15"]\n```\n\n## Running documentation and examples offline\n\nAlthough yada is a library, if you clone this repo you can run the documentation and examples from the REPL.\n\n```\ncd yada\nlein repl\n```\n\nOnce the REPL starts, type in and run the following :-\n\n```\nuser> (dev)\ndev> (go)\n```\n\nNow browse to http://localhost:8090.\n\n## Troubleshooting FAQ\n\nQ. I\'m migrating from a version before yada 1.1 and my async multipart and other uploads are not working, sometimes throwing NullPointerExceptions or other errors.\n\nA. Either use yada\'s built-in yada.server function or make sure you have started aleph\'s server with the option `raw-stream? :true`. Previous versions of yada left these settings up to the user but it\'s _very important_ in yada 1.1 that raw-stream? is set.\n\n## Support\n\nyadarians mostly chat in the [Slack channel](https://clojurians.slack.com/messages/yada) plus there is also [a dedicated Gitter channel](https://gitter.im/juxt/yada) channel\n\n[![Join the chat at https://gitter.im/juxt/yada](https://badges.gitter.im/juxt/yada.svg)](https://gitter.im/juxt/yada?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nAlso, there is a discussion group [yada-discuss](https://groups.google.com/forum/#!forum/yada-discuss) to discuss ideas.\n\n## Contributing\n\nFeel free to raise GitHub issues on this repository.\n\nPull requests are welcome. Please run the test suite and check that all\ntests pass prior to submission.\n\n```\n$ lein test\n```\n\nIf you want to build and test your own version of yada, you need to be aware how to locally install your own version. Since yada is broken into multiple Maven jars, each with their own version declaration, there is a script that allows you to set the version to whatever you need it to be.\n\n```\n$ ./set-version 1.3.0-MS-SNAPSHOT\n```\n\nRather than use `lein install`, you should replace `lein` with `./treelein`.\n\nFor example:\n\n```\n$ ./treelein install\n```\n\nThis will install all the yada jars into your local Maven repository.\n\n## Acknowledgments\n\nThanks to the following people for inspiration, contributions,\nfeedback and suggestions.\n\n* Malcolm Sparks\n* Martin Trojer\n* Philipp Meier\n* David Thomas Hume\n* Zach Tellman\n* Stijn Opheide\n* Frankie Sardo\n* Jon Pither\n* H\xc3\xa5kan R\xc3\xa5berg\n* Ernestas Lisauskas\n* Thomas van der Veen\n* Leandro Demartini\n* Craig McCraig of the clan McCraig\n* Imre K\xc3\xb3sz\xc3\xb3\n* Luo Tian\n* Joshua Griffith\n* Joseph Fahey\n* David Smith\n* Mike Fikes\n* Brian Olsen\n* Stanislas Nanchen\n* Nicolas Ha\n* Eric Fode\n* Leon Mergen\n* Greg Look\n* Tom Coupland\n* Mikkel Gravgaard\n* Lucas Lago\n* Johannes Staffans\n* Michiel Borkent\n* James Laver\n* Marcin Jekot\n* Daniel Compton\n* Yoshito Komatsu\n* Bor Hodo\xc5\xa1\xc4\x8dek\n* Ivar Refsdal\n* Josh Graham\n* Joshua Ballanco\n* Steven Harms\n* Ryan Smith\n* Alexis Lee\n\n\nAlso, see the dependency list. In particular, yada would certainly not\nexist without the considerable efforts of those behind the following\nlibraries.\n\n* Manifold & Aleph - Zach Tellman\n* Prismatic Schema - Jason Wolfe (and others)\n* Ring-swagger - Tommi Riemann (and others)\n\n## Copyright & License\n\nThe MIT License (MIT)\n\nCopyright \xc2\xa9 2015-2016 JUXT LTD.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n'