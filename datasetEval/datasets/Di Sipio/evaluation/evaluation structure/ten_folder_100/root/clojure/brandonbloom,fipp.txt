b'# Fast Idiomatic Pretty-Printer\n\nFipp is a better pretty printer for Clojure and ClojureScript.\n\nLike clojure.pprint, this pretty printer has a *linear runtime* and uses\n*bounded space*. However, unlike clojure.pprint, Fipp\'s implementation is\ntuned for great performance and has a functional, data-driven API.\n\nThe data interface is agnostic to the source language. Printers are included\nfor Edn data and Clojure code, but it is easy to create a pretty printer for\nyour own language or documents: Even if they\'re not made out of Clojure data!\n\nFipp is great for printing large data files and debugging macros, but it is\nnot suitable as a code reformatting tool. ([explanation][4])\n\n\n## Installation\n\nFipp artifacts are [published on Clojars](https://clojars.org/fipp).\n\nTo depend on this version with Lein, add the following to your `project.clj`:\n\n```clojure\n[fipp "0.6.21"]\n```\n\nThis version of Fipp works with Clojure 1.7 or newer.\n\nSee [the v0.5 branch](https://github.com/brandonbloom/fipp/tree/v0.5) for\na version of Fipp that works with Clojure 1.6.\n\nClojureScript is supported from build 3269 and up. There are several known\nissues on both the Fipp and CLJS sides that are in the process of being fixed.\nWhile I wouldn\'t yet trust Fipp to serialize CLJS data durably, it should be\nmore than usable interactively. Please let me know if it isn\'t for you.\n\n\n### Colorization & REPL Integration\n\n[Puget][2] uses Fipp\'s engine to provide an alternative, colorizing printer.\n\n[Whidbey][3] integrates Puget in to nREPL via Leiningen, so that every\nevaluation pretty prints in color.\n\n\n## Printer Usage\n\n```clojure\n;; Refer with a rename to avoid collision with your REPL\'s pprint.\n(require \'[fipp.edn :refer [pprint] :rename {pprint fipp}])\n\n(fipp [1 2 3])\n(fipp (range 50))\n(fipp (range 20))\n(fipp (range 20) {:width 10})\n\n(require \'[fipp.clojure])\n(fipp.clojure/pprint \'(let [foo "abc 123"\n                            bar {:x 1 :y 2 :z 3}]\n                        (do-stuff foo (assoc bar :w 4)))\n                    {:width 40})\n```\n\nThe available options are:\n\n- `:width` defaults to `70`.\n- `:writer` defaults to `clojure.core/*out*` (Clojure only).\n- `:print-fn` defaults to `cljs.core/*print-fn*` (ClojureScript only).\n- `:print-length` behaves as and defaults to `clojure.core/*print-length*`.\n- `:print-level` behaves as and defaults to `clojure.core/*print-level*`.\n- `:print-meta` behaves as and defaults to `clojure.core/*print-meta*`.\n\nAny other supported/hidden options are subject to change.\n\n### Conveniences\n\nThe `dbg` macro can be used for convenient "printf debugging" of\nsource file, line, expression, and evaluation result to `*err*`.\n\n```clojure\n(require \'[fipp.edn :refer [dbg]])\n(dbg (repeat 5 (range 10)))\n```\n\nThis will print:\n\n```\n/path/to/that/file.clj:2\n(repeat 5 (range 10))\n=>\n((0 1 2 3 4 5 6 7 8 9)\n (0 1 2 3 4 5 6 7 8 9)\n (0 1 2 3 4 5 6 7 8 9)\n (0 1 2 3 4 5 6 7 8 9)\n (0 1 2 3 4 5 6 7 8 9))\n```\n\nA Fipp-enabled version of `clojure.repl/pst` is also available:\n\n```\nuser=> (require \'[fipp.repl :refer [pst]])\nuser=> (throw (ex-info "whoops" {:xs (range 20) :ys (range 20)}))\n\nExceptionInfo whoops  clojure.core/ex-info (core.clj:4617)\nuser=> (fipp.repl/pst)\nExceptionInfo whoops\n{:xs (0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19),\n :ys (0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19)}\n      clojure.core/ex-info (core.clj:4617)\n      clojure.core/ex-info (core.clj:4617)\n      user/eval3185 (form-init1248204588518004004.clj:1)\n      user/eval3185 (form-init1248204588518004004.clj:1)\n      clojure.lang.Compiler.eval (Compiler.java:6927)\n      clojure.lang.Compiler.eval (Compiler.java:6890)\n      clojure.core/eval (core.clj:3105)\n      clojure.core/eval (core.clj:3101)\n      clojure.main/repl/read-eval-print--7408/fn--7411 (main.clj:240)\n      clojure.main/repl/read-eval-print--7408 (main.clj:240)\n      clojure.main/repl/fn--7417 (main.clj:258)\n      clojure.main/repl (main.clj:258)\n```\n\n\n## Fast!\n\nIn my non-scientific testing, it has proven to be at least five times as fast\nas `clojure.pprint`.  It also has the nice property of printing no later than\nhaving consumed the bounded amount of memory, so you see your first few lines\nof output instantaneously.\n\nThe core algorithm is described by Swierstra and Chitil in\n[Linear, Bounded, Functional Pretty-Printing][5].\n\nSwierstra and Chitil\'s implementation uses lazy evaluation and requires\n[tying the knot](http://www.haskell.org/haskellwiki/Tying_the_Knot) to\ninterleave the measuring and printing phases to achieve the bounded space goal.\n\nHowever, this implementation is instead a port of the strict evaluation\nstrategy as described by Kiselyov, Peyton-Jones, and Sabry in\n[Lazy v. Yield: Incremental, Linear Pretty-printing][6].\n\nClojure\'s transducers are used to simulate generators and their `yield`\noperator. Unlike lazy reduction, transducers interleave execution of\nmulti-phase transformations by function composition. This enables preservation\nof the bounded-space requirement and eases reasoning about the program\'s\nbehavior. Additionally, it avoids a lot of intermediate object allocation.\n\n\n## Idiomatic!\n\nClojure\'s included pretty printer supports pluggable dispatch tables and\nprovides an API for controlling the printing process. The programming model\nis side-effectual. For example, to print a breaking newline, you execute\n`(pprint-newline :linear)`. This means that it\'s a difficult and tricky\nprocess to write or compose new pretty printers.\n\nFipp, on the other hand, accepts a "pretty print document" as input. This\ndocument is similar to HTML markup using [hiccup][7].\n\nHere are some examples:\n\n```clojure\n(require \'[fipp.engine :refer (pprint-document)])\n\n(defn ppd [doc]\n  (pprint-document doc {:width 10}))\n\n(ppd [:span "One" :line "Two" :line "Three"])\n\n(ppd [:group "(do" [:nest 2 :line "(step-1)" :line "(step-2)"] ")"])\n```\n\nIf you want to write your own printer, see\n[doc/primitives.md](doc/primitives.md) for details.\n\n\n## License\n\nCopyright \xc2\xa9 2015 Brandon Bloom\n\nDistributed under the Eclipse Public License, the same as Clojure.\n\n\n## Acknowledgements\n\nFipp is fast in part thanks to [YourKit\'s Java Profiler][1].\n\n\n[1]: http://www.yourkit.com/java/profiler/index.jsp\n[2]: https://github.com/greglook/puget\n[3]: https://github.com/greglook/whidbey\n[4]: https://github.com/brandonbloom/fipp/issues/21#issuecomment-64693415\n[5]: http://kar.kent.ac.uk/24041/1/LinearOlaf.pdf\n[6]: http://www.cs.indiana.edu/~sabry/papers/yield-pp.pdf\n[7]: https://github.com/weavejester/hiccup\n'