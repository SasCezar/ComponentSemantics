b'# Hiccup\n\n[![Build Status](https://travis-ci.org/weavejester/hiccup.svg?branch=master)](https://travis-ci.org/weavejester/hiccup)\n\nHiccup is a library for representing HTML in Clojure. It uses vectors\nto represent elements, and maps to represent an element\'s attributes.\n\n## Install\n\nAdd the following dependency to your `project.clj` file:\n\n    [hiccup "1.0.5"]\n\n## Documentation\n\n* [Wiki](https://github.com/weavejester/hiccup/wiki)\n* [API Docs](http://weavejester.github.com/hiccup)\n    \n## Syntax\n\nHere is a basic example of Hiccup syntax:\n\n```clojure\nuser=> (use \'hiccup.core)\nnil\nuser=> (html [:span {:class "foo"} "bar"])\n"<span class=\\"foo\\">bar</span>"\n```\n\nThe first element of the vector is used as the element name. The second\nattribute can optionally be a map, in which case it is used to supply\nthe element\'s attributes. Every other element is considered part of the\ntag\'s body.\n\nHiccup is intelligent enough to render different HTML elements in\ndifferent ways, in order to accommodate browser quirks:\n\n```clojure\nuser=> (html [:script])\n"<script></script>"\nuser=> (html [:p])\n"<p />"\n```\n\nAnd provides a CSS-like shortcut for denoting `id` and `class`\nattributes:\n\n```clojure\nuser=> (html [:div#foo.bar.baz "bang"])\n"<div id=\\"foo\\" class=\\"bar baz\\">bang</div>"\n```\n\nIf the body of the element is a seq, its contents will be expanded out\ninto the element body. This makes working with forms like `map` and\n`for` more convenient:\n\n```clojure\nuser=> (html [:ul\n               (for [x (range 1 4)]\n                 [:li x])])\n"<ul><li>1</li><li>2</li><li>3</li></ul>"\n```\n\n## License\n\nCopyright \xc2\xa9 2016 James Reeves\n\nDistributed under the Eclipse Public License either version 1.0 or (at\nyour option) any later version.\n'