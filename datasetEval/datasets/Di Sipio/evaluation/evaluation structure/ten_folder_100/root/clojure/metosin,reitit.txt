b'# reitit [![Build Status](https://img.shields.io/circleci/project/github/metosin/reitit.svg)](https://circleci.com/gh/metosin/reitit) [![cljdoc badge](https://cljdoc.xyz/badge/metosin/reitit)](https://cljdoc.xyz/jump/release/metosin/reitit) [![Slack](https://img.shields.io/badge/clojurians-reitit-blue.svg?logo=slack)](https://clojurians.slack.com/messages/reitit/)\n\n\nA fast data-driven router for Clojure(Script).\n\n* Simple data-driven [route syntax](https://metosin.github.io/reitit/basics/route_syntax.html)\n* Route [conflict resolution](https://metosin.github.io/reitit/basics/route_conflicts.html)\n* First-class [route data](https://metosin.github.io/reitit/basics/route_data.html)\n* Bi-directional routing\n* [Pluggable coercion](https://metosin.github.io/reitit/coercion/coercion.html) ([schema](https://github.com/plumatic/schema) & [clojure.spec](https://clojure.org/about/spec))\n* Helpers for [ring](https://metosin.github.io/reitit/ring/ring.html), [http](https://metosin.github.io/reitit/http/interceptors.html), [pedestal](https://metosin.github.io/reitit/http/pedestal.html) & [frontend](https://metosin.github.io/reitit/frontend/basics.html)\n* Friendly [Error Messages](https://metosin.github.io/reitit/basics/error_messages.html)\n* Extendable\n* Modular\n* [Fast](https://metosin.github.io/reitit/performance.html)\n\nPresentations:\n* [Reitit, The Ancient Art of Data-Driven](https://www.slideshare.net/mobile/metosin/reitit-clojurenorth-2019-141438093), Clojure/North 2019, [video](https://youtu.be/cSntRGAjPiM)\n* [Faster and Friendlier Routing with Reitit 0.3.0](https://www.metosin.fi/blog/faster-and-friendlier-routing-with-reitit030/)\n* [Welcome Reitit 0.2.0!](https://www.metosin.fi/blog/reitit020/)\n* [Data-Driven Ring with Reitit](https://www.metosin.fi/blog/reitit-ring/)\n* [Reitit, Data-Driven Routing with Clojure(Script)](https://www.metosin.fi/blog/reitit/)\n\n## [Full Documentation](https://metosin.github.io/reitit/)\n\nThere is [#reitit](https://clojurians.slack.com/messages/reitit/) in [Clojurians Slack](http://clojurians.net/) for discussion & help.\n\n## Main Modules\n\n* `reitit` - all bundled\n* `reitit-core` - the routing core\n* `reitit-ring` - a [ring router](https://metosin.github.io/reitit/ring/ring.html)\n* `reitit-middleware` - [common middleware](https://metosin.github.io/reitit/ring/default_middleware.html)\n* `reitit-spec` [clojure.spec](https://clojure.org/about/spec) coercion\n* `reitit-schema` [Schema](https://github.com/plumatic/schema) coercion\n* `reitit-swagger` [Swagger2](https://swagger.io/) apidocs\n* `reitit-swagger-ui` Integrated [Swagger UI](https://github.com/swagger-api/swagger-ui)\n* `reitit-frontend` Tools for [frontend routing]((https://metosin.github.io/reitit/frontend/basics.html))\n* `reitit-http` http-routing with Interceptors\n* `reitit-interceptors` - [common interceptors](https://metosin.github.io/reitit/http/default_interceptors.html)\n* `reitit-sieppari` support for [Sieppari](https://github.com/metosin/sieppari)\n* `reitit-dev` - development utilities\n\n## Extra modules\n\n* `reitit-pedestal` support for [Pedestal](http://pedestal.io)\n\n## Latest version\n\nAll main modules bundled:\n\n```clj\n[metosin/reitit "0.3.10"]\n```\n\nOptionally, the parts can be required separately.\n\n## Quick start\n\n```clj\n(require \'[reitit.core :as r])\n\n(def router\n  (r/router\n    [["/api/ping" ::ping]\n \xc2\xa0 \xc2\xa0 ["/api/orders/:id" ::order]]))\n\n(r/match-by-path router "/api/ping")\n; #Match{:template "/api/ping"\n;        :data {:name ::ping}\n;        :result nil\n;        :path-params {}\n;        :path "/api/ping"}\n\n(r/match-by-name router ::order {:id 2})\n; #Match{:template "/api/orders/:id",\n; \xc2\xa0 \xc2\xa0 \xc2\xa0  :data {:name ::order},\n;        :result nil,\n;        :path-params {:id 2},\n;        :path "/api/orders/2"}\n```\n\n## Ring example\n\nA Ring routing app with input & output coercion using [data-specs](https://github.com/metosin/spec-tools/blob/master/README.md#data-specs).\n\n```clj\n(require \'[reitit.ring :as ring])\n(require \'[reitit.coercion.spec])\n(require \'[reitit.ring.coercion :as rrc])\n\n(def app\n  (ring/ring-handler\n    (ring/router\n      ["/api"\n       ["/math" {:get {:parameters {:query {:x int?, :y int?}}\n                       :responses {200 {:body {:total pos-int?}}}\n                       :handler (fn [{{{:keys [x y]} :query} :parameters}]\n                                  {:status 200\n                                   :body {:total (+ x y)}})}}]]\n      ;; router data effecting all routes\n      {:data {:coercion reitit.coercion.spec/coercion\n              :middleware [rrc/coerce-exceptions-middleware\n                           rrc/coerce-request-middleware\n                           rrc/coerce-response-middleware]}})))\n```\n\nValid request:\n\n```clj\n(app {:request-method :get\n      :uri "/api/math"\n      :query-params {:x "1", :y "2"}})\n; {:status 200\n;  :body {:total 3}}\n```\n\nInvalid request:\n\n```clj\n(app {:request-method :get\n      :uri "/api/math"\n      :query-params {:x "1", :y "a"}})\n;{:status 400,\n; :body {:type :reitit.coercion/request-coercion,\n;        :coercion :spec,\n;        :spec "(spec-tools.core/spec {:spec (clojure.spec.alpha/keys :req-un [:$spec20745/x :$spec20745/y]), :type :map, :keys #{:y :x}, :keys/req #{:y :x}})",\n;        :problems [{:path [:y],\n;                    :pred "clojure.core/int?",\n;                    :val "a",\n;                    :via [:$spec20745/y],\n;                    :in [:y]}],\n;        :value {:x "1", :y "a"},\n;        :in [:request :query-params]}}\n```\n\n## More examples\n\n* [`reitit-ring` with coercion, swagger and default middleware](https://github.com/metosin/reitit/blob/master/examples/ring-swagger/src/example/server.clj)\n* [`reitit-frontend`, the easy way](https://github.com/metosin/reitit/blob/master/examples/frontend/src/frontend/core.cljs)\n* [`reitit-frontend` with Keechma-style controllers](https://github.com/metosin/reitit/blob/master/examples/frontend-controllers/src/frontend/core.cljs)\n* [`reitit-http` with Pedestal](https://github.com/metosin/reitit/blob/master/examples/pedestal/src/example/server.clj)\n* [`reitit-http` with Sieppari](https://github.com/metosin/reitit/blob/master/examples/http/src/example/server.clj)\n\nAll examples are in https://github.com/metosin/reitit/tree/master/examples\n\n## More info\n\n[Check out the full documentation!](https://metosin.github.io/reitit/)\n\nJoin [#reitit](https://clojurians.slack.com/messages/reitit/) channel in [Clojurians slack](http://clojurians.net/).\n\nRoadmap is mostly written in [issues](https://github.com/metosin/reitit/issues).\n\n## Special thanks\n\n* Existing Clojure(Script) routing libs, especially to\n[Ataraxy](https://github.com/weavejester/ataraxy), [Bide](https://github.com/funcool/bide), [Bidi](https://github.com/juxt/bidi), [calfpath](https://github.com/ikitommi/calfpath), [Compojure](https://github.com/weavejester/compojure), [Keechma](https://keechma.com/) and\n[Pedestal](https://github.com/pedestal/pedestal/tree/master/route).\n* [Compojure-api](https://github.com/metosin/compojure-api), [Kekkonen](https://github.com/metosin/kekkonen), [Ring-swagger](https://github.com/metosin/ring-swagger) and [Yada](https://github.com/juxt/yada) and for ideas, coercion & stuff.\n* [Schema](https://github.com/plumatic/schema) and [clojure.spec](https://clojure.org/about/spec) for the validation part.\n* [httprouter](https://github.com/julienschmidt/httprouter) for ideas and a good library to benchmark against\n\n## License\n\nCopyright \xc2\xa9 2017-2019 [Metosin Oy](http://www.metosin.fi)\n\nDistributed under the Eclipse Public License, the same as Clojure.\n'