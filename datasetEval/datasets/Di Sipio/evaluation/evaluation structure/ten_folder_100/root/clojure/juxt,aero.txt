b'# Aero\n\n[![Join the chat at https://gitter.im/juxt/aero](https://badges.gitter.im/juxt/aero.svg)](https://gitter.im/juxt/aero?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n(<b>a</b>ero is <b>e</b>dn <b>r</b>eally, <b>o</b>k?)\n\nA small library for explicit, intentful configuration.\n\n![Light and fluffy configuration](aero.jpg)\n\n## Installation\n\nAdd the following dependency to your `project.clj` file\n\n[![Clojars Project](http://clojars.org/aero/latest-version.svg)](http://clojars.org/aero)\n\n[![Build Status](https://circleci.com/gh/juxt/aero.svg?style=svg)](https://circleci.com/gh/juxt/aero)\n\n## Status\n\nPlease note that being a beta version indicates the provisional status\nof this library, and that features are subject to change.\n\n## Getting started\n\nCreate a file called `config.edn` containing the following\n\n```clojure\n{:greeting "World!"}\n```\n\nIn your code, read the configuration like this\n\n```clojure\n(require \'[aero.core :refer (read-config)])\n(read-config "config.edn")\n```\n\nor to read from the classpath, like this\n\n```clojure\n(read-config (clojure.java.io/resource "config.edn"))\n```\n\nThis isn\'t actually any different since `clojure.java.io/resource` is returning\na string URL to where the file is but it\'s helpful to point out.\n\n## Design goals\n\n### Explicit and intentional\n\nConfiguration should be explicit, intentful, obvious, but not clever. It\nshould be easy to understand what the config is, and where it is\ndeclared.\n\nDetermining config in stressful situations, for example, while\ndiagnosing the cause of a production issue, should not be a\n[wild goose chase](http://en.wiktionary.org/wiki/wild-goose_chase).\n\n### Avoid duplication ...\n\nConfig files are often duplicated on a per-environment basis, attracting\nall the problems associated with duplication.\n\n### ... but allow for difference\n\nWhen looking at a config file, a reader will usually ask: "Does the value differ from the default, and if so how?". It\'s clearly better to answer that question in-place.\n\n### Allow config to be stored in the source code repository ...\n\nWhen config is left out of source code control it festers and diverges from the code base. Better to keep a single config file in source code control.\n\n### ... while hiding passwords\n\nWhile it is good to keep config in source code control, it is important to ensure passwords and other sensitive information remain hidden.\n\n### Config should be data\n\nWhile it can be very flexible to have \'clever\' configuration \'programs\', it can be [unsafe](http://www.learningclojure.com/2013/02/clojures-reader-is-unsafe.html), lead to exploits and compromise security. Configuration is a key input to a program. Always use data for configuration and [avoid turing-complete](http://langsec.org/occupy) languages!\n\n### Use environment variables sparingly\n\nWe suggest using environment variables judiciously and sparingly, the way Unix intends, and not [go mad](http://12factor.net/config). After all, we want to keep configuration explicit and intentional.\n\nAlso, see these arguments [against](https://gist.github.com/telent/9742059).\n\n### Use edn\n\nFortunately for Clojure developers like us, most of the tech to read configuration in a safe, secure and extensible way already exists in the Clojure core library (EDN).\n\n## Tag literals\n\nAero provides a small library of tag literals.\n\n### env\n\nUse `#env` to reference an environment variable.\n\n```clojure\n{:database-uri #env DATABASE_URI}\n```\n\nIt is considered bad practice to use environment variables for passwords and other confidential information. This is because it is very easy for anyone to read a process\'s environment (e.g. via `ps -ef`). Environment variables are also commonly dumped out in a debugging sessions. Instead you should use `#include` - see [here](#hide-passwords-in-local-private-files).\n\n### envf\n\nUse `#envf` to insert environment variables into a formatted string.\n\n```clojure\n{:database #envf ["protocol://%s:%s" DATABASE_HOST DATABASE_NAME]}\n```\n\n### or\n\nUse `#or` when you want to provide a list of possibilities, perhaps with a default at the end.\n\n```clojure\n{:port #or [#env PORT 8080]}\n```\n\n### join\n\n`#join` is used as a string builder, useful in a variety of situations such as building up connection strings.\n\n``` clojure\n{:url #join ["jdbc:postgresql://psq-prod/prod?user="\n             #env PROD_USER\n             "&password="\n             #env PROD_PASSWD]}\n```\n\n### profile\n\nUse profile as a kind of reader conditional.\n\n`#profile` expects a map, from which it extracts the entry corresponding to the __profile__.\n\n```clojure\n{:webserver\n  {:port #profile {:default 8000\n                   :dev 8001\n                   :test 8002}}}\n```\n\nYou can specify the value of __profile__ when you read the config.\n\n```clojure\n(read-config "config.edn" {:profile :dev})\n```\n\nwhich will return\n\n```clojure\n{:webserver\n  {:port 8001}}\n```\n\n(`#profile` replaces the now deprecated `#cond`, found in previous versions of Aero)\n\n### hostname\n\nUse when config has to differ from host to host, using the hostname. You\ncan specify multiple hostnames in a set.\n\n```clojure\n{:webserver\n  {:port #hostname {"stone" 8080\n                    #{"emerald" "diamond"} 8081\n                    :default 8082}}}\n```\n\n### long, double, keyword, boolean\n\nUse to parse a `String` value into a `Long`, `Double`, keyword or boolean.\n\n``` clojure\n{:debug #boolean #or [#env DEBUG "true"]\n :webserver\n  {:port #long #or [#env PORT 8080]\n   :factor #double #env FACTOR\n   :mode #keyword #env MODE}}\n```\n\n### user\n\n`#user` is like `#hostname`, but switches on the user.\n\n### include\n\nUse to include another config file. This allows you to split your config files\nto prevent them from getting too large.\n\n``` clojure\n{:webserver #include "webserver.edn"\n :analytics #include "analytics.edn"}\n```\n\nNOTE: By default `#include` will attempt to resolve the file to be included *relative* to the\nconfig file it\'s being included from. (this won\'t work for jars)\n\nYou can provide your own custom resolver to replace the default behaviour or use one that\naero provides (`resource-resolver`, `root-resolver`). For example\n\n```clojure\n(require \'[aero.core :refer (read-config resource-resolver)])\n(read-config "config.edn" {:resolver resource-resolver})\n```\n\nYou can also provide a map as a resolver. For example\n\n```clojure\n(read-config "config.edn" {:resolver {"webserver.edn" "resources/webserver/config.edn"}})\n```\n\n### merge\n\nMerge multiple maps together\n\n```clojure\n#merge [{:foo :bar} {:foo :zip}]\n```\n\n### ref\n\nTo avoid duplication you can refer to other parts of your configuration file using the `#ref` tag.\n\nThe `#ref` value should be a vector resolveable by `get-in`. Take the following config map for example:\n\n```clojure\n{:db-connection "datomic:dynamo://dynamodb"\n :webserver\n  {:db #ref [:db-connection]}\n :analytics\n  {:db #ref [:db-connection]}}\n```\n\nBoth `:analytics` and `:webserver` will have their `:db` keys resolved\nto `"datomic:dynamo://dynamodb"`\n\nReferences are recursive. They can be used in `#include` files.\n\n### Define your own\n\nAero supports user-defined tag literals. Just extend the `reader` multimethod.\n\n```clojure\n(defmethod reader \'mytag\n [{:keys [profile] :as opts} tag value]\n  (if (= value :favorite)\n     :chocolate\n     :vanilla))\n```\n\n## Deferreds\n\nSometimes you may not want your tag literal to be run during the EDN load, but only after the tree has fully loaded.\n\nFor example, you may have a :dev profile and a :prod profile. The :prod profile may require accessing an enterprise configuration store or key management service. You don\'t want that processing as part of the load, because it will also happen for :dev profiles.\n\nIn this case, you can return your tag literal\'s computation as a deferred value. For example:\n\n```\n(defmethod aero.core/reader \'aws-kms-decrypt\n  [_ tag value]\n  (aero/deferred (kms-decrypt-str value)))\n```\n\n## Recommended usage patterns, tips and advice\n\n### Hide passwords in local private files\n\nPasswords and other confidential information should not be stored in version control, nor be specified in environment variables. One alternative option is to create a private file in the HOME directory that contains only the information that must be kept outside version control (it is good advice that everything else be subject to configuration management via version control).\n\nHere is how this can be achieved:\n\n```clojure\n{:secrets #include #join [#env HOME "/.secrets.edn"]\n\n :aws-secret-access-key\n  #profile {:test #ref [:secrets :aws-test-key]\n            :prod #ref [:secrets :aws-prod-key]}}\n```\n\n### Use functions to wrap access to your configuration.\n\nHere\'s some good advice on using Aero in your own programs.\n\nDefine a dedicated namespace for config that reads the config and provides functions to access it.\n\n```clojure\n(ns myproj.config\n  (:require [aero.core :as aero]))\n\n(defn config [profile]\n  (aero/read-config "dev/config.edn" {:profile profile}))\n\n(defn webserver-port [config]\n  (get-in config [:webserver :port]))\n```\n\nThis way, you build a simple layer of indirection to insulate the parts of your program that access configuration from the evolving structure of the configuration file. If your configuration structure changes, you only have to change the wrappers, rather than locate and update all the places in your code where configuration is accessed.\n\nYour program should call the `config` function, usually with an argument specifying the configuration profile. It then returned value passes the returned value through functions or via lexical scope (possibly components).\n\n### Using Aero with Plumatic schema\n\nAero has frictionless integration with [Plumatic Schema](https://github.com/plumatic/schema). If you wish, specify your configuration schemas and run `check` or `validate` against the data returned from `read-config`.\n\n### Using Aero with components\n\nIf you are using Stuart Sierra\'s\n[component](https://github.com/stuartsierra/component) library, here\'s how you might integrate Aero.\n\n```clojure\n(ns myproj.server\n  (:require [myproj.config :as config]))\n\n(defrecord MyServer [config]\n  Lifecycle\n  (start [component]\n    (assoc component :server (start-server :port (config/webserver-port config))))\n  (stop [component]\n    (when-let [server (:server component)] (stop-server server))))\n\n(defn new-server [config]\n  (->MyServer config))\n```\n\n```clojure\n(ns myproj.system\n  [com.stuartsierra.component :as component]\n  [myproj.server :refer [new-server]])\n\n(defn new-production-system []\n  (let [config (config/config :prod)]\n    (system-using\n      (component/system-map :server (new-server config))\n      {})))\n```\n\nHowever, another useful pattern you might consider is to keep your system map and configuration map aligned.\n\nFor example, imagine you have a config file:\n\n```clojure\n{:listener {:port 8080}\n :database {:uri "datomic:mem://myapp/dev"}}\n```\n\nHere we create a system as normal but with the key difference that we configure the system map after we have created using `merge-with merge`. This avoids all the boilerplate required in passing config around the various component constructors.\n\n```clojure\n(defrecord Listener [database port]\n  Lifecycle \xe2\x80\xa6)\n\n(defn new-listener []\n  (using (map->Listener {}) [:database])\n\n(defrecord Database [uri]\n  Lifecycle \xe2\x80\xa6)\n\n(defn new-database []\n  (map->Database {}))\n\n(defn new-system-map\n  "Create a configuration-free system"\n  []\n  (system-map\n   :listener (new-listener)\n   :database (new-database)))\n\n(defn configure [system profile]\n  (let [config (aero/read-config "config.edn" {:profile profile})]\n    (merge-with merge system config)))\n\n(defn new-dependency-map [] {})\n\n(defn new-system\n  "Create the production system"\n  [profile]\n  (-> (new-system-map)\n      (configure profile)\n      (system-using (new-dependency-map))))\n```\n\nAlso, if you follow the pattern described [here](https://juxt.pro/blog/posts/component-meet-schema.html) you can also ensure accurate configuration is given to each component without having to maintain explicit schemas. This way, you only verify the config that you are actually using.\n\n### Feature toggles\n\nAero is a great way to implement [feature toggles](http://martinfowler.com/articles/feature-toggles.html).\n\n### Use a single configuration file\n\nIf at all possible, try to avoid having lots of configuration files and stick with a single file. That way, you\'re encouraged to keep configuration down to a minimum. Having a single file is also useful because it can be more easily edited, published, emailed, [watched](https://github.com/juxt/dirwatch) for changes. It is generally better to surface complexity than hide it away.\n\n## References\n\nAero is built on Clojure\'s [edn](https://github.com/edn-format/edn).\n\nAero is influenced by [nomad](https://github.com/james-henderson/nomad), but purposely avoids instance, environment and private config.\n\n## Acknowledgments\n\nThanks to the following people for inspiration, contributions, feedback and suggestions.\n\n* Gardner Vickers\n\n## Copyright & License\n\nThe MIT License (MIT)\n\nCopyright \xc2\xa9 2015 JUXT LTD.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n'