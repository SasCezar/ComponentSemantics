b'<img alt="Crux" role="img" aria-label="Crux" src="./docs/img/crux-logo-banner.svg">\n\n[![project chat](https://img.shields.io/badge/zulip-join_chat-brightgreen.svg)](https://juxt-oss.zulipchat.com/#narrow/stream/194466-crux)\n\nCrux is an open source document database with bitemporal graph queries. Java,\nClojure and HTTP APIs are provided.\n\nCrux follows an _unbundled_ architectural approach, which means that it is\nassembled from highly decoupled components through the use of semi-immutable\nlogs at the core of its design. Logs can currently be stored in LMDB or RocksDB\nfor standalone single-node deployments, or using Kafka for clustered\ndeployments. Indexes can currently be stored using LMDB or RocksDB.\n\nCrux is built for efficient bitemporal indexing of schemaless documents, and\nthis simplicity enables broad possibilities for creating layered extensions on\ntop, such as to add additional transaction, query, and schema capabilities.\nCrux does not currently support SQL but it does provide an EDN-based\n[Datalog](https://en.wikipedia.org/wiki/Datalog) query interface that can be\nused to express a comprehensive range of SQL-like join operations as well as\nrecursive graph traversals.\n\nCrux has been available as a *Public Alpha* since 19<sup>th</sup> April 2019.\nThe Public Alpha period will continue until Crux is released as a Generally\nAvailable open source software product by JUXT later in 2019.\n\n\n## CircleCI Build\n\n[![CircleCI](https://circleci.com/gh/juxt/crux.svg?style=svg&circle-token=867b84b6d1b4dfff332773f771457349529aee8b)](https://circleci.com/gh/juxt/crux)\n\n## Latest Release\n\n[![Clojars Project](https://img.shields.io/clojars/v/juxt/crux-core.svg)](https://clojars.org/juxt/crux-core)\n\n## Unbundled Architecture\n\nCrux embraces the transaction log as the central point of coordination when\nrunning as a distributed system. Use of a separate document log enables simple\neviction of active and historical data to assist with technical compliance for\ninformation privacy regulations.\n\n> What do we have to gain from turning the database inside out? Simpler code,\n> better scalability, better robustness, lower latency, and more flexibility for\n> doing interesting things with data.\n>\n> \xe2\x80\x94 Martin Kleppmann (2014)\n\n<img alt="Unbundled Architecture Diagram" role="img" aria-label="Crux Venn" src="./docs/img/crux-node-1.svg" width="1000px">\n\nThis design makes it feasible and desirable to embed Crux nodes directly in\nyour application processes, which reduces deployment complexity and eliminates\nround-trip overheads when running complex application queries.\n\n###\n\n## Data Model\n\n<img alt="Document database with graph queries" role="img" aria-label="Crux Venn" src="./docs/img/crux-venn-1.svg" width="500px">\n\nCrux is fundamentally a store of versioned EDN documents. The only requirement\nis that you specify a valid `:crux.db/id` key which links the documents to\ntheir corresponding entities. The fields within these documents are\nautomatically indexed as Entity-Attribute-Value triples to support efficient\ngraph queries. Document versions are indexed by `valid-time` (in addition to\n`transaction-time`) which allows you to model updates into the past, present or\nfuture.\n\nCrux supports a Datalog query interface for reading data and traversing\nrelationships across all documents. Queries are executed so that the results\nare lazily streamed from the underlying indexes. Queries can be made against\nconsistent point-in-time snapshots of your database from any Crux node\nconnected to the same transaction log, by specifying `transaction-time` and/or\n`valid-time`.\n\n## Documentation\n\nPlease visit our [official\ndocumentation](https://juxt.pro/crux/docs/index.html) to get started with Crux.\n\n## Try it with Docker\nSee [standalone webservice\nexample](https://github.com/juxt/crux/tree/master/docs/example/standalone_webservice)\nfor a demo Docker container.\n\n## Community & Contact\n\n[![project chat](https://img.shields.io/badge/zulip-join_chat-brightgreen.svg)](https://juxt-oss.zulipchat.com/#narrow/stream/194466-crux)\n\n### 3rd Party Modules\n* [avisi-apps/crux-xodus](https://github.com/avisi-apps/crux-xodus) - pure-JVM\n  alternative to `crux-rocksdb` and `crux-lmdb`\n* [avisi-apps/crux-active-objects](https://github.com/avisi-apps/crux-active-objects)\n  - TxLog implementation backed by Active Objects for use inside Atlassian\n    Addons\n\n### Companies using Crux\n\n* [Oscaro (eCommerce)](https://www.oscaro.com)\n* [Avisi (AtlasCRM)](https://www.avisi.nl/blog/crux-our-final-database-migration) - ["Crux: Our Final Database Migration"](https://www.avisi.nl/blog/crux-our-final-database-migration)\n* [Gnurdle (consulting)](https://gnurdle.github.io/HoppyResume2017.html)\n* Yours? Let us know :)\n\ncrux@juxt.pro\n\n## Repo Layout\n\nCrux is split across multiple projects which are maintained within this\nrepository. `crux-core` contains the main functional components of Crux along\nwith interfaces for the pluggable storage components (Kafka, LMDB, RocksDB\netc.). Implementations of these storage options are located in their own\nprojects.\n\nProject directories are published to Clojars independently so that you can\nmaintain granular dependencies on precisely the individual components needed\nfor your application. Alternatively you can depend on `crux-uberjar` whilst in\ndevelopment to spend less time worrying about which parts of Crux you need now\nor in the future.\n\n### Core\n\n#### crux-core\n\n[![Clojars Project](https://img.shields.io/clojars/v/juxt/crux-core.svg)](https://clojars.org/juxt/crux-core)\n\n### Cluster Node storage\n\n#### crux-kafka\n\nFor scalability and durability.\n\n[![Clojars Project](https://img.shields.io/clojars/v/juxt/crux-kafka.svg)](https://clojars.org/juxt/crux-kafka)\n\n#### crux-kafka-embedded\n\nUseful for experimentation and testing.\n\n[![Clojars Project](https://img.shields.io/clojars/v/juxt/crux-kafka-embedded.svg)](https://clojars.org/juxt/crux-kafka-embedded)\n\n### Local KV and Standalone mode storage\n\n#### crux-lmdb\n\nBetter read performance for intensive querying.\n\n[![Clojars Project](https://img.shields.io/clojars/v/juxt/crux-lmdb.svg)](https://clojars.org/juxt/crux-lmdb)\n\n#### crux-rocksdb\n\nBetter write performance for heavy ingestion.\n\n[![Clojars Project](https://img.shields.io/clojars/v/juxt/crux-rocksdb.svg)](https://clojars.org/juxt/crux-rocksdb)\n\n`crux-rocksdb` is a good default choice.\n\n### HTTP\n\n#### Server\n\n[![Clojars Project](https://img.shields.io/clojars/v/juxt/crux-http-server.svg)](https://clojars.org/juxt/crux-http-server)\n\n#### Client\n\n[![Clojars Project](https://img.shields.io/clojars/v/juxt/crux-http-client.svg)](https://clojars.org/juxt/crux-http-client)\n\n### Additional\n\n#### crux-decorators\n\nAggregation decorator and experimental API composition.\n\n[![Clojars Project](https://img.shields.io/clojars/v/juxt/crux-decorators.svg)](https://clojars.org/juxt/crux-decorators)\n\n#### crux-rdf\n\nImport RDF data and run a subset of SPARQL queries.\n\n[![Clojars Project](https://img.shields.io/clojars/v/juxt/crux-rdf.svg)](https://clojars.org/juxt/crux-rdf)\n\n### Uberjar\n\n#### crux-uberjar\n\nOne dependency to rule them all.\n\n[![Clojars Project](https://img.shields.io/clojars/v/juxt/crux-uberjar.svg)](https://clojars.org/juxt/crux-uberjar)\n\n## Using Clojure\n\nPlease note that Clojure is not _required_ when using Crux. HTTP and Java\nAPIs are also available.\n\n### REPL\n\nLaunch a REPL using the very latest Clojars `-SNAPSHOT` release:\n\n``` sh\nclj -Sdeps \'{:deps {juxt/crux-core {:mvn/version "RELEASE"}}}\'\n```\n\nStart a standalone in-memory (i.e. not persisted anywhere) node:\n\n``` clojure\n(require \'[crux.api :as crux])\n(import \'[crux.api ICruxAPI])\n\n(def my-node\n  (crux/start-node\n    {:crux.node/topology :crux.standalone/topology\n     :crux.node/kv-store "crux.kv.memdb/kv" ; see docs for LMDB/RocksDB storage options\n     :crux.standalone/event-log-dir "data/event-log-dir-1"\n     :crux.kv/db-dir "data/db-dir-1"}))\n```\n\n`put` a document:\n\n``` clojure\n(def my-document\n  {:crux.db/id :some/fancy-id\n   :arbitrary-key ["an untyped value" 123]\n   :nested-map {"and values" :can-be-arbitrarily-nested}})\n\n(crux/submit-tx my-node [[:crux.tx/put my-document]])\n```\n\nTake an immutable snapshot of the database:\n\n``` clojure\n(def my-db (crux/db my-node))\n```\n\nRetrieve the current version of the document:\n\n``` clojure\n(crux/entity my-db :some/fancy-id)\n```\n\n### Development "uber" REPL\n\n* To run a REPL that includes depedencies for all components of Crux, first build the sub-modules using `lein sub install`.\n* Then, `cd crux-dev` and `lein repl`.\n* Once you\'ve connected to the REPL, in the `user` namespace, run `(dev)` to load the dev namespace.\n* You can now `(start)`, `(stop)` and `(reset)` the Crux development system (amongst other things).\n* You should now have a running Crux node in the `dev/node` var - you can verify this by calling `(crux/status node)`.\n\n### Testing\n\nThe recommended way of running the primary tests is `lein build`.\n\n## Copyright & License\nThe MIT License (MIT)\n\nCopyright \xc2\xa9 2018-2019 JUXT LTD.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the "Software"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n### Dependencies\n\nA list of compiled dependencies and corresponding licenses is available\n[here](LICENSE-deps.adoc).\n'