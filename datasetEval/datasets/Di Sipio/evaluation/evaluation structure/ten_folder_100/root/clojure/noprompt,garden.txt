b'# Garden\n\nGarden is a library for rendering CSS in Clojure and ClojureScript.\nConceptually similar to [Hiccup](https://github.com/weavejester/hiccup), it uses\nvectors to represent rules and maps to represent declarations. It is designed\nfor stylesheet authors who are interested in what\'s possible when you trade a\npreprocessor for a programming language.\n\n## Table of Contents\n\n* [Getting Started](#getting-started)\n* [Syntax](#syntax)\n* [Development](#development)\n* [Community](#community)\n* [Help!](#help)\n\n\n## Getting Started\n\nAdd the following dependency to your `project.clj` file:\n\n[![Clojars Project](http://clojars.org/garden/latest-version.svg)](http://clojars.org/garden)\n\nGarden 1.2.5 and below requires Clojure 1.6.0 and is known to work with\nClojureScript 0.0-2342. However, starting with Garden 1.3.0 Garden requires\nClojure 1.7 and ClojureScript 1.7.x to leverage a unified syntax with\n[reader conditionals](http://dev.clojure.org/display/design/Reader+Conditionals),\nand other major changes in the compiler and repl in Clojurescript.\n\n## Syntax\n\nGarden syntax is very similar to\n[Hiccup](https://github.com/weavejester/hiccup). If you\'re familiar with Hiccup\nyou should feel right at home. If not, don\'t sweat it! Garden\'s syntax is\nsimple.\n\nFrom your project\'s root directory start up a new REPL and try the following:\n\n```clojure\nuser=> (require \'[garden.core :refer [css]])\nnil\nuser=> (css [:body {:font-size "16px"}])\n"body{font-size:16px}"\n```\n\nFirst you\'ll notice the use of the `css` function. This function takes an\noptional map of compiler flags, any number of rules, and returns a string of\ncompiled CSS.\n\nVectors represent rules in CSS. The first _n_ **non-collection** elements of a\nvector depict the rule\'s selector where _n_ > 0. When _n_ = 0 the rule is not\nrendered. To produce a rule which selects the `<h1>` and `<h2>` HTML elements\nfor example, we simply begin a vector with `[:h1 :h2]`:\n\n```clojure\nuser=> (css [:h1 :h2 {:font-weight "none"}])\n"h1,h2{font-weight:none}"\n```\n\nTo target **child selectors** nested vectors may be employed:\n\n```clojure\nuser=> (css [:h1 [:a {:text-decoration "none"}]])\n"h1 a{text-decoration:none}"\nuser=> (css [:h1 :h2 [:a {:text-decoration "none"}]])\n"h1 a, h2 a{text-decoration:none}"\n```\n\nAs in Less/Sass, Garden also supports selectors prefixed with the `&`\ncharacter allowing you to reference a **parent selector**:\n\n```clojure\nuser=> (css [:a\n             {:font-weight \'normal\n              :text-decoration \'none}\n             [:&:hover\n              {:font-weight \'bold\n               :text-decoration \'underline}]])\n"a{text-decoration:none;font-weight:normal}a:hover{text-decoration:underline;font-weight:bold}"\n```\n\nA slightly more complex example demonstrating nested vectors with multiple\nselectors:\n\n```clojure\nuser=> (css [:h1 :h2 {:font-weight "normal"}\n             [:strong :b {:font-weight "bold"}]])\n"h1,h2{font-weight:normal}h1 strong,h1 b,h2 strong,h2 b{font-weight:bold}"\n```\n\n`garden.selectors` namespace defines a CSSSelector record. It doubles as both a\nfunction and a literal (when passed to the css-selector). When the function is\ncalled it will return a new instance that possesses the same properties. All\narguments to the function must satisfy ICSSSelector.\n\n`garden.selectors` namespace also defines these macros that create a selector\nrecord: `defselector`, `defclass`, `defid`, `defpseudoclass` and\n`defpseudoelement`.\n\n`garden.selectors` namespace also defines many CSSSelector instances such as:\n\n* Type selectors `a`, `abbr`, `address` and [more](src/garden/selectors.cljc)\n* Pseudo-classes `active`, `checked`, `disabled` and\n  [more](src/garden/selectors.cljc)\n* Language and negation pseudo-classes `lang` and `not`\n* Structural pseudo-classes `nth-child`, `nth-last-child`, `nth-of-type` and\n  `nth-last-of-type`\n* Pseudo-elements `after`, `before`, `first-letter` and `first-line`\n* Attribute selectors `attr=`, `attr-contains`, `attr-starts-with`,\n  `attr-starts-with*`, `attr-ends-with` and `attr-matches`\n* Combinators `descendant`, `+`, `-` and `>`\n* Special selector `&`\n\nand allows to compose complex selectors such as this:\n\n```clojure\n(defselector *)\n(defpseudoclass host [x] x)\n(defpseudoelement content)\n(> (host (attr :flipped)) content (* last-child))\n;; => :host([flipped]) > ::content > *:last-child\n```\n\n`garden.selectors` namespace also defines a CSS3 selectors\'s `specificity`\nfunction:\n\n```clojure\n(specificity "#s12:not(FOO)")\n;; => 101\n(specificity (a hover))\n;; => 10\n```\n\nClojure maps represent CSS declarations where map keys and values represent CSS\nproperties and values respectively. Garden\'s declaration syntax is a bit more\ninvolved than rules and understanding it is important to make the most of the\nlibrary.\n\nDeclaration map keys _should_ either be a string, keyword, or symbol:\n\n```clojure\nuser=> (css [:h1 {"font-weight" "normal"}])\n"h1{font-weight:normal}"\nuser=> (css [:h1 {:font-weight "normal"}])\n"h1{font-weight:normal}"\nuser=> (css [:h1 {\'font-weight "normal"}])\n"h1{font-weight:normal}"\n```\n\nBe aware, Garden makes no attempt to validate your declarations and\nwill not raise an error if other key types are used.\n\n```clojure\nuser=> (css [:h1 {30000 "nom-nom"}])\n"h1{30000:nom-nom}"\n```\n\nWe\'ve already seen strings used as declaration map values, but Garden also\nsupports keywords, symbols, numbers, maps, vectors, and lists in addition.\n\n##### Custom functions\n\nSince Garden doesn\'t have wrappers for all the possible CSS functions,\nsometimes you might need to define the function you need yourself.\nThis is where the `defcssfn` macro comes in handy.\nSuppose you want to use the `url` CSS function, even if it\'s not available\nin Garden directly you can just define it yourself by simply:\n\n```\n(defcssfn url)\n;; => #\'user/url\n```\n\nWhich will render like this:\n```\n(css (url "http://fonts.googleapis.com/css?family=Lato"))\n;; => url(http://fonts.googleapis.com/css?family=Lato)\n```\n\n##### Strings, keywords, symbols, and numbers\n\nStrings, keywords, symbols, and numbers are rendered as literal CSS values:\n\n```clojure\nuser=> (css [:body {:font "16px sans-serif"}])\n"body{font:16px sans-serif}"\n```\n\nBe warned, you must escape literal string values yourself:\n\n```clojure\nuser=> (css [:pre {:font-family "\\"Liberation Mono\\", Consolas, monospace"}])\n"pre{font-family:\\"Liberation Mono\\", Consolas, monospace}"\n\n```\n\n## Development\n\n### Leiningen commands\n\nBuilding ClojureScript\n\n```\nlein build-cljs\n```\n\nStarting a Node REPL\n\n```\nlein node-repl\n```\n\nRun Clojure tests, along with a test runner\n\n```\nlein test-clj\n```\n\nRun ClojureScript tests (on Node)\n\n```\nlein test-cljs\n```\n\nRun both Clojure _and_ ClojureScript tests\n\n```\nlein test-cljc\n```\n\n\n## Further Reading & Wiki\n\nDetailed documentation and a developer guide for Syntax, Rules, Declarations,\nand Plugins is under the community-contributed\n[wiki](https://github.com/noprompt/garden/wiki).\n\nPlease contribute!\n\n\n## Contributors\n\nListed by first commit:\n\n* [noprompt](https://github.com/noprompt)\n* [malcolmsparks](https://github.com/malcolmsparks)\n* [jeluard](https://github.com/jeluard)\n* [ToBeReplaced](https://github.com/ToBeReplaced)\n* [migroh](https://github.com/migroh)\n* [priyatam](https://github.com/priyatam)\n\n## Help!\n\nThis project is looking for team members who can help this project succeed!\nSpecifically of interest are people who can \n\n* help fix bugs,\n* answer questions,\n* merge pull requests, and\n*  deploy new versions.\n\nIf you are interested in becoming a team member please open an issue and direct\nmessage @noprompt, or direct message @noprompt on\n[Clojurians](https://clojurians.slack.com).\n\nThe original author, @noprompt, is a busy person with a family, a job, and\nother projects. Be aware that it may take some time for pull requests to be\nevaluated.\n\n\n## Community\n\n### Mailing List\n\n* [Google Groups](https://groups.google.com/forum/#!forum/garden-clojure)\n\n### Slack\n\n* #clojurescript or #css channel on [Clojurians](https://clojurians.slack.com)\n\n## License\n\nCopyright \xc2\xa9 2013-2019 Joel Holdbrooks.\n\nDistributed under the Eclipse Public License, the same as Clojure.\n'