b'# Compojure-api [![Build Status](https://api.travis-ci.org/metosin/compojure-api.svg?branch=master)](https://travis-ci.org/metosin/compojure-api)\n\nStuff on top of [Compojure](https://github.com/weavejester/compojure) for making sweet web apis.\n\n- [Schema](https://github.com/Prismatic/schema) & [clojure.spec](https://clojure.org/about/spec) (2.0.0) for input & output data coercion\n- [Swagger](http://swagger.io/) for api documentation, via [ring-swagger](https://github.com/metosin/ring-swagger) & [spec-tools](https://github.com/metosin/spec-tools)\n- [Async](https://github.com/metosin/compojure-api/wiki/Async) with async-ring, [manifold](https://github.com/ztellman/manifold) and [core.async](https://github.com/clojure/core.async) (2.0.0)\n- Client negotiable formats: [JSON](http://www.json.org/), [EDN](https://github.com/edn-format/edn) & [Transit](https://github.com/cognitect/transit-format), optionally [YAML](http://yaml.org/) and [MessagePack](http://msgpack.org/)\n- Data-driven [resources](https://github.com/metosin/compojure-api/wiki/Resources-and-Liberator)\n- [Bi-directional](https://github.com/metosin/compojure-api/wiki/Routing#bi-directional-routing) routing\n- Bundled middleware for common api behavior ([exception handling](https://github.com/metosin/compojure-api/wiki/Exception-handling), parameters & formats)\n- Extendable route DSL via [metadata handlers](https://github.com/metosin/compojure-api/wiki/Creating-your-own-metadata-handlers)\n- Route functions & macros for putting things together, including the [Swagger-UI](https://github.com/wordnik/swagger-ui) via [ring-swagger-ui](https://github.com/metosin/ring-swagger-ui)\n- Requires Clojure 1.9.0 & Java 1.8\n\n[API Docs](http://metosin.github.io/compojure-api/doc/) & [Wiki](https://github.com/metosin/compojure-api/wiki)\n\n## Latest version\n\n[![Clojars Project](http://clojars.org/metosin/compojure-api/latest-version.svg)](http://clojars.org/metosin/compojure-api)\n\nLatest non-alpha: `[metosin/compojure-api "1.1.13"]`.\n\nSee [CHANGELOG](https://github.com/metosin/compojure-api/blob/master/CHANGELOG.md) for details.\n\n## For information and help\n\n### [Read the Version 1.0 Blog Post](http://www.metosin.fi/blog/compojure-api-100/)\n\n### [Schema & Spec Coercion with 2.0.0](https://github.com/metosin/compojure-api/wiki/Coercion)\n\n### [Check wiki for documentation](https://github.com/metosin/compojure-api/wiki)\n\n[Clojurians slack](https://clojurians.slack.com/) ([join](http://clojurians.net/)) has a channel [#ring-swagger](https://clojurians.slack.com/messages/ring-swagger/) for talk about any libraries using Ring-swagger. You can also ask questions about Compojure-api and Ring-swagger on other channels at Clojurians Slack or at #clojure on Freenode IRC (mention `compojure-api` or `ring-swagger` to highlight us).\n\n## Examples\n\n### Hello World Api\n\n```clj\n(require \'[compojure.api.sweet :refer :all])\n(require \'[ring.util.http-response :refer :all])\n\n(def app\n  (api\n    (GET "/hello" []\n      :query-params [name :- String]\n      (ok {:message (str "Hello, " name)}))))\n```\n\n### Hello World, async\n\n```clj\n(require \'[compojure.api.sweet :refer :all])\n(require \'[clojure.core.async :as a])\n\n(GET "/hello-async" []\n  :query-params [name :- String]\n  (a/go\n    (a/<! (a/timeout 500))\n    (ok {:message (str "Hello, " name)})))\n```\n\n<sub>* requires server to be run in [async mode](https://github.com/metosin/compojure-api/wiki/Async)</sub>\n\n### Hello World, async & data-driven\n\n```clj\n(require \'[compojure.api.sweet :refer :all])\n(require \'[clojure.core.async :as a])\n(require \'[schema.core :as s])\n\n(context "/hello-async" []\n  (resource\n    {:get\n     {:parameters {:query-params {:name String}}\n      :responses {200 {:schema {:message String}}\n                  404 {}\n                  500 {:schema s/Any}}\n      :handler (fn [{{:keys [name]} :query-params}]\n                 (a/go\n                   (a/<! (a/timeout 500))\n                   (ok {:message (str "Hello, " name)})))}}))\n```\n\n<sub>* Note that empty body responses can be specified with `{}` or `{:schema s/Any}`\n\n### Hello World, async, data-driven & clojure.spec\n\n```clj\n(require \'[compojure.api.sweet :refer :all])\n(require \'[clojure.core.async :as a])\n(require \'[clojure.spec.alpha :as s])\n\n(s/def ::name string?)\n(s/def ::message string?)\n\n(context "/hello-async" []\n  (resource\n    {:coercion :spec\n     :get {:parameters {:query-params (s/keys :req-un [::name])}\n           :responses {200 {:schema (s/keys :req-un [::message])}}\n           :handler (fn [{{:keys [name]} :query-params}]\n                      (a/go\n                        (a/<! (a/timeout 500))\n                        (ok {:message (str "Hello, " name)})))}}))\n```\n\n### Api with Schema & Swagger-docs\n\n```clj\n(require \'[compojure.api.sweet :refer :all])\n(require \'[schema.core :as s])\n\n(s/defschema Pizza\n  {:name s/Str\n   (s/optional-key :description) s/Str\n   :size (s/enum :L :M :S)\n   :origin {:country (s/enum :FI :PO)\n            :city s/Str}})\n\n(def app\n  (api\n    {:swagger\n     {:ui "/api-docs"\n      :spec "/swagger.json"\n      :data {:info {:title "Sample API"\n                    :description "Compojure Api example"}\n             :tags [{:name "api", :description "some apis"}]\n             :consumes ["application/json"]\n             :produces ["application/json"]}}}\n\n    (context "/api" []\n      :tags ["api"]\n\n      (GET "/plus" []\n        :return {:result Long}\n        :query-params [x :- Long, y :- Long]\n        :summary "adds two numbers together"\n        (ok {:result (+ x y)}))\n\n      (POST "/echo" []\n        :return Pizza\n        :body [pizza Pizza]\n        :summary "echoes a Pizza"\n        (ok pizza)))))\n```\n\n![swagger-api](https://raw.githubusercontent.com/wiki/metosin/compojure-api/swagger-api.png)\n\n## More samples\n\n* official samples: https://github.com/metosin/compojure-api/tree/master/examples\n* great full app: https://github.com/yogthos/memory-hole\n* 2.0.0 sample: https://github.com/metosin/c2\n* RESTful CRUD APIs Using Compojure-API and Toucan: https://www.demystifyfp.com/clojure/blog/restful-crud-apis-using-compojure-api-and-toucan-part-1/\n* clojurice, An opinionated starter app for full-stack web applications in Clojure: https://github.com/jarcane/clojurice\n* Web Development with Clojure, Second Edition: https://pragprog.com/book/dswdcloj2/web-development-with-clojure-second-edition\n\nTo try it yourself, clone this repository and do either:\n\n1. `lein run`\n2. `lein repl` & `(go)`\n\n## Quick start for a new project\n\nUse a Leiningen template, with or without tests:\n\n```\nlein new compojure-api my-api\nlein new compojure-api my-api +midje\nlein new compojure-api my-api +clojure-test\n```\n\n## License\n\nCopyright \xc2\xa9 2014-2018 [Metosin Oy](http://www.metosin.fi)\n\nDistributed under the Eclipse Public License, the same as Clojure.\n'