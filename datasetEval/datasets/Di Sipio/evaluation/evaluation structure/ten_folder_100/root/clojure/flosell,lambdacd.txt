b'<img src="doc/img/lambdacd-logo.png" width="125px"/>\n\n# LambdaCD\n\n\n* it\'s a continuous delivery pipeline, in code\n* it\'s your own custom built Jenkins/Go/TeamCity/..., in clojure\n\n\n## Status\n\n[![Clojars Project](http://clojars.org/lambdacd/latest-version.svg)](http://clojars.org/lambdacd)\n\n[![Build Status](https://travis-ci.org/flosell/lambdacd.svg?branch=master)](https://travis-ci.org/flosell/lambdacd)\n\n## Getting started\n\n* Make sure you have [Leiningen](http://leiningen.org) and a recent version of \n  [JDK](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html) installed\n* `lein new lambdacd <NAME>` will create a new pipeline-project\n* `cd <NAME>`\n* `lein run` downloads all dependencies and starts the server; the UI is then served on on [http://localhost:8080](http://localhost:8080)\n* your pipeline is defined in `src/<NAME>/`. Have a look around, change some steps or add some steps on your own\n* For more details, check out the resources and related projects below \n\n\n## Example\n\n```clojure\n;; buildsteps\n(def some-repo "git@github.com:flosell/somerepo")\n\n(defn wait-for-repo [_ ctx]\n  (git/wait-for-git ctx some-repo "master"))\n\n(defn ^{:display-type :container} with-repo [& steps]\n  (git/with-git some-repo steps))\n\n(defn run-tests [{cwd :cwd} ctx]\n  (shell/bash ctx cwd\n    "lein test"))\n\n(defn compile-and-deploy [{cwd :cwd} ctx]\n  (shell/bash ctx cwd\n    "./buildscripts/compile-and-deploy.sh"))\n\n;; the pipeline\n(def pipeline\n  `(\n     (either\n       wait-for-manual-trigger\n       wait-for-repo)\n     (with-repo\n       run-tests\n       compile-and-deploy)))\n```\n\n## Screenshot\n\n![Screenshot](doc/img/readme-screenshot.png)\n\n## Chat\n\n* `#lambdacd` on the [clojurians slack](https://clojurians.slack.com/messages/lambdacd/)\n* `#lambdacd` on [gitter](https://gitter.im/flosell/lambdacd)\n\n## Resources\n\n* [Getting Started](http://www.lambda.cd/getting-started/)\n* [FAQ](doc/FAQ.md)\n* [How to do ...](doc/howto.md)\n* [Wiki Documentation](https://github.com/flosell/lambdacd/wiki)\n* [Talk at ClojureD 2016 (Video)](https://youtu.be/XXiAS_BEDhQ)\n* Detailed Tutorial: [doc/walkthrough.md](doc/walkthrough.md)\n* A complete LambdaCD infrastructure in code: https://github.com/flosell/devops-101-lambdacd\n* Documented Sample-Code: [example/clj/todopipeline](example/clj/todopipeline)\n* Blog Post on LambdaCD at Otto including tutorial: http://dev.otto.de/2015/06/29/microservices-ci-with-lambdacd-microservices-and-continuous-integration-with-lambdacd-23/\n\n## Related projects\n\n* [lambda-ui](https://github.com/sroidl/lambda-ui): Opinionated alternative user-interface with improved usability\n* [lambdacd-git](https://github.com/flosell/lambdacd-git): Next generation of Git support for LambdaCD. Will replace the functionality in the core `lambdacd.steps.git` namespace in the future\n* [lambdacd-cctray](https://github.com/flosell/lambdacd-cctray): Support for cctray.xml to integrate LambdaCD with build monitoring tools such as [nevergreen](http://nevergreen.io/) or [CCMenu](http://ccmenu.org/)\n* [lambdacd-artifacts](https://github.com/flosell/lambdacd-artifacts): Makes arbitrary build-artifacts (test-results, binaries, ...) available on LambdaCD\n* [lambdacd-junit](https://github.com/thilo11/lambdacd-junit): Makes JUnit test reports available in LambdaCD \n* [lambdacd-cron](https://github.com/felixb/lambdacd-cron): A cron trigger for your LambdaCD\n* [lambdacd-mongodb](https://github.com/SimonMonecke/lambdacd-mongodb): Alternative persistence backend for LambdaCD, saving the pipeline state into MongoDB instead of the filesystem\n* [machroput](https://github.com/otto-de/machroput): LambdaCD-aware library simplifying deployments into a Mesos Cluster running [Marathon](https://github.com/mesosphere/marathon) or [Chronos](https://github.com/mesos/chronos)\n\n## Contribute\n\nI\'d love to hear from you! If you have a question, a bug report or feature request please reach out.\n\nFor details, refer to the [contribution guide](CONTRIBUTING.md)\n\n## Development\n\nLambdaCD is built in Clojure and ClojureScript with [Leiningen](http://leiningen.org) as a build-tool.\nThe `./go` script is your main entry-point that wraps all important development tasks.\nCall it without arguments to see all the options.\n\n### General Setup \n\n* Call `./go setup` to install necessary dependencies and build everything once. \n\n### Core Development\n\n* Sources for the core of LambdaCD can be found in `src/clj`, tests in `test/clj`.\n* Run tests with `./go test-clj`\n* To run a sample-pipeline (see `example/clj`), run `./go serve`. You may have to run `./go serve-cljs` occasionally to\n  generate the frontend JS code from ClojureScript.\n* If you want the example pipeline to be green (which is not necessary for all development), you first need to setup a\n  mock-deployment environment on your machine (two VMs where we deploy a TodoMVC client and server):\n  * install [Vagrant](http://www.vagrantup.com/downloads.html)\n  * have github-access set up (you need to be able to clone with ssh)\n  * `./go setupTodopipelineEnv` starts up two VMs in vagrant where we deploy to and exports the ssh-config for them so that it can be used by the deployment scripts\n\n### Frontend Development\n\n* The frontend is written in ClojureScript using [Reagent](https://github.com/reagent-project/reagent) and [re-frame](https://github.com/Day8/re-frame)\n* Frontend resources can be found in `resources/public`, ClojureScript code in `src/cljs`, tests in `test/cljs`\n* Stylesheets are written in are in [Less](http://lesscss.org/) and can be found in `src/less`\n* ClojureScript code needs to be compiled into JS before being useful\n* In three terminals, run `./go serve` to start an example pipeline (if you want it to be green, follow the environment\n  setup above), `./go serve-cljs` to start a ClojureScript REPL and automatic code-reloading using\n  [Figwheel](https://github.com/bhauman/lein-figwheel) and `./go serve-css` to run the css autoprefixer watch\n* Run `./go test-cljs` to run frontend-tests or `./go test-cljs-auto` to start autotest\n\n\n## License\n\nCopyright \xc2\xa9 2014 Florian Sellmayr\n\nDistributed under the Apache License 2.0\n'