b"# Duct\n\nDuct is a highly modular framework for building server-side\napplications in Clojure using data-driven architecture.\n\nIt is similar in scope to [Arachne][], and is based on [Integrant][].\nDuct builds applications around an immutable configuration that acts\nas a structural blueprint. The configuration can be manipulated and\nqueried to produce sophisticated behavior.\n\n[integrant]: https://github.com/weavejester/integrant\n[arachne]: http://arachne-framework.org/\n\n\n## Upgrading\n\nSee: [UPGRADING.md](https://github.com/duct-framework/duct/blob/master/UPGRADING.md).\n\n\n## Quick Start\n\nTo create a new Duct project with Leiningen:\n\n```sh\nlein new duct <your project name>\n```\n\nThis will create a minimal Duct project. You can extend this by\nappending profile hints to add extra functionality.\n\n* `+api`      adds API middleware and handlers\n* `+ataraxy`  adds the Ataraxy router\n* `+cljs`     adds in ClojureScript compilation and hot-loading\n* `+example`  adds an example handler\n* `+heroku`   adds configuration for deploying to Heroku\n* `+postgres` adds a PostgreSQL dependency and database component\n* `+site`     adds site middleware, a favicon, webjars and more\n* `+sqlite`   adds a SQLite dependency and database component\n\nFor example:\n\n```sh\nlein new duct foobar +site +example\n```\n\nAs with all Leiningen templates, Duct will create a new directory with\nthe same name as your project. For information on how to run and build\nyour project, refer to the project's `README.md` file.\n\n\n## Concepts\n\nThe structure of the application is defined by an Integrant configuration map.\n\nIn development, Duct uses Stuart Sierra's [Reloaded Workflow][reloaded].\n\nIn production, Duct follows the [Twelve-Factor App][12-factor] methodology.\n\nLocal state is preferred over global state.\n\nNamespaces should group functions by purpose, rather than by layer.\n\nProtocols should be used to wrap external APIs.\n\n[12-factor]: http://12factor.net/\n[reloaded]: http://thinkrelevance.com/blog/2013/06/04/clojure-workflow-reloaded\n\n\n## Structure\n\nDuct adds a layer of abstraction on top of Integrant. In Integrant,\na configuration map is **initiated** into a running system map.\n\n    \xe2\x94\x8c\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x90   \xe2\x94\x8c\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x90\n    \xe2\x94\x82 config \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80>\xe2\x94\x82 system \xe2\x94\x82\n    \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x98   \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x98\n\nIn Duct, the configuration is initiated twice. The configuration is\nfirst initiated into an intermediate configuration, which in turn is\ninitiated into the system:\n\n    \xe2\x94\x8c\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x90   \xe2\x94\x8c\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x90   \xe2\x94\x8c\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x90\n    \xe2\x94\x82 config \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80>\xe2\x94\x82 intermediate \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80>\xe2\x94\x82 system \xe2\x94\x82\n    \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x98   \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x98   \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x98\n\nIn the same way that higher-order functions allow us to abstract\ncommon patterns of code, Duct's layered configurations allow us to\nabstract common patterns of configuration.\n\nKeys in a Duct configuration are expected to initiate into functions\nthat transform a configuration map. There are two broad types:\n**profiles**, which merge their value into the configuration, and\n**modules**, which provide more complex manipulation.\n\n\n## Documentation\n\n* [Getting Started](https://github.com/weavejester/duct/wiki/Getting-Started)\n* [Configuration](https://github.com/weavejester/duct/wiki/Configuration)\n\n\n## Community\n\n* [Google Group](https://groups.google.com/forum/#!forum/duct-clojure)\n* #duct on [Clojurians Slack](http://clojurians.net/)\n\n\n## File structure\n\nDuct projects are structured as below. Files marked with a * are kept\nout of version control.\n\n```handlebars\n{{project}}\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 README.md\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 dev\n\xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 resources\n\xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 dev.edn\n\xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 local.edn *\n\xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 src\n\xe2\x94\x82\xc2\xa0\xc2\xa0     \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 dev.clj\n\xe2\x94\x82\xc2\xa0\xc2\xa0     \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 local.clj *\n\xe2\x94\x82\xc2\xa0\xc2\xa0     \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 user.clj\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 profiles.clj\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 project.clj\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 resources\n\xe2\x94\x82   \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 {{project}}\n\xe2\x94\x82\xc2\xa0\xc2\xa0     \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 config.edn\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 src\n\xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 duct_hierarchy.edn\n\xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 {{project}}\n\xe2\x94\x82\xc2\xa0\xc2\xa0     \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 main.clj\n\xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 test\n    \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 {{project}}\n```\n\n\n## License\n\nCopyright \xc2\xa9 2019 James Reeves\n\nDistributed under the MIT license.\n"