b'# CircleCI\'s frontend\n\n[![CircleCI](https://circleci.com/gh/circleci/frontend.svg?style=svg)](https://circleci.com/gh/circleci/frontend)\n\nThis is an open-source mirror of the code that is running\n[CircleCI\'s](https://circleci.com) frontend. CircleCI provides powerful\nContinuous Integration and Deployment with easy setup and maintenance.\n\nFeel free to fork and make contributions. We\'ll try to get them into the main\napplication.\n\nWatch [@brandonbloom](https://github.com/brandonbloom)\'s Clojure/West talk, [Building CircleCI\'s Frontend with Om](https://www.youtube.com/watch?v=LNtQPSUi1iQ), for a quick overview.\n\nWant to work with Clojure(Script) full-time? [We\'re hiring](https://circleci.com/jobs).\n\n\n## Dependencies and Setup\n\n### Node.js\n\nInstall [Node.js](http://nodejs.org/) and node dependencies:\n\n```\nnpm install\n```\n\nDownload all of the 3rd-party javascript dependencies:\n\n```\nnode_modules/.bin/bower install\n```\n\n### Clojure\n\nInstall [Leiningen](http://leiningen.org/).\n\n**Note:** You can also install leiningen via homebrew with `brew install leiningen`\n\n### nginx\n\nYou\'ll need to install nginx to serve the site over `https` - we\nrequire local development to use SSL to support using development\nbackends against production APIs in a secure way.\n\n```\n# first, install nginx\nbrew update\nbrew install nginx\n\n# next, create a self-signed certificate\ncd nginx/etc/nginx/ssl\nsudo openssl req -batch -new \\\n      -x509 -newkey rsa:2048 -sha256 -nodes -days 365 \\\n      -subj \'/C=US/ST=California/L=San Francisco/O=CircleCI/CN=*.circlehost\' \\\n      -keyout star.circlehost.key \\\n      -out star.circlehost.crt\n```\n\n### Hosts\n\nIn your `/etc/hosts`, add the following line:\n\n```\n127.0.0.1 prod.circlehost\n```\n\nIf you have access to the backend code, you can also add this line:\n\n```\n127.0.0.1 dev.circlehost\n```\n**Note:** Whichever of these you use _must_ be in your `/etc/hosts` to get\n`lein figwheel` to run properly (steps in the next section)\n\n## Usage\n\n### Development Processes\n\nYou can use [foreman](https://github.com/ddollar/foreman#installation) (or goreman) to run the frontend and nginx.\n\n```\nforeman start # (or) goreman start\n```\n\nIf you\'re using Docker for Mac, you can also use `docker-compose`, in which case you need to start figwheel separately.\n\n```\ndocker-compose up -d\nlein figwheel dev devcards\n```\n\nThen visit https://prod.circlehost:4443 or https://dev.circlehost:4443 (if you\nhave access and have set it up) in your browser.\n\nTo log into using the production backend, visit https://prod.circlehost:4443/dashboard.\n(`https://prod.circlehost:4443` redirects to outer in a vicious cycle.)\n\n### Viewing documentation changes\n\nTo see documentation locally you have to compile the docs manifest, like:\n\n```\nlein run -m frontend.tasks.http/precompile-assets\n```\n\nIf you add a new document, you will have to re-run that; but if you just change\none of the existing documents it should show up with just a page refresh.\n\n### Running the Tests\n\nThere are two main ways for running tests using the plugin `lein doo`. If you wish to run the tests only once, you can do that with\n\n```\nlein doo chrome dev-test once\n```\n\nTo have a process watch for changes and run the tests every time you make changes, you can run\n\n```\nlein doo chrome dev-test auto\n```\n\nThe default option is `auto`, so it will run in that state if you ommit that argument. You can also use `phantom `, `firefox`, and a variety of our js enviornments to run the tests on. For full documentation read [lein doo\'s README](https://github.com/bensu/doo/)\n\n### Adding Tests\n\nTo add a test you can either create a new test in an existing ns using `deftest`, or create a new ns. However, if you add a new ns it will not automatically be added to the test runner, to do that add it to the list of test ns\'s in `test-cljs/frontend/test_runner.cljs`.\n\n### Asset Compilation Errors\n\nIf you are experiencing errors when building assets the following commands may\nhelp reset all cached state:\n\n```\nlein clean\n./node_modules/bower/bin/bower install\nlein cljsbuild once\n```\n\n### Sanity Check\n\nTo test that everything worked, visit\nhttps://prod.circlehost:4443/assets/css/app.css and\nhttps://prod.circlehost:4443/assets/js/om-dev.js.stefon in your browser.\n\n### Production & Development Backends\n\nNow you should have everything you need to start hacking on Circle\'s frontend!\n\nVisit https://prod.circlehost:4443 for the a production backend\nwith locally build development assets. Again, if you\'ve got access to the\nbackend code (NOTE: it\'s not open source), you can run it locally on\n`circlehost:8080`. To connect to the development backend, visit\nhttps://dev.circlehost:4443. The dev server will default to dev assets, so you\ndon\'t need the query parameter.\n\n### Browser REPL\n\nFigwheel runs its own bREPL, which you\'ll see on the terminal at your `lein figwheel dev`. You can also run an additional bREPL over nREPL to connect Cider (or similar) to it. First, connect to the nREPL at localhost:7888. (This port is defined in project.clj.) Then, at the Cider REPL:\n\n```clojure\n(figwheel-sidecar.repl/cljs-repl "dev")\n```\n\nUnfortunately for vim-fireplace, Figwheel doesn\'t expose the repl-env to pass to `:Piggieback` in any nice way. (If you\'d like to work on making it possible, have a look at `figwheel-sidecar.repl/repl-env`. Unfortunately, it takes an entire build map as an argument, rather than just a build ID, as `figwheel-sidecar.repl/cljs-repl` does.) However, you can still run an out-of-browser Rhino REPL using `:Piggieback` (which vim-fireplace will probably run for you automatically.)\n\n### Better Cider Support\n\nI couldn\'t get the browser repl to work at all using `cider-connect`, and `cider` requires `cemerick.com/piggieback` in order to support a lot of its features, including jumping to definitions.\n\nHere\'s an alternative method for `cider` users and possibly others who are dependent on `piggieback`.\n\nFirst, start the `nginx` and `web` processes using foreman.\n\n```\nforeman start -f Procfile.alt\n```\n\nThen either start a new repl with\n\n```\nlein repl\n```\n\nor use the `cider-jack-in` command in emacs. Note this is *not* the `cider-jack-in-clojurescript` command. Once the repl is established, execute the following code:\n\n```clojure\nfrontend.core> (use \'figwheel-sidecar.repl-api)\n=> nil\nfrontend.core> (start-figwheel!)\nFigwheel: Starting server at http://localhost:3449\nFigwheel: Watching build - dev\nCompiling "resources/public/cljs/out/frontend-dev.js" from ["src-cljs" "test-cljs"]...\nSuccessfully compiled "resources/public/cljs/out/frontend-dev.js" in 5.547 seconds.\nFigwheel: Starting CSS Watcher for paths  ["resources/assets/css"]\nFigwheel: Starting nREPL server on port: 7888\n=> #<SystemMap>\nfrontend.core> (cljs-repl)\nLaunching ClojureScript REPL for build: dev\nFigwheel Controls:\n          (stop-autobuild)                ;; stops Figwheel autobuilder\n          (start-autobuild [id ...])      ;; starts autobuilder focused on optional ids\n          (switch-to-build id ...)        ;; switches autobuilder to different build\n          (reset-autobuild)               ;; stops, cleans, and starts autobuilder\n          (reload-config)                 ;; reloads build config and resets autobuild\n          (build-once [id ...])           ;; builds source one time\n          (clean-builds [id ..])          ;; deletes compiled cljs target files\n          (print-config [id ...])         ;; prints out build configurations\n          (fig-status)                    ;; displays current state of system\n  Switch REPL build focus:\n          :cljs/quit                      ;; allows you to switch REPL to another build\n    Docs: (doc function-name-here)\n    Exit: Control+C or :cljs/quit\n Results: Stored in vars *1, *2, *3, *e holds last exception object\nPrompt will show when Figwheel connects to your application\nTo quit, type: :cljs/quit\n=> nil\ncljs.user>\n```\n\nNow the middleware should be loaded and emacs `cider` navigation should work.\n\n### CLJS Dev Tools\n\n[Dirac](https://github.com/binaryage/dirac) is a fork of Chrome DevTools that works for ClojureScript.\n\nRequirements:\n\n1. Google Chrome\n\nRunning devtools:\n\n1. Run the frontend as usual with `foreman`\n2. In another terminal, `cd` to the project directory and run `./script/devtools.sh`. This will open a Chrome window capable of running dev tools.\n3. Install the Dirac devtools [Chrome extension](https://chrome.google.com/webstore/detail/dirac-devtools/kbkdngfljkchidcjpnfcgcokkbhlkogi?hl=en) in *the instance of Chrome that was started by `devtools.sh`*. This only needs to be done the first time you use Dirac.\n4. Click on the Dirac extension icon to the right of the address bar to open the dev tools.\n5. Toggle CLJS on/off by pressing pgUp/pgDn (fn + up/down arrow on Mac) with focus on the prompt field.\n'