b'# Environ\n\nEnviron is a Clojure library for managing environment settings from a\nnumber of different sources. It works well for applications following\nthe [12 Factor App](http://12factor.net/) pattern.\n\nCurrently, Environ supports four sources, resolved in the following\norder:\n\n1. A `.lein-env` file in the project directory\n2. A `.boot-env` file on the classpath\n3. Environment variables\n4. Java system properties\n\nThe first two sources are set by the lein-environ and boot-environ\nplugins respectively, and should not be edited manually.\n\nThe `.lein-env` file is populated with the content of the `:env` key\nin the Leiningen project map. The `.boot-env` file is populated by the\n`environ.boot/environ` Boot task.\n\n\n## Installation\n\nInclude the following dependency in your `project.clj` file:\n\n```clojure\n:dependencies [[environ "1.1.0"]]\n```\n\nIf you want to be able to draw settings from the Leiningen project\nmap, you\'ll also need the following plugin:\n\n```clojure\n:plugins [[lein-environ "1.1.0"]]\n```\n\nIf you are using the Boot toolchain, you may want to read and write\nsettings from build pipelines. In *build.boot*, add the dependency:\n\n```clojure\n:dependencies \'[[boot-environ "1.1.0"]]\n```\n\nThen require the environ boot task.\n\n```clojure\n(require \'[environ.boot :refer [environ]])\n```\n\n\n## Usage\n\nLet\'s say you have an application that requires a database connection.\nOften you\'ll need three different databases, one for development, one\nfor testing, and one for production.\n\nLets pull the database connection details from the key `:database-url`\non the `environ.core/env` map.\n\n```clojure\n(require \'[environ.core :refer [env]])\n\n(def database-url\n  (env :database-url))\n```\n\nThe value of this key can be set in several different ways. The most\ncommon way during development is to use a local `profiles.clj` file in\nyour project directory. This file contains a map with profiles that will\nbe merged with the profiles specified in the standard `project.clj`, but\ncan be kept out of version control and reserved for local development options.\n\n```clojure\n{:dev  {:env {:database-url "jdbc:postgresql://localhost/dev"}}\n :test {:env {:database-url "jdbc:postgresql://localhost/test"}}}\n```\n\nIn this case we add a database URL for the dev and test environments.\nThis means that if you run `lein repl`, the dev database will be used,\nand if you run `lein test`, the test database will be used.\n\nSo that profiles you define in `profiles.clj` are merged into, rather than\nreplacing profiles defined in `project.clj`, a composite profile can be\ncreated in `project.clj`:\n\n```clojure\n:profiles {:dev [:project/dev :profiles/dev]\n           :test [:project/test :profiles/test]\n           ;; only edit :profiles/* in profiles.clj\n           :profiles/dev  {}\n           :profiles/test {}\n           :project/dev {:source-paths ["src" "tool-src"]\n                         :dependencies [[midje "1.6.3"]]\n                         :plugins [[lein-auto "0.1.3"]]}\n           :project/test {}}\n```\n\nAnd then use the `:profiles/dev` key in your `profiles.clj`.\n\nKeywords with a `project` namespace are looked up in the project\nmap. For example:\n\n```clojure\n{:env {:app-version :project/version}}\n```\n\nThis looks up the `:version` key in the Leiningen project map. You can\nview the full project map by using [lein-pprint][].\n\nIn the case of Boot, you have the full flexibility of tasks and build\npipelines, meaning that all the following are valid:\n\n```clojure\n$ boot environ -e database-url=jdbc:postgresql://localhost/dev repl\n```\n\n```clojure\n(environ :env {:database-url "jdbc:postgresql://localhost/dev"})\n```\n\nThe latter form can be included in custom pipelines and `task-options!\'.\n\nThe task also creates or updates a `.boot-env` file in the fileset.\nThis is useful for tasks that create their own pods like\n[boot-test][], which won\'t see changes in the environ vars.\n\nWhen you deploy to a production environment, you can make use of\nenvironment variables, like so:\n\n```bash\nDATABASE_URL=jdbc:postgresql://localhost/prod java -jar standalone.jar\n```\n\nOr use Java system properties:\n\n```bash\njava -Ddatabase.url=jdbc:postgresql://localhost/prod -jar standalone.jar\n```\n\nNote that Environ automatically lowercases keys, and replaces the\ncharacters "_" and "." with "-". The environment variable\n`DATABASE_URL` and the system property `database.url` are therefore\nboth converted to the same keyword `:database-url`.\n\n[lein-pprint]: https://github.com/technomancy/leiningen/tree/master/lein-pprint\n[boot-test]:   https://github.com/adzerk-oss/boot-test\n\n*Important* -- environ will not pick up configuration settings from the \n`project.clj` when called from a compiled uberjar. So for any compiled \ncode you produce with `lein uberjar`, you will want to set your \nconfiguration values via shell environment and/or system properties.\n\n## License\n\nCopyright \xc2\xa9 2016 James Reeves\n\nDistributed under the Eclipse Public License, the same as Clojure.\n'