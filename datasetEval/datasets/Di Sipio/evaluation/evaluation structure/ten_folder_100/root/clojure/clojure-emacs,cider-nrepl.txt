b"[![CircleCI](https://circleci.com/gh/clojure-emacs/cider-nrepl/tree/master.svg?style=svg)](https://circleci.com/gh/clojure-emacs/cider-nrepl/tree/master)\n[![Dependencies Status](https://versions.deps.co/clojure-emacs/cider-nrepl/status.svg)](https://versions.deps.co/clojure-emacs/cider-nrepl)\n[![Coverage](https://codecov.io/gh/clojure-emacs/cider-nrepl/branch/master/graph/badge.svg)](https://codecov.io/gh/clojure-emacs/cider-nrepl/)\n[![cljdoc badge](https://cljdoc.org/badge/cider/cider-nrepl)](https://cljdoc.org/d/cider/cider-nrepl/CURRENT)\n\n# CIDER nREPL\n\nA collection of [nREPL](https://github.com/nrepl/nrepl)\nmiddleware originally designed to enhance\n[CIDER](https://github.com/clojure-emacs/cider).\n\nIf you're just a user trying to get started with CIDER, then you\nprobably don't want to read this. You should follow the steps in\n[CIDER's manual](https://docs.cider.mx) instead.\n\nPeople who are new to nREPL might benefit from reading [its\nmanual](https://nrepl.org).\n\n## Documentation\n\nPlease refer to the [documentation site](https://docs.cider.mx/cider-nrepl) for\ninformation on how to setup `cider-nrepl` or how to leverage its nREPL API.\n\n## Release policy\n\nWe\xe2\x80\x99re following [SemVer](http://semver.org/) (as much as one can be\nfollowing it when the major version is 0). At this point bumps of the\nminor (second) version number are considered major releases and always\ninclude new features or significant changes to existing features. API\ncompatibility between major releases is not a (big) concern (although we try\nto break the API rarely and only for a good reason).\n\nThe development cycle for the next major\nrelease starts immediately after the previous one has been\nshipped. Bugfix/point releases (if any) address only serious bugs and\nnever contain new features.\n\n**Note:** Prior to cider-nrepl 0.18, CIDER and cider-nrepl releases\nwere always done in sync. As most editors started relying on cider-nrepl\nthis was eventually changed and now cider-nrepl releases happen on their\nown schedule.\n\n## Contributing\n\n### Discussion\n\nFor questions, suggestions and support refer to our [official mailing list](https://groups.google.com/forum/#!forum/cider-emacs)\nor the Freenode channel `#clojure-emacs`.\nPlease, don't report issues there, as this makes them harder to track.\n\n### Issues\n\nReport issues and suggest features and improvements on the\n[GitHub issue tracker](https://github.com/clojure-emacs/cider-nrepl/issues). Don't\nask questions on the issue tracker - the mailing list and the IRC\nchannel are the places for questions.\n\n### Patches\n\nPatches under any form are always welcome! GitHub pull requests are even better! :-)\n\nBefore submitting a patch or a pull request make sure all tests are\npassing and that your patch is in line with the [contribution\nguidelines](.github/CONTRIBUTING.md).\n\n### Working with mranderson (inlining runtime dependencies)\n\n[mranderson][] is used to\navoid classpath collisions.\n\nTo work with `mranderson` the first thing to do is:\n\n```\nlein do clean, inline-deps\n```\n\nThis creates the munged local dependencies in `target/srcdeps` directory.\n\nAfter that you can run your tests or your REPL with:\n\n```\nlein with-profile +plugin.mranderson/config repl\nlein with-profile +plugin.mranderson/config test\n```\n\nNote the `+` sign before the leiningen profile. For this leiningen\nprofile to work **you need leiningen version 2.5.0+!** If you want to\nuse `mranderson` while developing locally with the REPL the source has\nto be modified in the `target/srcdeps` directory. When you want to\nrelease locally:\n\n```\nlein with-profile plugin.mranderson/config install\n```\n\nRelease to [clojars](https://clojars.org/):\n\n```\nlein with-profile plugin.mranderson/config deploy clojars\n```\n\nOr you can use the `Makefile` as:\n\n```\nmake clean\nmake install\nmake deploy\n```\n\n## Hall of Fame\n\nSpecial credit goes to the following people for their contributions:\n\n- Gary Trakhman ([@gtrak](https://github.com/gtrak))\n- Jeff Valk ([@jeffvalk](https://github.com/jeffvalk))\n- Hugo Duncan ([@hugoduncan](https://github.com/hugoduncan))\n- Michael Griffiths ([@cichli](https://github.com/cichli))\n- Artur Malabarba ([@malabarba](https://github.com/malabarba))\n- Lars Andersen ([@expez](https://github.com/expez))\n- Benedek Fazekas ([@benedekfazekas](https://github.com/benedekfazekas))\n\nAnd a big thanks to\n[all other contributors](https://github.com/clojure-emacs/cider-nrepl/graphs/contributors)\nwho have helped so far.\n\nLet's also acknowledge some of the projects leveraged by cider-nrepl:\n\n* [orchard][] - extracted from `cider-nrepl`, so that non-nREPL clients can leverage the generic tooling functionality (like `inspect`, `apropos`, `var-info`, etc\n* [compliment][] - for Clojure code completion\n* [cljs-tooling][] - for ClojureScript code completion\n* [suitable][] - for ClojureScript code completion using runtime inspection\n* [tools.trace][] - for tracing\n* [tools.namespace][] - for namespace reloading\n* [cljfmt][] - for code formatting\n\n## License\n\nCopyright \xc2\xa9 2013-2019 Bozhidar Batsov\n\nDistributed under the Eclipse Public License, the same as Clojure.\n\n[orchard]: https://github.com/clojure-emacs/orchard\n[compliment]: https://github.com/alexander-yakushev/compliment\n[cljs-tooling]: https://github.com/clojure-emacs/cljs-tooling\n[suitable]: https://github.com/rksm/clj-suitable\n[tools.trace]: https://github.com/clojure/tools.trace\n[tools.namespace]: https://github.com/clojure/tools.namespace\n[cljfmt]: https://github.com/weavejester/cljfmt\n[vim-replant]: https://github.com/SevereOverfl0w/vim-replant\n[vim-fireplace]: https://github.com/tpope/vim-fireplace\n[mranderson]: https://github.com/benedekfazekas/mranderson\n"