b'* \xc5\x9cABLONO\n\n  [[https://clojars.org/sablono][https://img.shields.io/clojars/v/sablono.svg]]\n  [[https://travis-ci.org/r0man/sablono][https://travis-ci.org/r0man/sablono.svg]]\n  [[https://versions.deps.co/r0man/sablono][https://versions.deps.co/r0man/sablono/status.svg]]\n  [[https://versions.deps.co/r0man/sablono][https://versions.deps.co/r0man/sablono/downloads.svg]]\n\n  Lisp/Hiccup style templating for Facebook\'s [[http://facebook.github.io/react][React]] in [[https://github.com/clojure/clojurescript][ClojureScript]].\n\n  [[https://xkcd.com/1144][http://imgs.xkcd.com/comics/tags.png]]\n\n** Dependencies\n\n   /\xc5\x9cablono/ doesn\'t declare a dependency on React anymore. Use the\n   React dependencies from one of the ClojureScript wrappers or\n   provide the dependencies yourself like this:\n\n   #+BEGIN_SRC clojure :exports code :results silent\n    [cljsjs/react "16.6.0-0"]\n    [cljsjs/react-dom "16.6.0-0"]\n   #+END_SRC\n\n   If you want to do server rendering and use the =render= or\n   =render-static= functions from the =sablono.server= namespace you\n   need to add the following dependency as well:\n\n   #+BEGIN_SRC clojure :exports code :results silent\n    [cljsjs/react-dom-server "16.6.0-0"]\n   #+END_SRC\n\n** Usage\n\n   Most functions from [[https://github.com/weavejester/hiccup][Hiccup]] are provided in the =sablono.core=\n   namespace. The library can be used with [[https://github.com/swannodette/om][Om]] like this:\n\n   #+BEGIN_SRC clojure :exports code :results silent\n    (ns example\n      (:require [om.core :as om :include-macros true]\n                [sablono.core :as html :refer-macros [html]]))\n\n    (defn widget [data]\n      (om/component\n       (html [:div "Hello world!"\n              [:ul (for [n (range 1 10)]\n                     [:li {:key n} n])]\n              (html/submit-button "React!")])))\n\n    (om/root widget {} {:target (. js/document (getElementById "my-app"))})\n   #+END_SRC\n\n   By default, /\xc5\x9cablono/ will wrap any forms in the body of hiccup with a call to\n   =sablono.interpreter/interpret=. If your code returns a React element, then you can\n   skip the call to this function by marking the s-expression with the metadata tag =:inline=.\n   For example:\n\n   #+BEGIN_SRC clojure :exports code :results silent\n    [:div {}\n     ^:inline (function-that-returns-react-component)]\n   #+END_SRC\n\n** HTML Tags\n\n   /\xc5\x9cablono/ only supports tags and attributes that can be handled by\n   React. This means you can\'t have your own custom tags and\n   attributes at the moment. For more details take a look at the [[http://facebook.github.io/react/docs/tags-and-attributes.html][Tags\n   and Attributes]] section in the React documentation.\n\n** HTML Attributes\n\n   HTML attributes in [[http://facebook.github.io/react/docs/tags-and-attributes.html#html-attributes][React]] are camel-cased and the =class= and =for=\n   attributes are treated special. /\xc5\x9cablono/ renames attributes with\n   dashes in their name to the camel-cased version and handles the\n   =class= and =for= special case. This is more consistent with [[https://github.com/weavejester/hiccup][Hiccup]]\n   and naming conventions used in Clojure.\n\n   An =input= element with event listeners attached to it would look\n   like this in /\xc5\x9cablono/:\n\n   #+BEGIN_SRC clojure :exports code :results silent\n    (html [:input\n           {:auto-complete "off"\n            :class "autocomplete"\n            :on-change #(on-change %1)\n            :on-key-down #(on-key-down %1)\n            :type "text"}])\n   #+END_SRC\n\n** Setting innerHTML of a DOM node\n\n   It is not recommended to directly set the innerHTML of DOM nodes,\n   but in some cases it is necessary. i.e. injecting a HTML string\n   that was generated from Markdown.\n\n   #+BEGIN_SRC clojure :exports code :results silent\n    (html [:div {:dangerouslySetInnerHTML {:__html "<div>hello world</div>" }}])\n   #+END_SRC\n\n   You can read more at [[http://facebook.github.io/react/docs/special-non-dom-attributes.html][React\'s special attributes]].\n\n** FAQ\n\n*** How to run the tests?\n\n    You need to have [[https://nodejs.org/en/][Node.js]] and [[http://phantomjs.org/][PhantomJS]] installed for the\n    ClojureScript test.\n\n    Make sure you have all dependencies installed. The following\n    command installs the Maven and Node.js dependencies.\n\n    #+BEGIN_SRC sh :exports code :results silent\n      lein deps\n    #+END_SRC\n\n    To run all Clojure and ClojureScript tests run the following\n    command:\n\n    #+BEGIN_SRC sh :exports code :results silent\n      lein ci\n    #+END_SRC\n\n    For development the ClojureScript tests can be run with\n    [[https://github.com/bensu/doo][lein-doo]]. To run the tests on Node.js run the following command:\n\n    #+BEGIN_SRC sh :exports code :results silent\n      lein doo node nodejs auto\n    #+END_SRC\n\n    To run the tests on PhantomJS use this command:\n\n    #+BEGIN_SRC sh :exports code :results silent\n      lein doo phantom none auto\n    #+END_SRC\n\n*** Why is there a compiler and an interpreter?\n\n    The interpreter is executed at *run time*, and it\'s job is to\n    evaluate Hiccup forms and produce React elements. The compiler on\n    the other hand, is executed at *compile time* and can optimize\n    certain Hiccup forms. It\'s job is to evaluate Hiccup forms and\n    produce executable code.\n\n    A good introduction to this topic can be found in Peter Seibel\'s\n    [[http://www.gigamonkeys.com/book/practical-an-html-generation-library-the-compiler.html][Practical Common Lisp]]:\n\n    - [[http://www.gigamonkeys.com/book/practical-an-html-generation-library-the-interpreter.html][An HTML Generation Library, the Interpreter]]\n    - [[http://www.gigamonkeys.com/book/practical-an-html-generation-library-the-compiler.html][An HTML Generation Library, the Compiler]]\n\n** Thanks\n\n   This library is based on James Reeves excellent [[https://github.com/weavejester/hiccup][Hiccup]] library.\n\n** License\n\n   Copyright \xc2\xa9 2013-2016 [[https://github.com/r0man][r0man]]\n\n   Distributed under the Eclipse Public License either version 1.0 or\n   (at your option) any later version.\n'