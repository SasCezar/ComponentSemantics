b'# Machine Learning in MatLab/Octave\n\n> _For Python/Jupyter version of this repository please check [homemade-machine-learning](https://github.com/trekhleb/homemade-machine-learning) project._\n\n\nThis repository contains MatLab/Octave examples of popular machine learning algorithms with code examples and mathematics behind them being explained.\n\nThe purpose of this repository was _not_ to implement machine learning algorithms using 3<sup>rd</sup> party libraries or Octave/MatLab "one-liners" _but_ rather to practice and to better understand the mathematics behind each algorithm. In most cases the explanations are based on [this great](https://www.coursera.org/learn/machine-learning) machine learning course.\n\n## Supervised Learning\n\nIn supervised learning we have a set of training data as an input and a set of labels or "correct answers" for each training set as an output. Then we\'re training our model (machine learning algorithm parameters) to map the input to the output correctly (to do correct prediction). The ultimate purpose is to find such model parameters that will successfully continue correct input\xe2\x86\x92output mapping (predictions) even for new input examples.\n\n### Regression\n\nIn regression problems we do real value predictions. Basically we try to draw a line/plane/n-dimensional plane along the training examples.\n\n_Usage examples: stock price forecast, sales analysis, dependency of any number, etc._\n\n\xf0\x9f\xa4\x96 [Linear Regression](./linear-regression) - example: house prices prediction.\n\n### Classification\n\nIn classification problems we split input examples by certain characteristic.\n\n_Usage examples: spam-filters, language detection, finding similar documents, handwritten letters recognition, etc._\n\n\xf0\x9f\xa4\x96 [Logistic Regression](./logistic-regression) - examples: microchip fitness detection, handwritten digits recognitions using one-vs-all approach.\n\n## Unsupervised Learning\n\nUnsupervised learning is a branch of machine learning that learns from test data that has not been labeled, classified or categorized. Instead of responding to feedback, unsupervised learning identifies commonalities in the data and reacts based on the presence or absence of such commonalities in each new piece of data.\n\n### Clustering\n\nIn clustering problems we split the training examples by unknown characteristics. The algorithm itself decides what characteristic to use for splitting.\n\n_Usage examples: market segmentation, social networks analysis, organize computing clusters, astronomical data analysis, image compression, etc._\n\n\xf0\x9f\xa4\x96 [K-means algorithm](./k-means) - example: split data into three clusters.\n\n### Anomaly Detection\n\nAnomaly detection (also outlier detection) is the identification of rare items, events or observations which raise suspicions by differing significantly from the majority of the data.\n\n_Usage examples: intrusion detection, fraud detection, system health monitoring, removing anomalous data from the dataset etc._\n\n\xf0\x9f\xa4\x96 [Anomaly Detection using Gaussian distribution](./anomaly-detection) - example: detect overloaded server.\n\n## Neural Network (NN)\n\nThe neural network itself isn\'t an algorithm, but rather a framework for many different machine learning algorithms to work together and process complex data inputs.\n\n_Usage examples: as a substitute of all other algorithms in general, image recognition, voice recognition, image processing (applying specific style), language translation, etc._\n\n\xf0\x9f\xa4\x96 [Neural Network: Multilayer Perceptron (MLP)](./neural-network) - example: handwritten digits recognition.\n\n## Machine Learning Map\n\n![Machine Learning Map](./images/machine-learning-map.png)\n\nThe source of the following machine learning topics map is [this wonderful blog post](https://vas3k.ru/blog/machine_learning/)\n\n## How to Use This Repository\n\n### Install Octave or MatLab\n\nThis repository contains `*.m` scripts that are intended to be run in [Octave](https://www.gnu.org/software/octave/) or [MatLab](https://www.mathworks.com/products/matlab.html). Thus in order to launch demos you need either Octave or MatLab to be installed on you local machine. In case of MatLab you may also use its [web-version](https://matlab.mathworks.com/).\n\n### Run Demos\n\nIn order to run the demo of your choice you should move to the chosen folder (i.e. `neural-network`):\n\n```bash\ncd neural-network\n```\n\nLaunch Octave console:\n\n```bash\noctave\n```\n\nLaunch demo script from Octave console:\n\n```bash\ndemo\n```\n\nTo see all demo variables you may launch:\n\n```bash\nwhos\n```\n\nTo exit the demo you may launch:\n\n```bash\nexit\n```\n\nAlso be aware that demo scripts opens additional window with charts and other graphical information that is related to the running algorithm. You may find screenshots of the window that each demo will render for you on the dedicated README files for each machine learning algorithm.\n\n![Demos](./images/demos.png)\n'