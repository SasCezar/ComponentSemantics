b'##############################################################################                                                      \n      JSONLab: An open-source MATLAB/Octave JSON encoder and decoder             \n##############################################################################\n\n* Copyright (C) 2011-2019  Qianqian Fang <q.fang at neu.edu>\n* License: BSD or GNU General Public License version 3 (GPL v3), see License*.txt\n* Version: 1.9.8 (Magnus - beta)\n* JData Specification Version: Draft 2 (http://github.com/fangq/jdata)\n* URL: http://openjdata.org/jsonlab\n\n\n#################\nTable of Contents\n#################\n.. contents::\n  :local:\n  :depth: 3\n\n============\nWhat\'s New\n============\n\nJSONLab v1.9.8 is the beta release of the next milestone - code named "Magnus".\n\nStarting from this release, JSONLab supports encoding/decoding MessagePack,\na widely-used binary JSON-like data format. Via ZMat v0.9, JSONLab v1.9.8\nalso supports LZMA/LZ4/LZ4HC data compression/decompression. More importantly,\nJSONLab is now the official reference implementation for JData Specification (Draft 2)\nas defined in http://github.com/fangq/jdata, the foundation for the OpenJData\nProject (http://openjdata.org).\n\nThere have been numerous major updates to this toolbox since the previous \nrelease v1.9 in May 2019. A list of the major changes are summarized below\nwith key features marked by *:\n\n- 2019-10-22*[650b5ec] enable preencode by default for savejson and saveubjson\n- 2019-10-21*[874945f] decode graph data, encode non-char-keyed map data\n- 2019-10-18 [11712b7] add any2jd, pass opt to name check, add more options\n- 2019-10-18*[f97de9b] extract name encoding/decoding to separate function, like in easyh5\n- 2019-10-17*[9d0fd4a] rewrite jdataencode\n- 2019-10-15 [23f14d6] minor updates to make msgpack to work on octave\n- 2019-09-16*[689cb40] support lz4 and lz4hc compression via zmat v0.9\n- 2019-07-11*[06d33aa] update zmat test to support zmat v0.8 mox-the-fox\n- 2019-06-24*[eba4078] saving table objects with new syntax\n- 2019-06-12 [3eb6d56] change ArrayCompression keywords to ArrayZip to be short\n- 2019-06-12*[e5f2ffb] complete saveubjson debug mode, add compression example\n- 2019-06-11 [ebbcfd2] pass formatversion tag to jdatadecode\n- 2019-06-10*[95b2eb0] add jdataencode and jdatadecode\n- 2019-06-10*[f86219d] major update: use row-major for N-D array, incompatible with old JSONLab\n- 2019-05-31*[0c467ee] support lzma and lzip compression decompression via zmat toolbox (http://github.com/fangq/zmat)\n- 2019-05-31 [599ee4c] support categorical data\n- 2019-05-30*[d47be45] fast bracket matching\n- 2019-05-24*[0ec2d01] rewriting fastarrayparser, 10x faster for Octave, close #4 with fast bracket matching\n- 2019-05-22*[d8c19b8] add support to MessagePack, close #53, add NestArray option, close #6\n- 2019-05-19*[c87e7d2] support containers.Map\n\n\nPlease note that JSONLab v1.9.8 is compliant with JData Spec Draft 2, while\nv1.9 and previous releases are compatible with Draft 1. The main differences are\n\n* ``_ArrayCompressionMethod_, _ArrayCompressionSize_`` and ``_ArrayCompressedData_`` \n are replaced by ``_ArrayZipType_``, ``_ArrayZipSize_`` and ``_ArrayZipData_``, respectively\n* The serialization of N-D array data stored in ``_ArrayData_`` is changed from column-major to\n row-major\n\nTo read data files generated by JSONLab v1.9 or older versions, you need to attach\noption ``\'FormatVersion\', 1.9`` in all the loadjson/savejson function calls. \nTo convert an older file (JSON/UBJSON) to the new format, you should run\n\n.. code-block:: matlab\n\n   data=loadjson(\'my_old_data_file.json\',\'FormatVersion\',1.9)\n   savejson(\'\',data,\'FileName\',\'new_file.json\')\n\nYou are strongly encouraged to convert all previously generated data files using the new\nformat.\n\n\n============\nIntroduction\n============\n\nJSONLab is a free and open-source implementation of a JSON/UBJSON/MessagePack encoder \nand a decoder in the native MATLAB language. It can be used to convert a MATLAB \ndata structure (array, struct, cell, struct array, cell array, and objects) into \nJSON/UBJSON/MessagePack formatted strings, or to decode a \nJSON/UBJSON/MessagePack file into MATLAB data structure. JSONLab supports both \nMATLAB and `GNU Octave <http://www.gnu.org/software/octave/>`_ (a free MATLAB clone).\n\nJSON (`JavaScript Object Notation <http://www.json.org/>`_) is a highly portable, \nhuman-readable and " `fat-free <http://en.wikipedia.org/wiki/JSON>`_" text format \nto represent complex and hierarchical data. It is as powerful as `XML <http://en.wikipedia.org/wiki/XML>`_, \nbut less verbose. JSON format is widely used for data-exchange in applications.\n\nUBJSON (`Universal Binary JSON <http://ubjson.org/>`_) is a binary JSON format,  \nspecifically optimized for compact file size and better performance while keeping\nthe semantics as simple as the text-based JSON format. Using the UBJSON\nformat allows to wrap complex binary data in a flexible and extensible\nstructure, making it possible to process complex and large dataset \nwithout accuracy loss due to text conversions. MessagePack is another binary\nJSON-like data format widely used in data exchange in web/native applications.\nIt is slightly more compact than UBJSON, but is not directly readable compared\nto UBJSON.\n\nWe envision that both JSON and its binary counterparts will play important \nroles as mainstream data-exchange formats for scientific research.\nIt has both the flexibility and generality as offered by other popular \ngeneral-purpose file specifications, such as `HDF5 <http://www.hdfgroup.org/HDF5/whatishdf5.html>`_, \nbut with significantly reduced complexity and excellent readability.\n\nTowards this goal, we have developed the JData Specification (http://github.com/fangq/jdata) \nto standardize serializations of complex scientific data structures, such as\nN-D arrays, sparse/complex-valued arrays, trees, maps, tables and graphs using\nJSON/binary JSON constructs. The text and binary formatted JData files are\nsyntactically compatible with JSON/UBJSON formats, and can be readily parsed \nusing existing JSON and UBJSON parsers.\n\nPlease note that data files produced by ``saveubjson`` may utilize a special\n"optimized header" to store N-D (N>=2) arrays, as defined in the JData Specification Draft 2.\nThis feature is not supported by UBJSON Specification Draft 12. To produce \nUBJSON files that can be parsed by UBJSON-Draft-12 compliant parsers, you must\nadd the option ``\'NestArray\',1`` in the call to ``saveubjson``.\n\n================\nInstallation\n================\n\nThe installation of JSONLab is no different from installing any other\nMATLAB toolbox. You only need to download/unzip the JSONLab package\nto a folder, and add the folder\'s path to MATLAB/Octave\'s path list\nby using the following command:\n\n.. code:: shell\n\n    addpath(\'/path/to/jsonlab\');\n\nIf you want to add this path permanently, you can type ``"pathtool"``, \nbrowse to the JSONLab root folder and add to the list, then click "Save".\nThen, run "rehash" in MATLAB, and type "which savejson", if you see an \noutput, that means JSONLab is installed for MATLAB/Octave.\n\nIf you use MATLAB in a shared environment such as a Linux server, the\nbest way to add path is to type \n\n.. code:: shell\n\n   mkdir ~/matlab/\n   nano ~/matlab/startup.m\n\nand type addpath(\'/path/to/jsonlab\') in this file, save and quit the editor.\nMATLAB will execute this file every time it starts. For Octave, the file\nyou need to edit is ~/.octaverc , where "~" is your home directory.\n\n----------\nInstall JSONLab on Fedora 24 or later\n----------\n\nJSONLab has been available as an official Fedora package since 2015. You may\ninstall it directly using the below command\n\n.. code:: shell\n\n   sudo dnf install octave-jsonlab\n\nTo enable data compression/decompression, you are encouraged to install ``octave-zmat`` using\n\n.. code:: shell\n\n   sudo dnf install octave-zmat\n\n----------\nInstall JSONLab on Arch Linux\n----------\n\nJSONLab is also available on Arch Linux. You may install it using the below command\n\n.. code:: shell\n\n   sudo pacman -S jsonlab\n\n================\nUsing JSONLab\n================\n\nJSONLab provides two functions, ``loadjson`` -- a MATLAB->JSON decoder, \nand ``savejson`` -- a MATLAB->JSON encoder, for the text-based JSON, and \ntwo equivallent function pairs -- ``loadubjson`` and ``saveubjson`` for binary \nJSON and ``loadmsgpack`` and ``savemsgpack`` for MessagePack. The ``load`` functions \nfor the 3 supported data formats share almost the same input parameters; \nsimilarly for the 3 ``save`` functions (``savejson/saveubjson/savemsgpack``)\nThe detailed help information can be found in the ``Contents.m`` file. \n\nIn the below section, we simply provide a few examples on how to use\neach of the core functions for encoding/decoding JSON/UBJSON/MessagePack data\n\n----------\nsavejson.m\n----------\n\n.. code-block:: matlab\n\n       jsonmesh=struct(\'MeshNode\',[0 0 0;1 0 0;0 1 0;1 1 0;0 0 1;1 0 1;0 1 1;1 1 1],... \n                \'MeshElem\',[1 2 4 8;1 3 4 8;1 2 6 8;1 5 6 8;1 5 7 8;1 3 7 8],...\n                \'MeshSurf\',[1 2 4;1 2 6;1 3 4;1 3 7;1 5 6;1 5 7;...\n                           2 8 4;2 8 6;3 8 4;3 8 7;5 8 6;5 8 7],...\n                \'MeshCreator\',\'FangQ\',\'MeshTitle\',\'T6 Cube\',...\n                \'SpecialData\',[nan, inf, -inf]);\n       savejson(jsonmesh)\n       savejson(\'jmesh\',jsonmesh)\n       savejson(\'\',jsonmesh,\'compact\',1)\n       savejson(\'jmesh\',jsonmesh,\'outputfile.json\')\n       savejson(\'\',jsonmesh,\'ArrayIndent\',0,\'FloatFormat\',\'\\t%.5g\',\'FileName\',\'outputfile2.json\')\n       savejson(\'cpxrand\',eye(5)+1i*magic(5))\n       savejson(\'ziparray\',eye(10),\'Compression\',\'zlib\',\'CompressArraySize\',1)\n       savejson(\'\',jsonmesh,\'ArrayToStruct\',1)\n\n----------\nloadjson.m\n----------\n\n.. code-block:: matlab\n\n       loadjson(\'{}\')\n       dat=loadjson(\'{"obj":{"string":"value","array":[1,2,3]}}\')\n       dat=loadjson([\'examples\' filesep \'example1.json\'])\n       dat=loadjson([\'examples\' filesep \'example1.json\'],\'SimplifyCell\',1)\n\n-------------\nsaveubjson.m\n-------------\n\n.. code-block:: matlab\n\n       a={single(rand(2)), struct(\'va\',1,\'vb\',\'string\'), 1+2i};\n       saveubjson(a)\n       saveubjson(\'rootname\',a,\'testdata.ubj\')\n       saveubjson(\'zeros\',zeros(100),\'Compression\',\'gzip\')\n\n-------------\nloadubjson.m\n-------------\n\n.. code-block:: matlab\n\n       obj=struct(\'string\',\'value\',\'array\',single([1 2 3]),\'empty\',[],\'magic\',uint8(magic(5)));\n       ubjdata=saveubjson(\'obj\',obj);\n       dat=loadubjson(ubjdata)\n       class(dat.obj.array)\n       isequaln(obj,dat.obj)\n       dat=loadubjson(saveubjson(\'\',eye(10),\'Compression\',\'zlib\',\'CompressArraySize\',1))\n\n----------\njdataencode.m\n----------\n\n.. code-block:: matlab\n\n      jd=jdataencode(struct(\'a\',rand(5)+1i*rand(5),\'b\',[],\'c\',sparse(5,5)))\n      savejson(\'\',jd)\n\n----------\njdatadecode.m\n----------\n\n.. code-block:: matlab\n\n      rawdata=struct(\'a\',rand(5)+1i*rand(5),\'b\',[],\'c\',sparse(5,5));\n      jd=jdataencode(rawdata)\n      newjd=jdatadecode(jd)\n      isequaln(newjd,rawdata)\n\n---------\nexamples\n---------\n\nUnder the ``"examples"`` folder, you can find several scripts to demonstrate the\nbasic utilities of JSONLab. Running the ``"demo_jsonlab_basic.m"`` script, you \nwill see the conversions from MATLAB data structure to JSON text and backward.\nIn ``"jsonlab_selftest.m"``, we load complex JSON files downloaded from the Internet\nand validate the ``loadjson/savejson`` functions for regression testing purposes.\nSimilarly, a ``"demo_ubjson_basic.m"`` script is provided to test the ``saveubjson``\nand ``loadubjson`` functions for various matlab data structures, and \n``"demo_msgpack_basic.m"`` is for testing ``savemsgpack`` and ``loadmsgpack`` functions.\n\nPlease run these examples and understand how JSONLab works before you use\nit to process your data.\n\n=======================\nKnown Issues and TODOs\n=======================\n\nJSONLab has several known limitations. We are striving to make it more general\nand robust. Hopefully in a few future releases, the limitations become less.\n\nHere are the known issues:\n\n  * 3D or higher dimensional cell/struct-arrays will be converted to 2D arrays\n  * When processing names containing multi-byte characters, Octave and MATLAB \n    can give different field-names; you can use \n    ``feature(\'DefaultCharacterSet\',\'latin1\')`` in MATLAB to get consistant results\n  * ``savejson`` can only export the properties from MATLAB classes, but not the methods\n  * ``saveubjson`` converts a logical array into a ``uint8`` (``[U]``) array\n  * a special N-D array format, as defined in the JData specification, is \n    implemented in ``saveubjson``. You may use ``saveubjson(...,\'NestArray\',1)``\n    to create UBJSON Draft-12 compliant files \n  * ``loadubjson`` can not parse all UBJSON Specification (Draft 12) compliant \n    files, however, it can parse all UBJSON files produced by ``saveubjson``.\n\n==========================\nContribution and feedback\n==========================\n\nJSONLab is an open-source project. This means you can not only use it and modify\nit as you wish, but also you can contribute your changes back to JSONLab so\nthat everyone else can enjoy the improvement. For anyone who want to contribute,\nplease download JSONLab source code from its source code repositories by using the\nfollowing command:\n\n\n.. code:: shell\n\n      git clone https://github.com/fangq/jsonlab.git jsonlab\n\nor browsing the github site at\n\n      https://github.com/fangq/jsonlab\n\nPlease report any bugs or issues to the below URL:\n\n      https://github.com/fangq/jsonlab/issues\n\nSometimes, you may find it is necessary to modify JSONLab to achieve your \ngoals, or attempt to modify JSONLab functions to fix a bug that you have \nencountered. If you are happy with your changes and willing to share those\nchanges to the upstream author, you are recommended to create a pull-request\non github. \n\nTo create a pull-request, you first need to "fork" jsonlab on Github by \nclicking on the "fork" button on top-right of jsonlab\'s github page. Once you forked\njsonlab to your own directory, you should then implement the changes in your\nown fork. After thoroughly testing it and you are confident the modification \nis complete and effective, you can then click on the "New pull request" \nbutton, and on the left, select fangq/jsonlab as the "base". Then type\nin the description of the changes. You are responsible to format the code\nupdates using the same convention (tab-width: 8, indentation: 4 spaces) as\nthe upstream code.\n\nWe appreciate any suggestions and feedbacks from you. Please use the following\nmailing list to report any questions you may have regarding JSONLab:\n\n      https://github.com/fangq/jsonlab/issues\n\n(Subscription to the mailing list is needed in order to post messages).\n\n\n==========================\nAcknowledgement\n==========================\n\n---------\nloadjson.m\n---------\n\nThe ``loadjson.m`` function was significantly modified from the earlier parsers \n(BSD 3-clause licensed) written by the below authors\n\n* Nedialko Krouchev: http://www.mathworks.com/matlabcentral/fileexchange/25713\n    created on 2009/11/02\n* Fran\xc3\xa7ois Glineur: http://www.mathworks.com/matlabcentral/fileexchange/23393\n    created on  2009/03/22\n* Joel Feenstra:\n    http://www.mathworks.com/matlabcentral/fileexchange/20565\n    created on 2008/07/03\n\n---------\nloadmsgpack.m\n---------\n\n* Author: Bastian Bechtold\n* URL: https://github.com/bastibe/matlab-msgpack/blob/master/parsemsgpack.m\n* License: BSD 3-clause license\n\nCopyright (c) 2014,2016 Bastian Bechtold\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, \nare permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this \n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice, \n  this list of conditions and the following disclaimer in the documentation \n  and/or other materials provided with the distribution.\n\n* Neither the name of the copyright holder nor the names of its contributors \n  may be used to endorse or promote products derived from this software without \n  specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n---------\nzlibdecode.m, zlibencode.m, gzipencode.m, gzipdecode.m, base64encode.m, base64decode.m\n---------\n\n* Author: Kota Yamaguchi\n* URL: https://www.mathworks.com/matlabcentral/fileexchange/39526-byte-encoding-utilities\n* License: BSD License, see below\n\nCopyright (c) 2012, Kota Yamaguchi\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n'