b'# grpc-gateway\n\n[![release](https://img.shields.io/github/release/grpc-ecosystem/grpc-gateway.svg?style=flat-square)](https://github.com/grpc-ecosystem/grpc-gateway/releases) [![CircleCI](https://img.shields.io/circleci/project/github/grpc-ecosystem/grpc-gateway/master.svg?style=flat-square)](https://circleci.com/gh/grpc-ecosystem/grpc-gateway) [![fuzzit](https://app.fuzzit.dev/badge?org_id=grpc-gateway)](https://app.fuzzit.dev/orgs/grpc-gateway/dashboard) [![coverage](https://img.shields.io/codecov/c/github/grpc-ecosystem/grpc-gateway/master.svg?style=flat-square)](https://codecov.io/gh/grpc-ecosystem/grpc-gateway) [![license](https://img.shields.io/github/license/grpc-ecosystem/grpc-gateway.svg?style=flat-square)](LICENSE.txt)\n\nThe grpc-gateway is a plugin of the Google protocol buffers compiler\n[protoc](https://github.com/protocolbuffers/protobuf).\nIt reads protobuf service definitions and generates a reverse-proxy server which\n\'translates a RESTful HTTP API into gRPC. This server is generated according to the\n[`google.api.http`](https://github.com/googleapis/googleapis/blob/master/google/api/http.proto#L46)\nannotations in your service definitions.\n\nThis helps you provide your APIs in both gRPC and RESTful style at the same time.\n\n![architecture introduction diagram](https://docs.google.com/drawings/d/12hp4CPqrNPFhattL_cIoJptFvlAqm5wLQ0ggqI5mkCg/pub?w=749&amp;h=370)\n\n## Check out our [documentation](https://grpc-ecosystem.github.io/grpc-gateway/)!\n\n## Background\ngRPC is great -- it generates API clients and server stubs in many programming\nlanguages, it is fast, easy-to-use, bandwidth-efficient and its design is\ncombat-proven by Google. However, you might still want to provide a traditional\nRESTful JSON API as well. Reasons can range from maintaining\nbackwards-compatibility, supporting languages or clients not well supported by\ngRPC, to simply maintaining the aesthetics and tooling involved with a RESTful\nJSON architecture.\n\nThis project aims to provide that HTTP+JSON interface to your gRPC service.\nA small amount of configuration in your service to attach HTTP semantics is all\nthat\'s needed to generate a reverse-proxy with this library.\n\n## Installation\n\nThe grpc-gateway requires a local installation of the Google protocol buffers\ncompiler `protoc` v3.0.0 or above. Please install this via your local package\nmanager or by downloading one of the releases from the official repository:\n\nhttps://github.com/protocolbuffers/protobuf/releases\n\n\nThen use `go get -u` to download the following packages:\n\n```sh\ngo get -u github.com/grpc-ecosystem/grpc-gateway/protoc-gen-grpc-gateway\ngo get -u github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger\ngo get -u github.com/golang/protobuf/protoc-gen-go\n```\n\nThis will place three binaries in your `$GOBIN`;\n\n* `protoc-gen-grpc-gateway`\n* `protoc-gen-swagger`\n* `protoc-gen-go`\n\nMake sure that your `$GOBIN` is in your `$PATH`.\n\n## Usage\n\n1. Define your [gRPC](https://grpc.io/docs/) service using protocol buffers \n\n   `your_service.proto`:\n   ```protobuf\n   syntax = "proto3";\n   package example;\n   message StringMessage {\n     string value = 1;\n   }\n\n   service YourService {\n     rpc Echo(StringMessage) returns (StringMessage) {}\n   }\n   ```\n\n2. Add a [`google.api.http`](https://github.com/googleapis/googleapis/blob/master/google/api/http.proto#L46)\nannotation to your .proto file\n\n   `your_service.proto`:\n   ```diff\n    syntax = "proto3";\n    package example;\n   +\n   +import "google/api/annotations.proto";\n   +\n    message StringMessage {\n      string value = 1;\n    }\n\n    service YourService {\n   -  rpc Echo(StringMessage) returns (StringMessage) {}\n   +  rpc Echo(StringMessage) returns (StringMessage) {\n   +    option (google.api.http) = {\n   +      post: "/v1/example/echo"\n   +      body: "*"\n   +    };\n   +  }\n    }\n   ```\n\n   If you do not want to modify the proto file for use with grpc-gateway you can\n   alternatively use an external\n   [gRPC Service Configuration](https://cloud.google.com/endpoints/docs/grpc/grpc-service-config) file.\n   [Check our documentation](https://grpc-ecosystem.github.io/grpc-gateway/docs/grpcapiconfiguration.html)\n   for more information.\n\n3. Generate gRPC stub\n\n   The following generates gRPC code for Golang based on `path/to/your_service.proto`:\n   ```sh\n   protoc -I/usr/local/include -I. \\\n     -I$GOPATH/src \\\n     -I$GOPATH/src/github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis \\\n     --go_out=plugins=grpc:. \\\n     path/to/your_service.proto\n   ```\n\n   It will generate a stub file `path/to/your_service.pb.go`.\n\n4. Implement your service in gRPC as usual\n\n   1. (Optional) Generate gRPC stub in the [other programming languages](https://grpc.io/docs/).\n\n     For example, the following generates gRPC code for Ruby based on `path/to/your_service.proto`:\n     ```sh\n     protoc -I/usr/local/include -I. \\\n       -I$GOPATH/src \\\n       -I$GOPATH/src/github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis \\\n       --ruby_out=. \\\n       path/to/your_service.proto\n\n     protoc -I/usr/local/include -I. \\\n       -I$GOPATH/src \\\n       -I$GOPATH/src/github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis \\\n       --plugin=protoc-gen-grpc=grpc_ruby_plugin \\\n       --grpc-ruby_out=. \\\n       path/to/your_service.proto\n     ```\n   2. Add the googleapis-common-protos gem (or your language equivalent) as a dependency to your project.\n   3. Implement your gRPC service stubs\n\n5. Generate reverse-proxy using `protoc-gen-grpc-gateway`\n\n   ```sh\n   protoc -I/usr/local/include -I. \\\n     -I$GOPATH/src \\\n     -I$GOPATH/src/github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis \\\n     --grpc-gateway_out=logtostderr=true:. \\\n     path/to/your_service.proto\n   ```\n\n   It will generate a reverse proxy `path/to/your_service.pb.gw.go`.\n\n6. Write an entrypoint for the HTTP reverse-proxy server\n\n   ```go\n   package main\n \n   import (\n     "context"  // Use "golang.org/x/net/context" for Golang version <= 1.6\n     "flag"\n     "net/http"\n \n     "github.com/golang/glog"\n     "github.com/grpc-ecosystem/grpc-gateway/runtime"\n     "google.golang.org/grpc"\n \n     gw "path/to/your_service_package"  // Update\n   )\n \n   var (\n     // command-line options:\n     // gRPC server endpoint\n     grpcServerEndpoint = flag.String("grpc-server-endpoint",  "localhost:9090", "gRPC server endpoint")\n   )\n \n   func run() error {\n     ctx := context.Background()\n     ctx, cancel := context.WithCancel(ctx)\n     defer cancel()\n \n     // Register gRPC server endpoint\n     // Note: Make sure the gRPC server is running properly and accessible\n     mux := runtime.NewServeMux()\n     opts := []grpc.DialOption{grpc.WithInsecure()}\n     err := gw.RegisterYourServiceHandlerFromEndpoint(ctx, mux,  *grpcServerEndpoint, opts)\n     if err != nil {\n       return err\n     }\n \n     // Start HTTP server (and proxy calls to gRPC server endpoint)\n     return http.ListenAndServe(":8081", mux)\n   }\n \n   func main() {\n     flag.Parse()\n     defer glog.Flush()\n \n     if err := run(); err != nil {\n       glog.Fatal(err)\n     }\n   }\n   ```\n\n7. (Optional) Generate swagger definitions using `protoc-gen-swagger`\n\n   ```sh\n   protoc -I/usr/local/include -I. \\\n     -I$GOPATH/src \\\n     -I$GOPATH/src/github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis \\\n     --swagger_out=logtostderr=true:. \\\n     path/to/your_service.proto\n   ```\n\n## Parameters and flags\n`protoc-gen-grpc-gateway` supports custom mapping from Protobuf `import` to\nGolang import paths. They are compatible to\n[the parameters with same names in `protoc-gen-go`](https://github.com/golang/protobuf#parameters)\n(except `source_relative`).\n\nIn addition we also support the `request_context` parameter in order to use the\n`http.Request`\'s Context (only for Go 1.7 and above). This parameter can be\nuseful to pass request scoped context between the gateway and the gRPC service.\n\n`protoc-gen-grpc-gateway` also supports some more command line flags to control\nlogging. You can give these flags together with parameters above. Run\n`protoc-gen-grpc-gateway --help` for more details about the flags.\n\n## More Examples\nMore examples are available under `examples` directory.\n* `proto/examplepb/echo_service.proto`, `proto/examplepb/a_bit_of_everything.proto`, `proto/examplepb/unannotated_echo_service.proto`: service definition\n  * `proto/examplepb/echo_service.pb.go`, `proto/examplepb/a_bit_of_everything.pb.go`, `proto/examplepb/unannotated_echo_service.pb.go`: [generated] stub of the service\n  * `proto/examplepb/echo_service.pb.gw.go`, `proto/examplepb/a_bit_of_everything.pb.gw.go`, `proto/examplepb/uannotated_echo_service.pb.gw.go`: [generated] reverse proxy for the service\n  * `proto/examplepb/unannotated_echo_service.yaml`: gRPC API Configuration for ```unannotated_echo_service.proto```\n* `server/main.go`: service implementation\n* `main.go`: entrypoint of the generated reverse proxy\n\nTo use the same port for custom HTTP handlers (e.g. serving `swagger.json`),\ngRPC-gateway, and a gRPC server, see\n[this example by CoreOS](https://github.com/philips/grpc-gateway-example/blob/master/cmd/serve.go)\n(and its accompanying [blog post](https://coreos.com/blog/grpc-protobufs-swagger.html)).\n\n## Features\n\n### Supported\n\n* Generating JSON API handlers.\n* Method parameters in request body.\n* Method parameters in request path.\n* Method parameters in query string.\n* Enum fields in path parameter (including repeated enum fields).\n* Mapping streaming APIs to newline-delimited JSON streams.\n* Mapping HTTP headers with `Grpc-Metadata-` prefix to gRPC metadata (prefixed with `grpcgateway-`)\n* Optionally emitting API definitions for\n[OpenAPI (Swagger) v2](https://swagger.io/docs/specification/2-0/basic-structure/).\n* Setting [gRPC timeouts](https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-HTTP2.md#requests)\nthrough inbound HTTP `Grpc-Timeout` header.\n* Partial support for [gRPC API Configuration](https://cloud.google.com/endpoints/docs/grpc/grpc-service-config)\nfiles as an alternative to annotation.\n* Automatically translating PATCH requests into Field Mask gRPC requests. See\n[the docs](https://grpc-ecosystem.github.io/grpc-gateway/docs/patch.html)\nfor more information.\n\n### No plan to support\nBut patch is welcome.\n* Method parameters in HTTP headers.\n* Handling trailer metadata.\n* Encoding request/response body in XML.\n* True bi-directional streaming.\n\n# Mapping gRPC to HTTP\n\n* [How gRPC error codes map to HTTP status codes in the response](https://github.com/grpc-ecosystem/grpc-gateway/blob/master/runtime/errors.go#L15).\n* HTTP request source IP is added as `X-Forwarded-For` gRPC request header.\n* HTTP request host is added as `X-Forwarded-Host` gRPC request header.\n* HTTP `Authorization` header is added as `authorization` gRPC request header.\n* Remaining Permanent HTTP header keys (as specified by the IANA\n[here](http://www.iana.org/assignments/message-headers/message-headers.xhtml)\nare prefixed with `grpcgateway-` and added with their values to gRPC request\nheader.\n* HTTP headers that start with \'Grpc-Metadata-\' are mapped to gRPC metadata\n(prefixed with `grpcgateway-`).\n* While configurable, the default {un,}marshaling uses\n[jsonpb](https://godoc.org/github.com/golang/protobuf/jsonpb) with\n`OrigName: true`.\n\n# Contribution\nSee [CONTRIBUTING.md](http://github.com/grpc-ecosystem/grpc-gateway/blob/master/CONTRIBUTING.md).\n\n# License\ngrpc-gateway is licensed under the BSD 3-Clause License.\nSee [LICENSE.txt](https://github.com/grpc-ecosystem/grpc-gateway/blob/master/LICENSE.txt) for more details.\n'