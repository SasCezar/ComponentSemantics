b'# Swagger Client <img src="https://raw.githubusercontent.com/swagger-api/swagger.io/wordpress/images/assets/SW-logo-clr.png" height="50" align="right">\n\n[![Build Status](https://travis-ci.org/swagger-api/swagger-js.svg?branch=master)](https://travis-ci.org/swagger-api/swagger-js)\n[![Build Status](https://jenkins.swagger.io/view/OSS%20-%20JavaScript/job/oss-swagger-js-master/badge/icon?subject=jenkins%20build)](https://jenkins.swagger.io/view/OSS%20-%20JavaScript/job/oss-swagger-js-master/)\n\n**Swagger Client** is a JavaScript module that allows you to fetch, resolve, and interact with Swagger/OpenAPI documents.\n\n## New!\n\n**This is the new version of swagger-js, 3.x.** The new version supports Swagger 2.0 as well as OpenAPI 3.\n\n Want to learn more? Check out our [FAQ](https://github.com/swagger-api/swagger-js/blob/master/docs/MIGRATION_2_X.md).\n\nFor the older version of swagger-js, refer to the [*2.x branch*](https://github.com/swagger-api/swagger-js/tree/2.x).\n\n\n## Note:\nThe npm package is called `swagger-client` and the GitHub repository is `swagger-js`.\nWe\'ll be consolidating that soon. Just giving you the heads up. You may see references to both names.\n\n### Usage\n\n##### Prerequisites\n- Runtime:\n  - browser: es5 compatible. IE11+\n  - node v4.x.x\n- Building\n  - node v6.x.x\n\n##### Download via npm\n\n```\nnpm install swagger-client\n```\n\n##### Import in code\n\n```javascript\nimport Swagger from \'swagger-client\'\n// Or commonjs\nconst Swagger = require(\'swagger-client\')\n```\n\n##### Import in browser\n\n```html\n<script src=\'//unpkg.com/swagger-client\' type=\'text/javascript\'></script>\n<script>\nvar swaggerClient = new SwaggerClient(specUrl);\n</script>\n```\n\n\n#### API\n\nThis lib exposes these functionalities for Swagger 2.0 and OpenAPI 3:\n\n- Static functions for...\n  -  HTTP Client\n  -  Document Resolver (monolithic & subtree)\n  - TryItOut Executor\n- A constructor with the methods...\n  - HTTP Client, for convenience\n  - Document Resolver, which will use `url` or `spec` from the instance\n  - TryItOut Executor, bound to the `http` and `spec` instance properties\n  - Tags Interface, also bound to the instance\n\nHTTP Client\n-----------\n\n`Swagger.http(req)` exposes a [Fetch-like interface](https://github.com/lquixada/cross-fetch) with a twist: allowing `url` in the request object so that it can be passed around and mutated. It extends Fetch to support request and response interceptors and performs response & header serialization. This method could be overridden to change how SwaggerJS performs HTTP requests.\n\n```js\n// Fetch-like, but support `url`, `query` and `xxxInterceptor`\nconst request = {\n  url,\n  query,\n  method,\n  body,\n  headers,\n  requestInterceptor,\n  responseInterceptor,\n  userFetch\n}\n\nSwagger.http(request)\n  .then((res) => {\n    res.statusCode // status code\n    res.statusText // status text, ie: "Not Found"\n    res.body       // JSON object or undefined\n    res.obj        // same as above, legacy\n    res.text       // textual body, or Blob\n    res.headers    // header hash\n  })\n  .catch((err) => {\n    err            // instanceof Error\n    err.response   // response or null\n  })\n\n// Interceptors\nSwagger.http({\n  requestInterceptor: (req: Request) => Request | Promise<Request>\n  responseInterceptor: (res: Response) => Response | Promise<Response>\n})\n\n// Custom Fetch\nSwagger.http({\n  userFetch: (url: String, options: Object) => Promise\n})\n\n```\n\nSwagger Specification Resolver\n---------------------\n\n`Swagger.resolve({url, spec, http})` resolves `$ref`s (JSON-Refs) with the objects they point to.\n\n```js\n\nSwagger.resolve({url, spec, http}).then((resolved) => {\n  resolved.errors // resolution errors, if any\n  resolved.spec   // the resolved spec\n})\n```\n> This is done automatically if you use the constructor/methods\n\nTryItOut Executor\n-----------------\nAn HTTP client for OAS operations, maps an operation and values into an HTTP request.\n\n```js\nconst params = {\n  spec,\n\n  operationId, // Either operationId, or you can use pathName + method\n  (pathName),\n  (method),\n\n  parameters, // _named_ parameters in an object, eg: { petId: \'abc\' }\n  securities, // _named_ securities, will only be added to the request, if the spec indicates it. eg: {apiKey: \'abc\'}\n  requestContentType,\n  responseContentType,\n\n  (http), // You can also override the HTTP client completely\n  (userFetch), // Alternatively you can just override the fetch method (if you want to use request.js or some other HttpAgent)\n}\n\n// Creates a request object compatible with HTTP client interface.\n// If `pathName` and `method`, then those are used instead of operationId. This is useful if you\'re using this dynamically, as `pathName` + `method` are guarenteed to be unique.\nconst res = Swagger.execute({...params})\n\n// You can also generate just the request ( without executing... )\nconst req = Swagger.buildRequest({...params})\n```\n\nConstructor and methods\n-----------------------\n\nResolve the spec and expose some methods that use the resolved spec:\n\n- `Swagger(url, opts): Promise`\n- Exposes tags interface (see above)\n- Exposes the static functions: `execute`, `http`, `resolve` and some other minor ones\n- Exposes `#http`, `#execute` and `#resolve` bound to the instance\n\n```javascript\nSwagger(\'http://petstore.swagger.io/v2/swagger.json\')\n  .then( client => {\n      client.spec // The resolved spec\n      client.originalSpec // In case you need it\n      client.errors // Any resolver errors\n\n      // Tags interface\n      client.apis.pet.addPet({id: 1, name: "bobby"}).then(...)\n\n      // TryItOut Executor, with the `spec` already provided\n      client.execute({operationId: \'addPet\', parameters: {id: 1, name: "bobby") }).then(...)\n   })\n\n```\n\nTags Interface\n--------------\nA client for operations. We\'re currently using the `apis[tag][operationId]:ExecuteFunction` interface, which can be disabled entirely using `Swagger({disableInterfaces: true})` if you don\'t need it.\n\nOperationId\'s are meant to be unique within spec, if they\'re not we do the following:\n- If a tag is absent, we use `default` as the internal tag\n- If an operationId is missing, we deduce it from the http method and path, i.e. `${method}${path}`, with non-alphanumeric characters escaped to `_`. See these tests ([1](https://github.com/swagger-api/swagger-js/blob/7da5755fa18791cd114ecfc9587dcd1b5c58ede1/test/helpers.js#L7), [2](https://github.com/swagger-api/swagger-js/blob/7da5755fa18791cd114ecfc9587dcd1b5c58ede1/test/helpers.js#L77)) for examples.\n- If an operationId is duplicated across all operationIds of the spec, we rename all of them with numbers after the ID to keep them unique. You should not rely on this, as the renaming is non-deterministic. See [this test](https://github.com/swagger-api/swagger-js/blob/7da5755fa18791cd114ecfc9587dcd1b5c58ede1/test/helpers.js#L127) for an example.\n\n```js\nSwagger({ url: "http://petstore.swagger.io/v2/swagger.json" }).then((client) => {\n    client\n      .apis\n      .pet // tag name == `pet`\n      .addPet({ // operationId == `addPet`\n        id: 1,\n        body: {\n          name: "bobby",\n          status: "available"\n        }\n      })\n      .then(...)\n})\n```\n\nIf you\'d like to use the operationId formatting logic from Swagger-Client 2.x, set the `v2OperationIdCompatibilityMode` option:\n\n```js\nSwagger({\n  url: "http://petstore.swagger.io/v2/swagger.json",\n  v2OperationIdCompatibilityMode: true\n}).then((client) => {\n  // do things as usual\n})\n```\n\n#### OpenAPI 3.0\n\nOpenAPI 3.0 definitions work in a similar way with the tags interface, but you may need to provide additional data in an `options` object for server variables and request bodies, since these items are not actual parameters:\n\n```js\nSwagger({...}).then((client) => {\n    client\n      .apis\n      .pet // tag name == `pet`\n      .addPet({ // operationId == `addPet`\n        id: 1\n      }, {\n        requestBody: {\n          name: "bobby",\n          status: "available"\n        },\n        server: "http://petstore.swagger.io/{apiPrefix}/", // this should exactly match a URL in your `servers`\n        serverVariables: {\n          apiPrefix: "v2"\n        }\n      })\n      .then(...)\n})\n```\n\nIn Browser\n----------\n\nIf you need activate CORS requests, just enable it by `withCredentials` property at `http`\n\n```html\n<html>\n<head>\n<script src=\'//unpkg.com/swagger-client\' type=\'text/javascript\'></script> \n<script>\n\nvar specUrl = \'http://petstore.swagger.io/v2/swagger.json\'; // data urls are OK too \'data:application/json;base64,abc...\'\nSwaggerClient.http.withCredentials = true; // this activates CORS, if necessary\n\nvar swaggerClient = new SwaggerClient(specUrl)\n      .then(function (swaggerClient) {\n          return swaggerClient.apis.pet.addPet({id: 1, name: "bobby"}); // chaining promises\n      }, function (reason) {\n         console.error("failed to load the spec" + reason);\n      })\n      .then(function(addPetResult) {\n         console.log(addPetResult.obj);\n         // you may return more promises, if necessary\n      }, function (reason) {\n          console.error("failed on API call " + reason);\n      });\n</script>\n</head>\n<body>\n  check console in browser\'s dev. tools\n</body>\n</html>\n\n```\n\n\nCompatibility\n-------------\n\nSwaggerJS has some legacy signature _shapes_.\n\n### Execute\n##### Response shape\n```js\n// swagger-js\n{\n  url,\n  method,\n  status,\n  statusText,\n  headers,\n\n  data, // The textual content\n  obj   // The body object\n}\n\n// New shape\n{\n  url,\n  method,\n  status,\n  statusText,\n  headers, // See note below regarding headers\n\n  text,    // The textual content\n  body,    // The body object\n}\n```\n\n##### Serializing Headers\n\nBy default the instance version of `#http` serializes the body and headers.\nHowever, headers pose an issue when there are multiple headers with the same name.\nAs such we\'ve left the static version of `http` to not perform any serialization.\n\n### Build\n\n```sh\nnpm install\nnpm run test         # run test\nnpm run test:unit:watch   # run test with change watching\nnpm run test:lint         # run lint\nnpm run build        # package to release\nnpm run build:umd:watch    # package with non-minified dist/index.js (for debugging)\nnpm run build:bundle # build browser version available at .../browser/index.js\n```\n\n# Migration from 2.x\n\nThere has been a complete overhaul of the codebase.\nFor notes about how to migrate coming from 2.x,\nplease see [Migration from 2.x](docs/MIGRATION_2_X.md)\n\n## Security contact\n\nPlease disclose any security-related issues or vulnerabilities by emailing [security@swagger.io](mailto:security@swagger.io), instead of using the public issue tracker.\n\n### Graveyard\n\nFor features known to be missing from 3.x please see [the Graveyard](docs/GRAVEYARD.md)\n\n'