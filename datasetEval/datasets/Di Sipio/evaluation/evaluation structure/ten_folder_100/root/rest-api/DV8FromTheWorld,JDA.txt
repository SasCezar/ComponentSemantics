b'[version]: https://api.bintray.com/packages/dv8fromtheworld/maven/JDA/images/download.svg\n[download]: https://bintray.com/dv8fromtheworld/maven/JDA/_latestVersion\n[discord-invite]: https://discord.gg/0hMr4ce0tIl3SLv5\n[migration]: https://github.com/DV8FromTheWorld/JDA/wiki/0\\)-Migrating-to-V4\n[jenkins]: https://ci.dv8tion.net/job/JDA\n[license]: https://github.com/DV8FromTheWorld/JDA/tree/master/LICENSE\n[faq]: https://github.com/DV8FromTheWorld/JDA/wiki/10\\)-FAQ\n[troubleshooting]: https://github.com/DV8FromTheWorld/JDA/wiki/19\\)-Troubleshooting\n[discord-shield]: https://discordapp.com/api/guilds/125227483518861312/widget.png\n[faq-shield]: https://img.shields.io/badge/Wiki-FAQ-blue.svg\n[troubleshooting-shield]: https://img.shields.io/badge/Wiki-Troubleshooting-red.svg\n[jenkins-shield]: https://img.shields.io/badge/Download-Jenkins-brightgreen.svg\n[license-shield]: https://img.shields.io/badge/License-Apache%202.0-lightgrey.svg\n[migration-shield]: https://img.shields.io/badge/Wiki-Migrating%20from%20V3-green.svg\n[ ![version][] ][download]\n[ ![jenkins-shield][] ][jenkins]\n[ ![license-shield][] ][license]\n[ ![discord-shield][] ][discord-invite]\n[ ![faq-shield] ][faq]\n[ ![troubleshooting-shield] ][troubleshooting]\n[ ![migration-shield][] ][migration]\n\n<img align="right" src="https://github.com/DV8FromTheWorld/JDA/blob/assets/assets/readme/logo.png?raw=true" height="200" width="200">\n\n# JDA (Java Discord API)\n\nJDA strives to provide a clean and full wrapping of the Discord REST api and its Websocket-Events for Java.\nThis library is a helpful tool that provides the functionality to create a discord bot in java.\n\n## Summary\n\nDue to official statements made by the Discord developers we will no longer support unofficial features. These features\nare undocumented API endpoints or protocols that are not available to bot-accounts. We will however continue support\nfor the usage of JDA through the client account type through `JDABuilder(AccountType.CLIENT)`. This does not mean\nit is encouraged or recommended to create applications such as selfbots or custom clients which are prohibited by\nthe Discord Terms of Service.\n\n_Please see the [Discord docs](https://discordapp.com/developers/docs/reference) for more information about bot accounts._\n\n1. [Introduction](#creating-the-jda-object)\n2. [Sharding](#sharding-a-bot)\n3. [Entity Lifetimes](#entity-lifetimes)\n4. [Download](#download)\n5. [Documentation](#documentation)\n6. [Support](#getting-help)\n7. [Extensions And Plugins](#third-party-recommendations)\n8. [Contributing](#contributing-to-jda)\n9. [Dependencies](#dependencies)\n10. [Other Libraries](#related-projects)\n\n## UserBots and SelfBots\n\nDiscord is currently prohibiting creation and usage of automated client accounts (AccountType.CLIENT).\nWe however still have support to login with these accounts due to legacy support. That does not mean it is allowed or\nwelcome to use.\nNote that JDA is not a good tool to build a custom discord client as it loads all servers/guilds on startup unlike\na client which does this via lazy loading instead.\nIf you need a bot, use a bot account from the [Application Dashboard](https://discordapp.com/developers/applications).\n\n[Read More](https://support.discordapp.com/hc/en-us/articles/115002192352-Automated-user-accounts-self-bots-)\n\n## Creating the JDA Object\n\nCreating the JDA Object is done via the JDABuilder class. After setting the token and other options via setters,\nthe JDA Object is then created by calling the `build()` method. When `build()` returns,\nJDA might not have finished starting up. However, you can use `awaitReady()`\non the JDA object to ensure that the entire cache is loaded before proceeding.\nNote that this method is blocking and will cause the thread to sleep until startup has completed.\n\n**Example**:\n\n```java\nJDA jda = new JDABuilder("token").build();\n```\n\n**Note**: By default this will use the `AccountType.BOT` as that is the recommended type of account.\nYou can change this to use `AccountType.CLIENT`, however you will be risking account termination.\nUse `new JDABuilder(AccountType)` to change to a different account type.\n\n### Configuration\n\nBoth the `JDABuilder` and the `DefaultShardManagerBuilder` allow a set of configurations to improve the experience.\n\n**Example**:\n\n```java\npublic static void main(String[] args) {\n    JDABuilder builder = new JDABuilder(args[0]);\n    \n    // Disable parts of the cache\n    builder.setDisabledCacheFlags(EnumSet.of(CacheFlag.ACTIVITY, CacheFlag.VOICE_STATE));\n    // Enable the bulk delete event\n    builder.setBulkDeleteSplittingEnabled(false);\n    // Disable compression (not recommended)\n    builder.setCompression(Compression.NONE);\n    // Set activity (like "playing Something")\n    builder.setActivity(Activity.watching("TV"));\n    \n    builder.build();\n}\n```\n\n> See [JDABuilder](https://ci.dv8tion.net/job/JDA/javadoc/net/dv8tion/jda/api/JDABuilder.html)\n  and [DefaultShardManagerBuilder](https://ci.dv8tion.net/job/JDA/javadoc/net/dv8tion/jda/api/sharding/DefaultShardManagerBuilder.html)\n\n### Listening to Events\n\nThe event system in JDA is configured through a hierarchy of classes/interfaces.\nWe offer two implementations for the `IEventManager`:\n\n- **InterfacedEventManager** which uses an `EventListener` interface and the `ListenerAdapter` abstract class\n- **AnnotatedEventManager** which uses the `@SubscribeEvent` annotation that can be applied to methods\n\nBy default the **InterfacedEventManager** is used.\nSince you can create your own implementation of `IEventManager` this is a very versatile and configurable system.\nIf the aforementioned implementations don\'t suit your use-case you can simply create a custom implementation and\nconfigure it on the `JDABuilder` with `setEventManager(...)`.\n\n#### Examples:\n\n**Using EventListener**:\n\n```java\npublic class ReadyListener implements EventListener\n{\n    public static void main(String[] args)\n            throws LoginException, InterruptedException\n    {\n        // Note: It is important to register your ReadyListener before building\n        JDA jda = new JDABuilder("token")\n            .addEventListeners(new ReadyListener())\n            .build();\n\n        // optionally block until JDA is ready\n        jda.awaitReady();\n    }\n\n    @Override\n    public void onEvent(GenericEvent event)\n    {\n        if (event instanceof ReadyEvent)\n            System.out.println("API is ready!");\n    }\n}\n```\n\n**Using ListenerAdapter**:\n\n```java\npublic class MessageListener extends ListenerAdapter\n{\n    public static void main(String[] args)\n            throws LoginException\n    {\n        JDA jda = new JDABuilder("token").build();\n        //You can also add event listeners to the already built JDA instance\n        // Note that some events may not be received if the listener is added after calling build()\n        // This includes events such as the ReadyEvent\n        jda.addEventListeners(new MessageListener());\n    }\n\n    @Override\n    public void onMessageReceived(MessageReceivedEvent event)\n    {\n        if (event.isFromType(ChannelType.PRIVATE))\n        {\n            System.out.printf("[PM] %s: %s\\n", event.getAuthor().getName(),\n                                    event.getMessage().getContentDisplay());\n        }\n        else\n        {\n            System.out.printf("[%s][%s] %s: %s\\n", event.getGuild().getName(),\n                        event.getTextChannel().getName(), event.getMember().getEffectiveName(),\n                        event.getMessage().getContentDisplay());\n        }\n    }\n}\n```\n\n**Ping-Pong Bot**:\n\n```java\npublic class Bot extends ListenerAdapter\n{\n    public static void main(String[] args) throws LoginException\n    {\n        new JDABuilder(args[0])\n            .addEventListeners(new Bot())\n            .setActivity(Activity.playing("Type !ping"))\n            .build();\n    }\n    \n    @Override\n    public void onMessageReceived(MessageReceivedEvent event)\n    {\n        Message msg = event.getMessage();\n        if (msg.getContentRaw().equals("!ping"))\n        {\n            MessageChannel channel = event.getChannel();\n            long time = System.currentTimeMillis();\n            channel.sendMessage("Pong!") /* => RestAction<Message> */\n                   .queue(response /* => Message */ -> {\n                       response.editMessageFormat("Pong: %d ms", System.currentTimeMillis() - time).queue();\n                   });\n        }\n    }\n}\n```\n\n### RestAction\n\nThrough [RestAction](https://ci.dv8tion.net/job/JDA/javadoc/net/dv8tion/jda/api/requests/RestAction.html) we provide request handling with\n \n - [callbacks](https://ci.dv8tion.net/job/JDA/javadoc/net/dv8tion/jda/api/requests/RestAction.html#queue%28java.util.function.Consumer%29)\n - [promises](https://ci.dv8tion.net/job/JDA/javadoc/net/dv8tion/jda/api/requests/RestAction.html#submit%28%29)\n - and [sync](https://ci.dv8tion.net/job/JDA/javadoc/net/dv8tion/jda/api/requests/RestAction.html#complete%28%29)\n\nand it is up to the user to decide which pattern to utilize.\nIt can be combined with reactive libraries such as [reactor-core](https://github.com/reactor/reactor-core) due to being lazy.\n\n### More Examples\n\nWe provide a small set of Examples in the [Example Directory](https://github.com/DV8FromTheWorld/JDA/tree/master/src/examples/java).\n\n<!--\nTODO: Find good examples\n- [JDA Butler](https://github.com/Almighty-Alpaca/JDA-Butler)\n\n[And many more!](https://github.com/search?q=JDA+discord+bot&type=Repositories&utf8=%E2%9C%93)\n-->\n\n## Sharding a Bot\n\nDiscord allows Bot-accounts to share load across sessions by limiting them to a fraction of the total connected Guilds/Servers of the bot.\n<br>This can be done using **sharding** which will limit JDA to only a certain amount of Guilds/Servers including events and entities.\nSharding will limit the amount of Guilds/Channels/Users visible to the JDA session so it is recommended to have some kind of elevated management to\naccess information of other shards.\n\nTo use sharding in JDA you will need to use `JDABuilder.useSharding(int shardId, int shardTotal)`. The **shardId** is 0-based which means the first shard\nhas the ID 0. The **shardTotal** is the total amount of shards (not 0-based) which can be seen similar to the length of an array, the last shard has the ID of\n`shardTotal - 1`.\n\nThe [`SessionController`](https://ci.dv8tion.net/job/JDA/javadoc/net/dv8tion/jda/api/utils/SessionController.html) is a tool of the JDABuilder\nthat allows to control state and behaviour between shards (sessions). When using multiple builders to build shards you have to create one instance\nof this controller and add the same instance to each builder: `builder.setSessionController(controller)`\n\nSince version **3.4.0** JDA provides a `ShardManager` which automates this building process.\n\n### Example Sharding - Using JDABuilder\n\n```java\npublic static void main(String[] args) throws Exception\n{\n    JDABuilder shardBuilder = new JDABuilder(args[0]);\n    //register your listeners here using shardBuilder.addEventListeners(...)\n    shardBuilder.addEventListeners(new MessageListener());\n    for (int i = 0; i < 10; i++)\n    {\n        shardBuilder.useSharding(i, 10)\n                    .build();\n    }\n}\n```\n\n> When the `useSharding` method is invoked for the first time, the builder automatically sets a SessionController internally (if none is present)\n\n### Example Sharding - Using DefaultShardManager\n```java\npublic static void main(String[] args) throws Exception\n{\n    DefaultShardManagerBuilder builder = new DefaultShardManagerBuilder();\n    builder.setToken(args[0]);\n    builder.addEventListeners(new MessageListener());\n    builder.build();\n}\n```\n\n## Entity Lifetimes\n\nAn **Entity** is the term used to describe types such as **GuildChannel**/**Message**/**User** and other entities\nthat Discord provides.\nInstances of these entities are created and deleted by JDA when Discord instructs it. This means\nthe lifetime depends on signals provided by the Discord API which are used to create/update/delete entities.\nThis is done through Gateway Events known as "dispatches" that are handled by the JDA WebSocket handlers.\nWhen Discord instructs JDA to delete entities they are simply removed from the JDA cache and lose their references.\nOnce that happens nothing in JDA interacts or updates the instances of those entities and they become useless. Discord\nmay instruct to delete these entities randomly for cache synchronization with the API.\n\n**It is not recommended to store _any_ of these entities for a longer period of time!**\nInstead of keeping (e.g.) a `User` instance in some field an ID should be used. With the ID of a user\nyou can use `getUserById(id)` to get and keep the user reference in a local variable. (see below)\n\n### Fake Entities\n\nSome entities in JDA are marked through an interface called `IFakeable`. These entities can exist outside\nof the JDA cache and are inaccessible through the common `get...ById(id)` methods.\nFake entities are essentially instances that are not directly referenced by the JDA cache and are only\ntemporarily created for a specific usage. It may be used for the author of a message that has left the guild\nwhen requesting the history of a `MessageChannel` or for `Emote` instances used in a `Message` that are not part\nof any of the guilds available to the bot.\n\n### Entity Updates\n\nWhen an entity is updated through its manager they will send a request to the Discord API which will update the state\nof the entity. The success of this request **does not** imply the entity has been updated yet. All entities are updated\nby the aforementioned **Gateway Events** which means you cannot rely on the cache being updated yet once the\nexecution of a RestAction has completed. Some requests rely on the cache being updated to correctly update the entity.\nAn example of this is updating roles of a member which overrides all roles of the member by sending a list of the\nnew set of roles. This is done by first checking the current cache, the roles the member has right now, and appending\nor removing the requested roles. If the cache has not yet been updated by an event this will result in unexpected behavior.\n\n### Entity Deletion\n\nDiscord may request that a client (the JDA session) invalidates its entire cache. When this happens JDA will\nremove all of its current entities and reconnect the session. This is signaled through the `ReconnectEvent`.\nWhen entities are removed from the JDA cache they lose access to the encapsulating entities. For instance\na channel loses access to its guild. Once that happens they are unable to make any API requests through RestAction\nand instead throw an `IllegalStateException`. It is **highly recommended** to only keep references to entities\nby storing their **id** and using the respective `get...ById(id)` method when needed.\n\n#### Example\n\n```java\npublic class UserLogger extends ListenerAdapter \n{\n    private final long userId;\n    \n    public UserLogger(User user)\n    {\n        this.userId = user.getIdLong();\n    }\n    \n    @Override\n    public void onMessageReceived(MessageReceivedEvent event)\n    {\n        User author = event.getAuthor();\n        Message message = event.getMessage();\n        if (author.getIdLong() == userId)\n        {\n            // Print the message of the user\n            System.out.println(author.getAsTag() + ": " + message.getContentDisplay());\n        }\n    }\n    \n    @Override\n    public void onGuildJoin(GuildJoinEvent event)\n    {\n        JDA api = event.getJDA();\n        User user = api.getUserById(userId); // Acquire a reference to the User instance through the id\n        user.openPrivateChannel().queue((channel) ->\n        {\n            // Send a private message to the user\n            channel.sendMessageFormat("I have joined a new guild: **%s**", event.getGuild().getName()).queue();\n        });\n    }\n}\n```\n\n## Download\n\nLatest Stable Version: [GitHub Release](https://github.com/DV8FromTheWorld/JDA/releases/latest)\nLatest Version:\n[ ![version][] ][download]\n\nBe sure to replace the **VERSION** key below with the one of the versions shown above!\n\n**Maven**\n```xml\n<dependency>\n    <groupId>net.dv8tion</groupId>\n    <artifactId>JDA</artifactId>\n    <version>VERSION</version>\n</dependency>\n```\n```xml\n<repository>\n    <id>jcenter</id>\n    <name>jcenter-bintray</name>\n    <url>https://jcenter.bintray.com</url>\n</repository>\n\n```\n\n**Maven without Audio**\n```xml\n<dependency>\n    <groupId>net.dv8tion</groupId>\n    <artifactId>JDA</artifactId>\n    <version>VERSION</version>\n    <exclusions>\n        <exclusion>\n            <groupId>club.minnced</groupId>\n            <artifactId>opus-java</artifactId>\n        </exclusion>\n    </exclusions>\n</dependency>\n```\n\n**Gradle**\n```gradle\ndependencies {\n    compile \'net.dv8tion:JDA:VERSION\'\n}\n\nrepositories {\n    jcenter()\n}\n```\n\n**Gradle without Audio**\n```gradle\ndependencies {\n    compile (\'net.dv8tion:JDA:VERSION\') {\n        exclude module: \'opus-java\'\n    }\n}\n```\n\nThe builds are distributed using JCenter through Bintray [JDA JCenter Bintray](https://bintray.com/dv8fromtheworld/maven/JDA/)\n\nIf you do not need any opus de-/encoding done by JDA (voice receive/send with PCM) you can exclude `opus-java` entirely.\nThis can be done if you only send audio with an `AudioSendHandler` which only sends opus (`isOpus() = true`). (See [lavaplayer](https://github.com/sedmelluq/lavaplayer))\n\nIf you want to use a custom opus library you can provide the absolute path to `OpusLibrary.loadFrom(String)` before using\nthe audio api of JDA. This works without `opus-java-natives` as it only requires `opus-java-api`.\n<br>_For this setup you should only exclude `opus-java-natives` as `opus-java-api` is a requirement for en-/decoding._\n\nSee [opus-java](https://github.com/discord-java/opus-java)\n\n### Logging Framework - SLF4J\n\nJDA is using [SLF4J](https://www.slf4j.org/) to log its messages.\n\nThat means you should add some SLF4J implementation to your build path in addition to JDA.\nIf no implementation is found, following message will be printed to the console on startup:\n```\nSLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".\nSLF4J: Defaulting to no-operation (NOP) logger implementation\nSLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.\n```\n\nJDA currently provides a fallback Logger in case that no SLF4J implementation is present.\nWe strongly recommend to use one though, as that can improve speed and allows you to customize the Logger as well as log to files\n\nThe most popular implementations are [Log4j 2](https://logging.apache.org/log4j/2.x/) and [Logback](https://logback.qos.ch/)\n\n## Documentation\n\nDocs can be found on the [Jenkins][jenkins] or directly [here](https://ci.dv8tion.net/job/JDA/javadoc/)\n<br>A simple Wiki can also be found in this repository\'s [Wiki section](https://github.com/DV8FromTheWorld/JDA/wiki)\n\n### Annotations\n\nWe use a number of annotations to indicate future plans for implemented functionality such as new features of\nthe Discord API.\n\n- [Incubating](https://github.com/DV8FromTheWorld/JDA/blob/development/src/main/java/net/dv8tion/jda/annotations/Incubating.java)\n    <br>This annotation is used to indicate that functionality may change in the future. Often used when a new feature is added.\n- [ReplaceWith](https://github.com/DV8FromTheWorld/JDA/blob/development/src/main/java/net/dv8tion/jda/annotations/ReplaceWith.java)\n    <br>Paired with `@Deprecated` this is used to inform you how the new code-fragment is supposed to look once the hereby annotated functionality is removed.\n- [ForRemoval](https://github.com/DV8FromTheWorld/JDA/blob/development/src/main/java/net/dv8tion/jda/annotations/ForRemoval.java)\n    <br>Paired with `@Deprecated` this indicates that we plan to entirely remove the hereby annotated functionality in the future.\n- [DeprecatedSince](https://github.com/DV8FromTheWorld/JDA/blob/development/src/main/java/net/dv8tion/jda/annotations/DeprecatedSince.java)\n    <br>Paired with `@Deprecated` this specifies when a feature was marked as deprecated.\n\n[Sources](https://github.com/DV8FromTheWorld/JDA/tree/development/src/main/java/net/dv8tion/jda/annotations)\n\n## Getting Help\n\nFor general troubleshooting you can visit our wiki [Troubleshooting](https://github.com/DV8FromTheWorld/JDA/wiki/19\\)-Troubleshooting) and [FAQ](https://github.com/DV8FromTheWorld/JDA/wiki/10\\)-FAQ).\n<br>If you need help, or just want to talk with the JDA or other Devs, you can join the [Official JDA Discord Guild][discord-invite].\n\nAlternatively you can also join the [Unofficial Discord API Guild](https://discord.gg/discord-api).\nOnce you joined, you can find JDA-specific help in the `#java_jda` channel.\n\nFor guides and setup help you can also take a look at the [wiki](https://github.com/DV8FromTheWorld/JDA/wiki)\n<br>Especially interesting are the [Getting Started](https://github.com/DV8FromTheWorld/JDA/wiki/3\\)-Getting-Started)\nand [Setup](https://github.com/DV8FromTheWorld/JDA/wiki/2\\)-Setup) Pages.\n\n## Third Party Recommendations\n\n### [LavaPlayer](https://github.com/sedmelluq/lavaplayer)\n\nCreated and maintained by [sedmelluq](https://github.com/sedmelluq)\n<br>LavaPlayer is the most popular library used by Music Bots created in Java.\nIt is highly compatible with JDA and Discord4J and allows to play audio from\nYoutube, Soundcloud, Twitch, Bandcamp and [more providers](https://github.com/sedmelluq/lavaplayer#supported-formats).\n<br>The library can easily be expanded to more services by implementing your own AudioSourceManager and registering it.\n\nIt is recommended to read the [Usage](https://github.com/sedmelluq/lavaplayer#usage) section of LavaPlayer\nto understand a proper implementation.\n<br>Sedmelluq provided a demo in his repository which presents an example implementation for JDA:\nhttps://github.com/sedmelluq/lavaplayer/tree/master/demo-jda\n\n### [Lavalink](https://github.com/frederikam/Lavalink)\n\nCreated and maintained by [Frederik Mikkelsen](https://github.com/Frederikam), the creator of FredBoat.\n\nLavalink is a popular standalone audio sending node based on Lavaplayer. Lavalink was built with scalability in mind,\nand allows streaming music via many servers. It supports most of Lavaplayer\'s features.\n\nLavalink is used by many large bots, as well as bot developers who can not use a Java library like Lavaplayer.\nIf you plan on serving music on a smaller scale with JDA it is often preferable to just use Lavaplayer directly\nas it is easier.\n\n[Lavalink-Client](https://github.com/FredBoat/Lavalink-Client) is the official Lavalink client for JDA.\n\n### [JDA-Utilities](https://github.com/JDA-Applications/JDA-Utilities)\n\nCreated and maintained by [jagrosh](https://github.com/jagrosh).\n<br>JDA-Utilities provides a Command-Extension and several utilities to make using JDA very simple.\n\nFeatures include:\n- Paginated Message using Reactions\n- EventWaiter allowing to wait for a response and other events\n\n\n<!--\nTODO: Ensure this is compatible with version 4\n### [JDAction](https://github.com/sedmelluq/jdaction)\n\nCreated and maintained by [sedmelluq](https://github.com/sedmelluq)\n<br>JDAction is a [Gradle](https://gradle.org/) plugin which makes sure that the return values of all methods which return a RestAction are used.\nSince it is a common mistake to forget to `.queue()`/`.complete()`/`.submit()` RestActions,\nand it is often only discovered after noticing that something doesn\'t work,\nthis plugin will help catch those cases quickly as it will cause a build failure in such case.\n\nMore info about RestAction: [Wiki](https://github.com/DV8FromTheWorld/JDA/wiki/7\\)-Using-RestAction)\n-->\n\n### [jda-nas](https://github.com/sedmelluq/jda-nas)\n\nCreated and maintained by [sedmelluq](https://github.com/sedmelluq)\n<br>Provides a native implementation for the JDA Audio Send-System to avoid GC pauses.\n\nNote that this send system creates an extra UDP-Client which causes audio receive to no longer function properly\nsince discord identifies the sending UDP-Client as the receiver.\n\n```java\nJDABuilder builder = new JDABuilder(BOT_TOKEN)\n    .setAudioSendFactory(new NativeAudioSendFactory());\n```\n\n### [jda-reactor](https://github.com/MinnDevelopment/jda-reactor)\n\nCreated and maintained by [MinnDevelopment](https://github.com/MinnDevelopment).\n<br>Provides [Kotlin](https://kotlinlang.org/) extensions for **RestAction** and events that provide a [reactive](http://reactivex.io/intro.html) alternative to common JDA interfaces.\n\n```kotlin\nfun main() {\n    val manager = ReactiveEventManager()\n    manager.on<ReadyEvent>()\n           .subscribe { println("Ready to serve!") }\n    manager.on<MessageReceivedEvent>()\n           .filter { it.message.contentRaw == "!ping" }\n           .subscribe { it.channel.sendMessage("Pong!").queue() }\n\n    val jda = JDABuilder(BOT_TOKEN)\n               .setEventManager(manager)\n               .build()\n}\n```\n\nAn example bot for this can be found at [Reactive JDA Bot](https://github.com/MinnDevelopment/reactive-jda-bot).\n\n------\n\nMore can be found in our github organization: [JDA-Applications](https://github.com/JDA-Applications)\n\n## Contributing to JDA\n\nIf you want to contribute to JDA, make sure to base your branch off of our **development** branch (or a feature-branch)\nand create your PR into that **same** branch. **We will be rejecting any PRs between branches or into release branches!**\nIt is very possible that your change might already be in development or you missed something.\n\nMore information can be found at the wiki page [Contributing](https://github.com/DV8FromTheWorld/JDA/wiki/5\\)-Contributing)\n\n### Deprecation Policy\n\nWhen a feature is introduced to replace or enhance existing functionality we might deprecate old functionality.\n\nA deprecated method/class usually has a replacement mentioned in its documentation which should be switched to. Deprecated\nfunctionality might or might not exist in the next minor release. (Hint: The minor version is the `MM` of `XX.MM.RR_BB` in our version format)\n\nIt is possible that some features are deprecated without replacement, in this case the functionality is no longer supported by either the JDA structure\ndue to fundamental changes (for example automation of a feature) or due to discord API changes that cause it to be removed.\n\nWe highly recommend to discontinue usage of deprecated functionality and update by going through each minor release instead of jumping.\nFor instance, when updating from version 3.3.0 to version 3.5.1 you should do the following:\n\n- Update to `3.4.RR_BB` and check for deprecation, replace\n- Update to `3.5.1_BB` and check for deprecation, replace\n\nThe `BB` indicates the build number specified in the release details.\n\nThe `RR` in version `3.4.RR` should be replaced by the latest version that was published for `3.4`, you can find out which the latest\nversion was by looking at the [release page](https://github.com/DV8FromTheWorld/JDA/releases)\n\n## Dependencies:\n\nThis project requires **Java 8+**.<br>\nAll dependencies are managed automatically by Gradle.\n * NV Websocket Client\n   * Version: **2.5**\n   * [Github](https://github.com/TakahikoKawasaki/nv-websocket-client)\n   * [JCenter Repository](https://bintray.com/bintray/jcenter/com.neovisionaries%3Anv-websocket-client/view)\n * OkHttp\n   * Version: **3.13.0**\n   * [Github](https://github.com/square/okhttp)\n   * [JCenter Repository](https://bintray.com/bintray/jcenter/com.squareup.okhttp3:okhttp)\n * Apache Commons Collections4\n   * Version: **4.1**\n   * [Website](https://commons.apache.org/proper/commons-collections)\n   * [JCenter Repository](https://bintray.com/bintray/jcenter/org.apache.commons%3Acommons-collections4/view)\n * jackson\n   * Version: **2.9.8**\n   * [Github](https://github.com/FasterXML/jackson)\n   * [JCenter Repository](https://bintray.com/bintray/jcenter/com.fasterxml.jackson.core%3Ajackson-databind/view)\n * Trove4j\n   * Version: **3.0.3**\n   * [BitBucket](https://bitbucket.org/trove4j/trove)\n   * [JCenter Repository](https://bintray.com/bintray/jcenter/net.sf.trove4j%3Atrove4j/view)\n * slf4j-api\n   * Version: **1.7.25**\n   * [Website](https://www.slf4j.org/)\n   * [JCenter Repository](https://bintray.com/bintray/jcenter/org.slf4j%3Aslf4j-api/view)\n * opus-java (optional)\n   * Version: **1.0.4**\n   * [GitHub](https://github.com/discord-java/opus-java)\n   * [JCenter Repository](https://bintray.com/minndevelopment/maven/opus-java)\n\n## Related Projects\n\n- [Discord4J](https://github.com/Discord4J/Discord4J)\n- [Discord.NET](https://github.com/discord-net/Discord.Net)\n- [discord.py](https://github.com/Rapptz/discord.py)\n- [serenity](https://github.com/serenity-rs/serenity)\n\n**See also:** https://discordapp.com/developers/docs/topics/community-resources#libraries\n'