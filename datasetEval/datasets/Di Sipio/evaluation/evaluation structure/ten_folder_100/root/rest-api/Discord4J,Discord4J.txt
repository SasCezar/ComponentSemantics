b'# Discord4J\n\n<a href="https://discord4j.com"><img align="right" src="https://raw.githubusercontent.com/Discord4J/discord4j-web/master/public/logo.svg?sanitize=true" width=27%></a>\n\n[![Support Server Invite](https://img.shields.io/discord/208023865127862272.svg?color=7289da&label=Discord4J&logo=discord&style=flat-square)](https://discord.gg/NxGAeCY)\n[![Maven Central](https://img.shields.io/maven-central/v/com.discord4j/discord4j-core/3.0.svg?style=flat-square)](https://search.maven.org/artifact/com.discord4j/discord4j-core)\n[![Javadocs](https://www.javadoc.io/badge/com.discord4j/discord4j-core.svg?color=blue&style=flat-square)](https://www.javadoc.io/doc/com.discord4j/discord4j-core)\n[![CircleCI branch](https://img.shields.io/circleci/project/github/Discord4J/Discord4J/master.svg?label=circleci&logo=circleci&style=flat-square)](https://circleci.com/gh/Discord4J/Discord4J/tree/master)\n\n\nA fast, reactive Java wrapper for the official [Discord Bot API](https://discordapp.com/developers/docs/intro).\n\nBuilt with [Reactor](https://projectreactor.io/), [Netty](https://netty.io/), and a focus on flexibility, Discord4J provides an effective, non-blocking interface for creating Discord bots. The [reactive](https://www.reactivemanifesto.org/) and asynchronous nature of the library allows for scalability through backpressure handling and the efficient use of resources. Its [modularized](#modules) structure gives the user the ability to tailor their experience to different levels of abstraction and pick the right tools for the job.\n\n## Installation\n\nOur current stable line is [`3.0.x`](https://github.com/Discord4J/Discord4J/tree/3.0.x)\n\n### Gradle\n```groovy\nrepositories {\n  mavenCentral()\n}\n\ndependencies {\n  implementation \'com.discord4j:discord4j-core:3.0.11\'\n}\n```\n### Maven\n```xml\n<dependencies>\n  <dependency>\n    <groupId>com.discord4j</groupId>\n    <artifactId>discord4j-core</artifactId>\n    <version>3.0.11</version>\n  </dependency>\n</dependencies>\n```\n\n### SBT\n```scala\nlibraryDependencies ++= Seq(\n  "com.discord4j" % "discord4j-core" % "3.0.11"\n)\n```\n\n## Quick Example (Reactive and Blocking)\n```java\nfinal DiscordClient client = new DiscordClientBuilder("token").build();\n\nclient.getEventDispatcher().on(ReadyEvent.class)\n        .subscribe(ready -> System.out.println("Logged in as " + ready.getSelf().getUsername()));\n\nclient.getEventDispatcher().on(MessageCreateEvent.class)\n        .map(MessageCreateEvent::getMessage)\n        .filter(msg -> msg.getContent().map("!ping"::equals).orElse(false))\n        .flatMap(Message::getChannel)\n        .flatMap(channel -> channel.createMessage("Pong!"))\n        .subscribe();\n\nclient.login().block();\n```\n```java\nfinal DiscordClient client = new DiscordClientBuilder("token").build();\n\nclient.getEventDispatcher().on(ReadyEvent.class)\n        .subscribe(ready -> System.out.println("Logged in as " + ready.getSelf().getUsername()));\n\nclient.getEventDispatcher().on(MessageCreateEvent.class)\n        .subscribe(event -> {\n            Message message = event.getMessage();\n            if (message.getContent().map("!ping"::equals).orElse(false)) {\n                message.getChannel().block().createMessage("Pong!").block();\n            }\n         });\n\nclient.login().block();\n```\n\n## Modules\nDiscord4J is highly oriented towards customizability. To achieve this, the project is divided into several "modules" which can be used separately depending on your use case.\n\n### [Core](./core/README.md)\nThe `core` module combines the other modules to form high-level abstractions for the entire Discord Bot API. This is the module most users will want when making bots.\n\n### [Rest](./rest/README.md)\nThe `rest` module provides a low-level HTTP client specifically for Discord which properly handles Discord\'s [ratelimiting system](https://discordapp.com/developers/docs/topics/rate-limits).\n\n### [Gateway](./gateway/README.md)\nThe `gateway` module provides a low-level WebSocket client for interacting with the [Discord Gateway](https://discordapp.com/developers/docs/topics/gateway).\n\n### [Voice](./voice/README.md)\nThe `voice` module provides a client to manipulate audio through [Voice Connections](https://discordapp.com/developers/docs/topics/voice-connections).\n\n### [Common](./common/README.md)\nThe `common` module contains base utilities and models useful for other modules.\n\n## Stores\nDiscord4J\'s mechanism for storing information received on the gateway is completely pluggable. This allows both the ability to customize what is stored and how. The [Stores](https://github.com/Discord4J/Stores) repository contains some pre-made implementations as well as the API for making your own.\n\n## Useful Links\n* [Discord4J Site](https://discord4j.com)\n* [Discord4J Wiki](https://github.com/Discord4J/Discord4J/wiki)\n* [Javadoc](http://javadoc.io/doc/com.discord4j/discord4j-core/)\n* [Reactor 3 Reference Guide](http://projectreactor.io/docs/core/release/reference/)\n\n## Development builds\nPlease follow our instructions at [Using Jitpack](https://github.com/Discord4J/Discord4J/wiki/Using-Jitpack)\n\n### v3.1 development builds\n\nMake sure you have the appropriate repositories:\n\n```groovy\nrepositories {\n  maven { url \'https://oss.sonatype.org/content/repositories/snapshots\' }\n  mavenCentral()\n}\n\ndependencies {\n  implementation \'com.discord4j:discord4j-core:3.1.0-SNAPSHOT\'\n}\n```\n'