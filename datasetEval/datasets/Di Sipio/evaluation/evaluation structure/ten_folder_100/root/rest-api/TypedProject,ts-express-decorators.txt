b'# Ts.ED\n\n[![Build Status](https://travis-ci.org/TypedProject/ts-express-decorators.svg?branch=master)](https://travis-ci.org/TypedProject/ts-express-decorators)\n[![Coverage Status](https://coveralls.io/repos/github/TypedProject/ts-express-decorators/badge.svg?branch=master)](https://coveralls.io/github/TypedProject/ts-express-decorators?branch=master)\n![npm](https://img.shields.io/npm/dm/@tsed/common.svg)\n[![npm version](https://badge.fury.io/js/%40tsed%2Fcommon.svg)](https://badge.fury.io/js/%40tsed%2Fcommon)\n[![Dependencies](https://david-dm.org/TypedProject/ts-express-decorators.svg)](https://david-dm.org/TypedProject/ts-express-decorators#info=dependencies)\n[![img](https://david-dm.org/TypedProject/ts-express-decorators/dev-status.svg)](https://david-dm.org/TypedProject/ts-express-decorators/#info=devDependencies)\n[![img](https://david-dm.org/TypedProject/ts-express-decorators/peer-status.svg)](https://david-dm.org/TypedProject/ts-express-decorators/#info=peerDependenciess)\n[![Known Vulnerabilities](https://snyk.io/test/github/TypedProject/ts-express-decorators/badge.svg)](https://snyk.io/test/github/TypedProject/ts-express-decorators)\n[![semantic-release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg)](https://github.com/semantic-release/semantic-release)\n[![code style: prettier](https://img.shields.io/badge/code_style-prettier-ff69b4.svg?style=flat-square)](https://github.com/prettier/prettier)\n[![backers](https://opencollective.com/tsed/tiers/backer/badge.svg?label=backer&color=brightgreen)](https://opencollective.com/tsed/tiers/backer/badge.svg?label=backer&color=brightgreen)\n\n> A TypeScript Framework on top of Express !\n\n## What is it\n\nTs.ED is a framework on top of Express to write your application with TypeScript (or in ES6). It provides a lot of decorators \nto write your code.\n\n## Features\n\n* Define class as Controller,\n* Define class as Service (IoC),\n* Define class as Middleware and MiddlewareError,\n* Define class as Converter (POJ to Model and Model to POJ),\n* Define root path for an entire controller and versioning your Rest API,\n* Define as sub-route path for a method,\n* Define routes on GET, POST, PUT, DELETE and HEAD verbs,\n* Define middlewares on routes,\n* Define required parameters,\n* Inject data from query string, path parameters, entire body, cookies, session or header,\n* Inject Request, Response, Next object from Express request,\n* Template (View),\n* Swagger documentation and Swagger-ui,\n* Testing.\n\n## Documentation\n\nDocumentation is available on [https://tsed.io](https://tsed.io)\n\n## Examples\n\nExamples are available on [https://tsed.io/#/tutorials/overview](https://tsed.io/#/tutorials/overview)\n\n## Installation\n\nYou can get the latest release using npm:\n\n```batch\n$ npm install --save @tsed/core @tsed/common express@4 @types/express\n```\n\n> **Important!** TsExpressDecorators requires Node >= 6, Express >= 4, TypeScript >= 2.0 and \nthe `experimentalDecorators`, `emitDecoratorMetadata`, `types` and `lib` compilation \noptions in your `tsconfig.json` file.\n\n```json\n{\n  "compilerOptions": {\n    "target": "es2015",\n    "lib": ["es2015"],\n    "types": ["reflect-metadata"],\n    "module": "commonjs",\n    "moduleResolution": "node",\n    "experimentalDecorators":true,\n    "emitDecoratorMetadata": true,\n    "sourceMap": true,\n    "declaration": false\n  },\n  "exclude": [\n    "node_modules"\n  ]\n}\n```\n\n## Quick start\n#### Create your express server\n\nTsExpressDecorators provide a [`ServerLoader`](docs/server-loader.md) class to configure your \nexpress quickly. Just create a `server.ts` in your root project, declare \na new `Server` class that extends [`ServerLoader`](docs/server-loader.md).\n\n```typescript\nimport {ServerLoader, ServerSettings} from "@tsed/common";\nimport * as Path from "path";                              \n\nconst rootDir = Path.resolve(__dirname);\n\n@ServerSettings({\n    rootDir,\n    acceptMimes: ["application/json"]\n})\nexport class Server extends ServerLoader {\n  /**\n   * This method let you configure the middleware required by your application to works.\n   * @returns {Server}\n   */\n  public $beforeRoutesInit(): void|Promise<any> {\n    const cookieParser = require(\'cookie-parser\'),\n      bodyParser = require(\'body-parser\'),\n      compress = require(\'compression\'),\n      methodOverride = require(\'method-override\');\n \n    this\n      .use(GlobalAcceptMimesMiddleware)\n      .use(cookieParser())\n      .use(compress({}))\n      .use(methodOverride())\n      .use(bodyParser.json())\n      .use(bodyParser.urlencoded({\n        extended: true\n      }));\n \n    return null;\n  }   \n}\n```\n> By default ServerLoader load controllers in `${rootDir}/controllers` and mount it to `/rest` endpoint.\n\nAnd finally:\n\n```typescript\nimport {$log, ServerLoader} from "@tsed/common";\nimport {Server} from "./Server";\n\nasync function bootstrap() {\n  try {\n    $log.debug("Start server...");\n    const server = await ServerLoader.bootstrap(Server);\n\n    await server.listen();\n    $log.debug("Server initialized");\n  } catch (er) {\n    $log.error(er);\n  }\n}\n\nbootstrap();\n```\n\nTo customize the server settings see [Configure server with decorator](https://tsed.io/configuration.html)\n\n#### Create your first controller\n\nCreate a new `calendarCtrl.ts` in your controllers directory configured \npreviously with `ServerLoader.mount()`. All controllers declared with `@Controller` \ndecorators is considered as an Express router. An Express router require a path \n(here, the path is `/calendars`) to expose an url on your server. \nMore precisely, it is a part of path, and entire exposed url depend on \nthe Server configuration (see `ServerLoader.setEndpoint()`) and the controllers \ndependencies. In this case, we haven\'t a dependencies and the root endpoint is set to `/rest`. \nSo the controller\'s url will be `http://host/rest/calendars`.\n\n```typescript\nimport {Controller, Get} from "@tsed/common";\nimport * as Express from "express";\n\nexport interface Calendar{\n    id: string;\n    name: string;\n}\n\n@Controller("/calendars")\nexport class CalendarCtrl {\n    /**\n     * Example of classic call. Use `@Get` for routing a request to your method.\n     * In this case, this route "/calendars/:id" are mounted on the "rest/" path.\n     *\n     * By default, the response is sent with status 200 and is serialized in JSON.\n     *\n     * @param request\n     * @param response\n     * @returns {{id: any, name: string}}\n     */\n    @Get("/:id")\n    async get(request: Express.Request, response: Express.Response): Promise<Calendar> {\n        return {id: request.params.id, name: "test"};\n    }\n\n    @Get("/")\n    @ResponseView("calendars/index") // Render "calendars/index" file using Express.Response.render internal\n    async renderCalendars(request: Express.Request, response: Express.Response): Promise<Array<Calendar>> {\n\n        return [{id: \'1\', name: "test"}];\n    }\n    \n    @Post("/")\n    @Authenticated()\n    async post(\n        @Required() @BodyParams("calendar") calendar: Calendar\n    ): Promise<ICalendar> {\n    \n        return new Promise((resolve: Function, reject: Function) => {\n        \n            calendar.id = 1;\n            \n            resolve(calendar);\n            \n        });\n    }\n    \n    @Delete("/")\n    @Authenticated()\n    async post(\n        @BodyParams("calendar.id") @Required() id: string \n    ): Promise<ICalendar> {\n    \n        return new Promise((resolve: Function, reject: Function) => {\n        \n            calendar.id = id;\n            \n            resolve(calendar);\n            \n        });\n    }\n}\n```\n\nTo test your method, just run your `server.ts` and send a http request on `/rest/calendars/1`.\n\n> **Note** : Decorators `@Get` support dynamic pathParams (see `/:id`) and `RegExp` like Express API. \n\n## Contributors\nPlease read [contributing guidelines here](./CONTRIBUTING.md).\n\n<a href="https://github.com/TypedProject/ts-express-decorators/graphs/contributors"><img src="https://opencollective.com/tsed/contributors.svg?width=890" /></a>\n\n\n## Backers\n\nThank you to all our backers! \xf0\x9f\x99\x8f [[Become a backer](https://opencollective.com/tsed#backer)]\n\n<a href="https://opencollective.com/tsed#backers" target="_blank"><img src="https://opencollective.com/tsed/tiers/backer.svg?width=890"></a>\n\n\n## Sponsors\n\nSupport this project by becoming a sponsor. Your logo will show up here with a link to your website. [[Become a sponsor](https://opencollective.com/tsed#sponsor)]\n\n## License\n\nThe MIT License (MIT)\n\nCopyright (c) 2016 - 2018 Romain Lenzotti\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n[travis]: https://travis-ci.org/\n\n'