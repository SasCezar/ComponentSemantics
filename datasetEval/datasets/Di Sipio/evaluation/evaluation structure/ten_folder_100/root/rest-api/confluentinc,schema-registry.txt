b'Schema Registry\n================\n\nSchema Registry provides a serving layer for your metadata. It provides a\nRESTful interface for storing and retrieving Avro schemas. It stores a versioned\nhistory of all schemas, provides multiple compatibility settings and allows\nevolution of schemas according to the configured compatibility setting. It\nprovides serializers that plug into Kafka clients that handle schema storage and\nretrieval for Kafka messages that are sent in the Avro format.\n\nQuickstart\n----------\n\nThe following assumes you have Kafka and an instance of the Schema Registry running using the default settings.\n\n```bash\n# Register a new version of a schema under the subject "Kafka-key"\n$ curl -X POST -H "Content-Type: application/vnd.schemaregistry.v1+json" \\\n    --data \'{"schema": "{\\"type\\": \\"string\\"}"}\' \\\n    http://localhost:8081/subjects/Kafka-key/versions\n  {"id":1}\n\n# Register a new version of a schema under the subject "Kafka-value"\n$ curl -X POST -H "Content-Type: application/vnd.schemaregistry.v1+json" \\\n    --data \'{"schema": "{\\"type\\": \\"string\\"}"}\' \\\n     http://localhost:8081/subjects/Kafka-value/versions\n  {"id":1}\n\n# List all subjects\n$ curl -X GET http://localhost:8081/subjects\n  ["Kafka-value","Kafka-key"]\n\n# List all schema versions registered under the subject "Kafka-value"\n$ curl -X GET http://localhost:8081/subjects/Kafka-value/versions\n  [1]\n\n# Fetch a schema by globally unique id 1\n$ curl -X GET http://localhost:8081/schemas/ids/1\n  {"schema":"\\"string\\""}\n\n# Fetch version 1 of the schema registered under subject "Kafka-value"\n$ curl -X GET http://localhost:8081/subjects/Kafka-value/versions/1\n  {"subject":"Kafka-value","version":1,"id":1,"schema":"\\"string\\""}\n\n# Fetch the most recently registered schema under subject "Kafka-value"\n$ curl -X GET http://localhost:8081/subjects/Kafka-value/versions/latest\n  {"subject":"Kafka-value","version":1,"id":1,"schema":"\\"string\\""}\n\n# Delete version 3 of the schema registered under subject "Kafka-value"\n$ curl -X DELETE http://localhost:8081/subjects/Kafka-value/versions/3\n  3\n\n# Delete all versions of the schema registered under subject "Kafka-value"\n$ curl -X DELETE http://localhost:8081/subjects/Kafka-value\n  [1, 2, 3, 4, 5]\n\n# Check whether a schema has been registered under subject "Kafka-key"\n$ curl -X POST -H "Content-Type: application/vnd.schemaregistry.v1+json" \\\n    --data \'{"schema": "{\\"type\\": \\"string\\"}"}\' \\\n    http://localhost:8081/subjects/Kafka-key\n  {"subject":"Kafka-key","version":1,"id":1,"schema":"\\"string\\""}\n\n# Test compatibility of a schema with the latest schema under subject "Kafka-value"\n$ curl -X POST -H "Content-Type: application/vnd.schemaregistry.v1+json" \\\n    --data \'{"schema": "{\\"type\\": \\"string\\"}"}\' \\\n    http://localhost:8081/compatibility/subjects/Kafka-value/versions/latest\n  {"is_compatible":true}\n\n# Get top level config\n$ curl -X GET http://localhost:8081/config\n  {"compatibilityLevel":"BACKWARD"}\n\n# Update compatibility requirements globally\n$ curl -X PUT -H "Content-Type: application/vnd.schemaregistry.v1+json" \\\n    --data \'{"compatibility": "NONE"}\' \\\n    http://localhost:8081/config\n  {"compatibility":"NONE"}\n\n# Update compatibility requirements under the subject "Kafka-value"\n$ curl -X PUT -H "Content-Type: application/vnd.schemaregistry.v1+json" \\\n    --data \'{"compatibility": "BACKWARD"}\' \\\n    http://localhost:8081/config/Kafka-value\n  {"compatibility":"BACKWARD"}\n```\n\nInstallation\n------------\n\nYou can download prebuilt versions of the schema registry as part of the\n[Confluent Platform](http://confluent.io/downloads/). To install from source,\nfollow the instructions in the Development section.\n\nDeployment\n----------\n\nThe REST interface to schema registry includes a built-in Jetty server. The\nwrapper scripts ``bin/schema-registry-start`` and ``bin/schema-registry-stop``\nare the recommended method of starting and stopping the service.\n\nDevelopment\n-----------\n\nTo build a development version, you may need a development versions of\n[common](https://github.com/confluentinc/common) and\n[rest-utils](https://github.com/confluentinc/rest-utils).  After\ninstalling these, you can build the Schema Registry\nwith Maven.\n\nThis project uses the [Google Java code style](https://google.github.io/styleguide/javaguide.html)\nto keep code clean and consistent.\n\nOpenAPI Spec\n------------\n\nOpenAPI (formerly known as Swagger) specifications are built automatically using `swagger-maven-plugin`\non `compile` phase.\n\n\nContribute\n----------\n\n- Source Code: https://github.com/confluentinc/schema-registry\n- Issue Tracker: https://github.com/confluentinc/schema-registry/issues\n\nLicense\n-------\n\nThe project is licensed under the [Confluent Community License](LICENSE-ConfluentCommunity), except for client libs,\nwhich is under the [Apache 2.0 license](LICENSE-Apache).\nSee LICENSE file in each subfolder for detailed license agreement.\n'