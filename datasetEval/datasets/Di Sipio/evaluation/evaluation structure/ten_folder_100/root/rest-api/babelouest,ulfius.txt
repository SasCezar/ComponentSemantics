b'# Ulfius HTTP Framework\n\n[![Build Status](https://travis-ci.com/babelouest/ulfius.svg?branch=master)](https://travis-ci.com/babelouest/ulfius)\n\nHTTP Framework for REST Applications in C.\n\nBased on [GNU Libmicrohttpd](https://www.gnu.org/software/libmicrohttpd/) for the backend web server, [Jansson](http://www.digip.org/jansson/) for the json manipulation library, and [Libcurl](http://curl.haxx.se/libcurl/) for the http/smtp client API.\n\nUsed to facilitate creation of web applications in C programs with a small memory footprint, as in embedded systems applications.\n\nYou can create webservices in HTTP or HTTPS mode, stream data, or implement server websockets.\n\n## Hello World! example application\n\nThe source code of a hello world using Ulfius is the following:\n\n```c\n/**\n * test.c\n * Small Hello World! example\n * to compile with gcc, run the following command\n * gcc -o test test.c -lulfius\n */\n#include <stdio.h>\n#include <ulfius.h>\n\n#define PORT 8080\n\n/**\n * Callback function for the web application on /helloworld url call\n */\nint callback_hello_world (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  ulfius_set_string_body_response(response, 200, "Hello World!");\n  return U_CALLBACK_CONTINUE;\n}\n\n/**\n * main function\n */\nint main(void) {\n  struct _u_instance instance;\n\n  // Initialize instance with the port number\n  if (ulfius_init_instance(&instance, PORT, NULL, NULL) != U_OK) {\n    fprintf(stderr, "Error ulfius_init_instance, abort\\n");\n    return(1);\n  }\n\n  // Endpoint list declaration\n  ulfius_add_endpoint_by_val(&instance, "GET", "/helloworld", NULL, 0, &callback_hello_world, NULL);\n\n  // Start the framework\n  if (ulfius_start_framework(&instance) == U_OK) {\n    printf("Start framework on port %d\\n", instance.port);\n\n    // Wait for the user to press <enter> on the console to quit the application\n    getchar();\n  } else {\n    fprintf(stderr, "Error starting framework\\n");\n  }\n  printf("End framework\\n");\n\n  ulfius_stop_framework(&instance);\n  ulfius_clean_instance(&instance);\n\n  return 0;\n}\n```\n\n## Main features\n\n### Webservice\n\n- Create a webservice in a separate thread, the endpoint is identified by its method (ex: `GET`, `POST`, `PUT`, `DELETE`, etc.) and its url path with its optional parameters (ex: `/api/doc/@id`). The webservice is executed in a callback function.\n\n- Stream large amount of data with a reduced memory footprint.\n\n- Websocket service, the websocket messages exchange is executed in dedicated callback functions.\n\n### Client requests\n\n- Client http[s] and smtp requests execution, the response is parsed in a dedicated structure.\n\n- Client websocket request execution, the websocket messages exchange is executed in dedicated callback functions.\n\n### Websockets\n\n- Create a websocket service application\n\n- Create websocket client application\n\n- CLI to connect to a remote websocket: [uwsc](https://github.com/babelouest/ulfius/tree/master/tools/uwsc)\n\n## Installation\n\nSee [INSTALL.md](INSTALL.md) file for installation details\n\n## Documentation\n\nSee [API.md](API.md) file for API documentation details\n\n## Example programs source code\n\nExample programs are available to understand the different functionalities available, see [example_programs](https://github.com/babelouest/ulfius/blob/master/example_programs) folder for detailed sample source codes and documentation.\n\n## Example callback functions\n\nExample callback functions are available in the folder [example_callbacks](https://github.com/babelouest/ulfius/blob/master/example_callbacks). The example callback functions available are:\n- static file server: to provide static files of a specific folder\n- oauth2 bearer: to check the validity of a Oauth2 bearer jwt token. Requires [libjwt](https://github.com/benmcollins/libjwt).\n\n## Projects using Ulfius framework\n\n- [Angharad](https://github.com/babelouest/angharad), House automation system for ZWave and other types of devices\n- [Glewlwyd](https://github.com/babelouest/glewlwyd), a lightweight SSO server that provides OAuth2 and OpenID Connect authentication protocols\n- [Hutch](https://github.com/babelouest/hutch), a safe locker for passwords and other secrets, using javascript client side encryption only\n- [Taliesin](https://github.com/babelouest/taliesin), a lightweight audio streaming server\n- [Taulas Raspberry Pi Serial interface](https://github.com/babelouest/taulas/tree/master/taulas_raspberrypi_serial), an interface for Arduino devices that implent [Taulas](https://github.com/babelouest/taulas/) protocol, a house automation protocol for Angharad\n\n## Questions, problems ?\n\nI\'m open for questions and suggestions, feel free to open an issue or send a pull request if you feel like it!\n'