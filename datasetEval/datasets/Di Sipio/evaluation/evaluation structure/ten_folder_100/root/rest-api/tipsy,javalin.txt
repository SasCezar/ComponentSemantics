b'[![Chat at https://gitter.im/javalin-io/general](https://badges.gitter.im/javalin-io/general.svg)](https://gitter.im/javalin-io/general)\n[![Travis](https://github.com/tipsy/javalin/workflows/Test%20all%20JDKs%20on%20all%20OSes/badge.svg)](https://github.com/tipsy/javalin/actions)\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n[![Maven](https://img.shields.io/maven-central/v/io.javalin/javalin.svg)](https://search.maven.org/#search%7Cgav%7C1%7Cg%3A%22io.javalin%22%20AND%20a%3A%22javalin%22)\n\n# Javalin - A simple web framework for Java and Kotlin\n\nJavalin is a very lightweight web framework for Kotlin and Java which supports WebSockets, HTTP2 and async requests. Javalin\xe2\x80\x99s main goals are simplicity, a great developer experience, and first class interoperability between Kotlin and Java.\n\nJavalin is more of a library than a framework. Some key points:\n* You don\'t need to extend anything\n* There are no @Annotations\n* There is no reflection\n* There is no other magic; just code.\n\nGeneral information:\n* The project webpage is [javalin.io](https://javalin.io).\n* Documentation: [javalin.io/documentation](https://javalin.io/documentation)\n* Chat: https://gitter.im/javalin-io/general\n* Contributions are very welcome: [CONTRIBUTING.md](https://github.com/tipsy/javalin/blob/master/CONTRIBUTING.md)\n* License summary: https://tldrlegal.com/license/apache-license-2.0-(apache-2.0)\n* Interesting issues: [/tipsy/javalin/issues?q=label:INFO](https://github.com/tipsy/javalin/issues?q=is%3Aissue+label%3AINFO)\n\n## Quickstart\n\n### Add dependency\n\n#### Maven\n\n```xml\n<dependency>\n    <groupId>io.javalin</groupId>\n    <artifactId>javalin</artifactId>\n    <version>3.6.0</version>\n</dependency>\n```\n\n#### Gradle\n\n```groovy\ncompile "io.javalin:javalin:3.6.0"\n```\n\n### Start programming (Java)\n\n```java\nimport io.javalin.Javalin;\n\npublic class HelloWorld {\n    public static void main(String[] args) {\n        Javalin app = Javalin.create().start(7000);\n        app.get("/", ctx -> ctx.result("Hello World"));\n    }\n}\n```\n\n### Start programming (Kotlin)\n```kotlin\nimport io.javalin.Javalin\n\nfun main() {\n    val app = Javalin.create().start(7000)\n    app.get("/") { ctx -> ctx.result("Hello World") }\n}\n```\n\n## Examples\nThis section contains a few examples, mostly just extracted from the [docs](https://javalin.io/documentation).\nAll examples are in Kotlin, but you can find them in Java in the documentation (it\'s just syntax changes).\n\n### Api structure and server config\n```kotlin\nval app = Javalin.create { config ->\n    config.defaultContentType = "application/json"\n    config.autogenerateEtags = true\n    config.addStaticFiles("/public")\n    config.asyncRequestTimeout = 10_000L\n    config.dynamicGzip = true\n    config.enforceSsl = true\n}.routes {\n    path("users") {\n        get(UserController::getAll)\n        post(UserController::create)\n        path(":user-id") {\n            get(UserController::getOne)\n            patch(UserController::update)\n            delete(UserController::delete)\n        }\n        ws("events", userController::webSocketEvents)\n    }\n}.start(port)\n```\n\n### WebSockets\n```kotlin\napp.ws("/websocket/:path") { ws ->\n    ws.onConnect { ctx -> println("Connected") }\n    ws.onMessage { ctx ->\n        val user = ctx.message<User>(); // convert from json string to object\n        ctx.send(user); // convert to json string and send back\n    }\n    ws.onClose { ctx -> println("Closed") }\n    ws.onError { ctx -> println("Errored") }\n}\n```\n\n### Filters and Mappers\n```kotlin\napp.before("/some-path/*") { ctx ->  ... } // runs before requests to /some-path/*\napp.before { ctx -> ... } // runs before all requests\napp.after { ctx -> ... } // runs after all requests\napp.exception(Exception.class) { e, ctx -> ... } // runs if uncaught Exception\napp.error(404) { ctx -> ... } // runs if status is 404 (after all other handlers)\n\napp.wsBefore("/some-path/*") { ws ->  ... } // runs before ws events on /some-path/*\napp.wsBefore { ws -> ... } // runs before all ws events\napp.wsAfter { ws -> ... } // runs after all ws events\napp.wsException(Exception.class) { e, ctx -> ... } // runs if uncaught Exception in ws handler\n```\n\n### JSON-mapping\n```kotlin\nvar todos = arrayOf(...)\napp.get("/todos") { ctx -> // map array of Todos to json-string\n    ctx.json(todos)\n}\napp.put("/todos") { ctx -> // map request-body (json) to array of Todos\n    todos = ctx.body<Array<Todo>>()\n    ctx.status(204)\n}\n```\n\n### File uploads\n```kotlin\napp.post("/upload") { ctx ->\n    ctx.uploadedFiles("files").forEach { (contentType, content, name, extension) ->\n        FileUtil.streamToFile(content, "upload/$name")\n    }\n}\n```\n\n### OpenAPI (Swagger)\n\nJavalin has an OpenAPI (Swagger) plugin. Documentation can be enabled both through a DSL and through annotations,\nand Javalin can render docs using both SwaggerUI and ReDoc. Read more at https://javalin.io/plugins/openapi.\n\n## Special thanks\n* Blake Mizerany, for creating [Sinatra](http://www.sinatrarb.com/)\n* Per Wendel, for creating [Spark](http://sparkjava.com/)\n* [Christian Rasmussen](https://github.com/chrrasmussen), for being a great guy\n* [Per Kristian Kummermo](https://github.com/pkkummermo), also for being a great guy\n'