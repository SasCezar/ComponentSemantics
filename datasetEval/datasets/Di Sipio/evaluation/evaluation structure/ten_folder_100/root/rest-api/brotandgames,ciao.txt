b'# ciao\n\n[![Latest release](https://img.shields.io/github/release/brotandgames/ciao.svg)](https://github.com/brotandgames/ciao/releases/latest)\n[![Docker pulls](https://img.shields.io/docker/pulls/brotandgames/ciao.svg)](https://store.docker.com/community/images/brotandgames/ciao)\n[![License: MIT](https://img.shields.io/badge/license-MIT-blue.svg)](https://raw.githubusercontent.com/brotandgames/ciao/master/LICENSE)\n[![Build Status](https://travis-ci.org/brotandgames/ciao.svg?branch=master)](https://travis-ci.org/brotandgames/ciao)\n[![Gitter chat](https://badges.gitter.im/brotandgames/ciao.svg)](https://gitter.im/brotandgames/ciao)\n[![Website link](https://brotandgames.com/assets/ciao-link-website.svg)](https://brotandgames.com/ciao/)\n\n**[ciao](https://www.brotandgames.com/ciao/)** checks HTTP(S) URL endpoints for a HTTP status code (or errors on the lower TCP stack) and sends a notification on status change via E-Mail or Webhooks.\n\nIt uses Cron syntax to schedule the checks and comes along with a Web UI and a RESTful JSON API.\n\n![ciao Checks overview](https://brotandgames.com/assets/ciao-checks.png "ciao Checks overview")\n*You can find more screenshots on the [Homepage](https://www.brotandgames.com/ciao/).*\n\n**ciao** (/t\xca\x83a\xca\x8a/) - **c**heck **i**n **a**nd **o**ut - borrowed from Italian *ciao* for greeting someone.\n\n*Motivation:* create an open source web application for checking URL statuses with an UI and a REST API which is easy to install and maintain (no external dependencies like Databases, Caches etc.) in public and private environments.\n\nFollow [@brotandgames](https://www.twitter.com/brotandgames) on Twitter to get the latest News like Releases. Use [#ciaohttp](https://twitter.com/hashtag/ciaohttp) Hashtag for ciao related stuff.\n\n## Quickstart\n\n````\ndocker run --name ciao -p 8090:3000 brotandgames/ciao\n````\n\nOpen localhost:8090 in your webbrowser.\n\n## Features\n\n* Check HTTP/S endpoints in an interval\n* Use Cron syntax like `* * * * *` (every minute), `*/15 * * * *` (every 15 minutes), `@hourly` or `@daily` etc.\n* Web UI\n* [RESTful JSON API](#rest-api)\n* Get a notification on status change via [E-Mail](smtp_configuration.md) eg. Gmail, Sendgrid, MailChimp or [Webhooks](webhook_configuration.md) eg. RocketChat, Slack etc. (optional)\n* Configuration via ENVIRONMENT variables (suitable for most runtimes)\n* Expose Prometheus Metrics endpoint `/metrics` with information to digest by tools like Grafana (optional)\n* Protect with HTTP Basic auth on application basis (optional, only recommended in combination with TLS)\n* Instructions for [installing](#install)/[deploying](#deploy) in/to different Platforms\n* [Docker Image](#via-docker-image)\n* [Helm Chart](#via-helm)\n\n\n## Configuration\n\nciao is configured via ENVIRONMENT variables following the [12-factor app methodology](https://12factor.net/config).\n\n- `SECRET_KEY_BASE` will be auto-generated if you omit it\n- Time zone is configurable per `TIME_ZONE` variable (default: `UTC`) eg. `TIME_ZONE="Vienna"` - you can find all possible values by executing `docker run --rm brotandgames/ciao rake time:zones` (since version 1.2.0)\n- Check [SMTP Configuration](smtp_configuration.md) for all possible configuration variables, notes and example configurations for Gmail, Sendgrid etc.\n- Check [Webhook Configuration](webhook_configuration.md) for instructions how to send (webhook) notifications to RocketChat, Slack etc. (since version 1.4.0)\n- You can enable HTTP Basic auth for ciao by defining `BASIC_AUTH_USERNAME` and `BASIC_AUTH_PASSWORD` eg. `BASIC_AUTH_USERNAME="ciao-admin"` and `BASIC_AUTH_PASSWORD="sensitive_password"` (since version 1.3.0)\n- You can enable a Prometheus Metrics endpoint served under `/metrics` by setting `PROMETHEUS_ENABLED=true` - furthermore you can enable HTTP Basic auth for this endpoint by defining `PROMETHEUS_BASIC_AUTH_USERNAME="ciao-metrics"` and `PROMETHEUS_BASIC_AUTH_PASSWORD="sensitive_password"` (since version 1.5.0)\n\n## Install\n\nYou can install ciao via the official Docker image `brotandgames/ciao` or using Git and installing the dependencies manually.\n\nBy mounting a Docker volume you can avoid loosing data on restart or upgrade.\n\nIMPORTANT: Be sure to enable authentication (eg. HTTP Basic auth) and TLS certificates if you serve ciao publicly.\n\n### Via Docker image\n\n````\ndocker run \\\n  --name ciao \\\n  -p 8090:3000 \\\n  -e SECRET_KEY_BASE="sensitive_secret_key_base" \\\n  -e SMTP_ADDRESS=smtp.yourhost.com \\\n  -e SMTP_EMAIL_FROM="ciao@yourhost.com" \\\n  -e SMTP_EMAIL_TO="you@yourhost.com" \\\n  -e SMTP_PORT=587 \\\n  -e SMTP_DOMAIN=smtp.yourhost.com \\\n  -e SMTP_AUTHENTICATION=plain \\\n  -e SMTP_ENABLE_STARTTLS_AUTO=true \\\n  -e SMTP_USERNAME=ciao \\\n  -e SMTP_PASSWORD="sensitive_password" \\\n  -v /opt/ciao/data:/app/db/sqlite \\\n  brotandgames/ciao\n````\n\nOpen localhost:8090 in your webbrowser.\n\n### Via Docker-compose\n\nCreate docker-compose.yml file\n\n````\nversion: "3"\nservices:\n  ciao:\n    image: brotandgames/ciao\n    container_name: ciao\n    ports:\n      - \'8090:3000\'\n    environment:\n      - SECRET_KEY_BASE=sensitive_secret_key_base\n      - SMTP_ADDRESS=smtp.yourhost.com\n      - SMTP_EMAIL_FROM=ciao@yourhost.com\n      - SMTP_EMAIL_TO=you@yourhost.com\n      - SMTP_PORT=587\n      - SMTP_AUTHENTICATION=plain\n      - SMTP_DOMAIN=smtp.yourhost.com\n      - SMTP_ENABLE_STARTTLS_AUTO=true\n      - SMTP_USERNAME=ciao\n      - SMTP_PASSWORD=sensitive_password\n    volumes:\n      - /opt/ciao/data:/app/db/sqlite/\n````\n\nPull and run\n\n````\ndocker-compose pull\ndocker-compose up -d\n````\n\nOpen localhost:8090 in the webbrowser.\n\n*Note: if you have problems with environment variables (quoting, spaces etc), take a look at these GitHub issues ([1](https://github.com/brotandgames/ciao/issues/40), [2](https://github.com/docker/compose/issues/2854)) and these Stack Overflow questions ([1](https://stackoverflow.com/questions/53082932/yaml-docker-compose-spaces-quotes), [2](https://stackoverflow.com/questions/41988809/docker-compose-how-to-escape-environment-variables))*.\n\n### Via Git clone\n\n````\n# Clone repo\ngit clone https://github.com/brotandgames/ciao\n\ncd ciao\n\n# Install all dependencies (rubygems)\nRAILS_ENV=production bundle install\n\n# Configure\nexport SECRET_KEY_BASE="sensitive_secret_key_base" \\\n  SMTP_ADDRESS=smtp.yourhost.com \\\n  SMTP_EMAIL_FROM="ciao@yourhost.com" \\\n  SMTP_EMAIL_TO="you@yourhost.com" \\\n  SMTP_PORT=587 \\\n  SMTP_DOMAIN=smtp.yourhost.com \\\n  SMTP_AUTHENTICATION=plain \\\n  SMTP_ENABLE_STARTTLS_AUTO=true \\\n  SMTP_USERNAME=ciao \\\n  SMTP_PASSWORD="sensitive_password"\n\n# Run start script - basically this is check SECRET_KEY_BASE, database init/migrate and rails server\nRAILS_ENV=production ./start.sh\n````\n\nOpen localhost:3000 in the webbrowser.\n\n## REST API\n\n**GET /checks.json**\n\nShow collection (array) of all checks\n\n````\ncurl -X GET -H "Content-type: application/json" /checks.json\n````\n\n**GET /checks/<:id>.json**\n\nShow a specific check\n\n````\ncurl -X GET -H "Content-type: application/json" /checks/<:id>.json\n````\n\n**POST /checks.json**\n\nCreate a check\n\n````\ncurl -X POST -H "Content-type: application/json" /checks.json \\\n  -d \'{ "name": "brotandgames.com", "active": true, "url": "https://brotandgames.com", "cron": "* * * *"}\'\n````\n\n**PATCH/PUT /checks/<:id>.json**\n\nUpdate a check\n\n````\ncurl -X PUT -H "Content-type: application/json" /checks/<:id>.json \\\n  -d \'{ "name": "brotandgames.com", "active": false, "url": "https://brotandgames.com", "cron": "* * * *"}\'\n````\n\n**DELETE /checks/<:id>.json**\n\nDelete a check\n\n````\ncurl -X DELETE -H "Content-type: application/json" /checks/<:id>.json\n````\n\n## Backup & Restore\n\nState is stored in an internal SQLite database located in `db/sqlite/production.sqlite3`.\n\n*Note: Prior to version 1.1.0 the database was located in `db/` (missing sqlite subfolder). From 1.1.0 onwards the location is `db/sqlite/` to enable docker to use a volume.*\n\n### Backup\n\n````\ndocker cp ciao:/app/db/sqlite/production.sqlite3 production.sqlite3.backup\n````\n\n### Restore\n\n````\ndocker cp production.sqlite3.backup ciao:/app/db/sqlite/production.sqlite3\ndocker restart ciao\n````\n*Prior to version 1.2.0: visit `/checks/admin` and recreate the background jobs for active checks.*\n\n\n## Upgrade\n\n1. [Backup](#backup) the database\n2. Run container with new version\n3. [Restore](#restore) the database\n\n## Deploy\n\nHere you\'ll find instructions for deploying ciao to different platforms like Kubernetes or Dokku.\n\nBy mounting a Docker or Kubernetes volume you can avoid loosing data on restart or upgrade.\n\nIMPORTANT: Be sure to enable authentication (eg. HTTP Basic auth) and TLS certificates if you serve ciao publicly.\n\n### Kubernetes\n\n#### Via Helm\n\nInstall ciao via Helm Chart from the official repository.\n\nSource is located in `./chart` and released to https://releases.brotandgames.com/helm-charts.\n\n1. Use `helm repo add` command to add the Helm chart repository that contains charts to install ciao.\n\n````\nhelm repo add brotandgames https://releases.brotandgames.com/helm-charts\n\n# helm search brotandgames\n# should output something like this\n# NAME              CHART VERSION APP VERSION DESCRIPTION\n# brotandgames/ciao 0.1.0         latest      Ciao - HTTP checks & tests (private & public) monitoring\n````\n\n2. Install ciao via `helm upgrade --install`\n\nQuickstart (without configuring)\n\n````\nhelm upgrade --install --namespace your-namespace your-release-name brotandgames/ciao\n````\n\nWith [configuration](#configuration)\n\n````\nhelm upgrade --install --namespace your-namespace your-release-name brotandgames/ciao \\\n  --set env.SECRET_KEY_BASE="sensitive_secret_key_base" \\\n  --set env.SMTP_ADDRESS=smtp.yourhost.com \\\n  --set env.SMTP_EMAIL_FROM="ciao@yourhost.com" \\\n  --set env.SMTP_EMAIL_TO="you@yourhost.com" \\\n  --set env.SMTP_PORT=587 \\\n  --set env.SMTP_DOMAIN=smtp.yourhost.com \\\n  --set env.SMTP_AUTHENTICATION=plain \\\n  --set env.SMTP_ENABLE_STARTTLS_AUTO=true \\\n  --set env.SMTP_USERNAME=ciao \\\n  --set env.SMTP_PASSWORD="sensitive_password"\n````\n\n#### Via kubectl\n\nThe following code snippent will create a Kubernetes\n\n* Namespace `monitoring`,\n* Secret `ciao`,\n* Deployment `ciao` and\n* Service `ciao`.\n\n`kubectl apply -f k8s.yaml`\n\n````\n# k8s.yaml\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: monitoring\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: ciao\n  namespace: monitoring\ndata:\n  # all values should be base64 encoded\n  # so some_secret would be c29tZV9zZWNyZXQ=\n  SECRET_KEY_BASE: some_secret\n  SMTP_ADDRESS: smtp_address\n  SMTP_EMAIL_FROM: noreply@somedomain.com\n  SMTP_EMAIL_TO: monitoring@somedomain.com\n  SMTP_PORT: 465\n  SMTP_DOMAIN: mail.somedomain.com\n  SMTP_AUTHENTICATION: plain\n  SMTP_ENABLE_STARTTLS_AUTO: true\n  SMTP_USERNAME: smtp_some_username\n  SMTP_PASSWORD: smtp_some_password\n  SMTP_SSL: true\n  BASIC_AUTH_USERNAME: auth_some_username\n  BASIC_AUTH_PASSWORD: auth_some_password\n---\napiVersion: apps/v1beta1\nkind: Deployment\nmetadata:\n  name: ciao\n  namespace: monitoring\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: ciao\n    spec:\n      containers:\n      - image: brotandgames/ciao:latest\n        imagePullPolicy: IfNotPresent\n        name: ciao\n        volumeMounts: # Emit if you do not have persistent volumes\n        - mountPath: /app/db/sqlite/\n          name: persistent-volume\n          subPath: ciao\n        ports:\n        - containerPort: 3000\n        resources:\n          requests:\n            memory: 256Mi\n            cpu: 200m\n          limits:\n            memory: 512Mi\n            cpu: 400m\n        envFrom:\n        - secretRef:\n            name: ciao\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: ciao\n  namespace: monitoring\nspec:\n  ports:\n    - port: 80\n      targetPort: 3000\n      protocol: TCP\n  type: ClusterIP\n  selector:\n    app: ciao\n````\n\n### Dokku\n\n1. Create app\n\n````\ndokku apps:create ciao\n````\n\n2. Configure\n\n````\ndokku config:set --no-restart ciao \\\n  SECRET_KEY_BASE="sensitive_secret_key_base" \\\n  SMTP_ADDRESS=smtp.yourhost.com \\\n  SMTP_EMAIL_FROM="ciao@yourhost.com" \\\n  SMTP_EMAIL_TO="you@yourhost.com" \\\n  SMTP_PORT=587 \\\n  SMTP_DOMAIN=smtp.yourhost.com \\\n  SMTP_AUTHENTICATION=plain \\\n  SMTP_ENABLE_STARTTLS_AUTO=true \\\n  SMTP_USERNAME=ciao \\\n  SMTP_PASSWORD="sensitive_password"\n````\n\n3. Deploy ciao using your deployment method eg. [Dockerfile Deployment](http://dokku.viewdocs.io/dokku/deployment/methods/dockerfiles/), [Docker Image Deployment](http://dokku.viewdocs.io/dokku/deployment/methods/images/) etc.\n\n4. Protect your ciao instance by enabling HTTP Basic auth (using [dokku-http-auth](https://github.com/dokku/dokku-http-auth)) and installing Lets Encrypt certificates via [dokku-letsencrypt](https://github.com/dokku/dokku-letsencrypt).\n\n\n## Contributing\n\nWe encourage you to contribute to ciao in whatever way you like!\n\n## Versioning\n\n[Semantic Versioning 2.x](https://semver.org/)\n\nIn a nutshell:\n\n> Given a version number MAJOR.MINOR.PATCH, increment the:\n>\n> 1. MAJOR version when you make incompatible API changes,\n> 2. MINOR version when you add functionality in a backwards-compatible manner, and\n> 3. PATCH version when you make backwards-compatible bug fixes.\n>\n> Additional labels for pre-release and build metadata are available as extensions to the MAJOR.MINOR.PATCH format.\n\n## License\n\nciao is released under the [MIT License](https://opensource.org/licenses/MIT).\n\n## Guestbook\n\nWhy not reinvent the [guestbook](guestbook.md)?\n\n## Maintainer\n\nhttps://github.com/brotandgames\n'