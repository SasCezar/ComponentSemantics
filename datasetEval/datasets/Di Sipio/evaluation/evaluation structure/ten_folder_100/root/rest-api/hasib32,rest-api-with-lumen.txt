b'\n# REST API with Lumen 5.5 [![Build Status](https://travis-ci.org/hasib32/rest-api-with-lumen.svg?branch=master)](https://travis-ci.org/hasib32/rest-api-with-lumen)\n\nA RESTful API boilerplate for Lumen micro-framework. Features included:\n\n- Users Resource\n- OAuth2 Authentication using Laravel Passport\n- Scope based Authorization\n- Validation\n- [Repository Pattern](https://msdn.microsoft.com/en-us/library/ff649690.aspx)\n- API Response with [Fractal](http://fractal.thephpleague.com/)\n- Pagination\n- Seeding Database With Model Factory\n- Event Handling\n- Sending Mail using Mailable class\n- [CORS](https://github.com/barryvdh/laravel-cors) Support\n- [Rate Limit API Requests](https://mattstauffer.co/blog/api-rate-limiting-in-laravel-5-2)\n- Endpoint Tests and Unit Tests\n- Build Process with [Travis CI](https://travis-ci.org/)\n\n## Getting Started\nFirst, clone the repo:\n```bash\n$ git clone git@github.com:hasib32/rest-api-with-lumen.git\n```\n\n#### Laravel Homestead\nYou can use Laravel Homestead globally or per project for local development. Follow the [Installation Guide](https://laravel.com/docs/5.5/homestead#installation-and-setup).\n\n#### Install dependencies\n```\n$ cd rest-api-with-lumen\n$ composer install\n```\n\n#### Configure the Environment\nCreate `.env` file:\n```\n$ cat .env.example > .env\n```\nIf you want you can edit database name, database username and database password.\n\n#### Migrations and Seed the database with fake data\nFirst, we need connect to the database. For homestead user, login using default homestead username and password:\n```bash\n$ mysql -uhomestead -psecret\n```\n\nThen create a database:\n```bash\nmysql> CREATE DATABASE restapi;\n```\n\nAnd also create test database:\n```bash\nmysql> CREATE DATABASE restapi_test;\n```\n\nRun the Artisan migrate command with seed:\n```bash\n$ php artisan migrate --seed\n```\n\nCreate "personal access" and "password grant" clients which will be used to generate access tokens:\n```bash\n$ php artisan passport:install\n```\n\nYou can find those clients in ```oauth_clients``` table.\n\n### API Routes\n| HTTP Method\t| Path | Action | Scope | Desciption  |\n| ----- | ----- | ----- | ---- |------------- |\n| GET      | /users | index | users:list | Get all users\n| POST     | /users | store | users:create | Create an user\n| GET      | /users/{user_id} | show | users:read |  Fetch an user by id\n| PUT      | /users/{user_id} | update | users:write | Update an user by id\n| DELETE      | /users/{user_id} | destroy | users:delete | Delete an user by id\n\nNote: ```users/me``` is a special route for getting current authenticated user.\nAnd for all User routes \'users\' scope is available if you want to perform all actions.\n\n### OAuth2 Routes\nVisit [dusterio/lumen-passport](https://github.com/dusterio/lumen-passport/blob/master/README.md#installed-routes) to see all the available ```OAuth2``` routes.\n\n### Creating access_token\nSince Laravel Passport doesn\'t restrict any user creating any valid scope. I had to create a route and controller to restrict user creating access token only with permitted scopes. For creating access_token we have to use the ```accessToken``` route. Here is an example of creating access_token for grant_type password with [Postman.](https://www.getpostman.com/)\n\nhttp://stackoverflow.com/questions/39436509/laravel-passport-scopes\n\n![access_token creation](/public/images/accessTokenCreation.png?raw=true "access_token creation example")\n\n## Creating a New Resource\nCreating a new resource is very easy and straight-forward. Follow these simple steps to create a new resource.\n\n### Step 1: Create Route\nCreate a new route name ```messages```. Open the ```routes/web.php``` file and add the following code:\n\n```php\n$route->post(\'messages\', [\n    \'uses\'       => \'MessageController@store\',\n    \'middleware\' => "scope:messages,messages:create"\n]);\n$route->get(\'messages\',  [\n    \'uses\'       => \'MessageController@index\',\n    \'middleware\' => "scope:messages,messages:list"\n]);\n$route->get(\'messages/{id}\', [\n    \'uses\'       => \'MessageController@show\',\n    \'middleware\' => "scope:messages,messages:read"\n]);\n$route->put(\'messages/{id}\', [\n    \'uses\'       => \'MessageController@update\',\n    \'middleware\' => "scope:messages,messages:write"\n]);\n$route->delete(\'messages/{id}\', [\n    \'uses\'       => \'MessageController@destroy\',\n    \'middleware\' => "scope:messages,messages:delete"\n]);\n```\n\nFor more info please visit Lumen [Routing](https://lumen.laravel.com/docs/5.5/routing) page.\n\n### Step 2: Create Model and Migration for the Table\nCreate ```Message``` Model inside ```App/Models``` directory and create migration using Lumen Artisan command.\n\n**Message Model**\n\n```php\n<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Message extends Model\n{\n    /**\n     * The database table used by the model.\n     *\n     * @var string\n     */\n    protected $table = \'messages\';\n\n    /**\n     * The attributes that are mass assignable.\n     *\n     * @var array\n     */\n    protected $fillable = [\n        \'uid\',\n        \'userId\',\n        \'subject\',\n        \'message\',\n    ];\n}\n```\n\nVisit Laravel [Eloquent](https://laravel.com/docs/5.5/eloquent) Page for more info about Model.\n\n**Create migration for messages table**\n\n```bash\nphp artisan make:migration create_messages_table --create=messages\n```\n**Migration file**\n\n```php\nclass CreateMessagesTable extends Migration\n{\n    public function up()\n    {\n        Schema::create(\'messages\', function (Blueprint $table) {\n            $table->increments(\'id\');\n            $table->string(\'uid\', 36)->unique();\n            $table->integer(\'userId\')->unsigned();\n            $table->string(\'subject\')->nullable();\n            $table->longText(\'message\');\n            $table->timestamps();\n\n            $table->foreign(\'userId\')\n                ->references(\'id\')->on(\'users\')\n                ->onDelete(\'cascade\')\n                ->onUpdate(\'cascade\');\n        });\n    }\n}\n```\n\nFor more info visit Laravel [Migration](https://laravel.com/docs/5.5/migrations) page.\n\n### Step 3: Create Repository\nCreate ```MessageRepository``` and implementation of the repository name ```EloquentMessageRepository```.\n\n**MessageRepository**\n\n```php\n<?php\n\nnamespace App\\Repositories\\Contracts;\n\ninterface MessageRepository extends BaseRepository\n{\n}\n```\n\n**EloquentMessageRepository**\n\n```php\n<?php\n\nnamespace App\\Repositories;\n\nuse App\\Models\\Message;\nuse App\\Repositories\\Contracts\\MessageRepository;\n\nclass EloquentMessageRepository extends AbstractEloquentRepository implements MessageRepository\n{\n    /**\n     * Model name.\n     *\n     * @var string\n     */\n    protected $modelName = Message::class;\n}\n```\n\nNext, update ```RepositoriesServiceProvider``` to bind the implementation:\n\n```php\n<?php\n\nnamespace App\\Providers;\n\nuse Illuminate\\Support\\ServiceProvider;\nuse App\\Repositories\\Contracts\\UserRepository;\nuse App\\Repositories\\EloquentUserRepository;\nuse App\\Repositories\\Contracts\\MessageRepository;\nuse App\\Repositories\\EloquentMessageRepository;\n\nclass RepositoriesServiceProvider extends ServiceProvider\n{\n    /**\n     * Indicates if loading of the provider is deferred.\n     *\n     * @var bool\n     */\n    protected $defer = true;\n\n    /**\n     * Register any application services.\n     *\n     * @return void\n     */\n    public function register()\n    {\n        $this->app->bind(UserRepository::class, function () {\n            return new EloquentUserRepository(new User());\n        });\n        $this->app->bind(MessageRepository::class, function () {\n            return new EloquentMessageRepository(new Message());\n        });\n    }\n\n    /**\n     * Get the services provided by the provider.\n     *\n     * @return array\n     */\n    public function provides()\n    {\n        return [\n            UserRepository::class,\n            MessageRepository::class,\n        ];\n    }\n}\n```\n\nVisit Lumen documentation for more info about [Service Provider](https://lumen.laravel.com/docs/5.5/providers).\n\n### Step 4: Create Fractal Transformer\nFractal provides a presentation and transformation layer for complex data output, the like found in RESTful APIs, and works really well with JSON. Think of this as a view layer for your JSON/YAML/etc.\n\nCreate a new Transformer name ```MessageTransformer``` inside ```app/Transformers``` directory:\n\n```php\n<?php\n\nnamespace App\\Transformers;\n\nuse App\\Models\\Message;\nuse League\\Fractal\\TransformerAbstract;\n\nclass MessageTransformer extends TransformerAbstract\n{\n    public function transform(Message $message)\n    {\n        return [\n            \'id\'        => $message->uid,\n            \'userId\'    => $message->userId,\n            \'subject\'   => $message->subject,\n            \'message\'   => $message->message,\n            \'createdAt\' => (string) $message->created_at,\n            \'updatedAt\' => (string) $message->updated_at,\n        ];\n    }\n}\n```\nVisit [Fractal](http://fractal.thephpleague.com/) official page for more information.\n\n### Step 5: Create Policy\nFor authorization we need to create policy that way basic user can\'t show or edit other user messages.\n\n**MessagePolicy**\n\n```php\n<?php\n\nnamespace App\\Policies;\n\nuse App\\Models\\User;\nuse App\\Models\\Message;\n\nclass MessagePolicy\n{\n    /**\n     * Intercept checks.\n     *\n     * @param User $currentUser\n     * @return bool\n     */\n    public function before(User $currentUser)\n    {\n        if ($currentUser->isAdmin() && (!$currentUser->tokenCan(\'basic\') || $currentUser->tokenCan(\'undefined\'))) {\n            return true;\n        }\n    }\n\n    /**\n     * Determine if a given user has permission to show.\n     *\n     * @param User $currentUser\n     * @param Message $message\n     * @return bool\n     */\n    public function show(User $currentUser, Message $message)\n    {\n        return $currentUser->id === $message->userId;\n    }\n\n    /**\n     * Determine if a given user can update.\n     *\n     * @param User $currentUser\n     * @param Message $message\n     * @return bool\n     */\n    public function update(User $currentUser, Message $message)\n    {\n        return $currentUser->id === $message->userId;\n    }\n\n    /**\n     * Determine if a given user can delete.\n     *\n     * @param User $currentUser\n     * @param Message $message\n     * @return bool\n     */\n    public function destroy(User $currentUser, Message $message)\n    {\n        return $currentUser->id === $message->userId;\n    }\n}\n```\nNext, update ```AuthServiceProvider``` to use the policy:\n```\nGate::policy(Message::class, MessagePolicy::class);\n```\nAnd add scopes to ``Passport::tokensCan``:\n```\n[\n    \'messages\' => \'Messages scope\',\n    \'messages:list\' => \'Messages scope\',\n    \'messages:read\' => \'Messages scope for reading records\',\n    \'messages:write\' => \'Messages scope for writing records\',\n    \'messages:create\' => \'Messages scope for creating records\',\n    \'messages:delete\' => \'Messages scope for deleting records\'\n]\n```\nVisit Lumen [Authorization Page](https://lumen.laravel.com/docs/5.5/authorization) for more info about Policy.\n\n### Last Step: Create Controller\n \nFinally, let\'s create the ```MessageController```. Here we\'re using **MessageRepository, MessageTransformer and MessagePolicy**.\n\n```php\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\Message;\nuse App\\Repositories\\Contracts\\MessageRepository;\nuse Illuminate\\Http\\Request;\nuse App\\Transformers\\MessageTransformer;\n\nclass MessageController extends Controller\n{\n    /**\n     * Instance of MessageRepository.\n     *\n     * @var MessageRepository\n     */\n    private $messageRepository;\n\n    /**\n     * Instanceof MessageTransformer.\n     *\n     * @var MessageTransformer\n     */\n    private $messageTransformer;\n\n    /**\n     * Constructor.\n     *\n     * @param MessageRepository $messageRepository\n     * @param MessageTransformer $messageTransformer\n     */\n    public function __construct(MessageRepository $messageRepository, MessageTransformer $messageTransformer)\n    {\n        $this->messageRepository = $messageRepository;\n        $this->messageTransformer = $messageTransformer;\n\n        parent::__construct();\n    }\n\n    /**\n     * Display a listing of the resource.\n     *\n     * @param Request $request\n     * @return \\Illuminate\\Http\\JsonResponse\n     */\n    public function index(Request $request)\n    {\n        $messages = $this->messageRepository->findBy($request->all());\n\n        return $this->respondWithCollection($messages, $this->messageTransformer);\n    }\n\n    /**\n     * Display the specified resource.\n     *\n     * @param $id\n     * @return \\Illuminate\\Http\\JsonResponse|string\n     */\n    public function show($id)\n    {\n        $message = $this->messageRepository->findOne($id);\n\n        if (!$message instanceof Message) {\n            return $this->sendNotFoundResponse("The message with id {$id} doesn\'t exist");\n        }\n\n        // Authorization\n        $this->authorize(\'show\', $message);\n\n        return $this->respondWithItem($message, $this->messageTransformer);\n    }\n\n    /**\n     * Store a newly created resource in storage.\n     *\n     * @param Request $request\n     * @return \\Illuminate\\Http\\JsonResponse|string\n     */\n    public function store(Request $request)\n    {\n        // Validation\n        $validatorResponse = $this->validateRequest($request, $this->storeRequestValidationRules($request));\n\n        // Send failed response if validation fails\n        if ($validatorResponse !== true) {\n            return $this->sendInvalidFieldResponse($validatorResponse);\n        }\n\n        $message = $this->messageRepository->save($request->all());\n\n        if (!$message instanceof Message) {\n            return $this->sendCustomResponse(500, \'Error occurred on creating Message\');\n        }\n\n        return $this->setStatusCode(201)->respondWithItem($message, $this->messageTransformer);\n    }\n\n    /**\n     * Update the specified resource in storage.\n     *\n     * @param Request $request\n     * @param $id\n     * @return \\Illuminate\\Http\\JsonResponse\n     */\n    public function update(Request $request, $id)\n    {\n        // Validation\n        $validatorResponse = $this->validateRequest($request, $this->updateRequestValidationRules($request));\n\n        // Send failed response if validation fails\n        if ($validatorResponse !== true) {\n            return $this->sendInvalidFieldResponse($validatorResponse);\n        }\n\n        $message = $this->messageRepository->findOne($id);\n\n        if (!$message instanceof Message) {\n            return $this->sendNotFoundResponse("The message with id {$id} doesn\'t exist");\n        }\n\n        // Authorization\n        $this->authorize(\'update\', $message);\n\n\n        $message = $this->messageRepository->update($message, $request->all());\n\n        return $this->respondWithItem($message, $this->messageTransformer);\n    }\n\n    /**\n     * Remove the specified resource from storage.\n     *\n     * @param $id\n     * @return \\Illuminate\\Http\\JsonResponse|string\n     */\n    public function destroy($id)\n    {\n        $message = $this->messageRepository->findOne($id);\n\n        if (!$message instanceof Message) {\n            return $this->sendNotFoundResponse("The message with id {$id} doesn\'t exist");\n        }\n\n        // Authorization\n        $this->authorize(\'destroy\', $message);\n\n        $this->messageRepository->delete($message);\n\n        return response()->json(null, 204);\n    }\n\n    /**\n     * Store Request Validation Rules\n     *\n     * @param Request $request\n     * @return array\n     */\n    private function storeRequestValidationRules(Request $request)\n    {\n       return [\n           \'userId\'     => \'required|exists:users,id\',\n           \'subject\'    => \'required\',\n           \'message\'    => \'required\',\n        ];\n    }\n\n    /**\n     * Update Request validation Rules\n     *\n     * @param Request $request\n     * @return array\n     */\n    private function updateRequestValidationRules(Request $request)\n    {\n        return [\n            \'subject\'    => \'\',\n            \'message\'    => \'\',\n        ];\n    }\n}\n```\n\nVisit Lumen [Controller](https://lumen.laravel.com/docs/5.5/controllers) page for more info about Controller.\n\n## Tutorial\nTo see the step-by-step tutorial how I created this boilerplate please visit our blog [devnootes.net](https://devnotes.net/rest-api-development-with-lumen-part-one/).\n\n## Contributing\nContributions, questions and comments are all welcome and encouraged. For code contributions submit a pull request.\n\n## Credits\n[Taylor Otwell](https://github.com/taylorotwell), [Shahriar Mahmood](https://github.com/shahriar1), [Fractal](http://fractal.thephpleague.com/), [Phil Sturgeon](https://github.com/philsturgeon)\n## License\n\n [MIT license](http://opensource.org/licenses/MIT)\n'