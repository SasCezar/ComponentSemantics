b"Flask-Scaffold 2.0 let's you Prototype Database Driven Web Apps (Angular 6, Bootstrap 4) and REST API's  (Flask python framework), \n\n\n\n![](https://i.imgur.com/GeZ9vAB.png)\n![](https://i.imgur.com/XHpxJrM.png)\n![](https://i.imgur.com/RpsXaoe.png)\n\nFeatures include\n\n - Python 3 Support\n - RESTFUL JSON API\n - Continous Integration with Travis-CI\n - Inbuilt User Management and Admin Dashboard\n - [Google Analytics](#google-analytics)\n - Datatables support\n\n###[Demo](http://flaskscaffold.cloudapp.net) Sign Up and Login\n\n\n###Installation\n\nPlease ensure that development libraries for [PostgreSQL](http://techarena51.com/blog/flask-sqlalchemy-postgresql-tutorial/) are installed\nalong with NPM.\n\n####Step 1:Clone the project to your application folder.\n\n    git clone git@github.com:Leo-g/Flask-Scaffold.git YourAppFolderName && cd YourAppFolderName\n\n####Step 2: Install the requirements and add your Database configuration details.\n\n    pip install -r requirements.txt\n    cd app/templates/static\n    npm install\n\n    vim config.py\n    #Fill in your database username, password, name, host etc\n\n\n#### Step 3 : Declare your Resource and it's fields in a YAML file as follows\n\nFor a list of supported fields please see https://github.com/Leo-g/Flask-Scaffold/wiki/Fields\n\n    vim scaffold/blog.yaml\n    posts:\n     - title:string\n     - body:text\n     - author:string\n     - creation_date:datetime\n     - published:boolean\n    comments:\n     - author:string\n     - body:text\n     - author_url:url\n     - created_on:date\n     - approved:boolean\n    authors:\n     - name:string\n     - profile:text\n     - url:url\n\n#### Step 4 : Run the Scaffolding  and database migrations script\n\n    python scaffold.py scaffold/blog.yaml\n    python db.py db init\n    python db.py db migrate\n    python db.py db upgrade\n\n####  Step 5 : Run the Server\n\n    python run.py\n\n**You should be able to see the Login Page at http://localhost:5000, Sign Up and Login\n\n\n\n####For unit testing with python Unit tests\n\n    For a Single module\n\n    python app/<module_name>/test_<module_name>.py\n\n    For all modules\n\n    bash tests.bash\n\n###API\n\nAPI calls can be made to the following URL\n\nNote: This example is for a Post module\n\n| HTTP Method  | URL  | Results |\n| :------------ |:---------------:| -----:|\n| GET      | http://localhost:5000/api/v1/posts.json | Returns a list of all Posts |\n| POST     | http://localhost:5000/api/v1/posts.json      |   Creates a New Post |\n| GET | http://localhost:5000/api/v1/posts/1.json      | Returns details for the a single Post |\n| PATCH | http://localhost:5000/api/v1/posts/1.json      | Update a Post |\n| DELETE | http://localhost:8001/api/v1/posts/1.json      | Delete a Post |\n\nThe JSON format follows the spec at jsonapi.org and a sample is available in the sample.json   file\n\n###Tutorials\nhttps://techarena51.com/blog/buidling-a-database-driven-restful-json-api-in-python-3-with-flask-flask-restful-and-sqlalchemy/?utm_source=gh-flask-scaffold-readme\n\nhttps://techarena51.com/blog/tag/flask-tutorials/?utm_source=gh-flask-scaffold-readme\n\n###Directory Structure\n        Project-Folder\n            |-- config.py\n            |--run.py\n            |--requirements.txt\n            |--conf.js\n            |__ /venv\n            |-- db.py\n            |__ /scaffold\n            |-- scaffold.py\n            |-- tests.bash    #Tests for all modules\n            |__ app/\n                |-- __init__.py\n                +-- module-1\n                    |-- __init__.py\n                    |-- models.py\n                    |-- test_module-1.py  # Unit Tests for module 1\n                    |-- views.py\n                      \xc2\xa0\xc2\xa0\n                +-- module-2\n                    |-- __init__.py\n                    |-- models.py\n                    |-- test_module-2.py  # Unit Tests for module 2\n                    |-- views.py\n                |__ templates\n                   +-- static\n                          + -- js\n                                 |-- app.js\n                                 |-- login.js\n                          |-- css\n                          |-- images\n                   +-- module-1\n                            \xc2\xa0\xc2\xa0     |-- _form.html\n                            \xc2\xa0\xc2\xa0     |-- index.html\n                            \xc2\xa0\xc2\xa0     |-- add.html\n                            \xc2\xa0\xc2\xa0     |-- update.html\n                                   |-- controller.js\n                                   |--conf.js\n                                   |--spec.js\n                \xc2\xa0\xc2\xa0 +-- module-2\n                            \xc2\xa0\xc2\xa0     |-- _form.html\n                            \xc2\xa0\xc2\xa0     |-- index.html\n                            \xc2\xa0\xc2\xa0     |-- add.html\n                            \xc2\xa0\xc2\xa0     |-- update.html\n                                   |-- controller.js\n                                   |-- conf.js\n                                   |-- spec.js\n\n\n## Google Analytics\n\nAdd your tracking ID and Domain name in app.js in the app.config  section\n\n      app.config(function (AnalyticsProvider) {\n                  // Set a single account\n                  AnalyticsProvider.setAccount('UA-XXXXX-xx');\n                  AnalyticsProvider.setDomainName('XXX');\n\n       });\n\n\nFor complete Documentation see the [wiki](https://github.com/Leo-G/Flask-Scaffold/wiki/Add-Google-Analytics-to-Angularjs-UI-Routes)\n\nNote: This app in based on https://github.com/start-angular/SB-Admin-BS4-Angular-6"