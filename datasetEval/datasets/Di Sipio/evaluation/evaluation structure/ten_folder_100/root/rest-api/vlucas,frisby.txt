b"# Frisby\n\n[![NPM](https://nodei.co/npm/frisby.png)](https://nodei.co/npm/frisby/)\n[![Build\nStatus](https://travis-ci.org/vlucas/frisby.png?branch=master)](https://travis-ci.org/vlucas/frisby)\n\n![Frisby.js](https://www.frisbyjs.com/assets/frisbyjs.png)\n\n## Introduction\n\nFrisby.js an API testing tool built on top of\n[Jest](https://facebook.github.io/jest/) that makes testing API endpoints easy,\nfast and fun.\n\n## Installation\n\nInstall Frisby v2.x from NPM into your project:\n\n    npm install frisby --save-dev\n\n## Creating Tests\n\n### Simple Example\n\nThe minimum setup to run a single test expectation.\n\n```javascript\nconst frisby = require('frisby');\n\nit('should be a teapot', function () {\n  // Return the Frisby.js Spec in the 'it()' (just like a promise)\n  return frisby.get('http://httpbin.org/status/418')\n    .expect('status', 418);\n});\n```\n\n### Nested Dependent HTTP Calls\n\nA more complex example with nested dependent Frisby tests with Frisby's Promise-style `then` method.\n\n```javascript\nconst frisby = require('frisby');\nconst Joi = frisby.Joi; // Frisby exposes Joi for convenience\n\ndescribe('Posts', function () {\n  it('should return all posts and first post should have comments', function () {\n    return frisby.get('http://jsonplaceholder.typicode.com/posts')\n      .expect('status', 200)\n      .expect('jsonTypes', '*', {\n        userId: Joi.number(),\n        id: Joi.number(),\n        title: Joi.string(),\n        body: Joi.string()\n      })\n      .then(function (res) { // res = FrisbyResponse object\n        let postId = res.json[0].id;\n\n        // Get first post's comments\n        // RETURN the FrisbySpec object so function waits on it to finish - just like a Promise chain\n        return frisby.get('http://jsonplaceholder.typicode.com/posts/' + postId + '/comments')\n          .expect('status', 200)\n          .expect('json', '*', {\n            postId: postId\n          })\n          .expect('jsonTypes', '*', {\n            postId: Joi.number(),\n            id: Joi.number(),\n            name: Joi.string(),\n            email: Joi.string().email(),\n            body: Joi.string()\n          });\n      });\n  });\n});\n```\n\n## Built-In Expect Handlers\n\nFrisby comes with many handy built-in expect handlers to help you test the HTTP\nresponse of your API.\n\n * `status` - Check HTTP status\n * `header` - Check HTTP header key + value\n * `json` - Match JSON structure + values (RegExp can be used)\n * `jsonStrict` - Match EXACT JSON structure + values (extra keys not tested for cause test failures)\n * `jsonTypes` - Match JSON structure + value types\n * `jsonTypesStrict` - Match EXACT JSON structure + value types (extra keys not tested for cause test failures)\n * `bodyContains` - Match partial body content (string or regex)\n  * `responseTime` - Check if request completes within a specified duration (ms)\n\n## Define Custom Expect Handlers\n\nWhen Frisby's built-in expect handlers are not enough, or if you find yourself\nrunning the same expectations in multiple places in your tests, you can define\nyour own custom expect handler once, and then run it from anywhere in your\ntests.\n\n```javascript\nbeforeAll(function () {\n  // Add our custom expect handler\n  frisby.addExpectHandler('isUser1', function (response) {\n    let json = response.body;\n\n    // Run custom Jasmine matchers here\n    expect(json.id).toBe(1);\n    expect(json.email).toBe('testy.mctesterpants@example.com');\n  });\n});\n\n// Use our new custom expect handler\nit('should allow custom expect handlers to be registered and used', function () {\n  return frisby.get('https://api.example.com/users/1')\n    .expect('isUser1')\n});\n\nafterAll(function () {\n  // Remove said custom handler (if needed)\n  frisby.removeExpectHandler('isUser1');\n});\n```\n\n### Expecting JSON types using Joi\n\nWith Frisby, you can use [Joi](https://github.com/hapijs/joi) to set the expectation that the JSON body response from the HTTP call meets a defined schema. Check out the [Joi API](https://github.com/hapijs/joi/blob/master/API.md) for more details.\n\n## Using Jasmine Matchers Directly\n\nAny of the [Jasmine matchers](http://jasmine.github.io/2.4/introduction.html)\ncan be used inside the `then` method to perform additional or custom tests on\nthe response data.\n\n```javascript\nconst frisby = require('frisby');\n\nit('should be user 1', function () {\n  return frisby.get('https://api.example.com/users/1')\n    .then(function (res) {\n      expect(res.json.id).toBe(1);\n      expect(res.json.email).toBe('testy.mctesterpants@example.com');\n    });\n});\n```\n\n## Running Tests\n\nFrisby uses Jasmine style assertion syntax, and uses\n[Jest](https://facebook.github.io/jest/) to run tests.\n\nJest can run sandboxed tests in parallel, which fits the concept of HTTP\ntesting very nicely so your tests run much faster.\n\n### Install Jest\n\n    npm install --save-dev jest\n\n### Create your tests\n\n    mkdir __tests__\n    touch __tests__/api.spec.js\n\n### Run your tests from the CLI\n\n    cd your/project\n    jest\n\n### Documentation\n\nDocumentation is hosted at [frisbyjs.com](http://frisbyjs.com/), the\ndocumentation pages has separate\n[repository](https://github.com/vlucas/frisby-site).\n\n## License\n\nLicensed under the [BSD 3-Clause](http://opensource.org/licenses/BSD-3-Clause)\nlicense.\n"