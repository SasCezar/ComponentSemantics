b'## py_d3  [![PyPi version](https://img.shields.io/pypi/v/py_d3.svg)](https://pypi.python.org/pypi/py_d3/) ![t](https://img.shields.io/badge/status-stable-green.svg)\n\n`py_d3` is an IPython extension which adds D3 support to the Jupyter Notebook environment.\n\nD3 is a powerful JavaScript data visualization library, while Jupyter is an intuitive browser-hosted Python \ndevelopment environment. Wouldn\'t it be great if you could use them together? Now you can.\n \n## Quickstart\n\nYou can install `py_d3` by running `pip install py_d3`. Then load it into a Jupyter notebook by \nrunning`%load_ext py_d3`.\n\nUse the `%%d3` [cell magic](http://ipython.readthedocs.io/en/stable/config/extensions/index.html#ipython-extensions) \nto define notebook cells with D3 content.\n\n![alt text](./figures/import-py-d3-example.png "Logo Title Text 1")\n\n`py_d3` allows you to express even very complex visual ideas within a Jupyter Notebook without much difficulty.\nA [Radial Reingold-Tilford Tree](http://bl.ocks.org/mbostock/4063550), for example:\n\n![alt text](./figures/radial-tree-example.png "Logo Title Text 1")\n\nAn interactive treemap ([original](http://bl.ocks.org/mbostock/4063582)):\n\n![alt text](./figures/tree-diagram-example.gif "Logo Title Text 1")\n\nOr even the entire [D3 Show Reel](https://bl.ocks.org/mbostock/1256572) animation:\n\n![alt text](./figures/show-reel.gif "Logo Title Text 1")\n\nFor more examples refer to the [examples notebooks](https://github.com/ResidentMario/py_d3/tree/master/notebooks).\n\n## Features\n\n### Configuration\n\nThe cell magic will default to loading the latest stable version of D3.JS available online (via \n[CDNJS](https://cdnjs.com/about); `d3@4.13.0` at time of writing). To load a specific version, append the version \nname to the command, e.g. `%%d3 "3.5.17"`. To load D3.JS from a local file pass the filepath, e.g. \n`%%d3 "d3.v5.min.js"`.\n\nOnly one version of D3.JS may be loaded at a time. Both `3.x` and `4.x` versions of D3 are supported, but you may \nonly run one version of D3 per notebook. You can check which versions are available by running `%d3 versions`, and check which version \nis loaded in the *current* notebook using `%d3 version`. \n\n### Documentation\n\nPages from the [D3 API Reference](https://github.com/d3/d3/blob/master/API.md) may be rendered in-notebook using \n`%d3 doc`. For example, you can render the `d3-array` reference by running `%d3 doc "d3-array"`.\n\n### Verbose Mode\n\nYou can view code to-be-rendered using verbose mode: `%d3 -v`. This is helpful for debugging your application.\n\n## Technical\n\n### How it works\n\nJupyter notebooks allow executing arbitrary JavaScript code using `IPython.display.JavaScript`, however it makes no \neffort to restrict the level of DOM objects accessible to executable code. `py_d3` works by restricting `d3` scope to\nwhatever cell you are running the code in, by monkey-patching the `d3.select` and `d3.selectAll` methods (see \n[here](https://github.com/d3/d3/issues/2947) for why this works).\n\n### Porting\n\nMost HTML-hosted D3 visualizations, even very complex ones, can be made to run inside of a Jupyter Notebook `%%d3` cell with just two modifications:\n\n* Remove any D3 imports in the cell (e.g. `<script src="https://d3js.org/d3.v3.js"></script>`).\n* Make sure to create and append to a legal HTML document sub-element. `d3.select("body").append("g")` won\'t work.\n\n### Contributing\n\nSee `CONTRIBUTING.md` for instructions on how to contribute. Pull requests are welcome!'