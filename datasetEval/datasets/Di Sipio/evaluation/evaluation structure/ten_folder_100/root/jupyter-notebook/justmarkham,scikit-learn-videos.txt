b'# Introduction to machine learning with scikit-learn\n\nThis video series will teach you how to solve machine learning problems using Python\'s popular scikit-learn library. There are **10 video tutorials** totaling 4.5 hours, each with a corresponding **Jupyter notebook**. The notebook contains everything you see in the video: code, output, images, and comments.\n\n**Note:** The notebooks in this repository have been updated to use Python 3.6 and scikit-learn 0.19.1. The original notebooks (shown in the video) used Python 2.7 and scikit-learn 0.16, and can be downloaded from the [archive branch](https://github.com/justmarkham/scikit-learn-videos/tree/archive). You can read about how I updated the code in this [blog post](https://www.dataschool.io/how-to-update-your-scikit-learn-code-for-2018/).\n\nYou can [watch the entire series](https://www.youtube.com/playlist?list=PL5-da3qGB5ICeMbQuqbbCOQWcS6OYBr5A) on YouTube, and [view all of the notebooks](http://nbviewer.jupyter.org/github/justmarkham/scikit-learn-videos/tree/master/) using nbviewer.\n\n[![Watch the first tutorial video](images/youtube.png)](https://www.youtube.com/watch?v=elojMnjn4kk&list=PL5-da3qGB5ICeMbQuqbbCOQWcS6OYBr5A&index=1 "Watch the first tutorial video")\n\nOnce you complete this video series, I recommend enrolling in my online course, [Machine Learning with Text in Python](http://www.dataschool.io/learn/), to gain a deeper understanding of scikit-learn and Natural Language Processing.\n\n## Table of Contents\n\n1. What is machine learning, and how does it work? ([video](https://www.youtube.com/watch?v=elojMnjn4kk&list=PL5-da3qGB5ICeMbQuqbbCOQWcS6OYBr5A&index=1), [notebook](01_machine_learning_intro.ipynb))\n    - What is machine learning?\n    - What are the two main categories of machine learning?\n    - What are some examples of machine learning?\n    - How does machine learning "work"?\n\n2. Setting up Python for machine learning: scikit-learn and Jupyter Notebook ([video](https://www.youtube.com/watch?v=IsXXlYVBt1M&list=PL5-da3qGB5ICeMbQuqbbCOQWcS6OYBr5A&index=2), [notebook](02_machine_learning_setup.ipynb))\n    - What are the benefits and drawbacks of scikit-learn?\n    - How do I install scikit-learn?\n    - How do I use the Jupyter Notebook?\n    - What are some good resources for learning Python?\n\n3. Getting started in scikit-learn with the famous iris dataset ([video](https://www.youtube.com/watch?v=hd1W4CyPX58&list=PL5-da3qGB5ICeMbQuqbbCOQWcS6OYBr5A&index=3), [notebook](03_getting_started_with_iris.ipynb))\n    - What is the famous iris dataset, and how does it relate to machine learning?\n    - How do we load the iris dataset into scikit-learn?\n    - How do we describe a dataset using machine learning terminology?\n    - What are scikit-learn\'s four key requirements for working with data?\n\n4. Training a machine learning model with scikit-learn ([video](https://www.youtube.com/watch?v=RlQuVL6-qe8&list=PL5-da3qGB5ICeMbQuqbbCOQWcS6OYBr5A&index=4), [notebook](04_model_training.ipynb))\n    - What is the K-nearest neighbors classification model?\n    - What are the four steps for model training and prediction in scikit-learn?\n    - How can I apply this pattern to other machine learning models?\n\n5. Comparing machine learning models in scikit-learn ([video](https://www.youtube.com/watch?v=0pP4EwWJgIU&list=PL5-da3qGB5ICeMbQuqbbCOQWcS6OYBr5A&index=5), [notebook](05_model_evaluation.ipynb))\n    - How do I choose which model to use for my supervised learning task?\n    - How do I choose the best tuning parameters for that model?\n    - How do I estimate the likely performance of my model on out-of-sample data?\n\n6. Data science pipeline: pandas, seaborn, scikit-learn ([video](https://www.youtube.com/watch?v=3ZWuPVWq7p4&list=PL5-da3qGB5ICeMbQuqbbCOQWcS6OYBr5A&index=6), [notebook](06_linear_regression.ipynb))\n    - How do I use the pandas library to read data into Python?\n    - How do I use the seaborn library to visualize data?\n    - What is linear regression, and how does it work?\n    - How do I train and interpret a linear regression model in scikit-learn?\n    - What are some evaluation metrics for regression problems?\n    - How do I choose which features to include in my model?\n\n7. Cross-validation for parameter tuning, model selection, and feature selection ([video](https://www.youtube.com/watch?v=6dbrR-WymjI&list=PL5-da3qGB5ICeMbQuqbbCOQWcS6OYBr5A&index=7), [notebook](07_cross_validation.ipynb))\n    - What is the drawback of using the train/test split procedure for model evaluation?\n    - How does K-fold cross-validation overcome this limitation?\n    - How can cross-validation be used for selecting tuning parameters, choosing between models, and selecting features?\n    - What are some possible improvements to cross-validation?\n\n8. Efficiently searching for optimal tuning parameters ([video](https://www.youtube.com/watch?v=Gol_qOgRqfA&list=PL5-da3qGB5ICeMbQuqbbCOQWcS6OYBr5A&index=8), [notebook](08_grid_search.ipynb))\n    - How can K-fold cross-validation be used to search for an optimal tuning parameter?\n    - How can this process be made more efficient?\n    - How do you search for multiple tuning parameters at once?\n    - What do you do with those tuning parameters before making real predictions?\n    - How can the computational expense of this process be reduced?\n\n9. Evaluating a classification model ([video](https://www.youtube.com/watch?v=85dtiMz9tSo&list=PL5-da3qGB5ICeMbQuqbbCOQWcS6OYBr5A&index=9), [notebook](09_classification_metrics.ipynb))\n    - What is the purpose of model evaluation, and what are some common evaluation procedures?\n    - What is the usage of classification accuracy, and what are its limitations?\n    - How does a confusion matrix describe the performance of a classifier?\n    - What metrics can be computed from a confusion matrix?\n    - How can you adjust classifier performance by changing the classification threshold?\n    - What is the purpose of an ROC curve?\n    - How does Area Under the Curve (AUC) differ from classification accuracy?\n\n10. Encoding categorical features ([video](https://www.youtube.com/watch?v=irHhDMbw3xo&list=PL5-da3qGB5ICeMbQuqbbCOQWcS6OYBr5A&index=10), [notebook](10_categorical_features.ipynb))\n    - Why should you use a Pipeline?\n    - How do you encode categorical features with OneHotEncoder?\n    - How do you apply OneHotEncoder to selected columns with ColumnTransformer?\n    - How do you build and cross-validate a Pipeline?\n    - How do you make predictions on new data using a Pipeline?\n    - Why should you use scikit-learn (rather than pandas) for preprocessing?\n\n## Bonus Video\n\nAt the PyCon 2016 conference, I taught a **3-hour tutorial** that builds upon this video series and focuses on **text-based data**. You can watch the [tutorial video](https://www.youtube.com/watch?v=ZiKMIuYidY0&list=PL5-da3qGB5ICeMbQuqbbCOQWcS6OYBr5A&index=10) on YouTube.\n\nHere are the topics I covered:\n\n1. Model building in scikit-learn (refresher)\n2. Representing text as numerical data\n3. Reading a text-based dataset into pandas\n4. Vectorizing our dataset\n5. Building and evaluating a model\n6. Comparing models\n7. Examining a model for further insight\n8. Practicing this workflow on another dataset\n9. Tuning the vectorizer (discussion)\n\nVisit this [GitHub repository](https://github.com/justmarkham/pycon-2016-tutorial) to access the tutorial notebooks and many other recommended resources.\n'