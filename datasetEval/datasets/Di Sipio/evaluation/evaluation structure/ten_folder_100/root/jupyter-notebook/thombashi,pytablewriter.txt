b'.. contents:: **pytablewriter**\n   :backlinks: top\n   :depth: 2\n\nSummary\n=========\n`pytablewriter <https://github.com/thombashi/pytablewriter>`__ is a Python library to write a table in various formats: CSV / Elasticsearch / HTML / JavaScript / JSON / LaTeX / LDJSON / LTSV / Markdown / MediaWiki / NumPy / Excel / Pandas / Python / reStructuredText / SQLite / TOML / TSV.\n\n.. image:: https://badge.fury.io/py/pytablewriter.svg\n    :target: https://badge.fury.io/py/pytablewriter\n    :alt: PyPI package version\n\n.. image:: https://img.shields.io/pypi/pyversions/pytablewriter.svg\n    :target: https://pypi.org/project/pytablewriter/\n    :alt: Supported Python versions\n\n.. image:: https://img.shields.io/travis/thombashi/pytablewriter/master.svg?label=Linux/macOS%20CI\n    :target: https://travis-ci.org/thombashi/pytablewriter\n    :alt: Linux/macOS CI status\n\n.. image:: https://img.shields.io/appveyor/ci/thombashi/pytablewriter/master.svg?label=Windows%20CI\n    :target: https://ci.appveyor.com/project/thombashi/pytablewriter\n    :alt: Windows CI status\n\n.. image:: https://coveralls.io/repos/github/thombashi/pytablewriter/badge.svg?branch=master\n    :target: https://coveralls.io/github/thombashi/pytablewriter?branch=master\n    :alt: Test coverage\n\n.. image:: https://img.shields.io/github/stars/thombashi/pytablewriter.svg?style=social&label=Star\n    :target: https://github.com/thombashi/pytablewriter\n    :alt: GitHub stars\n\nFeatures\n--------\n- Write a table in various formats:\n    - Text formats:\n        - CSV / Tab-separated values (TSV)\n        - HTML\n        - JSON\n        - `Labeled Tab-separated Values (LTSV) <http://ltsv.org/>`__\n        - `Line-delimited JSON(LDJSON) <https://en.wikipedia.org/wiki/JSON_streaming#Line-delimited_JSON>`__/NDJSON/JSON Lines\n        - LaTeX: ``tabular``/``array`` environment\n        - Markdown\n        - MediaWiki\n        - reStructuredText: `Grid Tables <http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#grid-tables>`__/`Simple Tables <http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#simple-tables>`__/`CSV Table <http://docutils.sourceforge.net/docs/ref/rst/directives.html#id4>`__\n        - Source code\n            - JavaScript code (Definition of a nested list variable)\n            - `NumPy <https://www.numpy.org/>`__ (Definition of a `numpy.array <https://docs.scipy.org/doc/numpy/reference/generated/numpy.array.html>`__ variable)\n            - `Pandas <https://pandas.pydata.org/>`__ (Definition of a `pandas.DataFrame <https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html>`__ variable)\n            - Python code (Definition of a nested list variable)\n        - Space aligned values\n        - `TOML <https://github.com/toml-lang/toml>`__\n        - Unicode\n    - Binary file formats:\n        - Microsoft Excel :superscript:`TM` (``.xlsx``/``.xls`` file format)\n        - SQLite database\n    - Application specific formats:\n        - `Elasticsearch <https://www.elastic.co/products/elasticsearch>`__\n- Automatic tabular data formatting\n    - Alignment\n    - Padding\n    - Decimal places of numbers\n- Configure cell styles:\n    - Text alignment\n    - Font size/weight\n    - Thousand separator for numbers: e.g. ``1,000``/``1 000``\n- Configure ouput:\n    - Write table to a stream such as a file/standard-output/string-buffer/Jupyter-Notebook\n    - Get rendered tabular text\n- Data source\n    - nested list\n    - CSV\n    - `pandas.DataFrame <https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html>`__\n    - `pandas.Series <https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.html>`__\n    - etc.\n- Multibyte character support\n- ANSI color support\n\nExamples\n==========\nWrite tables\n--------------\nWrite a Markdown table\n~~~~~~~~~~~~~~~~~~~~~~~~\n:Sample Code:\n    .. code-block:: python\n\n        from pytablewriter import MarkdownTableWriter\n\n        writer = MarkdownTableWriter()\n        writer.table_name = "example_table"\n        writer.headers = ["int", "float", "str", "bool", "mix", "time"]\n        writer.value_matrix = [\n            [0,   0.1,      "hoge", True,   0,      "2017-01-01 03:04:05+0900"],\n            [2,   "-2.23",  "foo",  False,  None,   "2017-12-23 45:01:23+0900"],\n            [3,   0,        "bar",  "true",  "inf", "2017-03-03 33:44:55+0900"],\n            [-10, -9.9,     "",     "FALSE", "nan", "2017-01-01 00:00:00+0900"],\n        ]\n\n        writer.write_table()\n\n:Output:\n    .. code-block::\n\n        # example_table\n        |int|float|str |bool |  mix   |          time          |\n        |--:|----:|----|-----|-------:|------------------------|\n        |  0| 0.10|hoge|True |       0|2017-01-01 03:04:05+0900|\n        |  2|-2.23|foo |False|        |2017-12-23 12:34:51+0900|\n        |  3| 0.00|bar |True |Infinity|2017-03-03 22:44:55+0900|\n        |-10|-9.90|    |False|     NaN|2017-01-01 00:00:00+0900|\n\n:Rendering Result:\n    .. figure:: ss/markdown.png\n       :scale: 80%\n       :alt: markdown_ss\n\n       Rendered markdown at GitHub\n\nWrite a Markdown table with a margin\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n:Sample Code:\n    .. code-block:: python\n\n        from pytablewriter import MarkdownTableWriter\n\n        writer = MarkdownTableWriter()\n        writer.table_name = "write example with a margin"\n        writer.headers = ["int", "float", "str", "bool", "mix", "time"]\n        writer.value_matrix = [\n            [0,   0.1,      "hoge", True,   0,      "2017-01-01 03:04:05+0900"],\n            [2,   "-2.23",  "foo",  False,  None,   "2017-12-23 45:01:23+0900"],\n            [3,   0,        "bar",  "true",  "inf", "2017-03-03 33:44:55+0900"],\n            [-10, -9.9,     "",     "FALSE", "nan", "2017-01-01 00:00:00+0900"],\n        ]\n        writer.margin = 1  # add a whitespace for both sides of each cell\n\n        writer.write_table()\n\n:Output:\n    .. code-block::\n\n        # write example with a margin\n        | int | float | str  | bool  |   mix    |           time           |\n        |----:|------:|------|-------|---------:|--------------------------|\n        |   0 |  0.10 | hoge | True  |        0 | 2017-01-01 03:04:05+0900 |\n        |   2 | -2.23 | foo  | False |          | 2017-12-23 12:34:51+0900 |\n        |   3 |  0.00 | bar  | True  | Infinity | 2017-03-03 22:44:55+0900 |\n        | -10 | -9.90 |      | False |      NaN | 2017-01-01 00:00:00+0900 |\n\n``margin`` attribute can be available for all of the text format writer classes.\n\nWrite a reStructuredText table (Grid Tables)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n:Sample Code:\n    .. code-block:: python\n\n        import pytablewriter\n\n        writer = pytablewriter.RstGridTableWriter()\n        writer.table_name = "example_table"\n        writer.headers = ["int", "float", "str", "bool", "mix", "time"]\n        writer.value_matrix = [\n            [0,   0.1,      "hoge", True,   0,      "2017-01-01 03:04:05+0900"],\n            [2,   "-2.23",  "foo",  False,  None,   "2017-12-23 45:01:23+0900"],\n            [3,   0,        "bar",  "true",  "inf", "2017-03-03 33:44:55+0900"],\n            [-10, -9.9,     "",     "FALSE", "nan", "2017-01-01 00:00:00+0900"],\n        ]\n\n        writer.write_table()\n\n:Output:\n    .. code-block:: ReST\n\n        .. table:: example_table\n\n            +---+-----+----+-----+--------+------------------------+\n            |int|float|str |bool |  mix   |          time          |\n            +===+=====+====+=====+========+========================+\n            |  0| 0.10|hoge|True |       0|2017-01-01 03:04:05+0900|\n            +---+-----+----+-----+--------+------------------------+\n            |  2|-2.23|foo |False|        |2017-12-23 12:34:51+0900|\n            +---+-----+----+-----+--------+------------------------+\n            |  3| 0.00|bar |True |Infinity|2017-03-03 22:44:55+0900|\n            +---+-----+----+-----+--------+------------------------+\n            |-10|-9.90|    |False|     NaN|2017-01-01 00:00:00+0900|\n            +---+-----+----+-----+--------+------------------------+\n\n:Rendering Result:\n    .. table:: example_table\n\n        +---+-----+----+-----+--------+------------------------+\n        |int|float|str |bool |  mix   |          time          |\n        +===+=====+====+=====+========+========================+\n        |  0| 0.10|hoge|True |       0|2017-01-01 03:04:05+0900|\n        +---+-----+----+-----+--------+------------------------+\n        |  2|-2.23|foo |False|        |2017-12-23 12:34:51+0900|\n        +---+-----+----+-----+--------+------------------------+\n        |  3| 0.00|bar |True |Infinity|2017-03-03 22:44:55+0900|\n        +---+-----+----+-----+--------+------------------------+\n        |-10|-9.90|    |False|     NaN|2017-01-01 00:00:00+0900|\n        +---+-----+----+-----+--------+------------------------+\n\nWrite a table with JavaScript format (as a nested list variable definition)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n:Sample Code:\n    .. code-block:: python\n\n        import pytablewriter\n\n        writer = pytablewriter.JavaScriptTableWriter()\n        writer.table_name = "example_table"\n        writer.headers = ["int", "float", "str", "bool", "mix", "time"]\n        writer.value_matrix = [\n            [0,   0.1,      "hoge", True,   0,      "2017-01-01 03:04:05+0900"],\n            [2,   "-2.23",  "foo",  False,  None,   "2017-12-23 45:01:23+0900"],\n            [3,   0,        "bar",  "true",  "inf", "2017-03-03 33:44:55+0900"],\n            [-10, -9.9,     "",     "FALSE", "nan", "2017-01-01 00:00:00+0900"],\n        ]\n\n        writer.write_table()\n\n\n:Output:\n    .. code-block:: js\n\n        const example_table = [\n            ["int", "float", "str", "bool", "mix", "time"],\n            [0, 0.10, "hoge", true, 0, "2017-01-01 03:04:05+0900"],\n            [2, -2.23, "foo", false, null, "2017-12-23 12:34:51+0900"],\n            [3, 0.00, "bar", true, Infinity, "2017-03-03 22:44:55+0900"],\n            [-10, -9.90, "", false, NaN, "2017-01-01 00:00:00+0900"]\n        ];\n\nWrite a table to an Excel sheet\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n:Sample Code:\n    .. code-block:: python\n\n        from pytablewriter import ExcelXlsxTableWriter\n\n        writer = ExcelXlsxTableWriter()\n        writer.table_name = "example"\n        writer.headers = ["int", "float", "str", "bool", "mix", "time"]\n        writer.value_matrix = [\n            [0,   0.1,      "hoge", True,   0,      "2017-01-01 03:04:05+0900"],\n            [2,   "-2.23",  "foo",  False,  None,   "2017-12-23 12:34:51+0900"],\n            [3,   0,        "bar",  "true",  "inf", "2017-03-03 22:44:55+0900"],\n            [-10, -9.9,     "",     "FALSE", "nan", "2017-01-01 00:00:00+0900"],\n        ]\n        writer.dump("sample.xlsx")\n\n:Output:\n    .. figure:: ss/excel_single.png\n       :scale: 100%\n       :alt: excel_single\n\n       Output excel file (``sample_single.xlsx``)\n\nWrite a Unicode table\n~~~~~~~~~~~~~~~~~~~~~~~\n:Sample Code:\n    .. code-block:: python\n\n        from pytablewriter import UnicodeTableWriter\n\n        writer = UnicodeTableWriter()\n        writer.table_name = "example_table"\n        writer.headers = ["int", "float", "str", "bool", "mix", "time"]\n        writer.value_matrix = [\n            [0,   0.1,      "hoge", True,   0,      "2017-01-01 03:04:05+0900"],\n            [2,   "-2.23",  "foo",  False,  None,   "2017-12-23 45:01:23+0900"],\n            [3,   0,        "bar",  "true",  "inf", "2017-03-03 33:44:55+0900"],\n            [-10, -9.9,     "",     "FALSE", "nan", "2017-01-01 00:00:00+0900"],\n        ]\n\n        writer.write_table()\n\n:Output:\n    .. code-block::\n\n        \xe2\x94\x8c\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\xac\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\xac\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\xac\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\xac\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\xac\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x90\n        \xe2\x94\x82int\xe2\x94\x82float\xe2\x94\x82str \xe2\x94\x82bool \xe2\x94\x82  mix   \xe2\x94\x82          time          \xe2\x94\x82\n        \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\xbc\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\xbc\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\xbc\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\xbc\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\xbc\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\xa4\n        \xe2\x94\x82  0\xe2\x94\x82 0.10\xe2\x94\x82hoge\xe2\x94\x82True \xe2\x94\x82       0\xe2\x94\x822017-01-01 03:04:05+0900\xe2\x94\x82\n        \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\xbc\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\xbc\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\xbc\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\xbc\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\xbc\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\xa4\n        \xe2\x94\x82  2\xe2\x94\x82-2.23\xe2\x94\x82foo \xe2\x94\x82False\xe2\x94\x82        \xe2\x94\x822017-12-23 12:34:51+0900\xe2\x94\x82\n        \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\xbc\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\xbc\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\xbc\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\xbc\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\xbc\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\xa4\n        \xe2\x94\x82  3\xe2\x94\x82 0.00\xe2\x94\x82bar \xe2\x94\x82True \xe2\x94\x82Infinity\xe2\x94\x822017-03-03 22:44:55+0900\xe2\x94\x82\n        \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\xbc\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\xbc\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\xbc\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\xbc\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\xbc\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\xa4\n        \xe2\x94\x82-10\xe2\x94\x82-9.90\xe2\x94\x82    \xe2\x94\x82False\xe2\x94\x82     NaN\xe2\x94\x822017-01-01 00:00:00+0900\xe2\x94\x82\n        \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\xb4\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\xb4\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\xb4\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\xb4\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\xb4\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x98\n\nWrite a Markdown table from ``pandas.DataFrame`` instance\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n``from_dataframe`` method of writer classes will set up tabular data from ``pandas.DataFrame``:\n\n:Sample Code:\n    .. code-block:: python\n\n        from textwrap import dedent\n        import pandas as pd\n        import six\n        from pytablewriter import MarkdownTableWriter\n\n        csv_data = six.StringIO(dedent("""\\\n            "i","f","c","if","ifc","bool","inf","nan","mix_num","time"\n            1,1.10,"aa",1.0,"1",True,Infinity,NaN,1,"2017-01-01 00:00:00+09:00"\n            2,2.20,"bbb",2.2,"2.2",False,Infinity,NaN,Infinity,"2017-01-02 03:04:05+09:00"\n            3,3.33,"cccc",-3.0,"ccc",True,Infinity,NaN,NaN,"2017-01-01 00:00:00+09:00"\n            """))\n        df = pd.read_csv(csv_data, sep=\',\')\n\n        writer = MarkdownTableWriter()\n        writer.from_dataframe(df)\n        writer.write_table()\n\n:Output:\n    .. code-block::\n\n        | i | f  | c  | if |ifc|bool |  inf   |nan|mix_num |          time           |\n        |--:|---:|----|---:|---|-----|--------|---|-------:|-------------------------|\n        |  1|1.10|aa  | 1.0|  1|True |Infinity|NaN|       1|2017-01-01 00:00:00+09:00|\n        |  2|2.20|bbb | 2.2|2.2|False|Infinity|NaN|Infinity|2017-01-02 03:04:05+09:00|\n        |  3|3.33|cccc|-3.0|ccc|True |Infinity|NaN|     NaN|2017-01-01 00:00:00+09:00|\n\n\nAdding a column of the DataFrame index if you specify ``add_index_column=True``:\n\n:Sample Code:\n    .. code-block:: python\n\n        import pandas as pd\n        from pytablewriter import MarkdownTableWriter\n\n        writer = MarkdownTableWriter()\n        writer.table_name = "add_index_column"\n        writer.from_dataframe(\n            pd.DataFrame({"A": [1, 2], "B": [10, 11]}, index=["a", "b"]),\n            add_index_column=True,\n        )\n        writer.write_table()\n\n:Output:\n    .. code-block::\n\n        # add_index_column\n        |   | A | B |\n        |---|--:|--:|\n        |a  |  1| 10|\n        |b  |  2| 11|\n\nWrite a markdown table from a space-separated values\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n:Sample Code:\n    .. code-block:: python\n\n        from textwrap import dedent\n        import pytablewriter\n\n        writer = pytablewriter.MarkdownTableWriter()\n        writer.table_name = "ps"\n        writer.from_csv(\n            dedent("""\\\n                USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\n                root         1  0.0  0.4  77664  8784 ?        Ss   May11   0:02 /sbin/init\n                root         2  0.0  0.0      0     0 ?        S    May11   0:00 [kthreadd]\n                root         4  0.0  0.0      0     0 ?        I<   May11   0:00 [kworker/0:0H]\n                root         6  0.0  0.0      0     0 ?        I<   May11   0:00 [mm_percpu_wq]\n                root         7  0.0  0.0      0     0 ?        S    May11   0:01 [ksoftirqd/0]\n            """),\n            delimiter=" ")\n        writer.write_table()\n\n:Output:\n    .. code-block::\n\n        # ps\n        |USER|PID|%CPU|%MEM| VSZ |RSS |TTY|STAT|START|TIME|   COMMAND    |\n        |----|--:|---:|---:|----:|---:|---|----|-----|----|--------------|\n        |root|  1|   0| 0.4|77664|8784|?  |Ss  |May11|0:02|/sbin/init    |\n        |root|  2|   0| 0.0|    0|   0|?  |S   |May11|0:00|[kthreadd]    |\n        |root|  4|   0| 0.0|    0|   0|?  |I<  |May11|0:00|[kworker/0:0H]|\n        |root|  6|   0| 0.0|    0|   0|?  |I<  |May11|0:00|[mm_percpu_wq]|\n        |root|  7|   0| 0.0|    0|   0|?  |S   |May11|0:01|[ksoftirqd/0] |\n\nGet rendered tabular text as str\n----------------------------------\n``dumps`` method returns rendered tabular text.\n``dumps`` only available for text format writers.\n\n:Sample Code:\n    .. code-block:: python\n\n        import pytablewriter\n\n        writer = pytablewriter.MarkdownTableWriter()\n        writer.headers = ["int", "float", "str", "bool", "mix", "time"]\n        writer.value_matrix = [\n            [0,   0.1,      "hoge", True,   0,      "2017-01-01 03:04:05+0900"],\n            [2,   "-2.23",  "foo",  False,  None,   "2017-12-23 45:01:23+0900"],\n            [3,   0,        "bar",  "true",  "inf", "2017-03-03 33:44:55+0900"],\n            [-10, -9.9,     "",     "FALSE", "nan", "2017-01-01 00:00:00+0900"],\n        ]\n\n        print(writer.dumps())\n\n:Output:\n    .. code-block::\n\n        |int|float|str |bool |  mix   |          time          |\n        |--:|----:|----|-----|-------:|------------------------|\n        |  0| 0.10|hoge|True |       0|2017-01-01 03:04:05+0900|\n        |  2|-2.23|foo |False|        |2017-12-23 45:01:23+0900|\n        |  3| 0.00|bar |True |Infinity|2017-03-03 33:44:55+0900|\n        |-10|-9.90|    |False|     NaN|2017-01-01 00:00:00+0900|\n\nConfigure table styles\n------------------------\nWriters can specify cell\n`Style <https://pytablewriter.rtfd.io/en/latest/pages/reference/style.html>`__\nfor each column manually by ``styles`` attribute of writer classes.\n\n:Sample Code:\n    .. code-block:: python\n\n        from pytablewriter import MarkdownTableWriter\n        from pytablewriter.style import Style\n\n        writer = MarkdownTableWriter()\n        writer.table_name = "set style by styles"\n        writer.headers = [\n            "auto align",\n            "left align",\n            "center align",\n            "bold",\n            "italic",\n            "bold italic ts",\n        ]\n        writer.value_matrix = [\n            [11, 11, 11, 11, 11, 11],\n            [1234, 1234, 1234, 1234, 1234, 1234],\n        ]\n\n        # specify styles for each column\n        writer.styles = [\n            Style(),\n            Style(align="left"),\n            Style(align="center"),\n            Style(font_weight="bold"),\n            Style(font_style="italic"),\n            Style(font_weight="bold", font_style="italic", thousand_separator=","),\n        ]\n\n        writer.write_table()\n\n:Output:\n    .. code-block::\n\n        # set style by styles\n        |auto align|left align|center align|  bold  |italic|bold italic ts|\n        |---------:|----------|:----------:|-------:|-----:|-------------:|\n        |        11|11        |     11     |  **11**|  _11_|      _**11**_|\n        |      1234|1234      |    1234    |**1234**|_1234_|   _**1,234**_|\n\n    `Rendering result <https://github.com/thombashi/pytablewriter/tree/master/docs/pages/examples/style/output.md>`__\n\n\nYou can also set ``Style`` to a specific column with index or header by using ``set_style`` method:\n\n:Sample Code:\n    .. code-block:: python\n\n        from pytablewriter import MarkdownTableWriter\n        from pytablewriter.style import Style\n\n        writer = MarkdownTableWriter()\n        writer.headers = ["A", "B", "C",]\n        writer.value_matrix = [[11, 11, 11], [1234, 1234, 1234]]\n\n        writer.table_name = "set style by index"\n        writer.set_style(1, Style(align="center", font_weight="bold"))\n        writer.set_style(2, Style(thousand_separator=" "))\n        writer.write_table()\n        writer.write_null_line()\n\n        writer.table_name = "set style by header"\n        writer.set_style("B", Style(font_style="italic"))\n        writer.write_table()\n\n:Output:\n    .. code-block::\n\n        # set style by index\n        | A  |   B    |  C  |\n        |---:|:------:|----:|\n        |  11| **11** |   11|\n        |1234|**1234**|1 234|\n\n        # set style by header\n        | A  |  B   |  C  |\n        |---:|-----:|----:|\n        |  11|  _11_|   11|\n        |1234|_1234_|1 234|\n\nMake tables for specific applications\n---------------------------------------\nCreate Elasticsearch index and put data\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n:Sample Code:\n    .. code-block:: python\n\n        import datetime\n        import json\n\n        from elasticsearch import Elasticsearch\n        import pytablewriter as ptw\n\n        es = Elasticsearch(hosts="localhost:9200")\n\n        writer = ptw.ElasticsearchWriter()\n        writer.stream = es\n        writer.index_name = "es writer example"\n        writer.headers = [\n            "str", "byte", "short", "int", "long", "float", "date", "bool", "ip",\n        ]\n        writer.value_matrix = [\n            [\n                "abc", 100, 10000, 2000000000, 200000000000, 0.1,\n                datetime.datetime(2017, 1, 2, 3, 4, 5), True, "127.0.0.1",\n            ],\n            [\n                "def", -10, -1000, -200000000, -20000000000, 100.1,\n                datetime.datetime(2017, 6, 5, 4, 5, 2), False, "::1",\n            ],\n        ]\n\n        # delete existing index ---\n        es.indices.delete(index=writer.index_name, ignore=404)\n\n        # create an index and put data ---\n        writer.write_table()\n\n        # display the result ---\n        es.indices.refresh(index=writer.index_name)\n\n        print("----- mappings -----")\n        response = es.indices.get_mapping(index=writer.index_name, doc_type="table")\n        print("{}\\n".format(json.dumps(response, indent=4)))\n\n        print("----- documents -----")\n        response = es.search(\n            index=writer.index_name,\n            doc_type="table",\n            body={\n                "query": {"match_all": {}}\n            }\n        )\n        for hit in response["hits"]["hits"]:\n            print(json.dumps(hit["_source"], indent=4))\n\n\n:Output:\n    .. code-block::\n\n        ----- mappings -----\n        {\n            "es_writer_example": {\n                "mappings": {\n                    "table": {\n                        "properties": {\n                            "bool": {\n                                "type": "boolean"\n                            },\n                            "byte": {\n                                "type": "byte"\n                            },\n                            "date": {\n                                "type": "date",\n                                "format": "date_optional_time"\n                            },\n                            "float": {\n                                "type": "double"\n                            },\n                            "int": {\n                                "type": "integer"\n                            },\n                            "ip": {\n                                "type": "text"\n                            },\n                            "long": {\n                                "type": "long"\n                            },\n                            "short": {\n                                "type": "short"\n                            },\n                            "str": {\n                                "type": "text"\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        ----- documents -----\n        {\n            "str": "def",\n            "byte": -10,\n            "short": -1000,\n            "int": -200000000,\n            "long": -20000000000,\n            "float": 100.1,\n            "date": "2017-06-05T04:05:02",\n            "bool": false,\n            "ip": "::1"\n        }\n        {\n            "str": "abc",\n            "byte": 100,\n            "short": 10000,\n            "int": 2000000000,\n            "long": 200000000000,\n            "float": 0.1,\n            "date": "2017-01-02T03:04:05",\n            "bool": true,\n            "ip": "127.0.0.1"\n        }\n\nRender a table on Jupyter Notebook\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nhttps://nbviewer.jupyter.org/github/thombashi/pytablewriter/blob/master/examples/ipynb/jupyter_notebook_example.ipynb\n\n.. figure:: ss/jupyter_notebook.png\n   :scale: 100%\n   :alt: jupyter_notebook_table\n\n   Table formatting for Jupyter Notebook\n\nMultibyte charater support\n----------------------------\nWrite a table using multibyte character\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\xef\xbb\xbfYou can use multibyte characters as table data.\nMultibyte characters also properly padded and aligned.\n\n:Sample Code:\n    .. code-block:: python\n\n        import pytablewriter\n\n        writer = pytablewriter.RstSimpleTableWriter()\n        writer.table_name = "\xe7\x94\x9f\xe6\x88\x90\xe3\x81\xab\xe9\x96\xa2\xe3\x81\x99\xe3\x82\x8b\xe3\x83\x91\xe3\x82\xbf\xe3\x83\xbc\xe3\x83\xb3"\n        writer.headers = ["\xe3\x83\x91\xe3\x82\xbf\xe3\x83\xbc\xe3\x83\xb3\xe5\x90\x8d", "\xe6\xa6\x82\xe8\xa6\x81", "GoF", "Code Complete[1]"]\n        writer.value_matrix = [\n            ["Abstract Factory", "\xe9\x96\xa2\xe9\x80\xa3\xe3\x81\x99\xe3\x82\x8b\xe4\xb8\x80\xe9\x80\xa3\xe3\x81\xae\xe3\x82\xa4\xe3\x83\xb3\xe3\x82\xb9\xe3\x82\xbf\xe3\x83\xb3\xe3\x82\xb9\xe3\x82\x92\xe7\x8a\xb6\xe6\xb3\x81\xe3\x81\xab\xe5\xbf\x9c\xe3\x81\x98\xe3\x81\xa6\xe3\x80\x81\xe9\x81\xa9\xe5\x88\x87\xe3\x81\xab\xe7\x94\x9f\xe6\x88\x90\xe3\x81\x99\xe3\x82\x8b\xe6\x96\xb9\xe6\xb3\x95\xe3\x82\x92\xe6\x8f\x90\xe4\xbe\x9b\xe3\x81\x99\xe3\x82\x8b\xe3\x80\x82", "Yes", "Yes"],\n            ["Builder", "\xe8\xa4\x87\xe5\x90\x88\xe5\x8c\x96\xe3\x81\x95\xe3\x82\x8c\xe3\x81\x9f\xe3\x82\xa4\xe3\x83\xb3\xe3\x82\xb9\xe3\x82\xbf\xe3\x83\xb3\xe3\x82\xb9\xe3\x81\xae\xe7\x94\x9f\xe6\x88\x90\xe9\x81\x8e\xe7\xa8\x8b\xe3\x82\x92\xe9\x9a\xa0\xe8\x94\xbd\xe3\x81\x99\xe3\x82\x8b\xe3\x80\x82", "Yes", "No"],\n            ["Factory Method", "\xe5\xae\x9f\xe9\x9a\x9b\xe3\x81\xab\xe7\x94\x9f\xe6\x88\x90\xe3\x81\x95\xe3\x82\x8c\xe3\x82\x8b\xe3\x82\xa4\xe3\x83\xb3\xe3\x82\xb9\xe3\x82\xbf\xe3\x83\xb3\xe3\x82\xb9\xe3\x81\xab\xe4\xbe\x9d\xe5\xad\x98\xe3\x81\x97\xe3\x81\xaa\xe3\x81\x84\xe3\x80\x81\xe3\x82\xa4\xe3\x83\xb3\xe3\x82\xb9\xe3\x82\xbf\xe3\x83\xb3\xe3\x82\xb9\xe3\x81\xae\xe7\x94\x9f\xe6\x88\x90\xe6\x96\xb9\xe6\xb3\x95\xe3\x82\x92\xe6\x8f\x90\xe4\xbe\x9b\xe3\x81\x99\xe3\x82\x8b\xe3\x80\x82", "Yes", "Yes"],\n            ["Prototype", "\xe5\x90\x8c\xe6\xa7\x98\xe3\x81\xae\xe3\x82\xa4\xe3\x83\xb3\xe3\x82\xb9\xe3\x82\xbf\xe3\x83\xb3\xe3\x82\xb9\xe3\x82\x92\xe7\x94\x9f\xe6\x88\x90\xe3\x81\x99\xe3\x82\x8b\xe3\x81\x9f\xe3\x82\x81\xe3\x81\xab\xe3\x80\x81\xe5\x8e\x9f\xe5\x9e\x8b\xe3\x81\xae\xe3\x82\xa4\xe3\x83\xb3\xe3\x82\xb9\xe3\x82\xbf\xe3\x83\xb3\xe3\x82\xb9\xe3\x82\x92\xe8\xa4\x87\xe8\xa3\xbd\xe3\x81\x99\xe3\x82\x8b\xe3\x80\x82", "Yes", "No"],\n            ["Singleton", "\xe3\x81\x82\xe3\x82\x8b\xe3\x82\xaf\xe3\x83\xa9\xe3\x82\xb9\xe3\x81\xab\xe3\x81\xa4\xe3\x81\x84\xe3\x81\xa6\xe3\x80\x81\xe3\x82\xa4\xe3\x83\xb3\xe3\x82\xb9\xe3\x82\xbf\xe3\x83\xb3\xe3\x82\xb9\xe3\x81\x8c\xe5\x8d\x98\xe4\xb8\x80\xe3\x81\xa7\xe3\x81\x82\xe3\x82\x8b\xe3\x81\x93\xe3\x81\xa8\xe3\x82\x92\xe4\xbf\x9d\xe8\xa8\xbc\xe3\x81\x99\xe3\x82\x8b\xe3\x80\x82", "Yes", "Yes"],\n        ]\n        writer.write_table()\n\n:Output:\n    .. figure:: ss/multi_byte_char.png\n       :scale: 100%\n       :alt: multi_byte_char_table\n\n       Output of multi-byte character table\n\nFor more information\n----------------------\nMore examples are available at \nhttps://pytablewriter.rtfd.io/en/latest/pages/examples/index.html\n\nInstallation\n============\n\nInstall from PyPI\n------------------------------\n::\n\n    pip install pytablewriter\n\nSome of the formats require additional dependency packages, you can install the dependency packages as follows:\n\n- Elasticsearch\n    - ``pip install pytablewriter[es6]`` or ``pip install pytablewriter[es5]``\n- Excel\n    - ``pip install pytablewriter[excel]``\n- HTML\n    - ``pip install pytablewriter[html]``\n- SQLite\n    - ``pip install pytablewriter[sqlite]``\n- TOML\n    - ``pip install pytablewriter[toml]``\n- All of the extra dependencies\n    - ``pip install pytablewriter[all]``\n\nInstall from PPA (for Ubuntu)\n------------------------------\n::\n\n    sudo add-apt-repository ppa:thombashi/ppa\n    sudo apt update\n    sudo apt install python3-pytablewriter\n\n\nDependencies\n============\nPython 2.7+ or 3.5+\n\n- `DataProperty <https://github.com/thombashi/DataProperty>`__\n- `mbstrdecoder <https://github.com/thombashi/mbstrdecoder>`__\n- `msgfy <https://github.com/thombashi/msgfy>`__\n- `pathvalidate <https://github.com/thombashi/pathvalidate>`__\n- `six <https://pypi.org/project/six/>`__\n- `tabledata <https://github.com/thombashi/tabledata>`__\n- `typepy <https://github.com/thombashi/typepy>`__\n\nOptional dependencies\n---------------------\n- `logbook <https://logbook.readthedocs.io/en/stable/>`__\n    - Logging using logbook if the package installed\n- `pytablereader <https://github.com/thombashi/pytablereader>`__\n- `simplejson <https://github.com/simplejson/simplejson>`__\n- Elasticsearch:\n    - `elasticsearch <https://github.com/elastic/elasticsearch-py>`__\n- Excel\n    - `xlwt <http://www.python-excel.org/>`__\n    - `XlsxWriter <https://github.com/jmcnamara/XlsxWriter>`__\n- HTML\n    - `dominate <https://github.com/Knio/dominate/>`__\n- SQLite\n    - `SimpleSQLite <https://github.com/thombashi/SimpleSQLite>`__\n- TOML\n    - `toml <https://github.com/uiri/toml>`__\n\n\nTest dependencies\n-----------------\n- `pytest <https://docs.pytest.org/en/latest/>`__\n- `pytest-runner <https://github.com/pytest-dev/pytest-runner>`__\n- `tox <https://testrun.org/tox/latest/>`__\n\nDocumentation\n===============\nhttps://pytablewriter.rtfd.io/\n\nRelated Project\n=================\n- `pytablereader <https://github.com/thombashi/pytablereader>`__\n    - Tabular data loaded by ``pytablereader`` can be written another tabular data format with ``pytablewriter``.\n\nTasks\n=======\nhttps://trello.com/b/kE0XG34y\n\n'