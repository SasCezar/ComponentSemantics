b'**[Technical Overview](#technical-overview)** |\n**[Prerequisites](#prerequisites)** |\n**[Authenticator setup](#authenticator-setup)** |\n**[Build the JupyterHub Docker image](#build-the-jupyterhub-docker-image)** |\n**[Spawner: Prepare the Jupyter Notebook Image](#spawner-prepare-the-jupyter-notebook-image)** |\n**[Run JupyterHub](#run-jupyterhub)** |\n**[Behind the scenes](#behind-the-scenes)** |\n**[FAQ](#faq)**\n\n# jupyterhub-deploy-docker\n\n**jupyterhub-deploy-docker** provides a reference\ndeployment of [JupyterHub](https://github.com/jupyter/jupyterhub), a\nmulti-user [Jupyter Notebook](http://jupyter.org/) environment, on a\n**single host** using [Docker](https://docs.docker.com).  \n\nPossible **use cases** include:\n\n* Creating a JupyterHub demo environment that you can spin up relatively\n  quickly.\n* Providing a multi-user Jupyter Notebook environment for small classes,\n  teams, or departments.\n\n## Disclaimer\n\nThis deployment is **NOT** intended for a production environment. \nIt is a reference implementation that does not meet traditional \nrequirements in terms of availability nor scalability. \n\nIf you are looking for a more robust solution to host JupyterHub, or\nyou require scaling beyond a single host, please check out the\nexcellent [zero-to-jupyterhub-k8s](https://github.com/jupyterhub/zero-to-jupyterhub-k8s)\nproject.\n\n\n## Technical Overview\n\nKey components of this reference deployment are:\n\n* **Host**: Runs the [JupyterHub components](https://jupyterhub.readthedocs.org/en/latest/getting-started.html#overview)\n  in a Docker container on the host.\n\n* **Authenticator**: Uses [OAuthenticator](https://github.com/jupyter/oauthenticator)\n  and [GitHub OAuth](https://developer.github.com/v3/oauth/) to\n  authenticate users.\n\n* **Spawner**:Uses [DockerSpawner](https://github.com/jupyter/dockerspawner)\n  to spawn single-user Jupyter Notebook servers in separate Docker\n  containers on the same host.\n\n* **Persistence of Hub data**: Persists JupyterHub data in a Docker\n  volume on the host.\n\n* **Persistence of user notebook directories**: Persists user notebook\n  directories in Docker volumes on the host.\n\n![JupyterHub single host Docker deployment](internal/jupyterhub-docker.png)\n\n\n## Prerequisites\n\n### Docker\n\nThis deployment uses Docker, via [Docker Compose](https://docs.docker.com/compose/overview/), for all the things.\n[Docker Engine](https://docs.docker.com/engine) 1.12.0 or higher is\nrequired.\n\n1. Use [Docker\'s installation instructions](https://docs.docker.com/engine/installation/)\n   to set up Docker for your environment.\n\n2. To verify your docker installation, whether running docker as a local\n   installation or using [docker-machine](./docs/docker-machine.md),\n   enter these commands:\n\n   ```bash\n   docker version\n   docker ps\n   ```\n\n### HTTPS and SSL/TLS certificate\n\nThis deployment configures JupyterHub to use HTTPS. You must provide a\ncertificate and key file in the JupyterHub configuration. To configure:\n\n1. Obtain the domain name that you wish to use for JupyterHub, for\n   example, `myfavoritesite.com` or `jupiterplanet.org`.\n\n1. If you do not have an existing certificate and key, you can:\n\n   - obtain one from [Let\'s Encrypt](https://letsencrypt.org) using\n     the [certbot](https://certbot.eff.org) client,\n   - use the helper script in this repo\'s [letsencrypt example](examples/letsencrypt/README.md), or\n   - [create a self-signed certificate](https://jupyter-notebook.readthedocs.org/en/latest/public_server.html#using-ssl-for-encrypted-communication).\n\n1. Copy the certificate and key files to a\n   directory named `secrets` in this repository\'s root directory.  These will be\n   added to the JupyterHub Docker image at build time. For example, create a\n   `secrets` directory in the root of this repo and copy the certificate and\n   key files (`jupyterhub.crt` and `jupyterhub.key`) to this directory:\n\n   ```bash\n   mkdir -p secrets\n   cp jupyterhub.crt jupyterhub.key secrets/\n   ```\n\n\n## Authenticator setup\n\nThis deployment uses GitHub OAuth to authenticate users.\n\nIt requires that you create and register a [GitHub OAuth application](https://github.com/settings/applications/new)\nby filling out a form on the GitHub site:\n\n![GitHub OAuth application form](docs/oauth-form.png)\n\nIn this form, you will specify the OAuth application\'s callback URL in\nthis format: `https://<myhost.mydomain>/hub/oauth_callback`.\n\nAfter you submit the GitHub form, GitHub registers your OAuth application and\nassigns a unique Client ID and Client Secret. The Client Secret should be\nkept private.\n\nAt JupyterHub\'s runtime, you must pass the GitHub OAuth Client ID, Client\nSecret and OAuth callback url. You can do this by either:\n\n- setting the `GITHUB_CLIENT_ID`, `GITHUB_CLIENT_SECRET`, and\n  `OAUTH_CALLBACK_URL` environment variables when you run the\n  JupyterHub container, or\n- add them to an `oauth.env` file in the `secrets` directory of this repository.\n  You may need to create both the `secrets` directory and the `oauth.env` file.\n  For example, add the following lines in the `oauth.env` file:\n\n  `oauth.env` file\n  ```\n  GITHUB_CLIENT_ID=<github_client_id>\n  GITHUB_CLIENT_SECRET=<github_client_secret>\n  OAUTH_CALLBACK_URL=https://<myhost.mydomain>/hub/oauth_callback\n  ```\n\n  **Note:** The `oauth.env` file is a special file that Docker Compose uses\n  to lookup environment variables. If you choose to place the GitHub\n  OAuth application settings in this file, you should make sure that the\n  file remains private (be careful to not commit the `oauth.env` file with\n  these secrets to source control).\n\n\n## Build the JupyterHub Docker image\n\nFinish configuring JupyterHub and then build the hub\'s Docker image. (We\'ll\nbuild the Jupyter Notebook image in the next section.)\n\n1. Configure `userlist`: Create a `userlist` file of authorized JupyterHub\n   users. The list should contain GitHub usernames, and this file should\n   designate at least one `admin` user. For instance, the example file below\n   contains three users, `jtyberg`, `jenny`, and `guido`, and one designated\n   administrator, `jtyberg`:\n\n   `userlist` file\n   ```\n   jtyberg admin\n   jenny\n   guido\n   ```\n\n   The admin user will have the ability to add more users through JupyterHub\'s\n   admin console.\n\n1. Use [docker-compose](https://docs.docker.com/compose/reference/) to build\n   the JupyterHub Docker image on the active Docker machine host by running\n   the `make build` command:\n\n   ```bash\n   make build\n   ```\n\n\n## Spawner: Prepare the Jupyter Notebook Image\n\nYou can configure JupyterHub to spawn Notebook servers from any Docker image, as\nlong as the image\'s `ENTRYPOINT` and/or `CMD` starts a single-user instance of\nJupyter Notebook server that is compatible with JupyterHub.\n\nTo specify which Notebook image to spawn for users, you set the value of the  \n`DOCKER_NOTEBOOK_IMAGE` environment variable to the desired container image.\nYou can set this variable in the `.env` file, or alternatively, you can\noverride the value in this file by setting `DOCKER_NOTEBOOK_IMAGE` in the\nenvironment where you launch JupyterHub.\n\nWhether you build a custom Notebook image or pull an image from a public or\nprivate Docker registry, the image must reside on the host.  \n\nIf the Notebook image does not exist on host, Docker will attempt to pull the\nimage the first time a user attempts to start his or her server.  In such cases,\nJupyterHub may timeout if the image being pulled is large, so it is better to\npull the image to the host before running JupyterHub.  \n\nThis deployment defaults to the\n[jupyter/scipy-notebook](https://hub.docker.com/r/jupyter/scipy-notebook/)\nNotebook image, which is built from the `scipy-notebook`\n[Docker stacks](https://github.com/jupyter/docker-stacks). (Note that the Docker\nstacks `*-notebook` images tagged `2d878db5cbff` include the\n`start-singleuser.sh` script required to start a single-user instance of the\nNotebook server that is compatible with JupyterHub).\n\nYou can pull the image using the following command:\n\n```bash\nmake notebook_image\n```\n\n\n## Run JupyterHub\n\nRun the JupyterHub container on the host.\n\nTo run the JupyterHub container in detached mode:\n\n```bash\ndocker-compose up -d\n```\n\nOnce the container is running, you should be able to access the JupyterHub console at\n\n**file**\n```\nhttps://myhost.mydomain\n```\n\nTo bring down the JupyterHub container:\n\n```bash\ndocker-compose down\n```\n\n---\n\n## Behind the scenes\n\n`make build` does a few things behind the scenes, to set up the environment for JupyterHub:\n\n### Create a JupyterHub Data Volume\n\nCreate a Docker volume to persist JupyterHub data.   This volume will reside on the host machine.  Using a volume allows user lists, cookies, etc., to persist across JupyterHub container restarts.\n\n```bash\ndocker volume create --name jupyterhub-data\n```\n\n### Create a Docker Network\n\nCreate a Docker network for inter-container communication.  The benefits of using a Docker network are:\n\n* container isolation - only the containers on the network can access one another\n* name resolution - Docker daemon runs an embedded DNS server to provide automatic service discovery for containers connected to user-defined networks.  This allows us to access containers on the same network by name.\n\nHere we create a Docker network named `jupyterhub-network`.  Later, we will configure the JupyterHub and single-user Jupyter Notebook containers to run attached to this network.\n\n```bash\ndocker network create jupyterhub-network\n```\n\n---\n\n## FAQ\n\n### How can I view the logs for JupyterHub or users\' Notebook servers?\n\nUse `docker logs <container>`.  For example, to view the logs of the `jupyterhub` container\n\n```bash\ndocker logs jupyterhub\n```\n\n### How do I specify the Notebook server image to spawn for users?\n\nIn this deployment, JupyterHub uses DockerSpawner to spawn single-user\nNotebook servers. You set the desired Notebook server image in a\n`DOCKER_NOTEBOOK_IMAGE` environment variable.\n\nJupyterHub reads the Notebook image name from `jupyterhub_config.py`, which\nreads the Notebook image name from the `DOCKER_NOTEBOOK_IMAGE` environment\nvariable:\n\n```python\n# DockerSpawner setting in jupyterhub_config.py\nc.DockerSpawner.container_image = os.environ[\'DOCKER_NOTEBOOK_IMAGE\']\n```\n\nBy default, the`DOCKER_NOTEBOOK_IMAGE` environment variable is set in the\n`.env` file.\n\n**file**\n```\n# Setting in the .env file\nDOCKER_NOTEBOOK_IMAGE=jupyter/scipy-notebook:2d878db5cbff\n```\n\nTo use a different notebook server image, you can either change the desired\ncontainer image value in the `.env` file, or you can override it\nby setting the `DOCKER_NOTEBOOK_IMAGE` variable to a different Notebook\nimage in the environment where you launch JupyterHub. For example, the\nfollowing setting would be used to spawn single-user `pyspark` notebook servers:\n\n```bash\nexport DOCKER_NOTEBOOK_IMAGE=jupyterhub/pyspark-notebook:2d878db5cbff\n\ndocker-compose up -d\n```\n\n### If I change the name of the Notebook server image to spawn, do I need to restart JupyterHub?\n\nYes. JupyterHub reads its configuration which includes the container image\nname for DockerSpawner. JupyterHub uses this configuration to determine the\nNotebook server image to spawn during startup.\n\nIf you change DockerSpawner\'s name of the Docker image to spawn, you will\nneed to restart the JupyterHub container for changes to occur.\n\nIn this reference deployment, cookies are persisted to a Docker volume on the\nHub\'s host. Restarting JupyterHub might cause a temporary blip in user\nservice as the JupyterHub container restarts. Users will not have to login\nagain to their individual notebook servers. However, users may need to\nrefresh their browser to re-establish connections to the running Notebook\nkernels.\n\n### How can I backup a user\'s notebook directory?\n\nThere are multiple ways to [backup and restore](https://docs.docker.com/engine/userguide/containers/dockervolumes/#backup-restore-or-migrate-data-volumes) data in Docker containers.  \n\nSuppose you have the following running containers:\n\n```bash\n    docker ps --format "table {{.ID}}\\t{{.Image}}\\t{{.Names}}"\n\n    CONTAINER ID        IMAGE                    NAMES\n    bc02dd6bb91b        jupyter/minimal-notebook jupyter-jtyberg\n    7b48a0b33389        jupyterhub               jupyterhub\n```\n\nIn this deployment, the user\'s notebook directories (`/home/jovyan/work`) are backed by Docker volumes.\n\n```bash\n    docker inspect -f \'{{ .Mounts }}\' jupyter-jtyberg\n\n    [{jtyberg /var/lib/docker/volumes/jtyberg/_data /home/jovyan/work local rw true rprivate}]\n```\n\nWe can backup the user\'s notebook directory by running a separate container that mounts the user\'s volume and creates a tarball of the directory.  \n\n```bash\ndocker run --rm \\\n  -u root \\\n  -v /tmp:/backups \\\n  -v jtyberg:/notebooks \\\n  jupyter/minimal-notebook \\\n  tar cvf /backups/jtyberg-backup.tar /notebooks\n```\n\nThe above command creates a tarball in the `/tmp` directory on the host.\n'