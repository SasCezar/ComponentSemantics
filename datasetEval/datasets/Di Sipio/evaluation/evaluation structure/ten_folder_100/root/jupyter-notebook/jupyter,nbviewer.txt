b'# Jupyter Notebook Viewer\n\nJupyter nbviewer is the web application behind [The Jupyter Notebook Viewer](http://nbviewer.ipython.org), which is graciously hosted by [Rackspace](https://developer.rackspace.com/?nbviewer=awesome).\n\nRun this locally to get most of the features of nbviewer on your own network.\n\nIf you need help using or installing Jupyter Notebook Viewer, please use the [jupyter/help](https://github.com/jupyter/help) issue tracker. If you would like to propose an enhancement to nbviewer or file a bug report, please [open an issue here, in the jupyter/nbviewer project](https://github.com/jupyter/nbviewer).\n\n## Quick Run\n\nIf you have `docker` installed, you can pull and run the currently built version of the Docker container by\n\n```shell\n$ docker pull jupyter/nbviewer\n$ docker run -p 8080:8080 jupyter/nbviewer\n```\n\nIt automatically gets built with each push to `master`, so you\'ll always be able to get the freshest copy.\n\nFor speed and friendliness to GitHub, be sure to set `GITHUB_OAUTH_KEY` and `GITHUB_OAUTH_SECRET`:\n\n```shell\n$ docker run -p 8080:8080 -e \'GITHUB_OAUTH_KEY=YOURKEY\' \\\n                          -e \'GITHUB_OAUTH_SECRET=YOURSECRET\' \\\n                          jupyter/nbviewer\n```\n\nOr to use your GitHub personal access token, you can just set `GITHUB_API_TOKEN`.\n\n\n## GitHub Enterprise\n\nTo use nbviewer on your own GitHub Enterprise instance you need to set `GITHUB_API_URL`.\nThe relevant [API endpoints for GitHub Enterprise](https://developer.github.com/v3/enterprise/) are prefixed with `http://hostname/api/v3`.\nYou must also specify your `OAUTH` or `API_TOKEN` as explained above.  For example:\n\n```shell\n$ docker run -p 8080:8080 -e \'GITHUB_OAUTH_KEY=YOURKEY\' \\\n                          -e \'GITHUB_OAUTH_SECRET=YOURSECRET\' \\\n                          -e \'GITHUB_API_URL=https://ghe.example.com/api/v3/\' \\\n                          jupyter/nbviewer\n```\n\nWith this configured all GitHub API requests will go to your Enterprise instance so you can view all of your internal notebooks.\n\n## Local Development\n\n### With Docker\n\nYou can build a docker image that uses your local branch.\n\n\n#### Build\n\n```shell\n$ cd <path to repo>\n$ docker build -t nbviewer .\n```\n\n\n#### Run\n\n```shell\n$ cd <path to repo>\n$ docker run -p 8080:8080 nbviewer\n```\n\n### With Docker Compose\n\nThe Notebook Viewer uses `memcached` in production. To locally try out this\nsetup, a [docker-compose](https://docs.docker.com/compose/) configuration is\nprovided to easily start/stop the `nbviewer` and `memcached` containers\ntogether from your current branch. You will need to install `docker` prior\nto this.\n\n#### Run\n\n```shell\n$ cd <path to repo>\n$ pip install docker-compose\n$ docker-compose up\n```\n\n\n### Local Installation\n\nThe Notebook Viewer requires several binary packages to be installed on your system. The primary ones are `libmemcached-dev libcurl4-openssl-dev pandoc libevent-dev libgnutls28-dev`. Package names may differ on your system, see [salt-states](https://github.com/rgbkrk/salt-states-nbviewer/blob/master/nbviewer/init.sls) for more details.\n\nIf they are installed, you can install the required Python packages via pip.\n\n```shell\n$ cd <path to repo>\n$ pip install -r requirements.txt\n```\n\n#### Static Assets\n\nStatic assets are maintained with `bower` and `less` (which require having\n`npm` installed), and the `invoke` python module.\n\n```shell\n$ cd <path to repo>\n$ pip install -r requirements-dev.txt\n$ npm install\n$ invoke bower\n$ invoke less [-d]\n```\n\nThis will download the relevant assets into `nbviewer/static/components` and create the built assets in `nbviewer/static/build`.\n\nPass `-d` or `--debug` to `invoke less` to create a CSS sourcemap, useful for debugging.\n\n\n#### Running Locally\n\n```shell\n$ cd <path to repo>\n$ python -m nbviewer --debug --no-cache\n```\n\nThis will automatically relaunch the server if a change is detected on a python file, and not cache any results. You can then just do the modifications you like to the source code and/or the templates then refresh the pages.\n\n\n#### Running the Tests\n\n`nose` is used to run the test suite. The tests currently make calls to\nexternal APIs such as GitHub, so it is best to use your Github API Token when\nrunning:\n\n```shell\n$ cd <path to repo>\n$ pip install -r requirements-dev.txt\n$ GITHUB_API_TOKEN=<your token> python setup.py test\n```\n\n\n## Extending the Notebook Viewer\n### Providers\nProviders are sources of notebooks and directories of notebooks and directories.\n\n`nbviewer` ships with several providers\n- `url`\n- `gist`\n- `github`\n- `local`\n\n#### Writing a new Provider\nThere are already several providers\n[proposed/requested](https://github.com/jupyter/nbviewer/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+label%3Atag%3AProvider). Some providers are more involved than others, and some,\nsuch as those which would require user authentication, will take some work to\nsupport properly.\n\nA provider is implemented as a python module, which can expose a few functions:\n\n##### `uri_rewrites`\nIf you just need to rewrite URLs (or URIs) of another site/namespace, implement\n`uri_rewrites`, which will allow the front page to transform an arbitrary string\n(usually an URI fragment), escape it correctly, and turn it into a "canonical"\nnbviewer URL. See the [dropbox provider](./nbviewer/providers/dropbox/handlers.py)\nfor a simple example of rewriting URLs without using a custom API client.\n\n##### `default_handlers`\nIf you need custom logic, such as connecting to an API, implement\n`default_handlers`. See the [github provider](./nbviewer/providers/github/handlers.py)\nfor a complex example of providing multiple handlers.\n\n##### Error Handling\nWhile you _could_ re-implement upstream HTTP error handling, a small\nconvenience method is provided for intercepting HTTP errors.\nOn a given URL handler that inherits from `BaseHandler`, overload the\n`client_error_message` and re-call it with your message (or `None`). See the\n[gist provider](./nbviewer/providers/gist/handlers.py) for an example of customizing the\nerror message.\n\n### Formats\nFormats are ways to present notebooks to the user.\n\n`nbviewer` ships with three providers:\n- `html`\n- `slides`\n- `script`\n\n#### Writing a new Format\nIf you\'d like to write a new format, open a ticket, or speak up on [gitter][]!\nWe have some work yet to do to support your next big thing in notebook\npublishing, and we\'d love to hear from you.\n\n#### Config file\n\nNewer versions of NBViewer will be configurable using a config file, `nbviewer_config.py`. In the directory where you run the command `python -m nbviewer` to start NBViewer, also add a file `nbviewer_config.py` which uses [the standard configuration syntax for Jupyter projects](https://traitlets.readthedocs.io/en/stable/config.html). \n\nFor example, to configure the value of a configurable `foo`, add the line `c.NBViewer.foo = \'bar\'` to the `nbviewer_config.py` file located where you run `python -m nbviewer`. Again, currently very few features of NBViewer are configurable this way, but we hope to steadily increase the number of configurable characteristics of NBViewer in future releases.\n\n## Securing the Notebook Viewer\n\nYou can run the viewer as a [JupyterHub 0.7+ service](https://jupyterhub.readthedocs.io/en/latest/reference/services.html). Running the viewer as a service prevents users who have not authenticated with the Hub from accessing the nbviewer instance. This setup can be useful for protecting access to local notebooks rendered with the `--localfiles` option.\n\nAdd an entry like the following to your `jupyterhub_config.py` to have it start nbviewer as a managed service:\n\n```python\nc.JupyterHub.services = [\n    {\n        # the /services/<name> path for accessing the notebook viewer\n        \'name\': \'nbviewer\',\n        # the interface and port nbviewer will use\n        \'url\': \'http://127.0.0.1:9000\',\n        # the path to nbviewer repo\n        \'cwd\': \'<path to repo>\',\n        # command to start the nbviewer\n        \'command\': [\'python\', \'-m\', \'nbviewer\']\n    }\n]\n```\n\nThe nbviewer instance will automatically read the [various `JUPYTERHUB_*` environment variables](http://jupyterhub.readthedocs.io/en/latest/reference/services.html#launching-a-hub-managed-service) and configure itself accordingly. You can also run the nbviewer instance as an [externally managed JupyterHub service](http://jupyterhub.readthedocs.io/en/latest/reference/services.html#externally-managed-services), but must set the requisite environment variables yourself.\n'