b'# Pelican plugin for Jupyter/IPython Notebooks\n\nThis plugin provides two modes to use Jupyter/IPython notebooks in [Pelican](https://getpelican.com):\n\n1. As a new markup language so `.ipynb` files are recognized as a valid filetype for an article\n2. As a liquid tag based on the [liquid tags plugin](https://github.com/getpelican/pelican-plugins/tree/master/liquid_tags) so notebooks can be\nincluded in a regular post using Markdown (`.md`) files.\n\n## Requirements\n\nPython 2.7 and 3.4 are supported.\n\nThe main objective is to run with the latest version of Jupyter/IPython\nbut there is a good chance the plugin will work correctly with older versions of Pelican and Jupyter/IPython.\nThe recommended version of libraries are:\n\n- `pelican>=3.5`\n- `jupyter>=1.0`\n- `ipython>=4.0`\n- `nbconvert>=4.0`\n- `markdown>=2.6.1`\n\n## Installation\n\nDownload this repo and put all the `.py` files it into an `ipynb` directory\nin your `plugins` directory. The structure should look like this:\n\n```\ncontent\nplugins\n  ipynb\n    __init__.py\n    core.py\n    ipynb.py\n    liquid.py\n    markup.py\n    ... other files are optional ...\n```\n\nIf you manage your site with git (github pages for example),\nyou can also define it as a submodule:\n\n```\ngit submodule add git://github.com/danielfrg/pelican-ipynb.git plugins/ipynb\n```\n\nSee below for additional settings in your `pelicanconf.py`, depending on the mode you are using.\n\n## Mode A: Markup Mode\n\nSetup usage of the `markup` plugin in `pelicanconf.py`:\n\n```python\nMARKUP = (\'md\', \'ipynb\')\n\nPLUGIN_PATHS = [\'./plugins\']\nPLUGINS = [\'ipynb.markup\']\n\n# if you create jupyter files in the content dir, snapshots are saved with the same\n# metadata. These need to be ignored. \nIGNORE_FILES = [".ipynb_checkpoints"]  \n```\n\n### Option 1: Separate MD metadata file\n\nPlace the `.ipynb` file in the content folder and create a new file with the\nsame name as the ipython notebook with extension `.nbdata`.\nFor example if you have `my_post.ipynb` create a `my_post.nbdata`.\n\nThe `.nbdata` should contain the metadata like a regular Markdown based article:\n\n```\nTitle:\nSlug:\nDate:\nCategory:\nTags:\nAuthor:\nSummary:\n\n```\n\nNote the empty line at the end, you need that.\n\nYou can also specify to only include a subset of notebook cells with the\n`Subcells` metadata item.\nIt should contain the index (starting at 0) of first and last cell to include\n(use `None` for "unlimited").\nFor example, to skip the first two cells:\n\n```\nSubcells: [2, None]\n```\n\n### Option 2: Metadata cell in notebook\n\nWith this option, the metadata is extracted from the first cell of\nthe notebook (which should be a Markdown cell), this cell is then ignored on the rendering of the notebook.\nThis avoid the burden of maintaining a separate file or manually editing the\njson in the `.ipynb` file like the previous options.\n\nFirst, enable the "metacell" mode globally in your config\n\n```python\nIPYNB_USE_METACELL = True\n```\n\nNow, you can put the metadata in the first notebook cell in Markdown mode, like this:\n\n```markdown\n- title: My notebook\n- author: John Doe\n- date: 2018-05-11\n- category: pyhton\n- tags: pip\n```\n\n### Option 3: metadata field in notebook\n\nOpen the `.ipynb` file in a text editor or using the Jupyter Notebook editor under "File"\nand look for the `metadata` tag should see.\n\n```\n{\n    "metadata": {\n        "name": "My notebook",\n        "kernelspec": ...\n        "version": ...\n        ... { A_LOT_OF_OTHER_STUFF } ...\n    },\n{ A_LOT_OF_OTHER_STUFF }\n```\n\nEdit this the `metadata` tag to have the required markdown fields:\n\n```\n{\n "metadata": {\n        "name": "My notebook",\n        "Title": "Notebook using internal metadata",\n        "Date": "2100-12-31",\n        "Category": "Category",\n        "Tags": "tag1,tag2",\n        "slug": "with-metadata",\n        "Author": "Me"\n\n        ... { A_LOT_OF_OTHER_STUFF } ...\n    },\n    { A_LOT_OF_OTHER_STUFF }\n```\n\n## Mode B: Liquid tags\n\n**Requires** to install the pelican [liquid_tags plugin](https://github.com/getpelican/pelican-plugins/tree/master/liquid_tags).\nOnly the base `liquid_tags.py` and `mdx_liquid_tags.py` files are required.\n\nIn the `pelicanconf.py`:\n\n```python\nMARKUP = (\'md\', )\n\nPLUGIN_PATHS = [\'./plugins\']\nPLUGINS = [\'ipynb.liquid\']\n```\n\nAfter this you can use a liquid tag to include a notebook in any regular markdown article,\nfor example `mypost.md`:\n\n```\nTitle:\nSlug:\nDate:\nCategory:\nTags:\nAuthor:\nSummary:\n\n{% notebook path/from/content/dir/to/notebook.ipynb %}\n```\n\n## Recommend mode?\n\nPersonally I like Method A - Option 1 since I write the Notebooks first and then I just add\nthe metadata file and keeps the notebook clean.\n\nThe Liquid tag mode provide more flexibility to combine an existing notebook code or output with extra text on a Markdown.\nYou can also combine 2 or more notebooks in this mode.\nThe only problem with the liquid tag mode is that it doesn\'t generate a summary for the article\nautomatically from the notebook so you have to write it in the `.md` file that includes\nthe notebook liquid tag.\n\nYou can use both modes at the same time but you are probably going to see a exception that\nprevents conflicts, ignore it.\n\n## Note on CSS\n\nIf the notebooks look bad on your pelican theme this can help. There is some issues/conflicts regarding the CSS that the Jupyter Notebook requires and the pelican theme.\n\nI do my best to make the plugin work with every theme but for obvious reasons I cannot guarantee that it will look good in any pelican theme.\n\nI only try this plugin on the pelican theme for [my blog](https://github.com/danielfrg/danielfrg.com)\nwhile trying to make it the most general and useful out of the box as possible, a difficult compromise sometimes.\n\nJupyter Notebook is based on bootstrap so you probably will need your theme to be based on that it if you want the html and css to render nicely.\n\nI try to inject only the necessary CSS by removing Jupyter\'s bootstrap code and only injecting the extra CSS code.\nIn some cases but fixes are needed, I recommend looking at how [my theme](https://github.com/danielfrg/danielfrg.com) fixes them.\n\nYou can suppress the inclusion of any Notebook CSS entirely by setting `IPYNB_SKIP_CSS=True`, this allows more flexibility on the pelican theme.\n\nThe `IPYNB_EXPORT_TEMPLATE` option is another great way of extending the output natively using Jupyter nbconvert.\n\n## Settings\n\n**Note:** If you are using the Liquid mode you need to set the variables like this inside the `pelicanconf.py`.\n\n```\nLIQUID_CONFIGS = (("IPYNB_EXPORT_TEMPLATE", "notebook.tpl", ""), )\n```\n\nIf you are using the Markup mode then just add this variables to your `pelicanconf.py`.\n\n| Setting | Description |\n|---|---|\n| `IPYNB_FIX_CSS = True` | [markup and liquid] Do not apply any of the plugins "fixes" to the Jupyter CSS use all the default Jupyter CSS. |\n| `IPYNB_SKIP_CSS = False` | [markup and liquid] Do not include (at all) the notebook CSS in the generated output. This is usefull if you want to include it yourself in the theme. |\n| `IPYNB_PREPROCESSORS` | [markup and liquid] A list of nbconvert preprocessors to be used when generating the HTML output. |\n| `IPYNB_EXPORT_TEMPLATE` | [markup and liquid] Path to nbconvert export template (relative to project root). For example: Create a custom template that extends from the `basic` template and adds some custom CSS and JavaScript, more info here [docs](http://nbconvert.readthedocs.io/en/latest/customizing.html) and [example here](https://github.com/jupyter/nbconvert/blob/master/nbconvert/templates/html/basic.tpl). |\n| `IPYNB_STOP_SUMMARY_TAGS = [(\'div\', (\'class\', \'input\')), (\'div\', (\'class\', \'output\')), (\'h2\', (\'id\', \'Header-2\'))]` | [markup only] List of tuples with the html tag and attribute (python HTMLParser format) that are used to stop the summary creation, this is useful to generate valid/shorter summaries. |\n| `IPYNB_GENERATE_SUMMARY = True` | [markup only] Create a summary based on the notebook content. Every notebook can still use the s`Summary` from the metadata to overwrite this. |\n| `IPYNB_EXTEND_STOP_SUMMARY_TAGS` | [markup only] List of tuples to extend the default `IPYNB_STOP_SUMMARY_TAGS`. |\n| `IPYNB_NB_SAVE_AS` | [markup only] If you want to make the original notebook available set this variable in a  is similar way to the default pelican `ARTICLE_SAVE_AS` setting. This will also add a metadata field `nb_path` which can be used in the theme. e.g. `blog/{date:%Y}/{date:%m}/{date:%d}/{slug}/notebook.ipynb` |\n| `IGNORE_FILES = [\'.ipynb_checkpoints\']` | [Pelican setting useful for markup] Prevents pelican from trying to parse notebook checkpoint files. |\n\nExample template for `IPYNB_EXPORT_TEMPLATE`:\n\n```\n{%- extends \'basic.tpl\' -%}\n\n{% block header %}\n<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.0.3/jquery.min.js"></script>\n\n<style type="text/css">\ndiv.code_cell {\n    border: 2px solid red;\n}\n</style>\n{%- endblock header %}\n```\n'