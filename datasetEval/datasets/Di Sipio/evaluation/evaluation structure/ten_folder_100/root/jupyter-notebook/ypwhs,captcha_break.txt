b"# \xe4\xbd\xbf\xe7\x94\xa8\xe6\xb7\xb1\xe5\xba\xa6\xe5\xad\xa6\xe4\xb9\xa0\xe6\x9d\xa5\xe7\xa0\xb4\xe8\xa7\xa3 captcha \xe9\xaa\x8c\xe8\xaf\x81\xe7\xa0\x81\n\n\xe6\x9c\xac\xe9\xa1\xb9\xe7\x9b\xae\xe4\xbc\x9a\xe9\x80\x9a\xe8\xbf\x87 Keras \xe6\x90\xad\xe5\xbb\xba\xe4\xb8\x80\xe4\xb8\xaa\xe6\xb7\xb1\xe5\xba\xa6\xe5\x8d\xb7\xe7\xa7\xaf\xe7\xa5\x9e\xe7\xbb\x8f\xe7\xbd\x91\xe7\xbb\x9c\xe6\x9d\xa5\xe8\xaf\x86\xe5\x88\xab captcha \xe9\xaa\x8c\xe8\xaf\x81\xe7\xa0\x81\xef\xbc\x8c\xe5\xbb\xba\xe8\xae\xae\xe4\xbd\xbf\xe7\x94\xa8\xe6\x98\xbe\xe5\x8d\xa1\xe6\x9d\xa5\xe8\xbf\x90\xe8\xa1\x8c\xe8\xaf\xa5\xe9\xa1\xb9\xe7\x9b\xae\xe3\x80\x82\n\n\xe4\xb8\x8b\xe9\x9d\xa2\xe7\x9a\x84\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe4\xbb\xa3\xe7\xa0\x81\xe9\x83\xbd\xe6\x98\xaf\xe5\x9c\xa8 `jupyter notebook` \xe4\xb8\xad\xe5\xae\x8c\xe6\x88\x90\xe7\x9a\x84\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe4\xbd\xa0\xe5\xb8\x8c\xe6\x9c\x9b\xe5\x86\x99\xe6\x88\x90 python \xe8\x84\x9a\xe6\x9c\xac\xef\xbc\x8c\xe7\xa8\x8d\xe5\x8a\xa0\xe4\xbf\xae\xe6\x94\xb9\xe5\x8d\xb3\xe5\x8f\xaf\xe6\xad\xa3\xe5\xb8\xb8\xe8\xbf\x90\xe8\xa1\x8c\xef\xbc\x8c\xe5\xbd\x93\xe7\x84\xb6\xe4\xb9\x9f\xe5\x8f\xaf\xe4\xbb\xa5\xe5\x8e\xbb\xe6\x8e\x89\xe8\xbf\x99\xe4\xba\x9b\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe4\xbb\xa3\xe7\xa0\x81\xe3\x80\x82\n\n2019 \xe5\xb9\xb4\xe6\x9b\xb4\xe6\x96\xb0\xe4\xba\x86\xef\xbc\x9a\n\n* \xe9\x80\x82\xe9\x85\x8d\xe4\xba\x86\xe6\x96\xb0\xe7\x89\x88 API\n* \xe6\x8f\x90\xe9\xab\x98\xe4\xba\x86\xe6\x95\xb0\xe6\x8d\xae\xe7\x94\x9f\xe6\x88\x90\xe5\x99\xa8\xe7\x9a\x84\xe6\x95\x88\xe7\x8e\x87\n* \xe4\xbd\xbf\xe7\x94\xa8\xe4\xba\x86 CuDNNGRU \xe6\x8f\x90\xe9\xab\x98\xe4\xba\x86\xe8\xae\xad\xe7\xbb\x83\xe5\x92\x8c\xe9\xa2\x84\xe6\xb5\x8b\xe6\x95\x88\xe7\x8e\x87\n* \xe6\x9b\xb4\xe6\x96\xb0\xe4\xba\x86\xe6\x96\x87\xe6\xa1\xa3\n\n# \xe7\x8e\xaf\xe5\xa2\x83\n\n\xe6\x9c\xac\xe9\xa1\xb9\xe7\x9b\xae\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe7\x8e\xaf\xe5\xa2\x83\xe5\xa6\x82\xe4\xb8\x8b\xef\xbc\x9a\n\n* captcha 0.3\n* tensorflow-gpu 1.13.1\n* numpy 1.16.4\n* tqdm 4.28.1\n\n\xe4\xb8\x8b\xe9\x9d\xa2\xe5\x87\xa0\xe4\xb8\xaa\xe5\x8c\x85\xe6\x98\xaf\xe7\x94\xa8\xe4\xba\x8e\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe7\x9a\x84\xef\xbc\x9a\n\n* matplotlib 2.2.2\n* pandas 0.23.0\n* pydot 1.4.1\n* graphviz 2.38.0-12ubuntu2.1\n\n# captcha\n\ncaptcha \xe6\x98\xaf\xe7\x94\xa8 python \xe5\x86\x99\xe7\x9a\x84\xe7\x94\x9f\xe6\x88\x90\xe9\xaa\x8c\xe8\xaf\x81\xe7\xa0\x81\xe7\x9a\x84\xe5\xba\x93\xef\xbc\x8c\xe5\xae\x83\xe6\x94\xaf\xe6\x8c\x81\xe5\x9b\xbe\xe7\x89\x87\xe9\xaa\x8c\xe8\xaf\x81\xe7\xa0\x81\xe5\x92\x8c\xe8\xaf\xad\xe9\x9f\xb3\xe9\xaa\x8c\xe8\xaf\x81\xe7\xa0\x81\xef\xbc\x8c\xe6\x88\x91\xe4\xbb\xac\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe6\x98\xaf\xe5\xae\x83\xe7\x94\x9f\xe6\x88\x90\xe5\x9b\xbe\xe7\x89\x87\xe9\xaa\x8c\xe8\xaf\x81\xe7\xa0\x81\xe7\x9a\x84\xe5\x8a\x9f\xe8\x83\xbd\xe3\x80\x82\n\n\xe9\xa6\x96\xe5\x85\x88\xe6\x88\x91\xe4\xbb\xac\xe8\xae\xbe\xe7\xbd\xae\xe6\x88\x91\xe4\xbb\xac\xe7\x9a\x84\xe9\xaa\x8c\xe8\xaf\x81\xe7\xa0\x81\xe6\xa0\xbc\xe5\xbc\x8f\xe4\xb8\xba\xe6\x95\xb0\xe5\xad\x97\xe5\x8a\xa0\xe5\xa4\xa7\xe5\x86\x99\xe5\xad\x97\xe6\xaf\x8d\xef\xbc\x8c\xe7\x94\x9f\xe6\x88\x90\xe4\xb8\x80\xe4\xb8\xb2\xe9\xaa\x8c\xe8\xaf\x81\xe7\xa0\x81\xe8\xaf\x95\xe8\xaf\x95\xe7\x9c\x8b\xef\xbc\x9a\n\n```py\nfrom captcha.image import ImageCaptcha\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport random\n\n%matplotlib inline\n%config InlineBackend.figure_format = 'retina'\n\nimport string\ncharacters = string.digits + string.ascii_uppercase\nprint(characters)\n\nwidth, height, n_len, n_class = 170, 80, 4, len(characters)\n\ngenerator = ImageCaptcha(width=width, height=height)\nrandom_str = ''.join([random.choice(characters) for j in range(4)])\nimg = generator.generate_image(random_str)\n\nplt.imshow(img)\nplt.title(random_str)\n\n```\n\n![](https://raw.githubusercontent.com/ypwhs/resources/master/captcha/captcha.png)\n\n# \xe9\x98\xb2\xe6\xad\xa2 tensorflow \xe5\x8d\xa0\xe7\x94\xa8\xe6\x89\x80\xe6\x9c\x89\xe6\x98\xbe\xe5\xad\x98\n\n\xe4\xbc\x97\xe6\x89\x80\xe5\x91\xa8\xe7\x9f\xa5 tensorflow \xe9\xbb\x98\xe8\xae\xa4\xe5\x8d\xa0\xe7\x94\xa8\xe6\x89\x80\xe6\x9c\x89\xe6\x98\xbe\xe5\xad\x98\xef\xbc\x8c\xe8\xbf\x99\xe6\xa0\xb7\xe4\xb8\x8d\xe5\x88\xa9\xe4\xba\x8e\xe6\x88\x91\xe4\xbb\xac\xe5\x90\x8c\xe6\x97\xb6\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xa4\x9a\xe9\xa1\xb9\xe5\xae\x9e\xe9\xaa\x8c\xef\xbc\x8c\xe5\x9b\xa0\xe6\xad\xa4\xe6\x88\x91\xe4\xbb\xac\xe5\x8f\xaf\xe4\xbb\xa5\xe4\xbd\xbf\xe7\x94\xa8\xe4\xb8\x8b\xe9\x9d\xa2\xe7\x9a\x84\xe4\xbb\xa3\xe7\xa0\x81\xe5\xbd\x93 tensorflow \xe4\xbd\xbf\xe7\x94\xa8\xe5\xae\x83\xe9\x9c\x80\xe8\xa6\x81\xe7\x9a\x84\xe6\x98\xbe\xe5\xad\x98\xef\xbc\x8c\xe8\x80\x8c\xe4\xb8\x8d\xe6\x98\xaf\xe7\x9b\xb4\xe6\x8e\xa5\xe5\x8d\xa0\xe7\x94\xa8\xe6\x89\x80\xe6\x9c\x89\xe6\x98\xbe\xe5\xad\x98\xe3\x80\x82\n\n```py\nimport tensorflow as tf\nimport tensorflow.keras.backend as K\n\nconfig = tf.ConfigProto()\nconfig.gpu_options.allow_growth=True\nsess = tf.Session(config=config)\nK.set_session(sess)\n```\n\n# \xe6\x95\xb0\xe6\x8d\xae\xe7\x94\x9f\xe6\x88\x90\xe5\x99\xa8\n\n\xe8\xae\xad\xe7\xbb\x83\xe6\xa8\xa1\xe5\x9e\x8b\xe7\x9a\x84\xe6\x97\xb6\xe5\x80\x99\xef\xbc\x8c\xe6\x88\x91\xe4\xbb\xac\xe5\x8f\xaf\xe4\xbb\xa5\xe9\x80\x89\xe6\x8b\xa9\xe4\xb8\xa4\xe7\xa7\x8d\xe6\x96\xb9\xe5\xbc\x8f\xe6\x9d\xa5\xe7\x94\x9f\xe6\x88\x90\xe6\x88\x91\xe4\xbb\xac\xe7\x9a\x84\xe8\xae\xad\xe7\xbb\x83\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe4\xb8\x80\xe7\xa7\x8d\xe6\x98\xaf\xe4\xb8\x80\xe6\xac\xa1\xe6\x80\xa7\xe7\x94\x9f\xe6\x88\x90\xe5\x87\xa0\xe4\xb8\x87\xe5\xbc\xa0\xe5\x9b\xbe\xef\xbc\x8c\xe7\x84\xb6\xe5\x90\x8e\xe5\xbc\x80\xe5\xa7\x8b\xe8\xae\xad\xe7\xbb\x83\xef\xbc\x8c\xe4\xb8\x80\xe7\xa7\x8d\xe6\x98\xaf\xe5\xae\x9a\xe4\xb9\x89\xe4\xb8\x80\xe4\xb8\xaa\xe6\x95\xb0\xe6\x8d\xae\xe7\x94\x9f\xe6\x88\x90\xe5\x99\xa8\xef\xbc\x8c\xe7\x84\xb6\xe5\x90\x8e\xe5\x88\xa9\xe7\x94\xa8 `fit_generator` \xe5\x87\xbd\xe6\x95\xb0\xe6\x9d\xa5\xe8\xae\xad\xe7\xbb\x83\xe3\x80\x82\n\n\xe7\xac\xac\xe4\xb8\x80\xe7\xa7\x8d\xe6\x96\xb9\xe5\xbc\x8f\xe7\x9a\x84\xe5\xa5\xbd\xe5\xa4\x84\xe6\x98\xaf\xe8\xae\xad\xe7\xbb\x83\xe7\x9a\x84\xe6\x97\xb6\xe5\x80\x99\xe6\x98\xbe\xe5\x8d\xa1\xe5\x88\xa9\xe7\x94\xa8\xe7\x8e\x87\xe9\xab\x98\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe4\xbd\xa0\xe9\x9c\x80\xe8\xa6\x81\xe7\xbb\x8f\xe5\xb8\xb8\xe8\xb0\x83\xe5\x8f\x82\xef\xbc\x8c\xe5\x8f\xaf\xe4\xbb\xa5\xe4\xb8\x80\xe6\xac\xa1\xe7\x94\x9f\xe6\x88\x90\xef\xbc\x8c\xe5\xa4\x9a\xe6\xac\xa1\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x9b\xe7\xac\xac\xe4\xba\x8c\xe7\xa7\x8d\xe6\x96\xb9\xe5\xbc\x8f\xe7\x9a\x84\xe5\xa5\xbd\xe5\xa4\x84\xe6\x98\xaf\xe4\xbd\xa0\xe4\xb8\x8d\xe9\x9c\x80\xe8\xa6\x81\xe7\x94\x9f\xe6\x88\x90\xe5\xa4\xa7\xe9\x87\x8f\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe8\xae\xad\xe7\xbb\x83\xe8\xbf\x87\xe7\xa8\x8b\xe4\xb8\xad\xe5\x8f\xaf\xe4\xbb\xa5\xe5\x88\xa9\xe7\x94\xa8 CPU \xe7\x94\x9f\xe6\x88\x90\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe8\x80\x8c\xe4\xb8\x94\xe8\xbf\x98\xe6\x9c\x89\xe4\xb8\x80\xe4\xb8\xaa\xe5\xa5\xbd\xe5\xa4\x84\xe6\x98\xaf\xe4\xbd\xa0\xe5\x8f\xaf\xe4\xbb\xa5\xe6\x97\xa0\xe9\x99\x90\xe7\x94\x9f\xe6\x88\x90\xe6\x95\xb0\xe6\x8d\xae\xe3\x80\x82\n\n\xe6\x88\x91\xe4\xbb\xac\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe6\xa0\xbc\xe5\xbc\x8f\xe5\xa6\x82\xe4\xb8\x8b\xef\xbc\x9a\n\n## X\n\nX \xe7\x9a\x84\xe5\xbd\xa2\xe7\x8a\xb6\xe6\x98\xaf `(batch_size, height, width, 3)`\xef\xbc\x8c\xe6\xaf\x94\xe5\xa6\x82\xe4\xb8\x80\xe6\x89\xb9\xe7\x94\x9f\xe6\x88\x90 128 \xe4\xb8\xaa\xe6\xa0\xb7\xe6\x9c\xac\xef\xbc\x8c\xe5\x9b\xbe\xe7\x89\x87\xe5\xae\xbd\xe5\xba\xa6\xe4\xb8\xba170\xef\xbc\x8c\xe9\xab\x98\xe5\xba\xa6\xe4\xb8\xba80\xef\xbc\x8c\xe9\x82\xa3\xe4\xb9\x88 X \xe7\x9a\x84\xe5\xbd\xa2\xe7\x8a\xb6\xe5\xb0\xb1\xe6\x98\xaf `(128, 64, 128, 3)`\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe4\xbd\xa0\xe6\x83\xb3\xe5\x8f\x96\xe7\xac\xac\xe4\xb8\x80\xe5\xbc\xa0\xe5\x9b\xbe\xef\xbc\x8c\xe4\xbb\xa3\xe7\xa0\x81\xe5\x8f\xaf\xe4\xbb\xa5\xe8\xbf\x99\xe6\xa0\xb7\xe5\x86\x99 `X[0]`\xe3\x80\x82\n\n## y\n\ny \xe7\x9a\x84\xe5\xbd\xa2\xe7\x8a\xb6\xe6\x98\xaf\xe5\x9b\x9b\xe4\xb8\xaa `(batch_size, n_class)`\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe8\xbd\xac\xe6\x8d\xa2\xe6\x88\x90 numpy \xe7\x9a\x84\xe6\xa0\xbc\xe5\xbc\x8f\xef\xbc\x8c\xe5\x88\x99\xe6\x98\xaf `(n_len, batch_size, n_class)`\xef\xbc\x8c\xe6\xaf\x94\xe5\xa6\x82\xe4\xb8\x80\xe6\x89\xb9\xe7\x94\x9f\xe6\x88\x90 128 \xe4\xb8\xaa\xe6\xa0\xb7\xe6\x9c\xac\xef\xbc\x8c\xe9\xaa\x8c\xe8\xaf\x81\xe7\xa0\x81\xe7\x9a\x84\xe5\xad\x97\xe7\xac\xa6\xe6\x9c\x89 36 \xe7\xa7\x8d\xef\xbc\x8c\xe9\x95\xbf\xe5\xba\xa6\xe6\x98\xaf 4 \xe4\xbd\x8d\xef\xbc\x8c\xe9\x82\xa3\xe4\xb9\x88\xe5\xae\x83\xe7\x9a\x84\xe5\xbd\xa2\xe7\x8a\xb6\xe5\xb0\xb1\xe6\x98\xaf 4 \xe4\xb8\xaa `(128, 36)` \xe7\x9a\x84\xe7\x9f\xa9\xe9\x98\xb5\xef\xbc\x8c\xe4\xb9\x9f\xe5\x8f\xaf\xe4\xbb\xa5\xe8\xaf\xb4\xe6\x98\xaf `(4, 32, 36)`\xe3\x80\x82\n\n## \xe6\x95\xb0\xe6\x8d\xae\xe7\x94\x9f\xe6\x88\x90\xe5\x99\xa8\n\n\xe4\xb8\xba\xe4\xba\x86\xe8\xae\xa9 Keras \xe8\x83\xbd\xe5\xa4\x9f\xe4\xbd\xbf\xe7\x94\xa8\xe5\xa4\x9a\xe8\xbf\x9b\xe7\xa8\x8b\xe5\xb9\xb6\xe8\xa1\x8c\xe7\x94\x9f\xe6\x88\x90\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe6\x88\x91\xe4\xbb\xac\xe9\x9c\x80\xe8\xa6\x81\xe4\xbd\xbf\xe7\x94\xa8 Keras \xe7\x9a\x84 Sequence \xe7\xb1\xbb\xe5\xae\x9e\xe7\x8e\xb0\xe4\xb8\x80\xe4\xb8\xaa\xe6\x88\x91\xe4\xbb\xac\xe8\x87\xaa\xe5\xb7\xb1\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe7\xb1\xbb\xe3\x80\x82\n\n\xe5\x9c\xa8 `__init__` \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe5\x87\xbd\xe6\x95\xb0\xe9\x87\x8c\xef\xbc\x8c\xe6\x88\x91\xe4\xbb\xac\xe5\xae\x9a\xe4\xb9\x89\xe6\x95\xb0\xe6\x8d\xae\xe6\x89\x80\xe9\x9c\x80\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe7\x84\xb6\xe5\x90\x8e\xe8\xbf\x99\xe4\xb8\xaa\xe6\x95\xb0\xe6\x8d\xae\xe7\x9a\x84\xe9\x95\xbf\xe5\xba\xa6\xe5\xb0\xb1\xe6\x98\xaf steps \xe6\x95\xb0\xe3\x80\x82\xe5\x9c\xa8 `__getitem__` \xe9\x87\x8c\xef\xbc\x8c\xe6\x88\x91\xe4\xbb\xac\xe4\xb8\x8d\xe7\x94\xa8\xe7\x90\x86\xe4\xbc\x9a\xe7\xb4\xa2\xe5\xbc\x95\xe5\x8f\xb7\xef\xbc\x8c\xe7\x9b\xb4\xe6\x8e\xa5\xe9\x9a\x8f\xe6\x9c\xba\xe7\x94\x9f\xe6\x88\x90\xe4\xb8\x80\xe6\x89\xb9\xe6\xa0\xb7\xe6\x9c\xac\xe9\x80\x81\xe5\x8e\xbb\xe8\xae\xad\xe7\xbb\x83\xe5\x8d\xb3\xe5\x8f\xaf\xe3\x80\x82\n\n```py\nfrom tensorflow.keras.utils import Sequence\n\nclass CaptchaSequence(Sequence):\n    def __init__(self, characters, batch_size, steps, n_len=4, width=128, height=64):\n        self.characters = characters\n        self.batch_size = batch_size\n        self.steps = steps\n        self.n_len = n_len\n        self.width = width\n        self.height = height\n        self.n_class = len(characters)\n        self.generator = ImageCaptcha(width=width, height=height)\n    \n    def __len__(self):\n        return self.steps\n\n    def __getitem__(self, idx):\n        X = np.zeros((self.batch_size, self.height, self.width, 3), dtype=np.float32)\n        y = [np.zeros((self.batch_size, self.n_class), dtype=np.uint8) for i in range(self.n_len)]\n        for i in range(self.batch_size):\n            random_str = ''.join([random.choice(self.characters) for j in range(self.n_len)])\n            X[i] = np.array(self.generator.generate_image(random_str)) / 255.0\n            for j, ch in enumerate(random_str):\n                y[j][i, :] = 0\n                y[j][i, self.characters.find(ch)] = 1\n        return X, y\n```\n\n# \xe4\xbd\xbf\xe7\x94\xa8\xe7\x94\x9f\xe6\x88\x90\xe5\x99\xa8\n\n\xe7\x94\x9f\xe6\x88\x90\xe5\x99\xa8\xe7\x9a\x84\xe4\xbd\xbf\xe7\x94\xa8\xe6\x96\xb9\xe6\xb3\x95\xe5\xbe\x88\xe7\xae\x80\xe5\x8d\x95\xef\xbc\x8c\xe5\x8f\xaa\xe9\x9c\x80\xe8\xa6\x81\xe7\x94\xa8\xe5\xaf\xb9\xe5\xae\x83\xe5\x8f\x96\xe7\xac\xac\xe4\xb8\x80\xe4\xb8\xaa batch \xe5\x8d\xb3\xe5\x8f\xaf\xe3\x80\x82\xe4\xb8\x8b\xe9\x9d\xa2\xe6\x98\xaf\xe4\xb8\x80\xe4\xb8\xaa\xe4\xbe\x8b\xe5\xad\x90\xef\xbc\x8c\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe4\xb8\x80\xe4\xb8\xaa\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\xef\xbc\x8c\xe8\xae\xbe\xe7\xbd\xae batch_size \xe5\x92\x8c steps \xe9\x83\xbd\xe4\xb8\xba 1\xef\xbc\x8c\xe7\x84\xb6\xe5\x90\x8e\xe5\x8f\x96\xe5\x87\xba\xe6\x9d\xa5\xe7\xac\xac\xe4\xb8\x80\xe4\xb8\xaa\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe5\xaf\xb9\xe5\xae\x83\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe3\x80\x82\n\n\xe5\x9c\xa8\xe8\xbf\x99\xe9\x87\x8c\xe6\x88\x91\xe4\xbb\xac\xe5\xaf\xb9\xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84  One-Hot \xe7\xbc\x96\xe7\xa0\x81\xe5\x90\x8e\xe7\x9a\x84\xe6\xa0\x87\xe7\xad\xbe\xe8\xbf\x9b\xe8\xa1\x8c\xe4\xba\x86\xe8\xa7\xa3\xe7\xa0\x81\xef\xbc\x8c\xe9\xa6\x96\xe5\x85\x88\xe5\xb0\x86\xe5\xae\x83\xe8\xbd\xac\xe4\xb8\xba numpy \xe6\x95\xb0\xe7\xbb\x84\xef\xbc\x8c\xe7\x84\xb6\xe5\x90\x8e\xe5\x8f\x9636\xe4\xb8\xaa\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xad\xe6\x9c\x80\xe5\xa4\xa7\xe7\x9a\x84\xe6\x95\xb0\xe5\xad\x97\xe7\x9a\x84\xe4\xbd\x8d\xe7\xbd\xae\xef\xbc\x88axis=2\xe4\xbb\xa3\xe8\xa1\xa8\xe5\xad\x97\xe7\xac\xa6\xe7\x9a\x84\xe8\xbd\xb4\xef\xbc\x89\xef\xbc\x8c\xe5\xae\x9e\xe9\x99\x85\xe4\xb8\x8a\xe7\xa5\x9e\xe7\xbb\x8f\xe7\xbd\x91\xe7\xbb\x9c\xe4\xbc\x9a\xe8\xbe\x93\xe5\x87\xba36\xe4\xb8\xaa\xe5\xad\x97\xe7\xac\xa6\xe7\x9a\x84\xe6\xa6\x82\xe7\x8e\x87\xef\xbc\x8c\xe6\x88\x91\xe4\xbb\xac\xe9\x9c\x80\xe8\xa6\x81\xe5\xb0\x86\xe6\xa6\x82\xe7\x8e\x87\xe6\x9c\x80\xe5\xa4\xa7\xe7\x9a\x84\xe5\x9b\x9b\xe4\xb8\xaa\xe5\xad\x97\xe7\xac\xa6\xe7\x9a\x84\xe7\xbc\x96\xe5\x8f\xb7\xe5\x8f\x96\xe5\x87\xba\xe6\x9d\xa5\xef\xbc\x8c\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xba\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe3\x80\x82\n\n```py\ndef decode(y):\n    y = np.argmax(np.array(y), axis=2)[:,0]\n    return ''.join([characters[x] for x in y])\n\ndata = CaptchaSequence(characters, batch_size=1, steps=1)\nX, y = data[0]\nplt.imshow(X[0])\nplt.title(decode(y))\n```\n\n# \xe6\x9e\x84\xe5\xbb\xba\xe6\xb7\xb1\xe5\xba\xa6\xe5\x8d\xb7\xe7\xa7\xaf\xe7\xa5\x9e\xe7\xbb\x8f\xe7\xbd\x91\xe7\xbb\x9c\n\n```py\nfrom tensorflow.keras.models import *\nfrom tensorflow.keras.layers import *\n\ninput_tensor = Input((height, width, 3))\nx = input_tensor\nfor i, n_cnn in enumerate([2, 2, 2, 2, 2]):\n    for j in range(n_cnn):\n        x = Conv2D(32*2**min(i, 3), kernel_size=3, padding='same', kernel_initializer='he_uniform')(x)\n        x = BatchNormalization()(x)\n        x = Activation('relu')(x)\n    x = MaxPooling2D(2)(x)\n\nx = Flatten()(x)\nx = [Dense(n_class, activation='softmax', name='c%d'%(i+1))(x) for i in range(n_len)]\nmodel = Model(inputs=input_tensor, outputs=x)\n```\n\n\xe6\xa8\xa1\xe5\x9e\x8b\xe7\xbb\x93\xe6\x9e\x84\xe5\xbe\x88\xe7\xae\x80\xe5\x8d\x95\xef\xbc\x8c\xe7\x89\xb9\xe5\xbe\x81\xe6\x8f\x90\xe5\x8f\x96\xe9\x83\xa8\xe5\x88\x86\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe6\x98\xaf\xe4\xb8\xa4\xe4\xb8\xaa\xe5\x8d\xb7\xe7\xa7\xaf\xef\xbc\x8c\xe4\xb8\x80\xe4\xb8\xaa\xe6\xb1\xa0\xe5\x8c\x96\xe7\x9a\x84\xe7\xbb\x93\xe6\x9e\x84\xef\xbc\x8c\xe8\xbf\x99\xe4\xb8\xaa\xe7\xbb\x93\xe6\x9e\x84\xe6\x98\xaf\xe5\xad\xa6\xe7\x9a\x84 VGG16 \xe7\x9a\x84\xe7\xbb\x93\xe6\x9e\x84\xe3\x80\x82\xe6\x88\x91\xe4\xbb\xac\xe9\x87\x8d\xe5\xa4\x8d\xe4\xba\x94\xe4\xb8\xaa block\xef\xbc\x8c\xe7\x84\xb6\xe5\x90\x8e\xe6\x88\x91\xe4\xbb\xac\xe5\xb0\x86\xe5\xae\x83 Flatten\xef\xbc\x8c\xe8\xbf\x9e\xe6\x8e\xa5\xe5\x9b\x9b\xe4\xb8\xaa\xe5\x88\x86\xe7\xb1\xbb\xe5\x99\xa8\xef\xbc\x8c\xe6\xaf\x8f\xe4\xb8\xaa\xe5\x88\x86\xe7\xb1\xbb\xe5\x99\xa8\xe6\x98\xaf36\xe4\xb8\xaa\xe7\xa5\x9e\xe7\xbb\x8f\xe5\x85\x83\xef\xbc\x8c\xe8\xbe\x93\xe5\x87\xba36\xe4\xb8\xaa\xe5\xad\x97\xe7\xac\xa6\xe7\x9a\x84\xe6\xa6\x82\xe7\x8e\x87\xe3\x80\x82\n\n# \xe6\xa8\xa1\xe5\x9e\x8b\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\n\n\xe5\xbe\x97\xe7\x9b\x8a\xe4\xba\x8e Keras \xe8\x87\xaa\xe5\xb8\xa6\xe7\x9a\x84\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xef\xbc\x8c\xe6\x88\x91\xe4\xbb\xac\xe5\x8f\xaf\xe4\xbb\xa5\xe4\xbd\xbf\xe7\x94\xa8\xe5\x87\xa0\xe5\x8f\xa5\xe4\xbb\xa3\xe7\xa0\x81\xe6\x9d\xa5\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe6\xa8\xa1\xe5\x9e\x8b\xe7\x9a\x84\xe7\xbb\x93\xe6\x9e\x84\xef\xbc\x9a\n\n```py\nfrom tensorflow.keras.utils import plot_model\nfrom IPython.display import Image\n\nplot_model(model, to_file='cnn.png', show_shapes=True)\nImage('cnn.png')\n```\n\n\xe8\xbf\x99\xe9\x87\x8c\xe9\x9c\x80\xe8\xa6\x81\xe4\xbd\xbf\xe7\x94\xa8 pydot \xe8\xbf\x99\xe4\xb8\xaa\xe5\xba\x93\xef\xbc\x8c\xe4\xbb\xa5\xe5\x8f\x8a graphviz \xe8\xbf\x99\xe4\xb8\xaa\xe5\xba\x93\xef\xbc\x8c\xe5\x9c\xa8 macOS \xe7\xb3\xbb\xe7\xbb\x9f\xe4\xb8\x8a\xe5\xae\x89\xe8\xa3\x85\xe6\x96\xb9\xe6\xb3\x95\xe5\xa6\x82\xe4\xb8\x8b\xef\xbc\x9a\n\n```sh\nbrew install graphviz\npip install pydot-ng\n```\n\n![](imgs/cnn.png)\n\n\xe6\x88\x91\xe4\xbb\xac\xe5\x8f\xaf\xe4\xbb\xa5\xe7\x9c\x8b\xe5\x88\xb0\xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\x80\xe5\xb1\x82\xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\xe8\xbe\x93\xe5\x87\xba\xe7\x9a\x84\xe5\xbd\xa2\xe7\x8a\xb6\xe6\x98\xaf `(1, 6, 256)`\xef\xbc\x8c\xe5\xb7\xb2\xe7\xbb\x8f\xe4\xb8\x8d\xe8\x83\xbd\xe5\x86\x8d\xe5\x8a\xa0\xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\xe4\xba\x86\xe3\x80\x82\n\n# \xe8\xae\xad\xe7\xbb\x83\xe6\xa8\xa1\xe5\x9e\x8b\n\n\xe8\xae\xad\xe7\xbb\x83\xe6\xa8\xa1\xe5\x9e\x8b\xe5\x8f\x8d\xe8\x80\x8c\xe6\x98\xaf\xe6\x89\x80\xe6\x9c\x89\xe6\xad\xa5\xe9\xaa\xa4\xe9\x87\x8c\xe9\x9d\xa2\xe6\x9c\x80\xe7\xae\x80\xe5\x8d\x95\xe7\x9a\x84\xe4\xb8\x80\xe4\xb8\xaa\xef\xbc\x8c\xe7\x9b\xb4\xe6\x8e\xa5\xe4\xbd\xbf\xe7\x94\xa8 `model.fit_generator` \xe5\x8d\xb3\xe5\x8f\xaf\xef\xbc\x8c\xe8\xbf\x99\xe9\x87\x8c\xe7\x9a\x84\xe9\xaa\x8c\xe8\xaf\x81\xe9\x9b\x86\xe4\xbd\xbf\xe7\x94\xa8\xe4\xba\x86\xe5\x90\x8c\xe6\xa0\xb7\xe7\x9a\x84\xe7\x94\x9f\xe6\x88\x90\xe5\x99\xa8\xef\xbc\x8c\xe7\x94\xb1\xe4\xba\x8e\xe6\x95\xb0\xe6\x8d\xae\xe6\x98\xaf\xe9\x80\x9a\xe8\xbf\x87\xe7\x94\x9f\xe6\x88\x90\xe5\x99\xa8\xe9\x9a\x8f\xe6\x9c\xba\xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\xe6\x88\x91\xe4\xbb\xac\xe4\xb8\x8d\xe7\x94\xa8\xe8\x80\x83\xe8\x99\x91\xe6\x95\xb0\xe6\x8d\xae\xe6\x98\xaf\xe5\x90\xa6\xe4\xbc\x9a\xe9\x87\x8d\xe5\xa4\x8d\xe3\x80\x82\n\n\xe4\xb8\xba\xe4\xba\x86\xe9\x81\xbf\xe5\x85\x8d\xe6\x89\x8b\xe5\x8a\xa8\xe8\xb0\x83\xe5\x8f\x82\xef\xbc\x8c\xe6\x88\x91\xe4\xbb\xac\xe4\xbd\xbf\xe7\x94\xa8\xe4\xba\x86 Adam \xe4\xbc\x98\xe5\x8c\x96\xe5\x99\xa8\xef\xbc\x8c\xe5\xae\x83\xe7\x9a\x84\xe5\xad\xa6\xe4\xb9\xa0\xe7\x8e\x87\xe6\x98\xaf\xe8\x87\xaa\xe5\x8a\xa8\xe8\xae\xbe\xe7\xbd\xae\xe7\x9a\x84\xef\xbc\x8c\xe6\x88\x91\xe4\xbb\xac\xe5\x8f\xaa\xe9\x9c\x80\xe8\xa6\x81\xe7\xbb\x99\xe4\xb8\x80\xe4\xb8\xaa\xe8\xbe\x83\xe5\xa5\xbd\xe7\x9a\x84\xe5\x88\x9d\xe5\xa7\x8b\xe5\xad\xa6\xe4\xb9\xa0\xe7\x8e\x87\xe5\x8d\xb3\xe5\x8f\xaf\xe3\x80\x82\n\nEarlyStopping \xe6\x98\xaf\xe4\xb8\x80\xe4\xb8\xaa Keras \xe7\x9a\x84 Callback\xef\xbc\x8c\xe5\xae\x83\xe5\x8f\xaf\xe4\xbb\xa5\xe5\x9c\xa8 loss \xe8\xb6\x85\xe8\xbf\x87\xe5\xa4\x9a\xe5\xb0\x91\xe4\xb8\xaa epoch \xe6\xb2\xa1\xe6\x9c\x89\xe4\xb8\x8b\xe9\x99\x8d\xe4\xbb\xa5\xe5\x90\x8e\xef\xbc\x8c\xe5\xb0\xb1\xe8\x87\xaa\xe5\x8a\xa8\xe7\xbb\x88\xe6\xad\xa2\xe8\xae\xad\xe7\xbb\x83\xef\xbc\x8c\xe9\x81\xbf\xe5\x85\x8d\xe6\xb5\xaa\xe8\xb4\xb9\xe6\x97\xb6\xe9\x97\xb4\xe3\x80\x82\n\nModelCheckpoint \xe6\x98\xaf\xe5\x8f\xa6\xe4\xb8\x80\xe4\xb8\xaa\xe5\xa5\xbd\xe7\x94\xa8\xe7\x9a\x84 Callback\xef\xbc\x8c\xe5\xae\x83\xe5\x8f\xaf\xe4\xbb\xa5\xe4\xbf\x9d\xe5\xad\x98\xe8\xae\xad\xe7\xbb\x83\xe8\xbf\x87\xe7\xa8\x8b\xe4\xb8\xad\xe6\x9c\x80\xe5\xa5\xbd\xe7\x9a\x84\xe6\xa8\xa1\xe5\x9e\x8b\xe3\x80\x82\n\nCSVLogger \xe5\x8f\xaf\xe4\xbb\xa5\xe8\xae\xb0\xe5\xbd\x95 loss \xe4\xb8\xba CSV \xe6\x96\x87\xe4\xbb\xb6\xef\xbc\x8c\xe8\xbf\x99\xe6\xa0\xb7\xe6\x88\x91\xe4\xbb\xac\xe5\xb0\xb1\xe5\x8f\xaf\xe4\xbb\xa5\xe5\x9c\xa8\xe8\xae\xad\xe7\xbb\x83\xe5\xae\x8c\xe6\x88\x90\xe4\xbb\xa5\xe5\x90\x8e\xe7\xbb\x98\xe5\x88\xb6\xe8\xae\xad\xe7\xbb\x83\xe8\xbf\x87\xe7\xa8\x8b\xe4\xb8\xad\xe7\x9a\x84 loss \xe6\x9b\xb2\xe7\xba\xbf\xe3\x80\x82\n\n\xe6\xb3\xa8\xe6\x84\x8f\xef\xbc\x8c\xe8\xbf\x99\xe6\xae\xb5\xe4\xbb\xa3\xe7\xa0\x81\xe5\x9c\xa8\xe7\xac\x94\xe8\xae\xb0\xe6\x9c\xac\xe7\x94\xb5\xe8\x84\x91\xe4\xb8\x8a\xe5\x8f\xaf\xe8\x83\xbd\xe8\xa6\x81\xe8\xbe\x83\xe9\x95\xbf\xe6\x97\xb6\xe9\x97\xb4\xef\xbc\x8c\xe5\xbb\xba\xe8\xae\xae\xe4\xbd\xbf\xe7\x94\xa8\xe5\xb8\xa6\xe6\x9c\x89 NVIDIA \xe6\x98\xbe\xe5\x8d\xa1\xe7\x9a\x84\xe6\x9c\xba\xe5\x99\xa8\xe8\xbf\x90\xe8\xa1\x8c\xe3\x80\x82\xe6\xb3\xa8\xe6\x84\x8f\xe6\x88\x91\xe4\xbb\xac\xe8\xbf\x99\xe9\x87\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe4\xba\x86\xe4\xb8\x80\xe4\xb8\xaa\xe5\xb0\x8f\xe6\x8a\x80\xe5\xb7\xa7\xef\xbc\x8c\xe6\xb7\xbb\xe5\x8a\xa0 `workers=4` \xe5\x8f\x82\xe6\x95\xb0\xe8\xae\xa9 Keras \xe8\x87\xaa\xe5\x8a\xa8\xe5\xae\x9e\xe7\x8e\xb0\xe5\xa4\x9a\xe8\xbf\x9b\xe7\xa8\x8b\xe7\x94\x9f\xe6\x88\x90\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe6\x91\x86\xe8\x84\xb1 python \xe5\x8d\x95\xe7\xba\xbf\xe7\xa8\x8b\xe6\x95\x88\xe7\x8e\x87\xe4\xbd\x8e\xe7\x9a\x84\xe7\xbc\xba\xe7\x82\xb9\xe3\x80\x82\n\n```py\nfrom tensorflow.keras.callbacks import EarlyStopping, CSVLogger, ModelCheckpoint\nfrom tensorflow.keras.optimizers import *\n\ntrain_data = CaptchaSequence(characters, batch_size=128, steps=1000)\nvalid_data = CaptchaSequence(characters, batch_size=128, steps=100)\ncallbacks = [EarlyStopping(patience=3), CSVLogger('cnn.csv'), ModelCheckpoint('cnn_best.h5', save_best_only=True)]\n\nmodel.compile(loss='categorical_crossentropy',\n              optimizer=Adam(1e-3, amsgrad=True), \n              metrics=['accuracy'])\nmodel.fit_generator(train_data, epochs=100, validation_data=valid_data, workers=4, use_multiprocessing=True,\n                    callbacks=callbacks)\n```\n\n### \xe8\xbd\xbd\xe5\x85\xa5\xe6\x9c\x80\xe5\xa5\xbd\xe7\x9a\x84\xe6\xa8\xa1\xe5\x9e\x8b\xe7\xbb\xa7\xe7\xbb\xad\xe8\xae\xad\xe7\xbb\x83\xe4\xb8\x80\xe4\xbc\x9a\n\n\xe4\xb8\xba\xe4\xba\x86\xe8\xae\xa9\xe6\xa8\xa1\xe5\x9e\x8b\xe5\x85\x85\xe5\x88\x86\xe8\xae\xad\xe7\xbb\x83\xef\xbc\x8c\xe6\x88\x91\xe4\xbb\xac\xe5\x8f\xaf\xe4\xbb\xa5\xe8\xbd\xbd\xe5\x85\xa5\xe4\xb9\x8b\xe5\x89\x8d\xe6\x9c\x80\xe5\xa5\xbd\xe7\x9a\x84\xe6\xa8\xa1\xe5\x9e\x8b\xe6\x9d\x83\xe5\x80\xbc\xef\xbc\x8c\xe7\x84\xb6\xe5\x90\x8e\xe9\x99\x8d\xe4\xbd\x8e\xe5\xad\xa6\xe4\xb9\xa0\xe7\x8e\x87\xe4\xb8\xba\xe5\x8e\x9f\xe6\x9d\xa5\xe7\x9a\x84\xe5\x8d\x81\xe5\x88\x86\xe4\xb9\x8b\xe4\xb8\x80\xef\xbc\x8c\xe7\xbb\xa7\xe7\xbb\xad\xe8\xae\xad\xe7\xbb\x83\xef\xbc\x8c\xe8\xbf\x99\xe6\xa0\xb7\xe5\x8f\xaf\xe4\xbb\xa5\xe8\xae\xa9\xe6\xa8\xa1\xe5\x9e\x8b\xe6\x94\xb6\xe6\x95\x9b\xe5\xbe\x97\xe6\x9b\xb4\xe5\xa5\xbd\xe3\x80\x82\n\n```py\nmodel.load_weights('cnn_best.h5')\n\ncallbacks = [EarlyStopping(patience=3), CSVLogger('cnn.csv', append=True), \n             ModelCheckpoint('cnn_best.h5', save_best_only=True)]\n\nmodel.compile(loss='categorical_crossentropy',\n              optimizer=Adam(1e-4, amsgrad=True), \n              metrics=['accuracy'])\nmodel.fit_generator(train_data, epochs=100, validation_data=valid_data, workers=4, use_multiprocessing=True,\n                    callbacks=callbacks)\n```\n\n# \xe6\xb5\x8b\xe8\xaf\x95\xe6\xa8\xa1\xe5\x9e\x8b\n\n\xe5\xbd\x93\xe6\x88\x91\xe4\xbb\xac\xe8\xae\xad\xe7\xbb\x83\xe5\xae\x8c\xe6\x88\x90\xe4\xbb\xa5\xe5\x90\x8e\xef\xbc\x8c\xe5\x8f\xaf\xe4\xbb\xa5\xe8\xaf\x86\xe5\x88\xab\xe4\xb8\x80\xe4\xb8\xaa\xe9\xaa\x8c\xe8\xaf\x81\xe7\xa0\x81\xe8\xaf\x95\xe8\xaf\x95\xe7\x9c\x8b\xef\xbc\x9a\n\n```py\nX, y = data[0]\ny_pred = model.predict(X)\nplt.title('real: %s\\npred:%s'%(decode(y), decode(y_pred)))\nplt.imshow(X[0], cmap='gray')\nplt.axis('off')\n```\n\n![](https://raw.githubusercontent.com/ypwhs/resources/master/captcha/test_model.png)\n\n# \xe8\xae\xa1\xe7\xae\x97\xe6\xa8\xa1\xe5\x9e\x8b\xe6\x80\xbb\xe4\xbd\x93\xe5\x87\x86\xe7\xa1\xae\xe7\x8e\x87\n\n\xe6\xa8\xa1\xe5\x9e\x8b\xe5\x9c\xa8\xe8\xae\xad\xe7\xbb\x83\xe7\x9a\x84\xe6\x97\xb6\xe5\x80\x99\xe5\x8f\xaa\xe4\xbc\x9a\xe6\x98\xbe\xe7\xa4\xba\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe5\xad\x97\xe7\xac\xa6\xe7\x9a\x84\xe5\x87\x86\xe7\xa1\xae\xe7\x8e\x87\xef\xbc\x8c\xe4\xb8\xba\xe4\xba\x86\xe7\xbb\x9f\xe8\xae\xa1\xe6\xa8\xa1\xe5\x9e\x8b\xe7\x9a\x84\xe6\x80\xbb\xe4\xbd\x93\xe5\x87\x86\xe7\xa1\xae\xe7\x8e\x87\xef\xbc\x8c\xe6\x88\x91\xe4\xbb\xac\xe5\x8f\xaf\xe4\xbb\xa5\xe5\x86\x99\xe4\xb8\x8b\xe9\x9d\xa2\xe7\x9a\x84\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x9a\n\n```py\nfrom tqdm import tqdm\ndef evaluate(model, batch_num=100):\n    batch_acc = 0\n    with tqdm(CaptchaSequence(characters, batch_size=128, steps=100)) as pbar:\n        for X, y in pbar:\n            y_pred = model.predict(X)\n            y_pred = np.argmax(y_pred, axis=-1).T\n            y_true = np.argmax(y, axis=-1).T\n\n            batch_acc += (y_true == y_pred).all(axis=-1).mean()\n    return batch_acc / batch_num\n\nevaluate(model)\n```\n\n\xe8\xbf\x99\xe9\x87\x8c\xe7\x94\xa8\xe5\x88\xb0\xe4\xba\x86\xe4\xb8\x80\xe4\xb8\xaa\xe5\xba\x93\xe5\x8f\xab\xe5\x81\x9a tqdm\xef\xbc\x8c\xe5\xae\x83\xe6\x98\xaf\xe4\xb8\x80\xe4\xb8\xaa\xe8\xbf\x9b\xe5\xba\xa6\xe6\x9d\xa1\xe7\x9a\x84\xe5\xba\x93\xef\xbc\x8c\xe4\xb8\xba\xe7\x9a\x84\xe6\x98\xaf\xe8\x83\xbd\xe5\xa4\x9f\xe5\xae\x9e\xe6\x97\xb6\xe5\x8f\x8d\xe9\xa6\x88\xe8\xbf\x9b\xe5\xba\xa6\xe3\x80\x82\xe7\x84\xb6\xe5\x90\x8e\xe6\x88\x91\xe4\xbb\xac\xe9\x80\x9a\xe8\xbf\x87\xe4\xb8\x80\xe4\xba\x9b numpy \xe8\xae\xa1\xe7\xae\x97\xe5\x8e\xbb\xe7\xbb\x9f\xe8\xae\xa1\xe6\x88\x91\xe4\xbb\xac\xe7\x9a\x84\xe5\x87\x86\xe7\xa1\xae\xe7\x8e\x87\xef\xbc\x8c\xe8\xbf\x99\xe9\x87\x8c\xe8\xae\xa1\xe7\xae\x97\xe8\xa7\x84\xe5\x88\x99\xe6\x98\xaf\xe5\x8f\xaa\xe8\xa6\x81\xe6\x9c\x89\xe4\xb8\x80\xe4\xb8\xaa\xe9\x94\x99\xef\xbc\x8c\xe9\x82\xa3\xe4\xb9\x88\xe5\xb0\xb1\xe4\xb8\x8d\xe7\xae\x97\xe5\xae\x83\xe5\xaf\xb9\xe3\x80\x82\xe7\xbb\x8f\xe8\xbf\x87\xe8\xae\xa1\xe7\xae\x97\xef\xbc\x8c\xe6\x88\x91\xe4\xbb\xac\xe7\x9a\x84\xe6\xa8\xa1\xe5\x9e\x8b\xe7\x9a\x84\xe6\x80\xbb\xe4\xbd\x93\xe5\x87\x86\xe7\xa1\xae\xe7\x8e\x87\xe5\x9c\xa8\xe7\xbb\x8f\xe8\xbf\x87\xe5\x85\x85\xe5\x88\x86\xe8\xae\xad\xe7\xbb\x83\xe4\xbb\xa5\xe5\x90\x8e\xef\xbc\x8c\xe5\x8f\xaf\xe4\xbb\xa5\xe8\xbe\xbe\xe5\x88\xb0 98.26% \xe7\x9a\x84\xe6\x80\xbb\xe4\xbd\x93\xe5\x87\x86\xe7\xa1\xae\xe7\x8e\x87\xe3\x80\x82\n\n# \xe6\xa8\xa1\xe5\x9e\x8b\xe6\x80\xbb\xe7\xbb\x93\n\n\xe6\xa8\xa1\xe5\x9e\x8b\xe7\x9a\x84\xe5\xa4\xa7\xe5\xb0\x8f\xe6\x98\xaf10.7MB\xef\xbc\x8c\xe6\x80\xbb\xe4\xbd\x93\xe5\x87\x86\xe7\xa1\xae\xe7\x8e\x87\xe6\x98\xaf 98.26%\xef\xbc\x8c\xe5\x9f\xba\xe6\x9c\xac\xe4\xb8\x8a\xe5\x8f\xaf\xe4\xbb\xa5\xe7\xa1\xae\xe5\xae\x9a\xe7\xa0\xb4\xe8\xa7\xa3\xe4\xba\x86\xe6\xad\xa4\xe7\xb1\xbb\xe9\xaa\x8c\xe8\xaf\x81\xe7\xa0\x81\xe3\x80\x82\n\n# \xe6\x94\xb9\xe8\xbf\x9b\n\n\xe5\xaf\xb9\xe4\xba\x8e\xe8\xbf\x99\xe7\xa7\x8d\xe6\x8c\x89\xe9\xa1\xba\xe5\xba\x8f\xe4\xb9\xa6\xe5\x86\x99\xe7\x9a\x84\xe6\x96\x87\xe5\xad\x97\xef\xbc\x8c\xe6\x88\x91\xe4\xbb\xac\xe8\xbf\x98\xe6\x9c\x89\xe4\xb8\x80\xe7\xa7\x8d\xe6\x96\xb9\xe6\xb3\x95\xe5\x8f\xaf\xe4\xbb\xa5\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x8c\xe9\x82\xa3\xe5\xb0\xb1\xe6\x98\xaf\xe5\xbe\xaa\xe7\x8e\xaf\xe7\xa5\x9e\xe7\xbb\x8f\xe7\xbd\x91\xe7\xbb\x9c\xe6\x9d\xa5\xe8\xaf\x86\xe5\x88\xab\xe5\xba\x8f\xe5\x88\x97\xe3\x80\x82\xe4\xb8\x8b\xe9\x9d\xa2\xe6\x88\x91\xe4\xbb\xac\xe6\x9d\xa5\xe4\xba\x86\xe8\xa7\xa3\xe4\xb8\x80\xe4\xb8\x8b\xe5\xa6\x82\xe4\xbd\x95\xe4\xbd\xbf\xe7\x94\xa8\xe5\xbe\xaa\xe7\x8e\xaf\xe7\xa5\x9e\xe7\xbb\x8f\xe7\xbd\x91\xe7\xbb\x9c\xe6\x9d\xa5\xe8\xaf\x86\xe5\x88\xab\xe8\xbf\x99\xe7\xb1\xbb\xe9\xaa\x8c\xe8\xaf\x81\xe7\xa0\x81\xe3\x80\x82\n\n# CTC Loss\n\n\xe8\xbf\x99\xe4\xb8\xaa loss \xe6\x98\xaf\xe4\xb8\x80\xe4\xb8\xaa\xe7\x89\xb9\xe5\x88\xab\xe7\xa5\x9e\xe5\xa5\x87\xe7\x9a\x84 loss\xef\xbc\x8c\xe5\xae\x83\xe5\x8f\xaf\xe4\xbb\xa5\xe5\x9c\xa8\xe5\x8f\xaa\xe7\x9f\xa5\xe9\x81\x93\xe5\xba\x8f\xe5\x88\x97\xe7\x9a\x84\xe9\xa1\xba\xe5\xba\x8f\xef\xbc\x8c\xe4\xb8\x8d\xe7\x9f\xa5\xe9\x81\x93\xe5\x85\xb7\xe4\xbd\x93\xe4\xbd\x8d\xe7\xbd\xae\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xef\xbc\x8c\xe8\xae\xa9\xe6\xa8\xa1\xe5\x9e\x8b\xe6\x94\xb6\xe6\x95\x9b\xe3\x80\x82\xe8\xbf\x99\xe9\x87\x8c\xe6\x9c\x89\xe4\xb8\x80\xe4\xb8\xaa\xe9\x9d\x9e\xe5\xb8\xb8\xe5\xa5\xbd\xe7\x9a\x84\xe6\x96\x87\xe7\xab\xa0\xe4\xbb\x8b\xe7\xbb\x8d\xe4\xba\x86 CTC Loss: [Sequence Modeling\nWith CTC](https://distill.pub/2017/ctc/)\n\n![](https://raw.githubusercontent.com/ypwhs/resources/master/captcha/deep-speech-ctc-small.png)\n\n\xe5\x9c\xa8 Keras \xe9\x87\x8c\xe9\x9d\xa2\xe5\xb7\xb2\xe7\xbb\x8f\xe5\x86\x85\xe7\xbd\xae\xe4\xba\x86 CTC Loss \xef\xbc\x8c\xe6\x88\x91\xe4\xbb\xac\xe5\xae\x9e\xe7\x8e\xb0\xe4\xb8\x8b\xe9\x9d\xa2\xe7\x9a\x84\xe4\xbb\xa3\xe7\xa0\x81\xe5\x8d\xb3\xe5\x8f\xaf\xe5\x9c\xa8\xe6\xa8\xa1\xe5\x9e\x8b\xe9\x87\x8c\xe4\xbd\xbf\xe7\x94\xa8 CTC Loss\xe3\x80\x82\n\n* `y_pred` \xe6\x98\xaf\xe6\xa8\xa1\xe5\x9e\x8b\xe7\x9a\x84\xe8\xbe\x93\xe5\x87\xba\xef\xbc\x8c\xe6\x98\xaf\xe6\x8c\x89\xe9\xa1\xba\xe5\xba\x8f\xe8\xbe\x93\xe5\x87\xba\xe7\x9a\x8437\xe4\xb8\xaa\xe5\xad\x97\xe7\xac\xa6\xe7\x9a\x84\xe6\xa6\x82\xe7\x8e\x87\xef\xbc\x8c\xe5\x9b\xa0\xe4\xb8\xba\xe6\x88\x91\xe4\xbb\xac\xe8\xbf\x99\xe9\x87\x8c\xe7\x94\xa8\xe5\x88\xb0\xe4\xba\x86\xe5\xbe\xaa\xe7\x8e\xaf\xe7\xa5\x9e\xe7\xbb\x8f\xe7\xbd\x91\xe7\xbb\x9c\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\xe9\x9c\x80\xe8\xa6\x81\xe4\xb8\x80\xe4\xb8\xaa\xe7\xa9\xba\xe7\x99\xbd\xe5\xad\x97\xe7\xac\xa6\xe7\x9a\x84\xe6\xa6\x82\xe5\xbf\xb5\xef\xbc\x9b\n* `labels` \xe6\x98\xaf\xe9\xaa\x8c\xe8\xaf\x81\xe7\xa0\x81\xef\xbc\x8c\xe6\x98\xaf\xe5\x9b\x9b\xe4\xb8\xaa\xe6\x95\xb0\xe5\xad\x97\xef\xbc\x8c\xe6\xaf\x8f\xe4\xb8\xaa\xe6\x95\xb0\xe5\xad\x97\xe4\xbb\xa3\xe8\xa1\xa8\xe5\xad\x97\xe7\xac\xa6\xe5\x9c\xa8\xe5\xad\x97\xe7\xac\xa6\xe9\x9b\x86\xe9\x87\x8c\xe7\x9a\x84\xe4\xbd\x8d\xe7\xbd\xae\n* `input_length` \xe8\xa1\xa8\xe7\xa4\xba `y_pred` \xe7\x9a\x84\xe9\x95\xbf\xe5\xba\xa6\xef\xbc\x8c\xe6\x88\x91\xe4\xbb\xac\xe8\xbf\x99\xe9\x87\x8c\xe6\x98\xaf16\n* `label_length` \xe8\xa1\xa8\xe7\xa4\xba `labels` \xe7\x9a\x84\xe9\x95\xbf\xe5\xba\xa6\xef\xbc\x8c\xe6\x88\x91\xe4\xbb\xac\xe8\xbf\x99\xe9\x87\x8c\xe6\x98\xaf4\n\n```py\nimport tensorflow.keras.backend as K\n\ndef ctc_lambda_func(args):\n    y_pred, labels, input_length, label_length = args\n    return K.ctc_batch_cost(labels, y_pred, input_length, label_length)\n```\n\n# \xe6\xa8\xa1\xe5\x9e\x8b\xe7\xbb\x93\xe6\x9e\x84\n\n\xe6\x88\x91\xe4\xbb\xac\xe7\x9a\x84\xe6\xa8\xa1\xe5\x9e\x8b\xe7\xbb\x93\xe6\x9e\x84\xe6\x98\xaf\xe8\xbf\x99\xe6\xa0\xb7\xe8\xae\xbe\xe8\xae\xa1\xe7\x9a\x84\xef\xbc\x8c\xe9\xa6\x96\xe5\x85\x88\xe9\x80\x9a\xe8\xbf\x87\xe5\x8d\xb7\xe7\xa7\xaf\xe7\xa5\x9e\xe7\xbb\x8f\xe7\xbd\x91\xe7\xbb\x9c\xe5\x8e\xbb\xe8\xaf\x86\xe5\x88\xab\xe7\x89\xb9\xe5\xbe\x81\xef\xbc\x8c\xe7\x84\xb6\xe5\x90\x8e\xe6\x8c\x89\xe6\xb0\xb4\xe5\xb9\xb3\xe9\xa1\xba\xe5\xba\x8f\xe8\xbe\x93\xe5\x85\xa5\xe5\x88\xb0 GRU \xe8\xbf\x9b\xe8\xa1\x8c\xe5\xba\x8f\xe5\x88\x97\xe5\xbb\xba\xe6\xa8\xa1\xef\xbc\x8c\xe6\x9c\x80\xe5\x90\x8e\xe4\xbd\xbf\xe7\x94\xa8\xe4\xb8\x80\xe4\xb8\xaa\xe5\x88\x86\xe7\xb1\xbb\xe5\x99\xa8\xe5\xaf\xb9\xe6\xaf\x8f\xe4\xb8\xaa\xe6\x97\xb6\xe5\x88\xbb\xe8\xbe\x93\xe5\x87\xba\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x88\x86\xe7\xb1\xbb\xe3\x80\x82\n\n```py\nfrom tensorflow.keras.models import *\nfrom tensorflow.keras.layers import *\n\ninput_tensor = Input((height, width, 3))\nx = input_tensor\nfor i, n_cnn in enumerate([2, 2, 2, 2, 2]):\n    for j in range(n_cnn):\n        x = Conv2D(32*2**min(i, 3), kernel_size=3, padding='same', kernel_initializer='he_uniform')(x)\n        x = BatchNormalization()(x)\n        x = Activation('relu')(x)\n    x = MaxPooling2D(2 if i < 3 else (2, 1))(x)\n\nx = Permute((2, 1, 3))(x)\nx = TimeDistributed(Flatten())(x)\n\nrnn_size = 128\nx = Bidirectional(CuDNNGRU(rnn_size, return_sequences=True))(x)\nx = Bidirectional(CuDNNGRU(rnn_size, return_sequences=True))(x)\nx = Dense(n_class, activation='softmax')(x)\n\nbase_model = Model(inputs=input_tensor, outputs=x)\n```\n\n\xe4\xb8\xba\xe4\xba\x86\xe8\xae\xad\xe7\xbb\x83\xe8\xbf\x99\xe4\xb8\xaa\xe6\xa8\xa1\xe5\x9e\x8b\xef\xbc\x8c\xe6\x88\x91\xe4\xbb\xac\xe8\xbf\x98\xe9\x9c\x80\xe8\xa6\x81\xe6\x90\xad\xe5\xbb\xba\xe4\xb8\x80\xe4\xb8\xaa loss \xe8\xae\xa1\xe7\xae\x97\xe7\xbd\x91\xe7\xbb\x9c\xef\xbc\x8c\xe4\xbb\xa3\xe7\xa0\x81\xe5\xa6\x82\xe4\xb8\x8b\xef\xbc\x9a\n\n```py\nlabels = Input(name='the_labels', shape=[n_len], dtype='float32')\ninput_length = Input(name='input_length', shape=[1], dtype='int64')\nlabel_length = Input(name='label_length', shape=[1], dtype='int64')\nloss_out = Lambda(ctc_lambda_func, output_shape=(1,), name='ctc')([x, labels, input_length, label_length])\n\nmodel = Model(inputs=[input_tensor, labels, input_length, label_length], outputs=loss_out)\n```\n\n\xe7\x9c\x9f\xe6\xad\xa3\xe8\xae\xad\xe7\xbb\x83\xe5\x87\xba\xe6\x9d\xa5\xe7\x9a\x84\xe6\xa8\xa1\xe5\x9e\x8b\xe6\x98\xaf `base_model`\xef\xbc\x8c\xe7\x94\xb1\xe4\xba\x8e Keras \xe7\x9a\x84\xe9\x99\x90\xe5\x88\xb6\xef\xbc\x8c\xe6\x88\x91\xe4\xbb\xac\xe6\xb2\xa1\xe5\x8a\x9e\xe6\xb3\x95\xe7\x9b\xb4\xe6\x8e\xa5\xe4\xbd\xbf\xe7\x94\xa8 `base_model` \xe6\x90\xad\xe5\xbb\xba CTCLoss\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\xe6\x88\x91\xe4\xbb\xac\xe5\x8f\xaa\xe8\x83\xbd\xe6\x8c\x89\xe7\x85\xa7\xe4\xb8\x8a\xe9\x9d\xa2\xe7\x9a\x84\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\xe8\xae\xa9\xe6\xa8\xa1\xe5\x9e\x8b\xe7\x9b\xb4\xe6\x8e\xa5\xe8\xbe\x93\xe5\x87\xba loss\xe3\x80\x82\n\n# \xe6\xa8\xa1\xe5\x9e\x8b\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\n\n\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe7\x9a\x84\xe4\xbb\xa3\xe7\xa0\x81\xe5\x90\x8c\xe4\xb8\x8a\xef\xbc\x8c\xe8\xbf\x99\xe9\x87\x8c\xe5\x8f\xaa\xe8\xb4\xb4\xe5\x9b\xbe\xe3\x80\x82\n\n![](imgs/ctc.png)\n\n\xe5\x8f\xaf\xe4\xbb\xa5\xe7\x9c\x8b\xe5\x88\xb0\xe6\xa8\xa1\xe5\x9e\x8b\xe6\xaf\x94\xe4\xb8\x8a\xe4\xb8\x80\xe4\xb8\xaa\xe6\xa8\xa1\xe5\x9e\x8b\xe5\xa4\x8d\xe6\x9d\x82\xe4\xba\x86\xe8\xae\xb8\xe5\xa4\x9a\xef\xbc\x8c\xe4\xbd\x86\xe5\xae\x9e\xe9\x99\x85\xe4\xb8\x8a\xe5\x8f\xaa\xe6\x98\xaf\xe5\x9b\xa0\xe4\xb8\xba\xe8\xbe\x93\xe5\x85\xa5\xe6\xaf\x94\xe8\xbe\x83\xe5\xa4\x9a\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\xe5\xae\x83\xe6\x98\xbe\xe5\xbe\x97\xe5\xbe\x88\xe5\xa4\xa7\xe3\x80\x82\n\n\xe9\xa6\x96\xe5\x85\x88\xe6\xa8\xa1\xe5\x9e\x8b\xe8\xbe\x93\xe5\x85\xa5\xe4\xb8\x80\xe4\xb8\xaa `(height, width, 3)` \xe7\xbb\xb4\xe5\xba\xa6\xe7\x9a\x84\xe5\x9b\xbe\xe7\x89\x87\xef\xbc\x8c\xe7\x84\xb6\xe5\x90\x8e\xe7\xbb\x8f\xe8\xbf\x87\xe4\xb8\x80\xe7\xb3\xbb\xe5\x88\x97\xe7\x9a\x84\xe5\xb1\x82\xe9\x99\x8d\xe7\xbb\xb4\xe5\x88\xb0\xe4\xba\x86 `(2, 16, 256)`\xef\xbc\x8c\xe4\xb9\x8b\xe5\x90\x8e\xe6\x88\x91\xe4\xbb\xac\xe4\xbd\xbf\xe7\x94\xa8 Permute \xe6\x8a\x8a width \xe8\xbd\xb4\xe8\xb0\x83\xe6\x95\xb4\xe5\x88\xb0\xe7\xac\xac\xe4\xb8\x80\xe4\xb8\xaa\xe7\xbb\xb4\xe5\xba\xa6\xe4\xbb\xa5\xe9\x80\x82\xe9\x85\x8d RNN \xe7\x9a\x84\xe8\xbe\x93\xe5\x85\xa5\xe6\xa0\xbc\xe5\xbc\x8f\xe3\x80\x82\xe8\xb0\x83\xe6\x95\xb4\xe4\xbb\xa5\xe5\x90\x8e\xe7\x9a\x84\xe7\xbb\xb4\xe5\xba\xa6\xe6\x98\xaf `(16, 2, 256)`\xef\xbc\x8c\xe7\x84\xb6\xe5\x90\x8e\xe4\xbd\xbf\xe7\x94\xa8 `TimeDistributed(Flatten())` \xe6\x8a\x8a\xe5\x90\x8e\xe4\xb8\xa4\xe4\xb8\xaa\xe7\xbb\xb4\xe5\xba\xa6\xe5\x8e\x8b\xe6\x88\x90\xe4\xb8\x80\xe7\xbb\xb4\xef\xbc\x8c\xe4\xb9\x9f\xe5\xb0\xb1\xe6\x98\xaf `(16, 512)`\xef\xbc\x8c\xe4\xb9\x8b\xe5\x90\x8e\xe7\xbb\x8f\xe8\xbf\x87 2 \xe5\xb1\x82\xe5\x8f\x8c\xe5\x90\x91\xe7\x9a\x84 GRU \xe5\xaf\xb9\xe5\xba\x8f\xe5\x88\x97\xe6\xa8\xaa\xe5\x90\x91\xe5\xbb\xba\xe6\xa8\xa1\xef\xbc\x8c\xe6\x9c\x80\xe5\x90\x8e\xe7\xbb\x8f\xe8\xbf\x87 Dense \xe5\x88\x86\xe7\xb1\xbb\xe5\x99\xa8\xe8\xbe\x93\xe5\x87\xba\xe6\xb0\xb4\xe5\xb9\xb3\xe6\x96\xb9\xe5\x90\x91\xe4\xb8\x8a\xe6\xaf\x8f\xe4\xb8\xaa\xe5\xad\x97\xe7\xac\xa6\xe7\x9a\x84\xe6\xa6\x82\xe7\x8e\x87\xe5\x88\x86\xe5\xb8\x83\xe3\x80\x82\n\n\xe4\xbd\xbf\xe7\x94\xa8 CuDNNGRU \xe6\x98\xaf\xe5\x9b\xa0\xe4\xb8\xba\xe5\xae\x83\xe5\x9c\xa8 NVIDIA \xe6\x98\xbe\xe5\x8d\xa1\xe4\xb8\x8a\xe5\x8f\xaf\xe4\xbb\xa5\xe5\x8a\xa0\xe9\x80\x9f\xe9\x9d\x9e\xe5\xb8\xb8\xe5\xa4\x9a\xe5\x80\x8d\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe4\xbd\xa0\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe6\x98\xaf CPU\xef\xbc\x8c\xe6\x94\xb9\xe4\xb8\xba GRU \xe5\x8d\xb3\xe5\x8f\xaf\xe3\x80\x82\n\n\xe4\xbd\xbf\xe7\x94\xa8 RNN \xe7\x9a\x84\xe5\x8e\x9f\xe5\x9b\xa0\xe6\x98\xaf\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe4\xbd\xa0\xe7\x9c\x8b\xe5\x88\xb0\xe4\xb8\x80\xe5\x8f\xa5\xe8\xaf\x9d\xe6\x98\xaf `\xe4\xbb\x8a\xe5\xa4\xa9\xe6\x88\x91*\xe4\xba\x86\xe4\xb8\x80\xe4\xb8\xaa\xe9\x9d\x9e\xe5\xb8\xb8\xe5\xa5\xbd\xe5\x90\x83\xe7\x9a\x84\xe8\x8b\xb9\xe6\x9e\x9c`\xef\xbc\x8c\xe6\x9c\x89\xe4\xb8\x80\xe4\xb8\xaa\xe5\xad\x97\xe7\x9c\x8b\xe4\xb8\x8d\xe6\xb8\x85\xef\xbc\x8c\xe4\xbd\xa0\xe5\xbe\x88\xe5\xae\xb9\xe6\x98\x93\xe7\x8c\x9c\xe5\x88\xb0\xe8\xbf\x99\xe4\xb8\xaa\xe5\xad\x97\xe6\x98\xaf\xe2\x80\x9c\xe5\x90\x83\xe2\x80\x9d\xef\xbc\x8c\xe4\xbd\x86\xe6\x98\xaf\xe4\xbd\xbf\xe7\x94\xa8 CNN\xef\xbc\x8c\xe4\xbd\xa0\xe5\xb0\xb1\xe5\xbe\x88\xe9\x9a\xbe\xe6\x9c\x89\xe8\xbf\x99\xe4\xb9\x88\xe5\xa4\xa7\xe7\x9a\x84\xe6\x84\x9f\xe5\x8f\x97\xe9\x87\x8e\xef\xbc\x8c\xe4\xbb\x8e\xe8\x8b\xb9\xe6\x9e\x9c\xe6\x8e\xa8\xe6\xb5\x8b\xe5\x87\xba\xe5\x89\x8d\xe9\x9d\xa2\xe7\x9a\x84\xe5\xad\x97\xe6\x98\xaf\xe5\x90\x83\xe3\x80\x82\n\n# \xe6\x95\xb0\xe6\x8d\xae\xe7\x94\x9f\xe6\x88\x90\xe5\x99\xa8\n\n\xe6\x95\xb0\xe6\x8d\xae\xe7\x94\x9f\xe6\x88\x90\xe5\x99\xa8\xe5\x92\x8c CNN \xe7\x9a\x84\xe5\xb7\xae\xe4\xb8\x8d\xe5\xa4\x9a\xef\xbc\x8c\xe8\xbf\x99\xe9\x87\x8c\xe9\x9c\x80\xe8\xa6\x81\xe5\xa4\x9a\xe5\x87\xa0\xe4\xb8\xaa\xe7\x9f\xa9\xe9\x98\xb5\xef\xbc\x8c\xe4\xb8\x80\xe4\xb8\xaa\xe6\x98\xaf input_length\xef\xbc\x8c\xe4\xbb\xa3\xe8\xa1\xa8\xe5\xba\x8f\xe5\x88\x97\xe9\x95\xbf\xe5\xba\xa6\xef\xbc\x8c\xe4\xb8\x80\xe4\xb8\xaa\xe6\x98\xaf label_length\xef\xbc\x8c\xe4\xbb\xa3\xe8\xa1\xa8\xe9\xaa\x8c\xe8\xaf\x81\xe7\xa0\x81\xe9\x95\xbf\xe5\xba\xa6\xef\xbc\x8c\xe8\xbf\x98\xe6\x9c\x89\xe4\xb8\x80\xe4\xb8\xaa np.ones\xef\xbc\x8c\xe6\xb2\xa1\xe6\x9c\x89\xe6\x84\x8f\xe4\xb9\x89\xef\xbc\x8c\xe5\x8f\xaa\xe6\x98\xaf\xe4\xb8\xba\xe4\xba\x86\xe9\x80\x82\xe9\x85\x8d Keras \xe8\xae\xad\xe7\xbb\x83\xe9\x9c\x80\xe8\xa6\x81\xe7\x9a\x84\xe7\x9f\xa9\xe9\x98\xb5\xe8\xbe\x93\xe5\x85\xa5\xe3\x80\x82\n\n```py\nfrom tensorflow.keras.utils import Sequence\n\nclass CaptchaSequence(Sequence):\n    def __init__(self, characters, batch_size, steps, n_len=4, width=128, height=64, \n                 input_length=16, label_length=4):\n        self.characters = characters\n        self.batch_size = batch_size\n        self.steps = steps\n        self.n_len = n_len\n        self.width = width\n        self.height = height\n        self.input_length = input_length\n        self.label_length = label_length\n        self.n_class = len(characters)\n        self.generator = ImageCaptcha(width=width, height=height)\n    \n    def __len__(self):\n        return self.steps\n\n    def __getitem__(self, idx):\n        X = np.zeros((self.batch_size, self.height, self.width, 3), dtype=np.float32)\n        y = np.zeros((self.batch_size, self.n_len), dtype=np.uint8)\n        input_length = np.ones(self.batch_size)*self.input_length\n        label_length = np.ones(self.batch_size)*self.label_length\n        for i in range(self.batch_size):\n            random_str = ''.join([random.choice(self.characters) for j in range(self.n_len)])\n            X[i] = np.array(self.generator.generate_image(random_str)) / 255.0\n            y[i] = [self.characters.find(x) for x in random_str]\n        return [X, y, input_length, label_length], np.ones(self.batch_size)\n```\n\n# \xe8\xaf\x84\xe4\xbc\xb0\xe6\xa8\xa1\xe5\x9e\x8b\n\n```py\nfrom tqdm import tqdm\n\ndef evaluate(model, batch_size=128, steps=20):\n    batch_acc = 0\n    valid_data = CaptchaSequence(characters, batch_size, steps)\n    for [X_test, y_test, _, _], _ in valid_data:\n        y_pred = base_model.predict(X_test)\n        shape = y_pred.shape\n        out = K.get_value(K.ctc_decode(y_pred, input_length=np.ones(shape[0])*shape[1])[0][0])[:, :4]\n        if out.shape[1] == 4:\n            batch_acc += (y_test == out).all(axis=1).mean()\n    return batch_acc / steps\n```\n\n\xe6\x88\x91\xe4\xbb\xac\xe4\xbc\x9a\xe9\x80\x9a\xe8\xbf\x87\xe8\xbf\x99\xe4\xb8\xaa\xe5\x87\xbd\xe6\x95\xb0\xe6\x9d\xa5\xe8\xaf\x84\xe4\xbc\xb0\xe6\x88\x91\xe4\xbb\xac\xe7\x9a\x84\xe6\xa8\xa1\xe5\x9e\x8b\xef\xbc\x8c\xe5\x92\x8c\xe4\xb8\x8a\xe9\x9d\xa2\xe7\x9a\x84\xe8\xaf\x84\xe4\xbc\xb0\xe6\xa0\x87\xe5\x87\x86\xe4\xb8\x80\xe6\xa0\xb7\xef\xbc\x8c\xe5\x8f\xaa\xe6\x9c\x89\xe5\x85\xa8\xe9\x83\xa8\xe6\xad\xa3\xe7\xa1\xae\xef\xbc\x8c\xe6\x88\x91\xe4\xbb\xac\xe6\x89\x8d\xe7\xae\x97\xe9\xa2\x84\xe6\xb5\x8b\xe6\xad\xa3\xe7\xa1\xae\xef\xbc\x8c\xe4\xb8\xad\xe9\x97\xb4\xe6\x9c\x89\xe4\xb8\xaa\xe5\x9d\x91\xef\xbc\x8c\xe5\xb0\xb1\xe6\x98\xaf\xe6\xa8\xa1\xe5\x9e\x8b\xe6\x9c\x80\xe5\xbc\x80\xe5\xa7\x8b\xe8\xae\xad\xe7\xbb\x83\xe7\x9a\x84\xe6\x97\xb6\xe5\x80\x99\xef\xbc\x8c\xe5\xb9\xb6\xe4\xb8\x8d\xe4\xb8\x80\xe5\xae\x9a\xe4\xbc\x9a\xe8\xbe\x93\xe5\x87\xba\xe5\x9b\x9b\xe4\xb8\xaa\xe5\xad\x97\xe7\xac\xa6\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\xe6\x88\x91\xe4\xbb\xac\xe5\xa6\x82\xe6\x9e\x9c\xe9\x81\x87\xe5\x88\xb0\xe6\x89\x80\xe6\x9c\x89\xe7\x9a\x84\xe5\xad\x97\xe7\xac\xa6\xe9\x83\xbd\xe4\xb8\x8d\xe5\x88\xb0\xe5\x9b\x9b\xe4\xb8\xaa\xe7\x9a\x84\xe6\x97\xb6\xe5\x80\x99\xef\xbc\x8c\xe5\xb0\xb1\xe4\xb8\x8d\xe8\xae\xa1\xe7\xae\x97\xe4\xba\x86\xef\xbc\x8c\xe7\x9b\xb8\xe5\xbd\x93\xe4\xba\x8e\xe5\x8a\xa00\xef\xbc\x8c\xe9\x81\x87\xe5\x88\xb0\xe5\xa4\x9a\xe4\xba\x8e4\xe4\xb8\xaa\xe5\xad\x97\xe7\xac\xa6\xe7\x9a\x84\xe6\x97\xb6\xe5\x80\x99\xef\xbc\x8c\xe5\x8f\xaa\xe5\x8f\x96\xe5\x89\x8d\xe5\x9b\x9b\xe4\xb8\xaa\xe3\x80\x82\n\n# \xe8\xaf\x84\xe4\xbc\xb0\xe5\x9b\x9e\xe8\xb0\x83\n\n\xe5\x9b\xa0\xe4\xb8\xba Keras \xe6\xb2\xa1\xe6\x9c\x89\xe9\x92\x88\xe5\xaf\xb9\xe8\xbf\x99\xe7\xa7\x8d\xe8\xbe\x93\xe5\x87\xba\xe8\xae\xa1\xe7\xae\x97\xe5\x87\x86\xe7\xa1\xae\xe7\x8e\x87\xe7\x9a\x84\xe9\x80\x89\xe9\xa1\xb9\xef\xbc\x8c\xe5\x9b\xa0\xe6\xad\xa4\xe6\x88\x91\xe4\xbb\xac\xe9\x9c\x80\xe8\xa6\x81\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89\xe4\xb8\x80\xe4\xb8\xaa\xe5\x9b\x9e\xe8\xb0\x83\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe5\xae\x83\xe4\xbc\x9a\xe5\x9c\xa8\xe6\xaf\x8f\xe4\xb8\x80\xe4\xbb\xa3\xe8\xae\xad\xe7\xbb\x83\xe5\xae\x8c\xe6\x88\x90\xe7\x9a\x84\xe6\x97\xb6\xe5\x80\x99\xe8\xae\xa1\xe7\xae\x97\xe6\xa8\xa1\xe5\x9e\x8b\xe7\x9a\x84\xe5\x87\x86\xe7\xa1\xae\xe7\x8e\x87\xe3\x80\x82\n\n```py\nfrom tensorflow.keras.callbacks import Callback\n\nclass Evaluate(Callback):\n    def __init__(self):\n        self.accs = []\n    \n    def on_epoch_end(self, epoch, logs=None):\n        logs = logs or {}\n        acc = evaluate(base_model)\n        logs['val_acc'] = acc\n        self.accs.append(acc)\n        print(f'\\nacc: {acc*100:.4f}')\n```\n\n# \xe8\xae\xad\xe7\xbb\x83\xe6\xa8\xa1\xe5\x9e\x8b\n\n\xe6\x88\x91\xe4\xbb\xac\xe8\xbf\x98\xe6\x98\xaf\xe6\x8c\x89\xe7\x85\xa7\xe4\xb9\x8b\xe5\x89\x8d\xe7\x9a\x84\xe8\xae\xad\xe7\xbb\x83\xe7\xad\x96\xe7\x95\xa5\xef\xbc\x8c\xe5\x85\x88\xe8\xae\xad\xe7\xbb\x83 100 \xe4\xbb\xa3\xef\xbc\x8c\xe7\xad\x89 loss \xe4\xb8\x8d\xe9\x99\x8d\xe4\xbd\x8e\xe4\xbb\xa5\xe5\x90\x8e\xef\xbc\x8c\xe9\x99\x8d\xe4\xbd\x8e\xe5\xad\xa6\xe4\xb9\xa0\xe7\x8e\x87\xef\xbc\x8c\xe5\x86\x8d\xe8\xae\xad\xe7\xbb\x83 100 \xe4\xbb\xa3\xef\xbc\x8c\xe4\xbb\xa3\xe7\xa0\x81\xe5\xa6\x82\xe4\xb8\x8b\xef\xbc\x9a\n\n```py\nfrom tensorflow.keras.callbacks import EarlyStopping, CSVLogger, ModelCheckpoint\nfrom tensorflow.keras.optimizers import *\n\ntrain_data = CaptchaSequence(characters, batch_size=128, steps=1000)\nvalid_data = CaptchaSequence(characters, batch_size=128, steps=100)\ncallbacks = [EarlyStopping(patience=5), Evaluate(), \n             CSVLogger('ctc.csv'), ModelCheckpoint('ctc_best.h5', save_best_only=True)]\n\nmodel.compile(loss={'ctc': lambda y_true, y_pred: y_pred}, optimizer=Adam(1e-3, amsgrad=True))\nmodel.fit_generator(train_data, epochs=100, validation_data=valid_data, workers=4, use_multiprocessing=True,\n                    callbacks=callbacks)\n```\n\n```py\nmodel.load_weights('ctc_best.h5')\n\ncallbacks = [EarlyStopping(patience=5), Evaluate(), \n             CSVLogger('ctc.csv', append=True), ModelCheckpoint('ctc_best.h5', save_best_only=True)]\n\nmodel.compile(loss={'ctc': lambda y_true, y_pred: y_pred}, optimizer=Adam(1e-4, amsgrad=True))\nmodel.fit_generator(train_data, epochs=100, validation_data=valid_data, workers=4, use_multiprocessing=True,\n                    callbacks=callbacks)\n```\n\n![](imgs/vis.png)\n\n\xe5\x8f\xaf\xe4\xbb\xa5\xe7\x9c\x8b\xe5\x88\xb0 loss \xe4\xb8\x80\xe5\xbc\x80\xe5\xa7\x8b\xe4\xb8\x8b\xe9\x99\x8d\xe5\xbe\x88\xe5\xbf\xab\xef\xbc\x8c\xe5\x90\x8e\xe9\x9d\xa2\xe5\xb0\xb1\xe5\xbe\x88\xe5\xb9\xb3\xe4\xba\x86\xef\xbc\x8c\xe4\xbd\x86\xe6\x98\xaf\xe6\x88\x91\xe4\xbb\xac\xe6\x8a\x8a\xe5\x9c\xa8\xe5\xaf\xb9\xe6\x95\xb0\xe5\xb0\xba\xe5\xba\xa6\xe4\xb8\x8b\xe7\xbb\x98\xe5\x88\xb6 loss \xe5\x9b\xbe\xe7\x9a\x84\xe8\xaf\x9d\xef\xbc\x8c\xe8\xbf\x98\xe6\x98\xaf\xe8\x83\xbd\xe7\x9c\x8b\xe5\x88\xb0 loss \xe4\xb8\x80\xe7\x9b\xb4\xe5\x9c\xa8\xe4\xb8\x8b\xe9\x99\x8d\xe7\x9a\x84\xe3\x80\x82acc \xe4\xb8\x8a\xe5\x8d\x87\xe5\xbe\x97\xe4\xb9\x9f\xe5\xbe\x88\xe5\xbf\xab\xef\xbc\x8c\xe8\x99\xbd\xe7\x84\xb6\xe5\x89\x8d\xe6\x9c\x9f\xe8\xae\xad\xe7\xbb\x83\xe7\x9a\x84\xe6\x97\xb6\xe5\x80\x99 acc \xe5\xbe\x88\xe6\x8a\x96\xe5\x8a\xa8\xef\xbc\x8c\xe4\xbd\x86\xe6\x98\xaf\xe5\x90\x8e\xe6\x9c\x9f\xe5\xad\xa6\xe4\xb9\xa0\xe7\x8e\x87\xe9\x99\x8d\xe4\xb8\x8b\xe6\x9d\xa5\xe4\xbb\xa5\xe5\x90\x8e\xe5\xb0\xb1\xe4\xb8\x8d\xe4\xbc\x9a\xe5\x86\x8d\xe8\xb7\x8c\xe4\xb8\x8b\xe6\x9d\xa5\xe4\xba\x86\xe3\x80\x82\n\n\xe6\x9c\x80\xe7\xbb\x88\xe6\xa8\xa1\xe5\x9e\x8b\xe7\x9a\x84\xe5\x87\x86\xe7\xa1\xae\xe7\x8e\x87\xe8\xbe\xbe\xe5\x88\xb0\xe4\xba\x86 99.21%\xef\xbc\x8c\xe8\xae\xad\xe7\xbb\x83\xe8\xbf\x87\xe7\xa8\x8b\xe4\xb8\xad\xe7\x9a\x84\xe5\x87\x86\xe7\xa1\xae\xe7\x8e\x87\xe6\x9c\x80\xe9\xab\x98\xe8\xbe\xbe\xe5\x88\xb0\xe4\xba\x86 99.49%\xe3\x80\x82\n\n# \xe6\xb5\x8b\xe8\xaf\x95\xe6\xa8\xa1\xe5\x9e\x8b\n\n```py\ncharacters2 = characters + ' '\n[X_test, y_test, _, _], _  = data[0]\ny_pred = base_model.predict(X_test)\nout = K.get_value(K.ctc_decode(y_pred, input_length=np.ones(y_pred.shape[0])*y_pred.shape[1], )[0][0])[:, :4]\nout = ''.join([characters[x] for x in out[0]])\ny_true = ''.join([characters[x] for x in y_test[0]])\n\nplt.imshow(X_test[0])\nplt.title('pred:' + str(out) + '\\ntrue: ' + str(y_true))\n\nargmax = np.argmax(y_pred, axis=2)[0]\nlist(zip(argmax, ''.join([characters2[x] for x in argmax])))\n```\n\n\xe8\xbf\x99\xe9\x87\x8c\xe9\x9a\x8f\xe6\x9c\xba\xe5\x87\xba\xe6\x9d\xa5\xe7\x9a\x84\xe9\xaa\x8c\xe8\xaf\x81\xe7\xa0\x81\xe5\xbe\x88\xe5\x8e\x89\xe5\xae\xb3\xef\xbc\x8c\xe6\x98\xaf`O0OP`\xef\xbc\x8c\xe4\xb8\x8d\xe8\xbf\x87\xe6\x9b\xb4\xe5\x8e\x89\xe5\xae\xb3\xe7\x9a\x84\xe6\x98\xaf\xe6\xa8\xa1\xe5\x9e\x8b\xe8\xae\xa4\xe5\x87\xba\xe6\x9d\xa5\xe4\xba\x86\xe3\x80\x82\n\n![](https://raw.githubusercontent.com/ypwhs/resources/master/captcha/O0OP.png)\n\n# \xe6\x9c\x89\xe8\xb6\xa3\xe7\x9a\x84\xe9\x97\xae\xe9\xa2\x98\n\n\xe6\x88\x91\xe5\x8f\x88\xe7\x94\xa8\xe4\xb9\x8b\xe5\x89\x8d\xe7\x9a\x84\xe6\xa8\xa1\xe5\x9e\x8b\xe5\x81\x9a\xe4\xba\x86\xe4\xb8\xaa\xe6\xb5\x8b\xe8\xaf\x95\xef\xbc\x8c\xe5\xaf\xb9\xe4\xba\x8e `O0O0` \xe8\xbf\x99\xe6\xa0\xb7\xe4\xb8\xa7\xe5\xbf\x83\xe7\x97\x85\xe7\x8b\x82\xe7\x9a\x84\xe9\xaa\x8c\xe8\xaf\x81\xe7\xa0\x81\xef\xbc\x8c\xe6\xa8\xa1\xe5\x9e\x8b\xe5\x81\xb6\xe5\xb0\x94\xe4\xb9\x9f\xe8\x83\xbd\xe6\xad\xa3\xe7\xa1\xae\xe8\xaf\x86\xe5\x88\xab\xef\xbc\x8c\xe8\xbf\x99\xe8\xae\xa9\xe6\x88\x91\xe9\x9d\x9e\xe5\xb8\xb8\xe6\x83\x8a\xe8\xae\xb6\xef\xbc\x8c\xe5\xae\x83\xe6\x98\xaf\xe7\x9c\x9f\xe7\x9a\x84\xe8\x83\xbd\xe8\xaf\x86\xe5\x88\xab O \xe4\xb8\x8e 0 \xe7\x9a\x84\xe5\xb7\xae\xe5\x88\xab\xe5\x91\xa2\xef\xbc\x8c\xe8\xbf\x98\xe6\x98\xaf\xe7\x8c\x9c\xe5\x87\xba\xe6\x9d\xa5\xe7\x9a\x84\xe5\x91\xa2\xef\xbc\x9f\xe8\xbf\x99\xe5\xbe\x88\xe9\x9a\xbe\xe8\xaf\xb4\xe3\x80\x82\n\n```py\ngenerator = ImageCaptcha(width=width, height=height)\nrandom_str = 'O0O0'\nX = generator.generate_image(random_str)\nX = np.expand_dims(X, 0) / 255.0\n\ny_pred = base_model.predict(X)\nout = K.get_value(K.ctc_decode(y_pred, input_length=np.ones(y_pred.shape[0])*y_pred.shape[1], )[0][0])[:, :4]\nout = ''.join([characters[x] for x in out[0]])\n\nplt.title('real: %s\\npred:%s'%(random_str, out))\nplt.imshow(X[0], cmap='gray')\n```\n\n![](https://raw.githubusercontent.com/ypwhs/resources/master/captcha/O0O0.png)\n\n# \xe6\x80\xbb\xe7\xbb\x93\n\n\xe6\xa8\xa1\xe5\x9e\x8b\xe7\x9a\x84\xe5\xa4\xa7\xe5\xb0\x8f\xe6\x98\xaf12.8MB\xef\xbc\x8c\xe5\x87\x86\xe7\xa1\xae\xe7\x8e\x87\xe8\xbe\xbe\xe5\x88\xb0\xe4\xba\x86\xe6\x83\x8a\xe4\xba\xba\xe7\x9a\x84 99.21%\xef\xbc\x8c\xe5\x8d\xb3\xe4\xbd\xbf\xe8\xbf\x9e 0 \xe5\x92\x8c O \xe9\x83\xbd\xe8\x83\xbd\xe7\xb2\xbe\xe5\x87\x86\xe5\x8c\xba\xe5\x88\x86\xef\xbc\x8c\xe9\x9d\x9e\xe5\xb8\xb8\xe6\x88\x90\xe5\x8a\x9f\xe3\x80\x82\n\n# \xe6\x89\xa9\xe5\xb1\x95\n\n\xe5\xa6\x82\xe6\x9e\x9c\xe4\xbd\xa0\xe6\xaf\x94\xe8\xbe\x83\xe5\x96\x9c\xe6\xac\xa2 PyTorch\xef\xbc\x8c\xe5\x8f\xaf\xe4\xbb\xa5\xe7\x9c\x8b [ctc_pytorch.ipynb](ctc_pytorch.ipynb)\xef\xbc\x8c\xe7\xb2\xbe\xe5\xba\xa6\xe6\x9b\xb4\xe9\xab\x98\xef\xbc\x8c\xe8\xbe\xbe\xe5\x88\xb0\xe4\xba\x86 99.57%\xe3\x80\x82\n\n\xe5\xa6\x82\xe6\x9e\x9c\xe4\xbd\xa0\xe6\x83\xb3\xe6\x9f\xa5\xe7\x9c\x8b\xe6\x9b\xb4\xe5\xa4\x9a\xe7\xbb\x8f\xe9\xaa\x8c\xef\xbc\x8c\xe5\x8f\xaf\xe4\xbb\xa5\xe7\x9c\x8b\xe7\x9c\x8b\xe6\x88\x91\xe5\x9c\xa8\xe7\x99\xbe\xe5\xba\xa6\xe4\xba\x91\xe9\xad\x85\xe6\x97\x8f\xe6\xb7\xb1\xe5\xba\xa6\xe5\xad\xa6\xe4\xb9\xa0\xe5\xba\x94\xe7\x94\xa8\xe5\xa4\xa7\xe8\xb5\x9b\xe7\x9a\x84\xe4\xbb\xa3\xe7\xa0\x81\xe5\x92\x8c\xe6\x80\x9d\xe8\xb7\xaf\xef\xbc\x9a[https://github.com/ypwhs/baiduyun_deeplearning_competition](https://github.com/ypwhs/baiduyun_deeplearning_competition)\n\n# \xe5\x8f\x82\xe8\x80\x83\xe9\x93\xbe\xe6\x8e\xa5\n\n* [https://keras.io/getting-started/functional-api-guide/](https://keras.io/getting-started/functional-api-guide/)\n* [https://www.tensorflow.org/api_docs/python/tf/nn/ctc_loss](https://www.tensorflow.org/api_docs/python/tf/nn/ctc_loss)\n* [https://github.com/keras-team/keras/blob/master/examples/image_ocr.py](https://github.com/keras-team/keras/blob/master/examples/image_ocr.py)\n* [https://cs231n.github.io/convolutional-networks/](https://cs231n.github.io/convolutional-networks/)\n* [https://distill.pub/2017/ctc/](https://distill.pub/2017/ctc/)\n"