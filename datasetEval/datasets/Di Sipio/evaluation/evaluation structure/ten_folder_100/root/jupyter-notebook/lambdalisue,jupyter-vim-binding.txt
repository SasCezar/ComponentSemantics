b'jupyter-vim-binding\n===============================================================================\n![Version 2.1.0](https://img.shields.io/badge/version-2.1.0-yellow.svg?style=flat-square) ![Support Jupyter 4.1 or above](https://img.shields.io/badge/support-Jupyter%204.1%20or%20above-yellowgreen.svg?style=flat-square) [![MIT License](https://img.shields.io/badge/license-MIT-blue.svg?style=flat-square)](LICENSE) ![Doc](https://img.shields.io/badge/doc-%3Ah%20Press%20F1%20on%20Jupyter-orange.svg?style=flat-square)\n\nDo you use Vim? And you need to use [Jupyter Notebook]?\nThis is a [Jupyter Notebook][] (formerly known as [IPython Notebook][]) extension to enable Vim like environment powered by [CodeMirror\'s Vim][].\nI\'m sure that this plugin helps to improve your QOL.\n\n[Jupyter Notebook]: https://jupyter.org/\n[IPython Notebook]: http://ipython.org/notebook.html\n[CodeMirror\'s Vim]: https://codemirror.net/demo/vim.html\n[IPython-notebook-extensions]: https://github.com/ipython-contrib/IPython-notebook-extensions\n\n<div align="center">\n  <img src="resource/screencast.gif" alt="Screencast">\n</div>\n\nThis extension stands for providing a Vim like environment, so it would drastically overwrite the default mappings and introduce a new behaviors.\nFor example\n\n- Jupyter has two modes, *Command mode* and *Edit mode* but this extension has three modes, *Jupyter mode*, *Vim command mode*, and *Insert mode*\n- Jupyter provides `C` (`Shift-c`) and `V` (`Shift-v`) to perform copy and paste cells but this extension provides `yy` and `p` to perform copy and paste cells\n- Jupyter provides `<C-s>` (`Ctrl-s`) to save a checkpoint but this extension eliminate that mapping while `:w` works same\n- A lot more.\n\n\nNeed contributors\n-------------------------------------------------------------------------------\n\nWhile I changed my job, I don\'t use jupyter notebook and I can\'t make enough time to maintain this plugin.\n\n**So if you like this plugin, please consider to be a contributor.**\n\nhttps://github.com/lambdalisue/jupyter-vim-binding/issues/89\n\n\nInstallation\n-------------------------------------------------------------------------------\n\nThere are several ways to install the extension, see [Installation](https://github.com/lambdalisue/jupyter-vim-binding/wiki/Installation) for detail.\nThe procedure below is a most simple one for quick use (**A recommended way is different from this. See the link above if you are beginner.**)\n\n```bash\n# Create required directory in case (optional)\nmkdir -p $(jupyter --data-dir)/nbextensions\n# Clone the repository\ncd $(jupyter --data-dir)/nbextensions\ngit clone https://github.com/lambdalisue/jupyter-vim-binding vim_binding\n# Activate the extension\njupyter nbextension enable vim_binding/vim_binding\n```\n\n\nUsage\n-------------------------------------------------------------------------------\n\nThis extension provides *Jupyter mode* (For manipulating Jupyter) and *Vim mode* (For manipulating text).\nIn *Vim mode*, there are *Command mode* and *Insert mode* like native Vim.\nUsers can distinguish these mode by background color of the cell.\n\nKey mappings are designed for Vimmer so probably you don\'t need to know much about the mapping but remember the followings to survive:\n\n- All mappings are shown by hitting `<F1>`\n- Enter *Vim mode*; a super mode of *Vim command mode* and *Insert mode*; by 1) Double clicking a cell, 2) Hit `<Enter>` on a cell, or 3) Hit `i` on a cell\n- Leave *Vim mode* and re-enter *Jupyter mode* by `:q` or `<S-Esc>` (`Shift-Escape`)\n- Enter *Insert mode* or leave *Insert mode* as like Vim (`i`, `a`, etc.)\n\nYou can find detail information about the mappings or concept in [Concept](https://github.com/lambdalisue/jupyter-vim-binding/wiki/Concept) page.\n\n\nCompletion and Tooltip\n-------------------------------------------------------------------------------\n\njupyter-vim-binding supports `<C-n>`/`<C-p>` completion and `<C-g>` tooltip in a code cell (not in markdown / raw cell).\nThese mappings are not listed in a help panel, due to a technical limitation.\n\nWhen user hit `<C-n>` or `<C-p>`, a completion panel like below will be shown.\nOnce the completion panel is shown, users can select a candidate by `<C-n>`/`<C-p>` and apply by `<Enter>` or cancel by `<Esc>`.\n\n![Completion](resource/completion.png)\n\nWhen user hit `<C-g>`, a tooltip panel like below will be shown.\nThe tooltip will disappear when users perform some actions like hitting a key.\n\n![Tooltip](resource/tooltip.png)\n\nNote that you can repeat `<C-g>` to make the tooltip larger (more informations).\n\n\nPlug mappings\n-------------------------------------------------------------------------------\n\njupyter-vim-binding provides the following `<Plug>` mappings for CodeMirror.\n\n- `<Plug>(vim-binding-j)` : `j` which move to the next cell at the cell side\n- `<Plug>(vim-binding-k)` : `k` which move to the previous cell at the cell side\n- `<Plug>(vim-binding-gj)` : `gj` which move to the next cell at the cell side\n- `<Plug>(vim-binding-gk)` : `gk` which move to the previous cell at the cell side\n- `<Plug>(vim-binding-+)` : `+` which move to the next cell at the cell side\n- `<Plug>(vim-binding--)` : `-` which move to the previous cell at the cell side\n- `<Plug>(vim-binding-_)` : `_` which move to the next cell at the cell side\n\nWhile CodeMirror\'s Vim does not provide `noremap` type of mappings.\nYou need to use these `<Plug>` mappings to prevent infinity loop (See samples in Customization section).\n\n\nCustomization\n-------------------------------------------------------------------------------\n\nTo customize key mappings in *Vim mode*, you need to understand that there are two kinds of mappings in this extension:\n\n1. Mappings provided by [Jupyter Notebook][], users can customize this type of mappings with [Keyboard shortcut editor][] provided in [IPython-notebook-extensions][]\n2. Mappings provided by [CodeMirror\'s Vim][], users can customize this type of mappings with [`custom.js`][] as described below\n\nTo customize mappings provided by [CodeMirror\'s Vim][], create a [`custom.js`][] at `~/.jupyter/custom/custom.js` (at least in Linux) and use [CodeMirror\'s Vim API][] to manipulate like:\n\n```javascript\n// Configure CodeMirror Keymap\nrequire([\n  \'nbextensions/vim_binding/vim_binding\',   // depends your installation\n], function() {\n  // Map jj to <Esc>\n  CodeMirror.Vim.map("jj", "<Esc>", "insert");\n  // Swap j/k and gj/gk (Note that <Plug> mappings)\n  CodeMirror.Vim.map("j", "<Plug>(vim-binding-gj)", "normal");\n  CodeMirror.Vim.map("k", "<Plug>(vim-binding-gk)", "normal");\n  CodeMirror.Vim.map("gj", "<Plug>(vim-binding-j)", "normal");\n  CodeMirror.Vim.map("gk", "<Plug>(vim-binding-k)", "normal");\n});\n\n// Configure Jupyter Keymap\nrequire([\n  \'nbextensions/vim_binding/vim_binding\',\n  \'base/js/namespace\',\n], function(vim_binding, ns) {\n  // Add post callback\n  vim_binding.on_ready_callbacks.push(function(){\n    var km = ns.keyboard_manager;\n    // Allow Ctrl-2 to change the cell mode into Markdown in Vim normal mode\n    km.edit_shortcuts.add_shortcut(\'ctrl-2\', \'vim-binding:change-cell-to-markdown\', true);\n    // Update Help\n    km.edit_shortcuts.events.trigger(\'rebuild.QuickHelp\');\n  });\n});\n```\n\nIf you would like to customize the design, create a your `custom.css` at `~/.jupyter/custom/custom.css` (at least in Linux) like:\n\n```css\n/* Jupyter cell is in normal mode when code mirror */\n.edit_mode .cell.selected .CodeMirror-focused.cm-fat-cursor {\n  background-color: #F5F6EB !important;\n}\n/* Jupyter cell is in insert mode when code mirror */\n.edit_mode .cell.selected .CodeMirror-focused:not(.cm-fat-cursor) {\n  background-color: #F6EBF1 !important;\n}\n```\n\nSee [Customization](https://github.com/lambdalisue/jupyter-vim-binding/wiki/Customization) to find useful snippets. Don\'t be afraid to share your snippets at that page ;-)\n\n[Keyboard shortcut editor]: https://github.com/ipython-contrib/IPython-notebook-extensions/tree/master/nbextensions/usability/keyboard_shortcut_editor\n[`custom.js`]: http://jdfreder-notebook.readthedocs.org/en/docs/examples/Notebook/JavaScript%20Notebook%20Extensions.html\n[CodeMirror\'s Vim API]: https://codemirror.net/doc/manual.html#vimapi\n\n\nLimitation\n-------------------------------------------------------------------------------\n\njupyter-vim-binding has following technical limitation.\nIf anybody know about a confirmed workaround for these limitations, let me know.\n\n### Google Chrome\n\nGoogle Chrome prohibits javascript to override several key mappings such as `Ctrl-N`, `Ctrl-T`, etc.\nBecause of this policy, users have no chance to use default key mappings of jupyter-vim-binding such as `<C-n>` completion.\n\n- https://code.google.com/p/chromium/issues/detail?id=33056\n- http://stackoverflow.com/questions/15911785/overriding-shortcut-keys-in-firefox-and-chrome\n- https://github.com/liftoff/GateOne/issues/290\n\n### Vivaldi\n\nThe chromium-based [Vivaldi][vivaldi] browser provides more flexibility in key mapping customizations and might be a viable alternative to Google Chrome for power users.\nIn contrast to Google Chrome or Chromium, (almost) all keyboard shortcuts in Vivaldi can be [changed or disabled][vivaldi-keyboard], including (but not limited to) `Ctrl-N`, `Ctrl-T`, `Ctrl-J`, etc.\n\nFurthermore, Vivaldi allows assigning a keyboard shortcut to temporarily [disable all other browser keyboard shortcuts][vivaldi-disable], making all key mappings available for other uses.\nNote that this temporary change applies globally to *all* tabs and windows of the browser instance (or "Profile") under consideration. To confine it to a subset of tabs, use a separate profile via [the `--user-data-dir=...` option][user-data-dir].\n\n[vivaldi]: https://vivaldi.com/\n[vivaldi-keyboard]: https://vivalditips.com/customization/shortcuts/en\n[vivaldi-disable]: https://www.ghacks.net/2017/02/07/vivaldi-tip-block-all-keyboard-shortcuts/\n[user-data-dir]: https://chromium.googlesource.com/chromium/src/+/master/docs/user_data_dir.md\n\n### Clipboard\n\nMost of modern browsers prohibit javascript to access a system clipboard without user action such as clicking a button.\nBecause of this, there is no chance to enable copy and paste through `yy`, `dd`, or `p` while HTML5 clipboard object cannot be retrieved in a `keydown` event or so on.\nSo Users need to use browser default mappings such as `Ctrl-C`, `Ctrl-V` if they want to copy and paste through a system clipboard.\n\nThe followings are clipboard library for javascript but all of them require `click` event or no paste support.\n\n- https://github.com/zeroclipboard/zeroclipboard\n- https://clipboardjs.com/\n\nWhat we need is a `clipboard` object which can used for copy and paste in a `keydown` event rather than `click` event.\nHowever, I don\'t know any workaround for this so it is impossible to perform copy and paste in `yy` or `p` for now.\n\n\nLicense\n-------------------------------------------------------------------------------\n\nThe MIT License (MIT)\n\nCopyright (c) 2015-2016 Alisue, hashnote.net\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the "Software"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n'