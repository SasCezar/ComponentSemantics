b'\xe6\x9c\xac\xe6\x96\x87\xe4\xbc\x9a\xe9\x80\x9a\xe8\xbf\x87 Keras \xe6\x90\xad\xe5\xbb\xba\xe4\xb8\x80\xe4\xb8\xaa\xe6\xb7\xb1\xe5\xba\xa6\xe5\x8d\xb7\xe7\xa7\xaf\xe7\xa5\x9e\xe7\xbb\x8f\xe7\xbd\x91\xe7\xbb\x9c\xe6\x9d\xa5\xe8\xaf\x86\xe5\x88\xab\xe4\xb8\x80\xe5\xbc\xa0\xe5\x9b\xbe\xe7\x89\x87\xe6\x98\xaf\xe7\x8c\xab\xe8\xbf\x98\xe6\x98\xaf\xe7\x8b\x97\xef\xbc\x8c\xe5\x9c\xa8\xe9\xaa\x8c\xe8\xaf\x81\xe9\x9b\x86\xe4\xb8\x8a\xe7\x9a\x84\xe5\x87\x86\xe7\xa1\xae\xe7\x8e\x87\xe5\x8f\xaf\xe4\xbb\xa5\xe8\xbe\xbe\xe5\x88\xb099.6%\xef\xbc\x8c\xe5\xbb\xba\xe8\xae\xae\xe4\xbd\xbf\xe7\x94\xa8\xe6\x98\xbe\xe5\x8d\xa1\xe6\x9d\xa5\xe8\xbf\x90\xe8\xa1\x8c\xe8\xaf\xa5\xe9\xa1\xb9\xe7\x9b\xae\xe3\x80\x82\xe6\x9c\xac\xe9\xa1\xb9\xe7\x9b\xae\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84 Keras \xe7\x89\x88\xe6\x9c\xac\xe6\x98\xaf1.2.2\xe3\x80\x82\xe5\xa6\x82\xe6\x9e\x9c\xe4\xbd\xa0\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe6\x98\xaf\xe6\x9b\xb4\xe9\xab\x98\xe7\xba\xa7\xe7\x9a\x84\xe7\x89\x88\xe6\x9c\xac\xef\xbc\x8c\xe5\x8f\xaf\xe8\x83\xbd\xe4\xbc\x9a\xe7\xa8\x8d\xe6\x9c\x89\xe5\x8f\x82\xe6\x95\xb0\xe5\x8f\x98\xe5\x8c\x96\xe3\x80\x82\n\n# \xe7\x8c\xab\xe7\x8b\x97\xe5\xa4\xa7\xe6\x88\x98\n\n\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\xe6\x9d\xa5\xe8\x87\xaa kaggle \xe4\xb8\x8a\xe7\x9a\x84\xe4\xb8\x80\xe4\xb8\xaa\xe7\xab\x9e\xe8\xb5\x9b\xef\xbc\x9a[Dogs vs. Cats](https://www.kaggle.com/c/dogs-vs-cats-redux-kernels-edition)\xef\xbc\x8c\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe6\x9c\x8925000\xe5\xbc\xa0\xef\xbc\x8c\xe7\x8c\xab\xe7\x8b\x97\xe5\x90\x84\xe5\x8d\xa0\xe4\xb8\x80\xe5\x8d\x8a\xe3\x80\x82\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x8612500\xe5\xbc\xa0\xef\xbc\x8c\xe6\xb2\xa1\xe6\x9c\x89\xe6\xa0\x87\xe5\xae\x9a\xe6\x98\xaf\xe7\x8c\xab\xe8\xbf\x98\xe6\x98\xaf\xe7\x8b\x97\xe3\x80\x82\n\n```\n\xe2\x9e\x9c  \xe7\x8c\xab\xe7\x8b\x97\xe5\xa4\xa7\xe6\x88\x98 ls train | head\ncat.0.jpg\ncat.1.jpg\ncat.10.jpg\ncat.100.jpg\ncat.1000.jpg\ncat.10000.jpg\ncat.10001.jpg\ncat.10002.jpg\ncat.10003.jpg\ncat.10004.jpg\n\xe2\x9e\x9c  \xe7\x8c\xab\xe7\x8b\x97\xe5\xa4\xa7\xe6\x88\x98 ls test | head\n1.jpg\n10.jpg\n100.jpg\n1000.jpg\n10000.jpg\n10001.jpg\n10002.jpg\n10003.jpg\n10004.jpg\n10005.jpg\n```\n\n\xe4\xb8\x8b\xe9\x9d\xa2\xe6\x98\xaf\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe7\x9a\x84\xe4\xb8\x80\xe9\x83\xa8\xe5\x88\x86\xe4\xbe\x8b\xe5\xad\x90\xef\xbc\x9a\n\n![](https://raw.githubusercontent.com/ypwhs/resources/master/dataset.png)\n\n# \xe6\x95\xb0\xe6\x8d\xae\xe9\xa2\x84\xe5\xa4\x84\xe7\x90\x86\n\n\xe7\x94\xb1\xe4\xba\x8e\xe6\x88\x91\xe4\xbb\xac\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8d\xe6\x98\xaf\xe4\xbb\xa5`type.num.jpg`\xe8\xbf\x99\xe6\xa0\xb7\xe7\x9a\x84\xe6\x96\xb9\xe5\xbc\x8f\xe5\x91\xbd\xe5\x90\x8d\xe7\x9a\x84\xef\xbc\x8c\xe6\xaf\x94\xe5\xa6\x82`cat.0.jpg`\xef\xbc\x8c\xe4\xbd\x86\xe6\x98\xaf\xe4\xbd\xbf\xe7\x94\xa8 Keras \xe7\x9a\x84 ImageDataGenerator \xe9\x9c\x80\xe8\xa6\x81\xe5\xb0\x86\xe4\xb8\x8d\xe5\x90\x8c\xe7\xa7\x8d\xe7\xb1\xbb\xe7\x9a\x84\xe5\x9b\xbe\xe7\x89\x87\xe5\x88\x86\xe5\x9c\xa8\xe4\xb8\x8d\xe5\x90\x8c\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\xe5\xa4\xb9\xe4\xb8\xad\xef\xbc\x8c\xe5\x9b\xa0\xe6\xad\xa4\xe6\x88\x91\xe4\xbb\xac\xe9\x9c\x80\xe8\xa6\x81\xe5\xaf\xb9\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\xe8\xbf\x9b\xe8\xa1\x8c\xe9\xa2\x84\xe5\xa4\x84\xe7\x90\x86\xe3\x80\x82\xe8\xbf\x99\xe9\x87\x8c\xe6\x88\x91\xe4\xbb\xac\xe9\x87\x87\xe5\x8f\x96\xe7\x9a\x84\xe6\x80\x9d\xe8\xb7\xaf\xe6\x98\xaf\xe5\x88\x9b\xe5\xbb\xba\xe7\xac\xa6\xe5\x8f\xb7\xe9\x93\xbe\xe6\x8e\xa5(symbol link)\xef\xbc\x8c\xe8\xbf\x99\xe6\xa0\xb7\xe7\x9a\x84\xe5\xa5\xbd\xe5\xa4\x84\xe6\x98\xaf\xe4\xb8\x8d\xe7\x94\xa8\xe5\xa4\x8d\xe5\x88\xb6\xe4\xb8\x80\xe9\x81\x8d\xe5\x9b\xbe\xe7\x89\x87\xef\xbc\x8c\xe5\x8d\xa0\xe7\x94\xa8\xe4\xb8\x8d\xe5\xbf\x85\xe8\xa6\x81\xe7\x9a\x84\xe7\xa9\xba\xe9\x97\xb4\xe3\x80\x82\n\n```py\nimport os\nimport shutil\n\ntrain_filenames = os.listdir(\'train\')\ntrain_cat = filter(lambda x:x[:3] == \'cat\', train_filenames)\ntrain_dog = filter(lambda x:x[:3] == \'dog\', train_filenames)\n\ndef rmrf_mkdir(dirname):\n    if os.path.exists(dirname):\n        shutil.rmtree(dirname)\n    os.mkdir(dirname)\n\nrmrf_mkdir(\'train2\')\nos.mkdir(\'train2/cat\')\nos.mkdir(\'train2/dog\')\n\nrmrf_mkdir(\'test2\')\nos.symlink(\'../test/\', \'test2/test\')\n\nfor filename in train_cat:\n    os.symlink(\'../../train/\'+filename, \'train2/cat/\'+filename)\n\nfor filename in train_dog:\n    os.symlink(\'../../train/\'+filename, \'train2/dog/\'+filename)\n```\n\n\xe6\x88\x91\xe4\xbb\xac\xe5\x8f\xaf\xe4\xbb\xa5\xe4\xbb\x8e\xe4\xb8\x8b\xe9\x9d\xa2\xe7\x9c\x8b\xe5\x88\xb0\xe6\x96\x87\xe4\xbb\xb6\xe5\xa4\xb9\xe7\x9a\x84\xe7\xbb\x93\xe6\x9e\x84\xef\xbc\x8ctrain2\xe9\x87\x8c\xe9\x9d\xa2\xe6\x9c\x89\xe4\xb8\xa4\xe4\xb8\xaa\xe6\x96\x87\xe4\xbb\xb6\xe5\xa4\xb9\xef\xbc\x8c\xe5\x88\x86\xe5\x88\xab\xe6\x98\xaf\xe7\x8c\xab\xe5\x92\x8c\xe7\x8b\x97\xef\xbc\x8c\xe6\xaf\x8f\xe4\xb8\xaa\xe6\x96\x87\xe4\xbb\xb6\xe5\xa4\xb9\xe9\x87\x8c\xe6\x98\xaf12500\xe5\xbc\xa0\xe5\x9b\xbe\xe3\x80\x82\n\n```\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 test [12500 images]\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 test.zip\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 test2\n\xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 test -> ../test/\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 train [25000 images]\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 train.zip\n\xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 train2\n    \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 cat [12500 images]\n    \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 dog [12500 images]\n```\n\n# \xe5\xaf\xbc\xe5\x87\xba\xe7\x89\xb9\xe5\xbe\x81\xe5\x90\x91\xe9\x87\x8f\n\n\xe5\xaf\xb9\xe4\xba\x8e\xe8\xbf\x99\xe4\xb8\xaa\xe9\xa2\x98\xe7\x9b\xae\xe6\x9d\xa5\xe8\xaf\xb4\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe9\xa2\x84\xe8\xae\xad\xe7\xbb\x83\xe7\x9a\x84\xe7\xbd\x91\xe7\xbb\x9c\xe6\x98\xaf\xe6\x9c\x80\xe5\xa5\xbd\xe4\xb8\x8d\xe8\xbf\x87\xe7\x9a\x84\xe4\xba\x86\xef\xbc\x8c\xe7\xbb\x8f\xe8\xbf\x87\xe5\x89\x8d\xe6\x9c\x9f\xe7\x9a\x84\xe6\xb5\x8b\xe8\xaf\x95\xef\xbc\x8c\xe6\x88\x91\xe4\xbb\xac\xe6\xb5\x8b\xe8\xaf\x95\xe4\xba\x86 ResNet50 \xe7\xad\x89\xe4\xb8\x8d\xe5\x90\x8c\xe7\x9a\x84\xe7\xbd\x91\xe7\xbb\x9c\xef\xbc\x8c\xe4\xbd\x86\xe6\x98\xaf\xe6\x8e\x92\xe5\x90\x8d\xe9\x83\xbd\xe4\xb8\x8d\xe9\xab\x98\xef\xbc\x8c\xe7\x8e\xb0\xe5\x9c\xa8\xe7\x9c\x8b\xe6\x9d\xa5\xe5\x8f\xaa\xe6\x9c\x89\xe4\xb8\x80\xe4\xb8\xa4\xe7\x99\xbe\xe5\x90\x8d\xe7\x9a\x84\xe6\xa0\xb7\xe5\xad\x90\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\xe6\x88\x91\xe4\xbb\xac\xe9\x9c\x80\xe8\xa6\x81\xe6\x8f\x90\xe9\xab\x98\xe6\x88\x91\xe4\xbb\xac\xe7\x9a\x84\xe6\xa8\xa1\xe5\x9e\x8b\xe8\xa1\xa8\xe7\x8e\xb0\xe3\x80\x82\xe9\x82\xa3\xe4\xb9\x88\xe4\xb8\x80\xe7\xa7\x8d\xe6\x9c\x89\xe6\x95\x88\xe7\x9a\x84\xe6\x96\xb9\xe6\xb3\x95\xe6\x98\xaf\xe7\xbb\xbc\xe5\x90\x88\xe5\x90\x84\xe4\xb8\xaa\xe4\xb8\x8d\xe5\x90\x8c\xe7\x9a\x84\xe6\xa8\xa1\xe5\x9e\x8b\xef\xbc\x8c\xe4\xbb\x8e\xe8\x80\x8c\xe5\xbe\x97\xe5\x88\xb0\xe4\xb8\x8d\xe9\x94\x99\xe7\x9a\x84\xe6\x95\x88\xe6\x9e\x9c\xef\xbc\x8c\xe5\x85\xbc\xe5\x90\xac\xe5\x88\x99\xe6\x98\x8e\xe3\x80\x82\xe5\xa6\x82\xe6\x9e\x9c\xe6\x98\xaf\xe7\x9b\xb4\xe6\x8e\xa5\xe5\x9c\xa8\xe4\xb8\x80\xe4\xb8\xaa\xe5\xb7\xa8\xe5\xa4\xa7\xe7\x9a\x84\xe7\xbd\x91\xe7\xbb\x9c\xe5\x90\x8e\xe9\x9d\xa2\xe5\x8a\xa0\xe6\x88\x91\xe4\xbb\xac\xe7\x9a\x84\xe5\x85\xa8\xe8\xbf\x9e\xe6\x8e\xa5\xef\xbc\x8c\xe9\x82\xa3\xe4\xb9\x88\xe8\xae\xad\xe7\xbb\x8310\xe4\xbb\xa3\xe5\xb0\xb1\xe9\x9c\x80\xe8\xa6\x81\xe8\xb7\x91\xe5\x8d\x81\xe6\xac\xa1\xe5\xb7\xa8\xe5\xa4\xa7\xe7\x9a\x84\xe7\xbd\x91\xe7\xbb\x9c\xef\xbc\x8c\xe8\x80\x8c\xe4\xb8\x94\xe6\x88\x91\xe4\xbb\xac\xe7\x9a\x84\xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\xe9\x83\xbd\xe6\x98\xaf\xe4\xb8\x8d\xe5\x8f\xaf\xe8\xae\xad\xe7\xbb\x83\xe7\x9a\x84\xef\xbc\x8c\xe9\x82\xa3\xe4\xb9\x88\xe8\xbf\x99\xe4\xb8\xaa\xe8\xae\xa1\xe7\xae\x97\xe5\xb0\xb1\xe6\x98\xaf\xe6\xb5\xaa\xe8\xb4\xb9\xe7\x9a\x84\xe3\x80\x82\xe6\x89\x80\xe4\xbb\xa5\xe6\x88\x91\xe4\xbb\xac\xe5\x8f\xaf\xe4\xbb\xa5\xe5\xb0\x86\xe5\xa4\x9a\xe4\xb8\xaa\xe4\xb8\x8d\xe5\x90\x8c\xe7\x9a\x84\xe7\xbd\x91\xe7\xbb\x9c\xe8\xbe\x93\xe5\x87\xba\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\xe5\x90\x91\xe9\x87\x8f\xe5\x85\x88\xe4\xbf\x9d\xe5\xad\x98\xe4\xb8\x8b\xe6\x9d\xa5\xef\xbc\x8c\xe4\xbb\xa5\xe4\xbe\xbf\xe5\x90\x8e\xe7\xbb\xad\xe7\x9a\x84\xe8\xae\xad\xe7\xbb\x83\xef\xbc\x8c\xe8\xbf\x99\xe6\xa0\xb7\xe5\x81\x9a\xe7\x9a\x84\xe5\xa5\xbd\xe5\xa4\x84\xe6\x98\xaf\xe6\x88\x91\xe4\xbb\xac\xe4\xb8\x80\xe6\x97\xa6\xe4\xbf\x9d\xe5\xad\x98\xe4\xba\x86\xe7\x89\xb9\xe5\xbe\x81\xe5\x90\x91\xe9\x87\x8f\xef\xbc\x8c\xe5\x8d\xb3\xe4\xbd\xbf\xe6\x98\xaf\xe5\x9c\xa8\xe6\x99\xae\xe9\x80\x9a\xe7\xac\x94\xe8\xae\xb0\xe6\x9c\xac\xe4\xb8\x8a\xe4\xb9\x9f\xe8\x83\xbd\xe8\xbd\xbb\xe6\x9d\xbe\xe8\xae\xad\xe7\xbb\x83\xe3\x80\x82\n\n```py\nfrom keras.models import *\nfrom keras.layers import *\nfrom keras.applications import *\nfrom keras.preprocessing.image import *\n\nimport h5py\n\ndef write_gap(MODEL, image_size, lambda_func=None):\n    width = image_size[0]\n    height = image_size[1]\n    input_tensor = Input((height, width, 3))\n    x = input_tensor\n    if lambda_func:\n        x = Lambda(lambda_func)(x)\n    \n    base_model = MODEL(input_tensor=x, weights=\'imagenet\', include_top=False)\n    model = Model(base_model.input, GlobalAveragePooling2D()(base_model.output))\n\n    gen = ImageDataGenerator()\n    train_generator = gen.flow_from_directory("train2", image_size, shuffle=False, \n                                              batch_size=16)\n    test_generator = gen.flow_from_directory("test2", image_size, shuffle=False, \n                                             batch_size=16, class_mode=None)\n\n    train = model.predict_generator(train_generator, train_generator.nb_sample)\n    test = model.predict_generator(test_generator, test_generator.nb_sample)\n    with h5py.File("gap_%s.h5"%MODEL.func_name) as h:\n        h.create_dataset("train", data=train)\n        h.create_dataset("test", data=test)\n        h.create_dataset("label", data=train_generator.classes)\n\nwrite_gap(ResNet50, (224, 224))\nwrite_gap(InceptionV3, (299, 299), inception_v3.preprocess_input)\nwrite_gap(Xception, (299, 299), xception.preprocess_input)\n\n```\n\n\xe4\xb8\xba\xe4\xba\x86\xe5\xa4\x8d\xe7\x94\xa8\xe4\xbb\xa3\xe7\xa0\x81\xef\xbc\x8c\xe6\x88\x91\xe8\xa7\x89\xe5\xbe\x97\xe5\x86\x99\xe4\xb8\x80\xe4\xb8\xaa\xe5\x87\xbd\xe6\x95\xb0\xe6\x98\xaf\xe9\x9d\x9e\xe5\xb8\xb8\xe6\x9c\x89\xe5\xbf\x85\xe8\xa6\x81\xe7\x9a\x84\xef\xbc\x8c\xe9\x82\xa3\xe4\xb9\x88\xe6\x88\x91\xe4\xbb\xac\xe7\x9a\x84\xe5\x87\xbd\xe6\x95\xb0\xe5\xb0\xb1\xe9\x9c\x80\xe8\xa6\x81\xe8\xbe\x93\xe5\x85\xa5\xe6\xa8\xa1\xe5\x9e\x8b\xef\xbc\x8c\xe8\xbe\x93\xe5\x85\xa5\xe5\x9b\xbe\xe7\x89\x87\xe7\x9a\x84\xe5\xa4\xa7\xe5\xb0\x8f\xef\xbc\x8c\xe4\xbb\xa5\xe5\x8f\x8a[\xe9\xa2\x84\xe5\xa4\x84\xe7\x90\x86\xe5\x87\xbd\xe6\x95\xb0](https://github.com/fchollet/keras/blob/master/keras/applications/inception_v3.py#L389-L393)\xef\xbc\x8c\xe5\x9b\xa0\xe4\xb8\xba Xception \xe5\x92\x8c Inception V3 \xe9\x83\xbd\xe9\x9c\x80\xe8\xa6\x81\xe5\xb0\x86\xe6\x95\xb0\xe6\x8d\xae\xe9\x99\x90\xe5\xae\x9a\xe5\x9c\xa8 `(-1, 1)` \xe7\x9a\x84\xe8\x8c\x83\xe5\x9b\xb4\xe5\x86\x85\xef\xbc\x8c\xe7\x84\xb6\xe5\x90\x8e\xe6\x88\x91\xe4\xbb\xac\xe5\x88\xa9\xe7\x94\xa8 `GlobalAveragePooling2D` \xe5\xb0\x86\xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\xe8\xbe\x93\xe5\x87\xba\xe7\x9a\x84\xe6\xaf\x8f\xe4\xb8\xaa\xe6\xbf\x80\xe6\xb4\xbb\xe5\x9b\xbe\xe7\x9b\xb4\xe6\x8e\xa5\xe6\xb1\x82\xe5\xb9\xb3\xe5\x9d\x87\xe5\x80\xbc\xef\xbc\x8c\xe4\xb8\x8d\xe7\x84\xb6\xe8\xbe\x93\xe5\x87\xba\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\xe4\xbc\x9a\xe9\x9d\x9e\xe5\xb8\xb8\xe5\xa4\xa7\xef\xbc\x8c\xe4\xb8\x94\xe5\xae\xb9\xe6\x98\x93\xe8\xbf\x87\xe6\x8b\x9f\xe5\x90\x88\xe3\x80\x82\xe7\x84\xb6\xe5\x90\x8e\xe6\x88\x91\xe4\xbb\xac\xe5\xae\x9a\xe4\xb9\x89\xe4\xba\x86\xe4\xb8\xa4\xe4\xb8\xaa generator\xef\xbc\x8c\xe5\x88\xa9\xe7\x94\xa8 `model.predict_generator` \xe5\x87\xbd\xe6\x95\xb0\xe6\x9d\xa5\xe5\xaf\xbc\xe5\x87\xba\xe7\x89\xb9\xe5\xbe\x81\xe5\x90\x91\xe9\x87\x8f\xef\xbc\x8c\xe6\x9c\x80\xe5\x90\x8e\xe6\x88\x91\xe4\xbb\xac\xe9\x80\x89\xe6\x8b\xa9\xe4\xba\x86 ResNet50, Xception, Inception V3 \xe8\xbf\x99\xe4\xb8\x89\xe4\xb8\xaa\xe6\xa8\xa1\xe5\x9e\x8b\xef\xbc\x88\xe5\xa6\x82\xe6\x9e\x9c\xe6\x9c\x89\xe5\x85\xb4\xe8\xb6\xa3\xe4\xb9\x9f\xe5\x8f\xaf\xe4\xbb\xa5\xe5\xaf\xbc\xe5\x87\xba VGG \xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\xe5\x90\x91\xe9\x87\x8f\xef\xbc\x89\xe3\x80\x82\xe6\xaf\x8f\xe4\xb8\xaa\xe6\xa8\xa1\xe5\x9e\x8b\xe5\xaf\xbc\xe5\x87\xba\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\xe9\x83\xbd\xe6\x8c\xba\xe9\x95\xbf\xe7\x9a\x84\xef\xbc\x8c\xe5\x9c\xa8 aws p2.xlarge \xe4\xb8\x8a\xe5\xa4\xa7\xe6\xa6\x82\xe9\x9c\x80\xe8\xa6\x81\xe7\x94\xa8**\xe5\x8d\x81\xe5\x88\x86\xe9\x92\x9f\xe5\x88\xb0\xe4\xba\x8c\xe5\x8d\x81\xe5\x88\x86\xe9\x92\x9f**\xe3\x80\x82 \xe8\xbf\x99\xe4\xb8\x89\xe4\xb8\xaa\xe6\xa8\xa1\xe5\x9e\x8b\xe9\x83\xbd\xe6\x98\xaf\xe5\x9c\xa8 [ImageNet](http://www.image-net.org/) \xe4\xb8\x8a\xe9\x9d\xa2\xe9\xa2\x84\xe8\xae\xad\xe7\xbb\x83\xe8\xbf\x87\xe7\x9a\x84\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe6\xa8\xa1\xe5\x9e\x8b\xe9\x83\xbd\xe5\x8f\xaf\xe4\xbb\xa5\xe8\xaf\xb4\xe6\x98\xaf\xe8\xba\xab\xe7\xbb\x8f\xe7\x99\xbe\xe6\x88\x98\xef\xbc\x8c\xe9\x80\x9a\xe8\xbf\x87\xe8\xbf\x99\xe4\xb8\x89\xe4\xb8\xaa\xe8\x80\x81\xe5\x8f\xb8\xe6\x9c\xba\xe5\xaf\xbc\xe5\x87\xba\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\xe5\x90\x91\xe9\x87\x8f\xef\xbc\x8c\xe5\x8f\xaf\xe4\xbb\xa5\xe9\xab\x98\xe5\xba\xa6\xe6\xa6\x82\xe6\x8b\xac\xe4\xb8\x80\xe5\xbc\xa0\xe5\x9b\xbe\xe7\x89\x87\xe6\x9c\x89\xe5\x93\xaa\xe4\xba\x9b\xe5\x86\x85\xe5\xae\xb9\xe3\x80\x82\n\n\xe6\x9c\x80\xe5\x90\x8e\xe5\xaf\xbc\xe5\x87\xba\xe7\x9a\x84 h5 \xe6\x96\x87\xe4\xbb\xb6\xe5\x8c\x85\xe6\x8b\xac\xe4\xb8\x89\xe4\xb8\xaa numpy \xe6\x95\xb0\xe7\xbb\x84\xef\xbc\x9a\n\n* train (25000, 2048)\n* test (12500, 2048)\n* label (25000,)\n\n\xe5\x8f\x82\xe8\x80\x83\xe8\xb5\x84\xe6\x96\x99\xef\xbc\x9a\n\n* [ResNet](https://arxiv.org/abs/1512.03385) 15.12\n* [Inception v3](https://arxiv.org/abs/1512.00567) 15.12\n* [Xception](https://arxiv.org/abs/1610.02357) 16.10\n\n# \xe8\xbd\xbd\xe5\x85\xa5\xe7\x89\xb9\xe5\xbe\x81\xe5\x90\x91\xe9\x87\x8f\n\n\xe7\xbb\x8f\xe8\xbf\x87\xe4\xb8\x8a\xe9\x9d\xa2\xe7\x9a\x84\xe4\xbb\xa3\xe7\xa0\x81\xe4\xbb\xa5\xe5\x90\x8e\xef\xbc\x8c\xe6\x88\x91\xe4\xbb\xac\xe8\x8e\xb7\xe5\xbe\x97\xe4\xba\x86\xe4\xb8\x89\xe4\xb8\xaa\xe7\x89\xb9\xe5\xbe\x81\xe5\x90\x91\xe9\x87\x8f\xe6\x96\x87\xe4\xbb\xb6\xef\xbc\x8c\xe5\x88\x86\xe5\x88\xab\xe6\x98\xaf\xef\xbc\x9a\n\n* gap_ResNet50.h5\n* gap_InceptionV3.h5\n* gap_Xception.h5\n\n\xe6\x88\x91\xe4\xbb\xac\xe9\x9c\x80\xe8\xa6\x81\xe8\xbd\xbd\xe5\x85\xa5\xe8\xbf\x99\xe4\xba\x9b\xe7\x89\xb9\xe5\xbe\x81\xe5\x90\x91\xe9\x87\x8f\xef\xbc\x8c\xe5\xb9\xb6\xe4\xb8\x94\xe5\xb0\x86\xe5\xae\x83\xe4\xbb\xac\xe5\x90\x88\xe6\x88\x90\xe4\xb8\x80\xe6\x9d\xa1\xe7\x89\xb9\xe5\xbe\x81\xe5\x90\x91\xe9\x87\x8f\xef\xbc\x8c\xe7\x84\xb6\xe5\x90\x8e\xe8\xae\xb0\xe5\xbe\x97\xe6\x8a\x8a X \xe5\x92\x8c y \xe6\x89\x93\xe4\xb9\xb1\xef\xbc\x8c\xe4\xb8\x8d\xe7\x84\xb6\xe4\xb9\x8b\xe5\x90\x8e\xe6\x88\x91\xe4\xbb\xac\xe8\xae\xbe\xe7\xbd\xae`validation_split`\xe7\x9a\x84\xe6\x97\xb6\xe5\x80\x99\xe4\xbc\x9a\xe5\x87\xba\xe9\x97\xae\xe9\xa2\x98\xe3\x80\x82\xe8\xbf\x99\xe9\x87\x8c\xe8\xae\xbe\xe7\xbd\xae\xe4\xba\x86 numpy \xe7\x9a\x84\xe9\x9a\x8f\xe6\x9c\xba\xe6\x95\xb0\xe7\xa7\x8d\xe5\xad\x90\xe4\xb8\xba2017\xef\xbc\x8c\xe8\xbf\x99\xe6\xa0\xb7\xe5\x8f\xaf\xe4\xbb\xa5\xe7\xa1\xae\xe4\xbf\x9d\xe6\xaf\x8f\xe4\xb8\xaa\xe4\xba\xba\xe8\xb7\x91\xe8\xbf\x99\xe4\xb8\xaa\xe4\xbb\xa3\xe7\xa0\x81\xef\xbc\x8c\xe8\xbe\x93\xe5\x87\xba\xe9\x83\xbd\xe8\x83\xbd\xe6\x98\xaf\xe4\xb8\x80\xe6\xa0\xb7\xe7\x9a\x84\xe7\xbb\x93\xe6\x9e\x9c\xe3\x80\x82\n\n```py\nimport h5py\nimport numpy as np\nfrom sklearn.utils import shuffle\nnp.random.seed(2017)\n\nX_train = []\nX_test = []\n\nfor filename in ["gap_ResNet50.h5", "gap_Xception.h5", "gap_InceptionV3.h5"]:\n    with h5py.File(filename, \'r\') as h:\n        X_train.append(np.array(h[\'train\']))\n        X_test.append(np.array(h[\'test\']))\n        y_train = np.array(h[\'label\'])\n\nX_train = np.concatenate(X_train, axis=1)\nX_test = np.concatenate(X_test, axis=1)\n\nX_train, y_train = shuffle(X_train, y_train)\n```\n\n# \xe6\x9e\x84\xe5\xbb\xba\xe6\xa8\xa1\xe5\x9e\x8b\n\n\xe6\xa8\xa1\xe5\x9e\x8b\xe7\x9a\x84\xe6\x9e\x84\xe5\xbb\xba\xe5\xbe\x88\xe7\xae\x80\xe5\x8d\x95\xef\xbc\x8c\xe7\x9b\xb4\xe6\x8e\xa5 dropout \xe7\x84\xb6\xe5\x90\x8e\xe5\x88\x86\xe7\xb1\xbb\xe5\xb0\xb1\xe5\xa5\xbd\xe4\xba\x86\xe3\x80\x82\n\n```py\nfrom keras.models import *\nfrom keras.layers import *\n\nnp.random.seed(2017)\n\ninput_tensor = Input(X_train.shape[1:])\nx = Dropout(0.5)(input_tensor)\nx = Dense(1, activation=\'sigmoid\')(x)\nmodel = Model(input_tensor, x)\n\nmodel.compile(optimizer=\'adadelta\',\n              loss=\'binary_crossentropy\',\n              metrics=[\'accuracy\'])\n```\n\n\xe6\x88\x91\xe4\xbb\xac\xe8\xbf\x98\xe5\x8f\xaf\xe4\xbb\xa5\xe5\xaf\xb9\xe6\xa8\xa1\xe5\x9e\x8b\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xef\xbc\x9a\n\n```dot\ndigraph G{\n    node [shape=record]\n    a[label="ResNet50|{input:|output:}|{(224, 224, 3)|(2048)}"]\n    b[label="InceptionV3|{input:|output:}|{(299, 299, 3)|(2048)}"]\n    c[label="Xception|{input:|output:}|{(299, 299, 3)|(2048)}"]\n    Merge[label="Merge|{input:|output:}|{(3, 2048)|(6144)}"]\n    Dropout[label="Dropout|Rate:|0.5"]\n    Output[label="Output|{input:|output:}|{(6144)|(1)}"]\n    Image -> a -> Merge\n    Image -> b -> Merge\n    Image -> c -> Merge\n    Merge -> Dropout -> Output\n}\n```\n\n![](https://raw.githubusercontent.com/ypwhs/resources/master/model.png)\n\n# \xe8\xae\xad\xe7\xbb\x83\xe6\xa8\xa1\xe5\x9e\x8b\n\n\xe6\xa8\xa1\xe5\x9e\x8b\xe6\x9e\x84\xe4\xbb\xb6\xe5\xa5\xbd\xe4\xba\x86\xe4\xbb\xa5\xe5\x90\x8e\xef\xbc\x8c\xe6\x88\x91\xe4\xbb\xac\xe5\xb0\xb1\xe5\x8f\xaf\xe4\xbb\xa5\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xae\xad\xe7\xbb\x83\xe4\xba\x86\xef\xbc\x8c\xe8\xbf\x99\xe9\x87\x8c\xe6\x88\x91\xe4\xbb\xac\xe8\xae\xbe\xe7\xbd\xae\xe9\xaa\x8c\xe8\xaf\x81\xe9\x9b\x86\xe5\xa4\xa7\xe5\xb0\x8f\xe4\xb8\xba 20% \xef\xbc\x8c\xe4\xb9\x9f\xe5\xb0\xb1\xe6\x98\xaf\xe8\xaf\xb4\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe6\x98\xaf20000\xe5\xbc\xa0\xe5\x9b\xbe\xef\xbc\x8c\xe9\xaa\x8c\xe8\xaf\x81\xe9\x9b\x86\xe6\x98\xaf5000\xe5\xbc\xa0\xe5\x9b\xbe\xe3\x80\x82\n\n```py\nmodel.fit(X_train, y_train, batch_size=128, nb_epoch=8, validation_split=0.2)\n```\n\n```\nTrain on 20000 samples, validate on 5000 samples\nEpoch 1/8\n20000/20000 [==============================] - 1s - loss: 0.1193 - acc: 0.9591 - val_loss: 0.0283 - val_acc: 0.9936\nEpoch 2/8\n20000/20000 [==============================] - 0s - loss: 0.0319 - acc: 0.9898 - val_loss: 0.0181 - val_acc: 0.9952\nEpoch 3/8\n20000/20000 [==============================] - 0s - loss: 0.0252 - acc: 0.9916 - val_loss: 0.0172 - val_acc: 0.9934\nEpoch 4/8\n20000/20000 [==============================] - 0s - loss: 0.0214 - acc: 0.9936 - val_loss: 0.0140 - val_acc: 0.9956\nEpoch 5/8\n20000/20000 [==============================] - 0s - loss: 0.0200 - acc: 0.9926 - val_loss: 0.0139 - val_acc: 0.9954\nEpoch 6/8\n20000/20000 [==============================] - 0s - loss: 0.0189 - acc: 0.9933 - val_loss: 0.0129 - val_acc: 0.9956\nEpoch 7/8\n20000/20000 [==============================] - 0s - loss: 0.0170 - acc: 0.9946 - val_loss: 0.0123 - val_acc: 0.9960\nEpoch 8/8\n20000/20000 [==============================] - 0s - loss: 0.0163 - acc: 0.9945 - val_loss: 0.0119 - val_acc: 0.9958\nOut[4]:\n\n```\n\n\xe6\x88\x91\xe4\xbb\xac\xe5\x8f\xaf\xe4\xbb\xa5\xe7\x9c\x8b\xe5\x88\xb0\xef\xbc\x8c\xe8\xae\xad\xe7\xbb\x83\xe7\x9a\x84\xe8\xbf\x87\xe7\xa8\x8b\xe5\xbe\x88\xe5\xbf\xab\xef\xbc\x8c\xe5\x8d\x81\xe7\xa7\x92\xe4\xbb\xa5\xe5\x86\x85\xe5\xb0\xb1\xe8\x83\xbd\xe8\xae\xad\xe7\xbb\x83\xe5\xae\x8c\xef\xbc\x8c\xe5\x87\x86\xe7\xa1\xae\xe7\x8e\x87\xe4\xb9\x9f\xe5\xbe\x88\xe9\xab\x98\xef\xbc\x8c\xe5\x9c\xa8\xe9\xaa\x8c\xe8\xaf\x81\xe9\x9b\x86\xe4\xb8\x8a\xe6\x9c\x80\xe9\xab\x98\xe8\xbe\xbe\xe5\x88\xb0\xe4\xba\x8699.6%\xe7\x9a\x84\xe5\x87\x86\xe7\xa1\xae\xe7\x8e\x87\xef\xbc\x8c\xe8\xbf\x99\xe7\x9b\xb8\xe5\xbd\x93\xe4\xba\x8e\xe4\xb8\x80\xe5\x8d\x83\xe5\xbc\xa0\xe5\x9b\xbe\xe5\x8f\xaa\xe9\x94\x99\xe4\xba\x864\xe5\xbc\xa0\xef\xbc\x8c\xe5\x8f\xaf\xe4\xbb\xa5\xe8\xaf\xb4\xe6\xaf\x94\xe6\x88\x91\xe8\xbf\x98\xe5\x8e\x89\xe5\xae\xb3\xe3\x80\x82\n\n# \xe9\xa2\x84\xe6\xb5\x8b\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\n\n\xe6\xa8\xa1\xe5\x9e\x8b\xe8\xae\xad\xe7\xbb\x83\xe5\xa5\xbd\xe4\xbb\xa5\xe5\x90\x8e\xef\xbc\x8c\xe6\x88\x91\xe4\xbb\xac\xe5\xb0\xb1\xe5\x8f\xaf\xe4\xbb\xa5\xe5\xaf\xb9\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xe8\xbf\x9b\xe8\xa1\x8c\xe9\xa2\x84\xe6\xb5\x8b\xef\xbc\x8c\xe7\x84\xb6\xe5\x90\x8e\xe6\x8f\x90\xe4\xba\xa4\xe5\x88\xb0 kaggle \xe4\xb8\x8a\xe7\x9c\x8b\xe7\x9c\x8b\xe6\x9c\x80\xe7\xbb\x88\xe6\x88\x90\xe7\xbb\xa9\xe4\xba\x86\xe3\x80\x82\n\n```py\ny_pred = model.predict(X_test, verbose=1)\ny_pred = y_pred.clip(min=0.005, max=0.995)\n\nimport pandas as pd\nfrom keras.preprocessing.image import *\n\ndf = pd.read_csv("sample_submission.csv")\n\ngen = ImageDataGenerator()\ntest_generator = gen.flow_from_directory("test2", (224, 224), shuffle=False, \n                                         batch_size=16, class_mode=None)\n\nfor i, fname in enumerate(test_generator.filenames):\n    index = int(fname[fname.rfind(\'/\')+1:fname.rfind(\'.\')])\n    df.set_value(index-1, \'label\', y_pred[i])\n\ndf.to_csv(\'pred.csv\', index=None)\ndf.head(10)\n```\n\n\xe9\xa2\x84\xe6\xb5\x8b\xe8\xbf\x99\xe9\x87\x8c\xe6\x88\x91\xe4\xbb\xac\xe7\x94\xa8\xe5\x88\xb0\xe4\xba\x86\xe4\xb8\x80\xe4\xb8\xaa\xe5\xb0\x8f\xe6\x8a\x80\xe5\xb7\xa7\xef\xbc\x8c\xe6\x88\x91\xe4\xbb\xac\xe5\xb0\x86\xe6\xaf\x8f\xe4\xb8\xaa\xe9\xa2\x84\xe6\xb5\x8b\xe5\x80\xbc\xe9\x99\x90\xe5\x88\xb6\xe5\x88\xb0\xe4\xba\x86 [0.005, 0.995] \xe4\xb8\xaa\xe5\x8c\xba\xe9\x97\xb4\xe5\x86\x85\xef\xbc\x8c\xe8\xbf\x99\xe4\xb8\xaa\xe5\x8e\x9f\xe5\x9b\xa0\xe5\xbe\x88\xe7\xae\x80\xe5\x8d\x95\xef\xbc\x8ckaggle \xe5\xae\x98\xe6\x96\xb9\xe7\x9a\x84\xe8\xaf\x84\xe4\xbc\xb0\xe6\xa0\x87\xe5\x87\x86\xe6\x98\xaf [LogLoss](https://www.kaggle.com/c/dogs-vs-cats-redux-kernels-edition/details/evaluation)\xef\xbc\x8c\xe5\xaf\xb9\xe4\xba\x8e\xe9\xa2\x84\xe6\xb5\x8b\xe6\xad\xa3\xe7\xa1\xae\xe7\x9a\x84\xe6\xa0\xb7\xe6\x9c\xac\xef\xbc\x8c0.995 \xe5\x92\x8c 1 \xe7\x9b\xb8\xe5\xb7\xae\xe6\x97\xa0\xe5\x87\xa0\xef\xbc\x8c\xe4\xbd\x86\xe6\x98\xaf\xe5\xaf\xb9\xe4\xba\x8e\xe9\xa2\x84\xe6\xb5\x8b\xe9\x94\x99\xe8\xaf\xaf\xe7\x9a\x84\xe6\xa0\xb7\xe6\x9c\xac\xef\xbc\x8c0 \xe5\x92\x8c 0.005 \xe7\x9a\x84\xe5\xb7\xae\xe8\xb7\x9d\xe9\x9d\x9e\xe5\xb8\xb8\xe5\xa4\xa7\xef\xbc\x8c\xe6\x98\xaf 15 \xe5\x92\x8c 2 \xe7\x9a\x84\xe5\xb7\xae\xe5\x88\xab\xe3\x80\x82\xe5\x8f\x82\xe8\x80\x83 [LogLoss \xe5\xa6\x82\xe4\xbd\x95\xe5\xa4\x84\xe7\x90\x86\xe6\x97\xa0\xe7\xa9\xb7\xe5\xa4\xa7\xe9\x97\xae\xe9\xa2\x98](https://www.kaggle.com/wiki/LogLoss)\xef\xbc\x8c\xe4\xb8\x8b\xe9\x9d\xa2\xe7\x9a\x84\xe8\xa1\xa8\xe8\xbe\xbe\xe5\xbc\x8f\xe5\xb0\xb1\xe6\x98\xaf\xe4\xba\x8c\xe5\x88\x86\xe7\xb1\xbb\xe9\x97\xae\xe9\xa2\x98\xe7\x9a\x84 LogLoss \xe5\xae\x9a\xe4\xb9\x89\xe3\x80\x82\n\n$$\\textrm{LogLoss} = - \\frac{1}{n} \\sum_{i=1}^n \\left[ y_i \\log(\\hat{y}_i) + (1 - y_i) \\log(1 - \\hat{y}_i)\\right]$$\n\n![](https://raw.githubusercontent.com/ypwhs/resources/master/logloss.png)\n\n\xe8\xbf\x98\xe6\x9c\x89\xe4\xb8\x80\xe4\xb8\xaa\xe5\x80\xbc\xe5\xbe\x97\xe4\xb8\x80\xe6\x8f\x90\xe7\x9a\x84\xe5\x9c\xb0\xe6\x96\xb9\xe5\xb0\xb1\xe6\x98\xaf\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8d\xe4\xb8\x8d\xe6\x98\xaf\xe6\x8c\x89 1, 2, 3 \xe8\xbf\x99\xe6\xa0\xb7\xe6\x8e\x92\xe7\x9a\x84\xef\xbc\x8c\xe8\x80\x8c\xe6\x98\xaf\xe6\x8c\x89\xe4\xb8\x8b\xe9\x9d\xa2\xe7\x9a\x84\xe9\xa1\xba\xe5\xba\x8f\xe6\x8e\x92\xe5\x88\x97\xe7\x9a\x84\xef\xbc\x9a\n\n```\n[\'test/1.jpg\',\n \'test/10.jpg\',\n \'test/100.jpg\',\n \'test/1000.jpg\',\n \'test/10000.jpg\',\n \'test/10001.jpg\',\n \'test/10002.jpg\',\n \'test/10003.jpg\',\n ......\n```\n\n\xe5\x9b\xa0\xe6\xad\xa4\xe6\x88\x91\xe4\xbb\xac\xe9\x9c\x80\xe8\xa6\x81\xe5\xaf\xb9\xe6\xaf\x8f\xe4\xb8\xaa\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8d\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xa4\x84\xe7\x90\x86\xef\xbc\x8c\xe7\x84\xb6\xe5\x90\x8e\xe8\xb5\x8b\xe5\x80\xbc\xe5\x88\xb0 df \xe9\x87\x8c\xef\xbc\x8c\xe6\x9c\x80\xe5\x90\x8e\xe5\xaf\xbc\xe5\x87\xba\xe4\xb8\xba csv \xe6\x96\x87\xe4\xbb\xb6\xe3\x80\x82\n\n```\n\tid\tlabel\n0\t1\t0.995\n1\t2\t0.995\n2\t3\t0.995\n3\t4\t0.995\n4\t5\t0.005\n5\t6\t0.005\n6\t7\t0.005\n7\t8\t0.005\n8\t9\t0.005\n9\t10\t0.005\n```\n\n# \xe6\x80\xbb\xe7\xbb\x93\n\n\xe6\x88\x91\xe4\xbb\xac\xe5\x8f\xaf\xe4\xbb\xa5\xe4\xbb\x8e\xe4\xb8\x8a\xe5\x9b\xbe\xe4\xb8\xad\xe7\x9c\x8b\xe5\x88\xb0\xef\xbc\x8c\xe6\xa8\xa1\xe5\x9e\x8b\xe5\xaf\xb9\xe4\xba\x8e\xe5\x89\x8d\xe5\x8d\x81\xe4\xb8\xaa\xe6\xa0\xb7\xe6\x9c\xac\xe9\x83\xbd\xe7\xbb\x99\xe5\x87\xba\xe4\xba\x86\xe5\xbe\x88\xe8\x82\xaf\xe5\xae\x9a\xe7\x9a\x84\xe9\xa2\x84\xe6\xb5\x8b\xef\xbc\x8c\xe6\x8f\x90\xe4\xba\xa4\xe5\x88\xb0 kaggle \xe4\xbb\xa5\xe5\x90\x8e\xef\xbc\x8c\xe5\xbe\x97\xe5\x88\x86\xe4\xb9\x9f\xe6\x98\xaf\xe5\xbe\x88\xe6\xa3\x92\xef\xbc\x8c0.04141\xef\xbc\x8c\xe5\x9c\xa8\xe5\x85\xa8\xe7\x90\x83\xe6\x8e\x92\xe5\x90\x8d\xe4\xb8\xad\xe5\x8f\xaf\xe4\xbb\xa5\xe6\x8e\x92\xe5\x88\xb020/1314\xe3\x80\x82\xe6\x88\x91\xe4\xbb\xac\xe5\xa6\x82\xe6\x9e\x9c\xe8\xa6\x81\xe7\xbb\xa7\xe7\xbb\xad\xe4\xbc\x98\xe5\x8c\x96\xe6\xa8\xa1\xe5\x9e\x8b\xe8\xa1\xa8\xe7\x8e\xb0\xef\xbc\x8c\xe5\x8f\xaf\xe4\xbb\xa5\xe4\xbd\xbf\xe7\x94\xa8\xe6\x9b\xb4\xe6\xa3\x92\xe7\x9a\x84\xe9\xa2\x84\xe8\xae\xad\xe7\xbb\x83\xe6\xa8\xa1\xe5\x9e\x8b\xe6\x9d\xa5\xe5\xaf\xbc\xe5\x87\xba\xe7\x89\xb9\xe5\xbe\x81\xe5\x90\x91\xe9\x87\x8f\xef\xbc\x8c\xe6\x88\x96\xe8\x80\x85\xe5\xaf\xb9\xe9\xa2\x84\xe8\xae\xad\xe7\xbb\x83\xe6\xa8\xa1\xe5\x9e\x8b\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xbe\xae\xe8\xb0\x83\xef\xbc\x88fine-tune\xef\xbc\x89\xef\xbc\x8c\xe6\x88\x96\xe8\x80\x85\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x95\xb0\xe6\x8d\xae\xe5\xa2\x9e\xe5\xbc\xba\xef\xbc\x88data augmentation\xef\xbc\x89\xe7\xad\x89\xe3\x80\x82\n\n\xe5\x8f\x82\xe8\x80\x83\xe9\x93\xbe\xe6\x8e\xa5\xef\xbc\x9a[\xe9\x9d\xa2\xe5\x90\x91\xe5\xb0\x8f\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\xe6\x9e\x84\xe5\xbb\xba\xe5\x9b\xbe\xe5\x83\x8f\xe5\x88\x86\xe7\xb1\xbb\xe6\xa8\xa1\xe5\x9e\x8b](https://keras-cn-docs.readthedocs.io/zh_CN/latest/blog/image_classification_using_very_little_data/)\n'