b'# EventFlow\n\n<table border="0" cellpadding="0" cellspacing="0">\n  <tr>\n    <td width="25%">\n      <img src="./icon-128.png" />\n    </td>\n    <td  width="25%">\n      <p>\n        <a href="https://gitter.im/rasmus/EventFlow?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge"><img src="https://badges.gitter.im/Join%20Chat.svg" /></a>\n      </p>\n      <p>\n        <a href="https://www.nuget.org/packages/EventFlow/"><img src="https://img.shields.io/nuget/v/EventFlow.svg?style=flat" /></a>\n      </p>\n      <p>\n        <a href="https://docs.geteventflow.net/?badge=latest"><img src="https://readthedocs.org/projects/eventflow/badge/?version=latest" /></a>\n      </p>\n    </td>\n    <td  width="25%">\n      <p>\n        <a href="https://ci.appveyor.com/project/eventflow/eventflow"><img src="https://ci.appveyor.com/api/projects/status/51yvhvbd909e4o82/branch/develop?svg=true" /></a>\n      </p>\n      <p>\n        <a href="https://codecov.io/github/eventflow/EventFlow?branch=develop"><img src="https://codecov.io/github/eventflow/EventFlow/coverage.svg?branch=develop" /></a>\n      </p>\n    </td>\n    <td  width="25%">\n      Think EventFlow is great,<br/>\n      <a href="https://www.paypal.me/rasmusnu">buy me a cup of coffee</a>\n    </td>\n  </tr>\n</table>\n\nNuGet feeds\n- Official releases: https://www.nuget.org/packages/EventFlow/\n- Builds: https://ci.appveyor.com/nuget/eventflow\n\nEventFlow is a basic CQRS+ES framework designed to be easy to use.\n\nHave a look at our [getting started guide](https://docs.geteventflow.net/GettingStarted.html),\nthe [do\xe2\x80\x99s and don\xe2\x80\x99ts](https://docs.geteventflow.net/DosAndDonts.html) and the\n[FAQ](https://docs.geteventflow.net/FAQ.html).\n\n### Features\n\n* **CQRS+ES framework**\n* **Async/await first:** Every part of EventFlow is written using async/await.\n* **Highly configurable and extendable**\n* **Easy to use**\n* **No use of threads or background workers**\n* **Cancellation:** All methods that does IO work or might delay execution (due to\n  retries), takes a `CancellationToken` argument to allow you to cancel the operation\n\n### Examples\n\n* **[Complete](#complete-example):** Shows a complete example on how to use\n  EventFlow with in-memory event store and read models in a relatively few lines\n  of code\n* **Shipping:** To get a more complete example of how EventFlow _could_ be used,\n  have a look at the shipping example found here in the code base. The example\n  is based on the shipping example from the book "Domain-Driven Design -\n  Tackling Complexity in the Heart of Software" by Eric Evans. Its\n  _in-progress_, but should provide inspiration on how to use EventFlow on a\n  larger scale. If you have ideas and/or comments, create a pull request or\n  an issue\n  \n#### External Examples\n\n * **[Racetimes:](https://github.com/dennisfabri/Eventflow.Example.Racetimes)**\n   Shows some features of EventFlow that are not covered in the \n   [complete example](#complete-example). It features entities, a read model for \n   an entity, delete on read models, specifications and snapshots.\n\n * **[.NET Core:](https://github.com/johnny-chan/EventFlowDemo)**\n\tA Web API running .NET Core 2.2 using the event flow. It uses the pre-defined \n\tcommand/entities/events from the [complete example](#complete-example). There are endpoints to \n\tcreate a new example event, getting a data model and to replay all data models.\n\t\n* **[ElasticSearch/.NET Core:](https://github.com/DureSameen/EventFlowWithElasticSearch)**\n\tIt is configured with EventFlow, ElasticSearch, EventStore, and RabbitMq. See "withRabbitMq" branch for #384.\n\n * **[Vehicle Tracking:](https://github.com/MongkonEiadon/VehicleTracker)**\n\tA Microservice on .NET Core 2.2 with docker based, you can up the service with docker-compose, this project using various\n  tools to up the services aka. Linux Docker based on .NET Core, RabbitMq, EntityFramework with SQL Server and using EventFlow following CQRS-ES architecture\n  and all microservice can access through ApiGateway which using Ocelot\n\n  * **[RestAirline:](https://github.com/twzhangyang/RestAirline)**\n\tA classic DDD with CQRS-ES, Hypermedia API project based on EventFlow. It\'s targeted to ASP.NET Core 2.2 and can be deployed to docker and k8s.\n\t\n### Overview\n\nHere is a list of the EventFlow concepts. Use the links to navigate\nto the documentation.\n\n* [**Aggregates:**](https://docs.geteventflow.net/Aggregates.html)\n  Domains object that guarantees the consistency of changes being made within\n  each aggregate\n* [**Command bus and commands:**](https://docs.geteventflow.net/Commands.html)\n  Entry point for all command/operation execution.\n* [**Event store:**](https://docs.geteventflow.net/EventStore.html)\n  Storage of the event stream for aggregates. Currently there is support for\n  these storage types.\n  * In-memory - only for test\n  * Files - only for test\n  * Microsoft SQL Server\n  * Entity Framework Core\n  * SQLite\n  * PostgreSQL\n  * EventStore - [home page](https://eventstore.org/)\n* [**Subscribers:**](https://docs.geteventflow.net/Subscribers.html)\n  Listeners that act on specific domain events. Useful if an specific action\n  needs to be triggered after a domain event has been committed.\n* [**Read models:**](https://docs.geteventflow.net/ReadStores.html)\n  Denormalized representation of aggregate events optimized for reading fast.\n  Currently there is support for these read model storage types.\n  * [Elasticsearch](https://docs.geteventflow.net/ReadStores.html#elasticsearch)\n  * [In-memory](https//docs.geteventflow.net/ReadStores.html#in-memory) - only for test\n  * [Microsoft SQL Server](https://docs.geteventflow.net/ReadStores.html#microsoft-sql-server)\n  * Entity Framework Core\n  * SQLite\n  * PostgreSQL\n* [**Snapshots:**](https://docs.geteventflow.net/Snapshots.html)\n  Instead of reading the entire event stream every single time, a snapshot can\n  be created every so often that contains the aggregate state. EventFlow\n  supports upgrading existing snapshots, which is useful for long-lived\n  aggregates. Snapshots in EventFlow are opt-in and EventFlow has support for\n  * [In-memory](https://docs.geteventflow.net/Snapshots.html#in-memory) - only for test\n  * [Microsoft SQL Server](https://docs.geteventflow.net/Snapshots.html#microsoft-sql-server)  \n  * Entity Framework Core\n  * SQLite\n  * PostgreSQL\n* [**Sagas:**](https://docs.geteventflow.net/Sagas.html)\n  Also known as _process managers_, coordinates and routes messages between\n  bounded contexts and aggregates\n* [**Queries:**](https://docs.geteventflow.net/Queries.html)\n  Value objects that represent a query without specifying how its executed,\n  that is let to a query handler\n* [**Jobs:**](https://docs.geteventflow.net/Jobs.html) Perform scheduled tasks at\n  a later time, e.g. publish a command. EventFlow provides support for these\n  job schedulers\n  * [Hangfire](https://docs.geteventflow.net/Jobs.html#hangfire) - [home page](https://hangfire.io/)\n* [**Event upgrade:**](https://docs.geteventflow.net/EventUpgrade.html)\n  As events committed to the event store is never changed, EventFlow uses the\n  concept of event upgraders to deprecate events and replace them with new\n  during aggregate load.\n* **Event publishing:** Sometimes you want other applications or services to\n  consume and act on domains. For this EventFlow supports event publishing.\n  * [RabbitMQ](https://docs.geteventflow.net/Subscribers.html#rabbitmq)\n* [**Metadata:**](https://docs.geteventflow.net/Metadata.html)\n  Additional information for each aggregate event, e.g. the IP of\n  the user behind the event being emitted. EventFlow ships with\n  several providers ready to use used.\n* [**Value objects:**](https://docs.geteventflow.net/ValueObjects.html)\n  Data containing classes used to validate and hold domain data, e.g. a\n  username or e-mail.\n* [**Customize:**](https://docs.geteventflow.net/Customize.html) Almost every\n  single part of EventFlow can be swapped with a custom implementation through\n  the embedded IoC container.\n\n## Complete example\nHere\'s a complete example on how to use the default in-memory event store\nalong with an in-memory read model.\n\nThe example consists of the following classes, each shown below\n\n- `ExampleAggregate`: The aggregate root\n- `ExampleId`: Value object representing the identity of the aggregate root\n- `ExampleEvent`: Event emitted by the aggregate root\n- `ExampleCommand`: Value object defining a command that can be published to the\n  aggregate root\n- `ExampleCommandHandler`: Command handler which EventFlow resolves using its IoC\n  container and defines how the command specific is applied to the aggregate root\n- `ExampleReadModel`: In-memory read model providing easy access to the current\n  state\n\n**Note:** This example is part of the EventFlow test suite, so checkout the\ncode and give it a go.\n\n```csharp\n[Test]\npublic async Task Example()\n{\n  // We wire up EventFlow with all of our classes. Instead of adding events,\n  // commands, etc. explicitly, we could have used the the simpler\n  // AddDefaults(Assembly) instead.\n  using (var resolver = EventFlowOptions.New\n    .AddEvents(typeof(ExampleEvent))\n    .AddCommands(typeof(ExampleCommand))\n    .AddCommandHandlers(typeof(ExampleCommandHandler))\n    .UseInMemoryReadStoreFor<ExampleReadModel>()\n    .CreateResolver())\n  {\n    // Create a new identity for our aggregate root\n    var exampleId = ExampleId.New;\n\n    // Resolve the command bus and use it to publish a command\n    var commandBus = resolver.Resolve<ICommandBus>();\n    await commandBus.PublishAsync(\n      new ExampleCommand(exampleId, 42), CancellationToken.None)\n      .ConfigureAwait(false);\n\n    // Resolve the query handler and use the built-in query for fetching\n    // read models by identity to get our read model representing the\n    // state of our aggregate root\n    var queryProcessor = resolver.Resolve<IQueryProcessor>();\n    var exampleReadModel = await queryProcessor.ProcessAsync(\n      new ReadModelByIdQuery<ExampleReadModel>(exampleId), CancellationToken.None)\n      .ConfigureAwait(false);\n\n    // Verify that the read model has the expected magic number\n    exampleReadModel.MagicNumber.Should().Be(42);\n  }\n}\n```\n\n```csharp\n// The aggregate root\npublic class ExampleAggregate : AggregateRoot<ExampleAggregate, ExampleId>,\n  IEmit<ExampleEvent>\n{\n  private int? _magicNumber;\n\n  public ExampleAggregate(ExampleId id) : base(id) { }\n\n  // Method invoked by our command\n  public void SetMagicNumber(int magicNumber)\n  {\n    if (_magicNumber.HasValue)\n      throw DomainError.With("Magic number already set");\n\n    Emit(new ExampleEvent(magicNumber));\n  }\n\n  // We apply the event as part of the event sourcing system. EventFlow\n  // provides several different methods for doing this, e.g. state objects,\n  // the Apply method is merely the simplest\n  public void Apply(ExampleEvent aggregateEvent)\n  {\n    _magicNumber = aggregateEvent.MagicNumber;\n  }\n}\n```\n\n```csharp\n// Represents the aggregate identity (ID)\npublic class ExampleId : Identity<ExampleId>\n{\n  public ExampleId(string value) : base(value) { }\n}\n```\n\n```csharp\n// A basic event containing some information\npublic class ExampleEvent : AggregateEvent<ExampleAggregate, ExampleId>\n{\n  public ExampleEvent(int magicNumber)\n  {\n      MagicNumber = magicNumber;\n  }\n\n  public int MagicNumber { get; }\n}\n```\n\n```csharp\n// Command for update magic number\npublic class ExampleCommand : Command<ExampleAggregate, ExampleId>\n{\n  public ExampleCommand(\n    ExampleId aggregateId,\n    int magicNumber)\n    : base(aggregateId)\n  {\n    MagicNumber = magicNumber;\n  }\n\n  public int MagicNumber { get; }\n}\n```\n\n```csharp\n// Command handler for our command\npublic class ExampleCommandHandler\n  : CommandHandler<ExampleAggregate, ExampleId, ExampleCommand>\n{\n  public override Task ExecuteAsync(\n    ExampleAggregate aggregate,\n    ExampleCommand command,\n    CancellationToken cancellationToken)\n  {\n    aggregate.SetMagicNumber(command.MagicNumber);\n    return Task.FromResult(0);\n  }\n}\n```\n\n```csharp\n// Read model for our aggregate\npublic class ExampleReadModel : IReadModel,\n  IAmReadModelFor<ExampleAggregate, ExampleId, ExampleEvent>\n{\n  public int MagicNumber { get; private set; }\n\n  public void Apply(\n    IReadModelContext context,\n    IDomainEvent<ExampleAggregate, ExampleId, ExampleEvent> domainEvent)\n  {\n    MagicNumber = domainEvent.AggregateEvent.MagicNumber;\n  }\n}\n```\n\n\n## State of EventFlow\n\nEventFlow is still under development, especially the parts regarding\nhow read models are re-populated.\n\nEventFlow  _is_ currently used in production environments and performs very well,\nbut it needs to mature before key APIs are stable.\n\nEventFlow is greatly opinionated, but it\'s possible to create new implementations\nfor almost every part of EventFlow by registering a different implementation of\nan interface.\n\n## Useful articles related to EventFlow and DDD\n\nMany of the technical design decisions in EventFlow is based on articles. This\nsection lists some of them. If you have a link with a relevant article, please\nshare it by creating an issue with the link.\n\n* **Domain-Driven Design**\n  * [Domain-Driven Design Reference](https://domainlanguage.com/ddd/reference/)\n    by Eric Evans\n  * [DDD Decoded - Bounded Contexts Explained](https://blog.sapiensworks.com/post/2016/08/12/DDD-Bounded-Contexts-Explained)\n  * [Going "Events-First" for Microservices with Event Storming and DDD](http://www.russmiles.com/essais/going-events-first-for-microservices-with-event-storming-and-ddd)\n* **General CQRS+ES**\n  * [CQRS Journey by Microsoft](https://msdn.microsoft.com/en-us/library/jj554200.aspx)\n    published by Microsoft\n  * [An In-Depth Look At CQRS](https://blog.sapiensworks.com/post/2015/09/01/In-Depth-CQRS/)\n    by Mike Mogosanu\n  * [CQRS, Task Based UIs, Event Sourcing agh!](http://codebetter.com/gregyoung/2010/02/16/cqrs-task-based-uis-event-sourcing-agh/)\n    by Greg Young\n  * [Busting some CQRS myths](https://lostechies.com/jimmybogard/2012/08/22/busting-some-cqrs-myths/)\n    by Jimmy Bogard\n  * [CQRS applied](https://lostechies.com/gabrielschenker/2015/04/12/cqrs-applied/)\n    by Gabriel Schenker\n  * [DDD Decoded - Entities and Value Objects Explained](https://blog.sapiensworks.com/post/2016/07/29/DDD-Entities-Value-Objects-Explained)\n* **Eventual consistency**\n  * [How To Ensure Idempotency In An Eventual Consistent DDD/CQRS Application](https://blog.sapiensworks.com/post/2015/08/26/How-To-Ensure-Idempotency)\n   by Mike Mogosanu\n  * [DDD Decoded - Don\'t Fear Eventual Consistency](https://blog.sapiensworks.com/post/2016/07/23/DDD-Eventual-Consistency)\n* **Why _not_ to implement "unit of work" in DDD**\n  * [Unit Of Work is the new Singleton](https://blog.sapiensworks.com/post/2014/06/04/Unit-Of-Work-is-the-new-Singleton.aspx)\n    by Mike Mogosanu\n  * [The Unit of Work and Transactions In Domain-Driven Design](https://blog.sapiensworks.com/post/2015/09/02/DDD-and-UoW/)\n    by Mike Mogosanu\n\n\n### Integration tests\nEventFlow has several tests that verify that its ability to use the systems it\nintegrates with correctly.\n\n * **Elasticsearch:** [Elasticsearch](https://www.elastic.co/) run as Docker [Windows Container](https://docs.microsoft.com//virtualization/windowscontainers/about/). if use in local, requires its environment and `docker-compose` tool, and execute `PS> up_integration-test-env.ps1`\n * **EventStore:** [EventStore](https://geteventstore.com/) is same as the above\n * **RabbitMQ:** [RabbitMQ](https://www.rabbitmq.com/) is same as the above\n * **MSSQL:** Microsoft SQL Server is required to be running\n * **RabbitMQ:** Set an environment variable named `RABBITMQ_URL` with the URL\n   for the [RabbitMQ](https://www.rabbitmq.com/) instance you would like to use.\n * **EntityFramework:** Microsoft SQL Server and PostgreSQL is required to be running\n * **PostgreSQL:** PostgreSQL is required to be running\n\nThere\'s a Vagrant box with both Elasticsearch and RabbitMQ you can use\n[here](https://github.com/rasmus/Vagrant.Boxes).\n\nAlternatively, you can skip the NUnit tests marked with the `integration`\ncategory.\n\n## Thanks\n\n<table border="0" cellpadding="0" cellspacing="0">\n  <tr>\n    <td width="25%">\n      <a href="https://www.jetbrains.com/"><img src="./Resources/jetbrains-128x128.png" /></a>\n    </td>\n  </tr>\n</table>\n\n* [Contributors](https://github.com/eventflow/EventFlow/graphs/contributors)\n* [JetBrains](https://www.jetbrains.com/resharper/): OSS licenses\n* [olholm](https://github.com/olholm): Current logo\n* [iconmonstr](https://iconmonstr.com/network-6-icon/): First logo\n* [JC008](https://github.com/JC008): License for Navicat Essentials for SQLite\n\n## License\n\n```\nThe MIT License (MIT)\n\nCopyright (c) 2015-2019 Rasmus Mikkelsen\nCopyright (c) 2015-2019 eBay Software Foundation\nhttps://github.com/eventflow/EventFlow\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the "Software"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n```\n'