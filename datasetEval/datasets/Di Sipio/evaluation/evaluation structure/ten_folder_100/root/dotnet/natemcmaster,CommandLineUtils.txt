b'CommandLineUtils\n================\n\n[![Build Status](https://dev.azure.com/natemcmaster/github/_apis/build/status/CommandLineUtils?branchName=master)](https://dev.azure.com/natemcmaster/github/_build/latest?definitionId=3&branchName=master)\n\n[![NuGet][nuget-badge] ![NuGet Downloads][nuget-download-badge]][nuget]\n\n[nuget]: https://www.nuget.org/packages/McMaster.Extensions.CommandLineUtils/\n[nuget-badge]: https://img.shields.io/nuget/v/McMaster.Extensions.CommandLineUtils.svg?style=flat-square\n[nuget-download-badge]: https://img.shields.io/nuget/dt/McMaster.Extensions.CommandLineUtils?style=flat-square\n\n\nThis is a fork of [Microsoft.Extensions.CommandLineUtils](https://github.com/aspnet/Common), which is no longer under [active development](https://github.com/aspnet/Common/issues/257). This fork, on the other hand, will continue to make improvements, release updates and take contributions.\n\nThe roadmap for this project can be found [here](https://github.com/natemcmaster/CommandLineUtils/issues/206).\n\n## Install\n\nInstall the [NuGet package][nuget] into your project.\n\n```\nPM> Install-Package McMaster.Extensions.CommandLineUtils\n```\n```\n$ dotnet add package McMaster.Extensions.CommandLineUtils\n```\n\n## Usage\n\nSee [documentation](https://natemcmaster.github.io/CommandLineUtils/) for API reference, samples, and tutorials.\nSee [samples/](./docs/samples/) for more examples, such as:\n\n - [Async console apps](./docs/samples/helloworld-async/)\n - [Structuring an app with subcommands](./docs/samples/subcommands/)\n - [Defining options with attributes](./docs/samples/attributes/)\n - [Interactive console prompts](./docs/samples/interactive-prompts/)\n - [Required options and arguments](./docs/samples/validation/)\n\n`CommandLineApplication` is the main entry point for most console apps parsing. There are two primary ways to use this API, using the builder pattern and attributes.\n\n### Attribute API\n\n```c#\nusing System;\nusing McMaster.Extensions.CommandLineUtils;\n\npublic class Program\n{\n    public static int Main(string[] args)\n        => CommandLineApplication.Execute<Program>(args);\n\n    [Option(Description = "The subject")]\n    public string Subject { get; }\n\n    [Option(ShortName = "n")]\n    public int Count { get; }\n\n    private void OnExecute()\n    {\n        var subject = Subject ?? "world";\n        for (var i = 0; i < Count; i++)\n        {\n            Console.WriteLine($"Hello {subject}!");\n        }\n    }\n}\n```\n\n### Builder API\n\n\n```c#\nusing System;\nusing McMaster.Extensions.CommandLineUtils;\n\npublic class Program\n{\n    public static int Main(string[] args)\n    {\n        var app = new CommandLineApplication();\n\n        app.HelpOption();\n        var optionSubject = app.Option("-s|--subject <SUBJECT>", "The subject", CommandOptionType.SingleValue);\n        var optionRepeat = app.Option<int>("-n|--count <N>", "Repeat", CommandOptionType.SingleValue);\n\n        app.OnExecute(() =>\n        {\n            var subject = optionSubject.HasValue()\n                ? optionSubject.Value()\n                : "world";\n\n            var count = optionRepeat.HasValue() ? optionRepeat.ParsedValue : 1;\n            for (var i = 0; i < count; i++)\n            {\n                Console.WriteLine($"Hello {subject}!");\n            }\n            return 0;\n        });\n\n        return app.Execute(args);\n    }\n}\n\n```\n\n### Utilities\n\nThe library also includes other utilities for interaction with the console. These include:\n\n- `ArgumentEscaper` - use to escape arguments when starting a new command line process.\n    ```c#\n     var args = new [] { "Arg1", "arg with space", "args \' with \\" quotes" };\n     Process.Start("echo", ArgumentEscaper.EscapeAndConcatenate(args));\n    ```\n - `Prompt` - for getting feedback from users. A few examples:\n    ```c#\n    // allows y/n responses\n    Prompt.GetYesNo("Do you want to proceed?");\n\n    // masks input as \'*\'\n    Prompt.GetPassword("Password: ");\n    ```\n - `DotNetExe` - finds the path to the dotnet.exe file used to start a .NET Core process\n    ```c#\n    Process.Start(DotNetExe.FullPathOrDefault(), "run");\n    ```\n\nAnd more! See the [documentation](https://natemcmaster.github.io/CommandLineUtils/) for more API, such as `IConsole`, `IReporter`, and others.\n'