b'<p align="center">\n  <img src="https://s3.eu-west-2.amazonaws.com/dependabot-images/logo-with-name-horizontal.svg?v5" alt="Dependabot" width="336">\n</p>\n\n# Dependabot Core [![Dependabot Status][dependabot-status]][dependabot]\n\nDependabot Core is the heart of [Dependabot][dependabot]. It handles the logic\nfor updating dependencies on GitHub (including GitHub Enterprise), GitLab and\nAzure DevOps.\n\nIf you want to host your own automated dependency update bot then this repo\nshould give you the tools you need. A reference implementation is available\n[here][dependabot-script].\n\n## What\'s in this repo?\n\nDependabot Core is a collection of packages for automating dependency updating\nin Ruby, JavaScript, Python, PHP, Elixir, Elm, Go, Rust, Java and\n.NET. It can also update git submodules, Docker files, and Terraform files.\nHighlights include:\n\n- Logic to check for the latest version of a dependency *that\'s resolvable given\n  a project\'s other dependencies*\n- Logic to generate updated manifest and lockfiles for a new dependency version\n- Logic to find changelogs, release notes, and commits for a dependency update\n\n## Other Dependabot resources\n\nIn addition to this library, you may be interested in:\n\n- The [dependabot-script][dependabot-script] repo, which provides a collection\n  of scripts that use this library to update dependencies on GitHub Enterprise,\n  GitLab or Azure DevOps\n- The [API docs][api-docs] for Dependabot\'s hosted instance (dependabot.com)\n\n## Setup\n\nTo run all of Dependabot Core, you\'ll need Ruby, Python, PHP, Elixir, Node, Go,\nElm, and Rust installed. However, if you just wish to run it for a single\nlanguage you can get away with just having that language and Ruby.\n\nThe main library is written in Ruby, while JavaScript, Python, PHP, Elm,\nElixir, Go, and Rust are required for dealing with updates for their respective\nlanguages.\n\nTo install the helpers for each language:\n\n1. `cd npm_and_yarn/helpers && yarn install --production && cd -`\n2. `cd composer/helpers && composer install --no-dev && cd -`\n3. `cd python/helpers && pyenv exec pip install -r requirements.txt && cd -`\n4. `cd hex/helpers && mix deps.get && cd -`\n5. `cd terraform && helpers/build "$(pwd)/helpers/install-dir/terraform" && cd -`\n6. `cd go_modules && helpers/build "$(pwd)/helpers/install-dir/go_modules" && cd -`\n\n## Local development\n\nRun the tests by running `rspec spec` inside each of the packages. Style is\nenforced by RuboCop. To check for style violations, simply run `rubocop` in\neach of the packages.\n\n### Running with Docker\n\nWhile you can run Dependabot Core without Docker, we also provide a development\nDockerfile. In most cases, you\'ll be better off running Dependabot in the\ndevelopment Docker container as it bakes in all required dependencies.\n\nStart by building the initial Dependabot Core image, or pull it from the\nDocker registry.\n\n```shell\n$ docker pull dependabot/dependabot-core # OR\n$ docker build -f Dockerfile -t dependabot/dependabot-core . # This may take a while\n```\n\nOnce you have the base Docker image, you can build and run the development\ncontainer using the `docker-dev-shell` script. The script will automatically\nbuild the container if it\'s not present and can be forced to rebuild with the\n`--rebuild` flag. The image includes all dependencies, and the script runs the\nimage, mounting the local copy of Dependabot Core so changes made locally will\nbe reflected inside the container. This means you can continue to use your\neditor of choice while running the tests inside the container.\n\n```shell\n$ bin/docker-dev-shell\n=> building image from Dockerfile.development\n=> running docker development shell\n[dependabot-core-dev] ~/dependabot-core $\n```\n\n### Dry run script\n\n*Note: you must have run `bundle install` in the `omnibus` directory before\nrunning this script.*\n\nYou can use the "dry-run" script to simulate a dependency update job, printing\nthe diff that would be generated to the terminal. It takes two positional\narguments: the package manager and the GitHub repo name (including the\naccount):\n\n```bash\n$ cd omnibus && bundle install && cd -\n$ bin/dry-run.rb go_modules rsc/quote\n=> fetching dependency files\n=> parsing dependency files\n=> updating 2 dependencies\n...\n```\n\n## Debugging with Visual Studio Code and Docker\n\nThere\'s built-in support for leveraging Visual Studio Code\'s [ability for\ndebugging](https://code.visualstudio.com/docs/remote/containers) inside a Docker container.\nAfter installing the recommended [`Remote - Containers` extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers),\nsimply press `Ctrl+Shift+P` (`\xe2\x87\xa7\xe2\x8c\x98P` on macOS) and select `Remote-Containers: Reopen in Container`.\nYou can also access the dropdown by clicking on the green button in the bottom-left corner of the editor.\nIf the development Docker image isn\'t present on your machine, it will be built automatically.\nOnce that\'s finished, start the `Debug Dry Run` configuration `(F5)` and you\'ll be prompted\nto select a package manager and a repository to perform a dry run on.\nFeel free to place breakpoints on the code.\n\n## Releasing\n\nTriggering the jobs that will push the new gems is done by following the steps below.\n\n- Ensure you have the latest merged changes:  `git checkout master` and `git pull`\n- Generate an updated `CHANGELOG`, `version.rb`, and the rest of the needed commands:  `bin/bump-version.rb patch`\n- Edit the `CHANGELOG` file and remove any entries that aren\'t needed\n- Run the commands that were output by running `bin/bump-version.rb patch`\n\n## Architecture\n\nDependabot Core is a collection of Ruby packages (gems), which contain the\nlogic for updating dependencies in several languages.\n\n### `dependabot-common`\n\nThe `common` package contains all general-purpose/shared functionality. For\ninstance, the code for creating pull requests via GitHub\'s API lives here, as\ndoes most of the logic for handling Git dependencies (as most languages support\nGit dependencies in one way or another). There are also base classes defined for\neach of the major concerns required to implement support for a language or\npackage manager.\n\n### `dependabot-{package-manager}`\n\nThere is a gem for each package manager or language that Dependabot\nsupports. At a minimum, each of these gems will implement the following\nclasses:\n\n| Service          | Description                                                                                   |\n|------------------|-----------------------------------------------------------------------------------------------|\n| `FileFetcher`    | Fetches the relevant dependency files for a project (e.g., the `Gemfile` and `Gemfile.lock`). See the [README](https://github.com/dependabot/dependabot-core/blob/master/common/lib/dependabot/file_fetchers/README.md) for more details. |\n| `FileParser`     | Parses a dependency file and extracts a list of dependencies for a project. See the [README](https://github.com/dependabot/dependabot-core/blob/master/common/lib/dependabot/file_parsers/README.md) for more details. |\n| `UpdateChecker`  | Checks whether a given dependency is up-to-date. See the [README](https://github.com/dependabot/dependabot-core/tree/master/common/lib/dependabot/update_checkers/README.md) for more details. |\n| `FileUpdater`    | Updates a dependency file to use the latest version of a given dependency. See the [README](https://github.com/dependabot/dependabot-core/tree/master/common/lib/dependabot/file_updaters/README.md) for more details. |\n| `MetadataFinder` | Looks up metadata about a dependency, such as its GitHub URL. See the [README](https://github.com/dependabot/dependabot-core/tree/master/common/lib/dependabot/metadata_finders/README.md) for more details. |\n| `Version`        | Describes the logic for comparing dependency versions. See the [hex Version class](https://github.com/dependabot/dependabot-core/blob/master/hex/lib/dependabot/hex/version.rb) for an example. |\n| `Requirement`    | Describes the format of a dependency requirement (e.g. `>= 1.2.3`). See the [hex Requirement class](https://github.com/dependabot/dependabot-core/blob/master/hex/lib/dependabot/hex/requirement.rb) for an example. |\n\nThe high-level flow looks like this:\n\n<p align="center">\n  <img src="https://s3.eu-west-2.amazonaws.com/dependabot-images/package-manager-architecture.svg" alt="Dependabot architecture">\n</p>\n\n### `dependabot-omnibus`\n\nThis is a "meta" gem, that simply depends on all the others. If you want to\nautomatically include support for all languages, you can just include this gem\nand you\'ll get all you need.\n\n## Why is this public?\n\nAs the name suggests, Dependabot Core is the core of Dependabot (the rest of the\napp is pretty much just a UI and database). If we were paranoid about someone\nstealing our business then we\'d be keeping it under lock and key.\n\nDependabot Core is public because we\'re more interested in it having an\nimpact than we are in making a buck from it. We\'d love you to use\n[Dependabot][dependabot] so that we can continue to develop it, but if you want\nto build and host your own version then this library should make doing so a\n*lot* easier.\n\nIf you use Dependabot Core then we\'d love to hear what you build!\n\n## License\n\nWe use the License Zero Prosperity Public License, which essentially enshrines\nthe following:\n- If you would like to use Dependabot Core in a non-commercial capacity, such as\n  to host a bot at your workplace, then we give you full permission to do so. In\n  fact, we\'d love you to and will help and support you however we can.\n- If you would like to add Dependabot\'s functionality to your for-profit\n  company\'s offering then we DO NOT give you permission to use Dependabot Core\n  to do so. Please contact us directly to discuss a partnership or licensing\n  arrangement.\n\nIf you make a significant contribution to Dependabot Core then you will be asked\nto transfer the IP of that contribution to Dependabot Ltd so that it can be\nlicensed in the same way as the above.\n\n## History\n\nDependabot and Dependabot Core started life as [Bump][bump] and\n[Bump Core][bump-core], back when Harry and Grey were working at\n[GoCardless][gocardless]. We remain grateful for the help and support of\nGoCardless in helping make Dependabot possible - if you need to collect\nrecurring payments from Europe, check them out.\n\n[dependabot]: https://dependabot.com\n[dependabot-status]: https://api.dependabot.com/badges/status?host=github&identifier=93163073\n[dependabot-script]: https://github.com/dependabot/dependabot-script\n[api-docs]: https://github.com/dependabot/api-docs\n[bump]: https://github.com/gocardless/bump\n[bump-core]: https://github.com/gocardless/bump-core\n[gocardless]: https://gocardless.com\n'