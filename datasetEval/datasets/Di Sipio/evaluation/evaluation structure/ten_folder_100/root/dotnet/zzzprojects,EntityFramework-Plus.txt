b'---\n\nWe are currently porting all features on [Entity Framework Classic](https://entityframework-classic.net/) \n\n> Entity Framework Classic is a supported version from the latest EF6 code base. It supports .NET Framework and .NET Core and overcomes some EF limitations by adding tons of must-haves built-in features.\n\n---\n\n### Library Powered By\n\nThis library is powered by [Entity Framework Extensions](https://entityframework-extensions.net/?z=github&y=entityframework-plus)\n\n<a href="https://entityframework-extensions.net/?z=github&y=entityframework-plus">\n<kbd>\n<img src="https://zzzprojects.github.io/images/logo/entityframework-extensions-pub.jpg" alt="Entity Framework Extensions" />\n</kbd>\n</a>\n\n---\n\n# Entity Framework Plus\nImprove Entity Framework performance and overcome limitations with MUST-HAVE features\n\n## Download\n\nFull Version | NuGet | NuGet Install\n------------ | :-------------: | :-------------:\nZ.EntityFramework.Plus.EFCore | <a href="https://www.nuget.org/packages/Z.EntityFramework.Plus.EFCore/" target="_blank"><img src="https://zzzprojects.github.io/images/nuget/efcore-full-version-v.svg" alt="download" /></a><a href="https://www.nuget.org/packages/Z.EntityFramework.Plus.EFCore/" target="_blank"><img src="https://zzzprojects.github.io/images/nuget/efcore-full-version-d.svg" alt="" /></a> | ```PM> Install-Package Z.EntityFramework.Plus.EFCore```\nZ.EntityFramework.Plus.EF6 | <a href="https://www.nuget.org/packages/Z.EntityFramework.Plus.EF6/" target="_blank"><img src="https://zzzprojects.github.io/images/nuget/ef6-full-version-v.svg" alt="download" /></a><a href="https://www.nuget.org/packages/Z.EntityFramework.Plus.EF6/" target="_blank"><img src="https://zzzprojects.github.io/images/nuget/ef6-full-version-d.svg" alt="" /></a> | ```PM> Install-Package Z.EntityFramework.Plus.EF6```\nZ.EntityFramework.Plus.EF5 | <a href="https://www.nuget.org/packages/Z.EntityFramework.Plus.EF5/" target="_blank"><img src="https://zzzprojects.github.io/images/nuget/ef5-full-version-v.svg" alt="download" /></a><a href="https://www.nuget.org/packages/Z.EntityFramework.Plus.EF5/" target="_blank"><img src="https://zzzprojects.github.io/images/nuget/ef5-full-version-d.svg" alt="" /></a> | ```PM> Install-Package Z.EntityFramework.Plus.EF5```\n\n<a href="https://github.com/zzzprojects/EntityFramework-Plus/wiki/Downloads">More download options (Full and Standalone Version)</a>\n\n## Features\n- Batch Operations\n    - [Batch Delete](https://github.com/zzzprojects/EntityFramework-Plus/wiki/EF-Batch-Delete-%7C-Entity-Framework-Batch-Delete-Objects-Without-Loading-Them)\n    - [Batch Update](https://github.com/zzzprojects/EntityFramework-Plus/wiki/EF-Batch-Update-%7C-Entity-Framework-Batch-Update-Objects-Without-Loading-Them)\n- LINQ\n    - [LINQ Dynamic](https://github.com/zzzprojects/EntityFramework-Plus/wiki/EF-LINQ-Dynamic)\n- Query\n    - [Query Cache](https://github.com/zzzprojects/EntityFramework-Plus/wiki/EF-Query-Cache-%7C-Entity-Framework-Second-Level-Caching)  \n    - [Query Deferred](https://github.com/zzzprojects/EntityFramework-Plus/wiki/EF-Query-Deferred-%7C-Entity-Framework-deferring-immediate-LINQ-query-execution)\n    - [Query DbSetFilter](https://github.com/zzzprojects/EntityFramework-Plus/wiki/EF-Query-DbSetFilter)\n    - [Query Filter](https://github.com/zzzprojects/EntityFramework-Plus/wiki/EF-Query-Filter-%7C-Entity-Framework-Dynamic-Instance-and-Global-Filters)\n    - [Query Future](https://github.com/zzzprojects/EntityFramework-Plus/wiki/EF-Query-Future-%7C-Entity-Framework-Combine-and-Execute-Multiple-SQL-Command)\n    - [Query IncludeFilter](https://github.com/zzzprojects/EntityFramework-Plus/wiki/EF-Query-IncludeFilter-%7C-Entity-Framework-Include-Related-Entities-using-Where-Filter)\n    - [Query IncludeOptimized](https://github.com/zzzprojects/EntityFramework-Plus/wiki/EF-Query-IncludeOptimized-%7C-Entity-Framework-Filter-Child-Collections-and-Optimize-Include)\n- [Audit](https://github.com/zzzprojects/EntityFramework-Plus/wiki/EF-Audit-%7C-Entity-Framework-Audit-Trail-Context-and-Track-Changes)\n\n---\n\n**Bulk Operations only available with [Entity Framework Extensions](http://entityframework-extensions.net/)**\n- BulkSaveChanges\n- BulkInsert\n- BulkUpdate\n- BulkDelete\n- BulkMerge\n\n---\n\n## Batch Delete\nDeletes multiples rows in a single database roundtrip and without loading entities in the context.\n\n```csharp\n// using Z.EntityFramework.Plus; // Don\'t forget to include this.\n\n// DELETE all users which has been inactive for 2 years\nctx.Users.Where(x => x.LastLoginDate < DateTime.Now.AddYears(-2))\n         .Delete();\n\n// DELETE using a BatchSize\nctx.Users.Where(x => x.LastLoginDate < DateTime.Now.AddYears(-2))\n         .Delete(x => x.BatchSize = 1000);\n```\n\n**Support:** EF5, EF6, EF Core\n\n**[Learn more](https://github.com/zzzprojects/EntityFramework-Plus/wiki/EF-Batch-Delete-%7C-Entity-Framework-Batch-Delete-Objects-Without-Loading-Them)**\n\n## Batch Update\nUpdates multiples rows using an expression in a single database roundtrip and without loading entities in the context.\n\n```csharp\n// using Z.EntityFramework.Plus; // Don\'t forget to include this.\n\n// UPDATE all users which has been inactive for 2 years\nctx.Users.Where(x => x.LastLoginDate < DateTime.Now.AddYears(-2))\n         .Update(x => new User() { IsSoftDeleted = 1 });\n```\n\n**Support:** EF5, EF6, EF Core\n\n**[Learn more](https://github.com/zzzprojects/EntityFramework-Plus/wiki/EF-Batch-Update-%7C-Entity-Framework-Batch-Update-Objects-Without-Loading-Them)**\n\n## Query Cache\n**Query cache is the second level cache for Entity Framework.**\n\nThe result of the query is returned from the cache. If the query is not cached yet, the query is materialized and cached before being returned.\n\nYou can specify cache policy and cache tag to control CacheItem expiration.\n\n**Support:**\n\n_Cache Policy_\n\n```csharp\n// The query is cached using default QueryCacheManager options\nvar countries = ctx.Countries.Where(x => x.IsActive).FromCache();\n\n// (EF5 | EF6) The query is cached for 2 hours\nvar states = ctx.States.Where(x => x.IsActive).FromCache(DateTime.Now.AddHours(2));\n\n// (EF7) The query is cached for 2 hours without any activity\nvar options = new MemoryCacheEntryOptions() { SlidingExpiration = TimeSpan.FromHours(2)};\nvar states = ctx.States.Where(x => x.IsActive).FromCache(options);\n```\n\n_Cache Tags_\n\n```csharp\nvar states = db.States.Where(x => x.IsActive).FromCache("countries", "states");\nvar stateCount = db.States.Where(x => x.IsActive).DeferredCount().FromCache("countries", "states");\n\n// Expire all cache entry using the "countries" tag\nQueryCacheManager.ExpireTag("countries");\n```\n\n**Support:** EF5, EF6, EF Core\n\n**[Learn more](https://github.com/zzzprojects/EntityFramework-Plus/wiki/EF-Query-Cache-%7C-Entity-Framework-Second-Level-Caching)**\n\n## Query Deferred\n**Defer the execution of a query which is normally executed to allow some features like Query Cache and Query Future.**\n\n```csharp\n// Oops! The query is already executed, we cannot use Query Cache or Query Future features\nvar count = ctx.Customers.Count();\n\n// Query Cache\nctx.Customers.DeferredCount().FromCache();\n\n// Query Future\nctx.Customers.DeferredCount().FutureValue();\n```\n> All LINQ extensions are supported: Count, First, FirstOrDefault, Sum, etc. \n\n**Support:** EF5, EF6, EF Core\n\n**[Learn more](https://github.com/zzzprojects/EntityFramework-Plus/wiki/EF-Query-Deferred-%7C-Entity-Framework-deferring-immediate-LINQ-query-execution)**\n\n## Query Filter\n**Filter query with predicate at global, instance or query level.**\n\n**Support:**\n\n_Global Filter_\n```csharp\n// CREATE global filter\nQueryFilterManager.Filter<Customer>(x => x.Where(c => c.IsActive));\n\nvar ctx = new EntityContext();\n\n// TIP: Add this line in EntitiesContext constructor instead\nQueryFilterManager.InitilizeGlobalFilter(ctx);\n\n// SELECT * FROM Customer WHERE IsActive = true\nvar customer = ctx.Customers.ToList();\n```\n\n_Instance Filter_\n```csharp\nvar ctx = new EntityContext();\n\n// CREATE filter\nctx.Filter<Customer>(x => x.Where(c => c.IsActive));\n\n// SELECT * FROM Customer WHERE IsActive = true\nvar customer = ctx.Customers.ToList();\n```\n\n_Query Filter_\n```csharp\nvar ctx = new EntityContext();\n\n// CREATE filter disabled\nctx.Filter<Customer>(CustomEnum.EnumValue, x => x.Where(c => c.IsActive), false);\n\n// SELECT * FROM Customer WHERE IsActive = true\nvar customer = ctx.Customers.Filter(CustomEnum.EnumValue).ToList();\n```\n\n**Support:** EF5, EF6, EF Core\n\n**[Learn more](https://github.com/zzzprojects/EntityFramework-Plus/wiki/EF-Query-Filter-%7C-Entity-Framework-Dynamic-Instance-and-Global-Filters)**\n\n## Query Future\n**Query Future allow to reduce database roundtrip by batching multiple queries in the same sql command.**\n\nAll future query are stored in a pending list. When the first future query require a database roundtrip, all query are resolved in the same sql command instead of making a database roundtrip for every sql command.\n\n**Support:**\n\n_Future_\n\n```csharp\n// GET the states & countries list\nvar futureCountries = db.Countries.Where(x => x.IsActive).Future();\nvar futureStates = db.States.Where(x => x.IsActive).Future();\n\n// TRIGGER all pending queries (futureCountries & futureStates)\nvar countries = futureCountries.ToList();\n```\n\n_FutureValue_\n\n```csharp\n// GET the first active customer and the number of avtive customers\nvar futureFirstCustomer = db.Customers.Where(x => x.IsActive).DeferredFirstOrDefault().FutureValue();\nvar futureCustomerCount = db.Customers.Where(x => x.IsActive).DeferredCount().FutureValue();\n\n// TRIGGER all pending queries (futureFirstCustomer & futureCustomerCount)\nCustomer firstCustomer = futureFirstCustomer.Value;\n```\n\n**Support:** EF5, EF6, EF Core\n\n**[Learn more](https://github.com/zzzprojects/EntityFramework-Plus/wiki/EF-Query-Future-%7C-Entity-Framework-Combine-and-Execute-Multiple-SQL-Command)**\n\n## Query IncludeFilter\nEntity Framework already support eager loading however the major drawback is you cannot control what will be included. There is no way to load only active item or load only the first 10 comments.\n\n**EF+ Query Include** make it easy:\n```csharp\nvar ctx = new EntityContext();\n\n// Load only active comments\nvar posts = ctx.Post.IncludeFilter(x => x.Comments.Where(x => x.IsActive));\n```\n\n**Support:** EF6\n\n**[Learn more](https://github.com/zzzprojects/EntityFramework-Plus/wiki/EF-Query-IncludeFilter-%7C-Entity-Framework-Include-Related-Entities-using-Where-Filter)**\n\n## Query IncludeOptimized\nImprove SQL generate by Include and filter child collections at the same times!\n\n```csharp\nvar ctx = new EntityContext();\n\n// Load only active comments using an optimized include\nvar posts = ctx.Post.IncludeOptimized(x => x.Comments.Where(x => x.IsActive));\n```\n\n**Support:** EF5, EF6\n\n**[Learn more](https://github.com/zzzprojects/EntityFramework-Plus/wiki/EF-Query-IncludeFilter-%7C-Entity-Framework-Include-Related-Entities-using-Where-Filter)**\n\n## Audit\nAllow to easily track changes, exclude/include entity or property and auto save audit entries in the database.\n\n**Support:**\n - AutoSave Audit\n - Exclude & Include Entity\n - Exclude & Include Property\n - Format Value\n - Ignore Events\n - Property Unchanged\n - Soft Add & Soft Delete\n\n```csharp\n// using Z.EntityFramework.Plus; // Don\'t forget to include this.\n\nvar ctx = new EntityContext();\n// ... ctx changes ...\n\nvar audit = new Audit();\naudit.CreatedBy = "ZZZ Projects"; // Optional\nctx.SaveChanges(audit);\n\n// Access to all auditing information\nvar entries = audit.Entries;\nforeach(var entry in entries)\n{\n    foreach(var property in entry.Properties)\n    {\n    }\n}\n```\n\nAutoSave audit in your database\n```csharp\nAuditManager.DefaultConfiguration.AutoSavePreAction = (context, audit) =>\n    (context as EntityContext).AuditEntries.AddRange(audit.Entries);\n```\n\n**Support:** EF5, EF6, EF Core\n\n**[Learn more](https://github.com/zzzprojects/EntityFramework-Plus/wiki/EF-Audit-%7C-Entity-Framework-Audit-Trail-Context-and-Track-Changes)**\n\n## Contribute\nThe best way to contribute is by **spreading the word** about the library:\n\n - Blog it\n - Comment it\n - Fork it\n - Star it\n - Share it\n \nA **HUGE THANKS** for your help.\n\n## More Projects\n\n**Entity Framework**\n- [EntityFramework Extensions](https://entityframework-extensions.net/)\n- [EntityFramework Plus](https://entityframework-plus.net)\n\n**Bulk Operations**\n- [Bulk Operations](https://bulk-operations.net/)\n- [Dapper Plus](https://dapper-plus.net/)\n\n**Expression Evaluator**\n- [Eval-SQL.NET](https://eval-sql.net/)\n- [Eval-Expression.NET](https://eval-expression.net/)\n\n**Utilities**\n- [Extension Methods Library](https://github.com/zzzprojects/Z.ExtensionMethods/)\n- [Html Agility Pack](https://html-agility-pack.net/)\n\n**Need more info?** info@zzzprojects.com\n\nContact our outstanding customer support for any request. We usually answer within the next business day, hour, or minutes!\n'