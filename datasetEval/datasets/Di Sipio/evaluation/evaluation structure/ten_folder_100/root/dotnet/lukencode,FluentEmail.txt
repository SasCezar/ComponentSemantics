b'![alt text](https://github.com/lukencode/FluentEmail/raw/master/assets/fluentemail_logo_64x64.png "FluentEmail")\n\n# FluentEmail - All in one email sender for .NET and .NET Core\nSend email from .NET or .NET Core. A bunch of useful extension packages make this dead simple and very powerful.\n\n## Packages\n\n[FluentEmail.Core](src/FluentEmail.Core) - Just the domain model. Includes very basic defaults, but is also included with every other package here.\n\n[FluentEmail.Smtp](src/Senders/FluentEmail.Smtp) - Now we\'re talking. Send emails via SMTP.\n\n[FluentEmail.Razor](src/Renderers/FluentEmail.Razor) - Generate emails using Razor templates. Anything you can do in ASP.NET is possible here. Uses the [RazorLight](https://github.com/toddams/RazorLight) project under the hood. \n\n[FluentEmail.Mailtrap](src/Senders/FluentEmail.Mailtrap) - Send emails to Mailtrap. Uses [FluentEmail.Smtp](src/Senders/FluentEmail.Smtp) for delivery.\n\n[FluentEmail.Mailgun](src/Senders/FluentEmail.Mailgun) - Send emails via MailGun\'s REST API.\n\n[FluentEmail.SendGrid](src/Senders/FluentEmail.SendGrid) - Send email via the SendGrid API.\n\n**Basic Usage**\n\n```csharp\nvar email = Email\n    \t.From("john@email.com")\n    \t.To("bob@email.com", "bob")\n    \t.Subject("hows it going bob")\n    \t.Body("yo dawg, sup?")\n\t\t.Send();\n```\n\n\n**Dependency Injection**\nYou can configure FluentEmail in startup.cs with these helper methods. This will by default inject IFluentEmail (send a single email) and IFluentEmailFactory (used to send multiple emails in a single context) with the \nISender and ITemplateRenderer configured using AddRazorRenderer(), AddSmtpSender() or other packages.\n\n```csharp\npublic void ConfigureServices(IServiceCollection services)\n{\n\tservices\n\t\t.AddFluentEmail("fromemail@test.test")\n\t\t.AddRazorRenderer()\n\t\t.AddSmtpSender("localhost", 25);\n}\n```\n\n**Using a template**\n\n```csharp\n// Using Razor templating package (or set using AddRazorRenderer in services)\nEmail.DefaultRenderer = new RazorRenderer();\n\nvar template = "Dear @Model.Name, You are totally @Model.Compliment.";\n\nvar email = Email\n    .From("bob@hotmail.com")\n    .To("somedude@gmail.com")\n    .Subject("woo nuget")\n    .UsingTemplate(template, new { Name = "Luke", Compliment = "Awesome" });\n```\n\n**Sending Emails**\n\n```csharp\n// Using Smtp Sender package (or set using AddSmtpSender in services)\nEmail.DefaultSender = new SmtpSender();\n\n//send normally\nemail.Send();\n\n//send asynchronously\nawait email.SendAsync();\n```\n\n**Template File from Disk**  \n\n```csharp\nvar email = Email\n    .From("bob@hotmail.com")\n    .To("somedude@gmail.com")\n    .Subject("woo nuget")\n\t.UsingTemplateFromFile($"{Directory.GetCurrentDirectory()}/Mytemplate.cshtml", new { Name = "Rad Dude" });\n```\n\n**Embedded Template File**  \n\n**Note for .NET Core 2 users:** You\'ll need to add the following line to the project containing any embedded razor views. See [this issue for more details](https://github.com/aspnet/Mvc/issues/6021).\n\n```xml\n<MvcRazorExcludeRefAssembliesFromPublish>false</MvcRazorExcludeRefAssembliesFromPublish>\n```\n\n```csharp\nvar email = new Email("bob@hotmail.com")\n\t.To("benwholikesbeer@twitter.com")\n\t.Subject("Hey cool name!")\n\t.UsingTemplateFromEmbedded("Example.Project.Namespace.template-name.cshtml", \n\t\tnew { Name = "Bob" }, \n\t\tTypeFromYourEmbeddedAssembly.GetType().GetTypeInfo().Assembly);\n```\n\n**More Info**\n\n<a href="http://lukencode.com/2018/07/01/send-email-in-dotnet-core-with-fluent-email/">Sending email in .NET Core with FluentEmail</a>\n\n\n## Development and Beta Packages\n\nIf you need a pre-release version, you can add the MyGet feed to your nuget package sources.  \n<https://www.myget.org/F/fluentemail/api/v3/index.json>\n'