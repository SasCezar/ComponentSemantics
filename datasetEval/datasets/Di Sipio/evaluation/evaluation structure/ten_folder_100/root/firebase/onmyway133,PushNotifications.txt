b'# \xe2\x84\x99\xf0\x9d\x95\xa6\xf0\x9d\x95\xa4\xf0\x9d\x95\x99 \xe2\x84\x95\xf0\x9d\x95\xa0\xf0\x9d\x95\xa5\xf0\x9d\x95\x9a\xf0\x9d\x95\x97\xf0\x9d\x95\x9a\xf0\x9d\x95\x94\xf0\x9d\x95\x92\xf0\x9d\x95\xa5\xf0\x9d\x95\x9a\xf0\x9d\x95\xa0\xf0\x9d\x95\x9f\xf0\x9d\x95\xa4\n\n\xe2\x9d\xa4\xef\xb8\x8f Support my work https://gum.co/rsjU \xe2\x9d\xa4\xef\xb8\x8f\n\n<div align = "center">\n<img src="Screenshots/ios.png" height="400"/>\n</div>\n\n## Description\n\n- `PushNotitication` is an app used for testing push notifications on iOS and Android\n- Support macOS, Windows, Linux\n- Support using `certificate` and `token` for authentication with APNS\n- Auto save settings\n\n## How to install\n\n* Download latest release from https://github.com/onmyway133/PushNotifications/releases \n  - If using macOS Catalina (10.15+), here is the instruction of [how to open the app](#opening-app-on-macos-catalina-1015)\n\n## How to use\n* iOS (APNs):\n  - [iOS Provider Certificate](#ios-provider-certificates)\n  - [iOS Authentication Token](#ios-authentication-token)\n* Android (FCM):\n  - [Android Server Key](#android-server-key)\n\nKeep in mind: To connect to APNs you can use either `Provider certificate` or `Authentication Token`. They are **different ways** and `Authentication Token` is a new one.\n\n**Main difference:** `Provider certificate` expires every year and needs to be regenerated (and reuploaded to your server as `.p12`). `Authentication Token` is unlimited and you don\'t have to recreate and reupload it.\n\n### iOS Provider Certificate\n\n- Read more [Provider Certificates](https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/CommunicatingwithAPNs.html#//apple_ref/doc/uid/TP40008194-CH11-SW1)\n- Go to [Member Center](https://developer.apple.com/account/ios/certificate/distribution/create)\n- Generate `Apple Push Notification service SSL (Sandbox & Production)`, this is now used for both sandbox and production. Download as `.cer` file\n- Double click on `.cer` file to install into `Keychain`, then export it as `.p12` file\n\n<div align = "center">\n<img src="Screenshots/Certificate.png" width="600"/>\n</div>\n\n- In `PushNotifications`, select `.p12` file, fill out `passphase` if needed, fill out `bundle id`, `device token`, `message`, select `environment`\n- `message` must be in json format, see [Creating the Remote Notification Payload](https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/CreatingtheNotificationPayload.html)\n\n<div align = "center">\n<img src="Screenshots/iOSCertificate.png" width="600"/>\n</div>\n\n### iOS Authentication Token\n\n- Read more [Authentication Tokens](https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/CommunicatingwithAPNs.html#//apple_ref/doc/uid/TP40008194-CH11-SW1)\n- Go to [Member Center](https://developer.apple.com/account/ios/certificate/distribution/create)\n- Create a `Key` for push notification. Download as `.p8` file.\n\n<div align = "center">\n<img src="Screenshots/Key.png" width="600"/>\n</div>\n\n- Note your `key id`\n\n<div align = "center">\n<img src="Screenshots/KeyId.png" width="600"/>\n</div>\n\n- Note your `team id` on [Account Membership](https://developer.apple.com/account/#/membership)\n\n<div align = "center">\n<img src="Screenshots/TeamId.png" width="600"/>\n</div>\n\n- In `PushNotifications`, select `.p8` file, fill out `key id`, `team id`, `bundle id`, `device token`, `message`, select `environment`\n\n<div align = "center">\n<img src="Screenshots/iOSToken.png" width="600"/>\n</div>\n\n\n### Android Server Key\n\n- Read about [\nFirebase Cloud Messaging](https://firebase.google.com/docs/cloud-messaging/)\n- Add or select project on [Firebase Console](https://console.firebase.google.com/u/0/)\n\n<div align = "center">\n<img src="Screenshots/AndroidServerKey.png" width="600"/>\n</div>\n\n- In `PushNotifications`, fill out `server key`, `device token`, `message`\n- `message` must be in json format\n\n<div align = "center">\n<img src="Screenshots/Android.png" width="600"/>\n</div>\n\n## Opening app on macOS Catalina (10.15+)\n\nIf you installed the app on macOS Catalina using the `.dmg` file, you will probably see this window when trying to launch the app:\n\n<div align = "center">\n<img src="Screenshots/apple_check.png" width="600"/>\n</div>\n\nJust press `OK` and go to `System Preferences..` -> `Security & Privacy` -> `General` tab. There you need to press the button `Open Anyway`.\n\n<div align = "center">\n<img src="Screenshots/apple_security.png" width="600"/>\n</div>\n\n## Manual building\n\nIn case of issues with running the app on your version of OS, it\'s possible to easily build it yourself.\n\nSteps:\n1) Download or clone the repository\n2) Install `node` on your computer (https://nodejs.org/en/)\n3) Run `npm install` in the root of downloaded/cloned project\n4) Verify that the app can be launched with the command `npm start` (optional)\n5) Build the project to generate installable files:\n\n- For building with `electron-builder` you need to run `npm run dist`. Generated files end up in the folder `dist` in the root of your project.\n\nAs a result `electron-builder` will generate:\n- For macOS: `.zip`, `.dmg` (if you build using macOS)\n- For Windows: `.msi` (if you build using Windows)\n- For Linux: `.deb`, `.AppImage` (if you build using Linux)\n\nKeep in mind: you cannot build for Windows or Linux, if you are using macOS, or vise versa. It creates installable files only for your current OS.\n\n## Credit\n\n- Icon http://emojione.com/\n- Use [node-apn](https://github.com/node-apn/node-apn) under the hood\n\n\n## Author\n\nKhoa Pham, onmyway133@gmail.com\n\n## License\n\n**PushNotifications** is available under the MIT license. See the [LICENSE](https://github.com/onmyway133/PushNotifications/blob/master/LICENSE.md) file for more info.\n'