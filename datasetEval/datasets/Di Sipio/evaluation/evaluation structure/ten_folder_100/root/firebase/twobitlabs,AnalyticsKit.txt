b'[![Build Status](https://travis-ci.org/twobitlabs/AnalyticsKit.svg?branch=master)](https://travis-ci.org/twobitlabs/AnalyticsKit)\n[![Gitter chat](https://badges.gitter.im/twobitlabs/AnalyticsKit.png)](https://gitter.im/twobitlabs/AnalyticsKit)\n\n# AnalyticsKit\n\nThe goal of `AnalyticsKit` is to provide a consistent API for analytics regardless of the provider. With `AnalyticsKit`, you just call one logging method and `AnalyticsKit` relays that logging message to each registered provider. AnalyticsKit works in both Swift and Objective-C projects.\n\n## Supported Providers\n\n* [AdjustIO](https://www.adjust.io/)\n* [Apsalar](http://apsalar.com/)\n* [Crashlytics](http://crashlytics.com)\n* [Firebase Analytics](https://firebase.google.com/products/analytics/)\n* [Flurry](http://www.flurry.com/)\n* [Google Analytics](https://www.google.com/analytics)\n* [Localytics](http://www.localytics.com/)\n* [Mixpanel](https://mixpanel.com/)\n* [mParticle](https://www.mparticle.com)\n* [Parse](http://parse.com/)\n* [Mobile Center](https://docs.microsoft.com/en-us/mobile-center/)\n* [Debug Provider](https://github.com/twobitlabs/AnalyticsKit/blob/master/AnalyticsKitDebugProvider.swift) - shows an AlertView whenever an error is logged\n* [Unit Test Provider](https://github.com/twobitlabs/AnalyticsKit/blob/master/AnalyticsKit/AnalyticsKit/AnalyticsKitUnitTestProvider.swift) - allows you to inspect logged events\n\n## Unsupported Providers\n\nThe following providers are included but not supported. YMMV.\n\n* [New Relic](http://www.newrelic.com)\n\n\tWe\'ve had a number of problems integrating the New Relic framework into the test app, so we can\'t verify that events are logged correctly.\n\nIf you would like to add support for a new provider or to update the code for an existing one, simply fork the master repo, make your changes, and submit a pull request.\n\n## How to Use\n\n### Installation\n1. Download the provider\'s SDK and add it to your project, or install via cocoapods.\n2. Add AnalyticsKit to your project either as a git submodule or copying the source into your project. In Xcode, only include AnalyticsKit.h/.m/.swift and any providers you plan to use.\n3. In your AppDelegate\'s applicationDidFinishLaunchingWithOptions: method, create an array with your provider instance(s) and call `initializeProviders:`.\n\nNOTE: If you are gettings an error similar to `target has transitive dependencies that include static binaries` when using Crashlytics/Intercom add the following to the bottom of your Podfile:\n```ruby\npre_install do |installer|\n\t# workaround for https://github.com/CocoaPods/CocoaPods/issues/3289\n    def installer.verify_no_static_framework_transitive_dependencies; end\nend\n```\n\nSwift:\n\nInitialize AnalyticsKit in application:didFinishLaunchingWithOptions:\n\n```swift\nAnalyticsKit.initializeProviders([AnalyticsKitFlurryProvider(withAPIKey: flurryKey)])\n```\n\nDepending on which analytics providers you use you may need to include the following method calls in your app delegate (or just go ahead and include them to be safe):\n\n```swift\nAnalyticsKit.applicationWillEnterForeground()\nAnalyticsKit.applicationDidEnterBackground()\nAnalyticsKit.applicationWillTerminate]()\n```\n\nIf you\'re using a legacy Objective-C `AnalyticsKitProvider` you will need to import that in your bridging header to make it available to Swift. You can find the name of the generated header name under Build Settings, Swift Compiler - Code Generation, Objective-C Bridging Header. Often named something like YourProject-Bridging-Header.h.\n\n```objc\n#import "AnalyticsKitNewRelicProvider.h"\n```\n\nObjective-C:\n\nMake AnalyticsKit Swift classes available to your Objective-C classes by importing your Objective-C generated header. You can find the name of the generated header name under Build Settings, Swift Compiler - Code Generation, Objective-C Generated Interface Header Name:\n\n```objc\n#import "YourProject-Swift.h"\n```\n\nInitialize AnalyticsKit in applicationDidFinishLaunchingWithOptions\n\n```objc\n[AnalyticsKit initializeProviders:@[[[AnalyticsKitFlurryProvider alloc] initWithAPIKey:@"[YOUR KEY]"]]];\n```\n\nTo log an event, simply call the `logEvent:` method.\n\n```objc\n[AnalyticsKit logEvent:@"Log In" withProperties:infoDict];\n```\n\nDepending on which analytics providers you use you may need to include the following method calls in your app delegate (or just go ahead and include them to be safe):\n\n```objc\n[AnalyticsKit applicationWillEnterForeground];\n[AnalyticsKit applicationDidEnterBackground];  \n[AnalyticsKit applicationWillTerminate];  \n```\n\nSee AnalyticsKit.h for an exhaustive list of the logging methods available.\n\n### Channels\n\n`AnalyticsKit` supports grouping analytics providers together into separate channels. If your primary providers is Flurry but you also want to log certain separate events to Google Analytics you can setup `AnalyticsKit` to log events following the instructions above and then setup a separate channel for Google Analytics as follows:\n\nSwift:\n\n```swift\n// In didFinishLaunchingWithOptions you could configure a separate channel of providers\nAnalyticsKit.channel("google").initializeProviders([AnalyticsKitGoogleAnalyticsProvider(withTrackingID: trackingId)])\n\n// Then later in your code log an event to that channel only\nAnalyticsKit.channel("google").logEvent("some event")\n```\n\nObjective-C:\n\n```objc\n// In didFinishLaunchingWithOptions you could configure a separate channel of providers\n[[AnalyticsKit channel:@"google"] initializeProviders:@[[[AnalyticsKitGoogleAnalyticsProvider alloc] initWithTrackingID:trackingId]]];\n\n// Then later in your code log an event to that channel only\n[[AnalyticsKit channel:@"google"] logEvent:@"some event"];\n```\n\n## Apple Watch Analytics\n\nAnalyticsKit now provides support for logging from your Apple Watch Extension.\n\n### Supported Providers\n\n* [Flurry](http://www.flurry.com/)\n\n### Installation\n1. If you haven\'t already done so, follow the installation steps above to add your provider\'s SDK and AnalyticsKit to your project.\n2. Adding Provider\'s API Key.\n - Flurry: Follow steps outlined in [Flurry\'s Apple Watch Extension](https://developer.yahoo.com/flurry/docs/analytics/gettingstarted/technicalquickstart/applewatch/) guide to add the API Key to the Extension\'s info.plist.\n\nObjective-C:\n\nInitialize AnalyticsKit in awakeWithContext\n\n```objc\nAnalyticsKitWatchExtensionFlurryProvider *flurry = [AnalyticsKitWatchExtensionFlurryProvider new];\n[AnalyticsKit initializeProviders:@[flurry]];\n```\n\nTo log an event, simply call the `logEvent:` method.\n\n```objc\n[AnalyticsKit logEvent:@"Launching Watch App"];\n```\n\nSwift:\n\nImport AnalyticsKit and any providers in your bridging header:\n\n```objc\n#import "AnalyticsKit.h"\n#import "AnalyticsKitWatchExtensionFlurryProvider.h"\n```\n\nInitialize AnalyticsKit in awakeWithContext\n\n```swift\nlet flurryProvider = AnalyticsKitWatchExtensionFlurryProvider()\nAnalyticsKit.initializeProviders([flurryProvider])\n```\n\nTo log an event, simply call the `logEvent` method.\n\n```swift\nAnalyticsKit.logEvent("Launching Watch App");\n```\n\n## Contributors\n - [Two Bit Labs](http://twobitlabs.com/)\n - [Up Next Shows and Movies App](https://upnext.me/)\n - [Todd Huss](https://github.com/thuss)\n - [Susan Detwiler](https://github.com/sherpachick)\n - [Christopher Pickslay](https://github.com/chrispix)\n - [Zac Shenker](https://github.com/zacshenker)\n - [Sinnerschrader Mobile](https://github.com/sinnerschrader-mobile)\n - [Bradley David Bergeron](https://github.com/bdbergeron) - Parse\n - [Jeremy Medford](https://github.com/jeremymedford)\n - [Sean Woolfolk](https://github.com/seanw4)\n - [Fran\xc3\xa7ois Benaiteau](https://github.com/netbe)\n - [Ying Quan Tan](https://github.com/brightredchilli)\n - [Kaden Wilkinson](https://github.com/kdawgwilk)\n - [Jim Boyd](https://github.com/jjamminjim)\n - [Miralem Cebic](https://github.com/RabbitMC)\n'