b'# Firego\n\n## Deprecated in favor of [firebase/firebase-admin-go](https://github.com/firebase/firebase-admin-go).\n\n---\n[![Build Status](https://travis-ci.org/zabawaba99/firego.svg?branch=v1)](https://travis-ci.org/zabawaba99/firego) [![Coverage Status](https://coveralls.io/repos/github/zabawaba99/firego/badge.svg?branch=v1)](https://coveralls.io/github/zabawaba99/firego?branch=v1)\n---\n\nA Firebase client written in Go\n\n## Installation\n\n```bash\ngo get -u gopkg.in/zabawaba99/firego.v1\n```\n\n## Usage\n\nImport firego\n\n```go\nimport "gopkg.in/zabawaba99/firego.v1"\n```\n\nCreate a new firego reference\n\n```go\nf := firego.New("https://my-firebase-app.firebaseIO.com", nil)\n```\n\nwith existing http client\n\n```go\nf := firego.New("https://my-firebase-app.firebaseIO.com", client)\n```\n\n### Request Timeouts\n\nBy default, the `Firebase` reference will timeout after 30 seconds of trying\nto reach a Firebase server. You can configure this value by setting the global\ntimeout duration\n\n```go\nfirego.TimeoutDuration = time.Minute\n```\n\n### Authentication\n\nYou can authenticate with your `service_account.json` file by using the\n`golang.org/x/oauth2` package (thanks @m00sey for the snippet)\n\n```go\nd, err := ioutil.ReadFile("our_service_account.json")\nif err != nil {\n    return nil, err\n}\n\nconf, err := google.JWTConfigFromJSON(d, "https://www.googleapis.com/auth/userinfo.email",\n    "https://www.googleapis.com/auth/firebase.database")\nif err != nil {\n    return nil, err\n}\n\nfb := firego.New("https://you.firebaseio.com", conf.Client(oauth2.NoContext))\n// use the authenticated fb instance\n```\n\n### Legacy Tokens\n\n```go\nf.Auth("some-token-that-was-created-for-me")\nf.Unauth()\n```\n\nVisit [Fireauth](https://github.com/zabawaba99/fireauth) if you\'d like to generate your own auth tokens\n\n### Get Value\n\n```go\nvar v map[string]interface{}\nif err := f.Value(&v); err != nil {\n  log.Fatal(err)\n}\nfmt.Printf("%s\\n", v)\n```\n\n#### Querying\n\nTake a look at Firebase\'s [query parameters](https://www.firebase.com/docs/rest/guide/retrieving-data.html#section-rest-filtering)\nfor more information on what each function does.\n\n```go\nvar v map[string]interface{}\nif err := f.StartAt("a").EndAt("c").LimitToFirst(8).OrderBy("field").Value(&v); err != nil {\n\tlog.Fatal(err)\n}\nfmt.Printf("%s\\n", v)\n```\n\n### Set Value\n\n```go\nv := map[string]string{"foo":"bar"}\nif err := f.Set(v); err != nil {\n  log.Fatal(err)\n}\n```\n\n### Push Value\n\n```go\nv := "bar"\npushedFirego, err := f.Push(v)\nif err != nil {\n\tlog.Fatal(err)\n}\n\nvar bar string\nif err := pushedFirego.Value(&bar); err != nil {\n\tlog.Fatal(err)\n}\n\n// prints "https://my-firebase-app.firebaseIO.com/-JgvLHXszP4xS0AUN-nI: bar"\nfmt.Printf("%s: %s\\n", pushedFirego, bar)\n```\n\n### Update Child\n\n```go\nv := map[string]string{"foo":"bar"}\nif err := f.Update(v); err != nil {\n  log.Fatal(err)\n}\n```\n\n### Remove Value\n\n```go\nif err := f.Remove(); err != nil {\n  log.Fatal(err)\n}\n```\n\n### Watch a Node\n\n```go\nnotifications := make(chan firego.Event)\nif err := f.Watch(notifications); err != nil {\n\tlog.Fatal(err)\n}\n\ndefer f.StopWatching()\nfor event := range notifications {\n\tfmt.Printf("Event %#v\\n", event)\n}\nfmt.Printf("Notifications have stopped")\n```\n### Change reference\n\nYou can use a reference to save or read data from a specified reference\n\n```go\nuserID := "bar"\nusersRef,err := f.Ref("users/"+userID)\nif err != nil {\n  log.Fatal(err)\n}\nv := map[string]string{"id":userID}\nif err := usersRef.Set(v); err != nil {\n  log.Fatal(err)\n}\n\n```\n\nCheck the [GoDocs](http://godoc.org/gopkg.in/zabawaba99/firego.v1) or\n[Firebase Documentation](https://www.firebase.com/docs/rest/) for more details\n\n## Running Tests\n\nIn order to run the tests you need to `go get -t ./...`\nfirst to go-get the test dependencies.\n\n## Issues Management\n\nFeel free to open an issue if you come across any bugs or\nif you\'d like to request a new feature.\n\n## Contributing\n\n1. Fork it\n2. Create your feature branch (`git checkout -b new-feature`)\n3. Commit your changes (`git commit -am \'Some cool reflection\'`)\n4. Push to the branch (`git push origin new-feature`)\n5. Create new Pull Request\n'