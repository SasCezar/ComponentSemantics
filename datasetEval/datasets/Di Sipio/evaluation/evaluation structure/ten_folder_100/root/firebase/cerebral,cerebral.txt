b'# Cerebral\n\nA declarative state and side effects management solution for popular JavaScript frameworks\n\n[![NPM version][npm-image]][npm-url]\n[![Build status][travis-image]][travis-url]\n[![Coverage Status][coverage-image]][coverage-url]\n[![bitHound Score][bithound-image]][bithound-url]\n[![Commitizen friendly][commitizen-image]][commitizen-url]\n[![Discord][discord-image]][discord-url]\n<img src="images/logo.png" width="300" align="center">\n\n## Documentation\n\n* [Current Cerebral (2.x and up)](http://www.cerebraljs.com/)\n* [Previous Cerebral (1.x)](http://cerebral-website.herokuapp.com/)\n\n## Contribute\n\nThe entire Cerebral codebase has been rewritten to encourage contributions. The code is cleaned up, commented and all code is in a "monorepo". That means you can run tests across projects and general management of the code is simplified a lot.\n\n1.  Clone the monorepo: `git clone https://github.com/cerebral/cerebral.git`\n2.  In root: `npm install`\n\nThe packages are located under `packages` folder and there is **no need** to run `npm install` for each package.\n\n### Using monorepo for your own apps\n\nIf you want to use Cerebral 2 directly from your cloned repo, you can create a symlinks for following\ndirectories into the `node_modules` directory of your app:\n\n* `packages/node_modules/cerebral`\n* `packages/node_modules/function-tree`\n* `packages/node_modules/@cerebral`\n\nIf your app and the cerebral monorepo are in the same folder you can do from inside your\napp directory:\n\n```sh\n$ ln -s ../../cerebral/packages/node_modules/cerebral/ node_modules/\n# ...\n```\n\nJust remember to unlink the package before installing it from npm:\n\n```sh\n$ unlink node_modules/cerebral\n# ...\n```\n\n### Running demos\n\nGo to the respective `packages/demos/some-demo-folder` and run `npm start`\n\n### Testing\n\nYou can run all tests in all packages from root:\n\n`npm test`\n\nOr you can run tests for specific packages by going to package root and do the same:\n\n`npm test`\n\n### Changing the code\n\nWhen you make a code change you should create a branch first. When the code is changed and backed up by a test you can commit it from **the root** using:\n\n`npm run commit`\n\nThis will give you a guide to creating a commit message. Then you just push and create a pull request as normal on Github.\n\n### Release process\n\n* Review and merge PRs into `next` branch. It is safe to use "Update branch", the commit created by Github will not be part of `next` history\n* If changes to `repo-cooker`, clean Travis NPM cache\n* From command line:\n\n```sh\n$ git checkout next\n$ git pull\n$ npm install # make sure any new dependencies are installed\n$ npm install --no-save repo-cooker # needed to test release, make sure you have latest\n\xef\xbf\xbc$ npm run release # and check release notes\n\xef\xbf\xbc$ git checkout master\n$ git pull\n\xef\xbf\xbc$ git merge --ff-only next\n\xef\xbf\xbc$ git push\n```\n\n[npm-image]: https://img.shields.io/npm/v/cerebral.svg?style=flat\n[npm-url]: https://npmjs.org/package/cerebral\n[travis-image]: https://img.shields.io/travis/cerebral/cerebral.svg?style=flat\n[travis-url]: https://travis-ci.org/cerebral/cerebral\n[coverage-image]: https://img.shields.io/coveralls/github/cerebral/cerebral.svg?style=flat\n[coverage-url]: https://coveralls.io/github/cerebral/cerebral\n[bithound-image]: https://img.shields.io/bithound/code/github/cerebral/cerebral.svg?style=flat\n[bithound-url]: https://www.bithound.io/github/cerebral/cerebral\n[commitizen-image]: https://img.shields.io/badge/commitizen-friendly-brightgreen.svg?style=flat\n[commitizen-url]: http://commitizen.github.io/cz-cli/\n[discord-image]: https://img.shields.io/badge/discord-join%20chat-blue.svg?style=flat\n[discord-url]: https://discord.gg/0kIweV4bd2bwwsvH\n'