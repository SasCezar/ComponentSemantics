b'# geofirestore\n\n[![npm version](https://badge.fury.io/js/geofirestore.svg)](https://badge.fury.io/js/geofirestore) [![Build Status](https://travis-ci.org/geofirestore/geofirestore-js.svg?branch=master)](https://travis-ci.org/geofirestore/geofirestore-js) [![Coverage Status](https://coveralls.io/repos/github/geofirestore/geofirestore-js/badge.svg?branch=master)](https://coveralls.io/github/geofirestore/geofirestore-js?branch=master) [![dependencies Status](https://david-dm.org/geofirestore/geofirestore-js/status.svg)](https://david-dm.org/geofirestore/geofirestore-js) [![star this repo](https://githubbadges.com/star.svg?user=geofirestore&repo=geofirestore-js&style=flat)](https://github.com/geofirestore/geofirestore-js) [![fork this repo](https://githubbadges.com/fork.svg?user=geofirestore&repo=geofirestore-js&style=flat)](https://github.com/geofirestore/geofirestore-js/fork)\n\nFull documentation is available at [https://geofirestore.com](https://geofirestore.com).\n\nGeoFirestore is an open-source library that extends the Firestore library in order to store and query documents based on their geographic location. At its heart, GeoFirestore is just a wrapper for the Firestore library, exposing many of the same functions and features of Firestore. Its main benefit, however, is the possibility of retrieving only those documents within a given geographic area - all in realtime.\n\nGeoFirestore uses the [Firebase Cloud Firestore](https://firebase.google.com/docs/firestore/) for data storage, allowing query results to be updated in realtime as they change. GeoFirestore *selectively loads only the data near certain locations, keeping your applications light and responsive*, even with extremely large datasets.\n\nGeoFirestore is designed as a lightweight add-on to Firebase. To keep things simple, GeoFirestore stores data in its own format and its own location within your Firestore database.\n\n## Table of Contents\n\n* [Downloading GeoFirestore](#downloading-geofirestore)\n* [Example Usage](#example-usage)\n* [Documentation](#documentation)\n* [Limitations & Considerations](#limitations--considerations)\n  * [Data Structure](#data-structure)\n  * [`limit()`](#limit)\n* [Contributing](#contributing)\n\n## Downloading GeoFirestore\n\nYou can install GeoFirestore via npm:\n\n```bash\nnpm install geofirestore\n```\n\nOr you can use GeoFirestore via CDN:\n\n```HTML\n<script src="https://unpkg.com/geofirestore/dist/geofirestore.js"></script>\n```\n\n## Example Usage\n\nAssume you are building an app to rate bars and you store all information for a bar, e.g. name, business hours and price range, and you want to add the possibility for users to search for bars in their vicinity. This is where GeoFirestore comes in. You can store each bar using GeoFirestore, using the location to build an easily queryable document. GeoFirestore then allows you to easily query which bars are nearby in a simalar fashion as `geofire` but will also return the bar information (not just the key or location).\n\n### Examples\n\nYou can find a full list of our demos and view the code for each of them in the [examples directory](examples/) of this repository. The examples cover some of the common use cases for GeoFirestore.\n\n## Documentation\n\nFull documentation is available at [https://geofirestore.com](https://geofirestore.com). It mostly provides the same functionality as the Firestore library, in almost the same way as the Firestore library. Many questions can be addressed by looking at the [Firestore docs](https://firebase.google.com/docs/firestore/). However there are a few differences, and below is a little example of how to make a location based query.\n\n```TypeScript\nimport * as firebase from \'firebase/app\';\nimport \'firebase/firestore\';\n\n// If you\'re using ES6+/imports/ESM syntax for imports you can do this:\nimport { GeoCollectionReference, GeoFirestore, GeoQuery, GeoQuerySnapshot } from \'geofirestore\';\n\n// If you\'re using CommonJS/require syntax for imports you can do this:\nconst { GeoCollectionReference, GeoFirestore, GeoQuery, GeoQuerySnapshot } = require(\'geofirestore\');\n\n// Initialize the Firebase SDK\nfirebase.initializeApp({\n  // ...\n});\n\n// Create a Firestore reference\nconst firestore = firebase.firestore();\n\n// Create a GeoFirestore reference\nconst geofirestore: GeoFirestore = new GeoFirestore(firestore);\n\n// Create a GeoCollection reference\nconst geocollection: GeoCollectionReference = geofirestore.collection(\'restaurants\');\n\n// Add a GeoDocument to a GeoCollection\ngeocollection.add({\n  name: \'Geofirestore\',\n  score: 100,\n  // The coordinates field must be a GeoPoint!\n  coordinates: new firebase.firestore.GeoPoint(40.7589, -73.9851)\n})\n\n// Create a GeoQuery based on a location\nconst query: GeoQuery = geocollection.near({ center: new firebase.firestore.GeoPoint(40.7589, -73.9851), radius: 1000 });\n\n// Get query (as Promise)\nquery.get().then((value: GeoQuerySnapshot) => {\n  // All GeoDocument returned by GeoQuery, like the GeoDocument added above\n  console.log(value.docs);\n});\n```\n\nSimple. Easy. And very similar with how Firestore handles a `get` from a Firestore `Query`. The difference being the added ability to say query `near` a `center` point, with a set `radius` in kilometers.\n\n\n## Limitations & Considerations\n\nInternally GeoFirestore creates multiple geohashes around a requested area. It queries them and furter calculations on the seperate results are done within the libary. Because of this the additional filtering methods such as `orderBy`, `startAt` and `endAt` can not be passed though GeoFirestore to [Cloud Firestore](https://firebase.google.com/docs/firestore/) at this time.\n\n### Data Structure\n\nGeoFirestore is based off of the `geofire` JavaScript library. Documents generated and stored in your Firestore collection by GeoFirestore are typed/structured as:\n\n```TypeScript\ninterface GeoDocument {\n    g: string;\n    l: GeoPoint;\n    d: DocumentData;\n  }\n```\n\n* `g` is the geohash generated by the library, and is required in order to make the geoqery.\n* `l` is the GeoPoint used to generate the `g` field.\n* `d` is a sub-object which is where your data is stored.\n\nData must be structured this was in order to work, and is why you should use the GeoFirestore library to insert data in order to be able to query it.\n\n### `limit()`\n\nThe `limit` filtering method is exposed through GeoFirestore, however there are some unique considerations when using it. Limits on geoqueries are applied based on the distance from the center. Geoqueries require an aggregation of queries. When performing a geoquery the library applies the limit on the client. This may mean you are loading to the client more documents then you intended. Use with this performance limitation in mind.\n\n## Contributing\n\nAll code should pass tests, as well as be well documented. Please open PRs into the `dev` branch. [Please also see the Commit Message Guidelines](CONTRIBUTING.md) for how commit messages should be structured.\n'