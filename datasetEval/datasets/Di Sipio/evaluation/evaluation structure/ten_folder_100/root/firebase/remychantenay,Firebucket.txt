b"# Firebucket\n![Firebase](https://raw.githubusercontent.com/remychantenay/Firebucket/master/art/header.jpg)\n\nA glimpse into the astonishing future of BaaS- [Firebase](https://www.firebase.com/) with a simple To do list app.\n\n## Presentation\nSince its interesting evolution from the [Google I/O 2016](https://developers.googleblog.com/2016/05/firebase-expands-to-become-unified-app.html), my goal was to play with Firebase to witness the potential as well as the limitations.\n\nThis project is nothing more than a way to play with what I've learn. I was also curious to see how it fits with the tools I usually use such as Dagger and RxJava.\n\n![Screenshots](https://raw.githubusercontent.com/remychantenay/Firebucket/master/art/screenshots.jpg)\n\n## Read More\n* [Read more about Firebucket on Medium](https://medium.com/@remy.chantenay/f1r3b4s3-13cf28def122)\n\n## Download\n* [Google Play Store](https://play.google.com/store/apps/details?id=com.cremy.firebucket)\n\n## Firebase modules used\n* Database\n* Crash Report\n* Remote Config\n* Analytics\n* [FirebaseJobDispatcher](https://github.com/firebase/firebase-jobdispatcher-android)\n* Performance (introduced during the Google IO 17)\n\n## Tools\n* Firebase\n* Dependency Injection (Dagger 2)\n* ButterKnife\n* RxJava 2, RxAndroid\n\n## Pattern\n* **MVP**: Model-View-Presenter\n* **MVVM**: Model-View-ViewModel (using Android Data Binding)\n\n## Clean Architecture\nThe project is following a [Clean architecture](https://8thlight.com/blog/uncle-bob/2012/08/13/the-clean-architecture.html) approach.\n\n## Tests\nThe complete set of tests is coming."