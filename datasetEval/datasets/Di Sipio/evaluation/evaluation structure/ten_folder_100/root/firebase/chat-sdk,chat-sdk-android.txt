b'# Chat SDK for Android\n### Open Source Messaging framework for Android\n\n![Main Image](https://raw.githubusercontent.com/chat-sdk/chat-sdk-android/master/graphics/android-phone-images.png)\n\nChat SDK is a fully featured open source instant messaging framework for Android. Chat SDK is fully featured, scalable and flexible and follows the following key principles:\n\n- **Free.** The Chat SDK is free for [commercial use](https://github.com/chat-sdk/chat-sdk-android/blob/master/LICENSE.md)\n- **Open Source.** The Chat SDK is open source\n- **Full control of the data.** You have full and exclusive access to the user\'s chat data\n- **Quick integration.** Chat SDK is fully featured out of the box\n<!--- Install the demo **[Firebase](https://i.diawi.com/2JGr4o)** app now by clicking the link on your Android phone! -->\n- **Demo Versions.** **[XMPP](https://i.diawi.com/mE5GkM)** open this link on your Android phone to install\n- **Scalable.** Supports millons of daily users [[1](https://firebase.google.com/docs/database/usage/limits), [2](https://blog.process-one.net/ejabberd-massive-scalability-1node-2-million-concurrent-users/)]\n- **Backend agnostic.** Chat SDK can be customized to [support any backend](https://github.com/chat-sdk/chat-sdk-android#backend-agnostic-architecture) \n\n[![](https://raw.githubusercontent.com/chat-sdk/chat-sdk-android/master/graphics/chat-sdk-play.png)](https://play.google.com/store/apps/details?id=co.chatsdk.android.app_modules&hl=en)\n\n## Technical details\n\n- **Multiple backend support** [Firebase](https://firebase.google.com/), [ejabberd](https://www.ejabberd.im/), [OpenFire](https://www.igniterealtime.org/projects/openfire/)\n- **Data storage** all data is persisted using the [GreenDao](http://greenrobot.org/greendao/)\n- **Dynamic image loading** using [Fresco](http://frescolib.org/)\n- **Reactive** using [RXAndroid](https://github.com/ReactiveX/RxAndroid)\n- **Java 8** supports Java 8 and lamda expressions\n- **API Level 16+** Compatible with 99.3% of Android devices\n\n## Features\n\n- Private and group messages\n- Public chat rooms\n- Username / password, Facebook, Twitter, Anonymous and custom login\n- Phone number authentication\n- Push notifications (using FCM)\n- Text, Image and Location messages\n- User profiles\n- User search\n- Powered by Firebase\n- Firebase UI\n- [iOS Version](https://github.com/chat-sdk/chat-sdk-ios)\n- [Web Version](https://github.com/chat-sdk/chat-sdk-web)\n\n## Quick Start\n\n- [Standard Documentation](https://github.com/chat-sdk/chat-sdk-android/#adding-the-chat-sdk-to-your-project) \n- [Full step-by-step guide](https://github.com/thecmart/manuals/tree/master/Tutorials) (Good for beginners)\n- **New** Video Series: [Part 1](https://www.youtube.com/watch?v=AwhxFx8CXCg), [Part 2](https://www.youtube.com/watch?v=RA-wendcrZw), [Part 3](https://www.youtube.com/watch?v=TldTOCoWLko)\n- [UI Customization](https://github.com/chat-sdk/docs/blob/master/Android%20Customize%20UI.md)\n- [API Documentation](https://github.com/chat-sdk/docs)\n- [Code Examples](https://github.com/chat-sdk/chat-sdk-android/blob/master/app/src/main/java/co/chatsdk/android/app/ApiExamples.java)\n\n## Performance and Scalability\n\nThese are the average Firebase hosting costs calculated using the Firebase Database Profiling tool. Firebase charge 1 USD per GB of data downloaded (excluding images or files). We\'ve tabulated a few common operations and how many of them can be performed per 1 USD of monthly hosting cost:\n\n- Messages Received (1kb) = 1,000,000\n- Logins (10kb) = 100,000\n- Profile Update (0.2kb) = 5,000,000\n- User search (2kb) = 500,000 \n\nWhat\'s possible on the Firebase free plan (10GB / month):\n\n**500k logins, 5 million messages.** \n\nWhat\'s possible on the Flame plan (20GB / month / 20 USD):\n\n**1 million logins, 10 million messages.**\n\nThe real-time database will support up to **100k concurrent users**. From our experience, 1 concurrent connection is enough to support 10 users per minute. That means that at peak capacity, the Chat SDK could support **1 million users per minute** and well over **20 million monthly users**. \n\n## Modules\n\nThe Chat SDK has a number of additional modules that can easily be installed including:\n\n- [End-To-End Encryption](https://chatsdk.co/end-to-end-encryption/)\n- [File Messages](http://chatsdk.co/file-messages/)\n- [Typing indicator](http://chatsdk.co/typing-indicator/)\n- [Read receipts](http://chatsdk.co/read-receipts/)\n- [Location based chat](http://chatsdk.co/location-based-chat/)\n- [Last Online Indicator](https://chatsdk.co/firebase-last-online-indicator/)\n- [Audio messages](http://chatsdk.co/audio-messages/)\n- [Video messages](http://chatsdk.co/video-messages/)\n- [Sticker messages](https://chatsdk.co/sticker-messages/)\n- [Contact book integration](https://chatsdk.co/contact-book-integration/)\n- [User Blocking](http://chatsdk.co/user-blocking/)\n- [Social Login (free)](https://github.com/chat-sdk/chat-sdk-android#social-login)\n- [Push Notifications (free)](https://github.com/chat-sdk/chat-sdk-android#push-notifications)\n- [File Storage (free)](https://github.com/chat-sdk/chat-sdk-android/tree/master/chat-sdk-firebase-file-storage) (Included in basic setup instructions)\n- [Firebase UI (free)](https://github.com/chat-sdk/chat-sdk-android/tree/master/chat-sdk-firebase-ui) (Included in basic setup instructions)\n\n \n## Firebase Firestore\n\nIf you are interested in a version of the Chat SDK that supports Firebase\'s new database please vote on [this issue](https://github.com/chat-sdk/chat-sdk-android/issues/148) and help us meet our target on [Patreon](https://www.patreon.com/chatsdk).\n\n## Support the project\n\nWe would love to work full time developing the open source. At the moment we have to spend a substantial amount of time doing other consulting work to cover our costs. If you like what we\'re doing and would like to support us to focus more of our time on the open source project we would be very grateful. \n\n+ Support us directly on [Patreon](https://www.patreon.com/chatsdk) \xf0\x9f\x99\x8f\n+ Giving us a Github star \xe2\xad\x90\n+ Upvoting our page on [Product Hunt](https://www.producthunt.com/posts/chat-sdk)\n+ Tweet about the project using [@chat_sdk](https://mobile.twitter.com/chat_sdk) \n \n \n## Get involved!\nWe\'re very excited about the project and we\'re looking for other people to get involved. Over time we would like to make the best messaging framework for mobile. Helping us could involve any of the following:\n\n+ Providing feedback and feature requests\n+ Reporting bugs\n+ Fixing bugs\n+ Writing documentation\n+ Improving the user interface\n+ Help us update the library to use Swift\n+ Helping to write adapters for other services such as Layer, Pusher, Pubnub etc... \n+ Write a tutorial - **we pay $100** for quality tutorials\n\nIf you\'re interested please review the [Contributing\nDocument](https://github.com/chat-sdk/chat-sdk-ios/blob/master/CONTRIBUTING.md) for details of our development flow and the CLA then email me at [**team@sdk.chat**](mailto:team@sdk.chat).\n\n## Apps that use Chat SDK\n\n+ [CryptoFolio](https://play.google.com/store/apps/details?id=com.happycoderz.cryptofolio)\n+ [Parlor](http://parlor.me/)\n+ [Voice - Instant Messaging App](https://play.google.com/store/apps/details?id=com.skintmedia.voice&hl=en_GB)\n+ [Nex Tv Latino](https://play.google.com/store/apps/details?id=com.helpdevs.nexttv)\n\nIf you have an app that uses the Chat SDK let us know and we\'ll add a link. \n\n## Updating from 4.7.x to 4.8.x\n\nThe latest update brings a range of improvements and new features including:\n\n- Detailed profile screen:\n\t- User status\n\t- User availability\n\t- Country\n- Update to message view\n\t- Efficiency improvements\n- Screens updated to use Material Design\n\nThere are also a range of bug fixes and overall improvments. If we aren\'t able to document all the changes but if you have any issues updating your project, you can post on this [issue](https://github.com/chat-sdk/chat-sdk-android/issues/533) and we will answer your questions. \n\nThe [security rules](https://github.com/chat-sdk/chat-sdk-firebase) have also been updated so make sure to bring your project up to date. \t\t\n\nSeveral schema have also been deprecated and will be removed at some point in the future. These include:\n\n- `message/to` field added\n- `message/meta` will replace `json_v2`\n- `message/from` will replace `user-firebase-id`\n- `thread/meta` will replace `details`\n- `thread/meta/creator` will replace `creator-entity-id`\n- `thread/meta/type` will replace `type_v4`\n\nAt the moment these fields are not being used and are only included for future compatibility. However, in a future version of the client, the old fields will be removed and any old versions of the client will stop working.\n\n## Running the demo project\n\nThis repository contains a fully functional version of the Chat SDK which is configured using our Firebase account and social media logins. This is great way to test the features of the Chat SDK before you start integrating it with your app. \n\n> **Note:**\n>You should make sure that the correct SDK versions and build tools are installed in Android Studio. To do this open the Preferences panel and navigate to **Appearance & Behavour** -> **System Settings** -> **Android SDK** or click on the **SDK Manager** icon in the tool bar. Android SDK versions 8.1 and onwards should be installed. **Android SDK Build-Tools** version that is defined in the [`gradle.properties`](https://github.com/chat-sdk/chat-sdk-android/blob/master/gradle.properties) file under the `ANDROID_BUILD_TOOLS_VERSION` property. \n\nThe next step is to setup the Chat SDK using your Firebase and Social Accounts. To do that continue [here](https://github.com/chat-sdk/chat-sdk-android#firebase-setup).\n\n### Setup Service\n\nWe provide extensive documentation on Github but if you\xe2\x80\x99re a non-technical user or want to save yourself some work you can take advantage of our [setup and integration service](http://chatsdk.co/downloads/chat-sdk-setup-service/).\n\n## Adding the Chat SDK to your project\n###### Quick start guide - it takes about 10 minutes!\n\nIntegration with an existing project is simple. You can add the core libraries using Gradle. \n\n### Gradle\n\nUntil the project is published in jCenter, you will need to include the repository manually:\n\n```\nrepositories {\n    maven { url "http://dl.bintray.com/chat-sdk/chat-sdk-android" }\n    maven { url "https://maven.google.com" }\n    maven { url "https://jitpack.io" }\n}\n```\n\nThen add this to your `dependencies` area:\n\n```\ncompile \'co.chatsdk.chatsdk:chat-sdk-core:4.8.4\'\ncompile \'co.chatsdk.chatsdk:chat-sdk-ui:4.8.4\'\ncompile \'co.chatsdk.chatsdk:chat-sdk-firebase-adapter:4.8.4\'\ncompile \'co.chatsdk.chatsdk:chat-sdk-firebase-file-storage:4.8.4\'\n```\n\nYou may also need to enable Java 8:\n\n```\ncompileOptions {\n    sourceCompatibility JavaVersion.VERSION_1_8\n    targetCompatibility JavaVersion.VERSION_1_8\n}\n```\n\nYou can also add the [modules manually](https://github.com/chat-sdk/chat-sdk-android#adding-modules-manually) by downloading source code and importing the modules to Android Studio. \n\nFirebase depends on Google Services so we need to apply the google services plugin. This will read the **Google Services** file that we will add during Firebase setup. Add this to your top level `build.gradle` file.\n\n```\nbuildscript {\n    repositories {\n        jcenter()\n    }\n    dependencies {\n        classpath \'com.google.gms:google-services:4.0.1\'\n    }\n}\n```\n\nAdd this to the end of your app level `build.gradle` file:\n\n```\napply plugin: \'com.google.gms.google-services\'\n```\n\n#### Android X\n\nMake sure you\'ve added the following to your `gradle.properties` file:\n\n```\nandroid.useAndroidX=true\nandroid.enableJetifier=true\n```\n\n### Initializing the Chat SDK\n\nNow open your applications\'s main class and find the `onCreate` method. Add the following to setup the Chat SDK:\n\n```\nContext context = getApplicationContext();\n\ntry {\n    // Create a new configuration\n    Configuration.Builder builder = new Configuration.Builder();\n\n    // Perform any other configuration steps (optional)\n    builder.firebaseRootPath("prod");\n\n    // Initialize the Chat SDK\n    ChatSDK.initialize(context, config.build(), FirebaseNetworkAdapter.class, BaseInterfaceAdapter.class);\n    \n    // File storage is needed for profile image upload and image messages\n    FirebaseFileStorageModule.activate();\n\n    // Push notification module\n    FirebasePushModule.activate();\n\n    // Activate any other modules you need.\n    // ...\n    \n} catch (Exception e) {\n    // Handle any exceptions\n    e.printStackTrace();\n}\n\n``` \n\nActivate the core Chat SDK modules and any other modules you need. See the module setup guide for more information. \n\nLaunch the Chat SDK login activity by adding this to your `AndroidManifest.xml`:\n\n```\n<activity android:name="co.chatsdk.ui.login.SplashScreenActivity">\n    <intent-filter>\n        <action android:name="android.intent.action.MAIN" />\n        <category android:name="android.intent.category.LAUNCHER" />\n    </intent-filter>\n</activity>\n```\n\nOr if you want to launch the activity manually, you can do it using:\n\n```\nChatSDK.ui().startSplashScreenActivity(context);\n``` \n\n## Firebase Setup\n\n1. Go to the [Firebase](http://firebase.com/) website and sign up or log in\n2. Go to the [Firebase console](https://console.firebase.google.com/) and make a new project\n3. Click **Add project**\n4. Choose a name and a location\n5. Click **Settings** (the gear icon). On the General tab, click **Add App -> Add Firebase to your Android app**\n6. Enter your package name - found in your app\'s `build.gradle` file, app name and SHA-1 key (optional)\n7. Download the **google-services.json** file and add it to your app project. It should be added inside the `app` folder.\n8. Set a custom root path. The chat SDK allows you to run multiple chat instances on one Firebase database. This could be useful if you want *test* and *production* environments for example. To do this set `builder.firebaseRootPath("prod")` in the configuration builder.  \n9. In the Firebase dashboard click **Authentication -> Sign-in method** and enable all the appropriate methods \n\n### Security Rules\n\nFirebase secures your data by allowing you to write rules to govern who can access the database and what can be written. The rules are also needed to enable user search. To enable the rules see the guide [Enabling Security Rules](https://github.com/chat-sdk/chat-sdk-firebase).\n\n### Push Notifications\n\nFollow the instructions on our [Chat SDK Firebase repository](https://github.com/chat-sdk/chat-sdk-firebase)\n\nThen add the following to your `build.gradle`\n\n##### Add the library\n\n*Gradle*\n\n```\ncompile \'co.chatsdk.chatsdk:chat-sdk-firebase-push:4.8.4.3\'\n```\n\n[*Manual Import*](https://github.com/chat-sdk/chat-sdk-android#adding-modules-manually)\n\n```\ncompile project(path: \':chat-sdk-firebase-push\')\n```\n\n##### Enable the module\n\nIn your main class `onCreate` method add:\n\n```\nFirebasePushModule.activate();\n```\n\n### Enabling location messages\n\nThe Chat SDK needs two google services to support location messages. The [Google Places API](https://developers.google.com/places/) to select the location and the [Google Static Maps API](https://developers.google.com/maps/documentation/static-maps/) to display the location.\n\nAdd the following during the configuration stage:\n\n```\nbuilder.googleMaps("YOUR GOOGLE MAPS STATIC API KEY");\n```\n\nYou will also need to add your Google Places API key to the app manifest:\n\n```\n<meta-data android:name="com.google.android.geo.API_KEY" android:value="YOUR GOOGLE PLACES API KEY"/>\n```\n>**Note:**\n> You need to enable billing in your google cloud console or else you will not be able to view map images in your messages, For more information visit the [Google usage and billing support page](https://developers.google.com/places/web-service/usage-and-billing#important-enable-billing)\n\nYou can disable location messages using the `builder.locationMessagesEnabled(false)` option. \n\n### Conclusion\n\nCongratulations! \xf0\x9f\x8e\x89\xf0\x9f\x8e\x89 You\'ve just turned your app into a fully featured instant messenger! Keep reading below to learn how to further customize the Chat SDK.\n\n# Next Steps\n\n## Check out the Development Guide\n\nWe\'ve written a [comprehensive Development Guide](https://github.com/chat-sdk/docs) which is available in the docs repository. \n\nIf you thing that something is missing, you can post a new issue and we will update the guide. \n\nWe have a number of additional guides available on our [Wiki](https://github.com/chat-sdk/chat-sdk-android/wiki).\n\nAlso checkout the other guides:\n\n1. [Build a custom push notification handler](https://github.com/chat-sdk/docs/blob/master/Custom%20Push%20Handler.md)\n\n\n## UI Customization\n\nThe Chat SDK is designed to be easily customizable. If you want to customize any of the activities you can do it using the `ui` api. \n\n```\n// You could define a custom LoginActivity subclass here\nChatSDK.ui().setLoginActivity(YourLoginActivity.class);\n        \n// Or customise the profile fragment\nChatSDK.ui().setProfileFragmentProvider(user -> YourProfileFragment.newInstance(user));\n```\n\nEvery activity and fragment can be customized this way. \n\n## Configuration\n\nThe Chat SDK can be customized during setup using the configuration builder object. For a full list of options, take a look at [here](https://github.com/chat-sdk/chat-sdk-android/blob/master/chat-sdk-core/src/main/java/co/chatsdk/core/session/Configuration.java). \n\n#### Configuration using the Configuration Builder\n\nIn your main `onCreate` method you create a new instance of the `Configuration.Builder` and pass it to the `ChatSDK` singleton on initialization.\n\nHere you have the option to set far more properties. For example:\n\n##### Disable Facebook and Twitter login\n\n```\nbuilder.facebookLoginEnabled(false);\nbuilder.twitterLoginEnabled(false);\n```\n\n##### Set a custom user name and avatar\n\n```\nbuilder.defaultUserName("TestUser");\nbuilder.defaultUserAvatarUrl("http://your-site/image.png");\n```\n\nRemember that in the instructions we will advise you to configure using the Android Manifest but you are always free to use the direct configuration method instead.\n\n## Module Setup\n\nThere are a number of free and premium extensions that can be added to the Chat SDK. \n\n### Firebase Modules\n\nFor the following modules:\n\n- Firebase File Storage (free)\n- Firebase Push Notifications (free)\n- Firebase Social Login (free)\n- Fireabse UI (free)\n- [Typing indicator](http://chatsdk.co/downloads/typing-indicator/)\n- [Read receipts](http://chatsdk.co/downloads/read-receipts/)\n- [Location based chat](http://chatsdk.co/downloads/location-based-chat/)\n- [Audio messages](http://chatsdk.co/downloads/audio-messages/)\n- [Video messages](http://chatsdk.co/downloads/video-messages/)\n- [Contact book integration](http://chatsdk.co/downloads/contact-book-integration/)\n\nThe free modules are located in the main [Github repository](https://github.com/chat-sdk/chat-sdk-android). The premium modules can be purchased and downloaded from the links provided above. \n\n### Firebase UI\n\n##### Add the library\n\nAdd the following to your `build.gradle`\n\n```\ncompile \'co.chatsdk.chatsdk:chat-sdk-firebase-ui:4.8.4\'\n```\n\n##### Enable the module\n\nAdd the following to the end of your `onCreate` method:\n\n```\nFirebaseUIModule.activate(context, GoogleAuthProvider.PROVIDER_ID, PhoneAuthProvider.PROVIDER_ID);\n```\n\nYou can provide a list of providers as outlined in the [Firebase documentation](https://github.com/firebase/FirebaseUI-Android/blob/master/auth/README.md#sign-in-examples). \n\n>**Note**\n>You will need to remove the `com.facebook.sdk.ApplicationId` meta data from the app manifest or you will get a Gradle build error. \n\n### Social Login\n\nAdd the following to your `build.gradle`\n\n##### Add the library\n\n*Gradle*\n\n```\ncompile \'co.chatsdk.chatsdk:chat-sdk-firebase-social-login:4.8.4\'\n```\n\n[*Manual Import*](https://github.com/chat-sdk/chat-sdk-android#adding-modules-manually)\n\n```\ncompile project(path: \':chat-sdk-firebase-social-login\')\n```\n\n##### Enable the module\n\nIn your main class `onCreate` method add:\n\n```\nFirebaseSocialLoginModule.activate(getApplicationContext());\n```\n\n#### Facebook\n\n1. On the [Facebook developer](https://developers.facebook.com/) site get the **App ID** and **App Secret**\n2. Go to the [Firebase Console](https://console.firebase.google.com/) and open the **Auth** section\n3. On the **Sign in method** tab, enable the **Facebook** sign-in method and specify the **App ID** and **App Secret** you got from Facebook.\n4. Then, make sure your **OAuth redirect URI** (e.g. `my-app-12345.firebaseapp.com/__/auth/handler`) is listed as one of your **OAuth redirect URIs** in your Facebook app\'s settings page on the Facebook for Developers site in the **Product Settings > Facebook Login** config\n5. Add the following to your `AndroidManifest.xml`:\n\n  ```\n  <meta-data android:name="com.facebook.sdk.ApplicationId" android:value="@string/facebook_app_identifier"/>\n  ``` \n  \n  Add the following to your `chat_sdk_firebase.xml` file:\n  \n  ```\n  <string name="facebook_app_identifier">[FACEBOOK APP KEY]</string>\n  ```\n  \n6. Go back to the Facebook site and click "Add Platform". Choose Android and enter your **Bundle ID**. Then you will need to enter add the **Key Hashes** property. To do this first generate a [key store](https://developer.android.com/studio/publish/app-signing.html) for your app. Then generate the hash by running the following on MacOS:\n\n  ```\n  keytool -exportcert -alias <RELEASE_KEY_ALIAS> -keystore <RELEASE_KEY_PATH> | openssl sha1 -  binary | openssl base64\n  ```\n\n  On Windows, use:\n\n  ```\n  keytool -exportcert -alias <RELEASE_KEY_ALIAS> -keystore <RELEASE_KEY_PATH> | openssl sha1 -binary | openssl base64\n  ```\n\n#### Twitter\n\n1. [Register your app](https://apps.twitter.com/) as a developer application on Twitter and get your app\'s **API Key** and **API Secret**.\n2. In the [Firebase console](https://console.firebase.google.com/), open the **Auth** section.\n3. On the **Sign in method** tab, enable the **Twitter** sign-in method and specify the **API Key** and **API Secret** you got from Twitter.\n4. Then, make sure your Firebase **OAuth redirect URI** (e.g. `my-app-12345.firebaseapp.com/__/auth/handler`) is set as your **Callback URL** in your app\'s settings page on your [Twitter app\'s config](https://apps.twitter.com/).\n5. Add the following to the configuration where you initialize the Chat SDK:\n\n  ```\n  config.twitterLogin("consumer key", "consumer secret");\n  ```\n\n#### Google\n  \n1. If you haven\'t yet specified your app\'s SHA-1 fingerprint, do so from the [Settings page](https://console.firebase.google.com/project/_/settings/general/) of the Firebase console. See [Authenticating Your Client](https://developers.google.com/android/guides/client-auth) for details on how to get your app\'s SHA-1 fingerprint.\n\n  ```\n  keytool -exportcert -alias [KEY ALIAS] -keystore [PATH/TO/KEYSTORE] -list -v  \n  ```\n  \n >**Note:**\n >You may need to add multiple keys for debug and release\n\n2. In the [Firebase console](https://console.firebase.google.com/), open the **Auth** section.\n3. On the **Sign in method** tab, enable the **Google** sign-in method and click **Save**.\n4. You must pass your [server\'s client ID](https://developers.google.com/identity/sign-in/android/start-integrating#get_your_backend_servers_oauth_20_client_id) to the requestIdToken method. To find the OAuth 2.0 client ID.\n5. Open the [Credentials page](https://console.developers.google.com/apis/credentials) in the API Console.\n6. The **Web application type** client ID is your backend server\'s OAuth 2.0 client ID.\n7. Add the following to the configuration where you initialize the Chat SDK:\n\n  ```\n  config.googleLogin("web client key");\n  ```\n  \nSocial login can also be enabled or disabled by changing the Chat SDK [configuration](https://github.com/chat-sdk/chat-sdk-android#configuration).   \n  \n### Other Modules\n\nFor the following modules:\n\n- [Keyboard overlay](http://chatsdk.co/downloads/keyboard-overlay/)\n- [Sticker messages](http://chatsdk.co/downloads/sticker-messages/)\n- [Contact book integration](http://chatsdk.co/downloads/contact-book-integration/)\n- [Typing indicator](http://chatsdk.co/downloads/typing-indicator/)\n- [Read receipts](http://chatsdk.co/downloads/read-receipts/)\n- [Location based chat](http://chatsdk.co/downloads/location-based-chat/)\n- [Audio messages](http://chatsdk.co/downloads/audio-messages/)\n- [Video messages](http://chatsdk.co/downloads/video-messages/)\n- [Contact book integration](http://chatsdk.co/downloads/contact-book-integration/)\n\nAfter you have purchased the module you will be provided with a link to the module source code. Unzip this file and import it into Android Studio.\n\n1. Click **File** -> **New** -> **Import Module**\n2. Add the module to your `build.gradle`\n\n  ```\n  compile project(path: \':chat_sdk_[module name]\')\n  ```\n  \n3. Sync Gradle\n4. In your main class `onCreate` activate the module:\n\n  ```\n  ContactBookModule.activate();\n  ```\n  \n### Adding Modules Manually\n\nIn Android Studio:\n\n**File** -> **New** -> **Import Module**\n\nYou must import the following core module:\n\n- `chat-sdk-ui`\n\nAnd at least **one** network adapter:\n\n- `chat-sdk-firebase-adapter`\n- `chat_sdk_xmpp_adapter` - [Available here](https://chatsdk.co/downloads/xmpp-chat-sdk-for-android/)\n\nAnd any of the following optional modules:\n\n- `chat-sdk-firebase-file-storage`\n- `chat-sdk-firebase-push`\n- `chat-sdk-firebase-social-login`\n- `chat-sdk-audio-message` - [Available here](http://chatsdk.co/downloads/audio-messages/)\n- `chat-sdk-video-message` - [Available here](http://chatsdk.co/downloads/android-video-messages/)\n- `chat-sdk-sticker-message` - [Available here](http://chatsdk.co/downloads/sticker-messages/)\n- `chat-sdk-read-receipts` - [Available here](http://chatsdk.co/downloads/read-receipts/)\n- `chat-sdk-typing-indicator` - [Available here](http://chatsdk.co/downloads/typing-indicator/)\n- `chat-sdk-contact-book` - [Available here](http://chatsdk.co/downloads/contact-book-integration/)\n\nNow import the modules in your `build.gradle` file. \n\n```\ncompile project(path: \':chat-sdk-ui\')\ncompile project(path: \':chat-sdk-firebase-push\')\n``` \n\nIf you want to import modules manually, you should add the following to your `gradle.properties` file:\n\n```\nuseLocal=true\n```\n\nYou will also need to make sure that you\'ve included the library versions in your main project level `build.gradle` file by adding the following:\n\n```\next {\n    bintrayVersion = "1.8.4"\n    mavenGradleVersion = "2.1"\n    androidxAppcompatVersion = "1.0.2"\n    androidxConstraintLayoutVersion = "2.0.0-alpha5"\n    androidxLifecycleExtensionsVersion = "2.0.0"\n    androidxRecyclerViewVersion = "1.0.0"\n    androidxMultidexVersion = "2.0.1"\n    materialVersion = "1.0.0"\n    playAuthVersion = "16.0.1"\n    playMapsVersion = "16.1.0"\n    googlePlacesVersion = "1.1.0"\n    playLocationVersion = "16.0.0"\n    firebaseUiVersion = "4.3.2"\n    firebaseCoreVersion = "16.0.9"\n    firebaseDatabaseVersion = "17.0.0"\n    firebaseAuthVersion = "17.0.0"\n    firebaseStorageVersion = "17.0.0"\n    firebaseMessagingVersion = "18.0.0"\n    firebaseFunctionsVersion = "17.0.0"\n    firebaseIIDVersion = "18.0.0"\n    timberVersion = "4.7.1"\n    greenDaoVersion = "3.2.2"\n    frescoVersion = "1.13.0"\n    rxJavaVersion = "2.2.8"\n    rxAndroidVersion = "2.1.1"\n    gsonVersion = "2.8.5"\n    jodaTimeVersion = "2.10.1"\n    jodaConvertVersion = "2.2.0"\n    apacheCommonsVersion = "3.8.1"\n    compressorVersion = "2.1.0"\n    okHttpVersion = "3.11.0"\n    facebookLoginVersion = "4.38.1"\n    twitterVersion = "3.3.0"\n    prettyTimeVersion = "4.0.1.Final"\n    countryPickerVersion = "2.0.0"\n    imageCropperVersion = "2.8.0"\n    photoViewVersion = "2.3.0"\n    materialDrawerVersion = "6.1.2"\n    androidDatabaseSQLCipher = "4.1.3@aar"\n    matisseVersion = "0.5.2-beta4"\n    speedDial = "2.0.1"\n}\n```\n\nThis will prompt the modules to use local versions of the core Chat SDK modules rather than the versions hosted on Gradle. \n\n#### Configuring the project\n\nNow that the modules have been added, we need to configure the project. \n\n**SDK Version**\n\nNow you will see that gradle cannot be sync because it missing some parameters. Open to **gradle.properties** file in the root of the project and make sure the following lines are set to the [latest values](https://github.com/chat-sdk/chat-sdk-android/blob/master/gradle.properties).\n\n```\nMIN_SDK = 16\nANDROID_BUILD_TARGET_SDK_VERSION = 25\nANDROID_COMPILE_SDK_VERSION = 28\nANDROID_SUPPORT_VERSION = 28.0.0\n```\n\n> **Note:**\n>You should make sure that the correct SDK versions and build tools are installed in Android Studio. To do this open the Preferences panel and navigate to **Appearance & Behavior** -> **System Settings** -> **Android SDK** or click on the **SDK Manager** icon in the tool bar. Android SDK versions 4.4 and onwards should be installed. **Android SDK Build-Tools** version 21.1.0 should be installed. \n\nAdd any other modules that you need. Then sync the project with gradle. \n\n## Backend agnostic architecture\n\nThe user interface for the Chat SDK is completely decoupled from the backend. This means that the Chat SDK can be adapted to connect to any type of messaging server by creating a custom network adapter. Currently we have written two network adapters, one for Firebase and another for XMPP. This has a number of benefits:\n\n1. You can connect the Chat SDK user interface to your messaging server by writing a custom network adapter. This saves you the complex job of building a full user interface. \n\n2. You can switch the backend your app uses. Imagine that you decide to start off with the Firebase version of the Chat SDK but at some point you decide that you want to switch to using an XMPP server. Usually, this would require a full rewrite of the messaging client but with the Chat SDK it can be achieved by changing one line of code! \n\nIf you want more details about writing a custom network adapter you can email us at [team@sdk.chat](mailto:team@sdk.chat).\n  \n## The license\n\nWe offer a choice of two license for this app. You can either use the [Chat SDK](https://chatsdk.co/chat-sdk-license/) license or the [GPLv3](https://www.gnu.org/licenses/gpl-3.0.en.html) license. \n\nMost Chat SDK users either want to add the Chat SDK to an app that will be released to the App Store or they want to use the Chat SDK in a project for their client. The **Chat SDK** license gives you complete flexibility to do this for free.\n\n**Chat SDK License Summary**\n\n+ License does not expire.\n+ Can be used for creating unlimited applications\n+ Can be distributed in binary or object form only\n+ Commercial use allowed\n+ Can modify source-code but cannot distribute modifications (derivative works)\n\nIf a user wants to distribute the Chat SDK source code, we feel that any additions or modifications they make to the code should be contributed back to the project. The GPLv3 license ensures that if source code is distributed, it must remain open source and available to the community.\n\n**GPLv3 License Summary**\n\n+ Can modify and distribute source code\n+ Commerical use allowed\n+ Cannot sublicense or hold liable\n+ Must include original license\n+ Must disclose source \n\n**What does this mean?**\n\nPlease check out the [Licensing FAQ](https://github.com/chat-sdk/chat-sdk-ios/blob/master/LICENSE.md) for more information.\n'