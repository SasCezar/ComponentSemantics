b'# Rx2Firebase\n[Rxjava 2.0](https://github.com/ReactiveX/RxJava/tree/2.x) wrapper on Google\'s [Android Firebase](https://firebase.google.com/docs/android/setup?hl=es) library.\n\nThis repository started as a personal usage of [Nick Moskalenko](https://github.com/nmoskalenko) RxFirebase library. You can check his work [here](https://github.com/nmoskalenko/RxFirebase).\n\n\n## Download\n\n##### Gradle:\n\n```groovy\ndependencies {\n  compile \'com.github.FrangSierra:RxFirebase:1.5.6\'\n}\n```\n```\nallprojects {\n\t\trepositories {\n\t\t\t...\n\t\t\tmaven { url "https://jitpack.io" }\n\t\t}\n\t}\n```\n\n## Usage\nLibrary provides set of static methods of classes:\n* RxFirebaseAuth\n* RxFirebaseUser\n* RxFirebaseDatabase\n* RxFirebaseStorage\n* RxFirestore\n* RxFirebaseFunctions\n\n### Authentication:\nSign in with email and password:\n\n```java\n    RxFirebaseAuth.signInWithEmailAndPassword(auth, email, password)\n                .map(authResult -> authResult.getUser() != null)\n                .take(1)\n                .subscribe(logged -> {\n                    Log.i("Rxfirebase2", "User logged " + logged);\n                });\n```\n### Firestore:\n\nYou can observe values providing the Class of expected data like:\n\n```java\n    DocumentReference document = firestore.collection("Users").document("UserId_1");\n    RxFirestore.observeDocumentRef(document)\n       .subscribe( userDoc -> {\n          //Do something with my snapshot\n       });\n```\n\nGet and set documents on a specific reference:\n\n```java\n    DocumentReference document = firestore.collection("Users").document("UserId_1");\n    User mynewUser = User("newUserName", 24);\n    //Set data\n    RxFirestore.setDocument(document, myNewUser).subscribe();\n    //Get and map data\n    RxFirestore.getDocument(document)\n       .map( userDoc -> { return userDoc.toObject(User.class); })\n       .subscribe( casterUser -> {\n          //Do something with my already casted user\n       });\n```\n\nFinally you can do sync operations on the database using `runTransaction` and if you wanna realize multiple\noperations at once, you should use the method `atomicOperation` which wraps the `WriteBatch` related methods from Firestore.\n\n### Database:\n\nYou can observe values providing the Class of expected data like:\n\n```java\n    RxFirebaseDatabase.observeSingleValueEvent(getPostsRef().child("posts"), Post.class)\n                .subscribe(post -> {\n           //Do something with yourpost \n        });\n```\n\nor providing your own mapper between DataSnapshot and your data type:\n\n```java\n    RxFirebaseDatabase.observeSingleValueEvent(getPostsRef().child("posts"),\n                dataSnapshot -> {\n                    // do your own mapping here\n                    return new Author();\n                })\n                .subscribe(author -> {\n                    // process author value\n                });\n```\n\nThere are some pre-defined mappers to make things easier:\n\n##### Observing list values\n\n```java\n    RxFirebaseDatabase.observeSingleValueEvent(getPostsRef().child("posts"), DataSnapshotMapper.listOf(PostComment.class))\n                .subscribe(blogPost -> {\n                    // process postcomment list item\n                });\n```\n\n##### Observing map values\n\n```java\n     RxFirebaseDatabase.observeSingleValueEvent(getPostsRef().child("posts"), DataSnapshotMapper.mapOf(PostComment.class))\n                .subscribe(PostCommentAsMapItem -> {\n                    // process blogPost as key-value pair\n                });\n```\n\n### Storage:\n\nDownload file from Firebase storage\n\n```java\n    RxFirebaseStorage.getFile(getStorageRef(), targetFile)\n                .subscribe(taskSnapshot -> {\n                    Log.i("RxFirebaseSample", "transferred: " + snapshot.getBytesTransferred() + " bytes");\n                }, throwable -> {\n                    Log.e("RxFirebaseSample", throwable.toString());\n            });\n```\n\nor download file as bytes array\n\n```java\n    RxFirebaseStorage.getBytes(getStorageRef(), 1024 * 100)\n                .subscribe(bytes -> {\n                    Log.i("RxFirebaseSample", "downloaded: " + new String(bytes));\n                }, throwable -> {\n                    Log.e("RxFirebaseSample", throwable.toString());\n            });\n```\n### RxFirebaseQuery\n\nRxFirebaseQuery is a builder class used to work together with methods from RxFirebaseDatabase that allow you to retrieve data from multiple databaseReferences. Doing this allow you to build and create dynamic queries to retrieve database objects from references retrieved from different tables easily. \nAt the moment RxFirebaseQuery just allow the user to create the queries and retrieve the data. Filters should be done with the `DatabaseReference` items that you pass to the constructor. In other hand for update and delete data you should use `Firebase` method `updateChildren()`\n```java\n\tDatabaseReference reference = FirebaseDatabase.getInstance().getReference();\n\t\t      DatabaseReference from = reference.child("tweets");\n\t\t      Query where = reference.child("users").child(userId).child("feedReferences");\n\t\t      RxFirebaseQuery.getInstance()\n\t\t\t    .filterByRefs(from, where)\n\t\t\t    .asList()\n\t\t\t    .subscribe(dataSnapshots -> {\n\t\t\t       Log.i("RxFirebase", "Retrieved a total of " + dataSnapshots.size() + " tweets");\n\t\t\t       for (DataSnapshot dataSnapshot : dataSnapshots) {\n\t\t\t\t  Tweet tweet = dataSnapshot.getValue(Tweet.class);\n\t\t\t\t  Log.i("RxFirebase", "New tweet for user feed: " + tweet.getDescription());\n\t\t\t       }\n\t\t\t    });\n\n## RxJava and RxJava 2.0\nOne of the differences between RxJava and RxJava 2 is that RxJava 2 no longer accepts `null` values. Throwing a `NullPointerException` immediately. For this reason some of the methods of the library as been redesigned to return a `Completable` instead of a `Observable<Void>`. For example:\n\n#### RxFirebase\n\n```java\n@NonNull\npublic static Observable<Void> updateEmail(@NonNull final FirebaseUser firebaseUser, @NonNull final String email) {\n        return Observable.create(new Observable.OnSubscribe<Void>() {\n            @Override\n            public void call(final Subscriber<? super Void> subscriber) {\n                RxHandler.assignOnTask(subscriber, firebaseUser.updateEmail(email));\n            }\n        });\n}\n```\n\n#### Rx2Firebase\n\n```java\n@NonNull\npublic static Completable updateEmail(@NonNull final FirebaseUser firebaseUser, @NonNull final String email) {\n        return Completable.create(new CompletableOnSubscribe() {\n            @Override\n            public void subscribe(CompletableEmitter emitter) throws Exception {\n                RxCompletableHandler.assignOnTask(emitter, firebaseUser.updateEmail(email));\n            }\n        });\n}\n```\n\n`RxCompletableHandler` manages the CompletableEmitters in the same way that `RxHandler` manages the `Subscriber`.\nYou can check all the differences between RxJava and RxJava 2.0 in the next [Link](https://github.com/ReactiveX/RxJava/wiki/What\'s-different-in-2.0)\n\n## License\n\n\tMIT License\n\n\tCopyright (c) 2016 Francisco Garc\xc3\xada Sierra\n\n\tPermission is hereby granted, free of charge, to any person obtaining a \n\tcopy of this software and associated documentation files (the "Software"), \n\tto deal in the Software without restriction, including without limitation \n\tthe rights to use, copy, modify, merge, publish, distribute, sublicense, \n\tand/or sell copies of the Software, and to permit persons to whom the \n\tSoftware is furnished to do so, subject to the following conditions:\n\n\tThe above copyright notice and this permission notice shall be included \n\tin all copies or substantial portions of the Software.\n\n\tTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\tOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\tFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\tTHE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\tLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING \n\tFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR \n\tOTHER DEALINGS IN THE SOFTWARE.\n\n\n## Support on Beerpay\nHey dude! Help me out for a couple of :beers:!\n\n[![Beerpay](https://beerpay.io/FrangSierra/RxFirebase/badge.svg?style=beer-square)](https://beerpay.io/FrangSierra/RxFirebase)  [![Beerpay](https://beerpay.io/FrangSierra/RxFirebase/make-wish.svg?style=flat-square)](https://beerpay.io/FrangSierra/RxFirebase?focus=wish)\n'