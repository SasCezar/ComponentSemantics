b"# FirebaseUI for iOS \xe2\x80\x94 UI Bindings for Firebase [![Build Status](https://travis-ci.org/firebase/FirebaseUI-iOS.svg?branch=master)](https://travis-ci.org/firebase/FirebaseUI-iOS)\n\nFirebaseUI is an open-source library for iOS that allows you to quickly connect common UI elements to the [Firebase](https://firebase.google.com?utm_source=FirebaseUI-iOS) database for data storage, allowing views to be updated in realtime as they change, and providing simple interfaces for common tasks like displaying lists or collections of items.\n\nAdditionally, FirebaseUI simplifies Firebase authentication by providing easy to use auth methods that integrate with common identity providers like Facebook, Twitter, and Google as well as allowing developers to use a built in headful UI for ease of development.\n\nFirebaseUI clients are also available for [Android](https://github.com/firebase/FirebaseUI-Android) and [web](https://github.com/firebase/firebaseui-web).\n\n![](https://raw.githubusercontent.com/firebase/FirebaseUI-iOS/master/samples/demo.gif)\n\n## Installing FirebaseUI for iOS\n\nFirebaseUI supports iOS 8.0+. We recommend using [CocoaPods](https://cocoapods.org/pods/FirebaseUI), add\nthe following to your `Podfile`:\n\n```ruby\npod 'FirebaseUI', '~> 5.0'       # Pull in all Firebase UI features\n```\n\nIf you don't want to use all of FirebaseUI, there are multiple subspecs which can selectively install subsets of the full feature set:\n\n```ruby\n# Only pull in FirebaseUI Firestore features\npod 'FirebaseUI/Firestore', '~> 8.0'\n\n# Only pull in FirebaseUI Database features\npod 'FirebaseUI/Database', '~> 8.0'\n\n# Only pull in FirebaseUI Storage features\npod 'FirebaseUI/Storage', '~> 8.0'\n\n# Only pull in FirebaseUI Auth features\npod 'FirebaseUI/Auth', '~> 8.0'\n\n# Only pull in Facebook login features\npod 'FirebaseUI/Facebook', '~> 8.0'\n\n# Only pull in Google login features\npod 'FirebaseUI/Google', '~> 8.0'\n\n# Only pull in Phone Auth login features\npod 'FirebaseUI/Phone', '~> 8.0'\n```\n\nIf you're including FirebaseUI in a Swift project, make sure you also have:\n\n```ruby\nplatform :ios, '9.0'\nuse_frameworks!\n```\n\nOtherwise, you can include the FirebaseUI Xcode project from this repo in\nyour project. You also need to \n[add the Firebase framework](https://firebase.google.com/docs/ios/setup) \nto your project.\n\n## Documentation\n\nThe READMEs for components of FirebaseUI can be found in their respective\nproject folders.\n\n- [Auth](Auth/README.md)\n- [PhoneAuth](PhoneAuth/README.md)\n- [Database](Database/README.md)\n- [Firestore](Firestore/README.md)\n- [Storage](Storage/README.md)\n\n## Local Setup\n\nIf you'd like to contribute to FirebaseUI for iOS, you'll need to run the\nfollowing commands to get your environment set up:\n\n```bash\n$ git clone https://github.com/firebase/FirebaseUI-iOS.git\n$ cd FirebaseUI-iOS\n$ pod install\n```\n\nAlternatively you can use `pod try FirebaseUI` to install the Objective-C or Swift sample projects.\n\n## Sample Project Configuration\n\nYou'll have to configure your Xcode project in order to run the samples.\n\n1. Your Xcode project should contain a `GoogleService-Info.plist`, downloaded from [Firebase console](https://console.firebase.google.com) when you add your app to a Firebase project.<br>\nCopy the `GoogleService-Info.plist` into the sample project folder (`samples/obj-c/GoogleService-Info.plist` or `samples/swift/GoogleService-Info.plist`).\n\n1. Update URL Types.<br>\nGo to `Project Settings -> Info tab -> Url Types` and update values for:\n\t+ `REVERSED_CLIENT_ID` (get value from `GoogleService-Info.plist`)\n\t+ `fb{your-app-id}` (put Facebook App Id)\n\n1. Update `Info.plist` with Facebook configuration values\n\t+ `FacebookAppID -> {your-app-id}` (put Facebook App Id)\n\n1. Enable Keychain Sharing.<br>\nFacebook SDK requires keychain sharing.<br>\nThis can be done here: `Project Settings -> Capabilities -> KeyChain Sharing -> ON`\n\n1. Don't forget to configure your Firebase App Database using [Firebase console](https://console.firebase.google.com).<br>\nDatabase should contain appropriate read/write permissions and folders (`objc_demo-chat` and `swift_demo-chat` respectively)\n\n1. In Order to use `Phone Auth` provider you should [Configure Push Notifications](#configure-apple-push-notifications)\n\n#### Configure Apple Push Notifications\n\n##### Enable silent push notifications in Xcode\n\n  * `Push Notification` - Under `Capabilities` tab in your app target choose `Push Notifications` and put the switch to the `On` position.\n  * `Background Mode` - Under `Capabilities` tab in your app target choose `Background Modes` put the switch to the `On` position.  In the list of available modes select `Background fetch` and `Remote notifications` (If available).\n\n##### Upload APNS Certificate to Firebase\n\n1. Create your `Provisioning APNS SSL Certificates` by following the steps on the following link.\nhttps://firebase.google.com/docs/cloud-messaging/ios/certs\n\n1. Upload your `APNS Certificate` to Firebase:\n    + Inside your project in the Firebase console, select the gear icon, select `Project Settings`, and then select the `Cloud Messaging` tab.\n    + Select the `Upload Certificate` button for your development certificate, your production certificate, or both. At least one is required.\n    + For each certificate, select the `.p12 file`, and provide the password, if any. Make sure the `bundle ID` for this certificate matches the `bundle ID` of your app. Select `Save`.\n\n## Contributing to FirebaseUI\n\n### Contributor License Agreements\n\nWe'd love to accept your sample apps and patches! Before we can take them, we\nhave to jump a couple of legal hurdles.\n\nPlease fill out either the individual or corporate Contributor License Agreement\n(CLA).\n\n  * If you are an individual writing original source code and you're sure you\n    own the intellectual property, then you'll need to sign an [individual CLA]\n    (https://developers.google.com/open-source/cla/individual).\n  * If you work for a company that wants to allow you to contribute your work,\n    then you'll need to sign a [corporate CLA]\n    (https://developers.google.com/open-source/cla/corporate).\n\nFollow either of the two links above to access the appropriate CLA and\ninstructions for how to sign and return it. Once we receive it, we'll be able to\naccept your pull requests.\n\n### Contribution Process\n\n1. Submit an issue describing your proposed change to the repo in question.\n1. The repo owner will respond to your issue promptly.\n1. If your proposed change is accepted, and you haven't already done so, sign a\n   Contributor License Agreement (see details above).\n1. Fork the desired repo, develop and test your code changes.\n1. Ensure that your code adheres to the existing style of the library to which\n   you are contributing.\n1. Ensure that your code has an appropriate set of unit tests which all pass.\n1. Submit a pull request\n"