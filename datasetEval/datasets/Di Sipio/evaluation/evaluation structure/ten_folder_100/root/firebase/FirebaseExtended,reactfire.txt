b"# Reactfire\n\nHooks, Context Providers, and Components that make it easy to interact with\nFirebase.\n\n> If you're looking for docs for the _deprecated_ ReactFire v1 (the one that\n> uses mixins), click\n> [here](https://github.com/FirebaseExtended/reactfire/tree/v1.0.0)\n\n**Status: Alpha**. ReactFire is meant for React Concurrent Mode, which is only\navailable in\n[experimental React builds](https://reactjs.org/docs/concurrent-mode-adoption.html#installation).\n\n## What is ReactFire?\n\n- **Easy realtime updates for your function components** - Reactfire's hooks,\n  like `useFirestoreCollection` and `useUser`, let you easily subscribe to\n  events, and automatically unsubscribe when your component unmounts.\n- **Loading states handled by `<Suspense>`** - Reactfire's hooks throw promises\n  that Suspense can catch. No more `isLoaded ?...` - let React\n  [handle it for you](https://reactjs.org/blog/2018/11/27/react-16-roadmap.html#react-166-shipped-the-one-with-suspense-for-code-splitting).\n- **Dead-simple Real User Monitoring (RUM)** - Easily enable Firebase\n  Performance Monitoring's\n  [automatic traces](https://firebase.google.com/docs/perf-mon/automatic-web),\n  and instrument your Suspenseful loads with Reactfire's `<SuspenseWithPerf>`\n  component\n\n## Install\n\n```bash\n# npm\nnpm install reactfire@next\n# yarn\nyarn add reactfire@next\n```\n\nIf you like living life on the edge, use `reactfire@canary`.\n\n## Example use\n\nCheck out the\n[live version on StackBlitz](https://stackblitz.com/edit/reactfire-sample)!\n\n```jsx\nimport React, { Component } from 'react';\nimport { render } from 'react-dom';\nimport './style.css';\nimport {\n  FirebaseAppProvider,\n  useFirestoreDocData,\n  SuspenseWithPerf\n} from 'reactfire';\n\nimport 'firebase/performance';\n\nconst firebaseConfig = {\n  /* add your config object from the Firebase console */\n};\n\nfunction Burrito() {\n  // lazy load the Firestore SDK and create a ref\n  const burritoRef = useFirestore()\n    .collection('tryreactfire')\n    .doc('burrito');\n\n  // subscribe to the doc. just one line!\n  // throws a Promise for Suspense to catch,\n  // and then streams live updates\n  const burrito = useFirestoreDocData(burritoRef);\n\n  // get the value from the doc\n  const isYummy = burrito.yummy;\n\n  return <p>The burrito is {isYummy ? 'good' : 'bad'}!</p>;\n}\n\nfunction App() {\n  return (\n    <FirebaseAppProvider firebaseConfig={firebaseConfig} initPerformance>\n      <h1>\xf0\x9f\x8c\xaf</h1>\n      <SuspenseWithPerf\n        fallback={'loading burrito status...'}\n        traceId={'load-burrito-status'}\n      >\n        <Burrito />\n      </SuspenseWithPerf>\n    </FirebaseAppProvider>\n  );\n}\n\nrender(<App />, document.getElementById('root'));\n```\n\n## Learn More\n\n- [**Quickstart**](./docs/quickstart.md)\n- [**Common Use Cases**](./docs/use.md)\n- [**API Reference**](./docs/reference.md)\n\n## Contributing\n\n### For development\n\n1. [Clone](https://help.github.com/en/github/creating-cloning-and-archiving-repositories/cloning-a-repository)\n   this repository (or a\n   [fork](https://help.github.com/en/github/getting-started-with-github/fork-a-repo#propose-changes-to-someone-elses-project))\n1. At the project root, install all modules by running `yarn install`.\n1. `cd` into the _reactfire_ directory. Run `yarn` and `yarn watch`.\n1. In a new terminal, `cd` into the _reactfire/sample_ directory. run `yarn` and\n   `yarn start`.\n1. Head over to https://localhost:3000 to see the running sample! If you edit\n   the reactfire source, the sample will reload.\n\n### Testing\n\n1. `cd` into the _reactfire/reactfire_ directory\n1. run `yarn test`\n"