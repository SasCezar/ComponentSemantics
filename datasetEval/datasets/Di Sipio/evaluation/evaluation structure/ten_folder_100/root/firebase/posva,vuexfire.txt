b'# This package has been moved to [vuejs/vuefire](https://github.com/vuejs/vuefire/tree/master/packages/vuexfire) repository.\n\n---\n\n# VuexFire [![Build Status](https://img.shields.io/circleci/project/posva/vuexfire/master.svg)](https://circleci.com/gh/posva/vuexfire) [![npm package](https://img.shields.io/npm/v/vuexfire.svg)](https://www.npmjs.com/package/vuexfire) [![coverage](https://img.shields.io/codecov/c/github/posva/vuexfire/master.svg)](https://codecov.io/github/posva/vuexfire) ![size](http://img.badgesize.io/posva/vuexfire/master/dist/vuexfire.min.js.svg?compression=gzip)\n\n> SSR ready Firebase binding for [Vuex](https://github.com/vuejs/vuex)\n\nSupports only Vue 2, Vuex 2 and Firebase JavaScript SDK 2/3/4/5.\nIf you need an older version check the [`v1` branch](https://github.com/posva/vuexfire/tree/v1): `npm i -D vuexfire@v1`\n\n## Installation\n\n1. Using a CDN:\n\n``` html\n<script src="https://unpkg.com/vuexfire@next"></script>\n```\n\n2. In module environments, e.g CommonJS:\n\n``` bash\nnpm install vue firebase vuexfire@next --save\n```\n\n## Usage\n\nAdd the mutations to your root Store and make sure to define the property you\nwant to bind in the state first:\n\n``` js\nimport { firebaseMutations } from \'vuexfire\'\nconst store = new Vuex.Store({\n  state: {\n    todos: [], // Will be bound as an array\n    user: null // Will be bound as an object\n  },\n  mutations: {\n    // your mutations\n    ...firebaseMutations\n  }\n})\n```\n\nIt works with modules as well, but **you don\'t need to add the mutations there**:\n```js\nconst store = new Vuex.Store({\n  modules: {\n    todos: {\n      state: {\n        todos: [], // Will be bound as an array\n        user: null // Will be bound as an object\n      },\n    }\n  }\n})\n```\n\nIn order to use VuexFire, you have to enhance actions. This action enhancer\ntakes the actual action and enhances it with two additional parameters in the\ncontext, `bindFirebaseRef` and `unbindFirebaseRef`:\n\n```js\nimport { firebaseAction } from \'vuexfire\'\n\nconst setTodosRef = firebaseAction(({ bindFirebaseRef, unbindFirebaseRef }, { ref }) => {\n  // this will unbind any previously bound ref to \'todos\'\n  bindFirebaseRef(\'todos\', ref)\n  // you can unbind any ref easily\n  unbindFirebaseRef(\'user\')\n})\n```\n\nAccess it as a usual piece of the state:\n\n```js\nconst Component = {\n  template: \'<div>{{ todos }}</div>\',\n  computed: Vuex.mapState([\'todos\']),\n  created () {\n    this.$store.dispatch(\'setTodosRef\', db.collection(\'todos\'))\n  }\n}\n```\n\n## Browser support\n\nVuexFire requires basic `WeakMap` support, which means that if you need to\nsupport any of these browsers:\n\n- IE < 11\n- Safari < 7.1\n- Android < 5.0\n\nYou\'ll have to include a polyfill. You can\nuse [Benvie/WeakMap](https://github.com/Benvie/WeakMap).\n\nYou can find more information about `WeakMap`\nsupport [here](http://kangax.github.io/compat-table/es6/#test-WeakMap).\n\n## How does it work?\n\nVuexFire uses multiple global mutations prefixed by `vuexfire/` to call the\nactual mutations to modify objects and arrays. It listens for updates to your\nfirebase database and commits mutations to sync your state. Thanks to the action\nenhancer `firebaseAction`, it gets access to the local `state` and `commit` so\nit works with modules too :+1:\n\n## Examples\n\nYou can check out a complete example in the `/examples` directory.\n\n## API\n\n### firebaseMutations\n\nThis object contains VuexFire internal mutations. They are all prefixed by\n`vuexfire/`. This object must be added in the root Store mutations object.\n\n### bindFirebaseRef(key, ref)\n\n_Only available inside of an enhanced action_\n\nBinds a firebase reference to a property in the state. If there was already\nanother reference bound to the same property, it unbinds it first.\n\n```js\nbindFirebaseRef(\'todos\', ref)\n```\n\nReturns a promise which will resolve when the data is ready, or throw an error if something goes wrong:\n\n```js\nbindFirebaseRef(\'todos\', ref).then(() => {\n  commit(\'setTodosLoaded\', true)\n}).catch((err) => {\n  console.log(err)\n})\n```\n\n### unbindFirebaseRef(key)\n\n_Only available inside of an enhanced action_\n\nUnbinds a bound firebase reference to a given property in the state.\n\n```js\nunbindFirebaseRef(\'todos\')\n```\n\n## License\n\n[MIT](http://opensource.org/licenses/MIT)\n\n## Support on Beerpay\nHey dude! Help me out for a couple of :beers:!\n\n[![Beerpay](https://beerpay.io/posva/vuexfire/badge.svg?style=beer-square)](https://beerpay.io/posva/vuexfire)  [![Beerpay](https://beerpay.io/posva/vuexfire/make-wish.svg?style=flat-square)](https://beerpay.io/posva/vuexfire?focus=wish)\n'