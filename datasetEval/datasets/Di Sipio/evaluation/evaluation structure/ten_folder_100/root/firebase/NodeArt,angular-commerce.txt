b"# Store components\r\n\r\nOnline store components written in Angular.  \r\n\r\nFull API and documentation check [here](https://nodeart.github.io/).\r\n\r\nCheck change log [here](https://github.com/NodeArt/angular-commerce/blob/master/CHANGELOG.md)\r\n\r\n## Store architecture\r\n\r\n### Components dependencies\r\nMost of components are separated from each other. The most common dependency is `Data Abstraction Layer (DAL)`.\r\nDAL is a bridge for some connector ( for now Firebase Connector ). DAL contains methods for manipulating with database \r\n(get products, add products to shopping cart, remove products from shopping cart etc.), auth api (register user, login, logout etc.).\r\n\r\n### Querying to database\r\nAs we started to use firebase for database, auth, storage, it was a question how to process heavy queries with aggregations, multiple conditions etc. [Firebase Realtime Databese api](https://firebase.google.com/docs/database/) was very simple for our requirentments.  \r\nAfter some time of research we stayed at `ElasticSearch`.\r\nIt's fast, allow to make heavy hard queries and Firebase team wrote an adapter to firebase called [Firebase Flashlight](https://github.com/firebase/flashlight).  \r\nFor example, queries in `Product Service` are written like `ElasticSearch queries`. \r\n\r\n### Organization of products\r\nAbout products organization you can read in docs for services, for example, `Product service` or `Basket service`.\r\n\r\n### Creating other connectors \r\nIf you want to create you own connector you must adopt it to `ElasticSearch flashlight` output.\r\n\r\n### Docs\r\n\r\nTo create documentation: \r\n```\r\nnpm i\r\nnpm run build-docs\r\n```\r\n\r\nTo serve documentation: \r\n```\r\nnpm run serve-docs\r\n```\r\n\r\n\r\n"