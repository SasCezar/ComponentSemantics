b'# History\r\n_py-kms_ is a port of node-kms created by [cyrozap](http://forums.mydigitallife.info/members/183074-markedsword), which is a port of either the C#, C++, or .NET implementations of KMS Emulator. The original version was written by [CODYQX4](http://forums.mydigitallife.info/members/89933-CODYQX4) and is derived from the reverse-engineered code of Microsoft\'s official KMS.\r\n\r\n# Features\r\n- Responds to V4, V5, and V6 KMS requests.\r\n- Supports activating:\r\n\t- Windows Vista \r\n\t- Windows 7 \r\n\t- Windows 8\r\n\t- Windows 8.1\r\n\t- Windows 10 ( 1511 / 1607 / 1703 / 1709 / 1803 / 1809 / 1903 )\r\n\t- Windows Server 2008\r\n\t- Windows Server 2008 R2\r\n\t- Windows Server 2012\r\n\t- Windows Server 2012 R2\r\n\t- Windows Server 2016\r\n\t- Windows Server 2019\r\n\t- Microsoft Office 2010 ( Volume License )\r\n\t- Microsoft Office 2013 ( Volume License )\r\n\t- Microsoft Office 2016 ( Volume License )\r\n\t- Microsoft Office 2019 ( Volume License )\r\n- It\'s written in Python:\r\n\t- tested with Python 2.7.15rc1 \r\n\t- tested with Python 3.6.7\r\n\r\n# Dependencies\r\n- Python 3.x or Python 2.7.x or Python 2.6.x with the ```argparse``` module installed.\r\n- Tkinter module.\r\n- If the ```tzlocal``` module is installed, the "Request Time" in the verbose output will be converted into local time. Otherwise, it will be in UTC.\r\n- It can use the ```sqlite3``` module so you can use the database function, storing activation data so it can be recalled again. \r\n- Installation example on Ubuntu / Mint:\r\n    - ```sudo apt-get update```\r\n    - for python3\r\n    - ```sudo apt-get install python3-tk python3-pip```\r\n    - ```sudo pip3 install tzlocal pysqlite3```\r\n    - or for python2\r\n    - ```sudo apt-get install python-tk python-pip```\r\n    - ```sudo pip install tzlocal pysqlite```\r\n       \r\n# Usage\r\n- __NOTE__: Pay attention to how invoke scripts, if you want to run with python2 use ```python...``` while for python3 use ```python3...```, also depending on the Python versions that resides in your PC.\r\n- To start the server, execute ```python pykms_Server.py [IPADDRESS] [PORT]```.\r\n  The default _IPADDRESS_ is "0.0.0.0" ( all interfaces ) and the default _PORT_ is "1688".\r\n- To run the client (only for testing purposes), use ```python pykms_Client.py IPADDRESS [PORT]```. \r\nArgument _IPADDRESS_ is always required, while the default _PORT_ is "1688", so a valid command is: ```python pykms_Client.py 0.0.0.0```\r\n- To show the help pages type: ```python pykms_Server.py -h``` and ```python pykms_Client.py -h```\r\n- To generate a random HWID use ```-w``` option: ```python pykms_Server.py -w RANDOM```\r\n- To get the HWID from any server use the client, for example type: ```python pykms_Client.py 0.0.0.0 1688 -m Windows8.1 -V INFO```\r\n- To view a minimal set of logging information use ```-V MINI``` option, for example: ```python pykms_Server.py -V MINI```\r\n- To redirect logging on stdout use ```-F STDOUT``` option, for example: ```python pykms_Server.py -F STDOUT```\r\n- For launching py-kms GUI make executable all _.py_ files in _py-kms_ directory ```chmod +x /path/to/scripts/py-kms/*.py```, then simply run ```pykms_Server.py``` double-clicking.\r\n\r\n# Other Important Stuff\r\nConsult the [Wiki](https://github.com/SystemRage/py-kms/wiki) for more information about activation with _py-kms_ and to get GVLK keys.\r\n\r\n# License\r\n   [![License](https://img.shields.io/badge/license-unlicense-lightgray.svg)](https://github.com/SystemRage/py-kms/blob/master/LICENSE)\r\n'