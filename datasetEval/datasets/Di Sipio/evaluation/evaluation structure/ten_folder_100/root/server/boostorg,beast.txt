b'<img width="880" height = "80" alt = "Boost.Beast Title"\n    src="https://raw.githubusercontent.com/boostorg/beast/master/doc/images/readme2.png">\n\n# HTTP and WebSocket built on Boost.Asio in C++11\n\nBranch      | Linux/OSX | Windows | Coverage | Documentation | Matrix\n------------|-----------|---------|----------|---------------|--------\n[master](https://github.com/boostorg/beast/tree/master)   | [![Build Status](https://travis-ci.org/boostorg/beast.svg?branch=master)](https://travis-ci.org/boostorg/beast)  | [![Build status](https://ci.appveyor.com/api/projects/status/2nh66khjjhtgasvo/branch/master?svg=true)](https://ci.appveyor.com/project/vinniefalco/beast/branch/master)   | [![codecov](https://img.shields.io/codecov/c/github/boostorg/beast/master.svg)](https://codecov.io/gh/boostorg/beast/branch/master)   | [![Documentation](https://img.shields.io/badge/documentation-master-brightgreen.svg)](http://www.boost.org/doc/libs/master/libs/beast/doc/html/index.html)  | [![Matrix](https://img.shields.io/badge/matrix-master-brightgreen.svg)](http://www.boost.org/development/tests/master/developer/beast.html)\n[develop](https://github.com/boostorg/beast/tree/develop) | [![Build Status](https://travis-ci.org/boostorg/beast.svg?branch=develop)](https://travis-ci.org/boostorg/beast) | [![Build status](https://ci.appveyor.com/api/projects/status/2nh66khjjhtgasvo/branch/develop?svg=true)](https://ci.appveyor.com/project/vinniefalco/beast/branch/develop) | [![codecov](https://img.shields.io/codecov/c/github/boostorg/beast/develop.svg)](https://codecov.io/gh/boostorg/beast/branch/develop) | [![Documentation](https://img.shields.io/badge/documentation-develop-brightgreen.svg)](https://www.boost.org/doc/libs/develop/libs/beast/index.html) | [![Matrix](https://img.shields.io/badge/matrix-develop-brightgreen.svg)](https://www.boost.org/development/tests/develop/developer/beast.html)\n\n## Contents\n\n- [Introduction](#introduction)\n- [Appearances](#appearances)\n- [Description](#description)\n- [Requirements](#requirements)\n- [Git Branches](#branches)\n- [Building](#building)\n- [Usage](#usage)\n- [License](#license)\n- [Contact](#contact)\n- [Contributing](#contributing-we-need-your-help)\n\n## Introduction\n\nBeast is a C++ header-only library serving as a foundation for writing\ninteroperable networking libraries by providing **low-level HTTP/1,\nWebSocket, and networking protocol** vocabulary types and algorithms\nusing the consistent asynchronous model of Boost.Asio.\n\nThis library is designed for:\n\n* **Symmetry:** Algorithms are role-agnostic; build clients, servers, or both.\n\n* **Ease of Use:** Boost.Asio users will immediately understand Beast.\n\n* **Flexibility:** Users make the important decisions such as buffer or\n  thread management.\n\n* **Performance:** Build applications handling thousands of connections or more.\n\n* **Basis for Further Abstraction.** Components are well-suited for building upon.\n\n## Appearances\n\n| <a href="https://github.com/vinniefalco/CppCon2018">CppCon 2018</a> | <a href="https://www.bishopfox.com/case_study/securing-beast/">Bishop Fox 2018</a> |\n| ------------ | ------------ |\n| <a href="https://www.youtube.com/watch?v=7FQwAjELMek"><img width="320" height = "180" alt="Beast" src="https://raw.githubusercontent.com/vinniefalco/CppCon2018/master/CppCon2018.png"></a> | <a href="https://youtu.be/4TtyYbGDAj0"><img width="320" height = "180" alt="Beast Security Review" src="https://raw.githubusercontent.com/vinniefalco/BeastAssets/master/BishopFox2018.png"></a> |\n\n| <a href="https://github.com/vinniefalco/CppCon2018">CppCon 2017</a> | <a href="http://cppcast.com/2017/01/vinnie-falco/">CppCast 2017</a> | <a href="https://raw.githubusercontent.com/vinniefalco/BeastAssets/master/CppCon2016.pdf">CppCon 2016</a> |\n| ------------ | ------------ | ----------- |\n| <a href="https://www.youtube.com/watch?v=WsUnnYEKPnI"><img width="320" height = "180" alt="Beast" src="https://raw.githubusercontent.com/vinniefalco/CppCon2017/master/CppCon2017.png"></a> | <a href="http://cppcast.com/2017/01/vinnie-falco/"><img width="180" height="180" alt="Vinnie Falco" src="https://avatars1.githubusercontent.com/u/1503976?v=3&u=76c56d989ef4c09625256662eca2775df78a16ad&s=180"></a> | <a href="https://www.youtube.com/watch?v=uJZgRcvPFwI"><img width="320" height = "180" alt="Beast" src="https://raw.githubusercontent.com/vinniefalco/BeastAssets/master/CppCon2016.png"></a> |\n\n## Description\n\nThis software is in its first official release. Interfaces\nmay change in response to user feedback. For recent changes\nsee the [CHANGELOG](CHANGELOG.md).\n\n* [Official Site](https://github.com/boostorg/beast)\n* [Documentation](https://www.boost.org/doc/libs/master/libs/beast/) (master branch)\n* [Autobahn|Testsuite WebSocket Results](https://vinniefalco.github.io/boost/beast/reports/autobahn/index.html)\n\n## Requirements\n\nThis library is for programmers familiar with Boost.Asio. Users\nwho wish to use asynchronous interfaces should already know how to\ncreate concurrent network programs using callbacks or coroutines.\n\n* **C++11:** Robust support for most language features.\n* **Boost:** Boost.Asio and some other parts of Boost.\n* **OpenSSL:** Required for using TLS/Secure sockets and examples/tests\n\nWhen using Microsoft Visual C++, Visual Studio 2017 or later is required.\n\nOne of these components is required in order to build the tests and examples:\n\n* Properly configured bjam/b2\n* CMake 3.5.1 or later (Windows only)\n\n## Building\n\nBeast is header-only. To use it just add the necessary `#include` line\nto your source files, like this:\n```C++\n#include <boost/beast.hpp>\n```\n\nIf you use coroutines you\'ll need to link with the Boost.Coroutine\nlibrary. Please visit the Boost documentation for instructions\non how to do this for your particular build system.\n\n## GitHub\n\nTo use the latest official release of Beast, simply obtain the latest\nBoost distribution and follow the instructions for integrating it\ninto your development environment. If you wish to build the examples\nand tests, or if you wish to preview upcoming changes and features,\nit is suggested to clone the "Boost superproject" and work with Beast\n"in-tree" (meaning, the libs/beast subdirectory of the superproject).\n\nThe official repository contains the following branches:\n\n* [**master**](https://github.com/boostorg/beast/tree/master) This\n  holds the most recent snapshot with code that is known to be stable.\n\n* [**develop**](https://github.com/boostorg/beast/tree/develop) This\n  holds the most recent snapshot. It may contain unstable code.\n\nEach of these branches requires a corresponding Boost branch and\nall of its subprojects. For example, if you wish to use the **master**\nbranch version of Beast, you should clone the Boost superproject,\nswitch to the **master** branch in the superproject and acquire\nall the Boost libraries corresponding to that branch including Beast.\n\nTo clone the superproject locally, and switch into the main project\'s\ndirectory use:\n```\ngit clone --recursive https://github.com/boostorg/boost.git\ncd boost\n```\n\n"bjam" is used to build Beast and the Boost libraries. On a non-Windows\nsystem use this command to build bjam:\n```\n./bootstrap.sh\n```\n\nFrom a Windows command line, build bjam using this command:\n```\n.\\BOOTSTRAP.BAT\n```\n\n## Building tests and examples\nBuilding tests and examples requires OpenSSL installed. If OpenSSL is installed\nin a non-system location, you will need to copy the\n[user-config.jam](tools/user-config.jam) file into your home directory and set\nthe `OPENSSL_ROOT` environment variable to the path that contains an installation\nof OpenSSL.\n\n### Ubuntu/Debian\nIf installed into a system directory, OpenSSL will be automatically found and used.\n```bash\nsudo apt install libssl-dev\n```\n### Windows\nReplace `path` in the following code snippets with the path you installed vcpkg\nto. Examples assume a 32-bit build, if you build a 64-bit version replace\n`x32-windows` with `x64-windows` in the path.\n- Using [vcpkg](https://github.com/Microsoft/vcpkg) and CMD:\n```bat\nvcpkg install openssl --triplet x32-windows\nSET OPENSSL_ROOT=path\\installed\\x32-windows\n```\n\n- Using [vcpkg](https://github.com/Microsoft/vcpkg) and PowerShell:\n```powershell\nvcpkg install openssl --triplet x32-windows\n$env:OPENSSL_ROOT = "path\\x32-windows"\n```\n\n- Using [vcpkg](https://github.com/Microsoft/vcpkg) and bash:\n```bash\nvcpkg.exe install openssl --triplet x32-windows\nexport OPENSSL_ROOT=path/x32-windows\n```\n\n### Mac OS\nUsing [brew](https://github.com/Homebrew/brew):\n```bash\nbrew install openssl\nexport OPENSSL_ROOT=$(brew --prefix openssl)\n# install bjam tool user specific configuration file to read OPENSSL_ROOT\n# see https://boostorg.github.io/build/manual/develop/index.html\ncp ./libs/beast/tools/user-config.jam $HOME\n```\n\nMake sure the bjam tool (also called "b2") is available in the path\nyour shell uses to find executables. The Beast project is located in\n"libs/beast" relative to the directory containing the Boot superproject.\nTo build the Beast tests, examples, and documentation use these commands:\n```\nexport PATH=$PWD:$PATH\nb2 -j2 libs/beast/test cxxstd=11      # bjam must be in your $PATH\nb2 -j2 libs/beast/example cxxstd=11   # "-j2" means use two processors\nb2 libs/beast/doc                     # Doxygen and Saxon are required for this\n```\n\n\n\nAdditional instructions for configuring, using, and building libraries\nin superproject may be found in the\n[Boost Wiki](https://github.com/boostorg/boost/wiki/Getting-Started).\n\n## Visual Studio\n\nCMake may be used to generate a very nice Visual Studio solution and\na set of Visual Studio project files using these commands:\n\n```\ncd libs/beast\nmkdir bin\ncd bin\ncmake ..                                    # for 32-bit Windows builds, or\ncmake -G"Visual Studio 15 2017 Win64" ..    # for 64-bit Windows builds (VS2017)\n```\n\nThe files in the repository are laid out thusly:\n\n```\n./\n    bin/            Create this to hold executables and project files\n    bin64/          Create this to hold 64-bit Windows executables and project files\n    doc/            Source code and scripts for the documentation\n    include/        Where the header files are located\n    example/        Self contained example programs\n    meta/           Metadata for Boost integration\n    test/           The unit tests for Beast\n    tools/          Scripts used for CI testing\n```\n\n## Usage\n\nThese examples are complete, self-contained programs that you can build\nand run yourself (they are in the `example` directory).\n\nhttps://www.boost.org/doc/libs/develop/libs/beast/doc/html/beast/quick_start.html\n\n## License\n\nDistributed under the Boost Software License, Version 1.0.\n(See accompanying file [LICENSE_1_0.txt](LICENSE_1_0.txt) or copy at\nhttps://www.boost.org/LICENSE_1_0.txt)\n\n## Contact\n\nPlease report issues or questions here:\nhttps://github.com/boostorg/beast/issues\n\n---\n\n## Contributing (We Need Your Help!)\n\nIf you would like to contribute to Beast and help us maintain high\nquality, consider performing code reviews on active pull requests.\nAny feedback from users and stakeholders, even simple questions about\nhow things work or why they were done a certain way, carries value\nand can be used to improve the library. Code review provides these\nbenefits:\n\n* Identify bugs\n* Documentation proof-reading\n* Adjust interfaces to suit use-cases\n* Simplify code\n\nYou can look through the Closed pull requests to get an idea of how\nreviews are performed. To give a code review just sign in with your\nGitHub account and then add comments to any open pull requests below,\ndon\'t be shy!\n<p>https://github.com/boostorg/beast/pulls</p>\n\nHere are some resources to learn more about\ncode reviews:\n\n* <a href="https://blog.scottnonnenberg.com/top-ten-pull-request-review-mistakes/">Top 10 Pull Request Review Mistakes</a>\n* <a href="https://smartbear.com/SmartBear/media/pdfs/best-kept-secrets-of-peer-code-review.pdf">Best Kept Secrets of Peer Code Review (pdf)</a>\n* <a href="http://support.smartbear.com/support/media/resources/cc/11_Best_Practices_for_Peer_Code_Review.pdf">11 Best Practices for Peer Code Review (pdf)</a>\n* <a href="http://www.evoketechnologies.com/blog/code-review-checklist-perform-effective-code-reviews/">Code Review Checklist \xe2\x80\x93 To Perform Effective Code Reviews</a>\n* <a href="https://www.codeproject.com/Articles/524235/Codeplusreviewplusguidelines">Code review guidelines</a>\n* <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md">C++ Core Guidelines</a>\n* <a href="https://doc.lagout.org/programmation/C/CPP101.pdf">C++ Coding Standards (Sutter & Andrescu)</a>\n\nBeast thrives on code reviews and any sort of feedback from users and\nstakeholders about its interfaces. Even if you just have questions,\nasking them in the code review or in issues provides valuable information\nthat can be used to improve the library - do not hesitate, no question\nis insignificant or unimportant!\n'