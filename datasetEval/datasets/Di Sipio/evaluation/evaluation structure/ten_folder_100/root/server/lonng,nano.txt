b'# Nano [![Build Status][1]][2] [![GoDoc][3]][4] [![Go Report Card][5]][6] [![MIT licensed][7]][8] \n\n[1]: https://travis-ci.org/lonng/nano.svg?branch=master\n[2]: https://travis-ci.org/lonng/nano\n[3]: https://godoc.org/github.com/lonng/nano?status.svg\n[4]: https://godoc.org/github.com/lonng/nano\n[5]: https://goreportcard.com/badge/github.com/lonng/nano\n[6]: https://goreportcard.com/report/github.com/lonng/nano\n[7]: https://img.shields.io/badge/license-MIT-blue.svg\n[8]: LICENSE\n\nNano is an easy to use, fast, lightweight game server networking library for Go.\nIt provides a core network architecture and a series of tools and libraries that\ncan help developers eliminate boring duplicate work for common underlying logic.\nThe goal of nano is to improve development efficiency by eliminating the need to\nspend time on repetitious network related programming.\n\nNano was designed for server-side applications like real-time games, social games,\nmobile games, etc of all sizes.\n\n## How to build a system with `Nano`\n\n#### What does a `Nano` application look like?\n\nThe simplest "nano" application as shown in the following figure, you can make powerful applications by combining different components.\n\n![Application](media/application.png)\n\nIn fact, the `nano` application is a collection of \xc2\xa0[Component ](./docs/get_started.md#component) , and a component is a bundle of \xc2\xa0[Handler](./docs/get_started.md#handler), once you register a component to nano, nano will register all methods that can be converted to `Handler` to nano service container. Service was accessed by `Component.Handler`, and the handler will be called while client request. The handler will receive two parameters while handling a message:\n  - `*session.Session`: corresponding a client that apply this request or notify.\n  - `*protocol.FooBar`: the payload of the request.\n\nWhile you had processed your logic, you can response or push message to the client by `session.Response(payload)` and `session.Push(\'eventName\', payload)`, or returns error when some unexpected data received.\n\n#### How to build distributed system with `Nano`\n\nNano contains built-in distributed system solution, and make you creating a distributed game server easily.\n\nSee: [The distributed chat demo](https://github.com/lonng/nano/tree/master/examples/cluster)\n\nThe Nano will remain simple, but you can perform any operations in the component and get the desired goals. You can startup a group of `Nano` application as agent to dispatch message to backend servers.\n\n#### How to execute the asynchronous task\n\n```go\nfunc (manager *PlayerManager) Login(s *session.Session, msg *ReqPlayerLogin) error {\n    var onDBResult = func(player *Player) {\n        manager.players = append(manager.players, player)\n        s.Push("PlayerSystem.LoginSuccess", &ResPlayerLogin)\n    }\n    \n    // run slow task in new gorontine\n    go func() {\n        player, err := db.QueryPlayer(msg.PlayerId) // ignore error in demo\n        // handle result in main logical gorontine\n        nano.Invoke(func(){ onDBResult(player) })\n    }\n    return nil\n}\n```\n\n## Documents\n\n- English\n    + [How to build your first nano application](./docs/get_started.md)\n    + [Route compression](./docs/route_compression.md)\n    + [Communication protocol](./docs/communication_protocol.md)\n    + [Design patterns](./docs/design_patterns.md)\n    + [API Reference(Server)](https://godoc.org/github.com/lonnng/nano)\n    + [How to integrate `Lua` into `Nano` component(incomplete)](.)\n\n- \xe7\xae\x80\xe4\xbd\x93\xe4\xb8\xad\xe6\x96\x87\n    + [\xe5\xa6\x82\xe4\xbd\x95\xe6\x9e\x84\xe5\xbb\xba\xe4\xbd\xa0\xe7\x9a\x84\xe7\xac\xac\xe4\xb8\x80\xe4\xb8\xaanano\xe5\xba\x94\xe7\x94\xa8](./docs/get_started_zh_CN.md)\n    + [\xe8\xb7\xaf\xe7\x94\xb1\xe5\x8e\x8b\xe7\xbc\xa9](./docs/route_compression_zh_CN.md)\n    + [\xe9\x80\x9a\xe4\xbf\xa1\xe5\x8d\x8f\xe8\xae\xae](./docs/communication_protocol_zh_CN.md)\n    + [API\xe5\x8f\x82\xe8\x80\x83(\xe6\x9c\x8d\xe5\x8a\xa1\xe5\x99\xa8)](https://godoc.org/github.com/lonnng/nano)\n    + [\xe5\xa6\x82\xe4\xbd\x95\xe5\xb0\x86`lua`\xe8\x84\x9a\xe6\x9c\xac\xe9\x9b\x86\xe6\x88\x90\xe5\x88\xb0`nano`\xe7\xbb\x84\xe4\xbb\xb6\xe4\xb8\xad(\xe6\x9c\xaa\xe5\xae\x8c\xe6\x88\x90)](.)\n\n## Resources\n\n- Javascript\n  + [nano-websocket-client](https://github.com/lonnng/nano-websocket-client)\n  + [nano-egret-client](https://github.com/lonnng/nano-egret-client)\n\n- Demo\n  + [Implement a chat room in 100 lines with nano and WebSocket](./examples/demo/chat)\n  + [Tadpole demo](./examples/demo/tadpole)\n  + [\xe5\x9b\x9b\xe5\xb7\x9d\xe9\xba\xbb\xe5\xb0\x86, \xe8\xa1\x80\xe6\x88\x98\xe5\x88\xb0\xe5\xba\x95(\xe4\xb8\x89\xe4\xba\xba\xe6\xa8\xa1\xe5\xbc\x8f/\xe5\x9b\x9b\xe4\xba\xba\xe6\xa8\xa1\xe5\xbc\x8f)\xe5\xae\x8c\xe6\x95\xb4\xe9\xa1\xb9\xe7\x9b\xae\xe5\xae\x9e\xe4\xbe\x8b](https://github.com/lonnng/nanoserver)\n\n## Community\n\n- QQGroup: [289680347](https://jq.qq.com/?_wv=1027&k=4EMMaha)\n- Reddit: [nanolabs](https://www.reddit.com/r/nanolabs/)\n\n## Successful cases\n\n- [\xe7\xa9\xba\xe6\x9d\xa5\xe8\xa1\x80\xe6\x88\x98](https://fir.im/tios)\n\n## Go version\n\n`> go1.8`\n\n## Installation\n\n```shell\ngo get github.com/lonng/nano\n\n# dependencies\ngo get -u github.com/golang/protobuf\ngo get -u github.com/gorilla/websocket\n```\n\n## Benchmark\n\n```shell\n# Case:   PingPong\n# OS:     Windows 10\n# Device: i5-6500 3.2GHz 4 Core/1000-Concurrent \xc2\xa0 => IOPS 11W(Average)\n# Other:  ...\n\ncd $GOPATH/src/github.com/lonng/nano/benchmark/io\ngo test -v -tags "benchmark"\n```\n\n## License\n\n[MIT License](./LICENSE)\n'