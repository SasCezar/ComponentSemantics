b'> **Warning: This project is being completely re-written. If you\'re curious about the progress, reach me on Slack.**\n\n<p align="center">\n  <a href="https://vibora.io"><img src="https://raw.githubusercontent.com/vibora-io/vibora/master/docs/logo.png"></a>\n</p>\n\n<p align="center">\n  <a href="https://circleci.com/gh/vibora-io/vibora"><img src="https://circleci.com/gh/vibora-io/vibora.svg?style=shield"></a>\n  <a href="https://github.com/vibora-io/vibora/blob/master/LICENSE"><img alt="License: MIT" src="https://img.shields.io/badge/License-MIT-yellow.svg"></a>\n  <a href="https://pypi.org/project/vibora/"><img alt="PyPI" src="https://img.shields.io/pypi/v/vibora.svg"></a>\n  <a href="https://github.com/ambv/black"><img alt="Code style: black" src="https://img.shields.io/badge/code%20style-black-000000.svg"></a>\n  <a target="_blank" href="https://join.slack.com/t/vibora-io/shared_invite/enQtNDAxMTQ4NDc5NDYzLTA2YTdmNmM0YmY4ZTY0Y2JjZjc0ODgwMmJjY2I0MmVkODFiYzc4YjM0NGMyOTkxMjZlNTliZDU1ZmFhYWZmNjU"><img alt="Join Slack" src="https://img.shields.io/badge/join-slack-E02462.svg"></a>\n</p>\n\n-----------------------------------------------------------\n> [Vibora](https://vibora.io) is a **fast, asynchronous and elegant** Python 3.6+ http client/server framework. (Alpha stage)\n\n> Before you ask, Vibora means Viper in Portuguese :)\n\n\nServer Features\n---------------\n* Performance (https://github.com/vibora-io/benchmarks).\n* Schemas Engine.\n* Nested Blueprints / Domain Based Routes / Components\n* Connection Reaper / Self-Healing Workers\n* Sessions Engine\n* Streaming\n* Websockets\n* Caching tools\n* Async Template Engine (hot-reloading, deep inheritance)\n* Complete flow customization\n* Static Files (Smart Cache, Range, LastModified, ETags)\n* Testing Framework\n* Type hints, type hints, type hints everywhere.\n\n\nClient Features\n---------------\n* Streaming MultipartForms (Inspired by: https://github.com/requests/requests/issues/1584)\n* Rate Limiting / Retries mechanisms\n* Websockets\n* Keep-Alive & Connection Pooling\n* Sessions with cookies persistence\n* Basic/digest Authentication\n* Transparent Content Decoding\n\nServer Example\n--------------\n```python\nfrom vibora import Vibora, Request\nfrom vibora.responses import JsonResponse\n\napp = Vibora()\n\n\n@app.route(\'/\')\nasync def home(request: Request):\n    return JsonResponse({\'hello\': \'world\'})\n\n\nif __name__ == \'__main__\':\n    app.run(debug=True, host=\'0.0.0.0\', port=8000)\n```\n\nClient Example\n--------------\n\n```python\nimport asyncio\nfrom vibora import client\n\n\nasync def hello_world():\n    response = await client.get(\'https://google.com/\')\n    print(f\'Content: {response.content}\')\n    print(f\'Status code: {response.status_code}\')\n\n\nif __name__ == \'__main__\':\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(hello_world())\n```\n\nDocumentation\n-------------\n[Check it out at Vibora docs website](https://docs.vibora.io).\n\nPerformance (Infamous Hello World benchmark)\n-----------\n| Frameworks    | Requests/Sec  | Version  |\n| ------------- |:-------------:|:--------:|\n| Tornado       | 14,197         | 5.0.2   |\n| Django        | 22,823         | 2.0.6   |\n| Flask         | 37,487         | 1.0.2   |\n| Aiohttp       | 61,252         | 3.3.2   |\n| Sanic         | 119,764        | 0.7.0   |\n| Vibora        | 368,456        | 0.0.6   |\n> More benchmarks and info at https://github.com/vibora-io/benchmarks\n----\nGoals\n-----\n* **Be the fastest Python http client/server framework.**.\n* Windows / Linux / MacOS.\n* Enjoyable and up to date development features/trends.\n\nComing Soon\n-----------\n* Auto Reloading\n* HTTP2 Support\n* Brotli support (Server/Client)\n* Cython compiled templates.\n* Cython compiled user-routes.\n'