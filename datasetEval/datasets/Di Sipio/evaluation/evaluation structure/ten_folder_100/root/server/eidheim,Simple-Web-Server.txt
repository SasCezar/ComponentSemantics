b'**_This project has moved to https://gitlab.com/eidheim/Simple-Web-Server._**\n\nSimple-Web-Server\n=================\n\nA very simple, fast, multithreaded, platform independent HTTP and HTTPS server and client library implemented using C++11 and Asio (both Boost.Asio and standalone Asio can be used). Created to be an easy way to make REST resources available from C++ applications. \n\nSee https://gitlab.com/eidheim/Simple-WebSocket-Server for an easy way to make WebSocket/WebSocket Secure endpoints in C++. Also, feel free to check out the new C++ IDE supporting C++11/14/17: https://gitlab.com/cppit/jucipp. \n\n### Features\n\n* Asynchronous request handling\n* Thread pool if needed\n* Platform independent\n* HTTPS support\n* HTTP persistent connection (for HTTP/1.1)\n* Client supports chunked transfer encoding\n* Timeouts, if any of Server::timeout_request and Server::timeout_content are >0 (default: Server::timeout_request=5 seconds, and Server::timeout_content=300 seconds)\n* Simple way to add REST resources using regex for path, and anonymous functions\n\n### Usage\n\nSee http_examples.cpp or https_examples.cpp for example usage. \n\nSee particularly the JSON-POST (using Boost.PropertyTree) and the GET /match/[number] examples, which are most relevant.\n\n### Dependencies\n\n* Boost.Asio or standalone Asio\n* Boost is required to compile the examples\n* For HTTPS: OpenSSL libraries \n\n### Compile and run\n\nCompile with a C++11 compliant compiler:\n```sh\nmkdir build\ncd build\ncmake ..\nmake\ncd ..\n```\n\n#### HTTP\n\nRun the server and client examples: `./build/http_examples`\n\nDirect your favorite browser to for instance http://localhost:8080/\n\n#### HTTPS\n\nBefore running the server, an RSA private key (server.key) and an SSL certificate (server.crt) must be created. Follow, for instance, the instructions given here (for a self-signed certificate): http://www.akadia.com/services/ssh_test_certificate.html\n\nRun the server and client examples: `./build/https_examples`\n\nDirect your favorite browser to for instance https://localhost:8080/\n\n'