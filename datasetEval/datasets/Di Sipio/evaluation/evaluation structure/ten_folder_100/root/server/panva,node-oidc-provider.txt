b'# oidc-provider\n\noidc-provider is an OAuth 2.0 Authorization Server with [OpenID Connect][openid-connect] and many\nadditional features and standards implemented.\n\n**Table of Contents**\n\n- [Implemented specs & features](#implemented-specs--features)\n- [Certification](#certification)\n- [Get started](#get-started)\n- [Documentation & Configuration](#documentation--configuration)\n- [Recipes](#recipes)\n- [Debugging](#debugging)\n- [Events](#events)\n\n## Implemented specs & features\n\nThe following specifications are implemented by oidc-provider. Note that not all features are\nenabled by default, check the configuration section on how to enable them.\n\n- [RFC6749 - OAuth 2.0][oauth2] & [OpenID Connect Core 1.0][core]\n  - Authorization (Authorization Code Flow, Implicit Flow, Hybrid Flow)\n  - UserInfo Endpoint and ID Tokens including Signing and Encryption\n  - Passing a Request Object by Value or Reference including Signing and Encryption\n  - Public and Pairwise Subject Identifier Types\n  - Offline Access / Refresh Token Grant\n  - Client Credentials Grant\n  - Client Authentication incl. client_secret_jwt and private_key_jwt methods\n- [OpenID Connect Discovery 1.0][discovery]\n- [OpenID Connect Dynamic Client Registration 1.0][registration] and [RFC7591 - OAuth 2.0 Dynamic Client Registration Protocol][oauth2-registration]\n- [OAuth 2.0 Form Post Response Mode][form-post]\n- [RFC7636 - Proof Key for Code Exchange (PKCE)][pkce]\n- [RFC7009 - OAuth 2.0 Token Revocation][revocation]\n- [RFC7592 - OAuth 2.0 Dynamic Client Registration Management Protocol][registration-management]\n- [RFC7662 - OAuth 2.0 Token Introspection][introspection]\n- [RFC8252 - OAuth 2.0 for Native Apps BCP (AppAuth)][oauth-native-apps]\n- [RFC8628 - OAuth 2.0 Device Authorization Grant (Device Flow)][device-flow]\n\nThe following draft specifications are implemented by oidc-provider.\n- [JSON Web Token (JWT) Profile for OAuth 2.0 Access Tokens - draft 02][jwt-at]\n- [JWT Response for OAuth Token Introspection - draft 08][jwt-introspection]\n- [JWT Secured Authorization Response Mode for OAuth 2.0 (JARM) - draft 02][jarm]\n- [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP) - individual draft 03][dpop]\n- [OAuth 2.0 JWT Secured Authorization Request (JAR)][jar]\n- [OAuth 2.0 Mutual TLS Client Authentication and Certificate Bound Access Tokens (MTLS) - draft 17][mtls]\n- [OAuth 2.0 Pushed Authorization Requests - draft 01][par]\n- [OAuth 2.0 Resource Indicators - draft 08][resource-indicators]\n- [OAuth 2.0 Web Message Response Mode - individual draft 00][wmrm]\n- [OpenID Connect Back-Channel Logout 1.0 - draft 04][backchannel-logout]\n- [OpenID Connect Front-Channel Logout 1.0 - draft 02][frontchannel-logout]\n- [OpenID Connect Session Management 1.0 - draft 28][session-management]\n\nUpdates to draft specification versions are released as MINOR library versions,\nif you utilize these specification implementations consider using the tilde `~` operator in your\npackage.json since breaking changes may be introduced as part of these version updates. Alternatively\n[acknowledge](https://github.com/panva/node-oidc-provider/tree/master/docs/README.md#features) the version and\nbe notified of breaking changes as part of your CI.\n\nMissing a feature? - If it wasn\'t already discussed before, [ask for it][suggest-feature].  \nFound a bug? - [report it][bug].\n\n## Certification\n[<img width="184" height="96" align="right" src="https://cdn.jsdelivr.net/gh/panva/node-oidc-provider@acd3ebf2f5ebbb5605463cb681a1fb2ab9742ace/OpenID_Certified.png" alt="OpenID Certification">][openid-certified-link]  \nFilip Skokan has [certified][openid-certified-link] that [oidc-provider][npm-url]\nconforms to the following profiles of the OpenID Connect\xe2\x84\xa2 protocol\n\n- OP [Basic](https://openid.net/wordpress-content/uploads/2017/01/FilipSkokan_oidc-provider_OP-Basic-02-Jan-2017.zip), [Implicit](https://openid.net/wordpress-content/uploads/2017/01/FilipSkokan_oidc-provider_OP-Implicit-02-Jan-2017.zip), [Hybrid](https://openid.net/wordpress-content/uploads/2017/01/FilipSkokan_oidc-provider_OP-Hybrid-02-Jan-2017.zip), [Config](https://openid.net/wordpress-content/uploads/2017/01/FilipSkokan_oidc-provider_OP-Config-02-Jan-2017.zip), [Dynamic](https://openid.net/wordpress-content/uploads/2017/01/FilipSkokan_oidc-provider_OP-Dynamic-02-Jan-2017.zip), [Form Post](https://openid.net/wordpress-content/uploads/2018/06/FilipSkokan_oidc-provider_OP-FormPost-25-Jun-2018.zip), and [3rd Party-Init](https://openid.net/wordpress-content/uploads/2019/10/FilipSkokan_oidc-provider_OP-3rd-party-23-Sep-2019.zip)\n- OP [Front-Channel Logout](https://openid.net/wordpress-content/uploads/2019/11/FilipSkokan_oidc-provider_OP-Front-Channel-Logout_11-Nov-2019.zip), [Back-Channel Logout](https://openid.net/wordpress-content/uploads/2019/11/FilipSkokan_oidc-provider_OP-Back-Channel-Logout_11-Nov-2019.zip), [RP-Initiated Logout](https://openid.net/wordpress-content/uploads/2019/11/FilipSkokan_oidc-provider_OP-RP-Initiated-Logout_11-Nov-2019.zip), and [Session Management](https://openid.net/wordpress-content/uploads/2019/11/FilipSkokan_oidc-provider_OP-Session-Management_11-Nov-2019.zip)\n- OP FAPI R/W [MTLS](https://openid.net/wordpress-content/uploads/2019/08/FilipSkokan_oidc-provider_OP-FAPI-RW-mtls-20-Aug-2019.zip) and [Private Key](https://openid.net/wordpress-content/uploads/2019/08/FilipSkokan_oidc-provider_OP-FAPI-RW-private_key_jwt-20-Aug-2019.zip)\n\n## Sponsor\n\n[<img width="65" height="65" align="left" src="https://avatars.githubusercontent.com/u/2824157?s=75&v=4" alt="auth0-logo">][sponsor-auth0] If you want to quickly add OpenID Connect authentication to Node.js apps, feel free to check out Auth0\'s Node.js SDK and free plan at [auth0.com/overview][sponsor-auth0].<br><br>\n\n## Support\n\nIf you or your business use oidc-provider, please consider becoming a [sponsor][support-sponsor] so I can continue maintaining it and adding new features carefree.\n\n## Get started\nYou may check the [example folder](/example) or follow a [step by step example][example-repo] to see\nwhich of those fits your desired application setup.\n\nA feature-rich example configuration of oidc-provider is available for you to experiment with\n[here][heroku-example]. Dynamic Client Registration is open, you can literally register any client\nyou want there. An example client using this provider is available [here][heroku-example-client]\n(uses [openid-client][openid-client]).\n\nAlso be sure to check the available configuration docs section.\n\n## [Documentation](/docs/README.md) & Configuration\n\noidc-provider allows to be extended and configured in various ways to fit a variety of uses. See\nthe [documentation](/docs/README.md).\n\n```js\nconst { Provider } = require(\'oidc-provider\');\nconst configuration = {\n  // ... see available options /docs\n  clients: [{\n    client_id: \'foo\',\n    client_secret: \'bar\',\n    redirect_uris: [\'http://lvh.me:8080/cb\'],\n    // + other client properties\n  }],\n};\n\nconst oidc = new Provider(\'http://localhost:3000\', configuration);\n\n// express/nodejs style application callback (req, res, next) for use with express apps, see /examples/express.js\noidc.callback\n\n// koa application for use with koa apps, see /examples/koa.js\noidc.app\n\n// or just expose a server standalone, see /examples/standalone.js\nconst server = oidc.listen(3000, () => {\n  console.log(\'oidc-provider listening on port 3000, check http://localhost:3000/.well-known/openid-configuration\');\n});\n```\n\n```ts\nimport * as oidc from \'oidc-provider\';\n\nconst configuration = {\n  // ... see available options /docs\n  clients: [{\n    client_id: \'foo\',\n    client_secret: \'bar\',\n    redirect_uris: [\'http://lvh.me:8080/cb\'],\n    // + other client properties\n  }],\n};\n\nconst provider = new oidc.Provider(\'http://localhost:3000\', configuration);\n\n// express/nodejs style application callback (req, res, next) for use with express apps, see /examples/express.js\nprovider.callback\n\n// koa application for use with koa apps, see /examples/koa.js\nprovider.app\n\n// or just expose a server standalone, see /examples/standalone.js\nconst server = provider.listen(3000, () => {\n  console.log(\'oidc-provider listening on port 3000, check http://localhost:3000/.well-known/openid-configuration\');\n});\n```\n\n\n## Recipes\nCollection of useful configurations use cases are available over at [recipes](/recipes).\n\n\n## Debugging\noidc-provider uses the [debug][debug-link] module internally to log information about various states\nof authentication requests, errors and grants. To see all these set the `DEBUG` environment variable\nto `oidc-provider:*` when launching your app.\n\nThere is no filter on what is included in the debug output, since it may end-user Personally\nidentifiable information or client credentials its use is only advised for debugging, not regular\nlogging. Use emitted events to cherry pick the one\'s of interest to your flows and form your own\nlogs aware of what should and should not be a part of a logged message.\n\n\n## Events\nYour oidc-provider instance is an event emitter, using event handlers you can hook into the various\nactions and i.e. emit metrics or that react to specific triggers. In some scenarios you can even\nchange the defined behavior.  \nSee the list of available emitted [event names](/docs/events.md) and their description.\n\n\n[npm-url]: https://www.npmjs.com/package/oidc-provider\n[openid-certified-link]: https://openid.net/certification/\n[openid-connect]: https://openid.net/connect/\n[core]: https://openid.net/specs/openid-connect-core-1_0.html\n[discovery]: https://openid.net/specs/openid-connect-discovery-1_0.html\n[oauth2-registration]: https://tools.ietf.org/html/rfc7591\n[registration]: https://openid.net/specs/openid-connect-registration-1_0.html\n[session-management]: https://openid.net/specs/openid-connect-session-1_0-28.html\n[form-post]: https://openid.net/specs/oauth-v2-form-post-response-mode-1_0.html\n[oauth2]: https://tools.ietf.org/html/rfc6749\n[oauth2-bearer]: https://tools.ietf.org/html/rfc6750\n[revocation]: https://tools.ietf.org/html/rfc7009\n[introspection]: https://tools.ietf.org/html/rfc7662\n[pkce]: https://tools.ietf.org/html/rfc7636\n[example-repo]: https://github.com/panva/node-oidc-provider-example\n[heroku-example]: https://op.panva.cz/.well-known/openid-configuration\n[heroku-example-client]: https://tranquil-reef-95185.herokuapp.com/client\n[openid-client]: https://github.com/panva/node-openid-client\n[backchannel-logout]: https://openid.net/specs/openid-connect-backchannel-1_0-04.html\n[frontchannel-logout]: https://openid.net/specs/openid-connect-frontchannel-1_0-02.html\n[registration-management]: https://tools.ietf.org/html/rfc7592\n[oauth-native-apps]: https://tools.ietf.org/html/rfc8252\n[debug-link]: https://github.com/visionmedia/debug\n[wmrm]: https://tools.ietf.org/html/draft-sakimura-oauth-wmrm-00\n[jar]: https://tools.ietf.org/html/draft-ietf-oauth-jwsreq-19\n[device-flow]: https://tools.ietf.org/html/rfc8628\n[jwt-introspection]: https://tools.ietf.org/html/draft-ietf-oauth-jwt-introspection-response-08\n[sponsor-auth0]: https://auth0.com/overview?utm_source=GHsponsor&utm_medium=GHsponsor&utm_campaign=oidc-provider&utm_content=auth\n[suggest-feature]: https://github.com/panva/node-oidc-provider/issues/new?template=feature-request.md\n[bug]: https://github.com/panva/node-oidc-provider/issues/new?template=bug-report.md\n[mtls]: https://tools.ietf.org/html/draft-ietf-oauth-mtls-17\n[dpop]: https://tools.ietf.org/html/draft-fett-oauth-dpop-03\n[resource-indicators]: https://tools.ietf.org/html/draft-ietf-oauth-resource-indicators-08\n[jarm]: https://openid.net/specs/openid-financial-api-jarm-wd-02.html\n[jwt-at]: https://tools.ietf.org/html/draft-ietf-oauth-access-token-jwt-02\n[support-sponsor]: https://github.com/sponsors/panva\n[par]: https://tools.ietf.org/html/draft-lodderstedt-oauth-par-01\n'