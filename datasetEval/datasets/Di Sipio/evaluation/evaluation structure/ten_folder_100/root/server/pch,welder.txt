b'# \xf0\x9f\x91\xa8\xe2\x80\x8d\xf0\x9f\x8f\xad Welder\n\nWelder allows you to set up a Linux server with plain shell scripts.\n\n![](./demo.gif)\n\nI wrote it out of frustration with Ansible. Ansible is an amazing and powerful\ntool, but for my needs it\'s just too much. 90% of the time all I need is:\n\n~~~ sh\nssh -t user@example.com "$(< ./my-setup-script.sh)"\n# or:\nssh -t user@example.com "$(cat ./my-setup-script.sh)"\n~~~\n\nIn most basic terms, that\'s what welder does.\n\nBut there\'s some more.\n\n## Features\n\nWelder allows you to:\n\n* execute local shell scripts on the server via ssh\n* organize your scripts into a logical set of reusable modules\n* set up a server with a single command (`welder run <playbook>`)\n* run one-off shell scripts (`welder run-script <user@example.com> <path/to/script.sh>`)\n* use [liquid](https://github.com/Shopify/liquid) templates for configuration\n  (optional)\n* enter `sudo` password just once per playbook\n\nSee [`welder-contrib`](https://github.com/pch/welder-contrib) for some example\nmodules.\n\n### Directory structure\n\nAn example directory structure:\n\n~~~ sh\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 modules\n\xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 nginx\n\xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 files\n\xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 nginx.conf\n\xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 setup.sh\n\xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 rails\n\xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 files\n\xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 nginx\n\xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 site.conf.liquid\n\xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 systemd\n\xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 puma.service.liquid\n\xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x82   \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 sidekiq.service.liquid\n\xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 rbenv-vars.liquid\n\xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 setup.sh\n\xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 system\n\xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 files\n\xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 10periodic\n\xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 50unattended-upgrades\n\xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 setup.sh\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 config.yml\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 vault.yml\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 vault.yml.gpg\n\xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 my-site.yml\n~~~\n\nExample playbook:\n\n~~~ yaml my-site.yml\nssh_url: admin@example.com\nssh_port: 22  # Optional (default: 22)\n\nshared_path: ../shared # optional\n\n# List of modules to execute\nmodules:\n  - system\n  - firewall\n  - rbenv\n  - nginx\n  - rails\n~~~\n\n### Templates\n\nWelder uses [liquid](https://github.com/Shopify/liquid) for templates. It\'s\nmostly compatible with ansible\'s `*.j2` files:\n\n~~~ lua\n# modules/rails/files/nginx-site.conf.liquid\nupstream thumbor {\n  {% for port in thumbor_instances %}\n      server 127.0.0.1:{{ port }};\n  {% endfor %}\n}\n\nserver {\n    listen 80;\n\n    server_name {{ thumbor_host }};\n    include snippets/ssl-{{ app_domain }}.conf;\n\n    location / {\n        proxy_pass http://thumbor;\n        proxy_set_header Host $host;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    }\n}\n~~~\n\n### config.yml\n\nThe `config.yml` file will be used to provide variables for your `*.liquid`\ntemplates:\n\n~~~ yaml\n# example config.yml\napp_name: example\napp_domain: example.com\n\nruby_version: "2.4.0"\nruby_deploy_user: "deploy"\nrails_env: production\n\napp_dir: "/var/www/example"\nletsencrypt_web_dir: "/var/www/letsencrypt"\n\nthumbor_host: images.example.com\nthumbor_instances:\n  - 8000\n  - 8001\n  - 8002\n  - 8003\n~~~\n\nDuring the compilation phase, `config.yml` is turned into a bash-compatible\nformat and uploaded to the server:\n\n~~~ sh\n# compiled config-variables file\ncfg_app_name=\'example\'\ncfg_app_domain=\'example.com\'\ncfg_ruby_version=\'2.4.0\'\ncfg_ruby_deploy_user=\'deploy\'\ncfg_rails_env=\'production\'\ncfg_app_dir=\'/var/www/example\'\ncfg_thumbor_host=\'images.example.com\'\ncfg_thumbor_instances=(8000 8001 8002 8003)\n~~~\n\nYou can then `source` it in your setup scripts:\n\n~~~ sh\n# modules/example/setup.sh\nsource setup/config-variables\n\necho $cfg_app_name\necho $cfg_app_dir\n# (notice the $cfg_ prefix)\n~~~\n\n**NOTE**: In order for this to work reliably, `config.yml` has to be fairly flat\nand simple - nested hashes are not supported.\n\n\n### Shared Modules\n\nIf you want to avoid duplicating modules across different projects, you can\nspecify `shared_path` in your playbook YML file:\n\n~~~ yaml my-site.yml\nssh_url: admin@example.com\n\nshared_path: ../shared\n\nmodules:\n  - system\n  - firewall\n~~~\n\nIn the example above, `../shared` directory should contain `modules` directory.\n\n### Security Notes\n\nDon\'t store any sensitive information (passwords etc.) in `config.yml`. If you\nwant to keep passwords in git, create a `vault.yml` file, add it to .gitignore\nand store the encrypted version in revision control:\n\n~~~ sh\n# encrypt & decrypt vault.yml using your gpg key\ngpg --encrypt --recipient \'John Doe\' vault.yml\ngpg --decrypt --output vault.yml vault.yml.gpg\n\n# encrypt & decrypt using a passphrase (no private/public key needed)\ngpg --symmetric --cipher-algo aes256 vault.yml\ngpg --decrypt --output vault.yml --cipher-algo aes256 vault.yml.gpg\n~~~\n\nFor more information on how to set up GPG/PGP, see [this excellent tutorial][gpg].\n\n[gpg]: https://robots.thoughtbot.com/pgp-and-you\n\nThink of this as just another level of security for your private git repos. You\nprobably don\'t want to store the encrypted vault in a public repo.\n\n#### sudo\n\nBecause `sudo` password is passed as an argument to the\n[`expect script`](https://github.com/pch/welder/blob/master/libexec/priv/run-ssh-script),\nit will be visible in the process list on your local computer. This could be\nan issue if you\'re using a shared machine to run setup scripts.\n\n### Example setup script\n\n~~~ sh\n# modules/nginx/setup.sh\n\nset -xeu # \'u\' will give you warnings on unbound config variables\n\n[[ -f setup/config-variables ]] && source setup/config-variables\n\nsudo add-apt-repository -y ppa:nginx/stable\nsudo apt-get update && sudo apt-get install -y nginx\n\nsudo service nginx start\n\nsudo cp setup/modules/nginx/files/nginx.conf /etc/nginx/nginx.conf\n\n# Disable default site\nif [ -f /etc/nginx/sites-enabled/default ]; then\n  sudo rm /etc/nginx/sites-enabled/default\nfi\n\nsudo service nginx restart\n~~~\n\n## Usage\n\n~~~ sh\nwelder run my-site # runs the playbook defined in my-site.yaml\n~~~\n\nThe `run` script will compile templates and configs, upload them to the server\n(to `/home/username/setup`) and then it will ask you for the `sudo` password.\nAfter that, it will execute all `*.sh` scripts from the modules listed in the\nplaybook file.\n\nAdditional commands:\n\n~~~ sh\nwelder compile <playbook>  # compiles templates and uploads them to the server\nwelder cleanup <playbook>  # remove compiled files from the server\n~~~\n\nIf you want to run a single `*.sh` script on the server, you can use this:\n\n~~~ sh\nwelder run-script <user@example.com> <path/to/script.sh>\n~~~\n\n**NOTE**: the `run-script` command does not compile templates. It merely wraps\n`ssh -t user@example.com "$(< ./path/to/script.sh)"`. If you want access to\ntemplates and config, run `welder compile <playbook>` first and\n`welder cleanup <playbook>` when you\'re done.\n\n## Installation\n\n1. Install dependencies\n\n   Welder requires expect, rsync and ruby. Ruby is used mainly as a\n   convenient way to parse YAML configuration files.\n\n   Optionally, if you\'d like to use the templating feature,\n   you need to install [liquid](https://github.com/Shopify/liquid) gem:\n\n    ~~~ sh\n    $ gem install liquid\n    ~~~\n\n2. Check out welder into `~/Code/welder` (or whatever location you prefer):\n\n    ~~~ sh\n    $ git clone https://github.com/pch/welder.git ~/Code/welder\n    ~~~\n\n2. Add `~/Code/welder/bin` to your `$PATH` for access to the `welder`\n   command-line utility.\n\n    ~~~ sh\n    $ echo \'export PATH="$PATH:$HOME/Code/welder/bin"\' >> ~/.bash_profile\n    ~~~\n\n    **Ubuntu Desktop note**: Modify your `~/.bashrc` instead of `~/.bash_profile`.\n\n    **Zsh note**: Modify your `~/.zshrc` file instead of `~/.bash_profile`.\n\n3. Restart your shell so that PATH changes take effect. (Opening a new\n   terminal tab will usually do it.) Now check if welder was set up:\n\n    ~~~ sh\n    $  which welder\n    /Users/my-user/Code/welder/bin/welder\n    ~~~\n\n## Caveats\n\nSince welder allows you to run **anything** on the server, you should use it\nwith caution. It won\'t protect you from screw-ups, like\n`rm -rf "/$undefined_variable"`.\n\nUse at your own risk.\n\n## Known Issues / Limitations\n\n* YAML config doesn\'t support nested values\n* Ruby dependency should be optional\n'