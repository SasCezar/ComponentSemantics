b'# go-imap\n\n[![GoDoc](https://godoc.org/github.com/emersion/go-imap?status.svg)](https://godoc.org/github.com/emersion/go-imap)\n[![builds.sr.ht status](https://builds.sr.ht/~emersion/go-imap.svg)](https://builds.sr.ht/~emersion/go-imap?)\n[![Codecov](https://codecov.io/gh/emersion/go-imap/branch/master/graph/badge.svg)](https://codecov.io/gh/emersion/go-imap)\n\nAn [IMAP4rev1](https://tools.ietf.org/html/rfc3501) library written in Go. It\ncan be used to build a client and/or a server.\n\n```shell\ngo get github.com/emersion/go-imap/...\n```\n\n## Usage\n\n### Client [![GoDoc](https://godoc.org/github.com/emersion/go-imap/client?status.svg)](https://godoc.org/github.com/emersion/go-imap/client)\n\n```go\npackage main\n\nimport (\n\t"log"\n\n\t"github.com/emersion/go-imap/client"\n\t"github.com/emersion/go-imap"\n)\n\nfunc main() {\n\tlog.Println("Connecting to server...")\n\n\t// Connect to server\n\tc, err := client.DialTLS("mail.example.org:993", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tlog.Println("Connected")\n\n\t// Don\'t forget to logout\n\tdefer c.Logout()\n\n\t// Login\n\tif err := c.Login("username", "password"); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tlog.Println("Logged in")\n\n\t// List mailboxes\n\tmailboxes := make(chan *imap.MailboxInfo, 10)\n\tdone := make(chan error, 1)\n\tgo func () {\n\t\tdone <- c.List("", "*", mailboxes)\n\t}()\n\n\tlog.Println("Mailboxes:")\n\tfor m := range mailboxes {\n\t\tlog.Println("* " + m.Name)\n\t}\n\n\tif err := <-done; err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\t// Select INBOX\n\tmbox, err := c.Select("INBOX", false)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tlog.Println("Flags for INBOX:", mbox.Flags)\n\n\t// Get the last 4 messages\n\tfrom := uint32(1)\n\tto := mbox.Messages\n\tif mbox.Messages > 3 {\n\t\t// We\'re using unsigned integers here, only substract if the result is > 0\n\t\tfrom = mbox.Messages - 3\n\t}\n\tseqset := new(imap.SeqSet)\n\tseqset.AddRange(from, to)\n\n\tmessages := make(chan *imap.Message, 10)\n\tdone = make(chan error, 1)\n\tgo func() {\n\t\tdone <- c.Fetch(seqset, []imap.FetchItem{imap.FetchEnvelope}, messages)\n\t}()\n\n\tlog.Println("Last 4 messages:")\n\tfor msg := range messages {\n\t\tlog.Println("* " + msg.Envelope.Subject)\n\t}\n\n\tif err := <-done; err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tlog.Println("Done!")\n}\n```\n\n### Server [![GoDoc](https://godoc.org/github.com/emersion/go-imap/server?status.svg)](https://godoc.org/github.com/emersion/go-imap/server)\n\n```go\npackage main\n\nimport (\n\t"log"\n\n\t"github.com/emersion/go-imap/server"\n\t"github.com/emersion/go-imap/backend/memory"\n)\n\nfunc main() {\n\t// Create a memory backend\n\tbe := memory.New()\n\n\t// Create a new server\n\ts := server.New(be)\n\ts.Addr = ":1143"\n\t// Since we will use this server for testing only, we can allow plain text\n\t// authentication over unencrypted connections\n\ts.AllowInsecureAuth = true\n\n\tlog.Println("Starting IMAP server at localhost:1143")\n\tif err := s.ListenAndServe(); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n\nYou can now use `telnet localhost 1143` to manually connect to the server.\n\n## Extending go-imap\n\n### Extensions\n\nCommands defined in IMAP extensions are available in other packages. See [the\nwiki](https://github.com/emersion/go-imap/wiki/Using-extensions#using-client-extensions)\nto learn how to use them.\n\n* [APPENDLIMIT](https://github.com/emersion/go-imap-appendlimit)\n* [COMPRESS](https://github.com/emersion/go-imap-compress)\n* [ENABLE](https://github.com/emersion/go-imap-enable)\n* [ID](https://github.com/ProtonMail/go-imap-id)\n* [IDLE](https://github.com/emersion/go-imap-idle)\n* [MOVE](https://github.com/emersion/go-imap-move)\n* [QUOTA](https://github.com/emersion/go-imap-quota)\n* [SORT and THREAD](https://github.com/emersion/go-imap-sortthread)\n* [SPECIAL-USE](https://github.com/emersion/go-imap-specialuse)\n* [UNSELECT](https://github.com/emersion/go-imap-unselect)\n* [UIDPLUS](https://github.com/emersion/go-imap-uidplus)\n\n### Server backends\n\n* [Memory](https://github.com/emersion/go-imap/tree/master/backend/memory) (for testing)\n* [Multi](https://github.com/emersion/go-imap-multi)\n* [PGP](https://github.com/emersion/go-imap-pgp)\n* [Proxy](https://github.com/emersion/go-imap-proxy)\n\n### Related projects\n\n* [go-message](https://github.com/emersion/go-message) - parsing and formatting MIME and mail messages\n* [go-msgauth](https://github.com/emersion/go-msgauth) - handle DKIM, DMARC and Authentication-Results\n* [go-pgpmail](https://github.com/emersion/go-pgpmail) - decrypting and encrypting mails with OpenPGP\n* [go-sasl](https://github.com/emersion/go-sasl) - sending and receiving SASL authentications\n* [go-smtp](https://github.com/emersion/go-smtp) - building SMTP clients and servers\n\n## License\n\nMIT\n'