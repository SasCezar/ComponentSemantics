b'**_This project has moved to https://gitlab.com/eidheim/Simple-WebSocket-Server._**\n\nSimple-WebSocket-Server\n=================\n\nA very simple, fast, multithreaded, platform independent WebSocket (WS) and WebSocket Secure (WSS) server and client library implemented using C++11, Asio (both Boost.Asio and standalone Asio can be used) and OpenSSL. Created to be an easy way to make WebSocket endpoints in C++.\n\nSee https://gitlab.com/eidheim/Simple-Web-Server for an easy way to make REST resources available from C++ applications. Also, feel free to check out the new C++ IDE supporting C++11/14/17: https://gitlab.com/cppit/jucipp. \n\n### Features\n\n* RFC 6455 mostly supported: text/binary frames, fragmented messages, ping-pong, connection close with status and reason.\n* Asynchronous message handling\n* Thread pool if needed\n* Platform independent\n* WebSocket Secure support\n* Timeouts, if any of SocketServer::timeout_request and SocketServer::timeout_idle are >0 (default: SocketServer::timeout_request=5 seconds, and SocketServer::timeout_idle=0 seconds; no timeout on idle connections)\n* Simple way to add WebSocket endpoints using regex for path, and anonymous functions\n* An easy to use WebSocket and WebSocket Secure client library\n* C++ bindings to the following OpenSSL methods: Base64, MD5, SHA1, SHA256 and SHA512 (found in crypto.hpp)\n\n### Usage\n\nSee ws_examples.cpp or wss_examples.cpp for example usage. \n\n### Dependencies\n\n* Boost.Asio or standalone Asio\n* OpenSSL libraries\n\n### Compile\n\nCompile with a C++11 supported compiler:\n\n```sh\nmkdir build\ncd build\ncmake ..\nmake\ncd ..\n```\n\n#### Run server and client examples\n\n### WS\n\n```sh\n./build/ws_examples\n```\n\n### WSS\n\nBefore running the WSS-examples, an RSA private key (server.key) and an SSL certificate (server.crt) must be created. Follow, for instance, the instructions given here (for a self-signed certificate): http://www.akadia.com/services/ssh_test_certificate.html\n\nThen:\n```\n./build/wss_examples\n```\n'