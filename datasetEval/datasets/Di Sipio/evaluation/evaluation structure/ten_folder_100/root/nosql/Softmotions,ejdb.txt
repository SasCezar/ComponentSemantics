b'# EJDB 2.0\n\n[The Story of the IT-depression, birds and EJDB 2.0](https://medium.com/@adamansky/ejdb2-41670e80897c)\n\n[![Join ejdb2 telegram](https://img.shields.io/badge/join-ejdb2%20telegram-0088cc.svg)](https://t.me/ejdb2)\n[![license](https://img.shields.io/github/license/Softmotions/ejdb.svg)](https://github.com/Softmotions/ejdb/blob/master/LICENSE)\n![maintained](https://img.shields.io/maintenance/yes/2019.svg)\n\n\nEJDB2 is an embeddable JSON database engine published under MIT license.\n\n* C11 API\n* Single file database\n* Online backups support\n* [Android](https://github.com/Softmotions/ejdb/tree/master/src/bindings/ejdb2_android/test) / [React Native](https://github.com/Softmotions/ejdb/tree/master/src/bindings/ejdb2_react_native) / [Flutter](https://github.com/Softmotions/ejdb/tree/master/src/bindings/ejdb2_flutter) integration\n* Simple but powerful query language (JQL) as well as support of the following standards:\n  * [rfc6902](https://tools.ietf.org/html/rfc6902) JSON Patch\n  * [rfc7386](https://tools.ietf.org/html/rfc7386) JSON Merge patch\n  * [rfc6901](https://tools.ietf.org/html/rfc6901) JSON Path\n* Powered by [iowow.io](http://iowow.io) - The persistent key/value storage engine\n* Provides HTTP REST/Websockets network endpoints with help of [facil.io](http://facil.io)\n* JSON documents are stored in using fast and compact [binn](https://github.com/liteserver/binn) binary format\n\n---\n* [Native language bindings](#native-language-bindings)\n* Supported platforms\n  * [OSX](#osx)\n  * [Linux](#linux)\n  * [Android](#android)\n  * [Windows](#windows)\n* [JQL query language](#jql)\n  * [Grammar](#jql-grammar)\n  * [Quick into](#jql-quick-introduction)\n  * [Data modification](#jql-data-modification)\n  * [Projections](#jql-projections)\n  * [Sorting](#jql-sorting)\n  * [Query options](#jql-options)\n* [Indexes and performance](#jql-indexes-and-performance-tips)\n* [Network API](#http-restwebsocket-api-endpoint)\n  * [HTTP API](#http-api)\n  * [Websockets API](#websocket-api)\n* [C API](#c-api)\n* [License](#license)\n---\n\n## Native language bindings\n\n* Node.js https://www.npmjs.com/package/ejdb2_node\n* Dart https://pub.dartlang.org/packages/ejdb2_dart\n* Java [ejdb2_jni/README.md](https://github.com/Softmotions/ejdb/blob/master/src/bindings/ejdb2_jni/README.md)\n* Android support (see below)\n* [React Native](https://github.com/Softmotions/ejdb/tree/master/src/bindings/ejdb2_react_native)\n* [Flutter](https://github.com/Softmotions/ejdb/tree/master/src/bindings/ejdb2_flutter)\n\n## Status\n\n* **EJDB 2.0 core engine is well tested and used in various heavily loaded deployments**\n* Tested on `Linux` and `OSX` platforms. [Limited Windows support](./WINDOWS.md)\n* Old EJDB 1.x version can be found in separate [ejdb_1.x](https://github.com/Softmotions/ejdb/tree/ejdb_1.x) branch.\n  We are not maintaining ejdb 1.x.\n\n## Use cases\n\n* Softmotions trading robots platform\n\n# Supported platforms\n\n## OSX\n\nEJDB2 code ported and tested on `High Sierra`, `Mojave`\n\n```\nmkdir build && cd build\ncmake .. -DCMAKE_BUILD_TYPE=Release\nmake\n```\n\n## Linux\n### Ubuntu/Debian\n#### PPA repository\n\n```sh\nsudo add-apt-repository ppa:adamansky/ejdb2\nsudo apt-get update\nsudo apt-get install ejdb2\n```\n\n#### Building debian packages\n\n```sh\nmkdir build && cd build\ncmake .. -DCMAKE_BUILD_TYPE=Release -DPACKAGE_DEB=ON\nmake package\n```\n\n#### RPM based Linux distributions\n```sh\nmkdir build && cd build\ncmake .. -DCMAKE_BUILD_TYPE=Release -DPACKAGE_RPM=ON\nmake package\n```\n\n## Windows\nEJDB2 can be cross-compiled for windows\n\n**Note:** HTTP/Websocket network API is disabled and not supported\non Windows until port of http://facil.io library (#257)\n\nNodejs/Dart bindings not yet ported to Windows.\n\n**[Cross-compilation Guide for Windows](./WINDOWS.md)**\n\n\n\n# Android\n\n* [Flutter binding](https://github.com/Softmotions/ejdb/tree/master/src/bindings/ejdb2_flutter)\n* [React Native binding](https://github.com/Softmotions/ejdb/tree/master/src/bindings/ejdb2_react_native)\n\n## Sample Android application\n\n* https://github.com/Softmotions/ejdb/tree/master/src/bindings/ejdb2_android/test\n\n* https://github.com/Softmotions/ejdb_android_todo_app\n\n\n# JQL\n\nEJDB query language (JQL) syntax inspired by ideas behind XPath and Unix shell pipes.\nIt designed for easy querying and updating sets of JSON documents.\n\n## JQL grammar\n\nJQL parser created created by\n[peg/leg \xe2\x80\x94 recursive-descent parser generators for C](http://piumarta.com/software/peg/) Here is the formal parser grammar: https://github.com/Softmotions/ejdb/blob/master/src/jql/jqp.leg\n\n## Non formal JQL grammar adapted for brief overview\n\nNotation used below is based on SQL syntax description:\n\nRule | Description\n--- | ---\n`\' \'` | String in single quotes denotes unquoted string literal as part of query.\n<code>{ a &#124; b }</code> | Curly brackets enclose two or more required alternative choices, separated by vertical bars.\n<code>[ ]</code> | Square brackets indicate an optional element or clause. Multiple elements or clauses are separated by vertical bars.\n<code>&#124;</code> | Vertical bars separate two or more alternative syntax elements.\n<code>...</code> |  Ellipses indicate that the preceding element can be repeated. The repetition is unlimited unless otherwise indicated.\n<code>( )</code> | Parentheses are grouping symbols.\nUnquoted word in lower case| Denotes semantic of some query part. For example: `placeholder_name` - name of any placeholder.\n```\nQUERY = FILTERS [ \'|\' APPLY ] [ \'|\' PROJECTIONS ] [ \'|\' OPTS ];\n\nSTR = { quoted_string | unquoted_string };\n\nJSONVAL = json_value;\n\nPLACEHOLDER = { \':\'placeholder_name | \'?\' }\n\nFILTERS = FILTER [{ and | or } [ not ] FILTER];\n\n  FILTER = [@collection_name]/NODE[/NODE]...;\n\n  NODE = { \'*\' | \'**\' | NODE_EXPRESSION | STR };\n\n  NODE_EXPRESSION = \'[\' NODE_EXPR_LEFT OP NODE_EXPR_RIGHT \']\'\n                        [{ and | or } [ not ] NODE_EXPRESSION]...;\n\n  OP =   [ \'!\' ] { \'=\' | \'>=\' | \'<=\' | \'>\' | \'<\' }\n      | [ \'!\' ] { \'eq\' | \'gte\' | \'lte\' | \'gt\' | \'lt\' }\n      | [ not ] { \'in\' | \'ni\' | \'re\' };\n\n  NODE_EXPR_LEFT = { \'*\' | \'**\' | STR | NODE_KEY_EXPR };\n\n  NODE_KEY_EXPR = \'[\' \'*\' OP NODE_EXPR_RIGHT \']\'\n\n  NODE_EXPR_RIGHT =  JSONVAL | STR | PLACEHOLDER\n\nAPPLY = \'apply\' { PLACEHOLDER | json_object | json_array  } | \'del\'\n\nOPTS = { \'skip\' n | \'limit\' n | \'count\' | \'noidx\' | \'inverse\' | ORDERBY }...\n\n  ORDERBY = { \'asc\' | \'desc\' } PLACEHOLDER | json_path\n\nPROJECTIONS = PROJECTION [ {\'+\' | \'-\'} PROJECTION ]\n\n  PROJECTION = \'all\' | json_path\n\n```\n\n* `json_value`: Any valid JSON value: object, array, string, bool, number.\n* `json_path`: Simplified JSON pointer. Eg.: `/foo/bar` or `/foo/"bar with spaces"/`\n* `*` in context of `NODE`: Any JSON object key name at particular nesting level.\n* `**` in context of `NODE`: Any JSON object key name at arbitrary nesting level.\n* `*` in context of `NODE_EXPR_LEFT`: Key name at specific level.\n* `**` in context of `NODE_EXPR_LEFT`: Nested array value of array element under specific key.\n\n## JQL quick introduction\n\nLets play with some very basic data and queries.\nFor simplicity we will use ejdb websocket network API which provides us a kind of interactive CLI. The same job can be done using pure `C` API too (`ejdb2.h jql.h`).\n\nNOTE: Take a look into [JQL test cases](https://github.com/Softmotions/ejdb/blob/master/src/jql/tests/jql_test1.c) for more examples.\n\n```json\n{\n  "firstName": "John",\n  "lastName": "Doe",\n  "age": 28,\n  "pets": [\n    {"name": "Rexy rex", "kind": "dog", "likes": ["bones", "jumping", "toys"]},\n    {"name": "Grenny", "kind": "parrot", "likes": ["green color", "night", "toys"]}\n  ]\n}\n```\nSave json as `sample.json` then upload it the `family` collection:\n\n```sh\n# Start HTTP/WS server protected by some access token\n./jbs -a \'myaccess01\'\n8 Mar 16:15:58.601 INFO: HTTP/WS endpoint at localhost:9191\n```\n\nServer can be accessed using HTTP or Websocket endpoint. [More info](https://github.com/Softmotions/ejdb/blob/master/src/jbr/README.md)\n\n```sh\ncurl -d \'@sample.json\' -H\'X-Access-Token:myaccess01\' -X POST http://localhost:9191/family\n```\n\nWe can play around using interactive [wscat](https://www.npmjs.com/package/@softmotions/wscat) websocket client.\n\n```sh\nwscat  -H \'X-Access-Token:myaccess01\' -q -c http://localhost:9191\nconnected (press CTRL+C to quit)\n> k info\n< k     {\n "version": "2.0.0",\n "file": "db.jb",\n "size": 8192,\n "collections": [\n  {\n   "name": "family",\n   "dbid": 3,\n   "rnum": 1,\n   "indexes": []\n  }\n ]\n}\n\n> k get family 1\n< k     1       {\n "firstName": "John",\n "lastName": "Doe",\n "age": 28,\n "pets": [\n  {\n   "name": "Rexy rex",\n   "kind": "dog",\n   "likes": [\n    "bones",\n    "jumping",\n    "toys"\n   ]\n  },\n  {\n   "name": "Grenny",\n   "kind": "parrot",\n   "likes": [\n    "green color",\n    "night",\n    "toys"\n   ]\n  }\n ]\n}\n```\n\nNote about the `k` prefix before every command; It is an arbitrary key choosen by client and designated to identify particular websocket request, this key will be returned with response to request and allows client to identify that response for his particular request. [More info](https://github.com/Softmotions/ejdb/blob/master/src/jbr/README.md)\n\nQuery command over websocket has the following format:\n\n```\n<key> query <collection> <query>\n```\n\nSo we will consider only `<query>` part in this document.\n\n### Get all elements in collection\n```\nk query family /*\n```\nor\n```\nk query family /**\n```\nor specify collection name in query explicitly\n```\nk @family/*\n```\n\nWe can execute query by HTTP `POST` request\n```\ncurl --data-raw \'@family/[firstName=John]\' -H\'X-Access-Token:myaccess01\' -X POST http://localhost:9191\n\n1\t{"firstName":"John","lastName":"Doe","age":28,"pets":[{"name":"Rexy rex","kind":"dog","likes":["bones","jumping","toys"]},{"name":"Grenny","kind":"parrot","likes":["green color","night","toys"]}]}\n```\n\n### Set the maximum number of elements in result set\n\n```\nk @family/* | limit 10\n```\n\n### Get documents where specified json path exists\n\nElement at index `1` exists in `likes` array within a `pets` sub-object\n```\n> k query family /pets/*/likes/1\n< k     1       {"firstName":"John"...\n```\n\nElement at index `1` exists in `likes` array at any `likes` nesting level\n```\n> k query family /**/likes/1\n< k     1       {"firstName":"John"...\n```\n\n**From this point and below I will omit websocket specific prefix `k query family` and\nconsider only JQL queries.**\n\n### Matching JSON entry values\n\nBelow is a set of self explaining queries:\n\n```\n/pets/*/[name = "Rexy rex"]\n\n/pets/*/[name eq "Rexy rex"]\n\n/pets/*/[name = "Rexy rex" or name = Grenny]\n```\nNote about quotes around words with spaces.\n\nGet all documents where owner `age` greater than `20` and have some pet who like `bones` or `toys`\n```\n/[age > 20] and /pets/*/likes/[** in ["bones", "toys"]]\n```\nHere `**` denotes some element in `likes` array.\n\n`ni` is the inverse operator to `in`.\nGet documents where `bones` somewhere in `likes` array.\n```\n/pets/*/[likes ni "bones"]\n```\n\nWe can create more complicated filters\n```\n( /[age <= 20] or /[lastName re "Do.*"] )\n  and /pets/*/likes/[** in ["bones", "toys"]]\n```\nNote about grouping parentheses and regular expression matching using `re` operator.\n\n### Arrays and maps can be matched as is\n\nFilter documents with `likes` array exactly matched to `["bones","jumping","toys"]`\n```\n/**/[likes = ["bones","jumping","toys"]]\n```\nMatching algorithms for arrays and maps are different:\n\n* Array elements are fully matched from start to end. In equal arrays\n  all values at the same index should be equal.\n* Object maps matching consists of the following steps:\n  * Lexicographically sort object keys in both maps.\n  * Do matching keys and its values starting from the lowest key.\n  * If all corresponding keys and values in one map are fully matched to ones in other\n    and vice versa, maps considered to be equal.\n    For example: `{"f":"d","e":"j"}` and `{"e":"j","f":"d"}` are equal maps.\n\n### Conditions on key names\n\nFind JSON document having `firstName` key at root level.\n```\n/[* = "firstName"]\n```\nI this context `*` denotes a key name.\n\nYou can use conditions on key name and key value at the same time:\n```\n/[[* = "firstName"] = John]\n```\n\nKey name can be either `firstName` or `lastName` but should have `John` value in any case.\n```\n/[[* in ["firstName", "lastName"]] = John]\n```\n\nIt may be useful in queries with dynamic placeholders (C API):\n```\n/[[* = :keyName] = :keyValue]\n```\n\n## JQL data modification\n\n`APPLY` section responsible for modification of documents content.\n\n```\nAPPLY = (\'apply\' { PLACEHOLDER | json_object | json_array  }) | \'del\'\n```\n\nJSON patch specs conformed to `rfc7386` or `rfc6902` specifications followed after `apply` keyword.\n\nLet\'s add `address` object to all matched document\n```\n/[firstName=John] | apply {"address":{"city":"New York", "street":""}}\n```\n\nIf JSON object is an argument of `apply` section it will be treated as merge match (`rfc7386`) otherwise it should be array which denotes `rfc6902` JSON patch. Placegolders also supported by `apply` section.\n```\n/* | apply :?\n```\n\nSet the street name in `address`\n```\n/[firstName=John] | apply [{"op":"replace", "path":"/address/street", "value":"Fifth Avenue"}]\n```\n\nAdd `Neo` fish to the set of John\'s `pets`\n```\n/[firstName=John]\n| apply [{"op":"add", "path":"/pets/-", "value": {"name":"Neo", "kind":"fish"}}]\n```\n\n### Removing documents\n\nUse `del` keyword to remove matched elements from collection:\n```\n/FILTERS | del\n```\n\nExample:\n```\n> k add family {"firstName":"Jack"}\n< k     2\n> k query family /[firstName re "Ja.*"]\n< k     2       {"firstName":"Jack"}\n\n# Remove selected elements from collection\n> k query family /[firstName=Jack] | del\n< k     2       {"firstName":"Jack"}\n```\n\n## JQL projections\n\n```\nPROJECTIONS = PROJECTION [ {\'+\' | \'-\'} PROJECTION ]\n\n  PROJECTION = \'all\' | json_path\n```\n\nProjection allows to get only subset of JSON document excluding not needed data.\n\nLets add one more document to our collection:\n\n```sh\n$ cat << EOF | curl -d @- -H\'X-Access-Token:myaccess01\' -X POST http://localhost:9191/family\n{\n"firstName":"Jack",\n"lastName":"Parker",\n"age":35,\n"pets":[{"name":"Sonic", "kind":"mouse", "likes":[]}]\n}\nEOF\n```\nNow query only pet owners firstName and lastName from collection.\n\n```\n> k query family /* | /{firstName,lastName}\n\n< k     3       {"firstName":"Jack","lastName":"Parker"}\n< k     1       {"firstName":"John","lastName":"Doe"}\n< k\n```\n\nAdd `pets` array for every document\n```\n> k query family /* | /{firstName,lastName} + /pets\n\n< k     3       {"firstName":"Jack","lastName":"Parker","pets":[...\n< k     1       {"firstName":"John","lastName":"Doe","pets":[...\n```\n\nExclude only `pets` field from documents\n```\n> k query family /* | all - /pets\n\n< k     3       {"firstName":"Jack","lastName":"Parker","age":35}\n< k     1       {"firstName":"John","lastName":"Doe","age":28,"address":{"city":"New York","street":"Fifth Avenue"}}\n< k\n```\nHere `all` keyword used denoting whole document.\n\nGet `age` and the first pet in `pets` array.\n```\n> k query family /[age > 20] | /age + /pets/0\n\n< k     3       {"age":35,"pets":[{"name":"Sonic","kind":"mouse","likes":[]}]}\n< k     1       {"age":28,"pets":[{"name":"Rexy rex","kind":"dog","likes":["bones","jumping","toys"]}]}\n< k\n```\n\n## JQL sorting\n\n```\n  ORDERBY = ({ \'asc\' | \'desc\' } PLACEHOLDER | json_path)...\n```\n\nLets add one more document then sort documents in collection by `firstName` ascending and `age` descending.\n\n```\n> k add family {"firstName":"John", "lastName":"Ryan", "age":39}\n< k     4\n```\n\n```\n> k query family /* | /{firstName,lastName,age} | asc /firstName desc /age\n< k     3       {"firstName":"Jack","lastName":"Parker","age":35}\n< k     4       {"firstName":"John","lastName":"Ryan","age":39}\n< k     1       {"firstName":"John","lastName":"Doe","age":28}\n< k\n```\n\n`asc, desc` instructions may use indexes defined for collection to avoid a separate documents sorting stage.\n\n## JQL Options\n\n```\nOPTS = { \'skip\' n | \'limit\' n | \'count\' | \'noidx\' | \'inverse\' | ORDERBY }...\n```\n\n* `skip n` Skip first `n` records before first element in result set\n* `limit n` Set max number of documents in result set\n* `count` Returns only `count` of matched documents\n  ```\n  > k query family /* | count\n  < k     3\n  < k\n  ```\n* `noidx` Do not use any indexes for query execution.\n* `inverse` By default query scans documents from most recently added to older ones.\n   This option inverts scan direction to opposite and activates `noidx` mode.\n   Has no effect if query has `asc/desc` sorting clauses.\n\n## JQL Indexes and performance tips\n\nDatabase index can be build for any JSON field path of number or string type.\nIndex can be an `unique` &dash; not allowing indexed values duplication and `non unique`.\nThe following index mode bit mask flags are used (defined in `ejdb2.h`):\n\nIndex mode | Description\n--- | ---\n<code>0x01 EJDB_IDX_UNIQUE</code> | Index is unique\n<code>0x04 EJDB_IDX_STR</code> | Index for JSON `string` field value type\n<code>0x08 EJDB_IDX_I64</code> | Index for `8 bytes width` signed integer field values\n<code>0x10 EJDB_IDX_F64</code> | Index for `8 bytes width` signed floating point field values.\n\nFor example mode specifies unique index of string type will be `EJDB_IDX_UNIQUE | EJDB_IDX_STR` = `0x05`. Index creation operation defines index of only one type.\n\nLets define non unique string index for `/lastName` path:\n```\n> k idx family 4 /lastName\n< k\n```\nIndex selection for queries based on set of heuristic rules.\n\nYou can always check index usage by issuing `explain` command in WS API:\n```\n> k explain family /[lastName=Doe] and /[age!=27]\n< k     explain [INDEX] MATCHED  STR|3 /lastName EXPR1: \'lastName = Doe\' INIT: IWKV_CURSOR_EQ\n[INDEX] SELECTED STR|3 /lastName EXPR1: \'lastName = Doe\' INIT: IWKV_CURSOR_EQ\n [COLLECTOR] PLAIN\n```\n\nThe following statements are taken into account when using EJDB2 indexes:\n* Only one index can be used for particular query\n* If query consist of `or` joined parts or contains `negated` at top level indexes will not be used.\n  No indexes below:\n  ```\n  /[lastName != Andy]\n\n  /[lastName = "John"] or /[lastName = Peter]\n  ```\n  Will use `/lastName` index defined above\n  ```\n  /[lastName = Doe]\n\n  /[lastName = Doe] and /[age = 28]\n\n  /[lastName = Doe] and /[age != 28]\n  ```\n* The ony following operators are supported by indexes (ejdb 2.0.x):\n  * `eq, =`\n  * `gt, >`\n  * `gte, >=`\n  * `lt, <`\n  * `lte, <=`\n  * `in`\n* `ORDERBY` clauses may use indexes to avoid result set sorting\n* Array fields can also be indexed. Let\'s outline a typical use case: indexing of some  entity tags:\n  ```\n  > k add books {"name":"Mastering Ultra", "tags":["ultra", "language", "bestseller"]}\n  < k     1\n  > k add books {"name":"Learn something in 24 hours", "tags":["bestseller"]}\n  < k     2\n  > k query books /*\n  < k     2       {"name":"Learn something in 24 hours","tags":["bestseller"]}\n  < k     1       {"name":"Mastering Ultra","tags":["ultra","language","bestseller"]}\n  < k\n  ```\n  Create string index for `/tags`\n  ```\n  > k idx books 4 /tags\n  < k\n  ```\n  Filter books by `bestseller` tag and show index usage in query:\n  ```\n  > k explain books /tags/[** in ["bestseller"]]\n  < k     explain [INDEX] MATCHED  STR|4 /tags EXPR1: \'** in ["bestseller"]\' INIT: IWKV_CURSOR_EQ\n  [INDEX] SELECTED STR|4 /tags EXPR1: \'** in ["bestseller"]\' INIT: IWKV_CURSOR_EQ\n  [COLLECTOR] PLAIN\n\n  < k     1       {"name":"Mastering Ultra","tags":["ultra","language","bestseller"]}\n  < k     2       {"name":"Learn something in 24 hours","tags":["bestseller"]}\n  < k\n  ```\n\n**Performance tip:** All documents in collection are sorted by their primary key in `descending` order. So if you use auto generated keys (`ejdb_put_new`) you may\nbe sure what documents fetched as result of full scan query will be ordered\nby time of its insertion in descendant order, unless you don\'t use query sorting, indexes or `inverse` keyword.\n\n**Performance tip:** In many cases, using index may drop down the overall query performance. Because index collection contains only document references (`id`) and engine may perform an addition document fetching by its primary key to finish query matching. So for not so large collections a brute scan may perform better than scan using indexes. However, exact matching operations: `eq`, `in` and `sorting` by natural index order will always benefit from index in any case.\n\n\n\n# HTTP REST/Websocket API endpoint\n\nEJDB engine provides the ability to start a separate HTTP/Websocket endpoint worker exposing network API for quering and data modifications.\n\nThe easiest way to expose database over the network is using the standalone `jbs` server. (Of course if you plan to avoid `C API` integration).\n\n## jbs server\n\n```\njbs -h\n\nEJDB 2.0.0 standalone REST/Websocket server. http://ejdb.org\n\n --file <>\tDatabase file path. Default: db.jb\n -f <>    \t(same as --file)\n --port ##\tHTTP port number listen to. Default: 9191\n -p ##    \t(same as --port)\n --bind <>\tAddress server listen. Default: localhost\n -b <>    \t(same as --bind)\n --access <>\tServer access token matched to \'X-Access-Token\' HTTP header value\n -a <>      \t(same as --access)\n --trunc   \tCleanup existing database file on open\n -t        \t(same as --trunc)\n --wal   \tUse write ahead logging (WAL). Must be set for data durability.\n -w      \t(same as --wal)\n\nAdvanced options\n --sbz ##\tMax sorting buffer size. If exceeded, an overflow temp file for data will be created. Default: 16777216, min: 1048576\n --dsz ##\tInitial size of buffer to process/store document on queries. Preferable average size of document. Default: 65536, min: 16384\n --bsz ##\tMax HTTP/WS API document body size. Default: 67108864, min: 524288\n\nUse any of the following input formats:\n\t-arg <value>\t-arg=<value>\t-arg<value>\n\nUse the -h, -help or -? to get this information again.\n```\n\n## HTTP API\n\nAccess to HTTP endpoint can be protected by a token specified with `--access`\ncommand flag or by C API `EJDB_HTTP` options. If access token specified on server, a client should provide `X-Access-Token` HTTP header value. If token is required and not provided by client `401` HTTP code will be returned. If access token is required and not matched to the token provided by client `403` HTTP code will returned. In any error case `500` error will be returned.\n\n## REST API\n\n### POST /{collection}\nAdd a new document to the `collection`.\n* `200` success. Body: a new document identifier as `int64` number\n\n### PUT /{collection}/{id}\nReplaces/store document under specific numeric `id`\n* `200` on success. Empty body\n\n### DELETE /{collection}/{id}\nRemoves document identified by `id` from a `collection`\n* `200` on success. Empty body\n* `404` if document not found\n\n### PATCH /{collection}/{id}\nPatch a document identified by `id` by [rfc7396](https://tools.ietf.org/html/rfc7396),\n[rfc6902](https://tools.ietf.org/html/rfc6902) data.\n* `200` on success. Empty body\n\n### GET | HEAD /{collections}/{id}\nRetrieve document identified by `id` from a `collection`.\n* `200` on success. Body: JSON document text.\n  * `content-type:application/json`\n  * `content-length:`\n* `404` if document not found\n\n### POST /\nQuery a collection by provided query as POST body.\nBody of query should contains collection name in use in the first filter element: `@collection_name/...`\nRequest headers:\n* `X-Hints` comma separated extra hints to ejdb2 database engine.\n  * `explain` Show query execution plan before first element in result set separated by `--------------------` line.\nResponse:\n* Response data transfered using [HTTP chunked transfer encoding](https://en.wikipedia.org/wiki/Chunked_transfer_encoding)\n* `200` on success.\n* JSON documents separated by `\\n` in the following format:\n  ```\n  \\r\\n<document id>\\t<document JSON body>\n  ...\n  ```\n\nExample:\n\n```\ncurl -v --data-raw \'@family/[age > 18]\' -H \'X-Access-Token:myaccess01\' http://localhost:9191\n* Rebuilt URL to: http://localhost:9191/\n*   Trying 127.0.0.1...\n* TCP_NODELAY set\n* Connected to localhost (127.0.0.1) port 9191 (#0)\n> POST / HTTP/1.1\n> Host: localhost:9191\n> User-Agent: curl/7.58.0\n> Accept: */*\n> X-Access-Token:myaccess01\n> Content-Length: 18\n> Content-Type: application/x-www-form-urlencoded\n>\n* upload completely sent off: 18 out of 18 bytes\n< HTTP/1.1 200 OK\n< connection:keep-alive\n< content-type:application/json\n< transfer-encoding:chunked\n<\n\n4\t{"firstName":"John","lastName":"Ryan","age":39}\n3\t{"firstName":"Jack","lastName":"Parker","age":35,"pets":[{"name":"Sonic","kind":"mouse","likes":[]}]}\n1\t{"firstName":"John","lastName":"Doe","age":28,"pets":[{"name":"Rexy rex","kind":"dog","likes":["bones","jumping","toys"]},{"name":"Grenny","kind":"parrot","likes":["green color","night","toys"]}],"address":{"city":"New York","street":"Fifth Avenue"}}\n* Connection #0 to host localhost left intact\n```\n\n```\ncurl --data-raw \'@family/[lastName = "Ryan"]\' -H \'X-Access-Token:myaccess01\' -H \'X-Hints:explain\' http://localhost:9191\n[INDEX] MATCHED  STR|3 /lastName EXPR1: \'lastName = "Ryan"\' INIT: IWKV_CURSOR_EQ\n[INDEX] SELECTED STR|3 /lastName EXPR1: \'lastName = "Ryan"\' INIT: IWKV_CURSOR_EQ\n [COLLECTOR] PLAIN\n--------------------\n4\t{"firstName":"John","lastName":"Ryan","age":39}\n```\n\n### OPTIONS /\nFetch ejdb JSON metadata and available HTTP methods in `Allow` response header.\nExample:\n```\ncurl -X OPTIONS -H \'X-Access-Token:myaccess01\'  http://localhost:9191/\n{\n "version": "2.0.0",\n "file": "db.jb",\n "size": 16384,\n "collections": [\n  {\n   "name": "family",\n   "dbid": 3,\n   "rnum": 3,\n   "indexes": [\n    {\n     "ptr": "/lastName",\n     "mode": 4,\n     "idbf": 64,\n     "dbid": 4,\n     "rnum": 3\n    }\n   ]\n  }\n ]\n}\n```\n\n## Websocket API\n\nEJDB supports simple text based protocol over HTTP websocket protocol.\nYou can use interactive websocket CLI tool [wscat](https://www.npmjs.com/package/@softmotions/wscat) to communicate with server by hands.\n\n### Commands\n\n#### ?\nWill respond with the following help text message:\n```\nwscat  -H \'X-Access-Token:myaccess01\' -q -c http://localhost:9191\n> ?\n<\n<key> info\n<key> get     <collection> <id>\n<key> set     <collection> <id> <document json>\n<key> add     <collection> <document json>\n<key> del     <collection> <id>\n<key> patch   <collection> <id> <patch json>\n<key> idx     <collection> <mode> <path>\n<key> rmi     <collection> <mode> <path>\n<key> rmc     <collection>\n<key> query   <collection> <query>\n<key> explain <collection> <query>\n<key> <query>\n>\n```\n\nNote about `<key>` prefix before every command; It is an arbitrary key choosen by client and designated to identify particular websocket request, this key will be returned with response to request and allows client to identify that response for his particular request.\n\nErrors are returned in the following format:\n```\n<key> ERROR: <error description>\n```\n\n#### `<key> info`\nGet database metadatas as JSON document.\n\n#### `<key> get     <collection> <id>`\nRetrieve document identified by `id` from a `collection`.\nIf document is not found `IWKV_ERROR_NOTFOUND` will be returned.\n\nExample:\n```\n> k get family 3\n< k     3       {\n "firstName": "Jack",\n "lastName": "Parker",\n "age": 35,\n "pets": [\n  {\n   "name": "Sonic",\n   "kind": "mouse",\n   "likes": []\n  }\n ]\n}\n```\nIf document not found we will get error:\n```\n> k get family 55\n< k ERROR: Key not found. (IWKV_ERROR_NOTFOUND)\n>\n```\n\n#### `<key> set     <collection> <id> <document json>`\nReplaces/add document under specific numeric `id`.\n`Collection` will be created automatically if not exists.\n\n#### `<key> add     <collection> <document json>`\nAdd new document to `<collection>` New `id` of document will be generated\nand returned as response. `Collection> will be created automatically if not exists.\n\nExample:\n```\n> k add mycollection {"foo":"bar"}\n< k     1\n> k add mycollection {"foo":"bar"}\n< k     2\n>\n```\n\n#### `<key> del     <collection> <id>`\nRemove document identified by `id` from the `collection`.\nIf document is not found `IWKV_ERROR_NOTFOUND` will be returned.\n\n#### `<key> patch   <collection> <id> <patch json>`\nApply [rfc7396](https://tools.ietf.org/html/rfc7396) or\n[rfc6902](https://tools.ietf.org/html/rfc6902) patch to the document identified by `id`.\nIf document is not found `IWKV_ERROR_NOTFOUND` will be returned.\n\n#### `<key> query   <collection> <query>`\nExecute query on documents in specified `collection`.\n**Response:** A set of WS messages with document boidies terminated by the last\nmessage with empty body.\n```\n> k query family /* | /firstName\n< k     4       {"firstName":"John"}\n< k     3       {"firstName":"Jack"}\n< k     1       {"firstName":"John"}\n< k\n```\nNote about last message: `<key>` with no body.\n\n#### `<key> explain <collection> <query>`\nSame as `<key> query   <collection> <query>` but the first response message will\nbe prefixed by `<key> explain` and contains query execution plan.\n\nExample:\n```\n> k explain family /* | /firstName\n< k     explain [INDEX] NO [COLLECTOR] PLAIN\n\n< k     4       {"firstName":"John"}\n< k     3       {"firstName":"Jack"}\n< k     1       {"firstName":"John"}\n< k\n```\n\n#### <key> <query>\nExecute query text. Body of query should contains collection name in use in the first filter element: `@collection_name/...`. Behaviour is the same as for: `<key> query   <collection> <query>`\n\n#### `<key> idx     <collection> <mode> <path>`\nEnsure index with specified `mode` (bitmask flag) for given json `path` and `collection`.\nCollection will be created if not exists.\n\nIndex mode | Description\n--- | ---\n<code>0x01 EJDB_IDX_UNIQUE</code> | Index is unique\n<code>0x04 EJDB_IDX_STR</code> | Index for JSON `string` field value type\n<code>0x08 EJDB_IDX_I64</code> | Index for `8 bytes width` signed integer field values\n<code>0x10 EJDB_IDX_F64</code> | Index for `8 bytes width` signed floating point field values.\n\nExample:\n```\nk idx mycollection 5 /name\n```\n\n#### `<key> rmi     <collection> <mode> <path>`\nRemove index with specified `mode` (bitmask flag) for given json `path` and `collection`.\nReturn error if given index not found.\n\n#### `<key> rmc     <collection>`\nRemove collection and all of its data.\nNote: If `collection` is not found no errors will be reported.\n\n\n\n\n# Docker support\n\nIf you have [Docker]("https://www.docker.com/") installed, you can build a Docker image and run it in a container\n\n```\ncd docker\ndocker build -t ejdb2 .\ndocker run -d -p 9191:9191 --name myEJDB ejdb2 --access myAccessKey\n```\n\nor get an image of `ejdb2` directly from the Docker Hub\n\n```\ndocker run -d -p 9191:9191 --name myEJDB softmotions/ejdb2 --access myAccessKey\n```\n\n\n# C API\n\nEJDB can be embedded into any `C/C++` application.\n`C API` documented in the following headers:\n\n* [ejdb.h](https://github.com/Softmotions/ejdb/blob/master/src/ejdb2.h) Main API functions\n* [jbl.h](https://github.com/Softmotions/ejdb/blob/master/src/jbl/jbl.h) JSON documents management API\n* [jql.h](https://github.com/Softmotions/ejdb/blob/master/src/jql/jql.h) Query building API\n\nExample application:\n```c\n#include <ejdb2/ejdb2.h>\n\n#define RCHECK(rc_)          \\\n  if (rc_) {                 \\\n    iwlog_ecode_error3(rc_); \\\n    return 1;                \\\n  }\n\nstatic iwrc documents_visitor(EJDB_EXEC *ctx, const EJDB_DOC doc, int64_t *step) {\n  // Print document to stderr\n  return jbl_as_json(doc->raw, jbl_fstream_json_printer, stderr, JBL_PRINT_PRETTY);\n}\n\nint main() {\n\n  EJDB_OPTS opts = {\n    .kv = {\n      .path = "example.db",\n      .oflags = IWKV_TRUNC\n    }\n  };\n  EJDB db;     // EJDB2 storage handle\n  int64_t id;  // Document id placeholder\n  JQL q = 0;   // Query instance\n  JBL jbl = 0; // Json document\n\n  iwrc rc = ejdb_init();\n  RCHECK(rc);\n\n  rc = ejdb_open(&opts, &db);\n  RCHECK(rc);\n\n  // First record\n  rc = jbl_from_json(&jbl, "{\\"name\\":\\"Bianca\\", \\"age\\":4}");\n  RCGO(rc, finish);\n  rc = ejdb_put_new(db, "parrots", jbl, &id);\n  RCGO(rc, finish);\n  jbl_destroy(&jbl);\n\n  // Second record\n  rc = jbl_from_json(&jbl, "{\\"name\\":\\"Darko\\", \\"age\\":8}");\n  RCGO(rc, finish);\n  rc = ejdb_put_new(db, "parrots", jbl, &id);\n  RCGO(rc, finish);\n  jbl_destroy(&jbl);\n\n  // Now execute a query\n  rc =  jql_create(&q, "parrots", "/[age > :age]");\n  RCGO(rc, finish);\n\n  EJDB_EXEC ux = {\n    .db = db,\n    .q = q,\n    .visitor = documents_visitor\n  };\n\n  // Set query placeholder value.\n  // Actual query will be /[age > 3]\n  rc = jql_set_i64(q, "age", 0, 3);\n  RCGO(rc, finish);\n\n  // Now execute the query\n  rc = ejdb_exec(&ux);\n\nfinish:\n  if (q) jql_destroy(&q);\n  if (jbl) jbl_destroy(&jbl);\n  ejdb_close(&db);\n  RCHECK(rc);\n  return 0;\n}\n```\n\nCompile and run:\n```\ngcc -std=gnu11 -Wall -pedantic -c -o example1.o example1.c\ngcc -o example1 example1.o -lejdb2\n\n./example1\n{\n "name": "Darko",\n "age": 8\n}{\n "name": "Bianca",\n "age": 4\n}\n```\n\n# License\n```\n\nMIT License\n\nCopyright (c) 2012-2019 Softmotions Ltd <info@softmotions.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the "Software"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n```\n\n'