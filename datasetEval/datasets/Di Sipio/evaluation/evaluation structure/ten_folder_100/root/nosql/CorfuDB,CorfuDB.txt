b'# ![logo](https://github.com/CorfuDB/CorfuDB/blob/master/resources/corfu.png "Corfu")               \n\n[![Join the chat at https://gitter.im/CorfuDB/CorfuDB](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/CorfuDB/CorfuDB?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n[![Build Status](https://travis-ci.org/CorfuDB/CorfuDB.svg?branch=master)](https://travis-ci.org/CorfuDB/CorfuDB) \n[![codecov](https://codecov.io/gh/CorfuDB/CorfuDB/branch/master/graph/badge.svg)](https://codecov.io/gh/CorfuDB/CorfuDB)\n\n\nCorfu is a consistency platform designed around the abstraction\nof a shared log. CorfuDB objects are in-memory, highly available\ndata structures providing linearizable read/write operations and\nstrictly serializable transactions. CorfuDB is based on\npeer-reviewed research, see [References](https://github.com/CorfuDB/CorfuDB/wiki/White-papers). \n\nCheck the [Corfu Wiki](https://github.com/CorfuDB/CorfuDB/wiki) for a detailed overview of the \nsoftware architecture and example usage.\n\n### Table of Contents\n[System Requirements](#what-do-i-need-to-run-corfu) \n\n[Corfu Basics](#corfu-basics)\n\n[Corfu Quick Start](#ok-great-get-me-started-running-corfu)\n\n[Developing with Corfu](#now-i-want-to-write-a-program-that-uses-corfu)\n\n## What do I need to run Corfu?\nThe Corfu infrastructure can run on any system which has Java 8 support. We do not impose any requirements on the kind of storage used - Corfu works with any device that your operating system will allow Java to work with: traditional hard disks, SSDs, and even NVM. We also provide an in-memory mode for nodes which do not require persistence. \n\nEven though Corfu is a distributed system, you can start working with Corfu using just a single machine. In addition, you can easily simulate a distributed Corfu system on a single machine using just a few commands.\n\n## So how does Corfu work?\nCorfu is built upon the abstraction of a distributed shared log. The Corfu infrastructure provides this log to clients, which use the log for coordination, communication and storage. The log is a highly available, dynamic and high performance scalable fabric: it is resilient to failures and can be reconfigured at any time.\n\nThe Corfu infrastructure consists of three components: a **layout server**, which helps Corfu clients locate the rest of the Corfu infrastructure, a **sequencer server**, which is used to order updates to the log, and a **log server**, which stores updates to the log. At minimum a Corfu infrastructure must have one of each server type, but for scalability and high availability a real-world deployment will have many. An administrator need not worry about installing each role separately as they are provided as a single monolithic binary.\n\nCorfu clients interact with the infrastructure through the Corfu runtime. The runtime is currently only available in Java, but we plan on providing it in several other languages in the future. Given the address to a layout server in a Corfu infrastructure, the runtime enables clients to access distributed high-level data structures as if they were local data structures. We provide a mechanism to automatically distribute most Java objects as well. \n\nFor more details on the inner workings of Corfu, see the [Corfu wiki](https://github.com/CorfuDB/CorfuDB/wiki).\n\n## Ok, great - get me started running Corfu!\n\nThere are currently two ways to run Corfu - by building the development sources, or on Debian-based systems, installing the corfu-server package. We\'ll describe how to build Corfu from the development sources first. If you just want to install the Debian package, skip [here](#install-from-debian-package).\n\n### Install From Debian Package\n\nWe currently host an apt repository for Ubuntu 14.04 LTS (Trusty).\nTo install Corfu via ```apt-get```, run the following commands:\n\n```bash\n# Install the package for add-apt-repository\n$ sudo apt-get install python-software-properties\n# Add the Corfu signing key to your keychain\n$ sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 482CD4B4\n# Add the Corfu repository\n$ sudo apt-add-repository "deb https://raw.github.com/CorfuDB/Corfu-Repos/debian/ trusty main"\n# Update packages and install the Corfu server infrastructure\n$ sudo apt-get update\n$ sudo apt-get install corfu-server\n```\n\n### Building Corfu From Source\nTo build Corfu, you will need the Java JDK 8 as well as Apache Maven\n3.3 or later to invoke the build system.\n\nOn Linux (Debian/Ubuntu), run:\n```bash\n$ sudo add-apt-repository ppa:webupd8team/java\n$ sudo apt-get update\n$ sudo apt-get install oracle-java8-installer\n```\n\nYour major release number of Debian/Ubuntu will determine whether the\nsimple command below is sufficient to install Maven 3.3 or later.\n\n```bash\n$ sudo apt-get install maven\n```\n\nUse the command `mvn --version` to confirm that Maven 3.3 or later is\ninstalled.  If an older version is installed, then use the\ninstructions at\n[Installing maven 3.3 on Ubuntu](https://npatta01.github.io/2015/08/05/maven_install/)\nto install manually.\n**PLEASE NOTE:** Please substitute the version number `3.3.9` in place of this\nblog\'s instructions for an older & unavailable `3.3.3`.\n\nOn Mac OS X, the [homebrew](http://brew.sh) package manager should help.\nAfter installing homebrew, run:\n```\n$ brew install maven \n```\n\nThe OS X package manager [MacPorts](http://macports.org/) can also\ninstall Maven 3 via `sudo port install maven3`.\n\n### Double-check Java and Maven prerequisites\n\nUse the command `mvn --version` to confirm that Maven 3.3 or later is\ninstalled.  Output should look like:\n\n    % mvn --version\n    Apache Maven 3.3.9 (bb52d8502b132ec0a5a3f4c09453c07478323dc5; 2015-11-10T08:41:47-08:00)\n    Maven home: /opt/local/share/java/maven3\n    Java version: 1.8.0_91, vendor: Oracle Corporation\n    Java home: /Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre\n    Default locale: en_US, platform encoding: UTF-8\n    OS name: "mac os x", version: "10.11.6", arch: "x86_64", family: "mac"\n\nSome OS X users have had problems where the version of Maven installed\nby MacPorts uses a different Java version than expected.  Java version\n1.8 or later is required.  If Java 1.7 or earlier is reported, then\nrefer to this\n[StackOverflow Maven JDK mismatch question](http://stackoverflow.com/questions/18813828/why-maven-use-jdk-1-6-but-my-java-version-is-1-7).\n\n### Building Corfu\n\nOnce you\'ve installed the prerequisites, you can build Corfu.\n\n```\n$ mvn clean install\n```\n\nThe binaries which will be referenced in the following sections will be located in the ```bin``` directory.\n\n### Running Corfu for the first time\n\nThe Corfu infrastructure is provided by the monolithic binary ```corfu_server```. For testing purposes, you will want to run the server in in-memory, single-server mode. To do this, run:\n\n```\n$ ./CorfuDB/bin/corfu_server -ms 9000\n```\n\nThis starts an in-memory single node Corfu infrastructure on port 9000. To point clients at this infrastructure, point them at localhost:9000.\n\n### How do I make sure it works?\nTo test your Corfu infrastructure, you can use the Corfu utilities. One of the first things you might want to do is check is the layout, which described the configuration of servers in the Corfu infrastructure. To run this, try:\n\n```\n$ ./CorfuDB/bin/corfu_layouts -c localhost:9000 query\n```\n\nYou should get output similar to this:\n```json\n{\n  "layoutServers": [\n    "localhost:9000"\n  ],\n  "sequencers": [\n    "localhost:9000"\n  ],\n  "segments": [\n    {\n      "replicationMode": "CHAIN_REPLICATION",\n      "start": 0,\n      "end": -1,\n      "stripes": [\n        {\n          "logServers": [\n            "localhost:9000"\n          ]\n        }\n      ]\n    }\n  ],\n  "epoch": 0\n}\n```\n\nThis means that the infrastructure is currently configured with a single layout server, a single sequencer, and a single replica which is replicated using chain replication.\n\nNow we can try writing to the instance. The stream utility can be used to write to the instance:\n```\n$ echo "hello world" | ./CorfuDB/bin/corfu_stream append -c localhost:9000 -i test\n```\n\nThis utility takes input from stdin and writes it into the log. This command invocation writes a entry named "hello world" to a stream called "test". Streams are a kind of virtualized log in Corfu - think of them as append-only files.\n\nNext, we can try reading back that stream. This can be done by running:\n```\n$ ./CorfuDB/bin/corfu_stream read -c localhost:9000 -i test\n```\nThe utility should print back "hello world".\n\n### Cool, it works! But how do I make it distributed?\n\nNow that you have a working Corfu deployment, you\'ll probably want to make it distributed.\n\nLet\'s start by adding 2 non-provisioned Corfu server instances. We\'ll start these on ports 9000 and 9001 respectively.\n```\n$ ./CorfuDB/bin/corfu_server -m 9000 &\n$ ./CorfuDB/bin/corfu_server -m 9001 &\n```\n\nNow let\'s bootstrap these ```corfu_server``` instances into a cluster.\nTo do that edit the json obtained from the layouts query above in a file called, say layout.json and add in the second server:\n```json\n{\n  "layoutServers": [\n    "localhost:9000",\n    "localhost:9001"\n  ],\n  "sequencers": [\n    "localhost:9000",\n    "localhost:9001"\n  ],\n  "segments": [\n    {\n      "replicationMode": "CHAIN_REPLICATION",\n      "start": 0,\n      "end": -1,\n      "stripes": [\n        {\n          "logServers": [\n            "localhost:9000",\n            "localhost:9001"\n          ]\n        }\n      ]\n    }\n  ],\n  "epoch": 0\n}\n```\nNote that we are adding the second server in port 9001 as a layoutServer, a sequencer and a logServer all in one.\nOnce you have edited the file layout.json add it to the cluster using the following command:\n```\n$ ./CorfuDB/bin/corfu_bootstrap_cluster -l layout.json\n```\n\nIf you check the current layout using the query command:\n```\n$ ./CorfuDB/bin/corfu_layouts query -c localhost:9000,localhost:9001\n```\nYou will see that you now have two servers in the layout. Recall that ```corfu_server``` is a monolithic binary\ncontaining all servers. The above layout.json provisions the second server as another replica so the cluster can tolerate\na single failure.\n\nTo learn more about segments, see the [Corfu wiki](https://github.com/CorfuDB/CorfuDB/wiki).\n\nTo scale Corfu, we add additional ``stripes\'\'. To add an additional stripe, first \nstart a new ```corfu_server``` on port 9002:\n```\n./CorfuDB/bin/corfu_server -m 9002\n```\nRedeploy this cluster with the following additions to layout.json:\nThe layoutServers line should read:\n```json\n  "layoutServers": [\n    "localhost:9000", "localhost:9001", "localhost:9002"\n  ],\n```\nThis time we add localhost:9002 as a new stripe.\n\n```json\n      "stripes": [\n        {\n          "logServers": [\n            "localhost:9000",\n            "localhost:9001"\n          ]\n        },\n        {\n          "logServers": [\n            "localhost:9002"\n          ]\n        }\n      ]\n```\n\nThis adds the logunit at localhost:9002 as an additional stripe in the system. That is, writes to even addresses will now go to\nlocalhost:9000 and localhost:9001, while writes to odd addresses will go to localhost:9002.\n\n## Now I want to write a program that uses Corfu!\n\nTo write your first program that uses Corfu, you will want to add Corfu as a dependency. For Maven-based projects, you can add:\n\n```xml\n <dependency>\n    <groupId>org.corfudb</groupId>\n    <artifactId>runtime</artifactId>\n    <version>0.1-SNAPSHOT</version>\n    <scope>compile</scope>\n</dependency>\n```\nto your pom.xml file. \n\nYou will also want to add the Corfu Maven repository, unless you ran ```mvn install``` from source to install the jar files locally:\n```xml\n<repositories>\n    <repository>\n        <id>corfu-mvn-repo</id>\n        <url>https://raw.github.com/CorfuDB/Corfu-Repos/mvn-repo/</url>\n        <snapshots>\n            <enabled>true</enabled>\n            <updatePolicy>always</updatePolicy>\n        </snapshots>\n    </repository>\n</repositories>\n```\n\nOnce you have Corfu added as a dependency, you can start writing Corfu code. Let\'s start with a map:\n```java\n    CorfuRuntime rt = new CorfuRuntime("localhost:9000")\n                            .connect();\n\n    Map<String,Integer> map = rt.getObjectsView()\n                .build()\n                .setStreamName("A")\n                .setType(SMRMap.class)\n                .open();\n\n    Integer previous = map.get("a");\n    if (previous == null) {\n        System.out.println("This is the first time we were run!");\n        map.put("a", 1);\n    }\n    else {\n        map.put("a", ++previous);\n        System.out.println("This is the " + previous + " time we were run!");\n    }\n```\n\nYou can run this code multiple times from many clients, and each client should display a unique "run".\n\n## [References](https://github.com/CorfuDB/CorfuDB/wiki/White-papers).\n'