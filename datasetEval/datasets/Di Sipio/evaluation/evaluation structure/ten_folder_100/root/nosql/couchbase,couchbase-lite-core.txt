b'**Couchbase Lite Core** (aka **LiteCore**) is the next-generation core storage and query engine for [Couchbase Lite][CBL]. It provides a cross-platform implementation of the database CRUD and query features, document versioning, and replication/sync.\n\nAll platform implementations of Couchbase Lite (from 2.0 onward) are built atop this core, adding higher-level language & platform bindings. But LiteCore may find other uses too, perhaps for applications that want a fast minimalist data store with map/reduce indexing and queries, but don\'t need the higher-level features of Couchbase Lite.\n\n![Travis CI status](https://travis-ci.org/couchbase/couchbase-lite-core.svg?branch=master)\n\n# Features\n\n* Database CRUD (Create, Read, Update, Delete) operations:\n    * Fast key-value storage, where keys and values are both opaque blobs\n    * Iteration by key order\n    * Iteration by _sequence_, reflecting the order in which changes were made to the database. (This is useful for tasks like updating indexes and replication)\n    * Multi-version document format that tracks history using a revision tree (as in CouchDB)\n    * Timed document expiration (as in Couchbase Server)\n    * API support for database encryption (as provided by SQLCipher or SQLite\'s Encryption Extension)\n    * Highly efficient [Fleece][FLEECE] binary data encoding: supports JSON data types but\n      requires no parsing, making it extremely efficient to read\n* Direct querying of schemaless JSON documents:\n    * Semantics based on SQL; supports most [N1QL][N1QL] functionality\n    * JSON query syntax, similar to a parse tree; easy to generate from platform APIs like NSPredicate or LINQ\n    * Can search and index arbitrary document properties without requiring any schema\n    * Can index arrays in documents, enabling efficient denormalized one-to-many relations\n    * Queries compile into SQL and from there into SQLite compiled bytecode\n    * Parameters can be substituted without having to recompile the query\n    * Queries don\'t require indexes, but will run faster if indexes are created on the document\n      properties being searched\n    * Supports full-text search, using SQLite\'s FTS4 module\n* Replicator:\n    * Multi-master bidirectional document sync\n    * Replicator detects conflicts; temporarily stores both revisions, and notifies app-level handlers to resolve them\n    * Replicator transfers document deltas, saving bandwidth when updating large documents\n    * Uses [BLIP][BLIP] multiplexing protocol over WebSockets\n    * Pluggable transports mean it could run over Bluetooth or other protocols\n* REST API:\n    * Implements a _subset_ of the CouchDB / Sync Gateway / Couchbase Lite REST API\n    * Currently incomplete; not ready for prime time\n* Pluggable storage engines:\n    * SQLite is available by default\n    * Others could be added by implementing C++ `DataFile`, `KeyStore`, `Query` interfaces\n* Command-line `cblite` tool\n    * Easy database inspection, document lookups and queries\n    * Can run replications (push and/or pull)\n    * Can serve the REST API over HTTP\n* C and C++ APIs (rather low-level; not considered "public" APIs yet.)\n* Bindings to C# and Java\n\n# Platform Support\n\nLiteCore runs on Mac OS, iOS, tvOS, Android, various other flavors of Unix, and Windows.\n\nIt is written in C++ (using C++11 features) and compiles with Clang and MSVC.\n\nIt does not currently support Raspberry Pi or other similar devices, due to build issues. (But this could be remedied with some work; most of the problems involve setting up recent-enough Clang and libc++ versions on Raspbian. Pull requests welcome!)\n\n# Status\n\n**As of November 2018:** LiteCore is in active use as the engine of Couchbase Lite 2.0 and 2.1! Development continues...\n\n* Active development usually happens on the `master` branch, which may therefore be temporarily broken. We don\'t currently have a "stable" branch.\n* Most development is done on macOS using Xcode, so the Xcode project should always build, and the code should pass its unit tests on Mac. iOS is pretty likely to work too, since it\'s so similar to Mac at this level.\n* The CMake build is generally up to date but may fall behind.  CMake can be used to build every variant except for iOS and tvOS.\n\n# Building It\n\n**Very Important:**\n\n* This repo has **submodules**. Make sure they\'re checked out. Either use `git clone --recursive` to download LiteCore, or else after the clone run `git submodule update --init --recursive`.\n\nOnce you\'ve cloned or downloaded the source tree...\n\n## macOS, iOS\n\nIf you want to use Objective-C or Swift APIs, you should use Couchbase Lite instead \xe2\x80\x94 check out and build the `feature/2.0` branch of the [couchbase-lite-ios][CBL_iOS_2] repo, which itself includes LiteCore as a submodule. The following instructions are to build just LiteCore on its own:\n\n* Make sure you have Xcode **10.0** or later.\n* Open **Xcode/LiteCore.xcodeproj**. \n* Select the scheme **LiteCore static** or **LiteCore dylib**. \n* Choose _Product>Build_ (for a debug build) or _Product>Build For>Profiling_ (for a release/optimized build).\n* Link the build product `libLiteCoreStatic.a` or `libLiteCore.dylib` into your target.\n\n## Linux\n\n**Important!** LiteCore uses a couple of external libraries, which may or may not be installed in your system already. If not, please install the appropriate development packages via your package manager. You must have the following libraries present:\n    \n- libz\n- libicu\n\nYou\'ll need **Clang 3.9.1 or higher**. Unfortunately a lot of distros only have 3.5; run `clang --version` to check, and upgrade manually if necessary. You also need a corresponding version of libc++. On Debian-like systems, the apt-get packages you need are `clang`, `libc++1`, `libc++-dev`, `libc++abi-dev`.\n\n### Actually Building\n\nOnce you\'ve got the dependencies and compiler installed, do this from the root directory of the source tree:\n\n```sh\nmkdir build_cmake/unix\ncd build_cmake/unix\n\n# Use whatever clang you have installed\nCC=clang CXX=clang++ cmake -DCMAKE_BUILD_TYPE=MinSizeRel ..\n\n# And a reasonable number (# of cores?) for the j flag\nmake -j8 LiteCore\n```\n\nIf CMake\'s initial configuration checks fail, the setup may be left in a broken state and will then fail immediately. To remedy this simply delete the `unix` directory and try again.\n\n## Android\n\nAndroid has a bit longer of a command line invocation but it is the same idea as the Linux build above.  There are some key properties that you need to be aware of though.  Be sure to have the environment variable `ANDROID_NDK_ROOT` defined to where the NDK lives on your system.\n\n- Architecture:  The architecture of the device being built for (x86, x86_64, armeabi-v7a [in example], arm64-v8a)\n- Version: The minimum Android API level that the library will support (22 in the following)\n\n```sh\n# Use the same name as the architecture being built for (e.g. armeabi-v7a)\nmkdir -p build_cmake/android/lib/armeabi-v7a\ncd build_cmake/android/lib/armeabi-v7a\ncmake -DCMAKE_BUILD_TYPE=MinSizeRel \\\n    -DCMAKE_SYSTEM_NAME=Android \\\n    -DCMAKE_SYSTEM_VERSION=22 \\\n    -DCMAKE_ANDROID_NDK_TOOLCHAIN_VERSION=clang \\\n    -DCMAKE_ANDROID_ARCH_ABI=armeabi-v7a \\\n    -DCMAKE_ANDROID_STL_TYPE=c++_static \\\n    ../../../..\nmake -j8 LiteCore\n```\n\n## Windows Desktop\n\nOpen the Visual Studio 2015 Developer Command Prompt and navigate to the repo root.  Then execute:\n    \n    * 64-bit build *\n    cd build_make\n    "C:\\Program Files (x86)\\CMake\\bin\\cmake.exe" -G "Visual Studio 14 2015 Win64" ..\n    \n    * 32-bit build *\n    cd build_make\n    "C:\\Program Files (x86)\\CMake\\bin\\cmake.exe" -G "Visual Studio 14 2015" ..\n    \nThis will create `LiteCore.sln` in the directory that you can open with Visual Studio.\n\n## Windows Store\n\nOpen the Visual Studio 2015 Developer Command Prompt and navigate to the repo root.  Then execute:\n    \n    * x64 build *\n    cd build_make\n    "C:\\Program Files (x86)\\CMake\\bin\\cmake.exe" -G "Visual Studio 14 2015 Win64" -DCMAKE_SYSTEM_NAME=WindowsStore\n    -D CMAKE_SYSTEM_VERSION="10.0.14393.0" ..\n    \n    * x86 build *\n    cd build_make\n    "C:\\Program Files (x86)\\CMake\\bin\\cmake.exe" -G "Visual Studio 14 2015" -DCMAKE_SYSTEM_NAME=WindowsStore\n    -D CMAKE_SYSTEM_VERSION="10.0.14393.0" ..\n    \n    * ARM build *\n    cd build_make\n    "C:\\Program Files (x86)\\CMake\\bin\\cmake.exe" -G "Visual Studio 14 2015 ARM" -DCMAKE_SYSTEM_NAME=WindowsStore\n    -D CMAKE_SYSTEM_VERSION="10.0.14393.0" ..\n    \nThis will create `LiteCore.sln` in the directory that you can open with Visual Studio.\n\n# Documentation\n\n## API\n\nThe C API headers are in `C/include/`. Generally you just need to include `c4.h`.\n\nWe have [online C API documentation](https://couchbase.github.io/couchbase-lite-core/C/html/modules.html), generated by Doxygen from the headers.\n\nIf this is out of date, or you want a local copy, you can generate your own by running the following commands from a shell at the root directory of the repo:\n\n    cd C\n    doxygen\n    \nThe main page is then located at `../docs/C/html/modules.html`.\n\n**The C API is considered unstable** and may change without notice, since it\'s considered an internal API of Couchbase Lite. In the future we want to provide a stable and supported C/C++ API, but not yet.\n\n**Do not call any C++ APIS**, nor include any headers not in `C/include/` -- these are the underlying implementation beneath the C API. They are even more unstable, expose internal functionality we don\'t support, and may blow up if used incorrectly. The exception is `c4.hh`, which provides some handy C++ wrappers around the C API and will make your life more pleasant if you code in C++.\n\n## Internal Implementation\n\nFor those interested in diving into the implementation, there is [an overview of the major classes](https://github.com/couchbase/couchbase-lite-core/blob/master/docs/overview/index.md).\n\n# Authors\n\nJens Alfke ([@snej](https://github.com/snej)), Jim Borden ([@borrrden](https://github.com/borrrden)), Hideki Itakura ([@hideki](https://github.com/hideki))\n\n# License\n\nLike all Couchbase open source code, this is released under the Apache 2 [license](LICENSE).\n\n[CBL]: http://www.couchbase.com/nosql-databases/couchbase-mobile\n[N1QL]: https://www.couchbase.com/n1ql\n[FLEECE]: https://github.com/couchbaselabs/fleece\n[BLIP]: https://github.com/couchbaselabs/BLIP-Cpp/blob/master/docs/BLIP%20Protocol.md\n'