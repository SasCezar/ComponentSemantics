b'[![Build Status](https://gitlab.com/go-kivik/kivik/badges/master/pipeline.svg)](https://gitlab.com/go-kivik/kivik/pipelines) [![Codecov](https://img.shields.io/codecov/c/github/go-kivik/kivik.svg?style=flat)](https://codecov.io/gh/go-kivik/kivik) [![Go Report Card](https://goreportcard.com/badge/github.com/go-kivik/kivik)](https://goreportcard.com/report/github.com/go-kivik/kivik) [![GoDoc](https://godoc.org/github.com/go-kivik/kivik?status.svg)](http://godoc.org/github.com/go-kivik/kivik) [![Website](https://img.shields.io/website-up-down-green-red/http/kivik.io.svg?label=website&colorB=007fff)](http://kivik.io)\n\n# Kivik\n\nPackage kivik provides a common interface to CouchDB or CouchDB-like databases.\n\nThe kivik package must be used in conjunction with a database driver.\n\nThe kivik driver system is modeled after the standard library\'s [sql](https://golang.org/pkg/database/sql/)\nand [sql/driver](https://golang.org/pkg/database/sql/driver/) packages, although\nthe client API is completely different due to the different database models\nimplemented by SQL and NoSQL databases such as CouchDB.\n\n# Versions\n\nYou are browsing the **development** branch of Kivik. The stable version is\navailable [here](https://github.com/go-kivik/kivik/tree/stable1.x). Please\nconsult the documentation on that page for proper installation of the stable\nbranch.\n\nThis branch which will eventually become the Kivik 2.0.0 release. The API is\nsubject to rapid and unannounced changes at this stage of development. For\nproduction work, you are encouraged to use the latest 1.x release of Kivik,\nwhich is stable.\n\nExample configuration for common dependency managers follow.\n\n## [dep](https://github.com/golang/dep)\n\nUpdate your `Gopkg.toml` file:\n\n```toml\n[[constraint]]\n  name = "github.com/go-kivik/kivik"\n  branch = "master"\n\n[[constraint]]\n  name = "github.com/go-kivik/couchdb"\n  branch = "master"\n```\n\n## [Glide](https://github.com/Masterminds/glide)\n\nUpdate your `glide.yaml` file:\n\n```yaml\nimport:\n- package: github.com/go-kivik/kivik\n  version: master\n- package: github.com/go-kivik/couchdb\n  version: master\n```\n\n## [govendor](https://github.com/kardianos/govendor)\n\nFetch the latest development version of Kivik and the CouchDB driver with the\nfollowing command:\n\n        govendor fetch github.com/go-kivik/kivik\n        govendor fetch github.com/go-kivik/couchdb\n\n# Installation\n\nInstall Kivik as you normally would for any Go package:\n\n    go get -u github.com/go-kivik/kivik\n    go get -u github.com/go-kivik/couchdb\n\nThis will install the main Kivik package and the CouchDB database driver. See\nthe [list of Kivik database drivers](https://github.com/go-kivik/kivik/wiki/Kivik-database-drivers)\nfor a complete list of available drivers.\n\n# Example Usage\n\nPlease consult the the [package documentation](https://godoc.org/github.com/go-kivik/kivik)\nfor all available API methods, and a complete usage documentation.  And for\nadditional usage examples, [consult the wiki](https://github.com/go-kivik/kivik/wiki/Usage-Examples).\n\n```go\npackage main\n\nimport (\n    "context"\n    "fmt"\n\n    // "github.com/flimzy/kivik" // Stable version of Kivik\n    "github.com/go-kivik/kivik" // Development version of Kivik\n    _ "github.com/go-kivik/couchdb" // The CouchDB driver\n)\n\nfunc main() {\n    client, err := kivik.New("couch", "http://localhost:5984/")\n    if err != nil {\n        panic(err)\n    }\n\n    db, err := client.DB(context.TODO(), "animals")\n    if err != nil {\n        panic(err)\n    }\n\n    doc := map[string]interface{}{\n        "_id":      "cow",\n        "feet":     4,\n        "greeting": "moo",\n    }\n\n    rev, err := db.Put(context.TODO(), "cow", doc)\n    if err != nil {\n        panic(err)\n    }\n    fmt.Printf("Cow inserted with revision %s\\n", rev)\n}\n```\n\n# Frequently Asked Questions\n\nNobody has ever asked me any of these questions, so they\'re probably better called\n"Never Asked Questions" or possibly "Imagined Questions."\n\n## Why another CouchDB client API?\n\nRead the [design goals](https://github.com/go-kivik/kivik/wiki/Design-goals) for\nthe general design goals.\n\nSpecifically, I was motivated to write Kivik for a few reasons:\n\n1. I was unhappy with any of the existing CouchDB drivers for Go. The [best\none](https://github.com/fjl/go-couchdb) had a number of shortcomings:\n\n    - It is no longer actively developed.\n    - It [doesn\'t have an open source license](https://github.com/fjl/go-couchdb/issues/15).\n    - It doesn\'t support iterating over result sets, forcing one to load all\n      results of a query into memory at once.\n    - It [doesn\'t support CouchDB 2.0](https://github.com/fjl/go-couchdb/issues/14)\n      sequence IDs or MongoDB-style queries.\n    - It doesn\'t natively support CookieAuth (it does allow a generic Auth method\n      which could be used to do this, but I think it\'s appropriate to put directly\n      in the library).\n\n2. I wanted a single client API that worked with both CouchDB and\n[PouchDB](https://pouchdb.com/). I had previously written\n[go-pouchdb](https://github.com/flimzy/go-pouchdb), a GopherJS wrapper around\nthe PouchDB library with a public API modeled after `fjl/go-couchdb`, but I\nstill wanted a unified driver infrastructure.\n\n3. I want an unambiguous, open source license. This software is released under\nthe Apache 2.0 license. See the included LICENSE.md file for details.\n\n4. I wanted the ability to mock CouchDB connections for testing. This is possible\nwith the `sql` / `sql/driver` approach by implementing a mock driver, but was\nnot possible with any existing CouchDB client libraries. This library makes that\npossible for CouchDB apps, too.\n\n5. I wanted a simple, mock CouchDB server I could use for testing. It doesn\'t\nneed to be efficient, or support all CouchDB servers, but it should be enough\nto test the basic functionality of a PouchDB app, for instance. Kivik aims to\ndo this with the `kivik serve` command, in the near future.\n\n6. I wanted a toolkit that would make it easy to build a proxy to sit in front\nof CouchDB to handle custom authentication or other logic that CouchDB cannot\nsupport natively. Kivik aims to accomplish this in the future.\n\n## What are Kivik\'s requirements?\n\nKivik\'s test suite is automatically run on Linux for every pull request, but\nshould work on all supported Go architectures. If you find it not working for\nyour OS/architecture, please submit a bug report.\n\nBelow are the compatibility targets for specific runtime and database versions.\nIf you discover a bug affecting any of these supported environments, please let\nme know by submitting a bug report via GitHub.\n\n- **Go** Kivik 2.x aims for full compatibility with all stable releases of Go\n  from 1.9. For Go 1.7 or 1.8 you can use [Kivik 1.x](https://github.com/go-kivik/kivik/tree/stable1.x)\n- **CouchDB** The Kivik 1.x CouchDB driver aims for compatibility with all\n  stable releases of CouchDB from 1.6.1.\n- **GopherJS** GopherJS always requires the latest stable version of Go, so\n  building Kivik with GopherJS has this same requirement.\n- **PouchDB** The Kivik 1.x PouchDB driver aims for compatibility with all\n  stable releases of PouchDB from 6.0.0.\n\n## What is the development status?\n\nKivik 1.x is considered production-ready and comes with a complete client API\nclient and backend drivers for CouchDB and PouchDB.\n\nKivik 2.x is under development, and adds new features and a streamlined API.\n\nFuture goals are to flesh out the Memory driver, which will make automated\ntesting without a real CouchDB server easier. Then I will work on completing\nthe \'serve\' mode.\n\nYou can see a complete overview of the current status on the\n[Compatibility chart](https://github.com/go-kivik/kivik/blob/master/doc/COMPATIBILITY.md)\n\n## Why the name "Kivik"?\n\n[Kivik](http://www.ikea.com/us/en/catalog/categories/series/18329/) is a line\nof sofas (couches) from IKEA. And in the spirit of IKEA, and build-your-own\nfurniture, Kivik aims to allow you to "build your own" CouchDB client, server,\nand proxy applications.\n\n## What license is Kivik released under?\n\nThis software is released under the terms of the Apache 2.0 license. See\nLICENCE.md, or read the [full license](http://www.apache.org/licenses/LICENSE-2.0).\n\n## What projects currently use Kivik?\n\nIf your project uses Kivik, and you\'d like to be added to this list, create an\nissue or submit a pull request.\n\n- [Cayley](https://github.com/cayleygraph/cayley) is an open-source graph\n  database. It uses Kivik for the CouchDB and PouchDB storage backends.\n'