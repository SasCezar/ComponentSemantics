b'<img src="https://raw.githubusercontent.com/hivedb/hive/master/.github/logo_transparent.svg?sanitize=true" width="350px">\n\n[![Dart CI](https://github.com/hivedb/hive/workflows/Dart%20CI/badge.svg)](https://github.com/hivedb/hive/actions) [![Codecov](https://img.shields.io/codecov/c/github/hivedb/hive.svg)](https://codecov.io/gh/hivedb/hive) [![Core version](https://img.shields.io/pub/v/hive?label=hive)](https://pub.dev/packages/hive)\n\nHive is a lightweight and blazing fast key-value database written in pure Dart. Inspired by [Bitcask](https://en.wikipedia.org/wiki/Bitcask).\n\n- [Documentation](https://docs.hivedb.dev/) \xf0\x9f\x93\x96\n- [Frequently Asked Questions](https://docs.hivedb.dev/more/faq) \xf0\x9f\x99\x8b\n- [Samples](https://docs.hivedb.dev/more/examples) \xf0\x9f\x94\xa5\n\n### Flutter Web Demos \xf0\x9f\x95\xb8\xef\xb8\x8f\n- [Counter](https://hivedb.github.io/hive/demos/counter)\n- [Sketchpad](https://hivedb.github.io/hive/demos/sketchpad)\n- [Todo App](https://hivedb.github.io/hive/demos/todo)\n\n## Features\n\n### Cross-platform \xe2\x9a\xa1\n- Runs on desktop, mobile & in browser\n- Very good performance (see [benchmark](#benchmark))\n\n### Easy to use \xe2\x9d\xa4\xef\xb8\x8f\n- Keys are of type String or uint32 and values are arbitrary objects\n- The basic operations are `put(key, value)`, `get(key)`, `delete(key)`\n- Strong encryption built in\n\n### Lightweight \xf0\x9f\x8e\x88\n- Small runtime\n- Small disk space consumption\n- **NO** native dependencies\n\n\n## Benchmark\n\n|Read\t1000 entries |Write 1000 entries|\n|:------------:|:------------:|\n|\t![](https://raw.githubusercontent.com/hivedb/hive/master/.github/benchmark_read.png) |\t![](https://raw.githubusercontent.com/hivedb/hive/master/.github/benchmark_write.png) |\n| SharedPreferences is on par with Hive when it comes to read performance. SQLite performs much worse. | Hive greatly outperforms SQLite and SharedPreferences when it comes to writing or deleting. |\n\nThis benchmark was performed on a Oneplus 6T with Android Q. All entries are read and written one after another. You can [run the benchmark yourself](https://github.com/hivedb/hive_benchmark).\n\n## Getting started\nTo get started using Hive in a Flutter project, add the following dependencies to your `pubspec.yaml`. Use the latest version instead of `[version]`.\n\n[![Core version](https://img.shields.io/pub/v/hive?label=hive)](https://pub.dev/packages/hive) [![Generator version](https://img.shields.io/pub/v/hive_generator.svg?label=hive_generator)](https://pub.dev/packages/hive_generator) [![Hive Flutter version](https://img.shields.io/pub/v/hive_flutter?label=hive_flutter)](https://pub.dev/packages/hive_flutter) [![Build runner version](https://img.shields.io/pub/v/build_runner.svg?label=build_runner)](https://pub.dev/packages/build_runner)\n\n```yaml\ndependencies:\n  hive: ^[version]\n  hive_flutter: ^[version]\n\ndev_dependencies:\n  hive_generator: ^[version]\n  build_runner: ^[version]\n```\n\n## Usage\n\nYou can use Hive just like a map. It is not necessary to await `Future`s.\n\n```dart\nHive.init(Directory.current.path);\nvar box = await Hive.openBox(\'myBox\');\n\nbox.put(\'name\', \'David\');\n\nvar name = box.get(\'name\');\n\nprint(\'Name: $name\');\n```\n\n## Store objects\n\nHive not only supports primitives, lists and maps but also any Dart object you like. You need to generate a type adapter before you can store objects.\n\n```dart\n@HiveType\nclass Person extends HiveObject {\n\n  @HiveField(0)\n  String name;\n\n  @HiveField(1)\n  int age;\n}\n```\n\nExtending `HiveObject` is optional but it provides handy methods like `save()` and `delete()`.\n\n```dart\nHive.init(Directory.current.path);\nvar box = await Hive.openBox(\'myBox\');\n\nvar person = Person()\n  ..name = \'Dave\'\n  ..age = 22;\nbox.add(person);\n\nprint(box.getAt(0)); // Dave - 22\n\nperson.age = 30;\nperson.save();\n\nprint(box.getAt(0)) // Dave - 30\n```\n\n## Hive \xe2\x9d\xa4\xef\xb8\x8f Flutter\nHive was written with Flutter in mind. It is a perfect fit if you need a lightweight datastore for your app. After adding the required dependencies to your `pubspec.yaml`, you are able to use Hive in your project:\n\n```dart\nimport \'package:hive/hive.dart\';\nimport \'package:hive_flutter/hive_flutter.dart\';\n\nclass SettingsPage extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return WatchBoxBuilder(\n      box: Hive.box(\'settings\'),\n      builder: (context, box) {\n        return Switch(\n          value: box.get(\'darkMode\'),\n          onChanged: (val) {\n            box.put(\'darkMode\', val);\n          }\n        )\n      },\n    );\n  }\n}\n```\n\nBoxes are cached and therefore fast enough to be used directly in the `build()` method of Flutter widgets.\n\n## Todo\n\nThe work on Hive has just started. If you want to contribute, it would be amazing if you helped me with one of these:\n\n- [x] Good test coverage\n- [x] Many examples, especially for Flutter\n- [x] Benchmarks and comparison\n- [x] Finalize API\n- [x] Even more tests\n- [ ] Queries\n- [ ] Improve documentation\n- [ ] Write binary format spec\n- [ ] You can never have enough tests\n\n### Licence\n\n```\nCopyright 2019 Simon Leier\n\nLicensed under the Apache License, Version 2.0 (the "License");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an "AS IS" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n'