b"# ObjectDB\n\n[![Pub](https://img.shields.io/pub/v/objectdb.svg)](https://pub.dartlang.org/packages/objectdb)\n[![license](https://img.shields.io/github/license/netz-chat/objectdb.svg)](https://github.com/netz-chat/objectdb/blob/master/LICENSE)\n[![GitHub stars](https://img.shields.io/github/stars/netz-chat/objectdb.svg?label=Stars)](https://github.com/netz-chat/objectdb/stargazers)\n\n\nPersistent embedded document-oriented NoSQL database for [Dart](https://www.dartlang.org/) and [Flutter](https://flutter.io/). 100% Dart.\n\nCheck out [objectdb_flutter](https://github.com/netz-chat/objectdb_flutter) for reactive store listeners.\n\nIf you notice any bugs you can [create](https://github.com/netz-chat/objectdb/issues/new 'Create issue') an issue on GitHub. You're also welcome to contribute using [pull requests](https://github.com/netz-chat/objectdb/compare 'Pull request'). Please open an issue before spending time on any pull request.\n\n\n- [How to use](#how-to-use)\n- [Flutter](#flutter)\n- [Methods](#methods)\n    - [find](#find)\n    - [insert](#insert)\n    - [update](#update)\n    - [remove](#remove)\n- [Query](#query)\n- [Operators](#operators)\n    - [Logical](#logical)\n    - [Comparison](#comparison)\n    - [Modify](#modify)\n    - [Examples](#examples)\n- [Todo's](#todos)\n\n\n\n## How to use\n```dart\nfinal path = Directory.current.path + '/my.db';\n\n// create database instance and open\nfinal db = ObjectDB(path);\ndb.open();\n\n// insert document into database\ndb.insert({'name': {'first': 'Some', 'last': 'Body'}, 'age': 18, 'active': true});\ndb.insert({'name': {'first': 'Someone', 'last': 'Else'}, 'age': 25, 'active': false});\n\n// update documents\ndb.update({Op.gte: {'age': 80}}, {'active': false});\n\n// remove documents\ndb.remove({'active': false});\n\n// search documents in database\nvar result = await db.find({'active': true, 'name.first': 'Some'});\n\n// 'tidy up' the db file\ndb.tidy();\n\n// close db\nawait db.close();\n```\n\n## Flutter\nCheck out [this](https://github.com/netz-chat/flutter_examples/tree/master/objectdb) project for flutter-examples.\n\nCheck out [objectdb_flutter](https://github.com/netz-chat/objectdb_flutter) for reactive store listeners.\n\n## Methods\n- `Future<ObjectDB> db.open([bool tidy = true])` opens database\n- `Future<void> db.tidy()` 'tidy up' the .db file\n- `Future<void> db.close()` closes database (should be awaited to ensure all queries have been executed)\n\n### find\n- `Future<List<Map>> db.find(Map query)` List with all matched documents\n- `Future<Map> db.first(Map query)` first matched document\n- `Future<Map> db.last(Map query)` last matched document\n\n### insert\n- `Future<ObjectId> db.insert(Map document)` insert single document\n- `Future<List<ObjectId>> db.insertMany(List<Map> documents)` insert many documents\n\n### update\n- `Future<int> db.update(Map query, Map changes, [bool replace = false])` update documents that mach `query` with `changes` (optionally replace whole document)\n\n### remove\n- `Future<int> db.remove(Map query)` remove documents that match `query`\n\n## Query\n```dart\n// Match fields in subdocuments\n{Op.gte: {\n    'birthday.year': 18\n}}\n\n// or-operator\n{Op.or:{\n    'active': true,\n    Op.inArray: {'group': ['admin', 'moderator']}\n}}\n\n// not equal to\n{Op.not: {'active': false}}\n```\n**NOTE** Querying arrays is not supportet yet.\n\n## Operators\n### Logical\n- `and` (default operator on first level)\n- `or`\n- `not`\n\n### Comparison\n- `lt`, `lte`: less than, less than or equal\n- `gt`, `gte`: greater than, greater than or equal\n- `inList`, `notInList`: value in list, value not in list\n\n\n### Modify\n- `set`: set value\n- `max`, `min`: set max or min int value\n- `increment`, `multiply`: increment/multiply by\n- `unset`: unset key/value\n- `rename`: rename key\n- todo's: `push`\n\n```dart\n{Op.set: {'path.to.key': 'value'}} // set entry['path']['to']['key'] = 'value' (path will be created if not exists)\n{Op.max: {'path.to.key': 200}} // set value 200 if value is greater than 200\n{Op.min: {'path.to.key': 200}} // set value 200 if value is smaller than 200\n{Op.increment: {'path.to.key': -5}} // increment value by negative 5\n{Op.multiply: {'path.to.key': 2}} // multiply value by 2\n{Op.unset: {'path.to.key': true}} // unset key/value at entry['path']['to']['key'] if exists\n{Op.rename: {'path.to.key': 'new_key'}} // new value will be at entry['path']['to']['new_key']\n\n\ndb.update({\n  'age': RegExp('[18-20]'),\n  Op.gt: {'duration': 500},\n}, {\n  Op.max: {'stats.score': 100},\n  Op.increment: {'stats.level': -5},\n});\n```\n\n### Examples\n```dart\n// query\nvar result = db.find({\n    'active': true,\n    Op.or: {\n        Op.inList: {'state': ['Florida', 'Virginia', 'New Jersey']},\n        Op.gte: {'age': 30},\n    }\n});\n\n// same as\nvar match = (result['active'] == true && (['Florida', 'Virginia', 'New Jersey'].contains(result['state']) || result['age'] >= 30));\n```\n\n## Todo's\n- [x] regex match\n- [ ] encryption\n- [ ] querying arrays\n- [ ] benchmarks\n- [ ] indexing\n\n## License\nSee [License](https://github.com/netz-chat/objectdb/blob/master/LICENSE)"