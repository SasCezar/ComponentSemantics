b"# Add schemaless attributes to Eloquent models\n\n[![Latest Version on Packagist](https://img.shields.io/packagist/v/spatie/laravel-schemaless-attributes.svg?style=flat-square)](https://packagist.org/packages/spatie/laravel-schemaless-attributes)\n[![Build Status](https://img.shields.io/travis/spatie/laravel-schemaless-attributes/master.svg?style=flat-square)](https://travis-ci.org/spatie/laravel-schemaless-attributes)\n[![Quality Score](https://img.shields.io/scrutinizer/g/spatie/laravel-schemaless-attributes.svg?style=flat-square)](https://scrutinizer-ci.com/g/spatie/laravel-schemaless-attributes)\n[![StyleCI](https://styleci.io/repos/132581720/shield?branch=master)](https://styleci.io/repos/132581720)\n[![Total Downloads](https://img.shields.io/packagist/dt/spatie/laravel-schemaless-attributes.svg?style=flat-square)](https://packagist.org/packages/spatie/laravel-schemaless-attributes)\n\nWouldn't it be cool if you could have a bit of the spirit of NoSQL available in Eloquent? This package does just that. It provides a trait that when applied on a model, allows you to store arbitrary values in a single JSON column.\n\nHere are a few examples. We're using the `extra_attributes` column here, but you can name it [whatever you want](#adding-the-column-where-the-schemaless-attributes-will-be-stored).\n\n```php\n// add and retrieve an attribute\n$yourModel->extra_attributes->name = 'value';\n$yourModel->extra_attributes->name; // returns 'value'\n\n// you can also use the array approach\n$yourModel->extra_attributes['name'] = 'value';\n$yourModel->extra_attributes['name'] // returns 'value'\n\n// setting multiple values in one go\n$yourModel->extra_attributes = [\n   'rey' => ['side' => 'light'],\n   'snoke' => ['side' => 'dark']\n];\n\n// setting/updating multiple values in one go via set()\n$yourModel->extra_attributes->set([\n   'han' => ['side' => 'light'],\n   'snoke' => ['side' => 'dark']\n]);\n\n// retrieving values using dot notation\n$yourModel->extra_attributes->get('rey.side'); // returns 'light'\n\n// retrieve default value when attribute is not exists\n$yourModel->extra_attributes->get('non_existing', 'default'); // returns 'default'\n\n// it has a scope to retrieve all models with the given schemaless attributes\n$yourModel->withSchemalessAttributes(['name' => 'value', 'name2' => 'value2'])->get();\n```\n\n## Requirements\n\nThis package requires a database with support for `json` columns like MySQL 5.7 or higher.\n\n## Installation\n\nYou can install the package via composer:\n\n```bash\ncomposer require spatie/laravel-schemaless-attributes\n```\n\nThe schemaless attributes will be stored in a json column on the table of your model. Let's add that column and prepare the model.\n\n### Adding the column where the schemaless attributes will be stored\n\nAdd a migration for all models where you want to add schemaless attributes to. You should use `schemalessAttributes` method on `Blueprint` to add a column. The argument you give to `schemalessAttributes` is the column name that will be added. You can use any name you'd like. You're also free to add as many schemaless attribute columns to your table as you want. In all examples of this readme we'll use a single column named `extra_attributes`.\n\n```php\nSchema::table('your_models', function (Blueprint $table) {\n    $table->schemalessAttributes('extra_attributes');\n});\n```\n\n### Preparing the model\n\nIn order to work with the schemaless attributes you'll need to add a cast, an accessor and a scope on your model. Here's an example of what you need to add if you've chosen `extra_attributes` as your column name.\n\n```php\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Spatie\\SchemalessAttributes\\SchemalessAttributes;\n\nclass TestModel extends Model\n{\n    // ...\n\n    public $casts = [\n        'extra_attributes' => 'array',\n    ];\n\n    public function getExtraAttributesAttribute(): SchemalessAttributes\n    {\n        return SchemalessAttributes::createForModel($this, 'extra_attributes');\n    }\n\n    public function scopeWithExtraAttributes(): Builder\n    {\n        return SchemalessAttributes::scopeWithSchemalessAttributes('extra_attributes');\n    }\n\n    // ...\n}\n```\n\nIf you want to reuse this behaviour across multiple models you could opt to put the function in a trait of your own. Here's what that trait could look like:\n\n```php\nnamespace App\\Models\\Concerns;\n\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Spatie\\SchemalessAttributes\\SchemalessAttributes;\n\ntrait HasSchemalessAttributes\n{\n    public function getExtraAttributesAttribute(): SchemalessAttributes\n    {\n       return SchemalessAttributes::createForModel($this, 'extra_attributes');\n    }\n\n    public function scopeWithExtraAttributes(): Builder\n    {\n        return SchemalessAttributes::scopeWithSchemalessAttributes('extra_attributes');\n    }\n}\n```\n\n## Usage\n\n### Getting and setting schemaless attributes\n\nThis is the easiest way to get and set schemaless attributes:\n\n```php\n$yourModel->extra_attributes->name = 'value';\n\n$yourModel->extra_attributes->name; // Returns 'value'\n```\n\nAlternatively you can use an array approach:\n\n```php\n$yourModel->extra_attributes['name'] = 'value';\n\n$yourModel->extra_attributes['name']; // Returns 'value'\n```\n\nYou can replace all existing schemaless attributes by assigning an array to it.\n\n```php\n// All existing schemaless attributes will be replaced\n$yourModel->extra_attributes = ['name' => 'value'];\n$yourModel->extra_attributes->all(); // Returns ['name' => 'value']\n```\n\nYou can also opt to use `get` and `set`. The methods have support for dot notation.\n\n```php\n$yourModel->extra_attributes = [\n   'rey' => ['side' => 'light'],\n   'snoke' => ['side' => 'dark'],\n];\n$yourModel->extra_attributes->set('rey.side', 'dark');\n\n$yourModel->extra_attributes->get('rey.side'); // Returns 'dark\n```\n\nYou can also pass a default value to the `get` method.\n\n```php\n$yourModel->extra_attributes->get('non_existing', 'default'); // Returns 'default'\n```\n\n### Persisting schemaless attributes\n\nTo persist schemaless attributes you should, just like you do for normal attributes, call `save()` on the model.\n\n```php\n$yourModel->save(); // Persists both normal and schemaless attributes\n```\n\n### Retrieving models with specific schemaless attributes\n\nHere's how you can use the provided scope.\n\n```php\n// Returns all models that have all the given schemaless attributes\n$yourModel->withExtraAttributes(['name' => 'value', 'name2' => 'value2'])->get();\n```\n\nIf you only want to search on a single custom attribute, you can use the scope like this\n\n```php\n// returns all models that have a schemaless attribute `name` set to `value`\n$yourModel->withExtraAttributes('name', 'value')->get();\n```\n\n## Testing\n\nFirst create a MySQL database named `laravel_schemaless_attributes`. After that you can run the tests with:\n\n``` bash\ncomposer test\n```\n\n## Changelog\n\nPlease see [CHANGELOG](CHANGELOG.md) for more information what has changed recently.\n\n## Contributing\n\nPlease see [CONTRIBUTING](CONTRIBUTING.md) for details.\n\n## Security\n\nIf you discover any security related issues, please email freek@spatie.be instead of using the issue tracker.\n\n## Postcardware\n\nYou're free to use this package, but if it makes it to your production environment we highly appreciate you sending us a postcard from your hometown, mentioning which of our package(s) you are using.\n\nOur address is: Spatie, Samberstraat 69D, 2060 Antwerp, Belgium.\n\nWe publish all received postcards [on our company website](https://spatie.be/en/opensource/postcards).\n\n## Credits\n\n- [Freek Van der Herten](https://github.com/freekmurze)\n- [All Contributors](../../contributors)\n\n## Support us\n\nSpatie is a webdesign agency based in Antwerp, Belgium. You'll find an overview of all our open source projects [on our website](https://spatie.be/opensource).\n\nDoes your business depend on our contributions? Reach out and support us on [Patreon](https://www.patreon.com/spatie).\nAll pledges will be dedicated to allocating workforce on maintenance and new awesome stuff.\n\n## License\n\nThe MIT License (MIT). Please see [License File](LICENSE.md) for more information.\n"