b'= Nitrite Database\n\nimage:https://travis-ci.org/dizitart/nitrite-database.svg?branch=master["Build Status", link="https://travis-ci.org/dizitart/nitrite-database"]\nimage:https://codecov.io/gh/dizitart/nitrite-database/branch/master/graph/badge.svg["Coverage Status", link="https://codecov.io/gh/dizitart/nitrite-database"]\nimage:https://javadoc.io/badge/org.dizitart/nitrite.svg["Javadocs", link=https://javadoc.io/doc/org.dizitart/nitrite]\nimage:https://badges.gitter.im/dizitart/nitrite-database.svg["Gitter", link="https://gitter.im/dizitart/nitrite-database?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=body_badge"]\nimage:https://opencollective.com/nitrite-database/backers/badge.svg["Backers on Open Collective", link="#backers"]\nimage:https://opencollective.com/nitrite-database/sponsors/badge.svg["Backers on Open Collective", link="#sponsors"]\n\nimage:http://www.dizitart.org/nitrite-database/logo/nitrite-logo.svg[Logo 200, 200]\n\n**NO**sql **O**bject (*NO~2~* a.k.a Nitrite) database is an open source nosql embedded\ndocument store written in Java. It has MongoDB like API. It supports both\nin-memory and single file based persistent store powered by\nhttp://www.h2database.com/html/mvstore.html[MVStore] engine of h2 database.\n\nNitrite is a server-less embedded database ideal for desktop, mobile or small web applications.\n\n**It features**:\n\n* Embedded key-value/document and object store\n* In-memory off-heap store\n* Single file store\n* Very fast and lightweight MongoDB like API\n* Indexing\n* Full text search capability\n* Full Android compatibility (API Level 19)\n* Observable store\n* Both way replication via Nitrite DataGate server\n\n== Kotlin Extension\n\nNitrite has a kotlin extension called **Potassium Nitrite** for kotlin developers.\nVisit https://github.com/dizitart/nitrite-database/tree/master/potassium-nitrite[here] for more details.\n\n== Data Explorer\n\nTo view the data of a nitrite database file, use **Nitrite Explorer**. More details\ncan be found https://github.com/dizitart/nitrite-database/tree/master/nitrite-explorer[here].\n\n== Data Replication\n\nTo replicate data over different devices automatically, use **Nitrite DataGate** server. For more details\nvisit https://github.com/dizitart/nitrite-database/tree/master/nitrite-datagate[here].\n\n== Getting Started with Nitrite\n\n=== How To Install\n\nTo use Nitrite in any Java application, just add the below dependency:\n\n*Maven*\n\n[source,xml,subs="verbatim,attributes"]\n----\n<dependency>\n    <groupId>org.dizitart</groupId>\n    <artifactId>nitrite</artifactId>\n    <version>{version}</version>\n</dependency>\n----\n\n*Gradle*\n\n[source,groovy,subs="verbatim,attributes"]\n----\ncompile \'org.dizitart:nitrite:{version}\'\n----\n\n<<<\n\n=== Quick Examples\n\n*Initialize Database*\n[source,java]\n--\n//java initialization\nNitrite db = Nitrite.builder()\n        .compressed()\n        .filePath("/tmp/test.db")\n        .openOrCreate("user", "password");\n\n//android initialization\nNitrite db = Nitrite.builder()\n        .compressed()\n        .filePath(getFilesDir().getPath() + "/test.db")\n        .openOrCreate("user", "password");\n--\n\n*Create a Collection*\n[source,java]\n--\n// Create a Nitrite Collection\nNitriteCollection collection = db.getCollection("test");\n\n// Create an Object Repository\nObjectRepository<Employee> repository = db.getRepository(Employee.class);\n\n--\n\n*Annotations for POJO*\n[source,java]\n--\n// provides index information for ObjectRepository\n@Indices({\n        @Index(value = "joinDate", type = IndexType.NonUnique),\n        @Index(value = "name", type = IndexType.Unique)\n})\npublic class Employee implements Serializable {\n    // provides id field to uniquely identify an object inside an ObjectRepository\n    @Id\n    private long empId;\n\n    private Date joinDate;\n\n    private String name;\n\n    private String address;\n\n    // ... public getters and setters\n}\n\n--\n\n\n*CRUD Operations*\n[source,java]\n--\n// create a document to populate data\nDocument doc = createDocument("firstName", "John")\n     .put("lastName", "Doe")\n     .put("birthDay", new Date())\n     .put("data", new byte[] {1, 2, 3})\n     .put("fruits", new ArrayList<String>() {{ add("apple"); add("orange"); add("banana"); }})\n     .put("note", "a quick brown fox jump over the lazy dog");\n\n// insert the document\ncollection.insert(doc);\n\n// update the document\ncollection.update(eq("firstName", "John"), createDocument("lastName", "Wick"));\n\n// remove the document\ncollection.remove(doc);\n--\n\n[source,java]\n--\n// insert an object\nEmployee emp = new Employee();\nemp.setEmpId(124589);\nemp.setFirstName("John");\nemp.setLastName("Doe");\n\nrepository.insert(emp);\n\n--\n\n*Create Indices*\n[source,java]\n--\n// create document index\ncollection.createIndex("firstName", indexOptions(IndexType.NonUnique));\ncollection.createIndex("note", indexOptions(IndexType.Fulltext));\n\n// create object index. It can also be provided via annotation\nrepository.createIndex("firstName", indexOptions(IndexType.NonUnique));\n--\n\n*Query a Collection*\n[source,java]\n--\nCursor cursor = collection.find(\n                        // and clause\n                        and(\n                            // firstName == John\n                            eq("firstName", "John"),\n                            // elements of data array is less than 4\n                            elemMatch("data", lt("$", 4)),\n                            // elements of fruits list has one element matching orange\n                            elemMatch("fruits", regex("$", "orange")),\n                            // note field contains string \'quick\' using full-text index\n                            text("note", "quick")\n                            )\n                        );\n\nfor (Document document : cursor) {\n    // process the document\n}\n\n// create document by id\nDocument document = collection.getById(nitriteId);\n\n// query an object repository and create the first result\nEmployee emp = repository.find(eq("firstName", "John"))\n                         .firstOrDefault();\n--\n\n*Automatic Replication*\n[source,java]\n--\n// connect to a DataGate server running at localhost 9090 port\nDataGateClient dataGateClient = new DataGateClient("http://localhost:9090")\n        .withAuth("userId", "password");\nDataGateSyncTemplate syncTemplate\n        = new DataGateSyncTemplate(dataGateClient, "remote-collection@userId");\n\n// create sync handle\nSyncHandle syncHandle = Replicator.of(db)\n        .forLocal(collection)\n        // a DataGate sync template implementation\n        .withSyncTemplate(syncTemplate)\n        // replication attempt delay of 1 sec\n        .delay(timeSpan(1, TimeUnit.SECONDS))\n        // both-way replication\n        .ofType(ReplicationType.BOTH_WAY)\n        // sync event listener\n        .withListener(new SyncEventListener() {\n            @Override\n            public void onSyncEvent(SyncEventData eventInfo) {\n\n            }\n        })\n        .configure();\n\n// start sync in the background using handle\nsyncHandle.startSync();\n--\n\n*Import/Export Data*\n[source,java]\n--\n// Export data to a file\nExporter exporter = Exporter.of(db);\nexporter.exportTo(schemaFile);\n\n//Import data from the file\nImporter importer = Importer.of(db);\nimporter.importFrom(schemaFile);\n--\n\nMore details are available in the reference document.\n\n== Release Notes\n\nRelease notes are available https://github.com/dizitart/nitrite-database/releases[here].\n\n== Documentation\n\n|===\n|Reference |API\n\n|http://www.dizitart.org/nitrite-database[Document]\n|https://javadoc.io/doc/org.dizitart/nitrite[JavaDoc]\n|===\n\n\n== Build\n\nTo build and test Nitrite\n\n[source,bash]\n--\n$ git clone https://github.com/dizitart/nitrite-database.git\n$ cd nitrite-database\n$ ./gradlew build\n--\n\nThe test suite requires mongod to be running on localhost, listening on the default port. MongoDb is required\nto test replication using the DataGate server. Please run the below command to create the test user in mongo.\n\n[source,javascript]\n--\ndb.getSiblingDB(\'benchmark\').createUser({user: \'bench\', pwd: \'bench\', roles: [{role: \'readWrite\', db: \'benchmark\'}, {role: \'dbAdmin\', db: \'benchmark\'}]})\n--\n\nThe test suite also requires android sdk 26 to be installed and ANDROID_HOME environment variable to be setup\nproperly to test the android example.\n\n== Support / Feedback\n\nFor issues with, questions about, or feedback talk to us at https://gitter.im/dizitart/nitrite-database[Gitter].\n\n== Bugs / Feature Requests\n\nThink you\xe2\x80\x99ve found a bug? Want to see a new feature in the Nitrite? Please open an issue https://github.com/dizitart/nitrite-database/issues[here]. But\nbefore you file an issue please check if it is already existing or not.\n\n== Maintainers\n\n* Anindya Chatterjee\n\n== Contributors\n\nThis project exists thanks to all the people who contribute. https://github.com/dizitart/nitrite-database/blob/master/CONTRIBUTING.md[Contribute].\nimage:https://opencollective.com/nitrite-database/contributors.svg?width=890["Contributors", link="https://github.com/dizitart/nitrite-database/graphs/contributors"]\n\n== Backers\n\nThank you to all our backers! \xf0\x9f\x99\x8f https://opencollective.com/nitrite-database#backer[Become a backer]\n\nimage:https://opencollective.com/nitrite-database/backers.svg?width=890["Backers", link="https://opencollective.com/nitrite-database#backers"]\n\n== Sponsors\n\nSupport this project by becoming a sponsor. Your logo will show up here with a link to your website. https://opencollective.com/nitrite-database#sponsor[Become a sponsor]\n\nimage:https://opencollective.com/nitrite-database/sponsor/0/avatar.svg["Sponsor", link="https://opencollective.com/nitrite-database/sponsor/0/website"]\nimage:https://opencollective.com/nitrite-database/sponsor/1/avatar.svg["Sponsor", link="https://opencollective.com/nitrite-database/sponsor/1/website"]\nimage:https://opencollective.com/nitrite-database/sponsor/2/avatar.svg["Sponsor", link="https://opencollective.com/nitrite-database/sponsor/2/website"]\nimage:https://opencollective.com/nitrite-database/sponsor/3/avatar.svg["Sponsor", link="https://opencollective.com/nitrite-database/sponsor/3/website"]\nimage:https://opencollective.com/nitrite-database/sponsor/4/avatar.svg["Sponsor", link="https://opencollective.com/nitrite-database/sponsor/4/website"]\n\n== Presentation & Talks\n\nhttps://github.com/sheinbergon[Idan Sheinberg] has given a talk on Nitrite at https://www.meetup.com/KotlinTLV/events/265145254/[**Kotlin Everywhere - TLV Edition**] meetup on October 27, 2019. Please find his presentation https://www.slideshare.net/IdanShinberg/nitrite-choosing-the-rite-embedded-database[here].'