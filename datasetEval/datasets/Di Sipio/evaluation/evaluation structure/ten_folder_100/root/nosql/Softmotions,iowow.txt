b'IOWOW - The C11 persistent key/value database engine based on [skip list](https://en.wikipedia.org/wiki/Skip_list)\n==================================================================================================================\n\n[![Join ejdb2 telegram](https://img.shields.io/badge/join-ejdb2%20telegram-0088cc.svg)](https://t.me/ejdb2)\n[![Build Status](https://travis-ci.org/Softmotions/iowow.svg?branch=master)](https://travis-ci.org/Softmotions/iowow)\n[![license](https://img.shields.io/github/license/Softmotions/ejdb.svg)](https://github.com/Softmotions/iowow/blob/master/LICENSE)\n![Maintained](https://img.shields.io/maintenance/yes/2019.svg)\n\nWebsite http://iowow.io\n\n# Key components\n\n* [iwkv.h](https://github.com/Softmotions/iowow/blob/master/src/kv/iwkv.h) Persistent key/value database engine\n* [iwfsmfile.h](https://github.com/Softmotions/iowow/blob/master/src/fs/iwfsmfile.h) File blocks allocation manager like `malloc()` on files\n\n# IWKV\n\n## Features\n\n* Support of multiple key-value databases within a single file\n* Online database backups\n* Native support of integer keys\n* [Write Ahead Logging (WAL) support](http://iowow.io/wal)\n* Ultra-fast traversal of database records\n* Compound keys support\n* Good performance comparing its main competitors: `lmdb`, `leveldb`, `kyoto cabinet`\n* Tiny C11 library (200Kb) can be easily embedded into any software\n\n## Used by\n\n* EJDB - Embeddable JSON database engine. http://ejdb.org\n\n## Limitations\n\n* Maximum iwkv storage file size: `512 GB (0x7fffffff80)`\n* Total size of a single key+value record must be not greater than `255Mb (0xfffffff)`\n* In-memory cache for every opened database takes `~130Kb`, cache can be disposed by `iwkv_db_cache_release()`\n\n# Supported platforms\n\n## Linux\n### Ubuntu/Debian\n#### PPA repository\n\n```sh\nsudo add-apt-repository ppa:adamansky/iwowow\nsudo apt-get update\nsudo apt-get install iowow\n```\n\n#### Building debian packages\n\n```sh\nmkdir build && cd build\ncmake .. -DCMAKE_BUILD_TYPE=Release -DPACKAGE_DEB=ON\nmake package\n```\n\n### RPM based Linux distributions\n```sh\nmkdir build && cd build\ncmake .. -DCMAKE_BUILD_TYPE=Release -DPACKAGE_RPM=ON\nmake package\n```\n\n## FreeBSD\n\nSuccessfully tested on FreeBSD 10/11\n\n## OSX\n\nSuccessfully tested on OSX 10.12/10.13\n\n## Windows\n\n[Cross-compilation for windows](http://iowow.io/iw/win)\n\n\n## MIPS based systems (+big-endian)\n\nSuccessfully tested on Debian 9.4, MIPS 32, gcc 6.x compiler.\n\n# Example\n\n```c\n#include <iowow/iwkv.h>\n#include <string.h>\n#include <stdlib.h>\n\nint main() {\n  IWKV_OPTS opts = {\n    .path = "example1.db",\n    .oflags = IWKV_TRUNC // Cleanup database before open\n  };\n  IWKV iwkv;\n  IWDB mydb;\n  iwrc rc = iwkv_open(&opts, &iwkv);\n  if (rc) {\n    iwlog_ecode_error3(rc);\n    return 1;\n  }\n  // Now open mydb\n  // - Database id: 1\n  rc = iwkv_db(iwkv, 1, 0, &mydb);\n  if (rc) {\n    iwlog_ecode_error2(rc, "Failed to open mydb");\n    return 1;\n  }\n  // Work with db: put/get value\n  IWKV_val key, val;\n  key.data = "foo";\n  key.size = strlen(key.data);\n  val.data = "bar";\n  val.size = strlen(val.data);\n\n  fprintf(stdout, "put: %.*s => %.*s\\n",\n          (int) key.size, (char *) key.data,\n          (int) val.size, (char *) val.data);\n\n  rc = iwkv_put(mydb, &key, &val, 0);\n  if (rc) {\n    iwlog_ecode_error3(rc);\n    return rc;\n  }\n  // Retrieve value associated with `foo` key\n  val.data = 0;\n  val.size = 0;\n  rc = iwkv_get(mydb, &key, &val);\n  if (rc) {\n    iwlog_ecode_error3(rc);\n    return rc;\n  }\n\n  fprintf(stdout, "get: %.*s => %.*s\\n",\n          (int) key.size, (char *) key.data,\n          (int) val.size, (char *) val.data);\n\n  iwkv_val_dispose(&val);\n  iwkv_close(&iwkv);\n  return 0;\n}\n```\n**Compile and run:**\n\n```sh\ngcc -std=gnu11 -Wall -pedantic -c -o example1.o example1.c\ngcc -o example1 example1.o -liowow\n\n./example1\n  put: foo => bar\n  get: foo => bar\n```\n\n\n\n'