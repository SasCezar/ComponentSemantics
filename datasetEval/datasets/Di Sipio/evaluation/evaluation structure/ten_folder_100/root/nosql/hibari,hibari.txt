b'## Welcome to Hibari\n\n### A Distributed, Consistent, Ordered Key-Value Store\n\nHibari is a distributed, ordered key-value store with strong\nconsistency guarantee. Hibari is written in Erlang and designed for\nbeing:\n\n- **Fast, Read Optimized:** Hibari serves read and write requests in\n  short and predictable latency. Hibari has excellent performance\n  especially for read and large value operations\n\n- **High Bandwidth:** Batch and lock-less operations help to achieve\n  high throughput while ensuring data consistency and durability\n\n- **Big Data:** Can store Peta Bytes of data by automatically\n  distributing data across servers. The largest production Hibari\n  cluster spans across 100 of servers\n\n- **Reliable:** High fault tolerance by replicating data between\n  servers. Data is repaired automatically after a server failure\n\nHibari is able to deliver scalable high performance that is\ncompetitive with leading open source NOSQL (Not Only SQL) storage\nsystems, while also providing the data durability and strong\nconsistency that many systems lack. Hibari\'s performance relative to\nother NOSQL systems is particularly strong for reads and for large\nvalue (> 200KB) operations.\n\nAs one example of real-world performance, in a multi-million user\nwebmail deployment equipped with traditional HDDs (non SSDs), Hibari\nis processing about 2,200 transactions per second, with read latencies\naveraging between 1 and 20 milliseconds and write latencies averaging\nbetween 20 and 80 milliseconds.\n\n\n### Distinct Features\n\nUnlike many other distributed databases, Hibari uses "*chain\nreplication methodology*" and delivers distinct features.\n\n- **Ordered Key-Values:** Data is distributed across "chains" by key\n  prefixes, then keys within a chain are sorted by lexicographic order\n\n- **Always Guarantees Strong Consistency**: This simplifies creation\n  of robust client applications\n\n  * **Compare and Swap (CAS):** key timestamping mechanism that\n    facilitates "test-and-set" type operations\n  * **Micro-Transaction:** multi-key atomic transactions, within\n    range limits\n\n- **Custom Metadata**: per-key custom metadata\n- **TTL (Time To Live)**: per-key expiration times\n\n\n## Travis CI Status\n\nhttp://travis-ci.org/hibari/hibari-ci-wrapper\n\nBranch                            | Erlang/OTP Versions  | Status                              | Remarks\n--------------------------------- | -------------------- | ----------------------------------- | ------------\nmaster                            | 17.5, R16B03-1       | ![master](https://travis-ci.org/hibari/hibari-ci-wrapper.svg?branch=master) |\ndev                               | 18.1, 17.5, R16B03-1 | ![dev](https://travis-ci.org/hibari/hibari-ci-wrapper.svg?branch=dev) |\nhibari-gh54-thrift-api            | 18.1, 17.5, R16B03-1 | ![hibari-gh54-thrift-api](https://travis-ci.org/hibari/hibari-ci-wrapper.svg?branch=hibari-gh54-thrift-api)|\ngbrick-gh17-redesign-disk-storage | 18.1, 17.5           | ![gbrick-gh17-redesign-disk-storage](https://travis-ci.org/hibari/hibari-ci-wrapper.svg?branch=gbrick-gh17-redesign-disk-storage) | no tests, compile only\n\n\n## News\n\n- Apr 5, 2015 - **Hibari v0.1.11 Released**. [Release Notes](https://github.com/hibari/hibari/blob/master/relnotes/v0.1.11.txt)\n  * Update for Erlang/OTP 17 and R16. (Note: Erlang/OTP releases prior\n    to R16 are no longer supported)\n  * Update external libraries such as UBF to the latest versions\n  * Enhanced client API: server side rename and server side timestamp\n  * New logging format. Introduce Basho Lager for more traditional\n    logging that plays nicely with Unix logging tools like logrotate and\n    syslog\n\n- Feb 4, 2013 - **Hibari v0.1.10 Released**. [Release Notes](https://github.com/hibari/hibari/blob/master/relnotes/v0.1.10.txt)\n  * A bug fix in Python EBF Client\n  * Update for Erlang/OTP R15\n  * Support for building on Ubuntu, including ARMv7 architecture\n  * Remove S3 and JSON-RPC components from Hibari distribution. They\n    will become separate projects\n\n- [**Older News**](https://github.com/hibari/hibari/wiki/Hot-News)\n\n\n## Quick Start\n\nPlease read **Getting Started** section of Hibari Application\nDeveloper Guide.\n\n- [English Version](http://hibari.github.com/hibari-doc/hibari-app-developer-guide.en.html#getting-started)\n- [Japanese Version](http://hibari.github.com/hibari-doc/hibari-app-developer-guide.ja.html#getting-started)\n\n\n## Hibari Documentation\n\n- [English Version](http://hibari.github.com/hibari-doc/)\n- [Japanese Version](http://hibari.github.com/hibari-doc/)\n\nThey are a bit **outdated** -- sorry, but documentation rework is\nplanned for Hibari v0.6.\n\n\n## Mailing Lists\n\n- [Google Group **hibaridb-users** for English Speakers](http://groups.google.com/forum/#!forum/hibaridb-users)\n- [Google Group **hibaridb-users-ja** for Japanese Speakers](http://groups.google.com/forum/#!forum/hibaridb-users-ja)\n\n\n## Hibari Clients\n\nAs of Hibari v0.1 (since year 2010), only the native Erlang client is\nused in production. All other client APIs (Thrift, JSON-RPC, UBF, and\nS3) are still in proof of concept stage and only implement basic\noperations.\n\nIf you need a client library for other programming language, please\nfeel free to post a request at the\n[Hibari mailing list](http://groups.google.com/forum/#!forum/hibaridb-users).\n\n\n## Supported Platforms\n\nHibari is written in pure Erlang/OTP and runs on many Unix/Linux\nplatforms.\n\nPlease see\nthe [**Supported Platforms**](https://github.com/hibari/hibari/wiki/Supported-Platforms)\npage in Hibari Wiki for details.\n\n\n## Roadmap\n\nPlease see\nthe [**Roadmap**](https://github.com/hibari/hibari/wiki/Roadmap) page\nin Hibari Wiki for the planned features for Hibari v0.3, v0.5, and v0.6.\n\n\n## Hibari\'s Origins\n\nHibari was originally written by Cloudian, Inc., formerly Gemini\nMobile Technologies, to support mobile messaging and email services.\nHibari was open-sourced under the Apache Public License version 2.0 in\nJuly 2010.\n\nHibari has been deployed by multiple telecom carriers in Asia and\nEurope. Hibari may lack some features such as monitoring, event and\nalarm management, and other "production environment" support services.\nSince telecom operator has its own data center support infrastructure,\nHibari\'s development has not included many services that would be\nredundant in a carrier environment.\n\nWe hope that Hibari\'s release to the open source community will close\nthose functional gaps as Hibari spreads outside of carrier data\ncenters.\n\n\n### What does Hibari mean?\n\nThe word "Hibari" means skylark in Japanese; the Kanji characters\nstand for **"cloud bird"**.\n\n\n## License\n\n```\nCopyright (c) 2005-2017 Hibari developers.  All rights reserved.\n\nLicensed under the Apache License, Version 2.0 (the "License");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an "AS IS" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n\n### Note for License\n\nHibari has decided to display "Hibari developers" as the copyright\nholder name in the source code files and manuals. Actual copyright\nholder names (contributors) will be listed in the AUTHORS file.\n\n\n_EOF_\n'