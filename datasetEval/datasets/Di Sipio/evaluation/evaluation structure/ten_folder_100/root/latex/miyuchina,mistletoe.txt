b'<h1>mistletoe<img src=\'https://cdn.rawgit.com/miyuchina/mistletoe/master/resources/logo.svg\' align=\'right\' width=\'128\' height=\'128\'></h1>\n\n[![Build Status][build-badge]][travis]\n[![Coverage Status][cover-badge]][coveralls]\n[![PyPI][pypi-badge]][pypi]\n[![is wheel][wheel-badge]][pypi]\n\nmistletoe is a Markdown parser in pure Python,\ndesigned to be fast, spec-compliant and fully customizable.\n\nApart from being the fastest\nCommonMark-compliant Markdown parser implementation in pure Python,\nmistletoe also supports easy definitions of custom tokens.\nParsing Markdown into an abstract syntax tree\nalso allows us to swap out renderers for different output formats,\nwithout touching any of the core components.\n\nRemember to spell mistletoe in lowercase!\n\nFeatures\n--------\n* **Fast**:\n  mistletoe is the fastest implementation of CommonMark in Python,\n  that is, 2 to 3 times as fast as [Commonmark-py][commonmark-py],\n  and still roughly 30% faster than [Python-Markdown][python-markdown].\n  Running with PyPy yields comparable performance with [mistune][mistune].\n  \n  See the [performance](#performance) section for details.\n\n* **Spec-compliant**:\n  CommonMark is [a useful, high-quality project][oilshell].\n  mistletoe follows the [CommonMark specification][commonmark]\n  to resolve ambiguities during parsing.\n  Outputs are predictable and well-defined.\n\n* **Extensible**:\n  Strikethrough and tables are supported natively,\n  and custom block-level and span-level tokens can easily be added.\n  Writing a new renderer for mistletoe is a relatively\n  trivial task.\n  \n  You can even write [a Lisp][scheme] in it.\n  \nSome alternative output formats:\n\n* HTML\n* LaTeX\n* Jira Markdown ([contrib][contrib])\n* Mathjax ([contrib][contrib])\n* Scheme ([contrib][contrib])\n* HTML + code highlighting ([contrib][contrib])\n\nInstallation\n------------\nmistletoe is tested for Python 3.3 and above. Install mistletoe with pip:\n\n```sh\npip3 install mistletoe\n```\n\nAlternatively, clone the repo:\n\n```sh\ngit clone https://github.com/miyuchina/mistletoe.git\ncd mistletoe\npip3 install -e .\n```\n\nSee the [contributing][contributing] doc for how to contribute to mistletoe.\n\nUsage\n-----\n\n### Basic usage\n\nHere\'s how you can use mistletoe in a Python script:\n\n```python\nimport mistletoe\n\nwith open(\'foo.md\', \'r\') as fin:\n    rendered = mistletoe.markdown(fin)\n```\n\n`mistletoe.markdown()` uses mistletoe\'s default settings: allowing HTML mixins\nand rendering to HTML. The function also accepts an additional argument\n`renderer`. To produce LaTeX output:\n\n```python\nimport mistletoe\nfrom mistletoe.latex_renderer import LaTeXRenderer\n\nwith open(\'foo.md\', \'r\') as fin:\n    rendered = mistletoe.markdown(fin, LaTeXRenderer)\n```\n\nFinally, here\'s how you would manually specify extra tokens and a renderer\nfor mistletoe. In the following example, we use `HTMLRenderer` to render\nthe AST, which adds `HTMLBlock` and `HTMLSpan` to the normal parsing\nprocess.\n\n```python\nfrom mistletoe import Document, HTMLRenderer\n\nwith open(\'foo.md\', \'r\') as fin:\n    with HTMLRenderer() as renderer:\n        rendered = renderer.render(Document(fin))\n```\n\n### From the command-line\n\npip installation enables mistletoe\'s command-line utility. Type the following\ndirectly into your shell:\n\n```sh\nmistletoe foo.md\n```\n\nThis will transpile `foo.md` into HTML, and dump the output to stdout. To save\nthe HTML, direct the output into a file:\n\n```sh\nmistletoe foo.md > out.html\n```\n\nYou can pass in custom renderers by including the full path to your renderer\nclass after a `-r` or `--renderer` flag:\n\n```sh\nmistletoe foo.md --renderer custom_renderer.CustomRenderer\n```\n\nRunning `mistletoe` without specifying a file will land you in interactive\nmode.  Like Python\'s REPL, interactive mode allows you to test how your\nMarkdown will be interpreted by mistletoe:\n\n```html\nmistletoe [version 0.7.2] (interactive)\nType Ctrl-D to complete input, or Ctrl-C to exit.\n>>> some **bold** text\n... and some *italics*\n...\n<p>some <strong>bold</strong> text\nand some <em>italics</em></p>\n>>>\n```\n\nThe interactive mode also accepts the `--renderer` flag:\n\n```latex\nmistletoe [version 0.7.2] (interactive)\nType Ctrl-D to complete input, or Ctrl-C to exit.\nUsing renderer: LaTeXRenderer\n>>> some **bold** text\n... and some *italics*\n...\n\\documentclass{article}\n\\begin{document}\n\nsome \\textbf{bold} text\nand some \\textit{italics}\n\\end{document}\n>>>\n```\n\nPerformance\n-----------\n\nmistletoe is the fastest CommonMark compliant implementation in Python.\nTry the benchmarks yourself by running:\n\n```sh\n$ python3 test/benchmark.py  # all results in seconds\nTest document: test/samples/syntax.md\nTest iterations: 1000\nRunning tests with markdown, mistune, commonmark, mistletoe...\n==============================================================\nmarkdown: 33.28557115700096\nmistune: 8.533771439999327\ncommonmark: 84.54588776299897\nmistletoe: 23.5405140980001\n```\n\nWe notice that Mistune is the fastest Markdown parser,\nand by a good margin, which demands some explanation.\nmistletoe\'s biggest performance penalty\ncomes from stringently following the CommonMark spec,\nwhich outlines a highly context-sensitive grammar for Markdown.\nMistune takes a simpler approach to the lexing and parsing process,\nbut this means that it cannot handle more complex cases,\ne.g., precedence of different types of tokens, escaping rules, etc.\n\nTo see why this might be important to you,\nconsider the following Markdown input\n([example 392][example-392] from the CommonMark spec):\n\n```markdown\n***foo** bar*\n```\n\nThe natural interpretation is:\n\n```html\n<p><em><strong>foo</strong> bar</em></p>\n```\n\n... and it is indeed the output of Python-Markdown, Commonmark-py and mistletoe.\nMistune (version 0.8.3) greedily parses the first two asterisks\nin the first delimiter run as a strong-emphasis opener,\nthe second delimiter run as its closer,\nbut does not know what to do with the remaining asterisk in between:\n\n```html\n<p><strong>*foo</strong> bar*</p>\n```\n\nThe implication of this runs deeper,\nand it is not simply a matter of dogmatically following an external spec.\nBy adopting a more flexible parsing algorithm,\nmistletoe allows us to specify a precedence level to each token class,\nincluding custom ones that you might write in the future.\nCode spans, for example, has a higher precedence level than emphasis,\nso\n\n```markdown\n*foo `bar* baz`\n```\n\n... is parsed as:\n\n```html\n<p>*foo <code>bar* baz</code></p>\n```\n\n... whereas Mistune parses this as:\n\n```html\n<p><em>foo `bar</em> baz`</p>\n```\n\nOf course, it is not *impossible* for Mistune to modify its behavior,\nand parse these two examples correctly,\nthrough more sophisticated regexes or some other means.\nIt is nevertheless *highly likely* that,\nwhen Mistune implements all the necessary context checks,\nit will suffer from the same performance penalties.\n\nContextual analysis is why Python-Markdown is slow, and why CommonMark-py is slower.\nThe lack thereof is the reason mistune enjoys stellar performance\namong similar parser implementations,\nas well as the limitations that come with these performance benefits.\n\nIf you want an implementation that focuses on raw speed,\nmistune remains a solid choice.\nIf you need a spec-compliant and readily extensible implementation, however,\nmistletoe is still marginally faster than Python-Markdown,\nwhile supporting more functionality (lists in block quotes, for example),\nand significantly faster than CommonMark-py.\n\n\nOne last note: another bottleneck of mistletoe compared to mistune\nis the function overhead. Because, unlike mistune, mistletoe chooses to split\nfunctionality into modules, function lookups can take significantly longer than\nmistune. To boost the performance further, it is suggested to use PyPy with mistletoe.\nBenchmark results show that on PyPy, mistletoe\'s performance is on par with mistune:\n\n```sh\n$ pypy3 test/benchmark.py mistune mistletoe\nTest document: test/samples/syntax.md\nTest iterations: 1000\nRunning tests with mistune, mistletoe...\n========================================\nmistune: 13.645681533998868\nmistletoe: 15.088351159000013\n```\n\nDeveloper\'s Guide\n-----------------\nHere\'s an example to add GitHub-style wiki links to the parsing process,\nand provide a renderer for this new token.\n\n### A new token\n\nGitHub wiki links are span-level tokens, meaning that they reside inline,\nand don\'t really look like chunky paragraphs. To write a new span-level\ntoken, all we need to do is make a subclass of `SpanToken`:\n\n```python\nfrom mistletoe.span_token import SpanToken\n\nclass GithubWiki(SpanToken):\n    pass\n```\n\nmistletoe uses regular expressions to search for span-level tokens in the\nparsing process. As a refresher, GitHub wiki looks something like this:\n`[[alternative text | target]]`. We define a class variable, `pattern`,\nthat stores the compiled regex:\n\n```python\nclass GithubWiki(SpanToken):\n    pattern = re.compile(r"\\[\\[ *(.+?) *\\| *(.+?) *\\]\\]")\n    def __init__(self, match):\n        pass\n```\n\nThe regex will be picked up by `SpanToken.find`, which is used by the\ntokenizer to find all tokens of its kind in the document.\nIf regexes are too limited for your use case, consider overriding\nthe `find` method; it should return a list of all token occurrences.\n\nThree other class variables are available for our custom token class,\nand their default values are shown below:\n\n```python\nclass SpanToken:\n    parse_group = 1\n    parse_inner = True\n    precedence = 5\n```\n\nNote that alternative text can also contain other span-level tokens. For\nexample, `[[*alt*|link]]` is a GitHub link with an `Emphasis` token as its\nchild. To parse child tokens, `parse_inner` should be set to `True`\n(the default value in this case), and `parse_group` should correspond\nto the match group in which child tokens might occur\n(also the default value, 1, in this case).\n\nOnce these two class variables are set correctly,\n`GitHubWiki.children` attribute will automatically be set to\nthe list of child tokens.\nNote that there is no need to manually set this attribute,\nunlike previous versions of mistletoe.\n\nLastly, the `SpanToken` constructors take a regex match object as its argument.\nWe can simply store off the `target` attribute from `match_obj.group(2)`.\n\n```python\nfrom mistletoe.span_token import SpanToken\n\nclass GithubWiki(SpanToken):\n    pattern = re.compile(r"\\[\\[ *(.+?) *\\| *(.+?) *\\]\\]")\n    def __init__(self, match_obj):\n        self.target = match_obj.group(2)\n```\n\nThere you go: a new token in 5 lines of code.\n\n### Side note about precedence\n\nNormally there is no need to override the `precedence` value of a custom token.\nThe default value is the same as `InlineCode`, `AutoLink` and `HTMLSpan`,\nwhich means that whichever token comes first will be parsed. In our case:\n\n```markdown\n`code with [[ text` | link ]]\n```\n\n... will be parsed as:\n\n```html\n<code>code with [[ text</code> | link ]]\n```\n\nIf we set `GitHubWiki.precedence = 6`, we have:\n\n```html\n`code with <a href="link">text`</a>\n```\n\n### A new renderer\n\nAdding a custom token to the parsing process usually involves a lot\nof nasty implementation details. Fortunately, mistletoe takes care\nof most of them for you. Simply pass your custom token class to \n`super().__init__()` does the trick:\n\n```python\nfrom mistletoe.html_renderer import HTMLRenderer\n\nclass GithubWikiRenderer(HTMLRenderer):\n    def __init__(self):\n        super().__init__(GithubWiki)\n```\n\nWe then only need to tell mistletoe how to render our new token:\n\n```python\ndef render_github_wiki(self, token):\n    template = \'<a href="{target}">{inner}</a>\'\n    target = token.target\n    inner = self.render_inner(token)\n    return template.format(target=target, inner=inner)\n```\nCleaning up, we have our new renderer class:\n\n```python\nfrom mistletoe.html_renderer import HTMLRenderer, escape_url\n\nclass GithubWikiRenderer(HTMLRenderer):\n    def __init__(self):\n        super().__init__(GithubWiki)\n\n    def render_github_wiki(self, token):\n        template = \'<a href="{target}">{inner}</a>\'\n        target = escape_url(token.target)\n        inner = self.render_inner(token)\n        return template.format(target=target, inner=inner)\n```\n\n### Take it for a spin?\n\nIt is preferred that all mistletoe\'s renderers be used as context managers.\nThis is to ensure that your custom tokens are cleaned up properly, so that\nyou can parse other Markdown documents with different token types in the\nsame program.\n\n```python\nfrom mistletoe import Document\nfrom contrib.github_wiki import GithubWikiRenderer\n\nwith open(\'foo.md\', \'r\') as fin:\n    with GithubWikiRenderer() as renderer:\n        rendered = renderer.render(Document(fin))\n```\n\nFor more info, take a look at the `base_renderer` module in mistletoe.\nThe docstrings might give you a more granular idea of customizing mistletoe\nto your needs.\n\nWhy mistletoe?\n--------------\n\n"For fun," says David Beazley.\n\nCopyright & License\n-------------------\n* mistletoe\'s logo uses artwork by [Freepik][icon], under\n  [CC BY 3.0][cc-by].\n* mistletoe is released under [MIT][license].\n\n[build-badge]: https://img.shields.io/travis/miyuchina/mistletoe.svg?style=flat-square\n[cover-badge]: https://img.shields.io/coveralls/miyuchina/mistletoe.svg?style=flat-square\n[pypi-badge]: https://img.shields.io/pypi/v/mistletoe.svg?style=flat-square\n[wheel-badge]: https://img.shields.io/pypi/wheel/mistletoe.svg?style=flat-square\n[travis]: https://travis-ci.org/miyuchina/mistletoe\n[coveralls]: https://coveralls.io/github/miyuchina/mistletoe?branch=master\n[pypi]: https://pypi.python.org/pypi/mistletoe\n[mistune]: https://github.com/lepture/mistune\n[python-markdown]: https://github.com/waylan/Python-Markdown\n[python-markdown2]: https://github.com/trentm/python-markdown2\n[commonmark-py]: https://github.com/rtfd/CommonMark-py\n[oilshell]: https://www.oilshell.org/blog/2018/02/14.html\n[commonmark]: https://spec.commonmark.org/\n[contrib]: https://github.com/miyuchina/mistletoe/tree/master/contrib\n[scheme]: https://github.com/miyuchina/mistletoe/blob/dev/contrib/scheme.py\n[contributing]: CONTRIBUTING.md\n[example-392]: https://spec.commonmark.org/0.28/#example-392\n[icon]: https://www.freepik.com\n[cc-by]: https://creativecommons.org/licenses/by/3.0/us/\n[license]: LICENSE\n'