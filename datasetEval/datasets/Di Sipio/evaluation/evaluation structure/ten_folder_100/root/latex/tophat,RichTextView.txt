b'\n<div align="center">\n\n# RichTextView\n\n<img src="https://raw.githubusercontent.com/tophat/RichTextView/master/website/static/img/rtv-full-res.png" width="300px;"/>\n\n\n[![Cocoapods](https://img.shields.io/cocoapods/v/RichTextView.svg)](https://cocoapods.org/pods/RichTextView)\n[![Carthage compatible](https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat)](https://github.com/Carthage/Carthage)\n[![Builds](https://img.shields.io/circleci/project/github/tophat/RichTextView/master.svg)](https://circleci.com/gh/tophat/RichTextView)\n[![Greenkeeper badge](https://badges.greenkeeper.io/tophat/RichTextView.svg)](https://greenkeeper.io/)\n<br />\n[![All Contributors](https://img.shields.io/badge/all_contributors-8-orange.svg?style=flat)](#credits)\n[![Slack workspace](https://slackinvite.dev.tophat.com/badge.svg)](https://opensource.tophat.com/slack)\n[![License - Apache-2](https://img.shields.io/badge/license-Apache%202-blue.svg?maxAge=2592000)](https://www.apache.org/licenses/LICENSE-2.0/)\n[![Maturity badge - level 3](https://img.shields.io/badge/Maturity-Level%203%20--%20Stable-green.svg)](https://github.com/tophat/getting-started/blob/master/scorecard.md)\n[![Pull Reminders](https://pullreminders.com/badge.svg)](https://pullreminders.com?ref=badge)\n\niOS Text View (`UIView`) that Properly Displays LaTeX, HTML, Markdown, and YouTube/Vimeo Links\n\n</div>\n\n## Installation\n\n### Using Cocoapods\n\nSimply add the following to your Podfile:\n\n```\npod \'RichTextView\'\n```\n\nAnd run `pod install` in your repo.\n\n### Using Carthage\n\nSimply add the following to your Cartfile:\n\n```\ngithub "tophat/RichTextView"\n```\n\nAnd run `carthage update --platform iOS` in your repo.\n\n## Usage\n\nYou can instantiate a `RichTextView` by importing the project first:\n\n```\nimport RichTextView\n```\nTo init a `RichTextView`:\n\n```\nlet richTextView = RichTextView(\n    input: "Test",\n    latexParser: LatexParser(),\n    font: UIFont.systemFont(ofSize: UIFont.systemFontSize),\n    textColor: UIColor.black,\n    isSelectable: true,\n    isEditable: false,\n    latexTextBaselineOffset: 0,\n    interactiveTextColor: UIColor.blue,\n    textViewDelegate: nil,\n    frame: CGRect.zero,\n    completion: nil\n)\n```\n\nYou can also update an existing `RichTextView` as follows:\n\n```\nrichTextView.update(\n    input: "Test",\n    latexParser: LatexParser(),\n    font: UIFont.systemFont(ofSize: UIFont.systemFontSize),\n    textColor: UIColor.black,\n    latexTextBaselineOffset: 0,\n    interactiveTextColor: UIColor.blue,\n    completion: nil\n)\n```\n\nThe parameters are defined as follows:\n\n* `input` - The string you want to render\n* `latexParser` - You can pass your own class that conforms to `LatexParserProtocol` if you want to handle LaTeX parsing in a custom way. Currently we use the `iosMath` Pod to handle LaTeX parsing by default\n* `font` - The font of the text to render\n* `texColor` - The color of the text to render\n* `isSelectable` - A property that determines whether or not `RichTextView` is selectable\n* `isEditable` - A property that determines whether or not `RichTextView` is editable\n* `latexTextBaselineOffset` - The baseline offset of the attributed text attachment that represents any LaTeX text that needs to be rendered\n* `interactiveTextColor` - The text color of any interactive elements/custom links (see **Interactive element** in `Formatting the input`)\n* `textViewDelegate` - A `RichTextViewDelegate` - conforms to `UITextViewDelegate` and also has handling when interactive elements/custom links are tapped\n* `frame` - A `CGRect` that represents the frame of the `RichTextView`\n* `completion` - A completion block to handle any errors that might be returned. The input will still render even if there are errors, however it might look differently than expected.\n\n\n### Formatting the input\n\nIn order for the `RichTextView` to handle the various use cases it might encounter, the input string needs to be formatted as follows:\n\n* **LaTeX**: Put any text you want to render as LaTeX in between two `[math]` and `[/math]` tags. Example: `[math]x^n[/math]`\n* **Code**: Put any text you want to render as code in between two `[code]` and `[/code]` tags. Example: `[code]print(\'Hello World\')[/code]`\n* **HTML/Markdown**: No formatting necessary\n* **YouTube Videos**: Put the ID of the YouTube video in a YouTube tag as follows: `youtube[dQw4w9WgXcQ]`. The YouTube ID of any video can be found by looking at the URL of the video (Example: `https://www.youtube.com/watch?v=dQw4w9WgXcQ`) and taking the value right after the `v=` URL parameter. In this case the ID of the YouTube video is `dQw4w9WgXcQ`\n* **Vimeo Videos**: Put the ID of the Vimeo video in a Vimeo tag as follows: `vimeo[100708006]`. The Vimeo ID of any video can be found by looking at the URL of the video (Example: `https://vimeo.com/100708006`) and taking the value right after the first `/`. In this case the ID of the Vimeo video is `100708006`\n* **Interactive element**: If you want to add text that has custom handling when you tap it, put the text in between two `[interactive-element id=<id>]` and `[/interactive-element]` tags. By doing this, when a user taps this text it will call the `didTapCustomLink` function of `RichTextViewDelegate` with the ID of the text that represents the interactive element (`<id>`), so be sure to hook into `RichTextViewDelegate` to capture this.\n\n## Screenshots\n<img src="https://raw.githubusercontent.com/tophat/RichTextView/master/.github/assets/screenshot-1.png" width="400px;"/> <img src="https://raw.githubusercontent.com/tophat/RichTextView/master/.github/assets/screenshot-2.png" width="400px;"/>\n\nCheck out the sample project in the `Example` root folder to see the screenshots above in action!\n\n## Architecture\n![Architecture](https://raw.githubusercontent.com/tophat/RichTextView/master/.github/assets/RichTextView.png)\n\n## Contributing\nSimply clone the repo, run `pod install` and you should be good to go\n\nIf you want to visually devQA your changes you can navigate to the Example project (found in the root `Example` folder), run `pod install` and then build and run the app. This will show you some common usages of the `RichTextView`.\n\nThe example project points to the local copy of the `RichTextView` pod, so any changes made locally will be reflected in the sample project.\n\nHowever, you need to be on the legacy build system to see your changes reflected. There is a [known issue](https://github.com/CocoaPods/CocoaPods/issues/7966) with caching development Pods and XCode 10.\n\nFeel free to add additional input/output examples to the example project, especially if you add any new functionality.\n\nAlso, be sure to run the unit/UI tests locally as part of the devQA process.\n\n## Credits\n\nThanks goes to these wonderful people ([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n| [<img src="https://avatars2.githubusercontent.com/u/6837609?s=100"/><br /><sub><b>Ahmed Elkady</b></sub>](https://github.com/aelkady)<br />[\xf0\x9f\x92\xbb](https://github.com/tophat/RichTextView/commits?author=aelkady) \xf0\x9f\xa4\x94 [\xe2\x9a\xa0\xef\xb8\x8f](https://github.com/tophat/RichTextView/commits?author=aelkady) | [<img src="https://avatars0.githubusercontent.com/u/3929954?s=100"/><br /><sub><b>Orla Mitchell</b></sub>](https://github.com/OrlaM)<br />[\xf0\x9f\x92\xbb](https://github.com/tophat/RichTextView/commits?author=OrlaM) \xf0\x9f\xa4\x94 [\xf0\x9f\x91\x80](https://github.com/tophat/RichTextView/commits?author=OrlaM) | [<img src="https://avatars.githubusercontent.com/u/3534236?s=100" width="100px;"/><br /><sub><b>Jake Bolam</b></sub>](https://github.com/jakebolam)<br />[\xf0\x9f\x9a\x87](../.circleci/config.yml)[\xf0\x9f\x93\x96](https://github.com/tophat/RichTextView/commits?author=jakebolam) | [<img src="https://avatars1.githubusercontent.com/u/8632167?s=100"/><br /><sub><b>Sanchit Gera</b></sub>](https://github.com/sanchitgera)<br />[\xf0\x9f\x93\x96](https://github.com/tophat/RichTextView/commits?author=sanchitgera)\n| :---: | :---: | :---: | :---: |\n| [<img src="https://avatars2.githubusercontent.com/u/8105535?s=100" width="100px;"/><br /><sub><b>Monica Moore</b></sub>](https://github.com/monicamm95)<br />[\xf0\x9f\x8e\xa8](http://monicamoore.ca/) | [<img src="https://avatars1.githubusercontent.com/u/39271619?s=100" width="100px;"/><br /><sub><b>Brandon Baksh</b></sub>](https://github.com/brandonbaksh)<br />[\xf0\x9f\x93\x96](https://github.com/tophat/RichTextView/commits?author=brandonbaksh) | [<img src="https://avatars1.githubusercontent.com/u/445636?s=100" width="100px;"/><br /><sub><b>Siavash Bidgoly</b></sub>](https://github.com/syavash)<br />[\xf0\x9f\x9a\x87](../.circleci/config.yml) | [<img src="https://avatars1.githubusercontent.com/u/30090188?s=100" width="100px;"/><br /><sub><b>Stephen Truong</b></sub>](https://github.com/struong9)<br />[\xf0\x9f\x93\x96](https://github.com/tophat/RichTextView/commits?author=struong9)\n\nThanks to [Carol Skelly](https://github.com/iatek) for donating the Github organization and [Kevin Zhow](https://github.com/kevinzhow) for donating the Pod name!\n'