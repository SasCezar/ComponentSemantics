b'## About ##\n\n|            |                           |  \n| ---------- | ------------------------- |  \n| Title:     | MultiMarkdown        |  \n| Author:    | Fletcher T. Penney       |  \n| Date:      | 2018-09-01 |  \n| Copyright: | Copyright \xc2\xa9 2016 - 2018 Fletcher T. Penney.    |  \n| Version:   | 6.4.0      |  \n\nmaster branch: [![Build Status](https://travis-ci.org/fletcher/MultiMarkdown-6.svg?branch=master)](https://travis-ci.org/fletcher/MultiMarkdown-6)  \ndevelop branch: [![Build Status](https://travis-ci.org/fletcher/MultiMarkdown-6.svg?branch=develop)](https://travis-ci.org/fletcher/MultiMarkdown-6)\n\n## An Announcement! ##\n\nMultiMarkdown v6 is finally here!  If you want more information about\ntesting, see `DevelopmentNotes`.  \n\nIf you want to more know about the differences from v5, see the `QuickStart`\nguide.\n\n\n## Obtaining MultiMarkdown ##\n\nYou can download the latest installer for MacOS or Windows at Github:\n\n<https://github.com/fletcher/MultiMarkdown-6/releases>\n\nTo build from source, download from Github.  Then:\n\n\tmake release\n\t(OR)\n\tmake debug\n\n\tcd build\n\tmake\n\nYou can optionally test using the test suite:\n\n\tctest\n\n\n### Xcode\n\nIn order to use libMultiMarkdown in your Xcode project:\n\n1.\t`cd` into the root of your Xcode project folder (where the `.xcodeproj` file\n\tresides).\n\n2.\tAdd this project as a git submodule:\n\n\t\tgit submodule add https://github.com/fletcher/MultiMarkdown-6 MultiMarkdown-6\n\n3.\tCompile:\n\n\t\tcd MultiMarkdown-6\n\t\tmake xcode\n\n4.\tDrag the `build-xcode/MultiMarkdown.xcodeproj` file to the root of your\n\tXcode project as a subproject.\n\n5.\tSelect the `MultiMarkdown` subproject, select the `libMultiMarkdown` target,\n\tand in Build Phases > Copy Files select Products Directory from the\n\tDestination popup menu.\n\n6.\tSelect your root project, select your target, add `libMultiMarkdown` under\n\tTarget Depencies and `libMultiMarkdown.framework/libMultiMarkdown` and\n\t`libcurl.tdb` under Link Binary with Libraries.\n\nWarning: if you move the project on disk or update the MultiMarkdown source\nfiles, you need to rerun step 3 above.\n\nYou can now `#import <libMultiMarkdown/libMultiMarkdown.h>`. To get you started,\nhere is (untested) demonstration code that converts a `NSString` to HTML:\n\n\ttoken_pool_init(); // needs to be done once per app lifecycle - PLEASE READ token.h!!!!!!!!!!!\n\n\tNSString *input = @"Test *string* for **demonstration**.";\n\tconst char *cString = [input cStringUsingEncoding:NSUTF8StringEncoding];\n\tconst char *mmd = mmd_string_convert(cString, EXT_SMART | EXT_NOTES | EXT_CRITIC | EXT_TRANSCLUDE, FORMAT_HTML, ENGLISH);\n\tNSString *output = [[NSString alloc] initWithCString:mmd encoding:NSUTF8StringEncoding];\n\n\t// Cleanup\n\tfree(mmd); \n\ttoken_pool_drain();\t\t// again, PLEASE READ token.h!!!!!!\n\ttoken_pool_free();\n\nThere are 3 main versions of the primary functions:\n\n* `mmd_string...`: start from source text in c string\n* `mmd_d_string...`: start from a DString (Useful if you already use DString\'s for your text)\n* `mmd_engine...`: useful when you are processing the same source multiple times\n\nThe C string variants are as follows:\n\n\t// Convert OPML string to MMD\n\tDString * mmd_string_convert_opml_to_text(const char * source);\n\n\t// Convert ITMZ string to MMD\n\tDString * mmd_string_convert_itmz_to_text(const char * source);\n\n\t// Convert MMD text to specified format, with specified extensions, and language\n\t// Returned char * must be freed\n\tchar * mmd_string_convert(const char * source, unsigned long extensions, short format, short language);\n\n\t// Convert MMD text to specified format using DString as a container for block of data\n\t// and length of that block.  Must be used for "complex" output formats such as EPUB.\n\t// Returned DString * must be freed\n\tDString * mmd_string_convert_to_data(const char * source, unsigned long extensions, short format, short language, const char * directory);\n\n\t// Convert MMD text and write results to specified file -- used for "complex" output formats requiring\n\t// multiple documents (e.g. EPUB)\n\tvoid mmd_string_convert_to_file(const char * source, unsigned long extensions, short format, short language, const char * directory, const char * filepath);\n\n\t// Does the text have metadata?\n\tbool mmd_string_has_metadata(char * source, size_t * end);\n\n\t// Return metadata keys, one per line\n\t// Returned char * must be freed\n\tchar * mmd_string_metadata_keys(char * source);\n\n\t// Extract desired metadata as string value\n\t// Returned char * must be freed\n\tchar * mmd_string_metavalue_for_key(char * source, const char * key);\n\n\t// Insert/replace metadata in string, returning new string\n\tchar * mmd_string_update_metavalue_for_key(const char * source, const char * key, const char * value);\n\n\t// Grab list of all transcluded files, but we need to know directory to search,\n\t// as well as the path to the file\n\t// Returned stack needs to be freed\n\tstruct stack * mmd_string_transclusion_manifest(const char * source, const char * search_path, const char * source_path);\n\nThe following enums can be used for the parameters `language`, `format` and `extensions`:\n\n\tenum smart_quotes_language {\n\t\tENGLISH = 0,\n\t\tDUTCH,\n\t\tFRENCH,\n\t\tGERMAN,\n\t\tGERMANGUILL,\n\t\tSPANISH,\n\t\tSWEDISH,\n\t};\n\n\tenum output_format {\n\t\tFORMAT_HTML,\n\t\tFORMAT_EPUB,\n\t\tFORMAT_LATEX,\n\t\tFORMAT_BEAMER,\n\t\tFORMAT_MEMOIR,\n\t\tFORMAT_FODT,\n\t\tFORMAT_ODT,\n\t\tFORMAT_TEXTBUNDLE,\n\t\tFORMAT_TEXTBUNDLE_COMPRESSED,\n\t\tFORMAT_OPML,\n\t\tFORMAT_ITMZ,\n\t\tFORMAT_MMD,\n\t};\n\n\tenum parser_extensions {\n\t\tEXT_COMPATIBILITY       = 1 << 0,    //!< Markdown compatibility mode\n\t\tEXT_COMPLETE            = 1 << 1,    //!< Create complete document\n\t\tEXT_SNIPPET             = 1 << 2,    //!< Create snippet only\n\t\tEXT_SMART               = 1 << 3,    //!< Enable Smart quotes\n\t\tEXT_NOTES               = 1 << 4,    //!< Enable Footnotes\n\t\tEXT_NO_LABELS           = 1 << 5,    //!< Don\'t add anchors to headers, etc.\n\t\tEXT_PROCESS_HTML        = 1 << 6,    //!< Process Markdown inside HTML\n\t\tEXT_NO_METADATA         = 1 << 7,    //!< Don\'t parse Metadata\n\t\tEXT_OBFUSCATE           = 1 << 8,    //!< Mask email addresses\n\t\tEXT_CRITIC              = 1 << 9,    //!< Critic Markup Support\n\t\tEXT_CRITIC_ACCEPT       = 1 << 10,   //!< Accept all proposed changes\n\t\tEXT_CRITIC_REJECT       = 1 << 11,   //!< Reject all proposed changes\n\t\tEXT_RANDOM_FOOT         = 1 << 12,   //!< Use random numbers for footnote links\n\t\tEXT_TRANSCLUDE          = 1 << 13,   //!< Perform transclusion(s)\n\t\tEXT_PARSE_OPML          = 1 << 14,   //!< Convert from OPML before processing source text\n\t\tEXT_PARSE_ITMZ\t\t\t= 1 << 15,   //!< Convert from ITMZ (iThoughts) before processing source text\n\t\tEXT_RANDOM_LABELS\t\t= 1 << 16,   //!< Use random numbers for header labels (unless manually defined)\n\t\tEXT_FAKE                = 1 << 31,   //!< 31 is highest number allowed\n\t};\n\n\n## Differences in the MultiMarkdown Syntax ##\n\nMultiMarkdown v6 is mostly about making a better MMD parser, but it involves a\nfew changes to the MultiMarkdown syntax itself.\n\n1.\tSetext headers can consist of more than one line to be included in the\nheader:\n\n\t\tThis is\n\t\ta header\n\t\t========\n\n2.\tWhitespace is not allowed between the text brackets and label brackets in\nreference links, images, footnotes, etc.  For example `[foo] [bar]` will no\nlonger be the same as `[foo][bar]`.\n\n3.\tLink and image titles can be quoted with `\'foo\'`, `"foo"`, or `(foo)`.\nLink attributes can be used in both reference and inline links/images.\n\n4.\tHTML elements are handled slightly differently.  There is no longer a\n`markdown="1"` feature.  Instead, HTML elements that are on a line by\nthemselves will open an HTML block that will cause the rest of the "paragraph"\nto be treated as HTML such that Markdown will not be parsed in side of it.\nHTML block-level tags are even "stronger" at starting an HTML block.  It is\nnot quite as complex as the approach used in CommonMark, but is similar under\nmost circumstances.  Leaving a blank line after the opening tag will allow\nMultiMarkdown parsing inside of the HTML block.\n\n\tFor example, this would not be parsed:\n\n\t\t<div>\n\t\t*foo*\n\t\t</div>\n\n\tBut this would be:\n\n\t\t<div>\n\n\t\t*foo*\n\n\t\t</div>\n\n5.\t"Malformed" reference link definitions are handled slightly differently.\nFor example, the test suite file `Reference Footnotes.text` is parsed\ndifferently in compatibility mode than MMD-5.  This started as a side-effect\nof the parsing algorithm, but I actually think it makes sense.  This may or\nmay not change in the future.\n\n6.\tTable captions in MMD-6 must come immediately *after* the table, not\nbefore it.\n\n7.\tEscaped linebreaks (`\\` preceding a line break) will be interpreted as\n`<br />` (even in compatibility mode).  This was previously an optional\nfeature in MMD, but I don\'t see a problem with just making it default \nbehavior.\n\n8.\tEscaped spaces (`\\ `) will be interpreted as a non-breaking space, if the\noutput format supports it.\n\n9.\tCriticMarkup, Abbreviations, Glossary Terms, and Citations are handled\nslightly differently.  See the QuickStart guide for more information.\n\n10.\tFenced code blocks can use leading/trailing "fences" of 3, 4, or 5\nbackticks in length.  That should be sufficient for complex documents without\nrequiring a more complex parser.  If there is no trailing fence, then the\nfenced block is considered to go through the end of the document.\n\n11.\tEmph and Strong parsing is conceptually the same, but the implementation\nis different.  It is designed for speed, accuracy, and consistency.  In\ngeneral, it seems to handle edge cases much more reliably, but there are still\na couple of situations that I would like to take into account, if possible.\nThese are not situations that should occur often in "real life."\n\n12.\tEPUB 3 output is supported without need of any external tools.\n\n13.\tInternationalization support for HTML phrases, such as "see footnote". See\n[Github](https://github.com/fletcher/MultiMarkdown-6/issues/37) for more\ninformation.\n\n\n\n## License ##\n\n\tThe `MultiMarkdown 6` project is released under the MIT License..\n\t\n\tGLibFacade.c and GLibFacade.h are from the MultiMarkdown v4 project:\n\t\n\t\thttps://github.com/fletcher/MultiMarkdown-4/\n\t\n\tMMD 4 is released under both the MIT License and GPL.\n\t\n\t\n\tCuTest is released under the zlib/libpng license. See CuTest.c for the\n\ttext of the license.\n\t\n\tuthash library:\n\t\tCopyright (c) 2005-2016, Troy D. Hanson\n\t\n\t\tLicensed under Revised BSD license\n\t\n\tminiz library:\n\t\tCopyright 2013-2014 RAD Game Tools and Valve Software\n\t\tCopyright 2010-2014 Rich Geldreich and Tenacious Software LLC\n\t\n\t\tLicensed under the MIT license\n\t\n\targtable3 library:\n\t\tCopyright (C) 1998-2001,2003-2011,2013 Stewart Heitmann\n\t\t<sheitmann@users.sourceforge.net>\n\t\tAll rights reserved.\n\t\n\t\tLicensed under the Revised BSD License\n\t\n\t\n\t## The MIT License ##\n\t\n\tPermission is hereby granted, free of charge, to any person obtaining\n\ta copy of this software and associated documentation files (the\n\t"Software"), to deal in the Software without restriction, including\n\twithout limitation the rights to use, copy, modify, merge, publish,\n\tdistribute, sublicense, and/or sell copies of the Software, and to\n\tpermit persons to whom the Software is furnished to do so, subject to\n\tthe following conditions:\n\t\n\tThe above copyright notice and this permission notice shall be\n\tincluded in all copies or substantial portions of the Software.\n\t\n\tTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,\n\tEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\tMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n\tIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n\tCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n\tTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n\tSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\t\n\t\n\t## Revised BSD License ##\n\t\n\tRedistribution and use in source and binary forms, with or without\n\tmodification, are permitted provided that the following conditions are\n\tmet:\n\t    * Redistributions of source code must retain the above copyright\n\t      notice, this list of conditions and the following disclaimer.\n\t    * Redistributions in binary form must reproduce the above\n\t      copyright notice, this list of conditions and the following\n\t      disclaimer in the documentation and/or other materials provided\n\t      with the distribution.\n\t    * Neither the name of the <organization> nor the\n\t      names of its contributors may be used to endorse or promote\n\t      products derived from this software without specific prior\n\t      written permission.\n\t\n\tTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\t"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n\tLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n\tA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT\n\tHOLDER> BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n\tEXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n\tPROCUREMENT OF SUBSTITUTE GOODS OR SERVICES LOSS OF USE, DATA, OR\n\tPROFITS OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n\tLIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n\tNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n\tSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\t\n'