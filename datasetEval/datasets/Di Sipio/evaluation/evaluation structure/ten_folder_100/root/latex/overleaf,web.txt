b"overleaf/web\n==============\n\noverleaf/web is the front-end web service of the open-source web-based collaborative LaTeX editor,\n[Overleaf](https://www.overleaf.com).\nIt serves all the HTML pages, CSS and javascript to the client. overleaf/web also contains\na lot of logic around creating and editing projects, and account management.\n\n\nThe rest of the Overleaf stack, along with information about contributing can be found in the\n[overleaf/overleaf](https://github.com/overleaf/overleaf) repository.\n\nBuild process\n----------------\n\noverleaf/web uses [Grunt](http://gruntjs.com/) to build its front-end related assets.\n\nImage processing tasks are commented out in the gruntfile and the needed packages aren't presently in the project's `package.json`. If the images need to be processed again (minified and sprited), start by fetching the packages (`npm install grunt-contrib-imagemin grunt-sprity`), then *decomment* the tasks in `Gruntfile.coffee`. After this, the tasks can be called (explicitly, via `grunt imagemin` and `grunt sprity`).\n\nNew Docker-based build process\n------------------------------\n\nNote that the Grunt workflow from above should still work, but we are transitioning to a\nDocker based testing workflow, which is documented below:\n\n### Running the app\n\nThe app runs natively using npm and Node on the local system:\n\n```\n$ npm install\n$ npm run start\n```\n\n*Ideally the app would run in Docker like the tests below, but with host networking not supported in OS X, we need to run it natively until all services are Dockerised.*\n\n### Running Tests\n\nTo run all tests run:\n```\nmake test\n```\n\nTo run both unit and acceptance tests for a module run:\n```\nmake test_module MODULE=overleaf-integration\n```\n\n### Unit Tests\n\nThe test suites run in Docker.\n\nUnit tests can be run in the `test_unit` container defined in `docker-compose.tests.yml`.\n\nThe makefile contains a short cut to run these:\n\n```\nmake test_unit\n```\n\nDuring development it is often useful to only run a subset of tests, which can be configured with arguments to the mocha CLI:\n\n```\nmake test_unit MOCHA_GREP='AuthorizationManager'\n```\n\nTo run only the unit tests for a single module do:\n```\nmake test_unit_module MODULE=overleaf-integration\n```\n\nModule tests can also use a MOCHA_GREP argument:\n```\nmake test_unit_module MODULE=overleaf-integration MOCHA_GREP=SSO\n```\n\n### Acceptance Tests\n\nAcceptance tests are run against a live service, which runs in the `acceptance_test` container defined in `docker-compose.tests.yml`.\n\nTo run the tests out-of-the-box, the makefile defines:\n\n```\nmake test_acceptance\n```\n\nHowever, during development it is often useful to leave the service running for rapid iteration on the acceptance tests. This can be done with:\n\n```\nmake test_acceptance_app_start_service\nmake test_acceptance_app_run # Run as many times as needed during development\nmake test_acceptance_app_stop_service\n```\n\n`make test_acceptance` just runs these three commands in sequence and then runs `make test_acceptance_modules` which performs the tests for each module in the `modules` directory. (Note that there is not currently an equivalent to the `-start` / `-run` x _n_ / `-stop` series for modules.)\n\nDuring development it is often useful to only run a subset of tests, which can be configured with arguments to the mocha CLI:\n\n```\nmake test_acceptance_run MOCHA_GREP='AuthorizationManager'\n```\n\nTo run only the acceptance tests for a single module do:\n```\nmake test_acceptance_module MODULE=overleaf-integration\n```\n\nModule tests can also use a MOCHA_GREP argument:\n```\nmake test_acceptance_module MODULE=overleaf-integration MOCHA_GREP=SSO\n```\n\nRoutes\n------\n\nRun `bin/routes` to print out all routes in the project.\n\n\nLicense and Credits\n-------------------\n\nThis project is licensed under the [AGPLv3 license](http://www.gnu.org/licenses/agpl-3.0.html)\n\n### Stylesheets\n\nOverleaf is based on [Bootstrap](http://getbootstrap.com/), which is licensed under the\n[MIT license](http://opensource.org/licenses/MIT).\nAll modifications (`*.less` files in `public/stylesheets`) are also licensed\nunder the MIT license.\n\n### Artwork\n\n#### Silk icon set 1.3\n\nWe gratefully acknowledge [Mark James](http://www.famfamfam.com/lab/icons/silk/) for\nreleasing his Silk icon set under the Creative Commons Attribution 2.5 license. Some\nof these icons are used within Overleaf inside the `public/img/silk` and\n`public/brand/icons` directories.\n\n#### IconShock icons\n\nWe gratefully acknowledge [IconShock](http://www.iconshock.com) for use of the icons\nin the `public/img/iconshock` directory found via\n[findicons.com](http://findicons.com/icon/498089/height?id=526085#)\n\n"