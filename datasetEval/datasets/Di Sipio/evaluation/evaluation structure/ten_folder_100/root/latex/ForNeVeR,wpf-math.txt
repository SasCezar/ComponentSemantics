b'WPF-Math [![Build status][badge-appveyor]][appveyor] [![NuGet][badge-nuget]][nuget]\n========\n\n*WPF-Math* is a .NET library for rendering mathematical formulae using the LaTeX typsetting style, for the WPF framework.\n\nGetting Started\n---------------\n\nThe simplest way of using *WPF-Math* is to render a static formula in a XAML file as follows.\n\n```xml\n<Window ... xmlns:controls="clr-namespace:WpfMath.Controls;assembly=WpfMath">\n    <controls:FormulaControl Formula="\\left(x^2 + 2 \\cdot x + 2\\right) = 0" />\n</Window>\n```\n\nFor a more detailed sample, check out the [example project][example]. It shows the usage of data binding and some advanced concepts.\n\n![Screenshot of example project](docs/example-screenshot.png)\n\n### Using a rendering API\n\nThe following example demonstrates usage of `TexFormula` API to render the image into a PNG file using the `RenderToPng` extension method:\n\n```csharp\nusing System.IO;\nusing WpfMath;\n\nnamespace ConsoleApplication2\n{\n    internal class Program\n    {\n        public static void Main(string[] args)\n        {\n            const string latex = @"\\frac{2+2}{2}";\n            const string fileName = @"T:\\Temp\\formula.png";\n\n            var parser = new TexFormulaParser();\n            var formula = parser.Parse(latex);\n            var pngBytes = formula.RenderToPng(20.0, 0.0, 0.0, "Arial");\n            File.WriteAllBytes(fileName, pngBytes);\n        }\n    }\n}\n```\n\nIf you need any additional control over the image format, consider using the `GetRenderer` API:\n\n```csharp\nusing System;\nusing System.IO;\nusing System.Windows.Media.Imaging;\nusing WpfMath;\n\nnamespace ConsoleApplication2\n{\n    internal class Program\n    {\n        public static void Main(string[] args)\n        {\n            const string latex = @"\\frac{2+2}{2}";\n            const string fileName = @"T:\\Temp\\formula.png";\n\n            var parser = new TexFormulaParser();\n            var formula = parser.Parse(latex);\n            var renderer = formula.GetRenderer(TexStyle.Display, 20.0, "Arial");\n            var bitmapSource = renderer.RenderToBitmap(0.0, 0.0);\n            Console.WriteLine($"Image width: {bitmapSource.Width}");\n            Console.WriteLine($"Image height: {bitmapSource.Height}");\n\n            var encoder = new PngBitmapEncoder();\n            encoder.Frames.Add(BitmapFrame.Create(bitmapSource));\n            using (var target = new FileStream(fileName, FileMode.Create))\n            {\n                encoder.Save(target);\n                Console.WriteLine($"File saved to {fileName}");\n            }\n        }\n    }\n}\n```\n\nYou may also pass your own `IElementRenderer` implementation to `TexFormula.RenderFormulaTo` method if you need support for any alternate rendering engines.\n\nDocumentation\n-------------\n\n- [Color support in WPF-Math][docs-colors]\n- [Matrices and Matrix-Like Constructs][docs-matrices]\n- [How to improve blurred formulas][docs-blurred-text-issue]\n\n- [How to prepare `DefaultTexFont.xml` from the font file][docs-prepare-font]\n\n- [Licensing history][docs-licensing-history]\n\nBuild and Maintenance Instructions\n----------------------------------\n\nBuild the project using [MSBuild][msbuild] or any compatible environment (e.g. Visual Studio 2017 or Rider). WPF-Math requires C# 7.2 support. Build script:\n\n```console\n$ nuget restore\n$ msbuild /p:Configuration=Release\n```\n\nTo run the unit tests, use any xunit-compatible runner (e.g. Visual Studio 2017 or Rider).\n\nTo approve the test results if they differ from the existing ones, execute the `scripts/approve-all.ps1` script using PowerShell or PowerShell Core.\n\nTo publish the package, execute the following command with [PowerShell][pwsh]:\n\n```console\n$ pwsh scripts/nuget-pack.ps1\n```\n\nHistory\n-------\n\nThe library was originally ported from the [JMathTex project][jmathtex], copyright 2004-2007 Universiteit Gent. The port was originally named *WPF-TeX* and was written and maintained by [Alex Regueiro][alex-regueiro]. It was later available as [*WPF-Math* on Launchpad][launchpad], but was unmaintained from 2011 until it was revived in [its current form][github].\n\nLicense Notes\n-------------\n\nThe project code and all the resources are distributed under the terms of [MIT license][license].\n\nThe [fonts][] `cmex10.ttf`, `cmmi10.ttf`, `cmr10.ttf`, and `cmsy10.ttf` and `cmtt10.ttf` are under the [Knuth License][knuth-license].\n\nWPF-Math started as a direct port of [JMathTeX][jmathtex] project written in Java, reusing both code and resources. JMathTeX is distributed under the terms of GNU GPL v2 license. WPF-Math, being a derived work, has a permission from JMathTeX authors to be redistributed under the MIT license. See the [Licensing history][docs-licensing-history] for the details.\n\nWe\'re very grateful to JMathTeX authors for their work and allowing to redistribute the derived library. JMathTeX is written by:\n- Kris Coolsaet\n- Nico Van Cleemput\n- Kurt Vermeulen\n\n[docs-colors]: docs/colors.md\n[docs-prepare-font]: docs/prepare-font.md\n[docs-blurred-text-issue]: docs/blurred-text-issue.md\n[docs-licensing-history]: docs/licensing-history.md\n[docs-matrices]: docs/matrices.md\n[example]: WpfMath.Example/\n[fonts]: src/WpfMath/Fonts/\n[license]: LICENSE.md\n\n[alex-regueiro]: https://github.com/alexreg\n[appveyor]: https://ci.appveyor.com/project/ForNeVeR/wpf-math/branch/master\n[github]: https://github.com/ForNeVeR/wpf-math\n[jmathtex]: http://jmathtex.sourceforge.net/\n[knuth-license]: http://ctan.org/license/knuth\n[launchpad]: https://launchpad.net/wpf-math\n[msbuild]: https://github.com/Microsoft/msbuild\n[nuget]: https://www.nuget.org/packages/WpfMath/\n[pwsh]: https://github.com/PowerShell/PowerShell\n\n[badge-appveyor]: https://ci.appveyor.com/api/projects/status/b26m3rpfcgb91gdg/branch/master?svg=true\n[badge-nuget]: https://img.shields.io/nuget/v/WpfMath.svg\n'