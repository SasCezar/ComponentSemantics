b"![logo1](https://raw.githubusercontent.com/wiki/gfngfn/SATySFi/img/satysfi-logo.png)\n\n[![Build Status](https://travis-ci.org/gfngfn/SATySFi.svg?branch=master)](https://travis-ci.org/gfngfn/SATySFi)\n\n[\xe6\x97\xa5\xe6\x9c\xac\xe8\xaa\x9e\xe7\x89\x88 README \xe3\x81\xaf\xe3\x81\x93\xe3\x81\xa1\xe3\x82\x89](https://github.com/gfngfn/SATySFi/blob/master/README-ja.md)\n\n## Summary of SATySFi\n\n*SATySFi* (pronounced in the same way as the verb \xe2\x80\x9csatisfy\xe2\x80\x9d in English) is a new typesetting system equipped with a statically-typed, functional programming language. It consists mainly of two \xe2\x80\x9clayers\xe2\x80\x9d \xe2\x80\x95 the text layer and the program layer. The former is for writing documents in LaTeX-like syntax. The latter, which has OCaml-like syntax, is for defining functions and commands. SATySFi enables you to write documents markuped with flexible commands of your own making. In addition, its informative type error reporting will be a good help to your writing.\n\nThis software was supported by IPA Mitou Project 2017 (see the abstract [here](https://www.ipa.go.jp/jinzai/mitou/2017/gaiyou_t-4.html) written in Japanese), and its development continues to this day (February 2019).\n\n## Install using Homebrew (for OS X users)\n\nA Homebrew formula is provided for SATySFi (v0.0.2).\n\n```sh\n$ brew install --HEAD nyuichi/satysfi/satysfi\n```\n\n## Install using OPAM\n\n### Prerequisites\n\nHere is a list of minimally required softwares.\n\n* bzip2\n* cc\n* git\n* m4\n* make\n* unzip\n* wget or curl\n* ruby\n* [opam](https://opam.ocaml.org/) 2.0 (Installation instructions are [here](https://opam.ocaml.org/doc/Install.html).)\n    * Bubblewrap, a tool required for opam 2, cannot be installed easily yet on some kinds of environment such as Windows Subsystem for Linux (WSL) and Ubuntu 16.04. As a workaround for the time being, opam 2 can be installed without bubblewrap by passing `--disable-sandboxing` option when running `opam init`. **Please see [opam's FAQ](https://opam.ocaml.org/doc/FAQ.html#Why-does-opam-require-bwrap) for details.**\n* ocaml 4.06.0 (installed by OPAM)\n\nAlso, we must add an external OPAM repo to build. This can be done by the following command.\n\n```sh\nopam repository add satysfi-external https://github.com/gfngfn/satysfi-external-repo.git\nopam update\n```\n\n#### Example (Ubuntu)\n\n```sh\nsudo apt-get update\nsudo apt-get install build-essential git m4 unzip curl\n\nsh <(curl -sL https://raw.githubusercontent.com/ocaml/opam/master/shell/install.sh)\n\n# The following command will ask if you allow OPAM to modify some files (e.g. ~/.bash_profile).\n# Be sure to read its instructions. Otherwise, some environment variables won't be set.\nopam init --comp 4.06.0\n\neval $(opam env)\n\nopam repository add satysfi-external https://github.com/gfngfn/satysfi-external-repo.git\nopam update\n```\n\n#### Example (OS X Mavericks or later)\n\n```sh\n# Before running this scripts, install essential softwares such as GCC and Make. They can be installed from Xcode Command Line Tools.\n# Also, install Homebrew.\n\nbrew update\nbrew install opam\n\n# The following command will ask if OPAM modifies some files.\n# Be sure to read their instructions. Otherwise, some environment variables won't be set.\nopam init --comp 4.06.0\n\neval $(opam env)\n\nopam repository add satysfi-external https://github.com/gfngfn/satysfi-external-repo.git\nopam update\n```\n\n### Build\n\nFirst, clone this repository and submodules. Then build SATySFi using OPAM.\n\n```sh\n# clone\ngit clone https://github.com/gfngfn/SATySFi.git\ncd SATySFi\n\n# build\nopam pin add satysfi .\nopam install satysfi\n```\n\n* To reinstall, run `opam reinstall satysfi`.\n* To uninstall, run `opam uninstall satysfi`.\n\n<!--\n### Manual build of SATySFi\n\n1. Install ocamlbuild, ocamlfind, and Menhir.\n2. In repository, run `make`.\n3. `macrodown` should then be available under the diretory.\n4. Run `make install` to install `satysfi` as `/usr/local/bin/satysfi`.\n5. Run `make install-lib` to create a symbolic link for the library.\n\nYou can modify the directory for the installation by specifying `PREFIX` like `sudo make install PREFIX=/usr/bin`. the symbolic link for the SATySFi library will be created as `/usr/local/lib-satysfi -> DIR/lib-satysfi` where `DIR` is the top directory of the repository.\n-->\n\n<!--\n### Download release from GitHub\n\nSee [release page](https://github.com/gfngfn/Macrodown/releases)\n-->\n\n### Setup for SATySFi\n\nBefore using SATySFi, one should put libraries and fonts onto the appropriate directory. This can be done by invoking the following commands in order:\n\n```sh\n./download-fonts.sh\n./install-libs.sh\n```\n\nThe former downloads the fonts required by the default settings into `lib-satysfi/dist/fonts/`, and the latter copies `lib-satysfi/` to  `/usr/local/share/satysfi/`.\n\nDuring this setup, the following fonts are downloaded. Consult their license before using them.\n\n* [Junicode](http://junicode.sourceforge.net)\n* [IPA Font](https://ipafont.ipa.go.jp/old/ipafont/download.html)\n* [Latin Modern](http://www.gust.org.pl/projects/e-foundry/latin-modern/)\n* [Latin Modern Math](http://www.gust.org.pl/projects/e-foundry/lm-math)\n\n## Usage of SATySFi\n\nType\n\n```sh\nsatysfi <input file> -o <output file>\n```\n\nin order to convert `<input file>` into `<output file>`. For example, when you want to convert `doc.saty` into `output.pdf`, the following command will work:\n\n```sh\nsatysfi doc.saty -o output.pdf\n```\n\n### Starting out\n\nFirst of all, let\xe2\x80\x99s try to compile the demo file. It is in `demo` folder. Because this demo file has `MakeFile`, All you should do is only type `make`.\n\n```sh\ncd demo\nmake\n```\n\nIf `demo.pdf` is created, then the setup has been finished correctly.\n\n### Reference\n\nIn addition, a concice reference of SATySFi is written by SATySFi itself in `doc` folder. You need to compile it to read.\n\n```sh\ncd doc\nmake\n```\n\n## Command-line options\n\n* `-v`, `--version`: Prints the version.\n* `-o`, `--output`: Specify the name of the output PDF file. if this option is not given explicitly, the name of the output file is the concatenation of the base name of the input file and the extension `.pdf`.\n* `-b`, `--bytecomp`: Use byte compiler and enhance performance of computation.\n* `--full-path`: Displays file names with their absolute path when outputting them to stdout.\n* `--type-check-only`: Stops after type checking.\n* `--debug-show-bbox`: Outputs bounding boxes for each glyph (for the purpose of debugging).\n* `--debug-show-space`: Outputs boxes for spaces (for the purpose of debugging).\n\n## Learning SATySFi\n\n[Wiki](https://github.com/gfngfn/SATySFi/wiki/SATySFi-Wiki#%E5%AD%A6%E7%BF%92%E7%94%A8%E8%B3%87%E6%96%99) (currently written only in Japanese) has some information about learning SATySFi.\n"