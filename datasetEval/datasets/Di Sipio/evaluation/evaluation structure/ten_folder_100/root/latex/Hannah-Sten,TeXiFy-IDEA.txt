b'[![Travis (.org)](https://img.shields.io/travis/Hannah-Sten/TeXiFy-IDEA.svg?style=flat-square)](https://travis-ci.org/Hannah-Sten/TeXiFy-IDEA)\n[![Version](https://img.shields.io/jetbrains/plugin/v/9473-texify-idea.svg?style=flat-square)](https://plugins.jetbrains.com/plugin/9473-texify-idea)\n[![View at JetBrains](https://img.shields.io/jetbrains/plugin/d/9473-texify-idea.svg?style=flat-square)](https://plugins.jetbrains.com/plugin/9473-texify-idea)\n[![Join the chat at https://gitter.im/TeXiFy-IDEA/Lobby](https://img.shields.io/badge/gitter-join%20chat-green.svg?style=flat-square)](https://gitter.im/TeXiFy-IDEA)\n[![Donate via PayPal](https://img.shields.io/badge/Donate!-PayPal-orange.png?style=flat-square)](https://www.paypal.me/RubenSchellekens)\n\n# TeXiFy-IDEA\nLaTeX support for the IntelliJ Platform by [JetBrains](https://www.jetbrains.com/).\n\nNo idea where to start? Have a look at the [installation instructions](#installation-instructions). Otherwise, take a look at the [tips](#tips) instead.\n\nCreate the most beautiful LaTeX documents with the user friendliness of the IntelliJ platform.\nThis plugin adds the tools to make creating LaTeX documents a breeze. We are currently doing our best to develop the plugin\n\n## Feedback and support\nYou can share new ideas/feature requests/bugs/calls for help in multiple ways:\n1. Live chat via [gitter](https://gitter.im/TeXiFy-IDEA) (you can login with your GitHub account). Gitter also has a nice app, we use it to get notified of new activity.\n2. [Issues](https://github.com/Hannah-Sten/TeXiFy-IDEA/issues). These may be bug reports, feature requests, user support, etc. Just generally anything you have a problem with/suggestion for. For general feedback we advice using the gitter.\n\nPlease bear in mind that this is just a side project for us. It might take a while to fully process your feedback. We try our best :3\n\n## Contributing\nWe would love it if you want to contribute to this project!\nPlease have a look at the [contributing guidelines](CONTRIBUTING.md) to get started.\n\n## Features\n\n* Syntax highlighting\n* Autocomplete of labels, (custom defined) commands and environments\n* Writer ergonomics - writing LaTeX made less cumbersome\n* Compiler support for pdfLaTeX, LuaTeX, Latexmk, texliveonfly, XeLaTeX, bibtex, and biber\n* Inspections. Intentions. And heaps more inspections\n* Full BibTeX support\n* Formatter for LaTeX and BibTeX\n* Structure view for LaTeX and BibTeX with filters\n* Code folding for imports, sections, and environments\n* SumatraPDF (Windows) and Evince (Linux) support with forward and backward search\n* Smart Quotes\n* Unicode math preview\n* Equation preview\n* Gutter icons for quick compilation and file includes\n* Fancy icons that fit in with the IntelliJ style\n* Brace matching\n* Word counting tool\n* File templates for .tex, .sty, .cls and .bib files\n* Automagically import packages of common commands\n* Go to declaration of labels\n* Shortcuts for styling text\n* Line commenter\n* Support for user-created document classes and packages\n* Toggle star action\n* Words of encouragement\n\nA more extensive (but not complete) list can be found in the [Wiki](https://github.com/Hannah-Sten/TeXiFy-IDEA/wiki/Features).\n\n## <a name="installation-instructions">Installation instructions: installing IntelliJ and the TeXiFy-IDEA plugin</a>\n\n[Instructions for Windows](#windows-instructions).\n\n[Instructions for Linux](#linux-instructions).\n\n[Instructions for Mac](#mac-instructions).\n\n### <a name="windows-instructions">Installation instructions for Windows</a>\n\nThese instructions were tested on Windows 7, 8.1 and 10.\n\n* If you don\'t have the latest version yet, download and install [IntelliJ IDEA](https://www.jetbrains.com/idea/download/), the Community edition is free. You may want to install the [Jetbrains toolbox](https://www.jetbrains.com/toolbox/app/) instead, so you can manage projects and editors easily (Jetbrains has editors for more programming languages as well).\n* Download and install [LaTeX for Windows](https://miktex.org/download). During installation, choose the option `Install missing packages on the fly: yes`.\n* Download and install [SumatraPDF](https://www.sumatrapdfreader.org/download-free-pdf-viewer.html), you will use it to view your compiled pdf files. If you know you are on a 64-bit system you can download the 64-bit build. If you have no idea, download the normal installer which is the top-most link.\n* Open IntelliJ, in the welcome menu choose Configure - Plugins (or when you already have a project open, use File - Settings - Plugins).\n* Search for `texify`, click `search in repositories` and click `install`.\n* Restart your pc to finish the LaTeX and the plugin installations.\n* Click on Create New Project (in welcome menu) or File - New - Project, select LaTeX in the left column and click next. Specify a name for your project, and a location. A project can contain multiple LaTeX files, so for example if you make a new document for each new homework you get, place them all in the same project.\n* Double-click or click on the arrow next to your project name on the left to open the directory.\n* A standard document is already made for you, you can find it in the `src` folder. This folder will contain all your LaTeX. Double-click on the `.tex` file to open it. If you cannot see any directory structure (the folders on the left side), hit Project (it\'s written on its side) on the left of your screen.\n* Type some text between the `\\begin{document}` and `\\end{document}` lines, hit the compile icon next to the `\\begin{document}` line and click Run, or use <kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>F10</kbd>. If you see a pdf appearing, congratulations! \n* If you see `LaTeX error: file a4.sty not found` then you did not restart your pc. Do it now.\n* The next time you can also compile using the Run button (looks like a Play button) in the top-right menu, or using <kbd>Shift</kbd>+<kbd>F10</kbd> on Windows.\n\n#### Configuring forward and inverse search\n* When your cursor is in IntelliJ and you have just compiled a document, you can look up which line in the pdf corresponds to the line your cursor is at by going in IntelliJ to the Tools - LaTeX menu in the top menu bar and clicking SumatraPDF - Go to line in PDF, or using the shortcut which is listed there.\nThis shortcut can also be used to bring the SumatraPDF window in view when you do not see it.\n* If you don\'t see a SumatraPDF option, reboot your computer.\n* You can also do the reverse: you have to configure it once by clicking Tools - LaTeX - SumatraPDF - Configure inverse search. Then double-click in SumatraPDF in a pdf you just compiled, and it should make your cursor go to the correct location in IntelliJ. \n* Have a look at the [tips](#tips).\n\n### <a name="linux-instructions">Installation instructions for linux</a>\n\nThese instructions were tested on at least Ubuntu 16.04, 18.04, Fedora and Arch Linux.\n\n* If you don\'t have the latest version yet, download and install [IntelliJ IDEA](https://www.jetbrains.com/idea/download/), the Community edition is free. You may want to use the [Jetbrains toolbox](https://www.jetbrains.com/toolbox/app/) instead, so you can manage projects and editors easily (Jetbrains has editors for more programming languages as well). Download and save the `.tar.gz` file to your Downloads folder.\n* You can extract in your Downloads folder with, in case you downloaded IntelliJ, (change the exactly version number to the correct one, you can use tab for autocompletion) `sudo tar xf ideaIU-2018.1.5.tar.gz -C /opt/`, then run `/opt/idea-IU-181.5281.24/bin/idea.sh`, or in case you downloaded the toolbox, `sudo tar xf jetbrains-toolbox-1.11.4269.tar.gz -C /opt/` and run `/opt/jetbrains-toolbox-1.11.4269/jetbrains-toolbox`, then install IntelliJ.\n* To install LaTeX, you can use the TeX Live distribution. If something is already installed, check that the version is at least 2017 with `latex --version`. If not, for example if you are on Ubuntu 16.04, you have to first remove the old TeX Live (see for example [these steps](https://tex.stackexchange.com/a/95502/98850)) and then install a newer TeX Live (based on the LaTeX3 setup):\n  *  Run in your Downloads directory `sudo wget http://mirror.ctan.org/systems/texlive/tlnet/install-tl-unx.tar.gz` \n  * `sudo tar -xzf install-tl-unx.tar.gz` \n  * `sudo install-tl-20*/install-tl -scheme scheme-basic` \n  * Then use `nano ~/.profile` to add texlive to your path, so at the end of the file write `export PATH="/usr/local/texlive/2018/bin/x86_64-linux:$PATH"`. \n  * Log out and log back in for this to take effect. Check again with `latex --version` and `pdflatex --version` and `tlmgr --version` that everything went right. \n  * Now you probably need to `sudo visudo` to modify `Defaults secure_path="/usr/..."` to make it look like `Defaults secure_path="/usr/local/texlive/2018/bin/x86_64-linux:/usr/..."`.\n* Now you can install packages, so `sudo tlmgr install xkeyval collection-latex collection-langeuropean` and all the other packages you want.\n* Open IntelliJ, in the welcome menu choose Configure - Plugins (or when you already have a project open, use File - Settings - Plugins).\n* Search for `texify`, click `search in repositories` and click `install`.\n* Restart IntelliJ to finish the the plugin installation.\n* Click on Create New Project (in welcome menu) or File - New - Project, select LaTeX in the left column and click next. Specify a name for your project, and a location. A project can contain multiple LaTeX files, so for example if you make a new document for each new homework you get, place them all in the same project.\n* Double-click or click on the arrow next to your project name on the left to open the directory.\n* A standard document is already made for you, you can find it in the `src/` folder. This folder will contain all your LaTeX. Double-click on the `.tex` file to open it. If you cannot see any directory structure (the folders on the left side), hit Project (it\'s written on its side) on the left of your screen.\n* Type some text between the `\\begin{document}` and `\\end{document}` lines, hit the compile icon next to the `\\begin{document}` line and click Run. The resulting pdf file is hiding in the `out/` folder.\n* The next time you can also compile using the Run button (looks like a Play button) in the top-right menu, or using <kbd>Shift</kbd>+<kbd>F10</kbd>.\n\n#### Forward and inverse search\n* When your cursor is in IntelliJ and you have just compiled a document, you can look up which line in the pdf corresponds to the line your cursor is at by going in IntelliJ to the Tools - LaTeX menu in the top menu bar and clicking Evince - Forward Search, or using the shortcut which is listed there.\nThis shortcut can also be used to bring the Evince window in view when you do not see it.\n* You can also do the reverse: press <kbd>Ctrl</kbd> and click in Evince in a pdf you just compiled, and it should make your cursor go to the correct location in IntelliJ. \n* Also have a look at the [tips](#tips).\n\n### <a name="mac-instructions">Installation instructions for Mac</a>\nNote that we didn\'t have the opportunity yet to test these instructions, so please let us know if you did.\n\n* If you don\'t have the latest version yet, download and install [IntelliJ IDEA](https://www.jetbrains.com/idea/download/), the Community edition is free. You may want to install the [Jetbrains toolbox](https://www.jetbrains.com/toolbox/app/) instead, so you can manage projects and editors easily (Jetbrains has editors for more programming languages as well).\n* Download and install [LaTeX for Mac](https://miktex.org/howto/install-miktex-mac). During installation, choose the option `Install missing packages on the fly: yes`.\n* Open IntelliJ, in the welcome menu choose Configure - Plugins (or when you already have a project open, use File - Settings - Plugins).\n* Search for `texify`, click `search in repositories` and click `install`.\n* Restart your pc to finish the LaTeX and the plugin installations.\n* Click on Create New Project (in welcome menu) or File - New - Project, select LaTeX in the left column and click next. Specify a name for your project, and a location. A project can contain multiple LaTeX files, so for example if you make a new document for each new homework you get, place them all in the same project.\n* Double-click or click on the arrow next to your project name on the left to open the directory.\n* A standard document is already made for you, you can find it in the `src` folder. This folder will contain all your LaTeX. Double-click on the `.tex` file to open it. If you cannot see any directory structure (the folders on the left side), hit Project (it\'s written on its side) on the left of your screen.\n* Type some text between the `\\begin{document}` and `\\end{document}` lines, hit the compile icon next to the `\\begin{document}` line and click Run. If you see a pdf appearing, congratulations! \n* The next time you can also compile using the Run button (looks like a Play button) in the top-right menu.\n* Have a look at the [tips](#tips).\n\n#### <a name="tips">Tips</a>\n* You never have to remember to save your work, IntelliJ will automatically save every letter you type.\n* You can personalise the template that is used when you create a new LaTeX file in settings - editor - file and code templates - LaTeX source.\n* You don\'t need to close the pdf to recompile, it will automatically refresh.\n* A good way to start learning LaTeX is by asking someone how to do what you want to do or by Googling "what-I-want-to-do latex".\n* But some standard LaTeX commands are available in the LaTeX menu.\n* Pay attention to squiggles (wavey lines) under text you typed, they indicate that something is wrong. Hovering over it gives extra information. In some cases, a ready-made fix is waiting to be applied: hit the lightbulb that appears on the left, or hit <kbd>Alt</kbd>+<kbd>Enter</kbd> to view and apply it. A quick overview of useful shortcuts is [below](#installation-shortcuts-overview).\n* If your LaTeX indentation (the number of spaces that is in front of each line) looks messy, try to reformat with <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>L</kbd>.\n* This plugin contains an Equation Preview, which lets you preview equations without having to compile the entire document. It does however require other software, for which you can find installation instructions [below](#equation-preview). The same software requirements hold for the TikZ Preview, with which you can preview TikZ pictures.\n* If you are searching how a particular symbol has to be written in LaTeX, the [Detexify](http://detexify.kirelabs.org/classify.html) tool can probably help you. Just draw your symbol in the `draw here` box and the command will be listed on the right.\n* If you want a proper explanation of what LaTeX and its philosophy is about, read the [Not So Short Introduction To LaTeX2e](http://ctan.cs.uu.nl/info/lshort/english/lshort.pdf).\n\n### When you want to work together: install git\n* Often you will be working together on one document. In that case, use git to make this go smoothly. We use git because git is awesome, but there exist other tools as well.\n* But sometimes you cannot use IntelliJ, for example because you are at school. For that, we use Overleaf. \n* Note that this Overleaf feature will become paid in Overleaf v2, and direct git access will stop end of 2018. If you find an other service that can do this for free, please let us know. As an alternative you can use a git hosting service without LaTeX editing, like GitHub (see below).\n* Install [git](https://git-scm.com/downloads), during installation just click `next` everywhere.\n* Restart your computer.\n* Go to [Overleaf](https://www.overleaf.com/signup) and sign up.\n* Create a new project, choose a blank template. Possibly give it a useful name.\n* Click `Share` and copy the link under `clone with git`.\n* Go to IntelliJ and click File - New - Project from VCS - git\n* Paste the url here, and choose the parent directory you want.\n* If you are asked by IntelliJ `Do you want to add this file to git?`, just click `no`\nwhen you do not recognize the file.\n* You can share the Overleaf link under `Read & Edit Link` with your co-authors.\n\n#### To push (upload) changes to Overleaf\n* Hit <kbd>Ctrl</kbd>+<kbd>K</kbd> to commit changes to git.\n* Specify a commit message.\n* Click `commit and push` by hovering over the `commit` button.\n* If your git username is asked, specify it.\n* Click `push`.\n\n#### To pull (download) changes from Overleaf\n* Hit <kbd>Ctrl</kbd>+<kbd>T</kbd>.\n\n### I want to know more about git\n* That\'s great! Because git and similar tools are used everywhere by programmers to collaborate, it\'s not just for LaTeX and doesn\'t work just with Overleaf.\n* [GitHub](https://github.com/), the site you are now looking at, is used a lot to store code online and collaborate using the same push and pull mechanism as you used all the time, but now to GitHub instead of Overleaf. After you made a new repository, click `Clone or download` to get a git link, and then do the same steps as you did with the Overleaf link.\n* If you want to know more, a great git tutorial is at [learngitbranching.js.org](http://learngitbranching.js.org/).\n* Want to know even more of advanced use of git? Read the excellent [Pro Git book](https://git-scm.com/book/en/v2) for free.\n\n### <a name="installation-shortcuts-overview"></a> Overview of some useful IntelliJ shortcuts\n<!-- This section has been copied to the wiki -->\n* Double <kbd>Shift</kbd> Search for any IntelliJ command, like Reformat.\n* <kbd>Alt</kbd>+<kbd>Enter</kbd> View the quick fix, if there is one. Apply the fix with <kbd>Enter</kbd>.\n* <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>L</kbd> Reformat your LaTeX.\n* <kbd>Ctrl</kbd>+<kbd>K</kbd> Commit and push changes.\n* <kbd>Ctrl</kbd>+<kbd>T</kbd> Pull changes.\n\nAny suggestions for improvements of the installation instructions, however small? Please let us know at [gitter](https://gitter.im/TeXiFy-IDEA)!\n\n## <a name="equation-preview">Equation preview and TikZ Preview</a>\n\nYou can use the Equation Preview by making sure your cursor is in a math environment and clicking the Tools | LaTeX | Preview Equation menu, or using <kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>X</kbd>.\nYou can use the TikZ Preview by placing your cursor in a `tikzpicture` environment and click the Tools | LaTeX | Preview TikZ Picture, or using <kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>Y</kbd>.\nIt works by putting your equation or TikZ picture in a new temporary (fairly minimal) document and compiling that, so custom commands and packages from your document will not be taken into account, but it ensures the preview is really fast.\nThe TikZ Preview will take TikZ and pgf libraries into account.\n\nThe current implementation of the Equation Preview was contributed by Sergei Izmailov and requires external dependencies, for which installation instructions follow.\n\n### Instructions for Linux\n\n* Install Inkscape from [inkscape.org/release](https://inkscape.org/release).\n* Install the `pdf2svg` package for your distro, for example on Ubuntu with `sudo apt-get install pdf2svg` or on Arch Linux with `sudo pacman -S pdf2svg`.\n\n### Instructions for Windows\n* Install Inkscape from [inkscape.org/release](https://inkscape.org/release), suppose you install it in `C:\\Program Files\\Inkscape`.\n* Install pdf2svg from [github.com/textext/pdf2svg/releases](https://github.com/textext/pdf2svg/releases), suppose you install it in `C:\\Program Files\\pdf2svg`.\n* Add both `C:\\Program Files\\Inkscape` and `C:\\Program Files\\pdf2svg` to your PATH environment variable, for example by searching for Environment Variables on your computer, clicking \'Edit the system environment variables\', clicking \'Environment Variables\', and under System variables find the one named Path, edit it and insert the paths here. Make sure the paths are separated by a `;`.\n* Reboot your system.\n\n## Alpha channel: subscribing to the very latest features\n\nThis plugin also has an alpha channel besides the default stable channel.\nThe alpha channel contains the latest build with the latest features available, and is updated much more frequently than the stable channel.\nIt is used for testing features before they are released in the stable channel, so alpha versions of the plugin may be more unstable.\n\n#### Subscribing to the alpha channel\n\nMore detailed information is at https://www.jetbrains.com/help/idea/managing-plugins.html#repos but we will quickly summarize the steps.\n* Uninstall the plugin\n* Subscribe to the alpha channel by going to Settings | Plugins | gear icon | Manage Plugin Repositories | plus icon, then use the url https://plugins.jetbrains.com/plugins/alpha/list\n* Install the plugin by going to Marketplace and searching for `TeXiFy-IDEA`, you should see the version next to the name is the alpha version.\n\n## <a name="build-from-source">Building from source using IntelliJ</a>\n\n#### I know what I\'m doing\n\n* This project uses gradle. Make a new project from existing sources and import the project. Done.\n\n#### I have no idea what I\'m doing\n\nIt is assumed that git, IntelliJ, java and LaTeX are installed. If not, try the normal [installation instructions](#installation-instructions) first.\n* Make a new project from version control if you don\'t have it yet downloaded, or from existing sources if you have.\n* On the GitHub [home page](https://github.com/Hannah-Sten/TeXiFy-IDEA) of TeXiFy click \'clone or download\' and copy the url to Git Repository Url.\n* If the project opens and you get a popup \'Import Gradle project\', click that.\n* If you are prompted to open the `build.gradle` file, do so.\n* Select \'Use auto-import\'.\n* Thank Gradle that you\'re done now!\n* Check that in Settings - Build, Execution, Deployment - Compiler - Kotlin Compiler the Target JVM version is set correctly, currently it should be 1.8. If you encounter an error like `Kotlin: Cannot inline bytecode built with JVM target 1.8 into bytecode that is being built with JVM target 1.6.` when building, you need to look here.\n* Test it worked by executing the \'build\' task in Tasks - build - build.\n* You can ignore deprecation warnings in the build output.\n* If something doesn\'t work, try looking at the [FAQ](#FAQ) first.\n\n#### To run directly from source\n* Click the Gradle button on the right, the gradle task is located in Tasks - intellj - runIde. Right-click and run.\n* If at some time you cannot use this and you need to run from command line, use `gradlew runIde`.\n* Note how IntelliJ adds this task as a run configuration in the normal location if you have run it once, so you can use that one the next time.\n* The first time it will look like you are installing a new IntelliJ - don\'t worry, just click through it.\n* You can also debug against other IDEs. At the moment only PyCharm is set up, but it is easy to add others. You can use it by specifying the argument `-PusePycharm=true` in your runIde run configuration.\n* Use the option Tools - LaTeX - SumatraPDF - Configure Inverse Search to enable the option to go directly to the right line in your source file when you double-click in the pdf.\n* To make a new project but also to open existing `.tex` files, use New Project - LaTeX.\n* Compile a `.tex` file by clicking on the gutter icon next to `\\begin{document}` or create a custom run configuration using the drop-down menu.\n\n#### To build a zip which contains the plugin\n* Click the Gradle button on the right, the gradle task is located in Tasks - intellij - buildPlugin. Right-click and run. The zip will be in build/distributions.\n* Add the plugin to IntelliJ using Settings - Plugins - Install plugin from disk.\n* Use the option LaTeX - SumatraPDF - Configure Inverse Search to enable the option to go directly to the right line in your source file when you double-click in the pdf.\n\n#### To run tests\n* Click the Gradle button on the right, the gradle task is located in Tasks - verification - check. Right-click and run. Note that check includes test so it will run the tests.\n\n## <a name="FAQ">FAQ</a>\n\n#### What should my document structure look like?\n\nIn general you have a main file which contains the documentclass and the document environment (the `\\begin{document}` and `\\end{document}`).\nFrom here you can include other files which can then include even more files and so on.\nAn example is:\n\n```latex\n\\documentclass{exam}\n\n% Packages\n\\usepackage{amsthm}\n\n\\author{L.A.\\ TeX}\n\\title{Example document setup}\n\n% Possible other definitions, configurations etc. that you need\n\\theoremstyle{definition}\n\\newtheorem{theorem}{Theorem}\n\n% Document\n\\begin{document}\n\n    \\maketitle\n\n    \\section{Introduction}\\label{sec:introduction}\n    \\input{introduction}\n\n    \\section{Example theorems} \\label{sec:exampleTheorem}\n    \\input{example-theorems}\n\n\\end{document}\n```\n\nwhere the files `introduction.tex` and `example-theorems.tex` contain just the content, for example these could be the complete file contents of `introduction.tex`:\n\n```latex\n\\begin{theorem}\n    If the meanings of \'true\' and \'false\' were switched, then this sentence wouldn\'t be false.\n\\end{theorem}\n```\n\n#### How can I set-up shortcuts for e.g. `\\emph{}` or the itemize environment?\n\nYou can define a live template via File -> Settings... -> Editor -> Live Templates. For example, for the `itemize` environment, you could use the following template:\n\n```tex\n\\begin{itemize}\n    \\item $PARM1$\n\\end{itemize}\n```\n\nSet the template to be applicable in LaTeX files.\n\n![Screenshot of live template UI, showing the template text above along with an abbreviation of itemize and a description of \'Add itemize env\'. The macro is set to be \'Applicable in LaTeX\' and expands with the Tab key.](doc/macro.png)\n\nOnce the live template is created, close the Settings dialog. Use Edit -> Macros -> Start Macro Recording and enter the live template abbreviation. Finish recording the macro, and name it. Via Settings -> Keymap, assign the macro a key binding such as <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Shift</kbd>+<kbd>I</kbd>.\n\nNow, you can use the macro key binding and hit <kbd>Enter</kbd> to insert a new `itemize` environment with an item. The cursor will automatically move to the first `\\item`.\n\nFor commands, you can define templates for e.g. `\\emph{$PARM1$}`.\n\n#### The Equation Preview does not work\n\nMake sure you have installed the dependencies, instructions are in the [Equation Preview](#equation-preview) section.\n\n#### makeindex or bibtex not writing to file (`openout_any = p`)\nWhen you get during compilation the error\n```\nmakeindex: Not writing to /path/to/project/latexfile.ind (openout_any = p).\nCan\'t create output index file /path/to/project/latexfile.ind.\n```\nor\n```\nbibtex: Not writing to ../out/latexfile.blg (openout_any = p).\n```\nthis probably happens because you are trying to use makeindex or bibtex with a separate output directory. You should either disable the out directory in the run config or change the security setting in `texmf.cnf`, see [this tex.stackexchange.com answer](https://tex.stackexchange.com/questions/12686/how-do-i-run-bibtex-after-using-the-output-directory-flag-with-pdflatex-when-f/289336#289336).\n\n#### How to integrate a latex compiler other than pdflatex:\nMost tex distributions contain a commandline tool called [arara](https://github.com/cereda/arara).\nArara uses a small configuration in your main *.tex file\n\nFor example:\n\n     % arara: lualatex: {shell: yes,  action: nonstopmode}\n     % arara: biber\n     % arara: lualatex: {shell: yes,  action: nonstopmode}\n\nwhen you add these small code snippets and call\n\n    arara -v yourFavoritTexFileHere.tex\n\nArara calls lualatex biber and lualatex again. Any Jetbrains IDE allows you to add something they call "tools". There you can add the arara call and add a shortcut.\nArara pipes the full output from all subsequent commands, which is not all the time usefull to find errors. So I put the arara call into a small bash script and add a grep filter.\n\n    #!/usr/bin/env bash\n\n    arara thesis.tex -v | grep -C 1 -E "((E|e)rror|ERROR|SUCCESS|FAILURE|Undefined control sequence)"\n\n##### Alternative for integrating a latex compiler other than pdflatex:\nIn your run configuration, tick the box `select custom compiler executable path (required on Mac OS X)`.\nYou can now provide the path to any latex compiler. \nWhen using Windows and MiKTeX, these executables are located in \n\n    C:\\Program Files\\MiKTeX 2.9\\miktex\\bin\\x64\n\nor (in some cases)\n\n    C:\\Users\\user\\AppData\\Local\\Programs\\MiKTeX 2.9\\miktex\\bin\\x64\n    \nFor example, to use lualatex:\n\n    C:\\Program Files\\MiKTeX 2.9\\miktex\\bin\\x64\\lualatex.exe\n    \nYou can run this run configuration by pressing <kbd>Shift</kbd>+<kbd>F10</kbd> (on Windows), by clicking the play button, or by clicking the gutter icon.\n\n#### `Gtk-WARNING **: Unable to locate theme engine in module_path: "murrine"`\n\nIf you get this warning, it is not critical so you could ignore it but to solve it you can install the mentioned gtk engine, in this case Murrine.\nFor example on Arch Linux, install the `gtk-engine-murrine` package. Arch Linux sets the default theme to Adwaita, so install that with the `gnome-themes-extra` package.\nFor more information see [wiki.archlinux.org](https://wiki.archlinux.org/index.php/GTK+).\n\n#### `Unable to find method \'sun.misc.Unsafe.defineClass\'` or `Please provide the path to the Android SDK` when syncing Gradle\n\nThis probably means your Gradle cache is corrupt, delete (on Windows) `C:\\Users\\username\\.gradle\\caches` and `C:\\Users\\username\\.gradle\\wrapper\\dists` or (on Linux) `~/.gradle/caches` and `~/.gradle/wrapper/dists`, then reboot your system.\n\n#### `Error: java: package com.google.common.base does not exist`\n\n* Update IntelliJ (help - check for updates).\n* Update your IntelliJ SDK: go to Project Structure - SDKs.\n* Hit the plus in the middle column and select IntelliJ Platform Plugin SDK.\n* Select your IntelliJ installation directory (e.g. `C:\\Program Files (x86)\\JetBrains\\IntelliJ IDEA xxxx.x`). \n* Remove your old SDK. It is called \'IntelliJ IDEA IU-xxx\' where `xxx` is anything but the highest number. \n* Go to Project Structure - Project and select the new SDK.\n'