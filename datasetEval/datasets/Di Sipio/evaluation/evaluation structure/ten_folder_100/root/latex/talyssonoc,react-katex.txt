b'# react-katex\n\n[![Build Status](https://travis-ci.org/talyssonoc/react-katex.svg?branch=master)](https://travis-ci.org/talyssonoc/react-katex) [![Code Climate](https://codeclimate.com/github/talyssonoc/react-katex/badges/gpa.svg)](https://codeclimate.com/github/talyssonoc/react-katex) [![Coverage Status](https://coveralls.io/repos/github/talyssonoc/react-katex/badge.svg?branch=master)](https://coveralls.io/github/talyssonoc/react-katex?branch=master)\n\n> Display math expressions with [KaTeX](https://khan.github.io/KaTeX/) and React\n\n## Installation\n\n```sh\n  $ npm install react-katex\n  # or\n  $ yarn add react-katex\n```\n\n## Usage\n\n```jsx\nimport \'katex/dist/katex.min.css\';\nimport { InlineMath, BlockMath } from \'react-katex\';\n```\n\n### InlineMath\n\nDisplay math in the middle of the text.\n\n```jsx\n  var InlineMath = ReactKaTeX.InlineMath;\n\n  ReactDOM.render(<InlineMath math="\\\\int_0^\\\\infty x^2 dx"/>,\n                document.getElementById(\'math\'));\n\n  // or\n\n  ReactDOM.render(<InlineMath>\\int_0^\\infty x^2 dx</InlineMath>,\n                document.getElementById(\'math\'));\n```\n\nIt will be rendered like this:\n\n![Inline math](docs/inline.png)\n\n### BlockMath\n\nDisplay math in a separated block, with larger font and symbols.\n\n```jsx\n  var BlockMath = ReactKaTeX.BlockMath;\n\n  ReactDOM.render(<BlockMath math="\\\\int_0^\\\\infty x^2 dx"/>,\n                document.getElementById(\'math\'));\n\n  // or\n\n  ReactDOM.render(<BlockMath>\\int_0^\\infty x^2 dx</BlockMath>,\n                document.getElementById(\'math\'));\n```\n\nIt will be rendered like this:\n\n![Block math](docs/block.png)\n\n\n**Note:**<br>\nDon\'t forget to import KaTeX CSS file.\n```jsx\nimport \'katex/dist/katex.min.css\';\n```\n\n### Error handling\n\n#### Default error message\n\nBy default the error rendering is handled by KaTeX. You can optionally pass `errorColor` (defaults to `#cc0000`) as a prop:\n\n```jsx\nvar BlockMath = ReactKaTeX.BlockMath;\n\nReactDOM.render(\n  <BlockMath\n    math={\'\\\\int_0^\\\\infty x^2 dx \\\\inta\'}\n    errorColor={\'#cc0000\'}\n  />, document.getElementById(\'math\'));\n```\n\nThis will be rendered like so:\n\n![KaTeX error](docs/error.png)\n\n#### Custom error message\n\nIt\'s possible to handle parse errors using the prop `renderError`. This prop must be a function that receives the error object and returns what should be rendered when parsing fails:\n\n```jsx\nvar BlockMath = ReactKaTeX.BlockMath;\n  \nReactDOM.render(\n  <BlockMath\n    math="\\\\int_{"\n    renderError={(error) => {\n      return <b>Fail: {error.name}</b>\n    }}\n  />,\n  document.getElementById(\'math\'));\n\n// The code above will render \'<b>Fail: ParseError</b>\' because it\'s the value returned from `renderError`.\n```\n\nThis will render `<b>Fail: ParseError</b>`:\n\n![renderError](docs/rendererror.png)\n\n### Escaping expressions\n\nIn addition to using the `math` property, you can also quote as a child allowing the use of `{ }` in your expression.\n\n```jsx\nReactDOM.render(<BlockMath>{"\\\\frac{\\\\text{m}}{\\\\text{s}^2}"}</BlockMath>,\n                document.getElementById(\'math\'));\n```\n\nOr Multiline\n\n```jsx\nReactDOM.render(<BlockMath>{`\\\\frac{\\\\text{m}}\n{\\\\text{s}^2}`}</BlockMath>,\n                document.getElementById(\'math\'));\n```\n\nHowever, it can be annoying to escape backslashes. This can be circumvented with the `String.raw` tag on a template literal when using ES6.\n\n```jsx\nReactDOM.render(<BlockMath>{String.raw`\\frac{\\text{m}}{\\text{s}^2}`}</BlockMath>,\n                document.getElementById(\'math\'));\n```\n\nBackticks must be escaped with a backslash but would be passed to KaTeX as \\\\\\`. A tag can be created to replace \\\\\\` with \\`\n\n```jsx\nconst latex = (...a) => String.raw(...a).replace("\\\\`","`")\nReactDOM.render(<BlockMath>{latex`\\``}</BlockMath>,\n                document.getElementById(\'math\'));\n```\n\nYou can even do variable substitution\n\n```jsx\nconst top = "m";\nconst bottom = "s";\nReactDOM.render(<BlockMath>{String.raw`\\frac{\\text{${top}}}{\\text{${bottom}}^2}`}</BlockMath>,\n                document.getElementById(\'math\'));\n```\n'