b'# julia-vim\n\n<p align="center"><img src="logo.png" alt="julia-vim logo"/></p>\n\n[Julia] support for Vim.\n\n**[INSTALLATION INSTRUCTIONS]**\n\n[Julia]: http://julialang.org/\n[Installation instructions]: INSTALL.md\n\n## Complete documentation\n\nThe full documentation is available from Vim: after installation, you just need to type `:help julia-vim`.\n\nThe remainder of this README will only give an overview of some of the features:\n\n* [Latex-to-Unicode substitutions](#latex-to-unicode-substitutions)\n* [Block-wise movements and block text-objects](#block-wise-movements-and-block-text-objects)\n* [Changing syntax highlighting depending on the Julia version](#changing-syntax-highlighting-depending-on-the-julia-version)\n\n## LaTeX-to-Unicode substitutions\n\nThis plug-in adds some functionality to substitute LaTeX code sequences (e.g. `\\alpha`) with corresponding\nUnicode symbols (e.g. `\xce\xb1`). By default, these substitutions must be triggered explicitly by pressing the\n<kbd>Tab</kbd> key, as in the Julia command line (the REPL); however, an automatic, as-you-type mode can also\nbe activated, and a method based on keymap is also available.\n\nThis feature also works in command mode, e.g. when searching the files with the `/` or `?` commands, but the\nas-you-type mode is not available (the keymap-based version works though, and it also works with some Vim\ncommands like `f` and `t`).\n\nBy default, this feature is only active when editing Julia files. However, it can be also enabled with\nother file types, and even turned on/off on the fly regardless of the file type.\n\nThese features only work as described with Vim version 7.4 or higher. Tab completion can still be made\navailable on lower Vim versions, see below for more details.\n\nThe following sections provide details on these features. The complete documentation is provided by calling\n`:help julia-vim` from within Vim. A complete reference table of the available substitution can be\naccessed by calling `:help L2U-ref` from within Vim.\n\n### LaTeX-to-Unicode via Tab key\n\nThis plug-in adds a mapping to the <kbd>Tab</kbd> key which makes it behave like the Julia REPL, i.e. when\nthe cursor is at the end of a recognized LaTeX symbol (e.g. `\\alpha`) in insert mode, pressing\nthe <kbd>Tab</kbd> key will substitute it with the corresponding Unicode symbol (e.g. `\xce\xb1`). If a partial match\nis found (e.g. `\\al`), a list of possible completions is suggested (e.g. `\\aleph`, `\\allequal`,\n`\\alpha`), and it will be refined while you enter more characters; when only one match is left, pressing\n<kbd>Tab</kbd> will complete it and pressing it again will perform the substitution to Unicode.\n\nIf no suitable substitution is found, the action will fall back to whatever mapping was previously\ndefined: by default, inserting a literal `<Tab>` character, or invoking some other action if another\nplug-in is installed, e.g. [supertab] or [YouCompleteMe].\n\nNote that the [YouCompleteMe], [neocomplcache], [neocomplete] and [deoplete] plug-ins do not work well\nwith the suggestion of possible completions for partial matches, and therefore this feature is disabled\nif those plug-ins are detected.\n\nA literal tab can always be forced by using <kbd>CTRL-V</kbd> and then <kbd>Tab</kbd>.\n\nOn the Vim command line, e.g. when searching the file with the `/` or `?` commands, the feature is\nalso activated by <kbd>Tab</kbd>, but falls-back to the Vim built-in behavior if no suitable substitution\nis found: if you had defined a mapping for <kbd>Tab</kbd> in command mode, it will be overridden. This\ncan be prevented by choosing a different value for the mapping keys, see the full documentation.\n\nTo disable this mapping, you can use the command `:let g:latex_to_unicode_tab = 0`, e.g. by putting\nit into your `.vimrc` file. You can also change this setting from the Vim command-line, but you will\nalso need to give the command `:call LaTeXtoUnicode#Init()` for the change to take effect.\n\nEven when the mapping is disabled, the feature is still available (in insert mode) via the\nomnicompletion mechanism, i.e. by pressing <kbd>CTRL-X</kbd> and then <kbd>CTRL-O</kbd>.\n\nTo disable the suggestions of partial matches completions, use the command\n`:let g:latex_to_unicode_suggestions = 0`.\n\nIn general, suggestions try not to get in the way, and so if an exact match is detected (e.g. `\\ne`) when\n<kbd>Tab</kbd> is pressed, the substitution will be done even when there would be other symbols with the same prefix\n(e.g. `\\neg`). This behaviour can be changed by the command `:let g:latex_to_unicode_eager = 0`, in\nwhich case hitting <kbd>Tab</kbd> will first produce a suggestion list, and only pressing it again will trigger the\nsubstitution to Unicode.\n\n[supertab]: https://github.com/ervandew/supertab\n[YouCompleteMe]: https://github.com/Valloric/YouCompleteMe\n[neocomplcache]: https://github.com/Shougo/neocomplcache.vim\n[neocomplete]: https://github.com/Shougo/neocomplete.vim\n[deoplete]: https://github.com/Shougo/deoplete.nvim\n\n#### Using this feature on Vim versions lower than 7.4\n\nThe automatic remapping of the <kbd>Tab</kbd> key is not performed if Vim version is lower than 7.4. However, the\nfunctionality can still be used via the omnicompletion mechanism, i.e. by using <kbd>CTRL-X</kbd><kbd>CTRL-O</kbd>. You can\nmap this to some more convenient key combination, e.g. you may want to add something like this line to your\n`.vimrc` file:\n\n```\ninoremap <C-Tab> <C-X><C-O>\n```\n\nThis would map the functionality to <kbd>CTRL-Tab</kbd>. However, if you try to map this to <kbd>Tab</kbd>, you\'d only be\nable to use literal <kbd>Tab</kbd> by using <kbd>CTRL-V</kbd><kbd>Tab</kbd>.\n\n### LaTeX-to-Unicode as you type\n\nAn automatic substitution mode can be activated by using the command `:let g:latex_to_unicode_auto = 1`,\ne.g. by putting it into your `.vimrc` file. You can also change this setting from the Vim command-line, but\nyou will also need to give the command `:call LaTeXtoUnicode#Init()` for the change to take effect.\n\nIn this mode, symbols will be substituted as you type, as soon as some extra character appears after the symbol\nand a LaTeX sequence can unambiguously be identified.\n\nFor example, if you type `a \\ne b` the `\\ne` will be changed to `\xe2\x89\xa0` right after the space, before you input\nthe `b`.\n\nThis does not interfere with the <kbd>Tab</kbd> mapping discussed above. It only works in insert mode, and it\ndoesn\'t work with emojis.\n\nThis feature is not available with Vim versions lower then 7.4.\n\n### LaTeX-to-Unicode via keymap\n\nA different susbstitution mode based on keymaps can be activated with `:let g:latex_to_unicode_keymap = 1`,\ne.g. by putting it into your `.vimrc` file. This works similarly to the as-you-type method described above,\nbut it has the advantage that it works under more circumstances, e.g. in command-line mode when searching with\n`/` or `?`, and when using the `f` and `t` commands; plus it works with emojis too.\nThe main disadvantage is that you don\'t see the whole sequence as you\'re typing it, and you can\'t fix mistakes\nwith backspace, for example.\nAnother difference is that there is a timeout like for any other mapping.\nIn any case, it is possible to use this method in parallel with the other two methods, they don\'t interfere.\nSo if you have the <kbd>Tab</kbd> mapping (discussed above) activated, you still get to see completions and\nsuggestions. If you have the as-you-type substitution active, and you make a mistake, you can simply press\nbackspace and keep going, at least in insert mode, and so on.\n\nThis feature might with Vim versions lower then 7.4, but it hasn\'t been tested.\n\n### LaTeX-to-Unicode on other file types\n\nBy default, the LaTeX-to-Unicode substitutions are only active when editing Julia files. However, you can use\nthe variable `g:latex_to_unicode_file_types` to specify for which file types this feature is active by default.\nThe variable must be set to a string containing a pattern (a regular expression) which matches the desired file\ntypes, or to a list of such patterns. For example, to activate the feature on all file types, you could put\n`let g:latex_to_unicode_file_types = ".*"` in your `.vimrc` file.\nBe aware, however, that enabling the functionality overrides the `omnifunc` setting for that file type.\n\n### Enabling and disabling the LaTeX-to-Unicode functionality\n\nRegardless of the type of the file you are editing and of the `g:latex_to_unicode_file_types` setting, the\nLaTeX-to-Unicode substitutions can be enabled/disabled/toggled by calling the functions\n`LaTeXtoUnicode#Enable()`, `LaTeXtoUnicode#Disable()`, `LaTeXtoUnicode#Toggle()`. For example, you could use\nthe mappings:\n\n```\nnoremap <expr> <F7> LaTeXtoUnicode#Toggle()\ninoremap <expr> <F7> LaTeXtoUnicode#Toggle()\n```\n\nand then use the <kbd>F7</kbd> key to quickly turn the feature on and off.\n\n## Block-wise movements and block text-objects\n\nThis plug-in defines mappings to move around julia blocks (e.g. `if/end`, `function/end` etc.) and to\nmanipulate them as a whole (analogously to the standard `w`, `b` etc. commands to move on words, and to\nthe `aw`, `iw` commands which allow to manipulate them). These require the `matchit` plugin, which is usually\ndistributed with ViM but must be explicitly enabled, e.g. adding this to your `.vimrc` file:\n\n```vim\nruntime macros/matchit.vim\n```\n\nThe default mappings use `]]`, `][`, `[[`, `[]`, `]j`, `]J`, `[j`, and `[J` for the movements\nand `aj`, `ij` for the selections. These can be disabled collectively by setting `g:julia_blocks` to `0`,\nor they can be remapped and/or disabled individually by defining a `g:julia_blocks_mapping` variable.\nSee the documentation for details.\n\nNote that this feature requires Vim version 7.4 or higher.\n\n## Changing syntax highlighting depending on the Julia version\n\nThe plugin supports syntax highlighting different versions of Julia. By default, the highlighting scheme assumes\nthe latest stable release of Julia (currently, version 1.0; the plugin does not differentiate between 0.7 and 1.0),\nbut the previous one and the latest version under development are also supported. You can set a global default in\nyour `.vimrc`, e.g. if you follow Julia\'s master you can use:\n\n```\nlet g:default_julia_version = "devel"\n```\n\nor if you are still using Julia 0.6 you can use:\n\n```\nlet g:default_julia_version = "0.6"\n```\n\nYou can also switch version for a particular buffer, by using the `julia#set_syntax_version()` function, e.g.\nby typing in Vim:\n\n```\n:call julia#set_syntax_version("0.6")\n```\n'