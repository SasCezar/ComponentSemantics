b'<p align="center">\n  <img alt="tikzplotlib" src="https://nschloe.github.io/tikzplotlib/logo-tikzplotlib.svg" width="60%">\n</p>\n\n[![CircleCI](https://img.shields.io/circleci/project/github/nschloe/tikzplotlib/master.svg?style=flat-square)](https://circleci.com/gh/nschloe/tikzplotlib/tree/master)\n[![codecov](https://img.shields.io/codecov/c/github/nschloe/tikzplotlib.svg?style=flat-square)](https://codecov.io/gh/nschloe/tikzplotlib)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg?style=flat-square)](https://github.com/psf/black)\n[![Documentation Status](https://readthedocs.org/projects/tikzplotlib/badge/?version=latest&style=flat-square)](https://readthedocs.org/projects/tikzplotlib/?badge=latest)\n[![awesome](https://img.shields.io/badge/awesome-yes-brightgreen.svg?style=flat-square)](https://github.com/nschloe/tikzplotlib)\n[![PyPi Version](https://img.shields.io/pypi/v/tikzplotlib.svg?style=flat-square)](https://pypi.org/project/tikzplotlib)\n[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.1173089.svg?style=flat-square)](https://doi.org/10.5281/zenodo.1173089)\n[![GitHub stars](https://img.shields.io/github/stars/nschloe/tikzplotlib.svg?style=flat-square&logo=github&label=Stars&logoColor=white)](https://github.com/nschloe/tikzplotlib)\n[![PyPi downloads](https://img.shields.io/pypi/dm/tikzplotlib.svg?style=flat-square)](https://pypistats.org/packages/tikzplotlib)\n\nThis is tikzplotlib, a Python tool for converting matplotlib figures into\n[PGFPlots](https://www.ctan.org/pkg/pgfplots) ([PGF/TikZ](https://www.ctan.org/pkg/pgf))\nfigures like\n\n![](https://nschloe.github.io/tikzplotlib/example.png)\n\nfor native inclusion into LaTeX documents.\n\nThe output of tikzplotlib is in\n[PGFPlots](http://pgfplots.sourceforge.net/pgfplots.pdf), a LaTeX library that sits on\ntop of [PGF/TikZ](https://en.wikipedia.org/wiki/PGF/TikZ) and describes graphs in terms\nof axes, data etc. Consequently, the output of tikzplotlib\n\n  * retains more information,\n  * can be more easily understood, and\n  * is more easily editable\n\nthan [raw TikZ output](https://matplotlib.org/users/whats_new.html#pgf-tikz-backend).\nFor example, the matplotlib figure\n```python,test\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nplt.style.use("ggplot")\n\nt = np.arange(0.0, 2.0, 0.1)\ns = np.sin(2 * np.pi * t)\ns2 = np.cos(2 * np.pi * t)\nplt.plot(t, s, "o-", lw=4.1)\nplt.plot(t, s2, "o-", lw=4.1)\nplt.xlabel("time (s)")\nplt.ylabel("Voltage (mV)")\nplt.title("Simple plot $\\\\frac{\\\\alpha}{2}$")\nplt.grid(True)\n\nimport tikzplotlib\n\ntikzplotlib.save("test.tex")\n```\n(see above) gives\n```latex\n\\begin{tikzpicture}\n\n\\definecolor{color0}{rgb}{0.886274509803922,0.290196078431373,0.2}\n\\definecolor{color1}{rgb}{0.203921568627451,0.541176470588235,0.741176470588235}\n\n\\begin{axis}[\naxis background/.style={fill=white!89.80392156862746!black},\naxis line style={white},\ntick align=outside,\ntick pos=left,\ntitle={Simple plot $\\frac{\\alpha}{2}$},\nx grid style={white},\nxlabel={time (s)},\nxmajorgrids,\nxmin=-0.095, xmax=1.995,\ny grid style={white},\nylabel={Voltage (mV)},\nymajorgrids,\nymin=-1.1, ymax=1.1\n]\n\\addplot [line width=1.64pt, color0, mark=*, mark size=3, mark options={solid}]\ntable {%\n0 0\n0.1 0.587785252292473\n% [...]\n1.9 -0.587785252292473\n};\n\\addplot [line width=1.64pt, color1, mark=*, mark size=3, mark options={solid}]\ntable {%\n0 1\n0.1 0.809016994374947\n% [...]\n1.9 0.809016994374947\n};\n\\end{axis}\n\n\\end{tikzpicture}\n```\n(Use `get_tikz_code()` instead of `save()` if you want the code as a string.)\n\nTweaking the plot is straightforward and can be done as part of your LaTeX work flow.\n[The fantastic PGFPlots manual](http://pgfplots.sourceforge.net/pgfplots.pdf) contains\ngreat examples of how to make your plot look even better.\n\nOf course, not all figures produced by matplotlib can be converted without error.\nNotably, [3D plots don\'t work](https://github.com/matplotlib/matplotlib/issues/7243).\n\n### Installation\n\ntikzplotlib is [available from the Python Package\nIndex](https://pypi.org/project/tikzplotlib/), so simply type\n```\npip3 install tikzplotlib --user\n```\nto install/update.\n\n\n### Usage\n\n1. Generate your matplotlib plot as usual.\n\n2. Instead of `pyplot.show()`, invoke tikzplotlib by\n    ```python\n    import tikzplotlib\n    tikzplotlib.save("mytikz.tex")\n    ```\n   to store the TikZ file as `mytikz.tex`.\n\n3. Add the contents of `mytikz.tex` into your LaTeX source code. A convenient way of\n   doing so is via\n    ```latex\n    \\input{/path/to/mytikz.tex}\n    ```\n   Also make sure that the packages for PGFPlots and proper Unicode support and are\n   included in the header of your document:\n    ```latex\n    \\usepackage[utf8]{inputenc}\n    \\usepackage{fontspec}  % optional\n    \\usepackage{pgfplots}\n    \\pgfplotsset{compat=newest}\n    \\usepgfplotslibrary{groupplots}\n    \\usepgfplotslibrary{dateplot}\n    ```\n\n### Contributing\n\nIf you experience bugs, would like to contribute, have nice examples of what\ntikzplotlib can do, or if you are just looking for more information, then please\nvisit [tikzplotlib\'s GitHub page](https://github.com/nschloe/tikzplotlib).\n\n\n### Testing\n\ntikzplotlib has automatic unit testing to make sure that the software doesn\'t\naccidentally get worse over time. In `test/`, a number of test cases are specified.\nThose run through tikzplotlib and compare the output with a previously stored\nreference TeX file.\n\nTo run the tests, just check out this repository and type\n```\npytest\n```\n\n### License\n\ntikzplotlib is published under the [MIT license](https://en.wikipedia.org/wiki/MIT_License).\n'