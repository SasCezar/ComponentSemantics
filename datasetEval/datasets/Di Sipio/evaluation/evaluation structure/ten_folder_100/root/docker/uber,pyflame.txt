b"# Pyflame: A Ptracing Profiler For Python\n\n[![Build Status](https://api.travis-ci.org/uber/pyflame.svg?branch=master)](https://travis-ci.org/uber/pyflame) [![Docs Status](https://readthedocs.org/projects/pyflame/badge/?version=latest)](http://pyflame.readthedocs.io/en/latest/?badge=latest) [![COPR Status](https://copr.fedorainfracloud.org/coprs/eklitzke/pyflame/package/pyflame/status_image/last_build.png)](https://copr.fedorainfracloud.org/coprs/eklitzke/pyflame/)\n\nPyflame is a high performance profiling tool that\ngenerates [flame graphs](http://www.brendangregg.com/flamegraphs.html) for\nPython. Pyflame is implemented in C++, and uses the\nLinux [ptrace(2)](http://man7.org/linux/man-pages/man2/ptrace.2.html) system\ncall to collect profiling information. It can take snapshots of the Python call\nstack without explicit instrumentation, meaning you can profile a program\nwithout modifying its source code. Pyflame is capable of profiling embedded\nPython interpreters like [uWSGI](https://uwsgi-docs.readthedocs.io/en/latest/).\nIt fully supports profiling multi-threaded Python programs.\n\nPyflame usually introduces significantly less overhead than the builtin\n`profile` (or `cProfile`) modules, and emits richer profiling data. The\nprofiling overhead is low enough that you can use it to profile live processes\nin production.\n\n**Full Documentation:** https://pyflame.readthedocs.io\n\n![pyflame](https://cloud.githubusercontent.com/assets/2734/17949703/8ef7d08c-6a0b-11e6-8bbd-41f82086d862.png)\n\n## Quickstart\n\n### Building And Installing\n\nFor Debian/Ubuntu, install the following:\n\n```bash\n# Install build dependencies on Debian or Ubuntu.\nsudo apt-get install autoconf automake autotools-dev g++ pkg-config python-dev python3-dev libtool make\n```\n\nOnce you have the build dependencies installed:\n\n```bash\n./autogen.sh\n./configure\nmake\n```\n\nThe `make` command will produce an executable at `src/pyflame` that you can run\nand use.\n\nOptionally, if you have `virtualenv` installed, you can test the executable you\nproduced using `make check`.\n\n### Using Pyflame\n\nThe full documentation for using Pyflame\nis [here](https://pyflame.readthedocs.io/en/latest/usage.html). But\nhere's a quick guide:\n\n```bash\n# Attach to PID 12345 and profile it for 1 second\npyflame -p 12345\n\n# Attach to PID 768 and profile it for 5 seconds, sampling every 0.01 seconds\npyflame -s 5 -r 0.01 -p 768\n\n# Run py.test against tests/, emitting sample data to prof.txt\npyflame -o prof.txt -t py.test tests/\n```\n\nIn all of these cases you will get flame graph data on stdout (or to a file if\nyou used `-o`). This data is in the format expected by `flamegraph.pl`, which\nyou can find [here](https://github.com/brendangregg/FlameGraph).\n\n## FAQ\n\nThe full FAQ is [here](https://pyflame.readthedocs.io/en/latest/faq.html).\n\n### What's The Deal With (idle) Time?\n\nFull\nanswer\n[here](https://pyflame.readthedocs.io/en/latest/faq.html#what-is-idle-time).\ntl;dr: use the `-x` flag to suppress (idle) output.\n\n### What About These Ptrace Errors?\n\nSee [here](https://pyflame.readthedocs.io/en/latest/faq.html#what-are-these-ptrace-permissions-errors).\n\n### How Do I Profile Threaded Applications?\n\nUse the `--threads` option.\n\n### Is There A Way To Just Dump Stack Traces?\n\nYes, use the `-d` option.\n"