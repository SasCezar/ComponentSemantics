b'![gVisor](g3doc/logo.png)\n\n[![Status](https://storage.googleapis.com/gvisor-build-badges/build.svg)](https://storage.googleapis.com/gvisor-build-badges/build.html)\n[![gVisor chat](https://badges.gitter.im/gvisor/community.png)](https://gitter.im/gvisor/community)\n\n## What is gVisor?\n\n**gVisor** is a user-space kernel, written in Go, that implements a substantial\nportion of the Linux system surface. It includes an\n[Open Container Initiative (OCI)][oci] runtime called `runsc` that provides an\nisolation boundary between the application and the host kernel. The `runsc`\nruntime integrates with Docker and Kubernetes, making it simple to run sandboxed\ncontainers.\n\n## Why does gVisor exist?\n\nContainers are not a [**sandbox**][sandbox]. While containers have\nrevolutionized how we develop, package, and deploy applications, running\nuntrusted or potentially malicious code without additional isolation is not a\ngood idea. The efficiency and performance gains from using a single, shared\nkernel also mean that container escape is possible with a single vulnerability.\n\ngVisor is a user-space kernel for containers. It limits the host kernel surface\naccessible to the application while still giving the application access to all\nthe features it expects. Unlike most kernels, gVisor does not assume or require\na fixed set of physical resources; instead, it leverages existing host kernel\nfunctionality and runs as a normal user-space process. In other words, gVisor\nimplements Linux by way of Linux.\n\ngVisor should not be confused with technologies and tools to harden containers\nagainst external threats, provide additional integrity checks, or limit the\nscope of access for a service. One should always be careful about what data is\nmade available to a container.\n\n## Documentation\n\nUser documentation and technical architecture, including quick start guides, can\nbe found at [gvisor.dev][gvisor-dev].\n\n## Installing from source\n\ngVisor currently requires x86\\_64 Linux to build, though support for other\narchitectures may become available in the future.\n\n### Requirements\n\nMake sure the following dependencies are installed:\n\n*   Linux 4.14.77+ ([older linux][old-linux])\n*   [git][git]\n*   [Bazel][bazel] 0.28.0+\n*   [Python][python]\n*   [Docker version 17.09.0 or greater][docker]\n*   Gold linker (e.g. `binutils-gold` package on Ubuntu)\n\n### Building\n\nBuild and install the `runsc` binary:\n\n```\nbazel build runsc\nsudo cp ./bazel-bin/runsc/linux_amd64_pure_stripped/runsc /usr/local/bin\n```\n\nIf you don\'t want to install bazel on your system, you can build runsc in a\nDocker container:\n\n```\nmake runsc\nsudo cp ./bazel-bin/runsc/linux_amd64_pure_stripped/runsc /usr/local/bin\n```\n\n### Testing\n\nThe test suite can be run with Bazel:\n\n```\nbazel test //...\n```\n\nor in a Docker container:\n\n```\nmake unit-tests\nmake tests\n```\n\n### Using remote execution\n\nIf you have a [Remote Build Execution][rbe] environment, you can use it to speed\nup build and test cycles.\n\nYou must authenticate with the project first:\n\n```\ngcloud auth application-default login --no-launch-browser\n```\n\nThen invoke bazel with the following flags:\n\n```\n--config=remote\n--project_id=$PROJECT\n--remote_instance_name=projects/$PROJECT/instances/default_instance\n```\n\nYou can also add those flags to your local ~/.bazelrc to avoid needing to\nspecify them each time on the command line.\n\n### Using `go get`\n\nThis project uses [bazel][bazel] to build and manage dependencies. A synthetic\n`go` branch is maintained that is compatible with standard `go` tooling for\nconvenience.\n\nFor example, to build `runsc` directly from this branch:\n\n```\necho "module runsc" > go.mod\nGO111MODULE=on go get gvisor.dev/gvisor/runsc@go\nCGO_ENABLED=0 GO111MODULE=on go install gvisor.dev/gvisor/runsc\n```\n\nNote that this branch is supported in a best effort capacity, and direct\ndevelopment on this branch is not supported. Development should occur on the\n`master` branch, which is then reflected into the `go` branch.\n\n## Community & Governance\n\nThe governance model is documented in our [community][community] repository.\n\nThe [gvisor-users mailing list][gvisor-users-list] and\n[gvisor-dev mailing list][gvisor-dev-list] are good starting points for\nquestions and discussion.\n\n## Security Policy\n\nSee [SECURITY.md](SECURITY.md).\n\n## Contributing\n\nSee [Contributing.md](CONTRIBUTING.md).\n\n[bazel]: https://bazel.build\n[community]: https://gvisor.googlesource.com/community\n[docker]: https://www.docker.com\n[git]: https://git-scm.com\n[gvisor-users-list]: https://groups.google.com/forum/#!forum/gvisor-users\n[gvisor-dev-list]: https://groups.google.com/forum/#!forum/gvisor-dev\n[oci]: https://www.opencontainers.org\n[old-linux]: https://gvisor.dev/docs/user_guide/networking/#gso\n[python]: https://python.org\n[rbe]: https://blog.bazel.build/2018/10/05/remote-build-execution.html\n[sandbox]: https://en.wikipedia.org/wiki/Sandbox_(computer_security)\n[gvisor-dev]: https://gvisor.dev\n'