b'[![Build Status](https://travis-ci.org/JrCs/docker-letsencrypt-nginx-proxy-companion.svg?branch=master)](https://travis-ci.org/JrCs/docker-letsencrypt-nginx-proxy-companion)\n[![GitHub release](https://img.shields.io/github/release/jrcs/docker-letsencrypt-nginx-proxy-companion.svg)](https://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/releases)\n[![Image info](https://images.microbadger.com/badges/image/jrcs/letsencrypt-nginx-proxy-companion.svg)](https://hub.docker.com/r/jrcs/letsencrypt-nginx-proxy-companion "Click to view the image on Docker Hub")\n[![Docker stars](https://img.shields.io/docker/stars/jrcs/letsencrypt-nginx-proxy-companion.svg)](https://hub.docker.com/r/jrcs/letsencrypt-nginx-proxy-companion "Click to view the image on Docker Hub")\n[![Docker pulls](https://img.shields.io/docker/pulls/jrcs/letsencrypt-nginx-proxy-companion.svg)](https://hub.docker.com/r/jrcs/letsencrypt-nginx-proxy-companion "Click to view the image on Docker Hub")\n\n**letsencrypt-nginx-proxy-companion** is a lightweight companion container for [**nginx-proxy**](https://github.com/jwilder/nginx-proxy).\n\nIt handles the automated creation, renewal and use of Let\'s Encrypt certificates for proxyed Docker containers.\n\nPlease note that **letsencrypt-nginx-proxy-companion** no longer supports ACME v1 endpoints. The last tagged version that supports ACME v1 is [v1.11](https://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/releases/tag/v1.11.2)\n\n### Features:\n* Automated creation/renewal of Let\'s Encrypt (or other ACME CAs) certificates using [**simp_le**](https://github.com/zenhack/simp_le).\n* Let\'s Encrypt / ACME domain validation through `http-01` challenge only.\n* Automated update and reload of nginx config on certificate creation/renewal.\n* Support creation of Multi-Domain (SAN) Certificates.\n* Creation of a Strong Diffie-Hellman Group at startup.\n* Work with all versions of docker.\n\n### Requirements:\n* Your host **must** be publicly reachable on **both** port `80` and `443`.\n* Check your firewall rules and **do not attempt to block port `80`** as that will prevent `http-01` challenges from completing.\n* For the same reason, you can\'t use nginx-proxy\'s [`HTTPS_METHOD=nohttp`](https://github.com/jwilder/nginx-proxy#how-ssl-support-works).\n* The (sub)domains you want to issue certificates for must correctly resolve to the host.\n* Your DNS provider must [answer correctly to CAA record requests](https://letsencrypt.org/docs/caa/).\n* If your (sub)domains have AAAA records set, the host must be publicly reachable over IPv6 on port `80` and `443`.\n\n![schema](https://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/blob/master/schema.png)\n\n## Basic usage (with the nginx-proxy container)\n\nThree writable volumes must be declared on the **nginx-proxy** container so that they can be shared with the **letsencrypt-nginx-proxy-companion** container:\n\n* `/etc/nginx/certs` to store certificates, private keys and ACME account keys (readonly for the **nginx-proxy** container).\n* `/etc/nginx/vhost.d` to change the configuration of vhosts (required so the CA may access `http-01` challenge files).\n* `/usr/share/nginx/html` to write `http-01` challenge files.\n\nExample of use:\n\n### Step 1 - nginx-proxy\n\nStart **nginx-proxy** with the three additional volumes declared:\n\n```shell\n$ docker run --detach \\\n    --name nginx-proxy \\\n    --publish 80:80 \\\n    --publish 443:443 \\\n    --volume /etc/nginx/certs \\\n    --volume /etc/nginx/vhost.d \\\n    --volume /usr/share/nginx/html \\\n    --volume /var/run/docker.sock:/tmp/docker.sock:ro \\\n    jwilder/nginx-proxy\n```\n\nBinding the host docker socket (`/var/run/docker.sock`) inside the container to `/tmp/docker.sock` is a requirement of **nginx-proxy**.\n\n### Step 2 - letsencrypt-nginx-proxy-companion\n\nStart the **letsencrypt-nginx-proxy-companion** container, getting the volumes from **nginx-proxy** with `--volumes-from`:\n\n```shell\n$ docker run --detach \\\n    --name nginx-proxy-letsencrypt \\\n    --volumes-from nginx-proxy \\\n    --volume /var/run/docker.sock:/var/run/docker.sock:ro \\\n    --env "DEFAULT_EMAIL=mail@yourdomain.tld" \\\n    jrcs/letsencrypt-nginx-proxy-companion\n```\n\nThe host docker socket has to be bound inside this container too, this time to `/var/run/docker.sock`.\n\nAlbeit **optional**, it is **recommended** to provide a valid default email address through the `DEFAULT_EMAIL` environment variable, so that Let\'s Encrypt can warn you about expiring certificates and allow you to recover your account.\n\n### Step 3 - proxyed container(s)\n\nOnce both **nginx-proxy** and **letsencrypt-nginx-proxy-companion** containers are up and running, start any container you want proxyed with environment variables `VIRTUAL_HOST` and `LETSENCRYPT_HOST` both set to the domain(s) your proxyed container is going to use.\n\n[`VIRTUAL_HOST`](https://github.com/jwilder/nginx-proxy#usage) control proxying by **nginx-proxy** and `LETSENCRYPT_HOST` control certificate creation and SSL enabling by **letsencrypt-nginx-proxy-companion**.\n\nCertificates will only be issued for containers that have both `VIRTUAL_HOST` and `LETSENCRYPT_HOST` variables set to domain(s) that correctly resolve to the host, provided the host is publicly reachable.\n\n```shell\n$ docker run --detach \\\n    --name your-proxyed-app \\\n    --env "VIRTUAL_HOST=subdomain.yourdomain.tld" \\\n    --env "LETSENCRYPT_HOST=subdomain.yourdomain.tld" \\\n    nginx\n```\n\nThe containers being proxied must expose the port to be proxied, either by using the `EXPOSE` directive in their Dockerfile or by using the `--expose` flag to `docker run` or `docker create`.\n\nIf the proxyed container listen on and expose another port than the default `80`, you can force **nginx-proxy** to use this port with the [`VIRTUAL_PORT`](https://github.com/jwilder/nginx-proxy#multiple-ports) environment variable.\n\nExample using [Grafana](https://hub.docker.com/r/grafana/grafana/) (expose and listen on port 3000):\n\n```shell\n$ docker run --detach \\\n    --name grafana \\\n    --env "VIRTUAL_HOST=othersubdomain.yourdomain.tld" \\\n    --env "VIRTUAL_PORT=3000" \\\n    --env "LETSENCRYPT_HOST=othersubdomain.yourdomain.tld" \\\n    --env "LETSENCRYPT_EMAIL=mail@yourdomain.tld" \\\n    grafana/grafana\n```\n\nRepeat [Step 3](#step-3---proxyed-containers) for any other container you want to proxy.\n\n## Additional documentation\n\nPlease check the [docs section](https://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/tree/master/docs) or the [project\'s wiki](https://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion/wiki).\n'