b'[![Linux Build Status](https://travis-ci.org/containernetworking/cni.svg?branch=master)](https://travis-ci.org/containernetworking/cni)\n[![Windows Build Status](https://ci.appveyor.com/api/projects/status/wtrkou8oow7x533e/branch/master?svg=true)](https://ci.appveyor.com/project/cni-bot/cni/branch/master)\n[![Coverage Status](https://coveralls.io/repos/github/containernetworking/cni/badge.svg?branch=master)](https://coveralls.io/github/containernetworking/cni?branch=master)\n\n![CNI Logo](logo.png)\n\n---\n\n# CNI at KubeCon / CloudNativeCon\n\nThe CNI maintainers are hosting two sessions at KubeCon / CloudNativeCon 2019:\n\n- [Introduction to CNI](https://kccncna19.sched.com/event/Uaif/introduction-to-cni-the-container-network-interface-project-bryan-boreham-weaveworks-dan-williams-red-hat)\n- [CNI deep dive](https://kccncna19.sched.com/event/Uaga/deep-dive-cni-bryan-boreham-weaveworks-dan-williams-red-hat)\n\n---\n\n# CNI Slack\n\nThe CNI slack has been sunsetted - please join us in #cni and #cni-dev on the [CNCF slack](https://slack.cncf.io/)\n\n\n---\n\n# CNI - the Container Network Interface\n\n## What is CNI?\n\nCNI (_Container Network Interface_), a [Cloud Native Computing Foundation](https://cncf.io) project, consists of a specification and libraries for writing plugins to configure network interfaces in Linux containers, along with a number of supported plugins.\nCNI concerns itself only with network connectivity of containers and removing allocated resources when the container is deleted.\nBecause of this focus, CNI has a wide range of support and the specification is simple to implement.\n\nAs well as the [specification](SPEC.md), this repository contains the Go source code of a [library for integrating CNI into applications](libcni) and an [example command-line tool](cnitool) for executing CNI plugins.  A [separate repository contains reference plugins](https://github.com/containernetworking/plugins) and a template for making new plugins.\n\nThe template code makes it straight-forward to create a CNI plugin for an existing container networking project.\nCNI also makes a good framework for creating a new container networking project from scratch.\n\n## Why develop CNI?\n\nApplication containers on Linux are a rapidly evolving area, and within this area networking is not well addressed as it is highly environment-specific.\nWe believe that many container runtimes and orchestrators will seek to solve the same problem of making the network layer pluggable.\n\nTo avoid duplication, we think it is prudent to define a common interface between the network plugins and container execution: hence we put forward this specification, along with libraries for Go and a set of plugins.\n\n## Who is using CNI?\n### Container runtimes\n- [rkt - container engine](https://coreos.com/blog/rkt-cni-networking.html)\n- [Kubernetes - a system to simplify container operations](https://kubernetes.io/docs/admin/network-plugins/)\n- [OpenShift - Kubernetes with additional enterprise features](https://github.com/openshift/origin/blob/master/docs/openshift_networking_requirements.md)\n- [Cloud Foundry - a platform for cloud applications](https://github.com/cloudfoundry-incubator/cf-networking-release)\n- [Apache Mesos - a distributed systems kernel](https://github.com/apache/mesos/blob/master/docs/cni.md)\n- [Amazon ECS - a highly scalable, high performance container management service](https://aws.amazon.com/ecs/)\n- [Singularity - container platform optimized for HPC, EPC, and AI](https://github.com/sylabs/singularity)\n- [OpenSVC - orchestrator for legacy and containerized application stacks](https://docs.opensvc.com/latest/fr/agent.configure.cni.html)\n\n### 3rd party plugins\n- [Project Calico - a layer 3 virtual network](https://github.com/projectcalico/calico-cni)\n- [Weave - a multi-host Docker network](https://github.com/weaveworks/weave)\n- [Contiv Networking - policy networking for various use cases](https://github.com/contiv/netplugin)\n- [SR-IOV](https://github.com/hustcat/sriov-cni)\n- [Cilium - BPF & XDP for containers](https://github.com/cilium/cilium)\n- [Infoblox - enterprise IP address management for containers](https://github.com/infobloxopen/cni-infoblox)\n- [Multus - a Multi plugin](https://github.com/Intel-Corp/multus-cni)\n- [Romana - Layer 3 CNI plugin supporting network policy for Kubernetes](https://github.com/romana/kube)\n- [CNI-Genie - generic CNI network plugin](https://github.com/Huawei-PaaS/CNI-Genie)\n- [Nuage CNI - Nuage Networks SDN plugin for network policy kubernetes support ](https://github.com/nuagenetworks/nuage-cni)\n- [Silk - a CNI plugin designed for Cloud Foundry](https://github.com/cloudfoundry-incubator/silk)\n- [Linen - a CNI plugin designed for overlay networks with Open vSwitch and fit in SDN/OpenFlow network environment](https://github.com/John-Lin/linen-cni)\n- [Vhostuser - a Dataplane network plugin - Supports OVS-DPDK & VPP](https://github.com/intel/vhost-user-net-plugin)\n- [Amazon ECS CNI Plugins - a collection of CNI Plugins to configure containers with Amazon EC2 elastic network interfaces (ENIs)](https://github.com/aws/amazon-ecs-cni-plugins)\n- [Bonding CNI - a Link aggregating plugin to address failover and high availability network](https://github.com/Intel-Corp/bond-cni)\n- [ovn-kubernetes - an container network plugin built on Open vSwitch (OVS) and Open Virtual Networking (OVN) with support for both Linux and Windows](https://github.com/openvswitch/ovn-kubernetes)\n- [Juniper Contrail](https://www.juniper.net/cloud) / [TungstenFabric](https://tungstenfabric.io) -  Provides overlay SDN solution, delivering multicloud networking, hybrid cloud networking, simultaneous overlay-underlay support, network policy enforcement, network isolation, service chaining and flexible load balancing\n- [Knitter - a CNI plugin supporting multiple networking for Kubernetes](https://github.com/ZTE/Knitter)\n- [DANM - a CNI-compliant networking solution for TelCo workloads running on Kubernetes](https://github.com/nokia/danm)\n- [VMware NSX \xe2\x80\x93 a CNI plugin that enables automated NSX L2/L3 networking and L4/L7 Load Balancing; network isolation at the pod, node, and cluster level; and zero-trust security policy for your Kubernetes cluster.](https://docs.vmware.com/en/VMware-NSX-T/2.2/com.vmware.nsxt.ncp_kubernetes.doc/GUID-6AFA724E-BB62-4693-B95C-321E8DDEA7E1.html)\n- [cni-route-override - a meta CNI plugin that override route information](https://github.com/redhat-nfvpe/cni-route-override)\n- [Terway - a collection of CNI Plugins based on alibaba cloud VPC/ECS network product](https://github.com/AliyunContainerService/terway)\n- [Cisco ACI CNI - for on-prem and cloud container networking with consistent policy and security model.](https://github.com/noironetworks/aci-containers)\n\nThe CNI team also maintains some [core plugins in a separate repository](https://github.com/containernetworking/plugins).\n\n\n## Contributing to CNI\n\nWe welcome contributions, including [bug reports](https://github.com/containernetworking/cni/issues), and code and documentation improvements.\nIf you intend to contribute to code or documentation, please read [CONTRIBUTING.md](CONTRIBUTING.md). Also see the [contact section](#contact) in this README.\n\n## How do I use CNI?\n\n### Requirements\n\nThe CNI spec is language agnostic.  To use the Go language libraries in this repository, you\'ll need a recent version of Go.  You can find the Go versions covered by our [automated tests](https://travis-ci.org/containernetworking/cni/builds) in [.travis.yaml](.travis.yml).\n\n### Reference Plugins\n\nThe CNI project maintains a set of [reference plugins](https://github.com/containernetworking/plugins) that implement the CNI specification.\nNOTE: the reference plugins used to live in this repository but have been split out into a [separate repository](https://github.com/containernetworking/plugins) as of May 2017.\n\n### Running the plugins\n\nAfter building and installing the [reference plugins](https://github.com/containernetworking/plugins), you can use the `priv-net-run.sh` and `docker-run.sh` scripts in the `scripts/` directory to exercise the plugins.\n\n**note - priv-net-run.sh depends on `jq`**\n\nStart out by creating a netconf file to describe a network:\n\n```bash\n$ mkdir -p /etc/cni/net.d\n$ cat >/etc/cni/net.d/10-mynet.conf <<EOF\n{\n\t"cniVersion": "0.2.0",\n\t"name": "mynet",\n\t"type": "bridge",\n\t"bridge": "cni0",\n\t"isGateway": true,\n\t"ipMasq": true,\n\t"ipam": {\n\t\t"type": "host-local",\n\t\t"subnet": "10.22.0.0/16",\n\t\t"routes": [\n\t\t\t{ "dst": "0.0.0.0/0" }\n\t\t]\n\t}\n}\nEOF\n$ cat >/etc/cni/net.d/99-loopback.conf <<EOF\n{\n\t"cniVersion": "0.2.0",\n\t"name": "lo",\n\t"type": "loopback"\n}\nEOF\n```\n\nThe directory `/etc/cni/net.d` is the default location in which the scripts will look for net configurations.\n\nNext, build the plugins:\n\n```bash\n$ cd $GOPATH/src/github.com/containernetworking/plugins\n$ ./build_linux.sh # or build_windows.sh\n```\n\nFinally, execute a command (`ifconfig` in this example) in a private network namespace that has joined the `mynet` network:\n\n```bash\n$ CNI_PATH=$GOPATH/src/github.com/containernetworking/plugins/bin\n$ cd $GOPATH/src/github.com/containernetworking/cni/scripts\n$ sudo CNI_PATH=$CNI_PATH ./priv-net-run.sh ifconfig\neth0      Link encap:Ethernet  HWaddr f2:c2:6f:54:b8:2b  \n          inet addr:10.22.0.2  Bcast:0.0.0.0  Mask:255.255.0.0\n          inet6 addr: fe80::f0c2:6fff:fe54:b82b/64 Scope:Link\n          UP BROADCAST MULTICAST  MTU:1500  Metric:1\n          RX packets:1 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:0 errors:0 dropped:1 overruns:0 carrier:0\n          collisions:0 txqueuelen:0\n          RX bytes:90 (90.0 B)  TX bytes:0 (0.0 B)\n\nlo        Link encap:Local Loopback  \n          inet addr:127.0.0.1  Mask:255.0.0.0\n          inet6 addr: ::1/128 Scope:Host\n          UP LOOPBACK RUNNING  MTU:65536  Metric:1\n          RX packets:0 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:0\n          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)\n```\n\nThe environment variable `CNI_PATH` tells the scripts and library where to look for plugin executables.\n\n## Running a Docker container with network namespace set up by CNI plugins\n\nUse the instructions in the previous section to define a netconf and build the plugins.\nNext, docker-run.sh script wraps `docker run`, to execute the plugins prior to entering the container:\n\n```bash\n$ CNI_PATH=$GOPATH/src/github.com/containernetworking/plugins/bin\n$ cd $GOPATH/src/github.com/containernetworking/cni/scripts\n$ sudo CNI_PATH=$CNI_PATH ./docker-run.sh --rm busybox:latest ifconfig\neth0      Link encap:Ethernet  HWaddr fa:60:70:aa:07:d1  \n          inet addr:10.22.0.2  Bcast:0.0.0.0  Mask:255.255.0.0\n          inet6 addr: fe80::f860:70ff:feaa:7d1/64 Scope:Link\n          UP BROADCAST MULTICAST  MTU:1500  Metric:1\n          RX packets:1 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:0 errors:0 dropped:1 overruns:0 carrier:0\n          collisions:0 txqueuelen:0\n          RX bytes:90 (90.0 B)  TX bytes:0 (0.0 B)\n\nlo        Link encap:Local Loopback  \n          inet addr:127.0.0.1  Mask:255.0.0.0\n          inet6 addr: ::1/128 Scope:Host\n          UP LOOPBACK RUNNING  MTU:65536  Metric:1\n          RX packets:0 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:0\n          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)\n```\n\n## What might CNI do in the future?\n\nCNI currently covers a wide range of needs for network configuration due to its simple model and API.\nHowever, in the future CNI might want to branch out into other directions:\n\n- Dynamic updates to existing network configuration\n- Dynamic policies for network bandwidth and firewall rules\n\nIf these topics are of interest, please contact the team via the mailing list or IRC and find some like-minded people in the community to put a proposal together.\n\n## Where are the binaries?\n\nThe plugins moved to a separate repo:\nhttps://github.com/containernetworking/plugins, and the releases there\ninclude binaries and checksums.\n\nPrior to release 0.7.0 the `cni` release also included a `cnitool`\nbinary; as this is a developer tool we suggest you build it yourself.\n\n## Contact\n\nFor any questions about CNI, please reach out on the mailing list:\n- Email: [cni-dev](https://groups.google.com/forum/#!forum/cni-dev)\n- IRC: #[containernetworking](irc://irc.freenode.org:6667/#containernetworking) channel on freenode.org\n- #cni on the [CNCF slack](https://slack.cncf.io/)\n\n'