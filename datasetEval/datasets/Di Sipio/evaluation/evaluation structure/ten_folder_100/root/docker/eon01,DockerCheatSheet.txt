b'> This repository is trending on Github since some days now. Watch it, we will add many updates in the future. \n> Thank you for your support.\n\nCheck [the website](http://dockercheatsheet.painlessdocker.com).\n\n*Read this in other languages: [English](README.md), [Russian](README.ru.md).*\n\n# Table of Contents\n\n   * [Installation](#installation)\n   * [Docker Registries &amp; Repositories](#docker-registries--repositories)\n   * [Running Containers](#running-containers)\n   * [Starting &amp; Stopping Containers](#starting--stopping-containers)\n   * [Getting Information about Containers](#getting-information-about-containers)\n   * [Networking](#networking)\n   * [Security](#security)\n   * [Cleaning Docker](#cleaning-docker)\n   * [Docker Swarm](#docker-swarm)\n   * [Notes](#notes)\n\n# Installation\n\n## Linux\n\nFor more information, see [here](https://docs.docker.com/install/#server)\n\n```\ncurl -sSL https://get.docker.com/ | sh\n```\n\n## Mac\n\nFor more information, see [here](https://docs.docker.com/docker-for-mac/install/)\n\nUse this link to download the dmg.\n\n```\nhttps://download.docker.com/mac/stable/Docker.dmg\n```\n\n##  Windows\n\nFor more information, see [here](https://docs.docker.com/docker-for-windows/install/)\n\nUse the msi installer:\n\n```\nhttps://download.docker.com/win/stable/InstallDocker.msi\n```\n\n# Docker Registries & Repositories\n\n## Login to a Registry\n\n```\ndocker login\n```\n\n```\ndocker login localhost:8080\n```\n\n## Logout from a Registry.\n\n```\ndocker logout\n```\n\n```\ndocker logout localhost:8080\n```\n\n## Searching an Image\n\n```\ndocker search nginx\n```\n\n```\ndocker search --filter stars=3 --no-trunc nginx\n```\n\n## Pulling an Image\n\n```\ndocker image pull nginx\n```\n\n```\ndocker image pull eon01/nginx localhost:5000/myadmin/nginx\n```\n\n## Pushing an Image\n\n```\ndocker image push eon01/nginx\n```\n\n```\ndocker image push eon01/nginx localhost:5000/myadmin/nginx\n```\n\n# Running Containers\n\n## Create and Run a Simple Container\n\n> - Start an [ubuntu:latest](https://hub.docker.com/_/ubuntu/) image\n> - Bind the port `80` from the **CONTAINER** to port `3000` on the **HOST** \n> - Mount the current directory to `/data` on the CONTAINER \n> - Note: on **windows** you have to change `-v ${PWD}:/data` to `-v "C:\\Data":/data`\n\n```\ndocker container run --name infinite -it -p 3000:80 -v ${PWD}:/data ubuntu:latest\n```\n\n## Creating a Container\n\n```\ndocker container create -t -i eon01/infinite --name infinite\n```\n\n## Running a Container\n\n```\ndocker container run -it --name infinite -d eon01/infinite\n```\n\n## Renaming a Container\n\n```\ndocker container rename infinite infinity\n```\n\n## Removing a Container\n\n```\ndocker container rm infinite\n```\n\n## Updating a Container\n\n```\ndocker container update --cpu-shares 512 -m 300M infinite\n```\n\n# Starting & Stopping Containers\n\n## Starting\n\n```\ndocker container start nginx\n```\n\n## Stopping\n```\ndocker container stop nginx\n```\n\n## Restarting\n```\ndocker container restart nginx\n```\n\n## Pausing\n```\ndocker container pause nginx\n\n```\n\n## Unpausing\n\n```\ndocker container unpause nginx\n```\n\n## Blocking a Container\n\n```\ndocker container wait nginx\n```\n\n## Sending a SIGKILL\n\n```\ndocker container kill nginx\n```\n\n## Sending another signal\n\n```\ndocker container kill -s HUP nginx\n```\n\n## Connecting to an Existing Container\n\n```\ndocker container attach nginx\n```\n\n\n# Getting Information about Containers\n\n## Running Containers\n\n```\ndocker container ls\n```\n\n```\ndocker container ls -a\n```\n\n## Container Logs\n\n```\ndocker logs infinite\n```\n\n## Follow Container Logs\n\n```\ndocker container logs infinite -f\n```\n\n## Inspecting Containers\n\n```\ndocker container inspect infinite\n```\n\n```\ndocker container inspect --format \'{{ .NetworkSettings.IPAddress }}\' $(docker ps -q)\n```\n\n## Containers Events\n\n```\ndocker system events infinite\n```\n\n## Public Ports\n\n```\ndocker container port infinite\n```\n\n## Running Processes\n\n```\ndocker container top infinite\n```\n\n## Container Resource Usage\n\n```\ndocker container stats infinite\n```\n\n## Inspecting changes to files or directories on a container\xe2\x80\x99s filesystem\n\n```\ndocker container diff infinite\n```\n\n\n## Manipulating Images\n\n## Listing Images\n\n```\ndocker image ls\n```\n\n## Building Images\n\n```\ndocker build .\n```\n\n```\ndocker build github.com/creack/docker-firefox\n```\n\n```\ndocker build - < Dockerfile\n```\n\n```\ndocker build - < context.tar.gz\n```\n\n```\ndocker build -t eon/infinite .\n```\n\n```\ndocker build -f myOtherDockerfile .\n```\n\n```\ncurl example.com/remote/Dockerfile | docker build -f - .\n```\n\n\n\n## Removing an Image\n\n```\ndocker image rm nginx\n```\n\n## Loading a Tarred Repository from a File or the Standard Input Stream\n\n```\ndocker image load < ubuntu.tar.gz\n```\n\n```\ndocker image load --input ubuntu.tar\n```\n\n## Save an Image to a Tar Archive\n\n```\ndocker image save busybox > ubuntu.tar\n```\n\n## Showing the History of an Image\n\n```\ndocker image history\n```\n\n## Creating an Image From a Container\n\n```\ndocker container commit nginx\n```\n\n## Tagging an Image\n\n```\ndocker image tag nginx eon01/nginx\n```\n\n## Pushing an Image\n\n```\ndocker image push eon01/nginx\n```\n\n\n# Networking\n\n## Creating Networks\n\n```\ndocker network create -d overlay MyOverlayNetwork\n```\n\n```\ndocker network create -d bridge MyBridgeNetwork\n```\n\n```\ndocker network create -d overlay \\\n  --subnet=192.168.0.0/16 \\\n  --subnet=192.170.0.0/16 \\\n  --gateway=192.168.0.100 \\\n  --gateway=192.170.0.100 \\\n  --ip-range=192.168.1.0/24 \\\n  --aux-address="my-router=192.168.1.5" --aux-address="my-switch=192.168.1.6" \\\n  --aux-address="my-printer=192.170.1.5" --aux-address="my-nas=192.170.1.6" \\\n  MyOverlayNetwork\n```\n\n## Removing a Network\n\n```\ndocker network rm MyOverlayNetwork\n```\n\n## Listing Networks\n\n```\ndocker network ls\n```\n\n## Getting Information About a Network\n\n```\ndocker network inspect MyOverlayNetwork\n```\n\n## Connecting a Running Container to a Network\n\n```\ndocker network connect MyOverlayNetwork nginx\n```\n\n## Connecting a Container to a Network When it Starts\n\n```\ndocker container run -it -d --network=MyOverlayNetwork nginx\n```\n\n## Disconnecting a Container from a Network\n\n```\ndocker network disconnect MyOverlayNetwork nginx\n```\n\n## Exposing Ports\n\nUsing Dockerfile, you can expose a port on the container using:\n\n```\nEXPOSE <port_number>\n```\n\nYou can also map the container port to a host port using:\n\ne.g.\n\n```\ndocker run -p $HOST_PORT:$CONTAINER_PORT --name infinite -t infinite\n```\n\n# Security\n\n## Guidelines for building secure Docker images\n\n1. Prefer minimal base images\n2. Dedicated user on the image as the least privileged user\n3. Sign and verify images to mitigate MITM attacks\n4. Find, fix and monitor for open source vulnerabilities\n5. Don\xe2\x80\x99t leak sensitive information to docker images\n6. Use fixed tags for immutability\n7. Use COPY instead of ADD\n8. Use labels for metadata\n9. Use multi-stage builds for small secure images\n10. Use a linter\n\nMore detailed information on Snyk\'s [10 Docker Image Security Best Practices](https://snyk.io/blog/10-docker-image-security-best-practices/) blog\n\n# Cleaning Docker\n\n## Removing a Running Container\n\n```\ndocker container rm nginx\n```\n\n## Removing a Container and its Volume\n\n```\ndocker container rm -v nginx\n```\n\n## Removing all Exited Containers\n\n```\ndocker container rm $(docker container ls -a -f status=exited -q)\n```\n\n\n## Removing All Stopped Containers\n\n```\ndocker container rm `docker container ls -a -q`\n```\n\n## Removing a Docker Image\n\n```\ndocker image rm nginx\n```\n\n## Removing Dangling Images\n\n```\ndocker image rm $(docker image ls -f dangling=true -q)\n```\n\n## Removing all Images\n\n```\ndocker image rm $(docker image ls -a -q)\n```\n\n## Removing all untagged images\n\n```\ndocker image rm -f $(docker image ls | grep "^<none>" | awk "{print $3}")\n```\n\n## Stopping & Removing all Containers\n\n```\ndocker container stop $(docker container ls -a -q) && docker container rm $(docker container ls -a -q)\n```\n\n## Removing Dangling Volumes\n\n```\ndocker volume rm $(docker volume ls -f dangling=true -q)\n```\n\n## Removing all unused (containers, images, networks and volumes)\n\n```\ndocker system prune -f\n```\n\n## Clean all\n\n```\ndocker system prune -a\n```\n\n# Docker Swarm\n\n## Installing Docker Swarm\n\n```\ncurl -ssl https://get.docker.com | bash\n```\n\n\n## Initializing the Swarm\n\n```\ndocker swarm init --advertise-addr 192.168.10.1\n```\n\n\n## Getting a Worker to Join the Swarm\n\n```\ndocker swarm join-token worker\n```\n\n\n## Getting a Manager to Join the Swarm\n\n```\ndocker swarm join-token manager\n```\n\n\n\n## Listing Services\n\n```\ndocker service ls\n```\n\n\n## Listing nodes\n\n```\ndocker node ls\n```\n\n\n## Creating a Service\n\n```\ndocker service create --name vote -p 8080:80 instavote/vote\n```\n\n\n## Listing Swarm Tasks\n\n```\ndocker service ps\n```\n\n\n## Scaling a Service\n\n\n```\ndocker service scale vote=3\n```\n\n\n## Updating a Service\n\n```\ndocker service update --image instavote/vote:movies vote\n```\n\n```\ndocker service update --force --update-parallelism 1 --update-delay 30s nginx\n```\n\n```\ndocker service update --update-parallelism 5--update-delay 2s --image instavote/vote:indent vote\n```\n\n```\ndocker service update --limit-cpu 2 nginx\n```\n\n```\ndocker service update --replicas=5 nginx\n```\n\n# Notes\n\nThis work was first published in [Painless Docker Course](http://painlessdocker.com)\n'