b'# "Distroless" Docker Images\n\n[![Build Status](https://travis-ci.org/GoogleContainerTools/distroless.svg?branch=master)](https://travis-ci.org/GoogleContainerTools/distroless)\n\n"Distroless" images contain only your application and its runtime dependencies.\nThey do not contain package managers, shells or any other programs you would expect to find in a standard Linux distribution.\n\nFor more information, see this [talk](https://swampup2017.sched.com/event/A6CW/distroless-docker-containerizing-apps-not-vms?iframe=no&w=100%&sidebar=yes&bg=no) ([video](https://www.youtube.com/watch?v=lviLZFciDv4)).\n\n## Why should I use distroless images?\n\nRestricting what\'s in your runtime container to precisely what\'s necessary for your app is a best practice employed by Google\nand other tech giants that have used containers in production for many years.\nIt improves the signal to noise of scanners (e.g. CVE) and reduces the burden of establishing provenance to just what you need.\n\n## How do I use distroless images?\n\nThese images are built using the [bazel](https://bazel.build) tool, but they can also be used through other Docker image build tooling.\n\n### Entrypoints\n\nNote that distroless images by default do not contain a shell.\nThat means the Dockerfile `ENTRYPOINT` command, when defined, must be specified in `vector` form, to avoid the container runtime prefixing with a shell.\n\nThis works:\n\n```\nENTRYPOINT ["myapp"]\n```\n\nBut this does not work:\n\n```\nENTRYPOINT "myapp"\n```\n\nFor the same reasons, if the entrypoint is left to the default empty vector, the CMD command should be specified in `vector` form (see examples below).\n\n### Docker\n\nDocker multi-stage builds make using distroless images easy.\nFollow these steps to get started:\n\n* Pick the right base image for your application stack.\n  We publish the following distroless base images on `gcr.io`:\n    * [gcr.io/distroless/static-debian10](base/README.md)\n    * [gcr.io/distroless/base-debian10](base/README.md)\n    * [gcr.io/distroless/java-debian10](java/README.md)\n    * [gcr.io/distroless/cc-debian10](cc/README.md)\n\n* The following images are also published on `gcr.io`, but are considered experimental and not recommended for production usage:\n    * [gcr.io/distroless/python2.7-debian10](experimental/python2.7/README.md)\n    * [gcr.io/distroless/python3-debian10](experimental/python3/README.md)\n    * [gcr.io/distroless/nodejs](experimental/nodejs/README.md)\n    * [gcr.io/distroless/java/jetty-debian10](java/jetty/README.md)\n    * [gcr.io/distroless/dotnet](experimental/dotnet/README.md)\n* Write a multi-stage docker file.\n  Note: This requires Docker 17.05 or higher.\n\n  The basic idea is that you\'ll have one stage to build your application artifacts, and insert them into your runtime distroless image.\n  If you\'d like to learn more, please see the documentation on [multi-stage builds](https://docs.docker.com/engine/userguide/eng-image/multistage-build/).\n\n#### Examples with Docker\n  Here\'s a quick example for go:\n\n  ```dockerfile\n  # Start by building the application.\n  FROM golang:1.13-buster as build\n\n  WORKDIR /go/src/app\n  ADD . /go/src/app\n\n  RUN go get -d -v ./...\n\n  RUN go build -o /go/bin/app\n\n  # Now copy it into our base image.\n  FROM gcr.io/distroless/base-debian10\n  COPY --from=build /go/bin/app /\n  CMD ["/app"]\n  ```\n\nYou can find other examples here:\n\n* [Java](examples/java/Dockerfile)\n* [Python](examples/python2.7/Dockerfile)\n* [Python 3](examples/python3/Dockerfile)\n* [Golang](examples/go/Dockerfile)\n* [Node.js](examples/nodejs/Dockerfile)\n* [dotnet](examples/dotnet/Dockerfile)\n\nTo run any example, go the the directory for the language and run\n```\ndocker build -t myapp .\ndocker run -t myapp\n```\nTo run the Node.js Express app [node-express](examples/nodejs/node-express) and expose the container\'s ports:\n\n```\nnpm install #Install express and its transitive dependencies\ndocker build -t myexpressapp . # Normal build command\ndocker run -p 3000:3000 -t myexpressapp\n```\n\nThis should expose the Express application to your localhost:3000\n\n\n### Bazel\n\nFor full documentation on how to use bazel to generate Docker images, see the [bazelbuild/rules_docker](http://github.com/bazelbuild/rules_docker) repository.\n\nFor documentation and examples on how to use the bazel package manager rules, see [./package_manager](./package_manager)\n\nExamples can be found in this repository in the [examples](examples/) directory.\n\n#### Examples with Bazel\n\nWe have some examples on how to run some common application stacks in the /examples directory.\nSee here for:\n\n* [Java](examples/java/BUILD)\n* [Python](examples/python2.7/BUILD)\n* [Python 3](examples/python3/BUILD)\n* [Golang](examples/go/BUILD)\n* [Node.js](examples/nodejs/BUILD)\n* [dotnet](examples/dotnet/BUILD)\n\nSee here for examples on how to complete some common tasks in your image:\n\n* [Adding and running as a non-root user](examples/nonroot)\n* [Including debian packages](https://github.com/bazelbuild/rules_docker#container_image-1)\n* [Including CA certificates](cacerts/)\n\nSee here for more information on how these images are [built and released](RELEASES.md).\n\n### Jib\n\nFor full documentation on how to use Jib to generate Docker images from Maven and Gradle, see the [GoogleContainerTools/jib](http://github.com/GoogleContainerTools/jib) repository.\n\n### Base Operating System\n\nOriginally these images were based on Debian 9 (stretch). We now also provide images based on Debian 10 (buster), and tag images with `-debian9` or `-debian10` suffixes. We recommend referencing the appropriate distribution explicitly, since otherwise your build will break when the next Debian version is released.\n\n### CVE and Patching\n\nDistroless tracks Debian 9 (stretch, oldstable currently) and Debian 10. A commit is needed in this repository to update the snapshot version when security fixes are release. Check https://www.debian.org/security/ for any patches to address security issues and update. Check issues and PRs for the patch and update your builds.\n\n### Debug Images\n\nDistroless images are minimal and lack shell access.  The ```:debug``` image set for each language provides a busybox shell to enter.\n\nFor example:\n\n\n```\ncd examples/python2.7/\n```\n\nedit the ```Dockerfile``` to change the final image to ```:debug```:\n\n```dockerfile\nFROM gcr.io/distroless/python2.7:debug\nCOPY . /app\nWORKDIR /app\nCMD ["hello.py", "/etc"]\n```\n\nthen build and launch with an shell entrypoint:\n\n```\n$ docker build -t my_debug_image .\n```\n\n```\n$ docker run --entrypoint=sh -ti my_debug_image\n\n/app # ls\nBUILD       Dockerfile  hello.py\n```\n> Note: If the image you are using already has a tag, for example `gcr.io/distroless/java-debian10:11`, use the tag `<existing tag>-debug` instead, for example `gcr.io/distroless/java-debian10:11-debug`.\n\n> Note: [ldd](http://man7.org/linux/man-pages/man1/ldd.1.html) is not installed in the base image as it\'s a shell script, you can copy it in or download it.\n\n\n# Community Discussion\n\n* [distroless-users Google Group](https://groups.google.com/forum/#!forum/distroless-users)\n* [Kubernetes slack #distroless channel](https://slack.k8s.io/)\n'