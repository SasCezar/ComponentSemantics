b'# Outline Server\n\n[![Build Status](https://travis-ci.org/Jigsaw-Code/outline-server.svg?branch=master)](https://travis-ci.org/Jigsaw-Code/outline-server)\n\nThis repository has all the code needed to create and manage Outline servers on\nDigitalOcean. An Outline server runs instances of Shadowsocks proxies and\nprovides an API used by the Outline Manager application.\n\nGo to https://getoutline.org for ready-to-use versions of the software.\n\n## Components\n\nThe system comprises the following components:\n\n- **Outline Server**: a proxy server that runs a Shadowsocks instance for each\n  access key and a REST API to manage the access keys. The Outline Server runs\n  in a Docker container in the host machine.\n\n  See [`src/shadowbox`](src/shadowbox)\n\n- **Outline Manager:** an [Electron](https://electronjs.org/) application that\n  can create Outline Servers on the cloud and talks to their access key\n  management API to manage who has access to the server.\n\n  See [`src/server_manager`](src/server_manager)\n\n- **Metrics Server:** a REST service that the Outline Server talks to\n  if the user opts-in to anonymous metrics sharing.\n\n  See [`src/metrics_server`](src/metrics_server)\n\n\n## Code Prerequisites\n\nIn order to build and run the code, you need the following installed:\n  - [Node](https://nodejs.org/)\n  - [Yarn](https://yarnpkg.com/en/docs/install)\n  - [Wine](https://www.winehq.org/download), if you would like to generate binaries for Windows.\n\nThen you need to install all the NPM package dependencies:\n```\nyarn\n```\n\nNote: If you are using root (not recommended on your dev machine, maybe in a container), you need to add `{ "allow_root": true }` to your `/root/.bowerrc` file.\n\nThis project uses [Yarn workspaces](https://yarnpkg.com/blog/2017/08/02/introducing-workspaces/).\n\n\n## Build System\n\nWe have a very simple build system based on package.json scripts that are called using `yarn`\nand a thin wrapper for what we call build "actions".\n\nWe\'ve defined a `do` package.json script that takes an `action` parameter:\n```shell\nyarn do $ACTION\n```\n\nThis command will define a `do_action()` function and call `${ACTION}_action.sh`, which must exist.\nThe called action script can use `do_action` to call its dependencies. The $ACTION parameter is\nalways resolved from the project root, regardless of the caller location.\n\nThe idea of `do_action` is to keep the build logic next to where the relevant code is.\nIt also defines two environmental variables:\n\n- ROOT_DIR: the root directory of the project, as an absolute path.\n- BUILD_DIR: where the build output should go, as an absolute path.\n\n### Build output\n\nBuilding creates the following directories under `build/`:\n- `web_app/`: The Manager web app.\n  - `static/`: The standalone web app static files. This is what one deploys to a web server or runs with Electron.\n- `electron_app/`: The launcher desktop Electron app\n  - `static/`: The Manager Electron app to run with the electron command-line\n  - `bundled/`: The Electron app bundled to run standalone on each platform\n  - `packaged/`: The Electron app bundles packaged as single files for distribution\n- `invite_page`: the Invite Page\n  - `static`: The standalone static files to be deployed\n- `shadowbox`: The Proxy Server\n\nThe directories have subdirectories for intermediate output:\n- `ts/`: Autogenerated Typescript files\n- `js/`: The output from compiling Typescript code\n- `browserified/`: The output of browserifying the JavaScript code\n\nTo clean up:\n```\nyarn run clean\n```\n'