b'# imaginary [![Build Status](https://travis-ci.org/h2non/imaginary.png)](https://travis-ci.org/h2non/imaginary) [![Docker](https://img.shields.io/badge/docker-h2non/imaginary-blue.svg)](https://hub.docker.com/r/h2non/imaginary/) [![Docker Registry](https://img.shields.io/docker/pulls/h2non/imaginary.svg)](https://hub.docker.com/r/h2non/imaginary/) [![Go Report Card](http://goreportcard.com/badge/h2non/imaginary)](http://goreportcard.com/report/h2non/imaginary)\n\n**[Fast](#benchmarks) HTTP [microservice](http://microservices.io/patterns/microservices.html)** written in Go **for high-level image processing** backed by [bimg](https://github.com/h2non/bimg) and [libvips](https://github.com/jcupitt/libvips). `imaginary` can be used as private or public HTTP service for massive image processing with first-class support for [Docker](#docker) & [Heroku](#heroku).\nIt\'s almost dependency-free and only uses [`net/http`](http://golang.org/pkg/net/http/) native package without additional abstractions for better [performance](#performance).\n\nSupports multiple [image operations](#supported-image-operations) exposed as a simple [HTTP API](#http-api),\nwith additional optional features such as **API token authorization**, **URL signature protection**, **HTTP traffic throttle** strategy and **CORS support** for web clients.\n\n`imaginary` **can read** images **from HTTP POST payloads**, **server local path** or **remote HTTP servers**, supporting **JPEG**, **PNG**, **WEBP**, and optionally **TIFF**, **PDF**, **GIF** and **SVG** formats if `libvips@8.3+` is compiled with proper library bindings.\n\n`imaginary` is able to output images as JPEG, PNG and WEBP formats, including transparent conversion across them.\n\n`imaginary` also optionally **supports image placeholder fallback mechanism** in case of image processing error or server error of any nature, therefore an image will be always returned by the server in terms of HTTP response body and content MIME type, even in case of error, matching the expected image size and format transparently.\n\nIt uses internally `libvips`, a powerful and efficient library written in C for image processing\nwhich requires a [low memory footprint](http://www.vips.ecs.soton.ac.uk/index.php?title=Speed_and_Memory_Use)\nand it\'s typically 4x faster than using the quickest ImageMagick and GraphicsMagick\nsettings or Go native `image` package, and in some cases it\'s even 8x faster processing JPEG images.\n\nTo get started, take a look the [installation](#installation) steps, [usage](#command-line-usage) cases and [API](#http-api) docs.\n\n## Contents\n\n- [Supported image operations](#supported-image-operations)\n- [Prerequisites](#prerequisites)\n- [Installation](#installation)\n  - [Docker](#docker)\n  - [Heroku](#heroku)\n  - [Cloud Foundry](#cloudfoundry)\n- [Recommended resources](#recommended-resources)\n- [Production notes](#production-notes)\n- [Scalability](#scalability)\n- [Clients](#clients)\n- [Performance](#performance)\n- [Benchmark](#benchmark)\n- [Command-line usage](#command-line-usage)\n- [HTTP API](#http-api)\n  - [Authorization](#authorization)\n  - [URL signature](#url-signature)\n  - [Errors](#errors)\n  - [Form data](#form-data)\n  - [Params](#params)\n  - [Endpoints](#get-)\n- [Authors](#authors)\n- [License](#license)\n\n## Supported image operations\n\n- Resize\n- Enlarge\n- Crop\n- SmartCrop (based on [libvips built-in algorithm](https://github.com/jcupitt/libvips/blob/master/libvips/conversion/smartcrop.c))\n- Rotate (with auto-rotate based on EXIF orientation)\n- Flip (with auto-flip based on EXIF metadata)\n- Flop\n- Zoom\n- Thumbnail\n- Fit\n- [Pipeline](#get--post-pipeline) of multiple independent image transformations in a single HTTP request.\n- Configurable image area extraction\n- Embed/Extend image, supporting multiple modes (white, black, mirror, copy or custom background color)\n- Watermark (customizable by text)\n- Watermark image\n- Custom output color space (RGB, black/white...)\n- Format conversion (with additional quality/compression settings)\n- Info (image size, format, orientation, alpha...)\n- Reply with default or custom placeholder image in case of error.\n- Blur\n\n## Prerequisites\n\n- [libvips](https://github.com/jcupitt/libvips) 8.3+ (8.5+ recommended)\n- C compatible compiler such as gcc 4.6+ or clang 3.0+\n- Go 1.10+\n\n## Installation\n\n```bash\ngo get -u github.com/h2non/imaginary\n```\n\nAlso, be sure you have the latest version of `bimg`:\n```bash\ngo get -u gopkg.in/h2non/bimg.v1\n```\n\n### libvips\n\nRun the following script as `sudo` (supports OSX, Debian/Ubuntu, Redhat, Fedora, Amazon Linux):\n```bash\ncurl -s https://raw.githubusercontent.com/h2non/bimg/master/preinstall.sh | sudo bash -\n```\n\nThe [install script](https://github.com/h2non/bimg/blob/master/preinstall.sh) requires `curl` and `pkg-config`\n\n### Docker\n\nSee [Dockerfile](https://github.com/h2non/imaginary/blob/master/Dockerfile) for image details.\n\nFetch the image (comes with latest stable Go and `libvips` versions)\n```\ndocker pull h2non/imaginary\n```\n\nStart the container with optional flags (default listening on port 9000)\n```\ndocker run -p 9000:9000 h2non/imaginary -cors -gzip\n```\n\nStart the container in debug mode:\n```\ndocker run -p 9000:9000 -e "DEBUG=*" h2non/imaginary\n```\n\nEnter to the interactive shell in a running container\n```\nsudo docker exec -it <containerIdOrName> bash\n```\n\nStop the container\n```\ndocker stop h2non/imaginary\n```\n\nYou can see all the Docker tags [here](https://hub.docker.com/r/h2non/imaginary/tags/).\n\nAlternatively you may add imaginary to your `docker-compose.yml` file:\n\n```yaml\nversion: "3"\nservices:\n  imaginary:\n    image: h2non/imaginary:latest\n    # optionally mount a volume as local image source\n    volumes:\n      - images:/mnt/data\n    environment:\n       PORT: 9000\n    command: -enable-url-source -mount /mnt/data\n    ports:\n      - "9000:9000"\n```\n\n### Heroku\n\nClick on the Heroku button to easily deploy your app:\n\n[![Heroku](https://www.herokucdn.com/deploy/button.png)](https://heroku.com/deploy)\n\nOr alternatively you can follow the manual steps:\n\nClone this repository:\n```\ngit clone https://github.com/h2non/imaginary.git\n```\n\nSet the buildpack for your application\n```\nheroku config:add BUILDPACK_URL=https://github.com/h2non/heroku-buildpack-imaginary.git\n```\n\nOptionally, define the PKGCONFIG path:\n```\nheroku config:add PKG_CONFIG_PATH=/app/vendor/vips/lib/pkgconfig\n```\n\nAdd Heroku git remote:\n```\nheroku git:remote -a your-application\n```\n\nDeploy it!\n```\ngit push heroku master\n```\n\n### CloudFoundry\n\nAssuming you have cloudfoundry account, [bluemix](https://console.ng.bluemix.net/) or [pivotal](https://console.run.pivotal.io/) and [command line utility installed](https://github.com/cloudfoundry/cli).\n\nClone this repository:\n```\ngit clone https://github.com/h2non/imaginary.git\n```\n\nPush the application\n```\ncf push -b https://github.com/yacloud-io/go-buildpack-imaginary.git imaginary-inst01 --no-start\n```\n\nDefine the library path\n```\ncf set-env imaginary-inst01 LD_LIBRARY_PATH /home/vcap/app/vendor/vips/lib\n```\n\nStart the application\n```\ncf start imaginary-inst01\n```\n\n### Recommended resources\n\nGiven the multithreaded native nature of Go, in terms of CPUs, most cores means more concurrency and therefore, a better performance can be achieved.\nFrom the other hand, in terms of memory, 512MB of RAM is usually enough for small services with low concurrency (<5 requests/second).\nUp to 2GB for high-load HTTP service processing potentially large images or exposed to an eventual high concurrency.\n\nIf you need to expose `imaginary` as public HTTP server, it\'s highly recommended to protect the service against DDoS-like attacks.\n`imaginary` has built-in support for HTTP concurrency throttle strategy to deal with this in a more convenient way and mitigate possible issues limiting the number of concurrent requests per second and caching the awaiting requests, if necessary.\n\n### Production notes\n\nIn production focused environments it\'s highly recommended to enable the HTTP concurrency throttle strategy in your `imaginary` servers.\n\nThe recommended concurrency limit per server to guarantee a good performance is up to `20` requests per second.\n\nYou can enable it simply passing a flag to the binary:\n```\n$ imaginary -concurrency 20\n```\n\n### Scalability\n\nIf you\'re looking for a large scale solution for massive image processing, you should scale `imaginary` horizontally, distributing the HTTP load across a pool of imaginary servers.\n\nAssuming that you want to provide a high availability to deal efficiently with, let\'s say, 100 concurrent req/sec, a good approach would be using a front end balancer (e.g: HAProxy) to delegate the traffic control flow, ensure the quality of service and distribution the HTTP across a pool of servers:\n\n```\n        |==============|\n        |  Dark World  |\n        |==============|\n              ||||\n        |==============|\n        |   Balancer   |\n        |==============|\n           |       |   \n          /         \\\n         /           \\\n        /             \\\n /-----------\\   /-----------\\\n | imaginary |   | imaginary | (*n)\n \\-----------/   \\-----------/\n```\n\n## Clients\n\n- [node.js/io.js](https://github.com/h2non/node-imaginary)\n\nFeel free to send a PR if you created a client for other language.\n\n## Performance\n\nlibvips is probably the faster open source solution for image processing.\nHere you can see some performance test comparisons for multiple scenarios:\n\n- [libvips speed and memory usage](http://www.vips.ecs.soton.ac.uk/index.php?title=Speed_and_Memory_Use)\n- [bimg](https://github.com/h2non/bimg#Performance) (Go library with C bindings to libvips)\n\n## Benchmark\n\nSee [benchmark.sh](https://github.com/h2non/imaginary/blob/master/benchmark.sh) for more details\n\nEnvironment: Go 1.4.2. libvips-7.42.3. OSX i7 2.7Ghz\n\n```\nRequests  [total]       200\nDuration  [total, attack, wait]   10.030639787s, 9.949499515s, 81.140272ms\nLatencies [mean, 50, 95, 99, max]   83.124471ms, 82.899435ms, 88.948008ms, 95.547765ms, 104.384977ms\nBytes In  [total, mean]     23443800, 117219.00\nBytes Out [total, mean]     175517000, 877585.00\nSuccess   [ratio]       100.00%\nStatus Codes  [code:count]      200:200\n```\n\n### Conclusions\n\n`imaginary` can deal efficiently with up to 20 request per second running in a multicore machine,\nwhere it crops a JPEG image of 5MB and spending per each request less than 100 ms\n\nThe most expensive image operation under high concurrency scenarios (> 20 req/sec) is the image enlargement, which requires a considerable amount of math operations to scale the original image. In this kind of operation the required processing time usually grows over the time if you\'re stressing the server continuously. The advice here is as simple as taking care about the number of concurrent enlarge operations to avoid server performance bottlenecks.\n\n## Command-line usage\n\n```\nUsage:\n  imaginary -p 80\n  imaginary -cors\n  imaginary -concurrency 10\n  imaginary -path-prefix /api/v1\n  imaginary -enable-url-source\n  imaginary -disable-endpoints form,health,crop,rotate\n  imaginary -enable-url-source -allowed-origins http://localhost,http://server.com,http://*.example.org\n  imaginary -enable-url-source -enable-auth-forwarding\n  imaginary -enable-url-source -authorization "Basic AwDJdL2DbwrD=="\n  imaginary -enable-placeholder\n  imaginary -enable-url-source -placeholder ./placeholder.jpg\n  imaginary -enable-url-signature -url-signature-key 4f46feebafc4b5e988f131c4ff8b5997\n  imaginary -enable-url-source -forward-headers X-Custom,X-Token\n  imaginary -h | -help\n  imaginary -v | -version\n\nOptions:\n  -a <addr>                 Bind address [default: *]\n  -p <port>                 Bind port [default: 8088]\n  -h, -help                 Show help\n  -v, -version              Show version\n  -path-prefix <value>      Url path prefix to listen to [default: "/"]\n  -cors                     Enable CORS support [default: false]\n  -gzip                     Enable gzip compression (deprecated) [default: false]\n  -disable-endpoints        Comma separated endpoints to disable. E.g: form,crop,rotate,health [default: ""]\n  -key <key>                Define API key for authorization\n  -mount <path>             Mount server local directory\n  -http-cache-ttl <num>     The TTL in seconds. Adds caching headers to locally served files.\n  -http-read-timeout <num>  HTTP read timeout in seconds [default: 30]\n  -http-write-timeout <num> HTTP write timeout in seconds [default: 30]\n  -enable-url-source        Enable remote HTTP URL image source processing (?url=http://..)\n  -enable-placeholder       Enable image response placeholder to be used in case of error [default: false]\n  -enable-auth-forwarding   Forwards X-Forward-Authorization or Authorization header to the image source server. -enable-url-source flag must be defined. Tip: secure your server from public access to prevent attack vectors\n  -forward-headers          Forwards custom headers to the image source server. -enable-url-source flag must be defined.\n  -enable-url-signature     Enable URL signature (URL-safe Base64-encoded HMAC digest) [default: false]\n  -url-signature-key        The URL signature key (32 characters minimum)\n  -allowed-origins <urls>   Restrict remote image source processing to certain origins (separated by commas). Note: Origins are validated against host *AND* path. \n  -max-allowed-size <bytes> Restrict maximum size of http image source (in bytes)\n  -certfile <path>          TLS certificate file path\n  -keyfile <path>           TLS private key file path\n  -authorization <value>    Defines a constant Authorization header value passed to all the image source servers. -enable-url-source flag must be defined. This overwrites authorization headers forwarding behavior via X-Forward-Authorization\n  -placeholder <path>       Image path to image custom placeholder to be used in case of error. Recommended minimum image size is: 1200x1200\n  -concurrency <num>        Throttle concurrency limit per second [default: disabled]\n  -burst <num>              Throttle burst max cache size [default: 100]\n  -mrelease <num>           OS memory release interval in seconds [default: 30]\n  -cpus <num>               Number of used cpu cores.\n                            (default for current machine is 8 cores)\n```\n\nStart the server in a custom port:\n```bash\nimaginary -p 8080\n```\n\nAlso, you can pass the port as environment variable:\n```bash\nPORT=8080 imaginary\n```\n\nEnable HTTP server throttle strategy (max 10 requests/second):\n```\nimaginary -p 8080 -concurrency 10\n```\n\nEnable remote URL image fetching (then you can do GET request passing the `url=http://server.com/image.jpg` query param):\n```\nimaginary -p 8080 -enable-url-source\n```\n\nMount local directory (then you can do GET request passing the `file=image.jpg` query param):\n```\nimaginary -p 8080 -mount ~/images\n```\n\nEnable authorization header forwarding to image origin server. `X-Forward-Authorization` or `Authorization` (by priority) header value will be forwarded as `Authorization` header to the target origin server, if one of those headers are present in the incoming HTTP request.\nSecurity tip: secure your server from public access to prevent attack vectors when enabling this option:\n```\nimaginary -p 8080 -enable-url-source -enable-auth-forwarding\n```\n\nOr alternatively you can manually define an constant Authorization header value that will be always sent when fetching images from remote image origins. If defined, `X-Forward-Authorization` or `Authorization` headers won\'t be forwarded, and therefore ignored, if present.\n**Note**:\n```\nimaginary -p 8080 -enable-url-source -authorization "Bearer s3cr3t"\n```\n\nSend fixed caching headers in the response. The headers can be set in either "cache nothing" or "cache for N seconds". By specifying `0` imaginary will send the "don\'t cache" headers, otherwise it sends headers with a TTL. The following example informs the client to cache the result for 1 year:\n```\nimaginary -p 8080 -enable-url-source -http-cache-ttl 31556926\n```\n\nEnable placeholder image HTTP responses in case of server error/bad request.\nThe placeholder image will be dynamically and transparently resized matching the expected image `width`x`height` define in the HTTP request params.\nAlso, the placeholder image will be also transparently converted to the desired image type defined in the HTTP request params, so the API contract should be maintained as much better as possible.\n\nThis feature is particularly useful when using `imaginary` as public HTTP service consumed by Web clients.\nIn case of error, the appropriate HTTP status code will be used to reflect the error, and the error details will be exposed serialized as JSON in the `Error` response HTTP header, for further inspection and convenience for API clients.\n```\nimaginary -p 8080 -enable-placeholder -enable-url-source\n```\n\nYou can optionally use a custom placeholder image.\nSince the placeholder image should fit a variety of different sizes, it\'s recommended to use a large image, such as `1200`x`1200`.\nSupported custom placeholder image types are: `JPEG`, `PNG` and `WEBP`.\n```\nimaginary -p 8080 -placeholder=placeholder.jpg -enable-url-source\n```\n\nEnable URL signature (URL-safe Base64-encoded HMAC digest).\n\nThis feature is particularly useful to protect against multiple image operations attacks and to verify the requester identity.\n```\nimaginary -p 8080 -enable-url-signature -url-signature-key 4f46feebafc4b5e988f131c4ff8b5997\n```\n\nIt is recommanded to pass key as environment variables:\n```\nURL_SIGNATURE_KEY=4f46feebafc4b5e988f131c4ff8b5997 imaginary -p 8080 -enable-url-signature\n```\n\nIncrease libvips threads concurrency (experimental):\n```\nVIPS_CONCURRENCY=10 imaginary -p 8080 -concurrency 10\n```\n\nEnable debug mode:\n```\nDEBUG=* imaginary -p 8080\n```\n\nOr filter debug output by package:\n```\nDEBUG=imaginary imaginary -p 8080\n```\n\n#### Examples\n\nReading a local image (you must pass the `-mount=<directory>` flag):\n```\ncurl -O "http://localhost:8088/crop?width=500&height=400&file=foo/bar/image.jpg"\n```\n\nFetching the image from a remote server (you must pass the `-enable-url-source` flag):\n```\ncurl -O "http://localhost:8088/crop?width=500&height=400&url=https://raw.githubusercontent.com/h2non/imaginary/master/testdata/large.jpg"\n```\n\nCrop behaviour can be influenced with the `gravity` parameter. You can specify a preference for a certain region (north, south, etc.). To enable Smart Crop you can specify the value "smart" to autodetect the most interesting section to consider as center point for the crop operation:\n```\ncurl -O "http://localhost:8088/crop?width=500&height=200&gravity=smart&url=https://raw.githubusercontent.com/h2non/imaginary/master/testdata/smart-crop.jpg"\n```\n\n\n#### Playground\n\n`imaginary` exposes an ugly HTML form for playground purposes in: [`http://localhost:8088/form`](http://localhost:8088/form)\n\n## HTTP API\n\n### Allowed Origins\n\nimaginary can be configured to block all requests for images with a src URL this is not specified in the `allowed-origins` list. Imaginary will validate that the remote url matches the hostname and path of at least one origin in allowed list. Perhaps the easiest way to show how this works is to show some examples.\n\n| `allowed-origins` setting | image url | is valid |\n| ------------------------- | --------- | -------- |\n| `--allowed-origns s3.amazonaws.com/some-bucket/` | `s3.amazonaws.com/some-bucket/images/image.png` | VALID |\n| `--allowed-origns s3.amazonaws.com/some-bucket/` | `s3.amazonaws.com/images/image.png` | NOT VALID (no matching basepath) |\n| `--allowed-origns *.amazonaws.com/some-bucket/` | `anysubdomain.amazonaws.com/some-bucket/images/image.png` | VALID |\n| `--allowed-origns *.amazonaws.com` | `anysubdomain.amazonaws.comimages/image.png` | VALID |\n| `--allowed-origns *.amazonaws.com` | `www.notaws.comimages/image.png` | NOT VALID (no matching host) |\n| `--allowed-origns *.amazonaws.com, foo.amazonaws.com/some-bucket/` | `bar.amazonaws.com/some-other-bucket/image.png` | VALID (matches first condition but not second) |\n\n### Authorization\n\nimaginary supports a simple token-based API authorization.\nTo enable it, you should pass the `-key` flag to the binary.\n\nAPI token can be defined as HTTP header (`API-Key`) or query param (`key`).\n\nExample request with API key:\n```\nPOST /crop HTTP/1.1\nHost: localhost:8088\nAPI-Key: secret\n```\n\n### URL signature\n\nThe URL signature is provided by the `sign` request parameter.\n\nThe HMAC-SHA256 hash is created by taking the URL path (including the leading /), the request parameters (alphabetically-sorted and concatenated with & into a string). The hash is then base64url-encoded.\n\nHere an example in Go:\n```\nsignKey  := "4f46feebafc4b5e988f131c4ff8b5997"\nurlPath  := "/resize"\nurlQuery := "file=image.jpg&height=200&type=jpeg&width=300"\n\nh := hmac.New(sha256.New, []byte(signKey))\nh.Write([]byte(urlPath))\nh.Write([]byte(urlQuery))\nbuf := h.Sum(nil)\n\nfmt.Println("sign=" + base64.RawURLEncoding.EncodeToString(buf))\n```\n\n### Errors\n\n`imaginary` will always reply with the proper HTTP status code and JSON body with error details.\n\nHere an example response error when the payload is empty:\n```json\n{\n  "message": "Cannot read payload: no such file",\n  "code": 1\n}\n```\n\nSee all the predefined supported errors [here](https://github.com/h2non/imaginary/blob/master/error.go#L19-L28).\n\n#### Placeholder\n\nIf `-enable-placeholder` or `-placeholder <image path>` flags are passed to `imaginary`, a placeholder image will be used in case of error or invalid request input.\n\nIf `-enable-placeholder` is passed, the default `imaginary` placeholder image will be used, however you can customized it via `-placeholder` flag, loading a custom compatible image from the file system.\n\nSince `imaginary` has been partially designed to be used as public HTTP service, including web pages, in certain scenarios the response MIME type must be respected,\nso the server will always reply with a placeholder image in case of error, such as image processing error, read error, payload error, request invalid request or any other.\n\nYou can customize the placeholder image passing the `-placeholder <image path>` flag when starting `imaginary`.\n\nIn this scenarios, the error message details will be exposed in the `Error` response header field as JSON for further inspection from API clients.\n\nIn some edge cases the placeholder image resizing might fail, so a 400 Bad Request will be used as response status and the `Content-Type` will be `application/json` with the proper message info. Note that this scenario won\'t be common.\n\n### Form data\n\nIf you\'re pushing images to `imaginary` as `multipart/form-data` (you can do it as well as `image/*`), you must define at least one input field called `file` with the raw image data in order to be processed properly by imaginary.\n\n### Params\n\nComplete list of available params. Take a look to each specific endpoint to see which params are supported.\nImage measures are always in pixels, unless otherwise indicated.\n\n- **width**       `int`   - Width of image area to extract/resize\n- **height**      `int`   - Height of image area to extract/resize\n- **top**         `int`   - Top edge of area to extract. Example: `100`\n- **left**        `int`   - Left edge of area to extract. Example: `100`\n- **areawidth**   `int`   - Height area to extract. Example: `300`\n- **areaheight**  `int`   - Width area to extract. Example: `300`\n- **quality**     `int`   - JPEG image quality between 1-100. Defaults to `80`\n- **compression** `int`   - PNG compression level. Default: `6`\n- **rotate**      `int`   - Image rotation angle. Must be multiple of `90`. Example: `180`\n- **factor**      `int`   - Zoom factor level. Example: `2`\n- **margin**      `int`   - Text area margin for watermark. Example: `50`\n- **dpi**         `int`   - DPI value for watermark. Example: `150`\n- **textwidth**   `int`   - Text area width for watermark. Example: `200`\n- **opacity**     `float` - Opacity level for watermark text or watermark image. Default: `0.2`\n- **flip**        `bool`  - Transform the resultant image with flip operation. Default: `false`\n- **flop**        `bool`  - Transform the resultant image with flop operation. Default: `false`\n- **force**       `bool`  - Force image transformation size. Default: `false`\n- **nocrop**      `bool`  - Disable crop transformation. Defaults depend on the operation\n- **noreplicate** `bool`  - Disable text replication in watermark. Defaults to `false`\n- **norotation**  `bool`  - Disable auto rotation based on EXIF orientation. Defaults to `false`\n- **noprofile**   `bool`  - Disable adding ICC profile metadata. Defaults to `false`\n- **stripmeta**   `bool`  - Remove original image metadata, such as EXIF metadata. Defaults to `false`\n- **text**        `string` - Watermark text content. Example: `copyright (c) 2189`\n- **font**        `string` - Watermark text font type and format. Example: `sans bold 12`\n- **color**       `string` - Watermark text RGB decimal base color. Example: `255,200,150`\n- **image**       `string` - Watermark image URL pointing to the remote HTTP server.\n- **type**        `string` - Specify the image format to output. Possible values are: `jpeg`, `png`, `webp` and `auto`. `auto` will use the preferred format requested by the client in the HTTP Accept header. A client can provide multiple comma-separated choices in `Accept` with the best being the one picked.\n- **gravity**     `string` - Define the crop operation gravity. Supported values are: `north`, `south`, `centre`, `west`, `east` and `smart`. Defaults to `centre`.\n- **file**        `string` - Use image from server local file path. In order to use this you must pass the `-mount=<dir>` flag.\n- **url**         `string` - Fetch the image from a remote HTTP server. In order to use this you must pass the `-enable-url-source` flag.\n- **colorspace**  `string` - Use a custom color space for the output image. Allowed values are: `srgb` or `bw` (black&white)\n- **field**       `string` - Custom image form field name if using `multipart/form`. Defaults to: `file`\n- **extend**      `string` - Extend represents the image extend mode used when the edges of an image are extended. Allowed values are: `black`, `copy`, `mirror`, `white` and `background`. If `background` value is specified, you can define the desired extend RGB color via `background` param, such as `?extend=background&background=250,20,10`. For more info, see [libvips docs](http://www.vips.ecs.soton.ac.uk/supported/8.4/doc/html/libvips/libvips-conversion.html#VIPS-EXTEND-BACKGROUND:CAPS).\n- **background**  `string` - Background RGB decimal base color to use when flattening transparent PNGs. Example: `255,200,150`\n- **sigma**       `float`  - Size of the gaussian mask to use when blurring an image. Example: `15.0`\n- **minampl**     `float`  - Minimum amplitude of the gaussian filter to use when blurring an image. Default: Example: `0.5`\n- **operations**  `json`   - Pipeline of image operation transformations defined as URL safe encoded JSON array. See [pipeline](#get--post-pipeline) endpoints for more details.\n- **sign**        `string` - URL signature (URL-safe Base64-encoded HMAC digest)\n\n#### GET /\nContent-Type: `application/json`\n\nServes as JSON the current `imaginary`, `bimg` and `libvips` versions.\n\nExample response:\n```json\n{\n  "imaginary": "0.1.28",\n  "bimg": "1.0.5",\n  "libvips": "8.4.1"\n}\n```\n\n#### GET /health\nContent-Type: `application/json`\n\nProvides some useful statistics about the server stats with the following structure:\n\n- **uptime** `number` - Server process uptime in seconds.\n- **allocatedMemory** `number` - Currently allocated memory in megabytes.\n- **totalAllocatedMemory** `number` - Total allocated memory over the time in megabytes.\n- **goroutines** `number` - Number of running goroutines.\n- **cpus** `number` - Number of used CPU cores.\n\nExample response:\n```json\n{\n  "uptime": 1293,\n  "allocatedMemory": 5.31,\n  "totalAllocatedMemory": 34.3,\n  "goroutines": 19,\n  "cpus": 8\n}\n```\n\n#### GET /form\nContent Type: `text/html`\n\nServes an ugly HTML form, just for testing/playground purposes\n\n#### GET | POST /info\nAccepts: `image/*, multipart/form-data`. Content-Type: `application/json`\n\nReturns the image metadata as JSON:\n```json\n{\n  "width": 550,\n  "height": 740,\n  "type": "jpeg",\n  "space": "srgb",\n  "hasAlpha": false,\n  "hasProfile": true,\n  "channels": 3,\n  "orientation": 1\n}\n```\n\n#### GET | POST /crop\nAccepts: `image/*, multipart/form-data`. Content-Type: `image/*`\n\nCrop the image by a given width or height. Image ratio is maintained\n\n##### Allowed params\n\n- width `int`\n- height `int`\n- quality `int` (JPEG-only)\n- compression `int` (PNG-only)\n- type `string`\n- file `string` - Only GET method and if the `-mount` flag is present\n- url `string` - Only GET method and if the `-enable-url-source` flag is present\n- force `bool`\n- rotate `int`\n- embed `bool`\n- norotation `bool`\n- noprofile `bool`\n- flip `bool`\n- flop `bool`\n- stripmeta `bool`\n- extend `string`\n- background `string` - Example: `?background=250,20,10`\n- colorspace `string`\n- sigma `float`\n- minampl `float`\n- gravity `string`\n- field `string` - Only POST and `multipart/form` payloads\n\n\n#### GET | POST /smartcrop\nAccepts: `image/*, multipart/form-data`. Content-Type: `image/*`\n\nCrop the image by a given width or height using the [libvips](https://github.com/jcupitt/libvips/blob/master/libvips/conversion/smartcrop.c) built-in smart crop algorithm.\n\n##### Allowed params\n\n- width `int`\n- height `int`\n- quality `int` (JPEG-only)\n- compression `int` (PNG-only)\n- type `string`\n- file `string` - Only GET method and if the `-mount` flag is present\n- url `string` - Only GET method and if the `-enable-url-source` flag is present\n- force `bool`\n- rotate `int`\n- embed `bool`\n- norotation `bool`\n- noprofile `bool`\n- flip `bool`\n- flop `bool`\n- stripmeta `bool`\n- extend `string`\n- background `string` - Example: `?background=250,20,10`\n- colorspace `string`\n- sigma `float`\n- minampl `float`\n- gravity `string`\n- field `string` - Only POST and `multipart/form` payloads\n\n#### GET | POST /resize\nAccepts: `image/*, multipart/form-data`. Content-Type: `image/*`\n\nResize an image by width or height. Image aspect ratio is maintained\n\n##### Allowed params\n\n- width `int` `required`\n- height `int`\n- quality `int` (JPEG-only)\n- compression `int` (PNG-only)\n- type `string`\n- file `string` - Only GET method and if the `-mount` flag is present\n- url `string` - Only GET method and if the `-enable-url-source` flag is present\n- embed `bool`\n- force `bool`\n- rotate `int`\n- nocrop `bool` - Defaults to `true`\n- norotation `bool`\n- noprofile `bool`\n- stripmeta `bool`\n- flip `bool`\n- flop `bool`\n- extend `string`\n- background `string` - Example: `?background=250,20,10`\n- colorspace `string`\n- sigma `float`\n- minampl `float`\n- field `string` - Only POST and `multipart/form` payloads\n\n#### GET | POST /enlarge\nAccepts: `image/*, multipart/form-data`. Content-Type: `image/*`\n\n##### Allowed params\n\n- width `int` `required`\n- height `int` `required`\n- quality `int` (JPEG-only)\n- compression `int` (PNG-only)\n- type `string`\n- file `string` - Only GET method and if the `-mount` flag is present\n- url `string` - Only GET method and if the `-enable-url-source` flag is present\n- embed `bool`\n- force `bool`\n- rotate `int`\n- nocrop `bool` - Defaults to `false`\n- norotation `bool`\n- noprofile `bool`\n- stripmeta `bool`\n- flip `bool`\n- flop `bool`\n- extend `string`\n- background `string` - Example: `?background=250,20,10`\n- colorspace `string`\n- sigma `float`\n- minampl `float`\n- field `string` - Only POST and `multipart/form` payloads\n\n#### GET | POST /extract\nAccepts: `image/*, multipart/form-data`. Content-Type: `image/*`\n\n##### Allowed params\n\n- top `int` `required`\n- left `int`\n- areawidth `int` `required`\n- areaheight `int`\n- width `int`\n- height `int`\n- quality `int` (JPEG-only)\n- compression `int` (PNG-only)\n- type `string`\n- file `string` - Only GET method and if the `-mount` flag is present\n- url `string` - Only GET method and if the `-enable-url-source` flag is present\n- embed `bool`\n- force `bool`\n- rotate `int`\n- norotation `bool`\n- noprofile `bool`\n- stripmeta `bool`\n- flip `bool`\n- flop `bool`\n- extend `string`\n- background `string` - Example: `?background=250,20,10`\n- colorspace `string`\n- sigma `float`\n- minampl `float`\n- field `string` - Only POST and `multipart/form` payloads\n\n#### GET | POST /zoom\nAccepts: `image/*, multipart/form-data`. Content-Type: `image/*`\n\n##### Allowed params\n\n- factor `number` `required`\n- width `int`\n- height `int`\n- quality `int` (JPEG-only)\n- compression `int` (PNG-only)\n- type `string`\n- file `string` - Only GET method and if the `-mount` flag is present\n- url `string` - Only GET method and if the `-enable-url-source` flag is present\n- embed `bool`\n- force `bool`\n- rotate `int`\n- nocrop `bool` - Defaults to `true`\n- norotation `bool`\n- noprofile `bool`\n- stripmeta `bool`\n- flip `bool`\n- flop `bool`\n- extend `string`\n- background `string` - Example: `?background=250,20,10`\n- colorspace `string`\n- sigma `float`\n- minampl `float`\n- field `string` - Only POST and `multipart/form` payloads\n\n#### GET | POST /thumbnail\nAccepts: `image/*, multipart/form-data`. Content-Type: `image/*`\n\n##### Allowed params\n\n- width `int` `required`\n- height `int` `required`\n- quality `int` (JPEG-only)\n- compression `int` (PNG-only)\n- type `string`\n- file `string` - Only GET method and if the `-mount` flag is present\n- url `string` - Only GET method and if the `-enable-url-source` flag is present\n- embed `bool`\n- force `bool`\n- rotate `int`\n- norotation `bool`\n- noprofile `bool`\n- stripmeta `bool`\n- flip `bool`\n- flop `bool`\n- extend `string`\n- background `string` - Example: `?background=250,20,10`\n- colorspace `string`\n- sigma `float`\n- minampl `float`\n- field `string` - Only POST and `multipart/form` payloads\n\n#### GET | POST /fit\nAccepts: `image/*, multipart/form-data`. Content-Type: `image/*`\n\nResize an image to fit within width and height, without cropping. Image aspect ratio is maintained\nThe width and height specify a maximum bounding box for the image.\n\n##### Allowed params\n\n- width `int` `required`\n- height `int` `required`\n- quality `int` (JPEG-only)\n- compression `int` (PNG-only)\n- type `string`\n- file `string` - Only GET method and if the `-mount` flag is present\n- url `string` - Only GET method and if the `-enable-url-source` flag is present\n- embed `bool`\n- force `bool`\n- rotate `int`\n- norotation `bool`\n- noprofile `bool`\n- stripmeta `bool`\n- flip `bool`\n- flop `bool`\n- extend `string`\n- background `string` - Example: `?background=250,20,10`\n- colorspace `string`\n- sigma `float`\n- minampl `float`\n- field `string` - Only POST and `multipart/form` payloads\n\n#### GET | POST /rotate\nAccepts: `image/*, multipart/form-data`. Content-Type: `image/*`\n\n##### Allowed params\n\n- rotate `int` `required`\n- width `int`\n- height `int`\n- quality `int` (JPEG-only)\n- compression `int` (PNG-only)\n- type `string`\n- file `string` - Only GET method and if the `-mount` flag is present\n- url `string` - Only GET method and if the `-enable-url-source` flag is present\n- embed `bool`\n- force `bool`\n- norotation `bool`\n- noprofile `bool`\n- stripmeta `bool`\n- flip `bool`\n- flop `bool`\n- extend `string`\n- background `string` - Example: `?background=250,20,10`\n- colorspace `string`\n- sigma `float`\n- minampl `float`\n- field `string` - Only POST and `multipart/form` payloads\n\n#### GET | POST /flip\nAccepts: `image/*, multipart/form-data`. Content-Type: `image/*`\n\n##### Allowed params\n\n- width `int`\n- height `int`\n- quality `int` (JPEG-only)\n- compression `int` (PNG-only)\n- type `string`\n- file `string` - Only GET method and if the `-mount` flag is present\n- url `string` - Only GET method and if the `-enable-url-source` flag is present\n- embed `bool`\n- force `bool`\n- norotation `bool`\n- noprofile `bool`\n- stripmeta `bool`\n- flip `bool`\n- flop `bool`\n- extend `string`\n- background `string` - Example: `?background=250,20,10`\n- colorspace `string`\n- sigma `float`\n- minampl `float`\n- field `string` - Only POST and `multipart/form` payloads\n\n#### GET | POST /flop\nAccepts: `image/*, multipart/form-data`. Content-Type: `image/*`\n\n##### Allowed params\n\n- width `int`\n- height `int`\n- quality `int` (JPEG-only)\n- compression `int` (PNG-only)\n- type `string`\n- file `string` - Only GET method and if the `-mount` flag is present\n- url `string` - Only GET method and if the `-enable-url-source` flag is present\n- embed `bool`\n- force `bool`\n- norotation `bool`\n- noprofile `bool`\n- stripmeta `bool`\n- flip `bool`\n- flop `bool`\n- extend `string`\n- background `string` - Example: `?background=250,20,10`\n- colorspace `string`\n- sigma `float`\n- minampl `float`\n- field `string` - Only POST and `multipart/form` payloads\n\n#### GET | POST /convert\nAccepts: `image/*, multipart/form-data`. Content-Type: `image/*`\n\n##### Allowed params\n\n- type `string` `required`\n- quality `int` (JPEG-only)\n- compression `int` (PNG-only)\n- file `string` - Only GET method and if the `-mount` flag is present\n- url `string` - Only GET method and if the `-enable-url-source` flag is present\n- embed `bool`\n- force `bool`\n- rotate `int`\n- norotation `bool`\n- noprofile `bool`\n- stripmeta `bool`\n- flip `bool`\n- flop `bool`\n- extend `string`\n- background `string` - Example: `?background=250,20,10`\n- colorspace `string`\n- sigma `float`\n- minampl `float`\n- field `string` - Only POST and `multipart/form` payloads\n\n#### GET | POST /pipeline\nAccepts: `image/*, multipart/form-data`. Content-Type: `image/*`\n\nThis endpoint allow the user to declare a pipeline of multiple independent image transformation operations all in a single HTTP request.\n\n**Note**: a maximum of 10 independent operations are current allowed within the same HTTP request.\n\nInternally, it operates pretty much as a sequential reducer pattern chain, where given an input image and a set of operations, for each independent image operation iteration, the output result image will be passed to the next one, as the accumulated result, until finishing all the operations.\n\nIn imperative programming, this would be pretty much analog to the following code:\n```js\nvar image\nfor operation in operations {\n  image = operation.Run(image, operation.Options)\n}\n```\n\n##### Allowed params\n\n- operations `json` `required` - URL safe encoded JSON with a list of operations. See below for interface details.\n- file `string` - Only GET method and if the `-mount` flag is present\n- url `string` - Only GET method and if the `-enable-url-source` flag is present\n\n##### Operations JSON specification\n\nSelf-documented JSON operation schema:\n```js\n[\n  {\n    "operation": string, // Operation name identifier. Required.\n    "ignore_failure": boolean, // Ignore error in case of failure and continue with the next operation. Optional.\n    "params": map[string]mixed, // Object defining operation specific image transformation params, same as supported URL query params per each endpoint.\n  }\n]\n```\n\n###### Supported operations names\n\n- **crop** - Same as [`/crop`](#get--post-crop) endpoint.\n- **smartcrop** - Same as [`/smartcrop`](#get--post-smartcrop) endpoint.\n- **resize** - Same as [`/resize`](#get--post-resize) endpoint.\n- **enlarge** - Same as [`/enlarge`](#get--post-enlarge) endpoint.\n- **extract** - Same as [`/extract`](#get--post-extract) endpoint.\n- **rotate** - Same as [`/rotate`](#get--post-rotate) endpoint.\n- **flip** - Same as [`/flip`](#get--post-flip) endpoint.\n- **flop** - Same as [`/flop`](#get--post-flop) endpoint.\n- **thumbnail** - Same as [`/thumbnail`](#get--post-thumbnail) endpoint.\n- **zoom** - Same as [`/zoom`](#get--post-zoom) endpoint.\n- **convert** - Same as [`/convert`](#get--post-convert) endpoint.\n- **watermark** - Same as [`/watermark`](#get--post-watermark) endpoint.\n- **watermarkImage** - Same as [`/watermarkimage`](#get--post-watermarkimage) endpoint.\n- **blur** - Same as [`/blur`](#get--post-blur) endpoint.\n\n###### Example\n\n```json\n[\n  {\n    "operation": "crop",\n    "params": {\n      "width": 500,\n      "height": 300\n    }\n  },\n  {\n    "operation": "watermark",\n    "params": {\n      "text": "I need some covfete",\n      "font": "Verdana",\n      "textwidth": 100,\n      "opacity": 0.8\n    }\n  },\n  {\n    "operation": "rotate",\n    "params": {\n      "rotate": 180\n    }\n  },\n  {\n    "operation": "convert",\n    "params": {\n      "type": "webp"\n    }\n  }\n]\n```\n\n#### GET | POST /watermark\nAccepts: `image/*, multipart/form-data`. Content-Type: `image/*`\n\n##### Allowed params\n\n- text `string` `required`\n- margin `int`\n- dpi `int`\n- textwidth `int`\n- opacity `float`\n- noreplicate `bool`\n- font `string`\n- color `string`\n- quality `int` (JPEG-only)\n- compression `int` (PNG-only)\n- type `string`\n- file `string` - Only GET method and if the `-mount` flag is present\n- url `string` - Only GET method and if the `-enable-url-source` flag is present\n- embed `bool`\n- force `bool`\n- rotate `int`\n- norotation `bool`\n- noprofile `bool`\n- stripmeta `bool`\n- flip `bool`\n- flop `bool`\n- extend `string`\n- background `string` - Example: `?background=250,20,10`\n- colorspace `string`\n- sigma `float`\n- minampl `float`\n- field `string` - Only POST and `multipart/form` payloads\n\n#### GET | POST /watermarkimage\nAccepts: `image/*, multipart/form-data`. Content-Type: `image/*`\n\n##### Allowed params\n\n- image `string` `required` - URL to watermark image, example: `?image=https://logo-server.com/logo.jpg`\n- top `int` - Top position of the watermark image\n- left `int` - Left position of the watermark image\n- opacity `float` - Opacity value of the watermark image\n- quality `int` (JPEG-only)\n- compression `int` (PNG-only)\n- type `string`\n- file `string` - Only GET method and if the `-mount` flag is present\n- url `string` - Only GET method and if the `-enable-url-source` flag is present\n- embed `bool`\n- force `bool`\n- rotate `int`\n- norotation `bool`\n- noprofile `bool`\n- stripmeta `bool`\n- flip `bool`\n- flop `bool`\n- extend `string`\n- background `string` - Example: `?background=250,20,10`\n- colorspace `string`\n- sigma `float`\n- minampl `float`\n- field `string` - Only POST and `multipart/form` payloads\n\n#### GET | POST /blur\nAccepts: `image/*, multipart/form-data`. Content-Type: `image/*`\n\n##### Allowed params\n\n- sigma `float` `required`\n- minampl `float`\n- width `int`\n- height `int`\n- quality `int` (JPEG-only)\n- compression `int` (PNG-only)\n- type `string`\n- file `string` - Only GET method and if the `-mount` flag is present\n- url `string` - Only GET method and if the `-enable-url-source` flag is present\n- embed `bool`\n- force `bool`\n- norotation `bool`\n- noprofile `bool`\n- stripmeta `bool`\n- flip `bool`\n- flop `bool`\n- extend `string`\n- background `string` - Example: `?background=250,20,10`\n- colorspace `string`\n- field `string` - Only POST and `multipart/form` payloads\n\n## Support\n\n### Backers\n\nSupport us with a monthly donation and help us continue our activities. [[Become a backer](https://opencollective.com/imaginary#backer)]\n\n<a href="https://opencollective.com/imaginary/backer/0/website" target="_blank"><img src="https://opencollective.com/imaginary/backer/0/avatar.svg"></a>\n<a href="https://opencollective.com/imaginary/backer/1/website" target="_blank"><img src="https://opencollective.com/imaginary/backer/1/avatar.svg"></a>\n<a href="https://opencollective.com/imaginary/backer/2/website" target="_blank"><img src="https://opencollective.com/imaginary/backer/2/avatar.svg"></a>\n<a href="https://opencollective.com/imaginary/backer/3/website" target="_blank"><img src="https://opencollective.com/imaginary/backer/3/avatar.svg"></a>\n<a href="https://opencollective.com/imaginary/backer/4/website" target="_blank"><img src="https://opencollective.com/imaginary/backer/4/avatar.svg"></a>\n<a href="https://opencollective.com/imaginary/backer/5/website" target="_blank"><img src="https://opencollective.com/imaginary/backer/5/avatar.svg"></a>\n<a href="https://opencollective.com/imaginary/backer/6/website" target="_blank"><img src="https://opencollective.com/imaginary/backer/6/avatar.svg"></a>\n<a href="https://opencollective.com/imaginary/backer/7/website" target="_blank"><img src="https://opencollective.com/imaginary/backer/7/avatar.svg"></a>\n<a href="https://opencollective.com/imaginary/backer/8/website" target="_blank"><img src="https://opencollective.com/imaginary/backer/8/avatar.svg"></a>\n<a href="https://opencollective.com/imaginary/backer/9/website" target="_blank"><img src="https://opencollective.com/imaginary/backer/9/avatar.svg"></a>\n<a href="https://opencollective.com/imaginary/backer/10/website" target="_blank"><img src="https://opencollective.com/imaginary/backer/10/avatar.svg"></a>\n<a href="https://opencollective.com/imaginary/backer/11/website" target="_blank"><img src="https://opencollective.com/imaginary/backer/11/avatar.svg"></a>\n<a href="https://opencollective.com/imaginary/backer/12/website" target="_blank"><img src="https://opencollective.com/imaginary/backer/12/avatar.svg"></a>\n<a href="https://opencollective.com/imaginary/backer/13/website" target="_blank"><img src="https://opencollective.com/imaginary/backer/13/avatar.svg"></a>\n<a href="https://opencollective.com/imaginary/backer/14/website" target="_blank"><img src="https://opencollective.com/imaginary/backer/14/avatar.svg"></a>\n<a href="https://opencollective.com/imaginary/backer/15/website" target="_blank"><img src="https://opencollective.com/imaginary/backer/15/avatar.svg"></a>\n<a href="https://opencollective.com/imaginary/backer/16/website" target="_blank"><img src="https://opencollective.com/imaginary/backer/16/avatar.svg"></a>\n<a href="https://opencollective.com/imaginary/backer/17/website" target="_blank"><img src="https://opencollective.com/imaginary/backer/17/avatar.svg"></a>\n<a href="https://opencollective.com/imaginary/backer/18/website" target="_blank"><img src="https://opencollective.com/imaginary/backer/18/avatar.svg"></a>\n<a href="https://opencollective.com/imaginary/backer/19/website" target="_blank"><img src="https://opencollective.com/imaginary/backer/19/avatar.svg"></a>\n<a href="https://opencollective.com/imaginary/backer/20/website" target="_blank"><img src="https://opencollective.com/imaginary/backer/20/avatar.svg"></a>\n<a href="https://opencollective.com/imaginary/backer/21/website" target="_blank"><img src="https://opencollective.com/imaginary/backer/21/avatar.svg"></a>\n<a href="https://opencollective.com/imaginary/backer/22/website" target="_blank"><img src="https://opencollective.com/imaginary/backer/22/avatar.svg"></a>\n<a href="https://opencollective.com/imaginary/backer/23/website" target="_blank"><img src="https://opencollective.com/imaginary/backer/23/avatar.svg"></a>\n<a href="https://opencollective.com/imaginary/backer/24/website" target="_blank"><img src="https://opencollective.com/imaginary/backer/24/avatar.svg"></a>\n<a href="https://opencollective.com/imaginary/backer/25/website" target="_blank"><img src="https://opencollective.com/imaginary/backer/25/avatar.svg"></a>\n<a href="https://opencollective.com/imaginary/backer/26/website" target="_blank"><img src="https://opencollective.com/imaginary/backer/26/avatar.svg"></a>\n<a href="https://opencollective.com/imaginary/backer/27/website" target="_blank"><img src="https://opencollective.com/imaginary/backer/27/avatar.svg"></a>\n<a href="https://opencollective.com/imaginary/backer/28/website" target="_blank"><img src="https://opencollective.com/imaginary/backer/28/avatar.svg"></a>\n<a href="https://opencollective.com/imaginary/backer/29/website" target="_blank"><img src="https://opencollective.com/imaginary/backer/29/avatar.svg"></a>\n\n### Support this project\n\n[![OpenCollective](https://opencollective.com/imaginary/backers/badge.svg)](#backers)\n\n### Sponsors\n\nBecome a sponsor and get your logo on our README on Github with a link to your site. [[Become a sponsor](https://opencollective.com/imaginary#sponsor)]\n\n<a href="https://opencollective.com/imaginary/sponsor/0/website" target="_blank"><img src="https://opencollective.com/imaginary/sponsor/0/avatar.svg"></a>\n<a href="https://opencollective.com/imaginary/sponsor/1/website" target="_blank"><img src="https://opencollective.com/imaginary/sponsor/1/avatar.svg"></a>\n<a href="https://opencollective.com/imaginary/sponsor/2/website" target="_blank"><img src="https://opencollective.com/imaginary/sponsor/2/avatar.svg"></a>\n<a href="https://opencollective.com/imaginary/sponsor/3/website" target="_blank"><img src="https://opencollective.com/imaginary/sponsor/3/avatar.svg"></a>\n<a href="https://opencollective.com/imaginary/sponsor/4/website" target="_blank"><img src="https://opencollective.com/imaginary/sponsor/4/avatar.svg"></a>\n<a href="https://opencollective.com/imaginary/sponsor/5/website" target="_blank"><img src="https://opencollective.com/imaginary/sponsor/5/avatar.svg"></a>\n<a href="https://opencollective.com/imaginary/sponsor/6/website" target="_blank"><img src="https://opencollective.com/imaginary/sponsor/6/avatar.svg"></a>\n<a href="https://opencollective.com/imaginary/sponsor/7/website" target="_blank"><img src="https://opencollective.com/imaginary/sponsor/7/avatar.svg"></a>\n<a href="https://opencollective.com/imaginary/sponsor/8/website" target="_blank"><img src="https://opencollective.com/imaginary/sponsor/8/avatar.svg"></a>\n<a href="https://opencollective.com/imaginary/sponsor/9/website" target="_blank"><img src="https://opencollective.com/imaginary/sponsor/9/avatar.svg"></a>\n<a href="https://opencollective.com/imaginary/sponsor/10/website" target="_blank"><img src="https://opencollective.com/imaginary/sponsor/10/avatar.svg"></a>\n<a href="https://opencollective.com/imaginary/sponsor/11/website" target="_blank"><img src="https://opencollective.com/imaginary/sponsor/11/avatar.svg"></a>\n<a href="https://opencollective.com/imaginary/sponsor/12/website" target="_blank"><img src="https://opencollective.com/imaginary/sponsor/12/avatar.svg"></a>\n<a href="https://opencollective.com/imaginary/sponsor/13/website" target="_blank"><img src="https://opencollective.com/imaginary/sponsor/13/avatar.svg"></a>\n<a href="https://opencollective.com/imaginary/sponsor/14/website" target="_blank"><img src="https://opencollective.com/imaginary/sponsor/14/avatar.svg"></a>\n<a href="https://opencollective.com/imaginary/sponsor/15/website" target="_blank"><img src="https://opencollective.com/imaginary/sponsor/15/avatar.svg"></a>\n<a href="https://opencollective.com/imaginary/sponsor/16/website" target="_blank"><img src="https://opencollective.com/imaginary/sponsor/16/avatar.svg"></a>\n<a href="https://opencollective.com/imaginary/sponsor/17/website" target="_blank"><img src="https://opencollective.com/imaginary/sponsor/17/avatar.svg"></a>\n<a href="https://opencollective.com/imaginary/sponsor/18/website" target="_blank"><img src="https://opencollective.com/imaginary/sponsor/18/avatar.svg"></a>\n<a href="https://opencollective.com/imaginary/sponsor/19/website" target="_blank"><img src="https://opencollective.com/imaginary/sponsor/19/avatar.svg"></a>\n<a href="https://opencollective.com/imaginary/sponsor/20/website" target="_blank"><img src="https://opencollective.com/imaginary/sponsor/20/avatar.svg"></a>\n<a href="https://opencollective.com/imaginary/sponsor/21/website" target="_blank"><img src="https://opencollective.com/imaginary/sponsor/21/avatar.svg"></a>\n<a href="https://opencollective.com/imaginary/sponsor/22/website" target="_blank"><img src="https://opencollective.com/imaginary/sponsor/22/avatar.svg"></a>\n<a href="https://opencollective.com/imaginary/sponsor/23/website" target="_blank"><img src="https://opencollective.com/imaginary/sponsor/23/avatar.svg"></a>\n<a href="https://opencollective.com/imaginary/sponsor/24/website" target="_blank"><img src="https://opencollective.com/imaginary/sponsor/24/avatar.svg"></a>\n<a href="https://opencollective.com/imaginary/sponsor/25/website" target="_blank"><img src="https://opencollective.com/imaginary/sponsor/25/avatar.svg"></a>\n<a href="https://opencollective.com/imaginary/sponsor/26/website" target="_blank"><img src="https://opencollective.com/imaginary/sponsor/26/avatar.svg"></a>\n<a href="https://opencollective.com/imaginary/sponsor/27/website" target="_blank"><img src="https://opencollective.com/imaginary/sponsor/27/avatar.svg"></a>\n<a href="https://opencollective.com/imaginary/sponsor/28/website" target="_blank"><img src="https://opencollective.com/imaginary/sponsor/28/avatar.svg"></a>\n<a href="https://opencollective.com/imaginary/sponsor/29/website" target="_blank"><img src="https://opencollective.com/imaginary/sponsor/29/avatar.svg"></a>\n\n## Authors\n\n- [Tom\xc3\xa1s Aparicio](https://github.com/h2non) - Original author and maintainer.\n- [Kirill Danshin](https://github.com/kirillDanshin) - Co-maintainer since April 2017.\n\n## License\n\nMIT - Tomas Aparicio\n\n[![views](https://sourcegraph.com/api/repos/github.com/h2non/imaginary/.counters/views.svg)](https://sourcegraph.com/github.com/h2non/imaginary)\n'