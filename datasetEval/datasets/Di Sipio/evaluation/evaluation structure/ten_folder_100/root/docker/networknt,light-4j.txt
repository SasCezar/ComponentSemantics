b'A fast, lightweight and cloud-native microservices framework.\n\n[Stack Overflow](https://stackoverflow.com/questions/tagged/light-4j) |\n[Google Group](https://groups.google.com/forum/#!forum/light-4j) |\n[Gitter Chat](https://gitter.im/networknt/light-4j) |\n[Subreddit](https://www.reddit.com/r/lightapi/) |\n[Youtube Channel](https://www.youtube.com/channel/UCHCRMWJVXw8iB7zKxF55Byw) |\n[Documentation](https://doc.networknt.com) |\n[Contribution Guide](https://doc.networknt.com/contribute/) |\n\n[![Build Status](https://travis-ci.org/networknt/light-4j.svg?branch=master)](https://travis-ci.org/networknt/light-4j) [![codecov.io](https://codecov.io/github/networknt/light-4j/coverage.svg?branch=master)](https://codecov.io/github/networknt/light-4j?branch=master)\n\n## Why call it Light-4J\n\nLight means lightweight, lightning fast and shedding light on how to program with modern Java SE for cloud-native deployment.\n\n## Why am I doing it\n\nI had been working on the Java EE platforms since early 2000 and suffered the performance and productivity issues. In 2014, I realized that the IT industry was moving from Monolithic to Microservices and from on-premise data centers to the public clouds. \n\nTo reduce the production cost for my applications, I need to find a lightweight platform that has a small memory footprint,  high throughput, and low latency in Java. Java EE and Spring/Spring Boot are too heavy to be considered. Other lightweight Java platforms all have different issues on the separation between the business logic and technical cross-cutting concerns. Moreover, they are not cloud-native or designed for container/cloud. \n\nWithout finding anything suitable, I started to build my open-source platform light-4j on top of the Undertow HTTP core by following the [principles](https://doc.networknt.com/about/principles/). Because my approach is very radical, and it is against products from big corporations, I have been attacked by some entities online and offline constantly. However, I am so convinced that my approach is the future direction and spend all my effort to continue the development. Today, a lot of companies are using light-4j on production with very positive feedback. It further encourages me to devote myself to the framework and to extend the platform to build an ecosystem.\n\nFor users who benefit from the platform, you can [become a sponsor](https://github.com/sponsors/stevehu) for me so that I can put all my effort into the open-source projects. \n\n## Why use this framework\n\n### Fast and small memory footprint to lower production cost.\n\nIt is 44 times faster than the most popular microservices platform Spring Boot embedded Tomcat and use only 1/5 of memory. Here are the [benchmark](https://github.com/networknt/microservices-framework-benchmark) results compare with Spring Boot and other microservices frameworks. Here is the third party [comparison](https://www.techempower.com/benchmarks/) with other Web frameworks.  \n\n### Provide an embedded gateway to address cross-cutting concerns.\n* Plugin architecture for startup/shutdown hooks and middleware components\n* Distributed OAuth2 JWT security verification as part of the framework\n* Request and response validation against OpenAPI specification at runtime\n* Metrics collected in Influxdb/Prometheus and viewed from Grafana Dashboard for both services and clients\n* Global exception handling for runtime exception, API exception, and other checked exceptions\n* Mask sensitive data like the credit card, sin number, etc. before logging\n* Sanitize cross-site scripting for query parameters, request headers and body\n* Audit to dump important info or entire request and response.\n* Body parser to support different content types\n* Standardized response code and messages from the configuration file\n* Externalized configuration for all modules for the dockerized environment \n* CORS pre-flight handler for SPA (Angular or React) from another domain\n* Rate limiting for services that exposed outside to the Internet\n* Service registry and discovery support direct, Consul and Zookeeper\n* Client-side discovery and load balance to eliminate proxies\n* A client module that is tightly integrated with Light-OAuth2 and supports traceability\n\n### Design and Test driven development to increase productivity\nDesign OpenAPI specification and generate the service from it. The specification is also \npart of the framework to drive security verification and request validation at runtime.\n\nUnit/End-to-End test stubs are generated to enable test driven approach for quality product.\n\nDebugging within IDE just like standalone application for better developer productivity.\n\n### Built-in DevOps flow to support continuous integration to production\n\nDockerfile and DevOps supporting files are generated to support dockerization and continuous\nintegration to production.\n\n### Multiple frameworks for different type of microservices\n\n- [light-rest-4j](https://github.com/networknt/light-rest-4j) is a RESTful microservice framework with OpenAPI specification for code generation and runtime security and validation\n- [light-graphql-4j](https://github.com/networknt/light-graphql-4j) is a GraphQL microservice framework that supports schema generation from IDL and plugin.\n- [light-hybrid-4j](https://github.com/networknt/light-hybrid-4j) is a hybrid microservice framework that takes advantages of both monolithic and microservice architectures.\n- [light-eventuate](https://github.com/networknt/light-eventuate-4j) is a messaging based microservice framework based on Kafka, event sourcing and CQRS\n\n### Multiple languages support\n\nAll the open sourced frameworks are built in Java and we are working on Nodejs framework internally.\nIn the future, we might provide Golang framework as well and all them are sharing the same eco-system\nand market place. \n\n\n### OAuth2 server, portal and services to form ecosystem\n\n[OAuth2 Server](https://github.com/networknt/light-oauth2) for security and [Portal](https://github.com/networknt/light-portal)\nfor production monitor and management. The portal is also a marketplace to link clients and services \ntogether. \n\n\n## Getting Started\n\nThere are two ways to start your project:\n\n### Light-codegen generator\n\nYou can use [light-codegen](https://github.com/networknt/light-codegen) to generate a working project.\nCurrently, it supports light-rest-4j, light-graphql-4j, light-hybrid-server-4j and light-hybrid-service-4j. \nlight-eventuate code generator is coming. \n\nThe light-codegen project README.md describes four ways to use the generator with examples.\n\n* Clone and build the light-codgen and use the codegen-cli command line utility\n* Use docker image networknt/light-codegen to run the codegen-cli command line utility\n* Use generate.sh from [model-config](https://github.com/networknt/model-config) repo to generate projects based on conventions. \n* Generate code from web site with codegen-web API. (API is ready but UI needs to be built) \n\n\n### Starting from an example project\n\nThe other way to start your project is to copy from [light-example-4j](https://github.com/networknt/light-example-4j).\n\nYou can find the description of these [examples](https://www.networknt.com/example/)  \n\nAlso, there are some [tutorials](https://www.networknt.com/tutorial/) \n\n\n## Debugging\n\n[To run/debug from IDE](https://www.networknt.com/tutorial/common/debug/), you need to \nconfigure a Java application with main class "com.networknt.server.Server" and working \ndirectory is your project folder. There is no container and you are working on just a standalone\nJava application.\n\n\n## Start Server\n\n### In IDE\ncreate a Java application that main class is com.networknt.server.Server and working\ndirectory is your project root folder. You can debug your server just like a POJO application.\n\n### From Maven\n\nmvn exec:exec\n\n### Command Line\n\n```\njava -jar target/demo-0.1.0.jar\n```\n\n## Stop Server\n\nyou can use Ctrl+C to kill the server but for production use the following command\n\n```\nkill -s TERM <pid>\n```\n\nThe server has a shutdown hook and the above command allow it to clean up. For example,\ncomplete in-flight requests and close the database connections etc. If service registry\nand discovery is used, then the server will send shutdown event to service registry and\nkeep processing requests for 30 seconds until all clients refreshes their local cache \nbefore shutting down. \n\n## Appreciation\n\n- Light-4j has been optimized by using open source license of [JProfiler](http://www.ej-technologies.com/products/jprofiler/overview.html) \nfrom [ej-technologies](http://www.ej-technologies.com/). \n\n## License\n\nLight-4j and all light-*-4j frameworks are available under the Apache 2.0 license. See the [LICENSE](https://www.apache.org/licenses/LICENSE-2.0) \nfile for more info.\n'