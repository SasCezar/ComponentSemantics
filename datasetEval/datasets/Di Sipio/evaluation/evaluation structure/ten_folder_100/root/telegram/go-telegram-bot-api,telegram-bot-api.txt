b'# Golang bindings for the Telegram Bot API\n\n[![GoDoc](https://godoc.org/github.com/go-telegram-bot-api/telegram-bot-api?status.svg)](http://godoc.org/github.com/go-telegram-bot-api/telegram-bot-api)\n[![Travis](https://travis-ci.org/go-telegram-bot-api/telegram-bot-api.svg)](https://travis-ci.org/go-telegram-bot-api/telegram-bot-api)\n\nAll methods are fairly self explanatory, and reading the godoc page should\nexplain everything. If something isn\'t clear, open an issue or submit\na pull request.\n\nThe scope of this project is just to provide a wrapper around the API\nwithout any additional features. There are other projects for creating\nsomething with plugins and command handlers without having to design\nall that yourself.\n\nJoin [the development group](https://telegram.me/go_telegram_bot_api) if\nyou want to ask questions or discuss development.\n\n## Example\n\nFirst, ensure the library is installed and up to date by running\n`go get -u github.com/go-telegram-bot-api/telegram-bot-api`.\n\nThis is a very simple bot that just displays any gotten updates,\nthen replies it to that chat.\n\n```go\npackage main\n\nimport (\n\t"log"\n\n\t"github.com/go-telegram-bot-api/telegram-bot-api"\n)\n\nfunc main() {\n\tbot, err := tgbotapi.NewBotAPI("MyAwesomeBotToken")\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\n\tbot.Debug = true\n\n\tlog.Printf("Authorized on account %s", bot.Self.UserName)\n\n\tu := tgbotapi.NewUpdate(0)\n\tu.Timeout = 60\n\n\tupdates, err := bot.GetUpdatesChan(u)\n\n\tfor update := range updates {\n\t\tif update.Message == nil { // ignore any non-Message Updates\n\t\t\tcontinue\n\t\t}\n\n\t\tlog.Printf("[%s] %s", update.Message.From.UserName, update.Message.Text)\n\n\t\tmsg := tgbotapi.NewMessage(update.Message.Chat.ID, update.Message.Text)\n\t\tmsg.ReplyToMessageID = update.Message.MessageID\n\n\t\tbot.Send(msg)\n\t}\n}\n```\n\nThere are more examples on the [wiki](https://github.com/go-telegram-bot-api/telegram-bot-api/wiki)\nwith detailed information on how to do many different kinds of things.\nIt\'s a great place to get started on using keyboards, commands, or other\nkinds of reply markup.\n\nIf you need to use webhooks (if you wish to run on Google App Engine),\nyou may use a slightly different method.\n\n```go\npackage main\n\nimport (\n\t"log"\n\t"net/http"\n\n\t"github.com/go-telegram-bot-api/telegram-bot-api"\n)\n\nfunc main() {\n\tbot, err := tgbotapi.NewBotAPI("MyAwesomeBotToken")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tbot.Debug = true\n\n\tlog.Printf("Authorized on account %s", bot.Self.UserName)\n\n\t_, err = bot.SetWebhook(tgbotapi.NewWebhookWithCert("https://www.google.com:8443/"+bot.Token, "cert.pem"))\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tinfo, err := bot.GetWebhookInfo()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tif info.LastErrorDate != 0 {\n\t\tlog.Printf("Telegram callback failed: %s", info.LastErrorMessage)\n\t}\n\tupdates := bot.ListenForWebhook("/" + bot.Token)\n\tgo http.ListenAndServeTLS("0.0.0.0:8443", "cert.pem", "key.pem", nil)\n\n\tfor update := range updates {\n\t\tlog.Printf("%+v\\n", update)\n\t}\n}\n```\n\nIf you need, you may generate a self signed certficate, as this requires\nHTTPS / TLS. The above example tells Telegram that this is your\ncertificate and that it should be trusted, even though it is not\nproperly signed.\n\n    openssl req -x509 -newkey rsa:2048 -keyout key.pem -out cert.pem -days 3560 -subj "//O=Org\\CN=Test" -nodes\n\nNow that [Let\'s Encrypt](https://letsencrypt.org) is available,\nyou may wish to generate your free TLS certificate there.\n'