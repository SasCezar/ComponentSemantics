b'TLSharp\n-------------------------------\n\n[![Build status](https://ci.appveyor.com/api/projects/status/95rl618ch5c4h2fa?svg=true)](https://ci.appveyor.com/project/sochix/tlsharp)\n[![NuGet version](https://badge.fury.io/nu/TLSharp.svg)](https://badge.fury.io/nu/TLSharp)\n\n_Unofficial_ Telegram (http://telegram.org) client library implemented in C#. Latest TL scheme supported, thanks to Afshin Arani\n\n\xf0\x9f\x9a\xa9 Check out [TeleJS](https://github.com/RD17/TeleJS) - a pure JavaScript implementation of Telegram MTP protocol\n\nIt\'s a perfect fit for any developer who would like to send data directly to Telegram users or write own custom Telegram client.\n\n:star2: If you :heart: library, please star it! :star2:\n\n# Table of contents\n\n- [How do I add this to my project?](#how-do-i-add-this-to-my-project)\n- [Dependencies](#dependencies)\n- [Starter Guide](#starter-guide)\n  - [Quick configuration](#quick-configuration)\n  - [First requests](#first-requests)\n  - [Working with files](#working-with-files)\n- [Available Methods](#available-methods)\n- [Contributors](#contributors)\n- [FAQ](#faq)\n- [Donations](#donations)\n- [Support](#support)\n- [License](#license)\n\n# How do I add this to my project?\n\nInstall via NuGet\n\n```\n\t> Install-Package TLSharp\n```\n\nor build from source\n\n1. Clone TLSharp from GitHub\n1. Compile source with VS2015 or MonoDevelop\n1. Add reference to ```TLSharp.Core.dll``` to your awesome project.\n\n# Dependencies\n\nTLSharp has a few dependenices, most of functionality implemented from scratch.\nAll dependencies listed in [package.conf file](https://github.com/sochix/TLSharp/blob/master/TLSharp.Core/packages.config).\n\n# Starter Guide\n\n## Quick Configuration\nTelegram API isn\'t that easy to start. You need to do some configuration first.\n\n1. Create a [developer account](https://my.telegram.org/) in Telegram. \n1. Goto [API development tools](https://my.telegram.org/apps) and copy **API_ID** and **API_HASH** from your account. You\'ll need it later.\n\n## First requests\nTo start work, create an instance of TelegramClient and establish connection\n\n```csharp \n   var client = new TelegramClient(apiId, apiHash);\n   await client.ConnectAsync();\n```\nNow you can work with Telegram API, but ->\n> Only a small portion of the API methods are available to unauthorized users. ([full description](https://core.telegram.org/api/auth)) \n\nFor authentication you need to run following code\n```csharp\n  var hash = await client.SendCodeRequestAsync("<user_number>");\n  var code = "<code_from_telegram>"; // you can change code in debugger\n\n  var user = await client.MakeAuthAsync("<user_number>", hash, code);\n``` \n\nFull code you can see at [AuthUser test](https://github.com/sochix/TLSharp/blob/master/TLSharp.Tests/TLSharpTests.cs#L70)\n\nWhen user is authenticated, TLSharp creates special file called _session.dat_. In this file TLSharp store all information needed for user session. So you need to authenticate user every time the _session.dat_ file is corrupted or removed.\n\nYou can call any method on authenticated user. For example, let\'s send message to a friend by his phone number:\n\n```csharp\n  //get available contacts\n  var result = await client.GetContactsAsync();\n\n  //find recipient in contacts\n  var user = result.Users\n\t  .Where(x => x.GetType() == typeof (TLUser))\n\t  .Cast<TLUser>()\n\t  .FirstOrDefault(x => x.Phone == "<recipient_phone>");\n\t\n  //send message\n  await client.SendMessageAsync(new TLInputPeerUser() {UserId = user.Id}, "OUR_MESSAGE");\n```\n\nFull code you can see at [SendMessage test](https://github.com/sochix/TLSharp/blob/master/TLSharp.Tests/TLSharpTests.cs#L87)\n\nTo send message to channel you could use the following code:\n```csharp\n  //get user dialogs\n  var dialogs = (TLDialogsSlice) await client.GetUserDialogsAsync();\n\n  //find channel by title\n  var chat = dialogs.Chats\n    .Where(c => c.GetType() == typeof(TLChannel))\n    .Cast<TLChannel>()\n    .FirstOrDefault(c => c.Title == "<channel_title>");\n\n  //send message\n  await client.SendMessageAsync(new TLInputPeerChannel() { ChannelId = chat.Id, AccessHash = chat.AccessHash.Value }, "OUR_MESSAGE");\n```\nFull code you can see at [SendMessageToChannel test](https://github.com/sochix/TLSharp/blob/master/TLSharp.Tests/TLSharpTests.cs#L107)\n## Working with files\nTelegram separate files to two categories -> big file and small file. File is Big if its size more than 10 Mb. TLSharp tries to hide this complexity from you, thats why we provide one method to upload files **UploadFile**.\n\n```csharp\n\tvar fileResult = await client.UploadFile("cat.jpg", new StreamReader("data/cat.jpg"));\n```\n\nTLSharp provides two wrappers for sending photo and document\n\n```csharp\n\tawait client.SendUploadedPhoto(new TLInputPeerUser() { UserId = user.Id }, fileResult, "kitty");\n\tawait client.SendUploadedDocument(\n                new TLInputPeerUser() { UserId = user.Id },\n                fileResult,\n                "some zips", //caption\n                "application/zip", //mime-type\n                new TLVector<TLAbsDocumentAttribute>()); //document attributes, such as file name\n```\nFull code you can see at [SendPhotoToContactTest](https://github.com/sochix/TLSharp/blob/master/TLSharp.Tests/TLSharpTests.cs#L125) and [SendBigFileToContactTest](https://github.com/sochix/TLSharp/blob/master/TLSharp.Tests/TLSharpTests.cs#L143)\n\nTo download file you should call **GetFile** method\n```csharp\n\tawait client.GetFile(\n                new TLInputDocumentFileLocation()\n                {\n                    AccessHash = document.AccessHash,\n                    Id = document.Id,\n                    Version = document.Version\n                },\n                document.Size); //size of fileChunk you want to retrieve\n```\n\nFull code you can see at [DownloadFileFromContactTest](https://github.com/sochix/TLSharp/blob/master/TLSharp.Tests/TLSharpTests.cs#L167)\n\n# Available Methods\n\nFor your convenience TLSharp have wrappers for several Telegram API methods. You could add your own, see details below.\n\n1. IsPhoneRegisteredAsync\n1. SendCodeRequestAsync\n1. MakeAuthAsync\n1. SignUpAsync\n1. GetContactsAsync\n1. SendMessageAsync\n1. SendTypingAsync\n1. GetUserDialogsAsync\n1. SendUploadedPhoto\n1. SendUploadedDocument\n1. GetFile\n1. UploadFile\n1. SendPingAsync\n1. GetHistoryAsync\n\n**What if you can\'t find needed method at the list?**\n\nDon\'t panic. You can call any method with help of `SendRequestAsync` function. For example, send user typing method: \n\n```csharp\n\n  //Create request \n  var req = new TLRequestSetTyping()\n  {\n    Action = new TLSendMessageTypingAction(),\n    Peer = new TLInputPeerUser() { UserId = user.Id }\n  };\n\n  //run request, and deserialize response to Boolean\n  return await client.SendRequestAsync<Boolean>(req);\n``` \n\n**Where you can find a list of requests and its params?**\n\nThe only way is [Telegram API docs](https://core.telegram.org/methods). Yes, it\'s outdated. But there is no other source.\nLatest scheme in JSON format you can find [here](https://gist.github.com/aarani/b22b7cda024973dff68e1672794b0298)\n\n## What things can I Implement (Project Roadmap)?\n\n### Release 1.0.0\n\n* [DONE] Add PHONE_MIGRATE handling\n* [DONE] Add FILE_MIGRATE handling\n* Add Updates handling\n* [DONE] Add NuGet package\n* [DONE] Add wrappers for media uploading and downloading\n* Store user session as JSON\n\n# FAQ\n\n#### What API layer is supported?\nThe latest one - 66. Thanks to Afshin Arani for his TLGenerator\n\n#### I get a xxxMigrationException or a MIGRATE_X error!\n\nTLSharp library should automatically handle these errors. If you see such errors, please open a new Github issue with the details (include a stacktrace, etc.).\n\n#### I get an exception: System.IO.EndOfStreamException: Unable to read beyond the end of the stream. All test methos except that AuthenticationWorks and TestConnection return same error. I did every thing including setting api id and hash, and setting server address.-\n\nYou should create a Telegram session. See [configuration guide](#sending-messages-set-up)\n\n#### Why do I get a FloodException/FLOOD_WAIT error?\nIt\'s likely [Telegram restrictions](https://core.telegram.org/api/errors#420-flood), or a bug in TLSharp (if you feel it\'s the latter, please open a Github issue). You can know the time to wait by accessing the FloodException::TimeToWait property.\n\n#### Why does TLSharp lacks feature XXXX?\n\nTLSharp only covers basic functionality of the Telegram protocol, you can be a contributor or a sponsor to speed-up developemnt of any more new features.\n\n#### Where else to ask for help?\nIf you think you have found a bug in TLSharp, create a github issue. But if you just have questions about how to use TLSharp, use our gitter channel (https://gitter.im/TLSharp/Lobby) or our Telegram channel (https://t.me/joinchat/AgtDiBEqG1i-qPqttNFLbA).\n\n**Attach following information**:\n\n* Full problem description and exception message\n* Stack-trace\n* Your code that runs in to this exception\n\nWithout information listen above your issue will be closed. \n\n# Donations\nThanks for donations! It\'s highly appreciated. \n<a href="https://www.paypal.me/IPirozhenko" title="Support project"><img src="https://img.shields.io/badge/Support%20project-paypal-brightgreen.svg"></a>\n\nList of donators:\n* [mtbitcoin](https://github.com/mtbitcoin)\n\n# Support\nIf you have troubles while using TLSharp, I can help you for an additional fee. \n\nMy pricing is **219$/hour**. I accept PayPal. To request a paid support write me at Telegram @sochix, start your message with phrase [PAID SUPPORT].\n\n# Contributors\n* [Afshin Arani](http://aarani.ir) - TLGenerator, and a lot of other usefull things\n* [Knocte](https://github.com/knocte)\n\n# License\n\n**Please, provide link to an author when you using library**\n\nThe MIT License\n\nCopyright (c) 2015 Ilya Pirozhenko http://www.sochix.ru/\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n'