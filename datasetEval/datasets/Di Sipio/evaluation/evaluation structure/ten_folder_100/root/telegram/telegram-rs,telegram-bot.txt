b'Rust Telegram Bot Library\n=========================\n[![Build Status](https://img.shields.io/travis/telegram-rs/telegram-bot/master.svg)](https://travis-ci.org/telegram-rs/telegram-bot)\n[![Tests](https://github.com/telegram-rs/telegram-bot/workflows/Tests/badge.svg)](https://github.com/telegram-rs/telegram-bot/actions?workflow=Tests)\n[![Tests](https://github.com/telegram-rs/telegram-bot/workflows/Fmt/badge.svg)](https://github.com/telegram-rs/telegram-bot/actions?workflow=Fmt)\n[![License](https://img.shields.io/github/license/telegram-rs/telegram-bot.svg)]()\n[![Crates.io](https://img.shields.io/crates/v/telegram-bot.svg)](https://crates.io/crates/telegram-bot)\n\n<table>\n  <tbody>\n    <tr>\n      <td><b>Documentation:</b></td>\n      <td><a href="https://docs.rs/telegram-bot/">Latest crates.io version</a></td>\n      <td><a href="https://telegram-rs.github.io/telegram-bot/telegram_bot/"><code>master</code></a></td>\n    </tr>\n  </tbody>\n</table>\n\nA library for writing your own [Telegram](https://telegram.org/) bots. More information [here](https://core.telegram.org/bots). Official API [here](https://core.telegram.org/bots/api).\n\n## Example\nHere is a simple example (see [`example/simple.rs`](https://github.com/telegram-rs/telegram-bot/blob/master/lib/examples/simple.rs)):\n\n``` rust\nuse std::env;\n\nuse futures::StreamExt;\nuse telegram_bot::*;\n\n#[tokio::main]\nasync fn main() -> Result<(), Error> {\n    let token = env::var("TELEGRAM_BOT_TOKEN").expect("TELEGRAM_BOT_TOKEN not set");\n    let api = Api::new(token);\n\n    // Fetch new updates via long poll method\n    let mut stream = api.stream();\n    while let Some(update) = stream.next().await {\n        // If the received update contains a new message...\n        let update = update?;\n        if let UpdateKind::Message(message) = update.kind {\n            if let MessageKind::Text { ref data, .. } = message.kind {\n                // Print received text message to stdout.\n                println!("<{}>: {}", &message.from.first_name, data);\n\n                // Answer message with "Hi".\n                api.send(message.text_reply(format!(\n                    "Hi, {}! You just wrote \'{}\'",\n                    &message.from.first_name, data\n                )))\n                .await?;\n            }\n        }\n    }\n    Ok(())\n}\n```\nYou can find a bigger examples in the `examples`.\n\n## Usage\nThis library is available via `crates.io`. In order to use it, just add this to your `Cargo.toml`:\n\n```\ntelegram-bot = "0.6"\n```\n\nThe library allows you to do E2E-testing of your bot easily: just specify `TELEGRAM_API_URL` environment variable to point to your fake Telegram test server.\nA lot of diagnostic information can be collected with [tracing](https://crates.io/crates/tracing) framework, see [`example/tracing.rs`](https://github.com/telegram-rs/telegram-bot/blob/master/lib/examples/tracing.rs)).\n\n## Collaboration\nYes please! Every type of contribution is welcome: Create issues, hack some code or make suggestions. Don\'t know where to start? Good first issues are tagged with [up for grab](https://github.com/telegram-rs/telegram-bot/issues?q=is%3Aissue+is%3Aopen+label%3A%22up+for+grab%22).\n'