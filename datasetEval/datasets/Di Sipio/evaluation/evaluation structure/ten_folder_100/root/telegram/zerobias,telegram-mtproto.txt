b'# \xe2\x80\xbc\xef\xb8\x8f **Better use [Telethon](https://lonamiwebs.github.io/Telethon/)**\n\nIt does have docs\n\n\n# telegram-mtproto\n\n[![npm version][npm-image]][npm-url]\n\n**Telegram Mobile Protocol** [(MTProto)](https://core.telegram.org/mtproto) library in **es6**\n\n## About MTProto..\n\n**MTProto** is the [Telegram Messenger](http://www.telegram.org) protocol\n_"designed for access to a server API from applications running on mobile devices"_.\n\nThe Mobile Protocol is subdivided into three components ([from the official site](https://core.telegram.org/mtproto#general-description)):\n\n - High-level component (API query language): defines the method whereby API\n queries and responses are converted to binary messages.\n\n - Cryptographic (authorization) layer: defines the method by which messages\n are encrypted prior to being transmitted through the transport protocol.\n\n - Transport component: defines the method for the client and the server to transmit\n messages over some other existing network protocol (such as, http, https, tcp, udp).\n\n\n\n## telegram-mtproto in short..\n\nNo more additional libs.\nThe **telegram-mtproto** library implements the **Mobile Protocol** and provides all features for work with telegram protocol:\n\n - A high level api for server connection\n\n - Promise-based API\n\n - **HTTP connections** implemented in the transport layer\n\n - **Web worker** support for blazing fast crypto math works in background\n\n - A cipher implementation for **AES and RSA encryption** in the security layer\n\n - Both **plain-text and encrypted message** to communicate data with the server\n\n - **Diffie-Hellman key exchange** supported by the **prime factorization** function implemented in the security layer\n\n - **MTProto TL-Schema** compilation as **javascript classes and functions**\n\n - Custom **async storage** support for saving user data between sessions\n\n\n## Installation\n\n```bash\n$ npm install --save telegram-mtproto@beta\n```\n\n## Usage\n\n```javascript\nimport MTProto from \'telegram-mtproto\'\n\nconst phone = {\n  num : \'+9996620001\',\n  code: \'22222\'\n}\n\nconst api = {\n  layer          : 57,\n  initConnection : 0x69796de9,\n  api_id         : 49631\n}\n\nconst server = {\n  dev: true //We will connect to the test server.\n}           //Any empty configurations fields can just not be specified\n\nconst client = MTProto({ server, api })\n\nasync function connect(){\n  const { phone_code_hash } = await client(\'auth.sendCode\', {\n    phone_number  : phone.num,\n    current_number: false,\n    api_id        : 49631,\n    api_hash      : \'fb050b8f6771e15bfda5df2409931569\'\n  })\n  const { user } = await client(\'auth.signIn\', {\n    phone_number   : phone.num,\n    phone_code_hash: phone_code_hash,\n    phone_code     : phone.code\n  })\n\n  console.log(\'signed as \', user)\n}\n\nconnect()\n```\n\nAbove we used two functions from the API.\n```typescript\ntype auth.sendCode = (phone_number: string, sms_type: int,\n  api_id: int, api_hash: string, lang_code: string) => {\n    phone_registered: boolean,\n    phone_code_hash: string,\n    send_call_timeout: int,\n    is_password: boolean\n  }\n\ntype auth.signIn = (phone_number: string, phone_code_hash: string, phone_code: string) => {\n  expires: int,\n  user: User\n}\n```\n[More][send-code] about [them][sign-in], as well as about many other methods, you can read in the [official documentation][docs].\n\nAdditional examples can be obtained from [examples][examples] folder.\n\n## Storage\n\nYou can use your own storages like [localForage][localForage] for saving data.\nModule accepts the following interface\n\n```typescript\ninterface AsyncStorage {\n  get(key: string): Promise<any>;\n  set(key: string, value: any): Promise<void>;\n  remove(...keys: string[]): Promise<void>;\n  clear(): Promise<void>;\n}\n```\n\n```javascript\nimport { MTProto } from \'telegram-mtproto\'\nimport { api } from \'./config\'\nimport CustomStorage from \'./storage\'\n\nconst client = MTProto({\n  api,\n  app: {\n    storage: CustomStorage\n  }\n})\n\n```\n\n## License\n\nThe project is released under the [Mit License](./LICENSE)\n\n[examples]: https://github.com/zerobias/telegram-mtproto/tree/develop/examples\n[localForage]: https://github.com/localForage/localForage\n[docs]: https://core.telegram.org/\n[send-code]: https://core.telegram.org/method/auth.sendCode\n[sign-in]: https://core.telegram.org/method/auth.signIn\n[npm-url]: https://www.npmjs.org/package/telegram-mtproto\n[npm-image]: https://badge.fury.io/js/telegram-mtproto.svg\n'