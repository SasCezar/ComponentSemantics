b'<div align = "center">\n<img src="Assets/Logo.png" width="700" />\n</div>\n\n<p align="center">\n<img src="https://img.shields.io/badge/Swift-4.0-orange.svg" alt="Swift 4.0"/>\n<img src="https://img.shields.io/badge/platform-iOS-brightgreen.svg" alt="Platform: iOS"/>\n<img src="https://img.shields.io/badge/Xcode-9%2B-brightgreen.svg" alt="XCode 9+"/>\n<img src="https://img.shields.io/badge/iOS-11%2B-brightgreen.svg" alt="iOS 11"/>\n<img src="https://img.shields.io/badge/licence-MIT-lightgray.svg" alt="Licence MIT"/>\n</a>\n</p>\n\n# Alerts & Pickers\n\nAdvanced usage of native UIAlertController with TextField, TextView, DatePicker, PickerView, TableView, CollectionView and MapView.\n\n\n\n### Features\n- [x] Custom pickers based on UITextField, UITextView, UIDatePicker, UIPickerView, UITableView, UICollectionView and MKMapView.\n- [x] Example using a Storyboard.\n- [x] Easy contentViewController placement.\n- [x] Attributed title label and message label.\n- [x] Button customization: image and title color.\n- [x] Understandable action button placement.\n- [x] Easy presentation.\n- [x] Pure Swift 4.\n\n<div align = "center">\n<img src="Assets/gifs/actionSheet-.gif" width="400" />\n<img src="Assets/gifs/alert-.gif" width="400" />\n</div>\n\n## Usage\n\n<div align = "center">\n<img src="Assets/gifs/actionSheet-simple.gif" width="350" />\n<img src="Assets/gifs/alert-simple.gif" width="350" />\n</div>\n\n- New Alert\n\n```swift\nlet alert = UIAlertController(style: .alert, title: "Title", message: "Message")\n// or\nlet alert = UIAlertController(style: .alert)\n```\n\n- Set and styling title\n\n```swift\nalert.set(title: "Title", font: .systemFont(ofSize: 20), color: .black)\n// or\nalert.setTitle(font: .systemFont(ofSize: 20), color: .black)\n```\n\n- Set and styling message\n\n```swift\nalert.set(message: "Message", font: .systemFont(ofSize: 16), color: .black)\n// or\nalert.setMessage(font: .systemFont(ofSize: 16), color: .black)\n```\n- Add button with image\n\n```swift\nalert.addAction(image: image, title: "Title", color: .black, style: .default) { action in\n    // completion handler\n}\n```\n\n* Show Alert\n\n```swift\n// show alert\nalert.show()\n\n// or show alert with options\nalert.show(animated: true, vibrate: true) {\n    // completion handler\n}\n```\n<div align = "center">\n<img src="Assets/gifs/actionSheet-simple-image.gif" width="350" />\n<img src="Assets/gifs/alert-simple-image.gif" width="350" />\n</div>\n\n\n## Set Content ViewController\n\nWhen setting your own custom `UIViewController` into `UIAlertController` keep in mind to set `prefferedContentSize.height` of the controller otherwise it will no effect. You can not set `prefferedContentSize.width`.\n\n```swift\nlet alert = UIAlertController(style: .alert, title: "Title")\nlet vc = CustomViewController()\nvc.preferredContentSize.height = height\nalert.setValue(vc, forKey: "contentViewController")\nalert.show()\n\n// or\nlet alert = UIAlertController(style: .alert, title: "Title")\nlet vc = CustomViewController()\nalert.set(vc: vc, height: height)\nalert.show()\n```\n\n## Pickers\nFor UX better to use `.actionSheet` style in `UIAlertController` when set picker into `contentViewController`. If you like you can use `.alert` style as well, buy `.actionSheet` style is wider and User can see more as well as action button is placing at bottom that also more convenience for User to touch it.\n\n**UITextField**\nIn native UIAlertController you can only add `UITextField` to `.alert` style with default style and you can not change such properties as `.borderColor`, `.borderWidth`, `.frame.size` and so on. But if you make your own `UIViewController` with `UITextField`, it will solve all these problems.\n\n## One TextField Picker\n\nYou can use both styles `.alert` and `.actionSheet` of `UIAlertController`.\n\n<div align = "center">\n<img src="Assets/gifs/actionSheet-textField-1.gif" width="350" />\n<img src="Assets/gifs/alert-textField-1.gif" width="350" />\n</div>\n\n```swift\nlet alert = UIAlertController(style: self.alertStyle, title: "TextField")                  \nlet config: TextField.Config = { textField in\n    textField.becomeFirstResponder()\n    textField.textColor = .black\n    textField.placeholder = "Type something"\n    textField.left(image: image, color: .black)\n    textField.leftViewPadding = 12\n    textField.borderWidth = 1\n    textField.cornerRadius = 8\n    textField.borderColor = UIColor.lightGray.withAlphaComponent(0.5)\n    textField.backgroundColor = nil\n    textField.keyboardAppearance = .default\n    textField.keyboardType = .default\n    textField.isSecureTextEntry = true\n    textField.returnKeyType = .done\n    textField.action { textField in\n        // validation and so on\n    }\n}              \nalert.addOneTextField(configuration: config)\nalert.addAction(title: "OK", style: .cancel)\nalert.show()\n```\n\n## Two TextFields Picker\n\nYou can use both styles `.alert` and `.actionSheet` of `UIAlertController`.\n\n<div align = "center">\n<img src="Assets/gifs/actionSheet-textField-2.gif" width="350" />\n<img src="Assets/gifs/alert-textField-2.gif" width="350" />\n</div>\n\n```swift\nlet alert = UIAlertController(style: .alert, title: "Login")\n\nlet configOne: TextField.Config = { textField in\n    textField.left(image: user), color: .black)\n    textField.leftViewPadding = 16\n    textField.leftTextPadding = 12\n    textField.becomeFirstResponder()\n    textField.backgroundColor = nil\n    textField.textColor = .black\n    textField.placeholder = "Name"\n    textField.clearButtonMode = .whileEditing\n    textField.keyboardAppearance = .default\n    textField.keyboardType = .default\n    textField.returnKeyType = .done\n    textField.action { textField in\n        // action with input\n    }\n}\n\nlet configTwo: TextField.Config = { textField in\n    textField.textColor = .black\n    textField.placeholder = "Password"\n    textField.left(image: lock, color: .black)\n    textField.leftViewPadding = 16\n    textField.leftTextPadding = 12\n    textField.borderWidth = 1\n    textField.borderColor = UIColor.lightGray.withAlphaComponent(0.5)\n    textField.backgroundColor = nil\n    textField.clearsOnBeginEditing = true\n    textField.keyboardAppearance = .default\n    textField.keyboardType = .default\n    textField.isSecureTextEntry = true\n    textField.returnKeyType = .done\n    textField.action { textField in\n        // action with input\n    }\n}\n// vInset - is top and bottom margin of two textFields   \nalert.addTwoTextFields(vInset: 12, textFieldOne: configOne, textFieldTwo: configTwo)\nalert.addAction(title: "OK", style: .cancel)\nalert.show()\n```\n\n## DatePicker\n\n`UIDatePicker` does not look very much in `.alert` style.\n\n<div align = "center">\n<img src="Assets/gifs/actionSheet-datePicker.gif" width="350" />\n<img src="Assets/gifs/alert-datePicker.gif" width="350" />\n</div>\n\n```swift\nlet alert = UIAlertController(style: .actionSheet, title: "Select date")\nalert.addDatePicker(mode: .dateAndTime, date: date, minimumDate: minDate, maximumDate: maxDate) { date in\n    // action with selected date\n}\nalert.addAction(title: "OK", style: .cancel)\nalert.show()\n```\n\n## PickerView\n\nExample how to use `UIPickerView` as `contentViewController` and change height of the `UIAlertController`.\n\n<div align = "center">\n<img src="Assets/gifs/actionSheet-pickerView.gif" width="350" />\n<img src="Assets/gifs/alert-pickerView.gif" width="350" />\n</div>\n\n```swift\nlet alert = UIAlertController(style: .actionSheet, title: "Picker View", message: "Preferred Content Height")\n\nlet frameSizes: [CGFloat] = (150...400).map { CGFloat($0) }\nlet pickerViewValues: [[String]] = [frameSizes.map { Int($0).description }]\nlet pickerViewSelectedValue: PickerViewViewController.Index = (column: 0, row: frameSizes.index(of: 216) ?? 0)\n\nalert.addPickerView(values: pickerViewValues, initialSelection: pickerViewSelectedValue) { vc, picker, index, values in\n    DispatchQueue.main.async {\n        UIView.animate(withDuration: 1) {\n            vc.preferredContentSize.height = frameSizes[index.row]\n        }\n    }\n}\nalert.addAction(title: "Done", style: .cancel)\nalert.show()\n```\n\n## Locale Pickers\n\n* #### Country Picker\n\n<div align = "center">\n<img src="Assets/gifs/actionSheet-countryPicker.gif" width="350" />\n<img src="Assets/gifs/alert-countryPicker.gif" width="350" />\n</div>\n\n```swift\nlet alert = UIAlertController(style: .actionSheet, message: "Select Country")\nalert.addLocalePicker(type: .country) { info in\n    // action with selected object\n}\nalert.addAction(title: "OK", style: .cancel)\nalert.show()\n```\n\n* #### Phone Code Picker\n\n<div align = "center">\n<img src="Assets/gifs/actionSheet-phoneCodePicker.gif" width="350" />\n<img src="Assets/gifs/alert-phoneCodePicker.gif" width="350" />\n</div>\n\n```swift\nlet alert = UIAlertController(style: .actionSheet, title: "Phone Codes")\nalert.addLocalePicker(type: .phoneCode) { info in\n    // action with selected object\n}\nalert.addAction(title: "OK", style: .cancel)\nalert.show()\n```\n\n* #### Currency Picker\n\n<div align = "center">\n<img src="Assets/gifs/actionSheet-currencyPicker.gif" width="350" />\n<img src="Assets/gifs/alert-currencyPicker.gif" width="350" />\n</div>\n\n```swift\nlet alert = UIAlertController(style: .actionSheet, title: "Currencies")\nalert.addLocalePicker(type: .currency) { info in\n    alert.title = info?.currencyCode\n    alert.message = "is selected"\n    // action with selected object\n}\nalert.addAction(title: "OK", style: .cancel)\nalert.show()\n```\n\n## Image Picker\n\n<div align = "center">\n<img src="Assets/gifs/actionSheet-imagePicker-h.gif" width="350" />\n<img src="Assets/gifs/actionSheet-imagePicker-v.gif" width="350" />\n</div>\n\n* Horizontal Image Picker with paging and single selection:\n\n```swift\nlet alert = UIAlertController(style: .actionSheet)\nlet photos: [UIImage] = images\nalert.addImagePicker(\n    flow: .horizontal,\n    paging: true,\n    images: photos,\n    selection: .single(action: { [unowned self] image in\n        // action with selected image\n    }))\nalert.addAction(title: "OK", style: .cancel)\nalert.show()\n```\n\n* Vertical Image Picker w/o paging and with multiple selection:\n\n```swift\nlet alert = UIAlertController(style: .actionSheet)\nlet photos: [UIImage] = images\nalert.addImagePicker(\n    flow: .vertical,\n    paging: false,\n    height: UIScreen.main.bounds.height,\n    images: photos,\n    selection: .multiple(action: { [unowned self] images in\n        // action with selected images\n    }))\nalert.addAction(title: "OK", style: .cancel)\nalert.show()\n```\n\n## PhotoLibrary Picker\n\n<div align = "center">\n<img src="Assets/gifs/actionSheet-photoLibraryPicker.gif" width="350" />\n</div>\n\n```swift\nlet alert = UIAlertController(style: .actionSheet)\nalert.addPhotoLibraryPicker(\n    flow: .horizontal,\n    paging: true,\n    selection: .single(action: { image in\n        // action with selected image\n    }))\nalert.addAction(title: "Cancel", style: .cancel)\nalert.show()\n```\n\n## ColorPicker\n\nExample how to use UIViewController instantiated from Storyboard with Autolayout as `contentViewController` in the `UIAlertController`.\n\n<div align = "center">\n<img src="Assets/gifs/actionSheet-colorPicker.gif" width="350" />\n<img src="Assets/gifs/alert-colorPicker.gif" width="350" />\n</div>\n\n```swift\nlet alert = UIAlertController(style: .actionSheet)\nalert.addColorPicker(color: color) { color in\n    // action with selected color\n}\nalert.addAction(title: "Done", style: .cancel)\nalert.show()\n```\n\n## Contacts Picker\n\n<div align = "center">\n<img src="Assets/gifs/actionSheet-contactsPicker.gif" width="350" />\n<img src="Assets/gifs/alert-contactsPicker.gif" width="350" />\n</div>\n\n```swift\nlet alert = UIAlertController(style: .actionSheet)\nalert.addContactsPicker { contact in\n    // action with contact\n}\nalert.addAction(title: "Cancel", style: .cancel)\nalert.show()\n```\n\n## Location Picker\n\n<div align = "center">\n<img src="Assets/gifs/actionSheet-locationPicker.gif" width="350" />\n</div>\n\n```swift\nlet alert = UIAlertController(style: .actionSheet)\nalert.addLocationPicker { location in\n    // action with location\n}\nalert.addAction(title: "Cancel", style: .cancel)\nalert.show()\n```\n\n## Telegram Picker\n\n<div align = "center">\n<img src="Assets/gifs/actionSheet-telegramPicker.gif" width="350" />\n</div>\n\n```swift\nlet alert = UIAlertController(style: .actionSheet)\nalert.addTelegramPicker { result in\n    switch result {\n      case .photo(let assets):\n        // action with assets\n      case .contact(let contact):\n        // action with contact\n      case .location(let location):\n        // action with location\n    }\n}\nalert.addAction(title: "Cancel", style: .cancel)\nalert.show()\n```\n\n## TextViewer\n\n<div align = "center">\n<img src="Assets/gifs/actionSheet-textViewer.gif" width="350" />\n<img src="Assets/gifs/alert-textViewer.gif" width="350" />\n</div>\n\n```swift\nlet alert = UIAlertController(style: .actionSheet)\nalert.addTextViewer(text: .attributedText(text))\nalert.addAction(title: "OK", style: .cancel)\nalert.show()\n```\n\n\n## Alerts vs. Action Sheets\n\nThere are some things to keep in mind when using `.actionSheet` and `.alert` styles:\n\n* Pickers better to use in `.actionSheet` style.\n* `UITextField` can be used in both styles.\n\n## Installing\n\n#### Manually\n\nDownload and drop `/Source` folder in your project.\n\n## Requirements\n\n* Swift 4\n* iOS 11 or higher\n\n## Authors\n\n* **Roman Volodko** -  [dillidon](https://github.com/dillidon)\n\n## Communication\n\n* If you **found a bug**, open an issue.\n* If you **have a feature request**, open an issue.\n* If you **want to contribute**, submit a pull request.\n\n## License\n\nThis project is licensed under the MIT License.\n'