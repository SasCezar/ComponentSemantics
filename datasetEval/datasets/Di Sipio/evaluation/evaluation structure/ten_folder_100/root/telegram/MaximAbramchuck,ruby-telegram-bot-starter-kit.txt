b"# Ruby Telegram Bot boilerplate\n![Ruby and Telegram](https://hsto.org/files/914/1c2/d17/9141c2d17d074b8d8758a955f7fd575a.png)\n\n## UPD (20.06.2016)\nI've created an awesome list of resources related to bots (from tutorials and SDKs to the events and people). Be sure to [check it out](https://github.com/BotCube/awesome-bots)!\n\n[Awesome bots list](https://github.com/BotCube/awesome-bots)\n\nIf you want to use Webhooks API instead of long-polling, be able to save state and create more scalable and powerful bot read the article below.\n\n[Full guide on creating statefull Telegram bot](https://botcube.co/blog/2017/02/04/full-guide-on-creating-telegram-bot-with-rails.html)\n\n## Features\n* Ability to save some data to a local database (Postgres by default)\n* Automatic logging of received and sent message\n* Easy internationalization using i18n gem\n* Already created class for creating [custom keyboards](https://core.telegram.org/bots#keyboards)\n* Database logging\n* Separate classes for all the functional, so it's very easy to customize something\n\n## Usage\n\n### Defining responses\n\nUse the `on` method in `message_responder.rb` like in the example below:\n\n```ruby\ndef respond\n  on /^\\/start/ do\n    answer_with_greeting_message\n  end\n\n  on /^\\/command (.+)/ do |arg| #supports up to two arguments but it is easily extendable\n    # do your stuff\n  end\nend\n```\n\n### Running the bot\nFor the first you need to install gems required to start a bot:\n\n```sh\nbundle install\n```\n\nThen you need to create `secrets.yml` where your bot unique token will be stored and `database.yml` where database credentials will be stored. I've already created samples for you, so you can easily do:\n\n```sh\ncp config/database.yml.sample config/database.yml\ncp config/secrets.yml.sample config/secrets.yml\n```\n\nThen you need to fill your [Telegram bot unique token](https://core.telegram.org/bots#botfather) to the `secrets.yml` file and your database credentials to `database.yml`.\n\nAfter this you need to create and migrate your database:\n\n```sh\nrake db:create db:migrate\n```\n\nGreat! Now you can easily start your bot just by running this command:\n\n```sh\nbin/bot\n```\n\n## Directory layout\n\n### Source\n\n```sh\n\xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 ruby-telegram-bot-boilerplate\n    \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 bin                              # executables folder\n    \xe2\x94\x82   \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 bot                          # main executable file\n    \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 config                           # folder with configs\n    \xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 database.yml.sample          # sample database configuration\n    \xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 secrets.yml.sample           # sample credentials file\n    \xe2\x94\x82   \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 locales.yml                  # file with i18n locales\n    \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 db                               # database related stuff\n    \xe2\x94\x82   \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 migrate                      # migrations\n    \xe2\x94\x82       \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 001_create_users.rb      # migration for creating table 'users'\n    \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 lib                              # helper libs folder\n    \xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 app_configurator.rb          # class for application configuration\n    \xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 database_connector.rb        # class for connecting to database\n    \xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 message_responder.rb         # main class for responding to message\n    \xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 message_sender.rb            # simple class just for message sending\n    \xe2\x94\x82   \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 reply_markup_formatter.rb    # class for creating custom keyboards\n    \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 models                           # database models folder\n    \xe2\x94\x82   \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 user.rb                      # active record User model\n    \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 Gemfile                          # Gemfile\n    \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 Gemfile.lock                     # Gemfile.lock\n    \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 README.md                        # Readme file\n    \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 Rakefile                         # Rakefile with tasks for database management\n```\n\nSome more specific info you can also find [here](https://github.com/atipugin/telegram-bot-ruby).\n\n## Contributing\n\nIf you have some proposals how to improve this boilerplate feel free to open issues and send pull requests!\n\n1. Fork it\n2. Create your feature branch (git checkout -b my-new-feature)\n3. Commit your changes (git commit -am 'Add some feature')\n4. Push to the branch (git push origin my-new-feature)\n5. Create new Pull Request\n"