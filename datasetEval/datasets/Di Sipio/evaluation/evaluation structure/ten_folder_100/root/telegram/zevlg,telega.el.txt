b'# ![logo](etc/telega-logo64.png) telega.el [![Telegram chat](https://img.shields.io/badge/chat-%40emacs__telega-%2335ADE1)](https://t.me/emacs_telega) [![TDLib](https://img.shields.io/badge/tdlib-v1.5.0-%2335ADE1)](https://github.com/tdlib/td)\n\n`telega.el` is full featured unofficial client for\n[Telegram](https://telegram.org "Telegram") platform for [GNU\nEmacs](https://www.gnu.org/software/emacs/ "GNU Emacs").\n\n`telega.el` is actively developed, for this reason, some features are\nnot implemented, or they are present just as skeleton for future\nimplementation. However, the core parts are mature enough so that it\nis possible to use `telega.el` for basic chat.\n\n# Features\n\nIn some random order:\n\n- [x] Listing chats, reordering chats according to internal Telegram\n      order\n- [x] Getting info about users, groups and supergroups\n- [x] Joining chats by invitation link `M-x telega-chat-join-by-link RET`\n- [x] Fetching chat history, sending messages, replies, edits, deleting\n- [x] Resend failed messages\n- [x] Creating new groups, upgrading basicgroup to supergroup\n- [x] Forwarding messages\n- [x] D-Bus notifications on incoming messages in chats with enabled\n      notifications\n- [x] VoIP calls, including D-Bus call notification\n- [x] Downloading files from the cloud\n- [x] Uploading files/media (also pasting images from clipboard) to the cloud\n- [x] Display chat actions, such as "@user is typing..."\n- [x] Display/Update chat\'s draft message\n- [x] Company backends for emoji (`:<emoji>` syntax), usernames,\n      hashtags, bot commands completions\n- [x] Secret chats\n- [x] Online global searching chats/contacts/messages\n- [X] Avatars, Photos, Stickers\n- [x] Animated GIF, via ffplay\n- [x] Special messages such as location/live location, voice/video\n      messages, contacts, etc (PARTLY)\n- [x] Poll messages, Poll creation\n- [x] Handling local links, such as "tg:" or "https://t.me/xxx" (PARTLY)\n- [x] ReplyMarkup (inline keyboard buttons) in the messages (PARTLY)\n- [x] InstantView for web pages\n- [x] Blocking/Unblocking users, listing blocked users\n- [x] Inline bots requests, via "@bot query<TAB>"\n- [ ] Searching for messages in chat\n- [ ] Shared media\n- [ ] Traffic control, see [telega#62](https://github.com/zevlg/telega.el/issues/62)\n- [ ] [TranslationsPlatform](https://translations.telegram.org) support\n- [ ] Delayed messages, see [TDLib#695](https://github.com/tdlib/td/issues/695)\n- [ ] Cloud themes, see [TDLib#691](https://github.com/tdlib/td/issues/691)\n\n## Unique features\n\n- [x] Expressive `ibuffer`-like chats filtering\n- [x] Custom order for chats (some chats on top, some chats on bottom, etc)\n- [x] Labeled chats, you can assign custom label to chat\n- [x] Client side messages filtering\n- [x] Get diff for the message edits, see [screenshot](https://zevlg.github.io/telega/screen-13.png)\n\n# Screenshots\n\nRoot buffer screen:\n\n![screen14](https://zevlg.github.io/telega/screen-14.png)\n\nChat in [@emacs_en](https://t.me/emacs_en "emacs_en") group:\n\n![screen11](https://zevlg.github.io/telega/screen-11.png)\n\nAttaching funny cat sticker:\n\n![screen12](https://zevlg.github.io/telega/screen-12.png)\n\n# Installation\n\n`telega.el` depends on `visual-fill-column` package.  This dependency\nautomatically installs if you install telega from MELPA.  Otherwise\nyou need to install this package by hand.\n\n`telega.el` is built on top of the official library provided by\nTelegram [TDLib 1.5.0](https://core.telegram.org/tdlib "tdlib"). Most\nof the distributions do not package this libary, so it has to be build\nfrom source.\n\n## Dependences\n\n   * `GNU Emacs` (at least 26.1 is required)\n   * `GNU make`\n   * `GNU gperf`\n   * `CMake`\n\n`make` is found in most of the modern machines. The other packages can\nbe download with the system package manager (such as `apt` for\nDebian-based distributions, `dnf` for Fedora or `pacman` for\nArch-based).\n\n### MacOS users\n\n1. If you are using [Emacs For Mac OS X](https://emacsformacosx.com/),\n   or you installed Emacs by running `brew cask install emacs`, your\n   Emacs lacks svg support, so you cannot use telega. Please switch to\n   [emacs-plus](https://github.com/d12frosted/homebrew-emacs-plus)\n\n2. If you are using\n   [Emacs-mac](https://bitbucket.org/mituharu/emacs-mac/), or you\n   installed Emacs by running `brew install emacs-mac` or `brew cask\n   install emacs-mac`, your Emacs has bug dealing with complex svg,\n   which leads to Emacs hangup.  Compiling Emacs with rsvg support by running\n   `brew install emacs-mac --with-rsvg` will fix the hangup problem.\n\n   Telega cannot display stickers correctly with emacs-mac, even when emacs-mac\n   is compiled with rsvg support.  If you want stickers, please consider\n   switching to emacs-plus.\n\n3. [emacs-plus](https://github.com/d12frosted/homebrew-emacs-plus) is\n   the best choice to run telega.\n\n### Linux users\n\n`telega.el` requires at least GNU Emacs 26.1 with `imagemagick` and\n`svg` support.\n\n### Building tdlib\n\n[TDLib](https://core.telegram.org/tdlib "tdlib") is the library for\nbuilding Telegram clients. It requires a large amount of memory to be\nbuilt.  Make sure you are using 1.5.0 TDLib version.\n\nOn MacOS you can install pre-build `tdlib` package using homebrew from\n[brew.sh](https://brew.sh).  Just run:\n```console\n$ brew install tdlib\n```\n\nOn Linux you need build `tdlib` from sources.\n\nTo get the source:\n```console\n$ git clone https://github.com/tdlib/td.git\n```\n\nMove into the folder with `cd td`\n\nPrepare a folder for building the library:\n```console\n$ mkdir build && cd build && cmake ../\n```\n\nBuild the sources:\n```console\n$ make -jN\n```\n\nwith `N` number of cores that should be used for the compilation (the optimal\nvalue is the number of physical cores on the machine).\n\nFinally, to install the library system-wide:\n```console\n$ sudo make install\n```\n\nIt will install headers to `/usr/local/include` and library itself\ninto `/usr/local/lib`.  These paths are hardcoded in `telega.el`.\n\n### Building libtgvoip\n\nVoIP support in `telega.el` is optional, if you don\'t need VoIP, just\nignore this section.\n\n[libtgvoip](https://github.com/zevlg/libtgvoip "libtgvoip") is the\nVoIP library for telegram clients.  This is the fork from\n[original](https://github.com/grishka/libtgvoip) library with patches\nneeded by `telega.el`.\n\nTo get the source:\n```console\n$ git clone https://github.com/zevlg/libtgvoip.git\n```\n\nMove into the folder with `cd libtgvoip`\n\nPrepare a folder for building the library:\n```console\n$ autoreconf --force --install && ./configure && make\n```\n\nInstall the library system-wide:\n```console\n$ sudo make install\n```\n\nIt will also install headers to `/usr/local/include` and library into\n`/usr/local/lib`.\n\n## Installing telega.el from MELPA\n\n`telega.el` already in [MELPA](https://melpa.org), so you can install\nit from there as usual package.  This method is preferable, because it\nwill handle all dependencies.  After installing `telega.el` from MELPA\nyou can skip to [Fire up `telega.el`](#fire-up-telegael) section.\n\nOr you could use git repository or this melpa-style recipe:\n\n```lisp\n(:fetcher github\n :repo "zevlg/telega.el"\n :branch "master"\n :files (:defaults "etc" "server" "Makefile"))\n```\n\n## Building telega-server\n\nNow that the `TDLib` library is set-up, it is time to install\n`telega.el`. The first step consists in building `telega-server`,\nwhich is a C interface to the `TDLib`, or just let `telega` ask you at\nthe first start and do the job.\n\nTo get the source:\n\n```console\n$ git clone https://github.com/zevlg/telega.el\n```\n\nMoving into the folder with `cd telega.el`, it is possible to build\nthe `telega-server` executable and move into the `$HOME/.telega` with:\n```console\n$ make && make install && make test\n```\n\nIf you want VoIP support in `telega.el` and `libtgvoip` is installed,\nthen use this instead:\n```console\n$ make WITH_VOIP=t && make WITH_VOIP=t install && make WITH_VOIP=t test\n```\n\nThis command does not require superuser privileges.\n\nStart with `M-x telega RET` and follow instructions\n\n## Installing telega.el\n\nNow it is time to install `telega.el` on GNU Emacs.\n\nThis can be done with `use-package`:\n\n```elisp\n(use-package telega\n  :load-path  "~/telega.el"\n  :commands (telega)\n  :defer t)\n```\n\nOr with:\n```elisp\n(add-to-list \'load-path "~/telega.el")\n(require \'telega)\n```\n\nThe code should be put in the configuration file for Emacs, which\nusually is `init.el`, or `emacs.el`.\n\n## Fire up `telega.el`\n\n`telega.el` can now be started with `M-x telega RET`. The first time\nit ask for the phone number to login to the Telegram network.\n\n# Minor modes\n\n## telega-mode-line-mode\n\nMinor mode to display telega status in modeline.  To enable it use\n\n```elisp\n(telega-mode-line-mode 1)\n```\n\n## telega-notifications-mode\n\n`telega.el` ships with support for D-Bus notifications, but they are\ndisabled by default.  To enable notifications add next code to your\n`init.el`:\n\n```elisp\n(telega-notifications-mode 1)\n```\n\n# Enabling emoji completions in chat buffer\n\nEmoji completions with `:<EMOJI-NAME>:` syntax, uses nice\n[company-mode](http://company-mode.github.io).  It provides\n`telega-company-emoji` company backend.  So you need to add it to\n`company-backends`, maybe along with other backends in\n`telega-chat-mode-hook`, for example:\n\n```elisp\n(add-hook \'telega-chat-mode-hook\n          (lambda ()\n            (set (make-local-variable \'company-backends)\n                 (append \'(telega-company-emoji\n                           telega-company-username\n                           telega-company-hashtag)\n                         (when (telega-chat-bot-p telega-chatbuf--chat)\n                           \'(telega-company-botcmd))))\n            (company-mode 1)))\n```\n\n# Configuring client side messages filtering\n\nIn official telegram clients all messages in group chats are displayed\neven if message has been sent by blocked user.  `telega.el` has client\nside message filtering feature implemented.  Ignoring messages can be\ndone via installing special functions into\n`telega-chat-pre-message-hook` which could mark message as ignored,\nfor example, to ignore messages from particular user with id=12345 you\ncould add next code:\n\n```elisp\n(defun my-telega-ignore-12345-user (msg &rest notused)\n  (when (= (plist-get msg :sender_user_id) 12345)\n    (telega-msg-ignore msg)))\n\n(add-hook \'telega-chat-pre-message-hook \'my-telega-ignore-12345-user)\n```\n\nOr to ignore messages from blocked users, just add:\n\n```elisp\n(add-hook \'telega-chat-pre-message-hook \'telega-msg-ignore-blocked-sender)\n```\n\nTo view recent messages that has been ignored use\n`M-x telega-ignored-messages RET` command.\n\n# How to contribute\n\nJoin our [Telegram group](https://t.me/emacs_telega "Telegram group")\nto discuss the development of `telega.el`.\n\nSubmitting [issues](https://github.com/zevlg/telega.el/issues) is\nexceptionally helpful.\n\n# License\n\n`telega.el` is licensed under GNU GPL version 3.\n\n# FAQ\n\n**Q**: I got the error after `M-x telega RET`\n\n```console\n\nStatus: telega-server: exited abnormally with code 127\n/home/user/.telega/telega-server: error while loading shared libraries:\nlibtdjson.so: cannot open shared object file: No such file or directory\n```\n\n**A**: Add `/usr/local/lib` into library loading path using next:\n\n```console\n# echo "/usr/local/lib" > /etc/ld.so.conf.d/usr_local_lib.conf\n# ldconfig\n```\n\n**Q**: I\'ve got the error installing telega\n\n```console\nCannot open load file: No such file or directory, visual-fill-column\n```\n\n**A**: `telega.el` depends on `visual-fill-column` package, please\ninstall it first.  This package is available from\n[MELPA](https://melpa.org)\n\n**Q**: I\'ve got error, while running telega\n\n```elisp\n(error "Invalid image type \xe2\x80\x98svg\xe2\x80\x99")\n```\n\nand/or\n\n```elisp\n(error "Invalid image type \xe2\x80\x98imagemagick\xe2\x80\x99")\n```\n\n**A**: `telega.el` requires Emacs with SVG and ImageMagick support.\nSVG support in Emacs is done using `librsvg` library.  As to\nimagemagick, you will need `libmagickcore-dev` and `libmagickwand-dev`\npackages installed.  But unfortunately Emacs recently disabled\nimagemagick support by default (see\nhttps://lists.gnu.org/r/emacs-devel/2018-12/msg00036.html).  So you\nneed to compile Emacs by hand, specifying `--with-imagemagick` flag to\n`./configure` script.\n\nTelega won\'t depend on `imagemagick` in future, since required image\nfeatures has been added to newer Emacs, see\nhttps://lists.gnu.org/r/emacs-devel/2019-06/msg00242.html\n\n**Q**: I\'m from Russia, does `telega.el` has proxy support?\n\n**A**: Yes, use `telega-proxies` custom variable, for example:\n\n```elisp\n(setq telega-proxies\n      (list\n       \'(:server "1.2.3.4" :port 8080 :enable :false\n                 :type (:@type "proxyTypeSocks5"\n                               :username "rkn" :password "jopa"))\n       \'(:server "2.3.4.5" :port 8088 :enable t\n                 :type (:@type "proxyTypeSocks5"\n                               :username "rkn" :password "jopa"))\n       ))\n```\nSee `C-h v telega-proxies RET` for full range of proxy types.\n\n**Q**: Stickers are not shown.\n\n**A**: Make sure you have `imagemagick` support and please install `webp` package\n\n**Q**: No glyphs for some unicode characters.\n\n**A**: Please install `fonts-symbola` package\n\n**Q**: There is some formatting issues when some unicode characters are used.  Is there way to fix it up?\n\n**A**: Yes, partly.  If character has full width of multiple ordinary chars you can tweak `char-width-table`.  Add code like this to your init.el:\n\n```elisp\n(setq telega-symbol-unread "\xf0\x9f\x84\x8c")\n\n(defun my-telega-load ()\n  ;; \xf0\x9f\x84\x8c occupies two full chars, but (string-width "\xf0\x9f\x84\x8c") returns 1\n  ;; so we install custom widths to `char-width-table\'\n  (telega-symbol-set-width telega-symbol-unread 2)\n\n  ;; ... other code\n  )\n\n(add-hook \'telega-load-hook \'my-telega-load)\n```\n\nThere is also `telega-symbol-widths` custom variable, you might want\nto modify it.\n\n**Q**: Is there erc-like chats tracking functionality?\n\n**A**: Yes, set `telega-use-tracking` to non-nil.\n\nTake into account that telega tracks only opened chats with enabled\nnotifications.\n\n**Q**: Is it possible to use `telega.el` in tty-only Emacs (aka\nemacs-nox)?\n\n**A**: Yes, set `telega-use-images` to `nil`, before start.\n'