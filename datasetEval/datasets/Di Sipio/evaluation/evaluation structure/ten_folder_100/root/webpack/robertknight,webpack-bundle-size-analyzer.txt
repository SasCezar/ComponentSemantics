b"Webpack Bundle Size Analyzer\n============================\n\n[![Build Status](https://travis-ci.org/robertknight/webpack-bundle-size-analyzer.svg?branch=master)](https://travis-ci.org/robertknight/webpack-bundle-size-analyzer)\n\nA small utility to help you find out what is contributing\nto the size of your [Webpack](http://webpack.github.io/) bundles.\n\nWebpack has a JSON output mode which produces detailed machine-readable\ninformation about everything that has been included in a generated bundle.\n\nThis output is produced by running `webpack --json`. This tool analyzes\nthe resulting JSON output and displays a tree of packages that were included\nin the bundle, ordered by the size of all the used modules.\n\nFor further reading on reducing the size of Webpack bundles,\nsee their [optimization guide](http://webpack.github.io/docs/optimization.html)\n\n## Usage\n\nThere are 2 ways to use this tool:\n\n1. As a command line application\n2. As a webpack plugin\n\n### CLI Usage\n\nAssuming you have the webpack CLI command [installed locally in your project](https://webpack.js.org/guides/installation#local-installation):\n\n```sh\nnpm install -g webpack-bundle-size-analyzer\nnode_modules/.bin/webpack --json | webpack-bundle-size-analyzer\n```\n\nIf you have webpack [installed globally](https://webpack.js.org/guides/installation#global-installation)\nthen the first part of this command will be just `webpack --json` instead.\n\nWhen run on [react-testing](https://github.com/robertknight/react-testing) for example,\nit produces this output, where `<self>` refers to the size of the bundle's own code.\n\n````\nreact: 641.95 kB (55.3%)\n  <self>: 641.95 kB (100%)\nchai: 125.8 kB (10.8%)\n  deep-eql: 7.51 kB (5.97%)\n    type-detect: 2.72 kB (36.2%)\n      <self>: 2.72 kB (100%)\n    <self>: 4.79 kB (63.8%)\n  assertion-error: 2.29 kB (1.82%)\n    <self>: 2.29 kB (100%)\n  <self>: 116 kB (92.2%)\nflummox: 73.46 kB (6.33%)\n  flux: 9.01 kB (12.3%)\n    <self>: 9.01 kB (100%)\n  eventemitter3: 5.94 kB (8.08%)\n    <self>: 5.94 kB (100%)\n  uniqueid: 947 B (1.26%)\n    <self>: 947 B (100%)\n  object-assign: 484 B (0.643%)\n    <self>: 484 B (100%)\n  <self>: 57.12 kB (77.8%)\nq: 58.84 kB (5.07%)\n  <self>: 58.84 kB (100%)\n...\n<self>: 195.57 kB (16.9%)\n````\n\n### Plugin Usage\n\n#### Description\nWhen using the plugin version of this library, a file will be written to a\nlocation of your choice (when you run your webpack build).  The file contents\nwill be a list of the packages in your bundle (sorted in descending order).\nEach line will contain the name of a package, along with it's file size, and the\npercentage of space it takes up in your bundle.\n\n#### Plugin Installation\nInstall this library as a development dependency to your webpack project:\n```sh\nnpm install --save-dev webpack-bundle-size-analyzer\n```\n\nImport your plugin at the top of your `webpack.config.js` file:\n\nOld School:\n```js\nvar WebpackBundleSizeAnalyzerPlugin = require('webpack-bundle-size-analyzer').WebpackBundleSizeAnalyzerPlugin;\n```\n\nNew School:\n```js\nimport { WebpackBundleSizeAnalyzerPlugin } from 'webpack-bundle-size-analyzer';\n```\n\nNow in your webpack's plugin section, start using this plugin:\n\n```js\n{\n  {...topOfConfig}\n  plugins: [\n    new WebpackBundleSizeAnalyzerPlugin('./reports/plain-report.txt')\n  ]\n  {...bottomOfConfig}\n}\n```\n\n#### Example Plugin Output\n\nUsing the above plugin configuration, the following file will be written:\n\n`<webpack-output-path>/reports/plain-report.txt`:\n```text\nmarked: 27.53 KB (14.9%)\nlru-cache: 6.29 KB (3.40%)\nstyle-loader: 717 B (0.379%)\n<self>: 150.33 KB (81.3%)\n```\n\n\n### Important Note About Minified Code\n\nIf you minify/compress your code using the [approach recommended in the Webpack documentation](http://webpack.github.io/docs/optimization.html), which is to use the UglifyJS plugin, be aware that this tool will report the sizes of modules _before_ they are minified. This is because the statistics generated by `webpack --json` do not take account of plugins that operate on the bundle as a whole.\n\nKnowing the sizes of dependencies before they are minified can still be useful to get an idea of how much different dependencies are responsible for size of your minified bundle, but be aware that it can be misleading. This is because some libraries compress better than others.\n\nIf instead you minify modules in your bundle individually using a loader (eg. [the UglifyJS loader](https://www.npmjs.com/package/uglify-loader)), the stats output by `webpack --json` _will_ show minified sizes. If you want to get a better idea of the sizes of different dependencies after they are minified, you can temporarily remove the UglifyJS plugin and replace it with [the UglifyJS loader](https://www.npmjs.com/package/uglify-loader) instead before running `webpack --json | webpack-bundle-size-analyzer`.\n\nThe reason that using a plugin, rather than a loader, is the recommended approach in Webpack is that compression is better if applied to the whole bundle rather than to individual source files one at a time.\n"