b'<p align="center">\n  <img src="https://i.imgur.com/J0jv1Sz.png" width="240" height="240" alt="critters-webpack-plugin">\n  <h1 align="center">Critters</h1>\n</p>\n\n> Critters is a Webpack plugin that inlines your app\'s [critical CSS] and lazy-loads the rest.\n\n## critters-webpack-plugin [![npm](https://img.shields.io/npm/v/critters-webpack-plugin.svg?style=flat)](https://www.npmjs.org/package/critters-webpack-plugin)\n\nIt\'s a little different from [other options](#similar-libraries), because it **doesn\'t use a headless browser** to render content.  This tradeoff allows Critters to be very **fast and lightweight**. It also means Critters inlines all CSS rules used by your document, rather than only those needed for above-the-fold content. For alternatives, see [Similar Libraries](#similar-libraries).\n\nCritters\' design makes it a good fit when inlining critical CSS for prerendered/SSR\'d Single Page Applications. It was developed to be an excellent compliment to [prerender-loader](https://github.com/GoogleChromeLabs/prerender-loader), combining to dramatically improve first paint time for most Single Page Applications.\n\n## Features\n\n-   Fast - no browser, few dependencies\n-   Integrates with [html-webpack-plugin]\n-   Works with `webpack-dev-server` / `webpack serve`\n-   Supports preloading and/or inlining critical fonts\n-   Prunes unused CSS keyframes and media queries\n-   Removes inlined CSS rules from lazy-loaded stylesheets\n\n## Installation\n\nFirst, install Critters as a development dependency:\n\n```sh\nnpm i -D critters-webpack-plugin\n```\n\nThen, import Critters into your Webpack configuration and add it to your list of plugins:\n\n```diff\n// webpack.config.js\n+const Critters = require(\'critters-webpack-plugin\');\n\nmodule.exports = {\n  plugins: [\n+    new Critters({\n+      // optional configuration (see below)\n+    })\n  ]\n}\n```\n\nThat\'s it! Now when you run Webpack, the CSS used by your HTML will be inlined and the imports for your full CSS will be converted to load asynchronously.\n\n## Usage\n\n<!-- Generated by documentation.js. Update this documentation by updating the source code. -->\n\n### Critters\n\nCreate a Critters plugin instance with the given options.\n\n**Parameters**\n\n-   `options` **Options** Options to control how Critters inlines CSS.\n\n**Examples**\n\n```javascript\n// webpack.config.js\nmodule.exports = {\n  plugins: [\n    new Critters({\n      // Outputs: <link rel="preload" onload="this.rel=\'stylesheet\'">\n      preload: \'swap\',\n\n      // Don\'t inline critical font-face rules, but preload the font URLs:\n      preloadFonts: true\n    })\n  ]\n}\n```\n\n### Critters\n\nAll optional. Pass them to `new Critters({ ... })`.\n\n**Parameters**\n\n-   `options`  \n\n**Properties**\n\n-   `external` **[Boolean](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean)** Inline styles from external stylesheets _(default: `true`)_\n-   `inlineThreshold` **[Number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number)** Inline external stylesheets smaller than a given size _(default: `0`)_\n-   `minimumExternalSize` **[Number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number)** If the non-critical external stylesheet would be below this size, just inline it _(default: `0`)_\n-   `pruneSource` **[Boolean](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean)** Remove inlined rules from the external stylesheet _(default: `true`)_\n-   `mergeStylesheets` **[Boolean](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean)** Merged inlined stylesheets into a single <style> tag _(default: `true`)_\n-   `preload` **[String](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String)** Which [preload strategy](#preloadstrategy) to use\n-   `noscriptFallback` **[Boolean](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean)** Add `<noscript>` fallback to JS-based strategies\n-   `inlineFonts` **[Boolean](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean)** Inline critical font-face rules _(default: `false`)_\n-   `preloadFonts` **[Boolean](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean)** Preloads critical fonts _(default: `true`)_\n-   `fonts` **[Boolean](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean)** Shorthand for setting `inlineFonts`+`preloadFonts`-   Values:\n    -   `true` to inline critical font-face rules and preload the fonts\n    -   `false` to don\'t inline any font-face rules and don\'t preload fonts\n-   `keyframes` **[String](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String)** Controls which keyframes rules are inlined.-   Values:\n    -   `"critical"`: _(default)_ inline keyframes rules used by the critical CSS\n    -   `"all"` inline all keyframes rules\n    -   `"none"` remove all keyframes rules\n-   `compress` **[Boolean](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean)** Compress resulting critical CSS _(default: `true`)_\n-   `logLevel` **[String](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String)** Controls [log level](#loglevel) of the plugin _(default: `"info"`)_\n\n### LogLevel\n\nControls log level of the plugin. Specifies the level the logger should use. A logger will\nnot produce output for any log level beneath the specified level. Available levels and order\nare:\n\n-   **"info"** _(default)_\n-   **"warn"**\n-   **"error"**\n-   **"trace"**\n-   **"debug"**\n-   **"silent"**\n\nType: (`"info"` \\| `"warn"` \\| `"error"` \\| `"trace"` \\| `"debug"` \\| `"silent"`)\n\n### PreloadStrategy\n\nThe mechanism to use for lazy-loading stylesheets.\n_[JS]_ indicates that a strategy requires JavaScript (falls back to `<noscript>`).\n\n-   **default:** Move stylesheet links to the end of the document and insert preload meta tags in their place.\n-   **"body":** Move all external stylesheet links to the end of the document.\n-   **"media":** Load stylesheets asynchronously by adding `media="not x"` and removing once loaded. _[JS]_\n-   **"swap":** Convert stylesheet links to preloads that swap to `rel="stylesheet"` once loaded. _[JS]_\n-   **"js":** Inject an asynchronous CSS loader similar to [LoadCSS](https://github.com/filamentgroup/loadCSS) and use it to load stylesheets. _[JS]_\n-   **"js-lazy":** Like `"js"`, but the stylesheet is disabled until fully loaded.\n\nType: (default | `"body"` \\| `"media"` \\| `"swap"` \\| `"js"` \\| `"js-lazy"`)\n\n## Similar Libraries\n\nThere are a number of other libraries that can inline Critical CSS, each with a slightly different approach.  Here are a few great options:\n\n-   [Critical](https://github.com/addyosmani/critical)\n-   [Penthouse](https://github.com/pocketjoso/penthouse)\n-   [webpack-critical](https://github.com/lukeed/webpack-critical)\n-   [webpack-plugin-critical](https://github.com/nrwl/webpack-plugin-critical)\n-   [html-critical-webpack-plugin](https://github.com/anthonygore/html-critical-webpack-plugin)\n-   [react-snap](https://github.com/stereobooster/react-snap)\n\n## License\n\n[Apache 2.0](LICENSE)\n\nThis is not an official Google product.\n\n[critical css]: https://www.smashingmagazine.com/2015/08/understanding-critical-css/\n\n[html-webpack-plugin]: https://github.com/jantimon/html-webpack-plugin\n'