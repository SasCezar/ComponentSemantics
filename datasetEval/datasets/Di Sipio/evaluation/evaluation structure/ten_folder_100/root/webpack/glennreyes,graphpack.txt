b'![Graphpack](https://user-images.githubusercontent.com/5080854/47752201-1dead580-dc94-11e8-8028-580207f85feb.png)\n\n<div align="center">\n\n\xe2\x98\x84\xef\xb8\x8f A minimalistic zero-config GraphQL server\n\nCheck out the demo on CodeSandbox: https://codesandbox.io/s/k3qrkl8qlv\n\n</div>\n\n<hr>\n\n## What is included?\n\nGraphpack lets you create GraphQL servers _with zero configuration_. It uses [`webpack`](https://github.com/webpack/webpack) with [`nodemon`](https://github.com/remy/nodemon) and [`Apollo Server`](https://github.com/apollographql/apollo-server) under the hood, so we get features like Live Reloading, GraphQL Playground, GraphQL Imports and many more right out of the box.\n\n- \xf0\x9f\x93\xa6 **Zero-config** out of the box\n- \xf0\x9f\x9a\xa6 Built-in **Live reload**\n- \xf0\x9f\x9a\xa8 Super-friendly error messages\n- \xf0\x9f\x8e\xae [**GraphQL Playground**](https://github.com/prisma/graphql-playground) IDE\n- \xe2\xad\x90\xef\xb8\x8f [**GraphQL imports**](https://github.com/prisma/graphql-import) in Schema Definition Language\n- \xf0\x9f\x92\x96 [**TypeScript**](https://www.typescriptlang.org/) support\n- \xf0\x9f\x94\xa5 [**Blazing fast**](https://twitter.com/acdlite/status/974390255393505280) bundle times\n- \xe2\x9a\xa1\xef\xb8\x8f **ES module imports** and dynamic `import()`\'s thanks to [Babel](https://github.com/babel/babel)\n\n## Install & Usage\n\n```\nyarn add --dev graphpack\n```\n\n### Add `src/schema.graphql` and `src/resolvers.js`\n\n```\nsrc\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 resolvers.js\n\xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 schema.graphql\n```\n\nIn your schema, add some sample types in [SDL](https://graphql.org/learn/schema/#type-language):\n\n```graphql\ntype Query {\n  hello: String\n}\n```\n\nIn `src/resolvers.js`:\n\n```js\nconst resolvers = {\n  Query: {\n    hello: () => \'world!\',\n  },\n};\n\nexport default resolvers;\n```\n\n### Setup `package.json` run scripts\n\nAdd following scripts to your `package.json`:\n\n```json\n  "scripts": {\n    "dev": "graphpack",\n    "build": "graphpack build"\n  },\n```\n\n### Start development server\n\nTo start the development server, simply run:\n\n```sh\nyarn dev\n```\n\n### Create production build\n\nTo create a production-ready build run following command:\n\n```sh\nyarn build\n```\n\n### Use production build\n\nAdd following script that executes our build:\n\n```json\n  "scripts": {\n    "start": "node ./build/index.js"\n  },\n```\n\nThe following command will run the build and start the app\n\n```sh\nyarn start\n```\n\n> Make sure to create a build before running the start script.\n\n## CLI Commands\n\n### `graphpack` (alias `graphpack dev`)\n\nRuns graphpack in development mode. After a successful build your output should look something like this:\n\n<div align="center">\n  <img src="https://user-images.githubusercontent.com/5080854/47042315-3e426c80-d18b-11e8-941e-e193a339e3ee.png" width="520" alt="Graphpack">\n</div>\n\nGraphpack will watch for changes in your `./src` folder and automatically reload the server.\n\n### `graphpack build`\n\nCreates a production-ready build under the project roots `build` folder.\n\n## Entry files\n\n### `src/resolvers.js` (required)\n\nIn this file you define all your resolvers:\n\n```js\n// src/resolvers.js\nconst resolvers = {\n  Query: {\n    article: (obj, args) => getArticleById(args.id),\n    articles: () => getArticles(),\n  },\n};\n\nexport default resolvers;\n```\n\n> You can use any of these folder/file structure:\n>\n> - `src/resolvers.js`\n> - `src/resolvers/index.js`\n\n### `src/schema.graphql` (required)\n\nHere you define all your GraphQL type definitions:\n\n```graphql\n# src/schema.graphql\ntype Article {\n  title: String\n  body: String\n}\n\ntype Query {\n  article: Article\n  articles: [Article!]!\n}\n```\n\nAlternatively you can create a `src/schema.js` and use the template literal tag `gql` by [`graphql-tag`](https://github.com/apollographql/graphql-tag):\n\n```js\n// src/schema.js\nimport { gql } from \'graphql-tag\';\n\nconst typeDefs = gql`\n  type Article {\n    title: String\n    body: String\n  }\n\n  type Query {\n    article: Article\n    articles: [Article!]!\n  }\n`;\n\nexport default typeDefs;\n```\n\nNote that in this case, you will need to install `graphql-tag`.\n\n> Graphpack can resolve both `.js` and `.graphql` files. This means you can use any of these folder/file structures:\n>\n> - `src/schema.js`\n> - `src/schema/index.js`\n> - `src/schema.graphql`\n> - `src/schema/index.graphql`\n\n### `src/context.js`\n\nCreate `src/context.js` and do following:\n\n```js\nconst context = req => ({\n  /* context props here */\n});\n\nexport default context;\n```\n\n> You can use any of these folder/file structures:\n>\n> - `src/context.js`\n> - `src/context/index.js`\n\n## Custom configuration\n\nFor custom configuration you can create a `graphpack` config file in [cosmiconfig](https://github.com/davidtheclark/cosmiconfig) format:\n\n- `graphpack.config.js` (recommended)\n- `graphpack` field in `package.json`\n- `.graphpackrc` in JSON or YAML\n- `.graphpackrc` with the extensions `.json`, `.yaml`, `.yml`, or `.js`\n\n> Note that the config file (eg. graphpack.config.js) is not going through babel transformation.\n\n### Customize Server configuration\n\nIn your `graphpack.config.js` configure your server as follows:\n\n```js\n// graphpack.config.js\nmodule.exports = {\n  server: {\n    introspection: false,\n    playground: false,\n    applyMiddleware: { app, path }, // app is from an existing (Express/Hapi,...) app\n  },\n};\n```\n\nReturn config as a function to get the env variable:\n\n```js\n// graphpack.config.js\n\n// `mode` will be either `development` or `production`\nmodule.exports = (mode) => {\n  const IS_DEV = mode !== \'production\';\n\n  server: {\n    introspection: IS_DEV,\n    playground: IS_DEV,\n    mocks: IS_DEV,\n    mocks: IS_DEV,\n    // ...\n  }\n};\n\nexport default config;\n```\n\nRefer to the [Apollo Server docs](https://www.apollographql.com/docs/apollo-server/api/apollo-server.html#constructor-options-lt-ApolloServer-gt) for more details about the options.\n\n> Note that it\'s not possible to set `resolvers`, `typeDefs` or `context` in the config file. For this please refer to [entry files](#entry-files).\n\n#### Configure server port\n\nConfigure the server port with:\n\n```js\nmodule.exports = {\n  server: {\n    port: 4000, // default,\n  },\n};\n```\n\n#### Applying express middlewares to the server\n\nIn your `graphpack.config.js` add your applyMiddleware field as follows:\n\n```js\n// graphpack.config.js\nconst express = require(\'express\');\n\nconst app = express();\n\napp.get(\'/hello\', (req, res) => {\n  res.send(\'Hello world!\');\n});\n\nmodule.exports = {\n  server: {\n    applyMiddleware: {\n      app,\n      path: \'/graphql\', // default\n    },\n  },\n};\n```\n\nYour GraphQL endpoint will be available under `http://localhost:4000/graphql`. To configure the server options refer to https://www.apollographql.com/docs/apollo-server/api/apollo-server.html#ApolloServer-applyMiddleware\n\n### Customize Webpack configuration\n\nTo extend webpack, you can define a function that extends its config via the config file:\n\n```js\n// graphpack.config.js\nmodule.exports = {\n  webpack: ({ config, webpack }) => {\n    // Add customizations to config\n    // Important: return the modified config\n    return config;\n  },\n};\n```\n\n### Customize Babel configuration\n\nAdd an optional `babel.config.js` to your project root with the following preset:\n\n```js\n// babel.config.js\nmodule.exports = api => {\n  // Cache the returned value forever and don\'t call this function again\n  api.cache(true);\n\n  return {\n    presets: [\'graphpack/babel\'],\n    // ... Add your plugins and custom config\n  };\n};\n```\n\n## Acknowledgements\n\nGraphpack was heavily inspired by:\n\n- [backpack](https://github.com/jaredpalmer/backpack)\n- [create-react-app](https://github.com/facebook/create-react-app)\n- [next.js](https://github.com/zeit/next.js)\n\nThanks to [@richardbmx](https://github.com/richardbmx) for designing the [logo](https://figma.com/file/XyKbNTDI9lwoJNr91l91bQ7C/Graphpack)! \xf0\x9f\x99\x8c\n\n## Contributors\n\nThis project exists thanks to all the people who contribute.\n<a href="https://github.com/glennreyes/graphpack/graphs/contributors"><img src="https://opencollective.com/graphpack/contributors.svg?width=890" title="contributors" alt="contributors" /></a>\n\n## Backers\n\nThank you to all our backers! \xf0\x9f\x99\x8f [[Become a backer](https://opencollective.com/graphpack#backer)]\n\n<a href="https://opencollective.com/graphpack#backers" target="_blank"><img src="https://opencollective.com/graphpack/backers.svg?width=890"></a>\n\n## Sponsors\n\nSupport this project by becoming a sponsor. Your logo will show up here with a link to your website. [[Become a sponsor](https://opencollective.com/graphpack#sponsor)]\n\n<a href="https://opencollective.com/graphpack/sponsor/0/website" target="_blank"><img src="https://opencollective.com/graphpack/sponsor/0/avatar.svg"></a>\n<a href="https://opencollective.com/graphpack/sponsor/1/website" target="_blank"><img src="https://opencollective.com/graphpack/sponsor/1/avatar.svg"></a>\n<a href="https://opencollective.com/graphpack/sponsor/2/website" target="_blank"><img src="https://opencollective.com/graphpack/sponsor/2/avatar.svg"></a>\n<a href="https://opencollective.com/graphpack/sponsor/3/website" target="_blank"><img src="https://opencollective.com/graphpack/sponsor/3/avatar.svg"></a>\n<a href="https://opencollective.com/graphpack/sponsor/4/website" target="_blank"><img src="https://opencollective.com/graphpack/sponsor/4/avatar.svg"></a>\n<a href="https://opencollective.com/graphpack/sponsor/5/website" target="_blank"><img src="https://opencollective.com/graphpack/sponsor/5/avatar.svg"></a>\n<a href="https://opencollective.com/graphpack/sponsor/6/website" target="_blank"><img src="https://opencollective.com/graphpack/sponsor/6/avatar.svg"></a>\n<a href="https://opencollective.com/graphpack/sponsor/7/website" target="_blank"><img src="https://opencollective.com/graphpack/sponsor/7/avatar.svg"></a>\n<a href="https://opencollective.com/graphpack/sponsor/8/website" target="_blank"><img src="https://opencollective.com/graphpack/sponsor/8/avatar.svg"></a>\n<a href="https://opencollective.com/graphpack/sponsor/9/website" target="_blank"><img src="https://opencollective.com/graphpack/sponsor/9/avatar.svg"></a>\n\n## License\n\nMIT\n'