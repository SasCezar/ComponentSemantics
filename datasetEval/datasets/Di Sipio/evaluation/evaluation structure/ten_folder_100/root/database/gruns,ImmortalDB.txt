b'<h1>\n  <div align="center">\n    <img src="logo.png" width="260px" height="435px" alt="ImmortalDB">\n  </div>\n\n  ImmortalDB\n</h1>\n\n\n### ImmortalDB is a resilient key-value store for the browser.\n\nImmortalDB is the best way to store persistent key-value data in the\nbrowser. Data saved to ImmortalDB is redundantly stored in\n[Cookies](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies),\n[IndexedDB](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API), and\n[LocalStorage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage),\nand relentlessly self heals if any data therein is deleted or corrupted.\n\nFor example, clearing cookies is a common user action, even for non-technical\nusers. And browsers unceremoniously\n[delete](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Browser_storage_limits_and_eviction_criteria#LRU_policy)\nIndexedDB, LocalStorage, and/or SessionStorage without warning under storage\npressure.\n\nImmortalDB is resilient in the face of such events.\n\nIn this way, ImmortalDB is like\n[Evercookie](https://github.com/samyk/evercookie), but\n\n  1. Is actively maintained and well documented.\n\n  2. Provides a simple, modern, [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)-based API.\n\n  3. Strikes an equitable balance between reliability and respect for the\n     user. Data is stored reliably but can also be voluntarily purged if the\n     user designedly clears cookies and application storage.\n\n  4. Doesn\'t use nefarious exploits nor deprecated third party plugins like\n     Flash, Silverlight, or Java. Only standard, ratified HTML5 APIs are used.\n\n  5. Doesn\'t vandalize performance or the user experience. For example,\n     Evercookie\'s CSS History Knocking can beget a deluge of background HTTP\n     requests, and loading Silverlight or Flash can raise unsought permission\n     modals or thrash the user\'s disk.\n\n\n### How ImmortalDB works.\n\nWhen you store a key-value pair in ImmortalDB, that key and value are saved\nredundantly in the browser\'s cookies, IndexedDB, LocalStorage, and\nSessionStorage data stores.\n\nWhen a value is retrieved via its key, ImmortalDB\n\n  1. Looks up that key in every data store.\n  2. Counts each unique returned value.\n  3. Determines the most commonly returned unique value as the \'correct\' value.\n  4. Returns this correct value.\n\nThen ImmortalDB self-heals: if any data store(s) returned a value different than\nthe determined correct value, or no value at all, the correct value is rewritten\nto that store. In this way, consensus, reliability, and redundancy is\nmaintained.\n\n\n### API\n\n#### Set\n\nImmortalDB\'s API is simple. To store a value, use `set(key, value)`:\n\n```javascript\nimport { ImmortalDB } from \'immortal-db\'\n\nawait ImmortalDB.set(\'key\', \'value\')\n```\n\n`key` and `value` must be\n[DOMStrings](https://developer.mozilla.org/en-US/docs/Web/API/DOMString).\n`ImmortalDB.set(key, value)` also always returns `value`, so it can be chained or\nembedded, like\n\n```javascript\nconst countPlusOne = (await ImmortalDB.set(\'count\', numberOfClowns)) + 1\n```\n\n#### Get\n\nTo retrieve a value, use `get(key, default=null)`:\n\n```javascript\nconst value = await ImmortalDB.get(\'key\', default=null)\n```\n\n`get()` returns the value associated with `key`, if `key` exists. If `key`\ndoesn\'t exist, `default` is returned. `key` must be a\n[DOMString](https://developer.mozilla.org/en-US/docs/Web/API/DOMString).\n\n#### Remove\n\nFinally, to remove a key, use `remove(key)`:\n\n```javascript\nImmortalDB.set(\'hi\', \'bonjour\')\nconsole.log(await ImmortalDB.get(\'hi\'))  // Prints \'bonjour\'.\n\nawait ImmortalDB.remove(\'hi\')\n\nconsole.log(await ImmortalDB.get(\'hi\'))  // Prints \'null\'.\n```\n\n`key` must be a\n[DOMString](https://developer.mozilla.org/en-US/docs/Web/API/DOMString).\n\n#### Data Stores\n\nThe data stores that ImmortalDB stores data in can also be configured. For\nexample, to only store data reliably in cookies and LocalStorage:\n\n```javascript\nimport { ImmortalStorage, CookieStore, LocalStorageStore } from \'immortal-db\'\n\nconst stores = [CookieStore, LocalStorageStore]\nconst db = new ImmortalStorage(stores)\n\nawait db.set(key, JSON.stringify({1:1}))\n```\n\nStores used by `ImmortalDB` are:\n\n  - `CookieStore` -> Keys and values are stored in `document.cookie`.\n  - `IndexedDbStore` -> Keys and values are stored in `window.indexedDB`.\n  - `LocalStorageStore` -> Keys and values are stored in `window.localStorage`.\n\nOther, optional stores are:\n\n  - `SessionStorageStore` -> Keys and values are stored in `window.sessionStorage`.\n\nNew storage implementations can easily be added, too; they need only implement\nthe methods `get(key, default)`, `set(key, value)`, and `remove(key)`.\n\n\n### Installation\n\nInstalling ImmortalDB with npm is easy.\n\n```\n$ npm install immortal-db\n```\n\nOr include `dist/immortal-db[.min].js` and use `window.ImmortalDB` directly.\n\n```html\n<html>\n  <head>\n    <script src="immortal-db.min.js"></script>\n    <script>\n      ;(async () => {\n        const db = ImmortalDB.ImmortalDB\n        await db.set(\'hi\', \'lolsup\')\n      })()\n    </script>\n  </head>\n\n  ...\n</html>\n```\n'