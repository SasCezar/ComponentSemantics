b'# PHP-CRUD-API\n\nSingle file PHP 7 script that adds a REST API to a MySQL 5.6 InnoDB database. PostgreSQL 9.1 and MS SQL Server 2012 are fully supported. \n\nNB: This is the [TreeQL](https://treeql.org) reference implementation in PHP.\n\nRelated projects:\n\n  - [PHP-API-AUTH](https://github.com/mevdschee/php-api-auth): Single file PHP script that is an authentication provider for PHP-CRUD-API\n  - [PHP-SP-API](https://github.com/mevdschee/php-sp-api): Single file PHP script that adds a REST API to a SQL database.\n  - [PHP-CRUD-UI](https://github.com/mevdschee/php-crud-ui): Single file PHP script that adds a UI to a PHP-CRUD-API project.\n  - [VUE-CRUD-UI](https://github.com/nlware/vue-crud-ui): Single file Vue.js script that adds a UI to a PHP-CRUD-API project.\n  - [PHP-CRUD-ADMIN](https://github.com/mevdschee/php-crud-admin): Single file PHP script that adds a database admin interface to a PHP-CRUD-API project.\n  \nThere are also ports of this script in:\n\n- [Java JDBC by Ivan Kolchagov](https://github.com/kolchagov/java-crud-api) (v1)\n- [Java Spring Boot + jOOQ](https://github.com/mevdschee/java-crud-api/tree/master/full) (v2: work in progress)\n\nThere are also proof-of-concept ports of this script that only support basic REST CRUD functionality in:\n[PHP](https://github.com/mevdschee/php-crud-api/blob/master/extras/core.php),\n[Java](https://github.com/mevdschee/java-crud-api/blob/master/core/src/main/java/com/tqdev/CrudApiHandler.java),\n[Go](https://github.com/mevdschee/go-crud-api/blob/master/api.go),\n[C# .net core](https://github.com/mevdschee/core-data-api/blob/master/Program.cs),\n[Node.js](https://github.com/mevdschee/js-crud-api/blob/master/app.js) and\n[Python](https://github.com/mevdschee/py-crud-api/blob/master/api.py).\n\n## Requirements\n\n  - PHP 7.0 or higher with PDO drivers for MySQL, PgSQL or SqlSrv enabled\n  - MySQL 5.6 / MariaDB 10.0 or higher for spatial features in MySQL\n  - PostGIS 2.0 or higher for spatial features in PostgreSQL 9.1 or higher\n  - SQL Server 2012 or higher (2017 for Linux support)\n\n## Installation\n\nThis is a single file application! Upload "`api.php`" somewhere and enjoy!\n\nFor local development you may run PHP\'s built-in web server:\n\n    php -S localhost:8080\n\nTest the script by opening the following URL:\n\n    http://localhost:8080/api.php/records/posts/1\n\nDon\'t forget to modify the configuration at the bottom of the file.\n\nAlternatively you can integrate this project into the web framework of your choice, see:\n\n- [Automatic REST API for Laravel](https://tqdev.com/2019-automatic-rest-api-laravel)\n- [Automatic REST API for Symfony 4](https://tqdev.com/2019-automatic-rest-api-symfony)\n- [Automatic REST API for SlimPHP 4](https://tqdev.com/2019-automatic-api-slimphp-4)\n\n## Configuration\n\nEdit the following lines in the bottom of the file "`api.php`":\n\n    $config = new Config([\n        \'username\' => \'xxx\',\n        \'password\' => \'xxx\',\n        \'database\' => \'xxx\',\n    ]);\n\nThese are all the configuration options and their default value between brackets:\n\n- "driver": `mysql`, `pgsql` or `sqlsrv` (`mysql`)\n- "address": Hostname of the database server (`localhost`)\n- "port": TCP port of the database server (defaults to driver default)\n- "username": Username of the user connecting to the database (no default)\n- "password": Password of the user connecting to the database (no default)\n- "database": Database the connecting is made to (no default)\n- "tables": Comma separated list of tables to publish (defaults to \'all\')\n- "middlewares": List of middlewares to load (`cors`)\n- "controllers": List of controllers to load (`records,geojson,openapi`)\n- "openApiBase": OpenAPI info (`{"info":{"title":"PHP-CRUD-API","version":"1.0.0"}}`)\n- "cacheType": `TempFile`, `Redis`, `Memcache`, `Memcached` or `NoCache` (`TempFile`)\n- "cachePath": Path/address of the cache (defaults to system\'s temp directory)\n- "cacheTime": Number of seconds the cache is valid (`10`)\n- "debug": Show errors in the "X-Debug-Info" header (`false`)\n- "basePath": URI base path of the API (determined using PATH_INFO by default)\n\n## Limitations\n\nThese limitation and constrains apply:\n\n  - Primary keys should either be auto-increment (from 1 to 2^53) or UUID\n  - Composite primary or foreign keys are not supported\n  - Complex writes (transactions) are not supported\n  - Complex queries calling functions (like "concat" or "sum") are not supported\n  - Database must support and define foreign key constraints\n  \n## Features\n\nThe following features are supported:\n\n  - Composer install or single PHP file, easy to deploy.\n  - Very little code, easy to adapt and maintain\n  - Supports POST variables as input (x-www-form-urlencoded)\n  - Supports a JSON object as input\n  - Supports a JSON array as input (batch insert)\n  - Sanitize and validate input using callbacks\n  - Permission system for databases, tables, columns and records\n  - Multi-tenant single and multi database layouts are supported\n  - Multi-domain CORS support for cross-domain requests\n  - Support for reading joined results from multiple tables\n  - Search support on multiple criteria\n  - Pagination, sorting, top N list and column selection\n  - Relation detection with nested results (belongsTo, hasMany and HABTM)\n  - Atomic increment support via PATCH (for counters)\n  - Binary fields supported with base64 encoding\n  - Spatial/GIS fields and filters supported with WKT and GeoJSON\n  - Generate API documentation using OpenAPI tools\n  - Authentication via JWT token or username/password\n  - Database connection parameters may depend on authentication\n  - Support for reading database structure in JSON\n  - Support for modifying database structure using REST endpoint\n  - Security enhancing middleware is included\n  - Standard compliant: PSR-4, PSR-7, PSR-12, PSR-15 and PSR-17\n\n## Compilation\n\nYou can install all dependencies of this project using the following command:\n\n    php install.php\n\nYou can compile all files into a single "`api.php`" file using:\n\n    php build.php\n\nNB: The install script will patch the dependencies in the vendor directory for PHP 7.0 compatibility.\n\n### Development\n\nYou can access the non-compiled code at the URL:\n\n    http://localhost:8080/src/records/posts/1\n\nThe non-compiled code resides in the "`src`" and "`vendor`" directories. The "`vendor`" directory contains the dependencies.\n\n### Updating dependencies\n\nYou can update all dependencies of this project using the following command:\n\n    php update.php\n\nThis script will install and run [Composer](https://getcomposer.org/) to update the dependencies.\n\nNB: The update script will patch the dependencies in the vendor directory for PHP 7.0 compatibility.\n\n## TreeQL, a pragmatic GraphQL\n\n[TreeQL](https://treeql.org) allows you to create a "tree" of JSON objects based on your SQL database structure (relations) and your query.\n\nIt is loosely based on the REST standard and also inspired by json:api.\n\n### CRUD + List\n\nThe example posts table has only a a few fields:\n\n    posts  \n    =======\n    id     \n    title  \n    content\n    created\n\nThe CRUD + List operations below act on this table.\n\n#### Create\n\nIf you want to create a record the request can be written in URL format as: \n\n    POST /records/posts\n\nYou have to send a body containing:\n\n    {\n        "title": "Black is the new red",\n        "content": "This is the second post.",\n        "created": "2018-03-06T21:34:01Z"\n    }\n\nAnd it will return the value of the primary key of the newly created record:\n\n    2\n\n#### Read\n\nTo read a record from this table the request can be written in URL format as:\n\n    GET /records/posts/1\n\nWhere "1" is the value of the primary key of the record that you want to read. It will return:\n\n    {\n        "id": 1\n        "title": "Hello world!",\n        "content": "Welcome to the first post.",\n        "created": "2018-03-05T20:12:56Z"\n    }\n\nOn read operations you may apply joins.\n\n#### Update\n\nTo update a record in this table the request can be written in URL format as:\n\n    PUT /records/posts/1\n\nWhere "1" is the value of the primary key of the record that you want to update. Send as a body:\n\n    {\n        "title": "Adjusted title!"\n    }\n\nThis adjusts the title of the post. And the return value is the number of rows that are set:\n\n    1\n\n#### Delete\n\nIf you want to delete a record from this table the request can be written in URL format as:\n\n    DELETE /records/posts/1\n\nAnd it will return the number of deleted rows:\n\n    1\n\n#### List\n\nTo list records from this table the request can be written in URL format as:\n\n    GET /records/posts\n\nIt will return:\n\n    {\n        "records":[\n            {\n                "id": 1,\n                "title": "Hello world!",\n                "content": "Welcome to the first post.",\n                "created": "2018-03-05T20:12:56Z"\n            }\n        ]\n    }\n\nOn list operations you may apply filters and joins.\n\n### Filters\n\nFilters provide search functionality, on list calls, using the "filter" parameter. You need to specify the column\nname, a comma, the match type, another commma and the value you want to filter on. These are supported match types:\n\n  - "cs": contain string (string contains value)\n  - "sw": start with (string starts with value)\n  - "ew": end with (string end with value)\n  - "eq": equal (string or number matches exactly)\n  - "lt": lower than (number is lower than value)\n  - "le": lower or equal (number is lower than or equal to value)\n  - "ge": greater or equal (number is higher than or equal to value)\n  - "gt": greater than (number is higher than value)\n  - "bt": between (number is between two comma separated values)\n  - "in": in (number or string is in comma separated list of values)\n  - "is": is null (field contains "NULL" value)\n\nYou can negate all filters by prepending a "n" character, so that "eq" becomes "neq". \nExamples of filter usage are:\n\n    GET /records/categories?filter=name,eq,Internet\n    GET /records/categories?filter=name,sw,Inter\n    GET /records/categories?filter=id,le,1\n    GET /records/categories?filter=id,ngt,2\n    GET /records/categories?filter=id,bt,1,1\n\nOutput:\n\n    {\n        "records":[\n            {\n                "id": 1\n                "name": "Internet"\n            }\n        ]\n    }\n\nIn the next section we dive deeper into how you can apply multiple filters on a single list call.\n\n### Multiple filters\n\nFilters can be a by applied by repeating the "filter" parameter in the URL. For example the following URL: \n\n    GET /records/categories?filter=id,gt,1&filter=id,lt,3\n\nwill request all categories "where id > 1 and id < 3". If you wanted "where id = 2 or id = 4" you should write:\n\n    GET /records/categories?filter1=id,eq,2&filter2=id,eq,4\n    \nAs you see we added a number to the "filter" parameter to indicate that "OR" instead of "AND" should be applied.\nNote that you can also repeat "filter1" and create an "AND" within an "OR". Since you can also go one level deeper\nby adding a letter (a-f) you can create almost any reasonably complex condition tree.\n\nNB: You can only filter on the requested table (not on it\'s included) and filters are only applied on list calls.\n\n### Column selection\n\nBy default all columns are selected. With the "include" parameter you can select specific columns. \nYou may use a dot to separate the table name from the column name. Multiple columns should be comma separated. \nAn asterisk ("*") may be used as a wildcard to indicate "all columns". Similar to "include" you may use the "exclude" parameter to remove certain columns:\n\n```\nGET /records/categories/1?include=name\nGET /records/categories/1?include=categories.name\nGET /records/categories/1?exclude=categories.id\n```\n\nOutput:\n\n```\n    {\n        "name": "Internet"\n    }\n```\n\nNB: Columns that are used to include related entities are automatically added and cannot be left out of the output.\n\n### Ordering\n\nWith the "order" parameter you can sort. By default the sort is in ascending order, but by specifying "desc" this can be reversed:\n\n```\nGET /records/categories?order=name,desc\nGET /records/categories?order=id,desc&order=name\n```\n\nOutput:\n\n```\n    {\n        "records":[\n            {\n                "id": 3\n                "name": "Web development"\n            },\n            {\n                "id": 1\n                "name": "Internet"\n            }\n        ]\n    }\n```\n\nNB: You may sort on multiple fields by using multiple "order" parameters. You can not order on "joined" columns.\n\n### Limit size\n\nThe "size" parameter limits the number of returned records. This can be used for top N lists together with the "order" parameter (use descending order).\n\n```\nGET /records/categories?order=id,desc&size=1\n```\n\nOutput:\n\n```\n    {\n        "records":[\n            {\n                "id": 3\n                "name": "Web development"\n            }\n        ]\n    }\n```\n\nNB: If you also want to know to the total number of records you may want to use the "page" parameter.\n\n### Pagination\n\nThe "page" parameter holds the requested page. The default page size is 20, but can be adjusted (e.g. to 50).\n\n```\nGET /records/categories?order=id&page=1\nGET /records/categories?order=id&page=1,50\n```\n\nOutput:\n\n```\n    {\n        "records":[\n            {\n                "id": 1\n                "name": "Internet"\n            },\n            {\n                "id": 3\n                "name": "Web development"\n            }\n        ],\n        "results": 2\n    }\n```\n\nNB: Since pages that are not ordered cannot be paginated, pages will be ordered by primary key.\n\n### Joins\n\nLet\'s say that you have a posts table that has comments (made by users) and the posts can have tags.\n\n    posts    comments  users     post_tags  tags\n    =======  ========  =======   =========  ======= \n    id       id        id        id         id\n    title    post_id   username  post_id    name\n    content  user_id   phone     tag_id\n    created  message\n\nWhen you want to list posts with their comments users and tags you can ask for two "tree" paths:\n\n    posts -> comments  -> users\n    posts -> post_tags -> tags\n\nThese paths have the same root and this request can be written in URL format as:\n\n    GET /records/posts?join=comments,users&join=tags\n\nHere you are allowed to leave out the intermediate table that binds posts to tags. In this example\nyou see all three table relation types (hasMany, belongsTo and hasAndBelongsToMany) in effect:\n\n- "post" has many "comments"\n- "comment" belongs to "user"\n- "post" has and belongs to many "tags"\n\nThis may lead to the following JSON data:\n\n    {\n        "records":[\n            {\n                "id": 1,\n                "title": "Hello world!",\n                "content": "Welcome to the first post.",\n                "created": "2018-03-05T20:12:56Z",\n                "comments": [\n                    {\n                        id: 1,\n                        post_id: 1,\n                        user_id: {\n                            id: 1,\n                            username: "mevdschee",\n                            phone: null,\n                        },\n                        message: "Hi!"\n                    },\n                    {\n                        id: 2,\n                        post_id: 1,\n                        user_id: {\n                            id: 1,\n                            username: "mevdschee",\n                            phone: null,\n                        },\n                        message: "Hi again!"\n                    }\n                ],\n                "tags": []\n            },\n            {\n                "id": 2,\n                "title": "Black is the new red",\n                "content": "This is the second post.",\n                "created": "2018-03-06T21:34:01Z",\n                "comments": [],\n                "tags": [\n                    {\n                        id: 1,\n                        message: "Funny"\n                    },\n                    {\n                        id: 2,\n                        message: "Informational"\n                    }\n                ]\n            }\n        ]\n    }\n\nYou see that the "belongsTo" relationships are detected and the foreign key value is replaced by the referenced object.\nIn case of "hasMany" and "hasAndBelongsToMany" the table name is used a new property on the object.\n\n### Batch operations\n\nWhen you want to create, read, update or delete you may specify multiple primary key values in the URL.\nYou also need to send an array instead of an object in the request body for create and update. \n\nTo read a record from this table the request can be written in URL format as:\n\n    GET /records/posts/1,2\n\nThe result may be:\n\n    [\n            {\n                "id": 1,\n                "title": "Hello world!",\n                "content": "Welcome to the first post.",\n                "created": "2018-03-05T20:12:56Z"\n            },\n            {\n                "id": 2,\n                "title": "Black is the new red",\n                "content": "This is the second post.",\n                "created": "2018-03-06T21:34:01Z"\n            }\n    ]\n\nSimilarly when you want to do a batch update the request in URL format is written as:\n\n    PUT /records/posts/1,2\n\nWhere "1" and "2" are the values of the primary keys of the records that you want to update. The body should \ncontain the same number of objects as there are primary keys in the URL:\n\n    [   \n        {\n            "title": "Adjusted title for ID 1"\n        },\n        {\n            "title": "Adjusted title for ID 2"\n        }        \n    ]\n\nThis adjusts the titles of the posts. And the return values are the number of rows that are set:\n\n    1,1\n\nWhich means that there were two update operations and each of them had set one row. Batch operations use database\ntransactions, so they either all succeed or all fail (successful ones get roled back).\n\n### Spatial support\n\nFor spatial support there is an extra set of filters that can be applied on geometry columns and that starting with an "s":\n\n  - "sco": spatial contains (geometry contains another)\n  - "scr": spatial crosses (geometry crosses another)\n  - "sdi": spatial disjoint (geometry is disjoint from another)\n  - "seq": spatial equal (geometry is equal to another)\n  - "sin": spatial intersects (geometry intersects another)\n  - "sov": spatial overlaps (geometry overlaps another)\n  - "sto": spatial touches (geometry touches another)\n  - "swi": spatial within (geometry is within another)\n  - "sic": spatial is closed (geometry is closed and simple)\n  - "sis": spatial is simple (geometry is simple)\n  - "siv": spatial is valid (geometry is valid)\n\nThese filters are based on OGC standards and so is the WKT specification in which the geometry columns are represented.\n\n#### GeoJSON\n\nThe GeoJSON support is a read-only view on the tables and records in GeoJSON format. These requests are supported:\n\n    method path                  - operation - description\n    ----------------------------------------------------------------------------------------\n    GET    /geojson/{table}      - list      - lists records as a GeoJSON FeatureCollection\n    GET    /geojson/{table}/{id} - read      - reads a record by primary key as a GeoJSON Feature\n\nThe "`/geojson`" endpoint uses the "`/records`" endpoint internally and inherits all functionality, such as joins and filters.\nIt also supports a "geometry" parameter to indicate the name of the geometry column in case the table has more than one.\nFor map views it supports the "bbox" parameter in which you can specify upper-left and lower-right coordinates (comma separated).\nThe following Geometry types are supported by the GeoJSON implementation:\n\n  - Point\n  - MultiPoint\n  - LineString\n  - MultiLineString\n  - Polygon\n  - MultiPolygon\n\nThe GeoJSON functionality is enabled by default, but can be disabled using the "controllers" configuration.\n\n## Middleware\n\nYou can enable the following middleware using the "middlewares" config parameter:\n\n- "firewall": Limit access to specific IP addresses\n- "cors": Support for CORS requests (enabled by default)\n- "xsrf": Block XSRF attacks using the \'Double Submit Cookie\' method\n- "ajaxOnly": Restrict non-AJAX requests to prevent XSRF attacks\n- "dbAuth": Support for "Database Authentication"\n- "jwtAuth": Support for "JWT Authentication"\n- "basicAuth": Support for "Basic Authentication"\n- "reconnect": Reconnect to the database with different parameters\n- "authorization": Restrict access to certain tables or columns\n- "validation": Return input validation errors for custom rules\n- "ipAddress": Fill a protected field with the IP address on create\n- "sanitation": Apply input sanitation on create and update\n- "multiTenancy": Restricts tenants access in a multi-tenant scenario\n- "pageLimits": Restricts list operations to prevent database scraping\n- "joinLimits": Restricts join parameters to prevent database scraping\n- "customization": Provides handlers for request and response customization\n\nThe "middlewares" config parameter is a comma separated list of enabled middlewares.\nYou can tune the middleware behavior using middleware specific configuration parameters:\n\n- "firewall.reverseProxy": Set to "true" when a reverse proxy is used ("")\n- "firewall.allowedIpAddresses": List of IP addresses that are allowed to connect ("")\n- "cors.allowedOrigins": The origins allowed in the CORS headers ("*")\n- "cors.allowHeaders": The headers allowed in the CORS request ("Content-Type, X-XSRF-TOKEN")\n- "cors.allowMethods": The methods allowed in the CORS request ("OPTIONS, GET, PUT, POST, DELETE, PATCH")\n- "cors.allowCredentials": To allow credentials in the CORS request ("true")\n- "cors.exposeHeaders": Whitelist headers that browsers are allowed to access ("")\n- "cors.maxAge": The time that the CORS grant is valid in seconds ("1728000")\n- "xsrf.excludeMethods": The methods that do not require XSRF protection ("OPTIONS,GET")\n- "xsrf.cookieName": The name of the XSRF protection cookie ("XSRF-TOKEN")\n- "xsrf.headerName": The name of the XSRF protection header ("X-XSRF-TOKEN")\n- "ajaxOnly.excludeMethods": The methods that do not require AJAX ("OPTIONS,GET")\n- "ajaxOnly.headerName": The name of the required header ("X-Requested-With")\n- "ajaxOnly.headerValue": The value of the required header ("XMLHttpRequest")\n- "dbAuth.mode": Set to "optional" if you want to allow anonymous access ("required")\n- "dbAuth.usersTable": The table that is used to store the users in ("users")\n- "dbAuth.usernameColumn": The users table column that holds usernames ("username")\n- "dbAuth.passwordColumn": The users table column that holds passwords ("password")\n- "dbAuth.returnedColumns": The columns returned on successful login, empty means \'all\' ("")\n- "jwtAuth.mode": Set to "optional" if you want to allow anonymous access ("required")\n- "jwtAuth.header": Name of the header containing the JWT token ("X-Authorization")\n- "jwtAuth.leeway": The acceptable number of seconds of clock skew ("5")\n- "jwtAuth.ttl": The number of seconds the token is valid ("30")\n- "jwtAuth.secrets": The shared secret(s) used to sign the JWT token with ("")\n- "jwtAuth.algorithms": The algorithms that are allowed, empty means \'all\' ("")\n- "jwtAuth.audiences": The audiences that are allowed, empty means \'all\' ("")\n- "jwtAuth.issuers": The issuers that are allowed, empty means \'all\' ("")\n- "basicAuth.mode": Set to "optional" if you want to allow anonymous access ("required")\n- "basicAuth.realm": Text to prompt when showing login ("Username and password required")\n- "basicAuth.passwordFile": The file to read for username/password combinations (".htpasswd")\n- "reconnect.driverHandler": Handler to implement retrieval of the database driver ("")\n- "reconnect.addressHandler": Handler to implement retrieval of the database address ("")\n- "reconnect.portHandler": Handler to implement retrieval of the database port ("")\n- "reconnect.databaseHandler": Handler to implement retrieval of the database name ("")\n- "reconnect.tablesHandler": Handler to implement retrieval of the table names ("")\n- "reconnect.usernameHandler": Handler to implement retrieval of the database username ("")\n- "reconnect.passwordHandler": Handler to implement retrieval of the database password ("")\n- "authorization.tableHandler": Handler to implement table authorization rules ("")\n- "authorization.columnHandler": Handler to implement column authorization rules ("")\n- "authorization.recordHandler": Handler to implement record authorization filter rules ("")\n- "validation.handler": Handler to implement validation rules for input values ("")\n- "ipAddress.tables": Tables to search for columns to override with IP address ("")\n- "ipAddress.columns": Columns to protect and override with the IP address on create ("")\n- "sanitation.handler": Handler to implement sanitation rules for input values ("")\n- "multiTenancy.handler": Handler to implement simple multi-tenancy rules ("")\n- "pageLimits.pages": The maximum page number that a list operation allows ("100")\n- "pageLimits.records": The maximum number of records returned by a list operation ("1000")\n- "joinLimits.depth": The maximum depth (length) that is allowed in a join path ("3")\n- "joinLimits.tables": The maximum number of tables that you are allowed to join ("10")\n- "joinLimits.records": The maximum number of records returned for a joined entity ("1000")\n- "customization.beforeHandler": Handler to implement request customization ("")\n- "customization.afterHandler": Handler to implement response customization ("")\n\nIf you don\'t specify these parameters in the configuration, then the default values (between brackets) are used.\n\nIn the sections below you find more information on the built-in middleware.\n\n### Authentication\n\nCurrently there are three types of authentication supported. They all store the authenticated user in the `$_SESSION` super global.\nThis variable can be used in the authorization handlers to decide wether or not sombeody should have read or write access to certain tables, columns or records.\nThe following overview shows the kinds of authentication middleware that you can enable.\n\n| Name     | Middleware | Authenticated via      | Users are stored in | Session variable        |\n| -------- | ---------- | ---------------------- | ------------------- | ----------------------- |\n| Database | dbAuth     | \'/login\' endpoint      | database table      | `$_SESSION[\'user\']`     |\n| Basic    | basicAuth  | \'Authorization\' header | \'.htpasswd\' file    | `$_SESSION[\'username\']` |\n| JWT      | jwtAuth    | \'Authorization\' header | identity provider   | `$_SESSION[\'claims\']`   |\n\nBelow you find more information on each of the authentication types.\n\n#### Database authentication\n\nThe database authentication middleware defines two new routes:\n\n    method path       - parameters               - description\n    ----------------------------------------------------------------------------------------\n    POST   /login     - username + password      - logs a user in by username and password\n    POST   /logout    -                          - logs out the currently logged in user\n\nA user can be logged in by sending it\'s username and password to the login endpoint (in JSON format).\nThe authenticated user (with all it\'s properties) will be stored in the `$_SESSION[\'user\']` variable.\nThe user can be logged out by sending a POST request with an empty body to the logout endpoint.\nThe passwords are stored as hashes in the password column in the users table. To generate the hash value\nfor the password \'pass2\' you can run on the command line:\n\n    php -r \'echo password_hash("pass2", PASSWORD_DEFAULT)."\\n";\'\n\nIt is IMPORTANT to restrict access to the users table using the \'authorization\' middleware, otherwise all \nusers can freely add, modify or delete any account! The minimal configuration is shown below:\n\n    \'middlewares\' => \'dbAuth,authorization\',\n    \'authorization.tableHandler\' => function ($operation, $tableName) {\n        return $tableName != \'users\';\n    },\n\nNote that this middleware uses session cookies and stores the logged in state on the server.\n\n#### Basic authentication\n\nThe Basic type supports a file (by default \'.htpasswd\') that holds the users and their (hashed) passwords separated by a colon (\':\'). \nWhen the passwords are entered in plain text they fill be automatically hashed.\nThe authenticated username will be stored in the `$_SESSION[\'username\']` variable.\nYou need to send an "Authorization" header containing a base64 url encoded and colon separated username and password after the word "Basic".\n\n    Authorization: Basic dXNlcm5hbWUxOnBhc3N3b3JkMQ\n\nThis example sends the string "username1:password1".\n\n#### JWT authentication\n\nThe JWT type requires another (SSO/Identity) server to sign a token that contains claims. \nBoth servers share a secret so that they can either sign or verify that the signature is valid.\nClaims are stored in the `$_SESSION[\'claims\']` variable. You need to send an "X-Authorization" \nheader containing a base64 url encoded and dot separated token header, body and signature after\nthe word "Bearer" ([read more about JWT here](https://jwt.io/)). The standard says you need to\nuse the "Authorization" header, but this is problematic in Apache and PHP.\n\n    X-Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6IjE1MzgyMDc2MDUiLCJleHAiOjE1MzgyMDc2MzV9.Z5px_GT15TRKhJCTHhDt5Z6K6LRDSFnLj8U5ok9l7gw\n\nThis example sends the signed claims:\n\n    {\n      "sub": "1234567890",\n      "name": "John Doe",\n      "admin": true,\n      "iat": "1538207605",\n      "exp": 1538207635\n    }\n\nNB: The JWT implementation only supports the RSA and HMAC based algorithms.\n\n##### Configure and test JWT authentication with Auth0\n\nFirst you need to create an account on [Auth0](https://auth0.com/auth/login).\nOnce logged in, you have to create an application (its type does not matter). Collect the `Domain`\nand `Client ID` and keep them for a later use. Then, create an API: give it a name and fill the\n`identifier` field with your API endpoint\'s URL.\n\nThen you have to configure the `jwtAuth.secrets` configuration in your `api.php` file.\nDon\'t fill it with the `secret` you will find in your Auth0 application settings but with **a\npublic certificate**. To find it, go to the settings of your application, then in "Extra settings".\nYou will now find a "Certificates" tab where you will find your Public Key in the Signing\nCertificate field.\n\nTo test your integration, you can copy the [auth0/vanilla.html](examples/clients/auth0/vanilla.html)\nfile. Be sure to fill these three variables:\n\n - `authUrl` with your Auth0 domain\n - `clientId` with your Client ID\n - `audience` with the API URL you created in Auth0\n\n\xe2\x9a\xa0\xef\xb8\x8f If you don\'t fill the audience parameter, it will not work because you won\'t get a valid JWT.\n\nYou can also change the `url` variable, used to test the API with authentication.\n\n[More info](https://auth0.com/docs/api-auth/tutorials/verify-access-token)\n\n##### Configure and test JWT authentication with Firebase\n\nFirst you need to create a Firebase project on the [Firebase console](https://console.firebase.google.com/).\nAdd a web application to this project and grab the code snippet for later use.\n\nThen you have to configure the `jwtAuth.secrets` configuration in your `api.php` file.\nGrab the public key via this [URL](https://www.googleapis.com/robot/v1/metadata/x509/securetoken@system.gserviceaccount.com).\nThere may be several certificates, just grab the one corresponding to your `kid` (if you don\'t\nknow what it is, just test them all until you will be logged in).\nNow, just fill `jwtAuth.secrets` with your public key.\n\nTo test your integration, you can copy the [firebase/vanilla.html](examples/clients/firebase/vanilla.html)\nfile and the [firebase/vanilla-success.html](examples/clients/firebase/vanilla-success.html) file,\nused as a "success" page and to display the API result.\n\nReplace, in both files, the Firebase configuration (`firebaseConfig` object).\n\nYou can also change the `url` variable, used to test the API with authentication.\n\n[More info](https://firebase.google.com/docs/auth/admin/verify-id-tokens#verify_id_tokens_using_a_third-party_jwt_library)\n\n### Authorizing operations\n\nThe Authorization model acts on "operations". The most important ones are listed here:\n\n    method path                  - operation - description\n    ----------------------------------------------------------------------------------------\n    GET    /records/{table}      - list      - lists records\n    POST   /records/{table}      - create    - creates records\n    GET    /records/{table}/{id} - read      - reads a record by primary key\n    PUT    /records/{table}/{id} - update    - updates columns of a record by primary key\n    DELETE /records/{table}/{id} - delete    - deletes a record by primary key\n    PATCH  /records/{table}/{id} - increment - increments columns of a record by primary key\n\nThe "`/openapi`" endpoint will only show what is allowed in your session. It also has a special \n"document" operation to allow you to hide tables and columns from the documentation.\n    \nFor endpoints that start with "`/columns`" there are the operations "reflect" and "remodel". \nThese operations can display or change the definition of the database, table or column. \nThis functionality is disabled by default and for good reason (be careful!). \nAdd the "columns" controller in the configuration to enable this functionality.\n\n### Authorizing tables, columns and records\n\nBy default all tables and columns are accessible. If you want to restrict access to some tables you may add the \'authorization\' middleware \nand define a \'authorization.tableHandler\' function that returns \'false\' for these tables.\n\n    \'authorization.tableHandler\' => function ($operation, $tableName) {\n        return $tableName != \'license_keys\';\n    },\n\nThe above example will restrict access to the table \'license_keys\' for all operations.\n\n    \'authorization.columnHandler\' => function ($operation, $tableName, $columnName) {\n        return !($tableName == \'users\' && $columnName == \'password\');\n    },\n\nThe above example will restrict access to the \'password\' field of the \'users\' table for all operations.\n\n    \'authorization.recordHandler\' => function ($operation, $tableName) {\n        return ($tableName == \'users\') ? \'filter=username,neq,admin\' : \'\';\n    },\n\nThe above example will disallow access to user records where the username is \'admin\'. \nThis construct adds a filter to every executed query. \n\nNB: You need to handle the creation of invalid records with a validation (or sanitation) handler.\n\n### SQL GRANT authorization\n\nYou can alternatively use database permissons (SQL GRANT statements) to define the authorization model. In this case you\nshould not use the "authorization" middleware, but you do need to use the "reconnect" middleware. The handlers of the\n"reconnect" middleware allow you to specify the correct username and password, like this:\n\n    \'reconnect.usernameHandler\' => function () {\n        return \'mevdschee\';\n    },\n    \'reconnect.passwordHandler\' => function () {\n        return \'secret123\';\n    },\n\nThis will make the API connect to the database specifying "mevdschee" as the username and "secret123" as the password.\nThe OpenAPI specification is less specific on allowed and disallowed operations, when you are using database permissions,\nas the permissions are not read in the reflection step.\n\nNB: You may want to retrieve the username and password from the session (the "$_SESSION" variable).\n\n### Sanitizing input\n\nBy default all input is accepted and sent to the database. If you want to strip (certain) HTML tags before storing you may add \nthe \'sanitation\' middleware and define a \'sanitation.handler\' function that returns the adjusted value.\n\n    \'sanitation.handler\' => function ($operation, $tableName, $column, $value) {\n        return is_string($value) ? strip_tags($value) : $value;\n    },\n\nThe above example will strip all HTML tags from strings in the input.\n\n### Validating input\n\nBy default all input is accepted. If you want to validate the input, you may add the \'validation\' middleware and define a \n\'validation.handler\' function that returns a boolean indicating whether or not the value is valid.\n\n    \'validation.handler\' => function ($operation, $tableName, $column, $value, $context) {\n        return ($column[\'name\'] == \'post_id\' && !is_numeric($value)) ? \'must be numeric\' : true;\n    },\n\nWhen you edit a comment with id 4 using:\n\n    PUT /records/comments/4\n\nAnd you send as a body:\n\n    {"post_id":"two"}\n\nThen the server will return a \'422\' HTTP status code and nice error message:\n\n    {\n        "code": 1013,\n        "message": "Input validation failed for \'comments\'",\n        "details": {\n            "post_id":"must be numeric"\n        }\n    }\n\nYou can parse this output to make form fields show up with a red border and their appropriate error message.\n\n### Multi-tenancy support\n\nTwo forms of multi-tenancy are supported:\n\n - Single database, where every table has a tenant column (using the "multiTenancy" middleware).\n - Multi database, where every tenant has it\'s own database (using the "reconnect" middleware).\n\nBelow is an explanation of the corresponding middlewares.\n\n#### Multi-tenancy middleware\n\nYou may use the "multiTenancy" middleware when you have a single multi-tenant database. \nIf your tenants are identified by the "customer_id" column, then you can use the following handler:\n\n    \'multiTenancy.handler\' => function ($operation, $tableName) {\n        return [\'customer_id\' => 12];\n    },\n\nThis construct adds a filter requiring "customer_id" to be "12" to every operation (except for "create").\nIt also sets the column "customer_id" on "create" to "12" and removes the column from any other write operation.\n\nNB: You may want to retrieve the customer id from the session (the "$_SESSION" variable).\n\n#### Reconnect middleware\n\nYou may use the "reconnect" middleware when you have a separate database for each tenant.\nIf the tenant has it\'s own database named "customer_12", then you can use the following handler:\n\n    \'reconnect.databaseHandler\' => function () {\n        return \'customer_12\';\n    },\n\nThis will make the API reconnect to the database specifying "customer_12" as the database name. If you don\'t want\nto use the same credentials, then you should also implement the "usernameHandler" and "passwordHandler".\n\nNB: You may want to retrieve the database name from the session (the "$_SESSION" variable).\n\n### Prevent database scraping\n\nYou may use the "joinLimits" and "pageLimits" middleware to prevent database scraping.\nThe "joinLimits" middleware limits the table depth, number of tables and number of records returned in a join operation. \nIf you want to allow 5 direct direct joins with a maximum of 25 records each, you can specify:\n\n    \'joinLimits.depth\' => 1,\n    \'joinLimits.tables\' => 5,\n    \'joinLimits.records\' => 25,\n\nThe "pageLimits" middleware limits the page number and the number records returned from a list operation. \nIf you want to allow no more than 10 pages with a maximum of 25 records each, you can specify:\n\n    \'pageLimits.pages\' => 10,\n    \'pageLimits.records\' => 25,\n\nNB: The maximum number of records is also applied when there is no page number specified in the request.\n\n### Customization handlers\n\nYou may use the "customization" middleware to modify request and response and implement any other functionality.\n\n    \'customization.beforeHandler\' => function ($operation, $tableName, $request, $environment) {\n        $environment->start = microtime(true);\n    },\n    \'customization.afterHandler\' => function ($operation, $tableName, $response, $environment) {\n        return $response->withHeader(\'X-Time-Taken\', microtime(true) - $environment->start);\n    },\n\nThe above example will add a header "X-Time-Taken" with the number of seconds the API call has taken.\n\n### File uploads\n\nFile uploads are supported through the [FileReader API](https://caniuse.com/#feat=filereader), check out the [example](https://github.com/mevdschee/php-crud-api/blob/master/examples/clients/upload/vanilla.html).\n\n## OpenAPI specification\n\nOn the "/openapi" end-point the OpenAPI 3.0 (formerly called "Swagger") specification is served. \nIt is a machine readable instant documentation of your API. To learn more, check out these links:\n\n- [Swagger Editor](https://editor.swagger.io/) can be used to view and debug the generated specification.\n- [OpenAPI specification](https://swagger.io/specification/) is a manual for creating an OpenAPI specification.\n- [Swagger Petstore](https://petstore.swagger.io/) is an example documentation that is generated using OpenAPI.\n\n## Cache\n\nThere are 4 cache engines that can be configured by the "cacheType" config parameter:\n\n- TempFile (default)\n- Redis\n- Memcache\n- Memcached\n\nYou can install the dependencies for the last three engines by running:\n\n    sudo apt install php-redis redis\n    sudo apt install php-memcache memcached\n    sudo apt install php-memcached memcached\n\nThe default engine has no dependencies and will use temporary files in the system "temp" path.\n\nYou may use the "cachePath" config parameter to specify the file system path for the temporary files or\nin case that you use a non-default "cacheType" the hostname (optionally with port) of the cache server.\n\n## Types\n\nThese are the supported types with their default length/precision/scale:\n\ncharacter types\n- varchar(255)\n- clob\n\nboolean types:\n- boolean\n\ninteger types:\n- integer\n- bigint\n\nfloating point types:\n- float\n- double\n\ndecimal types:\n- decimal(19,4)\n\ndate/time types:\n- date\n- time\n- timestamp\n\nbinary types:\n- varbinary(255)\n- blob\n\nother types:\n- geometry /* non-jdbc type, extension with limited support */\n\n## 64 bit integers in JavaScript\n\nJavaScript does not support 64 bit integers. All numbers are stored as 64 bit floating point values. The mantissa of a 64 bit floating point number is only 53 bit and that is why all integer numbers bigger than 53 bit may cause problems in JavaScript.\n\n## Errors\n\nThe following errors may be reported:\n\n| Error | HTTP response code         | Message\n| ------| -------------------------- | --------------\n| 1000  | 404 Not found              | Route not found \n| 1001  | 404 Not found              | Table not found \n| 1002  | 422 Unprocessable entity   | Argument count mismatch \n| 1003  | 404 Not found              | Record not found \n| 1004  | 403 Forbidden              | Origin is forbidden \n| 1005  | 404 Not found              | Column not found \n| 1006  | 409 Conflict               | Table already exists \n| 1007  | 409 Conflict               | Column already exists \n| 1008  | 422 Unprocessable entity   | Cannot read HTTP message \n| 1009  | 409 Conflict               | Duplicate key exception \n| 1010  | 409 Conflict               | Data integrity violation \n| 1011  | 401 Unauthorized           | Authentication required \n| 1012  | 403 Forbidden              | Authentication failed \n| 1013  | 422 Unprocessable entity   | Input validation failed \n| 1014  | 403 Forbidden              | Operation forbidden \n| 1015  | 405 Method not allowed     | Operation not supported \n| 1016  | 403 Forbidden              | Temporary or permanently blocked \n| 1017  | 403 Forbidden              | Bad or missing XSRF token \n| 1018  | 403 Forbidden              | Only AJAX requests allowed \n| 1019  | 403 Forbidden              | Pagination Forbidden \n| 9999  | 500 Internal server error  | Unknown error \n\nThe following JSON structure is used:\n\n    {\n        "code":1002,\n        "message":"Argument count mismatch in \'1\'"\n    }\n\nNB: Any non-error response will have status: 200 OK\n\n## Tests\n\nI am testing mainly on Ubuntu and I have the following test setups:\n\n  - (Docker) Debian 10 with PHP 7.3, MariaDB 10.3, PostgreSQL 11.4 (PostGIS 2.5)\n  - (Docker) Debian 9 with PHP 7.0, MariaDB 10.1, PostgreSQL 9.6 (PostGIS 2.3)\n  - (Docker) Ubuntu 16.04 with PHP 7.0, MariaDB 10.0, PostgreSQL 9.5 (PostGIS 2.2) and SQL Server 2017\n  - (Docker) Ubuntu 18.04 with PHP 7.2, MySQL 5.7, PostgreSQL 10.4 (PostGIS 2.4)\n\nThis covers not all environments (yet), so please notify me of failing tests and report your environment. \nI will try to cover most relevant setups in the "docker" folder of the project.\n\n### Running\n\nTo run the functional tests locally you may run the following command:\n\n    php test.php\n\nThis runs the functional tests from the "tests" directory. It uses the database dumps (fixtures) and\ndatabase configuration (config) from the corresponding subdirectories.\n\n## Nginx config example\n```\nserver {\n    listen 80 default_server;\n    listen [::]:80 default_server;\n\n    root /var/www/html;\n    index index.php index.html index.htm index.nginx-debian.html;\n    server_name server_domain_or_IP;\n\n    location / {\n        try_files $uri $uri/ =404;\n    }\n\n    location ~ [^/]\\.php(/|$) {\n        fastcgi_split_path_info ^(.+\\.php)(/.+)$;\n        try_files $fastcgi_script_name =404;\n        set $path_info $fastcgi_path_info;\n        fastcgi_param PATH_INFO $path_info;\n        fastcgi_index index.php;\n        include fastcgi.conf;\n        fastcgi_pass unix:/run/php/php7.0-fpm.sock;\n    }\n\n    location ~ /\\.ht {\n        deny all;\n    }\n}\n```\n\n### Docker\n\nInstall docker using the following commands and then logout and login for the changes to take effect:\n\n    sudo apt install docker.io\n    sudo usermod -aG docker ${USER}\n\nTo run the docker tests run "build_all.sh" and "run_all.sh" from the docker directory. The output should be:\n\n    ================================================\n    Debian 10 (PHP 7.3)\n    ================================================\n    [1/4] Starting MariaDB 10.3 ..... done\n    [2/4] Starting PostgreSQL 11.4 .. done\n    [3/4] Starting SQLServer 2017 ... skipped\n    [4/4] Cloning PHP-CRUD-API v2 ... skipped\n    ------------------------------------------------\n    mysql: 100 tests ran in 3623 ms, 0 failed\n    pgsql: 100 tests ran in 1310 ms, 0 failed\n    sqlsrv: skipped, driver not loaded\n    ================================================\n    Debian 9 (PHP 7.0)\n    ================================================\n    [1/4] Starting MariaDB 10.1 ..... done\n    [2/4] Starting PostgreSQL 9.6 ... done\n    [3/4] Starting SQLServer 2017 ... skipped\n    [4/4] Cloning PHP-CRUD-API v2 ... skipped\n    ------------------------------------------------\n    mysql: 100 tests ran in 4844 ms, 0 failed\n    pgsql: 100 tests ran in 1394 ms, 0 failed\n    sqlsrv: skipped, driver not loaded\n    ================================================\n    Ubuntu 16.04 (PHP 7.0)\n    ================================================\n    [1/4] Starting MariaDB 10.0 ..... done\n    [2/4] Starting PostgreSQL 9.5 ... done\n    [3/4] Starting SQLServer 2017 ... done\n    [4/4] Cloning PHP-CRUD-API v2 ... skipped\n    ------------------------------------------------\n    mysql: 100 tests ran in 4932 ms, 0 failed\n    pgsql: 100 tests ran in 1394 ms, 0 failed\n    sqlsrv: 100 tests ran in 50977 ms, 0 failed\n    ================================================\n    Ubuntu 18.04 (PHP 7.2)\n    ================================================\n    [1/4] Starting MySQL 5.7 ........ done\n    [2/4] Starting PostgreSQL 10.4 .. done\n    [3/4] Starting SQLServer 2017 ... skipped\n    [4/4] Cloning PHP-CRUD-API v2 ... skipped\n    ------------------------------------------------\n    mysql: 100 tests ran in 4327 ms, 0 failed\n    pgsql: 100 tests ran in 1396 ms, 0 failed\n    sqlsrv: skipped, driver not loaded\n\nThe above test run (including starting up the databases) takes less than 5 minutes on my slow laptop.\n\n    $ ./run.sh \n    1) debian10\n    2) debian9\n    3) ubuntu16\n    4) ubuntu18\n    > 4\n    ================================================\n    Ubuntu 18.04 (PHP 7.2)\n    ================================================\n    [1/4] Starting MySQL 5.7 ........ done\n    [2/4] Starting PostgreSQL 10.4 .. done\n    [3/4] Starting SQLServer 2017 ... skipped\n    [4/4] Cloning PHP-CRUD-API v2 ... skipped\n    ------------------------------------------------\n    mysql: 100 tests ran in 4327 ms, 0 failed\n    pgsql: 100 tests ran in 1396 ms, 0 failed\n    sqlsrv: skipped, driver not loaded\n    root@b7ab9472e08f:/php-crud-api# \n\nAs you can see the "run.sh" script gives you access to a prompt in a chosen the docker environment.\nIn this environment the local files are mounted. This allows for easy debugging on different environments.\nYou may type "exit" when you are done.\n'