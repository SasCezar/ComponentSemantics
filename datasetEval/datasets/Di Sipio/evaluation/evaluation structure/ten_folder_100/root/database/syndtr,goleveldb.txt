b'This is an implementation of the [LevelDB key/value database](http:code.google.com/p/leveldb) in the [Go programming language](http:golang.org).\n\n[![Build Status](https://travis-ci.org/syndtr/goleveldb.png?branch=master)](https://travis-ci.org/syndtr/goleveldb)\n\nInstallation\n-----------\n\n\tgo get github.com/syndtr/goleveldb/leveldb\n\nRequirements\n-----------\n\n* Need at least `go1.5` or newer.\n\nUsage\n-----------\n\nCreate or open a database:\n```go\n// The returned DB instance is safe for concurrent use. Which mean that all\n// DB\'s methods may be called concurrently from multiple goroutine.\ndb, err := leveldb.OpenFile("path/to/db", nil)\n...\ndefer db.Close()\n...\n```\nRead or modify the database content:\n```go\n// Remember that the contents of the returned slice should not be modified.\ndata, err := db.Get([]byte("key"), nil)\n...\nerr = db.Put([]byte("key"), []byte("value"), nil)\n...\nerr = db.Delete([]byte("key"), nil)\n...\n```\n\nIterate over database content:\n```go\niter := db.NewIterator(nil, nil)\nfor iter.Next() {\n\t// Remember that the contents of the returned slice should not be modified, and\n\t// only valid until the next call to Next.\n\tkey := iter.Key()\n\tvalue := iter.Value()\n\t...\n}\niter.Release()\nerr = iter.Error()\n...\n```\nSeek-then-Iterate:\n```go\niter := db.NewIterator(nil, nil)\nfor ok := iter.Seek(key); ok; ok = iter.Next() {\n\t// Use key/value.\n\t...\n}\niter.Release()\nerr = iter.Error()\n...\n```\nIterate over subset of database content:\n```go\niter := db.NewIterator(&util.Range{Start: []byte("foo"), Limit: []byte("xoo")}, nil)\nfor iter.Next() {\n\t// Use key/value.\n\t...\n}\niter.Release()\nerr = iter.Error()\n...\n```\nIterate over subset of database content with a particular prefix:\n```go\niter := db.NewIterator(util.BytesPrefix([]byte("foo-")), nil)\nfor iter.Next() {\n\t// Use key/value.\n\t...\n}\niter.Release()\nerr = iter.Error()\n...\n```\nBatch writes:\n```go\nbatch := new(leveldb.Batch)\nbatch.Put([]byte("foo"), []byte("value"))\nbatch.Put([]byte("bar"), []byte("another value"))\nbatch.Delete([]byte("baz"))\nerr = db.Write(batch, nil)\n...\n```\nUse bloom filter:\n```go\no := &opt.Options{\n\tFilter: filter.NewBloomFilter(10),\n}\ndb, err := leveldb.OpenFile("path/to/db", o)\n...\ndefer db.Close()\n...\n```\nDocumentation\n-----------\n\nYou can read package documentation [here](http:godoc.org/github.com/syndtr/goleveldb).\n'