b'# [![arctic](logo/arctic_50.png)](https://github.com/manahl/arctic) [Arctic TimeSeries and Tick store](https://github.com/manahl/arctic)\n\n\n[![Documentation Status](https://readthedocs.org/projects/arctic/badge/?version=latest)](https://arctic.readthedocs.io/en/latest/?badge=latest)\n[![Travis CI](https://travis-ci.org/man-group/arctic.svg?branch=master)](https://travis-ci.org/man-group/arctic)\n[![Join the chat at https://gitter.im/manahl/arctic](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/manahl/arctic?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nArctic is a high performance datastore for numeric data. It supports [Pandas](http://pandas.pydata.org/),\n[numpy](http://www.numpy.org/) arrays and pickled objects out-of-the-box, with pluggable support for\nother data types and optional versioning.\n\nArctic can query millions of rows per second per client, achieves ~10x compression on network bandwidth,\n~10x compression on disk, and scales to hundreds of millions of rows per second per\n[MongoDB](https://www.mongodb.org/) instance.\n\nArctic has been under active development at [Man AHL](http://www.ahl.com/) since 2012.\n\n## Quickstart\n\n### Install Arctic\n\n```\npip install git+https://github.com/manahl/arctic.git\n```\n\n### Run a MongoDB\n\n```\nmongod --dbpath <path/to/db_directory>\n```\n\n### Using VersionStore\n\n```\nfrom arctic import Arctic\nimport quandl\n\n# Connect to Local MONGODB\nstore = Arctic(\'localhost\')\n\n# Create the library - defaults to VersionStore\nstore.initialize_library(\'NASDAQ\')\n\n# Access the library\nlibrary = store[\'NASDAQ\']\n\n# Load some data - maybe from Quandl\naapl = quandl.get("WIKI/AAPL", authtoken="your token here")\n\n# Store the data in the library\nlibrary.write(\'AAPL\', aapl, metadata={\'source\': \'Quandl\'})\n\n# Reading the data\nitem = library.read(\'AAPL\')\naapl = item.data\nmetadata = item.metadata\n```\n\nVersionStore supports much more: [See the HowTo](howtos/how_to_use_arctic.py)!\n\n\n### Adding your own storage engine\n\nPlugging a custom class in as a library type is straightforward. [This example\nshows how.](howtos/how_to_custom_arctic_library.py)\n\n## Documentation\n\nYou can find complete documentation at [Arctic docs](https://arctic.readthedocs.io/en/latest/)\n\n## Concepts\n\n### Libraries\n\nArctic provides namespaced *libraries* of data.  These libraries allow\nbucketing data by *source*, *user* or some other metric (for example frequency:\nEnd-Of-Day; Minute Bars; etc.).\n\nArctic supports multiple data libraries per user.  A user (or namespace)\nmaps to a MongoDB database (the granularity of mongo authentication).  The library\nitself is composed of a number of collections within the database. Libraries look like:\n\n  * user.EOD\n  * user.ONEMINUTE\n\nA library is mapped to a Python class.  All library databases in MongoDB are prefixed with \'arctic_\'\n\n### Storage Engines\n\nArctic includes three storage engines:\n\n  * [VersionStore](arctic/store/version_store.py): a key-value versioned TimeSeries store. It supports:\n      * Pandas data types (other Python types pickled)\n      * Multiple versions of each data item. Can easily read previous versions.\n      * Create point-in-time snapshots across symbols in a library\n      * Soft quota support\n      * Hooks for persisting other data types\n      * Audited writes: API for saving metadata and data before and after a write.\n      * a wide range of TimeSeries data frequencies: End-Of-Day to Minute bars\n      * [See the HowTo](howtos/how_to_use_arctic.py)\n      * [Documentation](docs/versionstore.md)\n  * [TickStore](arctic/tickstore/tickstore.py): Column oriented tick database.  Supports\n    dynamic fields, chunks aren\'t versioned. Designed for large continuously ticking data.\n  * [Chunkstore](https://github.com/manahl/arctic/wiki/Chunkstore): A storage type that allows data to be stored in customizable chunk sizes. Chunks\n    aren\'t versioned, and can be appended to and updated in place. \n    * [Documentation](docs/chunkstore.md)\n\nArctic storage implementations are **pluggable**.  VersionStore is the default.\n\n\n## Requirements\n\nArctic currently works with:\n\n * Python 2.7, 3.4, 3.5, 3.6\n * pymongo >= 3.6\n * Pandas\n * MongoDB >= 2.4.x\n\n\nOperating Systems:\n * Linux\n * macOS\n * Windows 10\n\n## Acknowledgements\n\nArctic has been under active development at [Man AHL](http://www.ahl.com/) since 2012.\n\nIt wouldn\'t be possible without the work of the AHL Data Engineering Team including:\n\n * [Richard Bounds](https://github.com/richardbounds)\n * [James Blackburn](https://github.com/jamesblackburn)\n * [Vlad Mereuta](https://github.com/vmereuta)\n * [Tom Taylor](https://github.com/TomTaylorLondon)\n * Tope Olukemi\n * [Drake Siard](https://github.com/drakesiard)\n * [Slavi Marinov](https://github.com/slavi)\n * [Wilfred Hughes](https://github.com/wilfred)\n * [Edward Easton](https://github.com/eeaston)\n * [Bryant Moscon](https://github.com/bmoscon)\n * [Dimosthenis Pediaditakis](https://github.com/dimosped)\n * [Shashank Khare](https://github.com/shashank88)\n * ... and many others ...\n\nContributions welcome!\n\n## License\n\nArctic is licensed under the GNU LGPL v2.1.  A copy of which is included in [LICENSE](LICENSE)\n'