b'Dexie.js\n========\n\n[![NPM Version][npm-image]][npm-url] [![Build Status](https://travis-ci.org/dfahlander/Dexie.js.svg?branch=master)](https://travis-ci.org/dfahlander/Dexie.js)[![Tested with Browserstack](http://dexie.org/assets/images/tested-with-browserstack2.png)](https://www.browserstack.com)\n\nDexie.js is a wrapper library for indexedDB - the standard database in the browser. http://dexie.org\n\n#### Why?\nDexie solves three main issues with the native IndexedDB API:\n\n 1. Ambiguous error handling\n 2. Poor queries\n 3. Code complexity\n\nDexie provides a neat database API with a well thought-through API design, robust error handling, extendability, change tracking awareness and extended KeyRange support (case insensitive search, set matches and OR operations).\n\n#### Hello World\n\n```html\n<!doctype html>\n<html>\n <head>\n  <script src="https://unpkg.com/dexie@latest/dist/dexie.js"></script>\n  <script>\n   //\n   // Declare Database\n   //\n   var db = new Dexie("FriendDatabase");\n   db.version(1).stores({\n     friends: "++id,name,age"\n   });\n\n   //\n   // Manipulate and Query Database\n   //\n   db.friends.add({name: "Josephine", age: 21}).then(function() {\n       return db.friends.where("age").below(25).toArray();\n   }).then(function (youngFriends) {\n       alert ("My young friends: " + JSON.stringify(youngFriends));\n   }).catch(function (e) {\n       alert ("Error: " + (e.stack || e));\n   });\n  </script>\n </head>\n</html>\n```\nYes, it\'s that simple.\n\n[Tutorial](http://dexie.org/docs/Tutorial)\n\n[API Reference](http://dexie.org/docs/API-Reference)\n\n[Samples](http://dexie.org/docs/Samples)\n\n### Performance\n\nDexie has kick-ass performance. Its [bulk methods](http://dexie.org/docs/Table/Table.bulkPut()) take advantage of a lesser-known feature in IndexedDB that makes it possible to store stuff without listening to every onsuccess event. This speeds up the performance to a maximum.\n\n#### Supported operations\n```js\nabove(key): Collection;\naboveOrEqual(key): Collection;\nadd(item, key?): Promise;\nand(filter: (x) => boolean): Collection;\nanyOf(keys[]): Collection;\nanyOfIgnoreCase(keys: string[]): Collection;\nbelow(key): Collection;\nbelowOrEqual(key): Collection;\nbetween(lower, upper, includeLower?, includeUpper?): Collection;\nbulkAdd(items: Array): Promise;\nbulkDelete(keys: Array): Promise;\nbulkPut(items: Array): Promise;\nclear(): Promise;\ncount(): Promise;\ndelete(key): Promise;\ndistinct(): Collection;\neach(callback: (obj) => any): Promise;\neachKey(callback: (key) => any): Promise;\neachPrimaryKey(callback: (key) => any): Promise;\neachUniqueKey(callback: (key) => any): Promise;\nequals(key): Collection;\nequalsIgnoreCase(key): Collection;\nfilter(fn: (obj) => boolean): Collection;\nfirst(): Promise;\nget(key): Promise;\ninAnyRange(ranges): Collection;\nkeys(): Promise;\nlast(): Promise;\nlimit(n: number): Collection;\nmodify(changeCallback: (obj: T, ctx:{value: T}) => void): Promise;\nmodify(changes: { [keyPath: string]: any } ): Promise;\nnoneOf(keys: Array): Collection;\nnotEqual(key): Collection;\noffset(n: number): Collection;\nor(indexOrPrimayKey: string): WhereClause;\norderBy(index: string): Collection;\nprimaryKeys(): Promise;\nput(item: T, key?: Key): Promise;\nreverse(): Collection;\nsortBy(keyPath: string): Promise;\nstartsWith(key: string): Collection;\nstartsWithAnyOf(prefixes: string[]): Collection;\nstartsWithAnyOfIgnoreCase(prefixes: string[]): Collection;\nstartsWithIgnoreCase(key: string): Collection;\ntoArray(): Promise;\ntoCollection(): Collection;\nuniqueKeys(): Promise;\nuntil(filter: (value) => boolean, includeStopEntry?: boolean): Collection;\nupdate(key: Key, changes: { [keyPath: string]: any }): Promise;\n```\nThis is a mix of methods from [WhereClause](http://dexie.org/docs/WhereClause/WhereClause), [Table](http://dexie.org/docs/Table/Table) and [Collection](http://dexie.org/docs/Collection/Collection). Dive into the [API reference](http://dexie.org/docs/API-Reference) to see the details.\n\n#### Hello World (ES2016 / ES7)\n```js\nimport Dexie from \'dexie\';\n\n//\n// Declare Database\n//\nconst db = new Dexie("FriendDatabase");\ndb.version(1).stores({ friends: "++id,name,age" });\n\ndb.transaction(\'rw\', db.friends, async() => {\n\n    // Make sure we have something in DB:\n    if ((await db.friends.where({name: \'Josephine\'}).count()) === 0) {\n        const id = await db.friends.add({name: "Josephine", age: 21});\n        alert (`Addded friend with id ${id}`);\n    }\n\n    // Query:\n    const youngFriends = await db.friends.where("age").below(25).toArray();\n\n    // Show result:\n    alert ("My young friends: " + JSON.stringify(youngFriends));\n\n}).catch(e => {\n    alert(e.stack || e);\n});\n\n```\n\n#### Hello World (Typescript)\n\n```js\nimport Dexie from \'dexie\';\n\ninterface Friend {\n    id?: number;\n    name?: string;\n    age?: number;\n}\n\n//\n// Declare Database\n//\nclass FriendDatabase extends Dexie {\n    public friends: Dexie.Table<Friend, number>; // id is number in this case\n\n    public constructor() {\n        super("FriendDatabase");\n        this.version(1).stores({\n            friends: "++id,name,age"\n        });\n        this.friends = this.table("friends");\n    }\n}\n\nconst db = new FriendDatabase();\n\ndb.transaction(\'rw\', db.friends, async() => {\n\n    // Make sure we have something in DB:\n    if ((await db.friends.where({name: \'Josephine\'}).count()) === 0) {\n        const id = await db.friends.add({name: "Josephine", age: 21});\n        alert (`Addded friend with id ${id}`);\n    }\n\n    // Query:\n    const youngFriends = await db.friends.where("age").below(25).toArray();\n\n    // Show result:\n    alert ("My young friends: " + JSON.stringify(youngFriends));\n\n}).catch(e => {\n    alert(e.stack || e);\n});\n```\n\nSamples\n-------\nhttp://dexie.org/docs/Samples\n\nhttps://github.com/dfahlander/Dexie.js/tree/master/samples\n\nKnowledge Base\n-----\n[http://dexie.org/docs/Questions-and-Answers](http://dexie.org/docs/Questions-and-Answers)\n\nWebsite\n-------\n[http://dexie.org](http://dexie.org)\n\nInstall over npm\n----------------\n```\nnpm install dexie\n```\n\n\nDownload\n--------\nFor those who don\'t like package managers, here\'s the download links:\n\nhttps://unpkg.com/dexie@latest/dist/dexie.js\n\nhttps://unpkg.com/dexie@latest/dist/dexie.js.map\n\nhttps://unpkg.com/dexie@latest/dist/dexie.d.ts\n\n\nContributing\n============\nHere is a little cheat-sheet for how to symlink your app\'s `node_modules/dexie` to a place where you can edit the source, version control your changes and create pull requests back to Dexie. Assuming you\'ve already ran `npm install dexie --save` for the app your are developing.\n\n1. Fork Dexie.js from the web gui on github\n2. Clone your fork locally by launching a shell/command window and cd to a neutral place (like `~repos/`, `c:\\repos` or whatever)\n3. Run the following commands:\n\n    ```\n    git clone https://github.com/YOUR-USERNAME/Dexie.js.git dexie\n    cd dexie\n    npm install\n    npm run build\n    npm link\n    ```\n3. cd to your app directory and write:\n    ```\n    npm link dexie\n    ```\n\nYour app\'s `node_modules/dexie/` is now sym-linked to the Dexie.js clone on your hard drive so any change you do there will propagate to your app. Build dexie.js using `npm run build` or `npm run watch`. The latter will react on any source file change and rebuild the dist files.\n\nThat\'s it. Now you\'re up and running to test and commit changes to files under dexie/src/* or dexie/test/* and the changes will instantly affect the app you are developing.\n\nPull requests are more than welcome. Some advices are:\n\n* Run npm test before making a pull request.\n* If you find an issue, a unit test that reproduces it is lovely ;). If you don\'t know where to put it, put it in `test/tests-misc.js`. We use qunit. Just look at existing tests in `tests-misc.js` to see how they should be written. Tests are transpiled in the build script so you can use ES6 if you like.\n\nBuild\n-----\n```\nnpm install\nnpm run build\n```\n\nTest\n----\n```\nnpm test\n```\n\nWatch\n-----\n```\nnpm run watch\n```\n\n\n[npm-image]: https://img.shields.io/npm/v/dexie.svg?style=flat\n[npm-url]: https://npmjs.org/package/dexie\n'