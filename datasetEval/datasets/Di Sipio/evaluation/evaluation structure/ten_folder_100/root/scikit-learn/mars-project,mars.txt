b'Mars\n====\n\n|PyPI version| |Docs| |Build| |Coverage| |Quality| |License|\n\nMars is a tensor-based unified framework for large-scale data computation. `Documentation`_.\n\nInstallation\n------------\n\nMars is easy to install by\n\n.. code-block:: bash\n\n    pip install pymars\n\nWhen you need to install dependencies needed by the distributed version, you can use the command below.\n\n.. code-block:: bash\n\n    pip install \'pymars[distributed]\'\n\nFor now, distributed version is only available on Linux and Mac OS.\n\n\nDeveloper Install\n`````````````````\n\nWhen you want to contribute code to Mars, you can follow the instructions below to install Mars\nfor development:\n\n.. code-block:: bash\n\n    git clone https://github.com/mars-project/mars.git\n    cd mars\n    pip install -e ".[dev]"\n\nMore details about installing Mars can be found at\n`getting started <https://mars-project.readthedocs.io/en/latest/install.html>`_ section in\nMars document.\n\n\nMars tensor\n-----------\n\nMars tensor provides a familiar interface like Numpy.\n\n+------------------------------------------------+----------------------------------------------------+\n| **Numpy**                                      | **Mars tensor**                                    |\n+------------------------------------------------+----------------------------------------------------+\n|.. code-block:: python                          |.. code-block:: python                              |\n|                                                |                                                    |\n|    import numpy as np                          |    import mars.tensor as mt                        |\n|    a = np.random.rand(1000, 2000)              |    a = mt.random.rand(1000, 2000)                  |\n|    (a + 1).sum(axis=1)                         |    (a + 1).sum(axis=1).execute()                   |\n|                                                |                                                    |\n+------------------------------------------------+----------------------------------------------------+\n\n\nThe following is a brief overview of supported subset of Numpy interface.\n\n- Arithmetic and mathematics: ``+``, ``-``, ``*``, ``/``, ``exp``, ``log``, etc.\n- Reduction along axes (``sum``, ``max``, ``argmax``, etc).\n- Most of the `array creation routines <https://docs.scipy.org/doc/numpy/reference/routines.array-creation.html>`_\n  (``empty``, ``ones_like``, ``diag``, etc). What\'s more, Mars does not only support create array/tensor on GPU,\n  but also support create sparse tensor.\n- Most of the `array manipulation routines <https://docs.scipy.org/doc/numpy/reference/routines.array-manipulation.html>`_\n  (``reshape``, ``rollaxis``, ``concatenate``, etc.)\n- `Basic indexing <https://docs.scipy.org/doc/numpy/reference/arrays.indexing.html>`_\n  (indexing by ints, slices, newaxes, and Ellipsis)\n- `Advanced indexing <https://docs.scipy.org/doc/numpy/reference/arrays.indexing.html#advanced-indexing>`_\n  (except combing boolean array indexing and integer array indexing)\n- `universal functions <https://docs.scipy.org/doc/numpy/reference/ufuncs.html>`_\n  for elementwise operations.\n- `Linear algebra functions <https://docs.scipy.org/doc/numpy/reference/routines.linalg.html>`_,\n  including product (``dot``, ``matmul``, etc.) and decomposition (``cholesky``, ``svd``, etc.).\n\nHowever, Mars has not implemented entire Numpy interface, either the time limitation or difficulty is the main handicap.\nAny contribution from community is sincerely welcomed. The main feature not implemented are listed below:\n\n- Tensor with unknown shape does not support all operations.\n- Only small subset of ``np.linalg`` are implemented.\n- Operations like ``sort`` which is hard to execute in parallel are not implemented.\n- Mars tensor doesn\'t implement interface like ``tolist`` and ``nditer`` etc,\n  because the iteration or loops over a large tensor is very inefficient.\n\nEager Mode\n```````````\n\nMars supports eager mode which makes it friendly for developing and easy to debug.\n\nUsers can enable the eager mode by options, set options at the beginning of the program or console session.\n\n.. code-block:: python\n\n    >>> from mars.config import options\n    >>> options.eager_mode = True\n\nOr use a context.\n\n.. code-block:: python\n\n    >>> from mars.config import option_context\n    >>> with option_context() as options:\n    >>>     options.eager_mode = True\n    >>>     # the eager mode is on only for the with statement\n    >>>     ...\n\nIf eager mode is on, tensor will be executed immediately by default session once it is created.\n\n.. code-block:: python\n\n    >>> import mars.tensor as mt\n    >>> from mars.config import options\n    >>> options.eager_mode = True\n    >>> t = mt.arange(6).reshape((2, 3))\n    >>> print(t)\n    Tensor(op=TensorRand, shape=(2, 3), data=\n    [[0 1 2]\n    [3 4 5]])\n\n\nEasy to scale in and scale out\n------------------------------\n\nMars can scale in to a single machine, and scale out to a cluster with thousands of machines.\nBoth the local and distributed version share the same piece of code,\nit\'s fairly simple to migrate from a single machine to a cluster due to the increase of data.\n\nRunning on a single machine including thread-based scheduling,\nlocal cluster scheduling which bundles the whole distributed components.\nMars is also easy to scale out to a cluster by starting different components of\nmars distributed runtime on different machines in the cluster.\n\nThreaded\n````````\n\n``execute`` method will by default run on the thread-based scheduler on a single machine.\n\n.. code-block:: python\n\n    >>> import mars.tensor as mt\n    >>> a = mt.ones((10, 10))\n    >>> a.execute()\n\nUsers can create a session explicitly.\n\n.. code-block:: python\n\n    >>> from mars.session import new_session\n    >>> session = new_session()\n    >>> session.run(a + 1)\n    >>> (a * 2).execute(session=session)\n    >>> # session will be released when out of with statement\n    >>> with new_session() as session2:\n    >>>     session2.run(a / 3)\n\n\nLocal cluster\n`````````````\n\nUsers can start the local cluster bundled with the distributed runtime on a single machine.\nLocal cluster mode requires mars distributed version.\n\n.. code-block:: python\n\n    >>> from mars.deploy.local import new_cluster\n\n    >>> # cluster will create a session and set it as default\n    >>> cluster = new_cluster()\n\n    >>> # run on the local cluster\n    >>> (a + 1).execute()\n\n    >>> # create a session explicitly by specifying the cluster\'s endpoint\n    >>> session = new_session(cluster.endpoint)\n    >>> session.run(a * 3)\n\n\nDistributed\n```````````\n\nAfter installing the distributed version on every node in the cluster,\nA node can be selected as scheduler and another as web service,\nleaving other nodes as workers.  The scheduler can be started with the following command:\n\n.. code-block:: bash\n\n    mars-scheduler -a <scheduler_ip> -p <scheduler_port>\n\nWeb service can be started with the following command:\n\n.. code-block:: bash\n\n    mars-web -a <web_ip> -s <scheduler_endpoint> --ui-port <ui_port_exposed_to_user>\n\nWorkers can be started with the following command:\n\n.. code-block:: bash\n\n    mars-worker -a <worker_ip> -p <worker_port> -s <scheduler_endpoint>\n\nAfter all mars processes are started, users can run\n\n.. code-block:: python\n\n    >>> sess = new_session(\'http://<web_ip>:<ui_port>\')\n    >>> a = mt.ones((2000, 2000), chunk_size=200)\n    >>> b = mt.inner(a, a)\n    >>> sess.run(b)\n\n\nGetting involved\n----------------\n\n- Read `contribution guide <https://mars-project.readthedocs.io/en/latest/contributing.html>`_.\n- Join the mailing list: send an email to `mars-dev@googlegroups.com`_.\n- Please report bugs by submitting a `GitHub issue`_.\n- Submit contributions using `pull requests`_.\n\nThank you in advance for your contributions!\n\n\n.. |Build| image:: https://github.com/mars-project/mars/workflows/Mars%20CI/badge.svg\n   :target: https://github.com/mars-project/mars/actions\n.. |Coverage| image:: https://img.shields.io/coveralls/github/mars-project/mars.svg\n   :target: https://coveralls.io/github/mars-project/mars\n.. |Quality| image:: https://img.shields.io/codacy/grade/4e15343492d14335847d67630bb3c319.svg\n   :target: https://app.codacy.com/project/mars-project/mars/dashboard\n.. |PyPI version| image:: https://img.shields.io/pypi/v/pymars.svg\n   :target: https://pypi.python.org/pypi/pymars\n.. |Docs| image:: https://img.shields.io/badge/docs-latest-brightgreen.svg\n   :target: `Documentation`_\n.. |License| image:: https://img.shields.io/pypi/l/pymars.svg\n   :target: https://github.com/mars-project/mars/blob/master/LICENSE\n.. _`mars-dev@googlegroups.com`: https://groups.google.com/forum/#!forum/mars-dev\n.. _`GitHub issue`: https://github.com/mars-project/mars/issues\n.. _`pull requests`: https://github.com/mars-project/mars/pulls\n.. _`Documentation`: https://docs.mars-project.io\n'