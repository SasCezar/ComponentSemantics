b'# Machine-Learning-with-Python ![GitHub stars](https://img.shields.io/github/stars/devAmoghS/Machine-Learning-with-Python?style=for-the-badge)  ![GitHub forks](https://img.shields.io/github/forks/devAmoghS/Machine-Learning-with-Python?label=Forks&style=for-the-badge)\n![alt text](https://media.istockphoto.com/vectors/machine-learning-3-step-infographic-artificial-intelligence-machine-vector-id962219860?k=6&m=962219860&s=612x612&w=0&h=yricYyUqZbILMHp3IvtenS3xbRDhu1w1u5kk2az5tbo=)\n\n## Small scale machine learning projects to understand the core concepts (order: oldest to newest)\n* Topic Modelling using **Latent Dirichlet Allocation** with newsgroups20 dataset, implemented with Python and Scikit-Learn\n* Implemented a simple **neural network** built with Keras on MNIST dataset\n* Stock Price Forecasting on Google using **Linear Regression**\n* Implemented a simple a **social network** to learn basics of Python\n* Implemented **Naives Bayes Classifier** to filter spam messages on SpamAssasin Public Corpus\n* **Churn Prediction Model** for banking dataset using Keras and Scikit-Learn\n* Implemented **Random Forest** from scratch and built a classifier on Sonar dataset from UCI repository\n* Simple Linear Regression in Python on sample dataset\n* **Multiple Regression** in Python on sample dataset\n* **PCA and scaling** sample stock data in Python [working_with_data]\n* **Decision Trees** in Python on sample dataset\n* **Logistic Regression** in Python on sample dataset\n* Built a neural network in Python to defeat a captcha system\n* Helper methods include commom operations used in **Statistics, Probability, Linear Algebra and Data Analysis**\n* **K-means clustering** with example data; **clustering colors** with k-means; **Bottom-up Hierarchical Clustering**\n* Generating Word Clouds\n* Sentence generation using n-grams\n* Sentence generation using **Grammars and Automata Theory; Gibbs Sampling** \n* Topic Modelling using Latent Dirichlet Analysis (LDA)\n* Wrapper for using Scikit-Learn\'s **GridSearchCV** for a **Keras Neural Network**\n* **Recommender system** using **cosine similarity**, recommending new interests to users as well as matching users as per common interests\n* Implementing different methods for **network analysis** such as **PageRank, Betweeness Centrality, Closeness Centrality, EigenVector Centrality**\n* Implementing methods used for **Hypothesis Inference** such as **P-hacking, A/B Testing, Bayesian Inference**\n* Implemented **K-nearest neigbors** for next presedential election and prediciting voting behavior based on nearest neigbors.\n\n## Installation notes\nMLwP is built using Python 3.5.  The easiest way to set up a compatible\nenvironment is to use [Conda](https://conda.io/).  This will set up a virtual\nenvironment with the exact version of Python used for development along with all the\ndependencies needed to run MLwP.\n\n1.  [Download and install Conda](https://conda.io/docs/download.html).\n2.  Create a Conda environment with Python 3. \n\n(**Note**: enter ```cd ~``` to go on **$HOME** , then perform these commands)\n\n    ```\n    conda create --name *your env name* python=3.5\n    ```\n   \n   You will get the following, mlwp-test is the env name used in this example\n   \n   ```\n   Solving environment: done\n   \n## Package Plan ##\n\n  environment location: /home/user/anaconda3/envs/mlwp-test\n\n  added / updated specs: \n    - python=3.5\n\n\nThe following NEW packages will be INSTALLED:\n\n    ca-certificates: 2018.12.5-0            \n    certifi:         2018.8.24-py35_1       \n    libedit:         3.1.20181209-hc058e9b_0\n    libffi:          3.2.1-hd88cf55_4       \n    libgcc-ng:       8.2.0-hdf63c60_1       \n    libstdcxx-ng:    8.2.0-hdf63c60_1       \n    ncurses:         6.1-he6710b0_1         \n    openssl:         1.0.2p-h14c3975_0      \n    pip:             10.0.1-py35_0          \n    python:          3.5.6-hc3d631a_0       \n    readline:        7.0-h7b6447c_5         \n    setuptools:      40.2.0-py35_0          \n    sqlite:          3.26.0-h7b6447c_0      \n    tk:              8.6.8-hbc83047_0       \n    wheel:           0.31.1-py35_0          \n    xz:              5.2.4-h14c3975_4       \n    zlib:            1.2.11-h7b6447c_3      \n\nProceed ([y]/n)?  *Press y*\n\nPreparing transaction: done\nVerifying transaction: done\nExecuting transaction: done\n#\n# To activate this environment, use:\n# > source activate mlwp-test\n#\n# To deactivate an active environment, use:\n# > source deactivate\n#\n\n   ```\n   The environment is successfully created.\n\n3.  Now activate the Conda environment.\n\n    ```\n    source activate *your env name*\n    ```\n    You will get the following\n    \n    ```\n    (mlwp-test) amogh@hp15X34:~$ \n    ```\n    Enter `conda list` to get the list of available packages\n    \n    ```\n        (mlwp-test) amogh@hp15X34:~$ conda list\n    # packages in environment at /home/amogh/anaconda3/envs/mlwp-test:\n    #\n    # Name                    Version                   Build  Channel\n    ca-certificates           2018.12.5                     0  \n    certifi                   2018.8.24                py35_1  \n    libedit                   3.1.20181209         hc058e9b_0  \n    libffi                    3.2.1                hd88cf55_4  \n    libgcc-ng                 8.2.0                hdf63c60_1  \n    libstdcxx-ng              8.2.0                hdf63c60_1  \n    ncurses                   6.1                  he6710b0_1  \n    openssl                   1.0.2p               h14c3975_0  \n    pip                       10.0.1                   py35_0  \n    python                    3.5.6                hc3d631a_0  \n    readline                  7.0                  h7b6447c_5  \n    setuptools                40.2.0                   py35_0  \n    sqlite                    3.26.0               h7b6447c_0  \n    tk                        8.6.8                hbc83047_0  \n    wheel                     0.31.1                   py35_0  \n    xz                        5.2.4                h14c3975_4  \n    zlib                      1.2.11               h7b6447c_3 \n    ```\n\n4.  Install the required dependencies.\n\n    ```\n    (mlwp-test) amogh@hp15X34:~$ conda install --yes --file *path to requirements.txt*\n    ```\n    \n5. In case you are not able to install the packages or getting `PackagesNotFoundError`\nUse the following command ` conda install -c conda-forge *list of packages separated by space*`. For more info, refer issue [#3](https://github.com/devAmoghS/Machine-Learning-with-Python/issues/3) **Unable to install requirements**\n\n\n## How good is the code ?\n* It is well tested\n* It passes style checks (PEP8 compliant)\n* It can compile in its current state (and there are relatively no issues)\n\n## How much support is available?\n* FAQs (coming soon)\n* Documentation (coming soon)\n\n## Issues\nFeel free to submit issues and enhancement requests.\n\n## Contributing\nPlease refer to each project\'s style guidelines and guidelines for submitting patches and additions. In general, we follow the "fork-and-pull" Git workflow.\n\n 1. **Fork** the repo on GitHub\n 2. **Clone** the project to your own machine\n 3. **Commit** changes to your own branch\n 4. **Push** your work back up to your fork\n 5. Submit a **Pull request** so that we can review your changes\n\nNOTE: Be sure to merge the latest from "upstream" before making a pull request!\n'