b'# scikit-multilearn\n\n[![PyPI version](https://badge.fury.io/py/scikit-multilearn.svg)](https://badge.fury.io/py/scikit-multilearn)\n[![License](https://img.shields.io/badge/License-BSD%202--Clause-orange.svg)](https://opensource.org/licenses/BSD-2-Clause)\n[![Build Status Linux and OSX](https://travis-ci.org/scikit-multilearn/scikit-multilearn.svg?branch=master)](https://travis-ci.org/scikit-multilearn/scikit-multilearn)\n[![Build Status Windows](https://ci.appveyor.com/api/projects/status/vd4k18u1lp5btaql/branch/master?svg=true)](https://ci.appveyor.com/project/niedakh/scikit-multilearn/branch/master)\n\n__scikit-multilearn__ is a Python module capable of performing multi-label\nlearning tasks. It is built on-top of various scientific Python packages\n([numpy](http://www.numpy.org/), [scipy](https://www.scipy.org/)) and\nfollows a similar API to that of [scikit-learn](http://scikit-learn.org/).\n\n- __Website:__ [scikit.ml](http://scikit.ml)\n- __Documentation:__ [scikit-multilearn Documentation](http://scikit.ml/api/skmultilearn.html)\n\n\n## Features\n\n- __Native Python implementation.__ A native Python implementation for a variety of multi-label classification algorithms. To see the list of all supported classifiers, check this [link](http://scikit.ml/#classifiers).\n\n- __Interface to Meka.__ A Meka wrapper class is implemented for reference purposes and integration. This provides access to all methods available in MEKA, MULAN, and WEKA &mdash; the reference standard in the field.\n\n- __Builds upon giants!__ Team-up with the power of numpy and scikit. You can use scikit-learn\'s base classifiers as scikit-multilearn\'s classifiers. In addition, the two packages follow a similar API.\n\n## Dependencies\n\nIn most cases you will want to follow the requirements defined in the requirements/*.txt files in the package. \n\n### Base dependencies\n```\nscipy\nnumpy\nfuture\nscikit-learn\nliac-arff # for loading ARFF files\nrequests # for dataset module\nnetworkx # for networkX base community detection clusterers\npython-louvain # for networkX base community detection clusterers\nkeras\n```\n\n### GPL-incurring dependencies for two clusterers\n```\npython-igraph # for igraph library based clusterers\npython-graphtool # for graphtool base clusterers\n```\n\nNote: Installing graphtool is complicated, please see: [graphtool install instructions](https://git.skewed.de/count0/graph-tool/wikis/installation-instructions)\n\n## Installation\n\nTo install scikit-multilearn, simply type the following command:\n\n```bash\n$ pip install scikit-multilearn\n```\n\nThis will install the latest release from the Python package index. If you\nwish to install the bleeding-edge version, then clone this repository and\nrun `setup.py`:\n\n```bash\n$ git clone https://github.com/scikit-multilearn/scikit-multilearn.git\n$ cd scikit-multilearn\n$ python setup.py\n```\n\n## Basic Usage\n\nBefore proceeding to classification,  this library assumes that you have\na dataset with the following matrices:\n\n- `x_train`, `x_test`: training and test feature matrices of size `(n_samples, n_features)`\n- `y_train`, `y_test`: training and test label matrices of size `(n_samples, n_labels)`\n\nSuppose we wanted to use a problem-transformation method called Binary\nRelevance, which treats each label as a separate single-label classification\nproblem, to a Support-vector machine (SVM) classifier, we simply perform\nthe following tasks:\n\n```python\n# Import BinaryRelevance from skmultilearn\nfrom skmultilearn.problem_transform import BinaryRelevance\n\n# Import SVC classifier from sklearn\nfrom sklearn.svm import SVC\n\n# Setup the classifier\nclassifier = BinaryRelevance(classifier=SVC(), require_dense=[False,True])\n\n# Train\nclassifier.fit(X_train, y_train)\n\n# Predict\ny_pred = classifier.predict(X_test)\n```\n\nMore examples and use-cases can be seen in the \n[documentation](http://scikit.ml/api/classify.html). For using the MEKA\nwrapper, check this [link](http://scikit.ml/api/meka.html#mekawrapper).\n\n## Contributing\n\nThis project is open for contributions. Here are some of the ways for\nyou to contribute:\n\n- Bug reports/fix\n- Features requests\n- Use-case demonstrations\n- Documentation updates\n\nIn case you want to implement your own multi-label classifier, please \nread our [Developer\'s Guide](http://scikit.ml/api/base.html) to help\nyou integrate your implementation in our API.\n\nTo make a contribution, just fork this repository, push the changes\nin your fork, open up an issue, and make a Pull Request!\n\nWe\'re also available in Slack! Just go to our [slack group](https://scikit-ml.slack.com/).\n\n## Cite\n\nIf you used scikit-multilearn in your research or project, please\ncite [our work](https://arxiv.org/abs/1702.01460):\n\n```bibtex\n@ARTICLE{2017arXiv170201460S,\n   author = {{Szyma{\\\'n}ski}, P. and {Kajdanowicz}, T.},\n   title = "{A scikit-based Python environment for performing multi-label classification}",\n   journal = {ArXiv e-prints},\n   archivePrefix = "arXiv",\n   eprint = {1702.01460},\n   year = 2017,\n   month = feb\n}\n```\n'