b'# MachineLearningStocks in python: a starter project and guide\n\n[![forthebadge made-with-python](https://ForTheBadge.com/images/badges/made-with-python.svg)](https://www.python.org/)\n\n[![GitHub license](https://img.shields.io/badge/License-MIT-brightgreen.svg?style=flat-square)](https://github.com/surelyourejoking/MachineLearningStocks/blob/master/LICENSE.txt) [![Maintenance](https://img.shields.io/badge/Maintained%3F-yes-brightgreen.svg?style=flat-square)](https://github.com/surelyourejoking/MachineLearningStocks/graphs/commit-activity) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square)](http://makeapullrequest.com)\n\nMachineLearningStocks is designed to be an **intuitive** and **highly extensible** template project applying machine learning to making stock predictions. My hope is that this project will help you understand the overall workflow of using machine learning to predict stock movements and also appreciate some of its subtleties. And of course, after following this guide and playing around with the project, you should definitely **make your own improvements** \xe2\x80\x93 if you\'re struggling to think of what to do, at the end of this readme I\'ve included a long list of possiblilities: take your pick.\n\nConcretely, we will be cleaning and preparing a dataset of historical stock prices and fundamentals using `pandas`, after which we will apply a `scikit-learn` classifier to discover the relationship between stock fundamentals (e.g PE ratio, debt/equity, float, etc) and the subsequent annual price change (compared with the an index). We then conduct a simple backtest, before generating predictions on current data.\n\nWhile I would not live trade based off of the predictions from this exact code, I do believe that you can use this project as starting point for a profitable trading system \xe2\x80\x93 I have actually used code based on this project to live trade, with pretty decent results (around 20% returns on backtest and 10-15% on live trading).\n\nThis project has quite a lot of personal significance for me. It was my first proper python project, one of my first real encounters with ML, and the first time I used git. At the start, my code was rife with bad practice and inefficiency: I have since tried to amend most of this, but please be warned that some minor issues may remain (feel free to raise an issue, or fork and submit a PR). Both the project and myself as a programmer have evolved a lot since the first iteration, but there is always room to improve.\n\n*As a disclaimer, this is a purely educational project. Be aware that backtested performance may often be deceptive \xe2\x80\x93 trade at your own risk!*\n\n*MachineLearningStocks predicts which stocks will outperform. But it does not suggest how best to combine them into a portfolio. I have just released [PyPortfolioOpt](https://github.com/robertmartin8/PyPortfolioOpt), a portfolio optimisation library which uses\nclassical efficient frontier techniques (with modern improvements) in order to generate risk-efficient portfolios. Generating optimal allocations from the predicted outperformers might be a great way to improve risk-adjusted returns.*\n\n*This guide has been cross-posted at my academic blog, [reasonabledeviations.com](https://reasonabledeviations.com/)*\n\n## Contents\n\n- [Contents](#contents)\n- [Overview](#overview)\n  - [EDIT as of 24/5/18](#edit-as-of-24518)\n  - [EDIT as of October 2019](#edit-as-of-october-2019)\n- [Quickstart](#quickstart)\n- [Preliminaries](#preliminaries)\n- [Historical data](#historical-data)\n  - [Historical stock fundamentals](#historical-stock-fundamentals)\n  - [Historical price data](#historical-price-data)\n- [Creating the training dataset](#creating-the-training-dataset)\n  - [Preprocessing historical price data](#preprocessing-historical-price-data)\n  - [Features](#features)\n    - [Valuation measures](#valuation-measures)\n    - [Financials](#financials)\n    - [Trading information](#trading-information)\n  - [Parsing](#parsing)\n- [Backtesting](#backtesting)\n- [Current fundamental data](#current-fundamental-data)\n- [Stock prediction](#stock-prediction)\n- [Unit testing](#unit-testing)\n- [Where to go from here](#where-to-go-from-here)\n  - [Data acquisition](#data-acquisition)\n  - [Data preprocessing](#data-preprocessing)\n  - [Machine learning](#machine-learning)\n- [Contributing](#contributing)\n\n## Overview\n\nThe overall workflow to use machine learning to make stocks prediction is as follows:\n\n1. Acquire historical fundamental data \xe2\x80\x93 these are the *features* or *predictors*\n2. Acquire historical stock price data \xe2\x80\x93 this is will make up the dependent variable, or label (what we are trying to predict).\n3. Preprocess data\n4. Use a machine learning model to learn from the data\n5. Backtest the performance of the machine learning model\n6. Acquire current fundamental data\n7. Generate predictions from current fundamental data\n\nThis is a very generalised overview, but in principle this is all you need to build a fundamentals-based ML stock predictor.\n\n### EDIT as of 24/5/18\n\nThis project uses pandas-datareader to download historical price data from Yahoo Finance. However, in the past few weeks this has become extremely inconsistent \xe2\x80\x93 it seems like Yahoo have added some measures to prevent the bulk download of their data. I will try to add a fix, but for now, take note that `download_historical_prices.py` may be deprecated.\n\nAs a temporary solution, I\'ve uploaded `stock_prices.csv` and `sp500_index.csv`, so the rest of the project can still function.\n\n### EDIT as of October 2019\n\nI expect that after so much time there will be many data issues. To that end, I have decided to upload the other CSV files: `keystats.csv` (the output of `parsing_keystats.py`) and `forward_sample.csv` (the output of `current_data.py`).\n\n## Quickstart\n\nIf you want to throw away the instruction manual and play immediately, clone this project, then download and unzip the [data file](https://pythonprogramming.net/data-acquisition-machine-learning/) into the same directory. Then, open an instance of terminal and cd to the project\'s file path, e.g\n\n```bash\ncd Users/User/Desktop/MachineLearningStocks\n```\n\nThen, run the following in terminal:\n\n```bash\npip install -r requirements.txt\npython download_historical_prices.py\npython parsing_keystats.py\npython backtesting.py\npython current_data.py\npytest -v\npython stock_prediction.py\n```\n\nOtherwise, follow the step-by-step guide below.\n\n## Preliminaries\n\nThis project uses python 3.6, and the common data science libraries `pandas` and `scikit-learn`. If you are on python 3.x less than 3.6, you will find some syntax errors wherever f-strings have been used for string formatting. These are fortunately very easy to fix (just rebuild the string using your preferred method), but I do encourage you to upgrade to 3.6 to enjoy the elegance of f-strings. A full list of requirements is included in the `requirements.txt` file. To install all of the requirements at once, run the following code in terminal:\n\n```bash\npip install -r requirements.txt\n```\n\nTo get started, clone this project and unzip it. This folder will become our working directory, so make sure you `cd` your terminal instance into this directory.\n\n## Historical data\n\nData acquisition and preprocessing is probably the hardest part of most machine learning projects. But it is a necessary evil, so it\'s best to not fret and just carry on.\n\nFor this project, we need three datasets:\n\n1. Historical stock fundamentals\n2. Historical stock prices\n3. Historical S&P500 prices\n\nWe need the S&P500 index prices as a benchmark: a 5% stock growth does not mean much if the S&P500 grew 10% in that time period, so all stock returns must be compared to those of the index.\n\n### Historical stock fundamentals\n\nHistorical fundamental data is actually very difficult to find (for free, at least). Although sites like [Quandl](https://www.quandl.com/) do have datasets available, you often have to pay a pretty steep fee.\n\nIt turns out that there is a way to parse this data, for free, from [Yahoo Finance](https://finance.yahoo.com/). I will not go into details, because [Sentdex has done it for us](https://pythonprogramming.net/data-acquisition-machine-learning/). On his page you will be able to find a file called `intraQuarter.zip`, which you should download, unzip, and place in your working directory. Relevant to this project is the subfolder called `_KeyStats`, which contains html files that hold stock fundamentals for all stocks in the S&P500 between 2003 and 2013, sorted by stock. However, at this stage, the data is unusable \xe2\x80\x93 we will have to parse it into a nice csv file before we can do any ML.\n\n### Historical price data\n\nIn the first iteration of the project, I used `pandas-datareader`, an extremely convenient library which can load stock data straight into `pandas`. However, after Yahoo Finance changed their UI, `datareader` no longer worked, so I switched to [Quandl](https://www.quandl.com/), which has free stock price data for a few tickers, and a python API. However, as `pandas-datareader` has been [fixed](https://github.com/ranaroussi/fix-yahoo-finance), we will use that instead.\n\nLikewise, we can easily use `pandas-datareader` to access data for the SPY ticker. Failing that, one could manually download it from [yahoo finance](https://finance.yahoo.com/quote/%5EGSPC/history?p=%5EGSPC), place it into the project directory and rename it `sp500_index.csv`.\n\nThe code for downloading historical price data can be run by entering the following into terminal:\n\n```bash\npython download_historical_prices.py\n```\n\n## Creating the training dataset\n\nOur ultimate goal for the training data is to have a \'snapshot\' of a particular stock\'s fundamentals at a particular time, and the corresponding subsequent annual performance of the stock.\n\nFor example, if our \'snapshot\' consists of all of the fundamental data for AAPL on the date 28/1/2005, then we also need to know the percentage price change of AAPL between 28/1/05 and 28/1/06. Thus our algorithm can learn how the fundamentals impact the annual change in the stock price.\n\nIn fact, this is a slight oversimplification. In fact, what the algorithm will eventually learn is how fundamentals impact the *outperformance of a stock relative to the S&P500 index*. This is why we also need index data.\n\n### Preprocessing historical price data\n\nWhen `pandas-datareader` downloads stock price data, it does not include rows for weekends and public holidays (when the market is closed).\n\nHowever, referring to the example of AAPL above, if our snapshot includes fundamental data for 28/1/05 and we want to see the change in price a year later, we will get the nasty surprise that 28/1/2006 is a Saturday. Does this mean that we have to discard this snapshot?\n\nBy no means \xe2\x80\x93 data is too valuable to callously toss away. As a workaround, I instead decided to \'fill forward\' the missing data, i.e we will assume that the stock price on Saturday 28/1/2006 is equal to the stock price on Friday 27/1/2006.\n\n### Features\n\nBelow is a list of some of the interesting variables that are available on Yahoo Finance.\n\n#### Valuation measures\n\n- \'Market Cap\'\n- Enterprise Value\n- Trailing P/E\n- Forward P/E\n- PEG Ratio\n- Price/Sales\n- Price/Book\n- Enterprise Value/Revenue\n- Enterprise Value/EBITDA\n\n#### Financials\n\n- Profit Margin\n- Operating Margin\n- Return on Assets\n- Return on Equity\n- Revenue\n- Revenue Per Share\n- Quarterly Revenue Growth\n- Gross Profit\n- EBITDA\n- Net Income Avi to Common\n- Diluted EPS\n- Quarterly Earnings Growth\n- Total Cash\n- Total Cash Per Share\n- Total Debt\n- Total Debt/Equity\n- Current Ratio\n- Book Value Per Share\n- Operating Cash Flow\n- Levered Free Cash Flow\n\n#### Trading information\n\n- Beta\n- 50-Day Moving Average\n- 200-Day Moving Average\n- Avg Vol (3 month)\n- Shares Outstanding\n- Float\n- % Held by Insiders\n- % Held by Institutions\n- Shares Short\n- Short Ratio\n- Short % of Float\n- Shares Short (prior month)\n\n### Parsing\n\nHowever, all of this data is locked up in HTML files. Thus, we need to build a parser. In this project, I did the parsing with regex, but please note that generally it is [really not recommended](https://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags) to use regex to parse HTML. However, I think regex probably wins out for ease of understanding (this project being educational in nature), and from experience regex works fine in this case.\n\nThis is the exact regex used:\n\n```python\nr\'>\' + re.escape(variable) + r\'.*?(\\-?\\d+\\.*\\d*K?M?B?|N/A[\\\\n|\\s]*|>0|NaN)%?(</td>|</span>)\'\n```\n\nWhile it looks pretty arcane, all it is doing is searching for the first occurence of the feature (e.g "Market Cap"), then it looks forward until it finds a number immediately followed by a `</td>` or `</span>` (signifying the end of a table entry). The complexity of the expression above accounts for some subtleties in the parsing:\n\n- the numbers could be preceeded by a minus sign\n- Yahoo Finance sometimes uses K, M, and B as abbreviations for thousand, million and billion respectively.\n- some data are given as percentages\n- some datapoints are missing, so instead of a number we have to look for "N/A" or "NaN.\n\nBoth the preprocessing of price data and the parsing of keystats are included in `parsing_keystats.py`. Run the following in your terminal:\n\n```bash\npython parsing_keystats.py\n```\n\nYou should see the file `keystats.csv` appear in your working directory. Now that we have the training data ready, we are ready to actually do some machine learning.\n\n## Backtesting\n\nBacktesting is arguably the most important part of any quantitative strategy: you must have some way of testing the performance of your algorithm before you live trade it.\n\nDespite its importance, I originally did not want to include backtesting code in this repository. The reasons were as follows:\n\n- Backtesting is messy and empirical. The code is not very pleasant to use, and in practice requires a lot of manual interaction.\n- Backtesting is very difficult to get right, and if you do it wrong, you will be deceiving yourself with high returns.\n- Developing and working with your backtest is probably the best way to learn about machine learning and stocks \xe2\x80\x93 you\'ll see what works, what doesn\'t, and what you don\'t understand.\n\nNevertheless, because of the importance of backtesting, I decided that I can\'t really call this a \'template machine learning stocks project\' without backtesting. Thus, I have included a simplistic backtesting script. Please note that there is a fatal flaw with this backtesting implementation that will result in *much* higher backtesting returns. It is quite a subtle point, but I will let you figure that out :)\n\nRun the following in terminal:\n\n```bash\npython backtesting.py\n```\n\nYou should get something like this:\n\n```txt\nClassifier performance\n======================\nAccuracy score:  0.81\nPrecision score:  0.75\n\nStock prediction performance report\n===================================\nTotal Trades: 177\nAverage return for stock predictions:  37.8 %\nAverage market return in the same period:  9.2%\nCompared to the index, our strategy earns  28.6 percentage points more\n```\n\nAgain, the performance looks too good to be true and almost certainly is.\n\n## Current fundamental data\n\nNow that we have trained and backtested a model on our data, we would like to generate actual predictions on current data.\n\nAs always, we can scrape the data from good old Yahoo Finance. My method is to literally just download the statistics page for each stock (here is the [page](https://finance.yahoo.com/quote/AAPL/key-statistics?p=AAPL) for Apple), then to parse it using regex as before.\n\nIn fact, the regex should be almost identical, but because Yahoo has changed their UI a couple of times, there are some minor differences. This part of the projet has to be fixed whenever yahoo finance changes their UI, so if you can\'t get the project to work, the problem is most likely here.\n\nRun the following in terminal:\n\n```bash\npython current_data.py\n```\n\nThe script will then begin downloading the HTML into the `forward/` folder within your working directory, before parsing this data and outputting the file `forward_sample.csv`. You might see a few miscellaneous errors for certain tickers (e.g \'Exceeded 30 redirects.\'), but this is to be expected.\n\n## Stock prediction\n\nNow that we have the training data and the current data, we can finally generate actual predictions. This part of the project is very simple: the only thing you have to decide is the value of the `OUTPERFORMANCE` parameter (the percentage by which a stock has to beat the S&P500 to be considered a \'buy\'). I have set it to 10 by default, but it can easily be modified by changing the variable at the top of the file. Go ahead and run the script:\n\n```bash\npython stock_prediction.py\n```\n\nYou should get something like this:\n\n```txt\n21 stocks predicted to outperform the S&P500 by more than 10%:\nNOC FL SWK NFX LH NSC SCHL KSU DDS GWW AIZ ORLY R SFLY SHW GME DLX DIS AMP BBBY APD\n```\n\n## Unit testing\n\nI have included a number of unit tests (in the `tests/` folder) which serve to check that things are working properly. However, due to the nature of the some of this projects functionality (downloading big datasets), you will have to run all the code once before running the tests. Otherwise, the tests themselves would have to download huge datasets (which I don\'t think is optimal).\n\nI thus recommend that you run the tests after you have run all the other scripts (except, perhaps, `stock_prediction.py`).\n\nTo run the tests, simply enter the following into a terminal instance in the project directory:\n\n```bash\npytest -v\n```\n\nPlease note that it is not considered best practice to include an `__init__.py` file in the `tests/` directory (see [here](https://docs.pytest.org/en/latest/goodpractices.html) for more), but I have done it anyway because it is uncomplicated and functional.\n\n## Where to go from here\n\nI have stated that this project is extensible, so here are some ideas to get you started and possibly increase returns (no promises).\n\n### Data acquisition\n\nMy personal belief is that better quality data is THE factor that will ultimately determine your performance. Here are some ideas:\n\n- Explore the other subfolders in Sentdex\'s `intraQuarter.zip`.\n- Parse the annual reports that all companies submit to the SEC (have a look at the [Edgar Database](https://www.sec.gov/edgar/searchedgar/companysearch.html))\n- Try to find websites from which you can scrape fundamental data (this has been my solution).\n- Ditch US stocks and go global \xe2\x80\x93 perhaps better results may be found in markets that are less-liquid. It\'d be interesting to see whether the predictive power of features vary based on geography.\n- Buy Quandl data, or experiment with alternative data.\n\n### Data preprocessing\n\n- Build a more robust parser using BeautifulSoup\n- In this project, I have just ignored any rows with missing data, but this reduces the size of the dataset considerably. Are there any ways you can fill in some of this data?\n  - hint: if the PE ratio is missing but you know the stock price and the earnings/share...\n  - hint 2: how different is Apple\'s book value in March to its book value in June?\n- Some form of feature engineering\n  - e.g, calculate [Graham\'s number](https://www.investopedia.com/terms/g/graham-number.asp) and use it as a feature\n  - some of the features are probably redundant. Why not remove them to speed up training?\n- Speed up the construction of `keystats.csv`.\n  - hint: don\'t keep appending to one growing dataframe! Split it into chunks\n\n### Machine learning\n\nAltering the machine learning stuff is probably the easiest and most fun to do.\n\n- The most important thing if you\'re serious about results is to find the problem with the current backtesting setup and fix it. This will likely be quite a sobering experience, but if your backtest is done right, it should mean that any observed outperformance on your test set can be traded on (again, do so at your own discretion).\n- Try a different classifier \xe2\x80\x93 there is plenty of research that advocates the use of SVMs, for example. Don\'t forget that other classifiers may require feature scaling etc.\n- Hyperparameter tuning: use gridsearch to find the optimal hyperparameters for your classifier. But make sure you don\'t overfit!\n- Make it *deep* \xe2\x80\x93 experiment with neural networks (an easy way to start is with `sklearn.neural_network`).\n- Change the classification problem into a regression one: will we achieve better results if we try to predict the stock *return* rather than whether it outperformed?\n- Run the prediction multiple times (perhaps using different hyperparameters?) and select the *k* most common stocks to invest in. This is especially important if the algorithm is not deterministic (as is the case for Random Forest)\n- Experiment with different values of the `outperformance` parameter.\n- Should we really be trying to predict raw returns? What happens if a stock achieves a 20% return but does so by being highly volatile?\n- Try to plot the importance of different features to \'see what the machine sees\'.\n\n## Contributing\n\nFeel free to fork, play around, and submit PRs. I would be very grateful for any bug fixes or more unit tests.\n\nThis project was originally based on Sentdex\'s excellent [machine learning tutorial](https://www.youtube.com/playlist?list=PLQVvvaa0QuDd0flgGphKCej-9jp-QdzZ3), but it has since evolved far beyond that and the code is almost completely different. The complete series is also on [his website](https://pythonprogramming.net/machine-learning-python-sklearn-intro/).\n\n---\n\nFor more content like this, check out my academic blog at [reasonabledeviations.com/](https://reasonabledeviations.com).\n'