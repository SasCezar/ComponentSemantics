b'\n<p align="center"><img width="40%" src="docs/ONNXMLTools_logo_main.png" /></p>\n\n| Linux | Windows |\n|-------|---------|\n| [![Build Status](https://dev.azure.com/onnxmltools/onnxmltools/_apis/build/status/onnxmltools-linux-conda-ci?branchName=master)](https://dev.azure.com/onnxmltools/onnxmltools/_build/latest?definitionId=3?branchName=master)| [![Build Status](https://dev.azure.com/onnxmltools/onnxmltools/_apis/build/status/onnxmltools-win32-conda-ci?branchName=master)](https://dev.azure.com/onnxmltools/onnxmltools/_build/latest?definitionId=3?branchName=master)|\n\n# Introduction \nONNXMLTools enables you to convert models from different machine learning toolkits into [ONNX](https://onnx.ai). Currently the following toolkits are supported:\n* Keras (a wrapper of [keras2onnx converter](https://github.com/onnx/keras-onnx/))\n* Tensorflow (a wrapper of [tf2onnx converter](https://github.com/onnx/tensorflow-onnx/))\n* scikit-learn (a wrapper of [skl2onnx converter](https://github.com/onnx/sklearn-onnx/))\n* Apple Core ML\n* Spark ML (experimental)\n* LightGBM\n* libsvm\n* XGBoost\n\n## Install\nYou can install latest release of ONNXMLTools from [PyPi](https://pypi.org/project/onnxmltools/):\n```\npip install onnxmltools\n```\nor install from source:\n```\npip install git+https://github.com/onnx/onnxmltools\n```\nIf you choose to install `onnxmltools` from its source code, you must set the environment variable `ONNX_ML=1` before installing the `onnx` package. \n\n## Dependencies\nThis package relies on ONNX, NumPy, and ProtoBuf. If you are converting a model from scikit-learn, Core ML, Keras, LightGBM, SparkML, XGBoost, or LibSVM, you will need an environment with the respective package installed from the list below:\n1. scikit-learn\n2. CoreMLTools\n3. Keras (version 2.0.8 or higher) with the corresponding Tensorflow version\n4. LightGBM (scikit-learn interface)\n5. SparkML\n6. XGBoost (scikit-learn interface)\n7. libsvm\n\nONNXMLTools has been tested with Python **2.7**, **3.5**, **3.6**, and **3.7**.  \n  `Note: some wrapped converters may not support python 2.x anymore.`\n\n# Examples\nIf you want the converted ONNX model to be compatible with a certain ONNX version, please specify the target_opset parameter upon invoking the convert function. The following Keras model conversion example demonstrates this below. You can identify the mapping from ONNX Operator Sets (referred to as opsets) to ONNX releases in the [versioning documentation](https://github.com/onnx/onnx/blob/master/docs/Versioning.md#released-versions). \n\n## Keras to ONNX Conversion\nNext, we show an example of converting a Keras model into an ONNX model with `target_opset=7`, which corresponds to ONNX release version 1.2.\n\n```python\nimport onnxmltools\nfrom keras.layers import Input, Dense, Add\nfrom keras.models import Model\n\n# N: batch size, C: sub-model input dimension, D: final model\'s input dimension\nN, C, D = 2, 3, 3\n\n# Define a sub-model, it will become a part of our final model\nsub_input1 = Input(shape=(C,))\nsub_mapped1 = Dense(D)(sub_input1)\nsub_model1 = Model(inputs=sub_input1, outputs=sub_mapped1)\n\n# Define another sub-model, it will become a part of our final model\nsub_input2 = Input(shape=(C,))\nsub_mapped2 = Dense(D)(sub_input2)\nsub_model2 = Model(inputs=sub_input2, outputs=sub_mapped2)\n\n# Define a model built upon the previous two sub-models\ninput1 = Input(shape=(D,))\ninput2 = Input(shape=(D,))\nmapped1_2 = sub_model1(input1)\nmapped2_2 = sub_model2(input2)\nsub_sum = Add()([mapped1_2, mapped2_2])\nkeras_model = Model(inputs=[input1, input2], output=sub_sum)\n\n# Convert it! The target_opset parameter is optional.\nonnx_model = onnxmltools.convert_keras(keras_model, target_opset=7) \n```\n\n## CoreML to ONNX Conversion\nHere is a simple code snippet to convert a Core ML model into an ONNX model.\n\n```python\nimport onnxmltools\nimport coremltools\n\n# Load a Core ML model\ncoreml_model = coremltools.utils.load_spec(\'example.mlmodel\')\n\n# Convert the Core ML model into ONNX\nonnx_model = onnxmltools.convert_coreml(coreml_model, \'Example Model\')\n\n# Save as protobuf\nonnxmltools.utils.save_model(onnx_model, \'example.onnx\')\n```\n\n## Spark ML to ONNX Conversion (experimental)\nPlease refer to the following documents:\n * [Conversion Framework](onnxmltools/convert/README.md)\n * [Spark ML to ONNX Model Conversion](onnxmltools/convert/sparkml/README.md)\n\n# Testing model converters\n\n*onnxmltools* converts models into the ONNX format which\ncan be then used to compute predictions with the\nbackend of your choice. \n\n## Checking the operator set version of your converted ONNX model\n\nYou can check the operator set of your converted ONNX model using [Netron](https://github.com/lutzroeder/Netron), a viewer for Neural Network models. Alternatively, you could identify your converted model\'s opset version through the following line of code.\n\n```\nopset_version = onnx_model.opset_import[0].version\n```\n\nIf the result from checking your ONNX model\'s opset is smaller than the `target_opset` number you specified in the onnxmltools.convert function, be assured that this is likely intended behavior. The ONNXMLTools converter works by converting each operator to the ONNX format individually and finding the corresponding opset version that it was most recently updated in. Once all of the operators are converted, the resultant ONNX model has the maximal opset version of all of its operators.\n\nTo illustrate this concretely, let\'s consider a model with two operators, Abs and Add. As of December 2018, [Abs](https://github.com/onnx/onnx/blob/master/docs/Operators.md#abs) was most recently updated in opset 6, and [Add](https://github.com/onnx/onnx/blob/master/docs/Operators.md#add) was most recently updated in opset 7. Therefore, the converted ONNX model\'s opset will always be 7, even if you request `target_opset=8`. The converter behavior was defined this way to ensure backwards compatibility. \n\nDocumentation for the [ONNX Model format](https://github.com/onnx/onnx) and more examples for converting models from different frameworks can be found in the [ONNX tutorials](https://github.com/onnx/tutorials) repository. \n\n## Test all existing converters\n\nThere exists a way\nto automatically check every converter with\n[onnxruntime](https://pypi.org/project/onnxruntime/) or\n[onnxruntime-gpu](https://pypi.org/project/onnxruntime-gpu/).\nThis process requires the user to clone the *onnxmltools* repository.\nThe following command runs all unit tests and generates\ndumps of models, inputs, expected outputs and converted models\nin folder ``TESTDUMP``.\n\n```\npython tests/main.py DUMP\n```\n\nIt requires *onnxruntime*, *numpy* for most models,\n*pandas* for transforms related to text features, and\n*scipy* for sparse features. One test also requires\n*keras* to test a custom operator. That means\n*sklearn* or any machine learning library is requested.\n\n## Add a new converter\n\nOnce the converter is implemented, a unit test is added\nto confirm that it works. At the end of the unit test, function\n*dump_data_and_model* or any equivalent function must be called\nto dump the expected output and the converted model.\nOnce these file are generated, a corresponding test must\nbe added in *tests_backend* to compute the prediction\nwith the runtime.\n\n# License\n[MIT License](LICENSE)\n'