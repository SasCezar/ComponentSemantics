b'.. image::  https://travis-ci.org/django-polymorphic/django-polymorphic.svg?branch=master\n    :target: http://travis-ci.org/django-polymorphic/django-polymorphic\n.. image:: https://img.shields.io/pypi/v/django-polymorphic.svg\n    :target: https://pypi.python.org/pypi/django-polymorphic/\n.. image:: https://img.shields.io/codecov/c/github/django-polymorphic/django-polymorphic/master.svg\n    :target: https://codecov.io/github/django-polymorphic/django-polymorphic?branch=master\n.. image:: https://readthedocs.org/projects/django-polymorphic/badge/?version=stable\n    :target: https://django-polymorphic.readthedocs.io/en/stable/\n\nPolymorphic Models for Django\n=============================\n\nDjango-polymorphic simplifies using inherited models in Django projects.\nWhen a query is made at the base model, the inherited model classes are returned.\n\nWhen we store models that inherit from a ``Project`` model...\n\n.. code-block:: python\n\n    >>> Project.objects.create(topic="Department Party")\n    >>> ArtProject.objects.create(topic="Painting with Tim", artist="T. Turner")\n    >>> ResearchProject.objects.create(topic="Swallow Aerodynamics", supervisor="Dr. Winter")\n\n...and want to retrieve all our projects, the subclassed models are returned!\n\n.. code-block:: python\n\n    >>> Project.objects.all()\n    [ <Project:         id 1, topic "Department Party">,\n      <ArtProject:      id 2, topic "Painting with Tim", artist "T. Turner">,\n      <ResearchProject: id 3, topic "Swallow Aerodynamics", supervisor "Dr. Winter"> ]\n\nUsing vanilla Django, we get the base class objects, which is rarely what we wanted:\n\n.. code-block:: python\n\n    >>> Project.objects.all()\n    [ <Project: id 1, topic "Department Party">,\n      <Project: id 2, topic "Painting with Tim">,\n      <Project: id 3, topic "Swallow Aerodynamics"> ]\n\nThis also works when the polymorphic model is accessed via\nForeignKeys, ManyToManyFields or OneToOneFields.\n\nFeatures\n--------\n\n* Full admin integration.\n* ORM integration:\n\n  * support for ForeignKey, ManyToManyField, OneToOneField descriptors.\n  * Filtering/ordering of inherited models (``ArtProject___artist``).\n  * Filtering model types: ``instance_of(...)`` and ``not_instance_of(...)``\n  * Combining querysets of different models (``qs3 = qs1 | qs2``)\n  * Support for custom user-defined managers.\n* Uses the minumum amount of queries needed to fetch the inherited models.\n* Disabling polymorphic behavior when needed.\n\nWhile *django-polymorphic* makes subclassed models easy to use in Django,\nwe still encourage to use them with caution. Each subclassed model will require\nDjango to perform an ``INNER JOIN`` to fetch the model fields from the database.\nWhile taking this in mind, there are valid reasons for using subclassed models.\nThat\'s what this library is designed for!\n\nThe current release of *django-polymorphic* supports Django 1.11, 2.0, 2.1, 2.2 and Python 2.7 and 3.5+ is supported.\nFor older Django versions, install *django-polymorphic==1.3*.\n\nFor more information, see the `documentation at Read the Docs <https://django-polymorphic.readthedocs.io/>`_.\n\nInstallation\n------------\n\nInstall using ``pip``\\ ...\n\n.. code:: bash\n\n    $ pip install django-polymorphic\n\nLicense\n=======\n\nDjango-polymorphic uses the same license as Django (BSD-like).\n'