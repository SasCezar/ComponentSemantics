b'# django-tables2 - An app for creating HTML tables\n\n[![Latest PyPI version](https://badge.fury.io/py/django-tables2.svg)](https://pypi.python.org/pypi/django-tables2)\n[![Travis CI](https://travis-ci.org/jieter/django-tables2.svg?branch=master)](https://travis-ci.org/jieter/django-tables2)\n[![Any color you like](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)\n\ndjango-tables2 simplifies the task of turning sets of data into HTML tables. It\nhas native support for pagination and sorting. It does for HTML tables what\n`django.forms` does for HTML forms. e.g.\n\n- Available on pypi as [django-tables2](https://pypi.python.org/pypi/django-tables2)\n- Tested against currently supported versions of Django\n  [and supported python 3 versions Django supports](https://docs.djangoproject.com/en/dev/faq/install/#what-python-version-can-i-use-with-django) No python 2.7 support anymore\n  (see [Travis CI](https://travis-ci.org/jieter/django-tables2)\n- [Documentation on readthedocs.org](https://django-tables2.readthedocs.io/en/latest/)\n- [Bug tracker](http://github.com/jieter/django-tables2/issues)\n\nFeatures:\n\n- Any iterable can be a data-source, but special support for Django `QuerySets` is included.\n- The builtin UI does not rely on JavaScript.\n- Support for automatic table generation based on a Django model.\n- Supports custom column functionality via subclassing.\n- Pagination.\n- Column based table sorting.\n- Template tag to enable trivial rendering to HTML.\n- Generic view mixin.\n\n![An example table rendered using django-tables2](https://cdn.rawgit.com/jieter/django-tables2/master/docs/img/example.png)\n\n![An example table rendered using django-tables2 and bootstrap theme](https://cdn.rawgit.com/jieter/django-tables2/master/docs/img/bootstrap.png)\n\n![An example table rendered using django-tables2 and semantic-ui theme](\nhttps://cdn.rawgit.com/jieter/django-tables2/master/docs/img/semantic.png)\n\n## Example\n\nStart by adding `django_tables2` to your `INSTALLED_APPS` setting like this:\n\n```python\nINSTALLED_APPS = (\n    ...,\n    "django_tables2",\n)\n```\n\nCreating a table for a model `Simple` is as simple as:\n\n```python\nimport django_tables2 as tables\n\nclass SimpleTable(tables.Table):\n    class Meta:\n        model = Simple\n```\nThis would then be used in a view:\n\n```python\nclass TableView(tables.SingleTableView):\n    table_class = SimpleTable\n    queryset = Simple.objects.all()\n    template_name = "simple_list.html"\n```\nAnd finally in the template:\n\n```\n{% load django_tables2 %}\n{% render_table table %}\n```\n\nThis example shows one of the simplest cases, but django-tables2 can do a lot more!\nCheck out the [documentation](https://django-tables2.readthedocs.io/en/latest/) for more details.\n'