b'<a href="https://authlib.org/">\n<img align="right" width="120" height="120" src="https://authlib.org/logo.svg">\n</a>\n\n# Authlib\n\n<a href="https://github.com/users/lepture/sponsorship"><img src="https://badgen.net/badge/support/authlib/ff69b4?icon=patreon" /></a>\n<a href="https://github.com/lepture/authlib/actions"><img src="https://github.com/lepture/authlib/workflows/tests/badge.svg" alt="Build Status"></a>\n<a href="https://codecov.io/gh/lepture/authlib?branch=master"><img src="https://badgen.net/codecov/c/github/lepture/authlib" alt="Coverage Status"></a>\n<a href="https://pypi.org/project/Authlib/"><img src="https://badgen.net/pypi/v/authlib" alt="PyPI Version"></a>\n<a href="https://codeclimate.com/github/lepture/authlib/maintainability"><img src="https://badgen.net/codeclimate/maintainability/lepture/authlib?icon=codeclimate" alt="Maintainability" /></a>\n<a href="https://twitter.com/intent/follow?screen_name=authlib"><img src="https://img.shields.io/twitter/follow/authlib.svg?maxAge=3600&style=social&logo=twitter&label=Follow" alt="Follow Twitter"></a>\n\nThe ultimate Python library in building OAuth and OpenID Connect servers.\nJWS, JWK, JWA, JWT are included.\n\nAuthlib is compatible with Python2.7+ and Python3.6+.\n\n```python\nauthorization_server.register_grant(AuthorizationCodeGrant)\nauthorization_server.register_grant(ImplicitGrant)\nauthorization_server.register_grant(ResourceOwnerPasswordGrant)\nauthorization_server.register_grant(ClientCredentialsGrant)\nauthorization_server.register_grant(RefreshTokenGrant)\nauthorization_server.register_grant(AuthorizationCodeGrant, [OpenIDCode()])\nauthorization_server.register_grant(OpenIDImplicitGrant)\nauthorization_server.register_grant(OpenIDHybridGrant)\nauthorization_server.register_endpoint(RevocationEndpoint)\nauthorization_server.register_endpoint(IntrospectionEndpoint)\n```\n\n## Sponsors\n\n<table>\n<tr>\n<td><img align="middle" width="48" src="https://user-images.githubusercontent.com/290496/39297078-89d00928-497d-11e8-8119-0c53afe14cd0.png"></td>\n<td>If you want to quickly add secure token-based authentication to Python projects, feel free to check Auth0\'s Python SDK and free plan at <a href="https://auth0.com/overview?utm_source=GHsponsor&utm_medium=GHsponsor&utm_campaign=authlib&utm_content=auth">auth0.com/overview</a>.</td>\n</tr>\n<tr>\n<td><img align="middle" width="48" src="https://user-images.githubusercontent.com/290496/67944168-33843980-fc1f-11e9-8f69-6a7515344b92.png"></td>\n<td>For quickly implementing token-based authencation, feel free to check <a href="https://learn.authing.cn/authing/sdk/sdk-for-python">Authing\'s Python SDK</a>.</td>\n</tr>\n<tr>\n<td><img align="middle" width="48" src="https://user-images.githubusercontent.com/2379650/45126032-50b69880-b13f-11e8-9c2c-abd16c433495.png"></td>\n<td>Get professionally-supported Authlib with the <a href="https://tidelift.com/subscription/pkg/pypi-authlib?utm_source=pypi-authlib&utm_medium=referral&utm_campaign=readme">Tidelift Subscription</a>.\n</td>\n</tr>\n</table>\n\n[**Support Me via GitHub Sponsors**](https://github.com/users/lepture/sponsorship).\n\n## Useful Links\n\n1. Homepage: <https://authlib.org/>.\n2. Documentation: <https://docs.authlib.org/>.\n3. Purchase Commercial License: <https://authlib.org/plans>.\n4. Blog: <https://blog.authlib.org/>.\n5. Twitter: <https://twitter.com/authlib>.\n6. StackOverflow: <https://stackoverflow.com/questions/tagged/authlib>.\n7. Other Repositories: <https://github.com/authlib>.\n8. Subscribe Tidelift: [https://tidelift.com/subscription/pkg/pypi-authlib](https://tidelift.com/subscription/pkg/pypi-authlib?utm_source=pypi-authlib&utm_medium=referral&utm_campaign=links).\n\n## Spec Implementations\n\nLovely features that Authlib has built-in:\n\n<details>\n<summary>\xf0\x9f\x8e\x89 RFC5849: The OAuth 1.0 Protocol</summary>\n\n- [x] OAuth1Session for Requests\n- [x] OAuth1Client for HTTPX\n- [x] OAuth 1.0 Client for Flask\n- [x] OAuth 1.0 Client for Django\n- [x] OAuth 1.0 Server for Flask\n- [x] OAuth 1.0 Server for Django\n</details>\n\n<details>\n<summary>\xf0\x9f\x8e\x89 RFC6749: The OAuth 2.0 Authorization Framework</summary>\n\n- [x] OAuth2Session for Requests\n- [x] OAuth2Client for HTTPX\n- [x] OAuth 2.0 Client for Flask\n- [x] OAuth 2.0 Client for Django\n- [x] OAuth 2.0 Server for Flask\n- [x] OAuth 2.0 Server for Django\n</details>\n\n<details>\n<summary>\xf0\x9f\x8e\x89 RFC6750: The OAuth 2.0 Authorization Framework: Bearer Token Usage</summary>\n\n- [x] Bearer Token for OAuth2Session\n- [x] Bearer Token for Flask provider\n- [x] Bearer Token for Django provider\n</details>\n\n<details>\n<summary>\xf0\x9f\x8e\x89 RFC7009: OAuth 2.0 Token Revocation</summary>\n\n- [x] Token Revocation for Flask provider\n- [x] Token Revocation for Django provider\n</details>\n\n<details>\n<summary>\xf0\x9f\x8e\x89 RFC7515: JSON Web Signature (JWS)</summary>\n\n- [x] Compact serialize and deserialize\n- [x] JSON serialize and deserialize\n</details>\n\n<details>\n<summary>\xf0\x9f\x8e\x89 RFC7516: JSON Web Encryption (JWE)</summary>\n\n- [x] Compact serialize and deserialize\n- [ ] JSON serialize and deserialize\n</details>\n\n<details>\n<summary>\xf0\x9f\x8e\x89 RFC7517: JSON Web Key (JWK)</summary>\n\n- [x] "oct" algorithm via RFC7518\n- [x] "RSA" algorithm via RFC7518\n- [x] "EC" algorithm via RFC7518\n</details>\n\n<details>\n<summary>\xf0\x9f\x8e\x89 RFC7518: JSON Web Algorithms (JWA)</summary>\n\n- [x] Algorithms for JWS\n- [x] Algorithms for JWE (some of them)\n- [x] Algorithms for JWK\n</details>\n\n<details>\n<summary>\xf0\x9f\x8e\x89 RFC7519: JSON Web Token (JWT)</summary>\n\n- [x] Use JWS for JWT\n- [x] Use JWE for JWT\n- [x] Payload claims validation\n</details>\n\n<details>\n<summary>\xf0\x9f\x8e\x89 RFC7521: Assertion Framework for OAuth 2.0 Client Authentication and Authorization Grants</summary>\n\n- [x] Common Client for Assertion Framework\n- [ ] Common Server for Assertion Framework\n</details>\n\n<details>\n  <summary>\xe2\x8f\xb3 RFC7522: Security Assertion Markup Language (SAML) 2.0 Profile for OAuth 2.0 Client Authentication and Authorization Grants</summary>\n  <p>RFC7522 will not be included in Authlib.</p>\n</details>\n\n<details>\n<summary>\xf0\x9f\x8e\x89 RFC7523: JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants</summary>\n\n- [x] Using JWTs as Client Authorization\n- [x] Using JWTs as Authorization Grants\n</details>\n\n<details>\n<summary>\xf0\x9f\x8e\x89 RFC7591: OAuth 2.0 Dynamic Client Registration Protocol</summary>\n\n- [x] Dynamic Client Registration Endpoint for Flask OAuth 2.0 Server\n- [x] Dynamic Client Registration Endpoint for Django OAuth 2.0 Server\n</details>\n\n<details>\n  <summary>\xe2\x8f\xb3 RFC7592: OAuth 2.0 Dynamic Client Registration Management Protocol</summary>\n  <p>RFC7592 implementation is in plan.</p>\n</details>\n\n<details>\n<summary>\xf0\x9f\x8e\x89 RFC7636: Proof Key for Code Exchange by OAuth Public Clients</summary>\n\n- [x] Requests, HTTPX, Flask, Django, Starlette integrations\n- [x] Server side grant implementation\n</details>\n\n<details>\n<summary>\xf0\x9f\x8e\x89 RFC7662: OAuth 2.0 Token Introspection</summary>\n\n- [x] Token Introspection for Flask OAuth 2.0 Server\n- [x] Token Introspection for Django OAuth 2.0 Server\n</details>\n\n<details>\n<summary>\xe2\x8f\xb3 RFC7797: JSON Web Signature (JWS) Unencoded Payload Option</summary>\n<p>RFC7797 implementation is in plan.</p>\n</details>\n\n<details>\n<summary>\xf0\x9f\x8e\x89 RFC8414: OAuth 2.0 Authorization Server Metadata</summary>\n\n- [x] Authorization Server Metadata Model\n- [x] Well Known URI\n- [x] Framework integrations\n</details>\n\n<details>\n<summary>\xf0\x9f\x8e\x89 RFC8628: OAuth 2.0 Device Authorization Grant</summary>\n\n- [x] Device Authorization Endpoint\n- [x] Device Code Grant\n</details>\n\n<details>\n<summary>\xf0\x9f\x8e\x89 OpenID Connect Core 1.0</summary>\n\n- [x] OpenID Code Flow\n- [x] OpenID Implicit Flow\n- [x] OpenID Hybrid Flow\n- [x] OpenID Claims validation\n- [x] Form Post Response Mode\n- [x] OpenID Connect for Flask OAuth 2.0 Server\n- [x] OpenID Connect for Django OAuth 2.0 Server\n</details>\n\n<details>\n<summary>\xf0\x9f\x8e\x89 OpenID Connect Discovery 1.0</summary>\n\n- [x] OpenID Provider Metadata Model\n- [x] Well Known URI\n- [x] Framework integrations\n</details>\n\nAnd more will be added.\n\n## Framework Integrations\n\nFramework integrations with current specification implementations:\n\n- [x] Requests OAuth 1/2 Session\n- [x] Requests Assertion Session\n- [x] HTTPX sync/async OAuth 1/2 Session\n- [x] HTTPX sync/async Assertion Session\n- [x] Flask OAuth 1/2 Client\n- [x] Django OAuth 1/2 Client\n- [x] Starlette OAuth 1/2 Client\n- [x] Flask OAuth 1.0 Provider\n- [x] Flask OAuth 2.0 Provider\n- [x] Flask OpenID Connect 1.0\n- [x] Django OAuth 1.0 Provider\n- [x] Django OAuth 2.0 Provider\n- [x] Django OpenID Connect 1.0\n\n\n## Security Reporting\n\nIf you found security bugs, please do not send a public issue or patch.\nYou can send me email at <me@lepture.com>. Attachment with patch is welcome.\nMy PGP Key fingerprint is:\n\n```\n72F8 E895 A70C EBDF 4F2A DFE0 7E55 E3E0 118B 2B4C\n```\n\nOr, you can use the [Tidelift security contact](https://tidelift.com/security).\nTidelift will coordinate the fix and disclosure.\n\n## License\n\nAuthlib offers two licenses:\n\n1. BSD for open source projects\n2. Commercial license for closed source projects\n\nCompanies can purchase a commercial license at\n[Authlib Plans](https://authlib.org/plans).\n\n## Support\n\nIf you need any help, you can always ask questions on StackOverflow with\na tag of "Authlib". DO NOT ASK HELP IN GITHUB ISSUES.\n\nWe also provide commercial consulting and supports. You can find more\ninformation at <https://authlib.org/support>.\n'