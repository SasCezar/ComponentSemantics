b".. image:: https://raw.githubusercontent.com/jschneier/django-storages/master/docs/logos/horizontal.png\n    :alt: Django-Storages\n    :width: 100%\n\n.. image:: https://img.shields.io/pypi/v/django-storages.svg\n    :target: https://pypi.org/project/django-storages/\n    :alt: PyPI Version\n\n.. image:: https://travis-ci.org/jschneier/django-storages.svg?branch=master\n    :target: https://travis-ci.org/jschneier/django-storages\n    :alt: Build Status\n\nInstallation\n============\nInstalling from PyPI is as easy as doing:\n\n.. code-block:: bash\n\n  pip install django-storages\n\nIf you'd prefer to install from source (maybe there is a bugfix in master that\nhasn't been released yet) then the magic incantation you are looking for is:\n\n.. code-block:: bash\n\n  pip install -e 'git+https://github.com/jschneier/django-storages.git#egg=django-storages'\n\nOnce that is done set ``DEFAULT_FILE_STORAGE`` to the backend of your choice.\nIf, for example, you want to use the boto3 backend you would set:\n\n.. code-block:: python\n\n  DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'\n\n\nIf you are using the ``FileSystemStorage`` as your storage management class in your models ``FileField`` fields, remove them\nand don't specify any storage parameter. That way, the ``DEFAULT_FILE_STORAGE`` class will be used by default in your field.\nFor example, if you have a `photo` field defined as:\n\n.. code-block:: python\n\n    photo = models.FileField(\n        storage=FileSystemStorage(location=settings.MEDIA_ROOT),\n        upload_to='photos',\n    )\n\nSet it to just:\n\n.. code-block:: python\n\n    photo = models.FileField(\n        upload_to='photos',\n    )\n\nThere are also a number of settings available to control how each storage backend functions,\nplease consult the documentation for a comprehensive list.\n\nAbout\n=====\ndjango-storages is a project to provide a variety of storage backends in a single library.\n\nThis library is usually compatible with the currently supported versions of\nDjango. Check the Trove classifiers in setup.py to be sure.\n\nHistory\n=======\nThis repo began as a fork of the original library under the package name of django-storages-redux and\nbecame the official successor (releasing under django-storages on PyPI) in February of 2016.\n\nFound a Bug? Something Unsupported?\n===================================\nI suspect that a few of the storage engines in backends/ have been unsupported\nfor quite a long time. I personally only really need the S3Storage backend but\nwelcome bug reports (and especially) patches and tests for some of the other\nbackends.\n\nIssues are tracked via GitHub issues at the `project issue page\n<https://github.com/jschneier/django-storages/issues>`_.\n\nDocumentation\n=============\nDocumentation for django-storages is located at https://django-storages.readthedocs.io/.\n\nContributing\n============\n\n#. `Check for open issues\n   <https://github.com/jschneier/django-storages/issues>`_ at the project\n   issue page or open a new issue to start a discussion about a feature or bug.\n#. Fork the `django-storages repository on GitHub\n   <https://github.com/jschneier/django-storages>`_ to start making changes.\n#. Add a test case to show that the bug is fixed or the feature is implemented\n   correctly.\n#. Bug me until I can merge your pull request. Also, don't forget to add\n   yourself to ``AUTHORS``.\n"