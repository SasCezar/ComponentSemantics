b"===========\nMongoEngine\n===========\n:Info: MongoEngine is an ORM-like layer on top of PyMongo.\n:Repository: https://github.com/MongoEngine/mongoengine\n:Author: Harry Marr (http://github.com/hmarr)\n:Maintainer: Stefan W\xc3\xb3jcik (http://github.com/wojcikstefan)\n\n.. image:: https://travis-ci.org/MongoEngine/mongoengine.svg?branch=master\n  :target: https://travis-ci.org/MongoEngine/mongoengine\n\n.. image:: https://coveralls.io/repos/github/MongoEngine/mongoengine/badge.svg?branch=master\n  :target: https://coveralls.io/github/MongoEngine/mongoengine?branch=master\n\n.. image:: https://landscape.io/github/MongoEngine/mongoengine/master/landscape.svg?style=flat\n  :target: https://landscape.io/github/MongoEngine/mongoengine/master\n  :alt: Code Health\n\nAbout\n=====\nMongoEngine is a Python Object-Document Mapper for working with MongoDB.\nDocumentation is available at https://mongoengine-odm.readthedocs.io - there\nis currently a `tutorial <https://mongoengine-odm.readthedocs.io/tutorial.html>`_,\na `user guide <https://mongoengine-odm.readthedocs.io/guide/index.html>`_, and\nan `API reference <https://mongoengine-odm.readthedocs.io/apireference.html>`_.\n\nSupported MongoDB Versions\n==========================\nMongoEngine is currently tested against MongoDB v3.4 and v3.6. Future versions\nshould be supported as well, but aren't actively tested at the moment. Make\nsure to open an issue or submit a pull request if you experience any problems\nwith MongoDB version > 3.6.\n\nInstallation\n============\nWe recommend the use of `virtualenv <https://virtualenv.pypa.io/>`_ and of\n`pip <https://pip.pypa.io/>`_. You can then use ``pip install -U mongoengine``.\nYou may also have `setuptools <http://peak.telecommunity.com/DevCenter/setuptools>`_\nand thus you can use ``easy_install -U mongoengine``. Another option is\n`pipenv <https://docs.pipenv.org/>`_. You can then use ``pipenv install mongoengine``\nto both create the virtual environment and install the package. Otherwise, you can\ndownload the source from `GitHub <http://github.com/MongoEngine/mongoengine>`_ and\nrun ``python setup.py install``.\n\nDependencies\n============\nAll of the dependencies can easily be installed via `pip <https://pip.pypa.io/>`_.\nAt the very least, you'll need these two packages to use MongoEngine:\n\n- pymongo>=3.4\n- six>=1.10.0\n\nIf you utilize a ``DateTimeField``, you might also use a more flexible date parser:\n\n- dateutil>=2.1.0\n\nIf you need to use an ``ImageField`` or ``ImageGridFsProxy``:\n\n- Pillow>=2.0.0\n\nExamples\n========\nSome simple examples of what MongoEngine code looks like:\n\n.. code :: python\n\n    from mongoengine import *\n    connect('mydb')\n\n    class BlogPost(Document):\n        title = StringField(required=True, max_length=200)\n        posted = DateTimeField(default=datetime.datetime.utcnow)\n        tags = ListField(StringField(max_length=50))\n        meta = {'allow_inheritance': True}\n\n    class TextPost(BlogPost):\n        content = StringField(required=True)\n\n    class LinkPost(BlogPost):\n        url = StringField(required=True)\n\n    # Create a text-based post\n    >>> post1 = TextPost(title='Using MongoEngine', content='See the tutorial')\n    >>> post1.tags = ['mongodb', 'mongoengine']\n    >>> post1.save()\n\n    # Create a link-based post\n    >>> post2 = LinkPost(title='MongoEngine Docs', url='hmarr.com/mongoengine')\n    >>> post2.tags = ['mongoengine', 'documentation']\n    >>> post2.save()\n\n    # Iterate over all posts using the BlogPost superclass\n    >>> for post in BlogPost.objects:\n    ...     print '===', post.title, '==='\n    ...     if isinstance(post, TextPost):\n    ...         print post.content\n    ...     elif isinstance(post, LinkPost):\n    ...         print 'Link:', post.url\n    ...     print\n    ...\n\n    # Count all blog posts and its subtypes\n    >>> BlogPost.objects.count()\n    2\n    >>> TextPost.objects.count()\n    1\n    >>> LinkPost.objects.count()\n    1\n\n    # Count tagged posts\n    >>> BlogPost.objects(tags='mongoengine').count()\n    2\n    >>> BlogPost.objects(tags='mongodb').count()\n    1\n\nTests\n=====\nTo run the test suite, ensure you are running a local instance of MongoDB on\nthe standard port and have ``pytest`` installed. Then, run ``python setup.py test``\nor simply ``pytest``.\n\nTo run the test suite on every supported Python and PyMongo version, you can\nuse ``tox``. You'll need to make sure you have each supported Python version\ninstalled in your environment and then:\n\n.. code-block:: shell\n\n    # Install tox\n    $ pip install tox\n    # Run the test suites\n    $ tox\n\nIf you wish to run a subset of tests, use the pytest convention:\n\n.. code-block:: shell\n\n    # Run all the tests in a particular test file\n    $ pytest tests/fields/test_fields.py\n    # Run only particular test class in that file\n    $ pytest tests/fields/test_fields.py::TestField\n\nCommunity\n=========\n- `MongoEngine Users mailing list\n  <http://groups.google.com/group/mongoengine-users>`_\n- `MongoEngine Developers mailing list\n  <http://groups.google.com/group/mongoengine-dev>`_\n\nContributing\n============\nWe welcome contributions! See the `Contribution guidelines <https://github.com/MongoEngine/mongoengine/blob/master/CONTRIBUTING.rst>`_\n"