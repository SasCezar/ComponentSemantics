b'xhgui\n=====\n\nA graphical interface for XHProf data built on MongoDB.\n\nThis tool requires that [XHProf](http://pecl.php.net/package/xhprof) or its one\nof its forks [Uprofiler](https://github.com/FriendsOfPHP/uprofiler),\n[Tideways](https://github.com/tideways/php-profiler-extension) are installed.\nXHProf is a PHP Extension that records and provides profiling data.\nXHGui (this tool) takes that information, saves it in MongoDB, and provides\na convenient GUI for working with it.\n\n[![Build Status](https://travis-ci.org/perftools/xhgui.svg?branch=master)](https://travis-ci.org/perftools/xhgui)\n[![Scrutinizer Code Quality](https://scrutinizer-ci.com/g/perftools/xhgui/badges/quality-score.png?b=master)](https://scrutinizer-ci.com/g/perftools/xhgui/?branch=master)\n[![Code Coverage](https://scrutinizer-ci.com/g/perftools/xhgui/badges/coverage.png?b=master)](https://scrutinizer-ci.com/g/perftools/xhgui/?branch=master)\n\nSystem Requirements\n===================\n\nXHGui has the following requirements:\n\n * PHP version 5.6 or later.\n * [MongoDB Extension](http://pecl.php.net/package/mongodb) MongoDB PHP driver.\n   XHGui requires verison 1.3.0 or later.\n * [MongoDB](http://www.mongodb.org/) MongoDB Itself. XHGui requires version 2.2.0 or later.\n * One of [XHProf](http://pecl.php.net/package/xhprof),\n   [Uprofiler](https://github.com/FriendsOfPHP/uprofiler) or\n   [Tideways](https://github.com/tideways/php-profiler-extension) to actually profile the data.\n * [dom](http://php.net/manual/en/book.dom.php) If you are running the tests\n   you\'ll need the DOM extension (which is a dependency of PHPUnit).\n\n\nInstallation from source\n========================\n\n1. Clone or download `xhgui` from GitHub.\n\n2. Point your webserver to the `webroot` directory.\n\n3. Set the permissions on the `cache` directory to allow the\n   webserver to create files. If you\'re lazy, `0777` will work.\n\n   The following command changes the permissions for the `cache` directory:\n\n   ```bash\n   chmod -R 0777 cache\n   ```\n\n4. Start a MongoDB instance. XHGui uses the MongoDB instance to store\n   profiling data.\n\n5. If your MongoDB setup uses authentication, or isn\'t running on the\n   default port and localhost, update XHGui\'s `config/config.php` so that XHGui\n   can connect to your `mongod` instance.\n\n6. (**Optional**, but recommended) Add indexes to MongoDB to improve performance.\n\n   XHGui stores profiling information in a `results` collection in the\n   `xhprof` database in MongoDB. Adding indexes improves performance,\n   letting you navigate pages more quickly.\n\n   To add an index, open a `mongo` shell from your command prompt.\n   Then, use MongoDB\'s `db.collection.ensureIndex()` method to add\n   the indexes, as in the following:\n\n   ```\n   $ mongo\n   > use xhprof\n   > db.results.ensureIndex( { \'meta.SERVER.REQUEST_TIME\' : -1 } )\n   > db.results.ensureIndex( { \'profile.main().wt\' : -1 } )\n   > db.results.ensureIndex( { \'profile.main().mu\' : -1 } )\n   > db.results.ensureIndex( { \'profile.main().cpu\' : -1 } )\n   > db.results.ensureIndex( { \'meta.url\' : 1 } )\n   > db.results.ensureIndex( { \'meta.simple_url\' : 1 } )\n   ```\n\n7. Run XHGui\'s install script. The install script downloads composer and\n   uses it to install the XHGui\'s dependencies.\n\n   ```bash\n   cd path/to/xhgui\n   php install.php\n   ```\n\n8. Set up your webserver. The Configuration section below describes how\n   to setup the rewrite rules for both nginx and apache.\n\nInstallation with Docker\n========================\n\nThis setup uses [docker-compose] to orchestrate docker containers.\n\n1. Clone or download `xhgui` from GitHub.\n\n2. Startup the containers: `docker-compose up -d`\n\n3. Open your browser at http://xhgui.127.0.0.1.xip.io:8142 or just http://localhost:8142\n\n4. To customize xhgui, copy `config/config.default.php` to `config/config.php` and edit that file.\n\n5. To customize docker-compose, copy `docker-compose.yml` to `docker-compose.override.yml` and edit that file.\n\n[docker-compose]: https://docs.docker.com/compose/\n\nConfiguration\n=============\n\nConfigure Webserver Re-Write Rules\n----------------------------------\n\nXHGui prefers to have URL rewriting enabled, but will work without it.\nFor Apache, you can do the following to enable URL rewriting:\n\n1. Make sure that an .htaccess override is allowed and that AllowOverride\n   has the directive FileInfo set for the correct DocumentRoot.\n\n    Example configuration for Apache 2.4:\n    ```apache\n    <Directory /var/www/xhgui/>\n        Options Indexes FollowSymLinks\n        AllowOverride FileInfo\n        Require all granted\n    </Directory>\n    ```\n2. Make sure you are loading up mod_rewrite correctly.\n   You should see something like:\n\n    ```apache\n    LoadModule rewrite_module libexec/apache2/mod_rewrite.so\n    ```\n\n3. XHGui comes with a `.htaccess` file to enable the remaining rewrite rules.\n\nFor nginx and fast-cgi, you can use the following snippet as a start:\n\n```nginx\nserver {\n    listen   80;\n    server_name example.com;\n\n    # root directive should be global\n    root   /var/www/example.com/public/xhgui/webroot/;\n    index  index.php;\n\n    location / {\n        try_files $uri $uri/ /index.php?$args;\n    }\n\n    location ~ \\.php$ {\n        try_files $uri =404;\n        include /etc/nginx/fastcgi_params;\n        fastcgi_pass    127.0.0.1:9000;\n        fastcgi_index   index.php;\n        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n    }\n}\n```\n\n\nConfigure XHGui Profiling Rate\n-------------------------------\n\nAfter installing XHGui, you may want to change how frequently you\nprofile the host application. The `profiler.enable` configuration option\nallows you to provide a callback function that specifies the requests that\nare profiled. By default, XHGui profiles 1 in 100 requests.\n\nThe following example configures XHGui to only profile requests\nfrom a specific URL path:\n\nThe following example configures XHGui to profile 1 in 100 requests,\nexcluding requests with the `/blog` URL path:\n\n```php\n// In config/config.php\nreturn array(\n    // Other config\n    \'profiler.enable\' => function() {\n        $url = $_SERVER[\'REQUEST_URI\'];\n        if (strpos($url, \'/blog\') === 0) {\n            return false;\n        }\n        return rand(1, 100) === 42;\n    }\n);\n```\n\nIn contrast, the following example configured XHGui to profile *every*\nrequest:\n\n```php\n// In config/config.php\nreturn array(\n    // Other config\n    \'profiler.enable\' => function() {\n        return true;\n    }\n);\n```\n\n\nConfigure \'Simple\' URLs Creation\n--------------------------------\n\nXHGui generates \'simple\' URLs for each profile collected. These URLs are\nused to generate the aggregate data used on the URL view. Since\ndifferent applications have different requirements for how URLs map to\nlogical blocks of code, the `profile.simple_url` configuration option\nallows you to provide specify the logic used to generate the simple URL.\nBy default, all numeric values in the query string are removed.\n\n```php\n// In config/config.php\nreturn array(\n    // Other config\n    \'profile.simple_url\' => function($url) {\n        // Your code goes here.\n    }\n);\n```\n\nThe URL argument is the `REQUEST_URI` or `argv` value.\n\nConfigure ignored functions\n---------------------------\n\nYou can use the `profiler.options` configuration value to set additional options\nfor the profiler extension. This is useful when you want to exclude specific\nfunctions from your profiler data:\n\n```php\n// In config/config.php\nreturn array(\n    //Other config\n    \'profiler.options\' => [\n        \'ignored_functions\' => [\'call_user_func\', \'call_user_func_array\']\n    ]\n);\n```\n\nProfiling a Web Request or CLI script\n=====================================\n\nUsing [xhgui-collector](https://github.com/perftools/xhgui-collector) you can\ncollect data from your web applications and CLI scripts. This data is then\npushed into xhgui\'s database where it can be viewed with this application.\n\nSaving & Importing Profiles\n---------------------------\n\nIf your site cannot directly connect to your MongoDB instance, you can choose\nto save your data to a temporary file for a later import to XHGui\'s MongoDB\ndatabase.\n\nTo configure XHGui to save your data to a temporary file,\nchange the `save.handler` setting to `file` and define your file\'s\npath with `save.handler.filename`.\n\nTo import a saved file to MongoDB use XHGui\'s provided\n`external/import.php` script.\n\nBe aware of file locking: depending on your workload, you may need to\nchange the `save.handler.filename` file path to avoid file locking\nduring the import.\n\nThe following demonstrate the use of `external/import.php`:\n\n```bash\nphp external/import.php -f /path/to/file\n```\n\n**Warning**: Importing the same file twice will load twice the run datas inside\nMongoDB, resulting in duplicate profiles\n\n\nLimiting MongoDB Disk Usage\n---------------------------\n\nDisk usage can grow quickly, especially when profiling applications with large\ncode bases or that use larger frameworks.\n\nTo keep the growth\nin check, configure MongoDB to automatically delete profiling documents once they\nhave reached a certain age by creating a [TTL index](http://docs.mongodb.org/manual/core/index-ttl/).\n\nDecide on a maximum profile document age in seconds: you\nmay wish to choose a lower value in development (where you profile everything),\nthan production (where you profile only a selection of documents). The\nfollowing command instructs Mongo to delete documents over 5 days (432000\nseconds) old.\n\n```\n$ mongo\n> use xhprof\n> db.results.ensureIndex( { "meta.request_ts" : 1 }, { expireAfterSeconds : 432000 } )\n```\n\nWaterfall Display\n-----------------\n\nThe goal of XHGui\'s waterfall display is to recognize that concurrent requests can\naffect each other. Concurrent database requests, CPU-intensive\nactivities and even locks on session files can become relevant. With an\nAjax-heavy application, understanding the page build is far more complex than\na single load: hopefully the waterfall can help. Remember, if you\'re only\nprofiling a sample of requests, the waterfall fills you with impolite lies.\n\nSome Notes:\n\n * There should probably be more indexes on MongoDB for this to be performant.\n * The waterfall display introduces storage of a new `request_ts_micro` value, as second level\n   granularity doesn\'t work well with waterfalls.\n * The waterfall display is still very much in alpha.\n * Feedback and pull requests are welcome :)\n\nUsing Tideways Extension\n========================\n\nThe XHProf PHP extension is not compatible with PHP7.0+. Instead you\'ll need to\nuse the [tideways_xhprof extension](https://github.com/tideways/php-profiler-extension).\n\nOnce installed, you can use the following configuration data:\n\n```ini\n[tideways_xhprof]\nextension="/path/to/tideways/tideways_xhprof.so"\n```\n\nReleases / Changelog\n====================\n\nSee the [releases](https://github.com/preinheimer/xhgui/releases) for changelogs,\nand release information.\n\nLicense\n=======\n\nCopyright (c) 2013 Mark Story & Paul Reinheimer\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the\n"Software"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n'