b'Laravel MongoDB\n===============\n\n[![Latest Stable Version](http://img.shields.io/github/release/jenssegers/laravel-mongodb.svg)](https://packagist.org/packages/jenssegers/mongodb) [![Total Downloads](http://img.shields.io/packagist/dm/jenssegers/mongodb.svg)](https://packagist.org/packages/jenssegers/mongodb) [![Build Status](http://img.shields.io/travis/jenssegers/laravel-mongodb.svg)](https://travis-ci.org/jenssegers/laravel-mongodb) [![Coverage Status](http://img.shields.io/coveralls/jenssegers/laravel-mongodb.svg)](https://coveralls.io/r/jenssegers/laravel-mongodb?branch=master) [![Donate](https://img.shields.io/badge/donate-paypal-blue.svg)](https://www.paypal.me/jenssegers)\n\nAn Eloquent model and Query builder with support for MongoDB, using the original Laravel API. *This library extends the original Laravel classes, so it uses exactly the same methods.*\n\nTable of contents\n-----------------\n* [Installation](#installation)\n* [Upgrading](#upgrading)\n* [Configuration](#configuration)\n* [Eloquent](#eloquent)\n* [Optional: Alias](#optional-alias)\n* [Query Builder](#query-builder)\n* [Schema](#schema)\n* [Extensions](#extensions)\n* [Troubleshooting](#troubleshooting)\n* [Examples](#examples)\n\nInstallation\n------------\n\nMake sure you have the MongoDB PHP driver installed. You can find installation instructions at http://php.net/manual/en/mongodb.installation.php\n\n**WARNING**: The old mongo PHP driver is not supported anymore in versions >= 3.0.\n\nInstallation using composer:\n\n```\ncomposer require jenssegers/mongodb\n```\n\n### Laravel version Compatibility\n\n Laravel  | Package\n:---------|:----------\n 4.2.x    | 2.0.x\n 5.0.x    | 2.1.x\n 5.1.x    | 2.2.x or 3.0.x\n 5.2.x    | 2.3.x or 3.0.x\n 5.3.x    | 3.1.x or 3.2.x\n 5.4.x    | 3.2.x\n 5.5.x    | 3.3.x\n 5.6.x    | 3.4.x\n 5.7.x    | 3.4.x\n 5.8.x    | 3.5.x\n 6.0.x    | 3.6.x\n\nAnd add the service provider in `config/app.php`:\n\n```php\nJenssegers\\Mongodb\\MongodbServiceProvider::class,\n```\n\nFor usage with [Lumen](http://lumen.laravel.com), add the service provider in `bootstrap/app.php`. In this file, you will also need to enable Eloquent. You must however ensure that your call to `$app->withEloquent();` is **below** where you have registered the `MongodbServiceProvider`:\n\n```php\n$app->register(Jenssegers\\Mongodb\\MongodbServiceProvider::class);\n\n$app->withEloquent();\n```\n\nThe service provider will register a mongodb database extension with the original database manager. There is no need to register additional facades or objects. When using mongodb connections, Laravel will automatically provide you with the corresponding mongodb objects.\n\nFor usage outside Laravel, check out the [Capsule manager](https://github.com/illuminate/database/blob/master/README.md) and add:\n\n```php\n$capsule->getDatabaseManager()->extend(\'mongodb\', function($config, $name)\n{\n    $config[\'name\'] = $name;\n\n    return new Jenssegers\\Mongodb\\Connection($config);\n});\n```\n\nUpgrading\n---------\n\n#### Upgrading from version 2 to 3\n\nIn this new major release which supports the new mongodb PHP extension, we also moved the location of the Model class and replaced the MySQL model class with a trait.\n\nPlease change all `Jenssegers\\Mongodb\\Model` references to `Jenssegers\\Mongodb\\Eloquent\\Model` either at the top of your model files, or your registered alias.\n\n```php\nuse Jenssegers\\Mongodb\\Eloquent\\Model as Eloquent;\n\nclass User extends Eloquent {}\n```\n\nIf you are using hybrid relations, your MySQL classes should now extend the original Eloquent model class `Illuminate\\Database\\Eloquent\\Model` instead of the removed `Jenssegers\\Eloquent\\Model`. Instead use the new `Jenssegers\\Mongodb\\Eloquent\\HybridRelations` trait. This should make things more clear as there is only one single model class in this package.\n\n```php\nuse Jenssegers\\Mongodb\\Eloquent\\HybridRelations;\n\nclass User extends Eloquent {\n\n    use HybridRelations;\n\n    protected $connection = \'mysql\';\n\n}\n```\n\nEmbedded relations now return an `Illuminate\\Database\\Eloquent\\Collection` rather than a custom Collection class. If you were using one of the special methods that were available, convert them to Collection operations.\n\n```php\n$books = $user->books()->sortBy(\'title\');\n```\n\nTesting\n-------\n\nTo run the test for this package, run:\n\n```\ndocker-compose up\n```\n\nConfiguration\n-------------\n\nChange your default database connection name in `config/database.php`:\n\n```php\n\'default\' => env(\'DB_CONNECTION\', \'mongodb\'),\n```\n\nAnd add a new mongodb connection:\n\n```php\n\'mongodb\' => [\n    \'driver\'   => \'mongodb\',\n    \'host\'     => env(\'DB_HOST\', \'localhost\'),\n    \'port\'     => env(\'DB_PORT\', 27017),\n    \'database\' => env(\'DB_DATABASE\'),\n    \'username\' => env(\'DB_USERNAME\'),\n    \'password\' => env(\'DB_PASSWORD\'),\n    \'options\'  => [\n        \'database\' => \'admin\' // sets the authentication database required by mongo 3\n    ]\n],\n```\n\nYou can connect to multiple servers or replica sets with the following configuration:\n\n```php\n\'mongodb\' => [\n    \'driver\'   => \'mongodb\',\n    \'host\'     => [\'server1\', \'server2\'],\n    \'port\'     => env(\'DB_PORT\', 27017),\n    \'database\' => env(\'DB_DATABASE\'),\n    \'username\' => env(\'DB_USERNAME\'),\n    \'password\' => env(\'DB_PASSWORD\'),\n    \'options\'  => [\n\t\t\'replicaSet\' => \'replicaSetName\'\n\t]\n],\n```\n\nAlternatively, you can use MongoDB connection string:\n\n```php\n\'mongodb\' => [\n    \'driver\'   => \'mongodb\',\n    \'dsn\' => env(\'DB_DSN\'),\n    \'database\' => env(\'DB_DATABASE\'),\n],\n```\n\nPlease refer to MongoDB official docs for its URI format: https://docs.mongodb.com/manual/reference/connection-string/\n\nEloquent\n--------\n\nThis package includes a MongoDB enabled Eloquent class that you can use to define models for corresponding collections.\n\n```php\nuse Jenssegers\\Mongodb\\Eloquent\\Model as Eloquent;\n\nclass User extends Eloquent {}\n```\n\nNote that we did not tell Eloquent which collection to use for the `User` model. Just like the original Eloquent, the lower-case, plural name of the class will be used as the collection name unless another name is explicitly specified. You may specify a custom collection (alias for table) by defining a `collection` property on your model:\n\n```php\nuse Jenssegers\\Mongodb\\Eloquent\\Model as Eloquent;\n\nclass User extends Eloquent {\n\n    protected $collection = \'users_collection\';\n\n}\n```\n\n**NOTE:** Eloquent will also assume that each collection has a primary key column named id. You may define a `primaryKey` property to override this convention. Likewise, you may define a `connection` property to override the name of the database connection that should be used when utilizing the model.\n\n```php\nuse Jenssegers\\Mongodb\\Eloquent\\Model as Eloquent;\n\nclass MyModel extends Eloquent {\n\n    protected $connection = \'mongodb\';\n\n}\n```\n\nEverything else (should) work just like the original Eloquent model. Read more about the Eloquent on http://laravel.com/docs/eloquent\n\n### Optional: Alias\n\nYou may also register an alias for the MongoDB model by adding the following to the alias array in `config/app.php`:\n\n```php\n\'Moloquent\'       => Jenssegers\\Mongodb\\Eloquent\\Model::class,\n```\n\nThis will allow you to use the registered alias like:\n\n```php\nclass MyModel extends Moloquent {}\n```\n\nQuery Builder\n-------------\n\nThe database driver plugs right into the original query builder. When using mongodb connections, you will be able to build fluent queries to perform database operations. For your convenience, there is a `collection` alias for `table` as well as some additional mongodb specific operators/operations.\n\n```php\n$users = DB::collection(\'users\')->get();\n\n$user = DB::collection(\'users\')->where(\'name\', \'John\')->first();\n```\n\nIf you did not change your default database connection, you will need to specify it when querying.\n\n```php\n$user = DB::connection(\'mongodb\')->collection(\'users\')->get();\n```\n\nRead more about the query builder on http://laravel.com/docs/queries\n\nSchema\n------\n\nThe database driver also has (limited) schema builder support. You can easily manipulate collections and set indexes:\n\n```php\nSchema::create(\'users\', function($collection)\n{\n    $collection->index(\'name\');\n\n    $collection->unique(\'email\');\n});\n```\n\nSupported operations are:\n\n - create and drop\n - collection\n - hasCollection\n - index and dropIndex (compound indexes supported as well)\n - unique\n - background, sparse, expire, geospatial (MongoDB specific)\n\nAll other (unsupported) operations are implemented as dummy pass-through methods, because MongoDB does not use a predefined schema. Read more about the schema builder on http://laravel.com/docs/schema\n\n### Geospatial indexes\n\nGeospatial indexes are handy for querying location-based documents. They come in two forms: `2d` and `2dsphere`. Use the schema builder to add these to a collection.\n\nTo add a `2d` index:\n\n```php\nSchema::create(\'users\', function($collection)\n{\n    $collection->geospatial(\'name\', \'2d\');\n});\n```\n\nTo add a `2dsphere` index:\n\n```php\nSchema::create(\'users\', function($collection)\n{\n    $collection->geospatial(\'name\', \'2dsphere\');\n});\n```\n\nExtensions\n----------\n\n### Auth\n\nIf you want to use Laravel\'s native Auth functionality, register this included service provider:\n\n```php\n\'Jenssegers\\Mongodb\\Auth\\PasswordResetServiceProvider\',\n```\n\nThis service provider will slightly modify the internal DatabaseReminderRepository to add support for MongoDB based password reminders. If you don\'t use password reminders, you don\'t have to register this service provider and everything else should work just fine.\n\n### Queues\n\nIf you want to use MongoDB as your database backend, change the driver in `config/queue.php`:\n\n```php\n\'connections\' => [\n    \'database\' => [\n        \'driver\' => \'mongodb\',\n        \'table\'  => \'jobs\',\n        \'queue\'  => \'default\',\n        \'expire\' => 60,\n    ],\n```\n\nIf you want to use MongoDB to handle failed jobs, change the database in `config/queue.php`:\n\n```php\n\'failed\' => [\n    \'database\' => \'mongodb\',\n    \'table\'    => \'failed_jobs\',\n    ],\n```\n\nAnd add the service provider in `config/app.php`:\n\n```php\nJenssegers\\Mongodb\\MongodbQueueServiceProvider::class,\n```\n\n### Sentry\n\nIf you want to use this library with [Sentry](https://cartalyst.com/manual/sentry), then check out https://github.com/jenssegers/Laravel-MongoDB-Sentry\n\n### Sessions\n\nThe MongoDB session driver is available in a separate package, check out https://github.com/jenssegers/Laravel-MongoDB-Session\n\nExamples\n--------\n\n### Basic Usage\n\n**Retrieving All Models**\n\n```php\n$users = User::all();\n```\n\n**Retrieving A Record By Primary Key**\n\n```php\n$user = User::find(\'517c43667db388101e00000f\');\n```\n\n**Wheres**\n\n```php\n$users = User::where(\'votes\', \'>\', 100)->take(10)->get();\n```\n\n**Or Statements**\n\n```php\n$users = User::where(\'votes\', \'>\', 100)->orWhere(\'name\', \'John\')->get();\n```\n\n**And Statements**\n\n```php\n$users = User::where(\'votes\', \'>\', 100)->where(\'name\', \'=\', \'John\')->get();\n```\n\n**Using Where In With An Array**\n\n```php\n$users = User::whereIn(\'age\', [16, 18, 20])->get();\n```\n\nWhen using `whereNotIn` objects will be returned if the field is non existent. Combine with `whereNotNull(\'age\')` to leave out those documents.\n\n**Using Where Between**\n\n```php\n$users = User::whereBetween(\'votes\', [1, 100])->get();\n```\n\n**Where null**\n\n```php\n$users = User::whereNull(\'updated_at\')->get();\n```\n\n**Order By**\n\n```php\n$users = User::orderBy(\'name\', \'desc\')->get();\n```\n\n**Offset & Limit**\n\n```php\n$users = User::skip(10)->take(5)->get();\n```\n\n**Distinct**\n\nDistinct requires a field for which to return the distinct values.\n\n```php\n$users = User::distinct()->get([\'name\']);\n// or\n$users = User::distinct(\'name\')->get();\n```\n\nDistinct can be combined with **where**:\n\n```php\n$users = User::where(\'active\', true)->distinct(\'name\')->get();\n```\n\n**Advanced Wheres**\n\n```php\n$users = User::where(\'name\', \'=\', \'John\')->orWhere(function($query)\n    {\n        $query->where(\'votes\', \'>\', 100)\n              ->where(\'title\', \'<>\', \'Admin\');\n    })\n    ->get();\n```\n\n**Group By**\n\nSelected columns that are not grouped will be aggregated with the $last function.\n\n```php\n$users = Users::groupBy(\'title\')->get([\'title\', \'name\']);\n```\n\n**Aggregation**\n\n*Aggregations are only available for MongoDB versions greater than 2.2.*\n\n```php\n$total = Order::count();\n$price = Order::max(\'price\');\n$price = Order::min(\'price\');\n$price = Order::avg(\'price\');\n$total = Order::sum(\'price\');\n```\n\nAggregations can be combined with **where**:\n\n```php\n$sold = Orders::where(\'sold\', true)->sum(\'price\');\n```\n\nAggregations can be also used on subdocuments:\n\n```php\n$total = Order::max(\'suborder.price\');\n...\n```\n\n**NOTE**: this aggreagtion only works with single subdocuments (like embedsOne) not subdocument arrays (like embedsMany)\n\n**Like**\n\n```php\n$user = Comment::where(\'body\', \'like\', \'%spam%\')->get();\n```\n\n**Incrementing or decrementing a value of a column**\n\nPerform increments or decrements (default 1) on specified attributes:\n\n```php\nUser::where(\'name\', \'John Doe\')->increment(\'age\');\nUser::where(\'name\', \'Jaques\')->decrement(\'weight\', 50);\n```\n\nThe number of updated objects is returned:\n\n```php\n$count = User::increment(\'age\');\n```\n\nYou may also specify additional columns to update:\n\n```php\nUser::where(\'age\', \'29\')->increment(\'age\', 1, [\'group\' => \'thirty something\']);\nUser::where(\'bmi\', 30)->decrement(\'bmi\', 1, [\'category\' => \'overweight\']);\n```\n\n**Soft deleting**\n\nWhen soft deleting a model, it is not actually removed from your database. Instead, a deleted_at timestamp is set on the record. To enable soft deletes for a model, apply the SoftDeletingTrait to the model:\n\n```php\nuse Jenssegers\\Mongodb\\Eloquent\\SoftDeletes;\n\nclass User extends Eloquent {\n\n    use SoftDeletes;\n\n    protected $dates = [\'deleted_at\'];\n\n}\n```\n\nFor more information check http://laravel.com/docs/eloquent#soft-deleting\n\n### MongoDB specific operators\n\n**Exists**\n\nMatches documents that have the specified field.\n\n```php\nUser::where(\'age\', \'exists\', true)->get();\n```\n\n**All**\n\nMatches arrays that contain all elements specified in the query.\n\n```php\nUser::where(\'roles\', \'all\', [\'moderator\', \'author\'])->get();\n```\n\n**Size**\n\nSelects documents if the array field is a specified size.\n\n```php\nUser::where(\'tags\', \'size\', 3)->get();\n```\n\n**Regex**\n\nSelects documents where values match a specified regular expression.\n\n```php\nUser::where(\'name\', \'regex\', new \\MongoDB\\BSON\\Regex("/.*doe/i"))->get();\n```\n\n**NOTE:** you can also use the Laravel regexp operations. These are a bit more flexible and will automatically convert your regular expression string to a MongoDB\\BSON\\Regex object.\n\n```php\nUser::where(\'name\', \'regexp\', \'/.*doe/i\')->get();\n```\n\nAnd the inverse:\n\n```php\nUser::where(\'name\', \'not regexp\', \'/.*doe/i\')->get();\n```\n\n**Type**\n\nSelects documents if a field is of the specified type. For more information check: http://docs.mongodb.org/manual/reference/operator/query/type/#op._S_type\n\n```php\nUser::where(\'age\', \'type\', 2)->get();\n```\n\n**Mod**\n\nPerforms a modulo operation on the value of a field and selects documents with a specified result.\n\n```php\nUser::where(\'age\', \'mod\', [10, 0])->get();\n```\n\n**Near**\n\n**NOTE:** Specify coordinates in this order: `longitude, latitude`.\n\n```php\n$users = User::where(\'location\', \'near\', [\n\t\'$geometry\' => [\n        \'type\' => \'Point\',\n\t    \'coordinates\' => [\n\t        -0.1367563,\n            51.5100913,\n        ],\n    ],\n    \'$maxDistance\' => 50,\n]);\n```\n\n**GeoWithin**\n\n```php\n$users = User::where(\'location\', \'geoWithin\', [\n\t\'$geometry\' => [\n        \'type\' => \'Polygon\',\n\t    \'coordinates\' => [[\n            [\n                -0.1450383,\n                51.5069158,\n            ],       \n            [\n                -0.1367563,\n                51.5100913,\n            ],       \n            [\n                -0.1270247,\n                51.5013233,\n            ],  \n            [\n                -0.1450383,\n                51.5069158,\n            ],\n        ]],\n    ],\n]);\n```\n\n**GeoIntersects**\n\n```php\n$locations = Location::where(\'location\', \'geoIntersects\', [\n    \'$geometry\' => [\n        \'type\' => \'LineString\',\n        \'coordinates\' => [\n            [\n                -0.144044,\n                51.515215,\n            ],\n            [\n                -0.129545,\n                51.507864,\n            ],\n        ],\n    ],\n]);\n```\n\n\n**Where**\n\nMatches documents that satisfy a JavaScript expression. For more information check http://docs.mongodb.org/manual/reference/operator/query/where/#op._S_where\n\n### Inserts, updates and deletes\n\nInserting, updating and deleting records works just like the original Eloquent.\n\n**Saving a new model**\n\n```php\n$user = new User;\n$user->name = \'John\';\n$user->save();\n```\n\nYou may also use the create method to save a new model in a single line:\n\n```php\nUser::create([\'name\' => \'John\']);\n```\n\n**Updating a model**\n\nTo update a model, you may retrieve it, change an attribute, and use the save method.\n\n```php\n$user = User::first();\n$user->email = \'john@foo.com\';\n$user->save();\n```\n\n*There is also support for upsert operations, check https://github.com/jenssegers/laravel-mongodb#mongodb-specific-operations*\n\n**Deleting a model**\n\nTo delete a model, simply call the delete method on the instance:\n\n```php\n$user = User::first();\n$user->delete();\n```\n\nOr deleting a model by its key:\n\n```php\nUser::destroy(\'517c43667db388101e00000f\');\n```\n\nFor more information about model manipulation, check http://laravel.com/docs/eloquent#insert-update-delete\n\n### Dates\n\nEloquent allows you to work with Carbon/DateTime objects instead of MongoDate objects. Internally, these dates will be converted to MongoDate objects when saved to the database. If you wish to use this functionality on non-default date fields, you will need to manually specify them as described here: http://laravel.com/docs/eloquent#date-mutators\n\nExample:\n\n```php\nuse Jenssegers\\Mongodb\\Eloquent\\Model as Eloquent;\n\nclass User extends Eloquent {\n\n    protected $dates = [\'birthday\'];\n\n}\n```\n\nWhich allows you to execute queries like:\n\n```php\n$users = User::where(\'birthday\', \'>\', new DateTime(\'-18 years\'))->get();\n```\n\n### Relations\n\nSupported relations are:\n\n - hasOne\n - hasMany\n - belongsTo\n - belongsToMany\n - embedsOne\n - embedsMany\n\nExample:\n\n```php\nuse Jenssegers\\Mongodb\\Eloquent\\Model as Eloquent;\n\nclass User extends Eloquent {\n\n    public function items()\n    {\n        return $this->hasMany(\'Item\');\n    }\n\n}\n```\n\nAnd the inverse relation:\n\n```php\nuse Jenssegers\\Mongodb\\Eloquent\\Model as Eloquent;\n\nclass Item extends Eloquent {\n\n    public function user()\n    {\n        return $this->belongsTo(\'User\');\n    }\n\n}\n```\n\nThe belongsToMany relation will not use a pivot "table", but will push id\'s to a __related_ids__ attribute instead. This makes the second parameter for the belongsToMany method useless. If you want to define custom keys for your relation, set it to `null`:\n\n```php\nuse Jenssegers\\Mongodb\\Eloquent\\Model as Eloquent;\n\nclass User extends Eloquent {\n\n    public function groups()\n    {\n        return $this->belongsToMany(\'Group\', null, \'user_ids\', \'group_ids\');\n    }\n\n}\n```\n\n\nOther relations are not yet supported, but may be added in the future. Read more about these relations on http://laravel.com/docs/eloquent#relationships\n\n### EmbedsMany Relations\n\nIf you want to embed models, rather than referencing them, you can use the `embedsMany` relation. This relation is similar to the `hasMany` relation, but embeds the models inside the parent object.\n\n**REMEMBER**: these relations return Eloquent collections, they don\'t return query builder objects!\n\n```php\nuse Jenssegers\\Mongodb\\Eloquent\\Model as Eloquent;\n\nclass User extends Eloquent {\n\n    public function books()\n    {\n        return $this->embedsMany(\'Book\');\n    }\n\n}\n```\n\nYou can access the embedded models through the dynamic property:\n\n```php\n$books = User::first()->books;\n```\n\nThe inverse relation is auto*magically* available, you don\'t need to define this reverse relation.\n\n```php\n$user = $book->user;\n```\n\nInserting and updating embedded models works similar to the `hasMany` relation:\n\n```php\n$book = new Book([\'title\' => \'A Game of Thrones\']);\n\n$user = User::first();\n\n$book = $user->books()->save($book);\n// or\n$book = $user->books()->create([\'title\' => \'A Game of Thrones\'])\n```\n\nYou can update embedded models using their `save` method (available since release 2.0.0):\n\n```php\n$book = $user->books()->first();\n\n$book->title = \'A Game of Thrones\';\n\n$book->save();\n```\n\nYou can remove an embedded model by using the `destroy` method on the relation, or the `delete` method on the model (available since release 2.0.0):\n\n```php\n$book = $user->books()->first();\n\n$book->delete();\n// or\n$user->books()->destroy($book);\n```\n\nIf you want to add or remove an embedded model, without touching the database, you can use the `associate` and `dissociate` methods. To eventually write the changes to the database, save the parent object:\n\n```php\n$user->books()->associate($book);\n\n$user->save();\n```\n\nLike other relations, embedsMany assumes the local key of the relationship based on the model name. You can override the default local key by passing a second argument to the embedsMany method:\n\n```php\nreturn $this->embedsMany(\'Book\', \'local_key\');\n```\n\nEmbedded relations will return a Collection of embedded items instead of a query builder. Check out the available operations here: https://laravel.com/docs/master/collections\n\n### EmbedsOne Relations\n\nThe embedsOne relation is similar to the embedsMany relation, but only embeds a single model.\n\n```php\nuse Jenssegers\\Mongodb\\Eloquent\\Model as Eloquent;\n\nclass Book extends Eloquent {\n\n    public function author()\n    {\n        return $this->embedsOne(\'Author\');\n    }\n\n}\n```\n\nYou can access the embedded models through the dynamic property:\n\n```php\n$author = Book::first()->author;\n```\n\nInserting and updating embedded models works similar to the `hasOne` relation:\n\n```php\n$author = new Author([\'name\' => \'John Doe\']);\n\n$book = Books::first();\n\n$author = $book->author()->save($author);\n// or\n$author = $book->author()->create([\'name\' => \'John Doe\']);\n```\n\nYou can update the embedded model using the `save` method (available since release 2.0.0):\n\n```php\n$author = $book->author;\n\n$author->name = \'Jane Doe\';\n$author->save();\n```\n\nYou can replace the embedded model with a new model like this:\n\n```php\n$newAuthor = new Author([\'name\' => \'Jane Doe\']);\n$book->author()->save($newAuthor);\n```\n\n### MySQL Relations\n\nIf you\'re using a hybrid MongoDB and SQL setup, you\'re in luck! The model will automatically return a MongoDB- or SQL-relation based on the type of the related model. Of course, if you want this functionality to work both ways, your SQL-models will need use the `Jenssegers\\Mongodb\\Eloquent\\HybridRelations` trait. Note that this functionality only works for hasOne, hasMany and belongsTo relations.\n\nExample SQL-based User model:\n\n```php\nuse Jenssegers\\Mongodb\\Eloquent\\HybridRelations;\n\nclass User extends Eloquent {\n\n    use HybridRelations;\n\n    protected $connection = \'mysql\';\n\n    public function messages()\n    {\n        return $this->hasMany(\'Message\');\n    }\n\n}\n```\n\nAnd the Mongodb-based Message model:\n\n```php\nuse Jenssegers\\Mongodb\\Eloquent\\Model as Eloquent;\n\nclass Message extends Eloquent {\n\n    protected $connection = \'mongodb\';\n\n    public function user()\n    {\n        return $this->belongsTo(\'User\');\n    }\n\n}\n```\n\n### Raw Expressions\n\nThese expressions will be injected directly into the query.\n\n```php\nUser::whereRaw([\'age\' => array(\'$gt\' => 30, \'$lt\' => 40)])->get();\n```\n\nYou can also perform raw expressions on the internal MongoCollection object. If this is executed on the model class, it will return a collection of models. If this is executed on the query builder, it will return the original response.\n\n```php\n// Returns a collection of User models.\n$models = User::raw(function($collection)\n{\n    return $collection->find();\n});\n\n// Returns the original MongoCursor.\n$cursor = DB::collection(\'users\')->raw(function($collection)\n{\n    return $collection->find();\n});\n```\n\nOptional: if you don\'t pass a closure to the raw method, the internal MongoCollection object will be accessible:\n\n```php\n$model = User::raw()->findOne([\'age\' => array(\'$lt\' => 18)]);\n```\n\nThe internal MongoClient and MongoDB objects can be accessed like this:\n\n```php\n$client = DB::getMongoClient();\n$db = DB::getMongoDB();\n```\n\n### MongoDB specific operations\n\n**Cursor timeout**\n\nTo prevent MongoCursorTimeout exceptions, you can manually set a timeout value that will be applied to the cursor:\n\n```php\nDB::collection(\'users\')->timeout(-1)->get();\n```\n\n**Upsert**\n\nUpdate or insert a document. Additional options for the update method are passed directly to the native update method.\n\n```php\nDB::collection(\'users\')->where(\'name\', \'John\')\n                       ->update($data, [\'upsert\' => true]);\n```\n\n**Projections**\n\nYou can apply projections to your queries using the `project` method.\n\n```php\nDB::collection(\'items\')->project([\'tags\' => [\'$slice\' => 1]])->get();\nDB::collection(\'items\')->project([\'tags\' => [\'$slice\' => [3, 7]]])->get();\n```\n\n**Projections with Pagination**\n\n```php\n$limit = 25;\n$projections = [\'id\', \'name\'];\nDB::collection(\'items\')->paginate($limit, $projections);\n```\n\n\n**Push**\n\nAdd items to an array.\n\n```php\nDB::collection(\'users\')->where(\'name\', \'John\')->push(\'items\', \'boots\');\nDB::collection(\'users\')->where(\'name\', \'John\')->push(\'messages\', [\'from\' => \'Jane Doe\', \'message\' => \'Hi John\']);\n```\n\nIf you don\'t want duplicate items, set the third parameter to `true`:\n\n```php\nDB::collection(\'users\')->where(\'name\', \'John\')->push(\'items\', \'boots\', true);\n```\n\n**Pull**\n\nRemove an item from an array.\n\n```php\nDB::collection(\'users\')->where(\'name\', \'John\')->pull(\'items\', \'boots\');\nDB::collection(\'users\')->where(\'name\', \'John\')->pull(\'messages\', [\'from\' => \'Jane Doe\', \'message\' => \'Hi John\']);\n```\n\n**Unset**\n\nRemove one or more fields from a document.\n\n```php\nDB::collection(\'users\')->where(\'name\', \'John\')->unset(\'note\');\n```\n\nYou can also perform an unset on a model.\n\n```php\n$user = User::where(\'name\', \'John\')->first();\n$user->unset(\'note\');\n```\n\n### Query Caching\n\nYou may easily cache the results of a query using the remember method:\n\n```php\n$users = User::remember(10)->get();\n```\n\n*From: http://laravel.com/docs/queries#caching-queries*\n\n### Query Logging\n\nBy default, Laravel keeps a log in memory of all queries that have been run for the current request. However, in some cases, such as when inserting a large number of rows, this can cause the application to use excess memory. To disable the log, you may use the `disableQueryLog` method:\n\n```php\nDB::connection()->disableQueryLog();\n```\n\n*From: http://laravel.com/docs/database#query-logging*\n'