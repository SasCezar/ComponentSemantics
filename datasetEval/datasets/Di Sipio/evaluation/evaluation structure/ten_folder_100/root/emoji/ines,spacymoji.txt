b'spacymoji: emoji for spaCy\n**************************\n\n`spaCy v2.0 <https://spacy.io/usage/v2>`_ extension and pipeline component\nfor adding emoji meta data to ``Doc`` objects. Detects emoji consisting of one\nor more unicode characters, and can optionally merge multi-char emoji (combined\npictures, emoji with skin tone modifiers) into one token. Human-readable emoji\ndescriptions are added as a custom attribute, and an optional lookup table can\nbe provided for your own descriptions. The extension sets the custom ``Doc``,\n``Token`` and ``Span`` attributes ``._.is_emoji``, ``._.emoji_desc``,\n``._.has_emoji`` and ``._.emoji``. You can read more about custom pipeline\ncomponents and extension attributes\n`here <https://spacy.io/usage/processing-pipelines>`_.\n\nEmoji are matched using spaCy\'s ``PhraseMatcher``, and looked up in the data\ntable provided by the `"emoji" package <https://github.com/carpedm20/emoji>`_.\n\n.. image:: https://img.shields.io/github/release/ines/spacymoji.svg?style=flat-square\n    :target: https://github.com/ines/spacymoji/releases\n    :alt: Current Release Version\n\n.. image:: https://img.shields.io/pypi/v/spacymoji.svg?style=flat-square\n    :target: https://pypi.python.org/pypi/spacymoji\n    :alt: pypi Version\n\n\xe2\x8f\xb3 Installation\n===============\n\n``spacymoji`` requires ``spacy`` v2.0.0 or higher.\n\n.. code:: bash\n\n    pip install spacymoji\n\n\xe2\x98\x9d\xef\xb8\x8f Usage\n========\n\nImport the component and initialise it with the shared ``nlp`` object (i.e. an\ninstance of ``Language``), which is used to initialise the ``PhraseMatcher``\nwith the shared vocab, and create the match patterns. Then add the component\nanywhere in your pipeline.\n\n.. code:: python\n\n    import spacy\n    from spacymoji import Emoji\n\n    nlp = spacy.load(\'en\')\n    emoji = Emoji(nlp)\n    nlp.add_pipe(emoji, first=True)\n\n    doc = nlp(u"This is a test \xf0\x9f\x98\xbb \xf0\x9f\x91\x8d\xf0\x9f\x8f\xbf")\n    assert doc._.has_emoji == True\n    assert doc[2:5]._.has_emoji == True\n    assert doc[0]._.is_emoji == False\n    assert doc[4]._.is_emoji == True\n    assert doc[5]._.emoji_desc == u\'thumbs up dark skin tone\'\n    assert len(doc._.emoji) == 2\n    assert doc._.emoji[1] == (u\'\xf0\x9f\x91\x8d\xf0\x9f\x8f\xbf\', 5, u\'thumbs up dark skin tone\')\n\n``spacymoji`` only cares about the token text, so you can use it on a blank\n``Language`` instance (it should work for all\n`available languages <https://spacy.io/usage/models#languages>`_!), or in\na pipeline with a loaded model. If you\'re loading a model and your pipeline\nincludes a tagger, parser and entity recognizer, make sure to add  the emoji\ncomponent as ``first=True``, so the spans are merged right after tokenization,\nand *before* the document is parsed. If your text contains a lot of emoji, this\nmight even give you a nice boost in parser accuracy.\n\nAvailable attributes\n--------------------\n\nThe extension sets attributes on the ``Doc``, ``Span`` and ``Token``. You can\nchange the attribute names on initialisation of the extension. For more details\non custom components and attributes, see the\n`processing pipelines documentation <https://spacy.io/usage/processing-pipelines#custom-components>`_.\n\n====================== ======= ===\n``Token._.is_emoji``   bool    Whether the token is an emoji.\n``Token._.emoji_desc`` unicode A human-readable description of the emoji.\n``Doc._.has_emoji``    bool    Whether the document contains emoji.\n``Doc._.emoji``        list    ``(emoji, index, description)`` tuples of the document\'s emoji.\n``Span._.has_emoji``   bool    Whether the span contains emoji.\n``Span._.emoji``       list    ``(emoji, index, description)`` tuples of the span\'s emoji.\n====================== ======= ===\n\nSettings\n--------\n\nOn initialisation of ``Emoji``, you can define the following settings:\n\n=============== ============ ===\n``nlp``         ``Language`` The shared ``nlp`` object. Used to initialise the matcher with the shared ``Vocab``, and create ``Doc`` match patterns.\n``attrs``       tuple        Attributes to set on the ._ property. Defaults to ``(\'has_emoji\', \'is_emoji\', \'emoji_desc\', \'emoji\')``.\n``pattern_id``  unicode      ID of match pattern, defaults to ``\'EMOJI\'``. Can be changed to avoid ID conflicts.\n``merge_spans`` bool         Merge spans containing multi-character emoji, defaults to ``True``. Will only merge combined emoji resulting in one icon, not sequences.\n``lookup``      dict         Optional lookup table that maps emoji unicode strings to custom descriptions, e.g. translations or other annotations.\n=============== ============ ===\n\n.. code:: python\n\n    emoji = Emoji(nlp, attrs=(\'has_e\', \'is_e\', \'e_desc\', \'e\'), lookup={u\'\xf0\x9f\x91\xa8\xe2\x80\x8d\xf0\x9f\x8e\xa4\': u\'David Bowie\'})\n    nlp.add_pipe(emoji)\n    doc = nlp(u"We can be \xf0\x9f\x91\xa8\xe2\x80\x8d\xf0\x9f\x8e\xa4 heroes")\n    assert doc[3]._.is_e\n    assert doc[3]._.e_desc == u\'David Bowie\'\n\n\xf0\x9f\x9b\xa3 Roadmap\n==========\n\nThis extension is still experimental, but here are some features that might\nbe cool to add in the future:\n\n* **Add match patterns and attributes for emoji shortcodes**, e.g. ``:+1:``. The shortcodes could optionally be merged into one token, and receive a ``NORM`` attribute with the unicode emoji. The ``NORM`` is used as a feature for training, so ``:+1:`` and \xf0\x9f\x91\x8d would automatically receive similar representations.\n\n* **Add support for the Unicode Emoji Annotations project**. The JavaScript `package <https://github.com/dematerializer/unicode-emoji-annotations>`_ also comes with `pre-compiled JSON data <https://github.com/dematerializer/unicode-emoji-annotations/tree/master/res>`_, including both standardised and community-contributed annotations in English and German.\n'