b'# Description\n\nAn efficient and scalable library for inputing and displaying gif or @mention on graph-text mixed TextView/EditText\n\n## ScreenShot\n\n<img src="artworks/fullSp.gif" width = "240" height = "400" alt="ScreenShot"  /><img src="artworks/emojiSp.gif" width = "240" height = "400" alt="ScreenShot"  />\n\n## feature\n\n- [x] fully removed special content\n- [x] part removed special content\n- [x] custom style \n- [x] show gif on text\n- [x] load gif with AndroidGifDrawable\n- [x] load gif with Gidle\n\n## todo \n\n- [ ] load gif with Fresco\n- [ ] more styles of ImageSpan\n\n## change log  \n\n* 1.0.1-1.0.3\n    * fix bug\n\n* 1.0.0 \n    * use more elegant implementation of @mention\xef\xbc\x88special thanks to [iYaoy](https://github.com/iYaoy/easy_at)\xef\xbc\x89\n    * clearer package structure \n    * library for supporting  Glide/AndroidGifDrawable \n# Usage\n\n## Gradle  \n\n* root build.gradle\n\n```\n\tallprojects {\n\t\trepositories {\n\t\t\t...\n\t\t\tmaven { url \'https://jitpack.io\' }\n\t\t}\n\t}\n```\n* dependency\n\n[![](https://jitpack.io/v/sunhapper/SpEditTool.svg)](https://jitpack.io/#sunhapper/SpEditTool)\n```\ndependencies {\n\t        implementation \'com.github.sunhapper.SpEditTool:SpEditText:{last version}\'\n\t        //help to create gif drawable use Glide\n\t        implementation \'com.github.sunhapper.SpEditTool:SpGlideDrawable:{last version}\'\n\t        //help to create gif drawable use AndroidGifDrawable\n\t        implementation \'com.github.sunhapper.SpEditTool:SpGifDrawable:{last version}\'\n\t}\n```\n\n## xml\n\nEditText\n* CustomInputConnectionWrapper to accept keyEvent\xef\xbc\x8cbecause setOnKeyListener  may not react KeyEvent when use Google input method\n* SpanChangedWatcher to handle @mention content\n* GifWatcher to display gif on text\n```\n<com.sunhapper.x.spedit.view.SpXEditText\n    android:layout_width="match_parent"\n    android:layout_height="wrap_content"/>\n```\nTextView\n```\n<com.sunhapper.x.spedit.view.SpXTextView\n    android:layout_width="match_parent"\n    android:layout_height="wrap_content"/>\n```\n\n## java\n\n* create @mention Spannable\n```\n//IntegratedSpan will be fully removed\npublic class MentionUser implements IntegratedSpan {\n    public String name;\n    public long id;\n\n    public Spannable getSpannableString() {\n        SpannableString spannableString = new SpannableString(getDisplayText());\n        spannableString.setSpan(new ForegroundColorSpan(Color.MAGENTA), 0, spannableString.length(),\n                Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);\n        spannableString.setSpan(this, 0, spannableString.length(),\n                Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);\n        SpannableStringBuilder stringBuilder = new SpannableStringBuilder();\n        return stringBuilder.append(spannableString).append(" ");\n    }\n}\n```\n\n\n* delete style span when BreakableSpan was broken  \n```\n//BreakableSpan can be  part removed\npublic class Topic implements BreakableSpan {\n\n    ...\n    /**\n     * @return true the BreakableSpan will be removed\n     * you can remove custom style span when content broken\n     */\n    @Override\n    public boolean isBreak(Spannable text) {\n        int spanStart = text.getSpanStart(this);\n        int spanEnd = text.getSpanEnd(this);\n        boolean isBreak = spanStart >= 0 && spanEnd >= 0 && !text.subSequence(spanStart, spanEnd).toString().equals(\n                getDisplayText());\n        if (isBreak && styleSpan != null) {\n            text.removeSpan(styleSpan);\n            styleSpan = null;\n        }\n        return isBreak;\n    }\n}\n```\n\n* load gif with AndroidGifDrawable  \n```\nDrawable drawable = new TextGifDrawable(emojiconFile);\nSpannable spannable = SpUtil.createGifDrawableSpan(gifDrawable,"text");\n```\n\n* load gif with Glide\n```\n//placeholder drawable\nGifDrawable gifDrawable = new TextGifDrawable(getResources(), R.drawable.a);\nProxyDrawable proxyDrawable = new ProxyDrawable();\nGlideApp.with(this)\n        .load(gifurl)\n        .placeholder(gifDrawable)\n        .into(new DrawableTarget(proxyDrawable));\nreturn SpUtil.createResizeGifDrawableSpan(proxyDrawable, "text");\n```\n\n* custom Factory  \n    * you can create your own SpanWatcher and Spannable.Factory/Editable.Factory \n    * use`setSpannableFactory/setEditableFactory`instead of using SpXTextView or SpXEditText\n\n## proguard\n\n```\n-keep class com.sunhapper.x.spedit.**{*;}\n```\n\nmore detail info and guidance\xef\xbc\x8cplease see the app demo\n\n[\xe4\xb8\xad\xe6\x96\x87\xe6\x96\x87\xe6\xa1\xa3](./README_CN.md)\n\n> welcome to star\xef\xbc\x8cPR and issue\n'