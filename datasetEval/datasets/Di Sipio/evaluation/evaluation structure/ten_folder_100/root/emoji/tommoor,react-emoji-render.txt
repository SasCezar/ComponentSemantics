b'[![npm version](https://badge.fury.io/js/react-emoji-render.svg)](https://badge.fury.io/js/react-emoji-render) [![CircleCI](https://circleci.com/gh/tommoor/react-emoji-render.svg?style=svg)](https://circleci.com/gh/tommoor/react-emoji-render)\n\n# react-emoji-render\n\nNormalize and render emoji\'s the way your users expect.\n\n- Supports unicode emoji characters\n- Supports emoticons such as :) :x :/\n- Supports slack-style emoji names such as `:smile:`\n- Choose between native, twemoji, emojione or custom image sets.\n- Add custom styles when text contains only emoji (to make it bigger, of course)\n\n[Live Demo on CodeSandbox](https://codesandbox.io/s/stoic-leakey-eo51r)\n\n## Installation\n\nInstall with your favorite package manager:\n```\nnpm install react-emoji-render --save\n```\n```\nyarn add react-emoji-render\n```\n\n## Basic Usage\n\nBy default the component will normalize all of the different emoji notations to\nnative unicode characters.\n\n```javascript\nimport Emoji from \'react-emoji-render\';\n\n<Emoji text="This \xe2\x9d\xa4\xef\xb8\x8f sentence includes :+1: a variety of emoji types :)" />\n```\n\n### Twemoji\n\n[Twemoji](https://github.com/twitter/twemoji) is an emoji set designed by Twitter,\nyou can use the included `Twemoji` component to render emoji images in this style.\n\n```javascript\nimport { Twemoji } from \'react-emoji-render\';\n\n<Twemoji text="This \xe2\x9d\xa4\xef\xb8\x8f sentence includes :+1: a variety of emoji types :)" />\n\n// or, for svg images:\n<Twemoji svg text="This \xe2\x9d\xa4\xef\xb8\x8f sentence includes :+1: a variety of emoji types :)" />\n```\n\n### Emojione\n\n[Emojione](https://github.com/Ranks/emojione) is a great looking open source emoji set,\nyou can use the included `Emojione` component to render emoji images in this style.\n\n```javascript\nimport { Emojione } from \'react-emoji-render\';\n\n<Emojione text="This \xe2\x9d\xa4\xef\xb8\x8f sentence includes :+1: a variety of emoji types :)" />\n\n// or, for svg images:\n<Emojione svg text="This \xe2\x9d\xa4\xef\xb8\x8f sentence includes :+1: a variety of emoji types :)" />\n\n// or, for Emojione v4\n<EmojioneV4 text="This \xe2\x9d\xa4\xef\xb8\x8f sentence includes :+1: a variety of emoji types :)" />\n// note: only png supported -->\n// https://github.com/emojione/emojione-assets/issues/2\n\n// in v4 size prop can be set at 32, 64 (default) or 128\n<EmojioneV4 size={32} text="This \xe2\x9d\xa4\xef\xb8\x8f sentence includes :+1: a variety of emoji types :)" />\n```\n\n## Advanced Usage\n\n### Only Emoji\n\nThe className passed as the `onlyEmojiClassName` prop is added when the provided\ntext contains only three or less emoji characters. This allows you to add custom\nstyles in this scenario. For example:\n\n```javascript\n<Emoji text=":+1:" onlyEmojiClassName="make-emojis-large" />\n```\n\n### Array Output\n\nIf you want to do further processing on the output, for example parsing HTML then\nit may be useful to not have the normalized emojis be wrapped in a component.\n\n```javascript\nimport { toArray } from \'react-emoji-render\';\n\n// content is an array of text and emoji components, you can now loop through this\n// array and perform further processing. Avoid using `dangerouslySetInnerHTML`!\nconst content = toArray("This \xe2\x9d\xa4\xef\xb8\x8f sentence includes :+1: a variety of emoji types :)");\n```\n\nThen, for example, you can parse all the text and emojis in a single string like the following:\n\n```javascript\nconst parseEmojis = value => {\n  const emojisArray = toArray(value);\n  \n  // toArray outputs React elements for emojis and strings for other\n  const newValue = emojisArray.reduce((previous, current) => {\n    if (typeof current === "string") {\n      return previous + current;\n    }\n    return previous + current.props.children;\n  }, "");\n  \n  return newValue;\n};\n\nparseEmojis(":)hello"); // => "\xf0\x9f\x98\x83hello"\n```\n\n\n### Custom Images\n\nIf you wish to use a custom emoji set / location then you can pass options into\nthe props. One way to achive this is to create a wrapping component which provides \nyour options and exposes a new component, something like:\n\n```javascript\nimport Emoji from \'react-emoji-render\';\n\nfunction MyEmojiRenderer({children, ...rest}) {\n  const options = {\n    baseUrl: \'https://mycustom.cdn.com/emojis/\',\n    ext: \'svg\'\n  };\n\n  return (\n    <Emoji options={options} {...rest} />\n  );\n}\n```\n\nYou can then use the new component:\n\n```javascript\n<MyEmojiRenderer text="This \xe2\x9d\xa4\xef\xb8\x8f sentence includes :+1: a variety of emoji types :)" />\n```\n'