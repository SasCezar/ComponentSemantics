b'# Emoji\n\nA simple library to add Emoji support to your Android app. In a PopupWindow Emojis can be chosen. In order to edit and display text with Emojis this library provides public APIs: [`EmojiEditText`](emoji/src/main/java/com/vanniktech/emoji/EmojiEditText.java), [`EmojiTextView`](emoji/src/main/java/com/vanniktech/emoji/EmojiTextView.java) & [`EmojiButton`](emoji/src/main/java/com/vanniktech/emoji/EmojiButton.java).\n\nThe library has 3 different providers to choose from ([iOS](#ios-emojis), [Google](#google) & [Twitter](#twitter)).\n\n## iOS Emojis\n\n<img src="./fastlane/metadata/android/en-US/images/phoneScreenshots/ios_1_1498998365491.png" alt="Normal Keyboard" width="270"><img src="./fastlane/metadata/android/en-US/images/phoneScreenshots/ios_2_1498998367998.png" alt="Emoji Keyboard" width="270" hspace="20"><img src="./fastlane/metadata/android/en-US/images/phoneScreenshots/ios_3_1498998369550.png" alt="Recent Emojis" width="270">\n\nFor getting the above iOS Emojis simply add the dependency and code below.\n\n```groovy\nimplementation \'com.vanniktech:emoji-ios:0.6.0\'\n```\n\nAnd install the provider (preferably in your Application class):\n\n```java\n// This line needs to be executed before any usage of EmojiTextView, EmojiEditText or EmojiButton.\nEmojiManager.install(new IosEmojiProvider());\n```\n\n## Google\n\n<img src="./fastlane/metadata/android/en-US/images/phoneScreenshots/google_1_1498998373883.png" alt="Normal Keyboard" width="270"><img src="./fastlane/metadata/android/en-US/images/phoneScreenshots/google_2_1498998376865.png" alt="Emoji Keyboard" width="270" hspace="20"><img src="./fastlane/metadata/android/en-US/images/phoneScreenshots/google_3_1498998378352.png" alt="Recent Emojis" width="270">\n\nFor getting the above Google Emojis simply add the dependency and code below.\n\n```groovy\nimplementation \'com.vanniktech:emoji-google:0.6.0\'\n```\n\nAnd install the provider (preferably in your Application class):\n\n```java\n// This line needs to be executed before any usage of EmojiTextView, EmojiEditText or EmojiButton.\nEmojiManager.install(new GoogleEmojiProvider());\n```\n\n## Twitter\n\n<img src="./fastlane/metadata/android/en-US/images/phoneScreenshots/twitter_1_1498998347702.png" alt="Normal Keyboard" width="270"><img src="./fastlane/metadata/android/en-US/images/phoneScreenshots/twitter_2_1498998350492.png" alt="Emoji Keyboard" width="270" hspace="20"><img src="./fastlane/metadata/android/en-US/images/phoneScreenshots/twitter_3_1498998352130.png" alt="Recent Emojis" width="270">\n\nFor getting the above Twitter Emojis simply add the dependency and code below.\n\n```groovy\nimplementation \'com.vanniktech:emoji-twitter:0.6.0\'\n```\n\nAnd install the provider (preferably in your Application class):\n\n```java\n// This line needs to be executed before any usage of EmojiTextView, EmojiEditText or EmojiButton.\nEmojiManager.install(new TwitterEmojiProvider());\n```\n\n### Custom Emojis\n\nIf you want to display your own Emojis you can create your own implementation of [`EmojiProvider`](emoji/src/main/java/com/vanniktech/emoji/EmojiProvider.java) and pass it to `EmojiManager.install`.\n\nAll of the core API lays in, which is being pulled in automatically by the provided implementations ([iOS](#ios-emojis), [Google](#google) & [Twitter](#twitter)):\n\n```groovy\nimplementation \'com.vanniktech:emoji:0.6.0\'\n```\n\n### Custom EditText\n\nIf you want to add the emoji support to your existing `EditText`, you only have to call `EmojiManager.getInstance().replaceWithImages` inside `onTextChanged`.\nAn example can be seen on the default `EditText` implementation: `EmojiEditText`.\n\n---\n\n## Inserting Emojis\n\nDeclare your [`EmojiEditText`](emoji/src/main/java/com/vanniktech/emoji/EmojiEditText.java) in your layout xml file.\n\n```xml\n<com.vanniktech.emoji.EmojiEditText\n  android:id="@+id/emojiEditText"\n  android:layout_width="match_parent"\n  android:layout_height="wrap_content"\n  android:imeOptions="actionSend"\n  android:inputType="textCapSentences|textMultiLine"\n  android:maxLines="3"/>\n```\n\nTo open the [`EmojiPopup`](emoji/src/main/java/com/vanniktech/emoji/EmojiPopup.java) execute the code below:\n\n```java\nfinal EmojiPopup emojiPopup = EmojiPopup.Builder.fromRootView(rootView).build(emojiEditText);\nemojiPopup.toggle(); // Toggles visibility of the Popup.\nemojiPopup.dismiss(); // Dismisses the Popup.\nemojiPopup.isShowing(); // Returns true when Popup is showing.\n```\n\nThe `rootView` is the rootView of your layout xml file which will be used for calculating the height of the keyboard.\n`emojiEditText` is the [`EmojiEditText`](emoji/src/main/java/com/vanniktech/emoji/EmojiEditText.java) that you declared in your layout xml file.\n\n**Note: Instantiate the `EmojiPopup` as early as possible in the lifecycle (e.g. in `onCreate` of your `Activity` or `onViewCreated` in your `Fragment`), otherwise the keyboard detection might not work as expected.**\n\n### Displaying Emojis\n\n```xml\n<com.vanniktech.emoji.EmojiTextView\n  android:id="@+id/emojiTextView"\n  android:layout_width="wrap_content"\n  android:layout_height="wrap_content"/>\n```\n\nJust use the [`EmojiTextView`](emoji/src/main/java/com/vanniktech/emoji/EmojiTextView.java) and call `setText` with the String that contains Unicode encoded Emojis. To change the size of the displayed Emojis use the `lineHeight` property from TextView.\n\n## Listeners\n\nThe [`EmojiPopup`](emoji/src/main/java/com/vanniktech/emoji/EmojiPopup.java) builder allows you to declare several listeners.\n\n```java\nsetOnSoftKeyboardCloseListener(OnSoftKeyboardCloseListener listener);\nsetOnEmojiClickListener(OnEmojiClickListener listener);\nsetOnSoftKeyboardOpenListener(OnSoftKeyboardOpenListener listener);\nsetOnEmojiPopupShownListener(OnEmojiPopupShownListener listener);\nsetOnEmojiPopupDismissListener(OnEmojiPopupDismissListener listener);\nsetOnEmojiBackspaceClickListener(OnEmojiBackspaceClickListener listener);\n```\n\n### Custom Recent Emoji implementation\n\nYou can pass your own implementation of the recent Emojis. Just let one of your classes implement the [`RecentEmoji`](emoji/src/main/java/com/vanniktech/emoji/RecentEmoji.java) interface and pass it when you\'re building the [`EmojiPopup`](emoji/src/main/java/com/vanniktech/emoji/EmojiPopup.java):\n\n```java\nsetRecentEmoji(yourClassThatImplementsRecentEmoji)\n```\n\nIf no instance or a null instance is set the [default implementation](./emoji/src/main/java/com/vanniktech/emoji/RecentEmojiManager.java) will be used.\n\n### Custom Variant Emoji implementation\n\nYou can pass your own implementation of the variant Emojis. Just let one of your classes implement the [`VariantEmoji`](emoji/src/main/java/com/vanniktech/emoji/VariantEmoji.java) interface and pass it when you\'re building the [`EmojiPopup`](emoji/src/main/java/com/vanniktech/emoji/EmojiPopup.java):\n\n```java\nsetVariantEmoji(yourClassThatImplementsVariantEmoji)\n```\n\nIf no instance or a null instance is set the [default implementation](./emoji/src/main/java/com/vanniktech/emoji/VariantEmojiManager.java) will be used.\n\n## Animations\n\n### Custom keyboard enter and exit animations\n\nYou can pass your own animation style for enter and exit transitions of the Emoji keyboard while you\'re building the [`EmojiPopup`](emoji/src/main/java/com/vanniktech/emoji/EmojiPopup.java):\n\n```java\nsetKeyboardAnimationStyle(R.style.emoji_fade_animation_style);\n```\n\nIf no style is set the keyboard will appear and exit as a regular PopupWindow.\nThis library currently ships with two animation styles as an example:\n\n- R.style.emoji_slide_animation_style\n- R.style.emoji_fade_animation_style\n\n### Custom page transformers\n\nYou can pass your own Page Transformer for the Emoji keyboard View Pager while you\'re building the [`EmojiPopup`](emoji/src/main/java/com/vanniktech/emoji/EmojiPopup.java):\n\n```java\nsetPageTransformer(new MagicTransformer());\n```\n\nIf no transformer is set ViewPager will behave as its usual self. Please do note that this library currently does not ship any example Page Transformers.\n\n# Snapshots\n\nThis library is also distributed as a SNAPSHOT if you like to check out the latest features.\n\n> Note: The API is not stable and may change and break your code at any time if you use a SNAPSHOT.\n\nAdd this to your repositories:\n\n```groovy\nmaven { url "https://oss.sonatype.org/content/repositories/snapshots" }\n```\n\nAnd **one** of these to your dependencies:\n\n```groovy\nimplementation \'com.vanniktech:emoji-ios:0.7.0-SNAPSHOT\'\nimplementation \'com.vanniktech:emoji-google:0.7.0-SNAPSHOT\'\nimplementation \'com.vanniktech:emoji-twitter:0.7.0-SNAPSHOT\'\n```\n\n# Proguard\n\nNo configuration needed.\n\n# License\n\nCopyright (C) 2016 - Niklas Baudy, Ruben Gees, Mario \xc4\x90ani\xc4\x87 and contributors\n\nLicensed under the Apache License, Version 2.0\n'