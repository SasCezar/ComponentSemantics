b'# Emojisum\n[![Build Status](https://travis-ci.org/emojisum/emojisum.svg?branch=master)](https://travis-ci.org/emojisum/emojisum)\n\n:pray: :paperclip: Emoji that checksum! :tada: :poop:\n\nA curated list of 256 emojis that are not entirely similar.\nUsing http://www.webpagefx.com/tools/emoji-cheat-sheet/ and http://www.unicode.org/emoji/charts/full-emoji-list.html to compare them.\nWith 256 as that is 8bit/1byte, and the hexadecimal output that is 2 hex characters.\n\nSo 2 hex positions are 1 emoji!\nWould you rather compare 60 hexadecimal characters or only 30 emoji?! :smiley_cat:\n\n## Specification\n\nFor information on the draft for broader practice, see [the draft](./emoji/README.md).\nPerma-URL:\n- [Draft](https://github.com/emojisum/emojisum/blob/master/emoji/README.md)\n- [JSON doc](https://raw.githubusercontent.com/emojisum/emojisum/master/emoji/emojimap.json)\n\n## Tool\n\n### build\n\n```bash\ngo get github.com/emojisum/emojisum\n```\n\n### usage\n\nThis uses [`github.com/kyokomi/emoji`](https://github.com/kyokomi/emoji) to print to the console, but also gives the string ouptut for easy pasting to github/markdown.\n\n```bash\n$> emojisum main.go \nSHA1(main.go)=  14b09535217ca8f5f47f4665e2266e686f0728b4\nSHA1(main.go)=  :bird::red_car::on::crystal_ball::calendar::lemon::pray::warning::violin::lollipop::facepunch::hearts::tm::children_crossing::hourglass::heavy_plus_sign::house::ant::clap::rocket:\nSHA1(main.go)=  \xf0\x9f\x90\xa6 \xf0\x9f\x9a\x97 \xf0\x9f\x94\x9b \xf0\x9f\x94\xae \xf0\x9f\x93\x86 \xf0\x9f\x8d\x8b \xf0\x9f\x99\x8f \xe2\x9a\xa0\xef\xb8\x8f\xf0\x9f\x8e\xbb \xf0\x9f\x8d\xad \xf0\x9f\x91\x8a \xe2\x99\xa5\xef\xb8\x8f\xe2\x84\xa2\xef\xb8\x8f\xf0\x9f\x9a\xb8 \xe2\x8c\x9b\xef\xb8\x8f\xe2\x9e\x95 \xf0\x9f\x8f\xa0 \xf0\x9f\x90\x9c \xf0\x9f\x91\x8f \xf0\x9f\x9a\x80 \n```\n\nLike so!\n\nSHA1(main.go)=  :bird::red_car::on::crystal_ball::calendar::lemon::pray::warning::violin::lollipop::facepunch::hearts::tm::children_crossing::hourglass::heavy_plus_sign::house::ant::clap::rocket:\n\n\n### pass in the checksums\n\nRather than relying on this simple tool to do the checksum itself, you will likely want to rely on OpenSSL or coreutils for checksumming.\n`emojisum` can just take those formats on stdin:\n\n```bash\n$> sha1sum main.go | emojisum -pg\n7656835947b4c6da272023c56b6f2529511bf88b  main.go\n:jp::gb::metal::goat::family::rocket::smiley_cat::swimmer::chocolate_bar::cactus::candy::smile::honeybee::house::cherries::cloud::fries::bow::wavy_dash::musical_score:  main.go\n\xf0\x9f\x87\xaf\xf0\x9f\x87\xb5 \xf0\x9f\x87\xac\xf0\x9f\x87\xa7 \xf0\x9f\xa4\x98 \xf0\x9f\x90\x90 \xf0\x9f\x91\xaa \xf0\x9f\x9a\x80 \xf0\x9f\x98\xba \xf0\x9f\x8f\x8a \xf0\x9f\x8d\xab \xf0\x9f\x8c\xb5 \xf0\x9f\x8d\xac \xf0\x9f\x98\x84 \xf0\x9f\x90\x9d \xf0\x9f\x8f\xa0 \xf0\x9f\x8d\x92 \xe2\x98\x81\xef\xb8\x8f\xf0\x9f\x8d\x9f \xf0\x9f\x99\x87 \xe3\x80\xb0\xef\xb8\x8f \xf0\x9f\x8e\xbc   main.go\n```\n\nLike so: \n\n\xf0\x9f\x87\xaf\xf0\x9f\x87\xb5 \xf0\x9f\x87\xac\xf0\x9f\x87\xa7 \xf0\x9f\xa4\x98 \xf0\x9f\x90\x90 \xf0\x9f\x91\xaa \xf0\x9f\x9a\x80 \xf0\x9f\x98\xba \xf0\x9f\x8f\x8a \xf0\x9f\x8d\xab \xf0\x9f\x8c\xb5 \xf0\x9f\x8d\xac \xf0\x9f\x98\x84 \xf0\x9f\x90\x9d \xf0\x9f\x8f\xa0 \xf0\x9f\x8d\x92 \xe2\x98\x81\xef\xb8\x8f\xf0\x9f\x8d\x9f \xf0\x9f\x99\x87 \xe3\x80\xb0\xef\xb8\x8f \xf0\x9f\x8e\xbc   main.go\n\n\n```bash\n$> openssl sha1 main.go |emojisum -pb\nSHA1(main.go)= 7656835947b4c6da272023c56b6f2529511bf88b\nSHA1(main.go)= :jp::gb::metal::goat::family::rocket::smiley_cat::swimmer::chocolate_bar::cactus::candy::smile::honeybee::house::cherries::cloud::fries::bow::wavy_dash::musical_score:\nSHA1(main.go)= \xf0\x9f\x87\xaf\xf0\x9f\x87\xb5 \xf0\x9f\x87\xac\xf0\x9f\x87\xa7 \xf0\x9f\xa4\x98 \xf0\x9f\x90\x90 \xf0\x9f\x91\xaa \xf0\x9f\x9a\x80 \xf0\x9f\x98\xba \xf0\x9f\x8f\x8a \xf0\x9f\x8d\xab \xf0\x9f\x8c\xb5 \xf0\x9f\x8d\xac \xf0\x9f\x98\x84 \xf0\x9f\x90\x9d \xf0\x9f\x8f\xa0 \xf0\x9f\x8d\x92 \xe2\x98\x81\xef\xb8\x8f\xf0\x9f\x8d\x9f \xf0\x9f\x99\x87 \xe3\x80\xb0\xef\xb8\x8f \xf0\x9f\x8e\xbc \n```\n\nAnd like so:\n\nSHA1(main.go)= \xf0\x9f\x87\xaf\xf0\x9f\x87\xb5 \xf0\x9f\x87\xac\xf0\x9f\x87\xa7 \xf0\x9f\xa4\x98 \xf0\x9f\x90\x90 \xf0\x9f\x91\xaa \xf0\x9f\x9a\x80 \xf0\x9f\x98\xba \xf0\x9f\x8f\x8a \xf0\x9f\x8d\xab \xf0\x9f\x8c\xb5 \xf0\x9f\x8d\xac \xf0\x9f\x98\x84 \xf0\x9f\x90\x9d \xf0\x9f\x8f\xa0 \xf0\x9f\x8d\x92 \xe2\x98\x81\xef\xb8\x8f\xf0\x9f\x8d\x9f \xf0\x9f\x99\x87 \xe3\x80\xb0\xef\xb8\x8f \xf0\x9f\x8e\xbc \n\n\n## Library\n\nUse the golang library to access the mapped emoji words:\n\n```golang\npackage main\n\nimport (\n  "fmt"\n\n  "github.com/emojisum/emojisum/emoji"\n)\n\nfunc main() {\n  for i := 0; i < 255; i++ {\n    fmt.Printf("%d (%2.2x):\\n", i, i)\n    for _, word := range emoji.Map(byte(i)) {\n      fmt.Printf("  - %s\\n", emoji.CodepointToUnicode(word))\n    }\n  }\n}\n```\n\n## Contributed Implementations\n\n### Rust\n\nIn `./contrib/emojisum-rs/` you\'ll find a rust library for emojisum.\n\n#### Build\n\n```shell\ncd ./contrib/emojisum-rs/\ncargo build\n```\n\n#### Test\n\n```shell\ncargo test\n```\n'