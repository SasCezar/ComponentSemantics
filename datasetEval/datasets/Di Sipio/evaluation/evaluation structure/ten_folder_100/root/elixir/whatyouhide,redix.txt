b'# Redix\n\n[![Build Status](https://travis-ci.org/whatyouhide/redix.svg?branch=master)](https://travis-ci.org/whatyouhide/redix)\n[![Hex.pm](https://img.shields.io/hexpm/v/redix.svg)](https://hex.pm/packages/redix)\n\n> Fast, pipelined, resilient Redis client for Elixir.\n\n![Cover image](http://i.imgur.com/ZG2RXsb.png)\n\nRedix is a [Redis][redis] client written in pure Elixir with focus on speed, correctness, and resiliency (that is, being able to automatically reconnect to Redis in case of network errors).\n\nThis README refers to the `master` branch of Redix, not the latest released version on Hex. Make sure to check [the documentation](http://hexdocs.pm/redix) for the version you\'re using.\n\n## Features\n\n  * Idiomatic interface for sending commands to Redis\n  * Pipelining\n  * Resiliency (automatic reconnections)\n  * Pub/Sub\n  * SSL\n  * Redis Sentinel\n\n## Installation\n\nAdd the `:redix` dependency to your `mix.exs` file. If you plan on connecting to a Redis server [over SSL][docs-ssl] you may want to add the optional [`:castore`][castore] dependency as well:\n\n```elixir\ndefp deps() do\n  [\n    {:redix, ">= 0.0.0"},\n    {:castore, ">= 0.0.0"}\n  ]\nend\n```\n\nThen, run `mix deps.get` in your shell to fetch the new dependencies.\n\n## Usage\n\nRedix is simple: it doesn\'t wrap Redis commands with Elixir functions. It only provides functions to send any Redis command to the Redis server. A Redis *command* is expressed as a list of strings making up the command and its arguments.\n\nConnections are started via `start_link/0,1,2`:\n\n```elixir\n{:ok, conn} = Redix.start_link(host: "example.com", port: 5000)\n{:ok, conn} = Redix.start_link("redis://localhost:6379/3", name: :redix)\n```\n\nCommands can be sent using `Redix.command/2,3`:\n\n```elixir\nRedix.command(conn, ["SET", "mykey", "foo"])\n#=> {:ok, "OK"}\nRedix.command(conn, ["GET", "mykey"])\n#=> {:ok, "foo"}\n```\n\nPipelines are just lists of commands sent all at once to Redis for which Redis replies with a list of responses. They can be used in Redix via `Redix.pipeline/2,3`:\n\n```elixir\nRedix.pipeline(conn, [["INCR", "foo"], ["INCR", "foo"], ["INCRBY", "foo", "2"]])\n#=> {:ok, [1, 2, 4]}\n```\n\n`Redix.command/2,3` and `Redix.pipeline/2,3` always return `{:ok, result}` or `{:error, reason}`. If you want to access the result directly and raise in case there\'s an error, bang! variants are provided:\n\n```elixir\nRedix.command!(conn, ["PING"])\n#=> "PONG"\n\nRedix.pipeline!(conn, [["SET", "mykey", "foo"], ["GET", "mykey"]])\n#=> ["OK", "foo"]\n```\n\n#### Resiliency\n\nRedix is resilient against network errors. For example, if the connection to Redis drops, Redix will automatically try to reconnect periodically at a given "backoff" interval. Look at the documentation for the `Redix` module and at the ["Reconnections" page][docs-reconnections] in the documentation for more information on the available options and on the exact reconnection behaviour.\n\n#### Redis Sentinel\n\nRedix supports [Redis Sentinel][redis-sentinel] out of the box. You can specify a list of sentinels to connect to when starting a `Redix` (or `Redix.PubSub`) connection. Every time that connection will need to connect to a Redis server (the first time or after a disconnection), it will try to connect to one of the sentinels in order to ask that sentinel for the current primary or a replica.\n\n```elixir\nsentinels = ["redis://sent1.example.com:26379", "redis://sent2.example.com:26379"]\n{:ok, primary} = Redix.start_link(sentinel: [sentinels: sentinels, group: "main"])\n```\n\n##### Terminology\n\nRedix doesn\'t support the use of the terms "master" and "slave" that are usually used with Redis Sentinel. I don\'t think those are good terms to use, period. Instead, Redix uses the terms "primary" and "replica". If you\'re interested in the discussions around this, [this][redis-terminology-issue] issue in the Redis repository might be interesting to you.\n\n#### Pub/Sub\n\nA `Redix.PubSub` process can be started via `Redix.PubSub.start_link/2`:\n\n```elixir\n{:ok, pubsub} = Redix.PubSub.start_link()\n```\n\nMost communication with the `Redix.PubSub` process happens via Elixir messages (that simulate a Pub/Sub interaction with the pub/sub server).\n\n```elixir\n{:ok, pubsub} = Redix.PubSub.start_link()\n\nRedix.PubSub.subscribe(pubsub, "my_channel", self())\n#=> {:ok, ref}\n```\n\nConfirmation of subscriptions is delivered as an Elixir message:\n\n```elixir\nreceive do\n  {:redix_pubsub, ^pubsub, ^ref, :subscribed, %{channel: "my_channel"}} -> :ok\nend\n```\n\nIf someone publishes a message on a channel we\'re subscribed to:\n\n```elixir\nreceive do\n  {:redix_pubsub, ^pubsub, ^ref, :message, %{channel: "my_channel", payload: "hello"}} ->\n    IO.puts("Received a message!")\nend\n```\n\n## Using Redix in the Real World\xe2\x84\xa2\n\nRedix is low-level, but it\'s still built to handle most things thrown at it. For many applications, you can avoid pooling with little to no impact on performance. Read the ["Real world usage" page][docs-real-world-usage] in the documentation for more information on this and pooling strategies that work better with Redix.\n\n## Contributing\n\nTo run the Redix test suite you will have to have Redis running locally. Redix requires a somewhat complex setup for running tests (because it needs a few instances running, for pub/sub and sentinel). For this reason, in this repository you\'ll find a `docker-compose.yml` file so that you can use [Docker][docker] and [docker-compose][] to spin up all the necessary Redis instances with just one command. Make sure you have Docker installed and then just run:\n\n```bash\ndocker-compose up\n```\n\nNow, you\'re ready to run tests with the `$ mix test` command.\n\n## License\n\nRedix is released under the MIT license. See the [license file](LICENSE.txt).\n\n\n[redis]: http://redis.io\n[redis-sentinel]: https://redis.io/topics/sentinel\n[redix-pubsub]: https://github.com/whatyouhide/redix_pubsub\n[castore]: https://github.com/ericmj/castore\n[docs-ssl]: https://hexdocs.pm/redix/Redix.html#module-ssl\n[docs-reconnections]: http://hexdocs.pm/redix/reconnections.html\n[docs-real-world-usage]: http://hexdocs.pm/redix/real-world-usage.html\n[docker]: https://www.docker.com\n[docker-compose]: https://docs.docker.com/compose/\n[redis-terminology-issue]: https://github.com/antirez/redis/issues/5335\n'