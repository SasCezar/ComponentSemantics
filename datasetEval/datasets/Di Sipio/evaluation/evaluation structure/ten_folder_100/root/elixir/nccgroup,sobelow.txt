b'# Sobelow\n\nSobelow is a security-focused static analysis tool for the \nPhoenix framework. For security researchers, it is a useful \ntool for getting a quick view of points-of-interest. For \nproject maintainers, it can be used to prevent the introduction \nof a number of common vulnerabilities. \n\nCurrently Sobelow detects some types of the following \nsecurity issues: \n\n* Insecure configuration\n* Known-vulnerable Dependencies\n* Cross-Site Scripting\n* SQL injection\n* Command injection\n* Code execution\n* Denial of Service\n* Directory traversal\n* Unsafe serialization\n\nPotential vulnerabilities are flagged in different colors \naccording to confidence in their insecurity. High confidence is \nred, medium confidence is yellow, and low confidence is green.\n\nA finding is typically marked "low confidence" if it looks \nlike a function could be used insecurely, but it cannot \nreliably be determined if the function accepts user-supplied \ninput. That is to say, if a finding is marked green, it may be \ncritically insecure, but it will require greater manual \nvalidation. \n\n**Note:** This project is in constant development, and \nadditional vulnerabilities will be flagged as time goes on. \nIf you encounter a bug, or would like to request additional \nfeatures or security checks, please open an issue!\n\n## Installation\n\nTo use Sobelow, you can add it to your application\'s dependencies. \n\n    def deps do\n      [\n        {:sobelow, "~> 0.8", only: :dev}\n      ]\n    end\n\nYou can also install Sobelow globally by executing the following \nfrom the command line:\n\n    $ mix archive.install hex sobelow\n\nTo install from the master branch, rather than the latest release, \nthe following command can be used:\n\n    $ mix archive.install github nccgroup/sobelow\n    \n## Use\n\nThe simplest way to scan a Phoenix project is to run the \nfollowing from the project root:\n\n    $ mix sobelow\n\n## Options\n\n**Note:** Any path arguments should be absolute paths, or \nrelative to the application root.\n\n  * `--root` or `-r` - Specify the application root directory. \n  Accepts a path argument, e.g. `../my_project`.\n        \n  * `--verbose` or `-v` - Print code snippets and additional \n  finding details.\n  \n  * `--ignore` or `-i` - Ignore given finding types. Accepts a \n  comma-separated list of module names, e.g. `XSS.Raw,Traversal`.\n  \n  * `--ignore-files` - Ignore files. Accepts a comma-separated \n  list of file names, e.g. `config/prod.exs`.\n  \n  * `--details` or `-d` - Get finding-type details. Accepts a \n  single module name, e.g. `Config.CSRF`.\n  \n  * `--all-details` - Get details of all finding-types.\n  \n  * `--private` - Skip update checks.\n  \n  * `--router` - Specify router location. This only needs to be \n  used if the router location is non-standard. Accepts a path \n  argument, e.g. `my/strange/router.ex`.\n  \n  * `--exit` - Return non-zero exit status at or above a confidence \n  threshold of `low` (default), `medium`, or `high`.\n  \n  * `--threshold` - Return findings at or above a confidence level \n  of `low` (default), `medium`, or `high`.\n  \n  * `--format` or `-f` - Specify findings output format. Accepts a format, \n  e.g. `txt` or `json`. \n  \n      Note that options such as `--verbose` will not work with the `json` format. \n      All `json` formatted findings contain a `type`, `file`, and `line` key. \n      Other keys may vary.\n  \n  * `--quiet` - Return a single line indicating number of findings. \n  Otherwise, return no output if there are no findings.\n  \n  * `--compact` - Minimal, single-line findings.\n  \n  * `--save-config` - Generates a configuration file based on command \n  line options. See [Configuration Files](#configuration-files) for more \n  information.\n  \n  * `--config` - Run Sobelow with configuration file. See [Configuration Files](#configuration-files) \n  for more information.\n  \n  * `--mark-skip-all` - Mark all displayed findings as skippable. \n  \n  * `--clear-skip` - Clear configuration created by `--mark-skip-all`.\n  \n  * `--skip` - Ignore findings that have been marked for skipping. See [False Positives](#false-positives) \n  for more information.\n  \n## Configuration Files\nSobelow allows users to save frequently used options in a \nconfiguration file. For example, if you find yourself constantly \nrunning:\n\n    $ mix sobelow -i XSS.Raw,Traversal --verbose --exit Low\n    \nYou can use the `--save-config` flag to create your `.sobelow-conf` \nconfig file:\n\n    $ mix sobelow -i XSS.Raw,Traversal --verbose --exit Low --save-config\n     \nThis command will create the `.sobelow-conf` file at the root \nof your application. You can edit this file directly to make \nchanges.\n\nYou can also run the command without any options:\n\n    $ mix sobelow --save-config\n\nwhen you first start out using this package - the generated configuration file\nwill be populated with the default values for each option. (This helps in\nquickly incorporating this package into a pre-existing codebase.)\n\nNow if you want to run Sobelow with the saved configuration,\nyou can run Sobelow with the `--config` flag.\n\n    $ mix sobelow --config\n\n## False Positives\nSobelow favors over-reporting versus under-reporting. As such, \nyou may find a number of false positives in a typical scan. \nThese findings may be individually ignored by adding a \n`# sobelow_skip` comment, along with a list of modules, before \nthe function definition. \n\n```elixir\n# sobelow_skip ["Traversal"]\ndef vuln_func(...) do\n  ...\nend\n```\n\nWhen integrating Sobelow into a new project, there can be a \nlarge number of false positives. To mark all printed findings \nas false positives, run sobelow with the `--mark-skip-all` flag. \n\nOnce you have tagged the appropriate findings, run \nSobelow with the `--skip` flag.\n\n    $ mix sobelow --skip\n\nWhile `# sobelow_skip` comments can only mark function-level \nfindings (and so cannot be used to skip configuration issues), \nthe `--mark-skip-all` flag can be used to skip any finding \ntype.\n\n## Modules\nFindings categories are broken up into modules. These modules \ncan then be used to either ignore classes of findings (via the \n`ignore` and `skip` options) or to get vulnerability details (via the \n`details` option).\n \nThis list, and other helpful information, can be found on the \ncommand line:\n\n    $ mix help sobelow\n\n## Updates\nWhen scanning a project, Sobelow will occasionally check for \nupdates, and will print an alert if a new version is available. \nSobelow keeps track of the last update-check by creating a \n`.sobelow` file in the root of the scanned project.\n\nIf this functionality is not desired, the `--private` flag can \nbe used with the scan.\n'