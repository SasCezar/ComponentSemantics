b'# Swoosh\n\n[![Build Status](https://travis-ci.org/swoosh/swoosh.svg?branch=master)](https://travis-ci.org/swoosh/swoosh)\n[![Inline docs](http://inch-ci.org/github/swoosh/swoosh.svg?branch=master&style=flat)](http://inch-ci.org/github/swoosh/swoosh)\n\nCompose, deliver and test your emails easily in Elixir.\n\nWe have applied the lessons learned from projects like Plug, Ecto and Phoenix in designing clean and composable APIs,\nwith clear separation of concerns between modules. Out of the box it comes with adapters for Sendgrid, Mandrill,\nMailgun, Postmark and SparkPost, as well as SMTP.\n\nThe complete documentation for Swoosh is located [here](https://hexdocs.pm/swoosh).\n\n## Getting started\n\n```elixir\n# In your config/config.exs file\nconfig :sample, Sample.Mailer,\n  adapter: Swoosh.Adapters.Sendgrid,\n  api_key: "SG.x.x"\n\n# In your application code\ndefmodule Sample.Mailer do\n  use Swoosh.Mailer, otp_app: :sample\nend\n\ndefmodule Sample.UserEmail do\n  import Swoosh.Email\n\n  def welcome(user) do\n    new()\n    |> to({user.name, user.email})\n    |> from({"Dr B Banner", "hulk.smash@example.com"})\n    |> subject("Hello, Avengers!")\n    |> html_body("<h1>Hello #{user.name}</h1>")\n    |> text_body("Hello #{user.name}\\n")\n  end\nend\n\n# In an IEx session\nSample.UserEmail.welcome(%{name: "Tony Stark", email: "tony.stark@example.com"}) |> Sample.Mailer.deliver\n\n# Or in a Phoenix controller\ndefmodule Sample.UserController do\n  use Phoenix.Controller\n  alias Sample.UserEmail\n  alias Sample.Mailer\n\n  def create(conn, params) do\n    user = # create user logic\n    UserEmail.welcome(user) |> Mailer.deliver\n  end\nend\n```\n\n## Installation\n\n1.  Add swoosh to your list of dependencies in `mix.exs`:\n\n    ```elixir\n    def deps do\n      [{:swoosh, "~> 0.24"}]\n    end\n    ```\n\n2.  (Optional - only for Elixir &lt; 1.4) Ensure swoosh is started before your application:\n\n    ```elixir\n    def application do\n      [applications: [:swoosh]]\n    end\n    ```\n\n3.  (Optional) If you are using `Swoosh.Adapters.SMTP`, `Swoosh.Adapters.Sendmail` or `Swoosh.Adapters.AmazonSES`, you also need to add `gen_smtp` to your deps and list of applications:\n\n    ```elixir\n    # You only need to do this if you are using Elixir < 1.4\n    def application do\n      [applications: [:swoosh, :gen_smtp]]\n    end\n\n    def deps do\n      [\n        {:swoosh, "~> 0.24"},\n        {:gen_smtp, "~> 0.13"}\n      ]\n    end\n    ```\n\n## Adapters\n\nSwoosh supports the most popular transactional email providers out of the box and also has a SMTP adapter. Below is the\nlist of the adapters currently included:\n\n| Provider   | Swoosh adapter                                                                                |\n| ---------- | --------------------------------------------------------------------------------------------- |\n| SMTP       | [Swoosh.Adapters.SMTP](https://hexdocs.pm/swoosh/Swoosh.Adapters.SMTP.html#content)           |\n| Sendgrid   | [Swoosh.Adapters.Sendgrid](https://hexdocs.pm/swoosh/Swoosh.Adapters.Sendgrid.html#content)   |\n| Sendmail   | [Swoosh.Adapters.Sendmail](https://hexdocs.pm/swoosh/Swoosh.Adapters.Sendmail.html#content)   |\n| Mandrill   | [Swoosh.Adapters.Mandrill](https://hexdocs.pm/swoosh/Swoosh.Adapters.Mandrill.html#content)   |\n| Mailgun    | [Swoosh.Adapters.Mailgun](https://hexdocs.pm/swoosh/Swoosh.Adapters.Mailgun.html#content)     |\n| Mailjet    | [Swoosh.Adapters.Mailjet](https://hexdocs.pm/swoosh/Swoosh.Adapters.Mailjet.html#content)     |\n| Postmark   | [Swoosh.Adapters.Postmark](https://hexdocs.pm/swoosh/Swoosh.Adapters.Postmark.html#content)   |\n| SparkPost  | [Swoosh.Adapters.SparkPost](https://hexdocs.pm/swoosh/Swoosh.Adapters.SparkPost.html#content) |\n| Amazon SES | [Swoosh.Adapters.AmazonSES](https://hexdocs.pm/swoosh/Swoosh.Adapters.AmazonSES.html#content) |\n| Dyn        | [Swoosh.Adapters.Dyn](https://hexdocs.pm/swoosh/Swoosh.Adapters.Dyn.html#content)             |\n| SocketLabs | [Swoosh.Adapters.SocketLabs](https://hexdocs.pm/swoosh/Swoosh.Adapters.SocketLabs.html#content)             |\n| Gmail      | [Swoosh.Adapters.Gmail](https://hexdocs.pm/swoosh/Swoosh.Adapters.Gmail.html#content)             |\n\nConfigure which adapter you want to use by updating your `config/config.exs` file:\n\n```elixir\nconfig :sample, Sample.Mailer,\n  adapter: Swoosh.Adapters.SMTP\n  # adapter config (api keys, etc.)\n```\n\nCheck the documentation of the adapter you want to use for more specific configurations and instructions.\n\nAdding new adapters is super easy and we are definitely looking for contributions on that front. Get in touch if you want\nto help!\n\n## Async Emails\n\nSwoosh does not make any special arrangements for sending emails in a non-blocking manner.\n\nTo send asynchronous emails in Swoosh, one can simply leverage Elixir\'s standard library:\n\n```elixir\nTask.start(fn ->\n  %{name: "Tony Stark", email: "tony.stark@example.com"}\n  |> Sample.UserEmail.welcome\n  |> Sample.Mailer.deliver\nend)\n```\n\nPlease take a look at the official docs for [Task](https://hexdocs.pm/elixir/Task.html) and [Task.Supervisor](https://hexdocs.pm/elixir/Task.Supervisor.html) for further options.\n\nNote: it is not to say that `Task.start` is enough to cover the whole async aspect of sending emails. It is more to say that\nthe implementation of sending emails is very application specific. For example, the simple example above might be sufficient\nfor some small applications but not so much for more mission critial applications. Runtime errors, network errors and errors\nfrom the service provider all need to be considered and handled, maybe differently as well. Whether to retry, how many times\nyou want to retry, what to do when everything fails, these questions all have different answers in different context.\n\n## Phoenix integration\n\nIf you are looking to use Swoosh in your Phoenix project, make sure to check out the\n[phoenix_swoosh](https://github.com/swoosh/phoenix_swoosh) project. It contains a set of functions that make it easy to\nrender the text and HTML bodies using Phoenix views, templates and layouts.\n\nTaking the example from above the "Getting Started" section, your code would look something like this:\n\n```elixir\n# web/templates/layout/email.html.eex\n<html>\n  <head>\n    <title><%= @email.subject %></title>\n  </head>\n  <body>\n    <%= render @view_module, @view_template, assigns %>\n  </body>\n</html>\n\n# web/templates/email/welcome.html.eex\n<div>\n  <h1>Welcome to Sample, <%= @username %>!</h1>\n</div>\n\n# web/emails/user_email.ex\ndefmodule Sample.UserEmail do\n  use Phoenix.Swoosh, view: Sample.EmailView, layout: {Sample.LayoutView, :email}\n\n  def welcome(user) do\n    new()\n    |> to({user.name, user.email})\n    |> from({"Dr B Banner", "hulk.smash@example.com"})\n    |> subject("Hello, Avengers!")\n    |> render_body("welcome.html", %{username: user.username})\n  end\nend\n```\n\nFeels familiar doesn\'t it? Head to the [phoenix_swoosh](https://github.com/swoosh/phoenix_swoosh) repo for more details.\n\n## Attachments\n\nYou can attach files to your email using the `Swoosh.Email.attachment/2` function. Just give the path of your\nfile as an argument and we will do the rest. It also works with a `%Plug.Upload{}` struct, or a `%Swoosh.Attachment{}` struct, which can be constructed using `Swoosh.Attachment.new` detailed here in the [docs](https://hexdocs.pm/swoosh/Swoosh.Attachment.html#new/2).\n\nAll built-in adapters have support for attachments.\n\n    new()\n    |> to("peter@example.com")\n    |> from({"Jarvis", "jarvis@example.com"})\n    |> subject("Invoice May")\n    |> text_body("Here is the invoice for your superhero services in May.")\n    |> attachment("/Users/jarvis/invoice-peter-may.pdf")\n\n## Testing\n\nIn your `config/test.exs` file set your mailer\'s adapter to `Swoosh.Adapters.Test` so that you can use the assertions\nprovided by Swoosh in `Swoosh.TestAssertions` module.\n\n```elixir\ndefmodule Sample.UserTest do\n  use ExUnit.Case, async: true\n\n  import Swoosh.TestAssertions\n\n  test "send email on user signup" do\n    # Assuming `create_user` creates a new user then sends out a `Sample.UserEmail.welcome` email\n    user = create_user(%{username: "ironman", email: "tony.stark@example.com"})\n    assert_email_sent Sample.UserEmail.welcome(user)\n  end\nend\n```\n\n## Mailbox preview in the browser\n\nSwoosh ships with a Plug that allows you to preview the emails in the local (in-memory) mailbox. It\'s particularly\nconvenient in development when you want to check what your email will look like while testing the various flows of your\napplication.\n\nFor email to reach this mailbox you will need to set your `Mailer` adapter to `Swoosh.Adapters.Local`:\n\n```elixir\n# in config/dev.exs\nconfig :sample, Mailer,\n  adapter: Swoosh.Adapters.Local\n\n# to run the preview server together as part of your app\nconfig :swoosh, serve_mailbox: true\n\n# to change the preview server port (4000 by default)\nconfig :swoosh, serve_mailbox: true, preview_port: 4001\n```\n\nIf you dont want to run the preview server as part of your app as shown above, in your Phoenix project you can also `forward` directly to the plug if you so choose, like this:\n\n```elixir\n# in web/router.ex\nif Mix.env == :dev do\n  scope "/dev" do\n    pipe_through [:browser]\n\n    forward "/mailbox", Plug.Swoosh.MailboxPreview, [base_path: "/dev/mailbox"]\n  end\nend\n```\n\nAnd finally you can also use the following Mix task to start the mailbox preview server independently  though note that it won\'t display/process emails being sent from outside its own process (great for testing within iex).\n\n```console\n$ mix swoosh.mailbox.server\n```\n\nIf you are curious, this is how it looks:\n\n![Plug.Swoosh.MailboxPreview](https://github.com/swoosh/swoosh/raw/master/images/mailbox-preview.png)\n\n### Production\n\nSwoosh starts a memory storage process for local adapter by default. Normally it does no harm being left around in production.\nHowever, if it is causing problems, or you don\'t like having it around, it can be disabled like so:\n\n```elixir\n# config/prod.exs\nconfig :swoosh, local: false\n```\n\n## Documentation\n\nDocumentation is written into the library, you will find it in the source code, accessible from `iex` and of course, it\nall gets published to [hexdocs](http://hexdocs.pm/swoosh).\n\n## Contributing\n\nWe are grateful for any contributions. Before you submit an issue or a pull request, remember to:\n\n-   Look at our [Contributing guidelines](CONTRIBUTING.md)\n-   Not use the issue tracker for help or support requests (try StackOverflow, IRC or Slack instead)\n-   Do a quick search in the issue tracker to make sure the issues hasn\'t been reported yet.\n-   Look and follow the [Code of Conduct](CODE_OF_CONDUCT.md). Be nice and have fun!\n\n### Running tests\n\nClone the repo and fetch its dependencies:\n\n    $ git clone https://github.com/swoosh/swoosh.git\n    $ cd swoosh\n    $ mix deps.get\n    $ mix test\n\n### Building docs\n\n    $ MIX_ENV=docs mix docs\n\n## LICENSE\n\nSee [LICENSE](https://github.com/swoosh/swoosh/blob/master/LICENSE.txt)\n'