b'# \xc3\x9cberauth\n[![Build Status](https://travis-ci.org/ueberauth/ueberauth.svg?branch=master)](https://travis-ci.org/ueberauth/ueberauth)\n[![Codecov](https://codecov.io/gh/ueberauth/ueberauth/branch/master/graph/badge.svg)](https://codecov.io/gh/ueberauth/ueberauth)\n[![Inline docs](http://inch-ci.org/github/ueberauth/ueberauth.svg)](http://inch-ci.org/github/ueberauth/ueberauth)\n[![Hex Version](http://img.shields.io/hexpm/v/ueberauth.svg)](https://hex.pm/packages/ueberauth)\n[![Hex docs](http://img.shields.io/badge/hex.pm-docs-green.svg)](https://hexdocs.pm/ueberauth)\n[![License](https://img.shields.io/hexpm/l/ueberauth.svg)](https://github.com/ueberauth/ueberauth/blob/master/LICENSE)\n\n> An Elixir Authentication System for Plug-based Web Applications\n\nUeberauth is two-phase authentication framework that provides a clear API -\nallowing for many strategies to be created and shared within the community. It\nis heavily inspired by [Omniauth](https://github.com/intridea/omniauth). You\ncould call it a port but it is significantly different in operation - but\nalmost the same concept. Huge hat tip to [Intridea](https://github.com/intridea).\n\nUeberauth provides only the initial authentication challenge, (initial OAuth\nflow, collecting the information from a login form, etc). It does not\nauthenticate each request, that\'s up to your application. You could issue a\ntoken or put the result into a session for your applications needs. Libraries\nlike [Guardian](https://github.com/hassox/guardian) can help you with that\naspect of authentication.\n\nThe two phases are `request` and `callback`. These phases are implemented by\nStrategies.\n\n## Strategies\n\nStrategies are plugs that decorate or intercept requests (or both).\n\nStrategies implement the two phases and then may allow the request to flow\nthrough to your downstream plugs. Implementing the request and callback phases\nis optional depending on the strategies requirements. If a strategy does not\nredirect, the request will be decorated with Ueberauth information and\nallowed to carry on through the pipeline.\n\nSee the full list of the strategies on the [Wiki](https://github.com/ueberauth/ueberauth/wiki/List-of-Strategies).\n\n## Request Phase\n\nThe request phase is where you request information about the user. This could\nbe a redirect to an OAuth2 authorization url or a form for collecting username\nand password. The request phase is concerned with only the collection of\ninformation. When a request comes in on the request phase url the relevant\nstrategy will receive the `handle_request!` call.\n\nIn some cases (default) the application using Ueberauth is responsible for\nimplementing the request phase. That is, you should set up a route to receive\nthe request phase and provide a form etc. In some cases, like OAuth, the\nrequest phase is used to redirect your user to a 3rd party site to fulfill\nthe request.\n\nFor example, an OAuth strategy for GitHub will receive the request phase url\nand stop the request, redirecting you to GitHub\xe2\x80\x99s OAuth challenge url with\nsome query parameters. Once you complete the GitHub OAuth flow, the user will\nbe redirected back to the host site to the callback URL.\n\nAnother example is simple email/password authentication. A request is made by\nthe client to the request phase path and the host application displays a form.\nThe strategy will likely not do anything with the incoming `handle_request!`\nrequest and simply pass through to the application. Once the form is completed,\nthe POST should go to the callback url where it is handled (passwords checked,\nusers created / authenticated).\n\n## Callback Phase\n\nThe callback phase is where the fun happens. Once a successful request phase has been completed, the request phase provider (OAuth provider or host site, etc)\nshould call the callback URL. The strategy will intercept the request via the `callback_phase!`. If successful, it should prepare the connection so the `Ueberauth.Auth` struct can be created, or set errors to indicate a failure.\n\nSee `Ueberauth.Strategy` for more information on constructing the Ueberauth.Auth struct.\n\nLooking for an example? Take a look [ueberauth/ueberauth_example](https://github.com/ueberauth/ueberauth_example).\n\n## Setup\n\n### Add the dependency\n\n```elixir\n# mix.exs\n\ndef application do\n  # Add the application to your list of applications.\n  # This will ensure that it will be included in a release.\n  [applications: [:logger, :ueberauth]]\nend\n\ndefp deps do\n  # Add the dependency\n  [{:ueberauth, "~> 0.6"}]\nend\n```\n\n### Fetch the dependencies\n\n```shell\nmix deps.get\n```\n\n## Configuring providers\n\nIn your configuration file (`config/config.exs`) provide a list of the providers you intend to use. For example:\n\n```elixir\nconfig :ueberauth, Ueberauth,\n  providers: [\n    facebook: { Ueberauth.Strategy.Facebook, [ opt1: "value", opts2: "value" ] },\n    github: { Ueberauth.Strategy.Github, [ opt1: "value", opts2: "value" ] }\n  ]\n```\n\nThis will define two providers for you. The general structure of the providers value is:\n\n```elixir\nconfig :ueberauth, Ueberauth,\n  providers: [\n    <provider name>: { <Strategy Module>, [ <strategy options> ] }\n  ]\n```\n\nWe use the configuration options for defining these to allow for dependency\ninjection in different environments. The provider name will be used to construct\nrequest and response paths (by default) but will also be returned in the\n`Ueberauth.Auth` struct as the `provider` field.\n\nOnce you\'ve setup your providers, in your router you need to configure the plug\nto run. The plug should run before your application routes.\n\nIn phoenix, plug this module in your controller:\n\n```elixir\ndefmodule MyApp.AuthController do\n  use MyApp.Web, :controller\n  plug Ueberauth\n  ...\nend\n```\n\nIts URL matching is done via pattern matching rather than explicit runtime\nchecks so your strategies will only fire for relevant requests.\n\nNow that you have this, your strategies will intercept relevant requests for\neach strategy for both request and callback phases. The default urls are (for\nour Facebook & GitHub example)\n\n```\n# Request phase paths\n/auth/facebook\n/auth/github\n\n# Callback phase paths\n/auth/facebook/callback\n/auth/github/callback\n```\n\n## Customizing Paths\n\nThese paths can be configured on a per strategy basis by setting options on\nthe provider.\n\nNote: These paths are absolute\n\n```elixir\nconfig :ueberauth, Ueberauth,\n  base_path: "/login", # default is "/auth"\n  providers: [\n    identity: {Ueberauth.Strategies.Identity, [request_path: "/login/identity",\n                                               callback_path: "/login/identity/callback"]}\n  ]\n```\n\n## Customizing JSON Serializer\n\nYour json serializer can be configured depending on what you have installed in your application.  Defaults to [Jason](https://github.com/michalmuskala/jason).\n\n```elixir\nconfig :ueberauth, Ueberauth,\n  json_library: Poison # default is Jason\n```\n\n## HTTP Methods\n\nBy default, all callback urls are only available via the `"GET"` method. You\ncan override this via options to your strategy.\n\n```elixir\nproviders: [\n  identity: {Ueberauth.Strategies.Identity, [callback_methods: ["POST"]]}\n]\n```\n\n## Strategy Options\n\nAll options that are passed into your strategy are available at runtime to\nmodify the behaviour of the strategy.\n\n## License\nSee [LICENSE](https://raw.githubusercontent.com/ueberauth/ueberauth/master/LICENSE).\n'