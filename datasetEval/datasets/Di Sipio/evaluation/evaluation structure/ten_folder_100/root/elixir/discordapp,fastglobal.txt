b'# FastGlobal\n\n[![Master](https://travis-ci.org/discordapp/fastglobal.svg?branch=master)](https://travis-ci.org/discordapp/fastglobal)\n[![Hex.pm Version](http://img.shields.io/hexpm/v/fastglobal.svg?style=flat)](https://hex.pm/packages/fastglobal)\n\nThe Erlang VM is great at many things, but quick access to large shared data is not one of them. Storing data in a single process\nresults in overloading the process, using an ETS table gets more expensive to read as the data gets larger, and both require copying\ndata to the calling process. If you have large infrequently changing data that needs to be accessed by thousands of processes there\nis a better way.\n\nErlang has an optimization called constant pools for functions that return static data, you can also compile modules at runtime.\nThis method was originally popularized by [mochiglobal](https://github.com/mochi/mochiweb/blob/master/src/mochiglobal.erl). This\nmodule is an Elixir version with some optimizations such as generating the atom keys and reusing them.\n\n## Performance\n\n```\nbenchmark name               iterations   average time\nfastglobal get                 10000000   0.33 \xc2\xb5s/op\nets get                          500000   7.64 \xc2\xb5s/op\nagent get                        100000   12.67 \xc2\xb5s/op\nfastglobal purge perf (100)         500   2846.26 \xc2\xb5s/op\nfastglobal put (5)                  500   3683.30 \xc2\xb5s/op\nfastglobal put (10)                 500   6449.98 \xc2\xb5s/op\nfastglobal put (100)                 50   44543.56 \xc2\xb5s/op\n```\n\n## Caveats\n\n- Compile times get slower as data size increases.\n- Compile times get slower the more processes are in the system. Erlang talks to each process when purging a module.\n- Getting a key that does not exist is expensive due to try/catch, put at least a `nil` value.\n- Creating atoms from strings is not cheap, use `FastGlobal.new`.\n\n## Usage\n\nAdd it to `mix.exs`\n\n```elixir\ndefp deps do\n  [{:fastglobal, "~> 1.0"}]\nend\n```\n\nAnd just use it as a global map.\n\n```elixir\ndata = %{\n  a: 1,\n  b: 2,\n  c: [3, 4]\n}\nFastGlobal.put(:data, data)\ndata == FastGlobal.get(:data)\n```\n\n## License\n\nFastGlobal is released under [the MIT License](LICENSE).\nCheck [LICENSE](LICENSE) file for more information.\n'