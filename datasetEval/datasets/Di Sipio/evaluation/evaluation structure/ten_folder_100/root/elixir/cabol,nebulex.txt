b'# Nebulex \xf0\x9f\x8c\x8c\n> ### In-Process and Distributed Caching Framework for Elixir.\n> Easily craft and deploy different distributed caching topologies in Elixir.\n\n[![Build Status](https://travis-ci.org/cabol/nebulex.svg?branch=master)](https://travis-ci.org/cabol/nebulex)\n[![Coverage Status](https://coveralls.io/repos/github/cabol/nebulex/badge.svg?branch=master)](https://coveralls.io/github/cabol/nebulex?branch=master)\n[![Inline docs](http://inch-ci.org/github/cabol/nebulex.svg)](http://inch-ci.org/github/cabol/nebulex)\n[![Hex Version](https://img.shields.io/hexpm/v/nebulex.svg)](https://hex.pm/packages/nebulex)\n[![Docs](https://img.shields.io/badge/docs-hexpm-blue.svg)](https://hexdocs.pm/nebulex)\n\nNebulex is an in-process and distributed caching framework with a set of\nuseful and powerful features such as:\n\n  * Inspired by [Ecto][ecto]; simple and fluent API, flexible and\n    pluggable architecture (based on adapters).\n\n  * Built-in adapters: local (generational cache), distributed and multi-level.\n\n  * [Caching DSL](http://hexdocs.pm/nebulex/caching-dsl.html) to implement\n    different [cache usage patterns][EHCache].\n\n  * Support for different distributed caching topologies, such as:\n    Partitioned, Near, Replicated, etc.\n\n  * Different eviction mechanisms, such as time-based eviction through the\n    expiry time property (`expire_at`) on the cached objects,\n    [multi-queue][multi_queue] or [generational caching][generational_caching]\n    (built-in adapter), etc.\n\n  * Object versioning (via `:version` property); useful for\n    [Optimistic offline locks][offline_locks] implementation.\n\n  * [Pre/Post execution hooks](http://hexdocs.pm/nebulex/hooks.html). Ability\n    to hook any function call for a cache and add custom logic before and/or\n    after function execution.\n\n  * Transactions and key-locking (`Nebulex.Adapter.Transaction`).\n\n[ecto]: https://github.com/elixir-ecto/ecto\n[multi_queue]: https://en.wikipedia.org/wiki/Cache_replacement_policies#Multi_queue_(MQ)\n[generational_caching]: http://fairwaytech.com/2012/09/write-through-and-generational-caching\n[offline_locks]: https://martinfowler.com/eaaCatalog/optimisticOfflineLock.html\n[EHCache]: https://github.com/ehcache/ehcache3/blob/master/docs/src/docs/asciidoc/user/caching-patterns.adoc\n\nSee the [getting started](http://hexdocs.pm/nebulex/getting-started.html) guide\nand the [online documentation](http://hexdocs.pm/nebulex/Nebulex.html).\n\n## Usage\n\nYou need to add `nebulex` as a dependency to your `mix.exs` file. However,\nin the case you want to use an external (non built-in) cache adapter, you\nalso have to add the proper dependency to your `mix.exs` file.\n\nThe supported caches and their adapters are:\n\nCache        | Nebulex Adapter             | Dependency\n:----------- | :---------------------------| :---------\nGenerational | Nebulex.Adapters.Local      | Built-In\nPartitioned  | Nebulex.Adapters.Dist       | Built-In\nMulti-level  | Nebulex.Adapters.Multilevel | Built-In\nRedis        | NebulexRedisAdapter         | [nebulex_redis_adapter][nebulex_redis_adapter]\nMemcached    | NebulexMemcachedAdapter     | [nebulex_memcached_adapter][nebulex_memcached_adapter]\nFoundationDB | NebulexFdbAdapter           | [nebulex_fdb_adapter][nebulex_fdb_adapter]\n\n[nebulex_redis_adapter]: https://github.com/cabol/nebulex_redis_adapter\n[nebulex_memcached_adapter]: https://github.com/vasuadari/nebulex_memcached_adapter\n[nebulex_fdb_adapter]: https://github.com/fire/nebulex_fdb_adapter\n\nFor example, if you want to use a built-in cache, you just need to add\n`nebulex` to your `mix.exs` file:\n\n```elixir\ndef deps do\n  [\n    {:nebulex, "~> 1.1"}\n  ]\nend\n```\n\nThen run `mix deps.get` in your shell to fetch the dependencies. If you want to\nuse another cache adapter, just choose the proper dependency from the table\nabove.\n\nFinally, in the cache definition, you will need to specify the `adapter`\nrespective to the chosen dependency. For the local built-in cache it is:\n\n```elixir\ndefmodule MyApp.Cache do\n  use Nebulex.Cache,\n    otp_app: :my_app,\n    adapter: Nebulex.Adapters.Local\n  ...\n```\n\n> Check out the [getting started](http://hexdocs.pm/nebulex/getting-started.html)\n  guide to learn more about it.\n\n## Important links\n\n * [Documentation](http://hexdocs.pm/nebulex/Nebulex.html)\n * [Examples](https://github.com/cabol/nebulex_examples)\n * [Ecto Integration](https://github.com/cabol/nebulex_ecto)\n\n## Testing\n\nTesting by default spawns nodes internally for distributed tests.\nTo run tests that do not require clustering, exclude  the `clustered` tag:\n\n```\n$ mix test --exclude clustered\n```\n\nIf you have issues running the clustered tests try running:\n\n```\n$ epmd -daemon\n```\n\nbefore running the tests.\n\n## Benchmarks\n\nSome basic benchmarks were added using [benchee](https://github.com/PragTob/benchee);\nto learn more, check out the [benchmarks](./benchmarks) directory.\n\nTo run the benchmarks:\n\n```\n$ mix run benchmarks/benchmark.exs\n```\n\nIf you are interested to run more sophisticated load tests, perhaps you should\ncheckout the [Nebulex Load Tests](https://github.com/cabol/nebulex_examples/tree/master/nebulex_bench)\nexample, it allows you to run your own performance/load tests against Nebulex,\nand it also comes with load tests results.\n\n## Contributing\n\nContributions to Nebulex are very welcome and appreciated!\n\nUse the [issue tracker](https://github.com/cabol/nebulex/issues) for bug reports\nor feature requests. Open a [pull request](https://github.com/cabol/nebulex/pulls)\nwhen you are ready to contribute.\n\nWhen submitting a pull request you should not update the [CHANGELOG.md](CHANGELOG.md),\nand also make sure you test your changes thoroughly, include unit tests\nalongside new or changed code.\n\nBefore to submit a PR it is highly recommended to run:\n\n * `mix test` to run tests\n * `mix coveralls.html && open cover/excoveralls.html` to run tests and check\n   out code coverage (expected 100%).\n * `mix format && mix credo --strict` to format your code properly and find code\n   style issues\n * `mix dialyzer` to run dialyzer for type checking; might take a while on the\n   first invocation\n\n## Copyright and License\n\nCopyright (c) 2017, Carlos Bola\xc3\xb1os.\n\nNebulex source code is licensed under the [MIT License](LICENSE).\n'