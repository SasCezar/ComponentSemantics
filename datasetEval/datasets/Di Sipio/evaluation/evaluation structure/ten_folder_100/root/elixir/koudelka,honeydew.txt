b'Honeydew \xf0\x9f\x92\xaa\xf0\x9f\x8f\xbb\xf0\x9f\x8d\x88\n========\n[![Build Status](https://travis-ci.org/koudelka/honeydew.svg?branch=master)](https://travis-ci.org/koudelka/honeydew)\n[![Hex pm](https://img.shields.io/hexpm/v/honeydew.svg?style=flat)](https://hex.pm/packages/honeydew)\n\nHoneydew (["Honey, do!"](http://en.wiktionary.org/wiki/honey_do_list)) is a pluggable job queue and worker pool for Elixir, focused on at-least-once execution.\n\n```elixir\ndefmodule MyWorker do\n  def do_a_thing do\n    IO.puts "doing a thing!"\n  end\nend\n\n:ok = Honeydew.start_queue(:my_queue)\n:ok = Honeydew.start_workers(:my_queue, MyWorker)\n\n:do_a_thing |> Honeydew.async(:my_queue)\n\n# => "doing a thing!"\n```\n\n__Isolation__\n  - Jobs are run in isolated one-time-use processes.\n  - Optionally stores immutable state loaned to each worker (a database connection, for example).\n  - [Initialized Worker](https://github.com/koudelka/honeydew/tree/master/examples/initialized_worker)\n\n__Strong Job Custody__ \n  - Jobs don\'t leave the queue until either they succeed, are explicitly abandoned or are moved to another queue.\n  - Workers are issued only one job at a time, no batching.\n  - If a worker crashes while processing a job, the job is reset and a "failure mode" (e.g. abandon, move, retry) is executed. (The default failure mode [is to abandon the job](https://hexdocs.pm/honeydew/Honeydew.html#start_queue/2).)\n  - [Job Lifecycle](https://github.com/koudelka/honeydew/blob/master/README/job_lifecycle.md)\n\n__Clusterable Components__\n  - Queues, workers and your enqueuing processes can exist anywhere in the BEAM cluster. \n  - [Global Queues](https://github.com/koudelka/honeydew/tree/master/examples/global)\n\n__Plugability__\n  - [Queues](https://github.com/koudelka/honeydew/blob/master/README/queues.md), [workers](https://github.com/koudelka/honeydew/blob/master/README/workers.md), [dispatch strategies](https://github.com/koudelka/honeydew/blob/master/README/dispatchers.md), [failure modes and success modes](https://github.com/koudelka/honeydew/blob/master/README/success_and_failure_modes.md) are all plugable with user modules.\n  - No forced dependency on external queue services.\n\n__Batteries Included__\n  - [Mnesia Queue](https://github.com/koudelka/honeydew/tree/master/examples/mnesia.exs), for in-memory/persistence and simple distribution scenarios. (default)\n  - [Ecto Queue](#ecto), to turn an Ecto schema into its own work queue, using your database.\n  - [Fast In-Memory Queue](https://github.com/koudelka/honeydew/tree/master/examples/local), for fast processing of recreatable jobs without delay requirements.\n  - Can optionally heal the cluster after a disconnect or downed node when using a [Global Queue](https://github.com/koudelka/honeydew/tree/master/examples/global).\n  - [Delayed Jobs](https://github.com/koudelka/honeydew/tree/master/examples/delayed_job.exs)\n  - [Exponential Retry](https://github.com/koudelka/honeydew/tree/master/lib/honeydew/failure_mode/exponential_retry.ex), even works with Ecto queues!\n\n\n__Easy API__\n  - Jobs are enqueued using `async/3` and you can receive replies with `yield/2`, somewhat like [Task](https://hexdocs.pm/elixir/Task.html).\n  - [API Overview](https://github.com/koudelka/honeydew/blob/master/README/api.md)\n  - [Hex Docs](https://hexdocs.pm/honeydew/Honeydew.html)\n\n\n### <a name="ecto">Ecto Queue</a>\n\nThe Ecto Queue is designed to painlessly turn your Ecto schema into a queue, using your repo as the backing store.\n\n- You don\'t need to explicitly enqueue jobs, that\'s handled for you (for example, sending a welcome email when a new User is inserted).\n- Eliminates the possibility of your database and work queue becoming out of sync\n- As the database is the queue, you don\'t need to run a separate queue node.\n- You get all of the high-availability, consistency and distribution semantics of your chosen database.\n\nCheck out the included [example project](https://github.com/koudelka/honeydew/tree/master/examples/ecto_poll_queue), and its README.\n\n\n## Getting Started\n\nIn your mix.exs file:\n\n```elixir\ndefp deps do\n  [{:honeydew, "~> 1.4.5"}]\nend\n```\n\n## Deployment\n\nIf you\'re using the Mnesia queue (the default), you\'ll need tell your release system to include the `:mnesia` application.\n\nIn your mix.exs file:\n\n```elixir\ndef application do\n  [\n    extra_applications: [:mnesia]\n  ]\nend\n```\n\n### tl;dr\n- Check out the [examples](https://github.com/koudelka/honeydew/tree/master/examples).\n- Enqueue jobs with `Honeydew.async/3`, delay jobs by passing `delay_secs: <integer>`.\n- Receive responses with `Honeydew.yield/2`.\n- Emit job progress with `progress/1`\n- Queue/Worker status with `Honeydew.status/1`\n- Suspend and resume with `Honeydew.suspend/1` and `Honeydew.resume/1`\n- List jobs with `Honeydew.filter/2`\n- Move jobs with `Honeydew.move/2`\n- Cancel jobs with `Honeydew.cancel/2`\n\n\n### README\nThe rest of the README is broken out into slightly more digestible [sections](https://github.com/koudelka/honeydew/tree/master/README).\n\nAlso, check out the README files included with each of the [examples](https://github.com/koudelka/honeydew/tree/master/examples).\n\n### CHANGELOG\nIt\'s worth keeping abreast with the [CHANGELOG](https://github.com/koudelka/honeydew/blob/master/CHANGELOG.md)\n'