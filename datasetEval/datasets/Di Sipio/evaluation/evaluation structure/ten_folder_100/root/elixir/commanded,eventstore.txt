b'# EventStore\n\nEvent store implemented in Elixir. Uses [PostgreSQL](http://www.postgresql.org/) as the underlying storage engine.\n\nRequires Elixir v1.6 and PostgreSQL v9.5 or newer.\n\nEventStore supports [running on a cluster of nodes](guides/Cluster.md).\n\n- [Changelog](CHANGELOG.md)\n- [Wiki](https://github.com/commanded/eventstore/wiki)\n- [Frequently asked questions](https://github.com/commanded/eventstore/wiki/FAQ)\n- [Getting help](https://github.com/commanded/eventstore/wiki/Getting-help)\n- [Latest published Hex package](https://hex.pm/packages/eventstore) & [documentation](https://hexdocs.pm/eventstore/)\n\nMIT License\n\n[![Build Status](https://travis-ci.com/commanded/eventstore.svg?branch=master)](https://travis-ci.com/commanded/eventstore)\n\n---\n\n### Overview\n\n> This README and the following guides follow the `master` branch which may not be the currently published version.\n> [Read docs for the latest published version of EventStore on Hex](https://hexdocs.pm/eventstore/).\n\n- [Getting started](guides/Getting%20Started.md)\n  - [Initialize an existing database](guides/Getting%20Started.md#initialize-an-existing-database)\n  - [Reset an existing database](guides/Getting%20Started.md#reset-an-existing-database)\n  - [Event data and metadata data type](guides/Getting%20Started.md#event-data-and-metadata-data-type)\n- [Using the EventStore](guides/Usage.md)\n  - [Writing to a stream](guides/Usage.md#writing-to-a-stream)\n  - [Reading from a stream](guides/Usage.md#reading-from-a-stream)\n  - [Reading from all streams](guides/Usage.md#reading-from-all-streams)\n  - [Stream from all streams](guides/Usage.md#stream-from-all-streams)\n  - [Linking events between streams](guides/Usage.md#linking-events-between-streams)\n  - [Subscribe to streams](guides/Subscriptions.md)\n    - [Ack received events](guides/Subscriptions.md#ack-received-events)\n    - [Example subscriber](guides/Subscriptions.md#example-subscriber)\n- [Running on a cluster](guides/Cluster.md)\n- [Event serialization](guides/Event%20Serialization.md)\n  - [Example JSON serializer](guides/Event%20Serialization.md#example-json-serializer)\n- [Upgrading an EventStore](guides/Upgrades.md)\n- [Used in production?](#used-in-production)\n- [Backup and administration](#backup-and-administration)\n- [Benchmarking performance](#benchmarking-performance)\n- [Contributing](#contributing)\n  - [Contributors](#contributors)\n- [Need help?](#need-help)\n\n---\n\n## Example usage\n\nDefine an event store module:\n\n```elixir\ndefmodule MyEventStore do\n  use EventStore, otp_app: :my_app\nend\n```\n\nCreate one or more event structs to be persisted (serialized to JSON by default):\n\n```elixir\ndefmodule ExampleEvent do\n  defstruct [:key]\nend\n```\n\nAppend events to a stream:\n\n```elixir\nstream_uuid = UUID.uuid4()\nexpected_version = 0\n\nevents = [\n  %EventStore.EventData{\n    event_type: "Elixir.ExampleEvent",\n    data: %ExampleEvent{key: "value"},\n    metadata: %{user: "someuser@example.com"}\n  }\n]\n\n:ok = MyEventStore.append_to_stream(stream_uuid, expected_version, events)\n```\n\nRead all events from a single stream, starting at the stream\'s first event:\n\n```elixir\n{:ok, events} = MyEventStore.read_stream_forward(stream_uuid)\n```\n\nMore: [Using the EventStore](guides/Usage.md)\n\nSubscribe to events appended to all streams:\n\n```elixir\n{:ok, subscription} = MyEventStore.subscribe_to_all_streams("example_subscription", self())\n\n# Wait for the subscription confirmation\nreceive do\n  {:subscribed, ^subscription} ->\n    IO.puts("Successfully subscribed to all streams")\nend\n\n# Receive a batch of events appended to the event store\nreceive do\n  {:events, events} ->\n    IO.puts("Received events: #{inspect events}")\n\n    # Acknowledge successful receipt of events\n    :ok = MyEventStore.ack(subscription, events)\nend\n```\n\nIn production use you would use a [`GenServer` subscriber process](guides/Subscriptions.md#example-subscriber) and the `handle_info/2` callback to receive events.\n\nMore: [Subscribe to streams](guides/Subscriptions.md)\n\n## Used in production?\n\nYes, this event store is being used in production.\n\nPostgreSQL is used for the underlying storage. Providing guarantees to store data securely. It is ACID-compliant and transactional. PostgreSQL has a proven architecture. A strong reputation for reliability, data integrity, and correctness.\n\n## Backup and administration\n\nYou can use any standard PostgreSQL tool to manage the event store data:\n\n- [Backup and restore](https://www.postgresql.org/docs/current/static/backup-dump.html).\n- [Continuous archiving and Point-in-Time Recovery (PITR)](https://www.postgresql.org/docs/current/static/continuous-archiving.html).\n\n## Benchmarking performance\n\nRun the benchmark suite using mix with the `bench` environment, as configured in `config/bench.exs`. Logging is disabled for benchmarking.\n\n```console\nMIX_ENV=bench mix do es.reset, app.start, bench\n```\n\nExample output:\n\n```\n## AppendEventsBench\nbenchmark name                         iterations   average time\nappend events, single writer                  100   20288.68 \xc2\xb5s/op\nappend events, 10 concurrent writers           10   127416.90 \xc2\xb5s/op\nappend events, 20 concurrent writers            5   376836.60 \xc2\xb5s/op\nappend events, 50 concurrent writers            2   582350.50 \xc2\xb5s/op\n## ReadEventsBench\nbenchmark name                         iterations   average time\nread events, single reader                    500   3674.93 \xc2\xb5s/op\nread events, 10 concurrent readers             50   44653.98 \xc2\xb5s/op\nread events, 20 concurrent readers             20   73927.55 \xc2\xb5s/op\nread events, 50 concurrent readers             10   188244.80 \xc2\xb5s/op\n## SubscribeToStreamBench\nbenchmark name                         iterations   average time\nsubscribe to stream, 1 subscription           100   27687.97 \xc2\xb5s/op\nsubscribe to stream, 10 subscriptions          50   56047.72 \xc2\xb5s/op\nsubscribe to stream, 20 subscriptions          10   194164.40 \xc2\xb5s/op\nsubscribe to stream, 50 subscriptions           5   320435.40 \xc2\xb5s/op\n```\n\nAfter running two benchmarks you can compare the runs:\n\n```console\nMIX_ENV=bench mix bench.cmp -d percent\n```\n\nYou can also produce an HTML page containing a graph comparing benchmark runs:\n\n```console\nMIX_ENV=bench mix bench.graph\n```\n\nTaking the above example output, the append events benchmark is for writing 100 events in a single batch. That\'s what the \xc2\xb5s/op average time is measuring. For a single writer it takes on average 0.02s per 100 events appended (4,929 events/sec) and for 50 concurrent writers it\'s 50 x 100 events in 0.58s (8,586 events/sec).\n\nFor reading events it takes a single reader 3.67ms to read 100 events (27,211 events/sec) and for 50 concurrent readers it takes 0.19s (26,561 events/sec).\n\n### Using the benchmark suite\n\nThe purpose of the benchmark suite is to measure the performance impact of proposed changes, as opposed to looking at the raw numbers. The above figures are taken when run against a local PostgreSQL database. You can run the benchmarks against your own hardware to get indicative performance figures for the Event Store.\n\nThe benchmark suite is configured to use Erlang\'s [external term format](http://erlang.org/doc/apps/erts/erl_ext_dist.html) serialization. Using another serialization format, such as JSON, will likely have a negative impact on performance.\n\n## Contributing\n\nPull requests to contribute new or improved features, and extend documentation are most welcome.\n\nPlease follow the existing coding conventions, or refer to the [Elixir style guide](https://github.com/niftyn8/elixir_style_guide).\n\nYou should include unit tests to cover any changes.\n\n### Contributors\n\nEventStore exists thanks to the following people who have contributed.\n\n- [Andrey Akulov](https://github.com/astery)\n- [Ben Smith](https://github.com/slashdotdash)\n- [Bruce Williams](https://github.com/bruce)\n- [Chris Brodt](https://github.com/uberbrodt)\n- [Chris Martin](https://github.com/trbngr)\n- [Christian Green](https://github.com/Arthien)\n- [Craig Savolainen](https://github.com/maedhr)\n- [David Soff](https://github.com/Davidsoff)\n- [Dominik Guzei](https://github.com/DominikGuzei)\n- [Douglas Vought](https://github.com/voughtdq)\n- [Eamon Taaffe](https://github.com/eamontaaffe)\n- [Floris Huetink](https://github.com/florish)\n- [Jan Vereecken](https://github.com/javereec)\n- [Kaz Walker](https://github.com/KazW)\n- [Olafur Arason](https://github.com/olafura)\n- [Ole Michaelis](https://github.com/OleMchls)\n- [Paul Iannazzo](https://github.com/boxxxie)\n- [Rapha\xc3\xabl Lustin](https://github.com/rlustin)\n- [Samuel Roze](https://github.com/sroze)\n- [Simon Harris](https://github.com/harukizaemon)\n- [Stuart Corbishley](https://github.com/stuartc)\n- [Victor Oliveira Nascimento](https://github.com/victorolinasc)\n- [Yamil D\xc3\xadaz Aguirre](https://github.com/Yamilquery)\n\n## Need help?\n\nPlease [open an issue](https://github.com/commanded/eventstore/issues) if you encounter a problem, or need assistance.\n\nFor commercial support, and consultancy, please contact [Ben Smith](mailto:ben@10consulting.com).\n'