b'[![Build Status](https://travis-ci.org/edgurgel/poxa.svg?branch=master)](https://travis-ci.org/edgurgel/poxa)\n[![Inline docs](http://inch-ci.org/github/edgurgel/poxa.svg?branch=master)](http://inch-ci.org/github/edgurgel/poxa)\n[![Release](http://img.shields.io/github/release/edgurgel/poxa.svg)](https://github.com/edgurgel/poxa/releases/latest)\n[![Docker](https://img.shields.io/docker/pulls/edgurgel/poxa-automated.svg)](https://hub.docker.com/r/edgurgel/poxa-automated)\n# Poxa\n\nOpen Pusher implementation compatible with Pusher libraries. It\'s designed to be used as a single registered app with id, secret and key defined on start.\n\nHow do I speak \'poxa\'?\n\n[\'po\xca\x83a] - Phonetic notation\n\n[posha] : po ( potion ), sha ( shall )\n\n## Features\n\n* Public channels;\n* Private channels;\n* Presence channels;\n* Client events;\n* SSL on websocket and REST API;\n* Simple console;\n* REST API\n  * /users on presence channels\n  * /channels/:channel_name\n  * /channels\n\n## Development\n\nPoxa is a standalone elixir server implementation of the Pusher protocol.\n\nYou need [Elixir](http://elixir-lang.org) 1.9 at least and Erlang 21.0\n\nClone this repository\n\nRun\n\n```console\nmix deps.get\nmix compile\n```\n\nThe default configuration is:\n\n* Port: 8080\n* App id: \'app_id\'\n* App key: \'app_key\'\n* App secret: \'secret\'\n\n## Using Docker\n\nDocker images are automatically built by [Docker Hub](https://hub.docker.com/r/edgurgel/poxa-automated/builds/). They are available at Docker Hub: https://hub.docker.com/r/edgurgel/poxa-automated/tags/\n\nOne can generate it using: `docker build -t local/poxa .`.\n\nThe `docker run` command should look like this:\n\n```\ndocker run --rm --name poxa -p 8080:8080 edgurgel/poxa-automated:latest\n```\n\n## Configuration\n\nThe following environment variables are supported:\n\n* `PORT`\n* `POXA_APP_KEY`\n* `POXA_SECRET`\n* `POXA_APP_ID`\n* `POXA_REGISTRY_ADAPTER`\n* `WEB_HOOK`\n* `ACTIVITY_TIMEOUT`\n* `POXA_SSL`\n* `SSL_PORT`\n* `SSL_CACERTFILE`\n* `SSL_CERTFILE`\n* `SSL_KEYFILE`\n\n## Your application\n\nIf you are using the pusher-gem:\n\n```ruby\nPusher.host   = \'localhost\'\nPusher.port   = 8080\n```\n\nAnd pusher-js:\n\n```javascript\n\n// will only use WebSockets\nvar pusher = new Pusher(APP_KEY, {\n  wsHost: \'localhost\',\n  wsPort: 8080,\n  enabledTransports: ["ws", "flash"],\n  disabledTransports: ["flash"]\n});\n```\n\nA working poxa is on http://poxa.herokuapp.com, with:\n\n* App key: "app_key"\n* App id: "app_id"\n* App secret: "secret"\n* Port: 80\n\nAlso a pusher example(https://github.com/pusher/pusher-presence-demo) is running using poxa at: http://poxa-presence-chat.herokuapp.com/\n\n## Console\n\nA simple console is available on index:\n\n![Console](http://i.imgur.com/zEbZZgN.png)\n\nYou can see it in action on http://poxa.herokuapp.com using "app_key" and "secret" to connect. Now open the [poxa-presence-chat](http://poxa-presence-chat.herokuapp.com) and watch events happening!\n\n## Implementation\n\nPoxa uses [gproc](https://github.com/uwiger/gproc) extensively to register websocket connections as channels. So, when a client subscribes for channel \'example-channel\', the websocket connection (which is a elixir process) is "tagged" as **{pusher, example-channel}**. When a pusher event is triggered on the \'example-channel\', every websocket matching the tag receives the event.\n\n## Contributing\n\nIf you\'d like to hack on Poxa, start by forking my repo on Github.\n\nDependencies can be fetched running:\n\n```console\nMIX_ENV=dev mix deps.get\n```\n\nCompile:\n\n```console\nmix compile\n```\n\nThe test suite used is the ExUnit and [Mimic](http://github.com/edgurgel/mimic) to mock stuff.\n\nTo run tests:\n\n```console\nmix test\n```\n\nPull requests are greatly appreciated.\n\n## TODO\n\n* [ ] SockJS support;\n* [x] Complete REST api;\n* [x] Mimic pusher error codes;\n* [x] Integration test using pusher-js or other client library;\n* [x] Web hooks;\n* [x] Add \'Vacated\' and \'Occupied\' events to Console;\n* [X] Use `gproc` to generate Console events so other handlers can be attached (Web hook for example);\n* [ ] Turn Poxa on a distributed server with multiple nodes;\n\n## Pusher\n\nPusher is an excellent service and you should use it in production.\n\n## Acknowledgements\n\nThanks to [@bastos](https://github.com/bastos) for the project name :heart:!\n\n## Who is using it?\n\n* [Waffle Takeout](https://takeout.waffle.io/)\n* [Tinfoil Security](https://tinfoilsecurity.com/)\n* Add your project/service here! Send a PR! :tada:\n'