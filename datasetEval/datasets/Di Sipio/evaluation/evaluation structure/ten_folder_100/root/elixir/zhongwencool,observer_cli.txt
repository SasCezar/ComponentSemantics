b'\n\n-----------------\n# observer_cli\n[![Build Status](https://travis-ci.org/zhongwencool/observer_cli.svg?branch=master)](https://travis-ci.org/zhongwencool/observer_cli)\n[![GitHub tag](https://img.shields.io/github/tag/zhongwencool/observer_cli.svg)](https://github.com/zhongwencool/observer_cli)\n[![MIT License](https://img.shields.io/hexpm/l/observer_cli.svg)](https://hex.pm/packages/observer_cli)\n[![Hex.pm Version](https://img.shields.io/hexpm/v/observer_cli.svg)](https://hex.pm/packages/observer_cli)\n[![Hex.pm Downloads](https://img.shields.io/hexpm/dt/observer_cli.svg)](https://hex.pm/packages/observer_cli)\n\nVisualize Erlang/Elixir Nodes On The Command Line base on [recon](https://github.com/ferd/recon).\n[Document in detail](https://hexdocs.pm/observer_cli/).\n\n## Goal\n- Provide a high-performance tool usable both in development and production settings.\n- Focus on important and detailed information about real-time running system.\n- Keep minimal consumption.\n\n------------------\n### Installation\n\n**Erlang**\n```erlang\n%% rebar.config\n{deps, [observer_cli]}\n%% erlang.mk\ndep_observer_cli = hex 1.5.3\n```\n**Elixir**\n```elixir\n# mix.exs\n   def deps do\n     [{:observer_cli, "~> 1.5"}]\n   end\n```\n------------------\n### How-To\n#### Try in local shell.\n\n```erlang\n%% rebar3 project\nrebar3 shell\n1> observer_cli:start().\n%% mix project\niex -S mix\niex(1)> :observer_cli.start\n```\n####  Monitor remote node\n```erlang\n%% rebar3 project\nrebar3 shell --name \'observer_cli@127.0.0.1\'\n1> observer_cli:start(\'target@host\', \'magic_cookie\').\n%% mix project\niex --name "observer_cli@127.0.0.1" -S mix\niex(1)> :observer_cli.start(:\'target@host\', :\'magic_cookie\')\n```\n:exclamation: **ensure observer_cli application been loaded on target node.**\n\n#### Try in Elixir 1.9.x release\n```erlang\n%% create elixir release\nmix release\n%% rpc current node\n_build/dev/rel/example/bin/example rpc ":observer_cli.start"\n```\n:exclamation: **ensure observer_cli application been loaded on current node.**\n\n#### Escriptize\n1. cd path/to/observer_cli/\n2. `rebar3 escriptize` to generate an escript executable containing the project\'s and its dependencies\' BEAM files.\n    Place script(`_build/default/bin/observer_cli`) anywhere in your path and use `observer_cli` command.\n3. `observer_cli TARGETNODE [TARGETCOOKIE REFRESHMS]` to monitor remote node.\n\n----------------\n### DEMO\n<img src="https://user-images.githubusercontent.com/3116225/39091211-55554414-4622-11e8-8b28-bd3b5c7e17a6.jpg" width="100%" alt="Home"> </img>\n<img src="https://user-images.githubusercontent.com/3116225/39091212-55870e22-4622-11e8-99e7-8e8c56223765.jpg" width="100%" alt="Network"></img>\n<img src="https://user-images.githubusercontent.com/3116225/39091213-55b9aaf8-4622-11e8-91ed-b37c04e20173.jpg" width="100%" alt="System"></img>\n<img src="https://user-images.githubusercontent.com/3116225/39091214-55eae91a-4622-11e8-95c2-bc514219b5d9.jpg" width="100%" alt="Ets"></img>\n<img src="https://user-images.githubusercontent.com/3116225/39091215-5637b4fc-4622-11e8-9639-99405318fc09.jpg" width="100%" alt="Mnesia"></img>\n<img src="https://user-images.githubusercontent.com/3116225/39091216-567ddab8-4622-11e8-8b32-db0f621d6b90.jpg" width="100%" alt="Application"></img>\n<img src="https://user-images.githubusercontent.com/3116225/39091217-57258844-4622-11e8-9b21-2a7d661bc623.jpg" width="100%" alt="Document"></img>\n<img src="https://user-images.githubusercontent.com/3116225/39091219-66ba0398-4622-11e8-81b1-f489251f111a.jpg" width="100%" alt="Process"></img>\n<img src="https://user-images.githubusercontent.com/3116225/39091218-6687caf4-4622-11e8-86c7-190c2106d41e.jpg" width="100%" alt="Port"></img>\n\n### How to write your own plugin?\nIf you need to customize some of your internal metrics and integrate it into observer_ci,\nyou only need to write a `observer_cli_plugin` behaviour in a few simple steps to get a nice presentation.\n1. Configure observer_cli\xef\xbc\x8ctell observer_cli how to find your plugin.\n```erlang\n%% module       - Specific module implements plugin behavior. It\'s mandatory.\n%% title        - Menu title. It\'s mandatory.\n%% shortcut     - Switch plugin by shortcut. It\'s mandatory.\n%% interval     - Refresh interval ms. It\'s optional. default is 1500ms.\n%% sort_column  - Sort the sheet by this index. It\'s optional default is 2.\n\n{plugins,\n  [\n    #{module => observer_cli_plug_behaviour1, title => "XPlug",\n      interval => 1500, shortcut => "X", sort_column => 3},\n    #{module => observer_cli_plug_behaviour2, title => "YPlug",\n      interval => 1600, shortcut => "Y", sort_column => 3}\n  ]\n}\n\n```\n<img src="https://user-images.githubusercontent.com/3116225/46514684-ebff7280-c891-11e8-820e-90c3302f9108.jpg" width="90%"></img>\n\n2. Write observer_cli_plugin behaviour.\nobserver_cli_plugin has 3 callbacks.\n\n2.1 attributes.\n```erlang\n-callback atributes(PrevState) -> {[Rows], NewState} when\n    Rows :: #{content => string()|integer()|{byte, pos_integer()},\n              width => pos_integer(), color => binary()}.\n```\nfor example:\n```erlang\nattributes(PrevState) ->\n    Attrs =\n    [\n        [\n            #{content => "XXX Ets Size", width => 20},\n            #{content => ets:info(xxx,size), width => 10},\n            #{content => "Pool1 Size", width => 15},\n            #{content => application:get_env(app,pool1_size), width => 30},\n            #{content => "XYZ1 Process Mem", width => 18,\n            #{content => {byte, element(2, erlang:process_info(xyz1, memory))}, width => 16}\n        ],\n        [\n            #{content => "YYY Ets Size", width =>20},\n            #{content => ets:info(yyy,size), width => 10},\n            #{content => "Pool2 Size", width =>15},\n            #{content => application:get_env(app,pool2_size), width => 30},\n            #{content =>"XYZ2 Process Mem", width =>18},\n            #{content => {byte, element(2, erlang:process_info(xyz2, memory))}, width => 16}\n        ],\n        [\n            #{content => "ZZZ Ets Size", width =>20},\n            #{content => ets:info(zzz,size), width => 10},\n            #{content => "Pool3 Size", width =>15},\n            #{content => application:get_env(app,pool3_size), width => 30},\n            #{content => "XYZ3 Process Mem", width =>18},\n            #{content => {byte, element(2, erlang:process_info(xyz3, memory))}, width => 16}\n        ]\n    ],\n    NewState = PrevState,\n    {Attrs, NewState}.\n```\n<img src="https://user-images.githubusercontent.com/3116225/46514685-ebff7280-c891-11e8-915e-67f558694328.jpg" width="90%"></img>\n\n```erlang\n-callback sheet_header() -> [SheetHeader] when\n    SheetHeader :: #{title => string(), width => pos_integer(), shortcut => string()}.\n```\nfor example:\n```erlang\nsheet_header() ->\n    [\n        #{title => "Pid", width => 25},\n        #{title => "Status", width => 25},\n        #{title => "Memory", width => 24, shortcut => "S"},\n        #{title => "Reductions", width => 24, shortcut => "R"},\n        #{title => "Message Queue Len", width => 25, shortcut => "Q"}\n    ].\n```\n\n```erlang\n-callback sheet_body(PrevState) -> {[SheetBody], NewState} when\n    PrevState :: any(),\n    SheetBody :: list(),\n    NewState :: any().\n\n```\n\nfor example:\n\n```erlang\nsheet_body(PrevState) ->\n    Body =\n      [begin\n         [\n             Pid,\n             element(2, erlang:process_info(Pid, status)),\n             element(2, erlang:process_info(Pid, memory)),\n             element(2, erlang:process_info(Pid, reductions)),\n             element(2, erlang:process_info(Pid, message_queue_len))\n         ]\n     end||Pid <- erlang:processes()\n    ],\n    NewState = PrevState,\n    {Body, NewState}.\n```\n\nSupport F/B to page up/down.\n\n<img src="https://user-images.githubusercontent.com/3116225/46514686-ec980900-c891-11e8-8232-f6ad98fd2e5c.jpg" width="90%"></img>\n\n<img src="https://user-images.githubusercontent.com/3116225/46514783-96779580-c892-11e8-872a-1a44e4d92b76.jpg" width="90%"></img>\n\n[A more specific plugin](https://github.com/zhongwencool/os_stats) can collect linux system information such as kernel vsn, loadavg, disk, memory usage, cpu utilization, IO statistics.\n\n----------------\n### Changelog\n- 1.5.2\n  - Use erlang:system_info(otp_release) when can\'t find `OTP_VERSION` file for the full version.\n- 1.5.1\n  - Hide mnesia tab when it\'s not started\n  - Show specific erl version such as \'22.0.5\'\n- 1.5.0\n  - Bump Recon to 2.5.0\n- 1.4.5\n  - Include a minimal mix.exs build file\n  - Make sure EXIT message has been clear\n- 1.4.4\n  - Make sure connection errors can be handled\n- 1.4.3\n  - Bump Recon to 2.4.0\n- 1.4.2\n  - Hidden schedule process bar when core > 100.\n  - Allow to compile escript w/ inet6 based distribution.\n  - Rewrite plugin callback, rename kv_label/0 to attributes/1.\n- 1.4.1\n  - Fixed ets view memory usage wrong.\n  - mnesia view memory usage According to bytes.\n- 1.4.0\n  - Support write your own plugin.\n- 1.3.4\n  - View(ets mnesia) support page down/up; support sort by memory or size.\n  - Fixed pause crash.\n  - Make refresh interval configurable.\n- 1.3.3\n  - fixed io:format(Format,Args) Format not support iolist OTP R21\n- 1.3.2\n  - Make sure all observer_cli process exit when quit.\n  - Upgrade recon to 2.3.6\n- 1.3.1\n  - Add atom limit/count in home.\n  - Escript support short name and long name.\n  - Fixed store process not exit.\n  - [Upgrade recon to 2.3.5](https://github.com/ferd/recon/commit/e0c3614334589e375f8b1492f404e4b764fe35e7)\n- 1.3.0\n  - Rewrite Network/Process view.\n  - Support PageDown/PageUp for top n list.\n  - Escript auto load observer_cli when it\'s not load on target node.\n- 1.2.2\n  - fix schedule number >= 32 display wrong.\n  - improve memory(byte/kilobyte/megabyte/gigabyte) unit.\n- 1.2.1\n  - fixed autosize not work.\n  - try best to make color adjust all platform.\n- 1.2.0\n  - add application GUI.\n  - Rearrange GUI and optimize render.\n  - Always automatically adapt to the window size.\n\n- 1.1.0\n  - Support escript, `observer_cli <TARGETNODE> <COOKIE>`\n\n- 1.0.9\n  - Upgrade rebar3 to 3.3.3 for publish hex repo.\n\n----------------\n### Contributors\n| [<img src="https://avatars2.githubusercontent.com/u/3116225?v=4" width="50px;"/><br /><sub>zhongwencool</sub>](https://tried.cc)<br />[\xf0\x9f\x92\xbb](https://github.com/zhongwencool/observer_cli/commits?author=zhongwencool) | [<img src="https://avatars2.githubusercontent.com/u/645514?v=4" width="50px;"/><br /><sub>Dimitrios Zorbas</sub>](https://github.com/Zorbash)<br />[\xf0\x9f\x92\xbb](https://github.com/zhongwencool/observer_cli/commits?author=Zorbash) | [<img src="https://avatars1.githubusercontent.com/u/3191073?v=4" width="50px;"/><br /><sub>taotao</sub>](https://github.com/redink)<br />[\xf0\x9f\x92\xbb](https://github.com/zhongwencool/observer_cli/commits?author=redink) | [<img src="https://avatars1.githubusercontent.com/u/1520926?v=4" width="50px;"/><br /><sub>Trevor Brown</sub>](https://github.com/Stratus3D)<br />[\xf0\x9f\x92\xbb](https://github.com/zhongwencool/observer_cli/commits?author=Stratus3D) | [<img src="https://avatars3.githubusercontent.com/u/164324?s=400&v=4" width="50px;"/><br /><sub>Zaiming Shi</sub>](https://github.com/zmstone)<br />[\xf0\x9f\x92\xbb](https://github.com/zhongwencool/observer_cli/commits?author=zmstone) |\n| :---: | :---: | :---: | :---: | :---: |\n\n--------------------\n### License\nSee the [LICENSE](https://github.com/zhongwencool/observer_cli/blob/master/LICENSE) file for license rights and limitations (MIT).\n'