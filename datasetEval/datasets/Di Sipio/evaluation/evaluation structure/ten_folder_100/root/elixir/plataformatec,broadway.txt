b'# Broadway\n\nBuild concurrent and multi-stage data ingestion and data processing pipelines with Elixir. It allows developers to consume data efficiently from different sources, known as producers, such as Amazon SQS, RabbitMQ, and others.\n\nThe name Broadway was taken from the famous [Broadway street](https://en.wikipedia.org/wiki/Broadway_theatre) in New York City, as we hope to be equally renowned by our stages and producers. :)\n\nDocumentation, examples, and how tos can be found at [https://hexdocs.pm/broadway](https://hexdocs.pm/broadway).\n\n## Built-in features\n\nBroadway takes the burden of defining concurrent GenStage topologies and provide a simple configuration API that automatically defines concurrent producers, concurrent processing, batch handling, and more, leading to both time and cost efficient ingestion and processing of data. It features:\n\n  * Back-pressure\n  * Automatic acknowledgements at the end of the pipeline\n  * Batching\n  * Fault tolerance with minimal data loss\n  * Graceful shutdown\n  * Built-in testing\n  * Custom failure handling\n  * Ordering and partitioning\n  * Rate-limiting\n  * Statistics / Metrics (TODO)\n  * Back-off (TODO)\n\n## Installation\n\nAdd `:broadway` to the list of dependencies in `mix.exs`:\n\n```elixir\ndef deps do\n  [\n    {:broadway, "~> 0.4.0"}\n  ]\nend\n```\n\n## Official Broadway Producers\n\nCurrently we officially support three Broadway producers:\n\n  * Amazon SQS: [Source](https://github.com/plataformatec/broadway_sqs) - [Guide](https://hexdocs.pm/broadway/amazon-sqs.html)\n  * Google Cloud Pub/Sub: [Source](https://github.com/plataformatec/broadway_cloud_pub_sub) - [Guide](https://hexdocs.pm/broadway/google-cloud-pubsub.html)\n  * RabbitMQ: [Source](https://github.com/plataformatec/broadway_rabbitmq) - [Guide](https://hexdocs.pm/broadway/rabbitmq.html)\n\nMore producers are on the way.\n\n### A quick example: SQS integration\n\nAssuming you have added [`broadway_sqs`](https://github.com/plataformatec/broadway_sqs) as a dependency and configured your SQS credentials accordingly, you can consume Amazon SQS events in only 20 LOCs:\n\n```elixir\ndefmodule MyBroadway do\n  use Broadway\n\n  alias Broadway.Message\n\n  def start_link(_opts) do\n    Broadway.start_link(__MODULE__,\n      name: __MODULE__,\n      producer: [\n        module: {BroadwaySQS.Producer, queue_url: "https://us-east-2.queue.amazonaws.com/100000000001/my_queue"}\n      ],\n      processors: [\n        default: [stages: 50]\n      ],\n      batchers: [\n        s3: [stages: 5, batch_size: 10, batch_timeout: 1000]\n      ]\n    )\n  end\n\n  def handle_message(_processor_name, message, _context) do\n    message\n    |> Message.update_data(&process_data/1)\n    |> Message.put_batcher(:s3)\n  end\n\n  def handle_batch(:s3, messages, _batch_info, _context) do\n    # Send batch of messages to S3\n  end\n\n  defp process_data(data) do\n    # Do some calculations, generate a JSON representation, process images.\n  end\nend\n```\n\nOnce your Broadway module is defined, you just need to add it as a child of your application supervision tree as `{MyBroadway, []}`.\n\n## Non-official (Off-Broadway) Producers\n\nFor those interested in rolling their own Broadway Producers (which we actively encourage!), we recommend using the `OffBroadway` namespace, mirroring the [Off-Broadway theaters](https://en.wikipedia.org/wiki/Off-Broadway). For example, if you want to publish your own integration with Amazon SQS, you can package it as `off_broadway_sqs`, which uses the `OffBroadway.SQS` namespace.\n\nThe following Off-Broadway libraries are available (feel free to send a PR adding your own in alphabetical order):\n\n  * [off_broadway_kafka](https://github.com/bbalser/off_broadway_kafka): [Guide](https://hexdocs.pm/off_broadway_kafka/)\n  * [off_broadway_redis](https://github.com/amokan/off_broadway_redis): [Guide](https://hexdocs.pm/off_broadway_redis/)\n\n## Comparison to Flow\n\nYou may also be interested in [Flow by Plataformatec](https://github.com/plataformatec/flow). Both Broadway and Flow are built on top of GenStage. Flow is a more general abstraction than Broadway that focuses on data as a whole, providing features like aggregation, joins, windows, etc. Broadway focuses on events and on operational features, such as metrics, automatic acknowledgements, failure handling, and so on.\n\n## License\n\nCopyright 2019 Plataformatec\n\nLicensed under the Apache License, Version 2.0 (the "License");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an "AS IS" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n'