b'# Jason\n\nA blazing fast JSON parser and generator in pure Elixir.\n\nThe parser and generator are at least twice as fast as other Elixir/Erlang libraries\n(most notably `Poison`).\nThe performance is comparable to `jiffy`, which is implemented in C as a NIF.\nJason is usually only twice as slow.\n\nBoth parser and generator fully conform to\n[RFC 8259](https://tools.ietf.org/html/rfc8259) and\n[ECMA 404](http://www.ecma-international.org/publications/standards/Ecma-404.htm)\nstandards. The parser is tested using [JSONTestSuite](https://github.com/nst/JSONTestSuite).\n\n## Installation\n\nThe package can be installed by adding `jason` to your list of dependencies\nin `mix.exs`:\n\n```elixir\ndef deps do\n  [{:jason, "~> 1.1"}]\nend\n```\n\n## Basic Usage\n\n``` elixir\niex(1)> Jason.encode!(%{"age" => 44, "name" => "Steve Irwin", "nationality" => "Australian"})\n"{\\"age\\":44,\\"name\\":\\"Steve Irwin\\",\\"nationality\\":\\"Australian\\"}"\n\niex(2)> Jason.decode!(~s({"age":44,"name":"Steve Irwin","nationality":"Australian"}))\n%{"age" => 44, "name" => "Steve Irwin", "nationality" => "Australian"}\n```\n\nFull documentation can be found at [https://hexdocs.pm/jason](https://hexdocs.pm/jason).\n\n## Use with other libraries\n\n### Postgrex\n\nVersions starting at 0.14.0 use `Jason` by default. For earlier versions, please refer to\n[previous versions of this document](https://github.com/michalmuskala/jason/tree/v1.1.2#postgrex).\n\n### Ecto\n\nVersions starting at 3.0.0 use `Jason` by default. For earlier versions, please refer to\n[previous versions of this document](https://github.com/michalmuskala/jason/tree/v1.1.2#ecto).\n\n### Plug (and Phoenix)\n\nPhoenix starting at 1.4.0 uses `Jason` by default. For earlier versions, please refer to\n[previous versions of this document](https://github.com/michalmuskala/jason/tree/v1.1.2#plug-and-phoenix).\n\n### Absinthe\n\nYou need to pass the `:json_codec` option to `Absinthe.Plug`\n\n```elixir\n# When called directly:\nplug Absinthe.Plug,\n  schema: MyApp.Schema,\n  json_codec: Jason\n\n# When used in phoenix router:\nforward "/api",\n  to: Absinthe.Plug,\n  init_opts: [schema: MyApp.Schema, json_codec: Jason]\n```\n\n## Benchmarks\n\nDetailed benchmarks (including memory measurements):\nhttps://gist.github.com/michalmuskala/4d64a5a7696ca84ac7c169a0206640d5\n\nHTML reports for the benchmark (only performance measurements):\nhttp://michal.muskala.eu/jason/decode.html and http://michal.muskala.eu/jason/encode.html\n\n### Running\n\nBenchmarks against most popular Elixir & Erlang json libraries can be executed after\ngoing into the `bench/` folder and then executing `mix bench.encode` and `mix bench.decode`.\nA HTML report of the benchmarks (after their execution) can be found in\n`bench/output/encode.html` and `bench/output/decode.html` respectively.\n\n## Differences to Poison\n\nJason has a couple feature differences compared to Poison.\n\n  * Jason follows the JSON spec more strictly, for example it does not allow\n    unescaped newline characters in JSON strings - e.g. `"\\"\\n\\""` will\n    produce a decoding error.\n  * no support for decoding into data structures (the `as:` option).\n  * no built-in encoders for `MapSet`, `Range` and `Stream`.\n  * no support for encoding arbitrary structs - explicit implementation\n    of the `Jason.Encoder` protocol is always required.\n  * different pretty-printing customisation options (default `pretty: true` works the same)\n\nIf you require encoders for any of the unsupported collection types, I suggest\nadding the needed implementations directly to your project:\n\n```elixir\ndefimpl Jason.Encoder, for: [MapSet, Range, Stream] do\n  def encode(struct, opts) do\n    Jason.Encode.list(Enum.to_list(struct), opts)\n  end\nend\n```\n\nIf you need to encode some struct that does not implement the protocol,\nif you own the struct, you can derive the implementation specifying\nwhich fields should be encoded to JSON:\n\n```elixir\n@derive {Jason.Encoder, only: [....]}\ndefstruct # ...\n```\n\nIt is also possible to encode all fields, although this should be\nused carefully to avoid accidentally leaking private information\nwhen new fields are added:\n\n```elixir\n@derive Jason.Encoder\ndefstruct # ...\n```\n\nFinally, if you don\'t own the struct you want to encode to JSON,\nyou may use `Protocol.derive/3` placed outside of any module:\n\n```elixir\nProtocol.derive(Jason.Encoder, NameOfTheStruct, only: [...])\nProtocol.derive(Jason.Encoder, NameOfTheStruct)\n```\n\n## License\n\nJason is released under the Apache License 2.0 - see the [LICENSE](LICENSE) file.\n\nSome elements of tests and benchmarks have their origins in the\n[Poison library](https://github.com/devinus/poison) and were initially licensed under [CC0-1.0](https://creativecommons.org/publicdomain/zero/1.0/).\n'