b'# Manifold\n\n[![Master](https://travis-ci.org/discordapp/manifold.svg?branch=master)](https://travis-ci.org/discordapp/manifold)\n[![Hex.pm Version](http://img.shields.io/hexpm/v/manifold.svg?style=flat)](https://hex.pm/packages/manifold)\n\nErlang and Elixir make it very easy to send messages between processes even across the network, but there are a few pitfalls.\n\n- Sending a message to many PIDs across the network also copies the message across the network that many times.\n- Send calls cost about 70 \xc2\xb5s/op so doing them in a loop eventually gets too expensive.\n\n[Discord](https://discordapp.com) runs a single `GenServer` per Discord server and some of these have over 30,000 PIDs connected\nto them from many different Erlang nodes. Increasingly we noticed some of them getting behind on processing their message queues\nand the culprit was the cost of 70 \xc2\xb5s per `send/2` call multiplied by connected sessions. How could we solve this?\n\nInspired by a [blog post](http://www.ostinelli.net/boost-message-passing-between-erlang-nodes/) about boosting performance of\nmessage passing between nodes, Manifold was born. Manifold distributes the work of sending messages to the remote nodes of the\nPIDs, which guarantees that the sending processes at most only calls `send/2` equal to the number of involved remote nodes.\nManifold does this by first grouping PIDs by their remote node and then sending to `Manifold.Partitioner` on each of those nodes.\nThe partitioner then consistently hashes the PIDs using `:erlang.phash2/2`, groups them by number of cores, sends to child\nworkers, and finally those workers send to the actual PIDs. This ensures the partitioner does not get overloaded and still provides\nthe linearizability guaranteed by `send/2`.\n\nThe results were great! We observed packets/sec drop by half immediately after deploying. The Discord servers in question also\nwere finally able to keep up with their message queues.\n\n![Packets Out Reduction](priv/packets.png)\n\n## Usage\n\nAdd it to `mix.exs`\n\n```elixir\ndefp deps do\n  [{:manifold, "~> 1.0"}]\nend\n```\n\nThen just use it like the normal `send/2` except it can also take a list of PIDs.\n\n```elixir\nManifold.send(self(), :hello)\nManifold.send([self(), self()], :hello)\n```\n\n### Configuration\nManifold takes a single configuration option, which sets the module it dispatches to actually call send. The default\nis GenServer. To set this variable, add the following to your `config.exs`:\n\n```elixir\nconfig :manifold, gen_module: MyGenModule\n```\n\nIn the above instance, `MyGenModule` must define a `cast/2` function that matches the types of `GenServer.cast`.\n\n\n## License\n\nManifold is released under [the MIT License](LICENSE).\nCheck [LICENSE](LICENSE) file for more information.\n'