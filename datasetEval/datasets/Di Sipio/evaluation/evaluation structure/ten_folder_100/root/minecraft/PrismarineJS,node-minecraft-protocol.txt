b'# minecraft protocol\n[![NPM version](https://img.shields.io/npm/v/minecraft-protocol.svg)](https://www.npmjs.com/package/minecraft-protocol)\n[![Build Status](https://img.shields.io/circleci/project/github/PrismarineJS/node-minecraft-protocol/master.svg)](https://circleci.com/gh/PrismarineJS/node-minecraft-protocol)\n[![Discord](https://img.shields.io/badge/chat-on%20discord-brightgreen.svg)](https://discord.gg/GsEFRM8)\n[![Gitter](https://img.shields.io/badge/chat-on%20gitter-brightgreen.svg)](https://gitter.im/PrismarineJS/general)\n[![Irc](https://img.shields.io/badge/chat-on%20irc-brightgreen.svg)](https://irc.gitter.im/)\n[![Greenkeeper badge](https://badges.greenkeeper.io/PrismarineJS/node-minecraft-protocol.svg)](https://greenkeeper.io/)\n[![Try it on gitpod](https://img.shields.io/badge/try-on%20gitpod-brightgreen.svg)](https://gitpod.io/#https://github.com/PrismarineJS/node-minecraft-protocol)\n\nParse and serialize minecraft packets, plus authentication and encryption.\n\n## Features\n\n * Supports Minecraft PC version 1.7.10, 1.8.8, 1.9 (15w40b, 1.9, 1.9.1-pre2, 1.9.2, 1.9.4),\n  1.10 (16w20a, 1.10-pre1, 1.10, 1.10.1, 1.10.2), 1.11 (16w35a, 1.11, 1.11.2), 1.12 (17w15a, 17w18b, 1.12-pre4, 1.12, 1.12.1, 1.12.2), and 1.13 (17w50a, 1.13, 1.13.1, 1.13.2-pre1, 1.13.2-pre2, 1.13.2) and 1.14(1.14, 1.14.1, 1.14.3, 1.14.4)\n * Parses all packets and emits events with packet fields as JavaScript\n   objects.\n * Send a packet by supplying fields as a JavaScript object.\n * Client\n   - Authenticating and logging in\n   - Encryption\n   - Compression\n   - Both online and offline mode\n   - Respond to keep-alive packets.\n   - Ping a server for status\n * Server\n   - Online/Offline mode\n   - Encryption\n   - Compression\n   - Handshake\n   - Keep-alive checking\n   - Ping status\n * Robust test coverage.\n * Optimized for rapidly staying up to date with Minecraft protocol updates.\n\n## Third Party Plugins\n\nnode-minecraft-protocol is pluggable.\n\n* [minecraft-protocol-forge](https://github.com/PrismarineJS/node-minecraft-protocol-forge) add forge support to minecraft-protocol\n\n## Projects Using node-minecraft-protocol\n\n * [mineflayer](https://github.com/PrismarineJS/mineflayer/) - create minecraft\n   bots with a stable, high level API.\n * [mcserve](https://github.com/andrewrk/mcserve) - runs and monitors your\n   minecraft server, provides real-time web interface, allow your users to\n   create bots.\n * [flying-squid](https://github.com/PrismarineJS/flying-squid) create minecraft\n   servers with a high level API, also a minecraft server by itself.\n\n## Usage\n\n### Echo client example\n\n```js\nvar mc = require(\'minecraft-protocol\');\nvar client = mc.createClient({\n  host: "localhost",   // optional\n  port: 25565,         // optional\n  username: "email@example.com",\n  password: "12345678",\n});\nclient.on(\'chat\', function(packet) {\n  // Listen for chat messages and echo them back.\n  var jsonMsg = JSON.parse(packet.message);\n  if(jsonMsg.translate == \'chat.type.announcement\' || jsonMsg.translate == \'chat.type.text\') {\n    var username = jsonMsg.with[0].text;\n    var msg = jsonMsg.with[1];\n    if(username === client.username) return;\n    client.write(\'chat\', {message: msg});\n  }\n});\n```\n\nIf the server is in offline mode, you may leave out the `password` option.\n\n### Hello World server example\n\n```js\nvar mc = require(\'minecraft-protocol\');\nvar server = mc.createServer({\n  \'online-mode\': true,   // optional\n  encryption: true,      // optional\n  host: \'0.0.0.0\',       // optional\n  port: 25565,           // optional\n});\nserver.on(\'login\', function(client) {\n  client.write(\'login\', {\n    entityId: client.id,\n    levelType: \'default\',\n    gameMode: 0,\n    dimension: 0,\n    difficulty: 2,\n    maxPlayers: server.maxPlayers,\n    reducedDebugInfo: false\n  });\n  client.write(\'position\', {\n    x: 0,\n    y: 1.62,\n    z: 0,\n    yaw: 0,\n    pitch: 0,\n    flags: 0x00\n  });\n  var msg = {\n    translate: \'chat.type.announcement\',\n    "with": [\n      \'Server\',\n      \'Hello, world!\'\n    ]\n  };\n  client.write("chat", { message: JSON.stringify(msg), position: 0 });\n});\n```\n\n## Installation\n\n`npm install minecraft-protocol`\n\n## Documentation\n\nSee [doc](docs/API.md)\n\n\n## Testing\n\n* Ensure your system has the `java` executable in `PATH`.\n* `MC_SERVER_JAR_DIR=some/path/to/store/minecraft/server/ MC_USERNAME=email@example.com MC_PASSWORD=password npm test`\n\n## Debugging\n\nYou can enable some protocol debugging output using `DEBUG` environment variable:\n\n```bash\nDEBUG="minecraft-protocol" node [...]\n```\n\nOn windows :\n```\nset DEBUG=minecraft-protocol\nnode your_script.js\n```\n\n## Contribute\n\nPlease read https://github.com/PrismarineJS/prismarine-contribute\n\n## History\n\nSee [history](HISTORY.md)\n\n## Related\n\n* [node-rcon](https://github.com/pushrax/node-rcon) can be used to access the rcon server in the minecraft server\n* [map-colors][aresmapcolor] can be used to convert any image into a buffer of minecraft compatible colors\n\n[aresmapcolor]: https://github.com/AresRPG/aresrpg-map-colors\n'