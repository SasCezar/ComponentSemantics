b'# Image Deduplicator (imagededup)\n\n[![Build Status](https://dev.azure.com/axelspringerai/Public/_apis/build/status/idealo.imagededup?branchName=master)](https://dev.azure.com/axelspringerai/Public/_build/latest?definitionId=1&branchName=master)\n[![Build Status](https://travis-ci.org/idealo/imagededup.svg?branch=master)](https://travis-ci.org/idealo/imagededup)\n[![Docs](https://img.shields.io/badge/docs-online-brightgreen)](https://idealo.github.io/imagededup/)\n[![codecov](https://codecov.io/gh/idealo/imagededup/branch/master/graph/badge.svg)](https://codecov.io/gh/idealo/imagededup)\n[![PyPI Version](https://img.shields.io/pypi/v/imagededup)](https://pypi.org/project/imagededup/)\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://github.com/idealo/imagededup/blob/master/LICENSE)\n\nimagededup is a python package that simplifies the task of finding **exact** and **near duplicates** in an image collection.\n\n<p align="center">\n  <img src="readme_figures/mona_lisa.png" width="600" />\n</p>\n\nThis package provides functionality to make use of hashing algorithms that are particularly good at finding exact\nduplicates as well as convolutional neural networks which are also adept at finding near duplicates. An evaluation\nframework is also provided to judge the quality of deduplication for a given dataset.\n\nFollowing details the functionality provided by the package:\n\n- Finding duplicates in a directory using one of the following algorithms:\n    - [Convolutional Neural Network](https://arxiv.org/abs/1704.04861) (CNN)\n    - [Perceptual hashing](http://www.hackerfactor.com/blog/index.php?/archives/432-Looks-Like-It.html) (PHash)\n    - [Difference hashing](http://www.hackerfactor.com/blog/index.php?/archives/529-Kind-of-Like-That.html) (DHash)\n    - [Wavelet hashing](https://fullstackml.com/wavelet-image-hash-in-python-3504fdd282b5) (WHash)\n    - [Average hashing](http://www.hackerfactor.com/blog/index.php?/archives/432-Looks-Like-It.html) (AHash)\n- Generation of encodings for images using one of the above stated algorithms.\n- Framework to evaluate effectiveness of deduplication  given a ground truth mapping.\n- Plotting duplicates found for a given image file.\n\nDetailed documentation for the package can be found at: [https://idealo.github.io/imagededup/](https://idealo.github.io/imagededup/)\n\nimagededup is compatible with Python 3.6+ and runs on Linux, MacOS X and Windows. \nIt is distributed under the Apache 2.0 license.\n\n## \xf0\x9f\x93\x96 Contents\n- [Installation](#%EF%B8%8F-installation)\n- [Quick Start](#-quick-start)\n- [Contribute](#-contribute)\n- [Citation](#-citation)\n- [Maintainers](#-maintainers)\n- [License](#-copyright)\n\n## \xe2\x9a\x99\xef\xb8\x8f Installation\nThere are two ways to install imagededup:\n\n* Install imagededup from PyPI (recommended):\n\n```\npip install imagededup\n```\n\n> \xe2\x9a\xa0\xef\xb8\x8f **Note**: imagededup comes with TensorFlow CPU-only support by default. If you have GPUs, you should rather\n> install the TensorFlow version with GPU support especially when you use CNN to find duplicates. It\'s way faster. See the\n> [TensorFlow guide](https://www.tensorflow.org/install/gpu) for more details on how to install it.\n\n* Install imagededup from the GitHub source:\n\n```bash\ngit clone https://github.com/idealo/imagededup.git\ncd imagededup\npip install "cython>=0.29"\npython setup.py install\n```  \n\n## \xf0\x9f\x9a\x80 Quick Start\n\nIn order to find duplicates in an image directory using perceptual hashing, following workflow can be used:\n\n- Import perceptual hashing method\n\n```python\nfrom imagededup.methods import PHash\nphasher = PHash()\n```\n\n- Generate encodings for all images in an image directory\n\n```python\nencodings = phasher.encode_images(image_dir=\'path/to/image/directory\')\n```\n\n- Find duplicates using the generated encodings\n\n```python\nduplicates = phasher.find_duplicates(encoding_map=encodings)\n```\n\n- Plot duplicates obtained for a given file (eg: \'ukbench00120.jpg\') using the duplicates dictionary\n\n```python\nfrom imagededup.utils import plot_duplicates\nplot_duplicates(image_dir=\'path/to/image/directory\',\n                duplicate_map=duplicates,\n                filename=\'ukbench00120.jpg\')\n```\nThe output looks as below:\n\n<p align="center">\n  <img src="readme_figures/plot_dups.png" width="600" />\n</p>\n\n\nThe complete code for the workflow is:\n```python\nfrom imagededup.methods import PHash\nphasher = PHash()\n\n# Generate encodings for all images in an image directory\nencodings = phasher.encode_images(image_dir=\'path/to/image/directory\')\n\n# Find duplicates using the generated encodings\nduplicates = phasher.find_duplicates(encoding_map=encodings)\n\n# plot duplicates obtained for a given file using the duplicates dictionary\nfrom imagededup.utils import plot_duplicates\nplot_duplicates(image_dir=\'path/to/image/directory\',\n                duplicate_map=duplicates,\n                filename=\'ukbench00120.jpg\')\n```\nFor more examples, refer [this](https://github.com/idealo/imagededup/tree/master/examples) part of the\nrepository.\n\nFor more detailed usage of the package functionality, refer: [https://idealo.github.io/imagededup/](https://idealo.github.io/imagededup/)\n\n## \xf0\x9f\xa4\x9d Contribute\nWe welcome all kinds of contributions.\nSee the [Contribution](CONTRIBUTING.md) guide for more details.\n\n## \xf0\x9f\x93\x9d Citation\nPlease cite Imagededup in your publications if this is useful for your research. Here is an example BibTeX entry:\n```BibTeX\n@misc{idealods2019imagededup,\n  title={Imagededup},\n  author={Tanuj Jain and Christopher Lennan and Zubin John and Dat Tran},\n  year={2019},\n  howpublished={\\url{https://github.com/idealo/imagededup}},\n}\n```\n\n## \xf0\x9f\x8f\x97 Maintainers\n* Tanuj Jain, github: [tanujjain](https://github.com/tanujjain)\n* Christopher Lennan, github: [clennan](https://github.com/clennan)\n* Dat Tran, github: [datitran](https://github.com/datitran)\n\n## \xc2\xa9 Copyright\nSee [LICENSE](LICENSE) for details.\n'