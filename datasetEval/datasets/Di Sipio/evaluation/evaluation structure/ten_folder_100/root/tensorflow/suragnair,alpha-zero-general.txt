b'# Alpha Zero General (any game, any framework!)\n\nA simplified, highly flexible, commented and (hopefully) easy to understand implementation of self-play based reinforcement learning based on the AlphaGo Zero paper (Silver et al). It is designed to be easy to adopt for any two-player turn-based adversarial game and any deep learning framework of your choice. A sample implementation has been provided for the game of Othello in PyTorch, Keras, TensorFlow and Chainer. An accompanying tutorial can be found [here](http://web.stanford.edu/~surag/posts/alphazero.html). We also have implementations for GoBang and TicTacToe.\n\nTo use a game of your choice, subclass the classes in ```Game.py``` and ```NeuralNet.py``` and implement their functions. Example implementations for Othello can be found in ```othello/OthelloGame.py``` and ```othello/{pytorch,keras,tensorflow,chainer}/NNet.py```. \n\n```Coach.py``` contains the core training loop and ```MCTS.py``` performs the Monte Carlo Tree Search. The parameters for the self-play can be specified in ```main.py```. Additional neural network parameters are in ```othello/{pytorch,keras,tensorflow,chainer}/NNet.py``` (cuda flag, batch size, epochs, learning rate etc.). \n\nTo start training a model for Othello:\n```bash\npython main.py\n```\nChoose your framework and game in ```main.py```.\n\n### Docker Installation\nFor easy environment setup, we can use [nvidia-docker](https://github.com/NVIDIA/nvidia-docker). Once you have nvidia-docker set up, we can then simply run:\n```\n./setup_env.sh\n```\nto set up a (default: pyTorch) Jupyter docker container. We can now open a new terminal and enter:\n```\ndocker exec -ti pytorch_notebook python main.py\n```\n\n### Experiments\nWe trained a PyTorch model for 6x6 Othello (~80 iterations, 100 episodes per iteration and 25 MCTS simulations per turn). This took about 3 days on an NVIDIA Tesla K80. The pretrained model (PyTorch) can be found in ```pretrained_models/othello/pytorch/```. You can play a game against it using ```pit.py```. Below is the performance of the model against a random and a greedy baseline with the number of iterations.\n![alt tag](https://github.com/suragnair/alpha-zero-general/raw/master/pretrained_models/6x6.png)\n\nA concise description of our algorithm can be found [here](https://github.com/suragnair/alpha-zero-general/raw/master/pretrained_models/writeup.pdf).\n\n### Contributing\nWhile the current code is fairly functional, we could benefit from the following contributions:\n* Game logic files for more games that follow the specifications in ```Game.py```, along with their neural networks\n* Neural networks in other frameworks\n* Pre-trained models for different game configurations\n* An asynchronous version of the code- parallel processes for self-play, neural net training and model comparison. \n* Asynchronous MCTS as described in the paper\n\n### Contributors and Credits\n* [Shantanu Thakoor](https://github.com/ShantanuThakoor) and [Megha Jhunjhunwala](https://github.com/jjw-megha) helped with core design and implementation.\n* [Shantanu Kumar](https://github.com/SourKream) contributed TensorFlow and Keras models for Othello.\n* [Evgeny Tyurin](https://github.com/evg-tyurin) contributed rules and a trained model for TicTacToe.\n* [MBoss](https://github.com/1424667164) contributed rules and a model for GoBang.\n* [Jernej Habjan](https://github.com/JernejHabjan) contributed RTS game.\n\nThanks to [pytorch-classification](https://github.com/bearpaw/pytorch-classification) and [progress](https://github.com/verigak/progress).\n\n'