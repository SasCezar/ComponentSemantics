b"## AlphaZero-Gomoku\nThis is an implementation of the AlphaZero algorithm for playing the simple board game Gomoku (also called Gobang or Five in a Row) from pure self-play training. The game Gomoku is much simpler than Go or chess, so that we can focus on the training scheme of AlphaZero and obtain a pretty good AI model on a single PC in a few hours. \n\nReferences:  \n1. AlphaZero: Mastering Chess and Shogi by Self-Play with a General Reinforcement Learning Algorithm\n2. AlphaGo Zero: Mastering the game of Go without human knowledge\n\n### Update 2018.2.24: supports training with TensorFlow!\n### Update 2018.1.17: supports training with PyTorch!\n\n### Example Games Between Trained Models\n- Each move with 400 MCTS playouts:  \n![playout400](https://raw.githubusercontent.com/junxiaosong/AlphaZero_Gomoku/master/playout400.gif)\n\n### Requirements\nTo play with the trained AI models, only need:\n- Python >= 2.7\n- Numpy >= 1.11\n\nTo train the AI model from scratch, further need, either:\n- Theano >= 0.7 and Lasagne >= 0.1      \nor\n- PyTorch >= 0.2.0    \nor\n- TensorFlow\n\n**PS**: if your Theano's version > 0.7, please follow this [issue](https://github.com/aigamedev/scikit-neuralnetwork/issues/235) to install Lasagne,  \notherwise, force pip to downgrade Theano to 0.7 ``pip install --upgrade theano==0.7.0``\n\nIf you would like to train the model using other DL frameworks, you only need to rewrite policy_value_net.py.\n\n### Getting Started\nTo play with provided models, run the following script from the directory:  \n```\npython human_play.py  \n```\nYou may modify human_play.py to try different provided models or the pure MCTS.\n\nTo train the AI model from scratch, with Theano and Lasagne, directly run:   \n```\npython train.py\n```\nWith PyTorch or TensorFlow, first modify the file [train.py](https://github.com/junxiaosong/AlphaZero_Gomoku/blob/master/train.py), i.e., comment the line\n```\nfrom policy_value_net import PolicyValueNet  # Theano and Lasagne\n```\nand uncomment the line \n```\n# from policy_value_net_pytorch import PolicyValueNet  # Pytorch\nor\n# from policy_value_net_tensorflow import PolicyValueNet # Tensorflow\n```\nand then execute: ``python train.py``  (To use GPU in PyTorch, set ``use_gpu=True`` and use ``return loss.item(), entropy.item()`` in function train_step in policy_value_net_pytorch.py if your pytorch version is greater than 0.5)\n\nThe models (best_policy.model and current_policy.model) will be saved every a few updates (default 50).  \n\n**Note:** the 4 provided models were trained using Theano/Lasagne, to use them with PyTorch, please refer to [issue 5](https://github.com/junxiaosong/AlphaZero_Gomoku/issues/5).\n\n**Tips for training:**\n1. It is good to start with a 6 * 6 board and 4 in a row. For this case, we may obtain a reasonably good model within 500~1000 self-play games in about 2 hours.\n2. For the case of 8 * 8 board and 5 in a row, it may need 2000~3000 self-play games to get a good model, and it may take about 2 days on a single PC.\n\n### Further reading\nMy article describing some details about the implementation in Chinese: [https://zhuanlan.zhihu.com/p/32089487](https://zhuanlan.zhihu.com/p/32089487) \n"