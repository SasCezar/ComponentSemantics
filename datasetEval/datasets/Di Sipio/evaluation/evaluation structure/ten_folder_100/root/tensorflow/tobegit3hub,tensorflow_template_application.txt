b'## Introduction\n\nIt is the generic golden program for deep learning with [TensorFlow](https://github.com/tensorflow/tensorflow).\n\n![](./architecture.jpeg)\n\n- [x] Data Formats\n  - [x] [CSV](./data/)\n  - [x] [LIBSVM](./data/)\n  - [x] [TFRecords](./data/)\n- [x] Predict Server\n  - [x] [TensorFlow serving](./cpp_predict_server/)\n  - [x] [Python HTTP server](./http_service/)\n- [x] Predict Client\n  - [x] [Python gPRC client](./python_predict_client/)\n  - [x] [Java gPRC client](./java_predict_client/)\n  - [x] [Scala gPRC client](./java_predict_client/)\n  - [x] [Golang gRPC client](./golang_predict_client/)\n  - [x] [C++ gRPC client](./cpp_predict_client/)\n  - [x] [Spark client](./java_predict_client/)\n  - [x] [Android client](./android_client/)\n  - [x] [iOS client](./ios_client/)\n- [x] Network Models\n  - [x] Logistic regression\n  - [x] Deep neural network\n  - [x] Convolution neural network\n  - [x] Wide and deep model\n  - [x] Regression model\n  - [x] Customized models\n- [x] Other Features\n  - [x] Checkpoint\n  - [x] TensorBoard\n  - [x] Exporter\n  - [x] Dropout\n  - [x] Optimizers\n  - [x] Learning rate decay\n  - [x] Batch normalization\n  - [x] Benchmark mode\n  - [x] [Distributed training](./distributed/)\n\n## Usage\n\n### Generate TFRecords\n\nIf your data is in CSV format, generate TFRecords like this.\n\n```\ncd ./data/cancer/\n\n./generate_csv_tfrecords.py\n```\n\nIf your data is in LIBSVM format, generate TFRecords like this.\n\n```\ncd ./data/a8a/\n\n./generate_libsvm_tfrecord.py\n```\n\nFor large dataset, you can use Spark to do that. Please refer to [data](./data/).\n\n### Run Training\n\nYou can train with the default configuration.\n\n```\n./dense_classifier.py\n\n./sparse_classifier.py\n```\n\nUsing different models or hyperparameters is easy with TensorFlow flags.\n\n```\n./dense_classifier.py --batch_size 1024 --epoch_number 1000 --step_to_validate 10 --optmizier adagrad --model dnn --model_network "128 32 8"\n```\n\nIf you use other dataset like [iris](./data/iris/), no need to modify the code. Just run with parameters to specify the TFRecords files.\n\n```\n./dense_classifier.py --train_file ./data/iris/iris_train.csv.tfrecords --validate_file ./data/iris/iris_test.csv.tfrecords --feature_size 4 --label_size 3  --enable_colored_log\n\n./dense_classifier.py --train_file ./data/iris/iris_train.csv --validate_file ./data/iris/iris_test.csv --feature_size 4 --label_size 3 --input_file_format csv --enable_colored_log\n```\n\nIf you want to use CNN model, try this command.\n\n```\n./dense_classifier.py --train_file ./data/lung/fa7a21165ae152b13def786e6afc3edf.dcm.csv.tfrecords --validate_file ./data/lung/fa7a21165ae152b13def786e6afc3edf.dcm.csv.tfrecords --feature_size 262144 --label_size 2 --batch_size 2 --validate_batch_size 2 --epoch_number -1 --model cnn\n```\n\nFor [boston housing](./data/boston_housing/) dataset.\n\n```\n./dense_classifier.py --train_file ./data/boston_housing/train.csv.tfrecords --validate_file ./data/boston_housing/train.csv.tfrecords --feature_size 13 --label_size 1 --scenario regression  --batch_size 1 --validate_batch_size 1\n```\n\n### Export The Model\n\nAfter training, it will export the model automatically. Or you can export manually.\n\n```\n./dense_classifier.py --mode savedmodel\n```\n\n### Validate The Model\n\nIf we want to run inference to validate the model, you can run like this.\n\n```\n./dense_classifier.py --mode inference\n```\n\n### Use TensorBoard\n\nThe program will generate TensorFlow event files automatically.\n\n```\ntensorboard --logdir ./tensorboard/\n```\n\nThen go to `http://127.0.0.1:6006` in the browser.\n\n### Serving and Predicting\n\nThe exported model is compatible with [TensorFlow Serving](https://github.com/tensorflow/serving). You can follow the document and run the `tensorflow_model_server`.\n\n```\n./tensorflow_model_server --port=9000 --model_name=dense --model_base_path=./model/\n```\n\nWe have provided some gRPC clients for dense and sparse models, such as [Python predict client](./python_predict_client/) and [Java predict client](./java_predict_client/).\n\n```\n./predict_client.py --host 127.0.0.1 --port 9000 --model_name dense --model_version 1\n\nmvn compile exec:java -Dexec.mainClass="com.tobe.DensePredictClient" -Dexec.args="127.0.0.1 9000 dense 1"\n```\n\n## Contribution\n\nThis project is widely used for different tasks with dense or sparse data.\n\nIf you want to make contirbutions, feel free to open an [issue](https://github.com/tobegit3hub/deep_recommend_system/issues) or [pull-request](https://github.com/tobegit3hub/deep_recommend_system/pulls).\n'