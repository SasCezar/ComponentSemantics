b'# Crayon [![Build Status](https://travis-ci.org/torrvision/crayon.svg?branch=master)](https://travis-ci.org/torrvision/crayon) [![PyPI](https://img.shields.io/pypi/v/pycrayon.svg)](https://pypi.python.org/pypi/pycrayon/)\n\nCrayon is a framework that gives you access to the visualisation power\nof\n[TensorBoard](https://github.com/tensorflow/tensorboard) with\n**any language**. Currently it provides a Python and a Lua interface, however\nyou can easily implement a wrapper around the\nprovided [RESTful API](doc/specs.md).\n\n---\n\nThis system is composed of two parts:\n* A server running on a given machine that will be used to display tensorboard\n  and store all the data.\n* A client embedded inside your code that will send the datas to the server.\n\nNote that the server and the client *do not* have to be on the same machine.\n\n\n## Install\n\n### Server machine\n\nThe machine that will host the server needs to\nhave [docker](https://www.docker.com/) installed. The server is completely\npackaged inside a docker container. To get it, run:\n\n```bash\n$ docker pull alband/crayon\n```\n\n### Client machine\n\nThe client machine only need to install the client for the required language.\nDetailed instructions can be read by nagivating to\ntheir [respective directories](client/).\n\nTL;DR:\n\n* Lua / Torch - `$ luarocks install crayon`\n* Python 2 - `$ pip install pycrayon`\n* Python 3 - `$ pip3 install pycrayon`\n\n## Usage\n\n### Server machine\n\nTo start the server, run the following:\n\n```bash\n$ docker run -d -p 8888:8888 -p 8889:8889 --name crayon alband/crayon\n```\n\nTensorboard is now accessible on a browser at `server_machine_address:8888`. The\nclient should send the data at `server_machine_address:8889`.\n\n### Client\n\nSee the documentation for the required language:\n\n* [Lua](client/lua/README.md#usage-example)\n* [Python](client/python/README.md#usage-example)\n\n'