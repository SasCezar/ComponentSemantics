b'<p align="right">\n  <a href="https://npmjs.org/package/kepler.gl">\n    <img src="https://img.shields.io/npm/v/kepler.gl.svg?style=flat" alt="version" />\n  </a>\n  <a href="https://travis-ci.com/keplergl/kepler.gl">\n    <img src="https://api.travis-ci.com/keplergl/kepler.gl.svg?branch=master" alt="build" />\n  </a>\n  <a href="https://github.com/keplergl/kepler.gl">\n    <img src="https://img.shields.io/github/stars/keplergl/kepler.gl.svg?style=flat" alt="stars" />\n  </a>\n  <a href=\'https://opensource.org/licenses/MIT\'>\n    <img src=\'https://img.shields.io/badge/License-MIT-blue.svg\' alt=\'MIT License\' />\n  </a>\n  <a href=\'https://app.fossa.com/projects/custom%2B4458%2Fgithub.com%2Fkeplergl%2Fkepler.gl?ref=badge_shield\'>\n    <img src=\'https://app.fossa.com/api/projects/custom%2B4458%2Fgithub.com%2Fkeplergl%2Fkepler.gl.svg?type=shield\' alt=\'Fossa\' />\n  </a>\n  <a href="https://app.netlify.com/sites/keplergl/deploys" alt="Netlify Status">\n    <img src="https://img.shields.io/endpoint.svg?url=https%3A%2F%2Fdeveloper.oswaldlabs.com%2Fnetlify-status%2F0c9b895c-acd0-43fd-8af7-fe960181b686?style=flat" />\n  </a>\n</p>\n\n<h1 align="center">kepler.gl | <a href="http://kepler.gl">Website</a> |\n<a href="http://kepler.gl/#/demo">Demo App</a>\n</h1>\n<h3></h3>\n\n[<img width="120" alt="Kepler.gl" src="https://d1a3f4spazzrp4.cloudfront.net/kepler.gl/website/icons/kepler.gl-logo.png">](http://kepler.gl)\n\n[<img width="600" alt="Kepler.gl Demo" src="https://eng.uber.com/wp-content/uploads/2018/05/image4-3-768x493.png">](http://kepler.gl/#/demo)\n\n[Kepler.gl][web] is a data-agnostic, high-performance web-based application for visual exploration of large-scale geolocation data sets. Built on top of [Mapbox GL](https://www.mapbox.com) and [deck.gl](http://uber.github.io/deck.gl/#/), kepler.gl can render millions of points representing thousands of trips and perform spatial aggregations on the fly.\n\nKepler.gl is also a React component that uses [Redux](https://redux.js.org/) to manage its state and data flow. It can be embedded into other React-Redux applications and is highly customizable. For information on how to embed kepler.gl in your app take a look at this step-by-step [tutorial][vis-academy] on vis.academy.\n\n## Links\n\n- [Website][web]\n- [Demo][demo-app]\n- [Examples][examples]\n- [Get Started][get-started]\n- [App User Guide][user-guide]\n- [Jupyter Widget User Guide][user-guide-jupyter]\n- [Tutorial][vis-academy]\n- [Stack Overflow][stack]\n- [Contribution Guidelines][contributing]\n- [Api Reference][api-reference]\n- [Roadmap][roadmap]\n\n## Env\n\nUse Node 8.15.0 and above, older node versions have not been tested.\nFor best results, use [nvm](https://github.com/creationix/nvm) `nvm install`.\n\n## Install kepler.gl\n\nInstall node (`> 8.15.0`), yarn, and project dependencies\n\n```sh\nnpm install --save kepler.gl\n// or\nyarn add kepler.gl\n```\n\nkepler.gl is built upon [mapbox][mapbox]. You will need a [Mapbox Access Token][mapbox-token] to use it.\n\nIf you don\'t use a module bundler, it\'s also fine. Kepler.gl npm package includes precompiled production UMD builds in the (umd folder)[https://unpkg.com/kepler.gl/umd].\nYou can add the script tag to your html file as it follows:\n\n```html\n<script src="https://unpkg.com/kepler.gl/umd/keplergl.min.js"></script>\n```\n\nor if you would like, you can load a specific version\n\n```html\n<script src="https://unpkg.com/kepler.gl@0.2.2/umd/keplergl.min.js"></script>\n```\n\n## Develop kepler.gl\n\nTake a look at the [development guide][developers] to develop kepler.gl locally.\n\n## Basic Usage\n\nHere are the basic steps to import kepler.gl into your app. You also take a look at the examples folder. Each example in the folder can be installed and run locally.\n\n### 1. Mount reducer\n\nKepler.gl uses Redux to manage its internal state, along with [react-palm][react-palm] middleware to handle side effects.\n\nYou need to add `taskMiddleware` of `react-palm` to your store too. We are actively working on a solution where\n`react-palm` will not be required, however it is still a very lightweight side effects management tool that is easier to test than react-thunk.\n\n```js\nimport {createStore, combineReducers, applyMiddleware, compose} from \'redux\';\nimport keplerGlReducer from \'kepler.gl/reducers\';\nimport {enhanceReduxMiddleware} from \'kepler.gl/middleware\';\n\nconst initialState = {};\nconst reducers = combineReducers({\n  // <-- mount kepler.gl reducer in your app\n  keplerGl: keplerGlReducer,\n\n  // Your other reducers here\n  app: appReducer\n});\n\n// using createStore\nexport default createStore(\n  reducer,\n  initialState,\n  applyMiddleware(\n    enhanceReduxMiddleware([\n      /* Add other middlewares here */\n    ])\n  )\n);\n```\n\nOr if use enhancer:\n\n```js\n// using enhancers\nconst initialState = {};\nconst middlewares = enhanceReduxMiddleware([\n  // Add other middlewares here\n]);\nconst enhancers = [applyMiddleware(...middlewares)];\n\nexport default createStore(reducer, initialState, compose(...enhancers));\n```\n\nIf you mount kepler.gl reducer in another address instead of `keplerGl`, or the kepler.gl reducer is not\nmounted at root of your state, you will need to specify the path to it when you mount the component\nwith the `getState` prop.\n\nRead more about [Reducers][reducers].\n\n### 2. Mount Component\n\n```js\nimport KeplerGl from \'kepler.gl\';\n\nconst Map = props => (\n  <KeplerGl\n    id="foo"\n    width={width}\n    mapboxApiAccessToken={token}\n    height={height}\n  />\n);\n```\n\n#### Props\n\n##### `id` (String, required)\n\n- Default: `map`\n\nThe id of this KeplerGl instance. `id` is required if you have multiple\nKeplerGl instances in your app. It defines the prop name of the KeplerGl state that is\nstored in the KeplerGl reducer. For example, the state of the KeplerGl component with id `foo` is\nstored in `state.keplerGl.foo`.\n\nIn case you create multiple kepler.gl instances using the same id, the kepler.gl state defined by the entry will be\noverridden by the latest instance and reset to a blank state.\n\n##### `mapboxApiAccessToken` (String, required)\n\n- Default: `undefined`\n\nYou can create a free account at [mapbox][mapbox] and create a token at [www.mapbox.com/account/access-tokens][mapbox-token]\n\n##### `getState` (Function, optional)\n\n- Default: `state => state.keplerGl`\n\nThe path to the root keplerGl state in your reducer.\n\n##### `width` (Number, optional)\n\n- Default: `800`\n\nWidth of the KeplerGl UI.\n\n##### `height` (Number, optional)\n\n- Default: `800`\n\n##### `appName` (String, optional)\n\n- Default: `Kepler.Gl`\n\nApp name displayed in side panel header\n\n##### `version` (String, optional)\n\n- Default: `v1.0`\n\nversion displayed in side panel header\n\n##### `onSaveMap` (Function, optional)\n\n- Default: `undefined`\n\nAction called when click Save Map Url in side panel header.\n\n##### `onViewStateChange` (Function, optional)\n\n- Default: `undefined`\n- Parameter: `viewState` - An updated view state object containing parameters such as longitude, latitude, zoom etc\n\nAction triggered when map viewport is updated.\n\n##### `getMapboxRef(mapbox, index)` (Function, optional)\n\n- Default: `undefined`\n\nFunction called when `KeplerGL` adds or removes a `MapContainer` component having an inner Mapbox map.\n\nThe `mapbox` argument is an [`InteractiveMap`](https://uber.github.io/react-map-gl/#/Documentation/api-reference/interactive-map) when added or `null` when removed.\n\nThe `index` argument is 0 for a single map or 1 for an additional map (since `KeplerGL` supports an optional split map view).\n\n##### `actions` (Object, optional)\n\n- Default: `{}`\n\nActions creators to replace default kepler.gl action creator. Only use custom action when you want to modify action payload.\n\n##### `mint` (Boolean, optional)\n\n- Default: `true`\n\nWhether to load a fresh empty state when component is mounted. when parse `mint: true` kepler.gl component will always load a fresh state when re-mount the same component, state inside this component will be destroyed once its unmounted.\nBy Parsing `mint: false` kepler.gl will keep the component state in the store even when it is unmounted, and use it as initial state when re-mounted again. This is useful when mounting kepler.gl in a modal, and keep the same map when re-open.\n\nRead more about [Components][components].\n\n##### `theme` (Object | String, optional)\n\n- default: `null`\n\nYou can pass theme name or object used to customize Kepler.gl style. Kepler.gl provide an `\'light\'` theme besides the default \'dark\' theme. When pass in a theme object Kepler.gl will use the value passed as input to override values from [theme](https://github.com/keplergl/kepler.gl/blob/master/src/styles/base.js).\n\n#### `mapboxApiUrl` (String, optional)\n\n- Default: `https://api.mapbox.com`\n\nIf you are using your own mapbox tile server, you can pass in your own tile server api url.\n\n#### `mapStylesReplaceDefault` (Boolean, optional)\n\n- Default: `false`\n\nkepler.gl provide 4 map styles to choose from. Pass `true` if you want to supply your own `mapStyles`. See Below.\n\n#### `mapStyles` (Array, optional)\n\n- Default: `[]`\n\nYou can supply additional map styles to be displayed in [map style selection panel](https://github.com/keplergl/kepler.gl/blob/master/docs/user-guides/f-map-styles/1-base-map-styles.md). By default, additional map styles will be added to default map styles. If pass `mapStylesReplaceDefault: true`, they will replace the default ones. kepler.gl will attempt to group layers of your style based on its `id` naming convention and use it to allow toggle visibility of [base map layers](https://github.com/keplergl/kepler.gl/blob/master/docs/user-guides/f-map-styles/2-map-layers.md). Supply your own `layerGroups` to override default for more accurate layer grouping.\n\nEach `mapStyles` should has the following properties:\n  - `id` (String, required) unique string that should **not** be one of these reserved `dark` `light` `muted`. `muted_night`\n  - `label` (String, required) name to be displayed in map style selection panel\n  - `url` (String, required) mapbox style url or a url pointing to the map style json object\n  - `icon` (String, optional) image icon of the style, it can be a url, or an [image data url](https://flaviocopes.com/data-urls/#how-does-a-data-url-look)\n  - `layerGroups` (Array, optional)\n\n```js\n  const mapStyles = [\n    {\n      id: \'my_dark_map\',\n      label: \'Dark Streets 9\',\n      url: \'mapbox://styles/mapbox/dark-v9\',\n      icon: `${apiHost}/styles/v1/mapbox/dark-v9/static/-122.3391,37.7922,9.19,0,0/400x300?access_token=${accessToken}&logo=false&attribution=false`,\n      layerGroups: [{\n        slug: \'label\',\n        filter: ({id}) => id.match(/(?=(label|place-|poi-))/),\n        defaultVisibility: true\n      }, {\n        // adding this will keep the 3d building option\n        slug: \'3d building\',\n        filter: () => false,\n        defaultVisibility: false\n      }]\n    }\n  ];\n\n```\n\n\n### 3. Dispatch custom actions to `keplerGl` reducer.\n\nOne advantage of using the reducer over React component state to handle keplerGl state is the flexibility\nto customize its behavior. If you only have one `KeplerGl` instance in your app or never intend to dispatch actions to KeplerGl from outside the component itself,\nyou don\xe2\x80\x99t need to worry about forwarding dispatch and can move on to the next section. But life is full of customizations, and we want to make yours as enjoyable as possible.\n\nThere are multiple ways to dispatch actions to a specific `KeplerGl` instance.\n\n- In the root reducer, with reducer updaters.\n\nEach action is mapped to a reducer updater in kepler.gl. You can import the reducer updater corresponding to a specific action, and call it with the previous state and action payload to get the updated state.\ne.g. `updateVisDataUpdater` is the updater for `ActionTypes.UPDATE_VIS_DATA` (take a look at each reducer `reducers/vis-state.js` for action to updater mapping).\nHere is an example how you can listen to an app action `QUERY_SUCCESS` and call `updateVisDataUpdater` to load data into Kepler.Gl.\n\n```js\nimport keplerGlReducer, {visStateUpdaters} from \'kepler.gl/reducers\';\n\n// Root Reducer\nconst reducers = combineReducers({\n  keplerGl: keplerGlReducer,\n\n  app: appReducer\n});\n\nconst composedReducer = (state, action) => {\n  switch (action.type) {\n    case \'QUERY_SUCCESS\':\n      return {\n        ...state,\n        keplerGl: {\n          ...state.keplerGl,\n\n          // \'map\' is the id of the keplerGl instance\n          map: {\n            ...state.keplerGl.map,\n            visState: visStateUpdaters.updateVisDataUpdater(\n              state.keplerGl.map.visState,\n              {datasets: action.payload}\n            )\n          }\n        }\n      };\n  }\n  return reducers(state, action);\n};\n\nexport default composedReducer;\n```\n\nRead more about [using updaters to modify kepler.gl state][using-updaters]\n\n- Using redux `connect`\n\nYou can add a dispatch function to your component that dispatches actions to a specific `keplerGl` component,\nusing connect.\n\n```js\n// component\nimport KeplerGl from \'kepler.gl\';\n\n// action and forward dispatcher\nimport {toggleFullScreen, forwardTo} from \'kepler.gl/actions\';\nimport {connect} from \'react-redux\';\n\nconst MapContainer = props => (\n  <div>\n    <button onClick={() => props.keplerGlDispatch(toggleFullScreen())}/>\n    <KeplerGl\n      id="foo"\n    />\n  </div>\n)\n\nconst mapStateToProps = state => state\nconst mapDispatchToProps = (dispatch, props) => ({\n dispatch,\n keplerGlDispatch: forwardTo(\xe2\x80\x98foo\xe2\x80\x99, dispatch)\n});\n\nexport default connect(\n mapStateToProps,\n mapDispatchToProps\n)(MapContainer);\n```\n\n- Wrap action payload\n\nYou can also simply wrap an action into a forward action with the `wrapTo` helper\n\n```js\n// component\nimport KeplerGl from \'kepler.gl\';\n\n// action and forward dispatcher\nimport {toggleFullScreen, wrapTo} from \'kepler.gl/actions\';\n\n// create a function to wrapper action payload to \'foo\'\nconst wrapToMap = wrapTo(\'foo\');\nconst MapContainer = ({dispatch}) => (\n  <div>\n    <button onClick={() => dispatch(wrapToMap(toggleFullScreen())} />\n    <KeplerGl\n      id="foo"\n    />\n  </div>\n);\n\n```\n\nRead more about [forward dispatching actions][forward-actions]\n\n### 4. Customize style.\n\nKepler.gl implements css styling using [Styled-Components](https://www.styled-components.com/). By using said framework Kepler.gl offers the ability to customize its style/theme using the following approaches:\n\n- Passing a Theme prop\n- Styled-Components ThemeProvider\n\nThe available properties to customize are listed here [theme](https://github.com/keplergl/kepler.gl/blob/master/src/styles/base.js).\n\n[Custom theme example](https://github.com/keplergl/kepler.gl/tree/master/examples/custom-theme).\n\n#### Passing a Theme prop.\n\nYou can customize Kepler.gl theme by passing a **theme** props to Kepler.gl react component as it follows:\n\n```javascript\nconst white = \'#ffffff\';\nconst customTheme = {\n  sidePanelBg: white,\n  titleTextColor: \'#000000\',\n  sidePanelHeaderBg: \'#f7f7F7\',\n  subtextColorActive: \'#2473bd\'\n};\n\nreturn (\n  <KeplerGl\n    mapboxApiAccessToken={MAPBOX_TOKEN}\n    id="map"\n    width={800}\n    height={800}\n    theme={customTheme}\n  />\n);\n```\n\nAs you can see the customTheme object defines certain properties which will override Kepler.gl default style rules.\n\n#### Styled-Components Theme Provider.\n\nIn order to customize Kepler.gl theme using [ThemeProvider](https://www.styled-components.com/docs/api#themeprovider) you can simply wrap Kepler.gl using ThemeProvider as it follows:\n\n```javascript\nimport {ThemeProvider} from \'styled-components\';\n\nconst white = \'#ffffff\';\nconst customTheme = {\n  sidePanelBg: white,\n  titleTextColor: \'#000000\',\n  sidePanelHeaderBg: \'#f7f7F7\',\n  subtextColorActive: \'#2473bd\'\n};\n\nreturn (\n  <ThemeProvider theme={customTheme}>\n    <KeplerGl\n      mapboxApiAccessToken={MAPBOX_TOKEN}\n      id="map"\n      width={800}\n      height={800}\n    />\n  </ThemeProvider>\n);\n```\n\n### 5. Render Custom UI components.\n\nEveryone wants the flexibility to render custom kepler.gl components. Kepler.gl has a dependency injection system that allow you to inject\ncomponents to KeplerGl replacing existing ones. All you need to do is to create a component factory for the one you want to replace, import the original component factory\nand call `injectComponents` at the root component of your app where `KeplerGl` is mounted.\nTake a look at `examples/demo-app/src/app.js` and see how it renders a custom side panel header in kepler.gl\n\n```javascript\nimport {injectComponents, PanelHeaderFactory} from \'kepler.gl/components\';\n\n// define custom header\nconst CustomHeader = () => <div>My kepler.gl app</div>;\nconst myCustomHeaderFactory = () => CustomHeader;\n\n// Inject custom header into Kepler.gl, replacing default\nconst KeplerGl = injectComponents([\n  [PanelHeaderFactory, myCustomHeaderFactory]\n]);\n\n// render KeplerGl, it will render your custom header instead of the default\nconst MapContainer = () => (\n  <div>\n    <KeplerGl id="foo" />\n  </div>\n);\n```\n\nUsing `withState` helper to add reducer state and actions to customized component as additional props.\n\n```js\nimport {\n  withState,\n  injectComponents,\n  PanelHeaderFactory\n} from \'kepler.gl/components\';\nimport {visStateLens} from \'kepler.gl/reducers\';\n\n// custom action wrap to mounted instance\nconst addTodo = text =>\n  wrapTo(\'map\', {\n    type: \'ADD_TODO\',\n    text\n  });\n\n// define custom header\nconst CustomHeader = ({visState, addTodo}) => (\n  <div onClick={() => addTodo(\'hello\')}>{`${\n    Object.keys(visState.datasets).length\n  } dataset loaded`}</div>\n);\n\n// now CustomHeader will receive `visState` and `addTodo` as additional props.\nconst myCustomHeaderFactory = () =>\n  withState(\n    // keplerGl state lenses\n    [visStateLens],\n    // customMapStateToProps\n    headerStateToProps,\n    // actions\n    {addTodo}\n  )(CustomHeader);\n```\n\nRead more about [replacing UI component][replace-ui-component]\n\n### 6. How to add data to map\n\nTo interact with a kepler.gl instance and add new data to it, you can dispatch **`addDataToMap`** action from anywhere inside your app. It adds a dataset or multiple datasets to kepler.gl instance and update the full configuration (mapState, mapStyle, visState).\n\n#### Parameters\n\n- `datasets` **([Array][41]&lt;[Object][40]> | [Object][40])** **\\*required** datasets can be a dataset or an array of datasets\n  Each dataset object needs to have `info` and `data` property.\n  - `datasets.info` **[Object][40]** \\-info of a dataset\n    - `datasets.info.id` **[string][42]** id of this dataset. If config is defined, `id` should matches the `dataId` in config.\n    - `datasets.info.label` **[string][42]** A display name of this dataset\n  - `datasets.data` **[Object][40]** **\\*required** The data object, in a tabular format with 2 properties `fields` and `rows`\n    - `datasets.data.fields` **[Array][41]&lt;[Object][40]>** **\\*required** Array of fields,\n      - `datasets.data.fields.name` **[string][42]** **\\*required** Name of the field,\n    - `datasets.data.rows` **[Array][41]&lt;[Array][41]>** **\\*required** Array of rows, in a tabular format with `fields` and `rows`\n- `options` **[Object][40]**\n  - `options.centerMap` **[boolean][43]** `default: true` if `centerMap` is set to `true` kepler.gl will place the map view within the data points boundaries\n  - `options.readOnly` **[boolean][43]** `default: false` if `readOnly` is set to `true`\n    the left setting panel will be hidden\n  - `options.keepExistingConfig` **[boolean][43]** `default: false`  whether to keep exiting map config, including layers, filters and splitMaps.\n\n- `config` **[Object][40]** this object will contain the full kepler.gl instance configuration {mapState, mapStyle, visState}\n\nKepler.gl provides an easy API `KeplerGlSchema.getConfigToSave` to generate a json blob of the current kepler instance configuration.\n\n#### Examples\n\n```javascript\n// app.js\nimport {addDataToMap} from \'kepler.gl/actions\';\n\nconst sampleTripData = {\n  fields: [\n    {name: \'tpep_pickup_datetime\', format: \'YYYY-M-D H:m:s\', type: \'timestamp\'},\n    {name: \'pickup_longitude\', format: \'\', type: \'real\'},\n    {name: \'pickup_latitude\', format: \'\', type: \'real\'}\n  ],\n  rows: [\n    [\'2015-01-15 19:05:39 +00:00\', -73.99389648, 40.75011063],\n    [\'2015-01-15 19:05:39 +00:00\', -73.97642517, 40.73981094],\n    [\'2015-01-15 19:05:40 +00:00\', -73.96870422, 40.75424576]\n  ]\n};\n\nconst sampleConfig = {\n  visState: {\n    filters: [\n      {\n        id: \'me\',\n        dataId: \'test_trip_data\',\n        name: \'tpep_pickup_datetime\',\n        type: \'timeRange\',\n        enlarged: true\n      }\n    ]\n  }\n};\n\nthis.props.dispatch(\n  addDataToMap({\n    datasets: {\n      info: {\n        label: \'Sample Taxi Trips in New York City\',\n        id: \'test_trip_data\'\n      },\n      data: sampleTripData\n    },\n    option: {\n      centerMap: true,\n      readOnly: false\n    },\n    config: sampleConfig\n  })\n);\n```\n\nRead more about [addDataToMap](./docs/api-reference/actions/actions.md#adddatatomap) and [Saving and loading maps with schema manager][saving-loading-w-schema].\n\n[contributing]: contributing/CONTRIBUTING.md\n[demo-app]: http://kepler.gl/#/demo\n[github]: https://github.com/keplergl/kepler.gl\n[github-pr]: https://help.github.com/articles/creating-a-pull-request/\n[mapbox]: https://www.mapbox.com\n[mapbox-token]: https://www.mapbox.com/help/define-access-token/\n[developers]: contributing/DEVELOPERS.md\n[examples]: https://github.com/keplergl/kepler.gl/tree/master/examples\n[react-palm]: https://github.com/btford/react-palm\n[roadmap]: https://github.com/keplergl/kepler.gl/wiki/Kepler.gl-2019-Roadmap\n[stack]: https://stackoverflow.com/questions/tagged/kepler.gl\n[web]: http://www.kepler.gl/\n[vis-academy]: http://vis.academy/#/kepler.gl/\n[user-guide]: ./docs/user-guides/a-introduction.md\n[user-guide-jupyter]: ./docs/keplergl-jupyter/user-guide.md\n[api-reference]: ./docs/api-reference/overview.md\n[get-started]: ./docs/api-reference/get-started.md\n[reducers]: ./docs/api-reference/reducers/overview.md\n[components]: ./docs/api-reference/components/overview.md\n[reducers]: ./docs/api-reference/reducers/overview.md\n[actions-updaters]: ./docs/api-reference/actions/overview.md\n[processors]: ./docs/api-reference/processors/overview.md\n[schemas]: ./docs/api-reference/schemas/overview.md\n[using-updaters]: ./docs/api-reference/advanced-usages/using-updaters.md\n[forward-actions]: ./docs/api-reference/advanced-usages/forward-actions.md\n[replace-ui-component]: ./docs/api-reference/advanced-usages/replace-ui-component.md\n[saving-loading-w-schema]: ./docs/api-reference/advanced-usages/saving-loading-w-schema.md\n[40]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\n[41]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array\n[42]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\n[43]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean\n[44]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number\n[45]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/function\n'