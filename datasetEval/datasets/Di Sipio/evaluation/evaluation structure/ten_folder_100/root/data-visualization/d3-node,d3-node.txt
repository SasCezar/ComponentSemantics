b'# D3-Node  \n[![Build Status](https://travis-ci.org/d3-node/d3-node.svg?branch=master)](https://travis-ci.org/d3-node/d3-node)\n[![Codecov](https://img.shields.io/codecov/c/github/d3-node/d3-node.svg)](https://travis-ci.org/d3-node/d3-node)\n[![npm](https://img.shields.io/npm/dm/d3-node.svg)](https://www.npmjs.com/package/d3-node)\n[![npm](https://img.shields.io/npm/l/d3-node.svg)](https://www.npmjs.com/package/d3-node)\n\nServer-side D3 with ease \xc2\xa0\n\n\n> Supports Node 8+\n\n<img width="768" alt="maps and charts with d3-node" src="https://cloud.githubusercontent.com/assets/425966/24722031/2a424edc-1a10-11e7-96a5-cd68ff335017.png">\n\n[see examples >](examples)\n\n[![js-standard-style](https://cdn.rawgit.com/feross/standard/master/badge.svg)](https://github.com/feross/standard)\n\n### Why?\n\n- Performance: pre-rendering allows offloading data processing, and network overhead\n- Take advantage of the entire ecosystem: [npmjs.com](https://www.npmjs.com/)\n- Static rendering of [Data-Driven Documents (D3.js)](https://d3js.org/)\n- Portable SVG with [embedded stylesheets](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/style)\n- Easily adapt examples from [bl.ocks.org](http://bl.ocks.org/)\n\n### Basic usage:\n\n[![NPM](https://nodei.co/npm/d3-node.png?downloads=true&downloadRank=true)](https://nodei.co/npm/d3-node/)\n\n__Create a SVG__\n\n```javascript\n const D3Node = require(\'d3-node\')\n const d3n = new D3Node()      // initializes D3 with container element\n d3n.createSVG(10,20).append(\'g\') // create SVG w/ \'g\' tag and width/height\n d3n.svgString() // output: <svg width=10 height=20 xmlns="http://www.w3.org/2000/svg"><g></g></svg>\n```\n\n### Advanced usage\n\n__Setting container & insertion point via selector__\n\n```javascript\n const options = { selector: \'#chart\', container: \'<div id="container"><div id="chart"></div></div>\' }\n const d3n = new D3Node(options) // initializes D3 with container element\n const d3 = d3n.d3\n d3.select(d3n.document.querySelector(\'#chart\')).append(\'span\') // insert span tag into #chart\n d3n.html()   // output: <html><body><div id="container"><div id="chart"><span></span></div></div></body></html>\n d3n.chartHTML()   // output: <div id="chart"><span></span></div>\n```\n\n__Inline SVG styles__\n\n```javascript\n const d3n = new D3Node({styles:\'.test {fill:#000;}\'})\n d3n.createSVG().append(\'g\')\n d3n.svgString()\n```\n\n> Output\n```html\n<svg xmlns="http://www.w3.org/2000/svg">\n   <defs>\n     <style type="text/css"><![CDATA[ .test{fill:#000;} ]]></style>\n   </defs>\n   <g></g>\n<svg>\n```\n\n__Create a canvas (for generating a png)__\n```javascript\n const canvasModule = require(\'canvas\'); // supports node-canvas v1 & v2.x\n const d3n = new D3Node({ canvasModule }); // pass it node-canvas\n const canvas = d3n.createCanvas(960, 500);\n const context = canvas.getContext(\'2d\');\n // draw on your canvas, then output canvas to png\n canvas.pngStream().pipe(fs.createWriteStream(\'output.png\'));\n```\n\n### [See examples for more...](examples)\n\n### Run Tests:\n\n```\n$ npm test\n```\n\n### TODOs:\n\n- Add more examples: (remote data, world map)\n- Create Gulp task\n- Add option to inject css/js into html output\n'