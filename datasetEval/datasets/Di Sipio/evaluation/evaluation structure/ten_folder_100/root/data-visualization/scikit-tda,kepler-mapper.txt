b'[![PyPI version](https://badge.fury.io/py/kmapper.svg)](https://badge.fury.io/py/kmapper)\n[![Downloads](https://pypip.in/download/kmapper/badge.svg)](https://pypi.python.org/pypi/kmapper/)\n[![Build Status](https://travis-ci.org/scikit-tda/kepler-mapper.svg?branch=master)](https://travis-ci.org/scikit-tda/kepler-mapper)\n[![Codecov](https://codecov.io/gh/scikit-tda/kepler-mapper/branch/master/graph/badge.svg)](https://codecov.io/gh/scikit-tda/kepler-mapper)\n[![DOI](https://joss.theoj.org/papers/10.21105/joss.01315/status.svg)](https://doi.org/10.21105/joss.01315)\n[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.1002377.svg)](https://doi.org/10.5281/zenodo.1002377)\n\n# KeplerMapper <img align="right" width="40" height="40" src="http://i.imgur.com/axOG6GJ.jpg">\n\n> Nature uses as little as possible of anything. - Johannes Kepler\n\nThis is a Python implementation of the TDA Mapper algorithm  for visualization of high-dimensional data. For complete documentation, see [https://kepler-mapper.scikit-tda.org](https://kepler-mapper.scikit-tda.org).\n\nKeplerMapper employs approaches based on the Mapper algorithm (Singh et al.) as first described in the paper "Topological Methods for the Analysis of High Dimensional Data Sets and 3D Object Recognition".\n\nKeplerMapper can make use of Scikit-Learn API compatible cluster and scaling algorithms.\n\n\n## Install\n\n### Dependencies\n\nKeplerMapper requires:\n\n  - Python (>= 2.7 or >= 3.3)\n  - NumPy\n  - Scikit-learn\n\nUsing the plotly visualizations requires a few extra libraries:\n\n  - Python-Igraph\n  - Plotly\n  - Ipywidgets\n\nAdditionally, running some of the examples requires:\n\n  - matplotlib\n  - umap-learn\n\n\n### Installation\n\nInstall KeplerMapper with pip:\n\n```\npip install kmapper\n```\n\nTo install from source:\n```\ngit clone https://github.com/MLWave/kepler-mapper\ncd kepler-mapper\npip install -e .\n```\n\n## Usage\n\nKeplerMapper adopts the scikit-learn API as much as possible, so it should feel very familiar to anyone who has used these libraries.\n\n### Python code\n```python\n# Import the class\nimport kmapper as km\n\n# Some sample data\nfrom sklearn import datasets\ndata, labels = datasets.make_circles(n_samples=5000, noise=0.03, factor=0.3)\n\n# Initialize\nmapper = km.KeplerMapper(verbose=1)\n\n# Fit to and transform the data\nprojected_data = mapper.fit_transform(data, projection=[0,1]) # X-Y axis\n\n# Create dictionary called \'graph\' with nodes, edges and meta-information\ngraph = mapper.map(projected_data, data, cover=km.Cover(n_cubes=10))\n\n# Visualize it\nmapper.visualize(graph, path_html="make_circles_keplermapper_output.html",\n                 title="make_circles(n_samples=5000, noise=0.03, factor=0.3)")\n```\n\n## Disclaimer\n\nStandard MIT disclaimer applies, see `DISCLAIMER.md` for full text. Development status is Alpha.\n\n## How to cite\n\nTo credit KeplerMapper in your work, please cite both the [JOSS paper](https://doi.org/10.21105/joss.01315) and the [Zenodo archive](https://doi.org/10.5281/zenodo.1002377). The former provides a high level description of the package, and the latter points to a permanent record of all KeplerMapper versions (we encourage you to cite the specific version you used). Example citations (for KeplerMapper 1.3.3):\n\nvan Veen et al., (2019). Kepler Mapper: A flexible Python implementation of the Mapper algorithm. Journal of Open Source Software, 4(42), 1315, https://doi.org/10.21105/joss.01315\n\nHendrik Jacob van Veen, Nathaniel Saul, Eargle, David, & Sam W. Mangham. (2019, October 14). Kepler Mapper: A flexible Python implementation of the Mapper algorithm (Version 1.3.3). Zenodo. http://doi.org/10.5281/zenodo.3485851'