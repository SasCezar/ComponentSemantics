b'# react-plotly.js\n\n![plotly-react-logo](https://images.plot.ly/plotly-documentation/thumbnail/react.png)\n\n> A [plotly.js](https://github.com/plotly/plotly.js) React component from\n> [Plotly](https://plot.ly/). The basis of Plotly\'s\n> [React component suite](https://plot.ly/products/react/).\n\n\xf0\x9f\x91\x89 [DEMO](http://react-plotly.js-demo.getforge.io/)\n\n\xf0\x9f\x91\x89 [Demo source code](https://github.com/plotly/react-plotly.js-demo-app)\n\n---\n\n## Contents\n\n* [Installation](#installation)\n* [Quick start](#quick-start)\n* [State management](#state-management)\n* [Refreshing the Plot](#refreshing-the-plot)\n* [API](#api)\n  * [Basic props](#basic-props)\n  * [Event handler props](#event-handler-props)\n* [Customizing the `plotly.js` bundle](#customizing-the-plotlyjs-bundle)\n* [Loading from a `<script>` tag](#loading-from-a-script-tag)\n* [Development](#development)\n\n## Installation\n\n```bash\n$ npm install react-plotly.js plotly.js\n```\n\n## Quick start\n\nThe easiest way to use this component is to import and pass data to a plot component:\n\n```javascript\nimport React from \'react\';\nimport Plot from \'react-plotly.js\';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Plot\n        data={[\n          {\n            x: [1, 2, 3],\n            y: [2, 6, 3],\n            type: \'scatter\',\n            mode: \'lines+markers\',\n            marker: {color: \'red\'},\n          },\n          {type: \'bar\', x: [1, 2, 3], y: [2, 5, 3]},\n        ]}\n        layout={{width: 320, height: 240, title: \'A Fancy Plot\'}}\n      />\n    );\n  }\n}\n```\n\nYou should see a plot like this:\n\n<p align="center">\n <img src="example.png" alt="Example plot" width="320" height="240">\n</p>\n\nFor a full description of Plotly chart types and attributes see the following resources:\n\n* [Plotly JavaScript API documentation](https://plot.ly/javascript/)\n* [Full plotly.js attribute listing](https://plot.ly/javascript/reference/)\n\n## State management\n\nThis is a "dumb" component that doesn\'t merge its internal state with any updates. This means that if a user interacts with the plot, by zooming or panning for example, any subsequent re-renders will lose this information unless it is captured and upstreamed via the `onUpdate` callback prop.\n\nHere is a simple example of how to capture and store state in a parent object:\n\n```javascript\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { data: [], layout: {}, frames: [], config: {} };\n    }\n\n    render() {\n        return (\n            <Plot\n                data={this.state.data}\n                layout={this.state.layout}\n                frames={this.state.frames}\n                config={this.state.config}\n                onInitialized={(figure) => this.setState(figure)}\n                onUpdate={(figure) => this.setState(figure)}\n            />\n        );\n    }\n}\n```\n\n## Refreshing the Plot\n\nThis component will refresh the plot via [`Plotly.react`](https://plot.ly/javascript/plotlyjs-function-reference/#plotlyreact) if any of the following are true:\n\n* The `revision` prop is defined and has changed, OR;\n* One of `data`, `layout` or `config` has changed identity as checked via a shallow `===`, OR;\n* The number of elements in `frames` has changed\n\nFurthermore, when called, [`Plotly.react`](https://plot.ly/javascript/plotlyjs-function-reference/#plotlyreact) will only refresh the data being plotted if the _identity_ of the data arrays (e.g. `x`, `y`, `marker.color` etc) has changed, or if `layout.datarevision` has changed.\n\nIn short, this means that simply adding data points to a trace in `data` or changing a value in `layout` will not cause a plot to update unless this is done immutably via something like [immutability-helper](https://github.com/kolodny/immutability-helper) if performance considerations permit it, or unless `revision` and/or [`layout.datarevision`](https://plot.ly/javascript/reference/#layout-datarevision) are used to force a rerender.\n\n## API Reference\n\n### Basic Props\n\n**Warning**: for the time being, this component may _mutate_ its `layout` and `data` props in response to user input, going against React rules. This behaviour will change in the near future once https://github.com/plotly/plotly.js/issues/2389 is completed.\n\n| Prop               | Type                         | Default                                           | Description                                                                                                                                                           |\n| ------------------ | ---------------------------- | ------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `data`             | `Array`                      | `[]`                                              | list of trace objects (see https://plot.ly/javascript/reference/)                                                                                                     |\n| `layout`           | `Object`                     | `undefined`                                       | layout object (see https://plot.ly/javascript/reference/#layout)                                                                                                      |\n| `frames`           | `Array`                      | `undefined`                                       | list of frame objects (see https://plot.ly/javascript/reference/)                                                                                                     |\n| `config`           | `Object`                     | `undefined`                                       | config object (see https://plot.ly/javascript/configuration-options/)                                                                                                 |\n| `revision`         | `Number`                     | `undefined`                                       | When provided, causes the plot to update when the revision is incremented.                                                                                     |\n| `onInitialized`    | `Function(figure, graphDiv)` | `undefined`                                       | Callback executed after plot is initialized. See below for parameter information.                                                                                     |\n| `onUpdate`         | `Function(figure, graphDiv)` | `undefined`                                       | Callback executed when when a plot is updated due to new data or layout, or when user interacts with a plot. See below for parameter information.                     |\n| `onPurge`          | `Function(figure, graphDiv)` | `undefined`                                       | Callback executed when component unmounts, before `Plotly.purge` strips the `graphDiv` of all private attributes. See below for parameter information.                |\n| `onError`          | `Function(err)`              | `undefined`                                       | Callback executed when a plotly.js API method rejects                                                                                                                 |\n| `divId`            | `string`                     | `undefined`                                       | id assigned to the `<div>` into which the plot is rendered.                                                                                                           |\n| `className`        | `string`                     | `undefined`                                       | applied to the `<div>` into which the plot is rendered                                                                                                                |\n| `style`            | `Object`                     | `{position: \'relative\', display: \'inline-block\'}` | used to style the `<div>` into which the plot is rendered                                                                                                             |\n| `debug`            | `Boolean`                    | `false`                                           | Assign the graph div to `window.gd` for debugging                                                                                                                     |\n| `useResizeHandler` | `Boolean`                    | `false`                                           | When true, adds a call to `Plotly.Plot.resize()` as a `window.resize` event handler                                                                                   |\n\n**Note**: To make a plot responsive, i.e. to fill its containing element and resize when the window is resized, use `style` or `className` to set the dimensions of the element (i.e. using `width: 100%; height: 100%` or some similar values) and set `useResizeHandler` to `true` while setting `layout.autosize` to `true` and leaving `layout.height` and `layout.width` undefined. This can be seen in action in [this CodePen](https://codepen.io/nicolaskruchten/pen/ERgBZX) and will implement the behaviour documented here: https://plot.ly/javascript/responsive-fluid-layout/\n\n#### Callback signature: `Function(figure, graphDiv)`\n\nThe `onInitialized`, `onUpdate` and `onPurge` props are all functions which will be called with two arguments: `figure` and `graphDiv`.\n\n* `figure` is a serializable object with three keys corresponding to input props: `data`, `layout` and `frames`.\n  * As mentioned above, for the time being, this component may _mutate_ its `layout` and `data` props in response to user input, going against React rules. This behaviour will change in the near future once https://github.com/plotly/plotly.js/issues/2389 is completed.\n* `graphDiv` is a reference to the (unserializable) DOM node into which the figure was rendered.\n\n### Event handler props\n\nEvent handlers for specific [`plotly.js` events](https://plot.ly/javascript/plotlyjs-events/) may be attached through the following props:\n\n| Prop                      | Type       | Plotly Event                   |\n| ------------------------- | ---------- | ------------------------------ |\n| `onAfterExport`           | `Function` | `plotly_afterexport`           |\n| `onAfterPlot`             | `Function` | `plotly_afterplot`             |\n| `onAnimated`              | `Function` | `plotly_animated`              |\n| `onAnimatingFrame`        | `Function` | `plotly_animatingframe`        |\n| `onAnimationInterrupted`  | `Function` | `plotly_animationinterrupted`  |\n| `onAutoSize`              | `Function` | `plotly_autosize`              |\n| `onBeforeExport`          | `Function` | `plotly_beforeexport`          |\n| `onButtonClicked`         | `Function` | `plotly_buttonclicked`         |\n| `onClick`                 | `Function` | `plotly_click`                 |\n| `onClickAnnotation`       | `Function` | `plotly_clickannotation`       |\n| `onDeselect`              | `Function` | `plotly_deselect`              |\n| `onDoubleClick`           | `Function` | `plotly_doubleclick`           |\n| `onFramework`             | `Function` | `plotly_framework`             |\n| `onHover`                 | `Function` | `plotly_hover`                 |\n| `onLegendClick`           | `Function` | `plotly_legendclick`           |\n| `onLegendDoubleClick`     | `Function` | `plotly_legenddoubleclick`     |\n| `onRelayout`              | `Function` | `plotly_relayout`              |\n| `onRestyle`               | `Function` | `plotly_restyle`               |\n| `onRedraw`                | `Function` | `plotly_redraw`                |\n| `onSelected`              | `Function` | `plotly_selected`              |\n| `onSelecting`             | `Function` | `plotly_selecting`             |\n| `onSliderChange`          | `Function` | `plotly_sliderchange`          |\n| `onSliderEnd`             | `Function` | `plotly_sliderend`             |\n| `onSliderStart`           | `Function` | `plotly_sliderstart`           |\n| `onTransitioning`         | `Function` | `plotly_transitioning`         |\n| `onTransitionInterrupted` | `Function` | `plotly_transitioninterrupted` |\n| `onUnhover`               | `Function` | `plotly_unhover`               |\n\n## Customizing the `plotly.js` bundle\n\nBy default, the `Plot` component exported by this library loads a precompiled version of all of `plotly.js`, so `plotly.js` must be installed as a peer dependency. This bundle is around 6Mb unminified, and minifies to just over 2Mb.\n\nIf you do not wish to use this version of `plotly.js`, e.g. if you want to use a [different precompiled bundle](https://github.com/plotly/plotly.js/blob/master/dist/README.md#partial-bundles) or if your wish to [assemble you own customized bundle](https://github.com/plotly/plotly.js#modules), or if you wish to load `plotly.js` [from a CDN](https://github.com/plotly/plotly.js#use-the-plotlyjs-cdn-hosted-by-fastly), you can skip the installation of as a peer dependency (and ignore the resulting warning) and use the `createPlotComponent` method to get a `Plot` component, instead of importing it:\n\n```javascript\n// simplest method: uses precompiled complete bundle from `plotly.js`\nimport Plot from \'react-plotly.js\';\n\n// customizable method: use your own `Plotly` object\nimport createPlotlyComponent from \'react-plotly.js/factory\';\nconst Plot = createPlotlyComponent(Plotly);\n```\n\n## Loading from a `<script>` tag\n\nFor quick one-off demos on [CodePen](https://codepen.io/) or [JSFiddle](https://jsfiddle.net/), you may wish to just load the component directly as a script tag. We don\'t host the bundle directly, so you should never rely on this to work forever or in production, but you can use a third-party service to load the factory version of the component from, for example, [https://unpkg.com/react-plotly.js@latest/dist/create-plotly-component.js](https://unpkg.com/react-plotly.js@latest/dist/create-plotly-component.js).\n\nYou can load plotly.js and the component factory with:\n\n```html\n<script src="https://cdn.plot.ly/plotly-latest.min.js"></script>\n<script src="https://unpkg.com/react-plotly.js@latest/dist/create-plotly-component.js"></script>\n```\n\nAnd instantiate the component with\n\n```javascript\nconst Plot = createPlotlyComponent(Plotly);\n\nReactDOM.render(\n  React.createElement(Plot, {\n    data: [{x: [1, 2, 3], y: [2, 1, 3]}],\n  }),\n  document.getElementById(\'root\')\n);\n```\n\nYou can see an example of this method in action\n[here](https://codepen.io/rsreusser/pen/qPgwwJ?editors=1010).\n\n## Development\n\nTo get started:\n\n```bash\n$ npm install\n```\n\nTo transpile from ES2015 + JSX into the ES5 npm-distributed version:\n\n```bash\n$ npm run prepublishOnly\n```\n\nTo run the tests:\n\n```bash\n$ npm run test\n```\n\n## License\n\n&copy; 2017 Plotly, Inc. MIT License.\n'