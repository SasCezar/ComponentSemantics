b'# Awesome Data Science with Python\n\n> A curated list of awesome resources for practicing data science using Python, including not only libraries, but also links to tutorials, code snippets, blog posts and talks.  \n\n#### Core\n[pandas](https://pandas.pydata.org/) - Data structures built on top of [numpy](https://www.numpy.org/).  \n[scikit-learn](https://scikit-learn.org/stable/) - Core ML library.  \n[matplotlib](https://matplotlib.org/) - Plotting library.  \n[seaborn](https://seaborn.pydata.org/) - Data visualization library based on matplotlib.  \n[pandas_summary](https://github.com/mouradmourafiq/pandas-summary) - Basic statistics using `DataFrameSummary(df).summary()`.  \n[pandas_profiling](https://github.com/pandas-profiling/pandas-profiling) - Descriptive statistics using `ProfileReport`.  \n[sklearn_pandas](https://github.com/scikit-learn-contrib/sklearn-pandas) - Helpful `DataFrameMapper` class.  \n[missingno](https://github.com/ResidentMario/missingno) - Missing data visualization.  \n\n#### Pandas and Jupyter\nGeneral tricks: [link](https://www.dataquest.io/blog/jupyter-notebook-tips-tricks-shortcuts/)  \nPython debugger (pdb) - [blog post](https://www.blog.pythonlibrary.org/2018/10/17/jupyter-notebook-debugging/), [video](https://www.youtube.com/watch?v=Z0ssNAbe81M&t=1h44m15s), [cheatsheet](https://nblock.org/2011/11/15/pdb-cheatsheet/)  \n[cookiecutter-data-science](https://github.com/drivendata/cookiecutter-data-science) - Project template for data science projects.  \n[nteract](https://nteract.io/) - Open Jupyter Notebooks with doubleclick.  \n[swifter](https://github.com/jmcarpenter2/swifter) - Apply any function to a pandas dataframe faster.  \n[xarray](https://github.com/pydata/xarray/) - Extends pandas to n-dimensional arrays.  \n[blackcellmagic](https://github.com/csurfer/blackcellmagic) - Code formatting for jupyter notebooks.  \n[pivottablejs](https://github.com/nicolaskruchten/jupyter_pivottablejs) - Drag n drop Pivot Tables and Charts for jupyter notebooks.  \n[qgrid](https://github.com/quantopian/qgrid) - Pandas `DataFrame` sorting.  \n[ipysheet](https://github.com/QuantStack/ipysheet) - Jupyter spreadsheet widget.  \n[nbdime](https://github.com/jupyter/nbdime) - Diff two notebook files, Alternative GitHub App: [ReviewNB](https://www.reviewnb.com/).  \n[RISE](https://github.com/damianavila/RISE) - Turn Jupyter notebooks into presentations.  \n[papermill](https://github.com/nteract/papermill) - Parameterize and execute Jupyter notebooks, [tutorial](https://pbpython.com/papermil-rclone-report-1.html).  \n[pixiedust](https://github.com/pixiedust/pixiedust) - Helper library for Jupyter.  \n[pandas_flavor](https://github.com/Zsailer/pandas_flavor) - Write custom accessors like `.str` and `.dt`.  \n[pandas-log](https://github.com/eyaltrabelsi/pandas-log) - Find business logic issues and performance issues in pandas.\n\n#### Helpful\n[tqdm](https://github.com/tqdm/tqdm) - Progress bars for for-loops.  \n[icecream](https://github.com/gruns/icecream) - Simple debugging output.  \n[pyprojroot](https://github.com/chendaniely/pyprojroot) - Helpful `here()` command from R.  \n[intake](https://github.com/intake/intake) - Loading datasets made easier, [talk](https://www.youtube.com/watch?v=s7Ww5-vD2Os&t=33m40s). \n\n#### Extraction\n[textract](https://github.com/deanmalmgren/textract) - Extract text from any document.  \n[camelot](https://github.com/socialcopsdev/camelot) - Extract text from PDF.  \n\n#### Big Data\n[spark](https://docs.databricks.com/spark/latest/dataframes-datasets/introduction-to-dataframes-python.html#work-with-dataframes) - `DataFrame` for big data, [cheatsheet](https://gist.github.com/crawles/b47e23da8218af0b9bd9d47f5242d189), [tutorial](https://github.com/ericxiao251/spark-syntax).  \n[sparkit-learn](https://github.com/lensacom/sparkit-learn), [spark-deep-learning](https://github.com/databricks/spark-deep-learning) - ML frameworks for spark.  \n[koalas](https://github.com/databricks/koalas) - Pandas API on Apache Spark.  \n[dask](https://github.com/dask/dask), [dask-ml](http://ml.dask.org/) - Pandas `DataFrame` for big data and machine learning library, [resources](https://matthewrocklin.com/blog//work/2018/07/17/dask-dev), [talk1](https://www.youtube.com/watch?v=ccfsbuqsjgI), [talk2](https://www.youtube.com/watch?v=RA_2qdipVng), [notebooks](https://github.com/dask/dask-ec2/tree/master/notebooks), [videos](https://www.youtube.com/user/mdrocklin).  \n[dask-gateway](https://github.com/jcrist/dask-gateway) - Managing dask clusters.  \n[turicreate](https://github.com/apple/turicreate) - Helpful `SFrame` class for out-of-memory dataframes.  \n[modin](https://github.com/modin-project/modin) - Parallelization library for faster pandas `DataFrame`.  \n[h2o](https://github.com/h2oai/h2o-3) - Helpful `H2OFrame` class for out-of-memory dataframes.  \n[datatable](https://github.com/h2oai/datatable) - Data Table for big data support.  \n[cuDF](https://github.com/rapidsai/cudf) - GPU DataFrame Library.  \n[ray](https://github.com/ray-project/ray/) - Flexible, high-performance distributed execution framework.  \n[mars](https://github.com/mars-project/mars) - Tensor-based unified framework for large-scale data computation.  \n[bottleneck](https://github.com/kwgoodman/bottleneck) - Fast NumPy array functions written in C.   \n[bolz](https://github.com/Blosc/bcolz) - A columnar data container that can be compressed.  \n[cupy](https://github.com/cupy/cupy) - NumPy-like API accelerated with CUDA.  \n[vaex](https://github.com/vaexio/vaex) - Out-of-Core DataFrames.  \n[petastorm](https://github.com/uber/petastorm) - Data access library for parquet files by Uber.  \n[zappy](https://github.com/lasersonlab/zappy) - Distributed numpy arrays.  \n\n##### Command line tools, CSV\n[ni](https://github.com/spencertipping/ni) - Command line tool for big data.  \n[xsv](https://github.com/BurntSushi/xsv) - Command line tool for indexing, slicing, analyzing, splitting and joining CSV files.  \n[csvkit](https://csvkit.readthedocs.io/en/1.0.3/) - Another command line tool for CSV files.  \n[csvsort](https://pypi.org/project/csvsort/) - Sort large csv files.  \n[tsv-utils](https://github.com/eBay/tsv-utils) - Tools for working with CSV files by ebay.  \n[cheat](https://github.com/cheat/cheat) - Make cheatsheets for command line commands.  \n\n#### Classical Statistics\n[researchpy](https://github.com/researchpy/researchpy) - Helpful `summary_cont()` function for summary statistics (Table 1).  \n[scikit-posthocs](https://github.com/maximtrp/scikit-posthocs) - Statistical post-hoc tests for pairwise multiple comparisons.  \n[Bland-Altman Plot](http://www.statsmodels.org/dev/generated/statsmodels.graphics.agreement.mean_diff_plot.html) - Plot for agreement between two methods of measurement.    \n\n#### Tests\n[Blog post](https://lindeloev.github.io/tests-as-linear/)  \n[scipy.stats](https://docs.scipy.org/doc/scipy/reference/stats.html#statistical-tests) - Statistical tests.\n[ANOVA](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.f_oneway.html), Tutorials: [One-way](https://pythonfordatascience.org/anova-python/), [Two-way](https://pythonfordatascience.org/anova-2-way-n-way/), [Type 1,2,3 explained](https://mcfromnz.wordpress.com/2011/03/02/anova-type-iiiiii-ss-explained/).  \n\n##### Visualizations\n[Null Hypothesis Significance Testing (NHST) and Sample Size Calculation](https://rpsychologist.com/d3/NHST/)  \n[Correlation](https://rpsychologist.com/d3/correlation/)  \n[Cohen\'s d](https://rpsychologist.com/d3/cohend/)  \n[Confidence Interval](https://rpsychologist.com/d3/CI/)  \n[Equivalence, non-inferiority and superiority testing](https://rpsychologist.com/d3/equivalence/)  \n[Bayesian two-sample t test](https://rpsychologist.com/d3/bayes/)  \n[Distribution of p-values when comparing two groups](https://rpsychologist.com/d3/pdist/)  \n[Understanding the t-distribution and its normal approximation](https://rpsychologist.com/d3/tdist/)     \n\n#### Talks\n[Inverse Propensity Weighting](https://www.youtube.com/watch?v=SUq0shKLPPs)  \n[Dealing with Selection Bias By Propensity Based Feature Selection](https://www.youtube.com/watch?reload=9&v=3ZWCKr0vDtc)  \n\n#### Exploration and Cleaning\n[Checklist](https://github.com/r0f1/ml_checklist).  \n[janitor](https://pyjanitor.readthedocs.io/) - Clean messy column names.  \n[impyute](https://github.com/eltonlaw/impyute) - Imputations.  \n[fancyimpute](https://github.com/iskandr/fancyimpute) - Matrix completion and imputation algorithms.  \n[imbalanced-learn](https://github.com/scikit-learn-contrib/imbalanced-learn) - Resampling for imbalanced datasets.  \n[tspreprocess](https://github.com/MaxBenChrist/tspreprocess) - Time series preprocessing: Denoising, Compression, Resampling.  \n[Kaggler](https://github.com/jeongyoonlee/Kaggler) - Utility functions (`OneHotEncoder(min_obs=100)`)  \n[pyupset](https://github.com/ImSoErgodic/py-upset) - Visualizing intersecting sets.  \n[pyemd](https://github.com/wmayner/pyemd) - Earth Mover\'s Distance, similarity between histograms.  \n\n#### Train / Test Split\n[iterative-stratification](https://github.com/trent-b/iterative-stratification) - Stratification of multilabel data.  \n\n#### Feature Engineering\n[Talk](https://www.youtube.com/watch?v=68ABAU_V8qI)  \n[sklearn](https://scikit-learn.org/stable/modules/generated/sklearn.pipeline.Pipeline.html) - Pipeline, [examples](https://github.com/jem1031/pandas-pipelines-custom-transformers).  \n[pdpipe](https://github.com/shaypal5/pdpipe) - Pipelines for DataFrames.  \n[scikit-lego](https://github.com/koaning/scikit-lego) - Custom transformers for pipelines.  \n[few](https://github.com/lacava/few) - Feature engineering wrapper for sklearn.  \n[skoot](https://github.com/tgsmith61591/skoot) - Pipeline helper functions.  \n[categorical-encoding](https://github.com/scikit-learn-contrib/categorical-encoding) - Categorical encoding of variables, [vtreat (R package)](https://cran.r-project.org/web/packages/vtreat/vignettes/vtreat.html).  \n[dirty_cat](https://github.com/dirty-cat/dirty_cat) - Encoding dirty categorical variables.  \n[patsy](https://github.com/pydata/patsy/) - R-like syntax for statistical models.  \n[mlxtend](https://rasbt.github.io/mlxtend/user_guide/feature_extraction/LinearDiscriminantAnalysis/) - LDA.  \n[featuretools](https://github.com/Featuretools/featuretools) - Automated feature engineering, [example](https://github.com/WillKoehrsen/automated-feature-engineering/blob/master/walk_through/Automated_Feature_Engineering.ipynb).  \n[tsfresh](https://github.com/blue-yonder/tsfresh) - Time series feature engineering.  \n[pypeln](https://github.com/cgarciae/pypeln) - Concurrent data pipelines.  \n[feature_engine](https://github.com/solegalli/feature_engine) - Encoders, transformers, etc.  \n\n#### Feature Selection\n[Talk](https://www.youtube.com/watch?v=JsArBz46_3s)  \nBlog post series - [1](http://blog.datadive.net/selecting-good-features-part-i-univariate-selection/), [2](http://blog.datadive.net/selecting-good-features-part-ii-linear-models-and-regularization/), [3](http://blog.datadive.net/selecting-good-features-part-iii-random-forests/), [4](http://blog.datadive.net/selecting-good-features-part-iv-stability-selection-rfe-and-everything-side-by-side/)  \nTutorials - [1](https://www.kaggle.com/residentmario/automated-feature-selection-with-sklearn), [2](https://machinelearningmastery.com/feature-selection-machine-learning-python/)  \n[sklearn](https://scikit-learn.org/stable/modules/classes.html#module-sklearn.feature_selection) - Feature selection.  \n[eli5](https://eli5.readthedocs.io/en/latest/blackbox/permutation_importance.html#feature-selection) - Feature selection using permutation importance.  \n[scikit-feature](https://github.com/jundongl/scikit-feature) - Feature selection algorithms.  \n[stability-selection](https://github.com/scikit-learn-contrib/stability-selection) - Stability selection.  \n[scikit-rebate](https://github.com/EpistasisLab/scikit-rebate) - Relief-based feature selection algorithms.  \n[scikit-genetic](https://github.com/manuel-calzolari/sklearn-genetic) - Genetic feature selection.  \n[boruta_py](https://github.com/scikit-learn-contrib/boruta_py) - Feature selection, [explaination](https://stats.stackexchange.com/questions/264360/boruta-all-relevant-feature-selection-vs-random-forest-variables-of-importanc/264467), [example](https://www.kaggle.com/tilii7/boruta-feature-elimination).  \n[linselect](https://github.com/efavdb/linselect) - Feature selection package.  \n[mlxtend](https://rasbt.github.io/mlxtend/user_guide/feature_selection/ExhaustiveFeatureSelector/) - Exhaustive feature selection.     \n[BoostARoota](https://github.com/chasedehan/BoostARoota) - Xgboost feature selection algorithm.  \n\n#### Dimensionality Reduction\n[Talk](https://www.youtube.com/watch?v=9iol3Lk6kyU)  \n[prince](https://github.com/MaxHalford/prince) - Dimensionality reduction, factor analysis (PCA, MCA, CA, FAMD).  \n[sklearn](https://scikit-learn.org/stable/modules/generated/sklearn.manifold.MDS.html) - Multidimensional scaling (MDS).  \n[sklearn](https://scikit-learn.org/stable/modules/generated/sklearn.manifold.TSNE.html) - t-distributed Stochastic Neighbor Embedding (t-SNE), [intro](https://distill.pub/2016/misread-tsne/). Faster implementations: [lvdmaaten](https://lvdmaaten.github.io/tsne/), [MulticoreTSNE](https://github.com/DmitryUlyanov/Multicore-TSNE).  \n[sklearn](http://scikit-learn.org/stable/modules/generated/sklearn.decomposition.TruncatedSVD.html) - Truncated SVD (aka LSA).  \n[mdr](https://github.com/EpistasisLab/scikit-mdr) - Dimensionality reduction, multifactor dimensionality reduction (MDR).  \n[umap](https://github.com/lmcinnes/umap) - Uniform Manifold Approximation and Projection, [talk](https://www.youtube.com/watch?v=nq6iPZVUxZU), [explorer](https://github.com/GrantCuster/umap-explorer), [explanation](https://pair-code.github.io/understanding-umap/).  \n[FIt-SNE](https://github.com/KlugerLab/FIt-SNE) - Fast Fourier Transform-accelerated Interpolation-based t-SNE.  \n[scikit-tda](https://github.com/scikit-tda/scikit-tda) - Topological Data Analysis, [paper](https://www.nature.com/articles/srep01236), [talk](https://www.youtube.com/watch?v=F2t_ytTLrQ4), [talk](https://www.youtube.com/watch?v=AWoeBzJd7uQ).  \n[ivis](https://github.com/beringresearch/ivis) - Dimensionality reduction using Siamese Networks.  \n[trimap](https://github.com/eamid/trimap) - Dimensionality reduction using triplets.  \n\n#### Visualization\n[All charts](https://datavizproject.com/), [Austrian monuments](https://github.com/njanakiev/austrian-monuments-visualization).  \n[cufflinks](https://github.com/santosjorge/cufflinks) - Dynamic visualization library, wrapper for [plotly](https://plot.ly/), [medium](https://towardsdatascience.com/the-next-level-of-data-visualization-in-python-dd6e99039d5e), [example](https://github.com/WillKoehrsen/Data-Analysis/blob/master/plotly/Plotly%20Whirlwind%20Introduction.ipynb).  \n[physt](https://github.com/janpipek/physt) - Better histograms, [talk](https://www.youtube.com/watch?v=ZG-wH3-Up9Y), [notebook](https://nbviewer.jupyter.org/github/janpipek/pydata2018-berlin/blob/master/notebooks/talk.ipynb).  \n[matplotlib_venn](https://github.com/konstantint/matplotlib-venn) - Venn diagrams, [alternative](https://github.com/penrose/penrose).  \n[joypy](https://github.com/sbebo/joypy) - Draw stacked density plots.  \n[mosaic plots](https://www.statsmodels.org/dev/generated/statsmodels.graphics.mosaicplot.mosaic.html) - Categorical variable visualization, [example](https://sukhbinder.wordpress.com/2018/09/18/mosaic-plot-in-python/).  \n[scikit-plot](https://github.com/reiinakano/scikit-plot) - ROC curves and other visualizations for ML models.  \n[yellowbrick](https://github.com/DistrictDataLabs/yellowbrick) - Visualizations for ML models (similar to scikit-plot).  \n[bokeh](https://bokeh.pydata.org/en/latest/) - Interactive visualization library, [Examples](https://bokeh.pydata.org/en/latest/docs/user_guide/server.html), [Examples](https://github.com/WillKoehrsen/Bokeh-Python-Visualization).  \n[animatplot](https://github.com/t-makaro/animatplot) - Animate plots build on matplotlib.  \n[plotnine](https://github.com/has2k1/plotnine) - ggplot for Python.  \n[altair](https://altair-viz.github.io/) - Declarative statistical visualization library.  \n[bqplot](https://github.com/bloomberg/bqplot) - Plotting library for IPython/Jupyter Notebooks.  \n[hvplot](https://github.com/pyviz/hvplot) - High-level plotting library built on top of [holoviews](http://holoviews.org/).  \n[dtreeviz](https://github.com/parrt/dtreeviz) - Decision tree visualization and model interpretation.  \n[chartify](https://github.com/spotify/chartify/) - Generate charts.  \n[VivaGraphJS](https://github.com/anvaka/VivaGraphJS) - Graph visualization (JS package).  \n[pm](https://github.com/anvaka/pm) - Navigatable 3D graph visualization (JS package), [example](https://w2v-vis-dot-hcg-team-di.appspot.com/#/galaxy/word2vec?cx=5698&cy=-5135&cz=5923&lx=0.1127&ly=0.3238&lz=-0.1680&lw=0.9242&ml=150&s=1.75&l=1&v=hc).  \n[python-ternary](https://github.com/marcharper/python-ternary) - Triangle plots.  \n[falcon](https://github.com/uwdata/falcon) - Interactive visualizations for big data.  \n\n#### Dashboards\n[dash](https://dash.plot.ly/gallery) - Dashboarding solution by plot.ly. Tutorial: [1](https://www.youtube.com/watch?v=J_Cy_QjG6NE), [2](https://www.youtube.com/watch?v=hRH01ZzT2NI), [3](https://www.youtube.com/watch?v=wv2MXJIdKRY), [4](https://www.youtube.com/watch?v=37Zj955LFT0), [5](https://www.youtube.com/watch?v=luixWRpp6Jo), [resources](https://github.com/ucg8j/awesome-dash)       \n[panel](https://panel.pyviz.org/index.html) - Dashboarding solution.  \n[bokeh](https://github.com/bokeh/bokeh) - Dashboarding solution.  \n[visdom](https://github.com/facebookresearch/visdom) - Dashboarding library by facebook.  \n[altair example](https://github.com/xhochy/altair-vue-vega-example) - [Video](https://www.youtube.com/watch?v=4L568emKOvs).  \n[voila](https://github.com/QuantStack/voila) - Turn Jupyter notebooks into standalone web applications.  \n[steamlit](https://github.com/streamlit/streamlit) - Dashboards.  \n\n#### Geopraphical Tools\n[folium](https://github.com/python-visualization/folium) - Plot geographical maps using the Leaflet.js library, [jupyter plugin](https://github.com/jupyter-widgets/ipyleaflet).  \n[gmaps](https://github.com/pbugnion/gmaps) - Google Maps for Jupyter notebooks.  \n[stadiamaps](https://stadiamaps.com/) - Plot geographical maps.  \n[datashader](https://github.com/bokeh/datashader) - Draw millions of points on a map.  \n[sklearn](https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.BallTree.html) - BallTree, [Example](https://tech.minodes.com/experiments-with-in-memory-spatial-radius-queries-in-python-e40c9e66cf63).  \n[pynndescent](https://github.com/lmcinnes/pynndescent) - Nearest neighbor descent for approximate nearest neighbors.  \n[geocoder](https://github.com/DenisCarriere/geocoder) - Geocoding of addresses, IP addresses.  \nConversion of different geo formats: [talk](https://www.youtube.com/watch?v=eHRggqAvczE), [repo](https://github.com/dillongardner/PyDataSpatialAnalysis)  \n[geopandas](https://github.com/geopandas/geopandas) - Tools for geographic data  \nLow Level Geospatial Tools (GEOS, GDAL/OGR, PROJ.4)  \nVector Data (Shapely, Fiona, Pyproj)  \nRaster Data (Rasterio)  \nPlotting (Descartes, Catropy)  \nPredict economic indicators from Open Street Map [ipynb](https://github.com/njanakiev/osm-predict-economic-measurements/blob/master/osm-predict-economic-indicators.ipynb).  \n[PySal](https://github.com/pysal/pysal) - Python Spatial Analysis Library.  \n[geography](https://github.com/ushahidi/geograpy) - Extract countries, regions and cities from a URL or text.  \n\n#### Recommender Systems\nExamples: [1](https://lazyprogrammer.me/tutorial-on-collaborative-filtering-and-matrix-factorization-in-python/), [2](https://medium.com/@james_aka_yale/the-4-recommendation-engines-that-can-predict-your-movie-tastes-bbec857b8223), [2-ipynb](https://github.com/khanhnamle1994/movielens/blob/master/Content_Based_and_Collaborative_Filtering_Models.ipynb), [3](https://www.kaggle.com/morrisb/how-to-recommend-anything-deep-recommender).  \n[surprise](https://github.com/NicolasHug/Surprise) - Recommender, [talk](https://www.youtube.com/watch?v=d7iIb_XVkZs).  \n[turicreate](https://github.com/apple/turicreate) - Recommender.  \n[implicit](https://github.com/benfred/implicit) - Fast Collaborative Filtering for Implicit Feedback Datasets.  \n[spotlight](https://github.com/maciejkula/spotlight) - Deep recommender models using PyTorch.  \n[lightfm](https://github.com/lyst/lightfm) - Recommendation algorithms for both implicit and explicit feedback.  \n[funk-svd](https://github.com/gbolmier/funk-svd) - Fast SVD.  \n[pywFM](https://github.com/jfloff/pywFM) - Factorization.  \n\n#### Decision Tree Models\n[Intro to Decision Trees and Random Forests](https://victorzhou.com/blog/intro-to-random-forests/), [Intro to Gradient Boosting](http://blog.kaggle.com/2017/01/23/a-kaggle-master-explains-gradient-boosting/)    \n[lightgbm](https://github.com/Microsoft/LightGBM) - Gradient boosting (GBDT, GBRT, GBM or MART) framework based on decision tree algorithms, [doc](https://sites.google.com/view/lauraepp/parameters).  \n[xgboost](https://github.com/dmlc/xgboost) - Gradient boosting (GBDT, GBRT or GBM) library, [doc](https://sites.google.com/view/lauraepp/parameters), Methods for CIs: [link1](https://stats.stackexchange.com/questions/255783/confidence-interval-for-xgb-forecast), [link2](https://towardsdatascience.com/regression-prediction-intervals-with-xgboost-428e0a018b).  \n[catboost](https://github.com/catboost/catboost) - Gradient boosting.  \n[thundergbm](https://github.com/Xtra-Computing/thundergbm) - GBDTs and Random Forest.  \n[h2o](https://github.com/h2oai/h2o-3) - Gradient boosting.  \n[forestci](https://github.com/scikit-learn-contrib/forest-confidence-interval) - Confidence intervals for random forests.  \n[scikit-garden](https://github.com/scikit-garden/scikit-garden) - Quantile Regression.  \n[grf](https://github.com/grf-labs/grf) - Generalized random forest.  \n[dtreeviz](https://github.com/parrt/dtreeviz) - Decision tree visualization and model interpretation.  \n[Nuance](https://github.com/SauceCat/Nuance) - Decision tree visualization.  \n[rfpimp](https://github.com/parrt/random-forest-importances) - Feature Importance for RandomForests using Permuation Importance.  \nWhy the default feature importance for random forests is wrong: [link](http://explained.ai/rf-importance/index.html)  \n[treeinterpreter](https://github.com/andosa/treeinterpreter) - Interpreting scikit-learn\'s decision tree and random forest predictions.  \n[bartpy](https://github.com/JakeColtman/bartpy) - Bayesian Additive Regression Trees.  \n[infiniteboost](https://github.com/arogozhnikov/infiniteboost) - Combination of RFs and GBDTs.  \n[merf](https://github.com/manifoldai/merf) - Mixed Effects Random Forest for Clustering, [video](https://www.youtube.com/watch?v=gWj4ZwB7f3o)  \n[rrcf](https://github.com/kLabUM/rrcf) - Robust Random Cut Forest algorithm for anomaly detection on streams.  \n\n#### Natural Language Processing (NLP) / Text Processing\n[talk](https://www.youtube.com/watch?v=6zm9NC9uRkk)-[nb](https://nbviewer.jupyter.org/github/skipgram/modern-nlp-in-python/blob/master/executable/Modern_NLP_in_Python.ipynb), [nb2](https://ahmedbesbes.com/how-to-mine-newsfeed-data-and-extract-interactive-insights-in-python.html), [talk](https://www.youtube.com/watch?time_continue=2&v=sI7VpFNiy_I).  \n[Text classification Intro](https://mlwhiz.com/blog/2018/12/17/text_classification/), [Preprocessing blog post](https://mlwhiz.com/blog/2019/01/17/deeplearning_nlp_preprocess/).  \n[gensim](https://radimrehurek.com/gensim/) - NLP, doc2vec, word2vec, text processing, topic modelling (LSA, LDA), [Example](https://markroxor.github.io/gensim/static/notebooks/gensim_news_classification.html), [Coherence Model](https://radimrehurek.com/gensim/models/coherencemodel.html) for evaluation.  \nEmbeddings - [GloVe](https://nlp.stanford.edu/projects/glove/) ([[1](https://www.kaggle.com/jhoward/improved-lstm-baseline-glove-dropout)], [[2](https://www.kaggle.com/sbongo/do-pretrained-embeddings-give-you-the-extra-edge)]), [StarSpace](https://github.com/facebookresearch/StarSpace), [wikipedia2vec](https://wikipedia2vec.github.io/wikipedia2vec/pretrained/).  \n[magnitude](https://github.com/plasticityai/magnitude) - Vector embedding utility package.  \n[pyldavis](https://github.com/bmabey/pyLDAvis) - Visualization for topic modelling.  \n[spaCy](https://spacy.io/) - NLP.  \n[NTLK](https://www.nltk.org/) - NLP, helpful `KMeansClusterer` with `cosine_distance`.  \n[pytext](https://github.com/facebookresearch/PyText) - NLP from Facebook.  \n[fastText](https://github.com/facebookresearch/fastText) - Efficient text classification and representation learning.  \n[annoy](https://github.com/spotify/annoy) - Approximate nearest neighbor search.  \n[faiss](https://github.com/facebookresearch/faiss) - Approximate nearest neighbor search.  \n[pysparnn](https://github.com/facebookresearch/pysparnn) - Approximate nearest neighbor search.  \n[infomap](https://github.com/mapequation/infomap) - Cluster (word-)vectors to find topics, [example](https://github.com/mapequation/infomap/blob/master/examples/python/infomap-examples.ipynb).  \n[datasketch](https://github.com/ekzhu/datasketch) - Probabilistic data structures for large data (MinHash, HyperLogLog).  \n[flair](https://github.com/zalandoresearch/flair) - NLP Framework by Zalando.  \n[stanfordnlp](https://github.com/stanfordnlp/stanfordnlp) - NLP Library.  \n\n##### Papers\n[Search Engine Correlation](https://arxiv.org/pdf/1107.2691.pdf)  \n\n#### Biology\n\n##### Sequencing\n[scanpy](https://github.com/theislab/scanpy) - Analyze single-cell gene expression data, [tutorial](https://github.com/theislab/single-cell-tutorial).  \n\n##### Image-related\n[mahotas](http://luispedro.org/software/mahotas/) - Image processing (Bioinformatics), [example](https://github.com/luispedro/python-image-tutorial/blob/master/Segmenting%20cell%20images%20(fluorescent%20microscopy).ipynb).   \n[imagepy](https://github.com/Image-Py/imagepy) - Software package for bioimage analysis.  \n[CellProfiler](https://github.com/CellProfiler/CellProfiler) - Biological image analysis.   \n[imglyb](https://github.com/imglib/imglyb) - Viewer for large images, [talk](https://www.youtube.com/watch?v=Ddo5z5qGMb8), [slides](https://github.com/hanslovsky/scipy-2019/blob/master/scipy-2019-imglyb.pdf).  \n[microscopium](https://github.com/microscopium/microscopium) - Unsupervised clustering of images + viewer, [talk](https://www.youtube.com/watch?v=ytEQl9xs8FQ).  \n[cytokit](https://github.com/hammerlab/cytokit) - Analyzing properties of cells in fluorescent microscopy datasets.  \n\n#### Image Processing\n[Talk](https://www.youtube.com/watch?v=Y5GJmnIhvFk)  \n[cv2](https://github.com/skvark/opencv-python) - OpenCV, classical algorithms: [Gaussian Filter](https://docs.opencv.org/3.1.0/d4/d13/tutorial_py_filtering.html), [Morphological Transformations](https://docs.opencv.org/3.0-beta/doc/py_tutorials/py_imgproc/py_morphological_ops/py_morphological_ops.html).  \n[scikit-image](https://github.com/scikit-image/scikit-image) - Image processing.  \n\n#### Neural Networks  \n\n##### Tutorials\n[Convolutional Neural Networks for Visual Recognition](https://cs231n.github.io/)  \nfast.ai course - [Lessons 1-7](https://course.fast.ai/videos/?lesson=1), [Lessons 8-14](http://course18.fast.ai/lessons/lessons2.html)  \n[Tensorflow without a PhD](https://github.com/GoogleCloudPlatform/tensorflow-without-a-phd) - Neural Network course by Google.  \nFeature Visualization: [Blog](https://distill.pub/2017/feature-visualization/), [PPT](http://cs231n.stanford.edu/slides/2017/cs231n_2017_lecture12.pdf)  \n[Tensorflow Playground](https://playground.tensorflow.org/)  \n[Visualization of optimization algorithms](https://vis.ensmallen.org/)  \n\n##### Image Related\n[imgaug](https://github.com/aleju/imgaug) - More sophisticated image preprocessing.  \n[imgaug_extension](https://github.com/cadenai/imgaug_extension) - Extension for imgaug.  \n[Augmentor](https://github.com/mdbloice/Augmentor) - Image augmentation library.  \n[keras preprocessing](https://keras.io/preprocessing/image/) - Preprocess images.  \n[albumentations](https://github.com/albu/albumentations) - Wrapper around imgaug and other libraries.  \n[cutouts-explorer](https://github.com/mgckind/cutouts-explorer) - Image Viewer.  \n\n#### Text Related\n[ktext](https://github.com/hamelsmu/ktext) - Utilities for pre-processing text for deep learning in Keras.   \n[textgenrnn](https://github.com/minimaxir/textgenrnn) - Ready-to-use LSTM for text generation.    \n[ctrl](https://github.com/salesforce/ctrl) - Text generation.  \n\n##### Libs\n[keras](https://keras.io/) - Neural Networks on top of [tensorflow](https://www.tensorflow.org/), [examples](https://gist.github.com/candlewill/552fa102352ccce42fd829ae26277d24).  \n[keras-contrib](https://github.com/keras-team/keras-contrib) - Keras community contributions.  \n[keras-tuner](https://github.com/keras-team/keras-tuner) - Hyperparameter tuning for Keras.  \n[hyperas](https://github.com/maxpumperla/hyperas) - Keras + Hyperopt: Convenient hyperparameter optimization wrapper.  \n[elephas](https://github.com/maxpumperla/elephas) - Distributed Deep learning with Keras & Spark.  \n[tflearn](https://github.com/tflearn/tflearn) - Neural Networks on top of tensorflow.  \n[tensorlayer](https://github.com/tensorlayer/tensorlayer) -  Neural Networks on top of tensorflow, [tricks](https://github.com/wagamamaz/tensorlayer-tricks).  \n[tensorforce](https://github.com/reinforceio/tensorforce) - Tensorflow for applied reinforcement learning.  \n[fastai](https://github.com/fastai/fastai) - Neural Networks in pytorch.  \n[ignite](https://github.com/pytorch/ignite) - Highlevel library for pytorch.  \n[skorch](https://github.com/dnouri/skorch) - Scikit-learn compatible neural network library that wraps pytorch, [talk](https://www.youtube.com/watch?v=0J7FaLk0bmQ), [slides](https://github.com/thomasjpfan/skorch_talk).  \n[autokeras](https://github.com/jhfjhfj1/autokeras) - AutoML for deep learning.  \n[PlotNeuralNet](https://github.com/HarisIqbal88/PlotNeuralNet) - Plot neural networks.  \n[lucid](https://github.com/tensorflow/lucid) - Neural network interpretability, [Activation Maps](https://openai.com/blog/introducing-activation-atlases/).  \n[tcav](https://github.com/tensorflow/tcav) - Interpretability method.  \n[AdaBound](https://github.com/Luolc/AdaBound) - Optimizer that trains as fast as Adam and as good as SGD, [alt](https://github.com/titu1994/keras-adabound).  \n[caffe](https://github.com/BVLC/caffe) - Deep learning framework, [pretrained models](https://github.com/BVLC/caffe/wiki/Model-Zoo).    \n[foolbox](https://github.com/bethgelab/foolbox) - Adversarial examples that fool neural networks.  \n[hiddenlayer](https://github.com/waleedka/hiddenlayer) - Training metrics.  \n[imgclsmob](https://github.com/osmr/imgclsmob) - Pretrained models.  \n[netron](https://github.com/lutzroeder/netron) - Visualizer for deep learning and machine learning models.  \n[torchcv](https://github.com/donnyyou/torchcv) - Deep Learning in Computer Vision.  \n\n#### Object detection\n[detectron2](https://github.com/facebookresearch/detectron2) - Object Detection (Mask R-CNN) by Facebook.  \n[simpledet](https://github.com/TuSimple/simpledet) - Object Detection and Instance Recognition.  \n[CenterNet](https://github.com/xingyizhou/CenterNet) - Object detection.  \n[FCOS](https://github.com/tianzhi0549/FCOS) - Fully Convolutional One-Stage Object Detection.    \n\n##### Applications and Snippets\n[efficientnet](https://github.com/lukemelas/EfficientNet-PyTorch) - Promising neural network architecture.  \n[CycleGAN and Pix2pix](https://github.com/junyanz/pytorch-CycleGAN-and-pix2pix) - Various image-to-image tasks.  \n[SPADE](https://github.com/nvlabs/spade) - Semantic Image Synthesis.  \n[Entity Embeddings of Categorical Variables](https://arxiv.org/abs/1604.06737), [code](https://github.com/entron/entity-embedding-rossmann), [kaggle](https://www.kaggle.com/aquatic/entity-embedding-neural-net/code)  \n[Image Super-Resolution](https://github.com/idealo/image-super-resolution) - Super-scaling using a Residual Dense Network.  \nCell Segmentation - [Talk](https://www.youtube.com/watch?v=dVFZpodqJiI), Blog Posts: [1](https://www.thomasjpfan.com/2018/07/nuclei-image-segmentation-tutorial/), [2](https://www.thomasjpfan.com/2017/08/hassle-free-unets/)  \n[deeplearning-models](https://github.com/rasbt/deeplearning-models) - Deep learning models.  \n\n#### GPU\n[cuML](https://github.com/rapidsai/cuml) - Run traditional tabular ML tasks on GPUs.  \n[thundergbm](https://github.com/Xtra-Computing/thundergbm) - GBDTs and Random Forest.  \n[thundersvm](https://github.com/Xtra-Computing/thundersvm) - Support Vector Machines.  \n\n#### Regression\nUnderstanding SVM Regression: [slides](https://cs.adelaide.edu.au/~chhshen/teaching/ML_SVR.pdf), [forum](https://www.quora.com/How-does-support-vector-regression-work), [paper](http://alex.smola.org/papers/2003/SmoSch03b.pdf)  \n\n[pyearth](https://github.com/scikit-learn-contrib/py-earth) - Multivariate Adaptive Regression Splines (MARS), [tutorial](https://uc-r.github.io/mars).  \n[pygam](https://github.com/dswah/pyGAM) - Generalized Additive Models (GAMs), [Explanation](https://multithreaded.stitchfix.com/blog/2015/07/30/gam/).  \n[GLRM](https://github.com/madeleineudell/LowRankModels.jl) - Generalized Low Rank Models.  \n[tweedie](https://xgboost.readthedocs.io/en/latest/parameter.html#parameters-for-tweedie-regression-objective-reg-tweedie) - Specialized distribution for zero inflated targets, [Talk](https://www.youtube.com/watch?v=-o0lpHBq85I).  \n\n#### Classification\n[Talk](https://www.youtube.com/watch?v=DkLPYccEJ8Y), [Notebook](https://github.com/ianozsvald/data_science_delivered/blob/master/ml_creating_correct_capable_classifiers.ipynb)  \n[Blog post: Probability Scoring](https://machinelearningmastery.com/how-to-score-probability-predictions-in-python/)  \n[All classification metrics](http://rali.iro.umontreal.ca/rali/sites/default/files/publis/SokolovaLapalme-JIPM09.pdf)  \n[DESlib](https://github.com/scikit-learn-contrib/DESlib) - Dynamic classifier and ensemble selection  \n\n#### Clustering\n[Overview of clustering algorithms applied image data (= Deep Clustering)](https://deepnotes.io/deep-clustering)  \n[pyclustering](https://github.com/annoviko/pyclustering) - All sorts of clustering algorithms.  \n[somoclu](https://github.com/peterwittek/somoclu) - Self-organizing map.  \n[hdbscan](https://github.com/scikit-learn-contrib/hdbscan) - Clustering algorithm, [talk](https://www.youtube.com/watch?v=dGsxd67IFiU).  \n[nmslib](https://github.com/nmslib/nmslib) - Similarity search library and toolkit for evaluation of k-NN methods.  \n[buckshotpp](https://github.com/zjohn77/buckshotpp) - Outlier-resistant and scalable clustering algorithm.  \n[merf](https://github.com/manifoldai/merf) - Mixed Effects Random Forest for Clustering, [video](https://www.youtube.com/watch?v=gWj4ZwB7f3o)  \n\n#### Interpretable Classifiers and Regressors\n[skope-rules](https://github.com/scikit-learn-contrib/skope-rules) - Interpretable classifier, IF-THEN rules.  \n[sklearn-expertsys](https://github.com/tmadl/sklearn-expertsys) - Interpretable classifiers, Bayesian Rule List classifier.  \n\n#### Multi-label classification\n[scikit-multilearn](https://github.com/scikit-multilearn/scikit-multilearn) - Multi-label classification, [talk](https://www.youtube.com/watch?v=m-tAASQA7XQ&t=18m57s).  \n\n#### Signal Processing and Filtering\n[Stanford Lecture Series on Fourier Transformation](https://see.stanford.edu/Course/EE261), [Youtube](https://www.youtube.com/watch?v=gZNm7L96pfY&list=PLB24BC7956EE040CD&index=1), [Lecture Notes](https://see.stanford.edu/materials/lsoftaee261/book-fall-07.pdf).  \n[The Scientist & Engineer\'s Guide to Digital Signal Processing (1999)](https://www.analog.com/en/education/education-library/scientist_engineers_guide.html).  \n[Kalman Filter book](https://github.com/rlabbe/Kalman-and-Bayesian-Filters-in-Python) - Focuses on intuition using Jupyter Notebooks. Includes Baysian and various Kalman filters.  \n[Interactive Tool](https://fiiir.com/) for FIR and IIR filters, [Examples](https://plot.ly/python/fft-filters/).  \n[filterpy](https://github.com/rlabbe/filterpy) - Kalman filtering and optimal estimation library.  \n\n#### Time Series\n[statsmodels](https://www.statsmodels.org/dev/tsa.html) - Time series analysis, [seasonal decompose](https://www.statsmodels.org/dev/generated/statsmodels.tsa.seasonal.seasonal_decompose.html) [example](https://gist.github.com/balzer82/5cec6ad7adc1b550e7ee), [SARIMA](https://www.statsmodels.org/dev/generated/statsmodels.tsa.statespace.sarimax.SARIMAX.html), [granger causality](http://www.statsmodels.org/dev/generated/statsmodels.tsa.stattools.grangercausalitytests.html).  \n[pyramid](https://github.com/tgsmith61591/pyramid), [pmdarima](https://github.com/tgsmith61591/pmdarima) - Wrapper for (Auto-) ARIMA.  \n[pyflux](https://github.com/RJT1990/pyflux) - Time series prediction algorithms (ARIMA, GARCH, GAS, Bayesian).  \n[prophet](https://github.com/facebook/prophet) - Time series prediction library.  \n[pm-prophet](https://github.com/luke14free/pm-prophet) - Time series prediction and decomposition library.  \n[htsprophet](https://github.com/CollinRooney12/htsprophet) - Hierarchical Time Series Forecasting using Prophet.  \n[nupic](https://github.com/numenta/nupic) - Hierarchical Temporal Memory (HTM) for Time Series Prediction and Anomaly Detection.  \n[tensorflow](https://github.com/tensorflow/tensorflow/) - LSTM and others, examples: [link](\nhttps://machinelearningmastery.com/time-series-forecasting-long-short-term-memory-network-python/\n), [link](https://github.com/tensorflow/tensorflow/tree/master/tensorflow/contrib/timeseries), [link](https://github.com/hzy46/TensorFlow-Time-Series-Examples), [Explain LSTM](https://github.com/slundberg/shap/blob/master/notebooks/deep_explainer/Keras%20LSTM%20for%20IMDB%20Sentiment%20Classification.ipynb), seq2seq: [1](https://machinelearningmastery.com/how-to-develop-lstm-models-for-multi-step-time-series-forecasting-of-household-power-consumption/), [2](https://github.com/guillaume-chevalier/seq2seq-signal-prediction), [3](https://github.com/JEddy92/TimeSeries_Seq2Seq/blob/master/notebooks/TS_Seq2Seq_Intro.ipynb), [4](https://github.com/LukeTonin/keras-seq-2-seq-signal-prediction)  \n[tspreprocess](https://github.com/MaxBenChrist/tspreprocess) - Preprocessing: Denoising, Compression, Resampling.  \n[tsfresh](https://github.com/blue-yonder/tsfresh) - Time series feature engineering.  \n[thunder](https://github.com/thunder-project/thunder) - Data structures and algorithms for loading, processing, and analyzing time series data.  \n[gatspy](https://www.astroml.org/gatspy/) - General tools for Astronomical Time Series, [talk](https://www.youtube.com/watch?v=E4NMZyfao2c).  \n[gendis](https://github.com/IBCNServices/GENDIS) - shapelets, [example](https://github.com/IBCNServices/GENDIS/blob/master/gendis/example.ipynb).  \n[tslearn](https://github.com/rtavenar/tslearn) - Time series clustering and classification, `TimeSeriesKMeans`, `TimeSeriesKMeans`.  \n[pastas](https://pastas.readthedocs.io/en/latest/examples.html) - Simulation of time series.  \n[fastdtw](https://github.com/slaypni/fastdtw) - Dynamic Time Warp Distance.  \n[fable](https://www.rdocumentation.org/packages/fable/versions/0.0.0.9000) - Time Series Forecasting (R package).  \n[CausalImpact](https://github.com/tcassou/causal_impact) - Causal Impact Analysis ([R package](https://google.github.io/CausalImpact/CausalImpact.html)).  \n[pydlm](https://github.com/wwrechard/pydlm) - Bayesian time series modeling ([R package](https://cran.r-project.org/web/packages/bsts/index.html), [Blog post](http://www.unofficialgoogledatascience.com/2017/07/fitting-bayesian-structural-time-series.html))  \n[PyAF](https://github.com/antoinecarme/pyaf) - Automatic Time Series Forecasting.  \n[luminol](https://github.com/linkedin/luminol) - Anomaly Detection and Correlation library from Linkedin.  \n[matrixprofile-ts](https://github.com/target/matrixprofile-ts) - Detecting patterns and anomalies, [website](https://www.cs.ucr.edu/~eamonn/MatrixProfile.html), [ppt](https://www.cs.ucr.edu/~eamonn/Matrix_Profile_Tutorial_Part1.pdf), [alternative](https://github.com/matrix-profile-foundation/mass-ts).  \n[stumpy](https://github.com/TDAmeritrade/stumpy) - Another matrix profile library.  \n[obspy](https://github.com/obspy/obspy) - Seismology package. Useful `classic_sta_lta` function.  \n[RobustSTL](https://github.com/LeeDoYup/RobustSTL) - Robust Seasonal-Trend Decomposition.  \n[seglearn](https://github.com/dmbee/seglearn) - Time Series library.  \n[pyts](https://github.com/johannfaouzi/pyts) - Time series transformation and classification, [Imaging time series](https://pyts.readthedocs.io/en/latest/auto_examples/index.html#imaging-time-series).  \nTurn time series into images and use Neural Nets: [example](https://gist.github.com/oguiza/c9c373aec07b96047d1ba484f23b7b47), [example](https://github.com/kiss90/time-series-classification).    \n[sktime](https://github.com/alan-turing-institute/sktime), [sktime-dl](https://github.com/uea-machine-learning/sktime-dl) - Toolbox for (deep) learning with time series.  \n\n##### Time Series Evaluation\n\n[TimeSeriesSplit](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.TimeSeriesSplit.html) - Sklearn time series split.  \n[tscv](https://github.com/WenjieZ/TSCV) - Evaluation with gap.  \n\n#### Financial Data\n[pyfolio](https://github.com/quantopian/pyfolio) - Portfolio and risk analytics.  \n[zipline](https://github.com/quantopian/zipline) - Algorithmic trading.  \n[alphalens](https://github.com/quantopian/alphalens) - Performance analysis of predictive stock factors.  \n[stockstats](https://github.com/jealous/stockstats) - Pandas DataFrame wrapper for working with stock data.  \n[pandas-datareader](https://pandas-datareader.readthedocs.io/en/latest/whatsnew.html) - Read stock data.  \n\n#### Survival Analysis\n[Time-dependent Cox Model in R](https://stats.stackexchange.com/questions/101353/cox-regression-with-time-varying-covariates).  \n[lifelines](https://lifelines.readthedocs.io/en/latest/) - Survival analysis, Cox PH Regression, [talk](https://www.youtube.com/watch?v=aKZQUaNHYb0), [talk2](https://www.youtube.com/watch?v=fli-yE5grtY).  \n[scikit-survival](https://github.com/sebp/scikit-survival) - Survival analysis.  \n[xgboost](https://github.com/dmlc/xgboost) - `"objective": "survival:cox"` [NHANES example](https://slundberg.github.io/shap/notebooks/NHANES%20I%20Survival%20Model.html)  \n[survivalstan](https://github.com/hammerlab/survivalstan) - Survival analysis, [intro](http://www.hammerlab.org/2017/06/26/introducing-survivalstan/).  \n[convoys](https://github.com/better/convoys) - Analyze time lagged conversions.  \nRandomSurvivalForests (R packages: randomForestSRC, ggRandomForests).  \n\n#### Outlier Detection & Anomaly Detection\n[sklearn](https://scikit-learn.org/stable/modules/outlier_detection.html) - Isolation Forest and others.  \n[pyod](https://pyod.readthedocs.io/en/latest/pyod.html) - Outlier Detection / Anomaly Detection.  \n[eif](https://github.com/sahandha/eif) - Extended Isolation Forest.  \n[AnomalyDetection](https://github.com/twitter/AnomalyDetection) - Anomaly detection (R package).  \n[luminol](https://github.com/linkedin/luminol) - Anomaly Detection and Correlation library from Linkedin.  \nDistances for comparing histograms and detecting outliers - [Talk](https://www.youtube.com/watch?v=U7xdiGc7IRU): [Kolmogorov-Smirnov](https://docs.scipy.org/doc/scipy-0.14.0/reference/generated/scipy.stats.ks_2samp.html), [Wasserstein](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.wasserstein_distance.html), [Energy Distance (Cramer)](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.energy_distance.html), [Kullback-Leibler divergence](https://scipy.github.io/devdocs/generated/scipy.stats.entropy.html).  \n[banpei](https://github.com/tsurubee/banpei) - Anomaly detection library based on singular spectrum transformation.  \n[telemanom](https://github.com/khundman/telemanom) - Detect anomalies in multivariate time series data using LSTMs.  \n\n#### Ranking\n[lightning](https://github.com/scikit-learn-contrib/lightning) - Large-scale linear classification, regression and ranking.  \n\n#### Scoring\n[SLIM](https://github.com/ustunb/slim-python) - Scoring systems for classification, Supersparse linear integer models.  \n\n#### Probabilistic Modeling and Bayes\n[Intro](https://erikbern.com/2018/10/08/the-hackers-guide-to-uncertainty-estimates.html), [Guide](https://github.com/CamDavidsonPilon/Probabilistic-Programming-and-Bayesian-Methods-for-Hackers)  \n[PyMC3](https://docs.pymc.io/) - Baysian modelling, [intro](https://docs.pymc.io/notebooks/getting_started)  \n[pomegranate](https://github.com/jmschrei/pomegranate) - Probabilistic modelling, [talk](https://www.youtube.com/watch?v=dE5j6NW-Kzg).  \n[pmlearn](https://github.com/pymc-learn/pymc-learn) - Probabilistic machine learning.  \n[arviz](https://github.com/arviz-devs/arviz) - Exploratory analysis of Bayesian models.  \n[zhusuan](https://github.com/thu-ml/zhusuan) - Bayesian deep learning, generative models.  \n[dowhy](https://github.com/Microsoft/dowhy) - Estimate causal effects.  \n[edward](https://github.com/blei-lab/edward) - Probabilistic modeling, inference, and criticism, [Mixture Density Networks (MNDs)](http://edwardlib.org/tutorials/mixture-density-network), [MDN Explanation](https://towardsdatascience.com/a-hitchhikers-guide-to-mixture-density-networks-76b435826cca).  \n[Pyro](https://github.com/pyro-ppl/pyro) - Deep Universal Probabilistic Programming.  \n[tensorflow probability](https://github.com/tensorflow/probability) - Deep learning and probabilistic modelling, [talk](https://www.youtube.com/watch?v=BrwKURU-wpk), [example](https://github.com/CamDavidsonPilon/Probabilistic-Programming-and-Bayesian-Methods-for-Hackers/blob/master/Chapter1_Introduction/Ch1_Introduction_TFP.ipynb).  \n[bambi](https://github.com/bambinos/bambi) - High-level Bayesian model-building interface on top of PyMC3.  \n\n#### Stacking Models and Ensembles\n[Model Stacking Blog Post](http://blog.kaggle.com/2017/06/15/stacking-made-easy-an-introduction-to-stacknet-by-competitions-grandmaster-marios-michailidis-kazanova/)  \n[mlxtend](https://github.com/rasbt/mlxtend) - `EnsembleVoteClassifier`, `StackingRegressor`, `StackingCVRegressor` for model stacking.  \n[vecstack](https://github.com/vecxoz/vecstack) - Stacking ML models.  \n[StackNet](https://github.com/kaz-Anova/StackNet) - Stacking ML models.  \n[mlens](https://github.com/flennerhag/mlens) - Ensemble learning.  \n\n#### Model Evaluation\n[pycm](https://github.com/sepandhaghighi/pycm) - Multi-class confusion matrix.  \n[pandas_ml](https://github.com/pandas-ml/pandas-ml) - Confusion matrix.  \nPlotting learning curve: [link](http://www.ritchieng.com/machinelearning-learning-curve/).  \n[yellowbrick](http://www.scikit-yb.org/en/latest/api/model_selection/learning_curve.html) - Learning curve.  \n\n#### Model Explanation, Interpretability, Feature Importance\n[Book](https://christophm.github.io/interpretable-ml-book/agnostic.html), [Examples](https://github.com/jphall663/interpretable_machine_learning_with_python)  \n[shap](https://github.com/slundberg/shap) - Explain predictions of machine learning models, [talk](https://www.youtube.com/watch?v=C80SQe16Rao).  \n[treeinterpreter](https://github.com/andosa/treeinterpreter) - Interpreting scikit-learn\'s decision tree and random forest predictions.  \n[lime](https://github.com/marcotcr/lime) - Explaining the predictions of any machine learning classifier, [talk](https://www.youtube.com/watch?v=C80SQe16Rao), [Warning (Myth 7)](https://crazyoscarchang.github.io/2019/02/16/seven-myths-in-machine-learning-research/).  \n[lime_xgboost](https://github.com/jphall663/lime_xgboost) - Create LIMEs for XGBoost.  \n[eli5](https://github.com/TeamHG-Memex/eli5) - Inspecting machine learning classifiers and explaining their predictions.  \n[lofo-importance](https://github.com/aerdem4/lofo-importance) - Leave One Feature Out Importance, [talk](https://www.youtube.com/watch?v=zqsQ2ojj7sE), examples: [1](https://www.kaggle.com/divrikwicky/pf-f-lofo-importance-on-adversarial-validation), [2](https://www.kaggle.com/divrikwicky/lofo-importance), [3](https://www.kaggle.com/divrikwicky/santanderctp-lofo-feature-importance).  \n[pybreakdown](https://github.com/MI2DataLab/pyBreakDown) - Generate feature contribution plots.  \n[FairML](https://github.com/adebayoj/fairml) - Model explanation, feature importance.  \n[pycebox](https://github.com/AustinRochford/PyCEbox) - Individual Conditional Expectation Plot Toolbox.  \n[pdpbox](https://github.com/SauceCat/PDPbox) - Partial dependence plot toolbox, [example](https://www.kaggle.com/dansbecker/partial-plots).  \n[partial_dependence](https://github.com/nyuvis/partial_dependence) - Visualize and cluster partial dependence.  \n[skater](https://github.com/datascienceinc/Skater) - Unified framework to enable model interpretation.  \n[anchor](https://github.com/marcotcr/anchor) - High-Precision Model-Agnostic Explanations for classifiers.  \n[l2x](https://github.com/Jianbo-Lab/L2X) - Instancewise feature selection as methodology for model interpretation.  \n[contrastive_explanation](https://github.com/MarcelRobeer/ContrastiveExplanation) - Contrastive explanations.  \n[DrWhy](https://github.com/ModelOriented/DrWhy) - Collection of tools for explainable AI.  \n[lucid](https://github.com/tensorflow/lucid) - Neural network interpretability.  \n[xai](https://github.com/EthicalML/XAI) - An eXplainability toolbox for machine learning.  \n[innvestigate](https://github.com/albermax/innvestigate) - A toolbox to investigate neural network predictions.  \n[dalex](https://github.com/pbiecek/DALEX) - Explanations for ML models (R package).  \n[interpret](https://github.com/microsoft/interpret) - Fit interpretable models, explain models (Microsoft).  \n\n#### Automated Machine Learning\n[AdaNet](https://github.com/tensorflow/adanet) - Automated machine learning based on tensorflow.  \n[tpot](https://github.com/EpistasisLab/tpot) - Automated machine learning tool, optimizes machine learning pipelines.  \n[auto_ml](https://github.com/ClimbsRocks/auto_ml) - Automated machine learning for analytics & production.  \n[autokeras](https://github.com/jhfjhfj1/autokeras) - AutoML for deep learning.  \n[nni](https://github.com/Microsoft/nni) - Toolkit for neural architecture search and hyper-parameter tuning by Microsoft.  \n[automl-gs](https://github.com/minimaxir/automl-gs) - Automated machine learning.  \n[mljar](https://github.com/mljar/mljar-supervised) - Automated machine learning.  \n\n#### Evolutionary Algorithms & Optimization\n[deap](https://github.com/DEAP/deap) - Evolutionary computation framework (Genetic Algorithm, Evolution strategies).  \n[evol](https://github.com/godatadriven/evol) - DSL for composable evolutionary algorithms, [talk](https://www.youtube.com/watch?v=68ABAU_V8qI&t=11m49s).  \n[platypus](https://github.com/Project-Platypus/Platypus) - Multiobjective optimization.  \n[autograd](https://github.com/HIPS/autograd) - Efficiently computes derivatives of numpy code.  \n[nevergrad](https://github.com/facebookresearch/nevergrad) - Derivation-free optimization.  \n[gplearn](https://gplearn.readthedocs.io/en/stable/) - Sklearn-like interface for genetic programming.  \n[blackbox](https://github.com/paulknysh/blackbox) - Optimization of expensive black-box functions.  \nOptometrist algorithm - [paper](https://www.nature.com/articles/s41598-017-06645-7).  \n[DeepSwarm](https://github.com/Pattio/DeepSwarm) - Neural architecture search.  \n\n#### Hyperparameter Tuning\n[sklearn](https://scikit-learn.org/stable/index.html) - [GridSearchCV](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.GridSearchCV.html), [RandomizedSearchCV](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.RandomizedSearchCV.html).  \n[sklearn-deap](https://github.com/rsteca/sklearn-deap) - Hyperparameter search using genetic algorithms.  \n[hyperopt](https://github.com/hyperopt/hyperopt) - Hyperparameter optimization.  \n[hyperopt-sklearn](https://github.com/hyperopt/hyperopt-sklearn) - Hyperopt + sklearn.  \n[optuna](https://github.com/pfnet/optuna) - Hyperparamter optimization, [Talk](https://www.youtube.com/watch?v=tcrcLRopTX0).  \n[skopt](https://scikit-optimize.github.io/) - `BayesSearchCV` for Hyperparameter search.  \n[tune](https://ray.readthedocs.io/en/latest/tune.html) - Hyperparameter search with a focus on deep learning and deep reinforcement learning.  \n[hypergraph](https://github.com/aljabr0/hypergraph) - Global optimization methods and hyperparameter optimization.  \n[bbopt](https://github.com/evhub/bbopt) - Black box hyperparameter optimization.  \n[dragonfly](https://github.com/dragonfly/dragonfly) - Scalable Bayesian optimisation.  \n\n#### Incremental Learning, Online Learning\nsklearn - [PassiveAggressiveClassifier](https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.PassiveAggressiveClassifier.html), [PassiveAggressiveRegressor](https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.PassiveAggressiveRegressor.html).  \n[creme-ml](https://github.com/creme-ml/creme) - Incremental learning framework, [talk](https://www.youtube.com/watch?v=P3M6dt7bY9U).  \n[Kaggler](https://github.com/jeongyoonlee/Kaggler) - Online Learning algorithms.  \n\n#### Active Learning\n[Talk](https://www.youtube.com/watch?v=0efyjq5rWS4)  \n[modAL](https://github.com/modAL-python/modAL) - Active learning framework.  \n\n#### Reinforcement Learning\n[YouTube](https://www.youtube.com/playlist?list=PL7-jPKtc4r78-wCZcQn5IqyuWhBZ8fOxT), [YouTube](https://www.youtube.com/playlist?list=PLqYmG7hTraZDNJre23vqCGIVpfZ_K2RZs)  \nIntro to Monte Carlo Tree Search (MCTS) - [1](https://jeffbradberry.com/posts/2015/09/intro-to-monte-carlo-tree-search/), [2](http://mcts.ai/about/index.html), [3](https://medium.com/@quasimik/monte-carlo-tree-search-applied-to-letterpress-34f41c86e238)  \nAlphaZero methodology - [1](https://github.com/AppliedDataSciencePartners/DeepReinforcementLearning), [2](https://web.stanford.edu/~surag/posts/alphazero.html), [3](https://github.com/suragnair/alpha-zero-general), [Cheat Sheet](https://medium.com/applied-data-science/alphago-zero-explained-in-one-diagram-365f5abf67e0)  \n[RLLib](https://ray.readthedocs.io/en/latest/rllib.html) - Library for reinforcement learning.  \n[Horizon](https://github.com/facebookresearch/Horizon/) - Facebook RL framework.  \n\n#### Frameworks\n[h2o](https://github.com/h2oai/h2o-3) - Scalable machine learning.  \n[turicreate](https://github.com/apple/turicreate) - Apple Machine Learning Toolkit.  \n[astroml](https://github.com/astroML/astroML) - ML for astronomical data.  \n\n#### Deployment and Lifecycle Management\n\n##### Dependency Management\n[pipreqs](https://github.com/bndr/pipreqs) - Generate a requirements.txt from import statements.  \n[pyup](https://github.com/pyupio/pyup) - Python dependency management.  \n[pypi-timemachine](https://github.com/astrofrog/pypi-timemachine) - Install packages with pip as if you were in the past.  \n[pypi2nix] - Fix package versions and create reproducible environments, [Talk](https://www.youtube.com/watch?v=USDbjmxEZ_I).\n\n##### Data Science Related\n[m2cgen](https://github.com/BayesWitnesses/m2cgen) - Transpile trained ML models into other languages.  \n[sklearn-porter](https://github.com/nok/sklearn-porter) - Transpile trained scikit-learn estimators to C, Java, JavaScript and others.  \n[mlflow](https://mlflow.org/) - Manage the machine learning lifecycle, including experimentation, reproducibility and deployment.  \n[modelchimp](https://github.com/ModelChimp/modelchimp) - Experiment Tracking.  \n[skll](https://github.com/EducationalTestingService/skll) - Command-line utilities to make it easier to run machine learning experiments.  \n[BentoML](https://github.com/bentoml/BentoML) - Package and deploy machine learning models for serving in production.  \n[dvc](https://github.com/iterative/dvc) - Versioning for ML projects.  \n[dagster](https://github.com/dagster-io/dagster) - Tool with focus on dependency graphs.  \n[knockknock](https://github.com/huggingface/knockknock) - Be notified when your training ends.  \n\n#### Math and Background\nGilbert Strang - [Linear Algebra](https://ocw.mit.edu/courses/mathematics/18-06-linear-algebra-spring-2010/index.htm)  \nGilbert Strang - [Matrix Methods in Data Analysis, Signal Processing, and Machine Learning\n](https://ocw.mit.edu/courses/mathematics/18-065-matrix-methods-in-data-analysis-signal-processing-and-machine-learning-spring-2018/)  \n\n#### Other\n[daft](https://github.com/dfm/daft) - Render probabilistic graphical models using matplotlib.  \n[unyt](https://github.com/yt-project/unyt) - Working with units.  \n[scrapy](https://github.com/scrapy/scrapy) - Web scraping library.  \n[VowpalWabbit](https://github.com/VowpalWabbit/vowpal_wabbit) - ML Toolkit from Microsoft.  \n[metric-learn](https://github.com/metric-learn/metric-learn) - Metric learning.   \n\n#### General Python Programming\n[more_itertools](https://more-itertools.readthedocs.io/en/latest/) - Extension of itertools.  \n[funcy](https://github.com/Suor/funcy) - Fancy and practical functional tools.  \n[dateparser](https://dateparser.readthedocs.io/en/latest/) - A better date parser.  \n[jellyfish](https://github.com/jamesturk/jellyfish) - Approximate string matching.   \n[coloredlogs](https://github.com/xolox/python-coloredlogs) - Colored logging output.    \n\n#### Resources\n[Distill.pub](https://distill.pub/) - Blog.\n[Machine Learning Videos](https://github.com/dustinvtran/ml-videos)  \n[Data Science Notebooks](https://github.com/donnemartin/data-science-ipython-notebooks)  \n[Recommender Systems (Microsoft)](https://github.com/Microsoft/Recommenders)  \n[The GAN Zoo](https://github.com/hindupuravinash/the-gan-zoo) - List of Generative Adversarial Networks  \n[Datascience Cheatsheets](https://github.com/FavioVazquez/ds-cheatsheets)   \n\n##### Other Awesome Lists\n[Awesome Adversarial Machine Learning](https://github.com/yenchenlin/awesome-adversarial-machine-learning)  \n[Awesome AI Booksmarks](https://github.com/goodrahstar/my-awesome-AI-bookmarks)  \n[Awesome AI on Kubernetes](https://github.com/CognonicLabs/awesome-AI-kubernetes)  \n[Awesome Big Data](https://github.com/onurakpolat/awesome-bigdata)  \n[Awesome Business Machine Learning](https://github.com/firmai/business-machine-learning)  \n[Awesome Causality](https://github.com/rguo12/awesome-causality-algorithms)  \n[Awesome CSV](https://github.com/secretGeek/AwesomeCSV)  \n[Awesome Data Science with Ruby](https://github.com/arbox/data-science-with-ruby)  \n[Awesome Dash](https://github.com/ucg8j/awesome-dash)  \n[Awesome Deep Learning](https://github.com/ChristosChristofidis/awesome-deep-learning)  \n[Awesome ETL](https://github.com/pawl/awesome-etl)  \n[Awesome Financial Machine Learning](https://github.com/firmai/financial-machine-learning)  \n[Awesome GAN Applications](https://github.com/nashory/gans-awesome-applications)  \n[Awesome Machine Learning](https://github.com/josephmisiti/awesome-machine-learning#python)  \n[Awesome Machine Learning Interpretability](https://github.com/jphall663/awesome-machine-learning-interpretability)   \n[Awesome Machine Learning Operations](https://github.com/EthicalML/awesome-machine-learning-operations)  \n[Awesome Online Machine Learning](https://github.com/MaxHalford/awesome-online-machine-learning)  \n[Awesome Python](https://github.com/vinta/awesome-python)   \n[Awesome Python Data Science](https://github.com/krzjoa/awesome-python-datascience)   \n[Awesome Python Data Science](https://github.com/thomasjpfan/awesome-python-data-science)  \n[Awesome Pytorch](https://github.com/bharathgs/Awesome-pytorch-list)  \n[Awesome Recommender Systems](https://github.com/grahamjenson/list_of_recommender_systems)  \n[Awesome Semantic Segmentation](https://github.com/mrgloom/awesome-semantic-segmentation)  \n[Awesome Sentence Embedding](https://github.com/Separius/awesome-sentence-embedding)  \n[Awesome Time Series](https://github.com/MaxBenChrist/awesome_time_series_in_python)  \n[Awesome Time Series Anomaly Detection](https://github.com/rob-med/awesome-TS-anomaly-detection)  \n\n#### Things I google a lot\n[Frequency codes for time series](https://pandas.pydata.org/pandas-docs/stable/timeseries.html#offset-aliases)  \n[Date parsing codes](https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior)  \n[Feature Calculators tsfresh](https://github.com/blue-yonder/tsfresh/blob/master/tsfresh/feature_extraction/feature_calculators.py)  \n\n## Contributing  \nDo you know a package that should be on this list? Did you spot a package that is no longer maintained and should be removed from this list? Then feel free to read the [contribution guidelines](CONTRIBUTING.md) and submit your pull request or create a new issue.  \n\n## License\n\n[![CC0](http://mirrors.creativecommons.org/presskit/buttons/88x31/svg/cc-zero.svg)](https://creativecommons.org/publicdomain/zero/1.0/)\n'