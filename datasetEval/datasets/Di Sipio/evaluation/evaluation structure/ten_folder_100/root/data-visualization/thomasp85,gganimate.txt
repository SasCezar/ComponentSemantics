b'\n<!-- README.md is generated from README.Rmd. Please edit that file -->\n\n# gganimate <img src="man/figures/logo.png" align="right" style="padding-left:10px;background-color:white;" />\n\n[![Travis-CI Build\nStatus](https://travis-ci.org/thomasp85/gganimate.svg?branch=master)](https://travis-ci.org/thomasp85/gganimate)\n[![AppVeyor Build\nStatus](https://ci.appveyor.com/api/projects/status/github/thomasp85/gganimate?branch=master&svg=true)](https://ci.appveyor.com/project/thomasp85/gganimate)\n[![CRAN\\_Status\\_Badge](http://www.r-pkg.org/badges/version-ago/gganimate)](https://cran.r-project.org/package=gganimate)\n[![CRAN\\_Download\\_Badge](http://cranlogs.r-pkg.org/badges/gganimate)](https://cran.r-project.org/package=gganimate)\n[![Coverage\nStatus](https://img.shields.io/codecov/c/github/thomasp85/gganimate/master.svg)](https://codecov.io/github/thomasp85/gganimate?branch=master)\n\n`gganimate` extends the grammar of graphics as implemented by\n[`ggplot2`](https://github.com/tidyverse/ggplot2) to include the\ndescription of animation. It does this by providing a range of new\ngrammar classes that can be added to the plot object in order to\ncustomise how it should change with time.\n\n  - `transition_*()` defines how the data should be spread out and how\n    it relates to itself across time.\n  - `view_*()` defines how the positional scales should change along the\n    animation.\n  - `shadow_*()` defines how data from other points in time should be\n    presented in the given point in time.\n  - `enter_*()`/`exit_*()` defines how new data should appear and how\n    old data should disappear during the course of the animation.\n  - `ease_aes()` defines how different aesthetics should be eased during\n    transitions.\n\n## An Example\n\nAll of the above might seem a bit abstract. Let\xe2\x80\x99s try with a contrived\nexample:\n\n``` r\nlibrary(ggplot2)\nlibrary(gganimate)\n\nggplot(mtcars, aes(factor(cyl), mpg)) + \n  geom_boxplot() + \n  # Here comes the gganimate code\n  transition_states(\n    gear,\n    transition_length = 2,\n    state_length = 1\n  ) +\n  enter_fade() + \n  exit_shrink() +\n  ease_aes(\'sine-in-out\')\n```\n\n![](man/figures/README-unnamed-chunk-2-1.gif)<!-- -->\n\nHere we take a simple boxplot of fuel consumption as a function of\ncylinders and lets it transition between the number of gears available\nin the cars. As this is a discrete split (`gear` being best described as\nan ordered factor) we use `transition_states` and provides a relative\nlength to use for transition and state view. As not all combinations of\ndata is present there are states missing a box. We define that when a\nbox appears it should fade into view, whereas at should shrink away when\nit disappear. Lastly we decide to use a sinusoidal easing for all our\naesthetics (here, only `y` is changing)\n\n## Installation\n\n`gganimate` is available on CRAN and can be installed with\n`install.packages(\'gganimate\')`. If you wish to install the development\nversion you can install directly from github using devtools:\n\n``` r\n# install.packages(\'devtools\')\ndevtools::install_github(\'thomasp85/gganimate\')\n```\n\n## Yet Another Example\n\nIt is impossible to cover everything possible with `gganimate` in a\nREADME, but animations are fun, so let\xe2\x80\x99s at least have one more:\n\n``` r\nlibrary(gapminder)\n\nggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +\n  geom_point(alpha = 0.7, show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  scale_x_log10() +\n  facet_wrap(~continent) +\n  # Here comes the gganimate specific bits\n  labs(title = \'Year: {frame_time}\', x = \'GDP per capita\', y = \'life expectancy\') +\n  transition_time(year) +\n  ease_aes(\'linear\')\n```\n\n![](man/figures/README-unnamed-chunk-4-1.gif)<!-- -->\n\nIn this example we see the use of `transition_time()` which can be used\nwith continuous variables such as `year`. With this transition it is not\nnecessary to provide transition and state length as the \xe2\x80\x9ctransition\nvariable\xe2\x80\x9d provides this directly (e.g.\xc2\xa0it should take twice as long to\ntransition between 1980 and 1990 compared to 2000 to 2005). We also see\nthe use of string literal interpolation in titles. `gganimate` lets you\nspecify variables to evaluate inside titles and different transitions\nprovide different type of information to use.\n\n## Where is my animation?\n\n`gganimate` mimics the way `ggplot2` renders its output, in that the\nrendering is done automatically when the `gganim` object is printed.\nUnder the hood, the `animate()` function is called which renders the\nframe and passes the frames to a renderer functions which takes care of\ncombining them to the final animation. The default renderer is\n`gifski_renderer()` which returns a `gif_image` object which is a simple\nwrapper around a path to a gif file. If `animate()` has been called\nimplicitly as part of `print` the `gif_image` object is available using\nthe `last_animation()` function (analogous to `ggplot2::last_plot()`).\nIn order to save the animation to a specific location, you can use the\n`anim_save()` function which, like `ggplot2::ggsave`, defaults to taking\nthe last rendered animation and writes it to a file.\n\n## I don\xe2\x80\x99t like gifs\xe2\x80\xa6\n\ngif is a fantastic format for animations due to its wide support, but\nsometimes another format is required. `gganimate` is agnostic to the\nrenderer and while the default is to use\n[gifski](https://github.com/r-rust/gifski) to combines the frames into a\ngif, it doesn\xe2\x80\x99t have to be so. By passing an alternate renderer to the\n`animate()` function you can control the animation format, and\n`gganimate` comes with a bunch (and you can write your own). To create\nvideo files you can e.g.\xc2\xa0use the `ffmpeg_renderer()`:\n\n``` r\np <- ggplot(airquality, aes(Day, Temp)) + \n  geom_line(size = 2, colour = \'steelblue\') + \n  transition_states(Month, 4, 1) + \n  shadow_mark(size = 1, colour = \'grey\')\nanimate(p, renderer = ffmpeg_renderer())\n```\n\n*Video output are automatically embedded in RMarkdown documents, but\nGitHub strips video when rendering READMEs so you can\xe2\x80\x99t see it here*\n\nFurther there\xe2\x80\x99s support for rendering to sprite sheets if that is your\nvice.\n\n## Old API\n\nThis is the second iteration of the gganimate package. The first,\ndeveloped by [David Robinson](https://github.com/dgrtwo) had a very\ndifferent API, and relied on specifying animation frame membership\ninside `aes()` blocks in the `geom_*()` calls. This approach was easy to\ngrasp, but essentially limited in capabilities and has thus been\nabandoned for a more thorough grammar.\n\nCode written for the old API will not work with this `gganimate` version\nand there will not come a future support for it. If you wish to continue\nusing the old API then avoid upgrading `gganimate`. If you\xe2\x80\x99ve already\nupgraded and wish to downgrade, the latest version of the old API is\navailable as a [GitHub\nrelease](https://github.com/thomasp85/gganimate/releases/tag/v0.1.1).\n\nIf you wish to convert your old animations to the new API, the closest\nyou get is probably with `transition_manual`, even though it is not\ncompletely substitutable:\n\n``` r\n# Old code\nggplot(mtcars) + \n  geom_boxplot(aes(factor(cyl), mpg, frame = gear))\n\n# New code\nggplot(mtcars) + \n  geom_boxplot(aes(factor(cyl), mpg)) + \n  transition_manual(gear)\n```\n'