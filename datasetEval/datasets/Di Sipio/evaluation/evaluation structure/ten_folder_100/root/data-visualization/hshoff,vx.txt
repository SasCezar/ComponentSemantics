b'<p align="center">\n  <img src="./assets/Screen Shot 2017-05-05 at 6.55.56 AM.png" />\n</p>\n\n<p align="center">\n  <a title="npm version" href="https://www.npmjs.com/~vx">\n    <img src="https://img.shields.io/npm/v/@vx/demo.svg?style=flat-square" />\n  </a>\n  <a title="build status" href="https://travis-ci.org/hshoff/vx">\n    <img src="https://travis-ci.org/hshoff/vx.svg?branch=master" />\n  </a>\n  <a href=\'https://coveralls.io/github/hshoff/vx?branch=master\'>\n    <img src=\'https://coveralls.io/repos/github/hshoff/vx/badge.svg?branch=master\' alt=\'Coverage Status\' />\n  </a>\n  <a title="@vx/shape npm downloads" href="https://www.npmjs.com/package/@vx/shape">\n    <img src="https://img.shields.io/npm/dm/@vx/shape.svg?style=flat-square" />\n  </a>\n  <a title="Join the community on Spectrum" href="https://spectrum.chat/vx">\n    <img src="https://withspectrum.github.io/badge/badge.svg" />\n  </a>\n  <a href="https://app.fossa.io/projects/git%2Bhttps%3A%2F%2Fgithub.com%2Fhshoff%2Fvx?ref=badge_shield" alt="FOSSA Status">     <img src="https://app.fossa.io/api/projects/git%2Bhttps%3A%2F%2Fgithub.com%2Fhshoff%2Fvx.svg?type=shield"/>\n  </a>\n  <a href="https://lernajs.io/" alt="lerna">\n     <img src="https://img.shields.io/badge/maintained%20with-lerna-cc00ff.svg"/>\n  </a>\n</p>\n\n### vx\n\nvx is a collection of reusable low-level visualization components. vx combines the power of d3 to\ngenerate your visualization with the benefits of react for updating the DOM.\n\n<br />\n\n<p align="center">\n  <strong>\n    <a href="https://vx-demo.now.sh">Docs</a>\n  </strong>\n  &bull;\n  <strong>\n    <a href="https://vx-demo.now.sh/gallery">Gallery</a>\n  </strong>\n  &bull;\n  <strong>\n    <a href="https://medium.com/vx-code/getting-started-with-vx-1756bb661410">Blog</a>\n  </strong>\n  &bull;\n  <strong>\n    <a href="https://d3-slackin.herokuapp.com/" title="Join https://d3js.slack.com">Slack #vx</a>\n  </strong>\n  &bull;\n  <strong>\n    <a href="./CHANGELOG.md">Changelog</a>\n  </strong>\n  &bull;\n  <strong>\n    <a href="https://medium.com/vx-code/getting-started-with-vx-1756bb661410">Getting started tutorial</a>\n  </strong>\n</p>\n\n<p align="center">\n  <a href="https://vx-demo.now.sh/gallery">\n    <img src="./assets/vx-gallery.png" />\n  </a>\n</p>\n\n## Usage\n\n[![Remix on Glitch](https://cdn.glitch.com/2703baf2-b643-4da7-ab91-7ee2a2d00b5b%2Fremix-button.svg)](https://glitch.com/edit/#!/remix/kind-modem)\n\nLet\'s make a simple bar graph.\n\nFirst we\'ll install the relevant packages:\n\n```\n$ npm install --save @vx/mock-data @vx/group @vx/shape @vx/scale\n```\n\n<img src="./assets/simplebar.png" height="150" />\n\n```javascript\nimport React from \'react\';\nimport { letterFrequency } from \'@vx/mock-data\';\nimport { Group } from \'@vx/group\';\nimport { Bar } from \'@vx/shape\';\nimport { scaleLinear, scaleBand } from \'@vx/scale\';\n\n// We\'ll use some mock data from `@vx/mock-data` for this.\nconst data = letterFrequency;\n\n// Define the graph dimensions and margins\nconst width = 500;\nconst height = 500;\nconst margin = { top: 20, bottom: 20, left: 20, right: 20 };\n\n// Then we\'ll create some bounds\nconst xMax = width - margin.left - margin.right;\nconst yMax = height - margin.top - margin.bottom;\n\n// We\'ll make some helpers to get at the data we want\nconst x = d => d.letter;\nconst y = d => +d.frequency * 100;\n\n// And then scale the graph by our data\nconst xScale = scaleBand({\n  rangeRound: [0, xMax],\n  domain: data.map(x),\n  padding: 0.4,\n});\nconst yScale = scaleLinear({\n  rangeRound: [yMax, 0],\n  domain: [0, Math.max(...data.map(y))],\n});\n\n// Compose together the scale and accessor functions to get point functions\nconst compose = (scale, accessor) => data => scale(accessor(data));\nconst xPoint = compose(xScale, x);\nconst yPoint = compose(yScale, y);\n\n// Finally we\'ll embed it all in an SVG\nfunction BarGraph(props) {\n  return (\n    <svg width={width} height={height}>\n      {data.map((d, i) => {\n        const barHeight = yMax - yPoint(d);\n        return (\n          <Group key={`bar-${i}`}>\n            <Bar\n              x={xPoint(d)}\n              y={yMax - barHeight}\n              height={barHeight}\n              width={xScale.bandwidth()}\n              fill="#fc2e1c"\n            />\n          </Group>\n        );\n      })}\n    </svg>\n  );\n}\n\n// ... somewhere else, render it ...\n// <BarGraph />\n```\n\nFor more examples using `vx`, check out the [gallery](https://vx-demo.now.sh/gallery).\n\n## Motivation\n\n**Goal**\n\nThe goal is to create a library of components you can use to make both your own reusable chart\nlibrary or your slick custom one-off chart. vx is largely unopinionated and is meant to be build on\ntop of. Keep your bundle sizes down and use only the packages you need.\n\n**How?**\n\nUnder the hood, vx is using d3 for the calculations and math. If you\'re creating your own awesome\nchart library on top of vx, it\'s easy to create a component api that hides d3 entirely. Meaning your\nteam could create charts as easily as using reusable react components.\n\n**But why?**\n\nMixing two mental models for updating the DOM is never a good time. Copy and pasting d3 code into\n`componentDidMount()` is just that. This collection of components lets you easily build your own\nreusable visualization charts or library without having to learn d3. No more selections or\n`enter()`/`exit()`/`update()`.\n\n## Status\n\n`Beta` We\'re still in pre v1. Need to add interactions. No breaking changes planned right now\n[read more](https://github.com/hshoff/vx/issues/156#issuecomment-331318108). Check out\n[the road to v1](https://github.com/hshoff/vx/projects/1).\n\nIf you\'re a curious coder, feel free to install and play around with the packages. I recommend using\n`--save-exact` when you `npm install`.\n\n## Roadmap\n\nLots coming soon, check out the [roadmap](./ROADMAP.md).\n\n## In the wild\n\n- [williaster/data-ui](https://github.com/williaster/data-ui)\n  ([Demo](https://williaster.github.io/data-ui/))\n- [Flaque/data-structures](https://github.com/Flaque/data-structures)\n  ([Interactive explanation of the trie data structure](https://trie.now.sh/))\n- [dylanmoz/trello](https://github.com/DylanMoz/dylanmoz.github.io/blob/source/src/pages/trello/TrelloGraph.js)\n  ([Demo](http://dylanmoz.github.io/trello/))\n  ([How to Make Beautiful Graphs With vx and React-Motion](https://devblog.classy.org/how-to-make-beautiful-graphs-with-vx-and-react-motion-6ffe7aecf6f3))\n- [gkunthara/Crypto-Chart](https://github.com/gkunthara/Crypto-Chart)\n  ([Demo](https://www.crypto-chart.com/home))\n  ([Tutorial](https://medium.com/@georgekunthara/after-the-tutorial-the-first-react-app-4dce6645634e))\n- Collapsible tree with [`react-move`](https://github.com/react-tools/react-move) by\n  [@techniq](https://github.com/techniq) ([Demo](https://codesandbox.io/s/n3w687vmqj))\n  ([Radial demo](https://codesandbox.io/s/vmqwrkl395))\n  ([More info](https://github.com/hshoff/vx/issues/162#issuecomment-335029517))\n- Bitcoin 30-day price by [@hshoff](https://github.com/hshoff)\n  ([Demo](https://viewsource.now.sh/bitcoin))\n  ([Github](https://github.com/hshoff/viewsource#1-bitcoin-price-chart))\n  ([YouTube](https://www.youtube.com/watch?v=oeE2tuspdHg))\n- Ethereum candlestick chart by [@hshoff](https://github.com/hshoff)\n  ([Demo](https://viewsource.now.sh/ethereum))\n  ([Github](https://github.com/hshoff/viewsource#2-ethereum-candlestick-chart))\n- Song data visualization through spotify by [@bother7](https://github.com/bother7)\n  ([Demo](https://spotalyzer-frontend.herokuapp.com/demo)\n  ([Github](https://github.com/bother7/spotalyzer_frontend))\n- Investment Calculator ([website](https://investmentcalculator.io/))\n- Cryptagon - crypto portfolio tracker ([website](https://cryptagon.io/))\n- Animation with [`react-spring`](https://github.com/drcmda/react-spring/) by\n  [@drcmda](https://github.com/drcmda) ([Demo](https://codesandbox.io/embed/j3x61vjz5v))\n- Code Coverage Dashboard by [@ezy](https://github.com/ezy)\n  ([Demo](https://codecov-dash.herokuapp.com/))\n  ([Github](https://github.com/ezy/code-coverage-dashboard))\n- Ethereum Portfolio Toolkit by [@JayWelsh](https://github.com/JayWelsh)\n  ([Demo](https://cryptocape.com/)) ([Github](https://github.com/JayWelsh/CryptoCape))\n- Family tree by [@vkallore](https://github.com/vkallore)\n  ([Demo](https://vk-ft.now.sh/))([Github](https://github.com/vkallore/d3-vx-family-tree))\n- Have a project that\'s using vx? Open a pull request and we\'ll add it to the list.\n\n## FAQ\n\n1. What does `vx` stand for?\n\n   > vx stands for visualization components.\n\n1. Do you plan on supporting animation/transitions?\n\n   > A common criticism of vx is it doesn\'t have animation baked in, but this was a concious choice.\n   > It\'s a powerful feature to not bake it in.\n   >\n   > Imagine your app already bundles `react-motion`, adding a hypothetical `@vx/animation` is\n   > bloat. Since vx is react, it already supports all react animation libs.\n   >\n   > Charting libraries are like style guides. Each org or app will eventually want full control\n   > over their own implementation.\n   >\n   > vx makes this easier for everyone. No need to reinvent the wheel each time.\n   >\n   > more info: https://github.com/hshoff/vx/issues/6\n   >\n   > examples:\n   >\n   > - Collapsible tree with [`react-move`](https://github.com/react-tools/react-move) by\n   >   [@techniq](https://github.com/techniq) ([Demo](https://codesandbox.io/s/n3w687vmqj))\n   >   ([Radial demo](https://codesandbox.io/s/vmqwrkl395))\n   > - Animation with `react-spring` by [@drcmda](https://github.com/drcmda)\n   >   ([Demo](https://codesandbox.io/embed/j3x61vjz5v))\n\n1. Do I have to use every package to make a chart?\n\n   > nope! pick and choose the packages you need.\n\n1. Can I use this to create my own library of charts for my team?\n\n   > Please do.\n\n1. Does vx work with [preact](https://preactjs.com/)?\n\n   > yup! need to alias `react` + `react-dom` and use `preact-compat`. Here\'s a quick demo:\n   > https://vx-preact.now.sh/.\n   > [more info](https://preactjs.com/guide/switching-to-preact#how-to-alias-preact-compat)\n\n1. I like using d3.\n\n   > Me too.\n\n## Development\n\n[Yarn workspaces](https://yarnpkg.com/lang/en/docs/workspaces/) are used to manage dependencies and\nbuild config across packages in the umbrella `vx` monorepo, and\n[lerna](https://github.com/lerna/lerna/) is used to manage versioning.\n\n```\nvx/\n  lerna.json\n  package.json\n  packages/\n    vx-package-1/\n      src/\n      test/\n      build/\n      package.json\n      ...\n    vx-package-2/\n      ...\n    ...\n```\n\nRun the following to setup your local dev environment:\n\n```sh\n# Install `yarn`, alternatives at https://yarnpkg.com/en/docs/install\ncurl -o- -L https://yarnpkg.com/install.sh | bash\n\n# Clone or fork `vx`\ngit clone git@github.com:hshoff/vx.git # or your fork\ncd vx\n\n# install dependencies, and have `yarn` symlink within-`vx` dependencies\nyarn\n\n# build packages and generate types for local development\nyarn build\n```\n\nUpon modification of a signle `package` you can run `yarn build-one --workspaces=@vx/package` from\nthe `vx` monorepo root to re-build the package with your changes. You can use the local\n[`next.js`](https://nextjs.org) dev server within `packages/vx-demo` to view and iterate on your\nchanges in the gallery. From the `packages/vx-demo` folder run `yarn dev` to start the next server\nwhich (if correctly sym-linked) will also watch for changes you make to other packages (upon\nre-building them).\n\n`vx` uses [`@airbnb/nimbus`](https://github.com/airbnb/nimbus) to generate build configuration for\n`eslint`, `prettier`, `jest`, `babel`, and `typescript`.\n\n:v:\n\n[MIT](./LICENSE) &bull; [@hshoff](https://twitter.com/hshoff)\n\n[![FOSSA Status](https://app.fossa.io/api/projects/git%2Bhttps%3A%2F%2Fgithub.com%2Fhshoff%2Fvx.svg?type=large)](https://app.fossa.io/projects/git%2Bhttps%3A%2F%2Fgithub.com%2Fhshoff%2Fvx?ref=badge_large)\n'