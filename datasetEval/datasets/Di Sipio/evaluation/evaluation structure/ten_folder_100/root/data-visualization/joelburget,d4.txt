b'# d4 -- **Declarative** Data-Driven Documents\n\n## What is it?\n\nd4 is an experiment in using React to produce data-driven documents (ala d3)\nthat are performant and understandable. This is *not* a library, but rather a\ndemonstration that it\'s possible (and preferable) to use React instead of the\ncore of d3.\n\n## Why?\n\nd3 can produce fantastic results. Look no further than [Mike Bostock\'s\nblocks](https://bl.ocks.org/mbostock) for examples. Unfortunately, I\nalways find d3 code surprisingly difficult to understand and extend, in the\nsame way I used to find code difficult to approach before React encouraged a\ndeclarative style. By using React (which can render SVGs, no problem) for\ndata-driven documents, we can improve comprehension and performance and use\ntools from the React ecosystem.\n\n## How does it work?\n\nWe replace the core d3 interaction of [Enter, Update, Exit](https://medium.com/@c_behrens/enter-update-exit-6cafc6014c36#.yty2g8g0e) with, well, `render`. Let\'s first see an example.\n\n### d3\n\n```javascript\nvar svg = d3.select("body").append("svg")\n    .attr("width", width)\n    .attr("height", height);\n\nsvg.selectAll("path")\n    .data(voronoi(samples).polygons())\n  .enter().append("path")\n    .attr("d", d => `M${d.join("L")}Z`)\n    .style("fill", d => color(d.point))\n    .style("stroke", d => color(d.point));\n```\n\n### d4\n\n```javascript\nfunction Mesh() {\n  const paths = voronoi(samples)\n    .polygons()\n    .map(sample => (\n      <path\n        d={`M${sample.join(\'L\')}Z`}\n        fill={color(sample.data)}\n        stroke={color(sample.data)}\n      />\n    ));\n\n  return (\n    <svg width={width} height={height}>\n      {paths}\n    </svg>\n  );\n}\n```\n\nWe replace the mutating `select`, `selectAll`, `enter`, `append`, `data`, `attr`, and `style` with familiar React rendering of the points.\n\nAnimation is more complicated, but again, React can help. By using keys and the `ReactCSSTransitionGroup`, it\'s possible to describe animations in CSS, rather than using d3\'s interpolation. I haven\'t verified the performance, but I expect CSS transition group animations to be faster, since they\'re browser-native and avoid the JS engine. For example:\n\n```javascript\nd3.select("body")\n    .style("color", "green") // make the body green\n  .transition()\n    .style("color", "red"); // then transition to red\n```\n\nBecomes (specifying the duration, which the original left out):\n\n```css\nbody {\n  transition: color 250ms;\n}\n```\n\n## Why we still need d3\n\nd3 does [a lot](https://github.com/d3/d3/blob/master/API.md) and we can continue to use most of it. In fact, these demos collectively use a [dozen d3 packages](https://github.com/joelburget/d4/blob/master/package.json). d3 is especially useful for calculating layouts and colors.\n\n## Future Work\n\nThere are some pieces of d3 that I would love to use but aren\'t easily portable. For example, [d3-drag](https://github.com/d3/d3-drag) and [d3-zoom](https://github.com/d3/d3-zoom) smooth over a lot of the quirks you\'d have to deal with when implementing dragging and zooming, but they\'re only designed to work with d3 selections (eg `selection.call(d3.zoom().on("zoom", zoomed));`).\n\nI\'m curious about the performance of this approach. I haven\'t benchmarked yet, but my intuition is that it should be fast -- as fast as React\'s reconciliation. However, I don\'t know how that part of d3 is implemented, so maybe d3 is actually faster.\n\nA small thing -- it\'s possible to use only parts of d3. For example: `import {voronoi as d3Voronoi} from \'d3-voronoi\';` instead of `d3.voronoi`, and `import {lab} from \'d3-color\';` instead of `d3.color.lab`), but nobody uses it that way, so examples of the import style are hard to find (and it\'s often not obvious which name will be exported (`d3-geo` exports `geoArea` and `geoBounds` rather than `area` and `bounds`).\n\nBesides the five completed demos, I\'ve also started working on a few others, but I\'m deferring them to get this article published.\n\n## Demos\n\nIn all the demos we continue to use some d3 utilities, but use React to separate the logic from the display declaration. Take a look at the source for a few!\n'