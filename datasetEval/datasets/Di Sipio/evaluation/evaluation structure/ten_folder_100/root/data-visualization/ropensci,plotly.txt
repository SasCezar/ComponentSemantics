b'\n<!-- README.md is generated from README.Rmd. Please edit that file -->\n\n<img src="man/figures/plotly.png" width="200" />\n\n[![Build\nStatus](https://travis-ci.org/ropensci/plotly.png?branch=master)](https://travis-ci.org/ropensci/plotly)\n[![CRAN\nStatus](https://www.r-pkg.org/badges/version/plotly)](https://cran.r-project.org/package=plotly)\n[![CRAN\nDownloads](https://cranlogs.r-pkg.org/badges/grand-total/plotly)](https://www.rpackages.io/package/plotly)\n[![monthly](https://cranlogs.r-pkg.org/badges/plotly)](https://www.rpackages.io/package/plotly)\n\nAn R package for creating interactive web graphics via the open source\nJavaScript graphing library\n[plotly.js](https://github.com/plotly/plotly.js).\n\n## Installation\n\nInstall from CRAN:\n\n``` r\ninstall.packages("plotly")\n```\n\nOr install the latest development version (on GitHub) via devtools:\n\n``` r\ndevtools::install_github("ropensci/plotly")\n```\n\n## Getting started\n\n### Web-based ggplot2 graphics\n\nIf you use [ggplot2](https://github.com/tidyverse/ggplot2), `ggplotly()`\nconverts your static plots to an interactive web-based version\\!\n\n``` r\nlibrary(plotly)\ng <- ggplot(faithful, aes(x = eruptions, y = waiting)) +\n  stat_density_2d(aes(fill = ..level..), geom = "polygon") + \n  xlim(1, 6) + ylim(40, 100)\nggplotly(g)\n```\n\n![<http://i.imgur.com/G1rSArP.gifv>](http://i.imgur.com/G1rSArP.gif)\n\nBy default, `ggplotly()` tries to replicate the static ggplot2 version\nexactly (before any interaction occurs), but sometimes you need greater\ncontrol over the interactive behavior. The `ggplotly()` function itself\nhas some convenient \xe2\x80\x9chigh-level\xe2\x80\x9d arguments, such as `dynamicTicks`,\nwhich tells plotly.js to dynamically recompute axes, when appropriate.\nThe `style()` function also comes in handy for *modifying* the\nunderlying trace\nattributes (e.g. [hoveron](https://plot.ly/r/reference/#scatter-hoveron)) used to generate the plot:\n\n``` r\ngg <- ggplotly(g, dynamicTicks = "y")\nstyle(gg, hoveron = "points", hoverinfo = "x+y+text", hoverlabel = list(bgcolor = "white"))\n```\n\n![<http://i.imgur.com/qRvLgea.gifv>](http://imgur.com/qRvLgea.gif)\n\nMoreover, since `ggplotly()` returns a plotly object, you can apply\nessentially any function from the R package on that object. Some useful\nones include `layout()` (for [customizing the\nlayout](https://plotly-r.com/improving-ggplotly.html#modifying-layout)),\n`add_traces()` (and its higher-level `add_*()` siblings, for example\n`add_polygons()`, for [adding new\ntraces/data](https://plotly-r.com/improving-ggplotly.html#leveraging-statistical-output)),\n`subplot()` (for [combining multiple plotly\nobjects](https://plotly-r.com/arranging-views.html#arranging-plotly-objects)),\nand `plotly_json()` (for inspecting the underlying JSON sent to\nplotly.js).\n\nThe `ggplotly()` function will also respect some \xe2\x80\x9cunofficial\xe2\x80\x9d\n**ggplot2** aesthetics, namely `text` (for [customizing the\ntooltip](https://plotly-r.com/controlling-tooltips.html#tooltip-text-ggplotly)),\n`frame` (for [creating\nanimations](https://plotly-r.com/animating-views.html)),\nand `ids` (for ensuring sensible smooth transitions).\n\n### Using plotly without ggplot2\n\nThe `plot_ly()` function provides a more direct interface to plotly.js\nso you can leverage more specialized chart types (e.g., [parallel\ncoordinates](https://plot.ly/r/parallel-coordinates-plot/) or\n[maps](https://plot.ly/r/maps/)) or even some visualization that the\nggplot2 API won\xe2\x80\x99t ever support (e.g., surface,\n[mesh](https://plot.ly/r/3d-mesh/),\n[trisurf](https://plot.ly/r/trisurf/), etc).\n\n``` r\nplot_ly(z = ~volcano, type = "surface")\n```\n\n![<https://plot.ly/~brnvg/1134>](https://plot.ly/~brnvg/1134.png)\n\n## Learn more\n\nTo learn more about special features that the plotly R package provides (e.g., [client-side linking](https://plotly-r.com/client-side-linking.html), [**shiny** integration](https://plotly-r.com/linking-views-with-shiny.html), [editing and generating static images](https://plotly-r.com/publish.html), [custom events in JavaScript](https://plotly-r.com/javascript.html), and more), see <https://plotly-r.com>. You may already be familiar with existing plotly documentation (e.g., <https://plot.ly/r/>), which is essentially a language-agnostic how-to guide for learning plotly.js, whereas <https://plotly-r.com> is meant to be more wholistic tutorial written by and for the R user. The package itself ships with a number of demos (list them by running `demo(package = "plotly")`) and shiny/rmarkdown examples (list them by running `plotly_example("shiny")` or `plotly_example("rmd")`). [Carson](https://cpsievert.me) also keeps numerous [slide decks](https://talks.cpsievert.me) with useful examples and concepts.\n\n## Contributing\n\nPlease read through our [contributing\nguidelines](https://github.com/ropensci/plotly/blob/master/CONTRIBUTING.md).\nIncluded are directions for opening issues, asking questions,\ncontributing changes to plotly, and our code of\nconduct.\n\n-----\n\n![<http://ropensci.org>](http://www.ropensci.org/public_images/github_footer.png)\n'