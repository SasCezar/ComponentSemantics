b'<div align="center">\n  <img src="https://raw.githubusercontent.com/unsplash/react-trend/master/misc/documentation-assets/react-trend-example.png" width="500" alt="React Trend">\n  <br>\n  <h1>React Trend</h1>\n  <br>\n  <a href="https://www.npmjs.org/package/react-trend"><img src="https://img.shields.io/npm/v/react-trend.png?style=flat-square" alt="npm"></a> <a href="https://travis-ci.org/unsplash/react-trend"><img src="https://img.shields.io/travis/unsplash/react-trend/master.png?style=flat-square" alt="travis"></a> <a href="https://codecov.io/github/unsplash/react-trend"><img src="https://img.shields.io/codecov/c/github/unsplash/react-trend.svg" alt="travis"></a>\n</div>\n\n<br>\n<br>\n<br>\n\n### Note: This project is no longer actively maintained.\n\nUnfortunately, none of this project\'s authors have the time/enthusiasm to maintain this project right now. We recommend forking this project, or [reading its source](https://github.com/unsplash/react-trend/blob/master/src/components/Trend/Trend.js) to learn how it\'s built).\n\n---\n\nGraphing tools are often complex, abstract, and heavy. They require domain-specific knowledge, and a significant time investment.\n\nWhile building rich data visualizations for an analytics app, this is a necessary cost. But what if you just need a spark line that shows a trend?\n\nFor example, here\'s how GitHub shows activity on a repo:\n\n<img src="https://raw.githubusercontent.com/unsplash/react-trend/master/misc/documentation-assets/gh-trend.png" width="300" />\n\nHere\'s how Twitter displays your recent analytics:\n\n<img src="https://raw.githubusercontent.com/unsplash/react-trend/master/misc/documentation-assets/tw-trend.png" width="300" />\n\nThese are very simple and elegant visualizations, and they should not require a bloated graphing library to produce.\n\nReact Trend is a concrete component that does 1 thing, and does it well: generate these trending graphs.\n\n## Demo\n\nCheck out the [React Trend playground](https://unsplash.github.io/react-trend/).\n\n## Features\n\n- **Simple**. Integrate in seconds.\n- **Scalable**. Uses SVG for sharp, scalable graphs. Will fill the parent container, or you can provide a fixed size.\n- **Beautiful**. Built-in gradient support, and customizable smoothing.\n- **Animatable**. Support for on-mount animations where the trend graph draws from left to right.\n- **Tiny**. Zero-dependency, gzips to <3kb.\n\n### Installation\n\n```bash\n$ yarn add react-trend\n\n# Alternatively:\n$ npm i -S react-trend\n```\n\nUMD builds are also available via CDN:\n\n- [react-trend.js](https://unpkg.com/react-trend/umd/react-trend.js)\n- [react-trend.min.js](https://unpkg.com/react-trend/umd/react-trend.min.js)\n\nUMD build exposes the component as `Trend`.\n\n### Quickstart\n\n```js\nimport Trend from \'react-trend\';\n\nconst MyComponent = () => <Trend data={[0, 10, 5, 22, 3.6, 11]} />;\n\n// That\'s it!\n// You can, of course, customize it. Check out the API Reference below.\n// Be sure to check out `autoDraw`, `gradient`, and `smoothing`.\n```\n\n### API Reference\n\n#### SVG Props\n\nBy default, all properties not recognized by React Trend will be delegated to the SVG. The line inherits these properties if none of its own override them.\n\nThis means that, among other properties, you can use:\n\n- `stroke` to set a solid colour,\n- `strokeWidth` to change the default line thickness,\n- `strokeOpacity` to create a transparent line,\n- `strokeLinecap`/`strokeLinejoin` to control the edges of your line,\n- `strokeDasharray` to create a dashed line, and\n- `strokeDashoffset` to control where the dashes start.\n\n#### `autoDraw`\n\n| Type    | Required | Default |\n| ------- | -------- | ------- |\n| Boolean | \xe2\x9c\x95        | `false` |\n\nAllow the line to draw itself on mount. Set to `true` to enable, and customize using `autoDrawDuration` and `autoDrawEasing`.\n\n**NOTE**: This property uses `strokeDasharray` and `strokeDashoffset` under the hood to perform the animation. Because of this, any values you provide for those properties will be ignored.\n\n###### Example\n\n```js\n<Trend data={data} autoDraw autoDrawDuration={3000} autoDrawEasing="ease-in" />\n```\n\n#### `autoDrawDuration`\n\n| Type   | Required | Default |\n| ------ | -------- | ------- |\n| Number | \xe2\x9c\x95        | `2000`  |\n\nThe amount of time, in milliseconds, that the autoDraw animation should span.\n\nThis prop has no effect if `autoDraw` isn\'t set to `true`.\n\n###### Example\n\n```js\n<Trend data={data} autoDraw autoDrawDuration={3000} autoDrawEasing="ease-in" />\n```\n\n#### `autoDrawEasing`\n\n| Type   | Required | Default |\n| ------ | -------- | ------- |\n| String | \xe2\x9c\x95        | `ease`  |\n\nThe easing function to use for the autoDraw animation. Accepts any transition timing function within [the CSS spec](http://www.w3schools.com/cssref/css3_pr_transition-timing-function.asp) (eg. `linear`, `ease`, `ease-in`, `cubic-bezier`...).\n\nThis prop has no effect if `autoDraw` isn\'t set to `true`.\n\n###### Example\n\n```js\n<Trend data={data} autoDraw autoDrawDuration={3000} autoDrawEasing="ease-in" />\n```\n\n#### `data`\n\n| Type             | Required | Default     |\n| ---------------- | -------- | ----------- |\n| [Number\\|Object] | \xe2\x9c\x93        | `undefined` |\n\nThe data accepted by React Trend is incredibly simple: An array of y-axis values to graph.\n\nReact Trend takes care of normalization, so don\'t worry about ensuring the data is in a specific range.\n\nThis does mean that all data points will be evenly-spaced. If you have irregularly-spaced data, it will not be properly represented.\n\nAs of v1.2.0, you may supply an array of data objects with a `value` property.\n\n###### Example\n\n```js\n<Trend data={[120, 149, 193.4, 200, 92]} />\n<Trend data={[{ value: 4 }, { value: 6 }, { value: 8 }]} />\n```\n\n#### `gradient`\n\n| Type     | Required | Default     |\n| -------- | -------- | ----------- |\n| [String] | \xe2\x9c\x95        | `undefined` |\n\nReact Trend supports vertical gradients. It accepts an array of 2+ colour values, and will fade evenly between them from the bottom up.\n\nColour can be specified as any SVG-supported format (named, rgb, hex, etc).\n\n###### Example\n\n```js\n<Trend gradient={[\'#0FF\', \'#F0F\', \'#FF0\']} />\n```\n\n#### `height`\n\n| Type   | Required | Default     |\n| ------ | -------- | ----------- |\n| Number | \xe2\x9c\x95        | `undefined` |\n\nSet an explicit height for your SVG. By default it ensures a 1:4 aspect ratio with the width, and the width expands to fill the container.\n\nNote that in _most_ cases it is sufficient to leave this blank, and just control the size of the parent container.\n\n###### Example\n\n```js\n<Trend width={200} height={200} />\n```\n\n#### `padding`\n\n| Type   | Required | Default |\n| ------ | -------- | ------- |\n| Number | \xe2\x9c\x95        | `8`     |\n\nIf you set a very large `strokeWidth` on your line, you may notice that it gets "cropped" towards the edges. This is because SVGs don\'t support overflow.\n\nBy increasing this number, you expand the space around the line, so that very thick lines aren\'t cropped.\n\nIn most cases you don\'t need to touch this value.\n\n###### Example\n\n```js\n<Trend strokeWidth={20} padding={18} />\n```\n\n#### `radius`\n\n| Type   | Required | Default |\n| ------ | -------- | ------- |\n| Number | \xe2\x9c\x95        | `10`    |\n\nWhen using [smoothing](#smooth), you may wish to control the amount of curve around each point. For example, a `0` radius is equivalent to not having any smoothing at all, where an impossibly-large number like `10000` will ensure that each peak is as curved as it can possibly be.\n\nThis prop has no effect if `smooth` isn\'t set to `true`.\n\n###### Example\n\n```js\n<Trend smooth radius={20} strokeWidth={4} />\n```\n\n#### `smooth`\n\n| Type    | Required | Default |\n| ------- | -------- | ------- |\n| Boolean | \xe2\x9c\x95        | `false` |\n\nSmooth allows the peaks to be \'rounded\' out so that the line has no jagged edges.\n\nBy tweaking the [radius](#radius) prop, you can use this as a subtle prop to tone down the sharpness, or you can set a very high radius to create a snake-like line.\n\n###### Example\n\n```js\n<Trend smooth radius={20} strokeWidth={4} />\n```\n\n#### `width`\n\n| Type   | Required | Default     |\n| ------ | -------- | ----------- |\n| Number | \xe2\x9c\x95        | `undefined` |\n\nSet an explicit width for your SVG. By default it ensures a 1:4 aspect ratio with the height, expanding to fill the width of the container.\n\nNote that in _most_ cases it is sufficient to leave this blank, and just control the width of the parent container.\n\n###### Example\n\n```js\n<Trend width={200} height={200} />\n```\n'