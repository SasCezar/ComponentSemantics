b'[![Build Status](https://travis-ci.org/PaddlePaddle/VisualDL.svg?branch=develop)](https://travis-ci.org/PaddlePaddle/VisualDL)\n[![Documentation Status](https://img.shields.io/badge/docs-latest-brightgreen.svg?style=flat)](https://github.com/PaddlePaddle/VisualDL/tree/develop/docs)\n[![Release](https://img.shields.io/github/release/PaddlePaddle/VisualDL.svg)](https://github.com/PaddlePaddle/VisualDL/releases)\n[![License](https://img.shields.io/badge/license-Apache%202-blue.svg)](LICENSE)\n\n<p align="center">\n  <img src="https://raw.githubusercontent.com/PaddlePaddle/VisualDL/develop/docs/images/vs-logo.png" width="60%" />\n</p>\n\n## Introduction\nVisualDL is a deep learning visualization tool that can help design deep learning jobs.\nIt includes features such as scalar, parameter distribution, model structure and image visualization.\nCurrently it is being developed at a high pace.\nNew features will be continuously added.\n\nAt present, most DNN frameworks use Python as their primary language. VisualDL supports Python by nature.\nUsers can get plentiful visualization results by simply add a few lines of Python code into their model before training.\n\nBesides Python SDK, VisualDL was writen in C++ on the low level. It also provides C++ SDK that\ncan be integrated into other platforms.  \n\n\n## Component\nVisualDL provides following components:\n\n- scalar\n- histogram\n- image\n- audio\n- graph\n- high dimensional\n\n### Scalar\nScalar can be used to show the trends of error during training.\n\n<p align="center">\n<img src="https://raw.githubusercontent.com/daming-lu/large_files/master/loss_scalar.gif" width="60%"/>\n</p>\n\n### Histogram\nHistogram can be used to visualize parameter distribution and trends for any tensor.\n\n<p align="center">\n<img src="https://raw.githubusercontent.com/daming-lu/large_files/master/histogram.gif" width="60%"/>\n</p>\n\n### Image\nImage can be used to visualize any tensor or intermediate generated image.\n\n<p align="center">\n<img src="https://raw.githubusercontent.com/daming-lu/large_files/master/loss_image.gif" width="60%"/>\n</p>\n\n### Audio\nAudio can be used to play input audio samples or generated audio samples.\n\n### Graph\nVisualDL graph supports displaying paddle model, furthermore is compatible with ONNX ([Open Neural Network Exchange](https://github.com/onnx/onnx)),\nCooperated with Python SDK, VisualDL can be compatible with most major DNN frameworks, including\nPaddlePaddle, PyTorch and MXNet.\n\n<p align="center">\n  <img src="https://raw.githubusercontent.com/PaddlePaddle/VisualDL/develop/docs/images/graph_demo.gif" width="60%" />\n</p>\n\nTo display the paddle model, all you have to do is:\n\n1. call the `fluid.io.save_inference_model()`interface to save paddle model\n2. use `visualdl --model_pb [paddle_model_dir]` to load paddle model in command line\n\n### High Dimensional\n\nHigh Dimensional can be used to visualize data embeddings by projecting high-dimensional data into 2D / 3D.\n\n<p align="center">\n<img src="https://raw.githubusercontent.com/PaddlePaddle/VisualDL/develop/docs/getting_started/high_dimensional_3d.png" width="60%"/>\n</p>\n\n## Quick Start\nTo give the VisualDL a quick test, please use the following commands.\n\n```\n# Install the VisualDL. Preferably under a virtual environment or anaconda.\npip install --upgrade visualdl\n\n# run a demo, vdl_create_scratch_log will create logs for testing.\nvdl_create_scratch_log\nvisualdl --logdir=scratch_log --port=8080\n\n# visit http://127.0.0.1:8080\n```\n\nIf you encounter the error `TypeError: __init__() got an unexpected keyword argument \'file\'`, that is due to protobuf version is not 3.5+\xef\xbc\x8csimply run `pip install --upgrade protobuf` will fix the issue.\n\nIf you run into any other issues in above steps, it could be error caused by environmental issues by different python or pip versions.\nFollowing installation methods might fix the issues.\n\n## Install with Virtualenv\n\n[Virtualenv](https://virtualenv.pypa.io/en/stable/) creates isolated Python environment that prevents interfering\nby other Python programs on the same machine and make sure Python and pip are located properly.\n\nOn macOS, install pip and virtualenv by:\n```\nsudo easy_install pip\npip install --upgrade virtualenv\n```\n\nOn Linux, install pip and virtualenv by:\n```\nsudo apt-get install python3-pip python3-dev python-virtualenv\n```\n\nThen create a Virtualenv environment by one of following command:\n```\nvirtualenv ~/vdl  # for Python2.7\nvirtualenv -p python3 ~/vdl for Python 3.x\n```\n\n```~/vdl``` will be your Virtualenv directory, you may choose to install anywhere.\n\nActivate your Virtualenv environment by:\n```\nsource ~/vdl/bin/activate\n```\n\nNow you should be able to install VisualDL and run our demo:\n\n```\npip install --upgrade visualdl\n\n# run a demo, vdl_create_scratch_log will create logs for testing.\nvdl_create_scratch_log\nvisualdl --logdir=scratch_log --port=8080\n\n# visit http://127.0.0.1:8080\n```\n\nIf you still have issues installing VisualDL from Virtualenv, try following installation method.\n\n\n## Install with Anaconda\n\nAnaconda is a python distribution, with installation and package management tools. Also it is an environment manager,\nwhich provides the facility to create different python environments, each with their own settings.\n\nFollow the instructions on the [Anaconda download site](https://www.anaconda.com/download) to download and install Anaconda.\nDownload Python 3.6 version command-Line installer.\n\nCreate a conda environment named ```vdl``` or anything you want by:\n```\nconda create -n vdl pip python=2.7 # or python=3.3, etc.\n```\n\nActivate the conda environment by:\n```\nsource activate vdl\n```\n\nNow you should be able to install VisualDL and run our demo:\n\n```\npip install --upgrade visualdl\n\n# run a demo, vdl_create_scratch_log will create logs for testing.\nvdl_create_scratch_log\nvisualdl --logdir=scratch_log --port=8080\n\n# visit http://127.0.0.1:8080\n```\n\nIf you still have issues installing VisualDL, try installing from sources as in following section.\n\n\n### Install from source\n```\n#Preferably under a virtualenv or anaconda.\ngit clone https://github.com/PaddlePaddle/VisualDL.git\ncd VisualDL\n\npython setup.py bdist_wheel\npip install --upgrade dist/visualdl-*.whl\n```\n\nIf there are still issues regarding the ```pip install```, you can still start Visual DL by starting the dev server\n[here](https://github.com/PaddlePaddle/VisualDL/blob/develop/docs/how_to_dev_frontend_en.md)\n\n\n## SDK\nVisualDL provides both Python SDK and C++ SDK in order to fit more use cases.\n\n\n### Python SDK\nVisualDL now supports both Python 2 and Python 3.\nBelow is an example of creating a simple Scalar component and inserting data from different timestamps:\n\n```python\nimport random\nfrom visualdl import LogWriter\n\nlogdir = "./tmp"\nlogger = LogWriter(logdir, sync_cycle=10000)\n\n# mark the components with \'train\' label.\nwith logger.mode("train"):\n    # create a scalar component called \'scalars/scalar0\'\n    scalar0 = logger.scalar("scalars/scalar0")\n\n# add some records during DL model running.\nfor step in range(100):\n    scalar0.add_record(step, random.random())\n```\n\n### C++ SDK\nHere is the C++ SDK identical to the Python SDK example above:\n\n```c++\n#include <cstdlib>\n#include <string>\n#include "visualdl/logic/sdk.h"\n\nnamespace vs = visualdl;\nnamespace cp = visualdl::components;\n\nint main() {\n  const std::string dir = "./tmp";\n  vs::LogWriter logger(dir, 10000);\n\n  logger.SetMode("train");\n  auto tablet = logger.AddTablet("scalars/scalar0");\n\n  cp::Scalar<float> scalar0(tablet);\n\n  for (int step = 0; step < 1000; step++) {\n    float v = (float)std::rand() / RAND_MAX;\n    scalar0.AddRecord(step, v);\n  }\n\n  return 0;\n}\n```\n\n## Launch Visual DL\nAfter some logs have been generated during training, users can launch Visual DL application to see real-time data visualization by:\n\n\n```\nvisualdl --logdir <some log dir>\n```\n\nvisualDL also supports following optional parameters:\n\n- `--host` set IP\n- `--port` set port\n- `-m / --model_pb` specify ONNX format for model file to view graph\n\n\n### Contribute\n\nVisualDL is initially created by [PaddlePaddle](http://www.paddlepaddle.org/) and\n[ECharts](http://echarts.baidu.com/).\nWe welcome everyone to use, comment and contribute to Visual DL :)\n\n\n\n## More details\n\nFor more details about how to use VisualDL, please take a look at [documents](https://github.com/PaddlePaddle/VisualDL/tree/develop/demo)\n'