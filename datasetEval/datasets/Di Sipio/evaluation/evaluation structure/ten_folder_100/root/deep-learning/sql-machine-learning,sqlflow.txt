b'# SQLFlow\n\n[![Build Status](https://travis-ci.com/sql-machine-learning/sqlflow.svg?branch=develop)](https://travis-ci.com/sql-machine-learning/sqlflow) [![Coverage Status](https://coveralls.io/repos/github/sql-machine-learning/sqlflow/badge.svg?branch=HEAD)](https://coveralls.io/github/sql-machine-learning/sqlflow?branch=HEAD) [![GoDoc](https://godoc.org/github.com/sql-machine-learning/sqlflow?status.svg)](https://godoc.org/github.com/sql-machine-learning/sqlflow) [![License](https://img.shields.io/badge/license-Apache%202-blue.svg)](LICENSE) [![Go Report Card](https://goreportcard.com/badge/github.com/sql-machine-learning/sqlflow)](https://goreportcard.com/report/github.com/sql-machine-learning/sqlflow)\n\n## What is SQLFlow\n\nSQLFlow is a bridge that connects a SQL engine, e.g. MySQL, Hive or [MaxCompute](https://www.aliyun.com/product/odps), with TensorFlow, [XGBoost](https://github.com/dmlc/xgboost) and other machine learning toolkits. SQLFlow extends the SQL syntax to enable model training, prediction and model explanation.\n\n![](https://github.com/sql-machine-learning/sql-machine-learning.github.io/raw/master/assets/instruction.gif)\n\n## Motivation\n\nThe current experience of development ML based applications requires a team of data engineers, data scientists, business analysts as well as a proliferation of advanced languages and programming tools like Python, SQL, SAS, SASS, Julia, R. The fragmentation of tooling and development environment brings additional difficulties in engineering to model trainning/tunning. What if we marry the most widely used data management/processing language SQL with ML/system capabilities and let engineers with SQL skills develop advanced ML based applications?\n\nThere are already some work in progress in the industry. We can write simple machine learning prediction (or scoring) algorithms in SQL using operators like [`DOT_PRODUCT`](https://thenewstack.io/sql-fans-can-now-develop-ml-applications/). However, this requires copy-n-pasting model parameters from the training program to SQL statements. In the commercial world, we see some proprietary SQL engines providing extensions to support machine learning capabilities.\n\n- [Microsoft SQL Server](https://docs.microsoft.com/en-us/sql/advanced-analytics/?view=sql-server-2017): Microsoft SQL Server has the machine learning service that runs machine learning programs in R or Python as an external script.\n- [Teradata SQL for DL](https://www.linkedin.com/pulse/sql-deep-learning-sql-dl-omri-shiv): Teradata also provides a RESTful service, which is callable from the extended SQL SELECT syntax.\n- [Google BigQuery](https://cloud.google.com/bigquery/docs/bigqueryml-intro): Google BigQuery enables machine learning in SQL by introducing the `CREATE MODEL` statement.\n\nNone of the existing solution solves our pain point, instead we want it to be fully extensible.\n\n1. This solution should be compatible to many SQL engines, instead of a specific version or type.\n1. It should support sophisticated machine learning models, including TensorFlow for deep learning and [XGBoost](https://github.com/dmlc/xgboost) for trees.\n1. We also want the flexibility to configure and run cutting-edge ML algorithms including specifying [feature crosses](https://www.tensorflow.org/api_docs/python/tf/feature_column/crossed_column), at least, no Python or R code embedded in the SQL statements, and fully integrated with hyperparameter estimation.\n\n## Quick Overview\n\nHere are examples for training a Tensorflow [DNNClassifer](https://www.tensorflow.org/api_docs/python/tf/estimator/DNNClassifier) model using sample data Iris.train, and running prediction using the trained model. You can see how cool it is to write some elegant ML code using SQL:\n\n```sql\nsqlflow> SELECT *\nFROM iris.train\nTO TRAIN DNNClassifier\nWITH model.n_classes = 3, model.hidden_units = [10, 20]\nCOLUMN sepal_length, sepal_width, petal_length, petal_width\nLABEL class\nINTO sqlflow_models.my_dnn_model;\n\n...\nTraining set accuracy: 0.96721\nDone training\n```\n\n```sql\nsqlflow> SELECT *\nFROM iris.test\nTO PREDICT iris.predict.class\nUSING sqlflow_models.my_dnn_model;\n\n...\nDone predicting. Predict table : iris.predict\n```\n\n## How to use SQLFlow\n\n- [Quick Start](/doc/quick_start.md)\n- [Language Guide](/doc/language_guide.md)\n- [Docker Installation](/doc/run/docker.md)\n\n## Contributions\n\n- [Build from source](/doc/build.md)\n- [The walkthrough of the source code](/doc/walkthrough.md)\n- [The choice of parser generator](/doc/design/sql_parser.md)\n\n## Roadmap\n\nSQLFlow will love to support as many mainstream ML frameworks and data sources as possible, but we feel like the expansion would be hard to be done merely on our own, so we would love to hear your options on what ML frameworks and data sources you are currently using and build upon. Please refer to our [roadmap](https://github.com/sql-machine-learning/sqlflow/issues/327) for specific timelines, also let us know your current scenarios and interests around SQLFlow project so we can prioritize based on the feedback from the community.\n\n## Feedback\n\nYour feedback is our motivation to move on. Please let us know your questions, concerns, and issues by [filing Github Issues](https://github.com/sql-machine-learning/sqlflow/issues).\n\n## License\n\n[Apache License 2.0](https://github.com/sql-machine-learning/sqlflow/blob/develop/LICENSE)\n'