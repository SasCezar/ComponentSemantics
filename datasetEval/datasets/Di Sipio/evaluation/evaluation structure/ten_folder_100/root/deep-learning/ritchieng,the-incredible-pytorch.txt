b'<p align="center"><img width="40%" src="the_incredible_pytorch.png" /></p>\n\n--------------------------------------------------------------------------------\n<p align="center">\n\t<img src="https://img.shields.io/badge/stars-4000+-blue.svg"/>\n\t<img src="https://img.shields.io/badge/forks-700+-blue.svg"/>\n\t<img src="https://img.shields.io/badge/license-MIT-blue.svg"/>\n</p>\n\nThis is a curated list of tutorials, projects, libraries, videos, papers, books and anything related to the incredible [PyTorch](http://pytorch.org/). Feel free to make a pull request to contribute to this list.\n\n## Tutorials\n- [Official PyTorch Tutorials](https://github.com/pytorch/tutorials)\n- [Official PyTorch Examples](https://github.com/pytorch/examples)\n- [Practical Deep Learning with PyTorch](https://github.com/ritchieng/deep-learning-wizard)\n- [Dive Into Deep Learning with PyTorch](https://github.com/dsgiitr/d2l-pytorch)\n- [Deep Learning Models](https://github.com/rasbt/deeplearning-models)\n- [Minicourse in Deep Learning with PyTorch](https://github.com/Atcold/pytorch-Deep-Learning-Minicourse)\n- [Simple Examples to Introduce PyTorch](https://github.com/jcjohnson/pytorch-examples)\n- [Mini Tutorials in PyTorch](https://github.com/vinhkhuc/PyTorch-Mini-Tutorials)\n- [Deep Learning for NLP](https://github.com/rguthrie3/DeepLearningForNLPInPytorch)\n- [Deep Learning Tutorial for Researchers](https://github.com/yunjey/pytorch-tutorial)\n- [Fully Convolutional Networks implemented with PyTorch](https://github.com/wkentaro/pytorch-fcn)\n- [Simple PyTorch Tutorials Zero to ALL](https://github.com/hunkim/PyTorchZeroToAll)\n- [DeepNLP-models-Pytorch](https://github.com/DSKSD/DeepNLP-models-Pytorch)\n- [MILA PyTorch Welcome Tutorials](https://github.com/mila-udem/welcome_tutorials)\n- [Practical PyTorch](https://github.com/spro/practical-pytorch)\n- [PyTorch Project Template](https://github.com/moemen95/PyTorch-Project-Template)\n\t- A scalable template for PyTorch projects, with examples in Image Segmentation, Object classification, GANs and Reinforcement Learning.\n\t- [Get started Tutorial](https://github.com/moemen95/PyTorch-Project-Template/blob/master/tutorials/getStarted_tutorial.md)\n\t- [Mnist Tutorial](https://github.com/moemen95/PyTorch-Project-Template/blob/master/tutorials/mnist_tutorial.md)\n\t- [ERFNET](https://github.com/moemen95/PyTorch-Project-Template/blob/master/agents/erfnet.py)\n\t- [DCGAN](https://github.com/moemen95/PyTorch-Project-Template/blob/master/agents/dcgan.py)\n\t- [DQN](https://github.com/moemen95/PyTorch-Project-Template/blob/master/agents/dqn.py)\n\n## Visualization\n- [Loss Visualization](https://github.com/tomgoldstein/loss-landscape)\n- [Grad-CAM: Visual Explanations from Deep Networks via Gradient-based Localization](https://github.com/jacobgil/pytorch-grad-cam)\n- [Deep Inside Convolutional Networks: Visualising Image Classification Models and Saliency Maps](https://github.com/utkuozbulak/pytorch-cnn-visualizations)\n- [SmoothGrad: removing noise by adding noise](https://github.com/utkuozbulak/pytorch-cnn-visualizations)\n\n## Explainability\n- [Hierarchical interpretations for neural network predictions](https://github.com/csinva/hierarchical-dnn-interpretations)\n- [Shap, a unified approach to explain the output of any machine learning model](https://github.com/slundberg/shap)\n- [VIsualizing PyTorch saved .pth deep learning models with netron](https://github.com/lutzroeder/netron)\n- [Distilling a Neural Network Into a Soft Decision Tree](https://github.com/kimhc6028/soft-decision-tree)\n\n## Object Detection\n- [MMDetection Object Detection Toolbox](https://github.com/open-mmlab/mmdetection)\n- [Mask R-CNN Benchmark: Faster R-CNN and Mask R-CNN in PyTorch 1.0](https://github.com/facebookresearch/maskrcnn-benchmark)\n- [YOLOv3](https://www.google.com/search?q=yolo+v3+pytorc&oq=yolo+v3+pytorc&aqs=chrome..69i57j69i60l3j69i59.2355j0j4&sourceid=chrome&ie=UTF-8)\n- [YOLOv2: Real-Time Object Detection](https://github.com/longcw/yolo2-pytorch)\n- [SSD: Single Shot MultiBox Detector](https://github.com/amdegroot/ssd.pytorch)\n- [Detectron models for Object Detection](https://github.com/ignacio-rocco/detectorch)\n- [Multi-digit Number Recognition from Street View Imagery using Deep Convolutional Neural Networks](https://github.com/potterhsu/SVHNClassifier-PyTorch)\n- [Whale Detector](https://github.com/TarinZ/whale-detector)\n\n## Long-Tailed / Out-of-Distribution Recognition\n- [Invariant Risk Minimization](https://github.com/facebookresearch/InvariantRiskMinimization)\n- [Training Confidence-Calibrated Classifier for Detecting Out-of-Distribution Samples](https://github.com/alinlab/Confident_classifier)\n- [Deep Anomaly Detection with Outlier Exposure](https://github.com/hendrycks/outlier-exposure)\n- [Large-Scale Long-Tailed Recognition in an Open World](https://github.com/zhmiao/OpenLongTailRecognition-OLTR)\n- [Principled Detection of Out-of-Distribution Examples in Neural Networks](https://github.com/ShiyuLiang/odin-pytorch)\n- [Learning Confidence for Out-of-Distribution Detection in Neural Networks](https://github.com/uoguelph-mlrg/confidence_estimation)\n\n## Energy-Based Learning\n- [EBGAN, Energy-Based GANs](https://github.com/eriklindernoren/PyTorch-GAN/blob/master/implementations/ebgan/ebgan.py)\n- [Maximum Entropy Generators for Energy-based Models](https://github.com/ritheshkumar95/energy_based_generative_models)\n\n## Missing Data\n - [BRITS: Bidirectional Recurrent Imputation for Time Series](http://papers.nips.cc/paper/7911-brits-bidirectional-recurrent-imputation-for-time-series)\n\n## Architecture Search\n- [DARTS: Differentiable Architecture Search](https://github.com/quark0/darts)\n- [Efficient Neural Architecture Search (ENAS)](https://github.com/carpedm20/ENAS-pytorch)\n- [EfficientNet: Rethinking Model Scaling for Convolutional Neural Networks](https://github.com/zsef123/EfficientNets-PyTorch)\n\n## Optimization\n- [Lookahead Optimizer: k steps forward, 1 step back](https://github.com/alphadl/lookahead.pytorch)\n- [RAdam, On the Variance of the Adaptive Learning Rate and Beyond](https://github.com/LiyuanLucasLiu/RAdam)\n- [Over9000, Comparison of RAdam, Lookahead, Novograd, and combinations](https://github.com/mgrankin/over9000)\n- [AdaBound, Train As Fast as Adam As Good as SGD](https://github.com/Luolc/AdaBound)\n- [Riemannian Adaptive Optimization Methods](https://github.com/ferrine/geoopt)\n- [L-BFGS](https://github.com/hjmshi/PyTorch-LBFGS)\n- [OptNet: Differentiable Optimization as a Layer in Neural Networks](https://github.com/locuslab/optnet)\n- [Learning to learn by gradient descent by gradient descent](https://github.com/ikostrikov/pytorch-meta-optimizer)\n\n## Quantum Machine Learning\n- [Tor10, generic tensor-network library for quantum simulation in PyTorch](https://github.com/kaihsin/Tor10)\n- [PennyLane, cross-platform Python library for quantum machine learning with PyTorch interface](https://github.com/XanaduAI/pennylane)\n\n## Neural Network Compression\n- [Bayesian Compression for Deep Learning](https://github.com/KarenUllrich/Tutorial_BayesianCompressionForDL)\n- [Neural Network Distiller by Intel AI Lab: a Python package for neural network compression research](https://github.com/NervanaSystems/distiller)\n- [Learning Sparse Neural Networks through L0 regularization](https://github.com/AMLab-Amsterdam/L0_regularization)\n- [Energy-constrained Compression for Deep Neural Networks via Weighted Sparse Projection and Layer Input Masking](https://github.com/hyang1990/model_based_energy_constrained_compression)\n- [EigenDamage: Structured Pruning in the Kronecker-Factored Eigenbasis](https://github.com/alecwangcq/EigenDamage-Pytorch)\n- [Pruning Convolutional Neural Networks for Resource Efficient Inference](https://github.com/jacobgil/pytorch-pruning)\n- [Pruning neural networks: is it time to nip it in the bud? (showing reduced networks work better)](https://github.com/BayesWatch/pytorch-prunes)\n\n## Facial, Action and Pose Recognition\n- [Facenet: Pretrained Pytorch face detection and recognition models](https://github.com/timesler/facenet-pytorch)\n- [DGC-Net: Dense Geometric Correspondence Network](https://github.com/AaltoVision/DGC-Net)\n- [High performance facial recognition library on PyTorch](https://github.com/ZhaoJ9014/face.evoLVe.PyTorch)\n- [FaceBoxes, a CPU real-time face detector with high accuracy](https://github.com/zisianw/FaceBoxes.PyTorch)\n- [How far are we from solving the 2D & 3D Face Alignment problem? (and a dataset of 230,000 3D facial landmarks)](https://github.com/1adrianb/face-alignment)\n- [Learning Spatio-Temporal Features with 3D Residual Networks for Action Recognition](https://github.com/kenshohara/3D-ResNets-PyTorch)\n- [PyTorch Realtime Multi-Person Pose Estimation](https://github.com/DavexPro/pytorch-pose-estimation)\n- [SphereFace: Deep Hypersphere Embedding for Face Recognition](https://github.com/clcarwin/sphereface_pytorch)\n- [GANimation: Anatomically-aware Facial Animation from a Single Image](https://github.com/albertpumarola/GANimation)\n- [Shufflenet V2 by Face++ with better results than paper](https://github.com/ericsun99/Shufflenet-v2-Pytorch)\n- [Towards 3D Human Pose Estimation in the Wild: a Weakly-supervised Approach](https://github.com/xingyizhou/pytorch-pose-hg-3d)\n- [Unsupervised Learning of Depth and Ego-Motion from Video](https://github.com/ClementPinard/SfmLearner-Pytorch)\n- [FlowNet 2.0: Evolution of Optical Flow Estimation with Deep Networks](https://github.com/NVIDIA/flownet2-pytorch)\n- [FlowNet: Learning Optical Flow with Convolutional Networks](https://github.com/ClementPinard/FlowNetPytorch)\n- [Optical Flow Estimation using a Spatial Pyramid Network](https://github.com/sniklaus/pytorch-spynet)\n- [OpenFace in PyTorch](https://github.com/thnkim/OpenFacePytorch)\n- [Deep Face Recognition in PyTorch](https://github.com/grib0ed0v/face_recognition.pytorch)\n\n## Super resolution\n- [Enhanced Deep Residual Networks for Single Image Super-Resolution](https://github.com/thstkdgus35/EDSR-PyTorch)\n- [Superresolution using an efficient sub-pixel convolutional neural network](https://github.com/pytorch/examples/tree/master/super_resolution)\n- [Perceptual Losses for Real-Time Style Transfer and Super-Resolution](https://github.com/bengxy/FastNeuralStyle)\n\n## Voice\n- [Google AI VoiceFilter: Targeted Voice Separatation by Speaker-Conditioned Spectrogram Masking](https://github.com/mindslab-ai/voicefilter)\n\n## Medical\n- [U-Net for FLAIR Abnormality Segmentation in Brain MRI](https://github.com/mateuszbuda/brain-segmentation-pytorch)\n- [Genomic Classification via ULMFiT](https://github.com/kheyer/Genomic-ULMFiT)\n- [Deep Neural Networks Improve Radiologists\' Performance in Breast Cancer Screening](https://github.com/nyukat/breast_cancer_classifier)\n- [Delira, lightweight framework for medical imaging prototyping](https://github.com/justusschock/delira)\n- [V-Net: Fully Convolutional Neural Networks for Volumetric Medical Image Segmentation](https://github.com/mattmacy/vnet.pytorch)\n- [Medical Torch, medical imaging framework for PyTorch](https://github.com/perone/medicaltorch)\n\n## 3D Segmentation, Classification and Regression\n- [Kaolin, Library for Accelerating 3D Deep Learning Research](https://github.com/NVIDIAGameWorks/kaolin)\n- [PointNet: Deep Learning on Point Sets for 3D Classification and Segmentation](https://github.com/fxia22/pointnet.pytorch)\n\n## Video Recognition\n- [Devil Is in the Edges: Learning Semantic Boundaries from Noisy Annotations](https://github.com/nv-tlabs/STEAL)\n- [Deep Video Analytics](https://github.com/AKSHAYUBHAT/DeepVideoAnalytics)\n\n## Recurrent Neural Networks (RNNs)\n- [Ordered Neurons: Integrating Tree Structures into Recurrent Neural Networks](https://github.com/yikangshen/Ordered-Neurons)\n- [Averaged Stochastic Gradient Descent with Weight Dropped LSTM](https://github.com/salesforce/awd-lstm-lm)\n- [Training RNNs as Fast as CNNs](https://github.com/taolei87/sru)\n- [Quasi-Recurrent Neural Network (QRNN)](https://github.com/salesforce/pytorch-qrnn)\n- [ReSeg: A Recurrent Neural Network-based Model for Semantic Segmentation](https://github.com/Wizaron/reseg-pytorch)\n- [A Recurrent Latent Variable Model for Sequential Data (VRNN)](https://github.com/emited/VariationalRecurrentNeuralNetwork)\n- [Improved Semantic Representations From Tree-Structured Long Short-Term Memory Networks](https://github.com/dasguptar/treelstm.pytorch)\n- [Attention-Based Recurrent Neural Network Models for Joint Intent Detection and Slot Filling](https://github.com/DSKSD/RNN-for-Joint-NLU)\n- [Attentive Recurrent Comparators](https://github.com/sanyam5/arc-pytorch)\n- [Collection of Sequence to Sequence Models with PyTorch](https://github.com/MaximumEntropy/Seq2Seq-PyTorch)\n\t1. Vanilla Sequence to Sequence models\n\t2. Attention based Sequence to Sequence models\n\t3. Faster attention mechanisms using dot products between the final encoder and decoder hidden states\n\n## Convolutional Neural Networks (CNNs)\n- [LegoNet: Efficient Convolutional Neural Networks with Lego Filters](https://github.com/huawei-noah/LegoNet)\n- [MeshCNN, a convolutional neural network designed specifically for triangular meshes](https://github.com/ranahanocka/MeshCNN)\n- [Octave Convolution](https://github.com/d-li14/octconv.pytorch)\n- [PyTorch Image Models, ResNet/ResNeXT, DPN, MobileNet-V3/V2/V1, MNASNet, Single-Path NAS, FBNet](https://github.com/rwightman/pytorch-image-models)\n- [Deep Neural Networks with Box Convolutions](https://github.com/shrubb/box-convolutions)\n- [Invertible Residual Networks](https://github.com/jarrelscy/iResnet)\n- [Stochastic Downsampling for Cost-Adjustable Inference and Improved Regularization in Convolutional Networks ](https://github.com/xternalz/SDPoint)\n- [Faster Faster R-CNN Implementation](https://github.com/jwyang/faster-rcnn.pytorch)\n\t- [Faster R-CNN Another Implementation](https://github.com/longcw/faster_rcnn_pytorch)\n- [Paying More Attention to Attention: Improving the Performance of Convolutional Neural Networks via Attention Transfer](https://github.com/szagoruyko/attention-transfer)\n- [Wide ResNet model in PyTorch](https://github.com/szagoruyko/functional-zoo)\n\t-[DiracNets: Training Very Deep Neural Networks Without Skip-Connections](https://github.com/szagoruyko/diracnets)\n- [An End-to-End Trainable Neural Network for Image-based Sequence Recognition and Its Application to Scene Text Recognition](https://github.com/bgshih/crnn)\n- [Efficient Densenet](https://github.com/gpleiss/efficient_densenet_pytorch)\n- [Video Frame Interpolation via Adaptive Separable Convolution](https://github.com/sniklaus/pytorch-sepconv)\n- [Learning local feature descriptors with triplets and shallow convolutional neural networks](https://github.com/edgarriba/examples/tree/master/triplet)\n- [Densely Connected Convolutional Networks](https://github.com/bamos/densenet.pytorch)\n- [Very Deep Convolutional Networks for Large-Scale Image Recognition](https://github.com/jcjohnson/pytorch-vgg)\n- [SqueezeNet: AlexNet-level accuracy with 50x fewer parameters and \\<0.5MB model size](https://github.com/gsp-27/pytorch_Squeezenet)\n- [Deep Residual Learning for Image Recognition](https://github.com/szagoruyko/functional-zoo)\n- [Training Wide ResNets for CIFAR-10 and CIFAR-100 in PyTorch](https://github.com/xternalz/WideResNet-pytorch)\n- [Deformable Convolutional Network](https://github.com/oeway/pytorch-deform-conv)\n- [Convolutional Neural Fabrics](https://github.com/vabh/convolutional-neural-fabrics)\n- [Deformable Convolutional Networks in PyTorch](https://github.com/1zb/deformable-convolution-pytorch)\n- [Dilated ResNet combination with Dilated Convolutions](https://github.com/fyu/drn)\n- [Striving for Simplicity: The All Convolutional Net](https://github.com/utkuozbulak/pytorch-cnn-visualizations)\n- [Convolutional LSTM Network](https://github.com/automan000/Convolution_LSTM_pytorch)\n- [Big collection of pretrained classification models](https://github.com/osmr/imgclsmob)\n- [PyTorch Image Classification with Kaggle Dogs vs Cats Dataset](https://github.com/rdcolema/pytorch-image-classification)\n- [CIFAR-10 on Pytorch with VGG, ResNet and DenseNet](https://github.com/kuangliu/pytorch-cifar)\n- [Base pretrained models and datasets in pytorch (MNIST, SVHN, CIFAR10, CIFAR100, STL10, AlexNet, VGG16, VGG19, ResNet, Inception, SqueezeNet)](https://github.com/aaron-xichen/pytorch-playground)\n\n## Segmentation\n- [Detectron2 by FAIR](https://github.com/facebookresearch/detectron2)\n- [Pixel-wise Segmentation on VOC2012 Dataset using PyTorch](https://github.com/bodokaiser/piwise)\n- [Pywick - High-level batteries-included neural network training library for Pytorch](https://github.com/achaiah/pywick)\n- [Improving Semantic Segmentation via Video Propagation and Label Relaxation](https://github.com/NVIDIA/semantic-segmentation)\n\n## Geometric Deep Learning: Graph & Irregular Structures\n- [PyTorch Geometric, Deep Learning Extension](https://github.com/rusty1s/pytorch_geometric)\n- [Self-Attention Graph Pooling](https://github.com/inyeoplee77/SAGPool)\n- [Position-aware Graph Neural Networks](https://github.com/JiaxuanYou/P-GNN)\n- [Signed Graph Convolutional Neural Network](https://github.com/benedekrozemberczki/SGCN)\n- [Graph U-Nets](https://github.com/HongyangGao/gunet)\n- [Cluster-GCN: An Efficient Algorithm for Training Deep and Large Graph Convolutional Networks](https://github.com/benedekrozemberczki/ClusterGCN)\n- [MixHop: Higher-Order Graph Convolutional Architectures via Sparsified Neighborhood Mixing](https://github.com/benedekrozemberczki/MixHop-and-N-GCN)\n- [Semi-Supervised Graph Classification: A Hierarchical Graph Perspective](https://github.com/benedekrozemberczki/SEAL-CI)\n- [PyTorch BigGraph by FAIR for Generating Embeddings From Large-scale Graph Data](https://github.com/facebookresearch/PyTorch-BigGraph)\n- [Capsule Graph Neural Network](https://github.com/benedekrozemberczki/CapsGNN)\n- [Splitter: Learning Node Representations that Capture Multiple Social Contexts](https://github.com/benedekrozemberczki/Splitter)\n- [A Higher-Order Graph Convolutional Layer](https://github.com/benedekrozemberczki/MixHop-and-N-GCN)\n- [Predict then Propagate: Graph Neural Networks meet Personalized PageRank](https://github.com/benedekrozemberczki/APPNP)\n- [Lorentz Embeddings: Learn Continuous Hierarchies in Hyperbolic Space](https://github.com/theSage21/lorentz-embeddings)\n- [Graph Wavelet Neural Network](https://github.com/benedekrozemberczki/GraphWaveletNeuralNetwork)\n- [Watch Your Step: Learning Node Embeddings via Graph Attention](https://github.com/benedekrozemberczki/AttentionWalk)\n- [Signed Graph Convolutional Network](https://github.com/benedekrozemberczki/SGCN)\n- [Graph Classification Using Structural Attention](https://github.com/benedekrozemberczki/GAM)\n- [SimGNN: A Neural Network Approach to Fast Graph Similarity Computation](https://github.com/benedekrozemberczki/SimGNN)\n- [SINE: Scalable Incomplete Network Embedding](https://github.com/benedekrozemberczki/SINE)\n- [HypER: Hypernetwork Knowledge Graph Embeddings](https://github.com/ibalazevic/HypER)\n- [TuckER: Tensor Factorization for Knowledge Graph Completion](https://github.com/ibalazevic/TuckER)\n\n## Sorting\n- [Stochastic Optimization of Sorting Networks via Continuous Relaxations](https://github.com/ermongroup/neuralsort)\n\n## Multi-task Learning\n- [Hierarchical Multi-Task Learning Model](https://github.com/huggingface/hmtl)\n- [Task-based End-to-end Model Learning](https://github.com/locuslab/e2e-model-learning)\n\n## GANs, VAEs, and AEs\n- [StarGAN](https://github.com/yunjey/stargan)\n- [Block Neural Autoregressive Flow](https://github.com/nicola-decao/BNAF)\n- [High-Resolution Image Synthesis and Semantic Manipulation with Conditional GANs](https://github.com/NVIDIA/pix2pixHD)\n- [A Style-Based Generator Architecture for Generative Adversarial Networks](https://github.com/rosinality/style-based-gan-pytorch)\n- [GANDissect, PyTorch Tool for Visualizing Neurons in GANs](https://github.com/CSAILVision/gandissect)\n- [Learning deep representations by mutual information estimation and maximization](https://github.com/DuaneNielsen/DeepInfomaxPytorch)\n- [Variational Laplace Autoencoders](https://github.com/yookoon/VLAE)\n- [VeGANS, library for easily training GANs](https://github.com/unit8co/vegans)\n- [Progressive Growing of GANs for Improved Quality, Stability, and Variation](https://github.com/github-pengge/PyTorch-progressive_growing_of_gans)\n- [Conditional GAN](https://github.com/kmualim/CGAN-Pytorch/)\n- [Wasserstein GAN](https://github.com/martinarjovsky/WassersteinGAN)\n- [Adversarial Generator-Encoder Network](https://github.com/DmitryUlyanov/AGE)\n- [Image-to-Image Translation with Conditional Adversarial Networks](https://github.com/junyanz/pytorch-CycleGAN-and-pix2pix)\n- [Unpaired Image-to-Image Translation using Cycle-Consistent Adversarial Networks](https://github.com/junyanz/pytorch-CycleGAN-and-pix2pix)\n- [On the Effects of Batch and Weight Normalization in Generative Adversarial Networks](https://github.com/stormraiser/GAN-weight-norm)\n- [Improved Training of Wasserstein GANs](https://github.com/jalola/improved-wgan-pytorch)\n- [Collection of Generative Models with PyTorch](https://github.com/wiseodd/generative-models)\n\t- Generative Adversarial Nets (GAN)\n\t\t1. [Vanilla GAN](https://arxiv.org/abs/1406.2661)\n\t\t2. [Conditional GAN](https://arxiv.org/abs/1411.1784)\n\t\t3. [InfoGAN](https://arxiv.org/abs/1606.03657)\n\t\t4. [Wasserstein GAN](https://arxiv.org/abs/1701.07875)\n\t\t5. [Mode Regularized GAN](https://arxiv.org/abs/1612.02136)\n\t- Variational Autoencoder (VAE)\n\t\t1. [Vanilla VAE](https://arxiv.org/abs/1312.6114)\n\t\t2. [Conditional VAE](https://arxiv.org/abs/1406.5298)\n\t\t3. [Denoising VAE](https://arxiv.org/abs/1511.06406)\n\t\t4. [Adversarial Autoencoder](https://arxiv.org/abs/1511.05644)\n\t\t5. [Adversarial Variational Bayes](https://arxiv.org/abs/1701.04722)\n- [Improved Training of Wasserstein GANs](https://github.com/caogang/wgan-gp)\n- [CycleGAN and Semi-Supervised GAN](https://github.com/yunjey/mnist-svhn-transfer)\n- [Improving Variational Auto-Encoders using Householder Flow and using convex combination linear Inverse Autoregressive Flow](https://github.com/jmtomczak/vae_vpflows)\n- [PyTorch GAN Collection](https://github.com/znxlwm/pytorch-generative-model-collections)\n- [Generative Adversarial Networks, focusing on anime face drawing](https://github.com/jayleicn/animeGAN)\n- [Simple Generative Adversarial Networks](https://github.com/mailmahee/pytorch-generative-adversarial-networks)\n- [Adversarial Auto-encoders](https://github.com/fducau/AAE_pytorch)\n- [torchgan: Framework for modelling Generative Adversarial Networks in Pytorch](https://github.com/torchgan/torchgan)\n\n## Unsupervised Learning \n- [AND: Anchor Neighbourhood Discovery](https://github.com/Raymond-sci/AND)\n\n## Adversarial Attacks\n- [Deep Neural Networks are Easily Fooled: High Confidence Predictions for Unrecognizable Images](https://github.com/utkuozbulak/pytorch-cnn-adversarial-attacks)\n- [Explaining and Harnessing Adversarial Examples](https://github.com/utkuozbulak/pytorch-cnn-adversarial-attacks)\n- [AdverTorch - A Toolbox for Adversarial Robustness Research](https://github.com/BorealisAI/advertorch)\n\n## Style Transfer\n- [Detecting Adversarial Examples via Neural Fingerprinting](https://github.com/StephanZheng/neural-fingerprinting)\n- [A Neural Algorithm of Artistic Style](https://github.com/alexis-jacq/Pytorch-Tutorials)\n- [Multi-style Generative Network for Real-time Transfer](https://github.com/zhanghang1989/PyTorch-Style-Transfer)\n- [DeOldify, Coloring Old Images](https://github.com/jantic/DeOldify)\n- [Neural Style Transfer](https://github.com/ProGamerGov/neural-style-pt)\n- [Fast Neural Style Transfer](https://github.com/darkstar112358/fast-neural-style)\n- [Draw like Bob Ross](https://github.com/kendricktan/drawlikebobross)\n\n## Image Captioning\n- [Neuraltalk 2, Image Captioning Model, in PyTorch](https://github.com/ruotianluo/neuraltalk2.pytorch)\n- [Generate captions from an image with PyTorch](https://github.com/eladhoffer/captionGen)\n\n## Transformers\n- [Attention is all you need](https://github.com/jadore801120/attention-is-all-you-need-pytorch)\n- [Spatial Transformer Networks](https://github.com/fxia22/stn.pytorch)\n\n## Similarity Networks and Functions\n- [Conditional Similarity Networks](https://github.com/andreasveit/conditional-similarity-networks)\n\n## Reasoning\n- [Inferring and Executing Programs for Visual Reasoning](https://github.com/facebookresearch/clevr-iep)\n\n## General NLP\n- [Espresso, Module Neural Automatic Speech Recognition Toolkit](https://github.com/freewym/espresso)\n- [Label-aware Document Representation via Hybrid Attention for Extreme Multi-Label Text Classification](https://github.com/HX-idiot/Hybrid_Attention_XML)\n- [XLNet](https://github.com/graykode/xlnet-Pytorch)\n- [Conversing by Reading: Contentful Neural Conversation with On-demand Machine Reading](https://github.com/qkaren/converse_reading_cmr)\n- [Cross-lingual Language Model Pretraining](https://github.com/facebookresearch/XLM)\n- [Libre Office Translate via PyTorch NMT](https://github.com/lernapparat/lotranslate)\n- [BERT](https://github.com/huggingface/pytorch-pretrained-BERT)\n- [VSE++: Improved Visual-Semantic Embeddings](https://github.com/fartashf/vsepp)\n- [A Structured Self-Attentive Sentence Embedding](https://github.com/ExplorerFreda/Structured-Self-Attentive-Sentence-Embedding)\n- [Neural Sequence labeling model](https://github.com/jiesutd/PyTorchSeqLabel)\n- [Skip-Thought Vectors](https://github.com/sanyam5/skip-thoughts)\n- [Complete Suite for Training Seq2Seq Models in PyTorch](https://github.com/eladhoffer/seq2seq.pytorch)\n- [MUSE: Multilingual Unsupervised and Supervised Embeddings](https://github.com/facebookresearch/MUSE)\n\n## Question and Answering\n- [Visual Question Answering in Pytorch](https://github.com/Cadene/vqa.pytorch)\n- [Reading Wikipedia to Answer Open-Domain Questions](https://github.com/facebookresearch/DrQA)\n- [Deal or No Deal? End-to-End Learning for Negotiation Dialogues](https://github.com/facebookresearch/end-to-end-negotiator)\n- [Interpretable Counting for Visual Question Answering](https://github.com/sanyam5/irlc-vqa)\n- [Open Source Chatbot with PyTorch](https://github.com/jinfagang/pytorch_chatbot)\n\n## Speech Generation and Recognition\n- [PyTorch-Kaldi Speech Recognition Toolkit](https://github.com/mravanelli/pytorch-kaldi)\n- [WaveGlow: A Flow-based Generative Network for Speech Synthesis](https://github.com/NVIDIA/waveglow)\n- [OpenNMT](https://github.com/OpenNMT/OpenNMT-py)\n- [Deep Speech 2: End-to-End Speech Recognition in English and Mandarin](https://github.com/SeanNaren/deepspeech.pytorch)\n\n## Document and Text Classification\n- [Hierarchical Attention Network for Document Classification](https://github.com/cedias/HAN-pytorch)\n- [Hierarchical Attention Networks for Document Classification](https://github.com/EdGENetworks/attention-networks-for-classification)\n- [CNN Based Text Classification](https://github.com/xiayandi/Pytorch_text_classification)\n\n## Text Generation\n- [Pytorch Poetry Generation](https://github.com/jhave/pytorch-poetry-generation)\n\n## Translation\n- [Open-source (MIT) Neural Machine Translation (NMT) System](https://github.com/OpenNMT/OpenNMT-py)\n\n## Sentiment Analysis\n- [Recurrent Neural Networks for Sentiment Analysis (Aspect-Based) on SemEval 2014](https://github.com/vanzytay/pytorch_sentiment_rnn)\n- [Seq2Seq Intent Parsing](https://github.com/spro/pytorch-seq2seq-intent-parsing)\n\n## Deep Reinforcement Learning\n- [Temporal Difference VAE](https://openreview.net/pdf?id=S1x4ghC9tQ)\n- [High-performance Atari A3C Agent in 180 Lines PyTorch](https://github.com/greydanus/baby-a3c)\n- [Learning when to communicate at scale in multiagent cooperative and competitive tasks](https://github.com/IC3Net/IC3Net)\n- [Actor-Attention-Critic for Multi-Agent Reinforcement Learning](https://github.com/shariqiqbal2810/MAAC)\n- [PPO in PyTorch C++](https://github.com/mhubii/ppo_pytorch_cpp)\n- [Reinforcement Learning for Bandit Neural Machine Translation with Simulated Human Feedback](https://github.com/khanhptnk/bandit-nmt)\n- [Asynchronous Methods for Deep Reinforcement Learning](https://github.com/ikostrikov/pytorch-a3c)\n- [Continuous Deep Q-Learning with Model-based Acceleration](https://github.com/ikostrikov/pytorch-naf)\n- [Asynchronous Methods for Deep Reinforcement Learning for Atari 2600](https://github.com/dgriff777/rl_a3c_pytorch)\n- [Trust Region Policy Optimization](https://github.com/mjacar/pytorch-trpo)\n- [Neural Combinatorial Optimization with Reinforcement Learning](https://github.com/pemami4911/neural-combinatorial-rl-pytorch)\n- [Noisy Networks for Exploration](https://github.com/Kaixhin/NoisyNet-A3C)\n- [Distributed Proximal Policy Optimization](https://github.com/alexis-jacq/Pytorch-DPPO)\n- [Reinforcement learning models in ViZDoom environment with PyTorch](https://github.com/akolishchak/doom-net-pytorch)\n- [Reinforcement learning models using Gym and Pytorch](https://github.com/jingweiz/pytorch-rl)\n- [SLM-Lab: Modular Deep Reinforcement Learning framework in PyTorch](https://github.com/kengz/SLM-Lab)\n\n## Deep Bayesian Learning and Probabilistic Programmming\n- [BatchBALD: Efficient and Diverse Batch Acquisition for Deep Bayesian Active Learning](https://github.com/BlackHC/BatchBALD)\n- [Subspace Inference for Bayesian Deep Learning](https://github.com/wjmaddox/drbayes)\n- [Bayesian Deep Learning with Variational Inference Package](https://github.com/ctallec/pyvarinf)\n- [Probabilistic Programming and Statistical Inference in PyTorch](https://github.com/stepelu/ptstat)\n- [Bayesian CNN with Variational Inferece in PyTorch](https://github.com/kumar-shridhar/PyTorch-BayesianCNN)\n\n## Anomaly Detection\n- [Detection of Accounting Anomalies using Deep Autoencoder Neural Networks](https://github.com/GitiHubi/deepAI)\n\n## Regression Types\n- [Quantile Regression DQN](https://github.com/ars-ashuha/quantile-regression-dqn-pytorch)\n\n## Time Series\n- [DILATE: DIstortion Loss with shApe and tImE](https://github.com/vincent-leguen/DILATE)\n- [Variational Recurrent Autoencoder for Timeseries Clustering](https://github.com/tejaslodaya/timeseries-clustering-vae)\n- [Spatio-Temporal Neural Networks for Space-Time Series Modeling and Relations Discovery](https://github.com/edouardelasalles/stnn)\n\n## Neural Network General Improvements\n- [In-Place Activated BatchNorm for Memory-Optimized Training of DNNs](https://github.com/mapillary/inplace_abn)\n- [Train longer, generalize better: closing the generalization gap in large batch training of neural networks](https://github.com/eladhoffer/bigBatch)\n- [FreezeOut: Accelerate Training by Progressively Freezing Layers](https://github.com/ajbrock/FreezeOut)\n- [Binary Stochastic Neurons](https://github.com/Wizaron/binary-stochastic-neurons)\n- [Compact Bilinear Pooling](https://github.com/DeepInsight-PCALab/CompactBilinearPooling-Pytorch)\n- [Mixed Precision Training in PyTorch](https://github.com/suvojit-0x55aa/mixed-precision-pytorch)\n\n## DNN Applications in Chemistry and Physics\n- [Wave Physics as an Analog Recurrent Neural Network](https://github.com/fancompute/wavetorch)\n- [Neural Message Passing for Quantum Chemistry](https://github.com/priba/nmp_qc)\n- [Automatic chemical design using a data-driven continuous representation of molecules](https://github.com/cxhernandez/molencoder)\n- [Deep Learning for Physical Processes: Integrating Prior Scientific Knowledge](https://github.com/emited/flow)\n\n## New Thinking on General Neural Network Architecture\n- [Decoupled Neural Interfaces using Synthetic Gradients](https://github.com/andrewliao11/dni.pytorch)\n\n## Linear Algebra\n- [Eigenvectors from Eigenvalues](https://github.com/ritchieng/eigenvectors-from-eigenvalues)\n\n## To be Classified\n- [Perturbative Neural Networks](https://github.com/michaelklachko/pnn.pytorch)\n- [Accurate Neural Network Potential](https://github.com/aiqm/torchani)\n- [Scaling the Scattering Transform: Deep Hybrid Networks](https://github.com/edouardoyallon/pyscatwave)\n- [CortexNet: a Generic Network Family for Robust Visual Temporal Representations](https://github.com/e-lab/pytorch-CortexNet)\n- [Oriented Response Networks](https://github.com/ZhouYanzhao/ORN)\n- [Associative Compression Networks](https://github.com/jalexvig/associative_compression_networks)\n- [Clarinet](https://github.com/ksw0306/ClariNet)\n- [Continuous Wavelet Transforms](https://github.com/tomrunia/PyTorchWavelets)\n- [mixup: Beyond Empirical Risk Minimization](https://github.com/leehomyc/mixup_pytorch)\n- [Network In Network](https://github.com/szagoruyko/functional-zoo)\n- [Highway Networks](https://github.com/c0nn3r/pytorch_highway_networks)\n- [Hybrid computing using a neural network with dynamic external memory](https://github.com/ypxie/pytorch-NeuCom)\n- [Value Iteration Networks](https://github.com/onlytailei/PyTorch-value-iteration-networks)\n- [Differentiable Neural Computer](https://github.com/jingweiz/pytorch-dnc)\n- [A Neural Representation of Sketch Drawings](https://github.com/alexis-jacq/Pytorch-Sketch-RNN)\n- [Understanding Deep Image Representations by Inverting Them](https://github.com/utkuozbulak/pytorch-cnn-visualizations)\n- [NIMA: Neural Image Assessment](https://github.com/truskovskiyk/nima.pytorch)\n- [NASNet-A-Mobile. Ported weights](https://github.com/veronikayurchuk/pretrained-models.pytorch)\n- [Graphics code generating model using Processing](https://github.com/jtoy/sketchnet)\n\n## Low Level Utilities\n- [TorchSharp, .NET API with access to underlying library powering PyTorch](https://github.com/interesaaat/TorchSharp)\n\n## PyTorch Utilities\n- [Differentiable Convex Layers](https://github.com/cvxgrp/cvxpylayers)\n- [Albumentations: Fast Image Augmentation Library](https://github.com/albu/albumentations)\n- [Higher, obtain higher order gradients over losses spanning training loops](https://github.com/facebookresearch/higher)\n- [Neural Pipeline, Training Pipeline for PyTorch](https://github.com/toodef/neural-pipeline)\n- [Layer-by-layer PyTorch Model Profiler for Checking Model Time Consumption](https://github.com/awwong1/torchprof)\n- [Sparse Distributions](https://github.com/probabll/sparse-distributions)\n- [Diffdist, Adds Support for Differentiable Communication allowing distributed model parallelism](https://github.com/ag14774/diffdist)\n- [HessianFlow, Library for Hessian Based Algorithms](https://github.com/amirgholami/HessianFlow)\n- [Texar, PyTorch Toolkit for Text Generation](https://github.com/asyml/texar-pytorch)\n- [PyTorch FLOPs counter](https://github.com/Lyken17/pytorch-OpCounter)\n- [PyTorch Inference on C++ in Windows](https://github.com/zccyman/pytorch-inference)\n- [EuclidesDB, Multi-Model Machine Learning Feature Database](https://github.com/perone/euclidesdb)\n- [Data Augmentation and Sampling for Pytorch](https://github.com/ncullen93/torchsample)\n- [PyText, deep learning based NLP modelling framework officially maintained by FAIR](https://github.com/facebookresearch/pytext)\n- [Torchstat for Statistics on PyTorch Models](https://github.com/Swall0w/torchstat)\n- [Load Audio files directly into PyTorch Tensors](https://github.com/pytorch/audio)\n- [Weight Initializations](https://github.com/pytorch/pytorch/blob/master/torch/nn/init.py)\n- [Spatial transformer implemented in PyTorch](https://github.com/fxia22/stn.pytorch)\n- [PyTorch AWS AMI, run PyTorch with GPU support in less than 5 minutes](https://github.com/ritchieng/dlami)\n- [Use tensorboard with PyTorch](https://github.com/lanpa/tensorboard-pytorch)\n- [Simple Fit Module in PyTorch, similar to Keras](https://github.com/henryre/pytorch-fitmodule)\n- [torchbearer: A model fitting library for PyTorch](https://github.com/ecs-vlc/torchbearer)\n- [PyTorch to Keras model converter](https://github.com/nerox8664/pytorch2keras)\n- [Gluon to PyTorch model converter with code generation](https://github.com/nerox8664/gluon2pytorch)\n- [Catalyst: High-level utils for PyTorch DL & RL research](https://github.com/catalyst-team/catalyst)\n\n## PyTorch Video Tutorials\n- [Practical Deep Learning with PyTorch](https://www.udemy.com/practical-deep-learning-with-pytorch/?couponCode=DEEPWIZARD)\n- [PyTorch Zero to All Lectures](http://bit.ly/PyTorchVideo)\n\n## Datasets\n- [Worldbank Data](https://github.com/mwouts/world_bank_data)\n\n## Community\n- [PyTorch Discussion Forum](https://discuss.pytorch.org/)\n- [StackOverflow PyTorch Tags](http://stackoverflow.com/questions/tagged/pytorch)\n\n## Links to This Repository\n- [Github Repository](https://github.com/ritchieng/the-incredible-pytorch)\n- [Website](https://www.ritchieng.com/the-incredible-pytorch/)\n\n## Contributions\nDo feel free to contribute!\n\nYou can raise an issue or submit a pull request, whichever is more convenient for you. The guideline is simple: just follow the format of the previous bullet point.\n'