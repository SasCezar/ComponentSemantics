b'![Graph Nets DeepMind shortest path](images/graph-nets-deepmind-shortest-path0.gif)\n\n# Graph Nets library\n\n[Graph Nets](https://github.com/deepmind/graph_nets) is DeepMind\'s library for\nbuilding graph networks in Tensorflow and Sonnet.\n\nContact graph-nets@google.com for comments and questions.\n\n#### What are graph networks?\n\nA graph network takes a graph as input and returns a graph as output. The input\ngraph has edge- (*E* ), node- (*V* ), and global-level (**u**) attributes. The\noutput graph has the same structure, but updated attributes. Graph networks are\npart of the broader family of "graph neural networks" (Scarselli et al., 2009).\n\nTo learn more about graph networks, see our arXiv paper: [Relational inductive\nbiases, deep learning, and graph networks](https://arxiv.org/abs/1806.01261).\n\n![Graph network](images/graph-network.png)\n\n## Installation\n\nThe Graph Nets library can be installed from pip.\n\nThis installation is compatible with Linux/Mac OS X, and Python 2.7 and 3.4+.\n\nThe library will work with both the CPU and GPU version of TensorFlow, but to\nallow for that it does not list Tensorflow as a requirement, so you need to\ninstall Tensorflow separately if you haven\'t already done so.\n\nTo install the Graph Nets library for CPU, run:\n\n```shell\n$ pip install graph_nets "tensorflow>=1.15,<2" tensorflow_probability\n```\n\nTo install the Graph Nets library for GPU, run:\n\n```shell\n$ pip install graph_nets "tensorflow_gpu>=1.15,<2" tensorflow_probability\n```\n\nThe latest version of the library is compatible with TensorFlow 1 (version 1.15\nand above). For compatibility with earlier versions of TensorFlow, please\ninstall v1.0.4 of the GraphNets library.\n\n## Usage example\n\nThe following code constructs a simple graph net module and connects it to data.\n\n```python\nimport graph_nets as gn\nimport sonnet as snt\n\n# Provide your own functions to generate graph-structured data.\ninput_graphs = get_graphs()\n\n# Create the graph network.\ngraph_net_module = gn.modules.GraphNetwork(\n    edge_model_fn=lambda: snt.nets.MLP([32, 32]),\n    node_model_fn=lambda: snt.nets.MLP([32, 32]),\n    global_model_fn=lambda: snt.nets.MLP([32, 32]))\n\n# Pass the input graphs to the graph network, and return the output graphs.\noutput_graphs = graph_net_module(input_graphs)\n```\n\n## Demo Jupyter notebooks\n\nThe library includes demos which show how to create, manipulate, and\ntrain graph networks to reason about graph-structured data, on a\nshortest path-finding task, a sorting task, and a physical prediction task.\nEach demo uses the same graph network architecture, which highlights the\nflexibility of the approach.\n\n### Try the demos in your browser in [Colaboratory](https://colab.research.google.com)\n\nTo try out the demos without installing anything locally, you can run the demos\nin your browser (even on your phone) via a cloud Colaboratory backend. Click a\ndemo link below, and follow the instructions in the notebook.\n\n----------------\n\n#### [Run "shortest path demo" in browser](https://colab.research.google.com/github/deepmind/graph_nets/blob/master/graph_nets/demos/shortest_path.ipynb)\n\nThe "shortest path demo" creates random graphs, and trains a graph network to\nlabel the nodes and edges on the shortest path between any two nodes. Over a\nsequence of message-passing steps (as depicted by each step\'s plot), the\nmodel refines its prediction of the shortest path.\n\n![Shortest path](images/shortest-path.png)\n\n----------------\n\n#### [Run "sort demo" in browser](https://colab.research.google.com/github/deepmind/graph_nets/blob/master/graph_nets/demos/sort.ipynb)\n\nThe "sort demo" creates lists of random numbers, and trains a graph network to\nsort the list. After a sequence of message-passing steps, the model makes an\naccurate prediction of which elements (columns in the figure) come next after\neach other (rows).\n\n![Sort](images/sort.png)\n\n----------------\n\n#### [Run "physics demo" in browser](https://colab.research.google.com/github/deepmind/graph_nets/blob/master/graph_nets/demos/physics.ipynb)\n\nThe "physics demo" creates random mass-spring physical systems, and trains a\ngraph network to predict the state of the system on the next timestep. The\nmodel\'s next-step predictions can be fed back in as input to create a rollout of\na future trajectory. Each subplot below shows the true and predicted mass-spring\nsystem states over 50 steps. This is similar to the model and experiments in\nBattaglia et al. (2016)\'s "interaction networks".\n\n![Physics](images/physics.png)\n\n----------------\n\n#### [Run "graph nets basics demo" in browser](https://colab.research.google.com/github/deepmind/graph_nets/blob/master/graph_nets/demos/graph_nets_basics.ipynb)\n\nThe "graph nets basics demo" is a tutorial containing step by step examples\nabout how to create and manipulate graphs, how to feed them into\ngraph networks and how to build custom graph network modules.\n\n----------------\n\n### Run the demos on your local machine\n\nTo install the necessary dependencies, run:\n\n```shell\n$ pip install jupyter matplotlib scipy\n```\n\nTo try the demos, run:\n\n```shell\n$ cd <path-to-graph-nets-library>/demos\n$ jupyter notebook\n```\nthen open a demo through the Jupyter notebook interface.\n\n\n## Other graph neural network libraries\n\nIf you use PyTorch, check out these high-quality open-source libraries for\ngraph neural networks:\n\n* [pytorch_geometric](https://github.com/rusty1s/pytorch_geometric): See\n[MetaLayer](https://rusty1s.github.io/pytorch_geometric/build/html/modules/nn.html#torch_geometric.nn.meta.MetaLayer)\nfor an analog of our Graph Nets interface.\n\n* [Deep Graph Library (DGL)](https://github.com/dmlc/dgl)\n'