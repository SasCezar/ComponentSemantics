b'[![License Apache 2.0](https://img.shields.io/badge/license-Apache%202.0-blue.svg)](https://github.com/deepmipt/DeepPavlov/blob/master/LICENSE)\n![Python 3.6, 3.7](https://img.shields.io/badge/python-3.6%20%7C%203.7-green.svg)\n[![Downloads](https://pepy.tech/badge/deeppavlov)](https://pepy.tech/project/deeppavlov)\n<img align="right" height="27%" width="27%" src="docs/_static/ipavlov_logo.png"/>\n\nDeepPavlov is an open-source conversational AI library built on [TensorFlow](https://www.tensorflow.org/) and [Keras](https://keras.io/).\n\nDeepPavlov is designed for\n* development of production ready chat-bots and complex conversational systems,\n* research in the area of NLP and, particularly, of dialog systems.\n\n## Quick Links\n\n* Demo [*demo.deeppavlov.ai*](https://demo.deeppavlov.ai/)\n* Documentation [*docs.deeppavlov.ai*](http://docs.deeppavlov.ai/)\n    * Model List [*docs:features/*](http://docs.deeppavlov.ai/en/master/features/overview.html)\n    * Contribution Guide [*docs:contribution_guide/*](http://docs.deeppavlov.ai/en/master/devguides/contribution_guide.html)\n* Issues [*github/issues/*](https://github.com/deepmipt/DeepPavlov/issues)\n* Forum [*forum.deeppavlov.ai*](https://forum.deeppavlov.ai/)\n* Blogs [*medium.com/deeppavlov*](https://medium.com/deeppavlov)\n* Tutorials [*examples/*](https://github.com/deepmipt/DeepPavlov/tree/master/examples) and [extended colab tutorials](https://github.com/deepmipt/dp_tutorials)\n* Docker Hub [*hub.docker.com/u/deeppavlov/*](https://hub.docker.com/u/deeppavlov/) \n    * Docker Images Documentation [*docs:docker-images/*](http://docs.deeppavlov.ai/en/master/intro/installation.html#docker-images)\n\nPlease leave us [your feedback](https://forms.gle/i64fowQmiVhMMC7f9) on how we can improve the DeepPavlov framework.\n\n**Models**\n\n[Named Entity Recognition](http://docs.deeppavlov.ai/en/master/features/models/ner.html) | [Slot filling](http://docs.deeppavlov.ai/en/master/features/models/slot_filling.html)\n\n[Intent/Sentence Classification](http://docs.deeppavlov.ai/en/master/features/models/classifiers.html) |  [Question Answering over Text (SQuAD)](http://docs.deeppavlov.ai/en/master/features/models/squad.html) \n\n[Sentence Similarity/Ranking](http://docs.deeppavlov.ai/en/master/features/models/neural_ranking.html) | [TF-IDF Ranking](http://docs.deeppavlov.ai/en/master/features/models/tfidf_ranking.html) \n\n[Morphological tagging](http://docs.deeppavlov.ai/en/master/features/models/morphotagger.html) | [Automatic Spelling Correction](http://docs.deeppavlov.ai/en/master/features/models/spelling_correction.html)\n\n[ELMo training and fine-tuning](http://docs.deeppavlov.ai/en/master/apiref/models/elmo.html)\n\n**Skills**\n\n[Goal(Task)-oriented Bot](http://docs.deeppavlov.ai/en/master/features/skills/go_bot.html) | [Seq2seq Goal-Oriented bot](http://docs.deeppavlov.ai/en/master/features/skills/seq2seq_go_bot.html)\n\n[Open Domain Questions Answering](http://docs.deeppavlov.ai/en/master/features/skills/odqa.html) | [eCommerce Bot](http://docs.deeppavlov.ai/en/master/features/skills/ecommerce.html) \n\n[Frequently Asked Questions Answering](http://docs.deeppavlov.ai/en/master/features/skills/faq.html) | [Pattern Matching](http://docs.deeppavlov.ai/en/master/features/skills/pattern_matching.html) \n\n**Embeddings**\n\n[BERT embeddings for the Russian, Polish, Bulgarian, Czech, and informal English](http://docs.deeppavlov.ai/en/master/features/pretrained_vectors.html#bert)\n\n[ELMo embeddings for the Russian language](http://docs.deeppavlov.ai/en/master/features/pretrained_vectors.html#elmo)\n\n[FastText embeddings for the Russian language](http://docs.deeppavlov.ai/en/master/features/pretrained_vectors.html#fasttext)\n\n**Auto ML**\n\n[Tuning Models with Evolutionary Algorithm](http://docs.deeppavlov.ai/en/master/features/hypersearch.html)\n\n**Integrations**\n\n[REST API](http://docs.deeppavlov.ai/en/master/integrations/rest_api.html) | [Socket API](http://docs.deeppavlov.ai/en/master/integrations/socket_api.html) | [Yandex Alice](http://docs.deeppavlov.ai/en/master/integrations/yandex_alice.html)\n\n[Telegram](http://docs.deeppavlov.ai/en/master/integrations/telegram.html) | [Microsoft Bot Framework](http://docs.deeppavlov.ai/en/master/integrations/ms_bot.html)\n\n[Amazon Alexa](http://docs.deeppavlov.ai/en/master/integrations/amazon_alexa.html) | [Amazon AWS](http://docs.deeppavlov.ai/en/master/integrations/aws_ec2.html)\n\n## Installation\n\n0. We support `Linux` and `Windows` platforms, `Python 3.6` and `Python 3.7`\n    * **`Python 3.5` is not supported!**\n    * **installation for `Windows` requires `Git`(for example, [git](https://git-scm.com/download/win)) and  `Visual Studio 2015/2017` with `C++` build tools installed!**\n\n1. Create and activate a virtual environment:\n    * `Linux`\n    ```\n    python -m venv env\n    source ./env/bin/activate\n    ```\n    * `Windows`\n    ```\n    python -m venv env\n    .\\env\\Scripts\\activate.bat\n    ```\n2. Install the package inside the environment:\n    ```\n    pip install deeppavlov\n    ```\n\n## QuickStart\n\nThere is a bunch of great pre-trained NLP models in DeepPavlov. Each model is\ndetermined by its config file.\n\nList of models is available on\n[the doc page](http://docs.deeppavlov.ai/en/master/features/overview.html) in\nthe `deeppavlov.configs` (Python):\n\n```python\nfrom deeppavlov import configs\n```\n\nWhen you\'re decided on the model (+ config file), there are two ways to train,\nevaluate and infer it:\n\n* via [Command line interface (CLI)](#command-line-interface-cli) and\n* via [Python](#python).\n\nBefore making choice of an interface, install model\'s package requirements\n(CLI):\n\n```bash\npython -m deeppavlov install <config_path>\n```\n\n* where `<config_path>` is path to the chosen model\'s config file (e.g.\n  `deeppavlov/configs/ner/slotfill_dstc2.json`) or just name without\n  *.json* extension (e.g. `slotfill_dstc2`)\n\n\n### Command line interface (CLI)\n\nTo get predictions from a model interactively through CLI, run\n\n```bash\npython -m deeppavlov interact <config_path> [-d]\n```\n\n* `-d` downloads required data -- pretrained model files and embeddings\n  (optional).\n\nYou can train it in the same simple way:\n\n```bash\npython -m deeppavlov train <config_path> [-d]\n```\n\nDataset will be downloaded regardless of whether there was `-d` flag or not.\n\nTo train on your own data you need to modify dataset reader path in the\n[train config doc](http://docs.deeppavlov.ai/en/master/intro/config_description.html#train-config).\nThe data format is specified in the corresponding model doc page. \n\nThere are even more actions you can perform with configs:\n\n```bash\npython -m deeppavlov <action> <config_path> [-d]\n```\n\n* `<action>` can be\n    * `download` to download model\'s data (same as `-d`),\n    * `train` to train the model on the data specified in the config file,\n    * `evaluate` to calculate metrics on the same dataset,\n    * `interact` to interact via CLI,\n    * `riseapi` to run a REST API server (see\n    [doc](http://docs.deeppavlov.ai/en/master/integrations/rest_api.html)),\n    * `interactbot` to run as a Telegram bot (see\n    [doc](http://docs.deeppavlov.ai/en/master/integrations/telegram.html)),\n    * `interactmsbot` to run a Miscrosoft Bot Framework server (see\n    [doc](http://docs.deeppavlov.ai/en/master/integrations/ms_bot.html)),\n    * `predict` to get prediction for samples from *stdin* or from\n      *<file_path>* if `-f <file_path>` is specified.\n* `<config_path>` specifies path (or name) of model\'s config file\n* `-d` downloads required data\n\n\n### Python\n\nTo get predictions from a model interactively through Python, run\n\n```python\nfrom deeppavlov import build_model\n\nmodel = build_model(<config_path>, download=True)\n\n# get predictions for \'input_text1\', \'input_text2\'\nmodel([\'input_text1\', \'input_text2\'])\n```\n\n* where `download=True` downloads required data from web -- pretrained model\n  files and embeddings (optional),\n* `<config_path>` is path to the chosen model\'s config file (e.g.\n  `"deeppavlov/configs/ner/ner_ontonotes_bert_mult.json"`) or\n  `deeppavlov.configs` attribute (e.g.\n  `deeppavlov.configs.ner.ner_ontonotes_bert_mult` without quotation marks).\n\nYou can train it in the same simple way:\n\n```python\nfrom deeppavlov import train_model \n\nmodel = train_model(<config_path>, download=True)\n```\n\n* `download=True` downloads pretrained model, therefore the pretrained\nmodel will be, first, loaded and then train (optional).\n\nDataset will be downloaded regardless of whether there was ``-d`` flag or\nnot.\n\nTo train on your own data you need to modify dataset reader path in the\n[train config doc](http://docs.deeppavlov.ai/en/master/intro/config_description.html#train-config).\nThe data format is specified in the corresponding model doc page. \n\nYou can also calculate metrics on the dataset specified in your config file:\n\n```python\nfrom deeppavlov import evaluate_model \n\nmodel = evaluate_model(<config_path>, download=True)\n```\n\nThere are also available integrations with various messengers, see\n[Telegram Bot doc page](http://docs.deeppavlov.ai/en/master/integrations/telegram.html)\nand others in the Integrations section for more info.\n\n\n## Breaking Changes\n\n**Breaking changes in version 0.6.0**\n- [REST API](http://docs.deeppavlov.ai/en/0.6.0/integrations/rest_api.html):\n  - all models default endpoints were renamed to `/model`\n  - by default model arguments names are taken from `chainer.in`\n    [configuration parameter](http://docs.deeppavlov.ai/en/0.6.0/intro/configuration.html) instead of pre-set names\n    from a [settings file](http://docs.deeppavlov.ai/en/0.6.0/integrations/settings.html)\n  - swagger api endpoint moved from `/apidocs` to `/docs`\n- when using `"max_proba": true` in\n  a [`proba2labels` component](http://docs.deeppavlov.ai/en/0.6.0/apiref/models/classifiers.html) for classification,\n  it will return single label for every batch element instead of a list. One can set `"top_n": 1`\n  to get batches of single item lists as before\n\n**Breaking changes in version 0.5.0**\n- dependencies have to be reinstalled for most pipeline configurations\n- models depending on `tensorflow` require `CUDA 10.0` to run on GPU instead of `CUDA 9.0`\n- scikit-learn models have to be redownloaded or retrained\n\n**Breaking changes in version 0.4.0!**\n- default target variable name for [neural evolution](https://docs.deeppavlov.ai/en/0.4.0/intro/hypersearch.html#parameters-evolution-for-deeppavlov-models)\nwas changed from `MODELS_PATH` to `MODEL_PATH`.\n\n**Breaking changes in version 0.3.0!**\n- component option `fit_on_batch` in configuration files was removed and replaced with adaptive usage of the `fit_on` parameter.\n\n**Breaking changes in version 0.2.0!**\n- `utils` module was moved from repository root in to `deeppavlov` module\n- `ms_bot_framework_utils`,`server_utils`, `telegram utils` modules was renamed to `ms_bot_framework`, `server` and `telegram` correspondingly\n- rename metric functions `exact_match` to `squad_v2_em` and  `squad_f1` to `squad_v2_f1`\n- replace dashes in configs name with underscores\n\n**Breaking changes in version 0.1.0!**\n- As of `version 0.1.0` all models, embeddings and other downloaded data for provided configurations are\n by default downloaded to the `.deeppavlov` directory in current user\'s home directory.\n This can be changed on per-model basis by modifying\n a `ROOT_PATH` [variable](http://docs.deeppavlov.ai/en/master/intro/configuration.html#variables)\n or related fields one by one in model\'s configuration file.\n \n- In configuration files, for all features/models, dataset readers and iterators `"name"` and `"class"` fields are combined\ninto the `"class_name"` field.\n\n- `deeppavlov.core.commands.infer.build_model_from_config()` was renamed to `build_model` and can be imported from the\n `deeppavlov` module directly.\n\n- The way arguments are passed to metrics functions during training and evaluation was changed and\n [documented](http://docs.deeppavlov.ai/en/0.4.0/intro/config_description.html#metrics).\n\n## License\n\nDeepPavlov is Apache 2.0 - licensed.\n\n## The Team\n\nDeepPavlov is built and maintained by [Neural Networks and Deep Learning Lab](https://mipt.ru/english/research/labs/neural-networks-and-deep-learning-lab) at [MIPT](https://mipt.ru/english/) within [iPavlov](http://ipavlov.ai/) project.\n\n<p align="center">\n<img src="docs/_static/ipavlov_footer.png" width="50%" height="50%"/>\n</p>\n'