b'# Azure SDK for Go\n\n[![godoc](https://godoc.org/github.com/Azure/azure-sdk-for-go?status.svg)](https://godoc.org/github.com/Azure/azure-sdk-for-go)\n\n[![Build Status](https://travis-ci.org/Azure/azure-sdk-for-go.svg?branch=master)](https://travis-ci.org/Azure/azure-sdk-for-go)\n\n[![Build Status](https://dev.azure.com/azure-sdk/public/_apis/build/status/go/Azure.azure-sdk-for-go?branchName=latest)](https://dev.azure.com/azure-sdk/public/_build/latest?definitionId=640&branchName=latest)\n\n[![Go Report Card](https://goreportcard.com/badge/github.com/Azure/azure-sdk-for-go)](https://goreportcard.com/report/github.com/Azure/azure-sdk-for-go)\n\nazure-sdk-for-go provides Go packages for managing and using Azure services.\nIt officially supports the last two major releases of Go.  Older versions of\nGo will be kept running in CI until they no longer work due to changes in any\nof the SDK\'s external dependencies.  The CHANGELOG will be updated when a\nversion of Go is removed from CI.\n\nTo be notified about updates and changes, subscribe to the [Azure update\nfeed](https://azure.microsoft.com/updates/).\n\nUsers may prefer to jump right in to our samples repo at\n[github.com/Azure-Samples/azure-sdk-for-go-samples][samples_repo].\n\nQuestions and feedback? Chat with us in the **[#Azure SDK\nchannel](https://gophers.slack.com/messages/CA7HK8EEP)** on the [Gophers\nSlack](https://gophers.slack.com/). Sign up\n[here](https://invite.slack.golangbridge.org) first if necessary.\n\n\n## Package Updates\n\nMost packages in the SDK are generated from [Azure API specs][azure_rest_specs]\nusing [Azure/autorest.go][] and [Azure/autorest][]. These generated packages\ndepend on the HTTP client implemented at [Azure/go-autorest][].\n\n[azure_rest_specs]: https://github.com/Azure/azure-rest-api-specs\n[azure/autorest]: https://github.com/Azure/autorest\n[azure/autorest.go]: https://github.com/Azure/autorest.go\n[azure/go-autorest]: https://github.com/Azure/go-autorest\n\nThe SDK codebase adheres to [semantic versioning](https://semver.org) and thus\navoids breaking changes other than at major (x.0.0) releases. Because Azure\'s\nAPIs are updated frequently, we release a **new major version at the end of\neach month** with a full changelog. For more details and background see [SDK Update\nPractices](https://github.com/Azure/azure-sdk-for-go/wiki/SDK-Update-Practices).\n\nTo more reliably manage dependencies like the Azure SDK in your applications we\nrecommend [golang/dep](https://github.com/golang/dep).\n\nPackages that are still in public preview can be found under the ./services/preview\ndirectory. Please be aware that since these packages are in preview they are subject\nto change, including breaking changes outside of a major semver bump.\n\n## Other Azure Go Packages\n\nAzure provides several other packages for using services from Go, listed below.\nIf a package you need isn\'t available please open an issue and let us know.\n\n| Service              | Import Path/Repo                                                                                   |\n| -------------------- | -------------------------------------------------------------------------------------------------- |\n| Storage - Blobs      | [github.com/Azure/azure-storage-blob-go](https://github.com/Azure/azure-storage-blob-go)           |\n| Storage - Files      | [github.com/Azure/azure-storage-file-go](https://github.com/Azure/azure-storage-file-go)           |\n| Storage - Queues     | [github.com/Azure/azure-storage-queue-go](https://github.com/Azure/azure-storage-queue-go)         |\n| Service Bus          | [github.com/Azure/azure-service-bus-go](https://github.com/Azure/azure-service-bus-go)             |\n| Event Hubs           | [github.com/Azure/azure-event-hubs-go](https://github.com/Azure/azure-event-hubs-go)               |\n| Application Insights | [github.com/Microsoft/ApplicationInsights-go](https://github.com/Microsoft/ApplicationInsights-go) |\n\n# Install and Use:\n\n## Install\n\n```sh\n$ go get -u github.com/Azure/azure-sdk-for-go/...\n```\n\nor if you use dep, within your repo run:\n\n```sh\n$ dep ensure -add github.com/Azure/azure-sdk-for-go\n```\n\nIf you need to install Go, follow [the official instructions](https://golang.org/dl/).\n\n## Use\n\nFor many more scenarios and examples see\n[Azure-Samples/azure-sdk-for-go-samples][samples_repo].\n\nApply the following general steps to use packages in this repo. For more on\nauthentication and the `Authorizer` interface see [the next\nsection](#authentication).\n\n1. Import a package from the [services][services_dir] directory.\n2. Create and authenticate a client with a `New*Client` func, e.g.\n   `c := compute.NewVirtualMachinesClient(...)`.\n3. Invoke API methods using the client, e.g.\n   `res, err := c.CreateOrUpdate(...)`.\n4. Handle responses and errors.\n\n[services_dir]: https://github.com/Azure/azure-sdk-for-go/tree/master/services\n\nFor example, to create a new virtual network (substitute your own values for\nstrings in angle brackets):\n\n```go\npackage main\n\nimport (\n\t"context"\n\t"github.com/Azure/azure-sdk-for-go/services/network/mgmt/2017-09-01/network"\n\n\t"github.com/Azure/go-autorest/autorest/azure/auth"\n\t"github.com/Azure/go-autorest/autorest/to"\n)\n\nfunc main() {\n\t// create a VirtualNetworks client\n\tvnetClient := network.NewVirtualNetworksClient("<subscriptionID>")\n\n\t// create an authorizer from env vars or Azure Managed Service Idenity\n\tauthorizer, err := auth.NewAuthorizerFromEnvironment()\n\tif err == nil {\n\t\tvnetClient.Authorizer = authorizer\n\t}\n\n\t// call the VirtualNetworks CreateOrUpdate API\n\tvnetClient.CreateOrUpdate(context.Background(),\n\t\t"<resourceGroupName>",\n\t\t"<vnetName>",\n\t\tnetwork.VirtualNetwork{\n\t\t\tLocation: to.StringPtr("<azureRegion>"),\n\t\t\tVirtualNetworkPropertiesFormat: &network.VirtualNetworkPropertiesFormat{\n\t\t\t\tAddressSpace: &network.AddressSpace{\n\t\t\t\t\tAddressPrefixes: &[]string{"10.0.0.0/8"},\n\t\t\t\t},\n\t\t\t\tSubnets: &[]network.Subnet{\n\t\t\t\t\t{\n\t\t\t\t\t\tName: to.StringPtr("<subnet1Name>"),\n\t\t\t\t\t\tSubnetPropertiesFormat: &network.SubnetPropertiesFormat{\n\t\t\t\t\t\t\tAddressPrefix: to.StringPtr("10.0.0.0/16"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tName: to.StringPtr("<subnet2Name>"),\n\t\t\t\t\t\tSubnetPropertiesFormat: &network.SubnetPropertiesFormat{\n\t\t\t\t\t\t\tAddressPrefix: to.StringPtr("10.1.0.0/16"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n}\n```\n\n## Authentication\n\nTypical SDK operations must be authenticated and authorized. The _Authorizer_\ninterface allows use of any auth style in requests, such as inserting an OAuth2\nAuthorization header and bearer token received from Azure AD.\n\nThe SDK itself provides a simple way to get an authorizer which first checks\nfor OAuth client credentials in environment variables and then falls back to\nAzure\'s [Managed Service Identity]() when available, e.g. when on an Azure\nVM. The following snippet from [the previous section](#use) demonstrates\nthis helper.\n\n```go\nimport github.com/Azure/go-autorest/autorest/azure/auth\n\n// create a VirtualNetworks client\nvnetClient := network.NewVirtualNetworksClient("<subscriptionID>")\n\n// create an authorizer from env vars or Azure Managed Service Idenity\nauthorizer, err := auth.NewAuthorizerFromEnvironment()\nif err == nil {\n    vnetClient.Authorizer = authorizer\n}\n\n// call the VirtualNetworks CreateOrUpdate API\nvnetClient.CreateOrUpdate(context.Background(),\n// ...\n```\n\nThe following environment variables help determine authentication configuration:\n\n- `AZURE_ENVIRONMENT`: Specifies the Azure Environment to use. If not set, it\n  defaults to `AzurePublicCloud`. Not applicable to authentication with Managed\n  Service Identity (MSI).\n- `AZURE_AD_RESOURCE`: Specifies the AAD resource ID to use. If not set, it\n  defaults to `ResourceManagerEndpoint` for operations with Azure Resource\n  Manager. You can also choose an alternate resource programatically with\n  `auth.NewAuthorizerFromEnvironmentWithResource(resource string)`.\n\n### More Authentication Details\n\nThe previous is the first and most recommended of several authentication\noptions offered by the SDK because it allows seamless use of both service\nprincipals and [Azure Managed Service Identity][]. Other options are listed\nbelow.\n\n> Note: If you need to create a new service principal, run `az ad sp create-for-rbac -n "<app_name>"` in the\n> [azure-cli](https://github.com/Azure/azure-cli). See [these\n> docs](https://docs.microsoft.com/cli/azure/create-an-azure-service-principal-azure-cli?view=azure-cli-latest)\n> for more info. Copy the new principal\'s ID, secret, and tenant ID for use in\n> your app, or consider the `--sdk-auth` parameter for serialized output.\n\n[azure managed service identity]: https://docs.microsoft.com/en-us/azure/active-directory/msi-overview\n\n- The `auth.NewAuthorizerFromEnvironment()` described above creates an authorizer\n  from the first available of the following configuration:\n\n      1. **Client Credentials**: Azure AD Application ID and Secret.\n\n          - `AZURE_TENANT_ID`: Specifies the Tenant to which to authenticate.\n          - `AZURE_CLIENT_ID`: Specifies the app client ID to use.\n          - `AZURE_CLIENT_SECRET`: Specifies the app secret to use.\n\n      2. **Client Certificate**: Azure AD Application ID and X.509 Certificate.\n\n          - `AZURE_TENANT_ID`: Specifies the Tenant to which to authenticate.\n          - `AZURE_CLIENT_ID`: Specifies the app client ID to use.\n          - `AZURE_CERTIFICATE_PATH`: Specifies the certificate Path to use.\n          - `AZURE_CERTIFICATE_PASSWORD`: Specifies the certificate password to use.\n\n      3. **Resource Owner Password**: Azure AD User and Password. This grant type is *not\n         recommended*, use device login instead if you need interactive login.\n\n          - `AZURE_TENANT_ID`: Specifies the Tenant to which to authenticate.\n          - `AZURE_CLIENT_ID`: Specifies the app client ID to use.\n          - `AZURE_USERNAME`: Specifies the username to use.\n          - `AZURE_PASSWORD`: Specifies the password to use.\n\n      4. **Azure Managed Service Identity**: Delegate credential management to the\n         platform. Requires that code is running in Azure, e.g. on a VM. All\n         configuration is handled by Azure. See [Azure Managed Service\n         Identity](https://docs.microsoft.com/en-us/azure/active-directory/msi-overview)\n         for more details.\n\n- The `auth.NewAuthorizerFromFile()` method creates an authorizer using\n  credentials from an auth file created by the [Azure CLI][]. Follow these\n  steps to utilize:\n\n  1. Create a service principal and output an auth file using `az ad sp create-for-rbac --sdk-auth > client_credentials.json`.\n  2. Set environment variable `AZURE_AUTH_LOCATION` to the path of the saved\n     output file.\n  3. Use the authorizer returned by `auth.NewAuthorizerFromFile()` in your\n     client as described above.\n\n- The `auth.NewAuthorizerFromCLI()` method creates an authorizer which\n  uses [Azure CLI][] to obtain its credentials. To use this method follow\n  these steps:\n\n  1. Install [Azure CLI v2.0.12](https://docs.microsoft.com/en-us/cli/azure/install-azure-cli) or later. Upgrade earlier versions.\n  2. Use `az login` to sign in to Azure.\n\n  If you receive an error, use `az account get-access-token` to verify access.\n\n  If Azure CLI is not installed to the default directory, you may receive an error\n  reporting that `az` cannot be found.  \n  Use the `AzureCLIPath` environment variable to define the Azure CLI installation folder.\n\n  If you are signed in to Azure CLI using multiple accounts or your account has\n  access to multiple subscriptions, you need to specify the specific subscription\n  to be used. To do so, use:\n\n  ```\n  az account set --subscription <subscription-id>\n  ```\n\n  To verify the current account settings, use:\n\n  ```\n  az account list\n  ```\n\n[azure cli]: https://github.com/Azure/azure-cli\n\n- Finally, you can use OAuth\'s [Device Flow][] by calling\n  `auth.NewDeviceFlowConfig()` and extracting the Authorizer as follows:\n\n  ```go\n  config := auth.NewDeviceFlowConfig(clientID, tenantID)\n  a, err = config.Authorizer()\n  ```\n\n[device flow]: https://oauth.net/2/device-flow/\n\n# Versioning\n\nazure-sdk-for-go provides at least a basic Go binding for every Azure API. To\nprovide maximum flexibility to users, the SDK even includes previous versions of\nAzure APIs which are still in use. This enables us to support users of the\nmost updated Azure datacenters, regional datacenters with earlier APIs, and\neven on-premises installations of Azure Stack.\n\n**SDK versions** apply globally and are tracked by git\n[tags](https://github.com/Azure/azure-sdk-for-go/tags). These are in x.y.z form\nand generally adhere to [semantic versioning](https://semver.org) specifications.\n\n**Service API versions** are generally represented by a date string and are\ntracked by offering separate packages for each version. For example, to choose the\nlatest API versions for Compute and Network, use the following imports:\n\n```go\nimport (\n    "github.com/Azure/azure-sdk-for-go/services/compute/mgmt/2017-12-01/compute"\n    "github.com/Azure/azure-sdk-for-go/services/network/mgmt/2017-09-01/network"\n)\n```\n\nOccasionally service-side changes require major changes to existing versions.\nThese cases are noted in the changelog, and for this reason `Service API versions`\ncannot be used alone to ensure backwards compatibility.\n\nAll available services and versions are listed under the `services/` path in\nthis repo and in [GoDoc][services_godoc]. Run `find ./services -type d -mindepth 3` to list all available service packages.\n\n[services_godoc]: https://godoc.org/github.com/Azure/azure-sdk-for-go/services\n\n### Profiles\n\nAzure **API profiles** specify subsets of Azure APIs and versions. Profiles can provide:\n\n- **stability** for your application by locking to specific API versions; and/or\n- **compatibility** for your application with Azure Stack and regional Azure datacenters.\n\nIn the Go SDK, profiles are available under the `profiles/` path and their\ncomponent API versions are aliases to the true service package under\n`services/`. You can use them as follows:\n\n```go\nimport "github.com/Azure/azure-sdk-for-go/profiles/2017-03-09/compute/mgmt/compute"\nimport "github.com/Azure/azure-sdk-for-go/profiles/2017-03-09/network/mgmt/network"\nimport "github.com/Azure/azure-sdk-for-go/profiles/2017-03-09/storage/mgmt/storage"\n```\n\nThe following profiles are available for hybrid Azure and Azure Stack environments.\n- 2017-03-09\n- 2018-03-01\n\nIn addition to versioned profiles, we also provide two special profiles\n`latest` and `preview`. The `latest` profile contains the latest API version\nof each service, excluding any preview versions and/or content.  The `preview`\nprofile is similar to the `latest` profile but includes preview API versions.\n\nThe `latest` and `preview` profiles can help you stay up to date with API\nupdates as you build applications. Since they are by definition not stable,\nhowever, they **should not** be used in production apps. Instead, choose the\nlatest specific API version (or an older one if necessary) from the `services/`\npath.\n\nAs an example, to automatically use the most recent Compute APIs, use one of\nthe following imports:\n\n```go\nimport "github.com/Azure/azure-sdk-for-go/profiles/latest/compute/mgmt/compute"\nimport "github.com/Azure/azure-sdk-for-go/profiles/preview/compute/mgmt/compute"\n```\n\n### Avoiding Breaking Changes\n\nTo avoid breaking changes, when specifying imports you should specify a `Service API Version` or `Profile`, as well as lock (using [dep](https://github.com/golang/dep) and soon with [Go Modules](https://github.com/golang/go/wiki/Modules)) to a specific SDK version.\n\nFor example, in your source code imports, use a `Service API Version` (`2017-12-01`):\n\n```go\nimport "github.com/Azure/azure-sdk-for-go/services/compute/mgmt/2017-12-01/compute"\n```\n\nor `Profile` version (`2017-03-09`):\n\n```go\nimport "github.com/Azure/azure-sdk-for-go/profiles/2017-03-09/compute/mgmt/compute"\n```\n\nAs well as, for dep, a `Gopkg.toml` file with:\n\n```toml\n[[constraint]]\n  name = "github.com/Azure/azure-sdk-for-go"\n  version = "21.0.0"\n```\n\nCombined, these techniques will ensure that breaking changes should not occur. If you are extra sensitive to changes, adding an additional [version pin](https://golang.github.io/dep/docs/Gopkg.toml.html#version-rules) in your SDK Version should satisfy your needs:\n\n```toml\n[[constraint]]\n  name = "github.com/Azure/azure-sdk-for-go"\n  version = "=21.3.0"\n```\n\n## Inspecting and Debugging\n\n### Built-in Basic Request/Response Logging\n\nStarting with `go-autorest v10.15.0` you can enable basic logging of requests and responses through setting environment variables.\nSetting `AZURE_GO_SDK_LOG_LEVEL` to `INFO` will log request/response without their bodies. To include the bodies set the log level to `DEBUG`.\n\nBy default the logger writes to strerr, however it can also write to stdout or a file\nif specified in `AZURE_GO_SDK_LOG_FILE`. Note that if the specified file already exists it will be truncated.\n\n**IMPORTANT:** by default the logger will redact the Authorization and Ocp-Apim-Subscription-Key\nheaders. Any other secrets will _not_ be redacted.\n\n### Writing Custom Request/Response Inspectors\n\nAll clients implement some handy hooks to help inspect the underlying requests being made to Azure.\n\n- `RequestInspector`: View and manipulate the go `http.Request` before it\'s sent\n- `ResponseInspector`: View the `http.Response` received\n\nHere is an example of how these can be used with `net/http/httputil` to see requests and responses.\n\n```go\nvnetClient := network.NewVirtualNetworksClient("<subscriptionID>")\nvnetClient.RequestInspector = LogRequest()\nvnetClient.ResponseInspector = LogResponse()\n\n...\n\nfunc LogRequest() autorest.PrepareDecorator {\n\treturn func(p autorest.Preparer) autorest.Preparer {\n\t\treturn autorest.PreparerFunc(func(r *http.Request) (*http.Request, error) {\n\t\t\tr, err := p.Prepare(r)\n\t\t\tif err != nil {\n\t\t\t\tlog.Println(err)\n\t\t\t}\n\t\t\tdump, _ := httputil.DumpRequestOut(r, true)\n\t\t\tlog.Println(string(dump))\n\t\t\treturn r, err\n\t\t})\n\t}\n}\n\nfunc LogResponse() autorest.RespondDecorator {\n\treturn func(p autorest.Responder) autorest.Responder {\n\t\treturn autorest.ResponderFunc(func(r *http.Response) error {\n\t\t\terr := p.Respond(r)\n\t\t\tif err != nil {\n\t\t\t\tlog.Println(err)\n\t\t\t}\n\t\t\tdump, _ := httputil.DumpResponse(r, true)\n\t\t\tlog.Println(string(dump))\n\t\t\treturn err\n\t\t})\n\t}\n}\n```\n\n## Tracing and Metrics\n\nAll packages and the runtime are instrumented using [OpenCensus](https://opencensus.io/).\n\n### Enable\n\nBy default, no tracing provider will be compiled into your program, and the legacy approach of setting `AZURE_SDK_TRACING_ENABLED` environment variable will no longer take effect.\n\nTo enable tracing, you must now add the following include to your source file.\n\n``` go\n    include _ "github.com/Azure/go-autorest/tracing/opencensus"\n```\n\nTo hook up a tracer simply call `tracing.Register()` passing in a type that satisfies the `tracing.Tracer` interface.\n\n**Note**: In future major releases of the SDK, tracing may become enabled by default.\n\n### Usage\n\nOnce enabled, all SDK calls will emit traces and metrics and the traces will correlate the SDK calls with the raw http calls made to Azure API\'s. To consume those traces, if are not doing it yet, you need to register an exporter of your choice such as [Azure App Insights](https://docs.microsoft.com/en-us/azure/application-insights/opencensus-local-forwarder) or [Zipkin](https://opencensus.io/quickstart/go/tracing/#exporting-traces).\n\nTo correlate the SDK calls between them and with the rest of your code, pass in a context that has a span initiated using the [opencensus-go library](https://github.com/census-instrumentation/opencensus-go) using the `trace.Startspan(ctx context.Context, name string, o ...StartOption)` function. Here is an example:\n\n```go\nfunc doAzureCalls() {\n    // The resulting context will be initialized with a root span as the context passed to\n    // trace.StartSpan() has no existing span.\n    ctx, span := trace.StartSpan(context.Background(),"doAzureCalls", trace.WithSampler(trace.AlwaysSample()))\n    defer span.End()\n\n    // The traces from the SDK calls will be correlated under the span inside the context that is passed in.\n    zone, _ := zonesClient.CreateOrUpdate(ctx, rg, zoneName, dns.Zone{Location: to.StringPtr("global")}, "", "")\n    zone, _ = zonesClient.Get(ctx, rg, *zone.Name)\n    for i := 0; i < rrCount; i++ {\n        rr, _ := recordsClient.CreateOrUpdate(ctx, rg, zoneName, fmt.Sprintf("rr%d", i), dns.CNAME, rdSet{\n            RecordSetProperties: &dns.RecordSetProperties{\n                TTL: to.Int64Ptr(3600),\n                CnameRecord: &dns.CnameRecord{\n                    Cname: to.StringPtr("vladdbCname"),\n                },\n            },\n        },\n            "",\n            "",\n        )\n    }\n}\n```\n\n## Request Retry Policy\n\nThe SDK provides a baked in retry policy for failed requests with default values that can be configured.\nEach [client](https://godoc.org/github.com/Azure/go-autorest/autorest#Client) object contains the follow fields.\n- `RetryAttempts` - the number of times to retry a failed request\n- `RetryDuration` - the duration to wait between retries\n\nFor async operations the follow values are also used.\n- `PollingDelay` - the duration to wait between polling requests\n- `PollingDuration` - the total time to poll an async request before timing out\n\nPlease see the [documentation](https://godoc.org/github.com/Azure/go-autorest/autorest#pkg-constants) for the default values used.\n\nChanging one or more values will affect all subsequet API calls.\n\nThe default policy is to call `autorest.DoRetryForStatusCodes()` from an API\'s `Sender` method.  Example:\n```go\nfunc (client OperationsClient) ListSender(req *http.Request) (*http.Response, error) {\n\tsd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))\n\treturn autorest.SendWithSender(client, req, sd...)\n}\n```\n\nDetails on how `autorest.DoRetryforStatusCodes()` works can be found in the [documentation](https://godoc.org/github.com/Azure/go-autorest/autorest#DoRetryForStatusCodes).\n\nThe slice of `SendDecorators` used in a `Sender` method can be customized per API call by smuggling them in the context.  Here\'s an example.\n\n```go\nctx := context.Background()\nautorest.WithSendDecorators(ctx, []autorest.SendDecorator{\n\tautorest.DoRetryForStatusCodesWithCap(client.RetryAttempts,\n\t\tclient.RetryDuration, time.Duration(0),\n        autorest.StatusCodesForRetry...)})\nclient.List(ctx)\n```\n\nThis will replace the default slice of `SendDecorators` with the provided slice.\n\nThe `PollingDelay` and `PollingDuration` values are used exclusively by [WaitForCompletionRef()](https://godoc.org/github.com/Azure/go-autorest/autorest/azure#Future.WaitForCompletionRef) when blocking on an async call until it completes.\n\n# Resources\n\n- SDK docs are at [godoc.org](https://godoc.org/github.com/Azure/azure-sdk-for-go/).\n- SDK samples are at [Azure-Samples/azure-sdk-for-go-samples](https://github.com/Azure-Samples/azure-sdk-for-go-samples).\n- SDK notifications are published via the [Azure update feed](https://azure.microsoft.com/updates/).\n- Azure API docs are at [docs.microsoft.com/rest/api](https://docs.microsoft.com/rest/api/).\n- General Azure docs are at [docs.microsoft.com/azure](https://docs.microsoft.com/azure).\n\n## License\n\nApache 2.0, see [LICENSE](./LICENSE).\n\n## Contribute\n\nSee [CONTRIBUTING.md](./CONTRIBUTING.md).\n\n[samples_repo]: https://github.com/Azure-Samples/azure-sdk-for-go-samples\n'