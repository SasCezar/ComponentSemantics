b'S3Proxy\n=======\n\n[![Github All Releases](https://img.shields.io/github/downloads/gaul/s3proxy/total.svg)](https://github.com/gaul/s3proxy/releases/)\n[![Docker Pulls](https://img.shields.io/docker/pulls/andrewgaul/s3proxy.svg)](https://hub.docker.com/r/andrewgaul/s3proxy/)\n[![Maven Central](https://img.shields.io/maven-central/v/org.gaul/s3proxy.svg)](https://search.maven.org/#search%7Cga%7C1%7Ca%3A%22s3proxy%22)\n[![Twitter Follow](https://img.shields.io/twitter/follow/S3Proxy.svg?style=social&label=Follow)](https://twitter.com/S3Proxy)\n\nS3Proxy implements the\n[S3 API](https://en.wikipedia.org/wiki/Amazon_S3#S3_API_and_competing_services)\nand *proxies* requests, enabling several use cases:\n\n* translation from S3 to Backblaze B2, EMC Atmos, Google Cloud, Microsoft Azure, and OpenStack Swift\n* testing without Amazon by using the local filesystem\n* extension via middlewares\n* embedding into Java applications\n\nUsage with Docker\n-----------------\n[Docker Hub](https://hub.docker.com/r/andrewgaul/s3proxy/) hosts a Docker image\nand has instructions on how to run it.\n\nUsage without Docker\n--------------------\nUsers can [download releases](https://github.com/gaul/s3proxy/releases)\nfrom GitHub.  Developers can build the project by running `mvn package` which\nproduces a binary at `target/s3proxy`.  S3Proxy requires Java 7 to run.\n\nConfigure S3Proxy via a properties file.  An example using the local\nfile system as the storage backend with anonymous access:\n\n```\ns3proxy.authorization=none\ns3proxy.endpoint=http://127.0.0.1:8080\njclouds.provider=filesystem\njclouds.filesystem.basedir=/tmp/s3proxy\n```\n\nFirst create the filesystem basedir:\n\n```\nmkdir /tmp/s3proxy\n```\n\nNext run S3Proxy.  Linux and Mac OS X users can run the executable jar:\n\n```\nchmod +x s3proxy\ns3proxy --properties s3proxy.conf\n```\n\nWindows users must explicitly invoke java:\n\n```\njava -jar s3proxy --properties s3proxy.conf\n```\n\nFinally test by creating a bucket then listing all the buckets:\n\n```\n$ curl --request PUT http://localhost:8080/testbucket\n\n$ curl http://localhost:8080/\n<?xml version="1.0" ?><ListAllMyBucketsResult xmlns="http://s3.amazonaws.com/doc/2006-03-01/"><Owner><ID>75aa57f09aa0c8caeab4f8c24e99d10f8e7faeebf76c078efc7c6caea54ba06a</ID><DisplayName>CustomersName@amazon.com</DisplayName></Owner><Buckets><Bucket><Name>testbucket</Name><CreationDate>2015-08-05T22:16:24.000Z</CreationDate></Bucket></Buckets></ListAllMyBucketsResult>\n```\n\nUsage with Java\n---------------\n\nMaven Central hosts S3Proxy artifacts and the wiki has\n[instructions on Java use](https://github.com/gaul/s3proxy/wiki/Using-S3Proxy-in-Java-projects).\n\nSupported storage backends\n--------------------------\n\n* atmos\n* aws-s3 (Amazon-only)\n* azureblob\n* b2\n* filesystem (on-disk storage)\n* google-cloud-storage\n* openstack-swift\n* rackspace-cloudfiles-uk and rackspace-cloudfiles-us\n* s3 (all implementations)\n* transient (in-memory storage)\n\nSee the wiki for [examples of configurations](https://github.com/gaul/s3proxy/wiki/Storage-backend-examples).\n\nMiddlewares\n-----------\n\nS3Proxy can modify its behavior based on middlewares:\n\n* [eventual consistency modeling](https://github.com/gaul/s3proxy/wiki/Middleware---eventual-consistency)\n* [large object mocking](https://github.com/gaul/s3proxy/wiki/Middleware-large-object-mocking)\n* [read-only](https://github.com/gaul/s3proxy/wiki/Middleware-read-only)\n\nLimitations\n-----------\n\nS3Proxy has broad compatibility with the S3 API, however, it does not support:\n\n* ACLs other than private and public-read\n* BitTorrent hosting\n* bucket logging\n* bucket policies\n* [CORS bucket operations](https://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html#how-do-i-enable-cors) like getting or setting the CORS configuration for a bucket. S3Proxy only supports a static configuration (see below).\n* hosting static websites\n* object server-side encryption\n* object tagging\n* object versioning, see [#74](https://github.com/gaul/s3proxy/issues/74)\n* POST upload policies, see [#73](https://github.com/gaul/s3proxy/issues/73)\n* requester pays buckets\n* [select object content](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectSELECTContent.html)\n\nS3Proxy emulates the following operations:\n\n* copy multi-part objects, see [#76](https://github.com/gaul/s3proxy/issues/76)\n\nS3Proxy has basic CORS preflight and actual request/response handling. It can be configured within the properties\nfile (and corresponding ENV variables for Docker):\n\n```\ns3proxy.cors-allow-origins=https://example\\.com https://.+\\.example\\.com https://example\\.cloud\ns3proxy.cors-allow-methods=GET PUT\ns3proxy.cors-allow-headers=Accept Content-Type\n```\n\nCORS cannot be configured per bucket. `s3proxy.cors-allow-all=true` will accept any origin and header.\nActual CORS requests are supported for GET, PUT and POST methods.\n\nThe wiki collects\n[compatibility notes](https://github.com/gaul/s3proxy/wiki/Storage-backend-compatibility)\nfor specific storage backends.\n\nSupport\n-------\n\n[GitHub issues](https://github.com/gaul/s3proxy/issues) provide community\nsupport.  Andrew Gaul provides commercial support via <andrew@gaul.org>.\n\nReferences\n----------\n\n* [Apache jclouds](http://jclouds.apache.org/) provides storage backend support for S3Proxy\n* [Ceph s3-tests](https://github.com/ceph/s3-tests) help maintain and improve compatibility with the S3 API\n* [fake-s3](https://github.com/jubos/fake-s3), [gofakes3](https://github.com/johannesboyne/gofakes3), [S3 ninja](https://github.com/scireum/s3ninja), and [s3rver](https://github.com/jamhall/s3rver) provide functionality similar to S3Proxy when using the filesystem backend\n* [GlacierProxy](https://github.com/bouncestorage/glacier-proxy) and [SwiftProxy](https://github.com/bouncestorage/swiftproxy) provide similar functionality for the Amazon Glacier and OpenStack Swift APIs\n* [minio](https://github.com/minio/minio) and [Zenko](https://www.zenko.io/) provide similar multi-cloud functionality\n* [s3mock](https://github.com/findify/s3mock) mocks the S3 API for Java/Scala projects\n* [sbt-s3](https://github.com/localytics/sbt-s3) runs S3Proxy via the Scala Build Tool\n* [swift3](https://github.com/openstack/swift3) provides an S3 middleware for OpenStack Swift\n\nLicense\n-------\nCopyright (C) 2014-2019 Andrew Gaul\n\nLicensed under the Apache License, Version 2.0\n'