b'[![Build Status](https://travis-ci.org/Azure/azure-sdk-for-php.svg?branch=master)](https://travis-ci.org/Azure/azure-sdk-for-php)\n[![Latest Stable Version](https://poser.pugx.org/microsoft/windowsazure/v/stable)](https://packagist.org/packages/microsoft/windowsazure)\n\n# Microsoft Azure SDK for PHP\n\nThis project provides a set of PHP client libraries that make it easy to access\nMicrosoft Azure tables, blobs, queues, service bus (queues and topics), service runtime and service management APIs. For documentation on how to host PHP applications on Microsoft Azure, please see the\n[Microsoft Azure PHP Developer Center](http://www.windowsazure.com/en-us/develop/php/).\n\n# Features\n\n* Tables\n  * create and delete tables\n  * create, query, insert, update, merge, and delete entities\n  * batch operations\n  * REST API Version: see https://github.com/Azure/azure-storage-php\n* Blobs\n  * create, list, and delete containers, work with container metadata and permissions, list blobs in container\n  * create block and page blobs (from a stream or a string), work with blob blocks and pages, delete blobs\n  * work with blob properties, metadata, leases, snapshot a blob\n  * REST API Version: see https://github.com/Azure/azure-storage-php\n* Storage Queues\n  * create, list, and delete queues, and work with queue metadata and properties\n  * create, get, peek, update, delete messages\n  * REST API Version: see https://github.com/Azure/azure-storage-php\n* Service Bus\n  * Queues: create, list and delete queues; send, receive, unlock and delete messages\n  * Topics: create, list, and delete topics; create, list, and delete subscriptions; send, receive, unlock and delete messages; create, list, and delete rules\n* Service Runtime\n  * discover addresses and ports for the endpoints of other role instances in your service\n  * get configuration settings and access local resources\n  * get role instance information for current role and other role instances\n  * query and set the status of the current role\n  * REST API Version: 2011-03-08\n* Service Management\n  * storage accounts: create, update, delete, list, regenerate keys\n  * affinity groups: create, update, delete, list, get properties\n  * locations: list\n  * hosted services: create, update, delete, list, get properties\n  * deployment: create, get, delete, swap, change configuration, update status, upgrade, rollback\n  * role instance: reboot, reimage\n  * REST API Version: 2011-10-01\n* Media Services\n  * Connection\n  * Ingest asset, upload files\n  * Encoding / process asset, create job, job templates\n  * Manage media services entities: create / update / read / delete / get list\n  * Delivery SAS and Streaming media content\n  * Dynamic encryption: AES and DRM (PlayReady/Widevine/FairPlay) with and without Token restriction\n  * Scale encoding reserved unit type\n  * Live streaming: live encoding and pass-through channels, programs and all their operations\n  * REST API Version: 2.13\n\n\n# Getting Started\n## Download Source Code\n\nTo get the source code from GitHub, type\n\n```\ngit clone https://github.com/Azure/azure-sdk-for-php.git\ncd ./azure-sdk-for-php\n```\n\n> **Note**\n>\n> The recommended way to resolve dependencies is to install them using the [Composer package manager](http://getcomposer.org).\n\n## Install via Composer\n\n* Create a file named **composer.json** in the root of your project and add the following code to it:\n\n  ```json\n  {\n      "require": {\n          "microsoft/windowsazure": "^0.5"\n      }\n  }\n  ```\n\n* Download **[composer.phar](http://getcomposer.org/composer.phar)** in your project root.\n\n* Open a command prompt and execute this in your project root\n\n  ```\n  php composer.phar install\n  ```\n\n  > **Note**\n  >\n  > On Windows, you will also need to add the Git executable to your PATH environment variable.\n\n# Usage\n\n## Getting Started\n\nThere are four basic steps that have to be performed before you can make a call to any Microsoft Azure API when using the libraries.\n\n* First, include the autoloader script:\n\n  ```PHP\n  require_once "vendor/autoload.php";\n  ```\n\n* Include the namespaces you are going to use.\n\n  To create any Microsoft Azure service client you need to use the **ServicesBuilder** class:\n\n  ```PHP\n  use WindowsAzure\\Common\\ServicesBuilder;\n  ```\n\n  To process exceptions you need:\n\n  ```PHP\n  use WindowsAzure\\Common\\ServiceException;\n  ```\n\n* To instantiate the service client you will also need a valid connection string. The format is:\n\n  * For accessing a live storage service (tables, blobs, queues):\n\n    ```\n    DefaultEndpointsProtocol=[http|https];AccountName=[yourAccount];AccountKey=[yourKey]\n    ```\n\n  * For accessing the emulator storage:\n\n    ```\n    UseDevelopmentStorage=true\n    ```\n\n  * For accessing the Service Bus:\n\n    ```\n    Endpoint=[yourEndpoint];SharedSecretIssuer=[yourWrapAuthenticationName];SharedSecretValue=[yourWrapPassword]\n    ```\n\n    Where the Endpoint is typically of the format `https://[yourNamespace].servicebus.windows.net`.\n\n  * For accessing Service Management APIs:\n\n    ```\n    SubscriptionID=[yourSubscriptionId];CertificatePath=[filePathToYourCertificate]\n    ```\n\n\n* Instantiate a "REST Proxy" - a wrapper around the available calls for the given service.\n\n  * For the Storage services:\n\n    ```PHP\n    $tableRestProxy = ServicesBuilder::getInstance()->createTableService($connectionString);\n    $blobRestProxy = ServicesBuilder::getInstance()->createBlobService($connectionString);\n    $queueRestProxy = ServicesBuilder::getInstance()->createQueueService($connectionString);\n    ```\n\n  * For Service Bus:\n\n    ```PHP\n    $serviceBusRestProxy = ServicesBuilder::getInstance()->createServiceBusService($connectionString);\n    ```\n\n  * For Service Management:\n\n    ```PHP\n    $serviceManagementRestProxy = ServicesBuilder::getInstance()->createServiceManagementService($connectionString);\n    ```\n\n  * For Media Services:\n\n    ```PHP\n    // 1 - Instantiate the credentials\n    $credentials = new AzureAdTokenCredentials(\n        \'<tenant domain name>\',\n        new AzureAdClientSymmetricKey(\'<service principal client id>\', \'<service principal client key>\'),\n        AzureEnvironments::AZURE_CLOUD_ENVIRONMENT());\n\n    // 2 - Instantiate a token provider\n    $provider = new AzureAdTokenProvider($credentials);\n\n    // 3 - Connect to Azure Media Services\n    $mediaServicesRestProxy = ServicesBuilder::getInstance()->createMediaServicesService(new MediaServicesSettings(\'<rest api endpoint>\', $provider));\n    ```\n    You can find more examples for Media Services Authentication on the [examples](examples/MediaServices/) folder.\n\n## Table Storage\n\nThe following are examples of common operations performed with the Table service. For more please read [How-to use the Table service](http://www.windowsazure.com/en-us/develop/php/how-to-guides/table-service/).\n\n### Create a table\n\nTo create a table call **createTable**:\n\n```PHP\ntry {\n  // Create table.\n  $tableRestProxy->createTable("mytable");\n} catch(ServiceException $e){\n  $code = $e->getCode();\n  $error_message = $e->getMessage();\n  echo $code.": ".$error_message."<br />";\n}\n```\n\n[Error Codes and Messages for Tables](http://msdn.microsoft.com/en-us/library/windowsazure/dd179438.aspx)\n\n### Insert an entity\n\nTo add an entity to a table, create a new **Entity** object and pass it to **TableRestProxy->insertEntity**. Note that when you create an entity you must specify a `PartitionKey` and `RowKey`. These are the unique identifiers for an entity and are values that can be queried much faster than other entity properties. The system uses `PartitionKey` to automatically distribute the table\xe2\x80\x99s entities over many storage nodes.\n\n```PHP\nuse MicrosoftAzure\\Storage\\Table\\Models\\Entity;\nuse MicrosoftAzure\\Storage\\Table\\Models\\EdmType;\n\n$entity = new Entity();\n$entity->setPartitionKey("pk");\n$entity->setRowKey("1");\n$entity->addProperty("PropertyName", EdmType::STRING, "Sample");\n\ntry{\n  $tableRestProxy->insertEntity("mytable", $entity);\n} catch(ServiceException $e){\n  $code = $e->getCode();\n  $error_message = $e->getMessage();\n  echo $code.": ".$error_message."<br />";\n}\n```\n\n### Query entities\n\nTo query for entities you can call **queryEntities**. The subset of entities you retrieve will be determined by the filter you use (for more information, see [Querying Tables and Entities](http://msdn.microsoft.com/en-us/library/windowsazure/dd894031.aspx)). You can also provide no filter at all.\n\n```PHP\n$filter = "RowKey eq \'2\'";\n\ntry {\n  $result = $tableRestProxy->queryEntities("mytable", $filter);\n} catch(ServiceException $e){\n  $code = $e->getCode();\n  $error_message = $e->getMessage();\n  echo $code.": ".$error_message."<br />";\n}\n\n$entities = $result->getEntities();\n\nforeach($entities as $entity){\n  echo $entity->getPartitionKey().":".$entity->getRowKey()."<br />";\n}\n```\n\n## Blob Storage\n\nTo get started using the Blob service you must include the `BlobService` and `BlobSettings` namespaces and set the `ACCOUNT_NAME` and `ACCOUNT_KEY` configuration settings for your credentials. Then you instantiate the wrapper using the `BlobService` factory.\n\nThe following are examples of common operations performed with the Blob serivce. For more please read [How-to use the Blob service](http://www.windowsazure.com/en-us/develop/php/how-to-guides/blob-service/).\n\n\n### Create a container\n\n```PHP\n// OPTIONAL: Set public access policy and metadata.\n// Create container options object.\n$createContainerOptions = new CreateContainerOptions();\n\n// Set public access policy. Possible values are\n// PublicAccessType::CONTAINER_AND_BLOBS and PublicAccessType::BLOBS_ONLY.\n// CONTAINER_AND_BLOBS: full public read access for container and blob data.\n// BLOBS_ONLY: public read access for blobs. Container data not available.\n// If this value is not specified, container data is private to the account owner.\n$createContainerOptions->setPublicAccess(PublicAccessType::CONTAINER_AND_BLOBS);\n\n// Set container metadata\n$createContainerOptions->addMetaData("key1", "value1");\n$createContainerOptions->addMetaData("key2", "value2");\n\ntry {\n  // Create container.\n  $blobRestProxy->createContainer("mycontainer", $createContainerOptions);\n} catch(ServiceException $e){\n  $code = $e->getCode();\n  $error_message = $e->getMessage();\n  echo $code.": ".$error_message."<br />";\n}\n```\n\n[Error Codes and Messages for Blobs](http://msdn.microsoft.com/en-us/library/windowsazure/dd179439.aspx)\n\nFor more information about container ACLs, see [Set Container ACL (REST API)](http://msdn.microsoft.com/en-us/library/windowsazure/dd179391.aspx).\n\n### Upload a blob\n\nTo upload a file as a blob, use the **BlobRestProxy->createBlockBlob** method. This operation will create the blob if it doesn\xe2\x80\x99t exist, or overwrite it if it does. The code example below assumes that the container has already been created and uses [fopen](http://www.php.net/fopen) to open the file as a stream.\n\n```PHP\n$content = fopen("myfile.txt", "r");\n$blob_name = "myblob";\n\ntry {\n  //Upload blob\n  $blobRestProxy->createBlockBlob("mycontainer", $blob_name, $content);\n} catch(ServiceException $e){\n  $code = $e->getCode();\n  $error_message = $e->getMessage();\n  echo $code.": ".$error_message."<br />";\n}\n```\n\nWhile the example above uploads a blob as a stream, a blob can also be uploaded as a string.\n\n### List blobs in a container\n\nTo list the blobs in a container, use the **BlobRestProxy->listBlobs** method with a **foreach** loop to loop through the result. The following code outputs the name and URI of each blob in a container.\n\n```PHP\ntry {\n  // List blobs.\n  $blob_list = $blobRestProxy->listBlobs("mycontainer");\n  $blobs = $blob_list->getBlobs();\n\n  foreach($blobs as $blob)\n  {\n    echo $blob->getName().": ".$blob->getUrl()."<br />";\n  }\n} catch(ServiceException $e){\n  $code = $e->getCode();\n  $error_message = $e->getMessage();\n  echo $code.": ".$error_message."<br />";\n}\n```\n\n\n## Storage Queues\n\nTo get started using the Queue service you must include the `QueueService` and `QueueSettings` namespaces and set the `ACCOUNT_NAME` and `ACCOUNT_KEY` configuration settings for your credentials. Then you instantiate the wrapper using the `QueueService` factory.\n\nThe following are examples of common operations performed with the Queue serivce. For more please read [How-to use the Queue service](http://www.windowsazure.com/en-us/develop/php/how-to-guides/queue-service/).\n\n\n### Create a queue\n\nA **QueueRestProxy** object lets you create a queue with the **createQueue** method. When creating a queue, you can set options on the queue, but doing so is not required.\n\n```PHP\n$createQueueOptions = new CreateQueueOptions();\n$createQueueOptions->addMetaData("key1", "value1");\n$createQueueOptions->addMetaData("key2", "value2");\n\ntry {\n  // Create queue.\n  $queueRestProxy->createQueue("myqueue", $createQueueOptions);\n} catch(ServiceException $e){\n  $code = $e->getCode();\n  $error_message = $e->getMessage();\n  echo $code.": ".$error_message."<br />";\n}\n```\n\n[Error Codes and Messages for Queues](http://msdn.microsoft.com/en-us/library/windowsazure/dd179446.aspx)\n\n\n### Add a message to a queue\n\nTo add a message to a queue, use **QueueRestProxy->createMessage**. The method takes the queue name, the message text, and message options (which are optional).\nFor compatibility with others you may need to base64 encode message.\n\n```PHP\ntry {\n  // Create message.\n  $msg = "Hello World!";\n  // optional: $msg = base64_encode($msg);\n  $queueRestProxy->createMessage("myqueue", $msg);\n} catch(ServiceException $e){\n  $code = $e->getCode();\n  $error_message = $e->getMessage();\n  echo $code.": ".$error_message."<br />";\n}\n```\n\n### Peek at the next message\n\nYou can peek at a message (or messages) at the front of a queue without removing it from the queue by calling **QueueRestProxy->peekMessages**.\n\n```PHP\n// OPTIONAL: Set peek message options.\n$message_options = new PeekMessagesOptions();\n$message_options->setNumberOfMessages(1); // Default value is 1.\n\ntry {\n  $peekMessagesResult = $queueRestProxy->peekMessages("myqueue", $message_options);\n} catch(ServiceException $e){\n  $code = $e->getCode();\n  $error_message = $e->getMessage();\n  echo $code.": ".$error_message."<br />";\n}\n\n$messages = $peekMessagesResult->getQueueMessages();\n\n// View messages.\n$messageCount = count($messages);\nif($messageCount <= 0){\n  echo "There are no messages.<br />";\n}\nelse{\n  foreach($messages as $message)  {\n    echo "Peeked message:<br />";\n    echo "Message Id: ".$message->getMessageId()."<br />";\n    echo "Date: ".date_format($message->getInsertionDate(), \'Y-m-d\')."<br />";\n    echo "Message text: ".$message->getMessageText()."<br /><br />";\n  }\n}\n```\n\n### De-queue the next message\n\nYour code removes a message from a queue in two steps. First, you call **QueueRestProxy->listMessages**, which makes the message invisible to any other code reading from the queue. By default, this message will stay invisible for 30 seconds (if the message is not deleted in this time period, it will become visible on the queue again). To finish removing the message from the queue, you must call **QueueRestProxy->deleteMessage**.\n\n```PHP\n// Get message.\n$listMessagesResult = $queueRestProxy->listMessages("myqueue");\n$messages = $listMessagesResult->getQueueMessages();\n$message = $messages[0];\n\n// Process message\n\n// Get message Id and pop receipt.\n$messageId = $message->getMessageId();\n$popReceipt = $message->getPopReceipt();\n\ntry {\n  // Delete message.\n  $queueRestProxy->deleteMessage("myqueue", $messageId, $popReceipt);\n} catch(ServiceException $e){\n  $code = $e->getCode();\n  $error_message = $e->getMessage();\n  echo $code.": ".$error_message."<br />";\n}\n```\n\n## Service Bus Queues\nThe current PHP Service Bus APIs only support ACS connection strings. You need to use PowerShell to create a new ACS Service Bus namespace at the present time.\nFirst, make sure you have Azure PowerShell installed, then in a PowerShell command prompt, run\n```PowerShell\nAdd-AzureAccount # this will sign you in\nNew-AzureSBNamespace -CreateACSNamespace $true -Name \'mytestbusname\' -Location \'West US\' -NamespaceType \'Messaging\'\n```\nIf it is sucessful, you will get the connection string in the PowerShell output. If you get connection errors with it and the conection string looks like Endpoint=sb://..., change it to **Endpoint=https://...**\n\n### Create a Queue\n\n```PHP\ntry {\n  $queueInfo = new QueueInfo("myqueue");\n\n  // Create queue.\n  $serviceBusRestProxy->createQueue($queueInfo);\n} catch(ServiceException $e){\n  $code = $e->getCode();\n  $error_message = $e->getMessage();\n  echo $code.": ".$error_message."<br />";\n}\n```\n\n[Error Codes and Messages](http://msdn.microsoft.com/en-us/library/windowsazure/dd179357)\n\n### Send a Message\n\nTo send a message to a Service Bus queue, your application will call the **ServiceBusRestProxy->sendQueueMessage** method. Messages sent to (and received from ) Service Bus queues are instances\nof the **BrokeredMessage** class.\n\n```PHP\ntry {\n  // Create message.\n  $message = new BrokeredMessage();\n  $message->setBody("my message");\n\n  // Send message.\n  $serviceBusRestProxy->sendQueueMessage("myqueue", $message);\n} catch(ServiceException $e){\n  $code = $e->getCode();\n  $error_message = $e->getMessage();\n  echo $code.": ".$error_message."<br />";\n}\n```\n\n### Receive a Message\n\nThe primary way to receive messages from a queue is to use a **ServiceBusRestProxy->receiveQueueMessage** method. Messages can be received in two different modes: **ReceiveAndDelete** (mark message as consumed on read) and **PeekLock** (locks message for a period of time, but does not delete).\n\nThe example below demonstrates how a message can be received and processed using **PeekLock** mode (not the default mode).\n\n```PHP\ntry {\n  // Set the receive mode to PeekLock (default is ReceiveAndDelete).\n  $options = new ReceiveMessageOptions();\n  $options->setPeekLock(true);\n\n  // Receive message.\n  $message = $serviceBusRestProxy->receiveQueueMessage("myqueue", $options);\n  echo "Body: ".$message->getBody()."<br />";\n  echo "MessageID: ".$message->getMessageId()."<br />";\n\n  // *** Process message here ***\n\n  // Delete message.\n  $serviceBusRestProxy->deleteMessage($message);\n} catch(ServiceException $e){\n  $code = $e->getCode();\n  $error_message = $e->getMessage();\n  echo $code.": ".$error_message."<br />";\n}\n```\n\n## Service Bus Topics\n\n### Create a Topic\n\n```PHP\ntry {\n  // Create topic.\n  $topicInfo = new TopicInfo("mytopic");\n  $serviceBusRestProxy->createTopic($topicInfo);\n} catch(ServiceException $e){\n  $code = $e->getCode();\n  $error_message = $e->getMessage();\n  echo $code.": ".$error_message."<br />";\n}\n```\n\n### Create a subscription with the default (MatchAll) filter\n\n```PHP\ntry {\n  // Create subscription.\n  $subscriptionInfo = new SubscriptionInfo("mysubscription");\n  $serviceBusRestProxy->createSubscription("mytopic", $subscriptionInfo);\n} catch(ServiceException $e){\n  $code = $e->getCode();\n  $error_message = $e->getMessage();\n  echo $code.": ".$error_message."<br />";\n}\n```\n\n### Send a message to a topic\n\nMessages sent to Service Bus topics are instances of the **BrokeredMessage** class.\n\n```PHP\ntry {\n  // Create message.\n  $message = new BrokeredMessage();\n  $message->setBody("my message");\n\n  // Send message.\n  $serviceBusRestProxy->sendTopicMessage("mytopic", $message);\n} catch(ServiceException $e){\n  $code = $e->getCode();\n  $error_message = $e->getMessage();\n  echo $code.": ".$error_message."<br />";\n}\n```\n\n### Receive a message from a topic\n\nThe primary way to receive messages from a subscription is to use a **ServiceBusRestProxy->receiveSubscriptionMessage** method. Received messages can work in two different modes: **ReceiveAndDelete** (the default) and **PeekLock** similarly to Service Bus Queues.\n\nThe example below demonstrates how a message can be received and processed using **ReceiveAndDelete** mode (the default mode).\n\n```PHP\ntry {\n  // Set receive mode to PeekLock (default is ReceiveAndDelete)\n  $options = new ReceiveMessageOptions();\n  $options->setReceiveAndDelete();\n\n  // Get message.\n  $message = $serviceBusRestProxy->receiveSubscriptionMessage("mytopic",\n                                "mysubscription",\n                                $options);\n  echo "Body: ".$message->getBody()."<br />";\n  echo "MessageID: ".$message->getMessageId()."<br />";\n} catch(ServiceException $e){\n  $code = $e->getCode();\n  $error_message = $e->getMessage();\n  echo $code.": ".$error_message."<br />";\n}\n```\n\n## Service Management\n\n### Set-up certificates\n\nYou  need to create two certificates, one for the server (a .cer file) and one for the client (a .pem file). To create the .pem file using [OpenSSL](http://www.openssl.org), execute this:\n```\nopenssl req -x509 -nodes -days 365 -newkey rsa:1024 -keyout mycert.pem -out mycert.pem\n```\nTo create the .cer certificate, execute this:\n```\nopenssl x509 -inform pem -in mycert.pem -outform der -out mycert.cer\n```\n\n### List Available Locations\n\n```PHP\n$serviceManagementRestProxy->listLocations();\n$locations = $result->getLocations();\nforeach($locations as $location){\n      echo $location->getName()."<br />";\n}\n```\n\n### Create a Storage Service\n\nTo create a storage service, you need a name for the service (between 3 and 24 lowercase characters and unique within Microsoft Azure), a label (a base-64 encoded name for the service, up to 100 characters), and either a location or an affinity group. Providing a description for the service is optional.\n\n```PHP\n$name = "mystorageservice";\n$label = base64_encode($name);\n$options = new CreateStorageServiceOptions();\n$options->setLocation(\'West US\');\n\n$result = $serviceManagementRestProxy->createStorageService($name, $label, $options);\n```\n\n### Create a Cloud Service\n\nA cloud service is also known as a hosted service (from earlier versions of Microsoft Azure).  The **createHostedServices** method allows you to create a new hosted service by providing a hosted service name (which must be unique in Microsoft Azure), a label (the base 64-endcoded hosted service name), and a **CreateServiceOptions** object which allows you to set the location *or* the affinity group for your service.\n\n```PHP\n$name = "myhostedservice";\n$label = base64_encode($name);\n$options = new CreateServiceOptions();\n$options->setLocation(\'West US\');\n// Instead of setLocation, you can use setAffinityGroup to set an affinity group.\n\n$result = $serviceManagementRestProxy->createHostedService($name, $label, $options);\n```\n\n### Create a Deployment\n\nTo make a new deployment to Azure you must store the package file in a Microsoft Azure Blob Storage account under the same subscription as the hosted service to which the package is being uploaded. You can create a deployment package with the [Microsoft Azure PowerShell cmdlets](https://www.windowsazure.com/en-us/develop/php/how-to-guides/powershell-cmdlets/), or with the [cspack commandline tool](http://msdn.microsoft.com/en-us/library/windowsazure/gg432988.aspx).\n\n```PHP\n$hostedServiceName = "myhostedservice";\n$deploymentName = "v1";\n$slot = DeploymentSlot::PRODUCTION;\n$packageUrl = "URL_for_.cspkg_file";\n$configuration = file_get_contents(\'path_to_.cscfg_file\');\n$label = base64_encode($hostedServiceName);\n\n$result = $serviceManagementRestProxy->createDeployment($hostedServiceName,\n                         $deploymentName,\n                         $slot,\n                         $packageUrl,\n                         $configuration,\n                         $label);\n\n$status = $serviceManagementRestProxy->getOperationStatus($result);\necho "Operation status: ".$status->getStatus()."<br />";\n```\n\n## Media Services\n\n### Create new asset with file\n\nTo create an asset with a file you need to create an empty asset, create access policy with write permission, create a locator joining your asset and access policy, perform actual upload and generate file info.\n```PHP\n$asset = new Asset(Asset::OPTIONS_NONE);\n$asset = $restProxy->createAsset($asset);\n\n$access = new AccessPolicy(\'[Some access policy name]\');\n$access->setDurationInMinutes([Munites AccessPolicy is valid]);\n$access->setPermissions(AccessPolicy::PERMISSIONS_WRITE);\n$access = $restProxy->createAccessPolicy($access);\n\n$sasLocator = new Locator($asset,  $access, Locator::TYPE_SAS);\n$sasLocator->setStartTime(new \\DateTime(\'now -5 minutes\'));\n$sasLocator = $restProxy->createLocator($sasLocator);\n\n$restProxy->uploadAssetFile($sasLocator, \'[file name]\', \'[file content]\');\n$restProxy->createFileInfos($asset);\n```\n\n### Encode asset\n\nTo perform media file encoding you will need input asset ($inputAsset) with a file in it (something like in previous chapter). Also you need to create an array of task data objects and a job data object. To create a task object use a media processor, task XML body and configuration name.\n```PHP\n$mediaProcessor = $this->restProxy->getLatestMediaProcessor(\'[Media processor]\');\n\n$task = new Task(\'[Task XML body]\', $mediaProcessor->getId(), TaskOptions::NONE);\n$task->setConfiguration(\'[Configuration name]\');\n\n$restProxy->createJob(new Job(), array($inputAsset), array($task));\n```\n\n### Get public URL to encoded asset\n\nAfter you\xe2\x80\x99ve uploaded a media file and encode it you can get a download URL for that file or a streaming URL for multiple bitrate files. Create a new access policy with read permission and link it with job output asset via locator.\n\n```PHP\n$accessPolicy = new AccessPolicy(\'[Some access policy name]\');\n$accessPolicy->setDurationInMinutes([Munites AccessPolicy is valid]);\n$accessPolicy->setPermissions(AccessPolicy::PERMISSIONS_READ);\n$accessPolicy = $restProxy->createAccessPolicy($accessPolicy);\n\n// Download URL\n$sasLocator = new Locator($asset, $accessPolicy, Locator::TYPE_SAS);\n$sasLocator->setStartTime(new \\DateTime(\'now -5 minutes\'));\n$sasLocator = $restProxy->createLocator($sasLocator);\n\n// Azure needs time to publish media\nsleep(30);\n\n$downloadUrl = $sasLocator->getBaseUri() . \'/\' . \'[File name]\' . $sasLocator->getContentAccessComponent()\n\n// Streaming URL\n$originLocator = new Locator($asset, $accessPolicy, Locator::TYPE_ON_DEMAND_ORIGIN);\n$originLocator = $restProxy->createLocator($originLocator);\n\n// Azure needs time to publish media\nsleep(30);\n\n$streamingUrl = $originLocator->getPath() . \'[Manifest file name]\' . "/manifest";\n```\n\n### Manage media services entities\n\nMedia services CRUD operations are performed through media services rest proxy class. It has methods like \xe2\x80\x9ccreateAsset\xe2\x80\x9d, \xe2\x80\x9ccreateLocator\xe2\x80\x9d, \xe2\x80\x9ccreateJob\xe2\x80\x9d and etc. for entities creations.\n\nTo retrieve all entities list you may use methods \xe2\x80\x9cgetAssetList\xe2\x80\x9d, \xe2\x80\x9cgetAccessPolicyList\xe2\x80\x9d, \xe2\x80\x9cgetLocatorList\xe2\x80\x9d, \xe2\x80\x9cgetJobList\xe2\x80\x9d and etc. For getting single entity data use methods \xe2\x80\x9cgetAsset\xe2\x80\x9d, \xe2\x80\x9cgetJob\xe2\x80\x9d, \xe2\x80\x9cgetTask\xe2\x80\x9d and etc. passing the entity identifier or entity data model object with non-empty identifier as a parameter.\n\nUpdate entities with methods like \xe2\x80\x9cupdateLocator\xe2\x80\x9d, \xe2\x80\x9cupdateAsset\xe2\x80\x9d, \xe2\x80\x9cupdateAssetFile\xe2\x80\x9d and etc. passing the entity data model object as a parameter. It is important to have valid entity identifier specified in data model object.\n\nErase entities with methods like \xe2\x80\x9cdeleteAsset\xe2\x80\x9d, \xe2\x80\x9cdeleteAccessPolicy\xe2\x80\x9d, \xe2\x80\x9cdeleteJob\xe2\x80\x9d and etc. passing the entity identifier or entity data model object with non-empty identifier as a parameter.\n\nAlso you could get linked entities with methods \xe2\x80\x9cgetAssetLocators\xe2\x80\x9d, \xe2\x80\x9cgetAssetParentAssets\xe2\x80\x9d, \xe2\x80\x9cgetAssetStorageAccount\xe2\x80\x9d, \xe2\x80\x9cgetLocatorAccessPolicy\xe2\x80\x9d, \xe2\x80\x9cgetJobTasks\xe2\x80\x9d and etc. passing the entity identifier or entity data model object with non-empty identifier as a parameter.\n\nThe complete list of all methods available you could find in [IMediaServices](src/MediaServices/Internal/IMediaServices.php) interface.\n\n**For more examples please see the [Microsoft Azure PHP Developer Center](http://www.windowsazure.com/en-us/develop/php)**\n\n# Need Help?\n\nBe sure to check out the Microsoft Azure [Developer Forums on Stack Overflow](http://go.microsoft.com/fwlink/?LinkId=234489) if you have trouble with the provided code.\n\n# Contribute Code or Provide Feedback\n\nIf you would like to become an active contributor to this project please follow the instructions provided in [Microsoft Azure Projects Contribution Guidelines](http://windowsazure.github.com/guidelines.html).\n\nTo setup your development environment, follow the instructions in this [wiki page](https://github.com/Azure/azure-sdk-for-php/wiki/Devbox-installation-guide).\n\nIf you encounter any bugs with the library please file an issue in the [Issues](https://github.com/Azure/azure-sdk-for-php/issues) section of the project.\n\n# Learn More\n[Microsoft Azure PHP Developer Center](http://www.windowsazure.com/en-us/develop/php/)\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or\ncontact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n'