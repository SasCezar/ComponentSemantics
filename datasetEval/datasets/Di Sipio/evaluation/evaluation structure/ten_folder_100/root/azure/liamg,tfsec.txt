b'<p align="center">\n  <img width="463" src="./logo.png">\n</p>\n\n# tfsec\n\n[![Travis Build Status](https://travis-ci.org/liamg/tfsec.svg?branch=master)](https://travis-ci.org/liamg/tfsec)\n[![GoReportCard](https://goreportcard.com/badge/github.com/liamg/tfsec)](https://goreportcard.com/report/github.com/liamg/tfsec)\n[![Open Source Helpers](https://www.codetriage.com/liamg/tfsec/badges/users.svg)](https://www.codetriage.com/liamg/tfsec)\n[![Github Release](https://img.shields.io/github/release/liamg/tfsec.svg)](https://github.com/liamg/tfsec/releases)\n[![GitHub All Releases](https://img.shields.io/github/downloads/liamg/tfsec/total)](https://github.com/liamg/tfsec/releases)\n\ntfsec uses static analysis of your terraform templates to spot potential\nsecurity issues. Now with terraform v0.12+ support.\n\n## Example Output\n\n![Example screenshot](screenshot.png)\n\n## Installation\n\nInstall with brew/linuxbrew:\n\n```bash\nbrew tap liamg/tfsec\nbrew install liamg/tfsec/tfsec\n```\n\nYou can also grab the binary for your system from the [releases page](https://github.com/liamg/tfsec/releases).\n\nAlternatively, install with Go:\n\n```bash\nenv GO111MODULE=on go get -u github.com/liamg/tfsec/cmd/tfsec\n```\n\n## Usage\n\ntfsec will recursively scan the specified directory. If no directory is\nspecified, the current working directory will be used.\n\nThe exit status will be non zero if problems are found, otherwise the\nexit status will be zero.\n\n```bash\ntfsec .\n```\n\n## Use with Docker\n\nAs an alternative to installing and running tfsec on your system, you may\nrun tfsec in a Docker container.\n\nTo build:\n\n```bash\ndocker build -t tfsec .\n```\n\nTo run:\n\n```bash\ndocker run --rm -it -v "$(pwd):/workdir" tfsec .\n```\n\n## Features\n\n- Checks for sensitive data inclusion across all providers\n- Checks for violations of AWS, Azure and GCP security best practice recommendations\n- Scans modules (currently only local modules are supported)\n- Evaluates expressions as well as literal values\n\n## Ignoring Warnings\n\nYou may wish to ignore some warnings. If you\'d like to do so, you can\nsimply add a comment containing `tfsec:ignore:<CODE>` to the offending\nline in your templates. If the problem refers to a block of code, such\nas a multiline string, you can add the comment on the line above the\nblock, by itself.\n\nFor example, to ignore an open security group rule:\n\n```hcl\nresource "aws_security_group_rule" "my-rule" {\n    type = "ingress"\n    cidr_blocks = ["0.0.0.0/0"] #tfsec:ignore:AWS006\n}\n```\n\n...or...\n\n```hcl\nresource "aws_security_group_rule" "my-rule" {\n    type = "ingress"\n    #tfsec:ignore:AWS006\n    cidr_blocks = ["0.0.0.0/0"]\n}\n```\n\nIf you\'re not sure which line to add the comment on, just check the\ntfsec output for the line number of the discovered problem.\n\n## Included Checks\n\nCurrently, checks are mostly limited to AWS/Azure/GCP resources, but\nthere are also checks which are provider agnostic.\n\n| Code    | Provider | Description |\n|---------|----------|-------------|\n| GEN001  | *        | Potentially sensitive data stored in "default" value of variable.\n| GEN002  | *        | Potentially sensitive data stored in local value.\n| GEN003  | *        | Potentially sensitive data stored in block attribute.\n| AWS001  | aws      | S3 Bucket has an ACL defined which allows public access.\n| AWS002  | aws      | S3 Bucket does not have logging enabled.\n| AWS003  | aws      | AWS Classic resource usage.\n| AWS004  | aws      | Use of plain HTTP.\n| AWS005  | aws      | Load balancer is exposed to the internet.\n| AWS006  | aws      | An ingress security group rule allows traffic from `/0`.\n| AWS007  | aws      | An egress security group rule allows traffic to `/0`.\n| AWS008  | aws      | An inline ingress security group rule allows traffic from `/0`.\n| AWS009  | aws      | An inline egress security group rule allows traffic to `/0`.\n| AWS010  | aws      | An outdated SSL policy is in use by a load balancer.\n| AWS011  | aws      | A resource is marked as publicly accessible.\n| AWS012  | aws      | A resource has a public IP address.\n| AWS013  | aws      | Task definition defines sensitive environment variable(s).\n| AWS014  | aws      | Launch configuration with unencrypted block device.\n| AWS015  | aws      | Unencrypted SQS queue.\n| AWS016  | aws      | Unencrypted SNS topic.\n| AWS017  | aws      | Unencrypted S3 bucket.\n| AWS018  | aws      | Missing description for security group/security group rule.\n| AZU001  | azurerm  | An inbound network security rule allows traffic from `/0`.\n| AZU002  | azurerm  | An outbound network security rule allows traffic to `/0`.\n| AZU003  | azurerm  | Unencrypted managed disk.\n| AZU004  | azurerm  | Unencrypted data lake store.\n| AZU005  | azurerm  | Password authentication in use instead of SSH keys.\n| GCP001  | google   | Unencrypted compute disk.\n| GCP002  | google   | Unencrypted storage bucket.\n| GCP003  | google   | An inbound firewall rule allows traffic from `/0`.\n| GCP004  | google   | An outbound firewall rule allows traffic to `/0`.\n\n## Running in CI\n\ntfsec is designed for running in a CI pipeline. For this reason it will\nexit with a non-zero exit code if a potential problem is detected.\nYou may wish to run tfsec as part of your build without coloured\noutput. You can do this using `--no-colour` (or `--no-color` for our\nAmerican friends).\n\n## Support for older terraform versions\n\nIf you need to support versions of terraform which use HCL v1\n(terraform <0.12), you can use `v0.1.3` of tfsec, though support is\nvery limited and has fewer checks.\n'