b"# gulp-shell\n\n[![NPM version](https://img.shields.io/npm/v/gulp-shell.svg)](https://npmjs.org/package/gulp-shell)\n[![Build Status](https://img.shields.io/travis/sun-zheng-an/gulp-shell/master.svg)](https://travis-ci.org/sun-zheng-an/gulp-shell)\n[![Coveralls Status](https://img.shields.io/coveralls/sun-zheng-an/gulp-shell/master.svg)](https://coveralls.io/r/sun-zheng-an/gulp-shell)\n[![Dependency Status](https://img.shields.io/david/sun-zheng-an/gulp-shell.svg)](https://david-dm.org/sun-zheng-an/gulp-shell)\n[![Downloads](https://img.shields.io/npm/dm/gulp-shell.svg)](https://npmjs.org/package/gulp-shell)\n\n> A handy command line interface for gulp\n\n## Installation\n\n```shell\nnpm install --save-dev gulp-shell\n```\n\n## Usage\n\n```js\nconst gulp = require('gulp')\nconst shell = require('gulp-shell')\n\ngulp.task('example', () => {\n  return gulp\n    .src('*.js', { read: false })\n    .pipe(shell(['echo <%= file.path %>']))\n})\n```\n\nOr you can use this shorthand:\n\n```js\ngulp.task('greet', shell.task('echo Hello, World!'))\n```\n\nYou can find more examples in the [gulpfile](https://github.com/sun-zheng-an/gulp-shell/blob/master/gulpfile.ts) of this project.\n\n**WARNING**: Running commands like ~~`gulp.src('').pipe(shell('whatever'))`~~ is [considered as an anti-pattern](https://github.com/sun-zheng-an/gulp-shell/issues/55). **PLEASE DON'T DO THAT ANYMORE**.\n\n## API\n\n### shell(commands, options) or shell.task(commands, options)\n\n#### commands\n\ntype: `string` or `Array<string>`\n\nA command can be a [template][] which can be interpolated by some [file][] info (e.g. `file.path`).\n\n**WARNING**: [Using command templates can be extremely dangerous](https://github.com/sun-zheng-an/gulp-shell/issues/83). Don't shoot yourself in the foot by ~~passing arguments like `$(rm -rf $HOME)`~~.\n\n#### options.cwd\n\ntype: `string`\n\ndefault: [`process.cwd()`](http://nodejs.org/api/process.html#process_process_cwd)\n\nSets the current working directory for the command. This can be a [template][] which can be interpolated by some [file][] info (e.g. `file.path`).\n\n#### options.env\n\ntype: `object`\n\nBy default, all the commands will be executed in an environment with all the variables in [`process.env`](http://nodejs.org/api/process.html#process_process_env) and `PATH` prepended by `./node_modules/.bin` (allowing you to run executables in your Node's dependencies).\n\nYou can override any environment variables with this option.\n\nFor example, setting it to `{ PATH: process.env.PATH }` will reset the `PATH` if the default one brings your some troubles.\n\n#### options.shell\n\ntype: `string`\n\ndefault: `/bin/sh` on UNIX, and `cmd.exe` on Windows\n\nChange it to `bash` if you like.\n\n#### options.quiet\n\ntype: `boolean`\n\ndefault: `false`\n\nBy default, it will print the command output.\n\n#### options.verbose\n\ntype: `boolean`\n\ndefault: `false`\n\nSet to `true` to print the command(s) to stdout as they are executed\n\n#### options.ignoreErrors\n\ntype: `boolean`\n\ndefault: `false`\n\nBy default, it will emit an `error` event when the command finishes unsuccessfully.\n\n#### options.errorMessage\n\ntype: `string`\n\ndefault: `` Command `<%= command %>` failed with exit code <%= error.code %> ``\n\nYou can add a custom error message for when the command fails.\nThis can be a [template][] which can be interpolated with the current `command`, some [file][] info (e.g. `file.path`) and some error info (e.g. `error.code`).\n\n#### options.templateData\n\ntype: `object`\n\nThe data that can be accessed in [template][].\n\n[template]: http://lodash.com/docs#template\n[file]: https://github.com/wearefractal/vinyl\n\n## Changelog\n\nDetails changes for each release are documented in the [release notes](https://github.com/sun-zheng-an/gulp-shell/releases).\n"