b'[![WordPressify Logo](https://i.imgur.com/5dVJS70.png)](http://www.wordpressify.co/)\n\n![Version](https://img.shields.io/github/package-json/v/luangjokaj/wordpressify) [![Dependencies](https://david-dm.org/luangjokaj/wordpressify/status.svg)](https://david-dm.org/luangjokaj/wordpressify)\n\nA build system designed to automate your WordPress development workflow.\n\nhttp://www.wordpressify.co/\n\n- [Introduction](#introduction)\n\t- [Features](#features)\n- [1. Installing Node](#1-installing-node)\n- [2. Set Up Project](#2-set-up-project)\n\t- [Install WordPressify from NPM](#install-wordpressify-from-npm)\n\t- [Install WordPressify from Repository](#install-wordpressify-from-repository)\n- [3. CSS, PostCSS and Sass](#3-css-postcss-and-sass)\n\t- [PostCSS](#postcss)\n\t- [Sass](#sass)\n- [4. Images and Fonts](#4-images-and-fonts)\n\t- [Images](#images)\n\t- [Fonts](#fonts)\n- [5. JavaScript ES6](#5-javascript-es6)\n\t- [Write ES6 JavaScript](#write-es6-javascript)\n- [6. External Libraries](#6-external-libraries)\n- [7. Build Backups](#7-build-backups)\n- [8. Code Style Rules](#8-code-style-rules)\n\t- [Lint CSS](#lint-css)\n- [9. Database](#9-database)\n\t- [MySQL/MariaDB Server](#mysqlmariadb-server)\n\t- [Remote Database](#remote-database)\n- [10. Deployment](#10-deployment)\n\t- [Automated Deployments](#automated-deployments)\n- [11. Cleanup Default Theme](#11-cleanup-default-theme)\n- [12. Windows Installation](#12-windows-installation)\n- [Changelog](#changelog)\n- [License](#license)\n\n## Introduction\nWordPressify is a modern workflow for your WordPress development, with an integrated web server and auto-reload. CSS preprocessors and ES6 ready.\n\n## Features\n|\xf0\x9f\x91\x87|Includes|\n|:-:|:---|\n|\xf0\x9f\x93\xa6| Dev Server|\n|\xf0\x9f\x94\xa5| Hot Reload & CSS Injection|\n|\xf0\x9f\x8e\xa8| PostCSS & Next Generation CSS|\n|\xe2\x9a\x99| Babel 7 - ES6 JavaScript|\n|\xe2\x9c\x82\xef\xb8\x8f| Source Maps|\n|\xf0\x9f\x8e\x92| Code Minification|\n|\xf0\x9f\x8c\x88| Image Compression|\n|\xf0\x9f\xa4\x96| External Libraries|\n|\xf0\x9f\x9b\x8e| Production ready ZIP theme|\n\nWordPressify comes with a development server for PHP running under a proxy with BrowserSync. Watches for all your changes and reloads the webpage in real-time. Style are preprocessors with PostCSS or Sass. Babel compiler for writing next-generation JavaScript. Source maps are supported for both CSS and JavaScript. WordPressify allows easy import of external JavaScript libraries and npm scripts, it has a flexible build and can be easily customized with gulp tasks.\n\n# 1. Installing Node\nWordPressify requires Node v7.5+. This is the only global dependency. You can download Node **[here](https://nodejs.org/)**.\n\nNode.js is a JavaScript runtime built on Chrome\xe2\x80\x99s V8 JavaScript engine. Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient. Node.js\xe2\x80\x99 package ecosystem, npm, is the largest ecosystem of open source libraries in the world.\n\n# 2. Set Up Project\n## File Structure\n```\n    \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 build/                   # Build files\n    \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 dist/                    # Distribution files\n    \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 src/                     # Source files\n    \xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 assets/              # Assets directory\n    \xe2\x94\x82       \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 css/             # CSS files\n    \xe2\x94\x82       \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 fonts/           # Fonts directory\n    \xe2\x94\x82       \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 img/             # Image directory\n    \xe2\x94\x82       \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 js/              # JavaScript files\n    \xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 plugins/             # WordPress plugins\n    \xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 theme/               # PHP Template files\n    \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 .babelrc                 # Babel configuration\n    \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 .gitignore               # Git ignored files\n    \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 .stylelintrc             # Stylelint configuration file\n    \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 gulpfile.js              # Gulp configuration\n    \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 LICENSE                  # License agreements\n    \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 package-lock.json        # Packages lock file\n    \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 package.json             # Node packages\n    \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 README.md                # You are reading this\n```\n\n## Install WordPressify from NPM\nTo install WordPressify from NPM, run the command:\n```\nsudo npm i wordpressify -g\n```\n\n**START WORDPRESSIFY**\n\n- Create a directory for the new WordPress website and from there run WordPressify to generate the file structure:\n```\nwordpressify\n```\n\n## Install WordPressify from Repository\nTo install WordPressify you need to clone the repository from GitHub:\n```\ngit clone https://github.com/luangjokaj/wordpressify\n```\n- This will clone the repository on your local machine. Navigate to the newly created folder.\n\n- Replace the file: `./package.json` with `./installer/package.json` and continue with the dependency installation.\n\n**INSTALL DEPENDENCIES**\n\n```\nnpm install\n```\n\n**CHANGE TEMPLATE NAME**\n\n- At this point WordPressify is installed and ready to be used for the first time. Before starting, open **gulpfile.js** and edit your template name:\n```javascript\n/* -------------------------------------------------------------------------------------------------\nTheme Name\n ------------------------------------------------------------------------------------------------- */\nconst themeName = \'wordpressify\';\n//--------------------------------------------------------------------------------------------------\n```\n\n**INSTALL WORDPRESS**\n\n- On the first run we need to install WordPress, we do this once by running the command:\n```\nnpm run install:wordpress\n```\n\n- It will fetch the latest WordPress version, which is the build we use for the development server.\n\n**START WORKFLOW**\n\n- We are ready to start our development server with the command:\n```\nnpm run dev\n```\n\n- If you are running a fresh instance of WordPress, the installation wizard will set up a **wp-config.php** file containing database credentials, site name etc.\n- You are ready to go! Happy coding!\n\n**WORDPRESS PLUGINS**\n\n- If you want to add or build WordPress plugins, you can do that from the directory:\n```\nsrc/plugins/\n```\n\n**PRODUCTION TEMPLATE**\n\n- To generate your distribution files run the command:\n```\nnpm run prod\n```\n\n- The template will be saved as a zip file in:\n```\ndist/wordpressify.zip\n```\n\n**WINDOWS USERS**\n- If you are running Windows, PHP has to be installed and configured. Check the [gulp-connect-php](https://www.npmjs.com/package/gulp-connect-php) documentation. \n\nWe prepared a video screencast **demonstrating the installation processs using a Windows** operating system, you can find it here: [How to install WordPressify on Windows?](https://www.wordpressify.co/windows-installation/)\nOr check out this tutorial on [Medium](https://medium.com/@marcus.supernova/how-to-install-wordpressify-on-windows-4b78a801165b).\n\n# 3. CSS, PostCSS and Sass\n## PostCSS\nBy default WordPressify supports [PostCSS](http://postcss.org/), a similar preprocessor to Sass, Less and others but with more functionality. On top of that PostCSS is 3x faster than Sass and 4x faster than Less. Features come in the shape of PostCSS plugins. Think of these like using Lego, where each piece is a different feature that can transform your CSS in some way. PostCSS lets you stick these pieces together so that you can build up your own feature set, adding and removing plugins as and when you need them. [postcss-preset-env](https://preset-env.cssdb.org//) is installed by default. Read more about PostCSS [here](https://ashleynolan.co.uk/blog/postcss-a-review).\n\n**POSTCSS PLUGINS**\n\nWordPressify has two different sets of PostCSS plugins - one for the development environment (pluginsListDev) and one for the production task (pluginsListProd).\n```javascript\n//--------------------------------------------------------------------------------------------------\n/* -------------------------------------------------------------------------------------------------\nPostCSS Plugins\n ------------------------------------------------------------------------------------------------- */\nconst pluginsListDev = [\n\tpartialimport,\n\tpostCSSMixins,\n\tpostcssPresetEnv({\n\t\tstage: 0,\n\t\tfeatures: {\n\t\t\t\'nesting-rules\': true,\n\t\t\t\'color-mod-function\': true,\n\t\t\t\'custom-media\': true,\n\t\t},\n\t}),\n];\n\nconst pluginsListProd = [\n\tpartialimport,\n\tpostCSSMixins,\n\tpostcssPresetEnv({\n\t\tstage: 0,\n\t\tfeatures: {\n\t\t\t\'nesting-rules\': true,\n\t\t\t\'color-mod-function\': true,\n\t\t\t\'custom-media\': true,\n\t\t},\n\t}),\n\trequire(\'cssnano\')({\n\t\tpreset: [\'default\', {\n\t\t\tdiscardComments: false,\n\t\t}]\n\t}),\n];\n//--------------------------------------------------------------------------------------------------\n```\n\n**WRITING CSS**\n\nThe starting point for CSS is the file:\n```\nsrc/assets/css/style.css\n```\n\nThe template definitions are located here too. It is also where all other imports are included in the stylesheets.\n```\n/*\nTheme Name: WordPressify\nTheme URI: https://www.wordpressify.co\nAuthor: Luan Gjokaj\nAuthor URI: https://www.riangle.com\nDescription: WordPressify official theme.\nVersion: 1.0\nTags: responsive, clean, minimal, modern, documentation\n*/\n```\n\n## Sass\nWordPressify is super flexible. You can install Sass and use it as the main CSS preprocessor:\n```\nnpm install gulp-sass --save-dev\n````\n\nInclude Sass in gulpfile.js:\n```javascript\nconst sass = require(\'gulp-sass\');\n````\n\nChange the gulp tasks stylesDev to:\n```javascript\nfunction stylesDev() {\n\treturn src(\'./src/assets/css/style.scss\')\n\t\t.pipe(sourcemaps.init())\n\t\t.pipe(sass({includePaths: \'node_modules\'}).on("error", sass.logError))\n\t\t.pipe(sourcemaps.write(\'.\'))\n\t\t.pipe(dest(\'./build/wordpress/wp-content/themes/\' + themeName))\n\t\t.pipe(browserSync.stream({ match: \'**/*.css\' }));\n}\n```\n\nAlso the watch task has to be changed in order to watch for .scss filetypes:\n```javascript\nwatch(\'./src/assets/css/**/*.scss\', stylesDev);\n```\n\nChange the gulp tasks styleProd to:\n```javascript\nfunction stylesProd() {\n\treturn src(\'./src/assets/css/style.scss\')\n\t\t.pipe({includePaths: \'node_modules\'}).on("error", sass.logError)\n\t\t.pipe(dest(\'./dist/themes/\' + themeName));\n}\n```\n\n# 4. Images and Fonts\n## Images\nIt is recommended to store template image assets in your theme directory:\n```\nsrc/assets/img/\n```\n\nIdeally other images should be managed through the [Media Library](https://codex.wordpress.org/Media_Library_Screen) of WordPress. Try to only store SVG or minimal assets in your theme directory to keep the template as light as possible.\n\nIn the production build SVGs and other image assets will go through a **minification** process.\n\n## Fonts\nFonts are always special. Your fonts should be stored in:\n```\nsrc/assets/fonts/\n```\n\nThen you can include them in your **CSS**:\n```css\n@font-face {\n\tfont-family: \'Helvetica Neue Thin\';\n\tsrc: url(\'./fonts/Helvetica-Neue-Thin.eot\');\n\tsrc: url(\'./fonts/Helvetica-Neue-Thin.eot\') format(\'eot\'),\n\turl(\'./fonts/Helvetica-Neue-Thin.woff2\') format(\'woff2\'),\n\turl(\'./fonts/Helvetica-Neue-Thin.woff\') format(\'woff\'),\n\turl(\'./fonts/Helvetica-Neue-Thin.ttf\') format(\'truetype\'),\n\turl(\'./fonts/Helvetica-Neue-Thin.svg\') format(\'svg\');\n}\n```\n\n# 5. JavaScript ES6\nWordPressify supports ES6 JavaScript with [Babel](https://babeljs.io/). Babel has support for the latest version of JavaScript through syntax transformers. These plugins allow you to use new syntax, right now without waiting for browser support.\n\n## Write ES6 JavaScript\nYour JavaScript code should be located in:\n```\nsrc/assets/js/\n```\n\nWordPressify will watch for changes under the js directory and bundle the code in a single file, which will be included in the footer of the page as:\n```\nfooter-bundle.js\n```\n\nCheck the gulp configuration to learn more about how JavaScript is generated.\n\n# 6. External Libraries\nIncluding external JavaScript libraries is as simple as installing the npm script and including it in the **gulpfile.js**\n```javascript\n/* -------------------------------------------------------------------------------------------------\nHeader & Footer JavaScript Boundles\n-------------------------------------------------------------------------------------------------- */\nconst headerJS = [\n\t\'./node_modules/jquery/dist/jquery.js\',\n\t\'./node_modules/nprogress/nprogress.js\',\n\t\'./node_modules/aos/dist/aos.js\',\n\t\'./node_modules/isotope-layout/dist/isotope.pkgd.js\'\n];\nconst footerJS = [\n\t\'./src/assets/js/**\'\n];\n//--------------------------------------------------------------------------------------------------\n```\n\nYou can include the scripts in the head of the page before the DOM is loaded by placing them in the **headerJS** array or in the footer of the page after the DOM is loaded in the **footerJS** array. Only footer scripts are processed with Babel thus supporting ES6, however you can change this in the configuration if you want to run both header and footer scripts with Babel.\n\nA build restart is required for changes to take effect.\n\n# 7. Build Backups\nWhile coding you will find yourself uploading dummy content to the WordPress build server, e.g. images or other media stored in **wp-content**. WordPressify allows you to back up the current state of the build which will include all server files. To back up your build run the command:\n```\nnpm run backup\n```\n\nFiles will be compressed in a zip file and stored in the directory:\n```\nbackups/\n```\n\n# 8. Code Style Rules\nWordPressify comes with its own set of code style rules:\n```\n.stylelintrc\n```\n\n## Lint CSS\nBefore pushing changes make sure you have clean and consistent CSS. Run [stylelint](https://stylelint.io/) with the command:\n```\nnpm run lint:css\n```\n\n# 9. Database\n## MySQL/MariaDB Server\nAfter installing WordPressify you will still need a database to store WordPress content. The recommended solution is to install either [MySQL](https://dev.mysql.com/downloads/mysql/) ([installation instructions](https://dev.mysql.com/doc/refman/5.7/en/installing.html)) or [MariaDB](https://mariadb.com/downloads/mariadb-tx) ([installation instructions](https://mariadb.com/products/get-started)) on your local machine.\n\n## Remote Database\nYou are free to use remote databases. Please note that this will affect the speed depending on the connection.\n\n# 10. Deployment\nThe recommended solution is to go with [WP Pusher](https://wppusher.com/). It is easy and quick to deploy automatically from GitHub or other services. The first step is to download the WordPress plugin from: https://wppusher.com/\n\nThen navigate to your WordPress administration on your live site and install the downloaded plugin: Plugins -> Add New -> Upload Plugin -> Install Now.\n\nActivate the plugin and navigate to the plugin page **WP Pusher**. Click on the GitHub or any other tab and obtain a token by pressing the button on the page, then copy and save the token.\n\nAt this point go to your terminal, navigate to your WordPressify project and generate your distribution files with the command:\n```\nnpm run prod\n```\n\nNavigate to your theme distribution files on: \n```\ndist/theme/<themeName>\n```\n\nCreate a git repository and push all the files on GitHub. This repository will have only the theme distribution files.\n\nOnce the files are on GitHub you can get back to the WordPress administration on the WP Pusher plugin page and follow the **Next Steps**, click on **Install a theme**.\n\nOn Repository host we choose GitHub, then click on **Pick from GitHub** and choose the newly created repository with the distribution files. Then install & activate the theme.\n\n## Automated Deployments\n**Push-to-Deploy** if you want automatic deployments to happen when you do a push to the distribution repository.\nIn this case you have to create a Webhook from your GitHub\'s repository page. \n\nFirst navigate to the WP Pusher plugin page and click on **Themes**, it will show you the list of the templates you have installed through the plugin itself. Click on **Show Push-to-Deploy URL** to get the Payload URL. \n\nNow get back to GitHub and navigate to your distribution repository and click on: Settings -> Webhooks -> Add webhook. Now past the URL and click **Add webhook**. \n\nThis should enable automatic deployment on any push to the chosen GitHub repository.\n\n**Note:** WP Pusher if **free** only with **public** repositories.\n\n# 11. Cleanup Default Theme\nThe default theme comes as a theme sample to show how WordPressify combines everything together. If you want to remove the default theme type the command:\n```\nnpm run fresh-start\n```\n\nThis will **immediately** remove the default styles and leave a minimal viable theme with basic PHP WordPress loops and other useful features.\n\n# 12. Windows Installation\n**[How to install WordPressify on Windows?](https://www.youtube.com/watch?v=J8ZNzKSeTSE)**\n\nAssuming that you are using the latest version of Windows, and you have activated Windows Subsystem for Linux. Follow the instructions:\n\n### Install lamp for PHP and MySQL\nFirst refresh your package index:\n```\nsudo apt-get update\n```\n\nThen install the LAMP stack:\n```\nsudo apt-get install lamp-server^\n```\n\nFor more informations check out: https://help.ubuntu.com/community/ApacheMySQLPHP\n\n### Start MySQL\n```\nsudo service mysql start\n```\n\nNow let\'s connect to the MySQL Server:\n```\nsudo mysql\n```\n\nChange the **root** password to "123456789":\n```\nALTER USER \'root\'@\'localhost\' IDENTIFIED WITH mysql_native_password BY \'123456789\';\n```\n\nReload privileges:\n```\nFLUSH PRIVILEGES;\n```\n\n### Install Node\n```\ncurl -sL https://deb.nodesource.com/setup_11.x | sudo -E bash -\n```\n\n```\nsudo apt-get install -y nodejs\n```\n\nThat\'s it. Now just follow the WordPressify installation instructions.\n\n# Changelog\n**v0.2.8**\n- \xf0\x9f\x9a\x80 RELEASE: Add ESLint with WordPress code standards rules.\n\n**v0.2.7**\n- \xf0\x9f\x9a\x80 RELEASE: Update version.\n- \xf0\x9f\x90\x9b FIX: Readme documentation on install.\n- \xf0\x9f\x90\x9b FIX: Cron jobs new formatting.\n\n**v0.2.6**\n- \xf0\x9f\x9a\x80 RELEASE: Install files from versioned release instead of `master` branch.\n\n**v0.2.5**\n- \xf0\x9f\x91\x8c IMPROVE: Install only required dependencies.\n- \xf0\x9f\x9a\x80 RELEASE: Update dependencies.\n\n**v0.2.4**\n- \xf0\x9f\x93\x96 DOC: Improve documentation.\n\n**v0.2.3**\n- \xf0\x9f\x9a\x80 RELEASE: Improved installation speed for global dependencies.\n- BREAKING CHANGE: It is required to update WordPressify: `sudo npm install wordpressify -g`.\n\n**v0.2.2**\n- \xf0\x9f\x91\x8c IMPROVE: Meta.\n\n**v0.2.1**\n- \xf0\x9f\x9a\x80 RELEASE: Update dependencies.\n\n**v0.2.0**\n- \xf0\x9f\x90\x9b FIX: Typo.\n\n**v0.1.9**\n- \xf0\x9f\x90\x9b FIX: Dependencies.\n\n**v0.1.8**\n- \xf0\x9f\x93\xa6 NEW: Run WordPressify globally from NPM.\n\n**v0.1.7**\n- \xf0\x9f\x9a\x80 RELEASE: Remove WordPressify template from main repository.\n- \xf0\x9f\x91\x8c IMPROVE: Simple & unstyled boilerplate code. Stay fresh!\n\n**v0.1.6**\n- \xf0\x9f\x93\xa6 NEW: Upgrade to Gulp 4.\n- \xf0\x9f\x93\xa6 NEW: Rewrote all tasks into functions.\n- \xf0\x9f\x91\x8c IMPROVE: Updated file structure.\n\n**v0.1.5**\n- \xf0\x9f\x93\xa6 NEW: Upgrade to Babel 7\n- \xf0\x9f\x90\x9b FIX: Removed deprecated `postcss-cssnext` in favor of `postcss-preset-env`.\n\n**v0.1.4**\n- \xf0\x9f\x91\x8c IMPROVE: Added cleanup command to flush the default theme and have a fresh start.\n\n**v0.1.3**\n- \xf0\x9f\x91\x8c IMPROVE: Added support for bitmap and SVG minification, in the production build.\n- \xf0\x9f\x93\x96 DOC: Added documentation for deployment process.\n\n**v0.1.2**\n- \xf0\x9f\x91\x8c IMPROVE: Converted all variables from \'var\' to \'const\'.\n- \xf0\x9f\x91\x8c IMPROVE: Replaced long anonymous function with ES6 arrow syntax.\n- \xf0\x9f\x90\x9b FIX: Spelling errors.\n\n**v0.1.1**\n- \xf0\x9f\x93\xa6 NEW: Added support for `src/plugins`.\n\n**v0.1.0**\n- \xf0\x9f\x91\x8c IMPROVE: Code readability.\n- \xf0\x9f\x91\x8c IMPROVE: Removed unused packages.\n- \xf0\x9f\x93\xa6 NEW: Build success and error messages.\n- \xf0\x9f\x91\x8c IMPROVE: Tasks cleanup.\n\n**v0.0.9**\n- \xf0\x9f\x93\x96 DOC: Update documentation.\n\n**v0.0.8**\n- \xf0\x9f\x91\x8c IMPROVE: Name change.\n\n**v0.0.7**\n- \xf0\x9f\x90\x9b FIX: Fix placemente of `DISABLE_WP_CRON`.\n\n**v0.0.6**\n- \xf0\x9f\x91\x8c IMPROVE: Theme cleanup.\n- \xf0\x9f\x91\x8c IMPROVE: Consistent code styles.\n\n**v0.0.5**\n- \xf0\x9f\x90\x9b FIX: Activated `DISABLE_WP_CRON` to prevent Node freezing.\n- \xf0\x9f\x9a\x80 RELEASE: Back up your build files with all `wp-content` uploads.\n\n**v0.0.4**\n- \xf0\x9f\x90\x9b FIX: Whitelabel template.\n- \xf0\x9f\x90\x9b FIX: Renamed classes.\n- \xf0\x9f\x91\x8c IMPROVE: Refactored CSS structure.\n- \xf0\x9f\x93\xa6 NEW: Meet WordPressify.\n\n**v.0.0.3**\n- \xf0\x9f\x91\x8c IMPROVE: Simplified build logic.\n- \xf0\x9f\x91\x8c IMPROVE: Install WordPress only once with `npm run install:wordpress`.\n- \xf0\x9f\x91\x8c IMPROVE: Cleaner distribution task.\n\n**v0.0.2**\n- \xf0\x9f\x90\x9b FIX: Bugfixes.\n- \xf0\x9f\x93\xa6 NEW: Watch and store new content in `wp-content/uploads`.\n\n# License\nMIT\n'