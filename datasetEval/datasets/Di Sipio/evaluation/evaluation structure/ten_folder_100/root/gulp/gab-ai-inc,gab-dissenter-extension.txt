b'# Dissenter Browser Extension\n\nThis repository holds the Dissenter Browser Extension code that is used to generate the final distribution code per each browser.\n\nFor more information, please visit: https://dissenter.com\n\n# \xe2\x80\xa2 Download the Dissenter Browser Extension\n\nPlease head over to https://dissenter.com/download to download the extension for your specific browser and view detailed installation instructions.\n\n# \xe2\x80\xa2 Installation\n\nLatest versions:\n\n| Browser | Version |\n| --- | --- |\nChrome | v0.1.9 |\nEdge | v0.1.8 |\nFirefox | v0.1.10 |\nSafari | v0.1.7 |\n\nThis extension only requires developer dependencies.\n\nClone or download the repository and then:\n`$ npm install`\n\n# \xe2\x80\xa2 Overview\n\nThis is meant to help anyone understand this repository, where everything lives and what everything does.\n\n## \xe2\x80\xa2 Details\n\nThis extension is comprised of a configuration class (`Browser`) and its corresponding extension files. The extension files follow the standard browser extension layout: `manifest`, `popup`, `background`, and other related browser API\'s to connect them all.\n\nFor more information regarding the understanding of how browser extension source code is formatted please visit: https://developer.chrome.com/extensions/getstarted or https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons\n\nChrome, Firefox, and Microsoft edge share nearly identical browser extension API\'s. Within the following sections, we\'ll touch upon shared code and how we use `gulp`, an automation toolkit, to inject the configuration class (`Browser`) specific variables into the code base in order to achieve the final distribution code per each browser.\n\nSafari browser extensions can be created via Extension Builder and by following "Chrome Extension Porting" instructions detailed here: https://developer.apple.com/library/archive/documentation/UserExperience/Conceptual/SafariExtensionsConversionGuide/Chapters/Chrome.html.  For the most part however, Safari extensions contain similar code to the previously mentioned browsers.\n\n## \xe2\x80\xa2 Code\n\nThe code is split into the configuration and source folders.\n\n### \xe2\x80\xa2\xc2\xa0Configuration (`./config`)\n\nThe configuration files contain the Browser class (`browser.js`), browsers that implement the Browser class (`browsers.js`) and the manifest file (`manifest.js`) that all browser extensions rely on.\n\nThe Browser class contains information that the _Build Process_ uses. Aside from `name`, `slug`, `version`, and `path`, the `manifestMap` and `scriptVariableMap` are what we use to customize the source code and manifest.\n\n___\n#### \xe2\x80\xa2 `manifestMap`\n\nThe `manifestMap` is an `object` that contains key/value content that is used to inject into the `manifest` file. Within the `gulp:manifest` function, we grab the `./config/manifest.js` file, clone it, convert to JSON then inject the `browser.manifestMap` object into it.\n\nThis is necessary because each browser may require seperate key/values or, are simply just named differently.\n\n___\n#### \xe2\x80\xa2 `scriptVariableMap`\n\nThe `scriptVariableMap` is an `object` that contains key/value content that is used to define browser specific variables using general variable names.\n\nThe existing values that we use are:\n\n| Name | Variable | Definition |\n| --- | --- | --- |\n`BROWSER` | `__BROWSER__` | Defines the variable for "browser" per browser API requirements\n`CONTEXT_MENUS` | `__CONTEXT_MENUS__` | Defines the variable for "context menus" per browser API requirements\n`MESSENGER` | `__MESSENGER__` | Defines the variable for "runtime" per browser API requirements\n\nEach of these variables in the `scriptVariableMap` are used within the _Build Process_ to find and replace throughout the code. This enables us to write 1 (one) shared codebase for all of these browser extensions by just writing generic variable names such as `__BROWSER__` and within the `gulp` process, using the `Browser` class, we replace all occurences within each source file.\n\nExample:\n\n```javascript\n//Before\n__BROWSER__.browserAction.onClicked.addListener(function() {\n    // some code here...\n});\n```\n\nRunning the `gulp:scripts` function provides the following output for example:\n\n```javascript\n//After\nmyCustomBrowserVariable.browserAction.onClicked.addListener(function() {\n    // some code here...\n});\n```\n\n### \xe2\x80\xa2 Source (`./src`)\n\nThe source files contain folders for `images`, `scripts`, `styles` and `views`.\n\n___\n#### \xe2\x80\xa2 Images (`./src/images`)\n\nThe images are split up between `icons` and `logo`. The images are used within some of the `styles` and `views` files.\n\n___\n#### \xe2\x80\xa2 Scripts (`./src/scripts`)\n\nWe\'re using vanilla `javascript` for these files. We don\'t use any module bundlers anything for this other than `uglifcation`.\nThe scripts are seperated between `background`, `components` and `utils`.\n\n| Folder | Files | Usage |\n| --- | --- | --- |\n`background` | Contains files used for the background\n`components` | Contains `popup.js`\n`utils` | Contains shared code helpers\n\nThe scripts are split up during the build process between: `background.js`, `popup.js`. Each of those files do not contain each other but, they do however contain all of the `util` directory files.\n\n___\n#### \xe2\x80\xa2 Styles (`./src/styles`)\n\nWe use `scss` for our styles.\n\nThe style files are split up using a standard `scss` organizational structure of `components`, `modules`, and `partials`.\nDuring the build process each of the components (currently only: `popup.scss`) contain all of the `modules` and `partials` styles. The components do not share code between themselves.\n\n___\n#### \xe2\x80\xa2 Views (`./src/views`)\n\nWe use `pug` (https://pugjs.org) for each of the `views` files.\n\n| File | Usage |\n| --- | --- |\n`background.pug` | Simple file that just includes the final `background.js` script.\n`popup.pug` | The primary file that contains the functionality display the Dissenter.com iframe.\n\n\n# \xe2\x80\xa2 Build Process\n\nThe build process uses each `Browser` class object defined in `./config/browsers.js` to automatically build `scripts`, `styles`, `html`, `manifest` and `images` into the `./build` directory (_hidden_). The gulp scripts compile, minify (& mangle) and save the combined files in these `./build` directories.\n\nEach of those scripts can be run using npm.\n\nFor example:\n\n```\n$ npm run gulp:scripts\n$ npm run gulp:styles\n$ npm run gulp:html\n$ npm run gulp:manifest\n$ npm run gulp:images\n```\n\nYou can also run all of them at once using the gulp `build` function:\n\n```\n$ npm run build\n```\n\nDuring the build process, all of the code in the `./src` directory is compiled into the `./build` directory. The `./build` directory will contain folders named after each of the `Browser` class `slug` (`browser.slug` ... i.e. `chrome`, `firefox`, etc.). Each of the folders contain browser specific extension code formatted in a specific way that is read by the main `manifest.json` in each of the folder\'s directories. For example, the `popup`, `images`, `background` and other related `manifest.json` keys are transfered from the `./src` directory into the `./build/*` folders.\n'