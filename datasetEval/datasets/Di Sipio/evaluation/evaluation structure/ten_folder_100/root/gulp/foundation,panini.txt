b'# Panini\n\n[![Build Status](https://travis-ci.org/zurb/panini.svg?branch=master)](https://travis-ci.org/zurb/panini) [![npm version](https://badge.fury.io/js/panini.svg)](https://badge.fury.io/js/panini) [![Coverage Status](https://coveralls.io/repos/zurb/panini/badge.svg?branch=master&service=github)](https://coveralls.io/github/zurb/panini?branch=master) [![Dependency Status](https://david-dm.org/zurb/panini.svg)](https://david-dm.org/zurb/panini)\n\nA super simple flat file generator for use with Gulp. It compiles a series of HTML **pages** using a common **layout**. These pages can also include HTML **partials**, external Handlebars **helpers**, or external **data** as JSON or YAML.\n\nPanini isn\'t a full-fledged static site generator&mdash;rather, it solves the very specific problem of assembling flat files from common elements, using a templating language.\n\n## Installation\n\n```bash\nnpm install panini --save-dev\n```\n\n## Usage\n\nFeed Panini a stream of HTML files, and get a delicious flattened site out the other end.\n\n```js\nvar gulp = require(\'gulp\');\nvar panini = require(\'panini\');\n\ngulp.task(\'default\', function() {\n  gulp.src(\'pages/**/*.html\')\n    .pipe(panini({\n      root: \'pages/\',\n      layouts: \'layouts/\',\n      partials: \'partials/\',\n      helpers: \'helpers/\',\n      data: \'data/\'\n    }))\n    .pipe(gulp.dest(\'build\'));\n});\n```\n\nNote that Panini loads layouts, partials, helpers, and data files once on first run. Whenever these files change, call `panini.refresh()` to get it up to date. You can easily do this inside a call to `gulp.watch()`:\n\n```js\ngulp.watch([\'./src/{layouts,partials,helpers,data}/**/*\'], [panini.refresh]);\n```\n\n## Options\n\n### `root`\n\n**Type:** `String`\n\nPath to the root folder all pages live in. This option does not pull in the files themselves for processing&mdash;that\'s what `gulp.src()` is for. This setting tells Panini what the common root of your site\'s pages is.\n\n### `layouts`\n\n**Type:** `String`\n\nPath to a folder containing layouts. Layout files can have the extension `.html`, `.hbs`, or `.handlebars`. One layout must be named `default`. To use a layout other than the default on a specific page, override it in the Front Matter on that page.\n\n```html\n---\nlayout: post\n---\n\n<!-- Uses layouts/post.html as the template -->\n```\n\nAll layouts have a special Handlebars partial called `body` which contains the contents of the page.\n\n```html\n<!-- Header up here -->\n{{> body}}\n<!-- Footer down here -->\n```\n\n### `pageLayouts`\n\n**Type:** `Object`\n\nA list of presets for page layouts, grouped by folder. This allows you to automatically set all pages within a certain folder to have the same layout.\n\n```js\npanini({\n  root: \'src/pages/\',\n  layouts: \'src/layouts/\',\n  pageLayouts: {\n    // All pages inside src/pages/blog will use the blog.html layout\n    \'blog\': \'blog\'\n  }\n})\n```\n\n### `partials`\n\n**Type:** `String`\n\nPath to a folder containing HTML partials. Partial files can have the extension `.html`, `.hbs`, or `.handlebars`. Each will be registered as a Handlebars partial which can be accessed using the name of the file. (The path to the file doesn\'t matter&mdash;only the name of the file itself is used.)\n\n```html\n<!-- Renders partials/header.html -->\n{{> header}}\n```\n\n### `helpers`\n\n**Type:** `String`\n\nPath to a folder containing Handlebars helpers. Handlebars helpers are `.js` files which export a function via `module.exports`. The name used to register the helper is the same as the name of the file.\n\nFor example, a file named `markdown.js` that exports this function would add a Handlebars helper called `{{markdown}}`.\n\n```js\nvar marked = require(\'marked\');\n\nmodule.exports = function(text) {\n  return marked(text);\n}\n```\n\n### `data`\n\n**Type:** `String`\n\nPath to a folder containing external data, which will be passed in to every page. Data can be formatted as JSON (`.json`) or YAML (`.yml`). Within a template, the data is stored within a variable with the same name as the file it came from.\n\nFor example, a file named `contact.json` with key/value pairs such as the following:\n\n```js\n{\n    "name": "John Doe",\n    "email": "john.doe@gmail.com",\n    "phone": "555-1212"\n}\n```\n\nCould be used to output the value of John Doe within a template using the Handlebars syntax of `{{contact.name}}`.\n\nData can also be a `.js` file with a `module.exports`. The data returned by the export function will be used.\n\nData can also be inserted into the page itself with a Front Matter template at the top of the file.\n\nLastly, the reserved `page` variable is added to every page template as it renders. It contains the name of the page being rendered, without the extension.\n\n## CLI\n\nYou can also use panini via the CLI.\n\n```\nUsage: panini --layouts=[layoutdir] --root=[rootdir] --output=[destdir] [other options] \'pagesglob\'\n\nOptions:\n  --layouts  (required) path to a folder containing layouts\n  --root     (required) path to the root folder all pages live in\n  --output     (required) path to the folder compiled pages should get sent to\n  --partials            path to root folder for partials\n  --helpers             path to folder for additional helpers\n  --data                path to folder for additional data\n\nthe argument pagesglob should be a glob describing what pages you want to apply panini to.\n\nExample: panini --root=src/pages --layouts=src/layouts --partials=src/partials --data=src/data --output=dist \'src/pages/**/*.html\'\n```\n\n## Local Development\n\n```bash\ngit clone https://github.com/zurb/panini\ncd panini\nnpm install\n```\n\nUse `npm test` to run tests.\n'