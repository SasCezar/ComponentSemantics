b'<p align="center"><img src="https://raw.githubusercontent.com/reisraff/phulp/master/phulp.png" alt="phulp" /></p>\n\n<p align="center">The task manager for php</p>\n\n[![Latest Stable Version](https://poser.pugx.org/reisraff/phulp/v/stable)](https://packagist.org/packages/reisraff/phulp)\n[![Total Downloads](https://poser.pugx.org/reisraff/phulp/downloads)](https://packagist.org/packages/reisraff/phulp)\n[![Latest Unstable Version](https://poser.pugx.org/reisraff/phulp/v/unstable)](https://packagist.org/packages/reisraff/phulp)\n[![License](https://poser.pugx.org/reisraff/phulp/license)](https://packagist.org/packages/reisraff/phulp)\n[![Build Status](https://api.travis-ci.org/reisraff/phulp.svg?branch=master)](https://travis-ci.org/reisraff/phulp)\n\n### Why\n\nSometimes I need a tool like Gulp for my PHP projects, but I don\'t want to install `npm` only to install Gulp. I thought "I need something like Gulp, but in PHP". After a little research I found Phing, but it\'s not focused in minification and management for CSS/JS and related frontend stuff.\n\nWell, I decided to write Phulp, the PHP port of Gulp! And a little curiosity: it\'s faster than Gulp.\n\n**PS: I made benchs using PHP 7**\n\n### Documentation\n\n#### Plugins\n\nLike Gulp we also have plugins, and you also can create your own.\n\nAvailable plugins you can find in the plugin section over the [Phulp Page](https://reisraff.github.io/phulp).\n\nTo make your plugin available in the Phulp plugin page, add the keyword "phulpplugin" in your composer.json file of your project, and don\'t forget to let a cool composer.json description.\n\nAnd tag your github project with the tags ["phulpplugin"](https://github.com/topics/phulpplugin), and ["phulp"](https://github.com/topics/phulp), to be searchable on github.\n\n#### Usage\n\n##### Install:\n\n```bash\n$ composer require --dev reisraff/phulp\n```\n\n##### Create your `Phulpfile` (the configuration file, that describes all your tasks):\n\n```php\n<?php\n\nuse Phulp\\Output as out;\n\n// Define the default task\n$phulp->task(\'default\', function ($phulp) {\n    out::outln(out::colorize(\'Arguments:\', \'green\'));\n    out::outln(print_r($phulp->getArguments(), true));\n\n    $phulp->start([\'clean\', \'iterate_src_folder\', \'sync_command\', \'async_command\']);\n    if ($phulp->getArgument(\'repeat-clean\', false)) {\n        out::outln(out::colorize(\'Repeating "clean"\', \'green\'));\n        $phulp->start([\'clean\']);\n    }\n});\n\n// Define the clean task\n$phulp->task(\'clean\', function ($phulp) {\n    if (! file_exists(\'dist\')) {\n        mkdir(\'dist\');\n    }\n    $phulp->src([\'dist/*\'])\n        ->pipe($phulp->clean());\n});\n\n// Define the iterate_src_folder task\n$phulp->task(\'iterate_src_folder\', function ($phulp) {\n    // Define the source folder\n    $phulp->src([\'src/*php\'])\n        ->pipe($phulp->iterate(function ($file) {\n            out::outln(sprintf(\n                \'%s %s\',\n                out::colorize(\'Iterated ->\', \'green\'),\n                out::colorize($file->getFullPath() . DIRECTORY_SEPARATOR . $file->getName(), \'blue\')\n            ));\n        }))\n        ->pipe($phulp->dest(\'dist/\'));\n});\n\n// Define the sync_command task\n$phulp->task(\'sync_command\', function ($phulp) {\n    $command = $phulp->exec(\n        \'sleep 1 && echo $MSG\',\n        [\n            \'env\' => [\n                \'MSG\' => \'Sync-command\'\n            ],\n            \'cwd\' => \'/tmp\',\n            \'sync\' => true, // defines sync,\n            \'quiet\' => true,\n            \'onStdOut\' => function ($line) { out::outln($line); },\n            \'onStdErr\' => function ($line) { },\n            \'onFinish\' => function ($exitCode, $stdOut, $stdErr) { },\n        ]\n    );\n\n    $exitCode = $command->getExitCode();\n    $stdout = $command->getStdout();\n    $stderr = $command->getStderr();\n\n    out::outln(\'done\');\n});\n\n// Define the async_command task\n$phulp->task(\'async_command\', function ($phulp) {\n    $command = $phulp->exec(\n        \'sleep 1 && echo $MSG\',\n        [\n            \'env\' => [\n                \'MSG\' => \'Async-command\'\n            ],\n            \'cwd\' => \'/tmp\',\n            \'sync\' => false, // defines async,\n            \'quiet\' => false,\n            \'onStdOut\' => function ($line) { },\n            \'onStdErr\' => function ($line) { },\n            \'onFinish\' => function ($exitCode, $stdOut, $stdErr) { },\n        ]\n    );\n\n    out::outln(\'done\');\n});\n\n// Define the watch task\n$phulp->task(\'watch\', function ($phulp) {\n    // Phulp will watch \'src\' folder\n    $phulp->watch(\n        $phulp->src([\'src/*php\']),\n        function ($phulp, $distFile) {\n            out::outln(sprintf(\n                \'%s %s\',\n                out::colorize(\'File Changed ->\', \'green\'),\n                out::colorize($distFile->getFullPath() . DIRECTORY_SEPARATOR . $distFile->getName(), \'blue\')\n            ));\n            $phulp->start([\'default\']);\n        }\n    );\n});\n```\n\n##### Run:\n\nRun the phulp over the `Phulpfile` directory\n\n_If you have not configured the bin-dir:_\n\n```bash\n$ vendor/bin/phulp --help\n$ vendor/bin/phulp # Will run the `default` task\n$ vendor/bin/phulp --arg=repeat-clean:true # Will run the `default` task with the argument repeat-clean with value `true`\n$ vendor/bin/phulp --autoload=/my/autoload/path/autoload.php # Will run the `default` task adding a alternative autoload php file\n$ vendor/bin/phulp watch # Will run the `watch` task\n```\n\n##### The full documentation:\n\n[Docs](https://github.com/reisraff/phulp/blob/master/DOCUMENTATION.md)\n\n##### Example:\n\n[https://github.com/reisraff/phulp/blob/master/example/phulpfile.php](https://github.com/reisraff/phulp/blob/master/example/phulpfile.php)\n\nRun the example file:\n\n```bash\n$ composer install\n$ cd example\n$ ../bin/phulp\n$ ../bin/phulp watch\n```\n\n### Contributors Guide\n\n#### Clone\n\n```bash\n$ git clone git@github.com:reisraff/phulp.git\n$ cd phulp\n$ composer install\n```\n\n#### Tests\n\n_First install the dependencies, and after you can run:_\n\n```bash\n$ bin/phulp test\n```\n\n### TODO\n\nThe "Issues" page from this repository is being used for TO-DO management.\n\n## Credits\n\n[@reisraff](http://www.twitter.com/reisraff)\n'