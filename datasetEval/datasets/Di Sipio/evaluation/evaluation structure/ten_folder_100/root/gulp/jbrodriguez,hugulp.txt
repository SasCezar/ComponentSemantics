b'# hugulp 2\n\n## v2 Breaking changes\n\nIf you\'re using hugulp v1, please take note of the following changes:\n\n* hugo is no longer invoked by hugulp\n\n  use hugo as per its docs, then invoke hugulp build\n\n* put your assets in the static folder\n\n  for example, static/styles, static/images, static/scripts\n\n* themes are supported out of the box\n\n_Note: If you need sass/less/js pre-processing, read v2 docs below_\n\n## Description\n\n`hugulp` is a tool to optimize the assets of a [Hugo](https://gohugo.io) website.\n\nThe main idea is to recreate the famous [Ruby on Rails Asset Pipeline](http://guides.rubyonrails.org/asset_pipeline.html), which minifies, concatenates and fingerprints the assets used in your website.\n\nThis leads to less and smaller network requests to your page, improving overall user experience.\n\nRead [this blog post](https://jbrio.net/posts/mobile-friendly-website-2/) and [this article](https://medium.com/@juanbrodriguez/hugulp-a-hugo-gulp-toolchain-94f72ccc3577) for additional context.\n\n_Note: These articles refer to v1_\n\nIt\'s internally driven by [Gulp](https://gulpjs.com).\n\nThis project Includes the following tools, tasks and workflows:\n\n* [sass](https://github.com/dlmanning/gulp-sass) (super fast libsass)\n* [less](https://github.com/plus3network/gulp-less)\n* [autoprefixer](https://github.com/sindresorhus/gulp-autoprefixer)\n* [clean-css](https://github.com/scniro/gulp-clean-css)\n* [jshint](https://github.com/spalger/gulp-jshint)\n* [uglify](https://github.com/terinjokes/gulp-uglify)\n* [imagemin](https://github.com/sindresorhus/gulp-imagemin) (only [changed images](https://github.com/sindresorhus/gulp-changed))\n* [gulp-rev](https://github.com/sindresorhus/gulp-rev), [gulp-rev-replace](https://github.com/jamesknelson/gulp-rev-replace) (fingerprinting)\n* [htmlmin](https://github.com/jonschlinkert/gulp-htmlmin)\n* [watch](https://github.com/floatdrop/gulp-watch)\n\n## Installation\n\n[Node](https://nodejs.org) needs to be installed in your system.\n\nThen just\n\n```bash\n$ npm install -g hugulp\n```\n\nOr you can build and run using [docker](https://www.docker.com):\n\n```bash\n# Default docker setup:\n$ ./scripts/create-docker-machine-and-run-it\n\n# -- OR --\n\n# Run with custom machine name, specific hugo version, specific node version and run docker in detached mode:\n$ ./scripts/create-docker-machine-and-run-it -a app-devel -g 0.20.6 -n 6.10.0 -d\n```\n\n**Note:** You only run the `./scripts/create-docker-machine-and-run-it` if you want to create a new docker machine. Once the docker machine is created, you have to use docker commands to manage it. Please be familiar with docker in this regard.\n\n## Getting Started\n\nThe most common usage scenario would be:\n\n```bash\n$ hugo new site yoursite\n$ cd yoursite\n$ hugulp init\n# create content\n# add images (static/images), css (static/styles) and javascript (static/scripts)\n$ hugo server -D # for development\n# development is done, ready to publish\n$ rm -rf public # clean up public folder, it will be re-generated by hugo\n$ hugo # for release/production/deployment\n$ hugulp build # optimize the site by running the asset pipeline\n```\n\nAnother scenario would be to include sass/less pre-processing:\n\n```bash\n$ hugo new site yoursite\n$ cd yoursite\n$ hugulp init\n# create content\n# add images (static/images), and javascript (static/scripts)\n# add sass/less (assets/styles)\n$ hugo server -D # for development\n$ hugulp watch # to convert sass/less (assets/styles) into css (static/styles)\n# development is done, ready to publish\n$ rm -rf public # clean up public folder, it will be re-generated by hugo\n$ hugo # for release/production/deployment\n$ hugulp build # optimize the site by running the asset pipeline\n```\n\nIn both cases, you could chain the last 3 commands:\n\n```bash\n$ rm -rf public && hugo && hugulp build\n```\n\n`hugulp` requires a configuration file (`.hugulprc`), which is created by the `hugulp init` command (you can create the file manually if you want).\n\nThis is the default `.hugulprc`:\n\n```json\n{\n  "version": 2,\n  "pipeline": ["images", "styles", "scripts", "fingerprint", "html"],\n  "path": {\n    "styles": "styles",\n    "images": "images",\n    "scripts": "scripts"\n  },\n  "watch": {\n    "source": "assets",\n    "target": "static"\n  },\n  "build": {\n    "source": "public",\n    "target": "public"\n  },\n  "autoprefixer": {\n    "browsers": ["last 2 versions"]\n  },\n  "cleancss": {\n    "advanced": false\n  },\n  "htmlmin": {\n    "collapseWhitespace": true\n  },\n  "gifsicle": { "interlaced": true },\n  "jpegtran": { "progressive": true },\n  "optipng": { "optimizationLevel": 5 },\n  "svgo": {\n    "plugins": [{ "removeViewBox": true }, { "cleanupIDs": false }]\n  }\n}\n```\n\nYou can easily customize `hugulp`\'s behavior, by modifying this configuration file, as described below.\n\n## Available Commands\n\n### hugulp watch\n\n`hugulp` will assist you if you\'re using sass/less (and javascript), which require pre-processing.\n\nIt will watch for changes to styles or script files, process them and write them to hugo\'s static folder, according to the following table\n\n| In Folder      |      Looks for       | Operation                              | Written to     |\n| -------------- | :------------------: | -------------------------------------- | -------------- |\n| assets/styles  | s[a\\|c]ss, less, css | Convert sass/less to css               | static/styles  |\n| assets/scripts |          js          | Lint javascript code (_soon babelify_) | static/scripts |\n\n_Note: It searches the folders recursively_\n\nThe table above applies to `hugulp` run with a default `.hugulprc`.\n\nYou can customize the folder names: `resources` instead of `assets`, `js` instead of `scripts` and so on.\n\nThis is described in the `.hugulprc` section below.\n\n### hugulp build\n\nIt optimizes the site that hugo built, by running the asset pipeline as defined in `.hugulprc` (field _pipeline_).\n\nAdditionally, files are not watched for changes\n\n### hugulp version\n\nDisplay installed version.\n\n### hugulp init\n\nCreate a default `.hugulprc`.\n\n## Configuration\n\nBy editing the `.hugulprc` configuration file, you can customize almost anything about `hugulp`.\n\nDescription of each field follows:\n\n### pipeline\n\nDefines which tasks of the asset pipeline will be executed (`hugulp build` command)\n\nType: array <br>\nDefault:\n\n```json\n"pipeline": ["images", "styles", "scripts", "fingerprint", "html"]\n```\n\n| Task        | Description                                                        |\n| ----------- | ------------------------------------------------------------------ |\n| images      | minify images with `imagemin`                                      |\n| styles      | pre-process `sass`/`less`/css, then `clean-css`                    |\n| scripts     | `jshint`, then `uglify`                                            |\n| fingerprint | fingerprint with `rev`, then replace references with `rev-replace` |\n| html        | minify html with `htmlmin`                                         |\n\nLet\'s say you don\'t want to fingerprint the assets. Just set _pipeline_ to\n\n```json\n"pipeline": ["images", "styles", "scripts", "html"]\n```\n\nBy removing the _fingerprint_ task, it will not be executed.\n\nNote that tasks are executed sequentially.\n\n### path\n\nDefines the name of the folders where your assets are located/will be transferred to.\n\nType: object <br>\nDefault:\n\n```json\n"path": {\n  "styles": "styles",\n  "images": "images",\n  "scripts": "scripts"\n}\n```\n\nSo if you prefer your styles folder to be called css, and scripts to be called js, you would change it to:\n\n```json\n"path": {\n  "styles": "css",\n  "images": "images",\n  "scripts": "js"\n}\n```\n\n### watch\n\nDefine which folders to watch for changes, for the `hugulp watch` command.\n\nType: object <br>\nDefault:\n\n```json\n"watch": {\n  "source": "assets",\n  "target": "static"\n}\n```\n\nThis field works together with the path field.\n\nWith a default `.hugulprc`, it will watch `assets/styles` and `assets/scripts` (recursively).\n\nIf you customized `path` as per above, it will watch `assets/css` and `assets/js`.\n\nIf you additionally want the `assets` folder to be called `resources`, change _source_ to `resources`\n\n```json\n"watch": {\n  "source": "resources",\n  "target": "static"\n}\n```\n\nthen it will watch `resources/css` and `resources/js`\n\nFinally, the changes will be written to the well-known hugo static folder.\n\nWith a default `.hugulprc`, files will be written to `static/styles` and `static/scripts`.\n\n### build\n\nDefines the folders referenced during the `hugulp build` command\n\nType: object <br>\nDefault:\n\n```json\n"build": {\n  "source": "public",\n  "target": "public"\n}\n```\n\nThis should generally be left unchanged.\n\n`hugo` will output to the public folder by default, so `hugulp build` will process the files in-place.\n\n### autoprefixer\n\nOptions for `autoprefixer`. Check [gulp-autoprefixer](https://github.com/sindresorhus/gulp-autoprefixer) for documentation.\n\nTask: `styles`\n\nType: object<br>\nDefault:\n\n```json\n"autoprefixer": {\n  "browsers": ["last 2 versions"]\n}\n```\n\n### cleancss\n\nOptions for `clean-css`. Check [gulp-clean-css](https://github.com/scniro/gulp-clean-css) for documentation.\n\nTask: `styles`\n\nDefault:\n\n```json\n"cleancss": {\n  "advanced": false\n}\n```\n\n### htmlmin\n\nOptions for `htmlmin`. Check [gulp-htmlmin](https://github.com/jonschlinkert/gulp-htmlmin) for documentation.\n\nTask: `html`\n\nDefault:\n\n```json\n"htmlmin": {\n  "collapsedWhitespace": true\n}\n```\n\n### gifsicle\n\nOptions for `gifsicle`. Check [gulp-imagemin](https://github.com/sindresorhus/gulp-imagemin) for documentation.\n\nTask: `images`\n\nDefault:\n\n```json\n"gifsicle": {\n  "interlaced": true\n}\n```\n\n### jpegtran\n\nOptions for `jpegtran`. Check [gulp-imagemin](https://github.com/sindresorhus/gulp-imagemin) for documentation.\n\nTask: `images`\n\nDefault:\n\n```json\n"jpegtran": {\n  "progressive": true\n}\n```\n\n### optipng\n\nOptions for `optipng`. Check [gulp-imagemin](https://github.com/sindresorhus/gulp-imagemin) for documentation.\n\nTask: `images`\n\nDefault:\n\n```json\n"optipng": {\n  "optimizationLevel": 5\n}\n```\n\n### svgo\n\nOptions for `svgo`. Check [gulp-imagemin](https://github.com/sindresorhus/gulp-imagemin) for documentation.\n\nTask: `images`\n\nDefault:\n\n```json\n"svgo": {\n  "plugins": [{ "removeViewBox": true }, { "cleanupIDs": false }]\n}\n```\n\n## How to update\n\nWhenever a new `hugulp` version becomes available, you can update it by running\n\n```bash\n$ npm install -g hugulp\n```\n\n## PR\n\nPull Requests are welcome :thumbsup:.\n\n## Share\n\nMade by [Juan B. Rodriguez](http://jbrodriguez.io), with a MIT License.\n\nPlease [share the article or leave your comments](http://jbrodriguez.io/mobile-friendly-website-2/).\n'