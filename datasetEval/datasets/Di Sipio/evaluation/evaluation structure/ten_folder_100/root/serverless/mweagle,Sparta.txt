b'\n<div align="center"><img src="https://raw.githubusercontent.com/mweagle/Sparta/master/docs_source/static/site/SpartaLogoLarge.png" />\n</div>\n\n# Sparta <p align="center">\n\n[![Build Status](https://travis-ci.org/mweagle/Sparta.svg?branch=master)](https://travis-ci.org/mweagle/Sparta)\n\n[![GoDoc](https://godoc.org/github.com/mweagle/Sparta?status.svg)](https://godoc.org/github.com/mweagle/Sparta)\n\n[![Go Report Card](https://goreportcard.com/badge/github.com/mweagle/Sparta)](https://goreportcard.com/report/github.com/mweagle/Sparta)\n\nVisit [gosparta.io](https://gosparta.io) for complete documentation.\n\n## Overview\n\nSparta takes a set of _golang_ functions and automatically provisions them in\n[AWS Lambda](https://aws.amazon.com/lambda/) as a logical unit.\n\nAWS Lambda functions are defined using the standard [AWS Lambda signatures](https://aws.amazon.com/blogs/compute/announcing-go-support-for-aws-lambda/):\n\n* `func()`\n* `func() error`\n* `func(TIn) error`\n* `func() (TOut, error)`\n* `func(context.Context) error`\n* `func(context.Context, TIn) error`\n* `func(context.Context) (TOut, error)`\n* `func(context.Context, TIn) (TOut, error)`\n\n The TIn and TOut parameters represent encoding/json un/marshallable types.\n\nFor instance:\n\n```go\n// Standard AWS \xce\xbb function\nfunc helloWorld(ctx context.Context) (string, error) {\n  ...\n}\n```\n\nwhere\n\n* `ctx` : The request context that includes both the [AWS Context](https://github.com/aws/aws-lambda-go/blob/master/lambdacontext/context.go) as well as Sparta specific [values](https://godoc.org/github.com/mweagle/Sparta#pkg-constants.)\n\n\nConsumers define a set of lambda functions and provide them to Sparta to create a self-documenting, self-deploying AWS Lambda binary:\n\n```go\n  lambdaFn, _ := sparta.NewAWSLambda("Hello World",\n    helloWorld,\n    sparta.IAMRoleDefinition{})\n\n  var lambdaFunctions []*sparta.LambdaAWSInfo\n  lambdaFunctions = append(lambdaFunctions, lambdaFn)\n\n  err := sparta.Main("HelloWorldStack",\n    "My Hello World stack",\n    lambdaFunctions,\n    nil,\n    nil)\n```\n\nVisit [gosparta.io](https://gosparta.io) for complete documentation.\n\n## Contributing\n\nSparta contributions are most welcome. Please consult the latest [issues](https://github.com/mweagle/Sparta/issues) for open issues.\n\n### Building\n\nLocally building or testing Sparta itself is typically only needed to make package\nchanges. Sparta is more often used as a required import of another application.\nBuilding is done via [mage](https://magefile.org/).\n\nTo get started building and verifying local changes:\n\n  1. `go get -u -d github.com/magefile/mage`\n  1. In the .../mweagle/Sparta directory, run `mage -l` to list the current targets:\n\n  $ mage -l\n  Targets:\n    build                           the application\n    clean                           the working directory\n    compareAgainstMasterBranch      is a convenience function to show the comparisons of the current pushed branch against the master branch\n    describe                        runs the `TestDescribe` test to generate a describe HTML output file at graph.html\n    docsBuild                       builds the public documentation site in the /docs folder\n    docsCommit                      builds and commits the current documentation with an autogenerated comment\n    docsEdit                        starts a Hugo server and hot reloads the documentation at http://localhost:1313\n    docsInstallRequirements         installs the required Hugo version\n    ensureAllPreconditions          ensures that the source passes *ALL* static `ensure*` precondition steps\n    ensureCleanTree                 ensures that the git tree is clean\n    ensureFormatted                 ensures that the source code is formatted with goimports\n    ensureGoFmt                     ensures that the source is `gofmt -s` is empty\n    ensureLint                      ensures that the source is `golint`ed\n    ensureMarkdownSpelling          ensures that all *.MD files are checked for common spelling mistakes\n    ensurePrealloc                  ensures that slices that could be preallocated are enforced\n    ensureSpelling                  ensures that there are no misspellings in the source\n    ensureStaticChecks              ensures that the source code passes static code checks\n    ensureTravisBuildEnvironment    is the command that sets up the Travis environment to run the build.\n    ensureVet                       ensures that the source has been `go vet`ted\n    generateBuildInfo               creates the automatic buildinfo.go file so that we can stamp the SHA into the binaries we build...\n    generateConstants               runs the set of commands that update the embedded CONSTANTS for both local and AWS Lambda execution\n    installBuildRequirements        installs or updates the dependent packages that aren\'t referenced by the source, but are needed to build the Sparta source\n    logCodeMetrics                  ensures that the source code is formatted with goimports\n    publish                         the latest source\n    test                            runs the Sparta tests\n    testCover                       runs the test and opens up the resulting report\n    travisBuild                     is the task to build in the context of a Travis CI pipeline\n\nConfirm tests are passing on `HEAD` by first running `mage -v test`.\n\nAs you periodically make local changes, run `mage -v test` to confirm backward compatibility.\n\n### Tests\n\nWhen possible, please include a [test case](https://golang.org/pkg/testing/) that verifies the local change and ensures compatibility.\n\n## Contributors\n\nThanks to all Sparta contributors (alphabetical):\n\n* **Kyle Anderson**\n* [James Brook](https://github.com/jbrook)\n* [Ryan Brown](https://github.com/ryansb)\n* [sdbeard](https://github.com/sdbeard)\n* [Scott Raine](https://github.com/nylar)\n* [Paul Seiffert](https://github.com/seiffert)\n* [Thom Shutt](https://github.com/thomshutt)\n\n'