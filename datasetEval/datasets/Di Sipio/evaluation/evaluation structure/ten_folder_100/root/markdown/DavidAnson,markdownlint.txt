b'# markdownlint\n\n> A Node.js style checker and lint tool for Markdown/CommonMark files.\n\n[![npm version][npm-image]][npm-url]\n[![CI Status][devops-image]][devops-url]\n[![License][license-image]][license-url]\n\n## Install\n\n```shell\nnpm install markdownlint --save-dev\n```\n\n## Overview\n\nThe [Markdown](https://en.wikipedia.org/wiki/Markdown) markup language is\ndesigned to be easy to read, write, and understand. It succeeds - and its\nflexibility is both a benefit and a drawback. Many styles are possible, so\nformatting can be inconsistent. Some constructs don\'t work well in all\nparsers and should be avoided. The [CommonMark](https://commonmark.org/)\nspecification standardizes parsers - but not authors.\n\n`markdownlint` is a\n[static analysis](https://en.wikipedia.org/wiki/Static_program_analysis)\ntool for [Node.js](https://nodejs.org/) with a library of rules\nto enforce standards and consistency for Markdown files. It was\ninspired by - and heavily influenced by - Mark Harrison\'s\n[markdownlint](https://github.com/markdownlint/markdownlint) for\n[Ruby](https://www.ruby-lang.org/). The initial rules, rule documentation,\nand test cases came directly from that project.\n\n### Related\n\n* [markdownlint-cli command-line interface for Node.js](https://github.com/igorshubovych/markdownlint-cli)\n* [grunt-markdownlint for the Grunt task runner](https://github.com/sagiegurari/grunt-markdownlint)\n* [vscode-markdownlint extension for VS Code](https://marketplace.visualstudio.com/items/DavidAnson.vscode-markdownlint)\n* [Sublime Text markdownlint for Sublime Text](https://packagecontrol.io/packages/SublimeLinter-contrib-markdownlint)\n* [linter-node-markdownlint extension for Atom](https://atom.io/packages/linter-node-markdownlint)\n* [coc-markdownlint extension for Vim/Neovim](https://github.com/fannheyward/coc-markdownlint)\n* [markdownlint/mdl gem for Ruby](https://rubygems.org/gems/mdl)\n\n## Demonstration\n\n[`markdownlint` demo](https://dlaa.me/markdownlint/), an interactive, in-browser\nplayground for learning and exploring.\n\n## Rules / Aliases\n\n* **[MD001](doc/Rules.md#md001)** *heading-increment/header-increment* - Heading levels should only increment by one level at a time\n* ~~**[MD002](doc/Rules.md#md002)** *first-heading-h1/first-header-h1* - First heading should be a top level heading~~\n* **[MD003](doc/Rules.md#md003)** *heading-style/header-style* - Heading style\n* **[MD004](doc/Rules.md#md004)** *ul-style* - Unordered list style\n* **[MD005](doc/Rules.md#md005)** *list-indent* - Inconsistent indentation for list items at the same level\n* **[MD006](doc/Rules.md#md006)** *ul-start-left* - Consider starting bulleted lists at the beginning of the line\n* **[MD007](doc/Rules.md#md007)** *ul-indent* - Unordered list indentation\n* **[MD009](doc/Rules.md#md009)** *no-trailing-spaces* - Trailing spaces\n* **[MD010](doc/Rules.md#md010)** *no-hard-tabs* - Hard tabs\n* **[MD011](doc/Rules.md#md011)** *no-reversed-links* - Reversed link syntax\n* **[MD012](doc/Rules.md#md012)** *no-multiple-blanks* - Multiple consecutive blank lines\n* **[MD013](doc/Rules.md#md013)** *line-length* - Line length\n* **[MD014](doc/Rules.md#md014)** *commands-show-output* - Dollar signs used before commands without showing output\n* **[MD018](doc/Rules.md#md018)** *no-missing-space-atx* - No space after hash on atx style heading\n* **[MD019](doc/Rules.md#md019)** *no-multiple-space-atx* - Multiple spaces after hash on atx style heading\n* **[MD020](doc/Rules.md#md020)** *no-missing-space-closed-atx* - No space inside hashes on closed atx style heading\n* **[MD021](doc/Rules.md#md021)** *no-multiple-space-closed-atx* - Multiple spaces inside hashes on closed atx style heading\n* **[MD022](doc/Rules.md#md022)** *blanks-around-headings/blanks-around-headers* - Headings should be surrounded by blank lines\n* **[MD023](doc/Rules.md#md023)** *heading-start-left/header-start-left* - Headings must start at the beginning of the line\n* **[MD024](doc/Rules.md#md024)** *no-duplicate-heading/no-duplicate-header* - Multiple headings with the same content\n* **[MD025](doc/Rules.md#md025)** *single-title/single-h1* - Multiple top level headings in the same document\n* **[MD026](doc/Rules.md#md026)** *no-trailing-punctuation* - Trailing punctuation in heading\n* **[MD027](doc/Rules.md#md027)** *no-multiple-space-blockquote* - Multiple spaces after blockquote symbol\n* **[MD028](doc/Rules.md#md028)** *no-blanks-blockquote* - Blank line inside blockquote\n* **[MD029](doc/Rules.md#md029)** *ol-prefix* - Ordered list item prefix\n* **[MD030](doc/Rules.md#md030)** *list-marker-space* - Spaces after list markers\n* **[MD031](doc/Rules.md#md031)** *blanks-around-fences* - Fenced code blocks should be surrounded by blank lines\n* **[MD032](doc/Rules.md#md032)** *blanks-around-lists* - Lists should be surrounded by blank lines\n* **[MD033](doc/Rules.md#md033)** *no-inline-html* - Inline HTML\n* **[MD034](doc/Rules.md#md034)** *no-bare-urls* - Bare URL used\n* **[MD035](doc/Rules.md#md035)** *hr-style* - Horizontal rule style\n* **[MD036](doc/Rules.md#md036)** *no-emphasis-as-heading/no-emphasis-as-header* - Emphasis used instead of a heading\n* **[MD037](doc/Rules.md#md037)** *no-space-in-emphasis* - Spaces inside emphasis markers\n* **[MD038](doc/Rules.md#md038)** *no-space-in-code* - Spaces inside code span elements\n* **[MD039](doc/Rules.md#md039)** *no-space-in-links* - Spaces inside link text\n* **[MD040](doc/Rules.md#md040)** *fenced-code-language* - Fenced code blocks should have a language specified\n* **[MD041](doc/Rules.md#md041)** *first-line-heading/first-line-h1* - First line in file should be a top level heading\n* **[MD042](doc/Rules.md#md042)** *no-empty-links* - No empty links\n* **[MD043](doc/Rules.md#md043)** *required-headings/required-headers* - Required heading structure\n* **[MD044](doc/Rules.md#md044)** *proper-names* - Proper names should have the correct capitalization\n* **[MD045](doc/Rules.md#md045)** *no-alt-text* - Images should have alternate text (alt text)\n* **[MD046](doc/Rules.md#md046)** *code-block-style* - Code block style\n* **[MD047](doc/Rules.md#md047)** *single-trailing-newline* - Files should end with a single newline character\n\nSee [Rules.md](doc/Rules.md) for more details.\n\n~~Struck through~~ rules are deprecated, and provided for backward-compatibility.\n\n> All rules with `heading` as part of their name are also available as `header`\n> aliases (e.g. `heading-increment` is also available as `header-increment`).\n> The use of `header` is deprecated and provided for backward-compatibility.\n\n## Tags\n\nTags group related rules and can be used to enable/disable multiple rules at once.\n\n* **accessibility** - MD045\n* **atx** - MD018, MD019\n* **atx_closed** - MD020, MD021\n* **blank_lines** - MD012, MD022, MD031, MD032, MD047\n* **blockquote** - MD027, MD028\n* **bullet** - MD004, MD005, MD006, MD007, MD032\n* **code** - MD014, MD031, MD038, MD040, MD046\n* **emphasis** - MD036, MD037\n* **hard_tab** - MD010\n* **headers** - MD001, MD002, MD003, MD018, MD019, MD020, MD021, MD022, MD023,\n  MD024, MD025, MD026, MD036, MD041, MD043\n* **headings** - MD001, MD002, MD003, MD018, MD019, MD020, MD021, MD022, MD023,\n  MD024, MD025, MD026, MD036, MD041, MD043\n* **hr** - MD035\n* **html** - MD033\n* **images** - MD045\n* **indentation** - MD005, MD006, MD007, MD027\n* **language** - MD040\n* **line_length** - MD013\n* **links** - MD011, MD034, MD039, MD042\n* **ol** - MD029, MD030, MD032\n* **spaces** - MD018, MD019, MD020, MD021, MD023\n* **spelling** - MD044\n* **ul** - MD004, MD005, MD006, MD007, MD030, MD032\n* **url** - MD034\n* **whitespace** - MD009, MD010, MD012, MD027, MD028, MD030, MD037, MD038, MD039\n\n## Configuration\n\nText passed to `markdownlint` is parsed as Markdown, analyzed, and any issues reported.\nTwo kinds of text are ignored:\n\n* [HTML comments](https://www.w3.org/TR/html5/syntax.html#comments)\n* [Front matter](https://jekyllrb.com/docs/frontmatter/) (see `options.frontMatter` below)\n\nRules can be enabled, disabled, and configured via `options.config` (described\nbelow) to define the expected behavior for a set of inputs. To enable or disable\nrules within a file, add one of these markers to the appropriate place (HTML\ncomments don\'t appear in the final markup):\n\n* Disable all rules unconditionally: `<!-- markdownlint-disable -->`\n* Enable all rules unconditionally: `<!-- markdownlint-enable -->`\n* Disable one or more rules by name: `<!-- markdownlint-disable MD001 MD005 -->`\n* Enable one or more rules by name: `<!-- markdownlint-enable MD001 MD005 -->`\n* Capture the current rule configuration: `<!-- markdownlint-capture -->`\n* Restore the captured rule configuration: `<!-- markdownlint-restore -->`\n\nFor example:\n\n```markdown\n<!-- markdownlint-disable no-space-in-emphasis -->\ndeliberate space * in * emphasis\n<!-- markdownlint-enable no-space-in-emphasis -->\n```\n\nTo temporarily disable rule(s), then restore the former configuration:\n\n```markdown\n<!-- markdownlint-capture -->\n<!-- markdownlint-disable -->\nany violations you want\n<!-- markdownlint-restore -->\n```\n\nThe initial configuration is captured by default (as if every document began\nwith `<!-- markdownlint-capture -->`), so the pattern above can be expressed\nmore simply:\n\n```markdown\n<!-- markdownlint-disable -->\nany violations you want\n<!-- markdownlint-restore -->\n```\n\nChanges take effect starting with the line a comment is on, so the following\nhas no effect:\n\n```markdown\nspace * in * emphasis <!-- markdownlint-disable --> <!-- markdownlint-enable -->\n```\n\n## API\n\n### Linting\n\nStandard asynchronous interface:\n\n```js\n/**\n * Lint specified Markdown files.\n *\n * @param {Object} options Configuration options.\n * @param {Function} callback Callback (err, result) function.\n * @returns {void}\n */\nfunction markdownlint(options, callback) { ... }\n```\n\nSynchronous interface (for build scripts, etc.):\n\n```js\n/**\n * Lint specified Markdown files synchronously.\n *\n * @param {Object} options Configuration options.\n * @returns {Object} Result object.\n */\nfunction markdownlint.sync(options) { ... }\n```\n\n#### options\n\nType: `Object`\n\nConfigures the function.\n\n##### options.customRules\n\nType: `Array` of `Object`\n\nList of custom rules to include with the default rule set for linting.\n\nEach array element should define a rule. Rules are typically exported by another\npackage, but can be defined inline.\n\nExample:\n\n```js\nconst extraRules = require("extraRules");\nconst options = {\n  "customRules": [ extraRules.one, extraRules.two ]\n};\n```\n\nSee [CustomRules.md](doc/CustomRules.md) for details about authoring custom rules.\n\n##### options.files\n\nType: `Array` of `String`\n\nList of files to lint.\n\nEach array element should be a single file (via relative or absolute path);\n[globbing](https://en.wikipedia.org/wiki/Glob_%28programming%29) is the caller\'s\nresponsibility.\n\nExample: `[ "one.md", "dir/two.md" ]`\n\n##### options.strings\n\nType: `Object` mapping `String` to `String`\n\nMap of identifiers to strings for linting.\n\nWhen Markdown content is not available as files, it can be passed as strings.\nThe keys of the `strings` object are used to identify each input value in the\n`result` summary.\n\nExample:\n\n```json\n{\n  "readme": "# README\\n...",\n  "changelog": "# CHANGELOG\\n..."\n}\n```\n\n##### options.config\n\nType: `Object` mapping `String` to `Boolean | Object`\n\nConfigures the rules to use.\n\nObject keys are rule names or aliases and values are the rule\'s configuration.\nThe value `false` disables a rule, `true` enables its default configuration,\nand passing an object customizes its settings. Setting the special `default`\nrule to `true` or `false` includes/excludes all rules by default. Enabling or\ndisabling a tag name (ex: `whitespace`) affects all rules having that tag.\n\nThe `default` rule is applied first, then keys are processed in order from top\nto bottom with later values overriding earlier ones. Keys (including rule names,\naliases, tags, and `default`) are not case-sensitive.\n\nExample:\n\n```json\n{\n  "default": true,\n  "MD003": { "style": "atx_closed" },\n  "MD007": { "indent": 4 },\n  "no-hard-tabs": false,\n  "whitespace": false\n}\n```\n\nSets of rules (known as a "style") can be stored separately and loaded as\n[JSON](https://en.wikipedia.org/wiki/JSON).\n\nExample:\n\n```js\nconst options = {\n  "files": [ "..." ],\n  "config": require("style/relaxed.json")\n};\n```\n\nSee the [style](style) directory for more samples.\n\nSee [markdownlint-config-schema.json](schema/markdownlint-config-schema.json)\nfor the [JSON Schema](https://json-schema.org/) of the `options.config` object.\n\nFor more advanced scenarios, styles can reference and extend other styles. The\n`readConfig` and `readConfigSync` functions can be used to read such styles.\n\nFor example, assuming a `base.json` configuration file:\n\n```json\n{\n  "default": true\n}\n```\n\nAnd a `custom.json` configuration file:\n\n```json\n{\n  "extends": "base.json",\n  "line-length": false\n}\n```\n\nThen code like the following:\n\n```js\nconst options = {\n  "config": markdownlint.readConfigSync("./custom.json")\n};\n```\n\nMerges `custom.json` and `base.json` and is equivalent to:\n\n```js\nconst options = {\n  "config": {\n    "default": true,\n    "line-length": false\n  }\n};\n```\n\n##### options.frontMatter\n\nType: `RegExp`\n\nMatches any [front matter](https://jekyllrb.com/docs/frontmatter/) found at the\nbeginning of a file.\n\nSome Markdown content begins with metadata; the default `RegExp` for this option\nignores common forms of "front matter". To match differently, specify a custom\n`RegExp` or use the value `null` to disable the feature.\n\nThe default value:\n\n```js\n/((^---\\s*$[^]*?^---\\s*$)|(^\\+\\+\\+\\s*$[^]*?^(\\+\\+\\+|\\.\\.\\.)\\s*$))(\\r\\n|\\r|\\n|$)/m\n```\n\nIgnores [YAML](https://en.wikipedia.org/wiki/YAML) and\n[TOML](https://en.wikipedia.org/wiki/TOML) such as:\n\n```text\n---\nlayout: post\ntitle: Title\n---\n```\n\nNote: Matches must occur at the start of the file.\n\n##### options.handleRuleFailures\n\nType: `Boolean`\n\nCatches exceptions thrown during rule processing and reports the problem as a\nrule violation.\n\nBy default, exceptions thrown by rules (or the library itself) are unhandled\nand bubble up the stack to the caller in the conventional manner. By setting\n`handleRuleFailures` to `true`, exceptions thrown by failing rules will be\nhandled by the library and the exception message logged as a rule violation.\nThis setting can be useful in the presence of (custom) rules that encounter\nunexpected syntax and fail. By enabling this option, the linting process is\nallowed to continue and report any violations that were found.\n\n##### options.noInlineConfig\n\nType: `Boolean`\n\nDisables the use of HTML comments like `<!-- markdownlint-disable -->` to toggle\nrules within the body of Markdown content.\n\nBy default, properly-formatted inline comments can be used to create exceptions\nfor parts of a document. Setting `noInlineConfig` to `true` ignores all such\ncomments.\n\n##### options.resultVersion\n\nType: `Number`\n\nSpecifies which version of the `result` object to return (see the "Usage" section\nbelow for examples).\n\nPassing a `resultVersion` of `0` corresponds to the original, simple format where\neach error is identified by rule name and line number. *This is deprecated.*\n\nPassing a `resultVersion` of `1` corresponds to a detailed format where each error\nincludes information about the line number, rule name, alias, description, as well\nas any additional detail or context that is available. *This is deprecated.*\n\nPassing a `resultVersion` of `2` corresponds to a detailed format where each error\nincludes information about the line number, rule names, description, as well as any\nadditional detail or context that is available. *This is the default.*\n\nPassing a `resultVersion` of `3` corresponds to the detailed version `2` format\nwith additional information about how to fix automatically-fixable errors. In this\nmode, all errors that occur on each line are reported (other versions report only\nthe first error for each rule).\n\n##### options.markdownItPlugins\n\nType: `Array` of `Array` of `Function` and plugin parameters\n\nSpecifies additional [markdown-it plugins](https://www.npmjs.com/search?q=keywords:markdown-it-plugin)\nto use when parsing input. Plugins can be used to support additional syntax and\nfeatures for advanced scenarios.\n\nEach item in the top-level `Array` should be of the form:\n\n```js\n[ require("markdown-it-plugin"), plugin_param_0, plugin_param_1, ... ]\n```\n\n#### callback\n\nType: `Function` taking (`Error`, `Object`)\n\nStandard completion callback.\n\n#### result\n\nType: `Object`\n\nCall `result.toString()` for convenience or see below for an example of the\nstructure of the `result` object. Passing the value `true` to `toString()`\nuses rule aliases (ex: `no-hard-tabs`) instead of names (ex: `MD010`).\n\n### Config\n\nThe `options.config` configuration object is simple and can be stored in a file\nfor readability and easy reuse. The `readConfig` and `readConfigSync` functions\nload configuration settings and support the `extends` keyword for referencing\nother files (see above).\n\nBy default, configuration files are parsed as JSON (and named `.markdownlint.json`).\nCustom parsers can be provided to handle other formats like JSONC, YAML, and TOML.\n\nAsynchronous interface:\n\n```js\n/**\n * Read specified configuration file.\n *\n * @param {String} file Configuration file name/path.\n * @param {Array} [parsers] Optional parsing function(s).\n * @param {Function} callback Callback (err, result) function.\n * @returns {void}\n */\nfunction readConfig(file, parsers, callback) { ... }\n```\n\nSynchronous interface:\n\n```js\n/**\n * Read specified configuration file synchronously.\n *\n * @param {String} file Configuration file name/path.\n * @param {Array} [parsers] Optional parsing function(s).\n * @returns {Object} Configuration object.\n */\nfunction readConfigSync(file, parsers) { ... }\n```\n\n#### file\n\nType: `String`\n\nLocation of configuration file to read.\n\nThe `file` is resolved relative to the current working directory. If an `extends`\nkey is present once read, its value will be resolved as a path relative to `file`\nand loaded recursively. Settings from a file referenced by `extends` are applied\nfirst, then those of `file` are applied on top (overriding any of the same keys\nappearing in the referenced file).\n\n#### parsers\n\nType: *Optional* `Array` of `Function` taking (`String`) and returning `Object`\n\nArray of functions to parse configuration files.\n\nThe contents of a configuration file are passed to each parser function until one\nof them returns a value (vs. throwing an exception). Consequently, strict parsers\nshould come before flexible parsers.\n\nFor example:\n\n```js\n[ JSON.parse, require("toml").parse, require("js-yaml").safeLoad ]\n```\n\n#### callback\n\nType: `Function` taking (`Error`, `Object`)\n\nStandard completion callback.\n\n#### result\n\nType: `Object`\n\nConfiguration object.\n\n## Usage\n\nInvoke `markdownlint` and use the `result` object\'s `toString` method:\n\n```js\nconst markdownlint = require("markdownlint");\n\nconst options = {\n  "files": [ "good.md", "bad.md" ],\n  "strings": {\n    "good.string": "# good.string\\n\\nThis string passes all rules.",\n    "bad.string": "#bad.string\\n\\n#This string fails\\tsome rules."\n  }\n};\n\nmarkdownlint(options, function callback(err, result) {\n  if (!err) {\n    console.log(result.toString());\n  }\n});\n```\n\nOutput:\n\n```text\nbad.string: 3: MD010/no-hard-tabs Hard tabs [Column: 19]\nbad.string: 1: MD018/no-missing-space-atx No space after hash on atx style heading [Context: "#bad.string"]\nbad.string: 3: MD018/no-missing-space-atx No space after hash on atx style heading [Context: "#This string fails        some rules."]\nbad.string: 1: MD041/first-line-heading/first-line-h1 First line in file should be a top level heading [Context: "#bad.string"]\nbad.md: 3: MD010/no-hard-tabs Hard tabs [Column: 17]\nbad.md: 1: MD018/no-missing-space-atx No space after hash on atx style heading [Context: "#bad.md"]\nbad.md: 3: MD018/no-missing-space-atx No space after hash on atx style heading [Context: "#This file fails      some rules."]\nbad.md: 1: MD041/first-line-heading/first-line-h1 First line in file should be a top level heading [Context: "#bad.md"]\n```\n\nOr invoke `markdownlint.sync` for a synchronous call:\n\n```js\nconst result = markdownlint.sync(options);\nconsole.log(result.toString());\n```\n\nTo examine the `result` object directly:\n\n```js\nmarkdownlint(options, function callback(err, result) {\n  if (!err) {\n    console.dir(result, { "colors": true, "depth": null });\n  }\n});\n```\n\nOutput:\n\n```json\n{\n  "good.md": [],\n  "bad.md": [\n    { "lineNumber": 3,\n      "ruleNames": [ "MD010", "no-hard-tabs" ],\n      "ruleDescription": "Hard tabs",\n      "ruleInformation": "https://github.com/DavidAnson/markdownlint/blob/v0.0.0/doc/Rules.md#md010",\n      "errorDetail": "Column: 17",\n      "errorContext": null,\n      "errorRange": [ 17, 1 ] },\n    { "lineNumber": 1,\n      "ruleNames": [ "MD018", "no-missing-space-atx" ],\n      "ruleDescription": "No space after hash on atx style heading",\n      "ruleInformation": "https://github.com/DavidAnson/markdownlint/blob/v0.0.0/doc/Rules.md#md018",\n      "errorDetail": null,\n      "errorContext": "#bad.md",\n      "errorRange": [ 1, 2 ] },\n    { "lineNumber": 3,\n      "ruleNames": [ "MD018", "no-missing-space-atx" ],\n      "ruleDescription": "No space after hash on atx style heading",\n      "ruleInformation": "https://github.com/DavidAnson/markdownlint/blob/v0.0.0/doc/Rules.md#md018",\n      "errorDetail": null,\n      "errorContext": "#This file fails\\tsome rules.",\n      "errorRange": [ 1, 2 ] },\n    { "lineNumber": 1,\n      "ruleNames": [ "MD041", "first-line-heading", "first-line-h1" ],\n      "ruleDescription": "First line in file should be a top level heading",\n      "ruleInformation": "https://github.com/DavidAnson/markdownlint/blob/v0.0.0/doc/Rules.md#md041",\n      "errorDetail": null,\n      "errorContext": "#bad.md",\n      "errorRange": null }\n  ]\n}\n```\n\nIntegration with the [gulp](https://gulpjs.com/) build system is straightforward:\n\n```js\nconst gulp = require("gulp");\nconst through2 = require("through2");\nconst markdownlint = require("markdownlint");\n\ngulp.task("markdownlint", function task() {\n  return gulp.src("*.md", { "read": false })\n    .pipe(through2.obj(function obj(file, enc, next) {\n      markdownlint(\n        { "files": [ file.relative ] },\n        function callback(err, result) {\n          const resultString = (result || "").toString();\n          if (resultString) {\n            console.log(resultString);\n          }\n          next(err, file);\n        });\n    }));\n});\n```\n\nOutput:\n\n```text\n[00:00:00] Starting \'markdownlint\'...\nbad.md: 3: MD010/no-hard-tabs Hard tabs [Column: 17]\nbad.md: 1: MD018/no-missing-space-atx No space after hash on atx style heading [Context: "#bad.md"]\nbad.md: 3: MD018/no-missing-space-atx No space after hash on atx style heading [Context: "#This file fails      some rules."]\nbad.md: 1: MD041/first-line-heading/first-line-h1 First line in file should be a top level heading [Context: "#bad.md"]\n[00:00:00] Finished \'markdownlint\' after 10 ms\n```\n\nIntegration with the [Grunt](https://gruntjs.com/) build system is similar:\n\n```js\nconst markdownlint = require("markdownlint");\n\nmodule.exports = function wrapper(grunt) {\n  grunt.initConfig({\n    "markdownlint": {\n      "example": {\n        "src": [ "*.md" ]\n      }\n    }\n  });\n\n  grunt.registerMultiTask("markdownlint", function task() {\n    const done = this.async();\n    markdownlint(\n      { "files": this.filesSrc },\n      function callback(err, result) {\n        const resultString = err || ((result || "").toString());\n        if (resultString) {\n          grunt.fail.warn("\\n" + resultString + "\\n");\n        }\n        done(!err || !resultString);\n      });\n  });\n};\n```\n\nOutput:\n\n```text\nRunning "markdownlint:example" (markdownlint) task\nWarning:\nbad.md: 3: MD010/no-hard-tabs Hard tabs [Column: 17]\nbad.md: 1: MD018/no-missing-space-atx No space after hash on atx style heading [Context: "#bad.md"]\nbad.md: 3: MD018/no-missing-space-atx No space after hash on atx style heading [Context: "#This file fails      some rules."]\nbad.md: 1: MD041/first-line-heading/first-line-h1 First line in file should be a top level heading [Context: "#bad.md"]\n Use --force to continue.\n```\n\n## Browser\n\n`markdownlint` also works in the browser.\n\nGenerate normal and minified scripts with:\n\n```shell\nnpm run build-demo\n```\n\nThen reference `markdown-it` and `markdownlint`:\n\n```html\n<script src="demo/markdown-it.min.js"></script>\n<script src="demo/markdownlint-browser.min.js"></script>\n```\n\nAnd call it like so:\n\n```js\nconst options = {\n  "strings": {\n    "content": "Some Markdown to lint."\n  }\n};\nconst results = window.markdownlint.sync(options).toString();\n```\n\n## Examples\n\nFor ideas how to integrate `markdownlint` into your workflow, refer to the following projects:\n\n* [.NET Documentation](https://docs.microsoft.com/en-us/dotnet/) ([Search repository](https://github.com/dotnet/docs/search?q=markdownlint))\n* [ally.js](https://allyjs.io/) ([Search repository](https://github.com/medialize/ally.js/search?q=markdownlint))\n* [Boostnote](https://boostnote.io/) ([Search repository](https://github.com/BoostIO/Boostnote/search?q=markdownlint))\n* [CodiMD](https://github.com/hackmdio/codimd) ([Search repository](https://github.com/hackmdio/codimd/search?q=markdownlint))\n* [ESLint](https://eslint.org/) ([Search repository](https://github.com/eslint/eslint/search?q=markdownlint))\n* [Garden React Components](https://garden.zendesk.com/react-components/)  ([Search repository](https://github.com/zendeskgarden/react-components/search?q=markdownlint))\n* [Mocha](https://mochajs.org/) ([Search repository](https://github.com/mochajs/mocha/search?q=markdownlint))\n* [Reactable](https://glittershark.github.io/reactable/) ([Search repository](https://github.com/glittershark/reactable/search?q=markdownlint))\n* [Sinon.JS](https://sinonjs.org/) ([Search repository](https://github.com/sinonjs/sinon/search?q=markdownlint))\n* [TestCafe](https://devexpress.github.io/testcafe/) ([Search repository](https://github.com/DevExpress/testcafe/search?q=markdownlint))\n* [TypeScript Handbook](https://www.typescriptlang.org/docs/handbook/basic-types.html) ([Search repository](https://github.com/Microsoft/TypeScript-Handbook/search?q=markdownlint))\n* [V8](https://v8.dev/) ([Search repository](https://github.com/v8/v8.dev/search?q=markdownlint))\n* [webhint](https://webhint.io/) ([Search repository](https://github.com/webhintio/hint/search?q=markdownlint))\n* [webpack](https://webpack.js.org/) ([Search repository](https://github.com/webpack/webpack.js.org/search?q=markdownlint))\n\n## Contributing\n\nSee [CONTRIBUTING.md](CONTRIBUTING.md) for more information.\n\n## History\n\n* 0.0.1 - Initial release, includes tests MD001-MD032.\n* 0.0.2 - Improve documentation, tests, and code.\n* 0.0.3 - Add synchronous API, improve documentation and code.\n* 0.0.4 - Add tests MD033-MD040, update dependencies.\n* 0.0.5 - Add `strings` option to enable file-less scenarios, add in-browser demo.\n* 0.0.6 - Improve performance, simplify in-browser, update dependencies.\n* 0.0.7 - Add MD041, improve MD003, ignore front matter, update dependencies.\n* 0.0.8 - Support disabling/enabling rules inline, improve code fence, dependencies.\n* 0.1.0 - Add aliases, exceptions for MD033, exclusions for MD013, dependencies.\n  * 0.1.1 - Fix bug handling HTML in tables, reference markdownlint-cli.\n* 0.2.0 - Add MD042/MD043, enhance MD002/MD003/MD004/MD007/MD011/MD025/MD041, dependencies.\n* 0.3.0 - More detailed error reporting with `resultVersion`, enhance MD010/MD012/MD036,\n          fixes for MD027/MD029/MD030, include JSON schema, dependencies.\n  * 0.3.1 - Fix regressions in MD032/MD038, update dependencies.\n* 0.4.0 - Add MD044, enhance MD013/MD032/MD041/MD042/MD043, fix for MD038, dependencies.\n  * 0.4.1 - Fixes for MD038/front matter, improvements to MD044, update dependencies.\n* 0.5.0 - Add shareable configuration, `noInlineConfig` option, README links, fix MD030,\n          improve MD009/MD041, update dependencies.\n* 0.6.0 - `resultVersion` defaults to 1 (breaking change), ignore HTML comments, TOML\n          front matter, fixes for MD044, update dependencies.\n  * 0.6.1 - Update `markdown-it` versioning, exclude demo/test from publishing.\n  * 0.6.2 - Improve MD013/MD027/MD034/MD037/MD038/MD041/MD044, update dependencies.\n  * 0.6.3 - Improve highlighting for MD020.\n  * 0.6.4 - Improve MD029/MD042, update dependencies.\n* 0.7.0 - `resultVersion` defaults to 2 (breaking change), add MD045, improve MD029,\n          remove trimLeft/trimRight, split rules, refactor, update dependencies.\n* 0.8.0 - Add support for using and authoring custom rules, improve MD004/MD007/MD013,\n          add `engines` to `package.json`, refactor, update dependencies.\n  * 0.8.1 - Update item loop to be iterative, improve MD014, update dependencies.\n* 0.9.0 - Remove support for end-of-life Node versions 0.10/0.12/4, change "header" to\n          "heading" per spec (non-breaking), improve MD003/MD009/MD041, handle uncommon\n          line-break characters, refactor for ES6, update dependencies.\n* 0.10.0 - Add support for non-JSON configuration files, pass file/string name to custom\n           rules, update dependencies.\n* 0.11.0 - Improve MD005/MD024/MD029/MD038, improve custom rule example, add CONTRIBUTING.md,\n           update dependencies.\n* 0.12.0 - Add `information` link for custom rules, `markdownItPlugins` for extensibility,\n           improve MD023/MD032/MD038, update dependencies.\n* 0.13.0 - Improve MD013/MD022/MD025/MD029/MD031/MD032/MD037/MD041/, deprecate MD002,\n           improve pandoc YAML support, update dependencies.\n* 0.14.0 - Remove support for end-of-life Node version 6, introduce `markdownlint-rule-helpers`,\n           add MD046/MD047, improve MD033/MD034/MD039, improve custom rule validation and\n           in-browser demo, update dependencies.\n  * 0.14.1 - Improve MD033.\n  * 0.14.2 - Improve MD047, add `handleRuleFailures` option.\n* 0.15.0 - Add `markdownlint-capture`/`markdownlint-restore` inline comments, improve\n           MD009/MD013/MD026/MD033/MD036, update dependencies.\n* 0.16.0 - Add custom rule sample for linting code, improve MD026/MD031/MD033/MD038,\n           update dependencies.\n* 0.17.0 - Add `resultVersion` 3 to support fix information for default and custom rules,\n           add fix information for 24 rules, update newline handling to match latest\n           CommonMark specification, improve MD014/MD037/MD039, update dependencies.\n  * 0.17.1 - Fix handling of front matter by fix information.\n  * 0.17.2 - Improve MD020/MD033/MD044.\n\n[npm-image]: https://img.shields.io/npm/v/markdownlint.svg\n[npm-url]: https://www.npmjs.com/package/markdownlint\n[devops-image]: https://img.shields.io/azure-devops/build/DavidAnson/5b2bff85-0fe6-47b4-a561-fa87be89f032/1/master.svg?label=tests\n[devops-url]: https://dev.azure.com/DavidAnson/markdownlint-ci/_build/latest?definitionId=1&branchName=master\n[license-image]: https://img.shields.io/npm/l/markdownlint.svg\n[license-url]: https://opensource.org/licenses/MIT\n'