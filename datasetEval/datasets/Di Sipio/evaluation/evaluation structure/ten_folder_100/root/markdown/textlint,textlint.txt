b'# textlint\n\n[![textlint logo](https://textlint.github.io/media/logo/spaced/textlint-logo.png)](https://textlint.github.io/)\n\n> The pluggable linting tool for text and markdown.  \ntextlint is similar to [ESLint](http://eslint.org/ "ESLint"), but it\'s for use with natural language.\n\n<!-- textlint-disable -->\n\n[![GitHub Actions Build Status](https://github.com/textlint/textlint/workflows/CI/badge.svg)](https://github.com/textlint/textlint/actions?workflow=CI)\n[![Travis CI Build Status](https://travis-ci.org/textlint/textlint.svg)](https://travis-ci.org/textlint/textlint)\n[![Build status](https://ci.appveyor.com/api/projects/status/4kwh41gxpc4h0obt?svg=true)](https://ci.appveyor.com/project/azu/textlint)\n\n<!-- textlint-enable -->\n\n## Website\n\n- Online demo\n- Searchable documents\n- Release blog\n\nVisit [https://textlint.github.io/](https://textlint.github.io/).\n\n## Features\n\n- No bundled rules.\n- To use a rule, install a textlint rule via npm.\n    - `npm install textlint-rule-xxx`.\n    - See [collection of textlint rules](https://github.com/textlint/textlint/wiki/Collection-of-textlint-rule "Collection of textlint rule \xc2\xb7 textlint/textlint Wiki")\n- [Markdown](./packages/@textlint/textlint-plugin-markdown) and [plain text](./packages/@textlint/textlint-plugin-text) are supported by default. Support is available for [HTML](https://github.com/textlint/textlint-plugin-html) and [other file formats](https://github.com/textlint/textlint#supported-file-formats) via plugins.\n- Supports the use of custom formatters and formatter bundles [formatter(reporter)](./packages/@textlint/linter-formatter)\n\n## Quick Tour\n\nFor a quick tour of textlint, checkout our [Getting Started](./docs/getting-started.md) guide :squirrel:\n\n## Installation\n\nYou can install the `textlint` command using npm:\n\n```\n$ npm install textlint --global\n```\n\n**Requirements**:\n\n- Node.js 6.0.0+\n- npm 2.0.0+\n\nIf you\'re not sure what version of Node you\'re running, you can run `node -v` in your console to find out.\n\n**:warning: Warning:**\n\n- If you have installed `textlint` globally you must install each reference rule globally as well.\n- If you have installed `textlint` locally you must install each rule locally as well.\n\nWe recommend installing `textlint` locally.\n\n### For Node.js beginners\n\nIf you\'ve never used Node.js and npm, please see the following:\n\n- [Installing Node.js and updating npm | npm Documentation](https://docs.npmjs.com/getting-started/installing-node "02 - Installing Node.js and updating npm | npm Documentation")\n\n## Usage\n\n![screenshot lint pretty-error](docs/assets/screenshot-lint-pretty-error.png)\n\ntextlint has no default rules!!\n\nYou can run textlint with the `--rule` or `--rulesdir` flag to specify rules, or you can just use a `.textlintrc` config file.\n\n```sh\n# Install textlint\'s rule\nnpm install --global textlint-rule-no-todo\n```\n\nUse with `textlint-rule-no-todo` rule.\n(Allow to short `textlint-rule-no-todo` to `no-todo`)\n\n```sh\ntextlint --rule no-todo README.md\n```\n\n:memo: We recommended using `.textlintrc` to specify rules instead of `--rule` or `--rulesdir` flags.\nYour `.textlintrc` is a great way to maintain your rules.\n\n## CLI\n\nRun `textlint -h` for information on how to use the CLI.\n\n```\n$ textlint [options] file.md [file|dir|glob*]\n  \n  Options:\n    -h, --help                 Show help.\n    -c, --config path::String  Use configuration from this file or sharable config.\n    --init                     Create the config file if not existed. - default: false\n    --fix                      Automatically fix problems\n    --dry-run                  Enable dry-run mode for --fix. Only show result, don\'t change the file.\n    --debug                    Outputs debugging information\n    -v, --version              Outputs the version number.\n  \n  Using stdin:\n    --stdin                    Lint text provided on <STDIN>. - default: false\n    --stdin-filename String    Specify filename to process STDIN as\n  \n  Output:\n    -o, --output-file path::String  Enable report to be written to a file.\n    -f, --format String        Use a specific output format.\n                               Available formatter          : checkstyle, compact, jslint-xml, json, junit, pretty-error, stylish, table, tap, unix\n                               Available formatter for --fix: compats, diff, json, stylish\n    --no-color                 Disable color in piped output.\n    --quiet                    Report errors only. - default: false\n  \n  Specifying rules and plugins:\n    --no-textlintrc            Disable .textlintrc\n    --plugin [String]          Set plugin package name\n    --rule [path::String]      Set rule package name\n    --preset [path::String]    Set preset package name and load rules from preset package.\n    --rulesdir [path::String]  Set rules from this directory and set all default rules to off.\n  \n  Caching:\n    --cache                    Only check changed files - default: false\n    --cache-location path::String  Path to the cache file or directory\n  \n  Experimental:\n    --experimental             Enable experimental flag.Some feature use on experimental.\n    --rules-base-directory path::String  Set module base directory. textlint load modules(rules/presets/plugins) from the base directory.\n\n```\n\nWhen running texlint, you can target files to lint using the glob patterns. Make sure that you enclose any glob parameter you pass in quotes.\n\n```sh\n$ textlint "docs/**"\n```\n\nExample:\n\n- :information_source: See [examples/cli](examples/cli)\n\n\n## .textlintrc\n\n`.textlintrc` is config file that is loaded as JSON, YAML or JS via [azu/rc-config-loader](https://github.com/azu/rc-config-loader).\n\nRunning textlint with the following arguments\n\n```\n$ textlint --rule no-todo --rule very-nice-rule README.md\n```\n\nis equivalent to running `textlint README.md` in a directory with a `.textlintrc` containing the following json\n\n```json\n{\n  "rules": {\n    "no-todo": true,\n    "very-nice-rule": true\n  }\n}\n```\n\nYou can also configure options for specific rules in your `.textlintrc` file.\n\n```json\n{\n  "rules": {\n    "no-todo": false, // disable\n    "very-nice-rule": {\n        "key": "value"\n    }\n  }\n}\n```\n\nFor example here we pass the options ("key": "value") to `very-nice-rule`.\n\nOptions can be specified in your `.textlintrc` file as follows:\n\n<!-- textlint-disable -->\n\n```js\n{\n  // Allow to comment in JSON\n  "rules": {\n    "<rule-name>": true | false | object\n  }\n}\n```\n\n<!-- textlint-enable -->\n\n:information_source: for more details see\n\n- [docs/configuring](docs/configuring.md)\n- [examples/config-file](examples/config-file)\n\n### Plugin\n\nA textlint plugin is a set of rules and rulesConfig or customize parser.\n\nTo enable plugin, put the "plugin-name" into `.textlintrc`.\n\n<!-- textlint-disable -->\n\n```js\n// `.textlintrc`\n{\n    "plugins": [\n        "plugin-name"\n    ],\n    // overwrite-plugins rules config\n    // <plugin>/<rule>\n    "rules": {\n        "plugin-name/rule-name" : false\n    }\n}\n```\n\n<!-- textlint-enable -->\n\n:information_source: See [docs/plugin.md](docs/plugin.md)\n\n### Supported file formats\n\ntextlint supports Markdown and plain text by default.\n\nInstall **Processor Plugin** and add new file format support.\n\nFor example, if you want to lint HTML, use [textlint-plugin-html](https://github.com/textlint/textlint-plugin-html "textlint-plugin-html") as a plugin.\n\n    npm install textlint-plugin-html\n\nAdd `"html"` to `.textlintrc`\n\n```\n{\n    "plugins": [\n        "html"\n    ]\n}\n```\n\nRun textlint on `.html` files:\n\n  textlint index.html\n\n- Example: [examples/html-plugin](examples/html-plugin)\n- Documentation: [docs/plugin.md](docs/plugin.md)\n\nOptional supported file types:\n\n- HTML: [textlint-plugin-html](https://github.com/textlint/textlint-plugin-html "textlint-plugin-html")\n- reStructuredText: [textlint-plugin-rst](https://github.com/jimo1001/textlint-plugin-rst "textlint-plugin-rst")\n- AsciiDoc/Asciidoctor: [textlint-plugin-asciidoc-loose](https://github.com/azu/textlint-plugin-asciidoc-loose "textlint-plugin-asciidoc-loose")\n- Re:VIEW: [textlint-plugin-review](https://github.com/orangain/textlint-plugin-review "textlint-plugin-review")\n\nSee [Processor Plugin List](https://github.com/textlint/textlint/wiki/Collection-of-textlint-rule#processor-plugin-list "Processor Plugin List") for details.\n\n\n### Rules list :green_heart:\n\ntextlint has not built-in rules, but there are 100+ pluggable rules:\n\n- [textlint-rule-no-todo](https://github.com/textlint-rule/textlint-rule-no-todo)\n- [textlint-rule-max-number-of-lines](https://github.com/azu/textlint-rule-max-number-of-lines)\n- [textlint-rule-common-misspellings](https://github.com/io-monad/textlint-rule-common-misspellings)\n- [etc...](https://github.com/textlint/textlint/wiki/Collection-of-textlint-rule)\n\nSee [A Collection of textlint rule \xc2\xb7 textlint/textlint Wiki](https://github.com/textlint/textlint/wiki/Collection-of-textlint-rule "Collection of textlint rule \xc2\xb7 textlint/textlint Wiki") for more details.\n\n\nIf you create a new rule, and add it to the wiki :)\n\n### Fixable\n\n[![textlint rule](https://img.shields.io/badge/textlint-fixable-green.svg?style=social)](https://textlint.github.io/)\n\nSome rules are fixable using the `--fix` command line flag.\n\n``` sh\n$ textlint --fix README.md\n# As a possible, textlint fix the content.\n```\n\n![fixable-error](./docs/assets/fixable-error.png)\n\nAlso, support [dry run](https://en.wikipedia.org/wiki/Dry_run_(testing) "dry run") mode.\n\n```\n$ textlint --fix --dry-run --format diff README.md\n# show the difference between fixed content and original content.\n```\n\nYou can copy and paste to your README.\n\n```markdown\n[![textlint fixable rule](https://img.shields.io/badge/textlint-fixable-green.svg?style=social)](https://textlint.github.io/)\n```\n\n### Built-in formatters\n\nUse the following formatters:\n\n- stylish (defaults)\n- compact\n- checkstyle\n- jslint-xml\n- junit\n- tap\n- table\n- pretty-error\n- json\n- unix\n\ne.g. use `pretty-error` formatter:\n\n```\n$ textlint -f pretty-error file.md\n```\n\nMore details in [@textlint/linter-formatter](./packages/@textlint/linter-formatter "@textlint/linter-formatter").\n\n## Use as node module\n\nYou can use textlint as node module.\n\n```\n$ npm install textlint --save-dev\n```\n\nMinimal usage:\n\n```js\nimport { TextLintEngine } from "textlint";\nconst engine = new TextLintEngine({\n    rulePaths: ["path/to/rule-dir"]\n});\nengine.executeOnFiles(["README.md"]).then(results => {\n    console.log(results[0].filePath); // => "README.md"\n    // messages are `TextLintMessage` array.\n    console.log(results[0].messages);\n    /*\n    [\n        {\n            id: "rule-name",\n            message:"lint message",\n            line: 1, // 1-based columns(TextLintMessage)\n            column:1 // 1-based columns(TextLintMessage)\n        }\n    ]\n     */\n    if (engine.isErrorResults(results)) {\n        const output = engine.formatResults(results);\n        console.log(output);\n    }\n});\n```\n\nLow level usage:\n\n```js\nimport { textlint } from "textlint";\ntextlint.setupRules({\n    // rule-key : rule function(see docs/rule.md)\n    "rule-key"(context) {\n        const exports = {};\n        exports[context.Syntax.Str] = function(node) {\n            context.report(node, new context.RuleError("error message"));\n        };\n        return exports;\n    }\n});\ntextlint.lintMarkdown("# title").then(results => {\n    console.log(results[0].filePath); // => "README.md"\n    console.log(results[0].messages); // => [{message:"lint message"}]\n});\n```\n\nMore details on:\n\n- See [docs/use-as-modules.md](docs/use-as-modules.md)\n\n\n## Conclusion\n\ntextlint has four extensible points:\n\n- [rule](docs/rule.md)\n    - rule is a rule for linting.\n- [filter rule](docs/filter-rule.md)\n    - filter rule is a rule for filtering result of errors.\n- [rule-preset](docs/rule-preset.md)\n    - rule-preset contains rules.\n- [plugin](docs/plugin.md)\n    - plugin contains a processor.\n\n![rule-preset-plugin](docs/assets/rule-preset-plugin.png)\n\n## FAQ: How to create rules?\n\nPlease see docs/\n\n- [docs/txtnode.md](docs/txtnode.md)\n    - What is TxtNode?\n- [docs/rule.md](docs/rule.md)\n    - How to create rules?\n    - Tutorial: creating `no-todo` rule.\n- [docs/rule-advanced.md](docs/rule-advanced.md)\n    - Advanced tutorial for creating rule.\n\n## FAQ: How to suppress error by comments like `<!-- textlint-disable -->`?\n\nYou can use filter rule like [textlint-filter-rule-comments](https://github.com/textlint/textlint-filter-rule-comments "textlint-filter-rule-comments").\n\nPlease see [docs/configuring.md](docs/configuring.md) for more details.\n\n## Integrations\n\nFor more details, see [integrations document](./docs/integrations.md).\n\n### App\n\n- [textlint-app](https://github.com/textlint/textlint-app "textlint-app")\n  - Standalone cross platform app. No need Node.js environment.\n\n### Build Systems\n\n- gulp plugin\n  - [gulp-textlint](https://github.com/textlint/gulp-textlint "gulp-textlint")\n- Grunt plugin\n  - [grunt-textlint](https://github.com/textlint/grunt-textlint "grunt-textlint")\n\n### Editors\n\n- Atom Editor\n  - [1000ch/linter-textlint](https://github.com/1000ch/linter-textlint "1000ch/linter-textlint")\n- SublimeText\n  - [joeybaker/sublimelinter-textlint](https://github.com/joeybaker/sublimelinter-textlint)\n- Vim\n  - [vim-textlint](https://github.com/heavenshell/vim-textlint "vim-textlint")\n  - [scrooloose/syntastic](https://github.com/vim-syntastic/syntastic "scrooloose/syntastic")\n    - See [Markdown](https://github.com/vim-syntastic/syntastic/wiki/Markdown "Markdown"), [Text](https://github.com/vim-syntastic/syntastic/wiki/Text "Text") and [HTML](https://github.com/vim-syntastic/syntastic/wiki/HTML "HTML") of [scrooloose/syntastic Wiki](https://github.com/vim-syntastic/syntastic/wiki/Syntax-Checkers "Syntax Checkers \xc2\xb7 scrooloose/syntastic Wiki")\n- VS Code\n  - [taichi/vscode-textlint](https://github.com/taichi/vscode-textlint)\n- [micro](https://github.com/zyedidia/micro "micro")\n  - [hidaruma/micro-textlint-plugin](https://github.com/hidaruma/micro-textlint-plugin "hidaruma/micro-textlint-plugin: textlint plugin for micro-editor")\n- NetBeans\n  - [netbeans-textlint-plugin](https://github.com/junichi11/netbeans-textlint-plugin "netbeans-textlint-plugin")\n\n### Browser\n\n- Chrome Extension\n  - [Chrome: textlint-proofreader](https://chrome.google.com/webstore/detail/textlint-proofreader/hdongmdneapmhfblomidbafplpanpdmm)\n  - [io-monad/textlint-chrome-extension: textlint Chrome Extension](https://github.com/io-monad/textlint-chrome-extension "io-monad/textlint-chrome-extension: textlint Chrome Extension")\n\n### Other\n\n- [Pronto](https://github.com/prontolabs/pronto "Pronto"): [pronto-textlint](https://github.com/seikichi/pronto-textlint "pronto-textlint")\n- [reviewdog](https://github.com/reviewdog/reviewdog "reviewdog"): [azu/textlint-reviewdog-example](https://github.com/azu/textlint-reviewdog-example "azu/textlint-reviewdog-example: textlint + reviewdog example project")\n\n## Who\'s using textlint?\n\n- [survivejs/webpack-book](https://github.com/survivejs/webpack-book "survivejs/webpack-book: From apprentice to master (CC BY-NC-ND)")\n- [hoodiehq/hoodie](https://github.com/hoodiehq/hoodie "hoodiehq/hoodie")\n- [asciidwango/js-primer](https://github.com/asciidwango/js-primer "asciidwango/js-primer: JavaScript\xe3\x81\xae\xe5\x85\xa5\xe9\x96\x80\xe6\x9b\xb8")\n- [vuejs-jp/vuejs.org](https://github.com/vuejs-jp/jp.vuejs.org "vuejs-jp/vuejs.org")\n- [cypress-io/cypress-documentation](https://github.com/cypress-io/cypress-documentation "cypress-io/cypress-documentation: Cypress Documentation including Guides, API, Plugins, Examples, & FAQ. docs.cypress.io")\n\n## Packages\n\nThis repository is a monorepo that we manage using [Lerna](https://github.com/lerna/lerna). That means that we actually publish [several packages](./packages) to npm from the same codebase, including:\n\n### Core\n\nThese modules are parts of textlint.\n\n| Package                                  | Version                                  | Description                              |\n| :--------------------------------------- | :--------------------------------------- | :--------------------------------------- |\n| [`textlint`](./packages/textlint)        | [![npm](https://img.shields.io/npm/v/textlint.svg?style=flat-square)](https://www.npmjs.com/package/textlint) | textlint command line tool itself        |\n| [`@textlint/kernel`](./packages/@textlint/kernel) | [![npm](https://img.shields.io/npm/v/@textlint/kernel.svg?style=flat-square)](https://www.npmjs.com/package/@textlint/kernel) | textlint main logic module. It is universal JavaScript. |\n| [`@textlint/linter-formatter`](./packages/@textlint/linter-formatter) | [![npm](https://img.shields.io/npm/v/@textlint/linter-formatter.svg?style=flat-square)](https://www.npmjs.com/package/@textlint/linter-formatter) | textlint output formatter                |\n| [`@textlint/fixer-formatter`](./packages/@textlint/fixer-formatter) | [![npm](https://img.shields.io/npm/v/@textlint/fixer-formatter.svg?style=flat-square)](https://www.npmjs.com/package/@textlint/fixer-formatter) | textlint output formatter for fixer      |\n| [`@textlint/textlint-plugin-markdown`](./packages/@textlint/textlint-plugin-markdown) | [![npm](https://img.shields.io/npm/v/@textlint/textlint-plugin-markdown.svg?style=flat-square)](https://www.npmjs.com/package/@textlint/textlint-plugin-markdown) | markdown support for textlint            |\n| [`@textlint/textlint-plugin-text`](./packages/@textlint/textlint-plugin-text) | [![npm](https://img.shields.io/npm/v/@textlint/textlint-plugin-text.svg?style=flat-square)](https://www.npmjs.com/package/@textlint/textlint-plugin-text) | plain text support for textlint          |\n| [`@textlint/ast-tester`](./packages/@textlint/ast-tester) | [![npm](https://img.shields.io/npm/v/@textlint/ast-tester.svg?style=flat-square)](https://www.npmjs.com/package/@textlint/ast-tester) | Compliance tests for textlint\'s AST      |\n| [`@textlint/markdown-to-ast`](./packages/@textlint/markdown-to-ast) | [![npm](https://img.shields.io/npm/v/@textlint/markdown-to-ast.svg?style=flat-square)](https://www.npmjs.com/package/@textlint/markdown-to-ast) | markdown parser                          |\n| [`@textlint/ast-traverse`](./packages/@textlint/ast-traverse) | [![npm](https://img.shields.io/npm/v/@textlint/ast-traverse.svg?style=flat-square)](https://www.npmjs.com/package/@textlint/ast-traverse) | TxtNode traverse library                 |\n| [`@textlint/text-to-ast`](./packages/@textlint/text-to-ast)    | [![npm](https://img.shields.io/npm/v/@textlint/text-to-ast.svg?style=flat-square)](https://www.npmjs.com/package/@textlint/text-to-ast) | plain text parser                        |\n\n\n### Rule/Plugin helper\n\nThese modules are useful for textlint rule/plugin author.\n\n| Package                                  | Version                                  | Description                              |\n| :--------------------------------------- | :--------------------------------------- | :--------------------------------------- |\n| [`@textlint/ast-node-types`](./packages/@textlint/ast-node-types) | [![npm](https://img.shields.io/npm/v/@textlint/ast-node-types.svg?style=flat-square)](https://www.npmjs.com/package/@textlint/ast-node-types) | [textlint AST(Abstract Syntax Tree)](./docs/txtnode.md) type definition |\n| [`textlint-tester`](./packages/textlint-tester) | [![npm](https://img.shields.io/npm/v/textlint-tester.svg?style=flat-square)](https://www.npmjs.com/package/textlint-tester) | textlint rule testing tools              |\n| [`textlint-scripts`](https://github.com/textlint/textlint-scripts) | [![npm](https://img.shields.io/npm/v/textlint-scripts.svg?style=flat-square)](https://www.npmjs.com/package/textlint-scripts) | textlint rule npm run-scripts            |\n| [`create-textlint-rule`](https://github.com/textlint/create-textlint-rule) | [![npm](https://img.shields.io/npm/v/create-textlint-rule.svg?style=flat-square)](https://www.npmjs.com/package/create-textlint-rule) | create textlint rule with no build configuration |\n\n\n### Integrations\n\nThese modules are useful integration with textlint.\n\n| Package                                  | Version                                  | Description              |\n| :--------------------------------------- | :--------------------------------------- | :----------------------- |\n| [`gulp-textlint`](./packages/gulp-textlint) | [![npm](https://img.shields.io/npm/v/gulp-textlint.svg?style=flat-square)](https://www.npmjs.com/package/gulp-textlint) | gulp plugin for textlint |\n\n\n### Internal\n\nThese modules are internal usage in the monorepo.\n\n| Package                                  | Version                                  | Description          |\n| :--------------------------------------- | :--------------------------------------- | :------------------- |\n| [`@textlint/feature-flag`](./packages/@textlint/feature-flag) | [![npm](https://img.shields.io/npm/v/@textlint/feature-flag.svg?style=flat-square)](https://www.npmjs.com/package/@textlint/feature-flag) | feature flag manager |\n\n\n## Semantic Versioning Policy\n\ntextlint project follow [Semantic Versioning](https://semver.org/ "Semantic Versioning").\nHowever, textlint is not different with most semver project.\n\n- Patch release (intended to not break your lint build)\n    - A bug fix to the CLI or core (including formatters).\n    - Improvements to documentation.\n    - Non-user-facing changes such as refactoring.\n    - Re-releasing after a failed release (i.e., publishing a release that doesn\'t work for anyone).\n- Minor release (might break your lint build)\n    - A new option.\n    - An existing rule is deprecated.\n    - A new CLI capability is created.\n    - New public API are added (new classes, new methods, new arguments to existing methods, etc.).\n        - It might break type interface(`.d.ts`)\n    - A new formatter is created.\n- Major release (break your lint build)\n    - A new option to an existing rule that results in ESLint reporting more errors by default.\n    - An existing formatter is removed.\n    - Part of the public API is removed or changed in an incompatible way.\n\n## Contributing\n\nFor bugs and feature requests, [please create an issue](https://github.com/textlint/textlint/issues).\n\nPull requests is always welcome.\n\nFor more details, see [Contributing Guide](docs/CONTRIBUTING.md).\n\n## License\n\nMIT \xc2\xa9 azu\n\nCopy some code from ESLint.\n\n    ESLint\n    Copyright (c) 2013 Nicholas C. Zakas. All rights reserved.\n    https://github.com/eslint/eslint/blob/master/LICENSE\n\n## Logos & Icons\n\nDownload from [textlint/media](https://github.com/textlint/media "textlint/media: Official logo and icon.").\n\n## Related Work\n\n<!-- textlint-disable -->\n\n[SCG: TextLint](http://scg.unibe.ch/research/textlint "SCG: TextLint") is similar project.\n\n[SCG: TextLint](http://scg.unibe.ch/research/textlint "SCG: TextLint")\'s place is equal to my `textlint`(Fortuitously, project\'s name is the same too!).\n\n![concept](http://monosnap.com/image/Gr9CGbkSjl1FXEL0LIWzNDAj3c24JT.png)\n\nvia [Natural Language Checking with Program Checking Tools](https://www.slideshare.net/renggli/text-lint "Natural Language Checking with Program Checking Tools")\n\n## Acknowledgements\n\nThanks to [ESLint](https://eslint.org/ "ESLint").\n\n<!-- textlint-enable -->\n'