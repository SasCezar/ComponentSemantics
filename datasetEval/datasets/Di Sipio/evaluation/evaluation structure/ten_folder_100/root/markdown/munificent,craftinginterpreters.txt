b'This is the repo used for the in-progress book "[Crafting Interpreters][]". It\ncontains the Markdown text of the book, full implementations of both\ninterpreters, as well as the build system to weave the two together into the\nfinal site.\n\n[crafting interpreters]: http://craftinginterpreters.com\n\nIf you find an error or have a suggestion, please do file an issue here. Thank\nyou!\n\n## Contributing\n\nOne of the absolute best things about writing a book online and putting it out\nthere before it\'s done is that people like you have been kind enough to give me\nfeedback, point out typos, and find other errors or unclear text.\n\nIf you\'d like to do that, great! You can just file bugs here on the repo, or\nsend a pull request if you\'re so inclined. If you want to send a pull request,\nbut don\'t want to get the build system set up to regenerate the HTML too, don\'t\nworry about it. I\'ll do that when I pull it in.\n\n## Ports and implementations\n\nAnother way to get involved is by sharing your own implementation of Lox. Ports\nto other languages are particularly useful since not every reader likes Java and\nC. Feel free to add your Lox port or implementation to the wiki:\n\n* [Lox implementations][]\n\n[lox implementations]: https://github.com/munificent/craftinginterpreters/wiki/Lox-implementations\n\n## Building Stuff\n\nI am a terribly forgetful, error-prone mammal, so I automated as much as I\ncould.\n\n### Prerequisites\n\nI develop on an OS X machine, but any POSIX system should work too. With a\nlittle extra effort, you should be able to get this working on Windows as well,\nthough I can\'t help you out much.\n\nMost of the work is orchestrated by make. The build scripts, test runner, and\nother utilities are all written in Python 3. The makefile assumes `python3` is\non your PATH, but it only uses that to set up a Python venv environement which\nit then uses for everything else:\n\n```sh\n$ make setup\n```\n\nThis creates the Python environment at `util/env` and installs the required\npackages into it. All other Python scripts in the repo invoke Python from this\nenvironment.\n\nYou also need [Sass][] installed and on your PATH. Follow the instructions there\nto install it for your OS.\n\n[sass]: https://sass-lang.com/\n\nIn order to compile the two interpreters, you need some C compiler on your path\nas well as `javac`.\n\n### Building\n\nOnce you\'ve got that setup, try:\n\n```sh\n$ make\n```\n\nIf everything is working, that will generate the site for the book as well as\ncompiling the two interpreters clox and jlox. You can run either interpreter\nright from the root of the repo:\n\n```sh\n$ ./clox\n$ ./jlox\n```\n\n### Hacking on the book\n\nThe Markdown and snippets of source code are woven together into the final\nHTML using a hand-written little static site generator, `util/build.py`. It\'s\na fairly simple static site generator. The generated HTML is committed in\nthe repo under `site/`. It is built from a combination of Markdown for prose,\nwhich lives in `book/`, and snippets of code that are weaved in from the Java\nand C implementations in `java/` and `c/`. (All of those funny looking comments\nin the source code are how it knows which snippet goes where.)\n\nThe script that does all the magic is `util/build.py`. You can run that\ndirectly, or run:\n\n```sh\n$ make book\n```\n\nThat generates the entire site in one batch. If you are incrementally working\non it, you\'ll want to run the development server:\n\n```sh\n$ make serve\n```\n\nThis runs a little HTTP server on localhost rooted at the `site/` directory.\nAny time you request a page, it regenerates any files whose sources have been\nchanged, including Markdown files, interpreter source files, templates, and\nassets. Just let that keep running, edit files locally, and refresh your\nbrowser to see the changes.\n\n### Building the interpreters\n\nYou can build each interpreter like so:\n\n```sh\n$ make clox\n$ make jlox\n```\n\nThis builds the final version of each interpreter as it appears at the end of\nits part in the book.\n\nYou can also see what the interpreters look like at the end of each chapter.\n(I use this to make sure they are working even in the middle of the book.) This\nis driven by a script, `util/split_chapters.py` that uses the same comment\nmarkers for the code snippets to determine which chunks of code are present in\neach chapter. It takes only the snippets that have been seen by the end of each\nchapter and produces a new copy of the source in `gen/`, one directory for\neach chapter\'s code. (These are also an easier way to view the source code\nsince they have all of the distracting marker comments stripped out.)\n\nThen, each of those can be built separately. Run:\n\n```sh\n$ make c_chapters\n```\n\nAnd in the `build/` directory, you\'ll get an executable for each chapter, like\n`chap14_chunks`, etc. Likewise:\n\n```sh\n$ make java_chapters\n```\n\nThis compiles the Java code to classfiles in `build/gen/` in a subdirectory for\neach chapter.\n\n## Repository Layout\n\n*   `asset/` \xe2\x80\x93 Sass files and jinja2 templates used to generate the site.\n*   `book/` - Markdown files for the text of each chapter.\n*   `build/` - Intermediate files and other build output (except for the site)\n    itself go here. Not committed to Git.\n*   `c/` \xe2\x80\x93 Source code of clox, the interpreter written in C. Also contains an\n    XCode project, if that\'s your thing.\n*   `gen/` \xe2\x80\x93 Java source files generated by GenerateAst.java go here. Not\n    committed.\n*   `java/` \xe2\x80\x93 Source code of jlox, the interpreter written in Java.\n*   `note/` \xe2\x80\x93 Various research, notes, TODOs, and other miscellanea.\n*   `note/answers` \xe2\x80\x93 Sample answers for the challenges. No cheating!\n*   `site/` \xe2\x80\x93 The final generated site. The contents of this directory directly\n    mirror craftinginterpreters.com. Most content here is generated by build.py,\n    but fonts, images, and JS only live here. Everything is committed, even the\n    generated content.\n*   `test/` \xe2\x80\x93 Test cases for the Lox implementations.\n*   `util/` \xe2\x80\x93 Tools and build scripts. The test runner and build system that\n    generate the site from the Markdown and source files live here.\n'