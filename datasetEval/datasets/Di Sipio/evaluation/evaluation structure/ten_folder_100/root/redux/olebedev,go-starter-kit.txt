b'# go-starter-kit [![wercker status](https://app.wercker.com/status/cd5a782c425b1feb06844dcc701e528c/s/master "wercker status")](https://app.wercker.com/project/bykey/cd5a782c425b1feb06844dcc701e528c) [![Join the chat at https://gitter.im/olebedev/go-starter-kit](https://img.shields.io/gitter/room/nwjs/nw.js.svg?maxAge=2592000&style=plastic)](https://gitter.im/olebedev/go-starter-kit?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n> This project contains a quick starter kit for **Facebook React** Single Page Apps with **Golang** server side render via goja javascript engine, implemented in pure Golang and also with a set of useful features for rapid development of efficient applications.\n\n## What it contains?\n\n* server side render via [goja](https://github.com/dop251/goja)\n* api requests between your react application and server side application directly  via [fetch polyfill](https://github.com/olebedev/gojax/tree/master/fetch)\n* title, Open Graph and other domain-specific meta tags render for each page at the server and at the client\n* server side redirect\n* embedding static files into artefact via bindata\n* high performance [echo](https://github.com/labstack/echo) framework\n* advanced cli via [cli](https://github.com/codegangsta/cli)\n* Makefile based project\n* one(!) terminal window process for development\n* routing via [react-router](https://github.com/reactjs/react-router)\n* ES6 & JSX via [babel-loader](https://github.com/babel/babel-loader) with minimal runtime dependency footprint\n* [redux](https://rackt.org/redux/) as state container\n* [redux-devtools](https://github.com/gaearon/redux-devtools)\n* css styles without global namespace via PostCSS, [css-loader](https://github.com/webpack/css-loader) & css-modules\n* separate css file to avoid FOUC\n* hot reloading via [react-transform](https://github.com/gaearon/babel-plugin-react-transform) & [HMR](http://webpack.github.io/docs/hot-module-replacement.html)\n* webpack bundle builder\n* eslint and golint rules for Makefile\n\n## Workflow dependencies\n\n* [golang](https://golang.org/)\n* [node.js](https://nodejs.org/) with [yarn](https://yarnpkg.com)\n* [GNU make](https://www.gnu.org/software/make/)\n\nNote that probably not works at windows.\n\n## Project structure\n\n##### The server\'s entry point\n```\n$ tree server\nserver\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 api.go\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 app.go\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 bindata.go <-- this file is gitignored, it will appear at compile time\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 conf.go\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 data\n\xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 templates\n\xe2\x94\x82\xc2\xa0\xc2\xa0     \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 react.html\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 main.go <-- main function declared here\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 react.go\n\xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 utils.go\n```\n\nThe `./server/` is flat golang package.\n\n##### The client\'s entry point\n\nIt\'s simple React application\n\n```\n$ tree client\nclient\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 actions.js\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 components\n\xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 app\n\xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 favicon.ico\n\xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 index.js\n\xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 styles.css\n\xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 homepage\n\xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 index.js\n\xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 styles.css\n\xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 not-found\n\xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 index.js\n\xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 styles.css\n\xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 usage\n\xe2\x94\x82\xc2\xa0\xc2\xa0     \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 index.js\n\xe2\x94\x82\xc2\xa0\xc2\xa0     \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 styles.css\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 css\n\xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 funcs.js\n\xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 global.css\n\xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 index.js\n\xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 vars.js\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 index.js <-- main function declared here\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 reducers.js\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 router\n\xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 index.js\n\xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 routes.js\n\xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 toString.js\n\xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 store.js\n```\n\nThe client app will be compiled into `server/data/static/build/`.  Then it will be embedded into go package via _go-bindata_. After that the package will be compiled into binary.\n\n**Convention**: javascript app should declare [_main_](https://github.com/olebedev/go-starter-kit/blob/master/client/index.js#L4) function right in the global namespace. It will used to render the app at the server side.\n\n## Install\n\nClone the repo:\n\n```\n$ git clone git@github.com:olebedev/go-starter-kit.git $GOPATH/src/github.com/<username>/<project>\n$ cd $GOPATH/src/github.com/<username>/<project>\n```\n\nInstall dependencies:\n\n```\n$ make install\n```\n\n## Run development\n\nStart dev server:\n\n```\n$ make serve\n```\n\nthat\'s it. Open [http://localhost:5001/](http://localhost:5001/)(if you use default port) at your browser. Now you ready to start coding your awesome project.\n\n## Build\n\nInstall dependencies and type `NODE_ENV=production make build`. This rule is producing webpack build and regular golang build after that. Result you can find at `$GOPATH/bin`. Note that the binary will be named **as the current project directory**.\n\n## License\nMIT\n'