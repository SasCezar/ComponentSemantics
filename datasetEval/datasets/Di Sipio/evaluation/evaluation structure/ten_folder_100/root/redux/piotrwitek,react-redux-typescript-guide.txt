b'<div align="center">\n\n# React & Redux in TypeScript - Complete Guide\n\n_"This guide is a **living compendium** documenting the most important patterns and recipes on how to use **React** (and its Ecosystem) in a **functional style** using **TypeScript**. It will help you make your code **completely type-safe** while focusing on **inferring the types from implementation** so there is less noise coming from excessive type annotations and it\'s easier to write and maintain correct types in the long run."_\n\n[![Join the community on Spectrum](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/react-redux-ts)\n[![Join the chat at https://gitter.im/react-redux-typescript-guide/Lobby](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/react-redux-typescript-guide/Lobby)\n\n_Found it useful? Want more updates?_\n\n[**Show your support by giving a :star:**](https://github.com/piotrwitek/react-redux-typescript-guide/stargazers)\n\n<a href="https://www.buymeacoffee.com/piotrekwitek">\n  <img src="https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png" alt="Buy Me a Coffee">\n</a>\n<a href="https://www.patreon.com/piotrekwitek">\n  <img src="https://c5.patreon.com/external/logo/become_a_patron_button@2x.png" alt="Become a Patron" width="160">\n</a>\n\n<br/><hr/>\n\n### **What\'s new?**\n\n:tada: _Now updated to support **TypeScript v3.7**_ :tada:\n:rocket: _Updated to `typesafe-actions@5.x.x` :rocket:\n\n<hr/><br/>\n\n</div>\n\n### **Goals**\n\n- Complete type safety (with [`--strict`](https://www.typescriptlang.org/docs/handbook/compiler-options.html) flag) without losing type information downstream through all the layers of our application (e.g. no type assertions or hacking with `any` type)\n- Make type annotations concise by eliminating redundancy in types using advanced TypeScript Language features like **Type Inference** and **Control flow analysis**\n- Reduce repetition and complexity of types with TypeScript focused [complementary libraries](#complementary-libraries)\n\n### **React, Redux, Typescript Ecosystem**\n\n- [typesafe-actions](https://github.com/piotrwitek/typesafe-actions) - Typesafe utilities for "action-creators" in Redux / Flux Architecture  \n- [utility-types](https://github.com/piotrwitek/utility-types) - Collection of generic types for TypeScript, complementing built-in mapped types and aliases - think lodash for reusable types.  \n- [react-redux-typescript-scripts](https://github.com/piotrwitek/react-redux-typescript-scripts) - dev-tools configuration files shared between projects based on this guide  \n\n### **Examples**\n\n- Todo-App playground: [Codesandbox](https://codesandbox.io/s/github/piotrwitek/typesafe-actions/tree/master/codesandbox)\n- React, Redux, TypeScript - RealWorld App: [Github](https://github.com/piotrwitek/react-redux-typescript-realworld-app) | [Demo](https://react-redux-typescript-realworld-app.netlify.com/)\n\n### **Playground Project**\n\n[![Build Status](https://semaphoreci.com/api/v1/piotrekwitek/react-redux-typescript-guide/branches/master/shields_badge.svg)](https://semaphoreci.com/piotrekwitek/react-redux-typescript-guide)\n\nCheck out our Playground Project located in the `/playground` folder. It contains all source files of the code examples found in the guide. They are all tested with the most recent version of TypeScript and 3rd party type-definitions (like `@types/react` or `@types/react-redux`) to ensure the examples are up-to-date and not broken with updated definitions (It\'s based on `create-react-app --typescript`).\n> Playground project was created so that you can simply clone the repository locally and immediately play around with all the component patterns found in the guide. It will help you to learn all the examples from this guide in a real project environment without the need to create complicated environment setup by yourself.\n\n## Contributing Guide\n\nYou can help make this project better by contributing. If you\'re planning to contribute please make sure to check our contributing guide: [CONTRIBUTING.md](/CONTRIBUTING.md)\n\n## Funding\n\nYou can also help by funding issues.\nIssues like bug fixes or feature requests can be very quickly resolved when funded through the IssueHunt platform.\n\nI highly recommend to add a bounty to the issue that you\'re waiting for to increase priority and attract contributors willing to work on it.\n\n[![Let\'s fund issues in this repository](https://issuehunt.io/static/embed/issuehunt-button-v1.svg)](https://issuehunt.io/repos/76996763)\n\n---\n\n\xf0\x9f\x8c\x9f - _New or updated section_\n\n## Table of Contents\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON\'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n\n- [React - Type-Definitions Cheatsheet](#react---type-definitions-cheatsheet)\n    - [`React.FC<Props>` | `React.FunctionComponent<Props>`](#reactfcprops--reactfunctioncomponentprops)\n    - [`React.Component<Props, State>`](#reactcomponentprops-state)\n    - [`React.ComponentType<Props>`](#reactcomponenttypeprops)\n    - [`React.ComponentProps<typeof XXX>`](#reactcomponentpropstypeof-xxx)\n    - [`React.ReactElement` | `JSX.Element`](#reactreactelement--jsxelement)\n    - [`React.ReactNode`](#reactreactnode)\n    - [`React.CSSProperties`](#reactcssproperties)\n    - [`React.HTMLProps<HTMLXXXElement>`](#reacthtmlpropshtmlxxxelement)\n    - [`React.ReactEventHandler<HTMLXXXElement>`](#reactreacteventhandlerhtmlxxxelement)\n    - [`React.XXXEvent<HTMLXXXElement>`](#reactxxxeventhtmlxxxelement)\n- [React - Typing Patterns](#react---typing-patterns)\n  - [Function Components - FC](#function-components---fc)\n    - [- Counter Component](#--counter-component)\n    - [- Spreading attributes in Component](#--spreading-attributes-in-component)\n  - [Class Components](#class-components)\n    - [- Class Counter Component](#--class-counter-component)\n    - [- Class Component with default props](#--class-component-with-default-props)\n  - [Generic Components](#generic-components)\n    - [- Generic List Component](#--generic-list-component)\n  - [Render Props](#render-props)\n    - [- Name Provider Component](#--name-provider-component)\n    - [- Mouse Provider Component](#--mouse-provider-component)\n  - [Higher-Order Components](#higher-order-components)\n    - [- HOC wrapping a component](#--hoc-wrapping-a-component)\n    - [- HOC wrapping a component and injecting props](#--hoc-wrapping-a-component-and-injecting-props)\n    - [- Nested HOC - wrapping a component, injecting props and connecting to redux \xf0\x9f\x8c\x9f](#--nested-hoc---wrapping-a-component-injecting-props-and-connecting-to-redux-)\n  - [Redux Connected Components](#redux-connected-components)\n    - [- Redux connected counter](#--redux-connected-counter)\n    - [- Redux connected counter with own props](#--redux-connected-counter-with-own-props)\n    - [- Redux connected counter with `redux-thunk` integration](#--redux-connected-counter-with-redux-thunk-integration)\n  - [Context](#context)\n    - [ThemeContext](#themecontext)\n    - [ThemeProvider](#themeprovider)\n    - [ThemeConsumer](#themeconsumer)\n    - [ThemeConsumer in class component](#themeconsumer-in-class-component)\n  - [Hooks](#hooks)\n    - [- useState](#--usestate)\n    - [- useReducer](#--usereducer)\n    - [- useContext](#--usecontext)\n- [Redux - Typing Patterns](#redux---typing-patterns)\n  - [Store Configuration](#store-configuration)\n    - [Create Global Store Types](#create-global-store-types)\n    - [Create Store](#create-store)\n  - [Action Creators \xf0\x9f\x8c\x9f](#action-creators-)\n  - [Reducers](#reducers)\n    - [State with Type-level Immutability](#state-with-type-level-immutability)\n    - [Typing reducer](#typing-reducer)\n    - [Typing reducer with `typesafe-actions`](#typing-reducer-with-typesafe-actions)\n    - [Testing reducer](#testing-reducer)\n  - [Async Flow with `redux-observable`](#async-flow-with-redux-observable)\n    - [Typing epics](#typing-epics)\n    - [Testing epics](#testing-epics)\n  - [Selectors with `reselect`](#selectors-with-reselect)\n  - [Connect with `react-redux`](#connect-with-react-redux)\n    - [Typing connected component](#typing-connected-component)\n    - [Typing connected component with `redux-thunk` integration](#typing-connected-component-with-redux-thunk-integration)\n- [Configuration & Dev Tools](#configuration--dev-tools)\n  - [Common Npm Scripts](#common-npm-scripts)\n  - [tsconfig.json](#tsconfigjson)\n  - [TSLib](#tslib)\n  - [TSLint](#tslint)\n  - [ESLint](#eslint)\n  - [Jest](#jest)\n  - [Style Guides](#style-guides)\n    - ["react-styleguidist"](#react-styleguidist)\n- [Recipes](#recipes)\n    - [General Tips](#general-tips)\n    - [Ambient Modules Tips](#ambient-modules-tips)\n    - [Type-Definitions Tips](#type-definitions-tips)\n    - [Type Augmentation Tips](#type-augmentation-tips)\n  - [Tutorials & Articles](#tutorials--articles)\n  - [Contributors](#contributors)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n---\n\n# Installation\n\n### Type-Definitions for React & Redux\n```\nnpm i -D @types/react @types/react-dom @types/react-redux\n```\n\n"react" - `@types/react`  \n"react-dom" - `@types/react-dom`  \n"redux" - (types included with npm package)*  \n"react-redux" - `@types/react-redux`  \n\n> *NB: Guide is based on types for Redux >= v4.x.x. To make it work with Redux v3.x.x please refer to [this config](https://github.com/piotrwitek/react-redux-typescript-guide/blob/master/playground/tsconfig.json#L5))  \n\n[\xe2\x87\xa7 back to top](#table-of-contents)\n\n---\n\n# React - Type-Definitions Cheatsheet\n\n### `React.FC<Props>` | `React.FunctionComponent<Props>`\nType representing a functional component\n```tsx\nconst MyComponent: React.FC<Props> = ...\n```\n\n### `React.Component<Props, State>`\nType representing a class component\n```tsx\nclass MyComponent extends React.Component<Props, State> { ...\n```\n\n### `React.ComponentType<Props>`\nType representing union of (React.FC<Props> | React.Component<Props>) - used in HOC\n```tsx\nconst withState = <P extends WrappedComponentProps>(\n  WrappedComponent: React.ComponentType<P>,\n) => { ...\n```\n\n### `React.ComponentProps<typeof XXX>`\nGets Props type of a specified component XXX (WARNING: does not work with statically declared default props and generic props)\n```tsx\ntype MyComponentProps = React.ComponentProps<typeof MyComponent>;\n```\n\n### `React.ReactElement` | `JSX.Element`\nType representing a concept of React Element - representation of a native DOM component (e.g. `<div />`), or a user-defined composite component (e.g. `<MyComponent />`)\n```tsx\nconst elementOnly: React.ReactElement = <div /> || <MyComponent />;\n```\n\n### `React.ReactNode`\nType representing any possible type of React node (basically ReactElement (including Fragments and Portals) + primitive JS types)\n```tsx\nconst elementOrPrimitive: React.ReactNode = \'string\' || 0 || false || null || undefined || <div /> || <MyComponent />;\nconst Component = ({ children: React.ReactNode }) => ...\n```\n\n### `React.CSSProperties`\nType representing style object in JSX - for css-in-js styles\n```tsx\nconst styles: React.CSSProperties = { flexDirection: \'row\', ...\nconst element = <div style={styles} ...\n```\n\n### `React.HTMLProps<HTMLXXXElement>`\nType representing Props of specified HTML Element - for extending HTML Elements\n```tsx\nconst Input: React.FC<Props & React.HTMLProps<HTMLInputElement>> = props => { ... }\n\n<Input about={...} accept={...} alt={...} ... />\n```\n\n### `React.ReactEventHandler<HTMLXXXElement>`\nType representing generic event handler - for declaring event handlers\n```tsx\nconst handleChange: React.ReactEventHandler<HTMLInputElement> = (ev) => { ... } \n\n<input onChange={handleChange} ... />\n```\n\n### `React.XXXEvent<HTMLXXXElement>`\nType representing more specific event. Some common event examples: `ChangeEvent, FormEvent, FocusEvent, KeyboardEvent, MouseEvent, DragEvent, PointerEvent, WheelEvent, TouchEvent`.\n```tsx\nconst handleChange = (ev: React.MouseEvent<HTMLDivElement>) => { ... }\n\n<div onMouseMove={handleChange} ... />\n```\n\nIn code above `React.MouseEvent<HTMLDivElement>` is type of mouse event, and this event happened on `HTMLDivElement`\n\n[\xe2\x87\xa7 back to top](#table-of-contents)\n\n---\n\n# React - Typing Patterns\n\n## Function Components - FC\n\n### - Counter Component\n\n```tsx\nimport * as React from \'react\';\n\ntype Props = {\n  label: string;\n  count: number;\n  onIncrement: () => void;\n};\n\nexport const FCCounter: React.FC<Props> = props => {\n  const { label, count, onIncrement } = props;\n\n  const handleIncrement = () => {\n    onIncrement();\n  };\n\n  return (\n    <div>\n      <span>\n        {label}: {count}\n      </span>\n      <button type="button" onClick={handleIncrement}>\n        {`Increment`}\n      </button>\n    </div>\n  );\n};\n\n```\n\n[\xe2\x9f\xa9\xe2\x9f\xa9\xe2\x9f\xa9 demo](https://piotrwitek.github.io/react-redux-typescript-guide/#fccounter)\n\n[\xe2\x87\xa7 back to top](#table-of-contents)\n\n### - [Spreading attributes](https://facebook.github.io/react/docs/jsx-in-depth.html#spread-attributes) in Component\n\n```tsx\nimport * as React from \'react\';\n\ntype Props = {\n  className?: string;\n  style?: React.CSSProperties;\n};\n\nexport const FCSpreadAttributes: React.FC<Props> = props => {\n  const { children, ...restProps } = props;\n\n  return <div {...restProps}>{children}</div>;\n};\n\n```\n\n[\xe2\x9f\xa9\xe2\x9f\xa9\xe2\x9f\xa9 demo](https://piotrwitek.github.io/react-redux-typescript-guide/#fcspreadattributes)\n\n[\xe2\x87\xa7 back to top](#table-of-contents)\n\n---\n\n## Class Components\n\n### - Class Counter Component\n\n```tsx\nimport * as React from \'react\';\n\ntype Props = {\n  label: string;\n};\n\ntype State = {\n  count: number;\n};\n\nexport class ClassCounter extends React.Component<Props, State> {\n  readonly state: State = {\n    count: 0,\n  };\n\n  handleIncrement = () => {\n    this.setState({ count: this.state.count + 1 });\n  };\n\n  render() {\n    const { handleIncrement } = this;\n    const { label } = this.props;\n    const { count } = this.state;\n\n    return (\n      <div>\n        <span>\n          {label}: {count}\n        </span>\n        <button type="button" onClick={handleIncrement}>\n          {`Increment`}\n        </button>\n      </div>\n    );\n  }\n}\n\n```\n\n[\xe2\x9f\xa9\xe2\x9f\xa9\xe2\x9f\xa9 demo](https://piotrwitek.github.io/react-redux-typescript-guide/#classcounter)\n\n[\xe2\x87\xa7 back to top](#table-of-contents)\n\n### - Class Component with default props\n\n```tsx\nimport * as React from \'react\';\n\ntype Props = {\n  label: string;\n  initialCount: number;\n};\n\ntype State = {\n  count: number;\n};\n\nexport class ClassCounterWithDefaultProps extends React.Component<\n  Props,\n  State\n> {\n  static defaultProps = {\n    initialCount: 0,\n  };\n\n  readonly state: State = {\n    count: this.props.initialCount,\n  };\n\n  handleIncrement = () => {\n    this.setState({ count: this.state.count + 1 });\n  };\n\n  render() {\n    const { handleIncrement } = this;\n    const { label } = this.props;\n    const { count } = this.state;\n\n    return (\n      <div>\n        <span>\n          {label}: {count}\n        </span>\n        <button type="button" onClick={handleIncrement}>\n          {`Increment`}\n        </button>\n      </div>\n    );\n  }\n}\n\n```\n\n[\xe2\x9f\xa9\xe2\x9f\xa9\xe2\x9f\xa9 demo](https://piotrwitek.github.io/react-redux-typescript-guide/#classcounterwithdefaultprops)\n\n[\xe2\x87\xa7 back to top](#table-of-contents)\n\n---\n\n## Generic Components\n- easily create typed component variations and reuse common logic\n- common use case is a generic list components\n\n### - Generic List Component\n\n```tsx\nimport * as React from \'react\';\n\nexport interface GenericListProps<T> {\n  items: T[];\n  itemRenderer: (item: T) => JSX.Element;\n}\n\nexport class GenericList<T> extends React.Component<GenericListProps<T>, {}> {\n  render() {\n    const { items, itemRenderer } = this.props;\n\n    return (\n      <div>\n        {items.map(itemRenderer)}\n      </div>\n    );\n  }\n}\n\n```\n\n[\xe2\x9f\xa9\xe2\x9f\xa9\xe2\x9f\xa9 demo](https://piotrwitek.github.io/react-redux-typescript-guide/#genericlist)\n\n[\xe2\x87\xa7 back to top](#table-of-contents)\n\n---\n\n## Render Props\n> https://reactjs.org/docs/render-props.html\n\n### - Name Provider Component\n> simple component using children as a render prop\n\n```tsx\nimport * as React from \'react\';\n\ninterface NameProviderProps {\n  children: (state: NameProviderState) => React.ReactNode;\n}\n\ninterface NameProviderState {\n  readonly name: string;\n}\n\nexport class NameProvider extends React.Component<NameProviderProps, NameProviderState> {\n  readonly state: NameProviderState = { name: \'Piotr\' };\n\n  render() {\n    return this.props.children(this.state);\n  }\n}\n\n```\n\n[\xe2\x9f\xa9\xe2\x9f\xa9\xe2\x9f\xa9 demo](https://piotrwitek.github.io/react-redux-typescript-guide/#nameprovider)\n\n[\xe2\x87\xa7 back to top](#table-of-contents)\n\n### - Mouse Provider Component\n> `Mouse` component found in [Render Props React Docs](https://reactjs.org/docs/render-props.html#use-render-props-for-cross-cutting-concerns)\n\n```tsx\nimport * as React from \'react\';\n\nexport interface MouseProviderProps {\n  render: (state: MouseProviderState) => React.ReactNode;\n}\n\ninterface MouseProviderState {\n  readonly x: number;\n  readonly y: number;\n}\n\nexport class MouseProvider extends React.Component<MouseProviderProps, MouseProviderState> {\n  readonly state: MouseProviderState = { x: 0, y: 0 };\n\n  handleMouseMove = (event: React.MouseEvent<HTMLDivElement>) => {\n    this.setState({\n      x: event.clientX,\n      y: event.clientY,\n    });\n  };\n\n  render() {\n    return (\n      <div style={{ height: \'100%\' }} onMouseMove={this.handleMouseMove}>\n        {/*\n          Instead of providing a static representation of what <Mouse> renders,\n          use the `render` prop to dynamically determine what to render.\n        */}\n        {this.props.render(this.state)}\n      </div>\n    );\n  }\n}\n\n```\n\n[\xe2\x9f\xa9\xe2\x9f\xa9\xe2\x9f\xa9 demo](https://piotrwitek.github.io/react-redux-typescript-guide/#mouseprovider)\n\n[\xe2\x87\xa7 back to top](#table-of-contents)\n\n---\n\n## Higher-Order Components\n> https://reactjs.org/docs/higher-order-components.html\n\n### - HOC wrapping a component\nAdds state to a stateless counter\n\n```tsx\nimport React from \'react\';\nimport { Diff } from \'utility-types\';\n\n// These props will be injected into the base component\ninterface InjectedProps {\n  count: number;\n  onIncrement: () => void;\n}\n\nexport const withState = <BaseProps extends InjectedProps>(\n  BaseComponent: React.ComponentType<BaseProps>\n) => {\n  type HocProps = Diff<BaseProps, InjectedProps> & {\n    // here you can extend hoc with new props\n    initialCount?: number;\n  };\n  type HocState = {\n    readonly count: number;\n  };\n\n  return class Hoc extends React.Component<HocProps, HocState> {\n    // Enhance component name for debugging and React-Dev-Tools\n    static displayName = `withState(${BaseComponent.name})`;\n    // reference to original wrapped component\n    static readonly WrappedComponent = BaseComponent;\n\n    readonly state: HocState = {\n      count: Number(this.props.initialCount) || 0,\n    };\n\n    handleIncrement = () => {\n      this.setState({ count: this.state.count + 1 });\n    };\n\n    render() {\n      const { ...restProps } = this.props;\n      const { count } = this.state;\n\n      return (\n        <BaseComponent\n          count={count} // injected\n          onIncrement={this.handleIncrement} // injected\n          {...(restProps as BaseProps)}\n        />\n      );\n    }\n  };\n};\n\n```\n<details><summary><i>Click to expand</i></summary><p>\n\n```tsx\nimport * as React from \'react\';\n\nimport { withState } from \'../hoc\';\nimport { FCCounter } from \'../components\';\n\nconst FCCounterWithState = withState(FCCounter);\n\nexport default () => <FCCounterWithState label={\'FCCounterWithState\'} />;\n\n```\n</p></details>\n\n[\xe2\x87\xa7 back to top](#table-of-contents)\n\n### - HOC wrapping a component and injecting props\nAdds error handling using componentDidCatch to any component\n\n```tsx\nimport React from \'react\';\n\nconst MISSING_ERROR = \'Error was swallowed during propagation.\';\n\nexport const withErrorBoundary = <BaseProps extends {}>(\n  BaseComponent: React.ComponentType<BaseProps>\n) => {\n  type HocProps = {\n    // here you can extend hoc with new props\n  };\n  type HocState = {\n    readonly error: Error | null | undefined;\n  };\n\n  return class Hoc extends React.Component<HocProps, HocState> {\n    // Enhance component name for debugging and React-Dev-Tools\n    static displayName = `withErrorBoundary(${BaseComponent.name})`;\n    // reference to original wrapped component\n    static readonly WrappedComponent = BaseComponent;\n\n    readonly state: HocState = {\n      error: undefined,\n    };\n\n    componentDidCatch(error: Error | null, info: object) {\n      this.setState({ error: error || new Error(MISSING_ERROR) });\n      this.logErrorToCloud(error, info);\n    }\n\n    logErrorToCloud = (error: Error | null, info: object) => {\n      // TODO: send error report to service provider\n    };\n\n    render() {\n      const { children, ...restProps } = this.props;\n      const { error } = this.state;\n\n      if (error) {\n        return <BaseComponent {...(restProps as BaseProps)} />;\n      }\n\n      return children;\n    }\n  };\n};\n\n```\n<details><summary><i>Click to expand</i></summary><p>\n\n```tsx\nimport React, {useState} from \'react\';\n\nimport { withErrorBoundary } from \'../hoc\';\nimport { ErrorMessage } from \'../components\';\n\nconst ErrorMessageWithErrorBoundary =\n  withErrorBoundary(ErrorMessage);\n\nconst BrokenComponent = () => {\n  throw new Error(\'I\\\'m broken! Don\\\'t render me.\');\n};\n\nconst BrokenButton = () => {\n  const [shouldRenderBrokenComponent, setShouldRenderBrokenComponent] =\n    useState(false);\n\n  if (shouldRenderBrokenComponent) {\n    return <BrokenComponent />;\n  }\n\n  return (\n    <button\n      type="button"\n      onClick={() => {\n        setShouldRenderBrokenComponent(true);\n      }}\n    >\n      {`Throw nasty error`}\n    </button>\n  );\n};\n\nexport default () => (\n  <ErrorMessageWithErrorBoundary>\n    <BrokenButton />\n  </ErrorMessageWithErrorBoundary>\n);\n\n```\n</p></details>\n\n[\xe2\x87\xa7 back to top](#table-of-contents)\n\n### - Nested HOC - wrapping a component, injecting props and connecting to redux \xf0\x9f\x8c\x9f\nAdds error handling using componentDidCatch to any component\n\n```tsx\nimport { RootState } from \'MyTypes\';\nimport React from \'react\';\nimport { connect } from \'react-redux\';\nimport { Diff } from \'utility-types\';\nimport { countersActions, countersSelectors } from \'../features/counters\';\n\n// These props will be injected into the base component\ninterface InjectedProps {\n  count: number;\n  onIncrement: () => void;\n}\n\nexport const withConnectedCount = <BaseProps extends InjectedProps>(\n  BaseComponent: React.ComponentType<BaseProps>\n) => {\n  type HocProps = Diff<BaseProps, InjectedProps> & {\n    // here you can extend hoc with new props\n    initialCount?: number;\n  };\n\n  const mapStateToProps = (state: RootState) => ({\n    count: countersSelectors.getReduxCounter(state.counters),\n  });\n\n  const dispatchProps = {\n    onIncrement: countersActions.increment,\n  };\n\n  class Hoc extends React.Component<InjectedProps> {\n    // Enhance component name for debugging and React-Dev-Tools\n    static displayName = `withConnectedCount(${BaseComponent.name})`;\n    // reference to original wrapped component\n    static readonly WrappedComponent = BaseComponent;\n\n    render() {\n      const { count, onIncrement, ...restProps } = this.props;\n\n      return (\n        <BaseComponent\n          count={count} // injected\n          onIncrement={onIncrement} // injected\n          {...(restProps as BaseProps)}\n        />\n      );\n    }\n  }\n\n  const ConnectedHoc = connect<\n    ReturnType<typeof mapStateToProps>,\n    typeof dispatchProps,\n    HocProps,\n    RootState\n  >(\n    mapStateToProps,\n    dispatchProps\n  )(Hoc);\n\n  return ConnectedHoc;\n};\n\n```\n<details><summary><i>Click to expand</i></summary><p>\n\n```tsx\nimport * as React from \'react\';\n\nimport { withConnectedCount } from \'../hoc\';\nimport { FCCounter } from \'../components\';\n\nconst FCCounterWithConnectedCount = withConnectedCount(FCCounter);\n\nexport default () => (\n  <FCCounterWithConnectedCount initialCount={5} label={\'FCCounterWithState\'} />\n);\n\n```\n</p></details>\n\n[\xe2\x87\xa7 back to top](#table-of-contents)\n\n---\n\n## Redux Connected Components\n\n### - Redux connected counter\n\n```tsx\nimport Types from \'MyTypes\';\nimport { connect } from \'react-redux\';\n\nimport { countersActions, countersSelectors } from \'../features/counters\';\nimport { FCCounter } from \'../components\';\n\nconst mapStateToProps = (state: Types.RootState) => ({\n  count: countersSelectors.getReduxCounter(state.counters),\n});\n\nconst dispatchProps = {\n  onIncrement: countersActions.increment,\n};\n\nexport const FCCounterConnected = connect(\n  mapStateToProps,\n  dispatchProps\n)(FCCounter);\n\n```\n<details><summary><i>Click to expand</i></summary><p>\n\n```tsx\nimport * as React from \'react\';\n\nimport { FCCounterConnected } from \'.\';\n\nexport default () => <FCCounterConnected label={\'FCCounterConnected\'} />;\n\n```\n</p></details>\n\n[\xe2\x87\xa7 back to top](#table-of-contents)\n\n### - Redux connected counter with own props\n\n```tsx\nimport Types from \'MyTypes\';\nimport { connect } from \'react-redux\';\n\nimport { countersActions, countersSelectors } from \'../features/counters\';\nimport { FCCounter } from \'../components\';\n\ntype OwnProps = {\n  initialCount?: number;\n};\n\nconst mapStateToProps = (state: Types.RootState, ownProps: OwnProps) => ({\n  count:\n    countersSelectors.getReduxCounter(state.counters) +\n    (ownProps.initialCount || 0),\n});\n\nconst dispatchProps = {\n  onIncrement: countersActions.increment,\n};\n\nexport const FCCounterConnectedOwnProps = connect(\n  mapStateToProps,\n  dispatchProps\n)(FCCounter);\n\n```\n<details><summary><i>Click to expand</i></summary><p>\n\n```tsx\nimport * as React from \'react\';\n\nimport { FCCounterConnectedOwnProps } from \'.\';\n\nexport default () => (\n  <FCCounterConnectedOwnProps\n    label={\'FCCounterConnectedOwnProps\'}\n    initialCount={10}\n  />\n);\n\n```\n</p></details>\n\n[\xe2\x87\xa7 back to top](#table-of-contents)\n\n### - Redux connected counter with `redux-thunk` integration\n\n```tsx\nimport Types from \'MyTypes\';\nimport { bindActionCreators, Dispatch } from \'redux\';\nimport { connect } from \'react-redux\';\nimport * as React from \'react\';\n\nimport { countersActions } from \'../features/counters\';\n\n// Thunk Action\nconst incrementWithDelay = () => async (dispatch: Dispatch): Promise<void> => {\n  setTimeout(() => dispatch(countersActions.increment()), 1000);\n};\n\nconst mapStateToProps = (state: Types.RootState) => ({\n  count: state.counters.reduxCounter,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Types.RootAction>) =>\n  bindActionCreators(\n    {\n      onIncrement: incrementWithDelay,\n    },\n    dispatch\n  );\n\ntype Props = ReturnType<typeof mapStateToProps> &\n  ReturnType<typeof mapDispatchToProps> & {\n    label: string;\n  };\n\nexport const FCCounter: React.FC<Props> = props => {\n  const { label, count, onIncrement } = props;\n\n  const handleIncrement = () => {\n    // Thunk action is correctly typed as promise\n    onIncrement().then(() => {\n      // ...\n    });\n  };\n\n  return (\n    <div>\n      <span>\n        {label}: {count}\n      </span>\n      <button type="button" onClick={handleIncrement}>\n        {`Increment`}\n      </button>\n    </div>\n  );\n};\n\nexport const FCCounterConnectedBindActionCreators = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(FCCounter);\n\n```\n<details><summary><i>Click to expand</i></summary><p>\n\n```tsx\nimport * as React from \'react\';\n\nimport { FCCounterConnectedBindActionCreators } from \'.\';\n\nexport default () => (\n  <FCCounterConnectedBindActionCreators\n    label={\'FCCounterConnectedBindActionCreators\'}\n  />\n);\n\n```\n</p></details>\n\n[\xe2\x87\xa7 back to top](#table-of-contents)\n\n## Context\n\n> https://reactjs.org/docs/context.html\n\n### ThemeContext\n\n```tsx\nimport * as React from \'react\';\n\nexport type Theme = React.CSSProperties;\n\ntype Themes = {\n  dark: Theme;\n  light: Theme;\n};\n\nexport const themes: Themes = {\n  dark: {\n    color: \'black\',\n    backgroundColor: \'white\',\n  },\n  light: {\n    color: \'white\',\n    backgroundColor: \'black\',\n  },\n};\n\nexport type ThemeContextProps = { theme: Theme; toggleTheme?: () => void };\nconst ThemeContext = React.createContext<ThemeContextProps>({ theme: themes.light });\n\nexport default ThemeContext;\n\n```\n\n[\xe2\x87\xa7 back to top](#table-of-contents)\n\n### ThemeProvider\n\n```tsx\nimport React from \'react\';\nimport ThemeContext, { themes, Theme } from \'./theme-context\';\nimport ToggleThemeButton from \'./theme-consumer\';\n\ninterface State {\n  theme: Theme;\n}\nexport class ThemeProvider extends React.Component<{}, State> {\n  readonly state: State = { theme: themes.light };\n\n  toggleTheme = () => {\n    this.setState(state => ({\n      theme: state.theme === themes.light ? themes.dark : themes.light,\n    }));\n  }\n\n  render() {\n    const { theme } = this.state;\n    const { toggleTheme } = this;\n    return (\n      <ThemeContext.Provider value={{ theme, toggleTheme }}>\n        <ToggleThemeButton />\n      </ThemeContext.Provider>\n    );\n  }\n}\n\n```\n\n[\xe2\x87\xa7 back to top](#table-of-contents)\n\n### ThemeConsumer\n\n```tsx\nimport * as React from \'react\';\nimport ThemeContext from \'./theme-context\';\n\ntype Props = {};\n\nexport default function ToggleThemeButton(props: Props) {\n  return (\n    <ThemeContext.Consumer>\n      {({ theme, toggleTheme }) => <button style={theme} onClick={toggleTheme} {...props} />}\n    </ThemeContext.Consumer>\n  );\n}\n\n```\n\n### ThemeConsumer in class component\n\n```tsx\nimport * as React from \'react\';\nimport ThemeContext from \'./theme-context\';\n\ntype Props = {};\n\nexport class ToggleThemeButtonClass extends React.Component<Props> {\n  static contextType = ThemeContext;\n  context!: React.ContextType<typeof ThemeContext>;\n\n  render() {\n    const { theme, toggleTheme } = this.context;\n    return (\n      <button style={theme} onClick={toggleTheme}>\n        Toggle Theme\n      </button>\n    );\n  }\n}\n\n```\n\n[Implementation with Hooks](#--usecontext)\n\n[\xe2\x87\xa7 back to top](#table-of-contents)\n\n## Hooks\n\n> https://reactjs.org/docs/hooks-intro.html\n\n### - useState\n\n> https://reactjs.org/docs/hooks-reference.html#usestate\n\n```tsx\nimport * as React from \'react\';\n\ntype Props = { initialCount: number };\n\nexport default function Counter({initialCount}: Props) {\n  const [count, setCount] = React.useState(initialCount);\n  return (\n    <>\n      Count: {count}\n      <button onClick={() => setCount(initialCount)}>Reset</button>\n      <button onClick={() => setCount(prevCount => prevCount + 1)}>+</button>\n      <button onClick={() => setCount(prevCount => prevCount - 1)}>-</button>\n    </>\n  );\n}\n\n```\n\n[\xe2\x87\xa7 back to top](#table-of-contents)\n\n### - useReducer\nHook for state management like Redux in a function component.\n\n```tsx\nimport * as React from \'react\';\n\ninterface State {\n  count: number;\n}\n\ntype Action = { type: \'reset\' } | { type: \'increment\' } | { type: \'decrement\' };\n\nfunction reducer(state: State, action: Action): State {\n  switch (action.type) {\n    case \'increment\':\n      return { count: state.count + 1 };\n    case \'decrement\':\n      return { count: state.count - 1 };\n    case \'reset\':\n      return { count: 0 };\n    default:\n      throw new Error();\n  }\n}\n\ninterface CounterProps {\n  initialCount: number;\n}\n\nfunction Counter({ initialCount }: CounterProps) {\n  const [state, dispatch] = React.useReducer(reducer, {\n    count: initialCount,\n  });\n\n  return (\n    <>\n      Count: {state.count}\n      <button onClick={() => dispatch({ type: \'reset\' })}>Reset</button>\n      <button onClick={() => dispatch({ type: \'increment\' })}>+</button>\n      <button onClick={() => dispatch({ type: \'decrement\' })}>-</button>\n    </>\n  );\n}\n\nexport default Counter;\n\n```\n\n[\xe2\x87\xa7 back to top](#table-of-contents)\n\n### - useContext\n\n> https://reactjs.org/docs/hooks-reference.html#usecontext\n\n```tsx\nimport * as React from \'react\';\nimport ThemeContext from \'../context/theme-context\';\n\ntype Props = {};\n\nexport default function ThemeToggleButton(props: Props) {\n  const { theme, toggleTheme } = React.useContext(ThemeContext);\n  return (\n    <button onClick={toggleTheme} style={theme} >\n      Toggle Theme\n    </button>\n  );\n}\n\n```\n\n[\xe2\x87\xa7 back to top](#table-of-contents)\n\n---\n\n# Redux - Typing Patterns\n\n## Store Configuration\n\n### Create Global Store Types\n\n#### `RootState` - type representing root state-tree\nCan be imported in connected components to provide type-safety to Redux `connect` function\n\n#### `RootAction` - type representing union type of all action objects\nCan be imported in various layers receiving or sending redux actions like: reducers, sagas or redux-observables epics\n\n```tsx\nimport { StateType, ActionType } from \'typesafe-actions\';\n\ndeclare module \'MyTypes\' {\n  export type Store = StateType<typeof import(\'./index\').default>;\n  export type RootAction = ActionType<typeof import(\'./root-action\').default>;\n  export type RootState = StateType<ReturnType<typeof import(\'./root-reducer\').default>>;\n}\n\ndeclare module \'typesafe-actions\' {\n  interface Types {\n    RootAction: ActionType<typeof import(\'./root-action\').default>;\n  }\n}\n\n```\n\n[\xe2\x87\xa7 back to top](#table-of-contents)\n\n### Create Store\n\nWhen creating a store instance we don\'t need to provide any additional types. It will set-up a **type-safe Store instance** using type inference.\n> The resulting store instance methods like `getState` or `dispatch` will be type checked and will expose all type errors\n\n```tsx\nimport { RootAction, RootState, Services } from \'MyTypes\';\nimport { createStore, applyMiddleware } from \'redux\';\nimport { createEpicMiddleware } from \'redux-observable\';\nimport { createBrowserHistory } from \'history\';\nimport { routerMiddleware as createRouterMiddleware } from \'connected-react-router\';\n\nimport { composeEnhancers } from \'./utils\';\nimport rootReducer from \'./root-reducer\';\nimport rootEpic from \'./root-epic\';\nimport services from \'../services\';\n\n// browser history\nexport const history = createBrowserHistory();\n\nexport const epicMiddleware = createEpicMiddleware<\n  RootAction,\n  RootAction,\n  RootState,\n  Services\n>({\n  dependencies: services,\n});\n\nconst routerMiddleware = createRouterMiddleware(history);\n\n// configure middlewares\nconst middlewares = [epicMiddleware, routerMiddleware];\n// compose enhancers\nconst enhancer = composeEnhancers(applyMiddleware(...middlewares));\n\n// rehydrate state on app start\nconst initialState = {};\n\n// create store\nconst store = createStore(rootReducer(history), initialState, enhancer);\n\nepicMiddleware.run(rootEpic);\n\n// export store singleton instance\nexport default store;\n\n```\n\n---\n\n## Action Creators \xf0\x9f\x8c\x9f\n\n> We\'ll be using a battle-tested helper library [`typesafe-actions`](https://github.com/piotrwitek/typesafe-actions#typesafe-actions) [![Latest Stable Version](https://img.shields.io/npm/v/typesafe-actions.svg)](https://www.npmjs.com/package/typesafe-actions) [![NPM Downloads](https://img.shields.io/npm/dt/typesafe-actions.svg)](https://www.npmjs.com/package/typesafe-actions) that\'s designed to make it easy and fun working with **Redux** in **TypeScript**.\n\n> To learn more please check this in-depth tutorial: [Typesafe-Actions - Tutorial](https://github.com/piotrwitek/typesafe-actions#tutorial)!\n\nA solution below is using a simple factory function to automate the creation of type-safe action creators. The goal is to decrease maintenance effort and reduce code repetition of type annotations for actions and creators. The result is completely typesafe action-creators and their actions.\n\n```tsx\nimport { action } from \'typesafe-actions\';\n\nimport { ADD, INCREMENT } from \'./constants\';\n\n/* SIMPLE API */\n\nexport const increment = () => action(INCREMENT);\nexport const add = (amount: number) => action(ADD, amount);\n\n/* ADVANCED API */\n\n// More flexible allowing to create complex actions more easily\n// use can use "action-creator" instance in place of "type constant"\n// e.g. case getType(increment): return action.payload;\n// This will allow to completely eliminate need for "constants" in your application, more info here:\n// https://github.com/piotrwitek/typesafe-actions#constants\n\nimport { createAction } from \'typesafe-actions\';\nimport { Todo } from \'../todos/models\';\n\nexport const emptyAction = createAction(INCREMENT)<void>();\nexport const payloadAction = createAction(ADD)<number>();\nexport const payloadMetaAction = createAction(ADD)<number, string>();\n\nexport const payloadCreatorAction = createAction(\n  \'TOGGLE_TODO\',\n  (todo: Todo) => todo.id\n)<string>();\n\n```\n<details><summary><i>Click to expand</i></summary><p>\n\n```tsx\nimport store from \'../../store\';\nimport { countersActions as counter } from \'../counters\';\n\n// store.dispatch(counter.increment(1)); // Error: Expected 0 arguments, but got 1.\nstore.dispatch(counter.increment()); // OK\n\n// store.dispatch(counter.add()); // Error: Expected 1 arguments, but got 0.\nstore.dispatch(counter.add(1)); // OK\n\n```\n</p></details>\n\n[\xe2\x87\xa7 back to top](#table-of-contents)\n\n---\n\n## Reducers\n\n### State with Type-level Immutability\nDeclare reducer `State` type with `readonly` modifier to get compile time immutability\n```ts\nexport type State = {\n  readonly counter: number;\n  readonly todos: ReadonlyArray<string>;\n};\n```\n\nReadonly modifier allow initialization, but will not allow reassignment by highlighting compiler errors\n```ts\nexport const initialState: State = {\n  counter: 0,\n}; // OK\n\ninitialState.counter = 3; // TS Error: cannot be mutated\n```\n\nIt\'s great for **Arrays in JS** because it will error when using mutator methods like (`push`, `pop`, `splice`, ...), but it\'ll still allow immutable methods like (`concat`, `map`, `slice`,...).\n```ts\nstate.todos.push(\'Learn about tagged union types\') // TS Error: Property \'push\' does not exist on type \'ReadonlyArray<string>\'\nconst newTodos = state.todos.concat(\'Learn about tagged union types\') // OK\n```\n\n#### Caveat - `Readonly` is not recursive\nThis means that the `readonly` modifier doesn\'t propagate immutability down the nested structure of objects. You\'ll need to mark each property on each level explicitly.\n\n> **TIP:** use `Readonly` or `ReadonlyArray` [Mapped types](https://www.typescriptlang.org/docs/handbook/advanced-types.html)\n\n```ts\nexport type State = Readonly<{\n  counterPairs: ReadonlyArray<Readonly<{\n    immutableCounter1: number,\n    immutableCounter2: number,\n  }>>,\n}>;\n\nstate.counterPairs[0] = { immutableCounter1: 1, immutableCounter2: 1 }; // TS Error: cannot be mutated\nstate.counterPairs[0].immutableCounter1 = 1; // TS Error: cannot be mutated\nstate.counterPairs[0].immutableCounter2 = 1; // TS Error: cannot be mutated\n```\n\n#### Solution - recursive `Readonly` is called `DeepReadonly`\n\nTo fix this we can use [`DeepReadonly`](https://github.com/piotrwitek/utility-types#deepreadonlyt) type (available from `utility-types`).\n\n```ts\nimport { DeepReadonly } from \'utility-types\';\n\nexport type State = DeepReadonly<{\n  containerObject: {\n    innerValue: number,\n    numbers: number[],\n  }\n}>;\n\nstate.containerObject = { innerValue: 1 }; // TS Error: cannot be mutated\nstate.containerObject.innerValue = 1; // TS Error: cannot be mutated\nstate.containerObject.numbers.push(1); // TS Error: cannot use mutator methods\n```\n\n\n[\xe2\x87\xa7 back to top](#table-of-contents)\n\n### Typing reducer\n\n> to understand following section make sure to learn about [Type Inference](https://www.typescriptlang.org/docs/handbook/type-inference.html), [Control flow analysis](https://github.com/Microsoft/TypeScript/wiki/What%27s-new-in-TypeScript#control-flow-based-type-analysis) and [Tagged union types](https://github.com/Microsoft/TypeScript/wiki/What%27s-new-in-TypeScript#tagged-union-types)\n\n```tsx\nimport { combineReducers } from \'redux\';\nimport { ActionType } from \'typesafe-actions\';\n\nimport { Todo, TodosFilter } from \'./models\';\nimport * as actions from \'./actions\';\nimport { ADD, CHANGE_FILTER, TOGGLE } from \'./constants\';\n\nexport type TodosAction = ActionType<typeof actions>;\n\nexport type TodosState = Readonly<{\n  todos: Todo[];\n  todosFilter: TodosFilter;\n}>;\nconst initialState: TodosState = {\n  todos: [],\n  todosFilter: TodosFilter.All,\n};\n\nexport default combineReducers<TodosState, TodosAction>({\n  todos: (state = initialState.todos, action) => {\n    switch (action.type) {\n      case ADD:\n        return [...state, action.payload];\n\n      case TOGGLE:\n        return state.map(item =>\n          item.id === action.payload\n            ? { ...item, completed: !item.completed }\n            : item\n        );\n\n      default:\n        return state;\n    }\n  },\n  todosFilter: (state = initialState.todosFilter, action) => {\n    switch (action.type) {\n      case CHANGE_FILTER:\n        return action.payload;\n\n      default:\n        return state;\n    }\n  },\n});\n\n```\n\n[\xe2\x87\xa7 back to top](#table-of-contents)\n\n### Typing reducer with `typesafe-actions`\n> Notice we are not required to use any generic type parameter in the API. Try to compare it with regular reducer as they are equivalent.\n\n```tsx\nimport { combineReducers } from \'redux\';\nimport { createReducer } from \'typesafe-actions\';\n\nimport { Todo, TodosFilter } from \'./models\';\nimport { ADD, CHANGE_FILTER, TOGGLE } from \'./constants\';\n\nexport type TodosState = Readonly<{\n  todos: Todo[];\n  todosFilter: TodosFilter;\n}>;\nconst initialState: TodosState = {\n  todos: [],\n  todosFilter: TodosFilter.All,\n};\n\nconst todos = createReducer(initialState.todos)\n  .handleType(ADD, (state, action) => [...state, action.payload])\n  .handleType(TOGGLE, (state, action) =>\n    state.map(item =>\n      item.id === action.payload\n        ? { ...item, completed: !item.completed }\n        : item\n    )\n  );\n\nconst todosFilter = createReducer(initialState.todosFilter).handleType(\n  CHANGE_FILTER,\n  (state, action) => action.payload\n);\n\nexport default combineReducers({\n  todos,\n  todosFilter,\n});\n\n```\n\n[\xe2\x87\xa7 back to top](#table-of-contents)\n\n### Testing reducer\n\n```tsx\nimport {\n  todosReducer as reducer,\n  todosActions as actions,\n  TodosState,\n} from \'./\';\n\n/**\n * FIXTURES\n */\nconst getInitialState = (initial?: Partial<TodosState>) =>\n  reducer(initial as TodosState, {} as any);\n\n/**\n * STORIES\n */\ndescribe(\'Todos Stories\', () => {\n  describe(\'initial state\', () => {\n    it(\'should match a snapshot\', () => {\n      const initialState = getInitialState();\n      expect(initialState).toMatchSnapshot();\n    });\n  });\n\n  describe(\'adding todos\', () => {\n    it(\'should add a new todo as the first element\', () => {\n      const initialState = getInitialState();\n      expect(initialState.todos).toHaveLength(0);\n      const state = reducer(initialState, actions.add(\'new todo\'));\n      expect(state.todos).toHaveLength(1);\n      expect(state.todos[0].title).toEqual(\'new todo\');\n    });\n  });\n\n  describe(\'toggling completion state\', () => {\n    it(\'should mark active todo as complete\', () => {\n      const activeTodo = { id: \'1\', completed: false, title: \'active todo\' };\n      const initialState = getInitialState({ todos: [activeTodo] });\n      expect(initialState.todos[0].completed).toBeFalsy();\n      const state1 = reducer(initialState, actions.toggle(activeTodo.id));\n      expect(state1.todos[0].completed).toBeTruthy();\n    });\n  });\n});\n\n```\n\n[\xe2\x87\xa7 back to top](#table-of-contents)\n\n---\n\n## Async Flow with `redux-observable`\n\n### Typing epics\n\n```tsx\nimport { RootAction, RootState, Services } from \'MyTypes\';\nimport { Epic } from \'redux-observable\';\nimport { tap, ignoreElements, filter } from \'rxjs/operators\';\nimport { isOfType } from \'typesafe-actions\';\n\nimport { todosConstants } from \'../todos\';\n\n// contrived example!!!\nexport const logAddAction: Epic<RootAction, RootAction, RootState, Services> = (\n  action$,\n  state$,\n  { logger }\n) =>\n  action$.pipe(\n    filter(isOfType(todosConstants.ADD)), // action is narrowed to: { type: "ADD_TODO"; payload: string; }\n    tap(action => {\n      logger.log(\n        `action type must be equal: ${todosConstants.ADD} === ${action.type}`\n      );\n    }),\n    ignoreElements()\n  );\n\n```\n\n[\xe2\x87\xa7 back to top](#table-of-contents)\n\n### Testing epics\n\n```tsx\nimport { StateObservable, ActionsObservable } from \'redux-observable\';\nimport { RootState, Services, RootAction } from \'MyTypes\';\nimport { Subject } from \'rxjs\';\n\nimport { add } from \'./actions\';\nimport { logAddAction } from \'./epics\';\n\n// Simple typesafe mock of all the services, you dont\'t need to mock anything else\n// It is decoupled and reusable for all your tests, just put it in a separate file\nconst services = {\n  logger: {\n    log: jest.fn<Services[\'logger\'][\'log\']>(),\n  },\n  localStorage: {\n    loadState: jest.fn<Services[\'localStorage\'][\'loadState\']>(),\n    saveState: jest.fn<Services[\'localStorage\'][\'saveState\']>(),\n  },\n};\n\ndescribe(\'Todos Epics\', () => {\n  let state$: StateObservable<RootState>;\n\n  beforeEach(() => {\n    state$ = new StateObservable<RootState>(\n      new Subject<RootState>(),\n      undefined as any\n    );\n  });\n\n  describe(\'logging todos actions\', () => {\n    beforeEach(() => {\n      services.logger.log.mockClear();\n    });\n\n    it(\'should call the logger service when adding a new todo\', done => {\n      const addTodoAction = add(\'new todo\');\n      const action$ = ActionsObservable.of(addTodoAction);\n\n      logAddAction(action$, state$, services)\n        .toPromise()\n        .then((outputAction: RootAction) => {\n          expect(services.logger.log).toHaveBeenCalledTimes(1);\n          expect(services.logger.log).toHaveBeenCalledWith(\n            \'action type must be equal: todos/ADD === todos/ADD\'\n          );\n          // expect output undefined because we\'re using "ignoreElements" in epic\n          expect(outputAction).toEqual(undefined);\n          done();\n        });\n    });\n  });\n});\n\n```\n\n[\xe2\x87\xa7 back to top](#table-of-contents)\n\n---\n\n## Selectors with `reselect`\n\n```tsx\nimport { createSelector } from \'reselect\';\n\nimport { TodosState } from \'./reducer\';\n\nexport const getTodos = (state: TodosState) => state.todos;\n\nexport const getTodosFilter = (state: TodosState) => state.todosFilter;\n\nexport const getFilteredTodos = createSelector(getTodos, getTodosFilter, (todos, todosFilter) => {\n  switch (todosFilter) {\n    case \'completed\':\n      return todos.filter(t => t.completed);\n    case \'active\':\n      return todos.filter(t => !t.completed);\n\n    default:\n      return todos;\n  }\n});\n\n```\n\n[\xe2\x87\xa7 back to top](#table-of-contents)\n\n---\n\n## Connect with `react-redux`\n\n### Typing connected component\n\n*__NOTE__: Below you\'ll find only a short explanation of concepts behind typing `connect`. For more real-world examples please check [Redux Connected Components](#redux-connected-components) section.*\n\n```tsx\nimport MyTypes from \'MyTypes\';\n\nimport { bindActionCreators, Dispatch, ActionCreatorsMapObject } from \'redux\';\nimport { connect } from \'react-redux\';\n\nimport { countersActions } from \'../features/counters\';\nimport { FCCounter } from \'../components\';\n\n// Type annotation for "state" argument is mandatory to check \n// the correct shape of state object and injected props you can also\n// extend connected component Props interface by annotating `ownProps` argument\nconst mapStateToProps = (state: MyTypes.RootState, ownProps: FCCounterProps) => ({\n  count: state.counters.reduxCounter,\n});\n\n// "dispatch" argument needs an annotation to check the correct shape\n//  of an action object when using dispatch function\nconst mapDispatchToProps = (dispatch: Dispatch<MyTypes.RootAction>) =>\n  bindActionCreators({\n    onIncrement: countersActions.increment,\n  }, dispatch);\n\n// shorter alternative is to use an object instead of mapDispatchToProps function\nconst dispatchToProps = {\n    onIncrement: countersActions.increment,\n};\n\n// Notice we don\'t need to pass any generic type parameters to neither\n// the connect function below nor map functions declared above\n// because type inference will infer types from arguments annotations automatically\n// This is much cleaner and idiomatic approach\nexport const FCCounterConnected =\n  connect(mapStateToProps, mapDispatchToProps)(FCCounter);\n\n// You can add extra layer of validation of your action creators\n// by using bindActionCreators generic type parameter and RootAction type\nconst mapDispatchToProps = (dispatch: Dispatch<MyTypes.RootAction>) =>\n  bindActionCreators<ActionCreatorsMapObject<Types.RootAction>>({\n    invalidActionCreator: () => 1, // Error: Type \'number\' is not assignable to type \'{ type: "todos/ADD"; payload: Todo; } | { ... }\n  }, dispatch);\n\n```\n\n### Typing connected component with `redux-thunk` integration\n\n*__NOTE__: When using thunk action creators you need to use `bindActionCreators`. Only this way you can get corrected dispatch props type signature like below.*\n\n*__WARNING__: As of now (Apr 2019) `bindActionCreators` signature of the latest `redux-thunk` release will not work as below, you need to use updated type definitions that you can find here [`/playground/typings/redux-thunk/index.d.ts`](./playground/typings/redux-thunk/index.d.ts) and then add `paths` overload in your tsconfig like this: [`"paths":{"redux-thunk":["typings/redux-thunk"]}`](./playground/tsconfig.json).*\n\n```tsx\nconst thunkAsyncAction = () => async (dispatch: Dispatch): Promise<void> => {\n  // dispatch actions, return Promise, etc.\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch<Types.RootAction>) =>\n  bindActionCreators(\n    {\n      thunkAsyncAction,\n    },\n    dispatch\n  );\n\ntype DispatchProps = ReturnType<typeof mapDispatchToProps>;\n// { thunkAsyncAction: () => Promise<void>; }\n\n/* Without "bindActionCreators" fix signature will be the same as the original "unbound" thunk function: */\n// { thunkAsyncAction: () => (dispatch: Dispatch<AnyAction>) => Promise<void>; }\n```\n\n[\xe2\x87\xa7 back to top](#table-of-contents)\n\n---\n\n# Configuration & Dev Tools\n\n## Common Npm Scripts\n> Common TS-related npm scripts shared across projects\n```\n"prettier": "prettier --list-different \'src/**/*.ts\' || (echo \'\\nPlease fix code formatting by running:\\nnpm run prettier:fix\\n\'; exit 1)",\n"prettier:fix": "prettier --write \'src/**/*.ts\'",\n"lint": "tslint -p ./",\n"tsc": "tsc -p ./ --noEmit",\n"tsc:watch": "tsc -p ./ --noEmit -w",\n"test": "jest --config jest.config.json",\n"test:watch": "jest --config jest.config.json --watch",\n"test:update": "jest --config jest.config.json -u"\n"ci-check": "npm run prettier && npm run lint && npm run tsc && npm run test",\n```\n\n[\xe2\x87\xa7 back to top](#table-of-contents)\n\n## tsconfig.json\n\nWe have our own recommended `tsconfig.json` that you can easily add to your project thanks to [`react-redux-typescript-scripts`](https://github.com/piotrwitek/react-redux-typescript-scripts) package.\n\n<details><summary><i>Click to expand</i></summary><p>\n\n```tsx\n{\n  "include": [\n    "src",\n    "typings"\n  ],\n  "exclude": [\n    "src/**/*.spec.*"\n  ],\n  "extends": "./node_modules/react-redux-typescript-scripts/tsconfig.json",\n  "compilerOptions": {}\n}\n\n```\n</p></details>\n\n[\xe2\x87\xa7 back to top](#table-of-contents)\n\n## TSLib\nhttps://www.npmjs.com/package/tslib\n\nThis library will cut down on your bundle size, thanks to using external runtime helpers instead of adding them per each file.\n\n> Installation  \n`npm i tslib`\n\nThen add this to your `tsconfig.json`:\n```ts\n"compilerOptions": {\n  "importHelpers": true\n}\n```\n\n[\xe2\x87\xa7 back to top](#table-of-contents)\n\n## TSLint\nhttps://palantir.github.io/tslint/\n\n> Installation  \n`npm i -D tslint`\n\n> For React project you should add additional `react` specific rules: `npm i -D tslint-react` https://github.com/palantir/tslint-react  \n\nWe have our own recommended config that you can easily add to your project thanks to [`react-redux-typescript-scripts`](https://github.com/piotrwitek/react-redux-typescript-scripts) package.\n\n#### tslint.json\n<details><summary><i>Click to expand</i></summary><p>\n\n```tsx\n{\n  "extends": [\n    "./node_modules/react-redux-typescript-scripts/tslint.json",\n    "./node_modules/react-redux-typescript-scripts/tslint-react.json"\n  ],\n  "rules": {\n    // you can further customize options here\n  }\n}\n\n```\n</p></details>\n\n[\xe2\x87\xa7 back to top](#table-of-contents)\n\n## ESLint\nhttps://eslint.org/  \nhttps://typescript-eslint.io\n\n> Installation  \n`npm i -D eslint @typescript-eslint/parser @typescript-eslint/eslint-plugin`\n\nWe have our own recommended config that will automatically add a parser & plugin for TypeScript thanks to [`react-redux-typescript-scripts`](https://github.com/piotrwitek/react-redux-typescript-scripts) package.\n\n#### .eslintrc\n<details><summary><i>Click to expand</i></summary><p>\n\n```tsx\n{\n  "extends": [\n    "react-app",\n    "./node_modules/react-redux-typescript-scripts/eslint.js"\n  ],\n  "rules": {\n    // you can further customize options here\n  }\n}\n\n```\n</p></details>\n\n[\xe2\x87\xa7 back to top](#table-of-contents)\n\n## Jest\nhttps://jestjs.io/\n\n> Installation  \n`npm i -D jest ts-jest @types/jest`\n\n#### jest.config.json\n<details><summary><i>Click to expand</i></summary><p>\n\n```tsx\n{\n  "verbose": true,\n  "transform": {\n    ".(ts|tsx)": "ts-jest"\n  },\n  "testRegex": "(/spec/.*|\\\\.(test|spec))\\\\.(ts|tsx|js)$",\n  "moduleFileExtensions": ["ts", "tsx", "js"],\n  "moduleNameMapper": {\n    "^Components/(.*)": "./src/components/$1"\n  },\n  "globals": {\n    "window": {},\n    "ts-jest": {\n      "tsConfig": "./tsconfig.json"\n    }\n  },\n  "setupFiles": ["./jest.stubs.js"],\n  "testURL": "http://localhost/"\n}\n\n```\n</p></details>\n\n#### jest.stubs.js\n<details><summary><i>Click to expand</i></summary><p>\n\n```tsx\n// Global/Window object Stubs for Jest\nwindow.matchMedia = window.matchMedia || function () {\n  return {\n    matches: false,\n    addListener: function () { },\n    removeListener: function () { },\n  };\n};\n\nwindow.requestAnimationFrame = function (callback) {\n  setTimeout(callback);\n};\n\nwindow.localStorage = {\n  getItem: function () { },\n  setItem: function () { },\n};\n\nObject.values = () => [];\n\n```\n</p></details>\n\n[\xe2\x87\xa7 back to top](#table-of-contents)\n\n## Style Guides\n\n### ["react-styleguidist"](https://github.com/styleguidist/react-styleguidist)\n\n[\xe2\x9f\xa9\xe2\x9f\xa9\xe2\x9f\xa9 styleguide.config.js](/playground/styleguide.config.js)  \n\n[\xe2\x9f\xa9\xe2\x9f\xa9\xe2\x9f\xa9 demo](https://piotrwitek.github.io/react-redux-typescript-guide/)\n\n[\xe2\x87\xa7 back to top](#table-of-contents)\n\n---\n\n# Recipes\n\n### General Tips\n\n#### - should I still use React.PropTypes in TS?\nNo. With TypeScript, using PropTypes is an unnecessary overhead. When declaring Props and State interfaces, you will get complete intellisense and design-time safety with static type checking. This way you\'ll be safe from runtime errors and you will save a lot of time on debugging. Additional benefit is an elegant and standardized method of documenting your component public API in the source code.  \n\n[\xe2\x87\xa7 back to top](#table-of-contents)\n\n#### - when to use `interface` declarations and when `type` aliases?\nFrom practical side, using `interface` declaration will create an identity (interface name) in compiler errors, on the contrary `type` aliases doesn\'t create an identity and will be unwinded to show all the properties and nested types it consists of.  \nAlthough I prefer to use `type` most of the time there are some places this can become too noisy when reading compiler errors and that\'s why I like to leverage this distinction to hide some of not so important type details in errors using interfaces identity.\nRelated `ts-lint` rule: https://palantir.github.io/tslint/rules/interface-over-type-literal/  \n\n[\xe2\x87\xa7 back to top](#table-of-contents)\n\n#### - what\'s better default or named exports?\nA common flexible solution is to use module folder pattern, because you can leverage both named and default import when you see fit.  \nWith this solution you\'ll achieve better encapsulation and be able to safely refactor internal naming and folders structure without breaking your consumer code:\n\n```ts\n// 1. create your component files (`select.tsx`) using default export in some folder:\n\n// components/select.tsx\nconst Select: React.FC<Props> = (props) => {\n...\nexport default Select;\n\n// 2. in this folder create an `index.ts` file that will re-export components with named exports:\n\n// components/index.ts\nexport { default as Select } from \'./select\';\n...\n\n// 3. now you can import your components in both ways, with named export (better encapsulation) or using default export (internal access):\n\n// containers/container.tsx\nimport { Select } from \'@src/components\';\nor\nimport Select from \'@src/components/select\';\n...\n```\n\n[\xe2\x87\xa7 back to top](#table-of-contents)\n\n#### - how to best initialize class instance or static properties?\nPrefered modern syntax is to use class Property Initializers  \n```tsx\nclass ClassCounterWithInitialCount extends React.Component<Props, State> {\n  // default props using Property Initializers\n  static defaultProps: DefaultProps = {\n    className: \'default-class\',\n    initialCount: 0,\n  };\n  \n  // initial state using Property Initializers\n  state: State = {\n    count: this.props.initialCount,\n  };\n  ...\n}\n```\n\n[\xe2\x87\xa7 back to top](#table-of-contents)\n\n#### - how to best declare component handler functions?\nPrefered modern syntax is to use Class Fields with arrow functions  \n```tsx\nclass ClassCounter extends React.Component<Props, State> {\n// handlers using Class Fields with arrow functions\n  handleIncrement = () => {\n    this.setState({ count: this.state.count + 1 });\n  };\n  ...\n}\n```\n\n[\xe2\x87\xa7 back to top](#table-of-contents)\n\n### Ambient Modules Tips\n\n#### Imports in ambient modules\nFor type augmentation imports should stay outside of module declaration.\n```ts\nimport { Operator } from \'rxjs/Operator\';\nimport { Observable } from \'rxjs/Observable\';\n\ndeclare module \'rxjs/Subject\' {\n  interface Subject<T> {\n    lift<R>(operator: Operator<T, R>): Observable<R>;\n  }\n}\n```\n\nWhen creating 3rd party type-definitions all the imports should be kept inside the module declaration, otherwise it will be treated as augmentation and show error\n\n```ts\ndeclare module "react-custom-scrollbars" {\n    import * as React from "react";\n    export interface positionValues {\n    ...\n```\n\n[\xe2\x87\xa7 back to top](#table-of-contents)\n\n### Type-Definitions Tips\n\n#### Missing type-definitions error\nif you cannot find types for a third-party module you can provide your own types or disable type-checking for this module using [Shorthand Ambient Modules](https://github.com/Microsoft/TypeScript-Handbook/blob/master/pages/Modules.md#shorthand-ambient-modules)\n\n```tsx\n// typings/modules.d.ts\ndeclare module \'MyTypes\';\ndeclare module \'react-test-renderer\';\n\n```\n\n#### Using custom `d.ts` files for npm modules\nIf you want to use an alternative (customized) type-definitions for some npm module (that usually comes with it\'s own type-definitions), you can do it by adding an override in `paths` compiler option.\n\n```ts\n{\n  "compilerOptions": {\n    "baseUrl": ".",\n    "paths": {\n      "redux": ["typings/redux"], // use an alternative type-definitions instead of the included one\n      ...\n    },\n    ...,\n  }\n}\n```\n\n[\xe2\x87\xa7 back to top](#table-of-contents)\n\n### Type Augmentation Tips\nStrategies to fix issues coming from external type-definitions files (*.d.ts)\n\n#### Augmenting library internal declarations - using relative import\n\n```ts\n// added missing autoFocus Prop on Input component in "antd@2.10.0" npm package\ndeclare module \'../node_modules/antd/lib/input/Input\' {\n  export interface InputProps {\n    autoFocus?: boolean;\n  }\n}\n```\n\n#### Augmenting library public declarations - using node_modules import\n\n```ts\n// fixed broken public type-definitions in "rxjs@5.4.1" npm package\nimport { Operator } from \'rxjs/Operator\';\nimport { Observable } from \'rxjs/Observable\';\n\ndeclare module \'rxjs/Subject\' {\n  interface Subject<T> {\n    lift<R>(operator: Operator<T, R>): Observable<R>;\n  }\n}\n```\n\n> More advanced scenarios for working with vendor type-definitions can be found here [Official TypeScript Docs](https://github.com/Microsoft/TypeScript-Handbook/blob/master/pages/Modules.md#working-with-other-javascript-libraries)\n\n[\xe2\x87\xa7 back to top](#table-of-contents)\n\n---\n\n## Tutorials & Articles\n> Curated list of relevant in-depth tutorials\n\nHigher-Order Components:\n- https://medium.com/@jrwebdev/react-higher-order-component-patterns-in-typescript-42278f7590fb\n\n[\xe2\x87\xa7 back to top](#table-of-contents)\n\n---\n\n\n## Contributors\n\nThanks goes to these wonderful people ([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src="https://avatars0.githubusercontent.com/u/739075?v=4" width="100px;"/><br /><sub><b>Piotrek Witek</b></sub>](https://github.com/piotrwitek)<br />[\xf0\x9f\x92\xbb](https://github.com/piotrwitek/react-redux-typescript-guide/commits?author=piotrwitek "Code") [\xf0\x9f\x93\x96](https://github.com/piotrwitek/react-redux-typescript-guide/commits?author=piotrwitek "Documentation") [\xf0\x9f\xa4\x94](#ideas-piotrwitek "Ideas, Planning, & Feedback") [\xf0\x9f\x91\x80](#review-piotrwitek "Reviewed Pull Requests") [\xf0\x9f\x92\xac](#question-piotrwitek "Answering Questions") | [<img src="https://avatars3.githubusercontent.com/u/8602615?v=4" width="100px;"/><br /><sub><b>Kazz Yokomizo</b></sub>](https://github.com/kazup01)<br />[\xf0\x9f\x92\xb5](#financial-kazup01 "Financial") [\xf0\x9f\x94\x8d](#fundingFinding-kazup01 "Funding Finding") | [<img src="https://avatars1.githubusercontent.com/u/366438?v=4" width="100px;"/><br /><sub><b>Jake Boone</b></sub>](https://github.com/jakeboone02)<br />[\xf0\x9f\x93\x96](https://github.com/piotrwitek/react-redux-typescript-guide/commits?author=jakeboone02 "Documentation") | [<img src="https://avatars1.githubusercontent.com/u/9748762?v=4" width="100px;"/><br /><sub><b>Amit Dahan</b></sub>](https://github.com/amitdahan)<br />[\xf0\x9f\x93\x96](https://github.com/piotrwitek/react-redux-typescript-guide/commits?author=amitdahan "Documentation") | [<img src="https://avatars1.githubusercontent.com/u/98167?v=4" width="100px;"/><br /><sub><b>gulderov</b></sub>](https://github.com/gulderov)<br />[\xf0\x9f\x93\x96](https://github.com/piotrwitek/react-redux-typescript-guide/commits?author=gulderov "Documentation") | [<img src="https://avatars1.githubusercontent.com/u/1964212?v=4" width="100px;"/><br /><sub><b>Erik Pearson</b></sub>](https://github.com/emp823)<br />[\xf0\x9f\x93\x96](https://github.com/piotrwitek/react-redux-typescript-guide/commits?author=emp823 "Documentation") | [<img src="https://avatars1.githubusercontent.com/u/5342677?v=4" width="100px;"/><br /><sub><b>Bryan Mason</b></sub>](https://github.com/flymason)<br />[\xf0\x9f\x93\x96](https://github.com/piotrwitek/react-redux-typescript-guide/commits?author=flymason "Documentation") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src="https://avatars1.githubusercontent.com/u/119451?v=4" width="100px;"/><br /><sub><b>Jakub Chodorowicz</b></sub>](http://www.jakub.chodorowicz.pl/)<br />[\xf0\x9f\x92\xbb](https://github.com/piotrwitek/react-redux-typescript-guide/commits?author=chodorowicz "Code") | [<img src="https://avatars1.githubusercontent.com/u/7266431?v=4" width="100px;"/><br /><sub><b>Oleg Maslov</b></sub>](https://github.com/mleg)<br />[\xf0\x9f\x90\x9b](https://github.com/piotrwitek/react-redux-typescript-guide/issues?q=author%3Amleg "Bug reports") | [<img src="https://avatars0.githubusercontent.com/u/3393293?v=4" width="100px;"/><br /><sub><b>Aaron Westbrook</b></sub>](https://github.com/awestbro)<br />[\xf0\x9f\x90\x9b](https://github.com/piotrwitek/react-redux-typescript-guide/issues?q=author%3Aawestbro "Bug reports") | [<img src="https://avatars3.githubusercontent.com/u/14539?v=4" width="100px;"/><br /><sub><b>Peter Blazejewicz</b></sub>](http://www.linkedin.com/in/peterblazejewicz)<br />[\xf0\x9f\x93\x96](https://github.com/piotrwitek/react-redux-typescript-guide/commits?author=peterblazejewicz "Documentation") | [<img src="https://avatars3.githubusercontent.com/u/1642?v=4" width="100px;"/><br /><sub><b>Solomon White</b></sub>](https://github.com/rubysolo)<br />[\xf0\x9f\x93\x96](https://github.com/piotrwitek/react-redux-typescript-guide/commits?author=rubysolo "Documentation") | [<img src="https://avatars2.githubusercontent.com/u/8838006?v=4" width="100px;"/><br /><sub><b>Levi Rocha</b></sub>](https://github.com/pino)<br />[\xf0\x9f\x93\x96](https://github.com/piotrwitek/react-redux-typescript-guide/commits?author=pino "Documentation") | [<img src="https://avatars1.githubusercontent.com/u/41281835?v=4" width="100px;"/><br /><sub><b>Sudachi-kun</b></sub>](http://cloudnative.co.jp)<br />[\xf0\x9f\x92\xb5](#financial-loadbalance-sudachi-kun "Financial") |\n| [<img src="https://avatars1.githubusercontent.com/u/14838850?v=4" width="100px;"/><br /><sub><b>Sosuke Suzuki</b></sub>](http://sosukesuzuki.github.io)<br />[\xf0\x9f\x92\xbb](https://github.com/piotrwitek/react-redux-typescript-guide/commits?author=sosukesuzuki "Code") | [<img src="https://avatars0.githubusercontent.com/u/74433?v=4" width="100px;"/><br /><sub><b>Tom Rathbone</b></sub>](https://github.com/chillitom)<br />[\xf0\x9f\x93\x96](https://github.com/piotrwitek/react-redux-typescript-guide/commits?author=chillitom "Documentation") | [<img src="https://avatars3.githubusercontent.com/u/4654382?v=4" width="100px;"/><br /><sub><b>Arshad Kazmi</b></sub>](https://arshadkazmi42.github.io/)<br />[\xf0\x9f\x93\x96](https://github.com/piotrwitek/react-redux-typescript-guide/commits?author=arshadkazmi42 "Documentation") | [<img src="https://avatars1.githubusercontent.com/u/8815362?v=4" width="100px;"/><br /><sub><b>JeongUkJae</b></sub>](https://jeongukjae.github.io)<br />[\xf0\x9f\x93\x96](https://github.com/piotrwitek/react-redux-typescript-guide/commits?author=JeongUkJae "Documentation") |\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the [all-contributors](https://github.com/kentcdodds/all-contributors) specification. Contributions of any kind welcome!\n\n---\n\nMIT License\n\nCopyright (c) 2017 Piotr Witek <piotrek.witek@gmail.com> (http://piotrwitek.github.io)\n'