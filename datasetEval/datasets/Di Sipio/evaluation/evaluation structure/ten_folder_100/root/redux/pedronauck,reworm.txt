b'<br />\n<p align="center">\n  <img src="https://cdn-std.dprcdn.net/files/acc_649651/z2M2Am" width="300" />\n</p>\n\n<p align="center">\n  <img src="https://badgen.net/npm/v/reworm" />\n  <img src="https://badgen.net/travis/pedronauck/reworm" />\n  <img src="https://badgen.net/badge/license/MIT/blue" />\n</p>\n\n<p align="center">\n  <img src="https://cdn-std.dprcdn.net/files/acc_649651/9JemSv" width="80%"/>\n</p>\n\n## \xf0\x9f\xa7\x90 &nbsp; Why?\n\nForget about actions, connections, reducers and a lot of boilerplate to create and manage states. With reworm you can create and manage state as simple as on the image above.\n\n### [Todo List Example](https://codesandbox.io/s/405lzj6m84)\n\n## \xf0\x9f\x92\xbb &nbsp; Install and Usage\n\nInstall reworm using your package manager\n\n```bash\n$ yarn add reworm\n```\n\nThen just wrap your app with our `Provider`, create your new state and use it!\n\n```jsx\nimport React from \'react\'\nimport { Provider, create } from \'reworm\'\n\nconst { get } = create({ name: \'John\' })\n\nconst App = () => (\n  <Provider>\n    <div>{get(s => s.name)}</div>\n  </Provider>\n)\n```\n\n### Change your state easily\n\nInstead of defining actions or something else to change your state, with reworm you just need to use the `set` method like that:\n\n```js\nimport React from \'react\'\nimport { Provider, create } from \'reworm\'\n\nconst { set, get } = create({ name: \'John\' })\n\nclass App extends React.Component {\n  componentDidMount() {\n    set(prev => ({ name: \'Peter\' + prev.name }))\n  }\n  render() {\n    return (\n      <Provider>\n        <div>{get(s => s.name)}</div>\n      </Provider>\n    )\n  }\n}\n```\n\n### Using selectors\n\nSelectors are good because they prevent you from duplicating code. With it you can just create some functions and use them throughout your application.\n\n```jsx\nimport React from \'react\'\nimport { Provider, create } from \'reworm\'\n\nconst { select } = create({ list: [\'Peter\', \'John\'] })\n\nconst johnSelector = select(state =>\n  state.list.find(user => user.includes(\'John\'))\n)\n\nconst App = () => (\n  <Provider>\n    <div>{johnSelector(user => user)}</div>\n  </Provider>\n)\n```\n\n### Listening state changes\n\nIf you want to listen changes on your state you can use `subscribe()`:\n\n```jsx\nimport React from \'react\'\nimport { Provider, create } from \'reworm\'\n\nconst user = create()\n\nclass App extends Component {\n  state = {\n    name: \'John\'\n  }\n\n  componentDidMount() {\n    user.subscribe(name => this.setState({ name }))\n    user.set(\'Michael\')\n  }\n\n  render() {\n    return <div>Hello {this.state.name}</div>\n  }\n}\n```\n\n## \xf0\x9f\x94\x8e &nbsp; API\n\n#### `create<T>(initial?: T): State`\nCreate a new state\n\n#### `get((state: T) => React.ReactNode)`\nUse this method to access your state\n\n#### `set((state: T | (prevState: T) => T) => T)`\nUse this method to set your state\n\n#### `select<S = any>(selector: (state: T) => S) => (fn: GetFn<T>) => React.ReactNode`\nCreate selectors that can be used with your state and avoid repeating code.\n\n#### `subscribe: (fn: SubscribeFn<T>) => () => void`\nUse this method to listen state changes\n\n## \xf0\x9f\x93\x9d &nbsp; Typings\n\n```ts\ntype PrevState<T> = (prevState: T) => T\ntype GetFn<T> = (state: T) => React.ReactNode\ntype SubscribeFn<T> = (state: T) => any\n\ninterface State<T> {\n  get: (fn: GetFn<T>) => React.ReactNode\n  set: (next: T | PrevState<T>) => void\n  select: <S = any>(\n    selector: (state: T) => S\n  ) => (fn: GetFn<S>) => React.ReactNode\n  subscribe: (fn: SubscribeFn<T>) => () => void\n}\n\nfunction create<T>(initial: T) => State<T>\n```\n\n## \xf0\x9f\x95\xba &nbsp; Contribute\n\nIf you want to contribute to this project, please see our [Contributing Guide](/CONTRIBUTING.md) !\n'