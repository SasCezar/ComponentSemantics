b"# redux-mock-store [![Circle CI](https://circleci.com/gh/arnaudbenard/redux-mock-store/tree/master.svg?style=svg)](https://circleci.com/gh/arnaudbenard/redux-mock-store/tree/master)\n\n\n![npm](https://nodei.co/npm/redux-mock-store.png?downloads=true&downloadRank=true&stars=true)\n\nA mock store for testing Redux async action creators and middleware. The mock store will create an array of dispatched actions which serve as an action log for tests.\n\nPlease note that this library is designed to test the action-related logic, not the reducer-related one. In other words, it does not update the Redux store. If you want a complex test combining actions and reducers together, take a look at other libraries (e.g., [redux-actions-assertions](https://github.com/redux-things/redux-actions-assertions)). Refer to issue [#71](https://github.com/arnaudbenard/redux-mock-store/issues/71) for more details.\n\n## Install\n\n```bash\nnpm install redux-mock-store --save-dev\n```\n\nOr\n\n```bash\nyarn add redux-mock-store --dev\n```\n\n## Usage\n\n### Synchronous actions\n\nThe simplest usecase is for synchronous actions. In this example, we will test if the `addTodo` action returns the right payload. `redux-mock-store` saves all the dispatched actions inside the store instance. You can get all the actions by calling `store.getActions()`. Finally, you can use any assertion library to test the payload.\n\n```js\nimport configureStore from 'redux-mock-store' //ES6 modules\nconst { configureStore } = require('redux-mock-store') //CommonJS\n\nconst middlewares = []\nconst mockStore = configureStore(middlewares)\n\n// You would import the action from your codebase in a real scenario\nconst addTodo = () => ({ type: 'ADD_TODO' })\n\nit('should dispatch action', () => {\n\n  // Initialize mockstore with empty state\n  const initialState = {}\n  const store = mockStore(initialState)\n\n  // Dispatch the action\n  store.dispatch(addTodo())\n\n  // Test if your store dispatched the expected actions\n  const actions = store.getActions()\n  const expectedPayload = { type: 'ADD_TODO' }\n  expect(actions).toEqual([expectedPayload])\n})\n```\n\n### Asynchronous actions\n\nA common usecase for an asynchronous action is a HTTP request to a server. In order to test those types of actions, you will need to call `store.getActions()` at the end of the request.\n\n```js\nimport configureStore from 'redux-mock-store'\nimport thunk from 'redux-thunk'\n\nconst middlewares = [thunk] // add your middlewares like `redux-thunk`\nconst mockStore = configureStore(middlewares)\n\n// You would import the action from your codebase in a real scenario\nfunction success() {\n  return {\n    type: 'FETCH_DATA_SUCCESS'\n  }\n}\n\nfunction fetchData () {\n  return dispatch => {\n    return fetch('/users.json') // Some async action with promise\n      .then(() => dispatch(success()))\n  };\n}\n\nit('should execute fetch data', () => {\n  const store = mockStore({})\n\n  // Return the promise\n  return store.dispatch(fetchData())\n    .then(() => {\n      const actions = store.getActions()\n      expect(actions[0]).toEqual(success())\n    })\n})\n```\n\n### API\n\n```js\nconfigureStore(middlewares?: Array) => mockStore: Function\n```\nConfigure mock store by applying the middlewares.\n\n```js\nmockStore(getState?: Object,Function) => store: Function\n```\nReturns an instance of the configured mock store. If you want to reset your store after every test, you should call this function.\n\n```js\nstore.dispatch(action) => action\n```\nDispatches an action through the mock store. The action will be stored in an array inside the instance and executed.\n\n```js\nstore.getState() => state: Object\n```\nReturns the state of the mock store.\n\n```js\nstore.getActions() => actions: Array\n```\nReturns the actions of the mock store.\n\n```js\nstore.clearActions()\n```\nClears the stored actions.\n\n```js\nstore.subscribe(callback: Function) => unsubscribe: Function\n```\nSubscribe to the store.\n\n```js\nstore.replaceReducer(nextReducer: Function)\n```\nFollows the Redux API.\n\n### Old version (`< 1.x.x`)\n\nhttps://github.com/arnaudbenard/redux-mock-store/blob/v0.0.6/README.md\n\n### Versions\n\nThe following versions are exposed by redux-mock-store from the `package.json`:\n\n* `main`: commonJS Version\n* `module`/`js:next`: ES Module Version\n* `browser` : UMD version\n\n## License\n\nThe MIT License\n"