b"# Mirror\n\n[![npm version](https://img.shields.io/npm/v/mirrorx.svg?colorB=007ec6&style=flat-square)](https://www.npmjs.com/package/mirrorx) [![build status](https://img.shields.io/travis/mirrorjs/mirror.svg?style=flat-square)](https://travis-ci.org/mirrorjs/mirror) [![coverage status](https://img.shields.io/coveralls/mirrorjs/mirror.svg?style=flat-square)](https://coveralls.io/github/mirrorjs/mirror?branch=master) [![license](https://img.shields.io/github/license/mirrorjs/mirror.svg?style=flat-square)](https://github.com/mirrorjs/mirror/blob/master/LICENSE)\n\n[\xe6\x9f\xa5\xe7\x9c\x8b\xe4\xb8\xad\xe6\x96\x87](https://github.com/mirrorjs/mirror/blob/master/README_zh.md)\n\nA simple and powerful React framework with minimal API and zero boilerplate. (Inspired by [dva](https://github.com/dvajs/dva) and [jumpstate](https://github.com/jumpsuit/jumpstate))\n\n> Painless React and Redux.\n\n## Why?\n\nWe love React and Redux.\n\nA typical React/Redux app looks like the following:\n\n* An `actions/` directory to manually create all `action type`s (or `action creator`s)\n* A `reducers/` directory and tons of `switch` clause to capture all `action type`s\n* Apply middlewares to handle `async action`s\n* Explicitly invoke `dispatch` method to dispatch all actions\n* Manually create `history` to router and/or sync with store\n* Invoke methods in `history` or dispatch actions to programmatically changing routes\n\nThe problem? [Too much boilerplates](https://github.com/reactjs/redux/blob/master/docs/recipes/ReducingBoilerplate.md) and a little bit tedious.\n\nIn fact, most part of the above steps could be simplified. Like, create `action`s and `reducer`s in a single method, or dispatch both sync and async actions by simply invoking a function without extra middleware, or define routes without caring about `history`, etc.\n\nThat's exactly what Mirror does, encapsulates the tedious or repetitive work in very few APIs to offer a high level abstraction with efficiency and simplicity, and without breaking the pattern.\n\n## Features\n\n* Minimal API(only 4 newly introduced)\n* Easy to start\n* Actions done easy, sync or async\n* Support code splitting\n* Full-featured hook mechanism\n\n## Getting Started\n\n### Creating an App\n\nUse [create-react-app](https://github.com/facebookincubator/create-react-app) to create an app:\n\n```sh\n$ npm i -g create-react-app\n$ create-react-app my-app\n```\n\nAfter creating, install Mirror from npm:\n\n```sh\n$ cd my-app\n$ npm i --save mirrorx\n$ npm start\n```\n\n### `index.js`\n\n```js\nimport React from 'react'\nimport mirror, {actions, connect, render} from 'mirrorx'\n\n// declare Redux state, reducers and actions,\n// all actions will be added to `actions`.\nmirror.model({\n  name: 'app',\n  initialState: 0,\n  reducers: {\n    increment(state) { return state + 1 },\n    decrement(state) { return state - 1 }\n  },\n  effects: {\n    async incrementAsync() {\n      await new Promise((resolve, reject) => {\n        setTimeout(() => {\n          resolve()\n        }, 1000)\n      })\n      actions.app.increment()\n    }\n  }\n})\n\n// connect state with component\nconst App = connect(state => {\n  return {count: state.app}\n})(props => (\n    <div>\n      <h1>{props.count}</h1>\n      {/* dispatch the actions */}\n      <button onClick={() => actions.app.decrement()}>-</button>\n      <button onClick={() => actions.app.increment()}>+</button>\n      {/* dispatch the async action */}\n      <button onClick={() => actions.app.incrementAsync()}>+ Async</button>\n    </div>\n  )\n)\n\n// start the app\xef\xbc\x8c`render` is an enhanced `ReactDOM.render`\nrender(<App />, document.getElementById('root'))\n```\n\n### [Demo](https://codesandbox.io/s/814mnvw1qj)\n\n## Guide\n\nSee [Guide](https://github.com/mirrorjs/mirror/blob/master/docs/guide.md).\n\n## API\n\nSee [API Reference](https://github.com/mirrorjs/mirror/blob/master/docs/api.md).\n\n## Examples\n\n* [User-Dashboard](https://github.com/mirrorjs/user-dashboard-example) (An example similar to dva-user-dashboard)\n* [Counter](https://github.com/mirrorjs/mirror/blob/master/examples/counter)\n* [Simple-Router](https://github.com/mirrorjs/mirror/blob/master/examples/simple-router)\n* [Todo](https://github.com/mirrorjs/mirror/blob/master/examples/todo)\n\n## Change log\n\nSee [CHANGES.md](https://github.com/mirrorjs/mirror/blob/master/CHANGES.md).\n\n## FAQ\n\n#### Does Mirror support TypeScript?\n\nYes, it does.\n\n#### Does Mirror support [Redux DevTools Extension](https://github.com/zalmoxisus/redux-devtools-extension)?\n\nYes, Mirror integrates Redux DevTools by default to make your debugging more easily.\n\n#### Can I use extra Redux middlewares?\n\nYes, specify them in [`mirror.defaults`](https://github.com/mirrorjs/mirror/blob/master/docs/api.md#-optionsmiddlewares) is all you need to do, learn more from the Docs.\n\n#### I'm really into Redux-Saga, is there any way to use it in Mirror?\n\nYes of course, take a look at the [`addEffect`](https://github.com/mirrorjs/mirror/blob/master/docs/api.md#-optionsaddeffect) option.\n\n#### Which version of react-router does Mirror use?\n\nreact-router v4.\n\n"