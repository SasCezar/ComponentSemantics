b'![Logo](./img/logo.png)\n\n# WPGraphQL \n\n<a href="https://www.wpgraphql.com" target="_blank">Website</a> \xe2\x80\xa2 <a href="https://docs.wpgraphql.com/" target="_blank">Docs</a> \xe2\x80\xa2\xc2\xa0<a href="https://wpgql-slack.herokuapp.com/" target="_blank">Join Slack</a>\n\nGraphQL API for WordPress.\n\n[![Build Status](https://travis-ci.org/wp-graphql/wp-graphql.svg?branch=master)](https://travis-ci.org/wp-graphql/wp-graphql)\n[![codecov](https://codecov.io/gh/wp-graphql/wp-graphql/branch/master/graph/badge.svg)](https://codecov.io/gh/wp-graphql/wp-graphql)\n[![Backers on Open Collective](https://opencollective.com/wp-graphql/backers/badge.svg)](#backers) \n[![Sponsors on Open Collective](https://opencollective.com/wp-graphql/sponsors/badge.svg)](#sponsors) \n\n------\n\n## Quick Install\nDownload and install like any WordPress plugin.\n[Details on Install and Activation](https://docs.wpgraphql.com/getting-started/install-and-activate)\n\n## Documentation\n\nDocumentation can be found [here](https://docs.wpgraphql.com). The repository where the Documentation content lives is [here](https://github.com/wp-graphql/docs.wpgraphql.com)\n\n- Requires PHP 5.5+\n- Requires WordPress 4.7+\n\n## Overview\nThis plugin brings the power of GraphQL to WordPress.\n\n<a href="https://graphql.org" target="_blank">GraphQL</a> is a query language spec that was open sourced by Facebook\xc2\xae in \n2015, and has been used in production by Facebook\xc2\xae since 2012.\n\nGraphQL has some similarities to REST in that it exposes an HTTP endpoint where requests can be sent and a JSON response \nis returned. However, where REST has a different endpoint per resource, GraphQL has just a single endpoint and the\ndata returned isn\'t implicit, but rather explicit and matches the shape of the request. \n\nA REST API is implicit, meaning that the data coming back from an endpoint is implied. An endpoint such as `/posts/` \nimplies that the data I will retrieve is data related to Post objects, but beyond that it\'s hard to know exactly what \nwill be returned. It might be more data than I need or might not be the data I need at all. \n\nGraphQL is explicit, meaning that you ask for the data you want and you get the data back in the same shape that it was \nasked for.\n\nAdditionally, where REST requires multiple HTTP requests for related data, GraphQL allows related data to be queried and \nretrieved in a single request, and again, in the same shape of the request without any worry of over or under-fetching \ndata.\n\nGraphQL also provides rich introspection, allowing for queries to be run to find out details about the Schema, which is\nhow powerful dev tools, such as _GraphiQl_ have been able to be created.\n\n## GraphiQL API Explorer\n_GraphiQL_ is a fantastic GraphQL API Explorer / IDE. There are various versions of _GraphiQL_\nthat you can find, including a <a href="https://chrome.google.com/webstore/detail/chromeiql/fkkiamalmpiidkljmicmjfbieiclmeij?hl=en">Chrome Extension</a> but\nmy recommendation is the _GraphiQL_ desktop app below:\n\n- <a href="https://github.com/skevy/graphiql-app">Download the GraphiQL Desktop App</a>\n    - Once the app is downloaded and installed, open the App.\n    - Set the `GraphQL Endpoint` to `http://yoursite.com/graphql`. In order for the /graphql endpoint to work, you must have [pretty permalinks](https://codex.wordpress.org/Using_Permalinks/) enabled.\n    - You should now be able to browse the GraphQL Schema via the "Docs" explorer\n    at the top right. \n    - On the left side, you can execute GraphQL Queries\n    \n    <img src="https://github.com/wp-graphql/wp-graphql/blob/master/img/graphql-docs.gif?raw=true" alt="GraphiQL API Explorer">\n\n## POSSIBLE BREAKING CHANGES\nPlease note that as the plugin continues to take shape, there might be breaking changes at any point. Once the plugin reaches a stable 1.0.0 release, breaking changes should be minimized and communicated appropriately if they are required.\n\n## Unit Testing and Code Coverage \n\nBefore anything is merged into the WPGraphQL code base it must pass all tests and have 100% code coverage. \nTravis-CI and Coveralls will check this when you create a pull request to the WPGraphQL repo. \nHowever, before that happens, you should ensure all of these requirements are met locally. \nThe following will help you set up both testing and code coverage in your local environment.\n\n### Prerequisites\nTo run unit tests and code coverage during development you\'ll need the following:\n\n* [Composer](https://getcomposer.org/doc/00-intro.md)\n    * [php-coveralls](https://github.com/php-coveralls/php-coveralls)\n        * `composer global require php-coveralls/php-coveralls`\n* [Xdebug](https://xdebug.org/docs/install)\n\n### Test Database\nIn order for tests to run, you need MySQL setup locally. The test suite will need 2 databases for testing. \nOne named `wpgraphql_serve` and the other you can name yourself. \nYou can keep these databases around if you like and the test suite will use the existing databases, or you can delete them when you\'re done testing and the test suite will \nre-install them as needed the next time you run the script to install the tests.\n\n*NOTE*: You\'ll want the test database to be a true test database, not a database with valuable, existing information. \nThe tests will create new data and clear out data, and you don\'t want to cause issues with a database you\'re actually using for projects.\n\n### Installing the Test Suite\nTo install the test suite/test databases, from the root of the plugin directory, in the command line run: \n\n`bin/install-wp-tests.sh <db-name> <db-user> <db-pass> [db-host] [wp-version]`\n\nFor example: \n\n`bin/install-wp-tests.sh wpgraphql_test root password 127.0.0.1 latest`\n\n*DEBUGGING*: \n\n- If you have run this command before in another branch you may already have a local copy of WordPress downloaded in your `/private/tmp` directory. If this is the case, please remove it and then run the install script again. Without removing this you may receive an error when running phpunit.\n\n- This is installed into your machine\'s `tmp` directory, so if you restart your computer, you will need to re-run this script to install. \n\n\n#### Local Environment Configuration for Codeception Tests\n\nYou may have different local environment configuration than what Travis CI has to run the tests, such as database username/password.\n\nIn the `/tests` directory you will find `*.suite.dist.yml` config files for each of the codeception test suites. \n\nYou can copy those files and remove the `.dist` from the filename, and that file will be loaded locally _before_ the `.dist` file.\n\nFor example, if you wanted to update the `dbName` or `dbPassword` for your local tests, you could copy `wpunit.suite.dist.yml` to `wpunit.suite.yml` and update the `dbName` or `dbPassword` value to reflect your local database and password.\n\nThis file is .gitignored, so it will remain in your local environment but will not be added to the repo when you submit pull requests.\n\n### Running the Tests\nThe tests are built on top of the Codeception testing framework. \n\nTo run the tests, after you\'ve installed the test suite, as described above, you need to also install the `wp-browser`. \n\n*@todo*: Make this easier than running all these steps, but for now this is what we\'ve got to do.\nPerhaps someone who\'s more of a Composer expert could lend some advise?:\n\n\n- `rm -rf composer.lock vendor` to remove all composer dependencies and the composer lock file\n- `composer require lucatume/wp-browser --dev` to install the Codeception WordPress deps\n- `vendor/bin/codecept run` to run all the codeception tests\n    - You can specify which tests to run like: \n        - `vendor/bin/codecept run wpunit`\n        - `vendor/bin/codecept run functional`\n        - `vendor/bin/codecept run acceptance`\n    - If you\'re working on a class, or with a specific test, you can run that class/test with:\n        - `vendor/bin/codecept run tests/wpunit/NodesTest.php`\n        - `vendor/bin/codecept run tests/wpunit/NodesTest.php:testPluginNodeQuery`\n\n\n### Using Docker\nDocker can be used to run tests or a local application instance in an isolated environment. It can also take care of most\nof the set up and configuration tasks performed by a developer.   \n\n1. Verify [Docker CE](https://www.docker.com/community-edition) 17.09.0+ is installed:\n   ```\n   sudo docker --version\n   ```\n   \n1. Verify [Docker Compose](https://docs.docker.com/compose/install/) is installed:\n   ```\n   sudo docker-compose --version\n   ```\n1. (Optional, but handy) How to use Docker without having to type, `sudo`.   \n   * https://docs.docker.com/install/linux/linux-postinstall/#manage-docker-as-a-non-root-user\n\n\n#### Running Wordpress + wp-graphql\n1. Start a local instance of WordPress. This will run the instance in the foreground:\n   ```\n   ./run-docker-local-app.sh\n   ```\n1. Visit http://127.0.0.1:8000.\n\n#### Using PHPStorm/IntelliJ+XDebug (OS X and Linux)\n\n1. Make sure PHPStorm/IntelliJ is listenting on port 9000 for incoming XDebug connections from the WP container (for more info on remote XDebug debugging, visit https://xdebug.org/docs/remote):\n   ![alt text](img/intellij-php-debug-config.png)\n   \n1. Create a PHP server mapping. This tells the debugger how to map a file path in the container to a file path on the host OS.\n   ![alt text](img/intellij-php-servers.png)\n\n1. Create a PHP Debug run configuration.\n   ![alt text](img/intellij-php-debug-run-config.png) \n\n1. Run WordPress+the plugin with XDebug enabled. Here\'s an example:\n   ```\n   ./run-docker-local-app-xdebug.sh\n   ```\n\n1. Start the debugger:\n   ![alt text](img/intellij-php-start-debug.png)\n   \n1. Now when you visit http://127.0.0.1:8000 you can use the debugger.           \n\n\n#### Using MySQL clients to connect to MySQL containers\n1. Run the application with desired sites. Here\'s an example:\n   ```\n   ./run-docker-local-app.sh\n   ```\n\n1. List the MySQL containers that are running and their MySQL port mappings. These ports will change each time the app is run:  \n   ```\n   ./list-mysql-containers.sh\n   ```\n   \n   You should see output like the following:\n   ```\n   aa38d8d7eff1        mariadb:10.2.24-bionic          "docker-entrypoint.s\xe2\x80\xa6"   14 seconds ago      Up 13 seconds       0.0.0.0:32772->3306/tcp   docker_mysql_test_1\n   ```\n   \n1. Configure your MySQL client to connect to `localhost` and the appropriate ***host*** port. For example, to connect\n   to the MySQL container shown above, have the MySQL client connect with this configuration:\n   * IP/Hostname: `localhost`\n   * Port: `32772`\n   * Database: `wpgraphql_test`\n   * User: `root`\n   * Password: `testing`\n\n   \n#### Running tests with Docker\n\n##### For developers\nYou\'ll need two terminal windows for this. The first window is to start the Docker containers needed for running tests. The\nsecond window is where you\'ll log into one of the running Docker containers (which will have OS dependencies already installed) and run \nyour tests as you make code changes.\n\n1. In the first terminal window, start up a pristine Docker testing environment by running this command:\n   ```\n   ./run-docker-test-environment.sh\n   ```\n   This step will take several minutes the first time it\'s run because it needs to install OS dependencies. This work will\n   be cached so you won\'t have to wait as long the next time you run it. You are ready to go to the next step when you\n   see output similar to the following:\n   ```\n   wpgraphql.test_1  | [Tue Oct 30 15:04:33.917067 2018] [core:notice] [pid 1] AH00094: Command line: \'apache2 -D FOREGROUND\'\n   \n   ```\n1. In the second terminal window, access the Docker container shell from which you can run tests:\n   ```\n   ./run-docker-test-environment-shell.sh\n   ```\n   You should eventually see a prompt like this:\n   ```\n   root@cd8e4375eb6f:/tmp/wordpress/wp-content/plugins/wp-graphql\n   ```   \n1. Now you are ready to work in your IDE and test your changes by running any of the following commands in the second\nterminal window):\n   ```\n   vendor/bin/codecept run wpunit --env docker\n   vendor/bin/codecept run functional --env docker\n   vendor/bin/codecept run acceptance --env docker\n   vendor/bin/codecept run tests/wpunit/NodesTest.php --env docker\n   vendor/bin/codecept run tests/wpunit/NodesTest.php:testPluginNodeQuery --env docker\n   ```\nNotes:\n* If you make a change that requires `composer install` to be rerun, shutdown the testing environment and restart it to \nautomatically rerun the `composer install` in the testing environment.\n* Leave the container shell (the second terminal window) by typing `exit`.\n* Shutdown the testing environment (the first terminal window) by typing `Ctrl + c` \n* Docker artifacts will *usually* be cleaned up automatically when the script completes. In case it doesn\'t do the job,\ntry these solutions:\n   * Run this command: `docker system prune`\n   * https://docs.docker.com/config/pruning/#prune-containers\n\n\n##### For CI tools (e.g. Travis)\n* Run the tests in pristine Docker environments by running any of these commands: \n   ```\n   ./run-docker-tests.sh \'wpunit\'\n   ./run-docker-tests.sh \'functional\'\n   ./run-docker-tests.sh \'acceptance\'\n   ```\n\n* Run the tests in pristine Docker environments with different configurations. Here are some examples: \n   ```\n   env PHP_VERSION=\'7.1\' ./run-docker-tests.sh \'wpunit\'\n   env PHP_VERSION=\'7.1\' COVERAGE=\'true\' ./run-docker-tests.sh \'functional\'\n   ```\nIf `COVERAGE=\'true\'` is set, results will appear in `docker-output/`.\n\n\nNotes:\n* Code coverage for `functional` and `acceptance` tests is only supported for PHP 7.X. \n  \n\n#### Updating WP Docker software versions\nMake sure the `docker/docker-compose*.yml` files refer to the most recent and specific version of the official WordPress Docker and MySQL compatible images.\nPlease avoid using the `latest` Docker tag. Once Docker caches a Docker image for a given tag onto your machine, it won\'t automatically\ncheck for updates. Using an actual version number ensures Docker image caches are updated at the right time.\n\nList of software versions to check:\n* Travis config `.travis.yml`\n* Test base Dockerfile (`Dockerfile.test-base`)\n   * XDebug\n   * Official WordPress/PHP Docker image\n   * PHP Composer\n\n* XDebug Dockerfile (`Dockerfile.xdebug`)\n   * XDebug\n\n  \n### Generating Code Coverage\nYou can generate code coverage for tests by passing `--coverage`, `--coverage-xml` or `--coverage-html` with the tests. \n\n- `--coverage` will print coverage info to the screen\n- `--coverage-xml` will save an XML file that can be used by services like Coveralls or CodeCov\n- `--coverage-html` will save the coverage report in an HTML file that you can browse. \n\nThe coverage details will be output to `/tests/_output`\n\n### Running Individual Files \nAs you\'ll note, running all of the tests in the entire test suite can be time consuming. If you would like to run only one test file instead of all of them, simply pass the test file you\'re trying to test, like so:\n\n`vendor/bin/codecept run wpunit AvatarObjectQueriesTest`\n\nTo capture coverage for a single file, you can run the test like so:\n\n`vendor/bin/codecept run wpunit AvatarObjectQueriesTest --coverage`\n\nAnd you can output the coverage locally to HTML like so: \n\n`vendor/bin/codecept run wpunit AvatarObjectQueriesTest --coverage --coverage-html`\n\n## Linting\nAs a helpful development tool, you can enable automatic linting before commiting.\n1. Run `npm install`. \n2. Before development, run `composer install`\n3. After you\'re done run `composer install --no-dev` to remove development dependencies\n\n(Steps 2 and 3 will be removed once we have an automated build process. See https://github.com/wp-graphql/wp-graphql/issues/224) \n\nYour changed files will now be linted via phpcs and your commit will fail with a list of errors if there are any.\n\n## Shout Outs\nThis plugin brings the power of GraphQL (http://graphql.org/) to WordPress.\n\nThis plugin is based on the hard work of Jason Bahl, Ryan Kanner, Hughie Devore and Peter Pak of Digital First Media (https://github.com/dfmedia),\nand Edwin Cromley of BE-Webdesign (https://github.com/BE-Webdesign).\n\nThe plugin is built on top of the graphql-php library by Webonyx (https://github.com/webonyx/graphql-php) and makes use \nof the graphql-relay-php library by Ivome (https://github.com/ivome/graphql-relay-php/)\n\nSpecial thanks to Digital First Media (http://digitalfirstmedia.com) for allocating development resources to push the \nproject forward.\n\nSome of the concepts and code are based on the WordPress Rest API. Much love to the folks (https://github.com/orgs/WP-API/people) \nthat put their blood, sweat and tears into the WP-API project, as it\'s been huge in moving WordPress forward as a \nplatform and helped inspire and direct the development of WPGraphQL.\n\nMuch love to Facebook\xc2\xae for open sourcing the GraphQL spec (https://facebook.github.io/graphql/), the amazing GraphiQL \ndev tools (https://github.com/graphql/graphiql), and maintaining the JavaScript GraphQL reference \nimplementation (https://github.com/graphql/graphql-js)\n\nMuch love to Apollo (Meteor Development Group) for their work on driving GraphQL forward and providing a lot of insight \ninto how to design GraphQL schemas, etc. Check them out: http://www.apollodata.com/\n\n## Contributors\n\nThis project exists thanks to all the people who contribute. [[Contribute](CONTRIBUTING.md)].\n<a href="https://github.com/wp-graphql/wp-graphql/graphs/contributors"><img src="https://opencollective.com/wp-graphql/contributors.svg?width=890&button=false" /></a>\n\n\n## Backers\n\nThank you to all our backers! \xf0\x9f\x99\x8f [[Become a backer](https://opencollective.com/wp-graphql#backer)]\n\n<a href="https://opencollective.com/wp-graphql#backers" target="_blank"><img src="https://opencollective.com/wp-graphql/backers.svg?width=890"></a>\n\n\n## Sponsors\n\nSupport this project by becoming a sponsor. Your logo will show up here with a link to your website. [[Become a sponsor](https://opencollective.com/wp-graphql#sponsor)]\n\n<a href="https://opencollective.com/wp-graphql/sponsor/0/website" target="_blank"><img src="https://opencollective.com/wp-graphql/sponsor/0/avatar.svg"></a>\n<a href="https://opencollective.com/wp-graphql/sponsor/1/website" target="_blank"><img src="https://opencollective.com/wp-graphql/sponsor/1/avatar.svg"></a>\n<a href="https://opencollective.com/wp-graphql/sponsor/2/website" target="_blank"><img src="https://opencollective.com/wp-graphql/sponsor/2/avatar.svg"></a>\n<a href="https://opencollective.com/wp-graphql/sponsor/3/website" target="_blank"><img src="https://opencollective.com/wp-graphql/sponsor/3/avatar.svg"></a>\n<a href="https://opencollective.com/wp-graphql/sponsor/4/website" target="_blank"><img src="https://opencollective.com/wp-graphql/sponsor/4/avatar.svg"></a>\n<a href="https://opencollective.com/wp-graphql/sponsor/5/website" target="_blank"><img src="https://opencollective.com/wp-graphql/sponsor/5/avatar.svg"></a>\n<a href="https://opencollective.com/wp-graphql/sponsor/6/website" target="_blank"><img src="https://opencollective.com/wp-graphql/sponsor/6/avatar.svg"></a>\n<a href="https://opencollective.com/wp-graphql/sponsor/7/website" target="_blank"><img src="https://opencollective.com/wp-graphql/sponsor/7/avatar.svg"></a>\n<a href="https://opencollective.com/wp-graphql/sponsor/8/website" target="_blank"><img src="https://opencollective.com/wp-graphql/sponsor/8/avatar.svg"></a>\n<a href="https://opencollective.com/wp-graphql/sponsor/9/website" target="_blank"><img src="https://opencollective.com/wp-graphql/sponsor/9/avatar.svg"></a>\n\n\n'