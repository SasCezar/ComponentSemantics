b'# `babel-standalone` is now part of `babel`! Go [check it out](https://github.com/babel/babel/tree/master/packages/babel-standalone) :warning::warning::warning::warning:\n\nbabel-standalone\n================\n\nbabel-standalone is a standalone build of Babel for use in non-Node.js environments, including browsers. It\'s bundled with all the standard Babel plugins and presets, and [a build of babili (babel-minify)](http://dl.vc/babili-standalone) is optionally available too.\n\nBut why?!\n=========\n\nIt\'s true that using Babel through Webpack, Browserify or Gulp should be sufficient for most use cases. However, there are some valid use cases for babel-standalone:\n\n - Sites like [JSFiddle](https://jsfiddle.net/), [JS Bin](https://jsbin.com/), the [REPL on the Babel site](http://babeljs.io/repl/), etc. These sites compile user-provided JavaScript in real-time.\n - Apps that embed a JavaScript engine such as V8 directly, and want to use Babel for compilation\n  - Apps that want to use JavaScript as a scripting language for extending the app itself, including all the goodies that ES2015 provides.\n  - Integration of Babel into a non-Node.js environment ([ReactJS.NET](http://reactjs.net/), [ruby-babel-transpiler](https://github.com/babel/ruby-babel-transpiler), [php-babel-transpiler](https://github.com/talyssonoc/php-babel-transpiler), etc).\n\nInstallation\n============\n\nThere are several ways to get a copy of babel-standalone. Pick whichever one you like:\n\n- Use it via UNPKG: https://unpkg.com/babel-standalone@6/babel.min.js. This is a simple way to embed it on a webpage without having to do any other setup.\n- Install via Bower: `bower install babel-standalone`\n- Install via NPM: `npm install --save babel-standalone`\n- Manually grab `babel.js` and/or `babel.min.js` from the [GitHub releases page](https://github.com/Daniel15/babel-standalone/releases). Every release includes these files.\n- Install it via Git: You can use the repo at https://github.com/Daniel15/babel-standalone-bower to pull a prebuilt version from Git. Note that this is generally only advised for systems that *must* pull artifacts from Git, such as Bower.\n\nUsage\n=====\n\nLoad `babel.js` or `babel.min.js` in your environment. This will expose [Babel\'s API](http://babeljs.io/docs/usage/api/) in a `Babel` object:\n\n```js\nvar input = \'const getMessage = () => "Hello World";\';\nvar output = Babel.transform(input, { presets: [\'es2015\'] }).code;\n```\n\nWhen loaded in a browser, babel-standalone will automatically compile and execute all script tags with type `text/babel` or `text/jsx`:\n```html\n<div id="output"></div>\n<!-- Load Babel -->\n<script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script>\n<!-- Your custom script here -->\n<script type="text/babel">\nconst getMessage = () => "Hello World";\ndocument.getElementById(\'output\').innerHTML = getMessage();\n</script>\n```\n\nYou can use the `data-plugins` and `data-presets` attributes to specify the Babel plugins/presets to use:\n```html\n<script type="text/babel" data-presets="es2015,stage-2">\n```\n\nLoading external scripts via `src` attribute is supported too:\n```html\n<script type="text/babel" src="foo.js"></script>\n```\n\nNote that `.babelrc` doesn\'t work in babel-standalone, as no file system access is available. The presets and/or plugins to use **must** be specified in the options passed to `Babel.transform`.\n\nCustomisation\n=============\nCustom plugins and presets can be added using the `registerPlugin` and `registerPreset` methods respectively:\n\n```js\n// Simple plugin that converts every identifier to "LOL"\nfunction lolizer() {\n  return {\n    visitor: {\n      Identifier(path) {\n        path.node.name = \'LOL\';\n      }\n    }\n  }\n}\nBabel.registerPlugin(\'lolizer\', lolizer);\n```\n\nOnce registered, just use the name of the plugin:\n\n```js\nvar output = Babel.transform(\n  \'function helloWorld() { alert(hello); }\',\n  {plugins: [\'lolizer\']}\n);\n// Returns "function LOL() { LOL(LOL); }"\n```\n\nCustom plugins also work for inline `<script>`s:\n\n```html\n<script type="text/babel" data-plugins="lolizer">\n```\n\nManually Building\n=================\n\nIf you want to manually upgrade the Babel version used by babel-standalone (or build your own release), follow these steps:\n\n1. Upgrade the Babel versions in `package.json`. This can be done with `npm-check-upgrades` (eg. `npm-check-updates -u -a --packageFile ./package.json /^babel\\-/`)\n2. Delete `node_modules`, as npm often produces inefficient directory layouts if you upgrade in-place\n3. Run `npm install && npm run build`\n4. Run `npm run test` to ensure it works\n5. Open `examples/example.htm` and ensure it works\n'