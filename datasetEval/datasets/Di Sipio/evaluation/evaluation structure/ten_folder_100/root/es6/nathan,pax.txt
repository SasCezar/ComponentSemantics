b"# Pax\n\nThe [fastest](#is-it-fast) JavaScript bundler in the galaxy. Fully supports ECMAScript module syntax (`import`/`export`) in addition to CommonJS `require(<string>)`.\n\n- [Why do I need it?](#why-do-i-need-it)\n- [How do I get it?](#how-do-i-get-it)\n- [How do I use it?](#how-do-i-use-it)\n- [Does it do source maps?](#does-it-do-source-maps)\n- [Modules?](#modules)\n- [What are the options?](#what-are-the-options)\n- [Is it fast?](#is-it-fast)\n\n# Why do I need it?\n\nBecause your bundler is **too slow**.\n\nYou know the feeling. You make that tweak, hit <kbd>\xe2\x8c\x98S</kbd> <kbd>\xe2\x8c\x98Tab</kbd> <kbd>\xe2\x8c\x98R</kbd>, and\xe2\x80\xa6 **nothing changes**. You get the old version. You beat the bundler. You wait a few seconds, hit <kbd>\xe2\x8c\x98R</kbd> again, and your changes finally show up. But it\xe2\x80\x99s too late\xe2\x80\x94**you\xe2\x80\x99ve lost momentum.** It\xe2\x80\x99s the wrong shade of pink. You spelled \xe2\x80\x9cmenu\xe2\x80\x9d with a z. The bug still happens sometimes.\n\nRinse. Repeat. Ten cycles later, things are looking good. It\xe2\x80\x99s time to `git commit`. But you spent **more time waiting than working**. And it\xe2\x80\x99s your bundler\xe2\x80\x99s fault.\n\nPax is a bundler. But you\xe2\x80\x99ll never beat it. Why?\n\n- It\xe2\x80\x99s parallelized. It makes the most of your cores.\n- It\xe2\x80\x99s minimal. It isn\xe2\x80\x99t bogged down by features you don\xe2\x80\x99t need.\n- It knows exactly enough about JavaScript to handle dependency resolution. It doesn\xe2\x80\x99t even bother parsing most of your source code.\n\nDon\xe2\x80\x99t waste time waiting for your bundler to do its thing. Use Pax while you\xe2\x80\x99re developing, and **iterate to your heart\xe2\x80\x99s content**. Use your super-cool, magical, slow-as-molasses bundler for releases, when you don\xe2\x80\x99t care how long it takes to run.\n\n# How do I get it?\n\n```sh\n> cargo install pax\n```\n\nIf you don\xe2\x80\x99t have `cargo`, install it with [https://rustup.rs](https://rustup.rs/).\n\n# How do I use it?\n\n```js\n// index.js:\nconst itt = require('itt')\nconst math = require('./math')\nconsole.log(itt.range(10).map(math.square).join(' '))\n\n// math.js:\nexports.square = x => x * x\n```\n\n```sh\n> px index.js bundle.js\n```\n\nSlap on a `<script src=bundle.js>`, and you\xe2\x80\x99re ready to go. Pass `-w` to rebuild whenever you change a file.\n\n```sh\n> px -w index.js bundle.js\n ready bundle.js in 1 ms\nupdate bundle.js in 1 ms\n...\n```\n\n# Does it do source maps?\n\nOf course!\n\n```sh\n# bundle.js and bundle.js.map\n> px index.js bundle.js\n\n# bundle.js with inline map\n> px --map-inline index.js bundle.js\n\n# bundle.js with no source map\n> px index.js >bundle.js\n# or\n> px --no-map index.js bundle.js\n```\n\n# Modules?\n\nThat\xe2\x80\x99s technically not a question. But yes.\n\n```js\n// index.mjs\nimport itt from 'itt'\nimport { square, cube } from './math'\n\nconsole.log(itt.range(10).map(square).join(' '))\nconsole.log(itt.range(10).map(cube).join(' '))\n\n// math.mjs\nexport const square = x => x * x, cube = x => x * x * x\n```\n\n```\n> px -e index.mjs bundle.js\n```\n\nIf you need your modules to be in `.js` files for some reason, use `-E` (`--es-syntax-everywhere`) instead of `-e` (`--es-syntax`).\n\n# What are the options?\n\n```\n> px --help\npax v0.4.0\n\nUsage:\n    px [options] <input> [output]\n    px [-h | --help]\n\nOptions:\n    -i, --input <input>\n        Use <input> as the main module.\n\n    -o, --output <output>\n        Write bundle to <output> and source map to <output>.map.\n        Default: '-' for stdout.\n\n    -m, --map <map>\n        Output source map to <map>.\n\n    -I, --map-inline\n        Output source map inline as data: URI.\n\n    -M, --no-map\n        Suppress source map output when it would normally be implied.\n\n    -w, --watch\n        Watch for changes to <input> and its dependencies.\n\n    -W, --quiet-watch\n        Don't emit a bell character for errors that occur while watching.\n        Implies --watch.\n\n    -e, --es-syntax\n        Support .mjs files with ECMAScript module syntax:\n\n            import itt from 'itt'\n            export const greeting = 'Hello, world!'\n\n        Instead of CommonJS require syntax:\n\n            const itt = require('itt')\n            exports.greeting = 'Hello, world!'\n\n        .mjs (ESM) files can import .js (CJS) files, in which case the\n        namespace object has a single `default` binding which reflects the\n        value of `module.exports`. CJS files can require ESM files, in which\n        case the resultant object is the namespace object.\n\n    -E, --es-syntax-everywhere\n        Implies --es-syntax. Allow ECMAScript module syntax in .js files.\n        CJS-style `require()` calls are also allowed.\n\n    -x, --external <module1,module2,...>\n        Don't resolve or include modules named <module1>, <module2>, etc.;\n        leave them as require('<module>') references in the bundle. Specifying\n        a path instead of a module name does nothing.\n\n    --external-core\n        Ignore references to node.js core modules like 'events' and leave them\n        as require('<module>') references in the bundle.\n\n    -h, --help\n        Print this message.\n\n    -v, --version\n        Print version information.\n```\n\n# Is it fast?\n\nUmm\xe2\x80\xa6\n\nYes.\n\n```sh\n> time browserify index.js >browserify.js\nreal    0m0.225s\nuser    0m0.197s\nsys     0m0.031s\n> time node fuse-box.js\nreal    0m0.373s\nuser    0m0.324s\nsys     0m0.051s\n> time px index.js >bundle.js\nreal    0m0.010s\nuser    0m0.005s\nsys     0m0.006s\n\n# on a larger project\n> time browserify src/main.js >browserify.js\nreal    0m2.385s\nuser    0m2.459s\nsys     0m0.416s\n> time px src/main.js >bundle.js\nreal    0m0.037s\nuser    0m0.071s\nsys     0m0.019s\n\n# want source maps?\n> time browserify -d src/main.js -o bundle.js\nreal    0m3.142s\nuser    0m3.060s\nsys     0m0.483s\n> time px src/main.js bundle.js\nreal    0m0.046s\nuser    0m0.077s\nsys     0m0.026s\n\n# realtime!\n> px -w examples/simple bundle.js\n ready bundle.js in 2 ms\nupdate bundle.js in 2 ms\nupdate bundle.js in 2 ms\nupdate bundle.js in 1 ms\nupdate bundle.js in 2 ms\nupdate bundle.js in 1 ms\nupdate bundle.js in 3 ms\n^C\n```\n"