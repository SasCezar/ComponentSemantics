b'# Typefont\nTypefont is an experimental library that detects the font of a text in a image.\n\n## Usage\nImport the main function and invoke it like in the following script.\n\n```javascript\nimport { Typefont } from "./src/index.js";\n\nTypefont("image.png").then((result) => console.log(result));\n```\nor\n```javascript\nimport { Typefont } from "./src/index.js";\n\nasync function getFontFromImage (source) {\n    const fonts = await Typefont(source);\n    \n    return fonts[0]; // Return the most similar font.\n}\n```\n\nThe first argument of the function can be the `path` or the `base64` of the image. The function returns a Promise that when is resolved returns an array containing each font ordered in descending order (considering the similarity percentage).\n\n## Preview\nText on the cover of a book (the language is different because I live in Italy).\n![](http://i.imgur.com/1JnyIC3.jpg)\n\nText on the cover of another book.\n![](http://i.imgur.com/smfr0Kn.jpg)\n\n## Version 2\nI\'m working on a new version which gets the fonts directly from .ttf files and the Google Fonts database. The comparison is made \nusing the [Hausdorff Distance](https://en.wikipedia.org/wiki/Hausdorff_distance) and the\n[Shape Context](https://en.wikipedia.org/wiki/Shape_context). If you are interested in a collaboration contact\nme (vasile.peste@protonmail.ch). It\'s difficult to progress since I work and I have many other projects.\n\n## Options\nYou can pass an object with options to the function as second argument.\n\nOption | Type | Description | Default\n--- | --- | --- | ---\n`progress` | `Function` | A function that is called every time the comparison with a font is completed. | `undefined`\n`minSymbolConfidence` | `Number` | The minimum confidence that a symbol must have to be accepted in the comparison queue (the confidence value is assigned by the OCR engine). | `15`\n`analyticComparisonThreshold` | `Number` | The threshold of the analytic comparison. | `0.5`\n`analyticComparisonScaleToSameSize` | `Boolean` | Scale the symbols to the same size before the analytic comparison? | `false`\n`analyticComparisonSize` | `Number` | Used as dimension when resizing the images to the same size during the analytic comparison. | `128`\n`perceptualComparisonSize` | `Number` | Used as dimension when resizing the images to the same size during the perceptual comparison. | `64`\n`fontsDirectory` | `String` | The URL of the directory containing the fonts. | `storage/fonts/`\n`fontsData` | `String` | The name of the file containing the JSON data of a font. | `data.json`\n`fontsIndex` | `String` | The URL of the fonts index JSON file. | `storage/index.json`\n`fontRequestTimeout` | `Number` | Font request timeout [ms]. | `2000`\n`textRecognitionTimeout` | `Number` | Text recognition timeout [s]. | `60`\n`textRecognitionBinarization` | `Boolean` | Binarize the image before the recognition? | `true`\n\n### Example\nExample with options.\n```javascript\nTypefont("restaurant-logo.jpg", {\n    minSymbolConfidence: 50,\n    analyticComparisonScaleToSameSize: true,\n    analyticComparisonSize: 256\n}).then(res => console.log(res));\n```\n\n## Todo\n+ [ ] Store and load fonts directly from `.ttf` files.\n+ [ ] Implement the Shape Context algorithm to improve comparison results.\n+ [ ] Implement the Hausdorff distance algorithm to improve the comparison results.\n+ [ ] Import the Google Fonts database.\n\n## How it works?\nShort summary: the input image is passed to the optical character recognition after some filters based on its brightness. The symbols (letters) are extracted from the input image and compared with the symbols of the fonts in the database using a perceptual comparison and a pixel based comparison in order to obtain a percentage of similarity.\n\n## How to add a font\nThe fonts stored in this database are just a JSON structure with letters as keys and the base64 of the image of the letter of the font as value. If you want to add a new font you must follow this structure.\n```javascript\n{\n    "meta": {\n        "name": "name",\n        "author": "author",\n        "uri": "uri",\n        "license": "license",\n        "key": "value",\n        ...\n    },\n    "alpha": {\n        "a": "base64",\n        "b": "base64",\n        "c": "base64",\n        ...\n    }\n}\n```\nThen you have to include your font in the index of fonts by adding the font name to the array.\n\n## License\n[MIT License](LICENSE).\n\n## Credits\nAuthor: Vasile Pe\xc8\x99te (vasile.peste@protonmail.ch).'