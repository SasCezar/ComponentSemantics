b'# esm\n\nThe brilliantly simple, babel-less, bundle-less ECMAScript module loader.\n\n> `esm` is the world\xe2\x80\x99s most advanced ECMAScript module loader.\nThis fast, production ready, zero dependency loader is all you need to support\nECMAScript modules in Node 6+. See the release [post](https://medium.com/web-on-the-edge/tomorrows-es-modules-today-c53d29ac448c)\nand [video](https://www.youtube.com/watch?v=JcZ-FzfDq8A#t=5) for details!\n\nInstall\n---\n\n* __New projects__\n\n  Run `npm init esm` or `yarn create esm`.\n\n  :bulb: Use the `-y` flag to answer \xe2\x80\x9cyes\xe2\x80\x9d to all prompts.\n\n* __Existing projects__\n\n  Run `npm i esm` or `yarn add esm`.\n\nGetting started\n---\n\nThere are two ways to enable `esm`.\n\n1. Enable `esm` for packages:\n\n   Use `esm` to load the main ES module and export it as CommonJS.\n\n    __index.js__\n    ```js\n    // Set options as a parameter, environment variable, or rc file.\n    require = require("esm")(module/*, options*/)\n    module.exports = require("./main.js")\n    ```\n    __main.js__\n    ```js\n    // ESM syntax is supported.\n    export {}\n    ```\n    :bulb: These files are automagically created with `npm init esm` or `yarn create esm`.\n\n2. Enable `esm` for local runs:\n\n    ```shell\n    node -r esm main.js\n    ```\n    :bulb: Omit the filename to enable `esm` in the REPL.\n\nFeatures\n---\n\n:clap: By default, :100: percent CJS interoperability is enabled so you can get stuff done.<br>\n:lock: `.mjs` files are limited to basic functionality without support for `esm` options.\n\nOut of the box `esm` just works, no configuration necessary, and supports:\n\n* Passing all applicable [test262](https://github.com/tc39/test262) compliance tests\n* [`import`](https://ponyfoo.com/articles/es6-modules-in-depth#import)/[`export`](https://ponyfoo.com/articles/es6-modules-in-depth#export)\n* [`import.meta`](https://github.com/tc39/proposal-import-meta)\n* [Dynamic `import`](https://github.com/tc39/proposal-dynamic-import)\n* [Live bindings](https://ponyfoo.com/articles/es6-modules-in-depth#bindings-not-values)\n* [File URI scheme](https://en.wikipedia.org/wiki/File_URI_scheme)\n* Node `stdin`, [`--eval`](https://nodejs.org/api/cli.html#cli_e_eval_script), [`--print`](https://nodejs.org/api/cli.html#cli_p_print_script) flags\n* Node [`--check`](https://nodejs.org/api/cli.html#cli_c_check) flag _(Node 10+)_\n\nOptions\n---\n\nSpecify options with one of the following:\n\n* `"esm"` field in `package.json`\n* CJS/ESM in an `.esmrc.js`, `.esmrc.cjs`, or `.esmrc.mjs` file\n* [JSON6](https://github.com/d3x0r/json6) in an `.esmrc` or `.esmrc.json` file\n* JSON6 or file path in the `ESM_OPTIONS` environment variable\n* `ESM_DISABLE_CACHE` environment variable\n\n<table>\n<tr>\n  <td colspan="2"><code>{</code></td>\n</tr>\n<tr>\n  <td valign="top"><code>"cjs":true</code></td>\n  <td>\n    <p>A boolean or object for toggling CJS features in ESM.</p>\n    <details>\n      <summary>Features</summary>\n      <table>\n      <tr>\n        <td colspan="2"><code>{</code></td>\n      </tr>\n      <tr>\n        <td valign="top"><code>"cache":true</code></td>\n        <td>\n          <p>A boolean for storing ES modules in <code>require.cache</code>.</p>\n        </td>\n      </tr>\n      <tr>\n        <td valign="top"><code>"esModule":true</code></td>\n        <td>\n          <p>A boolean for <code>__esModule</code> interoperability.</p>\n        </td>\n      </tr>\n      <tr>\n        <td valign="top"><code>"extensions":true</code></td>\n        <td>\n          <p>A boolean for respecting <code>require.extensions</code> in ESM.</p>\n        </td>\n      </tr>\n      <tr>\n        <td valign="top"><code>"mutableNamespace":true</code></td>\n        <td>\n          <p>A boolean for mutable <a href="https://ponyfoo.com/articles/es6-modules-in-depth#import-all-the-things">namespace objects</a>.</p>\n        </td>\n      </tr>\n      <tr>\n        <td valign="top"><code>"namedExports":true</code></td>\n        <td>\n          <p>A boolean for <a href="https://ponyfoo.com/articles/es6-modules-in-depth#importing-named-exports">importing named exports</a> of CJS modules.</p>\n        </td>\n      </tr>\n      <tr>\n        <td valign="top"><code>"paths":true</code></td>\n        <td>\n          <p>A boolean for following CJS <a href="https://github.com/nodejs/node-eps/blob/master/002-es-modules.md#432-removal-of-non-local-dependencies">path rules</a> in ESM.</p>\n        </td>\n      </tr>\n      <tr>\n        <td valign="top"><code>"vars":true</code></td>\n        <td>\n          <p>A boolean for <code>__dirname</code>, <code>__filename</code>, and <code>require</code> in ESM.</p>\n        </td>\n      </tr>\n      <tr>\n        <td valign="top"><code>"dedefault":false</code></td>\n        <td>\n          <p>A boolean for requiring ES modules without the dangling <code>require().default</code>.</p>\n        </td>\n      </tr>\n      <tr>\n        <td valign="top"><code>"topLevelReturn":false</code></td>\n        <td>\n          <p>A boolean for top-level <code>return</code> support.</p>\n        </td>\n      </tr>\n      <tr>\n        <td colspan="2"><code>}</code></td>\n      </tr>\n      </table>\n    </details>\n  </td>\n</tr>\n<tr>\n  <td valign="top"><code>"mainFields":["main"]</code></td>\n  <td>\n    <p>An array of fields checked when importing a package.</p>\n  </td>\n</tr>\n<tr>\n  <td valign="top"><code>"mode":"auto"</code></td>\n  <td>\n    <p>A string mode:</p>\n    <ul>\n      <li><code>"auto"</code> detect files with <code>import</code>, <code>import.meta</code>, <code>export</code>,<br><a href="https://github.com/tc39/proposal-modules-pragma"><code>"use module"</code></a>, or <code>.mjs</code> as ESM.</li>\n      <li><code>"all"</code> files besides those with <code>"use script"</code> or <code>.cjs</code> are treated as ESM.</li>\n      <li><code>"strict"</code> to treat <strong>only</strong> <code>.mjs</code> files as ESM.</li>\n    </ul>\n  </td>\n</tr>\n<tr>\n  <td valign="top"><code>"await":false</code></td>\n  <td>\n    <p>A boolean for <a href="https://github.com/tc39/proposal-top-level-await">top-level <code>await</code></a> in modules without ESM exports. <em>(Node 10+)</em></p>\n  </td>\n</tr>\n<tr>\n  <td valign="top"><code>"force":false</code></td>\n  <td>\n    <p>A boolean to apply these options to all module loads.</p>\n  </td>\n</tr>\n<tr>\n  <td valign="top"><code>"wasm":false</code></td>\n  <td>\n    <p>A boolean for <a href="https://nodejs.org/api/globals.html#globals_webassembly">WebAssembly</a> module support. <em>(Node 8+)</em></p>\n  </td>\n</tr>\n<tr>\n  <td colspan="2"><code>}</code></td>\n</tr>\n</table>\n\nDevOpts\n---\n\n<table>\n<tr>\n  <td colspan="2"><code>{</code></td>\n</tr>\n<tr>\n  <td valign="top"><code>"cache":true</code></td>\n  <td>\n    <p>A boolean for toggling cache creation or a cache directory path.</p>\n  </td>\n</tr>\n<tr>\n  <td valign="top"><code>"sourceMap":false</code></td>\n  <td>\n    <p>A boolean for including inline source maps.</p>\n  </td>\n</tr>\n<tr>\n  <td colspan="2"><code>}</code></td>\n</tr>\n</table>\n\nTips\n---\n\n### Bundling\n\n* For bundlers like [`browserify`](http://browserify.org/)+[`esmify`](https://github.com/mattdesl/esmify),\n  [`parcel-bundler`](https://parceljs.org/), and [`webpack`](https://webpack.js.org/)\n  add a `"module"` field to `package.json` pointing to the main ES module.\n  ```json\n  "main": "index.js",\n  "module": "main.js"\n  ```\n\n  :bulb: This is automagically done with `npm init esm` or `yarn create esm`.\n\n### Extensions\n\n* Enable `esm` for [`wallaby.js`](https://wallabyjs.com/) following their\n  [integration example](https://wallabyjs.com/docs/integration/node.html#es-modules).\n\n### Loading\n\n* Load `esm` before loaders/monitors like\n  [`@babel/register`](https://babeljs.io/docs/en/next/babel-register.html),\n  [`newrelic`](https://github.com/newrelic/node-newrelic),\n  [`sqreen`](https://docs.sqreen.io/sqreen-for-nodejs/getting-started-2/), and\n  [`ts-node`](https://github.com/TypeStrong/ts-node#programmatic).\n\n* Load `esm` for [`jasmine`](https://jasmine.github.io/) using the\n  [`"helpers"`](https://jasmine.github.io/setup/nodejs.html#configuration)\n  field in `jasmine.json`:\n  ```json\n  "helpers": [\n    "node_modules/esm"\n  ]\n  ```\n\n* Load `esm` with \xe2\x80\x9cnode-args" options of:<br>\n  - [`pm2`](https://pm2.io/doc/en/runtime/reference/pm2-cli/#pm2-flags): `--node-args="-r esm"`\n\n* Load `esm` with \xe2\x80\x9crequire\xe2\x80\x9d options of\n  [`ava`](https://github.com/avajs/ava/blob/master/docs/recipes/es-modules.md),\n  [`mocha`](https://mochajs.org/#-require-module-r-module),\n  [`nodemon`](https://nodemon.io/),\n  [`nyc`](https://github.com/istanbuljs/nyc#require-additional-modules),\n  [`qunit`](https://github.com/qunitjs/qunit/releases/tag/2.6.0),\n  [`tape`](https://github.com/substack/tape#preloading-modules), and\n  [`webpack`](https://webpack.js.org/api/cli/#config-options).\n\n  :bulb: Builtin `require` cannot sideload `.mjs` files. However, `.js` files\n  can be sideloaded or `.mjs` files may be loaded with dynamic `import`.\n'