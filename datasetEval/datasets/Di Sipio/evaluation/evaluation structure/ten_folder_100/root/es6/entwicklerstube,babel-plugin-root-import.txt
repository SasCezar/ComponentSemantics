b'Babel plugin to add the opportunity to use `import` and `require` with root based\npaths.<br>\n[![Build Status](https://travis-ci.org/entwicklerstube/babel-plugin-root-import.svg?branch=master)](https://travis-ci.org/entwicklerstube/babel-plugin-root-import)\n[![Dependency Status](https://david-dm.org/entwicklerstube/babel-plugin-root-import.svg)](https://david-dm.org/entwicklerstube/babel-plugin-root-import)\n[![https://github.com/entwicklerstube/babel-plugin-root-import](https://img.shields.io/npm/dm/babel-plugin-root-import.svg)](https://www.npmjs.com/package/babel-plugin-root-import)\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/6f0e0cfda7214cd99ed22bb05ca2783e)](https://app.codacy.com/app/michaelzoidl/babel-plugin-root-import?utm_source=github.com&utm_medium=referral&utm_content=entwicklerstube/babel-plugin-root-import&utm_campaign=Badge_Grade_Dashboard)\n\n## Example\n\n```javascript\n// Without this plugin...\nimport SomeExample from \'../../../some/example.js\';\nconst OtherExample = require(\'../../../other/example.js\');\nimport(\'../../../other/dynamic\').then((mod) => {\n  // ...\n});\n\n// With babel-plugin-root-import you can write...\nimport SomeExample from \'~/some/example.js\';\nconst OtherExample = require(\'~/other/example.js\');\nimport(\'~/other/dynamic\').then((mod) => {\n  // ...\n});\n```\n\n## Install\n\nInstall with your package manager of choice.\n\n```sh\nnpm install babel-plugin-root-import --save-dev\n```\n\nor\n\n```sh\nyarn add babel-plugin-root-import --dev\n```\n\n## Use\n\nAdd it to your plugins array in your babel config, e.g. a `.babelrc` file.\n\n```javascript\n{\n  "plugins": [\n    ["babel-plugin-root-import"]\n  ]\n}\n```\n\nFor recent react-native versions, add it as a plugin in `babel.config.js`:\n\n```js\nmodule.exports = (api) => {\n  api.cache(true);\n\n  return {\n    plugins: [\'babel-plugin-root-import\'],\n  };\n};\n```\n\nFor the rest of this readme, it\'s implied that you\'ll configure the plugin as above\nwhen using react-native.\n\n## Config\n\nYou can configure this plugin by changing the string plugin name to a two-item array.\nNote that this array is nested inside the plugins array. Here\'s an example with the\ndefault config.\n\n```javascript\n  "plugins": [\n    [\n      "babel-plugin-root-import",\n      {\n        "rootPathSuffix": "./",\n        "rootPathPrefix": "~/"\n      }\n    ]\n  ],\n```\n\nMultiple rules may be specified by creating an object with\n`{ "paths": [firstItem, secondItem] }`, e.g.\n\n```javascript\n  "plugins": [\n    [\n      "babel-plugin-root-import",\n      {\n        "paths": [\n          {\n            "rootPathSuffix": "./src/components",\n            "rootPathPrefix": "~/"\n          },\n          {\n            "rootPathSuffix": "./src/utils",\n            "rootPathPrefix": "!/"\n          },\n        ]\n      }\n    ]\n  ],\n```\n\n### Custom rootPathSuffix\n\nBy default, the import will be relative to the working directory of the process\nrunning babel. Typically this means you\'ll have import paths like `~/src/foo.js`. You\ncan change the prefix of `"./"` to e.g. `"src"` or `"src/js"` with this config option.\n\n```javascript\n{\n  "plugins": [\n    ["babel-plugin-root-import", {\n      "rootPathSuffix": "src/js"\n    }]\n  ]\n}\n```\n\nThe paths `"src/js"` and `"./src/js"` behave the same.\n\n### Custom rootPathPrefix\n\nIf you don\'t like the `~` syntax you can use your own symbol (for example an `#`\nsymbol or `\\` or anything you want). Using `@` is not recommended as NPM allows `@` in\npackage names. `~` is the default since it\'s very unlikely to conflict with anything\n(and wouldn\'t be expanded to HOME anyway).\n\n```javascript\n{\n  "plugins": [\n    ["babel-plugin-root-import", {\n      "rootPathPrefix": "#/"\n    }]\n  ]\n}\n\n// Now you can use the plugin like this\nimport foo from \'#/my-file\';\n```\n\nIf you set it to e.g. `"#/"` then it\'ll require the slash in the import path.\n\n### Custom root\n\nBy default everything is resolved relative to the current working directory. You can\nchange this with the `root` config option. To use it effectively, you\'ll need to\nconfigure babel with one of the JavaScript config file variants, rather than JSON.\n\nFor example, the following `.babelrc.js` file causes imports to resolve relative to\nthe directory `.babelrc.js` is in.\n\n```js\nconst rootImportOpts = {\n  root: __dirname,\n  rootPathPrefix: \'~/\',\n  rootPathSuffix: \'src/js\',\n};\n\nmodule.exports = {\n  plugins: [[\'babel-plugin-root-import\', rootImportOpts]],\n};\n```\n\n<details>\n\n<summary>\n\n`babel.config.js`\n\n</summary>\n\n```js\nconst rootImportOpts = {\n  root: __dirname,\n  rootPathPrefix: \'~/\',\n  rootPathSuffix: \'src/js\',\n};\n\nmodule.exports = (api) => {\n  api.cache(true);\n\n  const plugins = [[\'babel-plugin-root-import\', rootImportOpts]];\n\n  return { plugins };\n};\n```\n\n</details>\n\n<details>\n\n<summary>\n\nFunction root variant\n\n</summary>\n\nThis `.babelrc.js` aliases `@/foo` to `./internals/foo.js` since it\'s always relative\nto the file doing the import (contrived example).\n\n```js\nconst rootImportOpts = {\n  root: (sourcePath) => path.dirname(sourcePath),\n  rootPathPrefix: \'@/\',\n  rootPathSuffix: \'internals\',\n};\n\nmodule.exports = {\n  plugins: [[\'babel-plugin-root-import\', rootImportOpts]],\n};\n```\n\n</details>\n\n### Transform paths for custom functions\n\nIf you have the need to transform paths also for other function calls you can\nconfigure them. But please be aware that this is kind of error prone because custom\nfunction names in Javascript are not static and can differ.\n\n```javascript\n{\n  "plugins": [\n    ["babel-plugin-root-import", {\n      "functions": ["jest.mock"]\n    }]\n  ]\n}\n\n// Now you can use the plugin also for jest.mock calls:\njest.mock(\'~/myfile\')\n```\n\n### Don\'t let ESLint be confused\n\nIf you use [eslint-plugin-import](https://github.com/benmosher/eslint-plugin-import)\nto validate imports it may be necessary to instruct ESLint to parse root imports. You\ncan use\n[eslint-import-resolver-babel-plugin-root-import](https://github.com/bingqichen/eslint-import-resolver-babel-plugin-root-import)\n\n```json\n  "settings": {\n    "import/resolver": {\n      "babel-plugin-root-import": {}\n    }\n  }\n```\n\nYou may also specify a prefix/suffix if it doesn\'t correctly find your babel config.\n\n```json\n  "settings": {\n    "import/resolver": {\n      "babel-plugin-root-import": {\n        "rootPathPrefix": "~",\n        "rootPathSuffix": "src"\n      }\n    }\n  }\n```\n\n### Don\'t let Flow be confused\n\nIf you use Facebook\'s [Flow](https://flowtype.org/) for type-checking it is necessary\nto instruct it on how to map your chosen prefix to the root directory. Add the\nfollowing to your `.flowconfig` file, replacing `{rootPathPrefix}` with your chosen\nprefix (minus a trailing slash if any) and `{rootPathSuffix}`\xc2\xa0with your chosen suffix.\n\n```\n[options]\nmodule.name_mapper=\'^{rootPathPrefix}/\\(.*\\)$\' -> \'<PROJECT_ROOT>/{rootPathSuffix}/\\1\'\n```\n\n### Don\'t let VSCode be confused\n\nFor features like go-to-definition, VSCode needs to be able to resolve\n`require`/`import` paths to files on disk. This only works with one `rootPathSuffix`,\nbut you may define multiple `rootPathPrefix` entries.\n\n```json\n{\n  "compilerOptions": {\n    "baseUrl": ".",\n    "paths": {\n      "{rootPathPrefix}/*": ["src/*"]\n    }\n  }\n}\n```\n\nFor example, with `~/x/y.js` -> `./src/x/y.js`:\n\n```json\n{\n  "compilerOptions": {\n    "baseUrl": ".",\n    "paths": {\n      "~/*": ["src/*"]\n    }\n  }\n}\n```\n\n## FYI\n\nWebpack delivers a similar feature, if you just want to prevent end-less import\nstrings you can also define `aliases` in the `resolve` module, at the moment it\ndoesn\'t support custom/different symbols and multiple/custom suffixes.\n[READ MORE](http://xabikos.com/2015/10/03/Webpack-aliases-and-relative-paths/)\n\n### Want to revert back to relative paths?\n\nSometimes tooling might not be up to scratch, meaning you lose features such as\nnavigation in your IDE. In such cases you might want to revert back to using relative\npaths again. If you have a significant amount of files, it might be worth looking into\n[tooling](https://www.npmjs.com/package/convert-root-import) to help you with the\nconversion.\n\n## Change Log\n\n#### 6.4.1 - 2019-07-18\n\n- fixes unicode paths on windows\n\n#### 6.4.0 - 2019-07-18\n\n- add support for require.resolve\n- add support to configure additional require-like functions\n\n#### 6.3.0 - 2019-07-17\n\nAdds \'root\' config option.\n\n#### 6.2.0 - 2019-05-09\n\n- Remove the 2 characters restriction\n\n#### 6.1.0 - 2018-06-23\n\n- Supports babel 7\n\n#### 5.0.0 - 2017-02-10\n\n- More consistent name: babel-plugin-root-import\n  [#63](https://github.com/entwicklerstube/babel-plugin-root-import/issues/63)\n- Renamed everything\n- Publish with new name on [npm](babel-plugin-root-import)\n\n#### 4.1.5 - 2016-11-17\n\n- Compile new version and release again\n\n#### 4.1.4 - 2016-11-15\n\n- Improve support for relative paths (e.g. referencing parent folders via ../) (thanks\n  to [@Hizoul](https://github.com/hizoul))\n\n#### 4.1.3 - 2016-09-14\n\n- Support paths (thanks to [@sivael](https://github.com/sivael))\n\n#### 4.1.0 - 2016-08-20\n\n- Use relative paths instead of absolute ones (thanks to\n  [@nescalante](https://github.com/nescalante))\n\n#### 4.0.0 - 2016-06-29\n\n- Almost everything changed, thanks to [@sheepsteak](https://github.com/sheepsteak),\n  [@gingur](https://github.com/gingur), [@olalonde](https://github.com/olalonde)\n\n#### 3.2.2 - 2016-02-20\n\n- Fix custom suffix in path, missing `/` in generated paths\n\n#### 3.2.0 - 2016-02-19\n\n- Support\n  [Windows-Filesystem](http://superuser.com/questions/176388/why-does-windows-use-backslashes-for-paths-and-unix-forward-slashes/176395#176395)\n- Add possibility to configure a custom rootPath-Symbol (instead of `~` you can use\n  whatever you like)\n\n#### 3.1.0 - 2015-12-01\n\n- Add possibility config the custom root path\n\n#### 3.0.1 - 2015-11-30\n\n- Updated plugin to new babel6 API\n- Splitted tests and functions into two scopes with single tests\n- Removed the "extra-root" param for the .babelrc since this is no yet supported in\n  babel6\n\n#### 2.0.1 - 2015-11-15\n\nBreaking Change to Babel 5\n\n- Updated to Babel 6\n- Added integration tests\n\n#### 1.0.1 - 2015-08-07\n\n- Added / updated tests\n- Implemented ESlint\n'