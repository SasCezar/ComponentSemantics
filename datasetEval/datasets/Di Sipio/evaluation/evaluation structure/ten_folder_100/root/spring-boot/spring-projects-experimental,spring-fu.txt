b':spring-fu-version: 0.2.2\n:kofu-kdoc-url: http://repo.spring.io/milestone/org/springframework/fu/spring-fu-kofu/{spring-fu-version}/spring-fu-kofu-{spring-fu-version}-javadoc.jar!\n:framework-kdoc-url: https://docs.spring.io/spring-framework/docs/current/kdoc-api\n\nimage:https://ci.spring.io/api/v1/teams/spring-fu/pipelines/spring-fu/badge["Build Status", link="https://ci.spring.io/teams/spring-fu/pipelines/spring-fu"] image:https://img.shields.io/badge/API%20documentation-0.2.2-blue.svg["API documentation", link="{kofu-kdoc-url}/kofu/org.springframework.fu.kofu/-application-dsl.html"]\n\nSpring Fu is an incubator for Kofu, a set of\nKotlin DSLs like {kofu-kdoc-url}/kofu/org.springframework.fu.kofu/-application-dsl.html[`application { }`]\nand {kofu-kdoc-url}/kofu/org.springframework.fu.kofu/-configuration-dsl/index.html[`configuration { }`]\ndesigned to configure Spring Boot explicitly with code in a declarative way with great\ndiscoverability thanks to auto-complete. In Kofu, "Ko" stands for Kotlin, and "fu" for functional.\n\nIt leverages other Spring Kotlin DSLs available in Spring like:\n\n * https://docs.spring.io/spring/docs/current/spring-framework-reference/languages.html#kotlin-bean-definition-dsl[`beans { }` DSL] from Spring Framework\n * https://docs.spring.io/spring/docs/current/spring-framework-reference/languages.html#router-dsl[`router { }` DSL] from Spring MVC or Spring WebFlux\n * https://github.com/spring-projects-experimental/spring-security-kotlin-dsl[`security { }` DSL] (work in progress) from Spring Security\n\nIt provides fast startup (40% faster than regular auto-configuration on a minimal Spring MVC app) and low memory consumption.\n\nIt is not intended to be used in production yet, but rather to incubate and get feedback and contributions\nfrom the community in order to hopefully reach a point where it can be integrated as\nSpring Boot Kotlin DSL.\n\nIf you are interested in running Spring application as GraalVM native images see the https://github.com/spring-projects-experimental/spring-graal-native-image[spring-graal-native-image] project.\n\n== Sample application\n\nHere is a sample sample application that is leveraging Spring MVC:\n\n```kotlin\nval app = application(WebApplicationType.SERVLET) {\n\tlogging {\n\t\tlevel = LogLevel.DEBUG\n\t}\n\tbeans {\n\t\tbean<SampleService>()\n\t}\n\twebMvc {\n\t\tport = if (profiles.contains("test")) 8181 else 8080\n\t\trouter {\n\t\t\tval service = ref<SampleService>()\n\t\t\tGET("/") {\n\t\t\t\tok().body(service.generateMessage())\n\t\t\t}\n\t\t\tGET("/api") {\n\t\t\t\tok().body(Sample(service.generateMessage()))\n\t\t\t}\n\t\t}\n\t\tconverters {\n\t\t\tstring()\n\t\t\tjackson {\n\t\t\t\tindentOutput = true\n\t\t\t}\n\t\t}\n\t}\n}\n\ndata class Sample(val message: String)\n\nclass SampleService {\n\tfun generateMessage() = "Hello world!"\n}\n\nfun main() {\n\tapp.run()\n}\n```\n\nTo use WebFlux.fn instead\n\n * Use `WebApplicationType.REACTIVE` instead of `WebApplicationType.SERVLET`\n * Use `webFlux { }` instead of `webMvc { }`\n * Use `spring-boot-starter-webflux` starter instead of `spring-boot-starter-web`\n * Use `coRouter { }` instead of `router { }` if you want to use Coroutines instead of Reactor API\n\n== Dependencies\n\nKofu is technically just a dependency you add to your Spring Boot project.\n\n```kotlin\nrepositories {\n\tmavenCentral()\n\tmaven("https://repo.spring.io/milestone")\n}\n\ndependencies {\n\timplementation("org.springframework.fu:spring-fu-kofu:0.2.2")\n\n\timplementation("org.springframework.boot:spring-boot-starter-web")\n\ttestImplementation("org.springframework.boot:spring-boot-starter-webflux")\n}\n```\n\n== Getting started\n\n* Go to https://start.spring.io/#!type=gradle-project&language=kotlin[start.spring.io]\n* Select latest Spring Boot `2.2.0.x` release\n* Select the "Web" or "Reactive web" starter\n* Add the `org.springframework.fu:spring-fu-kofu:{spring-fu-version}` dependency\n* Modify the generated `DemoApplication.kt` file as following:\n\n```kotlin\npackage com.sample\n\nimport org.springframework.fu.kofu.application\n\nval app = application(...) {\n\t...\n}\n\nfun main() {\n\tapp.run()\n}\n```\n\nSee sample projects https://github.com/spring-projects/spring-fu/tree/master/samples[here].\n\nYou can now also benefits of\nhttps://docs.spring.io/spring/docs/current/spring-framework-reference/[Spring Framework reference documentation]\nwhich is now available with Kotlin code samples.\n\n== Credits\n\nIn addition to the whole Spring and Reactor teams, special credits to:\n\n * https://github.com/jhoeller[Juergen Hoeller] for his support on Kotlin and the functional bean registration API\n * https://github.com/poutsma[Arjen Poutsma] for creating the WebFlux functional API\n * https://github.com/tgirard12[Thomas Girard] for its https://github.com/tgirard12/spring-webflux-kotlin-dsl[spring-webflux-kotlin-dsl] experiment that initially demonstrated this approach was possible\n * https://github.com/konrad-kaminski[Konrad Kaminski] for his awesome https://github.com/konrad-kaminski/spring-kotlin-coroutine[spring-kotlin-coroutine] project\n * https://github.com/dsyer[Dave Syer] for his work on benchmarks, GraalVM support and functional bean registration applied to Boot\n * The whole https://github.com/spring-projects/spring-boot[Spring Boot] team\n'