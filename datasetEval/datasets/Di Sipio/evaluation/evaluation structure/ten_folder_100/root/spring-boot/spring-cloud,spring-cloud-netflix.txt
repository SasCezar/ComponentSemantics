b'// Do not edit this file (e.g. go instead to src/main/asciidoc)\n\nimage::https://circleci.com/gh/spring-cloud/spring-cloud-netflix/tree/master.svg?style=svg["CircleCI", link="https://circleci.com/gh/spring-cloud/spring-cloud-netflix/tree/master"]\nimage::https://codecov.io/gh/spring-cloud/spring-cloud-netflix/branch/master/graph/badge.svg["Codecov", link="https://codecov.io/gh/spring-cloud/spring-cloud-netflix/branch/master"]\nimage::https://api.codacy.com/project/badge/Grade/a6885a06921e4f72a0df0b7aabd6d118["Codacy code quality", link="https://www.codacy.com/app/Spring-Cloud/spring-cloud-netflix?utm_source=github.com&utm_medium=referral&utm_content=spring-cloud/spring-cloud-netflix&utm_campaign=Badge_Grade"]\n\n\nThis project provides Netflix OSS integrations for Spring Boot apps through autoconfiguration\nand binding to the Spring Environment and other Spring programming model idioms. With a few\nsimple annotations you can quickly enable and configure the common patterns inside your\napplication and build large distributed systems with battle-tested Netflix components. The\npatterns provided include Service Discovery (Eureka), Circuit Breaker (Hystrix),\nIntelligent Routing (Zuul) and Client Side Load Balancing (Ribbon).\n\n\n== Features\n\n* Service Discovery: Eureka instances can be registered and clients can discover the instances using Spring-managed beans\n* Service Discovery: an embedded Eureka server can be created with declarative Java configuration\n* Circuit Breaker: Hystrix clients can be built with a simple annotation-driven method decorator\n* Circuit Breaker: embedded Hystrix dashboard with declarative Java configuration\n* Client Side Load Balancer: Ribbon\n* External Configuration: a bridge from the Spring Environment to Archaius (enables native configuration of Netflix components using Spring Boot conventions)\n* Router and Filter: automatic registration of Zuul filters, and a simple convention over configuration approach to reverse proxy creation\n\n\n== Modules In Maintenance Mode\n\nPlacing a module in maintenance mode means that the Spring Cloud team will no longer be adding new features to the module.\nWe will fix blocker bugs and security issues, and we will also consider and review small pull requests from the community.\n\nWe intend to continue to support these modules for a period of at least a year from the general availability\nof the Greenwich release train.\n\nThe following Spring Cloud Netflix modules and corresponding starters will be placed into maintenance mode:\n\n* spring-cloud-netflix-archaius\n* spring-cloud-netflix-hystrix-contract\n* spring-cloud-netflix-hystrix-dashboard\n* spring-cloud-netflix-hystrix-stream\n* spring-cloud-netflix-hystrix\n* spring-cloud-netflix-ribbon\n* spring-cloud-netflix-turbine-stream\n* spring-cloud-netflix-turbine\n* spring-cloud-netflix-zuul\n\nNOTE: This does not include the Eureka or concurrency-limits modules.\n\n\n== Building\n\n:jdkversion: 1.8\n\n=== Basic Compile and Test\n\nTo build the source you will need to install JDK {jdkversion}.\n\nSpring Cloud uses Maven for most build-related activities, and you\nshould be able to get off the ground quite quickly by cloning the\nproject you are interested in and typing\n\n----\n$ ./mvnw install\n----\n\nNOTE: You can also install Maven (>=3.3.3) yourself and run the `mvn` command\nin place of `./mvnw` in the examples below. If you do that you also\nmight need to add `-P spring` if your local Maven settings do not\ncontain repository declarations for spring pre-release artifacts.\n\nNOTE: Be aware that you might need to increase the amount of memory\navailable to Maven by setting a `MAVEN_OPTS` environment variable with\na value like `-Xmx512m -XX:MaxPermSize=128m`. We try to cover this in\nthe `.mvn` configuration, so if you find you have to do it to make a\nbuild succeed, please raise a ticket to get the settings added to\nsource control.\n\nFor hints on how to build the project look in `.travis.yml` if there\nis one. There should be a "script" and maybe "install" command. Also\nlook at the "services" section to see if any services need to be\nrunning locally (e.g. mongo or rabbit).  Ignore the git-related bits\nthat you might find in "before_install" since they\'re related to setting git\ncredentials and you already have those.\n\nThe projects that require middleware generally include a\n`docker-compose.yml`, so consider using\nhttps://compose.docker.io/[Docker Compose] to run the middeware servers\nin Docker containers. See the README in the\nhttps://github.com/spring-cloud-samples/scripts[scripts demo\nrepository] for specific instructions about the common cases of mongo,\nrabbit and redis.\n\nNOTE: If all else fails, build with the command from `.travis.yml` (usually\n`./mvnw install`).\n\n=== Documentation\n\nThe spring-cloud-build module has a "docs" profile, and if you switch\nthat on it will try to build asciidoc sources from\n`src/main/asciidoc`. As part of that process it will look for a\n`README.adoc` and process it by loading all the includes, but not\nparsing or rendering it, just copying it to `${main.basedir}`\n(defaults to `${basedir}`, i.e. the root of the project). If there are\nany changes in the README it will then show up after a Maven build as\na modified file in the correct place. Just commit it and push the change.\n\n=== Working with the code\nIf you don\'t have an IDE preference we would recommend that you use\nhttps://www.springsource.com/developer/sts[Spring Tools Suite] or\nhttps://eclipse.org[Eclipse] when working with the code. We use the\nhttps://eclipse.org/m2e/[m2eclipse] eclipse plugin for maven support. Other IDEs and tools\nshould also work without issue as long as they use Maven 3.3.3 or better.\n\n==== Importing into eclipse with m2eclipse\nWe recommend the https://eclipse.org/m2e/[m2eclipse] eclipse plugin when working with\neclipse. If you don\'t already have m2eclipse installed it is available from the "eclipse\nmarketplace".\n\nNOTE: Older versions of m2e do not support Maven 3.3, so once the\nprojects are imported into Eclipse you will also need to tell\nm2eclipse to use the right profile for the projects.  If you\nsee many different errors related to the POMs in the projects, check\nthat you have an up to date installation.  If you can\'t upgrade m2e,\nadd the "spring" profile to your `settings.xml`. Alternatively you can\ncopy the repository settings from the "spring" profile of the parent\npom into your `settings.xml`.\n\n==== Importing into eclipse without m2eclipse\nIf you prefer not to use m2eclipse you can generate eclipse project metadata using the\nfollowing command:\n\n[indent=0]\n----\n\t$ ./mvnw eclipse:eclipse\n----\n\nThe generated eclipse projects can be imported by selecting `import existing projects`\nfrom the `file` menu.\n\n\n\n== Contributing\n\nSpring Cloud is released under the non-restrictive Apache 2.0 license,\nand follows a very standard Github development process, using Github\ntracker for issues and merging pull requests into master. If you want\nto contribute even something trivial please do not hesitate, but\nfollow the guidelines below.\n\n=== Sign the Contributor License Agreement\nBefore we accept a non-trivial patch or pull request we will need you to sign the\nhttps://cla.pivotal.io/sign/spring[Contributor License Agreement].\nSigning the contributor\'s agreement does not grant anyone commit rights to the main\nrepository, but it does mean that we can accept your contributions, and you will get an\nauthor credit if we do.  Active contributors might be asked to join the core team, and\ngiven the ability to merge pull requests.\n\n=== Code of Conduct\nThis project adheres to the Contributor Covenant https://github.com/spring-cloud/spring-cloud-build/blob/master/docs/src/main/asciidoc/code-of-conduct.adoc[code of\nconduct]. By participating, you  are expected to uphold this code. Please report\nunacceptable behavior to spring-code-of-conduct@pivotal.io.\n\n=== Code Conventions and Housekeeping\nNone of these is essential for a pull request, but they will all help.  They can also be\nadded after the original pull request but before a merge.\n\n* Use the Spring Framework code format conventions. If you use Eclipse\n  you can import formatter settings using the\n  `eclipse-code-formatter.xml` file from the\n  https://raw.githubusercontent.com/spring-cloud/spring-cloud-build/master/spring-cloud-dependencies-parent/eclipse-code-formatter.xml[Spring\n  Cloud Build] project. If using IntelliJ, you can use the\n  https://plugins.jetbrains.com/plugin/6546[Eclipse Code Formatter\n  Plugin] to import the same file.\n* Make sure all new `.java` files to have a simple Javadoc class comment with at least an\n  `@author` tag identifying you, and preferably at least a paragraph on what the class is\n  for.\n* Add the ASF license header comment to all new `.java` files (copy from existing files\n  in the project)\n* Add yourself as an `@author` to the .java files that you modify substantially (more\n  than cosmetic changes).\n* Add some Javadocs and, if you change the namespace, some XSD doc elements.\n* A few unit tests would help a lot as well -- someone has to do it.\n* If no-one else is using your branch, please rebase it against the current master (or\n  other target branch in the main project).\n* When writing a commit message please follow https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html[these conventions],\n  if you are fixing an existing issue please add `Fixes gh-XXXX` at the end of the commit\n  message (where XXXX is the issue number).'