b'# gRPC Spring Boot Starter\n\n[![Build Status](https://travis-ci.org/yidongnan/grpc-spring-boot-starter.svg?branch=master)](https://travis-ci.org/yidongnan/grpc-spring-boot-starter)\n[![Maven Central with version prefix filter](https://img.shields.io/maven-central/v/net.devh/grpc-spring-boot-starter.svg)](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22net.devh%22%20grpc)\n[![MIT License](https://img.shields.io/github/license/mashape/apistatus.svg)](LICENSE)\n[![Crowdin](https://badges.crowdin.net/grpc-spring-boot-starter/localized.svg)](https://crowdin.com/project/grpc-spring-boot-starter)\n\n[![Client-Javadoc](https://www.javadoc.io/badge/net.devh/grpc-client-spring-boot-autoconfigure.svg?label=Client-Javadoc)](https://www.javadoc.io/doc/net.devh/grpc-client-spring-boot-autoconfigure)\n[![Server-Javadoc](https://www.javadoc.io/badge/net.devh/grpc-server-spring-boot-autoconfigure.svg?label=Server-Javadoc)](https://www.javadoc.io/doc/net.devh/grpc-server-spring-boot-autoconfigure)\n[![Common-Javadoc](https://www.javadoc.io/badge/net.devh/grpc-common-spring-boot.svg?label=Common-Javadoc)](https://www.javadoc.io/doc/net.devh/grpc-common-spring-boot)\n\nREADME: [English](README.md) | [\xe4\xb8\xad\xe6\x96\x87](README-zh-CN.md)\n\n**Documentation:** [English](https://yidongnan.github.io/grpc-spring-boot-starter/en/) | [\xe4\xb8\xad\xe6\x96\x87](https://yidongnan.github.io/grpc-spring-boot-starter/zh-CN/)\n\n## Features\n\n* Auto configures and runs the embedded gRPC server with `@GrpcService`-enabled beans as part of your spring-boot\napplication\n\n* Automatically creates and manages your grpc channels and stubs with `@GrpcClient`\n\n* Supports [Spring Cloud](https://spring.io/projects/spring-cloud) (register services to [Consul](https://github.com/spring-cloud/spring-cloud-consul) or [Eureka](https://github.com/spring-cloud/spring-cloud-netflix) or [Nacos](https://github.com/spring-cloud-incubator/spring-cloud-alibaba) and fetch gRPC server information)\n\n* Supports [Spring Sleuth](https://github.com/spring-cloud/spring-cloud-sleuth) as distributed tracing solution (If [brave-instrumentation-grpc](https://mvnrepository.com/artifact/io.zipkin.brave/brave-instrumentation-grpc) is present)\n\n* Supports global and custom gRPC server/client interceptors\n\n* [Spring-Security](https://github.com/spring-projects/spring-security) support\n\n* Automatic metric support ([micrometer](https://micrometer.io/)/[actuator](https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-actuator) based)\n\n* Also works with (non-shaded) grpc-netty\n\n## Versions\n\n2.x.x.RELEASE supports Spring Boot 2.1.x/2.2.x & Spring Cloud Greenwich/Hoxton.\n\nThe latest version: ``2.6.0.RELEASE``\n\n(Use `2.4.0.RELEASE` for Spring Boot 2.0.x & Spring Cloud Finchley).\n\n1.x.x.RELEASE support Spring Boot 1 & Spring Cloud Edgware, Dalston, Camden.\n\nThe latest version: ``1.4.2.RELEASE``\n\n**Note:** This project can also be used without Spring-Boot, however that requires some manual bean configuration.\n\n## Usage\n\n### gRPC Server + Client\n\nTo add a dependency using Maven, use the following:\n\n````xml\n<dependency>\n  <groupId>net.devh</groupId>\n  <artifactId>grpc-spring-boot-starter</artifactId>\n  <version>2.6.0.RELEASE</version>\n</dependency>\n````\n\nTo add a dependency using Gradle:\n\n````gradle\ndependencies {\n  compile \'net.devh:grpc-spring-boot-starter:2.6.0.RELEASE\'\n}\n````\n\n### gRPC Server\n\nTo add a dependency using Maven, use the following:\n\n````xml\n<dependency>\n  <groupId>net.devh</groupId>\n  <artifactId>grpc-server-spring-boot-starter</artifactId>\n  <version>2.6.0.RELEASE</version>\n</dependency>\n````\n\nTo add a dependency using Gradle:\n\n````gradle\ndependencies {\n  compile \'net.devh:grpc-server-spring-boot-starter:2.6.0.RELEASE\'\n}\n````\n\nAnnotate your server interface implementation(s) with ``@GrpcService``\n\n````java\n@GrpcService\npublic class GrpcServerService extends GreeterGrpc.GreeterImplBase {\n\n    @Override\n    public void sayHello(HelloRequest req, StreamObserver<HelloReply> responseObserver) {\n        HelloReply reply = HelloReply.newBuilder().setMessage("Hello ==> " + req.getName()).build();\n        responseObserver.onNext(reply);\n        responseObserver.onCompleted();\n    }\n\n}\n````\n\nBy default, the grpc server will listen to port `9090`. These and other\n[settings](grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/config/GrpcServerProperties.java)\ncan be changed via Spring\'s property mechanism. The server uses the `grpc.server.` prefix.\n\nRefer to our [documentation](https://yidongnan.github.io/grpc-spring-boot-starter/) for more details.\n\n### gRPC Client\n\nTo add a dependency using Maven, use the following:\n\n````xml\n<dependency>\n  <groupId>net.devh</groupId>\n  <artifactId>grpc-client-spring-boot-starter</artifactId>\n  <version>2.6.0.RELEASE</version>\n</dependency>\n````\n\nTo add a dependency using Gradle:\n\n````gradle\ndependencies {\n  compile \'net.devh:grpc-client-spring-boot-starter:2.6.0.RELEASE\'\n}\n````\nAnnotate a field of your grpc client stub with `@GrpcClient(serverName)`\n\n* Do not use in conjunction with `@Autowired` or `@Inject`\n\n  ````java\n  @GrpcClient("gRPC server name")\n  private GreeterGrpc.GreeterBlockingStub greeterStub;\n  ````\n\n**Note:** You can use the same grpc server name for multiple channels and also different stubs (even with different\ninterceptors).\n\nThen you can send queries to your server just like this:\n\n````java\nHelloReply response = stub.sayHello(HelloRequest.newBuilder().setName(name).build());\n````\n\nIt is possible to configure the target address for each client individually.\nHowever in some cases, you can just rely on the default configuration.\nYou can customize the default url mapping via `NameResolver.Factory` beans. If you don\'t configure that bean,\nthen the default uri will be guessed using the default scheme and the name (e.g.: `dns:/<name>`):\n\nThese and other\n[settings](grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/config/GrpcChannelProperties.java)\ncan be changed via Spring\'s property mechanism. The clients use the `grpc.client.(serverName).` prefix.\n\nRefer to our [documentation](https://yidongnan.github.io/grpc-spring-boot-starter/) for more details.\n\n## Running with (non-shaded) grpc-netty\n\nThis library supports both `grpc-netty` and `grpc-netty-shaded`.\nThe later one might prevent conflicts with incompatible grpc-versions or conflicts between libraries that require different versions of netty.\n\n**Note:** If the shaded netty is present on the classpath, then this library will always favor it over the non-shaded grpc-netty one.\n\nYou can use it with Maven like this:\n\n````xml\n<dependency>\n    <groupId>io.grpc</groupId>\n    <artifactId>grpc-netty</artifactId>\n    <version>${grpcVersion}</version>\n</dependency>\n\n<!-- For both -->\n<dependency>\n    <groupId>net.devh</groupId>\n    <artifactId>grpc-spring-boot-starter</artifactId>\n    <version>...</version>\n    <exclusions>\n        <exclusion>\n            <groupId>io.grpc</groupId>\n            <artifactId>grpc-netty-shaded</artifactId>\n        </exclusion>\n    </exclusions>\n</dependency>\n<!-- For the server (only) -->\n<dependency>\n    <groupId>net.devh</groupId>\n    <artifactId>grpc-server-spring-boot-starter</artifactId>\n    <version>...</version>\n    <exclusions>\n        <exclusion>\n            <groupId>io.grpc</groupId>\n            <artifactId>grpc-netty-shaded</artifactId>\n        </exclusion>\n    </exclusions>\n</dependency>\n<!-- For the client (only) -->\n<dependency>\n    <groupId>net.devh</groupId>\n    <artifactId>grpc-client-spring-boot-starter</artifactId>\n    <version>...</version>\n    <exclusions>\n        <exclusion>\n            <groupId>io.grpc</groupId>\n            <artifactId>grpc-netty-shaded</artifactId>\n        </exclusion>\n    </exclusions>\n</dependency>\n````\n\nand like this when using Gradle:\n\n````groovy\ncompile "io.grpc:grpc-netty:${grpcVersion}"\n\ncompile \'net.devh:grpc-spring-boot-starter:...\' exclude group: \'io.grpc\', module: \'grpc-netty-shaded\' // For both\ncompile \'net.devh:grpc-client-spring-boot-starter:...\' exclude group: \'io.grpc\', module: \'grpc-netty-shaded\' // For the client (only)\ncompile \'net.devh:grpc-server-spring-boot-starter:...\' exclude group: \'io.grpc\', module: \'grpc-netty-shaded\' // For the server (only)\n````\n\n## Example-Projects\n\nRead more about our example projects [here](examples).\n\n## Troubleshooting\n\nRefer to our [documentation](https://yidongnan.github.io/grpc-spring-boot-starter/en/trouble-shooting) for help.\n\n## Contributing\n\nContributions are always welcomed! Please see [CONTRIBUTING.md](CONTRIBUTING.md) for detailed guidelines.\n'