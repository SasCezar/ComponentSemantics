b'////\nDO NOT EDIT THIS FILE. IT WAS GENERATED.\nManual changes to this file will be lost when it is generated again.\nEdit the files in the src/main/asciidoc/ directory instead.\n////\n\n:jdkversion: 1.8\n:github-tag: master\n:github-repo: spring-cloud/spring-cloud-sleuth\n\n:github-raw: https://raw.githubusercontent.com/{github-repo}/{github-tag}\n:github-code: https://github.com/{github-repo}/tree/{github-tag}\n\nimage::https://circleci.com/gh/spring-cloud/spring-cloud-sleuth.svg?style=svg["CircleCI", link="https://circleci.com/gh/spring-cloud/spring-cloud-sleuth"]\nimage::https://codecov.io/gh/spring-cloud/spring-cloud-sleuth/branch/{github-tag}/graph/badge.svg["codecov", link="https://codecov.io/gh/spring-cloud/spring-cloud-sleuth"]\nimage::https://badges.gitter.im/spring-cloud/spring-cloud-sleuth.svg[Gitter, link="https://gitter.im/spring-cloud/spring-cloud-sleuth?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge"]\n\n== Spring Cloud Sleuth\n\nSpring Cloud Sleuth is a distributed tracing tool for Spring Cloud. It borrows from https://research.google.com/pubs/pub36356.html[Dapper], https://github.com/openzipkin/zipkin[Zipkin], and https://htrace.incubator.apache.org/[HTrace].\n\n=== Quick Start\n\nAdd sleuth to the classpath of a Spring Boot application (see "`<<sleuth-adding-project>>`" for Maven and Gradle examples), and you can see the correlation data being collected in logs, as long as you are logging requests.\n\nFor example, consider the following HTTP handler:\n\n[source,java]\n----\n@RestController\npublic class DemoController {\n  private static Logger log = LoggerFactory.getLogger(DemoController.class);\n  @RequestMapping("/")\n  public String home() {\n    log.info("Handling home");\n    ...\n    return "Hello World";\n  }\n}\n----\n\nIf you add that handler to a controller, you can see the calls to `home()` being traced in the logs and in Zipkin, if Zipkin is configured.\n\nNOTE: Instead of logging the request in the handler explicitly, you\ncould set `logging.level.org.springframework.web.servlet.DispatcherServlet=DEBUG`.\n\nNOTE: Set `spring.application.name=myService` (for instance) to see the service name as well as the trace and span IDs.\n\n:branch: master\n\n== Introduction\n\nSpring Cloud Sleuth implements a distributed tracing solution for https://cloud.spring.io[Spring Cloud].\n\n=== Terminology\n\nSpring Cloud Sleuth borrows https://research.google.com/pubs/pub36356.html[Dapper\'s] terminology.\n\n*Span*: The basic unit of work. For example, sending an RPC is a new span, as is sending a response to an RPC.\nSpans are identified by a unique 64-bit ID for the span and another 64-bit ID for the trace the span is a part of.\nSpans also have other data, such as descriptions, timestamped events, key-value annotations (tags), the ID of the span that caused them, and process IDs (normally IP addresses).\n\nSpans can be started and stopped, and they keep track of their timing information.\nOnce you create a span, you must stop it at some point in the future.\n\nTIP: The initial span that starts a trace is called a `root span`. The value of the ID\nof that span is equal to the trace ID.\n\n*Trace:* A set of spans forming a tree-like structure.\nFor example, if you run a distributed big-data store, a trace might be formed by a `PUT` request.\n\n*Annotation:*  Used to record the existence of an event in time. With\nhttps://github.com/openzipkin/brave[Brave] instrumentation, we no longer need to set special events\nfor https://zipkin.io/[Zipkin] to understand who the client and server are, where\nthe request started, and where it ended. For learning purposes,\nhowever, we mark these events to highlight what kind\nof an action took place.\n\n* *cs*: Client Sent. The client has made a request. This annotation indicates the start of the span.\n* *sr*: Server Received: The server side got the request and started processing it.\nSubtracting the `cs` timestamp from this timestamp reveals the network latency.\n* *ss*: Server Sent. Annotated upon completion of request processing (when the response got sent back to the client).\nSubtracting the `sr` timestamp from this timestamp reveals the time needed by the server side to process the request.\n* *cr*: Client Received. Signifies the end of the span.\nThe client has successfully received the response from the server side.\nSubtracting the `cs` timestamp from this timestamp reveals the whole time needed by the client to receive the response from the server.\n\nThe following image shows how *Span* and *Trace* look in a system, together with the Zipkin annotations:\n\nimage::https://raw.githubusercontent.com/spring-cloud/spring-cloud-sleuth/{branch}/docs/src/main/asciidoc/images/trace-id.png[Trace Info propagation]\n\nEach color of a note signifies a span (there are seven spans - from *A* to *G*).\nConsider the following note:\n\n[source]\nTrace Id = X\nSpan Id = D\nClient Sent\n\nThis note indicates that the current span has *Trace Id* set to *X* and *Span Id* set to *D*.\nAlso, the `Client Sent` event took place.\n\nThe following image shows how parent-child relationships of spans look:\n\nimage::https://raw.githubusercontent.com/spring-cloud/spring-cloud-sleuth/{branch}/docs/src/main/asciidoc/images/parents.png[Parent child relationship]\n\n=== Purpose\n\nThe following sections refer to the example shown in the preceding image.\n\n==== Distributed Tracing with Zipkin\n\nThis example has seven spans.\nIf you go to traces in Zipkin, you can see this number in the second trace, as shown in the following image:\n\nimage::https://raw.githubusercontent.com/spring-cloud/spring-cloud-sleuth/{branch}/docs/src/main/asciidoc/images/zipkin-traces.png[Traces]\n\nHowever, if you pick a particular trace, you can see four spans, as shown in the following image:\n\nimage::https://raw.githubusercontent.com/spring-cloud/spring-cloud-sleuth/{branch}/docs/src/main/asciidoc/images/zipkin-ui.png[Traces Info propagation]\n\nNOTE: When you pick a particular trace, you see merged spans.\nThat means that, if there were two spans sent to Zipkin with Server Received and Server Sent or Client Received and Client Sent annotations, they are presented as a single span.\n\nWhy is there a difference between the seven and four spans in this case?\n\n* One span comes from the `http:/start` span. It has the Server Received (`sr`) and Server Sent (`ss`) annotations.\n* Two spans come from the RPC call from `service1` to `service2` to the `http:/foo` endpoint.\nThe Client Sent (`cs`) and Client Received (`cr`) events took place on the `service1` side.\nServer Received (`sr`) and Server Sent (`ss`) events took place on the `service2` side.\nThese two spans form one logical span related to an RPC call.\n* Two spans come from the RPC call from `service2` to `service3` to the `http:/bar` endpoint.\nThe Client Sent (`cs`) and Client Received (`cr`) events took place on the `service2` side.\nThe Server Received (`sr`) and Server Sent (`ss`) events took place on the `service3` side.\nThese two spans form one logical span related to an RPC call.\n* Two spans come from the RPC call from `service2` to `service4` to the `http:/baz` endpoint.\nThe Client Sent (`cs`) and Client Received (`cr`) events took place on the `service2` side.\nServer Received (`sr`) and Server Sent (`ss`) events took place on the `service4` side.\nThese two spans form one logical span related to an RPC call.\n\nSo, if we count the physical spans, we have one from `http:/start`, two from `service1` calling `service2`, two from `service2`\ncalling `service3`, and two from `service2` calling `service4`. In sum, we have a total of seven spans.\n\nLogically, we see the information of four total Spans because we have one span related to the incoming request\nto `service1` and three spans related to RPC calls.\n\n==== Visualizing errors\n\nZipkin lets you visualize errors in your trace.\nWhen an exception was thrown and was not caught, we set proper tags on the span, which Zipkin can then properly colorize.\nYou could see in the list of traces one trace that is red. That appears because an exception was thrown.\n\nIf you click that trace, you see a similar picture, as follows:\n\nimage::https://raw.githubusercontent.com/spring-cloud/spring-cloud-sleuth/{branch}/docs/src/main/asciidoc/images/zipkin-error-traces.png[Error Traces]\n\nIf you then click on one of the spans, you see the following\n\nimage::https://raw.githubusercontent.com/spring-cloud/spring-cloud-sleuth/{branch}/docs/src/main/asciidoc/images/zipkin-error-trace-screenshot.png[Error Traces Info propagation]\n\nThe span shows the reason for the error and the whole stack trace related to it.\n\n==== Distributed Tracing with Brave\n\nStarting with version `2.0.0`, Spring Cloud Sleuth uses https://github.com/openzipkin/brave[Brave] as the tracing library.\nConsequently, Sleuth no longer takes care of storing the context but delegates that work to Brave.\n\nDue to the fact that Sleuth had different naming and tagging conventions than Brave, we decided to follow Brave\'s conventions from now on.\nHowever, if you want to use the legacy Sleuth approaches, you can set the `spring.sleuth.http.legacy.enabled` property to `true`.\n\n==== Live examples\n\n.Click the Pivotal Web Services icon to see it live!\n[caption="Click the Pivotal Web Services icon to see it live!"]\nimage::https://raw.githubusercontent.com/spring-cloud/spring-cloud-sleuth/{branch}/docs/src/main/asciidoc/images/pws.png["Zipkin deployed on Pivotal Web Services", link="https://docssleuth-zipkin-server.cfapps.io/", width=150, height=74]\nhttps://docssleuth-zipkin-server.cfapps.io/[Click here to see it live!]\n\nThe dependency graph in Zipkin should resemble the following image:\n\nimage::https://raw.githubusercontent.com/spring-cloud/spring-cloud-sleuth/{branch}/docs/src/main/asciidoc/images/dependencies.png[Dependencies]\n\n.Click the Pivotal Web Services icon to see it live!\n[caption="Click the Pivotal Web Services icon to see it live!"]\nimage::https://raw.githubusercontent.com/spring-cloud/spring-cloud-sleuth/{branch}/docs/src/main/asciidoc/images/pws.png["Zipkin deployed on Pivotal Web Services", link="https://docssleuth-zipkin-server.cfapps.io/dependency", width=150, height=74]\nhttps://docssleuth-zipkin-server.cfapps.io/dependency[Click here to see it live!]\n\n==== Log correlation\n\nWhen using grep to read the logs of those four applications by scanning for a trace ID equal to (for example) `2485ec27856c56f4`, you get output resembling the following:\n\n[source]\nservice1.log:2016-02-26 11:15:47.561  INFO [service1,2485ec27856c56f4,2485ec27856c56f4,true] 68058 --- [nio-8081-exec-1] i.s.c.sleuth.docs.service1.Application   : Hello from service1. Calling service2\nservice2.log:2016-02-26 11:15:47.710  INFO [service2,2485ec27856c56f4,9aa10ee6fbde75fa,true] 68059 --- [nio-8082-exec-1] i.s.c.sleuth.docs.service2.Application   : Hello from service2. Calling service3 and then service4\nservice3.log:2016-02-26 11:15:47.895  INFO [service3,2485ec27856c56f4,1210be13194bfe5,true] 68060 --- [nio-8083-exec-1] i.s.c.sleuth.docs.service3.Application   : Hello from service3\nservice2.log:2016-02-26 11:15:47.924  INFO [service2,2485ec27856c56f4,9aa10ee6fbde75fa,true] 68059 --- [nio-8082-exec-1] i.s.c.sleuth.docs.service2.Application   : Got response from service3 [Hello from service3]\nservice4.log:2016-02-26 11:15:48.134  INFO [service4,2485ec27856c56f4,1b1845262ffba49d,true] 68061 --- [nio-8084-exec-1] i.s.c.sleuth.docs.service4.Application   : Hello from service4\nservice2.log:2016-02-26 11:15:48.156  INFO [service2,2485ec27856c56f4,9aa10ee6fbde75fa,true] 68059 --- [nio-8082-exec-1] i.s.c.sleuth.docs.service2.Application   : Got response from service4 [Hello from service4]\nservice1.log:2016-02-26 11:15:48.182  INFO [service1,2485ec27856c56f4,2485ec27856c56f4,true] 68058 --- [nio-8081-exec-1] i.s.c.sleuth.docs.service1.Application   : Got response from service2 [Hello from service2, response from service3 [Hello from service3] and from service4 [Hello from service4]]\n\nIf you use a log aggregating tool (such as https://www.elastic.co/products/kibana[Kibana], https://www.splunk.com/[Splunk], and others), you can order the events that took place.\nAn example from Kibana would resemble the following image:\n\nimage::https://raw.githubusercontent.com/spring-cloud/spring-cloud-sleuth/{branch}/docs/src/main/asciidoc/images/kibana.png[Log correlation with Kibana]\n\nIf you want to use https://www.elastic.co/guide/en/logstash/current/index.html[Logstash], the following listing shows the Grok pattern for Logstash:\n\n[source]\nfilter {\n       # pattern matching logback pattern\n       grok {\n              match => { "message" => "%{TIMESTAMP_ISO8601:timestamp}\\s+%{LOGLEVEL:severity}\\s+\\[%{DATA:service},%{DATA:trace},%{DATA:span},%{DATA:exportable}\\]\\s+%{DATA:pid}\\s+---\\s+\\[%{DATA:thread}\\]\\s+%{DATA:class}\\s+:\\s+%{GREEDYDATA:rest}" }\n       }\n}\n\nNOTE: If you want to use Grok together with the logs from Cloud Foundry, you have to use the following pattern:\n[source]\nfilter {\n       # pattern matching logback pattern\n       grok {\n              match => { "message" => "(?m)OUT\\s+%{TIMESTAMP_ISO8601:timestamp}\\s+%{LOGLEVEL:severity}\\s+\\[%{DATA:service},%{DATA:trace},%{DATA:span},%{DATA:exportable}\\]\\s+%{DATA:pid}\\s+---\\s+\\[%{DATA:thread}\\]\\s+%{DATA:class}\\s+:\\s+%{GREEDYDATA:rest}" }\n       }\n}\n\n===== JSON Logback with Logstash\n\nOften, you do not want to store your logs in a text file but in a JSON file that Logstash can immediately pick.\nTo do so, you have to do the following (for readability, we pass the dependencies in the `groupId:artifactId:version` notation).\n\n*Dependencies Setup*\n\n. Ensure that Logback is on the classpath (`ch.qos.logback:logback-core`).\n. Add Logstash Logback encode. For example, to use version `4.6`, add `net.logstash.logback:logstash-logback-encoder:4.6`.\n\n*Logback Setup*\n\nConsider the following example of a Logback configuration file (named https://github.com/spring-cloud-samples/sleuth-documentation-apps/blob/master/service1/src/main/resources/logback-spring.xml[logback-spring.xml]).\n\n[source,xml]\n-----\n<?xml version="1.0" encoding="UTF-8"?>\n<configuration>\n\t<include resource="org/springframework/boot/logging/logback/defaults.xml"/>\n\t\xe2\x80\x8b\n\t<springProperty scope="context" name="springAppName" source="spring.application.name"/>\n\t<!-- Example for logging into the build folder of your project -->\n\t<property name="LOG_FILE" value="${BUILD_FOLDER:-build}/${springAppName}"/>\xe2\x80\x8b\n\n\t<!-- You can override this to have a custom pattern -->\n\t<property name="CONSOLE_LOG_PATTERN"\n\t\t\t  value="%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}"/>\n\n\t<!-- Appender to log to console -->\n\t<appender name="console" class="ch.qos.logback.core.ConsoleAppender">\n\t\t<filter class="ch.qos.logback.classic.filter.ThresholdFilter">\n\t\t\t<!-- Minimum logging level to be presented in the console logs-->\n\t\t\t<level>DEBUG</level>\n\t\t</filter>\n\t\t<encoder>\n\t\t\t<pattern>${CONSOLE_LOG_PATTERN}</pattern>\n\t\t\t<charset>utf8</charset>\n\t\t</encoder>\n\t</appender>\n\n\t<!-- Appender to log to file -->\xe2\x80\x8b\n\t<appender name="flatfile" class="ch.qos.logback.core.rolling.RollingFileAppender">\n\t\t<file>${LOG_FILE}</file>\n\t\t<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">\n\t\t\t<fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.gz</fileNamePattern>\n\t\t\t<maxHistory>7</maxHistory>\n\t\t</rollingPolicy>\n\t\t<encoder>\n\t\t\t<pattern>${CONSOLE_LOG_PATTERN}</pattern>\n\t\t\t<charset>utf8</charset>\n\t\t</encoder>\n\t</appender>\n\t\xe2\x80\x8b\n\t<!-- Appender to log to file in a JSON format -->\n\t<appender name="logstash" class="ch.qos.logback.core.rolling.RollingFileAppender">\n\t\t<file>${LOG_FILE}.json</file>\n\t\t<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">\n\t\t\t<fileNamePattern>${LOG_FILE}.json.%d{yyyy-MM-dd}.gz</fileNamePattern>\n\t\t\t<maxHistory>7</maxHistory>\n\t\t</rollingPolicy>\n\t\t<encoder class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder">\n\t\t\t<providers>\n\t\t\t\t<timestamp>\n\t\t\t\t\t<timeZone>UTC</timeZone>\n\t\t\t\t</timestamp>\n\t\t\t\t<pattern>\n\t\t\t\t\t<pattern>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t"severity": "%level",\n\t\t\t\t\t\t"service": "${springAppName:-}",\n\t\t\t\t\t\t"trace": "%X{X-B3-TraceId:-}",\n\t\t\t\t\t\t"span": "%X{X-B3-SpanId:-}",\n\t\t\t\t\t\t"parent": "%X{X-B3-ParentSpanId:-}",\n\t\t\t\t\t\t"exportable": "%X{X-Span-Export:-}",\n\t\t\t\t\t\t"pid": "${PID:-}",\n\t\t\t\t\t\t"thread": "%thread",\n\t\t\t\t\t\t"class": "%logger{40}",\n\t\t\t\t\t\t"rest": "%message"\n\t\t\t\t\t\t}\n\t\t\t\t\t</pattern>\n\t\t\t\t</pattern>\n\t\t\t</providers>\n\t\t</encoder>\n\t</appender>\n\t\xe2\x80\x8b\n\t<root level="INFO">\n\t\t<appender-ref ref="console"/>\n\t\t<!-- uncomment this to have also JSON logs -->\n\t\t<!--<appender-ref ref="logstash"/>-->\n\t\t<!--<appender-ref ref="flatfile"/>-->\n\t</root>\n</configuration>\n-----\n\nThat Logback configuration file:\n\n* Logs information from the application in a JSON format to a `build/${spring.application.name}.json` file.\n* Has commented out two additional appenders: console and standard log file.\n* Has the same logging pattern as the one presented in the previous section.\n\nNOTE: If you use a custom `logback-spring.xml`, you must pass the `spring.application.name` in the  `bootstrap` rather than the `application` property file.\nOtherwise, your custom logback file does not properly read the property.\n\n==== Propagating Span Context\n\nThe span context is the state that must get propagated to any child spans across process boundaries.\nPart of the Span Context is the Baggage. The trace and span IDs are a required part of the span context.\nBaggage is an optional part.\n\nBaggage is a set of key:value pairs stored in the span context.\nBaggage travels together with the trace and is attached to every span.\nSpring Cloud Sleuth understands that a header is baggage-related if the HTTP header is prefixed with `baggage-` and, for messaging, it starts with `baggage_`.\n\nIMPORTANT: There is currently no limitation of the count or size of baggage items.\nHowever, keep in mind that too many can decrease system throughput or increase RPC latency.\nIn extreme cases, too much baggage can crash the application, due to exceeding transport-level message or header capacity.\n\nThe following example shows setting baggage on a span:\n\n[source,java]\n----\nSpan initialSpan = this.tracer.nextSpan().name("span").start();\nExtraFieldPropagation.set(initialSpan.context(), "foo", "bar");\nExtraFieldPropagation.set(initialSpan.context(), "UPPER_CASE", "someValue");\n----\n\n===== Baggage versus Span Tags\n\nBaggage travels with the trace (every child span contains the baggage of its parent).\nZipkin has no knowledge of baggage and does not receive that information.\n\nIMPORTANT: Starting from Sleuth 2.0.0 you have to pass the baggage key names explicitly\nin your project configuration. Read more about that setup <<prefixed-fields,here>>\n\nTags are attached to a specific span. In other words, they are presented only for that particular span.\nHowever, you can search by tag to find the trace, assuming a span having the searched tag value exists.\n\nIf you want to be able to lookup a span based on baggage, you should add a corresponding entry as a tag in the root span.\n\nIMPORTANT: The span must be in scope.\n\nThe following listing shows integration tests that use baggage:\n\n.The setup\n[source,yml]\n----\nspring.sleuth:\n  baggage-keys:\n    - baz\n    - bizarrecase\n  propagation-keys:\n    - foo\n    - upper_case\n----\n\n.The code\n[source,java]\n----\ninitialSpan.tag("foo",\n\t\tExtraFieldPropagation.get(initialSpan.context(), "foo"));\ninitialSpan.tag("UPPER_CASE",\n\t\tExtraFieldPropagation.get(initialSpan.context(), "UPPER_CASE"));\n----\n\n[[sleuth-adding-project]]\n=== Adding Sleuth to the Project\n\nThis section addresses how to add Sleuth to your project with either Maven or Gradle.\n\nIMPORTANT: To ensure that your application name is properly displayed in Zipkin, set the `spring.application.name` property in `bootstrap.yml`.\n\n==== Only Sleuth (log correlation)\n\nIf you want to use only Spring Cloud Sleuth without the Zipkin integration, add the `spring-cloud-starter-sleuth` module to your project.\n\nThe following example shows how to add Sleuth with Maven:\n\n[source,xml,indent=0,subs="verbatim,attributes",role="primary"]\n.Maven\n----\n    <dependencyManagement> <1>\n          <dependencies>\n              <dependency>\n                  <groupId>org.springframework.cloud</groupId>\n                  <artifactId>spring-cloud-dependencies</artifactId>\n                  <version>${release.train.version}</version>\n                  <type>pom</type>\n                  <scope>import</scope>\n              </dependency>\n          </dependencies>\n    </dependencyManagement>\n\n    <dependency> <2>\n        <groupId>org.springframework.cloud</groupId>\n        <artifactId>spring-cloud-starter-sleuth</artifactId>\n    </dependency>\n----\n<1> We recommend that you add the dependency management through the Spring BOM so that you need not manage versions yourself.\n<2> Add the dependency to `spring-cloud-starter-sleuth`.\n\nThe following example shows how to add Sleuth with Gradle:\n\n[source,groovy,indent=0,subs="verbatim,attributes",role="secondary"]\n.Gradle\n----\ndependencyManagement { <1>\n    imports {\n        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${releaseTrainVersion}"\n    }\n}\n\ndependencies { <2>\n    compile "org.springframework.cloud:spring-cloud-starter-sleuth"\n}\n----\n<1> We recommend that you add the dependency management through the Spring BOM so that you need not manage versions yourself.\n<2> Add the dependency to `spring-cloud-starter-sleuth`.\n\n==== Sleuth with Zipkin via HTTP\n\nIf you want both Sleuth and Zipkin, add the `spring-cloud-starter-zipkin` dependency.\n\nThe following example shows how to do so for Maven:\n\n[source,xml,indent=0,subs="verbatim,attributes",role="primary"]\n.Maven\n----\n    <dependencyManagement> <1>\n          <dependencies>\n              <dependency>\n                  <groupId>org.springframework.cloud</groupId>\n                  <artifactId>spring-cloud-dependencies</artifactId>\n                  <version>${release.train.version}</version>\n                  <type>pom</type>\n                  <scope>import</scope>\n              </dependency>\n          </dependencies>\n    </dependencyManagement>\n\n    <dependency> <2>\n        <groupId>org.springframework.cloud</groupId>\n        <artifactId>spring-cloud-starter-zipkin</artifactId>\n    </dependency>\n----\n<1> We recommend that you add the dependency management through the Spring BOM so that you need not manage versions yourself.\n<2> Add the dependency to `spring-cloud-starter-zipkin`.\n\nThe following example shows how to do so for Gradle:\n\n[source,groovy,indent=0,subs="verbatim,attributes",role="secondary"]\n.Gradle\n----\ndependencyManagement { <1>\n    imports {\n        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${releaseTrainVersion}"\n    }\n}\n\ndependencies { <2>\n    compile "org.springframework.cloud:spring-cloud-starter-zipkin"\n}\n----\n<1> We recommend that you add the dependency management through the Spring BOM so that you need not manage versions yourself.\n<2> Add the dependency to `spring-cloud-starter-zipkin`.\n\n==== Sleuth with Zipkin over RabbitMQ or Kafka\n\nIf you want to use RabbitMQ or Kafka instead of HTTP, add the `spring-rabbit` or `spring-kafka` dependency.\nThe default destination name is `zipkin`.\n\nIf using Kafka, you must set the property `spring.zipkin.sender.type` property accordingly:\n\n[source,yaml]\n----\nspring.zipkin.sender.type: kafka\n----\n\nCAUTION: `spring-cloud-sleuth-stream` is deprecated and incompatible with these destinations.\n\nIf you want Sleuth over RabbitMQ, add the `spring-cloud-starter-zipkin` and `spring-rabbit`\ndependencies.\n\nThe following example shows how to do so for Gradle:\n\n[source,xml,indent=0,subs="verbatim,attributes",role="primary"]\n.Maven\n----\n    <dependencyManagement> <1>\n          <dependencies>\n              <dependency>\n                  <groupId>org.springframework.cloud</groupId>\n                  <artifactId>spring-cloud-dependencies</artifactId>\n                  <version>${release.train.version}</version>\n                  <type>pom</type>\n                  <scope>import</scope>\n              </dependency>\n          </dependencies>\n    </dependencyManagement>\n\n    <dependency> <2>\n        <groupId>org.springframework.cloud</groupId>\n        <artifactId>spring-cloud-starter-zipkin</artifactId>\n    </dependency>\n    <dependency> <3>\n        <groupId>org.springframework.amqp</groupId>\n        <artifactId>spring-rabbit</artifactId>\n    </dependency>\n----\n<1> We recommend that you add the dependency management through the Spring BOM so that you need not manage versions yourself.\n<2> Add the dependency to `spring-cloud-starter-zipkin`. That way, all nested dependencies get downloaded.\n<3> To automatically configure RabbitMQ, add the `spring-rabbit` dependency.\n\n[source,groovy,indent=0,subs="verbatim,attributes",role="secondary"]\n.Gradle\n----\ndependencyManagement { <1>\n    imports {\n        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${releaseTrainVersion}"\n    }\n}\n\ndependencies {\n    compile "org.springframework.cloud:spring-cloud-starter-zipkin" <2>\n    compile "org.springframework.amqp:spring-rabbit" <3>\n}\n----\n<1> We recommend that you add the dependency management through the Spring BOM so that you need not manage versions yourself.\n<2> Add the dependency to `spring-cloud-starter-zipkin`. That way, all nested dependencies get downloaded.\n<3> To automatically configure RabbitMQ, add the `spring-rabbit` dependency.\n\n=== Overriding the auto-configuration of Zipkin\n\nSpring Cloud Sleuth supports sending traces to multiple tracing systems as of version 2.1.0.\nIn order to get this to work, every tracing system needs to have a `Reporter<Span>` and `Sender`.\nIf you want to override the provided beans you need to give them a specific name.\nTo do this you can use respectively `ZipkinAutoConfiguration.REPORTER_BEAN_NAME` and `ZipkinAutoConfiguration.SENDER_BEAN_NAME`.\n\n[source,java]\n----\n\n@Configuration\nprotected static class MyConfig {\n\n\t@Bean(ZipkinAutoConfiguration.REPORTER_BEAN_NAME)\n\tReporter<zipkin2.Span> myReporter() {\n\t\treturn AsyncReporter.create(mySender());\n\t}\n\n\t@Bean(ZipkinAutoConfiguration.SENDER_BEAN_NAME)\n\tMySender mySender() {\n\t\treturn new MySender();\n\t}\n\n\tstatic class MySender extends Sender {\n\n\t\tprivate boolean spanSent = false;\n\n\t\tboolean isSpanSent() {\n\t\t\treturn this.spanSent;\n\t\t}\n\n\t\t@Override\n\t\tpublic Encoding encoding() {\n\t\t\treturn Encoding.JSON;\n\t\t}\n\n\t\t@Override\n\t\tpublic int messageMaxBytes() {\n\t\t\treturn Integer.MAX_VALUE;\n\t\t}\n\n\t\t@Override\n\t\tpublic int messageSizeInBytes(List<byte[]> encodedSpans) {\n\t\t\treturn encoding().listSizeInBytes(encodedSpans);\n\t\t}\n\n\t\t@Override\n\t\tpublic Call<Void> sendSpans(List<byte[]> encodedSpans) {\n\t\t\tthis.spanSent = true;\n\t\t\treturn Call.create(null);\n\t\t}\n\n\t}\n\n}\n\n----\n\n== Additional Resources\n\nYou can watch a video of https://twitter.com/reshmi9k[Reshmi Krishna] and https://twitter.com/mgrzejszczak[Marcin Grzejszczak] talking about Spring Cloud\nSleuth and Zipkin https://content.pivotal.io/springone-platform-2017/distributed-tracing-latency-analysis-for-your-microservices-grzejszczak-krishna[by clicking here].\n\nYou can check different setups of Sleuth and Brave https://github.com/openzipkin/sleuth-webmvc-example[in the openzipkin/sleuth-webmvc-example repository].\n\n:doctype: book\n:idprefix:\n:idseparator: -\n:toc: left\n:toclevels: 4\n:tabsize: 4\n:numbered:\n:sectanchors:\n:sectnums:\n:icons: font\n:hide-uri-scheme:\n:docinfo: shared,private\n\n:sc-ext: java\n:project-full-name: Spring Cloud Sleuth\n\n== Features\n\n* Adds trace and span IDs to the Slf4J MDC, so you can extract all the logs from a given trace or span in a log aggregator, as shown in the following example logs:\n+\n----\n2016-02-02 15:30:57.902  INFO [bar,6bfd228dc00d216b,6bfd228dc00d216b,false] 23030 --- [nio-8081-exec-3] ...\n2016-02-02 15:30:58.372 ERROR [bar,6bfd228dc00d216b,6bfd228dc00d216b,false] 23030 --- [nio-8081-exec-3] ...\n2016-02-02 15:31:01.936  INFO [bar,46ab0d418373cbc9,46ab0d418373cbc9,false] 23030 --- [nio-8081-exec-4] ...\n----\n+\nNotice the `[appname,traceId,spanId,exportable]` entries from the MDC:\n\n** *`spanId`*: The ID of a specific operation that took place.\n** *`appname`*: The name of the application that logged the span.\n** *`traceId`*: The ID of the latency graph that contains the span.\n** *`exportable`*: Whether the log should be exported to Zipkin.\nWhen would you like the span not to be exportable?\nWhen you want to wrap some operation in a Span and have it written to the logs only.\n\n* Provides an abstraction over common distributed tracing data models: traces, spans (forming a DAG), annotations, and key-value annotations.\nSpring Cloud Sleuth is loosely based on HTrace but is compatible with Zipkin (Dapper).\n\n* Sleuth records timing information to aid in latency analysis.\nBy using sleuth, you can pinpoint causes of latency in your applications.\n\n* Sleuth is written to not log too much and to not cause your production application to crash.\nTo that end, Sleuth:\n** Propagates structural data about your call graph in-band and the rest out-of-band.\n** Includes opinionated instrumentation of layers such as HTTP.\n** Includes a sampling policy to manage volume.\n** Can report to a Zipkin system for query and visualization.\n\n* Instruments common ingress and egress points from Spring applications (servlet filter, async endpoints, rest template, scheduled actions, message channels, Zuul filters, and Feign client).\n\n* Sleuth includes default logic to join a trace across HTTP or messaging boundaries.\nFor example, HTTP propagation works over Zipkin-compatible request headers.\n\n* Sleuth can propagate context (also known as baggage) between processes.\nConsequently, if you set  a baggage element on a Span, it is sent downstream to other processes over either HTTP or messaging.\n\n* Provides a way to create or continue spans and add tags and logs through annotations.\n\n* If `spring-cloud-sleuth-zipkin` is on the classpath, the app generates and collects Zipkin-compatible traces.\nBy default, it sends them over HTTP to a Zipkin server on localhost (port 9411).\nYou can configure the location of the service by setting `spring.zipkin.baseUrl`.\n** If you depend on `spring-rabbit`, your app sends traces to a RabbitMQ broker instead of HTTP.\n** If you depend on `spring-kafka`, and set `spring.zipkin.sender.type: kafka`, your app sends traces to a Kafka broker instead of HTTP.\n\nCAUTION: `spring-cloud-sleuth-stream` is deprecated and should no longer be used.\n\n* Spring Cloud Sleuth is https://opentracing.io/[OpenTracing] compatible.\n\nNOTE: The SLF4J MDC is always set and logback users immediately see the trace and span IDs in logs per the example\nshown earlier.\nOther logging systems have to configure their own formatter to get the same result.\nThe default is as follows:\n`logging.pattern.level` set to `%5p [${spring.zipkin.service.name:${spring.application.name:-}},%X{X-B3-TraceId:-},%X{X-B3-SpanId:-},%X{X-Span-Export:-}]`\n(this is a Spring Boot feature for logback users).\nIf you do not use SLF4J, this pattern is NOT automatically applied.\n\n== Building\n\n:jdkversion: 1.7\n\n=== Basic Compile and Test\n\nTo build the source you will need to install JDK {jdkversion}.\n\nSpring Cloud uses Maven for most build-related activities, and you\nshould be able to get off the ground quite quickly by cloning the\nproject you are interested in and typing\n\n----\n$ ./mvnw install\n----\n\nNOTE: You can also install Maven (>=3.3.3) yourself and run the `mvn` command\nin place of `./mvnw` in the examples below. If you do that you also\nmight need to add `-P spring` if your local Maven settings do not\ncontain repository declarations for spring pre-release artifacts.\n\nNOTE: Be aware that you might need to increase the amount of memory\navailable to Maven by setting a `MAVEN_OPTS` environment variable with\na value like `-Xmx512m -XX:MaxPermSize=128m`. We try to cover this in\nthe `.mvn` configuration, so if you find you have to do it to make a\nbuild succeed, please raise a ticket to get the settings added to\nsource control.\n\nFor hints on how to build the project look in `.travis.yml` if there\nis one. There should be a "script" and maybe "install" command. Also\nlook at the "services" section to see if any services need to be\nrunning locally (e.g. mongo or rabbit).  Ignore the git-related bits\nthat you might find in "before_install" since they\'re related to setting git\ncredentials and you already have those.\n\nThe projects that require middleware generally include a\n`docker-compose.yml`, so consider using\nhttps://docs.docker.com/compose/[Docker Compose] to run the middeware servers\nin Docker containers. See the README in the\nhttps://github.com/spring-cloud-samples/scripts[scripts demo\nrepository] for specific instructions about the common cases of mongo,\nrabbit and redis.\n\nNOTE: If all else fails, build with the command from `.travis.yml` (usually\n`./mvnw install`).\n\n=== Documentation\n\nThe spring-cloud-build module has a "docs" profile, and if you switch\nthat on it will try to build asciidoc sources from\n`src/main/asciidoc`. As part of that process it will look for a\n`README.adoc` and process it by loading all the includes, but not\nparsing or rendering it, just copying it to `${main.basedir}`\n(defaults to `${basedir}`, i.e. the root of the project). If there are\nany changes in the README it will then show up after a Maven build as\na modified file in the correct place. Just commit it and push the change.\n\n=== Working with the code\nIf you don\'t have an IDE preference we would recommend that you use\nhttps://www.springsource.com/developer/sts[Spring Tools Suite] or\nhttps://eclipse.org[Eclipse] when working with the code. We use the\nhttps://eclipse.org/m2e/[m2eclipse] eclipse plugin for maven support. Other IDEs and tools\nshould also work without issue as long as they use Maven 3.3.3 or better.\n\n==== Importing into eclipse with m2eclipse\nWe recommend the https://eclipse.org/m2e/[m2eclipse] eclipse plugin when working with\neclipse. If you don\'t already have m2eclipse installed it is available from the "eclipse\nmarketplace".\n\nNOTE: Older versions of m2e do not support Maven 3.3, so once the\nprojects are imported into Eclipse you will also need to tell\nm2eclipse to use the right profile for the projects.  If you\nsee many different errors related to the POMs in the projects, check\nthat you have an up to date installation.  If you can\'t upgrade m2e,\nadd the "spring" profile to your `settings.xml`. Alternatively you can\ncopy the repository settings from the "spring" profile of the parent\npom into your `settings.xml`.\n\n==== Importing into eclipse without m2eclipse\nIf you prefer not to use m2eclipse you can generate eclipse project metadata using the\nfollowing command:\n\n[indent=0]\n----\n\t$ ./mvnw eclipse:eclipse\n----\n\nThe generated eclipse projects can be imported by selecting `import existing projects`\nfrom the `file` menu.\n\n\nIMPORTANT: Spring Cloud Sleuth uses two different versions of language level. Java 1.7 is used for main sources, and\nJava 1.8 is used for tests. When importing your project to an IDE, you should activate the `ide` Maven profile to turn on\nJava 1.8 for both main and test sources. You MUST NOT use Java 1.8 features in the main sources. If you do\nso, your app breaks during the Maven build.\n\n== Contributing\n\n:spring-cloud-build-branch: master\n\nSpring Cloud is released under the non-restrictive Apache 2.0 license,\nand follows a very standard Github development process, using Github\ntracker for issues and merging pull requests into master. If you want\nto contribute even something trivial please do not hesitate, but\nfollow the guidelines below.\n\n=== Sign the Contributor License Agreement\nBefore we accept a non-trivial patch or pull request we will need you to sign the\nhttps://cla.pivotal.io/sign/spring[Contributor License Agreement].\nSigning the contributor\'s agreement does not grant anyone commit rights to the main\nrepository, but it does mean that we can accept your contributions, and you will get an\nauthor credit if we do.  Active contributors might be asked to join the core team, and\ngiven the ability to merge pull requests.\n\n=== Code of Conduct\nThis project adheres to the Contributor Covenant https://github.com/spring-cloud/spring-cloud-build/blob/master/docs/src/main/asciidoc/code-of-conduct.adoc[code of\nconduct]. By participating, you  are expected to uphold this code. Please report\nunacceptable behavior to spring-code-of-conduct@pivotal.io.\n\n=== Code Conventions and Housekeeping\nNone of these is essential for a pull request, but they will all help.  They can also be\nadded after the original pull request but before a merge.\n\n* Use the Spring Framework code format conventions. If you use Eclipse\n  you can import formatter settings using the\n  `eclipse-code-formatter.xml` file from the\n  https://raw.githubusercontent.com/spring-cloud/spring-cloud-build/master/spring-cloud-dependencies-parent/eclipse-code-formatter.xml[Spring\n  Cloud Build] project. If using IntelliJ, you can use the\n  https://plugins.jetbrains.com/plugin/6546[Eclipse Code Formatter\n  Plugin] to import the same file.\n* Make sure all new `.java` files to have a simple Javadoc class comment with at least an\n  `@author` tag identifying you, and preferably at least a paragraph on what the class is\n  for.\n* Add the ASF license header comment to all new `.java` files (copy from existing files\n  in the project)\n* Add yourself as an `@author` to the .java files that you modify substantially (more\n  than cosmetic changes).\n* Add some Javadocs and, if you change the namespace, some XSD doc elements.\n* A few unit tests would help a lot as well -- someone has to do it.\n* If no-one else is using your branch, please rebase it against the current master (or\n  other target branch in the main project).\n* When writing a commit message please follow https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html[these conventions],\n  if you are fixing an existing issue please add `Fixes gh-XXXX` at the end of the commit\n  message (where XXXX is the issue number).\n\n=== Checkstyle\n\nSpring Cloud Build comes with a set of checkstyle rules. You can find them in the `spring-cloud-build-tools` module. The most notable files under the module are:\n\n.spring-cloud-build-tools/\n----\n\xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 src\n \xc2\xa0\xc2\xa0 \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 checkstyle\n \xc2\xa0\xc2\xa0 \xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 checkstyle-suppressions.xml <3>\n \xc2\xa0\xc2\xa0 \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 main\n \xc2\xa0\xc2\xa0     \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 resources\n \xc2\xa0\xc2\xa0         \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 checkstyle-header.txt <2>\n \xc2\xa0\xc2\xa0         \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 checkstyle.xml <1>\n----\n<1> Default Checkstyle rules\n<2> File header setup\n<3> Default suppression rules\n\n==== Checkstyle configuration\n\nCheckstyle rules are *disabled by default*. To add checkstyle to your project just define the following properties and plugins.\n\n.pom.xml\n----\n<properties>\n<maven-checkstyle-plugin.failsOnError>true</maven-checkstyle-plugin.failsOnError> <1>\n        <maven-checkstyle-plugin.failsOnViolation>true\n        </maven-checkstyle-plugin.failsOnViolation> <2>\n        <maven-checkstyle-plugin.includeTestSourceDirectory>true\n        </maven-checkstyle-plugin.includeTestSourceDirectory> <3>\n</properties>\n\n<build>\n        <plugins>\n            <plugin> <4>\n                <groupId>io.spring.javaformat</groupId>\n                <artifactId>spring-javaformat-maven-plugin</artifactId>\n            </plugin>\n            <plugin> <5>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-checkstyle-plugin</artifactId>\n            </plugin>\n        </plugins>\n\n    <reporting>\n        <plugins>\n            <plugin> <5>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-checkstyle-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </reporting>\n</build>\n----\n<1> Fails the build upon Checkstyle errors\n<2> Fails the build upon Checkstyle violations\n<3> Checkstyle analyzes also the test sources\n<4> Add the Spring Java Format plugin that will reformat your code to pass most of the Checkstyle formatting rules\n<5> Add checkstyle plugin to your build and reporting phases\n\nIf you need to suppress some rules (e.g. line length needs to be longer), then it\'s enough for you to define a file under `${project.root}/src/checkstyle/checkstyle-suppressions.xml` with your suppressions. Example:\n\n.projectRoot/src/checkstyle/checkstyle-suppresions.xml\n----\n<?xml version="1.0"?>\n<!DOCTYPE suppressions PUBLIC\n\t\t"-//Puppy Crawl//DTD Suppressions 1.1//EN"\n\t\t"https://www.puppycrawl.com/dtds/suppressions_1_1.dtd">\n<suppressions>\n\t<suppress files=".*ConfigServerApplication\\.java" checks="HideUtilityClassConstructor"/>\n\t<suppress files=".*ConfigClientWatch\\.java" checks="LineLengthCheck"/>\n</suppressions>\n----\n\nIt\'s advisable to copy the `${spring-cloud-build.rootFolder}/.editorconfig` and `${spring-cloud-build.rootFolder}/.springformat` to your project. That way, some default formatting rules will be applied. You can do so by running this script:\n\n```bash\n$ curl https://raw.githubusercontent.com/spring-cloud/spring-cloud-build/master/.editorconfig -o .editorconfig\n$ touch .springformat\n```\n\n=== IDE setup\n\n==== Intellij IDEA\n\nIn order to setup Intellij you should import our coding conventions, inspection profiles and set up the checkstyle plugin.\nThe following files can be found in the https://github.com/spring-cloud/spring-cloud-build/tree/master/spring-cloud-build-tools[Spring Cloud Build] project.\n\n.spring-cloud-build-tools/\n----\n\xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 src\n \xc2\xa0\xc2\xa0 \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 checkstyle\n \xc2\xa0\xc2\xa0 \xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 checkstyle-suppressions.xml <3>\n \xc2\xa0\xc2\xa0 \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 main\n \xc2\xa0\xc2\xa0     \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 resources\n \xc2\xa0\xc2\xa0         \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 checkstyle-header.txt <2>\n \xc2\xa0\xc2\xa0         \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 checkstyle.xml <1>\n \xc2\xa0\xc2\xa0         \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 intellij\n \xc2\xa0\xc2\xa0          \xc2\xa0\xc2\xa0 \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 Intellij_Project_Defaults.xml <4>\n \xc2\xa0\xc2\xa0          \xc2\xa0\xc2\xa0 \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 Intellij_Spring_Boot_Java_Conventions.xml <5>\n----\n<1> Default Checkstyle rules\n<2> File header setup\n<3> Default suppression rules\n<4> Project defaults for Intellij that apply most of Checkstyle rules\n<5> Project style conventions for Intellij that apply most of Checkstyle rules\n\n.Code style\n\nimage::https://raw.githubusercontent.com/spring-cloud/spring-cloud-build/{spring-cloud-build-branch}/docs/src/main/asciidoc/images/intellij-code-style.png[Code style]\n\nGo to `File` -> `Settings` -> `Editor` -> `Code style`. There click on the icon next to the `Scheme` section. There, click on the `Import Scheme` value and pick the `Intellij IDEA code style XML` option. Import the `spring-cloud-build-tools/src/main/resources/intellij/Intellij_Spring_Boot_Java_Conventions.xml` file.\n\n.Inspection profiles\n\nimage::https://raw.githubusercontent.com/spring-cloud/spring-cloud-build/{spring-cloud-build-branch}/docs/src/main/asciidoc/images/intellij-inspections.png[Code style]\n\nGo to `File` -> `Settings` -> `Editor` -> `Inspections`. There click on the icon next to the `Profile` section. There, click on the `Import Profile` and import the `spring-cloud-build-tools/src/main/resources/intellij/Intellij_Project_Defaults.xml` file.\n\n.Checkstyle\n\nTo have Intellij work with Checkstyle, you have to install the `Checkstyle` plugin. It\'s advisable to also install the `Assertions2Assertj` to automatically convert the JUnit assertions\n\nimage::https://raw.githubusercontent.com/spring-cloud/spring-cloud-build/{spring-cloud-build-branch}/docs/src/main/asciidoc/images/intellij-checkstyle.png[Checkstyle]\n\nGo to `File` -> `Settings` -> `Other settings` -> `Checkstyle`. There click on the `+` icon in the `Configuration file` section. There, you\'ll have to define where the checkstyle rules should be picked from. In the image above, we\'ve picked the rules from the cloned Spring Cloud Build repository. However, you can point to the Spring Cloud Build\'s GitHub repository (e.g. for the `checkstyle.xml` : `https://raw.githubusercontent.com/spring-cloud/spring-cloud-build/master/spring-cloud-build-tools/src/main/resources/checkstyle.xml`). We need to provide the following variables:\n\n- `checkstyle.header.file` - please point it to the Spring Cloud Build\'s, `spring-cloud-build-tools/src/main/resources/checkstyle-header.txt` file either in your cloned repo or via the `https://raw.githubusercontent.com/spring-cloud/spring-cloud-build/master/spring-cloud-build-tools/src/main/resources/checkstyle-header.txt` URL.\n- `checkstyle.suppressions.file` - default suppressions. Please point it to the Spring Cloud Build\'s, `spring-cloud-build-tools/src/checkstyle/checkstyle-suppressions.xml` file either in your cloned repo or via the `https://raw.githubusercontent.com/spring-cloud/spring-cloud-build/master/spring-cloud-build-tools/src/checkstyle/checkstyle-suppressions.xml` URL.\n- `checkstyle.additional.suppressions.file` - this variable corresponds to suppressions in your local project. E.g. you\'re working on `spring-cloud-contract`. Then point to the `project-root/src/checkstyle/checkstyle-suppressions.xml` folder. Example for `spring-cloud-contract` would be: `/home/username/spring-cloud-contract/src/checkstyle/checkstyle-suppressions.xml`.\n\nIMPORTANT: Remember to set the `Scan Scope` to `All sources` since we apply checkstyle rules for production and test sources.'