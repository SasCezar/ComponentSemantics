b'////\nDO NOT EDIT THIS FILE. IT WAS GENERATED.\nManual changes to this file will be lost when it is generated again.\nEdit the files in the src/main/asciidoc/ directory instead.\n////\n\nimage::https://circleci.com/gh/spring-cloud/spring-cloud-config/tree/master.svg?style=svg["CircleCI", link="https://circleci.com/gh/spring-cloud/spring-cloud-config/tree/master"]\nimage::https://codecov.io/gh/spring-cloud/spring-cloud-config/branch/master/graph/badge.svg["Codecov", link="https://codecov.io/gh/spring-cloud/spring-cloud-config/branch/master"]\nimage::https://api.codacy.com/project/badge/Grade/f064024a072c477e97dca6ed5a70fccd?branch=master["Codacy code quality", link="https://www.codacy.com/app/Spring-Cloud/spring-cloud-config?branch=master&utm_source=github.com&utm_medium=referral&utm_content=spring-cloud/spring-cloud-config&utm_campaign=Badge_Grade"]\n\n\nSpring Cloud Config provides server-side and client-side support for externalized configuration in a distributed system. With the Config Server, you have a central place to manage external properties for applications across all environments.\nThe concepts on both client and server map identically to the Spring `Environment` and `PropertySource` abstractions, so they fit very well with Spring applications but can be used with any application running in any language.\nAs an application moves through the deployment pipeline from dev to test and into production, you can manage the configuration between those environments and be certain that applications have everything they need to run when they migrate.\nThe default implementation of the server storage backend uses git, so it easily supports labelled versions of configuration environments as well as being accessible to a wide range of tooling for managing the content.\nIt is easy to add alternative implementations and plug them in with Spring configuration.\n\n== Features\n\n=== Spring Cloud Config Server\n\nSpring Cloud Config Server offers the following benefits:\n\n* HTTP resource-based API for external configuration (name-value pairs or equivalent YAML content)\n* Encrypt and decrypt property values (symmetric or asymmetric)\n* Embeddable easily in a Spring Boot application using `@EnableConfigServer`\n\n=== Spring Cloud Config Client\n\nSpecifically for Spring applications, Spring Cloud Config Client lets you:\n\n* Bind to the Config Server and initialize Spring `Environment` with remote property sources.\n* Encrypt and decrypt property values (symmetric or asymmetric).\n* `@RefreshScope` for Spring `@Beans` that want to be re-initialized when configuration changes.\n* Use management endpoints:\n** `/env` for updating `Environment` and rebinding `@ConfigurationProperties` and log levels.\n** `/refresh` for refreshing the `@RefreshScope` beans.\n** `/restart` for restarting the Spring context (disabled by default).\n** `/pause` and `/resume` for calling the `Lifecycle` methods (`stop()` and `start()` on the `ApplicationContext`).\n* Bootstrap application context: a parent context for the main application that can be trained to do anything (by default, it binds to the Config Server and decrypts property values).\n\n== Quick Start\n\nThis quick start walks through using both the server and the client of Spring Cloud Config Server.\n\nFirst, start the server, as follows:\n\n----\n$ cd spring-cloud-config-server\n$ ../mvnw spring-boot:run\n----\n\nThe server is a Spring Boot application, so you can run it from your IDE if you prefer to do so (the main class is `ConfigServerApplication`).\n\nNext try out a client, as follows:\n\n----\n$ curl localhost:8888/foo/development\n{"name":"foo","label":"master","propertySources":[\n  {"name":"https://github.com/scratches/config-repo/foo-development.properties","source":{"bar":"spam"}},\n  {"name":"https://github.com/scratches/config-repo/foo.properties","source":{"foo":"bar"}}\n]}\n----\n\nThe default strategy for locating property sources is to clone a git repository (at `spring.cloud.config.server.git.uri`) and use it to initialize a mini `SpringApplication`.\nThe mini-application\'s `Environment` is used to enumerate property sources and publish them at a JSON endpoint.\n\nThe HTTP service has resources in the following form:\n\n----\n/{application}/{profile}[/{label}]\n/{application}-{profile}.yml\n/{label}/{application}-{profile}.yml\n/{application}-{profile}.properties\n/{label}/{application}-{profile}.properties\n----\n\nwhere `application` is injected as the `spring.config.name` in the `SpringApplication` (what is normally `application` in a regular Spring Boot app), `profile` is an active profile (or comma-separated list of properties), and `label` is an optional git label (defaults to `master`.)\n\nSpring Cloud Config Server pulls configuration for remote clients from various sources. The following example gets configuration from a git repository (which must be provided), as shown in the following example:\n\n[source,yaml]\n----\nspring:\n  cloud:\n    config:\n      server:\n        git:\n          uri: https://github.com/spring-cloud-samples/config-repo\n----\n\nOther sources are any JDBC compatible database, Subversion, Hashicorp Vault, Credhub and local filesystems.\n\n=== Client Side Usage\n\nTo use these features in an application, you can build it as a Spring Boot application that depends on spring-cloud-config-client (for an example, see the test cases for the config-client or the sample application).\nThe most convenient way to add the dependency is with a Spring Boot starter `org.springframework.cloud:spring-cloud-starter-config`.\nThere is also a parent pom and BOM (`spring-cloud-starter-parent`) for Maven users and a Spring IO version management properties file for Gradle and Spring CLI users. The following example shows a typical Maven configuration:\n\n[source,xml,indent=0]\n.pom.xml\n----\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>{spring-boot-docs-version}</version>\n        <relativePath /> <!-- lookup parent from repository -->\n    </parent>\n\n\t<dependencyManagement>\n\t\t<dependencies>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.springframework.cloud</groupId>\n\t\t\t\t<artifactId>spring-cloud-dependencies</artifactId>\n\t\t\t\t<version>{spring-cloud-version}</version>\n\t\t\t\t<type>pom</type>\n\t\t\t\t<scope>import</scope>\n\t\t\t</dependency>\n\t\t</dependencies>\n\t</dependencyManagement>\n\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.cloud</groupId>\n\t\t\t<artifactId>spring-cloud-starter-config</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-test</artifactId>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n\t</dependencies>\n\n\t<build>\n\t\t<plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n\t\t</plugins>\n\t</build>\n\n    <!-- repositories also needed for snapshots and milestones -->\n----\n\nNow you can create a standard Spring Boot application, such as the following HTTP server:\n\n----\n@SpringBootApplication\n@RestController\npublic class Application {\n\n    @RequestMapping("/")\n    public String home() {\n        return "Hello World!";\n    }\n\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n    }\n\n}\n----\n\nWhen this HTTP server runs, it picks up the external configuration from the default local config server (if it is running) on port 8888.\nTo modify the startup behavior, you can change the location of the config server by using `bootstrap.properties` (similar to `application.properties` but for the bootstrap phase of an application context), as shown in the following example:\n\n----\nspring.cloud.config.uri: http://myconfigserver.com\n----\n\nBy default, if no application name is set, `application` will be used. To modify the name, the following property can be added to the `bootstrap.properties` file:\n\n----\nspring.application.name: myapp\n----\n\nNOTE: When setting the property `${spring.application.name}` do not prefix your app name with the reserved word `application-` to prevent issues resolving the correct property source.\n\nThe bootstrap properties show up in the `/env` endpoint as a high-priority property source, as shown in the following example.\n\n----\n$ curl localhost:8080/env\n{\n  "profiles":[],\n  "configService:https://github.com/spring-cloud-samples/config-repo/bar.properties":{"foo":"bar"},\n  "servletContextInitParams":{},\n  "systemProperties":{...},\n  ...\n}\n----\n\nA property source called ```configService:<URL of remote repository>/<file name>` contains the `foo` property with a value of `bar` and is highest priority.\n\nNOTE: The URL in the property source name is the git repository, not the config server URL.\n\n=== Sample Application\n\nYou can find a sample application https://github.com/spring-cloud/spring-cloud-config/tree/master/spring-cloud-config-sample[here].\nIt is a Spring Boot application, so you can run it by using the usual mechanisms (for instance, `mvn spring-boot:run`).\nWhen it runs, it looks for the config server on `http://localhost:8888` (a configurable default), so you can run the server as well to see it all working together.\n\nThe sample has a test case where the config server is also started in the same JVM (with a different port), and the test asserts that an\nenvironment property from the git configuration repo is present.\nTo change the location of the config server, you can set `spring.cloud.config.uri` in `bootstrap.yml` (or in system properties and other places).\n\nThe test case has a `main()` method that runs the server in the same way (watch the logs for its port), so you can run the whole system in one process and play with it (for example, you can run the `main()` method in your IDE).\nThe `main()` method uses `target/config` for the working directory of the git repository, so you can make local changes there and see them reflected in the running app. The following example shows a session of tinkering with the test case:\n\n----\n$ curl localhost:8080/env/sample\nmytest\n$ vi target/config/mytest.properties\n.. change value of "sample", optionally commit\n$ curl localhost:8080/refresh\n["sample"]\n$ curl localhost:8080/env/sample\nsampleValue\n----\n\nThe refresh endpoint reports that the "sample" property changed.\n\n== Building\n\n:jdkversion: 1.7\n\n=== Basic Compile and Test\n\nTo build the source you will need to install JDK {jdkversion}.\n\nSpring Cloud uses Maven for most build-related activities, and you\nshould be able to get off the ground quite quickly by cloning the\nproject you are interested in and typing\n\n----\n$ ./mvnw install\n----\n\nNOTE: You can also install Maven (>=3.3.3) yourself and run the `mvn` command\nin place of `./mvnw` in the examples below. If you do that you also\nmight need to add `-P spring` if your local Maven settings do not\ncontain repository declarations for spring pre-release artifacts.\n\nNOTE: Be aware that you might need to increase the amount of memory\navailable to Maven by setting a `MAVEN_OPTS` environment variable with\na value like `-Xmx512m -XX:MaxPermSize=128m`. We try to cover this in\nthe `.mvn` configuration, so if you find you have to do it to make a\nbuild succeed, please raise a ticket to get the settings added to\nsource control.\n\nFor hints on how to build the project look in `.travis.yml` if there\nis one. There should be a "script" and maybe "install" command. Also\nlook at the "services" section to see if any services need to be\nrunning locally (e.g. mongo or rabbit).  Ignore the git-related bits\nthat you might find in "before_install" since they\'re related to setting git\ncredentials and you already have those.\n\nThe projects that require middleware generally include a\n`docker-compose.yml`, so consider using\nhttps://docs.docker.com/compose/[Docker Compose] to run the middeware servers\nin Docker containers. See the README in the\nhttps://github.com/spring-cloud-samples/scripts[scripts demo\nrepository] for specific instructions about the common cases of mongo,\nrabbit and redis.\n\nNOTE: If all else fails, build with the command from `.travis.yml` (usually\n`./mvnw install`).\n\n=== Documentation\n\nThe spring-cloud-build module has a "docs" profile, and if you switch\nthat on it will try to build asciidoc sources from\n`src/main/asciidoc`. As part of that process it will look for a\n`README.adoc` and process it by loading all the includes, but not\nparsing or rendering it, just copying it to `${main.basedir}`\n(defaults to `${basedir}`, i.e. the root of the project). If there are\nany changes in the README it will then show up after a Maven build as\na modified file in the correct place. Just commit it and push the change.\n\n=== Working with the code\nIf you don\'t have an IDE preference we would recommend that you use\nhttps://www.springsource.com/developer/sts[Spring Tools Suite] or\nhttps://eclipse.org[Eclipse] when working with the code. We use the\nhttps://eclipse.org/m2e/[m2eclipse] eclipse plugin for maven support. Other IDEs and tools\nshould also work without issue as long as they use Maven 3.3.3 or better.\n\n==== Importing into eclipse with m2eclipse\nWe recommend the https://eclipse.org/m2e/[m2eclipse] eclipse plugin when working with\neclipse. If you don\'t already have m2eclipse installed it is available from the "eclipse\nmarketplace".\n\nNOTE: Older versions of m2e do not support Maven 3.3, so once the\nprojects are imported into Eclipse you will also need to tell\nm2eclipse to use the right profile for the projects.  If you\nsee many different errors related to the POMs in the projects, check\nthat you have an up to date installation.  If you can\'t upgrade m2e,\nadd the "spring" profile to your `settings.xml`. Alternatively you can\ncopy the repository settings from the "spring" profile of the parent\npom into your `settings.xml`.\n\n==== Importing into eclipse without m2eclipse\nIf you prefer not to use m2eclipse you can generate eclipse project metadata using the\nfollowing command:\n\n[indent=0]\n----\n\t$ ./mvnw eclipse:eclipse\n----\n\nThe generated eclipse projects can be imported by selecting `import existing projects`\nfrom the `file` menu.\n\n\n=== JCE\n\nIf you get an exception due to "Illegal key size" and you are using Sun\xe2\x80\x99s JDK, you need to install the Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files.\nSee the following links for more information:\n\nhttps://www.oracle.com/technetwork/java/javase/downloads/jce-6-download-429243.html[Java 6 JCE]\n\nhttps://www.oracle.com/technetwork/java/javase/downloads/jce-7-download-432124.html[Java 7 JCE]\n\nhttps://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html[Java 8 JCE]\n\nExtract the JCE files into the `JDK/jre/lib/security` folder for whichever version of JRE/JDK x64/x86 you use.\n\n== Contributing\n\n:spring-cloud-build-branch: master\n\nSpring Cloud is released under the non-restrictive Apache 2.0 license,\nand follows a very standard Github development process, using Github\ntracker for issues and merging pull requests into master. If you want\nto contribute even something trivial please do not hesitate, but\nfollow the guidelines below.\n\n=== Sign the Contributor License Agreement\nBefore we accept a non-trivial patch or pull request we will need you to sign the\nhttps://cla.pivotal.io/sign/spring[Contributor License Agreement].\nSigning the contributor\'s agreement does not grant anyone commit rights to the main\nrepository, but it does mean that we can accept your contributions, and you will get an\nauthor credit if we do.  Active contributors might be asked to join the core team, and\ngiven the ability to merge pull requests.\n\n=== Code of Conduct\nThis project adheres to the Contributor Covenant https://github.com/spring-cloud/spring-cloud-build/blob/master/docs/src/main/asciidoc/code-of-conduct.adoc[code of\nconduct]. By participating, you  are expected to uphold this code. Please report\nunacceptable behavior to spring-code-of-conduct@pivotal.io.\n\n=== Code Conventions and Housekeeping\nNone of these is essential for a pull request, but they will all help.  They can also be\nadded after the original pull request but before a merge.\n\n* Use the Spring Framework code format conventions. If you use Eclipse\n  you can import formatter settings using the\n  `eclipse-code-formatter.xml` file from the\n  https://raw.githubusercontent.com/spring-cloud/spring-cloud-build/master/spring-cloud-dependencies-parent/eclipse-code-formatter.xml[Spring\n  Cloud Build] project. If using IntelliJ, you can use the\n  https://plugins.jetbrains.com/plugin/6546[Eclipse Code Formatter\n  Plugin] to import the same file.\n* Make sure all new `.java` files to have a simple Javadoc class comment with at least an\n  `@author` tag identifying you, and preferably at least a paragraph on what the class is\n  for.\n* Add the ASF license header comment to all new `.java` files (copy from existing files\n  in the project)\n* Add yourself as an `@author` to the .java files that you modify substantially (more\n  than cosmetic changes).\n* Add some Javadocs and, if you change the namespace, some XSD doc elements.\n* A few unit tests would help a lot as well -- someone has to do it.\n* If no-one else is using your branch, please rebase it against the current master (or\n  other target branch in the main project).\n* When writing a commit message please follow https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html[these conventions],\n  if you are fixing an existing issue please add `Fixes gh-XXXX` at the end of the commit\n  message (where XXXX is the issue number).\n\n=== Checkstyle\n\nSpring Cloud Build comes with a set of checkstyle rules. You can find them in the `spring-cloud-build-tools` module. The most notable files under the module are:\n\n.spring-cloud-build-tools/\n----\n\xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 src\n \xc2\xa0\xc2\xa0 \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 checkstyle\n \xc2\xa0\xc2\xa0 \xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 checkstyle-suppressions.xml <3>\n \xc2\xa0\xc2\xa0 \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 main\n \xc2\xa0\xc2\xa0     \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 resources\n \xc2\xa0\xc2\xa0         \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 checkstyle-header.txt <2>\n \xc2\xa0\xc2\xa0         \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 checkstyle.xml <1>\n----\n<1> Default Checkstyle rules\n<2> File header setup\n<3> Default suppression rules\n\n==== Checkstyle configuration\n\nCheckstyle rules are *disabled by default*. To add checkstyle to your project just define the following properties and plugins.\n\n.pom.xml\n----\n<properties>\n<maven-checkstyle-plugin.failsOnError>true</maven-checkstyle-plugin.failsOnError> <1>\n        <maven-checkstyle-plugin.failsOnViolation>true\n        </maven-checkstyle-plugin.failsOnViolation> <2>\n        <maven-checkstyle-plugin.includeTestSourceDirectory>true\n        </maven-checkstyle-plugin.includeTestSourceDirectory> <3>\n</properties>\n\n<build>\n        <plugins>\n            <plugin> <4>\n                <groupId>io.spring.javaformat</groupId>\n                <artifactId>spring-javaformat-maven-plugin</artifactId>\n            </plugin>\n            <plugin> <5>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-checkstyle-plugin</artifactId>\n            </plugin>\n        </plugins>\n\n    <reporting>\n        <plugins>\n            <plugin> <5>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-checkstyle-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </reporting>\n</build>\n----\n<1> Fails the build upon Checkstyle errors\n<2> Fails the build upon Checkstyle violations\n<3> Checkstyle analyzes also the test sources\n<4> Add the Spring Java Format plugin that will reformat your code to pass most of the Checkstyle formatting rules\n<5> Add checkstyle plugin to your build and reporting phases\n\nIf you need to suppress some rules (e.g. line length needs to be longer), then it\'s enough for you to define a file under `${project.root}/src/checkstyle/checkstyle-suppressions.xml` with your suppressions. Example:\n\n.projectRoot/src/checkstyle/checkstyle-suppresions.xml\n----\n<?xml version="1.0"?>\n<!DOCTYPE suppressions PUBLIC\n\t\t"-//Puppy Crawl//DTD Suppressions 1.1//EN"\n\t\t"https://www.puppycrawl.com/dtds/suppressions_1_1.dtd">\n<suppressions>\n\t<suppress files=".*ConfigServerApplication\\.java" checks="HideUtilityClassConstructor"/>\n\t<suppress files=".*ConfigClientWatch\\.java" checks="LineLengthCheck"/>\n</suppressions>\n----\n\nIt\'s advisable to copy the `${spring-cloud-build.rootFolder}/.editorconfig` and `${spring-cloud-build.rootFolder}/.springformat` to your project. That way, some default formatting rules will be applied. You can do so by running this script:\n\n```bash\n$ curl https://raw.githubusercontent.com/spring-cloud/spring-cloud-build/master/.editorconfig -o .editorconfig\n$ touch .springformat\n```\n\n=== IDE setup\n\n==== Intellij IDEA\n\nIn order to setup Intellij you should import our coding conventions, inspection profiles and set up the checkstyle plugin.\nThe following files can be found in the https://github.com/spring-cloud/spring-cloud-build/tree/master/spring-cloud-build-tools[Spring Cloud Build] project.\n\n.spring-cloud-build-tools/\n----\n\xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 src\n \xc2\xa0\xc2\xa0 \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 checkstyle\n \xc2\xa0\xc2\xa0 \xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 checkstyle-suppressions.xml <3>\n \xc2\xa0\xc2\xa0 \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 main\n \xc2\xa0\xc2\xa0     \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 resources\n \xc2\xa0\xc2\xa0         \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 checkstyle-header.txt <2>\n \xc2\xa0\xc2\xa0         \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 checkstyle.xml <1>\n \xc2\xa0\xc2\xa0         \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 intellij\n \xc2\xa0\xc2\xa0          \xc2\xa0\xc2\xa0 \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 Intellij_Project_Defaults.xml <4>\n \xc2\xa0\xc2\xa0          \xc2\xa0\xc2\xa0 \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 Intellij_Spring_Boot_Java_Conventions.xml <5>\n----\n<1> Default Checkstyle rules\n<2> File header setup\n<3> Default suppression rules\n<4> Project defaults for Intellij that apply most of Checkstyle rules\n<5> Project style conventions for Intellij that apply most of Checkstyle rules\n\n.Code style\n\nimage::https://raw.githubusercontent.com/spring-cloud/spring-cloud-build/{spring-cloud-build-branch}/docs/src/main/asciidoc/images/intellij-code-style.png[Code style]\n\nGo to `File` -> `Settings` -> `Editor` -> `Code style`. There click on the icon next to the `Scheme` section. There, click on the `Import Scheme` value and pick the `Intellij IDEA code style XML` option. Import the `spring-cloud-build-tools/src/main/resources/intellij/Intellij_Spring_Boot_Java_Conventions.xml` file.\n\n.Inspection profiles\n\nimage::https://raw.githubusercontent.com/spring-cloud/spring-cloud-build/{spring-cloud-build-branch}/docs/src/main/asciidoc/images/intellij-inspections.png[Code style]\n\nGo to `File` -> `Settings` -> `Editor` -> `Inspections`. There click on the icon next to the `Profile` section. There, click on the `Import Profile` and import the `spring-cloud-build-tools/src/main/resources/intellij/Intellij_Project_Defaults.xml` file.\n\n.Checkstyle\n\nTo have Intellij work with Checkstyle, you have to install the `Checkstyle` plugin. It\'s advisable to also install the `Assertions2Assertj` to automatically convert the JUnit assertions\n\nimage::https://raw.githubusercontent.com/spring-cloud/spring-cloud-build/{spring-cloud-build-branch}/docs/src/main/asciidoc/images/intellij-checkstyle.png[Checkstyle]\n\nGo to `File` -> `Settings` -> `Other settings` -> `Checkstyle`. There click on the `+` icon in the `Configuration file` section. There, you\'ll have to define where the checkstyle rules should be picked from. In the image above, we\'ve picked the rules from the cloned Spring Cloud Build repository. However, you can point to the Spring Cloud Build\'s GitHub repository (e.g. for the `checkstyle.xml` : `https://raw.githubusercontent.com/spring-cloud/spring-cloud-build/master/spring-cloud-build-tools/src/main/resources/checkstyle.xml`). We need to provide the following variables:\n\n- `checkstyle.header.file` - please point it to the Spring Cloud Build\'s, `spring-cloud-build-tools/src/main/resources/checkstyle-header.txt` file either in your cloned repo or via the `https://raw.githubusercontent.com/spring-cloud/spring-cloud-build/master/spring-cloud-build-tools/src/main/resources/checkstyle-header.txt` URL.\n- `checkstyle.suppressions.file` - default suppressions. Please point it to the Spring Cloud Build\'s, `spring-cloud-build-tools/src/checkstyle/checkstyle-suppressions.xml` file either in your cloned repo or via the `https://raw.githubusercontent.com/spring-cloud/spring-cloud-build/master/spring-cloud-build-tools/src/checkstyle/checkstyle-suppressions.xml` URL.\n- `checkstyle.additional.suppressions.file` - this variable corresponds to suppressions in your local project. E.g. you\'re working on `spring-cloud-contract`. Then point to the `project-root/src/checkstyle/checkstyle-suppressions.xml` folder. Example for `spring-cloud-contract` would be: `/home/username/spring-cloud-contract/src/checkstyle/checkstyle-suppressions.xml`.\n\nIMPORTANT: Remember to set the `Scan Scope` to `All sources` since we apply checkstyle rules for production and test sources.'