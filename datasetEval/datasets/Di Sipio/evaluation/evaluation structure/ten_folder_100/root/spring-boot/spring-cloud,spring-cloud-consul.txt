b'////\nDO NOT EDIT THIS FILE. IT WAS GENERATED.\nManual changes to this file will be lost when it is generated again.\nEdit the files in the src/main/asciidoc/ directory instead.\n////\n\nimage::https://circleci.com/gh/spring-cloud/spring-cloud-consul/tree/master.svg?style=svg["CircleCI", link="https://circleci.com/gh/spring-cloud/spring-cloud-consul/tree/master"]\nimage::https://codecov.io/gh/spring-cloud/spring-cloud-consul/branch/master/graph/badge.svg["Codecov", link="https://codecov.io/gh/spring-cloud/spring-cloud-consul/branch/master"]\n\nThis project provides Consul integrations for Spring Boot apps through autoconfiguration\nand binding to the Spring Environment and other Spring programming model idioms. With a few\nsimple annotations you can quickly enable and configure the common patterns inside your\napplication and build large distributed systems with Consul based components. The\npatterns provided include Service Discovery, Control Bus and Configuration.\nIntelligent Routing (Zuul) and Client Side Load Balancing (Ribbon), Circuit Breaker\n(Hystrix) are provided by integration with Spring Cloud Netflix.\n\n\n== Consul overview\n\nFeatures of Consul\n\n* Distributed configuration\n* Service registration and discovery\n* Distributed events\n* Distributed locking and sessions\n* Supports multiple data centers\n* Built in, user-friendly user interface\n\nSee the https://consul.io/intro/index.html[intro] for more information.\n\n== Spring Cloud Consul Features\n\n* Spring Cloud `DiscoveryClient` implementation\n** supports Ribbon and Zuul\n** supports Spring Cloud LoadBalancer\n* Consul based `PropertySource` loaded during the \'bootstrap\' phase.\n* Spring Cloud Bus implementation based on Consul https://www.consul.io/docs/agent/http/event.html[events]\n\n== Running the sample\n\n1. Run `docker-compose up`\n2. Verify consul is running by visiting http://localhost:8500\n3. Run `mvn package` this will bring in the required spring cloud maven repositories and build\n4. Run `java -jar spring-cloud-consul-sample/target/spring-cloud-consul-sample-${VERSION}.jar`\n5. visit http://localhost:8080, verify that `{"serviceId":"<yourhost>:8080","host":"<yourhost>","port":8080}` results\n6. run `java -jar spring-cloud-consul-sample/target/spring-cloud-consul-sample-${VERSION}.jar --server.port=8081`\n7. visit http://localhost:8080 again, verify that `{"serviceId":"<yourhost>:8081","host":"<yourhost>","port":8081}` eventually shows up in the results in a round robbin fashion (may take a minute or so).\n\n== Building\n\n:jdkversion: 1.8\n\n=== Basic Compile and Test\n\nTo build the source you will need to install JDK {jdkversion}.\n\nSpring Cloud uses Maven for most build-related activities, and you\nshould be able to get off the ground quite quickly by cloning the\nproject you are interested in and typing\n\n----\n$ ./mvnw install\n----\n\nNOTE: You can also install Maven (>=3.3.3) yourself and run the `mvn` command\nin place of `./mvnw` in the examples below. If you do that you also\nmight need to add `-P spring` if your local Maven settings do not\ncontain repository declarations for spring pre-release artifacts.\n\nNOTE: Be aware that you might need to increase the amount of memory\navailable to Maven by setting a `MAVEN_OPTS` environment variable with\na value like `-Xmx512m -XX:MaxPermSize=128m`. We try to cover this in\nthe `.mvn` configuration, so if you find you have to do it to make a\nbuild succeed, please raise a ticket to get the settings added to\nsource control.\n\nFor hints on how to build the project look in `.travis.yml` if there\nis one. There should be a "script" and maybe "install" command. Also\nlook at the "services" section to see if any services need to be\nrunning locally (e.g. mongo or rabbit).  Ignore the git-related bits\nthat you might find in "before_install" since they\'re related to setting git\ncredentials and you already have those.\n\nThe projects that require middleware generally include a\n`docker-compose.yml`, so consider using\nhttps://docs.docker.com/compose/[Docker Compose] to run the middeware servers\nin Docker containers. See the README in the\nhttps://github.com/spring-cloud-samples/scripts[scripts demo\nrepository] for specific instructions about the common cases of mongo,\nrabbit and redis.\n\nNOTE: If all else fails, build with the command from `.travis.yml` (usually\n`./mvnw install`).\n\n=== Documentation\n\nThe spring-cloud-build module has a "docs" profile, and if you switch\nthat on it will try to build asciidoc sources from\n`src/main/asciidoc`. As part of that process it will look for a\n`README.adoc` and process it by loading all the includes, but not\nparsing or rendering it, just copying it to `${main.basedir}`\n(defaults to `${basedir}`, i.e. the root of the project). If there are\nany changes in the README it will then show up after a Maven build as\na modified file in the correct place. Just commit it and push the change.\n\n=== Working with the code\nIf you don\'t have an IDE preference we would recommend that you use\nhttps://www.springsource.com/developer/sts[Spring Tools Suite] or\nhttps://eclipse.org[Eclipse] when working with the code. We use the\nhttps://eclipse.org/m2e/[m2eclipse] eclipse plugin for maven support. Other IDEs and tools\nshould also work without issue as long as they use Maven 3.3.3 or better.\n\n==== Importing into eclipse with m2eclipse\nWe recommend the https://eclipse.org/m2e/[m2eclipse] eclipse plugin when working with\neclipse. If you don\'t already have m2eclipse installed it is available from the "eclipse\nmarketplace".\n\nNOTE: Older versions of m2e do not support Maven 3.3, so once the\nprojects are imported into Eclipse you will also need to tell\nm2eclipse to use the right profile for the projects.  If you\nsee many different errors related to the POMs in the projects, check\nthat you have an up to date installation.  If you can\'t upgrade m2e,\nadd the "spring" profile to your `settings.xml`. Alternatively you can\ncopy the repository settings from the "spring" profile of the parent\npom into your `settings.xml`.\n\n==== Importing into eclipse without m2eclipse\nIf you prefer not to use m2eclipse you can generate eclipse project metadata using the\nfollowing command:\n\n[indent=0]\n----\n\t$ ./mvnw eclipse:eclipse\n----\n\nThe generated eclipse projects can be imported by selecting `import existing projects`\nfrom the `file` menu.\n\n\n\n== Contributing\n\n:spring-cloud-build-branch: master\n\nSpring Cloud is released under the non-restrictive Apache 2.0 license,\nand follows a very standard Github development process, using Github\ntracker for issues and merging pull requests into master. If you want\nto contribute even something trivial please do not hesitate, but\nfollow the guidelines below.\n\n=== Sign the Contributor License Agreement\nBefore we accept a non-trivial patch or pull request we will need you to sign the\nhttps://cla.pivotal.io/sign/spring[Contributor License Agreement].\nSigning the contributor\'s agreement does not grant anyone commit rights to the main\nrepository, but it does mean that we can accept your contributions, and you will get an\nauthor credit if we do.  Active contributors might be asked to join the core team, and\ngiven the ability to merge pull requests.\n\n=== Code of Conduct\nThis project adheres to the Contributor Covenant https://github.com/spring-cloud/spring-cloud-build/blob/master/docs/src/main/asciidoc/code-of-conduct.adoc[code of\nconduct]. By participating, you  are expected to uphold this code. Please report\nunacceptable behavior to spring-code-of-conduct@pivotal.io.\n\n=== Code Conventions and Housekeeping\nNone of these is essential for a pull request, but they will all help.  They can also be\nadded after the original pull request but before a merge.\n\n* Use the Spring Framework code format conventions. If you use Eclipse\n  you can import formatter settings using the\n  `eclipse-code-formatter.xml` file from the\n  https://raw.githubusercontent.com/spring-cloud/spring-cloud-build/master/spring-cloud-dependencies-parent/eclipse-code-formatter.xml[Spring\n  Cloud Build] project. If using IntelliJ, you can use the\n  https://plugins.jetbrains.com/plugin/6546[Eclipse Code Formatter\n  Plugin] to import the same file.\n* Make sure all new `.java` files to have a simple Javadoc class comment with at least an\n  `@author` tag identifying you, and preferably at least a paragraph on what the class is\n  for.\n* Add the ASF license header comment to all new `.java` files (copy from existing files\n  in the project)\n* Add yourself as an `@author` to the .java files that you modify substantially (more\n  than cosmetic changes).\n* Add some Javadocs and, if you change the namespace, some XSD doc elements.\n* A few unit tests would help a lot as well -- someone has to do it.\n* If no-one else is using your branch, please rebase it against the current master (or\n  other target branch in the main project).\n* When writing a commit message please follow https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html[these conventions],\n  if you are fixing an existing issue please add `Fixes gh-XXXX` at the end of the commit\n  message (where XXXX is the issue number).\n\n=== Checkstyle\n\nSpring Cloud Build comes with a set of checkstyle rules. You can find them in the `spring-cloud-build-tools` module. The most notable files under the module are:\n\n.spring-cloud-build-tools/\n----\n\xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 src\n \xc2\xa0\xc2\xa0 \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 checkstyle\n \xc2\xa0\xc2\xa0 \xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 checkstyle-suppressions.xml <3>\n \xc2\xa0\xc2\xa0 \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 main\n \xc2\xa0\xc2\xa0     \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 resources\n \xc2\xa0\xc2\xa0         \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 checkstyle-header.txt <2>\n \xc2\xa0\xc2\xa0         \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 checkstyle.xml <1>\n----\n<1> Default Checkstyle rules\n<2> File header setup\n<3> Default suppression rules\n\n==== Checkstyle configuration\n\nCheckstyle rules are *disabled by default*. To add checkstyle to your project just define the following properties and plugins.\n\n.pom.xml\n----\n<properties>\n<maven-checkstyle-plugin.failsOnError>true</maven-checkstyle-plugin.failsOnError> <1>\n        <maven-checkstyle-plugin.failsOnViolation>true\n        </maven-checkstyle-plugin.failsOnViolation> <2>\n        <maven-checkstyle-plugin.includeTestSourceDirectory>true\n        </maven-checkstyle-plugin.includeTestSourceDirectory> <3>\n</properties>\n\n<build>\n        <plugins>\n            <plugin> <4>\n                <groupId>io.spring.javaformat</groupId>\n                <artifactId>spring-javaformat-maven-plugin</artifactId>\n            </plugin>\n            <plugin> <5>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-checkstyle-plugin</artifactId>\n            </plugin>\n        </plugins>\n\n    <reporting>\n        <plugins>\n            <plugin> <5>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-checkstyle-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </reporting>\n</build>\n----\n<1> Fails the build upon Checkstyle errors\n<2> Fails the build upon Checkstyle violations\n<3> Checkstyle analyzes also the test sources\n<4> Add the Spring Java Format plugin that will reformat your code to pass most of the Checkstyle formatting rules\n<5> Add checkstyle plugin to your build and reporting phases\n\nIf you need to suppress some rules (e.g. line length needs to be longer), then it\'s enough for you to define a file under `${project.root}/src/checkstyle/checkstyle-suppressions.xml` with your suppressions. Example:\n\n.projectRoot/src/checkstyle/checkstyle-suppresions.xml\n----\n<?xml version="1.0"?>\n<!DOCTYPE suppressions PUBLIC\n\t\t"-//Puppy Crawl//DTD Suppressions 1.1//EN"\n\t\t"https://www.puppycrawl.com/dtds/suppressions_1_1.dtd">\n<suppressions>\n\t<suppress files=".*ConfigServerApplication\\.java" checks="HideUtilityClassConstructor"/>\n\t<suppress files=".*ConfigClientWatch\\.java" checks="LineLengthCheck"/>\n</suppressions>\n----\n\nIt\'s advisable to copy the `${spring-cloud-build.rootFolder}/.editorconfig` and `${spring-cloud-build.rootFolder}/.springformat` to your project. That way, some default formatting rules will be applied. You can do so by running this script:\n\n```bash\n$ curl https://raw.githubusercontent.com/spring-cloud/spring-cloud-build/master/.editorconfig -o .editorconfig\n$ touch .springformat\n```\n\n=== IDE setup\n\n==== Intellij IDEA\n\nIn order to setup Intellij you should import our coding conventions, inspection profiles and set up the checkstyle plugin.\nThe following files can be found in the https://github.com/spring-cloud/spring-cloud-build/tree/master/spring-cloud-build-tools[Spring Cloud Build] project.\n\n.spring-cloud-build-tools/\n----\n\xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 src\n \xc2\xa0\xc2\xa0 \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 checkstyle\n \xc2\xa0\xc2\xa0 \xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 checkstyle-suppressions.xml <3>\n \xc2\xa0\xc2\xa0 \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 main\n \xc2\xa0\xc2\xa0     \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 resources\n \xc2\xa0\xc2\xa0         \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 checkstyle-header.txt <2>\n \xc2\xa0\xc2\xa0         \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 checkstyle.xml <1>\n \xc2\xa0\xc2\xa0         \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 intellij\n \xc2\xa0\xc2\xa0          \xc2\xa0\xc2\xa0 \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 Intellij_Project_Defaults.xml <4>\n \xc2\xa0\xc2\xa0          \xc2\xa0\xc2\xa0 \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 Intellij_Spring_Boot_Java_Conventions.xml <5>\n----\n<1> Default Checkstyle rules\n<2> File header setup\n<3> Default suppression rules\n<4> Project defaults for Intellij that apply most of Checkstyle rules\n<5> Project style conventions for Intellij that apply most of Checkstyle rules\n\n.Code style\n\nimage::https://raw.githubusercontent.com/spring-cloud/spring-cloud-build/{spring-cloud-build-branch}/docs/src/main/asciidoc/images/intellij-code-style.png[Code style]\n\nGo to `File` -> `Settings` -> `Editor` -> `Code style`. There click on the icon next to the `Scheme` section. There, click on the `Import Scheme` value and pick the `Intellij IDEA code style XML` option. Import the `spring-cloud-build-tools/src/main/resources/intellij/Intellij_Spring_Boot_Java_Conventions.xml` file.\n\n.Inspection profiles\n\nimage::https://raw.githubusercontent.com/spring-cloud/spring-cloud-build/{spring-cloud-build-branch}/docs/src/main/asciidoc/images/intellij-inspections.png[Code style]\n\nGo to `File` -> `Settings` -> `Editor` -> `Inspections`. There click on the icon next to the `Profile` section. There, click on the `Import Profile` and import the `spring-cloud-build-tools/src/main/resources/intellij/Intellij_Project_Defaults.xml` file.\n\n.Checkstyle\n\nTo have Intellij work with Checkstyle, you have to install the `Checkstyle` plugin. It\'s advisable to also install the `Assertions2Assertj` to automatically convert the JUnit assertions\n\nimage::https://raw.githubusercontent.com/spring-cloud/spring-cloud-build/{spring-cloud-build-branch}/docs/src/main/asciidoc/images/intellij-checkstyle.png[Checkstyle]\n\nGo to `File` -> `Settings` -> `Other settings` -> `Checkstyle`. There click on the `+` icon in the `Configuration file` section. There, you\'ll have to define where the checkstyle rules should be picked from. In the image above, we\'ve picked the rules from the cloned Spring Cloud Build repository. However, you can point to the Spring Cloud Build\'s GitHub repository (e.g. for the `checkstyle.xml` : `https://raw.githubusercontent.com/spring-cloud/spring-cloud-build/master/spring-cloud-build-tools/src/main/resources/checkstyle.xml`). We need to provide the following variables:\n\n- `checkstyle.header.file` - please point it to the Spring Cloud Build\'s, `spring-cloud-build-tools/src/main/resources/checkstyle-header.txt` file either in your cloned repo or via the `https://raw.githubusercontent.com/spring-cloud/spring-cloud-build/master/spring-cloud-build-tools/src/main/resources/checkstyle-header.txt` URL.\n- `checkstyle.suppressions.file` - default suppressions. Please point it to the Spring Cloud Build\'s, `spring-cloud-build-tools/src/checkstyle/checkstyle-suppressions.xml` file either in your cloned repo or via the `https://raw.githubusercontent.com/spring-cloud/spring-cloud-build/master/spring-cloud-build-tools/src/checkstyle/checkstyle-suppressions.xml` URL.\n- `checkstyle.additional.suppressions.file` - this variable corresponds to suppressions in your local project. E.g. you\'re working on `spring-cloud-contract`. Then point to the `project-root/src/checkstyle/checkstyle-suppressions.xml` folder. Example for `spring-cloud-contract` would be: `/home/username/spring-cloud-contract/src/checkstyle/checkstyle-suppressions.xml`.\n\nIMPORTANT: Remember to set the `Scan Scope` to `All sources` since we apply checkstyle rules for production and test sources.'