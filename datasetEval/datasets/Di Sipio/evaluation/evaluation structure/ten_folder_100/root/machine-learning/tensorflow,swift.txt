b'<p align="center">\n  <img src="images/logo.png">\n</p>\n\n# Swift for TensorFlow\n\n> Swift for TensorFlow: No boundaries.\n\nSwift for TensorFlow is a next-generation platform for machine learning,\nincorporating the latest research across machine learning, compilers,\ndifferentiable programming, systems design, and beyond. This is an early-stage\nproject: it is not feature-complete nor production-ready, but it is ready for\n_pioneers_ to try in projects, give feedback, and help shape the future!\n\nThe Swift for TensorFlow project is currently focusing on 2 kinds of users:\n\n1.  **Advanced ML researchers** who are limited by current ML frameworks. Swift\n    for TensorFlow\'s advantages include seamless integration with a modern\n    general-purpose language, allowing for more dynamic and sophisticated\n    models. Fast abstractions can be developed in "user-space" (as opposed to in\n    C/C++, aka "framework-space"), resulting in modular APIs that can be easily\n    customized.\n\n2.  **ML learners** who are just getting started with machine learning. Thanks\n    to Swift\'s support for quality tooling (e.g. context-aware autocompletion),\n    Swift for TensorFlow can be one of the most productive ways to start\n    learning the fundamentals of machine learning.\n\n## Getting started\n\n### Using Swift for TensorFlow\n\n- **Google Colaboratory**: The fastest way to get started is to try out Swift\n   for TensorFlow right in your browser. Just open up [a tutorial](#tutorials-), or start from a [blank\n   notebook](https://colab.research.google.com/github/tensorflow/swift/blob/master/notebooks/blank_swift.ipynb)!\n   Read more in our [usage guide](Usage.md).\n\n- **Install locally**: you can [download a pre-built Swift for TensorFlow\n   package](Installation.md). After installation, you can follow these\n   [step-by-step instructions](Usage.md) to build and execute a Swift script on\n   your computer.\n\n- **Compile from source**: If you\'d like to customize Swift for TensorFlow or\n   contribute back, follow our [instructions](https://github.com/apple/swift/tree/tensorflow#building-swift-for-tensorflow)\n   on building Swift for TensorFlow from source.\n\n### Tutorials ![](https://www.tensorflow.org/images/colab_logo_32px.png)\n\nTutorial | Last Updated |\n-------- | ------------ |\n[A Swift Tour](https://colab.research.google.com/github/tensorflow/swift/blob/master/docs/site/tutorials/a_swift_tour.ipynb) | March 2019\n[Protocol-Oriented Programming & Generics](https://colab.research.google.com/github/tensorflow/swift/blob/master/docs/site/tutorials/protocol_oriented_generics.ipynb) | August 2019\n[Python Interoperability](https://colab.research.google.com/github/tensorflow/swift/blob/master/docs/site/tutorials/python_interoperability.ipynb) | March 2019\n[Custom Differentiation](https://colab.research.google.com/github/tensorflow/swift/blob/master/docs/site/tutorials/custom_differentiation.ipynb) | March 2019\n[Model Training Walkthrough](https://colab.research.google.com/github/tensorflow/swift/blob/master/docs/site/tutorials/model_training_walkthrough.ipynb) | March 2019\n[Raw TensorFlow Operators](https://colab.research.google.com/github/tensorflow/swift/blob/master/docs/site/tutorials/raw_tensorflow_operators.ipynb) | March 2019\n\n### Resources\n\n- [Models and Examples](https://github.com/tensorflow/swift-models)\n- [TensorFlow Swift API Reference](https://www.tensorflow.org/api_docs/swift/Structs/Tensor)\n- [Release Notes](RELEASES.md)\n- [Known Issues](KNOWN_ISSUES.md)\n- [Frequently Asked Questions](FAQ.md)\n\n### Forums\n\nPlease join the\n[swift@tensorflow.org mailing list](https://groups.google.com/a/tensorflow.org/d/forum/swift)\nto hear the latest announcements, get help, and share your thoughts!\n\n## Why Swift for TensorFlow?\n\nSwift for TensorFlow is a new way to develop machine learning models. It\ngives you the power of\n[TensorFlow](https://www.tensorflow.org) directly integrated into the\n[Swift programming language](https://swift.org/about). We believe that\nmachine learning paradigms are so important that they deserve\n**first-class language and compiler support**.\n\nA fundamental primitive in machine learning is gradient-based optimization:\ncomputing function derivatives to optimize parameters. With Swift for\nTensorFlow, you can easily differentiate functions using differential\noperators like [`gradient(of:)`](https://www.tensorflow.org/swift/api_docs/Functions#/s:10TensorFlow8gradient2of15CotangentVectorQzxcq_xc_tAA14DifferentiableRzSFR_AaFR_AdaFPQy_Rs_r0_lF), or differentiate with respect to an entire\nmodel by calling method [`gradient(in:)`](https://www.tensorflow.org/swift/api_docs/Protocols/Differentiable#/s:10TensorFlow14DifferentiablePAAE8gradient2in15CotangentVectorQzqd__xXE_tSFRd__AaBRd__AfCQyd__Rsd__lF). These differentiation APIs\nare not just available for `Tensor`-related concepts\xe2\x80\x94they are\ngeneralized for all types that conform to the [`Differentiable`](https://www.tensorflow.org/swift/api_docs/Protocols/Differentiable)\nprotocol, including `Float`, `Double`, SIMD vectors, and your own data\nstructures.\n\n```swift\n// Custom differentiable type.\nstruct Model: Differentiable {\n    var w: Float\n    var b: Float\n    func applied(to input: Float) -> Float {\n        return w * input + b\n    }\n}\n\n// Differentiate using `Differentiable.gradient(at:in:)`.\nlet model = Model(w: 4.0, b: 3.0)\nlet (\xf0\x9d\x9b\x81model, \xf0\x9d\x9b\x81input) = model.gradient(at: 2.0) { model, input in\n    model.applied(to: input)\n}\n\nprint(\xf0\x9d\x9b\x81model) // Model.TangentVector(w: 2.0, b: 1.0)\nprint(\xf0\x9d\x9b\x81input) // 4.0\n```\n\nBeyond derivatives, the Swift for TensorFlow project comes with a sophisticated toolchain\nto make users more productive. You can run Swift interactively in a Jupyter\nnotebook, and get helpful autocomplete suggestions to help you explore the\nmassive API surface of a modern deep learning library. You can [get started\nright in your browser in\nseconds](https://colab.research.google.com/github/tensorflow/swift/blob/master/docs/site/tutorials/model_training_walkthrough.ipynb)!\n\nMigrating to Swift for TensorFlow is really easy thanks to Swift\'s powerful\nPython integration. You can incrementally migrate your Python code over (or\ncontinue to use your favorite Python libraries), because you can easily call\nyour favorite Python library with a familiar syntax:\n\n```swift\nimport TensorFlow\nimport Python\n\nlet np = Python.import("numpy")\n\nlet array = np.arange(100).reshape(10, 10)  // Create a 10x10 numpy array.\nlet tensor = Tensor<Float>(numpy: array)  // Seamless integration!\n```\n\n## Documentation\n\n> Beware: the project is moving very quickly, and thus some of these documents\n> are slightly out of date as compared to the current state-of-the-art.\n\n### Overview\n\nDocument | Last Updated | Status |\n-------- | ------------ | ------ |\n[Why *Swift* for TensorFlow?](docs/WhySwiftForTensorFlow.md) | April 2018 | Current\n[Swift for TensorFlow Design Overview](docs/DesignOverview.md) | April 2018 | Outdated\n\n### Technology deep dive\n\nThe Swift for TensorFlow project builds on top of powerful theoretical\nfoundations. For insight into some of the underlying technologies, check\nout the following documentation.\n\nDocument | Last Updated | Status |\n-------- | ------------ | ------ |\n[Differentiable Programming Mega-Proposal](https://github.com/apple/swift/blob/master/docs/DifferentiableProgramming.md) | September 2019 | Current\n[Swift Differentiable Programming Design Overview](https://docs.google.com/document/d/1bPepWLfRQa6CtXqKA8CDQ87uZHixNav-TFjLSisuKag/edit?usp=sharing) | June 2019 | Current\n[Swift Differentiable Programming Implementation Overview](https://docs.google.com/document/d/1_BirmTqdotglwNTOcYAW-ib6mx_jl-gH9Dbg4WmHZh0) | August 2019 | Current\n[Differentiable Types](docs/DifferentiableTypes.md) | March 2019 | Outdated\n[Differentiable Functions and Differentiation APIs](docs/DifferentiableFunctions.md) | March 2019 | Outdated\n[Dynamic Property Iteration using Key Paths](docs/DynamicPropertyIteration.md) | March 2019 | Current\n[Hierarchical Parameter Iteration and Optimization](docs/ParameterOptimization.md) | March 2019 | Current\n[First-Class Automatic Differentiation in Swift: A Manifesto](https://gist.github.com/rxwei/30ba75ce092ab3b0dce4bde1fc2c9f1d) | October 2018 | Outdated\n[Automatic Differentiation Whitepaper](docs/AutomaticDifferentiation.md) | April 2018 | Outdated\n[Python Interoperability](docs/PythonInteroperability.md) | April 2018 | Current\n[Graph Program Extraction](docs/GraphProgramExtraction.md) | April 2018 | Outdated\n\n## Source code\n\nCompiler and standard library development happens on the `tensorflow` branch of\nthe [apple/swift](https://github.com/apple/swift/tree/tensorflow) repository.\n\nAdditional code repositories that make up the core of the project include:\n\n - [Swift fork of LLDB](http://github.com/apple/swift-lldb/tree/tensorflow):\n   debugger and REPL support.\n - [Deep learning library](https://github.com/tensorflow/swift-apis): high-level\n   API familiar to Keras users.\n\n> Swift for TensorFlow is **not** intended to remain a long-term fork of the official\n> Swift language. Language additions are designed to fit with the direction of\n> Swift and will go through the [Swift\n> Evolution](https://github.com/apple/swift-evolution) process.\n\n### Jupyter Notebook support\n\n[Jupyter Notebook](http://jupyter.org/) support for Swift is under development at\n[google/swift-jupyter](https://github.com/google/swift-jupyter).\n\n## Community\n\nSwift for TensorFlow discussions happen on the\n[swift@tensorflow.org mailing list](https://groups.google.com/a/tensorflow.org/d/forum/swift).\n\n### Bugs reports and feature requests\n\nBefore reporting an issue, please check the [Frequently Asked Questions](FAQ.md)\nto see if your question has already been addressed.\n\nFor questions about general use or feature requests, please send an email to\nthe [mailing list](mailto:swift@tensorflow.org) or search for relevant issues\nin the [JIRA issue tracker](https://bugs.swift.org/projects/TF/issues/?filter=allopenissues).\n\nFor the most part, the core team\'s development is also tracked in\n[JIRA](https://bugs.swift.org/secure/RapidBoard.jspa?rapidView=17&projectKey=TF&view=planning).\n\n### Contributing\n\nWe welcome contributions from everyone. Read the [contributing\nguide](Contributing.md) for information on how to get started.\n\n### Code of conduct\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, gender identity and expression, level of\nexperience, education, socio-economic status, nationality, personal appearance,\nrace, religion, or sexual identity and orientation.\n\nThe Swift for TensorFlow community is guided by our [Code of\nConduct](CODE_OF_CONDUCT.md), which we encourage everybody to read before\nparticipating.\n'