b".. image:: https://github.com/skorch-dev/skorch/blob/master/assets/skorch.svg\n   :width: 30%\n\n------------\n\n|build| |coverage| |docs| |powered|\n\nA scikit-learn compatible neural network library that wraps PyTorch.\n\n.. |build| image:: https://api.travis-ci.org/skorch-dev/skorch.svg?branch=master\n    :alt: Build Status\n    :scale: 100%\n    :target: https://travis-ci.org/skorch-dev/skorch?branch=master\n\n.. |coverage| image:: https://github.com/skorch-dev/skorch/blob/master/assets/coverage.svg\n    :alt: Test Coverage\n    :scale: 100%\n\n.. |docs| image:: https://readthedocs.org/projects/skorch/badge/?version=latest\n    :alt: Documentation Status\n    :scale: 100%\n    :target: https://skorch.readthedocs.io/en/latest/?badge=latest\n\n.. |powered| image:: https://github.com/skorch-dev/skorch/blob/master/assets/powered.svg\n    :alt: Powered by\n    :scale: 100%\n    :target: https://github.com/ottogroup/\n\n=========\nResources\n=========\n\n- `Documentation <https://skorch.readthedocs.io/en/latest/?badge=latest>`_\n- `Source Code <https://github.com/skorch-dev/skorch/>`_\n\n========\nExamples\n========\n\nTo see more elaborate examples, look `here\n<https://github.com/skorch-dev/skorch/tree/master/notebooks/README.md>`__.\n\n.. code:: python\n\n    import numpy as np\n    from sklearn.datasets import make_classification\n    from torch import nn\n    import torch.nn.functional as F\n\n    from skorch import NeuralNetClassifier\n\n\n    X, y = make_classification(1000, 20, n_informative=10, random_state=0)\n    X = X.astype(np.float32)\n    y = y.astype(np.int64)\n\n    class MyModule(nn.Module):\n        def __init__(self, num_units=10, nonlin=F.relu):\n            super(MyModule, self).__init__()\n\n            self.dense0 = nn.Linear(20, num_units)\n            self.nonlin = nonlin\n            self.dropout = nn.Dropout(0.5)\n            self.dense1 = nn.Linear(num_units, 10)\n            self.output = nn.Linear(10, 2)\n\n        def forward(self, X, **kwargs):\n            X = self.nonlin(self.dense0(X))\n            X = self.dropout(X)\n            X = F.relu(self.dense1(X))\n            X = F.softmax(self.output(X), dim=-1)\n            return X\n\n\n    net = NeuralNetClassifier(\n        MyModule,\n        max_epochs=10,\n        lr=0.1,\n        # Shuffle training data on each epoch\n        iterator_train__shuffle=True,\n    )\n\n    net.fit(X, y)\n    y_proba = net.predict_proba(X)\n\nIn an sklearn Pipeline:\n\n.. code:: python\n\n    from sklearn.pipeline import Pipeline\n    from sklearn.preprocessing import StandardScaler\n\n\n    pipe = Pipeline([\n        ('scale', StandardScaler()),\n        ('net', net),\n    ])\n\n    pipe.fit(X, y)\n    y_proba = pipe.predict_proba(X)\n\nWith grid search\n\n.. code:: python\n\n    from sklearn.model_selection import GridSearchCV\n\n\n    params = {\n        'lr': [0.01, 0.02],\n        'max_epochs': [10, 20],\n        'module__num_units': [10, 20],\n    }\n    gs = GridSearchCV(net, params, refit=False, cv=3, scoring='accuracy')\n\n    gs.fit(X, y)\n    print(gs.best_score_, gs.best_params_)\n\nskorch also provides many convenient features, among others:\n\n- `Learning rate schedulers <https://skorch.readthedocs.io/en/stable/callbacks.html#skorch.callbacks.LRScheduler>`_ (Warm restarts, cyclic LR and many more)\n- `Scoring using sklearn (and custom) scoring functions <https://skorch.readthedocs.io/en/stable/callbacks.html#skorch.callbacks.EpochScoring>`_\n- `Early stopping <https://skorch.readthedocs.io/en/stable/callbacks.html#skorch.callbacks.EarlyStopping>`_\n- `Checkpointing <https://skorch.readthedocs.io/en/stable/callbacks.html#skorch.callbacks.Checkpoint>`_\n- `Parameter freezing/unfreezing <https://skorch.readthedocs.io/en/stable/callbacks.html#skorch.callbacks.Freezer>`_\n- `Progress bar <https://skorch.readthedocs.io/en/stable/callbacks.html#skorch.callbacks.ProgressBar>`_ (for CLI as well as jupyter)\n- `Automatic inference of CLI parameters <https://github.com/skorch-dev/skorch/tree/master/examples/cli>`_\n\n============\nInstallation\n============\n\nskorch requires Python 3.5 or higher.\n\npip installation\n================\n\nTo install with pip, run:\n\n.. code:: bash\n\n    pip install -U skorch\n\nWe recommend to use a virtual environment for this.\n\nFrom source\n===========\n\nIf you would like to use the must recent additions to skorch or\nhelp development, you should install skorch from source:\n\n.. code:: bash\n\n    git clone https://github.com/skorch-dev/skorch.git\n    cd skorch\n    # install pytorch version for your system (see below)\n    python setup.py install\n\nUsing conda\n===========\n\nYou need a working conda installation. Get the correct miniconda for\nyour system from `here <https://conda.io/miniconda.html>`__.\n\nYou can also install skorch through the conda-forge channel. \nThe instructions for doing so are \navailable `here <https://github.com/conda-forge/skorch-feedstock>`__.\n**Note**: The conda channel is _not_ managed by the skorch maintainers.\n\nIf you do not want to use conda-forge, you may install skorch using:\n\n.. code:: bash\n\n    git clone https://github.com/skorch-dev/skorch.git\n    cd skorch\n    conda env create\n    source activate skorch\n    # install pytorch version for your system (see below)\n    python setup.py install\n\nIf you want to help developing, run:\n\n.. code:: bash\n\n    git clone https://github.com/skorch-dev/skorch.git\n    cd skorch\n    conda env create\n    source activate skorch\n    # install pytorch version for your system (see below)\n    conda install -c conda-forge --file requirements-dev.txt\n    python setup.py develop\n\n    py.test  # unit tests\n    pylint skorch  # static code checks\n\nUsing pip\n=========\n\nIf you just want to use skorch, use:\n\n.. code:: bash\n\n    git clone https://github.com/skorch-dev/skorch.git\n    cd skorch\n    # create and activate a virtual environment\n    pip install -r requirements.txt\n    # install pytorch version for your system (see below)\n    python setup.py install\n\nIf you want to help developing, run:\n\n.. code:: bash\n\n    git clone https://github.com/skorch-dev/skorch.git\n    cd skorch\n    # create and activate a virtual environment\n    pip install -r requirements.txt\n    # install pytorch version for your system (see below)\n    pip install -r requirements-dev.txt\n    python setup.py develop\n\n    py.test  # unit tests\n    pylint skorch  # static code checks\n\nPyTorch\n=======\n\nPyTorch is not covered by the dependencies, since the PyTorch version\nyou need is dependent on your system. For installation instructions\nfor PyTorch, visit the `PyTorch website <http://pytorch.org/>`__. The\ncurrent version of skorch assumes PyTorch >= 1.1.0.\n\nIn general, this should work (assuming CUDA 9):\n\n.. code:: bash\n\n    # using conda:\n    conda install pytorch cudatoolkit=9.0 -c pytorch\n    # using pip\n    pip install torch\n\n=============\nCommunication\n=============\n\n- `GitHub issues <https://github.com/skorch-dev/skorch/issues>`_: bug\n  reports, feature requests, install issues, RFCs, thoughts, etc.\n\n- Slack: We run the #skorch channel on the `PyTorch Slack server\n  <https://pytorch.slack.com/>`_, for which you can `request access\n  here <https://bit.ly/ptslack>`_.\n"