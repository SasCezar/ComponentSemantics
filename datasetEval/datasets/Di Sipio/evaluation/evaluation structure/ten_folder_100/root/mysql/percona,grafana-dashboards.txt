b'## Grafana dashboards for MySQL and MongoDB monitoring using Prometheus [![Build Status](https://travis-ci.org/percona/grafana-dashboards.svg?branch=master)](https://travis-ci.org/percona/grafana-dashboards)[![CLA assistant](https://cla-assistant.percona.com/readme/badge/percona/grafana-dashboards)](https://cla-assistant.percona.com/percona/grafana-dashboards)\n\nThis is a set of Grafana dashboards for database and system monitoring using Prometheus datasource.\n\n * Amazon RDS OS metrics (CloudWatch datasource)\n * Cross Server Graphs\n * Disk Performance\n * Disk Space\n * MongoDB Cluster Summary\n * MongoDB Overview\n * MongoDB ReplSet\n * MongoDB RocksDB\n * MongoDB WiredTiger\n * MongoDB MMAPv1\n * MongoDB InMemory\n * MySQL InnoDB Metrics\n * MySQL InnoDB Metrics Advanced\n * MySQL InnoDB Compression\n * MySQL MyISAM/Aria Metrics\n * MySQL Overview\n * MySQL Performance Schema\n * MySQL Query Response Time\n * MySQL Replication\n * MySQL Table Statistics\n * MySQL TokuDB Graphs\n * MySQL User Statistics\n * MySQL Command Handler Counters Compare\n * PXC/Galera Cluster Overview\n * PXC/Galera Graphs\n * Prometheus\n * ProxySQL Overview\n * Summary Dashboard\n * System Overview\n * Trends Dashboard\n\nThese dashboards are also a part of [Percona Monitoring and Management](https://www.percona.com/doc/percona-monitoring-and-management/index.html) project.\n\nLive demo is available at https://pmmdemo.percona.com/graph/\n\n### Setup instructions\n\n#### Add datasource in Grafana\n\nThe datasource should be named `Prometheus` so it is automatically picked up by the graphs.\n\n![image](assets/datasource.png)\n\n#### Prometheus config\n\nThe dashboards use built-in `instance` label to filter on individual hosts.\nIt is recommended you give the good names to your instances. Here is some example:\n\n    scrape_configs:\n      - job_name: prometheus\n        static_configs:\n          - targets: [\'localhost:9090\']\n            labels:\n              instance: prometheus\n\n      - job_name: linux\n        static_configs:\n          - targets: [\'192.168.1.7:9100\']\n            labels:\n              instance: db1\n\n      - job_name: mysql\n        static_configs:\n          - targets: [\'192.168.1.7:9104\']\n            labels:\n              instance: db1\n\nHow you name jobs is not important. However, "Prometheus" dashboard assumes the job name is `prometheus`.\n\n#### Exporter options\n\nHere is the minimal set of options for the exporters:\n\n * node_exporter: `-collectors.enabled="diskstats,filefd,filesystem,loadavg,meminfo,netdev,stat,time,uname,vmstat"`\n * mysqld_exporter: `-collect.binlog_size=true -collect.info_schema.processlist=true`\n * mongodb_exporter: the defaults are fine.\n\n#### Edit Grafana config\n\nEnable JSON dashboards by uncommenting those lines in `grafana.ini`:\n\n    [dashboards.json]\n    enabled = true\n    path = /var/lib/grafana/dashboards\n\nIf you wish you may import the individual dashboards via UI and ignore this and the next two steps.\n\n#### Install dashboards\n\n    git clone https://github.com/percona/grafana-dashboards.git\n    cp -r grafana-dashboards/dashboards /var/lib/grafana/\n\n#### Restart Grafana\n\n    service grafana-server restart\n\n#### Apply patch (only Grafana 3.x)\n\nIf you are using Grafana 3.x you need to apply a small patch on your installation to allow the interval template variable in `Step` field of graph editor page\nto get the good zoomable graphs. For more information, take a look at [PR#5839](https://github.com/grafana/grafana/pull/5839).\n\n    sed -i \'s/expr=\\(.\\)\\.replace(\\(.\\)\\.expr,\\(.\\)\\.scopedVars\\(.*\\)var \\(.\\)=\\(.\\)\\.interval/expr=\\1.replace(\\2.expr,\\3.scopedVars\\4var \\5=\\1.replace(\\6.interval, \\3.scopedVars)/\' /usr/share/grafana/public/app/plugins/datasource/prometheus/datasource.js\n    sed -i \'s/,range_input/.replace(\\/"{\\/g,"\\\\"").replace(\\/}"\\/g,"\\\\""),range_input/; s/step_input:""/step_input:this.target.step/\' /usr/share/grafana/public/app/plugins/datasource/prometheus/query_ctrl.js\n\n### Update instructions\n\nSimply copy the new dashboards to `/var/lib/grafana/dashboards` and restart Grafana or re-import them.\n\n### Graph samples\n\nHere is some sample graphs.\n\n![image](assets/sample1.png)\n\n![image](assets/sample2.png)\n\n![image](assets/sample3.png)\n\n![image](assets/sample4.png)\n\n![image](assets/sample5.png)\n\n![image](assets/sample6.png)\n\n![image](assets/sample7.png)\n\n![image](assets/sample8.png)\n\n\n## Submitting Bug Reports\n\nIf you find a bug in Percona Grafana Dashboards  or one of the related projects, you should submit a report to that project\'s [JIRA](https://jira.percona.com) issue tracker.\n\nYour first step should be [to search](https://jira.percona.com/issues/?jql=project%20%3D%20PMM%20AND%20component%20%3D%20%22Grafana%20Dashboards%22) the existing set of open tickets for a similar report. If you find that someone else has already reported your problem, then you can upvote that report to increase its visibility.\n\nIf there is no existing report, submit a report following these steps:\n\n1. [Sign in to Percona JIRA.](https://jira.percona.com/login.jsp) You will need to create an account if you do not have one.\n2. [Go to the Create Issue screen and select the relevant project.](https://jira.percona.com/secure/CreateIssueDetails!init.jspa?pid=11600&issuetype=1&priority=3&components=11307)\n3. Fill in the fields of Summary, Description, Steps To Reproduce, and Affects Version to the best you can. If the bug corresponds to a crash, attach the stack trace from the logs.\n\nAn excellent resource is [Elika Etemad\'s article on filing good bug reports.](http://fantasai.inkedblade.net/style/talks/filing-good-bugs/).\n\nAs a general rule of thumb, please try to create bug reports that are:\n\n- *Reproducible.* Include steps to reproduce the problem.\n- *Specific.* Include as much detail as possible: which version, what environment, etc.\n- *Unique.* Do not duplicate existing tickets.\n- *Scoped to a Single Bug.* One bug per report.\n\n'