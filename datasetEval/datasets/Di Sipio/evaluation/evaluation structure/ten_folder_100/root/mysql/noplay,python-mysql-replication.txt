b'python-mysql-replication\n========================\n\n<a href="https://travis-ci.org/noplay/python-mysql-replication"><img src="https://travis-ci.org/noplay/python-mysql-replication.svg?branch=master"></a>&nbsp;\n<a href="https://pypi.python.org/pypi/mysql-replication"><img src="http://img.shields.io/pypi/dm/mysql-replication.svg"></a>\n\nPure Python Implementation of MySQL replication protocol build on top of PyMYSQL. This allow you to receive event like insert, update, delete with their datas and raw SQL queries.\n\nUse cases\n===========\n\n* MySQL to NoSQL database replication\n* MySQL to search engine replication\n* Invalidate cache when something change in database\n* Audit\n* Real time analytics\n\nDocumentation\n==============\n\nA work in progress documentation is available here: https://python-mysql-replication.readthedocs.org/en/latest/\n\nInstruction about building documentation is available here:\nhttps://python-mysql-replication.readthedocs.org/en/latest/developement.html\n\n\nInstallation\n=============\n\n```\npip install mysql-replication\n```\n\nMailing List\n==============\n\nYou can get support and discuss about new features on:\nhttps://groups.google.com/d/forum/python-mysql-replication\n\n\n\nProject status\n================\n\nThe project is test with:\n* MySQL 5.5, 5.6 and 5.7\n* Python >= 2.7\n* Python 3.3, 3.4, 3.5 and 3.6 (3.2 is not supported)\n* PyPy (really faster than the standard Python interpreter)\n\nThe project is used in production for critical stuff in some\nmedium internet corporations. But all use case as not\nbeen perfectly test in the real world.\n\nLimitations\n=============\n\nhttps://python-mysql-replication.readthedocs.org/en/latest/limitations.html\n\nProjects using this library\n===========================\n\n* pg_chameleon: Migration and replica from MySQL to PostgreSQL https://github.com/the4thdoctor/pg_chameleon\n* Yelp Data Pipeline: https://engineeringblog.yelp.com/2016/11/open-sourcing-yelps-data-pipeline.html\n* Singer.io Tap for MySQL (https://github.com/singer-io/tap-mysql)\n* MySQL River Plugin for ElasticSearch: https://github.com/scharron/elasticsearch-river-mysql\n* Ditto: MySQL to MemSQL replicator https://github.com/memsql/ditto\n* ElasticMage: Full Magento integration with ElasticSearch https://github.com/ElasticMage/elasticmage\n* Cache buster: an automatic cache invalidation system https://github.com/rackerlabs/cache-busters\n* Zabbix collector for OpenTSDB https://github.com/OpenTSDB/tcollector/blob/master/collectors/0/zabbix_bridge.py\n* Meepo: Event sourcing and event broadcasting for datebases. https://github.com/eleme/meepo\n* Python MySQL Replication Blinker: This package read events from MySQL binlog and send to blinker\'s signal. https://github.com/tarzanjw/python-mysql-replication-blinker\n* aiomysql_replication: Fork supporting asyncio https://github.com/jettify/aiomysql_replication\n* python-mysql-eventprocessor: Daemon interface for handling MySQL binary log events. https://github.com/jffifa/python-mysql-eventprocessor\n* mymongo: MySQL to mongo replication https://github.com/njordr/mymongo\n* pg_ninja: The ninja elephant obfuscation and replica tool https://github.com/transferwise/pg_ninja/ (http://tech.transferwise.com/pg_ninja-replica-with-obfuscation/)\n* MySQLStreamer: MySQLStreamer is a database change data capture and publish system https://github.com/Yelp/mysql_streamer\n* binlog2sql: a popular binlog parser that could convert raw binlog to sql and also could generate flashback sql from raw binlog (https://github.com/danfengcao/binlog2sql)\n* Streaming mysql binlog replication to Snowflake/Redshift/BigQuery (https://github.com/trainingrocket/mysql-binlog-replication)\n* MySQL to Kafka (https://github.com/scottpersinger/mysql-to-kafka/)\n* Aventri MySQL Monitor (https://github.com/aventri/mysql-monitor)\n\nMySQL server settings\n=========================\n\nIn your MySQL server configuration file you need to enable replication:\n\n    [mysqld]\n    server-id\t\t = 1\n    log_bin\t\t\t = /var/log/mysql/mysql-bin.log\n    expire_logs_days = 10\n    max_binlog_size  = 100M\n    binlog-format    = row #Very important if you want to receive write, update and delete row events\n\nExamples\n=========\n\nAll examples are available in the [examples directory](https://github.com/noplay/python-mysql-replication/tree/master/examples)\n\n\nThis example will dump all replication events to the console:\n\n```python\nfrom pymysqlreplication import BinLogStreamReader\n\nmysql_settings = {\'host\': \'127.0.0.1\', \'port\': 3306, \'user\': \'root\', \'passwd\': \'\'}\n\nstream = BinLogStreamReader(connection_settings = mysql_settings, server_id=100)\n\nfor binlogevent in stream:\n    binlogevent.dump()\n\nstream.close()\n```\n\nFor this SQL sessions:\n\n```sql\nCREATE DATABASE test;\nuse test;\nCREATE TABLE test4 (id int NOT NULL AUTO_INCREMENT, data VARCHAR(255), data2 VARCHAR(255), PRIMARY KEY(id));\nINSERT INTO test4 (data,data2) VALUES ("Hello", "World");\nUPDATE test4 SET data = "World", data2="Hello" WHERE id = 1;\nDELETE FROM test4 WHERE id = 1;\n```\n\nOutput will be:\n\n    === RotateEvent ===\n    Date: 1970-01-01T01:00:00\n    Event size: 24\n    Read bytes: 0\n\n    === FormatDescriptionEvent ===\n    Date: 2012-10-07T15:03:06\n    Event size: 84\n    Read bytes: 0\n\n    === QueryEvent ===\n    Date: 2012-10-07T15:03:16\n    Event size: 64\n    Read bytes: 64\n    Schema: test\n    Execution time: 0\n    Query: CREATE DATABASE test\n\n    === QueryEvent ===\n    Date: 2012-10-07T15:03:16\n    Event size: 151\n    Read bytes: 151\n    Schema: test\n    Execution time: 0\n    Query: CREATE TABLE test4 (id int NOT NULL AUTO_INCREMENT, data VARCHAR(255), data2 VARCHAR(255), PRIMARY KEY(id))\n\n    === QueryEvent ===\n    Date: 2012-10-07T15:03:16\n    Event size: 49\n    Read bytes: 49\n    Schema: test\n    Execution time: 0\n    Query: BEGIN\n\n    === TableMapEvent ===\n    Date: 2012-10-07T15:03:16\n    Event size: 31\n    Read bytes: 30\n    Table id: 781\n    Schema: test\n    Table: test4\n    Columns: 3\n\n    === WriteRowsEvent ===\n    Date: 2012-10-07T15:03:16\n    Event size: 27\n    Read bytes: 10\n    Table: test.test4\n    Affected columns: 3\n    Changed rows: 1\n    Values:\n    --\n    * data : Hello\n    * id : 1\n    * data2 : World\n\n    === XidEvent ===\n    Date: 2012-10-07T15:03:16\n    Event size: 8\n    Read bytes: 8\n    Transaction ID: 14097\n\n    === QueryEvent ===\n    Date: 2012-10-07T15:03:17\n    Event size: 49\n    Read bytes: 49\n    Schema: test\n    Execution time: 0\n    Query: BEGIN\n\n    === TableMapEvent ===\n    Date: 2012-10-07T15:03:17\n    Event size: 31\n    Read bytes: 30\n    Table id: 781\n    Schema: test\n    Table: test4\n    Columns: 3\n\n    === UpdateRowsEvent ===\n    Date: 2012-10-07T15:03:17\n    Event size: 45\n    Read bytes: 11\n    Table: test.test4\n    Affected columns: 3\n    Changed rows: 1\n    Affected columns: 3\n    Values:\n    --\n    * data : Hello => World\n    * id : 1 => 1\n    * data2 : World => Hello\n\n    === XidEvent ===\n    Date: 2012-10-07T15:03:17\n    Event size: 8\n    Read bytes: 8\n    Transaction ID: 14098\n\n    === QueryEvent ===\n    Date: 2012-10-07T15:03:17\n    Event size: 49\n    Read bytes: 49\n    Schema: test\n    Execution time: 1\n    Query: BEGIN\n\n    === TableMapEvent ===\n    Date: 2012-10-07T15:03:17\n    Event size: 31\n    Read bytes: 30\n    Table id: 781\n    Schema: test\n    Table: test4\n    Columns: 3\n\n    === DeleteRowsEvent ===\n    Date: 2012-10-07T15:03:17\n    Event size: 27\n    Read bytes: 10\n    Table: test.test4\n    Affected columns: 3\n    Changed rows: 1\n    Values:\n    --\n    * data : World\n    * id : 1\n    * data2 : Hello\n\n    === XidEvent ===\n    Date: 2012-10-07T15:03:17\n    Event size: 8\n    Read bytes: 8\n    Transaction ID: 14099\n\n\nTests\n========\nWhen it\'s possible we have a unit test.\n\nMore information is available here:\nhttps://python-mysql-replication.readthedocs.org/en/latest/developement.html\n\nChangelog\n==========\nhttps://github.com/noplay/python-mysql-replication/blob/master/CHANGELOG\n\nSimilar projects\n==================\n* Kodoma: Ruby-binlog based MySQL replication listener https://github.com/y310/kodama\n* MySQL Hadoop Applier: C++ version http://dev.mysql.com/tech-resources/articles/mysql-hadoop-applier.html\n* Java: https://github.com/shyiko/mysql-binlog-connector-java\n* GO: https://github.com/siddontang/go-mysql\n* PHP: Based on this this project https://github.com/krowinski/php-mysql-replication and https://github.com/fengxiangyun/mysql-replication \n\nSpecial thanks\n================\n* MySQL binlog from Jeremy Cole was a great source of knowledge about MySQL replication protocol https://github.com/jeremycole/mysql_binlog\n* Samuel Charron for his help https://github.com/scharron\n\nContributors\n==============\n\nMajor contributor:\n* Julien Duponchelle Original author https://github.com/noplay\n* bjoernhaeuser for his bugs fixing, improvements and community support https://github.com/bjoernhaeuser\n* Arthur Gautier gtid, slave report...  https://github.com/baloo\n\nOther contributors:\n* Dvir Volk for bug fix https://github.com/dvirsky\n* Lior Sion code cleanup and improvements https://github.com/liorsion\n* Lx Yu code improvements, primary keys detections https://github.com/lxyu\n* Young King for pymysql 0.6 support https://github.com/youngking\n* David Reid checksum checking fix https://github.com/dreid\n* Alex Gaynor fix smallint24 https://github.com/alex\n* lifei NotImplementedEvent https://github.com/lifei\n* Maralla Python 3.4 fix https://github.com/maralla\n* Daniel Gavrila more MySQL error codes https://github.com/danielduduta\n* Bernardo Sulzbach code cleanup https://github.com/mafagafogigante\n* Darioush Jalali Python 2.6 backport https://github.com/darioush\n* Jasonz bug fixes https://github.com/jasonzzz\n* Bartek Ogryczak cleanup and improvements https://github.com/vartec\n* Wang, Xiaozhe cleanup https://github.com/chaoslawful\n* siddontang improvements https://github.com/siddontang\n* Cheng Chen Python 2.6 compatibility https://github.com/cccc1999\n* Jffifa utf8mb4 compatibility https://github.com/jffifa\n* Romuald Brunet bug fixes https://github.com/romuald\n* C\xc3\xa9dric Hourcade Don\'t fail on incomplete dates https://github.com/hc\n* Giacomo Lozito Explicit close stream connection on exception https://github.com/giacomolozito\n* Giovanni F. MySQL 5.7 support https://github.com/26fe\n* Igor Mastak intvar event https://github.com/mastak\n* Xie Zhenye fix missing update _next_seq_no https://github.com/xiezhenye\n* Abrar Sheikh: Multiple contributions https://github.com/abrarsheikh\n* Keegan Parker: secondary database for reference schema https://github.com/kdparker\n* Troy J. Farrell Clear table_map if RotateEvent has timestamp of 0 https://github.com/troyjfarrell\n* Zhanwei Wang Fail to get table informations https://github.com/wangzw\n\nThanks to GetResponse for their support\n\nLicence\n=======\nCopyright 2012-2017 Julien Duponchelle\n\nLicensed under the Apache License, Version 2.0 (the "License");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an "AS IS" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n\n'