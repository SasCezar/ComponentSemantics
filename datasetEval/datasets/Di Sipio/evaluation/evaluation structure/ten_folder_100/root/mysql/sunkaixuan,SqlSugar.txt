b'# SqlSugar 5.X  API \n\nUsing SqlSugar is very simple ,And it\'s powerful.\n\nSqlSugar=One object+One parameter=16 functions,\n\nSupport\xef\xbc\x9aMySql\xe3\x80\x81SqlServer\xe3\x80\x81Sqlite\xe3\x80\x81Oracle \xe3\x80\x81 postgresql \n## Contactinfomation  \nEmail:610262374@qq.com \nQQ Group:225982985\n\n## Nuget \n\n|.net |.net core |\n|---------| ---------|\n|Install-Package sqlSugar |Install-Package sqlSugarCore|\n \n## SqlSugar\'s 16 Functions\nThere are 16 methods under SqlSugarClient\n![\xe8\xbe\x93\xe5\x85\xa5\xe5\x9b\xbe\xe7\x89\x87\xe8\xaf\xb4\xe6\x98\x8e](http://www.codeisbug.com/_theme/ueditor/utf8-net/net/upload/image/20190430/6369224056499802674782957.jpg?id=11 "sqlsugar")\n \n \n\n## Create SqlSugarClient\nAll operations are based on SqlSugarClient\n\nSqlSugarClient parameter and only one ConnectionConfig\n```cs\npublic  List<Student> GetStudentList()\n{\n    var db= GetInstance();\n    var list= db.Queryable<Student>().ToList();//Search\n    return list;\n}\n\n/// <summary>\n/// Create SqlSugarClient\n/// </summary>\n/// <returns></returns>\nprivate SqlSugarClient GetInstance()\n{\n    SqlSugarClient db = new SqlSugarClient(new ConnectionConfig()\n        {\n            ConnectionString = "Server=.xxxxx",\n            DbType = DbType.SqlServer,\n            IsAutoCloseConnection = true,\n            InitKeyType = InitKeyType.Attribute\n        });\n    //Print sql\n    db.Aop.OnLogExecuting = (sql, pars) =>\n    {\n        Console.WriteLine(sql + "\\r\\n" + db.Utilities.SerializeObject(pars.ToDictionary(it => it.ParameterName, it => it.Value)));\n        Console.WriteLine();\n    };\n    return db;\n}\n\npublic class Student\n{\n    [SugarColumn(IsPrimaryKey = true, IsIdentity = true]\n    public int Id { get; set; }\n    public int? SchoolId { get; set; }\n    public string Name { get; set; }\n}\n```\n  [<font color=red>View more >> </font>](https://github.com/sunkaixuan/SqlSugar/wiki/0.SqlSugarClient) \n \n\n##  1. Queryable\nWe use it to query\n ![\xe8\xbe\x93\xe5\x85\xa5\xe5\x9b\xbe\xe7\x89\x87\xe8\xaf\xb4\xe6\x98\x8e](http://www.codeisbug.com/_theme/ueditor/utf8-net/net/upload/image/20190502/6369240932997363035197459.png?id=1 "Queryable")\n \n##### Here are some examples\n```cs\n//easy\nvar getAll = db.Queryable<Student>().ToList();\nvar getAllNoLock = db.Queryable<Student>().With(SqlWith.NoLock).ToList();\nvar getByPrimaryKey = db.Queryable<Student>().InSingle(2);\nvar sum = db.Queryable<Student>().Sum(it=>it.Id);\nvar isAny = db.Queryable<Student>().Where(it=>it.Id==-1).Any();\nvar isAny2 = db.Queryable<Student>().Any(it => it.Id == -1);\nvar getListByRename = db.Queryable<School>().AS("Student").ToList();\nvar getByWhere = db.Queryable<Student>().Where(it => it.Id == 1 || it.Name == "a").ToList();\nvar getByFuns = db.Queryable<Student>().Where(it => SqlFunc.IsNullOrEmpty(it.Name)).ToList();\nvar group = db.Queryable<Student>().GroupBy(it => it.Id).Select(it =>new { id = SqlFunc.AggregateCount(it.Id) }).ToList();\n\n//Page\nvar page = db.Queryable<Student>().ToPageList(pageIndex, pageSize, ref totalCount);\n\n//page join\nvar pageJoin = db.Queryable<Student, School>((st, sc) =>new JoinQueryInfos(JoinType.Left,st.SchoolId==sc.Id))\n.ToPageList(pageIndex, pageSize, ref totalCount);\n\n//top 5\nvar top5 = db.Queryable<Student>().Take(5).ToList();\n\n//join Order By (order by st.id desc,sc.id desc)\nvar list4 = db.Queryable<Student, School>((st, sc) =>new  JoinQueryInfos(JoinType.Left,st.SchoolId==sc.Id))\n.OrderBy(st=>st.Id,OrderByType.Desc)\n.OrderBy((st,sc)=>sc.Id,OrderByType.Desc)\n.Select<ViewModelStudent>().ToList();\n\n```\n[<font color=red>View more >> </font>](https://github.com/sunkaixuan/SqlSugar/wiki/1.Queryable) \n \n\n\n ##  2. Updateable\nWe use it to Update\n ```cs\n//update reutrn Update Count\nvar t1= db.Updateable(updateObj).ExecuteCommand();\n\n//Only  update  Name \nvar t3 = db.Updateable(updateObj).UpdateColumns(it => new { it.Name }).ExecuteCommand();\n\n//Ignore  Name and TestId\nvar t4 = db.Updateable(updateObj).IgnoreColumns(it => new { it.Name, it.TestId }).ExecuteCommand();\n\n//update List<T>\nvar t7 = db.Updateable(updateObjs).ExecuteCommand();\n\n//Where By Expression\nvar t9 = db.Updateable(it=>new class() { name="a",createtime=p }).Where(it => it.Id == 1).ExecuteCommand();\n\n ```\n [<font color=red>View more >> </font>](https://github.com/sunkaixuan/SqlSugar/wiki/2.Updateable) \n\n \n##  3. Insertable\nWe use it to Insert\n ```cs\n//Insert reutrn Insert Count\nvar t2 = db.Insertable(insertObj).ExecuteCommand();\n\n//Insert reutrn Identity Value\nvar t3 = db.Insertable(insertObj).ExecuteReutrnIdentity();\n\n//Only  insert  Name \nvar t4 = db.Insertable(insertObj).InsertColumns(it => new { it.Name,it.SchoolId }).ExecuteReutrnIdentity();\n\n//Ignore TestId\nvar t5 = db.Insertable(insertObj).IgnoreColumns(it => new { it.Name, it.TestId }).ExecuteReutrnIdentity();\n\n//Insert List<T>\nvar s9 = db.Insertable(insertObjs).InsertColumns(it => new { it.Name }).ExecuteCommand();\n```\n [<font color=red>View more >> </font>](https://github.com/sunkaixuan/SqlSugar/wiki/3.Insertable) \n \n##  4. Deleteable\nWe use it to Delete\n\n ```cs\n //by entity\ndb.Deleteable<Student>().Where(new Student() { Id = 1 }).ExecuteCommand();\n\n//by primary key\ndb.Deleteable<Student>().In(1).ExecuteCommand();\n\n//by primary key array\ndb.Deleteable<Student>().In(new int[] { 1, 2 }).ExecuteCommand();\n\n//by expression\ndb.Deleteable<Student>().Where(it => it.Id == 1).ExecuteCommand();\n\n ```\n [<font color=red>View more >> </font>](https://github.com/sunkaixuan/SqlSugar/wiki/4.Deleteable ) \n\n\n ##  5. SqlQueryable\n```cs\nvar list = db.SqlQueryable<Student>("select * from student").ToPageList(1, 2);\nvar list2 = db.SqlQueryable<Student>("select * from student").Where(it=>it.Id==1).ToPageList(1, 2);\nvar list3= db.SqlQueryable<Student>("select * from student").Where("id=@id",new { id=1}).ToPageList(1, 2);\n``` \n[<font color=red>View more >> </font>](https://github.com/sunkaixuan/SqlSugar/wiki/5.SqlQueryable ) \n \n  ##  6. SaveQueues\n  Perform multiple operations together with transactions\n```cs\nvar db = GetInstance();\ndb.Insertable<Student>(new Student() { Name = "a" }).AddQueue();\ndb.Insertable<Student>(new Student() { Name = "b" }).AddQueue();\ndb.SaveQueues(); \n\ndb.Insertable<Student>(new Student() { Name = "a" }).AddQueue();\ndb.Insertable<Student>(new Student() { Name = "b" }).AddQueue();\ndb.Insertable<Student>(new Student() { Name = "c" }).AddQueue();\ndb.Insertable<Student>(new Student() { Name = "d" }).AddQueue();\nvar ar = db.SaveQueuesAsync(); \n\ndb.Queryable<Student>().AddQueue();\ndb.Queryable<School>().AddQueue();\ndb.AddQueue("select * from student where id=@id", new { id = 1 }); \nvar result2 = db.SaveQueues<Student, School, Student>();  \n```\n[<font color=red>View more >> </font>](https://github.com/sunkaixuan/SqlSugar/wiki/6.queue ) \n\n\n##  7.Ado\ndb.Ado.MethodName\xef\xbc\x8cLook at the following example\n```cs\nvar dt=db.Ado.GetDataTable("select * from table where id=@id and name=@name",new List<SugarParameter>(){\n  new SugarParameter("@id",1),\n  new SugarParameter("@name",2)\n});\nvar dt=db.Ado.GetDataTable("select * from table where id=@id and name=@name",new{id=1,name=2});\n\n//Use Stored Procedure\nvar dt2 = db.Ado.UseStoredProcedure().GetDataTable("sp_school",new{name="\xe5\xbc\xa0\xe4\xb8\x89",age=0});//  GetInt SqlQuery<T>  \xe7\xad\x89\xe7\xad\x89\xe9\x83\xbd\xe5\x8f\xaf\xe4\xbb\xa5\xe7\x94\xa8\nvar nameP= new SugarParameter("@name", "\xe5\xbc\xa0\xe4\xb8\x89");\nvar ageP= new SugarParameter("@age", null, true);//isOutput=true\nvar dt2 = db.Ado.UseStoredProcedure().GetDataTable("sp_school",nameP,ageP);\n```\n [<font color=red>View more >> </font>](https://github.com/sunkaixuan/SqlSugar/wiki/7.ado ) \n \n ##  8.Saveable\n Insert or Update\n```cs\ndb.Saveable<Student>(entity).ExecuteReturnEntity();\ndb.Saveable<Student>(new Student() { Name = "" })\n                  .InsertColumns(it=>it.Name)\n                  .UpdateColumns(it=>new { it.Name,it.CreateTime }\n                  .ExecuteReturnEntity();\n\n```\n[<font color=red>View more >> </font>](https://github.com/sunkaixuan/SqlSugar/wiki/8.saveable ) \n \n  ##  9.EntityMain\n  ```cs\nvar entityInfo=db.EntityMaintenance.GetEntityInfo<Student>();\nforeach (var column in entityInfo.Columns)\n{\n    Console.WriteLine(column.ColumnDescription);\n}\n```\n[<font color=red>View more >> </font>](https://github.com/sunkaixuan/SqlSugar/wiki/9.entityMain ) \n\n  ##  10.DbMain\n   ```cs\n  var tables = db.DbMaintenance.GetTableInfoList();\n  foreach (var table in tables)\n  {\n        Console.WriteLine(table.Description);\n  }\n  ```\n  [<font color=red>View more >> </font>](https://github.com/sunkaixuan/SqlSugar/wiki/a.DbMain ) \n  \n\n  ##  11.Aop\n  ```cs\ndb.Aop.OnLogExecuted\xc2\xa0=\xc2\xa0(sql,\xc2\xa0pars)\xc2\xa0=>\xc2\xa0//SQL executed event\n{\n\xc2\xa0\n};\ndb.Aop.OnLogExecuting\xc2\xa0=\xc2\xa0(sql,\xc2\xa0pars)\xc2\xa0=>\xc2\xa0//SQL executing event (pre-execution)\n{\n\xc2\xa0\n};\ndb.Aop.OnError\xc2\xa0=\xc2\xa0(exp)\xc2\xa0=>//SQL execution error event\n{\n\xc2\xa0\xc2\xa0\xc2\xa0\xc2\xa0\xc2\xa0\xc2\xa0\xc2\xa0\xc2\xa0\xc2\xa0\xc2\xa0\xc2\xa0\xc2\xa0\xc2\xa0\xc2\xa0\xc2\xa0\xc2\xa0\xc2\xa0\n};\ndb.Aop.OnExecutingChangeSql\xc2\xa0=\xc2\xa0(sql,\xc2\xa0pars)\xc2\xa0=>\xc2\xa0//SQL executing event (pre-execution,SQL script can be modified)\n{\n\xc2\xa0\xc2\xa0\xc2\xa0\xc2\xa0return\xc2\xa0new\xc2\xa0KeyValuePair<string,\xc2\xa0SugarParameter[]>(sql,pars);\n};\n\n```\n  [<font color=red>View more >> </font>](https://github.com/sunkaixuan/SqlSugar/wiki/b.aop ) \n\n  ##  12.QueryFilter\n  ```cs\n\n //gobal filter\nvar db = GetInstance();\nvar sql = db.Queryable<Student>().ToSql();\n//SELECT [ID],[SchoolId],[Name],[CreateTime] FROM [STudent]  WHERE  isDelete=0 \n\n\npublic static SqlSugarClient GetInstance()\n{\n    SqlSugarClient db = new SqlSugarClient(new ConnectionConfig() {xxx);\n            db.QueryFilter.Add(new SqlFilterItem()\n             {\n                 FilterValue = filterDb =>\n                 {\n                     return new SqlFilterResult() { Sql = " isDelete=0" };\n                 }\n             });\n            return db;\n}\n ```\n   [<font color=red>View more >> </font>](https://github.com/sunkaixuan/SqlSugar/wiki/c.GobalFilter ) \n \n  ##  13.DbFirst\n  ```cs\nvar db = GetInstance();\n//Create all class\ndb.DbFirst.CreateClassFile("c:\\\\Demo\\\\1");\n\n//Create student calsss\ndb.DbFirst.Where("Student").CreateClassFile("c:\\\\Demo\\\\2");\n//Where(array)\n\n//Mapping name\ndb.MappingTables.Add("ClassStudent", "Student");\ndb.MappingColumns.Add("NewId", "Id", "ClassStudent");\ndb.DbFirst.Where("Student").CreateClassFile("c:\\\\Demo\\\\3");\n\n//Remove mapping\ndb.MappingTables.Clear();\n\n//Create class with default value\ndb.DbFirst.IsCreateDefaultValue().CreateClassFile("c:\\\\Demo\\\\4", "Demo.Models");\n\n\n//Mapping and Attribute\ndb.MappingTables.Add("ClassStudent", "Student");\ndb.MappingColumns.Add("NewId", "Id", "ClassStudent");\ndb.DbFirst.IsCreateAttribute().Where("Student").CreateClassFile("c:\\\\Demo\\\\5");\n\n\n```\n   [<font color=red>View more >> </font>](https://github.com/sunkaixuan/SqlSugar/wiki/d.DbFirst ) \n\n\n  ##  14.CodeFirst\n```cs\ndb.CodeFirst.SetStringDefaultLength(100).BackupTable().InitTables(typeof(CodeTable),typeof(CodeTable2)); //change entity backupTable\ndb.CodeFirst.SetStringDefaultLength(100).InitTables(typeof(CodeTable), typeof(CodeTable2));\n```\n   [<font color=red>View more >> </font>](https://github.com/sunkaixuan/SqlSugar/wiki/e.CodeFirst ) \n\n  ##  15.Utilities\n  ```cs\nvar list = db.Utilities.DataTableToList(datatable);\n  ```\n  \n[<font color=red>View more >> </font>](https://github.com/sunkaixuan/SqlSugar/wiki/f.Utilities ) \n\n\n  ##  16.SimpleClient\n```cs\nvar db = GetInstance();\nvar sdb = db.GetSimpleClient<Student>();\nsdb.GetById(1);\nsdb.GetList();\nsdb.DeleteById(1);\nsdb.Update(obj);\n ```\n \n \n [<font color=red>View more >> </font>](https://github.com/sunkaixuan/SqlSugar/wiki/g.SimpleClient ) \n  \n\n# Code generator\nhttps://github.com/sunkaixuan/SoEasyPlatform\n\n# More APi \xe4\xb8\xad\xe6\x96\x87\xe6\x96\x87\xe6\xa1\xa3\xef\xbc\x9a\nhttp://www.codeisbug.com/Doc/8\n'