b'App/Sqitch version 0.9999\n=========================\n\n[![CPAN version](https://badge.fury.io/pl/App-Sqitch.svg)](https://badge.fury.io/pl/App-Sqitch)\n[![Build Status](https://travis-ci.com/sqitchers/sqitch.svg)](https://travis-ci.com/sqitchers/sqitch)\n[![Coverage Status](https://coveralls.io/repos/sqitchers/sqitch/badge.svg)](https://coveralls.io/r/sqitchers/sqitch)\n\n[Sqitch](https://sqitch.org/) is a database change management application. It\ncurrently supports PostgreSQL 8.4+, SQLite 3.7.11+, MySQL 5.0+, Oracle 10g+,\nFirebird 2.0+, Vertica 6.0+, Exasol 6.0+ and Snowflake.\n\nWhat makes it different from your typical\n[migration](https://guides.rubyonrails.org/migrations.html) approaches? A few\nthings:\n\n*   No opinions\n\n    Sqitch is not tied to any framework, ORM, or platform. Rather, it is a\n    standalone change management system with no opinions about your database\n    engine, application framework, or development environment.\n\n*   Native scripting\n\n    Changes are implemented as scripts native to your selected database\n    engine. Writing a [PostgreSQL](https://postgresql.org/) application? Write\n    SQL scripts for\n    [`psql`](https://www.postgresql.org/docs/current/static/app-psql.html).\n    Writing an [Oracle](https://www.oracle.com/database/)-backed app?\n    Write SQL scripts for [SQL\\*Plus](https://www.orafaq.com/wiki/SQL*Plus).\n\n*   Dependency resolution\n\n    Database changes may declare dependencies on other changes -- even on\n    changes from other Sqitch projects. This ensures proper order of\n    execution, even when you\'ve committed changes to your VCS out-of-order.\n\n*   Deployment integrity\n\n    Sqitch manages changes and dependencies via a plan file, and employs a\n    [Merkle tree](https://en.wikipedia.org/wiki/Merkle_tree "Wikipedia: \xe2\x80\x9cMerkle tree\xe2\x80\x9d")\n    pattern similar to\n    [Git](https://stackoverflow.com/a/18589734/ "Stack Overflow: \xe2\x80\x9cWhat is the mathematical structure that represents a Git repo\xe2\x80\x9d")\n    and [Blockchain](https://medium.com/byzantine-studio/blockchain-fundamentals-what-is-a-merkle-tree-d44c529391d7 "Medium: \xe2\x80\x9cBlockchain Fundamentals #1: What is a Merkle Tree?\xe2\x80\x9d")\n    to ensure deployment integrity.\n    As such, there is no need to number your changes, although you can if you\n    want. Sqitch doesn\'t much care how you name your changes.\n\n*   Iterative Development\n\n    Up until you [tag](https://sqitch.org/docs/manual/sqitch-tag/) and\n    [release](https://sqitch.org/docs/manual/sqitch-tag/) your project, you\n    can modify your change deployment scripts as often as you like. They\'re\n    not locked in just because they\'ve been committed to your VCS. This allows\n    you to take an iterative approach to developing your database schema. Or,\n    better, you can do test-driven database development.\n\nWant to learn more? The best place to start is in the tutorials:\n\n* [Introduction to Sqitch on PostgreSQL](lib/sqitchtutorial.pod)\n* [Introduction to Sqitch on SQLite](lib/sqitchtutorial-sqlite.pod)\n* [Introduction to Sqitch on Oracle](lib/sqitchtutorial-oracle.pod)\n* [Introduction to Sqitch on MySQL](lib/sqitchtutorial-mysql.pod)\n* [Introduction to Sqitch on Firebird](lib/sqitchtutorial-firebird.pod)\n* [Introduction to Sqitch on Vertica](lib/sqitchtutorial-vertica.pod)\n* [Introduction to Sqitch on Exasol](lib/sqitchtutorial-exasol.pod)\n* [Introduction to Sqitch on Snowflake](lib/sqitchtutorial-snowflake.pod)\n\nThere have also been a number of presentations on Sqitch:\n\n* [PDX.pm Presentation](https://speakerdeck.com/theory/sane-database-change-management-with-sqitch):\n  Slides from "Sane Database Management with Sqitch", presented to the\n  Portland Perl Mongers in January, 2013.\n\n* [PDXPUG Presentation](https://vimeo.com/50104469): Movie of "Sane Database\n  Management with Sqitch", presented to the Portland PostgreSQL Users Group in\n  September, 2012.\n\n* [Agile Database Development](https://speakerdeck.com/theory/agile-database-development-2ed):\n  Slides from a three-hour tutorial session on using [Git](https://git-scm.org),\n  test-driven development with [pgTAP](https://pgtap.org), and change\n  management with Sqitch, updated in January, 2014.\n\nInstallation\n------------\n\nTo install Sqitch from a distribution download, type the following:\n\n    perl Build.PL\n    ./Build installdeps\n    ./Build\n    ./Build test\n    ./Build install\n\nTo install Sqitch and all of its dependencies into a single directory named\n`sqitch_bundle`, install the Menlo CPAN client and build the bundle:\n\n    cpanm Menlo::CLI::Compat\n    ./Build bundle --install_base sqitch_bundle\n\nAfter which, Sqitch can be run from `./sqitch_bundle/bin/sqitch`. By default,\nno modules that are included in the core Perl distrituion are included. To\nrequire that dual-life modules also be bundled, pass `--dual_life 1`:\n\n    ./Build bundle --install_base sqitch_bundle --dual_life 1\n\nTo include support for a feature in the bundle, pass the `--with` option\nnaming the feature:\n\n    ./Build bundle --install_base sqitch_bundle --with postgres --with sqlite\n\nThe feature names generally correspond to the supported engines. The currently\nsupported features are:\n\n*   `--with postgres`:  Support for managing PostgreSQL databases\n*   `--with sqlite`:    Support for managing SQLite databases\n*   `--with mysql`:     Support for managing MySQL databases\n*   `--with firebird`:  Support for managing Firebird databases\n*   `--with oracle`:    Support for managing Oracle databases\n*   `--with vertica`:   Support for managing Vertica databases\n*   `--with exasol`:    Support for managing Exasol databases\n*   `--with snowflake`: Support for managing Snowflake databases\n*   `--with odbc`:      Include the ODBC driver\n\nTo build from a Git clone, first install\n[Dist::Zilla](https://metacpan.org/module/Dist::Zilla), then use it to install\nSqitch and all dependencies:\n\n    cpanm Dist::Zilla\n    dzil authordeps --missing | cpanm\n    dzil listdeps --missing | cpanm\n    dzil install\n\nTo run Sqitch directly from the Git clone, execute `t/sqitch`.\n\nTo install Sqitch on a specific platform, including Debian- and RedHat-derived\nLinux distributions and Windows, see the\n[Installation documentation](https://sqitch.org/#installation).\n\nLicence\n-------\n\nCopyright \xc2\xa9 2012-2018 iovation Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the "Software"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n'