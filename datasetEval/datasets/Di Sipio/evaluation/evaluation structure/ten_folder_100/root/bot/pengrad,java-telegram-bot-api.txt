b'# Java Telegram Bot API\n[![Maven Central](https://img.shields.io/maven-central/v/com.github.pengrad/java-telegram-bot-api.svg)](https://search.maven.org/artifact/com.github.pengrad/java-telegram-bot-api)\n[![Build Status](https://travis-ci.org/pengrad/java-telegram-bot-api.svg?branch=master)](https://travis-ci.org/pengrad/java-telegram-bot-api)\n[![codecov](https://codecov.io/gh/pengrad/java-telegram-bot-api/branch/master/graph/badge.svg)](https://codecov.io/gh/pengrad/java-telegram-bot-api)\n\nJava library for interacting with [Telegram Bot API](https://core.telegram.org/bots/api)\n- Full support of all Bot API 4.4 methods\n- Telegram [Passport](https://core.telegram.org/passport) and Decryption API\n- Bot [Payments](https://core.telegram.org/bots/payments)\n- [Gaming Platform](https://telegram.org/blog/games)\n\n## Download\n\nGradle:\n```groovy\nimplementation \'com.github.pengrad:java-telegram-bot-api:4.4.0\'\n```\nMaven:\n```xml\n<dependency>\n  <groupId>com.github.pengrad</groupId>\n  <artifactId>java-telegram-bot-api</artifactId>\n  <version>4.4.0</version>\n</dependency>\n```\n[JAR with all dependencies on release page](https://github.com/pengrad/java-telegram-bot-api/releases)\n\n## Usage\n```java\n// Create your bot passing the token received from @BotFather\nTelegramBot bot = new TelegramBot("BOT_TOKEN");\n\n// Register for updates\nbot.setUpdatesListener(updates -> {\n    // ... process updates\n    // return id of last processed update or confirm them all\n    return UpdatesListener.CONFIRMED_UPDATES_ALL;\n});\n\n// Send messages\nlong chatId = update.message().chat().id();\nSendResponse response = bot.execute(new SendMessage(chatId, "Hello!"));\n```\n\n## Documentation\n- [Creating your bot](#creating-your-bot)\n- [Making requests](#making-requests)\n- [Getting updates](#getting-updates)\n- [Available types](#available-types)\n- [Available methods](#available-methods)\n- [Updating messages](#updating-messages)\n- [Stickers](#stickers)\n- [Inline mode](#inline-mode)\n- [Payments](#payments)\n- [Telegram Passport](#telegram-passport)\n- [Games](#games)\n\n### Creating your bot\n\n```java\nTelegramBot bot = new TelegramBot("BOT_TOKEN");\n```\nNetwork operations based on [OkHttp](https://github.com/square/okhttp) library.  \nYou can build bot with custom OkHttpClient, for specific timeouts or interceptors.\n```java\nTelegramBot bot = new TelegramBot.Builder("BOT_TOKEN").okHttpClient(client).build();\n```\n\n### Making requests\n\nSynchronous\n```java\nBaseResponse response = bot.execute(request);\n```\n\nAsynchronous\n```java\nbot.execute(request, new Callback() {\n    @Override\n    public void onResponse(BaseRequest request, BaseResponse response) {\n    \n    }\n    @Override\n    public void onFailure(BaseRequest request, IOException e) {\n    \n    }\n});\n```\n\nRequest [in response to update](https://core.telegram.org/bots/faq#how-can-i-make-requests-in-response-to-updates)\n```java\nString response = request.toWebhookResponse();\n```\n\n### Getting updates\n\nYou can use **getUpdates** request, parse incoming **Webhook** request, or set listener to receive updates.  \nUpdate object just copies Telegram\'s response.\n\n```java\nclass Update {\n    Integer updateId();\n    Message message();\n    Message editedMessage();\n    InlineQuery inlineQuery();\n    ChosenInlineResult chosenInlineResult();\n    CallbackQuery callbackQuery();\n}\n```\n\n#### Get updates\n\nBuilding request\n```java\nGetUpdates getUpdates = new GetUpdates().limit(100).offset(0).timeout(0);\n```\n\nThe getUpdates method returns the earliest 100 unconfirmed updates. To confirm an update, use the offset parameter when calling getUpdates like this:\n`offset = updateId of last processed update + 1`  \nAll updates with updateId less than offset will be marked as confirmed on the server and will no longer be returned.\n\nExecuting\n```java\n// sync\nGetUpdatesResponse updatesResponse = bot.execute(getUpdates);\nList<Update> updates = updatesResponse.updates();\n...\nMessage message = update.message()\n\n\n// async\nbot.execute(getUpdates, new Callback<GetUpdates, GetUpdatesResponse>() {\n    @Override\n    public void onResponse(GetUpdates request, GetUpdatesResponse response) {\n        List<Update> updates = updatesResponse.updates();\n    }\n    \n    @Override\n    public void onFailure(GetUpdates request, IOException e) {\n    \n    }\n});\n```\n\n#### Webhook\n\nBuilding request\n```java\nSetWebhook request = new SetWebhook()\n       .url("url")\n       .certificate(new byte[]{}) // byte[]\n       .certificate(new File("path")); // or file \n```\n\nExecuting\n```java\n// sync\nBaseResponse response = bot.execute(request);\nboolean ok = response.isOk();\n\n// async\nbot.execute(request, new Callback<SetWebhook, BaseResponse>() {\n    @Override\n    public void onResponse(SetWebhook request, BaseResponse response) {\n    \n    }\n    @Override\n    public void onFailure(SetWebhook request, IOException e) {\n        \n    }\n});\n```\n\nUsing Webhook you can parse request to Update\n```java\nUpdate update = BotUtils.parseUpdate(stringRequest); // from String\nUpdate update = BotUtils.parseUpdate(reader); // or from java.io.Reader\n\nMessage message = update.message();\n``` \n\n#### Updates Listener\n\nYou can set listener to receiving incoming updates as if using Webhook.  \nThis will trigger executing getUpdates requests in a loop.\n\n```java\nbot.setUpdatesListener(new UpdatesListener() {\n    @Override\n    public int process(List<Update> updates) {\n\n        // process updates\n\n        return UpdatesListener.CONFIRMED_UPDATES_ALL;\n    }\n});\n```\n\nListener should return id of the last processed (confirmed) update.  \nTo confirm all updates return `UpdatesListener.CONFIRMED_UPDATES_ALL`, this should be enough in most cases.  \nTo not confirm any updates return `UpdatesListener.CONFIRMED_UPDATES_NONE`, these updates will be redelivered.  \nTo set specific update as last confirmed just return required updateId.\n\nTo stop receiving updates\n```java\nbot.removeGetUpdatesListener();\n```\n\n### Available types\n\nAll types have the same name as original ones.  \nType\'s fields are methods in lowerCamelCase.\n\nTypes used in responses **(Update, Message, User, Document...)** are in `com.pengrad.telegrambot.model` package. \n\nTypes used in requests **(Keyboard, InlineQueryResult, ParseMode, InputMessageContent...)** are in `com.pengrad.telegrambot.model.request` package.  \nWhen creating request\'s type required params should be passed in constructor, optional params can be added in chains.\n\n#### Keyboards\n\nForceReply, ReplyKeyboardRemove\n```java\nKeyboard forceReply = new ForceReply(isSelective); // or just new ForceReply();\nKeyboard replyKeyboardRemove = new ReplyKeyboardRemove(); // new ReplyKeyboardRemove(isSelective)\n```\n\nReplyKeyboardMarkup\n```java\nKeyboard replyKeyboardMarkup = new ReplyKeyboardMarkup(\n                new String[]{"first row button1", "first row button2"},\n                new String[]{"second row button1", "second row button2"})\n                .oneTimeKeyboard(true)   // optional\n                .resizeKeyboard(true)    // optional\n                .selective(true);        // optional\n```\n\nKeyboardButton\n```java\nKeyboard keyboard = new ReplyKeyboardMarkup(\n        new KeyboardButton[]{\n                new KeyboardButton("text"),\n                new KeyboardButton("contact").requestContact(true),\n                new KeyboardButton("location").requestLocation(true)\n        }\n);                \n```\n\nInlineKeyboardMarkup\n```java\nInlineKeyboardMarkup inlineKeyboard = new InlineKeyboardMarkup(\n        new InlineKeyboardButton[]{\n                new InlineKeyboardButton("url").url("www.google.com"),\n                new InlineKeyboardButton("callback_data").callbackData("callback_data"),\n                new InlineKeyboardButton("Switch!").switchInlineQuery("switch_inline_query")\n        });\n```\n\n#### Chat Action\n```java\nChatAction action = ChatAction.typing;\nChatAction action = ChatAction.upload_photo;\nChatAction action = ChatAction.find_location;\n```\n\n### Available methods\n\nAll request methods have the same names as original ones.  \nRequired params should be passed in constructor.  \nOptional params can be added in chains.\n\n#### Send message \n\nAll send requests **(SendMessage, SendPhoto, SendLocation...)** return **SendResponse** object that contains **Message**.\n```java\nSendMessage request = new SendMessage(chatId, "text")\n        .parseMode(ParseMode.HTML)\n        .disableWebPagePreview(true)\n        .disableNotification(true)\n        .replyToMessageId(1)\n        .replyMarkup(new ForceReply());\n\n// sync\nSendResponse sendResponse = bot.execute(request);\nboolean ok = sendResponse.isOk();\nMessage message = sendResponse.message();\n\n// async\nbot.execute(request, new Callback<SendMessage, SendResponse>() {\n    @Override\n    public void onResponse(SendMessage request, SendResponse response) {\n       \n    }\n    \n    @Override\n    public void onFailure(SendMessage request, IOException e) {\n    \n    }\n});\n```\n\n#### Formatting options\n```java\nParseMode parseMode = ParseMode.Markdown;\nParseMode parseMode = ParseMode.HTML;\n```\n\n#### Get file\n```java\nGetFile request = new GetFile("fileId")\nGetFileResponse getFileResponse = bot.execute(request);\n\nFile file = getFileResponse.file(); // com.pengrad.telegrambot.model.File\nfile.fileId();\nfile.filePath();  // relative path\nfile.fileSize();\n```\nTo get downloading link as `https://api.telegram.org/file/bot<token>/<file_path>`\n```java\nString fullPath = bot.getFullFilePath(file);  // com.pengrad.telegrambot.model.File\n```\n\n#### Other requests\n\nAll requests return BaseResponse if not mention here\n```java\nclass BaseResponse {\n  boolean isOk();\n  int errorCode();\n  String description();\n}\n```\n\nGetMe request returns GetMeResponse  \n```java\nclass GetMeResponse {\n  User user();\n}\n```\n\nGetChatAdministrators\n```java\nclass GetChatAdministratorsResponse  { \n  List<ChatMember> administrators() \n}\n```\n\nGetChatMembersCount\n```java\nclass GetChatMembersCountResponse  { \n  int count() \n}\n```\n\nGetChatMember\n```java\nclass GetChatMemberResponse  {\n  ChatMember chatMember() \n}\n```\n\nGetChat\n```java\nclass GetChatResponse  { \n  Chat chat() \n}\n```\n\nGetUserProfilePhotos\n```java\nclass GetUserProfilePhotosResponse {\n  UserProfilePhotos photos()\n}\n```\n\nStopPoll\n```java\nclass PollResponse {\n  Poll poll()\n}\n```\n\n### Updating messages\n\nNormal message\n```java\nEditMessageText editMessageText = new EditMessageText(chatId, messageId, "new test")\n        .parseMode(ParseMode.HTML)\n        .disableWebPagePreview(true)\n        .replyMarkup(new ReplyKeyboardRemove());\n        \nBaseResponse response = bot.execute(editMessageText);        \n```\n\nInline message\n```java\nEditMessageText editInlineMessageText = new EditMessageText(inlineMessageId, "new text");\nBaseResponse response = bot.execute(editInlineMessageText);\n```\n\nDelete message\n```java\nDeleteMessage deleteMessage = new DeleteMessage(chatId, messageId);\nBaseResponse response = bot.execute(deleteMessage);\n```\n\n### Stickers\n\nSend sticker\n```java\n// File or byte[] or string fileId of existing sticker or string URL\nSendSticker sendSticker = new SendSticker(chatId, imageFile);\nSendResponse response = bot.execute(sendSticker);\n```\n\nGet sticker set\n```java\nGetStickerSet getStickerSet = new GetStickerSet(stickerSet);\nGetStickerSetResponse response = bot.execute(getStickerSet);\nStickerSet stickerSet = response.stickerSet();\n```\n\nUpload sticker file\n```java\n// File or byte[] or string URL\nUploadStickerFile uploadStickerFile = new UploadStickerFile(chatId, stickerFile);\nGetFileResponse response = bot.execute(uploadStickerFile);\n```\n\n### Inline mode\n\nGetting updates\n```java\nGetUpdatesResponse updatesResponse = bot.execute(new GetUpdates());\nList<Update> updates = updatesResponse.updates();\n...\nInlineQuery inlineQuery = update.inlineQuery();\nChosenInlineResult chosenInlineResult = update.chosenInlineResult();\nCallbackQuery callbackQuery = update.callbackQuery();\n```\n\nIf using webhook, you can parse request to InlineQuery\n```java\nUpdate update = BotUtils.parseUpdate(stringRequest); // from String\nUpdate update = BotUtils.parseUpdate(reader); // from java.io.Reader\n\nInlineQuery inlineQuery = update.inlineQuery();\n```\n\n#### Inline query result\n```java\nInlineQueryResult r1 = new InlineQueryResultPhoto("id", "photoUrl", "thumbUrl");\nInlineQueryResult r2 = new InlineQueryResultArticle("id", "title", "message text").thumbUrl("url");\nInlineQueryResult r3 = new InlineQueryResultGif("id", "gifUrl", "thumbUrl");\nInlineQueryResult r4 = new InlineQueryResultMpeg4Gif("id", "mpeg4Url", "thumbUrl");\n\nInlineQueryResult r5 = new InlineQueryResultVideo(\n  "id", "videoUrl", InlineQueryResultVideo.MIME_VIDEO_MP4, "message", "thumbUrl", "video title")\n    .inputMessageContent(new InputLocationMessageContent(21.03f, 105.83f));\n```\n\n#### Answer inline query\n```java\nBaseResponse response = bot.execute(new AnswerInlineQuery(inlineQuery.id(), r1, r2, r3, r4, r5));\n\n// or full\nbot.execute(\n        new AnswerInlineQuery(inlineQuery.id(), new InlineQueryResult[]{r1, r2, r3, r4, r5})\n                .cacheTime(cacheTime)\n                .isPersonal(isPersonal)\n                .nextOffset("offset")\n                .switchPmParameter("pmParam")\n                .switchPmText("pmText")\n);\n```\n\n### Payments\n\nSend invoice\n```java\nSendInvoice sendInvoice = new SendInvoice(chatId, "title", "desc", "my_payload",\n        "providerToken", "my_start_param", "USD", new LabeledPrice("label", 200))\n        .needPhoneNumber(true)\n        .needShippingAddress(true)\n        .isFlexible(true)\n        .replyMarkup(new InlineKeyboardMarkup(new InlineKeyboardButton[]{\n                new InlineKeyboardButton("just pay").pay(),\n                new InlineKeyboardButton("google it").url("www.google.com")\n        }));\nSendResponse response = bot.execute(sendInvoice);\n```\n\nAnswer shipping query\n```java\nLabeledPrice[] prices = new LabeledPrice[]{\n        new LabeledPrice("delivery", 100),\n        new LabeledPrice("tips", 50)\n};\nAnswerShippingQuery answerShippingQuery = new AnswerShippingQuery(shippingQueryId,\n        new ShippingOption("1", "VNPT", prices),\n        new ShippingOption("2", "FREE", new LabeledPrice("free delivery", 0))\n);\nBaseResponse response = bot.execute(answerShippingQuery);\n\n// answer with error\nAnswerShippingQuery answerShippingError = new AnswerShippingQuery(id, "Can\'t deliver here!");\nBaseResponse response = bot.execute(answerShippingError);\n```\n\nAnswer pre-checkout query\n```java\nAnswerPreCheckoutQuery answerCheckout = new AnswerPreCheckoutQuery(preCheckoutQueryId);\nBaseResponse response = bot.execute(answerPreCheckoutQuery);\n\n// answer with error\nAnswerPreCheckoutQuery answerCheckout = new AnswerPreCheckoutQuery(id, "Sorry, item not available");\nBaseResponse response = bot.execute(answerPreCheckoutQuery);\n```\n\n### Telegram Passport\n\nWhen the user confirms your request by pressing the \xe2\x80\x98Authorize\xe2\x80\x99 button, the Bot API sends an Update with the field passport_data to the bot that contains encrypted Telegram Passport data. [Telegram Passport Manual](https://core.telegram.org/passport#receiving-information)\n\n#### Receiving information \nYou can get encrypted Passport data from Update (via UpdatesListener or Webhook)\n```java\nPassportData passportData = update.message().passportData();\n```\nPassportData contains array of `EncryptedPassportElement` and `EncryptedCredentials`.  \nYou need to decrypt `Credentials` using private key (public key you uploaded to `@BotFather`)\n```java\nString privateKey = "...";\nEncryptedCredentials encryptedCredentials = passportData.credentials();\nCredentials credentials = encryptedCredentials.decrypt(privateKey);\n```\nThese `Credentials` can be used to decrypt encrypted data in `EncryptedPassportElement`.\n```java\nEncryptedPassportElement[] encryptedPassportElements = passportData.data();\nfor (EncryptedPassportElement element : encryptedPassportElements) {\n    DecryptedData decryptedData = element.decryptData(credentials);\n    // DecryptedData can be cast to specific type by checking instanceOf \n    if (decryptedData instanceof PersonalDetails) {\n        PersonalDetails personalDetails = (PersonalDetails) decryptedData;\n    }\n    // Or by checking type of passport element\n    if (element.type() == EncryptedPassportElement.Type.address) {\n        ResidentialAddress address = (ResidentialAddress) decryptedData;\n    }\n}\n```\n`EncryptedPassportElement` also contains array of `PassportFile` (file uploaded to Telegram Passport).  \nYou need to download them 1 by 1 and decrypt content.  \nThis library supports downloading and decryption, returns decrypted byte[]\n```java\nEncryptedPassportElement element = ...\n\n// Combine all files \nList<PassportFile> files = new ArrayList<PassportFile>();\nfiles.add(element.frontSide());\nfiles.add(element.reverseSide());\nfiles.add(element.selfie());\nif (element.files() != null) {\n    files.addAll(Arrays.asList(element.files()));\n}\nif (element.translation() != null) {\n    files.addAll(Arrays.asList(element.translation()));\n}\n\n// Decrypt\nfor (PassportFile file : files) {\n    if (file == null) continue;\n    byte[] data = element.decryptFile(file, credentials, bot); // GetFile request and decrypt content\n    // save to file if needed\n    new FileOutputStream("files/" + element.type()).write(data);\n}\n```\n\n#### Set Passport data errors\n``` java\nSetPassportDataErrors setPassportDataErrors = new SetPassportDataErrors(chatId,\n        new PassportElementErrorDataField("personal_details", "first_name", "dataHash",\n                "Please enter a valid First name"),\n        new PassportElementErrorSelfie("driver_license", "fileHash",\n                "Can\'t see your face on photo")\n);\nbot.execute(setPassportDataErrors);\n```\n\n### Games\n\nSend game\n```java\nSendResponse response = bot.execute(new SendGame(chatId, "my_super_game"));\n```\n\nSet game score\n```java\nBaseResponse response = bot.execute(new SetGameScore(userId, score, chatId, messageId));\n```\n\nGet game high scores\n```java\nGetGameHighScoresResponse response = bot.execute(new GetGameHighScores(userId, chatId, messageId));\nGameHighScore[] scores = response.result();\n```\n'