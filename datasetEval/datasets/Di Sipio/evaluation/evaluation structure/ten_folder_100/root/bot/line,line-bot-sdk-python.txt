b'LINE Messaging API SDK for Python\n=================================\n\n|Build Status| |PyPI version| |Documentation Status|\n\nSDK of the LINE Messaging API for Python.\n\nIntroduction\n------------\nThe LINE Messaging API SDK for Python makes it easy to develop bots using LINE Messaging API, and you can create a sample bot within minutes.\n\n\nDocumentation\n-------------\n\nSee the official API documentation for more information\n\nEnglish: https://developers.line.biz/en/docs/messaging-api/overview/\n\nJapanese: https://developers.line.biz/ja/docs/messaging-api/overview/\n\nRequirements\n------------\n\n-  Python >= 2.7 or >= 3.4\n\nInstallation\n------------\n\n::\n\n    $ pip install line-bot-sdk\n\nSynopsis\n--------\n\nUsage:\n\n.. code:: python\n\n    from flask import Flask, request, abort\n\n    from linebot import (\n        LineBotApi, WebhookHandler\n    )\n    from linebot.exceptions import (\n        InvalidSignatureError\n    )\n    from linebot.models import (\n        MessageEvent, TextMessage, TextSendMessage,\n    )\n\n    app = Flask(__name__)\n\n    line_bot_api = LineBotApi(\'YOUR_CHANNEL_ACCESS_TOKEN\')\n    handler = WebhookHandler(\'YOUR_CHANNEL_SECRET\')\n\n\n    @app.route("/callback", methods=[\'POST\'])\n    def callback():\n        # get X-Line-Signature header value\n        signature = request.headers[\'X-Line-Signature\']\n\n        # get request body as text\n        body = request.get_data(as_text=True)\n        app.logger.info("Request body: " + body)\n\n        # handle webhook body\n        try:\n            handler.handle(body, signature)\n        except InvalidSignatureError:\n            print("Invalid signature. Please check your channel access token/channel secret.")\n            abort(400)\n\n        return \'OK\'\n\n\n    @handler.add(MessageEvent, message=TextMessage)\n    def handle_message(event):\n        line_bot_api.reply_message(\n            event.reply_token,\n            TextSendMessage(text=event.message.text))\n\n\n    if __name__ == "__main__":\n        app.run()\n\nAPI\n---\n\nLineBotApi\n~~~~~~~~~~\n\n\\_\\_init\\_\\_(self, channel\\_access\\_token, endpoint=\'https://api.line.me\', timeout=5, http\\_client=RequestsHttpClient)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nCreate a new LineBotApi instance.\n\n.. code:: python\n\n    line_bot_api = linebot.LineBotApi(\'YOUR_CHANNEL_ACCESS_TOKEN\')\n\nYou can override the ``timeout`` value for each method.\n\nreply\\_message(self, reply\\_token, messages, notification_disabled=False, timeout=None)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nRespond to events from users, groups, and rooms. You can get a\nreply\\_token from a webhook event object.\n\nhttps://developers.line.biz/en/reference/messaging-api/#send-reply-message\n\n.. code:: python\n\n    line_bot_api.reply_message(reply_token, TextSendMessage(text=\'Hello World!\'))\n\npush\\_message(self, to, messages, notification_disabled=False, timeout=None)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nSend messages to users, groups, and rooms at any time.\n\nhttps://developers.line.biz/en/reference/messaging-api/#send-push-message\n\n.. code:: python\n\n    line_bot_api.push_message(to, TextSendMessage(text=\'Hello World!\'))\n\nmulticast(self, to, messages, notification_disabled=False, timeout=None)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nSend push messages to multiple users at any time. Messages cannot be sent to groups or rooms.\n\nhttps://developers.line.biz/en/reference/messaging-api/#send-multicast-message\n\n.. code:: python\n\n    line_bot_api.multicast([\'to1\', \'to2\'], TextSendMessage(text=\'Hello World!\'))\n\nbroadcast(self, messages, notification_disabled=False, timeout=None)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nSend push messages to multiple users at any time.\n\nhttps://developers.line.biz/en/reference/messaging-api/#send-broadcast-message\n\n.. code:: python\n\n    line_bot_api.broadcast(TextSendMessage(text=\'Hello World!\'))\n\nget\\_profile(self, user\\_id, timeout=None)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nGet user profile information.\n\nhttps://developers.line.biz/en/reference/messaging-api/#get-profile\n\n.. code:: python\n\n    profile = line_bot_api.get_profile(user_id)\n\n    print(profile.display_name)\n    print(profile.user_id)\n    print(profile.picture_url)\n    print(profile.status_message)\n\nget\\_group\\_member\\_profile(self, group\\_id, user\\_id, timeout=None)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nGets the user profile of a member of a group that the bot is in. This can be\nthe user ID of a user who has not added the bot as a friend or has blocked\nthe bot.\n\nhttps://developers.line.biz/en/reference/messaging-api/#get-group-member-profile\n\n.. code:: python\n\n    profile = line_bot_api.get_group_member_profile(group_id, user_id)\n\n    print(profile.display_name)\n    print(profile.user_id)\n    print(profile.picture_url)\n\nget\\_room\\_member\\_profile(self, room\\_id, user\\_id, timeout=None)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nGets the user profile of a member of a room that the bot is in. This can be the\nuser ID of a user who has not added the bot as a friend or has blocked the bot.\n\nhttps://developers.line.biz/en/reference/messaging-api/#get-room-member-profile\n\n.. code:: python\n\n    profile = line_bot_api.get_room_member_profile(room_id, user_id)\n\n    print(profile.display_name)\n    print(profile.user_id)\n    print(profile.picture_url)\n\nget\\_group\\_member\\_ids(self, group\\_id, start=None, timeout=None)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nGets the user IDs of the members of a group that the bot is in.\nThis includes the user IDs of users who have not added the bot as a friend or has blocked the bot.\n\nhttps://developers.line.biz/en/reference/messaging-api/#get-group-member-user-ids\n\n.. code:: python\n\n    member_ids_res = line_bot_api.get_group_member_ids(group_id)\n\n    print(member_ids_res.member_ids)\n    print(member_ids_res.next)\n\nget\\_room\\_member\\_ids(self, room\\_id, start=None, timeout=None)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nGets the user IDs of the members of a room that the bot is in.\nThis includes the user IDs of users who have not added the bot as a friend or has blocked the bot.\n\nhttps://developers.line.biz/en/reference/messaging-api/#get-room-member-user-ids\n\n.. code:: python\n\n    member_ids_res = line_bot_api.get_room_member_ids(room_id)\n\n    print(member_ids_res.member_ids)\n    print(member_ids_res.next)\n\nget\\_message\\_content(self, message\\_id, timeout=None)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nRetrieve image, video, and audio data sent by users.\n\nhttps://developers.line.biz/en/reference/messaging-api/#get-content\n\n.. code:: python\n\n    message_content = line_bot_api.get_message_content(message_id)\n\n    with open(file_path, \'wb\') as fd:\n        for chunk in message_content.iter_content():\n            fd.write(chunk)\n\nleave\\_group(self, group\\_id, timeout=None)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nLeave a group.\n\nhttps://developers.line.biz/en/reference/messaging-api/#leave-group\n\n.. code:: python\n\n    line_bot_api.leave_group(group_id)\n\nleave\\_room(self, room\\_id, timeout=None)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nLeave a room.\n\nhttps://developers.line.biz/en/reference/messaging-api/#leave-room\n\n.. code:: python\n\n    line_bot_api.leave_room(room_id)\n\nget\\_rich\\_menu(self, rich\\_menu\\_id, timeout=None)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nGets a rich menu via a rich menu ID.\n\nhttps://developers.line.biz/en/reference/messaging-api/#get-rich-menu\n\n.. code:: python\n\n    rich_menu = line_bot_api.get_rich_menu(rich_menu_id)\n    print(rich_menu.rich_menu_id)\n\ncreate\\_rich\\_menu(self, rich\\_menu, timeout=None)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nCreates a rich menu.\nYou must upload a rich menu image and link the rich menu to a user for the rich menu to be displayed. You can create up to 10 rich menus for one bot.\n\nhttps://developers.line.biz/en/reference/messaging-api/#create-rich-menu\n\n.. code:: python\n\n    rich_menu_to_create = RichMenu(\n        size=RichMenuSize(width=2500, height=843),\n        selected=False,\n        name="Nice richmenu",\n        chat_bar_text="Tap here",\n        areas=[RichMenuArea(\n            bounds=RichMenuBounds(x=0, y=0, width=2500, height=843),\n            action=URIAction(label=\'Go to line.me\', uri=\'https://line.me\'))]\n    )\n    rich_menu_id = line_bot_api.create_rich_menu(rich_menu=rich_menu_to_create)\n    print(rich_menu_id)\n\ndelete\\_rich\\_menu(self, rich\\_menu\\_id, timeout=None)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nDeletes a rich menu.\n\nhttps://developers.line.biz/en/reference/messaging-api/#delete-rich-menu\n        \n.. code:: python\n\n    line_bot_api.delete_rich_menu(rich_menu_id)\n\nget\\_rich\\_menu\\_id\\_of\\_user(self, user\\_id, timeout=None)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nGets the ID of the rich menu linked to a user.\n\nhttps://developers.line.biz/en/reference/messaging-api/#get-rich-menu-id-of-user\n\n.. code:: python\n\n    rich_menu_id = ine_bot_api.get_rich_menu_id_of_user(user_id)\n    print(rich_menu_id)\n\nlink\\_rich\\_menu\\_to\\_user(self, user\\_id, rich\\_menu\\_id, timeout=None)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nLinks a rich menu to a user. Only one rich menu can be linked to a user at one time.\n\nhttps://developers.line.biz/en/reference/messaging-api/#link-rich-menu-to-user\n\n.. code:: python\n\n    line_bot_api.link_rich_menu_to_user(user_id, rich_menu_id)\n\nlink\\_rich\\_menu\\_to\\_users(self, user\\_ids, rich\\_menu\\_id, timeout=None)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nLinks a rich menu to multiple users.\n\nhttps://developers.line.biz/en/reference/messaging-api/#link-rich-menu-to-users\n\n.. code:: python\n\n    line_bot_api.link_rich_menu_to_users(<user_ids>, <rich_menu_id>)\n\nunlink\\_rich\\_menu\\_from\\_user(self, user\\_id, timeout=None)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nUnlinks a rich menu from a user.\n\nhttps://developers.line.biz/en/reference/messaging-api/#unlink-rich-menu-from-user\n\n.. code:: python\n\n    line_bot_api.unlink_rich_menu_from_user(user_id)\n\nunlink\\_rich\\_menu\\_from\\_users(self, user\\_ids, timeout=None)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nUnlinks rich menus from multiple users.\n\nhttps://developers.line.biz/en/reference/messaging-api/#unlink-rich-menu-from-users\n\n.. code:: python\n\n    line_bot_api.unlink_rich_menu_from_users(<user_ids>)\n\nget\\_rich\\_menu\\_image(self, rich\\_menu\\_id, timeout=None)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nDownloads an image associated with a rich menu.\n\nhttps://developers.line.biz/en/reference/messaging-api/#download-rich-menu-image\n\n.. code:: python\n\n    content = line_bot_api.get_rich_menu_image(rich_menu_id)\n    with open(file_path, \'wb\') as fd:\n        for chunk in content.iter_content():\n            fd.write(chunk)\n\nset\\_rich\\_menu\\_image(self, rich\\_menu\\_id, content\\_type, content, timeout=None)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nUploads and attaches an image to a rich menu.\n\nhttps://developers.line.biz/en/reference/messaging-api/#upload-rich-menu-image\n\n.. code:: python\n\n    with open(file_path, \'rb\') as f:\n        line_bot_api.set_rich_menu_image(rich_menu_id, content_type, f)\n\nget\\_rich\\_menu\\_list(self, timeout=None)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nGets a list of all uploaded rich menus.\n\nhttps://developers.line.biz/en/reference/messaging-api/#get-rich-menu-list\n\n.. code:: python\n\n    rich_menu_list = line_bot_api.get_rich_menu_list()\n    for rich_menu in rich_menu_list:\n        print(rich_menu.rich_menu_id)\n\nset\\_default\\_rich\\_menu(self, rich\\_menu\\_id, timeout=None)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nSets the default rich menu.\n\nhttps://developers.line.biz/en/reference/messaging-api/#set-default-rich-menu\n\n.. code:: python\n\n    line_bot_api.set_default_rich_menu(<rich_menu_id>)\n\nget\\_default\\_rich\\_menu(self, timeout=None)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nGets the ID of the default rich menu set with the Messaging API.\n\nhttps://developers.line.biz/en/reference/messaging-api/#get-default-rich-menu-id\n\n.. code:: python\n\n    line_bot_api.get_default_rich_menu()\n\ncancel\\_default\\_rich\\_menu(self, timeout=None)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nCancels the default rich menu set with the Messaging API.\n\nhttps://developers.line.biz/en/reference/messaging-api/#cancel-default-rich-menu\n\n.. code:: python\n\n    line_bot_api.cancel_default_rich_menu()\n\nissue\\_link\\_token(self, user\\_id, timeout=None)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nIssues a link token used for the account link feature.\n\nhttps://developers.line.biz/en/reference/messaging-api/#issue-link-token\n\n.. code:: python\n\n    link_token_response = line_bot_api.issue_link_token(<user_id>)\n    print(link_token_response)\n\nissue\\_channel\\_token(self, client_id, client_secret, grant_type=\'client_credentials\', timeout=None)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nIssues a short-lived channel access token.\n\nhttps://developers.line.biz/en/reference/messaging-api/#issue-channel-access-token\n\n.. code:: python\n\n    channel_token_response = line_bot_api.issue_channel_token(<client_id>, <client_secret>)\n    print(access_token_response)\n\nrevoke\\_channel\\_token(self, access_token, timeout=None)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nRevokes a channel access token.\n\nhttps://developers.line.biz/en/reference/messaging-api/#revoke-channel-access-token\n\n.. code:: python\n\n    line_bot_api.revoke_channel_token(<access_token>)\n\nget\\_insight\\_message\\_delivery(self, date, timeout=None)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nGet the number of messages sent on a specified day.\n\nhttps://developers.line.biz/en/reference/messaging-api/#get-number-of-delivery-messages\n\n.. code:: python\n\n    insight = line_bot_api.get_insight_message_delivery(\'20191231\')\n    print(insight.api_broadcast)\n\nget\\_insight\\_followers(self, date, timeout=None)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nGet the number of users who have added the bot on or before a specified date.\n\nhttps://developers.line.biz/en/reference/messaging-api/#get-number-of-followers\n\n.. code:: python\n\n    insight = line_bot_api.get_insight_followers(\'20191231\')\n    print(insight.followers)\n\nget\\_insight\\_demographic(self, timeout=None)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nRetrieve the demographic attributes for a bot\'s friends.\n\nhttps://developers.line.biz/en/reference/messaging-api/#get-demographic\n\n.. code:: python\n\n    insight = line_bot_api.get_insight_demographic()\n    print(insight.genders)\n\nget\\_insight\\_message\\_event(self, request_id, timeout=None)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nReturn statistics about how users interact with broadcast messages.\n\nhttps://developers.line.biz/en/reference/messaging-api/#get-message-event\n\n.. code:: python\n\n    broadcast_response = line_bot_api.broadcast(TextSendMessage(text=\'Hello World!\'))\n    insight = line_bot_api.get_insight_message_event(broadcast_response.request_id)\n    print(insight.overview)\n\n\xe2\x80\xbb Error handling\n^^^^^^^^^^^^^^^^^\n\nIf the LINE API server returns an error, LineBotApi raises LineBotApiError.\n\nhttps://developers.line.biz/en/reference/messaging-api/#error-responses\n\n.. code:: python\n\n    try:\n        line_bot_api.push_message(\'to\', TextSendMessage(text=\'Hello World!\'))\n    except linebot.exceptions.LineBotApiError as e:\n        print(e.status_code)\n        print(e.request_id)\n        print(e.error.message)\n        print(e.error.details)\n\nMessage objects\n~~~~~~~~~~~~~~~\n\nhttps://developers.line.biz/en/reference/messaging-api/#message-objects\n\nThe following classes are found in the ``linebot.models`` package.\n\nTextSendMessage\n^^^^^^^^^^^^^^^\n\n.. code:: python\n\n    text_message = TextSendMessage(text=\'Hello, world\')\n\nImageSendMessage\n^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n    image_message = ImageSendMessage(\n        original_content_url=\'https://example.com/original.jpg\',\n        preview_image_url=\'https://example.com/preview.jpg\'\n    )\n\nVideoSendMessage\n^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n    video_message = VideoSendMessage(\n        original_content_url=\'https://example.com/original.mp4\',\n        preview_image_url=\'https://example.com/preview.jpg\'\n    )\n\nAudioSendMessage\n^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n    audio_message = AudioSendMessage(\n        original_content_url=\'https://example.com/original.m4a\',\n        duration=240000\n    )\n\nLocationSendMessage\n^^^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n    location_message = LocationSendMessage(\n        title=\'my location\',\n        address=\'Tokyo\',\n        latitude=35.65910807942215,\n        longitude=139.70372892916203\n    )\n\nStickerSendMessage\n^^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n    sticker_message = StickerSendMessage(\n        package_id=\'1\',\n        sticker_id=\'1\'\n    )\n\nImagemapSendMessage\n^^^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n    imagemap_message = ImagemapSendMessage(\n        base_url=\'https://example.com/base\',\n        alt_text=\'this is an imagemap\',\n        base_size=BaseSize(height=1040, width=1040),\n        video=Video(\n            original_content_url=\'https://example.com/video.mp4\',\n            preview_image_url=\'https://example.com/video_preview.jpg\',\n            area=ImagemapArea(\n                x=0, y=0, width=1040, height=585\n            ),\n            external_link=ExternalLink(\n                link_uri=\'https://example.com/see_more.html\',\n                label=\'See More\',\n            ),\n        ),\n        actions=[\n            URIImagemapAction(\n                link_uri=\'https://example.com/\',\n                area=ImagemapArea(\n                    x=0, y=0, width=520, height=1040\n                )\n            ),\n            MessageImagemapAction(\n                text=\'hello\',\n                area=ImagemapArea(\n                    x=520, y=0, width=520, height=1040\n                )\n            )\n        ]\n    )\n\nTemplateSendMessage - ButtonsTemplate\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n    buttons_template_message = TemplateSendMessage(\n        alt_text=\'Buttons template\',\n        template=ButtonsTemplate(\n            thumbnail_image_url=\'https://example.com/image.jpg\',\n            title=\'Menu\',\n            text=\'Please select\',\n            actions=[\n                PostbackAction(\n                    label=\'postback\',\n                    display_text=\'postback text\',\n                    data=\'action=buy&itemid=1\'\n                ),\n                MessageAction(\n                    label=\'message\',\n                    text=\'message text\'\n                ),\n                URIAction(\n                    label=\'uri\',\n                    uri=\'http://example.com/\'\n                )\n            ]\n        )\n    )\n\nTemplateSendMessage - ConfirmTemplate\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n    confirm_template_message = TemplateSendMessage(\n        alt_text=\'Confirm template\',\n        template=ConfirmTemplate(\n            text=\'Are you sure?\',\n            actions=[\n                PostbackAction(\n                    label=\'postback\',\n                    display_text=\'postback text\',\n                    data=\'action=buy&itemid=1\'\n                ),\n                MessageAction(\n                    label=\'message\',\n                    text=\'message text\'\n                )\n            ]\n        )\n    )\n\nTemplateSendMessage - CarouselTemplate\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n    carousel_template_message = TemplateSendMessage(\n        alt_text=\'Carousel template\',\n        template=CarouselTemplate(\n            columns=[\n                CarouselColumn(\n                    thumbnail_image_url=\'https://example.com/item1.jpg\',\n                    title=\'this is menu1\',\n                    text=\'description1\',\n                    actions=[\n                        PostbackAction(\n                            label=\'postback1\',\n                            display_text=\'postback text1\',\n                            data=\'action=buy&itemid=1\'\n                        ),\n                        MessageAction(\n                            label=\'message1\',\n                            text=\'message text1\'\n                        ),\n                        URIAction(\n                            label=\'uri1\',\n                            uri=\'http://example.com/1\'\n                        )\n                    ]\n                ),\n                CarouselColumn(\n                    thumbnail_image_url=\'https://example.com/item2.jpg\',\n                    title=\'this is menu2\',\n                    text=\'description2\',\n                    actions=[\n                        PostbackAction(\n                            label=\'postback2\',\n                            display_text=\'postback text2\',\n                            data=\'action=buy&itemid=2\'\n                        ),\n                        MessageAction(\n                            label=\'message2\',\n                            text=\'message text2\'\n                        ),\n                        URIAction(\n                            label=\'uri2\',\n                            uri=\'http://example.com/2\'\n                        )\n                    ]\n                )\n            ]\n        )\n    )\n\nTemplateSendMessage - ImageCarouselTemplate\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n    image_carousel_template_message = TemplateSendMessage(\n        alt_text=\'ImageCarousel template\',\n        template=ImageCarouselTemplate(\n            columns=[\n                ImageCarouselColumn(\n                    image_url=\'https://example.com/item1.jpg\',\n                    action=PostbackAction(\n                        label=\'postback1\',\n                        display_text=\'postback text1\',\n                        data=\'action=buy&itemid=1\'\n                    )\n                ),\n                ImageCarouselColumn(\n                    image_url=\'https://example.com/item2.jpg\',\n                    action=PostbackAction(\n                        label=\'postback2\',\n                        display_text=\'postback text2\',\n                        data=\'action=buy&itemid=2\'\n                    )\n                )\n            ]\n        )\n    )\n\nFlexSendMessage\n^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n    flex_message = FlexSendMessage(\n        alt_text=\'hello\',\n        contents=BubbleContainer(\n            direction=\'ltr\',\n            hero=ImageComponent(\n                url=\'https://example.com/cafe.jpg\',\n                size=\'full\',\n                aspect_ratio=\'20:13\',\n                aspect_mode=\'cover\',\n                action=URIAction(uri=\'http://example.com\', label=\'label\')\n            )\n        )\n    )\n\n\xe2\x80\xbb You can pass a **dict** to FlexSendMessage#contents as follows:\n\n.. code:: python\n\n    flex_message = FlexSendMessage(\n        alt_text=\'hello\',\n        contents={\n            \'type\': \'bubble\',\n            \'direction\': \'ltr\',\n            \'hero\': {\n                \'type\': \'image\',\n                \'url\': \'https://example.com/cafe.jpg\',\n                \'size\': \'full\',\n                \'aspectRatio\': \'20:13\',\n                \'aspectMode\': \'cover\',\n                \'action\': { \'type\': \'uri\', \'uri\': \'http://example.com\', \'label\': \'label\' }\n            }\n        }\n    )\n\nThus, You can send a JSON designed with `Flex Message Simulator <https://developers.line.biz/console/fx/>`__.\n\nWith QuickReply\n^^^^^^^^^^^^^^^\n\n.. code:: python\n\n    text_message = TextSendMessage(text=\'Hello, world\',\n                                   quick_reply=QuickReply(items=[\n                                       QuickReplyButton(action=MessageAction(label="label", text="text"))\n                                   ]))\n\nWebhook\n-------\n\nWebhookParser\n~~~~~~~~~~~~~\n\n\xe2\x80\xbb You can use WebhookParser\n\n\\_\\_init\\_\\_(self, channel\\_secret)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n    parser = linebot.WebhookParser(\'YOUR_CHANNEL_SECRET\')\n\nparse(self, body, signature, as_payload=False)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nParses the webhook body, and returns a list of Event objects or a WebhookPayload object (depending on as_payload).\nIf the signature does NOT match, ``InvalidSignatureError`` is raised.\n\n.. code:: python\n\n    events = parser.parse(body, signature)\n\n    for event in events:\n        do_something(event)\n\n.. code:: python\n\n    payload = parser.parse(body, signature, as_payload=True)\n\n    for event in payload.events:\n        do_something(payload.event, payload.destination)\n\nWebhookHandler\n~~~~~~~~~~~~~~\n\n\xe2\x80\xbb You can use WebhookHandler\n\n\\_\\_init\\_\\_(self, channel\\_secret)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n    handler = linebot.WebhookHandler(\'YOUR_CHANNEL_SECRET\')\n\nhandle(self, body, signature)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nHandles webhooks with **handlers** added\nby the decorators `add <#add-self-event-message-none>`__ and `default <#default-self>`__.\nIf the signature does NOT match, ``InvalidSignatureError`` is raised.\n\n.. code:: python\n\n    handler.handle(body, signature)\n\nadd(self, event, message=None)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nAdd a **handler** method by using this decorator.\n\n.. code:: python\n\n    @handler.add(MessageEvent, message=TextMessage)\n    def handle_message(event):\n        line_bot_api.reply_message(\n            event.reply_token,\n            TextSendMessage(text=event.message.text))\n\nWhen the event is an instance of MessageEvent and event.message is an instance of TextMessage,\nthis handler method is called.\n\n.. code:: python\n\n    @handler.add(MessageEvent)\n    def handle_message(event, destination):\n        # do something\n\nIf the arity of the handler method is more than one,\na destination property in a webhook request is passed to it as the second argument.\n\n.. code:: python\n\n    @handler.add(FollowEvent)\n    def handle_follow():\n        # do something\n\nIf the arity of the handler method is zero, the handler method is called with no arguments.\n\ndefault(self)\n^^^^^^^^^^^^^\n\nSet the default **handler** method by using this decorator.\n\n.. code:: python\n\n    @handler.default()\n    def default(event):\n        print(event)\n\nIf there is no handler for an event, this default handler method is called.\n\nWebhookPayload\n~~~~~~~~~~~~~~~\n\nhttps://developers.line.biz/en/reference/messaging-api/#request-body\n\n- WebhookPayload\n    - destination\n    - events: list[`Event <#event>`__]\n\nWebhook event object\n~~~~~~~~~~~~~~~~~~~~\n\nhttps://developers.line.biz/en/reference/messaging-api/#webhook-event-objects\n\nThe following classes are found in the ``linebot.models`` package.\n\n`Event <https://line-bot-sdk-python.readthedocs.io/en/stable/linebot.models.html#module-linebot.models.events>`__\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n- MessageEvent\n    - type\n    - timestamp\n    - source: `Source <#source>`__\n    - reply\\_token\n    - message: `Message <#message>`__\n- FollowEvent\n    - type\n    - timestamp\n    - source: `Source <#source>`__\n    - reply\\_token\n- UnfollowEvent\n    - type\n    - timestamp\n    - source: `Source <#source>`__\n- JoinEvent\n    - type\n    - timestamp\n    - source: `Source <#source>`__\n    - reply\\_token\n- LeaveEvent\n    - type\n    - timestamp\n    - source: `Source <#source>`__\n- PostbackEvent\n    - type\n    - timestamp\n    - source: `Source <#source>`__\n    - reply\\_token\n    - postback: Postback\n        - data\n        - params: dict\n- BeaconEvent\n    - type\n    - timestamp\n    - source: `Source <#source>`__\n    - reply\\_token\n    - beacon: Beacon\n        - type\n        - hwid\n        - device_message\n- MemberJoinedEvent\n    - type\n    - timestamp\n    - source: `Source <#source>`__\n    - reply\\_token\n    - joined: Joined\n- MemberLeftEvent\n    - type\n    - timestamp\n    - source: `Source <#source>`__\n    - reply\\_token\n    - left: Left\n- AccountLinkEvent\n    - type\n    - timestamp\n    - source: `Source <#source>`__\n    - reply\\_token\n    - link: Link\n- ThingsEvent\n    - type\n    - timestamp\n    - source: `Source <#source>`__\n    - reply\\_token\n    - things: DeviceLink | DeviceUnlink | ScenarioResult\n\nSource\n^^^^^^\n\n- SourceUser\n    - type\n    - user\\_id\n- SourceGroup\n    - type\n    - group\\_id\n    - user\\_id\n- SourceRoom\n    - type\n    - room\\_id\n    - user\\_id\n\nMessage\n^^^^^^^\n\n- TextMessage\n    - type\n    - id\n    - text\n- ImageMessage\n    - type\n    - id\n    - content_provider\n- VideoMessage\n    - type\n    - id\n    - duration\n    - content_provider\n- AudioMessage\n    - type\n    - id\n    - duration\n    - content_provider\n- LocationMessage\n    - type\n    - id\n    - title\n    - address\n    - latitude\n    - longitude\n- StickerMessage\n    - type\n    - id\n    - package\\_id\n    - sticker\\_id\n- FileMessage\n    - type\n    - id\n    - file\\_size\n    - file\\_name\n\nHints\n-----\n\nExamples\n~~~~~~~~\n\n`simple-server-echo <https://github.com/line/line-bot-sdk-python/tree/master/examples/simple-server-echo>`__\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nSample echo-bot using\n`wsgiref.simple\\_server <https://docs.python.org/3/library/wsgiref.html>`__\n\n`flask-echo <https://github.com/line/line-bot-sdk-python/tree/master/examples/flask-echo>`__\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nSample echo-bot using `Flask <http://flask.pocoo.org/>`__\n\n`flask-kitchensink <https://github.com/line/line-bot-sdk-python/tree/master/examples/flask-kitchensink>`__\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nSample bot using `Flask <http://flask.pocoo.org/>`__\n\nAPI documentation\n-----------------\n\n::\n\n    $ cd docs\n    $ make html\n    $ open build/html/index.html\n\nOR |Documentation Status|\n\nHelp and media\n--------------\nFAQ: https://developers.line.biz/en/faq/\n\nCommunity Q&A: https://www.line-community.me/questions\n\nNews: https://developers.line.biz/en/news/\n\nTwitter: @LINE_DEV \n\nVersioning\n----------\nThis project respects semantic versioning\n\nSee http://semver.org/\n\nContributing\n------------\nPlease check `CONTRIBUTING <CONTRIBUTING.md>`__ before making a contribution.\n\nFor SDK developers\n------------------\n\nFirst install for development.\n\n::\n\n    $ pip install -r requirements-dev.txt\n\nRun tests\n~~~~~~~~~\n\nTest by using tox. We test against the following versions.\n\n-  2.7\n-  3.4\n-  3.5\n-  3.6\n-  3.7\n\nTo run all tests and to run ``flake8`` against all versions, use:\n\n::\n\n    tox\n\nTo run all tests against version 2.7, use:\n\n::\n\n    $ tox -e py27\n\nTo run a test against version 2.7 and against a specific file, use:\n\n::\n\n    $ tox -e py27 -- tests/test_webhook.py\n\nAnd more... TBD\n\n.. |Build Status| image:: https://travis-ci.org/line/line-bot-sdk-python.svg?branch=master\n   :target: https://travis-ci.org/line/line-bot-sdk-python\n.. |PyPI version| image:: https://badge.fury.io/py/line-bot-sdk.svg\n   :target: https://badge.fury.io/py/line-bot-sdk\n.. |Documentation Status| image:: https://readthedocs.org/projects/line-bot-sdk-python/badge/?version=stable\n   :target: http://line-bot-sdk-python.readthedocs.io/en/stable\n\nLicense\n--------\n\n::\n\n    Copyright (C) 2016 LINE Corp.\n\n    Licensed under the Apache License, Version 2.0 (the "License");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an "AS IS" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n'