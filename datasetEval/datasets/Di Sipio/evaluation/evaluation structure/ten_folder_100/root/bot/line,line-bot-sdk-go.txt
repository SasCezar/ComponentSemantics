b'# LINE Messaging API SDK for Go\n\n[![Build Status](https://travis-ci.org/line/line-bot-sdk-go.svg?branch=master)](https://travis-ci.org/line/line-bot-sdk-go)\n[![codecov](https://codecov.io/gh/line/line-bot-sdk-go/branch/master/graph/badge.svg)](https://codecov.io/gh/line/line-bot-sdk-go)\n[![GoDoc](http://img.shields.io/badge/go-documentation-blue.svg?style=flat-square)](http://godoc.org/github.com/line/line-bot-sdk-go/linebot)\n[![Go Report Card](https://goreportcard.com/badge/github.com/line/line-bot-sdk-go)](https://goreportcard.com/report/github.com/line/line-bot-sdk-go)\n\n\n## Introduction\nThe LINE Messaging API SDK for Go makes it easy to develop bots using LINE Messaging API, and you can create a sample bot within minutes.\n\n## Documentation\n\nSee the official API documentation for more information.\n\n- English: https://developers.line.biz/en/docs/messaging-api/overview/\n- Japanese: https://developers.line.biz/ja/docs/messaging-api/overview/\n\n## Requirements\n\nThis library requires Go 1.10 or later.\n\n## Installation ##\n\n```sh\n$ go get github.com/line/line-bot-sdk-go/linebot\n```\n\n## Configuration ##\n\n```go\nimport (\n\t"github.com/line/line-bot-sdk-go/linebot"\n)\n\nfunc main() {\n\tbot, err := linebot.New("<channel secret>", "<channel access token>")\n\t...\n}\n\n```\n\n### Configuration with http.Client ###\n\n```go\nclient := &http.Client{}\nbot, err := linebot.New("<channel secret>", "<channel accsss token>", linebot.WithHTTPClient(client))\n...\n```\n\n## How to start ##\n\nThe LINE Messaging API uses the JSON data format.\n```ParseRequest()``` will help you to parse the ```*http.Request``` content and return a slice of Pointer point to Event Object.\n\n```go\nevents, err := bot.ParseRequest(req)\nif err != nil {\n\t// Do something when something bad happened.\n}\n```\n\nThe LINE Messaging API defines 7 types of event - ```EventTypeMessage```, ```EventTypeFollow```, ```EventTypeUnfollow```, ```EventTypeJoin```, ```EventTypeLeave```, ```EventTypePostback```, ```EventTypeBeacon```. You can check the event type by using ```event.Type```\n\n```go\nfor _, event := range events {\n\tif event.Type == linebot.EventTypeMessage {\n\t\t// Do Something...\n\t}\n}\n```\n\n### Receiver ###\n\nTo send a message to a user, group, or room, you need either an ID\n\n```go\nuserID := event.Source.UserID\ngroupID := event.Source.GroupID\nRoomID := event.Source.RoomID\n```\n\nor a reply token.\n\n```go\nreplyToken := event.ReplyToken\n```\n\n### Create message ###\n\nThe LINE Messaging API provides various types of message. To create a message, use ```New<Type>Message()```.\n\n```go\nleftBtn := linebot.NewMessageAction("left", "left clicked")\nrightBtn := linebot.NewMessageAction("right", "right clicked")\n\ntemplate := linebot.NewConfirmTemplate("Hello World", leftBtn, rightBtn)\n\nmessage := linebot.NewTemplateMessage("Sorry :(, please update your app.", template)\n```\n\n### Send message ###\n\nWith an ID, you can send message using ```PushMessage()```\n\n```go\nvar messages []linebot.SendingMessage\n\n// append some message to messages\n\n_, err := bot.PushMessage(ID, messages...).Do()\nif err != nil {\n\t// Do something when some bad happened\n}\n```\n\nWith a reply token, you can reply to messages using ```ReplyMessage()```\n\n```go\nvar messages []linebot.SendingMessage\n\n// append some message to messages\n\n_, err := bot.ReplyMessage(replyToken, messages...).Do()\nif err != nil {\n\t// Do something when some bad happened\n}\n```\n\n## Help and media\n\nFAQ: https://developers.line.biz/en/faq/\n\nCommunity Q&A: https://www.line-community.me/questions\n\nNews: https://developers.line.biz/en/news/\n\nTwitter: @LINE_DEV\n\n\n## Versioning\nThis project respects semantic versioning.\n\nSee http://semver.org/\n\n\n## Contributing\n\nPlease check [CONTRIBUTING](CONTRIBUTING.md) before making a contribution.\n\n\n## License\n\n```\nCopyright (C) 2016 LINE Corp.\n \nLicensed under the Apache License, Version 2.0 (the "License");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \n   http://www.apache.org/licenses/LICENSE-2.0\n \nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an "AS IS" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n'