b'# Mineflayer\n\n[![NPM version](https://badge.fury.io/js/mineflayer.svg)](http://badge.fury.io/js/mineflayer)\n[![Build Status](https://circleci.com/gh/PrismarineJS/mineflayer.svg?style=shield)](https://circleci.com/gh/PrismarineJS/mineflayer)\n[![Discord](https://img.shields.io/badge/chat-on%20discord-brightgreen.svg)](https://discord.gg/GsEFRM8)\n[![Gitter](https://img.shields.io/badge/chat-on%20gitter-brightgreen.svg)](https://gitter.im/PrismarineJS/general)\n[![Irc](https://img.shields.io/badge/chat-on%20irc-brightgreen.svg)](https://irc.gitter.im/)\n[![Greenkeeper badge](https://badges.greenkeeper.io/PrismarineJS/mineflayer.svg)](https://greenkeeper.io/)\n[![Try it on gitpod](https://img.shields.io/badge/try-on%20gitpod-brightgreen.svg)](https://gitpod.io/#https://github.com/PrismarineJS/mineflayer)\n\nCreate Minecraft bots with a powerful, stable, and high level JavaScript API.\n\n**1.13 and 1.14 support are not available, if you\'re interested to contribute on that, read https://github.com/PrismarineJS/prismarine-chunk/issues/57**\n\n## Features\n\n * Supports Minecraft 1.8, 1.9, 1.10, 1.11 and 1.12.\n * Entity knowledge and tracking.\n * Block knowledge. You can query the world around you.\n * Basic physics and movement - currently blocks are either "solid" or "empty".\n * Attacking entities and using vehicles.\n * Inventory management.\n * Crafting, chests, dispensers, enchantment tables.\n * Digging and building.\n * Miscellaneous stuff such as knowing your health and whether it is raining.\n * Activating blocks and using items.\n * Chat.\n\n### Roadmap\n\n * Brewing stands, and anvils.\n * Better physics (support doors, ladders, water, etc).\n\n## Usage\n\nWithout version specified, the version of the server will be guessed automatically, you can set a specific one using the version option.\nFor example `version:"1.8"`.\n\n### Echo Example\n```js\nvar mineflayer = require(\'mineflayer\');\nvar bot = mineflayer.createBot({\n  host: "localhost", // optional\n  port: 25565,       // optional\n  username: "email@example.com", // email and password are required only for\n  password: "12345678",          // online-mode=true servers\n  version: false                 // false corresponds to auto version detection (that\'s the default), put for example "1.8.8" if you need a specific version\n});\nbot.on(\'chat\', function(username, message) {\n  if (username === bot.username) return;\n  bot.chat(message);\n});\nbot.on(\'error\', err => console.log(err))\n```\n\n### Debug\n\nYou can enable some protocol debugging output using `DEBUG` environment variable:\n\n```bash\nDEBUG="minecraft-protocol" node [...]\n```\n\nOn windows :\n```\nset DEBUG=minecraft-protocol\nnode your_script.js\n```\n\n#### More Examples\n\n * In the [examples](https://github.com/PrismarineJS/mineflayer/tree/master/examples) folder.\n * [vogonistic\'s REPL bot](https://gist.github.com/vogonistic/4631678)\n\n## Third Party Plugins\n\nMineflayer is pluggable; anyone can create a plugin that adds an even\nhigher level API on top of Mineflayer.\n\n * [navigate](https://github.com/andrewrk/mineflayer-navigate/) - get around\n   easily using A* pathfinding. [YouTube Demo](https://www.youtube.com/watch?v=O6lQdmRz8eE)\n * [radar](https://github.com/andrewrk/mineflayer-radar/) - web based radar\n   interface using canvas and socket.io. [YouTube Demo](https://www.youtube.com/watch?v=FjDmAfcVulQ)\n * [blockfinder](https://github.com/Darthfett/mineflayer-blockFinder) - find blocks in the 3D world\n * [scaffold](https://github.com/andrewrk/mineflayer-scaffold) - get to\n   a target destination even if you have to build or break blocks to do so.\n   [YouTube Demo](http://youtu.be/jkg6psMUSE0)\n * [auto-auth](https://github.com/G07cha/MineflayerAutoAuth) - chat-based bot authentication\n * [Armor Manager](https://github.com/G07cha/MineflayerArmorManager) - automatic armor managment\n * [Bloodhound](https://github.com/Nixes/mineflayer-bloodhound) - determine who and what is responsible for damage to another entity\n * [tps](https://github.com/SiebeDW/mineflayer-tps) - get the current tps (processed tps)\n\n## Projects Using Mineflayer\n\n * [rom1504/rbot](https://github.com/rom1504/rbot)\n   - [YouTube - building a spiral staircase](https://www.youtube.com/watch?v=UM1ZV5200S0)\n   - [YouTube - replicating a building](https://www.youtube.com/watch?v=0cQxg9uDnzA)\n * [Darthfett/Helperbot](https://github.com/Darthfett/Helperbot)\n * [vogonistic/voxel](https://github.com/vogonistic/mineflayer-voxel) - visualize what\n   the bot is up to using voxel.js\n * [JonnyD/Skynet](https://github.com/JonnyD/Skynet) -  log player activity onto an online API\n * [MinecraftChat](https://github.com/rom1504/MinecraftChat) (last open source version, built by AlexKvazos) -  Minecraft web based chat client <https://minecraftchat.net/>\n * [Cheese Bot](https://github.com/Minecheesecraft/Cheese-Bot) - Plugin based bot with a clean GUI. Made with Node-Webkit. http://bot.ezcha.net/\n * [Chaoscraft](https://github.com/schematical/chaoscraft) - Minecraft bot using genetic algorithms, see [its youtube videos](https://www.youtube.com/playlist?list=PLLkpLgU9B5xJ7Qy4kOyBJl5J6zsDIMceH)\n\n## Installation\n\n`npm install mineflayer`\n\n## Documentation\n\n * See [docs/api.md](https://github.com/PrismarineJS/mineflayer/blob/master/docs/api.md).\n * See [docs/history.md](https://github.com/PrismarineJS/mineflayer/blob/master/docs/history.md).\n * See [examples/](https://github.com/PrismarineJS/mineflayer/tree/master/examples).\n * See [docs/unstable_api.md](https://github.com/PrismarineJS/mineflayer/blob/master/docs/unstable_api.md).\n * See [docs/contribute.md](https://github.com/PrismarineJS/mineflayer/blob/master/docs/contribute.md).\n\n## Contribute\n\nPlease read https://github.com/PrismarineJS/prismarine-contribute\n\n## Testing\n\nSome setup is required after first cloning the project but after that is done it\'s very easy to run them.\n\n### Setup\n\nIn order to get all tests to run successfully you must first:\n\n1. create a new folder in which to store minecraft server jars\n2. set the MC_SERVER_JAR_DIR to this folder\n\nExample:\n\n1. `mkdir server_jars`\n2. `export MC_SERVER_JAR_DIR=/full/path/to/server_jars`\n\nWhere the "/full/path/to/" is the fully qualified path name.\n\n### Ongoing\n\nSimply run: `npm test`\n\n## Updating to a newer protocol version\n\n1. Wait for a new version of\n   [node-minecraft-protocol](https://github.com/PrismarineJS/node-minecraft-protocol)\n   to be released which supports the new Minecraft version.\n2. `npm install --save minecraft-protocol@latest`\n3. Apply the [protocol changes](http://wiki.vg/Protocol_History) where necessary.\n4. Run the test suite. See Testing above.\n\n## Licence\n\n[MIT](LICENCE)\n'