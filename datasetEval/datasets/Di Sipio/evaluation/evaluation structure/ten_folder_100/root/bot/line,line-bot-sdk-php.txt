b'# LINE Messaging API SDK for PHP\n\n[![Build Status](https://travis-ci.org/line/line-bot-sdk-php.svg?branch=master)](https://travis-ci.org/line/line-bot-sdk-php)\n\n\n## Introduction\n\nThe LINE Messaging API SDK for PHP makes it easy to develop bots using LINE Messaging API, and you can create a sample bot within minutes.\n\n\n## Documentation\n\nSee the official API documentation for more information.\n\n- English: https://developers.line.biz/en/docs/messaging-api/overview/\n- Japanese: https://developers.line.biz/ja/docs/messaging-api/overview/\n\n\n## Requirements\n\n- PHP 5.5 or later\n\n\n## Installation\n\nInstall the LINE Messaging API SDK using [Composer](https://getcomposer.org/).\n\n```\n$ composer require linecorp/line-bot-sdk\n```\n\n## Getting started\n\n### Create the bot client instance\n\nThe bot client instance is a handler of the Messaging API.\n\n```php\n$httpClient = new \\LINE\\LINEBot\\HTTPClient\\CurlHTTPClient(\'<channel access token>\');\n$bot = new \\LINE\\LINEBot($httpClient, [\'channelSecret\' => \'<channel secret>\']);\n```\n\nThe constructor of the bot client requires an instance of `HTTPClient`.\nThis library provides `CurlHTTPClient` by default.\n\n### Call API\n\nYou can call an API through the bot client instance.\n\nA very simple example:\n\n```php\n$response = $bot->replyText(\'<reply token>\', \'hello!\');\n```\n\nThis procedure sends a message to the destination that is associated with `<reply token>`.\n\nA more advanced example:\n\n```php\n$textMessageBuilder = new \\LINE\\LINEBot\\MessageBuilder\\TextMessageBuilder(\'hello\');\n$response = $bot->replyMessage(\'<reply token>\', $textMessageBuilder);\nif ($response->isSucceeded()) {\n    echo \'Succeeded!\';\n    return;\n}\n\n// Failed\necho $response->getHTTPStatus() . \' \' . $response->getRawBody();\n```\n\n`LINEBot#replyMessage()` takes the reply token and `MessageBuilder`.\nThe method sends a message that is built by `MessageBuilder` to the destination.\n\n## Components\n\n### MessageBuilder\n\nThe type of message that is sent depends on the type of instance of `MessageBuilder`.\nFor example, the method sends a text message if you pass `TextMessageBuilder` and it sends an image message if you pass `ImageMessageBuilder`.\n\nFor more detailed information on `MessageBuilder`, see `\\LINE\\LINEBot\\MessageBuilder` and the namespace.\n\nOther methods that take `MessageBuilder` behave in the same way.\n\n### Response\n\nMethods that call API returns `Response`. A `Response` instance has following methods:\n\n- `Response#isSucceeded()`\n- `Response#getHTTPStatus()`\n- `Response#getRawBody()`\n- `Response#getJSONDecodedBody()`\n- `Response#getHeader($name)`\n- `Response#getHeaders()`\n\nYou can use these methods to check the response status and take response body.\n\n#### `Response#isSucceeded()`\n\nReturns a Boolean value. The return value represents whether the request succeeded or not.\n\n#### `Response#getHTTPStatus()`\n\nReturns the HTTP status code of a response.\n\n#### `Response#getRawBody()`\n\nReturns the body of the response as raw data (a byte string).\n\n#### `Response#getJSONDecodedBody()`\n\nReturns the body that is decoded in JSON. This body is an array.\n\n#### `Response#getHeader($name)`\n\nThis method returns a response header string, or null if the response does not have a header of that name.\n\n#### `Response#getHeaders()`\n\nThis method returns all of the response headers as string array.\n\n### Webhook\n\nLINE\'s server sends user actions (such as a message, image, or location) to your bot server.\nRequest of that contains event(s); event is action of the user.\n\nThe following shows how the webhook is handled:\n\n1. Receive webhook from LINE\'s server.\n2. Parse request payload by `LINEBot#parseEventRequest($body, $signature)`.\n3. Iterate parsed events and some react as you like.\n\nThe following examples show how webhooks are handled:\n\n- [EchoBot: Route.php](/examples/EchoBot/src/LINEBot/EchoBot/Route.php)\n- [KitchenSink: Route.php](/examples/KitchenSink/src/LINEBot/KitchenSink/Route.php)\n\nMore information\n--\n\nFor more information, see the [official API documents](#documentation) and PHPDoc.\nIf it\'s your first time using this library, we recommend taking a look at `examples` and the PHPDoc of `\\LINE\\LINEBot`.\n\nHints\n--\n\n### Examples\n\nThis repository contains two examples of how to use the LINE Messaging API.\n\n#### [EchoBot](/examples/EchoBot)\n\nA simple sample implementation. This application reacts to text messages that are sent from users.\n\n#### [KitchenSink](/examples/KitchenSink)\n\nA full-stack (and slightly complex) sample implementation. This application demonstrates a practical use of the LINE Messaging API.\n\n### PHPDoc\n\n[https://line.github.io/line-bot-sdk-php/](https://line.github.io/line-bot-sdk-php/)\n\nThis library provides PHPDoc to describe how to use the methods. You can generate the documentation using [apigen](http://www.apigen.org/) using the following command.\n\n```\n$ make doc\n```\n\nThe HTML files are generated in `docs/`.\n\n### Official API documentation\n\n[Official API documents](#documentation) shows the detail of  Messaging API and fundamental usage of SDK.\n\nNotes\n--\n\n### How to switch the HTTP client implementation\n\n1. Implement `\\LINE\\LINEBot\\HTTPClient`\n2. Pass the implementation to the constructor of `\\LINE\\LINEBot`\n\nPlease refer [CurlHTTPClient](/src/LINEBot/HTTPClient/CurlHTTPClient.php) that is the default HTTP client implementation.\n\n\nSee also\n--\n\n### [line-bot-sdk-tiny](./line-bot-sdk-tiny)\n\nA very simple SDK (subset) for the LINE Messaging API for PHP.\nline-bot-sdk-tiny provides a simple interface and functions which makes it a good way to learn how to use the LINE Messaging API.\n\n## Help and media\n\nFAQ: https://developers.line.biz/en/faq/\n\nCommunity Q&A: https://www.line-community.me/questions\n\nNews: https://developers.line.biz/en/news/\n\nTwitter: [@LINE_DEV](https://twitter.com/LINE_DEV)\n\n\n## Versioning\n\nThis project respects semantic versioning.\n\nSee http://semver.org/\n\n\n## Contributing\n\nPlease check [CONTRIBUTING](CONTRIBUTING.md) before making a contribution.\n\nFor hacking instructions, please refer [HACKING.md](/HACKING.md).\n\n\n## License\n\n```\nCopyright 2016 LINE Corporation\n\nLicensed under the Apache License, version 2.0 (the "License"); \nyou may not use this file except in compliance with the License. \nYou may obtain a copy of the License at\n\n  https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an "AS IS" BASIS, \nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. \nSee the License for the specific language governing permissions and \nlimitations under the License.\n```\n'