b'Deep Neural Network Library (DNNL)\n========================================================================\n\n> **Note**\n>\n> Starting with version 1.1 the library is renamed to DNNL. Please read\n> [Intel MKL-DNN to DNNL Transition Guide](https://intel.github.io/mkl-dnn/dev_guide_transition_to_dnnl.html).\n\n> **Note**\n>\n> Version 1.0 brings incompatible changes to the 0.20 version. Please read\n> [Version 1.0 Transition Guide](https://intel.github.io/mkl-dnn/dev_guide_transition_to_v1.html).\n\nDeep Neural Network Library (DNNL) is an\nopen-source performance library for deep learning applications. The library\nincludes basic building blocks for neural networks optimized\nfor Intel Architecture Processors and Intel Processor Graphics.\n\nDNNL is intended for deep learning applications and framework\ndevelopers interested in improving application performance\non Intel CPUs and GPUs. Deep learning practitioners should use one of the\napplications enabled with DNNL:\n* [Apache\\* MXNet](https://mxnet.apache.org)\n* [BigDL](https://github.com/intel-analytics/BigDL)\n* [Caffe\\* Optimized for Intel Architecture](https://github.com/intel/caffe)\n* [Chainer\\*](https://chainer.org)\n* [DeepLearning4J\\*](https://deeplearning4j.org)\n* [Intel Nervana Graph](https://github.com/NervanaSystems/ngraph)\n* [MATLAB\\* Deep Learning Toolbox](https://www.mathworks.com/help/deeplearning/)\n* [Menoh\\*](https://github.com/pfnet-research/menoh)\n* [Microsoft\\* Cognitive Toolkit (CNTK)](https://docs.microsoft.com/en-us/cognitive-toolkit)\n* [ONNX Runtime](https://github.com/microsoft/onnxruntime)\n* [OpenVINO(TM) toolkit](https://01.org/openvinotoolkit)\n* [PaddlePaddle\\*](http://www.paddlepaddle.org)\n* [PyTorch\\*](https://pytorch.org/)\n* [Tensorflow\\*](https://www.tensorflow.org)\n\n# Installation\n\nPre-built binaries for Linux\\*, Windows\\*, and macOS\\* are available for download\nin the [releases section](https://github.com/intel/mkl-dnn/releases). Package\nnames use the following convention:\n\n| OS      | Package name\n| :------ | :-----------\n| Linux   | `dnnl_lnx_<version>_cpu_<cpu runtime>[_gpu_<gpu runtime>].tgz`\n| Windows | `dnnl_win_<version>_cpu_<cpu runtime>[_gpu_<gpu runtime>].zip`\n| macOS   | `dnnl_mac_<version>_cpu_<cpu runtime>.tgz`\n\nSeveral packages are available for each operating system to ensure\ninteroperability with CPU or GPU runtime libraries used by the application.\n\n| Configuration | Dependency\n| :-------------| :---------\n| `cpu_iomp`    | Intel OpenMP runtime\n| `cpu_gomp`    | GNU\\* OpenMP runtime\n| `cpu_vcomp`   | Microsoft Visual C OpenMP runtime\n| `cpu_tbb`     | Threading Building Blocks\n\nThe packages do not include library dependencies and these need to be resolved\nin the application at build time. See the\n[System Requirements](#system-requirements) section below and the\n[Build Options](http://intel.github.io/mkl-dnn/dev_guide_build_options.html)\nsection in the [developer guide](http://intel.github.io/mkl-dnn) for more\ndetails on CPU and GPU runtimes.\n\nIf the configuration you need is not available, you can\n[build the library from source](http://intel.github.io/mkl-dnn/dev_guide_build.html).\n\n# Contributing\nWe welcome community contributions to DNNL. If you have an idea on how\nto improve the library:\n\n* For changes impacting the public API, submit\n  an [RFC pull request](CONTRIBUTING.md#RFC_pull_requests).\n* Ensure that the changes are consistent with the\n [code contribution guidelines](CONTRIBUTING.md#code_contribution_guidelines)\n and [coding style](CONTRIBUTING.md#coding_style).\n* Ensure that you can build the product and run all the examples with your\n  patch.\n* Submit a [pull request](https://github.com/intel/mkl-dnn/pulls).\n\nFor additional details, see [contribution guidelines](CONTRIBUTING.md).\n\nThis project is intended to be a safe, welcoming space for collaboration, and\ncontributors are expected to adhere to the\n[Contributor Covenant](CODE_OF_CONDUCT.md) code of conduct.\n\n# Support\nPlease submit your questions, feature requests, and bug reports on the\n[GitHub issues](https://github.com/intel/mkl-dnn/issues) page.\n\nYou may reach out to project maintainers privately at dnnl.maintainers@intel.com.\n\n> **WARNING**\n>\n> The following functionality has preview status and might be changed without\n> prior notification in future releases:\n> * [Primitive cache](https://intel.github.io/mkl-dnn/dev_guide_primitive_cache.html)\n\n# License\nDNNL is licensed under\n[Apache License Version 2.0](http://www.apache.org/licenses/LICENSE-2.0). This\nsoftware includes the following third-party components:\n* [Xbyak](https://github.com/herumi/xbyak) distributed under\n[3-clause BSD license](src/cpu/xbyak/COPYRIGHT)\n* [gtest](https://github.com/google/googletest) distributed under\n[3-clause BSD license](tests/gtests/gtest/LICENSE)\n* [ittnotify](https://github.com/intel/IntelSEAPI) distributed under\n[3-clause BSD license](src/cpu/jit_utils/jitprofiling/LICENSE.BSD)\n* [CMake](https://github.com/Kitware/CMake) distributed under\n[3-clause BSD license](cmake/Copyright.txt)\n* [MathJax](https://github.com/mathjax/MathJax) distributed under\n[Apache License Version 2.0](doc/assets/mathjax/LICENSE)\n* [Boost C++ Libraries](https://www.boost.org/) distributed under\n[Boost Software License, Version 1.0](src/common/LICENSE_1_0)\n\n# Documentation\n* [Developer guide](https://intel.github.io/mkl-dnn) explains programming\nmodel, supported functionality, details of primitives implementations and\nincludes annotated examples.\n* [API reference](https://intel.github.io/mkl-dnn/modules.html) provides\ncomprehensive reference of the library API.\n\n# System Requirements\nDNNL supports systems based on Intel 64 architecture or\ncompatible processors.\n\nThe library is optimized for the following CPUs:\n* Intel Atom processor with Intel SSE4.1 support\n* 4th, 5th, 6th, 7th, and 8th generation Intel Core(TM) processor\n* Intel Xeon(R) processor E3, E5, and E7 family (formerly Sandy Bridge,\n  Ivy Bridge, Haswell, and Broadwell)\n* Intel Xeon Phi(TM) processor (formerly Knights Landing and Knights Mill)\n* Intel Xeon Scalable processor (formerly Skylake and Cascade Lake)\n* future Intel Xeon Scalable processor (code name Cooper Lake)\n\nDNNL detects instruction set architecture (ISA) in the runtime and uses\njust-in-time (JIT) code generation to deploy the code optimized\nfor the latest supported ISA.\n\nThe library is optimized for the following GPUs:\n* Intel HD Graphics\n* Intel UHD Graphics\n* Intel Iris Plus Graphics\n\n## Requirements for Building from Source\nDNNL supports systems meeting the following requirements:\n* Operating system with Intel 64 architecture support\n* C++ compiler with C++11 standard support\n* [CMake](https://cmake.org/download/) 2.8.11 or later\n* [Doxygen](http://www.doxygen.nl/download.html#srcbin) 1.8.5 or later to build\ndocumentation\n\nConfigurations of CPU and GPU engines may introduce additional build time\ndependencies.\n\n### CPU Engine\nIntel Architecture Processors and compatible devices are supported by the\nDNNL CPU engine. The CPU engine is built by default and cannot\nbe disabled at build time. The engine can be configured to use the OpenMP or\nTBB threading runtime. The following additional requirements apply:\n* OpenMP runtime requires C++ compiler with OpenMP 2.0 or later standard support\n* TBB runtime requires\n[Threading Building Blocks (TBB)](https://www.threadingbuildingblocks.org/)\n2017 or later.\n\nSome implementations rely on OpenMP 4.0 SIMD extensions, and we recommend using\nthe Intel C++ Compiler for the best performance results.\n\n### GPU Engine\nIntel Processor Graphics is supported by the DNNL GPU engine. The GPU\nengine is disabled in the default build configuration. The following\nadditional requirements apply when GPU engine is enabled:\n* OpenCL\\* runtime library (OpenCL version 1.2 or later)\n* OpenCL driver (with kernel language support for OpenCL C 2.0 or later)\n  with Intel subgroups extension support\n\n### Runtime Dependencies\nWhen DNNL is built from source, the library runtime dependencies\nand specific versions are defined by the build environment.\n\n#### Linux\nCommon dependencies:\n* System C/C++ runtime (libc.so, libstdc++.so)\n* Dynamic Linking Library (libdl.so)\n* C Math Library (libm.so)\n* POSIX Threads Library (libpthread.so)\n\nRuntime specific dependencies:\n\n| Runtime configuration    | Compiler                      | Dependency\n| :----------------------- | :---------------------------- | :---------\n| `DNNL_CPU_RUNTIME=OMP` | GCC                           | GNU OpenMP runtime (libgomp.so)\n| `DNNL_CPU_RUNTIME=OMP` | Intel C/C++ Compiler          | Intel OpenMP runtime (libiomp5.so)\n| `DNNL_CPU_RUNTIME=OMP` | Clang                         | Intel OpenMP runtime (libiomp5.so)\n| `DNNL_CPU_RUNTIME=TBB` | any                           | Threading Building Blocks (libtbb.so)\n| `DNNL_GPU_RUNTIME=OCL` | any                           | OpenCL runtime (libOpenCL.so)\n\n#### Windows\nCommon dependencies:\n* Microsoft Visual C++ Redistributable (msvcrt.dll)\n\nRuntime specific dependencies:\n\n| Runtime configuration    | Compiler                      | Dependency\n| :----------------------- | :---------------------------- | :---------\n| `DNNL_CPU_RUNTIME=OMP` | Microsoft Visual C++ Compiler | No additional requirements\n| `DNNL_CPU_RUNTIME=OMP` | Intel C/C++ Compiler          | Intel OpenMP runtime (iomp5.dll)\n| `DNNL_CPU_RUNTIME=TBB` | any                           | Threading Building Blocks (tbb.dll)\n| `DNNL_GPU_RUNTIME=OCL` | any                           | OpenCL runtime (OpenCL.dll)\n\n#### macOS\nCommon dependencies:\n* System C/C++ runtime (libc++.dylib, libSystem.dylib)\n\nRuntime specific dependencies:\n\n| Runtime configuration    | Compiler                      | Dependency\n| :----------------------- | :---------------------------- | :---------\n| `DNNL_CPU_RUNTIME=OMP` | Intel C/C++ Compiler          | Intel OpenMP runtime (libiomp5.dylib)\n| `DNNL_CPU_RUNTIME=TBB` | any                           | Threading Building Blocks (libtbb.dylib)\n\n### Validated Configurations\nCPU engine was validated on RedHat\\* Enterprise Linux 7 with\n* GNU Compiler Collection 4.8, 5.4, 6.1, 7.2, and 8.1\n* Clang\\* 3.8.0\n* [Intel C/C++ Compiler](https://software.intel.com/en-us/intel-parallel-studio-xe)\n  17.0, 18.0, and 19.0\n\non Windows Server\\* 2012 R2 with\n* Microsoft Visual C++ 14.0 (Visual Studio 2015 Update 3)\n* [Intel C/C++ Compiler](https://software.intel.com/en-us/intel-parallel-studio-xe)\n  17.0 and 19.0\n\non macOS 10.13 (High Sierra) with\n* Apple LLVM version 9.2 (XCode 9.2)\n* [Intel C/C++ Compiler](https://software.intel.com/en-us/intel-parallel-studio-xe)\n  18.0 and 19.0\n\nGPU engine was validated on Ubuntu\\* 18.04 with\n* GNU Compiler Collection 6.1 and 8.1\n* Clang 3.8.1\n* [Intel C/C++ Compiler](https://software.intel.com/en-us/intel-parallel-studio-xe)\n  19.0\n* [Intel SDK for OpenCL applications](https://software.intel.com/en-us/intel-opencl) 2019 Update 3\n* [Intel Graphics Compute Runtime for OpenCL](https://github.com/intel/compute-runtime/releases) 19.37.14191\n\non Windows Server 2019 with\n* Microsoft Visual C++ 14.0 (Visual Studio 2015 Update 3)\n* [Intel C/C++ Compiler](https://software.intel.com/en-us/intel-parallel-studio-xe)\n  19.0\n* [Intel SDK for OpenCL applications](https://software.intel.com/en-us/intel-opencl) 2019 Update 3\n* [Intel Graphics - Windows 10 DCH Drivers](https://downloadcenter.intel.com/download/28783/Intel-Graphics-Windows-10-DCH-Drivers) 26.20.100.6709\n\n## Requirements for Pre-built Binaries\n\n### Linux\nCommon dependencies:\n* GCC 4.8 or later\n\nRuntime specific dependencies:\n\n| Runtime configuration | Requirements\n| :-------------------- | :-----------\n| `cpu_gomp`            | No additional requirements\n| `cpu_iomp`            | Intel OpenMP runtime for Intel C/C++ Compiler 17.0 or later\n| `cpu_tbb`             | Threading Building Blocks 2017 or later\n\n### Windows\nCommon dependencies:\n* Microsoft Visual C++ Redistributable 2015 or later\n\nRuntime specific dependencies:\n\n| Runtime configuration | Requirements\n| :-------------------- | :-----------\n| `cpu_vcomp`           | No additional requirements\n| `cpu_iomp`            | Intel OpenMP runtime for Intel C/C++ Compiler 17.0 or later\n| `cpu_tbb`             | Threading Building Blocks 2017 or later\n\n### macOS\nCommon dependencies:\n* macOS 10.13 (High Sierra) or later\n\nRuntime specific dependencies:\n\n| Runtime configuration | Requirements\n| :-------------------- | :-----------\n| `cpu_iomp`            | Intel OpenMP runtime for Intel C/C++ Compiler 17.0 or later\n| `cpu_tbb`             | Threading Building Blocks 2017 or later\n\n--------\n\n[Legal Information](doc/legal_information.md)\n'