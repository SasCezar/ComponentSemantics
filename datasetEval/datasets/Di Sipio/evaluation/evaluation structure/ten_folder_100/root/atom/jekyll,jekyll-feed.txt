b'# Jekyll Feed plugin\n\nA Jekyll plugin to generate an Atom (RSS-like) feed of your Jekyll posts\n\n[![Build Status](https://travis-ci.org/jekyll/jekyll-feed.svg)](https://travis-ci.org/jekyll/jekyll-feed) [![Gem Version](https://badge.fury.io/rb/jekyll-feed.svg)](https://badge.fury.io/rb/jekyll-feed)\n\n## Installation\n\nAdd this line to your site\'s Gemfile:\n\n```ruby\ngem \'jekyll-feed\'\n```\n\nAnd then add this line to your site\'s `_config.yml`:\n\n```yml\nplugins:\n  - jekyll-feed\n```\n\n:warning: If you are using Jekyll < 3.5.0 use the `gems` key instead of `plugins`.\n\n## Usage\n\nThe plugin will automatically generate an Atom feed at `/feed.xml`.\n\n### Optional configuration options\n\nThe plugin will automatically use any of the following configuration variables, if they are present in your site\'s `_config.yml` file.\n\n* `title` or `name` - The title of the site, e.g., "My awesome site"\n* `description` - A longer description of what your site is about, e.g., "Where I blog about Jekyll and other awesome things"\n* `url` - The URL to your site, e.g., `https://example.com`. If none is provided, the plugin will try to use `site.github.url`.\n* `author` - Global author information (see below)\n\n### Already have a feed path?\n\nDo you already have an existing feed someplace other than `/feed.xml`, but are on a host like GitHub Pages that doesn\'t support machine-friendly redirects? If you simply swap out `jekyll-feed` for your existing template, your existing subscribers won\'t continue to get updates. Instead, you can specify a non-default path via your site\'s config.\n\n```yml\nfeed:\n  path: atom.xml\n```\n\nTo note, you shouldn\'t have to do this unless you already have a feed you\'re using, and you can\'t or wish not to redirect existing subscribers.\n\n### Optional front matter\n\nThe plugin will use the following post metadata, automatically generated by Jekyll, which you can override via a post\'s YAML front matter:\n\n* `date`\n* `title`\n* `excerpt`\n* `id`\n* `category`\n* `tags`\n\nAdditionally, the plugin will use the following values, if present in a post\'s YAML front matter:\n\n* `image` - URL of an image that is representative of the post (can also be passed as `image.path`)\n\n* `author` - The author of the post, e.g., "Dr. Jekyll". If none is given, feed readers will look to the feed author as defined in `_config.yml`. Like the feed author, this can also be an object or a reference to an author in `_data/authors.yml` (see below).\n\n### Author information\n\n*TL;DR: In most cases, put `author: [your name]` in the document\'s front matter, for sites with multiple authors. If you need something more complicated, read on.*\n\nThere are several ways to convey author-specific information. Author information is found in the following order of priority:\n\n1. An `author` object, in the documents\'s front matter, e.g.:\n\n  ```yml\n  author:\n    twitter: benbalter\n  ```\n\n2. An `author` object, in the site\'s `_config.yml`, e.g.:\n\n  ```yml\n  author:\n    twitter: benbalter\n  ```\n\n3. `site.data.authors[author]`, if an author is specified in the document\'s front matter, and a corresponding key exists in `site.data.authors`. E.g., you have the following in the document\'s front matter:\n\n  ```yml\n  author: benbalter\n  ```\n\n  And you have the following in `_data/authors.yml`:\n\n  ```yml\n  benbalter:\n    picture: /img/benbalter.png\n    twitter: jekyllrb\n\n  potus:\n    picture: /img/potus.png\n    twitter: whitehouse\n  ```\n\n  In the above example, the author `benbalter`\'s Twitter handle will be resolved to `@jekyllrb`. This allows you to centralize author information in a single `_data/authors` file for site with many authors that require more than just the author\'s username.\n\n  *Pro-tip: If `authors` is present in the document\'s front matter as an array (and `author` is not), the plugin will use the first author listed.*\n\n4. An author in the document\'s front matter (the simplest way), e.g.:\n\n  ```yml\n  author: benbalter\n  ```\n\n5. An author in the site\'s `_config.yml`, e.g.:\n\n  ```yml\n  author: benbalter\n  ```\n\n### Meta tags\n\nThe plugin exposes a helper tag to expose the appropriate meta tags to support automated discovery of your feed. Simply place `{% feed_meta %}` someplace in your template\'s `<head>` section, to output the necessary metadata.\n\n### SmartyPants\n\nThe plugin uses [Jekyll\'s `smartify` filter](https://jekyllrb.com/docs/templates/) for processing the site title and post titles. This will translate plain ASCII punctuation into "smart" typographic punctuation. This will not render or strip any Markdown you may be using in a title.\n\nJekyll\'s `smartify` filter uses [kramdown](https://kramdown.gettalong.org/options.html) as a processor.  Accordingly, if you do not want "smart" typographic punctuation, disabling them in kramdown in your `_config.yml` will disable them in your feed. For example:\n\n   ```yml\n   kramdown:\n     smart_quotes:               apos,apos,quot,quot\n     typographic_symbols:        {hellip: ...}\n   ```\n\n### Custom styling\n\nWant to style what your feed looks like in the browser? Simply add an XSLT at `/feed.xslt.xml` and Jekyll Feed will link to the stylesheet.\n\n## Why Atom, and not RSS?\n\nGreat question. In short, Atom is a better format. Think of it like RSS 3.0. For more information, see [this discussion on why we chose Atom over RSS 2.0](https://github.com/jekyll/jekyll-rss-feed/issues/2).\n\n## Categories\n\nJekyll Feed can generate feeds for each category. Simply define which categories you\'d like feeds for in your config:\n\n```yml\nfeed:\n  categories:\n    - news\n    - updates\n```\n\n## Collections\n\nJekyll Feed can generate feeds for collections other than the Posts collection. This works best for chronological collections (e.g., collections with dates in the filenames). Simply define which collections you\'d like feeds for in your config:\n\n```yml\nfeed:\n  collections:\n    - changes\n```\n\nBy default, collection feeds will be outputted to `/feed/<COLLECTION>.xml`. If you\'d like to customize the output path, specify a collection\'s custom path as follows:\n\n```yml\nfeed:\n  collections:\n    changes:\n      path: "/changes.xml"\n```\n\nFinally, collections can also have category feeds which are outputted as `/feed/<COLLECTION>/<CATEGORY>.xml`. Specify categories like so:\n\n```yml\nfeed:\n  collections:\n    changes:\n      path: "/changes.xml"\n      categories:\n        - news\n        - updates\n```\n\n## Excerpt Only flag\n\nOptional flag `excerpt_only` allows you to exclude post content from the Atom feed. Default value is `false` for backward compatibility.\n\nWhen in `config.yml` is `true` than all posts in feed will be without `<content>` tags.\n\n```yml\nfeed:\n  excerpt_only: true\n```\n\nThe same flag can be used directly in post file. It will be disable `<content>` tag for selected post.\nSettings in post file has higher priority than in config file.\n\n\n## Contributing\n\n1. Fork it (https://github.com/jekyll/jekyll-feed/fork)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am \'Add some feature\'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n'