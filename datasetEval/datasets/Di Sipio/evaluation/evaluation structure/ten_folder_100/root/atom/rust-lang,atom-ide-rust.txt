b'# IDE-Rust\nRust language support for Atom-IDE, powered by the Rust Language Server (RLS).\n\n![](http://image.ibb.co/gwfQTm/output.gif "Usage Jan-2018")\n\n## Features\n - Auto-completion\n - Diagnostics (errors and warnings from `rustc` and `clippy`, see `clippy_preference` setting)\n - Document outline\n - Go to definition (`ctrl` or `cmd` click)\n - Type information and Documentation on hover (hold `ctrl` or `cmd` for more information)\n - Find references (`ctrl-alt-shift-f` or `cmd-opt-shift-f` also in context menu)\n - Format file with rustfmt (`ctrl-shift-c` or `cmd-shift-c` also in context menu)\n - Format on save (disabled by default, see `atom-ide-ui` settings)\n - Supports rustup default & override toolchains, or manually select rls toolchain in package settings\n - Rls toolchain update checking at startup & every 6 hours thereafter\n - Global Rls configuration for `all_targets`, `clippy_preference`\n - Per-project Rls configuration using `rls.toml` file at project root, see [rls#configuration](https://github.com/rust-lang-nursery/rls#configuration)\n   ```toml\n   # rls.toml\n   features = ["serde"]\n   ```\n - Graceful handling of Rls being missing from the distribution _(which is/was somewhat common on the nightly channel)_\n   * Warns before installing a rust version without Rls or when using an already installed one\n   * Automatic detection of, and prompt to install, the latest working dated release\n - Rust language snippets\n\n## Install\nYou can install from the command line with:\n```\n$ apm install ide-rust\n```\nOr you can install from Settings view by searching for `ide-rust`.\n\nNo other packages or manual setup is required as these will be handled with user prompts after install. However, you may wish to install `rustup` with your OS package manager instead of following prompts to install via [rustup.rs](https://rustup.rs).\n\n## Commands\n- `ide-rust:restart-all-language-servers` Restart all currently active Rls processes\n\n## Multi-crate projects\nA root `Cargo.toml` is required in each atom project, however cargo workspaces can be used to support multiple crates in a single project.\nFor example, a project with *\'rust_foo\'* & *\'rust_bar\'* directories/crates could have the following root `Cargo.toml`\n```toml\n# Cargo.toml\n[workspace]\nmembers = [\n    "rust_foo",\n    "rust_bar",\n]\n```\n\nEven if you only have a single crate in your Atom project, RLS can only detect it if you\nhave a root `Cargo.toml`. If your project is setup such that you have one or more crate nested\nin folders under the root, you can add a root `Cargo.toml` file and setup a Cargo workspace that\nincludes all the crates in the project:\n```toml\n# Cargo.toml\n[workspace]\nmembers = [\n    "foo/bar/rust_foo",\n]\n```\n\n## Overriding Rls\nThe Rls command can be specified manually, for example to run from local source code:\n```cson\n# config.cson\n  ...\n  "ide-rust":\n    rlsCommandOverride: "cargo +nightly run --manifest-path=/rls-src/Cargo.toml"\n```\nWhen set you\'ll be able to see, and remove, this from the package settings. After restarting atom an info message will inform you the override is in place.\n\n![](https://image.ibb.co/jsR65w/rls_Command_Override_Info.png)\n\n## Debugging IDE-Rust\nIf stuff isn\'t working you can try **enabling logging** to debug:\n  * Open the atom console _(ctrl-shift-i)_\n  * Enter `atom.config.set(\'core.debugLSP\', true)`\n  * Reload atom _(ctrl-shift-F5)_\n\nThis will spit out language server message logging into the atom console. Check if requests/responses are being sent or are incorrect. It will also include any Rls stderr messages (as warnings) which may point to Rls bugs.\n\n## License\nMIT License. See the [license](LICENSE) for more details.\n'