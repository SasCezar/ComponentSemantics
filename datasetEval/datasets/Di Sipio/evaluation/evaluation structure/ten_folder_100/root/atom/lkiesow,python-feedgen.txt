b'=============\nFeedgenerator\n=============\n\n.. image:: https://travis-ci.org/lkiesow/python-feedgen.svg?branch=master\n    :target: https://travis-ci.org/lkiesow/python-feedgen\n    :alt: Build Status\n\n.. image:: https://coveralls.io/repos/github/lkiesow/python-feedgen/badge.svg?branch=master\n    :target: https://coveralls.io/github/lkiesow/python-feedgen?branch=master\n    :alt: Test Coverage Status\n\n\nThis module can be used to generate web feeds in both ATOM and RSS format. It\nhas support for extensions. Included is for example an extension to produce\nPodcasts.\n\nIt is licensed under the terms of both, the FreeBSD license and the LGPLv3+.\nChoose the one which is more convenient for you. For more details have a look\nat license.bsd and license.lgpl.\n\nMore details about the project:\n\n- Repository:            https://github.com/lkiesow/python-feedgen\n- Documentation:         https://lkiesow.github.io/python-feedgen/\n- Python Package Index:  https://pypi.python.org/pypi/feedgen/\n\n\n------------\nInstallation\n------------\n\n**Prebuild packages**\n\nIf your distribution includes this project as package, like Fedora Linux does,\nyou can simply use your package manager to install the package. For example::\n\n    $ dnf install python3-feedgen\n\n\n**Using pip**\n\nYou can also use pip to install the feedgen module. Simply run::\n\n    $ pip install feedgen\n\n\n-------------\nCreate a Feed\n-------------\n\nTo create a feed simply instantiate the FeedGenerator class and insert some\ndata::\n\n    >>> from feedgen.feed import FeedGenerator\n    >>> fg = FeedGenerator()\n    >>> fg.id(\'http://lernfunk.de/media/654321\')\n    >>> fg.title(\'Some Testfeed\')\n    >>> fg.author( {\'name\':\'John Doe\',\'email\':\'john@example.de\'} )\n    >>> fg.link( href=\'http://example.com\', rel=\'alternate\' )\n    >>> fg.logo(\'http://ex.com/logo.jpg\')\n    >>> fg.subtitle(\'This is a cool feed!\')\n    >>> fg.link( href=\'http://larskiesow.de/test.atom\', rel=\'self\' )\n    >>> fg.language(\'en\')\n\nNote that for the methods which set fields that can occur more than once in a\nfeed you can use all of the following ways to provide data:\n\n- Provide the data for that element as keyword arguments\n- Provide the data for that element as dictionary\n- Provide a list of dictionaries with the data for several elements\n\nExample::\n\n    >>> fg.contributor( name=\'John Doe\', email=\'jdoe@example.com\' )\n    >>> fg.contributor({\'name\':\'John Doe\', \'email\':\'jdoe@example.com\'})\n    >>> fg.contributor([{\'name\':\'John Doe\', \'email\':\'jdoe@example.com\'}, ...])\n\n-----------------\nGenerate the Feed\n-----------------\n\nAfter that you can generate both RSS or ATOM by calling the respective method::\n\n    >>> atomfeed = fg.atom_str(pretty=True) # Get the ATOM feed as string\n    >>> rssfeed  = fg.rss_str(pretty=True) # Get the RSS feed as string\n    >>> fg.atom_file(\'atom.xml\') # Write the ATOM feed to a file\n    >>> fg.rss_file(\'rss.xml\') # Write the RSS feed to a file\n\n\n----------------\nAdd Feed Entries\n----------------\n\nTo add entries (items) to a feed you need to create new FeedEntry objects and\nappend them to the list of entries in the FeedGenerator. The most convenient\nway to go is to use the FeedGenerator itself for the instantiation of the\nFeedEntry object::\n\n    >>> fe = fg.add_entry()\n    >>> fe.id(\'http://lernfunk.de/media/654321/1\')\n    >>> fe.title(\'The First Episode\')\n    >>> fe.link(href="http://lernfunk.de/feed")\n\nThe FeedGenerators method `add_entry(...)` without argument provides will\nautomatically generate a new FeedEntry object, append it to the feeds internal\nlist of entries and return it, so that additional data can be added.\n\n----------\nExtensions\n----------\n\nThe FeedGenerator supports extension to include additional data into the XML\nstructure of the feeds. Extensions can be loaded like this::\n\n    >>> fg.load_extension(\'someext\', atom=True, rss=True)\n\nThis will try to load the extension \xe2\x80\x9csomeext\xe2\x80\x9d from the file `ext/someext.py`.\nIt is required that `someext.py` contains a class named \xe2\x80\x9cSomextExtension\xe2\x80\x9d which\nis required to have at least the two methods `extend_rss(...)` and\n`extend_atom(...)`. Although not required, it is strongly suggested to use\n`BaseExtension` from `ext/base.py` as superclass.\n\n`load_extension(\'someext\', ...)` will also try to load a class named\n\xe2\x80\x9cSomextEntryExtension\xe2\x80\x9d for every entry of the feed. This class can be located\neither in the same file as SomextExtension or in `ext/someext_entry.py` which\nis suggested especially for large extensions.\n\nThe parameters `atom` and `rss` control if the extension is used for ATOM and\nRSS feeds, respectively. The default value for both parameters is `true`\nmeaning the extension is used for both kinds of feeds.\n\n**Example: Producing a Podcast**\n\nOne extension already provided is the podcast extension. A podcast is an RSS\nfeed with some additional elements for ITunes.\n\nTo produce a podcast simply load the `podcast` extension::\n\n    >>> from feedgen.feed import FeedGenerator\n    >>> fg = FeedGenerator()\n    >>> fg.load_extension(\'podcast\')\n    ...\n    >>> fg.podcast.itunes_category(\'Technology\', \'Podcasting\')\n    ...\n    >>> fe = fg.add_entry()\n    >>> fe.id(\'http://lernfunk.de/media/654321/1/file.mp3\')\n    >>> fe.title(\'The First Episode\')\n    >>> fe.description(\'Enjoy our first episode.\')\n    >>> fe.enclosure(\'http://lernfunk.de/media/654321/1/file.mp3\', 0, \'audio/mpeg\')\n    ...\n    >>> fg.rss_str(pretty=True)\n    >>> fg.rss_file(\'podcast.xml\')\n\nIf the FeedGenerator class is used to load an extension, it is automatically\nloaded for every feed entry as well.  You can, however, load an extension for a\nspecific FeedEntry only by calling `load_extension(...)` on that entry.\n\nEven if extensions are loaded, they can be temporarily disabled during the feed\ngeneration by calling the generating method with the keyword argument\n`extensions` set to `False`.\n\n**Custom Extensions**\n\nIf you want to load custom extensions which are not part of the feedgen\npackage, you can use the method `register_extension` instead. You can directly\npass the classes for the feed and the entry extension to this method meaning\nthat you can define them everywhere.\n\n\n---------------------\nTesting the Generator\n---------------------\n\nYou can test the module by simply executing::\n\n    $ python -m feedgen\n\nIf you want to have a look at the code for this test to have a working code\nexample for a whole feed generation process, you can find it in the\n`__main__.py <https://github.com/lkiesow/python-feedgen/blob/master/feedgen/__main__.py>`_.\n'