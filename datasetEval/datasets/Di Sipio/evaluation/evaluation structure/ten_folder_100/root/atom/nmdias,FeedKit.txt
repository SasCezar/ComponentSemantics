b'![FeedKit](/FeedKit.png?raw=true)\n\n[![build status](https://travis-ci.org/nmdias/FeedKit.svg)](https://travis-ci.org/nmdias/FeedKit)\n[![cocoapods compatible](https://img.shields.io/badge/cocoapods-compatible-brightgreen.svg)](https://cocoapods.org/pods/FeedKit)\n[![carthage compatible](https://img.shields.io/badge/carthage-compatible-brightgreen.svg)](https://github.com/Carthage/Carthage)\n[![language](https://img.shields.io/badge/spm-compatible-brightgreen.svg)](https://swift.org)\n[![swift](https://img.shields.io/badge/swift-5.0-orange.svg)](https://github.com/nmdias/DefaultsKit/releases)\n\n## Features\n\n- [x] [Atom](https://tools.ietf.org/html/rfc4287)\n- [x] RSS [0.90](http://www.rssboard.org/rss-0-9-0), [0.91](http://www.rssboard.org/rss-0-9-1), [1.00](http://web.resource.org/rss/1.0/spec), [2.00](http://cyber.law.harvard.edu/rss/rss.html)\n- [x] [JSON](https://jsonfeed.org/version/1)  \n- [x] Namespaces\n    - [x] [Dublin Core](http://web.resource.org/rss/1.0/modules/dc/)\n    - [x] [Syndication](http://web.resource.org/rss/1.0/modules/syndication/)\n    - [x] [Content](http://web.resource.org/rss/1.0/modules/content/)\n    - [x] [Media RSS](http://www.rssboard.org/media-rss)\n    - [x] [iTunes Podcasting Tags](https://help.apple.com/itc/podcasts_connect/#/itcb54353390)\n- [x] [Documentation](http://cocoadocs.org/docsets/FeedKit)\n- [x] Unit Test Coverage\n\n## Requirements\n\n![xcode](https://img.shields.io/badge/xcode-11-lightgrey.svg)\n![ios](https://img.shields.io/badge/ios-10-lightgrey.svg)\n![tvos](https://img.shields.io/badge/tvos-10-lightgrey.svg)\n![watchos](https://img.shields.io/badge/watchos-3-lightgrey.svg)\n![mac os](https://img.shields.io/badge/mac%20os-10.12-lightgrey.svg)\n![mac os](https://img.shields.io/badge/ubuntu-16.04-lightgrey.svg)\n\nInstallation >> [`instructions`](https://github.com/nmdias/FeedKit/blob/master/INSTALL.md) <<\n\n## Usage\n\nBuild a URL pointing to an RSS, Atom or JSON Feed.\n```swift\nlet feedURL = URL(string: "http://images.apple.com/main/rss/hotnews/hotnews.rss")!\n```\n\nGet an instance of `FeedParser`\n```swift\nlet parser = FeedParser(URL: feedURL) // or FeedParser(data: data) or FeedParser(xmlStream: stream)\n```\n\nThen call `parse` or `parseAsync` to start parsing the feed...\n\n> A **common scenario** in UI environments would be parsing a feed **asynchronously** from a user initiated action, such as the touch of a button. e.g.\n\n```swift\n// Parse asynchronously, not to block the UI.\nparser.parseAsync(queue: DispatchQueue.global(qos: .userInitiated)) { (result) in\n    // Do your thing, then back to the Main thread\n    DispatchQueue.main.async {\n        // ..and update the UI\n    }\n}\n```     \n\nRemember, you are responsible to manually bring the result closure to whichever queue is apropriate. Usually to the Main thread, for UI apps, by calling `DispatchQueue.main.async` .\n\nAlternatively, you can also parse synchronously.\n\n```swift\nlet result = parser.parse()\n```\n\n## Parse Result\n\nFeedKit adopts Swift 5 Result type, as `Result<Feed, ParserError>`, and as such, if parsing succeeds you should now have a `Strongly Typed Model` of an `RSS`, `Atom` or `JSON Feed`, within the `Feed` enum:\n\n```swift\nswitch result {\ncase .success(let feed):\n    \n    // Grab the parsed feed directly as an optional rss, atom or json feed object\n    feed.rssFeed\n    \n    // Or alternatively...\n    switch feed {\n    case .atom(feed):       // Atom Syndication Format Feed Model\n    case .rss(feed):        // Really Simple Syndication Feed Model\n    case .json(feed):       // JSON Feed Model\n    }\n    \ncase .failure(let error):\n    print(error)\n}\n```\n\n## Model Preview\n\n> The RSS and Atom feed Models are rather extensive throughout the supported namespaces. These are just a preview of what\'s available.\n\n#### RSS\n\n```swift\nfeed.title\nfeed.link\nfeed.description\nfeed.language\nfeed.copyright\nfeed.managingEditor\nfeed.webMaster\nfeed.pubDate\nfeed.lastBuildDate\nfeed.categories\nfeed.generator\nfeed.docs\nfeed.cloud\nfeed.rating\nfeed.ttl\nfeed.image\nfeed.textInput\nfeed.skipHours\nfeed.skipDays\n//...\nfeed.dublinCore\nfeed.syndication\nfeed.iTunes\n// ...\n\nlet item = feed.items?.first\n\nitem?.title\nitem?.link\nitem?.description\nitem?.author\nitem?.categories\nitem?.comments\nitem?.enclosure\nitem?.guid\nitem?.pubDate\nitem?.source\n//...\nitem?.dublinCore\nitem?.content\nitem?.iTunes\nitem?.media\n// ...\n```\n\n#### Atom\n\n```swift\nfeed.title\nfeed.subtitle\nfeed.links\nfeed.updated\nfeed.authors\nfeed.contributors\nfeed.id\nfeed.generator\nfeed.icon\nfeed.logo\nfeed.rights\n// ...\n\nlet entry = feed.entries?.first\n\nentry?.title\nentry?.summary\nentry?.authors\nentry?.contributors\nentry?.links\nentry?.updated\nentry?.categories\nentry?.id\nentry?.content\nentry?.published\nentry?.source\nentry?.rights\n// ...\n```\n\n#### JSON\n\n```swift\nfeed.version\nfeed.title\nfeed.homePageURL\nfeed.feedUrl\nfeed.description\nfeed.userComment\nfeed.nextUrl\nfeed.icon\nfeed.favicon\nfeed.author\nfeed.expired\nfeed.hubs\nfeed.extensions\n// ...\n\nlet item = feed.items?.first\n\nitem?.id\nitem?.url\nitem?.externalUrl\nitem?.title\nitem?.contentText\nitem?.contentHtml\nitem?.summary\nitem?.image\nitem?.bannerImage\nitem?.datePublished\nitem?.dateModified\nitem?.author\nitem?.url\nitem?.tags\nitem?.attachments\nitem?.extensions\n// ...\n```\n\n## License\n\nFeedKit is released under the MIT license. See [LICENSE](https://github.com/nmdias/FeedKit/blob/master/LICENSE) for details.\n\n\n\n'