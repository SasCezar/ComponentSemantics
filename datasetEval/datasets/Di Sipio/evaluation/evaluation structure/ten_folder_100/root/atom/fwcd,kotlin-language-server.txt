b'# Kotlin Language Server\nA [language server](https://microsoft.github.io/language-server-protocol/) that provides smart code completion, diagnostics, hover, document symbols, definition lookup, method signature help and more for [Kotlin](https://kotlinlang.org).\n\n[![Release](https://img.shields.io/github/release/fwcd/kotlin-language-server)](https://github.com/fwcd/kotlin-language-server/releases)\n[![Build Status](https://travis-ci.org/fwcd/kotlin-language-server.svg?branch=master)](https://travis-ci.org/fwcd/kotlin-language-server)\n[![Downloads](https://img.shields.io/github/downloads/fwcd/kotlin-language-server/total)](https://github.com/fwcd/kotlin-language-server/releases)\n[![Gitter](https://badges.gitter.im/fwcd-projects/KotlinLanguageServer.png)](https://gitter.im/fwcd-projects/KotlinLanguageServer)\n\n![Icon](Icon128.png)\n\nAny editor conforming to LSP is supported, including [VSCode](https://github.com/fwcd/vscode-kotlin-ide) and [Atom](https://github.com/fwcd/atom-ide-kotlin).\n\n## Getting Started\n* See [BUILDING.md](BUILDING.md) for build instructions\n* See [Editor Integration](EDITORS.md) for editor-specific instructions\n* See [Roadmap](https://github.com/fwcd/kotlin-language-server/projects/1) for features, planned additions, bugfixes and changes\n* See [Kotlin Quick Start](https://github.com/fwcd/kotlin-quick-start) for a sample project\n* See [Kotlin Debug Adapter](https://github.com/fwcd/kotlin-debug-adapter) for debugging support on JVM\n* See [tree-sitter-kotlin](https://github.com/fwcd/tree-sitter-kotlin) for an experimental [Tree-Sitter](https://tree-sitter.github.io/tree-sitter/) grammar\n\n## This repository needs your help!\n[The original author](https://github.com/georgewfraser) created this project while he was considering using Kotlin in his work. He ended up deciding not to and is not really using Kotlin these days though this is a pretty fully-functional language server that just needs someone to use it every day for a while and iron out the last few pesky bugs.\n\nThere are two hard parts of implementing a language server:\n- Figuring out the dependencies\n- Incrementally re-compiling as the user types\n\nThe project uses the internal APIs of the [Kotlin compiler](https://github.com/JetBrains/kotlin/tree/master/compiler).\n\nDependencies are determined by the [findClassPath](server/src/main/kotlin/org/javacs/kt/classpath/findClassPath.kt) function, which invokes Maven or Gradle and tells it to output a list of dependencies. Currently, both Maven and Gradle projects are supported.\n\nI get incremental compilation at the file-level by keeping the same `KotlinCoreEnvironment` alive between compilations in [Compiler.kt](server/src/main/kotlin/org/javacs/kt/Compiler.kt). There is a performance benchmark in [OneFilePerformance.kt](server/src/test/kotlin/org/javacs/kt/OneFilePerformance.kt) that verifies this works.\n\nGetting incremental compilation at the expression level is a bit more complicated:\n- Fully compile a file and store in [CompiledFile](server/src/main/kotlin/org/javacs/kt/CompiledFile.kt):\n    - `val content: String` A snapshot of the source code\n    - `val parse: KtFile` The parsed AST\n    - `val compile: BindingContext` Additional information about the AST from typechecking\n- After the user edits the file:\n    - Find the smallest section the encompasses all the user changes\n    - Get the `LexicalScope` encompassing this region from the `BindingContext` that was generated by the full-compile\n    - Create a fake, in-memory .kt file with just the expression we want to re-compile\n        - [Add space](https://github.com/fwcd/kotlin-language-server/blob/427cfa7a688d6d2ff202625ebad1ea605e3b8c37/server/src/main/kotlin/org/javacs/kt/CompiledFile.kt#L125) at the top of the file so the line numbers match up\n    - Re-compile this tiny fake file\n\nThe incremental expression compilation logic is all in [CompiledFile.kt](server/src/main/kotlin/org/javacs/kt/CompiledFile.kt). The Kotlin AST has a built-in repair API, which seems to be how IntelliJ works, but as far as I can tell this API does not work if the surrounding IntelliJ machinery is not present. Hence I created the "fake tiny file" incremental-compilation mechanism, which seems to be quite fast and predictable.\n\nThere is an extensive suite of behavioral [tests](server/src/test/kotlin/org/javacs/kt), which are all implemented in terms of the language server protocol, so you should be able to refactor the code any way you like and the tests should still work.\n\n## Modules\n\n| Name | Description |\n| ---- | ----------- |\n| server | The language server executable |\n| shared | Classpath resolution and utilities |\n\n## Scripts\n\n| Name | Command | Description |\n| ---- | ------- | ----------- |\n| update_kt_version.py | `python3 scripts/update_kt_version.py` | Finds and updates the Kotlin compiler/plugin version for this project |\n| bump_version.py | `python3 scripts/bump_version.py` | Increments the project version and creates a new tag |\n\n## Protocol Extensions\n\nThe Kotlin language server supports some non-standard requests through LSP. See [KotlinProtocolExtensions](server/src/main/kotlin/org/javacs/kt/KotlinProtocolExtensions.kt) for a description of the interface. The general syntax for these methods is `kotlin/someCustomMethod`.\n\n## Features\n\n### Autocomplete\n![Autocomplete](images/Autocomplete.png)\n\n### Signature help\n![Signature Help](images/SignatureHelp.png)\n\n### Hover\n![Hover](images/Hover.png)\n\n### Go-to-definition, find all references\n![Find all references](images/FindAllReferences.png)\n\n### Document symbols\n![Document symbols](images/DocumentSymbols.png)\n\n### Global symbols\n![Global symbols](images/GlobalSymbols.png)\n\n## Authors\n* [georgewfraser](https://github.com/georgewfraser)\n* [fwcd](https://github.com/fwcd)\n'