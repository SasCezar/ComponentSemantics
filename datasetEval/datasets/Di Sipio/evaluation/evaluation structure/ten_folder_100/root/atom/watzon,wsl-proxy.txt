b'# WSL Proxy Files\n\nWSL (Windows Subsystem for Linux) is an awesome bit of innovation by Microsoft that allows you to run Linux inside of Windows 10 without the need for a Virtual Machine. This has several benefits, the largest of which is the memory that you save by not running a whole secondary OS. Unfortunately it also has it\'s drawbacks, the biggest of which is a distinct lack of support through editors such as Atom, VSCode, and Sublime Text.\n\nThe goal of this project is to create a collection of "proxy" batch files that can be used to route requests to the linux version of a command. Almost all of the files will have the same layout\n\n```batch\n@echo off\nbash.exe -c "php %*"\n```\n\nAs an example usecase take the [atom-linter](https://github.com/steelbrain/linter) package. Most of the linters, such as [linter-php]() require the path to an executable in order to run. If that executable is inside of WSL however, there is no way to access it.\n\nUsing the wsl-proxy `php.bat` file however, you can just replace the path to the executable with `C:\\\\Users\\\\myuser\\\\path\\\\to\\\\wsl-proxy\\\\php.bat`. Requests are now being routed to the linux version of PHP.\n\n**Pro tip:** If you clone this and add the cloned directory to your windows PATH you will be able to access any of the proxied commands through command prompt (even without the `.bat` extension)\n\n**Note:** This is an experiment currently and I can\'t guarentee it will work with everything, but please feel free to add files here. Let\'s turn this into a one-stop shop for wsl-proxy files.\n\n## Auto-generating proxy files\n\nRun the `proxygen.cmd` script to automatically generate proxies. A subfolder named `.\\autogen` will be created, and all the autogenned proxy files will be placed here -- add this folder to your Windows PATH if you want access to the proxied commands without typing in a full path.\n\nUsage:\n* (No args): `proxygen`  \nPrompts you to enter program names from stdin (press CTRL-D when done).\n* (Redirect from file): `proxygen < program_name_file`  \nSame as above, but reads program names from a file.\n* (Specify args on command line): `proxygen program1 program2 ...`\n\nExamples:  \n`proxygen gcc g++`  \n`proxygen /usr/bin/foo`  \n`proxygen /usr/bin/*`  \n`proxygen /usr/bin/* /bin/*`\n\nProgram names will be resolved to absolute paths. If a program is not found, a warning message will be displayed (the proxy will still be created).\n'