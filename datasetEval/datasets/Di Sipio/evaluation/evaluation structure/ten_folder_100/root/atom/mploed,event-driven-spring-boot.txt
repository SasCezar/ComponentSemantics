b'# Event Driven Applications with Spring Boot\n\nThis projects tries to capture various options you have when dealing with Event Driven Spring Boot applications.\nThe follwing Spring Technologies are being used:\n- Spring Boot\n- Spring Cloud Stream Rabbit\n- Spring Data JPA\n\nThese examples contain various different ways to model and deal with events:\n- Complete aggregates / entities in the events\n- REST Resource URLs in events\n- Partial parsing / handling of events in consumers\n- Events as Atom Feeds\n\n## Prerequisites\n- You need to have Docker installed\n\n## How to run and install the example\nIn the root directory you need to\n1. Compile everything with ./mvnw package\n2. Start everything up with docker-compose up --build\n\n## Running on Kubernetes\nMind the KubernetesSetup.md file in the kubernetes directory\n\n## URLs and Ports\nEach of the modules is it\'s own Spring Boot Application which can be accessed as follows:\n\n<table>\n    <tr>\n        <th>Name</th>\n        <th>Application / Enpoint Type</th>\n        <th>URL</th>\n    </tr>\n    <tr>\n        <td>Application Process</td>\n        <td>9000</td>\n        <td>http://localhost:9000</td>\n    </tr>\n    <tr>\n        <td>Credit Application</td>\n        <td>9001</td>\n        <td>http://localhost:9001/credit-application</td>\n    </tr>\n    <tr>\n        <td>Customer</td>\n        <td>9002</td>\n        <td>http://localhost:9002/customer and http://localhost:9002/customer/feed</td>\n    </tr>\n    <tr>\n        <td>Scoring</td>\n        <td>9003</td>\n        <td>No UI</td>\n    </tr>\n     <tr>\n        <td>CreditDecision</td>\n        <td>9004</td>\n        <td>http://localhost:9004/credit-decision and http://localhost:9004/credit-decision/feed</td>\n    </tr>\n      \n    \n</table>\n\n## Messaging Infrastructure & Domain Events\n\n### Public Events\n\n#### CreditApplicationNumberGeneratedEvent\nSource: application-process\n\nPersisted in source: no\n\nConsumers:\n- credit-application\n- credit-decision\n\nTopic: CreditApplicationNumberGeneratedTopic\n\n\n#### CreditApplicationEnteredEvent\nSource: credit-application\n\nPersisted in source: yes in its own Table via JPA\n\nConsumers:\n- application-process\n- credit-decision\n\nTopic: CreditApplicationEnteredTopic\n\n\n#### CustomerCreatedEvent\nSource: customer\n\nPersisted in source: no\n\nConsumers:\n- application-process\n- credit-decision\n\nTopic: CustomerCreatedTopic\n\n#### ScoringPositiveEvent\nSource: scoring\n\nPersisted in source: no\n\nConsumers:\n- application-process\n- credit-decision\n\nTopic: ScoringPositiveTopic\n\n#### ScoringNegativeEvent\nSource: scoring\n\nPersisted in source: no\n\nConsumers:\n- application-process\n- credit-decision\n\nTopic: ScoringNegativeTopic\n\n#### ApplicationDeclinedEvent\nSource: credit-decision\n\nPersisted in source: not as an event\n\nConsumers:\n- application-process\n\nTopic: ApplicationDeclinedTopic\n\n### Internal Events\n\n#### Credit-Application\n- CreditDetailsEnteredEvent\n- FinancialSituationEnteredEvent\n\nBoth events are stored\nSource: credit-application\nStorage: Own Table via JPA\n\n\n### Feeds\n\n#### Customer Feed\nUrl: http://localhost:9002/customer/feed\n\nContains URLs to Customer Resources\n\n#### Credit Decision Feed\nUrl: http://localhost:9004/credit-decision/feed\n\nContains Application Numbers that have been confirmed\n\n\n## Event Types being used\nThis demo shows various types of event types: Events with all the data, Events with Resource Urls and "Events" as Feeds\n\n#### Events with all the data\nEspecially the CreditApplicationEnteredEvent falls into this category: it contains all of the data for the credit application\nsuch as the financial situation and the details of the actual credit. By consuming this event you will not need additional\nroundtrips to upstream systems\n\nOther events that fall into this category are:\n- ApplicationNumberGeneratedEvent\n- ScoringNegativeEvent\n- ScoringPositiveEvent\n- ApplicationDeclinedEvent\n\n##### Idea of Bounded Context:\nPlease take a close look at how the CreditApplicationEnteredEvent is being reflected in the scoring application. Yes, we\ntake in all the payload from the broker but the public model of the event has a clear focus on the scoring context\'s view \n  on the data.\n\n#### Events with a Resource URL\nThese Events do not contain a lot of information. They may contian something like a business process identifier such as\nthe applicationNumber in this example but for the purpose of this demo I refrained from doing that. So the CustomerCreatedEvent\nonly contians the URL to the Customer REST Resource from which interested contexts can obtain the payload from.\n\n\n#### "Events" via Feeds\nAlthoug the usage of feeds is no plain and pure event driven processing style I think that they come in handy when you\nare dealing with situations like these:\n- you have issues with your message broker and firewalls and these issues can\'t be resolved easily\n- you need to have an event replay functionality in place that enables consumers to restore their replicated data\n\nYou can find "Events via Feeds" in the customer and the credit-decision (see Feeds) applications. '