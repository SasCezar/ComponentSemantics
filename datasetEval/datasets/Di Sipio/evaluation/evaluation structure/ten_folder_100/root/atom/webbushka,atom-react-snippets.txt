b"Atom React.js Snippets [![Build Status](https://travis-ci.org/webbushka/atom-react-snippets.svg?branch=master)](https://travis-ci.org/webbushka/atom-react-snippets)\n====================================================================================================================================================================\n\nAn [Atom](https://atom.io/) snippet library for React. This library uses ES6 syntax, if you would prefer ES5 or Coffeescript snippets please use the [Atom React Package](https://atom.io/packages/react).\n\nInstall\n-------\n\nGo to `Packages > Settings View > Open` once in settings go to the Install tab and search for **react-snippets**\n\nRestart Atom\n\nDevelopment\n-----------\n\n```sh\n$ cd ~/.atom/packages\n$ git clone https://github.com/webbushka/atom-react-snippets.git\n$ cd atom-react-snippets\n$ apm install\n$ apm link\n```\n\nSnippets\n--------\n\nThe **\xe2\x87\xa5** means the `TAB` key\n\n| Trigger      | Content |\n| -------:     | ------- |\n| `_i\xe2\x86\x92`       | import empty |\n| `_ir\xe2\x86\x92`      | import react |\n| `_irc\xe2\x86\x92`     | import react and component |\n| `_irp\xe2\x86\x92`     | import react and prop-types |\n| `_ipt\xe2\x86\x92`     | import prop-types |\n| `_ircp\xe2\x86\x92`    | import react, component and prop-types |\n| `_ird\xe2\x86\x92`     | import react-dom |\n| `_irs\xe2\x86\x92`     | import react and useState |\n| `_ire\xe2\x86\x92`     | import react and useEffect |\n| `_irse\xe2\x86\x92`    | import react, useState and useEffect |\n| `_ex\xe2\x86\x92`      | export |\n| `_exd\xe2\x86\x92`     | export default |\n| `_cdm\xe2\x86\x92`     | `componentDidMount method` |\n| `_cwm\xe2\x86\x92`     | `componentWillMount method` |\n| `_cwr\xe2\x86\x92`     | `componentWillReceiveProps method` |\n| `_scu\xe2\x86\x92`     | `shouldComponentUpdate method` |\n| `_cwup\xe2\x86\x92`    | `componentWillUpdate method` |\n| `_cdup\xe2\x86\x92`    | `componentDidUpdate method` |\n| `_cwun\xe2\x86\x92`    | `componentWillUnmount method` |\n| `_cdc\xe2\x86\x92`     | `componentDidCatch method` |\n| `_cx\xe2\x86\x92`      | `cx` |\n| `_fup\xe2\x86\x92`     | `forceUpdate` |\n| `_cct\xe2\x86\x92`     | component contextTypes |\n| `_cpt\xe2\x86\x92`     | component propTypes |\n| `_cdp\xe2\x86\x92`     | component defaultProps |\n| `_scct\xe2\x86\x92`    | static component contextTypes |\n| `_scpt\xe2\x86\x92`    | static component propTypes |\n| `_scdp\xe2\x86\x92`    | static component defaultProps |\n| `_cer\xe2\x86\x92`     | class component skeleton |\n| `_rsc\xe2\x86\x92`     | stateless component skeleton |\n| `_rscp\xe2\x86\x92`    | stateless component skeleton with PropTypes |\n| `_rscr\xe2\x86\x92`    | stateless component skeleton with explicit `return` |\n| `_rscc\xe2\x86\x92`    | stateless component skeleton with `handleClick` |\n| `_rsf\xe2\x86\x92`     | stateless function |\n| `_cdn\xe2\x86\x92`     | component display name |\n| `_ren\xe2\x86\x92`     | `render() method` |\n| `_sst\xe2\x86\x92`     | `setState()` |\n| `_ust\xe2\x86\x92`     | use state `const [x, setX] = useState()` |\n| `_props\xe2\x86\x92`   | `this.props.` |\n| `_state\xe2\x86\x92`   | `this.state.` |\n| `_rrc\xe2\x86\x92`     | `React.render()` |\n| `_frag\xe2\x86\x92`    | `<React.Fragment></React.Fragment>` |\n| `_cns\xe2\x86\x92`     | `constructor method` |\n| `_clss\xe2\x86\x92`    | class extends |\n| `_dnghtml\xe2\x86\x92` | `dangerouslySetInnerHTML` |\n\nIn this version the PropTypes snippets prefix has changed to `_pt` instead of `rp`. All snippets have two versions to allow for required and not required types.\n\n| Trigger  | Content |\n| -------: | ------- |\n| `_pta\xe2\x86\x92`   | `PropTypes.array,` |\n| `_ptar\xe2\x86\x92`  | `PropTypes.array.isRequired,` |\n| `_ptb\xe2\x86\x92`   | `PropTypes.bool,` |\n| `_ptbr\xe2\x86\x92`  | `PropTypes.bool.isRequired,` |\n| `_ptf\xe2\x86\x92`   | `PropTypes.func,` |\n| `_ptfr\xe2\x86\x92`  | `PropTypes.func.isRequired,` |\n| `_ptn\xe2\x86\x92`   | `PropTypes.number,` |\n| `_ptnr\xe2\x86\x92`  | `PropTypes.number.isRequired,` |\n| `_pto\xe2\x86\x92`   | `PropTypes.object.,` |\n| `_ptor\xe2\x86\x92`  | `PropTypes.object.isRequired,` |\n| `_pts\xe2\x86\x92`   | `PropTypes.string,` |\n| `_ptsr\xe2\x86\x92`  | `PropTypes.string.isRequired,` |\n| `_ptnd\xe2\x86\x92`  | `PropTypes.node,` |\n| `_ptndr\xe2\x86\x92` | `PropTypes.node.isRequired,` |\n| `_ptel\xe2\x86\x92`  | `PropTypes.element,` |\n| `_ptelr\xe2\x86\x92` | `PropTypes.element.isRequired,` |\n| `_pti\xe2\x86\x92`   | `PropTypes.instanceOf(ClassName),` |\n| `_ptir\xe2\x86\x92`  | `PropTypes.instanceOf(ClassName).isRequired,` |\n| `_pte\xe2\x86\x92`   | `PropTypes.oneOf(['News', 'Photos']),` |\n| `_pter\xe2\x86\x92`  | `PropTypes.oneOf(['News', 'Photos']).isRequired,` |\n| `_ptet\xe2\x86\x92`  | `PropTypes.oneOfType([PropTypes.string, PropTypes.number]),` |\n| `_ptetr\xe2\x86\x92` | `PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,` |\n| `_ptao\xe2\x86\x92`  | `PropTypes.arrayOf(PropTypes.number),` |\n| `_ptaor\xe2\x86\x92` | `PropTypes.arrayOf(PropTypes.number).isRequired,` |\n| `_ptoo\xe2\x86\x92`  | `PropTypes.objectOf(PropTypes.number),` |\n| `_ptoor\xe2\x86\x92` | `PropTypes.objectOf(PropTypes.number).isRequired,` |\n| `_ptsh\xe2\x86\x92`  | `PropTypes.shape({color: PropTypes.string, fontSize: PropTypes.number}),` |\n| `_ptshr\xe2\x86\x92` | `PropTypes.shape({color: PropTypes.string, fontSize: PropTypes.number}).isRequired,` |\n\nContributing\n------------\n\n1.\tFork it!\n2.\tCreate your feature branch: `git checkout -b my-new-feature`\n3.\tCommit your changes: `git commit -m 'Add some feature'`\n4.\tPush to the branch: `git push origin my-new-feature`\n5.\tSubmit a pull request\n\nLicense\n-------\n\n[MIT License](http://zenorocha.mit-license.org/) \xc2\xa9 Zeno Rocha\n\nCredit\n------\n\nThe React.js snippets were originally created by [orktes](https://atom.io/users/orktes) in [Atom React](https://atom.io/packages/react) in ES5 syntax.\n"