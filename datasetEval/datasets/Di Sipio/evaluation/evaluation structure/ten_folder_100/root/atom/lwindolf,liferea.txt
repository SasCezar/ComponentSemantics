b'[![Build Status](https://travis-ci.org/lwindolf/liferea.svg?branch=master)](https://travis-ci.org/lwindolf/liferea) ![Coverity Scan Build Status](https://scan.coverity.com/projects/4287/badge.svg)\n\n\nIntroduction\n------------\n\nLiferea is a desktop feed reader/news aggregator that brings together all of the content from your favorite subscriptions into a simple interface that makes it easy to organize and browse feeds. Its GUI is similar to a desktop mail/news client, with an embedded web browser.\n\n![screenshot](https://lzone.de/liferea/screenshots/screenshot3.png)\n\n\n\nInstallation from Package\n-------------------------\n\nFor distro specific package installation check out https://lzone.de/liferea/install.htm\n\n\n\nBuilding Liferea Yourself\n------------------------\n\nThis section describes how to compile Liferea yourself. If you have\nany problems compiling the source file an issue at Github and we will\nhelp you asap.\n\n\n###### _Mandatory Dependencies_\n\n   libxml2-dev libxslt1-dev libsqlite3-dev libwebkit2gtk-4.0-dev libjson-glib-dev libgirepository1.0\n   libpeas-dev gsettings-desktop-schemas-dev python3\n\n   \n###### _Compiling from Tarball_\n\nDownload a tarball from https://github.com/lwindolf/liferea/releases\nand extract and compile with\n\n    tar jxvf liferea-1.12.0.tar.bz2 \n    ./configure\n    make\n    make install\n\n\n###### _Compiling from Git_\n\nCheck out the code:\n\n    git clone https://github.com/lwindolf/liferea.git\n\nThen build it with:\n\n    ./autogen.sh\n    make\n    make install\n\nIf you compile with a --prefix directory which does not match $XDG_DATA_DIRS\nyou will get a runtime error about the schema not being found. To workaround\nset $XDG_DATA_DIRS before starting Liferea. For example:\n\n    my_dir=$HOME/tmp/liferea\n    ./autogen.sh --prefix=$my_dir\n    make\n    make install\n    env XDG_DATA_DIRS="$my_dir/share:$XDG_DATA_DIRS" $my_dir/bin/liferea\n\n\nContributing\n------------\n\nAs the project is hosted at Github pull requests and tickets via Github\nare the best way to contribute to Liferea.\n\n\n###### _Translating_\n\nBefore starting to translate you need a translation editor. We suggest\nto use poedit or gtranslator. Please edit the translation using such a \ntranslation editor and send us the resulting file. Once you have finished\nyour work please send us the resulting file.\n\nPlease do not send translation patches. Those are a lot of work to merge\nand the bandwidth saving is not that huge!\n\n\n###### _New Translations_\n\nTo create a new translation you must load the translation template, which you\ncan find in the release tarball as "po/liferea.pot", into the translation \neditor. After editing it save it under a new name (usually your locales name\nwith the extension ".po").\n\n\n###### _Updating Translations_\n\nWhen updating an existing translation please ensure to respect earlier \ntranslators work. If the latest translation is only a few months old please\ncontact the latest translator first asking him to review your changes especially\nif you change already translated literals.\n\n\n###### _Localizing Feed Lists_\n\nWhen Liferea starts for the first time it installs a localized feed list\nif available. If this is not the case for your locale you might want to provide\none. To check if there is one for your country have a look into the "opml"\nsubdirectory in the latest release tarball or GIT.\n\nIf you want to provide/update a localized feed list please follow these rules:\n\n+ Keep the English part of the default feed list\n+ Only add neutral content feeds (no sex, no ideologic politics, no illegal stuff)\n+ Provide good and short feed titles\n+ Provide HTML URLs for each feed.\n\n###### _Creating Plugins_\n\nLiferea 1.10+ support GObject Introspection based plugins using libpeas. The\nLiferea distribution comes with a set of Python plugin e.g. the media player,\nlibsecret support, a tray icon plugin and maybe others.\n\n\n###### Why We Use Plugins?\n\nThe idea behind plugins is to extend Liferea without changing compile time\nrequirements. With the plugin only activating if all its bindings are available\nLiferea uses plugins to automatically enable features where possible.\n\n\n###### How Plugins Interact With Liferea\n\nYou can develop plugins for your private use or contribute them upstream.\nIn any case it makes sense to start by cloning one of the existing plugins\nand to think about how to hook into Liferea. There are two common ways:\n\n+ using interfaces,\n+ or by listening to events on Liferea objects,\n+ or not at all by just controlling Liferea from the outside.\n\nThe media player is an example for 1.) while the tray icon is an example for 3.)\nIf you find you need a new plugin interface (called Activatables) in the code \nfeel free to contact us on the mailing list. In general such a tight coupling\nshould be avoided.\n\nAbout the exposed GIR API: At the moment there is no stable API. Its just some\nheader files fed into g-ir-scanner. Despite this method names of the core\nfunctionality in Liferea has proven to be stable during release branches. And\nif you contribute your plugin upstream it will be updated to match renamed\nfunctionality.\n\n\n###### Testing Plugins\n\nTo test your new plugin you can use ~/.local/share/liferea/plugins. Create \nthe directory and put the plugin script and the .plugin file there and restart\nLiferea.\n\nWatch out for initialization exceptions on the command line as they will\npermanently disable the plugin. Each time this happens you need to reenable\nthe plugin from within the plugin tab in the preferences dialog!\n\n\n###### _How to Help With Testing_\n\n###### *Bug Reports*\n\nIf you want to help with testing grab the latest tarball or follow GIT master\nand write bug reports for any functional problem you experience. If you have\ntime help with bug triaging. Check if you see any of the open bugs that are\nnot yet confirmed.\n\n\n###### *Debugging Crashes*\n\nIn case of crashes create gdb backtraces and post them in the bug tracker. To\ncreate a backtrace start Liferea using "gdb liferea". At the gdb prompt type\n"run" to start the execution and "bt" after the crash. Send us the "bt" output!\n\nNote: Often people confuses assertions with crashes. Assertions do halt the\nprogram because of a totally unexpected situation. Creating a backtrace in this\nsituation will only point to the assertion line, which doesn\'t help much. In case\nof an assertion simply post a bug report with the assertion message.\n\n\n###### *Debugging Memory Leaks*\n\nIf you see memory leakage please take the time to do a run \n\n    valgrind --leak-check=full liferea\n\nto identify leaks and send in the output.\n\n\nHow to Get Support\n------------------\n\n## When using distribution packages\n\nDo not post bug reports in the Liferea bug tracker, use the bug reporting\nsystem of your distribution instead. We (upstream) cannot fix distribution\npackages!\n\n## Before raising an issue\n\nInstall the latest stable release and check if the problem is solved already.\nPlease do not ask for help for older releases!\n\n## Issue Tracker\n\nOnce you verified the latest stable release still has the problem\nplease raise an issue in the GitHub bug tracker\n(https://github.com/lwindolf/liferea/issues).\n'