b'# github-rs\n\n| Service      | Status |\n| -------      | :----: |\n| TravisCI     | [![Build Status](https://travis-ci.org/github-rs/github-rs.svg?branch=master)](https://travis-ci.org/mgattozzi/github-rs)   |\n| DependencyCI | [![DependencyStatus](https://dependencyci.com/github/github-rs/github-rs/badge)](https://dependencyci.com/github/mgattozzi/github-rs)   |\n| AppveyorCI   | [![Build status](https://ci.appveyor.com/api/projects/status/st04a7hltt8h42lq?svg=true)](https://ci.appveyor.com/project/mgattozzi/github-rs)       |\n| CodeCov   | [![codecov](https://codecov.io/gh/github-rs/github-rs/branch/master/graph/badge.svg)](https://codecov.io/gh/mgattozzi/github-rs)      |\n| crates.io | [![crates.io](https://img.shields.io/crates/v/github-rs.svg)](https://crates.io/crates/github-rs) |\n\nPure Rust bindings to the Github V3 API. If you want bindings to the V4 library\nsee the [github-graphql-rs](./github-gql-rs) library.\n\n## Incomplete Bindings\nPlease look at the [endpoints](./docs/endpoints.md) docs to see which endpoints\nare currently covered in the API. This is for the Github V3 API.\n\n## Dependencies and Support\ngithub-rs is intended to work on all tier 1 supported Rust systems:\n\n- Windows\n- Linux\n- MacOSX\n\ngithub-rs supports [rustls] and [rust-native-tls] for TLS connectivity.\n`rustls` is used by default, but one can toggle support with Cargo features:\n\n```toml\n[dependencies.github-rs]\nversion = "0.7"\ndefault-features = false\nfeatures = ["rust-native-tls"]\n```\n\nSince `rustls` depends on [`ring`][ring] for cryptography, hardware support is\nlimited to what `ring` supports, currently ARM and x86 (both 32- and 64-bit).\nIf you\'re compiling for other architectures then you may use the\n`rust-native-tls` feature for maximum portability.\n\n[rustls]: https://github.com/ctz/rustls\n[rust-native-tls]: https://github.com/sfackler/rust-native-tls\n[ring]: https://github.com/briansmith/ring\n\n## Minimum Compiler Version\nDue to the use of certain features github-rs requires rustc version 1.18 or\nhigher.\n\n## Project Aims\n- Have a robust API where everything is error handled properly to avoid\n  panics of any kind. A library is the base of an application and should\n  be a solid foundation to be built upon\n- Cover all Github stable endpoints. Anything that\'s deprecated and beta\n  should be obtained only through configuration for those features. As\n  deprecated endpoints are removed from Github so too should they be\n  removed from this library.\n- Having stability as part of the API. As such effort will be\n  taken to make sure this code compiles on stable Rust, rather than\n  nightly.\n- Ease of use. The complexity should be hidden from those not hacking on\n  the code itself.\n- Documentation of everything so not only is it easy to hack on but\n  finding out how to use the library should be easy to find.\n\n## Getting Started\nAdd the following to your `Cargo.toml`\n\n```toml\n[dependencies]\ngithub-rs = "0.7"\nserde_json = "1.0"\n```\n\nThen in your `lib.rs` or `main.rs` file add:\n\n```rust\nuse github_rs::client::{Executor, Github};\nuse serde_json::Value;\n```\n\nNow you can start making queries. Here\'s a small example to get your user\ninformation:\n\n```rust\nuse github_rs::client::{Executor, Github};\nuse serde_json::Value;\n\nfn main() {\n    let client = Github::new("API TOKEN").unwrap();\n    let me = client.get()\n                   .user()\n \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0 .execute::<Value>();\n    match me {\n        Ok((headers, status, json)) => {\n            println!("{:#?}", headers);\n            println!("{}", status);\n            if let Some(json) = json{\n                println!("{}", json);\n            }\n        },\n        Err(e) => println!("{}", e)\n    }\n}\n```\n\n## Hacking on the Library\n- [GitHub API Reference Docs](https://developer.github.com/v3/)\n- See the [design docs](./docs/design.md) for more information.\n\n## Contributing\nSee [CONTRIBUTING.md](CONTRIBUTING.md) for more information.\n\n## License\n\nLicensed under either of\n\n * Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or http://www.apache.org/licenses/LICENSE-2.0)\n * MIT license ([LICENSE-MIT](LICENSE-MIT) or http://opensource.org/licenses/MIT)\n\nat your option.\n\n### Licensing\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in the work by you, as defined in the Apache-2.0 license, shall be\ndual licensed as above, without any additional terms or conditions.\n'