b'# Octokit.swift\n\n[![Build Status](https://travis-ci.org/nerdishbynature/octokit.swift.svg?branch=master)](https://travis-ci.org/nerdishbynature/octokit.swift)\n[![CocoaPods](https://img.shields.io/cocoapods/v/OctoKit.swift.svg)](https://cocoapods.org/pods/OctoKit.swift)\n[![codecov.io](https://codecov.io/github/nerdishbynature/octokit.swift/coverage.svg?branch=master)](https://codecov.io/github/nerdishbynature/octokit.swift?branch=master)\n\n## Installation\n\n- **Using [Swift Package Manager](https://swift.org/package-manager)**:\n\n```swift\nimport PackageDescription\n\nlet package = Package(\n  name: "MyAwesomeApp",\n    dependencies: [\n      .package(url: "https://github.com/nerdishbynature/octokit.swift", from: "0.9.0"),\n    ]\n  )\n```\n\n## Authentication\n\nOctokit supports both, GitHub and GitHub Enterprise.\nAuthentication is handled using Configurations.\n\nThere are two types of Configurations, `TokenConfiguration` and `OAuthConfiguration`.\n\n### TokenConfiguration\n\n`TokenConfiguration` is used if you are using Access Token based Authentication (e.g. the user\noffered you an access token he generated on the website) or if you got an Access Token through\nthe OAuth Flow\n\nYou can initialize a new config for `github.com` as follows:\n\n```swift\nlet config = TokenConfiguration(token: "12345")\n```\n\nor for GitHub Enterprise\n\n```swift\nlet config = TokenConfiguration("12345", url: "https://github.example.com/api/v3/")\n```\n\nAfter you got your token you can use it with `Octokit`\n\n```swift\nOctokit(config).me() { response in\n  switch response {\n  case .success(let user):\n    print(user.login)\n  case .failure(let error):\n    print(error)\n  }\n}\n```\n\n### OAuthConfiguration\n\n`OAuthConfiguration` is meant to be used, if you don\'t have an access token already and the\nuser has to login to your application. This also handles the OAuth flow.\n\nYou can authenticate an user for `github.com` as follows:\n\n```swift\nlet config = OAuthConfiguration(token: "<Your Client ID>", secret: "<Your Client secret>", scopes: ["repo", "read:org"])\nlet url = config.authenticate()\n```\n\nor for GitHub Enterprise\n\n```swift\nlet config = OAuthConfiguration("https://github.example.com/api/v3/", webURL: "https://github.example.com/", token: "<Your Client ID>", secret: "<Your Client secret>", scopes: ["repo", "read:org"])\n```\n\nAfter you got your config you can authenticate the user:\n\n```swift\n// AppDelegate.swift\n\nconfig.authenticate()\n\nfunc application(application: UIApplication, openURL url: NSURL, sourceApplication: String?, annotation: AnyObject?) -> Bool {\n  config.handleOpenURL(url) { config in\n    self.loadCurrentUser(config) // purely optional of course\n  }\n  return false\n}\n\nfunc loadCurrentUser(config: TokenConfiguration) {\n  Octokit(config).me() { response in\n    switch response {\n    case .success(let user):\n      print(user.login)\n    case .failure(let error):\n      print(error)\n    }\n  }\n}\n```\n\nPlease note that you will be given a `TokenConfiguration` back from the OAuth flow.\nYou have to store the `accessToken` yourself. If you want to make further requests it is not\nnecessary to do the OAuth Flow again. You can just use a `TokenConfiguration`.\n\n```swift\nlet token = // get your token from your keychain, user defaults (not recommended) etc.\nlet config = TokenConfiguration(token)\nOctokit(config).user("octocat") { response in\n  switch response {\n  case .success(let user):\n  \tprint("User login: \\(user.login!)")\n  case .failure(let error):\n  \tprint("Error: \\(error)")\n  }\n}\n\n```\n\n## Users\n\n### Get a single user\n\n```swift\nlet username = ... // set the username\nOctokit().user(username) { response in\n  switch response {\n    case .success(let user):\n      // do something with the user\n    case .failure(let error):\n      // handle any errors\n  }\n}\n```\n\n### Get the authenticated user\n\n```swift\nOctokit().me() { response in\n  switch response {\n    case .success(let user):\n      // do something with the user\n    case .failure(let error):\n      // handle any errors\n  }\n```\n\n## Repositories\n\n### Get a single repository\n\n```swift\nlet (owner, name) = ("owner", "name") // replace with actual owner and name\nOctokit().repository(owner, name) { response in\n  switch response {\n    case .success(let repository):\n      // do something with the repository\n    case .failure(let error):\n      // handle any errors\n  }\n}\n```\n\n### Get repositories of authenticated user\n\n```swift\nOctokit().repositories() { response in\n  switch response {\n    case .success(let repository):\n      // do something\n    case .failure(let error):\n      // handle any errors\n  }\n}\n```\n\n## Starred Repositories\n\n### Get starred repositories of some user\n\n```swift\nlet username = "username"\nOctokit().stars(username) { response in\n  switch response {\n    case .success(let repositories):\n      // do something with the repositories\n    case .failure(let error):\n      // handle any errors\n  }\n}\n```\n\n### Get starred repositories of authenticated user\n\n```swift\nOctokit().myStars() { response in\n  switch response {\n    case .success(let repositories):\n      // do something with the repositories\n    case .failure(let error):\n      // handle any errors\n  }\n}\n```\n\n## Follower and Following\n\n### Get followers of some user\n\n```swift\nlet username = "username"\nOctokit().followers(username) { response in\n  switch response {\n    case .success(let users):\n      // do something with the users\n    case .failure(let error):\n      // handle any errors\n  }\n}\n```\n\n### Get followers of authenticated user\n\n```swift\nOctokit().myFollowers() { response in\n  switch response {\n    case .success(let users):\n      // do something with the users\n    case .failure(let error):\n      // handle any errors\n  }\n}\n```\n\n### Get following of some user\n\n```swift\nlet username = "username"\nOctokit().following(username) { response in\n  switch response {\n    case .success(let users):\n      // do something with the users\n    case .failure(let error):\n      // handle any errors\n  }\n}\n```\n\n### Get following of authenticated user\n\n```swift\nOctokit().myFollowing() { response in\n  switch response {\n    case .success(let users):\n      // do something with the users\n    case .failure(let error):\n      // handle any errors\n  }\n}\n```\n\n## Issues\n\n### Get issues of authenticated user\n\nGet all issues across all the authenticated user\'s visible repositories including owned repositories, member repositories, and organization repositories.\n\n```swift\nOctokit(config).myIssues() { response in\n    switch response {\n        case .success(let issues):\n        // do something with the issues\n    case .failure:\n        // handle any errors\n    }   \n}\n```\n\n### Get a single issue\n\n```swift\nlet (owner, repo, number) = ("owner", "repo", 1347) // replace with actual owner, repo name, and issue number\nOctokit(config).issue(owner, repository: repo, number: number) { response in\n    switch response {\n    case .success(let issue):\n        // do something with the issue\n    case .failure:\n        // handle any errors\n    }\n}\n```\n\n### Open a new issue\n\n```swift\nOctokit(config).postIssue("owner", repository: "repo", title: "Found a bug", body: "I\'m having a problem with this.", assignee: "octocat", labels: ["bug", "duplicate"]) { response in\n    switch response {\n    case .success(let issue):\n        // do something with the issue\n    case .failure:\n        // handle any errors\n    }\n}\n```\n\n### Edit an existing issue\n\n```swift\nOctokit(config).patchIssue("owner", repository: "repo", number: 1347, title: "Found a bug", body: "I\'m having a problem with this.", assignee: "octocat", state: .Closed) { response in\n    switch response {\n    case .success(let issue):\n        // do something with the issue\n    case .failure:\n        // handle any errors\n    }\n}\n```\n## Pull requests\n\n### Get a single pull request\n```swift\nlet task = Octokit().pullRequest(session, owner: "octocat", repository: "Hello-World", number: 1) { response in\n    switch response {\n        case .success(let pullRequests):\n            // do something with a pull request\n        case .failure:\n            // handle any errors\n     }\n}\n```\n\n### List a pull requests\n```swift\nlet task = Octokit().pullRequests(session, owner: "octocat", repository: "Hello-World", base: "develop", state: Openness.Open) { response in\n    switch response {\n        case .success(let pullRequests):\n        // do something with a pull request list\n        case .failure:\n        // handle any errors\n    }\n}\n'