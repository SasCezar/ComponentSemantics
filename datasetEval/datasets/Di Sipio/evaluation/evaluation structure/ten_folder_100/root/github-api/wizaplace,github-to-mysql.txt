b"# GitHub to MySQL\n\nSynchronizes GitHub data (issues, labels, ...) to a MySQL database.\n\nFeatures:\n\n- [x] synchronize issues and pull requests\n    - [x] support multiple pages of results\n- [x] synchronize labels\n- [x] synchronize milestones\n\n## Getting started\n\n- clone the repository or [download a stable release](https://github.com/wizaplace/github-to-mysql/releases) and unzip it\n- run `composer install`\n- copy `.env.dist` to create a `.env` file\n- create the DB tables by running `./github-to-mysql db-init --force`\n    You can check which DB queries will be run by removing the `--force` option (the queries will NOT be run if the option is missing).\n    \nYou can also simply run `./github-to-mysql` without arguments and follow the instructions.\n\nThe `.env` file contains the configuration to connect to the MySQL database as well as the GitHub token. Alternatively to using this file you can set up all the environment variables it contains.\n\n## Usage\n```\n./github-to-mysql sync user/repository\n```\n\n## Use cases\n\nWith GitHub data in MySQL, you can extract interesting metrics. Here are a few examples:\n\n- discover labels with the most issues or pull requests\n\n- follow number of issues planned per milestone\n\n- ratio of pull requests VS issues\n\n    ```sql\n    SELECT count(*) AS count, IF(is_pull_request, 'Pull request', 'Issue') AS is_pull_request\n    FROM github_issues\n    GROUP BY is_pull_request\n    ORDER BY is_pull_request ASC\n    ```\n\n    ![](https://i.imgur.com/3xlF5vn.png)\n\n- average number of days to merge a pull request over the past weeks\n    \n    ```sql\n    SELECT\n        YEARWEEK(IFNULL(closed_at, NOW())) AS week,\n        AVG(TIMESTAMPDIFF(DAY, created_at, IFNULL(closed_at, NOW())))\n    FROM github_issues\n    WHERE is_pull_request = 1\n    GROUP BY week;\n    ```\n\n    ![](https://i.imgur.com/PH0CK70.png)\n\n- average number of pull requests open every day\n\n    ```sql\n    SELECT\n    \tDATE(updated_at) AS day,\n    \t(SELECT COUNT(*) FROM github_issues WHERE is_pull_request = 1 AND created_at < day AND (closed_at >= day OR open = 1)) AS pr_open\n    FROM github_issues\n    WHERE updated_at IS NOT NULL\n    GROUP BY day;\n    ```\n    \n    ![](https://i.imgur.com/AWYIDom.png)\n\n- total number of issues\n\n    ![](https://i.imgur.com/WvIQMeI.png)\n\nThose are just examples to illustrate the possibilities, we hope it will give you some ideas.\n"