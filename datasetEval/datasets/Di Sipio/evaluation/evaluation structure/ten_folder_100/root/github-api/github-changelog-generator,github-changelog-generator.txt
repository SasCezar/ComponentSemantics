b'[![Gem Version](https://badge.fury.io/rb/github_changelog_generator.svg)](http://badge.fury.io/rb/github_changelog_generator)\n[![CircleCI](https://circleci.com/gh/github-changelog-generator/github-changelog-generator.svg?style=svg)](https://circleci.com/gh/github-changelog-generator/github-changelog-generator)\n[![Inline docs](http://inch-ci.org/github/github-changelog-generator/github-changelog-generator.svg)](http://inch-ci.org/github/github-changelog-generator/github-changelog-generator)\n[![Join the chat at https://gitter.im/github-changelog-generator/chat](https://badges.gitter.im/github-changelog-generator/chat.svg)](https://gitter.im/github-changelog-generator/chat?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n# github-changelog-generator ![GitHub Logo](../master/images/logo.jpg)\n\n#### Update:\n\n\xf0\x9f\x96\x96 Keep it alive: We need more Collaborators to github-changelog-generator [#727](https://github.com/github-changelog-generator/github-changelog-generator/issues/727)\n\n---\n<!--\nTo update TOC, please run:\n> doctoc ./README.md --github\n -->\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON\'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n\n  - [Changelog generation has never been so easy](#changelog-generation-has-never-been-so-easy)\n  - [*What\xe2\x80\x99s the point of a changelog?*](#whats-the-point-of-a-changelog)\n  - [*Why should I care?*](#why-should-i-care)\n- [Installation](#installation)\n- [Running with Docker](#running-with-docker)\n- [Output example](#output-example)\n- [Usage](#usage)\n  - [Params](#params)\n  - [Params File](#params-file)\n  - [GitHub token](#github-token)\n- [Migrating from a manual changelog](#migrating-from-a-manual-changelog)\n  - [Rake task](#rake-task)\n- [Features and advantages of this project](#features-and-advantages-of-this-project)\n  - [Using the summary section feature](#using-the-summary-section-feature)\n  - [Alternatives](#alternatives)\n  - [Projects using this library](#projects-using-this-library)\n- [Am I missing some essential feature?](#am-i-missing-some-essential-feature)\n- [FAQ](#faq)\n- [Contributing](#contributing)\n- [License](#license)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n\n### Changelog generation has never been so easy\n\n**Fully automated changelog generation** - This gem generates a changelog file based on **tags**, **issues** and merged **pull requests** (and splits them into separate lists according to labels) from :octocat: GitHub Issue Tracker.\n\nSince you don\'t have to fill your `CHANGELOG.md` manually now: just run the script, relax and take a cup of :coffee: before your next release! :tada:\n\n### *What\xe2\x80\x99s the point of a changelog?*\n\nTo make it easier for users and contributors to see precisely what notable changes have been made between each release (or version) of the project.\n\n### *Why should I care?*\n\nBecause software tools are for _people_. "Changelogs make it easier for users and\ncontributors to see precisely what notable changes have been made between each\nrelease (or version) of the project."\n\n:arrow_right: *[https://keepachangelog.com](https://keepachangelog.com)*\n\n## Installation\n\nGitHub Changelog Generator is a [Ruby](https://www.ruby-lang.org/)\nprogram, distributed as a RubyGem. The Ruby language homepage has an [Installation page](https://www.ruby-lang.org/en/documentation/installation/).\n\nInstall the gem like:\n\n    $ gem install github_changelog_generator\n\nDepending on your system, you _may_ need to run the shell as an Administrator (Windows),\nor use `sudo gem install github_changelog_generator` (Linux).\n\n## Running with Docker\n\nUsing [Docker](https://www.docker.com/products/docker-desktop) is an alternative to installing Ruby and the gem.\n\n`ferrarimarco` has made a Docker image available that you can use.\n\nExample invocation:\n\n    $ docker run -it --rm -v "$(pwd)":/usr/local/src/your-app ferrarimarco/github-changelog-generator\n\n## Output example\n\n- Look at **[CHANGELOG.md](https://github.com/github-changelog-generator/Github-Changelog-Generator/blob/master/CHANGELOG.md)** for this project\n- [ActionSheetPicker-3.0/CHANGELOG.md](https://github.com/skywinder/ActionSheetPicker-3.0/blob/develop/CHANGELOG.md) was generated by command:\n\n      $ github_changelog_generator -u github-changelog-generator -p ActionSheetPicker-3.0\n\n- In general, it looks like this:\n\n> ## [1.2.5](https://github.com/github-changelog-generator/Github-Changelog-Generator/tree/1.2.5) (2015-01-15)\n>\n> [Full Changelog](https://github.com/github-changelog-generator/Github-Changelog-Generator/compare/1.2.4...1.2.5)\n>\n> **Implemented enhancements:**\n>\n> - Use milestone to specify in which version bug was fixed [\\#22](https://github.com/github-changelog-generator/Github-Changelog-Generator/issues/22)\n>\n> **Fixed bugs:**\n>\n> - Error when trying to generate log for repo without tags [\\#32](https://github.com/github-changelog-generator/Github-Changelog-Generator/issues/32)\n>\n> **Merged pull requests:**\n>\n> - PrettyPrint class is included using lowercase \'pp\' [\\#43](https://github.com/github-changelog-generator/Github-Changelog-Generator/pull/43) ([schwing](https://github.com/schwing))\n>\n> - support enterprise github via command line options [\\#42](https://github.com/github-changelog-generator/Github-Changelog-Generator/pull/42) ([glenlovett](https://github.com/glenlovett))\n\n\n## Usage\n\n-  Run this:\n\n\t   $ github_changelog_generator -u github_username -p github_project\n\n\tor, on the 1.14.x (current stable release)\n\n\t   $ github_changelog_generator github_username/github_project\n\n\n- For Github Enterprise repos, specify *both* `--github-site` and `--github-api` options:\n\n       $ github_changelog_generator --github-site="https://github.yoursite.com" \\\n                                  --github-api="https://github.yoursite.com/api/v3/"\n\nThis generates a `CHANGELOG.md`, with pretty Markdown formatting.\n\n### Params\n\nPrint help for all command-line options to learn more details:\n\n    $ github_changelog_generator --help\n\nFor more details about params, read the Wiki page: [**Advanced changelog generation examples**](https://github.com/github-changelog-generator/github-changelog-generator/wiki/Advanced-change-log-generation-examples)\n\n### Params File\n\nIn your project root, you can put a params file named `.github_changelog_generator` to override default params:\n\nExample:\n\n```\nunreleased=false\nfuture-release=5.0.0\nsince-tag=1.0.0\n```\n\n### GitHub token\n\nGitHub only allows 50 unauthenticated requests per hour.\n\nTherefore, it\'s recommended to run this script with authentication by using a **token**.\n\nHere\'s how:\n\n- [Generate a token here](https://github.com/settings/tokens/new?description=GitHub%20Changelog%20Generator%20token) - you only need "repo" scope for private repositories\n- Either:\n    - Run the script with `--token <your-40-digit-token>`; **OR**\n    - Set the `CHANGELOG_GITHUB_TOKEN` environment variable to your 40 digit token\n\nYou can set an environment variable by running the following command at the prompt, or by adding it to your shell profile (e.g., `~/.bash_profile` or `~/.zshrc`):\n\n    export CHANGELOG_GITHUB_TOKEN="\xc2\xabyour-40-digit-github-token\xc2\xbb"\n\nSo, if you get a message like this:\n\n``` markdown\nAPI rate limit exceeded for github_username.\nSee: https://developer.github.com/v3/#rate-limiting\n```\n\nIt\'s time to create this token! (Or, wait an hour for GitHub to reset your unauthenticated request limit.)\n\n## Migrating from a manual changelog\n\nKnowing how dedicated you are to your project, you probably haven\'t been waiting for `github-changelog-generator` to keep a changelog.\nBut you probably don\'t want your project\'s open issues and PRs for all past features listed in your historic changelog, either.\n\nThat\'s where `--base <your-manual-changelog.md>` comes in handy!\nThis option lets append your old manual changelog to the end of the generated entries.\n\nIf you have a `HISTORY.md` file in your project, it will automatically be picked as the static historical changelog and appended.\n\n### Rake task\n\nYou love `rake`? We do, too! So, we\'ve made it even easier for you:\nwe\'ve provided a `rake` task library for your changelog generation.\n\nConfigure the task in your `Rakefile`:\n\n```ruby\nrequire \'github_changelog_generator/task\'\n\nGitHubChangelogGenerator::RakeTask.new :changelog do |config|\n  config.user = \'username\'\n  config.project = \'project-name\'\n  config.since_tag = \'0.1.14\'\n  config.future_release = \'0.2.0\'\nend\n```\n\nAll command-line options can be passed to the `rake` task as `config`\nparameters. And since you\'re naming the `rake` task yourself, you can create\nas many as you want.\n\nYou can look for params names from the [parser source code (#setup_parser)](https://github.com/github-changelog-generator/github-changelog-generator/blob/master/lib/github_changelog_generator/parser.rb). For example, to translate the bugs label to Portuguese, instead of setting `config.bugs_label`, you have to set `config.bug_prefix`, and so on.\n\n## Features and advantages of this project\n\n- Generate canonical, neat changelog file, with default sections that follow [basic changelog guidelines](http://keepachangelog.com) :gem:\n- Optionally generate **Unreleased** changes (closed issues that have not released yet) :dizzy:\n- **GitHub Enterprise support** via command line options! :factory:\n- Flexible format **customization**:\n    - **Customize** issues that **should be added** to changelog :eight_spoked_asterisk:\n    - **Custom date formats** supported (but keep [ISO 8601](http://xkcd.com/1179/) in mind!) :date:\n    - Manually specify the version that fixed an issue (for cases when the issue\'s Closed date doesn\'t match) by giving the issue\'s `milestone` the same name as the tag of version :pushpin:\n    - Automatically **exclude specific issues** that are irrelevant to your changelog (by default, any issue labeled `question`, `duplicate`, `invalid`, or `wontfix`) :scissors:\n- **Distinguish** issues **by labels**. :mag_right:\n    - Merged pull requests (all merged pull-requests) :twisted_rightwards_arrows:\n    - Bug fixes (issues labeled `bug`) :beetle:\n    - Enhancements (issues labeled `enhancement`) :star2:\n    - Issues (closed issues with no labels) :non-potable_water:\n\n- Manually include or exclude issues by labels :wrench:\n- Customize lots more! Tweak the changelog to fit your preferences :tophat:\n(*See `github_changelog_generator --help`  for details)*\n\n### Using the summary section feature\n\nFor each version, you can add a _release summary_ with text, images, gif animations,\netc, and show new features and notes clearly to the user. This is done using GitHub metadata.\n\n**Example**: adding the release summary for v1.0.0:\n\n1. Create a new GitHub Issue\n2. In the Issue\'s _Description_ field, add your release summary content\n```\n![image](https://user-images.githubusercontent.com/12690315/45935880-006a8200-bfeb-11e8-958e-ff742ae66b96.png)\n\nHello, World! :tada:\n```\n3. Set the Issue Label `release-summary` and add it to the GitHub Milestone `v1.0.0`\n4. Close the Issue and execute `github-changelog-generator`\n5. The result looks like this:\n> ## [v1.0.0](https://github.com/github-changelog-generator/github-changelog-generator/tree/1.0.0) (2014-11-07)\n> [Full Changelog](https://github.com/github-changelog-generator/github-changelog-generator/compare/0.1.0...1.0.0)\n>\n> ![image](https://user-images.githubusercontent.com/12690315/45935880-006a8200-bfeb-11e8-958e-ff742ae66b96.png)\n>\n> Hello, World! :tada:\n>\n> **Implemented enhancements:**\n> - Add some features\n\n### Alternatives\n\nHere is a [wikipage list of alternatives](https://github.com/github-changelog-generator/Github-Changelog-Generator/wiki/Alternatives) that I found. But none satisfied my requirements.\n\n*If you know other projects, feel free to edit this Wiki page!*\n\n\n### Projects using this library\n\nHere\'s a [wikipage list of projects](https://github.com/github-changelog-generator/Github-Changelog-Generator/wiki/Projects-using-Github-Changelog-Generator).\n\nIf you\'ve used this project in a live app, please let me know! Nothing makes me happier than seeing someone else take my work and go wild with it.\n\n*If you are using `github_changelog_generator` to generate your project\'s changelog, or know of other projects using it, please [add it to this list](https://github.com/github-changelog-generator/github-changelog-generator/wiki/Projects-using-Github-Changelog-Generator).*\n\n## Am I missing some essential feature?\n\n- **Nothing is impossible!**\n\n- Open an [issue](https://github.com/github-changelog-generator/Github-Changelog-Generator/issues/new) and let\'s make the generator better together!\n\n- *Bug reports, feature requests, patches, and well-wishes are always welcome.* :heavy_exclamation_mark:\n\n## FAQ\n\n- ***I already use GitHub Releases. Why do I need this?***\n\nGitHub Releases is a very good thing. And it\'s very good practice to maintain it. (Not a lot of people are using it yet!) :congratulations:\n\n*BTW: I would like to support GitHub Releases in [next releases](https://github.com/github-changelog-generator/github-changelog-generator/issues/56) ;)*\n\nI\'m not trying to compare the quality of handwritten and auto-generated logs. That said....\n\nAn auto-generated changelog really helps, even if you manually fill in the release notes!\n\nFor example:\n\nWhen you find a closed bug, it is very useful to know which release fixed it.\nSo that you can easily find the issue by \\# in `CHANGELOG.md`.\n\n- It\'s not quite as easy to find this in handwritten releases notes.\n- A generated file saves you the trouble of remembering everything;\n  sometimes people forget to add things to a handwritten file.\n\nUltimately, I think GitHub Releases are ideal for end-users.\nMeanwhile, `CHANGELOG.md` lives right in the repository, with its detailed list of changes, which is handy for developers.\nFinally, there\'s nothing wrong with using GitHub Releases alongside `CHANGELOG.md` in this combination.\n\n- ***I got an "API rate limit exceeded" error message. What does this mean?***\n\nGitHub [limits the number of API requests](https://developer.github.com/v3/#rate-limiting) you can make in an hour. You can make up to 5,000 requests per hour. For unauthenticated requests, the rate limit is only up to 60 requests per hour. Unauthenticated requests are associated with your IP address (not the user making requests).\n\nIf you\'re seeing this warning, please do the following:\n\n1. Make sure you\'re providing an OAuth token, so you\'re not making requests anonymously. Using an OAuth token increases your hourly request maximum from 60 to 5000.\n2. If you have a large repo with lots of issues/PRs, you can use `--max-issues NUM` to limit the number of issues that are pulled back. For example: `--max-issues 1000`\n\n- ***My Ruby version is very old, can I use this?***\n\nWhen your Ruby is old, and you don\'t want to upgrade, and you want to\ncontrol which libraries you use, you can use Bundler.\n\nIn a Gemfile, perhaps in a non-deployed `:development` group, add this\ngem:\n\n```ruby\ngroup :development do\n  gem \'github_changelog_generator\', require: false\nend\n```\n\nThen you can keep back dependencies like rack, which currently is only\ncompatible with Ruby >= 2.2.2. So, use an older version for your app by\nadding a line like this to the Gemfile:\n\n```\ngem \'rack\', \'~> 1.6\'\n```\n\nThis way, you can keep on using github_changelog_generator, even if you\ncan\'t get the latest version of Ruby installed.\n\n- ***Windows: 1.14.x wants to create a file on an invalid path. Why?***\n\nWindows: [v1.14.0 introduced a bug where it attempts to create /tmp/github_changelog-logger.log... which isn\'t a valid path on Windows and thus fails](https://github.com/github-changelog-generator/github-changelog-generator/issues/458)\n\nWorkaround: Create a `C:\\tmp`.\n\n## Contributing\n\nWe have collected notes on how to contribute to this project in [CONTRIBUTING.md].\n\n[CONTRIBUTING.md]: CONTRIBUTING.md\n\n## License\n\nGithub Changelog Generator is released under the [MIT License](http://www.opensource.org/licenses/MIT).\n'