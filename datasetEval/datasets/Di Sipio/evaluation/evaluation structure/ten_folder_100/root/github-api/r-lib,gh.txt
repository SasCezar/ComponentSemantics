b'\n\n\n# gh\n\n> GitHub API\n\n[![Linux Build Status](https://travis-ci.org/r-lib/gh.svg?branch=master)](https://travis-ci.org/r-lib/gh)\n[![Windows Build status](https://ci.appveyor.com/api/projects/status/github/r-lib/gh?svg=true)](https://ci.appveyor.com/project/gaborcsardi/gh)\n[![](http://www.r-pkg.org/badges/version/gh)](http://www.r-pkg.org/pkg/gh)\n[![CRAN RStudio mirror downloads](http://cranlogs.r-pkg.org/badges/gh)](http://www.r-pkg.org/pkg/gh)\n[![Coverage Status](https://img.shields.io/codecov/c/github/r-lib/gh/master.svg)](https://codecov.io/github/r-lib/gh?branch=master)\n\nMinimalistic client to access\n[GitHub\'s API v3](https://developer.github.com/v3/).\n\n## Installation\n\n\nInstall the package from CRAN as usual:\n\n```r\ninstall.packages("gh")\n```\n\n## Usage\n\n\n```r\nlibrary(gh)\n```\n\nUse the `gh()` function to access all API endpoints. The endpoints are\nlisted in the [documentation](https://developer.github.com/v3/).\n\nThe first argument of `gh()` is the endpoint. Note that the leading slash\nmust be included as well. Parameters can be passed as extra arguments. E.g.\n\n\n```r\nmy_repos <- gh("/user/repos", type = "public")\nvapply(my_repos, "[[", "", "name")\n```\n\n```\n#>  [1] "after"               "argufy"              "ask"                \n#>  [4] "baseimports"         "citest"              "clisymbols"         \n#>  [7] "cmaker"              "cmark"               "conditions"         \n#> [10] "crayon"              "debugme"             "devtools"           \n#> [13] "diffobj"             "disposables"         "dotenv"             \n#> [16] "elasticsearch-jetty" "falsy"               "fswatch"            \n#> [19] "gitty"               "httr"                "httrmock"           \n#> [22] "ISA"                 "keypress"            "lintr"              \n#> [25] "macBriain"           "maxygen"             "MISO"               \n#> [28] "parr"                "parsedate"           "pingr"\n```\n\nThe JSON result sent by the API is converted to an R object.\n\nIf the end point itself has parameters, these can also be passed\nas extra arguments:\n\n\n```r\nj_repos <- gh("/users/:username/repos", username = "jeroen")\nvapply(j_repos, "[[", "", "name")\n```\n\n```\n#>  [1] "apps"               "asantest"           "awk"               \n#>  [4] "base64"             "bcrypt"             "blog"              \n#>  [7] "brotli"             "cheerio"            "cmark"             \n#> [10] "commonmark"         "covr"               "cranlogs"          \n#> [13] "curl"               "cyphr"              "daff"              \n#> [16] "data"               "data.table.extras"  "devtools"          \n#> [19] "DiagrammeR"         "docdbi"             "docplyr"           \n#> [22] "docs-travis-ci-com" "dplyr"              "encode"            \n#> [25] "evaluate"           "feather"            "fib"               \n#> [28] "figures"            "gdtools"            "geojson"\n```\n\n### POST, PATCH, PUT and DELETE requests\n\nPOST, PATCH, PUT, and DELETE requests can be sent by including the\nHTTP verb before the endpoint, in the first argument. E.g. to\ncreate a repository:\n\n\n```r\nnew_repo <- gh("POST /user/repos", name = "my-new-repo-for-gh-testing")\n```\n\nand then delete it:\n\n\n```r\ngh("DELETE /repos/:owner/:repo", owner = "gaborcsardi",\n   repo = "my-new-repo-for-gh-testing")\n```\n\n### Tokens\n\nBy default the `GITHUB_PAT` environment variable is used. Alternatively, \none can set the `.token` argument of `gh()`.\n\n### Pagination\n\nSupply the `page` parameter to get subsequent pages:\n\n\n```r\nmy_repos2 <- gh("GET /users/:username/repos", username = "gaborcsardi",\n  type = "public", page = 2)\nvapply(my_repos2, "[[", "", "name")\n```\n\n```\n#>  [1] "pkgconfig"               "playground"             \n#>  [3] "praise"                  "prettycode"             \n#>  [5] "prettyunits"             "progress"               \n#>  [7] "prompt"                  "r-font"                 \n#>  [9] "R6"                      "rcorpora"               \n#> [11] "readline"                "remoji"                 \n#> [13] "resume"                  "rhub-presentations"     \n#> [15] "rintrojs"                "roxygen"                \n#> [17] "scidb"                   "spark"                  \n#> [19] "sparklyr"                "splicing"               \n#> [21] "tamper"                  "testthat"               \n#> [23] "trump"                   "user2016-tutorial-shiny"\n#> [25] "webdriver"               "whoami"\n```\n\n## Environment Variables\n\n+ The `GITHUB_API_URL` environment variable is used for the default github api url. \n+ One of `GITHUB_PAT` or `GITHUB_TOKEN` environment variables is used, in this\norder, as default token.\n\n## License\n\nMIT \xc2\xa9 G\xc3\xa1bor Cs\xc3\xa1rdi, Jennifer Bryan, Hadley Wickham\n'