b'## Builder Book\n\nOpen source web app to publish documentation or books.\n\nWe\'ve used this `builderbook` project to build:\n- [Async](https://async-await.com) - communication tool for small teams of software developers\n- [Builder Book](https://builderbook.org) - learn how to build full-stack web apps from scratch\n- [SaaS Boilerplate](https://github.com/async-labs/saas) - open source web app to build your own SaaS product\n\n## Live app:\n- https://builderbook.org/books/builder-book/introduction.\n\n## How can you use this app?\n- As learning material for React/Material-UI/Next/Express/Mongoose/MongoDB stack\n- As learning material for Google/Github/AWS SES/Mailchimp/Stripe APIs.<br> \n- As starting point for your own project. Use the code in [book/1-begin](https://github.com/builderbook/builderbook/tree/master/book/1-begin) or [book/1-end](https://github.com/builderbook/builderbook/tree/master/book/1-end) as a lean boilerplate or modify the final app.<br>\n- As a production-ready web app to publish documentation or sell content on your own website (we sell our own book).\n\n\n## Contents\n- [Showcase](#showcase)\n- [Run locally](#run-locally)\n- [Add a new book](#add-a-new-book)\n- [Add your own styles](#add-your-own-styles)\n- [Deploy](#deploy)\n- [Deploy to Heroku](#deploy-to-heroku)\n- [Scaling](#scaling)\n- [Screenshots](#screenshots)\n- [Built with](#built-with)\n  - [Core stack](#core-stack)\n  - [Third party APIs](#third-party-apis)\n- [Docker](#docker)\n- [Contributing](#contributing)\n- [Team](#team)\n- [License](#license)\n- [Project structure](#project-structure)\n\n\n## Showcase\nCheck out projects built with the help of this open source app. Feel free to add your own project by creating a pull request.\n- [Retaino](https://retaino.com) by [Earl Lee](https://github.com/earllee) : Save, annotate, review, and share great web content. Receive smart email digests to retain key information.\n- [SaaS boilerplate app](https://github.com/async-labs/saas-by-async): Open source web app that saves you weeks of work when building your own SaaS product. \n- [Harbor](https://github.com/builderbook/harbor): Open source web app that allows anyone with a Gmail account to automatically charge for advice sent via email.\n- [Async](https://async-await.com/): asynchronous communication and project management tool for small teams of software engineers.\n\n\n## Run locally\n- Clone the project and run `yarn` to add packages.\n- Before you start the app, create a `.env` file at the app\'s root. This file must have values for some env variables specified below.\n  - To get `MONGO_URL_TEST`, we recommend a [free MongoDB at MongoDB Atlas](https://docs.mongodb.com/manual/tutorial/atlas-free-tier-setup/) (to be updated soon with MongoDB Atlas, see [issue](https://github.com/builderbook/builderbook/issues/138)).\n  - Get `Google_clientID` and `Google_clientSecret` by following [official OAuth tutorial](https://developers.google.com/identity/sign-in/web/sign-in#before_you_begin).\n\n    Important: For Google OAuth app, callback URL is: http://localhost:8000/oauth2callback <br/>\n    Important: You have to enable Google+ API in your Google Cloud Platform account.\n\n  - Specify your own secret key for Express session `SESSION_SECRET`: https://github.com/expressjs/session#secret\n\n\nTo use all features and third-party integrations (such as Stripe, Google OAuth, Mailchimp), add values for all of the following env variables in your `.env` file:\n\n  `.env` :\n  ```\n  # Used in server/app.js\n  MONGO_URL="xxxxxx"\n  MONGO_URL_TEST="xxxxxx"\n  SESSION_SECRET="xxxxxx"\n\n  # Used in server/google.js\n  Google_clientID="xxxxxx"\n  Google_clientSecret="xxxxxx"\n\n  # Used in server/aws.js\n  Amazon_accessKeyId="xxxxxx"\n  Amazon_secretAccessKey="xxxxxx"\n  Amazon_region="xxxxxx"\n\n  # Used in server/models/User.js\n  EMAIL_SUPPORT_FROM_ADDRESS="xxxxxx"\n  \n  ----------\n  # All environmental variables above this line are required for successful sign up\n  \n  # Used in server/github.js\n  Github_Test_ClientID="xxxxxx"\n  Github_Test_SecretKey="xxxxxx"\n  Github_Live_ClientID="xxxxxx"\n  Github_Live_SecretKey="xxxxxx"\n\n  # Used in server/stripe.js\n  Stripe_Test_SecretKey="xxxxxx"\n  Stripe_Live_SecretKey="xxxxxx"\n\n  # Used in server/mailchimp.js\n  MAILCHIMP_API_KEY="xxxxxx"\n  MAILCHIMP_REGION="xxxxxx"\n  MAILCHIMP_SIGNUPS_LIST_ID="xxxxxx"\n  MAILCHIMP_PURCHASED_LIST_ID="xxxxxx"\n  MAILCHIMP_TUTORIALS_LIST_ID="xxxxxx"\n\n  ```\n\n- Start the app with `GA_TRACKING_ID=xxxxxx StripePublishableKey=xxxxxx yarn dev`.\n  - To get `GA_TRACKING_ID`, set up Google Analytics and follow [these instructions](https://support.google.com/analytics/answer/1008080?hl=en) to find your tracking ID.\n  - To get `StripePublishableKey`, set up Stripe and find your key [here](https://dashboard.stripe.com/account/apikeys).\n\n  Env keys `GA_TRACKING_ID` and `StripePublishableKey` are universally available (client and server). Env keys inside `.env` file are used in server code only.\n- The _first registered user_ in the app becomes an Admin user (user document gets parameters`"isAdmin": true`).\n\n\n## Add a new book\n- Create a new Github repo (public or private).\n- In that repo, create an `introduction.md` file and write some content.\n- At the top of your `introduction.md` file, add metadata in the format shown below. See [this file](https://github.com/builderbook/demo-book/blob/master/introduction.md) as an example.\n  \n  ```\n  ---\n  title: Introduction\n  seoTitle: title for search engines\n  seoDescription: description for search engines\n  isFree: true\n  ---\n  ```\n\n- Go to the app, click "Connect Github".\n- Click "Add Book". Enter details and select the Github repo you created.\n- Click "Save".\n\nWhen you add new `.md` files or update content, go to the `BookDetail` page of your app and click `Sync with Github`. \n\nImportant: All `.md` files in your Github repo _must_ have metadata in the format shown above.\n\nImportant: All `.md` files in your Github repo _must_ have name `introduction.md` or `chapter-N.md`.\n\nTo make the content of a `.md` file _private_ (meaning a person must purchase the content to see it), remove `isFree:true`  and add `excerpt:""`. Add some excerpt content - this content is public and serves as a free preview.\n\n\n## Add your own styles\nTo change the color scheme of this app, modify the `primary` and `secondary` theme colors inside `lib/context.js`. Select any colors from Material UI\'s official [color palette](https://material-ui-next.com/style/color/#color).\n\nRecommended ways to add your own styles to this app:\n1. [Inline style for a single element](#inline-style-for-a-single-element)\n2. [Reusable style for multiple elements within single page or component](#reusable-style-for-multiple-elements-within-single-page-or-component)\n3. [Reusable/importable style for multiple pages or components](#reusableimportable-style-for-multiple-pages-or-components)\n4. [Global style for all pages in application](#global-style-for-all-pages-in-application)\n\n\n### Inline style for a single element\nUSE CASE: apply a style to _one element_ on a single page/component <br>\nFor example, in our `book` page, we wrote this single inline style:\n```\n<p style={{ textAlign: \'center\' }}>\n  ...\n</p>\n```\n[See usage](https://github.com/builderbook/builderbook/blob/49116676e0894fcf00c33d208a284359b30f12bb/pages/book.js#L48)\n\n\n### Reusable style for multiple elements within single page or component\nUSE CASE: apply the same style to _multiple elements_ on a single page/component.<br>\nFor example, in our `tutorials` page, we created `styleExcerpt` and applied it to a `<p>` element within the page:\n\n```\nconst styleExcerpt = {\n  margin: \'0px 20px\',\n  opacity: \'0.75\',\n  fontSize: \'13px\',\n};\n\n<p style={styleExcerpt}>\n  ...\n</p>\n\n```\n[See usage](https://github.com/builderbook/builderbook/blob/49116676e0894fcf00c33d208a284359b30f12bb/pages/tutorials.js#L14)\n\n\n### Reusable/importable style for multiple pages or components\nUSE CASE: apply the same style to elements on _multiple pages/components_.<br>\nFor example, we created `styleH1` inside `components/SharedStyles.js` and exported the style at the bottom of the file:\n```\nconst styleH1 = {\n  textAlign: \'center\',\n  fontWeight: \'400\',\n  lineHeight: \'45px\',\n};\n\nmodule.exports = {\n  styleH1,\n};\n```\n[See usage](https://github.com/builderbook/builderbook/blob/04c6cf78bee42455d48ef3466d868f2196381a57/components/SharedStyles.js#L48)\n\nWe then imported `styleH1` into our `book` page, as well as our `index` page, and applied the style to a `<h1>` element:\n```\nimport {\n  styleH1,\n} from \'../components/SharedStyles\';\n\n<h1 style={styleH1}>\n  ...\n</h1>\n```\n[See usage](https://github.com/builderbook/builderbook/blob/49116676e0894fcf00c33d208a284359b30f12bb/pages/book.js#L13)\n\n\n### Global style for all pages in application\nUSE CASE: apply the same style to elements on _all pages_ of your app.<br>\nCreate your style in `pages/_document.js`. For example, we specified a style for all hyperlinks that use the `<a>` element:\n```\n<style>\n  {`\n    a, a:focus {\n      font-weight: 400;\n      color: #1565C0;\n      text-decoration: none;\n      outline: none\n    }\n  `}\n</style>\n```\n[See usage](https://github.com/builderbook/builderbook/blob/49116676e0894fcf00c33d208a284359b30f12bb/pages/_document.js#L51)\n\nWe also specified styles for all content inside a `<body>` element:\n```\n<body\n  style={{\n    font: \'16px Muli\',\n    color: \'#222\',\n    margin: \'0px auto\',\n    fontWeight: \'400\',\n    lineHeight: \'1.5em\',\n    backgroundColor: \'#F7F9FC\',\n  }}\n>\n</body>\n```\n[See usage](https://github.com/builderbook/builderbook/blob/49116676e0894fcf00c33d208a284359b30f12bb/pages/_document.js#L96)\n\n\n## Deploy\n\nIMPORTANT: Now v1 is depreciated for new users. See the next section about deploying to Heroku.\n\n- Install now: `npm install -g now`.\n- Point your domain to Zeit world nameservers: [three steps](https://zeit.co/world#get-started).\n- Create `now.json` file. Make sure to add actual values for `GA_TRACKING_ID`, `StripePublishableKey` (production-level) and `alias`. Read more about how to [configure now](https://zeit.co/docs/features/configuration).\n```\n{\n  "version": 1\n  "env": {\n    "NODE_ENV": "production",\n    "GA_TRACKING_ID": "xxxxxx",\n    "StripePublishableKey": "xxxxxx"\n  },\n  "dotenv": true\n  "alias": "mydomain.com",\n  "scale": {\n    "sfo1": {\n      "min": 1,\n      "max": 1\n    }\n  }\n}\n```\n- Make sure you updated `ROOT_URL` value in `package.json` and `lib/getRootURL.js`.\n- Check that you have all production-level env variables in `.env`. \n- In your terminal, deploy the app by running `now`.\n- Now outputs your deployment\'s URL, for example: `builderbook-zomcvzgtvc.now.sh`.\n- Point successful deployment to your domain with `now alias` or `now ln NOW_URL mydomain.com` (`NOW_URL` is URL of your deployment).\n\n## Deploy to Heroku\n\nIn this section we will learn how to deploy our app to [Heroku cloud](https://www.heroku.com/home). We will deploy our React-Next-Express app to lightweight Heroku container called [dyno](https://www.heroku.com/dynos).\n\nInstructions are for app located at `/book/8-end`.\nAdjust route if you are deploying app from the root of this public repo.\n\nWe will discuss the following topics in this section:\n1. installing Heroku on Linux-based OS\n2. creating app on Heroku dashboard\n3. preparing app for deployment\n4. configuring env variables\n5. deploying app\n6. checking logs\n7. adding custom domain\n\nLet\'s go step by step.\n\n1. Install Heroku CLI (command-line interface) on your OS. Follow the [official guide](https://devcenter.heroku.com/articles/heroku-cli). In this book we provide instructions for Linux-based systems, in particular, a Ubuntu OS. For Ubuntu OS, run in your terminal:\n  <pre>sudo snap install --classic heroku</pre>\n  To confirm a successful installation, run:\n  <pre>heroku --version</pre>\n  As example, my output that confirms successful installation, looks like:\n  <pre>heroku/7.22.7 linux-x64 node-v11.10.1</pre>\n\n2. [Sign up](https://signup.heroku.com/) for Heroku, go to your Heroku dashboard and click purple <b>New</b> button on the right:\n  ![image](https://user-images.githubusercontent.com/10218864/54558094-12b1f100-497a-11e9-94dd-d36399052931.png)\n\n    On the next screen, give a name to your app and select a region. Click purple <b>Create app</b> button at the bottom:\n    ![image](https://user-images.githubusercontent.com/10218864/54558276-8eac3900-497a-11e9-9026-25aa5047af87.png)\n\n    You will be redirected to `Deploy` tab of your newly created Heroku app:\n    ![image](https://user-images.githubusercontent.com/10218864/54558544-417c9700-497b-11e9-8885-6fdfde21c747.png)\n\n3. As you can see from the above screenshot, you have two options. You can deploy the app directly from your local machine using Heroku CLI or directly from GitHub.\n    In this tutorial, we will deploy a `builderbook/builderbook/book/8-end` app from our public [builderbook/builderbook](https://github.com/builderbook/builderbook) repo hosted on GitHub. Deploying from a private repo will be a similar process.\n    \n    Deploying from GitHub has a few advantages. Heroku uses git to track changes in a codebase. It\'s possible to deploy app from the local machine using Heroku CLI, however you have to create a [Git repo](https://git-scm.com/book/en/v2/Git-Basics-Getting-a-Git-Repository) for `builderbook/builderbook/book/8-end` with `package.json` file at the root level. A first advantage is that we can deploy from a non-root folder using GitHub instead of Heroku CLI.\n    \n    A second advantage is automation, later on you can create a branch that automatically deploy every new commit to Heroku. For example, we have a [deploy branch](https://github.com/async-labs/saas/tree/deploy) for our demo for [SaaS boilerplate](https://github.com/async-labs/saas/). When we commit to `master` branch - there is no new deployment, when we commit to `deploy` branch - new change is automatically deployed to Heroku app.\n\n    Let\'s set up deploying from GitHub. On `Deploy` tab of your Heroku app at Heroku dashboard, click <b>Connect to GitHub</b>, then search for your repo, then click <b>Connect</b> next to the name of the proper repo:\n    ![image](https://user-images.githubusercontent.com/10218864/54560210-09775300-497f-11e9-9027-2e3850ec7ff1.png)\n\n    If successful, you will see green text `Connected` and be offered to select a branch and deploy app automatically or manually. Automatic deployment will deploy every new commit, manual deployment requires you to manually click on <b>Deploy Branch</b> button. For simplicity, we will deploy manually from `master` branch of our `builderbook/builderbook` repo.\n\n    Before we perform a manual deployment via GitHub, we need Heroku to run some additional code while app is being deploying. Firstly, we need to tell Heroku that `8-end` app in the `builderbook/builderbook` repo is not at the root level, it\'s actually nested at `/book/8-end`. Secondly, Heroku needs to know that our app is Node.js app so Heroku finds `package.json` file, properly installs dependencies and runs proper scripts (such as `build` and `start` scripts from `package.json`). To achieve this, we need to add so called `buildpacks` to our Heroku app. Click `Settings` tab, scroll to `Buildpacks` section and click purple <b>Add buildpack</b> button:\n    ![image](https://user-images.githubusercontent.com/10218864/54561192-50fede80-4981-11e9-976a-c3d7c88527ec.png)\n\n    Add two buildpacks, first is `https://github.com/timanovsky/subdir-heroku-buildpack` and second is `heroku/nodejs`:\n    ![image](https://user-images.githubusercontent.com/10218864/54561577-30835400-4982-11e9-997f-4711d999808e.png)\n\n    Next, scroll up while on `Settings` tab and click purple <b>Reveal Config Vars</b> button, create a new environmental variable `PROJECT_PATH` with value `book/8-end`:\n    ![image](https://user-images.githubusercontent.com/10218864/54561775-a5568e00-4982-11e9-9561-2e5827873779.png)\n\n    The above variable will be used by the first buildpack `subdir-heroku-buildpack` to deploy app from repo\'s subdirectory.\n\n4. If we deploy app at this point, our app will deploy with errors since we did not add environmental variables. Similar to how you added `PROJECT_PATH` variable, add all environmental variables from `book/8-end/.env` file to your Heroku app. Remember to add:\n  - `MONGO_URL`,\n  - `Google_clientID`, \n  - `Google_clientSecret`,\n  - `EMAIL_SUPPORT_FROM_ADDRESS`,\n  - `Github_Test_ClientID`,\n  - `Github_Test_SecretKey`,\n  - `Github_Live_ClientID`,\n  - `Github_Live_SecretKey`,\n  - `Stripe_Test_SecretKey`,\n  - `Stripe_Live_SecretKey`,\n  - `MAILCHIMP_API_KEY`,\n  - `MAILCHIMP_PURCHASED_LIST_ID`,\n  - `SESSION_SECRET`.\n\n\n5. While on `Settings` tab, scroll to `Domains and certificates` section and note your app\'s URL. My app\'s URL is: https://builderbook-8-end.herokuapp.com\n    Let\'s deploy, go to `Deploy` tab, scroll to `Manual deploy` section and click <b>Deploy branch</b> button.\n    After deployment process is complete , navigate to your app\'s URL:\n    ![image](https://user-images.githubusercontent.com/10218864/54564053-10569380-4988-11e9-87dd-f81a28dd6406.png)\n\n6. Server logs are not available on Heroku dashboard. To see logs, you have to use Heroku CLI.\n    In your terminal, run:\n    <pre>heroku login</pre>\n\n    Follow instructions to log in to Heroku CLI.\n\n    After successful login, terminal will print:\n    <pre>Logged in as email@domain.com</pre>\n\n    Where `email@domain.com` is an email address that you used to create your Heroku account.\n\n    To see logs, in your terminal run:\n    <pre>heroku logs --app builderbook-8-end --tail</pre>\n\n    In your terminal, you will see your most recent logs and be able to see a real-time logs. \n\n    You can output certain number of lines (N) for retrieved logs by adding `--num N` to the `heroku logs` command.\n    You can print only app\'s logs by adding `--source app` or system\'s logs by adding `--source heroku`.  \n\n7. Time to add a custom domain. The Heroku app that we created is deployed on `free dyno`. Free dyno plan does not let you to add a custom domain to your app. To add custom domain, go to `Resources` tab and click purple <b>Change Dyno Type</b> button:\n    ![image](https://user-images.githubusercontent.com/10218864/54622849-983faa80-4a27-11e9-957f-54fe5aa742ca.png)\n\n    Select a `Hobby` plan and click <b>Save</b> button.\n\n    Navigate to `Settings` tab and scroll to the `Domains and certificates` and click purple <b>Add domain</b> button:\n    ![image](https://user-images.githubusercontent.com/10218864/54623152-36cc0b80-4a28-11e9-974b-8a14fb56a86a.png)\n\n    Type your custom domain name, I added `heroku.builderbook.org` as a custom domain, click <b>Save changes</b> button.\n\n    Heroku will displa you a value for CNAME record that you have to create for your custom domain. For me, custom domain is `heroku.builderbook.org and I manage DNS records at Now by Zeit.\n    \n    After you create a CNAME, ACM status on Heroku\'s dashboard will change to `Ok`:\n    ![image](https://user-images.githubusercontent.com/10218864/54624195-2452d180-4a2a-11e9-999d-a6a771cde73c.png)\n\nIt\'s important that you remember to manually add your custom domain to the settings of your Google OAuth app (Chapter 3) and GitHub OAuth app (Chapter 6). If you forget to do it, you will see errors when you try to log in to your app or when you try to connect GitHub to your app.\n\n## Scaling\n\nYou may want to consider splitting single Next/Express server into two servers:\n- Next server for serving pages, server-side caching, sitemap and robots\n- Express server for internal and external APIs\n\nHere is an example of web application with split servers:\nhttps://github.com/async-labs/saas\n\nSplitting servers will get you:\n- faster page loads since Next rendering does not block internal and external APIs,\n- faster code reload times during development,\n- faster deployment and more flexible scaling of individual apps.\n\n\n## Screenshots\nChapter excerpt with Buy Button for Public/Guest visitor:\n![builderbook-public-readchapter](https://user-images.githubusercontent.com/26158226/38517453-e84a7566-3bee-11e8-82cd-14b4dfbe6a78.png)\n\nChapter content and Table of Contents for book Customer:\n![builderbook-customer-readchapter](https://user-images.githubusercontent.com/26158226/38518394-9ee97306-3bf1-11e8-8df2-8c05fb75249a.png)\n\nAdd-book/Edit-book page for Admin user:\n![builderbook-admin-editbook](https://user-images.githubusercontent.com/26158226/38517449-e5faaa38-3bee-11e8-9c02-740096dc860e.png)\n\nBook-detail page for Admin user:\n![builderbook-admin-bookdetails](https://user-images.githubusercontent.com/26158226/38517450-e7005bd0-3bee-11e8-9916-81f32d3d1827.png)\n\n\n## Built with\n\n#### Core stack\n- [React](https://github.com/facebook/react)\n- [Material-UI](https://github.com/mui-org/material-ui)\n- [Next](https://github.com/zeit/next.js)\n- [Express](https://github.com/expressjs/express)\n- [Mongoose](https://github.com/Automattic/mongoose)\n- [MongoDB](https://github.com/mongodb/mongo)\n\n#### Third party APIs\n- Google OAuth\n- Github\n- AWS SES\n- Stripe\n- MailChimp\n\nCheck out [package.json](https://github.com/builderbook/builderbook/blob/master/package.json).\n\n## Docker\n- Install Docker and Docker Compose\n- Modify `docker-compose-dev.yml` file\n- If using Ubuntu, follow these steps: https://stackoverflow.com/questions/38775954/sudo-docker-compose-command-not-found\n- Start app with `docker-compose -f docker-compose-dev.yml up`\n\n## Contributing\nWe welcome suggestions and pull requests, especially for [issues](https://github.com/builderbook/builderbook/issues) labeled as `discussion` and `contributions welcome`.\n\nBy participating in this project, you are expected to uphold Builder Book\'s [Code of Conduct](https://github.com/builderbook/builderbook/blob/master/CODE-OF-CONDUCT.md).\n\nWant to support this project? Sign up at [async](https://async-await.com) and/or buy our [book](https://builderbook.org), which teaches you how to build this project from scratch. Also check out our open source [SaaS boilerplate app](https://github.com/async-labs/saas).\n\n\n## Team\n- [Kelly Burke](https://github.com/klyburke)\n- [Delgermurun Purevkhuu](https://github.com/delgermurun)\n- [Timur Zhiyentayev](https://github.com/tima101)\n\nYou can contact us at team@builderbook.org\n\nIf you want to hire us to customize or build features on top of our [SaaS boilerplate](https://github.com/async-labs/saas), please fill out our [form](https://forms.gle/vaLHem6Ccmp3hics6).\n\n## License\nAll code in this repository is provided under the [MIT License](https://github.com/builderbook/builderbook/blob/master/LICENSE.md).\n\n\n## Project structure\n\n```\n.\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 book                                # Codebases for each chapter of our book\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 components                          # React components\n\xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 admin                           # Components used on Admin pages\n\xe2\x94\x82   \xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 EditBook.js                 # Edit title, price, and repo of book\n\xe2\x94\x82   \xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 GiveFreeBook.js             # Give free book to user\n\xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 customer                        # Components used on Customer pages\n\xe2\x94\x82   \xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 Bookmark.js                 # Bookmark a section within a book chapter\n\xe2\x94\x82   \xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 BuyButton.js                # Buy book\n\xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 BookReviews.js                  # Component that outputs grid of reviews\n\xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 Header.js                       # Header component\n\xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 HomeFooter.js                   # Footer component on homepage\n\xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 HomeHeader.js                   # Header component on homepage\n\xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 MenuDrop.js                     # Dropdown menu\n\xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 Notifier.js                     # In-app notifications for app\'s users\n\xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 SubscribeForm.js                # Form to subscribe to MailChimp newsletter\n\xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 TOC.js                          # Table of Contents\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 lib                                 # Code available on both client and server\n\xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 api                             # Client-side API methods\n\xe2\x94\x82   \xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 admin.js                    # Admin user methods\n\xe2\x94\x82   \xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 customer.js\t                # Customer user methods\n\xe2\x94\x82   \xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 getRootURL.js               # Returns ROOT_URL\n\xe2\x94\x82   \xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 public.js                   # Public user methods\n\xe2\x94\x82   \xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 sendRequest.js              # Reusable code for all GET and POST requests\n\xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 SharedStyles.js                 # List of _reusable_ styles\n\xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 context.js                      # Context for Material-UI integration\n\xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 env.js                          # Universal config for environmental variables\n\xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 gtag.js                         # Universal config for Google Analytics\n\xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 notifier.js                     # Contains notify() function that loads Notifier component\n\xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 withAuth.js                     # HOC that passes user to pages and more\n\xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 withLayout.js                   # HOC for SSR with Material-UI and more\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 pages                               # Pages\n\xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 admin                           # Admin pages\n\xe2\x94\x82   \xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 add-book.js                 # Page to add a new book\n\xe2\x94\x82   \xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 book-detail.js              # Page to view book details and sync content with Github\n\xe2\x94\x82   \xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 edit-book.js                # Page to update title, price, and repo of book\n\xe2\x94\x82   \xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 index.js                    # Main Admin page that has all books and more\n\xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 customer                        # Customer pages\n\xe2\x94\x82   \xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 my-books.js                 # Customer\'s dashboard\n\xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 public                          # Public pages (accessible to logged out users)\n\xe2\x94\x82   \xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 login.js                    # Login page\n\xe2\x94\x82   \xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 read-chapter.js             # Page with chapter\'s content\n\xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 _document.js                    # Allows to customize pages (feature of Next.js)\n\xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 book.js                         # Book page\n\xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 index.js                        # Homepage\n\xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 tutorials.js                    # Tutorials page\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 server                              # Server code\n\xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 api                             # Express routes, route-level middleware\n\xe2\x94\x82   \xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 admin.js                    # Admin routes\n\xe2\x94\x82   \xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 customer.js                 # Customer routes\n\xe2\x94\x82   \xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 index.js                    # Mounts all Express routes on server\n\xe2\x94\x82   \xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 public.js                   # Public routes\n\xe2\x94\x82   \xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 sync-all-inside-fork.js     # Sync all book chapters in forked process\n\xe2\x94\x82   \xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 sync-one-inside-fork.js     # Sync single book chapter in forked process\n\xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 models                          # Mongoose models\n\xe2\x94\x82   \xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 Book.js                     # Book model\n\xe2\x94\x82   \xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 Chapter.js\t                # Chapter model\n\xe2\x94\x82   \xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 EmailTemplate.js            # Email Template model\n\xe2\x94\x82   \xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 Purchase.js                 # Purchase model\n\xe2\x94\x82   \xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 Review.js                   # Book Reviews model\n\xe2\x94\x82   \xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 Tutorial.js                 # Tutorial model\n\xe2\x94\x82   \xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 User.js                     # User model\n\xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 utils                           # Server-side util\n\xe2\x94\x82   \xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80slugify.js                   # Generates slug for any Model\n\xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 app.js                          # Custom Express/Next server\n\xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 aws.js                          # AWS SES API\n\xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 github.js                       # Github API\n\xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 google.js                       # Google OAuth API\n\xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 logs.js                         # Logger\n\xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 mailchimp.js                    # MailChimp API\n\xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 routesWithCache.js              # Express routes with cache\n\xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 routesWithSlug.js               # Express routes that contain slug\n\xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 sitemapAndRobots.js             # Express routes for sitemap.xml and robots.txt\n\xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 stripe.js                       # Stripe API\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 static                              # Static resources\n\xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 robots.txt                      # Rules for search engine bots\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 test/server/utils                   # Tests\n\xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 slugify.test.js                 # Unit test for generateSlug() function\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 tutorials                           # Codebases for our tutorials\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 .eslintrc.js                        # Config for Eslint\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 .gitignore                          # List of ignored files and directories\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 .npmignore                          # Files and directories that are not uploaded to the server\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 now.json                            # Settings for now from Zeit\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 package.json                        # List of packages and scripts\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 yarn.lock                           # Exact versions of packages. Generated by yarn.\n\n```\n'