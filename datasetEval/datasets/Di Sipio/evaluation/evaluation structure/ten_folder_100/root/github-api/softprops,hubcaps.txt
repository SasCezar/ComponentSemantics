b'# hubcaps\n\n[![Build Status](https://travis-ci.org/softprops/hubcaps.svg?branch=master)](https://travis-ci.org/softprops/hubcaps) [![Coverage Status](https://coveralls.io/repos/softprops/hubcaps/badge.svg?branch=master&service=github)](https://coveralls.io/github/softprops/hubcaps?branch=master) [![Software License](https://img.shields.io/badge/license-MIT-brightgreen.svg)](LICENSE) [![crates.io](http://meritbadge.herokuapp.com/hubcaps)](https://crates.io/crates/hubcaps) [![Released API docs](https://docs.rs/hubcaps/badge.svg)](http://docs.rs/hubcaps) [![Master API docs](https://img.shields.io/badge/docs-master-green.svg)](https://softprops.github.io/hubcaps)\n\n> a rust interface for github\n\n## /!\\ planned API changes\n\nThe goal and motivation behind these are not to intentionally make breaking changes, but rather to adopt evolving community standards\n\n* replace builder implementations with [derive_builder](https://crates.io/crates/derive_builder) crate type derivation\n\n## installation\n\nAdd the following to your `Cargo.toml` file\n\n```toml\n[dependencies]\nhubcaps = "0.5"\n```\n\n## usage\n\nBasic usage requires a user agent string (because github requires this) and\noptionally a flavor of `hubcaps::Credentials` for making requests as a particular\ngithub user.\n\nFor user authenticated requests you\'ll typically want to use\n`hubcaps::Credentials::Token` with a\n[personal access token](https://github.com/settings/tokens).\n\n```rust\nuse hubcaps::{Credentials, Github};\n\nfn main() {\n  let github = Github::new(\n    "my-cool-user-agent/0.1.0",\n    Credentials::Token("personal-access-token"),\n  );\n}\n```\n\nGithub instances define methods for accessing api services that map closely to\ntheir url structure.\n\nAs a convention, api methods that expect arguments are represented as functions\nthat accept a struct representing those arguments with an optional builder\ninterface for convenience of construction.\n\nSee [examples directory](examples/) for some getting started examples\n\n### repositories\n\nTypically the reference point of most github services is a repository\n\n```rust\nlet repo = github.repo("user", "repo");\n```\n\nWith a repo instance on hand, you can access a number of sub services,\nlike `labels`, `deployments`, `pulls`, `issues`, `releases`, and many more.\nEach of this are named functions exported from the repo interface.\n\nSee [examples directory](examples/repos.rs) for examples\n\n### branches\n\nBranches is a service for listing repository branches\n\n```rust\nlet branches = repo.branches();\n```\n\n### labels\n\nLabels is a service for tagging resources like issues and pulls with names which you can later group and filter on.\n\n```rust\nuse hubcaps::labels::LabelOptions;\n\nlet labels = repo.labels();\n\n// create new labels\nlabels.create(\n    &LabelOptions::new(\n      "rustic", "ccc"\n    )\n  )\n```\n\n### deployments\n\nDeployments is a service for orchestrating deployments of applications sourced from github repositories\n\n```rust\nlet deployments = repo.deployments();\n```\n\nSee [examples directory](examples/deployments.rs) for examples\n\n### pulls\n\nPulls is a service for issuing code change requests against a repository\n\n```rust\nlet pulls = repo.pulls();\n```\n\nSee [examples directory](examples/pulls.rs) for examples\n\n### issues\n\nIssues is a service for tracking bugs for a repository\n\n```rust\nlet issues = repo.issues();\n```\n\nSee [examples directory](examples/issues.rs) for examples\n\n### releases\n\nReleases is a service for tracking changes for a stable releases of a versioned library or application\n\n```rust\nlet releases = repo.releases();\n```\n\n### gists\n\nGists is a service for micro repositories\n\n```rust\nlet gists = github.gists();\n```\n\nSee [examples directory](examples/gists.rs) for examples\n\n\n### hooks\n\nHooks is a service for managing repository hooks\n\n```rust\nlet hooks = repo.hooks();\n```\n\nSee [examples directory](examples/hooks.rs) for examples\n\n### search\n\nSearch provides a raw string query search for indexed data. Currently only search for issues is supported\n\n```rust\nlet search_issues = github.search().issues();\n```\n\n### teams\n\nTeams is a service for listing repository and organization teams\n\n```rust\nlet teams = repo.teams();\n```\n\nSee [examples directory](examples/teams.rs) for examples\n\nDoug Tangren (softprops) 2015-2018\n'