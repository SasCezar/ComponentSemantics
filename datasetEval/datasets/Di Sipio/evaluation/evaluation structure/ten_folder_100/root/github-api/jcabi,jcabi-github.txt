b'<img src="http://img.jcabi.com/logo-square.png" width="64px" height="64px" />\n\n[![Donate via Zerocracy](https://www.0crat.com/contrib-badge/C9R53K5JA.svg)](https://www.0crat.com/contrib/C9R53K5JA)\n\n[![EO principles respected here](https://www.elegantobjects.org/badge.svg)](https://www.elegantobjects.org)\n[![Managed by Zerocracy](https://www.0crat.com/badge/C3RUBL5H9.svg)](https://www.0crat.com/p/C3RUBL5H9)\n[![DevOps By Rultor.com](http://www.rultor.com/b/jcabi/jcabi-github)](http://www.rultor.com/p/jcabi/jcabi-github)\n[![We recommend IntelliJ IDEA](https://www.elegantobjects.org/intellij-idea.svg)](https://www.jetbrains.com/idea/)\n\n[![Build Status](https://travis-ci.org/jcabi/jcabi-github.svg?branch=master)](https://travis-ci.org/jcabi/jcabi-github)\n[![Build status](https://ci.appveyor.com/api/projects/status/rdhq60kvt75ic3cv/branch/master?svg=true)](https://ci.appveyor.com/project/yegor256/jcabi-github/branch/master)\n[![PDD status](http://www.0pdd.com/svg?name=jcabi/jcabi-github)](http://www.0pdd.com/p?name=jcabi/jcabi-github)\n[![jpeek report](http://i.jpeek.org/com.jcabi/jcabi-github/badge.svg)](http://i.jpeek.org/com.jcabi/jcabi-github/)\n[![Hits-of-Code](https://hitsofcode.com/github/jcabi/jcabi-github)](https://hitsofcode.com/view/github/jcabi/jcabi-github)\n\n[![Maven Central](https://maven-badges.herokuapp.com/maven-central/com.jcabi/jcabi-github/badge.svg)](https://maven-badges.herokuapp.com/maven-central/com.jcabi/jcabi-github)\n[![JavaDoc](https://img.shields.io/badge/javadoc-html-blue.svg)](http://www.javadoc.io/doc/com.jcabi/jcabi-github)\n\nThis is a Java adapter to the [GitHub RESTful API](https://developer.github.com/v3/).\nThere are a few other similar implementations on the market, but jcabi-github has a very strong\nfocus on object-oriented principles of programming. On top of that,\nwe have a unique implemenation of GitHub server-side functionality,\nwhich you can use in your unit tests, eliminating the necessity to connect\nto GitHub during unit/integration testing.\nPlease, read the blog post\n[_Object-Oriented Github API_](http://www.yegor256.com/2014/05/14/object-oriented-github-java-sdk.html)\nby [Yegor Bugayenko](https://www.yegor256.com), the creator of this library.\n\nJava 8 or higher is required.\n\nMore details are here: [github.jcabi.com](http://github.jcabi.com/).\n\nYou may also get help in this [Telegram chat](https://t.me/elegantobjects).\n\nThe set of classes in the\n[`com.jcabi.github`](https://static.javadoc.io/com.jcabi/jcabi-github/1.0/com/jcabi/github/package-frame.html)\npackage is the object-oriented API. Use it like this:\n\n```java\nimport com.jcabi.github.*;\npublic class Main {\n  public static void main(String[] args) throws IOException {\n    Github github = new RtGithub(".. your OAuth token ..");\n    Repo repo = github.repos().get(\n        new Coordinates.Simple("octocat/Hello-World")\n    );\n    Issue issue = repo.issues().create("Test title", "Test description");\n    issue.comments().post("My first comment!");\n  }\n}\n```\n\nWe also provide [`MkGithub`](https://static.javadoc.io/com.jcabi/jcabi-github/1.0/com/jcabi/github/mock/MkGithub.html),\na mock version of the GitHub server, which\nyou can use in your unit tests, for example:\n\n```java\nimport com.jcabi.github.*;\npublic class FooTest {\n  public void submitsCommentToGithubIssue() {\n    final Repo repo = new MkGithub().repos().create(\n      Json.createObjectBuilder().add("name", "test").build()\n    );\n    final Issue issue = repo.issues().create("how are you?", "");\n    new Foo(issue).doSomething(); // should post a message to the issue\n    MasterAssert.assertThat(\n      issue.comments().iterate(),\n      Matchers.iterableWithSize(1)\n    );\n  }\n}\n```\n\n## How to contribute?\n\nFork the repository, make changes, submit a pull request.\nWe promise to review your changes same day and apply to\nthe `master` branch, if they look correct.\n\nPlease run Maven (3.1 or higher!) build before submitting a pull request:\n\n```\n$ mvn clean install -Pqulice\n```\n\nThere are many integration tests that check our classes against\nlive Github accounts. In order to run them, you should create\na new Github OAuth access tokens\n([how?](https://help.github.com/articles/creating-an-access-token-for-command-line-use)),\nand provide them in command line, like this:\n\n```\n$ mvn clean install -Dit.test=RtGistITCase -Dfailsafe.github.key=<token> -Dfailsafe.github.key.second=<second-token> -Dfailsafe.github.repo=<repo>\n```\n\nReplace `<token>` and `<second-token>` with the OAuth access tokens of two different Github\naccounts. This test case will try to fork a gist from first account into second. Replace\n`<repo>` with the name of repository you create in your first account (for test purposes\nonly), for example `yegor256/test`. OAuth access tokens should have permissions in their\nrespective repos to all scopes needed by the integration test suite you want to run\n(including `delete_repo`, which is not set by default!).\n\nPlease note that different integration tests may need keys with permissions to different\n[scopes](https://developer.github.com/v3/oauth/#scopes). To run all integration tests, the key should\nhave the following OAuth scopes:\n\n  - `read:org`\n  - `repo`\n  - `delete_repo`\n  - `admin:public_key`\n  - `gist`\n  - `admin:repo_hook`\n  - `user`\n  - `user:email`\n\n`RtForksITCase` requires additional parameter `-Dfailsafe.github.organization=<organization>`\nwhere `<organization>` is an organization name to fork test github repository.\n\nIn order to run static analysis checks only use this:\n\n```\n$ mvn clean install -DskipTests -Dinvoker.skip=true -Pqulice\n```\n\n'