b'# go-github #\n\n[![GoDoc](https://godoc.org/github.com/google/go-github/github?status.svg)](https://godoc.org/github.com/google/go-github/github)\n[![Test Status](https://github.com/google/go-github/workflows/tests/badge.svg)](https://github.com/google/go-github/actions?query=workflow%3Atests)\n[![Test Coverage](https://codecov.io/gh/google/go-github/branch/master/graph/badge.svg)](https://codecov.io/gh/google/go-github)\n[![Discuss at go-github@googlegroups.com](https://img.shields.io/badge/discuss-go--github%40googlegroups.com-blue.svg)](https://groups.google.com/group/go-github)\n[![CII Best Practices](https://bestpractices.coreinfrastructure.org/projects/796/badge)](https://bestpractices.coreinfrastructure.org/projects/796)\n\ngo-github is a Go client library for accessing the [GitHub API v3][].\n\nCurrently, **go-github requires Go version 1.9 or greater**.  go-github tracks\n[Go\'s version support policy][support-policy].  We do our best not to break\nolder versions of Go if we don\'t have to, but due to tooling constraints, we\ndon\'t always test older versions.\n\n[support-policy]: https://golang.org/doc/devel/release.html#policy\n\nIf you\'re interested in using the [GraphQL API v4][], the recommended library is\n[shurcooL/githubv4][].\n\n## Usage ##\n\n```go\nimport "github.com/google/go-github/v28/github"\t// with go modules enabled (GO111MODULE=on or outside GOPATH)\nimport "github.com/google/go-github/github" // with go modules disabled\n```\n\nConstruct a new GitHub client, then use the various services on the client to\naccess different parts of the GitHub API. For example:\n\n```go\nclient := github.NewClient(nil)\n\n// list all organizations for user "willnorris"\norgs, _, err := client.Organizations.List(context.Background(), "willnorris", nil)\n```\n\nSome API methods have optional parameters that can be passed. For example:\n\n```go\nclient := github.NewClient(nil)\n\n// list public repositories for org "github"\nopt := &github.RepositoryListByOrgOptions{Type: "public"}\nrepos, _, err := client.Repositories.ListByOrg(context.Background(), "github", opt)\n```\n\nThe services of a client divide the API into logical chunks and correspond to\nthe structure of the GitHub API documentation at\nhttps://developer.github.com/v3/.\n\nNOTE: Using the [context](https://godoc.org/context) package, one can easily\npass cancelation signals and deadlines to various services of the client for\nhandling a request. In case there is no context available, then `context.Background()`\ncan be used as a starting point.\n\nFor more sample code snippets, head over to the\n[example](https://github.com/google/go-github/tree/master/example) directory.\n\n### Authentication ###\n\nThe go-github library does not directly handle authentication. Instead, when\ncreating a new client, pass an `http.Client` that can handle authentication for\nyou. The easiest and recommended way to do this is using the [oauth2][]\nlibrary, but you can always use any other library that provides an\n`http.Client`. If you have an OAuth2 access token (for example, a [personal\nAPI token][]), you can use it with the oauth2 library using:\n\n```go\nimport "golang.org/x/oauth2"\n\nfunc main() {\n\tctx := context.Background()\n\tts := oauth2.StaticTokenSource(\n\t\t&oauth2.Token{AccessToken: "... your access token ..."},\n\t)\n\ttc := oauth2.NewClient(ctx, ts)\n\n\tclient := github.NewClient(tc)\n\n\t// list all repositories for the authenticated user\n\trepos, _, err := client.Repositories.List(ctx, "", nil)\n}\n```\n\nNote that when using an authenticated Client, all calls made by the client will\ninclude the specified OAuth token. Therefore, authenticated clients should\nalmost never be shared between different users.\n\nSee the [oauth2 docs][] for complete instructions on using that library.\n\nFor API methods that require HTTP Basic Authentication, use the\n[`BasicAuthTransport`](https://godoc.org/github.com/google/go-github/github#BasicAuthTransport).\n\nGitHub Apps authentication can be provided by the [ghinstallation](https://github.com/bradleyfalzon/ghinstallation)\npackage.\n\n```go\nimport "github.com/bradleyfalzon/ghinstallation"\n\nfunc main() {\n\t// Wrap the shared transport for use with the integration ID 1 authenticating with installation ID 99.\n\titr, err := ghinstallation.NewKeyFromFile(http.DefaultTransport, 1, 99, "2016-10-19.private-key.pem")\n\tif err != nil {\n\t\t// Handle error.\n\t}\n\n\t// Use installation transport with client.\n\tclient := github.NewClient(&http.Client{Transport: itr})\n\n\t// Use client...\n}\n```\n\n### Rate Limiting ###\n\nGitHub imposes a rate limit on all API clients. Unauthenticated clients are\nlimited to 60 requests per hour, while authenticated clients can make up to\n5,000 requests per hour. The Search API has a custom rate limit. Unauthenticated\nclients are limited to 10 requests per minute, while authenticated clients\ncan make up to 30 requests per minute. To receive the higher rate limit when\nmaking calls that are not issued on behalf of a user,\nuse `UnauthenticatedRateLimitedTransport`.\n\nThe returned `Response.Rate` value contains the rate limit information\nfrom the most recent API call. If a recent enough response isn\'t\navailable, you can use `RateLimits` to fetch the most up-to-date rate\nlimit data for the client.\n\nTo detect an API rate limit error, you can check if its type is `*github.RateLimitError`:\n\n```go\nrepos, _, err := client.Repositories.List(ctx, "", nil)\nif _, ok := err.(*github.RateLimitError); ok {\n\tlog.Println("hit rate limit")\n}\n```\n\nLearn more about GitHub rate limiting at\nhttps://developer.github.com/v3/#rate-limiting.\n\n### Accepted Status ###\n\nSome endpoints may return a 202 Accepted status code, meaning that the\ninformation required is not yet ready and was scheduled to be gathered on\nthe GitHub side. Methods known to behave like this are documented specifying\nthis behavior.\n\nTo detect this condition of error, you can check if its type is\n`*github.AcceptedError`:\n\n```go\nstats, _, err := client.Repositories.ListContributorsStats(ctx, org, repo)\nif _, ok := err.(*github.AcceptedError); ok {\n\tlog.Println("scheduled on GitHub side")\n}\n```\n\n### Conditional Requests ###\n\nThe GitHub API has good support for conditional requests which will help\nprevent you from burning through your rate limit, as well as help speed up your\napplication. `go-github` does not handle conditional requests directly, but is\ninstead designed to work with a caching `http.Transport`. We recommend using\nhttps://github.com/gregjones/httpcache for that.\n\nLearn more about GitHub conditional requests at\nhttps://developer.github.com/v3/#conditional-requests.\n\n### Creating and Updating Resources ###\n\nAll structs for GitHub resources use pointer values for all non-repeated fields.\nThis allows distinguishing between unset fields and those set to a zero-value.\nHelper functions have been provided to easily create these pointers for string,\nbool, and int values. For example:\n\n```go\n// create a new private repository named "foo"\nrepo := &github.Repository{\n\tName:    github.String("foo"),\n\tPrivate: github.Bool(true),\n}\nclient.Repositories.Create(ctx, "", repo)\n```\n\nUsers who have worked with protocol buffers should find this pattern familiar.\n\n### Pagination ###\n\nAll requests for resource collections (repos, pull requests, issues, etc.)\nsupport pagination. Pagination options are described in the\n`github.ListOptions` struct and passed to the list methods directly or as an\nembedded type of a more specific list options struct (for example\n`github.PullRequestListOptions`). Pages information is available via the\n`github.Response` struct.\n\n```go\nclient := github.NewClient(nil)\n\nopt := &github.RepositoryListByOrgOptions{\n\tListOptions: github.ListOptions{PerPage: 10},\n}\n// get all pages of results\nvar allRepos []*github.Repository\nfor {\n\trepos, resp, err := client.Repositories.ListByOrg(ctx, "github", opt)\n\tif err != nil {\n\t\treturn err\n\t}\n\tallRepos = append(allRepos, repos...)\n\tif resp.NextPage == 0 {\n\t\tbreak\n\t}\n\topt.Page = resp.NextPage\n}\n```\n\nFor complete usage of go-github, see the full [package docs][].\n\n[GitHub API v3]: https://developer.github.com/v3/\n[oauth2]: https://github.com/golang/oauth2\n[oauth2 docs]: https://godoc.org/golang.org/x/oauth2\n[personal API token]: https://github.com/blog/1509-personal-api-tokens\n[package docs]: https://godoc.org/github.com/google/go-github/github\n[GraphQL API v4]: https://developer.github.com/v4/\n[shurcooL/githubv4]: https://github.com/shurcooL/githubv4\n\n### Integration Tests ###\n\nYou can run integration tests from the `test` directory. See the integration tests [README](test/README.md).\n\n## Roadmap ##\n\nThis library is being initially developed for an internal application at\nGoogle, so API methods will likely be implemented in the order that they are\nneeded by that application. You can track the status of implementation in\n[this Google spreadsheet][roadmap].\n\n[roadmap]: https://docs.google.com/spreadsheet/ccc?key=0ApoVX4GOiXr-dGNKN1pObFh6ek1DR2FKUjBNZ1FmaEE&usp=sharing\n\n## Contributing ##\nI would like to cover the entire GitHub API and contributions are of course always welcome. The\ncalling pattern is pretty well established, so adding new methods is relatively\nstraightforward. See [`CONTRIBUTING.md`](CONTRIBUTING.md) for details.\n\n## Versioning ##\n\nIn general, go-github follows [semver](https://semver.org/) as closely as we\ncan for tagging releases of the package. For self-contained libraries, the\napplication of semantic versioning is relatively straightforward and generally\nunderstood. But because go-github is a client library for the GitHub API, which\nitself changes behavior, and because we are typically pretty aggressive about\nimplementing preview features of the GitHub API, we\'ve adopted the following\nversioning policy:\n\n* We increment the **major version** with any incompatible change to\n\tnon-preview functionality, including changes to the exported Go API surface\n\tor behavior of the API.\n* We increment the **minor version** with any backwards-compatible changes to\n\tfunctionality, as well as any changes to preview functionality in the GitHub\n\tAPI. GitHub makes no guarantee about the stability of preview functionality,\n\tso neither do we consider it a stable part of the go-github API.\n* We increment the **patch version** with any backwards-compatible bug fixes.\n\nPreview functionality may take the form of entire methods or simply additional\ndata returned from an otherwise non-preview method. Refer to the GitHub API\ndocumentation for details on preview functionality.\n\n## License ##\n\nThis library is distributed under the BSD-style license found in the [LICENSE](./LICENSE)\nfile.\n'