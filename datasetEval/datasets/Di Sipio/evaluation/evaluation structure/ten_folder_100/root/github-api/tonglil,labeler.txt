b'# Labeler [![Build Status](https://travis-ci.org/tonglil/labeler.svg?branch=master)](https://travis-ci.org/tonglil/labeler)\n\n![logo](http://i.imgur.com/5wOQl2m.png)\n\nLabel management (create/rename/update/delete) on Github as code.\n\n- [x] Using GitHub?\n- [x] Want to commit/copy/share your label configuration?\n- [ ] Use `labeler`!\n\nFor FOSS maintainers, enable your users to submit PRs and improve the process/label system!\n- [Clean up][adobe] your labels.\n- Move labels out of the [same][iconic] [flat][certbot] [space][ghost].\n- Enforce a label color scheme that is not [meaningless][node] nor [confusing][babel] to view.\n\nInspired by [infrastructure as code][iac] tools like [Terraform][terraform] and organized label systems in projects like these:\n- https://github.com/kubernetes/kubernetes/labels\n- https://github.com/coreos/etcd/labels\n- https://github.com/coreos/rkt/labels\n- https://github.com/spf13/hugo/labels\n- https://github.com/docker/docker/labels\n\n[adobe]: https://github.com/adobe/brackets/labels\n[iconic]: https://github.com/driftyco/ionic/labels\n[certbot]: https://github.com/certbot/certbot/labels\n[ghost]: https://github.com/TryGhost/Ghost/labels\n[node]: https://github.com/nodejs/node/labels\n[babel]: https://github.com/babel/babel/labels\n\n[iac]: http://martinfowler.com/bliki/InfrastructureAsCode.html\n[terraform]: https://github.com/hashicorp/terraform\n\n## Installation\n\nGet binaries for OS X / Linux / Windows from the latest [release].\n\nOr use `go get`:\n\n```\ngo get -u github.com/tonglil/labeler\n```\n\n[release]: https://github.com/tonglil/labeler/releases\n\n## Usage\n\nFirst, set a [GitHub token][tokens] in the environment (optional, the token can be set as an cli argument as well).\n\n```\nexport GITHUB_TOKEN=xxx\n```\n\n> - The token for public repos need the `public_repo` scope.\n> - The token for private repos need the `repo` scope.\n\n[tokens]: https://github.com/settings/tokens\n\n### Scanning labels\n\nTo scan existing labels from a repository and save it to a file:\n```\nlabeler scan labels.yaml --repo owner/name\n```\n\nWhich when run against a "new" repo created on GitHub, will:\n- Fetch `bug` with color `fc2929`\n- Fetch `duplicate` with color `cccccc`\n- Fetch `enhancement` with color `84b6eb`\n- Fetch `invalid` with color `e6e6e6`\n- Fetch `question` with color `cc317c`\n- Fetch `wontfix` with color `ffffff`\n\nAnd write them into `labels.yaml`, creating the file if it doesn\'t exist, otherwise overwriting its contents.\n\n### Applying labels\n\nTo apply labels to a repository:\n```\nlabeler apply labels.yaml --dryrun\n```\n\nWhere `labels.yaml` is like:\n```yml\nrepo: owner/name\nlabels:\n  - name: bug\n    color: fc2929\n  - name: help wanted\n    color: 000000\n  - name: fix\n    color: cccccc\n    from: wontfix\n  - name: notes\n    color: fbca04\n```\n\nWhich when run against a "new" repo created on GitHub, will:\n- Rename `wontfix` to `fix` with color `ffffff` to `ffffff`\n- Update `help wanted` with color `159818` to `000000`\n- Create `notes` with color `fbca04`\n- Delete `duplicate` with color `cccccc`\n- Delete `enhancement` with color `84b6eb`\n- Delete `invalid` with color `e6e6e6`\n- Delete `question` with color `cc317c`\n\nWhen run again, rename changes will not be run because the label already exists.\nIn this manner, this tool is idempotent.\n\n## Usage options\n\n```\n$ labeler\nLabeler is a CLI application for managing labels on Github as code.\n\nWith the ability to scan and apply label changes, repository maintainers can\nempower contributors to submit PRs and improve the project management\nprocess/label system!\n\nUsage:\n  labeler [command]\n\nAvailable Commands:\n  apply       Apply a YAML label definition file\n  completion  Output shell completion code for tab completion\n  scan        Save a repository\'s labels into a YAML definition file\n  version     Print the version information\n\nUse "labeler [command] --help" for more information about a command.\n```\n\n## Tab completion\n\n```bash\nsource <(labeler completion)\n```\n\n## Development\n\n[`glide`][glide] is used to manage vendor dependencies.\n\nRoadmap:\n- Plan -> execute (aka always dry-run first).\n- Automatically update file after renaming operations are complete.\n- Organizational support (apply/only-add one config to all repos in an organization).\n\n[glide]: https://github.com/Masterminds/glide\n\n## Testing\n\n**This could use your contribution!**\nHelp me create a runnable test suite.\n\n## See also\n\n- Rust: https://github.com/jimmycuadra/ghlabel\n- Node: https://github.com/popomore/github-labels\n- Node: https://github.com/repo-utils/org-labels\n- PHP: https://gist.github.com/zot24/0cbbd3ee4b22123cb62a\n'