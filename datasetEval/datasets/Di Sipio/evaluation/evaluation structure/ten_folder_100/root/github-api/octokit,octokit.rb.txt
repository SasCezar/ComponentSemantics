b'# Octokit\n\nRuby toolkit for the GitHub API.\n\n![logo](http://cl.ly/image/3Y013H0A2z3z/gundam-ruby.png)\n\nUpgrading? Check the [Upgrade Guide](#upgrading-guide) before bumping to a new\n[major version][semver].\n\n## Table of Contents\n\n1. [Philosophy](#philosophy)\n2. [Quick start](#quick-start)\n3. [Making requests](#making-requests)\n4. [Consuming resources](#consuming-resources)\n5. [Accessing HTTP responses](#accessing-http-responses)\n6. [Authentication](#authentication)\n   1. [Basic Authentication](#basic-authentication)\n   2. [OAuth access tokens](#oauth-access-tokens)\n   3. [Two-Factor Authentication](#two-factor-authentication)\n   4. [Using a .netrc file](#using-a-netrc-file)\n   5. [Application authentication](#application-authentication)\n7. [Pagination](#pagination)\n   1. [Auto pagination](#auto-pagination)\n8. [Working with GitHub Enterprise](#working-with-github-enterprise)\n   1. [Interacting with the GitHub.com APIs in GitHub Enterprise](#interacting-with-the-githubcom-apis-in-github-enterprise)\n   2. [Interacting with the GitHub Enterprise Admin APIs](#interacting-with-the-github-enterprise-admin-apis)\n   3. [Interacting with the GitHub Enterprise Management Console APIs](#interacting-with-the-github-enterprise-management-console-apis)\n9. [SSL Connection Errors](#ssl-connection-errors)\n10. [Configuration and defaults](#configuration-and-defaults)\n    1. [Configuring module defaults](#configuring-module-defaults)\n    2. [Using ENV variables](#using-env-variables)\n    3. [Timeouts](#timeouts)\n11. [Hypermedia agent](#hypermedia-agent)\n    1. [Hypermedia in Octokit](#hypermedia-in-octokit)\n    2. [URI templates](#uri-templates)\n    3. [The Full Hypermedia Experience\xe2\x84\xa2](#the-full-hypermedia-experience)\n12. [Upgrading guide](#upgrading-guide)\n    1. [Upgrading from 1.x.x](#upgrading-from-1xx)\n13. [Advanced usage](#advanced-usage)\n    1. [Debugging](#debugging)\n    2. [Caching](#caching)\n14. [Hacking on Octokit.rb](#hacking-on-octokitrb)\n    1. [Code of Conduction](#code_of_conduct)\n    2. [Running and writing new tests](#running-and-writing-new-tests)\n15. [Supported Ruby Versions](#supported-ruby-versions)\n16. [Versioning](#versioning)\n17. [Making Repeating Requests](#making-repeating-requests)\n18. [License](#license)\n\n## Philosophy\n\nAPI wrappers [should reflect the idioms of the language in which they were\nwritten][wrappers]. Octokit.rb wraps the [GitHub API][github-api] in a flat API\nclient that follows Ruby conventions and requires little knowledge of REST.\nMost methods have positional arguments for required input and an options hash\nfor optional parameters, headers, or other options:\n\n```ruby\nclient = Octokit::Client.new\n\n# Fetch a README with Accept header for HTML format\nclient.readme \'al3x/sovereign\', :accept => \'application/vnd.github.html\'\n```\n\n[wrappers]: http://wynnnetherland.com/journal/what-makes-a-good-api-wrapper\n[github-api]: https://developer.github.com/v3/\n\n## Quick start\n\nInstall via Rubygems\n\n    gem install octokit\n\n... or add to your Gemfile\n\n    gem "octokit", "~> 4.0"\n\nAccess the library in Ruby:\n\n    require \'octokit\'\n\n### Making requests\n\n[API methods][] are available as client instance methods.\n\n```ruby\n# Provide authentication credentials\nclient = Octokit::Client.new(:login => \'defunkt\', :password => \'c0d3b4ssssss!\')\n\n# Set access_token instead of login and password if you use personal access token\n# client = Octokit::Client.new(:access_token => \'[personal_access_token]!\')\n\n# Fetch the current user\nclient.user\n```\n\n### Additional Query Parameters\n\nWhen passing additional parameters to GET based request use the following syntax:\n\n```ruby\n # query: { parameter_name: \'value\' }\n # Example: Get repository listing by owner in ascending order\n client.repos({}, query: {type: \'owner\', sort: \'asc\'})\n\n # Example: Get contents of a repository by ref\n # https://api.github.com/repos/octokit/octokit.rb/contents/path/to/file.rb?ref=some-other-branch\n client.contents(\'octokit/octokit.rb\', path: \'path/to/file.rb\', query: {ref: \'some-other-branch\'})\n```\n\n[API methods]: http://octokit.github.io/octokit.rb/method_list.html\n\n### Consuming resources\n\nMost methods return a `Resource` object which provides dot notation and `[]`\naccess for fields returned in the API response.\n\n```ruby\nclient = Octokit::Client.new\n\n# Fetch a user\nuser = client.user \'jbarnette\'\nputs user.name\n# => "John Barnette"\nputs user.fields\n# => <Set: {:login, :id, :gravatar_id, :type, :name, :company, :blog, :location, :email, :hireable, :bio, :public_repos, :followers, :following, :created_at, :updated_at, :public_gists}>\nputs user[:company]\n# => "GitHub"\nuser.rels[:gists].href\n# => "https://api.github.com/users/jbarnette/gists"\n```\n\n**Note:** URL fields are culled into a separate `.rels` collection for easier\n[Hypermedia](#hypermedia-agent) support.\n\n### Accessing HTTP responses\n\nWhile most methods return a `Resource` object or a Boolean, sometimes you may\nneed access to the raw HTTP response headers. You can access the last HTTP\nresponse with `Client#last_response`:\n\n```ruby\nuser      = client.user \'andrewpthorp\'\nresponse  = client.last_response\netag      = response.headers[:etag]\n```\n\n## Authentication\n\nOctokit supports the various [authentication methods supported by the GitHub\nAPI][auth]:\n\n### Basic Authentication\n\nUsing your GitHub username and password is the easiest way to get started\nmaking authenticated requests:\n\n```ruby\nclient = Octokit::Client.new(:login => \'defunkt\', :password => \'c0d3b4ssssss!\')\n\nuser = client.user\nuser.login\n# => "defunkt"\n```\nWhile Basic Authentication allows you to get started quickly, OAuth access\ntokens are the preferred way to authenticate on behalf of users.\n\n### OAuth access tokens\n\n[OAuth access tokens][oauth] provide two main benefits over using your username\nand password:\n\n* **Revokable access**. Access tokens can be revoked, removing access for only\n  that token without having to change your password everywhere.\n* **Limited access**. Access tokens have [access scopes][] which allow for more\n  granular access to API resources. For instance, you can grant a third party\n  access to your gists but not your private repositories.\n\nTo use an access token with the Octokit client, pass your token in the\n`:access_token` options parameter in lieu of your username and password:\n\n```ruby\nclient = Octokit::Client.new(:access_token => "<your 40 char token>")\n\nuser = client.user\nuser.login\n# => "defunkt"\n```\n\nYou can [create access tokens through your GitHub Account Settings](https://help.github.com/articles/creating-an-access-token-for-command-line-use)\nor with a basic authenticated Octokit client:\n\n```ruby\nclient = Octokit::Client.new(:login => \'defunkt\', :password => \'c0d3b4ssssss!\')\n\nclient.create_authorization(:scopes => ["user"], :note => "Name of token")\n# => <your new oauth token>\n```\n\n### Two-Factor Authentication\n\n[Two-Factor Authentication](https://help.github.com/articles/about-two-factor-authentication) brings added security to the account by requiring more information to login.\n\nUsing two-factor authentication for API calls is as simple as adding the [required header](http://developer.github.com/v3/auth/#working-with-two-factor-authentication) as an option:\n\n```ruby\nclient = Octokit::Client.new \\\n  :login    => \'defunkt\',\n  :password => \'c0d3b4ssssss!\'\n\nuser = client.user("defunkt", :headers => { "X-GitHub-OTP" => "<your 2FA token>" })\n```\n\nAs you can imagine, this gets annoying quick since two-factor auth tokens are very short lived. So it is recommended to create an oauth token for the user to communicate with the API:\n\n```ruby\nclient = Octokit::Client.new \\\n  :login    => \'defunkt\',\n  :password => \'c0d3b4ssssss!\'\n\nclient.create_authorization(:scopes => ["user"], :note => "Name of token",\n                            :headers => { "X-GitHub-OTP" => "<your 2FA token>" })\n# => <your new oauth token>\n```\n\n### Using a .netrc file\n\nOctokit supports reading credentials from a netrc file (defaulting to\n`~/.netrc`).  Given these lines in your netrc:\n\n```\nmachine api.github.com\n  login defunkt\n  password c0d3b4ssssss!\n```\nYou can now create a client with those credentials:\n\n```ruby\nclient = Octokit::Client.new(:netrc => true)\nclient.login\n# => "defunkt"\n```\nBut _I want to use OAuth_ you say. Since the GitHub API supports using an OAuth\ntoken as a Basic password, you totally can:\n\n```\nmachine api.github.com\n  login defunkt\n  password <your 40 char token>\n```\n\n**Note:** Support for netrc requires adding the [netrc gem][] to your Gemfile\nor `.gemspec`.\n\n### Application authentication\n\nOctokit also supports application-only authentication [using OAuth application client\ncredentials][app-creds]. Using application credentials will result in making\nanonymous API calls on behalf of an application in order to take advantage of\nthe higher rate limit.\n\n```ruby\nclient = Octokit::Client.new \\\n  :client_id     => "<your 20 char id>",\n  :client_secret => "<your 40 char secret>"\n\nuser = client.user \'defunkt\'\n```\n\n[auth]: http://developer.github.com/v3/#authentication\n[oauth]: http://developer.github.com/v3/oauth/\n[access scopes]: http://developer.github.com/v3/oauth/#scopes\n[app-creds]: http://developer.github.com/v3/#increasing-the-unauthenticated-rate-limit-for-oauth-applications\n\n## Default results per_page\n\nDefault results from the GitHub API are 30, if you wish to add more you must do so during Octokit configuration.\n\n```ruby\nOctokit::Client.new(access_token: "<your 40 char token>", per_page: 100)\n```\n\n## Pagination\n\nMany GitHub API resources are [paginated][]. While you may be tempted to start\nadding `:page` parameters to your calls, the API returns links to the next,\nprevious, and last pages for you in the `Link` response header as [Hypermedia\nlink relations](#hypermedia-agent).\n\n```ruby\nissues = client.issues \'rails/rails\'\nissues.concat client.last_response.rels[:next].get.data\n```\n\n### Auto pagination\n\nFor smallish resource lists, Octokit provides auto pagination. When this is\nenabled, calls for paginated resources will fetch and concatenate the results\nfrom every page into a single array:\n\n```ruby\nclient.auto_paginate = true\nissues = client.issues \'rails/rails\'\nissues.length\n\n# => 702\n```\n\nYou can also enable auto pagination for all Octokit client instances:\n\n```ruby\nOctokit.configure do |c|\n  c.auto_paginate = true\nend\n```\n\n**Note:** While Octokit auto pagination will set the page size to the maximum\n`100`, and seek to not overstep your rate limit, you probably want to use a\ncustom pattern for traversing large lists.\n\n[paginated]: http://developer.github.com/v3/#pagination\n\n## Working with GitHub Enterprise\n\nWith a bit of setup, you can also use Octokit with your Github Enterprise instance.\n\n### Interacting with the GitHub.com APIs in GitHub Enterprise\n\nTo interact with the "regular" GitHub.com APIs in GitHub Enterprise, simply configure the `api_endpoint` to match your hostname. For example:\n\n``` ruby\nOctokit.configure do |c|\n  c.api_endpoint = "https://<hostname>/api/v3/"\nend\n\nclient = Octokit::Client.new(:access_token => "<your 40 char token>")\n```\n\n### Interacting with the GitHub Enterprise Admin APIs\n\nThe GitHub Enterprise Admin APIs are under a different client: `EnterpriseAdminClient`. You\'ll need to have an administrator account in order to use these APIs.\n\n``` ruby\nadmin_client = Octokit::EnterpriseAdminClient.new(\n  :access_token => "<your 40 char token>",\n  :api_endpoint => "https://<hostname>/api/v3/"\n)\n\n# or\nOctokit.configure do |c|\n  c.api_endpoint = "https://<hostname>/api/v3/"\n  c.access_token = "<your 40 char token>"\nend\n\nadmin_client = Octokit.enterprise_admin_client.new\n```\n\n### Interacting with the GitHub Enterprise Management Console APIs\n\nThe GitHub Enterprise Management Console APIs are also under a separate client: `EnterpriseManagementConsoleClient`. In order to use it, you\'ll need to provide both your management console password as well as the endpoint to your management console. This is different than the API endpoint provided above.\n\n``` ruby\nmanagement_console_client = Octokit::EnterpriseManagementConsoleClient.new(\n  :management_console_password => "secret",\n  :management_console_endpoint = "https://hostname:8633"\n)\n\n# or\nOctokit.configure do |c|\n  c.management_console_endpoint = "https://hostname:8633"\n  c.management_console_password = "secret"\nend\n\nmanagement_console_client = Octokit.enterprise_management_console_client.new\n```\n\n### SSL Connection Errors\n\nYou *may* need to disable SSL temporarily while first setting up your GitHub Enterprise install. You can do that with the following configuration:\n\n``` ruby\nclient.connection_options[:ssl] = { :verify => false }\n```\n\nDo remember to turn `:verify` back to `true`, as it\'s important for secure communication.\n\n## Configuration and defaults\n\nWhile `Octokit::Client` accepts a range of options when creating a new client\ninstance, Octokit\'s configuration API allows you to set your configuration\noptions at the module level. This is particularly handy if you\'re creating a\nnumber of client instances based on some shared defaults. Changing options\naffects new instances only and will not modify existing `Octokit::Client`\ninstances created with previous options.\n\n### Configuring module defaults\n\nEvery writable attribute in {Octokit::Configurable} can be set one at a time:\n\n```ruby\nOctokit.api_endpoint = \'http://api.github.dev\'\nOctokit.web_endpoint = \'http://github.dev\'\n```\n\nor in batch:\n\n```ruby\nOctokit.configure do |c|\n  c.api_endpoint = \'http://api.github.dev\'\n  c.web_endpoint = \'http://github.dev\'\nend\n```\n\n### Using ENV variables\n\nDefault configuration values are specified in {Octokit::Default}. Many\nattributes will look for a default value from the ENV before returning\nOctokit\'s default.\n\n```ruby\n# Given $OCTOKIT_API_ENDPOINT is "http://api.github.dev"\nclient.api_endpoint\n\n# => "http://api.github.dev"\n```\n\nDeprecation warnings and API endpoints in development preview warnings are\nprinted to STDOUT by default, these can be disabled by setting the ENV\n`OCTOKIT_SILENT=true`.\n\n### Timeouts\n\nBy default, Octokit does not timeout network requests. To set a timeout, pass in Faraday timeout settings to Octokit\'s `connection_options` setting.\n\n```ruby\nOctokit.configure do |c|\n  c.api_endpoint = ENV.fetch(\'GITHUB_API_ENDPOINT\', \'https://api.github.com/\')\n  c.connection_options = {\n    request: {\n      open_timeout: 5,\n      timeout: 5\n    }\n  }\nend\n```\nYou should set a timeout in order to avoid Ruby\xe2\x80\x99s Timeout module, which can hose your server. Here are some resources for more information on this:\n\n- [The Oldest Bug In Ruby - Why Rack::Timeout Might Hose your Server](https://www.schneems.com/2017/02/21/the-oldest-bug-in-ruby-why-racktimeout-might-hose-your-server/)\n- [Timeout: Ruby\'s Most Dangerous API](https://www.mikeperham.com/2015/05/08/timeout-rubys-most-dangerous-api/)\n- [The Ultimate Guide to Ruby Timeouts](https://github.com/ankane/the-ultimate-guide-to-ruby-timeouts)\n\n## Hypermedia agent\n\nStarting in version 2.0, Octokit is [hypermedia][]-enabled. Under the hood,\n{Octokit::Client} uses [Sawyer][], a hypermedia client built on [Faraday][].\n\n### Hypermedia in Octokit\n\nResources returned by Octokit methods contain not only data but hypermedia\nlink relations:\n\n```ruby\nuser = client.user \'technoweenie\'\n\n# Get the repos rel, returned from the API\n# as repos_url in the resource\nuser.rels[:repos].href\n# => "https://api.github.com/users/technoweenie/repos"\n\nrepos = user.rels[:repos].get.data\nrepos.last.name\n# => "faraday-zeromq"\n```\n\nWhen processing API responses, all `*_url` attributes are culled in to the link\nrelations collection. Any `url` attribute becomes `.rels[:self]`.\n\n### URI templates\n\nYou might notice many link relations have variable placeholders. Octokit\nsupports [URI Templates][uri-templates] for parameterized URI expansion:\n\n```ruby\nrepo = client.repo \'pengwynn/pingwynn\'\nrel = repo.rels[:issues]\n# => #<Sawyer::Relation: issues: get https://api.github.com/repos/pengwynn/pingwynn/issues{/number}>\n\n# Get a page of issues\nrel.get.data\n\n# Get issue #2\nrel.get(:uri => {:number => 2}).data\n```\n\n### The Full Hypermedia Experience\xe2\x84\xa2\n\nIf you want to use Octokit as a pure hypermedia API client, you can start at\nthe API root and follow link relations from there:\n\n```ruby\nroot = client.root\nroot.rels[:repository].get :uri => {:owner => "octokit", :repo => "octokit.rb" }\nroot.rels[:user_repositories].get :uri => { :user => "octokit" },\n                                  :query => { :type => "owner" }\n```\n\nOctokit 3.0 aims to be hypermedia-driven, removing the internal URL\nconstruction currently used throughout the client.\n\n[hypermedia]: http://en.wikipedia.org/wiki/Hypermedia\n[Sawyer]: https://github.com/lostisland/sawyer\n[Faraday]: https://github.com/lostisland/faraday\n[uri-templates]: http://tools.ietf.org/html/rfc6570\n\n## Upgrading guide\n\nVersion 4.0\n\n- **removes support for a [long-deprecated overload][list-pulls] for\npassing state as a positional argument** when listing pull requests. Instead,\npass `state` in the method options.\n- **drops support for Ruby < 2.0**.\n- adds support for new [Enterprise-only APIs](#working-with-github-enterprise).\n- adds support for [Repository redirects][redirects].\n\n[list-pulls]: https://github.com/octokit/octokit.rb/commit/e48e91f736d5fce51e3bf74d7c9022aaa52f5c5c\n[redirects]: https://developer.github.com/changes/2015-05-26-repository-redirects-are-coming/\n\nVersion 3.0 includes a couple breaking changes when upgrading from v2.x.x:\n\nThe [default media type][default-media-type] is now `v3` instead of `beta`. If\nyou need to request the older media type, you can set the default media type\nfor the client:\n\n```ruby\nOctokit.default_media_type = "application/vnd.github.beta+json"\n```\nor per-request\n\n```ruby\nclient.emails(:accept => "application/vnd.github.beta+json")\n```\n\nThe long-deprecated `Octokit::Client#create_download` method has been removed.\n\n[default-media-type]: https://developer.github.com/changes/2014-01-07-upcoming-change-to-default-media-type/\n\n### Upgrading from 1.x.x\n\nVersion 2.0 includes a completely rewritten `Client` factory that now memoizes\nclient instances based on unique configuration options. Breaking changes also\ninclude:\n\n* `:oauth_token` is now `:access_token`\n* `:auto_traversal` is now `:auto_paginate`\n* `Hashie::Mash` has been removed. Responses now return a `Sawyer::Resource`\n  object. This new type behaves mostly like a Ruby `Hash`, but does not fully\n  support the `Hashie::Mash` API.\n* Two new client error types are raised where appropriate:\n  `Octokit::TooManyRequests` and `Octokit::TooManyLoginAttempts`\n* The `search_*` methods from v1.x are now found at `legacy_search_*`\n* Support for netrc requires including the [netrc gem][] in your Gemfile or\n  gemspec.\n* DateTime fields are now proper `DateTime` objects. Previous versions outputted DateTime fields as \'String\' objects.\n\n[netrc gem]: https://rubygems.org/gems/netrc\n\n\n## Advanced usage\n\nSince Octokit employs [Faraday][faraday] under the hood, some behavior can be\nextended via middleware.\n\n### Debugging\n\nOften, it helps to know what Octokit is doing under the hood. You can add a\nlogger to the middleware that enables you to peek into the underlying HTTP\ntraffic:\n\n```ruby\nstack = Faraday::RackBuilder.new do |builder|\n  builder.use Faraday::Request::Retry, exceptions: [Octokit::ServerError]\n  builder.use Octokit::Middleware::FollowRedirects\n  builder.use Octokit::Response::RaiseError\n  builder.use Octokit::Response::FeedParser\n  builder.response :logger\n  builder.adapter Faraday.default_adapter\nend\nOctokit.middleware = stack\n\nclient = Octokit::Client.new\nclient.user \'pengwynn\'\n```\n```\nI, [2013-08-22T15:54:38.583300 #88227]  INFO -- : get https://api.github.com/users/pengwynn\nD, [2013-08-22T15:54:38.583401 #88227] DEBUG -- request: Accept: "application/vnd.github.beta+json"\nUser-Agent: "Octokit Ruby Gem 2.0.0.rc4"\nI, [2013-08-22T15:54:38.843313 #88227]  INFO -- Status: 200\nD, [2013-08-22T15:54:38.843459 #88227] DEBUG -- response: server: "GitHub.com"\ndate: "Thu, 22 Aug 2013 20:54:40 GMT"\ncontent-type: "application/json; charset=utf-8"\ntransfer-encoding: "chunked"\nconnection: "close"\nstatus: "200 OK"\nx-ratelimit-limit: "60"\nx-ratelimit-remaining: "39"\nx-ratelimit-reset: "1377205443"\n...\n```\n\nSee the [Faraday README][faraday] for more middleware magic.\n\n### Caching\n\nIf you want to boost performance, stretch your API rate limit, or avoid paying\nthe hypermedia tax, you can use [Faraday Http Cache][cache].\n\nAdd the gem to your Gemfile\n\n    gem \'faraday-http-cache\'\n\nNext, construct your own Faraday middleware:\n\n```ruby\nstack = Faraday::RackBuilder.new do |builder|\n  builder.use Faraday::HttpCache, serializer: Marshal, shared_cache: false\n  builder.use Octokit::Response::RaiseError\n  builder.adapter Faraday.default_adapter\nend\nOctokit.middleware = stack\n```\n\nOnce configured, the middleware will store responses in cache based on ETag\nfingerprint and serve those back up for future `304` responses for the same\nresource. See the [project README][cache] for advanced usage.\n\n\n[cache]: https://github.com/plataformatec/faraday-http-cache\n[faraday]: https://github.com/lostisland/faraday\n\n## Hacking on Octokit.rb\n\nIf you want to hack on Octokit locally, we try to make [bootstrapping the\nproject][bootstrapping] as painless as possible. To start hacking, clone and run:\n\n    script/bootstrap\n\nThis will install project dependencies and get you up and running. If you want\nto run a Ruby console to poke on Octokit, you can crank one up with:\n\n    script/console\n\nUsing the scripts in `./scripts` instead of `bundle exec rspec`, `bundle\nconsole`, etc.  ensures your dependencies are up-to-date.\n\n### Code of Conduct\n\nWe want both the Octokit.rb and larger Octokit communities to be an open\nand welcoming environments. Please read and follow both in spirit and\nletter [Code of Conduct](CODE_OF_CONDUCT.md).\n\n### Running and writing new tests\n\nOctokit uses [VCR][] for recording and playing back API fixtures during test\nruns. These cassettes (fixtures) are part of the Git project in the `spec/cassettes`\nfolder. If you\'re not recording new cassettes you can run the specs with existing\ncassettes with:\n\n    script/test\n\nOctokit uses environmental variables for storing credentials used in testing.\nIf you are testing an API endpoint that doesn\'t require authentication, you\ncan get away without any additional configuration. For the most part, tests\nuse an authenticated client, using a token stored in `ENV[\'OCTOKIT_TEST_GITHUB_TOKEN\']`.\nThere are several different authenticating method\'s used across the api.\nHere is the full list of configurable environmental variables for testing\nOctokit:\n\nENV Variable | Description |\n:-------------------|:-----------------|\n`OCTOKIT_TEST_GITHUB_LOGIN`| GitHub login name (preferably one created specifically for testing against).\n`OCTOKIT_TEST_GITHUB_PASSWORD`| Password for the test GitHub login.\n`OCTOKIT_TEST_GITHUB_TOKEN` | [Personal Access Token](https://github.com/blog/1509-personal-api-tokens) for the test GitHub login.\n`OCTOKIT_TEST_GITHUB_CLIENT_ID` | Test OAuth application client id.\n`OCTOKIT_TEST_GITHUB_CLIENT_SECRET` | Test OAuth application client secret.\n`OCTOKIT_TEST_GITHUB_REPOSITORY` | Test repository to perform destructive actions against, this should not be set to any repository of importance. **Automatically created by the test suite if nonexistent** Default: `api-sandbox`\n`OCTOKIT_TEST_GITHUB_ORGANIZATION` | Test organization.\n`OCTOKIT_TEST_GITHUB_ENTERPRISE_LOGIN` | GitHub Enterprise login name.\n`OCTOKIT_TEST_GITHUB_ENTERPRISE_TOKEN` | GitHub Enterprise token.\n`OCTOKIT_TEST_GITHUB_ENTERPRISE_MANAGEMENT_CONSOLE_PASSWORD` | GitHub Enterprise management console password.\n`OCTOKIT_TEST_GITHUB_ENTERPRISE_ENDPOINT` | GitHub Enterprise hostname.\n`OCTOKIT_TEST_GITHUB_ENTERPRISE_MANAGEMENT_CONSOLE_ENDPOINT` | GitHub Enterprise Management Console endpoint.\n`OCTOKIT_TEST_GITHUB_INTEGRATION` | [GitHub Integration](https://developer.github.com/early-access/integrations/) owned by your test organization.\n`OCTOKIT_TEST_GITHUB_INTEGRATION_INSTALLATION` | Installation of the GitHub Integration specified above.\n`OCTOKIT_TEST_INTEGRATION_PEM_KEY` | File path to the private key generated from your integration.\n\nSince we periodically refresh our cassettes, please keep some points in mind\nwhen writing new specs.\n\n* **Specs should be idempotent**. The HTTP calls made during a spec should be\n  able to be run over and over. This means deleting a known resource prior to\n  creating it if the name has to be unique.\n* **Specs should be able to be run in random order.** If a spec depends on\n  another resource as a fixture, make sure that\'s created in the scope of the\n  spec and not depend on a previous spec to create the data needed.\n* **Do not depend on authenticated user info.** Instead of asserting\n  actual values in resources, try to assert the existence of a key or that a\n  response is an Array. We\'re testing the client, not the API.\n\n[bootstrapping]: http://wynnnetherland.com/linked/2013012801/bootstrapping-consistency\n[VCR]: https://github.com/vcr/vcr\n\n## Supported Ruby Versions\n\nThis library aims to support and is [tested against][travis] the following Ruby\nimplementations:\n\n* Ruby 2.0\n* Ruby 2.1\n* Ruby 2.2\n* Ruby 2.3\n* Ruby 2.4\n* Ruby 2.5\n* Ruby 2.6\n\nIf something doesn\'t work on one of these Ruby versions, it\'s a bug.\n\nThis library may inadvertently work (or seem to work) on other Ruby\nimplementations, but support will only be provided for the versions listed\nabove.\n\nIf you would like this library to support another Ruby version, you may\nvolunteer to be a maintainer. Being a maintainer entails making sure all tests\nrun and pass on that implementation. When something breaks on your\nimplementation, you will be responsible for providing patches in a timely\nfashion. If critical issues for a particular implementation exist at the time\nof a major release, support for that Ruby version may be dropped.\n\n[travis]: https://travis-ci.org/octokit/octokit.rb\n\n## Versioning\n\nThis library aims to adhere to [Semantic Versioning 2.0.0][semver]. Violations\nof this scheme should be reported as bugs. Specifically, if a minor or patch\nversion is released that breaks backward compatibility, that version should be\nimmediately yanked and/or a new version should be immediately released that\nrestores compatibility. Breaking changes to the public API will only be\nintroduced with new major versions. As a result of this policy, you can (and\nshould) specify a dependency on this gem using the [Pessimistic Version\nConstraint][pvc] with two digits of precision. For example:\n\n    spec.add_dependency \'octokit\', \'~> 3.0\'\n\nThe changes made between versions can be seen on the [project releases page][releases].\n\n[semver]: http://semver.org/\n[pvc]: http://guides.rubygems.org/patterns/#pessimistic-version-constraint\n[releases]: https://github.com/octokit/octokit.rb/releases\n\n## Making Repeating Requests\nIn most cases it would be best to use a [webhooks](https://developer.github.com/webhooks/), but sometimes webhooks don\'t provide all of the information needed. In those cases where one might need to poll for progress or retry a request on failure, we designed [Octopoller](https://github.com/octokit/octopoller.rb). Octopoller is a micro gem perfect for making repeating requests.\n\n```ruby\nOctopoller.poll(timeout: 15.seconds) do\n  begin\n    client.request_progress # ex. request a long running job\'s status\n  rescue Error\n    :re_poll\n  end\nend\n```\n\nThis is useful when making requests for a long running job\'s progress (ex. requesting a [Source Import\'s progress](https://developer.github.com/v3/migrations/source_imports/#get-import-progress)).\n\n## License\n\nCopyright (c) 2009-2014 Wynn Netherland, Adam Stacoviak, Erik Michaels-Ober\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n"Software"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n'