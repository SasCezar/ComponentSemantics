b'<!---\nThis README file is generated. Changes will be overwritten.\n-->\n[![Build Status](https://travis-ci.org/whiteinge/ok.sh.svg?branch=master)](https://travis-ci.org/whiteinge/ok.sh)\n\n# A GitHub API client library written in POSIX sh\n\nhttps://github.com/whiteinge/ok.sh\nBSD licensed.\n\n## Requirements\n\n* A POSIX environment (tested against Busybox v1.19.4)\n* curl (tested against 7.32.0)\n\n## Optional requirements\n\n* jq <http://stedolan.github.io/jq/> (tested against 1.3)\n  If jq is not installed commands will output raw JSON; if jq is installed\n  the output will be formatted and filtered for use with other shell tools.\n\n## Setup\n\nAuthentication credentials are read from a `$HOME/.netrc` file on UNIX\nmachines or a `_netrc` file in `%HOME%` for UNIX environments under Windows.\n[Generate the token on GitHub](https://github.com/settings/tokens) under\n"Account Settings -> Applications".\nRestrict permissions on that file with `chmod 600 ~/.netrc`!\n\n    machine api.github.com\n        login <username>\n        password <token>\n\n    machine uploads.github.com\n        login <username>\n        password <token>\n\nOr set an environment `GITHUB_TOKEN=token`\n\n## Configuration\n\nThe following environment variables may be set to customize ok.sh.\n\n* OK_SH_URL=https://api.github.com\n  Base URL for GitHub or GitHub Enterprise.\n* OK_SH_ACCEPT=application/vnd.github.v3+json\n  The \'Accept\' header to send with each request.\n* OK_SH_JQ_BIN=jq\n  The name of the jq binary, if installed.\n* OK_SH_VERBOSE=0\n  The debug logging verbosity level. Same as the verbose flag.\n* OK_SH_RATE_LIMIT=0\n  Output current GitHub rate limit information to stderr.\n* OK_SH_DESTRUCTIVE=0\n  Allow destructive operations without prompting for confirmation.\n* OK_SH_MARKDOWN=1\n  Output some text in Markdown format.\n\n## Usage\n\n`ok.sh [<flags>] (command [<arg>, <name=value>...])`\n\n    ok.sh -h              # Short, usage help text.\n    ok.sh help            # All help text. Warning: long!\n    ok.sh help command    # Command-specific help text.\n    ok.sh command         # Run a command with and without args.\n    ok.sh command foo bar baz=Baz qux=\'Qux arg here\'\n\nFlag | Description\n---- | -----------\n-V   | Show version.\n-h   | Show this screen.\n-j   | Output raw JSON; don\'t process with jq.\n-q   | Quiet; don\'t print to stdout.\n-r   | Print current GitHub API rate limit to stderr.\n-v   | Logging output; specify multiple times: info, debug, trace.\n-x   | Enable xtrace debug logging.\n-y   | Answer \'yes\' to any prompts.\n\nFlags _must_ be the first argument to `ok.sh`, before `command`.\n\n## Table of Contents\n\n### Utility and request/response commands\n\n* [_all_funcs](#_all_funcs)\n* [_log](#_log)\n* [_helptext](#_helptext)\n* [_format_json](#_format_json)\n* [_format_urlencode](#_format_urlencode)\n* [_filter_json](#_filter_json)\n* [_get_mime_type](#_get_mime_type)\n* [_get_confirm](#_get_confirm)\n* [_opts_filter](#_opts_filter)\n* [_opts_pagination](#_opts_pagination)\n* [_opts_qs](#_opts_qs)\n* [_request](#_request)\n* [_response](#_response)\n* [_get](#_get)\n* [_post](#_post)\n* [_delete](#_delete)\n\n### GitHub commands\n\n* [help](#help)\n* [show_scopes](#show_scopes)\n* [org_repos](#org_repos)\n* [org_teams](#org_teams)\n* [org_members](#org_members)\n* [team_members](#team_members)\n* [list_repos](#list_repos)\n* [list_branches](#list_branches)\n* [list_contributors](#list_contributors)\n* [list_collaborators](#list_collaborators)\n* [list_hooks](#list_hooks)\n* [list_gists](#list_gists)\n* [public_gists](#public_gists)\n* [gist](#gist)\n* [add_collaborator](#add_collaborator)\n* [delete_collaborator](#delete_collaborator)\n* [create_repo](#create_repo)\n* [delete_repo](#delete_repo)\n* [fork_repo](#fork_repo)\n* [list_releases](#list_releases)\n* [release](#release)\n* [create_release](#create_release)\n* [delete_release](#delete_release)\n* [release_assets](#release_assets)\n* [upload_asset](#upload_asset)\n* [list_milestones](#list_milestones)\n* [create_milestone](#create_milestone)\n* [add_comment](#add_comment)\n* [add_commit_comment](#add_commit_comment)\n* [close_issue](#close_issue)\n* [list_issues](#list_issues)\n* [user_issues](#user_issues)\n* [create_issue](#create_issue)\n* [org_issues](#org_issues)\n* [list_my_orgs](#list_my_orgs)\n* [list_orgs](#list_orgs)\n* [labels](#labels)\n* [add_label](#add_label)\n* [update_label](#update_label)\n* [add_team_repo](#add_team_repo)\n* [list_pulls](#list_pulls)\n* [create_pull_request](#create_pull_request)\n* [update_pull_request](#update_pull_request)\n* [transfer_repo](#transfer_repo)\n* [archive_repo](#archive_repo)\n\n## Commands\n\n### _all_funcs\n\nList all functions found in the current file in the order they appear\n\nKeyword arguments\n\n* `public=1`\n\n  `0` do not output public functions.\n* `private=1`\n\n  `0` do not output private functions.\n\n### _log\n\nA lightweight logging system based on file descriptors\n\nUsage:\n\n    _log debug \'Starting the combobulator!\'\n\nPositional arguments\n\n* `level="$1"`\n\n  The level for a given log message. (info or debug)\n* `message="$2"`\n\n  The log message.\n\n### _helptext\n\nExtract contiguous lines of comments and function params as help text\n\nIndentation will be ignored. She-bangs will be ignored. Local variable\ndeclarations and their default values can also be pulled in as\ndocumentation. Exits upon encountering the first blank line.\n\nExported environment variables can be used for string interpolation in\nthe extracted commented text.\n\nInput\n\n* (stdin)\n  The text of a function body to parse.\n\n### _format_json\n\nCreate formatted JSON from name=value pairs\n\nUsage:\n```\nok.sh _format_json foo=Foo bar=123 baz=true qux=Qux=Qux quux=\'Multi-line\nstring\' quuz=\\\'5.20170918\\\' \\\n  corge="$(ok.sh _format_json grault=Grault)" \\\n  garply="$(ok.sh _format_json -a waldo true 3)"\n```\n\nReturn:\n```\n{\n  "garply": [\n    "waldo",\n    true,\n    3\n  ],\n  "foo": "Foo",\n  "corge": {\n    "grault": "Grault"\n  },\n  "baz": true,\n  "qux": "Qux=Qux",\n  "quux": "Multi-line\\nstring",\n  "quuz": "5.20170918",\n  "bar": 123\n}\n```\n\nTries not to quote numbers, booleans, nulls, or nested structures.\nNote, nested structures must be quoted since the output contains spaces.\n\nThe `-a` option will create an array instead of an object. This option\nmust come directly after the _format_json command and before any\noperands. E.g., `_format_json -a foo bar baz`.\n\nIf jq is installed it will also validate the output.\n\nPositional arguments\n\n* $1 - $9\n\n  Each positional arg must be in the format of `name=value` which will be\n  added to a single, flat JSON object.\n\n### _format_urlencode\n\nURL encode and join name=value pairs\n\nUsage:\n```\n_format_urlencode foo=\'Foo Foo\' bar=\'<Bar>&/Bar/\'\n```\n\nReturn:\n```\nfoo=Foo%20Foo&bar=%3CBar%3E%26%2FBar%2F\n```\n\nIgnores pairs if the value begins with an underscore.\n\n### _filter_json\n\nFilter JSON input using jq; outputs raw JSON if jq is not installed\n\nUsage:\n\n    printf \'[{"foo": "One"}, {"foo": "Two"}]\' | \\\n        ok.sh _filter_json \'.[] | "\\(.foo)"\'\n\n* (stdin)\n  JSON input.\n* `_filter="$1"`\n\n  A string of jq filters to apply to the input stream.\n\n### _get_mime_type\n\nGuess the mime type for a file based on the file extension\n\nUsage:\n\n    local mime_type\n    _get_mime_type "foo.tar"; printf \'mime is: %s\' "$mime_type"\n\nSets the global variable `mime_type` with the result. (If this function\nis called from within a function that has declared a local variable of\nthat name it will update the local copy and not set a global.)\n\nPositional arguments\n\n* `filename="$1"`\n\n  The full name of the file, with extension.\n\n### _get_confirm\n\nPrompt the user for confirmation\n\nUsage:\n\n    local confirm; _get_confirm\n    [ "$confirm" -eq 1 ] && printf \'Good to go!\\n\'\n\nIf global confirmation is set via `$OK_SH_DESTRUCTIVE` then the user\nis not prompted. Assigns the user\'s confirmation to the `confirm` global\nvariable. (If this function is called within a function that has a local\nvariable of that name, the local variable will be updated instead.)\n\nPositional arguments\n\n* `message="$1"`\n\n  The message to prompt the user with.\n\n### _opts_filter\n\nExtract common jq filter keyword options and assign to vars\n\nUsage:\n\n    local filter\n    _opts_filter "$@"\n\n### _opts_pagination\n\nExtract common pagination keyword options and assign to vars\n\nUsage:\n\n    local _follow_next\n    _opts_pagination "$@"\n\n### _opts_qs\n\nExtract common query string keyword options and assign to vars\n\nUsage:\n\n    local qs\n    _opts_qs "$@"\n    _get "/some/path"\n\n### _request\n\nA wrapper around making HTTP requests with curl\n\nUsage:\n```\n# Get JSON for all issues:\n_request /repos/saltstack/salt/issues\n\n# Send a POST request; parse response using jq:\nprintf \'{"title": "%s", "body": "%s"}\\n\' "Stuff" "Things" \\\n  | _request /some/path | jq -r \'.[url]\'\n\n# Send a PUT request; parse response using jq:\nprintf \'{"title": "%s", "body": "%s"}\\n\' "Stuff" "Things" \\\n  | _request /repos/:owner/:repo/issues method=PUT | jq -r \'.[url]\'\n\n# Send a conditional-GET request:\n_request /users etag=edd3a0d38d8c329d3ccc6575f17a76bb\n```\n\nInput\n\n* (stdin)\n  Data that will be used as the request body.\n\nPositional arguments\n\n* `path="$1"`\n\n  The URL path for the HTTP request.\n  Must be an absolute path that starts with a `/` or a full URL that\n  starts with http(s). Absolute paths will be append to the value in\n  `$OK_SH_URL`.\n\nKeyword arguments\n\n* `method=\'GET\'`\n\n  The method to use for the HTTP request.\n* `content_type=\'application/json\'`\n\n  The value of the Content-Type header to use for the request.\n* `etag`\n\n  An optional Etag to send as the If-None-Match header.\n\n### _response\n\nProcess an HTTP response from curl\n\nOutput only headers of interest followed by the response body. Additional\nprocessing is performed on select headers to make them easier to parse\nusing shell tools.\n\nUsage:\n```\n# Send a request; output the response and only select response headers:\n_request /some/path | _response status_code ETag Link_next\n\n# Make request using curl; output response with select response headers;\n# assign response headers to local variables:\ncurl -isS example.com/some/path | _response status_code status_text | {\n  local status_code status_text\n  read -r status_code\n  read -r status_text\n}\n```\n\nHeader reformatting\n\n* HTTP Status\n\n  The HTTP line is split into separate `http_version`, `status_code`, and\n  `status_text` variables.\n\n* ETag\n\n  The surrounding quotes are removed.\n\n* Link\n\n  Each URL in the Link header is expanded with the URL type appended to\n  the name. E.g., `Link_first`, `Link_last`, `Link_next`.\n\nPositional arguments\n\n* $1 - $9\n\n  Each positional arg is the name of an HTTP header. Each header value is\n  output in the same order as each argument; each on a single line. A\n  blank line is output for headers that cannot be found.\n\n### _get\n\nA wrapper around _request() for common GET patterns\n\nWill automatically follow \'next\' pagination URLs in the Link header.\n\nUsage:\n\n    _get /some/path\n    _get /some/path _follow_next=0\n    _get /some/path _follow_next_limit=200 | jq -c .\n\nPositional arguments\n\n* `path="$1"`\n\n  The HTTP path or URL to pass to _request().\n\nKeyword arguments\n\n* _follow_next=1\n\n  Automatically look for a \'Links\' header and follow any \'next\' URLs.\n\n* _follow_next_limit=50\n\n  Maximum number of \'next\' URLs to follow before stopping.\n\n### _post\n\nA wrapper around _request() for common POST / PUT patterns\n\nUsage:\n\n    _format_json foo=Foo bar=Bar | _post /some/path\n    _format_json foo=Foo bar=Bar | _post /some/path method=\'PUT\'\n    _post /some/path filename=somearchive.tar\n    _post /some/path filename=somearchive.tar mime_type=application/x-tar\n    _post /some/path filename=somearchive.tar \\\n      mime_type=$(file -b --mime-type somearchive.tar)\n\nInput\n\n* (stdin)\n  Optional. See the `filename` argument also.\n  Data that will be used as the request body.\n\nPositional arguments\n\n* `path="$1"`\n\n  The HTTP path or URL to pass to _request().\n\nKeyword arguments\n\n* `method=\'POST\'`\n\n  The method to use for the HTTP request.\n* `filename`\n\n  Optional. See the `stdin` option above also.\n  Takes precedence over any data passed as stdin and loads a file off the\n  file system to serve as the request body.\n* `mime_type`\n\n  The value of the Content-Type header to use for the request.\n  If the `filename` argument is given this value will be guessed from the\n  file extension. If the `filename` argument is not given (i.e., using\n  stdin) this value defaults to `application/json`. Specifying this\n  argument overrides all other defaults or guesses.\n\n### _delete\n\nA wrapper around _request() for common DELETE patterns\n\nUsage:\n\n    _delete \'/some/url\'\n\nReturn: 0 for success; 1 for failure.\n\nPositional arguments\n\n* `url="$1"`\n\n  The URL to send the DELETE request to.\n\n### help\n\nOutput the help text for a command\n\nUsage:\n\n    help commandname\n\nPositional arguments\n\n* `fname="$1"`\n\n  Function name to search for; if omitted searches whole file.\n\n### show_scopes\n\nShow the permission scopes for the currently authenticated user\n\nUsage:\n\n    show_scopes\n\n### org_repos\n\nList organization repositories\n\nUsage:\n\n    org_repos myorg\n    org_repos myorg type=private per_page=10\n    org_repos myorg _filter=\'.[] | "\\(.name)\\t\\(.owner.login)"\'\n\nPositional arguments\n\n* `org="$1"`\n\n  Organization GitHub login or id for which to list repos.\n\nKeyword arguments\n\n* `_follow_next`\n\n  Automatically look for a \'Links\' header and follow any \'next\' URLs.\n* `_follow_next_limit`\n\n  Maximum number of \'next\' URLs to follow before stopping.\n* `_filter=\'.[] | "\\(.name)\\t\\(.ssh_url)"\'`\n\n  A jq filter to apply to the return data.\n\nQuerystring arguments may also be passed as keyword arguments:\n\n* `per_page`\n* `type`\n\n### org_teams\n\nList teams\n\nUsage:\n\n    org_teams org\n\nPositional arguments\n\n* `org="$1"`\n\n  Organization GitHub login or id.\n\nKeyword arguments\n\n* `_filter=\'.[] | "\\(.name)\\t\\(.id)\\t\\(.permission)"\'`\n\n  A jq filter to apply to the return data.\n\n### org_members\n\nList organization members\n\nUsage:\n\n    org_members org\n\nPositional arguments\n\n* `org="$1"`\n\n  Organization GitHub login or id.\n\nKeyword arguments\n\n* `_filter=\'.[] | "\\(.login)\\t\\(.id)"\'`\n\n  A jq filter to apply to the return data.\n\n### team_members\n\nList team members\n\nUsage:\n\n    team_members team_id\n\nPositional arguments\n\n* `team_id="$1"`\n\n  Team id.\n\nKeyword arguments\n\n* `_filter=\'.[] | "\\(.login)\\t\\(.id)"\'`\n\n  A jq filter to apply to the return data.\n\n### list_repos\n\nList user repositories\n\nUsage:\n\n    list_repos\n    list_repos user\n\nPositional arguments\n\n* `user="$1"`\n\n  Optional GitHub user login or id for which to list repos.\n\nKeyword arguments\n\n* `_filter=\'.[] | "\\(.name)\\t\\(.html_url)"\'`\n\n  A jq filter to apply to the return data.\n\nQuerystring arguments may also be passed as keyword arguments:\n\n* `direction`\n* `per_page`\n* `sort`\n* `type`\n\n### list_branches\n\nList branches of a specified repository.\n( https://developer.github.com/v3/repos/#list_branches )\n\nUsage:\n\n    list_branches user repo\n\nPositional arguments\n\n  GitHub user login or id for which to list branches\n  Name of the repo for which to list branches\n\n* `user="$1"`\n\n* `repo="$2"`\n\n\nKeyword arguments\n\n* `_filter=\'.[] | "\\(.name)"\'`\n\n  A jq filter to apply to the return data.\n\nQuerystring arguments may also be passed as keyword arguments:\n\n* `direction`\n* `per_page`\n* `sort`\n* `type`\n\n### list_contributors\n\nList contributors to the specified repository, sorted by the number of commits per contributor in descending order.\n( https://developer.github.com/v3/repos/#list-contributors )\n\nUsage:\n\n    list_contributors user repo\n\nPositional arguments\n\n* `user="$1"`\n\n  GitHub user login or id for which to list contributors\n* `repo="$2"`\n\n  Name of the repo for which to list contributors\n\nKeyword arguments\n\n* `_filter=\'.[] | "\\(.login)\\t\\(.type)\\tType:\\(.type)\\tContributions:\\(.contributions)"\'`\n\n  A jq filter to apply to the return data.\n\nQuerystring arguments may also be passed as keyword arguments:\n\n* `direction`\n* `per_page`\n* `sort`\n* `type`\n\n### list_collaborators\n\nList collaborators to the specified repository, sorted by the number of commits per collaborator in descending order.\n( https://developer.github.com/v3/repos/#list-collaborators )\n\nUsage:\n\n    list_collaborators someuser/somerepo\n\nPositional arguments\n  GitHub user login or id for which to list collaborators\n  Name of the repo for which to list collaborators\n\n* `repo="$1"`\n\n\nKeyword arguments\n\n* `_filter=\'.[] | "\\(.login)\\t\\(.type)\\tType:\\(.type)\\tPermissions:\\(.permissions)"\'`\n\n  A jq filter to apply to the return data.\n\nQuerystring arguments may also be passed as keyword arguments:\n\n* `direction`\n* `per_page`\n* `sort`\n* `type`\n\n### list_hooks\n\nList webhooks from the specified repository.\n( https://developer.github.com/v3/repos/hooks/#list-hooks )\n\nUsage:\n\n    list_hooks owner/repo\n\nPositional arguments\n\n* `repo="$1"`\n\n  Name of the repo for which to list contributors\n  Owner is mandatory, like \'owner/repo\'\n\n* `_filter=\'.[] | "\\(.name)\\t\\(.config.url)"\'`\n\n  A jq filter to apply to the return data.\n\n\n### list_gists\n\nList gists for the current authenticated user or a specific user\n\nhttps://developer.github.com/v3/gists/#list-a-users-gists\n\nUsage:\n\n    list_gists\n    list_gists <username>\n\nPositional arguments\n\n* `username="$1"`\n\n  An optional user to filter listing\n\nKeyword arguments\n\n* `_follow_next`\n\n  Automatically look for a \'Links\' header and follow any \'next\' URLs.\n* `_follow_next_limit`\n\n  Maximum number of \'next\' URLs to follow before stopping.\n* `_filter=\'.[] | "\\(.id)\\t\\(.description)"\'`\n\n  A jq filter to apply to the return data.\n\n### public_gists\n\nList public gists\n\nhttps://developer.github.com/v3/gists/#list-all-public-gists\n\nUsage:\n\n    public_gists\n\nKeyword arguments\n\n* `_follow_next`\n\n  Automatically look for a \'Links\' header and follow any \'next\' URLs.\n* `_follow_next_limit`\n\n  Maximum number of \'next\' URLs to follow before stopping.\n* `_filter=\'.[] | "\\(.id)\\t\\(.description)"\'`\n\n  A jq filter to apply to the return data.\n\n### gist\n\nGet a single gist\n\nhttps://developer.github.com/v3/gists/#get-a-single-gist\n\nUsage:\n\n    get_gist\n\nPositional arguments\n\n* `gist_id="$1"`\n\n  ID of gist to fetch.\n\nKeyword arguments\n\n* `_filter=\'.files | keys | join(", ")\'`\n\n  A jq filter to apply to the return data.\n\n### add_collaborator\n\nAdd a collaborator to a repository\n\nUsage:\n\n    add_collaborator someuser/somerepo collaboratoruser permission\n\nPositional arguments\n\n* `repo="$1"`\n\n  A GitHub repository.\n* `collaborator="$2"`\n\n  A new collaborator.\n* `permission="$3"`\n\n  The permission level for this collaborator. One of `push`, `pull`,\n  `admin`. The `pull` and `admin` permissions are valid for organization\n  repos only.\n\nKeyword arguments\n\n* `_filter=\'"\\(.name)\\t\\(.color)"\'`\n\n  A jq filter to apply to the return data.\n\n### delete_collaborator\n\nDelete a collaborator to a repository\n\nUsage:\n\n    delete_collaborator someuser/somerepo collaboratoruser permission\n\nPositional arguments\n\n* `repo="$1"`\n\n  A GitHub repository.\n* `collaborator="$2"`\n\n  A new collaborator.\n\n### create_repo\n\nCreate a repository for a user or organization\n\nUsage:\n\n    create_repo foo\n    create_repo bar description=\'Stuff and things\' homepage=\'example.com\'\n    create_repo baz organization=myorg\n\nPositional arguments\n\n* `name="$1"`\n\n  Name of the new repo\n\nKeyword arguments\n\n* `_filter=\'"\\(.name)\\t\\(.html_url)"\'`\n\n  A jq filter to apply to the return data.\n\nPOST data may also be passed as keyword arguments:\n\n* `auto_init`,\n* `description`\n* `gitignore_template`\n* `has_downloads`\n* `has_issues`\n* `has_wiki`,\n* `homepage`\n* `organization`\n* `private`\n* `team_id`\n\n### delete_repo\n\nDelete a repository for a user or organization\n\nUsage:\n\n    delete_repo owner repo\n\nThe currently authenticated user must have the `delete_repo` scope. View\ncurrent scopes with the `show_scopes()` function.\n\nPositional arguments\n\n* `owner="$1"`\n\n  Name of the new repo\n* `repo="$2"`\n\n  Name of the new repo\n\n### fork_repo\n\nFork a repository from a user or organization to own account or organization\n\nUsage:\n\n    fork_repo owner repo\n\nPositional arguments\n\n* `owner="$1"`\n\n  Name of existing user or organization\n* `repo="$2"`\n\n  Name of the existing repo\n\n\nKeyword arguments\n\n* `_filter=\'"\\(.clone_url)\\t\\(.ssh_url)"\'`\n\n  A jq filter to apply to the return data.\n\nPOST data may also be passed as keyword arguments:\n\n* `organization` (The organization to clone into; default: your personal account)\n\n### list_releases\n\nList releases for a repository\n\nhttps://developer.github.com/v3/repos/releases/#list-releases-for-a-repository\n\nUsage:\n\n    list_releases org repo \'\\(.assets[0].name)\\t\\(.name.id)\'\n\nPositional arguments\n\n* `owner="$1"`\n\n  A GitHub user or organization.\n* `repo="$2"`\n\n  A GitHub repository.\n\nKeyword arguments\n\n* `_filter=\'.[] | "\\(.name)\\t\\(.tag_name)\\t\\(.id)\\t\\(.html_url)"\'`\n\n  A jq filter to apply to the return data.\n\n### release\n\nGet a release\n\nhttps://developer.github.com/v3/repos/releases/#get-a-single-release\n\nUsage:\n\n    release user repo 1087855\n\nPositional arguments\n\n* `owner="$1"`\n\n  A GitHub user or organization.\n* `repo="$2"`\n\n  A GitHub repository.\n* `release_id="$3"`\n\n  The unique ID of the release; see list_releases.\n\nKeyword arguments\n\n* `_filter=\'"\\(.author.login)\\t\\(.published_at)"\'`\n\n  A jq filter to apply to the return data.\n\n### create_release\n\nCreate a release\n\nhttps://developer.github.com/v3/repos/releases/#create-a-release\n\nUsage:\n\n    create_release org repo v1.2.3\n    create_release user repo v3.2.1 draft=true\n\nPositional arguments\n\n* `owner="$1"`\n\n  A GitHub user or organization.\n* `repo="$2"`\n\n  A GitHub repository.\n* `tag_name="$3"`\n\n  Git tag from which to create release.\n\nKeyword arguments\n\n* `_filter=\'"\\(.name)\\t\\(.id)\\t\\(.html_url)"\'`\n\n  A jq filter to apply to the return data.\n\nPOST data may also be passed as keyword arguments:\n\n* `body`\n* `draft`\n* `name`\n* `prerelease`\n* `target_commitish`\n\n### delete_release\n\nDelete a release\n\nhttps://developer.github.com/v3/repos/releases/#delete-a-release\n\nUsage:\n\n    delete_release org repo 1087855\n\nReturn: 0 for success; 1 for failure.\n\nPositional arguments\n\n* `owner="$1"`\n\n  A GitHub user or organization.\n* `repo="$2"`\n\n  A GitHub repository.\n* `release_id="$3"`\n\n  The unique ID of the release; see list_releases.\n\n### release_assets\n\nList release assets\n\nhttps://developer.github.com/v3/repos/releases/#list-assets-for-a-release\n\nUsage:\n\n    release_assets user repo 1087855\n\nExample of downloading release assets:\n\n    ok.sh release_assets <user> <repo> <release_id> \\\n            _filter=\'.[] | .browser_download_url\' \\\n        | xargs -L1 curl -L -O\n\nExample of the multi-step process for grabbing the release ID for\na specific version, then grabbing the release asset IDs, and then\ndownloading all the release assets (whew!):\n\n    username=\'myuser\'\n    repo=\'myrepo\'\n    release_tag=\'v1.2.3\'\n    ok.sh list_releases "$myuser" "$myrepo" \\\n        | awk -F\'\\t\' -v tag="$release_tag" \'$2 == tag { print $3 }\' \\\n        | xargs -I{} ./ok.sh release_assets "$myuser" "$myrepo" {} \\\n            _filter=\'.[] | .browser_download_url\' \\\n        | xargs -L1 curl -n -L -O\n\nPositional arguments\n\n* `owner="$1"`\n\n  A GitHub user or organization.\n* `repo="$2"`\n\n  A GitHub repository.\n* `release_id="$3"`\n\n  The unique ID of the release; see list_releases.\n\nKeyword arguments\n\n* `_filter=\'.[] | "\\(.id)\\t\\(.name)\\t\\(.updated_at)"\'`\n\n  A jq filter to apply to the return data.\n\n### upload_asset\n\nUpload a release asset\n\nhttps://developer.github.com/v3/repos/releases/#upload-a-release-asset\n\nUsage:\n\n    upload_asset https://<upload-url> /path/to/file.zip\n\nThe upload URL can be gotten from `release()`. There are multiple steps\nrequired to upload a file: get the release ID, get the upload URL, parse\nthe upload URL, then finally upload the file. For example:\n\n```sh\nUSER="someuser"\nREPO="somerepo"\nTAG="1.2.3"\nFILE_NAME="foo.zip"\nFILE_PATH="/path/to/foo.zip"\n\n# Create a release then upload a file:\nok.sh create_release "$USER" "$REPO" "$TAG" _filter=\'.upload_url\' \\\n    | sed \'s/{.*$/?name=\'"$FILE_NAME"\'/\' \\\n    | xargs -I@ ok.sh upload_asset @ "$FILE_PATH"\n\n# Find a release by tag then upload a file:\nok.sh list_releases "$USER" "$REPO" \\\n    | awk -v "tag=$TAG" -F\'\\t\' \'$2 == tag { print $3 }\' \\\n    | xargs -I@ ok.sh release "$USER" "$REPO" @ _filter=\'.upload_url\' \\\n    | sed \'s/{.*$/?name=\'"$FILE_NAME"\'/\' \\\n    | xargs -I@ ok.sh upload_asset @ "$FILE_PATH"\n```\n\nPositional arguments\n\n* `upload_url="$1"`\n\nThe _parsed_ upload_url returned from GitHub.\n\n* `file_path="$2"`\n\n  A path to the file that should be uploaded.\n\nKeyword arguments\n\n* `_filter=\'"\\(.state)\\t\\(.browser_download_url)"\'`\n\n  A jq filter to apply to the return data.\n\nAlso any other keyword arguments accepted by `_post()`.\n\n### list_milestones\n\nList milestones for a repository\n\nUsage:\n\n    list_milestones someuser/somerepo\n    list_milestones someuser/somerepo state=closed\n\nPositional arguments\n\n* `repository="$1"`\n\n  A GitHub repository.\n\nKeyword arguments\n\n* `_follow_next`\n\n  Automatically look for a \'Links\' header and follow any \'next\' URLs.\n* `_follow_next_limit`\n\n  Maximum number of \'next\' URLs to follow before stopping.\n* `_filter=\'.[] | "\\(.number)\\t\\(.open_issues)/\\(.closed_issues)\\t\\(.title)"\'`\n\n  A jq filter to apply to the return data.\n\nGitHub querystring arguments may also be passed as keyword arguments:\n\n* `direction`\n* `per_page`\n* `sort`\n* `state`\n\n### create_milestone\n\nCreate a milestone for a repository\n\nUsage:\n\n    create_milestone someuser/somerepo MyMilestone\n\n    create_milestone someuser/somerepo MyMilestone \\\n        due_on=2015-06-16T16:54:00Z \\\n        description=\'Long description here\n    that spans multiple lines.\'\n\nPositional arguments\n\n* `repo="$1"`\n\n  A GitHub repository.\n* `title="$2"`\n\n  A unique title.\n\nKeyword arguments\n\n* `_filter=\'"\\(.number)\\t\\(.html_url)"\'`\n\n  A jq filter to apply to the return data.\n\nMilestone options may also be passed as keyword arguments:\n\n* `description`\n* `due_on`\n* `state`\n\n### add_comment\n\nAdd a comment to an issue\n\nUsage:\n\n    add_comment someuser/somerepo 123 \'This is a comment\'\n\nPositional arguments\n\n* `repository="$1"`\n\n  A GitHub repository\n* `number="$2"`\n\n  Issue Number\n* `comment="$3"`\n\n  Comment to be added\n\nKeyword arguments\n\n* `_filter=\'"\\(.id)\\t\\(.html_url)"\'`\n\n  A jq filter to apply to the return data.\n\n### add_commit_comment\n\nAdd a comment to a commit\n\nUsage:\n\n    add_commit_comment someuser/somerepo 123 \'This is a comment\'\n\nPositional arguments\n\n* `repository="$1"`\n\n  A GitHub repository\n* `hash="$2"`\n\n  Commit hash\n* `comment="$3"`\n\n  Comment to be added\n\nKeyword arguments\n\n* `_filter=\'"\\(.id)\\t\\(.html_url)"\'`\n\n  A jq filter to apply to the return data.\n\n### close_issue\n\nClose an issue\n\nUsage:\n\n    close_issue someuser/somerepo 123\n\nPositional arguments\n\n* `repository="$1"`\n\n  A GitHub repository\n* `number="$2"`\n\n  Issue Number\n\nKeyword arguments\n\n* `_filter=\'"\\(.id)\\t\\(.state)\\t\\(.html_url)"\'`\n\n  A jq filter to apply to the return data.\n\nPOST data may also be passed as keyword arguments:\n\n* `assignee`\n* `labels`\n* `milestone`\n\n### list_issues\n\nList issues for the authenticated user or repository\n\nUsage:\n\n    list_issues\n    list_issues someuser/somerepo\n    list_issues <any of the above> state=closed labels=foo,bar\n\nPositional arguments\n\nuser or user/repository\n\nKeyword arguments\n\n* `_follow_next`\n\n  Automatically look for a \'Links\' header and follow any \'next\' URLs.\n* `_follow_next_limit`\n\n  Maximum number of \'next\' URLs to follow before stopping.\n* `_filter=\'.[] | "\\(.number)\\t\\(.title)"\'`\n\n  A jq filter to apply to the return data.\n\nGitHub querystring arguments may also be passed as keyword arguments:\n\n* `assignee`\n* `creator`\n* `direction`\n* `labels`\n* `mentioned`\n* `milestone`\n* `per_page`\n* `since`\n* `sort`\n* `state`\n\n### user_issues\n\nList all issues across owned and member repositories for the authenticated user\n\nUsage:\n\n    user_issues\n    user_issues since=2015-60-11T00:09:00Z\n\nKeyword arguments\n\n* `_follow_next`\n\n  Automatically look for a \'Links\' header and follow any \'next\' URLs.\n* `_follow_next_limit`\n\n  Maximum number of \'next\' URLs to follow before stopping.\n* `_filter=\'.[] | "\\(.repository.full_name)\\t\\(.number)\\t\\(.title)"\'`\n\n  A jq filter to apply to the return data.\n\nGitHub querystring arguments may also be passed as keyword arguments:\n\n* `direction`\n* `filter`\n* `labels`\n* `per_page`\n* `since`\n* `sort`\n* `state`\n\n### create_issue\n\nCreate an issue\n\nUsage:\n\n    create_issue owner repo \'Issue title\' body=\'Add multiline body\n    content here\' labels="$(./ok.sh _format_json -a foo bar)"\n\nPositional arguments\n\n* `owner="$1"`\n\n  A GitHub repository.\n* `repo="$2"`\n\n  A GitHub repository.\n* `title="$3"`\n\n  A GitHub repository.\n\nKeyword arguments\n\n* `_filter=\'"\\(.id)\\t\\(.number)\\t\\(.html_url)"\'`\n\n  A jq filter to apply to the return data.\n\nAdditional issue fields may be passed as keyword arguments:\n\n* `body` (string)\n* `assignee` (string)\n* `milestone` (integer)\n* `labels` (array of strings)\n* `assignees` (array of strings)\n\n### org_issues\n\nList all issues for a given organization for the authenticated user\n\nUsage:\n\n    org_issues someorg\n\nPositional arguments\n\n* `org="$1"`\n\n  Organization GitHub login or id.\n\nKeyword arguments\n\n* `_follow_next`\n\n  Automatically look for a \'Links\' header and follow any \'next\' URLs.\n* `_follow_next_limit`\n\n  Maximum number of \'next\' URLs to follow before stopping.\n* `_filter=\'.[] | "\\(.number)\\t\\(.title)"\'`\n\n  A jq filter to apply to the return data.\n\nGitHub querystring arguments may also be passed as keyword arguments:\n\n* `direction`\n* `filter`\n* `labels`\n* `per_page`\n* `since`\n* `sort`\n* `state`\n\n### list_my_orgs\n\nList your organizations\n\nUsage:\n\n    list_my_orgs\n\nKeyword arguments\n\n* `_follow_next`\n\n  Automatically look for a \'Links\' header and follow any \'next\' URLs.\n* `_follow_next_limit`\n\n  Maximum number of \'next\' URLs to follow before stopping.\n* `_filter=\'.[] | "\\(.login)\\t\\(.id)"\'`\n\n  A jq filter to apply to the return data.\n\n### list_orgs\n\nList all organizations\n\nUsage:\n\n    list_orgs\n\nKeyword arguments\n\n* `_follow_next`\n\n  Automatically look for a \'Links\' header and follow any \'next\' URLs.\n* `_follow_next_limit`\n\n  Maximum number of \'next\' URLs to follow before stopping.\n* `_filter=\'.[] | "\\(.login)\\t\\(.id)"\'`\n\n  A jq filter to apply to the return data.\n\n### labels\n\nList available labels for a repository\n\nUsage:\n\n    labels someuser/somerepo\n\nPositional arguments\n\n* `repo="$1"`\n\n  A GitHub repository.\n\nKeyword arguments\n\n* `_follow_next`\n\n  Automatically look for a \'Links\' header and follow any \'next\' URLs.\n* `_follow_next_limit`\n\n  Maximum number of \'next\' URLs to follow before stopping.\n* `_filter=\'.[] | "\\(.name)\\t\\(.color)"\'`\n\n  A jq filter to apply to the return data.\n\n### add_label\n\nAdd a label to a repository\n\nUsage:\n\n    add_label someuser/somerepo LabelName color\n\nPositional arguments\n\n* `repo="$1"`\n\n  A GitHub repository.\n* `label="$2"`\n\n  A new label.\n* `color="$3"`\n\n  A color, in hex, without the leading `#`.\n\nKeyword arguments\n\n* `_filter=\'"\\(.name)\\t\\(.color)"\'`\n\n  A jq filter to apply to the return data.\n\n### update_label\n\nUpdate a label\n\nUsage:\n\n    update_label someuser/somerepo OldLabelName \\\n        label=NewLabel color=newcolor\n\nPositional arguments\n\n* `repo="$1"`\n\n  A GitHub repository.\n* `label="$2"`\n\n  The name of the label which will be updated\n\nKeyword arguments\n\n* `_filter=\'"\\(.name)\\t\\(.color)"\'`\n\n  A jq filter to apply to the return data.\n\nLabel options may also be passed as keyword arguments, these will update\nthe existing values:\n\n* `color`\n* `name`\n\n### add_team_repo\n\nAdd a team repository\n\nUsage:\n\n    add_team_repo team_id organization repository_name permission\n\nPositional arguments\n\n* `team_id="$1"`\n\n  Team id to add repository to\n* `organization="$2"`\n\n  Organization to add repository to\n* `repository_name="$3"`\n\n  Repository name to add\n* `permission="$4"`\n\n  Permission to grant: pull, push, admin\n\n* `url="/teams/$team_id}/repos/${organization}/${repository_name}"`\n\n\n### list_pulls\n\nLists the pull requests for a repository\n\nUsage:\n\n    list_pulls user repo\n\nPositional arguments\n\n* `owner="$1"`\n\n  A GitHub owner.\n* `repo="$2"`\n\n  A GitHub repository.\n\nKeyword arguments\n\n* `_follow_next`\n\n  Automatically look for a \'Links\' header and follow any \'next\' URLs.\n* `_follow_next_limit`\n\n  Maximum number of \'next\' URLs to follow before stopping.\n* `_filter=\'.[] | "\\(.number)\\t\\(.user.login)\\t\\(.head.repo.clone_url)\\t\\(.head.ref)"\'`\n\n  A jq filter to apply to the return data.\n\n### create_pull_request\n\nCreate a pull request for a repository\n\nUsage:\n\n    create_pull_request someuser/somerepo title head base\n\n    create_pull_request someuser/somerepo title head base body=\'Description here.\'\n\nPositional arguments\n\n* `repo="$1"`\n\n  A GitHub repository.\n* `title="$2"`\n\n  A title.\n* `head="$3"`\n\n  A head.\n* `base="$4"`\n\n  A base.\n\nKeyword arguments\n\n* `_filter=\'"\\(.number)\\t\\(.html_url)"\'`\n\n  A jq filter to apply to the return data.\n\nPull request options may also be passed as keyword arguments:\n\n* `body`\n* `maintainer_can_modify`\n\n### update_pull_request\n\nUpdate a pull request for a repository\n\nUsage:\n\n    update_pull_request someuser/somerepo number title=\'New title\' body=\'New body\'\n\nPositional arguments\n\n* `repo="$1"`\n\n  A GitHub repository.\n* `number="$2"`\n\n  A pull request number.\n\nKeyword arguments\n\n* `_filter=\'"\\(.number)\\t\\(.html_url)"\'`\n\n  A jq filter to apply to the return data.\n\nPull request options may also be passed as keyword arguments:\n\n* `base`\n* `body`\n* `maintainer_can_modify`\n* `state` (either open or closed)\n* `title`\n\n### transfer_repo\n\nTransfer a repository to a user or organization\n\nUsage:\n\n    transfer_repo owner repo new_owner\n    transfer_repo owner repo new_owner team_ids=\'[ 12, 345 ]\'\n\nPositional arguments\n\n* `owner="$1"`\n\n  Name of the current owner\n\n* `repo="$2"`\n\n  Name of the current repo\n\n* `new_owner="$3"`\n\n  Name of the new owner\n\nKeyword arguments\n\n* `_filter=\'"\\(.name)"\'`\n\n  A jq filter to apply to the return data.\n\nPOST data may also be passed as keyword arguments:\n\n* `team_ids`\n\n### archive_repo\n\nArchive a repo\n\nUsage:\n\n    archive_repo owner/repo\n\nPositional arguments\n\n* `repo="$1"`\n\n  A GitHub repository.\n\n* `_filter=\'"\\(.name)\\t\\(.html_url)"\'`\n\n  A jq filter to apply to the return data.\n\n\n'