b'# ghtorrent: Mirror and index data from the Github API\n\nA library and a collection of scripts used to retrieve data from the Github API\nand extract metadata in an SQL database, in a modular and scalable manner. The\nscripts are distributed as a Gem (`ghtorrent`), but they can also be run by\nchecking out this repository.\n\nGHTorrent can be used for a variety of purposes, such as:\n\n* Mirror the Github API event stream and follow links from events to actual data\n to gradually build a [Github index](http://ghtorrent.org/)\n* Create a queriable metadata database for a specific repository\n* Construct a data source for [extracting process analytics](http://www.gousios.gr/blog/ghtorrent-project-statistics/) (see for example [those](http://ghtorrent.org/pullreq-perf/)) for one or more repositories\n\n## Components\n\nGHTorrents components (which can be used individually) are:\n\n* [APIClient](https://github.com/gousiosg/github-mirror/blob/master/lib/ghtorrent/api_client.rb): Knows how to query the Github API (both single entities and\npages) and respect the API request limit. Can be configured to override the\ndefault IP address, in case of multihomed hosts.\n* [Retriever](https://github.com/gousiosg/github-mirror/blob/master/lib/ghtorrent/retriever.rb): Knows how to retrieve specific Github entities (users, repositories, watchers) by name. Uses an optional persister to avoid\nretrieving data that have not changed.\n* [Persister](https://github.com/gousiosg/github-mirror/blob/master/lib/ghtorrent/persister.rb): A key/value store, which can be backed by a real key/value store,\nto store Github JSON replies and query them on request. The backing key/value\nstore must support arbitrary queries to the stored JSON objects.\n* [GHTorrent](https://github.com/gousiosg/github-mirror/blob/master/lib/ghtorrent/ghtorrent.rb): Knows how to extract information from the data retrieved by\nthe retriever in order to update an SQL database (see [schema](http://ghtorrent.org/relational.html)) with metadata.\n\n### Component Configuration\n\nThe Persister and GHTorrent components have configurable back ends:\n\n* **Persister:** Either uses MongoDB > 3.0 (`mongo` driver) or no persister (`noop` driver)\n* **GHTorrent:** GHTorrent is tested mainly with MySQL and SQLite, but can theoretically be used with any SQL database compatible with [Sequel](http://sequel.rubyforge.org/rdoc/files/doc/opening_databases_rdoc.html). Your milaege may vary.\n\nFor distributed mirroring you also need RabbitMQ >= 3.3\n\n## Installation\n\n\n### 1. Install GHTorrent\nGHTorrent is written in Ruby (tested with Ruby > 2.0). To install it as a Gem do:\n\n<code>\nsudo gem install ghtorrent\n</code>\n\n\n### 2. Install Your Preferred Database\n\nDepending on which SQL database you want to use, install the appropriate\ndependency gem.\n\n<code>\nsudo gem install mysql2 # or sqlite3\n</code>\n\n\n## Configuration\n\nCopy [config.yaml.tmpl](https://github.com/gousiosg/github-mirror/blob/master/config.yaml.tmpl)\nto a file in your home directory.\n\nAll provided scripts accept the `-c` option, which accepts the location of the configuration file as\na parameter.\n\nYou can find more information of how you can setup a mirroring cluster of machines\nto retrieve data in parallel on the [Wiki](https://github.com/gousiosg/github-mirror/wiki/Setting-up-a-mirroring-cluster).\n\n\n## Using GHTorrent\n\nTo mirror the event stream and capture all data:\n\n* `ght-mirror-events.rb` periodically polls Github\'s event\nqueue (`https://api.github.com/events`), stores all new events in the\nconfigured pestister, and posts them to the `github` exchange in\nRabbitMQ.\n\n* `ght-data_retrieval.rb` creates queues that route posted events to processor\nfunctions. The functions use the appropriate Github API call to retrieve the\nlinked contents, extract metadata (for database storage), and store the\nretrieved data in the appropriate collection in the persister, to avoid\nduplicate API calls.\nData in the SQL database contain pointers (the `ext_ref_id` field) to the\n"raw" data in the persister.\n\nTo retrieve data for a repository or user:\n\n* `ght-retrieve-repo` retrieves all data for a specific repository\n* `ght-retrieve-user` retrieves all data for a specific user\n\nTo perform maintenance:\n\n* `ght-load` loads selected events from the persister to the queue in order for\nthe `ght-data-retrieval` script to reprocess them\n\n### Data\n\nThe code in this repository is used to power the data collection process of\nthe [GHTorrent.org](http://ghtorrent.org/) project.\nYou can find all data collected by in the project in the\n[Downloads](https://ghtorrent.org/downloads.html) page.\n\nThere are two sets of data:\n\n* **Raw events:** Github\'s [event stream](https://api.github.com/events). These\nare the roots for mirroring operations. The `ght-data-retrieval` crawler starts\nfrom an event and goes deep into the rabbit hole.\n* **SQL dumps + Linked data:** Data dumps from the SQL database and the corresponding MongoDB entities.\n\n## Bugs & Feature Requests\n\nPlease tell us about features you\'d like or bugs you\'ve discovered on our\n[Issue Tracker](https://github.com/gousiosg/github-mirror/issues).\n\nPatches, bug fixes, etc are welcome. Please fork the repository and create\na pull request when done fixing/implementing the new feature.\n\n## Citing GHTorrent in your Research\n\nIf you find GHTorrent and the accompanying datasets useful in your research,\nplease consider citing the following paper:\n\n> Georgios Gousios and Diomidis Spinellis, "GHTorrent: GitHub\xe2\x80\x99s data from a firehose," in _MSR \'12: Proceedings of the 9th Working Conference on Mining Software Repositories_, June 2-\xe2\x80\x933, 2012. Zurich, Switzerland.\n\n## Authors\n\n* [Georgios Gousios](http://istlab.dmst.aueb.gr/~george) <gousiosg@gmail.com>\n* [Diomidis Spinellis](http://www.dmst.aueb.gr/dds) <dds@aueb.gr>\n\n## License\n\n[2-clause BSD](http://www.opensource.org/licenses/bsd-license.php)\n\n'