b'# <img align="right" src="static/logo.png"> Anaconda mode [![MELPA](https://melpa.org/packages/anaconda-mode-badge.svg)](https://melpa.org/#/anaconda-mode) [![MELPA Stable](https://stable.melpa.org/packages/anaconda-mode-badge.svg)](https://stable.melpa.org/#/anaconda-mode)\n\nCode navigation, documentation lookup and completion for Python.\n\n![Completion screenshot](static/completion.png)\n\n![Reference search screenshot](static/reference.png)\n\n## Features\n\nAnaconda mode provides the following features\n\n* context-sensitive code completion\n* jump to definitions\n* find references\n* view documentation\n* virtual environment\n* eldoc mode\n* all this stuff inside vagrant, docker and remote hosts\n\n## Supported Python Versions\n\n2.7, 3.4, 3.5, 3.6, 3.7\n\n## Installation\n\nTo use this package you need to install `setuptools`.\n\n#### package.el\n\nAll you need to do is install the package from\n[Melpa](https://melpa.org/)\n\n    M-x package-install RET anaconda-mode RET\n\n#### Manual\n\nClone this repository somewhere and add this directory to your\n`load-path`.\n\n#### Prelude\n\n`anaconda-mode` is included in the [Emacs\nPrelude](https://github.com/bbatsov/prelude) distribution.  You can\nuse it as well.  Look at the `prelude-python` module to see more\ndetails.\n\n#### Spacemacs\n\n`anaconda-mode` is included in the\n[Spacemacs](https://github.com/syl20bnr/spacemacs) distribution.  You\ncan use it as well.  Look at the `python` language layer to see more\ndetails.\n\n## Configuration\n\nYou can automatically enable `anaconda-mode` in all python buffers\nwith following code in your configuration:\n\n```lisp\n(add-hook \'python-mode-hook \'anaconda-mode)\n```\n\n#### ElDoc\n\n`anaconda-eldoc-mode` provide document function to `eldoc-mode` so\nwhen your point is between the parenthesis of a function call, its\nparameters are shown in the echo area. All You need is to enable\n`anaconda-eldoc-mode` in addition to the previous setup.\n\n```lisp\n(add-hook \'python-mode-hook \'anaconda-eldoc-mode)\n```\n\n## Usage\n\nTo start a completion press `C-M-i`.  This is the standard emacs\nbinding for `complete-at-point` function.  You can use\n[company-mode](http://company-mode.github.io/) with\n[company-anaconda](https://github.com/proofit404/company-anaconda)\nbackend to get more intelligent UI.\n\n#### Interactive commands\n\nHere is a list of interactive commands available with anaconda-mode\n\n|Keybinding  | Description                                 |\n|------------|---------------------------------------------|\n| C-M-i      | anaconda-mode-complete                      |\n| M-.        | anaconda-mode-find-definitions              |\n| C-x 4 .    | anaconda-mode-find-definitions-other-window |\n| C-x 5 .    | anaconda-mode-find-definitions-other-frame  |\n| M-=        | anaconda-mode-find-assignments              |\n| C-x 4 =    | anaconda-mode-find-assignments-other-window |\n| C-x 5 =    | anaconda-mode-find-assignments-other-frame  |\n| M-r        | anaconda-mode-find-references               |\n| C-x 4 r    | anaconda-mode-find-references-other-window  |\n| C-x 5 r    | anaconda-mode-find-references-other-frame   |\n| M-,        | xref-pop-marker-stack                       |\n| M-?        | anaconda-mode-show-doc                      |\n\nIf multiple candidates are found for definitions, assignments or\nusages, you\'ll see an advanced anaconda navigator buffer.\n\n#### PYTHONPATH\n\nYou can add your project to the Emacs `PYTHONPATH`.  If you store\nproject dependencies somewhere on your machine, you can add them as\nwell.\n\n```lisp\n(add-to-list \'python-shell-extra-pythonpaths "/path/to/the/project")\n(add-to-list \'python-shell-extra-pythonpaths "/path/to/the/dependency")\n```\n\n#### Virtual environment\n\nUse a virtual environment to isolate your project dependencies from\nothers on the system.  You can additionally install your project in an\neditable mode in the virtual environment.  This will improve search\nfunctionality.  Then activate this virtual environment inside Emacs.\n\n    M-x pythonic-activate RET /path/to/virtualenv RET\n\nAlso you can use\n[pyenv-mode](https://github.com/proofit404/pyenv-mode) or similar\npackage to hold virtual environment in actual state.\n\nEach action above applies to `anaconda-mode` immediately.  The next\n`anaconda-mode` command you call will use this environment for search\ncompletion candidates.\n\n#### Tramp\n\nIt\'s possible to use anaconda-mode on a remote server when you connect\nto it using tramp.  Anaconda-mode can search for completion candidates\nand all other stuff on remote server while you\'re running Emacs\nlocally.  Just open an interesting remote file.\n\n    C-x C-f /ssh:remote_host:project/__init__.py RET\n\nAfter tramp successfully connects and you see actual buffer content,\ncompletion and definitions search should work as usual.  You can even\nuse virtual environment from remote host.\n\n    M-x pythonic-activate RET /ssh:remote_host:/home/user/venv RET\n\nOr specify another remote interpreter\n\n```lisp\n(setq python-shell-interpreter "/usr/bin/python")\n```\n\nIt is important to remember that `remote_host` must be a real host\nname or an IP address.  SSH aliases not allowed to be used with\nanaconda-mode.  All kinds of searching from inside the virtual\nenvironment are available from any buffer.  However searching inside\nyour project is available only if you open it on the same machine as\nthe interpreter.\n\n#### Vagrant\n\nYou can get all the intelligent features of anaconda-mode with virtual\nenvironments deployed on your vagrant box. Fire up the vagrant machine\nas usual.  The easiest way to handle authentication is to copy your\npublic ssh key to the vagrant box.\n\n    ssh-copy-id vagrant@localhost -p 2222\n\nNow open your project inside the vagrant box.\n\n    C-x C-f /ssh:vagrant@localhost#2222:/vagrant/polls/views.py\n\nOptionally you can activate your project environment, if installed\ninside vagrant.\n\n    M-x pythonic-activate RET /ssh:vagrant@localhost#2222:/vagrant/polls/venv RET\n\n#### Docker\n\nYou can use definition, reference and auto-completion search for\ndependencies installed in the Docker container.  Let suppose your\nproject layout is the same as in [Compose and\nDjango](https://docs.docker.com/compose/django/) tutorial.  To use\n`anaconda-mode` together with Docker you need to install two\nadditional external dependencies.  First of all, you need to install\n[docker-tramp](https://github.com/emacs-pe/docker-tramp.el) Emacs\npackage.  The second step is to install Unix `socat` utility.  You\nshould have your containers up and running\n\n    docker-compose up web\n\nAfter that, you can set Python interpreter to one installed inside\ncontainer\n\n```lisp\n(setq python-shell-interpreter "/usr/local/bin/python")\n```\n\nNow you can open some file inside the project running inside a\ncontainer\n\n    C-x C-f /docker:root@django_web_1:/code/manage.py\n\nIf you try to find the definition of the Django module imported in\nthis buffer, `anaconda-mode` will jump to the package installed inside\nthis Docker container.\n\n## FAQ\n\nIf you see constant response reading error, try to change localhost\naddress from default `127.0.0.1` to `localhost`.  This is likely to\nfix problems on Mac OS.\n\n```lisp\n(setq anaconda-mode-localhost-address "localhost")\n```\n\n## Bug Reports\n\nPlease attach `*anaconda-mode*`, `*anaconda-response*` and\n`*anaconda-socat*` buffer content to every created issue.\n\n## Thanks\n\n* Dmitry Gutov **@dgutov**\n* Bo Lin **@sadboy**\n* Vasilij Schneidermann **@wasamasa**\n* Fredrik Bergroth **@fbergroth**\n* Fabio Corneti **@fabiocorneti**\n* Tom Davis **@tdavis**\n* Sviridov Alexander **@sviridov**\n* Mario Rodas **@marsam**\n'