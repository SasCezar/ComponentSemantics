b'# eslint\\_d\n\n[![Build Status]](https://travis-ci.org/mantoni/eslint_d.js)\n[![SemVer]](http://semver.org)\n[![License]](https://github.com/mantoni/eslint\\_d.js/blob/master/LICENSE)\n\nMakes [eslint][] the fastest linter on the planet.\n\n## "But eslint is pretty fast already, right?"\n\nYes, it\'s really fast. But the node.js startup time and loading all the\nrequired modules slows down linting times for a single file to ~700\nmilliseconds. `eslint_d` reduces this overhead by running a server in the\nbackground. It brings the linting time down to ~160 milliseconds. If you want\nto lint from within your editor whenever you save a file, `eslint_d` is for\nyou.\n\n## Install\n\nThis will install the `eslint_d` command globally:\n\n```bash\n$ npm install -g eslint_d\n```\n\n## Usage\n\nTo start the server and lint a file, just run:\n\n```bash\n$ eslint_d file.js\n```\n\nOn the initial call, the `eslint_d` server is launched and then the given file\nis linted. Subsequent invocations are super fast.\n\n## How does this work?\n\nThe first time you use `eslint_d`, a little server is started in the background\nand bound to a random port. The port number is stored along with [a\ntoken][change401] in `~/.eslint_d`. You can then run `eslint_d` commands the\nsame way you would use `eslint` and it will delegate to the background server.\nIt will load a [separate instance][change220] of eslint for each working\ndirectory to make sure settings are kept local. If eslint is found in the\ncurrent working directories `node_modules` folder, then this version of eslint\nis going to be used. Otherwise, the version of eslint that ships with\n`eslint_d` is used as a fallback.\n\nTo keep the memory footprint low, `eslint_d` keeps only the last 10 used\ninstances in the internal [nanolru][] cache.\n\n## What if eslint or a plugin is updated?\n\nThe cached version of eslint and the Node `require` cache for the current\nworking directory are cleared whenever a change to one of these files is\ndetected: `package.json`, `package-lock.json`, `npm-shrinkwrap.json` and\n`yarn.lock`. If changes are not automatically detected, remember to run\n`eslint_d restart` to bounce the background server.\n\n## Which versions of eslint are supported?\n\nAs of `v7.2.0`, you can use `eslint_d` with multiple projects depending on\ndifferent versions of eslint. Supported versions are 4.0+, 5.0+ and 6.0+.\n\n## Commands\n\nControl the server like this:\n\n```bash\n$ eslint_d <command>\n```\n\nAvailable commands:\n\n- `start`: start the server\n- `stop`: stop the server\n- `status`: print out whether the server is currently running\n- `restart`: restart the server\n- `[options] file.js [file.js] [dir]`: invoke `eslint` with the given options.\n  The `eslint` engine will be created in the current directory. If the server\n  is not yet running, it is started.\n\nType `eslint_d --help` to see the supported `eslint` options.\n\n`eslint_d` will select a free port automatically and store the port number\nalong with an access token in `~/.eslint_d`.\n\n## Editor integration\n\n### Linting\n\n- __Sublime__: Check out [SublimeLinter-contrib-eslint\\_d][SublimeLinter].\n- __Vim__: Install the [syntastic][] plugin, then make sure this is in your\n  `.vimrc`:\n\n    ```vim\n    let g:syntastic_javascript_checkers = [\'eslint\']\n    let g:syntastic_javascript_eslint_exec = \'eslint_d\'\n    ```\n\n- __WebStorm__: Configure your IDE to point to the `eslint_d` package instead\n  of `eslint`. In the ESLint configuration dialog, under \'ESLint package\',\n  select your `eslint_d` package.\n- __Atom__: You will not gain any performance from this module as it already\n  avoids starting a new node instance and uses the API directly (see [this\n  AtomLinter issue](https://github.com/AtomLinter/linter-eslint/issues/215)).\n- __Emacs__: Use [flycheck](http://www.flycheck.org/) with the\n  `javascript-eslint` checker:\n\n    ```elisp\n    (setq flycheck-javascript-eslint-executable "eslint_d")\n    ```\n\nIf you\'re using `eslint_d` in any other editor, please let us know!\n\n### Automatic Fixing\n\n`eslint_d` has an additional flag that `eslint` does not have,\n`--fix-to-stdout` which prints the fixed file to stdout. This allows editors to\nadd before save hooks to automatically fix a file prior to saving. It must be\nused with `--stdin`.\n\n- __Vim__: Add this to your `.vimrc` to lint the current buffer or visual\n  selection on `<leader>f`:\n\n    ```vim\n    " Autofix entire buffer with eslint_d:\n    nnoremap <leader>f mF:%!eslint_d --stdin --fix-to-stdout<CR>`F\n    " Autofix visual selection with eslint_d:\n    vnoremap <leader>f :!eslint_d --stdin --fix-to-stdout<CR>gv\n    ```\n\n- __Emacs__: See [eslintd-fix](https://github.com/aaronjensen/eslintd-fix)\n\n## Moar speed\n\nIf you\'re really into performance and want the lowest possible latency, talk to\nthe `eslint_d` server with netcat. This will also eliminate the node.js startup\ntime.\n\n```bash\n$ PORT=`cat ~/.eslint_d | cut -d" " -f1`\n$ TOKEN=`cat ~/.eslint_d | cut -d" " -f2`\n$ echo "$TOKEN $PWD file.js" | nc localhost $PORT\n```\n\nOr if you want to work with stdin:\n\n```bash\n$ echo "$TOKEN $PWD --stdin" | cat - file.js | nc localhost $PORT\n```\n\nThis runs `eslint` in under `50ms`!\n\n**Tip** For additional speed, did you know that you can lint only files that\nhave changed? This is a feature of normal `eslint`, but it also works from\n`eslint_d`. Run:\n\n```bash\n$ eslint_d . --cache\n```\n\n## References\n\nIf you\'re interested in building something similar to this: Most of the logic\nwas extracted to [core_d][], a library that manages the background server.\n\n## Compatibility\n\n- `8.0.0`: eslint 4.0+, 5.0+ and 6.0+, node 8, 10 and 12\n- `7.2.0`: eslint 4.0+ and 5.0+, node 6, 8 and 10\n- `7.0.0`: eslint 5.4+, node 6, 8 and 10\n- `6.0.0`: eslint 5.0+, node 6+ (eslint dropped node 4)\n- `5.0.0`: eslint 4.0+\n- `4.0.0`: eslint 3.0+, node 4+ (eslint dropped node 0.10 and 0.12)\n- `3.0.0`: eslint 2.2+\n- `1.0.0`, `2.0.0`: eslint 1.4+, node 4 (and probably older)\n\n## License\n\nMIT\n\n[Build Status]: https://img.shields.io/travis/mantoni/eslint_d.js/master.svg\n[SemVer]: https://img.shields.io/:semver-%E2%9C%93-brightgreen.svg\n[License]: https://img.shields.io/npm/l/eslint_d.svg\n[eslint]: https://eslint.org\n[SublimeLinter]: https://github.com/roadhump/SublimeLinter-contrib-eslint_d\n[syntastic]: https://github.com/scrooloose/syntastic\n[change220]: https://github.com/mantoni/eslint_d.js/blob/master/CHANGES.md#220\n[change401]: https://github.com/mantoni/eslint_d.js/blob/master/CHANGES.md#401\n[nanolru]: https://github.com/s3ththompson/nanolru\n[core_d]: https://github.com/mantoni/core_d.js\n'