b'![img](logo.png)\n\n<p align="center">\n<b><a href="#installation">Installation</a></b>\n|\n<b><a href="#usage">Usage</a></b>\n|\n<b><a href="#resource-fonts">Fonts</a></b>\n|\n<b><a href="#wiki">Wiki</a></b>\n</p>\n\n<p align="center">\n  <a href="https://melpa.org/#/all-the-icons"><img src="https://melpa.org/packages/all-the-icons-badge.svg"></a>\n  <a href="https://stable.melpa.org/#/all-the-icons"><img src="https://stable.melpa.org/packages/all-the-icons-badge.svg"></a>\n  <a href="https://github.com/domtronn/all-the-icons.el/releases"><img src="https://img.shields.io/github/tag/domtronn/all-the-icons.el.svg"></a>\n  <a href="https://travis-ci.org/domtronn/all-the-icons.el"><img src="https://travis-ci.org/domtronn/all-the-icons.el.svg?branch=master"></a>\n  <a href="https://github.com/domtronn/all-the-icons.el/blob/master/LICENSE"><img src="https://img.shields.io/github/license/mashape/apistatus.svg"></a>\n</p>\n\n# Installation\n\nYou should be able to install this package in the standard way, add it\nto the load path and then calling\n\n```el\n(require \'all-the-icons)\n;; or\n(use-package all-the-icons)\n```\n\n### Installing Fonts\n\nIn order for the icons to work it is **very important** that you install\nthe Resource Fonts included in this package, they are available in the\n[ `fonts` ](file:///fonts) directory. You can also install the *latest*\nfonts for this package in the *(guessed?)* based on the OS by calling\nthe following function;\n\n    M-x all-the-icons-install-fonts\n\nBear in mind, this will also run `fc-cache -f -v` on **MacOS** and\n**Linux** which *can take some time* to complete. For **Windows**, this\nfunction will prompt for a *download* directory for you to install\nthem manually.\n\n# Usage\n\nThe simplest usage for this package is to use the following functions;\n\n-   `all-the-icons-icon-for-buffer`\n-   `all-the-icons-icon-for-file`\n-   `all-the-icons-icon-for-mode`\n-   `all-the-icons-icon-for-url`\n\nWhich can be used to get a formatted icon which you can insert into\nbuffers, *e.g.*\n\n```el\n(insert (all-the-icons-icon-for-file "foo.js"))\n    ;; Inserts a javascript icon\n    ;; #("js-icon" 0 1 (display (raise -0.24) face (:family "alltheicon" :height 1.08 :foreground "#FFD446")))\n```\n\n## Inserting Icons Directly\n\nThe above is fine if you want this package to automatically decide on\nthe icon you want for files and things, however, to insert the icons\ndirectly you will want to use these icons functions;\n\n-   `all-the-icons-alltheicon`\n-   `all-the-icons-faicon`\n-   `all-the-icons-fileicon`\n-   `all-the-icons-oction`\n-   `all-the-icons-wicon`\n\nYou can then call these functions with the icon you want to insert,\n*e.g.*\n\n```el\n(all-the-icons-octicon "file-binary")  ;; GitHub Octicon for Binary File\n(all-the-icons-faicon  "cogs")         ;; FontAwesome icon for cogs\n(all-the-icons-wicon   "tornado")      ;; Weather Icon for tornado\n```\n\nA list of all the icon names for a font family can be found in the\n`data` directory, or by inspecting the alist variables.\n\nThe alist variables are all prefixed with\n\n-   `all-the-icons-data/`\n\nFor example `C-h v all-the-icons-data/ <TAB>` will give a list of all the data\nalist you can describe *(and the icon fonts they\'re associated with)*\n\n## Inserting icons with properties\n\nEach of the above icon functions can also be given different\nproperties to slightly adjust the way they\'re formatted, these are\n\n-   `:height` - The height of the icon\n-   `:v-adjust` - Vertical adjust (*positive is up, negative is down*)\n-   `:face` - The face to apply to the icon, defaults to `\\\'default`\n\nSo you would call, for example\n\n```el\n(all-the-icons-wicon "tornado" :face \'all-the-icons-blue)\n```\n\nThese properties can also be used on the `all-the-icons-icon-for-file`\nand `all-the-icons-icon-for-mode` functions as well, *i.e.*\n\n```el\n(insert (all-the-icons-icon-for-file "foo.js" :height 2 :face \'all-the-icons-lred))\n    ;; Inserts a RED Javascript icon with height 2\n    ;; #("js-icon" 0 1 (display (raise -0.24) face (:family "alltheicon" :height 2.0 :foreground "red")))\n```\n\n## Propertizing icons yourself\n\nHowever, sometimes when propertizing these icons *(for example if you\nwere customising your mode line)* you *may* sometimes have to know the\nfont family to add in to override the current font family being used,\n*e.g.*\n\n```el\n(propertize (all-the-icons-octicon "package")\n            \'face `(:family ,(all-the-icons-octicon-family) :height 1.2)\n            \'display \'(raise -0.1))\n```\n\n## Troubleshooting\n\nIf you see placeholders (AKA tofus) being rendered, or the wrong icons being displayed, the underlying cause generally falls into one of three categories:\n\n1. Font installation failed due to networking issues. Check your OS\' and Emacs\' networking (`M-x customize-group RET gnutls/nsm/url/network RET`) and security settings (i.e. proxy, firewall, antivirus software...)\n2. On \\*nix systems, make sure the font cache has been updated. `all-the-icons-install-fonts` should do this for you automatically, but sometimes it may fail due to misconfiguration.\n3. You\'ve misconfigured your font settings in Emacs.\n\nTo check if you\'ve misconfigured your Emacs font settings, you can try the following steps:\n\n1. Print out all of the icons in an icon set and their corresponding id/name.\n\n```el\n\n;; Valid font families are \'material \'wicon \'octicon \'faicon \'fileicon and \'alltheicon\n\n(all-the-icons-insert-icons-for \'alltheicon)   ;; Prints all the icons for `alltheicon\' font set\n\n(all-the-icons-insert-icons-for \'octicon 10)   ;; Prints all the icons for the `octicon\' family\n                                               ;; and makes the icons height 10\n\n(all-the-icons-insert-icons-for \'faicon 1 0.5) ;; Prints all the icons for the `faicon\' family\n                                               ;; and also waits 0.5s between printing each one\n```\n\n2. Now that you are certain which icon set is not displaying properly, check the fontset currently in effect.\n  * Look up the hex code of the icon from the `data/data-[font-family].el` file. Write it down.\n  * `M-x describe-fontset RET RET`\n  * Now you are looking at the fontset for the current frame, search for the hex range for that icon. Usually it\'s `#xE000`, or `#xF0` `#xF2`, but there are a few outside of these offsets.\n  * If you don\'t see the font family in question in the list of fontspecs (i.e. `[-*-file-icons-...]`) below the range, or some other fontspecs in front of the one in question, you will have to add the families back to the fontset (scroll to the top to see which one is in effect), or arrange the fontspec order. For example:\n  \n```elisp\n(set-fontset-font t \'unicode (font-spec :family "all-the-icons") nil \'append)\n(set-fontset-font t \'unicode (font-spec :family "file-icons") nil \'append)\n(set-fontset-font t \'unicode (font-spec :family "Material Icons") nil \'append)\n(set-fontset-font t \'unicode (font-spec :family "github-octicons") nil \'append)\n(set-fontset-font t \'unicode (font-spec :family "FontAwesome") nil \'append)\n(set-fontset-font t \'unicode (font-spec :family "Weather Icons") nil \'append)\n```  \n\n# Resource Fonts\n\nAll of the fonts provided in this packages as resources come with\neither the SIL Open Font License *(OFL)* or an MIT License, below I\nwill link to each of the fonts Sources and their Licenses.\n\n| Font Name | Font | License |\n| --- | --- | --- |\n| `file-icons.ttf` | [Atom File Icons Plugin](https://atom.io/packages/file-icons) | [MIT LICENSE](https://github.com/DanBrooker/file-icons/blob/master/LICENSE.md) |\n| `fontawesome.ttf` | [FontAwesome Icons](http://fontawesome.io/) | [SIL OFL LICENSE](https://github.com/FortAwesome/Font-Awesome#license) |\n| `ocitcons.ttf` | [GitHub OctIcons](http://octicons.github.com) | [SIL OFL LICENSE](https://github.com/primer/octicons/blob/master/LICENSE) |\n| `weathericons.ttf` | [Weather Icons](https://erikflowers.github.io/weather-icons/) | [SIL OFL LICENSE](https://github.com/primer/octicons/blob/master/LICENSE) |\n| `material-design-icons.ttf` | [Material Icons](http://google.github.io/material-design-icons/) | [APACHE LICENSE v2.0](http://www.apache.org/licenses/LICENSE-2.0.txt) |\n| `all-the-icons.ttf` | Custom Made Font | MIT LICENSE |\n\nThe fonts provided with this packages are locked down to a version for\nunicode character mapping values. In the future, these may be\nautomatically generated.\n\nI would like to thank all the authors for the creation and use\nof these fantastic fonts.\n\n# Wiki\n\nLastly, there is a\n[Wiki Page](https://github.com/domtronn/all-the-icons.el/wiki) which\nshould give you some ideas of ways to use this library to spruce up\nother Emacs packages.\n\n### Slow Rendering\n\nIf you experience a slow down in performance when rendering multiple\nicons simultaneously, you can try setting the following variable\n\n```el\n(setq inhibit-compacting-font-caches t)\n```\n\nSome people have found that this [fixes the problem](https://github.com/domtronn/all-the-icons.el/issues/28)\n\n[\xe2\x96\xb2 back to top](#readme)\n'