b'#+TITLE: Smart-mode-line [[http://melpa.org/#/smart-mode-line][file:http://melpa.org/packages/smart-mode-line-badge.svg]] [[http://melpa.org/#/smart-mode-line][file:http://stable.melpa.org/packages/smart-mode-line-badge.svg]]\n\n[[https://gratipay.com/Malabarba/][Contribute]]\n\nSmart Mode Line is a sexy mode-line for Emacs. It aims to be easy to\nread from small to large monitors by using /colors/, a /prefix feature/,\nand /smart truncation/.\n\n* Images\n\n*Dark Theme*\\\\\n[[https://raw.github.com/Malabarba/smart-mode-line/master/screenshot-2013-11-11-dark.png]]\n\n*Light Theme*\\\\\n[[https://raw.github.com/Malabarba/smart-mode-line/master/screenshot-2013-11-11-light.png]]\n\n*Atom-one Dark Theme*\\\\\n[[https://raw.github.com/Malabarba/smart-mode-line/master/screenshot-atom-one-dark.png]]\n\n(Note: to use the Atom-one theme, install the\n[[https://github.com/daviderestivo/smart-mode-line-atom-one-dark-theme][smart-mode-line-atom-one-dark-theme]]\npackage from MELPA)\n\n*Solarized Dark Theme*\\\\\n[[https://cloud.githubusercontent.com/assets/601365/7131638/34a3b0f8-e247-11e4-8fd5-811365167d22.png]]\n\n*Solarized Light Theme*\\\\\n[[https://cloud.githubusercontent.com/assets/601365/7131637/34946ac6-e247-11e4-8e0e-35a47df70686.png]]\n\n(Note: to use the Solarized themes, install the\n[[https://github.com/bbatsov/solarized-emacs/][solarized-theme]]\npackage from MELPA)\n\n*Powerline Theme*\\\\\n[[https://raw.github.com/Malabarba/smart-mode-line/master/screenshot-powerline-theme.png]]\n\n*Light Powerline Theme*\\\\\n[[https://raw.github.com/Malabarba/smart-mode-line/master/screenshot-light-powerline-theme.png]]\n\n(Note: to use either powerline theme, install the\n=smart-mode-line-powerline-theme= package from MELPA)\n\n* Installation\n\n*smart-mode-line* is available on Melpa, and that\'s the recommended\nway of installing it. If you do that, you can simply activate it with:\n\n#+BEGIN_SRC emacs-lisp\n    (sml/setup)\n#+END_SRC\n\nBy default, =sml= will try to figure out the best sml theme to go with\nyour Emacs theme. But if you want to chose the theme yourself, do one\nof the following BEFORE =sml/setup=:\n\n#+BEGIN_SRC emacs-lisp\n    (setq sml/theme \'dark)\n    (setq sml/theme \'light)\n    (setq sml/theme \'respectful)\n#+END_SRC\n\n**** Installation Issues (FAQ)\n\n-  *Problem:* If Emacs always warns you that /\xe2\x80\x9cLoading themes can\n    run lisp code\xe2\x80\x9d/ and keeps asking /\xe2\x80\x9cWould you like to mark this theme\n   as\n    safe for future sessions?\xe2\x80\x9d/. That is probably an issue with your\n    =init.el= or =.emacs= file, but we offer a workaround.\n-  *Workaround:* Add the following snippet before =sml/setup=\n\n   #+BEGIN_SRC emacs-lisp\n       (setq sml/no-confirm-load-theme t)\n   #+END_SRC\n\n-  *Proper Solution:* Make sure the =(custom-set-variables ...)= sexp\n    is at the very top of your =.emacs= file. That is the right place\n    for it. If that doesn\'t work, forget about smart-mode-line for a\n    moment and see if you have the same problem with other themes\n    installed from Melpa.\n\n* Features\n\nIts main features include:\n\n- Color coded ::\n   Highlights the most important information for you\n   (buffer name, modified state, line number). Don\'t\n   like the colors? See item /5./!\n\n- Fixed width (if you want) ::\n   Lets you set a maximum width for the path name and mode names, and\n   truncates them intelligently (truncates the directory, not the\n   buffer name). Also let\'s you *right indent* strings in the\n   mode-line (see =sml/mode-width=).\n\n- Directory as Prefixes ::\n   Prefix feature saves a LOT of space. e.g. =~/.emacs.d/=\n   is translated to =:ED:= in the path (open a file inside\n   this folder to see it in action). Long path names you\n   are commonly working on are displayed as short\n   abbreviations. Set your own prefixes to make best use\n   of it (by configuring =sml/replacer-regexp-list=). Mousing\n   over the abbreviated path will show you the full\n   path. See below for examples.\n\n- Hide or Highlight minor-modes ::\n   The [[https://github.com/Malabarba/rich-minority][rich-minority]]\n   package saves even more space. Select which minor modes you don\'t\n   want to see listed by adding them to the variable\n   =rm-blacklist=, or even highlight the modes that are more\n   important with the variable =rm-text-properties=. This will filter\n   out the modes you don\'t care about and unclutter the modes list\n   (mousing over the modes list still shows the full list).\n\n- Very easy to configure ::\n   All colors and variables are customizable. You can change the\n   whole theme with =sml/apply-theme=, or just customize anything\n   manually with =sml/customize= and =sml/customize-faces=. There are\n   /DOZENS/ of variables to customize your mode-line, just pop over\n   there and have a look!\n\n- Compatible with absolutely anything ::\n   I\'m serious. Versions 2.0 and above should be compatible with\n   *any* other packages that display information in the mode-line\n   (evil, nyan-mode, elscreen, display-battery-mode, etc). If you\n   find /ANYTHING/ that does not appear as it should, file a bug report\n   and I\'ll get to it.\n\n* Important Variables:\n\nAll variables can be edited by running =sml/customize=, and the\ndocumentations are mostly self explanatory, I list here only the\nmost important ones.\n\n1. =sml/theme=\\\\\n    Choose what theme you want to use for the mode-line colors. For now\n    there are 3 different themes: =dark=, =light=, and =respectful=.\n\n2. =sml/shorten-directory= and =sml/shorten-modes=\\\\\n    Setting both of these to =t= guarantees a fixed width mode-line\n    (directory name and minor-modes list will be truncated to fit). To\n    actually define the width, see below.\n\n3. =sml/name-width= and =sml/mode-width=\\\\\n    Customize these according to the width of your emacs frame. I set\n    them to =40= and =full= respectively, and the mode-line fits\n    perfectly when the frame is split in two even on my laptop\'s small\n    17" monitor. =full= means everything after the minor-modes will be\n    right-indented.\n\n4. =sml/replacer-regexp-list=\\\\\n    This variable is a list of (REGEXP REPLACEMENT) that is used\n    to parse the path. The replacements are applied\n    sequentially. This allows you to greatly abbreviate the path\n    that\'s shown in the mode-line. If this abbreviation is of\n    the form =:SOMETHING:=, it is considered a prefix and get\'s\n    a different color (you can change what\'s considered a prefix\n    by customizing =sml/prefix-regexp=).\n    For example, if you do a lot of work on a folder called\n    =~/Dropbox/Projects/In-Development/= almost half the\n    mode-line would be occupied just by the folder name, which\n    is much less important than the buffer name. But, you can\'t\n    just hide the folder name, since editting a file in\n    =~/Dropbox/Projects/In-Development/Source= is VERY different\n    from editting a file in =~/Dropbox/Projects/Source=. By\n    setting up a prefix for your commonly used folders, you get\n    all that information without wasting all that space. In this\n    example you could set the replacement to =:ProjDev:= or just\n    =:InDev:=, so the path shown in the mode-line will be\n    =:ProjDev:Source/= (saves a lot of space without hiding\n    information).\n\nSome abbreviations are defined out of the box, for instance /(see the\ndocumentation for a complete list)/:\n\n#+BEGIN_SRC emacs-lisp\n    ("^~/\\\\.emacs\\\\.d/" ":ED:")\n    ("^/sudo:.*:" ":SU:")\n    ("^~/Documents/" ":Doc:")\n    ("^~/Dropbox/" ":DB:")\n#+END_SRC\n\nYou can stack abbreviations sequentially, by adding them in order:\n\n#+BEGIN_SRC emacs-lisp\n    (add-to-list \'sml/replacer-regexp-list \'("^~/Git-Projects/" ":Git:") t)\n    (add-to-list \'sml/replacer-regexp-list \'("^:Git:\\(.*\\)/src/main/java/" ":G/\\1/SMJ:") t)\n#+END_SRC\n\nNote the =t= option ensures that your customizations are added to the\nend of the list, which ensures that the second one is applied\n*after* the first.\n\nHowever, if you want to override one of the pre-defined abbreviations\nwith your own definition you need to add it to the start of the list\n(note the omitted =t=):\n\n#+BEGIN_SRC emacs-lisp\n    (add-to-list \'sml/replacer-regexp-list \'("^~/Dropbox/" ":DBox:"))\n#+END_SRC\n\nIn order to use more complex transformations (like upcasing), you\'ll\nneed to write a more complex\nreplacement. The second argument needs to be a function that accepts the\nmatched string as its\nargument and returns the replacement string. You can access matched data\nwith the =match-string=\nfunction as explained\n[[https://www.gnu.org/software/emacs/manual/html_node/elisp/Simple-Match-Data.html#Simple-Match-Data][in\nthe manual.]] For example, for using the upcased project name (assuming\nthe project is in the =~/Projects= directory:\n\n#+BEGIN_SRC emacs-lisp\n(add-to-list \'sml/replacer-regexp-list\n             \'("^~/Projects/\\\\(\\\\w+\\\\)/"\n               (lambda (s) (concat ":" (upcase (match-string 1 s)) ":")))\n             t)\n#+END_SRC\n\n* Contributing\n\n[[https://gratipay.com/Malabarba][file:https://cdn.rawgit.com/gratipay/gratipay-badge/2.1.3/dist/gratipay.png]]\n\n\n'