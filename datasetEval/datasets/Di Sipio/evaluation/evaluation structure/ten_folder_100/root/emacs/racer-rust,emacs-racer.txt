b'# Racer for Emacs\n[![MELPA](http://melpa.org/packages/racer-badge.svg)](http://melpa.org/#/racer)\n[![MELPA Stable](http://stable.melpa.org/packages/racer-badge.svg)](http://stable.melpa.org/#/racer)\n[![Build Status](https://travis-ci.org/racer-rust/emacs-racer.svg?branch=master)](https://travis-ci.org/racer-rust/emacs-racer)\n[![Coverage Status](https://coveralls.io/repos/github/racer-rust/emacs-racer/badge.svg?branch=master)](https://coveralls.io/github/racer-rust/emacs-racer?branch=master)\n\nThis is the official Emacs package for\n[Racer](http://github.com/phildawes/racer).\n\n<!-- markdown-toc start - Don\'t edit this section. Run M-x markdown-toc-generate-toc again -->\n**Table of Contents**\n\n- [Racer for Emacs](#racer-for-emacs)\n    - [Completion](#completion)\n    - [Find Definitions](#find-definitions)\n    - [Describe Functions and Types](#describe-functions-and-types)\n    - [Installation](#installation)\n        - [Testing your setup](#testing-your-setup)\n    - [Tests](#tests)\n\n<!-- markdown-toc end -->\n\n## Completion\n\nracer.el supports code completion of variables, functions and modules.\n\n![racer completion screenshot](images/racer_completion.png)\n\nYou can also press <kbd>F1</kbd> to pop up a help buffer for the current\ncompletion candidate.\n\nNote that due to a\n[limitation of racer](https://github.com/phildawes/racer/issues/389),\nracer.el cannot offer completion for macros.\n\n## Find Definitions\n\nracer.el can jump to definition of functions and types.\n\n![racer go to definition](images/racer_goto.gif)\n\nYou can use <kbd>M-.</kbd> to go to the definition, and <kbd>M-,</kbd>\nto go back.\n\n## Describe Functions and Types\n\nracer.el can show a help buffer based on the docstring of the thing at\npoint.\n\n![racer completion screenshot](images/racer_help.png)\n\nUse <kbd>M-x racer-describe</kbd> to open the help buffer.\n\n## Installation\n\n1. You will need to use a nightly version of rust.\n   If you\'re using rustup, run\n   ```\n   $ rustup toolchain add nightly\n   ```\n\n2. Install [Racer](http://github.com/phildawes/racer) and download the\n   source code of Rust:\n\n   ```\n   $ rustup component add rust-src\n   $ cargo +nightly install racer\n   ```\n\n3. Allow Emacs to install packages from MELPA:\n\n   ```el\n   (require \'package)\n   (add-to-list \'package-archives \'("melpa" . "https://melpa.org/packages/"))\n   ```\n\n4. Install the Emacs package for Racer: `M-x package-install RET racer RET`\n\n5. Configure Emacs to activate racer when rust-mode starts:\n   ```el\n   (add-hook \'rust-mode-hook #\'racer-mode)\n   (add-hook \'racer-mode-hook #\'eldoc-mode)\n   ```\n\n   For completions, install company with `M-x package-install RET company RET`. A sample configuration:\n   ```el\n\n   (add-hook \'racer-mode-hook #\'company-mode)\n\n   (require \'rust-mode)\n   (define-key rust-mode-map (kbd "TAB") #\'company-indent-or-complete-common)\n   (setq company-tooltip-align-annotations t)\n   ```\n   For automatic completions, customize `company-idle-delay` and\n   `company-minimum-prefix-length`.\n\n   Racer process may be slow to respond for instance when indexing. You can\n   customize `racer-command-timeout` and `racer-eldoc-timeout` to avoid rendering\n   your Emacs session unresponsive. Eldoc timeout should be on the lower side and\n   defaults to 0.5 seconds. You can probably tweak it down on a fast machine.\n   Timeout of `nil` will wait indefinitely.\n\n### Testing your setup\n\nTo test **completion**: Open a rust file and try typing ```use\nstd::io::B``` and press <kbd>TAB</kbd>.\n\nTo test **go to definition**: Place your cursor over a symbol and press\n`M-.` to jump to its definition.\n\nPress `C-x 4 .` to jump to its definition in another window.\n\nPress `C-x 5 .` to jump to its definition in another frame.\n\nPress `M-,` to jump back to the previous cursor location.\n\n\nIf **it doesn\'t work**, try `M-x racer-debug` to see what command was\nrun and what output was returned.\n\n## Tests\n\nracer.el includes tests. To run them, you need to install\n[Cask](https://github.com/cask/cask), then:\n\n```\n$ cask install\n$ cask exec ert-runner\n```\n'