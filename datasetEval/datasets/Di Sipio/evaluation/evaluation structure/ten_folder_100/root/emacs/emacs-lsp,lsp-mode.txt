b'[[https://melpa.org/#/lsp-mode][file:https://melpa.org/packages/lsp-mode-badge.svg]]\n[[https://stable.melpa.org/#/lsp-mode][file:https://stable.melpa.org/packages/lsp-mode-badge.svg]]\n[[https://gitter.im/emacs-lsp/lsp-mode][file:https://badges.gitter.im/emacs-lsp/lsp-mode.svg]]\n[[https://travis-ci.org/emacs-lsp/lsp-mode][file:https://travis-ci.org/emacs-lsp/lsp-mode.svg?branch=master]]\n\n#+ATTR_HTML: align="center"; margin-right="auto"; margin-left="auto"\n[[examples/logo.png]]\n\n* Language Server Protocol Support for Emacs\n  #+caption: LSP mode\n  [[file:examples/head.png]]\n\n** Table of Contents                                      :TOC_4_gh:noexport:\n- [[#language-server-protocol-support-for-emacs][Language Server Protocol Support for Emacs]]\n  - [[#why][Why?]]\n  - [[#overview][Overview]]\n  - [[#installation][Installation]]\n    - [[#install-via-melpa][Install via melpa]]\n  - [[#configuration][Configuration]]\n    - [[#install-language-server][Install language server]]\n    - [[#configure-lsp-mode][Configure lsp-mode]]\n      - [[#vanilla-emacs][Vanilla Emacs]]\n      - [[#spacemacs][Spacemacs]]\n      - [[#use-package][use-package]]\n      - [[#docker][Docker]]\n    - [[#how-does-it-work][How does it work?]]\n  - [[#supported-languages][Supported languages]]\n  - [[#commands][Commands]]\n  - [[#settings][Settings]]\n  - [[#screenshots][Screenshots]]\n  - [[#extensions][Extensions]]\n    - [[#tramp][TRAMP]]\n      - [[#how-does-it-work-1][How does it work?]]\n      - [[#sample-configuration][Sample configuration]]\n      - [[#dealing-with-stderr][Dealing with stderr]]\n  - [[#limitations][Limitations]]\n    - [[#file-watches][File watches]]\n  - [[#contributions][Contributions]]\n    - [[#members][Members]]\n  - [[#troubleshooting][Troubleshooting]]\n  - [[#adding-support-for-languages][Adding support for languages]]\n    - [[#registering-server][Registering server]]\n    - [[#sections][Sections]]\n  - [[#faq][FAQ]]\n  - [[#see-also][See also]]\n\n** Why?\n   - \xe2\x9d\xa4\xef\xb8\x8f *Community Driven*\n   - \xf0\x9f\x92\x8e *Fully featured* - supports LSP core and Language Server non-standard extensions\n   - \xf0\x9f\x9a\x80 *Easy to configure* - works out of the box and automatically upgrades if additional packages are present\n   - \xf0\x9f\x8c\x9f *Flexible* - could be configured as full-blown IDE with flashy UI or minimal distraction free\n** Overview\n   Client for [[https://github.com/Microsoft/language-server-protocol/][Language Server Protocol]] (v3.14). [[https://github.com/emacs-lsp/lsp-mode][lsp-mode]] aims to provide IDE-like experience by providing optional integration with the most popular Emacs packages like ~company~, ~flycheck~ and ~projectile~.\n\n   - Non-blocking asynchronous calls\n   - Real-time Diagnostics/linting (via builtin ~flymake~ when Emacs > 26 or [[https://github.com/flycheck/flycheck][flycheck]]/[[https://github.com/emacs-lsp/lsp-ui][lsp-ui]])\n   - Code completion - using [[https://github.com/tigersoldier/company-lsp][company-lsp]] or builtin ~completion-at-point~\n   - Hovers - using [[https://github.com/emacs-lsp/lsp-ui][lsp-ui]]\n   - Code actions - using ~lsp-execute-code-action~ or [[https://github.com/emacs-lsp/lsp-ui][lsp-ui]]\n   - Code outline - using builtin [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Imenu.html][imenu]] or ~helm-imenu~\n   - Code navigation - using builtin [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Xref.html][xref]]\n   - Code lens (references/implementations) - using builtin [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Xref.html][xref]]\n   - Highlights\n   - Formatting\n   - Debugger - [[https://github.com/yyoncho/dap-mode/][dap-mode]]\n   - Helm integration - [[https://github.com/emacs-lsp/helm-lsp/][helm-lsp]]\n   - Ivy integration - [[https://github.com/emacs-lsp/lsp-ivy/][lsp-ivy]]\n   - Treemacs integration - [[https://github.com/emacs-lsp/lsp-treemacs][lsp-treemacs]]\n   - Semantic highlighting (as currently implemented by JDT LS and unreleased builds of clangd, cf. [[https://github.com/microsoft/vscode-languageserver-node/pull/367][Semantic highlighting spec]])\n** Installation\n*** Install via melpa\n    The recommended way to install ~lsp-mode~ is via ~package.el~ - the built-in package manager in Emacs. ~lsp-mode~ is available on the two major ~package.el~ community maintained repos - [[http://stable.melpa.org][MELPA Stable]] and [[http://melpa.org][MELPA]].\n\n    M-x ~package-install~ [RET] ~lsp-mode~ [RET]\n** Configuration\n*** Install language server\n    Check the table bellow with the list of supported servers and the corresponding instructions on how to install the server.\n*** Configure lsp-mode\n**** Vanilla Emacs\n     You could go minimal and use ~lsp-mode~ as it is without external packages with the built-in ~flymake~ and ~completion-at-point~ or you could install the following extensions for better experience:\n     - install [[https://github.com/emacs-lsp/lsp-ui][lsp-ui]] for [[https://github.com/flycheck/flycheck][flycheck]] integration and higher level UI modules.\n     - install [[https://github.com/tigersoldier/company-lsp][company-lsp]] if you want to use ~company-mode~ for completion.\n     - install [[https://github.com/emacs-lsp/lsp-treemacs][lsp-treemacs]] for project wide error overview.\n     - install [[https://github.com/emacs-lsp/helm-lsp][helm-lsp]] provides on type completion for =xref-apropos=.\n     - install [[https://github.com/emacs-lsp/dap-mode][dap-mode]] if your language is supported by the debugger.\n     #+BEGIN_SRC emacs-lisp\n       (require \'lsp-mode)\n       (add-hook \'XXX-mode-hook #\'lsp)\n     #+END_SRC\n     where ~XXX~ could be major mode like ~python~, ~java~, ~c++~. Alternatively, if you want to minimize you configuration you may use ~prog-mode-hook~. In case you do that, ~lsp~ will try to start for each programming mode and echo a message when there is no client registered for the current mode or if the corresponding server is not present. In addition, ~lsp-mode~ will automatically detect and configure [[https://github.com/emacs-lsp/lsp-ui][lsp-ui]] and [[https://github.com/tigersoldier/company-lsp][company-lsp]]. To turn off that behavior you could set ~lsp-auto-configure~ to ~nil~.\n\n     To defer LSP server startup (and DidOpen notifications) until the buffer is visible you can use ~lsp-deferred~ instead of ~lsp~:\n     #+BEGIN_SRC emacs-lisp\n       (add-hook \'XXX-mode-hook #\'lsp-deferred)\n     #+END_SRC\n**** Spacemacs\n     [[https://github.com/emacs-lsp/lsp-mode][lsp-mode]] is included in spacemacs develop branch. Add ~lsp~ to ~dotspacemacs-configuration-layers~ and configure the language that you want to use to be backed by ~lsp~ backend.\n**** use-package\n     Replace ~(require \'lsp-mode)~ with the following if you use use-package.\n     #+BEGIN_SRC emacs-lisp\n       (use-package lsp-mode\n         :hook (XXX-mode . lsp)\n         :commands lsp)\n\n       ;; optionally\n       (use-package lsp-ui :commands lsp-ui-mode)\n       (use-package company-lsp :commands company-lsp)\n       (use-package helm-lsp :commands helm-lsp-workspace-symbol)\n       (use-package lsp-treemacs :commands lsp-treemacs-errors-list)\n       ;; optionally if you want to use debugger\n       (use-package dap-mode)\n       ;; (use-package dap-LANGUAGE) to load the dap adapter for your language\n     #+END_SRC\n\n     To defer LSP server startup (and DidOpen notifications) until the buffer is visible you can use ~lsp-deferred~ instead of ~lsp~:\n     #+BEGIN_SRC emacs-lisp\n       (use-package lsp-mode\n         :hook (XXX-mode . lsp-deferred)\n         :commands (lsp lsp-deferred))\n     #+END_SRC\n**** Docker\n     Refer to [[https://github.com/emacs-lsp/lsp-docker/][lsp-docker]] README which provide a guide how you can run =lsp-mode= in =docker= container.\n*** How does it work?\n    ~lsp-mode~ has predefined list of server configurations (loaded in ~lsp-clients.el~) containing a mapping from ~major-mode~ to the server configuration or by using activation function. In addition to the default server configuration located in ~lsp-clients.el~ there are few languages servers which require separate package(check [[#supported-languages][Supported languages]]). When you open a file from a particular project ~lsp-mode~ and call ~lsp~ command ~lsp-mode~ will look for server registrations able to handle current file. If there is such client ~lsp-mode~ will look for the project root. If you open a file from the project for the first time you will be prompted to define the current project root. Once the project root is selected it is saved in ~lsp-session~ file and it will be loaded the next time you start Emacs so you no longer will be asked for a project root when you open a file from that project. Later if you want to change the project root you may use ~lsp-workspace-folder-remove~ to remove the project and call ~lsp-workspace-folder-add~ to add the root. If you want to force starting a particular language server in a file you may use ~C-u~ ~M-x~ ~lsp~ which will prompt you to select language server to start.\n** Supported languages\n   Some of the servers are directly supported by ~lsp-mode~ by requiring\n   ~lsp-clients.el~ while others require installing additional packages which provide\n   server specific functionality.\n\n   | Language              | Language Server                               | Built-in       | Installation command                                                                                    | Debugger                     |\n   |-----------------------+-----------------------------------------------+----------------+---------------------------------------------------------------------------------------------------------+------------------------------|\n   | Ada                   | [[https://github.com/AdaCore/ada_language_server][ada_language_server]]                           | Yes            | [[https://github.com/AdaCore/ada_language_server#install][Installation instructions]]                                                                               | Yes (gdb)                    |\n   | Angular               | [[https://github.com/angular/vscode-ng-language-service/][vscode-ng-language-service]]                    | Yes            | [[https://github.com/emacs-lsp/lsp-mode/wiki/Install-Angular-Language-server][Installation instructions]]                                                                               | Not relevant                 |\n   | Bash                  | [[https://github.com/mads-hartmann/bash-language-server][bash-language-server]]                          | Yes            | npm i -g bash-language-server                                                                           |                              |\n   | C++                   | [[https://github.com/MaskRay/ccls][ccls]]                                          | [[https://github.com/MaskRay/emacs-ccls][emacs-ccls]]     | [[https://github.com/MaskRay/ccls][ccls]]                                                                                                    | Yes (gdb or lldb)            |\n   | C++                   | [[https://clang.llvm.org/extra/clangd.html][clangd]]                                        | Yes            | [[https://clang.llvm.org/extra/clangd.html][clangd]]                                                                                                  | Yes (gdb or lldb)            |\n   | C++                   | [[https://github.com/cquery-project/cquery][cquery]]                                        | [[https://github.com/cquery-project/emacs-cquery][emacs-cquery]]   | [[https://github.com/cquery-project/cquery][cquery]]                                                                                                  | Yes (gdb or lldb)            |\n   | C#                    | [[https://github.com/OmniSharp/omnisharp-roslyn][OmniSharp-Roslyn]]                              | Yes            | [[https://github.com/OmniSharp/omnisharp-roslyn][OmniSharp-Roslyn]]                                                                                        | No                           |\n   | Clojure               | [[https://github.com/snoe/clojure-lsp][clojure-lsp]]                                   | Yes            | [[https://github.com/snoe/clojure-lsp][clojure-lisp]]                                                                                            |                              |\n   | CSS/LessCSS/SASS/SCSS | [[https://github.com/vscode-langservers/vscode-css-languageserver-bin][css]]                                           | Yes            | npm install -g vscode-css-languageserver-bin                                                            |                              |\n   | Dart                  | [[https://github.com/dart-lang/sdk/blob/master/pkg/analysis_server/tool/lsp_spec/README.md][dart_analysis_server]]                          | Yes            | built into dart-sdk                                                                                     |                              |\n   | Dockerfile            | [[https://github.com/rcjsuen/dockerfile-language-server-nodejs][dockerfile-language-server-nodejs]]             | Yes            | npm install -g dockerfile-language-server-nodejs                                                        |                              |\n   | Dart                  | [[https://github.com/natebosch/dart_language_server][dart_language_server]]                          | Yes            | pub global activate dart_language_server                                                                |                              |\n   | Elixir                | [[https://github.com/JakeBecker/elixir-ls][elixir-ls]]                                     | Yes            | [[https://github.com/JakeBecker/elixir-ls][elixir-ls]]                                                                                               | Yes                          |\n   | Elm                   | [[https://github.com/elm-tooling/elm-language-server][elmLS]]                                         | Yes            | npm i -g @elm-tooling/elm-language-server, or clone the repository and follow installation instructions | No                           |\n   | Erlang                | [[https://github.com/erlang-ls/erlang_ls][erlang_ls]]                                     | Yes            | [[https://github.com/erlang-ls/erlang_ls][erlang_ls]]                                                                                               |                              |\n   | F#                    | [[https://github.com/fsharp/FsAutoComplete][fsautocomplete]]                                | Yes            | Automatic by [[https://github.com/emacs-lsp/lsp-mode/blob/master/lsp-fsharp.el][lsp-fsharp]]                                                                                 | No                           |\n   | Fortran               | [[https://github.com/hansec/fortran-language-server][fortran-language-server]]                       | Yes            | pip install fortran-language-server                                                                     | Yes                          |\n   | Go                    | [[https://github.com/golang/tools/tree/master/gopls][gopls]]                                         | Yes            | ~go get golang.org/x/tools/gopls@latest~ [[https://github.com/golang/tools/blob/master/gopls/doc/user.md#installation][docs]]                                                     | Yes                          |\n   | Go                    | [[https://github.com/saibing/bingo][bingo]]                                         | Yes            | [[https://github.com/saibing/bingo/wiki/Install][bingo]]                                                                                                   | Yes                          |\n   | Groovy                | [[https://github.com/palantir/language-servers][groovy-language-server]]                        | Yes            | [[https://github.com/palantir/language-servers][groovy-language-server]]                                                                                  |                              |\n   | Hack                  | [[https://docs.hhvm.com/hhvm/][hhvm]]                                          | Yes            | [[https://docs.hhvm.com/hhvm/installation/introduction][hhvm]]                                                                                                    |                              |\n   | HTML                  | [[https://github.com/vscode-langservers/vscode-html-languageserver][html]]                                          | Yes            | npm install -g vscode-html-languageserver-bin                                                           |                              |\n   | Haskell               | [[https://github.com/haskell/haskell-ide-engine][IDE engine]]                                    | [[https://github.com/emacs-lsp/lsp-haskell][lsp-haskell]]    | [[https://github.com/haskell/haskell-ide-engine][IDE engine]]                                                                                              |                              |\n   | Lua                   | [[https://github.com/EmmyLua/EmmyLua-LanguageServer][EmmyLua]]                                       | Yes            | [[https://github.com/emacs-lsp/lsp-mode/wiki/Install-EmmyLua-Language-server][Installation]]                                                                                            |                              |\n   | Java                  | [[https://github.com/eclipse/eclipse.jdt.ls][Eclipse JDT LS]]                                | [[https://github.com/emacs-lsp/lsp-java][lsp-java]]       | Automatic by [[https://github.com/emacs-lsp/lsp-java][lsp-java]]                                                                                   | Yes                          |\n   | JavaScript/TypeScript | [[https://github.com/theia-ide/typescript-language-server][typescript-language-server]]  (recommended)     | Yes            | npm i -g typescript-language-server; npm i -g typescript                                                | Yes (Firefox/Chrome)         |\n   | JavaScript/TypeScript | [[https://github.com/sourcegraph/javascript-typescript-langserver][javascript-typescript-stdio]]                   | Yes            | npm i -g javascript-typescript-langserver                                                               | Yes (Firefox/Chrome)         |\n   | JavaScript Flow       | [[https://flow.org][flow]] (add-on if working on a Flow file)       | Yes            | [[https://flow.org][flow]]                                                                                                    | Yes (Firefox/Chrome)         |\n   | Julia                 | [[https://github.com/non-Jedi/lsp-julia][lsp-julia]]                                     | [[https://github.com/non-Jedi/lsp-julia][lsp-julia]]      | [[https://github.com/JuliaEditorSupport/LanguageServer.jl][LanguageServer.jl]]                                                                                       |                              |\n   | Kotlin                | [[https://github.com/fwcd/KotlinLanguageServer][kotlin-language-server]]                        | Yes            | [[https://github.com/fwcd/KotlinLanguageServer][kotlin-language-server]]                                                                                  |                              |\n   | OCaml                 | [[https://github.com/freebroccolo/ocaml-language-server][ocaml-language-server]]                         | Yes            | [[https://github.com/freebroccolo/ocaml-language-server][ocaml-language-server]]                                                                                   |                              |\n   | OCaml                 | [[https://github.com/merlin/ocaml][merlin]]                                        | Yes            | [[https://github.com/ocaml/merlin][merlin]]                                                                                                  |                              |\n   | PHP(recommended)      | [[https://github.com/bmewburn/vscode-intelephense][intelephense]]                                  | Yes            | npm i intelephense -g                                                                                   | Yes                          |\n   | PHP                   | [[https://github.com/felixfbecker/php-language-server][php-language-server]]                           | Yes            | [[https://github.com/felixfbecker/php-language-server][php-language-server]]                                                                                     | Yes                          |\n   | Powershell            | [[https://github.com/PowerShell/PowerShellEditorServices][PowerShellEditorServices]]                      | Yes            | Automatic                                                                                               | Yes                          |\n   | Python                | [[https://github.com/palantir/python-language-server][pyls]]                                          | Yes            | pip install \'python-language-server[all]\'                                                               | Yes                          |\n   | Python(Microsoft)     | [[https://github.com/Microsoft/python-language-server][Microsoft Python Language Server]]              | [[https://github.com/andrew-christianson/lsp-python-ms/][lsp-python-ms]]  | [[https://github.com/andrew-christianson/lsp-python-ms/][lsp-python-ms]]                                                                                           | Yes                          |\n   | R                     | [[https://github.com/REditorSupport/languageserver][languageserver]]                                | Yes            | [[https://github.com/andrew-christianson/lsp-python-ms/][languageserver]]                                                                                          | No                           |\n   | Ruby                  | [[https://github.com/castwide/solargraph][solargraph]]                                    | Yes            | gem install solargraph                                                                                  | Yes                          |\n   | Rust                  | [[https://github.com/rust-lang-nursery/rls][rls]]                                           | Yes            | [[https://github.com/rust-lang-nursery/rls][rls]]                                                                                                     | Yes                          |\n   | Rust                  | [[https://github.com/rust-analyzer/rust-analyzer][rust-analyzer]]                                 | Yes            | [[https://github.com/rust-analyzer/rust-analyzer#language-server-quick-start][rust-analyzer]]                                                                                           |                              |\n   | Scala                 | [[https://scalameta.org/metals][Metals]]                                        | Yes            | [[https://scalameta.org/metals/docs/editors/emacs.html][Metals]]                                                                                                  |                              |\n   | Swift                 | [[https://github.com/apple/sourcekit-lsp][sourcekit-LSP]]                                 | [[https://github.com/emacs-lsp/lsp-sourcekit][lsp-sourcekit]]  | [[https://github.com/apple/sourcekit-lsp][sourcekit-LSP]]                                                                                           | Yes (via llvm debug adapter) |\n   | Terraform             | [[https://github.com/juliosueiras/terraform-lsp][terraform-lsp]] | No             | Git clone outside of ~$GOPATH~; go install. (Requires go > 1.11)                                          | No                           |\n   | TeX, LaTeX, etc.      | [[https://github.com/astoff/digestif][Digestif]]                                      | Yes            | luarocks install --server=http://luarocks.org/dev digestif                                              |                              |\n   | VHDL                  | [[http://www.vhdltool.com][VHDL Tool]]                                     | Yes            | Download from http://www.vhdltool.com/download                                                          | No                           |\n   | Vimscript             | [[https://github.com/iamcco/vim-language-server][vim-language-server]]                           | Yes            | npm install -g vim-language-server                                                                      | n/a                          |\n   | Vue                   | [[https://github.com/vuejs/vetur/tree/master/server][vue-language-server]]                           | Yes            | npm install -g vue-language-server                                                                      | Yes (Firefox/Chrome)         |\n   | XML                   | [[https://github.com/angelozerr/lsp4xml][lsp4xml]]                                       | Yes            | Download from [[https://github.com/angelozerr/lsp4xml/releases][lsp4xml releases]]                                                                          |                              |\n   | YAML                  | [[https://github.com/redhat-developer/yaml-language-server][yaml]]                                          | Yes            | npm install -g yaml-language-server                                                                     |                              |\n** Commands\n   - ~lsp-describe-session~ - Display session folders and running servers.\n   - ~lsp-describe-thing-at-point~ - Display help for the thing at point.\n   - ~lsp-execute-code-action~ - Execute code action\n   - ~lsp-format-buffer~ - Format current buffer\n   - ~lsp-organize-imports~ - Organize library imports\n   - ~lsp-goto-implementation~ - Go to implementation\n   - ~lsp-goto-type-definition~ - Go to type definition\n   - ~lsp-rename~ - Rename symbol at point\n   - ~lsp-restart-workspace~ - Restart project\n   - ~lsp-symbol-highlight~ - Highlight all relevant references to the symbol under point.\n   - ~lsp-workspace-folders-add~ - Add workspace folder\n   - ~lsp-workspace-folders-remove~ - Remove workspace folder\n   - ~lsp-workspace-folders-switch~ - Switch workspace folder\n   - ~imenu~ or ~helm-imenu~ - display document structure.\n   - ~completion-at-point~ - display completion using built-in emacs ~completion-at-point~ framework.\n   - ~lsp-find-definition~ - to find the definition for the symbol under point.\n   - ~lsp-find-references~ - Find references for the symbol under point.\n   - ~lsp-disconnect~ - Disconnect the buffer from the language server.\n   - ~lsp-lens-show~ - Show lenses in the current file\n   - ~lsp-lens-hide~ - Hide lenses in the current file\n   - ~lsp-lens-mode~  - Turn on/off lenses in the current file.\n   - ~lsp-avy-lens~ - Click lens using ~avy~\n** Settings\n   - ~lsp-log-io~ - If non-nil, print all messages to and from the language server to ~*lsp-log*~.\n   - ~lsp-print-performance~ - If non-nil, print performance info. to ~*lsp-log*~.\n   - ~lsp-inhibit-message~ - If non-nil, inhibit the message echo via ~inhibit-message~.\n   - ~lsp-report-if-no-buffer~ - If non nil the errors will be reported even when the file is not open.\n   - ~lsp-keep-workspace-alive~ - If non nil keep workspace alive when the last workspace buffer is closed.\n   - ~lsp-enable-snippet~ - Enable/disable snippet completion support.\n   - ~lsp-auto-guess-root~ - Automatically guess the project root using projectile/project. Do *not* use this setting unless you are familiar with =lsp-mode= internals and you are sure that all of your projects are following =projectile=/=project.el= conventions.\n   - ~lsp-restart~ - Defines how server exited event must be handled.\n   - ~lsp-session-file~ - File where session information is stored.\n   - ~lsp-auto-configure~ - Auto configure ~lsp-mode~. When set to t ~lsp-mode~ will auto-configure ~lsp-ui~ and ~company-lsp~.\n   - ~lsp-document-sync-method~ - How to sync the document with the language server.\n   - ~lsp-auto-execute-action~ - Auto-execute single action.\n   - ~lsp-eldoc-render-all~ - Display all of the info returned by ~document/onHover~. If this is nil, ~eldoc~ will show only the symbol information.\n   - ~lsp-signature-render-all~ - Display all of the info returned by ~textDocument/signatureHelp~. If this is nil, ~eldoc~ will show only the active signature.\n   - ~lsp-enable-completion-at-point~ - Enable ~completion-at-point~ integration.\n   - ~lsp-enable-xref~ - Enable xref integration.\n   - ~lsp-prefer-flymake~ - If you prefer flycheck and ~lsp-ui-flycheck~ is available, ~(setq lsp-prefer-flymake nil)~. If set to ~:none~ neither of two will be enabled.\n   - ~lsp-enable-indentation~ - Indent regions using the file formatting functionality provided by the language server.\n   - ~lsp-enable-on-type-formatting~ - Enable ~textDocument/onTypeFormatting~ integration.\n   - ~lsp-before-save-edits~ - If non-nil, ~lsp-mode~ will apply edits suggested by the language server before saving a document.\n   - ~lsp-imenu-show-container-name~ - Display the symbol\'s container name in an imenu entry.\n   - ~lsp-imenu-container-name-separator~ - Separator string to use to separate the container name from the symbol while displaying imenu entries.\n   - ~lsp-imenu-sort-methods~ - How to sort the imenu items. The value is a list of ~kind~, ~name~ or ~position~. Priorities are determined by the index of the element.\n   - ~lsp-response-timeout~ - Number of seconds to wait for a response from the language server before timing out.\n   - ~lsp-enable-file-watchers~ - If non-nil lsp-mode will watch the files in the workspace if the server has requested that.\n   - ~lsp-server-trace~ - Request trace mode on the language server.\n   - ~lsp-enable-semantic-highlighting~ - Enable experimental semantic highlighting support\n   - ~lsp-enable-imenu~ - If non-nil, automatically enable imenu integration when server provides ~textDocument/documentSymbol~.\n** Screenshots\n   - RUST Completion with company-lsp\n     [[file:examples/completion.png]]\n   - Typescript references using lsp-ui\n     [[file:examples/references.png]]\n   - Debugging Python using dap-mode\n     [[file:examples/python_debugging.png]]\n   - Call hierarchy via ccls\n     [[file:examples/call-hierarchy-ccls.png]]\n   - Metals Doctor\n     [[file:examples/metals-doctor.png]]\n   - Semantic highlighting as provided by clangd (built from unreleased 10.0 branch). In this screenshot, all other font-locking has been disabled (hence no syntax highlighting of comments or basic keywords such as ~auto~)\n     [[file:examples/clangd_semantic_highlighting.png]]\n\n** Extensions\n*** TRAMP\n    LSP mode has support for tramp buffers with the following requirements:\n    - The language server has to be present on the remote server.\n    - Having multi folder language server (like [[https://github.com/eclipse/eclipse.jdt.ls][Eclipse JDT LS]]) cannot have local and remote workspace folders.\n**** How does it work?\n     ~lsp-mode~ detects whether a particular file is located on remote machine and looks for a client which matches current file and it is marked as ~:remote?~ t. Then ~lsp-mode~ starts the client through tramp.\n**** Sample configuration\n     Here it is example how you can configure python language server to work when using ~TRAMP~. Note that if you are trying to convert existing language server configuration you should copy all of it\'s properties(e. g. ~:request-handlers~, ~activation-fn~, etc).\n     #+BEGIN_SRC emacs-lisp\n       (lsp-register-client\n        (make-lsp-client :new-connection (lsp-tramp-connection "binary-or-full-path")\n                         :major-modes \'(python-mode)\n                         :remote? t\n                         :server-id \'pyls-remote))\n     #+END_SRC\n**** Dealing with stderr\n    With TRAMP, Emacs does not have an easy way to distinguish stdout and stderr, so when the underlying LSP process writes to stderr, it breaks the ~lsp-mode~ parser. As a workaround, ~lsp-mode~ is redirecting stderr to ~/tmp/<process-name>-<id>~stderr~.\n** Limitations\n*** File watches\n    When some of the workspaces that are active in the current project requests file notifications via ~workspace/didChangeWatchedFiles~ ~lsp-mode~ will start monitoring each of the folders in the workspace for changes. In case your project contains a lot of files you might want to disable file monitoring via ~lsp-enable-file-watchers~ (you may use dir-locals).\n** Contributions\n   Contributions are very much welcome.\n\n*** Members\n    Here it is a list of the current =lsp-mode= members and what they are primary working on/responsible for.\n    | Member         | Responsible for:                   |\n    |----------------+------------------------------------|\n    | [[https://github.com/TOTBWF][TOTBWF]]         | =F#=                               |\n    | [[https://github.com/brotzeit][brotzeit]]       | =Rust=                             |\n    | [[https://github.com/dsyzling][dsyzling]]       | =Scala=                            |\n    | [[https://github.com/kurnevsky][kurnevsky]]      | =Scala= & =Rust=                   |\n    | [[https://github.com/seagle0128][seagle0128]]     | =Go= & =MS Python Language Server= |\n    | [[https://github.com/sebastiansturm][sebastiansturm]] | =lsp-mode= core & =C++=            |\n    | [[https://github.com/vibhavp][vibhavp]]        | =lsp-mode= core                    |\n    | [[https://github.com/yyoncho][yyoncho]]        | =lsp-mode= core and =Java=         |\n\n** Troubleshooting\n   - set ~lsp-log-io~ to ~t~ to inspect communication between client and the server. Use =lsp-workspace-show-log= to switch to the corresponding log buffer.\n   - ~lsp-describe-session~ will show the current projects roots + the started severs and allows inspecting the server capabilities.\n   #+caption: Describe session\n   [[file:examples/describe.png]]\n** Adding support for languages\n*** Registering server\n    Here it is the minimal configuration that is needed for new language server registration. Refer to the documentation of ~lsp-client.el~ for the additional settings supported on registration time. ~lsp-language-id-configuration~ must be updated to contain the corresponding mode -> language id - in this case ~(python-mode . "python")~\n    #+BEGIN_SRC emacs-lisp\n      (defvar lsp-language-id-configuration\n        \'(...\n         (python-mode . "python")\n         ...))\n      ;; if you are adding the support for your language server in separate repo use\n      ;; (add-to-list \'lsp-language-id-configuration \'(python-mode . "python"))\n\n      (lsp-register-client\n       (make-lsp-client :new-connection (lsp-stdio-connection "pyls")\n                        :major-modes \'(python-mode)\n                        :server-id \'pyls))\n    #+END_SRC\n\nIf the language server supports environment variables to control additional behavior, you can register that by using the ~:environment-fn~ function, like the Bash language client does:\n\n    #+BEGIN_SRC emacs-lisp\n      (lsp-register-client\n       (make-lsp-client :new-connection (lsp-stdio-connection \'("bash-language-server" "start"))\n                        :major-modes \'(sh-mode)\n                        :priority -1\n                        :environment-fn (lambda ()\n                                          (("EXPLAINSHELL_ENDPOINT" . lsp-bash-explainshell-endpoint)\n                                           ("HIGHLIGHT_PARSING_ERRORS" . lsp-bash-highlight-parsing-errors)))\n                        :server-id \'bash-ls))\n    #+END_SRC\n\n~lsp-bash-explainshell-endpoint~ and ~lsp-bash-highlight-parsing-errors~ are language client ~defcustom~ that expose supported server environment settings in a type-safe way. If you change any of those variables, restart the language server with ~lsp-restart-workspace~ for the changes to be applied.\n\n*** Sections\n    ~lsp-mode~ provides tools to bridge emacs ~defcustom~ as a language configuration sections properties(see [[https://microsoft.github.io/language-server-protocol/specification#workspace_configuration][specification workspace/configuration]]). In addition you may use ~lsp-generate-settings~ from [[https://github.com/emacs-lsp/lsp-mode/blob/master/scripts/lsp-generate-settings.el][Generate Settings script]] to generate ~defcustom~ from ~package.json~ VScode plugin manifest. Example:\n    #+BEGIN_SRC emacs-lisp\n      (defcustom lsp-foo-language-server-property "bar"\n        "Demo property."\n        :group \'foo-ls\n        :risky t)\n\n      (lsp-register-custom-settings \'(("foo.section.property" lsp-foo-language-server-property)))\n\n      (lsp-configuration-section  "foo")\n      ;; =>  (("foo" ("settings" ("property" . "bar"))))\n    #+END_SRC\n** FAQ\n   - How do I troubleshoot "Server FOO-LS:pid exited with status signal. Do you want to restart it? (y or n)"?\n     - This message indicates that the language server has crashed for some\n       reason. You may check the server stderr which is =*FOO-LS::stderr*=. If\n       you get this message on startup you may try to run the exact command that\n       =lsp-mode= is running in the terminal. You may find it in =*lsp-log*=\n       buffer.\n   - How to configure a server with local variables?\n     - Add ~lsp~ server call to ~hack-local-variables-hook~ which runs right after the local variables are loaded.\n       #+BEGIN_SRC emacs-lisp\n         (add-hook \'hack-local-variables-hook\n                   (lambda () (when (derived-mode-p \'XXX-mode) (lsp))))\n       #+END_SRC\n   - I have multiple language servers registered for language FOO. Which one will be used when opening a project?\n     - The one with highest priority wins. ~lsp-clients.el~ predefined servers have\n       priority -1, lower than external packages (priority 0 if unspecified). If a\n       server is registered with ~:add-on?~ flag set to ~t~ it will be started in\n       parallel to the other servers that are registered for the current mode.\n   - I have multiple language servers for language =FOO= and I want to select the server per project, what can I do?\n     - You may create =dir-local= for each of the projects and specify list of\n       =lsp-enabled-clients=. This will narrow the list of the clients that are\n       going to be tested for the project.\n   - The completion does not work fine and inserts arguments and placeholders, what I am doing wrong?\n     - Snippet support works only with =company-lsp= so if you are using\n       =completion-at-point= the snippets won\'t be expanded and you should\n       either disable them by setting =lsp-enable-snippet= to =nil= or you\n       should switch to =company-lsp=. Note also that =company-tng= frontend\n       does not support snippet expansion(see [[https://github.com/company-mode/company-mode/issues/891][company-mode#891]])\n   - How to automatically follow =lsp-ui-log=?\n     - Go into the log buffer and execute the following snippet(source: [[https://stackoverflow.com/questions/12663061/emacs-auto-scrolling-log-buffer][Emacs auto scrolling log buffer]])\n     #+begin_src elisp\n       (set (make-local-variable \'window-point-insertion-type) t)\n     #+end_src\n   - I am getting "Package \xe2\x80\x98spinner-1.7.3\xe2\x80\x99 is unavailable" when trying to install =lsp-mode=.\n     - This is caused by GPG keys used by the ELPA package manager not being up\n      to date. You may fix by installing: [[https://elpa.gnu.org/packages/gnu-elpa-keyring-update.html][gnu-elpa-keyring-update]]\n** See also\n   - [[https://github.com/emacs-lsp/lsp-docker/][lsp-docker]] - provide docker image with preconfigured language servers with corresponding emacs configuration.\n   - [[https://github.com/sebastiencs/company-box/][company-box]] - =company= frontend with icons.\n   - [[https://github.com/yyoncho/dap-mode][dap-mode]] - Debugger integration for ~lsp-mode~.\n   - [[https://github.com/joaotavora/eglot][eglot]] - An alternative minimal LSP implementation.\n'