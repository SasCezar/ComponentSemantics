b'*What were you doing* on February 14th of 2007? On *which tasks* were\nyou working on that very day you met your girl friend? When was the\n*last appointments* with your dentist? *Who called* you on telephone\nduring that meeting with your customer last month?\n\nMost people can not answer such questions. *With Memacs you can!*\n\nMemacs extracts metadata (subjects, timestamps, contact information,\n...) from many different existing data sources (file names, emails,\ntweets, bookmarks, ...) on your computer and generates files which are\nreadable by [[http://en.wikipedia.org/wiki/Emacs][GNU Emacs]] with [[http://orgmode.org/][Org mode]].\n\nExample:\n:    emails              -> memacs-maildir.py  \\\n:    firefox history     -> memacs-firefox.py   |\n:    SMS                 -> memacs-sms.py       |\n:    RSS-feeds           -> memacs_rss.py       |\n:    bank statements     -> memacs-easybank.py  |>  Memacs\n:    postings            -> memacs-slrn.org     |\n:    git repository logs -> memacs_git.py       |\n:    svn repository logs -> memacs_svn.py      /\n:    |_________________|   |_________________|     |______|\n:    your personal data      Memacs modules        Org mode\n\nMemacs - as the central component of the system - is a hub for all the\nconnectors that add data from individual data sources. Those connectors\nare called *Memacs modules* or short /module/.\n\n- *target group*: Users of  [[http://en.wikipedia.org/wiki/Emacs][Emacs]] and [[http://orgmode.org/][Org mode]]\n- *skills necessary*: creating/modifying shell script code; creating\n  scheduled tasks\n- *project hosted on* https://github.com/novoid/Memacs\n\n** Python 2 to 3 Migration\n\nThis repository was migrated from Python2 to Python3 (by [[https://github.com/DerBeutlin][DerBeutlin]] -\nthanks!).\n\nIf you need to get the latest version that ran with Python2, do visit\n[[https://github.com/novoid/Memacs/tree/5d4b3f0802f43490af0d28f1eaf5fb07976cb0b3][this version]]. For the future, Python3 is the only way to go.\n\nI\'ll write about migration impact (changing IDs, ...) when I have\ntested it myself.\n\n** Table of Contents\n- [[#installation][Installation]]\n- [[#getting-started][Getting started]]\n- [[#memacs-modules][Memacs modules]]\n- [[#example-story][Example story]]\n- [[#background][Background]]\n- [[#contribute][Contribute]]\n- [[#license][License]]\n\n** Installation\n\n- clone or download repository from github\n- make sure to use *python v3*\n- create a virtualenv or\n- export/set ~PYTHONPATH~\n\n: PYTHONPATH=/path/to/memacs\n\n- install dependencies\n\n: pip install -r requirements.txt\n\n** Getting Started\n\nThe basic concept of using a Memacs module is following:\n\n1. Choose a Memacs modules you want to use and set it up:\n   - Read the module descripion files in the ~docs~ folder.\n   - Each [[#memacs-modules][module]] shares global options but also comes with its very\n     own set of custom arguments.\n   - Manually start the module of your choice from the ~bin~ folder of\n     Memacs with the argument ~--help~, e.g. ~bin/memacs_csv.py\n     --help~ in your command line in order to get an overview of the\n     arguments of this module.\n   - You probably want to *develop and test a script (=.bat= or =.sh=)\n     for the module invocation* in the command line and ...\n2. When this script works as expected, set up a periodical invocation\n   so that your data gets converted to Org mode via Memacs regularily.\n   - This is usually done via operating system dependent methods:\n     - Windows: [[https://docs.microsoft.com/en-us/windows/desktop/taskschd/task-scheduler-start-page][Task Scheduler]]\n     - GNU/Linux: [[https://en.wikipedia.org/wiki/Cron][cron job]] or via [[https://wiki.archlinux.org/index.php/Systemd/Timers][systemd]]\n     - macOS: [[http://www.launchd.info/][launchd]]\n3. Think of another Memacs module you might want to try ;-)\n\nPlease make sure you also read the [[docs/FAQs_and_Best_Practices.org][FAQ\'s and best practices]], as it\ncontains many tips and tricks on how to meet your requirements and on\nhow to choose a reasonable setup.\n\n** Workflows\n\nHere are some workflows just to give you an initial impression how\nMemacs may give you much for digital fun.\n\n*** The Basics\n\nWhen one or more Memacs modules are set-up and data starts flowing in\nto your Memacs Org mode files, you have many options to use Memacs for\nyour personal workflows.\n\nThe most basic thing that changes with Memacs is that you might want\nto see Memacs-processed data in your agenda:\n\nEither you are generating (1) Org mode files that are within your\n[[https://orgmode.org/manual/Agenda-files.html][agenda files]] or you are generating (2) [[https://orgmode.org/manual/Archiving.html#Archiving][archive files]] whose more or\nless empty Org mode file stub is within your agenda files (as\ndescribed in the [[https://github.com/novoid/Memacs/blob/master/docs/FAQs_and_Best_Practices.org#performance-and-scalability][FAQs]]).\n\nThis way, the generated time-stamp information gets into your normal\nagenda (1) or in the [[https://orgmode.org/manual/Agenda-commands.html][extended in archives-mode]] (by pressing =v A= in\nyour agenda) that also shows content of the archive files (2).\n\n*** Filename Time-Stamp and Friends\n\nA Memacs feature I personally use all the time provides a somewhat\nmore complex workflow whose basic data is provided by the [[docs/memacs_filenametimestamps.org][filename\ntime-stamp module]]. The module indexes all my files that contain\nISO-datestamps or ISO-timestamps in their file names just like\n[[http://linux-sxs.org/utilities/updatedb.html][updatedb]] does for "locate".\n\nThe fun starts, when this module is set-up and the file index is\ngenerated (nightly). With the elisp snippets mentioned in the module\ndocumentation, I am able to link to any of those files just by\nspecifying their file name. This links never get broken since it does\nnot matter in which folder files are located in any more.\n\nPlease refer to [[https://github.com/novoid/dot-emacs/blob/master/config.org#handling-tsfile-links-memacs][my Emacs configuration]] and look out for all\noccurrences of =tsfile= (time-stamp file) which is my custom link for\nthose files.\n\nI even extended this workflow such that my [[https://github.com/novoid/lazyblorg][blog system]] is able to [[https://github.com/novoid/lazyblorg/wiki/Images#embedding-tsfile-image-files][link\nto =tsfile:= images]] independent of their location. Awesome stuff.\n\n** Memacs Modules\n\n- [[docs/memacs_arbtt.org][arbtt]]\n- [[docs/memacs_battery.org][battery]]\n- [[docs/memacs_csv.org][csv]]\n- [[docs/memacs_filenametimestamps.org][filenametimestamps]]\n- [[file:docs/memacs_firefox_history.org][firefox_history]]\n- [[file:docs/memacs_chrome_history.org][chrome_history]]\n- [[docs/memacs_git.org][git]]\n- [[docs/memacs_gpx.org][gpx]]\n- [[docs/memacs_ical.org][ical]]\n- [[docs/memacs_imap.org][imap]]\n- [[docs/memacs_lastfm.org][lastfm]]\n- [[docs/memacs_mumail.org][mu]]\n- [[docs/memacs_phonecalls.org][phonecalls]]\n- [[docs/memacs_photos.org][photos]]\n- [[docs/memacs_rss.org][rss]]\n- [[docs/memacs_simplephonelogs.org][simplephonelogs]]\n- [[docs/memacs_sms.org][sms]]\n- [[docs/memacs_svn.org][svn]]\n- [[docs/memacs_twitter.org][twitter]]\n- [[docs/memacs_whatsapp.org][whatsapp]]\n\nThis module is an example for developers: [[docs/memacs_csv.org]]\n\nThose modules are *not* adopted to the new unified framework yet:\n\n- [[tmp/emails/maildir/memacs_maildir.org][maildir]]\n- [[tmp/emails/mbox/memacs_mbox.org][mbox]] (also useful for newsgroups)\n  - see also [[emails/mbox/works-for-me-hack/memacs_mbox.org]]\n- *bank account*:\n  - [[http://www.easybank.at][easybank.at]]: see [[tmp/bank_statements/easybank.at/memacs_easybank.org]]\n\n- *newsgroups*\n  - *[[http://en.wikipedia.org/wiki/Slrn][slrn]]*: see [[emails/mbox/works-for-me-hack/memacs_mbox.org]]\n\nFollowing modules exist as a rough idea only and might get implemented\nsome day (by you?):\n\n- *[[http://karl-voit.at/tagstore/][tagstore]]*: see [[tmp/tagstore/memacs-tagstore.org]]\n\n- *calendar*:\n  - [[http://www.jpilot.org/][JPilot]]-datebook: see [[calendar/memacs_jpilot-datebook.org]]\n\n- *tasks*:\n  - [[http://www.jpilot.org/][JPilot]]-todos: see [[tasklists/jpilot-todos/memacs_jpilot-todos.org]]\n\n- *blog_systems*:\n  - [[http://en.wikipedia.org/wiki/Serendipity_(weblog_software)][Serendipity]]: see [[blog_systems/serendipity/memacs_serendipity.org]]\n\n\n* Example Story\n\nImagine you are already using Memacs.\n\nWhen remembering that day, when you joined an interesting talk about\n\xc2\xab[[http://en.wikipedia.org/wiki/Getting_Things_Done][Getting Things Done]]\xc2\xbb (GTD), you start up your GNU Emacs with your main\nOrg mode file. There you go to the Agenda-view and select this\nspecific day a couple of months ago.\n\nThere it is, from 2pm to 3pm you scheduled this talk in your calendar.\nAnd then you realize that within this time frame, there appear some\n[[http://en.wikipedia.org/wiki/Jpeg][JPEG files]] containing an [[http://www.cl.cam.ac.uk/~mgk25/iso-time.html][ISO 8601]] time stamp[1] are indexed by one\nmodule. (filenametimestamp-module)\n\nThis image contains a slide you found interesting and which you\nphotographed using your sleek smartphone. Who would remember having\ntaken a picture during a talk?\n\nTen minutes after the talk you wrote a short message on [[http://Twitter.com][Twitter]] where\nyou mentioned useful URLs for your followers. This time those URLs are\nhandy for yourself too! (Twitter-module)\n\nOn the evening of that day you see an entry of an incoming email from\nthe author of the talk. Now you remember having had a cool\nconversation at the end of the talk where he promised you some\nadditional information about that nice little GTD tool on his\ncomputer. Great that you got that link to that email too. Without\nMemacs you would probably never remembered that email again.\n(Maildir-module)\n\nAnd then there were some bookmarks you saved this day, almost all\nrelated to great ideas you got from the GTD talk. (delicious-module)\n\nThis small story shows only a few use cases where different modules\ncombine given data sources and their information to provide an overall\nview related to an event. Since Org mode has got links, no actual data\nhas to be duplicated (except the meta data extracted by Memacs).\nEmails, files, bookmarks, and so forth are linked rather than copied.\n\n[1] with periods instead of colons - just because the [[http://msdn.microsoft.com/en-us/library/aa365247(v%3Dvs.85).aspx#naming_conventions][ancient\nlimitations of Microsoft based file systems]]; like \xc2\xab2011-02-14T14.35.42\nideas.jpg\xc2\xbb\n\n* Background\n\nIn 1945, [[http://en.wikipedia.org/wiki/Vannevar_Bush][Vannevar Bush]] wrote a famous article \xc2\xab[[http://en.wikipedia.org/wiki/As_We_May_Think][As We May Think]]\xc2\xbb where\nhe develops the idea of having a \xc2\xabmemory extender\xc2\xbb called *Memex*. The\nmemex can store all letters, books, and other information which are\nrelated to a person.\n\nBesides having foreseen several technologies like hypertext, he\ndefined a device that holds all metadata and data and provides\nassociative trails to access information.\n\nIn the last decade of the previous century Microsoft Research had a\nresearch program that resulted in [[http://en.wikipedia.org/wiki/MyLifeBits][MyLifeBits]]. This software tried to\nstore each information of the user like office documents, screenshots,\nname of active windows on the desktop computer, and even automatically\ntook photographs ([[http://en.wikipedia.org/wiki/Sensecam][SenseCam]]). This word did not result in any (open)\nsoftware product. Bell and Gemmell wrote a book called \xc2\xab[[http://www.amazon.de/gp/product/0525951342/ref%3Das_li_ss_tl?ie%3DUTF8&tag%3Dkarlssuder-21&linkCode%3Das2&camp%3D1638&creative%3D19454&creativeASIN%3D0525951342][Total Recall]]\xc2\xbb.\n\nThe Memacs project tries to implement the ideas of Vannevar Bush\'s\nvision with open source and open standards. Hence, it\'s name \xc2\xabMemacs\xc2\xbb\nis the obvious combination of \xc2\xab[[http://www.gnu.org/software/emacs/][GNU Emacs]]\xc2\xbb and \xc2\xabMemex\xc2\xbb.\n\nMemacs uses GNU Emacs Org mode to visualize and access information\nextracted by Memacs modules: using tags, time stamps, full text\nsearch, and so forth GNU Emacs is able to derive different\nviews. The most important view probably is the [[http://orgmode.org/org.html#Agenda-Views][Agenda-view]] where you\ncan see anything that happened during a specific day/week/month\naccording to the time frame selected. But you can derive other views\ntoo. For example you can choose to generate a condensed search result\nusing a [[http://en.wikipedia.org/wiki/Boolean_algebra_(logic)][boolean combination]] of tags.\n\nRelated to Memacs, the project founder developed a research software\ncalled *[[http://karl-voit.at/tagstore/][tagstore]]*. This system allows users to store (local) files\nusing tags without a hierarchy of folders. As a natural extension,\ntagstore targets associative access for (local) files. You might want\nto check out tagstore too. Memacs and tagstore are a very useful\ncombination.\n\nIf you do like to know how to efficiently organize digital files in a\nsimple and operating system independent way, read [[http://karl-voit.at/managing-digital-photographs/][this blog post]] from\nKarl. It might give you ideas for your workflows as well.\n\nKarl also wrote [[http://arxiv.org/abs/1304.1332][a whitepaper on Memacs]] which describes Memacs from a\nscientists point of view.\n\n* Similar Projects\n\n- In https://github.com/novoid/Memacs/issues/88, Alex links to a\n  browser extension from [[https://worldbrain.io/][WorldBrain]] called [[https://github.com/WorldBrain/Memex][Memex]].\n- https://github.com/karlicoss/orger has similar goals: converting\n  data into Org mode\n\n* Contribute! We are looking for your ideas:\n\nIf you want to contribute to this cool project, please fork and\ncontribute or write an additional module!\n\nSee [[docs/FAQs_and_Best_Practices.org]] for more developing information.\n\nWe are sure that there are a *lot* of cool ideas for other modules out\nthere! This is just the beginning!\n\nMemacs is designed with respect to minimal effort for new modules.\n\nWe are using [[http://www.python.org/dev/peps/pep-0008/][Python PEP8]] and [[http://en.wikipedia.org/wiki/Test-driven_development][Test Driven Development (TDD)]].\n\n* License\n\nMemacs is licensed under the GPLv3 [[license.txt][license]].\n'