b'[![MELPA](http://melpa.org/packages/clj-refactor-badge.svg)](http://melpa.org/#/clj-refactor)\n[![MELPA Stable](http://stable.melpa.org/packages/clj-refactor-badge.svg)](http://stable.melpa.org/#/clj-refactor)\n[![Build Status](https://secure.travis-ci.org/clojure-emacs/clj-refactor.el.png?branch=master)](http://travis-ci.org/clojure-emacs/clj-refactor.el)\n[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/clojure-emacs/refactor-nrepl?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\n\n# clj-refactor.el\n\n`clj-refactor` provides refactoring support for Clojure projects.\n\nHere\'s a small teaser, helping you add a missing libspec:\n\n![](examples/add-missing-libspec.gif)\n\n## Installation\n\nIt\'s highly recommended to install `clj-refactor` through `package.el`.\n\nIt\'s available on [MELPA](http://melpa.org/) and [MELPA Stable](http://stable.melpa.org/):\n\n    M-x package-install clj-refactor\n\n## Setup\n\n```el\n(require \'clj-refactor)\n\n(defun my-clojure-mode-hook ()\n    (clj-refactor-mode 1)\n    (yas-minor-mode 1) ; for adding require/use/import statements\n    ;; This choice of keybinding leaves cider-macroexpand-1 unbound\n    (cljr-add-keybindings-with-prefix "C-c C-m"))\n\n(add-hook \'clojure-mode-hook #\'my-clojure-mode-hook)\n```\n\nThe more advanced refactorings require our nREPL middleware\n[refactor-nrepl](https://github.com/clojure-emacs/refactor-nrepl). From\nversion *2.2.0* onwards if `cider-jack-in` is used it is injected\nautomatically.\n\n**`profiles.clj` or `profile.boot` don\'t need to be modified anymore for the above usecase!**\n\nOn the other hand if a standalone REPL or an embedded nREPL server is\nused you will need to manually add this dependency (see below).\n\nEither in your project\'s `project.clj` or in the `:user`\nprofile found at `~/.lein/profiles.clj`:\n\n```clojure\n:plugins [[refactor-nrepl "2.4.0"]\n          [cider/cider-nrepl "0.18.0"]]\n```\n\n**clj-refactor 2.4 is compatible with CIDER 0.17 and 0.18. Change the cider-nrepl dep\nto 0.17 if you\'re using CIDER 0.17.**\n\nCheck out the much longer\n[installation](https://github.com/clojure-emacs/clj-refactor.el/wiki/installation)\npage in the wiki for a less opinionated approach.\n\n`clj-refactor` has quite a few settings you can tweak to change the\nbehavior of various commands.  You can read more about that\n[here](https://github.com/clojure-emacs/clj-refactor.el/wiki#customization).\n\n### In case `refactor-nrepl` used for advanced refactorings\n\nThe [analyzer](https://github.com/clojure/tools.analyzer)\n`refactor-nrepl` uses needs to eval the code too in order to be able\nto build the AST we can work with. If that causes side effects like\nwriting files, opening connections to servers, modifying databases,\netc. performing certain refactoring functions on your code will do\nthat, too.\n\nBy default the user is warned about this when an AST dependent feature\nis invoked. If this warning is an annoyance and the project can be\nevalled without any risks set `cljr-warn-on-eval` to nil so\n`cljr-eagerly-build-asts-on-startup` can take effect.\n\nWe create ASTs for all the namespaces at REPL start up if\n`cljr-warn-on-eval` is set to nil. If that is not desired set\n`cljr-eagerly-build-asts-on-startup` to `nil` in your emacs\nconfiguration. AST dependent features at the moment are `find usages`,\n`rename symbol`, `extract function`, `inline symbol`, `rename file or\ndir`, `change function signature`, `promote function`.\n\n### Compatibility\n\nclj-refactor | refactor-nrepl | CIDER       | Clojure | Java |\n-------------|----------------|-------------|---------|------|\n2.4.0        |  2.4.0         | 0.17, 0.18  | 1.7+    | 8+   |\n\n## Usage\n\nAll functions in `clj-refactor` have a two-letter mnemonic\nshortcut. E.g. `rs` for `cljr-rename-symbol`.  Given the prefix choice\nin the example setup you\'d call this function by hitting `C-c C-m rs`\n\nSee the wiki for a complete [list of available refactorings](https://github.com/clojure-emacs/clj-refactor.el/wiki),\ndemonstrations and customization points.\n\nIf you\'re having trouble remembering the mnemonic shortcuts, check out\nthe [hydra](https://github.com/abo-abo/hydra) powered popup menus.\nThey are described\n[here](https://github.com/clojure-emacs/clj-refactor.el/wiki/Hydra).\n\n## Changelog\n\nAn extensive changelog is available [here](CHANGELOG.md).\n\n## Contribute\n\nYes, please do. There\'s a suite of tests, so remember to add tests for\nyour specific feature, or we might break it later.\n\nYou\'ll find the repo at:\n\n    https://github.com/clojure-emacs/clj-refactor.el\n\nTo fetch the test dependencies, install\n[cask](https://github.com/cask/cask) if you haven\'t already,\nthen:\n\n    $ cd /path/to/clj-refactor\n    $ cask\n\nRun the tests with:\n\n    $ ./run-tests.sh\n\n\nBefore submitting a patch, or a pull request, make sure all tests are\npassing and that your patch is in line with the [contribution\nguidelines](.github/CONTRIBUTING.md).\n\nThanks to [everyone](https://github.com/clojure-emacs/clj-refactor.el/graphs/contributors) who\'s contributed so far!\n\n## License\n\nCopyright \xc2\xa9 2012-2014 Magnar Sveen\nCopyright \xc2\xa9 2014-2018 Magnar Sveen, Lars Andersen, Benedek Fazekas\n\nAuthor: Magnar Sveen <magnars@gmail.com>\n        Lars Andersen <expez@expez.com>\n        Benedek Fazekas\nKeywords: convenience, clojure, cider\n\nThis program is free software; you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\n'