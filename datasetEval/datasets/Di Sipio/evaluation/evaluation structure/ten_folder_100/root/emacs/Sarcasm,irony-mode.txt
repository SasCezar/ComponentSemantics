b'# Irony-Mode\n\n## A C/C++ minor mode powered by [libclang][libclang-ref]\n\n`irony-mode` is an Emacs minor-mode that aims at improving the editing\nexperience for the C, C++ and Objective-C languages. It works by using a\ncombination of an Emacs package and a C++ program (`irony-server`) exposing\n[libclang][libclang-ref].\n\n**Features:**\n\n* Code completion:\n  * With Emacs\' built-in `completion-at-point-functions`\n  * With [company-mode][company-ref]\'s backend: [company-irony][company-irony-ref]\n\n* Syntax checking:\n  * With [flycheck][flycheck-ref]\'s checker: [flycheck-irony][flycheck-irony-ref]\n\n* `eldoc` integration: [irony-eldoc][irony-eldoc-ref]\n\n* [counsel][counsel-ref] integration: https://oremacs.com/2017/03/28/emacs-cpp-ide/\n\n## Dependencies\n\n### Elisp dependencies\n\nThese dependencies will be installed automatically when using the\n[standard installation](#installation) procedure described below.\n\n| Package              | Comment                                                                          |\n| -------------------- | -------------------------------------------------------------------------------- |\n| [cl-lib][cl-lib-ref] | Built-in since Emacs 24.3                                                        |\n| [json][json-el-ref]  | Built-in since Emacs 23.1                                                        |\n| [YASnippet][yas-ref] | Optional. May be used to provide post-completion expansion of function arguments |\n\n\n### Irony-Server prerequisites\n\n`irony-server` provides the [libclang][libclang-ref] interface to `irony-mode`.\nIt uses a simple protocol based on S-expression. This server, written in C++ and\nrequires the following packages to be installed on your system:\n\n* [CMake][cmake-ref] >= 2.8.3\n* [libclang][libclang-ref]\n\n\n## Installation\n\nThe recommended way to install `irony-mode` and its dependencies is to use a\npackage manager.\n\n* Using [MELPA](http://melpa.milkbox.net/)\n\n        M-x package-install RET irony RET\n\n* Using `apt` on Debian \xe2\x89\xa510 and derivatives\n\n        sudo apt install elpa-irony\n\n## Configuration\n\n~~~el\n(add-hook \'c++-mode-hook \'irony-mode)\n(add-hook \'c-mode-hook \'irony-mode)\n(add-hook \'objc-mode-hook \'irony-mode)\n\n(add-hook \'irony-mode-hook \'irony-cdb-autosetup-compile-options)\n~~~\n\n\n## Windows considerations\n\n`irony-mode` should work fine on Windows but there are some things to take care\nof first.\n\n* `libclang.dll` is expected to be available in the `PATH` or in Emacs\'\n  `exec-path`.\n\n* **Emacs >= 24.4 is required.** A bug in previous versions makes irony\n  unuseable (Emacs bug #18420).\n\n* `w32-pipe-read-delay` default value of `50` should be changed.\n  This should not cause any issue on today\'s version of Windows.\n  The default value of `50` may be lowered in mainline Emacs in future versions,\n  until then, I suggest to set it to `0`.\n\n* `w32-pipe-buffer-size`, introduced by Emacs 25,\n  can be set to a larger value than the default to improve\n  `irony-server` communication performances\n  (c.f. https://github.com/Sarcasm/irony-mode/issues/321).\n  The variable to customize is `irony-server-w32-pipe-buffer-size`.\n\n\nWindows configuration tweaks to add to your Emacs configuration:\n\n```el\n;; Windows performance tweaks\n;;\n(when (boundp \'w32-pipe-read-delay)\n  (setq w32-pipe-read-delay 0))\n;; Set the buffer size to 64K on Windows (from the original 4K)\n(when (boundp \'w32-pipe-buffer-size)\n  (setq irony-server-w32-pipe-buffer-size (* 64 1024)))\n```\n\n\n## Usage\n\nOn the first run, `irony-mode` will ask you to build and install `irony-server`.\nTo do so, type `M-x irony-install-server RET`.\n\nTo tune `irony-mode`, use `customize`:\n\n\n    M-x customize-group RET irony RET\n\nIn order to provide context sensitive and accurate information, `irony-mode`\nneeds to know about the compiler flags used to parse the current buffer. The\nbest way to achieve this is to use a\n[Compilation Database](#compilation-database).\n\n\n## Compilation Database\n\nIn order to work correctly, `irony-mode` needs to know the compile flags.\n`irony-cdb` aims to provide *as automatic as possible* compile flags discovery,\nwith minimal user input.\n\nPlease refer to `irony-cdb-autosetup-compile-options` and\n`irony-cdb-compilation-databases`.\n\nRight now `irony-cdb` supports the following compilation databases:\n\n* [JSON Compilation Database][clang-compile-db-ref] - A JSON formatted file\n  generated by various build tools. The file is named `compile_commands.json`,\n  it lists the compile options associated to each file in the project.\n\n  * [CMake >= 2.8.5][cmake-ref] will generate a compilation database in the\n    build directory when issuing the following command\n    `cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON <...>`.\n\n  * [ninja >= 1.2][ninja-ref] will generate a JSON Compilation Database when\n    using the `compdb` tool.\n\n  * [Bear][bear-ref] generates a JSON Compilation Database file by "monitoring"\n    the build of a project. The typical usage for a `make`-based project will be\n    `bear -- make -B`.\n\n* [.clang_complete][clang_complete-doc-ref] - A file at the root of your project\n  containing the compilation flags, one per line. This is compatible with the\n  with plugin [Rip-Rip/clang_complete][clang_complete-vim-ref]. If you want to\n  generate the `.clang_complete` automatically, take a look at the\n  [cc_args.py documentation][cc_args-py-doc-ref].\n\nMore detailed information on compilation database is available here:\n\n* https://sarcasm.github.io/notes/dev/compilation-database.html\n\n## FAQ\n\n__It\'s slow, why?__\n\nA bug in old version of Clang (at least \'3.1-8\') caused the completion to fail\non the standard library types. To eliminate this bug an optimisation has been\ndisabled in the parsing of a translation unit. This result in a slower parsing.\n\nThis only affect old versions of Clang (< 3.2), it is suggested to update your\nlibclang installation if you want to take advantage of the optimizations.\n\n__libclang.so: cannot open shared object file...__\n\nCompiling `irony-server` succeed but you have the following message when you try\nto run the `irony-server` executable:\n\n    \'irony-server: error while loading shared libraries: libclang.so: cannot open shared object file: No such file or directory\n\nWhen `libclang` is installed in a non-standard location (one that is missing\nfrom the path list of the dynamic loader, see *ld.so.conf*) you can tell CMake\nto use the [rpath][rpath-ref] when installing the target `irony-server`. To\nenable rpath in CMake use the following command:\n\n    cmake -DCMAKE_INSTALL_RPATH_USE_LINK_PATH=ON <args...>\n\nIf you\'re running OS X, you can also use `install_name_tool` to explicitly\ntell `irony-server` where an appropriate version of `libclang.dylib` lives.\nFor example, Homebrew (with `brew install llvm --with-clang`) will install\na `libclang.dylib` library at `/usr/local/opt/llvm/lib/libclang.dylib`;\nyou can instruct `irony-server` to use this with something like:\n\n    install_name_tool -change @rpath/libclang.dylib /usr/local/opt/llvm/lib/libclang.dylib irony-server\n\n[ac-irony-ref]: https://github.com/Sarcasm/ac-irony "AC Irony"\n[ac-ref]: https://github.com/auto-complete/auto-complete "Auto Complete"\n[bear-ref]: https://github.com/rizsotto/Bear "Bear"\n[cc_args-py-doc-ref]: https://github.com/Rip-Rip/clang_complete/blob/c8673142759b87316265eb0edd1f620196ec1fba/doc/clang_complete.txt#L270 "cc_args.py documentation"\n[cl-lib-ref]: http://elpa.gnu.org/packages/cl-lib.html "cl-lib"\n[clang-compile-db-ref]: http://clang.llvm.org/docs/JSONCompilationDatabase.html "Clang: JSONCompilationDatabase"\n[clang_complete-doc-ref]: https://github.com/Rip-Rip/clang_complete/blob/c8673142759b87316265eb0edd1f620196ec1fba/doc/clang_complete.txt#L55 ".clang_complete"\n[clang_complete-vim-ref]: https://github.com/Rip-Rip/clang_complete "clang_complete Vim plugin"\n[cmake-ref]: http://www.cmake.org "CMake"\n[counsel-ref]: https://github.com/abo-abo/swiper#counsel "Counsel on Github"\n[company-irony-ref]: https://github.com/Sarcasm/company-irony "Company Irony"\n[company-ref]: https://github.com/company-mode/company-mode "Company-Mode"\n[flycheck-irony-ref]: https://github.com/Sarcasm/flycheck-irony "Flycheck Irony"\n[flycheck-ref]: http://www.flycheck.org "Flycheck -- Modern Emacs syntax checking"\n[irony-eldoc-ref]: https://github.com/ikirill/irony-eldoc "irony-eldoc -- irony-mode support for eldoc-mode"\n[json-el-ref]: http://edward.oconnor.cx/2006/03/json.el "Introducing json.el"\n[libclang-ref]: http://clang.llvm.org/doxygen/group__CINDEX.html "libclang: C Interface to Clang"\n[ninja-ref]: https://ninja-build.org "Ninja"\n[rpath-ref]: http://en.wikipedia.org/wiki/Rpath "rpath Wikipedia article"\n[yas-ref]: https://github.com/capitaomorte/yasnippet "YASnippet"\n'