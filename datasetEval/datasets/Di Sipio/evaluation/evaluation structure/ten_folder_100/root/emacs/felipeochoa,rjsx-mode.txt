b'# rjsx-mode: A major mode for editing JSX files\n[![MELPA](https://melpa.org/packages/rjsx-mode-badge.svg)](https://melpa.org/#/rjsx-mode)\n[![Build Status](https://travis-ci.org/felipeochoa/rjsx-mode.svg?branch=master)](https://travis-ci.org/felipeochoa/rjsx-mode)\n\nThis mode derives from `js2-mode`, extending its parser to support JSX syntax\naccording to the [official spec](https://facebook.github.io/jsx/).  This\nmeans you get all of the `js2` features plus proper syntax checking\nand highlighting of JSX code blocks.\n\nHere\'s a screenshot of it in action:\n\n<img src="demo.png" width="600" alt="Actual syntax highlighting and no spurious errors!">\n\n\n## Installing\n\n`rjsx-mode` is available on [Melpa](https://melpa.org/), so if you have that\nrepository configured you can just `package-list-packages` and install it from there.\n(If not, you can follow [their guide](https://melpa.org/#/getting-started) on\ngetting started). `rjsx-mode` automatically registers itself for `*.jsx` files,\nbut you can use `(add-to-list \'auto-mode-alist \'("components\\\\/.*\\\\.js\\\\\'" . rjsx-mode))`\n\nAlternatively, you can download `rjsx-mode.el` from this repository and use\n`load-file` or similar to add it to your current session.\n\n## Features\n\n`js2-mode` does not include a JSX parser, but rather an E4X parser, which\nmeans it gets confused with certain JSX constructs. This mode extends the\n`js2** parser to support all JSX constructs and proper syntax highlighting\nand **indentation**.\n\n`rjsx-mode` adds some electrcity to `<` and `C-d` to make adding new\nJSX elements less repetitive:\n\n* `<` inserts `</>` whenever it would start a new JSX node (and simply\n  inserts `<` otherwise)\n* `>` or `C-d` right before the slash in a self-closing tag\n  automatically inserts a closing tag and places point inside the\n  element\n\nThe result is you can do the following:\n\n<img src="key-demo.gif" width="200" alt="Quickly and easily add new components">\n\n* `C-c C-r` lets you rename the enclosing tag\n\nSome features that this mode adds to `js2`:\n\n* Proper indentation of JSX regardless of how you write it. (No need to wrap\n  in parentheses!)\n* Highlighting JSX tag names and attributes (using the `rjsx-tag` and\n  `rjsx-attr` faces)\n* Parsing the spread operator `{...otherProps}`\n* `&&` and `||` in child expressions `<div>{cond && <BigComponent/>}</div>`\n* Ternary expressions `<div>{toggle ? <ToggleOn /> : <ToggleOff\n  />}</div>`\n\nIf you don\'t like this behavior, you can disable it by adding the following to\nyour init file:\n\n```elisp\n(with-eval-after-load \'rjsx-mode\n  (define-key rjsx-mode-map "<" nil)\n  (define-key rjsx-mode-map (kbd "C-d") nil)\n  (define-key rjsx-mode-map ">" nil))\n```\n\nAdditionally, since `rjsx-mode` extends the `js2` AST, utilities using the\nparse tree gain access to the JSX structure.\n\n### Indentation\n\n`rjsx-mode` extends the built-in javascript indentation engine to correctly\nsupport JSX. You can configue the depth of indentation using `js-indent-level`\nand `sgml-basic-offset`, along with the various `js-indent-` variables.\n\n**Indenting with tabs**: This is not currently supported. You can either submit\na PR if interested (look at issue #85) or revert to using the built-in\nindentation mode by adding `(setq-local indent-line-function\n\'js-jsx-indent-line)` to your `rjsx-mode-hook`.\n\n## Bugs, contributing\n\nPlease submit any bugs or feature requests on the GitHub tracker. Since this\nmode is based on `js2`, it is possible that bugs you encounter with it stem from\nthere. Please try reproducing bugs using `js2-mode` if relevant. If the bug\nis in `js2`, please report it using `M-x report-emacs-bug`.\n\n## License\n\nThis project is licensed under the MIT license.\n'