b'[[https://melpa.org/#/dap-mode][file:https://melpa.org/packages/dap-mode-badge.svg]]\n[[http://spacemacs.org][file:https://cdn.rawgit.com/syl20bnr/spacemacs/442d025779da2f62fc86c2082703697714db6514/assets/spacemacs-badge.svg]]\n[[https://travis-ci.org/yyoncho/dap-mode][https://travis-ci.org/yyoncho/dap-mode.svg?branch=master]]\n* Table of Contents                                       :TOC_4_gh:noexport:\n- [[#summary][Summary]]\n  - [[#project-status][Project status]]\n- [[#usage][Usage]]\n- [[#screenshot][Screenshot]]\n  - [[#java][Java]]\n  - [[#swift][Swift]]\n  - [[#rust][RUST]]\n  - [[#go][Go]]\n  - [[#javascript][Javascript]]\n- [[#features][Features]]\n  - [[#debugger-commands][Debugger commands]]\n  - [[#windows][Windows]]\n  - [[#sessions][Sessions]]\n    - [[#keybindings][Keybindings]]\n  - [[#locals][Locals]]\n  - [[#breakpoints][Breakpoints]]\n    - [[#keybindings-1][Keybindings]]\n  - [[#loaded-sources][Loaded sources]]\n  - [[#dap-debug-repl][DAP debug REPL]]\n- [[#configuration][Configuration]]\n  - [[#dap-mode-configuration][DAP mode configuration]]\n  - [[#java-1][Java]]\n    - [[#installation][Installation]]\n    - [[#commands][Commands]]\n  - [[#python][Python]]\n    - [[#installation-1][Installation]]\n    - [[#usage-1][Usage]]\n  - [[#ruby][Ruby]]\n  - [[#lldb][LLDB]]\n    - [[#installation-2][Installation]]\n  - [[#elixir][Elixir]]\n  - [[#php][PHP]]\n  - [[#native-debug-gdblldb][Native Debug (GDB/LLDB)]]\n    - [[#configuration-1][Configuration]]\n  - [[#go-1][Go]]\n    - [[#installation-3][Installation]]\n  - [[#javascript-1][Javascript]]\n    - [[#firefox][Firefox]]\n      - [[#installation-4][Installation]]\n      - [[#usage-2][Usage]]\n    - [[#chrome][Chrome]]\n      - [[#installation-5][Installation]]\n      - [[#usage-3][Usage]]\n    - [[#microsoft-edge][Microsoft Edge]]\n      - [[#installation-6][Installation]]\n      - [[#usage-4][Usage]]\n    - [[#node][Node]]\n      - [[#installation-7][Installation]]\n      - [[#usage-5][Usage]]\n  - [[#powershell][Powershell]]\n- [[#extending-dap-with-new-debug-servers][Extending DAP with new Debug servers]]\n  - [[#example][Example]]\n- [[#links][Links]]\n- [[#troubleshooting][Troubleshooting]]\n- [[#acknowledgments][Acknowledgments]]\n- [[#whats-next][What\'s next]]\n\n* Summary\n  Emacs client/library for [[https://code.visualstudio.com/docs/extensionAPI/api-debugging][Debug Adapter Protocol]] is a wire protocol for\n  communication between client and Debug Server. It\'s similar to the [[https://github.com/Microsoft/language-server-protocol][LSP]] but\n  provides integration with debug server.\n\n  *Note: dap-mode works only against lsp.el interface.*\n** Project status\n   The project is in its early stage but although it is not extensively tested\n   it is considered stable enough to be used. The API considered unstable until\n   1.0 release is out. It is tested against Java, Python, Ruby, Elixir and LLDB\n   (C/C++/Objective-C/Swift).\n* Usage\n  The main entry points are ~dap-debug~ and ~dap-debug-edit-template~. The first\n  one asks for a registered debug template and starts the configuration using\n  the default values for that particular configuration. The latter creates a\n  debug template which could be customized before running.\n  ~dap-debug-edit-template~ will prepare a template deceleration inside a\n  temporary buffer. You should execute this code using ~C-M-x~ for the changes to\n  apply. You should also copy this code into your Emacs configuration if you wish to\n  make it persistent.\n\n  dap-mode also provides a [[https://github.com/abo-abo/hydra][hydra]] with ~dap-hydra~. You can automatically trigger\n  the hydra when the program hits a breakpoint by using the following code.\n\n  #+BEGIN_SRC emacs-lisp\n    (add-hook \'dap-stopped-hook\n              (lambda (arg) (call-interactively #\'dap-hydra)))\n  #+END_SRC\n* Screenshot\n** Java\n   [[file:screenshots/MultiSession.png]]\n** Swift\n   [[file:screenshots/Swift.png]]\n** RUST\n   #+caption: RUST via Native Debug\n   [[file:screenshots/rust.png]]\n** Go\n   [[file:screenshots/go.png]]\n** Javascript\n   #+caption: Javascript via Firefox debugger\n   [[file:screenshots/javascript.png]]\n* Features\n  - Launch/Attach\n  - Breakpoints\n  - Exceptions\n  - Pause & Continue\n  - Step In/Out/Over\n  - Callstacks\n  - Threads\n  - Multiple simultaneous debug sessions\n  - Evaluating statements\n  - Debug/Run configurations\n** Debugger commands\n   | Command                        | Description                                                     |\n   |--------------------------------+-----------------------------------------------------------------|\n   | ~dap-breakpoint-toggle~        | Toggle breakpoint at line                                       |\n   | ~dap-breakpoint-delete~        | Delete breakpoint at line                                       |\n   | ~dap-breakpoint-add~           | Add java breakpoint at line                                     |\n   | ~dap-breakpoint-condition~     | Set/unset breakpoint condition                                  |\n   | ~dap-breakpoint-hit-condition~ | Set/unset breakpoint hit condition                              |\n   | ~dap-breakpoint-log-message~   | Set/unset breakpoint log message                                |\n   | ~dap-eval~                     | Eval string                                                     |\n   | ~dap-eval-region~              | Eval region string                                              |\n   | ~dap-eval-thing-at-point~      | Eval symbol at point                                            |\n   | ~dap-step-in~                  | Debug step in                                                   |\n   | ~dap-next~                     | Debug next                                                      |\n   | ~dap-step-out~                 | Debug step out                                                  |\n   | ~dap-stop-thread~              | Stop thread                                                     |\n   | ~dap-restart-frame~            | Restart frame                                                   |\n   | ~dap-continue~                 | Debug continue                                                  |\n   | ~dap-disconnect~               | Cancel current debug session                                    |\n   | ~dap-switch-stack-frame~       | Switch active stack frame                                       |\n   | ~dap-switch-thread~            | Switch active thread                                            |\n   | ~dap-switch-session~           | Switch active session                                           |\n   | ~dap-debug-edit-template~      | Generate run command                                            |\n   | ~dap-debug~                    | Create and run new configuration using the available templates  |\n   | ~dap-debug-last~               | Debug previous configuration                                    |\n   | ~dap-debug-recent~             | Select configuration to run from the previously started command |\n   | ~dap-go-to-output-buffer~      | Go output buffer                                                |\n** Windows\n   | Command                         | Description                          |\n   |---------------------------------+--------------------------------------|\n   | ~dap-ui-sessions~               | Show active/terminated sessions view |\n   | ~dap-ui-locals~                 | Show locals view                     |\n   | ~dap-ui-breakpoints~            | Show breakpoints view                |\n   | ~dap-ui-inspect~                | Inspect                              |\n   | ~dap-ui-repl~                   | DAP UI REPL                          |\n   | ~dap-ui-inspect-region~         | Inspect region                       |\n   | ~dap-ui-inspect-thing-at-point~ | Inspect symbol at point              |\n\n** Sessions\n   The session view is showed after invoking ~dap-ui-sessions~ . It represents\n   the list of the active sessions.\n*** Keybindings\n    | Command                     | Description                                                 | Keybindings |\n    |-----------------------------+-------------------------------------------------------------+-------------|\n    | ~dap-ui-session-select~     | Select object at point                                      | <return>    |\n    | ~dap-ui-session-remove~ WIP | Remove terminated session from the list of running sessions |             |\n    | ~tree-mode-toggle-expand~   | Toggle node expand state                                    | <tab>       |\n** Locals\n   Locals can be viewed after invoking ~dap-ui-locals~.\n** Breakpoints\n   Breakpoints can be viewed after invoking ~dap-ui-breakpoints~.\n*** Keybindings\n    | Command                              | Description                    | Keybindings |\n    |--------------------------------------+--------------------------------+-------------|\n    | ~dap-ui-breakpoints-goto~            | Go to breakpoint under cursor  | <return>    |\n    | ~dap-ui-breakpoints-delete~          | Delete breakpoint under cursor | d           |\n    | ~dap-ui-breakpoints-delete-selected~ | Delete selected breakpoints    | D           |\n    | ~bui-list-mark~                      | Mark breakpoint under point    | m           |\n    | ~bui-list-unmark~                    | Unmark breakpoint under point  | u           |\n    | ~bui-list-unmark-all~                | Unmark breakpoint under point  | U           |\n** Loaded sources\n   Loaded sources can be viewed by invoking ~dap-tm-loaded-sources~.\n** DAP debug REPL\n   DAP provides a debug shell to execute commands when the program has hit\n   breakpoints. The REPL has the same features as regular emacs shells (e.g.\n   command history, ~C-p/n~ navigation through history, etc.) in addition to\n   optional ~company-mode~ autocompletion.\n   [[file:screenshots/dap-ui-repl.png]]\n* Configuration\n** DAP mode configuration\n   Enable both ~dap-mode~ and ~dap-ui-mode~.\n   #+BEGIN_SRC emacs-lisp\n     (dap-mode 1)\n     (dap-ui-mode 1)\n     ;; enables mouse hover support\n     (dap-tooltip-mode 1)\n     ;; use tooltips for mouse hover\n     ;; if it is not enabled `dap-mode\' will use the minibuffer.\n     (tooltip-mode 1)\n   #+END_SRC\n   After enabling DAP mode on emacs side follow the language specific settings.\n** Java\n*** Installation\n    Latest version of [[https://github.com/emacs-lsp/lsp-java][LSP Java]] will automatically discover if ~dap-mode~ is\n    present and it will download and install the required server side\n    components. If you have already downloaded a ~Eclispe JDT Server~ you will\n    have to force a server update via ~lsp-java-update-server~. In order to enable lsp java,\n    you will have to require ~dap-java.el~.\n    #+BEGIN_SRC emacs-lisp\n      (require \'dap-java)\n    #+END_SRC\n*** Commands\n    | Command                      | Description       |\n    |------------------------------+-------------------|\n    | ~dap-java-debug~             | Debug java        |\n    | ~dap-java-run-test-method~   | Run test method   |\n    | ~dap-java-debug-test-method~ | Debug test method |\n    | ~dap-java-run-test-class~    | Run test class    |\n    | ~dap-java-debug-test-class~  | Debug test class  |\n\nYou can also edit one of the existing templates and execute it with\n~dap-debug~. dap-mode will take care of filling missing values, such as\nclasspath. JVM arguments can be specified with ~:vmArgs~:\n\n#+BEGIN_SRC emacs-lisp\n  (dap-register-debug-template "My Runner"\n                               (list :type "java"\n                                     :request "launch"\n                                     :args ""\n                                     :vmArgs "-ea -Dmyapp.instance.name=myapp_1"\n                                     :projectName "myapp"\n                                     :mainClass "com.domain.AppRunner"\n                                     :env \'(("DEV" . "1"))))\n#+END_SRC\n** Python\n*** Installation\n    - install latest version of ptvsd.\n      #+BEGIN_SRC bash\n        pip install "ptvsd>=4.2"\n      #+END_SRC\n      - Then add the following line in your config:\n      #+BEGIN_SRC elisp\n        (require \'dap-python)\n      #+END_SRC\n      This will add the python related configuration to  ~dap-debug~.\n\n*** Usage\nA template named "Python :: Run Configuration" will appear, which will execute\nthe currently visited module. This will fall short whenever you need to specify\narguments, environment variables or execute a setuptools based script. In such\ncase, define a template:\n\n#+BEGIN_SRC emacs-lisp\n  (dap-register-debug-template "My App"\n    (list :type "python"\n          :args "-i"\n          :cwd nil\n          :env \'(("DEBUG" . "1"))\n          :target-module (expand-file-name "~/src/myapp/.env/bin/myapp")\n          :request "launch"\n          :name "My App"))\n#+END_SRC\n\n** Ruby\n    - Download and extract [[https://marketplace.visualstudio.com/items?itemName=rebornix.Ruby][VSCode Ruby Extension]]. You can do that either by:\n      - Calling ~dap-ruby-setup~, the extension will be downloaded and all your path will be automatically set up.\n      - Or download the extension manually. Make sure that ~dap-ruby-debug-program~ is: ~("node" path-to-main-js)~ where ~node~ is either "node" if nodejs is on the path or path to nodejs and ~path-to-main-js~ is full path ~./out/debugger/main.js~ which is part of the downloaded VScode package.\n    - Follow the instructions on installing ~rdebug-ide~ from [[https://github.com/rubyide/vscode-ruby/wiki/1.-Debugger-Installation][Ruby Debug Installation]]\n    - Put in your emacs configuration.\n      #+BEGIN_SRC elisp\n        (require \'dap-ruby)\n      #+END_SRC\n** LLDB\n*** Installation\n    LLDB is a debugger that supports, among others, C, C++, Objective-C and Swift.\n\n    - Clone and follow the instructions to compile lldb-vscode from https://github.com/llvm-mirror/lldb/tree/master/tools/lldb-vscode\n    - Put in your emacs configuration.\n      #+BEGIN_SRC elisp\n        (require \'dap-lldb)\n      #+END_SRC\n\n    *Note*: For proper Swift support, you need to compile LLDB from https://github.com/apple/swift-lldb and put the compiled LLDB library/framework in the "extensions" folder.\n\n** Elixir\n   Make sure that you have properly configured ~Elixir~ and that you have [[https://github.com/elixir-lsp/elixir-ls][Elixir LS]]\n   binaries on the path and put in your emacs configuration.\n   #+BEGIN_SRC elisp\n     (require \'dap-elixir)\n   #+END_SRC\n   Then when you do ~dap-debug-edit-template~ and select Elixir which will\n   generate runnable debug configuration. For more details on supported settings\n   by the Elixir Debug Server refer to its documentation.\n** PHP\n   Simplify setup of vscode extension with ~dap-php-setup~ after requiring ~dap-php~.\n\n   This is using [[https://github.com/felixfbecker/vscode-php-debug][felixbecker/vscode-php-debug]]\n   ([[https://marketplace.visualstudio.com/items?itemName=felixfbecker.php-debug][downloadable from the marketplace]])\n   as dap-server between emacs and the xdebug-extension on the http-server side. Make sure it is trans/compiled to\n   javascript properly. Only tested under linux with node.\n   #+BEGIN_SRC elisp\n     (require \'dap-php)\n   #+END_SRC\n   Start debugging by selecting "PHP Run Configuration" from the ~dap-debug~ menu, issue the debug request in your\n   browser by choosing the running thread (~dap-switch-thread~) and then ~dap-step-in~.\n** Native Debug (GDB/LLDB)\n   Using https://github.com/WebFreak001/code-debug\n*** Configuration\n    For easier of setting up vscode extension, you only need call ~dap-gdb-lldb-setup~ after requiring ~dap-gdb-lldb~.\n\n    Or download and extract [[https://marketplace.visualstudio.com/items?itemName=webfreak.debug][VSCode extension]] (make sure that ~dap-gdb-lldb-path~ is pointing to the extract location).\n    #+BEGIN_SRC elisp\n      (require \'dap-gdb-lldb)\n    #+END_SRC\n    Then do ~dap-debug~ or ~dap-debug-edit-template~ and selet GBD or LLDB configuration.\n** Go\n*** Installation\n    - For easier of setting up vscode extension, you only need call ~dap-go-setup~ after requiring ~dap-go~.\n      - Or manually download and extract [[https://marketplace.visualstudio.com/items?itemName=ms-vscode.Go][VSCode Go Extension]].\n    - Install the delve command by following instructions on [[https://github.com/go-delve/delve/tree/master/Documentation/installation][delve - installation]].\n    - Put in your emacs configuration.\n      #+BEGIN_SRC elisp\n        (require \'dap-go)\n      #+END_SRC\n** Javascript\n*** Firefox\n**** Installation\n     - For easier of setting up vscode extension, you only need call ~dap-firefox-setup~ after requiring ~dap-firefox~.\n       - Or manually download and extract [[https://marketplace.visualstudio.com/items?itemName=hbenl.vscode-firefox-debug][VSCode Firefox Debug Extension]].\n     - Make sure that ~dap-firefox-debug-program~ is pointing to the proper file.\n     - Put in your configuration file:\n       #+BEGIN_SRC elisp\n         (require \'dap-firefox)\n       #+END_SRC\n**** Usage\n     ~dap-debug~ or ~dap-debug-edit-template~ and select the firefox template. For additional documentation on the supported template parameters or about different configuration templates refer to [[https://github.com/hbenl/vscode-firefox-debug][Firefox Debug Adapter]].\n*** Chrome\n**** Installation\n     - For easier of setting up vscode extension, you only need call ~dap-chrome-setup~ after requiring ~dap-chrome~.\n       - Or manually download and extract [[https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-chrome][VSCode Chrome Debug Extension]].\n     - Make sure that ~dap-chrome-debug-program~ is pointing to the proper file.\n     - Put in your configuration file:\n       #+BEGIN_SRC elisp\n         (require \'dap-chrome)\n       #+END_SRC\n**** Usage\n     ~dap-debug~ or ~dap-debug-edit-template~ and select the chrome template. For additional documentation on the supported template parameters or about different configuration templates refer to [[https://github.com/Microsoft/vscode-chrome-debug][Chrome Debug Adapter]].\n*** Microsoft Edge\n**** Installation\n     - For easier of setting up vscode extension, you only need call ~dap-edge-setup~ after requiring ~dap-edge~.\n       - Or manually download and extract [[https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-edge][VSCode Edge Debug Extension]].\n     - Make sure that ~dap-edge-debug-program~ is pointing to the proper file.\n     - Put in your configuration file:\n       #+BEGIN_SRC elisp\n         (require \'dap-edge)\n       #+END_SRC\n**** Usage\n     ~dap-debug~ or ~dap-debug-edit-template~ and select the edge template. For additional documentation on the supported template parameters or about different configuration templates refer to [[https://github.com/microsoft/vscode-edge-debug2][Edge Debug Adapter]].\n*** Node\n**** Installation\n     - For easier of setting up vscode extension, you only need call ~dap-node-setup~ after requiring ~dap-node~.\n       - Or manually download and extract [[https://marketplace.visualstudio.com/items?itemName=ms-vscode.node-debug2][VSCode Node Debug Extension]].\n     - Make sure that ~dap-node-debug-program~ is pointing to the proper file.\n     - Put in your configuration file:\n       #+BEGIN_SRC elisp\n         (require \'dap-node)\n       #+END_SRC\n**** Usage\n     ~dap-debug~ or ~dap-debug-edit-template~ and select the node template. For additional documentation on the supported template parameters or about different configuration templates refer to [[https://code.visualstudio.com/docs/nodejs/nodejs-debugging][Nodejs Debugging]].\n** Powershell\n   #+BEGIN_SRC elisp\n     (require \'dap-pwsh)\n   #+END_SRC\n   Start debugging by selecting "Powershell: Launch Script" from ~dap-debug~ menu.\n\n* Extending DAP with new Debug servers\n  There are two methods that are used for registering remote extensions:\n  - ~dap-register-debug-provider~ - register a method to call for populating\n    startup parameters. It should either populate ~:debugPort~ and ~:host~ in\n    case of TCP Debug Adapter Server or ~:dap-server-path~ when STD out must be used for\n    Debug Adapter Server communication.\n  - ~dap-register-debug-template~ register a debug template which will be\n    available when ~dap-debug~ is called. The debug template must specify\n    ~:type~ key which will be used to determine the provider to be called to\n    populate missing fields.\n*** Example\n    For full example you may check ~dap-java.el~.\n    #+BEGIN_SRC emacs-lisp\n      (dap-register-debug-provider\n       "programming-language-name"\n       (lambda (conf)\n         (plist-put conf :debugPort 1234)\n         (plist-put conf :host "localhost")\n         conf))\n\n      (dap-register-debug-template "Example Configuration"\n                                   (list :type "java"\n                                         :request "launch"\n                                         :args ""\n                                         :name "Run Configuration"))\n    #+END_SRC\n* Links\n  - [[https://code.visualstudio.com/docs/extensionAPI/api-debugging][Debug Adapter Protocol]]\n  - [[https://github.com/emacs-lsp/lsp-java][LSP Java]]\n  - [[https://microsoft.github.io/debug-adapter-protocol/implementors/adapters/][Debug Adapter Protocol Server Implementations]]\n* Troubleshooting\n  If you notice a bug, open an issue on Github Issues.\n* Acknowledgments\n  - [[https://github.com/danielmartin][Daniel Martin]] - LLDB integration.\n  - [[https://github.com/kiennq][Kien Nguyen]] - NodeJS debugger, Edge debuggers, automatic extension installation.\n  - [[https://github.com/Ladicle][Aya Igarashi]] - Go debugger integration.\n\n* What\'s next\n  - Watches\n'