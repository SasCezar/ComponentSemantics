b'# Helpful [![Build Status](https://travis-ci.org/Wilfred/helpful.svg?branch=master)](https://travis-ci.org/Wilfred/helpful) [![Coverage Status](https://coveralls.io/repos/github/Wilfred/helpful/badge.svg?branch=master)](https://coveralls.io/github/Wilfred/helpful?branch=master) [![MELPA](http://melpa.org/packages/helpful-badge.svg)](http://melpa.org/#/helpful) [![](https://tokei.rs/b1/github/wilfred/helpful)](https://github.com/Aaronepower/tokei)\n\nHelpful is an alternative to the built-in Emacs help that provides\nmuch more contextual information.\n\n![screenshot](screenshots/helpful.png)\n\n## Usage\n\nInstall from MELPA, then call one of the following commands:\n\n* `helpful-callable`\n* `helpful-function`\n* `helpful-macro`\n* `helpful-command`\n* `helpful-key`\n* `helpful-variable`\n* `helpful-at-point`\n\nIf you want to replace the default Emacs help keybindings, you can do\nso:\n\n``` emacs-lisp\n;; Note that the built-in `describe-function\' includes both functions\n;; and macros. `helpful-function\' is functions only, so we provide\n;; `helpful-callable\' as a drop-in replacement.\n(global-set-key (kbd "C-h f") #\'helpful-callable)\n\n(global-set-key (kbd "C-h v") #\'helpful-variable)\n(global-set-key (kbd "C-h k") #\'helpful-key)\n```\n\nI also recommend the following keybindings to get the most out of\nhelpful:\n\n``` emacs-lisp\n;; Lookup the current symbol at point. C-c C-d is a common keybinding\n;; for this in lisp modes.\n(global-set-key (kbd "C-c C-d") #\'helpful-at-point)\n\n;; Look up *F*unctions (excludes macros).\n;;\n;; By default, C-h F is bound to `Info-goto-emacs-command-node\'. Helpful\n;; already links to the manual, if a function is referenced there.\n(global-set-key (kbd "C-h F") #\'helpful-function)\n\n;; Look up *C*ommands.\n;;\n;; By default, C-h C is bound to describe `describe-coding-system\'. I\n;; don\'t find this very useful, but it\'s frequently useful to only\n;; look at interactive functions.\n(global-set-key (kbd "C-h C") #\'helpful-command)\n```\n\n[Ivy](https://github.com/abo-abo/swiper) users can use Helpful with\ncounsel commands:\n\n``` emacs-lisp\n(setq counsel-describe-function-function #\'helpful-callable)\n(setq counsel-describe-variable-function #\'helpful-variable)\n```\n\n## Features\n\n### Source code\n\n![screenshot](screenshots/helpful_source.png)\n\nHelpful will try really hard to show the source code. It shows the\nsource code for interactively defined functions (unlike the built-in\nHelp) and falls back to the raw sexp if no source is available.\n\n### View Callers\n\n![screenshot](screenshots/helpful_refs.png)\n\nHelpful will show you where a function is being called!\n\n### Prettier Docstrings\n\n![screenshot](screenshots/helpful_docstring.png)\n\nDocstrings in helpful:\n\n* Highlight the summary (the first sentence)\n* Include cross-references to other functions/variables\n* Linkify references to Info nodes\n* Hide superfluous punctuation\n\n![screenshot](screenshots/helpful_view_in_manual.png)\n\nIf a symbol is also documented in the Info manual, helpful will\nprovide a link to the relevant section too.\n\n### Symbol Properties\n\n![screenshot](screenshots/helpful_props.png)\n\nHelpful will show you the properties that have been applied to the\ncurrent symbol. This provides visibility of features\nlike edebug or byte-code optimisation.\n\nHelpful will also highlight any symbol aliases.\n\n### Describe Commands\n\nHelpful provides a separate `helpful-command` function, for when you\njust want to view interactive functions.\n\n### View Keymaps\n\n![screenshot](screenshots/helpful_bindings.png)\n\nHelpful displays any keybindings that apply to interactive functions.\n\n### Integrated Tooling\n\n![screenshot](screenshots/helpful_tools.png)\n\nYou can trace, debug or disassemble functions from inside\nHelpful. This is discoverable and doesn\'t require memorisation of\ncommands.\n\n### Aliases\n\n![screenshot](screenshots/helpful_aliases.png)\n\nIf a function has multiple aliases in Emacs, Helpful will show all of\nthe aliases defined.\n\n## Inspirations\n\nThis project has been heavily influenced by:\n\n* [help+.el](https://www.emacswiki.org/emacs/help+.el), help-fns+.el, help-mode+.el\n* [Dave Williams\' demo of Lucid\'s Energize](https://www.youtube.com/watch?v=pQQTScuApWk)\n\n## License\n\nGPLv3+.\n\nI am providing code in the repository to you under an open source\nlicense. Because this is my personal repository, the license you\nreceive to my code is from me and not my employer.\n'