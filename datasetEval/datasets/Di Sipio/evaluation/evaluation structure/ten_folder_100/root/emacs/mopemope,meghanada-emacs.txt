b'# Meghanada-Mode [![MELPA](https://melpa.org/packages/meghanada-badge.svg)](https://melpa.org/#/meghanada) [![MELPA](http://melpa-stable.milkbox.net/packages/meghanada-badge.svg)](http://melpa-stable.milkbox.net/#/meghanada)\n\n[![Join the chat at https://gitter.im/mopemope/meghanada-emacs](https://badges.gitter.im/mopemope/meghanada-emacs.svg)](https://gitter.im/mopemope/meghanada-emacs?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge) [![Patreon](https://img.shields.io/badge/patreon-become%20a%20patron-red.svg)](https://www.patreon.com/mopemope)\n\n## A Better Java Development Environment for Emacs\n\n`Meghanada` is a new minor-mode (`meghanada-mode`) that aims at improving the editing\nexperience for Java. It works by using a combination of an Emacs\npackage and [meghanada-server][].\n\n**Features:**\n\n* Easy install\n* Auto-update server module\n* [Gradle][] and [Maven][] and Eclipse project support\n* No need build tool\'s plugin\n* Run build tool task\n* Compile your project\n* Syntax check and analyze java source (`flycheck-meghanada`)\n* Support `Generic Types`\n* Code completion with [company-mode][] (`company-meghanada`)\n* Optimize import and sort\n* Jump declaration\n* Run [JUnit][] test (include test runner)\n* Diagnostic reporting with [flycheck][] (`flycheck-meghanada`)\n* Show symbol\'s type info with `el-doc`\n* Search references\n* Full-featured text search\n\n`Meghanada` is tested under `Linux`, `Windows` and `macOS`.\n\n(Welcome contributions !)\n\n## Dependencies\n\nMeghanada has been developed Emacs 25.1.1\n\n### Elisp dependencies\n\n| Package              | Version                           |\n| -------------------- | --------------------------------- |\n| `cl-lib`             | 0.5                               |\n| [yasnippet][]        | 0.6.1                             |\n| [company-mode][]     | 0.9.0                             |\n| [flycheck][]         | 0.23                              |\n\n### Meghanada-Server\n\n`meghanada-mode` require [meghanada-server][] and JDK (not JRE).\n[meghanada-server][] provides an interface to `meghanada-mode`. It uses a simple protocol\nbased on S-expressions. This server, written in Java, requires the following\npackages to be installed on your system:\n\n* JDK 1.8 or later\n\nThe Meghanada architecture is almost the same as `ensime`. It is a client-server model.\n\nMeghanada updates any information when saving and compile the java file.\n\nIf the completion candidate and others are incorrect, please fix the compile error.\n\n### Telemetry\n\nIf you can help improve server performance etc. please enable Telemetry.\n\nIf you allow Meghanada to submit performance data, the Telemetry system will collect and submit various measurement data from the user environment, such as Meghanada\'s performance.\n\n## Installation\n\n### Elisp\n\nInstall meghanada from melpa.\n\n#### Configuration\n\n```elisp\n(require \'meghanada)\n(add-hook \'java-mode-hook\n          (lambda ()\n            ;; meghanada-mode on\n            (meghanada-mode t)\n            ;; enable telemetry\n            (meghanada-telemetry-enable t)\n            (flycheck-mode +1)\n            (setq c-basic-offset 2)\n            ;; use code format\n            (add-hook \'before-save-hook \'meghanada-code-beautify-before-save)))\n(cond\n   ((eq system-type \'windows-nt)\n    (setq meghanada-java-path (expand-file-name "bin/java.exe" (getenv "JAVA_HOME")))\n    (setq meghanada-maven-path "mvn.cmd"))\n   (t\n    (setq meghanada-java-path "java")\n    (setq meghanada-maven-path "mvn")))\n```\n\n### Meghanada-Server\n\nThe server will be automatically installed to `~/.emacs.d/meghanada/meghanada-x.x.jar`.\n\nIf you open a java file and set `meghanada-mode`, a [meghanada-server][] process starts automatically and connects to your emacs.\n\n### Updating\n\nThe server will be automatically updated. To manually update bellows, type\n\n```\nM-x meghanada-update-server\n```\n\n### Manual Server Installation\n\nThe server will be installed and updated automatically.\n\nIf you set it up manually, please follow the instructions below.\n\n#### Download meghanada-setup.jar\n\nA meghanada-setup.jar is a small program that automatically updates the server.\n\nThis can be downloaded from:\n\nhttps://github.com/mopemope/meghanada-server/releases/download/v1.0.13/meghanada-setup-0.0.2.jar\n\nMove the downloaded setup.jar to .emacs.d/meghanada/.\nStart Emacs and enable meghanada-mode.\n\n## Autocompletion\n\nAuto-completion is supported by `company-mode`.\n\nCompletion matcher is selectable. see type `M-x customize-group RET meghanada`.\n\n## Syntax/error checking\nError checking is supported by `flycheck`.\n\n## Customize\n\nTo customize other aspects of its behavior, type `M-x customize-group RET meghanada`.\n\n## Usage\n\nHere is a list of available interactive commands.\n\n### meghanada-install-server\n\nDownload and install [meghanada-server] jar.\n\n### meghanada-update-server\n\nDownload and update [meghanada-server] jar. and restart the server process.\n\n### meghanada-server-start\n\nStart [meghanada-server][] process and connect to the server.\n\n`meghanada-mode` call this function by default. when open java file and set `meghanada-mode`.\n\n### meghanada-restart\n\nRestart [meghanada-server][] process and client process.\n\n### meghanada-server-kill\n\nKill [meghanada-server][] process.\n\n### meghanada-client-direct-connect\n\nConnect to other [meghanada-server][] directly.\n\n### meghanada-client-connect\n\nConnect to [meghanada-server][] . Call automatically at the start `meghanada-mode`.\n\n### meghanada-client-disconnect\n\nDisconnect from [meghanada-server][] .\n\n### meghanada-client-ping\n\nSend ping [meghanada-server][]\n\n### meghanada-clear-cache\n\nClear [meghanada-server][]\'s project cache data.\n\n### meghanada-import-all (C-c C-r i)\n\nAdd import all unqualified classes.\n\n### meghanada-optimize-import (C-c C-r o)\n\nImport all and remove unused import statement.\n\nThe format of the import statement will be in `google-java-format`.\n\n### meghanada-import-at-point\n\nAdd import statement from symbol at point.\n\n### meghanada-local-variable (C-c C-r r)\n\nIntroduce local variable. (need expression is end `;`)\n\n### meghanada-compile-file (C-c C-c C-c)\n\nCompile file (and related files).\n\n### meghanada-project-show\n\nShow project details.\n\n### meghanada-project-compile (C-c C-c c)\n\nCompile project (full build and reindex).\n\n### meghanada-switch-testcase (C-M-,)\n\nSwitch test case or source.\n\n### meghanada-exec-main\n\nRun main class.\n\n### meghanada-debug-main\n\nDebug main class.\n\n### meghanada-reference\n\nFind usage (method call, field access, class).\n\n### meghanada-search-everywhere\n\nIt does a full-text search based search (class, method, symbol (field)).\n\n### meghanada-search-everywhere-ex\n\nIt does a full-text search expert-mode (Enter a query for Lucene).\n\nHere is a list of fields that can be used in the search.\n\n* package\n* class\n* method\n* symbol\n* usage\n* dc (method\'s or field\'s declaring class)\n\nex. Seach class name contains `Search`.\n\n```\nclass:*Search*\n```\n\nIt can also use `AND operator`.\n\n```\ndc:*Optional* AND usage:get\n```\n\n\n### meghanada-typeinfo\n\nShow type hierarchies and implements interfaces.\n\n### meghanada-run-junit-class (C-c C-c C-t)\n\nRun JUnit test class.\n\n### meghanada-run-junit-test-case (C-c C-c t)\n\nRun JUnit test case (select from imenu).\n\n### meghanada-debug-junit-class (C-c C-c C-t)\n\nDebug JUnit test class.\n\n### meghanada-debug-junit-test-case (C-c C-c t)\n\nDebug JUnit test case (select from imenu).\n\n### meghanada-run-task (C-c C-v t)\n\nRun build tool task.\n\n### meghanada-jump-declaration (M-.)\n\nGoto declaration.\n\n### meghanada-back-jump (M-,)\n\nGo back from declaration position.\n\n### meghanada-code-beautify\n\nFormat buffer code. The default formatter is `google-java-format`\n\n## Customize code formatter\n\n`meghanada-mode` uses `google-java-format` by default for formatter.\n\nIt also supports Eclipse formatter.\nIf you want to customize the formatter, you use the exported eclipse format settings.\nTo import the settings, change the name of the exported file to `meghanadaFormatter.xml` and put it in the `project root` or `subproject root`.\n\n## Debug\n\n`meghanada-mode` has no debugger yet. However, the external debugger is supported.\n\nif you want to debug your code, execute `meghanada-debug-xxxx` function and then use [realgud][], etc.\n\n```\n# in Emacs now:\n M-x meghanada-debug-junit-class\n Please wait ...\n M-x realgud:jdb\n Run jdb (like this): jdb -attach 6006\n Set uncaught java.lang.Throwable\n   Set deferred uncaught java.lang.Throwable\n   Initializing jdb ...\n   >\n   VM Started: No frames on the current call stack\n\n   main[1] stop at example.MyClass:100 // set breakpoint\n   main[1] run\n```\n\n## Troubleshooting\n\nSee `*meghanada-server-log*` buffer. or `(temporary-file-directory)meghanada_server_(user-uid).log`, e.g. `/tmp/meghanada_server_1000.log`.\n\nPlease press `C-g` when emacs seems to hang.\n\n## Setting example\n\n```elisp\n(use-package autodisass-java-bytecode\n  :ensure t\n  :defer t)\n\n(use-package google-c-style\n  :defer t\n  :ensure t\n  :commands\n  (google-set-c-style))\n\n(use-package meghanada\n  :defer t\n  :init\n  (add-hook \'java-mode-hook\n            (lambda ()\n              (google-set-c-style)\n              (google-make-newline-indent)\n              (meghanada-mode t)\n              (smartparens-mode t)\n              (rainbow-delimiters-mode t)\n              (highlight-symbol-mode t)\n              (add-hook \'before-save-hook \'meghanada-code-beautify-before-save)))\n\n  :config\n  (use-package realgud\n    :ensure t)\n  (setq indent-tabs-mode nil)\n  (setq tab-width 2)\n  (setq c-basic-offset 2)\n  (setq meghanada-server-remote-debug t)\n  (setq meghanada-javac-xlint "-Xlint:all,-processing")\n  :bind\n  (:map meghanada-mode-map\n        ("C-S-t" . meghanada-switch-testcase)\n        ("M-RET" . meghanada-local-variable)\n        ("C-M-." . helm-imenu)\n        ("M-r" . meghanada-reference)\n        ("M-t" . meghanada-typeinfo)\n        ("C-z" . hydra-meghanada/body))\n  :commands\n  (meghanada-mode))\n\n(defhydra hydra-meghanada (:hint nil :exit t)\n"\n^Edit^                           ^Tast or Task^\n^^^^^^-------------------------------------------------------\n_f_: meghanada-compile-file      _m_: meghanada-restart\n_c_: meghanada-compile-project   _t_: meghanada-run-task\n_o_: meghanada-optimize-import   _j_: meghanada-run-junit-test-case\n_s_: meghanada-switch-test-case  _J_: meghanada-run-junit-class\n_v_: meghanada-local-variable    _R_: meghanada-run-junit-recent\n_i_: meghanada-import-all        _r_: meghanada-reference\n_g_: magit-status                _T_: meghanada-typeinfo\n_l_: helm-ls-git-ls\n_q_: exit\n"\n  ("f" meghanada-compile-file)\n  ("m" meghanada-restart)\n\n  ("c" meghanada-compile-project)\n  ("o" meghanada-optimize-import)\n  ("s" meghanada-switch-test-case)\n  ("v" meghanada-local-variable)\n  ("i" meghanada-import-all)\n\n  ("g" magit-status)\n  ("l" helm-ls-git-ls)\n\n  ("t" meghanada-run-task)\n  ("T" meghanada-typeinfo)\n  ("j" meghanada-run-junit-test-case)\n  ("J" meghanada-run-junit-class)\n  ("R" meghanada-run-junit-recent)\n  ("r" meghanada-reference)\n\n  ("q" exit)\n  ("z" nil "leave"))\n```\n\n## TODO\n\n* Refactoring\n\n## Contributing\n\nContributions are extremely welcome! Please push PR to `dev` branch.\n\n## License\n\nGPL v3, See [LICENSE](LICENSE) file.\n\n\n\n[meghanada-server]: https://github.com/mopemope/meghanada-server\n[Maven]: http://maven.apache.org/\n[Gradle]: https://gradle.org\n[company-mode]: http://company-mode.github.io/\n[flycheck]: http://flycheck.org\n[JUnit]: http://www.junit.org/\n[yasnippet]: http://joaotavora.github.io/yasnippet/\n[realgud]: https://github.com/realgud/realgud\n'