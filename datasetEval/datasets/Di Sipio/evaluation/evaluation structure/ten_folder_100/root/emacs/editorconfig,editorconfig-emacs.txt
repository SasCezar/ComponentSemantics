b'[![Build Status](https://travis-ci.org/editorconfig/editorconfig-emacs.svg?branch=master)](https://travis-ci.org/editorconfig/editorconfig-emacs)\n[![MELPA](https://melpa.org/packages/editorconfig-badge.svg)](http://melpa.org/#/editorconfig)\n[![MELPA Stable](https://stable.melpa.org/packages/editorconfig-badge.svg)](https://stable.melpa.org/#/editorconfig)\n\n\n# EditorConfig Emacs Plugin\n\nThis is an [EditorConfig][] plugin for [Emacs][].\n\n\n## Setup\n\nThis package is available from [MELPA][] and [MELPA Stable][].\nInstall from there and enable global minor-mode `editorconfig-mode`:\n\n```emacs-lisp\n(editorconfig-mode 1)\n```\n\nIf you use [**use-package**][use-package], add the following to your\n`init.el` file:\n\n```emacs-lisp\n(use-package editorconfig\n  :ensure t\n  :config\n  (editorconfig-mode 1))\n```\n\n\nTo install manually, copy all `.el` files in this repository to\n`~/.emacs.d/lisp` and add the following:\n\n```emacs-lisp\n(add-to-list \'load-path "~/.emacs.d/lisp")\n(require \'editorconfig)\n(editorconfig-mode 1)\n```\n\n### Install a Core Program\n\nThis package requires a Core program.\nThe officially recommended one is [EditorConfig C Core][],\nfollow the instructions in the README and INSTALL files to install it.\n\nThough using C Core is recommended, but this plugin also\nincludes a core library implemented in Emacs Lisp.\nThis plugin uses this as a fallback method when no core executable\nis found, so it works out-of-the-box without explicitly installing\nany other core program.\n\n\n\n## Supported properties\n\nCurrent Emacs plugin coverage for EditorConfig\'s [properties][]:\n\n* `indent_style`\n* `indent_size`\n* `tab_width`\n* `end_of_line`\n* `charset`\n* `trim_trailing_whitespace`\n* `insert_final_newline = true` is supported\n* <del>`insert_final_newline = false`</del> is not enforced\n  (as in trailing newlines actually being removed automagically),\n  we just buffer-locally override any preferences that would auto-add them\n  to files `.editorconfig` marks as trailing-newline-free\n* `max_line_length`\n* `file_type_ext` (Experimental)\n* `file_type_emacs` (Experimental)\n* `root` (only used by EditorConfig core)\n\nNot yet covered properties marked with <del>over-strike</del>\n\xe2\x80\x93 pull requests implementing missing features warmly welcomed!\nTypically, you will want to tie these to native functionality,\nor the configuration of existing packages handling the feature.\n\nAs several packages have their own handling of, say, indentation,\nwe might not yet cover some mode you use, but we try to add the\nones that show up on our radar. Similarly, we don\'t yet hook\nin to all different packages for whitespace trimming to inform\nthem about editorconfig settings, but aim for better coverage\nof things like\n[ws-trim](ftp://ftp.lysator.liu.se/pub/emacs/ws-trim.el).\n\n\n### File Type\n\nThis plugin has experimental supports for `file_type_ext` and\n`file_type_emacs`, which specify "file types" for files.\nAs for Emacs, it means `major-mode` can be set.\n\n**file_type_ext** When it is set to `md` for `a.txt`, for example,\n`major-mode` will be decided as if the file name would be `a.txt.md`\n(and thus `markdown-mode` is likely to be used).\n\n**file_type_emacs** When it is set to `markdown` for `a.txt`,\n`markdown-mode`  will be enabled when opening `a.txt`.\n\nThese property are experimental and their meanings might change in the\nfuture updates. When both are specified, `file_type_ext` takes precedence.\n\n\n## Customize\n\n`editorconfig-emacs` provides some customize variables.\n\nHere are some of these variables: for the full list of available variables, \ntype <kbd>M-x customize-group [RET] editorconfig [RET]</kbd>.\n\n\n### `editorconfig-after-apply-functions`\n\n(Formerly `editorconfig-custom-hooks`)\n\nA list of functions after loading common EditorConfig settings, where you can\nset some custom variables or overwrite existing properties.\n\nFor example, `web-mode` has several variables for indentation offset size and\nEditorConfig sets them at once by `indent_size`. You may want to stop indenting\nonly blocks of `web-mode`: it can be achieved by adding following to your init.el:\n\n```emacs-lisp\n(add-hook \'editorconfig-after-apply-functions\n  (lambda (props) (setq web-mode-block-padding 0)))\n```\n\nYou can also define your own custom properties and enable them here.\n\n\n### `editorconfig-hack-properties-functions`\n\nA list of function to alter property values before applying them.\n\nThese functions will be run after loading \\".editorconfig\\" files and before\napplying them to current buffer, so that you can alter some properties from\n\\".editorconfig\\" before they take effect.\n\nFor example, Makefiles always use tab characters for indentation: you can\noverwrite \\"indent_style\\" property when current `major-mode` is a\n`makefile-mode` with following code:\n\n``` emacs-lisp\n(add-hook \'editorconfig-hack-properties-functions\n          \'(lambda (props)\n             (when (derived-mode-p \'makefile-mode)\n               (puthash \'indent_style "tab" props))))\n\n```\n\n\n### `editorconfig-indentation-alist`\n\nAlist of indentation setting methods by modes.\n\nFor the easiest case to add a new support for a major-mode, you just need to\nadd a pair of major-mode symbol and its indentation variables:\n\n```emacs-lisp\n(add-to-list \'editorconfig-indentation-alist\n  ;; Just an example, of course EditorConfig has already included this setting!\n  \'(c-mode c-basic-offset))\n```\n\n\n### `editorconfig-trim-whitespaces-mode`\n\nBuffer local minor-mode to use to trim trailing whitespaces.\n\nIf set, enable/disable that mode in accord with `trim_trailing_whitespace`\nproperty in `.editorconfig`.\nOtherwise, use Emacs built-in `delete-trailing-whitespace` function.\n\nOne possible value is\n[`ws-butler-mode`](https://github.com/lewang/ws-butler), with which\nonly lines touched get trimmed. To use it, add following to your\ninit.el:\n\n``` emacs-lisp\n(setq editorconfig-trim-whitespaces-mode\n      \'ws-butler-mode)\n```\n\n\n## Submitting Bugs and Feature Requests\n\nBugs, feature requests, and other issues should be submitted to the issue\ntracker: https://github.com/editorconfig/editorconfig-emacs/issues\n\n\n### Development\n\nMake and [CMake][] must be installed to run the tests\nlocally:\n\n    $ make test\n\n\n\n## License\n\nEditorConfig Emacs Plugin is free software: you can redistribute it\nand/or modify it under the terms of the GNU General Public License as\npublished by the Free Software Foundation, either version 3 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nGeneral Public License for more details.\n\nYou should have received a copy of the GNU General Public License along\nwith this program.  If not, see <https://www.gnu.org/licenses/>.\n\n\n\n[Emacs]: https://www.gnu.org/software/emacs/\n[MELPA]: https://melpa.org/#/editorconfig\n[MELPA Stable]: https://stable.melpa.org/#/editorconfig\n[use-package]: https://www.emacswiki.org/emacs/UsePackage\n[EditorConfig]: https://editorconfig.org\n[EditorConfig C Core]: https://github.com/editorconfig/editorconfig-core-c\n[properties]: https://editorconfig.org/#supported-properties\n[CMake]: https://cmake.org\n'