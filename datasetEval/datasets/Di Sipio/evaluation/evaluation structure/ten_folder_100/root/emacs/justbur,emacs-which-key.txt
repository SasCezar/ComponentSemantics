b'* which-key\n  [[http://melpa.org/#/which-key][http://melpa.org/packages/which-key-badge.svg]] [[http://stable.melpa.org/#/which-key][file:http://stable.melpa.org/packages/which-key-badge.svg]] [[https://travis-ci.org/justbur/emacs-which-key][file:https://travis-ci.org/justbur/emacs-which-key.svg?branch=master]]\n\n** Recent Changes\n\n*** 2019-08-01: Added =which-key-show-early-on-C-h=\n    Allows one to trigger =which-key= on demand, rather than automatically. See\n    the docstring and [[#manual-activation][Manual Activation]].\n\n*** 2017-12-13: Added =which-key-enable-extended-define-key=\n    Allows for a concise syntax to specify replacement text using =define-key=\n    or alternatives that use =define-key= internally. See the docstring and\n    [[#custom-string-replacement-options][Custom String Replacement]].\n\n*** 2017-11-13: Added =which-key-show-major-mode=\n    Shows active bindings in current major-mode map.\n** Introduction\n   =which-key= is a minor mode for Emacs that displays the key bindings\n   following your currently entered incomplete command (a prefix) in a\n   popup. For example, after enabling the minor mode if you enter =C-x= and wait\n   for the default of 1 second the minibuffer will expand with all of the\n   available key bindings that follow =C-x= (or as many as space allows given\n   your settings).  This includes prefixes like =C-x 8= which are shown in a\n   different face. Screenshots of what the popup will look like are included\n   below. =which-key= started as a rewrite of [[https://github.com/kai2nenobu/guide-key][guide-key-mode]], but the feature\n   sets have diverged to a certain extent.\n\n** Table of Contents                                                  :TOC_3:\n- [[#which-key][which-key]]\n  - [[#recent-changes][Recent Changes]]\n    - [[#2019-08-01-added-which-key-show-early-on-c-h][2019-08-01: Added =which-key-show-early-on-C-h=]]\n    - [[#2017-12-13-added-which-key-enable-extended-define-key][2017-12-13: Added =which-key-enable-extended-define-key=]]\n    - [[#2017-11-13-added-which-key-show-major-mode][2017-11-13: Added =which-key-show-major-mode=]]\n  - [[#introduction][Introduction]]\n  - [[#install][Install]]\n    - [[#melpa][MELPA]]\n    - [[#manually][Manually]]\n  - [[#initial-setup][Initial Setup]]\n    - [[#side-window-bottom-option][Side Window Bottom Option]]\n    - [[#side-window-right-option][Side Window Right Option]]\n    - [[#side-window-right-then-bottom][Side Window Right then Bottom]]\n    - [[#minibuffer-option][Minibuffer Option]]\n  - [[#manual-activation][Manual Activation]]\n  - [[#additional-commands][Additional Commands]]\n  - [[#special-features-and-configuration-options][Special Features and Configuration Options]]\n    - [[#popup-type-options][Popup Type Options]]\n    - [[#custom-string-replacement-options][Custom String Replacement Options]]\n    - [[#sorting-options][Sorting Options]]\n    - [[#paging-options][Paging Options]]\n    - [[#face-customization-options][Face Customization Options]]\n    - [[#other-options][Other Options]]\n  - [[#support-for-third-party-libraries][Support for Third-Party Libraries]]\n    - [[#key-chord][Key-chord]]\n    - [[#evil-operators][Evil operators]]\n    - [[#god-mode][God-mode]]\n  - [[#more-examples][More Examples]]\n    - [[#nice-display-with-split-frame][Nice Display with Split Frame]]\n  - [[#known-issues][Known Issues]]\n  - [[#thanks][Thanks]]\n\n** Install\n*** MELPA\n    After setting up [[http://melpa.org][MELPA]] as a repository, use =M-x package-install which-key=\n    or your preferred method. You will need to call =which-key-mode= to enable\n    the minor mode of course.\n\n*** Manually\n    Add which-key.el to your =load-path= and require. Something like\n    #+BEGIN_SRC emacs-lisp\n    (add-to-list \'load-path "path/to/which-key.el")\n    (require \'which-key)\n    (which-key-mode)\n    #+END_SRC\n\n** Initial Setup\n   No further setup is required if you are happy with the default setup. To try\n   other options, there are 3 choices of default configs that are preconfigured\n   (then customize to your liking). The main choice is where you want the\n   which-key buffer to display. Screenshots of the default options are shown in\n   the next sections.\n\n   In each case, we show as many key bindings as we can fit in the buffer within\n   the constraints. The constraints are determined by several factors, including\n   your Emacs settings, the size of the current Emacs frame, and the which-key\n   settings, most of which are described below.\n\n   There are many substitution abilities included, which are quite flexible\n   (ability to use regexp for example). This makes which-key very customizable.\n\n*** Side Window Bottom Option\n    Popup side window on bottom. This is the current default. To restore this\n    setup use\n\n    #+BEGIN_SRC emacs-lisp\n(which-key-setup-side-window-bottom)\n    #+END_SRC\n\n    [[./img/which-key-bottom.png]]\n\n*** Side Window Right Option\n    Popup side window on right. For defaults use\n\n    #+BEGIN_SRC emacs-lisp\n(which-key-setup-side-window-right)\n    #+END_SRC\n\n    Note the defaults are fairly conservative and will tend to not display on\n    narrower frames. If you get a message saying which-key can\'t display the\n    keys, try making your frame wider or adjusting the defaults related to the\n    maximum width (see =M-x customize-group which-key=).\n\n    [[./img/which-key-right.png]]\n\n*** Side Window Right then Bottom\n    This is a combination of the previous two choices. It will try to use the\n    right side, but if there is no room it will switch to using the bottom,\n    which is usually easier to fit keys into. This setting can be helpful if the\n    size of the Emacs frame changes frequently, which might be the case if you\n    are using a dynamic/tiling window manager.\n\n    #+BEGIN_SRC emacs-lisp\n    (which-key-setup-side-window-right-bottom)\n    #+END_SRC\n\n*** Minibuffer Option\n    Take over the minibuffer. For the recommended configuration use\n\n    #+BEGIN_SRC emacs-lisp\n    (which-key-setup-minibuffer)\n    #+END_SRC\n\n    [[./img/which-key-minibuffer.png]]\n\n    Note the maximum height of the minibuffer is controlled through the built-in\n    variable =max-mini-window-height=. Also, the paging commands do not work\n    reliably with the minibuffer option. Use the side window on the bottom\n    option if you need paging.\n\n** Manual Activation\n   #+NAME: #manual-activation\n   If you only want the =which-key= popup when you need it, you can try a setup\n   along the following lines\n\n   #+BEGIN_SRC emacs-lisp\n     ;; Allow C-h to trigger which-key before it is done automatically\n     (setq which-key-show-early-on-C-h t)\n     ;; make sure which-key doesn\'t show normally but refreshes quickly after it is\n     ;; triggered.\n     (setq which-key-idle-delay 10000)\n     (setq which-key-idle-secondary-delay 0.05)\n     (which-key-mode)\n   #+END_SRC\n\n   This will prevent which-key from showing automatically, and allow you to use\n   =C-h= in the middle of a key sequence to show the =which-key= buffer and keep\n   it open for the remainder of the key sequence.\n\n** Additional Commands\n   - =which-key-show-top-level= will show most key bindings without a prefix. It\n     is most and not all, because many are probably not interesting to most\n     users.\n   - =which-key-show-major-mode= will show the currently active major-mode\n     bindings. It\'s similar to =C-h m= but in a which-key format. It is also\n     aware of evil commands defined using =evil-define-key=.\n   - =which-key-show-next-page= is the command used for paging.\n   - =which-key-undo= can be used to undo the last keypress when in the middle\n     of a key sequence.\n\n** Special Features and Configuration Options\n   There are more options than the ones described here. All of the configurable\n   variables are available through =M-x customize-group which-key=.\n*** Popup Type Options\n    There are three different popup types that which-key can use by default to\n    display the available keys. The variable =which-key-popup-type= decides\n    which one is used.\n**** minibuffer\n     #+BEGIN_SRC emacs-lisp\n     (setq which-key-popup-type \'minibuffer)\n     #+END_SRC\n     Show keys in the minibuffer.\n**** side window\n     #+BEGIN_SRC emacs-lisp\n     (setq which-key-popup-type \'side-window)\n     #+END_SRC\n     Show keys in a side window. This popup type has further options:\n     #+BEGIN_SRC emacs-lisp\n     ;; location of which-key window. valid values: top, bottom, left, right,\n     ;; or a list of any of the two. If it\'s a list, which-key will always try\n     ;; the first location first. It will go to the second location if there is\n     ;; not enough room to display any keys in the first location\n     (setq which-key-side-window-location \'bottom)\n\n     ;; max width of which-key window, when displayed at left or right.\n     ;; valid values: number of columns (integer), or percentage out of current\n     ;; frame\'s width (float larger than 0 and smaller than 1)\n     (setq which-key-side-window-max-width 0.33)\n\n     ;; max height of which-key window, when displayed at top or bottom.\n     ;; valid values: number of lines (integer), or percentage out of current\n     ;; frame\'s height (float larger than 0 and smaller than 1)\n     (setq which-key-side-window-max-height 0.25)\n     #+END_SRC\n**** frame\n\n     #+BEGIN_SRC emacs-lisp\n     (setq which-key-popup-type \'frame)\n     #+END_SRC\n     Show keys in a popup frame. This popup won\'t work very well in a terminal,\n     where only one frame can be shown at any given moment. This popup type has\n     further options:\n     #+BEGIN_SRC emacs-lisp\n     ;; max width of which-key frame: number of columns (an integer)\n     (setq which-key-frame-max-width 60)\n\n     ;; max height of which-key frame: number of lines (an integer)\n     (setq which-key-frame-max-height 20)\n     #+END_SRC\n\n**** custom\n     Write your own display functions! This requires you to write three\n     functions, =which-key-custom-popup-max-dimensions-function=,\n     =which-key-custom-show-popup-function=, and\n     =which-key-custom-hide-popup-function=. Refer to the documentation for\n     those variables for more information, but here is a working example (this\n     is the current implementation of side-window bottom).\n\n\n     #+BEGIN_SRC emacs-lisp\n       (setq which-key-popup-type \'custom)\n       (defun which-key-custom-popup-max-dimensions-function (ignore)\n         (cons\n          (which-key-height-or-percentage-to-height\n           which-key-side-window-max-height)\n          (frame-width)))\n       (defun fit-horizonatally ()\n         (let ((fit-window-to-buffer-horizontally t))\n           (fit-window-to-buffer)))\n       (defun which-key-custom-show-popup-function (act-popup-dim)\n         (let* ((alist \'((window-width . fit-horizontally)\n                         (window-height . fit-window-to-buffer))))\n           (if (get-buffer-window which-key--buffer)\n               (display-buffer-reuse-window which-key--buffer alist)\n             (display-buffer-in-major-side-window which-key--buffer\n                                                  \'bottom 0 alist))))\n       (defun which-key-custom-hide-popup-function ()\n         (when (buffer-live-p which-key--buffer)\n           (quit-windows-on which-key--buffer)))\n     #+END_SRC\n\n*** Custom String Replacement Options\n    #+NAME: #custom-string-replacement-options\n    You can customize the way the keys show in the buffer using three different\n    replacement methods, each of which corresponds replacement alist. The basic\n    idea of behind each alist is that you specify a selection string in the\n    =car= of each cons cell and the replacement string in the =cdr=.\n\n**** Automatic\n     A newer option is to set =which-key-enable-extended-define-key= which\n     advises =define-key= to allow which-key to pre-process its arguments. The\n     statement\n\n     #+BEGIN_SRC emacs-lisp\n     (define-key some-map "f" \'("foo" . long-name-for-command-foo))\n     #+END_SRC\n\n     is valid in Emacs. Setting this variable makes which-key automatically\n     replace the corresponding command name with the text in the string. A nice\n     example is in naming prefixes. The following binds "b" to =nil= and names\n     the binding as a prefix.\n\n     #+BEGIN_SRC emacs-lisp\n     (define-key some-map "b" \'("bar-prefix"))\n     #+END_SRC\n\n**** "Key-Based" replacement\n     Using this method, the description of a key is replaced using a string that\n     you provide. Here\'s an example\n\n     #+BEGIN_SRC emacs-lisp\n     (which-key-add-key-based-replacements\n       "C-x C-f" "find files")\n     #+END_SRC\n\n     where the first string is the key combination whose description you want to\n     replace, in a form suitable for =kbd=. For that key combination, which-key\n     overwrites the description with the second string, "find files". In the\n     second type of entry you can restrict the replacements to a major-mode. For\n     example,\n\n     #+BEGIN_SRC emacs-lisp\n     (which-key-add-major-mode-key-based-replacements \'org-mode\n       "C-c C-c" "Org C-c C-c"\n       "C-c C-a" "Org Attach")\n     #+END_SRC\n\n     Here the first entry is the major-mode followed by a list of the first type\n     of entries. In case the same key combination is listed under a major-mode\n     and by itself, the major-mode version takes precedence.\n\n**** Key and Description replacement\n\n     The second and third methods target the text used for the keys and the\n     descriptions directly. The relevant variable is\n     =which-key-replacement-alist=.  Here\'s an example of one of the default key\n     replacements\n\n     #+BEGIN_SRC emacs-lisp\n     (push \'(("<\\\\([[:alnum:]-]+\\\\)>" . nil) . ("\\\\1" . nil))\n           which-key-replacement-alist)\n     #+END_SRC\n\n     Each element of the outer cons cell is a cons cell of the form =(KEY\n     . BINDING)=. The =car= of the outer cons determines how to match key\n     bindings while the =cdr= determines how those matches are replaced. See the\n     docstring of =which-key-replacement-alist= for more information.\n\n     The next example shows how to replace the description.\n\n     #+BEGIN_SRC emacs-lisp\n     (push \'((nil . "left") . (nil . "lft")) which-key-replacement-alist)\n     #+END_SRC\n\n     Here is an example of using key replacement to include Unicode characters\n     in the results. Unfortunately, using Unicode characters may upset the\n     alignment of the which-key buffer, because Unicode characters can have\n     different widths even in a monospace font and alignment is based on\n     character width.\n\n     #+BEGIN_SRC emacs-lisp\n     (add-to-list \'which-key-replacement-alist \'(("TAB" . nil) . ("\xe2\x86\xb9" . nil))\n     (add-to-list \'which-key-replacement-alist \'(("RET" . nil) . ("\xe2\x8f\x8e" . nil))\n     (add-to-list \'which-key-replacement-alist \'(("DEL" . nil) . ("\xe2\x87\xa4" . nil))\n     (add-to-list \'which-key-replacement-alist \'(("SPC" . nil) . ("\xe2\x90\xa3" . nil))\n     #+END_SRC\n\n     The =cdr= may also be a function that receives a =cons= of the form =(KEY\n     . BINDING)= and produces a =cons= of the same form. This allows for\n     interesting ideas like this one suggested by [[https://github.com/pdcawley][@pdcawley]] in [[https://github.com/justbur/emacs-which-key/pull/147][PR #147]].\n\n     #+BEGIN_SRC emacs-lisp\n     (push (cons \'(nil . "paredit-mode")\n                 (lambda (kb)\n                   (cons (car kb)\n                         (if paredit-mode\n                             "[x] paredit-mode"\n                           "[ ] paredit-mode"))))\n           which-key-replacement-alist)\n     #+END_SRC\n\n     The box will be checked if =paredit-mode= is currently active.\n\n*** Sorting Options\n    By default the output is sorted by the key in a custom order. The default\n    order is to sort lexicographically within each "class" of key, where the\n    classes and their order are\n\n    =Special (SPC, TAB, ...) < Single Character (ASCII) (a, ...) < Modifier (C-, M-, ...) < Other=\n\n    You can control the order by setting this variable. This also shows the\n    other available options.\n\n    #+BEGIN_SRC emacs-lisp\n    ;; default\n    (setq which-key-sort-order \'which-key-key-order)\n    ;; same as default, except single characters are sorted alphabetically\n    ;; (setq which-key-sort-order \'which-key-key-order-alpha)\n    ;; same as default, except all prefix keys are grouped together at the end\n    ;; (setq which-key-sort-order \'which-key-prefix-then-key-order)\n    ;; same as default, except all keys from local maps shown first\n    ;; (setq which-key-sort-order \'which-key-local-then-key-order)\n    ;; sort based on the key description ignoring case\n    ;; (setq which-key-sort-order \'which-key-description-order)\n    #+END_SRC\n\n*** Paging Options\n\n    There are at least several prefixes that have many keys bound to them, like\n    =C-x=. which-key displays as many keys as it can given your settings, but\n    for these prefixes this may not be enough. The paging feature gives you the\n    ability to bind a key to the function =which-key-C-h-dispatch= which will\n    allow you to cycle through the pages without changing the key sequence you\n    were in the middle of typing. There are two slightly different ways of doing\n    this.\n\n**** Method 1 (default): Using C-h (or =help-char=)\n     This is the easiest way, and is turned on by default. Use\n     #+BEGIN_SRC emacs-lisp\n     (setq which-key-use-C-h-commands nil)\n     #+END_SRC\n     to disable the behavior (this will only take effect after toggling\n     which-key-mode if it is already enabled). =C-h= can be used with any prefix\n     to switch pages when there are multiple pages of keys. This changes the\n     default behavior of Emacs which is to show a list of key bindings that\n     apply to a prefix.  For example, if you were to type =C-x C-h= you would\n     get a list of commands that follow =C-x=. This uses which-key instead to\n     show those keys, and unlike the Emacs default saves the incomplete prefix\n     that you just entered so that the next keystroke can complete the command.\n\n     The commands are:\n     - Cycle through the pages forward with =n= (or =C-n=)\n     - Cycle backwards with =p= (or =C-p=)\n     - Undo the last entered key (!) with =u= (or =C-u=)\n     - Call the default command bound to =C-h=, usually\n       =describe-prefix-bindings=, with =h= (or =C-h=)\n\n  This is especially useful for those who like =helm-descbinds= but also want to\n  use =C-h= as their which-key paging key.\n\n  Note =C-h= is by default equivalent to =?= in this context.\n\n**** Method 2: Bind your own keys\n\n     Essentially, all you need to do for a prefix like =C-x= is the following\n     which will bind =<f5>= to the relevant command.\n\n     #+BEGIN_SRC emacs-lisp\n(define-key which-key-mode-map (kbd "C-x <f5>") \'which-key-C-h-dispatch)\n     #+END_SRC\n\n     This is completely equivalent to\n\n     #+BEGIN_SRC emacs-lisp\n(setq which-key-paging-prefixes \'("C-x"))\n(setq which-key-paging-key "<f5>")\n     #+END_SRC\n\n     where the latter are provided for convenience if you have a lot of\n     prefixes.\n\n*** Face Customization Options\n    The faces that which-key uses are\n    | Face                                   | Applied To                    | Default Definition                                          |\n    |----------------------------------------+-------------------------------+-------------------------------------------------------------|\n    | =which-key-key-face=                   | Every key sequence            | =:inherit font-lock-constant-face=                          |\n    | =which-key-separator-face=             | The separator (\xe2\x86\x92)             | =:inherit font-lock-comment-face=                           |\n    | =which-key-note-face=                  | Hints and notes               | =:inherit which-key-separator-face=                         |\n    | =which-key-special-key-face=           | User-defined special keys     | =:inherit which-key-key-face :inverse-video t :weight bold= |\n    | =which-key-group-description-face=     | Command groups (i.e, keymaps) | =:inherit font-lock-keyword-face=                           |\n    | =which-key-command-description-face=   | Commands not in local-map     | =:inherit font-lock-function-name-face=                     |\n    | =which-key-local-map-description-face= | Commands in local-map         | =:inherit which-key-command-description-face=               |\n\n    The last two deserve some explanation. A command lives in one of many possible\n    keymaps. You can distinguish between local maps, which depend on the buffer you\n    are in, which modes are active, etc., and the global map which applies\n    everywhere. It might be useful for you to distinguish between the two. One way\n    to do this is to remove the default face from\n    =which-key-command-description-face= like this\n\n    #+BEGIN_SRC emacs-lisp\n  (set-face-attribute \'which-key-command-description-face nil :inherit nil)\n    #+END_SRC\n\n    another is to make the local map keys appear in bold\n\n    #+BEGIN_SRC emacs-lisp\n  (set-face-attribute \'which-key-local-map-description-face nil :weight \'bold)\n    #+END_SRC\n\n    You can also use =M-x customize-face= to customize any of the above faces to\n    your liking.\n\n*** Other Options\n    #+NAME: #other-options\n    The options below are also available through customize. Their defaults are\n    shown.\n\n    #+BEGIN_SRC emacs-lisp\n      ;; Set the time delay (in seconds) for the which-key popup to appear. A value of\n      ;; zero might cause issues so a non-zero value is recommended.\n      (setq which-key-idle-delay 1.0)\n\n      ;; Set the maximum length (in characters) for key descriptions (commands or\n      ;; prefixes). Descriptions that are longer are truncated and have ".." added.\n      (setq which-key-max-description-length 27)\n\n      ;; Use additional padding between columns of keys. This variable specifies the\n      ;; number of spaces to add to the left of each column.\n      (setq which-key-add-column-padding 0)\n\n      ;; The maximum number of columns to display in the which-key buffer. nil means\n      ;; don\'t impose a maximum.\n      (setq which-key-max-display-columns nil)\n\n      ;; Set the separator used between keys and descriptions. Change this setting to\n      ;; an ASCII character if your font does not show the default arrow. The second\n      ;; setting here allows for extra padding for Unicode characters. which-key uses\n      ;; characters as a means of width measurement, so wide Unicode characters can\n      ;; throw off the calculation.\n      (setq which-key-separator " \xe2\x86\x92 " )\n      (setq which-key-unicode-correction 3)\n\n      ;; Set the prefix string that will be inserted in front of prefix commands\n      ;; (i.e., commands that represent a sub-map).\n      (setq which-key-prefix-prefix "+" )\n\n      ;; Set the special keys. These are automatically truncated to one character and\n      ;; have which-key-special-key-face applied. Disabled by default. An example\n      ;; setting is\n      ;; (setq which-key-special-keys \'("SPC" "TAB" "RET" "ESC" "DEL"))\n      (setq which-key-special-keys nil)\n\n      ;; Show the key prefix on the left, top, or bottom (nil means hide the prefix).\n      ;; The prefix consists of the keys you have typed so far. which-key also shows\n      ;; the page information along with the prefix.\n      (setq which-key-show-prefix \'left)\n\n      ;; Set to t to show the count of keys shown vs. total keys in the mode line.\n      (setq which-key-show-remaining-keys nil)\n    #+END_SRC\n** Support for Third-Party Libraries\n   Some support is provided for third-party libraries which don\'t use standard\n   methods of looking up commands. Some of these need to be enabled\n   explicitly. This code includes some hacks, so please report any problems.\n*** Key-chord\n    Enabled by default.\n*** Evil operators\n    Evil motions and text objects following an operator like =d= are not all\n    looked up in a standard way. Support is controlled through\n    =which-key-allow-evil-operators= which should be non-nil if evil is loaded\n    before which-key and through =which-key-show-operator-state-maps= which\n    needs to be enabled explicitly because it is more of a hack. The former\n    allows for the inner and outer text object maps to show, while the latter\n    shows motions as well.\n*** God-mode\n    Call =(which-key-enable-god-mode-support)= after loading god-mode to enable\n    support for god-mode key sequences. This is new and experimental, so please\n    report any issues.\n** More Examples\n*** Nice Display with Split Frame\n    Unlike guide-key, which-key looks good even if the frame is split into\n    several windows.\n    #+CAPTION: which-key in a frame with 3 horizontal splits\n    [[./img/which-key-right-split.png]]\n\n    #+CAPTION: which-key in a frame with 2 vertical splits\n    [[./img/which-key-bottom-split.png]]\n** Known Issues\n   - A few users have reported crashes related to which-key popups when quitting\n     a key sequence with =C-g=. A possible fix is discussed in [[https://github.com/justbur/emacs-which-key/issues/130][this issue]].\n** Thanks\n   Special thanks to\n   - [[https://github.com/bmag][@bmag]] for helping with the initial development and finding many bugs.\n   - [[https://github/iqbalansari][@iqbalansari]] who among other things adapted the code to make\n     =which-key-show-top-level= possible.\n'