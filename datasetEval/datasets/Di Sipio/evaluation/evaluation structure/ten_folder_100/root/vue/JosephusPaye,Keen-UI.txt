b'# Keen UI\n\nKeen UI is a [Vue.js](http://vuejs.org) UI library with a simple API, inspired by Google\'s [Material Design](https://material.io/guidelines).\n\n<sub>_Keen UI is **not** a CSS framework. Therefore, it doesn\'t include styles for a grid system, typography, etc. Instead, the focus is on interactive components that require Javascript. You should be able to use Keen UI with any page layout, structure, or CSS framework._</sub>\n\n## Documentation and demo\n\n[http://josephuspaye.github.io/Keen-UI/](http://josephuspaye.github.io/Keen-UI/)\n\n## Requirements\n\n* [Vue.js](http://vuejs.org/) (^v2.1.4) - use [keen-ui@0.8.9](http://josephuspaye.github.io/Keen-UI/0.8.9/) for Vue 1.x support.\n\nOptional\n\n* [Material Icons font](http://google.github.io/material-design-icons/#icon-font-for-the-web)\n\n## Browser support\n\nIE 10+ (due to [Flexbox support](http://caniuse.com/#search=flexbox)).\n\n## Installation\n\n```bash\nnpm install keen-ui --save\n```\n\n## Usage\n\n##### CSS Reset\n\nBefore using Keen UI, ensure that the following CSS resets are applied to your site.\n\n```css\n*,\n*::before,\n*::after {\n    box-sizing: border-box;\n}\n\nhtml {\n    font-size: 100%;\n}\n```\n\nYou can add the reset to your stylesheet (before other styles). If you are using a CSS framework, check to see if the framework already includes a reset (most CSS frameworks do). The root font size set on `<html>` [can be customized](Customization.md#component-sizing) to globally resize the components.\n\n### ES6\n\nUse as a Vue plugin (globally registers all components):\n\n```js\nimport Vue from \'vue\';\nimport KeenUI from \'keen-ui\';\nimport \'keen-ui/dist/keen-ui.css\';\n\nVue.use(KeenUI);\n\nnew Vue({\n    components: {\n        // all Keen UI components already registered\n    }\n});\n```\n\nUse individual components:\n\n```js\nimport Vue from \'vue\';\nimport { UiAlert, UiButton } from \'keen-ui\';\n\nnew Vue({\n    components: {\n        UiAlert,\n        UiButton\n    }\n});\n```\n\n### Script tag\n\nFirst, add a stylesheet link to the Keen UI CSS file in `dist/keen-ui.min.css`. Then, add a script tag pointing to `dist/keen-ui.min.js` _**after**_ adding Vue.\n\nIf Keen UI detects the global `Vue` object, all components will be registered automatically. The components will also be made available globally via `window.KeenUI`.\n\nExample:\n\n```html\n<!-- Place this in <head> -->\n<link rel="stylesheet" href="path/to/keen-ui.min.css">\n\n<!-- Place this in <body> -->\n<div id="app">\n    <ui-button>Hello world!</ui-button>\n</div>\n\n<script src="path/to/vue.js"></script>\n<script src="path/to/keen-ui.min.js"></script>\n<script>\n    new Vue({\n        el: \'#app\',\n        components: {\n            // all Keen UI components already registered\n        }\n    });\n</script>\n```\n\n## Customization\n\nYou can customize many aspects of Keen UI, including theme colors, component sizes, default props, and more.\n\nSee [Customization](Customization.md).\n\n## Using standalone components\n\nEach component is built into a standalone file with the necessary CSS included. You can use these individual standalone components without importing the rest of the library. The standalone components are located in the `lib/` folder.\n\n**NOTE**: Standalone component files each contain their own dependencies, and many contain overlapping dependencies. As a result, using multiple standalone files may increase the size of your bundle due to duplicate code.\n\n```js\nimport Vue from \'vue\';\nimport \'keen-ui/src/bootstrap\'; // Required when using standalone components, should be imported only once in your project\nimport UiButton from \'keen-ui/lib/UiButton\';\n\nnew Vue({\n    components: {\n        UiButton\n    }\n});\n```\n\n## Licence\n\nKeen UI is open source and released under the [MIT Licence](LICENCE).\n\nCopyright (c) 2019 [Josephus Paye II](https://twitter.com/JosephusPaye).\n\n> *PS: Made something cool with Keen UI? I would love to know! Tweet to me at [@JosephusPaye](https://twitter.com/JosephusPaye)*.\n'