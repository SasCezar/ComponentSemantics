b'<h1 align="center">vue-grid-layout</h1>\n\n<p align="center">\n<a href="https://www.npmjs.com/package/vue-grid-layout"><img src="https://img.shields.io/npm/v/vue-grid-layout.svg"/> <img src="https://img.shields.io/npm/dm/vue-grid-layout.svg"/></a> <a href="https://vuejs.org/"><img src="https://img.shields.io/badge/vue-2.2.x-brightgreen.svg"/></a>\n</p>\n\nvue-grid-layout is a grid layout system, like [Gridster](http://dsmorse.github.io/gridster.js/), for Vue.js. **Heavily inspired by [React-Grid-Layout](https://github.com/STRML/react-grid-layout)**\n\n### **Current version:** 2.3.7 (Supports Vue 2.2+)\n\n### **For Vue 2.1.10 and below use version [2.1.3](https://github.com/jbaysolutions/vue-grid-layout/tree/2.1.3)**\n### **For Vue 1 use version [1.0.3](https://github.com/jbaysolutions/vue-grid-layout/tree/1.0.3)** \n\n<br/>\n\n[**[Demo](https://jbaysolutions.github.io/vue-grid-layout/examples/01-basic.html) | [Changelog](/CHANGELOG.md)**]\n\nEnglish | [\xe7\xae\x80\xe4\xbd\x93\xe4\xb8\xad\xe6\x96\x87](./README-zh_CN.md) \n\n<!--\n## Table of Contents\n\n- [Features](#features)\n- [Getting Started](#getting-started)\n  - [Installation](#installation)\n    - [npm](#npm)\n- [Contribute](#contribute)\n- [TODO List](#todo-list)\n\n## Demos\n\n\nTODO UPDATE DOCS\n\nUsed guide for vue cli build: https://medium.com/justfrontendthings/how-to-create-and-publish-your-own-vuejs-component-library-on-npm-using-vue-cli-28e60943eed3\nAlso check https://cli.vuejs.org/guide/build-targets.html#library\n\n-->\n\n#### Projects using vue-grid-layout\n\n- [Draxed](https://www.draxed.com/?utm_source=github&utm_medium=web&utm_campaign=vue-grid-layout)\n- [cryptotiles](https://www.cryptotiles.io/?utm_source=github&utm_medium=web&utm_campaign=vue-grid-layout)\n- [Data Providers](https://www.dataproviders.io/?utm_source=github&utm_medium=web&utm_campaign=vue-grid-layout)\n- [Cataholic](https://cataholic.glitch.me/)\n\n*Know of others? Create a PR to let me know!*\n\n## Features\n\n* Draggable widgets\n* Resizable widgets\n* Static widgets\n* Bounds checking for dragging and resizing\n* Widgets may be added or removed without rebuilding grid\n* Layout can be serialized and restored\n* Automatic RTL support (resizing not working with RTL on 2.2.0)\n* Responsive\n\n\n## Getting Started\n\n### Installation\n\n#### npm\n\n    # install with npm    \n\tnpm install vue-grid-layout --save\n    \n    # install with yarn    \n    yarn add vue-grid-layout\n\n\nImport the library\n\n```javascript\n    import VueGridLayout from \'vue-grid-layout\';\n```\n\nAdd to other Vue components \n\n ```javascript\n    export default {\n        components: {\n            GridLayout: VueGridLayout.GridLayout,\n            GridItem: VueGridLayout.GridItem\n        },\n    // ... data, methods, mounted (), etc.\n    }\n    \n```    \n\n#### browser\n\nInclude the browser-ready bundle (download from [releases](https://github.com/jbaysolutions/vue-grid-layout/releases)) in your page. The components will be automatically available.\n\n```html\n    <script src="vue-grid-layout.umd.min.js"></script>\n```\n\n### Usage\n\n```javascript\n\tvar testLayout = [\n\t    {"x":0,"y":0,"w":2,"h":2,"i":"0"},\n\t    {"x":2,"y":0,"w":2,"h":4,"i":"1"},\n\t    {"x":4,"y":0,"w":2,"h":5,"i":"2"},\n\t    {"x":6,"y":0,"w":2,"h":3,"i":"3"},\n\t    {"x":8,"y":0,"w":2,"h":3,"i":"4"},\n\t    {"x":10,"y":0,"w":2,"h":3,"i":"5"},\n\t    {"x":0,"y":5,"w":2,"h":5,"i":"6"},\n\t    {"x":2,"y":5,"w":2,"h":5,"i":"7"},\n\t    {"x":4,"y":5,"w":2,"h":5,"i":"8"},\n\t    {"x":6,"y":3,"w":2,"h":4,"i":"9"},\n\t    {"x":8,"y":4,"w":2,"h":4,"i":"10"},\n\t    {"x":10,"y":4,"w":2,"h":4,"i":"11"},\n\t    {"x":0,"y":10,"w":2,"h":5,"i":"12"},\n\t    {"x":2,"y":10,"w":2,"h":5,"i":"13"},\n\t    {"x":4,"y":8,"w":2,"h":4,"i":"14"},\n\t    {"x":6,"y":8,"w":2,"h":4,"i":"15"},\n\t    {"x":8,"y":10,"w":2,"h":5,"i":"16"},\n\t    {"x":10,"y":4,"w":2,"h":2,"i":"17"},\n\t    {"x":0,"y":9,"w":2,"h":3,"i":"18"},\n\t    {"x":2,"y":6,"w":2,"h":2,"i":"19"}\n\t];\n\t\n\tnew Vue({\n\t    el: \'#app\',\n\t    data: {\n\t        layout: testLayout,\n\t    },\n\t});\n``` \n\n\n```html\n\n    <grid-layout\n            :layout.sync="layout"\n            :col-num="12"\n            :row-height="30"\n            :is-draggable="true"\n            :is-resizable="true"\n            :is-mirrored="false"\n            :vertical-compact="true"\n            :margin="[10, 10]"\n            :use-css-transforms="true"\n    >\n\n        <grid-item v-for="item in layout"\n                   :x="item.x"\n                   :y="item.y"\n                   :w="item.w"\n                   :h="item.h"\n                   :i="item.i"\n                   :key="item.i">\n            {{item.i}}\n        </grid-item>\n    </grid-layout>\n```\n\n\n### Documentation\n\n#### Properties\n\n##### GridLayout\n\n* **layout**\n    \n    * type: `Array`\n    * required: `true`\n\n    This is the initial layout of the grid.\n\n    The value must be an `Array` of `Object` items. Each item must have `i`, `x`, `y`, `w` and `h` properties. Please refer to the documentation for `GridItem` below for more information.\n\n* **colNum**\n    \n    * type: `Number`\n    * required: `false`\n    * default: `12`\n\n    Says how many columns the grid has.\n\n    The value should be a _natural number_. \n\n* **rowHeight**\n    \n    * type: `Number`\n    * required: `false`\n    * default: `150`\n\n    Says what is a height of a single row in pixels.\n\n* **maxRows**\n    \n    * type: `Number`\n    * required: `false`\n    * default: `Infinity`\n\n    Says what is a maximal number of rows in the grid.\n\n* **margin**\n    \n    * type: `Array`\n    * required: `false`\n    * default: `[10, 10]`\n\n    Says what are the margins of elements inside the grid.\n\n    The value must be a two-element `Array` of `Number`. Each value is expressed in pixels. The first element is a margin horizontally, the second element is a vertical margin.\n\n* **isDraggable**\n    \n    * type: `Boolean`\n    * required: `false`\n    * default: `true`\n\n    Says if the grids items are draggable.\n\n* **isResizable**\n    \n    * type: `Boolean`\n    * required: `false`\n    * default: `true`\n\n    Says if the grids items are resizable.\n\n* **isMirrored**\n    \n    * type: `Boolean`\n    * required: `false`\n    * default: `false`\n\n    Says if the RTL/LTR should be reversed.\n\n* **autoSize**\n    \n    * type: `Boolean`\n    * required: `false`\n    * default: `true`\n\n    Says if the container height should swells and contracts to fit contents.\n\n* **verticalCompact**\n    \n    * type: `Boolean`\n    * required: `false`\n    * default: `true`\n\n    Says if the layout should be compact vertically.\n\n* **preventCollision**\n    \n    * type: `Boolean`\n    * required: `false`\n    * default: `false`\n\n    Says if grid items will move when being dragged over.\n\n* **useCssTransforms**\n    \n    * type: `Boolean`\n    * required: `false`\n    * default: `true`\n\n    Says if the CSS `transition-property: transform;` should be used.\n\n* **responsive**\n    \n    * type: `Boolean`\n    * required: `false`\n    * default: `false`\n\n    Says if the layout should be responsive to window width\n\n* **breakpoints**\n\n    * type: `Object`\n    * required: `false`\n    * default: { lg: 1200, md: 996, sm: 768, xs: 480, xxs: 0 }\n\n    Breakpoints defined for responsive layout. Sets widths on wich column number changes\n\n* **cols**\n\n    * type: `Object`\n    * required: `false`\n    * default: { lg: 12, md: 10, sm: 6, xs: 4, xxs: 2 }\n\n    Defines number of columns for each breakpoint\n\n\n##### GridItem\n\n* **i**\n    \n    * type: `String`\n    * required: `true`\n\n    This is the unique identifier of the item.\n\n* **x**\n    \n    * type: `Number`\n    * required: `true`\n\n    Says what is a initial horizontal position of the item (in which column it should be placed).\n\n    The value must be a _whole number_. \n\n* **y**\n    \n    * type: `Number`\n    * required: `true`\n\n    Says what is a initial vertical position of the item (in which row it should be placed).\n\n    The value must be a _whole number_. \n\n* **w**\n    \n    * type: `Number`\n    * required: `true`\n\n    Says what is a initial width of the item.\n\n    The value is a number that is multiplied by `colWidth`.\n\n* **h**\n    \n    * type: `Number`\n    * required: `true`\n\n    Says what is a initial height of the item.\n\n    The value is a number that is multiplied by `rowHeight`.\n\n* **minW**\n    \n    * type: `Number`\n    * required: `false`\n    * default: `1`\n\n    Says what is a minimal width of the item. If `w` will be smaller then `minW` then `w` will be set to `minW`.\n\n    The value is a number that is multiplied by `colWidth`.\n\n* **minH**\n    \n    * type: `Number`\n    * required: `false`\n    * default: `1`\n\n    Says what is a minimal hieght of the item. If `h` will be smaller then `minH` then `h` will be set to `minH`.\n\n    The value is a number that is multiplied by `rowHeight`.\n\n* **maxW**\n    \n    * type: `Number`\n    * required: `false`\n    * default: `Infinity`\n\n    Says what is a maximal width of the item. If `w` will be bigger then `maxW` then `w` will be set to `maxW`.\n\n    The value is a number that is multiplied by `colWidth`.\n\n* **maxH**\n    \n    * type: `Number`\n    * required: `false`\n    * default: `Infinity`\n\n    Says what is a maximal height of the item. If `h` will be bigger then `maxH` then `h` will be set to `maxH`.\n\n    The value is a number that is multiplied by `rowHeight`\n\n* **isDraggable**\n    \n    * type: `Boolean`\n    * required: `false`\n    * default: `null`\n\n    Says if item is draggable.\n\n    If default value is `null` then it\'s inherited from parent.\n\n* **isResizable**\n    \n    * type: `Boolean`\n    * required: `false`\n    * default: `null`\n\n    Says if item is resizable.\n\n    If default value is `null` then it\'s inherited from parent.\n\n* **static**\n    \n    * type: `Boolean`\n    * required: `false`\n    * default: `false`\n\n    Says if item is static (won\'t be draggable, resizable or moved by other items).\n\n\n* **dragIgnoreFrom**\n    \n    * type: `String`\n    * required: `false`\n    * default: `\'a, button\'`\n\n    Says which elements of the item shouldn\'t trigger drag event of the item.\n\n    The value is `css-like` selector string.\n\n    For more info please refer to `ignoreFrom` in [interact.js docs](http://interactjs.io/docs/#ignorable-selectors).\n\n* **dragAllowFrom**\n    \n    * type: `String`\n    * required: `false`\n    * default: `null`\n\n    Says which elements of the item should trigger drag event of the item.\n\n    The value is `css-like` selector string.\n    \n    If `null` then one can drag by any (excluding `dragIgnoreFrom`) element of the item.\n\n    For more info please refer to `allowFrom` in [interact.js docs](http://interactjs.io/docs/#ignorable-selectors).\n\n* **resizeIgnoreFrom**\n    \n    * type: `String`\n    * required: `false`\n    * default: `\'a, button\'`\n\n    Says which elements of the item shouldn\'t trigger resize event of the item.\n\n    The value is `css-like` selector string.\n\n    For more info please refer to `ignoreFrom` in [interact.js docs](http://interactjs.io/docs/#ignorable-selectors).\n\n\n\n#### Events\n\nMove and resize event listeners can be added to each grid-item, so that the parent Vue can be notified when a grid element is being moved or resized.\nMoved and resized event listeners can be added, if the only notification needed is when an item is finished moving or resizing.\n\nWorking example [here](https://jbaysolutions.github.io/vue-grid-layout/examples/02-events.html)   \n\n````html\n\n    <grid-layout\n            :layout="layout"\n            :col-num="12"\n            :row-height="30"\n            :is-draggable="true"\n            :is-resizable="true"\n            :vertical-compact="true"\n            :margin="[10, 10]"\n            :use-css-transforms="true"\n            @layout-created="layoutCreatedEvent"\n            @layout-before-mount="layoutBeforeMountEvent"\n            @layout-mounted="layoutMountedEvent"\n            @layout-ready="layoutReadyEvent"\n            @layout-updated="layoutUpdatedEvent"\n    >\n\n        <grid-item v-for="item in layout"\n                   :x="item.x"\n                   :y="item.y"\n                   :w="item.w"\n                   :h="item.h"\n                   :i="item.i"\n                   :key="item.i"\n                   @resize="resizeEvent"\n                   @move="moveEvent"\n                   @resized="resizedEvent"\n                   @container-resized="containerResizedEvent"\n                   @moved="movedEvent">\n            {{item.i}}\n        </grid-item>\n    </grid-layout>\n```` \n\n* **layoutCreatedEvent**\n\n    Layout created event\n\n    Emited on the component created lifecycle hook\n\n```javascript\n    layoutCreatedEvent: function(newLayout){\n      console.log("Created layout: ", newLayout)\n    }\n```\n\n* **layoutBeforeMountEvent**\n\n    Layout beforeMount event\n\n    Emited on the component beforeMount lifecycle hook\n\n```javascript\n    layoutBeforeMountEvent: function(newLayout){\n      console.log("beforeMount layout: ", newLayout)\n    }\n```\n\n* **layoutMountedEvent**\n\n    Layout mounted event\n\n    Emited on the component mounted lifecycle hook\n\n```javascript\n    layoutMountedEvent: function(newLayout){\n      console.log("Mounted layout: ", newLayout)\n    }\n```\n\n* **layoutReadyEvent**\n\n    Layout ready event\n\n    Emited when all the operations on the mount hook finish\n\n```javascript\n    layoutReadyEvent: function(newLayout){\n      console.log("Ready layout: ", newLayout)\n    }\n```\n\n* **layoutUpdatedEvent**\n\n    Layout updated event\n\n    Every time the layout has finished updating and positions of all grid-items are recalculated\n\n```javascript\n    layoutUpdatedEvent: function(newLayout){\n      console.log("Updated layout: ", newLayout)\n    }\n```\n\n* **moveEvent**\n\n    Move event\n\n    Every time an item is being moved and changes position\n\n```javascript\n    moveEvent: function(i, newX, newY){\n        console.log("MOVE i=" + i + ", X=" + newX + ", Y=" + newY);\n    },\n```\n\n* **resizeEvent**\n\n    Resize event\n\n    Every time an item is being resized and changes size\n \n```javascript\n    resizeEvent: function(i, newH, newW, newHPx, newWPx){\n        console.log("RESIZE i=" + i + ", H=" + newH + ", W=" + newW + ", H(px)=" + newHPx + ", W(px)=" + newWPx);\n    },\n``` \n\n* **movedEvent**\n\n    Moved event\n\n    Every time an item is finished being moved and changes position\n\n```javascript\n    movedEvent: function(i, newX, newY){\n        console.log("MOVED i=" + i + ", X=" + newX + ", Y=" + newY);\n    },\n```\n\n* **resizedEvent**\n\n    Resized event\n\n    Every time an item is finished being resized and changes size\n \n```javascript\n    /**\n     * \n     * @param i the item id/index\n     * @param newH new height in grid rows \n     * @param newW new width in grid columns\n     * @param newHPx new height in pixels\n     * @param newWPx new width in pixels\n     * \n     */\n    resizedEvent: function(i, newH, newW, newHPx, newWPx){\n        console.log("RESIZED i=" + i + ", H=" + newH + ", W=" + newW + ", H(px)=" + newHPx + ", W(px)=" + newWPx);\n    },\n``` \n\n* **containerResizedEvent**\n\n    Container Resized event\n\n    Every time the grid item/layout container changes size (browser window or other)\n \n```javascript\n    /**\n     * \n     * @param i the item id/index\n     * @param newH new height in grid rows \n     * @param newW new width in grid columns\n     * @param newHPx new height in pixels\n     * @param newWPx new width in pixels\n     * \n     */\n    containerResizedEvent: function(i, newH, newW, newHPx, newWPx){\n        console.log("CONTAINER RESIZED i=" + i + ", H=" + newH + ", W=" + newW + ", H(px)=" + newHPx + ", W(px)=" + newWPx);\n    },\n``` \n\n\n## Contribute\n\nIf you have a feature request, please add it as an issue or make a pull request.\n\n\n## TODO List\n\n- [x] Basic grid layout\n- [x] Responsive\n- [x] Draggable grid items\n- [x] Resizable grid items\n- [x] Static elements\n- [x] Min/max w/h per item\n'