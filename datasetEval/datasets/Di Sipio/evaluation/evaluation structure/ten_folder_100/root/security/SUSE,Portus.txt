b"# Portus\n\n- [Website](http://port.us.org/) | [Documentation](http://port.us.org/documentation.html) | [Blog](http://port.us.org/blog/index.html) | [Supported versions](http://port.us.org/docs/versions.html) | [How to deploy](http://port.us.org/docs/deploy.html)\n- Mailing list: [Google Groups](https://groups.google.com/forum/#!forum/portus-dev)\n- Last stable release: **2.4.3** (`2.4`, `2.4.3` and `latest` tags from the [official Docker image](https://hub.docker.com/r/opensuse/portus/))\n\nPortus is an authorization server and a user interface for the next generation\nof the Docker registry. Portus targets [version\n2](https://github.com/docker/distribution/blob/master/docs/spec/api.md) of the\nDocker Registry API. The minimum required version of Registry is 2.1, which is\nthe first version supporting soft deletes of blobs.\n\n| master | v2.4 | Code Climate |\n|--------|------|--------------|\n| [![Build Status](https://travis-ci.org/SUSE/Portus.svg?branch=master)](https://travis-ci.org/SUSE/Portus) | [![Build Status](https://travis-ci.org/SUSE/Portus.svg?branch=v2.4)](https://travis-ci.org/SUSE/Portus) | [![Code Climate](https://codeclimate.com/github/SUSE/Portus/badges/gpa.svg)](https://codeclimate.com/github/SUSE/Portus) [![Test Coverage](https://codeclimate.com/github/SUSE/Portus/badges/coverage.svg)](https://codeclimate.com/github/SUSE/Portus/coverage) |\n\n## Features\n\n### Fine-grained control of permissions\n\nPortus supports the concept of users and teams. Users have their own personal\nDocker namespace where they have both read (aka `docker pull`) and write (aka\n`docker push`) access. A team is a group of users that have read and write\naccess to a certain namespace. You can read more about this in our\n[documentation page about\nit](http://port.us.org/features/3_teams_namespaces_and_users.html).\n\nPortus implements the [token based authentication\nsystem](https://github.com/docker/distribution/blob/master/docs/spec/auth/token.md)\ndescribed by the new version of the Docker registry. This can be used to have\nfull control over the images served by an instance of the Docker registry.\n\n### Web interface for Docker registry\n\nPortus provides quick access to all the images available on your private\ninstance of Docker registry. User's privileges are taken into account to make\nsure private images (the ones requiring special rights also for `docker pull`)\nare not shown to unauthorized personnel.\n\n### Self-hosted\n\nPortus allows you to host everything on your servers, on your own\ninfrastructure. You don't have to trust a third-party service, just own\neverything yourself. Take a look at our\n[documentation](http://port.us.org/docs/deploy.html) to read the different\nsetups in which you can deploy Portus.\n\n### And more!\n\nSome highlights:\n\n- [Synchronization with your private registry in order to fetch which images and tags are available](http://port.us.org/features/1_Synchronizing-the-Registry-and-Portus.html).\n- [LDAP user authentication](http://port.us.org/features/2_LDAP-support.html).\n- OAuth and OpenID-Connect authentication\n- [Monitoring of all the activities performed onto your private registry and Portus itself](http://port.us.org/features/4_audit.html).\n- [Search for repositories and tags inside of your private registry](http://port.us.org/features/5_search.html).\n- [Star your favorite repositories](http://port.us.org/features/6_starring.html).\n- [Disable users temporarily](http://port.us.org/features/7_disabling_users.html).\n- [Optionally use Application Tokens for better security](http://port.us.org/features/application_tokens.html).\n\nTake a tour by our [documentation](http://port.us.org/features.html) site to\nread more about this.\n\n## Contributing\n\nThere are multiple ways of setting up a [development\nenvironment](https://github.com/SUSE/Portus/wiki#developmentplayground-environments). We\nrecommend using `docker-compose`, so you only need to perform:\n\n    $ docker-compose up\n\nYou can read more about this environment\n[here](https://github.com/SUSE/Portus/wiki/Docker-Compose-Environment).\n\nAlso, make sure to understand our contribution guidelines, as explained in\n[this](https://github.com/SUSE/Portus/blob/master/CONTRIBUTING.md) document.\n\n### Testing\n\n#### Unit tests\n\nUnit tests are located in the `spec` directory. To run them, simply:\n\n    $ bundle exec rspec spec\n\nMake sure to install [phantomjs](http://phantomjs.org/) from your Linux\ndistribution before running unit tests, since feature tests rely on PhantomJS\nbeing installed. All the other ruby dependencies are already covered by our\n`Gemfile`.\n\nWe also have tests in the frontend. For this, you have to install\n[yarn](https://yarnpkg.com/) from your Linux distribution and run:\n\n    $ yarn test\n\n#### Integration tests\n\nCheck [this\ndocument](https://github.com/SUSE/Portus/blob/master/spec/integration/README.md)\nin order to better understand how integration tests work. For development,\nthough, if you have already installed Docker, docker-composer and\n[bats](https://github.com/sstephenson/bats), running the following should just\nwork:\n\n```\n$ chmod +x bin/test-integration.sh\n$ ./bin/test-integration.sh\n```\n\n#### Other checks\n\nA common pitfall for developers is to forget about code style. For that, make\nsure to run [rubocop](https://github.com/bbatsov/rubocop):\n\n    $ bundle exec rubocop -a\n\nNote that the command above includes the `-a` flag. This flag will automatically\nfix small issues for you. We also run a code style check for the frontend code:\n\n    $ yarn eslint\n\nWe also run [brakeman](https://brakemanscanner.org/) in order to detect security\nvulnerabilities:\n\n    $ bundle exec brakeman\n\nLast but not least, make sure that your git commit follows a proper style. To\nensure this, you can run the following task:\n\n    $ bundle exec rake test:git\n\n#### Continuous Integration\n\nWe use [Travis CI](https://travis-ci.org/) for continuous integration. You can\nrun what we run in Travis locally:\n\n```\n$ chmod +x bin/ci/run.sh\n$ ./bin/ci/run.sh\n```\n\nThis script simply executes all the tests and checks that we have presented\nabove.\n\n## Licensing\n\nPortus is licensed under the Apache License, Version 2.0. See\n[LICENSE](https://github.com/SUSE/Portus/blob/master/LICENSE) for the full\nlicense text.\n"