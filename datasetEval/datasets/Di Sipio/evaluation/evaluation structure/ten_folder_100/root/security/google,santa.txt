b'# Santa [![Build Status][build-status-img]][build-status-link] [![Documentation Status][doc-status-img]][doc-status-link]\n\n[build-status-img]: https://travis-ci.org/google/santa.png?branch=master\n[build-status-link]: https://travis-ci.org/google/santa\n[doc-status-img]: https://readthedocs.org/projects/santa/badge/?version=latest\n[doc-status-link]: https://santa.readthedocs.io/en/latest/?badge=latest\n\n<p align="center">\n    <img src="./Source/santa/Resources/Images.xcassets/AppIcon.appiconset/santa-hat-icon-128.png" alt="Santa Icon" />\n</p>\n\nSanta is a binary whitelisting/blacklisting system for macOS. It consists of a\nkernel extension that monitors for executions, a userland daemon that makes\nexecution decisions based on the contents of a SQLite database, a GUI agent\nthat notifies the user in case of a block decision and a command-line utility\nfor managing the system and synchronizing the database with a server.\n\nIt is named Santa because it keeps track of binaries that are naughty or nice.\n\nSanta is a project of Google\'s Macintosh Operations Team.\n\n# Docs\n\nThe Santa docs are stored in the\n[Docs](https://github.com/google/santa/blob/master/docs) directory. A Read the\nDocs instance is available here: https://santa.readthedocs.io.\n\nThe docs include deployment options, details on how parts of Santa work and\ninstructions for developing Santa itself.\n\n# Get Help\n\nIf you have questions or otherwise need help getting started,\nthe [santa-dev](https://groups.google.com/forum/#!forum/santa-dev) group is a\ngreat place.\n\nIf you believe you have a bug, feel free to report [an\nissue](https://github.com/google/santa/isues) and we\'ll respond as soon as we\ncan.\n\n\n# Admin-Related Features\n\n* Multiple modes: In the default MONITOR mode, all binaries except those marked\n  as blacklisted will be allowed to run, whilst being logged and recorded in\n  the events database. In LOCKDOWN mode, only whitelisted binaries are allowed\n  to run.\n\n* Event logging: When the kext is loaded, all binary launches are logged.  When\n  in either mode, all unknown or denied binaries are stored in the database to\n  enable later aggregation.\n\n* Certificate-based rules, with override levels: Instead of relying on a\n  binary\'s hash (or \'fingerprint\'), executables can be whitelisted/blacklisted\n  by their signing certificate. You can therefore trust/block all binaries by a\n  given publisher that were signed with that cert across version updates. A\n  binary can only be whitelisted by its certificate if its signature validates\n  correctly, but a rule for a binary\'s fingerprint will override a decision for\n  a certificate; i.e. you can whitelist a certificate while blacklisting a\n  binary signed with that certificate, or vice-versa.\n\n* Path-based rules (via NSRegularExpression/ICU): This allows a similar feature\n  to that found in Managed Client (the precursor to configuration profiles,\n  which used the same implementation mechanism), Application Launch\n  Restrictions via the mcxalr binary. This implementation carries the added\n  benefit of being configurable via regex, and not relying on LaunchServices.\n  As detailed in the wiki, when evaluating rules this holds the lowest\n  precedence.\n\n* Failsafe cert rules: You cannot put in a deny rule that would block the\n  certificate used to sign launchd, a.k.a. pid 1, and therefore all components\n  used in macOS. The binaries in every OS update (and in some cases entire new\n  versions) are therefore auto-whitelisted. This does not affect binaries from\n  Apple\'s App Store, which use various certs that change regularly for common\n  apps. Likewise, you cannot blacklist Santa itself, and Santa uses a distinct\n  separate cert than other Google apps.\n\n# Intentions and Expectations\n\nNo single system or process will stop *all* attacks, or provide 100% security.\nSanta is written with the intention of helping protect users from themselves.\nPeople often download malware and trust it, giving the malware credentials, or\nallowing unknown software to exfiltrate more data about your system. As a\ncentrally managed component, Santa can help stop the spread of malware among a\nlarge fleet of machines. Independently, Santa can aid in analyzing what is\nrunning on your computer.\n\nSanta is part of a defense-in-depth strategy, and you should continue to\nprotect hosts in whatever other ways you see fit.\n\n# Security and Performance-Related Features\n\n* In-kernel caching: whitelisted binaries are cached in the kernel so the\n  processing required to make a request is only done if the binary isn\'t\n  already cached.\n\n* Userland components validate each other: each of the userland components (the\n  daemon, the GUI agent and the command-line utility) communicate with each\n  other using XPC and check that their signing certificates are identical\n  before any communication is accepted.\n\n* Kext uses only KPIs: the kernel extension only uses provided kernel\n  programming interfaces to do its job. This means that the kext code should\n  continue to work across OS versions.\n\n# Known Issues\n\n* Santa only blocks execution (execve and variants), it doesn\'t protect against\n  dynamic libraries loaded with dlopen, libraries on disk that have been\n  replaced, or libraries loaded using `DYLD_INSERT_LIBRARIES`. As of version\n  0.9.1 we *do* address [__PAGEZERO missing issues](b87482e) that were\n  exploited in some versions of macOS. We are working on also protecting\n  against similar avenues of attack.\n\n* Kext communication security: the kext will only accept a connection from a\n  single client at a time and said client must be running as root. We haven\'t\n  yet found a good way to ensure the kext only accepts connections from a valid\n  client.\n\n* Database protection: the SQLite database is installed with permissions so\n  that only the root user can read/write it. We\'re considering approaches to\n  secure this further.\n\n* Scripts: Santa is currently written to ignore any execution that isn\'t a\n  binary. This is because after weighing the administration cost vs the\n  benefit, we found it wasn\'t worthwhile. Additionally, a number of\n  applications make use of temporary generated scripts, which we can\'t possibly\n  whitelist and not doing so would cause problems. We\'re happy to revisit this\n  (or at least make it an option) if it would be useful to others.\n\n# Sync Servers\n\n* The `santactl` command-line client includes a flag to synchronize with a\n  management server, which uploads events that have occurred on the machine and\n  downloads new rules. There are several open-source servers you can sync with:\n\n    * [Upvote](https://github.com/google/upvote) - An AppEngine-based server\n      that implements social voting to make managing a large fleet easier.\n    * [Moroz](https://github.com/groob/moroz) - A simple golang server that\n      serves hardcoded rules from simple configuration files.\n    * [Zentral](https://github.com/zentralopensource/zentral/wiki) - A\n      centralized service that pulls data from multiple sources and deploy\n      configurations to multiple services.\n\n* Alternatively, `santactl` can configure rules locally (without a sync\n  server).\n\n# Screenshots\n\nA tool like Santa doesn\'t really lend itself to screenshots, so here\'s a video\ninstead.\n\n<p align="center"> <img src="https://zippy.gfycat.com/MadFatalAmphiuma.gif"\nalt="Santa Block Video" /> </p>\n\n# Kext Signing\nKernel extensions on macOS 10.9 and later must be signed using an Apple-provided\nDeveloper ID certificate with a kernel extension flag. Without it, the only way\nto load an extension is to enable kext-dev-mode or disable SIP, depending on\nthe OS version.\n\nThere are two possible solutions for this, for distribution purposes:\n\n1) Use a [pre-built, pre-signed\nversion](https://github.com/google/santa/releases) of the kext that we supply.\nEach time changes are made to the kext code we will update the pre-built\nversion that you can make use of. This doesn\'t prevent you from making changes\nto the non-kext parts of Santa and distributing those.  If you make changes to\nthe kext and make a pull request, we can merge them in and distribute a new\nversion of the pre-signed kext.\n\n2) Apply for your own [kext signing\ncertificate](https://developer.apple.com/contact/kext/).  Apple will only grant\nthis for broad distribution within an organization, they won\'t issue them just\nfor testing purposes.\n\n# Contributing\nPatches to this project are very much welcome. Please see the\n[CONTRIBUTING](https://github.com/google/santa/blob/master/CONTRIBUTING.md)\nfile.\n\n# Disclaimer\nThis is **not** an official Google product.\n'