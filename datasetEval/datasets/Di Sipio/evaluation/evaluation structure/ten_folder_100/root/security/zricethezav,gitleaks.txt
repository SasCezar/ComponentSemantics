b'Gitleaks\n--------\n\n<p align="left">\n      <a href="https://travis-ci.org/zricethezav/gitleaks"><img alt="Travis" src="https://img.shields.io/travis/zricethezav/gitleaks/master.svg?style=flat-square"></a>\n</p>\n\nAudit git repos for secrets. Gitleaks provides a way for you to find unencrypted secrets and other unwanted data types in git repositories. As part of it\'s core functionality, it provides:\n\n* Audits for uncommitted changes\n* Github and Gitlab support including support for bulk organization and repository owner (user) repository scans, as well as pull/merge request scanning for use in common CI workflows.\n* Support for private repository scans, and repositories that require key based authentication\n* Output in JSON formats for consumption in other reporting tools and frameworks\n* Externalised configuration for environment specific customisation including regex rules\n* High performance through the use of src-d\'s [go-git](https://github.com/src-d/go-git) framework\n\n\n\n|  `repo scan` |\n|---|\n| <p align="left"><img src="https://raw.githubusercontent.com/zricethezav/gifs/master/repo-scan.gif"></p>  | <p align="left"><img src="https://raw.githubusercontent.com/zricethezav/gifs/master/repo-scan.gif"></p> |\n\n| `pre commit scan` |\n|---|\n|  <p align="left"><img src="https://raw.githubusercontent.com/zricethezav/gifs/master/pre-commit-1.gif"></p> |\n\n## Getting Started\n\nWritten in Go, gitleaks is available in binary form for many popular platforms and OS types from the [releases page](https://github.com/zricethezav/gitleaks/releases). Alternatively, executed via Docker or it can be installed using Go directly, as per the below;\n\n#### MacOS\n\n```\nbrew install gitleaks\n```\n\n#### Docker\n\n```bash\ndocker pull zricethezav/gitleaks\n```\n\n#### Go\n\n```bash\ngo get -u github.com/zricethezav/gitleaks\n```\n\n## Usage\n\ngitleaks has a wide range of configuration options that can be adjusted at runtime or via a configuration file based on your specific requirements.\n\n```\nUsage:\n  gitleaks [OPTIONS]\n\nApplication Options:\n  -v, --verbose       Show verbose output from audit\n  -r, --repo=         Target repository\n      --config=       config path\n      --disk          Clones repo(s) to disk\n      --version       version number\n      --timeout=      Timeout (s)\n      --username=     Username for git repo\n      --password=     Password for git repo\n      --access-token= Access token for git repo\n      --commit=       sha of commit to audit\n      --threads=      Maximum number of threads gitleaks spawns\n      --ssh-key=      path to ssh key used for auth\n      --uncommitted   run gitleaks on uncommitted code\n      --repo-path=    Path to repo\n      --owner-path=   Path to owner directory (repos discovered)\n      --branch=       Branch to audit\n      --report=       path to write json leaks file\n      --redact        redact secrets from log messages and leaks\n      --debug         log debug messages\n      --repo-config   Load config from target repo. Config file must be ".gitleaks.toml" or "gitleaks.toml"\n      --pretty        Pretty print json if leaks are present\n      --host=         git hosting service like gitlab or github. Supported hosts include: Github, Gitlab\n      --org=          organization to audit\n      --user=         user to audit\n      --pr=           pull/merge request url\n\nHelp Options:\n  -h, --help          Show this help message\n```\n\n### Docker usage examples\n\nRun gitleaks against:\n\n###### Public repository\n\n```bash\ndocker run --rm --name=gitleaks zricethezav/gitleaks -v -r https://github.com/zricethezav/gitleaks.git\n```\n\n###### Local repository already cloned into /tmp/\n\n```bash\ndocker run --rm --name=gitleaks -v /tmp/:/code/ zricethezav/gitleaks -v --repo-path=/code/gitleaks\n```\n\nBy default repos cloned to memory. Using `--disk` for clone to disk or you can quickly out of memory.\n\nFor speed up analyze operation using `--threads` parameter, which set to `ALL - 1` threads at your instance CPU.\n\n\n## Exit Codes\n\nGitleaks provides consistent exist codes to assist in automation workflows such as CICD platforms and bulk scanning.\n\n\n```\n0: no leaks\n1: leaks present\n2: error encountered\n```\n\n### Give Thanks\n\nIf using gitleaks has made you job easier consider donating to one of [Sam](https://www.flickr.com/photos/146541520@N08/albums/72157710121716312)\'s favorite places, the Japan House on the University of Illinois at Urbana-Champaign\'s campus: https://japanhouse.illinois.edu/make-a-gift\n\n'