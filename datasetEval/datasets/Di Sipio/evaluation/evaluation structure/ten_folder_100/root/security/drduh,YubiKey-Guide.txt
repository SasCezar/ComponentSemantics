b'This is a guide to using [YubiKey](https://www.yubico.com/products/yubikey-hardware/) as a [SmartCard](https://security.stackexchange.com/questions/38924/how-does-storing-gpg-ssh-private-keys-on-smart-cards-compare-to-plain-usb-drives) for storing GPG encryption, signing and authentication keys, which can also be used for SSH. Many of the principles in this document are applicable to other smart card devices.\n\nKeys stored on YubiKey are [non-exportable](https://support.yubico.com/support/solutions/articles/15000010242-can-i-duplicate-or-back-up-a-yubikey-) (as opposed to file-based keys that are stored on disk) and are convenient for everyday use. Instead of having to remember and enter passphrases to unlock SSH/GPG keys, YubiKey needs only a physical touch after being unlocked with a PIN. All signing and encryption operations happen on the card, rather than in OS memory.\n\n**New!** [drduh/Purse](https://github.com/drduh/Purse) is a password manager which uses GPG and YubiKey.\n\nIf you have a comment or suggestion, please open an [Issue](https://github.com/drduh/YubiKey-Guide/issues) on GitHub.\n\n- [Purchase YubiKey](#purchase-yubikey)\n- [Verify YubiKey](#verify-yubikey)\n- [Download OS Image](#download-os-image)\n- [Required software](#required-software)\n  * [Debian/Ubuntu](#debian-ubuntu)\n  * [Arch](#arch)\n  * [RHEL7](#rhel7)\n  * [OpenBSD](#openbsd)\n  * [macOS](#macos)\n  * [Windows](#windows)\n- [Entropy](#entropy)\n- [Creating keys](#creating-keys)\n- [Master key](#master-key)\n- [Sign with an existing key (optional)](#sign-with-an-existing-key--optional-)\n- [Sub-keys](#sub-keys)\n  * [Signing](#signing)\n  * [Encryption](#encryption)\n  * [Authentication](#authentication)\n  * [Add extra emails](#add-extra-emails)\n- [Verify](#verify)\n- [Export](#export)\n- [Backup](#backup)\n- [Configure Smartcard](#configure-smartcard)\n  * [Change PIN](#change-pin)\n  * [Set information](#set-information)\n- [Transfer keys](#transfer-keys)\n  * [Signing](#signing-1)\n  * [Encryption](#encryption-1)\n  * [Authentication](#authentication-1)\n- [Verify card](#verify-card)\n- [Cleanup](#cleanup)\n- [Using keys](#using-keys)\n- [Rotating keys](#rotating-keys)\n- [SSH](#ssh)\n  * [Create configuration](#create-configuration)\n  * [Replace agents](#replace-agents)\n  * [Copy public key](#copy-public-key)\n  * [(Optional) Save public key for identity file configuration](#-optional--save-public-key-for-identity-file-configuration)\n  * [Connect with public key authentication](#connect-with-public-key-authentication)\n  * [Import SSH keys](#import-ssh-keys)\n  * [Remote Machines (Agent Forwarding)](#remote-machines--agent-forwarding-)\n    + [Steps for older distributions](#steps-for-older-distributions)\n  * [GitHub](#github)\n  * [OpenBSD](#openbsd-1)\n  * [Windows](#windows-1)\n    + [WSL](#wsl)\n      - [Prerequisites](#prerequisites)\n      - [WSL configuration](#wsl-configuration)\n      - [Remote host configuration](#remote-host-configuration)\n- [Multiple Keys](#multiple-keys)\n- [Require touch](#require-touch)\n- [Email](#email)\n  * [Mailvelope on macOS](#mailvelope-on-macos)\n- [Reset](#reset)\n- [Notes](#notes)\n- [Troubleshooting](#troubleshooting)\n- [Links](#links)\n\n# Purchase YubiKey\n\nAll YubiKeys except the blue "security key" model are compatible with this guide. NEO models are limited to 2048-bit RSA keys. Compare YubiKeys [here](https://www.yubico.com/products/yubikey-hardware/compare-products-series/).\n\n# Verify YubiKey\n\nTo verify a YubiKey is genuine, open a [browser with U2F support](https://support.yubico.com/support/solutions/articles/15000009591-how-to-confirm-your-yubico-device-is-genuine-with-u2f) to [https://www.yubico.com/genuine/](https://www.yubico.com/genuine/). Insert a Yubico device, and select *Verify Device* to begin the process. Touch the YubiKey when prompted, and if asked, allow it to see the make and model of the device. If you see *Verification complete*, the device is authentic.\n\nThis website verifies the YubiKey\'s device attestation certificates signed by a set of Yubico CAs, and helps mitigate [supply chain attacks](https://media.defcon.org/DEF%20CON%2025/DEF%20CON%2025%20presentations/DEF%20CON%2025%20-%20r00killah-and-securelyfitz-Secure-Tokin-and-Doobiekeys.pdf).\n\n# Download OS Image\n\nYou will need several small storage devices for booting a temporary operating system and creating backups of your private/public keys.\n\nIt is recommended to generate cryptographic keys and configure YubiKey from a secure operating system and using an ephemeral environment ("live image"), such as [Debian](https://www.debian.org/CD/live/), [Tails](https://tails.boum.org/index.en.html), or [OpenBSD](https://www.openbsd.org/) booted from a USB drive.\n\nDepending on your threat model and/or level of inherent trust in your own system, it may also be a valid option to run the live image within a virtual machine using VirtualBox or VMWare software.\n\nTo use Debian, download the latest image:\n\n```console\n$ curl -LfO https://cdimage.debian.org/debian-cd/current-live/amd64/iso-hybrid/debian-live-10.2.0-amd64-xfce.iso\n\n$ curl -LfO https://cdimage.debian.org/debian-cd/current-live/amd64/iso-hybrid/SHA512SUMS\n\n$ curl -LfO https://cdimage.debian.org/debian-cd/current-live/amd64/iso-hybrid/SHA512SUMS.sign\n```\n\nVerify the signature of the hashes file with GPG:\n\n```console\n$ gpg --verify SHA512SUMS.sign SHA512SUMS\ngpg: Signature made Sat Nov 16 18:49:18 2019 PST\ngpg:                using RSA key DF9B9C49EAA9298432589D76DA87E80D6294BE9B\ngpg: Can\'t check signature: No public key\n\n$ gpg --keyserver hkps://keyring.debian.org --recv DF9B9C49EAA9298432589D76DA87E80D6294BE9B\ngpg: key 0xDA87E80D6294BE9B: 5 signatures not checked due to missing keys\ngpg: key 0xDA87E80D6294BE9B: public key "Debian CD signing key <debian-cd@lists.debian.org>" imported\ngpg: Total number processed: 1\ngpg:               imported: 1\n\n$ gpg --verify SHA512SUMS.sign SHA512SUMS\ngpg: Signature made Sat Nov 16 18:49:18 2019 PST\ngpg:                using RSA key DF9B9C49EAA9298432589D76DA87E80D6294BE9B\ngpg: Good signature from "Debian CD signing key <debian-cd@lists.debian.org>" [unknown]\ngpg: WARNING: This key is not certified with a trusted signature!\ngpg:          There is no indication that the signature belongs to the owner.\nPrimary key fingerprint: DF9B 9C49 EAA9 2984 3258  9D76 DA87 E80D 6294 BE9B\n```\n\nIf the public key cannot be received, try changing the DNS resolver and/or use a different keyserver:\n\n```console\n$ gpg --keyserver hkps://keyserver.ubuntu.com:443 --recv DF9B9C49EAA9298432589D76DA87E80D6294BE9B\n```\n\nEnsure the SHA512 hash of the live image matches the one in the signed file.\n\n```console\n$ grep $(sha512sum debian-live-10.2.0-amd64-xfce.iso) SHA512SUMS\nSHA512SUMS:b253e347bf04c4e16b4c948b88bfba58f6084717f8ca290d5ea320837f63cf69b46734b7127dabd114ad88022075020982434fcf31463b82c6225671e7116a4d  debian-live-10.2.0-amd64-xfce.iso\n```\n\nSee [Verifying authenticity of Debian CDs](https://www.debian.org/CD/verify) for more information.\n\nMount a storage device and copy the image to it:\n\n**Linux**\n\n```console\n$ sudo dmesg | tail\nusb-storage 3-2:1.0: USB Mass Storage device detected\nscsi host2: usb-storage 3-2:1.0\nscsi 2:0:0:0: Direct-Access     TS-RDF5  SD  Transcend    TS3A PQ: 0 ANSI: 6\nsd 2:0:0:0: Attached scsi generic sg1 type 0\nsd 2:0:0:0: [sdb] 31116288 512-byte logical blocks: (15.9 GB/14.8 GiB)\nsd 2:0:0:0: [sdb] Write Protect is off\nsd 2:0:0:0: [sdb] Mode Sense: 23 00 00 00\nsd 2:0:0:0: [sdb] Write cache: disabled, read cache: enabled, doesn\'t support DPO or FUA\nsdb: sdb1 sdb2\nsd 2:0:0:0: [sdb] Attached SCSI removable disk\n\n$ sudo dd if=debian-live-10.2.0-amd64-xfce.iso of=/dev/sdb bs=4M; sync\n465+1 records in\n465+1 records out\n1951432704 bytes (2.0 GB, 1.8 GiB) copied, 42.8543 s, 45.5 MB/s\n```\n\n**OpenBSD**\n\n```console\n$ dmesg | tail -n2\nsd2 at scsibus4 targ 1 lun 0: <TS-RDF5, SD Transcend, TS3A> SCSI4 0/direct removable serial.0000000000000\nsd2: 15193MB, 512 bytes/sector, 31116288 sectors\n\n$ doas dd if=debian-live-10.2.0-amd64-xfce.iso of=/dev/rsd2c bs=4m\n465+1 records in\n465+1 records out\n1951432704 bytes transferred in 139.125 secs (14026448 bytes/sec)\n```\n\nShut down the computer and disconnect internal hard drives and all unnecessary peripheral devices. If being run within a VM, this part can be skipped as no such devices should be attached to the VM since the image will still be run as a "live image".\n\nIf on physical hardware consider using secure hardware like a ThinkPad X230 running [Coreboot](https://www.coreboot.org/) and [cleaned of Intel ME](https://github.com/corna/me_cleaner).\n\n# Required software\n\nBoot the live image and configure networking.\n\n**Note** If the screen locks, unlock with `user`/`live`.\n\nOpen the terminal and install required software packages.\n\n## Debian/Ubuntu\n\n**Note** Live Ubuntu images [may require modification](https://github.com/drduh/YubiKey-Guide/issues/116) to `/etc/apt/sources.list`\n\n```console\n$ sudo apt update\n\n$ sudo apt install -y gnupg2 gnupg-agent dirmngr cryptsetup scdaemon pcscd secure-delete hopenpgp-tools yubikey-personalization\n```\n\n## Arch\n\n```console\n$ sudo pacman -Syu gnupg2 pcsclite ccid hopenpgp-tools yubikey-personalization\n```\n\n## RHEL7\n\n```console\n$ sudo yum install -y gnupg2 pinentry-curses pcsc-lite pcsc-lite-libs gnupg2-smime\n```\n\n## OpenBSD\n\n```console\n$ doas pkg_add gnupg pcsc-tools\n```\n\n## macOS\n\nDownload and install [Homebrew](https://brew.sh/) and the following packages:\n\n```console\n$ brew install gnupg yubikey-personalization hopenpgp-tools ykman pinentry-mac\n```\n\n**Note** An additional Python package dependency may need to be installed to use [`ykman`](https://support.yubico.com/support/solutions/articles/15000012643-yubikey-manager-cli-ykman-user-guide) - `pip install yubikey-manager`\n\n## Windows\n\nDownload and install [Gpg4Win](https://www.gpg4win.org/) and [PuTTY](https://putty.org).\n\nYou may also need more recent versions of [yubikey-personalization](https://developers.yubico.com/yubikey-personalization/Releases/) and [yubico-c](https://developers.yubico.com/yubico-c/Releases/).\n\n# Entropy\n\nGenerating cryptographic keys requires high-quality [randomness](https://www.random.org/randomness/), measured as entropy.\n\nTo check the available entropy available on Linux:\n\n```console\n$ cat /proc/sys/kernel/random/entropy_avail\n849\n```\n\nMost operating systems use software-based pseudorandom number generators. A hardware random number generator like [OneRNG](https://onerng.info/onerng/) will [increase the speed](https://lwn.net/Articles/648550/) of entropy generation and possibly the quality.\n\nInstall and configure OneRNG software:\n\n```console\n$ sudo apt install -y at rng-tools python-gnupg openssl\n\n$ wget https://github.com/OneRNG/onerng.github.io/raw/master/sw/onerng_3.6-1_all.deb\n\n$ sha256sum onerng_3.6-1_all.deb\na9ccf7b04ee317dbfc91518542301e2d60ebe205d38e80563f29aac7cd845ccb  onerng_3.6-1_all.deb\n\n$ sudo dpkg -i onerng_3.6-1_all.deb\n\n$ echo "HRNGDEVICE=/dev/ttyACM0" | sudo tee /etc/default/rng-tools\n```\n\nPlug in the device and restart rng-tools:\n\n```console\n$ sudo atd\n\n$ sudo service rng-tools restart\n```\n\nTest by emptying `/dev/random` - the light on the device will dim briefly:\n\n```console\n$ cat /dev/random >/dev/null\n[Press Control-C]\n```\n\nAfter a few seconds, verify the available entropy pool is quickly re-seeded:\n\n```console\n$ cat /proc/sys/kernel/random/entropy_avail\n3049\n```\n\nAn entropy pool value greater than 2000 is sufficient.\n\n# Creating keys\n\nCreate a temporary directory which will be cleared on [reboot](https://en.wikipedia.org/wiki/Tmpfs):\n\n```console\n$ export GNUPGHOME=$(mktemp -d)\n\n$ cd $GNUPGHOME\n```\n\nCreate a hardened configuration in the temporary directory with the following options:\n\n```console\n$ wget https://raw.githubusercontent.com/drduh/config/master/gpg.conf\n\n$ grep -ve "^#" $GNUPGHOME/gpg.conf\npersonal-cipher-preferences AES256 AES192 AES\npersonal-digest-preferences SHA512 SHA384 SHA256\npersonal-compress-preferences ZLIB BZIP2 ZIP Uncompressed\ndefault-preference-list SHA512 SHA384 SHA256 AES256 AES192 AES ZLIB BZIP2 ZIP Uncompressed\ncert-digest-algo SHA512\ns2k-digest-algo SHA512\ns2k-cipher-algo AES256\ncharset utf-8\nfixed-list-mode\nno-comments\nno-emit-version\nkeyid-format 0xlong\nlist-options show-uid-validity\nverify-options show-uid-validity\nwith-fingerprint\nrequire-cross-certification\nno-symkey-cache\nthrow-keyids\nuse-agent\n```\n\nDisable networking for the remainder of the setup.\n\n# Master key\n\nThe first key to generate is the master key. It will be used for certification only: to issue sub-keys that are used for encryption, signing and authentication.\n\n**Important** The master key should be kept offline at all times and only accessed to revoke or issue new sub-keys. Keys can also be generated on the YubiKey itself to ensure no other copies exist.\n\nYou\'ll be prompted to enter and verify a passphrase - keep it handy as you\'ll need it multiple times later.\n\nTo generate a strong passphrase which could be written down in a hidden or secure place; or memorized:\n\n```console\n$ gpg --gen-random -a 0 24\nydOmByxmDe63u7gqx2XI9eDgpvJwibNH\n```\n\nOn Linux or OpenBSD, select the password with the mouse to copy it to the clipboard and paste using the middle mouse button or `Shift`-`Insert`.\n\nGenerate a new key with GPG, selecting `(8) RSA (set your own capabilities)`, `Certify` capability only and `4096` bit key size.\n\nDo not set the master key to expire - see [Note #3](#notes).\n\n```console\n$ gpg --expert --full-generate-key\n\nPlease select what kind of key you want:\n   (1) RSA and RSA (default)\n   (2) DSA and Elgamal\n   (3) DSA (sign only)\n   (4) RSA (sign only)\n   (7) DSA (set your own capabilities)\n   (8) RSA (set your own capabilities)\n   (9) ECC and ECC\n  (10) ECC (sign only)\n  (11) ECC (set your own capabilities)\n  (13) Existing key\nYour selection? 8\n\nPossible actions for a RSA key: Sign Certify Encrypt Authenticate\nCurrent allowed actions: Sign Certify Encrypt\n\n   (S) Toggle the sign capability\n   (E) Toggle the encrypt capability\n   (A) Toggle the authenticate capability\n   (Q) Finished\n\nYour selection? E\n\nPossible actions for a RSA key: Sign Certify Encrypt Authenticate\nCurrent allowed actions: Sign Certify\n\n   (S) Toggle the sign capability\n   (E) Toggle the encrypt capability\n   (A) Toggle the authenticate capability\n   (Q) Finished\n\nYour selection? S\n\nPossible actions for a RSA key: Sign Certify Encrypt Authenticate\nCurrent allowed actions: Certify\n\n   (S) Toggle the sign capability\n   (E) Toggle the encrypt capability\n   (A) Toggle the authenticate capability\n   (Q) Finished\n\nYour selection? Q\nRSA keys may be between 1024 and 4096 bits long.\nWhat keysize do you want? (2048) 4096\nRequested keysize is 4096 bits\nPlease specify how long the key should be valid.\n         0 = key does not expire\n      <n>  = key expires in n days\n      <n>w = key expires in n weeks\n      <n>m = key expires in n months\n      <n>y = key expires in n years\nKey is valid for? (0) 0\nKey does not expire at all\nIs this correct? (y/N) y\n```\n\nSelect a name and email address - neither has to be valid nor existing.\n\n```console\nGnuPG needs to construct a user ID to identify your key.\n\nReal name: Dr Duh\nEmail address: doc@duh.to\nComment: [Optional - leave blank]\nYou selected this USER-ID:\n    "Dr Duh <doc@duh.to>"\n\nChange (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? o\n\nWe need to generate a lot of random bytes. It is a good idea to perform\nsome other action (type on the keyboard, move the mouse, utilize the\ndisks) during the prime generation; this gives the random number\ngenerator a better chance to gain enough entropy.\n\ngpg: /tmp.FLZC0xcM/trustdb.gpg: trustdb created\ngpg: key 0xFF3E7D88647EBCDB marked as ultimately trusted\ngpg: directory \'/tmp.FLZC0xcM/openpgp-revocs.d\' created\ngpg: revocation certificate stored as \'/tmp.FLZC0xcM/openpgp-revocs.d/011CE16BD45B27A55BA8776DFF3E7D88647EBCDB.rev\'\npublic and secret key created and signed.\n\npub   rsa4096/0xFF3E7D88647EBCDB 2017-10-09 [C]\n      Key fingerprint = 011C E16B D45B 27A5 5BA8  776D FF3E 7D88 647E BCDB\nuid                              Dr Duh <doc@duh.to>\n```\n\nExport the key ID as a [variable](https://stackoverflow.com/questions/1158091/defining-a-variable-with-or-without-export/1158231#1158231) (`KEYID`) for use later:\n\n```console\n$ export KEYID=0xFF3E7D88647EBCDB\n```\n\n# Sign with an existing key (optional)\n\nIf you already have a PGP key, you may want to sign the new key with the old one to prove that the new key is controlled by you.\n\nExport your existing key to move it to the working keyring:\n\n```console\n$ gpg --export-secret-keys --armor --output /tmp/new.sec\n```\n\nThen sign the new key:\n\n```console\n$ gpg  --default-key $OLDKEY --sign-key $KEYID\n```\n\n# Sub-keys\n\nEdit the master key to add sub-keys:\n\n```console\n$ gpg --expert --edit-key $KEYID\n\nSecret key is available.\n\nsec  rsa4096/0xEA5DE91459B80592\n    created: 2017-10-09  expires: never       usage: C\n    trust: ultimate      validity: ultimate\n[ultimate] (1). Dr Duh <doc@duh.to>\n```\n\nUse 4096-bit RSA keys.\n\nUse a 1 year expiration for sub-keys - they can be renewed using the offline master key. See [rotating keys](#rotating-keys).\n\n## Signing\n\nCreate a [signing key](https://stackoverflow.com/questions/5421107/can-rsa-be-both-used-as-encryption-and-signature/5432623#5432623) by selecting `(4) RSA (sign only)`:\n\n```console\ngpg> addkey\nKey is protected.\n\nYou need a passphrase to unlock the secret key for\nuser: "Dr Duh <doc@duh.to>"\n4096-bit RSA key, ID 0xFF3E7D88647EBCDB, created 2016-05-24\n\nPlease select what kind of key you want:\n   (3) DSA (sign only)\n   (4) RSA (sign only)\n   (5) Elgamal (encrypt only)\n   (6) RSA (encrypt only)\n   (7) DSA (set your own capabilities)\n   (8) RSA (set your own capabilities)\nYour selection? 4\nRSA keys may be between 1024 and 4096 bits long.\nWhat keysize do you want? (2048) 4096\nRequested keysize is 4096 bits\nPlease specify how long the key should be valid.\n         0 = key does not expire\n      <n>  = key expires in n days\n      <n>w = key expires in n weeks\n      <n>m = key expires in n months\n      <n>y = key expires in n years\nKey is valid for? (0) 1y\nKey expires at Mon 10 Sep 2018 00:00:00 PM UTC\nIs this correct? (y/N) y\nReally create? (y/N) y\nWe need to generate a lot of random bytes. It is a good idea to perform\nsome other action (type on the keyboard, move the mouse, utilize the\ndisks) during the prime generation; this gives the random number\ngenerator a better chance to gain enough entropy.\n\nsec  rsa4096/0xFF3E7D88647EBCDB\n    created: 2017-10-09  expires: never       usage: C\n    trust: ultimate      validity: ultimate\nssb  rsa4096/0xBECFA3C1AE191D15\n    created: 2017-10-09  expires: 2018-10-09       usage: S\n[ultimate] (1). Dr Duh <doc@duh.to>\n```\n\n## Encryption\n\nNext, create an [encryption key](https://www.cs.cornell.edu/courses/cs5430/2015sp/notes/rsa_sign_vs_dec.php) by selecting `(6) RSA (encrypt only)`:\n\n```console\ngpg> addkey\nPlease select what kind of key you want:\n   (3) DSA (sign only)\n   (4) RSA (sign only)\n   (5) Elgamal (encrypt only)\n   (6) RSA (encrypt only)\n   (7) DSA (set your own capabilities)\n   (8) RSA (set your own capabilities)\n  (10) ECC (sign only)\n  (11) ECC (set your own capabilities)\n  (12) ECC (encrypt only)\n  (13) Existing key\nYour selection? 6\nRSA keys may be between 1024 and 4096 bits long.\nWhat keysize do you want? (2048) 4096\nRequested keysize is 4096 bits\nPlease specify how long the key should be valid.\n         0 = key does not expire\n      <n>  = key expires in n days\n      <n>w = key expires in n weeks\n      <n>m = key expires in n months\n      <n>y = key expires in n years\nKey is valid for? (0) 1y\nKey expires at Mon 10 Sep 2018 00:00:00 PM UTC\nIs this correct? (y/N) y\nReally create? (y/N) y\nWe need to generate a lot of random bytes. It is a good idea to perform\nsome other action (type on the keyboard, move the mouse, utilize the\ndisks) during the prime generation; this gives the random number\ngenerator a better chance to gain enough entropy.\n\nsec  rsa4096/0xFF3E7D88647EBCDB\n    created: 2017-10-09  expires: never       usage: C\n    trust: ultimate      validity: ultimate\nssb  rsa4096/0xBECFA3C1AE191D15\n    created: 2017-10-09  expires: 2018-10-09       usage: S\nssb  rsa4096/0x5912A795E90DD2CF\n    created: 2017-10-09  expires: 2018-10-09       usage: E\n[ultimate] (1). Dr Duh <doc@duh.to>\n```\n\n## Authentication\n\nFinally, create an [authentication key](https://superuser.com/questions/390265/what-is-a-gpg-with-authenticate-capability-used-for).\n\nGPG doesn\'t provide an authenticate-only key type, so select `(8) RSA (set your own capabilities)` and toggle the required capabilities until the only allowed action is `Authenticate`:\n\n```console\ngpg> addkey\nPlease select what kind of key you want:\n   (3) DSA (sign only)\n   (4) RSA (sign only)\n   (5) Elgamal (encrypt only)\n   (6) RSA (encrypt only)\n   (7) DSA (set your own capabilities)\n   (8) RSA (set your own capabilities)\n  (10) ECC (sign only)\n  (11) ECC (set your own capabilities)\n  (12) ECC (encrypt only)\n  (13) Existing key\nYour selection? 8\n\nPossible actions for a RSA key: Sign Encrypt Authenticate\nCurrent allowed actions: Sign Encrypt\n\n   (S) Toggle the sign capability\n   (E) Toggle the encrypt capability\n   (A) Toggle the authenticate capability\n   (Q) Finished\n\nYour selection? S\n\nPossible actions for a RSA key: Sign Encrypt Authenticate\nCurrent allowed actions: Encrypt\n\n   (S) Toggle the sign capability\n   (E) Toggle the encrypt capability\n   (A) Toggle the authenticate capability\n   (Q) Finished\n\nYour selection? E\n\nPossible actions for a RSA key: Sign Encrypt Authenticate\nCurrent allowed actions:\n\n   (S) Toggle the sign capability\n   (E) Toggle the encrypt capability\n   (A) Toggle the authenticate capability\n   (Q) Finished\n\nYour selection? A\n\nPossible actions for a RSA key: Sign Encrypt Authenticate\nCurrent allowed actions: Authenticate\n\n   (S) Toggle the sign capability\n   (E) Toggle the encrypt capability\n   (A) Toggle the authenticate capability\n   (Q) Finished\n\nYour selection? Q\nRSA keys may be between 1024 and 4096 bits long.\nWhat keysize do you want? (2048) 4096\nRequested keysize is 4096 bits\nPlease specify how long the key should be valid.\n         0 = key does not expire\n      <n>  = key expires in n days\n      <n>w = key expires in n weeks\n      <n>m = key expires in n months\n      <n>y = key expires in n years\nKey is valid for? (0) 1y\nKey expires at Mon 10 Sep 2018 00:00:00 PM UTC\nIs this correct? (y/N) y\nReally create? (y/N) y\nWe need to generate a lot of random bytes. It is a good idea to perform\nsome other action (type on the keyboard, move the mouse, utilize the\ndisks) during the prime generation; this gives the random number\ngenerator a better chance to gain enough entropy.\n\nsec  rsa4096/0xFF3E7D88647EBCDB\n    created: 2017-10-09  expires: never       usage: C\n    trust: ultimate      validity: ultimate\nssb  rsa4096/0xBECFA3C1AE191D15\n    created: 2017-10-09  expires: 2018-10-09       usage: S\nssb  rsa4096/0x5912A795E90DD2CF\n    created: 2017-10-09  expires: 2018-10-09       usage: E\nssb  rsa4096/0x3F29127E79649A3D\n    created: 2017-10-09  expires: 2018-10-09       usage: A\n[ultimate] (1). Dr Duh <doc@duh.to>\n```\n\nFinish by saving the keys.\n\n```console\ngpg> save\n```\n\n## Add extra emails\n\n```console\ngpg> adduid\nReal name: Dr Duh\nEmail address: DrDuh@other.org\nComment:\nYou selected this USER-ID:\n    "Dr Duh <DrDuh@other.org>"\n\nsec  rsa4096/0xFF3E7D88647EBCDB\n    created: 2017-10-09  expires: never       usage: SC\n    trust: ultimate      validity: ultimate\nssb  rsa4096/0xBECFA3C1AE191D15\n    created: 2017-10-09  expires: never       usage: S\nssb  rsa4096/0x5912A795E90DD2CF\n    created: 2017-10-09  expires: never       usage: E\nssb  rsa4096/0x3F29127E79649A3D\n    created: 2017-10-09  expires: never       usage: A\n[ultimate] (1). Dr Duh <doc@duh.to>\n[ unknown] (2). Dr Duh <DrDuh@other.org>\n\n\ngpg> trust\nsec  rsa4096/0xFF3E7D88647EBCDB\n    created: 2017-10-09  expires: never       usage: SC\n    trust: ultimate      validity: ultimate\nssb  rsa4096/0xBECFA3C1AE191D15\n    created: 2017-10-09  expires: never       usage: S\nssb  rsa4096/0x5912A795E90DD2CF\n    created: 2017-10-09  expires: never       usage: E\nssb  rsa4096/0x3F29127E79649A3D\n    created: 2017-10-09  expires: never       usage: A\n[ultimate] (1). Dr Duh <doc@duh.to>\n[ unknown] (2). Dr Duh <DrDuh@other.org>\n\nPlease decide how far you trust this user to correctly verify other users\' keys\n(by looking at passports, checking fingerprints from different sources, etc.)\n\n  1 = I don\'t know or won\'t say\n  2 = I do NOT trust\n  3 = I trust marginally\n  4 = I trust fully\n  5 = I trust ultimately\n  m = back to the main menu\n\nYour decision? 5\nDo you really want to set this key to ultimate trust? (y/N) y\n\nsec  rsa4096/0xFF3E7D88647EBCDB\n    created: 2017-10-09  expires: never       usage: SC\n    trust: ultimate      validity: ultimate\nssb  rsa4096/0xBECFA3C1AE191D15\n    created: 2017-10-09  expires: never       usage: S\nssb  rsa4096/0x5912A795E90DD2CF\n    created: 2017-10-09  expires: never       usage: E\nssb  rsa4096/0x3F29127E79649A3D\n    created: 2017-10-09  expires: never       usage: A\n[ultimate] (1). Dr Duh <doc@duh.to>\n[ unknown] (2). Dr Duh <DrDuh@other.org>\n\ngpg> save\n```\n\n# Verify\n\nList the generated secret keys and verify the output:\n\n```console\n$ gpg -K\n/tmp.FLZC0xcM/pubring.kbx\n-------------------------------------------------------------------------\nsec   rsa4096/0xFF3E7D88647EBCDB 2017-10-09 [C]\n      Key fingerprint = 011C E16B D45B 27A5 5BA8  776D FF3E 7D88 647E BCDB\nuid                            Dr Duh <doc@duh.to>\nssb   rsa4096/0xBECFA3C1AE191D15 2017-10-09 [S] [expires: 2018-10-09]\nssb   rsa4096/0x5912A795E90DD2CF 2017-10-09 [E] [expires: 2018-10-09]\nssb   rsa4096/0x3F29127E79649A3D 2017-10-09 [A] [expires: 2018-10-09]\n```\n\nAdd any additional identities or email addresses you wish to associate using the `adduid` command.\n\n**Tip** Verify with a OpenPGP [key best practice checker](https://riseup.net/en/security/message-security/openpgp/best-practices#openpgp-key-checks):\n\n```console\n$ gpg --export $KEYID | hokey lint\n```\n\nThe output will display any problems with your key in red text. If everything is green, your key passes each of the tests. If it is red, your key has failed one of the tests.\n\n> hokey may warn (orange text) about cross certification for the authentication key. GPG\'s [Signing Subkey Cross-Certification](https://gnupg.org/faq/subkey-cross-certify.html) documentation has more detail on cross certification, and gpg v2.2.1 notes "subkey <keyid> does not sign and so does not need to be cross-certified". hokey may also indicate a problem (red text) with `Key expiration times: []` on the primary key (see [Note #3](#notes) about not setting an expiry for the primary key).\n\n# Export\n\nThe master key and sub-keys will be encrypted with your passphrase when exported.\n\nSave a copy of your keys:\n\n```console\n$ gpg --armor --export-secret-keys $KEYID > $GNUPGHOME/mastersub.key\n\n$ gpg --armor --export-secret-subkeys $KEYID > $GNUPGHOME/sub.key\n```\n\nOn Windows, note that using any extension other than `.gpg` or attempting IO redirection to a file will garble the secret key, making it impossible to import it again at a later date:\n\n```console\n$ gpg -o \\path\\to\\dir\\mastersub.gpg --armor --export-secret-keys $KEYID\n\n$ gpg -o \\path\\to\\dir\\sub.gpg --armor --export-secret-subkeys $KEYID\n```\n\n# Backup\n\nOnce keys are moved to YubiKey, they cannot be moved again! Create an **encrypted** backup of the keyring and consider using a [paper copy](https://www.jabberwocky.com/software/paperkey/) of the keys as an additional backup measure.\n\n**Tip**: The ext2 filesystem (without encryption) can be mounted on both Linux and OpenBSD.\n\n**Linux**\n\nAttach another external storage device and check its label:\n\n```console\n$ sudo dmesg | tail\nusb-storage 4-2:1.0: USB Mass Storage device detected\nscsi host7: usb-storage 4-2:1.0\nscsi 7:0:0:0: Direct-Access     TS-RDF5  SD  Transcend    TS37 PQ: 0 ANSI: 6\nsd 7:0:0:0: Attached scsi generic sg1 type 0\nsd 7:0:0:0: [sdb] 31116288 512-byte logical blocks: (15.9 GB/14.8 GiB)\nsd 7:0:0:0: [sdb] Write Protect is off\nsd 7:0:0:0: [sdb] Mode Sense: 23 00 00 00\nsd 7:0:0:0: [sdb] Write cache: disabled, read cache: enabled, doesn\'t support DPO or FUA\nsdb: sdb1\nsd 7:0:0:0: [sdb] Attached SCSI removable disk\n```\n\nWrite it with random data to prepare for encryption:\n\n```console\n$ sudo dd if=/dev/urandom of=/dev/sdb bs=4M status=progress\n```\n\nErase and create a new partition table:\n\n```console\n$ sudo fdisk /dev/sdb\nWelcome to fdisk (util-linux 2.29.2).\n\nCommand (m for help): o\nCreated a new DOS disklabel with disk identifier 0xeac7ee35.\n\nCommand (m for help): w\nThe partition table has been altered.\nCalling ioctl() to re-read partition table.\nSyncing disks.\n```\n\nCreate a new partition with a 10 Megabyte size:\n\n```console\n$ sudo fdisk /dev/sdb\nWelcome to fdisk (util-linux 2.29.2).\n\nCommand (m for help): n\nPartition type\n   p   primary (0 primary, 0 extended, 4 free)\n   e   extended (container for logical partitions)\nSelect (default p):\nPartition number (1-4, default 1):\nFirst sector (2048-62980095, default 2048):\nLast sector, +sectors or +size{K,M,G,T,P} (2048-62980095, default 62980095): +10M\n\nCreated a new partition 1 of type \'Linux\' and of size 10 MiB.\n\nCommand (m for help): w\nThe partition table has been altered.\nCalling ioctl() to re-read partition table.\nSyncing disks.\n```\n\nUse [LUKS](https://askubuntu.com/questions/97196/how-secure-is-an-encrypted-luks-filesystem) to encrypt the new partition:\n\n```console\n$ sudo cryptsetup luksFormat /dev/sdb1\n\nWARNING!\n========\nThis will overwrite data on /dev/sdb1 irrevocably.\n\nAre you sure? (Type uppercase yes): YES\nEnter passphrase:\nVerify passphrase:\n```\n\nMount the partition:\n\n```console\n$ sudo cryptsetup luksOpen /dev/sdb1 usb\nEnter passphrase for /dev/sdb1:\n```\n\nCreate a filesystem:\n\n```console\n$ sudo mkfs.ext2 /dev/mapper/usb -L usb\nCreating filesystem with 10240 1k blocks and 2560 inodes\nSuperblock backups stored on blocks:\n        8193\n\nAllocating group tables: done\nWriting inode tables: done\nWriting superblocks and filesystem accounting information: done\n```\n\nMount the filesystem and copy the temporary directory with the keyring:\n\n```console\n$ sudo mkdir /mnt/encrypted-usb\n\n$ sudo mount /dev/mapper/usb /mnt/encrypted-usb\n\n$ sudo cp -avi $GNUPGHOME /mnt/encrypted-usb\n```\n\n**Optional** Backup the OneRNG package:\n\n```console\n$ sudo cp onerng_3.6-1_all.deb /mnt/encrypted-usb\n```\n\nKeep the backup mounted if you plan on setting up two or more keys as `keytocard` **will [delete](https://lists.gnupg.org/pipermail/gnupg-users/2016-July/056353.html) the local copy** on save.\n\nOtherwise, unmount and disconnected the encrypted volume:\n\n```console\n$ sudo umount /mnt/encrypted-usb\n\n$ sudo cryptsetup luksClose usb\n```\n\nCreate another partition to store the public key, or skip this step if you plan on uploading it to a key server.\n\n**Important** Without the *public* key, you will not be able to use GPG to encrypt, decrypt, nor sign messages. However, you will still be able to use YubiKey for SSH authentication.\n\n```console\n$ sudo fdisk /dev/sdb\n\nCommand (m for help): n\nPartition type\n   p   primary (1 primary, 0 extended, 3 free)\n   e   extended (container for logical partitions)\nSelect (default p):\nPartition number (2-4, default 2):\nFirst sector (22528-31116287, default 22528):\nLast sector, +sectors or +size{K,M,G,T,P} (22528-31116287, default 31116287): +10M\n\nCreated a new partition 2 of type \'Linux\' and of size 10 MiB.\n\nCommand (m for help): w\nThe partition table has been altered.\nCalling ioctl() to re-read partition table.\nSyncing disks.\n\n$ sudo mkfs.ext2 /dev/sdb2\nCreating filesystem with 10240 1k blocks and 2560 inodes\nSuperblock backups stored on blocks:\n        8193\n\nAllocating group tables: done\nWriting inode tables: done\nWriting superblocks and filesystem accounting information: done\n\n$ sudo mkdir /mnt/public\n\n$ sudo mount /dev/sdb2 /mnt/public/\n\n$ gpg --armor --export $KEYID | sudo tee /mnt/public/$KEYID-$(date +%F).txt\n```\n\nWindows:\n\n```console\n$ gpg -o \\path\\to\\dir\\pubkey.gpg --armor --export $KEYID\n```\n\n**Optional** Upload the public key to a [public keyserver](https://debian-administration.org/article/451/Submitting_your_GPG_key_to_a_keyserver):\n\n```console\n$ gpg --send-key $KEYID\n\n$ gpg --keyserver pgp.mit.edu --send-key $KEYID\n\n$ gpg --keyserver keys.gnupg.net --send-key $KEYID\n\n$ gpg --keyserver hkps://keyserver.ubuntu.com:443 --send-key $KEYID\n```\n\nAfter some time, the public key will to propagate to [other](https://pgp.key-server.io/pks/lookup?search=doc%40duh.to&fingerprint=on&op=vindex) [servers](https://pgp.mit.edu/pks/lookup?search=doc%40duh.to&op=index).\n\n**OpenBSD**\n\nAttach a USB disk and determine its label:\n\n```console\n$ dmesg | grep sd.\\ at\nsd2 at scsibus5 targ 1 lun 0: <TS-RDF5, SD Transcend, TS37> SCSI4 0/direct removable serial.00000000000000000000\n```\n\nPrint the existing partitions to make sure it\'s the right device:\n\n```console\n$ doas disklabel -h sd2\n```\n\nInitialize the disk by creating an `a` partition with FS type `RAID` and size of 10 Megabytes:\n\n```console\n$ doas fdisk -iy sd2\nWriting MBR at offset 0.\n\n$ doas disklabel -E sd2\nLabel editor (enter \'?\' for help at any prompt)\nsd2> a a\noffset: [64]\nsize: [31101776] 10M\nFS type: [4.2BSD] RAID\nsd2*> w\nsd2> q\nNo label changes\n```\n\nEncrypt with bioctl:\n\n```console\n$ doas bioctl -c C -l sd2a softraid0\nNew passphrase:\nRe-type passphrase:\nsoftraid0: CRYPTO volume attached as sd3\n```\n\nCreate an `i` partition on the new crypto volume and the filesystem:\n\n```console\n$ doas fdisk -iy sd3\nWriting MBR at offset 0.\n\n$ doas disklabel -E sd3\nLabel editor (enter \'?\' for help at any prompt)\nsd3> a i\noffset: [64]\nsize: [16001]\nFS type: [4.2BSD]\nsd3*> w\nsd3> q\nNo label changes.\n\n$ doas newfs sd3i\n/dev/rsd3i: 7.8MB in 16000 sectors of 512 bytes\n4 cylinder groups of 1.95MB, 125 blocks, 256 inodes each\nsuper-block backups (for fsck -b #) at:\n 32, 4032, 8032, 12032,\n```\n\nMount the filesystem and copy the temporary directory with the keyring:\n\n```console\n$ doas mkdir /mnt/encrypted-usb\n\n$ doas mount /dev/sd3i /mnt/encrypted-usb\n\n$ doas cp -avi $GNUPGHOME /mnt/encrypted-usb\n```\n\nKeep the backup mounted if you plan on setting up two or more keys as `keytocard` **will [delete](https://lists.gnupg.org/pipermail/gnupg-users/2016-July/056353.html) the local copy** on save.\n\nOtherwise, unmount and disconnected the encrypted volume:\n\n```console\n$ doas umount /mnt/encrypted-usb\n\n$ doas bioctl -d sd3\n```\n\nSee [OpenBSD FAQ#14](https://www.openbsd.org/faq/faq14.html#softraidCrypto) for more information.\n\nCreate another partition to store the public key, or skip this step if you plan on uploading it to a key server.\n\n**Important** Without the public key, you will not be able to use GPG to encrypt, decrypt, nor sign messages. However, you will still be able to use YubiKey for SSH authentication.\n\n```console\n$ doas disklabel -E sd2\nLabel editor (enter \'?\' for help at any prompt)\nsd2> a b\noffset: [32130]\nsize: [31069710] 10M\nFS type: [swap] 4.2BSD\nsd2*> w\nsd2> q\nNo label changes.\n\n$ doas newfs sd2b\n/dev/rsd2b: 15.7MB in 32096 sectors of 512 bytes\n5 cylinder groups of 3.89MB, 249 blocks, 512 inodes each\nsuper-block backups (for fsck -b #) at:\n 32, 8000, 15968, 23936, 31904,\n\n$ doas mkdir /mnt/public\n\n$ doas mount /dev/sd2b /mnt/public\n\n$ gpg --armor --export $KEYID | doas tee /mnt/public/$KEYID.txt\n```\n\n# Configure Smartcard\n\n**Windows** Use the [YubiKey Manager](https://developers.yubico.com/yubikey-manager) application (note, this not the similarly named older YubiKey NEO Manager) to enable CCID functionality.\n\nUse GPG to configure YubiKey as a smartcard:\n\n```console\n$ gpg --card-edit\nReader ...........: Yubico Yubikey 4 OTP U2F CCID\nApplication ID ...: D2760001240102010006055532110000\nVersion ..........: 2.1\nManufacturer .....: Yubico\nSerial number ....: 05553211\nName of cardholder: [not set]\nLanguage prefs ...: [not set]\nSex ..............: unspecified\nURL of public key : [not set]\nLogin data .......: [not set]\nSignature PIN ....: not forced\nKey attributes ...: rsa2048 rsa2048 rsa2048\nMax. PIN lengths .: 127 127 127\nPIN retry counter : 3 0 3\nSignature counter : 0\nSignature key ....: [none]\nEncryption key....: [none]\nAuthentication key: [none]\nGeneral key info..: [none]\n```\n\n## Change PIN\n\nThe default PIN is `123456` and default Admin PIN (PUK) is `12345678`. CCID-mode PINs can be up to 127 ASCII characters.\n\nThe Admin PIN is required for some card operations and to unblock a PIN that has been entered incorrectly more than three times. See the GnuPG documentation on [Managing PINs](https://www.gnupg.org/howtos/card-howto/en/ch03s02.html) for details.\n\n```console\ngpg/card> admin\nAdmin commands are allowed\n\ngpg/card> passwd\ngpg: OpenPGP card no. D2760001240102010006055532110000 detected\n\n1 - change PIN\n2 - unblock PIN\n3 - change Admin PIN\n4 - set the Reset Code\nQ - quit\n\nYour selection? 3\nPIN changed.\n\n1 - change PIN\n2 - unblock PIN\n3 - change Admin PIN\n4 - set the Reset Code\nQ - quit\n\nYour selection? 1\nPIN changed.\n\n1 - change PIN\n2 - unblock PIN\n3 - change Admin PIN\n4 - set the Reset Code\nQ - quit\n\nYour selection? q\n```\n\n## Set information\n\nSome fields are optional.\n\n```console\ngpg/card> name\nCardholder\'s surname: Duh\nCardholder\'s given name: Dr\n\ngpg/card> lang\nLanguage preferences: en\n\ngpg/card> login\nLogin data (account name): doc@duh.to\n\ngpg/card> list\n\nApplication ID ...: D2760001240102010006055532110000\nVersion ..........: 2.1\nManufacturer .....: unknown\nSerial number ....: 05553211\nName of cardholder: Dr Duh\nLanguage prefs ...: en\nSex ..............: unspecified\nURL of public key : [not set]\nLogin data .......: doc@duh.to\nPrivate DO 4 .....: [not set]\nSignature PIN ....: not forced\nKey attributes ...: 2048R 2048R 2048R\nMax. PIN lengths .: 127 127 127\nPIN retry counter : 3 0 3\nSignature counter : 0\nSignature key ....: [none]\nEncryption key....: [none]\nAuthentication key: [none]\nGeneral key info..: [none]\n\ngpg/card> quit\n```\n\n# Transfer keys\n\n**Important** Transferring keys to YubiKey using `keytocard` is a destructive, one-way operation only. Make sure you\'ve made a backup before proceeding: `keytocard` converts the local, on-disk key into a stub, which means the on-disk copy is no longer usable to transfer to subsequent security key devices or mint additional keys.\n\nPrevious GPG versions required the `toggle` command before selecting keys. The currently selected key(s) are indicated with an `*`. When moving keys only one key should be selected at a time.\n\n```console\n$ gpg --edit-key $KEYID\n\nSecret key is available.\n\nsec  rsa4096/0xFF3E7D88647EBCDB\n    created: 2017-10-09  expires: never       usage: C\n    trust: ultimate      validity: ultimate\nssb  rsa4096/0xBECFA3C1AE191D15\n    created: 2017-10-09  expires: 2018-10-09  usage: S\nssb  rsa4096/0x5912A795E90DD2CF\n    created: 2017-10-09  expires: 2018-10-09  usage: E\nssb  rsa4096/0x3F29127E79649A3D\n    created: 2017-10-09  expires: 2018-10-09  usage: A\n[ultimate] (1). Dr Duh <doc@duh.to>\n```\n\n## Signing\n\nSelect and move the signature key. You will be prompted for the key passphrase and Admin PIN.\n\n```console\ngpg> key 1\n\nsec  rsa4096/0xFF3E7D88647EBCDB\n    created: 2017-10-09  expires: never       usage: C\n    trust: ultimate      validity: ultimate\nssb* rsa4096/0xBECFA3C1AE191D15\n    created: 2017-10-09  expires: 2018-10-09  usage: S\nssb  rsa4096/0x5912A795E90DD2CF\n    created: 2017-10-09  expires: 2018-10-09  usage: E\nssb  rsa4096/0x3F29127E79649A3D\n    created: 2017-10-09  expires: 2018-10-09  usage: A\n[ultimate] (1). Dr Duh <doc@duh.to>\n\ngpg> keytocard\nPlease select where to store the key:\n   (1) Signature key\n   (3) Authentication key\nYour selection? 1\n\nYou need a passphrase to unlock the secret key for\nuser: "Dr Duh <doc@duh.to>"\n4096-bit RSA key, ID 0xBECFA3C1AE191D15, created 2016-05-24\n```\n\n## Encryption\n\nType `key 1` again to de-select and `key 2` to select the next key:\n\n```console\ngpg> key 1\n\ngpg> key 2\n\nsec  rsa4096/0xFF3E7D88647EBCDB\n    created: 2017-10-09  expires: never       usage: C\n    trust: ultimate      validity: ultimate\nssb  rsa4096/0xBECFA3C1AE191D15\n    created: 2017-10-09  expires: 2018-10-09  usage: S\nssb* rsa4096/0x5912A795E90DD2CF\n    created: 2017-10-09  expires: 2018-10-09  usage: E\nssb  rsa4096/0x3F29127E79649A3D\n    created: 2017-10-09  expires: 2018-10-09  usage: A\n[ultimate] (1). Dr Duh <doc@duh.to>\n\ngpg> keytocard\nPlease select where to store the key:\n   (2) Encryption key\nYour selection? 2\n\n[...]\n```\n\n## Authentication\n\nType `key 2` again to deselect and `key 3` to select the last key:\n\n```console\ngpg> key 2\n\ngpg> key 3\n\nsec  rsa4096/0xFF3E7D88647EBCDB\n    created: 2017-10-09  expires: never       usage: C\n    trust: ultimate      validity: ultimate\nssb  rsa4096/0xBECFA3C1AE191D15\n    created: 2017-10-09  expires: 2018-10-09  usage: S\nssb  rsa4096/0x5912A795E90DD2CF\n    created: 2017-10-09  expires: 2018-10-09  usage: E\nssb* rsa4096/0x3F29127E79649A3D\n    created: 2017-10-09  expires: 2018-10-09  usage: A\n[ultimate] (1). Dr Duh <doc@duh.to>\n\ngpg> keytocard\nPlease select where to store the key:\n   (3) Authentication key\nYour selection? 3\n\ngpg> save\n```\n\n# Verify card\n\nVerify the sub-keys have been moved to YubiKey as indicated by `ssb>`:\n\n```console\n$ gpg -K\n/tmp.FLZC0xcM/pubring.kbx\n-------------------------------------------------------------------------\nsec   rsa4096/0xFF3E7D88647EBCDB 2017-10-09 [C]\n      Key fingerprint = 011C E16B D45B 27A5 5BA8  776D FF3E 7D88 647E BCDB\nuid                            Dr Duh <doc@duh.to>\nssb>  rsa4096/0xBECFA3C1AE191D15 2017-10-09 [S] [expires: 2018-10-09]\nssb>  rsa4096/0x5912A795E90DD2CF 2017-10-09 [E] [expires: 2018-10-09]\nssb>  rsa4096/0x3F29127E79649A3D 2017-10-09 [A] [expires: 2018-10-09]\n```\n\n# Cleanup\n\nEnsure you have:\n\n* Saved the encryption, signing and authentication sub-keys to YubiKey.\n* Saved the YubiKey PINs which you changed from defaults.\n* Saved the password to the master key.\n* Saved a copy of the master key, sub-keys and revocation certificates on an encrypted volume, to be stored offline.\n* Saved the password to that encrypted volume in a separate location.\n* Saved a copy of the public key somewhere easily accessible later.\n\nReboot or [securely delete](http://srm.sourceforge.net/) `$GNUPGHOME` and remove the secret keys from the GPG keyring:\n\n```console\n$ sudo srm -r $GNUPGHOME || sudo rm -rf $GNUPGHOME\n\n$ gpg --delete-secret-key $KEYID\n```\n\n**Important** Make sure you have securely erased all generated keys and revocation certificates if an ephemeral enviroment was not used!\n\n# Using keys\n\nDownload [drduh/config/gpg.conf](https://github.com/drduh/config/blob/master/gpg.conf):\n\n```console\n$ cd ~/.gnupg ; wget https://raw.githubusercontent.com/drduh/config/master/gpg.conf\n\n$ chmod 600 gpg.conf\n```\n\nInstall the required packages and mount the non-encrypted volume created earlier:\n\n**Linux**\n\n```console\n$ sudo apt update && sudo apt install -y gnupg2 gnupg-agent gnupg-curl scdaemon pcscd\n\n$ sudo mount /dev/sdb2 /mnt\n```\n\n**OpenBSD**\n\n```console\n$ doas pkg_add gnupg pcsc-tools\n\n$ doas mount /dev/sd2b /mnt\n```\n\nImport the public key:\n\n```console\n$ gpg --import /mnt/pubkey.txt\ngpg: key 0xFF3E7D88647EBCDB: public key "Dr Duh <doc@duh.to>" imported\ngpg: Total number processed: 1\ngpg:               imported: 1\n```\n\nOr download the public key from a keyserver:\n\n```console\n$ gpg --recv $KEYID\ngpg: requesting key 0xFF3E7D88647EBCDB from hkps server hkps.pool.sks-keyservers.net\n[...]\ngpg: key 0xFF3E7D88647EBCDB: public key "Dr Duh <doc@duh.to>" imported\ngpg: Total number processed: 1\ngpg:               imported: 1\n```\n\nEdit the master key to assign it ultimate trust by selecting `trust` and `5`:\n\n```console\n$ export KEYID=0xFF3E7D88647EBCDB\n\n$ gpg --edit-key $KEYID\n\ngpg> trust\npub  4096R/0xFF3E7D88647EBCDB  created: 2016-05-24  expires: never       usage: C\n                               trust: unknown       validity: unknown\nsub  4096R/0xBECFA3C1AE191D15  created: 2017-10-09  expires: 2018-10-09  usage: S\nsub  4096R/0x5912A795E90DD2CF  created: 2017-10-09  expires: 2018-10-09  usage: E\nsub  4096R/0x3F29127E79649A3D  created: 2017-10-09  expires: 2018-10-09  usage: A\n[ unknown] (1). Dr Duh <doc@duh.to>\n\nPlease decide how far you trust this user to correctly verify other users\' keys\n(by looking at passports, checking fingerprints from different sources, etc.)\n\n  1 = I don\'t know or won\'t say\n  2 = I do NOT trust\n  3 = I trust marginally\n  4 = I trust fully\n  5 = I trust ultimately\n  m = back to the main menu\n\nYour decision? 5\nDo you really want to set this key to ultimate trust? (y/N) y\n\npub  4096R/0xFF3E7D88647EBCDB  created: 2016-05-24  expires: never       usage: C\n                               trust: ultimate      validity: unknown\nsub  4096R/0xBECFA3C1AE191D15  created: 2017-10-09  expires: 2018-10-09  usage: S\nsub  4096R/0x5912A795E90DD2CF  created: 2017-10-09  expires: 2018-10-09  usage: E\nsub  4096R/0x3F29127E79649A3D  created: 2017-10-09  expires: 2018-10-09  usage: A\n[ unknown] (1). Dr Duh <doc@duh.to>\n\ngpg> quit\n```\n\nRemove and re-insert YubiKey and check the status:\n\n```console\n$ gpg --card-status\nApplication ID ...: D2760001240102010006055532110000\nVersion ..........: 2.1\nManufacturer .....: Yubico\nSerial number ....: 05553211\nName of cardholder: Dr Duh\nLanguage prefs ...: en\nSex ..............: unspecified\nURL of public key : [not set]\nLogin data .......: doc@duh.to\nSignature PIN ....: not forced\nKey attributes ...: 4096R 4096R 4096R\nMax. PIN lengths .: 127 127 127\nPIN retry counter : 3 3 3\nSignature counter : 0\nSignature key ....: 07AA 7735 E502 C5EB E09E  B8B0 BECF A3C1 AE19 1D15\n      created ....: 2016-05-24 23:22:01\nEncryption key....: 6F26 6F46 845B BEB8 BDF3  7E9B 5912 A795 E90D D2CF\n      created ....: 2016-05-24 23:29:03\nAuthentication key: 82BE 7837 6A3F 2E7B E556  5E35 3F29 127E 7964 9A3D\n      created ....: 2016-05-24 23:36:40\nGeneral key info..: pub  4096R/0xBECFA3C1AE191D15 2016-05-24 Dr Duh <doc@duh.to>\nsec#  4096R/0xFF3E7D88647EBCDB  created: 2016-05-24  expires: never\nssb>  4096R/0xBECFA3C1AE191D15  created: 2017-10-09  expires: 2018-10-09\n                      card-no: 0006 05553211\nssb>  4096R/0x5912A795E90DD2CF  created: 2017-10-09  expires: 2018-10-09\n                      card-no: 0006 05553211\nssb>  4096R/0x3F29127E79649A3D  created: 2017-10-09  expires: 2018-10-09\n                      card-no: 0006 05553211\n```\n\n`sec#` indicates master key is not available (as it should be stored encrypted offline).\n\n**Note** If you see `General key info..: [none]` in the output instead - go back and import the public key using the previous step.\n\nEncrypt a message to your own key (useful for storing password credentials and other data):\n\n```console\n$ echo "test message string" | gpg --encrypt --armor --recipient $KEYID -o encrypted.txt\n```\n\nTo encrypt to multiple recipients (or to multiple keys):\n\n```console\n$ echo "test message string" | gpg --encrypt --armor --recipient $KEYID_0 --recipient $KEYID_1 --recipient $KEYID_2 -o encrypted.txt\n```\n\nDecrypt the message:\n\n```console\n$ gpg --decrypt --armor encrypted.txt\ngpg: anonymous recipient; trying secret key 0x0000000000000000 ...\ngpg: okay, we are the anonymous recipient.\ngpg: encrypted with RSA key, ID 0x0000000000000000\ntest message string\n```\n\nSign a message:\n\n```console\n$ echo "test message string" | gpg --armor --clearsign > signed.txt\n```\n\nVerify the signature:\n\n```console\n$ gpg --verify signed.txt\ngpg: Signature made Wed 25 May 2016 00:00:00 AM UTC\ngpg:                using RSA key 0xBECFA3C1AE191D15\ngpg: Good signature from "Dr Duh <doc@duh.to>" [ultimate]\nPrimary key fingerprint: 011C E16B D45B 27A5 5BA8  776D FF3E 7D88 647E BCDB\n     Subkey fingerprint: 07AA 7735 E502 C5EB E09E  B8B0 BECF A3C1 AE19 1D15\n```\n\n# Rotating keys\n\nPGP does not provide forward secrecy - a compromised key may be used to decrypt all past messages. Although keys stored on YubiKey are difficult to steal, it is not impossible - the key and PIN could be taken, or a vulnerability may be discovered in key hardware or random number generator used to create them, for example. Therefore, it is good practice to occassionally rotate sub-keys.\n\nWhen a sub-key expires, it can either be renewed or replaced. Both actions require access to the offline master key. Renewing sub-keys by updating their expiration date indicates you are still in possession of the offline master key and is more convenient.\n\nReplacing keys, on the other hand, is less convenient but more secure: the new sub-keys will **not** be able to decrypt previous messages, authenticate with SSH, etc. Contacts will need to receive the updated public key and any encrypted secrets need to be decrypted and re-encrypted to new sub-keys to be usable. This process is functionally equivalent to "losing" the YubiKey and provisioning a new one. However, you will always be able to decrypt previous messages using the offline encrypted backup of the original keys.\n\nNeither rotation method is superior and it\'s up to personal philosophy on identity management and individual threat model to decide which one to use, or whether to expire sub-keys at all. Ideally, sub-keys would be ephemeral: used only once for each encryption, signing and authentication event, however in practice that is not really feasible or worthwhile with YubiKey. Advanced users may want to dedicate an offline device for more frequent key rotations and ease of provisioning.\n\nTo renew or rotate sub-keys, follow the same procedure to boot to a secure environment. Install required software and disconnect networking. Decrypt and mount the offline volume, then import the master key and configuration to a temporary working directory:\n\n```console\n$ export GNUPGHOME=$(mktemp -d)\n\n$ gpg --import /mnt/encrypted-usb/tmp.XXX/mastersub.key\n\n$ cp -v /mnt/encrypted-usb/tmp.XXX/gpg.conf $GNUPGHOME\n```\n\nEdit the master key:\n\n```console\n$ export KEYID=0xFF3E7D88647EBCDB\n\n$ gpg --edit-key $KEYID\n\nSecret key is available\n[...]\n```\n\nFollow the original steps to generate each sub-key. Previous sub-keys may be kept or deleted from the identity.\n\nFinish by exporting new keys:\n\n```console\n$ gpg --armor --export-secret-keys $KEYID > $GNUPGHOME/mastersub.key\n\n$ gpg --armor --export-secret-subkeys $KEYID > $GNUPGHOME/sub.key\n```\n\nCopy the **new** temporary working directory to encrypted offline storage, which should still be mounted:\n\n```console\n$ sudo cp -avi $GNUPGHOME /mnt/encrypted-usb\n```\n\nThere should now be at least two versions of the master and sub-keys backed up:\n\n```console\n$ ls /mnt/encrypted-usb\nlost+found  tmp.ykhTOGjR36  tmp.2gyGnyCiHs\n```\n\nUnmount and close the encrypted volume:\n\n```console\n$ sudo umount /mnt/encrypted-usb\n\n$ sudo cryptsetup luksClose /dev/mapper/usb/\n```\n\nExport the updated public key:\n\n```console\n$ sudo mkdir /mnt/public\n\n$ sudo mount /dev/sdb2 /mnt/public\n\n$ gpg --armor --export $KEYID | sudo tee /mnt/public/$KEYID-$(date +%F).txt\n\n$ sudo umount /mnt/public\n```\n\nDisconnect the storage device and follow the original steps to transfer new keys (4, 5 and 6) to YubiKey, replacing existing ones. Reboot or securely erase the GPG temporary working directory.\n\n# SSH\n\n[gpg-agent](https://wiki.archlinux.org/index.php/GnuPG#SSH_agent) supports the OpenSSH ssh-agent protocol (`enable-ssh-support`), as well as Putty\'s Pageant on Windows (`enable-putty-support`). This means it can be used instead of the traditional ssh-agent / pageant. There are some differences from ssh-agent, notably that gpg-agent does not _cache_ keys rather it converts, encrypts and stores them - persistently - as GPG keys and then makes them available to ssh clients. Any existing ssh private keys that you\'d like to keep in `gpg-agent` should be deleted after they\'ve been imported to the GPG agent.\n\nWhen importing the key to `gpg-agent`, you\'ll be prompted for a passphrase to protect that key within GPG\'s key store - you may want to use the same passphrase as the original\'s ssh version. GPG can both cache passphrases for a determined period (ref. `gpg-agent`\'s various `cache-ttl` options), and since version 2.1 can store and fetch passphrases via the macOS keychain. Note than when removing the old private key after importing to `gpg-agent`, keep the `.pub` key file around for use in specifying ssh identities (e.g. `ssh -i /path/to/identity.pub`).\n\nProbably the biggest thing missing from `gpg-agent`\'s ssh agent support is being able to remove keys. `ssh-add -d/-D` have no effect. Instead, you need to use the `gpg-connect-agent` utility to lookup a key\'s keygrip, match that with the desired ssh key fingerprint (as an MD5) and then delete that keygrip. The [gnupg-users mailing list](https://lists.gnupg.org/pipermail/gnupg-users/2016-August/056499.html) has more information.\n\n## Create configuration\n\nCreate a hardened configuration for gpg-agent by downloading [drduh/config/gpg-agent.conf](https://github.com/drduh/config/blob/master/gpg-agent.conf):\n\n```console\n$ cd ~/.gnupg\n\n$ wget https://raw.githubusercontent.com/drduh/config/master/gpg-agent.conf\n\n$ grep -ve "^#" gpg-agent.conf\nenable-ssh-support\ndefault-cache-ttl 60\nmax-cache-ttl 120\npinentry-program /usr/bin/pinentry-curses\n```\n\n**Important** The `cache-ttl` options do **NOT** apply when using a YubiKey as a smartcard as the PIN is [cached by the smartcard itself](https://dev.gnupg.org/T3362). Therefore, in order to clear the PIN from cache (smartcard equivalent to `default-cache-ttl` and `max-cache-ttl`), you need to unplug the YubiKey.\n\n**Tip** Set `pinentry-program /usr/bin/pinentry-gnome3` for a GUI-based prompt. If the _pinentry_ graphical dialog doesn\'t show and you get this error: `sign_and_send_pubkey: signing failed: agent refused operation`, you may need to install the `dbus-user-session` package and restart the computer for the `dbus` user session to be fully inherited; this is because behind the scenes, `pinentry` complains about `No $DBUS_SESSION_BUS_ADDRESS found`, falls back to `curses` but doesn\'t find the expected `tty`.\n\nOn macOS, use `brew install pinentry-mac` and adjust the program path to suit.\n\n## Replace agents\n\nTo launch `gpg-agent` for use by SSH, use the `gpg-connect-agent /bye` or `gpgconf --launch gpg-agent` commands.\n\nAdd these to the shell `rc` file:\n\n```console\nexport GPG_TTY="$(tty)"\nexport SSH_AUTH_SOCK="/run/user/$UID/gnupg/S.gpg-agent.ssh"\ngpg-connect-agent updatestartuptty /bye > /dev/null\n```\n\nOn modern systems, you can use the following instead, as `gpgconf --list-dirs agent-ssh-socket` will automatically set `SSH_AUTH_SOCK` to the correct value; and is therefore typically better than hard-coding to `run/user/$UID/gnupg/S.gpg-agent.ssh`, if available:\n\n```console\nexport GPG_TTY="$(tty)"\nexport SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)\ngpgconf --launch gpg-agent\n```\n\nNote that `SSH_AUTH_SOCK` normally only needs to be set on the *local* laptop (workstation), where the YubiKey is plugged in.  On the *remote* server that we SSH into, `ssh` will automatically set `SSH_AUTH_SOCK` to something like `/tmp/ssh-mXzCzYT2Np/agent.7541` when we connect.  We therefore do **NOT** manually set `SSH_AUTH_SOCK` on the server - doing so would break [SSH Agent Forwarding](#remote-machines-agent-forwarding).\n\n\n## Copy public key\n\n**Note** It is **not** necessary to import the corresponding GPG public key in order to use SSH.\n\nCopy and paste the output from `ssh-add` to the server\'s `authorized_keys` file:\n\n```console\n$ ssh-add -L\nssh-rsa AAAAB4NzaC1yc2EAAAADAQABAAACAz[...]zreOKM+HwpkHzcy9DQcVG2Nw== cardno:000605553211\n```\n\n## (Optional) Save public key for identity file configuration\n\nBy default, SSH attempts to use all the identities available via the agent. It\'s often a good idea to manage exactly which keys SSH will use to connect to a server, for example to separate different roles or [to avoid being fingerprinted by untrusted ssh servers](https://blog.filippo.io/ssh-whoami-filippo-io/). To do this you\'ll need to use the command line argument `-i [identity_file]` or the `IdentityFile` and `IdentitiesOnly` options in `.ssh/config`.\n\nThe argument provided to `IdentityFile` is traditionally the path to the _private_ key file (for example `IdentityFile ~/.ssh/id_rsa`). For the YubiKey - indeed, in general for keys stored in an ssh agent - `IdentityFile` should point to the _public_ key file, `ssh` will select the appropriate private key from those available via the ssh agent. To prevent `ssh` from trying all keys in the agent use the `IdentitiesOnly yes` option along with one or more `-i` or `IdentityFile` options for the target host.\n\nTo reiterate, with `IdentitiesOnly yes`, `ssh` will not automatically enumerate public keys loaded into `ssh-agent` or `gpg-agent`. This means `publickey` authentication will not proceed unless explicitly named by `ssh -i [identity_file]` or in `.ssh/config` on a per-host basis.\n\nIn the case of YubiKey usage, to extract the public key from the ssh agent:\n\n```console\n$ ssh-add -L | grep "cardno:000605553211" > ~/.ssh/id_rsa_yubikey.pub\n```\n\nThen you can explicitly associate this YubiKey-stored key for used with a host, `github.com` for example, as follows:\n\n```console\n$ cat << EOF >> ~/.ssh/config\nHost github.com\n    IdentitiesOnly yes\n    IdentityFile ~/.ssh/id_rsa_yubikey.pub\nEOF\n```\n\n## Connect with public key authentication\n\n```console\n$ ssh git@github.com -vvv\n[...]\ndebug2: key: cardno:000605553211 (0x1234567890),\ndebug1: Authentications that can continue: publickey\ndebug3: start over, passed a different list publickey\ndebug3: preferred gssapi-keyex,gssapi-with-mic,publickey,keyboard-interactive,password\ndebug3: authmethod_lookup publickey\ndebug3: remaining preferred: keyboard-interactive,password\ndebug3: authmethod_is_enabled publickey\ndebug1: Next authentication method: publickey\ndebug1: Offering RSA public key: cardno:000605553211\ndebug3: send_pubkey_test\ndebug2: we sent a publickey packet, wait for reply\ndebug1: Server accepts key: pkalg ssh-rsa blen 535\ndebug2: input_userauth_pk_ok: fp e5:de:a5:74:b1:3e:96:9b:85:46:e7:28:53:b4:82:c3\ndebug3: sign_and_send_pubkey: RSA e5:de:a5:74:b1:3e:96:9b:85:46:e7:28:53:b4:82:c3\ndebug1: Authentication succeeded (publickey).\n[...]\n```\n\n**Note** To make multiple connections or securely transfer many files, consider using the [ControlMaster](https://en.wikibooks.org/wiki/OpenSSH/Cookbook/Multiplexing) ssh option. Also see [drduh/config/ssh_config](https://github.com/drduh/config/blob/master/ssh_config).\n\n## Import SSH keys\n\nIf there are existing SSH keys that you wish to make available via `gpg-agent`, you\'ll need to import them. You should then remove the original private keys. When importing the key, `gpg-agent` uses the key\'s filename as the key\'s label; this makes it easier to follow where the key originated from. In this example, we\'re starting with just the YubiKey\'s key in place and importing `~/.ssh/id_rsa`:\n\n```console\n$ ssh-add -l\n4096 SHA256:... cardno:00060123456 (RSA)\n\n$ ssh-add ~/.ssh/id_rsa && rm ~/.ssh/id_rsa\n```\n\nWhen invoking `ssh-add`, it will prompt for the SSH key\'s passphrase if present, then the `pinentry` program will prompt and confirm for a new passphrase to use to encrypt the converted key within the GPG key store.\n\nThe migrated key should be listed in `ssh-add -l`:\n\n```console\n$ ssh-add -l\n4096 SHA256:... cardno:00060123456 (RSA)\n2048 SHA256:... /Users/username/.ssh/id_rsa (RSA)\n```\n\nOr to show the keys with MD5 fingerprints, as used by `gpg-connect-agent`\'s `KEYINFO` and `DELETE_KEY` commands:\n\n```console\n$ ssh-add -E md5 -l\n4096 MD5:... cardno:00060123456 (RSA)\n2048 MD5:... /Users/username/.ssh/id_rsa (RSA)\n```\n\nWhen using the key `pinentry` will be invoked to request the key\'s passphrase. The passphrase will be cached for up to 10 minutes idle time between uses, to a maximum of 2 hours.\n\n## Remote Machines (Agent Forwarding)\n\n**Note** SSH Agent Forwarding can [add additional risk](https://matrix.org/blog/2019/05/08/post-mortem-and-remediations-for-apr-11-security-incident/#ssh-agent-forwarding-should-be-disabled) - proceed with caution!\n\nTo use YubiKey to sign a git commit on a remote host, or ssh through another network, configure and use Agent Forwarding.\n\nTo do this, you need access to the remote machine and the YubiKey has to be set up on the host machine.\n\nOn the remote machine, edit `/etc/ssh/sshd_config` to set `StreamLocalBindUnlink yes`\n\n**Optional** If you do not have root access to the remote machine to edit `/etc/ssh/sshd_config`, you will need to remove the socket on the remote machine before forwarding works. For example, `rm /run/user/1000/gnupg/S.gpg-agent`. Further information can be found on the [AgentForwarding GNUPG wiki page](https://wiki.gnupg.org/AgentForwarding).\n\nImport public keys to the remote machine. This can be done by fetching from a keyserver. On the local machine, copy the public keyring to the remote machine:\n\n```console\n$ scp ~/.gnupg/pubring.kbx remote:~/.gnupg/\n```\n\nYou should now be able use `ssh -A remote` on the _local_ machine to log into _remote_, and should then be able to use YubiKey as if it were connected to the remote machine. For example, using e.g. `ssh-add -l` on that remote machine should show the public key from the YubiKey (note `cardno:`).  (If you don\'t want to have to remember to use `ssh -A`, you can use `ForwardAgent yes` in `~/.ssh/config`.  As a security best practice, always use `ForwardAgent yes` only for a single `Hostname`, never for all servers.)\n\nOn modern distributions, such as Fedora 30, there is typically no need to also set `RemoteForward` in `~/.ssh/config` as detailed in the next chapter, because the right thing actually happens automatically.\n\n\n### Steps for older distributions\n\nOn the local machine, run:\n\n```console\n$ gpgconf --list-dirs agent-extra-socket\n```\n\nThis should return a path to agent-extra-socket - `/run/user/1000/gnupg/S.gpg-agent.extra` - though on older Linux distros (and macOS) it may be `/home/<user>/.gnupg/S/gpg-agent.extra`\n\nFind the agent socket on the **remote** machine:\n\n```console\n$ gpgconf --list-dirs agent-socket\n```\n\nThis should return a path such as `/run/user/1000/gnupg/S.gpg-agent`\n\nFinally, enable agent forwarding for a given machine by adding the following to the local machine\'s ssh config file `~/.ssh/config` (your agent sockets may be different):\n\n```\nHost\n  Hostname remote-host.tld\n  ForwardAgent yes\n  RemoteForward /run/user/1000/gnupg/S.gpg-agent /run/user/1000/gnupg/S.gpg-agent.extra\n  # RemoteForward [remote socket] [local socket]\n```\n\nIf you\'re still having problems, it may be necessary to edit `gpg-agent.conf` file on both the remote and local machines to add the following information:\n\n```\nenable-ssh-support\npinentry-program /usr/bin/pinentry-curses\nextra-socket /run/user/1000/gnupg/S.gpg-agent.extra\n```\n\nSee [Issue #85](https://github.com/drduh/YubiKey-Guide/issues/85) for more information and troubleshooting.\n\n## GitHub\n\nYou can use YubiKey to sign GitHub commits and tags. It can also be used for GitHub SSH authentication, allowing you to push, pull, and commit without a password.\n\nLogin to GitHub and upload SSH and PGP public keys in Settings.\n\nTo configure a signing key:\n\n\t> git config --global user.signingkey $KEYID\n\nMake sure the user.email option matches the email address associated with the PGP identity.\n\nNow, to sign commits or tags simply use the `-S` option. GPG will automatically query YubiKey and prompt you for a PIN.\n\nTo authenticate:\n\n**Windows**\n\nRun the following command:\n\n\t> git config --global core.sshcommand \'plink -agent\'\n\nYou can then change the repository url to `git@github.com:USERNAME/repository` and any authenticated commands will be authorized by YubiKey.\n\n**Note** If you encounter the error `gpg: signing failed: No secret key` - run `gpg --card-status` with YubiKey plugged in and try the git command again.\n\n## OpenBSD\n\nInstall and enable tools for use with PC/SC drivers, cards, readers, then reboot to recognize YubiKey:\n\n```console\n$ doas pkg_add pcsc-tools\n\n$ doas rcctl enable pcscd\n\n$ doas reboot\n```\n\n## Windows\n\nWindows can already have some virtual smartcard readers installed, like the one provided for Windows Hello. To ensure your YubiKey is the correct one used by scdaemon, you should add it to its configuration. You will need your device\'s full name. To find out what is your device\'s full name, plug your YubiKey, open the Device Manager, select "View->Show hidden devices". Go to the Software Devices list, you should see something like `Yubico YubiKey OTP+FIDO+CCID 0`. The name slightly differs according to the model. Thanks to [Scott Hanselman](https://www.hanselman.com/blog/HowToSetupSignedGitCommitsWithAYubiKeyNEOAndGPGAndKeybaseOnWindows.aspx) for sharing this information.\n\n* Create or edit %APPDATA%/gnupg/scdaemon.conf, add `reader-port <your yubikey device\'s full name>`.\n* In %APPDATA%/gnupg/gpg-agent.conf, add:\n\n```\nenable-ssh-support\nenable-putty-support\n```\n\n* Open a command console, restart the agent:\n\n```\n> gpg-connect-agent killagent /bye\n> gpg-connect-agent /bye\n```\n\n* Enter `> gpg --card-status` to see YubiKey details.\n* Import the [public key](#export-public-key): `> gpg --import <path to public key file>`\n* Trust it: [Trust master key](#trust-master-key)\n* Retrieve the public key id: `> gpg --list-public-keys`\n* Export the SSH key from GPG: `> gpg --export-ssh-key <public key id>`\n\nCopy this key to a file for later use. It represents the public SSH key corresponding to the secret key on the YubiKey. You can upload this key to any server you wish to SSH into.\n\n* Create a shortcut that points to `gpg-connect-agent /bye` and place it in the startup folder `shell:startup` to make sure the agent starts after a system shutdown. Modify the shortcut properties so it starts in a "Minimized" window, to avoid unnecessary noise at startup.\n\nNow you can use PuTTY for public key SSH authentication. When the server asks for public key verification, PuTTY will forward the request to GPG, which will prompt you for a PIN and authorize the login using YubiKey.\n\n### WSL\n\nThe goal here is to make the SSH client inside WSL work together with the Windows agent you are using (gpg-agent.exe in our case). Here is what we are going to achieve:\n![WSL agent architecture](media/schema_gpg.png)\n\n**Note** this works only for SSH agent forwarding. Real GPG forwarding (encryption/decryption) is actually not supported. See the [weasel-pageant](https://github.com/vuori/weasel-pageant) readme for further information.\n\n#### Prerequisites\n\n* Ubuntu 16.04 or newer for WSL\n* Kleopatra\n* [Windows configuration](#windows)\n\n#### WSL configuration\n\nDownload or clone [weasel-pageant](https://github.com/vuori/weasel-pageant).\n\nAdd `eval $(/mnt/c/<path of extraction>/weasel-pageant -r -a /tmp/S.weasel-pageant)` to shell rc file. Use a named socket here so it can be used in the `RemoteForward` directive of `~/.ssh/config`. Source it with `source ~/.bashrc`.\n\nDisplay the SSH key with `$ ssh-add -l`\n\nEdit `~/.ssh/config` to add the following for each host you want to use agent forwarding:\n\n```\nForwardAgent yes\nRemoteForward <remote ssh socket path> /tmp/S.weasel-pageant\n```\n\n**Note** The remote ssh socket path can be found with `gpgconf --list-dirs agent-ssh-socket`\n\n#### Remote host configuration\n\nYou may have to add the following to the shell rc file:  _(On Linux, this is only required on the laptop/workstation where the YubiKey is plugged in, and **NOT** on the remote host server that you connect to; in fact at least on some Linux distributions, changing SSH_AUTH_SOCK on the server breaks agent forwarding.)_\n\n```\nexport SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)\nexport GPG_TTY=$(tty)\n```\n\nAdd the following to `/etc/ssh/sshd_config`:\n\n```\nAllowAgentForwarding yes\nStreamLocalBindUnlink yes\n```\n\nAnd reload the SSH daemon (e.g., `sudo service sshd reload`).\n\nUnplug YubiKey, disconnect or reboot. Log back in to Windows, open a WSL console and enter `ssh-add -l` - you should see nothing.\n\nPlug in YubiKey, enter the same command to display the ssh key.\n\nLog in to the remote host, you should have the pinentry dialog asking for the YubiKey pin.\n\nOn the remote host, type `ssh-add -l` - if you see the ssh key, that means forwarding works!\n\n**Note** Agent forwarding may be chained through multiple hosts - just follow the same [protocol](#remote-host-configuration) to configure each host.\n\n# Multiple Keys\n\nTo use a single identity with multiple YubiKeys - or to replace a lost card with another - issue this command to switch keys:\n\n```console\n$ gpg-connect-agent "scd serialno" "learn --force" /bye\n```\n\nAlternatively, you could manually delete the GnuPG shadowed key - where the card serial number is stored (see [GnuPG #T2291](https://dev.gnupg.org/T2291)).\n\nFind the `Keygrip` number of each key:\n\n```console\n$ gpg --with-keygrip -k $KEYID\npub   rsa4096/0xFF3E7D88647EBCDB 2017-10-09 [C]\n      Key fingerprint = 011C E16B D45B 27A5 5BA8  776D FF3E 7D88 647E BCDB\n      Keygrip = 7A20855980A62C10569DE893157F38A696B1300E\nuid                  [  ultime ] Dr Duh <doc@duh.to>\nsub   rsa4096/0xBECFA3C1AE191D15 2017-10-09 [S] [expires: 2018-10-09]\n      Keygrip = 85D44BD52AD45C0852BD15BF41161EE9AE477398\nsub   rsa4096/0x5912A795E90DD2CF 2017-10-09 [E] [expires: 2018-10-09]\n      Keygrip = A0AA3D9F626BDEA3B833F290C7BCA79216C8A996\nsub   rsa4096/0x3F29127E79649A3D 2017-10-09 [A] [expires: 2018-10-09]\n      Keygrip = 7EF25A1115294342F451BC1CDD0FA94395F2D074\n```\n\nDelete all the shadow keys using their `Keygrip` number:\n\n```console\n$ cd ~/.gnupg/private-keys-v1.d\n\n$ rm 85D44BD52AD45C0852BD15BF41161EE9AE477398.key \\\n    A0AA3D9F626BDEA3B833F290C7BCA79216C8A996.key \\\n    7EF25A1115294342F451BC1CDD0FA94395F2D074.key\n```\n\nInsert the new YubiKey and re-generate shadow-keys by checking card status:\n\n```console\n$ gpg --card-status\n```\n\nSee discussion in Issues [#19](https://github.com/drduh/YubiKey-Guide/issues/19) and [#112](https://github.com/drduh/YubiKey-Guide/issues/112) for more information and troubleshooting steps.\n\n# Require touch\n\n**Note** This is not possible on YubiKey NEO.\n\nBy default, YubiKey will perform encryption, signing and authentication operations without requiring any action from the user, after the key is plugged in and first unlocked with the PIN.\n\nTo require a touch for each key operation, install [YubiKey Manager](https://developers.yubico.com/yubikey-manager/) and recall the Admin PIN:\n\n**Note** Older versions of YubiKey Manager use `touch` instead of `set-touch` in the following commands.\n\nAuthentication:\n\n```console\n$ ykman openpgp set-touch aut on\n```\n\nSigning:\n\n```console\n$ ykman openpgp set-touch sig on\n```\n\nEncryption:\n\n```console\n$ ykman openpgp set-touch enc on\n```\n\nYubiKey will blink when it is waiting for a touch. On Linux you can also use [yubikey-touch-detector](https://github.com/maximbaz/yubikey-touch-detector) to have an indicator or notification that YubiKey is waiting for a touch.\n\n# Email\n\nGPG keys on YubiKey can be used with ease to encrypt and/or sign emails and attachments using [Thunderbird](https://www.thunderbird.net/) and [Enigmail](https://www.enigmail.net). Thunderbird supports OAuth 2 authentication and can be used with Gmail. See [this guide](https://ssd.eff.org/en/module/how-use-pgp-linux) from EFF for detailed instructions.\n\n## Mailvelope on macOS\n\n[Mailvelope](https://www.mailvelope.com/en) allows GPG keys on YubiKey to be used with Gmail and others.\n\nOn macOS, install gpgme using Homebrew:\n\n```console\n$ brew install gpgme\n```\n\nTo allow Chrome to run gpgme:\n```console\n$ nano ~/Library/Application\\ Support/Google/Chrome/NativeMessagingHosts/gpgmejson.json\n```\nand paste:\n```json\n{\n    "name": "gpgmejson",\n    "description": "Integration with GnuPG",\n    "path": "/usr/local/bin/gpgme-json",\n    "type": "stdio",\n    "allowed_origins": [\n        "chrome-extension://kajibbejlbohfaggdiogboambcijhkke/"\n    ]\n}\n```\n\nEdit the default path to allow Chrome to find gpg:\n```console\n$ sudo launchctl config user path /usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\n```\n\nClose Chrome if it is running and reboot your Mac.\n\nFinally install the [mailvelope extension](https://chrome.google.com/webstore/detail/mailvelope/kajibbejlbohfaggdiogboambcijhkke) from the Chrome app store.\n\n# Reset\n\nIf PIN attempts are exceeded, the card is locked and must be [reset](https://developers.yubico.com/ykneo-openpgp/ResetApplet.html) and set up again using the encrypted backup.\n\nCopy the following script to a file and run `gpg-connect-agent -R $file` to lock and terminate the card. Then re-insert YubiKey to reset.\n\n```console\n/hex\nscd serialno\nscd apdu 00 20 00 81 08 40 40 40 40 40 40 40 40\nscd apdu 00 20 00 81 08 40 40 40 40 40 40 40 40\nscd apdu 00 20 00 81 08 40 40 40 40 40 40 40 40\nscd apdu 00 20 00 81 08 40 40 40 40 40 40 40 40\nscd apdu 00 20 00 83 08 40 40 40 40 40 40 40 40\nscd apdu 00 20 00 83 08 40 40 40 40 40 40 40 40\nscd apdu 00 20 00 83 08 40 40 40 40 40 40 40 40\nscd apdu 00 20 00 83 08 40 40 40 40 40 40 40 40\nscd apdu 00 e6 00 00\nscd apdu 00 44 00 00\n/echo Card has been successfully reset.\n```\n\n# Notes\n\n1. YubiKey has two configurations: one invoked with a short press, and the other with a long press. By default, the short-press mode is configured for HID OTP - a brief touch will emit an OTP string starting with `cccccccc`. If you rarely use the OTP mode, you can swap it to the second configuration via the YubiKey Personalization tool. If you *never* use OTP, you can disable it entirely using the [YubiKey Manager](https://developers.yubico.com/yubikey-manager) application (note, this not the similarly named older YubiKey NEO Manager).\n1. Programming YubiKey for GPG keys still lets you use its other configurations - [U2F](https://en.wikipedia.org/wiki/Universal_2nd_Factor), [OTP](https://www.yubico.com/faq/what-is-a-one-time-password-otp/) and [static password](https://www.yubico.com/products/services-software/personalization-tools/static-password/) modes, for example.\n1. Setting an expiry essentially forces you to manage your subkeys and announces to the rest of the world that you are doing so. Setting an expiry on a primary key is ineffective for protecting the key from loss - whoever has the primary key can simply extend its expiry period. Revocation certificates are [better suited](https://security.stackexchange.com/questions/14718/does-openpgp-key-expiration-add-to-security/79386#79386) for this purpose. It may be appropriate for your use case to set expiry dates on subkeys.\n1. To switch between two or more identities on different keys - unplug the first key and restart gpg-agent, ssh-agent and pinentry with `pkill gpg-agent ; pkill ssh-agent ; pkill pinentry ; eval $(gpg-agent --daemon --enable-ssh-support)`, then plug in the other key and run `gpg-connect-agent updatestartuptty /bye` - then it should be ready for use.\n\n# Troubleshooting\n\n- Use `man gpg` to understand GPG options and command-line flags.\n\n- If you encounter problems connecting to YubiKey with GPG - try unplugging and re-inserting YubiKey, and restarting the `gpg-agent` process.\n\n- If you receive the error, `gpg: decryption failed: secret key not available` - you likely need to install GnuPG version 2.x.\n\n- If you receive the error, `Yubikey core error: no yubikey present` - make sure the YubiKey is inserted correctly. It should blink once when plugged in.\n\n- If you still receive the error, `Yubikey core error: no yubikey present` - you likely need to install newer versions of yubikey-personalize as outlined in [Required software](#required-software).\n\n- If you receive the error, `Yubikey core error: write error` - YubiKey is likely locked. Install and run yubikey-personalization-gui to unlock it.\n\n- If you receive the error, `Key does not match the card\'s capability` - you likely need to use 2048 bit RSA key sizes.\n\n- If you receive the error, `sign_and_send_pubkey: signing failed: agent refused operation` - make sure you replaced `ssh-agent` with `gpg-agent` as noted above.\n\n- If you still receive the error, `sign_and_send_pubkey: signing failed: agent refused operation` - [run the command](https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=835394) `gpg-connect-agent updatestartuptty /bye`\n\n- If you still receive the error, `sign_and_send_pubkey: signing failed: agent refused operation` - check `~/.gnupg/gpg-agent.conf` to make sure the path to `pinentry` is correct.\n\n- If you receive the error, `Error connecting to agent: No such file or directory` from `ssh-add -L`, the UNIX file socket that the agent uses for communication with other processes may not be set up correctly. On Debian, try `export SSH_AUTH_SOCK="/run/user/$UID/gnupg/S.gpg-agent.ssh"`. Also see that `gpgconf --list-dirs agent-ssh-socket` is returning single path, to existing `S.gpg-agent.ssh` socket.\n\n- If you receive the error, `Permission denied (publickey)`, increase ssh verbosity with the `-v` flag and ensure the public key from the card is being offered: `Offering public key: RSA SHA256:abcdefg... cardno:00060123456`. If it is, ensure you are connecting as the right user on the target system, rather than as the user on the local system. Otherwise, be sure `IdentitiesOnly` is not [enabled](https://github.com/FiloSottile/whosthere#how-do-i-stop-it) for this host.\n\n- If SSH authentication still fails - add up to 3 `-v` flags to the `ssh` client to increase verbosity.\n\n- If it still fails, it may be useful to stop the background `sshd` daemon process service on the server (e.g. using `sudo systemctl stop sshd`) and instead start it in the foreground with extensive debugging output, using `/usr/sbin/sshd -eddd`. Note that the server will not fork and will only process one connection, therefore has to be re-started after every `ssh` test.\n\n\n# Links\n\n* https://alexcabal.com/creating-the-perfect-gpg-keypair/\n* https://blog.habets.se/2013/02/GPG-and-SSH-with-Yubikey-NEO\n* https://blog.josefsson.org/2014/06/23/offline-gnupg-master-key-and-subkeys-on-yubikey-neo-smartcard/\n* https://blog.onefellow.com/post/180065697833/yubikey-forwarding-ssh-keys\n* https://developers.yubico.com/PGP/Card_edit.html\n* https://developers.yubico.com/PIV/Introduction/Admin_access.html\n* https://developers.yubico.com/yubico-piv-tool/YubiKey_PIV_introduction.html\n* https://developers.yubico.com/yubikey-personalization/\n* https://developers.yubico.com/yubikey-piv-manager/PIN_and_Management_Key.html\n* https://evilmartians.com/chronicles/stick-with-security-yubikey-ssh-gnupg-macos\n* https://gist.github.com/ageis/14adc308087859e199912b4c79c4aaa4\n* https://github.com/herlo/ssh-gpg-smartcard-config\n* https://github.com/tomlowenthal/documentation/blob/master/gpg/smartcard-keygen.md\n* https://help.riseup.net/en/security/message-security/openpgp/best-practices\n* https://jclement.ca/articles/2015/gpg-smartcard/\n* https://rnorth.org/gpg-and-ssh-with-yubikey-for-mac\n* https://trmm.net/Yubikey\n* https://www.bootc.net/archives/2013/06/09/my-perfect-gnupg-ssh-agent-setup/\n* https://www.esev.com/blog/post/2015-01-pgp-ssh-key-on-yubikey-neo/\n* https://www.hanselman.com/blog/HowToSetupSignedGitCommitsWithAYubiKeyNEOAndGPGAndKeybaseOnWindows.aspx\n* https://www.void.gr/kargig/blog/2013/12/02/creating-a-new-gpg-key-with-subkeys/\n* https://mlohr.com/gpg-agent-forwarding/\n'