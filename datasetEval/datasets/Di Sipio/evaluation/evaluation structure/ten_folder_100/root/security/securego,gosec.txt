b'\n# gosec - Golang Security Checker\n\nInspects source code for security problems by scanning the Go AST.\n\n<img src="https://securego.io/img/gosec.png" width="320">\n\n## License\n\nLicensed under the Apache License, Version 2.0 (the "License").\nYou may not use this file except in compliance with the License.\nYou may obtain a copy of the License [here](http://www.apache.org/licenses/LICENSE-2.0).\n\n## Project status\n\n[![CII Best Practices](https://bestpractices.coreinfrastructure.org/projects/3218/badge)](https://bestpractices.coreinfrastructure.org/projects/3218)\n[![Build Status](https://travis-ci.org/securego/gosec.svg?branch=master)](https://travis-ci.org/securego/gosec)\n[![Coverage Status](https://codecov.io/gh/securego/gosec/branch/master/graph/badge.svg)](https://codecov.io/gh/securego/gosec)\n[![GoReport](https://goreportcard.com/badge/github.com/securego/gosec)](https://goreportcard.com/badge/github.com/securego/gosec)\n[![GoDoc](https://godoc.org/github.com/securego/gosec?status.svg)](https://godoc.org/github.com/securego/gosec)\n[![Docs](https://readthedocs.org/projects/docs/badge/?version=latest)](https://securego.io/)\n[![Downloads](https://img.shields.io/github/downloads/securego/gosec/total.svg)](https://github.com/securego/gosec/releases)\n[![Docker Pulls](https://img.shields.io/docker/pulls/securego/gosec.svg)](https://hub.docker.com/r/securego/gosec/tags)\n[![Slack](http://securego.herokuapp.com/badge.svg)](http://securego.herokuapp.com)\n\n## Install\n\n### CI Installation\n\n```bash\n# binary will be $GOPATH/bin/gosec\ncurl -sfL https://raw.githubusercontent.com/securego/gosec/master/install.sh | sh -s -- -b $GOPATH/bin vX.Y.Z\n\n# or install it into ./bin/\ncurl -sfL https://raw.githubusercontent.com/securego/gosec/master/install.sh | sh -s vX.Y.Z\n\n# In alpine linux (as it does not come with curl by default)\nwget -O - -q https://raw.githubusercontent.com/securego/gosec/master/install.sh | sh -s vX.Y.Z\n\n# If you want to use the checksums provided on the "Releases" page\n# then you will have to download a tar.gz file for your operating system instead of a binary file\nwget https://github.com/securego/gosec/releases/download/vX.Y.Z/gosec_vX.Y.Z_OS.tar.gz\n\n# The file will be in the current folder where you run the command \n# and you can check the checksum like this\necho "<check sum from the check sum file>  gosec_vX.Y.Z_OS.tar.gz" | sha256sum -c -\n\ngosec --help\n```\n\n### Local Installation\n\n```bash\ngo get github.com/securego/gosec/cmd/gosec\n```\n\n## Usage\n\nGosec can be configured to only run a subset of rules, to exclude certain file\npaths, and produce reports in different formats. By default all rules will be\nrun against the supplied input files. To recursively scan from the current\ndirectory you can supply `./...` as the input argument.\n\n\n### Available rules\n\n- G101: Look for hard coded credentials\n- G102: Bind to all interfaces\n- G103: Audit the use of unsafe block\n- G104: Audit errors not checked\n- G106: Audit the use of ssh.InsecureIgnoreHostKey\n- G107: Url provided to HTTP request as taint input\n- G108: Profiling endpoint automatically exposed on /debug/pprof\n- G201: SQL query construction using format string\n- G202: SQL query construction using string concatenation\n- G203: Use of unescaped data in HTML templates\n- G204: Audit use of command execution\n- G301: Poor file permissions used when creating a directory\n- G302: Poor file permissions used with chmod\n- G303: Creating tempfile using a predictable path\n- G304: File path provided as taint input\n- G305: File traversal when extracting zip archive\n- G401: Detect the usage of DES, RC4, MD5 or SHA1\n- G402: Look for bad TLS connection settings\n- G403: Ensure minimum RSA key length of 2048 bits\n- G404: Insecure random number source (rand)\n- G501: Import blacklist: crypto/md5\n- G502: Import blacklist: crypto/des\n- G503: Import blacklist: crypto/rc4\n- G504: Import blacklist: net/http/cgi\n- G505: Import blacklist: crypto/sha1\n\n### Retired rules\n\n- G105: Audit the use of math/big.Int.Exp - [CVE is fixed](https://github.com/golang/go/issues/15184)\n\n### Selecting rules\n\nBy default, gosec will run all rules against the supplied file paths. It is however possible to select a subset of rules to run via the `-include=` flag,\nor to specify a set of rules to explicitly exclude using the `-exclude=` flag.\n\n```bash\n# Run a specific set of rules\n$ gosec -include=G101,G203,G401 ./...\n\n# Run everything except for rule G303\n$ gosec -exclude=G303 ./...\n```\n### CWE Mapping\n\nEvery issue detected by `gosec` is mapped to a [CWE (Common Weakness Enumeration)](http://cwe.mitre.org/data/index.html) which describes in more generic terms the vulnerability. The exact mapping can be found  [here](https://github.com/securego/gosec/blob/53be8dd8644ee48802114178cff6eb7e29757414/issue.go#L49).\n\n### Configuration\n\nA number of global settings can be provided in a configuration file as follows:\n\n```JSON\n{\n    "global": {\n        "nosec": "enabled",\n        "audit": "enabled"\n    }\n}\n```\n\n- `nosec`: this setting will overwrite all `#nosec` directives defined throughout the code base\n- `audit`: runs in audit mode which enables addition checks that for normal code analysis might be too nosy\n\n```bash\n# Run with a global configuration file\n$ gosec -conf config.json .\n```\nAlso some rules accept configuration. For instance on rule `G104`, it is possible to define packages along with a list \nof functions which will be skipped when auditing the not checked errors:\n\n```JSON\n{\n    "G104": {\n        "io/ioutil": ["WriteFile"]\n    }\n}\n```\n\n### Dependencies \n\ngosec will fetch automatically the dependencies of the code which is being analyzed when go module is turned on (e.g.` GO111MODULE=on`). If this is not the case,\nthe dependencies need to be explicitly downloaded by running the `go get -d` command before the scan.\n\n### Excluding test files and folders\n\ngosec will ignore test files across all packages and any dependencies in your vendor directory. \n\nThe scanning of test files can be enabled with the following flag:\n\n```bash\n\ngosec -tests ./...\n```\n\nAlso additional folders can be excluded as follows:\n\n```bash\n gosec -exclude-dir=rules -exclude-dir=cmd ./...\n```\n\n### Annotating code\n\nAs with all automated detection tools, there will be cases of false positives. In cases where gosec reports a failure that has been manually verified as being safe,\nit is possible to annotate the code with a `#nosec` comment.\n\nThe annotation causes gosec to stop processing any further nodes within the\nAST so can apply to a whole block or more granularly to a single expression.\n\n```go\n\nimport "md5" // #nosec\n\n\nfunc main(){\n\n    /* #nosec */\n    if x > y {\n        h := md5.New() // this will also be ignored\n    }\n\n}\n\n```\n\nWhen a specific false positive has been identified and verified as safe, you may wish to suppress only that single rule (or a specific set of rules)\nwithin a section of code, while continuing to scan for other problems. To do this, you can list the rule(s) to be suppressed within \nthe `#nosec` annotation, e.g: `/* #nosec G401 */` or `// #nosec G201 G202 G203`\n\nIn some cases you may also want to revisit places where `#nosec` annotations\nhave been used. To run the scanner and ignore any `#nosec` annotations you\ncan do the following:\n\n```bash\ngosec -nosec=true ./...\n```\n\n### Build tags\n\ngosec is able to pass your [Go build tags](https://golang.org/pkg/go/build/) to the analyzer.\nThey can be provided as a comma separated list as follows:\n\n```bash\ngosec -tag debug,ignore ./...\n```\n\n### Output formats\n\ngosec currently supports text, json, yaml, csv, sonarqube and JUnit XML output formats. By default\nresults will be reported to stdout, but can also be written to an output\nfile. The output format is controlled by the \'-fmt\' flag, and the output file is controlled by the \'-out\' flag as follows:\n\n```bash\n# Write output in json format to results.json\n$ gosec -fmt=json -out=results.json *.go\n```\n\n## Development\n\n### Build\n\n```bash\nmake\n```\n\n### Tests\n\n```bash\nmake test\n```\n\n### Release Build\n\nMake sure you have installed the [goreleaser](https://github.com/goreleaser/goreleaser) tool and then you can release gosec as follows:\n\n```bash\ngit tag v1.0.0\nexport GITHUB_TOKEN=<YOUR GITHUB TOKEN>\nmake release\n```\n\nThe released version of the tool is available in the `dist` folder. The build information should be displayed in the usage text.\n\n```bash\n./dist/darwin_amd64/gosec -h\ngosec  - Golang security checker\n\ngosec analyzes Go source code to look for common programming mistakes that\n\n\nVERSION: 1.0.0\nGIT TAG: v1.0.0\nBUILD DATE: 2018-04-27T12:41:38Z\n```\n\nNote that all released archives are also uploaded to GitHub.\n\n### Docker image\n\nYou can build the docker image as follows:\n\n```bash\nmake image\n```\n\nYou can run the `gosec` tool in a container against your local Go project. You just have to mount the project \ninto a volume as follows:\n\n```bash\ndocker run -it -v <YOUR PROJECT PATH>/<PROJECT>:/<PROJECT> securego/gosec /<PROJECT>/...\n```\n\n### Generate TLS rule\n\nThe configuration of TLS rule can be generated from [Mozilla\'s TLS ciphers recommendation](https://statics.tls.security.mozilla.org/server-side-tls-conf.json).\n\nFirst you need to install the generator tool:\n\n```bash\ngo get github.com/securego/gosec/cmd/tlsconfig/...\n```\n\nYou can invoke now the `go generate` in the root of the project:\n\n```bash\ngo generate ./...\n```\n\nThis will generate the `rules/tls_config.go` file which will contain the current ciphers recommendation from Mozilla.\n'