b'# Tink\n\n*A multi-language, cross-platform library that provides cryptographic APIs that are secure, easy to use correctly, and hard(er) to misuse.*\n\n**`Ubuntu`**                                                                                   | **`macOS`**\n---------------------------------------------------------------------------------------------- | -----------\n[![Kokoro Ubuntu](https://storage.googleapis.com/tink-kokoro-build-badges/tink-ubuntu.png)](#) | [![Kokoro macOS](https://storage.googleapis.com/tink-kokoro-build-badges/tink-macos.png)](#)\n\n## Index\n\n1. [Introduction](#introduction)\n2. [Getting started](#getting-started)\n3. [Overview](#overview)\n3. [Current status](#current-status)\n4. [Learn more](#learn-more)\n5. [Contact and mailing list](#contact-and-mailing-list)\n6. [Maintainers](#maintainers)\n\n## Introduction\n\nUsing crypto in your application [shouldn\'t have\nto](https://www.usenix.org/sites/default/files/conference/protected-files/hotsec15_slides_green.pdf)\nfeel like juggling chainsaws in the dark. Tink is a crypto library written by a\ngroup of cryptographers and security engineers at Google. It was born out of\nour extensive experience working with Google\'s product teams, [fixing\nweaknesses in implementations](https://github.com/google/wycheproof), and\nproviding simple APIs that can be used safely without needing a crypto\nbackground.\n\nTink provides secure APIs that are easy to use correctly and hard(er) to misuse.\nIt reduces common crypto pitfalls with user-centered design, careful\nimplementation and code reviews, and extensive testing. At Google, Tink is\nalready being used to secure data of many products such as AdMob, Google Pay,\nGoogle Assistant, Firebase, the Android Search App, etc.\n\nTo get a quick overview of Tink design please take a look at\n[slides](docs/Tink-a_cryptographic_library--RealWorldCrypto2019.pdf) from [a\ntalk about Tink](https://www.youtube.com/watch?v=pqev9r3rUJs&t=9665) presented\nat [Real World Crypto 2019](https://rwc.iacr.org/2019/).\n\n## Getting started\n\nTink primarily uses [Bazel](https://bazel.build) to manage building and testing\nthe project.\n\nThe recommended way to get started with Tink is to use\n[Bazelisk](https://github.com/bazelbuild/bazelisk). This tool is developed by\nthe Bazel team and makes it easy to ensure usage of a version of Bazel that\'s\ncompatible with the project.\n\nAs a starting point, the [`hello world\nexamples`](https://github.com/google/tink/tree/master/examples/helloworld)\ndemonstrate performing simple tasks using Tink in a variety of languages.\n\n## Overview\n\nTink performs cryptographic tasks via so-called [primitives](docs/PRIMITIVES.md),\neach of which is defined via a corresponding interface that specifies the\nfunctionality of the primitive. For example, _symmetric key encryption_ is\noffered via an [_AEAD-primitive_ (Authenticated Encryption with Associated\nData)](docs/PRIMITIVES.md#authenticated-encryption-with-associated-data), that\nsupports two operations:\n\n*   `encrypt(plaintext, associated_data)`, which encrypts the given `plaintext`\n    (using `associated_data` as additional AEAD-input) and returns the resulting\n    ciphertext\n*   `decrypt(ciphertext, associated_data)`, which decrypts the given\n    `ciphertext` (using `associated_data` as additional AEAD-input) and returns\n    the resulting plaintext\n\nBefore implementations of primitives can be used, they must be registered at\nruntime with Tink, so that Tink "knows" the desired implementations. Here\'s how\nyou can register all implementations of all primitives in Tink:\n\n```java\n    import com.google.crypto.tink.config.TinkConfig;\n\n    TinkConfig.register();\n```\n\nAfter implementations of primitives have been registered, the basic use of Tink\nproceeds in three steps:\n\n1.  Load or generate the cryptographic key material (a `Keyset` in Tink terms).\n2.  Use the key material to get an instance of the chosen primitive.\n3.  Use that primitive to accomplish the cryptographic task.\n\nHere is how these steps would look like when encrypting or decrypting with an\nAEAD primitive in Java:\n\n```java\n    import com.google.crypto.tink.Aead;\n    import com.google.crypto.tink.KeysetHandle;\n    import com.google.crypto.tink.aead.AeadKeyTemplates;\n\n    // 1. Generate the key material.\n    KeysetHandle keysetHandle = KeysetHandle.generateNew(\n        AeadKeyTemplates.AES128_GCM);\n\n    // 2. Get the primitive.\n    Aead aead = keysetHandle.getPrimitive(Aead.class);\n\n    // 3. Use the primitive.\n    byte[] ciphertext = aead.encrypt(plaintext, associatedData);\n```\n\n## Current status\n\n*   [Java and Android](docs/JAVA-HOWTO.md), [C++](docs/CPP-HOWTO.md),\n    [Obj-C](docs/OBJC-HOWTO.md), and [Go](docs/GOLANG-HOWTO.md) are field\n    tested and ready for production. The latest version is\n    [1.3.0-rc2](https://github.com/google/tink/releases/tag/v1.3.0-rc2),\n    released on 2019-11-25.\n\n*   Tink for Python and JavaScript are in active development.\n\n## Learn more\n\n*   [Java HOW-TO](docs/JAVA-HOWTO.md)\n*   [C++ HOW-TO](docs/CPP-HOWTO.md)\n*   [Obj-C HOW-TO](docs/OBJC-HOWTO.md)\n*   [Go HOW-TO](docs/GOLANG-HOWTO.md)\n*   [Security and Usability Design Goals](docs/SECURITY-USABILITY.md)\n*   [Supported Crypto Primitives](docs/PRIMITIVES.md)\n*   [Key Management](docs/KEY-MANAGEMENT.md)\n*   [Tinkey](docs/TINKEY.md)\n*   [Known Issues](docs/KNOWN-ISSUES.md)\n*   [Feature Roadmap](docs/ROADMAP.md)\n*   [Java Hacking Guide](docs/JAVA-HACKING.md)\n\n## Community-driven ports\n\nOut of the box Tink supports a wide range of languages, but it still doesn\'t\nsupport every language. Fortunately, some users like Tink so much that they\'ve\nported it to their favorite languages! Below you can find notable ports.\n\n**WARNING** While we usually review these ports, until further notice, we do not\nmaintain them and have no plan to support them in the foreseeable future.\n\n*   [C# (with JNI)](https://github.com/google-pay/tink-jni-examples)\n*   [Clojure](https://github.com/perkss/tinklj)\n\n## Contact and mailing list\n\nIf you want to contribute, please read [CONTRIBUTING](docs/CONTRIBUTING.md)\nand send us pull requests. You can also report bugs or file feature requests.\n\nIf you\'d like to talk to the developers or get notified about major product\nupdates, you may want to subscribe to our\n[mailing list](https://groups.google.com/forum/#!forum/tink-users).\n\n## Maintainers\n\nTink is maintained by (A-Z):\n\n-   Haris Andrianakis\n-   Daniel Bleichenbacher\n-   Tanuj Dhir\n-   Thai Duong\n-   Thomas Holenstein\n-   Charles Lee\n-   Quan Nguyen\n-   Bartosz Przydatek\n-   Enzo Puig\n-   Veronika Sl\xc3\xadvov\xc3\xa1\n-   Paula Vidas\n-   J\xc3\xbcrg Wullschleger\n'