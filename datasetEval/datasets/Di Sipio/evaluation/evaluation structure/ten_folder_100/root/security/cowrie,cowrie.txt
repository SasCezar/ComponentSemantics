b"Cowrie\n######\n\n|travis|_\n|circleci|_\n|codecov|_\n\nWelcome to the Cowrie GitHub repository\n*****************************************\n\nThis is the official repository for the Cowrie SSH and Telnet\nHoneypot effort.\n\nWhat is Cowrie\n*****************************************\n\nCowrie is a medium to high interaction SSH and Telnet honeypot\ndesigned to log brute force attacks and the shell interaction\nperformed by the attacker. In medium interaction mode (shell) it\nemulates a UNIX system in Python, in high interaction mode (proxy)\nit functions as an SSH and telnet proxy to observe attacker behavior\nto another system.\n\n`Cowrie <http://github.com/cowrie/cowrie/>`_ is maintained by Michel Oosterhof.\n\nDocumentation\n****************************************\n\nThe Documentation can be found `here <https://cowrie.readthedocs.io/en/latest/index.html>`_.\n\nSlack\n*****************************************\n\nYou can join the Cowrie community at the following `Slack workspace <https://cowrie.org/slack/>`_.\n\nFeatures\n*****************************************\n\n* Choose to run as an emulated shell (default):\n   * Fake filesystem with the ability to add/remove files. A full fake filesystem resembling a Debian 5.0 installation is included\n   * Possibility of adding fake file contents so the attacker can `cat` files such as `/etc/passwd`. Only minimal file contents are included\n   * Cowrie saves files downloaded with wget/curl or uploaded with SFTP and scp for later inspection\n\n* Or proxy SSH and telnet to another system\n   * Run as a pure telnet and ssh proxy with monitoring\n   * Or let Cowrie manage a pool of Qemu emualted servers to provide the systems to login to\n\nFor both settings:\n\n* Session logs are stored in an `UML Compatible <http://user-mode-linux.sourceforge.net/>`_  format for easy replay with the `bin/playlog` utility.\n* SFTP and SCP support for file upload\n* Support for SSH exec commands\n* Logging of direct-tcp connection attempts (ssh proxying)\n* Forward SMTP connections to SMTP Honeypot (e.g. `mailoney <https://github.com/awhitehatter/mailoney>`_)\n* JSON logging for easy processing in log management solutions\n\nDocker\n*****************************************\n\nDocker versions are available.\n\n* To get started quickly and give Cowrie a try, run::\n\n    docker run -p 2222:2222 cowrie/cowrie\n    ssh -p 2222 root@localhost\n\n* On Docker Hub: https://hub.docker.com/r/cowrie/cowrie\n\n* Or get the Dockerfile directly at https://github.com/cowrie/docker-cowrie\n\nRequirements\n*****************************************\n\nSoftware required:\n\n* Python 3.5+ (Python 2.7 support will be deprecated end of 2019)\n* python-virtualenv\n\nFor Python dependencies, see `requirements.txt <https://github.com/cowrie/cowrie/blob/master/requirements.txt>`_.\n\nFiles of interest:\n*****************************************\n\n* `etc/cowrie.cfg` - Cowrie's configuration file. Default values can be found in `etc/cowrie.cfg.dist <https://github.com/cowrie/cowrie/blob/master/etc/cowrie.cfg.dist>`_.\n* `share/cowrie/fs.pickle` - fake filesystem\n* `etc/userdb.txt` - credentials to access the honeypot\n* `honeyfs/ <https://github.com/cowrie/cowrie/tree/master/honeyfs>`_ - file contents for the fake filesystem - feel free to copy a real system here or use `bin/fsctl`\n* `honeyfs/etc/issue.net` - pre-login banner\n* `honeyfs/etc/motd <https://github.com/cowrie/cowrie/blob/master/honeyfs/etc/issue>`_ - post-login banner\n* `var/log/cowrie/cowrie.json` - transaction output in JSON format\n* `var/log/cowrie/cowrie.log` - log/debug output\n* `var/lib/cowrie/tty/` - session logs, replayable with the `bin/playlog` utility.\n* `var/lib/cowrie/downloads/` - files transferred from the attacker to the honeypot are stored here\n* `share/cowrie/txtcmds/ <https://github.com/cowrie/cowrie/tree/master/share/cowrie/txtcmds>`_ - file contents for simple fake commands\n* `bin/createfs <https://github.com/cowrie/cowrie/blob/master/bin/createfs>`_ - used to create the fake filesystem\n* `bin/playlog <https://github.com/cowrie/cowrie/blob/master/bin/playlog>`_ - utility to replay session logs\n\nData Sharing\n*****************************************\nCowrie will by default upload data on crashes and Python exceptions to api.cowrie.org. This information is used to improve the honeypot and is not shared with third parties. It can be disabled by setting `enabled=false` in `[output_crashreporter]`.\n\nContributors\n***************\n\nMany people have contributed to Cowrie over the years. Special thanks to:\n\n* Upi Tamminen (desaster) for all his work developing Kippo on which Cowrie was based\n* Dave Germiquet (davegermiquet) for TFTP support, unit tests, new process handling\n* Olivier Bilodeau (obilodeau) for Telnet support\n* Ivan Korolev (fe7ch) for many improvements over the years.\n* Florian Pelgrim (craneworks) for his work on code cleanup and Docker.\n* Guilherme Borges (sgtpepperpt) for SSH and telnet proxy (GSoC 2019)\n* And many many others.\n\n.. |travis| image:: https://travis-ci.com/cowrie/cowrie.svg?branch=master\n.. _travis: https://travis-ci.com/cowrie/cowrie\n\n.. |circleci| image:: https://circleci.com/gh/cowrie/cowrie.svg?style=svg\n.. _circleci: https://circleci.com/gh/cowrie/cowrie\n\n.. |codecov| image:: https://codecov.io/gh/cowrie/cowrie/branch/master/graph/badge.svg\n.. _codecov: https://codecov.io/gh/cowrie/cowrie\n"