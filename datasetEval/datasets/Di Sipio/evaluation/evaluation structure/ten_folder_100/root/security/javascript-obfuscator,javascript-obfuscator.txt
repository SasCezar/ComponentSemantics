b'<!--\n  Title: JavaScript Obfuscator\n  Description: A powerful obfuscator for JavaScript and Node.js.\n  Author: Timofey Kachalov\n  -->\n\n# JavaScript obfuscator\n\n#### Right now i haven\'t time to maintain this project and i looking for for maintainers! Create issue if you want to maintain this project.\n\n![logo](https://raw.githubusercontent.com/javascript-obfuscator/javascript-obfuscator/master/images/logo.png)\n\nJavaScript obfuscator is a powerful free obfuscator for JavaScript with a wide number of features which provides protection for your source code.\n\nExample of obfuscated code: [gist.github.com](https://gist.github.com/sanex3339/ffc2876123b52e6d11ce45369fd53acf)\n\n#### Online version:\n[obfuscator.io](https://obfuscator.io)\n\n#### Plugins:\n* Webpack plugin: [webpack-obfuscator](https://github.com/javascript-obfuscator/webpack-obfuscator)\n* Webpack loader: [obfuscator-loader](https://github.com/javascript-obfuscator/obfuscator-loader)\n* Gulp: [gulp-javascript-obfuscator](https://github.com/javascript-obfuscator/gulp-javascript-obfuscator)\n* Grunt: [grunt-contrib-obfuscator](https://github.com/javascript-obfuscator/grunt-contrib-obfuscator)\n* Rollup: [rollup-plugin-javascript-obfuscator](https://github.com/javascript-obfuscator/rollup-plugin-javascript-obfuscator)\n* Weex: [weex-devtool](https://www.npmjs.com/package/weex-devtool)\n* Malta: [malta-js-obfuscator](https://github.com/fedeghe/malta-js-obfuscator)\n\n[![Join the chat at Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/javascript-obfuscator/General-chat)\n[![npm version](https://badge.fury.io/js/javascript-obfuscator.svg)](https://badge.fury.io/js/javascript-obfuscator)\n[![FOSSA Status](https://app.fossa.io/api/projects/git%2Bgithub.com%2Fjavascript-obfuscator%2Fjavascript-obfuscator.svg?type=shield)](https://app.fossa.io/projects/git%2Bgithub.com%2Fjavascript-obfuscator%2Fjavascript-obfuscator?ref=badge_shield)\n[![Build Status](https://travis-ci.com/javascript-obfuscator/javascript-obfuscator.svg?branch=master)](https://travis-ci.com/javascript-obfuscator/javascript-obfuscator)\n[![Coverage Status](https://coveralls.io/repos/github/javascript-obfuscator/javascript-obfuscator/badge.svg?branch=master)](https://coveralls.io/github/javascript-obfuscator/javascript-obfuscator?branch=master)\n[![Backers on Open Collective](https://opencollective.com/javascript-obfuscator/backers/badge.svg)](#backers) \n[![Sponsors on Open Collective](https://opencollective.com/javascript-obfuscator/sponsors/badge.svg)](#sponsors)\n\n#### You can support this project by donating:\n* (Bitcoin) 14yhtZxLNp6ekZAgmEmPJqEKUP2VtUxQK6\n* (Ether) 0x5Df9eBcFB2D0f3315d03Ac112104b9023C409dc1\n* (OpenCollective) https://opencollective.com/javascript-obfuscator\n\nBig thanks to all supporters!\n\n#### *NOTE! the README on the master branch might not match that of the latest stable release!*\n\n#### If you have a question - check this section first: [FAQ](#frequently-asked-questions)\n\n## :warning: Important\n##### Obfuscate only the code that belongs to you. \n\nIt is not recommended to obfuscate vendor scripts and polyfills, since the obfuscated code is 15-80% slower (depends on options) and the files are significantly larger.\n\n## Installation\n\n#### Using Yarn or NPM\n\nInstall the package with Yarn or NPM and add it to your `dependencies` or `devDependencies`:\n\n```sh\n$ yarn add --dev javascript-obfuscator\n```\nor\n```sh\n$ npm install --save-dev javascript-obfuscator\n```\n\n#### In a Browser\n\nFrom CDN:\n\n```html\n<script src="https://cdn.jsdelivr.net/npm/javascript-obfuscator/dist/index.browser.js"/>\n```\n\nFrom `node_modules`:\n\n```html\n<script src="./node_modules/javascript-obfuscator/dist/index.browser.js"/>\n```\n\n## Usage\n\n```javascript\nvar JavaScriptObfuscator = require(\'javascript-obfuscator\');\n\nvar obfuscationResult = JavaScriptObfuscator.obfuscate(\n    `\n        (function(){\n            var variable1 = \'5\' - 3;\n            var variable2 = \'5\' + 3;\n            var variable3 = \'5\' + - \'2\';\n            var variable4 = [\'10\',\'10\',\'10\',\'10\',\'10\'].map(parseInt);\n            var variable5 = \'foo \' + 1 + 1;\n            console.log(variable1);\n            console.log(variable2);\n            console.log(variable3);\n            console.log(variable4);\n            console.log(variable5);\n        })();\n    `,\n    {\n        compact: false,\n        controlFlowFlattening: true\n    }\n);\n\nconsole.log(obfuscationResult.getObfuscatedCode());\n/*\nvar _0x2218 = [\n    \'8|3|1|2|0|4|6|9|7|5\',\n    \'bqndd\',\n    \'dySIh\',\n    \'kTiiG\',\n    \'log\',\n    \'tuvgv\'\n];\n(function (_0x38b423, _0x1d6bd4) {\n    var _0x39a849 = function (_0x5794c7) {\n        while (--_0x5794c7) {\n            _0x38b423[\'push\'](_0x38b423[\'shift\']());\n        }\n    };\n    _0x39a849(++_0x1d6bd4);\n}(_0x2218, 0x114));\nvar _0x8221 = function (_0xcac13e, _0x3627d7) {\n    _0xcac13e = _0xcac13e - 0x0;\n    var _0x1eae4d = _0x2218[_0xcac13e];\n    return _0x1eae4d;\n};\n(function () {\n    var _0x5336d5 = {\n        \'bqndd\': _0x8221(\'0x0\'),\n        \'islRd\': function _0x2abb6c(_0x2f45f8, _0x4d47b0) {\n            return _0x2f45f8 + _0x4d47b0;\n        },\n        \'kTiiG\': function _0x32525a(_0x44ba8d, _0x2c5e0c) {\n            return _0x44ba8d + _0x2c5e0c;\n        },\n        \'dySIh\': \'foo\\x20\',\n        \'tuvgv\': function _0x28d015(_0x35d81a, _0x2d2463) {\n            return _0x35d81a - _0x2d2463;\n        }\n    };\n    var _0x5000ba = _0x5336d5[_0x8221(\'0x1\')][\'split\'](\'|\'), _0x5c972f = 0x0;\n    while (!![]) {\n        switch (_0x5000ba[_0x5c972f++]) {\n        case \'0\':\n            var _0x586faa = _0x5336d5[\'islRd\'](_0x5336d5[\'kTiiG\'](_0x5336d5[_0x8221(\'0x2\')], 0x1), 0x1);\n            continue;\n        case \'1\':\n            var _0xab6a82 = _0x5336d5[_0x8221(\'0x3\')](\'5\', -\'2\');\n            continue;\n        case \'2\':\n            var _0x19ab9d = [\n                \'10\',\n                \'10\',\n                \'10\',\n                \'10\',\n                \'10\'\n            ][\'map\'](parseInt);\n            continue;\n        case \'3\':\n            var _0x321653 = _0x5336d5[_0x8221(\'0x3\')](\'5\', 0x3);\n            continue;\n        case \'4\':\n            console[\'log\'](_0x2c1b0c);\n            continue;\n        case \'5\':\n            console[_0x8221(\'0x4\')](_0x586faa);\n            continue;\n        case \'6\':\n            console[_0x8221(\'0x4\')](_0x321653);\n            continue;\n        case \'7\':\n            console[_0x8221(\'0x4\')](_0x19ab9d);\n            continue;\n        case \'8\':\n            var _0x2c1b0c = _0x5336d5[_0x8221(\'0x5\')](\'5\', 0x3);\n            continue;\n        case \'9\':\n            console[_0x8221(\'0x4\')](_0xab6a82);\n            continue;\n        }\n        break;\n    }\n}());\n*/\n```\n\n### `obfuscate(sourceCode, options)`\n\nReturns `ObfuscationResult` object which contains two public methods:\n\n* `getObfuscatedCode()` - returns `string` with obfuscated code;\n* `getSourceMap()` - if [`sourceMap`](#sourcemap) option is enabled - returns `string` with source map or an empty string if [`sourceMapMode`](#sourcemapmode) option is set as `inline`.\n\nCalling `toString()` for `ObfuscationResult` object will return `string` with obfuscated code.\n\nMethod takes two parameters, `sourceCode` and `options` \xe2\x80\x93 the source code and the opitons respectively:\n\n* `sourceCode` (`string`, default: `null`) \xe2\x80\x93 any valid source code, passed as a string;\n* `options` (`Object`, default: `null`) \xe2\x80\x93 an object with options.\n\nFor available options see [options](#options).\n\n## CLI usage\n\nSee [CLI options](#cli-options).\n\n#### Obfuscate single file\n\nUsage:\n```sh\njavascript-obfuscator input_file_name.js [options]\njavascript-obfuscator input_file_name.js --output output_file_name.js [options]\n```\n\nObfuscation of single input file with `.js` extension.\n\nIf the destination path is not specified with the `--output` option, obfuscated file will saved into the input file directory with `INPUT_FILE_NAME-obfuscated.js` name.\n\nExamples:\n```sh\njavascript-obfuscator samples/sample.js --compact true --self-defending false\n// creates a new file samples/sample-obfuscated.js\n\njavascript-obfuscator samples/sample.js --output output/output.js --compact true --self-defending false\n// creates a new file output/output.js\n```\n\n#### Obfuscate directory recursively\n\nUsage:\n```sh\njavascript-obfuscator ./dist [options]\n// creates a new obfuscated files under `./dist` directory near the input files with `obfuscated` postfix\n\njavascript-obfuscator ./dist --output ./dist/obfuscated [options]\n// creates a folder structure with obfuscated files under `./dist/obfuscated` path\n```\n\nObfuscation of all `.js` files under input directory. If this directory contains already obfuscated files with `-obfuscated` postfix - these files will ignored.\n\nObfuscated files will saved into the input directory under `INPUT_FILE_NAME-obfuscated.js` name.\n\n## Conditional comments\nYou can disable and enable obfuscation for specific parts of the code by adding following comments: \n* disable: `// javascript-obfuscator:disable` or `/* javascript-obfuscator:disable */`;\n* enable: `// javascript-obfuscator:enable` or `/* javascript-obfuscator:enable */`.\n\nExample:\n```javascript\n// input\nvar foo = 1;\n// javascript-obfuscator:disable\nvar bar = 2;\n\n// output\nvar _0xabc123 = 0x1;\nvar bar = 2;\n```\nConditional comments affect only direct transformations of AST-tree nodes. All child transformations still will be applied to the AST-tree nodes. \n\nFor example:\n* Obfuscation of the variable\'s name at its declaration is called direct transformation;\n* Obfuscation of the variable\'s name beyond its declaration is called child transformation.\n\n## Antiviruses false positive virus alerts\n\nSome input source code that will obfuscated with some obfuscation options can trigger false positive alerts in a few antiviruses. If you will get this false positive triggers, try to play with obfuscation options.\n\n* Try to change `stringArrayEncoding` option value between `rc4` and `base64` values or disable it completely;\n* Try to change `identifierNamesGenerator` option value from `hexadecimal` on `mangled`;\n* Try to disable `selfDefending`.\n\nIf this wont help - attach your source code and describe your obfuscation options here:\nhttps://github.com/javascript-obfuscator/javascript-obfuscator/issues/51\n\n## JavaScript Obfuscator Options\n\nFollowing options are available for the JS Obfuscator:\n\n#### options:\n\n```javascript\n{\n    compact: true,\n    controlFlowFlattening: false,\n    controlFlowFlatteningThreshold: 0.75,\n    deadCodeInjection: false,\n    deadCodeInjectionThreshold: 0.4,\n    debugProtection: false,\n    debugProtectionInterval: false,\n    disableConsoleOutput: false,\n    domainLock: [],\n    identifierNamesGenerator: \'hexadecimal\',\n    identifiersPrefix: \'\',\n    inputFileName: \'\',\n    log: false,\n    renameGlobals: false,\n    reservedNames: [],\n    reservedStrings: [],\n    rotateStringArray: true,\n    seed: 0,\n    selfDefending: false,\n    sourceMap: false,\n    sourceMapBaseUrl: \'\',\n    sourceMapFileName: \'\',\n    sourceMapMode: \'separate\',\n    stringArray: true,\n    stringArrayEncoding: false,\n    stringArrayThreshold: 0.75,\n    target: \'browser\',\n    transformObjectKeys: false,\n    unicodeEscapeSequence: false\n}\n```\n\n#### CLI options:\n```sh\n    -v, --version\n    -h, --help\n\n    -o, --output\n\n    --compact <boolean>\n    --config <string>\n    --control-flow-flattening <boolean>\n    --control-flow-flattening-threshold <number>\n    --dead-code-injection <boolean>\n    --dead-code-injection-threshold <number>\n    --debug-protection <boolean>\n    --debug-protection-interval <boolean>\n    --disable-console-output <boolean>\n    --domain-lock \'<list>\' (comma separated)\n    --exclude \'<list>\' (comma separated)\n    --identifier-names-generator <string> [hexadecimal, mangled]\n    --identifiers-prefix <string>\n    --log <boolean>\n    --rename-globals <boolean>\n    --reserved-names \'<list>\' (comma separated)\n    --reserved-strings \'<list>\' (comma separated)\n    --rotate-string-array <boolean>\n    --seed <number>\n    --self-defending <boolean>\n    --source-map <boolean>\n    --source-map-base-url <string>\n    --source-map-file-name <string>\n    --source-map-mode <string> [inline, separate]\n    --string-array <boolean>\n    --string-array-encoding <boolean|string> [true, false, base64, rc4]\n    --string-array-threshold <number>\n    --target <string> [browser, browser-no-eval, node]\n    --transform-object-keys <boolean>\n    --unicode-escape-sequence <boolean>\n```\n\n### `compact`\nType: `boolean` Default: `true`\n\nCompact code output on one line.\n\n### `config`\nType: `string` Default: ``\n\nName of JS/JSON config file which contains obfuscator options. These will be overridden by options passed directly to CLI\n\n### `controlFlowFlattening`\nType: `boolean` Default: `false`\n\n##### :warning: This option greatly affects the performance up to 1.5x slower runtime speed. Use [`controlFlowFlatteningThreshold`](#controlflowflatteningthreshold) to set percentage of nodes that will affected by control flow flattening. \n\nEnables code control flow flattening. Control flow flattening is a structure transformation of the source code that hinders program comprehension.\n\nExample:\n```ts\n// input\n(function(){\n    function foo () {\n        return function () {\n            var sum = 1 + 2;\n            console.log(1);\n            console.log(2);\n            console.log(3);\n            console.log(4);\n            console.log(5);\n            console.log(6);\n        }\n    }\n    \n    foo()();\n})();\n\n// output\n(function () {\n    function _0x3bfc5c() {\n        return function () {\n            var _0x3260a5 = {\n                \'WtABe\': \'4|0|6|5|3|2|1\',\n                \'GokKo\': function _0xf87260(_0x427a8e, _0x43354c) {\n                    return _0x427a8e + _0x43354c;\n                }\n            };\n            var _0x1ad4d6 = _0x3260a5[\'WtABe\'][\'split\'](\'|\'), _0x1a7b12 = 0x0;\n            while (!![]) {\n                switch (_0x1ad4d6[_0x1a7b12++]) {\n                case \'0\':\n                    console[\'log\'](0x1);\n                    continue;\n                case \'1\':\n                    console[\'log\'](0x6);\n                    continue;\n                case \'2\':\n                    console[\'log\'](0x5);\n                    continue;\n                case \'3\':\n                    console[\'log\'](0x4);\n                    continue;\n                case \'4\':\n                    var _0x1f2f2f = _0x3260a5[\'GokKo\'](0x1, 0x2);\n                    continue;\n                case \'5\':\n                    console[\'log\'](0x3);\n                    continue;\n                case \'6\':\n                    console[\'log\'](0x2);\n                    continue;\n                }\n                break;\n            }\n        };\n    }\n\n\t_0x3bfc5c()();\n}());\n```\n\n### `controlFlowFlatteningThreshold`\nType: `number` Default: `0.75` Min: `0` Max: `1`\n\nThe probability that the [`controlFlowFlattening`](#controlflowflattening) transformation will be applied to the node.\n\nThis setting is especially useful for large code size because large amounts of control flow transformations can slow down your code and increase code size.\n\n`controlFlowFlatteningThreshold: 0` equals to `controlFlowFlattening: false`.\n\n### `deadCodeInjection`\nType: `boolean` Default: `false`\n\n##### :warning: Dramatically increases size of obfuscated code (up to 200%), use only if size of obfuscated code doesn\'t matter. Use [`deadCodeInjectionThreshold`](#deadcodeinjectionthreshold) to set percentage of nodes that will affected by dead code injection.\n##### :warning: This option forcibly enables `stringArray` option.\n\nWith this option random blocks of dead code will add to the obfuscated code. \n\nExample:\n```ts\n// input\n(function(){\n    if (true) {\n        var foo = function () {\n            console.log(\'abc\');\n            console.log(\'cde\');\n            console.log(\'efg\');\n            console.log(\'hij\');\n        };\n        \n        var bar = function () {\n            console.log(\'klm\');\n            console.log(\'nop\');\n            console.log(\'qrs\');\n        };\n    \n        var baz = function () {\n            console.log(\'tuv\');\n            console.log(\'wxy\');\n            console.log(\'z\');\n        };\n    \n        foo();\n        bar();\n        baz();\n    }\n})();\n\n// output\nvar _0x5024 = [\n    \'zaU\',\n    \'log\',\n    \'tuv\',\n    \'wxy\',\n    \'abc\',\n    \'cde\',\n    \'efg\',\n    \'hij\',\n    \'QhG\',\n    \'TeI\',\n    \'klm\',\n    \'nop\',\n    \'qrs\',\n    \'bZd\',\n    \'HMx\'\n];\nvar _0x4502 = function (_0x1254b1, _0x583689) {\n    _0x1254b1 = _0x1254b1 - 0x0;\n    var _0x529b49 = _0x5024[_0x1254b1];\n    return _0x529b49;\n};\n(function () {\n    if (!![]) {\n        var _0x16c18d = function () {\n            if (_0x4502(\'0x0\') !== _0x4502(\'0x0\')) {\n                console[_0x4502(\'0x1\')](_0x4502(\'0x2\'));\n                console[_0x4502(\'0x1\')](_0x4502(\'0x3\'));\n                console[_0x4502(\'0x1\')](\'z\');\n            } else {\n                console[_0x4502(\'0x1\')](_0x4502(\'0x4\'));\n                console[_0x4502(\'0x1\')](_0x4502(\'0x5\'));\n                console[_0x4502(\'0x1\')](_0x4502(\'0x6\'));\n                console[_0x4502(\'0x1\')](_0x4502(\'0x7\'));\n            }\n        };\n        var _0x1f7292 = function () {\n            if (_0x4502(\'0x8\') === _0x4502(\'0x9\')) {\n                console[_0x4502(\'0x1\')](_0x4502(\'0xa\'));\n                console[_0x4502(\'0x1\')](_0x4502(\'0xb\'));\n                console[_0x4502(\'0x1\')](_0x4502(\'0xc\'));\n            } else {\n                console[_0x4502(\'0x1\')](_0x4502(\'0xa\'));\n                console[_0x4502(\'0x1\')](_0x4502(\'0xb\'));\n                console[_0x4502(\'0x1\')](_0x4502(\'0xc\'));\n            }\n        };\n        var _0x33b212 = function () {\n            if (_0x4502(\'0xd\') !== _0x4502(\'0xe\')) {\n                console[_0x4502(\'0x1\')](_0x4502(\'0x2\'));\n                console[_0x4502(\'0x1\')](_0x4502(\'0x3\'));\n                console[_0x4502(\'0x1\')](\'z\');\n            } else {\n                console[_0x4502(\'0x1\')](_0x4502(\'0x4\'));\n                console[_0x4502(\'0x1\')](_0x4502(\'0x5\'));\n                console[_0x4502(\'0x1\')](_0x4502(\'0x6\'));\n                console[_0x4502(\'0x1\')](_0x4502(\'0x7\'));\n            }\n        };\n        _0x16c18d();\n        _0x1f7292();\n        _0x33b212();\n    }\n}());\n```\n\n### `deadCodeInjectionThreshold`\nType: `number` Default: `0.4` Min: `0` Max: `1`\n\nAllows to set percentage of nodes that will affected by `deadCodeInjection`.\n\n### `debugProtection`\nType: `boolean` Default: `false`\n\n##### :warning: Can freeze your browser if you open the Developer Tools.\n\nThis option makes it almost impossible to use the `console` tab of the Developer Tools (both on WebKit-based and Mozilla Firefox).\n\n* WebKit-based: blocks the site window, but you still can navigate through Developer Tools panel.\n* Firefox: does *not* block the site window, but still won\'t let you use DevTools.\n\n### `debugProtectionInterval`\nType: `boolean` Default: `false`\n\n##### :warning: Can freeze your browser! Use at own risk.\n\nIf checked, an interval is used to force the debug mode on the Console tab, making it harder to use other features of the Developer Tools. Works if [`debugProtection`](#debugprotection) is enabled.\n\n### `disableConsoleOutput`\nType: `boolean` Default: `false`\n\nDisables the use of `console.log`, `console.info`, `console.error`, `console.warn`, `console.debug`, `console.exception` and `console.trace` by replacing them with empty functions. This makes the use of the debugger harder.\n\n### `domainLock`\nType: `string[]` Default: `[]`\n\nLocks the obfuscated source code so it only runs on specific domains and/or sub-domains. This makes really hard for someone just copy and paste your source code and run elsewhere.\n\n##### Multiple domains and sub-domains\nIt\'s possible to lock your code to more than one domain or sub-domain. For instance, to lock it so the code only runs on **www.example.com** add `www.example.com`, to make it work on any sub-domain from example.com, use `.example.com`.\n\n### `exclude`\nType: `string[]` Default: `[]`\n\nA file names or globs which indicates files to exclude from obfuscation. \n\n### `identifierNamesGenerator`\nType: `string` Default: `hexadecimal`\n\nSets identifier names generator.\n\nAvailable values:\n* `hexadecimal`: identifier names like `_0xabc123`\n* `mangled`: short identifier names like `a`, `b`, `c`\n\n### `identifiersPrefix`\nType: `string` Default: `\'\'`\n\nSets prefix for all global identifiers.\n\nUse this option when you want to obfuscate multiple files. This option helps to avoid conflicts between global identifiers of these files. Prefix should be different for every file.\n\n### `inputFileName`\nType: `string` Default: `\'\'`\n\nAllows to set name of the input file with source code. This name will used internally for source map generation.\n\n### `log`\nType: `boolean` Default: `false`\n\nEnables logging of the information to the console.\n\n### `renameGlobals`\nType: `boolean` Default: `false`\n\n##### :warning: this option can break your code. Enable it only if you know what it does!\n\nEnables obfuscation of global variable and function names **with declaration**.\n\n### `reservedNames`\nType: `string[]` Default: `[]`\n\nDisables obfuscation and generation of identifiers, which being matched by passed RegExp patterns.\n\nExample:\n```ts\n\t{\n\t\treservedNames: [\n\t\t\t\'^someVariable\',\n\t\t\t\'functionParameter_\\d\'\n\t\t]\n\t}\n```\n\n### `reservedStrings`\nType: `string[]` Default: `[]`\n\nDisables transformation of string literals, which being matched by passed RegExp patterns.\n\nExample:\n```ts\n\t{\n\t\treservedStrings: [\n\t\t\t\'react-native\',\n\t\t\t\'\\.\\/src\\/test\',\n\t\t\t\'some-string_\\d\'\n\t\t]\n\t}\n```\n\n### `rotateStringArray`\nType: `boolean` Default: `true`\n\n##### :warning: [`stringArray`](#stringarray) must be enabled\n\nShift the `stringArray` array by a fixed and random (generated at the code obfuscation) places. This makes it harder to match the order of the removed strings to their original place.\n\nThis option is recommended if your original source code isn\'t small, as the helper function can attract attention.\n\n### `seed`\nType: `number` Default: `0`\n\nThis option sets seed for random generator. This is useful for creating repeatable results.\n\nIf seed is `0` - random generator will work without seed.\n\n### `selfDefending`\nType: `boolean` Default: `false`\n\n##### :warning: Don\'t change obfuscated code in any way after obfuscation with this option, because any change like uglifying of code can trigger self defending and code wont work anymore!\n##### :warning: This option forcibly sets `compact` value to `true`\n\nThis option makes the output code resilient against formatting and variable renaming. If one tries to use a JavaScript beautifier on the obfuscated code, the code won\'t work anymore, making it harder to understand and modify it.\n\n### `sourceMap`\nType: `boolean` Default: `false`\n\nEnables source map generation for obfuscated code.\n\nSource maps can be useful to help you debug your obfuscated JavaScript source code. If you want or need to debug in production, you can upload the separate source map file to a secret location and then point your browser there. \n\n### `sourceMapBaseUrl`\nType: `string` Default: ``\n\nSets base url to the source map import url when [`sourceMapMode: \'separate\'`](#sourcemapmode).\n \nCLI example:\n```\njavascript-obfuscator input.js --output out.js --source-map true --source-map-base-url \'http://localhost:9000\'\n```\n\nResult: \n```\n//# sourceMappingURL=http://localhost:9000/out.js.map\n```\n\n### `sourceMapFileName`\nType: `string` Default: ``\n\nSets file name for output source map when `sourceMapMode: \'separate\'`.\n\nCLI example:\n```\njavascript-obfuscator input.js --output out.js --source-map true --source-map-base-url \'http://localhost:9000\' --source-map-file-name example\n```\n\nResult: \n```\n//# sourceMappingURL=http://localhost:9000/example.js.map\n```\n\n### `sourceMapMode`\nType: `string` Default: `separate`\n\nSpecifies source map generation mode:\n* `inline` - emit a single file with source maps instead of having a separate file;\n* `separate` - generates corresponding \'.map\' file with source map. In case you run obfuscator through CLI - adds link to source map file to the end of file with obfuscated code `//# sourceMappingUrl=file.js.map`.\n\n### `stringArray`\nType: `boolean` Default: `true`\n\nRemoves string literals and place them in a special array. For instance, the string `"Hello World"` in `var m = "Hello World";` will be replaced with something like `var m = _0x12c456[0x1];`\n    \n### `stringArrayEncoding`\nType: `boolean|string` Default: `false`\n\n##### :warning: `stringArray` option must be enabled\n\nThis option can slow down your script.\n\nEncode all string literals of the [`stringArray`](#stringarray) using `base64` or `rc4` and inserts a special code that used to decode it back at runtime.\n\nAvailable values:\n* `true` (`boolean`): encode `stringArray` values using `base64`\n* `false` (`boolean`): don\'t encode `stringArray` values\n* `\'base64\'` (`string`): encode `stringArray` values using `base64`\n* `\'rc4\'` (`string`): encode `stringArray` values using `rc4`. **About 30-50% slower than `base64`, but more harder to get initial values.** It is recommended to disable [`unicodeEscapeSequence`](#unicodeescapesequence) option with `rc4` encoding to prevent very large size of obfuscated code.\n    \n### `stringArrayThreshold`\nType: `number` Default: `0.8` Min: `0` Max: `1`\n\n##### :warning: [`stringArray`](#stringarray) option must be enabled\n\nYou can use this setting to adjust the probability (from 0 to 1) that a string literal will be inserted into the `stringArray`.\n\nThis setting is especially useful for large code size because it repeatedly calls to the `string array` and can slow down your code.\n\n`stringArrayThreshold: 0` equals to `stringArray: false`.\n\n### `target`\nType: `string` Default: `browser`\n\nAllows to set target environment for obfuscated code.\n\nAvailable values: \n* `browser`;\n* `browser-no-eval`;\n* `node`.\n\nCurrently output code for `browser` and `node` targets is identical.\nOutput code for `browser-no-eval` target is not using `eval`.\n\n### `transformObjectKeys`\nType: `boolean` Default: `false`\n\nEnables transformation of object keys.\n\nExample:\n```ts\n// input\n(function(){\n    var object = {\n        foo: \'test1\',\n        bar: {\n            baz: \'test2\'\n        }\n    };\n})();\n\n// output\nvar _0x5a21 = [\n    \'foo\',\n    \'test1\',\n    \'bar\',\n    \'baz\',\n    \'test2\'\n];\nvar _0x223f = function (_0x474dc0, _0x10db96) {\n    _0x474dc0 = _0x474dc0 - 0x0;\n    var _0x4c8bf7 = _0x5a21[_0x474dc0];\n    return _0x4c8bf7;\n};\n(function () {\n    var _0x2e1a8e = {};\n    _0x2e1a8e[_0x223f(\'0x0\')] = _0x223f(\'0x1\');\n    _0x2e1a8e[_0x223f(\'0x2\')] = {};\n    _0x2e1a8e[_0x223f(\'0x2\')][_0x223f(\'0x3\')] = _0x223f(\'0x4\');\n}());\n```\n\n### `unicodeEscapeSequence`\nType: `boolean` Default: `false`\n\nAllows to enable/disable string conversion to unicode escape sequence.\n\nUnicode escape sequence increases code size greatly and strings easily can be reverted to their original view. Recommended to enable this option only for small source code. \n\n## Preset Options\n### High obfuscation, low performance\n\nPerformance will 50-100% slower than without obfuscation\n\n```javascript\n{\n    compact: true,\n    controlFlowFlattening: true,\n    controlFlowFlatteningThreshold: 1,\n    deadCodeInjection: true,\n    deadCodeInjectionThreshold: 1,\n    debugProtection: true,\n    debugProtectionInterval: true,\n    disableConsoleOutput: true,\n    identifierNamesGenerator: \'hexadecimal\',\n    log: false,\n    renameGlobals: false,\n    rotateStringArray: true,\n    selfDefending: true,\n    stringArray: true,\n    stringArrayEncoding: \'rc4\',\n    stringArrayThreshold: 1,\n    transformObjectKeys: true,\n    unicodeEscapeSequence: false\n}\n```\n\n### Medium obfuscation, optimal performance\n\nPerformance will 30-35% slower than without obfuscation\n\n```javascript\n{\n    compact: true,\n    controlFlowFlattening: true,\n    controlFlowFlatteningThreshold: 0.75,\n    deadCodeInjection: true,\n    deadCodeInjectionThreshold: 0.4,\n    debugProtection: false,\n    debugProtectionInterval: false,\n    disableConsoleOutput: true,\n    identifierNamesGenerator: \'hexadecimal\',\n    log: false,\n    renameGlobals: false,\n    rotateStringArray: true,\n    selfDefending: true,\n    stringArray: true,\n    stringArrayEncoding: \'base64\',\n    stringArrayThreshold: 0.75,\n    transformObjectKeys: true,\n    unicodeEscapeSequence: false\n}\n```\n\n### Low obfuscation, High performance\n\nPerformance will slightly slower than without obfuscation\n\n```javascript\n{\n    compact: true,\n    controlFlowFlattening: false,\n    deadCodeInjection: false,\n    debugProtection: false,\n    debugProtectionInterval: false,\n    disableConsoleOutput: true,\n    identifierNamesGenerator: \'hexadecimal\',\n    log: false,\n    renameGlobals: false,\n    rotateStringArray: true,\n    selfDefending: true,\n    stringArray: true,\n    stringArrayEncoding: false,\n    stringArrayThreshold: 0.75,\n    unicodeEscapeSequence: false\n}\n```\n\n## Frequently Asked Questions\n\n### What javascript versions are supported?\n\n`es3`, `es5`, `es2015`, `es2016` and `es2017`\n\n### I want to use feature that described in `README.md` but it\'s not working!\n\nThe README on the master branch might not match that of the latest stable release.\n\n### Why CLI command not working?\n\nTry to run `npm link javascript-obfuscator` command or install it globally with `npm i -g javascript-obfuscator`\n\n### Error `maximum call stack size exceeded`\nLikely this is `selfDefending` mechanism. Something is changing source code after obfuscation with `selfDefending` option.\n\n### Online version?\n\n[obfuscator.io](https://obfuscator.io)\n\n### JSX support?\n\nNo. JSX support isn\'t planned.\n\n## Backers\n\nSupport us with a monthly donation and help us continue our activities. [[Become a backer](https://opencollective.com/javascript-obfuscator#backer)]\n\n<a href="https://opencollective.com/javascript-obfuscator/backer/0/website" target="_blank"><img src="https://opencollective.com/javascript-obfuscator/backer/0/avatar.svg"></a>\n<a href="https://opencollective.com/javascript-obfuscator/backer/1/website" target="_blank"><img src="https://opencollective.com/javascript-obfuscator/backer/1/avatar.svg"></a>\n<a href="https://opencollective.com/javascript-obfuscator/backer/2/website" target="_blank"><img src="https://opencollective.com/javascript-obfuscator/backer/2/avatar.svg"></a>\n<a href="https://opencollective.com/javascript-obfuscator/backer/3/website" target="_blank"><img src="https://opencollective.com/javascript-obfuscator/backer/3/avatar.svg"></a>\n<a href="https://opencollective.com/javascript-obfuscator/backer/4/website" target="_blank"><img src="https://opencollective.com/javascript-obfuscator/backer/4/avatar.svg"></a>\n<a href="https://opencollective.com/javascript-obfuscator/backer/5/website" target="_blank"><img src="https://opencollective.com/javascript-obfuscator/backer/5/avatar.svg"></a>\n<a href="https://opencollective.com/javascript-obfuscator/backer/6/website" target="_blank"><img src="https://opencollective.com/javascript-obfuscator/backer/6/avatar.svg"></a>\n<a href="https://opencollective.com/javascript-obfuscator/backer/7/website" target="_blank"><img src="https://opencollective.com/javascript-obfuscator/backer/7/avatar.svg"></a>\n<a href="https://opencollective.com/javascript-obfuscator/backer/8/website" target="_blank"><img src="https://opencollective.com/javascript-obfuscator/backer/8/avatar.svg"></a>\n<a href="https://opencollective.com/javascript-obfuscator/backer/9/website" target="_blank"><img src="https://opencollective.com/javascript-obfuscator/backer/9/avatar.svg"></a>\n<a href="https://opencollective.com/javascript-obfuscator/backer/10/website" target="_blank"><img src="https://opencollective.com/javascript-obfuscator/backer/10/avatar.svg"></a>\n<a href="https://opencollective.com/javascript-obfuscator/backer/11/website" target="_blank"><img src="https://opencollective.com/javascript-obfuscator/backer/11/avatar.svg"></a>\n<a href="https://opencollective.com/javascript-obfuscator/backer/12/website" target="_blank"><img src="https://opencollective.com/javascript-obfuscator/backer/12/avatar.svg"></a>\n<a href="https://opencollective.com/javascript-obfuscator/backer/13/website" target="_blank"><img src="https://opencollective.com/javascript-obfuscator/backer/13/avatar.svg"></a>\n<a href="https://opencollective.com/javascript-obfuscator/backer/14/website" target="_blank"><img src="https://opencollective.com/javascript-obfuscator/backer/14/avatar.svg"></a>\n<a href="https://opencollective.com/javascript-obfuscator/backer/15/website" target="_blank"><img src="https://opencollective.com/javascript-obfuscator/backer/15/avatar.svg"></a>\n<a href="https://opencollective.com/javascript-obfuscator/backer/16/website" target="_blank"><img src="https://opencollective.com/javascript-obfuscator/backer/16/avatar.svg"></a>\n<a href="https://opencollective.com/javascript-obfuscator/backer/17/website" target="_blank"><img src="https://opencollective.com/javascript-obfuscator/backer/17/avatar.svg"></a>\n<a href="https://opencollective.com/javascript-obfuscator/backer/18/website" target="_blank"><img src="https://opencollective.com/javascript-obfuscator/backer/18/avatar.svg"></a>\n<a href="https://opencollective.com/javascript-obfuscator/backer/19/website" target="_blank"><img src="https://opencollective.com/javascript-obfuscator/backer/19/avatar.svg"></a>\n<a href="https://opencollective.com/javascript-obfuscator/backer/20/website" target="_blank"><img src="https://opencollective.com/javascript-obfuscator/backer/20/avatar.svg"></a>\n<a href="https://opencollective.com/javascript-obfuscator/backer/21/website" target="_blank"><img src="https://opencollective.com/javascript-obfuscator/backer/21/avatar.svg"></a>\n<a href="https://opencollective.com/javascript-obfuscator/backer/22/website" target="_blank"><img src="https://opencollective.com/javascript-obfuscator/backer/22/avatar.svg"></a>\n<a href="https://opencollective.com/javascript-obfuscator/backer/23/website" target="_blank"><img src="https://opencollective.com/javascript-obfuscator/backer/23/avatar.svg"></a>\n<a href="https://opencollective.com/javascript-obfuscator/backer/24/website" target="_blank"><img src="https://opencollective.com/javascript-obfuscator/backer/24/avatar.svg"></a>\n<a href="https://opencollective.com/javascript-obfuscator/backer/25/website" target="_blank"><img src="https://opencollective.com/javascript-obfuscator/backer/25/avatar.svg"></a>\n<a href="https://opencollective.com/javascript-obfuscator/backer/26/website" target="_blank"><img src="https://opencollective.com/javascript-obfuscator/backer/26/avatar.svg"></a>\n<a href="https://opencollective.com/javascript-obfuscator/backer/27/website" target="_blank"><img src="https://opencollective.com/javascript-obfuscator/backer/27/avatar.svg"></a>\n<a href="https://opencollective.com/javascript-obfuscator/backer/28/website" target="_blank"><img src="https://opencollective.com/javascript-obfuscator/backer/28/avatar.svg"></a>\n<a href="https://opencollective.com/javascript-obfuscator/backer/29/website" target="_blank"><img src="https://opencollective.com/javascript-obfuscator/backer/29/avatar.svg"></a>\n\n\n## Sponsors\n\nBecome a sponsor and get your logo on our README on Github with a link to your site. [[Become a sponsor](https://opencollective.com/javascript-obfuscator#sponsor)]\n\n<a href="https://opencollective.com/javascript-obfuscator/sponsor/0/website" target="_blank"><img src="https://opencollective.com/javascript-obfuscator/sponsor/0/avatar.svg"></a>\n<a href="https://opencollective.com/javascript-obfuscator/sponsor/1/website" target="_blank"><img src="https://opencollective.com/javascript-obfuscator/sponsor/1/avatar.svg"></a>\n<a href="https://opencollective.com/javascript-obfuscator/sponsor/2/website" target="_blank"><img src="https://opencollective.com/javascript-obfuscator/sponsor/2/avatar.svg"></a>\n<a href="https://opencollective.com/javascript-obfuscator/sponsor/3/website" target="_blank"><img src="https://opencollective.com/javascript-obfuscator/sponsor/3/avatar.svg"></a>\n<a href="https://opencollective.com/javascript-obfuscator/sponsor/4/website" target="_blank"><img src="https://opencollective.com/javascript-obfuscator/sponsor/4/avatar.svg"></a>\n<a href="https://opencollective.com/javascript-obfuscator/sponsor/5/website" target="_blank"><img src="https://opencollective.com/javascript-obfuscator/sponsor/5/avatar.svg"></a>\n<a href="https://opencollective.com/javascript-obfuscator/sponsor/6/website" target="_blank"><img src="https://opencollective.com/javascript-obfuscator/sponsor/6/avatar.svg"></a>\n<a href="https://opencollective.com/javascript-obfuscator/sponsor/7/website" target="_blank"><img src="https://opencollective.com/javascript-obfuscator/sponsor/7/avatar.svg"></a>\n<a href="https://opencollective.com/javascript-obfuscator/sponsor/8/website" target="_blank"><img src="https://opencollective.com/javascript-obfuscator/sponsor/8/avatar.svg"></a>\n<a href="https://opencollective.com/javascript-obfuscator/sponsor/9/website" target="_blank"><img src="https://opencollective.com/javascript-obfuscator/sponsor/9/avatar.svg"></a>\n\n\n## License\n[![FOSSA Status](https://app.fossa.io/api/projects/git%2Bgithub.com%2Fjavascript-obfuscator%2Fjavascript-obfuscator.svg?type=large)](https://app.fossa.io/projects/git%2Bgithub.com%2Fjavascript-obfuscator%2Fjavascript-obfuscator?ref=badge_large)\n\nCopyright (C) 2016-2018 [Timofey Kachalov](http://github.com/sanex3339).\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n  * Redistributions of source code must retain the above copyright\n    notice, this list of conditions and the following disclaimer.\n  * Redistributions in binary form must reproduce the above copyright\n    notice, this list of conditions and the following disclaimer in the\n    documentation and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n'