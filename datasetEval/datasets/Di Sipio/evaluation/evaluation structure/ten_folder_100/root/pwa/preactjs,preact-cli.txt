b'# preact-cli [![Build Status](https://img.shields.io/travis/preactjs/preact-cli/master.svg)](https://travis-ci.org/preactjs/preact-cli) [![NPM Downloads](https://img.shields.io/npm/dm/preact-cli.svg)](https://www.npmjs.com/package/preact-cli) [![NPM Version](https://img.shields.io/npm/v/preact-cli.svg)](https://www.npmjs.com/package/preact-cli)\n\n> Start building a [Preact] Progressive Web App in seconds \xf0\x9f\x94\xa5\n\n### Contents\n\n- [Features](#features)\n- [Installation](#installation)\n- [Usage](#usage)\n- [Official Templates](#official-templates)\n- [CLI Options](#cli-options)\n  - [preact create](#preact-create)\n  - [preact build](#preact-build)\n  - [preact watch](#preact-watch)\n  - [preact list](#preact-list)\n  - [preact info](#preact-info)\n- [Deploying](#deploying)\n- [Pre-rendering](#pre-rendering)\n- [Custom Configuration](#custom-configuration)\n  - [Plugins](#plugins)\n  - [Browserslist](#browserslist)\n  - [Babel](#babel)\n  - [Webpack](#webpack)\n  - [Prerender multiple routes](#prerender-multiple-routes)\n  - [Template](#template)\n- [Using CSS preprocessors](#using-css-preprocessors)\n  - [SASS](#sass)\n  - [LESS](#less)\n\n### Features\n\n- **100/100 Lighthouse score**, right out of the box ([proof])\n- Fully **automatic code splitting** for routes\n- Transparently code-split any component with an [`async!`] prefix\n- Auto-generated [Service Workers] for offline caching powered by [sw-precache]\n- [PRPL] pattern support for efficient loading\n- Zero-configuration pre-rendering / server-side rendering hydration\n- Support for CSS Modules, LESS, Sass, Stylus; with Autoprefixer\n- Monitor your bundle/chunk sizes with built-in tracking\n- Automatic app mounting, debug helpers & Hot Module Replacement\n- In just **4.5kb** you get a productive environment:\n  - [preact]\n  - [preact-router]\n  - 1.5kb of conditionally-loaded polyfills for [fetch] & [Promise]\n\n### Installation\n\n> **Important**: [Node.js](https://nodejs.org/en/) > V6.x is a minimum requirement.\n\n```sh\n$ npm install -g preact-cli\n```\n\n### Usage\n\n```sh\n$ preact create <template-name> <project-name>\n```\n\nExample:\n\n```sh\n$ preact create default my-project\n```\n\nThe above command pulls the template from [preactjs-templates/default], prompts for some information, and generates the project at `./my-project/`.\n\n### Official Templates\n\nThe purpose of official preact project templates are to provide opinionated development tooling setups so that users can get started with actual app code as fast as possible. However, these templates are un-opinionated in terms of how you structure your app code and what libraries you use in addition to preact.js.\n\nAll official project templates are repos in the [preactjs-templates organization]. When a new template is added to the organization, you will be able to run `preact create <template-name> <project-name>` to use that template.\n\nCurrent available templates include:\n\n- [default] - Default template with all features.\n\n- [material] - material template using preact-material-components\n\n- [simple] - The simplest possible preact setup in a single file\n\n- [netlify] - Netlify CMS template using preact.\n\n- [typescript] - Default template implemented in TypeScript\n\n- [widget] - Template for a widget to be embedded in another website.\n\n> \xf0\x9f\x92\x81 Tip: Any Github repo with a `\'template\'` folder can be used as a custom template: <br /> `preact create <username>/<repository> <project-name>`\n\n### CLI Options\n\n#### preact create\n\nCreate a project to quick start development.\n\n```\n$ preact create <template-name> <project-name>\n\n  --name        The application name.\n  --cwd         A directory to use instead of $PWD.\n  --force       Force option to create the directory for the new app  [boolean] [default: false]\n  --yarn        Installs dependencies with yarn.                      [boolean] [default: false]\n  --git         Initialize version control using git.                 [boolean] [default: false]\n  --install     Installs dependencies.                                [boolean] [default: true]\n```\n\nNote: If you don\'t specify enough data to the `preact create` command, it will prompt the required questions.\n\n#### preact build\n\nCreate a production build\n\nYou can disable `default: true` flags by prefixing them with `--no-<option>`; for example, `--no-sw`, `--no-esm`, and `--no-inline-css`.\n\n```\n$ preact build\n\n    --src              Specify source directory  (default src)\n    --dest             Specify output directory  (default build)\n    --cwd              A directory to use instead of $PWD  (default .)\n    --sw               Generate and attach a Service Worker  (default true)\n    --json             Generate build stats for bundle analysis\n    --template         Path to custom HTML template\n    --preload          Adds preload tags to the document its assets  (default false)\n    --analyze          Launch interactive Analyzer to inspect production bundle(s)\n    --prerenderUrls    Path to pre-rendered routes config  (default prerender-urls.json)\n    -c, --config       Path to custom CLI config  (default preact.config.js)\n    --esm              Builds ES-2015 bundles for your code.  (default true)\n    --brotli           Adds brotli redirects to the service worker.  (default false)\n    --inline-css       Adds critical css to the prerendered markup.  (default true)\n    -v, --verbose      Verbose output\n    -h, --help         Displays this message\n```\n\n#### preact watch\n\nSpin up a development server with multiple features like `hot-module-replacement`, `module-watcher`\n\n```\n$ preact watch\n\n    --src           Specify source directory  (default src)\n    --cwd           A directory to use instead of $PWD  (default .)\n    --esm           Builds ES-2015 bundles for your code.  (default true)\n    --sw            Generate and attach a Service Worker  (default false)\n    --rhl           Enable react hot loader  (default false)\n    --json          Generate build stats for bundle analysis\n    --https         Run server with HTTPS protocol\n    --key           Path to PEM key for custom SSL certificate\n    --cert          Path to custom SSL certificate\n    --cacert        Path to optional CA certificate override\n    --prerender     Pre-render static content on first run\n    --template      Path to custom HTML template\n    -c, --config    Path to custom CLI config  (default preact.config.js)\n    -H, --host      Set server hostname  (default 0.0.0.0)\n    -p, --port      Set server port  (default 8080)\n    -h, --help      Displays this message\n```\n\nNote:\n\n1. You can run dev server using `HTTPS` then you can use the following `HTTPS=true preact watch`\n2. You can run the dev server on a different port using `PORT=8091 preact watch`\n\n#### preact list\n\nLists all the official preactjs-cli repositories\n\n```sh\n$ preact list\n```\n\n#### preact info\n\nPrints debugging information concerning the local environment.\n\n### Deploying\n\n```sh\n# create a production build:\nnpm run build\n\n# generate configuration in Firebase Hosting format:\nnpm run serve -- --server config\n\n# Copy your static files to a server!\n```\n\n### Pre-rendering\n\nPreact CLI in order to follow [PRPL] pattern renders initial route (`/`) into generated static `index.html` - this ensures that users get to see your page before any JavaScript is run, and thus providing users with slow devices or poor connection your website\'s content much faster.\n\nPreact CLI does this by rendering your app inside node - this means that we don\'t have access to DOM or other global variables available in browsers, similar how it would be in server-side rendering scenarios. In case you need to rely on browser APIs you could:\n\n- drop out of prerendering by passing `--no-prerender` flag to `preact build`,\n- write your code in a way that supports server-side rendering by wrapping code that requires browser\'s APIs in conditional statements `if (typeof window !== "undefined") { ... }` ensuring that on server those lines of code are never reached. Alternatively you could use a helper library like [window-or-global](https://www.npmjs.com/package/window-or-global).\n\n### Custom Configuration\n\n#### Plugins\n\nTo make customizing your configuration easier, preact-cli supports plugins. Visit the [Plugins wiki] for a tutorial on how to use them.\n\n#### Browserslist\n\nYou may customize your list of supported browser versions by declaring a [`"browserslist"`] key within your `package.json`. Changing these values will modify your JavaScript (via [`babel-preset-env`]) and your CSS (via [`autoprefixer`](https://github.com/postcss/autoprefixer)) output.\n\nBy default, `preact-cli` emulates the following config:\n\n> `package.json`\n\n```json\n{\n\t"browserslist": ["> 1%", "IE >= 9", "last 2 versions"]\n}\n```\n\n#### Babel\n\nTo customize Babel, you have two options:\n\n1. You may create a [`.babelrc`] file in your project\'s root directory. Any settings you define here will overwrite matching config-keys within [Preact CLI preset]. For example, if you pass a `"plugins"` object, it will replace & reset all Babel plugins that Preact CLI defaults to.\n\n2. If you\'d like to modify or add to the existing Babel config, you must use a `preact.config.js` file. Visit the [Webpack](#webpack) section for more info, or check out the [Customize Babel] example!\n\n#### Webpack\n\nTo customize preact-cli create a `preact.config.js` or a `preact.config.json` file.\n\n> `preact.config.js`\n\n```js\n// ... imports or other code up here ...\n\n// these props are both optional\nexport default {\n\t// you can add preact-cli plugins here\n\tplugins: [\n\t\t// either a function\n\t\t// (you\'d probably import this because you can use the `webpack` function instead of an inline plugin)\n\t\tfunction() {},\n\t\t// strings also work (they get imported by preact-cli), useful for the json config\n\t\t\'plugin-name\',\n\t\t// with options\n\t\t[\n\t\t\t\'plugin-name\',\n\t\t\t{\n\t\t\t\toption: true,\n\t\t\t},\n\t\t],\n\t],\n\t/**\n\t * Function that mutates the original webpack config.\n\t * Supports asynchronous changes when a promise is returned (or it\'s an async function).\n\t *\n\t * @param {object} config - original webpack config.\n\t * @param {object} env - options passed to the CLI.\n\t * @param {WebpackConfigHelpers} helpers - object with useful helpers for working with the webpack config.\n\t * @param {object} options - this is mainly relevant for plugins (will always be empty in the config), default to an empty object\n\t **/\n\twebpack(config, env, helpers, options) {\n\t\t/** you can change the config here **/\n\t},\n};\n```\n\nSee [WebpackConfigHelpers] docs for more info on `helpers` argument which contains methods to find various parts of configuration. Additionally see our [recipes wiki] containing examples on how to change webpack configuration.\n\n#### Prerender multiple routes\n\nThe `--prerender` flag will prerender by default only the root of your application.\nIf you want to prerender other routes you can create a `prerender-urls.json` file, which contains the set of routes you want to render.\nThe format required for defining your routes is an array of objects with a `url` key and an optional `title` key.\n\n> `prerender-urls.json`\n\n```json\n[\n\t{\n\t\t"url": "/",\n\t\t"title": "Homepage"\n\t},\n\t{\n\t\t"url": "/route/random"\n\t}\n]\n```\n\nYou can customise the path and/or name of `prerender-urls.json` by using the flag `--prerenderUrls`.\n\n```sh\npreact build --prerenderUrls src/prerender-urls.json\n```\n\nIf a static JSON file is too restrictive, you may want to provide a javascript file that exports your routes instead.\nRoutes can be exported as a JSON string or an object and can optionally be returned from a function.\n\n```js\n// prerender-urls.js\nmodule.exports = [\n\t{\n\t\turl: \'/\',\n\t\ttitle: \'Homepage\',\n\t},\n\t{\n\t\turl: \'/route/random\',\n\t},\n];\n```\n\n#### Template\n\nA template is used to render your page.\n\nThe default one is visible [here](packages/cli/lib/resources/template.html) and it\'s going to be enough for the majority of cases.\n\nIf you want to customise your template you can pass a custom template with the `--template` flag.\n\nThe `--template` flag is available on the `build` and `watch` commands.\n\n```sh\npreact build --template src/template.html\npreact watch --template src/template.html\n```\n\n### Using CSS preprocessors\n\nThe default templates comes with a `.css` file for each component. You can start using CSS preprocessors at any given time during your project lifecycle by installing additional packages and then simply replacing those `.css` files.\n\n#### [SASS]\n\n- `npm install --save-dev node-sass sass-loader` (inside your preact application folder)\n- start replacing `.css` files with `.scss` files\n\n#### [LESS]\n\n- `npm install --save-dev less less-loader` (inside your preact application folder)\n- start replacing `.css` files with `.less` files\n\n[promise]: https://npm.im/promise-polyfill\n[fetch]: https://github.com/developit/unfetch\n[preact]: https://github.com/preactjs/preact\n[webpackconfighelpers]: docs/webpack-helpers.md\n[`.babelrc`]: https://babeljs.io/docs/usage/babelrc\n[simple]: https://github.com/preactjs-templates/simple\n[`"browserslist"`]: https://github.com/ai/browserslist\n[```.babelrc```]: https://babeljs.io/docs/usage/babelrc\n[default]: https://github.com/preactjs-templates/default\n[sw-precache]: https://github.com/GoogleChrome/sw-precache\n[preact-router]: https://github.com/preactjs/preact-router\n[material]: https://github.com/preactjs-templates/material\n[netlify]: https://github.com/preactjs-templates/netlify\n[typescript]: https://github.com/preactjs-templates/typescript\n[widget]: https://github.com/preactjs-templates/widget\n[plugins wiki]: https://github.com/preactjs/preact-cli/wiki/Plugins\n[preactjs-templates organization]: https://github.com/preactjs-templates\n[preactjs-templates/default]: https://github.com/preactjs-templates/default\n[recipes wiki]: https://github.com/preactjs/preact-cli/wiki/Config-Recipes\n[prpl]: https://developers.google.com/web/fundamentals/performance/prpl-pattern\n[`babel-preset-env`]: https://github.com/babel/babel-preset-env#targetsbrowsers\n[proof]: https://googlechrome.github.io/lighthouse/viewer/?gist=142af6838482417af741d966e7804346\n[preact cli preset]: https://github.com/preactjs/preact-cli/blob/master/packages/cli/lib/lib/babel-config.js\n[service workers]: https://developers.google.com/web/fundamentals/getting-started/primers/service-workers\n[customize babel]: https://github.com/preactjs/preact-cli/wiki/Config-Recipes#customising-babel-options-using-loader-helpers\n[`async!`]: https://github.com/preactjs/preact-cli/blob/1.4.1/examples/full/src/components/app.js#L7\n[sass]: https://sass-lang.com\n[less]: http://lesscss.org\n'