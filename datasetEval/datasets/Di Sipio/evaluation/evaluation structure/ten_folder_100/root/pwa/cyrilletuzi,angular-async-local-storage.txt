b"# Async local storage for Angular\n\nEfficient client-side storage module for Angular apps and Progressive Wep Apps (PWA):\n- **simplicity**: based on native `localStorage` API,\n- **perfomance**: internally stored via the asynchronous `indexedDB` API,\n- **Angular-like**: wrapped in RxJS `Observable`s,\n- **security**: validate data with a JSON Schema,\n- **compatibility**: works around some browsers issues and heavily tested via GitHub Actions,\n- **documentation**: API fully explained, and a changelog!\n- **reference**: 1st Angular library for client-side storage according to [ngx.tools](https://ngx.tools/#/search?q=local%20storage).\n\n## By the same author\n\n- [Angular schematics extension for VS Code](https://marketplace.visualstudio.com/items?itemName=cyrilletuzi.angular-schematics) (GUI for Angular CLI commands)\n- Other Angular library: [@ngx-pwa/offline](https://github.com/cyrilletuzi/ngx-pwa-offline)\n- Popular [Angular posts on Medium](https://medium.com/@cyrilletuzi)\n- Follow updates of this lib on [Twitter](https://twitter.com/cyrilletuzi)\n- **[Angular onsite trainings](https://formationjavascript.com/formation-angular/)** (based in Paris, so the website is in French, but [my English bio is here](https://www.cyrilletuzi.com/en/web/) and I'm open to travel)\n\n## Why this module?\n\nFor now, Angular does not provide a client-side storage module, and almost every app needs some client-side storage. \nThere are 2 native JavaScript APIs available:\n- [localStorage](https://developer.mozilla.org/en-US/docs/Web/API/Storage/LocalStorage)\n- [indexedDB](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API)\n\nThe `localStorage` API is simple to use but synchronous, so if you use it too often, \nyour app will soon begin to freeze.\n\nThe `indexedDB` API is asynchronous and efficient, but it's a mess to use: \nyou'll soon be caught by the callback hell, as it does not support `Promise`s yet.\n\nMozilla has done a very great job with the [`localForage` library](http://localforage.github.io/localForage/): \na simple API based on native `localStorage`,\nbut internally stored via the asynchronous `indexedDB` for performance.\nBut it's built in ES5 old school way and then it's a mess to include into Angular.\n\nThis module is based on the same idea as `localForage`, but built in ES6+ \nand additionally wrapped into [RxJS `Observable`s](http://reactivex.io/rxjs/) \nto be homogeneous with other Angular modules.\n\n## Getting started\n\nInstall the package, according to your Angular version:\n\n```bash\n# For Angular 8:\nng add @ngx-pwa/local-storage\n\n# For Angular 6 & 7:\nnpm install @ngx-pwa/local-storage@6\n```\n\n*Done!*\n\nYou should **stick to these commands**. If for any reason `ng add` does not work,\nbe sure to follow the [manual installation guide](./docs/MANUAL_INSTALLATION.md),\nas there are additionnal steps to do in addition to the package installation.\n\nFor version >= 8, if you have multiple applications in the same project, as usual, you need to choose the project:\n```bash\nng add @ngx-pwa/local-storage --project yourprojectname\n```\n\n### Upgrading\n\nIf you still use the old `angular-async-local-storage` package, or to update to new versions,\nsee the **[migration guides](./MIGRATION.md).**\n\n## API\n\n2 services are available for client-side storage, you just have to inject one of them where you need it.\n\n### `StorageMap`: recommended\n\nNew *since version 8* of this lib, this is the recommended service:\n\n```typescript\nimport { StorageMap } from '@ngx-pwa/local-storage';\n\n@Injectable()\nexport class YourService {\n  constructor(private storage: StorageMap) {}\n}\n```\n\nThis service API follows the\nnew standard [`kv-storage` API](https://wicg.github.io/kv-storage/),\nwhich is similar to the standard [`Map` API](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map),\nexcept it's based on [RxJS `Observable`s](https://rxjs.dev/) instead of `Promise`s:\n\n```typescript\nclass StorageMap {\n  // Read\n  get(index: string): Observable<unknown> {}\n  get<T>(index: string, schema: JSONSchema): Observable<T> {}\n\n  // Write\n  set(index: string, value: any): Observable<undefined> {}\n  delete(index: string): Observable<undefined> {}\n  clear(): Observable<undefined> {}\n\n  // Advanced\n  size: Observable<number>;\n  has(index: string): Observable<boolean> {}\n  keys(): Observable<string> {}\n}\n```\n\nIt does the same thing as the `localStorage` API, but also allows more advanced operations.\n\n### `LocalStorage`: legacy\n\nYou can keep this legacy service in existing apps, but it's not recommended anymore for new applications.\n\n```typescript\nimport { LocalStorage } from '@ngx-pwa/local-storage';\n\n@Injectable()\nexport class YourService {\n  constructor(private localStorage: LocalStorage) {}\n}\n```\n\nThis service API follows the\nstandard [`localStorage` API](https://developer.mozilla.org/en-US/docs/Web/API/Storage/LocalStorage), \nexcept it's asynchronous via [RxJS `Observable`s](https://rxjs.dev/):\n\n```typescript\nclass LocalStorage {\n  // Read\n  getItem(index: string): Observable<unknown> {}\n  getItem<T>(index: string, schema: JSONSchema): Observable<T> {}\n\n  // Write\n  setItem(index: string, value: any): Observable<true> {}\n  removeItem(index: string): Observable<true> {}\n  clear(): Observable<true> {}\n\n  // Advanced\n  length: Observable<number>;\n}\n```\n\n## How to\n\nThe following examples will use the recommended `StorageMap` service.\nBut for older versions, you can always do the same with the `LocalStorage` service.\n\n### Writing data\n\n```typescript\nlet user: User = { firstName: 'Henri', lastName: 'Bergson' };\n\nthis.storage.set('user', user).subscribe(() => {});\n```\n\nYou can store any value, without worrying about serializing. But note that:\n- storing `null` or `undefined` makes no sense and can cause issues in some browsers, so the item will be removed instead,\n- you should stick to JSON data, ie. primitive types, arrays and *literal* objects.\n`Date`, `Map`, `Set`, `Blob` and other special structures can cause issues in some scenarios.\nSee the [serialization guide](./docs/SERIALIZATION.md) for more details.\n\n### Deleting data\n\nTo delete one item:\n```typescript\nthis.storage.delete('user').subscribe(() => {});\n```\n\nTo delete all items:\n```typescript\nthis.storage.clear().subscribe(() => {});\n```\n\n### Reading data\n\n```typescript\nthis.storage.get('user').subscribe((user) => {\n  console.log(user);\n});\n```\n\nNot finding an item is not an error, it succeeds but returns `undefined` (or `null` with `LocalStorage` legacy service):\n```typescript\nthis.storage.get('notexisting').subscribe((data) => {\n  data; // undefined\n});\n```\n\nNote you'll only get *one* value: the `Observable` is here for asynchrony but is not meant to\nemit again when the stored data is changed. And it's normal: if app data change, it's the role of your app\nto keep track of it, not of this lib. See [#16](https://github.com/cyrilletuzi/angular-async-local-storage/issues/16) \nfor more context and [#4](https://github.com/cyrilletuzi/angular-async-local-storage/issues/4)\nfor an example. A `watch()` method may come soon\n(see [#108](https://github.com/cyrilletuzi/angular-async-local-storage/pull/108))\n\n### Checking data\n\nDon't forget it's client-side storage: **always check the data**, as it could have been forged.\n\nYou can use a [JSON Schema](http://json-schema.org/) to validate the data.\n\n```typescript\nthis.storage.get('test', { type: 'string' }).subscribe({\n  next: (user) => { /* Called if data is valid or `undefined` */ },\n  error: (error) => { /* Called if data is invalid */ },\n});\n```\n\n**See the [full validation guide](./docs/VALIDATION.md) to see how to validate all common scenarios.**\n\n### Subscription\n\nYou *DO NOT* need to unsubscribe: the `Observable` autocompletes (like in the Angular `HttpClient` service).\n\nBut **you *DO* need to subscribe**, even if you don't have something specific to do after writing in storage\n(because it's how RxJS `Observable`s work).\n\n### Errors\n\nAs usual, it's better to catch any potential error:\n```typescript\nthis.storage.set('color', 'red').subscribe({\n  next: () => {},\n  error: (error) => {},\n});\n```\n\nFor read operations, you can also manage errors by providing a default value:\n```typescript\nimport { of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nthis.storage.get('color').pipe(\n  catchError(() => of('red')),\n).subscribe((result) => {});\n```\n\nSee the [errors guide](./docs/ERRORS.md) for some details about what errors can happen.\n\n### Expiration\n\nThis lib, as native `localStorage` and `indexedDb`, is about *persistent* storage.\n\nWanting *temporary* storage (like `sessionStorage`) is a very common misconception:\nan application doesn't need that. [More details here](./docs/EXPIRATION.md).\n\n### `Map`-like operations\n\nStarting *with version >= 8* of this lib, in addition to the classic `localStorage`-like API,\nthis lib also provides a `Map`-like API for advanced operations:\n  - `.keys()`\n  - `.has(key)`\n  - `.size`\n\nSee the [documentation](./docs/MAP_OPERATIONS.md) for more info and some recipes.\nFor example, it allows to implement a multiple databases scenario.\n\n## Support\n\n### Angular support\n\nWe follow [Angular LTS support](https://angular.io/guide/releases),\nmeaning we support Angular >= 6, until November 2019.\n\nThis module supports [AoT pre-compiling](https://angular.io/guide/aot-compiler) and Ivy.\n\nThis module supports [Universal server-side rendering](https://github.com/angular/universal)\nvia a mock storage.\n\n### Browser support\n\n[All browsers supporting IndexedDB](https://caniuse.com/#feat=indexeddb), ie. **all current browsers** :\nFirefox, Chrome, Opera, Safari, Edge, and IE10+.\n\nSee [the browsers support guide](./docs/BROWSERS_SUPPORT.md) for more details and special cases (like private browsing).\n\n### Collision\n\nIf you have multiple apps on the same *sub*domain *and* you don't want to share data between them,\nsee the [prefix guide](./docs/COLLISION.md).\n\n### Interoperability\n\nFor interoperability when mixing this lib with direct usage of native APIs or other libs like `localForage`\n(which doesn't make sense in most cases),\nsee the [interoperability documentation](./docs/INTEROPERABILITY.md).\n\n### Changelog\n\n[Changelog available here](./CHANGELOG.md), and [migration guides here](./MIGRATION.md).\n\n## License\n\nMIT\n"