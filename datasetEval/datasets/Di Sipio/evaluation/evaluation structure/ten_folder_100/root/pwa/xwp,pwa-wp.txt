b'<!-- DO NOT EDIT THIS FILE; it is auto-generated from readme.txt -->\n# PWA\n\n![Banner](wp-assets/banner-1544x500.png)\nWordPress feature plugin to bring Progressive Web App (PWA) capabilities to Core\n\n**Contributors:** [xwp](https://profiles.wordpress.org/xwp), [google](https://profiles.wordpress.org/google), [automattic](https://profiles.wordpress.org/automattic)  \n**Tags:** [pwa](https://wordpress.org/plugins/tags/pwa), [progressive web apps](https://wordpress.org/plugins/tags/progressive-web-apps), [service workers](https://wordpress.org/plugins/tags/service-workers), [web app manifest](https://wordpress.org/plugins/tags/web-app-manifest), [https](https://wordpress.org/plugins/tags/https)  \n**Requires at least:** 5.2  \n**Tested up to:** 5.3-alpha  \n**Stable tag:** 0.3.0  \n**License:** [GPLv2 or later](http://www.gnu.org/licenses/gpl-2.0.html)  \n**Requires PHP:** 5.6  \n\n[![Build Status](https://travis-ci.org/xwp/pwa-wp.svg?branch=master)](https://travis-ci.org/xwp/pwa-wp) [![Built with Grunt](https://gruntjs.com/cdn/builtwith.svg)](http://gruntjs.com) \n\n## Description ##\n\n<blockquote cite="https://developers.google.com/web/progressive-web-apps/">\nProgressive Web Apps are user experiences that have the reach of the web, and are:\n\n<ul>\n<li><a href="https://developers.google.com/web/progressive-web-apps/#reliable">Reliable</a> - Load instantly and never show the downasaur, even in uncertain network conditions.</li>\n<li><a href="https://developers.google.com/web/progressive-web-apps/#fast">Fast</a> - Respond quickly to user interactions with silky smooth animations and no janky scrolling.</li>\n<li><a href="https://developers.google.com/web/progressive-web-apps/#engaging">Engaging</a> - Feel like a natural app on the device, with an immersive user experience.</li>\n</ul>\n\nThis new level of quality allows Progressive Web Apps to earn a place on the user\'s home screen.\n</blockquote>\n\nContinue reading more about [Progressive Web Apps](https://developers.google.com/web/progressive-web-apps/) (PWA) from Google.\n\nIn general a PWA depends on the following technologies to be available:\n\n* [Service Workers](https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API)\n* [Web App Manifest](https://developer.mozilla.org/en-US/docs/Web/Manifest)\n* HTTPS\n\nThis plugin serves as a place to implement support for these in WordPress with the intention of being proposed for core merge, piece by piece.\n\n\xe2\x98\x9e Please note that this feature plugin is _not_ intended to obsolete the other plugins and themes which turn WordPress sites into PWAs. Rather, this plugin is intended to provide the PWA building blocks and coordination mechanism for these themes and plugins to not reinvent the wheel and also to not conflict with each other. For example, a theme that implements the app shell model should be able to extend the core service worker while a plugin that provides push notifications should be able to do the same. Themes and plugins no longer should have to each create a service worker on their own, something which is inherently problematic because only one service worker can be active at a time: only one service worker can win. If you are developing a plugin or theme that includes a service worker, consider relying on this PWA plugin, or at least only use the built-in implementation as a fallback for when the PWA plugin is not available.\n\n**Development of this plugin is done [on GitHub](https://github.com/xwp/pwa-wp). Pull requests welcome. Please see [issues](https://github.com/xwp/pwa-wp/issues) reported there before going to the [plugin forum](https://wordpress.org/support/plugin/pwa).**\n### Web App Manifest ###\nAs noted in a [Google guide](https://developers.google.com/web/fundamentals/web-app-manifest/):\n\n> The [web app manifest](https://developer.mozilla.org/en-US/docs/Web/Manifest) is a simple JSON file that tells the browser about your web application and how it should behave when \'installed\' on the users mobile device or desktop.\n\nThe plugin exposes the web app manifest via the REST API at `/wp-json/wp/v2/web-app-manifest`. A response looks like:\n\n```json\n{\n    "name": "WordPress Develop",\n    "short_name": "WordPress",\n    "description": "Just another WordPress site",\n    "lang": "en-US",\n    "dir": "ltr",\n    "start_url": "https://example.com",\n    "theme_color": "#ffffff",\n    "background_color": "#ffffff",\n    "display": "minimal-ui",\n    "icons": [\n        {\n            "sizes": "192x192",\n            "src": "https://example.com/wp-content/uploads/2018/05/example-192x192.png",\n            "type": "image/png"\n        },\n        {\n            "sizes": "512x512",\n            "src": "https://example.com/wp-content/uploads/2018/05/example.png",\n            "type": "image/png"\n        }\n    ]\n}\n```\n\nA `rel=manifest` link to this endpoint is added at `wp_head`.\n\nThe manifest is populated with default values including:\n\n* `name`: the site title from `get_option(\'blogname\')`\n* `short_name`: truncated site title\n* `description`: the site tagline from `get_option(\'blogdescription\')`\n* `lang`: the site language from `get_bloginfo( \'language\' )`\n* `dir`: the site language direction from `is_rtl()`\n* `start_url`: the home URL from `get_home_url()`\n* `theme_color`: a theme\'s custom background via `get_background_color()`\n* `background_color`: also populated with theme\'s custom background\n* `display`: `minimal-ui` is used as the default.\n* `icons`: the site icon via `get_site_icon_url()`\n\nThere is a `web_app_manifest` filter which is passed the above array so that plugins and themes can customize the manifest.\n\nSee [labeled GitHub issues](https://github.com/xwp/pwa-wp/issues?q=label%3Aweb-app-manifest) and see WordPress core tracking ticket [#43328](https://core.trac.wordpress.org/ticket/43328).\n\n### Service Workers ###\nAs noted in a [Google primer](https://developers.google.com/web/fundamentals/primers/service-workers/):\n\n> Rich offline experiences, periodic background syncs, push notifications\xe2\x80\x94functionality that would normally require a native application\xe2\x80\x94are coming to the web. Service workers provide the technical foundation that all these features rely on.\n\nOnly one service worker can be controlling a page at a time. This has prevented themes and plugins from each introducing their own service workers because only one wins. So the first step at adding support for service workers in core is to provide an API for themes and plugins to register scripts and then have them concatenated into a script that is installed as the service worker. There are two such concatenated service worker scripts that are made available: one for the frontend and one for the admin. The frontend service worker is installed under the `home(\'/\')` scope and the admin service worker is installed under the `admin_url(\'/\')` scope.\n\nThe API is implemented using the same interface as WordPress uses for registering scripts; in fact `WP_Service_Worker_Scripts` is a subclass of `WP_Scripts`. The instance of this class is accessible via `wp_service_workers()->get_registry()`. Instead of using `wp_register_script()` the service worker scripts are registered using `wp_register_service_worker_script()`. This function accepts two parameters:\n\n* `$handle`: The service worker script handle which can be used to mark the script as a dependency for other scripts.\n* `$args`: An array of additional service worker script arguments as `$key => $value` pairs:\n\t* `$src`: Required. The URL to the service worker _on the local filesystem_ or a callback function which returns the script to include in the service worker.\n\t* `$deps`: An array of service worker script handles that a script depends on.\n\nNote that there is no `$ver` (version) parameter because browsers do not cache service workers so there is no need to cache bust them.\n\nService worker scripts should be registered on the `wp_front_service_worker` and/or `wp_admin_service_worker` action hooks, depending on whether they should be active for the frontend service worker, the admin service worker, or both of them. The hooks are passed the `WP_Service_Worker_Scripts` instance, so you can optionally access its `register()` method directly, which `wp_register_service_worker_script()` is a simple wrapper of.\n\nHere are some examples:\n\n```php\nfunction register_foo_service_worker_script( $scripts ) {\n\t// $scripts->register() is the same as wp_register_service_worker_script().\n\t$scripts->register(\n\t\t\'foo\', // Handle.\n\t\tarray(\n\t\t\t\'src\'  => plugin_dir_url( __FILE__ ) . \'foo.js\', // Source.\n\t\t\t\'deps\' => array( \'app-shell\' ), // Dependency.\n\t\t)\n\t);\n}\n// Register for the frontend service worker.\nadd_action( \'wp_front_service_worker\', \'register_foo_service_worker_script\' );\n\nfunction register_bar_service_worker_script( $scripts ) {\n\t$scripts->register(\n\t\t\'bar\',\n\t\tarray(\n\t\t\t// Use a script render callback instead of a source file.\n\t\t\t\'src\'  => function() {\n\t\t\t\treturn \'console.info( "Hello admin!" );\';\n\t\t\t},\n\t\t\t\'deps\' => array(), // No dependencies (can also be omitted).\n\t\t)\n\t);\n}\n// Register for the admin service worker.\nadd_action( \'wp_admin_service_worker\', \'register_bar_service_worker_script\' );\n\nfunction register_baz_service_worker_script( $scripts ) {\n\t$scripts->register( \'baz\', array( \'src\' => plugin_dir_url( __FILE__ ) . \'baz.js\' ) );\n}\n// Register for both the frontend and admin service worker.\nadd_action( \'wp_front_service_worker\', \'register_baz_service_worker_script\' );\nadd_action( \'wp_admin_service_worker\', \'register_baz_service_worker_script\' );\n```\n\nSee [labeled GitHub issues](https://github.com/xwp/pwa-wp/issues?q=label%3Aservice-workers) and see WordPress core tracking ticket [#36995](https://core.trac.wordpress.org/ticket/36995).\n\n### Integrations ###\nThe plugin bundles several experimental integrations that are kept separate from the service worker core code. These integrations act as examples and proof-of-concept to achieve certain goals. While all of them are generally applicable and recommended to truly benefit from service workers, they are not crucial for the core API.\n\nAll these integrations are hidden behind a feature flag. To enable them, you can add `service_worker` theme support:\n\n```php\n<?php\nadd_theme_support( \'service_worker\', true );\n```\n\nAlternatively, you can selectively enable specific integrations by providing an array when adding theme support:\n\n```php\n<?php\nadd_theme_support(\n\t\'service_worker\',\n\tarray(\n\t\t\'wp-site-icon\'         => false,\n\t\t\'wp-custom-logo\'       => true,\n\t\t\'wp-custom-background\' => true,\n\t\t\'wp-fonts\'             => true,\n\t)\n);\n```\n\n### Caching ###\nService Workers in the feature plugin are using [Workbox](https://developers.google.com/web/tools/workbox/) to power a higher-level PHP abstraction for themes and plugins to indicate the routes and the caching strategies in a declarative way. Since only one handler can be used per one route then conflicts are also detected and reported in console when using debug mode.\n\nThe API abstraction allows registering routes for caching and urls for precaching using the following two functions:\n1. `wp_register_service_worker_caching_route()`: accepts the following two parameters:\n* `$route`: Route regular expression, without delimiters.\n* `$args`: An array of additional route arguments as `$key => $value` pairs:\n  * `$strategy`: Required. Strategy, can be `WP_Service_Worker_Caching_Routes::STRATEGY_STALE_WHILE_REVALIDATE`, `WP_Service_Worker_Caching_Routes::STRATEGY_CACHE_FIRST`, `WP_Service_Worker_Caching_Routes::STRATEGY_NETWORK_FIRST`, `WP_Service_Worker_Caching_Routes::STRATEGY_CACHE_ONLY`, `WP_Service_Worker_Caching_Routes::STRATEGY_NETWORK_ONLY`.\n  * `$cache_name`: Name to use for the cache.\n  * `$plugins`: Array of plugins with configuration. The key of each plugin in the array must match the plugin\'s name. See https://developers.google.com/web/tools/workbox/guides/using-plugins#workbox_plugins.\n\n2. `wp_register_service_worker_precaching_route()`: accepts the following two parameters:\n * `$url`: URL to cache.\n * `$args`: An array of additional route arguments as `$key => $value` pairs:\n   * `$revision`: Revision, optional.\n\nExamples of using the API:\n\n```php\nadd_action( \'wp_front_service_worker\', function( \\WP_Service_Worker_Scripts $scripts ) {\n\t$scripts->caching_routes()->register(\n\t\t\'/wp-content/.*\\.(?:png|gif|jpg|jpeg|svg|webp)(\\?.*)?$\',\n\t\tarray(\n\t\t\t\'strategy\'  => WP_Service_Worker_Caching_Routes::STRATEGY_CACHE_FIRST,\n\t\t\t\'cacheName\' => \'images\',\n\t\t\t\'plugins\'   => array(\n\t\t\t\t\'expiration\' => array(\n\t\t\t\t\t\'maxEntries\'    => 60,\n\t\t\t\t\t\'maxAgeSeconds\' => 60 * 60 * 24,\n\t\t\t\t),\n\t\t\t),\n\t\t)\n\t);\n} );\n```\n\n```php\nadd_action( \'wp_front_service_worker\', function( \\WP_Service_Worker_Scripts $scripts ) {\n\t$scripts->precaching_routes()->register(\n\t\t\'https://example.com/wp-content/themes/my-theme/my-theme-image.png\',\n\t\tarray(\n\t\t\t\'revision\' => get_bloginfo( \'version\' ),\n\t\t)\n\t);\n} );\n```\n\nIf you would like to opt-in to a caching strategy for navigation requests, you can do:\n\n```php\nadd_filter( \'wp_service_worker_navigation_caching_strategy\', function() {\n\treturn WP_Service_Worker_Caching_Routes::STRATEGY_STALE_WHILE_REVALIDATE;\n} );\n\nadd_filter( \'wp_service_worker_navigation_caching_strategy_args\', function( $args ) {\n\t$args[\'cacheName\'] = \'pages\';\n\t$args[\'plugins\'][\'expiration\'][\'maxEntries\'] = 50;\n\treturn $args;\n} );\n```\n\n\xf0\x9f\x91\x89 If you previously added a `wp_service_worker_navigation_preload` filter to disable navigation preload,\nyou should probably remove it. This was originally needed to work around an issue with ensuring the offline\npage would work when using a navigation caching strategy, but it is no longer needed and it should be removed\n[improved performance](https://developers.google.com/web/updates/2017/02/navigation-preload). Disabling navigation\npreload is only relevant when you are developing an app shell.\n\n### Offline / 500 error handling ###\nThe feature plugins offers improved offline experience by displaying a custom template when user is offline instead of the default message in browser. Same goes for 500 errors -- a template is displayed together with error details.\n\nThemes can override the default template by using `error.php`, `offline.php`, and `500.php` in you theme folder. `error.php` is a general template for both offline and 500 error pages and it is overridden by `offline.php` and `500.php` if they exist.\n\nNote that the templates should use `wp_service_worker_error_message_placeholder()` for displaying the offline / error messages. Additionally, on the 500 error template the details of the error can be displayed using the function `wp_service_worker_error_details_template( $output )`.\n\nFor development purposes the offline and 500 error templates are visible on the following URLs on your site:\n- `https://your-site-name.com/?wp_error_template=offline`;\n- `https://your-site-name.com/?wp_error_template=500`\n\nDefault value for `$output` is the following:\n`<details id="error-details"><summary>\' . esc_html__( \'More Details\', \'pwa\' ) . \'</summary>{{{error_details_iframe}}}</details>` where `{{{error_details_iframe}}}` will be replaced by the iframe.\n\nIn case of using the `<iframe>` within the template `{{{iframe_src}}}` and `{{{iframe_srcdoc}}}` are available as well.\n\nFor example this could be done:\n\n```php\nwp_service_worker_error_details_template(\n    \'<details id="error-details"><summary>\' . esc_html__( \'More Details\', \'pwa\' ) . \'</summary><iframe style="width:100%" src="{{{iframe_src}}}" data-srcdoc="{{{iframe_srcdoc}}}"></iframe></details>\'\n);\n```\n\n### Offline Commenting ###\nAnother feature improving the offline experience is Offline Commenting implemented leveraging [Workbox Background Sync API](https://developers.google.com/web/tools/workbox/modules/workbox-background-sync).\n\nIn case of submitting a comment and being offline (failing to fetch) the request is added to a queue and once the browsers "thinks" the connectivity is back then Sync is triggered and all the commenting requests in the queue are replayed. This meas that the comment will be resubmitted once the connection is back.\n\n### Available actions and filters ###\nHere is a list of all available actions and filters added by the feature plugin.\n\n**Filters:**\n- `wp_service_worker_skip_waiting`: Filters whether the service worker should update automatically when a new version is available.\n  - Has one boolean argument which defaults to `true`.\n- `wp_service_worker_clients_claim`: Filters whether the service worker should use `clientsClaim()` after `skipWaiting()`.\n  - Has one boolean argument which defaults to `false`;\n- `wp_service_worker_navigation_preload`: Filters whether navigation preload is enabled. Has two arguments:\n  - boolean which defaults to `true`;\n  - `$current_scope`, either 1 (WP_Service_Workers::SCOPE_FRONT) or 2 (WP_Service_Workers::SCOPE_ADMIN);\n- `wp_offline_error_precache_entry`: Filters what is precached to serve as the offline error response on the frontend.\n  - Has one parameter `$entry` which is an array:\n    - `$url` URL to page that shows the offline error template.\n    - `$revision` Revision for the template. This defaults to the template and stylesheet names, with their respective theme versions.\n- `wp_server_error_precache_entry`: Filters what is precached to serve as the internal server error response on the frontend.\n  - Has one parameter `$entry` which is an array:\n    - `$url` URL to page that shows the server error template.\n    - `$revision` Revision for the template. This defaults to the template and stylesheet names, with their respective theme versions.\n- `wp_service_worker_error_messages`: Filters the offline error messages displayed on the offline template by default and in case of offline commenting.\n  - Has one argument with array of messages:\n    - `$default` The message to display on the default offline template;\n    - `$comment` The message to display on the offline template in case of commenting;\n\n**Actions:**\n- `wp_front_service_worker`: Fires before serving the frontend service worker, when its scripts should be registered, caching routes established, and assets precached.\n  - Has one argument `$scripts` WP_Service_Worker_Scripts Instance to register service worker behavior with.\n- `wp_admin_service_worker`: Fires before serving the wp-admin service worker, when its scripts should be registered, caching routes established, and assets precached.\n  - Has one argument `$scripts` WP_Service_Worker_Scripts Instance to register service worker behavior with.\n- `wp_default_service_workers`: Fires when the WP_Service_Worker_Scripts instance is initialized.\n  - Has one argument `$scripts` WP_Service_Worker_Scripts Instance to register service worker behavior with.\n\n### HTTPS ###\nHTTPS is a prerequisite for progressive web apps. A service worker is only able to be installed on sites that are served as HTTPS. For this reason core\'s support for HTTPS needs to be further improved, continuing the great progress made over the past few years.\n\nAt the moment the plugin provides an API to detection of whether a site supports HTTPS. Building on that it\'s intended that this can then be used to present a user with an opt-in to switch over to HTTPS, which will also then need to include support for rewriting URLs from HTTP to HTTPS. See [labeled GitHub issues](https://github.com/xwp/pwa-wp/issues?q=label%3Ahttps) and see WordPress core tracking ticket [#28521](https://core.trac.wordpress.org/ticket/28521).\n\nYou can optionally add an [HSTS header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security) (HTTP `Strict-Transport-Security`). This indicates to the browser to only load the site with HTTPS, not HTTP.\n\n```php\n/**\n * Adds an HSTS header to the response.\n *\n * @param array $headers The headers to filter.\n * @return array $headers The filtered headers.\n */\nadd_filter( \'wp_headers\', function( $headers ) {\n\t$headers[\'Strict-Transport-Security\'] = \'max-age=3600\'; // Or another max-age.\n\treturn $headers;\n} );\n```\n\nThis can prevent a case where users initially visit the HTTP version of the site, and are redirected to a malicious site before a redirect to the proper HTTPS version.\n\nThe [wp_headers](https://developer.wordpress.org/reference/hooks/wp_headers/) filter allows you to add a `Strict-Transport-Security` header for this.\n\nPlease see the [documentation](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security#Directives) for the directives, including the `max-age`.\n\n\n## Changelog ##\n\nFor the plugin\xe2\x80\x99s changelog, please see [the Releases page on GitHub](https://github.com/xwp/pwa-wp/releases).\n\n'