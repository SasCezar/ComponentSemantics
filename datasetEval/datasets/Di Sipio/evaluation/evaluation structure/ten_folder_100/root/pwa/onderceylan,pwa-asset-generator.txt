b'# pwa-asset-generator \n[![npm](https://img.shields.io/npm/v/pwa-asset-generator?color=brightgreen)](https://www.npmjs.com/package/pwa-asset-generator) [![node](https://img.shields.io/node/v/pwa-asset-generator)](https://www.npmjs.com/package/pwa-asset-generator) [![Build Status](https://github.com/onderceylan/pwa-asset-generator/workflows/CI/badge.svg)](https://github.com/onderceylan/pwa-asset-generator/actions?workflow=CI) [![Commitizen friendly](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/) [![semantic-release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-brightgreen.svg)](https://github.com/semantic-release/semantic-release)\n\n> PWA asset generator based on Puppeteer. Automatically generates icons and splash screens guided by Web App Manifest specs and Apple Human Interface guidelines. Updates manifest.json and index.html files with the generated images.\n\n![Usage demonstration](https://raw.githubusercontent.com/onderceylan/pwa-asset-generator/HEAD/static/demo.gif)\n\n## Motivation \xe2\x80\x94 [read full blog post here](https://itnext.io/pwa-splash-screen-and-icon-generator-a74ebb8a130)\n\nWhen you build a PWA with a goal of providing native-like experiences on multiple platforms and stores, you need to meet with the criteria of those platforms and stores with your PWA assets; icon sizes and splash screens. Such criteria are;\n\n* Google\'s Android platform respects Web App Manifest API specs and it expects you to provide at least 2 icon sizes in your manifest file - https://developers.google.com/web/fundamentals/web-app-manifest/#icons \xf0\x9f\xa4\x94\n\n* As it\'s noted on Microsoft docs, your PWA has to meet specific image criteria declared on Web App Manifest in order to be automatically packaged for Microsoft Store - https://docs.microsoft.com/en-us/microsoft-edge/progressive-web-apps/get-started#web-app-manifest \xf0\x9f\xa4\x94\n\n* Apple\'s iOS currently doesn\'t support Web App Manifest API specs. You need to introduce custom html tags to set icons and splash screens to your PWA \xf0\x9f\xa4\x94\n    * You need to introduce a special html link tag with rel `apple-touch-icon` to provide icons for your PWA when it\'s added to home screen. Read more about it on [Apple\'s Icon Guidelines](https://developer.apple.com/design/human-interface-guidelines/ios/icons-and-images/app-icon/) and [Safari Web Content Guide](https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/ConfiguringWebApplications/ConfiguringWebApplications.html). \n    * You need to introduce a special html link tag with rel `apple-touch-startup-image` to provide splash screen for your PWA to display when it\'s opened and in the background. You need to create a splash screen image for every resolution on [Apple\'s Launch Screen Guidelines](https://developer.apple.com/design/human-interface-guidelines/ios/icons-and-images/launch-screen/#static-launch-screen-images-not-recommended) and html tag with media attr for each image like `<link rel="apple-touch-startup-image" href="temp/apple-splash-2048-2732.png" media="(device-width: 1024px) and (device-height: 1366px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)">`. Unfortunately, this requirement is not documented on [Safari Web Content Guide](https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/ConfiguringWebApplications/ConfiguringWebApplications.html) sufficiently.\n    \nCreating icon and splash screen images for all the platforms, maintaining sizes and quality for all and adding html tags for each image can be overwhelming. So, why not automate it? \xf0\x9f\x92\xa1\n\n## Features\n\nPWA Asset Generator automates the image generation in a creative way. Having [Puppeteer](https://pptr.dev) in its core enables lots of possibilities. \n\n* Generates both icons and splash screens with optional `--icon-only` `--splash-only` `--landscape-only` and `--portrait-only` flags \xe2\x9c\xa8\n\n* Updates your `manifest.json` and `index.html` files automatically for declaring generated image assets \xf0\x9f\x99\x8c\n\n* Scrapes latest specs from Apple Human Interface guidelines website via Puppeteer to make your PWA ready for all/recent iOS devices out there \xf0\x9f\xa4\x96\n\n    * Supports offline mode and uses static spec data when things go wrong with scraping \xf0\x9f\x93\xb4\n\n* Uses Chrome browser as it\xe2\x80\x99s a canvas of your fav image editor. It uses a shell HTML on the fly as an artboard and centers your logo before taking screenshots for each resolution via Puppeteer \xf0\x9f\xa4\x96\n\n* You can provide your source in multiple formats; a local image file, a local HTML file, a remote image or HTML file \xf0\x9f\x99\x8c\n\n    * When it\xe2\x80\x99s an image source, it is centered over the background option you provide \xf0\x9f\x8c\x85\n    * When it\xe2\x80\x99s an HTML source, you can go as creative as you like; position your logo, use SVG filters, use variable fonts, use gradient backgrounds, use typography and etc. Your html file is rendered on Chrome before taking screenshots for each resolution \xf0\x9f\x8e\xa8\n    \n* It uses [puppeteer-core](https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md#puppeteer-vs-puppeteer-core) instead of puppeteer and only installs Chromium if it doesn\'t exist on the system. Saves waste of ~110-150mb of disk space and many seconds from the world per each user \xf0\x9f\x8c\x8e\xe2\x9a\xa1\xef\xb8\x8f\n\n* Supports dark mode splash screens on iOS! So, you can provide both light \xf0\x9f\x8c\x95 and dark \xf0\x9f\x8c\x9a splash screen images to differentiate your apps look & feel based on user preference \xf0\x9f\x8c\x99\n\n## Install\n\n```\n$ npm install --global pwa-asset-generator\n```\n\n## One-off execution\n\n```\n$ npx pwa-asset-generator\n```\n\nRead more about npx [here](https://blog.npmjs.org/post/162869356040/introducing-npx-an-npm-package-runner).\n\n## Usage\n\n```\n$ pwa-asset-generator --help\n\n  Usage\n    $ pwa-asset-generator [source] [output-folder]\n    \n    The assets will be saved to the folder where the command is executed if no output-folder provided.\n    \n  Options\n    -b --background             Page background to use when image source is provided: css value  [default: transparent]\n    -o --opaque                 Shows white as canvas background and generates images without transparency  [default: true]\n    -p --padding                Padding to use when image source provided: css value  [default: "10%"]\n    -s --scrape                 Scraping Apple Human Interface guidelines to fetch splash screen specs  [default: true]\n    -m --manifest               Web app manifest file path to automatically update manifest file with the generated icons\n    -i --index                  Index HTML file path to automatically put splash screen and icon meta tags in\n    -a --path                   Path prefix to prepend for href links generated for meta tags\n    -t --type                   Image type: png|jpeg  [default: png]\n    -q --quality                Image quality: 0...100 (Only for JPEG)  [default: 100]\n    -h --splash-only            Only generate splash screens  [default: false]\n    -c --icon-only              Only generate icons  [default: false]\n    -f --favicon                Generate favicon image and HTML meta tag  [default: false]\n    -l --landscape-only         Only generate landscape splash screens  [default: false]\n    -r --portrait-only          Only generate portrait splash screens  [default: false]\n    -d --dark-mode              Generate iOS splash screen meta with (prefers-color-scheme: dark) media attr  [default: false]\n    -u --single-quotes          Generate HTML meta tags with single quotes  [default: false]\n    -g --log                    Logs the steps of the library process  [default: true]\n    \n  Examples\n    $ pwa-asset-generator logo.html\n    $ pwa-asset-generator logo.svg -i ./index.html -m ./manifest.json\n    $ pwa-asset-generator https://your-cdn-server.com/assets/logo.png ./ -t jpeg -q 90 --splash-only --portrait-only\n    $ pwa-asset-generator logo.svg ./assets --scrape false --icon-only --path "%PUBLIC_URL%"\n    $ pwa-asset-generator logo.svg ./assets --icon-only --favicon --opaque false\n    $ pwa-asset-generator logo.svg ./assets --dark-mode --background dimgrey --splash-only --type jpeg --quality 80\n    $ pwa-asset-generator logo.svg ./assets --padding "calc(50vh - 5%) calc(50vw - 10%)"\n    $ pwa-asset-generator https://raw.githubusercontent.com/onderceylan/pwa-asset-generator/HEAD/static/logo.png ./temp -p "15%" -b "linear-gradient(to right, #fa709a 0%, #fee140 100%)"\n\n  Flag examples\n    --background "rgba(255, 255, 255, .5)"\n    --opaque false\n    --padding "10px"\n    --scrape false\n    --manifest ./src/manifest.json\n    --index ./src/index.html\n    --path "%PUBLIC_URL%"\n    --type jpeg\n    --quality 80\n    --splash-only\n    --icon-only\n    --favicon\n    --landscape-only\n    --portrait-only\n    --dark-mode\n    --single-quotes\n    --log false\n```\n\n### Module\n\n```javascript\nconst pwaAssetGenerator = require(\'pwa-asset-generator\');\n\n(async () => {\n  const { savedImages, htmlMeta, manifestJsonContent } = await pwaAssetGenerator.generateImages(\n    \'https://raw.githubusercontent.com/onderceylan/pwa-asset-generator/HEAD/static/logo.png\',\n    \'./temp\',\n    {\n      scrape: false,\n      background: "linear-gradient(to right, #fa709a 0%, #fee140 100%)",\n      splashOnly: true,\n      portraitOnly: true,\n      log: false\n    });\n})();\n```\n\n## FAQ\n\n### How to make an image smaller or larger relative to the background?\nThe default value for the padding surrounding the image is 10%. But it\'s just a css padding value that you can configure and override yourself with **-p --padding** option.\n\n1. You can use a more advanced padding value based on your taste and goal;\n\n    **Larger logo:** `--padding "calc(50vh - 20%) calc(50vw - 40%)"`\n\n    **Smaller logo:** `--padding "calc(50vh - 5%) calc(50vw - 10%)"`\n\n2. You can create your own html input file which uses css media queries and provides different padding options based on breakpoints: https://material.io/design/layout/responsive-layout-grid.html#breakpoints\n\n### How can I generate a PNG image with transparency?\nAlthough default background color is **transparent**, there\'s another option that you need to use to generate transparent images: **opaque**.\n\nYou need to run your CLI command with `--opaque false` option in order to get the transparency; `pwa-asset-generator logo.svg --opaque false`.\n\nThis might be confusing for some but it\'s necessary to support the use of background values with alpha channels.\n\n## Troubleshooting\n\n### "No usable sandbox!" error on Linux\nIn case of getting "No usable sandbox!" error on Linux, you need to enable [system sandboxing](https://github.com/GoogleChrome/puppeteer/blob/master/docs/troubleshooting.md#setting-up-chrome-linux-sandbox).\n\n### Process could not be terminated error on Windows\nWhen Chrome launcher is used with puppeteer-core, chrome-launcher sometime throws the following error after browser instance is killed.\n```\nERROR: The process with PID 12345 (child process of PID 1234) could not be terminated.\nReason: There is no running instance of the task.\n``` \nThis is a [known bug](https://github.com/GoogleChrome/chrome-launcher/issues/178) on chrome-launcher and for now you can just ignore it.\n'