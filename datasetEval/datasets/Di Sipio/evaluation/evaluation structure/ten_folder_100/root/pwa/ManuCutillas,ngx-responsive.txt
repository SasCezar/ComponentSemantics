b'![ngx-responsive](/img/ng2-responsive-0-4-0-thin.jpg?raw=true)\n\n# Introduction\nSuperset of **RESPONSIVE DIRECTIVES** to show or hide items according to the size of the device screen and another features in Angular 8.\n\n```\n  npm i ngx-responsive --save\n```\n\n### If you use Angular 7 in your project.\n\n```\n  npm i ngx-responsive@7.0.1 --save\n```\n\n### If you use Angular 6 in your project.\n\n```\n  npm i ngx-responsive@6.0.0 --save\n```\n\n### If you use Angular 5 in your project.\n\n```\n  npm i ngx-responsive@5.0.8 --save\n```\n\n-  Branch : [ngx-responsive@5.0.8](https://github.com/ManuCutillas/ngx-responsive/tree/v5.0.8)\n\n### If you use Angular 4 in your project use ng2-responsive.\n\n```\n  npm i ng2-responsive --save\n```\n\n-  Branch : [ng2-responsive](https://github.com/ManuCutillas/ngx-responsive/tree/v4.0.1)\n \n\n`RESPONSIVE_DIRECTIVES` provides the following features:\n - Directives detecting states according to standard measures in BOOTSTRAP: xs / sm / md / lg / xl\n - Directives that detect four states according to the real type of device: mobile / tablet / desktop / smartTv\n - Custom sizes detector.\n - Show and hide options.\n - Custom breaking points.\n - Debounce checking interval (default 100ms).\n - Browsers Detect: Chrome / Safari / Firefox / IE / Opera\n - Internet Explorer Versions Detect : IE 9 / IE 10 / IE 11 / IE +12\n - New standard devices: iPhone, iPad, Android Mobile, Android Tablet, Windows Phone.\n - Device orientation detect: portrait, landscape.\n - Directives Info: DeviceInfo, OrientationInfo, ResponsiveSizeInfo, DeviceStandardInfo, BrowserInfo, IeInfo.\n - Directive: responsive - Detection of multiple functions at once.\n - Feature Responsive Directive - Boolean Events Emitter on change state:\n - Feature responsive-window : Capture the size of the parent element to show or hide fill elements. If the parent responsive size is x show or hide.\n - UserAgent information directive: Get te device, browser, os version and more from the user agent navigator in one event object.\n - **New Feature :** Reactive services that expose changes through observables:\n    - BrowserInfoRx\n    - IeInfoRx\n    - DeviceInfoRx\n    - DeviceStandardInfoRx\n    - OrientationInfoRx\n    - ResponsiveSizeInfoRx\n    - UserAgentInfoRx\n \n# How to start\n \n1. installing the package via npm \n     ```\n     npm i ngx-responsive --save\n     ```\n2. bootstrap the service\n\n   * with default breaking points\n   \n    ```\n    import { NgModule } from \'@angular/core\'\n    import { ResponsiveModule } from \'ngx-responsive\'\n    ...\n    @NgModule({\n        imports: [\n          ResponsiveModule.forRoot()\n        ],\n        declarations: [\n          AppComponent\n        ],\n        providers:[]\n    })\n    export class AppModule { }\n    ```\n\n    * with custom Configuration\n      \n    ```\n     import { NgModule } from \'@angular/core\'\n     import { ResponsiveModule } from \'ngx-responsive\'\n     ...\n     const config = {\n        breakPoints: {\n            xs: {max: 600},\n            sm: {min: 601, max: 959},\n            md: {min: 960, max: 1279},\n            lg: {min: 1280, max: 1919},\n            xl: {min: 1920}\n        },\n        debounceTime: 100\n      };\n     ...\n    @NgModule({\n        imports: [\n          BrowserModule,\n          ResponsiveModule.forRoot(config)\n        ],\n        declarations: [\n          AppComponent\n        ],\n        providers:[]\n    })\n    export class AppModule { }\n    ```\n\n 3.DIRECTIVES:\n\n      * In your component to import the RESPONSIVE_DIRECTIVES only need import: \n      \n      ```\n      @Component({\n         selector: \'my-component\',\n         template: \'\n              <p *showItStandard="[\'iphone\',\'ipad\']">I\'ll show you if I\'m a iPhone or ipad device.</p>\n              <p *isIphone>I\'ll show you if I\'m a iPhone device.</p>\n              <p *isChrome>I\'ll show you if I\'m a chrome browser.</p>\n              <p *xl>I\'ll show you if I\'m a xl screen size.</p>\n              <p *lg>I\'ll show you if I\'m a lg screen size.</p>\n              <p *md>I\'ll show you if I\'m a md screen size.</p>\n              <p *sm>I\'ll show you if I\'m a sm screen size.</p>\n              <p *xs>I\'ll show you if I\'m a xs screen size.</p>\n         \'\n       })\n      ```\n \n4. ALL RESPONSIVE DIRECTIVES OPTIONS \n\n      * Responsive Window directive: Capture the size of the parent element to show or hide fill elements. If the parent responsive size is x show or hide.\n        1. First syntax\n        \n           Define a named parrent element, the reference is stored on the service and available outside of the current container. Name must be unique to avoid conflicts \n              ```\n               <div [responsive-window]="\'parent\'">\n                   <p *responsive="{ sizes:{  window: \'parent\', min:900, max:1400} }"></p>\n               </div>\n              ```\n        2. Second syntax\n\n            Define a reference to the parent element\n              ```\n               <div responsive-window #myContainerRef="container">\n                   <p *responsive="{ sizes: { min:900, max:1400 } } ; container:myContainerRef">...</p>\n               </div>\n              ```\n               Or:\n              ```\n               <div responsive-window #myContainerRef="container">\n\t\t            <ng-template [responsive]="{ sizes:{ min:900, max:1400 } }" [responsiveContainer]="myContainerRef">\n                        <p>....</p>\n                    </ng-template>\n               </div>\n              ```\n    \n    1. * New Detection of multiple functions at once.\n    \n        ```\n           All combinations = *responsive="{\n                                bootstrap: [\'xl\',\'lg\',\'md\',\'sm\',\'xs\'],\n                                browser: [\'chrome\',\'firefox\',\'ie\',\'safari\', \'opera\'],\n                                ie:[\'ie 9\',\'ie 10\',\'ie 11\',\'ie +12\'],\n                                pixelratio:[\'1x\',\'retina\',\'4k\'],\n                                standard:[\'iphone\',\'ipad\',\'android mobile\',\'android tablet\',\'windows phone\'],\n                                orientation:[\'landscape\',\'portrait\'],\n                                device: [\'mobile\',\'tablet\',\'smarttv\',\'desktop\'],\n                                sizes:{min:900,max:1400}\n                              }"\n        ```\n          \n      *Example in component\n          \n         ```\n          @Component({\n           selector: \'my-component\',\n           template: \'\n                 <p  *responsive="{\n                                 bootstrap: \'lg\',\n                                 browser: [\'chrome\',\'firefox\'],\n                                 pixelratio:\'1x\',\n                                 orientation:\'landscape\',\n                                 device: \'desktop\',\n                                 sizes:{min:900,max:1400}\n                   }">I\'ll show you if all the options are true.</p>\n\n                    <template  [responsive]="{\n                                 bootstrap: \'lg\',\n                                 browser: [\'chrome\',\'firefox\'],\n                                 pixelratio:\'1x\',\n                                 orientation:\'landscape\',\n                                 device: \'desktop\',\n                                 sizes:{min:900,max:1400}\n                   }" (changes)="miMethod($event)">I\'ll show you if all the options are true & listen events changes.</template>\n                   \n            \'\n           })\n        ```\n   2. One function detect\n       * With Bootstrap Screen sizes\n   \n        ```\n          @Component({\n            selector: \'my-component\',\n            template: \'\n                <p *xl>I\'ll show you if I\'m a xl screen size.</p>\n                <p *lg>I\'ll show you if I\'m a lg screen size.</p>\n                <p *md>I\'ll show you if I\'m a md screen size.</p>\n                <p *sm>I\'ll show you if I\'m a sm screen size.</p>\n                <p *xs>I\'ll show you if I\'m a xs screen size.</p>\n                \'\n            })\n        ```\n   \n      * With multiple combinations of bootstrap screen sizes and show / hide options\n          - Strings Multiple combinations = "[\'xs\',\'sm\',\'md\',\'lg\',\'xl\']"\n\n        ```\n        @Component({\n            selector: \'my-component\',\n            template: \'\n                <p *showItBootstrap="[\'md\',\'xs\']">I\'ll show you only in md and xs screen sizes.</p>\n                <p *hideItBootstrap="[\'lg\',\'sm\']">I\'ll hide you only in lg and sm screen sizes.</p>\'\n        })\n        ```\n   \n        * With Devices Screen sizes\n  \n        ```\n        @Component({\n               selector: \'my-component\',\n               template: \'\n               <p *isSmartTv>I\'ll show you if I\'m a smartTv device.</p>\n               <p *isDesktop>I\'ll show you if I\'m a desktop device.</p>\n               <p *isTablet>I\'ll show you if I\'m a tablet device.</p>\n               <p *isMobile>I\'ll show you if I\'m a mobile device.</p>\n               \'\n            })\n        ```\n     \n        * With multiple devices detect combinations: show / hide options.\n          - Strings Multiple combinations = "[\'mobile\',\'tablet\',\'smarttv\',\'desktop\']"\n        ```\n        @Component({\n             selector: \'my-component\',\n             template: \'\n               <p *showItDevice="[\'mobile\',\'tablet\']">I\'ll show you if I\'m a tablet or a mobile device.</p>\n               <p *hideItDevice="[\'mobile\',\'tablet\',\'desktop\']">I\'ll hide you if I\'m a desktop / tablet or mobile device.</p>\'\n        })\n        ```\n      \n        * With Standard Devices detect\n    \n        ```\n           @Component({\n              selector: \'my-component\',\n              template: \'\n                  <p *isIphone>I\'ll show you if I\'m a iPhone device.</p>\n                  <p *isIpad>I\'ll show you if I\'m a iPad device.</p>\n                  <p *isAndroidMobile>I\'ll show you if I\'m a android mobile device.</p>\n                  <p *isAndroidTablet>I\'ll show you if I\'m a android tablet device.</p>\n                  <p *isWindowsPhone>I\'ll show you if I\'m a windows phone mobile device.</p>\'\n            })\n        ```\n     \n        * With multiple devices detect combinations: show / hide options.\n          - Strings Multiple combinations = "[\'iphone\',\'ipad\',\'android mobile\',\'android tablet\',\'windows phone\']"\n      \n        ```\n        @Component({\n             selector: \'my-component\',\n             template: \'\n                <p *showItStandard="[\'android mobile\',\'windows phone\']">I\'ll show you if I\'m a android mobile or a windows phone device.</p>\n                <p *hideItStandard="[\'iphone\',\'ipad\']">I\'ll hide you if I\'m a iPad or a iPhone device.</p>\'\n        })\n        ```\n      \n        * With orientation device\n        ```\n        @Component({\n            selector: \'my-component\',\n            template: \'\n               <p *isPortrait>I\'ll show you if I\'m a portrait state.</p>\n               <p *isLandscape>I\'ll show you if I\'m a landscape state.</p>\n            \'\n        })\n        ```\n      \n        * With custom sizes and show / hide options\n \n        ```\n        @Component({\n             selector: \'my-component\',\n             template: \'\n                <p *showItSizes="{min:955,max:1057}">I\'ll show you if responsive-window width is between the min and max.</p>\n                <p *showItSizes="{min:750}">I\'ll show you if responsive-window width is greater than or equal to min.</p>\n                <p *hideItSizes="{min:360,max:768}">It is hidden if responsive-window width between the min and max.</p>\n             \'\n        })\n        ```\n\n        responsive-window being window by default or any element set using the Responsive Window directive.\n     \n        * With browser detection.\n      \n        ```\n        @Component({\n            selector: \'my-component\',\n            template: \'\n               <p *isChrome>I\'ll show you if I\'m a Chrome Browser.</p>\n               <p *isFirefox>I\'ll show you if I\'m a Firefox Browser.</p>\n               <p *isSafari>I\'ll show you if I\'m a Safari Browser.</p>\n               <p *isOpera>I\'ll show you if I\'m a Opera Browser.</p>\n               <p *isIE>I\'ll show you if I\'m a Internet Explorer Browser.</p>\n            \'\n        })\n        ```\n        * With multiple browsers detect combinations: show / hide options.\n          - Strings Multiple combinations = "[\'chrome\',\'firefox\',\'ie\',\'safari\', \'opera\']"\n        ```\n        @Component({\n           selector: \'my-component\',\n           template: \'\n             <p *showItBrowser="[\'ie\',\'opera\']">I\'ll show you if I\'m a IE or Opera Browser.</p>\n             <p *hideItBrowser="[\'chrome\',\'firefox\',\'safari\']">I\'ll hide you if I\'m a Chrome, Firefox or Safari Browser.</p>\'\n        })\n        ```\n        * With Internet Explorer Version detection.\n      \n        ```\n        @Component({\n           selector: \'my-component\',\n           template: \'\n              <p *isIE9>I\'ll show you if I\'m a Internet Explorer 9.</p>\n              <p *isIE10>I\'ll show you if I\'m a Internet Explorer 10.</p>\n              <p *isIE11>I\'ll show you if I\'m a Internet Explorer 11.</p>\n              <p *isIE12>I\'ll show you if I\'m a Internet Explorer 12.</p>\'\n        })\n        ```\n      \n        * With multiple Internet Explorer version detect: show / hide options.\n          - Strings Multiple combinations = "[\'ie 9\',\'ie 10\',\'ie 11\',\'ie +12\']"\n        ```\n        @Component({\n           selector: \'my-component\',\n           template: \'\n             <p *showIEVersion="[\'ie 11\',\'ie +12\']">I\'ll show you if I\'m a IE 11 browser or IE 12</p>\n             <p *hideIEVersion="[\'ie 9\',\'ie 10\']">I\'ll hide you if I\'m IE 9 browser or IE 10.</p>\n            \'\n        })\n        ```\n\n        * Get the userAgent info directive:\n        - Get the device, browser, os version and more from the user agent navigator in one event object. \n\n         ```\n           <user-agent-info (info)="thisUserAgent($event)"></user-agent-info>\n         ```\n      \n5. FORMAT OF USER AGENT INFO OBJECT\n\n\nDescription of the object given by the `(info)` event of the directive `user-agent-info` \n(usage: `<user-agent-info (info)="thisUserAgent($event)"></user-agent-info>`).\n\n```\n{\n  device: \'mobile\' | \'tablet\' | \'smarttv\' | \'desktop\',\n  browser: \'chrome\' | \'firefox\' | \'ie\' | \'safari\' | \'opera\' | \'silk\' | \'yandex\' | \'NA\',\n  pixelratio:  \'4k\' | \'retina\' | \'1x\',\n  ie_version: {\n      name: \'ie 7\' | \'ie 8\' | \'ie 9\' | \'ie 10\' | \'ie 11\' | \'ie +12\',\n      state: true | false\n  },\n  game_device: {\n      name:  \'Playstation 4\' | \'Playstation 3\' | \'Xbox one\' | \'Xbox\' | \'Wii\' | \'Wii U\' | \'Nintendo 3DS\' | \'Playstation Vita\' | \'PSP\'\n      state: true | false\n  },\n  smart_tv: {\n      name:  \'Chromecast\' | \'Apple tv\' | \'Google tv\' | \'Xbox One\' | \'Playstation 4\' | \'Generic smartv\'\n      state: true | false\n  },\n  desktop: {\n      name:  \'Windows\' | \'Mac\' | \'Linux\',\n      state: true | false\n  },\n  tablet: {\n      name:  \'Ipad\' | \'Android\' | \'Kindle\' | \'Generic Tablet\',\n      state: true | false\n  },\n  mobile: {\n      name:  \'Iphone\' | \'Android\' |  \'Windows Phone\' | \'Blackberry\' | \'Generic Mobile\'\n      state: true | false\n  },\n  window_os: {\n      name:  \'Windows XP\' | \'Windows Vista\' | \'Windows 7\' | \'Windows 8\' | \'Windows 10\' | \'Generic Windows\'\n      state: true | false\n  },\n  linux_os: {\n      name:  \'Debian\' | \'Knoppix\' | \'Mint\' | \'Ubuntu\' | \'Kubuntu\' | \'Xubuntu\' | \'Lubuntu\' | \'Fedora\' | \'Red hat\' | \'Mandriva\' | \'Gentoo\' | \'Sabayon\' | \'Slackware\' | \'Suse\' | \'CentOS\' | \'Backtrack\' | \'Generic Linux\',\n      state: true | false\n  },\n  bot: true | false\n}\n```\n\n# NEXT STEPS \n- Unit test and e2e.\n- Create a documentation page.\n- Work in demo page\n- Directive css classes:\n```\n<h1 *responsive-css="{\n         bootstrap: {xl: "micssclassxl", lg:"micssclasslg"},\n         orientation:{landscape:"micssclasslandscape"}\n        }"></h1>\n\n```\n- animations show/hide in directives\n\n# Contributors\n * Manu Cutillas \n * Christophe HOARAU\n * Kamil Bregu\xc5\x82a\n * Janne Julkunen\n * phransyz\n * Michael Burger\n * Alyssa Brunswick\n * Quentin\n * Thomas Christensen\n\n# License\n\n[![MIT license](http://img.shields.io/badge/license-MIT-brightgreen.svg)](http://opensource.org/licenses/MIT)\n\n\n\n\n'