b'image glitch experiment\n===\n\nthis is an experiment for the web browser. it corrupts jpg images so that they appear "glitched".\n\n[![glitch experiment screen shot](images/screenshot.png)](http://snorpey.github.io/jpg-glitch/)\n\n[online demo](http://snorpey.github.io/jpg-glitch/)\n\nthis experiment is very much based on the [smack my glitch up js](https://github.com/Hugosslade/smackmyglitchupjs) script.\n\na desktop app of the jpg-glitcher is also available. you can download it [here](https://snorpey.github.io/jpg-glitch-electron/).\n\nglitch effect code\n---\nif you\'re a developer and just interested in the code for the glitch effect, there\'s a separate repository for that: [glitch-canvas](https://github.com/snorpey/glitch-canvas).\n\nthird party code used in this experiment\n---\n* [localforage](https://github.com/mozilla/localForage) by [mozilla](https://github.com/mozilla), Apache License 2.0\n* [requirejs](http://requirejs.org/), by [jrburke](https://github.com/jrburke), BSD & MIT license\n* [almond](https://github.com/jrburke/almond), by [jrburke](https://github.com/jrburke), BSD & MIT license\n* [javascript-md5](https://blueimp.github.io/JavaScript-MD5/), by [blueimp](https://github.com/blueimp), MIT license\n* [reqwest](https://github.com/ded/reqwest/), by [ded](https://github.com/ded), MIT license\n* [glitch-canvas](https://github.com/snorpey/glitch-canvas/), by [snorpey](https://github.com/snorpey), MIT license\n* [material design icons](https://github.com/Templarian/MaterialDesign), by [templarian](https://github.com/templarian), Open Font License 1.1\n\nlicense\n---\n[MIT License](LICENSE)\n\ndevelopment\n---\nif you\'re interested in adding features, fixing bugs the code, or running the tool on your own server, here are some pointers to help you get familar with the code base.\n\nif you have questions about the code, don\'t hesitate to open an [issue](issues) or send me an email.\n\n* ``config.js``: all defaults and settings are in here\n* ``glitcher.js`` the main app starting point. all events are hooked up in here.\n* the app does not use any big dom libraries or app frameworks (like jquery, angular or react)\n* where possible, the app uses webworkers for complex tasks\n* all strings that are displayed to the user are located in the ``lang/`` folder. for each language, a different file is created.\n* the app uses a serviceworker to make it available offline in [browsers](http://caniuse.com/#feat=serviceworkers) that support it\n* the app was built without any preprocessors in mind. using the [build script](#build-script) is entirely optional and not required to get the app to work.\n\nbuild script\n---\nthe build script takes care of concatenating and minifying all scripts and styles. it uses [gruntjs](http://gruntjs.com/).\n\nplease make sure that both [nodejs](http://nodejs.org/) and [npm](http://npmjs.com) are set up properly] on your machine.\n\nrun ```npm install``` to install the dependencies of the build script.\n\nto build, run ```npm run build``` the optimized files will get copied to the ```production/``` folder.\n\nmissing something?\n---\n\nfound a bug? missing a feature? instructions unclear? are you using this tool in an interesting project? maybe have a look at the [issues](../../issues), open a pull request and let me know. thanks!\n\nmost importantly\n---\n\nthank you for taking a look at this repo. have a great day :)\n\n'