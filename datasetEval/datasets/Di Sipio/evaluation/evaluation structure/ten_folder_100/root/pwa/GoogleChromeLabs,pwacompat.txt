b'[![Build Status](https://travis-ci.org/GoogleChromeLabs/pwacompat.svg?branch=master)](https://travis-ci.org/GoogleChromeLabs/pwacompat)\n\nPWACompat is a library that brings the [Web App Manifest](https://developers.google.com/web/fundamentals/web-app-manifest/) to non-compliant browsers for better [Progressive Web Apps](https://en.wikipedia.org/wiki/Progressive_Web_Apps).\nThis includes creating splash screens for Mobile Safari, and supporting IE/Edge\'s Pinned Sites feature.\n\nSo, if you\'ve created a `manifest.webmanifest` but want to have wide support everywhere else\xe2\x80\x94through legacy HTML tags for icons and theming\xe2\x80\x94look no further.\nJust include the minified script `pwacompat.min.js` (or [bundle/serve it yourself](https://npmjs.com/package/pwacompat)) in your page:\n\n```html\n<link rel="manifest" href="manifest.webmanifest" />\n<script async src="https://cdn.jsdelivr.net/npm/pwacompat@2.0.10/pwacompat.min.js"\n    integrity="sha384-I1iiXcTSM6j2xczpDckV+qhhbqiip6FyD6R5CpuqNaWXvyDUvXN5ZhIiyLQ7uuTh"\n    crossorigin="anonymous"></script>\n```\n\nAnd you\'re done! \xf0\x9f\x8e\x89\xf0\x9f\x93\x84\n\nFor more on the Web App Manifest, read \xf0\x9f\x93\x96 [how to add a Web App Manifest and mobile-proof your site](https://medium.com/dev-channel/how-to-add-a-web-app-manifest-and-mobile-proof-your-site-450e6e485638), watch \xf0\x9f\x93\xb9 [theming as part of The Standard](https://www.youtube.com/watch?v=5fEMTxpA6BA), or check out \xf0\x9f\x93\xac [the Web Fundamentals post on PWACompat](https://developers.google.com/web/updates/2018/07/pwacompat).\n\n<p align="center">\n  <img src="https://storage.googleapis.com/hwhistlr.appspot.com/pwacompat-explainer.png" height="256" alt="PWACompat explainer" /><br />\n  <small><em>PWACompat takes your regular manifest and enhances other browsers</em></small>\n</p>\n\n# Best Practice &amp; Caveats\n\nWhile PWACompat can generate most icons, meta tags etc that your PWA might need, it\'s best practice to include at least one `<link rel="icon" ... />`.\nThis is standardized and older browsers, along with search engines, may use it from your page to display an icon.\nFor example:\n\n```html\n<link rel="manifest" href="manifest.webmanifest" />\n<script async src="path/to/pwacompat.min.js"></script>\n<!-- include icon also from manifest -->\n<link rel="icon" type="image/png" href="res/icon-128.png" sizes="128x128" />\n```\n\nIf you\'re looking for the best load performance, you can also defer loading PWACompat until after your site has loaded.\nThis is the approach taken in [Emojityper](https://github.com/emojityper/emojityper/blob/master/src/loader.js#L8).\n\n## iOS\n\nPWACompat looks for a viewport tag which includes `viewport-fit=cover`, such as `<meta name="viewport" content="viewport-fit=cover">`.\nIf this tag is detected, PWACompat will generate a meta tag that makes your PWA load in fullscreen mode\xe2\x80\x94this is particularly useful for devices with a notch.\n\n### Old Versions\n\nPrior [to iOS 12.2](https://twitter.com/mhartington/status/1089293403089784832), Mobile Safari opens external sites in the regular browser, meaning that flows like Oauth won\'t complete correctly.\nThis [isn\'t a problem with PWACompat](https://github.com/GoogleChromeLabs/pwacompat/issues/15), but is an issue with PWAs on iOS generally.\n\nPrior to [iOS 11.3](https://medium.com/@firt/pwas-are-coming-to-ios-11-3-cupertino-we-have-a-problem-2ff49fd7d6ea), Mobile Safari would not respect the `start_url` paramater inside the manifest.\nIf you want to emulate this behavior (and redirect the user to the start page), then you could detect `navigator.standalone` (indicating that your site is loaded in PWA mode) and set a flag in `window.sessionStorage`.\nIf the flag is not yet set, then you should redirect to your site\'s start URL.\n\n## Session Storage\n\nPWACompat uses `window.sessionStorage` to cache your site\'s manifest (and on iOS, any updated icons and generated splash screens).\nThis expires after a user navigates away from your page or closes their tab.\n\n# Details\n\nWhat does PWACompat actually do?\nIf you provide a Web App Manifest, PWACompat will update your page and:\n\n* Create meta icon tags for all icons in the manifest (e.g., for a favicon, older browsers)\n* Create fallback meta tags for various browsers (e.g., iOS, WebKit/Chromium forks etc) describing how a PWA should open\n* Sets [the theme color](https://developers.google.com/web/updates/2014/11/Support-for-theme-color-in-Chrome-39-for-Android) based on the manifest\n\nFor Safari, PWACompat also:\n\n* Sets `apple-mobile-web-app-capable` (opening without a browser chrome) for display modes `standalone`, `fullscreen` or `minimal-ui`\n* Creates `apple-touch-icon` images, adding the manifest background to transparent icons: otherwise, iOS renders transparency as black\n* Creates dynamic splash images, closely matching the splash images generated [for Chromium-based browsers](https://cs.chromium.org/chromium/src/chrome/android/java/src/org/chromium/chrome/browser/webapps/WebappSplashScreenController.java?type=cs&q=webappsplash&sq=package:chromium&g=0&l=70)\n\nFor IE and Edge:\n\n* Adds meta tags for the [Pinned Sites](https://blogs.msdn.microsoft.com/jennifer/2011/04/20/ie-pinned-sites-part-1-what-are-pinned-sites/) feature\n\nFor PWAs on Windows with access to UWP APIs:\n\n* Sets the titlebar color\n\nDo you think PWACompat should support backfilling more HTML tags needed for older browsers?\n[Let us know!](https://github.com/GoogleChromeLabs/pwacompat/issues)\n\n## Demo\n\nFor a demo, try adding [Emojityper](https://emojityper.com/) or [the demo site](https://googlechromelabs.github.io/pwacompat/test/) to an iOS home screen (to see splash screens and icons).\nYou can also install Emojityper from the [Microsoft Store](https://www.microsoft.com/p/emojityper/9np2xx3sxmct) (where the titlebar color is automatically set the manifest\'s `theme_color`).\n\n## Support\n\nThis is supported in most modern browsers (UC Browser, Safari, Firefox, Chrome, IE10+), and fails silenty when unsupported.\nMobile Safari benefits the most from PWACompat, as generating [a large number of splash screens](https://google.com/search?q=ios%20webapp%20splash%20screens) manually is a complex task.\n\n# Web App Manifest\n\nYour Web App Manifest is:\n\n* normally named `manifest.webmanifest` (although some folks name it `manifest.json`)\n* referenced from all pages on your site like `<link rel="manifest" href="path/to/manifest.webmanifest" />`\n* and should look a bit like this:\n\n```js\n{\n  "name": "Always Be Progressive",\n  "short_name": "Progressive!",\n  "display": "browser",\n  "start_url": "/",\n  "background_color": "#102a48",\n  "icons": [\n    {\n      "src": "res/icon-256.png",\n      "sizes": "256x256"\n    },\n    {\n      "src": "res/icon-128.png",\n      "sizes": "128x128"\n    }\n  ]\n}\n```\n\nFor more information on the Web App Manifest, and how e.g., modern browsers will prompt engaged users to install your site to their home screen, check out [Web Fundamentals](https://developers.google.com/web/fundamentals/web-app-manifest/).\nThere\'s also a number of [online generators](https://www.google.com/search?q=web+app+manifest+generator).\n\n# Release\n\nCompile code with [Closure Compiler](https://closure-compiler.appspot.com/home).\n\n```\n// ==ClosureCompiler==\n// @compilation_level ADVANCED_OPTIMIZATIONS\n// @output_file_name pwacompat.min.js\n// ==/ClosureCompiler==\n\n// code here\n```\n'