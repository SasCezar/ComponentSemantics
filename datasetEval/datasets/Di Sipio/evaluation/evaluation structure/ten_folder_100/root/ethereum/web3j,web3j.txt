b'.. To build this file locally ensure docutils Python package is installed and run:\n   $ rst2html.py README.rst README.html\n\nweb3j: Web3 Java Ethereum \xc3\x90app API\n==================================\n\n.. image:: https://readthedocs.org/projects/web3j/badge/?version=latest\n   :target: http://docs.web3j.io\n   :alt: Documentation Status\n\n.. image:: https://travis-ci.org/web3j/web3j.svg?branch=master\n   :target: https://travis-ci.org/web3j/web3j\n   :alt: Build Status\n\n.. image:: https://codecov.io/gh/web3j/web3j/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/web3j/web3j\n   :alt: codecov\n\n.. image:: https://badges.gitter.im/web3j/web3j.svg\n   :target: https://gitter.im/web3j/web3j?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge\n   :alt: Join the chat at https://gitter.im/web3j/web3j\n\nweb3j is a lightweight, highly modular, reactive, type safe Java and Android library for working with\nSmart Contracts and integrating with clients (nodes) on the Ethereum network:\n\n.. image:: https://raw.githubusercontent.com/web3j/web3j/master/docs/img/web3j_network.png\n\nThis allows you to work with the `Ethereum <https://www.ethereum.org/>`_ blockchain, without the\nadditional overhead of having to write your own integration code for the platform.\n\nThe `Java and the Blockchain <https://www.youtube.com/watch?v=ea3miXs_P6Y>`_ talk provides an\noverview of blockchain, Ethereum and web3j.\n\nFeatures\n--------\n\n- Complete implementation of Ethereum\'s `JSON-RPC <https://github.com/ethereum/wiki/wiki/JSON-RPC>`_\n  client API over HTTP and IPC\n- Ethereum wallet support\n- Auto-generation of Java smart contract wrappers to create, deploy, transact with and call smart\n  contracts from native Java code\n  (`Solidity <http://solidity.readthedocs.io/en/latest/using-the-compiler.html#using-the-commandline-compiler>`_\n  and\n  `Truffle <https://github.com/trufflesuite/truffle-contract-schema>`_ definition formats supported)\n- Reactive-functional API for working with filters\n- `Ethereum Name Service (ENS) <https://ens.domains/>`_ support\n- Support for Parity\'s\n  `Personal <https://github.com/paritytech/parity/wiki/JSONRPC-personal-module>`__, and Geth\'s\n  `Personal <https://github.com/ethereum/go-ethereum/wiki/Management-APIs#personal>`__ client APIs\n- Support for `Infura <https://infura.io/>`_, so you don\'t have to run an Ethereum client yourself\n- Comprehensive integration tests demonstrating a number of the above scenarios\n- Command line tools\n- Android compatible\n- Support for JP Morgan\'s Quorum via `web3j-quorum <https://github.com/web3j/quorum>`_\n- Support for `EEA Privacy features as described in EEA documentation <https://entethalliance.org/technical-documents/>`_\n  and implemented in `Hyperledger Besu <https://besu.hyperledger.org/en/latest/Reference/API-Methods/#eea-methods>`_.\n\n\nIt has five runtime dependencies:\n\n- `RxJava <https://github.com/ReactiveX/RxJava>`_ for its reactive-functional API\n- `OKHttp <https://hc.apache.org/httpcomponents-client-ga/index.html>`_ for HTTP connections\n- `Jackson Core <https://github.com/FasterXML/jackson-core>`_ for fast JSON\n  serialisation/deserialisation\n- `Bouncy Castle <https://www.bouncycastle.org/>`_\n  (`Spongy Castle <https://rtyley.github.io/spongycastle/>`_ on Android) for crypto\n- `Jnr-unixsocket <https://github.com/jnr/jnr-unixsocket>`_ for \\*nix IPC (not available on\n  Android)\n\nIt also uses `JavaPoet <https://github.com/square/javapoet>`_ for generating smart contract\nwrappers.\n\nFull project documentation is available at\n`docs.web3j.io <http://docs.web3j.io>`_.\n\n\nDonate\n------\n\nYou can help fund the development of web3j by donating to the following wallet addresses:\n\n+----------+--------------------------------------------+\n| Ethereum | 0x2dfBf35bb7c3c0A466A6C48BEBf3eF7576d3C420 |\n+----------+--------------------------------------------+\n| Bitcoin  | 1DfUeRWUy4VjekPmmZUNqCjcJBMwsyp61G         |\n+----------+--------------------------------------------+\n\n\nCommercial support and training\n-------------------------------\n\nCommercial support and training is available from `web3labs.com <https://www.web3labs.com/>`_.\n\n\nQuickstart\n----------\n\nInstall the Web3j binary.\n\nTo get the latest version on Mac OS or Linux, type the following in your terminal:\n\n.. code-block:: bash\n\n   curl -L https://get.web3j.io | sh\n\nThen follow the on-screen instructions or head `here <https://docs.web3j.io/command_line_tools/>`_. \n\nAlternatively, a `web3j sample project <https://github.com/web3j/sample-project-gradle>`_ is available that\ndemonstrates a number of core features of Ethereum with web3j, including:\n\n- Connecting to a node on the Ethereum network\n- Loading an Ethereum wallet file\n- Sending Ether from one address to another\n- Deploying a smart contract to the network\n- Reading a value from the deployed smart contract\n- Updating a value in the deployed smart contract\n- Viewing an event logged by the smart contract\n\n\nGetting started\n---------------\n\nTypically your application should depend on release versions of web3j, but you may also use snapshot dependencies\nfor early access to features and fixes, refer to the  `Snapshot Dependencies`_ section.\n\n| Add the relevant dependency to your project:\n\nMaven\n-----\n\nJava 8:\n\n.. code-block:: xml\n\n   <dependency>\n     <groupId>org.web3j</groupId>\n     <artifactId>core</artifactId>\n     <version>4.5.5</version>\n   </dependency>\n\nAndroid:\n\n.. code-block:: xml\n\n   <dependency>\n     <groupId>org.web3j</groupId>\n     <artifactId>core</artifactId>\n     <version>4.2.0-android</version>\n   </dependency>\n\n\nGradle\n------\n\nJava 8:\n\n.. code-block:: groovy\n\n   compile (\'org.web3j:core:4.5.5\')\n\nAndroid:\n\n.. code-block:: groovy\n\n   compile (\'org.web3j:core:4.2.0-android\')\n\nPlugins\n-------\nThere are also gradle and maven plugins to help you generate web3j Java wrappers for your Solidity smart contracts,\nthus allowing you to integrate such activities into your project lifecycle.\n\nTake a look at the project homepage for the\n`web3j-gradle-plugin <https://github.com/web3j/web3j-gradle-plugin>`_\nand `web3j-maven-plugin <https://github.com/web3j/web3j-maven-plugin>`_ for details on how to use these plugins.\n\n\nStart a client\n--------------\n\nStart up an Ethereum client if you don\'t already have one running, such as\n`Geth <https://github.com/ethereum/go-ethereum/wiki/geth>`_:\n\n.. code-block:: bash\n\n   $ geth --rpcapi personal,db,eth,net,web3 --rpc --testnet\n\nOr `Parity <https://github.com/paritytech/parity>`_:\n\n.. code-block:: bash\n\n   $ parity --chain testnet\n\nOr use `Infura <https://infura.io/>`_, which provides **free clients** running in the cloud:\n\n.. code-block:: java\n\n   Web3j web3 = Web3j.build(new HttpService("https://ropsten.infura.io/your-token"));\n\nFor further information refer to\n`Using Infura with web3j <https://docs.web3j.io/using_infura_with_web3j/>`_\n\nInstructions on obtaining Ether to transact on the network can be found in the\n`testnet section of the docs <https://docs.web3j.io/transactions/#ethereum-testnets>`_.\n\n\nStart sending requests\n----------------------\n\nTo send synchronous requests:\n\n.. code-block:: java\n\n   Web3j web3 = Web3j.build(new HttpService());  // defaults to http://localhost:8545/\n   Web3ClientVersion web3ClientVersion = web3.web3ClientVersion().send();\n   String clientVersion = web3ClientVersion.getWeb3ClientVersion();\n\n\nTo send asynchronous requests using a CompletableFuture (Future on Android):\n\n.. code-block:: java\n\n   Web3j web3 = Web3j.build(new HttpService());  // defaults to http://localhost:8545/\n   Web3ClientVersion web3ClientVersion = web3.web3ClientVersion().sendAsync().get();\n   String clientVersion = web3ClientVersion.getWeb3ClientVersion();\n\nTo use an RxJava Flowable:\n\n.. code-block:: java\n\n   Web3j web3 = Web3j.build(new HttpService());  // defaults to http://localhost:8545/\n   web3.web3ClientVersion().flowable().subscribe(x -> {\n       String clientVersion = x.getWeb3ClientVersion();\n       ...\n   });\n\n\nIPC\n---\n\nweb3j also supports fast inter-process communication (IPC) via file sockets to clients running on\nthe same host as web3j. To connect simply use the relevant *IpcService* implementation instead of\n*HttpService* when you create your service:\n\n.. code-block:: java\n\n   // OS X/Linux/Unix:\n   Web3j web3 = Web3j.build(new UnixIpcService("/path/to/socketfile"));\n   ...\n\n   // Windows\n   Web3j web3 = Web3j.build(new WindowsIpcService("/path/to/namedpipefile"));\n   ...\n\n**Note:** IPC is not currently available on web3j-android.\n\n\nWorking with smart contracts with Java smart contract wrappers\n--------------------------------------------------------------\n\nweb3j can auto-generate smart contract wrapper code to deploy and interact with smart contracts\nwithout leaving the JVM.\n\nTo generate the wrapper code, compile your smart contract:\n\n.. code-block:: bash\n\n   $ solc <contract>.sol --bin --abi --optimize -o <output-dir>/\n\nThen generate the wrapper code using web3j\'s `Command line tools`_:\n\n.. code-block:: bash\n\n   web3j solidity generate -b /path/to/<smart-contract>.bin -a /path/to/<smart-contract>.abi -o /path/to/src/main/java -p com.your.organisation.name\n\nNow you can create and deploy your smart contract:\n\n.. code-block:: java\n\n   Web3j web3 = Web3j.build(new HttpService());  // defaults to http://localhost:8545/\n   Credentials credentials = WalletUtils.loadCredentials("password", "/path/to/walletfile");\n\n   YourSmartContract contract = YourSmartContract.deploy(\n           <web3j>, <credentials>,\n           GAS_PRICE, GAS_LIMIT,\n           <param1>, ..., <paramN>).send();  // constructor params\n\nAlternatively, if you use `Truffle <http://truffleframework.com/>`_, you can make use of its `.json` output files:\n\n.. code-block:: bash\n\n   # Inside your Truffle project\n   $ truffle compile\n   $ truffle deploy\n\nThen generate the wrapper code using web3j\'s `Command line tools`_:\n\n.. code-block:: bash\n\n   $ cd /path/to/your/web3j/java/project\n   $ web3j truffle generate /path/to/<truffle-smart-contract-output>.json -o /path/to/src/main/java -p com.your.organisation.name\n\nWhether using `Truffle` or `solc` directly, either way you get a ready-to-use Java wrapper for your contract.\n\nSo, to use an existing contract:\n\n.. code-block:: java\n\n   YourSmartContract contract = YourSmartContract.load(\n           "0x<address>|<ensName>", <web3j>, <credentials>, GAS_PRICE, GAS_LIMIT);\n\nTo transact with a smart contract:\n\n.. code-block:: java\n\n   TransactionReceipt transactionReceipt = contract.someMethod(\n                <param1>,\n                ...).send();\n\nTo call a smart contract:\n\n.. code-block:: java\n\n   Type result = contract.someMethod(<param1>, ...).send();\n\nTo fine control your gas price:\n\n.. code-block:: java\n\n    contract.setGasProvider(new DefaultGasProvider() {\n            ...\n            });\n\nFor more information refer to `Smart Contracts <https://docs.web3j.io/smart_contracts/#solidity-smart-contract-wrappers>`_.\n\n\nFilters\n-------\n\nweb3j functional-reactive nature makes it really simple to setup observers that notify subscribers\nof events taking place on the blockchain.\n\nTo receive all new blocks as they are added to the blockchain:\n\n.. code-block:: java\n\n   Subscription subscription = web3j.blockFlowable(false).subscribe(block -> {\n       ...\n   });\n\nTo receive all new transactions as they are added to the blockchain:\n\n.. code-block:: java\n\n   Subscription subscription = web3j.transactionFlowable().subscribe(tx -> {\n       ...\n   });\n\nTo receive all pending transactions as they are submitted to the network (i.e. before they have\nbeen grouped into a block together):\n\n.. code-block:: java\n\n   Subscription subscription = web3j.pendingTransactionFlowable().subscribe(tx -> {\n       ...\n   });\n\nOr, if you\'d rather replay all blocks to the most current, and be notified of new subsequent\nblocks being created:\n\n.. code-block:: java\n   Subscription subscription = replayPastAndFutureBlocksFlowable(\n           <startBlockNumber>, <fullTxObjects>)\n           .subscribe(block -> {\n               ...\n   });\n\nThere are a number of other transaction and block replay Flowables described in the\n`docs <https://docs.web3j.io/filters_and_events/>`_.\n\nTopic filters are also supported:\n\n.. code-block:: java\n\n   EthFilter filter = new EthFilter(DefaultBlockParameterName.EARLIEST,\n           DefaultBlockParameterName.LATEST, <contract-address>)\n                .addSingleTopic(...)|.addOptionalTopics(..., ...)|...;\n   web3j.ethLogFlowable(filter).subscribe(log -> {\n       ...\n   });\n\nSubscriptions should always be cancelled when no longer required:\n\n.. code-block:: java\n\n   subscription.unsubscribe();\n\n**Note:** filters are not supported on Infura.\n\nFor further information refer to `Filters and Events <https://docs.web3j.io/filters_and_events/>`_ and the\n`Web3jRx <https://github.com/web3j/web3j/blob/master/core/src/main/java/org/web3j/protocol/rx/Web3jRx.java>`_\ninterface.\n\n\nTransactions\n------------\n\nweb3j provides support for both working with Ethereum wallet files (recommended) and Ethereum\nclient admin commands for sending transactions.\n\nTo send Ether to another party using your Ethereum wallet file:\n\n.. code-block:: java\n\n   Web3j web3 = Web3j.build(new HttpService());  // defaults to http://localhost:8545/\n   Credentials credentials = WalletUtils.loadCredentials("password", "/path/to/walletfile");\n   TransactionReceipt transactionReceipt = Transfer.sendFunds(\n           web3, credentials, "0x<address>|<ensName>",\n           BigDecimal.valueOf(1.0), Convert.Unit.ETHER)\n           .send();\n\nOr if you wish to create your own custom transaction:\n\n.. code-block:: java\n\n   Web3j web3 = Web3j.build(new HttpService());  // defaults to http://localhost:8545/\n   Credentials credentials = WalletUtils.loadCredentials("password", "/path/to/walletfile");\n\n   // get the next available nonce\n   EthGetTransactionCount ethGetTransactionCount = web3j.ethGetTransactionCount(\n                address, DefaultBlockParameterName.LATEST).sendAsync().get();\n   BigInteger nonce = ethGetTransactionCount.getTransactionCount();\n\n   // create our transaction\n   RawTransaction rawTransaction  = RawTransaction.createEtherTransaction(\n                nonce, <gas price>, <gas limit>, <toAddress>, <value>);\n\n   // sign & send our transaction\n   byte[] signedMessage = TransactionEncoder.signMessage(rawTransaction, credentials);\n   String hexValue = Numeric.toHexString(signedMessage);\n   EthSendTransaction ethSendTransaction = web3j.ethSendRawTransaction(hexValue).send();\n   // ...\n\nAlthough it\'s far simpler using web3j\'s `Transfer <https://github.com/web3j/web3j/blob/master/core/src/main/java/org/web3j/tx/Transfer.java>`_\nfor transacting with Ether.\n\nUsing an Ethereum client\'s admin commands (make sure you have your wallet in the client\'s\nkeystore):\n\n.. code-block:: java\n\n   Admin web3j = Admin.build(new HttpService());  // defaults to http://localhost:8545/\n   PersonalUnlockAccount personalUnlockAccount = web3j.personalUnlockAccount("0x000...", "a password").sendAsync().get();\n   if (personalUnlockAccount.accountUnlocked()) {\n       // send a transaction\n   }\n\nIf you want to make use of Parity\'s\n`Personal <https://github.com/paritytech/parity/wiki/JSONRPC-personal-module>`__ or\n`Trace <https://github.com/paritytech/parity/wiki/JSONRPC-trace-module>`_, or Geth\'s\n`Personal <https://github.com/ethereum/go-ethereum/wiki/Management-APIs#personal>`__ client APIs,\nyou can use the *org.web3j:parity* and *org.web3j:geth* modules respectively.\n\n\nCommand line tools\n------------------\n\nA web3j fat jar is distributed with each release providing command line tools. The command line\ntools allow you to use some of the functionality of web3j from the command line:\n\n- Wallet creation\n- Wallet password management\n- Transfer of funds from one wallet to another\n- Generate Solidity smart contract function wrappers\n\nPlease refer to the `documentation <https://docs.web3j.io/command_line_tools/>`_ for further\ninformation.\n\n\nFurther details\n---------------\n\nIn the Java 8 build:\n\n- web3j provides type safe access to all responses. Optional or null responses\n  are wrapped in Java 8\'s\n  `Optional <https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html>`_ type.\n- Asynchronous requests are wrapped in a Java 8\n  `CompletableFutures <https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html>`_.\n  web3j provides a wrapper around all async requests to ensure that any exceptions during\n  execution will be captured rather then silently discarded. This is due to the lack of support\n  in *CompletableFutures* for checked exceptions, which are often rethrown as unchecked exception\n  causing problems with detection. See the\n  `Async.run() <https://github.com/web3j/web3j/blob/master/core/src/main/java/org/web3j/utils/Async.java>`_ and its associated\n  `test <https://github.com/web3j/web3j/blob/master/core/src/test/java/org/web3j/utils/AsyncTest.java>`_ for details.\n\nIn both the Java 8 and Android builds:\n\n- Quantity payload types are returned as `BigIntegers <https://docs.oracle.com/javase/8/docs/api/java/math/BigInteger.html>`_.\n  For simple results, you can obtain the quantity as a String via\n  `Response <https://github.com/web3j/web3j/blob/master/src/main/java/org/web3j/protocol/core/Response.java>`_.getResult().\n- It\'s also possible to include the raw JSON payload in responses via the *includeRawResponse*\n  parameter, present in the\n  `HttpService <https://github.com/web3j/web3j/blob/master/core/src/main/java/org/web3j/protocol/http/HttpService.java>`_\n  and\n  `IpcService <https://github.com/web3j/web3j/blob/master/core/src/main/java/org/web3j/protocol/ipc/IpcService.java>`_\n  classes.\n\n\nTested clients\n--------------\n\n- Geth\n- Parity\n\nYou can run the integration test class\n`CoreIT <https://github.com/web3j/web3j/blob/master/integration-tests/src/test/java/org/web3j/protocol/core/CoreIT.java>`_\nto verify clients.\n\n\nRelated projects\n----------------\n\nFor a .NET implementation, check out `Nethereum <https://github.com/Nethereum/Nethereum>`_.\n\nFor a pure Java implementation of the Ethereum client, check out\n`EthereumJ <https://github.com/ethereum/ethereumj>`_ and\n`Ethereum Harmony <https://github.com/ether-camp/ethereum-harmony>`_.\n\n\nProjects using web3j\n--------------------\n\nPlease submit a pull request if you wish to include your project on the list:\n\n- `AlphaWallet Android Wallet <https://github.com/AlphaWallet/alpha-wallet-android.git>`_\n- `ERC-20 RESTful Service <https://github.com/blk-io/erc20-rest-service>`_\n- `Ether Wallet <https://play.google.com/store/apps/details?id=org.vikulin.etherwallet>`_ by\n  `@vikulin <https://github.com/vikulin>`_\n- `eth-contract-api <https://github.com/adridadou/eth-contract-api>`_ by\n  `@adridadou <https://github.com/adridadou>`_\n- `Ethereum Paper Wallet <https://github.com/matthiaszimmermann/ethereum-paper-wallet>`_ by\n  `@matthiaszimmermann <https://github.com/matthiaszimmermann>`_\n- `Trust Ethereum Wallet <https://github.com/TrustWallet/trust-wallet-android>`_\n- `Presto Ethereum <https://github.com/xiaoyao1991/presto-ethereum>`_\n- `Kundera-Ethereum data importer and sync utility <https://github.com/impetus-opensource/Kundera/tree/trunk/src/kundera-ethereum>`_ by `@impetus-opensource <https://github.com/impetus-opensource>`_\n- `Ethereum JDBC Connector <https://github.com/Impetus/eth-jdbc-connector/>`_ by `@impetus-opensource <https://github.com/impetus-opensource>`_\n- `Ethereum Tool <https://github.com/e-Contract/ethereum-tool>`_ for secure offline key management.\n- `Ethereum Java EE JCA Resource Adapter <https://github.com/e-Contract/ethereum-resource-adapter>`_ provides integration of Ethereum within Java EE 6+.\n- `Apache Camel Ethereum Component <https://github.com/apache/camel/blob/master/components/camel-web3j/src/main/docs/web3j-component.adoc>`_ by `@bibryam <https://github.com/bibryam/>`_.\n- `Etherlinker for UE4 <https://bitbucket.org/kelheor/etherlinker-for-ue4>`_ - interact with Ethereum blockchain from Unreal Engine 4.\n- `Ethereum ingest utility <https://ethereum-ingest.com/>`_ - Import and stream blocks/transactions into Hazelcast, Elasticsearch and MongoDB.\n\n\n\nCompanies using web3j\n---------------------\n\nPlease submit a pull request if you wish to include your company on the list:\n\n- `Amberdata <https://www.amberdata.io/>`_\n- `web3labs.com <https://www.web3labs.com/>`_\n- `comitFS <http://www.comitfs.com/>`_\n- `ConsenSys <https://consensys.net/>`_\n- `ING <https://www.ing.com>`_\n- `Othera <https://www.othera.io/>`_\n- `Pactum <https://pactum.io/>`_\n- `TrustWallet <http://trustwalletapp.com>`_\n- `Impetus <http://www.impetus.com/>`_\n- `Argent Labs <http://www.argent.im/>`_\n- `AlphaWallet <https://www.alphawallet.com/>`_\n\n\nBuild instructions\n------------------\n\nweb3j includes integration tests for running against a live Ethereum client. If you do not have a\nclient running, you can exclude their execution as per the below instructions.\n\nTo run a full build (excluding integration tests):\n\n.. code-block:: bash\n\n   $ ./gradlew check\n\n\nTo run the integration tests:\n\n.. code-block:: bash\n\n   $ ./gradlew  -Pintegration-tests=true :integration-tests:test\n\n\nSnapshot Dependencies\n---------------------\n\nSnapshot versions of web3j follow the ``<major>.<minor>.<build>-SNAPSHOT`` convention, for example: 4.2.0-SNAPSHOT.\n\n| If you would like to use snapshots instead please add a new maven repository pointing to:\n\n::\n\n  https://oss.sonatype.org/content/repositories/snapshots\n\nPlease refer to the `maven <https://maven.apache.org/guides/mini/guide-multiple-repositories.html>`_ or `gradle <https://maven.apache.org/guides/mini/guide-multiple-repositories.html>`_ documentation for further detail.\n\nSample gradle configuration:\n\n.. code-block:: groovy\n\n   repositories {\n      maven {\n         url "https://oss.sonatype.org/content/repositories/snapshots"\n      }\n   }\n\nSample maven configuration:\n\n.. code-block:: xml\n\n   <repositories>\n     <repository>\n       <id>sonatype-snasphots</id>\n       <name>Sonatype snapshots repo</name>\n       <url>https://oss.sonatype.org/content/repositories/snapshots</url>\n     </repository>\n   </repositories>\n\nThanks and credits\n------------------\n\n- The `Nethereum <https://github.com/Nethereum/Nethereum>`_ project for the inspiration\n- `Othera <https://www.othera.com.au/>`_ for the great things they are building on the platform\n- `Finhaus <http://finhaus.com.au/>`_ guys for putting me onto Nethereum\n- `bitcoinj <https://bitcoinj.github.io/>`_ for the reference Elliptic Curve crypto implementation\n- Everyone involved in the Ethererum project and its surrounding ecosystem\n- And of course the users of the library, who\'ve provided valuable input & feedback\n'