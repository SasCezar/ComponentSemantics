b"# Chainlink\n\n[![Join the chat at https://gitter.im/smartcontractkit-chainlink/Lobby](https://badges.gitter.im/smartcontractkit-chainlink/Lobby.svg)](https://gitter.im/smartcontractkit-chainlink/Lobby)\n[![CircleCI](https://circleci.com/gh/smartcontractkit/chainlink.svg?style=shield)](https://circleci.com/gh/smartcontractkit/chainlink)\n[![Go Report Card](https://goreportcard.com/badge/github.com/smartcontractkit/chainlink)](https://goreportcard.com/report/github.com/smartcontractkit/chainlink)\n[![GoDoc](https://godoc.org/github.com/smartcontractkit/chainlink?status.svg)](https://godoc.org/github.com/smartcontractkit/chainlink)\n[![Maintainability](https://api.codeclimate.com/v1/badges/273722bb9f6f22d799bd/maintainability)](https://codeclimate.com/github/smartcontractkit/chainlink/maintainability)\n[![Test Coverage](https://api.codeclimate.com/v1/badges/273722bb9f6f22d799bd/test_coverage)](https://codeclimate.com/github/smartcontractkit/chainlink/test_coverage)\n\nChainlink is middleware to simplify communication with blockchains.\nHere you'll find the Chainlink Golang node, currently in alpha.\nThis initial implementation is intended for use and review by developers,\nand will go on to form the basis for Chainlink's [decentralized oracle network](https://link.smartcontract.com/whitepaper).\nFurther development of the Chainlink Node and Chainlink Network will happen here,\nif you are interested in contributing please see our [contribution guidelines](./docs/CONTRIBUTING.md).\nThe current node supports:\n\n- easy connectivity of on-chain contracts to any off-chain computation or API\n- multiple methods for scheduling both on-chain and off-chain computation for a user's smart contract\n- automatic gas price bumping to prevent stuck transactions, assuring your data is delivered in a timely manner\n- push notification of smart contract state changes to off-chain systems, by tracking Ethereum logs\n- translation of various off-chain data types into EVM consumable types and transactions\n- easy to implement smart contract libraries for connecting smart contracts directly to their preferred oracles\n- easy to install node, which runs natively across operating systems, blazingly fast, and with a low memory footprint\n\nExamples of how to utilize and integrate Chainlinks can be found in the [examples](./examples) directory.\n\n## Install\n\n1. [Install Go 1.12+](https://golang.org/doc/install#install), and add your GOPATH's [bin directory to your PATH](https://golang.org/doc/code.html#GOPATH)\n2. Install [NodeJS](https://nodejs.org/en/download/package-manager/) & [Yarn](https://yarnpkg.com/lang/en/docs/install/)\n3. Download Chainlink: `git clone https://github.com/smartcontractkit/chainlink && cd chainlink`\n4. Build and install Chainlink: `make install`\n5. Run the node: `chainlink help`\n\n### Ethereum Node Requirements\n\nIn order to run the Chainlink node you must have access to a running Ethereum node with an open websocket connection.\nAny Ethereum based network will work once you've [configured](https://github.com/smartcontractkit/chainlink#configure) the chain ID.\nEthereum node versions currently tested and supported:\n\n- [Parity 1.11+](https://github.com/paritytech/parity-ethereum/releases) (due to a [fix with pubsub](https://github.com/paritytech/parity/issues/6590).)\n- [Geth 1.8+](https://github.com/ethereum/go-ethereum/releases)\n\n## Run\n\n**NOTE**: By default, chainlink will run in TLS mode. For local development you can either disable this by setting CHAINLINK_DEV to true, or generate self signed certificates using `tools/bin/self-signed-certs` or [manually](https://github.com/smartcontractkit/chainlink/wiki/Creating-Self-Signed-Certificates).\n\nTo start your Chainlink node, simply run:\n\n```bash\n$ chainlink local node\n```\n\nBy default this will start on port 6688, where it exposes a [REST API](https://github.com/smartcontractkit/chainlink/wiki/REST-API).\n\nOnce your node has started, you can view your current jobs with:\n\n```bash\n$ chainlink jobspecs\n```\n\nView details of a specific job with:\n\n```bash\n$ chainlink show $JOB_ID\n```\n\nTo find out more about the Chainlink CLI, you can always run `chainlink help`.\n\nCheck out the [wiki](https://github.com/smartcontractkit/chainlink/wiki)'s pages on [Adapters](https://github.com/smartcontractkit/chainlink/wiki/Adapters) and [Initiators](https://github.com/smartcontractkit/chainlink/wiki/Initiators) to learn more about how to create Jobs and Runs.\n\n## Configure\n\nYou can configure your node's behavior by setting environment variables which can be, along with default values that get used if no corresponding environment variable is found. The latest information on configuration variables are available in [the docs](https://docs.chain.link/docs/configuration-variables).\n\n## Project Directory\n\nThis project contains several sub-projects, some with their own documentation.\n\n- [evm](/evm) - smart contract-related resources\n  - [box](/evm/box) - [Chainlink Truffle box](https://www.trufflesuite.com/blog/using-truffle-to-interact-with-chainlink-smart-contracts)\n  - [v0.5](/evm/v0.5) - Chainlink using Solidity v0.5.0\n- [examples](/examples) - collection of example Chainlink integrations\n  - [testnet](/examples/testnet) - guide to creating, deploying and using Chainlinked smart contracts\n- [explorer](/explorer) - [Chainlink Explorer](https://explorer.chain.link/)\n- [integration/forks](/integration/forks) - integration test for [ommers](https://ethereum.stackexchange.com/a/46/19503) and [re-orgs](https://en.bitcoin.it/wiki/Chain_Reorganization)\n- [sgx](/sgx) - experimental, optional module that can be loaded into Chainlink to do processing within an [SGX](https://software.intel.com/en-us/sgx) enclave\n- [styleguide](/styleguide) - Chainlink style guide\n- [tools](/tools) - Chainlink tools\n\n## External Adapters\n\nExternal adapters are what make Chainlink easily extensible, providing simple integration of custom computations and specialized APIs.\nA Chainlink node communicates with external adapters via a simple REST API.\n\nFor more information on creating and using external adapters, please see our [external adapters page](https://github.com/smartcontractkit/chainlink/wiki/External-Adapters).\n\n## Development Setup\n\nFor the latest information on setting up a development environment, see the [guide here](https://github.com/smartcontractkit/chainlink/wiki/Development-Setup-Guide).\n\n### Build your current version\n\n```bash\n$ go build -o chainlink ./core/\n```\n\n- Run the binary:\n\n```bash\n$ ./chainlink\n```\n\n### Test\n\n1. [Install Yarn](https://yarnpkg.com/lang/en/docs/install)\n\n2. Build contracts:\n\n```bash\n$ cd evm\n$ yarn build\n```\n\n3. Ready for testing:\n\n```bash\n$ go test -parallel=1 ./...\n```\n\n### Solidity Development\n\n1. [Install Yarn](https://yarnpkg.com/lang/en/docs/install)\n2. Install the dependencies:\n\n```bash\n$ cd evm\n$ yarn install\n```\n\n3. Run tests:\n\n```bash\n$ yarn run test-sol\n```\n\n### Development Tips\n\nFor more tips on how to build and test Chainlink, see our [development tips page](https://github.com/smartcontractkit/chainlink/wiki/Development-Tips).\n\n## Contributing\n\nChainlink's source code is [licensed under the MIT License](https://github.com/smartcontractkit/chainlink/blob/master/LICENSE), and contributions are welcome.\n\nPlease check out our [contributing guidelines](./docs/CONTRIBUTING.md) for more details.\n\nThank you!\n"