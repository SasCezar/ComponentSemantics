b"# SYNOPSIS\n\n[![NPM Package](https://img.shields.io/npm/v/ethereumjs-tx.svg?style=flat-square)](https://www.npmjs.org/package/ethereumjs-tx)\n[![Build Status](https://travis-ci.org/ethereumjs/ethereumjs-tx.svg?branch=master)](https://travis-ci.org/ethereumjs/ethereumjs-tx)\n[![Coverage Status](https://img.shields.io/coveralls/ethereumjs/ethereumjs-tx.svg?style=flat-square)](https://coveralls.io/r/ethereumjs/ethereumjs-tx)\n[![Gitter](https://img.shields.io/gitter/room/ethereum/ethereumjs-lib.svg?style=flat-square)](https://gitter.im/ethereum/ethereumjs-lib) or #ethereumjs on freenode\n\n# INSTALL\n\n`npm install ethereumjs-tx`\n\n# USAGE\n\n- [example](https://github.com/ethereumjs/ethereumjs-tx/blob/master/examples/transactions.ts)\n\n```javascript\nconst EthereumTx = require('ethereumjs-tx').Transaction\nconst privateKey = Buffer.from(\n  'e331b6d69882b4cb4ea581d88e0b604039a3de5967688d3dcffdd2270c0fd109',\n  'hex',\n)\n\nconst txParams = {\n  nonce: '0x00',\n  gasPrice: '0x09184e72a000',\n  gasLimit: '0x2710',\n  to: '0x0000000000000000000000000000000000000000',\n  value: '0x00',\n  data: '0x7f7465737432000000000000000000000000000000000000000000000000000000600057',\n}\n\n// The second parameter is not necessary if these values are used\nconst tx = new EthereumTx(txParams, { chain: 'mainnet', hardfork: 'petersburg' })\ntx.sign(privateKey)\nconst serializedTx = tx.serialize()\n```\n\n# Chain and Hardfork Support\n\nThe `Transaction` and `FakeTransaction` constructors receives a second parameter that lets you specify the chain and hardfork\nto be used. By default, `mainnet` and `petersburg` will be used.\n\nThere are two ways of customizing these. The first one, as shown in the previous section, is by\nusing an object with `chain` and `hardfork` names. You can see en example of this in [./examples/ropsten-tx.ts](./examples/ropsten-tx.ts).\n\nThe second option is by passing the option `common` set to an instance of [ethereumjs-common](https://github.com/ethereumjs/ethereumjs-common)' Common. This is specially useful for custom networks or chains/hardforks not yet supported by `ethereumjs-common`. You can see en example of this in [./examples/custom-chain-tx.ts](./examples/custom-chain-tx.ts).\n\n## Istanbul Support\n\nSupport for reduced non-zero call data gas prices from the `Istanbul` hardfork\n([EIP-2028](https://eips.ethereum.org/EIPS/eip-2028)) has been added to the library\nalong with the `v2.1.1` release.\n\n# EIP-155 support\n\n`EIP-155` replay protection is activated since the `spuriousDragon` hardfork. To disable it, set the\nhardfork in the `Transaction`'s constructor.\n\n# API\n\n[./docs/](./docs/README.md)\n\n# EthereumJS\n\nSee our organizational [documentation](https://ethereumjs.readthedocs.io) for an introduction to `EthereumJS` as well as information on current standards and best practices.\n\nIf you want to join for work or do improvements on the libraries have a look at our [contribution guidelines](https://ethereumjs.readthedocs.io/en/latest/contributing.html).\n\n# LICENSE\n\n[MPL-2.0](<https://tldrlegal.com/license/mozilla-public-license-2.0-(mpl-2)>)\n"