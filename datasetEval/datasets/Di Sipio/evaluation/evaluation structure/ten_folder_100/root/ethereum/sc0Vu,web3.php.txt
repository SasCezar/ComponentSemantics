b'# web3.php\n\n[![Build Status](https://travis-ci.org/sc0Vu/web3.php.svg?branch=master)](https://travis-ci.org/sc0Vu/web3.php)\n[![codecov](https://codecov.io/gh/sc0Vu/web3.php/branch/master/graph/badge.svg)](https://codecov.io/gh/sc0Vu/web3.php)\n[![Join the chat at https://gitter.im/web3-php/web3.php](https://img.shields.io/badge/gitter-join%20chat-brightgreen.svg)](https://gitter.im/web3-php/web3.php)\n[![Licensed under the MIT License](https://img.shields.io/badge/License-MIT-blue.svg)](https://github.com/sc0Vu/web3.php/blob/master/LICENSE)\n\n\nA php interface for interacting with the Ethereum blockchain and ecosystem.\n\n# Install\n\nSet minimum stability to dev\n```\n"minimum-stability": "dev"\n```\n\nThen\n```\ncomposer require sc0vu/web3.php dev-master\n```\n\nOr you can add this line in composer.json\n\n```\n"sc0vu/web3.php": "dev-master"\n```\n\n\n# Usage\n\n### New instance\n```php\nuse Web3\\Web3;\n\n$web3 = new Web3(\'http://localhost:8545\');\n```\n\n### Using provider\n```php\nuse Web3\\Web3;\nuse Web3\\Providers\\HttpProvider;\nuse Web3\\RequestManagers\\HttpRequestManager;\n\n$web3 = new Web3(new HttpProvider(new HttpRequestManager(\'http://localhost:8545\')));\n\n// timeout\n$web3 = new Web3(new HttpProvider(new HttpRequestManager(\'http://localhost:8545\', 0.1)));\n```\n\n### You can use callback to each rpc call:\n```php\n$web3->clientVersion(function ($err, $version) {\n    if ($err !== null) {\n        // do something\n        return;\n    }\n    if (isset($version)) {\n        echo \'Client version: \' . $version;\n    }\n});\n```\n\n### Eth\n```php\nuse Web3\\Web3;\n\n$web3 = new Web3(\'http://localhost:8545\');\n$eth = $web3->eth;\n```\n\nOr\n\n```php\nuse Web3\\Eth;\n\n$eth = new Eth(\'http://localhost:8545\');\n```\n\n### Net\n```php\nuse Web3\\Web3;\n\n$web3 = new Web3(\'http://localhost:8545\');\n$net = $web3->net;\n```\n\nOr\n\n```php\nuse Web3\\Net;\n\n$net = new Net(\'http://localhost:8545\');\n```\n\n### Batch\n\nweb3\n```php\n$web3->batch(true);\n$web3->clientVersion();\n$web3->hash(\'0x1234\');\n$web3->execute(function ($err, $data) {\n    if ($err !== null) {\n        // do something\n        // it may throw exception or array of exception depends on error type\n        // connection error: throw exception\n        // json rpc error: array of exception\n        return;\n    }\n    // do something\n});\n```\n\neth\n\n```php\n$eth->batch(true);\n$eth->protocolVersion();\n$eth->syncing();\n\n$eth->provider->execute(function ($err, $data) {\n    if ($err !== null) {\n        // do something\n        return;\n    }\n    // do something\n});\n```\n\nnet\n```php\n$net->batch(true);\n$net->version();\n$net->listening();\n\n$net->provider->execute(function ($err, $data) {\n    if ($err !== null) {\n        // do something\n        return;\n    }\n    // do something\n});\n```\n\npersonal\n```php\n$personal->batch(true);\n$personal->listAccounts();\n$personal->newAccount(\'123456\');\n\n$personal->provider->execute(function ($err, $data) {\n    if ($err !== null) {\n        // do something\n        return;\n    }\n    // do something\n});\n```\n\n### Contract\n\n```php\nuse Web3\\Contract;\n\n$contract = new Contract(\'http://localhost:8545\', $abi);\n\n// deploy contract\n$contract->bytecode($bytecode)->new($params, $callback);\n\n// call contract function\n$contract->at($contractAddress)->call($functionName, $params, $callback);\n\n// change function state\n$contract->at($contractAddress)->send($functionName, $params, $callback);\n\n// estimate deploy contract gas\n$contract->bytecode($bytecode)->estimateGas($params, $callback);\n\n// estimate function gas\n$contract->at($contractAddress)->estimateGas($functionName, $params, $callback);\n\n// get constructor data\n$constructorData = $contract->bytecode($bytecode)->getData($params);\n\n// get function data\n$functionData = $contract->at($contractAddress)->getData($functionName, $params);\n```\n\n# Assign value to outside scope(from callback scope to outside scope)\nDue to callback is not like javascript callback, \nif we need to assign value to outside scope, \nwe need to assign reference to callback.\n```php\n$newAccount = \'\';\n\n$web3->personal->newAccount(\'123456\', function ($err, $account) use (&$newAccount) {\n    if ($err !== null) {\n        echo \'Error: \' . $err->getMessage();\n        return;\n    }\n    $newAccount = $account;\n    echo \'New account: \' . $account . PHP_EOL;\n});\n```\n\n# Examples\n\nTo run examples, you need to run ethereum blockchain local (testrpc).\n\nIf you are using docker as development machain, you can try [ethdock](https://github.com/sc0vu/ethdock) to run local ethereum blockchain, just simply run `docker-compose up -d testrpc` and expose the `8545` port.\n\n# Develop\n\n### Local php cli installed\n\n1. Clone the repo and install packages.\n```\ngit clone https://github.com/sc0Vu/web3.php.git && cd web3.php && composer install\n```\n\n2. Run test script.\n```\nvendor/bin/phpunit\n```\n\n### Docker container\n\n1. Clone the repo and run docker container.\n```\ngit clone https://github.com/sc0Vu/web3.php.git\n```\n\n2. Copy web3.php to web3.php/docker/app directory and start container.\n```\ncp files docker/app && docker-compose up -d php ganache\n```\n\n3. Enter php container and install packages.\n```\ndocker-compose exec php ash\n```\n\n4. Change testHost in `TestCase.php`\n```\n/**\n * testHost\n * \n * @var string\n */\nprotected $testHost = \'http://ganache:8545\';\n```\n\n5. Run test script\n```\nvendor/bin/phpunit\n```\n\n###### Install packages\nEnter container first\n```\ndocker-compose exec php ash\n```\n\n1. gmp\n```\napk add gmp-dev\ndocker-php-ext-install gmp\n```\n\n2. bcmath\n```\ndocker-php-ext-install bcmath\n```\n\n###### Remove extension\nMove the extension config from `/usr/local/etc/php/conf.d/`\n```\nmv /usr/local/etc/php/conf.d/extension-config-name to/directory\n```\n\n# API\n\nTodo.\n\n# License\nMIT\n'