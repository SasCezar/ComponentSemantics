b'# vue-ethereum-ipfs\nDistributed Application Starter: Vue front-end, Ethereum / IPFS Backend\n\nEthereum is a distributed virtual machine that pays eth in return for miners running\nyour smart contracts. IPFS is a kind of distributed content distribution network. Vue\nis a javascript framework for building client-side webapps. By keeping state inside\nethereum and using IPFS to deliver HTML, webapps can become nearly indestructible!\n\n## How do I use this to make indestructible Vue apps that speak Ethereum? \n\n### Before you start\n\nInstall IPFS: [https://ipfs.io/docs/install/](https://ipfs.io/docs/install/) <br/>\nInstall the MetaMask Ethereum wallet (and register an account): [https://metamask.io/](https://metamask.io/) <br/>\nInstall: `npm i -g ganache-cli` (local Ethereum test network) <br/>\nInstall: `npm i -g truffle` (Solidity toolkit!) <br/>\n\n### Obtain your IPFS repo key and set an environment variable\nTo obtain your key: `ipfs key list -l` <br/>\nSet: `export IPFS_PUBKEY=QmQozMTQHW9g6fKmHerVHoKQNQo4zhfXQMsWMTuJ6D1sJd` (Example key)\n\n\n### Start the local Ethereum test net <br/>\nRun: `ganache-cli --accounts=4`\n\n\n### Connect Metamask to the test net <br/>\nSelect **Localhost 8545** as your RPC form the MetaMask UI\n\nUse the generated passphrase to log into MetaMask eg:\n```\nHD Wallet\n==================\nMnemonic:      shoe panic long movie sponsor clarify casino stable calm scene enforce federal\n```\n\nImport the other accounts in to MetaMask for testing using the generated private key eg:\n```\nPrivate Keys\n==================\n(0) 2f3a3521d79a5e5c58972224d80a678c993a1a50b7cf8a2ee51e255e55fb041d <- the passphrase unlocks this account\n(1) 557d2bd6ab422edda5d57a0c20e0908c31c94a3c7c8af40c923925a3403bd214\n(2) 76e98c90b7168242fd523b718a76b95966ab09904129c011582369e7339327a8\n(3) 683746dee343d96dd792130b01febc0d75dd5a540fae79350db6ed9f597d\n```\n\n### Install the Vue packages\n```\n$ npm install\n```\n\n### Vue Build and deploy commands\n```\n "scripts": {\n    "dev":\n      "webpack-dev-server --inline --progress --config build/webpack.dev.conf.js",\n    "start": "npm run dev",\n    "unit": "jest --config test/unit/jest.conf.js --coverage",\n    "e2e": "node test/e2e/runner.js",\n    "test": "npm run unit && npm run e2e",\n    "lint": "eslint --ext .js,.vue src test/unit test/e2e/specs",\n    "build": "export IPFS_PUBKEY= && node build/build.js",\n    "publish:ipfs": "npm run test && node build/build.js && node build/ipfs-publish.js"\n  },\n```\n\n```\n$ npm start\nYour application is running here: http://localhost:8081\n```\n\n### Create your own Smart Contracts\n\nThe easiest way to start developing Smart Contracts: <br/>\n#### [https://remix.ethereum.org/](https://remix.ethereum.org/)\n\n### Add contracts to the Vue App\n\n- Add all of your contracts (.sol files) to the `/contracts` directory\n- Run: `truffle compile && truffle migrate --network development`\n\n### Use your Contracts in the App!\n\nExample `web3Service.js`. This code demonstrates a contract factory pattern. For the full code see the `web3Service.js` file in the project.\n\n```js\nimport contract from \'truffle-contract\'\n\nimport contractJSON from \'../build/contracts/WitnessContract.json\'\nconst Contract = contract(contractJSON)\n\nconst createContractInstance = async c => {\n  try {\n    const newContract = await Contract.new(c.name, c.terms, {\n      from: c.witness,\n      gasPrice: 2000000000,\n      gas: \'2000000\'\n    })\n    return newContract\n  } catch (e) {\n    console.log(e, \'Error creating contract...\')\n  }\n}\n\nexport { createContractInstance }\n\n```\n\nTested with:\n\n* Node (>=)9.0.0\n* go version go1.9.4 darwin/amd64\n* ipfs version 0.4.11\n* Ganache CLI v6.0.3 (ganache-core: 2.0.2)  \n* Google Chrome 64.0.3282.167 (Official Build) (64-bit)\n\n---\n### Links\n\nTeach and learn JavaScript with us at RED Academy: https://redacademy.com/\n'