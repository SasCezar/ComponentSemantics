b"# awesome-solidity [![Awesome](https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg)](https://github.com/sindresorhus/awesome) [![Build Status](https://travis-ci.org/bkrem/awesome-solidity.svg?branch=master)](https://travis-ci.org/bkrem/awesome-solidity) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square)](http://makeapullrequest.com)\n\n\nA curated list of awesome [Solidity](https://en.wikipedia.org/wiki/Solidity) resources, libraries, tools and more.\n\nPlease check the [contribution guidelines](CONTRIBUTING.md) for info on formatting and writing pull requests.\n\n### Contents\n- [Resources](#resources)\n    - [Official](#official)\n    - [Tutorials](#tutorials)\n    - [Security](#security)\n    - [Examples](#examples)\n    - [Books](#books)\n    - [Practice](#practice)\n- [Libraries](#libraries)\n- [Tools](#tools)\n    - [General](#general)\n    - [Audit](#audit)\n    - [DevOps](#devops)\n    - [JavaScript](#javascript)\n    - [TypeScript](#typescript)\n    - [Utility](#utility)\n    - [Webpack](#webpack)\n- [Editor Plugins](#editor-plugins)\n    - [Atom](#atom)\n    - [Eclipse](#eclipse)\n    - [Emacs](#emacs)\n    - [Sublime](#sublime)\n    - [Vim](#vim)\n    - [Visual Studio Code](#visual-studio-code)\n- [License](#license)\n\n\n## Resources\n#### Official\n- [Docs](http://solidity.readthedocs.io/en/latest/) - Official documentation.\n    - [FAQ](http://solidity.readthedocs.io/en/latest/frequently-asked-questions.html) - Frequently asked question about Solidity.\n- [Ethereum Wiki](https://github.com/ethereum/wiki/wiki) - The Ethereum Wiki.\n- [Ethereum Stackexchange](https://ethereum.stackexchange.com/) - Ethereum's Stackexchange board.\n- [Gitter](https://gitter.im/ethereum/solidity/) - Gitter channel.\n- [Solidity Github Repo](https://github.com/ethereum/solidity/) - Source code.\n\n#### Tutorials\n- [Best Practices for Smart Contract Development](https://yos.io/2019/11/10/smart-contract-development-best-practices/) - Developer handbook for smart contract developers.\n- [CryptoZombies](https://cryptozombies.io) - Interactive code school that teaches you to write smart contracts through building your own crypto-collectables game.\n- [Discover Ethereum & Solidity](https://www.ludu.co/course/ethereum) - Complete course that takes you through the process of creating a decentralized Twitter clone using best practices.\n- [EthereumDev.io](https://ethereumdev.io) - Complete tutorial from starting to writing complex smart contracts and DApps.\n- [Hackr.io Tutorials](https://hackr.io/tutorials/learn-solidity) - Community curated tutorials and courses.\n- [Learn Solidity](https://github.com/willitscale/learning-solidity) - Complete guide on getting started, creating your own crypto, ICOs and deployment.\n- [LearnXInY](https://learnxinyminutes.com/docs/solidity/) - Learn Solidity in 15 mins (for experienced devs).\n- [Monax Smart Contract Tutorial](https://monax.io/docs/solidity/) - Tutorial series which begins with a very simple smart contract and teaches how to gradually increase the complexity of your contracts with relevant design patterns.\n- [Solidity Workshop](https://github.com/androlo/solidity-workshop) - Comprehensive series of tutorials covering contract-oriented programming and advanced language concepts.\n- [Syntax cheat sheet](https://topmonks.github.io/solidity_quick_ref/) - Quick syntax overview.\n- [Upgradable Contracts](https://blog.colony.io/writing-upgradeable-contracts-in-solidity-6743f0eecc88#.lhsir2mzo) - Medium article on writing upgradable contracts.\n\n#### Security\n- [Awesome Ethereum Security](https://github.com/trailofbits/awesome-ethereum-security) - Curated list of awesome Ethereum security references, guidance, tools, and more.\n- [Capture the Ether](https://capturetheether.com/) - Game in which you hack Ethereum smart contracts to learn about security.\n- [Ethereum Smart Contract Security Best Practices](https://consensys.github.io/smart-contract-best-practices/): General security philosophy, known attacks, and sample code.\n- [Not So Smart Contracts](https://github.com/trailofbits/not-so-smart-contracts) - Examples of common vulnerabilities, including code from real smart contracts.\n\n#### Examples\n- [DigixDAO contracts](https://github.com/DigixGlobal/digixdao-contracts/tree/master/contracts) - Contracts for DAO-related data structures such as tokens.\n- [EthFiddle](https://ethfiddle.com/recent_fiddles) - Find, share and embed contracts.\n- [raineorshine/solidity-by-example](https://github.com/raineorshine/solidity-by-example) - A collection of short yet fully-functional contracts that demonstrate language features.\n- [slockit/smart-contract](https://github.com/slockit/smart-contract) - Smart contracts for the Slock.it project.\n- [Solidity Baby Steps](https://github.com/fivedogit/solidity-baby-steps) - Comprehensive collection of contract examples.\n- [Solidity By Example](http://solidity.readthedocs.io/en/latest/solidity-by-example.html) - Contract examples from the official docs.\n- [solidity-examples](https://github.com/chriseth/solidity-examples) - Examples which provide a starting point for data structures such as heaps and queues.\n- [Solidity idiosyncrasies](https://github.com/miguelmota/solidity-idiosyncrasies) - Common gotchas, pitfalls, limitations, and idiosyncrasies.\n\n#### Books\n- [Blockchain in Action](https://www.manning.com/books/blockchain-in-action) - Book that teaches the essential principles of blockchain and how to create your own decentralized apps.\n\n#### Practice\n- [ChainShot](https://www.chainshot.com/) - Hands-on learning with challenging coding tutorials.\n- [Eth Hole](https://ethhole.com/challenge) - Practice challenges for building portfolio, added to weekly.\n\n\n## Libraries\n- [create-truffle-dapp](https://github.com/clemlak/create-truffle-dapp) - CLI to create and deploy Truffle projects with no configuration.\n- [dapp-bin](https://github.com/ethereum/dapp-bin) - Ethereum repo providing implementations for many common data structures and utilities in Solidity, Serpent and LLL.\n- [DApp development starter](https://github.com/NodeFactoryIo/solidity-node-docker-starter) - Starter repository with Docker containers for building decentralized applications with Truffle and Node.Js as backend server.\n- [dapp-scratch](https://github.com/okwme/dapp-scratch) - CLI for generating javascript modules from Contracts for Decentralized Apps.\n- [dappsys](https://github.com/nexusdev/dappsys) - Contract system framework for flexible multi-contract dapps.\n- [DappTools](https://dapp.tools/) - Command-line-friendly tools for blockchain development.\n- [instant-dapp-ide](https://github.com/dominicwilliams/instant-dapp-ide) - Complete Dapp and Solidity development environment as a docker image you can run from command line.\n- [Modular Libraries](https://github.com/modular-network/ethereum-libraries) - Deployed utility libraries to use in your smart contracts.\n- [OpenZeppelin](https://openzeppelin.org/) - Framework to build secure smart contracts.\n- [Smart Contracts Skeleton](https://github.com/Shimmi/smart-contracts-skeleton) - Preconfigured skeleton repository for building or starting with development of Smart contracts.\n- [Solidity Collections](https://github.com/ethereum/wiki/wiki/Solidity-Collections) - Collections of code snippets and utility libraries.\n- [Solidity Standard Library](https://github.com/alianse777/solidity-standard-library) - Standard library (Array, random, math, string).\n- [Truffle](https://github.com/ConsenSys/truffle) - Development environment, testing framework and asset pipeline for Ethereum.\n- [truffle-assertions](https://github.com/rkalis/truffle-assertions) - Adds additional assertions and utilities used in testing smart contracts with truffle.\n\n\n## Tools\n#### General\n- [Buidler](https://buidler.dev) - A task runner for Ethereum smart contract developers.\n- [Cryptofex](https://cryptofex.io/download/) - Standalone IDE and compiler.\n- [Remix](https://remix.ethereum.org/) - Online realtime compiler and runtime.\n- [REPL](https://github.com/raineorshine/solidity-repl) - REPL CLI.\n- [SIF](https://github.com/chao-peng/SIF) - Code generation from the AST, analyse and instrument source code.\n- [solgraph](https://github.com/raineorshine/solgraph) - Visualize control flows for smart contract security analysis.\n- [sol-merger](https://github.com/RyuuGan/sol-merger) - Merges all imports into single file for contracts.\n- [solidity-docgen](https://github.com/OpenZeppelin/solidity-docgen) - Documentation generator for Solidity projects.\n- [Tenderly](https://tenderly.dev) - Dive into every transaction and monitor your smart contracts on all the major networks (Mainnet, Kovan, Ropsten, Rinkeby).\n\n#### Audit\n- [Echidna](https://github.com/trailofbits/echidna) - Define properties for your smart contract then use fuzzing to catch security bugs.\n- [Manticore](https://github.com/trailofbits/manticore) - Detects many common bug types, and can prove correctness properties with symbolic execution.\n- [Mythril-classic](https://github.com/ConsenSys/mythril-classic) - Security analysis tool for smart contracts.\n- [SmartCheck](https://tool.smartdec.net) - Online tool for checking smart contracts for vulnerabilities and bad practices.\n- [Securify](https://securify.chainsecurity.com/) - Online tool for analyzing smart contracts for vulnerabilities and insecure coding.\n- [Slither](https://github.com/trailofbits/slither) - Static analyzer with support for many common bug types, including visualization tools for security-relevant information.\n\n#### DevOps\n- [Embark](https://github.com/embark-framework/embark) - Framework that allows you to easily develop and deploy DApps.\n- [Moesif](https://www.moesif.com/docs/platform/ethereum-web3/) - Service that provides Ethereum smart contract analytics and anomaly detection for DApps and DAPIs.\n\n#### JavaScript\n- [solc-js](https://github.com/ethereum/solc-js) - JavaScript bindings for the Solidity compiler.\n- [solidity-parser](https://github.com/ConsenSys/solidity-parser) - Solidity parser built in JavaScript.\n- [sulk](https://github.com/lukehedger/sulk) - Configurable contract compilation.\n\n#### TypeScript\n- [Soltsice](https://github.com/dbrainio/Soltsice) - Generates strongly-typed TypeScript classes for contracts from Truffle artifacts with a single command.\n- [TypeChain](https://github.com/Neufund/TypeChain) - TypeScript bindings for Ethereum smart contracts.\n\n#### Utility\n- [solhint](https://github.com/protofire/solhint) - Solidity linter that provides security, style guide and best practice rules for smart contract validation.\n- [Ethlint](https://github.com/duaraghav8/Ethlint) - Linter to identify and fix style & security issues in Solidity smart contracts.\n- [sol-profiler](https://github.com/Aniket-Engg/sol-profiler) - CLI tool to list & store solidity smart contract methods attributes.\n- [sol-tester](https://github.com/androlo/sol-tester) - Utilities for building, linking and testing contracts using go-ethereum and the simulated chain.\n- [sol-verifier](https://github.com/Aniket-Engg/sol-verifier) - Verify solidity smart contracts on Etherscan.\n- [solidity-coverage](https://github.com/sc-forks/solidity-coverage) - Code coverage tool.\n- [truffle-plugin-verify](https://github.com/rkalis/truffle-plugin-verify) - Truffle plugin to verify smart contracts on Etherscan from the Truffle command line.\n- [Tenderly CLI](https://github.com/Tenderly/tenderly-cli) - Speed up your development with error stack traces.\n\n#### Webpack\n- [solidity-loader](https://github.com/jeffscottward/solidity-loader) - Webpack loader.\n\n## Editor Plugins\n#### Atom\n- [autocomplete-solidity](https://atom.io/packages/autocomplete-solidity) - Parses Solidity files to give you contextual autocomplete suggestions.\n- [Etheratom](https://atom.io/packages/etheratom) - Compile and deploy Solidity code from atom editor.\n- [language-ethereum](https://atom.io/packages/language-ethereum) - Adds syntax highlighting and snippets to Solidity and Serpent files in Atom.\n- [linter-solidity](https://atom.io/packages/linter-solidity) - Linter.\n\n#### Eclipse\n- [uml2solidity](https://github.com/UrsZeidler/uml2solidity) - Model smart contracts with UML.\n- [YAKINDU Solidity Tools](https://yakindu.github.io/solidity-ide/) - Features context sensitive code completion and help, code navigation, syntax coloring, built in compiler, quick fixes and templates.\n\n#### Emacs\n- [emacs-solidity](https://github.com/ethereum/emacs-solidity) - Solidity mode for Emacs.\n- [company-solidity](https://github.com/ssmolkin1/company-solidity) - Autocomplete with company-mode.\n\n#### IntelliJ\n- [intellij-solidity](https://github.com/intellij-solidity/intellij-solidity) - Solidity plugin for IntelliJ.\n\n#### Sublime\n- [SublimeEthereum](https://github.com/davidhq/SublimeEthereum) - Solidity syntax for SublimeText.\n\n#### Vim\n- [solidity.vim](https://github.com/dmdque/solidity.vim) - Vim compiler plugin.\n- [vim-solidity](https://github.com/tomlion/vim-solidity) - Vim syntax file.\n\n#### Visual Studio Code\n- [sol-profiler-vscode](https://github.com/Aniket-Engg/sol-profiler-vscode) - Visual Code Extension to generate & store smart contract methods profile.\n- [vscode-solidity](https://github.com/juanfranblanco/vscode-solidity) - Visual Studio Code language support extension.\n\n---\n\n## License\n[![CC0](http://mirrors.creativecommons.org/presskit/buttons/88x31/svg/cc-zero.svg)](https://creativecommons.org/publicdomain/zero/1.0/)\n\nTo the extent possible under law, [Ben Kremer](http://github.com/bkrem) has waived all copyright and related or neighboring rights to this work.\n"