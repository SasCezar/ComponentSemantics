b'Brainflayer\n===========\n\nBrainflayer is a Proof-of-Concept brainwallet cracking tool that uses\n[libsecp256k1](https://github.com/bitcoin/secp256k1) for pubkey generation.\nIt was originally released as part of my DEFCON talk about cracking brainwallets\n([slides](https://rya.nc/dc23), [video](https://rya.nc/b6), [why](https://rya.nc/defcon-brainwallets.html)).\n\nThe name is a reference to [Mind Flayers](https://en.wikipedia.org/wiki/Illithid),\na race of monsters from the Dungeons & Dragons role-playing game. They eat\nbrains, psionically enslave people and look like lovecraftian horrors.\n\nThe current release is more than four times faster than the DEFCON release, and\nmany features have been added.\n\nIf brainflayer is useful to you, please get in touch to let me know. I\'m very\ninterested in any research it\'s being used for, and I\'m generally happy to\ncollaborate with academic groups.\n\nDisclaimer\n----------\nJust because you *can* steal someone\'s money doesn\'t mean you *should*.\nStealing would make you a jerk. Don\'t be a jerk.\n\nNo support will be provided at this time, and I may ignore or close issues\nrequesting support without responding.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\nLIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\nCONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\nSUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\nINTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\nCONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\nARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGE.\n\nUsage\n-----\n\n### Basic\n\nPrecompute the bloom filter:\n\n`hex2blf example.hex example.blf`\n\nRun Brainflayer against it:\n\n`brainflayer -v -b example.blf -i phraselist.txt`\n\nor\n\n`your_generator | brainflayer -v -b example.blf`\n\n### Advanced\n\nBrainflayer\'s design is heavily influenced by [Unix philosophy](https://en.wikipedia.org/wiki/Unix_philosophy).\nIt (mostly) does one thing: hunt for tasty brainwallets. A major feature it\ndoes *not* have is generating candidate passwords/passphrases. There are plenty\nof other great tools that do that, and brainflayer is happy to have you pipe\ntheir output to it.\n\nUnfortunately, brainflayer is not currently multithreaded. If you want to have\nit keep multiple cores busy, you\'ll have to come up with a way to distribute\nthe work yourself (brainflayer\'s -n and -k options may help). In my testing,\nbrainflayer benefits significantly from hyperthreading, so you may want to\nrun two copies per physical core. Also worth noting is that brainflayer mmaps\nits data files in shared memory, so additional brainflayer processes do not\nuse up that much additional RAM.\n\nWhile not strictly required, it is *highly* recommended to use the following\noptions:\n\n* `-m FILE` Load the ecmult table from `FILE` (generated with `ecmtabgen`)\n            rather than computing it on startup. This will allow multiple\n            brainflayer processes to share the same table in memory, and\n            signifigantly reduce startup time when using a large table.\n\n* `-f FILE` Verify check bloom filter matches against `FILE`, a list of all\n            hash160s generated with\n            `sort -u example.hex | xxd -r -p > example.bin`\n            Enough addresses exist on the Bitcoin network to cause false\n            positives in the bloom filter, this option will suppress them.\n\nBrainflayer supports a few other types of input via the `-t` option:\n\n* `-t keccak` passphrases to be hashed with keccak256 (some ethereum tools)\n\n* `-t priv` raw private keys - this can be used to support arbitrary\n            deterministic wallet schemes via an external program. Any trailing\n            data after the hex encoded private key will be included in\n            brainflayer\'s output as well, for reference. See also the `-I`\n            option if you want to crack a bunch of sequential keys, which has\n            special speed optimizations.\n\n* `-t warp` salts or passwords/passphrases for WarpWallet\n\n* `-t bwio` salts or passwords/passphrases for brainwallet.io\n\n* `-t bv2`  salts or passwords/passphrases for brainv2 - this one is *very* slow\n            on CPU, however the parameter choices make it a great target for GPUs\n            and FPGAs.\n\n* `-t rush` passwords for password-protected rushwallets - pass the fragment (the\n            part of the url after the #) using `-r`. Almost all wrong passwords\n            will be rejected even without a bloom filter.\n\nAddress types can be specified with the `-c` option:\n\n* `-c u` uncompressed addresses\n\n* `-c c` compressed addresses\n\n* `-c e` ethereum addresses\n\n* `-c x` most signifigant bits of public point\'s x coordinate\n\nIt\'s possible to combine two or more of these, e.g. the default is `-c uc`.\n\nAn incremental private key brute force mode is available for fans of\n[directory.io](http://www.directory.io/), try\n\n`brainflayer -v -I 0000000000000000000000000000000000000000000000000000000000000001 -b example.blf`\n\nSee the output of `brainflayer -h` for more detailed usage info.\n\nAlso included is `blfchk` - you can pipe it hex encoded hash160 to check a\nbloom filter file for. It\'s very fast - it can easily check millions of\nhash160s per second. Not entirely sure what this is good for but I\'m sure\nyou\'ll come up with something.\n\nBuilding\n--------\n\nShould compile on Linux with `make` provided you have the required devel libs\ninstalled (at least openssl and gmp are required along with libsecp256k1\'s\nbuild dependencies). I really need to learn autotools. If you file an issue\nabout a build failure in libsecp256k1 I will close it.\n\nAuthors\n-------\n\nThe bulk of Brainflayer was written by Ryan Castellucci. Nicolas Courtois and\nGuangyan Song contributed the code in `ec_pubkey_fast.c` which more than\ndoubles the speed of public key computations compared with the stock secp256k1\nlibrary from Bitcoin. This code uses a much larger table for ec multiplication\nand optimized routines for ec addition and doubling.\n'