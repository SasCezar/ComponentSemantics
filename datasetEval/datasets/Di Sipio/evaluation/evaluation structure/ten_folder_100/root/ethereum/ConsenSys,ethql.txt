b'# A GraphQL interface to Ethereum \xf0\x9f\x94\xa5 \n\n[![CircleCI](https://circleci.com/gh/ConsenSys/ethql.svg?style=svg)](https://circleci.com/gh/ConsenSys/ethql)\n[![Gitter](https://img.shields.io/gitter/room/ethql/lobby.js.svg?style=flat-square)](https://gitter.im/ethql/Lobby)\n\n**\xe2\x96\xb6\xef\xb8\x8f Try out the Alpha on Infura:\n[https://ethql-alpha.infura.io/graphql](<https://ethql-alpha.infura.io/graphql?query=%7B%0A%20%20block(number%3A%205000000)%20%7B%0A%20%20%20%20hash%0A%20%20%20%20transactions(filter%3A%20%7B%20withInput%3A%20true%20%7D)%20%7B%0A%20%20%20%20%20%20index%0A%20%20%20%20%20%20hash%0A%20%20%20%20%20%20from%20%7B%0A%20%20%20%20%20%20%20%20address%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20to%20%7B%0A%20%20%20%20%20%20%20%20address%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20decoded%20%7B%0A%20%20%20%20%20%20%20%20entity%0A%20%20%20%20%20%20%20%20operation%0A%20%20%20%20%20%20%20%20standard%0A%20%20%20%20%20%20%20%20...%20on%20ERC20Transfer%20%7B%0A%20%20%20%20%20%20%20%20%20%20tokenContract%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20symbol%0A%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20from%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20account%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20address%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20tokenBalance%0A%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20to%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20account%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20address%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20value%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D%0A%0A%0A>)**\n\n[Example queries.](#query-handbook)\n\nEthQL is a server that exposes a GraphQL endpoint to the public Ethereum ledger. It works against the standard JSON-RPC\nAPIs offered by all Ethereum clients. It is built in TypeScript, and thus leverages the vast ecosystem of GraphQL\ntooling while preserving compile-time type safety.\n\nEthQL regards blockchain data as a graph, and leverages the extensibility of GraphQL to introduce additional\nfunctionality, amongst which are:\n\n- Decoding of standard transactions (e.g. ERC20, ENS, ERC223, etc.) out of the box.\n- New query patterns enabled by indexing solutions (e.g. all transactions between any two accounts).\n- Automatic batching and caching of requests.\n- New filtering capabilities.\n- Simple, inline unit conversions.\n- Enhancing public data with information overlays imported from other sources.\n\n_NOTE: This project is under heavy development._\n\n## Quickstart\n\nYou need a running Node environment with at least:\n\n- nodejs >= 8.0.0\n- [yarn](https://yarnpkg.com/)\n\nClone the repo and run:\n\n```\n$ yarn install\n$ yarn bootstrap\n$ yarn run dev\nJSON-RPC (web3): Using HTTP(S) provider with endpoint: https://mainnet.infura.io/\nRunning a GraphQL API server at http://0.0.0.0:4000/graphql (browse here: http://localhost:4000/graphql)\n```\n\nThis EthQL server uses [Infura](https://infura.io/) as a backend in anonymous mode. If you have an Infura project ID (and if you don\'t, you should sign up for one!) you can set it like this:\n\n```\n$ INFURA_ID=myid yarn run dev\n```\n## Development\nThe `debug` module is included in Dev Dependencies\n\nTo turn on debugging:\n```\nDEBUG=ethql:*\n```\n\n## Query Handbook\n\nWe suggest fiddling with some [Example Use Cases](https://github.com/ConsenSys/ethql/wiki/Example-Use-Cases) to see some\nqueries in action.\n\nFor an in-depth guide on how to use EthQL, please start with the document\n[Top-Level Queries](https://github.com/ConsenSys/ethql/wiki/Top-Level-Queries). This document shows all of the root\nfields available to query, including information on specific block(s), transaction(s), and account(s).\n\nThe following sections provide a deep dive into all of the fields available on top-level queries:\n\n- [Block Query Fields](https://github.com/ConsenSys/ethql/wiki/Block-Query-Fields)\n- [Account Query Fields](https://github.com/ConsenSys/ethql/wiki/Account-Query-Fields)\n- [Transaction Query Fields](https://github.com/ConsenSys/ethql/wiki/Transaction-Query-Fields)\n- [Log Query Fields](https://github.com/ConsenSys/ethql/wiki/Log-Query-Fields)\n- [Decoded Transaction Query Fields](https://github.com/ConsenSys/ethql/wiki/Decoded-Transaction-Query-Fields)\n\n## Contributing\n\nIf you are interested in fixing issues and contributing directly to the code base, please see the document\n[How to Contribute](https://github.com/ConsenSys/ethql/wiki/How-to-Contribute), which covers the following:\n\n- [Submitting Bugs and Suggestions](https://github.com/ConsenSys/ethql/wiki/Submitting-Bugs-and-Suggestions)\n- [Feedback Channels](https://github.com/ConsenSys/ethql/wiki/Feedback-Channels)\n- [Coding Guidelines](https://github.com/ConsenSys/ethql/wiki/Coding-Guidelines)\n- [Contributor License Agreement](https://github.com/ConsenSys/ethql/wiki/Contributor-License-Agreement)\n\nPlease see also our [Code of Conduct](https://github.com/ConsenSys/ethql/wiki/Contributor-Code-of-Conduct).\n\n## Feedback\n\n- Request a new feature on [GitHub](https://github.com/ConsenSys/ethql/wiki/Submitting-Bugs-and-Suggestions).\n- Vote for\n  [popular feature requests](https://github.com/ConsenSys/ethql/issues?q=is%3Aopen+is%3Aissue+label%3A%22Type%3A+Feature%22).\n- File a bug in [GitHub Issues](https://github.com/ConsenSys/ethql/issues).\n- [Tweet](https://twitter.com/PegasysEng) us with other feedback\n\n## Development team\n\n- Ra\xc3\xbal Kripalani [(contact)](mailto:raul.kripalani@consensys.net)\n- Akhila Raju [(contact)](mailto:akhila.raju@consensys.net)\n\n# Who we are\n\n<a href="https://pegasys.tech/?utm_source=github&utm_medium=source&utm_campaign=ethql" rel="nofollow"><img src="https://raw.github.com/ConsenSys/ethql/master/logo.svg?sanitize=true" alt="PegaSys logo" data-canonical-src="https://raw.github.com/ConsenSys/ethql/master/logo.svg?sanitize=true" width="400"></a>\n\nPegaSys\xe2\x80\x99 mission is to build blockchain solutions ready for production in business environments. We are committed to\nopen source, and are creating a framework for collaborative innovation for the public-chain community and leading\nenterprises.\n\nOur team is composed of engineers leading in the areas of big data processing, applied cryptography, open source\ncomputing, cloud services, and blockchain development.\n\n[Learn more about PegaSys.](https://pegasys.tech/?utm_source=github&utm_medium=source&utm_campaign=ethql)\n'