b'# Presto Ethereum Connector\nUnleash the Power of Presto Interactive SQL Querying on Ethereum Blockchain\n\n### Introduction\n[Presto](https://prestosql.io) is a powerful interactive querying engine that enables running SQL queries on anything -- be it MySQL, HDFS, local file, Kafka -- as long as there exist a connector to the source.\n\nThis is a Presto connector to the Ethereum blockchain data. With this connector, one can get hands on with Ethereum blockchain analytics work without having to know how to play with the nitty gritty Javascript API.\n\n### Prerequisites\nHave an Ethereum client that you can connect to. There are 2 options:\n1. Run [Geth](https://github.com/ethereum/go-ethereum) or [Parity](https://github.com/paritytech/parity) locally.\n1. Use [Infura](https://infura.io), a hosted Ethereum client in the cloud.    \n\n### Note\nSpecify a block range where you can (e.g. `WHERE block.block_number > x AND block.block_number < y`, or `WHERE transaction.tx_blocknumber > x AND transaction.tx_blocknumber < y`, or `WHERE erc20.erc20_blocknumber > x AND erc20.erc20_blocknumber < y`). Block number is the default and only predicate that can push down to narrow down data scan range. Queries without block ranges will cause presto to retrieve blocks all the way from the first block, which takes forever. \n\n### Usage\n1. [Install Presto](https://prestosql.io/docs/current/installation/deployment.html). *Follow the instructions on that page to create relevant config files.*  \n  By the end of this step, your presto installation folder structure should look like:\n    ```\n    \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 bin\n    \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 lib\n    \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 etc\n    \xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 config.properties\n    \xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 jvm.config\n    \xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 node.properties\n    \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 plugin\n    ```\n1. [Install Presto CLI](https://prestosql.io/docs/current/installation/cli.html)\n1. Clone this repo and run `mvn clean package` to build the plugin. You will find the built plugin in the `target` folder.\n1. Load the plugin to Presto  \n    a. Create the ethereum connector config inside of `etc`.  \n    `$ mkdir -p etc/catalog && touch etc/catalog/ethereum.properties`   \n    Paste the following to the ethereum.properties:\n    ```\n    connector.name=ethereum\n\n    # You can connect through Ethereum HTTP JSON RPC endpoint\n    # IMPORTANT - for local testing start geth with rpcport\n    # geth --rpc --rpcaddr "127.0.0.1" --rpcport "8545"\n    ethereum.jsonrpc=http://localhost:8545/\n\n\n    # Or you can connect through IPC socket\n    # ethereum.ipc=/path/to/ipc_socketfile\n\n    # Or you can connect to Infura\n    # ethereum.infura=https://mainnet.infura.io/<your_token>\n    ```\n    b. Copy and extract the built plugin to your presto plugin folder  \n    ```\n    $ mkdir -p plugin/ethereum \\\n      && cp <path_to_this_repo>/target/presto-ethereum-*-plugin.tar.gz . \\\n      && tar xfz presto-ethereum-*-plugin.tar.gz -C plugin/ethereum --strip-components=1\n    ```  \n\n    By the end of this step, your presto installation folder structure should look like:  \n      ```\n      \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 bin\n      \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 lib\n      \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 etc\n      \xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 catalog\n      \xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 ethereum.properties\n      \xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 config.properties\n      \xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 jvm.config\n      \xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 node.properties\n      \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 plugin\n      \xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 ethereum\n      \xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 <some jars>\n      ```\n1. There you go. You can now start the presto server, and query through presto-cli:  \n  ```\n  $ bin/launcher start\n  $ presto-cli --server localhost:8080 --catalog ethereum --schema default\n  ```\n\n### Use Cases\nInspired by [An Analysis of the First 100000 Blocks](https://blog.ethereum.org/2015/08/18/frontier-first-100k-blocks/), the following SQL queries capture partially what was depicted in that post.  \n\n- The first 50 block times (in seconds)\n```sql\nSELECT b.bn, (b.block_timestamp - a.block_timestamp) AS delta\nFROM\n    (SELECT block_number AS bn, block_timestamp\n    FROM block\n    WHERE block_number>=1 AND block_number<=50) AS a\nJOIN\n    (SELECT (block_number-1) AS bn, block_timestamp\n    FROM block\n    WHERE block_number>=2 AND block_number<=51) AS b\nON a.bn=b.bn\nORDER BY b.bn;\n```\n- Average block time (every 200th block from genesis to block 10000)\n```sql\nWITH\nX AS (SELECT b.bn, (b.block_timestamp - a.block_timestamp) AS delta\n        FROM\n            (SELECT block_number AS bn, block_timestamp\n            FROM block\n            WHERE block_number>=1 AND block_number<=10000) AS a\n        JOIN\n            (SELECT (block_number-1) AS bn, block_timestamp\n            FROM block\n            WHERE block_number>=2 AND block_number<=10001) AS b\n        ON a.bn=b.bn\n        ORDER BY b.bn)\nSELECT min(bn) AS chunkStart, avg(delta)\nFROM\n    (SELECT ntile(10000/200) OVER (ORDER BY bn) AS chunk, * FROM X) AS T\nGROUP BY chunk\nORDER BY chunkStart;\n```\n- Biggest miners in first 100k blocks (address, blocks, %)\n```sql\nSELECT block_miner, count(*) AS num, count(*)/100000.0 AS PERCENT\nFROM block\nWHERE block_number<=100000\nGROUP BY block_miner\nORDER BY num DESC\nLIMIT 15;\n```\n- ERC20 Token Movement in the last 100 blocks\n```sql\nSELECT erc20_token, SUM(erc20_value) FROM erc20\nWHERE erc20_blocknumber >= 4147340 AND erc20_blocknumber<=4147350\nGROUP BY erc20_token;\n```\n- Describe the database structure\n```sql\nSHOW TABLES;\n    Table\n-------------\n block\n erc20\n transaction\n\nDESCRIBE block;\nColumn                 | Type               | Extra | Comment\n-----------------------------------------------------------\nblock_number           | bigint             |       |\nblock_hash             | varchar(66)        |       |\nblock_parenthash       | varchar(66)        |       |\nblock_nonce            | varchar(18)        |       |\nblock_sha3uncles       | varchar(66)        |       |\nblock_logsbloom        | varchar(514)       |       |\nblock_transactionsroot | varchar(66)        |       |\nblock_stateroot        | varchar(66)        |       |\nblock_miner            | varchar(42)        |       |\nblock_difficulty       | bigint             |       |\nblock_totaldifficulty  | bigint             |       |\nblock_size             | integer            |       |\nblock_extradata        | varchar            |       |\nblock_gaslimit         | double             |       |\nblock_gasused          | double             |       |\nblock_timestamp        | bigint             |       |\nblock_transactions     | array(varchar(66)) |       |\nblock_uncles           | array(varchar(66)) |       |\n\n\nDESCRIBE transaction;\n\nColumn              |    Type     | Extra | Comment\n--------------------------------------------------\ntx_hash             | varchar(66) |       |\ntx_nonce            | bigint      |       |\ntx_blockhash        | varchar(66) |       |\ntx_blocknumber      | bigint      |       |\ntx_transactionindex | integer     |       |\ntx_from             | varchar(42) |       |\ntx_to               | varchar(42) |       |\ntx_value            | double      |       |\ntx_gas              | double      |       |\ntx_gasprice         | double      |       |\ntx_input            | varchar     |       |\n\n\nDESCRIBE erc20;\n      Column       |    Type     | Extra | Comment\n-------------------+-------------+-------+---------\n erc20_token       | varchar     |       |\n erc20_from        | varchar(42) |       |\n erc20_to          | varchar(42) |       |\n erc20_value       | double      |       |\n erc20_txhash      | varchar(66) |       |\n erc20_blocknumber | bigint      |       |\n```\n\n### Web3 Functions\nIn addition to the various built-in [Presto functions](https://prestodb.io/docs/current/functions.html), some web3 functions are ported so that they can be called inline with SQL statements directly. Currently, the supported web3 functions are\n1. [fromWei](https://github.com/ethereum/wiki/wiki/JavaScript-API#web3fromwei)\n1. [toWei](https://github.com/ethereum/wiki/wiki/JavaScript-API#web3towei)\n1. [eth_gasPrice](https://github.com/ethereum/wiki/wiki/JavaScript-API#web3ethgasprice)\n1. [eth_blockNumber](https://github.com/ethereum/wiki/wiki/JavaScript-API#web3ethblocknumber)\n1. [eth_getBalance](https://github.com/ethereum/wiki/wiki/JavaScript-API#web3ethgetbalance)\n1. [eth_getTransactionCount](https://github.com/ethereum/wiki/wiki/JavaScript-API#web3ethgettransactioncount)\n\n### Troubleshooting\n\n* You must use python2. You will get invalid syntax errors if you use Python3.\n```\n-> bin/launcher start\n  File "/your_path/presto-server-0.196/bin/launcher.py", line 38\n    except OSError, e:\n                  ^\nSyntaxError: invalid syntax\n```\n\n* Use Java 8 only. You might get the following errors if you use the wrong Java version.\n\n```\nUnrecognized VM option \'ExitOnOutOfMemoryError\'\nDid you mean \'OnOutOfMemoryError=<value>\'?\nError: Could not create the Java Virtual Machine.\nError: A fatal exception has occurred. Program will exit.\n```\n'