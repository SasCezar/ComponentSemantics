b'# NativeScript <img src="https://github.com/EddyVerbruggen/nativescript-bluetooth/raw/master/media/bluetooth.gif" height="20px" alt="Bluetooth"/> plugin\n\n[![NPM version][npm-image]][npm-url]\n[![Downloads][downloads-image]][npm-url]\n[![Twitter Follow][twitter-image]][twitter-url]\n\n[npm-image]:http://img.shields.io/npm/v/nativescript-bluetooth.svg\n[npm-url]:https://npmjs.org/package/nativescript-bluetooth\n[downloads-image]:http://img.shields.io/npm/dm/nativescript-bluetooth.svg\n[twitter-image]:https://img.shields.io/twitter/follow/eddyverbruggen.svg?style=social&label=Follow%20me\n[twitter-url]:https://twitter.com/eddyverbruggen\n\n> \xe2\x9a\xa0\xef\xb8\x8f This plugin is for Bluetooth Low Energy devices, so spec version 4 and up.\n\n## Installation\nFrom the command prompt go to your app\'s root folder and execute:\n\n```\ntns plugin add nativescript-bluetooth\n```\n\nAnd do yourself a favor by adding TypeScript support to your nativeScript app:\n\n```\ntns install typescript\n```\n\n## API\nWant to dive in quickly? Check out [the demo app](https://github.com/EddyVerbruggen/nativescript-bluetooth-demo)! Otherwise, mix and match these functions as you see fit:\n\n#### Prerequisites\n- [isBluetoothEnabled](#isbluetoothenabled)\n- [hasCoarseLocationPermission](#hascoarselocationpermission)\n- [requestCoarseLocationPermission](#requestcoarselocationpermission)\n- [turnBluetoothOn](#turnBluetoothOn)\n\n#### Discovery\n- [startScanning](#startscanning)\n- [stopScanning](#startscanning)\n\n#### Connectivity\n- [connect](#connect)\n- [disconnect](#disconnect)\n\n#### Interaction\n- [read](#read)\n- [write](#write)\n- [startNotifying](#startnotifying)\n- [stopNotifying](#stopnotifying)\n\n\n### isBluetoothEnabled\nReports if bluetooth is enabled.\n\n```js\n// require the plugin\nvar bluetooth = require("nativescript-bluetooth");\n\nbluetooth.isBluetoothEnabled().then(\n  function(enabled) {\n    console.log("Enabled? " + enabled);\n  }\n);\n```\n### hasCoarseLocationPermission\n__Since plugin version 1.2.0 the `startScanning` function will handle this internally so it\'s no longer mandatory to add permission checks to your code.__\n\nOn Android 6 you need to request permission to be able to interact with a Bluetooth peripheral (when the app is in the background) when targeting API level 23+. Even if the `uses-permission` tag for `ACCESS_COARSE_LOCATION` is present in `AndroidManifest.xml`.\n\nNote that for `BLUETOOTH` and `BLUETOOTH_ADMIN` you don\'t require runtime permission; adding those to `AndroidManifest.xml` suffices (which the plugin does for you).\n\nNote that `hasCoarseLocationPermission ` will return true when:\n* You\'re running this on iOS, or\n* You\'re targeting an API level lower than 23, or\n* You\'re using a device running Android < 6, or\n* You\'ve already granted permission.\n\n```js\nbluetooth.hasCoarseLocationPermission().then(\n  function(granted) {\n    // if this is \'false\' you probably want to call \'requestCoarseLocationPermission\' now\n    console.log("Has Location Permission? " + granted);\n  }\n);\n```\n\n### requestCoarseLocationPermission\n__Since plugin version 1.2.0 the `startScanning` function will handle this internally so it\'s no longer mandatory to add permission checks to your code.__\n\n```js\n// if no permission was granted previously this will open a user consent screen\nbluetooth.requestCoarseLocationPermission().then(\n  function(granted) {\n    console.log("Location permission requested, user granted? " + granted);\n  }\n);\n```\n\n### enable (Android only)\nThe promise will be rejected on iOS\n\n```js\n// This turns bluetooth on, will return false if the user denied the request.\nbluetooth.enable().then(\n  function(enabled) {\n    // use Bluetooth features if enabled is true \n  }\n);\n```\n\n### startScanning\nA few of the optional params require a bit of explanation:\n\n#### seconds\nScanning for peripherals drains the battery quickly, so you better not scan any longer than necessary. If a peripheral is in range and not engaged in another connection it usually pops up in under a second. If you don\'t pass in a number of seconds you will need to manually call `stopScanning`.\n\n#### skipPermissionCheck\nSet this to true if you don\'t want the plugin to check (and request) the required Bluetooth permissions.\nParticularly useful if you\'re running this function on a non-UI thread (ie. a Worker).\nRelevant on Android only.\n\n#### serviceUUIDs\nIt\'s inefficient to scan for all available Bluetooth peripherals and have them report all services they offer.\n\nIf you\'re only interested in finding a heartrate peripheral for instance, pass in service UUID `\'180d\'` like this: serviceUUIDs: [\'180d\']. If you add 2 or more (comma separated) services then only peripherals supporting ALL those services will match.\n\nNote that UUID\'s are ALWAYS strings; don\'t pass integers.\n\n#### onDiscovered\nWhile scanning the plugin will immediately report back uniquely discovered peripherals.\n\nThis function will receive an object representing the peripheral which contains these properties (and types):\n* `UUID: string`\n* `name: string`\n* `RSSI: number` (relative signal strength, can be used for distance measurement)\n* `services?:` (optional - this is set once connected to the peripheral)\n* `manufacturerId?: number` (optional)\n* `manufacturerData?: ArrayBuffer` (optional)\n\n```js\nbluetooth.startScanning({\n  serviceUUIDs: [],\n  seconds: 4,\n  onDiscovered: function (peripheral) {\n  \tconsole.log("Periperhal found with UUID: " + peripheral.UUID);\n  },\n  skipPermissionCheck: false,\n}).then(function() {\n  console.log("scanning complete");\n}, function (err) {\n  console.log("error while scanning: " + err);\n});\n```\n\n### stopScanning\nAt any time during a scan, being one where you passed in a number or seconds or not, you can stop the scan by calling this function.\n\nYou may for instance want to stop scanning when the peripheral you found in `startScanning`\'s `onDiscovered` callback matches your criteria.\n\n```js\nbluetooth.stopScanning().then(function() {\n  console.log("scanning stopped");\n});\n```\n\n### connect\nPass in the UUID of the peripheral you want to connect to and once a connection has been established the `onConnected` callback function will be invoked. This callback will received the peripheral object as before, but it\'s now enriched with a `services` property. An example of the returned peripheral object could be:\n\n```js\n  peripheral: {\n    UUID: \'3424-542-4534-53454\',\n    name: \'Polar P7 Heartrate Monitor\',\n    RSSI: \'-57\',\n    services: [{    \n      UUID: \'180d\',\n      name: \'Heartrate service\',\n      characteristics: [{\n        UUID: \'34534-54353-234324-343\',\n        name: \'Heartrate characteristic\',\n        properties: {\n          read: true,\n          write: false,\n          writeWithoutResponse: false,\n          notify: true\n        }\n      }]\n    }]\n  }\n```\n\nHere\'s the `connect` function in action with an implementation of `onConnected` that simply dumps the entire peripheral object to the console:\n\n```js\nbluetooth.connect({\n  UUID: \'04343-23445-45243-423434\',\n  onConnected: function (peripheral) {\n  \tconsole.log("Periperhal connected with UUID: " + peripheral.UUID);\n\n  \t// the peripheral object now has a list of available services:\n  \tperipheral.services.forEach(function(service) {\n  \t  console.log("service found: " + JSON.stringify(service));\n   });\n  },\n  onDisconnected: function (peripheral) {\n  \tconsole.log("Periperhal disconnected with UUID: " + peripheral.UUID);\n  }\n});\n```\n\nAlso note that `onDisconnected` function: if you try to interact with the peripheral after this event you risk crashing your app.\n\n\n### disconnect\nOnce done interacting with the peripheral be a good citizen and disconnect. This will allow other applications establishing a connection.\n\n```js\nbluetooth.disconnect({\n  UUID: \'34234-5453-4453-54545\'\n}).then(function() {\n  console.log("disconnected successfully");\n}, function (err) {\n  // in this case you\'re probably best off treating this as a disconnected peripheral though\n  console.log("disconnection error: " + err);\n});\n```\n\n### read\nIf a peripheral has a service that has a characteristic where `properties.read` is `true` then you can call the `read` function to retrieve the current state (value) of the characteristic.\n\nThe promise will receive an object like this:\n\n```js\n{\n  value: <ArrayBuffer>, // an ArrayBuffer which you can use to decode (see example below)\n  valueRaw: <72>, // the platform-specific binary value of the characteristic: NSData (iOS), byte[] (Android)\n  characteristicUUID: \'434234-234234-234234-434\'\n}\n```\n\nArmed with this knowledge, let\'s invoke the `read` function:\n\n```js\nbluetooth.read({\n  peripheralUUID: \'34234-5453-4453-54545\',\n  serviceUUID: \'180d\',\n  characteristicUUID: \'3434-45234-34324-2343\'\n}).then(function(result) {\n  // fi. a heartrate monitor value (Uint8) can be retrieved like this:\n  var data = new Uint8Array(result.value);\n  console.log("Your heartrate is: " + data[1] + " bpm");  \n}, function (err) {\n  console.log("read error: " + err);\n});\n```\n\n### write\nIf a peripheral has a service that has a characteristic where `properties.write` is `true` then you can call the `write` function to update the current state (value) of the characteristic.\n\nThe value must be hexadecimal, so if you want to send a `1`, send `0x01`. If you want to send multiple bytes add a comma: `"0x007F,0x006E"`.\n\n```js\nbluetooth.write({\n  peripheralUUID: \'34134-5453-4453-54545\',\n  serviceUUID: \'180e\',\n  characteristicUUID: \'3424-45234-34324-2343\',\n  value: \'0x01\' // a hex 1\n}).then(function(result) {\n  console.log("value written");\n}, function (err) {\n  console.log("write error: " + err);\n});\n```\n\n### writeWithoutResponse\nSame API as `write`, except that when the promise is invoked the value has not been written yet; it has only been requested to be written an no response will be received when it has.\n\n### startNotifying\nIf a peripheral has a service that has a characteristic where `properties.notify` is `true` then you can call the `startNotifying` function to retrieve the value changes of the characteristic.\n\nUsage is very much like `read`, but the result won\'t be sent to the promise, but to the `onNotify` callback function you pass in. This is because multiple notifications can be received and a promise can only resolve once. The value of the object sent to `onNotify` is the same as the one you get in the promise of `read`.\n\n```js\nbluetooth.startNotifying({\n  peripheralUUID: \'34234-5453-4453-54545\',\n  serviceUUID: \'180d\',\n  characteristicUUID: \'3434-45234-34324-2343\',\n  onNotify: function (result) {\n    // see the read example for how to decode ArrayBuffers\n\tconsole.log("read: " + JSON.stringify(result));\n  }  \n}).then(function() {\n  console.log("subscribed for notifications");\n});\n```\n\n### stopNotifying\nEnough is enough. When you\'re no longer interested in the values the peripheral is sending you do this:\n\n```js\nbluetooth.stopNotifying({\n  peripheralUUID: \'34234-5453-4453-54545\',\n  serviceUUID: \'180d\',\n  characteristicUUID: \'3434-45234-34324-2343\'\n}).then(function() {\n  console.log("unsubscribed for notifications");\n}, function (err) {\n  console.log("unsubscribe error: " + err);\n});\n```\n\n### setCharacteristicLogging\nThe app using bluetooth can generate many console.log messages - one for each characteristic read, write, change.\nThis can be reduced by calling `bluetooth.setCharacteristicLogging(false)`.\n\n## Changelog\n* 1.3.0  Added `manufacturerId` and `manufacturerData` to the `onDiscovered` callback of `startScanning`.\n* 1.2.0  Automatic permission handling on Android. Added `enable` so your app can now switch on Bluetooth if the user allows it (Android only).\n* 1.1.5  Added `setCharacteristicLogging` to reduce logging\n* 1.1.4  TypeScript fix and TS definition fix in package.json\n* 1.1.3  TypeScript fix\n* 1.1.2  Better Android M compatibility\n* 1.1.1  Better Android permission handling\n* 1.1.0  To be compatible with any Bluetooth device out there, the value returned from `read` and `notify` is now an `ArrayBuffer`.\n* 1.0.0  Initial release\n\n## Troubleshooting\nGet a merge issue in AndroidManifest.xml? Remove the platforms/android folder and rebuild.\n\n## Future work\n* Find an even better way to write values.\n* Support other properties of a characteristic.\n* Report advertising data peripherals broadcast.\n* Support interacting with multiple characteristics of the same peripheral at the same time.\n'