b'# NativeScript URL Handler Plugin  ![apple](https://cdn3.iconfinder.com/data/icons/picons-social/57/16-apple-32.png) ![android](https://cdn4.iconfinder.com/data/icons/logos-3/228/android-32.png)\n\n[![Greenkeeper badge](https://badges.greenkeeper.io/hypery2k/nativescript-urlhandler.svg)](https://greenkeeper.io/)\n[![Build Status](https://travis-ci.org/hypery2k/nativescript-urlhandler.svg?branch=master)](https://travis-ci.org/hypery2k/nativescript-urlhandler)\n[![Donate with Bitcoin](https://martinreinhardt-online.de/assets/img/button-badge-bitcoin.svg)](bitcoin:3NKtxw1SRYgess5ev4Ri54GekoAgkR213D)\n\n[![npm version](https://badge.fury.io/js/nativescript-urlhandler.svg)](http://badge.fury.io/js/nativescript-urlhandler)[![Maintainability](https://api.codeclimate.com/v1/badges/7db5d127cfd7529f7b9a/maintainability)](https://codeclimate.com/github/hypery2k/nativescript-urlhandler/maintainability)\n\n[![NPM](https://nodei.co/npm/nativescript-urlhandler.png?downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/nativescript-urlhandler/)\n\n<a name="donation"></a>\n> Feel free to **donate**\n>\n> <a target="_blank" href="https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=H8TR8246RCDJG">\n> <img alt="" border="0" src="https://www.paypalobjects.com/en_US/i/btn/btn_donate_SM.gif"/>\n> </img></a>\n> Or donate Bitcoins: bitcoin:3NKtxw1SRYgess5ev4Ri54GekoAgkR213D\n>\n> [![Bitcoin](https://martinreinhardt-online.de/bitcoin.png)](bitcoin:3NKtxw1SRYgess5ev4Ri54GekoAgkR213D)\n>\n> Also via [greenaddress](https://greenaddress.it/pay/GA3ZPfh7As3Gc2oP6pQ1njxMij88u/)\n\n\n\n# Usage\n\nJust add App links to your app, see iOS and Android instructions below, and register a handler for the URL data.\n\nSee this example for Angular:\n```typescript\nimport { Component, OnInit } from "@angular/core";\nimport { handleOpenURL, AppURL } from \'nativescript-urlhandler\';\n\n@Component({\n  selector: "gr-main",\n  template: "<page-router-outlet></page-router-outlet>"\n})\nexport class AppComponent {\n    constructor() {\n    } \n    \n    ngOnInit(){\n        handleOpenURL((appURL: AppURL) => {\n            console.log(\'Got the following appURL\', appURL);\n        });\n     }\n}\n\n```\nAnd for pure NativeScript:\n```javascript\nvar handleOpenURL = require("nativescript-urlhandler").handleOpenURL;\n\nhandleOpenURL(function(appURL) {\n  console.log(\'Got the following appURL\', appURL);\n});\n\n```\nOr as TypeScript:\n```typescript\nimport { handleOpenURL, AppURL } from \'nativescript-urlhandler\';\n\nhandleOpenURL((appURL: AppURL) => {\n  console.log(\'Got the following appURL\', appURL);\n});\n\n```\n\n>Note: see `demo` app for sample usage. Start by adding handleOpenURL in app main!\n\n\n## Installation\n\n```bash\n$ tns plugin add nativescript-urlhandler\n```\n\nOr if you want to use the development version (nightly build), which maybe not stable!:\n\n```bash\n$ tns plugin add nativescript-urlhandler@next\n```\n\n\n### Android\n\nReplace *myapp* with your desired scheme and set launchMode to *singleTask*\n```xml\n<activity android:name="com.tns.NativeScriptActivity" ... android:launchMode="singleTask"...>\n        ...\n    <intent-filter>\n    <data android:scheme="myapp" /> \n    <action android:name="android.intent.action.VIEW" /> \n    <category android:name="android.intent.category.DEFAULT" /> \n    <category android:name="android.intent.category.BROWSABLE" /> \n    </intent-filter>\n```\n\nFor example:\n\n```xml\n<activity android:name="com.tns.NativeScriptApplication" android:label="@string/app_name" android:launchMode="singleTask">\n  <intent-filter>\n      <action android:name="android.intent.action.MAIN" />\n      <category android:name="android.intent.category.LAUNCHER" />\n  </intent-filter>\n  <intent-filter>\n      <action android:name="android.intent.action.VIEW" />\n      <category android:name="android.intent.category.DEFAULT" />\n      <category android:name="android.intent.category.BROWSABLE" /> \n      <data android:scheme="myapp" android:host="__PACKAGE__" />\n  </intent-filter>\n</activity>\n\n```\n\nThe android:launchMode="singleTask" tells the Android operating system to launch the app with a new instance of the activity, or use an existing one. Without this your app will launch multiple instances of itself which is no good.\n\n### iOS\n\n```xml\n<key>CFBundleURLTypes</key>\n<array>\n    <dict>\n        <key>CFBundleURLName</key>\n        <string>com.yourcompany.myapp</string>\n    </dict>\n    <dict>\n        <key>CFBundleURLSchemes</key>\n        <array>\n            <string>myapp</string>\n        </array>\n    </dict>\n</array>\n```\n\n# FAQ\n\n## Callback handling\n\nThe "handleOpenURL" callback must be called before application initialization, otherwise you\'ll see this error in the console:\n\n```\n    No callback provided. Please ensure that you called "handleOpenURL" during application init!\n``` \n\n## Webpack\n\n### TypeScript Config\n\nIf your Webpack Build is failing, try adapting your tsconfig to this:\n\n```\n    "compilerOptions": {\n        "module": "commonjs",\n        "target": "es5",\n        "experimentalDecorators": true,\n        "emitDecoratorMetadata": true,\n        "noEmitHelpers": true,\n        "noEmitOnError": true,\n        "lib": [\n            "es6",\n            "dom",\n            "es2015.iterable"\n        ],\n        "baseUrl": ".",\n        "paths": {\n            "*": [\n                "./node_modules/tns-core-modules/*",\n                "./node_modules/*"\n            ]\n        }\n    },\n    "exclude": [\n        "node_modules",\n        "platforms",\n        "**/*.aot.ts"\n    ]\n```\n'