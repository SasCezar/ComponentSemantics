b'# NativeScript Secure Storage plugin\n\n[![NPM version][npm-image]][npm-url]\n[![Downloads][downloads-image]][npm-url]\n[![Twitter Follow][twitter-image]][twitter-url]\n\n[npm-image]:http://img.shields.io/npm/v/nativescript-secure-storage.svg\n[npm-url]:https://npmjs.org/package/nativescript-secure-storage\n[downloads-image]:http://img.shields.io/npm/dm/nativescript-secure-storage.svg\n[twitter-image]:https://img.shields.io/twitter/follow/eddyverbruggen.svg?style=social&label=Follow%20me\n[twitter-url]:https://twitter.com/eddyverbruggen\n\n## Installation\nFrom the command prompt go to your app\'s root folder and execute:\n\n```\ntns plugin add nativescript-secure-storage\n```\n\n## Demo app\nWant to dive in quickly? Check out [the demo](demo)! Otherwise, continue reading.\n\nYou can run the demo app from the root of the project by typing `npm run demo.ios.device`.\n\n<img src="https://raw.githubusercontent.com/EddyVerbruggen/nativescript-secure-storage/master/screenshots/ios-demo.png?v=2" width="375px" height="500px"/>\n\n__PRO TIP:__ Want to store objects instead of strings? Use `JSON.stringify` with `set` and `JSON.parse` with `get`.\n\n## API\n\n### `set` | `setSync`\n> "In order to GET something you first need to SET it."\n>\n> -- _Eddy Verbruggen_\n\n##### JavaScript\n```js\n// require the plugin\nvar SecureStorage = require("nativescript-secure-storage").SecureStorage;\n\n// instantiate the plugin\nvar secureStorage = new SecureStorage();\n\n// async\nsecureStorage.set({\n  key: "foo",\n  value: "I was set at " + new Date()\n}).then(\n  function(success) {\n    console.log("Successfully set a value? " + success);\n  }\n);\n\n// sync\nvar success = secureStorage.setSync({\n  key: "foo",\n  value: "I was set at " + new Date()\n});\n```\n\n##### TypeScript\n```typescript\n// require the plugin\nimport { SecureStorage } from "nativescript-secure-storage";\n\n// instantiate the plugin\nlet secureStorage = new SecureStorage();\n\n// async\nsecureStorage.set({\n  key: "foo",\n  value: "I was set at " + new Date()\n}).then(success => console.log("Successfully set a value? " + success));\n\n// sync\nconst success = secureStorage.setSync({\n  key: "foo",\n  value: "I was set at " + new Date()\n});\n```\n\n### `get` | `getSync`\nWill return `null` if not found.\n\n##### JavaScript\n```js\n// async\nsecureStorage.get({\n  key: "foo"\n}).then(\n  function(value) {\n    console.log("Got value: " + value);\n  }\n);\n\n// sync\nvar value = secureStorage.getSync({\n  key: "foo"\n});\n```\n\n##### TypeScript\n```typescript\n// async\nsecureStorage.get({\n  key: "foo"\n}).then(value => console.log("Got value: " + value));\n\n// sync\nconst value = secureStorage.getSync({\n  key: "foo"\n});\n```\n\n### `remove` | `removeSync`\n\n##### JavaScript\n```js\n// async\nsecureStorage.remove({\n  key: "foo"\n}).then(\n  function(success) {\n    console.log("Removed value? " + success);\n  }\n);\n\n// sync\nvar success = secureStorage.removeSync({\n  key: "foo"\n});\n```\n\n##### TypeScript\n```typescript\n// async\nsecureStorage.remove({\n  key: "foo"\n}).then(success => console.log("Successfully removed a value? " + success));\n\n// sync\nconst success = secureStorage.removeSync({\n  key: "foo"\n});\n```\n\n### `removeAll` | `removeAllSync`\n\n##### JavaScript\n```js\n// async\nsecureStorage.removeAll().then(\n  function(success) {\n    console.log("Removed value? " + success);\n  }\n);\n\n// sync\nvar success = secureStorage.removeAllSync();\n```\n\n##### TypeScript\n```typescript\n// async\nsecureStorage.removeAll().then(success => console.log("Successfully removed a value? " + success));\n\n// sync\nconst success = secureStorage.removeAllSync();\n```\n\n### `clearAllOnFirstRun` | `clearAllOnFirstRunSync`\nThese functions can be used if you want to clear data when your app is reinstalled.\n\nThis is only really useful **on iOS** because if you write something (through this plugin) to the Keychain, this data **won\'t** be removed when the app is uninstalled.\nSo the next time the same app is installed, it will find the data in the keychain.\n\nSo if you want to clear \'lingering\' data from a previous install, make sure you run one of these\nmethods before using other methods this plugin provides.\n\n##### JavaScript\n```js\n// async\nsecureStorage.clearAllOnFirstRun().then(\n  function(success) {\n      console.log(success ? "Successfully removed all data on the first run" : "Data not removed because this is not the first run");\n  }\n);\n\n// sync\nvar success = secureStorage.clearAllOnFirstRunSync();\n```\n\n##### TypeScript\n```typescript\n// async\nsecureStorage.clearAllOnFirstRun().then(success => {\n    console.log(success ? "Successfully removed all data on the first run" : "Data not removed because this is not the first run");\n});\n\n// sync\nconst success = secureStorage.clearAllOnFirstRunSync();\n```\n\n### `isFirstRun` | `isFirstRunSync`\nAs a bonus, you can piggyback the \'first run\' mechanism to do anything you want when the plugin detects\nthis is the first run (after an install or install-delete-reinstall).\n\n##### TypeScript\n```typescript\n// sync\nif (secureStorage.isFirstRunSync()) {\n  // do whatever you want\n}\n\n// async\nsecureStorage.isFirstRun().then(isFirst => {\n  // if isFirst is true, do whatever you like\n});\n```\n\n## Usage with Angular\n\nIn your view:\n\n```html\n<Button text="set secure value" (tap)="setSecureValue()"></Button>\n```\n\nIn your `@Component`:\n\n```typescript\nimport { SecureStorage } from "nativescript-secure-storage";\n\nexport class MyComponent {\n  secureStorage = new SecureStorage();\n\n  // a method that can be called from your view\n  setSecureValue() {\n    this.secureStorage.set({\n      key: \'myKey\',\n      value: \'my value\'\n    }).then(success => { console.log(success)});\n  }\n}\n```\n## iOS Security++\nBy default the plugin uses `kSecAttrAccessibleAlwaysThisDeviceOnly` access control to the keychain. This means that the keychain value can be accessed even if the device is locked. If you want to enhance security and you do not need background access, or if you want to allow the value to be backed up and migrated to another device, you can use any of keys defined [here](https://developer.apple.com/documentation/security/ksecattraccessiblealwaysthisdeviceonly?language=objc#see-also) and pass it when you create an instance of `SecureStorage`, for example\n```ts\ndeclare const kSecAttrAccessibleWhenUnlockedThisDeviceOnly; // This is needed in case you don\'t have tns-platform-declarations module installed. \nconst secureStorage = new SecureStorage(kSecAttrAccessibleWhenUnlockedThisDeviceOnly);\n```\n\n## Credits\n* On __iOS__ we\'re leveraging the KeyChain using the [SAMKeychain](https://github.com/soffes/SAMKeychain) library (on the Simulator `NSUserDefaults`),\n* On __Android__ we\'re using [Hawk](https://github.com/orhanobut/hawk) library which internally uses [Facebook conceal](https://github.com/facebook/conceal).\n* Thanks, [Prabu Devarrajan](https://github.com/prabudevarrajan) for [adding the `deleteAll` function](https://github.com/EddyVerbruggen/nativescript-secure-storage/pull/11)!\n'