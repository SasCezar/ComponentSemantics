b'**This repo only supports NativeScript pre-6.0. The latest version of the plugin supporting NS 6+ is availble as part of [ProPlugins](https://proplugins.org).**\n# NativeScript In-App Purchases plugin\n[![Build Status](https://travis-ci.org/PeterStaev/nativescript-purchase.svg?branch=master)](https://travis-ci.org/PeterStaev/nativescript-purchase)\n[![npm downloads](https://img.shields.io/npm/dm/nativescript-purchase.svg)](https://www.npmjs.com/package/nativescript-purchase)\n[![npm downloads](https://img.shields.io/npm/dt/nativescript-purchase.svg)](https://www.npmjs.com/package/nativescript-purchase)\n[![npm](https://img.shields.io/npm/v/nativescript-purchase.svg)](https://www.npmjs.com/package/nativescript-purchase)\n\nA NativeScript plugin for making in-app purchases.\n\n## Installation\nRun the following command from the root of your project:\n\n`tns plugin add nativescript-purchase`\n\nThis command automatically installs the necessary files, as well as stores nativescript-purchase as a dependency in your project\'s package.json file.\n\nIn order to get IntelliSense and make TypeScript compile without problems, add the following to your `references.d.ts`:\n```typescript\n/// <reference path="./node_modules/nativescript-purchase/nativescript-purchase.d.ts" />\n```\n\n## Configuration\nIn order for your in-app purchases to be recognized by the plugin, you must configure those on the Google/iTunes side. You can check the [in-depth tutorials](#in-depth-tutorial) at the bottom of the page to see how to do it step-by-step. \n\n## API\n\n### Static Properties\n* **transactionUpdatedEvent** - *String*  \nString value used when hooking to `transactionUpdated` event.\n\n### Static methods\n* **init(string[]): Promise<void>**  \nInitializes the plugin for work with the specified in-app purchase identifiers. \n\n* **getProducts(): Promise<Product[]>**  \nReturns the product details *(see below)* for the in-app purchase identifiers that were used in init. \n\n* **canMakePayments(): boolean**  \nChecks whether the current user is allowed to make in-app purchases. \n\n* **buyProduct(Product, string?): void**  \nBuys the given product. On Android you can send custom string data that will be present in the `Transaction`.\n\n* **consumePurchase(string): Promise<number>**  \nConsumes the purchases represented by the given transaction token. If the promise returns `0` the consume was successful. Note that this is needed only for Android. For iOS each purchase is automatically consumed when it is set up as a consumabel product in iTunes. \n\n* **restorePurchases(): Promise<void>**\nRestores previous purchased items for the current user. On Android, returns a promise for when the purchases have been restored. On iOS, returns a completed promise (as you can use getStoreReceipt to get the receipt instantly anytime).\n\n* **getStoreReceipt(): string**  \nGets the application\'s Base64 encoded store receipt for the currently logged in store user. This is useful when checking subscription status under iOS. For Android the function always returns `undefined`.\n\n### Events\n* **transactionUpdated**  \nTriggered a buy/restore transaction changes its state. You receive a `Transaction` object where you can check the status and other properties  *(see below)* of the transaction. \n\n### `Product` properties\n* **nativeValue**  \nThe native object representing the product. On iOS this will be an instance of `SKProduct`, and on Android this will be a `org.json.JSONObject`\n\n* **productIdentifier** - *string*  \nThe in-app product identifier as setup on iTunes Connect or Google Store.\n\n* **localizedTitle** - *string*  \nThe title of the product based on the user\'s phone localization. \n\n* **localizedDescription** - *string*  \nThe description of the product based on the user\'s phone localization. \n\n* **priceAmount** - *number*  \nThe numerical value of the price for this in-app product based on the currency of the user\'s app store. \n\n* **priceFormatted** - *string*  \nThe formatted `priceAmount` with the corresponding currency symbol of the user\'s app store. \n\n* **priceCurrencyCode** - *string*  \nThe [ISO4217](https://en.wikipedia.org/wiki/ISO_4217#Active_codes) currency code of the price (BGN, EUR, USD, etc.)\n\n* **productType** - *"inapp" | "subs"*  \nThe type of the product - in-app purchase or subscription.\n\n* **subscriptionPeriod** - *string*  \nThe [ISO8601](https://en.wikipedia.org/wiki/ISO_8601#Durations) duration of the subscription. For example `P1D` stands for a daily subscription, `P1M` is a monthly subscription, `P3M` is a three month subscription. The property has a value only for products of type `"subs"`.\n\n### `Transaction` properties\n* **nativeValue**  \nThe native value representing the transaction. On iOS this will be an instance of `SKPaymentTransactio` and on Android this will be a `org.json.JSONObject`.\n\n* **transactionState** - *string*  \nThe state of the transaction. Can be one of the following:\n    * Purchased\n    * Restored\n    * Failed\n    * Deferred *(iOS only)*\n    * Purchasing *(iOS only)*\n    * Refunded *(Android only)*\n\n* **productIdentifier** - *string*  \nThe in-app product identifier that triggerred this transaction. \n\n* **transactionIdentifier** - *string*  \nThe unique identifier of the transaction.\n\n* **transactionDate** - *Date*  \nThe date of the transaction.\n\n* **transactionReceipt** - *string*  \nThe Base64 encoded transaction receipt. You can use this to do additional verification on your backend. \n\n* **originalTransaction** - *Transaction*  \nThis will be present only when restoring purchases and will contain the original transaction that purchased a given product. \n\n* **developerPayload** - *string*  \nCustom data sent with `buyProduct`.\n\n* **dataSignature** - *string (Android only)*  \nThe signature for the transaction.\n\n## Usage\n\nFirst we need to initialize the plugin with a list for product identifier that will be available for purchase. This is best to be done before the application starts.\n\nNote that it is possible that the initialization of the plugin takes more time than the application to boot. So especially in the cases that you load the products on your landing page, it is best that to save the `Promise` returned by the `init()` method and then check it before trying to get your products. \n\n```typescript\nimport *  as purchase from "nativescript-purchase";\n(global as any).purchaseInitPromise = purchase.init(["com.sample.purchase.coolproduct1", "com.sample.purchase.coolproduct2"]);\n```\n\nTo get the actual products with details (like title, price, currency, etc.) you should use:\n```typescript\nimport { Product } from "nativescript-purchase/product";\n\n(global as any).purchaseInitPromise.then(() => {\n    purchase.getProducts().then((products: Array<Product>) => {\n        products.forEach((product: Product) => {\n            console.log(product.productIdentifier);\n            console.log(product.localizedTitle);\n            console.log(product.priceFormatted);\n        });\n    });\n});\n```\n\nBefore proceeding with buying items you should hook up to the `transactionUpdated` event. This way you will receive information about the transaction state while it is executing and take necessary action when the transaction completes:\n```typescript\nimport { Transaction, TransactionState } from "nativescript-purchase/transaction";\nimport * as applicationSettings from "application-settings";\n\npurchase.on(purchase.transactionUpdatedEvent, (transaction: Transaction) => {\n    if (transaction.transactionState === TransactionState.Purchased) {\n        alert(`Congratulations you just bought ${transaction.productIdentifier}!`);\n        console.log(transaction.transactionDate);\n        console.log(transaction.transactionIdentifier);\n        applicationSettings.setBoolean(transaction.productIdentifier, true);\n    }\n    else if (transaction.transactionState === TransactionState.Restored) {\n        console.log(`Purchase of ${transaction.originalTransaction.productIdentifier} restored.`);\n        console.log(transaction.originalTransaction);\n        console.log(transaction.originalTransaction.transactionDate);\n        applicationSettings.setBoolean(transaction.originalTransaction.productIdentifier, true);\n    }\n    else if (transaction.transactionState === TransactionState.Failed) {\n        alert(`Purchase of ${transaction.productIdentifier} failed!`);\n    }    \n});\n```\n\nNow let\'s buy a product!\n```typescript\nif (purchase.canMakePayments()) {\n    // NOTE: \'product\' must be the same instance as the one returned from getProducts()\n    purchase.buyProduct(product);\n}\nelse {\n    alert("Sorry, your account is not eligible to make payments!");\n}\n```\n\nNOTE: Because of the difference between iOS and Android in terms of consuming purchases - for iOS this is defined\nin the product you add in iTunes Connect and it is consumed automatically, where for Android it has to be done manually - \nif you will be supporting Android you will have to manually consume the purchase by calling the `consumePurchase` method. \nThe methods takes a single parameter that is the receipt from the transaction:\n```typescript\npurchase.on(purchase.transactionUpdatedEvent, (transaction: Transaction) => {\n    if (transaction.transactionState === TransactionState.Purchased && transaction.productIdentifier.indexOf(".consume") >= 0) {\n        purchase.consumePurchase(transaction.transactionReceipt)\n            .then((responseCode) => console.log(responseCode)) // If responseCode === 0 the purchase has been successfully consumed\n            .catch((e) => console.log(e));\n    }    \n});\n``` \n\nAnd to restore previous purchases to the user\'s device:\n```typescript\npurchase.restorePurchases();\n```\n\n## Demo\nThis repository includes a plain NativeScript demo. Note that in order to set up and run the demo you need to have the Grunt CLI installed globally. If you don\'t have it installed, you can do it by running the following in your shell:\n```shell\n$ npm install -g grunt-cli\n```\nOnce you have Grunt CLI set up in order to set it up the demo run the following in your shell:\n```shell\n$ git clone https://github.com/peterstaev/nativescript-purchase\n$ cd nativescript-purchase\n$ npm install\n$ grunt compile\n$ cd demo\n```\nYou will not be able to directly run the demo, becuase you need to add your purchases to the stores. Also since I already registered the application ID you will have to change that in the `package.json` file located in the `demo` folder. So make sure you read and follow the [in-depth tutorials](#in-depth-tutorial) below in order to get started with the demo.\n\n## In-depth Tutorial\n1. [Adding the plugin to your application and creating a purchase workflow](https://www.tangrainc.com/blog/2017/02/implementing-app-purchases-nativescript-application-part-1/)\n2. [Configuring iTunes Connect and making purchases on iOS](https://www.tangrainc.com/blog/2017/03/implementing-app-purchases-nativescript-application-part-2/)\n3. [Configuring Google Play Store and making purchases on Android](https://www.tangrainc.com/blog/2017/06/implementing-app-purchases-nativescript-application-part-3/)\n\n## Donate\n[![Donate](https://img.shields.io/badge/paypal-donate-brightgreen.svg)](https://bit.ly/2AS9QKB)\n\n`bitcoin:14fjysmpwLvSsAskvLASw6ek5XfhTzskHC`\n\n![Donate](https://www.tangrainc.com/qr.png)\n'