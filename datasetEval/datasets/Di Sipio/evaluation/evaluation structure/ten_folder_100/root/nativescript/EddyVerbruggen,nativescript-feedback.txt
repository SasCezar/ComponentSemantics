b'# NativeScript Feedback\n\n[![Build Status][build-status]][build-url]\n[![NPM version][npm-image]][npm-url]\n[![Downloads][downloads-image]][npm-url]\n[![Twitter Follow][twitter-image]][twitter-url]\n\n[build-status]:https://travis-ci.org/EddyVerbruggen/nativescript-feedback.svg?branch=master\n[build-url]:https://travis-ci.org/EddyVerbruggen/nativescript-feedback\n[npm-image]:http://img.shields.io/npm/v/nativescript-feedback.svg\n[npm-url]:https://npmjs.org/package/nativescript-feedback\n[downloads-image]:http://img.shields.io/npm/dm/nativescript-feedback.svg\n[twitter-image]:https://img.shields.io/twitter/follow/eddyverbruggen.svg?style=social&label=Follow%20me\n[twitter-url]:https://twitter.com/eddyverbruggen\n\n\n<img src="https://github.com/EddyVerbruggen/nativescript-feedback/raw/master/media/demo-ios.gif" width="377px" height="691px"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n<img src="https://github.com/EddyVerbruggen/nativescript-feedback/raw/master/media/demo-android.gif" height="691px"/>\n\n\n_iOS and Android running the included demo - [much better framerate on YouTube](https://www.youtube.com/watch?v=A3jX5g9msm0)!_\n\n## Demo apps\n \n### NativeScript-Core (XML)\nCheck out the [demo](/demo) folder. This is how to clone and run it:\n\n```bash\ngit clone https://github.com/EddyVerbruggen/nativescript-feedback\ncd nativescript-feedback/src\nnpm run demo.ios # or demo.android\n```\n\n### NativeScript-Angular\nThis plugin is part of the [plugin showcase app](https://github.com/EddyVerbruggen/nativescript-pluginshowcase/tree/master/app/feedback) I built using Angular.\n\n### NativeScript-Vue\nCheck out the [demo-vue](/demo-vue) folder. This is how to clone and run it:\n\n```bash\ngit clone https://github.com/EddyVerbruggen/nativescript-feedback\ncd nativescript-feedback/src\nnpm run demo-vue.ios # or demo-vue.android\n```\n\n## Installation\n```bash\ntns plugin add nativescript-feedback\n```\n\n## API\n\n### requiring / importing the plugin\n\n#### JavaScript\n```js\nvar FeedbackPlugin = require("nativescript-feedback");\nvar feedback = new FeedbackPlugin.Feedback();\n```\n\n#### TypeScript\n```js\nimport { Feedback, FeedbackType, FeedbackPosition } from "nativescript-feedback";\n\nexport class MyClassWithFeedback {\n  private feedback: Feedback;\n  \n  constructor() {\n    this.feedback = new Feedback();\n  }\n}\n```\n\n### show\n\nShowing feedback can be as easy as:\n\n```js\nthis.feedback.show({\n  message: "Easiest thing ever, right?"\n});\n```\n\nThat uses a bunch of sane defaults.\nHowever, there are a lot of things you may want to tweak. All of which are optional:\n\n| Property | Default | Description |\n| --- | --- | --- |\n| `title` | `undefined` | The **bold** title at the top. |\n| `titleColor` | `new Color("white")` | The title\'s color. |\n| `titleFont` | Bold system font | iOS needs the font name and android the file name. See the demo for examples. |\n| `titleSize` | `16` | The size of the title font. |\n| `message` | `undefined` | The message below the title. |\n| `messageColor` | `new Color("white")` | The message\'s color. |\n| `messageFont` | System font | iOS needs the font name and android the file name. See the demo for examples. |\n| `messageSize` | `13` | The size of the message font.|\n| `duration` | `4000` | The duration to show the feedback (milliseconds). |\n| `type` | [`FeedbackType.Custom`](https://github.com/EddyVerbruggen/nativescript-feedback/blob/36bdf322837bf47fc2124b3e8f779227969d3f43/src/feedback.common.ts#L13) | One of `.Custom`, `.Success`, `.Warning`, `.Error`, `.Info`. Each with a distinct style as show in the animations above. You can still override all other properties according to your liking. |\n| `position` | [`FeedbackPosition.Top`](https://github.com/EddyVerbruggen/nativescript-feedback/blob/36bdf322837bf47fc2124b3e8f779227969d3f43/src/feedback.common.ts#L4) | Either `.Top` or `.Bottom` *(iOS only)*. |\n| `backgroundColor` | Depends on the `type` | The background\'s color. |\n| `icon` | Depends on the `type` | A custom icon shown on the left. Loaded from `App_Resources/<platform>` folders. [Example here](https://github.com/EddyVerbruggen/nativescript-feedback/blob/master/demo/app/main-view-model.ts#L74). Want no icon at all? Don\'t set a `type`. |\n| `android.iconColor` | See description | On iOS the icon color is as-is, but on Android it\'s white. Set this color to override the latter (also see the TypeScript example below). |\n| `android.iconPulseEnabled` | `true` | On Android you can disable the pulsating effect of the icon. |\n| `onTap`| `undefined` | A callback function that gets invoked when the user tapped your feedback. |\n| `onShow`| `undefined` | A callback for when the feedback is shown. iOS note: is called twice: once when animating and once when done. |\n| `onHide`| `undefined` | A callback for when the feedback is hidden. |\n\nOne of the examples in [the demo app](demo/index.html) shows a custom icon and alternative colors. You\'d get there by doing:\n\n#### JavaScript\n```js\nvar FeedbackType = require ("nativescript-feedback").FeedbackType;\nvar FeedbackPosition = require ("nativescript-feedback").FeedbackPosition;\nvar color = require("color");\n\nthis.feedback.show({\n  title: "Thumbs up!",\n  titleColor: new color.Color("#222222"),\n  position: FeedbackPosition.Bottom, // iOS only\n  type: FeedbackType.Custom, // this is the default type, by the way\n  message: "Custom colors and icon. Loaded from the App_Resources folder.",\n  messageColor: new color.Color("#333333"),\n  duration: 3000,\n  backgroundColor: new color.Color("yellowgreen"),\n  icon: "customicon", // in App_Resources/platform folders\n  onTap: function() { console.log("showCustomIcon tapped") },\n  onShow: function(animating) { console.log(animating ? "showCustomIcon animating" : "showCustomIcon shown") },\n  onHide: function() { console.log("showCustomIcon hidden") }\n});\n```\n\n#### TypeScript\n```typescript\nimport { FeedbackType, FeedbackPosition } from "nativescript-feedback";\nimport { Color } from "tns-core-modules/color";\n\nthis.feedback.show({\n  title: "Thumbs up!",\n  titleColor: new Color("#222222"),\n  position: FeedbackPosition.Bottom, // iOS only\n  type: FeedbackType.Custom, // this is the default type, by the way\n  message: "Custom colors and icon. Loaded from the App_Resources folder.",\n  messageColor: new Color("#333333"),\n  duration: 3000,\n  backgroundColor: new Color("yellowgreen"),\n  icon: "customicon", // in App_Resources/platform folders\n  android: {\n    iconColor: new Color("#222222") // optional, leave out if you don\'t need it\n  },\n  onTap: () => console.log("showCustomIcon tapped"),\n  onShow: animating => console.log(animating ? "showCustomIcon animating" : "showCustomIcon shown"),\n  onHide: () => console.log("showCustomIcon hidden")\n});\n```\n\n### hide\nHiding a message can be done automatically (see `duration`), by a gesture (tap / swipe), or programmatically as shown here:\n\n```js\nthis.feedback.hide();\n```\n\n### Convenience functions\nSince in many cases you want to only show success / info / warning / error messages anyway, this plugin\'s got you covered. You can call any of these functions and still pass in any of the aforementioned properties to tweak it to your liking:\n\n#### `success`\n```js\nthis.feedback.success({\n  title: "Awesome",\n  message: "That was great!"\n});\n```\n\n#### `info`\n```js\nthis.feedback.info({\n  title: "Info <> Data",\n  message: "Info is relevant data, not just any data."\n});\n```\n\n#### `warning`\n```js\nthis.feedback.warning({\n  message: "Your battery is almost empty"\n});\n```\n\n#### `error`\n```js\nthis.feedback.error({\n  title: "KABOoooOOM!",\n  titleColor: new Color("black")\n});\n```\n\n## Credits\nOn Android we\'re using the [Alerter library by Tapadoo](https://github.com/Tapadoo/Alerter),\nand on iOS [ISMessages by ilyainyushin](https://github.com/ilyainyushin/ISMessages).\n'