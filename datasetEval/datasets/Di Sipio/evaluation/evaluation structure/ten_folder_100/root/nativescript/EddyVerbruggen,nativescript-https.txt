b'# NativeScript-HTTPS\n\n[![NPM version][npm-image]][npm-url]\n[![Downloads][downloads-image]][npm-url]\n[![TotalDownloads][total-downloads-image]][npm-url]\n[![Twitter Follow][twitter-image]][twitter-url]\n\n[build-status]:https://travis-ci.org/EddyVerbruggen/nativescript-https.svg?branch=master\n[build-url]:https://travis-ci.org/EddyVerbruggen/nativescript-https\n[npm-image]:http://img.shields.io/npm/v/nativescript-https.svg\n[npm-url]:https://npmjs.org/package/nativescript-https\n[downloads-image]:http://img.shields.io/npm/dm/nativescript-https.svg\n[total-downloads-image]:http://img.shields.io/npm/dt/nativescript-https.svg?label=total%20downloads\n[twitter-image]:https://img.shields.io/twitter/follow/eddyverbruggen.svg?style=social&label=Follow%20me\n[twitter-url]:https://twitter.com/eddyverbruggen\n\n### The definitive way to hit HTTP based APIs in Nativescript.\nEasily integrate the most reliable native networking libraries with the latest and greatest HTTPS security features.\n\n#### A drop-in replacement for the [default http module](https://docs.nativescript.org/cookbook/http#get-response-status-code).\n\n## Features\n- Modern TLS & SSL security features\n- Shared connection pooling reduces request latency\n- Silently recovers from common connection problems\n- Everything runs on a native background thread\n- Transparent GZIP\n- HTTP/2 support\n\n## FAQ\n> What the flip is SSL pinning and all this security mumbo jumbo?\n\n[How to make your apps more secure with SSL pinning](https://infinum.co/the-capsized-eight/how-to-make-your-ios-apps-more-secure-with-ssl-pinning).\n\n> Do I have to use SSL pinning?\n\n**No.** This plugin works out of the box without any security configurations needed. Either way you\'ll still benefit from all the features listed above.\n\n## Demo\n```shell\ngit clone https://github.com/EddyVerbruggen/nativescript-https\ncd nativescript-https/src\nnpm run demo.ios\nnpm run demo.android\n```\n\n## Installation\n#### Add `tns-platform-declarations` for Android and iOS to your `references.d.ts`!\n```typescript\n/// <reference path="./node_modules/tns-platform-declarations/android.d.ts" />\n/// <reference path="./node_modules/tns-platform-declarations/ios.d.ts" />\n```\nWe also recommend adding `"skipLibCheck": true,` to your `tsconfig.json`.\nMore information on that can be found [here](https://github.com/NativeScript/NativeScript/tree/master/tns-platform-declarations).\n\nInstall the plugin:\n```bash\ntns plugin add nativescript-https\n```\n\n## Examples\n### Hitting an API using `GET` method\n```typescript\nimport * as Https from \'nativescript-https\'\nHttps.request({\n\turl: \'https://httpbin.org/get\',\n\tmethod: \'GET\',\n\ttimeout: 30 // seconds (default 10)\n}).then(function(response) {\n\tconsole.log(\'Https.request response\', response)\n}).catch(function(error) {\n\tconsole.error(\'Https.request error\', error)\n})\n```\n\n## Configuration\n### Installing your SSL certificate\nCreate a folder called `assets` in your projects `app` folder like so `<project>/app/assets`. Using chrome, go to the URL where the SSL certificate resides. View the details then drag and drop the certificate image into the `assets` folder.\n\n![Installing your SSL certificate](http://i.imgur.com/hn4duT3.gif)\n\n#### Enabling SSL pinning\n```typescript\nimport { knownFolders } from \'file-system\'\nimport * as Https from \'nativescript-https\'\nlet dir = knownFolders.currentApp().getFolder(\'assets\')\nlet certificate = dir.getFile(\'httpbin.org.cer\').path\nHttps.enableSSLPinning({ host: \'httpbin.org\', certificate })\n```\nOnce you\'ve enabled SSL pinning you **CAN NOT** re-enable with a different `host` or `certificate` file.\n\n#### Disabling SSL pinning\n```typescript\nimport * as Https from \'nativescript-https\'\nHttps.disableSSLPinning()\n```\nAll requests after calling this method will no longer utilize SSL pinning until it is re-enabled once again.\n\n### Options\n```typescript\nexport interface HttpsSSLPinningOptions {\n\thost: string\n\tcertificate: string\n\tallowInvalidCertificates?: boolean\n\tvalidatesDomainName?: boolean\n\tcommonName?: string\n}\n```\nOption | Description\n------------ | -------------\n`host: string` | This must be the request domain name eg `sales.company.org`.\n`commonName?: string` | Default: options.host, set if certificate CN is different from the host eg `*.company.org`\n`certificate: string` | The uri path to your `.cer` certificate file.\n`allowInvalidCertificates?: boolean` | Default: `false`. This should **always** be `false` if you are using SSL pinning. Set this to `true` if you\'re using a self-signed certificate.\n`validatesDomainName?: boolean` | Default: `true`. Determines if the domain name should be validated with your pinned certificate.\n\n## Webpack / bundling\nSince you\'re probably shipping a certificate with your app (like [our demo does](https://github.com/EddyVerbruggen/nativescript-https/tree/master/demo/app/assets)),\nmake sure it\'s bundled by Webpack as well. You can do this by [adding the certificate(s) with the `CopyWebpackPlugin`](https://github.com/EddyVerbruggen/nativescript-https/blob/a5c841c0af7ff6d9994fa23f7fba0df0514c58f1/demo/webpack.config.js#L240).\n\n## `iOS` Troubleshooting\n> ### Please educate yourself on iOS\'s [App Transport Security](https://github.com/codepath/ios_guides/wiki/App-Transport-Security) before starting beef!\n\nIf you try and hit an `https` route without adding it to App Transport Security\'s whitelist it will not work!\nYou can bypass this behavior by adding the following to your projects `Info.plist`:\n```xml\n<key>NSAppTransportSecurity</key>\n<dict>\n    <key>NSAllowsArbitraryLoads</key>\n    <true/>\n</dict>\n```\n> This plugin **does not** add `NSAllowsArbitraryLoads` to your projects `Info.plist` for you.\n\n## `Android` troubleshooting\nIf you app crashes with a message that it\'s doing too much networkin on the main thread,\nthen pass the option `allowLargeResponse` with value `true` to the `request` function.\n\n# Thanks\nWho | Why\n------------ | -------------\n[Robert Laverty](https://github.com/roblav96) | For creating and maintaining this plugin for a long time, before transfering it to me, with the help of Jeff Whelpley of [GetHuman](https://github.com/gethuman).\n[AFNetworking](https://github.com/AFNetworking) | [AFNetworking](https://github.com/AFNetworking/AFNetworking) A delightful networking framework for iOS, OS X, watchOS, and tvOS.\n[Square](http://square.github.io/) | [okhttp](https://github.com/square/okhttp) An HTTP+HTTP/2 client for Android and Java applications.\n'