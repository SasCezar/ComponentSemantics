b'# NativeScript Local Notifications Plugin\n\n[![NPM version][npm-image]][npm-url]\n[![Downloads][downloads-image]][npm-url]\n[![Twitter Follow][twitter-image]][twitter-url]\n\n[build-status]:https://travis-ci.org/EddyVerbruggen/nativescript-local-notifications.svg?branch=master\n[build-url]:https://travis-ci.org/EddyVerbruggen/nativescript-local-notifications\n[npm-image]:http://img.shields.io/npm/v/nativescript-local-notifications.svg\n[npm-url]:https://npmjs.org/package/nativescript-local-notifications\n[downloads-image]:http://img.shields.io/npm/dm/nativescript-local-notifications.svg\n[twitter-image]:https://img.shields.io/twitter/follow/eddyverbruggen.svg?style=social&label=Follow%20me\n[twitter-url]:https://twitter.com/eddyverbruggen\n\nThe Local Notifications plugin allows your app to show notifications when the app is not running.\nJust like remote push notifications, but a few orders of magnitude easier to set up.\n\n> \xe2\x9a\xa0\xef\xb8\x8f Plugin version 4.0.0 should be used with NativeScript 6+. If you have an older `tns --version`, please use an older plugin version.\n\n## Installation\nFrom the command prompt go to your app\'s root folder and execute:\n```bash\ntns plugin add nativescript-local-notifications\n```\n\n## Setup (since plugin version 3.0.0)\nAdd this so for iOS 10+ we can do some wiring (set the iOS `UNUserNotificationCenter.delegate`, to be precise).\nNot needed if your app loads the plugin on startup anyway.\n\nYou\'ll know you need this if on iOS 10+ notifications are not received by your app or `addOnMessageReceivedCallback` is not invoked... better safe than sorry, though!\n\n```js\nrequire ("nativescript-local-notifications");\n```\n\nNow you can import the plugin as an object into your `.ts` file as follows:\n\n```typescript\n// either\nimport { LocalNotifications } from "nativescript-local-notifications";\n// or (if that doesn\'t work for you)\nimport * as LocalNotifications from "nativescript-local-notifications";\n\n// then use it as:\nLocalNotifications.hasPermission()\n```\n\n## Demo apps\n\n### NativeScript-Core (XML)\nThis demo is the one with the most options, so it\'s a cool one to check out:\n\n```bash\ngit clone https://github.com/EddyVerbruggen/nativescript-local-notifications\ncd nativescript-local-notifications/src\nnpm run demo.ios # or demo.android\n```\n\n### NativeScript-Angular\nThis plugin is part of the [plugin showcase app](https://github.com/EddyVerbruggen/nativescript-pluginshowcase/tree/master/app/feedback) I built using Angular.\n\nThere\'s also a simple Angular [demo in this repo](https://github.com/EddyVerbruggen/nativescript-local-notifications/tree/master/demo-ng):\n\n```bash\ngit clone https://github.com/EddyVerbruggen/nativescript-local-notifications\ncd nativescript-local-notifications/src\nnpm run demo-ng.ios # or demo-ng.android\n```\n\n### NativeScript-Vue\nWe also have a [Vue demo](https://github.com/EddyVerbruggen/nativescript-local-notifications/tree/master/demo-vue):\n\n```bash\ngit clone https://github.com/EddyVerbruggen/nativescript-local-notifications\ncd nativescript-local-notifications/src\nnpm run demo-vue.ios # or demo-vue.android\n```\n\n## Plugin API\n\n### schedule\nOn iOS you need to ask permission to schedule a notification.\nYou can have the `schedule` funtion do that for you automatically (the notification will be scheduled in case the user granted permission),\nor you can manually invoke `requestPermission` if that\'s your thing.\n\nYou can pass several options to this function, everything is optional:\n\n|option|description|\n|------|-----------|\n|`id`     |A number so you can easily distinguish your notifications. Will be generated if not set.|\n|`title`  |The title which is shown in the statusbar. Default not set.|\n|`subtitle`  |Shown below the title on iOS, and next to the App name on Android. Default not set. All android and iOS >= 10 only.|\n|`body`   |The text below the title. If not provided, the subtitle or title (in this order or priority) will be swapped for it on iOS, as iOS won\'t display notifications without a body. Default not set on Android, `\' \'` on iOS, as otherwise the notification won\'t show up at all.|\n|`color` |Custom color for the notification icon and title that will be applied when the notification center is expanded. (**Android Only**)|\n|`bigTextStyle`  |Allow more than 1 line of the body text to show in the notification centre. Mutually exclusive with `image`. Default `false`. (**Android Only**)|\n|`groupedMessages`| An array of atmost 5 messages that would be displayed using android\'s notification [inboxStyle](https://developer.android.com/reference/android/app/Notification.InboxStyle.html). Note: The array would be trimed from the top if the messages exceed five. Default not set |\n|`groupSummary`| An [inboxStyle](https://developer.android.com/reference/android/app/Notification.InboxStyle.html) notification summary. Default empty|\n|`ticker` |On Android you can show a different text in the statusbar, instead of the `body`. Default not set, so `body` is used.|\n|`at`     |A JavaScript Date object indicating when the notification should be shown. Default not set (the notification will be shown immediately).|\n|`badge`  |On iOS (and some Android devices) you see a number on top of the app icon. On most Android devices you\'ll see this number in the notification center. Default not set (0).|\n|`sound`  |Notification sound. For custom notification sound (iOS only), copy the file to `App_Resources/iOS`. Set this to "default" (or do not set at all) in order to use default OS sound. Set this to `null` to suppress sound.|\n|`interval` |Set to one of `second`, `minute`, `hour`, `day`, `week`, `month`, `year` if you want a recurring notification.|\n|`icon`|On Android you can set a custom icon in the system tray. Pass in `res://filename` (without the extension) which lives in `App_Resouces/Android/drawable` folders. If not passed, we\'ll look there for a file named `ic_stat_notify.png`. By default the app icon is used. Android < Lollipop (21) only (see `silhouetteIcon` below).|\n|`silhouetteIcon`|Same as `icon`, but for Android >= Lollipop (21). Should be an alpha-only image. Defaults to `res://ic_stat_notify_silhouette`, or the app icon if not present.|\n|`image` |*URL* (`http..`) of the image to use as an expandable notification image. On Android this is mutually exclusive with `bigTextStyle`.|\n|`thumbnail` |Custom thumbnail/icon to show in the notification center (to the right) on Android, this can be either: `true` (if you want to use the `image` as the thumbnail), a resource URL (that lives in the `App_Resouces/Android/drawable` folders, e.g.: `res://filename`), or a http URL from anywhere on the web. (**Android Only**). Default not set.|\n|`ongoing` |Default is (`false`). Set whether this is an `ongoing` notification. Ongoing notifications cannot be dismissed by the user, so your application must take care of canceling them. (**Android Only**) |\n|`channel` |Default is (`Channel`). Set the channel name for Android API >= 26, which is shown when the user longpresses a  notification. (**Android Only**) |\n|`forceShowWhenInForeground` |Default is `false`. Set to `true` to always show the notification. Note that on iOS < 10 this is ignored (the notification is not shown), and on newer Androids it\'s currently ignored as well (the notification always shows, per platform default). |\n|`priority` |Default is `0`. Will override `forceShowWhenInForeground` if set. This can be set to `2` for Android "heads-up" notifications. See [#114](https://github.com/EddyVerbruggen/nativescript-local-notifications/issues/114) for details. |\n|`actions` |Add an array of `NotificationAction` objects (see below) to add buttons or text input to a notification. |\n|`notificationLed` |Enable the notification LED light on Android (if supported by the device), this can be either: `true` (if you want to use the default color), or a custom color for the notification LED light (if supported by the device). (**Android Only**). Default not set.|\n\n#### `NotificationAction`\n\n|option|description|\n|------|-----------|\n|`id`     |An id so you can easily distinguish your actions.|\n|`type`   |Either `button` or `input`.|\n|`title`  |The label for `type` = `button`.|\n|`launch` |Launch the app when the action completes.|\n|`submitLabel` |The submit button label for `type` = `input`.|\n|`placeholder` |The placeholder text for `type` = `input`.|\n\n```js\n  LocalNotifications.schedule([{\n    id: 1, // generated id if not set\n    title: \'The title\',\n    body: \'Recurs every minute until cancelled\',\n    ticker: \'The ticker\',\n    color: new Color("red"),\n    badge: 1,\n    groupedMessages:["The first", "Second", "Keep going", "one more..", "OK Stop"], //android only\n    groupSummary:"Summary of the grouped messages above", //android only\n    ongoing: true, // makes the notification ongoing (Android only)\n    icon: \'res://heart\',\n    image: "https://cdn-images-1.medium.com/max/1200/1*c3cQvYJrVezv_Az0CoDcbA.jpeg",\n    thumbnail: true,\n    interval: \'minute\',\n    channel: \'My Channel\', // default: \'Channel\'\n    sound: "customsound-ios.wav", // falls back to the default sound on Android\n    at: new Date(new Date().getTime() + (10 * 1000)) // 10 seconds from now\n  }]).then(\n      function(scheduledIds) {\n        console.log("Notification id(s) scheduled: " + JSON.stringify(scheduledIds));\n      },\n      function(error) {\n        console.log("scheduling error: " + error);\n      }\n  )\n```\n\n### Notification icons (Android)\n\nThese options default to `res://ic_stat_notify` and `res://ic_stat_notify_silhouette` respectively, or the app icon if not present.\n\n`silhouetteIcon` should be an alpha-only image and will be used in Android >= Lollipop (21).\n\n[These are the official icon size guidelines](https://developer.android.com/guide/practices/ui_guidelines/icon_design_status_bar.html),\nand [here\'s a great guide on how to easily create these icons on Android](https://developer.android.com/studio/write/image-asset-studio).\n\n| Density qualifier | px | dpi\n| ------- | ------- | ---\n|    ldpi | 18 \xc3\x97 18 | 120\n|    mdpi | 24 \xc3\x97 24 | 160\n|    hdpi | 36 \xc3\x97 36 | 240\n|   xhdpi | 48 \xc3\x97 48 | 320\n|  xxhdpi | 72 \xc3\x97 72 | 480\n| xxxhdpi | 96 \xc3\x97 96 | 640 approx.\n\n__Source:__ [Density Qualifier Docs](https://developer.android.com/guide/topics/resources/providing-resources.html#DensityQualifier)\n\n\n### addOnMessageReceivedCallback\nTapping a notification in the notification center will launch your app.\nBut what if you scheduled two notifications and you want to know which one the user tapped?\n\nUse this function to have a callback invoked when a notification was used to launch your app.\nNote that on iOS it will even be triggered when your app is in the foreground and a notification is received.\n\n```js\n  LocalNotifications.addOnMessageReceivedCallback(\n      function (notification) {\n        console.log("ID: " + notification.id);\n        console.log("Title: " + notification.title);\n        console.log("Body: " + notification.body);\n      }\n  ).then(\n      function() {\n        console.log("Listener added");\n      }\n  )\n```\n\n### getScheduledIds\nIf you want to know the ID\'s of all notifications which have been scheduled, do this:\n\nNote that all functions have an error handler as well (see `schedule`), but to keep things readable we won\'t repeat ourselves.\n\n```js\n  LocalNotifications.getScheduledIds().then(\n      function(ids) {\n        console.log("ID\'s: " + ids);\n      }\n  )\n```\n\n### cancel\nIf you want to cancel a previously scheduled notification (and you know its ID), you can cancel it:\n\n```js\n  LocalNotifications.cancel(5 /* the ID */).then(\n      function(foundAndCanceled) {\n          if (foundAndCanceled) {\n            console.log("OK, it\'s gone!");\n          } else {\n            console.log("No ID 5 was scheduled");\n          }\n      }\n  )\n```\n\n### cancelAll\nIf you just want to cancel all previously scheduled notifications, do this:\n\n```js\n  LocalNotifications.cancelAll();\n```\n\n### requestPermission\nOn Android you don\'t need permission, but on iOS you do. Android will simply return true.\n\nIf the `requestPermission` or `schedule` function previously ran the user has already been prompted to grant permission.\nIf the user granted permission this function returns `true`, but if he denied permission this function will return `false`,\nsince an iOS can only request permission once. In which case the user needs to go to the iOS settings app and manually\nenable permissions for your app.\n\n```js\n  LocalNotifications.requestPermission().then(\n      function(granted) {\n        console.log("Permission granted? " + granted);\n      }\n  )\n```\n\n### hasPermission\nOn Android you don\'t need permission, but on iOS you do. Android will simply return true.\n\nIf the `requestPermission` or `schedule` functions previously ran you may want to check whether or not the user granted permission:\n\n```js\n  LocalNotifications.hasPermission().then(\n      function(granted) {\n        console.log("Permission granted? " + granted);\n      }\n  )\n```\n'