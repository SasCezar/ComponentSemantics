b'# NativeScript Email\n\n[![NPM version][npm-image]][npm-url]\n[![Downloads][downloads-image]][npm-url]\n[![Twitter Follow][twitter-image]][twitter-url]\n\n[npm-image]:http://img.shields.io/npm/v/nativescript-email.svg\n[npm-url]:https://npmjs.org/package/nativescript-email\n[downloads-image]:http://img.shields.io/npm/dm/nativescript-email.svg\n[twitter-image]:https://img.shields.io/twitter/follow/eddyverbruggen.svg?style=social&label=Follow%20me\n[twitter-url]:https://twitter.com/eddyverbruggen\n\nYou can use this plugin to compose an e-mail, have the user edit the draft manually, and send it.\n\n> Note that this plugin depends on the default mail app. If you want a fallback to a third party client app like Gmail or Outlook, then check for availability, and if not available use a solution like [the Social Share plugin](https://github.com/tjvantoll/nativescript-social-share).\n\n## Installation\nRun this command from the root of your project:\n\n```bash\ntns plugin add nativescript-email\n```\n\n## API\n\nTo use this plugin you must first require/import it:\n\n#### TypeScript\n\n```typescript\nimport * as email from "nativescript-email";\n// or\nimport { compose } from "nativescript-email";\n// or even\nimport { compose as composeEmail } from "nativescript-email";\n```\n\n#### JavaScript\n\n```js\nvar email = require("nativescript-email");\n```\n\n### `available`\n\n#### TypeScript\n\n```typescript\n  email.available().then((avail: boolean) => {\n      console.log("Email available? " + avail);\n  })\n```\n\n#### JavaScript\n\n```js\n  email.available().then(function(avail) {\n      console.log("Email available? " + avail);\n  })\n```\n\n### `compose`\n\n#### JavaScript\n\n```js\n  // let\'s first create a File object using the tns file module\n  var fs = require("file-system");\n  var appPath = fs.knownFolders.currentApp().path;\n  var logoPath = appPath + "/res/telerik-logo.png";\n\n  email.compose({\n      subject: "Yo",\n      body: "Hello <strong>dude</strong> :)",\n      to: [\'eddyverbruggen@gmail.com\', \'to@person2.com\'],\n      cc: [\'ccperson@somewhere.com\'],\n      bcc: [\'eddy@combidesk.com\', \'eddy@x-services.nl\'],\n      attachments: [\n        {\n            fileName: \'arrow1.png\',\n            path: \'base64://iVBORw0KGgoAAAANSUhEUgAAABYAAAAoCAYAAAD6xArmAAAACXBIWXMAABYlAAAWJQFJUiTwAAAAHGlET1QAAAACAAAAAAAAABQAAAAoAAAAFAAAABQAAAB5EsHiAAAAAEVJREFUSA1iYKAimDhxYjwIU9FIBgaQgZMmTfoPwlOmTJGniuHIhlLNxaOGwiNqNEypkwlGk9RokoIUfaM5ijo5Clh9AAAAAP//ksWFvgAAAEFJREFUY5g4cWL8pEmT/oMwiM1ATTBqONbQHA2W0WDBGgJYBUdTy2iwYA0BrILDI7VMmTJFHqv3yBUEBQsIg/QDAJNpcv6v+k1ZAAAAAElFTkSuQmCC\',\n            mimeType: \'image/png\'\n        },\n        {\n            fileName: \'telerik-logo.png\',\n            path: logoPath,\n            mimeType: \'image/png\'\n      }]\n  }).then(\n    function() {\n      console.log("Email composer closed");\n    }, function(err) {\n      console.log("Error: " + err);\n    });\n```\n\nFull attachment support has been added to 1.3.0 per the example above.\n\nSince 1.4.0 the promise will be rejected in case a file can\'t be found.\n\n## Usage with Angular\nCheck out [this tutorial (YouTube)](https://www.youtube.com/watch?v=fSnQb9-Gtdk) to learn how to use this plugin in a NativeScript-Angular app.\n\n## Known issues\nOn iOS you can\'t use the simulator to test the plugin because of an iOS limitation.\nTo prevent a crash this plugin returns `false` when `available` is invoked on the iOS sim.\n'