b'<p align="center">\n    <img src="./images/healthkit-googlefit.jpg" height="200px" />\n</p>\n\n# Health Data plugin for NativeScript\nThis is a NativeScript plugin that abstracts Apple HealthKit and Google Fit to read health data from the user\'s device.\n\n[![Build Status][build-status]][build-url]\n[![NPM version][npm-image]][npm-url]\n[![Downloads][downloads-image]][npm-url]\n[![Twitter Follow][twitter-image]][twitter-url]\n\n[build-status]:https://travis-ci.org/EddyVerbruggen/nativescript-health-data.svg?branch=master\n[build-url]:https://travis-ci.org/EddyVerbruggen/nativescript-health-data\n[npm-image]:http://img.shields.io/npm/v/nativescript-health-data.svg\n[npm-url]:https://npmjs.org/package/nativescript-health-data\n[downloads-image]:http://img.shields.io/npm/dm/nativescript-health-data.svg\n[twitter-image]:https://img.shields.io/twitter/follow/eddyverbruggen.svg?style=social&label=Follow%20me\n[twitter-url]:https://twitter.com/eddyverbruggen\n\n## Prerequisites\n\n### Android\nGoogle Fit API Key - Go to the [Google Developers Console](https://console.developers.google.com/), create a project, and enable the `Fitness API`.\nThen under `Credentials`, create a `Fitness API` OAuth2 client ID for an Android App (select `User data` and press the `What credentials do I need?` button).\nIf you are using Linux/maxOS, generate your SHA1-key with the code below.\n\n```shell\nkeytool -exportcert -keystore path-to-debug-or-production-keystore -list -v\n```\n\n> Note that the default (debug) keystore password is empty.\n\n### iOS\nMake sure you enable the `HealthKit` entitlement in your app ID.\n\n## Installation\nInstall the plugin using the NativeScript CLI:\n\n```\ntns plugin add nativescript-health-data\n```\n\n## API \nThe examples below are all in TypeScript, and the [demo](https://github.com/EddyVerbruggen/nativescript-health-data/tree/master/demo-ng) was developed in Nativescript w/ Angular.\n\nThis is how you can import and instantiate the plugin, all examples expect this setup:\n\n```typescript\nimport { AggregateBy, HealthData, HealthDataType } from "nativescript-health-data";\n\nexport class MyHealthyClass {\n  private healthData: HealthData;\n\n  constructor() {\n    this.healthData = new HealthData();\n  }\n}\n```\n\n### `isAvailable`\nThis tells you whether or not the device supports Health Data. On iOS this is probably always `true`.\nOn Android the user will be prompted to (automatically) update their Play Services version in case it\'s not sufficiently up to date.\nIf you don\'t want this behavior, pass false to this function, as shown below.\n\n```typescript\nthis.healthData.isAvailable(false)\n    .then(available => console.log(available));\n```\n\n### `isAuthorized`\nThis function (and the next one) takes an `Array` of `HealthDataType`\'s. Each of those has a `name` and an `accessType`.\n\n- The `name` can be one of the [\'Available Data Types\'](#available-data-types).\n- The accessType can be one of `read`, `write`, or `readAndWrite` (note that this plugin currently only supports reading data, but that will change).\n\n> iOS is a bit silly here: if you\'ve only requested \'read\' access, you\'ll never get a `true` response from this method. [Details here.](https://stackoverflow.com/a/29128231/2596974)\n\n```typescript\nthis.healthData.isAuthorized([<HealthDataType>{name: "steps", accessType: "read"}])\n    .then(authorized => console.log(authorized));\n```\n\n### `requestAuthorization`\nThis function takes the same argument as `isAuthorized`, and will trigger a consent screen in case the user hasn\'t previously authorized your app to access any of the passed `HealthDataType`\'s.\n\nNote that this plugin currently only supports reading data, but that will change.\n \n```typescript\nconst types: Array<HealthDataType> = [\n\t{name: "height", accessType: "write"},\n\t{name: "weight", accessType: "readAndWrite"},\n\t{name: "steps", accessType: "read"},\n\t{name: "distance", accessType: "read"}\n];\n\nthis.healthData.requestAuthorization(types)\n    .then(authorized => console.log(authorized))\n    .catch(error => console.log("Request auth error: ", error));\n```\n\n### `query`\nMandatory properties are `startData`, `endDate`, and `dataType`.\nThe `dataType` must be one of the [\'Available Data Types\'](#available-data-types).\n\nBy default data is not aggregated, so all individual datapoints are returned.\nThis plugin however offers a way to aggregate the data by either `hour`, `day`, or `sourceAndDay`,\nthe latter will enable you to read daily data per source (Fitbit, Nike Run Club, manual entry, etc).\n\nIf you didn\'t run `requestAuthorization` before running `query`,\nthe plugin will run `requestAuthorization` for you (for the requested `dataType`). You\'re welcome. \xf0\x9f\x98\x89 \n\n```typescript\nthis.healthData.query(\n    {\n      startDate: new Date(new Date().getTime() - 3 * 24 * 60 * 60 * 1000), // 3 days ago\n      endDate: new Date(), // now\n      dataType: "steps", // equal to the \'name\' property of \'HealthDataType\'\n      unit: "count", // make sure this is compatible with the \'dataType\' (see below)\n      aggregateBy: "day", // optional, one of: "hour", "day", "sourceAndDay"\n      sortOrder: "desc" // optional, default "asc"\n    })\n    .then(result => console.log(JSON.stringify(result)))\n    .catch(error => this.resultToShow = error);\n```\n\n\n### `startMonitoring` (iOS only, for now)\nIf you want to be notified when health data was changed, you can monitor specific types.\nThis even works when your app is in the background, with `enableBackgroundUpdates: true`.\nNote that iOS will wake up your app so you can act upon this notification (in the `onUpdate` function by fi. querying recent changes to this data type),\nbut in return you are responsible for telling iOS you\'re done. So make sure you invoke the `completionHandler` as shown below.\n\nNot all data types support `backgroundUpdateFrequency: "immediate"`,\nso your app may not always be invoked immediately when data is added/deleted in HealthKit.\n\n> Background notifications probably don\'t work on the iOS simulator, so please test those on a real device.\n\n```typescript\nthis.healthData.startMonitoring(\n    {\n      dataType: "heartRate",\n      enableBackgroundUpdates: true,\n      backgroundUpdateFrequency: "immediate",\n      onUpdate: (completionHandler: () => void) => {\n        console.log("Our app was notified that health data changed, so querying...");\n        this.getData("heartRate", "count/min").then(() => completionHandler());\n      }\n    })\n    .then(() => this.resultToShow = `Started monitoring heartRate`)\n    .catch(error => this.resultToShow = error);\n```\n\n### `stopMonitoring` (iOS only, for now)\nIt\'s best to call this method in case you no longer wish to receive notifications when health data changes.\n\n```typescript\nthis.healthData.stopMonitoring(\n    {\n      dataType: "heartRate",\n    })\n    .then(() => this.resultToShow = `Stopped monitoring heartRate`)\n    .catch(error => this.resultToShow = error);\n```\n\n## Available Data Types\nWith version 1.0.0 these are the supported types of data you can read. Also, make sure you pass in the correct `unit`.\n\nNote that you are responsible for passing the correct `unit`, although there\'s only 1 option for each type. _Well actually, the `unit` is ignored on Android at the moment, and on iOS there are undocumented types you can pass in (fi. `mi` for `distance`)._\n\nThe reason is I intend to support more units per type, but that is yet to be implemented... so it\'s for the sake of future backward-compatibility! \xf0\x9f\xa4\xaf\n\n| TypeOfData | Unit | GoogleFit Data Type | Apple HealthKit Data Type |\n| --- | --- | --- | --- |\n| distance | m | `TYPE_DISTANCE_DELTA` | `HKQuantityTypeIdentifierDistanceWalkingRunning` |\n| steps | count | `TYPE_STEP_COUNT_DELTA` | `HKQuantityTypeIdentifierStepCount` |\n| calories | count | `TYPE_CALORIES_EXPENDED` | `HKQuantityTypeIdentifierActiveEnergyBurned` |\n| height | m | `TYPE_HEIGHT` | `HKQuantityTypeIdentifierHeight` |\n| weight | kg | `TYPE_WEIGHT` | `HKQuantityTypeIdentifierBodyMass` |\n| heartRate | count/min | `TYPE_HEART_RATE_BPM` | `HKQuantityTypeIdentifierHeartRate` |\n| fatPercentage | % | `TYPE_BODY_FAT_PERCENTAGE` | `HKQuantityTypeIdentifierBodyFatPercentage` |\n\n## Credits\n* [Filipe Mendes](https://github.com/filipemendes1994/) for a superb first version of this repo, while working for SPMS, Shared Services for Ministry of Health (of Portugal). He kindly transferred this repo to me when he no longer had time to maintain it.\n* Daniel Leal, for [a great PR](https://github.com/EddyVerbruggen/nativescript-health-data/pull/4).\n'