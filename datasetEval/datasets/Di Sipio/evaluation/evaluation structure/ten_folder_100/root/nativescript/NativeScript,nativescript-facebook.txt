b'NativeScript : Facebook SDK ![apple](https://cdn3.iconfinder.com/data/icons/picons-social/57/16-apple-32.png) ![android](https://cdn4.iconfinder.com/data/icons/logos-3/228/android-32.png)\n =======\n[![npm](https://img.shields.io/npm/v/nativescript-facebook.svg)](https://www.npmjs.com/package/nativescript-facebook)\n[![npm](https://img.shields.io/npm/dm/nativescript-facebook.svg)](https://www.npmjs.com/package/nativescript-facebook)\n[![Build Status](https://travis-ci.org/NativeScript/nativescript-facebook.svg?branch=master)](https://travis-ci.org/NativeScript/nativescript-facebook)\n-------\n\n[NativeScript](https://www.nativescript.org) plugin, wrapper of native [Facebook SDK](https://developers.facebook.com) for Android and iOS.\n\n![demo](https://github.com/nativescript-space/nativescript-facebook/blob/assets/demo.gif?raw=true)\n\n<!-- TOC depthFrom:2 -->\n\n- [Features](#features)\n- [Installation](#installation)\n- [Configuration](#configuration)\n    - [Android](#android)\n    - [iOS](#ios)\n- [NativeScript Core](#nativescript-core)\n    - [Initialization](#initialization)\n    - [Login](#login)\n        - [Facebook Login Button](#facebook-login-button)\n        - [Custom Login Button](#custom-login-button)\n    - [Log out](#log-out)\n        - [Facebook Logout Button](#facebook-logout-button)\n        - [Custom Logout Button](#custom-logout-button)\n    - [Share](#share)\n        - [Create Sharing Content](#create-sharing-content)\n        - [Facebook Share Button](#facebook-share-button)\n        - [Facebook Send Button](#facebook-send-button)\n        - [Show Share Dialog Programmatically](#show-dialog-programmatically)\n        - [Hide Custom Button If Can\'t share](#hide-custom-button)\n- [NativeScript Angular](#nativescript-angular)\n    - [Initialization](#initialization-1)\n    - [Login](#login-1)\n        - [Facebook Login Button](#facebook-login-button-1)\n        - [Custom Login Button](#custom-login-button-1)\n    - [Logout](#logout)\n        - [Facebook Logout Button](#facebook-logout-button-1)\n        - [Custom Logout Button](#custom-logout-button-1)\n    - [Share](#share-1)\n        - [Create Sharing Content](#create-sharing-content-1)\n        - [Facebook Share Button](#facebook-share-button-1)\n        - [Facebook Send Button](#facebook-send-button-1)\n        - [Show Share Dialog Programmatically](#show-dialog-programmatically-1)\n        - [Hide Custom Button If Can\'t share](#hide-custom-button-1)\n- [Login Response](#login-response)\n- [Get Current Access Token](#get-current-access-token)\n- [Basic Analytics](#basic-analytics)\n- [Graph API Example](#graph-api-example)\n- [Release notes](#release-notes)\n- [FAQ](#faq)\n- [Contribute](#contribute)\n- [Get Help](#get-help)\n\n<!-- /TOC -->\n\n## Features\n- [x] Login & Logout\n- [x] Share\n- [ ] Graph API\n- [x] Basic Analytics\n\n\n## Installation\n```\ntns plugin add nativescript-facebook\n```\n\n## Configuration\n### Android\nUpdate AndroidManifest.xml (app/App_Resources/Android/AndroidManifest.xml) to put `provider` under `<application>`  \n`{facebook_app_id}` is your app id\n\n```xml\n<provider android:authorities="com.facebook.app.FacebookContentProvider{facebook_app_id}"\n\t\t\t\t  android:name="com.facebook.FacebookContentProvider"\n\t\t\t\t  android:exported="true"/>\n```\n### iOS\nUpdate Info.plist file (app/App_Resources/iOS/Info.plist) to contains `CFBundleURLTypes` and `LSApplicationQueriesSchemes` like below:\n```xml\n<?xml version="1.0" encoding="UTF-8"?>\n<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">\n<plist version="1.0">\n    <dict>\n    ...\n\n        <key>CFBundleURLTypes</key>\n        <array>\n            <dict>\n                <key>CFBundleURLSchemes</key>\n                <array>\n                    <string>fb{facebook_app_id}</string>\n                </array>\n            </dict>\n        </array>\n\t\t<key>LSApplicationQueriesSchemes</key>\n        <array>\n            <string>fbapi</string>\n            <string>fb-messenger-share-api</string>\n            <string>fbauth2</string>\n            <string>fbshareextension</string>\n        </array>\n    </dict>\n</plist>\n```\n>Make sure you replaced {facebook_app_id} with your Facebook App Id. More info regarding how to obtain a Facebook App Id can be found [here](https://developers.facebook.com/docs/apps/register).\n\n# Usage\n## NativeScript Core\n### Initialization \nCall init of nativescript-facebook module on application launch.\n\n[app.ts](https://github.com/NativeScript/nativescript-facebook/blob/master/demo/app/app.ts)\n```TypeScript\nimport * as application from \'application\';\nimport { init } from "nativescript-facebook";\n\napplication.on(application.launchEvent, function (args) {\n    init("{facebook_app_id}");\n});\n\napplication.start({ moduleName: "login-page" });\n```\n\n### Login\n#### Facebook Login Button\nAdd Facebook login button as simple as adding a Facebook:LoginButton tag in your view. Then you can define `login` event handler name. In the example below - `onLogin`.\n\n[login-page.xml](https://github.com/NativeScript/nativescript-facebook/blob/master/demo/app/login-page.xml)\n```xml\n<Page xmlns="http://schemas.nativescript.org/tns.xsd"\n      xmlns:Facebook="nativescript-facebook"\n  loaded="pageLoaded" class="page">\n\n    ...\n\n    <Facebook:LoginButton login="{{ onLogin }}"></Facebook:LoginButton>\n\n    ...\n\n</Page> \n```\n\nImplement `onLogin` event handler in your view-model. It receives an argument from type `LoginEventData`. Currently `LoginEventData` object has 2 properties: error and loginResponse. loginResponse is an object that consists of 1 property - token that keeps the facebook access token which will be used for further authentications. Ideally we can add some other properties here in the future such as Facebook user id.\n\n[login-view-model.ts](https://github.com/NativeScript/nativescript-facebook/blob/master/demo/app/login-view-model.ts)\n```TypeScript\nimport { Observable } from \'data/observable\';\nimport { Facebook:LoginButton } from "nativescript-facebook";\n\nexport class LoginViewModel extends Observable {\n\n  onLogin(eventData: LoginEventData) {\n    if (eventData.error) {\n      alert("Error during login: " + eventData.error.message);\n    } else {\n      console.log(eventData.loginResponse.token);\n    }\n  }\n}\n```\n\n#### Custom Login Button\nAdd a button and define a `tap` event handler in your login view. \n\n[login-page.xml](https://github.com/NativeScript/nativescript-facebook/blob/master/demo/app/login-page.xml)\n```xml\n<Page xmlns="http://schemas.nativescript.org/tns.xsd"\n      xmlns:Facebook="nativescript-facebook"\n  loaded="pageLoaded" class="page">\n\n    ...\n\n    <Button tap="{{ login }}" text="Log in (custom)"></Button>\n\n    ...\n\n</Page> \n```\n\nIn the view model implement the tap event handler in this case `login` method. It just has to call the login method that comes from the plugin. In the example below the login method from the plugin is imported as fbLogin.\n\n> **BEST PRACTICE**: \nImport only the methods that you need instead of the entire file. It is crucial when you bundle your app with webpack.\n\n[login-view-model.ts](https://github.com/NativeScript/nativescript-facebook/blob/master/demo/app/login-view-model.ts)\n```TypeScript\nimport { Observable } from \'data/observable\';\nimport { login as fbLogin } from "nativescript-facebook";\n\nexport class LoginViewModel extends Observable {\n\n  login() {\n    fbLogin((err, fbData) => {\n      if (err) {\n        alert("Error during login: " + err.message);\n      } else {\n        console.log(fbData.token);\n      }\n    });\n  }\n\n}\n```\n\n### Log out\n#### Facebook Logout Button\n\nAdd Facebook logout button as simple as adding a Facebook:LoginButton tag in your view. Then you can define `logout` event handler name. In the example below - `onLogout`.\n\n[home-page.xml](https://github.com/NativeScript/nativescript-facebook/blob/master/demo/app/home-page.xml)\n```xml\n<Page xmlns="http://schemas.nativescript.org/tns.xsd"\n      xmlns:Facebook="nativescript-facebook"\n  loaded="pageLoaded" class="page">\n\n    ...\n\n    <Facebook:LoginButton logout="{{ onLogout }}"></Facebook:LoginButton>\n\n    ...\n\n</Page> \n```\n\nImplement `onLogout` event handler in your view-model.\n\n[home-view-model.ts](https://github.com/NativeScript/nativescript-facebook/blob/master/demo/app/home-view-model.ts)\n```TypeScript\nimport { Observable } from \'data/observable\';\n\nexport class HomeViewModel extends Observable {\n\n  onLogout() {\n    console.log("logged out");\n  }\n\n}\n```\n\n#### Custom Logout Button\n\nAdd a button and define a `tap` event handler in your view. In this case - `logout`\n\n[home-page.xml](https://github.com/NativeScript/nativescript-facebook/blob/master/demo/app/home-page.xml)\n```xml\n<Page xmlns="http://schemas.nativescript.org/tns.xsd"\n      xmlns:Facebook="nativescript-facebook"\n  loaded="pageLoaded" class="page">\n\n    ...\n\n    <Button tap="{{ logout }}" text="Log out (custom)"></Button>\n\n    ...\n\n</Page> \n```\n\nIn the view model implement the tap event handler in this case `logout` method. It just has to call the logout method that comes from the plugin. In the example below the logout method from the plugin is imported as fbLogout.\n\n[home-view-model.ts](https://github.com/NativeScript/nativescript-facebook/blob/master/demo/app/home-view-model.ts)\n```TypeScript\nimport { Observable } from \'data/observable\';\nimport { logout as fbLogout } from "nativescript-facebook";\n\nexport class LoginViewModel extends Observable {\n\n  logout() {\n    fbLogout(() => {\n      console.log("logged out");\n    });\n  }\n\n}\n```\n\n### Share\n### Create Sharing Content\nFor sharing, you have to create sharing content first. \nCurrently the available content types are: \n- **createShareLinksContent(link: string, quote?: string, addition?: ShareAdditionContent)** available for every condition \n- **createSharePhotosContent(images: ImageSource[] | string[], userGenerated: boolean, addition?: ShareAdditionContent)** available for ShareButton and `showShareDialog` ( only when user have native Facebook installed, version 7.0 or higher )\n- **createShareMessageGenericTemplateContent(contentConfig: MessageGenericTemplateContent)**  available for SendButton and `showMessageDialog`\n- **createShareMessageMediaTemplateContent(contentConfig: MessageMediaTemplateContent)**  available for SendButton and `showMessageDialog`\n\nYou can see more information from [https://developers.facebook.com/docs/sharing/overview#content](https://developers.facebook.com/docs/sharing/overview#content) and [https://developers.facebook.com/docs/sharing/messenger#share-types](https://developers.facebook.com/docs/sharing/messenger#share-types)\n```TypeScript\nimport {\n    LoginEventData,\n    getCurrentAccessToken,\n    createShareLinksContent,\n    createSharePhotosContent,\n    createShareMessageGenericTemplateContent,\n    MessageGenericTemplateImageAspectRatio,\n    showShareDialog,\n    showMessageDialog,\n    canShareDialogShow,\n    canMessageDialogShow\n} from \'nativescript-facebook\';\n\nconst linkContent = createShareLinksContent(\'https://www.nativescript.org\',\n            \'Create Native iOS and Android Apps With JavaScript\',\n            {\n                hashtag: \'#Nativescript\'\n            });\n\n// you can also pass in imageUrls as string[] in here\nconst logoImage = fromResource(\'logo\');\nconst photosContent = createSharePhotosContent([logoImage], false, {\n              hashtag: \'#Nativescript\'\n          });\nconst GenericTemplate = createShareMessageGenericTemplateContent({\n            element: {\n                title: \'Nativescript\',\n                subtitle: \'Create Native iOS and Android Apps With JavaScript\',\n                imageUrl: \'https://d2odgkulk9w7if.cloudfront.net/images/default-source/home/how-it-works-min.png\',\n                button: {\n                    title: \'Check Doc\',\n                    url: \'https://docs.nativescript.org\'\n                },\n                defaultAction: {\n                    title: \'Go HomePage\',\n                    url: \'https://www.nativescript.org\'\n                }\n            },\n            // it seems android have to provide a pageId, otherwise the MessageDialog just wont show\n            pageID: \'testestsett\',\n            imageAspectRatio: MessageGenericTemplateImageAspectRatio.Horizontal\n        });\n\n```\n\n### Facebook Share Button\n```xml\n<Facebook:ShareButton content="{{ linkContent }}"></Facebook:ShareButton>\n```\n\n### Facebook Send Button\n\nIf the Messenger app is not installed, the Send button will be hidden. Be sure that your app layout is appropriate when this button is hidden.\n \n```xml\n<Facebook:SendButton content="{{ genericContent }}"></Facebook:SendButton>\n```\n\n### Show Share Dialog Programmatically\n\n**Note** The share dialog will try fallback to browse page sharing if user doesn\'t have Facebook installed (only for linkContent)\n\n```TypeScript\nshowShareDialog(this.linkContent);\nshowMessageDialog(this.linkContent);\nshowShareDialog(this.linkContent, (error:Error, result:ShareCallbackResult) => {\n    if(!error){\n        console.log(result.android); // com.facebook.share.Sharer.Result\n        console.log(result.ios); // (NSDictionary * ) The results from the sharer. This may be nil or empty.\n    }\n});\n```\n\n### Hide Custom Button If Can\'t share\n\nYou can use this method to check if the content can be shared and hide the custom button if can\'t\n\n```TypeScript\npublic canShowPhotosShareDialog = canShareDialogShow(this.photosContent);\npublic canShowGenericMessageDialog = canMessageDialogShow(this.genericContent);\n```\n```xml\n<Button tap="{{ onShareDialogPhotos }}" text="Open Share dialog (photos)" visibility="{{ canShowPhotosShareDialog ? \'visible\' : \'collapsed\' }}"></Button>\n<Button tap="{{ onSendGenericDialog }}" text="Share Message Generic Template" visibility="{{ canShowGenericMessageDialog ? \'visible\' : \'collapsed\' }}"></Button>\n```\n\n## NativeScript Angular\n### Initialization\nCall init of nativescript-facebook module on application launch.\n\n[app.module.ts](https://github.com/NativeScript/nativescript-facebook/blob/master/demo-angular/app/app.module.ts)\n```TypeScript\n...\nimport * as application from \'application\';\nimport { NativeScriptModule } from "nativescript-angular/nativescript.module";\nimport { NativeScriptFacebookModule } from "nativescript-facebook/angular";\n\nlet nsFacebook = require(\'nativescript-facebook\');\n\napplication.on(application.launchEvent, function (args) {\n    nsFacebook.init("{facebook_app_id}");\n});\n...\n@NgModule({\n    ...\n    imports: [\n        AppRoutingModule,\n        NativeScriptModule,\n        NativeScriptFacebookModule,\n        ...\n    ],\n    ...\n})\n...\n```\n\n### Login\n#### Facebook Login Button\n\nAdd Facebook login button as simple as adding a Facebook:LoginButton tag in your component html file. Then you can define `login` event handler name. In the example below - `onLogin`. Bare in mind the $event argument.\n\n[pages/login/login.component.html](https://github.com/NativeScript/nativescript-facebook/blob/master/demo-angular/app/pages/login/login.component.html)\n```html\n<StackLayout>\n    <FacebookLoginButton (login)="onLogin($event)"></FacebookLoginButton>\n</StackLayout>\n```\n\nImplement `onLogin` event handler in your component. It receives an argument from type `LoginEventData`. Currently `LoginEventData` object has 2 properties: error and loginResponse. loginResponse is an object that consists of 1 property - token that keeps the facebook access token which will be used for further authentications. Ideally we can add some other properties here in the future such as Facebook user id.\n\n[pages/login/login.component.ts](https://github.com/NativeScript/nativescript-facebook/blob/master/demo-angular/app/pages/login/login.component.ts)\n```TypeScript\nimport { Component } from "@angular/core";\nimport * as Facebook from "nativescript-facebook";\n\n@Component({\n    selector: "login",\n    templateUrl: "login.component.html",\n})\nexport class LoginComponent { \n    onLogin(eventData: Facebook.LoginEventData) {\n        if (eventData.error) {\n            alert("Error during login: " + eventData.error);\n        } else {\n            console.log(eventData.loginResponse.token);\n        }\n    }\n}\n```\n\n#### Custom Login Button\n\nAdd a button and define a `tap` event handler in your login component html.\n\n[pages/login/login.component.html](https://github.com/NativeScript/nativescript-facebook/blob/master/demo-angular/app/pages/login/login.component.html)\n```html\n<StackLayout>\n    <Button text="Login Button (custom)" (tap)="login()"></Button>\n</StackLayout>\n```\n\nIn the component implement the tap event handler in this case `login` method. It just has to call the login method that comes from the plugin.\n\n[pages/login/login.component.ts](https://github.com/NativeScript/nativescript-facebook/blob/master/demo-angular/app/pages/login/login.component.ts)\n```TypeScript\nimport { Component } from "@angular/core";\nimport * as Facebook from "nativescript-facebook";\n\n@Component({\n    selector: "login",\n    templateUrl: "login.component.html",\n})\nexport class LoginComponent { \n    login() {\n        Facebook.login((error, fbData) => {\n            if (error) {\n                alert("Error during login: " + error.message);\n            } else {\n                console.log(fbData.token);\n            }\n        });\n    }\n}\n```\n\n\n### Logout\n#### Facebook Logout Button\n\nAdd Facebook logout button as simple as adding a Facebook:LoginButton tag in your component html file. Then you can define `logout` event handler name. In the example below - `onLogout`. Bare in mind the $event argument.\n\n[pages/home/home.component.html](https://github.com/NativeScript/nativescript-facebook/blob/master/demo-angular/app/pages/home/home.component.html)\n```html\n<StackLayout>\n    <FacebookLoginButton (logout)="onLogout($event)"></FacebookLoginButton>\n</StackLayout>\n```\n\nImplement `onLogout` event handler.\n\n[pages/home/home.component.ts](https://github.com/NativeScript/nativescript-facebook/blob/master/demo-angular/app/pages/home/home.component.ts)\n```TypeScript\nimport { Component } from "@angular/core";\nimport * as Facebook from "nativescript-facebook";\n\n@Component({\n    selector: "home",\n    templateUrl: "home.component.html",\n})\nexport class HomeComponent { \n    onLogout(eventData: Facebook.LoginEventData) {\n        if (eventData.error) {\n            alert("Error during login: " + eventData.error);\n        } else {\n            console.log("logged out");\n        }\n    }\n}\n```\n\n#### Custom Logout Button\n\nAdd a button and define a `tap` event handler in your view. In this case - `logout`\n\n[pages/home/home.component.html](https://github.com/NativeScript/nativescript-facebook/blob/master/demo-angular/app/pages/home/home.component.html)\n```html\n<StackLayout>\n    <Button text="Log out (custom)" (tap)="logout()"></Button>\n</StackLayout>\n```\n\nIn the component implement the tap event handler in this case `logout` method. It just has to call the logout method that comes from the plugin. In the example below the logout method from the plugin is imported as fbLogout.\n\n[pages/home/home.component.ts](https://github.com/NativeScript/nativescript-facebook/blob/master/demo-angular/app/pages/home/home.component.ts)\n```TypeScript\nimport { Component } from "@angular/core";\nimport { logout as fbLogout } from "nativescript-facebook";\n\n@Component({\n    selector: "home",\n    templateUrl: "home.component.html",\n})\nexport class AppComponent { \n  logout() {\n    fbLogout(() => {\n      console.log("logged out");\n    });\n  }\n}\n```\n\n\n### Share\n### Create Sharing Content\nRead Nativescript [chapter](#create-sharing-content) for this\n\n### Facebook Share Button\n```html\n<FacebookShareButton [content] = "linkContent"></FacebookShareButton>\n```\n\n### Facebook Send Button\n\nIf the Messenger app is not installed, the Send button will be hidden. Be sure that your app layout is appropriate when this button is hidden.\n \n```html\n<FacebookSendButton [content] = "genericContent"></FacebookSendButton>\n```\n\n### Show Share Dialog Programmatically\n\n**Note** The share dialog will try fallback to browse page sharing if user doesn\'t have Facebook installed (only for linkContent)\n\n```TypeScript\nshowShareDialog(this.linkContent);\nshowMessageDialog(this.linkContent);\nshowShareDialog(this.linkContent, (error:Error, result:ShareCallbackResult) => {\n    if(!error){\n        console.log(result.android); // com.facebook.share.Sharer.Result\n        console.log(result.ios); // (NSDictionary * ) The results from the sharer. This may be nil or empty.\n    }\n});\n```\n\n### Hide Custom Button If Can\'t share\n\nYou can use this method to check if the content can be shared and hide the custom button if can\'t\n\n```TypeScript\npublic canShowPhotosShareDialog = canShareDialogShow(this.photosContent);\npublic canShowGenericMessageDialog = canMessageDialogShow(this.genericContent);\n```\n```html\n<Button (tap) = "onShareDialogPhotos()" text = "Open Share dialog (photos)" *ngIf = "canShowPhotosShareDialog"></Button>\n<Button (tap) = "onSendGenericDialog()" text = "Share Message Generic Template" *ngIf = "canShowGenericMessageDialog"></Button>\n```\n\n## Login Response\nThe callback that have to be provided to Facebook.login method receives 2 arguments: error and login response object. Login response object has the following structure:\n\n| Property        | Description  \n| ------------- |:-------------| \n| token         | access token which will be used for further authentications      |  \n\n\n## Get Current Access Token\nThe plugin allows to get the current access token, if any, via getCurrentAccessToken() method.\n\n## Basic Analytics\nThe plugin allows to log analytics events. At the initialization of the application you need to init analytics:\n\n```Typescript\napplication.on(application.launchEvent, function (args) {\n    nsFacebook.init("{facebook_app_id}");\n    nsFacebook.initAnalytics();\n});\n```\n\nEvents logging:\n\n```Typescript\nnsFacebook.logEvent(\'Lead\');\n```\n\nLogging event with parameters:\n\n```Typescript\nconst value = 5;\nconst parameters = [{\n    key: \'value\',\n    value: value.toString(),\n}];\n\nnsFacebook.logEvent(FundsAdded, parameters);\n```\n\n## Graph API Example\nOnce the Facebook access token is retrieved you can execute Graph API requests. In the example below after successful login, the access token is stored in application settings. And then on the home view it is retrieved and 2 Graph API calls are executed.\n1. Get Facebook id of the logged in user\n2. Get the logged in user avatar (this is kind of workaround of this NativeScript issue. [#2176](https://github.com/NativeScript/NativeScript/issues/2176))\n\n```TypeScript\nexport class HomeComponent {\n    accessToken: string = appSettings.getString("access_token");\n    userId: string;\n    username: string;\n    avatarUrl: string;\n\n    constructor(private ref: ChangeDetectorRef, private navigationService: NavigationService) {\n        // Get logged in user\'s info\n        http.getJSON(config.FACEBOOK_GRAPH_API_URL + "/me?access_token=" + this.accessToken).then((res) => {\n            this.username = res.name;\n            this.userId = res.id;\n\n            // Get logged in user\'s avatar\n            // ref: https://github.com/NativeScript/NativeScript/issues/2176\n            http.getJSON(config.FACEBOOK_GRAPH_API_URL + "/" + this.userId + "/picture?type=large&redirect=false&access_token=" + this.accessToken).then((res) => {\n                this.avatarUrl = res.data.url;\n                this.ref.detectChanges();\n            }, function (err) {\n                alert("Error getting user info: " + err);\n            });\n        }, function (err) {\n            alert("Error getting user info: " + err);\n        });\n    }\n```\n\nThis sample is part of the demo apps and can be observed [here](https://github.com/NativeScript/nativescript-facebook/blob/master/demo/app/home-view-model.ts) for Nativescript Code and [here](https://github.com/NativeScript/nativescript-facebook/blob/master/demo-angular/app/pages/home/home.component.ts) for NativeScript + Angular.\n\n\n## Release notes\n\nCheck out release notes [here](https://github.com/NativeScript/nativescript-facebook/releases)\n\n## FAQ\nCheck out our FAQ section [here](https://github.com/NativeScript/nativescript-facebook/wiki/FAQ).\n\n## Contribute\nWe love PRs! Check out the [contributing guidelines](CONTRIBUTING.md). If you want to contribute, but you are not sure where to start - look for [issues labeled `help wanted`](https://github.com/NativeScript/nativescript-facebook/issues?q=is%3Aopen+is%3Aissue+label%3A%22help+wanted%22).\n\n  \n## Get Help \nPlease, use [github issues](https://github.com/NativeScript/nativescript-facebook/issues) strictly for [reporting bugs](CONTRIBUTING.md#reporting-bugs) or [requesting features](CONTRIBUTING.md#requesting-new-features). For general questions and support, check out [Stack Overflow](https://stackoverflow.com/questions/tagged/nativescript) or ask our experts in [NativeScript community Slack channel](http://developer.telerik.com/wp-login.php?action=slack-invitation).\n  \n![](https://ga-beacon.appspot.com/UA-111455-24/nativescript/nativescript-facebook?pixel) \n'