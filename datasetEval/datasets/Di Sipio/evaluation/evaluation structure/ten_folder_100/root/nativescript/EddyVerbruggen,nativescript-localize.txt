b'# nativescript-localize\n[![npm](https://img.shields.io/npm/v/nativescript-localize.svg)](https://www.npmjs.com/package/nativescript-localize)\n[![npm](https://img.shields.io/npm/dm/nativescript-localize.svg)](https://www.npmjs.com/package/nativescript-localize)\n\nThis is a plugin for NativeScript that implements internationalization (i18n) using the native capabilities\nof each platform. It is inspired from [nativescript-i18n](https://github.com/rborn/nativescript-i18n)\n\n## Credits\nA lot of thanks goes out to [Ludovic Fabr\xc3\xa8ges (@lfabreges)](https://github.com/lfabreges) for developing and maintaining this plugin in the past. When he had to abandon it due to shifted priorities, he was kind enough to [move the repo to me](https://github.com/EddyVerbruggen/nativescript-localize/issues/73).\n\n## Table of contents\n* [Installation](#installation)\n* [Usage](#usage)\n  * [Angular](#angular)\n  * [Javascript](#javascript)\n  * [Vue](#vue)\n* [File format](#file-format)\n* [Frequently asked questions](#frequently-asked-questions)\n  * [How to set the default language?](#how-to-set-the-default-language)\n  * [How to localize the application name?](#how-to-localize-the-application-name)\n  * [How to localize iOS properties?](#how-to-localize-ios-properties)\n  * [How to change the language dynamically at runtime?](#how-to-change-the-language-dynamically-at-runtime)\n* [Troubleshooting](#troubleshooting)\n  * [The angular localization pipe does not work when in a modal context](#the-angular-localization-pipe-does-not-work-when-in-a-modal-context)\n\n## Installation\n```shell\ntns plugin add nativescript-localize\n```\n\n## Usage\nCreate a folder `i18n` in the `app` folder with the following structure:\n```\napp\n  | i18n\n      | en.json           <-- english language\n      | fr.default.json   <-- french language (default)\n \xc2\xa0 \xc2\xa0  | es.js\n```\n\nYou need to [set the default langage](#how-to-set-the-default-language) and make sure it contains\nthe [application name](#how-to-localize-the-application-name) to avoid any error.\n\n### Angular\n#### app.module.ts\n```ts\nimport { NgModule, NO_ERRORS_SCHEMA } from "@angular/core";\nimport { NativeScriptLocalizeModule } from "nativescript-localize/angular";\nimport { NativeScriptModule } from "nativescript-angular/nativescript.module";\n\nimport { AppComponent } from "./app.component";\n\n@NgModule({\n  declarations: [AppComponent],\n  bootstrap: [AppComponent],\n  imports: [\n    NativeScriptModule,\n    NativeScriptLocalizeModule\n  ],\n  schemas: [NO_ERRORS_SCHEMA]\n})\nexport class AppModule { }\n```\n\n#### Template\n```xml\n<Label text="{{ \'Hello world !\' | L }}"/>\n<Label text="{{ \'I am %s\' | L:\'user name\' }}"/>\n```\n\n#### Script\n```ts\nimport { localize } from "nativescript-localize";\n\nconsole.log(localize("Hello world !"));\n```\n\n### Javascript\n#### app.js\n```js\nconst application = require("application");\nconst localize = require("nativescript-localize");\napplication.setResources({ L: localize });\n```\n\n#### Template\n```xml\n<Label text="{{ L(\'Hello world !\') }}"/>\n<Label text="{{ L(\'I am %s\', \'user name\') }}"/>\n```\n\n#### Script\n```js\nconst localize = require("nativescript-localize");\n\nconsole.log(localize("Hello world !"));\n```\n\n### Vue\n#### app.js\n```js\nimport { localize } from "nativescript-localize";\n\nVue.filter("L", localize);\n```\n\n#### Template\n```html\n<Label :text="\'Hello world !\'|L"></Label>\n<Label :text="\'I am %s\'|L(\'user name\')"></Label>\n```\n\n## File format\nEach file is imported using `require`, use the file format of your choice:\n\n#### JSON\n```json\n{\n  "app.name": "My app",\n  "ios.info.plist": {\n    "NSLocationWhenInUseUsageDescription": "This will be added to InfoPlist.strings"\n  },\n  "user": {\n    "name": "user.name",\n    "email": "user.email"\n  },\n  "array": [\n    "split the translation into ",\n    "multiples lines"\n  ],\n  "sprintf": "format me %s",\n  "sprintf with numbered placeholders": "format me %2$s one more time %1$s"\n}\n```\n\n#### Javascript\n```js\nconst i18n = {\n  "app.name": "My app"\n};\n\nmodule.exports = i18n;\n```\n\n## Frequently asked questions\n### How to set the default language?\nAdd the `.default` extension to the default language file to set it as the fallback language:\n```\nfr.default.json\n```\n\n### How to localize the application name?\nThe `app.name` key is used to localize the application name:\n```json\n{\n  "app.name": "My app"\n}\n```\n\n### How to localize iOS properties?\nKeys starting with `ios.info.plist.` are used to localize iOS properties:\n```json\n{\n  "ios.info.plist.NSLocationWhenInUseUsageDescription": "This will be added to InfoPlist.strings"\n}\n```\n\n### How to change the language dynamically at runtime?\nThis plugin uses the native capabilities of each platform, language selection is therefore made by the OS.\n\nOn iOS you can programmatically override this language since plugin version 4.2.0 by doing this:\n\n```typescript\nimport { overrideLocale } from "nativescript-localize/localize";\nconst localeOverriddenSuccessfully = overrideLocale("en-GB"); // or "nl-NL", etc\n```\n\n## Troubleshooting\n### The angular localization pipe does not work when in a modal context\nAs a workaround, you can trigger a change detection from within your component constructor:\n```ts\nconstructor(\n  private readonly params: ModalDialogParams,\n  private readonly changeDetectorRef: ChangeDetectorRef,\n) {\n  setTimeout(() => this.changeDetectorRef.detectChanges(), 0);\n}\n```\n'