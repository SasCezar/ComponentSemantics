b'NativeScript plugin for Google Maps SDK\n================\n\nThis is a cross-platform (iOS & Android) Nativescript plugin for the [Google Maps API](https://developers.google.com/maps/)\n\n[![NPM version][npm-image]][npm-url]\n[![Dependency status][david-dm-image]][david-dm-url]\n\n[npm-url]: https://npmjs.org/package/nativescript-google-maps-sdk\n[npm-image]: http://img.shields.io/npm/v/nativescript-google-maps-sdk.svg\n[david-dm-url]:https://david-dm.org/dapriett/nativescript-google-maps-sdk\n[david-dm-image]:https://david-dm.org/dapriett/nativescript-google-maps-sdk.svg\n\n[![NPM](https://nodei.co/npm/nativescript-google-maps-sdk.png?downloads=true&downloadRank=true&stars=true)](https://npmjs.org/package/nativescript-google-maps-sdk)\n\nPrerequisites\n===\n*iOS* - Cocoapods is [installed](https://guides.cocoapods.org/using/getting-started.html#getting-started)\n\n*Android* - Latest Google Play services SDK [installed](https://developer.android.com/sdk/installing/adding-packages.html)\n\n*Google Maps API Key* - Go to the [Google Developers Console](https://console.developers.google.com), create a project, and enable the `Google Maps Android API` and `Google Maps SDK for iOS` APIs.  Then under credentials, create an API key.\n\nInstallation\n===\n\n## Install the plugin using the NativeScript CLI tooling\n\n```\ntns plugin add nativescript-google-maps-sdk\n```\n\nSetup Google Maps API\n===\n\nSee demo code included [here](https://github.com/dapriett/nativescript-google-maps-sdk/tree/master/demo)\n\nLive Demo [here](https://tinyurl.com/m7ndp7u)\n \n## Setup Android API Key\n\n\n\n### Nativescript < 4\n\nFirst copy over the template string resource files for Android\n\n```\ncp -r node_modules/nativescript-google-maps-sdk/platforms/android/res/values app/App_Resources/Android/\n```\nNext modify the file at `app/App_Resources/Android/values/nativescript_google_maps_api.xml`, uncomment `nativescript_google_maps_api_key` string and replace `PUT_API_KEY_HERE` with your api key.\n\nThen, in your `AndroidManifest.xml` located at `app/App_Resources/Android/AndroidManifest.xml`  insert into your `<application>` tags \n\n```(xml)\n<meta-data\n            android:name="com.google.android.geo.API_KEY"\n            android:value="@string/nativescript_google_maps_api_key" />\n```\n\n### Nativescript 4+\n\nFirst copy over the template string resource files for Android\n\n```\ncp -r node_modules/nativescript-google-maps-sdk/platforms/android/res/values app/App_Resources/Android/src/main/res\n```\n\nNext modify the file at `app/App_Resources/Android/src/main/res/values/nativescript_google_maps_api.xml`, uncomment `nativescript_google_maps_api_key` string and replace `PUT_API_KEY_HERE` with your api key.\n\nThen, in your `AndroidManifest.xml` located at `app/App_Resources/Android/src/main/AndroidManifest.xml` insert into your `<application>` tags \n\n```(xml)\n<meta-data\n            android:name="com.google.android.geo.API_KEY"\n            android:value="@string/nativescript_google_maps_api_key" />\n```\n\nThe plugin will default to latest available version of the Android `play-services-maps` SDK.  If you need to change the version, you can add a project ext property `googlePlayServicesVersion` like so:\n\n```\n//   /app/App_Resources/Android/app.gradle\n\nproject.ext {\n    googlePlayServicesVersion = "+"\n}\n```\n\n## Setup iOS API Key\n\nIn the main script of your app `app.js`, use the following to add the API key (providing your key in place of `PUT_API_KEY_HERE`)\n\n```\nif(application.ios) {\n  GMSServices.provideAPIKey("PUT_API_KEY_HERE");\n}\n```\nIf you are using Angular, you need to modify the `app.module.ts` as follows:\n```\nimport * as platform from "platform";\ndeclare var GMSServices: any;\n....\nif (platform.isIOS) { \n  GMSServices.provideAPIKey("PUT_API_KEY_HERE");\n}\n```\n\n##  Adding the MapView\n\nModify your view by adding the namespace `xmlns:maps="nativescript-google-maps-sdk"` to your page, then using the `<maps:mapView />` tag to create the MapView.\n\n```\n <!-- /app/main-page.xml -->\n <Page \n\txmlns="http://www.nativescript.org/tns.xsd"\n\txmlns:maps="nativescript-google-maps-sdk"\n\t>\n  <GridLayout>\n    <maps:mapView latitude="{{ latitude }}" longitude="{{ longitude }}" mapAnimationsEnabled="{{ mapAnimationsEnabled }}"\n    \t\t\t\t\t\t\t\tzoom="{{ zoom }}" bearing="{{ bearing }}" \n    \t\t\t\t\t\t\t\ttilt="{{ tilt }}" padding="{{ padding }}" mapReady="onMapReady"  \n   \t\t\t\t\t\t\t\tmarkerSelect="onMarkerSelect" markerBeginDragging="onMarkerBeginDragging"\n   \t\t\t\t\t\t\t\tmarkerEndDragging="onMarkerEndDragging" markerDrag="onMarkerDrag"\n   \t\t\t\t\t\t\t\tcameraChanged="onCameraChanged" \n                                cameraMove="onCameraMove" />\n  </GridLayout>\n</Page>\n```\n\n## Properties\n\nThe following properties are available to you for adjusting camera view.\n\nProperty       | Description\n-------------- |:---------------------------------\n`latitude` | number\n`longitude` | number\n`zoom` | number\n`bearing` | number\n`tilt` | number\n`padding` | array of numbers reflectig top, bottom, left and right paddings\n`mapAnimationsEnabled` | boolean of whether to animate camera changes\n\n## Events\n\nThe following events are available:\n\nEvent          | Description\n-------------- |:---------------------------------\n`mapReady`     | Called when Google Map is ready for use\n`coordinateTapped` | Fires when coordinate is clicked on map\n`coordinateLongPress` | Fires when coordinate is "long pressed"\n`markerSelect` | Fires whenever a marker is selected\n`shapeSelect` | Fires whenever a shape (`Circle`, `Polygon`, `Polyline`) is clicked.  You must explicity configure `shape.clickable = true;` on your shapes.\n`markerBeginDragging` | Fires when a marker begins dragging\n`markerDrag` | Fires repeatedly while a marker is being dragged\n`markerEndDragging` | Fires when a marker ends dragging\n`markerInfoWindowTapped` | Fired on tapping Marker Info Window\n`cameraChanged` | Fired after the camera has changed\n`cameraMove` | Fired while the camera is moving\n\n\nThe property `gMap` gives you access to the raw platform Map Object - see their SDK references for how to use them ( [iOS](https://developers.google.com/maps/documentation/ios-sdk/reference/interface_g_m_s_map_view) | [Android](https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap) )\n\n```\n//  /app/main-page.js\n\nvar mapsModule = require("nativescript-google-maps-sdk");\n\nfunction onMapReady(args) {\n  var mapView = args.object;\n\n  console.log("Setting a marker...");\n  var marker = new mapsModule.Marker();\n  marker.position = mapsModule.Position.positionFromLatLng(-33.86, 151.20);\n  marker.title = "Sydney";\n  marker.snippet = "Australia";\n  marker.userData = { index : 1};\n  mapView.addMarker(marker);\n  \n  // Disabling zoom gestures\n  mapView.settings.zoomGesturesEnabled = false;\n}\n\nfunction onMarkerSelect(args) {\n   console.log("Clicked on " +args.marker.title);\n}\n\nfunction onCameraChanged(args) {\n    console.log("Camera changed: " + JSON.stringify(args.camera)); \n}\n\nfunction onCameraMove(args) {\n    console.log("Camera moving: "+JSON.stringify(args.camera));\n}\n\nexports.onMapReady = onMapReady;\nexports.onMarkerSelect = onMarkerSelect;\nexports.onCameraChanged = onCameraChanged;\nexports.onCameraMove = onCameraMove;\n```\n\n## UI Settings\n\nYou can adjust the Map UI settings after mapReady by changing the below properties on `mapView.settings`\n\nProperty       | Description\n-------------- |:---------------------------------\n`compassEnabled` | boolean - Whether the compass is enabled/disabled\n`indoorLevelPickerEnabled` | boolean - Whether the indoor level picker is enabled/disabled\n`mapToolbarEnabled` | boolean - Whether the indoor level picker is enabled/disabled ** ****Android only**** **\n`myLocationButtonEnabled` | boolean - Whether the my-location button is enabled/disabled\n`rotateGesturesEnabled` | boolean - Whether the compass is enabled/disabled\n`scrollGesturesEnabled` | boolean - Whether scroll gestures are enabled/disabled\n`tiltGesturesEnabled` | boolean - Whether tilt gestures are enabled/disabled\n`zoomControlsEnabled` | boolean - Whether the zoom controls are enabled/disabled ** ****Android only**** **\n`zoomGesturesEnabled` | boolean - Whether zoom gestures are enabled/disabled\n\n\n## Styling\nUse `gMap.setStyle(style);` to change the map styling.\n\nFor Angular map styling, use `this.mapView.setStyle(<Style>JSON.parse(this.styles));` inside of the `onMapReady` function.  In this example `this.mapView` is the imported `MapView` from the plugin and `this.styles` is a reference to a json file that was created using the link below.  The `<Style>` was also imported from the plugin as `{ Style }`.\n\nFor map styles, see [Google Maps Style Reference](https://developers.google.com/maps/documentation/android-api/style-reference) and the [Styling Wizard](https://mapstyle.withgoogle.com/).\n\n## Custom Info Windows (Beta)\n\nTo customize the marker info windows, define a template in your view like so:\n\n```\n <!-- /app/main-page.xml -->\n <Page \n\txmlns="http://www.nativescript.org/tns.xsd"\n\txmlns:maps="nativescript-google-maps-sdk"\n\t>\n  <GridLayout>\n       <maps:mapView mapReady="onMapReady">\n            <!-- Default Info Window Template -->       \t\t\n            <maps:mapView.infoWindowTemplate>\n                <StackLayout orientation="vertical" width="200" height="150" >\n                    <Label text="{{title}}" className="title" width="125"   />\n                    <Label text="{{snippet}}" className="snippet" width="125"   />\n                    <Label text="{{\'LAT: \' + position.latitude}}" className="infoWindowCoordinates"  />\n                    <Label text="{{\'LON: \' + position.longitude}}" className="infoWindowCoordinates"  />\n                </StackLayout>\n            </maps:mapView.infoWindowTemplate>\n            <!-- Keyed Info Window Templates -->   \n            <maps:mapView.infoWindowTemplates>\n                <template key="testWindow">\n                    <StackLayout orientation="vertical" width="160" height="160" >\n                        <Image src="res://icon" stretch="fill"  height="100" width="100" className="infoWindowImage" />\n                        <Label text="Let\'s Begin!" className="title" />\n                    </StackLayout>\n                </template>\n            </maps:mapView.infoWindowTemplates>\n        </maps:mapView>\n  </GridLayout>\n</Page>\n```\n\nIf a marker has the `infoWindowTemplate` property set like so:\n\n```\nvar marker = new mapsModule.Marker();\nmarker.infoWindowTemplate = \'testWindow\';\n```\n\nThis will use the template with that key.  If it\'s not set then it\'ll use the default custom template if set, overwise the standard info window.\n\n** *Known Issue* - External Images fail to show in iOS info windows (local Images work fine)\n\n## Using with Angular\n\nSee angular demo code included [here](https://github.com/dapriett/nativescript-google-maps-sdk/tree/master/ng-demo)\n\n```\n// /app/map-example.component.ts\n\nimport {Component, ElementRef, ViewChild} from \'@angular/core\';\nimport {registerElement} from "nativescript-angular/element-registry";\n\n// Important - must register MapView plugin in order to use in Angular templates\nregisterElement("MapView", () => require("nativescript-google-maps-sdk").MapView);\n\n@Component({\n    selector: \'map-example-component\',\n    template: `\n    <GridLayout>\n        <MapView (mapReady)="onMapReady($event)"></MapView>\n    </GridLayout>\n    `\n})\nexport class MapExampleComponent {\n\n    @ViewChild("MapView") mapView: ElementRef;\n\n    //Map events\n    onMapReady = (event) => {\n        console.log("Map Ready");\n    };\n}\n```\n\n# Clustering Support (Issue [#57](https://github.com/dapriett/nativescript-google-maps-sdk/issues/57))\n\nThere is a seperate plugin in development thanks to [@naderio](https://github.com/naderio) - see [nativescript-google-maps-utils](https://github.com/naderio/nativescript-google-maps-utils)\n\n# Get Help\n\nChecking with the Nativescript community is your best bet for getting help.\n\nIf you have a question, start by seeing if anyone else has encountered the scenario on [Stack Overflow](http://stackoverflow.com/questions/tagged/nativescript). If you cannot find any information, try [asking the question yourself](http://stackoverflow.com/questions/ask/advice?). Make sure to add any details needed to recreate the issue and include the \xe2\x80\x9cNativeScript\xe2\x80\x9d and "google-maps" tags, so your question is visible to the NativeScript community.\n\nIf you need more help than the Q&A format Stack Overflow can provide, try [joining the NativeScript community Slack](http://developer.telerik.com/wp-login.php?action=slack-invitation). The Slack chat is a great place to get help troubleshooting problems, as well as connect with other NativeScript developers.\n\nFinally, if you have found an issue with the NativeScript Google Maps SDK itself, or requesting a new feature, please report them here [Issues](https://github.com/dapriett/nativescript-google-maps-sdk/issues).\n'