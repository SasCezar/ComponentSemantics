b'[![npm](https://img.shields.io/npm/v/nativescript-webview-interface.svg)](https://www.npmjs.com/package/nativescript-webview-interface)\n[![npm](https://img.shields.io/npm/dt/nativescript-webview-interface.svg?label=npm%20downloads)](https://www.npmjs.com/package/nativescript-webview-interface)\n\n# Nativescript-WebView-Interface\nNativescript Plugin for bi-directional communication between WebView and Android/iOS\n\n## Installation\nFrom the terminal, go to your app\'s root folder and execute:\n```\ntns plugin add nativescript-webview-interface\n```\n\nOnce the plugin is installed, you need to copy plugin file for webView into your webView content folder.\ne.g\n```\ncp node_modules/nativescript-webview-interface/www/nativescript-webview-interface.js app/www/lib/\n```\n\n## Usage\nFor a quick start, you can check this [Demo App](https://github.com/shripalsoni04/nativescript-webview-interface-demo) and [Blog Post](http://shripalsoni.com/blog/nativescript-webview-native-bi-directional-communication/).\nIf you are using this plugin with **Angular 2**, you can check this [angular version of the demo app](https://github.com/shripalsoni04/ns-ng-webview-interface-demo).\n\n### Inside Native App\n\nInsert a `web-view` somewhere in your page.\n```xml\n<Page xmlns="http://schemas.nativescript.org/tns.xsd" loaded="pageLoaded">\n....\n<web-view id="webView"></web-view>\n....\n</Page>\n```\n\nInitialize `WebViewInterface` Plugin in your javascript file.\n```javascript\nvar webViewInterfaceModule = require(\'nativescript-webview-interface\');\nvar oWebViewInterface;\n\nfunction pageLoaded(args){\n    page = args.object;\n    setupWebViewInterface(page) \n}\n\n// Initializes plugin with a webView\nfunction setupWebViewInterface(page){\n    var webView = page.getViewById(\'webView\');\n    oWebViewInterface = new webViewInterfaceModule.WebViewInterface(webView, \'~/www/index.html\');\n}\n```\n**Note**: Please note in above example that, we have not set **src** in template and we have passed it in **constructor** of *WebViewInterface*. This is recommended way to use this plugin to avoid issue\nof communication from web-view to android not working sometimes on some devices.\n\nUse any [API Method](#native-app-api) of WebViewInterface Class\n```javascript\nfunction handleEventFromWebView(){\n    oWebViewInterface.on(\'anyEvent\', function(eventData){\n        // perform action on event\n    });\n}\n\nfunction emitEventToWebView(){\n    oWebViewInterface.emit(\'anyEvent\', eventData);\n}\n\nfunction callJSFunction(){\n    oWebViewInterface.callJSFunction(\'functionName\', args, function(result){\n        \n    });\n}\n```\n\nIf you want to emit an event or call a JS function on load of the page, you need to call all such code once webView is loaded\n```javascript\nwebView.on(\'loadFinished\', (args) => {\n    if (!args.error) {\n        // emit event to webView or call JS function of webView\n    }\n});\n```\n\n### Inside WebView\n\nImport `nativescript-webview-interface.js` in your html page.\n```html\n<html>\n    <head></head>\n    <body>\n        <script src="path/to/nativescript-webview-interface.js"></script>\n        <script src="path/to/your-custom-script.js"></script>        \n    </body>\n</html>\n```\n\nUse any [API Method](#webview-api) of `window.nsWebViewInterface` inside webview\n\n```javascript\nvar oWebViewInterface = window.nsWebViewInterface;\n\n// register listener for any event from native app\noWebViewInterface.on(\'anyEvent\', function(eventData){\n    \n});\n\n// emit event to native app\noWebViewInterface.emit(\'anyEvent\', eventData);\n\n// function which can be called by native app\nwindow.functionCalledByNative = function(arg1, arg2){\n    // do any processing\n    return dataOrPromise;\n}\n```\n## API\n\n### Native App API\n\n*Constructor:*\n\n#### WebViewInterface(webView: WebView, src?: string)\n**webView** is an instance of nativescript [web-view](https://docs.nativescript.org/cookbook/ui/web-view). \n\n**src** is the url/local path to be loaded in web-view. If it is set, then you don\'t need to set it in *src* attribute in xml file. For proper functioning of web-view to native communication on all device\'s it is **recommended** to set src here.\n\n*API Methods of WebViewInterface Class:*\n\n#### on(eventOrCmdName: string, callback: (eventData: any) => void): void\nUse this method to assign listener to any event/command emitted from webView.\n\nCallback will be executed with the data sent from webView in any format. \n\n#### off(eventOrCmdName: string, callback?: (eventData: any) => void): void\nUse this method to de-register listener of any event/command emitted from webView.\n\nIf callback is not set, all the event listeners for this event will be de-registered.\n\n#### emit(eventOrCmdName: string, data: any): void\nUse this method to emit any event/command from native app to webView with data in any format.\n\n#### callJSFunction(webViewFunctionName: string, args: any[], successHandler: (result: any) => void, errorHandler: (error: any) => void): void\nUse this method to call to any javascript function in global scope in webView.\n\nArguments are optional. But if supplied, must be in array format.\n\nIf the function is successfully executed, the successHandler will be called with the result returned by the JS Function. If promise is returned from the JS Function, the resolved value will come as result.<br/>\nIf the function execution generates any error, the errorHandler will be called with the error.\n\n#### destroy(): void\nUse this method to clean up webviewInterface resources (eventListeners) to avoid memory leak.\n\n### WebView API\n\nAPI Methods available in `window.nsWebViewInterface` global variable.\n\n#### on(eventOrCmdName: string, callback: (eventData: any) => void): void\nUse this method to assign listener to  any event/command emited from native app.\n\nCallback will be executed with the data sent from native app in any format.\n\n#### emit(eventOrCmdName: string, data: any): void \nUse this method to emit any event/command from webView to native app with data in any format.\n'