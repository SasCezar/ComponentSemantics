b'[![Build Status](https://travis-ci.org/ShadowApex/godot-go.svg?branch=master)](https://travis-ci.org/ShadowApex/godot-go)\n[![Go Report Card](https://goreportcard.com/badge/github.com/shadowapex/godot-go)](https://goreportcard.com/report/github.com/shadowapex/godot-go)\n[![GoDoc](https://godoc.org/github.com/ShadowApex/goquery?status.png)](https://godoc.org/github.com/ShadowApex/godot-go/godot)\n[![MIT licensed](https://img.shields.io/badge/license-MIT-blue.svg)](https://raw.githubusercontent.com/ShadowApex/godot-go/master/LICENSE)\n\n![Godot-Go logo](/logo.png)\n\nGodot-Go\n========\nGo language bindings for the [Godot Engine](https://godotengine.org/)\'s [GDNative API](https://github.com/GodotNativeTools/godot_headers).\n\n**NOTE:** These bindings are currently still under development. Not all of the design,\nimplementation, or documentation is final. Comments/suggestions are welcome (see GitHub issues).\nThe API is subject to change.\n\nUsage\n-----\nThe Godot Engine can interface with code written in Go using the GDNative module.\nIt works by using Go\'s ability to compile code as a shared library (`.so`, `.dylib`, `.dll`),\nwhich the Godot Engine can load to call Go methods. \n\nThe godot-go library provides you with a method called `godot.AutoRegister`, which will\nallow you to expose a Go struct that follows the `godot.Class` interface to the Godot\nEngine when it loads your shared library. It also provides bindings to all of\nthe available Godot Engine classes and their methods, so you can call Godot \nfunctions from your Go code.\n\n# Setup\n`go get github.com/shadowapex/godot-go/godot`\n\n# Build\nWhen you\'re ready to build your code as a dynamic library that can be imported into\nGodot, use the instructions below depending on your platform.     \n\n## Linux\n`go build -v -buildmode=c-shared -o libgodot.so <your_go_library>.go`    \n\n## Mac OS X\n`go build -v -buildmode=c-shared -o libgodot.dylib <your_go_library>.go`    \n\n# Tutorial\nTo write a Go shared library that can be used in Godot, you\'ll first need to create \na `.go` file that will act as the entrypoint to your library. This file *must*\nhave `package main` as the package name along with `main()` and `init()` functions\ndefined. The `main()` function will be empty, but is required to compile it\nas a shared library:\n\n```go\npackage main\n\nfunc init() {\n}\n\nfunc main() {\n}\n```\n\nAfter setting this up, we can define a new struct that we want to be available\nin Godot. In our struct, we can embed one of any available Godot class so it implements\nthe `godot.Class` interface. Note that embedding multiple Godot structs is not supported.\n\n```go\n// SimpleClass is a simple go struct that can be attached to a Godot Node2D object.\ntype SimpleClass struct {\n\tgodot.Node2D\n}\n```\n\nOnce we have our struct defined, we can now attach method receivers to our struct.\nAll methods attached to this struct will be callable from Godot, provided that they\ntake and/or return built-in or godot types. Let\'s go ahead and define a method \nreceiver for the `X_ready` method, which Godot will call when our node enters\nthe scene. \n\n```go\n// X_ready is called as soon as the node enters the scene.\nfunc (h *SimpleClass) X_ready() {\n\tgodot.Log.Warning("Hello World!")\n}\n```\n\nNow that we have a struct and a method defined, we need to create a constructor\nfunction that will return a new instance of our `SimpleClass` struct. This method \nwill be called by Godot whenever it needs to create a new instance of your object.\n\n```go\n// NewSimpleClass is a constructor that we can pass to godot.\nfunc NewSimpleClass() godot.Class {\n\treturn &SimpleClass{}\n}\n```\n\nNow that we have a constructor function, we can register the function with\nGodot, so it knows how to create a new instance of your struct and call its\nmethods. We can register the class by calling the `godot.AutoRegister` method \nin our `init()` function, which is a special Go function that will be executed\nwhen our shared library is loaded, and passing our constructor function.\n\n```go\nfunc init() {\n\t// AutoRegister will register the given class constructor with Godot.\n\tgodot.AutoRegister(NewSimpleClass)\n}\n```\n\nThe `godot.AutoRegister` function works by calling your constructor and inspecting\nyour Godot struct with reflection for all public receiver methods and struct\nfields. It will then register the constructor and your struct\'s methods and fields\nwith Godot through Godot\'s GDNative C API.\n\nNow we can compile our project into a shared library:\n\n**Linux**    \n`go build -v -buildmode=c-shared -o libgodot.so <your_go_library>.go`    \n\n**Mac OS X**    \n`go build -v -buildmode=c-shared -o libgodot.dylib <your_go_library>.go`    \n\nThis will create a shared library object that you can use in Godot! To learn how\nto set up your library in Godot, refer to the section below.\n\n# How do I use native scripts from the editor?\n\nFirst, copy your `.so`, `.dylib`, and/or `.dll` library that you compiled into\nyour project folder.\n\nCreate a new `GDNativeLibrary` resource by clicking the new icon in the inspector.\nA `GDNativeLibrary` resource is a platform-agnostic abstraction of our native library. \nWith it, it allows us to specify different shared library object files for different\nplatforms, such as `.so` for Linux platforms, `.dylib` for Mac, and `.dll` for Windows.\n![](images/tutorial01.png)\n\nSelect `GDNativeLibrary` from the list of resource types.\n![](images/tutorial02.png)\n\nSelect the folder icon next to the platform that you want to support in the inspector.\nFor Linux platforms, you\'ll want to select a `.so` file, `.dylib` for Mac, and `.dll` for\nWindows. You can add each shared library file for each platform you want to support.\n\n![](images/tutorial03.png)\n\nSelect your shared library file from your project directory.\n\n![](images/tutorial04.png)\n\nClick the save icon and then click "Save As.."\n\n![](images/tutorial05.png)    \n![](images/tutorial06.png)    \n\nSave your GDNativeLibrary resource to your project directory. This file simply\ncontains the paths to the shared library objects for each platform you want to\nsupport.\n\n![](images/tutorial07.png)    \n\nNow create a new node that you want to attach your Go library to.\n\n![](images/tutorial08.png)    \n![](images/tutorial09.png)    \n\nClick the add script icon to attach your Go library to the node.\n\n![](images/tutorial10.png)    \n\nSelect "NativeScript" as the script language, and enter the name of the struct \nthat you registered in your Go library that you would like to be attached to this\nnode. You should also select "Built-in Script", so this setting is built in to\nthe scene.\n\n![](images/tutorial11.png)    \n\nWith your node selected, you can now attach our GDNativeLibrary resource that we\ncreated earlier to this node.\n\n![](images/tutorial12.png)    \n![](images/tutorial13.png)    \n\nAttributions\n------------\nThe Go gopher was designed by [Renee French](http://reneefrench.blogspot.com/).\n\nThe logo used above was based on the image by [Takuya Ueda](https://twitter.com/tenntenn). \nLicensed under the Creative Commons 3.0 Attributions license. \nAvailable unmodified from: <https://github.com/golang-samples/gopher-vector>\n\nThe logo used above was also based on the image by [Andrea Calabr\xc3\xb3](https://commons.wikimedia.org/wiki/File:Godot_logo.svg)\nLicensed under the Creative Commons Attribution License version 3.0 [CC-BY 3.0](https://creativecommons.org/licenses/by/3.0/legalcode)\n\nLicense\n-------\nMIT - <https://opensource.org/licenses/MIT>  \n\nLinks\n-----\nGitHub repository - <https://github.com/shadowapex/godot-go>  \nGDNative repository - <https://github.com/GodotNativeTools/godot_headers>  \n\nGodot Engine - <https://godotengine.org>  \nGo programming language - <https://golang.org>  \n'