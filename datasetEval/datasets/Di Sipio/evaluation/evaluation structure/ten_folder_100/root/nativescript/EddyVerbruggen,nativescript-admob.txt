b'# NativeScript AdMob plugin\n\n[![NPM version][npm-image]][npm-url]\n[![Downloads][downloads-image]][npm-url]\n[![Twitter Follow][twitter-image]][twitter-url]\n\n[npm-image]:http://img.shields.io/npm/v/nativescript-admob.svg\n[npm-url]:https://npmjs.org/package/nativescript-admob\n[downloads-image]:http://img.shields.io/npm/dm/nativescript-admob.svg\n[twitter-image]:https://img.shields.io/twitter/follow/eddyverbruggen.svg?style=social&label=Follow%20me\n[twitter-url]:https://twitter.com/eddyverbruggen\n\n## Installation\nFrom the command prompt go to your app\'s root folder and execute:\n```\ntns plugin add nativescript-admob\n```\n\n### iOS\n> \xe2\x9a\xa0\xef\xb8\x8f \xe2\x9a\xa0\xef\xb8\x8f \xe2\x9a\xa0\xef\xb8\x8f Important! Plugin version **4.0.0+** requires you to do this - or your app will crash on start-up! \xe2\x9a\xa0\xef\xb8\x8f\n\nOpen your App_Resources/iOS/Info.plist file and add this (replace the value by the actual App ID of [your app](https://apps.admob.com/)!):\n\n```xml\n  <key>GADApplicationIdentifier</key>\n  <string>ca-app-pub-9517346003011652~2508636525</string>\n```\n\nAlso, run `pod repo update` from a Terminal, otherwise the required Pod version may not be available on your system.\n\n### Android\n> \xe2\x9a\xa0\xef\xb8\x8f \xe2\x9a\xa0\xef\xb8\x8f \xe2\x9a\xa0\xef\xb8\x8f Important! Plugin version **3.0.0+** requires you to do this - or your app will crash on start-up! \xe2\x9a\xa0\xef\xb8\x8f\n\nOpen your App_Resources/Android/AndroidManifest.xml file and add this `meta-data` line at [the right spot](https://github.com/EddyVerbruggen/nativescript-admob/blob/6bfa83c303023d0e8072148dcb45b8befb9cd0aa/demo/app/App_Resources/Android/src/main/AndroidManifest.xml#L28) (and replace the value by the actual App ID of [your app](https://apps.admob.com/)!):\n\n```xml\n<application>\n  <!-- this line needs to be added (replace the value!) -->\n  <meta-data android:name="com.google.android.gms.ads.APPLICATION_ID" android:value="ca-app-pub-3940256099942544~3347511713" />\n\n  <activity></activity>\n</application>\n```\n\n## BANNER\n\nIf you want a quickstart, [clone our demo app](https://github.com/EddyVerbruggen/nativescript-admob-demo).\n\nHere are the supported functions:\n\n### createBanner\n\n#### TypeScript\n\n```typescript\nimport { AD_SIZE, createBanner, hideBanner } from "nativescript-admob";\nimport { isIOS } from "tns-core-modules/platform";\n\nconst testing = true;\ncreateBanner({\n  // if this \'view\' property is not set, the banner is overlayed on the current top most view\n  // view: ..,\n  size: AD_SIZE.SMART_BANNER,\n  iosBannerId: "ca-app-pub-9517346003011652/3985369721",\n  androidBannerId: testing\n      ? "ca-app-pub-3940256099942544/6300978111"  // global test banner id\n      : "ca-app-pub-9517346003011652/7749101329", // our registered banner id\n  // Android automatically adds the connected device as test device with testing:true, iOS does not\n  // iosTestDeviceIds: ["yourTestDeviceUDIDs", "canBeAddedHere"],\n  margins: {\n    // if both are set, top wins\n    // top: 10\n    bottom: isIOS ? 50 : 0\n  },\n  keywords: ["foo", "bar"]\n}).then(\n    () => this.message = "Banner created",\n    error => this.message = "Error creating banner: " + error\n)\n```\n\n#### JavaScript\n```js\nvar admob = require("nativescript-admob");\n\nadmob.createBanner({\n    // if this \'view\' property is not set, the banner is overlayed on the current top most view\n    // view: ..,\n    testing: true, // set to false to get real banners\n    size: size, // anything in admob.AD_SIZE, like admob.AD_SIZE.SMART_BANNER\n    iosBannerId: "ca-app-pub-XXXXXX/YYYYYY", // add your own\n    androidBannerId: "ca-app-pub-AAAAAAAA/BBBBBBB", // add your own\n    // Android automatically adds the connected device as test device with testing:true, iOS does not\n    iosTestDeviceIds: ["yourTestDeviceUDIDs", "canBeAddedHere"],\n    margins: {\n      // if both are set, top wins\n      //top: 10\n      bottom: 50\n    },\n    keywords: ["keyword1", "keyword2"] // add keywords for ad targeting\n  }).then(\n      function() {\n        console.log("admob createBanner done");\n      },\n      function(error) {\n        console.log("admob createBanner error: " + error);\n      }\n)\n```\n\nNote that you can trigger the function above at any moment, and since version 1.1.4\nof this plugin you can even call it [from the `Page.loaded` event](https://github.com/EddyVerbruggen/nativescript-admob-demo/blob/master/AdMob/app/main-page.js#L9).\n\n### hideBanner\nNOTE: If you want to show a different banner than the one showing you don\'t need to call `hideBanner`\nsince `createBanner` will do that for you to prevent your app from crashing.\n\n```js\n// the .then(.. bit is optional btw\nadmob.hideBanner().then(\n      function() {\n        console.log("admob hideBanner done");\n      },\n      function(error) {\n        console.log("admob hideBanner error: " + error);\n      }\n)\n```\n\n## INTERSTITIAL\nTo show a fullscreen ad, you can use this function. Note that Interstitial banners need to be loaded before\nthey can be shown, and there are two ways to do that:\n\n* Use `createInterstitial` and have the plugin automatically preload the ad and show it when loaded. This is not recommended because there\'s a delay the user may notice.\n* (Since plugin version 2.0.0) Use `preloadInterstitial`, and (at any time after its Promise resolves) `showInterstitial`. This will hide the preloading delay for your users. Note that the parameters of `createInterstitial` and `preloadInterstitial` are exactly the same so migration should be easy. \n\nIf you want to get notified when an interstitial is closed, provide an `onAdClosed` callback as shown below.\n\n### createInterstitial\nAgain, not recommended.\n\n```js\nadmob.createInterstitial({\n    testing: true,\n    iosInterstitialId: "ca-app-pub-XXXXXX/YYYYY2", // add your own\n    androidInterstitialId: "ca-app-pub-AAAAAAAA/BBBBBB2", // add your own\n    // Android automatically adds the connected device as test device with testing:true, iOS does not\n    iosTestDeviceIds: ["ce97330130c9047ce0d4430d37d713b2"],\n    keywords: ["keyword1", "keyword2"], // add keywords for ad targeting\n    onAdClosed: function () { console.log("interstitial closed") }\n  }).then(\n      function() {\n        console.log("admob createInterstitial done");\n      },\n      function(error) {\n        console.log("admob createInterstitial error: " + error);\n      }\n)\n```\n\n### preloadInterstitial\nUse this for instance while loading your view, so it\'s ready for the moment you want to actually show it (by calling `showInterstitial`).\n\nNote that the parameters are identical to `createInterstitial`.\n\n```js\nadmob.preloadInterstitial({\n    testing: true,\n    iosInterstitialId: "ca-app-pub-XXXXXX/YYYYY2", // add your own\n    androidInterstitialId: "ca-app-pub-AAAAAAAA/BBBBBB2", // add your own\n    // Android automatically adds the connected device as test device with testing:true, iOS does not\n    iosTestDeviceIds: ["ce97330130c9047ce0d4430d37d713b2"],\n    keywords: ["keyword1", "keyword2"], // add keywords for ad targeting\n    onAdClosed: function () { console.log("interstitial closed") }\n  }).then(\n      function() {\n        console.log("interstitial preloaded - you can now call \'showInterstitial\' whenever you\'re ready to do so");\n      },\n      function(error) {\n        console.log("admob preloadInterstitial error: " + error);\n      }\n)\n```\n\n### showInterstitial\nAt any moment after `preloadInterstitial` successfully resolves, you can call `showInterstitial`.\n\nNote that when you want to use `showInterstitial` again, you also have to use `preloadInterstitial` again because those ads can\'t be reused. \n\n```js\nadmob.showInterstitial().then(\n      function() {\n        // this will resolve almost immediately, and the interstitial is shown without a delay because it was already loaded\n        console.log("interstitial showing");\n      },\n      function(error) {\n        console.log("admob showInterstitial error: " + error);\n      }\n)\n```\n\n\n### preloadRewardedVideoAd\nUse this for instance while loading your view, so it\'s ready for the moment you want to actually show it (by calling `showRewardedVideoAd`).\n\n```js\nadmob.preloadRewardedVideoAd({\n    testing: true,\n    iosAdPlacementId: "ca-app-pub-XXXXXX/YYYYY2", // add your own\n    androidAdPlacementId: "ca-app-pub-AAAAAAAA/BBBBBB2", // add your own\n    keywords: ["keyword1", "keyword2"], // add keywords for ad targeting\n  }).then(\n      function() {\n        console.log("RewardedVideoAd preloaded - you can now call \'showRewardedVideoAd\' whenever you\'re ready to do so");\n      },\n      function(error) {\n        console.log("admob preloadRewardedVideoAd error: " + error);\n      }\n)\n```\n\n### showRewardedVideoAd\nAt any moment after `preloadRewardedVideoAd` successfully resolves, you can call `showRewardedVideoAd`.\n\nNote that when you want to use `showRewardedVideoAd` again, you also have to use `preloadRewardedVideoAd` again because those ads can\'t be reused.\n\nonRewarded is probably the only callback you need to worry about.\n\n```js\nadmob.showRewardedVideoAd({\n  onRewarded: (reward) => {\n    console.log("onRewarded");\n    this.message = "watched rewarded video";\n  },\n  onRewardedVideoAdLeftApplication: () => console.log("onRewardedVideoAdLeftApplication"),\n  onRewardedVideoAdClosed: () => console.log("onRewardedVideoAdClosed"),\n  onRewardedVideoAdOpened: () => console.log("onRewardedVideoAdOpened"),\n  onRewardedVideoStarted: () => console.log("onRewardedVideoStarted"),\n  onRewardedVideoCompleted: () => console.log("onRewardedVideoCompleted"),\n}).then(\n      function() {\n        console.log("RewardedVideoAd showing");\n      },\n      function(error) {\n        console.log("admob showRewardedVideoAd error: " + error);\n      }\n)\n```\n\n## Tutorials\nNeed a little more help getting started? Check out these tutorials for using Admob in a NativeScript Android and iOS application.\n\n* [Monetize with Google Admob in a NativeScript Vanilla Application](https://www.thepolyglotdeveloper.com/2016/03/monetize-with-google-admob-in-a-nativescript-mobile-app/)\n* [Monetize with Google Admob in a NativeScript Angular Application](https://www.thepolyglotdeveloper.com/2016/11/google-admob-nativescript-angular-2/)\n'