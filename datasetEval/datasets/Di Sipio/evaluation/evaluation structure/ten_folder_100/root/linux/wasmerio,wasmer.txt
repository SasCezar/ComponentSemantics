b'<p align="center">\n  <a href="https://wasmer.io" target="_blank" rel="noopener noreferrer">\n    <img width="300" src="https://raw.githubusercontent.com/wasmerio/wasmer/master/logo.png" alt="Wasmer logo">\n  </a>\n</p>\n\n<p align="center">\n  <a href="https://dev.azure.com/wasmerio/wasmer/_build/latest?definitionId=3&branchName=master">\n    <img src="https://img.shields.io/azure-devops/build/wasmerio/wasmer/3.svg?style=flat-square" alt="Build Status">\n  </a>\n  <a href="https://github.com/wasmerio/wasmer/blob/master/LICENSE">\n    <img src="https://img.shields.io/github/license/wasmerio/wasmer.svg?style=flat-square" alt="License">\n  </a>\n  <a href="https://spectrum.chat/wasmer">\n    <img src="https://withspectrum.github.io/badge/badge.svg" alt="Join the Wasmer Community">\n  </a>\n  <a href="https://twitter.com/wasmerio">\n    <img alt="Follow @wasmerio on Twitter" src="https://img.shields.io/twitter/follow/wasmerio?label=%40wasmerio&style=flat-square">\n  </a>\n</p>\n\n## Introduction\n\n[Wasmer](https://wasmer.io/) is a standalone WebAssembly runtime for running WebAssembly [outside of the browser](https://webassembly.org/docs/non-web/), supporting [WASI](https://github.com/WebAssembly/WASI) and [Emscripten](https://emscripten.org/). Wasmer can be used standalone (via the CLI) and embedded in different languages, running in x86 and [ARM devices](https://medium.com/wasmer/running-webassembly-on-arm-7d365ed0e50c).\n\nInstall the Wasmer CLI with:\n\n```sh\ncurl https://get.wasmer.io -sSfL | sh\n```\n\n> Note: *Wasmer is also [available on Windows](https://github.com/wasmerio/wasmer/releases)*\n\n### Languages\n\nWasmer runtime can be used as a library embedded in different languages, so you can use WebAssembly anywhere:\n\n| &nbsp; | Language | Author(s) | Maintenance | Release | Stars |\n|-|-|-|-|-|-|\n| ![Rust logo](./docs/assets/languages/rust.svg) | [**Rust**](https://github.com/wasmerio/wasmer-rust-example) | Wasmer | actively developed | <a href="https://crates.io/crates/wasmer-runtime/" target="_blank">![last release](https://img.shields.io/crates/v/wasmer-runtime?style=flat-square)</a> | ![number of Github stars](https://img.shields.io/github/stars/wasmerio/wasmer?style=flat-square) |\n| ![C logo](./docs/assets/languages/c.svg) | [**C/C++**](https://github.com/wasmerio/wasmer-c-api) | Wasmer | actively developed | <a href="https://github.com/wasmerio/wasmer-c-api/" target="_blank">![last release](https://img.shields.io/github/v/release/wasmerio/wasmer?style=flat-square)</a> | ![number of Github stars](https://img.shields.io/github/stars/wasmerio/wasmer?style=flat-square) |\n| ![Python logo](./docs/assets/languages/python.svg) | [**Python**](https://github.com/wasmerio/python-ext-wasm) | Wasmer | actively developed | <a href="https://pypi.org/project/wasmer/" target="_blank">![last release](https://img.shields.io/pypi/v/wasmer?style=flat-square)</a> | ![number of Github stars](https://img.shields.io/github/stars/wasmerio/python-ext-wasm?style=flat-square) |\n| ![Go logo](./docs/assets/languages/go.svg) | [**Go**](https://github.com/wasmerio/go-ext-wasm) | Wasmer | actively developed | <a href="https://github.com/wasmerio/go-ext-wasm" target="_blank">![last release](https://img.shields.io/github/v/release/wasmerio/go-ext-wasm?style=flat-square)</a> | ![number of Github stars](https://img.shields.io/github/stars/wasmerio/go-ext-wasm?style=flat-square) |\n| ![PHP logo](./docs/assets/languages/php.svg) | [**PHP**](https://github.com/wasmerio/php-ext-wasm) | Wasmer | actively developed | <a href="https://pecl.php.net/package/wasm" target="_blank">![last release](https://img.shields.io/github/v/release/wasmerio/php-ext-wasm?style=flat-square)</a> | ![number of Github stars](https://img.shields.io/github/stars/wasmerio/php-ext-wasm?style=flat-square) |\n| ![Ruby logo](./docs/assets/languages/ruby.svg) | [**Ruby**](https://github.com/wasmerio/ruby-ext-wasm) | Wasmer | actively developed | <a href="https://rubygems.org/gems/wasmer" target="_blank">![last release](https://img.shields.io/gem/v/wasmer?style=flat-square)</a> | ![number of Github stars](https://img.shields.io/github/stars/wasmerio/ruby-ext-wasm?style=flat-square) |\n| ![Postgres logo](./docs/assets/languages/postgres.svg) | [**Postgres**](https://github.com/wasmerio/postgres-ext-wasm) | Wasmer | actively developed | <a href="https://github.com/wasmerio/postgres-ext-wasm" target="_blank">![last release](https://img.shields.io/github/v/release/wasmerio/postgres-ext-wasm?style=flat-square)</a> | ![number of Github stars](https://img.shields.io/github/stars/wasmerio/postgres-ext-wasm?style=flat-square) |\n| ![JS Logo](./docs/assets/languages/js.svg) | [**JavaScript**](https://github.com/wasmerio/wasmer-js) | Wasmer | actively developed | <a href="https://www.npmjs.com/package/@wasmer/wasi" target="_blank">![last release](https://img.shields.io/npm/v/@wasmer/wasi?style=flat-square)</a> | ![number of Github stars](https://img.shields.io/github/stars/wasmerio/wasmer-js?style=flat-square) |\n| ![C# logo](./docs/assets/languages/csharp.svg) | [**C#/.Net**](https://github.com/migueldeicaza/WasmerSharp) | [Miguel de Icaza](https://github.com/migueldeicaza) | actively developed | <a href="https://www.nuget.org/packages/WasmerSharp/" target="_blank">![last release](https://img.shields.io/nuget/v/WasmerSharp?style=flat-square)</a> | ![number of Github stars](https://img.shields.io/github/stars/migueldeicaza/WasmerSharp?style=flat-square) |\n| ![R logo](./docs/assets/languages/r.svg) | [**R**](https://github.com/dirkschumacher/wasmr) | [Dirk Schumacher](https://github.com/dirkschumacher) | actively developed | | ![number of Github stars](https://img.shields.io/github/stars/dirkschumacher/wasmr?style=flat-square) |\n| ![Swift logo](./docs/assets/languages/swift.svg) | [**Swift**](https://github.com/markmals/swift-ext-wasm) | [Mark Malstr\xc3\xb6m](https://github.com/markmals/) | passively maintained | | ![number of Github stars](https://img.shields.io/github/stars/markmals/swift-ext-wasm?style=flat-square) |\n| \xe2\x9d\x93 | [your language is missing?](https://github.com/wasmerio/wasmer/issues/new?assignees=&labels=%F0%9F%8E%89+enhancement&template=---feature-request.md&title=) | | | |\n\n### Usage\n\nWasmer can execute both the standard binary format (`.wasm`) and the text\nformat defined by the WebAssembly reference interpreter (`.wat`).\n\nOnce installed, you will be able to run any WebAssembly files (_including Lua, PHP, SQLite and nginx!_):\n\n```sh\n# Run Lua\nwasmer run examples/lua.wasm\n```\n\n*You can find more `wasm/wat` examples in the [examples](./examples) directory.*\n\n#### With wapm\n\nInstalling Wasmer through `wasmer.io` includes\n[`wapm`](https://github.com/wasmerio/wapm-cli), the [WebAssembly Package Manager](https://wapm.io/).\n\nwapm allows you to easily download, run, and distribute WebAssembly binaries.\n\n```sh\n# Install cowsay globally\nwapm install -g cowsay\n\n# Run cowsay\nwapm run cowsay "Hello, world!"\n```\n\nFor more information about wapm, check out the [website](https://www.wapm.io)\nand this [example program](https://github.com/wapm-packages/rust-wasi-example).\n\n## Code Structure\n\nWasmer is structured into different directories:\n\n- [`src`](./src): code related to the Wasmer executable itself\n- [`lib`](./lib): modularized libraries that Wasmer uses under the hood\n- [`examples`](./examples): some useful examples for getting started with Wasmer\n\n## Dependencies\n\nBuilding Wasmer requires [rustup](https://rustup.rs/).\n\nTo build Wasmer on Windows, download and run [`rustup-init.exe`](https://win.rustup.rs/)\nthen follow the onscreen instructions.\n\nTo build on other systems, run:\n\n```sh\ncurl https://sh.rustup.rs -sSf | sh\n```\n\n### Other dependencies\n\nPlease select your operating system:\n\n<details>\n  <summary><b>macOS</b></summary>\n  <p>\n\n#### macOS\n\nIf you have [Homebrew](https://brew.sh/) installed:\n\n```sh\nbrew install cmake\n```\n\nOr, if you have [MacPorts](https://www.macports.org/install.php):\n\n```sh\nsudo port install cmake\n```\n\n  </p>\n</details>\n\n<details>\n  <summary><b>Debian-based Linuxes</b></summary>\n  <p>\n\n#### Debian-based Linuxes\n\n```sh\nsudo apt install cmake pkg-config libssl-dev\n```\n\n  </p>\n</details>\n\n<details>\n  <summary><b>FreeBSD</b></summary>\n  <p>\n\n#### FreeBSD\n\n```sh\npkg install cmake\n```\n\n  </p>\n</details>\n\n<details>\n  <summary><b>Windows</b></summary>\n  <p>\n\n#### Windows (MSVC)\n\nWindows support is _experimental_. WASI is fully supported, but Emscripten support is in the works (this means\nnginx and Lua do not work on Windows - you can track the progress on [this issue](https://github.com/wasmerio/wasmer/issues/176)).\n\n1. Install [Visual Studio](https://visualstudio.microsoft.com/thank-you-downloading-visual-studio/?sku=Community&rel=15)\n\n2. Install [Rust for Windows](https://win.rustup.rs)\n\n3. Install [Git for Windows](https://git-scm.com/download/win). Allow it to add `git.exe` to your PATH (default\n   settings for the installer are fine).\n\n4. Install [CMake](https://cmake.org/download/). Ensure CMake is in your PATH.\n\n5. Install [LLVM 8.0](https://prereleases.llvm.org/win-snapshots/LLVM-8.0.0-r351033-win64.exe)\n     </p>\n   </details>\n\n## Building\n\n[![Rustc Version 1.38+](https://img.shields.io/badge/rustc-1.37+-red.svg?style=flat-square)](https://blog.rust-lang.org/2019/09/26/Rust-1.38.0.html)\n\nWasmer is built with [Cargo](https://crates.io/), the Rust package manager.\n\nThe Singlepass backend requires nightly, so if you want to use it,\n\nSet Rust Nightly:\n\n```\nrustup default nightly\n```\n\nOtherwise an up to date (see badge above) version of stable Rust will work.\n\nAnd install Wasmer\n\n```sh\n# checkout code\ngit clone https://github.com/wasmerio/wasmer.git\ncd wasmer\n\n# install tools\nmake release-clif # To build with cranelift (default)\n\nmake release-llvm # To build with llvm support\n\nmake release-singlepass # To build with singlepass support\n\n# or\nmake release # To build with singlepass, cranelift and llvm support\n```\n\n## Testing\n\nThanks to [spec tests](https://github.com/wasmerio/wasmer/tree/master/lib/spectests/spectests) we can ensure 100% compatibility with the WebAssembly spec test suite.\n\nYou can run all the tests with:\n\n```sh\nrustup default nightly\nmake test\n```\n\n### Testing backends\n\nEach backend can be tested separately:\n\n* Singlepass: `make singlepass`\n* Cranelift: `make cranelift`\n* LLVM: `make llvm`\n\n### Testing integrations\n\nEach integration can be tested separately:\n\n* Spec tests: `make spectests`\n* Emscripten: `make emtests`\n* WASI: `make wasitests`\n* Middleware: `make middleware`\n* C API: `make capi`\n\n## Benchmarking\n\nBenchmarks can be run with:\n\n```sh\nmake bench-[backend]\n\n# for example\nmake bench-singlepass\n```\n\n## Roadmap\n\nWasmer is an open project guided by strong principles, aiming to be modular, flexible and fast. It is open to the community to help set its direction.\n\nBelow are some of the goals of this project (in order of priority):\n\n- [x] It should be 100% compatible with the [WebAssembly spec tests](https://github.com/wasmerio/wasmer/tree/master/lib/spectests/spectests)\n- [x] It should be fast _(partially achieved)_\n- [x] Support WASI - released in [0.3.0](https://github.com/wasmerio/wasmer/releases/tag/0.3.0)\n- [x] Support Emscripten calls _(in the works)_\n- [ ] Support Go JS ABI calls\n\n## Architecture\n\nIf you would like to know how Wasmer works under the hood, please see [docs/architecture.md](./docs/architecture.md).\n\n## License\n\nWasmer is primarily distributed under the terms of the [MIT license](http://opensource.org/licenses/MIT) ([LICENSE](./LICENSE)).\n\n[ATTRIBUTIONS](./ATTRIBUTIONS.md)\n'