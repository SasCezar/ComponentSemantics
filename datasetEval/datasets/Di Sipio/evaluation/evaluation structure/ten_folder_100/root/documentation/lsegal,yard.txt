b'# YARD: Yay! A Ruby Documentation Tool\n\n[![Homepage](http://img.shields.io/badge/home-yardoc.org-blue.svg)](http://yardoc.org)\n[![GitHub](http://img.shields.io/badge/github-lsegal/yard-blue.svg)](http://github.com/lsegal/yard)\n[![Documentation](http://img.shields.io/badge/docs-rdoc.info-blue.svg)](http://rubydoc.org/gems/yard/frames)\n\n[![Gem Version](https://badge.fury.io/rb/yard.svg)](http://github.com/lsegal/yard/releases)\n[![Build Status](https://travis-ci.org/lsegal/yard.svg?branch=master)](https://travis-ci.org/lsegal/yard)\n[![Coverage Status](https://coveralls.io/repos/github/lsegal/yard/badge.svg)](https://coveralls.io/github/lsegal/yard)\n[![License](http://img.shields.io/badge/license-MIT-yellowgreen.svg)](#license)\n\n## Synopsis\n\nYARD is a documentation generation tool for the Ruby programming language.\nIt enables the user to generate consistent, usable documentation that can be\nexported to a number of formats very easily, and also supports extending for\ncustom Ruby constructs such as custom class level definitions. Below is a\nsummary of some of YARD\'s notable features.\n\n\n## Feature List\n\n**1. RDoc/SimpleMarkup Formatting Compatibility**: YARD is made to be compatible\nwith RDoc formatting. In fact, YARD does no processing on RDoc documentation\nstrings, and leaves this up to the output generation tool to decide how to\nrender the documentation.\n\n**2. Yardoc Meta-tag Formatting Like Python, Java, Objective-C and other languages**:\nYARD uses a \'@tag\' style definition syntax for meta tags alongside  regular code\ndocumentation. These tags should be able to happily sit side by side RDoc formatted\ndocumentation, but provide a much more consistent and usable way to describe\nimportant information about objects, such as what parameters they take and what types\nthey are expected to be, what type a method should return, what exceptions it can\nraise, if it is deprecated, etc.. It also allows information to be better (and more\nconsistently) organized during the output generation phase. You can find a list\nof tags in the {file:docs/Tags.md#taglist Tags.md} file.\n\nYARD also supports an optional "types" declarations for certain tags.\nThis allows the developer to document type signatures for ruby methods and\nparameters in a non intrusive but helpful and consistent manner. Instead of\ndescribing this data in the body of the description, a developer may formally\ndeclare the parameter or return type(s) in a single line. Consider the\nfollowing method documented with YARD formatting:\n\n```ruby\n# Reverses the contents of a String or IO object.\n#\n# @param contents [String, #read] the contents to reverse\n# @return [String] the contents reversed lexically\ndef reverse(contents)\n  contents = contents.read if contents.respond_to? :read\n  contents.reverse\nend\n```\n\nWith the above @param tag, we learn that the contents parameter can either be\na String or any object that responds to the \'read\' method, which is more\npowerful than the textual description, which says it should be an IO object.\nThis also informs the developer that they should expect to receive a String\nobject returned by the method, and although this may be obvious for a\n\'reverse\' method, it becomes very useful when the method name may not be as\ndescriptive.\n\n**3. Custom Constructs and Extensibility of YARD**: YARD is designed to be\nextended and customized by plugins. Take for instance the scenario where you\nneed to document the following code:\n\n```ruby\nclass List\n # Sets the publisher name for the list.\n cattr_accessor :publisher\nend\n```\n\nThis custom declaration provides dynamically generated code that is hard for a\ndocumentation tool to properly document without help from the developer. To\nease the pains of manually documenting the procedure, YARD can be extended by\nthe developer to handle the `cattr_accessor` construct and automatically create\nan attribute on the class with the associated documentation. This makes\ndocumenting external API\'s, especially dynamic ones, a lot more consistent for\nconsumption by the users.\n\nYARD is also designed for extensibility everywhere else, allowing you to add\nsupport for new programming languages, new data structures and even where/how\ndata is stored.\n\n**4. Raw Data Output**: YARD also outputs documented objects as raw data (the\ndumped Namespace) which can be reloaded to do generation at a later date, or\neven auditing on code. This means that any developer can use the raw data to\nperform output generation for any custom format, such as YAML, for instance.\nWhile YARD plans to support XHTML style documentation output as well as\ncommand line (text based) and possibly XML, this may still be useful for those\nwho would like to reap the benefits of YARD\'s processing in other forms, such\nas throwing all the documentation into a database. Another useful way of\nexploiting this raw data format would be to write tools that can auto generate\ntest cases, for example, or show possible unhandled exceptions in code.\n\n**5. Local Documentation Server**: YARD can serve documentation for projects\nor installed gems (similar to `gem server`) with the added benefit of dynamic\nsearching, as well as live reloading. Using the live reload feature, you can\ndocument your code and immediately preview the results by refreshing the page;\nYARD will do all the work in re-generating the HTML. This makes writing\ndocumentation a much faster process.\n\n\n## Installing\n\nTo install YARD, use the following command:\n\n```sh\n$ gem install yard\n```\n\n(Add `sudo` if you\'re installing under a POSIX system as root)\n\nAlternatively, if you\'ve checked the source out directly, you can call\n`rake install` from the root project directory.\n\n**Important Note for Debian/Ubuntu users:** there\'s a possible chance your Ruby\ninstall lacks RDoc, which is occasionally used by YARD to convert markup to HTML.\nIf running `which rdoc` turns up empty, install RDoc by issuing:\n\n```sh\n$ sudo apt-get install rdoc\n```\n\n\n## Usage\n\nThere are a couple of ways to use YARD. The first is via command-line, and the\nsecond is the Rake task.\n\n**1. yard Command-line Tool**\n\nYARD comes packaged with a executable named `yard` which can control the many\nfunctions of YARD, including generating documentation, graphs running the\nYARD server, and so on. To view a list of available YARD commands, type:\n\n```sh\n$ yard --help\n```\n\nPlugins can also add commands to the `yard` executable to provide extra\nfunctionality.\n\n### Generating Documentation\n\n<span class="note">The `yardoc` executable is a shortcut for `yard doc`.</span>\n\nThe most common command you will probably use is `yard doc`, or `yardoc`. You\ncan type `yardoc --help` to see the options that YARD provides, but the\neasiest way to generate docs for your code is to simply type `yardoc` in your\nproject root. This will assume your files are\nlocated in the `lib/` directory. If they are located elsewhere, you can specify\npaths and globs from the commandline via:\n\n```sh\n$ yardoc \'lib/**/*.rb\' \'app/**/*.rb\' ...etc...\n```\n\nThe tool will generate a `.yardoc` file which will store the cached database\nof your source code and documentation. If you want to re-generate your docs\nwith another template you can simply use the `--use-cache` (or -c)\noption to speed up the generation process by skipping source parsing.\n\nYARD will by default only document code in your public visibility. You can\ndocument your protected and private code by adding `--protected` or\n`--private` to the option switches. In addition, you can add `--no-private`\nto also ignore any object that has the `@private` meta-tag. This is similar\nto RDoc\'s ":nodoc:" behaviour, though the distinction is important. RDoc\nimplies that the object with :nodoc: would not be documented, whereas\nYARD still recommends documenting private objects for the private API (for\nmaintainer/developer consumption).\n\nYou can also add extra informative files (README, LICENSE) by separating\nthe globs and the filenames with \'-\'.\n\n```sh\n$ yardoc \'app/**/*.rb\' - README LICENSE FAQ\n```\n\nIf no globs precede the \'-\' argument, the default glob (`lib/**/*.rb`) is\nused:\n\n```sh\n$ yardoc - README LICENSE FAQ\n```\n\nNote that the README file can be specified with its own `--readme` switch.\n\nYou can also add a `.yardopts` file to your project directory which lists\nthe switches separated by whitespace (newlines or space) to pass to yardoc\nwhenever it is run. A full overview of the `.yardopts` file can be found in\n{YARD::CLI::Yardoc}.\n\n### Queries\n\nThe `yardoc` tool also supports a `--query` argument to only include objects\nthat match a certain data or meta-data query. The query syntax is Ruby, though\na few shortcuts are available. For instance, to document only objects that have\nan "@api" tag with the value "public", all of the following syntaxes would give\nthe same result:\n\n```sh\n--query \'@api.text == "public"\'\n--query \'object.has_tag?(:api) && object.tag(:api).text == "public"\'\n--query \'has_tag?(:api) && tag(:api).text == "public"\'\n```\n\nNote that the "@tag" syntax returns the first tag named "tag" on the object.\nTo return the array of all tags named "tag", use "@@tag".\n\nMultiple `--query` arguments are allowed in the command line parameters. The\nfollowing two lines both check for the existence of a return and param tag:\n\n```sh\n--query \'@return\' --query \'@param\'\n--query \'@return && @param\'\n```\n\nFor more information about the query syntax, see the {YARD::Verifier} class.\n\n**2. Rake Task**\n\nThe second most obvious is to generate docs via a Rake task. You can do this by\nadding the following to your `Rakefile`:\n\n```ruby\nrequire \'yard\'\n\nYARD::Rake::YardocTask.new do |t|\n t.files   = [\'lib/**/*.rb\', OTHER_PATHS]   # optional\n t.options = [\'--any\', \'--extra\', \'--opts\'] # optional\n t.stats_options = [\'--list-undoc\']         # optional\nend\n```\n\nAll the settings: `files`, `options` and `stats_options` are optional. `files` will default to\n`lib/**/*.rb`, `options` will represents any options you might want\nto add and `stats_options` will pass extra options to the stats command.\nAgain, a full list of options is available by typing `yardoc --help`\nin a shell. You can also override the options at the Rake command-line with the\nOPTS environment variable:\n\n```sh\n$ rake yard OPTS=\'--any --extra --opts\'\n```\n\n**3. `yri` RI Implementation**\n\nThe yri binary will use the cached .yardoc database to give you quick ri-style\naccess to your documentation. It\'s way faster than ri but currently does not\nwork with the stdlib or core Ruby libraries, only the active project. Example:\n\n```sh\n$ yri YARD::Handlers::Base#register\n$ yri File.relative_path\n```\n\nNote that class methods must not be referred to with the "::" namespace\nseparator. Only modules, classes and constants should use "::".\n\nYou can also do lookups on any installed gems. Just make sure to build the\n.yardoc databases for installed gems with:\n\n```sh\n$ yard gems\n```\n\nIf you don\'t have sudo access, it will write these files to your `~/.yard`\ndirectory. `yri` will also cache lookups there.\n\n**4. `yard server` Documentation Server**\n\nThe `yard server` command serves documentation for a local project or all installed\nRubyGems. To serve documentation for a project you are working on, simply run:\n\n```sh\n$ yard server\n```\n\nAnd the project inside the current directory will be parsed (if the source has\nnot yet been scanned by YARD) and served at [http://localhost:8808](http://localhost:8808).\n\n### Live Reloading\n\nIf you want to serve documentation on a project while you document it so that\nyou can preview the results, simply pass `--reload` (`-r`) to the above command\nand YARD will reload any changed files on each request. This will allow you to\nchange any documentation in the source and refresh to see the new contents.\n\n### Serving Gems\n\nTo serve documentation for all installed gems, call:\n\n```sh\n$ yard server --gems\n```\n\nThis will also automatically build documentation for any gems that have not\nbeen previously scanned. Note that in this case there will be a slight delay\nbetween the first request of a newly parsed gem.\n\n\n**5. `yard graph` Graphviz Generator**\n\nYou can use `yard graph` to generate dot graphs of your code. This, of course,\nrequires [Graphviz](http://www.graphviz.org) and the `dot` binary. By default\nthis will generate a graph of the classes and modules in the best UML2 notation\nthat Graphviz can support, but without any methods listed. With the `--full`\noption, methods and attributes will be listed. There is also a `--dependencies`\noption to show mixin inclusions. You can output to stdout or a file, or pipe directly\nto `dot`. The same public, protected and private visibility rules apply to `yard graph`.\nMore options can be seen by typing `yard graph --help`, but here is an example:\n\n```sh\n$ yard graph --protected --full --dependencies\n```\n\n\n## Changelog\n\nSee {file:CHANGELOG.md} for a list of changes.\n\n## License\n\nYARD &copy; 2007-2018 by [Loren Segal](mailto:lsegal@soen.ca). YARD is\nlicensed under the MIT license except for some files which come from the\nRDoc/Ruby distributions. Please see the {file:LICENSE} and {file:LEGAL}\ndocuments for more information.\n'