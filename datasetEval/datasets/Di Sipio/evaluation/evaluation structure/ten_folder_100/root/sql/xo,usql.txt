b'# usql [![Build Status][travis-ci]](https://travis-ci.org/xo/usql)\n\nA universal command-line interface for PostgreSQL, MySQL, Oracle Database,\nSQLite3, Microsoft SQL Server, [and many other databases][Database Support]\nincluding NoSQL and non-relational databases!\n\n[travis-ci]: https://travis-ci.org/xo/usql.svg?branch=master "Travis CI"\n\n[Installing][] | [Building][] | [Using][] | [Database Support][] | [Features and Compatibility][] | [Releases][]\n\n[Installing]: #installing (Installing)\n[Building]: #building (Building)\n[Using]: #using (Using)\n[Database Support]: #database-support (Database Support)\n[Features and Compatibility]: #features-and-compatibility (Features and Compatibility)\n[Releases]: https://github.com/xo/usql/releases (Releases)\n\n## Overview\n\n`usql` provides a simple way to work with [SQL and NoSQL databases][Database Support]\nvia a command-line inspired by PostgreSQL\'s `psql`. `usql` supports most of the\ncore `psql` features, such as [variables][], [backticks][], and [commands][]\nand has additional features that `psql` does not, such as [syntax highlighting][highlighting],\ncontext-based completion, and [multiple database support][Database Support].\n\nDatabase administrators and developers that would prefer to work with a tool\nlike `psql` with non-PostgreSQL databases, will find `usql` intuitive,\neasy-to-use, and a great replacement for the command-line clients/tools\nfor other databases.\n\n## Installing\n\n`usql` can be installed [via Release][], [via Homebrew][], [via Scoop][] or [via Go][]:\n\n[via Release]: #installing-via-release\n[via Homebrew]: #installing-via-homebrew-macos\n[via Scoop]: #installing-via-scoop-windows\n[via Go]: #installing-via-go\n\n### Installing via Release\n\n1. [Download a release for your platform][Releases]\n2. Extract the `usql` or `usql.exe` file from the `.tar.bz2` or `.zip` file\n3. Move the extracted executable to somewhere on your `$PATH` (Linux/macOS) or\n`%PATH%` (Windows)\n\n### Installing via Homebrew (macOS)\n\n`usql` is available in the [`xo/xo` tap][xo-tap], and can be installed in the\nusual way with the [`brew` command][homebrew]:\n\n```sh\n# add tap\n$ brew tap xo/xo\n\n# install usql with "most" drivers\n$ brew install usql\n```\n\nAdditional support for [Oracle and ODBC databases][Database Support] can be\ninstalled by passing `--with-*` parameters during install:\n\n```sh\n# install usql with oracle and odbc support\n$ brew install --with-oracle --with-odbc usql\n```\n\nPlease note that Oracle Database support requires using the [`xo/xo`\ntap\'s][xo-tap] `instantclient-sdk` formula. Any other `instantclient-sdk`\nformulae or older versions of the Oracle Instant Client SDK [should be\nuninstalled][xo-tap-notes] prior to attempting the above:\n\n```sh\n# uninstall the instantclient-sdk formula\n$ brew uninstall InstantClientTap/instantclient/instantclient-sdk\n\n# remove conflicting tap\n$ brew untap InstantClientTap/instantclient\n```\n\n### Installing via Scoop (Windows)\n\n`usql` can be installed using [Scoop](https://scoop.sh):\n\n```powershell\n# install scoop if not already installed\niex (new-object net.webclient).downloadstring(\'https://get.scoop.sh\')\n\nscoop install usql\n```\n\n### Installing via Go\n\n`usql` can be installed in the usual Go fashion:\n\n```sh\n# install usql with basic database support (includes PosgreSQL, MySQL, SQLite3, and MS SQL drivers)\n$ go get -u github.com/xo/usql\n```\n\nSupport for additional databases can be specified with [build tags][Database Support]:\n\n```sh\n# install usql with most drivers (excludes drivers requiring CGO)\n$ go get -u -tags most github.com/xo/usql\n\n# install usql with all drivers (includes drivers requiring CGO, namely Oracle and ODBC drivers)\n$ go get -u -tags all github.com/xo/usql\n```\n\n## Building\n\nWhen building `usql` with [Go][go-project], only drivers for PostgreSQL, MySQL,\nSQLite3 and Microsoft SQL Server will be enabled by default. Other databases\ncan be enabled by specifying the build tag for their [database driver][Database Support].\nAdditionally, the `most` and `all` build tags include most, and all SQL\ndrivers, respectively:\n\n```sh\n# install all drivers\n$ go get -u -tags all github.com/xo/usql\n\n# install with most drivers (same as all but excludes Oracle/ODBC)\n$ go get -u -tags most github.com/xo/usql\n\n# install with base drivers and Oracle/ODBC support\n$ go get -u -tags \'oracle odbc\' github.com/xo/usql\n```\n\nFor every build tag `<driver>`, there is also the `no_<driver>` build tag\ndisabling the driver:\n\n```sh\n# install all drivers excluding avatica and couchbase\n$ go get -u -tags \'all no_avatica no_couchbase\' github.com/xo/usql\n```\n\n### Release Builds\n\n[Release builds][Releases] are built with the `most` build tag. Additional\n[SQLite3 build tags](build-release.sh) are also specified for releases.\n\n### Embedding\n\nAn effort has been made to keep `usql`\'s packages modular, and reusable by\nother developers wishing to leverage the `usql` code base. As such, it is\npossible to embed or create a SQL command-line interface (e.g, for use by some\nother project as an "official" client) using the core `usql` source tree.\n\nPlease refer to [main.go](main.go) to see how `usql` puts together its\npackages. `usql`\'s code is also well-documented -- please refer to the [GoDoc\nlisting][godoc] for an overview of the various packages and APIs.\n\n## Database Support\n\n`usql` works with all Go standard library compatible SQL drivers supported by\n[`github.com/xo/dburl`][dburl].\n\nThe list of drivers that `usql` was built with can be displayed using the\n[`\\drivers` command][commands]:\n\n```sh\n$ cd $GOPATH/src/github.com/xo/usql\n$ go build -tags \'no_most postgres mysql cql sqlite3\' && ./usql\nType "help" for help.\n\n(not connected)=> \\drivers\nAvailable Drivers:\n  cockroachdb (postgres) [cr, cdb, crdb, cockroach]\n  memsql (mysql) [me]\n  mssql [ms, sqlserver]\n  mysql [my, maria, aurora, mariadb, percona]\n  postgres [pg, pgsql, postgresql]\n  redshift (postgres) [rs]\n  sqlite3 [sq, file, sqlite]\n  tidb (mysql) [ti]\n  vitess (mysql) [vt]\n(not connected)=>\n```\n\nThe above shows that `usql` was built with only the `postgres`, `mysql`, `cql`,\nand `sqlite3` drivers. The output above reflects information about the drivers\navailable to `usql`, specifically the available driver and its primary URL\nscheme, the driver\'s available aliases (shown in `[...]`), and the\nreal/underlying driver (shown in `(...)`) for the database.\n\nAny of the protocol schemes or aliases shown above can be used in conjunction\nwith the [`\\connect` command][commands] when connecting to a database.\n\n#### Supported Database Schemes and Aliases\n\nThe following is a table of all drivers, schemes, and aliases that `usql`\nsupports:\n\n| Database (scheme/driver)     | Protocol Aliases [real driver]        |\n|------------------------------|---------------------------------------|\n| Microsoft SQL Server (mssql) | ms, sqlserver                         |\n| MySQL (mysql)                | my, mariadb, maria, percona, aurora   |\n| Oracle Database (goracle)    | or, oracle, oci8, oci, odpi, odpi-c   |\n| PostgreSQL (postgres)        | pg, postgresql, pgsql                 |\n| SQLite3 (sqlite3)            | sq, sqlite, file                      |\n|                              |                                       |\n| Amazon Redshift (redshift)   | rs [postgres]                         |\n| CockroachDB (cockroachdb)    | cr, cockroach, crdb, cdb [postgres]   |\n| MemSQL (memsql)              | me [mysql]                            |\n| TiDB (tidb)                  | ti [mysql]                            |\n| Vitess (vitess)              | vt [mysql]                            |\n|                              |                                       |\n| Google Spanner (spanner)     | gs, google, span (not yet public)     |\n|                              |                                       |\n| MySQL (mymysql)              | zm, mymy                              |\n| PostgreSQL (pgx)             | px                                    |\n|                              |                                       |\n| Apache Avatica (avatica)     | av, phoenix                           |\n| Apache Ignite (ignite)       | ig, gridgain                          |\n| Cassandra (cql)              | ca, cassandra, datastax, scy, scylla  |\n| ClickHouse (clickhouse)      | ch                                    |\n| Couchbase (n1ql)             | n1, couchbase                         |\n| Cznic QL (ql)                | ql, cznic, cznicql                    |\n| Firebird SQL (firebirdsql)   | fb, firebird                          |\n| Microsoft ADODB (adodb)      | ad, ado                               |\n| ODBC (odbc)                  | od                                    |\n| OLE ODBC (oleodbc)           | oo, ole, oleodbc [adodb]              |\n| Presto (presto)              | pr, prestodb, prestos, prs, prestodbs |\n| SAP ASE (tds)                | ax, ase, sapase                       |\n| SAP HANA (hdb)               | sa, saphana, sap, hana                |\n| Snowflake (snowflake)        | sf                                    |\n| Vertica (vertica)            | ve                                    |\n| VoltDB (voltdb)              | vo, volt, vdb                         |\n\n#### Go Drivers and Build Tags\n\nThe following are the [Go SQL drivers][go-sql] that `usql` supports, and the\nassociated Go build tag:\n\n| Driver               | Build Tag  | Driver Used                                                                      |\n|----------------------|------------|----------------------------------------------------------------------------------|\n| Microsoft SQL Server | mssql      | [github.com/denisenkom/go-mssqldb][d-mssql]                                      |\n| MySQL                | mysql      | [github.com/go-sql-driver/mysql][d-mysql]                                        |\n| PostgreSQL           | postgres   | [github.com/lib/pq][d-postgres]                                                  |\n| SQLite3              | sqlite3    | [github.com/mattn/go-sqlite3][d-sqlite3]                                         |\n| Oracle Database      | oracle     | [gopkg.in/goracle.v2][d-oracle]                                                  |\n|                      |            |                                                                                  |\n| MySQL                | mymysql    | [github.com/ziutek/mymysql/godrv][d-mymysql]                                     |\n| PostgreSQL           | pgx        | [github.com/jackc/pgx/stdlib][d-pgx]                                             |\n|                      |            |                                                                                  |\n| Apache Avatica       | avatica    | [github.com/Boostport/avatica][d-avatica]                                        |\n| Apache Ignite        | ignite     | [github.com/amsokol/ignite-go-client][d-ignite]                                  |\n| Cassandra            | cassandra  | [github.com/MichaelS11/go-cql-driver][d-cassandra]                               |\n| ClickHouse           | clickhouse | [github.com/kshvakov/clickhouse][d-clickhouse]                                   |\n| Couchbase            | couchbase  | [github.com/couchbase/go_n1ql][d-couchbase]                                      |\n| Cznic QL             | ql         | [github.com/cznic/ql][d-ql]                                                      |\n| Firebird SQL         | firebird   | [github.com/nakagami/firebirdsql][d-firebird]                                    |\n| Microsoft ADODB      | adodb      | [github.com/mattn/go-adodb][d-adodb]                                             |\n| ODBC                 | odbc       | [github.com/alexbrainman/odbc][d-odbc]                                           |\n| Presto               | presto     | [github.com/prestodb/presto-go-client/presto][d-presto]                          |\n| SAP ASE              | tds        | [github.com/thda/tds][d-tds]                                                     |\n| SAP HANA             | hdb        | [github.com/SAP/go-hdb/driver][d-hdb]                                            |\n| Snowflake            | snowflake  | [github.com/snowflakedb/gosnowflake][d-snowflake]                                |\n| Vertica              | vertica    | [github.com/vertica/vertica-sql-go][d-vertica]                                   |\n| VoltDB               | voltdb     | [github.com/VoltDB/voltdb-client-go/voltdbclient][d-voltdb]                      |\n|                      |            |                                                                                  |\n| Google Spanner       | spanner    | github.com/xo/spanner (not yet public)                                           |\n|                      |            |                                                                                  |\n| **MOST DRIVERS**     | most       | all drivers excluding Oracle and ODBC (requires CGO and additional dependencies) |\n| **ALL DRIVERS**      | all        | all drivers                                                                      |\n\n\n## Using\n\nAfter [installing][Installing], `usql` can be used similarly to the following:\n\n```sh\n# connect to a postgres database\n$ usql postgres://booktest@localhost/booktest\n\n# connect to an oracle database\n$ usql oracle://user:pass@host/oracle.sid\n\n# connect to a postgres database and run script.sql\n$ usql pg://localhost/ -f script.sql\n```\n\n#### Command-line Options\n\nSupported command-line options:\n\n```sh\n$ usql --help\nusql, the universal command-line interface for SQL databases\n\nUsage:\n  usql [OPTIONS]... [DSN]\n\nArguments:\n  DSN                            database url\n\nOptions:\n  -c, --command=COMMAND ...    run only single command (SQL or internal) and exit\n  -f, --file=FILE ...          execute commands from file and exit\n  -w, --no-password            never prompt for password\n  -X, --no-rc                  do not read start up file\n  -o, --out=OUT                output file\n  -W, --password               force password prompt (should happen automatically)\n  -1, --single-transaction     execute as a single transaction (if non-interactive)\n  -v, --set=, --variable=NAME=VALUE ...\n                               set variable NAME to VALUE\n  -P, --pset=VAR[=ARG] ...     set printing option VAR to ARG (see \\pset command)\n  -A, --no-align               unaligned table output mode\n  -F, --field-separator=TEXT   field separator for unaligned output (default, "|")\n  -H, --html                   HTML table output mode\n  -R, --record-separator=TEXT  record separator for unaligned output (default, \\n)\n  -t, --tuples-only            print rows only\n  -T, --table-attr=TEXT        set HTML table tag attributes (e.g., width, border)\n  -x, --expanded               turn on expanded table output\n  -z, --field-separator-zero   set field separator for unaligned output to zero byte\n  -0, --record-separator-zero  set record separator for unaligned output to zero byte\n  -J, --json                   JSON output mode\n  -C, --csv                    CSV output mode\n  -V, --version                display version and exit\n```\n\n### Connecting to Databases\n\n`usql` opens a database connection by [parsing a URL][dburl] and passing the\nresulting connection string to [a database driver][Database Support]. Database\nconnection strings (aka "data source name" or DSNs) have the same parsing rules\nas URLs, and can be passed to `usql` via command-line, or to the `\\connect` or\n`\\c` [commands][].\n\nConnection strings look like the following:\n\n```txt\n   driver+transport://user:pass@host/dbname?opt1=a&opt2=b\n   driver:/path/to/file\n   /path/to/file\n```\n\nWhere the above are:\n\n| Component          | Description                                                                          |\n|--------------------|--------------------------------------------------------------------------------------|\n| driver             | driver name or alias                                                                 |\n| transport          | `tcp`, `udp`, `unix` or driver name <i>(for ODBC and ADODB)</i>                      |\n| user               | username                                                                             |\n| pass               | password                                                                             |\n| host               | hostname                                                                             |\n| dbname<sup>*</sup> | database name, instance, or service name/ID                                          |\n| ?opt1=a&...        | additional database driver options (see respective SQL driver for available options) |\n| /path/to/file      | a path on disk                                                                       |\n\n<i><sup><b>*</b></sup> for Microsoft SQL Server, `/dbname` can be\n`/instance/dbname`, where `/instance` is optional. For Oracle Database,\n`/dbname` is of the form `/service/dbname` where `/service` is the service name\nor SID, and `/dbname` is optional. Please see below for examples.</i>\n\n#### Driver Aliases\n\n`usql` supports the same driver names and aliases from the [`dburl`][dburl]\npackage. Most databases have at least one or more alias - please refer to the\n[`dburl` documentation][dburl-schemes] for all supported aliases.\n\n##### Short Aliases\n\nAll database drivers have a two character short form that is usually the first\ntwo letters of the database driver. For example, `pg` for `postgres`, `my` for\n`mysql`, `ms` for `mssql`, `or` for `oracle`, or `sq` for `sqlite3`.\n\n#### Passing Driver Options\n\nDriver options are specified as standard URL query options in the form of\n`?opt1=a&obt2=b`. Please refer to the [relevant database driver\'s\ndocumentation][Database Support] for available options.\n\n#### Paths on Disk\n\nIf a URL does not have a `driver:` scheme, `usql` will check if it is a path on\ndisk. If the path exists, `usql` will attempt to use an appropriate database\ndriver to open the path.\n\nIf the specified path is a Unix Domain Socket, `usql` will attempt to open it\nusing the MySQL driver. If the path is a directory, `usql` will attempt to open\nit using the PostgreSQL driver. If the path is a regular file, `usql` will\nattempt to open the file using the SQLite3 driver.\n\n#### Driver Defaults\n\nAs with URLs, most components in the URL are optional and many components can\nbe left out. `usql` will attempt connecting using defaults where possible:\n\n```sh\n# connect to postgres using the local $USER and the unix domain socket in /var/run/postgresql\n$ usql pg://\n```\n\nPlease see documentation for [the database driver][Database Support] you are\nconnecting with for more information.\n\n### Connection Examples\n\nThe following are example connection strings and additional ways to connect to\ndatabases using `usql`:\n\n```sh\n# connect to a postgres database\n$ usql pg://user:pass@host/dbname\n$ usql pgsql://user:pass@host/dbname\n$ usql postgres://user:pass@host:port/dbname\n$ usql pg://\n$ usql /var/run/postgresql\n$ usql pg://user:pass@host/dbname?sslmode=disable # Connect without SSL\n\n# connect to a mysql database\n$ usql my://user:pass@host/dbname\n$ usql mysql://user:pass@host:port/dbname\n$ usql my://\n$ usql /var/run/mysqld/mysqld.sock\n\n# connect to a mssql (Microsoft SQL) database\n$ usql ms://user:pass@host/dbname\n$ usql ms://user:pass@host/instancename/dbname\n$ usql mssql://user:pass@host:port/dbname\n$ usql ms://\n\n# connect to a mssql (Microsoft SQL) database using Windows domain authentication\n$ runas /user:ACME\\wiley /netonly "usql mssql://host/dbname/"\n\n# connect to a oracle database\n$ usql or://user:pass@host/sid\n$ usql oracle://user:pass@host:port/sid\n$ usql or://\n\n# connect to a cassandra database\n$ usql ca://user:pass@host/keyspace\n$ usql cassandra://host/keyspace\n$ usql cql://host/\n$ usql ca://\n\n# connect to a sqlite database that exists on disk\n$ usql dbname.sqlite3\n\n# NOTE: when connecting to a SQLite database, if the "<driver>://" or\n# "<driver>:" scheme/alias is omitted, the file must already exist on disk.\n#\n# if the file does not yet exist, the URL must incorporate file:, sq:, sqlite3:,\n# or any other recognized sqlite3 driver alias to force usql to create a new,\n# empty database at the specified path:\n$ usql sq://path/to/dbname.sqlite3\n$ usql sqlite3://path/to/dbname.sqlite3\n$ usql file:/path/to/dbname.sqlite3\n\n# connect to a adodb ole resource (windows only)\n$ usql adodb://Microsoft.Jet.OLEDB.4.0/myfile.mdb\n$ usql "adodb://Microsoft.ACE.OLEDB.12.0/?Extended+Properties=\\"Text;HDR=NO;FMT=Delimited\\""\n\n# connect with ODBC driver (requires building with odbc tag)\n$ cat /etc/odbcinst.ini\n[DB2]\nDescription=DB2 driver\nDriver=/opt/db2/clidriver/lib/libdb2.so\nFileUsage = 1\nDontDLClose = 1\n\n[PostgreSQL ANSI]\nDescription=PostgreSQL ODBC driver (ANSI version)\nDriver=psqlodbca.so\nSetup=libodbcpsqlS.so\nDebug=0\nCommLog=1\nUsageCount=1\n# connect to db2, postgres databases using ODBC\n$ usql odbc+DB2://user:pass@localhost/dbname\n$ usql odbc+PostgreSQL+ANSI://user:pass@localhost/dbname?TraceFile=/path/to/trace.log\n```\n\n### Executing Queries and Commands\n\nThe interactive intrepreter reads queries and [meta (`\\ `) commands][commands],\nsending the query to the connected database:\n\n```sh\n$ usql sqlite://example.sqlite3\nConnected with driver sqlite3 (SQLite3 3.17.0)\nType "help" for help.\n\nsq:example.sqlite3=> create table test (test_id int, name string);\nCREATE TABLE\nsq:example.sqlite3=> insert into test (test_id, name) values (1, \'hello\');\nINSERT 1\nsq:example.sqlite3=> select * from test;\n  test_id | name\n+---------+-------+\n        1 | hello\n(1 rows)\n\nsq:example.sqlite3=> select * from test\nsq:example.sqlite3-> \\p\nselect * from test\nsq:example.sqlite3-> \\g\n  test_id | name\n+---------+-------+\n        1 | hello\n(1 rows)\n\nsq:example.sqlite3=> \\c postgres://booktest@localhost\nerror: pq: 28P01: password authentication failed for user "booktest"\nEnter password:\nConnected with driver postgres (PostgreSQL 9.6.6)\npg:booktest@localhost=> select * from authors;\n  author_id |      name\n+-----------+----------------+\n          1 | Unknown Master\n          2 | blah\n          3 | aoeu\n(3 rows)\n\npg:booktest@localhost=>\n```\n\nCommands may accept one or more parameter, and can be quoted using either `\'`\nor `"`. Command parameters may also be [backtick\'d][backticks].\n\n### Backslash Commands\n\nCurrently available commands:\n\n```sh\n$ usql\nType "help" for help.\n\n(not connected)=> \\?\nGeneral\n  \\q                              quit usql\n  \\copyright                      show usql usage and distribution terms\n  \\drivers                        display information about available database drivers\n  \\g [FILE] or ;                  execute query (and send results to file or |pipe)\n  \\gexec                          execute query and execute each value of the result\n  \\gset [PREFIX]                  execute query and store results in usql variables\n\nHelp\n  \\? [commands]                   show help on backslash commands\n  \\? options                      show help on usql command-line options\n  \\? variables                    show help on special variables\n\nQuery Buffer\n  \\e [FILE] [LINE]                edit the query buffer (or file) with external editor\n  \\p                              show the contents of the query buffer\n  \\raw                            show the raw (non-interpolated) contents of the query buffer\n  \\r                              reset (clear) the query buffer\n  \\w FILE                         write query buffer to file\n\nInput/Output\n  \\echo [STRING]                  write string to standard output\n  \\i FILE                         execute commands from file\n  \\ir FILE                        as \\i, but relative to location of current script\n\nFormatting\n  \\pset [NAME [VALUE]]            set table output option\n  \\a                              toggle between unaligned and aligned output mode\n  \\C [STRING]                     set table title, or unset if none\n  \\f [STRING]                     show or set field separator for unaligned query output\n  \\H                              toggle HTML output mode\n  \\t [on|off]                     show only rows\n  \\T [STRING]                     set HTML <table> tag attributes, or unset if none\n  \\x [on|off|auto]                toggle expanded output\n\nTransaction\n  \\begin                          begin a transaction\n  \\commit                         commit current transaction\n  \\rollback                       rollback (abort) current transaction\n\nConnection\n  \\c URL                          connect to database with url\n  \\c DRIVER PARAMS...             connect to database with SQL driver and parameters\n  \\Z                              close database connection\n  \\password [USERNAME]            change the password for a user\n  \\conninfo                       display information about the current database connection\n\nOperating System\n  \\cd [DIR]                       change the current working directory\n  \\setenv NAME [VALUE]            set or unset environment variable\n  \\! [COMMAND]                    execute command in shell or start interactive shell\n\nVariables\n  \\prompt [-TYPE] [PROMPT] <VAR>  prompt user to set variable\n  \\set [NAME [VALUE]]             set internal variable, or list all if no parameters\n  \\unset NAME                     unset (delete) internal variable\n```\n\n## Features and Compatibility\n\nThe `usql` project\'s goal is to support all standard `psql` commands and\nfeatures. Pull Requests are always appreciated!\n\n#### Variables and Interpolation\n\n`usql` supports client-side interpolation of variables that can be `\\set` and\n`\\unset`:\n\n```sh\n$ usql\n(not connected)=> \\set\n(not connected)=> \\set FOO bar\n(not connected)=> \\set\nFOO = \'bar\'\n(not connected)=> \\unset FOO\n(not connected)=> \\set\n(not connected)=>\n```\n\nA `\\set` variable, `NAME`,  will be directly interpolated (by string\nsubstitution) into the query when prefixed with `:` and optionally surrounded\nby quotation marks (`\'` or `"`):\n\n```sh\npg:booktest@localhost=> \\set FOO bar\npg:booktest@localhost=> select * from authors where name = :\'FOO\';\n  author_id | name\n+-----------+------+\n          7 | bar\n(1 rows)\n```\n\nThe three forms, `:NAME`, `:\'NAME\'`, and `:"NAME"`, are used to interpolate a\nvariable in parts of a query that may require quoting, such as for a column\nname, or when doing concatenation in a query:\n\n```sh\npg:booktest@localhost=> \\set TBLNAME authors\npg:booktest@localhost=> \\set COLNAME name\npg:booktest@localhost=> \\set FOO bar\npg:booktest@localhost=> select * from :TBLNAME where :"COLNAME" = :\'FOO\'\npg:booktest@localhost-> \\p\nselect * from authors where "name" = \'bar\'\npg:booktest@localhost-> \\raw\nselect * from :TBLNAME where :"COLNAME" = :\'FOO\'\npg:booktest@localhost-> \\g\n  author_id | name\n+-----------+------+\n          7 | bar\n(1 rows)\n\npg:booktest@localhost=>\n```\n\n**Note**: variables contained within other strings will **NOT** be\ninterpolated:\n\n```sh\npg:booktest@localhost=> select \':FOO\';\n  ?column?\n+----------+\n  :FOO\n(1 rows)\n\npg:booktest@localhost=> \\p\nselect \':FOO\';\npg:booktest@localhost=>\n```\n\n#### Backtick\'d parameters\n\n[Meta (`\\ `) commands][commands] support backticks on parameters:\n\n```sh\n(not connected)=> \\echo Welcome `echo $USER` -- \'currently:\' "(" `date` ")"\nWelcome ken -- currently: ( Wed Jun 13 12:10:27 WIB 2018 )\n(not connected)=>\n```\n\nBacktick\'d parameters will be passed to the user\'s `SHELL`, exactly as written,\nand can be combined with `\\set`:\n\n```sh\npg:booktest@localhost=> \\set MYVAR `date`\npg:booktest@localhost=> \\set\nMYVAR = \'Wed Jun 13 12:17:11 WIB 2018\'\npg:booktest@localhost=> \\echo :MYVAR\nWed Jun 13 12:17:11 WIB 2018\npg:booktest@localhost=>\n```\n\n#### Passwords\n\n`usql` supports reading passwords for databases from a `.usqlpass` file\ncontained in the user\'s `HOME` directory at startup:\n\n```sh\n$ cat $HOME/.usqlpass\n# format is:\n# protocol:host:port:dbname:user:pass\npostgres:*:*:*:booktest:booktest\n$ usql pg://\nConnected with driver postgres (PostgreSQL 9.6.9)\nType "help" for help.\n\npg:booktest@=>\n```\n\nNote: the `.usqlpass` file cannot be readable by other users. Please set the\npermissions accordingly:\n\n```sh\n$ chmod 0600 ~/.usqlpass\n```\n\n#### Runtime Configuration (RC) File\n\n`usql` supports executing a `.usqlrc` contained in the user\'s `HOME` directory:\n\n```sh\n$ cat $HOME/.usqlrc\n\\echo WELCOME TO THE JUNGLE `date`\n\\set SYNTAX_HL_STYLE paraiso-dark\n$ usql\nWELCOME TO THE JUNGLE Thu Jun 14 02:36:53 WIB 2018\nType "help" for help.\n\n(not connected)=> \\set\nSYNTAX_HL_STYLE = \'paraiso-dark\'\n(not connected)=>\n```\n\nThe `.usqlrc` file is read by `usql` at startup in the same way as a file\npassed on the command-line with `-f` / `--file`. It is commonly used to set\nstartup environment variables and settings.\n\nYou can temporarily disable the RC-file by passing `-X` or `--no-rc` on the\ncommand-line:\n\n```sh\n$ usql --no-rc pg://\n```\n\n#### Host Connection Information\n\nBy default, `usql` displays connection information when connecting to a\ndatabase. This might cause problems with some databases or connections. This\ncan be disabled by setting the system environment variable `USQL_SHOW_HOST_INFORMATION`\nto `false`:\n\n```sh\n$ export USQL_SHOW_HOST_INFORMATION=false\n$ usql pg://booktest@localhost\nType "help" for help.\n\npg:booktest@=>\n```\n\n`SHOW_HOST_INFORMATION` is a standard [`usql` variable][variables],\nand can be `\\set` or `\\unset`. Additionally, it can be passed via the\ncommand-line using `-v` or `--set`:\n\n```sh\n$ usql --set SHOW_HOST_INFORMATION=false pg://\nType "help" for help.\n\npg:booktest@=> \\set SHOW_HOST_INFORMATION true\npg:booktest@=> \\connect pg://\nConnected with driver postgres (PostgreSQL 9.6.9)\npg:booktest@=>\n```\n\n#### Syntax Highlighting\n\nInteractive queries will be syntax highlighted by default, using\n[Chroma][chroma]. There are a number of [variables][] that control syntax\nhighlighting:\n\n| Variable                | Default                         | Values            | Description                                                  |\n|-------------------------|---------------------------------|-------------------|--------------------------------------------------------------|\n| `SYNTAX_HL`             | `true`                          | `true` or `false` | enables syntax highlighting                                  |\n| `SYNTAX_HL_FORMAT`      | _dependent on terminal support_ | formatter name    | [Chroma formatter name][chroma-formatter]                    |\n| `SYNTAX_HL_OVERRIDE_BG` | `true`                          | `true` or `false` | enables overriding the background color of the chroma styles |\n| `SYNTAX_HL_STYLE`       | `monokai`                       | style name        | [Chroma style name][chroma-style]                            |\n\n#### Time Formatting\n\nSome databases support time/date columns that [support formatting][go-time]. By\ndefault, `usql` formats time/date columns as [RFC3339Nano][go-time], and can be\nset using the [`TIME_FORMAT` variable][variables]:\n\n```sh\n$ usql pg://\nConnected with driver postgres (PostgreSQL 9.6.9)\nType "help" for help.\n\npg:booktest@=> \\set\nTIME_FORMAT = \'RFC3339Nano\'\npg:booktest@=> select now();\n                now\n+----------------------------------+\n  2018-06-14T03:24:12.481923+07:00\n(1 rows)\n\npg:booktest@=> \\set TIME_FORMAT Kitchen\npg:booktest@=> \\g\n   now\n+--------+\n  3:24AM\n(1 rows)\n```\n\nAny [Go supported time format][go-time] or const name (for example, `Kitchen`,\nin the above) can be used for `TIME_FORMAT`.\n\n## TODO\n\n`usql` aims to eventually provide a drop-in replacement for PostgreSQL\'s `psql`\ncommand. This is on-going -- an attempt has been made in good-faith to provide\nsupport for the most frequently used aspects/features of `psql`. Compatability\n(where possible) with `psql`, takes general development priority.\n\n##### General\n\n0.  updated asciinema demo\n1.  support more prompt configuration, colored prompt by default\n2.  add window title / status output\n2.  change `drivers.Convert*` to drivers.Marshal style interfaces\n3.  allow configuration for JSON encoding/decoding output\n4.  return single \'driver\' type handling marshaling / scanning of types / columns\n5.  implement "extended" display for queries (for `\\gx` / formatting)\n6.  implement better environment variable handling\n7.  implement proper readline\n8.  tab-completion of queries\n9. show hidden (client) queries (`\\set SHOW_HIDDEN`)\n10. fix multiline behavior to mimic `psql` properly (on arrow up/down through history)\n11. proper `PAGER` support\n12. `\\qecho` + `\\o` support\n13. context-based completion (WIP)\n14. full `\\if` `\\elif` `\\else` `\\endif` support\n15. fix `WITH ... DELETE` queries (postgresql)\n16. better `--help` / man pages\n17. translations\n18. fix `\\command` variable interpolation/parsing (`\\set NAME test \\echo :NAME.dat \\echo :NAME:NAME`)\n\n##### Command Processing + `psql` compatibility\n\n1. formatting settings (`\\pset`, `\\a`, etc)\n2. all `\\d*` commands from `psql` (WIP, need to finish work extracting introspection code from `xo`)\n3. `\\ef` and `\\ev` commands from `psql` (WIP, need to finish work extracting stored procs / funcs / views for all the major databases)\n3. `\\watch`\n4. `\\errverbose` (show verbose info for last error)\n5. remaining `psql` cli parameters\n6. `\\j*` commands (WIP)\n7. `\\copy` (add support for copying between two different databases ...?)\n\n##### Testing\n\n1. test suite for databases, doing minimal of `SELECT`, `INSERT`, `UPDATE`, `DELETE` for every database\n\n##### Future Database Support\n\n1. Redis CLI\n2. Native Oracle\n3. InfluxDB\n4. CSV via SQLite3 vtable\n5. Google Spanner\n6. Google Sheets via SQLite3 vtable\n7. [Charlatan][d-charlatan]\n8. InfluxDB IQL\n9. Aerospike AQL\n10. ArrangoDB AQL\n11. OrientDB SQL\n12. Cypher / SparQL\n13. Atlassian JIRA JQL\n\n## Related Projects\n\n* [dburl][dburl] - Go package providing a standard, URL-style mechanism for parsing and opening database connection URLs\n* [xo][xo] - Go command-line tool to generate Go code from a database schema\n\n[dburl]: https://github.com/xo/dburl\n[dburl-schemes]: https://github.com/xo/dburl#protocol-schemes-and-aliases\n[godoc]: https://godoc.org/github.com/xo/usql\n[go-project]: https://golang.org/project\n[go-time]: https://golang.org/pkg/time/#pkg-constants\n[go-sql]: https://golang.org/pkg/database/sql/\n[homebrew]: https://brew.sh/\n[xo]: https://github.com/xo/xo\n[xo-tap]: https://github.com/xo/homebrew-xo\n[xo-tap-notes]: https://github.com/xo/homebrew-xo#oracle-notes\n[chroma]: https://github.com/alecthomas/chroma\n[chroma-formatter]: https://github.com/alecthomas/chroma#formatters\n[chroma-style]: https://xyproto.github.io/splash/docs/all.html\n\n[commands]: #backslash-commands (Commands)\n[backticks]: #backtick-d-parameters (Backtick Parameters)\n[highlighting]: #syntax-highlighting (Syntax Highlighting)\n[variables]: #variables-and-interpolation (Variable Interpolation)\n\n[d-mssql]: https://github.com/denisenkom/go-mssqldb\n[d-mysql]: https://github.com/go-sql-driver/mysql\n[d-postgres]: https://github.com/lib/pq\n[d-sqlite3]: https://github.com/mattn/go-sqlite3\n[d-oracle]: https://gopkg.in/goracle.v2\n[d-mymysql]: https://github.com/ziutek/mymysql\n[d-pgx]: https://github.com/jackc/pgx\n[d-avatica]: https://github.com/Boostport/avatica\n[d-cassandra]: https://github.com/MichaelS11/go-cql-driver\n[d-clickhouse]: https://github.com/kshvakov/clickhouse\n[d-couchbase]: https://github.com/couchbase/go_n1ql\n[d-ql]: https://github.com/cznic/ql\n[d-firebird]: https://github.com/nakagami/firebirdsql\n[d-adodb]: https://github.com/mattn/go-adodb\n[d-odbc]: https://github.com/alexbrainman/odbc\n[d-presto]: https://github.com/prestodb/presto-go-client\n[d-tds]: https://github.com/thda/tds\n[d-hdb]: https://github.com/SAP/go-hdb\n[d-sqlago]: https://github.com/a-palchikov/sqlago\n[d-voltdb]: https://github.com/VoltDB/voltdb-client-go\n[d-spanner]: https://github.com/xo/spanner\n[d-charlatan]: https://github.com/BatchLabs/charlatan\n[d-ignite]: https://github.com/amsokol/ignite-go-client\n[d-snowflake]: https://github.com/snowflakedb/gosnowflake\n[d-vertica]: https://github.com/vertica/vertica-sql-go\n'