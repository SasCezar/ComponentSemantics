b"[![Build Status](https://travis-ci.org/radondb/radon.png)](https://travis-ci.org/radondb/radon)\n[![Go Report Card](https://goreportcard.com/badge/github.com/radondb/radon)](https://goreportcard.com/report/github.com/radondb/radon)\n[![codecov.io](https://codecov.io/gh/radondb/radon/graphs/badge.svg)](https://codecov.io/gh/radondb/radon/branch/master)\n\n# OverView\nRadonDB is an open source, Cloud-native MySQL database for unlimited scalability and performance.\n\n## What is RadonDB?\n\nRadonDB is a cloud-native database based on MySQL\xef\xbc\x8cand architected in fully distributed cluster that enable unlimited scalability (scale-out), capacity and performance. It supported distributed transaction that ensure high data consistency, and leveraged MySQL as storage engine for trusted data reliability. RadonDB is compatible with MySQL protocol, and sup-porting automatic table sharding as well as batch of automation feature for simplifying the maintenance and operation workflow.\n\n## Features\n\n* **Automatic Sharding**\n* **Auditing and Logging**\n* **Parallel Execution**: Parallel Query, Parallel DML and Parallel DDL\n* **Parallel CHECKSUM TABLE**: Gives same results as MySQL\n* **Distributed Transaction**: Snapshot Isolation\n* **Distributed Joins**: Sort-Merge Join, Nested-Loop Join\n* **Distributed Full Text Search**\n* **Multi Tenan by Database**\n* **Prepared SQL Statement**\n* **JSON**\n\n## Documentation\nFor guidance on installation, deployment, and administration, see our [Documentation](docs).\n\n\n## Architecture\n\n## Overview\nRadonDB is a new generation of distributed relational database (MyNewSQL) based on MySQL. It was designed to create the open-source database our developers would want to use: one that has features such as financial high availability\xe3\x80\x81\nlarge-capacity database\xe3\x80\x81automatic plane split table\xe3\x80\x81 scalable and strong consistency, this guide sets out to detail the inner-workings of the radon process as a means of explanation.\n\n\n## SQL Layer\n\n### SQL support\nOn SQL syntax level, RadonDB Fully compatible with MySQL.You can view all of the SQL features RadonDB supports here  [radon_sql_support](docs/radon_sql_support.md)\n\n###  SQL parser, planner, executor\n\nAfter your SQL node  receives a SQL request from a mysql client via proxy, RadonDB parses the statement, creates a query plan, and then executes the plan.\n\n\n\n\n                                                                    +---------------+\n                                                        x---------->|node1_Executor |\n                                +--------------------+  x           +---------------+\n                                |      SQL Node      |  x\n                                |--------------------|  x\n    +-------------+             |     sqlparser      |  x           +---------------+\n    |    query    |+----------->|                    |--x---------->|node2_Executor |\n    +-------------+             |  Distributed Plan  |  x           +---------------+\n                                |                    |  x\n                                +--------------------+  x\n                                                        x           +---------------+\n                                                        x---------->|node3_Executor |\n                                                                    +---------------+\n\n\n\n``` Parsing ```\n\nReceived queries are parsed by sqlparser (which describes the supported syntax by mysql) and generated Abstract Syntax Trees (AST).\n\n\n``` Planning ```\n\nWith the AST, RadonDB begins planning the query's execution by generating a tree of planNodes.\nThis step also includes steps analyzing the client's SQL statements against the expected AST expressions, which include things like type checking.\n\nYou can see the a query plan  generates using `EXPLAIN`(At this stage we only use `EXPLAIN` to  analysis  Table distribution).\n\n``` Excuting ```\n\nExecuting an Executor in a storage layer in Parallel with a Distributed Execution Plan.\n\n### SQL with Transaction\nThe SQL node is stateless, but in order to guarantee transaction `Snapshot Isolation`, it is currently a write-multiple-read mode.\n\n\n## Transaction Layer\n\n``` Distributed transaction```\n\nRadonDB provides distributed transaction capabilities. If the distributed executor at different storage nodes and one of the nodes failed to execute, then operation of the rest nodes will be rolled back, This guarantees the atomicity of operating across nodes  and makes the database in a consistent state.\n\n```Isolation Levels```\n\nRadonDB achieves the level of SI (Snapshot Isolation) at the level of consistency. As long as a distributed transaction has not commit, or if some of the partitions have committed, the operation is invisible to other transactions.\n\n``` Transaction with SQL Layer```\n\nThe SQL node is stateless, but in order to guarantee transaction `Snapshot Isolation`, it is currently a write-multiple-read mode.\n\n## Live Demo\n [https://radonchain.org](https://radonchain.org)\n\n## Issues\n\nThe [integrated github issue tracker](https://github.com/radondb/radon/issues)\nis used for this project.\n\n## License\n\nRadonDB is released under the GPLv3. See LICENSE\n"