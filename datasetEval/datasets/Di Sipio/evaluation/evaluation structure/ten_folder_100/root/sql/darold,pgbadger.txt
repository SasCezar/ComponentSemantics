b'### TABLE OF CONTENTS\n\n- [NAME](#NAME)\n- [SYNOPSIS](#SYNOPSIS)\n- [DESCRIPTION](#DESCRIPTION)\n- [FEATURE](#FEATURE)\n- [REQUIREMENT](#REQUIREMENT)\n- [INSTALLATION](#INSTALLATION)\n- [POSTGRESQL-CONFIGURATION](#POSTGRESQL-CONFIGURATION)\n- [LOG-STATEMENTS](#LOG-STATEMENTS)\n- [PARALLEL-PROCESSING](#PARALLEL-PROCESSING)\n- [INCREMENTAL-REPORTS](#INCREMENTAL-REPORTS)\n- [BINARY-FORMAT](#BINARY-FORMAT)\n- [JSON-FORMAT](#JSON-FORMAT)\n- [AUTHORS](#AUTHORS)\n- [LICENSE](#LICENSE)\n\n### NAME\n\npgBadger - a fast PostgreSQL log analysis report\n\n### SYNOPSIS\n\nUsage: pgbadger \\[options\\] logfile \\[...\\]\n\n    PostgreSQL log analyzer with fully detailed reports and graphs.\n\nArguments:\n\n    logfile can be a single log file, a list of files, or a shell command\n    returning a list of files. If you want to pass log content from stdin\n    use - as filename. Note that input from stdin will not work with csvlog.\n\nOptions:\n\n    -a | --average minutes : number of minutes to build the average graphs of\n                             queries and connections. Default 5 minutes.\n    -A | --histo-average min: number of minutes to build the histogram graphs\n                             of queries. Default 60 minutes.\n    -b | --begin datetime  : start date/time for the data to be parsed in log\n                             (either a timestamp or a time)\n    -c | --dbclient host   : only report on entries for the given client host.\n    -C | --nocomment       : remove comments like /* ... */ from queries.\n    -d | --dbname database : only report on entries for the given database.\n    -D | --dns-resolv      : client ip addresses are replaced by their DNS name.\n                             Be warned that this can really slow down pgBadger.\n    -e | --end datetime    : end date/time for the data to be parsed in log\n                             (either a timestamp or a time)\n    -E | --explode         : explode the main report by generating one report\n                             per database. Global information not related to a\n                             database are added to the postgres database report.\n    -f | --format logtype  : possible values: syslog, syslog2, stderr, jsonlog,\n                             cvs, pgbouncer, logplex and rds. Use this option\n                             when pgBadger is not able to detect the log format.\n    -G | --nograph         : disable graphs on HTML output. Enabled by default.\n    -h | --help            : show this message and exit.\n    -H | --html-dir path   : path to directory where HTML report must be written\n                             in incremental mode, binary files stay on directory\n                             defined with -O, --outdir option.\n    -i | --ident name      : programname used as syslog ident. Default: postgres\n    -I | --incremental     : use incremental mode, reports will be generated by\n                             days in a separate directory, --outdir must be set.\n    -j | --jobs number     : number of jobs to run at same time. Run as single\n                             by default or when working with csvlog.\n    -J | --Jobs number     : number of log file to parse in parallel. Process one\n                             file at a time by default or when csvlog is used.\n    -l | --last-parsed file: allow incremental log parsing by registering the\n                             last datetime and line parsed. Useful if you want\n                             to watch errors since last run or if you want one\n                             report per day with a log rotated each week.\n    -L | --logfile-list file:file containing a list of log file to parse.\n    -m | --maxlength size  : maximum length of a query, it will be restricted to\n                             the given size. Default: no truncate\n    -M | --no-multiline    : do not collect multiline statement to avoid garbage\n                             especially on errors that generate a huge report.\n    -n | --nohighlight     : disable SQL code highlighting.\n    -N | --appname name    : only report on entries for given application name\n    -o | --outfile filename: define the filename for the output. Default depends\n                             on the output format: out.html, out.txt, out.bin,\n                             out.json or out.tsung. This option can be used\n                             multiple time to output several format. To use json\n                             output the Perl module JSON::XS must be installed,\n                             To dump output to stdout use - as filename.\n    -O | --outdir path     : directory where out file must be saved.\n    -p | --prefix string   : the value of your custom log_line_prefix as\n                             defined in your postgresql.conf. Only use it if you\n                             aren\'t using one of the standard prefixes specified\n                             in the pgBadger documentation, such as if your\n                             prefix includes additional variables like client ip\n                             or application name. See examples below.\n    -P | --no-prettify     : disable SQL queries prettify formatter.\n    -q | --quiet           : don\'t print anything to stdout, not even a progress\n                             bar.\n    -r | --remote-host ip  : set the host where to execute the cat command on\n                             remote logfile to parse locally the file.\n    -R | --retention N     : number of weeks to keep in incremental mode. Default\n                             to 0, disabled. Used to set the number of weeks to\n                             keep in output directory. Older weeks and days\n                             directory are automatically removed.\n    -s | --sample number   : number of query samples to store. Default: 3.\n    -S | --select-only     : only report SELECT queries.\n    -t | --top number      : number of queries to store/display. Default: 20.\n    -T | --title string    : change title of the HTML page report.\n    -u | --dbuser username : only report on entries for the given user.\n    -U | --exclude-user username : exclude entries for the specified user from\n                             report. Can be used multiple time.\n    -v | --verbose         : enable verbose or debug mode. Disabled by default.\n    -V | --version         : show pgBadger version and exit.\n    -w | --watch-mode      : only report errors just like logwatch could do.\n    -x | --extension       : output format. Values: text, html, bin, json or\n                             tsung. Default: html\n    -X | --extra-files     : in incremental mode allow pgBadger to write CSS and\n                             JS files in the output directory as separate files.\n    -z | --zcat exec_path  : set the full path to the zcat program. Use it if\n                             zcat or bzcat or unzip is not in your path.\n    -Z | --timezone +/-XX  : Set the number of hours from GMT of the timezone.\n                             Use this to adjust date/time in JavaScript graphs.\n    --pie-limit num        : pie data lower than num% will show a sum instead.\n    --exclude-query regex  : any query matching the given regex will be excluded\n                             from the report. For example: "^(VACUUM|COMMIT)"\n                             You can use this option multiple times.\n    --exclude-file filename: path of the file which contains all the regex to\n                             use to exclude queries from the report. One regex\n                             per line.\n    --include-query regex  : any query that does not match the given regex will\n                             be excluded from the report. You can use this\n                             option multiple times. For example: "(tbl1|tbl2)".\n    --include-file filename: path of the file which contains all the regex of\n                             the queries to include from the report. One regex\n                             per line.\n    --disable-error        : do not generate error report.\n    --disable-hourly       : do not generate hourly report.\n    --disable-type         : do not generate report of queries by type, database\n                             or user.\n    --disable-query        : do not generate query reports (slowest, most\n                             frequent, queries by users, by database, ...).\n    --disable-session      : do not generate session report.\n    --disable-connection   : do not generate connection report.\n    --disable-lock         : do not generate lock report.\n    --disable-temporary    : do not generate temporary report.\n    --disable-checkpoint   : do not generate checkpoint/restartpoint report.\n    --disable-autovacuum   : do not generate autovacuum report.\n    --charset              : used to set the HTML charset to be used.\n                             Default: utf-8.\n    --csv-separator        : used to set the CSV field separator, default: ,\n    --exclude-time  regex  : any timestamp matching the given regex will be\n                             excluded from the report. Example: "2013-04-12 .*"\n                             You can use this option multiple times.\n    --include-time  regex  : only timestamps matching the given regex will be\n                             included in the report. Example: "2013-04-12 .*"\n                             You can use this option multiple times.\n    --exclude-db name      : exclude entries for the specified database from\n                             report. Example: "pg_dump". Can be used multiple\n                             time.\n    --exclude-appname name : exclude entries for the specified application name\n                             from report.  Example: "pg_dump".  Can be used\n                             multiple time.\n    --exclude-line regex   : pgBadger will start to exclude any log entry that\n                             will match the given regex. Can be used multiple\n                             time.\n    --exclude-client name  : exclude log entries for the specified client ip.\n                             Can be used multiple time.\n    --anonymize            : obscure all literals in queries, useful to hide\n                             confidential data.\n    --noreport             : prevent pgBadger to create reports in incremental\n                             mode.\n    --log-duration         : force pgBadger to associate log entries generated\n                             by both log_duration = on and log_statement = \'all\'\n    --enable-checksum      : used to add a md5 sum under each query report.\n    --journalctl command   : command to use to replace PostgreSQL logfile by\n                             a call to journalctl. Basically it might be:\n                                journalctl -u postgresql-9.5\n    --pid-dir path         : set the path where the pid file must be stored.\n                             Default /tmp\n    --pid-file file        : set the name of the pid file to manage concurrent\n                             execution of pgBadger. Default: pgbadger.pid\n    --rebuild              : used to rebuild all html reports in incremental\n                             output directories where there\'s binary data files.\n    --pgbouncer-only       : only show PgBouncer related menu in the header.\n    --start-monday         : in incremental mode, calendar\'s weeks start on\n                             sunday. Use this option to start on monday.\n    --normalized-only      : only dump all normalized query to out.txt\n    --log-timezone +/-XX   : Set the number of hours from GMT of the timezone\n                             that must be used to adjust date/time read from\n                             log file before beeing parsed. Using this option\n                             make more difficult log search with a date/time.\n    --prettify-json        : use it if you want json output to be prettified.\n    --month-report YYYY-MM : create a cumulative HTML report over the specified\n                             month. Requires incremental output directories and\n                             the presence of all necessary binary data files\n    --noexplain             : do not process lines generated by auto_explain.\n\npgBadger is able to parse a remote log file using a passwordless ssh connection.\nUse the -r or --remote-host to set the host ip address or hostname. There\'s also\nsome additional options to fully control the ssh connection.\n\n    --ssh-program ssh   path to the ssh program to use. Default: ssh.\n    --ssh-user username      connection login name. Default to running user.\n    --ssh-identity file      path to the identity file to use.\n    --ssh-timeout second     timeout to ssh connection failure. Default 10 secs.\n    --ssh-option  options    list of -o options to use for the ssh connection.\n                             Options always used:\n                                 -o ConnectTimeout=$ssh_timeout\n                                 -o PreferredAuthentications=hostbased,publickey\n\nLog file to parse can also be specified using an URI, supported protocol are\nhttp\\[s\\] and \\[s\\]ftp. The curl command will be used to download the file and the\nfile will be parsed during download. The ssh protocol is also supported and will\nuse the ssh command like with the remote host use. See examples bellow.\n\nExamples:\n\n    pgbadger /var/log/postgresql.log\n    pgbadger /var/log/postgres.log.2.gz /var/log/postgres.log.1.gz /var/log/postgres.log\n    pgbadger /var/log/postgresql/postgresql-2012-05-*\n    pgbadger --exclude-query="^(COPY|COMMIT)" /var/log/postgresql.log\n    pgbadger -b "2012-06-25 10:56:11" -e "2012-06-25 10:59:11" /var/log/postgresql.log\n    cat /var/log/postgres.log | pgbadger -\n    # Log prefix with stderr log output\n    pgbadger --prefix \'%t [%p]: user=%u,db=%d,client=%h\' /pglog/postgresql-2012-08-21*\n    pgbadger --prefix \'%m %u@%d %p %r %a : \' /pglog/postgresql.log\n    # Log line prefix with syslog log output\n    pgbadger --prefix \'user=%u,db=%d,client=%h,appname=%a\' /pglog/postgresql-2012-08-21*\n    # Use my 8 CPUs to parse my 10GB file faster, much faster\n    pgbadger -j 8 /pglog/postgresql-10.1-main.log\n\nUse URI notation for remote log file:\n\n    pgbadger http://172.12.110.1//var/log/postgresql/postgresql-10.1-main.log\n    pgbadger ftp://username@172.12.110.14/postgresql-10.1-main.log\n    pgbadger ssh://username@172.12.110.14//var/log/postgresql/postgresql-10.1-main.log*\n\nYou can use together a local PostgreSQL log and a remote pgbouncer log file to parse:\n\n    pgbadger /var/log/postgresql/postgresql-10.1-main.log ssh://username@172.12.110.14/pgbouncer.log\n\nGenerate Tsung sessions XML file with select queries only:\n\n    pgbadger -S -o sessions.tsung --prefix \'%t [%p]: user=%u,db=%d \' /pglog/postgresql-10.1.log\n\nReporting errors every week by cron job:\n\n    30 23 * * 1 /usr/bin/pgbadger -q -w /var/log/postgresql.log -o /var/reports/pg_errors.html\n\nGenerate report every week using incremental behavior:\n\n    0 4 * * 1 /usr/bin/pgbadger -q `find /var/log/ -mtime -7 -name "postgresql.log*"` -o /var/reports/pg_errors-`date +\\%F`.html -l /var/reports/pgbadger_incremental_file.dat\n\nThis supposes that your log file and HTML report are also rotated every week.\n\nOr better, use the auto-generated incremental reports:\n\n    0 4 * * * /usr/bin/pgbadger -I -q /var/log/postgresql/postgresql.log.1 -O /var/www/pg_reports/\n\nwill generate a report per day and per week.\n\nIn incremental mode, you can also specify the number of week to keep in the\nreports:\n\n    /usr/bin/pgbadger --retention 2 -I -q /var/log/postgresql/postgresql.log.1 -O /var/www/pg_reports/\n\nIf you have a pg\\_dump at 23:00 and 13:00 each day during half an hour, you can\nuse pgBadger as follow to exclude these period from the report:\n\n    pgbadger --exclude-time "2013-09-.* (23|13):.*" postgresql.log\n\nThis will help avoid having COPY statements, as generated by pg\\_dump, on top of\nthe list of slowest queries. You can also use --exclude-appname "pg\\_dump" to\nsolve this problem in a simpler way.\n\nYou can also parse journalctl output just as if it was a log file:\n\n    pgbadger --journalctl \'journalctl -u postgresql-9.5\'\n\nor worst, call it from a remote host:\n\n    pgbadger -r 192.168.1.159 --journalctl \'journalctl -u postgresql-9.5\'\n\nyou don\'t need to specify any log file at command line, but if you have other\nPostgreSQL log file to parse, you can add them as usual.\n\nTo rebuild all incremental html reports after, proceed as follow:\n\n    rm /path/to/reports/*.js\n    rm /path/to/reports/*.css\n    pgbadger -X -I -O /path/to/reports/ --rebuild\n\nit will also update all resource files (JS and CSS). Use -E or --explode\nif the reports were built using this option.\n\npgBadger also support Heroku PostgreSQL logs using logplex format:\n\n    heroku logs -p postgres | pgbadger -f logplex -o heroku.html -\n\nthis will stream Heroku PostgreSQL log to pgbadger through stdin.\n\npgBadger can auto detect RDS and cloudwatch PostgreSQL logs using\nrds format:\n\n    pgbadger -f rds -o rds_out.html rds.log\n\nTo create a cumulative report over a month use command:\n\n    pgbadger --month-report 2919-05 /path/to/incremantal/reports/\n\nthis will add a link to the month name into the calendar view in\nincremental reports to look at report for month 2019 May.\nUse -E or --explode if the reports were built using this option.\n\n### DESCRIPTION\n\npgBadger is a PostgreSQL log analyzer built for speed with fully reports\nfrom your PostgreSQL log file. It\'s a single and small Perl script that\noutperforms any other PostgreSQL log analyzer.\n\nIt is written in pure Perl and uses a JavaScript library (flotr2) to draw\ngraphs so that you don\'t need to install any additional Perl modules or\nother packages. Furthermore, this library gives us more features such\nas zooming. pgBadger also uses the Bootstrap JavaScript library and\nthe FontAwesome webfont for better design. Everything is embedded.\n\npgBadger is able to autodetect your log file format (syslog, stderr, csvlog\nor jsonlog) if the file is long enough. It is designed to parse huge log\nfiles as well as compressed files. Supported compressed format are gzip,\nbzip2 and xz.  For the xz format you must have an xz version upper than 5.05\nthat supports the --robot option. For the complete list of features see below.\n\nAll charts are zoomable and can be saved as PNG images.\n\nYou can also limit pgBadger to only report errors or remove any part of the\nreport using command line options.\n\npgBadger supports any custom format set into the log\\_line\\_prefix directive of\nyour postgresql.conf file as long as it at least specify the %t and %p patterns.\n\npgBadger allows parallel processing of a single log file or multiple\nfiles through the use of the -j option specifying the number of CPUs.\n\nIf you want to save system performance you can also use log\\_duration instead of\nlog\\_min\\_duration\\_statement to have reports on duration and number of queries only.\n\n### FEATURE\n\npgBadger reports everything about your SQL queries:\n\n        Overall statistics.\n        The most frequent waiting queries.\n        Queries that waited the most.\n        Queries generating the most temporary files.\n        Queries generating the largest temporary files.\n        The slowest queries.\n        Queries that took up the most time.\n        The most frequent queries.\n        The most frequent errors.\n        Histogram of query times.\n        Histogram of sessions times.\n        Users involved in top queries.\n        Applications involved in top queries.\n        Queries generating the most cancellation.\n        Queries most cancelled.\n        The most time consuming prepare/bind queries\n\nThe following reports are also available with hourly charts divided into\nperiods of five minutes:\n\n        SQL queries statistics.\n        Temporary file statistics.\n        Checkpoints statistics.\n        Autovacuum and autoanalyze statistics.\n        Cancelled queries.\n        Error events (panic, fatal, error and warning).\n        Error class distribution.\n\nThere are also some pie charts about distribution of:\n\n        Locks statistics.\n        Queries by type (select/insert/update/delete).\n        Distribution of queries type per database/application\n        Sessions per database/user/client/application.\n        Connections per database/user/client/application.\n        Autovacuum and autoanalyze per table.\n        Queries per user and total duration per user.\n\nAll charts are zoomable and can be saved as PNG images. SQL queries reported are\nhighlighted and beautified automatically.\n\npgBadger is also able to parse PgBouncer log files and to create the following\nreports:\n\n        Request Throughput\n        Bytes I/O Throughput\n        Queries Average duration\n        Simultaneous sessions\n        Histogram of sessions times\n        Sessions per database\n        Sessions per user\n        Sessions per host\n        Established connections\n        Connections per database\n        Connections per user\n        Connections per host\n        Most used reserved pools\n        Most Frequent Errors/Events\n\nYou can also have incremental reports with one report per day and a cumulative\nreport per week. Two multiprocess modes are available to speed up log parsing,\none using one core per log file, and the second using multiple cores to parse\na single file. These modes can be combined.\n\nHistogram granularity can be adjusted using the -A command line option. By default\nthey will report the mean of each top queries/errors occurring per hour, but you can\nspecify the granularity down to the minute.\n\npgBadger can also be used in a central place to parse remote log files using a\npasswordless SSH connection. This mode can be used with compressed files and in\nthe multiprocess per file mode (-J) but can not be used with the CSV log format.\n\n### REQUIREMENT\n\npgBadger comes as a single Perl script - you do not need anything other than a modern\nPerl distribution. Charts are rendered using a JavaScript library so you don\'t need\nanything other than a web browser. Your browser will do all the work.\n\nIf you planned to parse PostgreSQL CSV log files you might need some Perl Modules:\n\n        Text::CSV_XS - to parse PostgreSQL CSV log files.\n\nThis module is optional, if you don\'t have PostgreSQL log in the CSV format you don\'t\nneed to install it.\n\nIf you want to export statistics as JSON file you need an additional Perl module:\n\n        JSON::XS - JSON serialising/deserialising, done correctly and fast\n\nThis module is optional, if you don\'t select the json output format you don\'t\nneed to install it. You can install it on a Debian like system using:\n\n        sudo apt-get install libjson-xs-perl\n\nand in RPM like system using:\n\n        sudo yum install perl-JSON-XS\n\nCompressed log file format is autodetected from the file extension. If pgBadger find\na gz extension it will use the zcat utility, with a bz2 extension it will use bzcat\nand if the file extension is zip or xz then the unzip or xz utilities will be used.\n\nIf those utilities are not found in the PATH environment variable then use the --zcat\ncommand line option to change this path. For example:\n\n        --zcat="/usr/local/bin/gunzip -c" or --zcat="/usr/local/bin/bzip2 -dc"\n        --zcat="C:\\tools\\unzip -p"\n\nBy default pgBadger will use the zcat, bzcat and unzip utilities following the\nfile extension. If you use the default autodetection compress format you can\nmixed gz, bz2, xz or zip files. Specifying a custom value to --zcat option will\nremove this feature of mixed compressed format.\n\nNote that multiprocessing can not be used with compressed files or CSV files as\nwell as under Windows platform.\n\n### INSTALLATION\n\nDownload the tarball from GitHub and unpack the archive as follow:\n\n        tar xzf pgbadger-11.x.tar.gz\n        cd pgbadger-11.x/\n        perl Makefile.PL\n        make && sudo make install\n\nThis will copy the Perl script pgbadger to /usr/local/bin/pgbadger by default and the\nman page into /usr/local/share/man/man1/pgbadger.1. Those are the default installation\ndirectories for \'site\' install.\n\nIf you want to install all under /usr/ location, use INSTALLDIRS=\'perl\' as an argument\nof Makefile.PL. The script will be installed into /usr/bin/pgbadger and the manpage\ninto /usr/share/man/man1/pgbadger.1.\n\nFor example, to install everything just like Debian does, proceed as follows:\n\n        perl Makefile.PL INSTALLDIRS=vendor\n\nBy default INSTALLDIRS is set to site.\n\n### POSTGRESQL CONFIGURATION\n\nYou must enable and set some configuration directives in your postgresql.conf\nbefore starting.\n\nYou must first enable SQL query logging to have something to parse:\n\n        log_min_duration_statement = 0\n\nHere every statement will be logged, on a busy server you may want to increase\nthis value to only log queries with a longer duration. Note that if you have\nlog\\_statement set to \'all\' nothing will be logged through the log\\_min\\_duration\\_statement\ndirective. See the next chapter for more information.\n\npgBadger supports any custom format set into the log\\_line\\_prefix directive of\nyour postgresql.conf file as long as it at least specify a time escape sequence\n(%t, %m or %n) and the process related escape sequence (%p or %c).\n\nFor example, with \'stderr\' log format, log\\_line\\_prefix must be at least:\n\n        log_line_prefix = \'%t [%p]: \'\n\nLog line prefix could add user, database name, application name and client ip\naddress as follows:\n\n        log_line_prefix = \'%t [%p]: user=%u,db=%d,app=%a,client=%h \'\n\nor for syslog log file format:\n\n        log_line_prefix = \'user=%u,db=%d,app=%a,client=%h \'\n\nLog line prefix for stderr output could also be:\n\n        log_line_prefix = \'%t [%p]: db=%d,user=%u,app=%a,client=%h \'\n\nor for syslog output:\n\n        log_line_prefix = \'db=%d,user=%u,app=%a,client=%h \'\n\nYou need to enable other parameters in postgresql.conf to get more information from your log files:\n\n        log_checkpoints = on\n        log_connections = on\n        log_disconnections = on\n        log_lock_waits = on\n        log_temp_files = 0\n        log_autovacuum_min_duration = 0\n        log_error_verbosity = default\n\nDo not enable log\\_statement as its log format will not be parsed by pgBadger.\n\nOf course your log messages should be in English without locale support:\n\n        lc_messages=\'C\'\n\nbut this is not only recommended by pgBadger.\n\n### LOG STATEMENTS\n\nConsiderations about log\\_min\\_duration\\_statement, log\\_duration and log\\_statement\nconfiguration directives.\n\nIf you want the query statistics to include the actual query strings, you\nmust set log\\_min\\_duration\\_statement to 0 or more milliseconds.\n\nIf you just want to report duration and number of queries and don\'t want all\ndetails about queries, set log\\_min\\_duration\\_statement to -1 to disable it and\nenable log\\_duration in your postgresql.conf file. If you want to add the most\ncommon request report you can either choose to set log\\_min\\_duration\\_statement\nto a higher value or choose to enable log\\_statement.\n\nEnabling log\\_min\\_duration\\_statement will add reports about slowest queries and\nqueries that took up the most time. Take care that if you have log\\_statement\nset to \'all\' nothing will be logged with log\\_min\\_duration\\_statement.\n\nWarning: Do not enable both log\\_min\\_duration\\_statement, log\\_duration and\nlog\\_statement all together, this will result in wrong counter values. Note\nthat this will also increase drastically the size of your log.\nlog\\_min\\_duration\\_statement should always be preferred.\n\n### PARALLEL PROCESSING\n\nTo enable parallel processing you just have to use the -j N option where N is\nthe number of cores you want to use.\n\npgBadger will then proceed as follow:\n\n        for each log file\n            chunk size = int(file size / N)\n            look at start/end offsets of these chunks\n            fork N processes and seek to the start offset of each chunk\n                each process will terminate when the parser reach the end offset\n                of its chunk\n                each process write stats into a binary temporary file\n           wait for all children has terminated\n        All binary temporary files generated will then be read and loaded into\n        memory to build the html output.\n\nWith that method, at start/end of chunks pgBadger may truncate or omit a\nmaximum of N queries per log file which is an insignificant gap if you have\nmillions of queries in your log file. The chance that the query that you were\nlooking for is lost is near 0, this is why I think this gap is livable. Most\nof the time the query is counted twice but truncated.\n\nWhen you have many small log files and many CPUs it is speedier to dedicate\none core to one log file at a time. To enable this behavior you have to use\noption -J N instead. With 200 log files of 10MB each the use of the -J option\nstarts being really interesting with 8 Cores. Using this method you will be\nsure not to lose any queries in the reports.\n\nHe are a benchmark done on a server with 8 CPUs and a single file of 9.5GB.\n\n         Option |  1 CPU  | 2 CPU | 4 CPU | 8 CPU\n        --------+---------+-------+-------+------\n           -j   | 1h41m18 | 50m25 | 25m39 | 15m58\n           -J   | 1h41m18 | 54m28 | 41m16 | 34m45\n\nWith 200 log files of 10MB each and a total of 2GB the results are slightly\ndifferent:\n\n         Option | 1 CPU | 2 CPU | 4 CPU | 8 CPU\n        --------+-------+-------+-------+------\n           -j   | 20m15 |  9m56 |  5m20 | 4m20\n           -J   | 20m15 |  9m49 |  5m00 | 2m40\n\nSo it is recommended to use -j unless you have hundreds of small log files\nand can use at least 8 CPUs.\n\nIMPORTANT: when you are using parallel parsing pgBadger will generate a\nlot of temporary files in the /tmp directory and will remove them at the\nend, so do not remove those files unless pgBadger is not running. They are\nall named with the following template tmp\\_pgbadgerXXXX.bin so they can be\neasily identified.\n\n### INCREMENTAL REPORTS\n\npgBadger includes an automatic incremental report mode using option -I or\n\\--incremental. When running in this mode, pgBadger will generate one report\nper day and a cumulative report per week. Output is first done in binary\nformat into the mandatory output directory (see option -O or --outdir),\nthen in HTML format for daily and weekly reports with a main index file.\n\nThe main index file will show a dropdown menu per week with a link to each\nweek report and links to daily reports of each week.\n\nFor example, if you run pgBadger as follows based on a daily rotated file:\n\n    0 4 * * * /usr/bin/pgbadger -I -q /var/log/postgresql/postgresql.log.1 -O /var/www/pg_reports/\n\nyou will have all daily and weekly reports for the full running period.\n\nIn this mode pgBadger will create an automatic incremental file in the\noutput directory, so you don\'t have to use the -l option unless you want\nto change the path of that file. This means that you can run pgBadger in\nthis mode each day on a log file rotated each week, and it will not count\nthe log entries twice.\n\nTo save disk space you may want to use the -X or --extra-files command line\noption to force pgBadger to write JavaScript and CSS to separate files in\nthe output directory. The resources will then be loaded using script and\nlink tags.\n\n#### Rebuilding reports\n\nIncremental reports can be rebuilt after a pgbadger report fix or a new\nfeature to update all HTML reports. To rebuild all reports where a binary\nfile is still present proceed as follow:\n\n    rm /path/to/reports/*.js\n    rm /path/to/reports/*.css\n    pgbadger -X -I -O /path/to/reports/ --rebuild\n\nit will also update all resource files (JS and CSS). Use -E or --explode\nif the reports were built using this option.\n\n#### Monthly reports\n\nBy default pgBadger in incremental mode only compute daily and weekly reports.\nIf you want monthly cumulative reports you will have to use a separate command\nto specify the report to build. For example to build a report for August 2019:\n\n    pgbadger -X --month-report 2919-08 /var/www/pg_reports/\n\nthis will add a link to the month name into the calendar view of incremental\nreports to look at monthly report. The report for a current month can be run\nevery day it is entirely rebuilt each time. The monthly report is not built by\ndefault because it could take lot of time following the amount of data.\n\nIf reports were built with the per database option ( -E | --explode ) it must\nbe used too when calling pgbadger to build monthly report:\n\n    pgbadger -E -X --month-report 2919-08 /var/www/pg_reports/\n\nThis is the same when using the rebuild option ( -R | --rebuild ).\n\n### BINARY FORMAT\n\nUsing the binary format it is possible to create custom incremental and\ncumulative reports. For example, if you want to refresh a pgBadger\nreport each hour from a daily PostgreSQL log file, you can proceed by\nrunning each hour the following commands:\n\n    pgbadger --last-parsed .pgbadger_last_state_file -o sunday/hourX.bin /var/log/pgsql/postgresql-Sun.log\n\nto generate the incremental data files in binary format. And to generate the fresh HTML\nreport from that binary file:\n\n    pgbadger sunday/*.bin\n\nOr as another example, if you generate one log file per hour and you want\nreports to be rebuilt each time the log file is rotated, proceed as\nfollows:\n\n        pgbadger -o day1/hour01.bin /var/log/pgsql/pglog/postgresql-2012-03-23_10.log\n        pgbadger -o day1/hour02.bin /var/log/pgsql/pglog/postgresql-2012-03-23_11.log\n        pgbadger -o day1/hour03.bin /var/log/pgsql/pglog/postgresql-2012-03-23_12.log\n        ...\n\nWhen you want to refresh the HTML report, for example each time after a new binary file\nis generated, just do the following:\n\n        pgbadger -o day1_report.html day1/*.bin\n\nAdjust the commands to suit your particular needs.\n\n### JSON FORMAT\n\nJSON format is good for sharing data with other languages, which makes it\neasy to integrate pgBadger result into other monitoring tools like Cacti\nor Graphite.\n\n### AUTHORS\n\npgBadger is an original work from Gilles Darold.\n\nThe pgBadger logo is an original creation of Damien Cazeils.\n\nThe pgBadger v4.x design comes from the "Art is code" company.\n\nThis web site is a work of Gilles Darold.\n\npgBadger is maintained by Gilles Darold and every one who wants to contribute.\n\nMany people have contributed to pgBadger, they are all quoted in the Changelog file.\n\n### LICENSE\n\npgBadger is free software distributed under the PostgreSQL Licence.\n\nCopyright (c) 2012-2019, Gilles Darold\n\nA modified version of the SQL::Beautify Perl Module is embedded in pgBadger\nwith copyright (C) 2009 by Jonas Kramer and is published under the terms of\nthe Artistic License 2.0.\n'