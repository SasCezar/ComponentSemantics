b'|Linux/macOS|Windows|Coverity|Code Coverage|\n|:---:|:---:|:---:|:---:|\n|[![Build Status](https://travis-ci.org/timescale/timescaledb.svg?branch=master)](https://travis-ci.org/timescale/timescaledb/builds)|[![Windows build status](https://ci.appveyor.com/api/projects/status/15sqkl900t04hywu/branch/master?svg=true)](https://ci.appveyor.com/project/timescale/timescaledb/branch/master)|[![Coverity Scan Build Status](https://scan.coverity.com/projects/timescale-timescaledb/badge.svg)](https://scan.coverity.com/projects/timescale-timescaledb)|[![Code Coverage](https://codecov.io/gh/timescale/timescaledb/branch/master/graphs/badge.svg?branch=master)](https://codecov.io/gh/timescale/timescaledb)\n\n\n## TimescaleDB\n\nTimescaleDB is an open-source database designed to make SQL scalable for\ntime-series data. It is engineered up from PostgreSQL, providing automatic\npartitioning across time and space (partitioning key), as well as full\nSQL support.\n\nTimescaleDB is packaged as a PostgreSQL extension.  All code is licensed\nunder the Apache-2 open-source license, with the exception of source code\nunder the `tsl` subdirectory, which is licensed under\nthe [Timescale License (TSL)](https://github.com/timescale/timescaledb/blob/master/tsl/LICENSE-TIMESCALE).\nFor clarity, all code files reference licensing in their header.  [Contributors welcome.](https://github.com/timescale/timescaledb/blob/master/CONTRIBUTING.md)\n\nApache-2 licensed binaries can be built by passing `-DAPACHE_ONLY=1` to `bootstrap`.\n\nBelow is an introduction to TimescaleDB. For more information, please check out these other resources:\n- [Developer Documentation](https://docs.timescale.com/)\n- [Slack Channel](https://slack-login.timescale.com)\n- [Support Email](mailto:support@timescale.com)\n\n(Before building from source, see instructions below.)\n\n### Using TimescaleDB\n\nTimescaleDB scales PostgreSQL for time-series data via automatic\npartitioning across time and space (partitioning key), yet retains\nthe standard PostgreSQL interface.\n\nIn other words, TimescaleDB exposes what look like regular tables, but\nare actually only an\nabstraction (or a virtual view) of many individual tables comprising the\nactual data. This single-table view, which we call a\n[hypertable](https://docs.timescale.com/introduction/architecture#hypertables),\nis comprised of many chunks, which are created by partitioning\nthe hypertable\'s data in either one or two dimensions: by a time\ninterval, and by an (optional) "partition key" such as\ndevice id, location, user id, etc. ([Architecture discussion](https://docs.timescale.com/introduction/architecture))\n\nVirtually all user interactions with TimescaleDB are with\nhypertables. Creating tables and indexes, altering tables, inserting\ndata, selecting data, etc., can (and should) all be executed on the\nhypertable.\n\nFrom the perspective of both use and management, TimescaleDB just\nlooks and feels like PostgreSQL, and can be managed and queried as\nsuch.\n\n#### Before you start\n\nPostgreSQL\'s out-of-the-box settings are typically too conservative for modern\nservers and TimescaleDB. You should make sure your `postgresql.conf`\nsettings are tuned, either by using [timescaledb-tune](https://github.com/timescale/timescaledb-tune) or doing it manually.\n\n#### Creating a hypertable\n\n```sql\n-- Do not forget to create timescaledb extension\nCREATE EXTENSION timescaledb;\n\n-- We start by creating a regular SQL table\nCREATE TABLE conditions (\n  time        TIMESTAMPTZ       NOT NULL,\n  location    TEXT              NOT NULL,\n  temperature DOUBLE PRECISION  NULL,\n  humidity    DOUBLE PRECISION  NULL\n);\n\n-- Then we convert it into a hypertable that is partitioned by time\nSELECT create_hypertable(\'conditions\', \'time\');\n```\n\n- [Quick start: Creating hypertables](https://docs.timescale.com/getting-started/creating-hypertables)\n- [Reference examples](https://docs.timescale.com/using-timescaledb/schema-management)\n\n#### Inserting and querying data\n\nInserting data into the hypertable is done via normal SQL commands:\n\n```sql\nINSERT INTO conditions(time, location, temperature, humidity)\n  VALUES (NOW(), \'office\', 70.0, 50.0);\n\nSELECT * FROM conditions ORDER BY time DESC LIMIT 100;\n\nSELECT time_bucket(\'15 minutes\', time) AS fifteen_min,\n    location, COUNT(*),\n    MAX(temperature) AS max_temp,\n    MAX(humidity) AS max_hum\n  FROM conditions\n  WHERE time > NOW() - interval \'3 hours\'\n  GROUP BY fifteen_min, location\n  ORDER BY fifteen_min DESC, max_temp DESC;\n```\n\nIn addition, TimescaleDB includes additional functions for time-series\nanalysis that are not present in vanilla PostgreSQL. (For example, the `time_bucket` function above.)\n\n- [Quick start: Basic operations](https://docs.timescale.com/using-timescaledb/hypertables)\n- [Reference examples](https://docs.timescale.com/using-timescaledb/writing-data)\n- [TimescaleDB API](https://docs.timescale.com/api)\n\n### Installation\n\nTimescaleDB is available pre-packaged for several platforms:\n\n- Linux:\n    - [RedHat / CentOS](https://docs.timescale.com/getting-started/installation/rhel-centos/installation-yum)\n    - [Ubuntu](https://docs.timescale.com/getting-started/installation/ubuntu/installation-apt-ubuntu)\n    - [Debian](https://docs.timescale.com/getting-started/installation/debian/installation-apt-debian)\n- [Docker](https://docs.timescale.com/getting-started/installation/docker/installation-docker)\n- [MacOS (Homebrew)](https://docs.timescale.com/getting-started/installation/macos/installation-homebrew)\n- [Windows](https://docs.timescale.com/getting-started/installation/windows/installation-windows)\n\nWe recommend following our detailed [installation instructions](https://docs.timescale.com/getting-started/installation).\n\n#### Building from source (Unix-based systems)\n\nIf you are building from source for **non-development purposes**\n(i.e., you want to run TimescaleDB, not submit a patch), you should\n**always use a release-tagged commit and not build from `master`**.\nSee the Releases tab for the latest release.\n\n**Prerequisites**:\n\n- A standard PostgreSQL 9.6, 10, or 11 installation with development\nenvironment (header files) (e.g., `postgresql-server-dev-11 `package\nfor Linux, Postgres.app for MacOS)\n- C compiler (e.g., gcc or clang)\n- [CMake](https://cmake.org/) version 3.4 or greater\n\n```bash\ngit clone git@github.com:timescale/timescaledb.git\ncd timescaledb\n# Find the latest release and checkout, e.g. for 1.3.0:\ngit checkout 1.3.0\n# Bootstrap the build system\n./bootstrap\n# To build the extension\ncd build && make\n# To install\nmake install\n```\n\nNote, if you have multiple versions of PostgreSQL installed you can specify the path to `pg_config` that should be used by using `./bootstrap -DPG_CONFIG=/path/to/pg_config`.\n\nPlease see our [additional configuration instructions](https://docs.timescale.com/getting-started/installation).\n\n#### Building from source (Windows)\n\nIf you are building from source for **non-development purposes**\n(i.e., you want to run TimescaleDB, not submit a patch), you should\n**always use a release-tagged commit and not build from `master`**.\nSee the Releases tab for the latest release.\n\n**Prerequisites**:\n\n- A standard [PostgreSQL 9.6, 10, or 11 64-bit installation](https://www.enterprisedb.com/downloads/postgres-postgresql-downloads#windows)\n- OpenSSL for Windows\n- Microsoft Visual Studio 2017 with CMake and Git components\n- OR Visual Studio 2015/2016 with [CMake](https://cmake.org/) version 3.4 or greater and Git\n- Make sure all relevant binaries are in your PATH: `pg_config` and `cmake`\n\nIf using Visual Studio 2017 with the CMake and Git components, you\nshould be able to simply clone the repo and open the folder in\nVisual Studio which will take care of the rest.\n\nIf you are using an earlier version of Visual Studio, then it can\nbe built in the following way:\n```bash\ngit clone git@github.com:timescale/timescaledb.git\ncd timescaledb\n\n# Find the latest release and checkout, e.g. for 1.3.0:\ngit checkout 1.3.0\n# Bootstrap the build system\nbootstrap.bat\n# To build the extension from command line\ncmake --build ./build --config Release\n# To install\ncmake --build ./build --config Release --target install\n\n# Alternatively, build in Visual Studio via its built-in support for\n# CMake or by opening the generated build/timescaledb.sln solution file.\n```\n\n### Useful tools\n\n- [timescaledb-tune](https://github.com/timescale/timescaledb-tune): Helps\nset your PostgreSQL configuration settings based on your system\'s resources.\n- [timescaledb-parallel-copy](https://github.com/timescale/timescaledb-parallel-copy): Parallelize your initial bulk loading by using PostgreSQL\'s\n`COPY` across multiple workers.\n\n### Additional documentation\n\n- [Why use TimescaleDB?](https://docs.timescale.com/introduction)\n- [Migrating from PostgreSQL](https://docs.timescale.com/getting-started/setup/migrate-from-postgresql)\n- [Writing data](https://docs.timescale.com/using-timescaledb/writing-data)\n- [Querying and data analytics](https://docs.timescale.com/using-timescaledb/reading-data)\n- [Tutorials and sample data](https://docs.timescale.com/tutorials)\n\n### Support\n\n- [Slack Channel](https://slack.timescale.com)\n- [Github Issues](https://github.com/timescale/timescaledb/issues)\n- [Support Email](mailto:support@timescale.com)\n\n### Contributing\n\n- [Contributor instructions](https://github.com/timescale/timescaledb/blob/master/CONTRIBUTING.md)\n- [Code style guide](https://github.com/timescale/timescaledb/blob/master/docs/StyleGuide.md)\n'