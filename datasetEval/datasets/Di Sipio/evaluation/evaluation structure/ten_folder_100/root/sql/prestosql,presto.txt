b'# Presto\n[![Build Status](https://travis-ci.com/prestosql/presto.svg?branch=master)](https://travis-ci.com/prestosql/presto)\n[![Build Status](https://github.com/prestosql/presto/workflows/CI/badge.svg)](https://github.com/prestosql/presto/actions?query=workflow%3ACI+event%3Apush+branch%3Amaster)\n\nPresto is a distributed SQL query engine for big data.\n\nSee the [User Manual](https://prestosql.io/docs/current/) for deployment instructions and end user documentation.\n\n## Requirements\n\n* Mac OS X or Linux\n* Java 8 Update 161 or higher (8u161+), 64-bit. Both Oracle JDK and OpenJDK are supported.\n* Python 2.6+ (for running with the launcher script)\n\n## Building Presto\n\nPresto is a standard Maven project. Simply run the following command from the project root directory:\n\n    ./mvnw clean install\n\nOn the first build, Maven will download all the dependencies from the internet and cache them in the local repository (`~/.m2/repository`), which can take a considerable amount of time. Subsequent builds will be faster.\n\nPresto has a comprehensive set of unit tests that can take several minutes to run. You can disable the tests when building:\n\n    ./mvnw clean install -DskipTests\n\n## Running Presto in your IDE\n\n### Overview\n\nAfter building Presto for the first time, you can load the project into your IDE and run the server. We recommend using [IntelliJ IDEA](http://www.jetbrains.com/idea/). Because Presto is a standard Maven project, you can import it into your IDE using the root `pom.xml` file. In IntelliJ, choose Open Project from the Quick Start box or choose Open from the File menu and select the root `pom.xml` file.\n\nAfter opening the project in IntelliJ, double check that the Java SDK is properly configured for the project:\n\n* Open the File menu and select Project Structure\n* In the SDKs section, ensure that a 1.8 JDK is selected (create one if none exist)\n* In the Project section, ensure the Project language level is set to 8.0 as Presto makes use of several Java 8 language features\n\nPresto comes with sample configuration that should work out-of-the-box for development. Use the following options to create a run configuration:\n\n* Main Class: `io.prestosql.server.PrestoServer`\n* VM Options: `-ea -XX:+UseG1GC -XX:G1HeapRegionSize=32M -XX:+UseGCOverheadLimit -XX:+ExplicitGCInvokesConcurrent -Xmx2G -Dconfig=etc/config.properties -Dlog.levels-file=etc/log.properties`\n* Working directory: `$MODULE_DIR$`\n* Use classpath of module: `presto-main`\n\nThe working directory should be the `presto-main` subdirectory. In IntelliJ, using `$MODULE_DIR$` accomplishes this automatically.\n\nAdditionally, the Hive plugin must be configured with the location of your Hive metastore Thrift service. Add the following to the list of VM options, replacing `localhost:9083` with the correct host and port (or use the below value if you do not have a Hive metastore):\n\n    -Dhive.metastore.uri=thrift://localhost:9083\n\n### Using SOCKS for Hive or HDFS\n\nIf your Hive metastore or HDFS cluster is not directly accessible to your local machine, you can use SSH port forwarding to access it. Setup a dynamic SOCKS proxy with SSH listening on local port 1080:\n\n    ssh -v -N -D 1080 server\n\nThen add the following to the list of VM options:\n\n    -Dhive.metastore.thrift.client.socks-proxy=localhost:1080\n    -Dhive.hdfs.socks-proxy=localhost:1080\n\n### Running the CLI\n\nStart the CLI to connect to the server and run SQL queries:\n\n    presto-cli/target/presto-cli-*-executable.jar\n\nRun a query to see the nodes in the cluster:\n\n    SELECT * FROM system.runtime.nodes;\n\nIn the sample configuration, the Hive connector is mounted in the `hive` catalog, so you can run the following queries to show the tables in the Hive database `default`:\n\n    SHOW TABLES FROM hive.default;\n\n## Development\n\n### Code Style\n\nWe recommend you use IntelliJ as your IDE. The code style template for the project can be found in the [codestyle](https://github.com/airlift/codestyle) repository along with our general programming and Java guidelines. In addition to those you should also adhere to the following:\n\n* Alphabetize sections in the documentation source files (both in the table of contents files and other regular documentation files). In general, alphabetize methods/variables/sections if such ordering already exists in the surrounding code.\n* When appropriate, use the Java 8 stream API. However, note that the stream implementation does not perform well so avoid using it in inner loops or otherwise performance sensitive sections.\n* Categorize errors when throwing exceptions. For example, PrestoException takes an error code as an argument, `PrestoException(HIVE_TOO_MANY_OPEN_PARTITIONS)`. This categorization lets you generate reports so you can monitor the frequency of various failures.\n* Ensure that all files have the appropriate license header; you can generate the license by running `mvn license:format`.\n* Consider using String formatting (printf style formatting using the Java `Formatter` class): `format("Session property %s is invalid: %s", name, value)` (note that `format()` should always be statically imported). Sometimes, if you only need to append something, consider using the `+` operator.\n* Avoid using the ternary operator except for trivial expressions.\n* Use an assertion from Airlift\'s `Assertions` class if there is one that covers your case rather than writing the assertion by hand. Over time we may move over to more fluent assertions like AssertJ.\n* When writing a Git commit message, follow these [guidelines](https://chris.beams.io/posts/git-commit/).\n\n### Additional IDE configuration\n\nWhen using IntelliJ to develop Presto, we recommend starting with all of the default inspections,\nwith some modifications.\n\nEnable the following inspections:\n\n- ``Java | Internationalization | Implicit usage of platform\'s default charset``,\n- ``Java | Class structure | Utility class is not \'final\'``,\n- ``Java | Class structure | Utility class with \'public\' constructor``,\n- ``Java | Class structure | Utility class without \'private\' constructor``.\n\nDisable the following inspections:\n\n- ``Java | Abstraction issues | \'Optional\' used as field or parameter type``.\n\n### Building the Web UI\n\nThe Presto Web UI is composed of several React components and is written in JSX and ES6. This source code is compiled and packaged into browser-compatible Javascript, which is then checked in to the Presto source code (in the `dist` folder). You must have [Node.js](https://nodejs.org/en/download/) and [Yarn](https://yarnpkg.com/en/) installed to execute these commands. To update this folder after making changes, simply run:\n\n    yarn --cwd presto-main/src/main/resources/webapp/src install\n\nIf no Javascript dependencies have changed (i.e., no changes to `package.json`), it is faster to run:\n\n    yarn --cwd presto-main/src/main/resources/webapp/src run package\n\nTo simplify iteration, you can also run in `watch` mode, which automatically re-compiles when changes to source files are detected:\n\n    yarn --cwd presto-main/src/main/resources/webapp/src run watch\n\nTo iterate quickly, simply re-build the project in IntelliJ after packaging is complete. Project resources will be hot-reloaded and changes are reflected on browser refresh.\n\n## Writing and Building Documentation\n\nMore information about the documentation process can be found in the\n[README file in presto-docs](./presto-docs/README.md).\n'