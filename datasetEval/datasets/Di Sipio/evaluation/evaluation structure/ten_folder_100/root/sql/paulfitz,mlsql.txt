b'Infer SQL queries from plain-text questions and table headers.\n\nRequirements:\n * install `docker`\n * install `curl`\n * Make sure docker allows at least 3GB of RAM (see `Docker`>`Preferences`>`Advanced`\n   or equivalent)\n\n## sqlova\n\nThis wraps up a published pretrained model for Sqlova (https://github.com/naver/sqlova/).\n\nFetch and start sqlova running as an api server on port 5050:\n\n```\ndocker run --name sqlova -d -p 5050:5050 paulfitz/sqlova\n```\n\nBe patient, the image is about 4.2GB.  Once it is running, it\'ll take a few seconds\nto load models and then you can start asking questions about CSV tables.  For example:\n\n```\ncurl -F "csv=@bridges.csv" -F "q=how long is throgs neck" localhost:5050\n# {"answer":[1800],"params":["throgs neck"],"sql":"SELECT (length) FROM bridges WHERE bridge = ?"}\n```\n\nThis is using the sample `bridges.csv` included in this repo.\n\n| bridge | designer | length |\n|---|---|---|\n| Brooklyn | J. A. Roebling | 1595 |\n| Manhattan | G. Lindenthal | 1470 |\n| Williamsburg | L. L. Buck | 1600 |\n| Queensborough | Palmer & Hornbostel | 1182 |\n| Triborough | O. H. Ammann | 1380,383 |\n| Bronx Whitestone | O. H. Ammann | 2300 |\n| Throgs Neck | O. H. Ammann | 1800 |\n| George Washington | O. H. Ammann | 3500 |\n\nHere are some examples of the answers and sql inferred for plain-text questions about\nthis table:\n\n| question | answer | sql |\n|---|---|---|\n| how long is throgs neck | 1800 | `SELECT (length) FROM bridges WHERE bridge = ? [\'throgs neck\']` |\n| who designed the george washington | O. H. Ammann | `SELECT (designer) FROM bridges WHERE bridge = ? [\'george washington\']` |\n| how many bridges are there | 8 | `SELECT count(bridge) FROM bridges` |\n| how many bridges are designed by O. H. Ammann | 4 | `SELECT count(bridge) FROM bridges WHERE designer = ? [\'O. H. Ammann\']` |\n| which bridge are longer than 2000 | Bronx Whitestone, George Washington | `SELECT (bridge) FROM bridges WHERE length > ? [\'2000\']` |\n| how many bridges are longer than 2000 | 2 | `SELECT count(bridge) FROM bridges WHERE length > ? [\'2000\']` |\n| what is the shortest length | 1182 | `SELECT min(length) FROM bridges` |\n\nWith the `players.csv` sample from WikiSQL:\n\n| Player | No. | Nationality | Position | Years in Toronto | School/Club Team |\n|---|---|---|---|---|---|\n| Antonio Lang | 21 | United States | Guard-Forward | 1999-2000 | Duke |\n| Voshon Lenard | 2 | United States | Guard | 2002-03 | Minnesota |\n| Martin Lewis | 32, 44 | United States | Guard-Forward | 1996-97 | Butler CC (KS) |\n| Brad Lohaus | 33 | United States | Forward-Center | 1996 | Iowa |\n| Art Long | 42 | United States | Forward-Center | 2002-03 | Cincinnati |\n| John Long | 25 | United States | Guard | 1996-97 | Detroit |\n| Kyle Lowry | 3 | United States | Guard | 2012-present | Villanova |\n\n| question | answer | sql |\n|---|---|---|\n| What number did the person playing for Duke wear? | 21 | `SELECT (No.) FROM players WHERE School/Club Team = ? [\'duke\']` |\n| Who is the player that wears number 42? | Art Long  | `SELECT (Player) FROM players WHERE No. = ? [\'42\']` |\n| What year did Brad Lohaus play? | 1996 | `SELECT (Years in Toronto) FROM players WHERE Player = ? [\'brad lohaus\']` |\n| What country is Voshon Lenard from? | United States | `SELECT (Nationality) FROM players WHERE Player = ? [\'voshon lenard\']` |\n\nSome questions about [iris.csv](https://en.wikipedia.org/wiki/Iris_flower_data_set):\n\n| question | answer | sql |\n|---|---|---|\n| what is the average petal width for virginica | 2.026 | `SELECT avg(Petal.Width) FROM iris WHERE Species = ? [\'virginica\']` |\n| what is the longest sepal for versicolor | 7.0 | `SELECT max(Sepal.Length) FROM iris WHERE Species = ? [\'versicolor\']` |\n| how many setosa rows are there | 50 | `SELECT count(col0) FROM iris WHERE Species = ? [\'setosa\']` |\n\nThere are plenty of types of questions this model cannot answer (and that aren\'t covered\nin the dataset it is trained on, or in the sql it is permitted to generate).  I hope to\ntrack research in the area and substitute in models as they become available:\n\n * [WikiSQL leaderboard](https://github.com/salesforce/WikiSQL#leaderboard)\n * [Spider leaderboard](https://yale-lily.github.io/spider)\n * Code/models coming soon hopefully: [IRNet](https://github.com/zhanzecheng/IRNet) (site removed), [Spider Schema GNN](https://github.com/benbogin/spider-schema-gnn)\n * Is there any code for [X-SQL](https://www.microsoft.com/en-us/research/publication/x-sql-reinforce-context-into-schema-representation/)?\n * [SyntaxSQL](https://github.com/taoyds/syntaxSQL)\n * [NL2SQL Challenge](https://tianchi.aliyun.com/competition/entrance/231716/information)\n * A term paper including a Sqlova reimplementation with tweaks: [Search Like a Human: Neural Machine Translation for Database Search](https://web.stanford.edu/class/cs224n/reports/custom/15709203.pdf)\n * [NL2SQL-BERT](https://github.com/guotong1988/NL2SQL-BERT) gives an example of how to add features derived from the table content to improve results.\n\n'