b'<img src="https://www.cs.cmu.edu/~jarulraj/images/sqlcheck-new.jpg" alt="SQLCheck Logo"></img>\n\n-----------------\n\n[![GitHub license](https://img.shields.io/badge/license-apache-blue.svg?style=flat)](https://www.apache.org/licenses/LICENSE-2.0)\n[![Version](https://img.shields.io/badge/version-1.2-red.svg)](https://github.com/jarulraj/sqlcheck/)\n[![Build Status](https://travis-ci.org/jarulraj/sqlcheck.svg?branch=master)](https://travis-ci.org/jarulraj/sqlcheck)\n[![Coverage Status](https://coveralls.io/repos/github/jarulraj/sqlcheck/badge.svg?branch=master)](https://coveralls.io/github/jarulraj/sqlcheck?branch=master)\n\n[![Ubuntu](https://img.shields.io/badge/supports-ubuntu-brightgreen.svg)](https://github.com/jarulraj/sqlcheck/)\n[![CentOS](https://img.shields.io/badge/supports-centos-yellow.svg)](https://github.com/jarulraj/sqlcheck/)\n[![Windows](https://img.shields.io/badge/supports-windows-00ffff.svg)](https://github.com/jarulraj/sqlcheck/)\n[![MacOS](https://img.shields.io/badge/supports-macos-ff69b4.svg)](https://github.com/jarulraj/sqlcheck/)\n\n## What Is SQLCheck?\n\n`sqlcheck` automatically detects common SQL anti-patterns. Such anti-patterns often slow down queries. Addressing them will, therefore, help accelerate queries. \n\n`sqlcheck` targets **all major SQL dialects**.\n\nFor development updates on `sqlcheck` and general news on <a href="https://www.cs.cmu.edu/~jarulraj/pages/research.html">next generation  database systems</a>, follow me at <a class="twitter-follow-button" href="https://twitter.com/joy_arulraj">@joy_arulraj</a>.\n\n## Interactive Demo\n\nHere\'s a short demonstration of how to use `sqlcheck` on a SQL file named `top_mutexes.sql`. It highlights the verbose (`-v`) and color (`-c`) modes of the tool, which are disabled by default.\n\n<p align="center">\n  <a href="https://asciinema.org/a/JW8gCkBrd65kz0j0RIjylIn42" target="_blank">\n    <img src="https://asciinema.org/a/JW8gCkBrd65kz0j0RIjylIn42.png" width="654"/>\n  </a>\n</p>\n\n\n## What it can do\n\nRight now SQLCheck can detect the following anti-patterns:\n\n### Logical Database Design Anti-Patterns\n\n  * [Multi-Valued Attribute](https://github.com/jarulraj/sqlcheck/blob/master/docs/logical/1001.md)\n  * [Recursive Dependency](https://github.com/jarulraj/sqlcheck/blob/master/docs/logical/1002.md)\n  * [Primary Key Does Not Exist](https://github.com/jarulraj/sqlcheck/blob/master/docs/logical/1003.md)\n  * [Generic Primary Key](https://github.com/jarulraj/sqlcheck/blob/master/docs/logical/1004.md)\n  * [Foreign Key Does Not Exist](https://github.com/jarulraj/sqlcheck/blob/master/docs/logical/1005.md)\n  * [Entity-Attribute-Value Pattern](https://github.com/jarulraj/sqlcheck/blob/master/docs/logical/1006.md)\n  * [Metadata Tribbles](https://github.com/jarulraj/sqlcheck/blob/master/docs/logical/1007.md)\n\n### Physical Database Design Anti-Patterns\n\n  * [Imprecise Data Type](https://github.com/jarulraj/sqlcheck/blob/master/docs/physical/2001.md)\n  * [Values In Definition](https://github.com/jarulraj/sqlcheck/blob/master/docs/physical/2002.md)\n  * [Files Are Not SQL Data Types](https://github.com/jarulraj/sqlcheck/blob/master/docs/physical/2003.md)\n  * [Too Many Indexes](https://github.com/jarulraj/sqlcheck/blob/master/docs/physical/2004.md)\n  * [Index Attribute Order](https://github.com/jarulraj/sqlcheck/blob/master/docs/physical/2005.md)\n\n### Query Anti-Patterns\n\n  * [SELECT *](https://github.com/jarulraj/sqlcheck/blob/master/docs/query/3001.md)\n  * [NULL Usage](https://github.com/jarulraj/sqlcheck/blob/master/docs/query/3002.md)\n  * [NOT NULL Usage](https://github.com/jarulraj/sqlcheck/blob/master/docs/query/3003.md)\n  * [String Concatenation](https://github.com/jarulraj/sqlcheck/blob/master/docs/query/3004.md)\n  * [GROUP BY Usage](https://github.com/jarulraj/sqlcheck/blob/master/docs/query/3005.md)\n  * [ORDER BY RAND Usage](https://github.com/jarulraj/sqlcheck/blob/master/docs/query/3006.md)\n  * [Pattern Matching Usage](https://github.com/jarulraj/sqlcheck/blob/master/docs/query/3007.md)\n  * [Spaghetti Query Alert](https://github.com/jarulraj/sqlcheck/blob/master/docs/query/3008.md)\n  * [Reduce Number of JOINs](https://github.com/jarulraj/sqlcheck/blob/master/docs/query/3009.md)\n  * [Eliminate Unnecessary DISTINCT Conditions](https://github.com/jarulraj/sqlcheck/blob/master/docs/query/3010.md)\n  * [Implicit Column Usage](https://github.com/jarulraj/sqlcheck/blob/master/docs/query/3011.md)\n  * [HAVING Clause Usage](https://github.com/jarulraj/sqlcheck/blob/master/docs/query/3012.md)\n  * [Nested sub queries](https://github.com/jarulraj/sqlcheck/blob/master/docs/query/3013.md)\n  * [OR Usage](https://github.com/jarulraj/sqlcheck/blob/master/docs/query/3014.md)\n  * [UNION Usage](https://github.com/jarulraj/sqlcheck/blob/master/docs/query/3015.md)\n  * [DISTINCT & JOIN Usage](https://github.com/jarulraj/sqlcheck/blob/master/docs/query/3016.md)\n\n### Application Development Anti-Patterns\n\n  * [Readable Passwords](https://github.com/jarulraj/sqlcheck/blob/master/docs/application/4001.md)\n\n## Installation\n\n## UBUNTU/MINT (DEBIAN)\n\n1. Download the **debian package** from the latest release.\n```shell\nwget https://github.com/jarulraj/sqlcheck/releases/download/v1.2/sqlcheck-x86_64.deb\n```\n\n2. Install it by running the following command.\n```shell\ndpkg -i sqlcheck-x86_64.deb\n```\n\n## FEDORA/CENTOS (RPM)\n\n1. Download the **rpm package** from the latest release.\n```shell\nwget https://github.com/jarulraj/sqlcheck/releases/download/v1.2/sqlcheck-x86_64.rpm\n```\n\n2. Install it by running the following command.\n```shell\nyum --nogpgcheck localinstall sqlcheck-x86_64.rpm \n```\n\n## MAC (DMG)\n\n1. Download the **dmg package** from the latest release.\n```shell\nwget https://github.com/jarulraj/sqlcheck/releases/download/v1.2/sqlcheck-x86_64.dmg\n```\n\n2. Click the dmg to mount the package. This will mount it in the `Volumes` directory.\n\n3. Open the `Terminal` app. [This page](http://blog.teamtreehouse.com/introduction-to-the-mac-os-x-command-line) contains more details on finding the app.\n\n4. Copy over the SQLCheck binary file to desired local directory.\n```shell\ncp /Volumes/sqlcheck-x86_64/bin/sqlcheck /usr/local/bin/\n```\n\n### Homebrew\n\nAnother alternative is to use **Homebrew**. Here\'s a tap written by [@gwerbin](https://github.com/gwerbin) :\n\n```shell\nbrew tap gwerbin/tap\nbrew cask install gwerbin/tap/sqlcheck\n```\n\n## WINDOWS (EXE)\n\n1. Download the **exe file** from the latest release.\n```shell\nwget https://github.com/jarulraj/sqlcheck/releases/download/v1.2/sqlcheck.exe\n```\n\n2. Open a terminal (like `cmd.exe`) and run the executable.\n\n## ZIP\n\n1. Download the **zip package** from the latest release.\n```shell\nwget https://github.com/jarulraj/sqlcheck/releases/download/v1.2/sqlcheck-x86_64.zip\n```\n\n2. Unzip it and find the SQLCheck binary (`bin/sqlcheck`).\n```shell\nunzip sqlcheck-x86_64.zip\n```\n\n## SOURCE CODE\n\nSQLCheck has the following software dependencies:\n\n- **g++ 4.9+** \n- **cmake** ([Cmake installation guide](https://cmake.org/install/))\n\nFirst, clone the repository (with **--recursive** option).\n\n```shell\ngit clone --recursive https://github.com/jarulraj/sqlcheck.git\n```\n\nNext, run the following commands to build and install SQLCheck:\n\n```shell\n./bootstrap\ncd build\ncmake -DCMAKE_BUILD_TYPE=RELEASE ..\nmake\nmake install\n```\n\n## Usage\n\n```\n$ sqlcheck -h\n\nCommand line options : sqlcheck <options>\n   -f --file_name          :  file name\n   -r --risk_level         :  set of anti-patterns to check\n                           :  1 (all anti-patterns, default) \n                           :  2 (only medium and high risk anti-patterns) \n                           :  3 (only high risk anti-patterns) \n   -c --color_mode         :  color mode \n   -v --verbose_mode       :  verbose mode\n```   \n\n```sql\n$ sqlcheck -f examples/top_mutexes.sql -v \n\n-------------------------------------------------\n> RISK LEVEL    :: ALL ANTI-PATTERNS\n> SQL FILE NAME :: examples/top_mutexes.sql\n-------------------------------------------------\n==================== Results ===================\n\n-------------------------------------------------\nSQL Statement: with top_mutexes as ( select--+ leading(t1 s1 v1 v2 t2 s2) use_hash(s1)\nuse_nl(v1) use_hash(s2) materialize t1.hsecs ,s1.* ,s2.sleeps as end_sleeps\n,s2.wait_time as end_wait_time ,s2.sleeps-s1.sleeps as delta_sleeps ,t2.hsecs -\nt1.hsecs as delta_hsecs --,s2.* from v$timer t1 ,v$mutex_sleep s1 ,(select/*+\nno_merge */ sum(level) a from dual connect by level<=1e6) v1 ,v$timer t2\n,v$mutex_sleep s2 where s1.mutex_type=s2.mutex_type and s1.location=s2.location\n) select * from top_mutexes order by delta_sleeps desc;\n```\n\n```\n[examples/top_mutexes.sql]: (HIGH RISK) (QUERY ANTI-PATTERN) SELECT *\n\n\xe2\x97\x8f Inefficiency in moving data to the consumer:\n\nWhen you SELECT *, you\'re often retrieving more columns from the database than\nyour application really needs to function. This causes more data to move from\nthe database server to the client, slowing access and increasing load on your\nmachines, as well as taking more time to travel across the network. This is\nespecially true when someone adds new columns to underlying tables that didn\'t\nexist and weren\'t needed when the original consumers coded their data access.   \n\n\n\xe2\x97\x8f Indexing issues:\n\nConsider a scenario where you want to tune a query to a high level of\nperformance. If you were to use *, and it returned more columns than you\nactually needed, the server would often have to perform more expensive methods\nto retrieve your data than it otherwise might. For example, you wouldn\'t be able\nto create an index which simply covered the columns in your SELECT list, and\neven if you did (including all columns [shudder]), the next developer who came around\nand added a column to the underlying table would cause the optimizer to ignore\nyour optimized covering index, and you\'d likely find that the performance of\nyour query would drop substantially for no readily apparent reason.    \n[Matching Expression: select *]\n\n[examples/top_mutexes.sql]: (LOW RISK) (QUERY ANTI-PATTERN) Spaghetti Query Alert   \n\n\xe2\x97\x8f Split up a complex spaghetti query into several simpler queries:\n\nSQL is a very expressive language\xe2\x80\x94you can accomplish a lot in a single query\nor statement. But that doesn\'t mean it\'s mandatory or even a good idea to\napproach every task with the assumption it has to be done in one line of code.\nOne common unintended consequence of producing all your results in one query is\na Cartesian product. This happens when two of the tables in the query have no\ncondition restricting their relationship. Without such a restriction, the join\nof two tables pairs each row in the first table to every row in the other table.\nEach such pairing becomes a row of the result set, and you end up with many more\nrows than you expect. \n\nIt\'s important to consider that these queries are simply\nhard to write, hard to modify, and hard to debug. You should expect to get\nregular requests for incremental enhancements to your database applications.\nManagers want more complex reports and more fields in a user interface. If you\ndesign intricate, monolithic SQL queries, it\'s more costly and time-consuming to\nmake enhancements to them. Your time is worth something, both to you and to your\nproject. Split up a complex spaghetti query into several simpler queries. When\nyou split up a complex SQL query, the result may be many similar queries,\nperhaps varying slightly depending on data values. Writing these queries is a\nchore, so it\'s a good application of SQL code generation. Although SQL makes it\nseem possible to solve a complex problem in a single line of code, don\'t be\ntempted to build a house of cards.   \n\n==================== Summary ===================   \nAll Anti-Patterns  :: 2   \n>  High Risk   :: 1   \n>  Medium Risk :: 0   \n>  Low Risk    :: 1   \n\n```\n\n## References\n\n(1) SQL Anti-patterns: Avoiding the Pitfalls of Database Programming, Bill Karwin  \n(2) [Common SQL Anti-patterns](https://stackoverflow.com/questions/346659/what-are-the-most-common-sql-anti-patterns), StackOverflow\n\n## Contributions\n\nContributions to SQLCheck are always welcome. You can contribute in different ways:\n* Open an issue with suggestions for improvements and errors you\'re facing;\n* Fork this repository and submit a pull request;\n* Improve the documentation.\n\n## License\n\nLicensed under the [Apache License](LICENSE).\n'