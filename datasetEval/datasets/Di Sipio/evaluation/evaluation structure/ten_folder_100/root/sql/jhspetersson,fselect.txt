b'# fselect\nFind files with SQL-like queries\n\n[![Crates.io](https://img.shields.io/crates/v/fselect.svg)](https://crates.io/crates/fselect)\n[![Build Status](https://travis-ci.org/jhspetersson/fselect.svg?branch=master)](https://travis-ci.org/jhspetersson/fselect)\n\n### Why use fselect?\n\nWhile it doesn\'t tend to fully replace traditional `find` and `ls`, **fselect** has these nice features:\n\n* SQL-like (not real SQL, but highly relaxed!) grammar easily understandable by humans\n* complex queries\n* aggregate, date, and other functions\n* search within archives\n* `.gitignore` and `.hgignore` support (experimental)\n* search by width and height of images, EXIF metadata\n* search by MP3 info\n* search by extended file attributes\n* search by file hashes\n* search by MIME type\n* shortcuts to common file types\n* various output formatting (CSV, JSON, and others)\n\nMore is under way!\n\n### Installation\n\n#### Latest release from source\n\n* Install [Rust with Cargo](https://www.rust-lang.org/en-US/install.html) and its dependencies to build a binary\n* Run `cargo install fselect`\n\n#### Arch Linux\n\n[AUR package](https://aur.archlinux.org/packages/fselect/), thanks to [@asm0dey](https://github.com/asm0dey)\n\n#### NixOS\n\n[`fselect` in `nixpkgs`](https://github.com/filalex77/nixpkgs/blob/1eced92263395896c10cea69e5f60e8be5f43aeb/pkgs/tools/misc/fselect/default.nix), thanks to [@filalex77](https://github.com/filalex77)\n\n#### Other Linux\n\n[Static build with musl](https://github.com/jhspetersson/fselect/releases/download/0.6.7/fselect-x86_64-linux-musl.gz).\n\n#### Windows 64bit\n\nA statically precompiled [binary](https://github.com/jhspetersson/fselect/releases/download/0.6.7/fselect-x86_64-win.zip) is available at Github downloads.\n\n#### Windows from Chocolatey\n\n* Install [Chocolatey](https://chocolatey.org/install)\n* Run `choco install fselect`\n\n#### Mac\n\n* Install [brew](https://brew.sh)\n* Run `brew install fselect`\n\n### Usage\n\n    fselect [ARGS] COLUMN[, COLUMN...] [from ROOT[, ROOT...]] [where EXPR] [order by COLUMNS] [limit N] [into FORMAT]\n\n### Documentation\n\n[More detailed description. Look at examples first.](docs/usage.md)\n\n### Examples\n\nFind temporary or config files (full path and size):\n\n    fselect size, path from /home/user where name = \'*.cfg\' or name = \'*.tmp\'\n    \nWindows users may omit the quotes:\n\n    fselect size, path from C:\\Users\\user where name = *.cfg or name = *.tmp\n\nOr put all the arguments into the quotes like this:\n\n    fselect "name from /home/user/tmp where size > 0"\n\nFind files (just names) with any content (size > 0):\n\n    fselect name from /home/user/tmp where size gt 0\n\nSpecify file size, get absolute path, and add it to the results:\n\n    cd /home/user\n    fselect size, abspath from ./tmp where size gt 2g\n    fselect fsize, abspath from ./tmp where size = 5m\n    fselect hsize, abspath from ./tmp where size lt 8k\n    \nMore complex query:\n\n    fselect "name from /tmp where (name = *.tmp and size = 0) or (name = *.cfg and size > 1000000)"\n    \nAggregate functions:\n\n    fselect "MIN(size), MAX(size), AVG(size), SUM(size), COUNT(*) from /home/user/Downloads"\n    \nFormatting functions:\n\n    fselect "LOWER(name), UPPER(name), LENGTH(name), YEAR(modified) from /home/user/Downloads"\n    \nGet the year of an oldest file:\n\n    fselect "MIN(YEAR(modified)) from /home/user"\n    \nUse single quotes if you need to address files with spaces:\n\n    fselect "path from \'/home/user/Misc stuff\' where name != \'Some file\'"\n    \nRegular expressions of [Rust flavor](https://docs.rs/regex/1.1.0/regex/#syntax) are supported:\n\n    fselect name from /home/user where path =~ \'.*Rust.*\'\n    \nNegate regular expressions:\n\n    fselect "name from . where path !=~ \'^\\./config\'"\n    \nSimple globs expand automatically and work with `=` and `!=` operators:\n\n    fselect name from /home/user where path = \'*Rust*\'\n    \nClassic LIKE:\n\n    fselect "path from /home/user where name like \'%report-2018-__-__???\'"\n    \nExact match operators to search with regexps disabled:\n\n    fselect "path from /home/user where name === \'some_*_weird_*_name\'"\n    \nFind files by date:\n\n    fselect path from /home/user where created = 2017-05-01\n    fselect path from /home/user where modified = today\n    fselect path from /home/user where accessed = yesterday\n    fselect "path from /home/user where modified = \'apr 1\'"\n    fselect "path from /home/user where modified = \'last fri\'"\n    \nBe more specific to match all files created at interval between 3PM and 4PM:\n\n    fselect path from /home/user where created = \'2017-05-01 15\'\n    \nAnd even more specific:\n\n    fselect path from /home/user where created = \'2017-05-01 15:10\'\n    fselect path from /home/user where created = \'2017-05-01 15:10:30\'\n    \nDate and time intervals possible (find everything updated since May 1st):\n\n    fselect path from /home/user where modified gte 2017-05-01\n    \nDefault is current directory:\n\n    fselect path, size where name = \'*.jpg\'\n    \nSearch within multiple locations:\n\n    fselect path from /home/user/oldstuff, /home/user/newstuff where name = \'*.jpg\'\n    \nWith minimum and/or maximum depth specified (`depth` is a synonym for `maxdepth`):\n\n    fselect path from /home/user/oldstuff depth 5 where name = \'*.jpg\'\n    fselect path from /home/user/oldstuff mindepth 2 maxdepth 5, /home/user/newstuff depth 10 where name = \'*.jpg\'\n\nOptionally follow symlinks:\n\n    fselect path, size from /home/user symlinks where name = \'*.jpg\'\n    \nSearch within archives (currently only zip-archives are supported):\n\n    fselect path, size from /home/user archives where name = \'*.jpg\'\n    \nOr in combination:\n\n    fselect size, path from /home/user depth 5 archives symlinks where name = \'*.jpg\' limit 100\n\nEnable `.gitignore` or `.hgignore` support:\n\n    fselect size, path from /home/user/projects gitignore where name = \'*.cpp\'\n    fselect size, path from /home/user/projects hgignore where name = \'*.py\'        \n    \nSearch by image dimensions:\n\n    fselect width, height, path from /home/user/photos where width gte 2000 or height gte 2000\n    \nFind square images:\n    \n    fselect path from /home/user/Photos where width = height\n    \nFind old-school rap MP3 files:\n\n    fselect duration, path from /home/user/music where genre = Rap and bitrate = 320 and mp3_year lt 2000  \n    \nShortcuts to common file extensions:\n\n    fselect path from /home/user where is_archive = true\n    fselect path, mime from /home/user where is_audio = 1\n    fselect path, mime from /home/user where is_book != false\n    fselect path from /home/user where is_doc != 1\n    fselect path from /home/user where is_image = false\n    fselect path from /home/user where is_video != true\n    \nFind files with dangerous permissions:\n    \n    fselect mode, path from /home/user where other_write = true or other_exec = true\n    fselect mode, path from /home/user where other_all = true\n    \nSimple glob-like expressions or even regular expressions on file mode are possible:\n    \n    fselect mode, path from /home/user where mode = \'*rwx\'\n    fselect mode, path from /home/user where mode =~ \'.*rwx$\'\n    \nFind files by owner\'s uid or gid:\n\n    fselect uid, gid, path from /home/user where uid != 1000 or gid != 1000\n    \nOr by owner\'s or group\'s name:\n\n    fselect user, group, path from /home/user where user = mike or group = mike\n\nFind special files:\n\n    fselect name from /usr/bin where suid = true\n    fselect path from /tmp where is_pipe = true\n    fselect path from /tmp where is_socket = 1\n    \nFind files with xattrs, check if particular xattr exists, or get its value:\n\n    fselect "path, has_xattrs, has_xattr(user.test), xattr(user.test) from /home/user"\n    \nInclude arbitrary text as columns:\n\n    fselect "name, \' has size of \', size, \' bytes\'"\n\nOrder results:\n\n    fselect path from /tmp order by size desc, name\n    fselect modified, fsize, path from ~ order by 1 desc, 3\n    \nFinally limit the results:\n\n    fselect name from /home/user/samples limit 5 \n    \nFormat output:\n\n    fselect size, path from /home/user limit 5 into json\n    fselect size, path from /home/user limit 5 into csv\n    fselect size, path from /home/user limit 5 into html\n\n### License\n\nMIT/Apache-2.0\n\n---\n\nSupported by [JetBrains IDEA](https://www.jetbrains.com/?from=fselect) open source license\n'