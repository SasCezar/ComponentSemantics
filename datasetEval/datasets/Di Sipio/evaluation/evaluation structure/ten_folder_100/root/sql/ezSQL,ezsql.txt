b'# **ezsql**\n\n[![Build Status](https://travis-ci.org/ezSQL/ezsql.svg?branch=master)](https://travis-ci.org/ezSQL/ezsql)\n[![Build status](https://ci.appveyor.com/api/projects/status/6s8oqnoxa2i5k04f?svg=true)](https://ci.appveyor.com/project/jv2222/ezsql)\n[![codecov](https://codecov.io/gh/ezSQL/ezSQL/branch/master/graph/badge.svg)](https://codecov.io/gh/ezSQL/ezSQL)\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/aad1f6aaaaa14f60933e75615da900b8)](https://www.codacy.com/app/techno-express/ezsql?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=ezSQL/ezsql&amp;utm_campaign=Badge_Grade)\n[![Maintainability](https://api.codeclimate.com/v1/badges/6f6107f25e9de7bf4272/maintainability)](https://codeclimate.com/github/ezSQL/ezsql/maintainability)\n\n***A class to make it very easy to deal with database connections.***\n\nThis is [__version 4__](https://github.com/ezSQL/ezsql/tree/v4) that has many modern programming practices in which will break users of version 3.\n\n[__Version 3__](https://github.com/ezSQL/ezsql/tree/v3) broke version 2.1.7 in one major way, it required *PHP 5.6*. Which drop mysql extension support, other than that, nothing as far using the library was changed, only additional features.\n\nThis library has an `Database` class, an combination of the [Factory](https://en.wikipedia.org/wiki/Factory_method_pattern) pattern with an [Dependency Injection](https://en.wikipedia.org/wiki/Dependency_injection) container hosting. This library now is following many OOP principles, one in which, the methods properties public access has been removed. This library also following PSR-2, PSR-4, PSR-11 conventions, and mostly PSR-1, that\'s still an work in progress.\n\n* More Todo...\n\nFor an full overview see [documentation Wiki](https://github.com/ezSQL/ezsql/wiki/Documentation), which is not completely finish.\n\n## Installation\n\n    composer require ezsql/ezsql\n\n## Usage\n\n```php\nrequire \'vendor/autoload.php\';\n\n// **** is one of mysqli, pgsql, sqlsrv, sqlite3, or Pdo.\nuse ezsql\\Database;\n\n$db = Database::initialize(\'****\', [$dsn_path_user, $password, $database, $other_settings], $optional_tag);\n\n// Is same as:\nuse ezsql\\Config;\nuse ezsql\\Database\\ez_****;\n\n$setting = new Config(\'****\', [$dsn_path_user, $password, $database, $other_settings]);\n\n$db = new ez_****($settings);\n```\n\nThis library will assume the developer is using some sort of IDE with intellisense enabled. The comments/doc-block area will hold any missing documentations. For additional examples see __phpunit__ tests, The tests are fully functional integration tests, meaning the are live database tests, no mocks.\n\nThe following has been added since version 2.1.7.\n\n___General Methods___\n\n    to_string($arrays, $separation = \',\');\n    clean($string);\n    create_cache(string $path = null);\n    secureSetup(string $key = \'certificate.key\',\n        string $cert = \'certificate.crt\',\n        string $ca = \'cacert.pem\',\n        string $path = \'.\'._DS\n    );\n    secureReset();\n    createCertificate(string $privatekeyFile = certificate.key,\n        string $certificateFile = certificate.crt,\n        string $signingFile = certificate.csr,\n        string $ssl_path = null, array $details = [commonName => localhost]\n    );\n\n___Shortcut Table Methods___\n\n    create(string $table = null, ...$schemas);// $schemas requires... column()\n    column(string $column = null, string $type = null, ...$args);\n    primary(string $primaryName, ...$primaryKeys);\n    index(string $indexName, ...$indexKeys);\n    drop(string $table);\nExample\n\n```php\n// Creates an database table\ncreate(\'profile\',\n    // and with database column name, datatype\n    // data types are global CONSTANTS\n    // SEQUENCE|AUTO is placeholder tag, to be replaced with the proper SQL drivers auto number sequencer word.\n    column(\'id\', INTR, 11, AUTO, PRIMARY), // mysqli\n    column(\'name\', VARCHAR, 50, notNULL),\n    column(\'email\', CHAR, 25, NULLS),\n    column(\'phone\', TINYINT)\n);\n```\n\n---\n\n    innerJoin(string $leftTable = null, string $rightTable = null,\n        string $leftColumn = null, string $rightColumn = null, $condition = EQ);\n\n    leftJoin(string $leftTable = null, string $rightTable = null,\n        string $leftColumn = null, string $rightColumn = null, $condition = EQ);\n\n    rightJoin(string $leftTable = null, string $rightTable = null,\n        string $leftColumn = null, string $rightColumn = null, $condition = EQ);\n\n    fullJoin(string $leftTable = null, string $rightTable = null,\n        string $leftColumn = null, string $rightColumn = null, $condition = EQ);\n---\n\n```php\nprepareOn(); // When activated will use prepare statements for all shortcut SQL Methods calls.\nprepareOff(); // When off shortcut SQL Methods calls will use vendors escape routine instead. This is the default behavior.\n```\n\n### Shortcut SQL Methods\n\n* `having(...$having);`\n* `groupBy($groupBy);`\n* `union(string $table = null, $columnFields = \'*\', ...$conditions);`\n* `unionAll(string $table = null, $columnFields = \'*\', ...$conditions);`\n* `orderBy($orderBy, $order);`\n* `limit($numberOf, $offset = null)`\n* `where( ...$whereConditions);`\n* `selecting(string $table = null, $columnFields = \'*\', ...$conditions);`\n* `create_select(string $newTable, $fromColumns, $oldTable = null, ...$conditions);`\n* `select_into(string $newTable, $fromColumns, $oldTable = null, ...$conditions);`\n* `update(string $table = null, $keyAndValue, ...$whereConditions);`\n* `delete(string $table = null, ...$whereConditions);`\n* `replace(string $table = null, $keyAndValue);`\n* `insert(string $table = null, $keyAndValue);`\n* `insert_select(string $toTable = null, $toColumns = \'*\', $fromTable = null, $fromColumns = \'*\', ...$conditions);`\n\n```php\n// The variadic ...$whereConditions, and ...$conditions parameters,\n//  represent the following global functions.\n// They are comparison expressions returning an array with the given arguments,\n//  the last arguments of _AND, _OR, _NOT, _andNOT will combine expressions\neq(\'column\', $value, _AND), // combine next expression\nneq(\'column\', $value, _OR), // will combine next expression again\nne(\'column\', $value), // the default is _AND so will combine next expression\nlt(\'column\', $value)\nlte(\'column\', $value)\ngt(\'column\', $value)\ngte(\'column\', $value)\nisNull(\'column\')\nisNotNull(\'column\')\nlike(\'column\', \'_%?\')\nnotLike(\'column\', \'_%?\')\nin(\'column\', ...$value)\nnotIn(\'column\', ...$value)\nbetween(\'column\', $value, $value2)\nnotBetween(\'column\', $value, $value2)\n// The above should be used within the where( ...$whereConditions) clause\n// $value will protected by either using escape or prepare statement\n```\n\n```php\n// Supply the the whole query string, and placing \'?\' within\n// With the same number of arguments in an array.\n// It will determine arguments type, execute, and return results.\nquery_prepared(string $query_string, array $param_array);\n// Will need to call to get last successful query result, will return an object array\nqueryResult();\n```\n\n#### Example for using prepare statements indirectly, with above shortcut SQL methods\n\n```php\n// To get all shortcut SQL methods calls to use prepare statements\n$db->prepareOn(); // This needs to be called at least once at instance creation\n\n$values = [];\n$values[\'name\'] = $user;\n$values[\'email\'] = $address;\n$values[\'phone\'] = $number;\n$db->insert(\'profile\', $values);\n$db->insert(\'profile\', [\'name\' => \'john john\', \'email\' => \'john@email\', \'phone\' => 123456]);\n\n// returns result set given the table name, column fields, and ...conditions\n$result = $db->selecting(\'profile\', \'phone\', eq(\'email\', $email), between(\'id\', 1, $values));\n\nforeach ($result as $row) {\n    echo $row->phone;\n}\n\n$result = $db->selecting(\'profile\', \'name, email\',\n    // Conditionals can also be called, stacked with other functions like:\n    //  innerJoin(), leftJoin(), rightJoin(), fullJoin()\n    //      as (leftTable, rightTable, leftColumn, rightColumn, equal condition),\n    //  where( eq( columns, values, _AND ), like( columns, _d ) ),\n    //  groupBy( columns ),\n    //  having( between( columns, values1, values2 ) ),\n    //  orderBy( columns, desc ),\n    //  limit( numberOfRecords, offset ),\n    //  union(table, columnFields, conditions),\n    //  unionAll(table, columnFields, conditions)\n    $db->where( eq(\'phone\', $number, _OR), neq(\'id\', 5) ),\n    //  another way: where( array(key, operator, value, combine, combineShifted) );\n    //  or as strings double spaced: where( "key  operator  value  combine  combineShifted" );\n    $db->orderBy(\'name\'),\n    $db->limit(1)\n);\n\nforeach ($result as $row) {\n    echo $row->name.\' \'.$row->email;\n}\n```\n\n#### Example for using prepare statements directly, no shortcut SQL methods used\n\n```php\n$db->query_prepared(\'INSERT INTO profile( name, email, phone) VALUES( ?, ?, ? );\', [$user, $address, $number]);\n\n$db->query_prepared(\'SELECT name, email FROM profile WHERE phone = ? OR id != ?\', [$number, 5]);\n$result = $db->queryResult(); // the last query that has results are stored in `last_result` protected property\n\nforeach ($result as $row) {\n    echo $row->name.\' \'.$row->email;\n}\n```\n\n## For Authors and **[Contributors](https://github.com/ezSQL/ezsql/blob/master/CONTRIBUTORS.md)**\n\n## Contributing\n\nContributions are encouraged and welcome; I am always happy to get feedback or pull requests on Github :) Create [Github Issues](https://github.com/ezSQL/ezsql/issues) for bugs and new features and comment on the ones you are interested in.\n\n## License\n\n**ezsql** is open-sourced software licensed originally under (LGPL-3.0), and the addon parts under (MIT).\n'