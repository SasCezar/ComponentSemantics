b'# FluentPDO [![Build Status](https://secure.travis-ci.org/envms/fluentpdo.png?branch=master)](http://travis-ci.org/envms/fluentpdo) [![Maintainability](https://api.codeclimate.com/v1/badges/19210ca91c7055b89705/maintainability)](https://codeclimate.com/github/fpdo/fluentpdo/maintainability)\n\nFluentPDO is a PHP SQL query builder using PDO. It\'s a quick and light library featuring a smart join builder, which automatically creates table joins for you.\n\n## Features\n\n- Easy interface for creating robust queries\n- Supports any database compatible with PDO\n- Ability to build complex SELECT, INSERT, UPDATE & DELETE queries with little code\n- Type hinting for magic methods with code completion in smart IDEs\n\n## Requirements\n\nThe latest (2.x) release of FluentPDO officially supports PHP 7.1, 7.2 and 7.3. v2.x is actively maintained.\n\nThe legacy (1.x) release of FluentPDO works with PHP 5.4 to 7.1. **Note:** v1.x is no longer supported and will not be maintained or updated.\n\n## Reference\n\n[Sitepoint - Getting Started with FluentPDO](http://www.sitepoint.com/getting-started-fluentpdo/)\n\n## Install\n\n### Composer\n\nThe preferred way to install FluentPDO is via [composer](http://getcomposer.org/). Version 2.0 is now released! Please start using 2.x in your projects\nand let us know of any issues you find, they will be resolved quickly.\n\nAdd the following line in your `composer.json` file:\n\n\t"require": {\n\t\t...\n\t\t"envms/fluentpdo": "^2.1.0"\n\t}\n\nupdate your dependencies with `composer update`, and you\'re done!\n\n### Copy\n\nIf you prefer not to use composer, create the directory `Envms/FluentPDO` in your library directory, and drop this repository into it. Finally, add:\n\n```php\nrequire "[lib-dir]/Envms/FluentPDO/src/Query.php";\n```\n\nto the top of your application. **Note:** You will need an autoloader to use FluentPDO without changing its source code.\n\n## Getting Started\n\nCreate a new PDO instance, and pass the instance to FluentPDO:\n\n```php\n$pdo = new PDO("mysql:dbname=fluentdb", "root");\n$fluent = new \\Envms\\FluentPDO\\Query($pdo);\n```\n\nThen, creating queries is quick and easy:\n\n```php\n$query = $fluent->from(\'comment\')\n             ->where(\'article.published_at > ?\', $date)\n             ->orderBy(\'published_at DESC\')\n             ->limit(5);\n```\n\nwhich would build the query below:\n\n```mysql\nSELECT comment.*\nFROM comment\nLEFT JOIN article ON article.id = comment.article_id\nWHERE article.published_at > ?\nORDER BY article.published_at DESC\nLIMIT 5\n```\n\nTo get data from the select, all we do is loop through the returned array:\n\n```php\nforeach ($query as $row) {\n    echo "$row[title]\\n";\n}\n```\n\n## Using the Smart Join Builder\n\nLet\'s start with a traditional join, below:\n\n```php\n$query = $fluent->from(\'article\')\n             ->leftJoin(\'user ON user.id = article.user_id\')\n             ->select(\'user.name\');\n```\n\nThat\'s pretty verbose, and not very smart. If your tables use proper primary and foreign key names, you can shorten the above to:\n\n```php\n$query = $fluent->from(\'article\')\n             ->leftJoin(\'user\')\n             ->select(\'user.name\');\n```\n\nThat\'s better, but not ideal. However, it would be even easier to **not write any joins**:\n\n```php\n$query = $fluent->from(\'article\')\n             ->select(\'user.name\');\n```\n\nAwesome, right? FluentPDO is able to build the join for you, by you prepending the foreign table name to the requested column.\n\nAll three snippets above will create the exact same query:\n\n```mysql\nSELECT article.*, user.name \nFROM article \nLEFT JOIN user ON user.id = article.user_id\n```\n\n##### Close your connection\n\nFinally, it\'s always a good idea to free resources as soon as they are done with their duties:\n \n ```php\n$fluent->close();\n```\n\n## CRUD Query Examples\n\n##### SELECT\n\n```php\n$query = $fluent->from(\'article\')->where(\'id\', 1);\n$query = $fluent->from(\'user\', 1); // shorter version if selecting one row by primary key\n```\n\n##### INSERT\n\n```php\n$values = array(\'title\' => \'article 1\', \'content\' => \'content 1\');\n\n$query = $fluent->insertInto(\'article\')->values($values)->execute();\n$query = $fluent->insertInto(\'article\', $values)->execute(); // shorter version\n```\n\n##### UPDATE\n\n```php\n$set = array(\'published_at\' => new FluentLiteral(\'NOW()\'));\n\n$query = $fluent->update(\'article\')->set($set)->where(\'id\', 1)->execute();\n$query = $fluent->update(\'article\', $set, 1)->execute(); // shorter version if updating one row by primary key\n```\n\n##### DELETE\n\n```php\n$query = $fluent->deleteFrom(\'article\')->where(\'id\', 1)->execute();\n$query = $fluent->deleteFrom(\'article\', 1)->execute(); // shorter version if deleting one row by primary key\n```\n\n***Note**: INSERT, UPDATE and DELETE queries will only run after you call `->execute()`*\n\nFull documentation can be found on the [FluentPDO homepage](http://envms.github.io/fluentpdo/)\n\n## License\n\nFree for commercial and non-commercial use under the [Apache 2.0](http://www.apache.org/licenses/LICENSE-2.0.html) or [GPL 2.0](http://www.gnu.org/licenses/gpl-2.0.html) licenses.\n'