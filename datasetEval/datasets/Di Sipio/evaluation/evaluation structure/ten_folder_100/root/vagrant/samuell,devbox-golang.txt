b'# DevBox-Golong\n*Vagrant box backed by Docker or Virtualbox, with Ansible provisioning*\n\nA Vagrant box (Virtualbox or Docker as providers) with Ansible provisioning\nfor setting up a Vim-based Golang development environment.\n\n![Screenshot](golang-vagrant-ansible.png)\n\n### Note: There are currently problems with the docker version of the script, so please use the virtualbox version until this is solved!\n\n## Ingredients\n\n- [Ubuntu 16.04 "xenial" LTS 64bit base image](http://www.ubuntu.com/)\n- [Go(lang) 1.6.2](http://golang.org/)\n- [Vim](http://www.vim.org/)\n- [Fatih\'s vim-go plugin](https://github.com/fatih/vim-go), providing syntax highlight, gocode integration for autocompletion, and more.\n    - See the [vim-go](https://github.com/fatih/vim-go) README for more info on how you can easily enable additional included features.\n- [GoCode Go completion engine](https://github.com/nsf/gocode)\n- [Git](http://git-scm.com/)\n- [Tig - text mode interface to git](http://jonas.nitro.dk/tig/)\n- [gdb - the GNU debugger](http://www.gnu.org/software/gdb)\n- [cgdb - Curses based user interface to gdb](https://cgdb.github.io)\n\n## Optional ingredients\n\n*Uncomment roles in playbook.yml to enable these.*\n\n- [Valloric\'s YouCompleteMe](https://github.com/Valloric/YouCompleteMe) for as-you-type completion (NB: Requires uncommenting the YouCompleteMe role in playbook.yml!)).\n- [Apache Mesos](http://mesos.apache.org) - An open source computer cluster manager. (UI on [localhost:5050](http://localhost:5050)).\n\n## Prerequisites\n\n- [Vagrant](https://www.vagrantup.com/)\n- [Ansible](http://www.ansible.com/)\n- [VirtualBox](https://www.virtualbox.org/) (Not required if you use Docker as provider!)\n- [Docker](https://www.docker.com) (Not required if you use Virtualbox as provider!)\n\n### Installing the requirements in Ubuntu (tested with 14.04)\n\n1. Install Virtualbox:\n\t```bash\n\tsudo apt-get install virtualbox\n\t```\n\n2. Install Docker:\n\t```bash\n\tsudo apt-get install docker.io\n\t```\n\n3. Install a recent version of ansible:\n   ```bash\n   sudo apt-get install ansible/trusty-backports\n   ```\n\n   *(if you ubuntu version is "trusty", otherwise, replace it with your appropriate version)*\n4. Install Vagrant, by first downloadng the proper .deb file from [vagrantup.com](https://www.vagrantup.com/downloads.html)\n\n5. ... and then installing it with:\n\t```bash\n\tsudo dpkg -i <deb-file>\n\t```\n\n## Setup and Usage\n\n#### Clone the github repository:\n\n```bash\ngit clone git@github.com:samuell/devbox-golang\ncd devbox-golang\n```\n\n#### Bring up the VM\n\nWith docker provider (Expect it to take at least ~8m):\n\n```bash\nvagrant up docker\n```\n\nWith VirtualBox provider (Expect it to take at least ~20m):\n\n```bash\nvagrant up virtualbox\n```\n\n#### Log in to the VM\n\nWith docker provider:\n\n```bash\nvagrant ssh docker\n```\n\nWith VirtualBox provider:\n\n```bash\nvagrant ssh virtualbox\n```\n\n#### Create a repository for uploading to github:\n\n```bash\nmkcd ~/code/go/src/github/<user>/<repo>\ngit init .\n```\n\n#### Now, start coding!\n\n```bash\nvim main.go\n```\n\n#### A tip on how you can upload your existing git ssh keys to the new vm:\n\nWith the following command you can get the info you need to run scp\nagainst the machine:\n\n```bash\nvagrant ssh-config [docker | virtualbox]\n```\n\nNote the hostname and port number (and identity file, if you with),\nand run, for example:\n\n```bash\nscp -i <identity-file-path> -P <portno> \\\n\t~/.ssh/id_rsa_<whateveryounamedit> \\\n\tvagrant@<hostname>:/home/vagrant/.ssh/\n```\n\nThen, sometimes, in order to get the new key activated in your shell\nafter logging in to the vm, you might need to do:\n\n```bash\nssh-agent bash -l\nssh-add ~/.ssh/id_rsa_<whateveryounamedit>\n```\n\n- Autocompletion will happen automatically\n- If you have turned off the YouCompleteMe role, you will get autocompletion with `<C-x><C-o>`\n\n## Known issues\n\n- GDB Breakpoints don\'t take, unless you follow the advice given [here](https://github.com/docker/docker/issues/7276#issuecomment-50436671).\n  That is, in short, do this on your **Host machine**, if you run Ubuntu:\n\n  ```bash\n  sudo apt-get install apparmor-utils\n  sudo echo \'aa-complain /etc/apparmor.d/docker\' >> /etc/rc.local\n  sudo aa-complain /etc/apparmor.d/docker\n  ```\n\n  The problem seems to be that `ptrace` is not given access to the process otherwise.\n- There are some really red message from the docker daemon when running `vagrant halt`.\n  Everything seems to work as expected though (including the shutdown)\n- There are some red message on vagrant up, but they are nothing serious, and can be ignored for now.\n- When building Go 1.5 dev, the build will end with a lot of error messages, but that is from the\n  tests after the build. The build itself seems to work, largely.\n\n## References\n\n- [Vagrant & Ansible Quickstart Tutorial](http://adamcod.es/2014/09/23/vagrant-ansible-quickstart-tutorial.html)\n'