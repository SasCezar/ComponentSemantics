b'packer-build\n============\n\n\nWhat does this do?\n~~~~~~~~~~~~~~~~~~\n\nThese Packer templates and associated files may be used to build fresh Debian\nand Ubuntu virtual machine images for Vagrant, VirtualBox and QEMU.\n\nThe resulting image files may be used as bootable systems on real machines and\nthe provided preseed files may also be used to install identical systems on\nbare metal as well.\n\nWhile there are no limitations for running 32-bit x86 guests on 64-bit x86\nhosts, this functionality has been deprecated here since 32-bit support is\nbeing phased out of Debian/Ubuntu "real soon now".\n\n\nWhat dependencies does this have?\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThese templates are tested semi-regularly on recent Linux (Debian and/or\nUbuntu) hosts using recent versions of Packer and Vagrant.  All testing is\ncurrently done on systems that have amd64/x86_64-family processors.\n\nThe VirtualBox and QEMU versions used for Linux testing are normally the\n"stock" ones provided by the official distribution repositories.\n\n* REQUIRED:  Packer_ (Packer_download_)\n\n  - 1.4.5 on Debian Stretch 9.x (VirtualBox and QEMU)\n  - not currently being tested on macOS but used to work fine\n\n.. _Packer:  https://www.packer.io/\n.. _Packer_download:  https://releases.hashicorp.com/packer/\n\n* REQUIRED (if not using QEMU):  VirtualBox_ (VirtualBox_download_)\n\n  - 5.1.34 r121010 (Qt5.7.1) [5.1.34-121010~Debian~stretch] on Debian Stretch 9.x\n  - not currently being tested on macOS but used to work fine\n\n.. _VirtualBox:  https://www.virtualbox.org/\n.. _VirtualBox_download:  http://download.virtualbox.org/virtualbox\n\n* REQUIRED (if not using VirtualBox):  QEMU_ (kvm_)\n\n  - 2.8.1 (Debian 1:2.8+dfsg-6+deb9u3) [2.8+dfsg-6+deb9u3] on Debian Stretch 9.x\n  - not currently being tested on macOS but used to work fine\n\n.. _QEMU:  https://www.qemu.org/\n.. _kvm:  https://www.linux-kvm.org/page/Main_Page\n\n* OPTIONAL:  Vagrant_ (Vagrant_download_)\n\n  - 2.2.6 on Debian Stretch 9.x (VirtualBox)\n  - not currently being tested on macOS but used to work fine\n\n.. _Vagrant:  https://www.vagrantup.com/\n.. _Vagrant_download:  https://releases.hashicorp.com/vagrant/\n\n* BIG, BIG MAYBE:  vagrant-libvirt_ plugin (QEMU provider for Vagrant)\n\n  - Please refer to their page for version information, installation\n    instructions and dependencies.\n\n.. _vagrant-libvirt:  https://github.com/vagrant-libvirt/vagrant-libvirt\n\nEven though Packer supports QEMU as an officially-supported provider, Vagrant,\nfor some reason, does not.  The 3rd-party plugin named "vagrant-libvirt"\nprovides the missing QEMU support for Vagrant.  We are unable at this time to\nverify this fact due to the following errors encountered while trying to run\n"vagrant up"::\n\n    Error while connecting to libvirt: Error making a connection to libvirt URI qemu:///system?no_verify=1&keyfile=/home/whoa/.ssh/id_rsa:\n    Call to virConnectOpen failed: Failed to connect socket to \'/var/run/libvirt/libvirt-sock\': No such file or directory\n\nIt may be possible to correct this error by installing the\n`libvirt-daemon-system` package on Debian.\n\n\nTODO Items\n~~~~~~~~~~\n\n* Get proper templating working for the preseed and vagrant files\n* [preseed debian] Find out if partman-crypto will allow passphrase-crypted\n* [preseed debian] Skip past "Force UEFI Install" installer prompt\n* [template qemu] Correct generated filenames for images to end in .img{,.gz}\n* [template vagrant] Dump checksum into vagrant manifest file + convert to JSON\n\n\nUsing Packer Templates\n----------------------\n\nYou must first generate templates using::\n\n    ./script/generate_templates.sh\n\nThen, you may run them using one or more of the following::\n\n    packer [PACKER_OPTIONS] PACKER_TEMPLATE\n\nExamples::\n\n    packer build -only=vbox template/debian/10_buster/base.json\n\n    packer build -only=qemu -var=headless=true -var=version=1.0.0 -var=vm_name=test \\\n        template/debian/10_buster/base.json\n\n    packer build -var-file=variables.json template/debian/10_buster/base.json\n\nContents of example file ``variables.json`` used above::\n\n    {\n      "headless": true,\n      "version": "1.0.0",\n      "vm_name": "test"\n    }\n\n\nUsing Vagrant Box Files\n-----------------------\n\nA Vagrant box file is actually a regular gzipped tar archive containing...\n\n* box.ovf - Open Virtualization Format XML descriptor file\n* nameofmachine-disk1.vmdk - a virtual hard drive image file\n* Vagrantfile - derived from \'Vagrantfile.template\'\n* metadata.json - containing just \'{ "provider": "virtualbox" }\'\n\nAn OVA file is actually a regular tar archive containing identical copies of\nthe first 2 files that you would normally see in a Vagrant box file (but the\nOVF file may be named nameofmachine.ovf and it *must* be the first file or\nVirtualBox will get confused).\n\nTo create and use a Vagrant box file without a dedicated Vagrantfile::\n\n    packer build -only=vbox -var=version=1.0.0 template/debian/10_buster/base.json\n    vagrant box add myname/buster \\\n        build/2038-01-19-03-14/base-buster-1.0.0.virtualbox.box\n    vagrant init myname/buster\n    vagrant up\n    vagrant ssh\n    ...\n    vagrant destroy\n\nIn order to version things and self-host the box files, you will need to create\na JSON file containing the following::\n\n    {\n      "name": "base-buster",\n      "description": "Base box for 64-bit x86 Debian Buster 10.x",\n      "versions": [\n        {\n          "version": "1.0.0",\n          "providers": [\n            {\n              "name": "virtualbox",\n              "url": "http://server/vm/base-buster/base-buster-1.0.0-virtualbox.box",\n              "checksum_type": "sha256",\n              "checksum": "THESHA256SUMOFTHEBOXFILE"\n            }\n          ]\n        }\n      ]\n    }\n\nSHA256 hashes are the largest ones that Vagrant supports, currently.\n\nThen, simply make sure you point your Vagrantfile at this version payload::\n\n    Vagrant.configure(\'2\') do |config|\n      config.vm.box = \'base-buster\'\n      config.vm.box_url = \'http://server/vm/base-buster/base-buster.json\'\n\n      config.vm.synced_folder \'.\', \'/vagrant\', disabled: true\n    end\n\nNOTE:  You must ensure you disable the synched folder stuff above or you will\nencounter the following error::\n\n    Vagrant was unable to mount VirtualBox shared folders. This is usually\n    because the filesystem "vboxsf" is not available. This filesystem is\n    made available via the VirtualBox Guest Additions and kernel module.\n    Please verify that these guest additions are properly installed in the\n    guest. This is not a bug in Vagrant and is usually caused by a faulty\n    Vagrant box. For context, the command attempted was:\n\n    mount -t vboxsf -o uid=1000,gid=1000 vagrant /vagrant\n\n    The error output from the command was:\n\n    mount: unknown filesystem type \'vboxsf\'\n\n* https://github.com/hollodotme/Helpers/blob/master/Tutorials/vagrant/self-hosted-vagrant-boxes-with-versioning.md\n* http://blog.el-chavez.me/2015/01/31/custom-vagrant-cloud-host/\n* https://www.nopsec.com/news-and-resources/blog/2015/3/27/private-vagrant-box-hosting-easy-versioning/\n\n\nMaking Bootable Drives\n----------------------\n\nFor best results, you should use the Packer QEMU "kvm" builder when trying to\ncreate bootable images to be used on real hardware.  This allows the use of the\n"raw" block device format which is ideal for writing directly directly to USB\nand SATA drives.  Alternately, you may use "qemu-img convert" or "vbox-img\nconvert" to convert an exiting image in another format to raw mode::\n\n    packer build -only=qemu template/debian/10_buster/base.json\n    zcat build/2038-01-19-03-14/base-buster.raw.gz | dd of=/dev/sdz bs=4M\n\n... Or, if you just want to "boot" it::\n\n    qemu-system-x86_64 -m 512M -machine type=pc,accel=kvm \\\n        build/2038-01-19-03-14/base-buster.raw\n\n\nOverriding Local ISO Cache Location\n-----------------------------------\n\nYou may override the default directory used instead of \'./packer_cache\' by\nspecifying it with the environment variable \'PACKER_CACHE_DIR\'::\n\n    PACKER_CACHE_DIR=/tmp packer build -only=vbox \\\n        template/debian/10_buster/base.json\n\nYou must *always* specify the PACKER_CACHE_DIR when using the provided\ntemplates due to a problem in packer where the PACKER_CACHE_DIR is not provided\nto the template if one was not provided;  In this case, it will fall back to\nthe default value of "./packer_cache".\n\n\nOverriding Local VM Cache Location\n----------------------------------\n\n::\n\n    vboxmanage setproperty machinefolder ${HOME}/vm\n\n\nDisabling Hashicorp Checkpoint Version Checks\n---------------------------------------------\n\nBoth Packer and Vagrant will contact Hashicorp with some anonymous information\neach time it is being run for the purposes of announcing new versions and other\nalerts.  If you would prefer to disable this feature, simply add the following\nenvironment variables::\n\n    CHECKPOINT_DISABLE=1\n    VAGRANT_CHECKPOINT_DISABLE=1\n\n* https://checkpoint.hashicorp.com/\n* https://github.com/hashicorp/go-checkpoint\n* https://docs.vagrantup.com/v2/other/environmental-variables.html\n\n\nUEFI Booting on VirtualBox\n--------------------------\n\nIt isn\'t necessary to perform this step when running on real hardware, however,\nVirtualBox (4.3.28) seems to have a problem if you don\'t perform this step.\n\n* http://ubuntuforums.org/showthread.php?t=2172199&p=13104689#post13104689\n\nTo examine the actual contents of the file after editing it::\n\n    hexdump /boot/efi/startup.nsh\n\n\nUsing the EFI Shell Editor\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTo enter the UEFI shell text editor from the UEFI prompt::\n\n    edit startup.nsh\n\nType in the stuff to add to the file (the path to the UEFI blob)::\n\n    FS0:\\EFI\\debian\\grubx64.efi\n\nTo exit the UEFI shell text editor::\n\n    ^S\n    ^Q\n\nHex Result::\n\n    0000000 feff 0046 0053 0030 003a 005c 0045 0046\n    0000010 0049 005c 0064 0065 0062 0069 0061 006e\n    0000020 005c 0067 0072 0075 0062 0078 0036 0034\n    0000030 002e 0065 0066 0069\n    0000038\n\n\nUsing Any Old \'nix\' Text Editor\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTo populate the file in a similar manner to the UEFI Shell method above::\n\n    echo \'FS0:\\EFI\\debian\\grubx64.efi\' > /boot/efi/startup.nsh\n\nHex Result::\n\n    0000000 5346 3a30 455c 4946 645c 6265 6169 5c6e\n    0000010 7267 6275 3678 2e34 6665 0a69\n    000001c\n\n\nServing Local Files via HTTP\n----------------------------\n\n::\n\n    ./script/sow.py\n\n\nCaching Debian/Ubuntu Packages\n------------------------------\n\nIf you wish to speed up fetching lots of Debian and/or Ubuntu packages, you\nshould probably install "apt-cacher-ng" on a machine and then add the following\nto each machine that should use the new cache::\n\n    echo "Acquire::http::Proxy \'http://localhost:3142\';" >>\\\n        /etc/apt/apt.conf.d/99apt-cacher-ng\n\nYou must re-run "apt-cache update" each time you add or remove a proxy.  If you\npopulate the "d-i http/proxy string" value in your preseed file, all this stuff\nwill have been done for you already.\n\n\nPreseed Documentation\n---------------------\n\n* https://www.debian.org/releases/stable/amd64/\n* https://help.ubuntu.com/lts/installation-guide/amd64/index.html\n\n\nOther\n-----\n\n* http://www.preining.info/blog/2014/05/usb-stick-tails-systemrescuecd/\n\n* https://5pi.de/2015/03/13/building-aws-amis-from-scratch/\n* http://www.scalehorizontally.com/2013/02/24/introduction-to-cloud-init/\n* https://julien.danjou.info/blog/2013/cloud-init-utils-debian\n* http://thornelabs.net/2014/04/07/create-a-kvm-based-debian-7-openstack-cloud-image.html\n\n* http://blog.codeship.com/packer-ansible/\n* https://servercheck.in/blog/server-vm-images-ansible-and-packer\n\n* http://ariya.ofilabs.com/2013/11/using-packer-to-create-vagrant-boxes.html\n* http://blog.codeship.io/2013/11/07/building-vagrant-machines-with-packer.html\n* https://groups.google.com/forum/#!msg/packer-tool/4lB4OqhILF8/NPoMYeew0sEJ\n* http://pretengineer.com/post/packer-vagrant-infra/\n* http://stackoverflow.com/questions/13065576/override-vagrant-configuration-settings-locally-per-dev\n\n* https://djaodjin.com/blog/deploying-on-ec2-with-ansible.blog.html\n* http://jackstromberg.com/2012/12/how-to-export-a-vm-from-amazon-ec2-to-vmware-on-premise/\n* https://docs.aws.amazon.com/cli/latest/reference/ec2/create-instance-export-task.html\n\n* https://github.com/jpadilla/juicebox\n* https://github.com/boxcutter/ubuntu\n* https://github.com/katzj/ami-creator\n\n\nWhy did you use the Ubuntu Server installer to create desktop systems?\n----------------------------------------------------------------------\n\n* http://askubuntu.com/questions/467804/preseeding-does-not-work-properly-in-ubuntu-14-04\n* https://wiki.ubuntu.com/UbiquityAutomation\n\n\nBuilding Windows VMs\n--------------------\n\n* http://www.hurryupandwait.io/blog/creating-windows-base-images-for-virtualbox-and-hyper-v-using-packer-boxstarter-and-vagrant\n* https://github.com/mwrock/packer-template\n* https://github.com/joefitzgerald/packer-windows\n* https://gist.github.com/joefitzgerald/8203265\n* https://github.com/mefellows/packer-community-templates\n* https://blogs.technet.microsoft.com/secguide/2016/01/21/lgpo-exe-local-group-policy-object-utility-v1-0/\n* https://github.com/rgl/packer-provisioner-windows-update\n\n\nUsing a Headless Server\n-----------------------\n\nIf you are using these scripts on a "headless" server (i.e.:  no GUI), you must\nset the "headless" variable to "true" or you will encounter the following\nerror::\n\n    ...\n    ==> virtualbox: Starting the virtual machine...\n    ==> virtualbox: Error starting VM: VBoxManage error: VBoxManage: error: The virtual machine \'base-buster\' has terminated unexpectedly during startup because of signal 6\n    ==> virtualbox: VBoxManage: error: Details: code NS_ERROR_FAILURE (0x80004005), component MachineWrap, interface IMachine\n    ...\n\n\nOffical ISO Files\n-----------------\n\n\nDebian_\n~~~~~~\n\n.. _Debian:  https://www.debian.org/\n\n* Testing;  http://cdimage.debian.org/cdimage/weekly-builds/amd64/iso-cd/\n* Stable;  http://cdimage.debian.org/cdimage/release/current/amd64/iso-cd/\n* Oldstable;  http://cdimage.debian.org/cdimage/archive/latest-oldstable/amd64/iso-cd/\n\n\nUbuntu_\n~~~~~~\n\n.. _Ubuntu:  https://www.ubuntu.com/\n\n* Netboot;  http://cdimage.ubuntu.com/netboot/\n* Released;  http://releases.ubuntu.com/\n* Pending;  http://cdimage.ubuntu.com/ubuntu-server/daily/current/\n\n\nDistro Release Names\n--------------------\n\n\nDebian_releases_\n~~~~~~~~~~~~~~~\n\n.. _Debian_releases:  https://en.wikipedia.org/wiki/Debian_version_history#Release_table\n\n* Bookworm (12.x);  released on 2023?-??-??, supported until 2028?-??-01\n* Bullseye (11.x);  released on 2021?-??-??, supported until 2026?-??-01\n* Buster (10.x);  released on 2019-07-06, supported until 2024-??-01\n* Stretch (9.x);  released on 2017-06-18, supported until 2022-06-01\n* Jessie (8.x);  released on 2015-04-26, supported until 2020-06-30\n\n\nUbuntu_releases_\n~~~~~~~~~~~~~~~\n\n.. _Ubuntu_releases:  https://en.wikipedia.org/wiki/Ubuntu_version_history#Table_of_versions\n\n* Focal Fossa (20.04.x LTS);  releases on 2020-04-23?, supported until 2025-04-01\n* Eoan Ermine (19.10.x);  released on 2019-10-17, supported until 2020-07-01\n* Disco Dingo (19.04.x);  released on 2019-04-18, supported until 2020-01-01\n* Bionic Beaver (18.04.x LTS);  released on 2018-04-26, supported until 2023-04-01\n* Xenial Xerus (16.04.x LTS);  released on 2016-04-21, supported until 2021-04-01\n\n(LTS releases are usually supported for 5 years and non-LTS releases are\nusually supported for 9 to 11 months)\n'