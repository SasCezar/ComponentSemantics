b'[![Gem Version](https://badge.fury.io/rb/vagrant-butcher.png)](http://badge.fury.io/rb/vagrant-butcher)\n[![Build Status](https://travis-ci.org/cassianoleal/vagrant-butcher.png)](https://travis-ci.org/cassianoleal/vagrant-butcher)\n[![Code Climate](https://codeclimate.com/github/cassianoleal/vagrant-butcher.png)](https://codeclimate.com/github/cassianoleal/vagrant-butcher)\n\n# Vagrant::Butcher\n\nIf you\'re using Vagrant with the Chef-Client provisioner it creates a client and a node on the Chef server when the VM spins up.\n\nThis plugin will automatically get rid of that cruft for you when you destroy the VM.\n\n## <a id="install"></a>Installation\n\nInstall this plugin using the Vagrant command line:\n\n    $ vagrant plugin install vagrant-butcher\n\n## <a id=\'usage\'></a>Usage\n\nThe plugin is loaded automatically once installed.\n\n## <a id=\'configuration\'></a>Configuration\n\nFor most cases, the plugin shouldn\'t need any configuration. However, there are a few options that can be set. The options are all set in the `Vagrantfile` in the format:\n\n```ruby\nVagrant.configure("2") do |config|\n  ...\n  config.butcher.<option> = <value>\n  ...\nend\n```\n\n| Option           | Default Value            | Purpose                                                                |\n| ---------------- | ------------------------ | ---------------------------------------------------------------------- |\n| `enabled`        | `true`                   | Defines whether `node` and `client` should be deleted                  |\n| `guest_key_path` | `\'/etc/chef/client.pem\'` | Location of the client key in the guest VM                             |\n| `verify_ssl`     | `true`                   | If set to false, does not verify Chef\'s host key                       |\n| `proxy`          | `nil`                    | Inform the URL of a proxy server between your host and the Chef Server |\n| `client_name`    | Guest\'s node name        | Inform a client name to override the plugin\'s default behaviour        |\n| `client_key`     | Guest\'s client key       | Point to a local `.pem` key file that matches the `client_name`        |\n\n## <a id=\'caveats\'></a>Caveats\n\n* So far this has only been tested and confirmed to run with the VirtualBox and Rackspace provisioners. It should work with others, but if you run into issues please file a bug.\n* The default `.` -> `/vagrant` shared folder should be mounted.\n* `verify_ssl` is enabled by default. You might want to disable that if, for example, you run your own Chef server with a self-signed cert. Check [here](#configuration) to see how.\n\n## Changelog\n\n### 2.3.0\n\n* Fix logger spam caused by Hashie used in Ridley (see [issue](https://github.com/intridea/hashie/issues/394))\n\n### 2.2.0\n\n* Removed compatibility with Vagrant < 1.5\n* Fixes an issue with recent Vagrant versions where the butcher sequence would never run\n* Sets default `guest_key_path` depending on OS\n* Tested and confirmed working on Windows and Linux\n\n### 2.0.0\n\n* No more option to point to `knife.rb`. Data is retrieved from the `Vagrantfile`\'s `chef_client` provisioner\n* `chef` is no longer a requirement (no more `json` conflicts)\n* [Configuration](#configuration) items were added to point to custom client name and key\n* It\'s possible to disable the plugin by setting the `enabled` flag to `false` in the Vagrantfile.\n\nSee [Configuration](#configuration) for all possible customisations.\n\n### 1.1.0\n\n* :auto was added as an optional value for knife_config_file\n\n### 1.0.1\n\n* Support for Vagrant 1.2\n\n### 1.0.0\n\n* Support for Vagrant 1.x (it\'s been tested on 1.1.4, but should work on previous minor releases) -- if you\'re using a pre-1.0 Vagrant release, stick to vagrant-butcher 0.0.3.\n* [Configuration](#usage) change.\n* [Installation](#install) via `vagrant plugin` only.\n* Provider-independent. _[Read more](#caveats)_\n\n### 0.0.3\n\n* Uses chef.node_name if set. Otherwise, fall back to vm.host_name (as before), or vm.box. -- _Kudos to [pikesley](https://github.com/pikesley)_.\n\n# Authors\n\n* Cassiano Leal (<cassianoleal@gmail.com>)\n* Daniel Searles ([https://github.com/squaresurf]())\n\n## Contributing\n\n1. Fork it\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am \'Add some feature\'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create new Pull Request\n'