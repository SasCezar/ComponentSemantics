b"Vagrant LAMP\n============\n[![Gitter](https://badges.gitter.im/r8/vagrant-lamp.svg)](https://gitter.im/r8/vagrant-lamp?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\n\nMy default LAMP development stack configuration for Vagrant.\n\nRequrements\n-----------\n\n* Virtualbox\n* Vagrant >= 1.7.0\n* vagrant-omnibus plugin\n\nInstallation:\n-------------\n\nDownload and install [VirtualBox](http://www.virtualbox.org/)\n\nDownload and install [vagrant](http://vagrantup.com/)\n\nInstall [vagrant-omnibus](https://github.com/chef/vagrant-omnibus) plugin\n\n    $ vagrant plugin install vagrant-omnibus\n\nClone this repository\n\nGo to the repository folder and launch the box\n\n    $ cd [repo]\n    $ vagrant up\n\n\nWhat's inside:\n--------------\n\nInstalled software:\n\n* Apache\n* MySQL\n* Redis\n* php\n* phpMyAdmin\n* Xdebug with Webgrind\n* zsh\n* git, subversion\n* mc, vim, screen, tmux, curl\n* [MailHog](http://github.com/mailhog/MailHog)\n* [Composer](http://getcomposer.org/)\n* Phing\n* Wordpress utils:\n    * [WP-Cli](http://wp-cli.org/)\n    * [wp2github.py](http://github.com/r8/wp2github.py)\n* Magento utils:\n    * [n98-magerun](https://github.com/netz98/n98-magerun)\n    * [modman](https://github.com/colinmollenhour/modman)\n    * [modgit](https://github.com/jreinke/modgit)\n* Node.js with following packages:\n    * [Grunt](http://gruntjs.com/)\n    * [Bower](http://bower.io)\n    * [LESS](http://lesscss.org)\n    * [CSS Lint](http://csslint.net)\n\nNotes\n-----\n\n### Apache virtual hosts\n\nYou can add virtual hosts to apache by adding a file to the `data_bags/sites`\ndirectory. The docroot of the new virtual host will be a directory within the\n`public/` folder matching the `host` you specified. Alternately you may specify\na docroot explicitly by adding a `docroot` key in the json file.\n\nDefault preconfigured host is `local.test`.\n\n### Accessing your hosts via your local web browser\n\nIn order to access vagrant hosts via your local browser you will need to edit your hosts file (`/private/etc/hosts` in Macs, `c:\\Windows\\System32\\Drivers\\etc\\hosts` in Windows, `/etc/hosts` in Linux).\nAll hosts should be mapped to `192.168.33.10`:\n\n    192.168.33.10 local.test someyourotherhost.test\n\n### MySQL\n\nThe guests local 3306 port is available on the host at port 33066. It is available on every domain. Logging in can be done with username=root, password=vagrant.\n\n### phpMyAdmin\n\nphpMyAdmin is available on every domain. For example:\n\n    http://local.test/phpmyadmin\n\n### XDebug and webgrind\n\nXDebug is configured to connect back to your host machine on port 9000 when\nstarting a debug session from a browser running on your host. A debug session is\nstarted by either by appending GET variable XDEBUG_SESSION_START to the URL or setting XDEBUG cookie (if you use an\nintegrated debugger like Eclipse PDT it will do this for you).\n\nXDebug is also configured to generate cachegrind profile output on demand by\nadding GET variable XDEBUG_PROFILE to your URL. For example:\n\n    http://local.test/index.php?XDEBUG_PROFILE\n\nWebgrind is available on each domain. For example:\n\n    http://local.test/webgrind\n\nIt looks for cachegrind files in the `/tmp` directory, where xdebug leaves them.\n\n**Note:** xdebug uses the default value for xdebug.profiler_output_name, which\nmeans the output filename only includes the process ID as a unique part. This\nwas done to prevent a real need to clean out cachgrind files. If you wish to\nconfigure xdebug to always generate profiler output\n(`xdebug.profiler_enable = 1`), you *will* need to change this setting to\nsomething like\n\n    xdebug.profiler_output_name = cachegrind.out.%t.%p\n\nso your call to webgrind will not overwrite the file for the process that\nhappens to serve webgrind.\n\n### MailHog\n\nAll emails sent via local mail transport are intercepted by [MailHog](http://github.com/mailhog/MailHog). So normally no email would be delivered outside of the virtual machine. Instead you can check messages using web frontend for MailHog, which is running on port 8025 and also available on every domain:\n\n    http://local.test:8025\n\n### Composer\n\nComposer binary is installed globally (to `/usr/local/bin`), so you can simply call `composer` from any directory.\n"