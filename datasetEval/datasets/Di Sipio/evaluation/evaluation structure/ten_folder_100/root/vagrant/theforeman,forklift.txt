b'<img src="https://raw.githubusercontent.com/theforeman/forklift/master/docs/forklift.png" height="100px">\n\n# Forklift: lifting Foreman into your environment\n\nForklift provides tools to create Foreman/Katello environments for development, testing and production configurations. Whether you are a developer wanting an environment to write code, or a user wanting to spin up the latest production environment for deployment or evaluation Forklift has you covered.\n\n * [Using Forklift](#using-forklift)\n   - [Requirements](#requirements)\n   - [Quickstart](#quickstart)\n   - [Poor man\'s DNS a.k.a /etc/hosts](#poor-mans-dns-aka-etchosts)\n   - [Adding Custom Boxes](#adding-custom-boxes)\n   - [Customize Deployment Settings](#customize-deployment-settings)\n   - [Post Install Playbooks](#post-install-playbooks)\n * [Production Environments](docs/production.md)\n * [Development Environments](docs/development.md)\n * [Testing Environments](docs/testing.md)\n * [Provisioning environment](docs/provision.md)\n * [Plugins](docs/plugins.md)\n * [Using Forklift as a Library](docs/library.md)\n * [Troubleshooting](docs/troubleshooting.md)\n\n## Using Forklift\n\n### Requirements\n\n* Vagrant - 1.8+ - Both the VirtualBox and Libvirt providers are tested\n* Ansible - 2.7+\n* [Vagrant Libvirt provider plugin](https://github.com/vagrant-libvirt/vagrant-libvirt) (if using Libvirt)\n* Virtualization enabled in BIOS\n\nSee [Installing Vagrant](docs/vagrant.md) for installation instructions.\n\n### Quickstart\n\nThis will walk through the simplest path of spinning up a production test environment of a bleeding edge nightly installation assuming Vagrant and Libvirt are installed and configured.\n\n```\ngit clone https://github.com/theforeman/forklift.git\ncd forklift\nvagrant up centos7-foreman-nightly\n```\n\nThe same can be quickly done for a development environment where GITHUB_NICK is your GitHub username:\n\n```\ngit clone https://github.com/theforeman/forklift.git\ncd forklift\ncp vagrant/boxes.d/99-local.yaml.example vagrant/boxes.d/99-local.yaml\nsed -i.bak "s/<REPLACE ME>/GITHUB_NICK/g" vagrant/boxes.d/99-local.yaml\nvagrant up centos7-katello-devel\n```\n\nIn case using vagrant is not desired, ansible playbooks and roles from this repo can be used separately. This is useful if an existing host should be used for the installation, e.g. a beaker machine. In order to deploy the devel environment on host test.example.com, the following needs to be done:\n\non test.example.com machine, where the dev env should be deployed\n```sh\nuseradd vagrant\necho "vagrant\tALL=(ALL)\tNOPASSWD: ALL" >> /etc/sudoers`\n```\n\nin forklift checkout\n```sh\necho "[devel]\\ntest.example.com" > inventories/local_inventory\nansible-playbook --private-key=~/.ssh/id_rsa --user root --inventory inventories/local_inventory --extra-vars katello_devel_github_username=katello playbooks/devel.yml\n```\n\nIn an example above, ansible was instructed to use specific private key (overriding the value from ansible.cfg), root user was set as ssh user and playbook variable was set, so that checkout will be made from katello user.\n\nOther playbooks from playbooks/ directory can be used similarly, though some might need more variables and investigating their parameters is recommended first.\n\nMore thorough guides can be found in the [docs folder](https://github.com/theforeman/forklift/tree/master/docs).\n\n### Credentials\n\nBy default `forklift` deploys Foreman with `admin`/`changeme` as username and password, please change this on production installs (either after the install, or by setting `foreman_installer_admin_password` during the initial deployment).\n\n### Poor man\'s DNS a.k.a /etc/hosts\n\nFor the multi-host setup, one of the easiest way of making the name\nresolution working with vagrant is using\n[vagrant-hostmanager](https://github.com/devopsgroup-io/vagrant-hostmanager). Forklift supports\nthis plugin by default. The only thing one needs to do is install the vagrant-hostmanager plugin:\n\n```\nvagrant plugin install vagrant-hostmanager\n```\n\nBy default, the boxes are set with `example.com` domain.\n\nIf you\'re using NetworkManager, [this advanced DNS configuration](https://m0dlx.com/blog/Automatic_DNS_updates_from_libvirt_guests.html)\nallows completely automated dns resolution using dnsmasq from host to guest and guest to guest.\n\nYou can disable hostmanager in `settings.yaml` by setting `hostmanager_enabled` option.\n\n### Adding Custom Boxes\n\nSometimes you want to spin up the same box type (e.g. centos7-katello-devel) from within the forklift directory. While this can be added to the Vagrantfile directly, updates to the forklift repository could wipe out your local changes. To help with this, you can define a custom box re-using the configuration within the Vagrantfile. To do so, create a `99-local.yaml` file in vagrant/boxes.d/. For example, to create a custom box on CentOS 7 with nightly and run the installers reset command:\n\n```\nmy-nightly-koji:\n  box: centos7\n  ansible:\n    playbook: playbooks/katello.yml\n    variables:\n      katello_repositories_environment: staging\n    verbose: vvv\n```\n\nOptions:\n\n| Option                   | Description                                                           |\n|:-------------------------|:----------------------------------------------------------------------|\n| box                      |  the \':name\' one of the defined boxes in the Vagrantfile |\n| bridged                  |  deploy on Libvirt with a bridged networking configuration, value of this parameter should be the interface of the host (e.g. em1) |\n| memory                   |  set the amount of memory (in megabytes) this box will consume |\n| cpus                     |  set the number of cpus this box will use |\n| hostname                 |  hostname to set on the box |\n| networks                 |  custom networks to use in addition to the management network |\n| disk_size                |  specify the size (in gigabytes) of the box\'s virtual disk. This only sets the virtual disk size, so you will still need to resize partitions and filesystems manually. |\n| add_disks                |  (libvirt provider only) specify additional libvirt volumes |\n| ansible                  |  updates the Ansible provisioner configuration including the playbook to be ran or any variables to set |\n| libvirt_options          |  sets Libvirt specific options, see [`config.rb` from `vagrant-libvirt`](https://github.com/vagrant-libvirt/vagrant-libvirt/blob/master/lib/vagrant-libvirt/config.rb) for possible options |\n| virtualbox_options       |  sets VirtualBox specific options |\n| rackspace_options        |  sets Rackspace specific options |\n| openstack_options        |  sets OpenStack specific options |\n| google_options           |  sets Google specific options |\n| domain                   |  forklift uses short name of your host + \'example.com\' as domain name for your boxes. You can use this option to override it. |\n| sshfs                    |  if you have vagrant-sshfs plugin, you can use sshfs to share folders between your host and guest. See an example below for details. |\n| nfs                      |  share folders between host and guest.  See an example below for details. |\n| autostart                |  set to true to automatically start when using \'vagrant up\' |\n| primary                  |  set the machine to be the default target of vagrant commands such as \'vagrant ssh\' |\n| libvirt_qemu_use_session |  Use qemu session instead of system |\n\nEntirely new boxes can be created that do not orginate from a box defined within the Vagrantfile. For example, if you had access to a RHEL Vagrant box:\n\n```\nrhel7:\n  box_name: rhel7\n  shell: \'echo TEST\'\n  pty: true\n  libvirt: http://example.org/vagrant/rhel-7.box\n```\n\nExample with custom networking, static IP on custom libvirt network:\n\n```\nstatic:\n  box: centos7\n  hostname: mystatic.box.com\n  networks:\n    - type: \'private_network\'\n      options:\n        ip: 192.168.150.3\n        libvirt__network_name: lab-private\n        libvirt__iface_name: vnet2\n```\n\nExample with custom libvirt management network:\n\n```\nstatic:\n  box: centos7\n  hostname: mystatic.box.com\n  libvirt_options:\n    management_network_address: 172.23.99.0/24\n```\n\nExample with openstack provider:  \nYou will need to install vagrant openstack provider. For more information click [here](https://github.com/ggiamarchi/vagrant-openstack-provider).  \nDo not forget to set openstack API credentials.\nTo use openstack provider as default look [here](https://www.vagrantup.com/docs/providers/default.html).\n\n```\nopenstack-centos7:\n  image_name: \'Centos7\'\n  username: \'centos\'  #root by default\n  hostname: \'john-doe\'\n  openstack_flavor: \'m1.medium\'\n  sync_type: \'disabled\'\n```\n\n#### Using SSHFS to share folders\n\nYou will need to install [vagrant-sshfs](https://github.com/dustymabe/vagrant-sshfs) plugin. Make sure your host actually has sshfs installed.\nExample with sshfs mounting folder from guest to host:\n\n```\nwith-sshfs:\n  box: centos7\n  sshfs:\n    host_path: \'/some/host/path\'\n    guest_path: \'/some/guest/path\'\n    reverse: True\n```\n\nIf you want to mount in the opposite direction, just change `reverse` to `False` or remove it entirely.\n\nAdditonal options may be specified with using `options`.\n\n```\nwith-sshfs-options:\n  box: centos7\n  sshfs:\n    host_path: \'/some/host/path\'\n    guest_path: \'/some/guest/path\'\n    options: \'-o allow_other\'\n```\n\nExample with an additional disk (libvirt volume) presented as /dev/vdb in the vm:\n\n```\nstatic:\n  box: centos7\n  hostname: mystatic.box.com\n  add_disks:\n    - size: 100GiB\n      device: vdb\n      type: qcow2\n```\n\n#### Using NFS to share folders\n\nAn alternative to SSHFS is to share the folders with NFS.  It is slightly more work than SSHFS.  See the [Fedora developer documentation](https://developer.fedoraproject.org/tools/vagrant/vagrant-nfs.html) for information about how to configure an NFS server for Vagrant.\n\nThen create your box:\n\n```\nwith-nfs:\n  box: centos7\n  nfs:\n    host_path: \'/some/host/path\'\n    guest_path: \'/some/guest/path\'\n```\n\n### Customize Deployment Settings\n\nSome settings can be customized for the entirety of the deployment, they are:\n\n * memory: Memory to give boxes by default unless specified by a box\n * cpus: Number of CPUs to give boxes by default unless specified by a box\n * scale_memory: Factor to multiply memory of boxes that specify an own value\n * scale_cpus: Factor to multiply CPUs of boxes that specify an own value\n * sync_type: type of sync to use for transfer to the Vagrant box\n * mount_options: options for the vagrant-cachier plugin\n * domain: domain for your hosts, you can override this per-box by configuring your box with a domain directly\n * libvirt_options, virtualbox_options, rackspace_options, openstack_options, google_options: custom options for the various providers\n\nTo customize any of these, copy `settings.yaml.example` to `settings.yaml` and add, remove or update the ones you wish to change\'\n\n### Post Install Playbooks\n\nBoxes can be further customized by declaring Ansible playbooks to be run during provisioning. One or more playbooks can be specified and will be executed sequentially. An ignored directory can be used to put playbooks into \'user_playbooks\' without worrying about adding them during a git commit.\n\nAnsible roles may also be installed directly using the [`ansible-galaxy` command](http://docs.ansible.com/ansible/galaxy.html#the-ansible-galaxy-command-line-tool). These roles will be installed at `playbooks/galaxy_roles` and will be ignored by git. You may also specify roles in a `requirements.yml`, which you can use to install all desired roles with `ansible-galaxy install -r requirements.yml`\n\n```\nansible:\n  box: centos7-katello-nightly\n  ansible:\n    playbook:\n      - \'user_playbooks/vim.yml\'\n      - \'user_playbooks/zsh.yml\'\n```\n'