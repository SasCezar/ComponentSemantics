b'This builds Windows 2012R2/10/2016/2019 base Vagrant boxes using [Packer](https://www.packer.io/).\r\n\r\n\r\n# Usage\r\n\r\nInstall [VirtualBox](https://www.virtualbox.org/) (or [libvirt](https://libvirt.org/) on Linux based systems), [packer](https://www.packer.io/), [packer-provisioner-windows-update plugin](https://github.com/rgl/packer-provisioner-windows-update) and [vagrant](https://www.vagrantup.com/).\r\nIf you are using Windows and [Chocolatey](https://chocolatey.org/), you can install everything with:\r\n\r\n```batch\r\nchoco install -y virtualbox packer packer-provisioner-windows-update vagrant\r\n```\r\n\r\nTo build the base box based on the [Windows Server 2016 Evaluation](https://www.microsoft.com/en-us/evalcenter/evaluate-windows-server-2016) ISO run:\r\n\r\n```bash\r\nmake build-windows-2016-libvirt # or make build-windows-2016-virtualbox\r\n```\r\n\r\nIf you want to use your own ISO, you need to manually run the `packer` command, e.g.:\r\n\r\n```bash\r\npacker build -var iso_url=<ISO_URL> -var iso_checksum=<ISO_SHA256_CHECKSUM> -only=windows-2016-amd64-virtualbox windows-2016.json\r\n```\r\n\r\n**NB** if the build fails with something like `Post-processor failed: write /tmp/packer073329394/packer-windows-2016-amd64-virtualbox-1505050546-disk001.vmdk: no space left on device` you need to increase your temporary partition size or change its location [as described in the packer TMPDIR/TMP environment variable documentation](https://www.packer.io/docs/other/environment-variables.html#tmpdir).\r\n\r\n**NB** if you are having trouble building the base box due to floppy drive removal errors try adding, as a\r\nworkaround, `"post_shutdown_delay": "30s",` to the `windows-2016.json` file.\r\n\r\n**NB** the packer logs are saved inside a `*-packer.log` file (e.g. `windows-2016-amd64-libvirt-packer.log`).\r\n\r\nYou can then add the base box to your local vagrant installation with:\r\n\r\n```bash\r\nvagrant box add -f windows-2016-amd64 windows-2016-amd64-virtualbox.box\r\n```\r\n\r\nAnd test this base box by launching an example Vagrant environment:\r\n\r\n```bash\r\ncd example\r\nvagrant plugin install vagrant-windows-sysprep\r\nvagrant up --provider=virtualbox # or --provider=libvirt\r\n```\r\n\r\n**NB** if you are having trouble running the example with the vagrant libvirt provider check the libvirt logs in the host (e.g. `sudo tail -f /var/log/libvirt/qemu/example_default.log`) and in the guest (inside `C:\\Windows\\Temp`).\r\n\r\nThen test with a more complete example:\r\n\r\n```bash\r\ngit clone https://github.com/rgl/customize-windows-vagrant\r\ncd customize-windows-vagrant\r\nvagrant up --provider=virtualbox # or --provider=libvirt\r\n```\r\n\r\n\r\n## libvirt\r\n\r\nBuild the base box for the [vagrant-libvirt provider](https://github.com/vagrant-libvirt/vagrant-libvirt) with:\r\n\r\n```bash\r\nmake build-windows-2016-libvirt\r\n```\r\n\r\nIf you want to access the UI run:\r\n\r\n```bash\r\nspicy --uri \'spice+unix:///tmp/packer-windows-2016-amd64-libvirt-spice.socket\'\r\n```\r\n\r\n**NB** the packer template file defines `qemuargs` (which overrides the default packer qemu arguments), if you modify it, verify if you also need include the default packer qemu arguments (see [builder/qemu/step_run.go](https://github.com/hashicorp/packer/blob/master/builder/qemu/step_run.go) or start packer without `qemuargs` defined to see how it starts qemu).\r\n\r\n\r\n## VMware vSphere\r\n\r\nDownload `packer-builder-vsphere-iso` v2.3 from the [jetbrains-infra/packer-builder-vsphere releases page](https://github.com/jetbrains-infra/packer-builder-vsphere/releases) and place it inside your `~/.packer.d/plugins` directory (on Windows its at `%USERPROFILE%\\packer.d\\plugins` or `%APPDATA%\\packer.d\\plugins`).\r\n\r\nDownload the Windows Evaluation ISO (you can find the full iso URL in the [windows-2016-vsphere.json](windows-2016-vsphere.json) file) and place it inside the datastore as defined by the `vsphere_iso_url` user variable that is inside the [packer template](windows-2016-vsphere.json).\r\n\r\nDownload the [VMware Tools VMware-tools-windows-&lt;SAME_VERSION_AS_IN_PACKER_TEMPLATE&gt;.iso](https://packages.vmware.com/tools/releases/index.html) file into the datastore defined by the `vsphere_tools_iso_url` user variable that is inside the [packer template](windows-2016-vsphere.json).\r\n\r\nDownload [govc](https://github.com/vmware/govmomi/releases/latest) and place it inside your `/usr/local/bin` directory.\r\n\r\nInstall the vsphere vagrant plugin, set your vSphere details, and test the connection to vSphere:\r\n\r\n```bash\r\nsudo apt-get install build-essential patch ruby-dev zlib1g-dev liblzma-dev\r\nvagrant plugin install vagrant-vsphere\r\nvagrant plugin install vagrant-windows-sysprep\r\ncd example\r\ncat >secrets.sh <<\'EOF\'\r\nexport GOVC_INSECURE=\'1\'\r\nexport GOVC_HOST=\'vsphere.local\'\r\nexport GOVC_URL="https://$GOVC_HOST/sdk"\r\nexport GOVC_USERNAME=\'administrator@vsphere.local\'\r\nexport GOVC_PASSWORD=\'password\'\r\nexport GOVC_DATACENTER=\'Datacenter\'\r\nexport GOVC_CLUSTER=\'Cluster\'\r\nexport GOVC_DATASTORE=\'Datastore\'\r\nexport VSPHERE_ESXI_HOST=\'esxi.local\'\r\nexport VSPHERE_TEMPLATE_FOLDER=\'test/templates\'\r\n# NB the VSPHERE_TEMPLATE_NAME last segment MUST match the\r\n#    builders.vm_name property inside the packer tamplate.\r\nexport VSPHERE_TEMPLATE_NAME="$VSPHERE_TEMPLATE_FOLDER/windows-2019-amd64-vsphere"\r\nexport VSPHERE_TEMPLATE_IPATH="//$GOVC_DATACENTER/vm/$VSPHERE_TEMPLATE_NAME"\r\nexport VSPHERE_VM_FOLDER=\'test\'\r\nexport VSPHERE_VM_NAME=\'windows-2019-vagrant-example\'\r\nexport VSPHERE_VLAN=\'packer\'\r\nEOF\r\nsource secrets.sh\r\n# see https://github.com/vmware/govmomi/blob/master/govc/USAGE.md\r\ngovc version\r\ngovc about\r\ngovc datacenter.info # list datacenters\r\ngovc find # find all managed objects\r\n```\r\n\r\nBuild the base box with:\r\n\r\n```bash\r\nmake build-windows-2019-vsphere\r\n```\r\n\r\nTry the example guest:\r\n\r\n```bash\r\nsource secrets.sh\r\necho $VSPHERE_TEMPLATE_NAME # check if you are using the expected template.\r\nvagrant up --provider=vsphere\r\nvagrant ssh\r\nexit\r\nvagrant destroy -f\r\n```\r\n\r\n\r\n## WinRM access\r\n\r\nYou can connect to this machine through WinRM to run a remote command, e.g.:\r\n\r\n```batch\r\nwinrs -r:localhost:55985 -u:vagrant -p:vagrant "whoami /all"\r\n```\r\n\r\n**NB** the exact local WinRM port should be displayed by vagrant, in this case:\r\n\r\n```plain\r\n==> default: Forwarding ports...\r\n    default: 5985 (guest) => 55985 (host) (adapter 1)\r\n```\r\n\r\n\r\n# WinRM and UAC (aka LUA)\r\n\r\nThis base image uses WinRM. WinRM [poses several limitations on remote administration](http://www.hurryupandwait.io/blog/safely-running-windows-automation-operations-that-typically-fail-over-winrm-or-powershell-remoting),\r\nthose were worked around by disabling User Account Control (UAC) (aka [Limited User Account (LUA)](https://docs.microsoft.com/en-us/windows-hardware/customize/desktop/unattend/microsoft-windows-lua-settings-enablelua)) in `autounattend.xml`\r\nand [UAC remote restrictions](https://support.microsoft.com/en-us/help/951016/description-of-user-account-control-and-remote-restrictions-in-windows)\r\n in `winrm.ps1`.\r\n\r\nIf needed, you can later enable them with:\r\n\r\n```powershell\r\nSet-ItemProperty -Path \'HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\' -Name EnableLUA -Value 1\r\nSet-ItemProperty -Path \'HKLM:\\SOFTWARE\\WOW6432Node\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\' -Name EnableLUA -Value 1\r\nRemove-ItemProperty -Path \'HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\' -Name LocalAccountTokenFilterPolicy\r\nRestart-Computer\r\n```\r\n\r\nOr disable them with:\r\n\r\n```powershell\r\nSet-ItemProperty -Path \'HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\' -Name EnableLUA -Value 0\r\nSet-ItemProperty -Path \'HKLM:\\SOFTWARE\\WOW6432Node\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\' -Name EnableLUA -Value 0\r\nNew-ItemProperty -Path \'HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\' -Name LocalAccountTokenFilterPolicy -Value 1 -Force\r\nRestart-Computer\r\n```\r\n\r\n\r\n# Windows Unattended Installation\r\n\r\nWhen Windows boots from the installation media its Setup application loads the `a:\\autounattend.xml` file.\r\nIt contains all the answers needed to automatically install Windows without any human intervention. For\r\nmore information on how this works see [OEM Windows Deployment and Imaging Walkthrough](https://technet.microsoft.com/en-us/library/dn621895.aspx).\r\n\r\n`autounattend.xml` was generated with the Windows System Image Manager (WSIM) application that is\r\nincluded in the Windows Assessment and Deployment Kit (ADK).\r\n\r\n## Windows ADK\r\n\r\nTo create, edit and validate the `a:\\autounattend.xml` file you need to install the Deployment Tools that\r\nare included in the [Windows ADK](https://developer.microsoft.com/en-us/windows/hardware/windows-assessment-deployment-kit).\r\n\r\nIf you are having trouble installing the ADK (`adksetup`) or running WSIM (`imgmgr`) when your\r\nmachine is on a Windows Domain and the log has:\r\n\r\n```plain\r\nImage path is [\\??\\C:\\Program Files (x86)\\Windows Kits\\10\\Assessment and Deployment Kit\\Deployment Tools\\amd64\\DISM\\wimmount.sys]\r\nCould not acquire privileges; GLE=0x514\r\nReturning status 0x514\r\n```\r\n\r\nIt means there\'s a group policy that is restricting your effective permissions, for an workaround,\r\nrun `adksetup` and `imgmgr` from a `SYSTEM` shell, something like:\r\n\r\n```batch\r\npsexec -s -d -i cmd\r\nadksetup\r\ncd "C:\\Program Files (x86)\\Windows Kits\\10\\Assessment and Deployment Kit\\Deployment Tools\\WSIM"\r\nimgmgr\r\n```\r\n\r\nFor more information see [Error installing Windows ADK](http://blogs.catapultsystems.com/chsimmons/archive/2015/08/17/error-installing-windows-adk/).\r\n'