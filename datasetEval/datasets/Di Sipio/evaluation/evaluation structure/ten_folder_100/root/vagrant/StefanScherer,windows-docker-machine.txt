b'# Windows Docker Machine\n[![Build status](https://ci.appveyor.com/api/projects/status/f1i6eotfeghj22u3?svg=true)](https://ci.appveyor.com/project/StefanScherer/windows-docker-machine)\n\nThis Vagrant environment creates a "Docker Machine" to work on your MacBook with\nWindows containers. You can easily switch between Docker Desktop Linux\ncontainers and the Windows containers.\n\n[![Docker Context asciinema](https://asciinema.org/a/8b0NKbNvpKxJhGThjMYCsSNbI.svg)](https://asciinema.org/a/8b0NKbNvpKxJhGThjMYCsSNbI)\n\n## Many flavors\n\nThere are several versions of Windows Server. This is where you\ndecide which Vagrant VM should be started.\n\n* `2019-box` - Windows Server 2019 (10.0.17763) LTS Channel, ___***prebuilt from Vagrant Cloud***___\n* `2019` - Windows Server 2019 (10.0.17763) LTS Channel\n* `1903` - Windows Server, version 1903 (10.0.18362) Semi-Annual Channel\n* `1809` - Windows Server, version 1809 (10.0.17763) Semi-Annual Channel\n* `1803` - Windows Server, version 1803 (10.0.17134) Semi-Annual Channel\n* `2016-box` - Windows Server 2016 (10.0.14393) LTS channel, ___****prebuilt from Vagrant Cloud***___\n* `2016` - Windows Server 2016 (10.0.14393) LTS channel\n* `insider` - Windows Server Insider builds\n* `lcow` - Windows Server, version 1809 with LCOW enabled\n\nSo with a `vagrant up 2019` you spin up the LTS version, with `vagrant up 1903`\nthe 1903 semi-annual version and with `vagrant up insider` the Insider build.\n\nIf you don\'t want to run the **packer** step, you can run `vagrant up 2019-box`\nand get your box downloaded directly from [Vagrant Cloud](https://app.vagrantup.com/StefanScherer/boxes/windows_2019_docker).\n\nTested environments\n\n* macOS with Vagrant 2.2.4\n  * VMware Fusion Pro 11.0.3\n  * VirtualBox 5.2.26\n* Windows with Vagrant 2.2.4\n  * VMware Workstation Pro 15.0.3\n  * (VirtualBox see issue\n    [#2](https://github.com/StefanScherer/windows-docker-machine/issues/2))\n  * (Hyper-V see issue\n    [#1](https://github.com/StefanScherer/windows-docker-machine/issues/1))\n\n#### Before you begin\n\nFirst you need the Windows Server 2019 VM for your hypervisor. I prefer\n"Infrastructure as Code", so every build step is available on GitHub.\n\n![packer vagrant docker](images/packer_vagrant_docker.png)\n\n1. (optional) **packer build** to build a Vagrant base box, it\'s like a Docker image, but\n   for Vagrant VM\'s. \n2. **vagrant up** to create a running VM instance of Windows Server, either using the `packer build` or by using one of the pre-built vagrant cloud binaries: `2019-box` or `2016-box`.\n3. **docker run** to run Windows containers in that Windows VM\n\nStep 1 (building the headless Vagrant box) can be done with these steps:\n\n```bash\n$ git clone https://github.com/StefanScherer/packer-windows\n$ cd packer-windows\n\n$ packer build --only=vmware-iso windows_2019_docker.json\n$ vagrant box add windows_2019_docker windows_2019_docker_vmware.box\n\n- or -\n\n$ packer build --only=vmware-iso --var iso_url=~/path-to-1903.iso windows_server_1903_docker.json\n$ vagrant box add windows_server_1903_docker windows_server_1903_docker_vmware.box\n\n- or -\n\n$ packer build --only=vmware-iso --var iso_url=~/path-to-1809.iso windows_server_1809_docker.json\n$ vagrant box add windows_server_1809_docker windows_server_1809_docker_vmware.box\n\n- or -\n\n$ packer build --only=vmware-iso --var iso_url=~/path-to-1803.iso windows_server_1803_docker.json\n$ vagrant box add windows_server_1803_docker windows_server_1803_docker_vmware.box\n\n- or -\n\n$ packer build --only=vmware-iso --var iso_url=~/path-to-insider.iso windows_server_insider_docker.json\n$ vagrant box add windows_server_insider_docker windows_server_insider_vmware_docker.box\n\n- or -\n\n$ packer build --only=vmware-iso --var iso_url=~/path-to-2016.iso windows_2016_docker.json\n$ vagrant box add windows_2016_docker windows_2016_docker_vmware.box\n```\n\nOf course you can build only the box version you need. If you are using VirtualBox instead of VMware,\nswap `vmware` for `virtualbox` in the vagrant commands above.\n\n## Working on macOS\n\n### Create the Docker Machine\n\nSpin up the headless Vagrant box you created earlier with Windows Server 2019 and Docker EE\ninstalled. It will create the TLS certs and create a `2019-box` Docker context (new with Docker 19.03) and docker-machine configuration on your Mac.\n\n```bash\n$ git clone https://github.com/StefanScherer/windows-docker-machine\n$ cd windows-docker-machine\n$ vagrant up --provider vmware_desktop 2019-box\n\n- or -\n\n$ vagrant up --provider virtualbox 2019-box\n```\n\n### List your new Docker machine\n\n```bash\n$ docker context ls\nNAME                DESCRIPTION                               DOCKER ENDPOINT               KUBERNETES ENDPOINT                ORCHESTRATOR\n2019-box            2019-box windows-docker-machine           tcp://192.168.65.130:2376\ndefault *           Current DOCKER_HOST based configuration   unix:///var/run/docker.sock   https://localhost:6443 (default)   swarm\ndummy                                                         tcp://1.2.3.4:2375\n```\n\n### Switch to Windows containers\n\n```bash\n$ docker context use 2019-box\n```\n\nNow your Mac Docker client talks to the Windows Docker engine:\n\n```bash\n$ docker version\nClient: Docker Engine - Community\n Version:           19.03.0-beta1\n API version:       1.39 (downgraded from 1.40)\n Go version:        go1.12.1\n Git commit:        62240a9\n Built:             Thu Apr  4 19:15:32 2019\n OS/Arch:           darwin/amd64\n Experimental:      false\n\nServer: Docker Engine - Enterprise\n Engine:\n  Version:          18.09.5\n  API version:      1.39 (minimum version 1.24)\n  Go version:       go1.10.8\n  Git commit:       be4553c277\n  Built:            04/11/2019 06:43:04\n  OS/Arch:          windows/amd64\n  Experimental:     false\n```\n\n### Switch back to Docker Desktop\n\n```bash\n$ docker context use default\n```\n\nThis removes all DOCKER environment variables and you can use your Docker for\nMac installation.\n\n```bash\n$ docker version\nClient: Docker Engine - Community\n Version:           19.03.0-beta1\n API version:       1.39 (downgraded from 1.40)\n Go version:        go1.12.1\n Git commit:        62240a9\n Built:             Thu Apr  4 19:15:32 2019\n OS/Arch:           darwin/amd64\n Experimental:      false\n\nServer: Docker Engine - Community\n Engine:\n  Version:          18.09.2\n  API version:      1.39 (minimum version 1.12)\n  Go version:       go1.10.6\n  Git commit:       6247962\n  Built:            Sun Feb 10 04:13:06 2019\n  OS/Arch:          linux/amd64\n  Experimental:     false\n```\n\n### Mounting volumes from your Mac machine\n\nJust use `C:$(pwd)` to prepend a drive letter.\n\n```bash\n$ docker run -it -v C:$(pwd):C:$(pwd) mcr.microsoft.com/windows/servercore:1809 powershell\n```\n\nYes, this mounts the current directory through the Windows 2019 VM into the\nWindows Container.\n\n### Accessing published ports of Windows containers\n\nWhen you run Windows containers with publish ports then you can use the IP\naddress of the Windows Docker host to access it. The `docker context` command in combination with `jq` can give your the IP address with a command. Alternatively `docker-machine ip` also gives you the IP address.\n\nExample: Run the whoami Windows container and open it in the default macOS\nbrowser.\n\n```\n$ docker run -d -p 8080:8080 stefanscherer/whoami\n$ open http://$(docker context inspect 2019-box | jq -r \'.[0].Endpoints.docker.Host | .[6:] | .[:-5]\'):8080\n\n- or -\n\n$ open http://$(docker-machine ip 2019-box):8080\n```\n\n## Working on Windows\n\nSpin up the headless Vagrant box you created earlier with Windows Server 2019 and Docker EE\ninstalled. It will create the TLS certs and create a `2019-box` Docker context and docker-machine configuration on your Windows host.\n\nIf you haven\'t worked with `docker context` yet, create the `.docker` directory\nin your user profile manually.\n\n```powershell\nPS C:\\> mkdir $env:USERPROFILE\\.docker\n```\n\n### Create the Docker Machine\n\nChoose your hypervisor and start the VM\n\n```powershell\nPS C:\\> git clone https://github.com/StefanScherer/windows-docker-machine\nPS C:\\> cd windows-docker-machine\nPS C:\\> vagrant up --provider vmware_desktop 2019-box\n\n- or -\n\nPS C:\\> vagrant up --provider virtualbox 2019-box\n\n- or -\n\nPS C:\\> vagrant up --provider hyperv 2019-box\n```\n\nNotice: The provider `hyperv` does mount the volumes with SMB into the Windows Server 2019\nVM. It seems that there is a problem mounting that further into a Windows\ncontainer. The provisioning (creating the TLS certs and copying them back to the\nWindows host) will fail.\n\n### List your new Docker machine\n\n```powershell\nPS C:\\> docker context ls\nNAME                DESCRIPTION                               DOCKER ENDPOINT               KUBERNETES ENDPOINT                ORCHESTRATOR\n2019-box            2019-box windows-docker-machine           tcp://192.168.65.130:2376\ndefault *           Current DOCKER_HOST based configuration   unix:///var/run/docker.sock   https://localhost:6443 (default)   swarm\n```\n\n### Switch to Windows containers\n\n```powershell\nPS C:\\> docker context use 2019-box\n```\n\nNow your Windows Docker client talks to the Windows Docker engine:\n\n```powershell\nPS C:\\> docker version\nClient: Docker Engine - Community\n Version:           19.03.0-beta1\n API version:       1.39 (downgraded from 1.40)\n Go version:        go1.12.1\n Git commit:        62240a9\n Built:             Thu Apr  4 19:15:32 2019\n OS/Arch:           darwin/amd64\n Experimental:      false\n\nServer: Docker Engine - Enterprise\n Engine:\n  Version:          18.09.5\n  API version:      1.39 (minimum version 1.24)\n  Go version:       go1.10.8\n  Git commit:       be4553c277\n  Built:            04/11/2019 06:43:04\n  OS/Arch:          windows/amd64\n  Experimental:     false\n```\n\n### Switch to back to Docker for Windows\n\n```powershell\nPS C:\\> docker context use default\n```\n\nThis removes all DOCKER environment variables and you can use your Docker for\nWindows installation.\n\n```powershell\nPS C:\\> docker version\nClient: Docker Engine - Community\n Version:           19.03.0-beta1\n API version:       1.39 (downgraded from 1.40)\n Go version:        go1.12.1\n Git commit:        62240a9\n Built:             Thu Apr  4 19:15:32 2019\n OS/Arch:           darwin/amd64\n Experimental:      false\n\nServer: Docker Engine - Community\n Engine:\n  Version:          18.09.2\n  API version:      1.39 (minimum version 1.12)\n  Go version:       go1.10.6\n  Git commit:       6247962\n  Built:            Sun Feb 10 04:13:06 2019\n  OS/Arch:          linux/amd64\n  Experimental:     false\n\n```\n\n### Mounting volumes from your Windows machine\n\nJust use `$(pwd)` in PowerShell.\n\n```powershell\nPS C:\\> docker run -it -v "$(pwd):$(pwd)" mcr.microsoft.com/windows/servercore:1809 powershell\n```\n\nYes, this mounts the current directory through the Windows 2019 VM into the\nWindows Container.\n\n### Accessing published ports of Windows containers\n\nWhen you run Windows containers with publish ports then you can use the IP\naddress of the Windows Docker host to access it. The `docker context inspect` command can\ngive your the IP address with a command.\n\nExample: Run the whoami Windows container and open it in the default browser.\n\n```powershell\nPS C:\\> docker run -d -p 8080:8080 stefanscherer/whoami\nPS C:\\> start http://$(docker-machine ip 2019-box):8080\n```\n\n## Further commands\n\nHere is a list of `vagrant` and `docker` commands for typical actions.\nI use a `bash` function\n[`dm` in my dotfiles repo](https://github.com/StefanScherer/dotfiles/blob/4517216a56708acad5c2c0809f6bfafbd880aea3/.functions#L140-L182)\nto simplify all the tasks without switching to the Vagrant folder each time.\nThe `dm` started as a shortcut for `docker-machine` commands. I have [updated the function](https://github.com/StefanScherer/dotfiles/commit/2e771b023d97d9ec91fb20633204903c9f3b21eb#diff-e39ded4129d0efa321423853506c0116) to work with `docker context`, but rolled back for now as I prefer the environment variables to have different "contexts" per terminal tab.\n\n| dm shortcut                    | Vagrant / Docker command             |\n| ------------------------------ | ------------------------------------ |\n| `dm start 2019-box`            | `vagrant up --provider xxx 2019-box` |\n| `dm regenerate-certs 2019-box` | `vagrant provision 2019-box`         |\n| `dm stop 2019-box`             | `vagrant halt 2019-box`              |\n| `dm start 2019-box`            | `vagrant up 2019-box`                |\n| `dm rdp 2019-box`              | `vagrant rdp 2019-box`               |\n| `dm rm [-f] 2019-box`          | `vagrant destroy [-f] 2019-box`      |\n| `dm 2019-box`                  | `docker context use 2019-box` or <br/> `eval $(docker-machine env 2019-box)`       |\n| `dm ip 2019-box`               | <code>docker context inspect 2019-box &#124; jq -r \'.[0].Endpoints.docker.Host &#124; .[6:] &#124; .[:-5]\'</code> or <br/> `docker-machine ip 2019-box` |\n\n## Insider builds\n\nIf you want to follow the Windows Server Insider builds then this is for you. It\nis tested on a Mac with the following steps.\n\n1. Register at Windows Insider program https://insider.windows.com\n\n2. Download the Windows Server ISO from\n   https://www.microsoft.com/en-us/software-download/windowsinsiderpreviewserver?wa=wsignin1.0\n\n3. Build the Vagrant basebox with Packer\n\n```bash\ngit clone https://github.com/StefanScherer/packer-windows\ncd packer-windows\npacker build --only=vmware-iso --var iso_url=~/Downloads/Windows_InsiderPreview_Server_en-us_18356.iso windows_server_insider_docker.json\nvagrant box add windows_server_insider_docker windows_server_insider_docker_vmware.box\n```\n\nThen spin up your Insider machine with\n\n```\nvagrant up insider\n```\n\nThis Vagrant box has Docker installed and the following base\nimages are already pulled from Docker Hub:\n\n* mcr.microsoft.com/windows/servercore/insider\n* mcr.microsoft.com/windows/nanoserver/insider\n\n## LCOW\n\nYou can try the Linux Container on Windows feature in a separate machine `lcow`.\nIt is preconfigured to use the Windows Server, version 1903. But you can\nalso use Windows Insider Server Preview as base box.\n\n```\nvagrant up lcow\ndocker context use lcow\ndocker run alpine uname -a\n```\n'