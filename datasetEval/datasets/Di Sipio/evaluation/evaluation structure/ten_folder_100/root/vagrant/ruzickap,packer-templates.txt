b'# Packer Templates mainly for the Vagrant [libvirt][libvirt] and [VirtualBox][virtualbox]\n\n## Customized+Clean/Minimal boxes for [libvirt][libvirt] and [VirtualBox][virtualbox]\n\n[libvirt]: https://github.com/vagrant-libvirt/vagrant-libvirt\n[virtualbox]: https://www.vagrantup.com/docs/virtualbox/\n\n[![Build Status](https://travis-ci.com/ruzickap/packer-templates.svg?branch=master)](https://travis-ci.com/ruzickap/packer-templates)\n[![Build Status](https://gitlab.com/ruzickap/packer-templates/badges/master/pipeline.svg)](https://gitlab.com/ruzickap/packer-templates/pipelines)\n\n---\n\n### GitHub repository for bug reports or feature requests\n\n* [https://github.com/ruzickap/packer-templates/](https://github.com/ruzickap/packer-templates/)\n\n### Vagrant Cloud repository for the images build by these templates\n\n* [https://app.vagrantup.com/peru](https://app.vagrantup.com/peru)\n\n## Requirements\n\n* [QEMU-KVM](https://en.wikibooks.org/wiki/QEMU/Installing_QEMU)\n* [Vagrant](https://www.vagrantup.com/downloads.html)\n* [Vagrant Libvirt Plugin](https://github.com/pradels/vagrant-libvirt#installation)\n* [VirtualBox](https://www.virtualbox.org/)\n\n## Login Credentials\n\n(root/Administrator password is "vagrant" or is not set )\n\n* Username: vagrant\n* Password: vagrant\n\n## VM Specifications\n\nDrivers / Devices added for the VMs for specific providers.\n\n### Libvirt\n\n* VirtIO dynamic Hard Disk (up to 50 GiB)\n* VirtIO Network Interface\n* QXL Video Card (SPICE display)\n* Channel Device (com.redhat.spice.0)\n\n### VirtualBox\n\n* SATA Disk\n\n## Configuration\n\n### Minimal Linux installation\n\n* en_US.UTF-8\n* keymap for standard US keyboard\n* UTC timezone\n* NTP enabled (default configuration)\n* full-upgrade\n* unattended-upgrades\n* /dev/vda1 mounted on / using ext4/xfs filesystem (all files in one partition)\n* no swap\n\n### Customized Linux installation\n\nSome of the Linux [images](https://app.vagrantup.com/boxes/search?utf8=%E2%9C%93&sort=downloads&provider=&q=peru/my)/templates\nbegins with "my_" - they are preconfigured with the following:\n\n* there are usually many customization depends on distribution - all are\n  described in Ansible [playbook](https://github.com/ruzickap/packer-templates/tree/master/ansible).\n* added packages: see the [Common list](https://github.com/ruzickap/ansible-role-my_common_defaults/blob/master/vars/main.yml)\n  and [Debian list](https://github.com/ruzickap/ansible-role-my_common_defaults/blob/master/vars/Debian.yml)\n  or [CentOS list](https://github.com/ruzickap/ansible-role-my_common_defaults/blob/master/vars/RedHat.yml)\n* mouse disabled in Midnight Commander + other MC customizations\n* preconfigured snmpd, vim, screen\n* logrotate using xz instead of gzip\n* logwatch is running once per week instead of once per day\n* sshd is using only the strong algorithms\n* sysstat (sar) is running every minute instead of every 5 minutes\n\n### Minimal Windows installation\n\n* UTC timezone\n* IEHarden disabled\n* Home Page set to "about:blank"\n* First Run Wizard disabled\n* Firewall allows Remote Desktop connections\n* AutoActivation skipped\n* DoNotOpenInitialConfigurationTasksAtLogon set to true\n* WinRM (SSL) enabled\n* New Network Window turned off\n* Administrator account enabled\n* EnableLUA\n* Windows image was finalized using `sysprep`: [unattended.xml](https://github.com/ruzickap/packer-templates/blob/master/scripts/win-common/unattend.xml)\n\n### Customized Windows 10 installation\n\n* added packages: see the [common_windows_packages](https://github.com/ruzickap/ansible-role-my_common_defaults/blob/master/vars/Windows.yml)\n* Additional configuration done via Ansible playbook [Win32NT-common.yml](https://github.com/ruzickap/ansible-role-my_common_defaults/blob/master/tasks/Win32NT-common.yml)\n\n### Additional Drivers installed for libvirt boxes - [VirtIO](https://fedoraproject.org/wiki/Windows_Virtio_Drivers)\n\nInstalled during installation:\n\n* NetKVM: VirtIO Network driver\n* qxldod: QXL graphics driver\n* viostor: VirtIO Block driver (VirtIO SCSI controller driver)\n\nInstalled components via Ansible playbook [win-simple.yml](https://github.com/ruzickap/packer-templates/blob/master/ansible/win-simple.yml)\nfor Windows:\n\n* vioscsi: Support for VirtIO SCSI pass-through controller\n* Balloon: VirtIO Memory Balloon driver\n* viorng: VirtIO RNG Device driver\n* vioser: VirtIO Serial Driver\n* vioinput: VirtIO Input Driver - support for new QEMU input devices\n  virtio-keyboard-pci, virtio-mouse-pci, virtio-tablet-pci,\n  virtio-input-host-pci\n* pvpanic: QEMU pvpanic device driver\n* qemu-ga: [Qemu Guest Agent](http://wiki.libvirt.org/page/Qemu_guest_agent)\n\n### Additional Drivers installed for VirtualBox boxes\n\n* VirtualBox Guest Additions\n\n## How to build images remotely\n\nIf you want to build the images yourself you will need password-less ssh access\nto the latest Fedora server and locally installed Ansible. The server should\nnot have IPs from this range `192.168.121.0/24` - this is\nused by Vagrant + libvirt by default.\n\nThen you just need to modify the `REMOTE_IP` and `REMOTE_USER`\nin `build_remote_ssh.sh` file.\n\nThe `build_remote_ssh.sh` script will connect to your Fedora server, downloads\nnecessary packages (initiate reboot if necessary for kernel update) and start\nbuilding the images using Packer.\nIt will also test the newly created images by Vagrant.\nThe whole procedure will take several hours.\nYou can check the progress by sshing to the server and checking the log files\nin `/tmp/` directory.\n\n## How to build images locally\n\nIf you have necessary software installed+configured on your local machine you\ncan use the following commands to build the images.\nYou can build the images using the build script [build.sh](build.sh) or directly\nwith Packer.\n\n### Build process with the [build.sh](build.sh) script\n\nReal examples can be found here: [https://gitlab.com/ruzickap/packer-templates/pipelines](https://gitlab.com/ruzickap/packer-templates/pipelines)\n\n* Ubuntu:\n\n```bash\n# Ubuntu Server\n./build.sh ubuntu-{18.04,16.04,14.04}-server-amd64-{libvirt,virtualbox}\n\n# Ubuntu Desktop\n./build.sh ubuntu-19.04-desktop-amd64-{libvirt,virtualbox}\n\n# Ubuntu Server - customized\n./build.sh my_ubuntu-{18.04,16.04,14.04}-server-amd64-{libvirt,virtualbox}\n```\n\n* Windows:\n\n```bash\n# Windows Server\n./build.sh windows-server-2012_r2-standard-x64-eval-{libvirt,virtualbox}\n./build.sh windows-server-2016-standard-x64-eval-{libvirt,virtualbox}\n./build.sh windows-server-2019-standard-x64-eval-{libvirt,virtualbox}\n\n# Windows 10\n./build.sh windows-10-enterprise-x64-eval-{libvirt,virtualbox}\n\n# Windows 10 - customized\n./build.sh my_windows-10-enterprise-x64-eval-{libvirt,virtualbox}\n```\n\n### Build process with the Docker image\n\nIf you do not want to install Packer, Vagrant, Vagrant plugins or Ansible,\nthen you can use Docker image.\nYou can find the Docker image and it\'s source on these URLs:\n\n* Docker image: [https://hub.docker.com/r/peru/packer_qemu_virtualbox_ansible/](https://hub.docker.com/r/peru/packer_qemu_virtualbox_ansible/)\n* Dockerfile: [https://github.com/ruzickap/docker-packer_qemu_virtualbox_ansible](https://github.com/ruzickap/docker-packer_qemu_virtualbox_ansible)\n\n#### Ubuntu example with Docker image\n\n```bash\nsudo apt update\nsudo apt install -y --no-install-recommends curl git jq docker.io virtualbox\nsudo gpasswd -a ${USER} docker\n# This is mandatory for Ubuntu otherwise docker container will not have\n# access to /dev/kvm - this is default in Fedora (https://bugzilla.redhat.com/show_bug.cgi?id=993491)\nsudo bash -c "echo \'KERNEL==\\"kvm\\", GROUP=\\"kvm\\", MODE=\\"0666\\"\' > /etc/udev/rules.d/60-qemu-system-common.rules"\nsudo sed -i \'s/^unix_sock_/#&/\' /etc/libvirt/libvirtd.conf\nsudo reboot\n```\n\n#### Fedora example with Docker image\n\n```bash\nsudo sed -i \'s@^SELINUX=enforcing@SELINUX=disabled@\' /etc/selinux/config\nsudo dnf upgrade -y\n# Reboot if necessary (especialy if you upgrade the kernel or related packages)\n\nFEDORA_VESION=$(rpm -E %fedora)\nsudo dnf install -y \\\n  http://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-${FEDORA_VESION}.noarch.rpm\\\n  http://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-${FEDORA_VESION}.noarch.rpm\nsudo dnf install -y akmod-VirtualBox curl docker git jq \\\n  kernel-devel-$(uname -r) libvirt-daemon-kvm\nsudo akmods\n\nsudo bash -c \'echo "vboxdrv" > /etc/modules-load.d/vboxdrv.conf\'\nsudo usermod -a -G libvirt ${USER}\nsudo groupadd docker && sudo gpasswd -a ${USER} docker\nsudo systemctl enable docker\n\nsudo reboot\n```\n\n### Build process with the Packer\n\nUse the `USE_DOCKERIZED_PACKER=true` to use Dockerized Packer to build images.\n\n* Ubuntu:\n\n```bash\n# Ubuntu Server\nNAME="ubuntu-18.04-server-amd64" UBUNTU_CODENAME="bionic" \\\nUBUNTU_TYPE="server" PACKER_IMAGES_OUTPUT_DIR="/var/tmp/" \\\npacker build -only="qemu" ubuntu-server.json\n\nNAME="ubuntu-16.04-server-amd64" UBUNTU_CODENAME="xenial" \\\nUBUNTU_TYPE="server" PACKER_IMAGES_OUTPUT_DIR="/var/tmp/" \\\npacker build -only="qemu" ubuntu-server.json\n\nNAME="ubuntu-14.04-server-amd64" UBUNTU_CODENAME="trusty" \\\nUBUNTU_TYPE="server" PACKER_IMAGES_OUTPUT_DIR="/var/tmp/" \\\npacker build -only="qemu" ubuntu-server.json\n\n# Ubuntu Desktop\nNAME="ubuntu-19.04-desktop-amd64" UBUNTU_CODENAME="disco" \\\nUBUNTU_TYPE="desktop" PACKER_IMAGES_OUTPUT_DIR="/var/tmp/" \\\npacker build -only="qemu" ubuntu-desktop.json\n\nNAME="ubuntu-18.10-desktop-amd64" UBUNTU_CODENAME="cosmic" \\\nUBUNTU_TYPE="desktop" PACKER_IMAGES_OUTPUT_DIR="/var/tmp/" \\\npacker build -only="qemu" ubuntu-desktop.json\n\n# Ubuntu Server - customized\nNAME="my_ubuntu-18.04-server-amd64" UBUNTU_CODENAME="bionic" \\\nUBUNTU_TYPE="server" PACKER_IMAGES_OUTPUT_DIR="/var/tmp/"    \\\npacker build -only="qemu" my_ubuntu-server.json\n\nNAME="my_ubuntu-16.04-server-amd64" UBUNTU_CODENAME="xenial" \\\nUBUNTU_TYPE="server" PACKER_IMAGES_OUTPUT_DIR="/var/tmp/"    \\\npacker build -only="qemu" my_ubuntu-server.json\n\nNAME="my_ubuntu-14.04-server-amd64" UBUNTU_CODENAME="trusty" \\\nUBUNTU_TYPE="server" PACKER_IMAGES_OUTPUT_DIR="/var/tmp/"    \\\npacker build -only="qemu" my_ubuntu-server.json\n```\n\n* Windows:\n\n```bash\nwget -P /var/tmp/ https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/latest-virtio/virtio-win.iso\nexport TMPDIR=/var/tmp\n\n# Windows Server\n## Windows Server 2012\nexport NAME="windows-server-2012_r2-standard-x64-eval"\nexport WINDOWS_VERSION="2012"\nexport VIRTIO_WIN_ISO="/var/tmp/virtio-win.iso"\nexport ISO_CHECKSUM="6612b5b1f53e845aacdf96e974bb119a3d9b4dcb5b82e65804ab7e534dc7b4d5"\nexport ISO_URL="http://care.dlservice.microsoft.com/dl/download/6/2/A/62A76ABB-9990-4EFC-A4FE-C7D698DAEB96/9600.17050.WINBLUE_REFRESH.140317-1640_X64FRE_SERVER_EVAL_EN-US-IR3_SSS_X64FREE_EN-US_DV9.ISO"\nexport PACKER_IMAGES_OUTPUT_DIR="/var/tmp/"\npacker build -only="qemu" windows.json\n\n## Windows Server 2019\nexport NAME="windows-server-2019-standard-x64-eval"\nexport WINDOWS_VERSION="2019"\nexport VIRTIO_WIN_ISO="/var/tmp/virtio-win.iso"\nexport ISO_CHECKSUM="57FAF4A2EA4484CFDF5E964C539313C061C4D9CAC474E723D60405F2EA02D570"\nexport ISO_URL="https://software-download.microsoft.com/download/sg/17763.253.190108-0006.rs5_release_svc_refresh_SERVER_EVAL_x64FRE_en-us.iso"\nexport PACKER_IMAGES_OUTPUT_DIR="/var/tmp/"\npacker build -only="qemu" windows.json\n\n## Windows Server 2016\nexport NAME="windows-server-2016-standard-x64-eval"\nexport WINDOWS_VERSION="2016"\nexport VIRTIO_WIN_ISO="/var/tmp/virtio-win.iso"\nexport ISO_CHECKSUM="1ce702a578a3cb1ac3d14873980838590f06d5b7101c5daaccbac9d73f1fb50f"\nexport ISO_URL="https://software-download.microsoft.com/download/pr/Windows_Server_2016_Datacenter_EVAL_en-us_14393_refresh.ISO"\nexport PACKER_IMAGES_OUTPUT_DIR="/var/tmp/"\npacker build -only="qemu" windows.json\n\n# Windows 10\nexport NAME="windows-10-enterprise-x64-eval"\nexport WINDOWS_VERSION="10"\nexport VIRTIO_WIN_ISO="/var/tmp/virtio-win.iso"\nexport ISO_CHECKSUM="ab4862ba7d1644c27f27516d24cb21e6b39234eb3301e5f1fb365a78b22f79b3"\nexport ISO_URL="https://software-download.microsoft.com/download/pr/18362.30.190401-1528.19h1_release_svc_refresh_CLIENTENTERPRISEEVAL_OEMRET_x64FRE_en-us.iso"\nexport PACKER_IMAGES_OUTPUT_DIR="/var/tmp/"\npacker build -only="qemu" windows.json\n\n# Windows 10 - customized\nexport NAME="my_windows-10-enterprise-x64-eval"\nexport WINDOWS_VERSION="10"\nexport VIRTIO_WIN_ISO="/var/tmp/virtio-win.iso"\nexport ISO_CHECKSUM="27e4feb9102f7f2b21ebdb364587902a70842fb550204019d1a14b120918e455"\nexport ISO_URL="https://software-download.microsoft.com/download/pr/17134.1.180410-1804.rs4_release_CLIENTENTERPRISEEVAL_OEMRET_x64FRE_en-us.iso"\nexport PACKER_IMAGES_OUTPUT_DIR="/var/tmp/"\npacker build -only="qemu" my_windows.json\n```\n\n## Helper scripts\n\n* `build.sh` - build single image specified on command line\n* `build_all.sh` - builds all images\n* `build_all_remote_ssh.sh` - connects to remote Ubuntu server, install\n  the necessary packages for building images and execute `build_all.sh`\n* `vagrant_init_destroy_boxes.sh` - tests all `*.box` images in the current\n  directory using `vagrant add/up/ssh/winrm/destroy`\n\nGitLab CI configuration can be found here: [GitLab_CI_configuration.md](docs/GitLab_CI_configuration.md)\n'