b'[ShutIt](http://shutit.tk)\n==========================\n\n\n[![Join the chat at https://gitter.im/ianmiell/shutit](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/ianmiell/shutit?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nA versatile automation framework.\n\nShutIt is an automation tool that models a user\'s actions on a terminal.\n\nIt can automate any process that can be run by a human on the command line with little effort.\n\nIt was originally written to manage complex Docker builds, but is a now general-purpose automation tool that supports bash, Docker, Vagrant, ssh and arbitrary build contexts.\n\nShutIt can also be used as an educational tool, as it can produce videos of demos, capture reproducible steps required to set environments up, and even challenge you to get the right output (see [grep-scales](https://github.com/ianmiell/grep-scales)).\n\nIf you want to know more about Docker, see the [official site](https://www.docker.com/) or take a look at the book by the creators of ShutIt - [Docker in Practice](http://docker-in-practice.github.io/).\n\nReally Quick Overview\n=====================\nSome use cases:\n\n- You like bash, want to automate tasks, have structure and support, but don\'t want to learn a configuration management framework that takes you away from the command line you know and love.\n\n- Want to create [complex Vagrant environments](https://medium.com/@zwischenzugs/a-complete-openshift-cluster-on-vagrant-step-by-step-7465e9816d98) to model clusters of machines.\n\n- Want to create instructive [walkthroughs](https://asciinema.org/a/30598?t=70): \n\n- Are interested in "phoenix deployment".\n\n- Want to take your scripts and turn them into stateless containers quickly, without needing to maintain (or learn) a configuration management solution designed for moving-target systems.\n\n- You\'re programmer who wants highly configurable stateless containers development, testing, and production.\n\n- Want to [build everything from source](https://github.com/ianmiell/shutit-distro/blob/master/README.md) in a way that\'s comprehensible and auditable.\n\n\nWhat Does it Do (bash Builds)?\n==============================\n\nShutIt acts as a modular and easy to use wrapper around [pexpect](https://github.com/pexpect/pexpect).\n\nHere is a simple example of a script that creates a file and a directory if they are not there already:\n\n[![Simple Example](https://asciinema.org/a/47076.png)](https://asciinema.org/a/47076)\n\nWhat Does it Do (Tutorials)?\n============================\n\nThis builds on the docker features (see below), but allows you to interrupt the run at points of your choosing with \'challenges\' for the user to overcome.\n\nTwo types of \'challenge\' exist in ShutIt:\n\n- scales\n- free form\n\nScales tell you to run a specific command before continuing. This is useful when you want to get certain commands or flags \'under your fingers\', which does not happen without dedicated and direct practice.\n\n[![grep Scales](https://asciinema.org/a/41308.png)](https://asciinema.org/a/41308)\n\nFree form exercises give you a task to perform, and free access to the shell. This is to give the user a realistic environment in which to hone their skills. You can check man pages, look around the directories, search for useful utils (even install new ones!). When you are finished, a pre-specified command is run to check the system is in an appropriate state. Here\'s an example for the [basics of git](ianmiell.github.io/git-101-tutorial/):\n\n[![git 101 Tutorial](https://asciinema.org/a/44937.png)](https://asciinema.org/a/44937)\n\nIf you use a Docker-based tutorial and you mess the environment up, the state can be restored to a known one by hitting CTRL-G.\n\n\nWhat Does it Do (Vagrant)?\n==========================\nUses a bash build to set up n vagrant machines, and uses Landrush to give them useful hostnames accessible from the hosts and in the guest VMs.\n\nIt supports both Virtualbox and Libvirt providers.\n\nThis allows another kind of contained environment for more infrastructural projects than Docker allows for.\n\nThis example demonstrates a reproducible build that sets up Docker on an Ubuntu VM (on a Linux host), then runs a CentOS image within Docker wihing the Ubuntu VM.\n\nIt deposits the user into a shell mid-build to interrogate the environment, after which the user re-runs the build to add a directive to ensure ps is installed in the image.\n\n[![Docker on Ubuntu VM running a CentOS image](https://asciinema.org/a/47078.png)](https://asciinema.org/a/47078)\n\n\nWhat Does it Do (Docker Builds)?\n================================\n\n![Example Setup](https://github.com/ianmiell/shutit/blob/gh-pages/images/ShutIt.png)\n\nWe start with a "ShutIt Module", similar to a shell script, or a Dockerfile (see bash builds above).\n\nIn the image above there are five of these. At a high level they each have the following attributes:\n\n- a list of zero or more dependencies on other modules\n- a unique number that represents its ordering within the available modules\n- a set of steps (bash commands) for building the module\n\nIn the image we imagine a scenario where we want to build our blog into a docker image, with all its attendant content and config.\n\nWe instruct ShutIt to build the MyBlog module, and it runs the build as per the image on the right.\n\nThe container environment is set up, the modules are ordered, and the build steps are run. Finally, the image is committed, tagged and pushed as configured.\n\nThis is a core function of ShutIt - to manage dependencies and image building for complex image setups.\n\nBut it doesn\'t just run build steps, it also manages The ShutIt Lifecycle to make the build more robust and flexible.\n\n\nThe ShutIt Lifecycle\n====================\n\n- gathers all the modules it can find in its path and determines their ordering\n- for all modules, it gathers any build-specific config (e.g. passwords etc.)\n- it checks dependencies and conflicts across all modules and figures out which modules need to be built\n- for all modules, it checks whether the module is already installed\n- for all modules, if it needs building, it runs the build\n- for all modules, run a test cycle to ensure everything is as we expect\n- for all modules, run a finalize function to clean up the container\n- do any configured committing, tagging and pushing of the image\n\nThese correspond to the various functions that can be implemented in the ShutIt module file.\n\n\nAuto-Generate Modules\n=====================\n\nShutIt provides a means for auto-generation of modules (either bare ones, or from existing Dockerfiles) with its skeleton command. See [here](http://ianmiell.github.io/shutit/) for an example.\n\nDocker Image\n============\n\nAn image with ShutIt in it is available [here](https://hub.docker.com/r/imiell/shutit/) as `docker pull ianmiell/shutit`\n\n\n[Really Quick Start](http://ianmiell.github.io/shutit)\n====================\n\n[Full User Guide](http://github.com/ianmiell/shutit-docs/blob/master/USER_GUIDE.md)\n==============\n\n[API](http://github.com/ianmiell/shutit-docs/blob/master/API.md)\n======\n\n[Installation](http://github.com/ianmiell/shutit-docs/blob/master/INSTALL.md)\n==============\n\nContributing\n============\n\nWe always need help, and with a potentially infinite number of libraries required, it\'s likely you will be able to contribute. Just mail ian.miell@gmail.com if you want to be assigned a mentor. [He won\'t bite](https://www.youtube.com/watch?v=zVUPmmUU3yY) \n\n[Tests](http://github.com/ianmiell/shutit/blob/master/docs/TEST.md)\n\nMailing List\n------------\nhttps://groups.google.com/forum/#!forum/shutit-users\nshutit-users@groups.google.com\n\nKnown Issues\n=============\nSince a core technology used in this application is pexpect - and a typical usage pattern is to expect the prompt to return.\nUnusual shell prompts and escape sequences have been known to cause problems. Use the shutit.setup_prompt() function to help manage this by setting up a more sane prompt.\nUse of COMMAND_PROMPT with echo -ne has been seen to cause problems with overwriting of shells and pexpect patterns.\n\n\n[![ScreenShot](https://raw.github.com/GabLeRoux/WebMole/master/ressources/WebMole_Youtube_Video.png)](https://www.youtube.com/watch?v=gsEtaX207a4)\n\nLicence\n------------\nThe MIT License (MIT)\n\nCopyright (C) 2014 OpenBet Limited\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the "Software"), to deal in \nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies \nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL \nTHE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n'