b'# JHipster official "development box"\n\n## Introduction\n\nThis is a [Vagrant](https://www.vagrantup.com/) configuration to set up a complete, virtualized development environment for JHipster users.\n\n1. [Usage](#usage)\n2. [Installation](#setup)\n3. [Customize your virtual machine](#customize)\n4. [Configure your new box and install new software](#configure)\n\n## <a name="usage"></a> Usage\n\nThe JHipster "development box" is a complete development environment for JHipster users.\n\nIt requires to have [Vagrant](https://www.vagrantup.com/) installed on your machine.\n\nIt is fully based on Open Source software, and most importantly on:\n\n- Ubuntu\n- OpenJDK (Oracle JDK can\'t be used because of license issues)\n- Node, NPM and Yarn\n- Docker and Docker Compose (see the [JHipster Docker Compose documentation](https://www.jhipster.tech/docker-compose/) to learn how to run your application, database or even a full micro-service architecture with Docker)\n- [Ubuntu Make](https://wiki.ubuntu.com/ubuntu-make) so you can easily install your favorite IDE (type `umake ide idea` for Intellij IDEA or `umake ide eclipse` for Eclipse)\n- Chromium and Firefox Web browsers\n\nThis "development box" also have all client applications useful for working with a JHipster application:\n\n- MySQL Workbench\n- pgAdmin 3\n- MongoDB client\n- Cassandra command line (cqlsh)\n- Cloud Foundry command line (cf)\n- Heroku toolbelt\n\n## <a name="setup"></a> Installation\n\nThe "Quick installation" provides a pre-build Virtual Machine, and the "Manual installation" let you build your Virtual Machine yourself. We recommend you use the "Quick installation" if you don\'t know which option to choose.\n\n### Quick installation\n\nPre-built distributions of this "development box" are available on [Vagrant Cloud](https://app.vagrantup.com/jhipster/boxes/jhipster-devbox).\n\nTo install the latest distribution, please run:\n\nOn Mac or Linux\n\n`vagrant init jhipster/jhipster-devbox; vagrant up --provider virtualbox`\n\nOn Windows\n\n`vagrant init jhipster/jhipster-devbox`\n\n`vagrant up --provider virtualbox`\n\nYou can then tune your installation, by following the next sections on customizing and configuring your "development box".\n\n### Manual installation\n\nThis generates a new "development box" directly from this repository.\n\n- Clone this repository: `git clone https://github.com/jhipster/jhipster-devbox.git`\n- It is wise to use a tag to have a stable version: the JHipster DevBox tags are the same as the JHipster Generator tags, so using the DevBox v3.2.0 also means using the generator v3.2.0\n- Run `vagrant up`\n\n## <a name="customize"></a> Customize your virtual machine\n\nThis is very important! Modify your system properties, depending on your host\'s hardware. We recommend, at least:\n\n- 4 CPUs\n- 8 Gb of RAM\n- 128 Mb of video RAM\n\n## <a name="configure"></a> Configure your new box and install new software\n\nStart up the new box:\n\n- Login using the `vagrant` user (not the \'Ubuntu\' user which is selected by default)\n  - Password is `vagrant` (please note that default keyboard layout is US!)\n- Configure your keyboard, if you are not using an English keyboard, once you have logged in:\n  - Go to `Settings > Keyboard`\n  - Open the `Layout` tab\n  - Untick the `Use system default` box\n  - Use the `+` sign to add your keyboard layout\n- Configure your IDE\n  - Use [Ubuntu Make](https://wiki.ubuntu.com/ubuntu-make) so you can easily install your favorite IDE:\n    - Type `umake ide idea` for Intellij IDEA\n    - Type `umake ide eclipse` for Eclipse\n- Configure you browser\n  - Firefox is installed\n  - Chromium, which is the Open-Source version of Google Chrome, is also installed\n- Other available tools\n  - [Guake](http://guake-project.org/) is installed, hit "F12" to have your terminal\n  - The [Visual Studio Code](https://code.visualstudio.com/) code editor is installed\n- Generate your application\n  - Run `yo jhipster` and use JHipster normally\n- Configure your database\n  - Run your database with Docker. For example, for MySQL use `docker-compose -f src/main/docker/mysql.yml up`\n  - In your application, don\'t forget to edit your `application-dev.yml` and `application-prod.yml` files so you have the correct connection setup for your database server\n- Use the JHipster tools\n  - Running `./mvnw` will run your JHipster application on port `8080`. As this port is forwarded to your host, you can also use `http://localhost:8080` on your host machine\n  - Running `gulp` will launch your AngularJS front-end with BrowserSync on port `9000`: it is also forwarded to your host, so you can also use `http://localhost:9000` on your host machine\n'