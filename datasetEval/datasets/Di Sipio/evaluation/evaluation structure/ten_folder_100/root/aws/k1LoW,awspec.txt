b'# awspec [![Gem](https://img.shields.io/gem/v/awspec.svg)](https://rubygems.org/gems/awspec) [![Travis](https://img.shields.io/travis/k1LoW/awspec.svg)](https://travis-ci.org/k1LoW/awspec)\n\n![Logo](./awspec-logo.png)\n\nRSpec tests for your AWS resources.\n\n[![Join the chat at https://gitter.im/k1LoW/awspec](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/k1LoW/awspec?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n[Resource Types](doc/resource_types.md) | [Contributing](doc/contributing.md)\n\n## Installation\n\nAdd this line to your application\'s Gemfile:\n\n```ruby\ngem \'awspec\'\n```\n\nAnd then execute:\n\n    $ bundle\n\nOr install it yourself as:\n\n    $ gem install awspec\n\n## Getting Started\n\n### STEP 1. Generate awspec init files\n\nIf you\'re starting on a fresh RSpec project, you can use awspec to generate your init files:\n\n    $ awspec init\n\nIf you\'re working on an exisitng RSpec project, you will need to add the following lines to your `spec_helper.rb` file:\n\n```ruby\nrequire \'awspec\'\nAwsecrets.load(secrets_path: File.expand_path(\'./secrets.yml\', File.dirname(__FILE__)))\n```\n\n### STEP 2. Set AWS config\n\n#### 2-1. Use Shared Credentials like AWS CLI\n\n```sh\n$ aws configure\n\n...\n```\n\n(See http://docs.aws.amazon.com/ja_jp/cli/latest/userguide/cli-chap-getting-started.html#config-settings-and-precedence)\n\n#### 2-2. Use secrets.yml\n\n```sh\n$ cat <<EOF > spec/secrets.yml\nregion: ap-northeast-1\naws_access_key_id: XXXXXXXXXXXXXXXXXXXX\naws_secret_access_key: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nEOF\n```\n\n### STEP 3. Write spec/\\*\\_spec.rb\n\n```ruby\nrequire \'spec_helper\'\n\ndescribe ec2(\'my-ec2-tag-name\') do\n  it { should be_running }\n  its(:instance_id) { should eq \'i-ec12345a\' }\n  its(:image_id) { should eq \'ami-abc12def\' }\n  its(:public_ip_address) { should eq \'123.0.456.789\' }\n  it { should have_security_group(\'my-security-group-name\') }\n  it { should belong_to_vpc(\'my-vpc\') }\n  it { should belong_to_subnet(\'subnet-1234a567\') }\n  it { should have_eip(\'123.0.456.789\') }\n  it { should be_disabled_api_termination }\nend\n```\n\n#### Using shared_context: region\n\n```ruby\nrequire \'spec_helper\'\n\ndescribe sqs(\'my-sqs-queue\'), region: \'us-west-2\' do\n  it { should exist }\n  its(:queue_url) { should eq \'https://sqs.us-west-2.amazonaws.com/xxxxxxxxxxxx/my-sqs-queue\' }\n  its(:queue_arn) { should eq \'arn:aws:sqs:us-west-2:xxxxxxxxxxxx:my-sqs-queue\' }\n  its(:visibility_timeout) { should eq \'30\' }\n  its(:maximum_message_size) { should eq \'256000\' }\n  its(:message_retention_period) { should eq \'86400\' }\n  its(:delay_seconds) { should eq \'0\' }\n  its(:receive_message_wait_time_seconds) { should eq \'10\' }\nend\n```\n\n#### Using terraform outputs as identifier\n\nEspecially in cases, where resources created by terraform have the same names (e.g. created by VPC module), it is helpful to use terraform outputs as unique identifiers.\n\n```terraform\noutput "my_ec2_instance" {\n    value = aws_instance.my_instance.id\n}\n```\n\n```ruby\nrequire \'spec_helper\'\n\nmy_ec2_instance = `terraform output my_ec2_instance`.strip\n\ndescribe ec2(my_ec2_instance) do\n  it { should be_running }\n  its(:image_id) { should eq \'ami-abc12def\' }\n  its(:public_ip_address) { should eq \'123.0.456.789\' }\n  it { should have_security_group(\'my-security-group-name\') }\n  it { should belong_to_vpc(\'my-vpc\') }\n  it { should belong_to_subnet(\'subnet-1234a567\') }\n  it { should have_eip(\'123.0.456.789\') }\n  it { should be_disabled_api_termination }\nend\n```\n\n### STEP 4. Run tests\nAdd gem "rake" in your Gemfile if you are starting a blank project.\n\n    $ bundle exec rake spec\n\n### Advanced Tips: Spec generate command\n\nGenerate spec from AWS resources already exists.\n\n```sh\n$ awspec generate ec2 vpc-ab123cde >> spec/ec2_spec.rb\n```\n\nMake sure you have added in your spec file\n```ruby\nrequire \'spec_helper\'\n```\n\n### Advanced Tips: Use Shared Credentials (~/.aws/config ~/.aws/credentials)\n\n```sh\n$ awspec generate ec2 vpc-ab123cde --profile mycreds\n```\n\n```sh\n$ AWS_PROFILE=mycreds bundle exec rake spec\n```\n\n### Advanced Tips: Configuring the AWS client retries\n\nThe [`ClientWrap` class](https://github.com/k1LoW/awspec/blob/master/lib/awspec/helper/client_wrap.rb)\nprovides mechanisms for retrying AWS API calls when it receives a\n`RequestLimitExceeded` error. `ClientWrap` implements a backoff algorithm\nwhere the client will sleep for successively longer periods of time until the\nalgorithm has calculated a backoff greater than or equal to the\n`backoff_limit`, at which point it will give up and re-raise the error. You\ncan see the full implementation in `ClientWrap#method_missing`.\n\nYou can configure this retry and backoff logic in your `spec_helper.rb`:\n\n```ruby\nrequire \'awspec\'\n\n# These are the defaults, but you can change them.\nAwspec.configure do |config|\n  config.client_backoff 0.0\n  config.client_backoff_limit 30\n  config.client_iteration 1\nend\n```\n\n## Support AWS Resources\n\n[Resource Types information here](doc/resource_types.md)\n\n## awspec AWS key/secrets precedence\n\nDependent on [awsecrets](https://github.com/k1LoW/awsecrets#awsecrets-config-precedence).\n\n## References\n\nawspec is inspired by Serverspec.\n\n- Original idea (code / architecture) -> [Serverspec](https://github.com/serverspec/serverspec)\n- `AWS + Serverspec` original concept -> https://github.com/marcy-terui/awspec\n- [Serverspec book](http://www.oreilly.co.jp/books/9784873117096/)\n'