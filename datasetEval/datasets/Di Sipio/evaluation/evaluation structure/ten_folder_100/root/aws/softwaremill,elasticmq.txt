b'![ElasticMQ](https://github.com/softwaremill/elasticmq/raw/master/banner.png)\n\n[![Build Status](https://travis-ci.org/softwaremill/elasticmq.svg?branch=master)](https://travis-ci.org/softwaremill/elasticmq)\n[![Maven Central](https://maven-badges.herokuapp.com/maven-central/org.elasticmq/elasticmq-rest-sqs_2.12/badge.svg)](https://maven-badges.herokuapp.com/maven-central/org.elasticmq/elasticmq-rest-sqs_2.12/)\n\ntl;dr\n-----\n\n* in-memory message queue system\n* runs stand-alone ([download](https://s3-eu-west-1.amazonaws.com/softwaremill-public/elasticmq-server-0.15.3.jar)), via [Docker](https://hub.docker.com/r/softwaremill/elasticmq/) or embedded\n* [Amazon SQS](http://aws.amazon.com/sqs/)-compatible interface\n* fully asynchronous implementation, no blocking calls\n\nCreated and maintained by\n[<img src="https://softwaremill.com/images/header-main-logo.svg" alt="SoftwareMill logo" height="25">](https://softwaremill.com)\n\nSummary\n-------\n\nElasticMQ is a message queue system, offering an actor-based Scala and an [SQS](http://aws.amazon.com/sqs/)-compatible\nREST (query) interface.\n\nElasticMQ follows the semantics of SQS. Messages are received by polling the queue.\nWhen a message is received, it is blocked for a specified amount of time (the visibility timeout).\nIf the message isn\'t deleted during that time, it will be again available for delivery.\nMoreover, queues and messages can be configured to always deliver messages with a delay.\n\nThe focus in SQS (and ElasticMQ) is to make sure that the messages are delivered.\nIt may happen, however, that a message is delivered twice (if, for example, a client dies after receiving a message and\nprocessing it, but before deleting). That\'s why clients of ElasticMQ (and Amazon SQS) should be idempotent.\n\nAs ElasticMQ implements a subset of the [SQS](http://aws.amazon.com/sqs/) query (REST) interface, it is a great SQS\nalternative both for testing purposes (ElasticMQ is easily embeddable) and for creating systems which work both within\nand outside of the Amazon infrastructure.\n\nThe future will most probably bring even more exciting features :).\n\nCommunity\n---------\n\n* [Issues](https://github.com/adamw/elasticmq/issues)\n* Forum (discussions, help): [Google group](https://groups.google.com/forum/?fromgroups#!forum/elasticmq).\n* (old) [blog](http://www.warski.org/blog/category/elasticmq/)\n\nInstallation: stand-alone\n-------------------------\n\nYou can download the stand-alone distribution here:\n[https://s3/.../elasticmq-server-0.15.3.jar](https://s3-eu-west-1.amazonaws.com/softwaremill-public/elasticmq-server-0.15.3.jar)\n\nJava 8 or above is required for running the server.\n\nSimply run the jar and you should get a working server, which binds to `localhost:9324`:\n\n    java -jar elasticmq-server-0.15.3.jar\n\nElasticMQ uses [Typesafe Config](https://github.com/typesafehub/config) for configuration. To specify custom\nconfiguration values, create a file (e.g. `custom.conf`), fill it in with the desired values, and pass it to the server:\n\n    java -Dconfig.file=custom.conf -jar elasticmq-server-0.15.3.jar\n\nThe config file may contain any configuration for Akka and ElasticMQ. Current ElasticMQ configuration values are:\n\n````\ninclude classpath("application.conf")\n\n// What is the outside visible address of this ElasticMQ node\n// Used to create the queue URL (may be different from bind address!)\nnode-address {\n    protocol = http\n    host = localhost\n    port = 9324\n    context-path = ""\n}\n\nrest-sqs {\n    enabled = true\n    bind-port = 9324\n    bind-hostname = "0.0.0.0"\n    // Possible values: relaxed, strict\n    sqs-limits = strict\n}\n\n// Should the node-address be generated from the bind port/hostname\n// Set this to true e.g. when assigning port automatically by using port 0.\ngenerate-node-address = false\n\nqueues {\n    // See next section\n}\n\n// Region and accountId which will be included in resource ids\naws {\n    region = us-west-2\n    accountId = 000000000000\n}\n````\n\nYou can also provide an alternative [Logback](http://logback.qos.ch/) configuration file (the\n[default](server/src/main/resources/logback.xml) is configured to\nlog INFO logs and above to the console):\n\n    java -Dlogback.configurationFile=my_logback.xml -jar elasticmq-server-0.15.3.jar\n\nHow are queue URLs created\n--------------------------\n\nSome of the responses include a queue URL. By default, the URLs will use `http://localhost:9324` as the base URL.\nTo customize, you should properly set the protocol/host/port/context in the `node-address` setting (see above).\n\nYou can also set `node-address.host` to a special value, `"*"`, which will cause any queue URLs created during a request\nto use the path of the incoming request. This might be useful e.g. in containerized (Docker) deployments.\n\nNote that changing the `bind-port` and `bind-hostname` settings do not affect the queue URLs in any way unless\n`generate-node-address` is `true`. In that case, the bind host/port are used to create the node address. This is\nuseful when the port should be automatically assigned (use port `0` in such case, the selected port will be\nvisible in the logs).\n\nAutomatically creating queues on startup\n----------------------------------------\n\nQueues can be automatically created on startup by providing appropriate configuration:\n\nThe queues are specified in a custom configuration file. For example, create a `custom.conf` file with the following:\n\n````\ninclude classpath("application.conf")\n\nqueues {\n    queue1 {\n        defaultVisibilityTimeout = 10 seconds\n        delay = 5 seconds\n        receiveMessageWait = 0 seconds\n        deadLettersQueue {\n            name = "queue1-dead-letters"\n            maxReceiveCount = 3 // from 1 to 1000\n        }\n        fifo = false\n        contentBasedDeduplication = false\n        copyTo = "audit-queue-name"\n        moveTo = "redirect-queue-name"\n        tags {\n            tag1 = "tagged1"\n            tag2 = "tagged2"\n        }\n    }\n    queue1-dead-letters { }\n    audit-queue-name { }\n    redirect-queue-name { }\n}\n````\n\nAll attributes are optional (except `name` and `maxReceiveCount` when a `deadLettersQueue` is defined).\n`copyTo` and `moveTo` attributes allow to achieve behavior that might be useful primarily for integration testing scenarios -\nall messages could be either duplicated (using `copyTo` attribute) or redirected (using `moveTo` attribute) to another queue.\n\nStarting an embedded ElasticMQ server with an SQS interface\n-----------------------------------------------------------\n\n    val server = SQSRestServerBuilder.start()\n    // ... use ...\n    server.stopAndWait()\n\nIf you need to bind to a different host/port, there are configuration methods on the builder:\n\n    val server = SQSRestServerBuilder.withPort(9325).withInterface("localhost").start()\n    // ... use ...\n    server.stopAndWait()\n\nYou can also set a dynamic port with a port value of `0` or by using the method `withDynamicPort`. To retrieve the port (and other configuration) when using a dynamic port value you can access the server via `waitUntilStarted` for example:\n\n    val server = SQSRestServerBuilder.withDynamicPort().start()\n    server.waitUntilStarted().localAddress().getPort()\n\nYou can also provide a custom `ActorSystem`; for details see the javadocs.\n\nEmbedded ElasticMQ can be used from any JVM-based language (Java, Scala, etc.).\n\n(Note that the embedded server does not load any configuration files, so you cannot automatically create queues on startup as described above. You can of course create queues programmatically.)\n\nUsing the Amazon Java SDK to access an ElasticMQ Server\n-------------------------------------------------------\n\nTo use [Amazon Java SDK](http://aws.amazon.com/sdkforjava/) as an interface to an ElasticMQ server you just need\nto change the endpoint:\n\n    String endpoint = "http://localhost:9324";\n    String region = "elasticmq";\n    String accessKey = "x";\n    String secretKey = "x";\n    AmazonSQS client = AmazonSQSClientBuilder.standard()\n        .withCredentials(new AWSStaticCredentialsProvider(new BasicAWSCredentials(accessKey, secretKey)))\n        .withEndpointConfiguration(new AwsClientBuilder.EndpointConfiguration(endpoint, region))\n        .build();\n\nThe endpoint value should be the same address as the `NodeAddress` provided as an argument to\n`SQSRestServerBuilder` or in the configuration file.\n\nThe `rest-sqs-testing-amazon-java-sdk` module contains some more usage examples.\n\nUsing the Amazon boto (Python) to access an ElasticMQ Server\n-------------------------------------------------------\n\nTo use [Amazon boto](http://docs.pythonboto.org/en/latest/) as an interface to an ElasticMQ server you set up the connection using:\n\n    region = boto.sqs.regioninfo.RegionInfo(name=\'elasticmq\',\n                                            endpoint=sqs_endpoint)\n    conn = boto.connect_sqs(aws_access_key_id=\'x\',\n                            aws_secret_access_key=\'x\',\n                            is_secure=False,\n                            port=sqs_port,\n                            region=region)\n\nwhere `sqs_endpoint` and `sqs_port` are the host and port.\n\nThe `boto3` interface is different:\n\n    client = boto3.resource(\'sqs\',\n                            endpoint_url=\'http://localhost:9324\',\n                            region_name=\'elasticmq\',\n                            aws_secret_access_key=\'x\',\n                            aws_access_key_id=\'x\',\n                            use_ssl=False)\n    queue = client.get_queue_by_name(QueueName=\'queue1\')\n\nElasticMQ via Docker\n---------------------\n\nA Docker image is built on each release an pushed as [`softwaremill/elasticmq`](https://hub.docker.com/r/softwaremill/elasticmq/).\n\nRun using:\n\n```\ndocker run -p 9324:9324 softwaremill/elasticmq\n```\n\nThe image uses default configuration. Custom configuration can be provided (e.g. to change the port, or create queues on startup) by creating a custom configuration file (see above) and using it when running the container:\n\n```\ndocker run -p 9324:9324 -v `pwd`/custom.conf:/opt/elasticmq.conf softwaremill/elasticmq\n```\n\nTo pass additional java system properties (`-D`) you need to prepare an `application.ini` file. For instance, to set custom `logback.xml` configuration, `application.ini` should look as follows:\n\n```\napplication.ini:\n-Dconfig.file=/opt/elasticmq.conf\n-Dlogback.configurationFile=/opt/docker/conf/logback.xml\n```\n\nTo run container with customized `application.ini` file (and custom `logback.xml` in this particular case) the following command should be used:\n```\ndocker run -v `pwd`/application.ini:/opt/docker/conf/application.ini -v `pwd`/logback.xml:/opt/docker/conf/logback.xml -p 9324:9324 softwaremill/elasticmq\n```\n\nAnother option is to use custom `Dockerfile`:\n\n```\nFROM openjdk:8-jre-alpine\n\nARG ELASTICMQ_VERSION\nENV ELASTICMQ_VERSION ${ELASTICMQ_VERSION:-0.15.3}\n\nRUN apk add --no-cache curl ca-certificates\nRUN mkdir -p /opt/elasticmq/log /opt/elasticmq/lib /opt/elasticmq/config\nRUN curl -sfLo /opt/elasticmq/lib/elasticmq.jar https://s3-eu-west-1.amazonaws.com/softwaremill-public/elasticmq-server-${ELASTICMQ_VERSION}.jar\n\nWORKDIR /opt/elasticmq\n\nEXPOSE 9324\n\nENTRYPOINT [ "/usr/bin/java", "-jar", "/opt/elasticmq/lib/elasticmq.jar" ]\n```\n\nand override the entrypoint passing the required properties.\n\nExperimental native ElasticqMQ via Docker\n-----------------------------------------\n\nAn experimental, dockerized version of ElasticMQ, \nbuilt using GraalVM\'s [native-image](https://blog.softwaremill.com/small-fast-docker-images-using-graalvms-native-image-99c0bc92e70b),\nis available as [`softwaremill/elasticmq-native`](https://hub.docker.com/r/softwaremill/elasticmq-native/). To start, run:\n\n```\ndocker run -p 9324:9324 --rm -it softwaremill/elasticmq-native\n```\n\nThe `native-elasticmq` image is much smaller (30MB vs 240MB) and starts up much faster (milliseconds instead of seconds).\nHowever, it\'s an experimental feature, so some things might not work.\n\nElasticMQ dependencies in SBT\n-----------------------------\n\n    // Scala 2.13 and 2.12\n    val elasticmqSqs        = "org.elasticmq" %% "elasticmq-rest-sqs" % "0.15.3"\n\nIf you don\'t want the SQS interface, but just use the actors directly, you can add a dependency only to the `core`\nmodule:\n\n    val elasticmqCore       = "org.elasticmq" %% "elasticmq-core" % "0.15.3"\n\nIf you want to use a snapshot version, you will need to add the [https://oss.sonatype.org/content/repositories/snapshots/](https://oss.sonatype.org/content/repositories/snapshots/) repository to your configuration.\n\nElasticMQ dependencies in Maven\n-------------------------------\n\nDependencies:\n\n    <dependency>\n        <groupId>org.elasticmq</groupId>\n        <artifactId>elasticmq-rest-sqs_2.12</artifactId>\n        <version>0.15.3</version>\n    </dependency>\n\nIf you want to use a snapshot version, you will need to add the [https://oss.sonatype.org/content/repositories/snapshots/](https://oss.sonatype.org/content/repositories/snapshots/) repository to your configuration.\n\nCurrent versions\n----------------\n\n*Stable*: 0.15.3\n\nLogging\n-------\n\nElasticMQ uses [Slf4j](http://www.slf4j.org/) for logging. By default no logger backend is included as a dependency,\nhowever [Logback](http://logback.qos.ch/) is recommended.\n\nPerformance\n-----------\n\nTests done on a 2012 MBP, 2.6GHz, 16GB RAM, no replication. Throughput is in messages per second (messages are\nsmall).\n\nDirectly accessing the client:\n\n    Running test for [in-memory], iterations: 10, msgs in iteration: 100000, thread count: 1.\n    Overall in-memory throughput: 21326.054040\n\n    Running test for [in-memory], iterations: 10, msgs in iteration: 100000, thread count: 2.\n    Overall in-memory throughput: 26292.956117\n\n    Running test for [in-memory], iterations: 10, msgs in iteration: 100000, thread count: 10.\n    Overall in-memory throughput: 25591.155697\n\nThrough the SQS REST interface:\n\n    Running test for [rest-sqs + in-memory], iterations: 10, msgs in iteration: 1000, thread count: 20.\n    Overall rest-sqs + in-memory throughput: 2540.553587\n\n    Running test for [rest-sqs + in-memory], iterations: 10, msgs in iteration: 1000, thread count: 40.\n    Overall rest-sqs + in-memory throughput: 2600.002600\n\nNote that both the client and the server were on the same machine.\n\nTest class: `org.elasticmq.performance.LocalPerformanceTest`.\n\nBuilding, running, and packaging\n--------------------------------\n\nTo build and run with debug (this will listen for a remote debugger on port 5005):\n```\n~/workspace/elasticmq $ sbt -jvm-debug 5005\n> project server\n> run\n```\n\nTo build a jar-with-dependencies:\n```\n~/workspace/elasticmq $ sbt\n> project server\n> assembly\n```\n\nTests and coverage\n------------------\n\nTo run the tests:\n```\n~/workspace/elasticmq $ sbt test\n```\n\nTo check the coverage reports:\n```\n~/workspace/elasticmq $ sbt\n> coverage\n> tests\n> coverageReport\n> coverageAggregate\n```\n\nAlthough it\'s mostly only the core project that is relevant for coverage testing, each project\'s report can be found\nin their target directory:\n\n * core/target/scala-2.12/scoverage-report/index.html\n * common-test/target/scala-2.12/scoverage-report/index.html\n * rest/rest-sqs/target/scala-2.12/scoverage-report/index.html\n * server/target/scala-2.12/scoverage-report/index.html\n\nThe aggregate report can be found at target/scala-2.12/scoverage-report/index.html\n\nTechnology\n----------\n\n* Core: [Scala](http://scala-lang.org) and [Akka](http://akka.io/).\n* Rest server: [Akka HTTP](http://doc.akka.io/docs/akka-http/current/), a high-performance,\n  asynchronous, REST/HTTP toolkit.\n* Testing the SQS interface: [Amazon Java SDK](http://aws.amazon.com/sdkforjava/);\n  see the `rest-sqs-testing-amazon-java-sdk` module for the testsuite.\n\nCommercial Support\n------------------\n\nWe offer commercial support for ElasticMQ and related technologies, as well as development services. [Contact us](https://softwaremill.com) to learn more about our offer!\n\nCopyright\n---------\n\nCopyright (C) 2011-2019 SoftwareMill [https://softwaremill.com](https://softwaremill.com).\n'