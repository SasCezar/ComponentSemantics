b'# TFLint\n[![Build Status](https://github.com/terraform-linters/tflint/workflows/build/badge.svg?branch=master)](https://github.com/terraform-linters/tflint/actions)\n[![GitHub release](https://img.shields.io/github/release/terraform-linters/tflint.svg)](https://github.com/terraform-linters/tflint/releases/latest)\n[![Terraform Compatibility](https://img.shields.io/badge/terraform-%3E%3D%200.12-blue)](docs/guides/compatibility.md)\n[![Docker Hub](https://img.shields.io/badge/docker-ready-blue.svg)](https://hub.docker.com/r/wata727/tflint/)\n[![License: MPL 2.0](https://img.shields.io/badge/License-MPL%202.0-blue.svg)](LICENSE)\n[![Go Report Card](https://goreportcard.com/badge/github.com/terraform-linters/tflint)](https://goreportcard.com/report/github.com/terraform-linters/tflint)\n\nTFLint is a [Terraform](https://www.terraform.io/) linter focused on possible errors, best practices, etc.\n\n## Why TFLint is required?\n\nTerraform is a great tool for Infrastructure as Code. However, many of these tools don\'t validate provider-specific issues. For example, see the following configuration file:\n\n```hcl\nresource "aws_instance" "foo" {\n  ami           = "ami-0ff8a91507f77f867"\n  instance_type = "t1.2xlarge" # invalid type!\n}\n```\n\nSince `t1.2xlarge` is a nonexistent instance type, an error will occur when you run `terraform apply`. But `terraform plan` and `terraform validate` cannot find this possible error beforehand. That\'s because it\'s an AWS provider-specific issue and it\'s valid as a Terraform configuration.\n\nTFLint finds such errors in advance:\n\n![demo](docs/assets/demo.gif)\n\n## Installation\n\nYou can download the binary built for your architecture from [the latest release](https://github.com/terraform-linters/tflint/releases/latest). The following is an example of installation on macOS:\n\n```console\n$ wget https://github.com/terraform-linters/tflint/releases/download/v0.13.1/tflint_darwin_amd64.zip\n$ unzip tflint_darwin_amd64.zip\nArchive:  tflint_darwin_amd64.zip\n  inflating: tflint\n$ mkdir -p /usr/local/tflint/bin\n$ export PATH=/usr/local/tflint/bin:$PATH\n$ install tflint /usr/local/tflint/bin\n$ tflint -v\n```\n\nFor Linux based OS, you can use the [`install_linux.sh`](https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh) to automate the installation process, or try the following oneliner to download latest binary for AMD64 architecture.\n```\n$ curl -L "$(curl -Ls https://api.github.com/repos/terraform-linters/tflint/releases/latest | grep -o -E "https://.+?_linux_amd64.zip")" -o tflint.zip && unzip tflint.zip && rm tflint.zip\n```\n\n### Homebrew\n\nmacOS users can also use [Homebrew](https://brew.sh) to install TFLint:\n\n```console\n$ brew install tflint\n```\n\n### Docker\n\nYou can also use [TFLint via Docker](https://hub.docker.com/r/wata727/tflint/).\n\n```console\n$ docker run --rm -v $(pwd):/data -t terraform-linters/tflint\n```\n\n## Features\n\n700+ rules are available. See [Rules](docs/rules).\n\n## Limitations\n\nTFLint currently only inspects Terraform-specific issues and AWS issues.\n\nAlso, load configurations in the same way as Terraform v0.12. This means that it cannot inspect configurations that cannot be parsed on Terraform v0.12.\n\nSee [Compatibility with Terraform](docs/guides/compatibility.md) for details.\n\n## Usage\n\nTFLint inspects all configurations under the current directory by default. You can also change the behavior with the following options:\n\n```\n$ tflint --help\nUsage:\n  tflint [OPTIONS] [FILE or DIR...]\n\nApplication Options:\n  -v, --version                             Print TFLint version\n      --langserver                          Start language server\n  -f, --format=[default|json|checkstyle]    Output format (default: default)\n  -c, --config=FILE                         Config file name (default: .tflint.hcl)\n      --ignore-module=SOURCE                Ignore module sources\n      --enable-rule=RULE_NAME               Enable rules from the command line\n      --disable-rule=RULE_NAME              Disable rules from the command line\n      --var-file=FILE                       Terraform variable file name\n      --var=\'foo=bar\'                       Set a Terraform variable\n      --module                              Inspect modules\n      --deep                                Enable deep check mode\n      --aws-access-key=ACCESS_KEY           AWS access key used in deep check mode\n      --aws-secret-key=SECRET_KEY           AWS secret key used in deep check mode\n      --aws-profile=PROFILE                 AWS shared credential profile name used in deep check mode\n      --aws-creds-file=FILE                 AWS shared credentials file path used in deep checking\n      --aws-region=REGION                   AWS region used in deep check mode\n      --force                               Return zero exit status even if issues found\n      --no-color                            Disable colorized output\n\nHelp Options:\n  -h, --help                                Show this help message\n```\n\nSee [User guide](docs/guides) for each option.\n\n## Exit Statuses\n\nTFLint returns the following exit statuses on exit:\n\n- 0: No issues found\n- 2: Errors occurred\n- 3: No errors occurred, but issues found\n\n## FAQ\n### Does TFLint check modules recursively?\n- No. TFLint always checks only the current root module (no recursive check)\n\n## Debugging\n\nIf you don\'t get the expected behavior, you can see the detailed logs when running with `TFLINT_LOG` environment variable.\n\n```console\n$ TFLINT_LOG=debug tflint\n```\n\n## Developing\n\nSee [Developer guide](docs/DEVELOPING.md).\n'