b'# lambda-packs \n\nPrecompiled packages for AWS lambda\n\n## How to start\n\n1. https://aws.amazon.com/lambda/ and create/sign in into account\n2. Lambda > Functions - Create lambda function\n3. Blank function\n4. Configure triggers - Next\n5. Configure function\n  - Runtime - Python 2.7\n6. Lambda function handler and role\n  - Handler - service.handler\n  - Role - Create new role from template(s)\n  - Role name - test\n  - Policy templates - Simple Microservice Permissions\n7. Advanced settings\n  - Memory (MB) 128\n  - Timeout 1 min 0 sec\n6. Code entry type - Upload a .ZIP file - choose Pack.zip from rep\n7. Test -> Save and test\n\n## How to modify\n\n1. Modify service.py file from sources folder\n2. Choose all files in sources folder when compressing, don\'t put it in one folder\n3. Upload zip file on function page\n\n## Current packs\n\n### Selenium PhantomJS\n\n#### Intro\n\nSelenium on PhantomJS. In fact - a ready-made tool for web scraping. For example, the demo now opens a random page in Wikipedia and sends its header. (PhantomJS at the same time disguises itself as a normal browser, knows how to log in, click and fill out forms) Also added requests, so you can do API requests for different resources to discard / take away the information.\n\nUseful for web testing and scraping.\n\n#### Demo\n\nCurrent demo opens random page from wiki (https://en.wikipedia.org/wiki/Special:Random) and prints title.\n\n#### Serverless start\n\n```\ngit clone https://github.com/ryfeus/lambda-packs.git\ncd lambda-packs/Selenium_PhantomJS/source/\nserverless deploy\nserverless invoke --function main --log\n```\n\nYou can also see the results from the API Gateway endpoint in a web browser.\n\n#### Documentation\n\nhttps://selenium-python.readthedocs.io/\n\n\n\n---\n### Pyresttest + WRK\n\n#### Intro\n\nWhat does the lambda have to do with it? In a nutshell on AWS in one region you can simultaneously run 200 lambdas (more if you write to support). Lambda works in 11 regions. So you can run in parallel more than 2000 lambdas, each of which will conduct load testing of your service. Five minutes of such testing will cost just one dollar.\n\n#### Demo\n\nDemo in this package tries to send requests to github.com for 5 seconds with 1 connection and also conduct pyresttest dummy test.\n\n#### Tools\n\n1. WRK (https://github.com/wg/wrk) - the main tool for load testing. It works with multiple threads, you can specify the number of connections and length of the load. For more fine-tuning, you can use LuaJIT scripts (https://www.lua.org/).\n2. Pyrestest (https://github.com/svanoort/pyresttest) is a handy tool for testing the full pipeline of the API. For example, the user registers, then uses the api key to create tasks / make notes / downloads files, then reads them, then deletes them.\n\n#### Documentation\n\nhttps://github.com/wg/wrk\n\nhttps://github.com/svanoort/pyresttest\n\n---\n### Lxml + requests\n\n#### Intro\n\nPackage for parsing static HTML pages. Difference here is that it works faster and consumes less memory than PhantomJS but is limited in terms websites it can parse and other features.\n\n#### Serverless start\n\n```\nserverless install -u https://github.com/ryfeus/lambda-packs/tree/master/Lxml_requests/source -n lxml-requests\ncd lxml-requests\nserverless deploy\nserverless invoke --function main --log\n```\n\n#### Build pack\n\n```\nwget https://github.com/ryfeus/lambda-packs/blob/master/Lxml_requests/buildPack.sh\ndocker pull amazonlinux:latest\ndocker run -v $(pwd):/outputs --name lambdapackgen -d amazonlinux:latest tail -f /dev/null\ndocker exec -i -t lambdapackgen /bin/bash /outputs/buildPack.sh\n```\n\n#### Tools\n\nLxml 3.7.1\n\n#### Documentation\n\nhttp://lxml.de/\n\n---\n### Tensorflow\n\n#### Intro \n\nOpen source library for Machine Intelligence. Basically revolutionized AI and made it more accessible. Using tensorflow on lambda is not as bad as it may sound - for some simple models it is the simplest and the cheapest way to deploy.\n\n#### Demo\n\nAs hello world code I used recognition of images trained on imagenet (https://www.tensorflow.org/tutorials/image_recognition). Given the price tag lambda one run (recognition of one picture) will cost $0.00005. Therefore for a dollar you can recognize 20,000 images. It is much cheaper than almost any alternatives, though completely scalable (200 functions can be run in parallel), and can be easily integrated into cloud infrastructure. Current demo downloads image from link \'imagelink\' from event source ( if empty - then downloads https://s3.amazonaws.com/ryfeuslambda/tensorflow/imagenet/cropped_panda.jpg)\n\n#### Tools\n\nTensorflow 1.4.0\n\n#### Documentation\n\nhttps://www.tensorflow.org/tutorials/image_recognition\n\n#### Nightly version\n\nNightly version archive is more than 50 MB in size but it is still eligible for using with AWS Lambda (though you need to upload pack through S3). For more read here:\n\nhttps://hackernoon.com/exploring-the-aws-lambda-deployment-limits-9a8384b0bec3\n\n#### Serverless start\n\n```\nserverless install -u https://github.com/ryfeus/lambda-packs/tree/master/tensorflow/source -n tensorflow\ncd tensorflow\nserverless deploy\nserverless invoke --function main --log\n```\n\n#### Build pack\n\nfor Python2:\n\n```bash\nwget https://raw.githubusercontent.com/ryfeus/lambda-packs/master/Tensorflow/buildPack.sh\nwget https://raw.githubusercontent.com/ryfeus/lambda-packs/master/Tensorflow/index.py\ndocker pull amazonlinux:latest\ndocker run -v $(pwd):/outputs --name lambdapackgen -d amazonlinux:latest tail -f /dev/null\ndocker exec -i -t lambdapackgen /bin/bash /outputs/buildPack.sh\n```\n\nfor Python3:\n\n```bash\nwget https://raw.githubusercontent.com/ryfeus/lambda-packs/master/Tensorflow/buildPack_py3.sh\nwget https://raw.githubusercontent.com/ryfeus/lambda-packs/master/Tensorflow/index_py3.py\ndocker pull amazonlinux:latest\ndocker run -v $(pwd):/outputs --name lambdapackgen -d amazonlinux:latest tail -f /dev/null\ndocker exec -i -t lambdapackgen /bin/bash /outputs/buildPack_py3.sh\n```\n\n> Note: Remember You should set `python3.6` for AWS Lambda function environment.\n\n#### Layer ARN\n\narn:aws:lambda:us-east-1:339543757547:layer:tensorflow-pack\n\n---\n### Sklearn\n\n#### Intro\n\nPackage for fans of machine learning, building models and the like. I doubt that there is a more convenient way to deploy model to the real world.\n\n#### Tools\n\n1. Scikit-learn 0.17.1\n2. Scipy 0.17.0\n\n#### Documentation\n\nhttp://scikit-learn.org/\n\n---\n### Skimage\n\n#### Intro\n\nPackage of image processing tools, and not only to style image, but also a large set of computer vision algorithms.\n\nThere are currently two zipped packs available, Pack.zip and Pack_nomatplotlib.zip, you probably want to use Pack_nomatplotlib.zip. See https://github.com/ryfeus/lambda-packs/issues/5 for more information.\n\n#### Tools\n\nScikit-image 0.12.3\n\n#### Documentation\n\nhttp://scikit-image.org/\n\n---\n### OpenCV + PIL\n\n#### Intro\n\nAnother package of image processing tools, and not only to style image, but also a large set of Computer vision algorithms.\n\n#### Tools\n\n1. OpenCV 3.1.0\n2. PIL 4.0.0\n\n#### Documentation\n\nhttps://pillow.readthedocs.io/\n\nhttp://docs.opencv.org/3.0-beta/doc/py_tutorials/py_tutorials.html\n\n---\n### Pandas\n\n#### Intro\n\nPackage for fans of statistics, data scientists and data engineers. RAM at lambda is 1.5 gigabytes, and the maximum operating time - 5 minutes. I am sure that will be enough for most tasks.\n\n#### Tools\n\nPandas 0.19.0\n\n#### Documentation\n\nhttp://pandas.pydata.org/\n\n---\n### Spacy\n\n#### Intro\n\nOpensource library for Natural Language Processing in python.\n\n#### Tools\n\n1. Spacy 2.0.11\n\n#### Documentation\n\nhttps://spacy.io/\n\n#### Example\n\nExample code loads language model from S3 and uses it to analyze sentence.\n\n---\n### Tesseract\n\n#### Intro\n\nOCR (optical character recognition) library for text recognition from the image.\n\n#### Documentation\n\nhttps://github.com/tesseract-ocr/tesseract\n\n---\n\n### PDF generator + Microsoft office file generator (docx, xlsx, pptx) + image generator (jpg, png) + book generator (epub)\n\n#### Intro\n\n"Hello world" code in package creates example of every document. Basically these libs are low memory (less than 128MB) and high speed (less than 0.5 seconds) so it\'s something like ~1m documents generated per 1$ in terms of AWS Lambda pricing.\n\n#### Tools\n\n- docx (python-docx - https://pypi.python.org/pypi/python-docx)\n- xlsx (XlsxWriter - https://pypi.python.org/pypi/XlsxWriter)\n- pptx (python-pptx - https://pypi.python.org/pypi/python-pptx)\n- pdf (Reportlab - https://pypi.python.org/pypi/reportlab)\n- epub (EbookLib - https://pypi.python.org/pypi/EbookLib)\n- png/jpg/... (Pillow - https://pypi.python.org/pypi/Pillow)\n\n\n---\n\n### Satellite imagery processing (rasterio + OSGEO + pyproj + shapely + PIL)\n\n#### Intro\n\nAWS Lambda pack in Python for processing satellite imagery. Basically it enables to deploy python code in an easy and cheap way for processing satellite imagery or polygons. In \xe2\x80\x9chello world\xe2\x80\x9d code of the pack I download red, green, blue Landsat 8 bands from AWS, make True Color image out of it and upload it to S3. It takes 35 seconds and 824MB of RAM for it so ~2500 scenes can be processed for 1$.\n\n#### Tools\n\n- Rasterio (https://github.com/mapbox/rasterio 0.36)\n- OSGEO (https://trac.osgeo.org/gdal/wiki/GdalOgrInPython)\n- Pyproj (https://github.com/jswhit/pyproj)\n- Shapely (https://github.com/Toblerity/Shapely)\n- PIL (https://pillow.readthedocs.io/)\n\n---\n\n### PyTorch\n\nPython 3.6 based PyTorch\n\n#### Tools\n\n- PyTorch 1.0.1 (CPU)\n- torchvision 0.2.1\n\n#### Installed Packages (deps)\n\n- numpy-1.16.1 \n- pillow-5.4.1 \n- six-1.12.0 \n- torchvision-0.2.1\n\n#### Build Pack\n\n```bash\n# You need `docker` before run\n./build-with-docker.sh\n```\n'