b'CloudMapper\n========\n[![Build Status](https://travis-ci.org/duo-labs/cloudmapper.svg?branch=master)](https://travis-ci.org/duo-labs/cloudmapper)\n\nCloudMapper helps you analyze your Amazon Web Services (AWS) environments.  The original purpose was to generate network diagrams and display them in your browser.  It now contains much more functionality, including auditing for security issues.\n\n- [Network mapping demo](https://duo-labs.github.io/cloudmapper/)\n- [Report demo](https://duo-labs.github.io/cloudmapper/account-data/report.html)\n- [Intro post](https://duo.com/blog/introducing-cloudmapper-an-aws-visualization-tool)\n- [Post to show spotting misconfigurations in networks](https://duo.com/blog/spotting-misconfigurations-with-cloudmapper)\n- [Post on performing continuous auditing](https://duo.com/blog/continuous-auditing-with-cloudmapper)\n\n# Commands\n\n- `audit`: Check for potential misconfigurations.\n- `collect`: Collect metadata about an account. More details [here](https://summitroute.com/blog/2018/06/05/cloudmapper_collect/).\n- `find_admins`: Look at IAM policies to identify admin users and roles, or principals with specific privileges. More details [here](https://summitroute.com/blog/2018/06/12/cloudmapper_find_admins/).\n- `find_unused`: Look for unused resources in the account.  Finds unused Security Groups, Elastic IPs, network interfaces, volumes and elastic load balancers.\n- `prepare`/`webserver`: See [Network Visualizations](docs/network_visualizations.md)\n- `public`: Find public hosts and port ranges. More details [here](https://summitroute.com/blog/2018/06/13/cloudmapper_public/).\n- `sg_ips`: Get geoip info on CIDRs trusted in Security Groups. More details [here](https://summitroute.com/blog/2018/06/12/cloudmapper_sg_ips/).\n- `stats`: Show counts of resources for accounts. More details [here](https://summitroute.com/blog/2018/06/06/cloudmapper_stats/).\n- `weboftrust`: Show Web Of Trust. More details [here](https://summitroute.com/blog/2018/06/13/cloudmapper_wot/).\n- `report`: Generate HTML report. Includes summary of the accounts and audit findings. More details [here](https://summitroute.com/blog/2019/03/04/cloudmapper_report_generation/).\n- `iam_report`: Generate HTML report for the IAM information of an account. More details [here](https://summitroute.com/blog/2019/03/11/cloudmapper_iam_report_command/).\n\n\nIf you want to add your own private commands, you can create a `private_commands` directory and add them there.\n\n# Screenshots\n\n<img src="https://raw.githubusercontent.com/duo-labs/cloudmapper/master/docs/images/ideal_layout.png" width=100% alt="Ideal layout">\n<table border=0>\n<tr><td>\n<img src="https://raw.githubusercontent.com/duo-labs/cloudmapper/master/docs/images/report_resources.png" alt="Report screenshot">\n<td><img src="https://raw.githubusercontent.com/duo-labs/cloudmapper/master/docs/images/report_findings_summary.png" alt="Findings summary">\n<tr><td>\n<img src="https://raw.githubusercontent.com/duo-labs/cloudmapper/master/docs/images/report_findings.png" alt="Findings">\n<td><img src="https://raw.githubusercontent.com/duo-labs/cloudmapper/master/docs/images/iam_report-inactive_and_detail.png" alt="IAM report">\n<tr><td>\n<img src="https://raw.githubusercontent.com/duo-labs/cloudmapper/master/docs/images/command_line_audit.png" alt="Command-line audit">\n<td><img src="https://raw.githubusercontent.com/duo-labs/cloudmapper/master/docs/images/command_line_public.png" alt="Command-line public command">\n</table>\n\n\n## Installation\n\nRequirements:\n- python 3 (3.7.0rc1 is known to work), `pip`, and `virtualenv`\n- You will also need `jq` (https://stedolan.github.io/jq/) and the library `pyjq` (https://github.com/doloopwhile/pyjq), which require some additional tools installed that will be shown.\n\nOn macOS:\n\n```\n# clone the repo\ngit clone https://github.com/duo-labs/cloudmapper.git\n# Install pre-reqs for pyjq\nbrew install autoconf automake libtool jq awscli python3 pipenv\ncd cloudmapper/\npipenv install --skip-lock\npipenv shell\n```\n\nOn Linux:\n```\n# clone the repo\ngit clone https://github.com/duo-labs/cloudmapper.git\n# (AWS Linux, Centos, Fedora, RedHat etc.):\n# sudo yum install autoconf automake libtool python3-devel.x86_64 python3-tkinter python-pip jq awscli\n# (Debian, Ubuntu etc.):\n# You may additionally need "build-essential"\nsudo apt-get install autoconf automake libtool python3.7-dev python3-tk jq awscli\ncd cloudmapper/\npipenv install --skip-lock\npipenv shell\n```\n\n\n## Run with demo data\n\nA small set of demo data is provided.  This will display the same environment as the demo site https://duo-labs.github.io/cloudmapper/ \n\n```\n# Generate the data for the network map\npython cloudmapper.py prepare --config config.json.demo --account demo\n# Generate a report\npython cloudmapper.py report --config config.json.demo --account demo\npython cloudmapper.py webserver\n```\n\nThis will run a local webserver at http://127.0.0.1:8000/\nView the network map from that link, or view the report at http://127.0.0.1:8000/account-data/report.html\n\n\n# Setup\n\n1. Configure information about your account.\n2. Collect information about an AWS account.\n\n## 1. Configure your account\n\nCopy the `config.json.demo` to `config.json` and edit it to include your account ID and name (ex. "prod"), along with any external CIDR names. A CIDR is an IP range such as `1.2.3.4/32` which means only the IP `1.2.3.4`.\n\n## 2. Collect data about the account\n\nThis step uses the CLI to make `describe` and `list` calls and records the json in the folder specified by the account name under `account-data`.\n\n### AWS Privileges required\nYou must have AWS credentials configured that can be used by the CLI with read permissions for the different metadata to collect.  I recommend using [aws-vault](https://github.com/99designs/aws-vault).  CloudMapper will collect IAM information, which means you MUST use MFA.  Only the `collect` step requires AWS access.\n\nYou must have the following privileges (these grant various read access of metadata):\n\n- `arn:aws:iam::aws:policy/SecurityAudit`\n- `arn:aws:iam::aws:policy/job-function/ViewOnlyAccess`\n\n\n### Collect the data\n\nCollecting the data is done as follows:\n\n```\npython cloudmapper.py collect --account my_account\n```\n\n## Analyze the data\nFrom here, try running the different commands, such as:\n\n```\npython cloudmapper.py report --account my_account\npython cloudmapper.py webserver\n```\n\nThen view the report in your browser at 127.0.0.1:8000/account-data/report.html\n\n\n\n## Further configuration\n\n### Generating a config file\nInstead of modifying `config.json` directly, there is a command to configure the data there, in case that is needed:\n\n```\npython cloudmapper.py configure {add-account|remove-account} --config-file CONFIG_FILE --name NAME --id ID [--default DEFAULT]\npython cloudmapper.py configure {add-cidr|remove-cidr} --config-file CONFIG_FILE --cidr CIDR --name NAME\n```\n\nThis will allow you to define the different AWS accounts you use in your environment and the known CIDR IPs.\n\n\n### Using audit config overrides\nYou may find that you don\'t care about some of audit items. You may want to ignore the check entirely, or just specific resources.  Copy `config/audit_config_override.yaml.example` to `config/audit_config_override.yaml` and edit the file based on the comments in there.\n\n\n# Using a Docker container\nThe docker container that is created is meant to be used interactively.\n\n```\ndocker build -t cloudmapper .\naws-vault exec YOUR_PROFILE --server --\ndocker run -p 8000:8000 -it cloudmapper /bin/bash\n```\n\nYou shoudl replace `YOUR_PROFILE` with the profile you\'ve configured for aws-vault. Inside the container run `aws sts get-caller-identity` to confirm this was setup correctly.\n\n```\npipenv shell\npython cloudmapper.py report --accout demo\npython cloudmapper.py webserver --public\n```\n\nYou should then be able to view the report by visiting http://127.0.0.1:8000/account-data/report.html\n\n# Running CloudMapper regularly to audit your environment\nA CDK app for deploying CloudMapper via Fargate so that it runs nightly, sends audit findings as alerts to a Slack channel, and generating a report that is saved on S3, is described [here](auditor/README.md).\n\n\n# Alternatives\nFor network diagrams, you may want to try https://github.com/lyft/cartography or https://github.com/anaynayak/aws-security-viz\n\nFor auditng and other AWS security tools see https://github.com/toniblyx/my-arsenal-of-aws-security-tools\n\nLicenses\n--------\n- cytoscape.js: MIT\n  https://github.com/cytoscape/cytoscape.js/blob/master/LICENSE\n- cytoscape.js-qtip: MIT\n  https://github.com/cytoscape/cytoscape.js-qtip/blob/master/LICENSE\n- cytoscape.js-grid-guide: MIT\n  https://github.com/iVis-at-Bilkent/cytoscape.js-grid-guide\n- cytoscape.js-panzoom: MIT\n  https://github.com/cytoscape/cytoscape.js-panzoom/blob/master/LICENSE\n- jquery: JS Foundation\n  https://github.com/jquery/jquery/blob/master/LICENSE.txt\n- jquery.qtip: MIT\n  https://github.com/qTip2/qTip2/blob/master/LICENSE\n- cytoscape-navigator: MIT\n  https://github.com/cytoscape/cytoscape.js-navigator/blob/c249bd1551c8948613573b470b30a471def401c5/bower.json#L24\n- cytoscape.js-autopan-on-drag: MIT\n  https://github.com/iVis-at-Bilkent/cytoscape.js-autopan-on-drag\n- font-awesome: MIT\n  http://fontawesome.io/\n- FileSave.js: MIT\n  https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md\n- circular-json: MIT\n  https://github.com/WebReflection/circular-json/blob/master/LICENSE.txt\n- rstacruz/nprogress: MIT\n  https://github.com/rstacruz/nprogress/blob/master/License.md\n- mousetrap: Apache\n  https://github.com/ccampbell/mousetrap/blob/master/LICENSE\n- akkordion MIT\n  https://github.com/TrySound/akkordion/blob/master/LICENSE\n'