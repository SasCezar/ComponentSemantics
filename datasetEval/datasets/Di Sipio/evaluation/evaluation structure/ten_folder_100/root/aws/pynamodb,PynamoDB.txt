b'========\nPynamoDB\n========\n\n.. image:: https://img.shields.io/pypi/v/pynamodb.svg\n    :target: https://pypi.python.org/pypi/pynamodb/\n.. image:: https://img.shields.io/conda/vn/conda-forge/pynamodb.svg\n    :target: https://anaconda.org/conda-forge/pynamodb\n.. image:: https://img.shields.io/travis/pynamodb/PynamoDB/master.svg\n    :target: https://travis-ci.org/pynamodb/PynamoDB\n.. image:: https://img.shields.io/coveralls/pynamodb/PynamoDB/master.svg\n    :target: https://coveralls.io/r/pynamodb/PynamoDB\n\nA Pythonic interface for Amazon\'s `DynamoDB <http://aws.amazon.com/dynamodb/>`_ that supports\nPython 2 and 3.\n\nDynamoDB is a great NoSQL service provided by Amazon, but the API is verbose.\nPynamoDB presents you with a simple, elegant API.\n\nUseful links:\n\n* See the full documentation at https://pynamodb.readthedocs.io/\n* Ask questions at `Google group <https://groups.google.com/forum/#!forum/pynamodb>`_\n* See release notes at https://pynamodb.readthedocs.io/en/latest/release_notes.html\n\nInstallation\n============\nFrom PyPi::\n\n    $ pip install pynamodb\n\nFrom GitHub::\n\n    $ pip install git+https://github.com/pynamodb/PynamoDB#egg=pynamodb\n\nFrom conda-forge::\n    \n    $ conda install -c conda-forge pynamodb\n\nUpgrading\n=========\n\n.. warning::\n\n    The behavior of \'UnicodeSetAttribute\' has changed in backwards-incompatible ways\n    as of the 1.6.0 and 3.0.1 releases of PynamoDB.\n\nThe following steps can be used to safely update PynamoDB assuming that the data stored\nin the item\'s UnicodeSetAttribute is not JSON. If JSON is being stored, these steps will\nnot work and a custom migration plan is required. Be aware that values such as numeric\nstrings (i.e. "123") are valid JSON.\n\nWhen upgrading services that use PynamoDB with tables that contain UnicodeSetAttributes\nwith a version < 1.6.0, first deploy version 1.5.4 to prepare the read path for the new\nserialization format.\n\nOnce all services that read from the tables have been deployed, then deploy version 2.2.0\nand migrate your data using the provided convenience methods on the Model.\n(Note: these methods are only available in version 2.2.0)\n\n.. code-block:: python\n\n    def get_save_kwargs(item):\n        # any conditional args needed to ensure data does not get overwritten\n        # for example if your item has a `version` attribute\n        {\'version__eq\': item.version}\n\n    # Re-serialize all UnicodeSetAttributes in the table by scanning all items.\n    # See documentation of fix_unicode_set_attributes for rate limiting options\n    # to avoid exceeding provisioned capacity.\n    Model.fix_unicode_set_attributes(get_save_kwargs)\n\n    # Verify the migration is complete\n    print("Migration Complete? " + Model.needs_unicode_set_fix())\n\nOnce all data has been migrated then upgrade to a version >= 3.0.1.\n\nBasic Usage\n===========\n\nCreate a model that describes your DynamoDB table.\n\n.. code-block:: python\n\n    from pynamodb.models import Model\n    from pynamodb.attributes import UnicodeAttribute\n\n    class UserModel(Model):\n        """\n        A DynamoDB User\n        """\n        class Meta:\n            table_name = "dynamodb-user"\n        email = UnicodeAttribute(null=True)\n        first_name = UnicodeAttribute(range_key=True)\n        last_name = UnicodeAttribute(hash_key=True)\n\nPynamoDB allows you to create the table if needed (it must exist before you can use it!):\n\n.. code-block:: python\n\n    UserModel.create_table(read_capacity_units=1, write_capacity_units=1)\n\nCreate a new user:\n\n.. code-block:: python\n\n    user = UserModel("John", "Denver")\n    user.email = "djohn@company.org"\n    user.save()\n\nNow, search your table for all users with a last name of \'John\' and whose\nfirst name begins with \'D\':\n\n.. code-block:: python\n\n    for user in UserModel.query("Denver", UserModel.first_name.startswith("J")):\n        print(user.first_name)\n\nExamples of ways to query your table with filter conditions:\n\n.. code-block:: python\n\n    for user in UserModel.query("Denver", UserModel.email=="djohn@company.org"):\n        print(user.first_name)\n\n.. code-block:: python\n\n    for user in UserModel.query("Denver", UserModel.email=="djohn@company.org"):\n        print(user.first_name)\n\nRetrieve an existing user:\n\n.. code-block:: python\n\n    try:\n        user = UserModel.get("John", "Denver")\n        print(user)\n    except UserModel.DoesNotExist:\n        print("User does not exist")\n\nAdvanced Usage\n==============\n\nWant to use indexes? No problem:\n\n.. code-block:: python\n\n    from pynamodb.models import Model\n    from pynamodb.indexes import GlobalSecondaryIndex, AllProjection\n    from pynamodb.attributes import NumberAttribute, UnicodeAttribute\n\n    class ViewIndex(GlobalSecondaryIndex):\n        class Meta:\n            read_capacity_units = 2\n            write_capacity_units = 1\n            projection = AllProjection()\n        view = NumberAttribute(default=0, hash_key=True)\n\n    class TestModel(Model):\n        class Meta:\n            table_name = "TestModel"\n        forum = UnicodeAttribute(hash_key=True)\n        thread = UnicodeAttribute(range_key=True)\n        view = NumberAttribute(default=0)\n        view_index = ViewIndex()\n\nNow query the index for all items with 0 views:\n\n.. code-block:: python\n\n    for item in TestModel.view_index.query(0):\n        print("Item queried from index: {0}".format(item))\n\nIt\'s really that simple.\n\n\nWant to use DynamoDB local? Just add a ``host`` name attribute and specify your local server.\n\n.. code-block:: python\n\n    from pynamodb.models import Model\n    from pynamodb.attributes import UnicodeAttribute\n\n    class UserModel(Model):\n        """\n        A DynamoDB User\n        """\n        class Meta:\n            table_name = "dynamodb-user"\n            host = "http://localhost:8000"\n        email = UnicodeAttribute(null=True)\n        first_name = UnicodeAttribute(range_key=True)\n        last_name = UnicodeAttribute(hash_key=True)\n\nWant to enable streams on a table? Just add a ``stream_view_type`` name attribute and specify\nthe type of data you\'d like to stream.\n\n.. code-block:: python\n\n    from pynamodb.models import Model\n    from pynamodb.attributes import UnicodeAttribute\n    from pynamodb.constants import STREAM_NEW_AND_OLD_IMAGE\n\n    class AnimalModel(Model):\n        """\n        A DynamoDB Animal\n        """\n        class Meta:\n            table_name = "dynamodb-user"\n            host = "http://localhost:8000"\n            stream_view_type = STREAM_NEW_AND_OLD_IMAGE\n        type = UnicodeAttribute(null=True)\n        name = UnicodeAttribute(range_key=True)\n        id = UnicodeAttribute(hash_key=True)\n\nWant to backup and restore a table? No problem.\n\n.. code-block:: python\n\n    # Backup the table\n    UserModel.dump("usermodel_backup.json")\n\n    # Restore the table\n    UserModel.load("usermodel_backup.json")\n\n\nFeatures\n========\n\n* Python >= 3.3, and 2.7 support\n* An ORM-like interface with query and scan filters\n* Compatible with DynamoDB Local\n* Supports the entire DynamoDB API\n* Full table backup/restore\n* Support for Unicode, Binary, JSON, Number, Set, and UTC Datetime attributes\n* Support for Global and Local Secondary Indexes\n* Provides iterators for working with queries, scans, that are automatically paginated\n* Automatic pagination for bulk operations\n* Complex queries\n* Batch operations with automatic pagination\n* Iterators for working with Query and Scan operations\n\n'