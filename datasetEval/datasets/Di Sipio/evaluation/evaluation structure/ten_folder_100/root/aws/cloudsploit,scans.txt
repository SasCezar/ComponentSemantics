b'[<img src="https://cloudsploit.com/images/logos/text-color-black-png.png" height="130">](https://cloudsploit.com)\n\n[![Build Status](https://travis-ci.org/cloudsploit/scans.svg?branch=master)](https://travis-ci.org/cloudsploit/scans)\n[![Known Vulnerabilities](https://snyk.io/test/github/cloudsploit/scans/badge.svg)](https://snyk.io/test/github/cloudsploit/scans)\n\nCloudSploit Scans\n=================\n\n## Background\nCloudSploit scans is an open-source project designed to allow detection of security risks in cloud infrastructure accounts. These scripts are designed to return a series of potential misconfigurations and security risks.\n\n## SaaS Product\n\nCloudSploit provides free and paid hosted versions of the cloud security scanner with numerous additional features:\n\n[<img src="https://cloudsploit.com/images/pricing-new.png">](https://console.cloudsploit.com/signup)\n\n## Installation\nEnsure that NodeJS is installed. If not, install it from [here](https://nodejs.org/download/).\n\n```\ngit clone git@github.com:cloudsploit/scans.git\n```\n\n```\nnpm install\n```\n\n## Configuration\nTo begin using the scanner, edit the `index.js` file with the corresponding settings. You can use any of these three options:\n * Enter your settings [inline](https://github.com/cloudsploit/scans/blob/master/index.js#L13-L53).\n * Create a json [file](https://github.com/cloudsploit/scans/blob/master/index.js#L57-L61).\n * Use [environment variables](https://github.com/cloudsploit/scans/blob/master/index.js#L64-L109). \n\nCloud Infrastructure configuration steps:\n\n* [AWS](#aws)\n* [Azure](#azure) \n\n#### AWS\n\nCreate a "cloudsploit" user, with the `SecurityAudit` policy.\n\n\n1. Navigate to the [IAM console](https://console.aws.amazon.com/iam/home).\n1. Go to Users \n1. Create a new user (Add user) \n1. Set the username to "cloudsploit" \n1. Set the access type to "Programmatic access", click Next.\n1. Select one of your preferred options, if you have a group with SecurityAudit role assign the new user to that group.\n1. If not select the "Attach existing policies directly" and select the SecurityAudit policy, click Next.\n1. Set tags as needed and then click on "Create user".\n1. Make sure you safely store the Access key ID and Secret access key.\n1. Paste them into the corresponding AWS credentials section of the `index.js` file.\n\n \nIf using environment variables, the same ones expected by the aws sdks, namely `AWS_ACCESS_KEY_ID`, `AWS_SECRET_ACCESS_KEY`, and `AWS_SESSION_TOKEN`, can be used.\n\nFor more information on using our hosted scanner, [click here](#other-notes)\n\n#### Azure\n\n1. Log into your Azure Portal and navigate to the Azure Active Directory service.\n1. Select App registrations and then click on New registration.\n1. Enter "CloudSploit" and/or a descriptive name in the Name field, take note of it, it will be used again in step 3.\n1. Leave the "Supported account types" default: "Accounts in this organizational directory only (YOURDIRECTORYNAME)".\n1. Click on Register.\n1. Copy the Application ID and Paste it below.\n1. Copy the Directory ID and Paste it below.\n1. Click on Certificates & secrets.\n1. Under Client secrets, click on New client secret.\n1. Enter a Description (i.e. Cloudsploit-2019) and select Expires "In 1 year".\n1. Click on Add.\n1. The Client secret value appears only once, make sure you store it safely.\n1. Navigate to Subscriptions.\n1. Click on the relevant Subscription ID, copy and paste the ID below.\n1. Click on "Access Control (IAM)".\n1. Go to the Role assignments tab.\n1. Click on "Add", then "Add role assignment".\n1. In the "Role" drop-down, select "Security Reader".\n1. Leave the "Assign access to" default value.\n1. In the "Select" drop-down, type the name of the app registration (e.g. "CloudSploit") you created and select it.\n1. Click "Save".\n1. Repeat the process for the role "Log Analytics Reader"\n\n\n## Running\n\nTo run a standard scan, showing all outputs and results, simply run:\n\n```\nnode index.js\n```\n\nIn the list of plugins in the `exports.js` file, comment out any plugins you do not wish to run. You can also skip entire regions by modifying the `skipRegions` array.\n\n\n## Compliance\n\nCloudSploit also supports mapping of its plugins to particular compliance policies. To run the compliance scan, use the `--compliance` flag. For example:\n```\nnode index.js --compliance=hipaa\nnode index.js --compliance=pci\n```\n\nCloudSploit currently supports the following compliance mappings:\n\n### HIPAA\n\nHIPAA scans map CloudSploit plugins to the Health Insurance Portability and Accountability Act of 1996.\n\n### PCI\n\nPCI scans map CloudSploit plugins to the Payment Card Industry Data Security Standard.\n\n## Output Formats\n\nCloudSploit supports output in several formats for consumption by other tools.\nIf you do not specify otherwise, CloudSploit writes output to standard output\n(the console). You can specify one or more output formats as follows:\n\n```\n# Output results in CSV (suppressing the console output)\nnode index.js --csv=./out.csv\n\n# Output results in JUnit XML (suppressing the console output)\nnode index.js --junit=./out.xml\n\n# Output results only to the console (default if omitted)\nnode index.js --console\n\n# Output results in all supported formats\nnode index.js --console --junit=./out.xml --csv=./out.csv\n```\n\n## Architecture\n\nCloudSploit works in two phases. First, it queries the cloud infrastructure APIs for various metadata about your account, namely the "collection" phase. Once all the necessary data is collected, the result is passed to the "scanning" phase. The scan uses the collected data to search for potential misconfigurations, risks, and other security issues, which are the resulting output.\n## Writing a Plugin  \n\n### Collection Phase  \n\nTo write a plugin, you want to understand which data is needed and how your cloud infrastructure provides them via their API calls. Once you have identified the API calls needed, you can add them to the collect.js file for your cloud infrastructure provider. This file determines the cloud infrastructure API calls and their run-order.\n\n### Collectors\n\n* [AWS Collecttion](#aws-collection)\n* [Azure Collecttion](#azure-collection)\n\n#### AWS Collection\n\nThe following declaration tells the CloudSploit collection engine to query the CloudFront service using the `listDistributions` call and then save the results returned under `DistributionList.Items`.\n\n```\nCloudFront: {\n  listDistributions: {\n    property: \'DistributionList\',\n    secondProperty: \'Items\'\n  }\n},\n```\n\nThe second section in `collect.js` is `postcalls`, which is an array of objects defining API calls that rely on other calls first returned. For example, if you need to query for all `CloudFront distributions`, and then loop through each one and run a more detailed call, you would add the `CloudFront:listDistributions` call in the [`calls`](https://github.com/cloudsploit/scans/blob/master/collectors/aws/collector.js#L58-L64) section and then the more detailed call in [`postcalls`](https://github.com/cloudsploit/scans/blob/master/collectors/aws/collector.js#L467-L473), setting it to rely on the output of `listDistributions` call.\n\nAn example:  \n\n```\ngetGroup: {\n  reliesOnService: \'iam\',\n  reliesOnCall: \'listGroups\',\n  filterKey: \'GroupName\',\n  filterValue: \'GroupName\'\n},\n```\n\nThis section tells CloudSploit to wait until the `IAM:listGroups` call has been made, and then loop through the data that is returned. The `filterKey` tells CloudSploit the name of the key from the original response, while `filterValue` tells it which property to set in the `getGroup` call filter. For example: `iam.getGroup({GroupName:abc})` where `abc` is the `GroupName` from the returned list. CloudSploit will loop through each response, re-invoking `getGroup` for each element.\n\nYou can find the [AWS Collector here.](https://github.com/cloudsploit/scans/blob/master/collectors/aws/collector.js)\n\n#### Azure Collection\n\nThe following declaration tells the Cloudsploit collection engine to query the Compute Management Service using the virtualMachines:listAll call.\n\n```\nvirtualMachines: {\n  listAll: {\n    api: "ComputeManagementClient",\n    arm: true\n  }\n},\n```\n\nThe second section in `collect.js` is `postcalls`, which is an array of objects defining API calls that rely on other calls first returned. For example, if you need to query for all `Virtual Machine instances`, and then loop through each one and run a more detailed call, you would add the `virtualMachines:listAll` call in the [`calls`](https://github.com/cloudsploit/scans/blob/master/collectors/azure/collector.js#L50-L55) section and then the more detailed call in [`postcalls`](https://github.com/cloudsploit/scans/blob/master/collectors/azure/collector.js#L293-L302), setting it to rely on the output of `listDistributions` call.\n\n```\nvirtualMachineExtensions: {\n  list: {\n    api: "ComputeManagementClient",\n    reliesOnService: [\'resourceGroups\', \'virtualMachines\'],\n    reliesOnCall: [\'list\', \'listAll\'],\n    filterKey: [\'resourceGroupName\', \'name\'],\n    filterValue: [\'resourceGroupName\', \'name\'],\n    arm: true\n  }\n},\n```\n\nYou can find the [Azure Collector here.](https://github.com/cloudsploit/scans/blob/master/collectors/azure/collector.js)\n\n### Scanning Phase\n\nAfter the data has been collected, it is passed to the scanning engine when the results are analyzed for risks. Each plugin must export the following:\n\n* Exports the following:\n  * ```title``` (string): a user-friendly title for the plugin\n  * ```category``` (string): the cloud infrastructure category (i.e.: **_AWS:_** EC2, RDS, ELB, etc. **_Azure:_** )\n  * ```description``` (string): a description of what the plugin does\n  * ```more_info``` (string): a more detailed description of the risk being tested for\n  * ```link``` (string): an cloud infrastructure help URL describing the service or risk, preferably with mitigation methods\n  * ```recommended_action``` (string): what the user should do to mitigate the risk found\n  * ```run``` (function): a function that runs the test (see below)\n* Accepts a ```collection``` object via the run function containing the full collection object obtained in the first phase.\n* Calls back with the results and the data source.\n\n### Result Codes\nEach test has a result code that is used to determine if the test was successful and its risk level. The following codes are used:\n\n* 0: PASS: No risks\n* 1: WARN: The result represents a potential misconfiguration or issue but is not an immediate risk\n* 2: FAIL: The result presents an immediate risk to the security of the account\n* 3: UNKNOWN: The results could not be determined (API failure, wrong permissions, etc.)\n\n### Tips for Writing Plugins\n* Many security risks can be detected using the same API calls. To minimize the number of API calls being made, utilize the `cache` helper function to cache the results of an API call made in one test for future tests. For example, two plugins: "s3BucketPolicies" and "s3BucketPreventDelete" both call APIs to list every S3 bucket. These can be combined into a single plugin "s3Buckets" which exports two tests called "bucketPolicies" and "preventDelete". This way, the API is called once, but multiple tests are run on the same results.\n* Ensure cloud infrastructure API calls are being used optimally. For example, call describeInstances with empty parameters to get all instances, instead of calling describeInstances multiple times looping through each instance name.\n* Use async.eachLimit to reduce the number of simultaneous API calls. Instead of using a for loop on 100 requests, spread them out using async\'s each limit.\n\n### Example\n#### AWS\nTo more clearly illustrate writing a new plugin, let\'s consider the "IAM Empty Groups" plugin. First, we know that we will need to query for a list of groups via `listGroups`, then loop through each group and query for the more detailed set of data via `getGroup`.\n\nWe\'ll add these API calls to `collect.js`. First, under `calls` add:\n```\nIAM: {\n  listGroups: {\n    property: \'Groups\'\n  }\n},\n```\nThe `property` tells CloudSploit which property to read in the response from AWS.\n\nThen, under `postCalls`, add:\n```\nIAM: {\n  getGroup: {\n    reliesOnService: \'iam\',\n    reliesOnCall: \'listGroups\',\n    filterKey: \'GroupName\',\n    filterValue: \'GroupName\'\n  }\n},\n```\nCloudSploit will first get the list of groups, then, it will loop through each one, using the group name to get more detailed info via `getGroup`.\n\nNext, we\'ll write the plugin. Create a new file in the `plugins/iam` folder called `emptyGroups.js` (this plugin already exists, but you can create a similar one for the purposes of this example).\n\nIn the file, we\'ll be sure to export the plugin\'s title, category, description, link, and more information about it. Additionally, we will add any API calls it makes:\n```\napis: [\'IAM:listGroups\', \'IAM:getGroup\'],\n```\nIn the `run` function, we can obtain the output of the collection phase from earlier by doing:\n```\nvar listGroups = helpers.addSource(cache, source,\n        [\'iam\', \'listGroups\', region]);\n```\nThen, we can loop through each of the results and do:\n```\nvar getGroup = helpers.addSource(cache, source,\n  [\'iam\', \'getGroup\', region, group.GroupName]);\n```\nThe `helpers` function ensures that the proper results are returned from the collection and that they are saved into a "source" variable which can be returned with the results.\n\nNow, we can write the plugin functionality by checking for the data relevant to our requirements:\n```\nif (!getGroup || getGroup.err || !getGroup.data || !getGroup.data.Users) {\n  helpers.addResult(results, 3, \'Unable to query for group: \' + group.GroupName, \'global\', group.Arn);\n} else if (!getGroup.data.Users.length) {\n  helpers.addResult(results, 0, \'Group: \' + group.GroupName + \' does not contain any users\', \'global\', group.Arn);\n  return cb();\n} else {\n  helpers.addResult(results, 0, \'Group: \' + group.GroupName + \' contains \' + getGroup.data.Users.length + \' user(s)\', \'global\', group.Arn);\n}\n```\nThe `addResult` function ensures we are adding the results to the `results` array in the proper format. This function accepts the following:\n```\n(results array, score, message, region, resource)\n```\nThe `resource` is optional, and the `score` must be between 0 and 3 to indicate PASS, WARN, FAIL, or UNKNOWN.\n\n#### Azure\nTo more clearly illustrate writing a new plugin, let us consider the Virtual Machines VM Endpoint Protection plugin `plugins/azure/virtualmachines/vmEndpointProtection.js` . First, we know that we will need to query for a list of virtual machines via `virtualMachines:listAll`, then loop through each group and query for the more detailed set of data via `virtualMachineExtensions:list`.\n\nWe\'ll add these API calls to `collect.js`. First, under `calls` add:\n\n```\nvirtualMachines: {\n  listAll: {\n    api: "ComputeManagementClient",\n    arm: true\n  }\n},\n```\n\nThen, under `postcalls`, add:\n```\nvirtualMachineExtensions: {\n  list: {\n    api: "ComputeManagementClient",\n    reliesOnService: [\'resourceGroups\', \'virtualMachines\'],\n    reliesOnCall: [\'list\', \'listAll\'],\n    filterKey: [\'resourceGroupName\', \'name\'],\n    filterValue: [\'resourceGroupName\', \'name\'],\n    arm: true\n  }\n},\n```\nCloudSploit will first get the list of virtual machines, then, it will loop through each one, using the virtual machine name to get more detailed info via `virtualMachineExtensions`.\n\nNext, we\'ll write the plugin. Create a new file in the `plugins/virtualmachines` folder called `vmEndpointProtection.js` (this plugin already exists, but you can create a similar one for the purposes of this example).\n\nIn the file, we\'ll be sure to export the plugin\'s title, category, description, link, and more information about it. Additionally, we will add any API calls it makes:\n```\napis: [\'resourceGroups:list\', \'virtualMachines:listAll\', \'virtualMachineExtensions:list\'],\n```\nIn the `run` function, we can obtain the output of the collection phase from earlier by doing:\n```\nvar virtualMachines = helpers.addSource(cache, source, \n        [\'virtualMachines\', \'listAll\', location]);\n```\nThen, we can loop through each of the results and do:\n```\nvar virtualMachineExtensions = helpers.addSource(cache, source,     [\'virtualMachineExtensions\', \'list\', location]);\n```\nThe `helpers` function ensures that the proper results are returned from the collection and that they are saved into a "source" variable which can be returned with the results.\n\nNow, we can write the plugin functionality by checking for the data relevant to our requirements:\n```\nif (virtualMachineExtensions.err || !virtualMachineExtensions.data) {\n    helpers.addResult(results, 3, \n        Unable to query for VM Extensions: \' + helpers.addError(virtualMachineExtensions), location);\n                return rcb();\n}\nif (!virtualMachineExtensions.data.length) {\n    helpers.addResult(results, 0, \'No VM Extensions found\', location);\n}\n```\nThe `addResult` function ensures we are adding the results to the `results` array in the proper format. This function accepts the following:\n```\n(results array, score, message, region, resource)\n```\nThe `resource` is optional, and the `score` must be between 0 and 3 to indicate PASS, WARN, FAIL, or UNKNOWN.\n\n## Other Notes\n\nWhen using the [hosted scanner](https://cloudsploit.com/scan), you will be able to see an intuitive visual representation of the scan results. In CloudSploit\'s console, printable scan results look as folllows:\n\n[<img src="https://cloudsploit.com/images/printable-report.png">](https://console.cloudsploit.com/signup)\n\n### Cross-account IAM role\n\nCross-account roles enable you to share access to your account with another AWS account using the same policy model that you\'re used to within AWS services\' scope.\n \nThe advantage is that cross-account roles are much more secure than key-based access, since an attacker who steals a cross-account role ARN still cannot make API calls unless he/she also infiltrates the AWS account that has been authorized to use the role in question.\n\nTo create a cross-account role:\n\n```\n1. Navigate to the [IAM console](https://console.aws.amazon.com/iam/home).\n2. Log into your AWS account and navigate to the IAM console.\n3. Create a new IAM role.\n4. When prompted for a trusted entity select: "Another AWS account".\n5. Enter "057012691312" for the account to trust (Account ID).\n6. Check the box to "Require external ID" and enter the external ID displayed below.\n7. Ensure that MFA token is not selected.\n8. Select the "SecurityAudit" managed policy.\n9. Enter a memorable role name and create the role.\n10. Then click on the role name and copy the role ARN for use in the next step.\n```\n\n### AWS Inline Policy (Not Recommended)\n\nIf you\'d prefer to be more restrictive, the following IAM policy contains the exact permissions used by the scan.\n\n**WARNING:** This policy will likely change as more plugins are written. If a test returns "UNKNOWN" it is likely missing a required permission. The preferred method is to use the "SecurityAudit" policy.\n\n```\n{\n    "Version": "2012-10-17",\n    "Statement": [\n        {\n            "Effect": "Allow",\n            "Resource": "*",\n            "Action": [\n                "acm:Describe*",\n                "acm:List*",\n                "application-autoscaling:Describe*",\n                "appmesh:Describe*",\n                "appmesh:List*",\n                "appsync:List*",\n                "athena:List*",\n                "autoscaling:Describe*",\n                "batch:DescribeComputeEnvironments",\n                "batch:DescribeJobDefinitions",\n                "chime:List*",\n                "cloud9:Describe*",\n                "cloud9:ListEnvironments",\n                "clouddirectory:ListDirectories",\n                "cloudformation:DescribeStack*",\n                "cloudformation:GetTemplate",\n                "cloudformation:ListStack*",\n                "cloudformation:GetStackPolicy",\n                "cloudfront:Get*",\n                "cloudfront:List*",\n                "cloudhsm:ListHapgs",\n                "cloudhsm:ListHsms",\n                "cloudhsm:ListLunaClients",\n                "cloudsearch:DescribeDomains",\n                "cloudsearch:DescribeServiceAccessPolicies",\n                "cloudtrail:DescribeTrails",\n                "cloudtrail:GetEventSelectors",\n                "cloudtrail:GetTrailStatus",\n                "cloudtrail:ListTags",\n                "cloudtrail:LookupEvents",\n                "cloudwatch:Describe*",\n                "codebuild:ListProjects",\n                "codecommit:BatchGetRepositories",\n                "codecommit:GetBranch",\n                "codecommit:GetObjectIdentifier",\n                "codecommit:GetRepository",\n                "codecommit:List*",\n                "codedeploy:Batch*",\n                "codedeploy:Get*",\n                "codedeploy:List*",\n                "codepipeline:ListPipelines",\n                "codestar:Describe*",\n                "codestar:List*",\n                "cognito-identity:ListIdentityPools",\n                "cognito-idp:ListUserPools",\n                "cognito-sync:Describe*",\n                "cognito-sync:List*",\n                "comprehend:Describe*",\n                "comprehend:List*",\n                "config:BatchGetAggregateResourceConfig",\n                "config:BatchGetResourceConfig",\n                "config:Deliver*",\n                "config:Describe*",\n                "config:Get*",\n                "config:List*",\n                "datapipeline:DescribeObjects",\n                "datapipeline:DescribePipelines",\n                "datapipeline:EvaluateExpression",\n                "datapipeline:GetPipelineDefinition",\n                "datapipeline:ListPipelines",\n                "datapipeline:QueryObjects",\n                "datapipeline:ValidatePipelineDefinition",\n                "datasync:Describe*",\n                "datasync:List*",\n                "dax:Describe*",\n                "dax:ListTags",\n                "directconnect:Describe*",\n                "dms:Describe*",\n                "dms:ListTagsForResource",\n                "ds:DescribeDirectories",\n                "dynamodb:DescribeContinuousBackups",\n                "dynamodb:DescribeGlobalTable",\n                "dynamodb:DescribeTable",\n                "dynamodb:DescribeTimeToLive",\n                "dynamodb:ListBackups",\n                "dynamodb:ListGlobalTables",\n                "dynamodb:ListStreams",\n                "dynamodb:ListTables",\n                "ec2:Describe*",\n                "ecr:DescribeRepositories",\n                "ecr:GetRepositoryPolicy",\n                "ecs:Describe*",\n                "ecs:List*",\n                "eks:DescribeCluster",\n                "eks:ListClusters",\n                "elasticache:Describe*",\n                "elasticbeanstalk:Describe*",\n                "elasticfilesystem:DescribeFileSystems",\n                "elasticfilesystem:DescribeMountTargetSecurityGroups",\n                "elasticfilesystem:DescribeMountTargets",\n                "elasticloadbalancing:Describe*",\n                "elasticmapreduce:Describe*",\n                "elasticmapreduce:ListClusters",\n                "elasticmapreduce:ListInstances",\n                "es:Describe*",\n                "es:ListDomainNames",\n                "events:Describe*",\n                "events:List*",\n                "firehose:Describe*",\n                "firehose:List*",\n                "fms:ListComplianceStatus",\n                "fms:ListPolicies",\n                "fsx:Describe*",\n                "fsx:List*",\n                "gamelift:ListBuilds",\n                "gamelift:ListFleets",\n                "glacier:DescribeVault",\n                "glacier:GetVaultAccessPolicy",\n                "glacier:ListVaults",\n                "globalaccelerator:Describe*",\n                "globalaccelerator:List*",\n                "greengrass:List*",\n                "guardduty:Get*",\n                "guardduty:List*",\n                "iam:GenerateCredentialReport",\n                "iam:GenerateServiceLastAccessedDetails",\n                "iam:Get*",\n                "iam:List*",\n                "iam:SimulateCustomPolicy",\n                "iam:SimulatePrincipalPolicy",\n                "inspector:Describe*",\n                "inspector:Get*",\n                "inspector:List*",\n                "inspector:Preview*",\n                "iot:Describe*",\n                "iot:GetPolicy",\n                "iot:GetPolicyVersion",\n                "iot:List*",\n                "kinesis:DescribeStream",\n                "kinesis:ListStreams",\n                "kinesis:ListTagsForStream",\n                "kinesisanalytics:ListApplications",\n                "kms:Describe*",\n                "kms:Get*",\n                "kms:List*",\n                "lambda:GetAccountSettings",\n                "lambda:GetFunctionConfiguration",\n                "lambda:GetLayerVersionPolicy",\n                "lambda:GetPolicy",\n                "lambda:List*",\n                "license-manager:List*",\n                "lightsail:GetInstances",\n                "lightsail:GetLoadBalancers",\n                "logs:Describe*",\n                "logs:ListTagsLogGroup",\n                "machinelearning:DescribeMLModels",\n                "mediaconnect:Describe*",\n                "mediaconnect:List*",\n                "mediastore:GetContainerPolicy",\n                "mediastore:ListContainers",\n                "opsworks:DescribeStacks",\n                "opsworks-cm:DescribeServers",\n                "organizations:List*",\n                "organizations:Describe*",\n                "quicksight:Describe*",\n                "quicksight:List*",\n                "ram:List*",\n                "rds:Describe*",\n                "rds:DownloadDBLogFilePortion",\n                "rds:ListTagsForResource",\n                "redshift:Describe*",\n                "rekognition:Describe*",\n                "rekognition:List*",\n                "robomaker:Describe*",\n                "robomaker:List*",\n                "route53:Get*",\n                "route53:List*",\n                "route53domains:GetDomainDetail",\n                "route53domains:GetOperationDetail",\n                "route53domains:ListDomains",\n                "route53domains:ListOperations",\n                "route53domains:ListTagsForDomain",\n                "route53resolver:List*",\n                "route53resolver:Get*",\n                "s3:GetAccelerateConfiguration",\n                "s3:GetAccountPublicAccessBlock",\n                "s3:GetAnalyticsConfiguration",\n                "s3:GetBucket*",\n                "s3:GetEncryptionConfiguration",\n                "s3:GetInventoryConfiguration",\n                "s3:GetLifecycleConfiguration",\n                "s3:GetMetricsConfiguration",\n                "s3:GetObjectAcl",\n                "s3:GetObjectVersionAcl",\n                "s3:GetReplicationConfiguration",\n                "s3:ListAllMyBuckets",\n                "sagemaker:Describe*",\n                "sagemaker:List*",\n                "sdb:DomainMetadata",\n                "sdb:ListDomains",\n                "secretsmanager:GetResourcePolicy",\n                "secretsmanager:ListSecrets",\n                "secretsmanager:ListSecretVersionIds",\n                "securityhub:Describe*",\n                "securityhub:Get*",\n                "securityhub:List*",\n                "serverlessrepo:GetApplicationPolicy",\n                "serverlessrepo:List*",\n                "ses:GetIdentityDkimAttributes",\n                "ses:GetIdentityPolicies",\n                "ses:GetIdentityVerificationAttributes",\n                "ses:ListIdentities",\n                "ses:ListIdentityPolicies",\n                "ses:ListVerifiedEmailAddresses",\n                "shield:Describe*",\n                "shield:List*",\n                "snowball:ListClusters",\n                "snowball:ListJobs",\n                "sns:GetTopicAttributes",\n                "sns:ListSubscriptionsByTopic",\n                "sns:ListTopics",\n                "sqs:GetQueueAttributes",\n                "sqs:ListDeadLetterSourceQueues",\n                "sqs:ListQueues",\n                "sqs:ListQueueTags",\n                "ssm:Describe*",\n                "ssm:GetAutomationExecution",\n                "ssm:ListDocuments",\n                "sso:DescribePermissionsPolicies",\n                "sso:List*",\n                "states:ListStateMachines",\n                "storagegateway:DescribeBandwidthRateLimit",\n                "storagegateway:DescribeCache",\n                "storagegateway:DescribeCachediSCSIVolumes",\n                "storagegateway:DescribeGatewayInformation",\n                "storagegateway:DescribeMaintenanceStartTime",\n                "storagegateway:DescribeNFSFileShares",\n                "storagegateway:DescribeSnapshotSchedule",\n                "storagegateway:DescribeStorediSCSIVolumes",\n                "storagegateway:DescribeTapeArchives",\n                "storagegateway:DescribeTapeRecoveryPoints",\n                "storagegateway:DescribeTapes",\n                "storagegateway:DescribeUploadBuffer",\n                "storagegateway:DescribeVTLDevices",\n                "storagegateway:DescribeWorkingStorage",\n                "storagegateway:List*",\n                "tag:GetResources",\n                "tag:GetTagKeys",\n                "transfer:Describe*",\n                "transfer:List*",\n                "translate:List*",\n                "trustedadvisor:Describe*",\n                "waf:ListWebACLs",\n                "waf-regional:ListWebACLs",\n                "workspaces:Describe*"\n            ]\n        },\n        {\n            "Effect": "Allow",\n            "Action": [\n                "apigateway:GET"\n            ],\n            "Resource": [\n                "arn:aws:apigateway:*::/apis",\n                "arn:aws:apigateway:*::/apis/*/stages",\n                "arn:aws:apigateway:*::/apis/*/stages/*",\n                "arn:aws:apigateway:*::/apis/*/routes",\n                "arn:aws:apigateway:*::/restapis",\n                "arn:aws:apigateway:*::/restapis/*/authorizers",\n                "arn:aws:apigateway:*::/restapis/*/authorizers/*",\n                "arn:aws:apigateway:*::/restapis/*/documentation/versions",\n                "arn:aws:apigateway:*::/restapis/*/resources",\n                "arn:aws:apigateway:*::/restapis/*/resources/*",\n                "arn:aws:apigateway:*::/restapis/*/resources/*/methods/*",\n                "arn:aws:apigateway:*::/restapis/*/stages",\n                "arn:aws:apigateway:*::/restapis/*/stages/*",\n                "arn:aws:apigateway:*::/vpclinks"\n            ]\n        }\n    ]\n}\n```\n'