b'# Moto - Mock AWS Services\n\n[![Join the chat at https://gitter.im/awsmoto/Lobby](https://badges.gitter.im/awsmoto/Lobby.svg)](https://gitter.im/awsmoto/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n[![Build Status](https://travis-ci.org/spulec/moto.svg?branch=master)](https://travis-ci.org/spulec/moto)\n[![Coverage Status](https://coveralls.io/repos/spulec/moto/badge.svg?branch=master)](https://coveralls.io/r/spulec/moto)\n[![Docs](https://readthedocs.org/projects/pip/badge/?version=stable)](http://docs.getmoto.org)\n![PyPI](https://img.shields.io/pypi/v/moto.svg)\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/moto.svg)\n![PyPI - Downloads](https://img.shields.io/pypi/dw/moto.svg) [![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\n## In a nutshell\n\nMoto is a library that allows your tests to easily mock out AWS Services.\n\nImagine you have the following python code that you want to test:\n\n```python\nimport boto3\n\nclass MyModel(object):\n    def __init__(self, name, value):\n        self.name = name\n        self.value = value\n\n    def save(self):\n        s3 = boto3.client(\'s3\', region_name=\'us-east-1\')\n        s3.put_object(Bucket=\'mybucket\', Key=self.name, Body=self.value)\n\n```\n\nTake a minute to think how you would have tested that in the past.\n\nNow see how you could test it with Moto:\n\n```python\nimport boto3\nfrom moto import mock_s3\nfrom mymodule import MyModel\n\n\n@mock_s3\ndef test_my_model_save():\n    conn = boto3.resource(\'s3\', region_name=\'us-east-1\')\n    # We need to create the bucket since this is all in Moto\'s \'virtual\' AWS account\n    conn.create_bucket(Bucket=\'mybucket\')\n\n    model_instance = MyModel(\'steve\', \'is awesome\')\n    model_instance.save()\n\n    body = conn.Object(\'mybucket\', \'steve\').get()[\'Body\'].read().decode("utf-8")\n\n    assert body == \'is awesome\'\n```\n\nWith the decorator wrapping the test, all the calls to s3 are automatically mocked out. The mock keeps the state of the buckets and keys.\n\nIt gets even better! Moto isn\'t just for Python code and it isn\'t just for S3. Look at the [standalone server mode](https://github.com/spulec/moto#stand-alone-server-mode) for more information about running Moto with other languages. Here\'s the status of the other AWS services implemented:\n\n```gherkin\n|-------------------------------------------------------------------------------------|\n| Service Name              | Decorator             | Development Status              |\n|-------------------------------------------------------------------------------------|\n| ACM                       | @mock_acm             | all endpoints done              |\n|-------------------------------------------------------------------------------------|\n| API Gateway               | @mock_apigateway      | core endpoints done             |\n|-------------------------------------------------------------------------------------|\n| Autoscaling               | @mock_autoscaling     | core endpoints done             |\n|-------------------------------------------------------------------------------------|\n| Cloudformation            | @mock_cloudformation  | core endpoints done             |\n|-------------------------------------------------------------------------------------|\n| Cloudwatch                | @mock_cloudwatch      | basic endpoints done            |\n|-------------------------------------------------------------------------------------|\n| CloudwatchEvents          | @mock_events          | all endpoints done              |\n|-------------------------------------------------------------------------------------|\n| Cognito Identity          | @mock_cognitoidentity | basic endpoints done            |\n|-------------------------------------------------------------------------------------|\n| Cognito Identity Provider | @mock_cognitoidp      | basic endpoints done            |\n|-------------------------------------------------------------------------------------|\n| Config                    | @mock_config          | basic endpoints done            |\n|                           |                       | core endpoints done             |\n|-------------------------------------------------------------------------------------|\n| Data Pipeline             | @mock_datapipeline    | basic endpoints done            |\n|-------------------------------------------------------------------------------------|\n| DynamoDB                  | @mock_dynamodb        | core endpoints done             |\n| DynamoDB2                 | @mock_dynamodb2       | all endpoints + partial indexes |\n|-------------------------------------------------------------------------------------|\n| EC2                       | @mock_ec2             | core endpoints done             |\n|     - AMI                 |                       | core endpoints done             |\n|     - EBS                 |                       | core endpoints done             |\n|     - Instances           |                       | all  endpoints done             |\n|     - Security Groups     |                       | core endpoints done             |\n|     - Tags                |                       | all  endpoints done             |\n|-------------------------------------------------------------------------------------|\n| ECR                       | @mock_ecr             | basic endpoints done            |\n|-------------------------------------------------------------------------------------|\n| ECS                       | @mock_ecs             | basic endpoints done            |\n|-------------------------------------------------------------------------------------|\n| ELB                       | @mock_elb             | core endpoints done             |\n|-------------------------------------------------------------------------------------|\n| ELBv2                     | @mock_elbv2           | all endpoints done              |\n|-------------------------------------------------------------------------------------|\n| EMR                       | @mock_emr             | core endpoints done             |\n|-------------------------------------------------------------------------------------|\n| Glacier                   | @mock_glacier         | core endpoints done             |\n|-------------------------------------------------------------------------------------|\n| IAM                       | @mock_iam             | core endpoints done             |\n|-------------------------------------------------------------------------------------|\n| IoT                       | @mock_iot             | core endpoints done             |\n|                           | @mock_iotdata         | core endpoints done             |\n|-------------------------------------------------------------------------------------|\n| Kinesis                   | @mock_kinesis         | core endpoints done             |\n|-------------------------------------------------------------------------------------|\n| KMS                       | @mock_kms             | basic endpoints done            |\n|-------------------------------------------------------------------------------------|\n| Lambda                    | @mock_lambda          | basic endpoints done, requires  |\n|                           |                       | docker                          |\n|-------------------------------------------------------------------------------------|\n| Logs                      | @mock_logs            | basic endpoints done            |\n|-------------------------------------------------------------------------------------|\n| Organizations             | @mock_organizations   | some core endpoints done        |\n|-------------------------------------------------------------------------------------|\n| Polly                     | @mock_polly           | all endpoints done              |\n|-------------------------------------------------------------------------------------|\n| RDS                       | @mock_rds             | core endpoints done             |\n|-------------------------------------------------------------------------------------|\n| RDS2                      | @mock_rds2            | core endpoints done             |\n|-------------------------------------------------------------------------------------|\n| Redshift                  | @mock_redshift        | core endpoints done             |\n|-------------------------------------------------------------------------------------|\n| Route53                   | @mock_route53         | core endpoints done             |\n|-------------------------------------------------------------------------------------|\n| S3                        | @mock_s3              | core endpoints done             |\n|-------------------------------------------------------------------------------------|\n| SecretsManager            | @mock_secretsmanager  | basic endpoints done            |\n|-------------------------------------------------------------------------------------|\n| SES                       | @mock_ses             | all endpoints done              |\n|-------------------------------------------------------------------------------------|\n| SNS                       | @mock_sns             | all endpoints done              |\n|-------------------------------------------------------------------------------------|\n| SQS                       | @mock_sqs             | core endpoints done             |\n|-------------------------------------------------------------------------------------|\n| SSM                       | @mock_ssm             | core endpoints done             |\n|-------------------------------------------------------------------------------------|\n| STS                       | @mock_sts             | core endpoints done             |\n|-------------------------------------------------------------------------------------|\n| SWF                       | @mock_swf             | basic endpoints done            |\n|-------------------------------------------------------------------------------------|\n| X-Ray                     | @mock_xray            | all endpoints done              |\n|-------------------------------------------------------------------------------------|\n```\n\nFor a full list of endpoint [implementation coverage](https://github.com/spulec/moto/blob/master/IMPLEMENTATION_COVERAGE.md)\n\n### Another Example\n\nImagine you have a function that you use to launch new ec2 instances:\n\n```python\nimport boto3\n\n\ndef add_servers(ami_id, count):\n    client = boto3.client(\'ec2\', region_name=\'us-west-1\')\n    client.run_instances(ImageId=ami_id, MinCount=count, MaxCount=count)\n```\n\nTo test it:\n\n```python\nfrom . import add_servers\nfrom moto import mock_ec2\n\n@mock_ec2\ndef test_add_servers():\n    add_servers(\'ami-1234abcd\', 2)\n\n    client = boto3.client(\'ec2\', region_name=\'us-west-1\')\n    instances = client.describe_instances()[\'Reservations\'][0][\'Instances\']\n    assert len(instances) == 2\n    instance1 = instances[0]\n    assert instance1[\'ImageId\'] == \'ami-1234abcd\'\n```\n\n#### Using moto 1.0.X with boto2\nmoto 1.0.X mock decorators are defined for boto3 and do not work with boto2. Use the @mock_AWSSVC_deprecated to work with boto2.\n\nUsing moto with boto2\n```python\nfrom moto import mock_ec2_deprecated\nimport boto\n\n@mock_ec2_deprecated\ndef test_something_with_ec2():\n    ec2_conn = boto.ec2.connect_to_region(\'us-east-1\')\n    ec2_conn.get_only_instances(instance_ids=\'i-123456\')\n\n```\n\nWhen using both boto2 and boto3, one can do this to avoid confusion:\n```python\nfrom moto import mock_ec2_deprecated as mock_ec2_b2\nfrom moto import mock_ec2\n\n```\n\n## Usage\n\nAll of the services can be used as a decorator, context manager, or in a raw form.\n\n### Decorator\n\n```python\n@mock_s3\ndef test_my_model_save():\n    # Create Bucket so that test can run\n    conn = boto3.resource(\'s3\', region_name=\'us-east-1\')\n    conn.create_bucket(Bucket=\'mybucket\')\n    model_instance = MyModel(\'steve\', \'is awesome\')\n    model_instance.save()\n    body = conn.Object(\'mybucket\', \'steve\').get()[\'Body\'].read().decode()\n\n    assert body == \'is awesome\'\n```\n\n### Context Manager\n\n```python\ndef test_my_model_save():\n    with mock_s3():\n        conn = boto3.resource(\'s3\', region_name=\'us-east-1\')\n        conn.create_bucket(Bucket=\'mybucket\')\n        model_instance = MyModel(\'steve\', \'is awesome\')\n        model_instance.save()\n        body = conn.Object(\'mybucket\', \'steve\').get()[\'Body\'].read().decode()\n\n        assert body == \'is awesome\'\n```\n\n\n### Raw use\n\n```python\ndef test_my_model_save():\n    mock = mock_s3()\n    mock.start()\n\n    conn = boto3.resource(\'s3\', region_name=\'us-east-1\')\n    conn.create_bucket(Bucket=\'mybucket\')\n\n    model_instance = MyModel(\'steve\', \'is awesome\')\n    model_instance.save()\n\n    assert conn.Object(\'mybucket\', \'steve\').get()[\'Body\'].read().decode() == \'is awesome\'\n\n    mock.stop()\n```\n\n## IAM-like Access Control\n\nMoto also has the ability to authenticate and authorize actions, just like it\'s done by IAM in AWS. This functionality can be enabled by either setting the `INITIAL_NO_AUTH_ACTION_COUNT` environment variable or using the `set_initial_no_auth_action_count` decorator. Note that the current implementation is very basic, see [this file](https://github.com/spulec/moto/blob/master/moto/core/access_control.py) for more information.\n\n### `INITIAL_NO_AUTH_ACTION_COUNT`\n\nIf this environment variable is set, moto will skip performing any authentication as many times as the variable\'s value, and only starts authenticating requests afterwards. If it is not set, it defaults to infinity, thus moto will never perform any authentication at all.\n\n### `set_initial_no_auth_action_count`\n\nThis is a decorator that works similarly to the environment variable, but the settings are only valid in the function\'s scope. When the function returns, everything is restored.\n\n```python\n@set_initial_no_auth_action_count(4)\n@mock_ec2\ndef test_describe_instances_allowed():\n    policy_document = {\n        "Version": "2012-10-17",\n        "Statement": [\n            {\n                "Effect": "Allow",\n                "Action": "ec2:Describe*",\n                "Resource": "*"\n            }\n        ]\n    }\n    access_key = ...\n    # create access key for an IAM user/assumed role that has the policy above. \n    # this part should call __exactly__ 4 AWS actions, so that authentication and authorization starts exactly after this\n    \n    client = boto3.client(\'ec2\', region_name=\'us-east-1\',\n                          aws_access_key_id=access_key[\'AccessKeyId\'],\n                          aws_secret_access_key=access_key[\'SecretAccessKey\'])\n                          \n    # if the IAM principal whose access key is used, does not have the permission to describe instances, this will fail \n    instances = client.describe_instances()[\'Reservations\'][0][\'Instances\']\n    assert len(instances) == 0\n```\n\nSee [the related test suite](https://github.com/spulec/moto/blob/master/tests/test_core/test_auth.py) for more examples.\n\n## Experimental: AWS Config Querying\nFor details about the experimental AWS Config support please see the [AWS Config readme here](CONFIG_README.md).\n\n## Very Important -- Recommended Usage\nThere are some important caveats to be aware of when using moto:\n\n*Failure to follow these guidelines could result in your tests mutating your __REAL__ infrastructure!*\n\n### How do I avoid tests from mutating my real infrastructure?\nYou need to ensure that the mocks are actually in place. Changes made to recent versions of `botocore`\nhave altered some of the mock behavior. In short, you need to ensure that you _always_ do the following:\n\n1. Ensure that your tests have dummy environment variables set up:\n    \n        export AWS_ACCESS_KEY_ID=\'testing\'\n        export AWS_SECRET_ACCESS_KEY=\'testing\'\n        export AWS_SECURITY_TOKEN=\'testing\'\n        export AWS_SESSION_TOKEN=\'testing\'\n   \n1. __VERY IMPORTANT__: ensure that you have your mocks set up __BEFORE__ your `boto3` client is established. \n   This can typically happen if you import a module that has a `boto3` client instantiated outside of a function.\n   See the pesky imports section below on how to work around this.\n  \n### Example on usage?\nIf you are a user of [pytest](https://pytest.org/en/latest/), you can leverage [pytest fixtures](https://pytest.org/en/latest/fixture.html#fixture)\nto help set up your mocks and other AWS resources that you would need.\n\nHere is an example:\n```python\n@pytest.fixture(scope=\'function\')\ndef aws_credentials():\n    """Mocked AWS Credentials for moto."""\n    os.environ[\'AWS_ACCESS_KEY_ID\'] = \'testing\'\n    os.environ[\'AWS_SECRET_ACCESS_KEY\'] = \'testing\'\n    os.environ[\'AWS_SECURITY_TOKEN\'] = \'testing\'\n    os.environ[\'AWS_SESSION_TOKEN\'] = \'testing\'\n\n@pytest.fixture(scope=\'function\')\ndef s3(aws_credentials):\n    with mock_s3():\n        yield boto3.client(\'s3\', region_name=\'us-east-1\')\n\n\n@pytest.fixture(scope=\'function\')\ndef sts(aws_credentials):\n    with mock_sts():\n        yield boto3.client(\'sts\', region_name=\'us-east-1\')\n\n\n@pytest.fixture(scope=\'function\')\ndef cloudwatch(aws_credentials):\n    with mock_cloudwatch():\n        yield boto3.client(\'cloudwatch\', region_name=\'us-east-1\')\n\n... etc.\n```\n\nIn the code sample above, all of the AWS/mocked fixtures take in a parameter of `aws_credentials`, \nwhich sets the proper fake environment variables. The fake environment variables are used so that `botocore` doesn\'t try to locate real\ncredentials on your system.\n\nNext, once you need to do anything with the mocked AWS environment, do something like:\n```python\ndef test_create_bucket(s3):\n    # s3 is a fixture defined above that yields a boto3 s3 client.\n    # Feel free to instantiate another boto3 S3 client -- Keep note of the region though.\n    s3.create_bucket(Bucket="somebucket")\n   \n    result = s3.list_buckets()\n    assert len(result[\'Buckets\']) == 1\n    assert result[\'Buckets\'][0][\'Name\'] == \'somebucket\'\n```\n\n### What about those pesky imports?\nRecall earlier, it was mentioned that mocks should be established __BEFORE__ the clients are set up. One way\nto avoid import issues is to make use of local Python imports -- i.e. import the module inside of the unit\ntest you want to run vs. importing at the top of the file. \n\nExample:\n```python\ndef test_something(s3):\n   from some.package.that.does.something.with.s3 import some_func # <-- Local import for unit test\n   # ^^ Importing here ensures that the mock has been established.      \n\n   sume_func()  # The mock has been established from the "s3" pytest fixture, so this function that uses\n                # a package-level S3 client will properly use the mock and not reach out to AWS.\n```\n\n### Other caveats\nFor Tox, Travis CI, and other build systems, you might need to also perform a `touch ~/.aws/credentials` \ncommand before running the tests. As long as that file is present (empty preferably) and the environment\nvariables above are set, you should be good to go.\n\n## Stand-alone Server Mode\n\nMoto also has a stand-alone server mode. This allows you to utilize\nthe backend structure of Moto even if you don\'t use Python.\n\nIt uses flask, which isn\'t a default dependency. You can install the\nserver \'extra\' package with:\n\n```python\npip install "moto[server]"\n```\n\nYou can then start it running a service:\n\n```console\n$ moto_server ec2\n * Running on http://127.0.0.1:5000/\n```\n\nYou can also pass the port:\n\n```console\n$ moto_server ec2 -p3000\n * Running on http://127.0.0.1:3000/\n```\n\nIf you want to be able to use the server externally you can pass an IP\naddress to bind to as a hostname or allow any of your external\ninterfaces with 0.0.0.0:\n\n```console\n$ moto_server ec2 -H 0.0.0.0\n * Running on http://0.0.0.0:5000/\n```\n\nPlease be aware this might allow other network users to access your\nserver.\n\nThen go to [localhost](http://localhost:5000/?Action=DescribeInstances) to see a list of running instances (it will be empty since you haven\'t added any yet).\n\nIf you want to use boto with this (using the simpler decorators above instead is strongly encouraged), the easiest way is to create a boto config file (`~/.boto`) with the following values:\n\n```\n[Boto]\nis_secure = False\nhttps_validate_certificates = False\nproxy_port = 5000\nproxy = 127.0.0.1\n```\n\nIf you want to use boto3 with this, you can pass an `endpoint_url` to the resource\n\n```python\nboto3.resource(\n    service_name=\'s3\',\n    region_name=\'us-west-1\',\n    endpoint_url=\'http://localhost:5000\',\n)\n```\n\n## Install\n\n\n```console\n$ pip install moto\n```\n\n## Releases\n\nReleases are done from travisci. Fairly closely following this:\nhttps://docs.travis-ci.com/user/deployment/pypi/\n\n- Commits to `master` branch do a dev deploy to pypi.\n- Commits to a tag do a real deploy to pypi.\n'