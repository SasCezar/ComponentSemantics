b'# Zdog\n\n_Round, flat, designer-friendly pseudo-3D engine_\n\nView complete documentation and live demos at [zzz.dog](https://zzz.dog).\n\n## Install\n\n### Download\n\n+ [zdog.dist.min.js](https://unpkg.com/zdog@1/dist/zdog.dist.min.js) minified, or\n+ [zdog.dist.js](https://unpkg.com/zdog@1/dist/zdog.dist.js) un-minified\n\n### CDN\n\nLink directly to Zdog JS on [unpkg](https://unpkg.com).\n\n``` html\n<script src="https://unpkg.com/zdog@1/dist/zdog.dist.min.js"></script>\n```\n\n### Package managers\n\nnpm: `npm install zdog`\n\nBower: `bower install zdog`\n\n## Hello world demo\n\nCreate 3D models with Zdog by adding shapes. See [Getting started](https://zzz.dog/getting-started) for a walk-through of this demo.\n\n``` js\nlet isSpinning = true;\n\nlet illo = new Zdog.Illustration({\n  element: \'.zdog-canvas\',\n  zoom: 4,\n  dragRotate: true,\n  // stop spinning when drag starts\n  onDragStart: function() {\n    isSpinning = false;\n  },\n});\n\n// circle\nnew Zdog.Ellipse({\n  addTo: illo,\n  diameter: 20,\n  translate: { z: 10 },\n  stroke: 5,\n  color: \'#636\',\n});\n\n// square\nnew Zdog.Rect({\n  addTo: illo,\n  width: 20,\n  height: 20,\n  translate: { z: -10 },\n  stroke: 3,\n  color: \'#E62\',\n  fill: true,\n});\n\nfunction animate() {\n  illo.rotate.y += isSpinning ? 0.03 : 0;\n  illo.updateRenderGraph();\n  requestAnimationFrame( animate );\n}\nanimate();\n```\n\n## About Zdog\n\nHi, [Dave here](https://desandro.com). I wanted to make a video game. I needed a 3D engine, but most engines were too powerful and complex for me. I made Zdog so I could design and display simple 3D models without a lot of overhead.\n\nZdog is directly inspired by [Dogz](https://en.wikipedia.org/wiki/Petz), a virtual pet game by P.F. Magic released in 1995. It used flat 2D circle sprites to render the Dogz\xe2\x80\x99 models, but in a 3D scene. [See Dogz playthrough video here.](https://www.youtube.com/watch?v=6lKSn_cHw5k) Dogz were fully animated in real time, running, flopping, scratching (on Windows 3.1!). It was remarkable.\n\nZdog uses the same principle. It renders all shapes using the 2D drawing APIs in either `<canvas>` or `<svg>`. Spheres are actually dots. Toruses are actually circles. Capsules are actually thick lines. It\xe2\x80\x99s a simple, but effective trick. The underlying 3D math comes from [Rotating 3D Shapes](https://www.khanacademy.org/computing/computer-programming/programming-games-visualizations/programming-3d-shapes/a/rotating-3d-shapes) by [Peter Collingridge](https://petercollingridge.appspot.com/3D-tutorial/rotating-objects).\n\nZdog is pronounced "Zee-dog" in American parlance or "Zed-dog" in British.\n\n### Beta!\n\nZdog v1 is a beta-release, of sorts. This is my first time creating a 3D engine, so I probably got some stuff wrong. Expect lots of changes for v2. Provide input and select new features on the [Zdog issue tracker on GitHub](https://github.com/metafizzy/zdog/issues).\n\n### More Zdog resources\n\nOther people\'s stuff:\n\n+ [Zfont](https://jaames.github.io/zfont/) - Text plugin for Zdog\n+ [vue-zdog](https://github.com/AlexandreBonaventure/vue-zdog) - Vue wrapper for Zdog\n+ [zDogPy](https://github.com/gferreira/zdogpy) - Python port of Zdog for DrawBot\n+ [Made with Zdog CodePen Collection](https://codepen.io/collection/DzdGMe/)\n+ [Made with Zdog on Twitter](https://twitter.com/i/moments/1135000612356206592)\n\nMy stuff:\n\n+ [Zdog demos on CodePen](https://github.com/metafizzy/zdog-demos), source code at [zdog-demos](https://github.com/metafizzy/zdog-demos)\n+ [zdog-docs](https://github.com/metafizzy/zdog-docs) - Docs site source code\n\n---\n\nLicensed MIT. Made by Metafizzy \xf0\x9f\x8c\x88\xf0\x9f\x90\xbb\n'