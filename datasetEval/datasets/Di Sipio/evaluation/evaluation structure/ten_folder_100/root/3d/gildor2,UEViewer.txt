b'UE Viewer\n=========\n\nUE Viewer is a viewer for visual resources of games made with [Unreal engine](https://www.unrealengine.com/).\nCurrently all engine versions (from 1 to 4) are supported.\n\nThe project was originally named the "Unreal model viewer", however the name\n[was changed](https://www.gildor.org/smf/index.php/topic,731.0.html) in 2011 to meet the request from Epic Games.\nPlease note that "official" project\'s name is "UE Viewer", and a short unofficial name of the project is "umodel"\n(it was left from the older name "**U**nreal **MODEL** viewer").\n\nThere\'s a place where you may discuss the source code:\n[gildor.org forums](https://www.gildor.org/smf/index.php?board=37.0).\n\n\nGetting the source code\n-----------------------\nThe source code is [available at GitHub](https://github.com/gildor2/UModel). You may either checkout it\nwith use of any Git client, or download it as a [Zip file](https://github.com/gildor2/UModel/archive/master.zip).\n\n\nBuilding the source code\n------------------------\nWe are using own build system to compile UE Viewer. You may find a Perl script in *Tools/genmake*. This script\ngenerates makefiles from some human-friendly project format. After that you may build generated makefile\nusing \'nmake\' for Visual Studio or \'make\' for gcc. Build process is controlled with *build.sh* script.\n\n### build.sh options\nTo list all options, run `build.sh --help`. Current options are:\n- `--64` compile for Windows 64bit\n- `--debug` make a debug version of executable\n- `--vc <version>` specify which Visual Studio version should be used for compilation, default is latest compiler\n  installed on your system\n\nPlease note that `build.sh` is not just a shortcut for calling `make -f <makefile>`, it performs more actions.\nIt does:\n- Generating a makefile for current platform.\n- Making `UModelTool/Version.h` file which contains current build number based on number of Git commits.\n- Preprocessing shaders (with executing `Unreal/Shaders/make.pl`).\n- It has the possibility to compile just a single cpp file from the project (used with Visual Studio Code Ctrl+F7 key).\n\n### Windows 32-bit\n\nUE Viewer is compiled using Visual Studio. Required VisualStudio 2013 or newer. Older Visual Studio compilers are\nnot suitable because viewer\'s code using some C++11 stuff.\n\nCurrently build is performed with Visual C++ 2019.\n\nBuild system utilizes GNU Tools for building, in particular - Bash and Perl. I\'ve packaged Windows versions\nof these tools which was a part of [MinGW/MSYS project](http://www.mingw.org/). You can get everything what you need\nfor a build [here](https://github.com/gildor2/BuildTools). This page contains **BuildTools**. You should\ndownload it and extract into some directory (press the green button "Clone or download", then "Download ZIP"). Let\'s say you\nextracted them to *C:\\BuildTools*. After that, add *C:\\BuildTools\\bin* to the system\'s *PATH* environment variable. As an\nalternative it is possible to create a batch file which will temporarily modify *PATH* and then execute build script.\nHere\'s an example of such file:\n\n    @echo off\n    set PATH=%PATH%;C:\\BuildTools\\bin\n    bash build.sh\n\nTo launch a build process without a batch, simply execute\n\n    bash build.sh\n\n### Windows 64-bit\nDespite we\'re providing only 32-but builds of UE Viewer, it is possible to compile it for 64-bit platform. To do that, you\nshould change a variable in *build.sh*: *PLATFORM* should be changed from `vc-win32` to `vc-win64`. Also 64-bit build could\nbe initiated with launching *build.sh --64*.\n\n### Linux\nLinux system has the most of dependencies by default. You\'ll need to install the following development packages if they\'re\nnot available on your system: SDL2, zlib, libpng. Of course, you\'ll also need gcc for compiling the project.\nTo build UE Viewer, simply execute the following command from terminal\n\n    ./build.sh\n\nWhen compiling for Linux, project will use system\'s zlib and libpng libraries. If you want to bundle (statically link) them\ninto umodel executable, you may find and comment the following line in *common.project*\n\n\tUSE_SYSTEM_LIBS = 1\n\nIn this case, Linux build will be performed in the same way as Windows build, with compiling and bundling mentioned libraries.\n\n### Visual Studio Code\nUE Viewer contains project files needed for opening and running it from [Visual Studio Code](https://code.visualstudio.com/).\nJust open viewer\'s folder in VSCode, and you\'ll get everything. Project already has a build task and launch actions set up.\nOf course you\'ll need a [C/C++ extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools) installed.\n\nVSCode project comes with additional build command which could be bound to a key. Just use\n```\n\t{\n\t\t"key": "ctrl+f7",\n\t\t"command": "workbench.action.tasks.runTask",\n\t\t"args": "Compile"\n\t}\n```\nand then Ctrl+F7 key will compile a file currently opened in editor. Of course, it won\'t work for headers and other non-cpp\nfiles.\n\nBy default, Visual Studio Code project performs Debug build. If you want something else, change `.vscode/tasks.json` file,\nand remove `--debug` option from `build.sh` command.\n\n\nC runtime library for MSVC\n--------------------------\nUE Viewer is dynamically linked with CRT library, so it requires CRT DLL files to be installed onto your system. It is possible\nto *statically* link with you compiler\'s CRT by changing a line in *common.project* (with cost of growing executable file size):\n\n    LIBC = shared\n\nto\n\n    LIBC = static\n\nUE Viewer uses custom CRT library for being able to link against MSVCRT.DLL. MSVCRT.DLL is chosen because it allows to\nreduce size of UE Viewer distribution without needs to install compiler runtime libraries onto a Windows system - MSVCRT.DLL present on\n_any_ Windows installation. You may disable MSVCRT.DLL linking by commenting out the line\n\n    OLDCRT = 1\n\nPreviously there were some problems with using msvcrt.dll with Visual Studio compiler 2015 and newer. However all issues has been\nsolved. For those who interested in details, I\'ve [prepared an article](https://github.com/gildor2/UModel/wiki/Using-MSVCRT.DLL-with-Visual-Studio-compiler).\n\nIf you want to use MSVCRT.DLL, you should extract **MSVCRT.zip** archive available\n[here](https://github.com/gildor2/UModel/releases) to the directory LIBS one level above of UModel directory.\nSo, the directory structure should look like this\n```\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 Libs\n\xe2\x94\x82   \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 MSVCRT\n\xe2\x94\x82       \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 include\n\xe2\x94\x82       \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 lib\n\xe2\x94\x82       \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 msvcrt.project\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 UModel\n\xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 Core\n\xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 Unreal\n\xe2\x94\x82   ...\n\xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 build.sh\n\xe2\x94\x82   ...\n```\nAlso you may change MSVCRT library path by changing **WDKCRT** variable in *common.project*.\n\n\nDebugging in Visual Studio\n--------------------------\nUE Viewer was released without a Visual Studio solution. By the way it is still possible to debug it within an IDE. You\ncan build a Debug version of viewer by uncommenting ```#define MAX_DEBUG 1``` in *UmodelTool/Build.h* and rebuilding the\nproject. After that you\'ll get executable with optimizations disabled, and with some extra features. For example,\nif umodel.exe crashes, and it is started with *-debug* option, standard Windows window appears with prompt to close\nprogram or debug it. You may choose "Debug with Visual Studio" there.\n\nAlso you may use `--debug` parameter for build.sh script. This will generate separate set of object files and link into\ndebug version of the executable (with the same executable file\'s name). You may quickly switch between "debug" and "release"\nbuilds without having to fully recompile the program.\n\nIf you want to debug umodel.exe in Visual Studio without having a crash, you may load it either from IDE (```File |\nOpen | Project/Solution```, then select *umodel.exe*), or you may type\n\n    devenv umodel.exe\n\nfrom console.\n\nIt is recommended to use **Visual Studio 2013** IDE or newer because it has more advanced debugging features than previous studio\nversions. You may copy **Tools/umodel.natvis** file to *C:\\Users\\Your_user_folder\\My Documents\\Visual Studio 20NN\\Visualizers*,\nand after that you\'ll be able to view *TArray* and *FString* structures during debug session.\n\n### Visual Studio Code\nAs was mentioned earlier, UE Viewer source code comes with Visual Studio Code project. You may easily edit, launch and debug viewer\nwith it. For debugging, there are 2 configurations: "No arguments" runs UE Viewer with default startup UI, and for command line use\nyou may launch 2nd "Volatile" configuration, which reads command line string from file *docs/cmdline.cfg* - please refer to\n[Response files documentation](https://github.com/gildor2/UModel/wiki/Response-file) for details on its format.\n\nDirectory structure\n-------------------\nBelow is the list of major folders which exists in this repository or which are generated during build process.\n```\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 .vscode               # Visual Studio Code project files\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 Core                  # corelibraries not related to Unreal engine\n\xe2\x94\x82   \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 GL                # OpenGL wrapper builder\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 Docs                  # miscellaneous text files\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 Exporters             # exporters for different object types\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 Libs                  # third-party libraries used for building\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 MeshInstance          # mesh renderers\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 obj                   # all compiled object files goes there\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 Tools\n\xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 CompatTable       # source of compatibility table\n\xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 MaxActorXImport   # ActorX Importer script for 3ds Max\n\xe2\x94\x82   \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 PackageExtract    # Unreal package extractor source\n\xe2\x94\x82   \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 PackageUnpack     # unreal package decompressor source\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 UI                    # library used to show UI on Windows\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 UmodelTool            # source code of umodel itself\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 Unreal                # source code of Unreal Engine framework\n\xe2\x94\x82   \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 Shaders           # shaders used in UModel\'s renderer\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 Viewers               # viewers for different object types\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 build.sh              # main build script\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 common.project        # main project file, reused between different sub-projects\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 t.bat                 # Windows CMD caller for test.sh\n\xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 test.sh               # internal script used for testing\n```\n\nLicense\n-------\nThe code is not covered with any existing license yet, however I\'m thinking about adding BSD 3-clause license. I just probably\nneed help from some people who knows about that more than I (and I don\'t like the idea of adding license boilerplate into all\nsource code files).\n'