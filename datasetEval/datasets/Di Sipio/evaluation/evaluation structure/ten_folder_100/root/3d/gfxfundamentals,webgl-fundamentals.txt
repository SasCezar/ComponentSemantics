b'WebGL Fundamentals\n===================\n\nThis is [a series of lessons or tutorials about WebGL](http://webglfundamentals.org/).\n\nUnlike most WebGL lessons these are not based off of OpenGL.\nOpenGL is 20 years old. The lessons of OpenGL don\'t match well with WebGL.\nThe APIs have changed too much. The ideas of OpenGL and OpenGL tutorials\nare out of date with WebGL, OpenGL ES 2.0 and the land of shaders.\n\nI would argue that WebGL is actually a very simple API. What makes it\nappear complicated is the way in which it\'s used. The complications\nare added by the programmer. WebGL itself is simple.\n\nThese lessons try to show that simplicity and well as teach the\nfundamentals of 2D math and 3D math so readers can hopefully\nhave an easier time writing their own WebGL programs and\nunderstanding the complexity that other programmers pile on\ntop of simple WebGL.\n\nThis is work in progress. Feel free to contribute.\n\n## Contributing\n\nOf course bug fixes are always welcome.\n\nIf you\'d like to write a new article please try to always take\none step at a time. Don\'t do 2 or more things in a single step.\nExplain any new math in the simplest terms possible. Ideally\nwith diagrams where possible.\n\n### Translating\n\nEach translation goes in a folder under `webgl/lessons/<country-code>`.\n\nRequired files are\n\n    langinfo.hanson\n    index.md\n    toc.html\n\n#### `langinfo.hanson`\n\nDefines various language specific options.\n[Hanson](https://github.com/timjansen/hanson) is a JSON like format but allows comments.\n\nCurrent fields are\n\n    {\n      // The language (will show up in the language selection menu)\n      language: \'English\',\n\n      // Phrase that appears under examples\n      defaultExampleCaption: "click here to open in a separate window",\n\n      // Title that appears on each page\n      title: \'WebGL Fundamentals\',\n\n      // Basic description that appears on each page\n      description: \'Learn WebGL from the ground up. No magic\',\n\n      // Link to the language root.\n      link: \'http://webglfundamentals.org/webgl/lessons/ja\',  // replace `ja` with country code\n\n      // html that appears after the article and before the comments\n      commentSectionHeader: \'<div>Questions? <a href="http://stackoverflow.com/questions/tagged/webgl">Ask on stackoverflow</a>.</div>\\n        <div>Issue/Bug? <a href="http://github.com/gfxfundamentals/webgl-fundamentals/issues">Create an issue on github</a>.</div>\',\n\n      // markdown that appears for untranslated articles\n      missing: "Sorry this article has not been translated yet. [Translations Welcome](https://github.com/gfxfundamentals/webgl-fundamentals)! \xf0\x9f\x98\x84\\n\\n[Here\'s the original English article for now]({{{origLink}}}).",\n\n      // the phrase "Table of Contents"\n      toc: "Table of Contents",\n\n      // translation of categories for table of contents\n      categoryMapping: {\n        \'fundamentals\': "Fundamentals",\n        \'image-processing\': "Image Processing",\n        \'matrices\': "2D translation, rotation, scale, matrix math",\n        \'3d\': "3D",\n        \'lighting\': "Lighting",\n        \'organization\': "Structure and Organization",\n        \'geometry\': "Geometry",\n        \'textures\': "Textures",\n        \'rendertargets\': "Rendering To A Texture",\n        \'2d\': "2D",\n        \'text\': "Text",\n        \'misc\': "Misc",\n        \'reference\': "Reference",\n      },\n\n    }\n\n#### `index.md`\n\nThis is the template for the main page for each language\n\n#### `toc.html`\n\nThis is template for the table of contents for the language.\nIt is included on both the index and on each article. The only\nparts not auto-generated are the links ending links which\nyou can translate if you want to.\nThe build system will create a placeholder for every English article for which there is no corresponding article in that langauge. It will be filled the `missing` message from above.\n\n#### Translation notes\n\nThe build process will make a placeholder html file for each article has an english .md file in\n`webgl/lessons` but no corresponding .md file for the language. This is to make it easy to include\nlinks in one article that links to another article but that other article has not yet been translated.\nThis way you don\'t have to go back and fix already translated articles. Just translate one article\nat a time and leave the links as is. They\'ll link to placeholders until someone translates the missing\narticles.\n\nArticles have front matter at the top\n\n```\nTitle: Localized Title of article\nDescription: Localized description of article (used in RSS and social media tags)\nTOC: Localized text for Table of Contents\n```\n\n**DO NOT CHANGE LINKS** : For example a link to a local resources might look like\n\n    [text](link)\n\nor\n\n    <img src="somelink">\n\nWhile you can add query parameters (see below) do not add "../" to try to make the link relative to the\n.md file. Links should stay as though the article exists at the same location as the original English.\n\n### UI localization\n\nSome of the diagrams allow passing translations for the UI and other text.\n\nFor example if there is a slider named "rotation"\nyou can add "?ui-rotation=girar" at the end of the URL for the diagram. For 2 or more translations\nseparate them with a `&`. Certain characters are disallowed in URLs like `=`, `#`, `&` etc. For those\nuse their uri encoding.\n\nFor diagram labels you\'ll have to look inside the code. For example for the\ndirectional lighting diagram near the start of the code it looks like this\n\n```\nconst lang = {\n  lightDir: opt.lightDir || "light direction",\n  dot: opt.dot || "dot(reverseLightDirection,surfaceDirection) = ",\n  surface1: opt.surface1 || "surface",\n  surface2: opt.surface2 || "direction",\n};\n```\n\nWhich means you can localize the labels like this\n\n```\n{{{diagram url="resources/directional-lighting.html?lightDir=\xe5\x85\x89\xe7\xb7\x9a\xe6\x96\xb9\xe5\x90\x91&surface1=\xe3\x82\xaa\xe3\x83\x96\xe3\x82\xb8\xe3\x82\xa7\xe3\x82\xaf\xe3\x83\x88&surface2=\xe8\xa1\xa8\xe9\x9d\xa2\xe6\x96\xb9\xe5\x90\x91&dot=dot(\xe5\x85\x89\xe7\xb7\x9a\xe5\x8f\x8d\xe5\xaf\xbe\xe6\x96\xb9\xe5\x90\x91,\xe8\xa1\xa8\xe9\x9d\xa2\xe6\x96\xb9\xe5\x90\x91)%20%3D%20&ui-rotation=\xe8\xa7\x92\xe5\xba\xa6" caption="\xe6\x96\xb9\xe5\x90\x91\xe3\x82\x92\xe5\x9b\x9e\xe8\xbb\xa2\xe3\x81\x97\xe3\x81\xa6\xe3\x81\xbf\xe3\x81\xa6" width="500" height="400"}}}\n```\n\nFor testing reference the sample directly in your browser. For example\n\n[`http://localhost:8080/webgl/lessons/resources/directional-lighting.html?lightDir=\xe5\x85\x89\xe7\xb7\x9a\xe6\x96\xb9\xe5\x90\x91&surface1=\xe3\x82\xaa\xe3\x83\x96\xe3\x82\xb8\xe3\x82\xa7\xe3\x82\xaf\xe3\x83\x88&surface2=\xe8\xa1\xa8\xe9\x9d\xa2\xe6\x96\xb9\xe5\x90\x91&dot=dot(\xe5\x85\x89\xe7\xb7\x9a\xe5\x8f\x8d\xe5\xaf\xbe\xe6\x96\xb9\xe5\x90\x91,\xe8\xa1\xa8\xe9\x9d\xa2\xe6\x96\xb9\xe5\x90\x91)%20%3D%20&ui-rotation=\xe8\xa7\x92\xe5\xba\xa6`](http://webglfundamentals.org/webgl/lessons/resources/directional-lighting.html?lightDir=\xe5\x85\x89\xe7\xb7\x9a\xe6\x96\xb9\xe5\x90\x91&surface1=\xe3\x82\xaa\xe3\x83\x96\xe3\x82\xb8\xe3\x82\xa7\xe3\x82\xaf\xe3\x83\x88&surface2=\xe8\xa1\xa8\xe9\x9d\xa2\xe6\x96\xb9\xe5\x90\x91&dot=dot(\xe5\x85\x89\xe7\xb7\x9a\xe5\x8f\x8d\xe5\xaf\xbe\xe6\x96\xb9\xe5\x90\x91,\xe8\xa1\xa8\xe9\x9d\xa2\xe6\x96\xb9\xe5\x90\x91)%20%3D%20&ui-rotation=\xe8\xa7\x92\xe5\xba\xa6)\n\n### To build\n\nThe site is built into the `out` folder\n\nSteps\n\n    git clone https://github.com/gfxfundamentals/webgl-fundamentals.git\n    npm install\n    npm run build\n    npm start\n\nnow open your browser to `http://localhost:8080`\n\n### Continuous build\n\nYou can run `npm run watch` after you\'ve built to get continuous building.\nOnly the article .md files and files that are normally copied are supported.\n\n#### Build options\n\nThis is mostly for debugging `build.js`. Since it takes a while to process all the files\nyou can set `ARTICLE_FILTER` to a substring of the filenames to process. For example\n\n    ARTICLE_FILTER=rotation npm run build\n\nWill build the site as though only articles with `rotation` in their filename exist.\n\n## TO DO\n\n### A list of articles I\'d like to write or see written\n\n*   lighting\n    *   normal maps\n    *   shadow maps\n*   geometry\n    *   plane, cube, sphere, cone, disc, torus\n        *   lines vs triangles\n        *   indexed vs non\n        *   vertex colors\n    *   .obj\n    *   other\n    *   pre-process (don\'t load .obj, .dae, .fbx etc at runtime)\n    *   pre-optimize (texture atlas, sizes, combine meshes, etc...)\n*   animation\n    *   blendshapes\n    *   hierarchical animation\n*   debugging\n    *   debugging JS WebGL\n        *   example (https://goo.gl/8U5whT)\n        *   CHECK THE GAWD DAMN CONSOLE!\n            *   actually read the error message\n            *   understand it.\n                *   INVALID_ENUM means one of your gl.XXX values is not valid period\n                *   INVALID_VALUE means one of the int or float values is probably off\n                *   INVALID_OPERATION means something you tried to do won\'t work for the given state\n                *   texture not renderable\n                *   attribute out of range\n                *   check your framebuffers\n                *   check your extensions\n        *   make shorter samples (MCVE) See https://meta.stackoverflow.com/a/349790/128511\n            *   remove any code you don\'t need\n            *   get rid of CSS\n            *   get rid of HTML\n            *   consider using a POINT (no attributes needed)\n            *   don\'t use images if they are not relevant. Use a canvas or a single and double pixel texture\n            *   While creating this MCVE you\'ll often find the bug\n    *   debugging a shader\n        *   set fragment shader to solid color.\n        *   render normals\n        *   render texcoords\n        *   render cube/sphere/plane\n*   text\n    *   glyph cache\n*   post processing\n    *   DOF\n    *   glow\n    *   light rays\n    *   RGB glitch, CRT distortion, scanlines\n    *   color mapping/tone mapping\n*   Creative coding\n    *   color palettes\n    *   indexed everything\n    *   tilemaps\n    *   generated geometry\n    *   histogram\n    *   particles\n    *   toon/ramp shading\n    *   procedural textures\n    *   vsa\n    *   screen shaders (shadertoy)\n        *   https://stackoverflow.com/questions/4638317/how-to-implement-this-rotating-spiral-in-webgl\n*   code organization\n    *   scene graph\n        *   putting lights and camera in scene graph\n*   Engine Creation\n    *   culling\n        *   frustum culling\n        *   grid culling\n        *   quad tree / oct tree\n        *   portals (is this still a thing?)\n        *   PVS\n    *   materials\n    *   lighting DB\n*   Physically based rendering\n\n\n'