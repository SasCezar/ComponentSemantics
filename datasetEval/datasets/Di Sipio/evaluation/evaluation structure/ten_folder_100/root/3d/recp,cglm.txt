b'# \xf0\x9f\x8e\xa5 OpenGL Mathematics (glm) for `C`\n[![Build Status](https://travis-ci.org/recp/cglm.svg?branch=master)](https://travis-ci.org/recp/cglm)\n [![Build status](https://ci.appveyor.com/api/projects/status/av7l3gc0yhfex8y4/branch/master?svg=true)](https://ci.appveyor.com/project/recp/cglm/branch/master)\n[![Documentation Status](https://readthedocs.org/projects/cglm/badge/?version=latest)](http://cglm.readthedocs.io/en/latest/?badge=latest)\n[![Coverage Status](https://coveralls.io/repos/github/recp/cglm/badge.svg?branch=master)](https://coveralls.io/github/recp/cglm?branch=master)\n[![codecov](https://codecov.io/gh/recp/cglm/branch/master/graph/badge.svg)](https://codecov.io/gh/recp/cglm)\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/6a62b37d5f214f178ebef269dc4a6bf1)](https://www.codacy.com/app/recp/cglm?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=recp/cglm&amp;utm_campaign=Badge_Grade)\n[![Backers on Open Collective](https://opencollective.com/cglm/backers/badge.svg)](#backers)\n[![Sponsors on Open Collective](https://opencollective.com/cglm/sponsors/badge.svg)](#sponsors)\n\n#### Documentation\n\nAlmost all functions (inline versions) and parameters are documented inside the corresponding headers. <br />\nComplete documentation: http://cglm.readthedocs.io\n\n#### Note for previous versions:\n\n- _dup (duplicate) is changed to _copy. For instance `glm_vec_dup -> glm_vec3_copy`\n- OpenGL related functions are dropped to make this lib platform/third-party independent\n- make sure you have latest version and feel free to report bugs, troubles\n- **[bugfix]** euler angles was implemented in reverse order (extrinsic) it was fixed, now they are intrinsic. Make sure that\nyou have the latest version\n- **[major change]** by starting v0.4.0, quaternions are stored as [x, y, z, w], it was [w, x, y, z] in v0.3.5 and earlier versions\n- **[api rename]** by starting v0.4.5, **glm_simd** functions are renamed to **glmm_**  \n- **[new option]** by starting v0.4.5, you can disable alignment requirement, check options in docs.  \n- **[major change]** by starting v0.5.0, vec3 functions use **glm_vec3_** namespace, it was **glm_vec_** until v0.5.0\n- **[major change]** by starting v0.5.1, built-in alignment is removed from **vec3** and **mat3** types\n\n#### Note for C++ developers:\nIf you are not aware of the original GLM library yet, you may also want to look at:\nhttps://github.com/g-truc/glm\n\n#### Note for new comers (Important):\n- `vec4` and `mat4` variables must be aligned. (There will be unaligned versions later)\n- **in** and **[in, out]** parameters must be initialized (please). But **[out]** parameters not, initializing out param is  also redundant\n- All functions are inline if you don\'t want to use pre-compiled versions with glmc_ prefix, you can ignore build process. Just include headers.\n- if your debugger takes you to cglm headers then make sure you are not trying to copy vec4 to vec3 or alig issues...\n- Welcome!\n\n#### Note for experienced developers:\n- Since I\'m testing this library in my projects, sometimes bugs occurs; finding that bug[s] and making improvements would be more easy with multiple developer/contributor and their projects or knowledge. Consider to make some tests if you suspect something is wrong and any feedbacks, contributions and bug reports are always welcome.\n\n#### Allocations?\n`cglm` doesn\'t alloc any memory on heap. So it doesn\'t provide any allocator. You should alloc memory for **out** parameters too if you pass pointer of memory location. Don\'t forget that **vec4** (also quat/**versor**) and **mat4** must be aligned (16-bytes), because *cglm* uses SIMD instructions to optimize most operations if available.\n\n#### Returning vector or matrix... ?\n\n**cglm** supports both *ARRAY API* and *STRUCT API*, so you can return structs if you utilize struct api (`glms_`).\n\n#### Other APIs like Vulkan, Metal, Dx?\nCurrently *cglm* uses default clip space configuration (-1, 1) for camera functions (perspective, extract corners...), in the future other clip space configurations will be supported\n\n<hr/>\n\n<table>\n  <tbody>\n    <tr>\n      <td>\n        <div>Like some other graphics libraries (especially OpenGL) this library use Column-Major layout to keep matrices in the memory. </div>\n        <div>&nbsp;</div>\n        <div>In the future the library may support an option to use row-major layout, CURRENTLY if you need to row-major layout you will need to transpose it. </div>\n      </td>\n      <td>\n        <img src="https://upload.wikimedia.org/wikipedia/commons/3/3f/Matrix_Columns.svg" width="300px" />\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n## Features\n- array api and struct api, you can use arrays or structs.\n- general purpose matrix operations (mat4, mat3)\n- chain matrix multiplication (square only)\n- general purpose vector operations (cross, dot, rotate, proj, angle...)\n- affine transformations\n- matrix decomposition (extract rotation, scaling factor)\n- optimized affine transform matrices (mul, rigid-body inverse)\n- camera (lookat)\n- projections (ortho, perspective)\n- quaternions\n- euler angles / yaw-pitch-roll to matrix\n- extract euler angles\n- inline or pre-compiled function call\n- frustum (extract view frustum planes, corners...)\n- bounding box  (AABB in Frustum (culling), crop, merge...)\n- bounding sphere\n- project, unproject\n- easing functions\n- curves\n- curve interpolation helpers (S*M*C, deCasteljau...)\n- helpers to convert cglm types to Apple\'s simd library to pass cglm types to Metal GL without packing them on both sides\n- and others...\n\n<hr />\n\nYou have two option to call a function/operation: inline or library call (link)\nAlmost all functions are marked inline (always_inline) so compiler will probably inline.\nTo call pre-compiled version, just use `glmc_` (c stands for \'call\') instead of `glm_`.\n\n```C\n  #include <cglm/cglm.h>   /* for inline */\n  #include <cglm/call.h>   /* for library call (this also includes cglm.h) */\n\n  mat4 rot, trans, rt;\n  /* ... */\n  glm_mul(trans, rot, rt);  /* inline */\n  glmc_mul(trans, rot, rt); /* call from library */\n```\nMost of math functions are optimized manualy with SSE2 if available, if not? Dont worry there are non-sse versions of all operations\n\nYou can pass matrices and vectors as array to functions rather than get address.\n\n```C\n  mat4 m = {\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    0, 0, 0, 1\n  };\n\n  glm_translate(m, (vec3){1.0f, 0.0f, 0.0f});\n```\n\nLibrary contains general purpose mat4 mul and inverse functions, and also contains some special forms (optimized) of these functions for affine transformations\' matrices. If you want to multiply two affine transformation matrices you can use glm_mul instead of glm_mat4_mul and glm_inv_tr (ROT + TR) instead glm_mat4_inv\n```C\n/* multiplication */\nmat4 modelMat;\nglm_mul(T, R, modelMat);\n\n/* othonormal rot + tr matrix inverse (rigid-body) */\nglm_inv_tr(modelMat);\n```\n\n### Struct API\n\nThe struct API works as follows, note the `s` suffix on types, the `glms_` prefix on functions and the `GLMS_` prefix on constants:\n\n```C\n#include <cglm/struct.h>\n\nmat4s mat = GLMS_MAT4_IDENTITY_INIT;\nmat4s inv = glms_mat4_inv(mat);\n```\n\nStruct functions generally take their parameters as *values* and *return* their results, rather than taking pointers and writing to out parameters. That means your parameters can usually be `const`, if you\'re into that.\n\nThe types used are actually unions that allow access to the same data multiple ways. One of those ways involves anonymous structures, available since C11. MSVC also supports it for earlier C versions out of the box and GCC/Clang do if you enable `-fms-extensions`. To explicitly enable these anonymous structures, `#define CGLM_USE_ANONYMOUS_STRUCT` to `1`, to disable them, to `0`. For backward compatibility, you can also `#define CGLM_NO_ANONYMOUS_STRUCT` (value is irrelevant) to disable them. If you don\'t specify explicitly, cglm will do a best guess based on your compiler and the C version you\'re using.\n\n## Build\n\n### Unix (Autotools)\n\n```bash\n$ sh autogen.sh\n$ ./configure\n$ make\n$ make check # [Optional]\n$ [sudo] make install # [Optional]\n```\n\nThis will also install pkg-config files so you can use\n`pkg-config --cflags cglm` and `pkg-config --libs cglm` to retrieve compiler\nand linker flags.\n\nThe files will be installed into the given prefix (usually `/usr/local` by\ndefault on Linux), but your pkg-config may not be configured to actually check\nthere. You can figure out where it\'s looking by running `pkg-config --variable\npc_path pkg-config` and change the path the files are installed to via\n`./configure --with-pkgconfigdir=/your/path`. Alternatively, you can add the\nprefix path to your `PKG_CONFIG_PATH` environment variable.\n\n### Windows (MSBuild)\nWindows related build file and project files are located in `win` folder,\nmake sure you are inside `cglm/win` folder.\nCode Analysis is enabled, so it may take awhile to build.\n\n```Powershell\n$ cd win\n$ .\\build.bat\n```\nif `msbuild` won\'t work (because of multi version VS) then try to build with `devenv`:\n```Powershell\n$ devenv cglm.sln /Build Release\n```\n\n#### Running Tests on Windows\n\nYou can see test project in same visual studio solution file. It is enough to run that project to run tests.\n\n### Building Docs\nFirst you need install Sphinx: http://www.sphinx-doc.org/en/master/usage/installation.html\nthen:\n```bash\n$ cd docs\n$ sphinx-build source build\n```\nit will compile docs into build folder, you can run index.html inside that function.\n\n## How to use\nIf you want to use the inline versions of functions, then include the main header\n```C\n#include <cglm/cglm.h>\n```\nthe header will include all headers. Then call the func you want e.g. rotate vector by axis:\n```C\nglm_vec3_rotate(v1, glm_rad(45), (vec3){1.0f, 0.0f, 0.0f});\n```\nsome functions are overloaded :) e.g you can normalize vector:\n```C\nglm_vec3_normalize(vec);\n```\nthis will normalize vec and store normalized vector into `vec` but if you will store normalized vector into another vector do this:\n```C\nglm_vec3_normalize_to(vec, result);\n```\nlike this function you may see `_to` postfix, this functions store results to another variables and save temp memory\n\n\nto call pre-compiled versions include header with `c` postfix, c means call. Pre-compiled versions are just wrappers.\n```C\n#include <cglm/call.h>\n```\nthis header will include all headers with c postfix. You need to call functions with c posfix:\n```C\nglmc_vec3_normalize(vec);\n```\n\nFunction usage and parameters are documented inside related headers. You may see same parameter passed twice in some examples like this:\n```C\nglm_mat4_mul(m1, m2, m1);\n\n/* or */\nglm_mat4_mul(m1, m1, m1);\n```\nthe first two parameter are **[in]** and the last one is **[out]** parameter. After multiplying *m1* and *m2*, the result is stored in *m1*. This is why we send *m1* twice. You may store the result in a different matrix, this is just an example.\n\n### Example: Computing MVP matrix\n\n#### Option 1\n```C\nmat4 proj, view, model, mvp;\n\n/* init proj, view and model ... */\n\nglm_mat4_mul(proj, view, viewProj);\nglm_mat4_mul(viewProj, model, mvp);\n```\n\n#### Option 2\n```C\nmat4 proj, view, model, mvp;\n\n/* init proj, view and model ... */\n\nglm_mat4_mulN((mat4 *[]){&proj, &view, &model}, 3, mvp);\n```\n\n## How to send matrix to OpenGL\n\nmat4 is array of vec4 and vec4 is array of floats. `glUniformMatrix4fv` functions accecpts `float*` as `value` (last param), so you can cast mat4 to float* or you can pass first column of matrix as beginning of memory of matrix:\n\nOption 1: Send first column\n```C\nglUniformMatrix4fv(location, 1, GL_FALSE, matrix[0]);\n\n/* array of matrices */\nglUniformMatrix4fv(location, 1, GL_FALSE, matrix[0][0]);\n```\n\nOption 2: Cast matrix to pointer type (also valid for multiple dimensional arrays)\n```C\nglUniformMatrix4fv(location, 1, GL_FALSE, (float *)matrix);\n```\n\nYou can pass matrices the same way to other APIs e.g. Vulkan, DX...\n\n## Notes\n\n- This library uses float types only, does not support Integers, Double... yet\n- If headers are not working properly with your compiler, IDE please open an issue, because I\'m using GCC and clang to test it maybe sometimes MSVC\n\n**TODO:**\n- [ ] Unit tests (In Progress)\n- [ ] Unit tests for comparing cglm with glm results\n- [x] Add version info\n- [ ] Unaligned operations (e.g. `glm_umat4_mul`)\n- [x] Extra documentation\n- [ ] ARM Neon Arch (In Progress)\n\n\n## Contributors\n\nThis project exists thanks to all the people who contribute. [[Contribute](CONTRIBUTING.md)].\n<a href="graphs/contributors"><img src="https://opencollective.com/cglm/contributors.svg?width=890&button=false" /></a>\n\n\n## Backers\n\nThank you to all our backers! \xf0\x9f\x99\x8f [[Become a backer](https://opencollective.com/cglm#backer)]\n\n<a href="https://opencollective.com/cglm#backers" target="_blank"><img src="https://opencollective.com/cglm/backers.svg?width=890"></a>\n\n\n## Sponsors\n\nSupport this project by becoming a sponsor. Your logo will show up here with a link to your website. [[Become a sponsor](https://opencollective.com/cglm#sponsor)]\n\n<a href="https://opencollective.com/cglm/sponsor/0/website" target="_blank"><img src="https://opencollective.com/cglm/sponsor/0/avatar.svg"></a>\n<a href="https://opencollective.com/cglm/sponsor/1/website" target="_blank"><img src="https://opencollective.com/cglm/sponsor/1/avatar.svg"></a>\n<a href="https://opencollective.com/cglm/sponsor/2/website" target="_blank"><img src="https://opencollective.com/cglm/sponsor/2/avatar.svg"></a>\n<a href="https://opencollective.com/cglm/sponsor/3/website" target="_blank"><img src="https://opencollective.com/cglm/sponsor/3/avatar.svg"></a>\n<a href="https://opencollective.com/cglm/sponsor/4/website" target="_blank"><img src="https://opencollective.com/cglm/sponsor/4/avatar.svg"></a>\n<a href="https://opencollective.com/cglm/sponsor/5/website" target="_blank"><img src="https://opencollective.com/cglm/sponsor/5/avatar.svg"></a>\n<a href="https://opencollective.com/cglm/sponsor/6/website" target="_blank"><img src="https://opencollective.com/cglm/sponsor/6/avatar.svg"></a>\n<a href="https://opencollective.com/cglm/sponsor/7/website" target="_blank"><img src="https://opencollective.com/cglm/sponsor/7/avatar.svg"></a>\n<a href="https://opencollective.com/cglm/sponsor/8/website" target="_blank"><img src="https://opencollective.com/cglm/sponsor/8/avatar.svg"></a>\n<a href="https://opencollective.com/cglm/sponsor/9/website" target="_blank"><img src="https://opencollective.com/cglm/sponsor/9/avatar.svg"></a>\n\n## License\nMIT. check the LICENSE file\n'