b'# FauxGL\n\n3D software rendering in pure Go. No OpenGL, no C extensions, no nothin\'.\n\n<br>\n\n![Dragon](http://i.imgur.com/uwehodr.png)\n\n### About\n\nIt\'s like OpenGL, but it\'s not. It\'s FauxGL.\n\nIt doesn\'t use your graphics card, only your CPU. So it\'s slow and unsuitable for realtime rendering. But it\'s still pretty fast. It works the same way OpenGL works - rasterizing.\n\n### Features\n\n- STL, OBJ, PLY, 3DS file formats\n- triangle rasterization\n- vertex and fragment "shaders"\n- view volume clipping\n- face culling\n- alpha blending\n- textures\n- triangle & line meshes\n- depth biasing\n- wireframe rendering\n- built-in shapes (plane, sphere, cube, cylinder, cone)\n- anti-aliasing (via supersampling)\n- voxel rendering\n- parallel processing\n\n### Performance\n\nFauxGL uses all of your CPU cores. But none of your GPU.\n\nRendering the Stanford Dragon shown above (871306 triangles) at 1920x1080px takes about 150 milliseconds on my machine. With 4x4=16x supersampling, it takes about 950 milliseconds. This is the time to render a frame and does not include loading the mesh from disk.\n\n### Go Get\n\n    go get -u github.com/fogleman/fauxgl\n\n### Go Run\n\n    cd go/src/github.com/fogleman/fauxgl\n    go run examples/hello.go\n\n### Go Doc\n\nhttps://godoc.org/github.com/fogleman/fauxgl\n\n### Complete Example\n\n```go\npackage main\n\nimport (\n\t. "github.com/fogleman/fauxgl"\n\t"github.com/nfnt/resize"\n)\n\nconst (\n\tscale  = 1    // optional supersampling\n\twidth  = 1920 // output width in pixels\n\theight = 1080 // output height in pixels\n\tfovy   = 30   // vertical field of view in degrees\n\tnear   = 1    // near clipping plane\n\tfar    = 10   // far clipping plane\n)\n\nvar (\n\teye    = V(-3, 1, -0.75)               // camera position\n\tcenter = V(0, -0.07, 0)                // view center position\n\tup     = V(0, 1, 0)                    // up vector\n\tlight  = V(-0.75, 1, 0.25).Normalize() // light direction\n\tcolor  = HexColor("#468966")           // object color\n)\n\nfunc main() {\n\t// load a mesh\n\tmesh, err := LoadOBJ("examples/dragon.obj")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\t// fit mesh in a bi-unit cube centered at the origin\n\tmesh.BiUnitCube()\n\n\t// smooth the normals\n\tmesh.SmoothNormalsThreshold(Radians(30))\n\n\t// create a rendering context\n\tcontext := NewContext(width*scale, height*scale)\n\tcontext.ClearColorBufferWith(HexColor("#FFF8E3"))\n\n\t// create transformation matrix and light direction\n\taspect := float64(width) / float64(height)\n\tmatrix := LookAt(eye, center, up).Perspective(fovy, aspect, near, far)\n\n\t// use builtin phong shader\n\tshader := NewPhongShader(matrix, light, eye)\n\tshader.ObjectColor = color\n\tcontext.Shader = shader\n\n\t// render\n\tcontext.DrawMesh(mesh)\n\n\t// downsample image for antialiasing\n\timage := context.Image()\n\timage = resize.Resize(width, height, image, resize.Bilinear)\n\n\t// save image\n\tSavePNG("out.png", image)\n}\n```\n\n![Teapot](http://i.imgur.com/DaqbkLR.png)\n'