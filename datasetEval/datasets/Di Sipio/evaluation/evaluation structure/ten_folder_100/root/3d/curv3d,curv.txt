b'=================================================\nCurv: a language for making art using mathematics\n=================================================\n\nBy Doug Moen <doug@moens.org>\n\n|twistor| |shreks_donut|\n\n.. |twistor| image:: docs/images/torus.png\n.. |shreks_donut| image:: docs/images/shreks_donut.png\n\nCurv is a programming language for creating art using mathematics.\nIt\'s a 2D and 3D geometric modelling tool that supports full colour,\nanimation and 3D printing.\n\nFeatures:\n\n* Curv is a simple, powerful, dynamically typed, pure functional\n  programming language.\n* Curv is easy to use for beginners. It has a standard library of\n  predefined geometric shapes, plus operators for transforming and\n  combining shapes. These can be plugged together like Lego to make 2D and 3D\n  models.\n* Coloured shapes are represented using Function Representation (F-Rep).\n  They can be infinitely detailed, infinitely large, and any shape or colour\n  pattern that can be described using mathematics can be represented exactly.\n* Curv exposes the full power of F-Rep programming to experts.\n  The standard geometry library is written entirely in Curv.\n  Many of the demos seen on shadertoy.com can be reproduced in Curv,\n  using shorter, simpler programs. Experts can package techniques used on\n  shadertoy as high level operations for use by beginners.\n* Rendering is GPU accelerated. Curv programs are compiled into fragment\n  shaders which are executed on the GPU.\n* Curv can export meshes to STL, OBJ and X3D files for 3D printing.\n  The X3D format supports full colour 3D printing (on Shapeways.com, at least).\n  These meshes are defect free: watertight, manifold, with no self\n  intersections, degenerate triangles, or flipped triangles.\n\nGetting Started\n===============\n* To install the software, see `<BUILD.md>`_.\n* The documentation is here: `<docs/README.rst>`_.\n* Mailing list: `<https://groups.google.com/d/forum/curv>`_.\n  You can join the mailing list using your Google account (or you\'ll be prompted to create an account).\n  If you don\'t want to have a Google account, then send email to `doug@moens.org`\n  and I will send you an invitation to join the list.\n* To contribute, see `<CONTRIBUTING.md>`_.\n\nHardware Requirements\n=====================\nTwo platforms are currently supported: Linux and Macintosh. I currently test\non Ubuntu LTS and MacOS 10.11. A Windows 10 port could happen in the future.\n\nCurv uses OpenGL 3.3.\nThe recommended configuration is a GPU made by Intel, AMD or Nvidia,\nusing a known working GPU driver (see below).\n\n* On Macintosh, you need MacOS 10.7 or later.\n  If your system supports Metal, Curv is fully supported.\n  On a pre-Metal system (hardware from 2011 or earlier),\n  some Curv programs may not work correctly.\n* On Linux, the GPU needs to be modern enough to be supported\n  by the latest driver version from the GPU vendor. Any GPU from 2012 or later\n  will work. Some older GPUs may work: check the list of supported hardware\n  for the driver.\n* On Windows 10, it might be possible to use WSL to run Curv. WSL 1 has no\n  official GUI or GPU support, but there appear to be 3rd party workarounds.\n  In the future, Microsoft has indicated interest in supporting the GPU\n  in WSL 2. A WIN32 port is possible, but I\'d need a volunteer for this.\n* Raspberry Pi isn\'t supported.\n  * The Raspberry Pi 4 could be supported in the future. Curv uses OpenGL 3.3,\n    which will not be supported. As of Oct 2019, OpenGL ES 3.1 support is\n    "coming soon", and Curv could be modified to use that API instead.\n    https://www.raspberrypi.org/blog/vc4-and-v3d-opengl-drivers-for-raspberry-pi-an-update/\n  * Raspberry Pi 3 won\'t be supported. At best, it supports OpenGL ES 2.0\n    (not good enough).\n\n* On Linux, you have 3 choices:\n\n  * An Nvidia GPU, with the Nvidia closed source driver.\n    Any GPU supported by the latest Nvidia driver will work with Curv.\n\n    The open source Nouveau driver is slow and buggy. Curv runs too slow,\n    with visual glitches. If you don\'t mind driver hacking, there are some\n    mitigations you can try. See `issue #78`_.\n\n  * An Intel GPU, using the Intel supplied open source driver (based on Mesa).\n    Any GPU supported by the latest Intel driver will work with Curv\n    (this means: Intel HD Graphics or later).\n\n  * An AMD GPU with the open source Mesa driver, version 19.x or later.\n    The AMDGPU-PRO (closed source) driver should work, but I have no testing\n    reports for it.\n    \n    Mesa version 18.x or earlier has a bug on AMD (`issue #30`_) which prevents\n    some Curv programs from running.\n\n* If Curv is invoked within a VNC session, then it might not have direct\n  access to GPU hardware (a slow software renderer is used instead of the GPU).\n  Curv requires a GPU accelerated VNC server.\n  Try `TurboVNC`_ combined with `VirtualGL`_.\n* If Curv is run inside a VM, then it might not have direct access to the GPU.\n  You need to ensure that the VM is GPU accelerated.\n\nWhy is Curv so picky about GPU drivers and hardware, when [some old 3D\nsoftware] runs just fine? The answer is that old 3D software relies primarily\non triangle meshes for representing and rendering 3D shapes, whereas Curv\nuses signed distance fields to represent shapes. Signed distance fields are\na powerful, hot new technology that is only made practical by modern GPUs.\nCurv uses shader programs to render shapes, and uses larger and more complex\nshader programs than [some old 3D software]. This places a heavy and atypical\nload on the GPU driver and hardware, which old hardware and old, outdated\ndriver software may not be prepared to deal with.\n\n.. _`TurboVNC`: https://turbovnc.org/About/Introduction\n.. _`VirtualGL`: https://virtualgl.org/About/Introduction\n.. _`issue #78`: https://github.com/curv3d/curv/issues/78\n.. _`issue #30`: https://github.com/curv3d/curv/issues/30\n.. _`The open source AMD driver has a bug`: https://bugs.freedesktop.org/show_bug.cgi?id=105371\n'