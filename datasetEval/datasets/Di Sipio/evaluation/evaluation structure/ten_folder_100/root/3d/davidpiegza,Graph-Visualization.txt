b'### Notice: This repo is not maintained anymore but PRs are still welcome.\n\n# Graph-Visualization\n\nThis project is about 3D graph visualization with WebGL. The aim of this project is to evaluate the possibilities of graph drawing in WebGL.\n\nIt uses [Three.js](https://threejs.org/) for drawing and currently supports a force directed layout.\n\n\n### Run the example\n\nYou can see the examples at http://davidpiegza.github.io/Graph-Visualization/index.html or:\n\n1. Clone or download the project\n2. Open the index.html in a WebGL-compatible browser\n\nThe `examples` folder contains all examples.\n\n## Project Description\n\nThe project consists of\n\n  - a graph structure\n  - a graph layout implementation\n  - and a graph drawing implementation\n\n### Graph Structure\n\nThis is implemented in [src/graph.js](https://github.com/davidpiegza/Graph-Visualization/blob/master/src/graph.js).\n\nUsage:\n\n```js\n  // create a graph with maximum number of nodes (optional)\n  var graph = new GRAPHVIS.Graph({limit: 100});\n  // create nodes with an id\n  var node1 = new GRAPHVIS.Node(1);\n  var node2 = new GRAPHVIS.Node(2);\n  // add nodes to the graph\n  graph.addNode(node1);\n  graph.addNode(node2);\n  // create edge between nodes\n  graph.addEdge(node1, node2);\n```\n\nNode:\n\nA node has the properties\n\n  - `ID`\n  - `nodesTo`, Array with connected nodes\n  - `nodesFrom`, Array with connected nodes\n  - `position`, Object for x, y, z position, default is {}\n  - `data`, Object with further properties, e.g. properties for a graph layout\n\nFor more details have a look at the [source code](https://github.com/davidpiegza/Graph-Visualization/blob/master/src/graph.js).\n\n### Graph Layout\n\nA graph layout has the basic structure:\n\n```js\n  var Layout = Layout || {};\n  Layout.ForceDirected = function(graph, options) {\n    this.init = function() {\n      ...\n    };\n\n    this.generate = function() {\n      ...\n    };\n  }\n```\n\nThe `init()` function is called after graph creation, the `generate()` function is called on each render-call.\n\nThe graph layout gets the created graph and calculates new positions for the nodes. The `generate()` function is called repeatedly, so there must be a stop condition after finished calculation.\n\nThe graph layout may extend the nodes and edges with custom properties in the data object.\n\nSee [force-directed-layout.js](https://github.com/davidpiegza/Graph-Visualization/blob/master/src/layouts/force-directed-layout.js) for example usage.\n\n\n## Contribution\n\nIt would be great to have more examples of force-directed graphs or other 3d graph layouts. To add a new example, just copy one of the existing [examples](https://github.com/davidpiegza/Graph-Visualization/blob/master/examples), add a new `Drawing` object and update the `index.html`.\n\n ***Check out the [open issues](https://github.com/davidpiegza/Graph-Visualization/issues) for a specific task***.\n\nThis project uses [Grunt](http://gruntjs.com/) to run several tasks in development. You should have `npm` and `grunt` installed. To install `grunt` run\n\n    npm install -g grunt-cli\n\nAnd to install all dependencies run\n\n    npm install\n\nFor more info check the [Grunt - Getting started guide](http://gruntjs.com/getting-started).\n\nIf you added some changes, run `grunt` to check the code.\n\n## Changelog\n\nSee [releases](https://github.com/davidpiegza/Graph-Visualization/releases).\n'