b'> ## \xf0\x9f\x9b\xa0 Status: In Development\n> `<model-viewer>` is currently in development. It\'s on the fast track to a 1.0 release, so we encourage you to use it and give us your feedback, but there are things that haven\'t been finalized yet and you can expect some changes.\n\n\n# `<model-viewer>`\n\n [![Build Status](https://api.travis-ci.org/GoogleWebComponents/model-viewer.svg?branch=master)](https://travis-ci.org/GoogleWebComponents/model-viewer)\n [![NPM](https://img.shields.io/npm/v/@google/model-viewer.svg)](https://www.npmjs.com/package/@google/model-viewer)\n [![Bundlephobia](https://badgen.net/bundlephobia/minzip/@google/model-viewer)](https://bundlephobia.com/result?p=@google/model-viewer)\n\n`<model-viewer>` is a web component that makes rendering interactive 3D\nmodels - optionally in AR - easy to do, on as many browsers and devices as possible.\n`<model-viewer>` strives to give you great defaults for rendering quality and\nperformance.\n\nAs new standards and APIs become available `<model-viewer>` will be improved\nto take advantage of them. If possible, fallbacks and polyfills will be\nsupported to provide a seamless development experience.\n\n[Demo](https://model-viewer.glitch.me) \xe2\x80\xa2 [Documentation](https://googlewebcomponents.github.io/model-viewer/index.html) \xe2\x80\xa2 [Kanban](https://github.com/GoogleWebComponents/model-viewer/projects/1) \xe2\x80\xa2 [Quality Tests](https://googlewebcomponents.github.io/model-viewer/test/fidelity/results-viewer.html)\n\n![sample-render](examples/sample-render.png)\n\n\n## Installing\n\nYou can load a _bundled build_ via [UNPKG](https://unpkg.com/) by including the snippet below. This will automatically load the correct version for the user\'s browser.\n\n```html\n<!-- \xf0\x9f\x92\x81 Include both scripts below to support all browsers! -->\n\n<!-- Loads <model-viewer> for modern browsers: -->\n<script type="module"\n    src="https://unpkg.com/@google/model-viewer/dist/model-viewer.js">\n</script>\n\n<!-- Loads <model-viewer> for old browsers like IE11: -->\n<script nomodule\n    src="https://unpkg.com/@google/model-viewer/dist/model-viewer-legacy.js">\n</script>\n```\n\nAlternatively, you can install the _npm package_:\n\n```\nnpm install ---save @google/model-viewer\n```\n\n### Important note on bundling\n\nBundled builds are useful for demos or for kicking the tires. However,\nthe _bundled build_ includes some third party dependencies. Some of these\ndependencies (like [three](https://threejs.org/)) are quite large. For\nproduction use cases we recommend that you use the _npm package_ and your\nown bundler (such as [Rollup](http://rollupjs.org) or\n[Webpack](https://webpack.js.org/)) to eliminate potential duplicate\ndependencies.\n\n## Usage\n\nIf you are using a _bundled build_, first add a script tag to your page to load\n`<model-viewer>` as described in the [Installing](#installing) section.\n\nAlternatively, if you are using the _npm package_ and a bundler (see\n"Important note on bundling" above), you can import the module:\n\n```javascript\nimport \'@google/model-viewer\';\n```\n\nAfter the library has been loaded, a new custom element will be defined. You can\nuse it anywhere you would write HTML. For example, using the _bundled build_ in\nan HTML document might look like this:\n\n```html\n<!doctype html>\n<html>\n  <head>\n    <title>3D Test</title>\n    <script src="path/to/bundled/model-viewer.js"></script>\n  </head>\n  <body>\n    <model-viewer src="path/to/model.gltf"></model-viewer>\n  </body>\n</html>\n```\n\nAlternatively, using the _npm package_ in a JavaScript module might look like\nthis:\n\n```javascript\nimport \'@google/model-viewer\';\n\nconst model = document.createElement(\'model-viewer\');\nmodel.src = \'path/to/model.gltf\';\n\ndocument.body.appendChild(model);\n```\n\nYou can think of `<model-viewer>` sort of like an `<img>` or `<video>` tag, but for\n3D content. Just set its `src` attribute to the URL of a valid [glTF][glTF] (or\n[GLB][GLB]) file and voila!\n\n## Browser Support\n\n`<model-viewer>` is supported on the last 2 major versions of all evergreen\ndesktop and mobile browsers. `<model-viewer>` is also supported on IE11.\n\n|               | <img src="https://github.com/alrra/browser-logos/raw/master/src/chrome/chrome_32x32.png" width="16"> Chrome | <img src="https://github.com/alrra/browser-logos/raw/master/src/firefox/firefox_32x32.png" width="16"> Firefox | <img src="https://github.com/alrra/browser-logos/raw/master/src/safari/safari_32x32.png" width="16"> Safari | <img src="https://github.com/alrra/browser-logos/raw/master/src/edge/edge_32x32.png" width="16"> Edge | <img src="https://github.com/alrra/browser-logos/raw/master/src/archive/internet-explorer_9-11/internet-explorer_9-11_32x32.png" width="16"> IE11 |\n| -------- | --- | --- | --- | --- | --- |\n| Desktop  | \xe2\x9c\x85  | \xe2\x9c\x85  | \xe2\x9c\x85  | \xe2\x9c\x85  | \xe2\x9c\x85  |\n| Mobile   | \xe2\x9c\x85  | \xe2\x9c\x85  | \xe2\x9c\x85  | \xe2\x9c\x85  | N/A |\n\n`<model-viewer>` builds upon standard web platform APIs so that the performance,\ncapabilities and compatibility of the library get better as the web evolves.\n\nHowever, not all browsers support all of these features today. **Check out\n[POLYFILLS.md](https://github.com/PolymerLabs/model-viewer/blob/master/POLYFILLS.md) to\nlearn how to polyfill for maximum browser compatibility!**\n\n## API\n\nFor full details regarding the attributes, properties, events and more supported\nby `<model-viewer>`, please refer to our\n[online documentation](https://googlewebcomponents.github.io/model-viewer/).\n\n## Styling\n\nCurrently no custom CSS variables are supported, but the model viewer\'s containing box\ncan be sized via traditional `width` and `height` properties, and positioned with\nthe typical properties (`display`, `position`, etc.).\n\n## Format Support\n\nA `<model-viewer>`\'s attributes allows developers to specify multiple file types to\nwork across different platforms. For WebGL and WebXR purposes, both\n[glTF][glTF] and [GLB][GLB] are supported out of the box. Additionally,\ndevelopers can specify a [USDZ][USDZ] file (using the `ios-src` attribute) that\nwill be used to launch Quick Look on iOS Safari as an interim solution until\nSafari has support for something like the WebXR Device and Hit Test APIs.\n\n## Loading Performance\n\nModels are often large, so especially on pages with large numbers of them it\nmay be desirable to load them after user action. Three parameters -\n*`poster`*, *`preload`*, and *`reveal`* - control the loading\nbehavior.\n\nFour configuration options are available:\n\n* By default, the model will load with the page and will be displayed once\n  it\'s loaded.\n* With a *`poster`* specified, the model will not load or display until the\n  user takes action (for instance, by clicking on the model element).\n* With both *`poster`* and *`preload`* set, the model will load with the page, but\n  the poster image will be displayed until the user takes action.\n* With all of *`poster`*, *`preload`*, and *`reveal-when-loaded`* set, the poster\n  will be displayed until the model is loaded, at which time the poster will\n  be hidden and the model displayed.\n\nSee the [loading examples](https://googlewebcomponents.github.io/model-viewer/examples/lazy-loading.html)\n\n### Important note on data usage\n\niOS Quick Look only supports model files that use the [USDZ][USDZ] format. This\nmeans that iOS users who see a live-rendered model in the browser (loaded as\n[glTF][glTF]/[GLB][GLB]) will have to download the same model\na _second time_ in [USDZ][USDZ] format when they launch Quick Look.\n\n## Augmented Reality\n\nThere are currently multiple options for viewing content in augmented reality.\nDifferent platforms enable slightly different experiences, but generally finds\na real-world surface and allows the user to place the model, to be viewed through\na camera.\n\nThe attributes `ar`, `ios-src`, `magic-leap` and `unstable-webxr` enable AR\nfeatures on certain platforms. See the\n[documentation](https://googlewebcomponents.github.io/model-viewer/) for each\nto understand the support and caveats.\n\nWhen in augmented reality, all current platforms assume that the models unit size\nbe in meters, such that a 1.5 unit tall model will be 1.5 meters when in AR.\n\nSee the [augmented reality examples](https://googlewebcomponents.github.io/model-viewer/examples/augmented-reality.html).\n\n## Development\n\nAfter you have cloned the repository locally, you should run:\n\n```\nnpm install\n```\n\nThis will install dependencies, run a build and run the tests. Build artifacts\nare placed in the `lib` and `dist` folders.\n\nThe following npm scripts are available:\n\n* `npm run clean` - Deletes all build artifacts.\n* `npm run build` - Builds the distributable from the `src/` directory.\n* `npm run watch` - Watches the `src/` directory, rebuilding when a file changes.\n* `npm run serve` - Serves a static server on port `8000` from the project root.\n* `npm run dev` - Combination of `npm run watch` and `npm run serve` -- watches the `src/` directory, rebuilding when a file changes and opens a static server on port `8000`. Note: This does not rebuild everything, so if you made changes to tests or fidelity, you\'ll probably still need to \nrun build separately to pick up the changes.\n* `npm test` - Runs tests.\n* `npm run fetch-samples` - Pull the Khronos sample models for fidelity testing. \nNote: This will download hundreds of megabytes of data the first time you run it.\n* `npm run check-fidelity` - Compare rendering to third-party renderers.\n* `npm run update-screenshots` - Take screenshots of fidelity tests using third-party renderers. If you get an error about not having `convert`, make sure to install Image Magick, e.g. on OSX run `brew install imagemagick`.\n\n## Examples\n\nThis repo contains examples to demonstrate how &lt;model-viewer&gt; may be used. Before running them do the following:\n\n```\ncd path/to/cloned/repo\nnpm install\nnpm run build\n```\n\nTo run the examples:\n\n```\nnpm run serve\n```\n\n\n## License\n\nApache License Version 2.0, Copyright \xc2\xa9 2018 Google\n\n[USDZ]: https://graphics.pixar.com/usd/docs/Usdz-File-Format-Specification.html\n[glTF]: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0\n[GLB]: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#glb-file-format-specification\n[WebXR Device API]: https://github.com/immersive-web/webxr\n'