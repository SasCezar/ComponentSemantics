b'# Face Alignment in Full Pose Range: A 3D Total Solution\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](LICENSE)\n[![HitCount](http://hits.dwyl.io/cleardusk/3DDFA.svg)](http://hits.dwyl.io/cleardusk/3DDFA)\n![stars](https://img.shields.io/github/stars/cleardusk/3DDFA.svg?style=flat)\n![GitHub issues](https://img.shields.io/github/issues/cleardusk/3DDFA.svg)\n![GitHub repo size](https://img.shields.io/github/repo-size/cleardusk/3DDFA.svg)\n\nBy [Jianzhu Guo](https://guojianzhu.com/aboutme.html).\n\n<p align="center">\n  <img src="samples/obama_three_styles.gif" alt="obama">\n</p>\n\n**\\[Updates\\]**\n\n - `2019.9.15`: Some updates, see the commits for details.\n - `2019.6.17`: Adding a [video demo](./video_demo.py) contributed by [zjjMaiMai](https://github.com/zjjMaiMai).\n - `2019.5.2`: Evaluating inference speed on CPU with PyTorch v1.1.0, see [here](#CPU) and [speed_cpu.py](./speed_cpu.py).\n - `2019.4.27`: A simple render pipline running at ~25ms/frame (720p), see [rendering.py](demo@obama/rendering.py) for more details.\n - `2019.4.24`: Providing the demo building of obama, see [demo@obama/readme.md](demo@obama/readme.md) for more details.\n - `2019.3.28`: Some updates.\n - `2018.12.23`: **Add several features: depth image estimation, PNCC, PAF feature and obj serialization.** See `dump_depth`, `dump_pncc`, `dump_paf`, `dump_obj` options for more details.\n - `2018.12.2`: Support landmark-free face cropping, see `dlib_landmark` option.\n - `2018.12.1`: Refine code and add pose estimation feature, see [utils/estimate_pose.py](./utils/estimate_pose.py) for more details.\n - `2018.11.17`: Refine code and map the 3d vertex to original image space.\n - `2018.11.11`: **Update end-to-end inference pipeline: infer/serialize 3D face shape and 68 landmarks given one arbitrary image, please see readme.md below for more details.**\n - `2018.10.4`: Add Matlab face mesh rendering demo in [visualize](./visualize).\n - `2018.9.9`: Add pre-process of face cropping in [benchmark](./benchmark).\n\n**\\[Todo\\]**\n\n- [x] Depth image estimation.\n- [x] PNCC (Projected Normalized Coordinate Code).\n- [x] PAF (Pose Adaptive Feature).\n- [x] Obj serialization with sampled texture.\n- [x] Recommendation of fast face detectors: [FaceBoxes.PyTorch](https://github.com/zisianw/FaceBoxes.PyTorch), [libfacedetection](https://github.com/ShiqiYu/libfacedetection), [ZQCNN](https://github.com/zuoqing1988/ZQCNN)\n- [x] [Training details](#Training-details)\n- [x] Face Profiling: [Official Matlab code](http://www.cbsr.ia.ac.cn/users/xiangyuzhu/projects/3DDFA/Code/FaceProfilingRelease_v1.1.zip)\n\n## Introduction\nThis repo holds the pytorch improved version of the paper: [Face Alignment in Full Pose Range: A 3D Total Solution](https://arxiv.org/abs/1804.01005). Several works beyond the original paper are added, including the real-time training, training strategies. Therefore, this repo is an improved version of the original work. As far, this repo releases the pre-trained first-stage pytorch models of MobileNet-V1 structure, the pre-processed training&testing dataset and codebase. Note that the inference time is about **0.27ms per image** (input batch with 128 images as an input batch) on GeForce GTX TITAN X.\n<!-- Note that if your academic work use the code of this repo, you should cite this repo not the original paper.-->\n<!-- One related blog will be published for some important technique details in future. -->\n<!-- Why not evaluate it on single image? Because most time for single image is spent on function call. The inference speed is equal to MobileNet-V1 with 120x120x3 tensor as input, therefore it is possible to convert to mobile devices. -->\n\n**This repo will keep updating in my spare time, and any meaningful issues and PR are welcomed.**\n\nSeveral results on ALFW-2000 dataset (inferenced from model *phase1_wpdc_vdc.pth.tar*) are shown below.\n<p align="center">\n  <img src="imgs/landmark_3d.jpg" alt="Landmark 3D" width="1000px">\n</p>\n\n<p align="center">\n  <img src="imgs/vertex_3d.jpg" alt="Vertex 3D" width="750px">\n</p>\n\n## Applications & Features\n#### 1. Face Alignment\n<p align="center">\n  <img src="samples/dapeng_3DDFA_trim.gif" alt="dapeng">\n</p>\n\n#### 2. Face Reconstruction\n<p align="center">\n  <img src="samples/5.png" alt="demo" width="750px">\n</p>\n\n#### 3. 3D Pose Estimation\n<p align="center">\n  <img src="samples/pose.png" alt="tongliya" width="750px">\n</p>\n\n#### 4. Depth Image Estimation\n<p align="center">\n  <img src="samples/demo_depth.jpg" alt="demo_depth" width="750px">\n</p>\n\n#### 5. PNCC & PAF Features\n<p align="center">\n  <img src="samples/demo_pncc_paf.jpg" alt="demo_pncc_paf" width="800px">\n</p>\n\n## Getting started\n### Requirements\n - PyTorch >= 0.4.1 (**PyTorch v1.1.0** is tested successfully on macOS and Linux.)\n - Python >= 3.6 (Numpy, Scipy, Matplotlib)\n - Dlib (Dlib is optionally for face and landmarks detection. There is no need to use Dlib if you can provide face bouding bbox and landmarks. Besides, you can try the two-step inference strategy without initialized landmarks.)\n - OpenCV (Python version, for image IO opertations.)\n - Cython (For accelerating depth and PNCC render.)\n - Platform: Linux or macOS (Windows is not tested.)\n\n ```\n # installation structions\n sudo pip3 install torch torchvision # for cpu version. more option to see https://pytorch.org\n sudo pip3 install numpy scipy matplotlib\n sudo pip3 install dlib==19.5.0 # 19.15+ version may cause conflict with pytorch in Linux, this may take several minutes\n sudo pip3 install opencv-python\n sudo pip3 install cython\n ```\n\nIn addition, I strongly recommend using Python3.6+ instead of older version for its better design.\n\n### Usage\n\n1. Clone this repo (this may take some time as it is a little big)\n    ```\n    git clone https://github.com/cleardusk/3DDFA.git  # or git@github.com:cleardusk/3DDFA.git\n    cd 3DDFA\n    ```\n\n   Then, download dlib landmark pre-trained model in [Google Drive](https://drive.google.com/open?id=1kxgOZSds1HuUIlvo5sRH3PJv377qZAkE) or [Baidu Yun](https://pan.baidu.com/s/1bx-GxGf50-KDk4xz3bCYcw), and put it into `models` directory. (To reduce this repo\'s size, I remove some large size binary files including this model, so you should download it : ) )\n\n\n2. Build cython module (just one line for building)\n   ```\n   cd utils/cython\n   python3 setup.py build_ext -i\n   ```\n   This is for accelerating depth estimation and PNCC render since Python is too slow in for loop.\n   \n    \n3. Run the `main.py` with arbitrary image as input\n    ```\n    python3 main.py -f samples/test1.jpg\n    ```\n    If you can see these output log in terminal, you run it successfully.\n    ```\n    Dump tp samples/test1_0.ply\n    Save 68 3d landmarks to samples/test1_0.txt\n    Dump obj with sampled texture to samples/test1_0.obj\n    Dump tp samples/test1_1.ply\n    Save 68 3d landmarks to samples/test1_1.txt\n    Dump obj with sampled texture to samples/test1_1.obj\n    Dump to samples/test1_pose.jpg\n    Dump to samples/test1_depth.png\n    Dump to samples/test1_pncc.png\n    Save visualization result to samples/test1_3DDFA.jpg\n    ```\n\n    Because `test1.jpg` has two faces, there are two `.ply` and `.obj` files (can be rendered by Meshlab or Microsoft 3D Builder) predicted. Depth, PNCC, PAF and pose estimation are all set true by default. Please run `python3 main.py -h` or review the code for more details.\n\n    The 68 landmarks visualization result `samples/test1_3DDFA.jpg` and pose estimation result `samples/test1_pose.jpg` are shown below:\n\n<p align="center">\n  <img src="samples/test1_3DDFA.jpg" alt="samples" width="650px">\n</p>\n\n<p align="center">\n  <img src="samples/test1_pose.jpg" alt="samples" width="650px">\n</p>\n\n4. Additional example\n\n    ```\n    python3 ./main.py -f samples/emma_input.jpg --bbox_init=two --dlib_bbox=false\n    ```\n\n<p align="center">\n  <img src="samples/emma_input_3DDFA.jpg" alt="samples" width="750px">\n</p>\n\n<p align="center">\n  <img src="samples/emma_input_pose.jpg" alt="samples" width="750px">\n</p>\n\n## Citation\n    @article{zhu2017face,\n      title={Face Alignment in Full Pose Range: A 3D Total Solution},\n      author={Zhu, Xiangyu and Lei, Zhen and Li, Stan Z and others},\n      journal={IEEE Transactions on Pattern Analysis and Machine Intelligence},\n      year={2017},\n      publisher={IEEE}\n    }\n\n    @misc{3ddfa_cleardusk,\n      author =       {Jianzhu Guo, Xiangyu Zhu and Zhen Lei},\n      title =        {3DDFA},\n      howpublished = {\\url{https://github.com/cleardusk/3DDFA}},\n      year =         {2018}\n    }\n\n    \n## Inference speed\n### CPU\nJust run\n```\npython3 speed_cpu.py\n```\n\nOn my MBP (i5-8259U CPU @ 2.30GHz on 13-inch MacBook Pro), based on **PyTorch v1.1.0**, with a single input, the running output is:\n```\nInference speed: 14.50\xc2\xb10.11 ms\n```\n\n<!-- [speed_cpu.py](./speed_cpu.py) -->\n\n\n### GPU\nWhen input batch size is 128, the total inference time of MobileNet-V1 takes about 34.7ms. The average speed is about **0.27ms/pic**.\n\n<p align="center">\n  <img src="imgs/inference_speed.png" alt="Inference speed" width="600px">\n</p>\n\n## Training details\nThe training scripts lie in `training` directory. The related resources are in below table.\n\n| Data | Download Link | Description |\n|:-:|:-:|:-:|\n| train.configs | [BaiduYun](https://pan.baidu.com/s/1ozZVs26-xE49sF7nystrKQ) or [Google Drive](https://drive.google.com/open?id=1dzwQNZNMppFVShLYoLEfU3EOj3tCeXOD), 217M | The directory contraining 3DMM params and filelists of training dataset |\n| train_aug_120x120.zip | [BaiduYun](https://pan.baidu.com/s/19QNGst2E1pRKL7Dtx_L1MA) or [Google Drive](https://drive.google.com/open?id=17LfvBZFAeXt0ACPnVckfdrLTMHUpIQqE), 2.15G | The cropped images of augmentation training dataset |\n| test.data.zip | [BaiduYun](https://pan.baidu.com/s/1DTVGCG5k0jjjhOc8GcSLOw) or [Google Drive](https://drive.google.com/file/d/1r_ciJ1M0BSRTwndIBt42GlPFRv6CvvEP/view?usp=sharing), 151M | The cropped images of AFLW and ALFW-2000-3D testset |\n\nAfter preparing the training dataset and configuration files, go into `training` directory and run the bash scripts to train. `train_wpdc.sh`, `train_vdc.sh` and `train_pdc.sh` are examples of training scripts. After configuring the training and testing sets, just run them for training. Take `train_wpdc.sh` for example as below:\n\n```\n#!/usr/bin/env bash\n\nLOG_ALIAS=$1\nLOG_DIR="logs"\nmkdir -p ${LOG_DIR}\n\nLOG_FILE="${LOG_DIR}/${LOG_ALIAS}_`date +\'%Y-%m-%d_%H:%M.%S\'`.log"\n#echo $LOG_FILE\n\n./train.py --arch="mobilenet_1" \\\n    --start-epoch=1 \\\n    --loss=wpdc \\\n    --snapshot="snapshot/phase1_wpdc" \\\n    --param-fp-train=\'../train.configs/param_all_norm.pkl\' \\\n    --param-fp-val=\'../train.configs/param_all_norm_val.pkl\' \\\n    --warmup=5 \\\n    --opt-style=resample \\\n    --resample-num=132 \\\n    --batch-size=512 \\\n    --base-lr=0.02 \\\n    --epochs=50 \\\n    --milestones=30,40 \\\n    --print-freq=50 \\\n    --devices-id=0,1 \\\n    --workers=8 \\\n    --filelists-train="../train.configs/train_aug_120x120.list.train" \\\n    --filelists-val="../train.configs/train_aug_120x120.list.val" \\\n    --root="/path/to//train_aug_120x120" \\\n    --log-file="${LOG_FILE}"\n```\n\nThe specific training parameters are all presented in bash scripts, including learning rate, mibi-batch size, epochs and so on.\n\n## Evaluation\nFirst, you should download the cropped testset ALFW and ALFW-2000-3D in [test.data.zip](https://pan.baidu.com/s/1DTVGCG5k0jjjhOc8GcSLOw), then unzip it and put it in the root directory.\nNext, run the benchmark code by providing trained model path.\nI have already provided five pre-trained models in `models` directory (seen in below table). These models are trained using different loss in the first stage. The model size is about 13M due to the high efficiency of MobileNet-V1 structure.\n```\npython3 ./benchmark.py -c models/phase1_wpdc_vdc.pth.tar\n```\n\nThe performances of pre-trained models are shown below. In the first stage, the effectiveness of different loss is in order: WPDC > VDC > PDC. While the strategy using VDC to finetune WPDC achieves the best result.\n\n| Model | AFLW (21 pts) | AFLW 2000-3D (68 pts) | Download Link |\n|:-:|:-:|:-:| :-: |\n| *phase1_pdc.pth.tar*  | 6.956\xc2\xb10.981 | 5.644\xc2\xb11.323 | [Baidu Yun](https://pan.baidu.com/s/1xeyZa4rxVazd_QGWx6QXFw) or [Google Drive](https://drive.google.com/open?id=18UQfDkGNzotKoFV0Lh_O-HnXsp1ABdjl) |\n| *phase1_vdc.pth.tar*  | 6.717\xc2\xb10.924 | 5.030\xc2\xb11.044 | [Baidu Yun](https://pan.baidu.com/s/10-0YpYKj1_efJYqC1q-aNQ) or [Google Drive](https://drive.google.com/open?id=1iHADYNIQR2Jqvt4nwmnh5n3Axe-HXMRR) |\n| *phase1_wpdc.pth.tar* | 6.348\xc2\xb10.929 | 4.759\xc2\xb10.996 | [Baidu Yun](https://pan.baidu.com/s/1yqaJ3S3MNpYBgyA5BYtHuw) or [Google Drive](https://drive.google.com/open?id=1ebwkOWjaQ7U4mpA89ldfmjeQdfDDdFS-) |\n| *phase1_wpdc_vdc.pth.tar* | **5.401\xc2\xb10.754** | **4.252\xc2\xb10.976** | In this repo. |\n\n## FQA\n1. Face bounding box initialization\n\n    The original paper shows that using detected bounding box instead of ground truth box will cause a little performance drop. Thus the current face cropping method is robustest. Quantitative results are shown in below table.\n\n<p align="center">\n  <img src="imgs/bouding_box_init.png" alt="bounding box" width="500px">\n</p>\n\n2. Face reconstruction\n   \n   The texture of non-visible area is distorted due to self-occlusion, therefore the non-visible face region may appear strange (a little horrible).\n\n## Acknowledgement\n - Thanks for [Yao Feng](https://github.com/YadiraF)\'s fantastic works [PRNet](https://github.com/YadiraF/PRNet) and [face3d](https://github.com/YadiraF/face3d).\n - Thanks for this [tweet](https://twitter.com/PyTorch/status/1066064914249367552) of PyTorch.\n - This project is partially supervised by [Xiangyu Zhu](http://www.cbsr.ia.ac.cn/users/xiangyuzhu/) and [Zhen Lei](http://www.cbsr.ia.ac.cn/users/zlei/).\n\n\nThanks for your interest in this repo. If your work or research benefit from this repo, please cite it, star it and popularize it \xf0\x9f\x98\x83\n\nWelcome to focus on my 3D face related works: [MeGlass](https://github.com/cleardusk/MeGlass) and [Face Anti-Spoofing](https://arxiv.org/abs/1901.00488).\n\n## Contact\n**Jianzhu Guo (\xe9\x83\xad\xe5\xbb\xba\xe7\x8f\xa0)** [[Homepage](https://guojianzhu.com), [Google Scholar](https://scholar.google.com/citations?user=W8_JzNcAAAAJ&hl=en&oi=ao)]:  **jianzhu.guo@nlpr.ia.ac.cn**. \n'