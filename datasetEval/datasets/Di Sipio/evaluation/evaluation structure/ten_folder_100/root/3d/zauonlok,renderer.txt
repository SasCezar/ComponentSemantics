b'# Software Renderer\n\n<img src="assets/helmet/screenshot2.png" width="410"> <img src="assets/helmet/screenshot3.png" width="410">\n<img src="assets/drone/screenshot1.gif" width="410"> <img src="assets/drone/screenshot2.gif" width="410">\n\nThis is a shader-based software renderer written from scratch in C89 with\nminimal dependencies, available for Windows, macOS, and Linux.\n\n## Features\n\n* Cross platform\n* Minimal dependencies\n* Shader based\n* Homogeneous clipping\n* Back-face culling\n* Perspective correct interpolation\n* Depth testing\n* Alpha testing\n* Alpha blending\n* Cubemapped skybox\n* Skeletal animation\n* Tangent space normal mapping\n* Shadow mapping\n* ACES tone mapping\n* Blinn\xe2\x80\x93Phong reflection model\n* Physically based rendering (PBR)\n* Metallic-roughness workflow\n* Specular-glossiness workflow\n* Image-based lighting (IBL)\n* Orbital camera controls\n* PBR material inspector\n\n## Download\n\nPre-built binaries for Windows, macOS, and Linux are available for download\nfrom the [Releases page](https://github.com/zauonlok/renderer/releases).\n\n## Build\n\nTo build the software renderer from source, a C89 compiler and development\nfiles for your window system are required.\n\n### Windows\n\nInstall [Visual Studio](https://visualstudio.microsoft.com/downloads/) and\nrun `build_win32.bat`.\n\n### macOS\n\nInstall Command Line Tools for Xcode with the command below and\nrun `build_macos.sh`.\n\n```\nxcode-select --install\n```\n\n### Linux\n\nInstall GCC and Xlib with the following commands and run `build_linux.sh`.\n\n#### Ubuntu / Debian\n\n```\nsudo apt install gcc libx11-dev\n```\n\n#### Fedora / RHEL\n\n```\nsudo dnf install gcc libX11-devel\n```\n\n#### openSUSE / SUSE\n\n```\nsudo zypper install gcc libX11-devel\n```\n\n### Bonus\n\nA `CMakeLists.txt` file is provided for generating project files using\n[CMake](https://cmake.org/) (see examples below).\n\n#### Visual Studio\n\n```\nmkdir build\ncd build\ncmake -G "Visual Studio 16 2019" ..\n```\n\n#### Xcode\n\n```\nmkdir build\ncd build\ncmake -G Xcode ..\n```\n\n#### Makefile\n\n```\nmkdir build\ncd build\ncmake -G "Unix Makefiles" -D CMAKE_BUILD_TYPE=Release ..\nmake\n```\n\n## Usage\n\n### Launch\n\nIf the software renderer is launched without arguments, one of the available\nscenes will be chosen randomly. To display a specific scene (see below),\nadditional arguments should be supplied. The command line syntax is:\n\n```\nViewer [test_name [scene_name]]\n```\n\n### Controls\n\n* Orbit: left mouse button\n* Pan: right mouse button\n* Zoom: mouse wheel\n* Rotate lighting: <kbd>A</kbd> <kbd>D</kbd> <kbd>S</kbd> <kbd>W</kbd>\n* Reset everything: <kbd>Space</kbd>\n\n### Inspector\n\nFor PBR scenes, a material inspector that is very similar to the layers view\nof [Marmoset Viewer](https://marmoset.co/viewer/) is provided. Double click\nto bring it up.\n\n## Screenshots\n\n| Scene                                                                                   | Command                   |\n| --------------------------------------------------------------------------------------- | ------------------------- |\n| [<img src="assets/azura/screenshot.png" width="600">](assets/azura/README.md)           | `Viewer blinn azura`      |\n| [<img src="assets/centaur/screenshot.png" width="600">](assets/centaur/README.md)       | `Viewer blinn centaur`    |\n| [<img src="assets/craftsman/screenshot2.gif" width="600">](assets/craftsman/README.md)  | `Viewer blinn craftsman`  |\n| [<img src="assets/elfgirl/screenshot2.png" width="600">](assets/elfgirl/README.md)      | `Viewer blinn elfgirl`    |\n| [<img src="assets/kgirl/screenshot.gif" width="600">](assets/kgirl/README.md)           | `Viewer blinn kgirl`      |\n| [<img src="assets/lighthouse/screenshot.png" width="600">](assets/lighthouse/README.md) | `Viewer blinn lighthouse` |\n| [<img src="assets/mccree/screenshot.png" width="600">](assets/mccree/README.md)         | `Viewer blinn mccree`     |\n| [<img src="assets/nier2b/screenshot.png" width="600">](assets/nier2b/README.md)         | `Viewer blinn nier2b`     |\n| [<img src="assets/phoenix/screenshot.gif" width="600">](assets/phoenix/README.md)       | `Viewer blinn phoenix`    |\n| [<img src="assets/violet/screenshot.png" width="600">](assets/violet/README.md)         | `Viewer blinn violet`     |\n| [<img src="assets/whip/screenshot.gif" width="600">](assets/whip/README.md)             | `Viewer blinn whip`       |\n| [<img src="assets/witch/screenshot.png" width="600">](assets/witch/README.md)           | `Viewer blinn witch`      |\n| [<img src="assets/assassin/screenshot.gif" width="600">](assets/assassin/README.md)     | `Viewer pbr assassin`     |\n| [<img src="assets/buster/screenshot1.gif" width="600">](assets/buster/README.md)        | `Viewer pbr buster`       |\n| [<img src="assets/crab/screenshot.gif" width="600">](assets/crab/README.md)             | `Viewer pbr crab`         |\n| [<img src="assets/dieselpunk/screenshot.png" width="600">](assets/dieselpunk/README.md) | `Viewer pbr dieselpunk`   |\n| [<img src="assets/drone/screenshot1.gif" width="600">](assets/drone/README.md)          | `Viewer pbr drone`        |\n| [<img src="assets/helmet/screenshot1.png" width="600">](assets/helmet/README.md)        | `Viewer pbr helmet`       |\n| [<img src="assets/junkrat/screenshot.gif" width="600">](assets/junkrat/README.md)       | `Viewer pbr junkrat`      |\n| [<img src="assets/orb/screenshot.png" width="600">](assets/orb/README.md)               | `Viewer pbr orb`          |\n| [<img src="assets/ornitier/screenshot.png" width="600">](assets/ornitier/README.md)     | `Viewer pbr ornitier`     |\n| [<img src="assets/ponycar/screenshot2.png" width="600">](assets/ponycar/README.md)      | `Viewer pbr ponycar`      |\n| [<img src="assets/spruit/screenshot1.png" width="600">](assets/spruit/README.md)        | `Viewer pbr sphere`       |\n| [<img src="assets/workshop/screenshot2.png" width="600">](assets/workshop/README.md)    | `Viewer pbr spheres`      |\n\n## References\n\n### Rendering pipeline\n\n* [Tiny Renderer](https://github.com/ssloy/tinyrenderer)\n* [OpenGL ES 2.0 Specification](https://www.khronos.org/registry/OpenGL/specs/es/2.0/es_full_spec_2.0.pdf)\n\n### Physically based rendering\n\n* [glTF 2.0 Sample Viewer](https://github.com/KhronosGroup/glTF-Sample-Viewer)\n* [SIGGRAPH 2013 Shading Course](https://blog.selfshadow.com/publications/s2013-shading-course/)\n* [Physically Based Rendering in Filament](https://google.github.io/filament/Filament.html)\n\n### File formats\n\n* [Truevision TGA](http://www.dca.fee.unicamp.br/~martino/disciplinas/ea978/tgaffs.pdf)\n* [Radiance HDR](https://www.graphics.cornell.edu/~bjw/rgbe.html)\n* [Wavefront OBJ](http://www.cs.utah.edu/~boulos/cs3505/obj_spec.pdf)\n* [Khronos glTF](https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md)\n\n### Miscellaneous\n\n* [Homogeneous clipping](http://fabiensanglard.net/polygon_codec/)\n* [Barycentric coordinates](http://blackpawn.com/texts/pointinpoly/)\n* [Perspective correct interpolation](https://www.comp.nus.edu.sg/~lowkl/publications/lowk_persp_interp_techrep.pdf)\n* [Skeletal animation](https://people.rennes.inria.fr/Ludovic.Hoyet/teaching/IMO/05_IMO2016_Skinning.pdf)\n* [Tangent space normal mapping](http://www.terathon.com/code/tangent.html)\n* [Ambient occlusion](http://mentalraytips.blogspot.com/2008/11/joy-of-little-ambience.html)\n* [ACES tone mapping](https://knarkowicz.wordpress.com/2016/01/06/aces-filmic-tone-mapping-curve/)\n* [Orbital camera controls](https://github.com/mrdoob/three.js/blob/master/examples/js/controls/OrbitControls.js)\n* [Xlib programming guide](https://web.archive.org/web/20071018025425/http://users.actcom.co.il/~choo/lupg/tutorials/xlib-programming/xlib-programming.html)\n* [Type-safe dynamic array](https://github.com/nothings/stb/blob/master/stretchy_buffer.h)\n\n## License\n\n[MIT License](LICENSE)\n'