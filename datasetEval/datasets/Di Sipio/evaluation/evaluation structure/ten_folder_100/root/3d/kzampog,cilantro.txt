b'<div>\n    <img src = "https://kzampog.github.io/images/cilantro_logo.png" width="256" alt = "Logo" />\n    <br>\n    <a href = "https://travis-ci.org/kzampog/cilantro">\n        <img src = "https://travis-ci.org/kzampog/cilantro.svg?branch=master" alt = "Build Status" />\n    </a>\n    <a href = "http://cilantro.readthedocs.io/en/latest/?badge=latest">\n        <img src = "https://readthedocs.org/projects/cilantro/badge/?version=latest" alt = "Documentation Status" />\n    </a>\n    <a href = "https://codedocs.xyz/kzampog/cilantro/">\n        <img src = "https://codedocs.xyz/kzampog/cilantro.svg" alt = "Documentation" />\n    </a>\n</div>\n\n## A Lean and Efficient Library for Point Cloud Data Processing\n`cilantro` is a lean and fast C++ library for working with point cloud data, with emphasis given to the 3D case.\nIt includes efficient implementations for a variety of common operations, providing a clean API and attempting to minimize the amount of boilerplate code.\nThe library is extensively templated, enabling operations on data of arbitrary numerical type and dimensionality (where applicable) and featuring a modular/extensible design of the more complex procedures.\nAt the same time, convenience aliases/wrappers for the most common cases are provided.\nA high-level description of `cilantro` can be found in our [technical report](https://arxiv.org/abs/1807.00399).\n\n## Supported functionality\n#### Basic operations:\n- General dimension kd-trees (using bundled [nanoflann](https://github.com/jlblancoc/nanoflann))\n- Surface normal and curvature estimation from raw point clouds\n- General dimension grid-based point cloud resampling\n- Principal Component Analysis\n- Basic I/O utilities for 3D point clouds (in PLY format, using bundled [tinyply](https://github.com/ddiakopoulos/tinyply)) and Eigen matrices\n- RGBD image pair to/from point cloud conversion utilities\n\n#### Convex hulls and spatial reasoning:\n- A general dimension convex polytope representation that is computed (using bundled [Qhull](http://www.qhull.org/)) from either vertex or half-space intersection input and allows for easy switching between the respective representations\n- A representation of generic (general dimension) space regions as unions of convex polytopes that implements set operations\n<div align = "center">\n    <img src = "https://kzampog.github.io/images/convex.png" width="800" />\n</div>\n\n#### Clustering:\n- General dimension k-means clustering that supports all distance metrics supported by [nanoflann](https://github.com/jlblancoc/nanoflann)\n- Spectral clustering based on various graph Laplacian types (using bundled [Spectra](https://github.com/yixuan/spectra))\n- Mean-shift clustering with custom kernel support\n- Connected component based point cloud segmentation that supports arbitrary point-wise similarity functions\n<div align = "center">\n    <img src = "https://kzampog.github.io/images/conn_comp.png" width="800" />\n</div>\n\n#### Geometric registration:\n- Multiple generic Iterative Closest Point implementations that support arbitrary correspondence search methods in arbitrary point feature spaces for:\n    - **Rigid** or **affine** alignment under the point-to-point metric (general dimension), point-to-plane metric (2D or 3D), or any combination thereof\n    - **Non-rigid** alignment of 2D or 3D point sets, by means of a robustly regularized, **locally-rigid** or **locally-affine** deformation field, under any combination of the point-to-point and point-to-plane metrics; implementations for both *densely* and *sparsely* (by means of an Embedded Deformation Graph) supported warp fields are provided\n<div align = "center">\n    <img src = "https://kzampog.github.io/images/fusion.png" width="800" />\n    <br>\n    <img src = "https://kzampog.github.io/images/non_rigid.png" width="800" />\n</div>\n\n#### Robust model estimation:\n- A RANSAC estimator template and instantiations thereof for general dimension:\n    - Robust hyperplane estimation\n    - Rigid point cloud registration given noisy correspondences\n\n#### Visualization:\n- Classical Multidimensional Scaling (using bundled [Spectra](https://github.com/yixuan/spectra) for eigendecompositions)\n- A powerful, extensible, and easy to use 3D visualizer\n\n## Dependencies\n- [Eigen](http://eigen.tuxfamily.org/index.php?title=Main_Page) (3.3 or newer) [**required**]\n- [Pangolin](https://github.com/stevenlovegrove/Pangolin) (built with Eigen enabled) [**optional**; needed for visualization modules and most examples]\n\n## Building\n`cilantro` is developed and tested on Ubuntu 14.04, 16.04, and 18.04 variants using [CMake](https://cmake.org/).\nPlease note that you may have to manually set up a recent version of Eigen on Ubuntu 14.04, as the one provided in the official repos is outdated.\nTo clone and build the library (with bundled examples), execute the following in a terminal:\n\n```\ngit clone https://github.com/kzampog/cilantro.git\ncd cilantro\nmkdir build\ncd build\ncmake ..\nmake -j\n```\n\n## Documentation\nDocumentation ([readthedocs.io](http://cilantro.readthedocs.io/en/latest/?badge=latest), [Doxygen API documentation](https://codedocs.xyz/kzampog/cilantro/)) is a work in progress.\nThe short provided examples (built by default) cover a significant part of the library\'s functionality.\nMost of them expect a single command-line argument (path to a point cloud file in PLY format).\nOne such input is bundled in `examples/test_clouds` for quick testing.\n\n## License\nThe library is released under the [MIT license](https://github.com/kzampog/cilantro/blob/master/LICENSE).\nIf you use `cilantro` in your research, please cite our [technical report](https://arxiv.org/abs/1807.00399):\n```\n@inproceedings{zampogiannis2018cilantro,\n    author = {Zampogiannis, Konstantinos and Fermuller, Cornelia and Aloimonos, Yiannis},\n    title = {cilantro: A Lean, Versatile, and Efficient Library for Point Cloud Data Processing},\n    booktitle = {Proceedings of the 26th ACM International Conference on Multimedia},\n    series = {MM \'18},\n    year = {2018},\n    isbn = {978-1-4503-5665-7},\n    location = {Seoul, Republic of Korea},\n    pages = {1364--1367},\n    doi = {10.1145/3240508.3243655},\n    publisher = {ACM},\n    address = {New York, NY, USA}\n}\n```\n'