b'# cgltf\n**Single-file/stb-style C glTF loader and writer**\n\n[![Build Status](https://travis-ci.org/jkuhlmann/cgltf.svg?branch=master)](https://travis-ci.org/jkuhlmann/cgltf)\n\n## Usage: Loading\nLoading from file:\n```c\n#include "cgltf.h"\n\ncgltf_options options = {0};\ncgltf_data* data = NULL;\ncgltf_result result = cgltf_parse_file(&options, "scene.gltf", &data);\nif (result == cgltf_result_success)\n{\n\t/* TODO make awesome stuff */\n\tcgltf_free(data);\n}\n```\n\nLoading from memory:\n```c\n#include "cgltf.h"\n\nvoid* buf; /* Pointer to glb or gltf file data */\nsize_t size; /* Size of the file data */\n\ncgltf_options options = {0};\ncgltf_data* data = NULL;\ncgltf_result result = cgltf_parse(&options, buf, size, &data);\nif (result == cgltf_result_success)\n{\n\t/* TODO make awesome stuff */\n\tcgltf_free(data);\n}\n```\n\nNote that cgltf does not load the contents of extra files such as buffers or images into memory by default. You\'ll need to read these files yourself using URIs from `data.buffers[]` or `data.images[]` respectively.\nFor buffer data, you can alternatively call `cgltf_load_buffers`, which will use `FILE*` APIs to open and read buffer files.\n\n**For more in-depth documentation and a description of the public interface refer to the top of the `cgltf.h` file.**\n\n## Usage: Writing\nWhen writing glTF data, you need a valid `cgltf_data` structure that represents a valid glTF document. You can construct such a structure yourself or load it using the loader functions described above. The writer functions do not deallocate any memory. So, you either have to do it manually or call `cgltf_free()` if you got the data by loading it from a glTF document.\n\nWriting to file:\n```c\n#include "cgltf_write.h"\n\ncgltf_options options = {0};\ncgltf_data* data = /* TODO must be valid data */;\ncgltf_result result = cgltf_write_file(&options, "out.gltf", data);\nif (result != cgltf_result_success)\n{\n\t/* TODO handle error */\n}\n```\n\nWriting to memory:\n```c\n#include "cgltf_write.h"\ncgltf_options options = {0};\ncgltf_data* data = /* TODO must be valid data */;\n\ncgltf_size size = cgltf_write(&options, NULL, 0, data);\n\nchar* buf = malloc(size);\n\ncgltf_size written = cgltf_write(&options, buf, size, data);\nif (written != size)\n{\n\t/* TODO handle error */\n}\n```\n\nNote that cgltf does not write the contents of extra files such as buffers or images. You\'ll need to write this data yourself.\n\nWriting does not yet support "extras" data.\n\n**For more in-depth documentation and a description of the public interface refer to the top of the `cgltf_write.h` file.**\n\n\n## Features\ncgltf supports core glTF 2.0:\n- glb (binary files) and gltf (JSON files)\n- meshes (including accessors, buffer views, buffers)\n- materials (including textures, samplers, images)\n- scenes and nodes\n- skins\n- animations\n- cameras\n- morph targets\n- extras data\n\ncgltf also supports some glTF extensions:\n- KHR_lights_punctual\n- KHR_materials_pbrSpecularGlossiness\n- KHR_materials_unlit\n- KHR_texture_transform\n\ncgltf does **not** yet support unlisted extensions.\n\n## Building\nThe easiest approach is to integrate the `cgltf.h` header file into your project. If you are unfamiliar with single-file C libraries (also known as stb-style libraries), this is how it goes:\n\n1. Include `cgltf.h` where you need the functionality.\n1. Have exactly one source file that defines `CGLTF_IMPLEMENTATION` before including `cgltf.h`.\n1. Use the cgltf functions as described above.\n\nSupport for writing can be found in a separate file called `cgltf_write.h` (which includes `cgltf.h`). Building it works analogously using the `CGLTF_WRITE_IMPLEMENTATION` define.\n\n## Contributing\nEveryone is welcome to contribute to the library. If you find any problems, you can submit them using [GitHub\'s issue system](https://github.com/jkuhlmann/cgltf/issues). If you want to contribute code, you should fork the project and then send a pull request.\n\n\n## Dependencies\nNone.\n\nC headers being used by implementation:\n```\n#include <stddef.h>\n#include <stdint.h>\n#include <string.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <limits.h>\n```\n\nNote, this library has a copy of the [JSMN JSON parser](https://github.com/zserge/jsmn) embedded in its source.\n\n## Testing\nThere is a Python script in the `test/` folder that retrieves the glTF 2.0 sample files from the glTF-Sample-Models repository (https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0) and runs the library against all gltf and glb files.\n\nHere\'s one way to build and run the test:\n\n    cd test ; mkdir build ; cd build ; cmake .. -DCMAKE_BUILD_TYPE=Debug\n    make -j\n    cd ..\n    ./test_all.py\n\nThere is also a llvm-fuzz test in `fuzz/`. See http://llvm.org/docs/LibFuzzer.html for more information.\n'