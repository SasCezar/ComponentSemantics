b'# harp.gl\n\n[![Travis CI](https://travis-ci.com/heremaps/harp.gl.svg?branch=master)](https://travis-ci.com/heremaps/harp.gl) [![Github Actions](https://img.shields.io/endpoint.svg?url=https%3A%2F%2Factions-badge.atrox.dev%2Fheremaps%2Fharp.gl%2Fbadge%3Fref%3Dmaster&style=flat)](https://actions-badge.atrox.dev/heremaps/harp.gl/goto?ref=master) [![codecov](https://codecov.io/gh/heremaps/harp.gl/branch/master/graph/badge.svg)](https://codecov.io/gh/heremaps/harp.gl)\n\n`harp.gl` is an _experimental and work in progress_ open-source 3D map rendering engine written in [TypeScript](https://github.com/microsoft/TypeScript).\n\n### [harp.gl site](https://heremaps.github.io/harp.gl/)\n\n## Overview\n\nYou can use this engine to:\n\n-   Develop visually appealing 3D maps\n-   Create highly animated and dynamic map visualization with WebGL, using the popular [three.js](https://threejs.org/) library.\n-   Create themeable maps, with themes that can change on the fly.\n-   Create a smooth map experience with highly performant map rendering and decoding. Web workers parallelize the CPU intensive tasks, for optimal responsiveness.\n-   Design your maps modularly, where you can swap out modules and data providers as required.\n\nWith that in mind, we have included some modules that let\'s you get started with some simple web applications\nthat can display a map using our default style. You can get results like the one shown below:\n\n![New York City rendered with our default style](docs/nyc.jpg)\n\n## Getting started with harp.gl\n\nYou can consume the harp.gl api with two different methods:\n\n* linking a simple bundle as a `<script>` tag in your html\n* installing a set of node modules from npm\n\nIf you want to learn more about the applications you can create, please check the [Getting Started Guide](docs/GettingStartedGuide.md).\n\n### Simple bundle\n\nAdd `three.js` and `harp.gl` to your html and create a canvas with an id `map`:\n```html\n<html>\n   <head>\n      <style>\n         body, html { border: 0; margin: 0; padding: 0; }\n         #map { height: 100vh; width: 100vw; }\n      </style>\n      <script src="https://unpkg.com/three/build/three.min.js"></script>\n      <script src="https://unpkg.com/@here/harp.gl/dist/harp.js"></script>\n   </head>\n   <body>\n      <canvas id="map"></canvas>\n      <script src="index.js"></script>\n   </body>\n</html>\n```\nInitialize the map:\n```javascript\nconst map = new harp.MapView({\n   canvas: document.getElementById("map"),\n   theme: "https://unpkg.com/@here/harp-map-theme@latest/resources/berlin_tilezen_night_reduced.json",\n});\nconst controls = new harp.MapControls(map);\nconst omvDataSource = new harp.OmvDataSource({\n   baseUrl: "https://xyz.api.here.com/tiles/herebase.02",\n   apiFormat: harp.APIFormat.XYZOMV,\n   styleSetName: "tilezen",\n   authenticationCode: "YOUR-XYZ-TOKEN",\n});\nmap.addDataSource(omvDataSource);\n```\n\n### Node modules\n\nGenerate a simple app using the package generator:\n\n```shell\nmkdir 3dmap-example\ncd 3dmap-example\nnpx -p yo -p @here/generator-harp.gl yo @here/harp.gl\n```\n\n## About This Repository\n\nThis repository is a monorepo containing the core components of `harp.gl`,\norganized in a `yarn workspace`.\n\nAll components can be used stand-alone and are in the `@here` subdirectory.\n\n## Installation\n\n### In Node.js\n\nAll `harp.gl` modules are installable via yarn (or npm):\n\n```sh\nyarn add @here/harp-mapview\n```\n\n```sh\nnpm install @here/harp-mapview\n```\n\n### In Browser\n\nSince `harp.gl` consists of a set of modules, there are no ready-made bundles available. Take a look at the examples on information on how to use tools like `webpack` to create a bundle for the browser.\n\n## Development\n\n### Prerequisites\n\n-   **Node.js** - Please see [nodejs.org](https://nodejs.org/) for installation instructions\n-   **Yarn** - Please see [yarnpkg.com](https://yarnpkg.com/en/) for installation instructions.\n\n### Download dependencies\n\nRun:\n\n```sh\nyarn install\n```\n\nto download and install all required packages and set up the yarn workspace.\n\n### Launch development server for harp.gl examples\n\nRun:\n\n```sh\nyarn start\n```\n\nTo launch `webpack-dev-server`. Open `http://localhost:8080/` in your favorite browser.\n\n### Launch development server for unit tests\n\nRun:\n\n```sh\nyarn start-tests\n```\n\nOpen `http://localhost:8080/` in your favorite browser to run the tests.\n\n### Run unit tests in Node.js environment\n\nRun:\n\n```sh\nyarn test\n```\n\n### Run unit & integration tests in Browser environment\n\nRun:\n\n```sh\nyarn run start-tests\n>: Project is running at http://localhost:8080/\n```\n\nNote the URL and invoke tests using `mocha-webdriver-runner`. Example:\n\n```sh\nnpx mocha-webdriver-runner http://localhost:8081/ --chrome\nnpx mocha-webdriver-runner http://localhost:8081/ --headless-firefox\n```\n\n### Run performance tests in Node.js environment\n\nAs for now, there is no baseline for performance tests results, so before examining performance one\nhave to establish baseline:\n\nPerformance test steps\n\n1) Establish baseline results.\n\n```\n$ git checkout master\nPROFILEHELPER_COMMAND=baseline yarn performance-test-node # create baseline of measurements for your particular platform\n```\n\n> Note, that performance test suite is very limited, so it is highly possible that you\n> have to write new dedicated performance test for code that is about to be optimized.\n> See `tests/performance` for examples.\n\n2) Go back to your branch, change stuff and\n\n3) Rerun tests with your changes\n\n```\nyarn performance-test-node --grep lines # assuming you\'re playing with lines\n```\n\n4) Examine output:\n\n```\n...\n\nperformance createLineGeometry segments=2\n  min=0.0014ms (-2.44% vs 0.0014ms) sum=999.16ms (0% vs 999.12ms) repeats=499568.00 (-6.47% vs 534131.00) throughput=499988.43/s (-6.47% vs 534600.13/s)\n  avg=0.002ms (6.92% vs 0.0019ms) med=0.0015ms (0.2% vs 0.0015ms) med95=0.0031ms (17.6% vs 0.0026ms)\n  gcTime=39.6195ms (-3.39% vs 41.011ms) sumNoGc=959.54ms (0.15% vs 958.11ms) throughputNoGc=520633.00/s (-6.61% vs 557461.83/s)\n```\n\n\n### Generate documentation\n\nRun:\n\n```sh\nyarn run typedoc\n```\n\nIt will output all documentation under `/dist/doc`.\n\n## License\n\nCopyright (C) 2017-2019 HERE Europe B.V.\n\nSee the [LICENSE](./LICENSE) file in the root of this project for license details about using `harp.gl`.\n\nIn addition, please note that the [fonts](https://github.com/heremaps/harp-fontcatalog) are under a different set of licenses.\n\nFor other use cases not listed in the license terms, please [contact us](https://developer.here.com/contact-us).\n'