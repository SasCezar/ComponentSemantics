b'=============================\nMaking point clouds fun again\n=============================\n\n.. image:: https://img.shields.io/lgtm/grade/python/g/daavoo/pyntcloud.svg?logo=lgtm&logoWidth=18)\n    :target: https://lgtm.com/projects/g/daavoo/pyntcloud/context:python\n    :alt: LGTM Code quality\n\n.. image:: https://github.com/daavoo/pyntcloud/workflows/pyncloud%20C.I./badge.svg\n    :target: https://github.com/daavoo/pyntcloud/actions\n    :alt: Github Actions C.I.\n    \n.. image:: https://readthedocs.org/projects/pyntcloud/badge/?version=latest\n    :target: https://pyntcloud.readthedocs.io/en/latest/?badge=latest\n    :alt: Documentation Status\n\n.. image:: https://anaconda.org/conda-forge/pyntcloud/badges/version.svg   \n    :target: https://anaconda.org/conda-forge/pyntcloud\n\n.. image:: https://anaconda.org/conda-forge/pyntcloud/badges/platforms.svg\n   :target: https://anaconda.org/conda-forge/pyntcloud\n\n.. image:: https://anaconda.org/conda-forge/pyntcloud/badges/license.svg\n   :target: https://anaconda.org/conda-forge/pyntcloud\n\n.. image:: https://mybinder.org/badge.svg\n    :target: https://mybinder.org/v2/gh/daavoo/pyntcloud/master\n    :alt: Launch Binder\n\n.. image:: https://raw.githubusercontent.com/daavoo/pyntcloud/master/docs/images/pyntcloud_logo.png\n    :alt: pyntcloud logo\n\n**pyntcloud** is a Python **3** library for working with 3D point clouds leveraging the power of the Python scientific stack.\n\n- Examples_ (We encourage you to try out the examples by launching `Binder <https://mybinder.org/v2/gh/daavoo/pyntcloud/master>`_.)\n- Documentation_\n\n.. _Examples: https://github.com/daavoo/pyntcloud/tree/master/examples\n.. _Documentation: http://pyntcloud.readthedocs.io/en/latest/\n\nInstallation\n============\n\n.. code-block:: bash\n\n    conda install pyntcloud -c conda-forge\n\nOr:\n\n.. code-block:: bash\n\n    pip install pyntcloud\n\nQuick Overview\n==============\n\nYou can access most of pyntcloud\'s functionality from its core class: PyntCloud.\n\nWith PyntCloud you can perform complex 3D processing operations with minimum lines of\ncode. For example you can:\n\n- Load a PLY point cloud from disk.\n- Add 3 new scalar fields by converting RGB to HSV.\n- Build a grid of voxels from the point cloud.\n- Build a new point cloud keeping only the nearest point to each occupied voxel center.\n- Save the new point cloud in numpy\'s NPZ format.\n\nWith the following concise code:\n\n.. code-block:: python\n\n    from pyntcloud import PyntCloud\n\n    cloud = PyntCloud.from_file("some_file.ply")\n\n    cloud.add_scalar_field("hsv")\n\n    voxelgrid_id = cloud.add_structure("voxelgrid", n_x=32, n_y=32, n_z=32)\n\n    new_cloud = cloud.get_sample("voxelgrid_nearest", voxelgrid_id=voxelgrid_id, as_PyntCloud=True)\n\n    new_cloud.to_file("out_file.npz")\n\nIntegration with other libraries\n================================\n\npyntcloud offers seamless integration with other 3D processing libraries.\n\nYou can create / convert PyntCloud instances from / to many 3D processing libraries using the `from_instance` / `to_instance` methods:\n\n- `Open3D <https://www.open3d.org>`_\n\n.. code-block:: python\n\n    import open3d as o3d\n    from pyntcloud import PyntCloud\n\n    # FROM Open3D\n    original_triangle_mesh = o3d.io.read_triangle_mesh("diamond.ply")\n    cloud = PyntCloud.from_instance("open3d", original_triangle_mesh)\n    \n    # TO Open3D\n    cloud = PyntCloud.from_file("diamond.ply")\n    converted_triangle_mesh = cloud.to_instance("open3d", mesh=True)  # mesh=True by default\n    \n- `PyVista <https://docs.pyvista.org>`_\n\n.. code-block:: python\n\n    import pyvista as pv\n    from pyntcloud import PyntCloud\n\n    # FROM PyVista\n    original_point_cloud = pv.read("diamond.ply")\n    cloud = PyntCloud.from_instance("pyvista", original_point_cloud)\n    \n    # TO PyVista\n    cloud = PyntCloud.from_file("diamond.ply")\n    converted_triangle_mesh = cloud.to_instance("pyvista", mesh=True)\n'