b'<h1 align="center">Meriyah</h1>\n\n<p align="center"> 100% compliant, self-hosted javascript parser with high focus on both performance and stability. Stable and already used in production.</p>\n\n<p align="center">\n    <a href="https://www.npmjs.com/package/meriyah"><img src="https://img.shields.io/npm/v/meriyah.svg?style=flat-square" alt="Meriyah NPM"/></a>\n    <a href="https://lgtm.com/projects/g/meriyah/meriyah/context:javascript"><img src="https://img.shields.io/lgtm/grade/javascript/g/meriyah/meriyah.svg?logo=lgtm&logoWidth=18" alt="GitHub license" /></a>\n    <a href="https://lgtm.com/projects/g/meriyah/meriyah/alerts"><img src="https://img.shields.io/lgtm/alerts/g/meriyah/meriyah.svg?logo=lgtm&logoWidth=18" alt="Total alerts" /></a>\n    <a href="https://circleci.com/gh/meriyah/meriyah"><img src="https://circleci.com/gh/meriyah/meriyah.svg?style=svg" alt="Circle" /></a>\n    <a href="https://github.com/meriyah/meriyah/blob/master/LICENSE.md"><img src="https://img.shields.io/github/license/meriyah/meriyah.svg" alt="License" /></a>\n\n</p>\n\n<br>\n\n## [Demo](https://meriyah.github.io/meriyah)\n\n## Features\n\n* Conforms to the standard ECMAScript\xc2\xae 2020 (ECMA-262 10th Edition) language specification\n* Support TC39 proposals via option\n* Support for additional ECMAScript features for Web Browsers\n* JSX support via option\n* Optionally track syntactic node locations\n* Emits an ESTree-compatible abstract syntax tree.\n* No backtracking\n* Low memory usage\n* Very well tested (~99 000 unit tests with full code coverage)\n* Lightweight - ~90 KB minified\n\n## ESNext features\n\n* [Decorators](https://github.com/tc39/proposal-decorators)\n* [Class Public Instance Fields & Private Instance Fields](https://github.com/tc39/proposal-class-fields)\n* [Hashbang grammar](https://github.com/tc39/proposal-hashbang)\n* [import.meta](https://github.com/tc39/proposal-import-meta)\n* [Nullish coalescing Operator](https://github.com/tc39/proposal-nullish-coalescing)\n* [Numeric separators](https://github.com/tc39/proposal-numeric-separator)\n* [Optional Chaining](https://github.com/tc39/proposal-optional-chaining)\n* [Private methods](https://github.com/tc39/proposal-private-methods)\n* [Static class fields and private static methods](https://github.com/tc39/proposal-static-class-features/)\n\n**Note:** These features need to be enabled with the `next` option.\n\n## Installation\n\n```sh\nnpm install meriyah --save-dev\n```\n\n## API\n\nMeriyah generates `AST` according to [ESTree AST format](https://github.com/estree/estree), and can be used to perform [syntactic analysis](https://en.wikipedia.org/wiki/Parsing) (parsing) of a JavaScript program, and with `ES2015` and later a JavaScript program can be either [a script or a module](https://tc39.github.io/ecma262/index.html#sec-ecmascript-language-scripts-and-modules).\n\nThe `parse` method exposed by meriyah takes an optional `options` object which allows you to specify whether to parse in [`script`](https://tc39.github.io/ecma262/#sec-parse-script) mode (the default) or in [`module`](https://tc39.github.io/ecma262/#sec-parsemodule) mode.\n\nThis is the available options:\n\n```js\n{\n  // The flag to allow module code\n  module: false;\n\n  // The flag to enable stage 3 support (ESNext)\n  next: false;\n\n  // The flag to enable start and end offsets to each node\n  ranges: false;\n\n  // Enable web compability\n  webcompat: false;\n\n  // The flag to enable line/column location information to each node\n  loc: false;\n\n  // The flag to attach raw property to each literal and identifier node\n  raw: false;\n\n  // Enabled directives\n  directives: false;\n\n  // The flag to allow return in the global scope\n  globalReturn: false;\n\n  // The flag to enable implied strict mode\n  impliedStrict: false;\n\n  // Allows comment extraction. Accepts either a function or array\n  onComment: []\n\n  // Allows token extraction. Accepts either a function or array\n  onToken: []\n\n  // Enable non-standard parenthesized expression node\n  preserveParens: false;\n\n  // Enable lexical binding and scope tracking\n  lexical: false;\n\n  // Adds a source attribute in every node\xe2\x80\x99s loc object when the locations option is `true`\n  source: false;\n\n  // Distinguish Identifier from IdentifierPattern\n  identifierPattern: false;\n\n   // Enable React JSX parsing\n  jsx: false\n\n  // Allow edge cases that deviate from the spec\n  specDeviation: false\n}\n```\n\nExample usage:\n\n```js\n\nimport { parseScript } from \'./meriyah\';\n\nparseScript(\'({x: [y] = 0} = 1)\');\n\n```\n\nThis will return when serialized in json:\n\n```js\n{\n    type: "Program",\n    sourceType: "script",\n    body: [\n        {\n            type: "ExpressionStatement",\n            expression: {\n                type: "AssignmentExpression",\n                left: {\n                    type: "ObjectPattern",\n                    properties: [\n                        {\n                            type: "Property",\n                            key: {\n                                type: "Identifier",\n                                name: "x"\n                            },\n                            value: {\n                                type: "AssignmentPattern",\n                                left: {\n                                    type: "ArrayPattern",\n                                    elements: [\n                                        {\n                                            "type": "Identifier",\n                                            "name": "y"\n                                        }\n                                    ]\n                                },\n                                right: {\n                                    type: "Literal",\n                                    value: 0\n                                }\n                            },\n                            kind: "init",\n                            computed: false,\n                            method: false,\n                            shorthand: false\n                        }\n                    ]\n                },\n                operator: "=",\n                right: {\n                    type: "Literal",\n                    value: 1\n                }\n            }\n        }\n    ]\n}\n```\n'