b'semver\n======\n\nSemantic version parsing and comparison.\n\n[![Build Status](https://api.travis-ci.org/steveklabnik/semver.svg?branch=master)](https://travis-ci.org/steveklabnik/semver)\n\n[Documentation](https://steveklabnik.github.io/semver)\n\nSemantic versioning (see https://semver.org/) is a set of rules for\nassigning version numbers.\n\n## SemVer and the Rust ecosystem\n\nRust itself follows the SemVer specification, as does its standard libraries. The two are\nnot tied together.\n\n[Cargo](https://crates.io), Rust\'s package manager, uses SemVer to determine which versions of\npackages you need installed.\n\n## Installation\n\nTo use `semver`, add this to your `[dependencies]` section:\n\n```toml\nsemver = "0.9.0"\n```\n\nAnd this to your crate root:\n\n```rust\nextern crate semver;\n```\n\n## Versions\n\nAt its simplest, the `semver` crate allows you to construct `Version` objects using the `parse`\nmethod:\n\n```rust\nuse semver::Version;\n\nassert!(Version::parse("1.2.3") == Ok(Version {\n   major: 1,\n   minor: 2,\n   patch: 3,\n   pre: vec!(),\n   build: vec!(),\n}));\n```\n\nIf you have multiple `Version`s, you can use the usual comparison operators to compare them:\n\n```rust\nuse semver::Version;\n\nassert!(Version::parse("1.2.3-alpha")  != Version::parse("1.2.3-beta"));\nassert!(Version::parse("1.2.3-alpha2") >  Version::parse("1.2.0"));\n```\n\n## Requirements\n\nThe `semver` crate also provides the ability to compare requirements, which are more complex\ncomparisons.\n\nFor example, creating a requirement that only matches versions greater than or\nequal to 1.0.0:\n\n```rust\nuse semver::Version;\nuse semver::VersionReq;\n\nlet r = VersionReq::parse(">= 1.0.0").unwrap();\nlet v = Version::parse("1.0.0").unwrap();\n\nassert!(r.to_string() == ">= 1.0.0".to_string());\nassert!(r.matches(&v))\n```\n\nIt also allows parsing of `~x.y.z` and `^x.y.z` requirements as defined at\nhttps://www.npmjs.org/doc/misc/semver.html\n\n**Tilde requirements** specify a minimal version with some updates:\n\n```notrust\n~1.2.3 := >=1.2.3 <1.3.0\n~1.2   := >=1.2.0 <1.3.0\n~1     := >=1.0.0 <2.0.0\n```\n\n**Caret requirements** allow SemVer compatible updates to a specified version,\n`0.x` and `0.x+1` are not considered compatible, but `1.x` and `1.x+1` are.\n\n`0.0.x` is not considered compatible with any other version.\nMissing minor and patch versions are desugared to `0` but allow flexibility for that value.\n\n```notrust\n^1.2.3 := >=1.2.3 <2.0.0\n^0.2.3 := >=0.2.3 <0.3.0\n^0.0.3 := >=0.0.3 <0.0.4\n^0.0   := >=0.0.0 <0.1.0\n^0     := >=0.0.0 <1.0.0\n```\n'