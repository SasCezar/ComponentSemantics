b'![PhoneNumberKit](https://cloud.githubusercontent.com/assets/889949/20864386/a1307950-b9ef-11e6-8a58-e9c5103738e7.png)\n[![Platform](https://img.shields.io/cocoapods/p/PhoneNumberKit.svg?maxAge=2592000)](http://cocoapods.org/?q=PhoneNumberKit)\n[![Build Status](https://travis-ci.org/marmelroy/PhoneNumberKit.svg?branch=master)](https://travis-ci.org/marmelroy/PhoneNumberKit) [![Version](http://img.shields.io/cocoapods/v/PhoneNumberKit.svg)](http://cocoapods.org/?q=PhoneNumberKit)\n[![Carthage compatible](https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat)](https://github.com/Carthage/Carthage)\n\n# PhoneNumberKit\nSwift 5.0 framework for parsing, formatting and validating international phone numbers.\nInspired by Google\'s libphonenumber.\n\n[Migrating from PhoneNumberKit 0.x? See the migration guide.](https://github.com/marmelroy/PhoneNumberKit/blob/master/Documentation/OXMIGRATIONGUIDE.md)  \n## Features\n\n| |Features |\n--------------------------|------------------------------------------------------------\n:phone: | Validate, normalize and extract the elements of any phone number string.\n:100: | Simple Swift syntax and a lightweight readable codebase.\n:checkered_flag: | Fast. 1000 parses -> ~0.4 seconds.\n:books: | Best-in-class metadata from Google\'s libPhoneNumber project.\n:trophy: | Fully tested to match the accuracy of Google\'s JavaScript implementation of libPhoneNumber.\n:iphone: | Built for iOS. Automatically grabs the default region code from the phone.\n\xf0\x9f\x93\x9d | Editable (!) AsYouType formatter for UITextField.\n:us: | Convert country codes to country names and vice versa\n\n## Usage\n\nImport PhoneNumberKit at the top of the Swift file that will interact with a phone number.\n\n```swift\nimport PhoneNumberKit\n```\n\nAll of your interactions with PhoneNumberKit happen through a PhoneNumberKit object. The first step you should take is to allocate one.\n\nA PhoneNumberKit instance is relatively expensive to allocate (it parses the metadata and keeps it in memory for the object\'s lifecycle), you should try and make sure PhoneNumberKit is allocated once and deallocated when no longer needed.\n\n```swift\nlet phoneNumberKit = PhoneNumberKit()\n```\n\nTo parse a string, use the parse function. The region code is automatically computed but can be overridden if needed. PhoneNumberKit automatically does a hard type validation to ensure that the object created is valid, this can be quite costly performance-wise and can be turned off if needed.\n```swift\ndo {\n    let phoneNumber = try phoneNumberKit.parse("+33 6 89 017383")\n    let phoneNumberCustomDefaultRegion = try phoneNumberKit.parse("+44 20 7031 3000", withRegion: "GB", ignoreType: true)\n}\ncatch {\n    print("Generic parser error")\n}\n```\n\nIf you need to parse and validate a large amount of numbers at once, PhoneNumberKit has a special, lightning fast array parsing function. The default region code is automatically computed but can be overridden if needed. Here you can also ignore hard type validation if it is not necessary. Invalid numbers are ignored in the resulting array.\n```swift\nlet rawNumberArray = ["0291 12345678", "+49 291 12345678", "04134 1234", "09123 12345"]\nlet phoneNumbers = phoneNumberKit.parse(rawNumberArray)\nlet phoneNumbersCustomDefaultRegion = phoneNumberKit.parse(rawNumberArray, withRegion: "DE",  ignoreType: true)\n```\n\nPhoneNumber objects are immutable Swift structs with the following properties:\n```swift\nphoneNumber.numberString\nphoneNumber.countryCode\nphoneNumber.nationalNumber\nphoneNumber.numberExtension\nphoneNumber.type // e.g Mobile or Fixed\n```\n\nFormatting a PhoneNumber object into a string is also very easy\n```swift\nphoneNumberKit.format(phoneNumber, toType: .e164) // +61236618300\nphoneNumberKit.format(phoneNumber, toType: .international) // +61 2 3661 8300\nphoneNumberKit.format(phoneNumber, toType: .national) // (02) 3661 8300\n```\n\n## PhoneNumberTextField\n\n![AsYouTypeFormatter](https://user-images.githubusercontent.com/7651280/67554038-e6512500-f751-11e9-93c9-9111e899a2ef.gif)\n\nTo use the AsYouTypeFormatter, just replace your UITextField with a PhoneNumberTextField (if you are using Interface Builder make sure the module field is set to PhoneNumberKit).\n\nYou can customize your TextField UI in the following ways\n- `withFlag` will display the country code for the `currentRegion`. The `flagButton` is displayed in the `leftView` of the text field with it\'s size set based off your text size.\n- `withExamplePlaceholder` uses `attributedPlaceholder` to show an example number for the `currentRegion`. In addition when `withPrefix` is set, the country code\'s prefix will automatically be inserted and removed when editing changes.\n\nPhoneNumberTextField automatically formats phone numbers and gives the user full editing capabilities. If you want to customize you can use the PartialFormatter directly. The default region code is automatically computed but can be overridden if needed (see the example given below).\n```swift\nclass MyGBTextField: PhoneNumberTextField {\n    override var defaultRegion: String {\n        get {\n            return "GB"\n        }\n        set {} // exists for backward compatibility\n    }\n}\n```\n\n```swift\nlet textField = PhoneNumberTextField()\n\nPartialFormatter().formatPartial("+336895555") // +33 6 89 55 55\n```\n\nYou can also query countries for a dialing code or the dialing code for a given country\n```swift\nphoneNumberKit.countries(withCode: 33)\nphoneNumberKit.countryCode(for: "FR")\n```\n\n## Need more customization?\n\nYou can access the metadata powering PhoneNumberKit yourself, this enables you to program any behaviours as they may be implemented in PhoneNumberKit itself. It does mean you are exposed to the less polished interface of the underlying file format. If you program something you find useful please push it upstream!\n```swift\nphoneNumberKit.metadata(for: "AU")?.mobile?.exampleNumber // 412345678\n```\n\n### Setting up with Carthage\n\n[Carthage](https://github.com/Carthage/Carthage) is a decentralized dependency manager that automates the process of adding frameworks to your Cocoa application.\n\nYou can install Carthage with [Homebrew](http://brew.sh/) using the following command:\n\n```bash\n$ brew update\n$ brew install carthage\n```\n\nTo integrate PhoneNumberKit into your Xcode project using Carthage, specify it in your `Cartfile`:\n\n```ogdl\ngithub "marmelroy/PhoneNumberKit"\n```\n\n### Setting up with [CocoaPods](http://cocoapods.org/?q=PhoneNumberKit)\n```ruby\nsource \'https://github.com/CocoaPods/Specs.git\'\npod \'PhoneNumberKit\', \'~> 3.1\'\n```\n'