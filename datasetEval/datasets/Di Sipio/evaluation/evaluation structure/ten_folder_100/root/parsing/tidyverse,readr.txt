b'\n<!-- README.md is generated from README.Rmd. Please edit that file -->\n\n# readr <a href="https://readr.tidyverse.org"><img src="man/figures/logo.png" align="right" height = 150 /></a>\n\n[![CRAN\\_Status\\_Badge](https://www.r-pkg.org/badges/version/readr)](https://cran.r-project.org/package=readr)\n[![Build\nStatus](https://travis-ci.org/tidyverse/readr.svg?branch=master)](https://travis-ci.org/tidyverse/readr)\n[![AppVeyor Build\nStatus](https://ci.appveyor.com/api/projects/status/github/tidyverse/readr?branch=master&svg=true)](https://ci.appveyor.com/project/tidyverse/readr)\n[![Coverage\nStatus](https://codecov.io/gh/tidyverse/readr/coverage.svg?branch=master)](https://codecov.io/gh/tidyverse/readr?branch=master)\n\n## Overview\n\nThe goal of readr is to provide a fast and friendly way to read\nrectangular data (like csv, tsv, and fwf). It is designed to flexibly\nparse many types of data found in the wild, while still cleanly failing\nwhen data unexpectedly changes. If you are new to readr, the best place\nto start is the [data import\nchapter](http://r4ds.had.co.nz/data-import.html) in R for data science.\n\n## Installation\n\n``` r\n# The easiest way to get readr is to install the whole tidyverse:\ninstall.packages("tidyverse")\n\n# Alternatively, install just readr:\ninstall.packages("readr")\n\n# Or the the development version from GitHub:\n# install.packages("devtools")\ndevtools::install_github("tidyverse/readr")\n```\n\n## Cheatsheet\n\n<a href="https://github.com/rstudio/cheatsheets/blob/master/data-import.pdf"><img src="https://raw.githubusercontent.com/rstudio/cheatsheets/master/pngs/thumbnails/data-import-cheatsheet-thumbs.png" width="630" height="252"/></a>\n\n## Usage\n\nreadr is part of the core tidyverse, so load it with:\n\n``` r\nlibrary(tidyverse)\n#> \xe2\x94\x80\xe2\x94\x80 Attaching packages \xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80 tidyverse 1.2.1 \xe2\x94\x80\xe2\x94\x80\n#> \xe2\x9c\x94 ggplot2 3.1.0     \xe2\x9c\x94 purrr   0.2.5\n#> \xe2\x9c\x94 tibble  1.4.2     \xe2\x9c\x94 dplyr   0.7.7\n#> \xe2\x9c\x94 tidyr   0.8.2     \xe2\x9c\x94 stringr 1.3.1\n#> \xe2\x9c\x94 readr   1.2.0     \xe2\x9c\x94 forcats 0.3.0\n#> \xe2\x94\x80\xe2\x94\x80 Conflicts \xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80 tidyverse_conflicts() \xe2\x94\x80\xe2\x94\x80\n#> \xe2\x9c\x96 dplyr::filter() masks stats::filter()\n#> \xe2\x9c\x96 dplyr::lag()    masks stats::lag()\n```\n\nTo accurately read a rectangular dataset with readr you combine two\npieces: a function that parses the overall file, and a column\nspecification. The column specification describes how each column should\nbe converted from a character vector to the most appropriate data type,\nand in most cases it\xe2\x80\x99s not necessary because readr will guess it for you\nautomatically.\n\nreadr supports seven file formats with seven `read_` functions:\n\n  - `read_csv()`: comma separated (CSV) files\n  - `read_tsv()`: tab separated files\n  - `read_delim()`: general delimited files\n  - `read_fwf()`: fixed width files\n  - `read_table()`: tabular files where columns are separated by\n    white-space.\n  - `read_log()`: web log files\n\nIn many cases, these functions will just work: you supply the path to a\nfile and you get a tibble back. The following example loads a sample\nfile bundled with readr:\n\n``` r\nmtcars <- read_csv(readr_example("mtcars.csv"))\n#> Parsed with column specification:\n#> cols(\n#>   mpg = col_double(),\n#>   cyl = col_double(),\n#>   disp = col_double(),\n#>   hp = col_double(),\n#>   drat = col_double(),\n#>   wt = col_double(),\n#>   qsec = col_double(),\n#>   vs = col_double(),\n#>   am = col_double(),\n#>   gear = col_double(),\n#>   carb = col_double()\n#> )\n```\n\nNote that readr prints the column specification. This is useful because\nit allows you to check that the columns have been read in as you expect,\nand if they haven\xe2\x80\x99t, you can easily copy and paste into a new call:\n\n``` r\nmtcars <- read_csv(readr_example("mtcars.csv"), col_types = \n  cols(\n    mpg = col_double(),\n    cyl = col_integer(),\n    disp = col_double(),\n    hp = col_integer(),\n    drat = col_double(),\n    vs = col_integer(),\n    wt = col_double(),\n    qsec = col_double(),\n    am = col_integer(),\n    gear = col_integer(),\n    carb = col_integer()\n  )\n)\n```\n\n`vignette("readr")` gives more detail on how readr guesses the column\ntypes, how you can override the defaults, and provides some useful tools\nfor debugging parsing problems.\n\n## Alternatives\n\nThere are two main alternatives to readr: base R and data.table\xe2\x80\x99s\n`fread()`. The most important differences are discussed below.\n\n### Base R\n\nCompared to the corresponding base functions, readr functions:\n\n  - Use a consistent naming scheme for the parameters (e.g. `col_names`\n    and `col_types` not `header` and `colClasses`).\n\n  - Are much faster (up to 10x).\n\n  - Leave strings as is by default, and automatically parse common\n    date/time formats.\n\n  - Have a helpful progress bar if loading is going to take a while.\n\n  - All functions work exactly the same way regardless of the current\n    locale. To override the US-centric defaults, use `locale()`.\n\n### data.table and `fread()`\n\n[data.table](https://github.com/Rdatatable/data.table) has a function\nsimilar to `read_csv()` called fread. Compared to fread, readr\nfunctions:\n\n  - Are slower. If you want absolutely the\n    best performance, use `data.table::fread()`.\n\n  - Use a slightly more sophisticated parser, recognising both doubled\n    (`""""`) and backslash escapes (`"\\""`), and can produce factors and\n    date/times directly.\n\n  - Forces you to supply all parameters, where `fread()` saves you work\n    by automatically guessing the delimiter, whether or not the file has\n    a header, and how many lines to skip.\n\n  - Are built on a different underlying infrastructure. Readr functions\n    are designed to be quite general, which makes it easier to add\n    support for new rectangular data formats. `fread()` is designed to\n    be as fast as possible.\n\n## Acknowledgements\n\nThanks to:\n\n  - [Joe Cheng](https://github.com/jcheng5) for showing me the beauty of\n    deterministic finite automata for parsing, and for teaching me why I\n    should write a tokenizer.\n\n  - [JJ Allaire](https://github.com/jjallaire) for helping me come up\n    with a design that makes very few copies, and is easy to extend.\n\n  - [Dirk Eddelbuettel](http://dirk.eddelbuettel.com) for coming up with\n    the name\\!\n\nPlease note that this project is released with a [Contributor Code of\nConduct](CONDUCT.md). By participating in this project you agree to\nabide by its terms.\n\n## Code of Conduct\n\nPlease note that the readr project is released with a [Contributor Code of Conduct](https://readr.tidyverse.org/CODE_OF_CONDUCT.html). By contributing to this project, you agree to abide by its terms.\n\n'