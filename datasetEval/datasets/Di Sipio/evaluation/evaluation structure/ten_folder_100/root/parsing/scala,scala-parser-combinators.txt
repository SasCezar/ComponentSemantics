b'# scala-parser-combinators\n\n[<img src="https://img.shields.io/travis/scala/scala-parser-combinators.svg"/>](https://travis-ci.org/scala/scala-parser-combinators)\n[<img src="https://img.shields.io/maven-central/v/org.scala-lang.modules/scala-parser-combinators_2.11.svg?label=latest%20release%20for%202.11"/>](http://search.maven.org/#search%7Cga%7C1%7Cg%3Aorg.scala-lang.modules%20a%3Ascala-parser-combinators_2.11)\n[<img src="https://img.shields.io/maven-central/v/org.scala-lang.modules/scala-parser-combinators_2.12.svg?label=latest%20release%20for%202.12"/>](http://search.maven.org/#search%7Cga%7C1%7Cg%3Aorg.scala-lang.modules%20a%3Ascala-parser-combinators_2.12)\n[<img src="https://img.shields.io/maven-central/v/org.scala-lang.modules/scala-parser-combinators_2.13.svg?label=latest%20release%20for%202.13"/>](http://search.maven.org/#search%7Cga%7C1%7Cg%3Aorg.scala-lang.modules%20a%3Ascala-parser-combinators_2.13)\n\n### Scala Standard Parser Combinator Library\n\nThis library is now community-maintained. If you are interested in helping please contact [@Philippus](https://github.com/philippus) or [@SethTisue](https://github.com/SethTisue).\n\nAs of Scala 2.11, this library is a separate jar that can be omitted from Scala projects that do not use Parser Combinators.\n\n## Documentation\n\n * [Current API](https://javadoc.io/page/org.scala-lang.modules/scala-parser-combinators_2.12/latest/scala/util/parsing/combinator/index.html)\n * The [Getting Started](docs/Getting_Started.md) guide\n * A more complicated example, [Building a lexer and parser with Scala\'s Parser Combinators](https://enear.github.io/2016/03/31/parser-combinators/)\n * "Combinator Parsing", chapter 33 of [_Programming in Scala, Third Edition_](http://www.artima.com/shop/programming_in_scala), shows how to apply this library to e.g. parsing of arithmetic expressions. The second half of the chapter examines how the library is implemented.\n\n## Adding an sbt dependency\nTo depend on scala-parser-combinators in sbt, add something like this to your build.sbt:\n\n```\nlibraryDependencies += "org.scala-lang.modules" %% "scala-parser-combinators" % "1.1.2"\n```\n\nTo support multiple Scala versions, see the example in [scala/scala-module-dependency-sample](https://github.com/scala/scala-module-dependency-sample).\n\n### Scala.js and Scala Native\n\nScala-parser-combinators is also available for Scala.js 0.6+ and Scala Native:\n\n```\nlibraryDependencies += "org.scala-lang.modules" %%% "scala-parser-combinators" % "1.1.2"\n```\n\n## Example\n\n```scala\nimport scala.util.parsing.combinator._\n\ncase class WordFreq(word: String, count: Int) {\n  override def toString = s"Word <$word> occurs with frequency $count"\n}\n\nclass SimpleParser extends RegexParsers {\n  def word: Parser[String]   = """[a-z]+""".r       ^^ { _.toString }\n  def number: Parser[Int]    = """(0|[1-9]\\d*)""".r ^^ { _.toInt }\n  def freq: Parser[WordFreq] = word ~ number        ^^ { case wd ~ fr => WordFreq(wd,fr) }\n}\n\nobject TestSimpleParser extends SimpleParser {\n  def main(args: Array[String]) = {\n    parse(freq, "johnny 121") match {\n      case Success(matched,_) => println(matched)\n      case Failure(msg,_) => println(s"FAILURE: $msg")\n      case Error(msg,_) => println(s"ERROR: $msg")\n    }\n  }\n}\n```\n\nFor a detailed unpacking of this example see\n[Getting Started](docs/Getting_Started.md).\n\n## Issues\n\nMany old issues from the Scala JIRA issue tracker have been migrated\nhere, but not all of them. Community assistance identifying and\nmigrating still-relevant issues is welcome.  See [this\npage](https://github.com/scala/scala-parser-combinators/issues/61) for\ndetails.\n\n## Contributing\n\n * See the [Scala Developer Guidelines](https://github.com/scala/scala/blob/2.13.x/CONTRIBUTING.md) for general contributing guidelines\n * Have a look at [existing issues](https://github.com/scala/scala-parser-combinators/issues)\n * Ask questions and discuss [on Gitter](https://gitter.im/scala/contributors)\n * Feel free to open draft pull requests with partially completed changes, to get feedback.\n'