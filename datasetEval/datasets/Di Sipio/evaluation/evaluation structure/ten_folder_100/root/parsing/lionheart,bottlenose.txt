b'<!--\nCopyright 2012-2018 Lionheart Software LLC\n\nLicensed under the Apache License, Version 2.0 (the "License");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an "AS IS" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n-->\n\n![](meta/repo-banner.png)\n[![](meta/repo-banner-bottom.png)][lionheart-url]\n\n[![Version](https://img.shields.io/travis/lionheart/bottlenose.svg?style=flat)](https://travis-ci.org/lionheart/bottlenose)\n[![Version](https://img.shields.io/pypi/v/bottlenose.svg?style=flat)](https://pypi.python.org/pypi/bottlenose)\n[![License](https://img.shields.io/pypi/l/bottlenose.svg?style=flat)](LICENSE)\n[![Versions](https://img.shields.io/pypi/pyversions/bottlenose.svg?style=flat)](https://pypi.python.org/pypi/bottlenose)\n\nBottlenose is a thin, well-tested, maintained, and powerful Python wrapper over the Amazon Product Advertising API.  There is practically no overhead, and no magic (unless you add it yourself).\n\nBefore you get started, make sure you have both Amazon Product Advertising and AWS accounts. `AWS_ACCESS_KEY_ID`, `AWS_SECRET_ACCESS_KEY` and `AWS_ASSOCIATE_TAG` are all from your Amazon Associate Account.\n\n## Features\n\n* [x] Compatible with Python versions 2.4 and up\n* [x] Support for AU, BR, CA, CN, DE, ES, FR, IN, IT, JP, MX, UK, and US Amazon Product Advertising API endpoints\n* [x] No requirements, except simplejson for Python versions before 2.6\n* [x] Configurable query parsing\n* [x] Configurable throttling for batches of queries\n* [x] Configurable query caching\n* [x] Configurable error handling and retries\n\n## Usage\n\n### [pip](https://pip.pypa.io/en/stable/installing/)\n\n    pip install bottlenose\n\nor\n\n    python3 -m pip install bottlenose\n\nThen, using your `AWS_ACCESS_KEY_ID`, `AWS_SECRET_ACCESS_KEY`, and `AWS_ASSOCIATE_TAG`:\n\n```python\nimport bottlenose\namazon = bottlenose.Amazon(AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_ASSOCIATE_TAG)\nresponse = amazon.ItemLookup(ItemId="B007OZNUCE")\n```\n\nYou can then parse the `response` output to view item information.\n\n## Troubleshooting\n\n* If you need help or would like to ask a general question, use [Stack Overflow](http://stackoverflow.com/questions/tagged/bottlenose). Apply the \'bottlenose\' tag to your question to get help faster.\n* If you found a bug or have a feature request, open an issue.\n* If you want to contribute, submit a pull request. If it\'s a big change, please open an issue first to discuss implementation.\n\n## Advanced Usage\n\n#### 1. Available Search Methods\n\n##### Region Endpoint\n\nThe default Region is the US (`webservices.amazon.com`). To specify a different endpoint\nsimply set the Region parameter with the request. For example to specify the French\nendpoint (`webservices.amazon.fr`) set the Region parameter to \'FR\':\n\n```python\namazon = bottlenose.Amazon(AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_ASSOCIATE_TAG, Region=\'FR\')\n```\nSupported values for the Region parameter are CA, CN, DE, ES, FR, IN, IT, JP, UK, and US (default).\n\nYour Amazon Product Advertising account (AWS_ASSOCIATE_TAG) mut exist for the given endpoint\nor you\'ll get an HTTP 400 error (\'Bad Request\').\n\n##### Search for a Specific Item\n\n```python\nresponse = amazon.ItemLookup(ItemId="B007OZNUCE")\n```\n\n##### Search for Items by Keywords\n\n```python\nresponse = amazon.ItemSearch(Keywords="Kindle 3G", SearchIndex="All")\n```\n\n##### Search for Images for an item\n\n```python\nresponse = amazon.ItemLookup(ItemId="1449372422", ResponseGroup="Images")\n```\n\n##### Search for Similar Items\n\n```python\nresponse = amazon.SimilarityLookup(ItemId="B007OZNUCE")\n```\n\n#### 2. Available Shopping Related Methods\n\n##### Required\n\n```python\namazon = bottlenose.Amazon(AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_ASSOCIATE_TAG)\n```\n\n##### Create a cart\n\n```python\nresponse = amazon.CartCreate(...)\n```\n\n##### Adding to a cart\n\n```python\nresponse = amazon.CartAdd(CartId, ...)\n```\n\n##### Get a cart by ID\n\n```python\nresponse = amazon.CartGet(CartId, ...)\n```\n\n##### Modifying a cart\n\n```python\nresponse = amazon.CartModify(ASIN, CartId,...)\n```\n\n##### Clearing a cart\n\n```python\nresponse = amazon.CartClear(CartId, ...)\n```\n\n#### 3. Sample Code\n\n```python\nimport bottlenose\namazon = bottlenose.Amazon(AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_ASSOCIATE_TAG)\nresponse = amazon.ItemLookup(ItemId="0596520999", ResponseGroup="Images",\n    SearchIndex="Books", IdType="ISBN")\nprint(response)\n# <?xml version="1.0" ?><ItemLookupResponse xmlns="http://webservices.amazon...\n```\n\nHere is another example.\n\n```python\nresponse = amazon.ItemSearch(Keywords="Kindle 3G", SearchIndex="All")\n# <?xml version="1.0" ?><ItemSearchResponse xmlns="http://webservices.amazon...\n```\n\nBottlenose can also read your credentials from the environment automatically;\njust set `$AWS_ACCESS_KEY_ID`, `$AWS_SECRET_ACCESS_KEY` and\n`$AWS_ASSOCIATE_TAG`.\n\nAny valid API call from the following is supported (in addition to any others\nthat may be added in the future). Just plug in appropriate request parameters\nfor the operation you\'d like to call, and you\'re good to go.\n\n    BrowseNodeLookup\n    CartAdd\n    CartClear\n    CartCreate\n    CartGet\n    CartModify\n    ItemLookup\n    ItemSearch\n    SimilarityLookup\n\nYou can refer here for a full listing of API calls to be made from Amazon.\n- [Amazon API Quick Reference Card](http://s3.amazonaws.com/awsdocs/Associates/latest/prod-adv-api-qrc.pdf)\n\n-------\n\nFor more information about these calls, please consult the [Product Advertising\nAPI Developer Guide](http://docs.aws.amazon.com/AWSECommerceService/latest/DG/Welcome.html).\n\n## Parsing\n\nBy default, API calls return the response as a raw bytestring. You can change\nthis with the `Parser` constructor argument. The parser is a callable that\ntakes a single argument, the response as a raw bytestring, and returns the\nparsed response in a format of your choice.\n\nFor example, to parse responses with BeautifulSoup:\n\n```python\nimport bottlenose\nfrom bs4 import BeautifulSoup\n\namazon = bottlenose.Amazon(\n    AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_ASSOCIATE_TAG,\n    Parser=lambda text: BeautifulSoup(text, \'xml\')\n)\nresults = amazon.ItemLookup(ItemId="0198596790", ResponseGroup="SalesRank")\n\nprint(results.find(\'SalesRank\').string)\n# 168088\n```\n\n## Throttling/Batch Mode\n\nAmazon strictly limits the query rate on its API (by default, one query\nper second per associate tag). If you have a batch of non-urgent queries, you\ncan use the `MaxQPS` argument to limit them to no more than a certain rate;\nany faster, and bottlenose will `sleep()` until it is time to make the next\nAPI call.\n\nGenerally, you want to be just under the query limit, for example:\n\n```python\namazon = bottlenose.Amazon(MaxQPS=0.9)\n```\n\nIf some other code is also querying the API with your associate tag (for\nexample, a website backend), you\'ll want to choose an even lower value\nfor MaxQPS.\n\n## Caching\n\nYou can often get a major speedup by caching API queries. Use the `CacheWriter`\nand `CacheReader` constructor arguments.\n\n`CacheWriter` is a callable that takes two arguments, a cache url, and the\nraw response (a bytestring). It will only be called after successful queries.\n\n`CacheReader` is a callable that takes a single argument, a cache url, and\nreturns a (cached) raw response, or `None` if there is nothing cached.\n\nThe cache url is the actual query URL with authentication information removed.\nFor example:\n\n    http://webservices.amazon.com/onca/xml?Keywords=vacuums&Operation=ItemSearch&Region=US&ResponseGroup=SearchBins&SearchIndex=All&Service=AWSECommerceService&Version=2013-08-01\n\nExample code:\n\n```python\ndef write_query_to_db(cache_url, data):\n    ...\n\ndef read_query_from_db(cache_url):\n    ...\n\namazon = bottlenose.Amazon(CacheWriter=write_query_to_db,\n                           CacheReader=read_query_from_db)\n```\n\nNote that Amazon\'s [Product Advertising API Agreement](https://affiliate-program.amazon.com/gp/advertising/api/detail/agreement.html)\nonly allows you to cache queries for up to 24 hours.\n\n## Error Handling\n\nSometimes the Amazon API returns errors; for example, if you have gone over\nyour query limit, you\'ll get a 503. The `ErrorHandler` constructor argument\ngives you a way to keep track of such errors, and to retry queries when you\nreceive a transient error.\n\n`ErrorHandler` should be a callable that takes a single argument, a dictionary\nwith these keys:\n\n * api_url: the actual URL used to call the API\n * cache_url: `api_url` minus authentication information\n * exception: the exception raised (usually an `HTTPError` or `URLError`)\n\nIf your `ErrorHandler` returns true, the query will be retried. Here\'s some\nexample code that does exponential backoff after throttling:\n\n```python\nimport random\nimport time\nfrom urllib2 import HTTPError\n\ndef error_handler(err):\n    ex = err[\'exception\']\n    if isinstance(ex, HTTPError) and ex.code == 503:\n        time.sleep(random.expovariate(0.1))\n        return True\n\namazon = bottlenose.Amazon(ErrorHandler=error_handler)\n```\n\n## License\n\nApache License, Version 2.0. See [LICENSE](LICENSE) for details.\n\n[lionheart-url]: https://lionheartsw.com/\n\n'