b'# comby\n\n[![Apache-2.0](https://img.shields.io/badge/license-Apache-blue.svg)](LICENSE)\n[![Build Status](https://travis-ci.com/comby-tools/comby.svg?branch=master)](https://travis-ci.com/comby-tools/comby)\n![Coveralls github](https://img.shields.io/coveralls/github/comby-tools/comby)\n[![Downloads](https://img.shields.io/github/downloads/comby-tools/comby/total.svg?color=orange)](Downloads)\n[![Commit](https://img.shields.io/github/last-commit/comby-tools/comby.svg)](Commit)\n[![Gitter](https://img.shields.io/gitter/room/comby-tools/comby.svg?color=teal)](https://gitter.im/comby-tools/community)\n\n![](https://user-images.githubusercontent.com/888624/64916761-0b657780-d752-11e9-96e2-cd81a2681139.gif)\n\n### See the [usage documentation](https://comby.dev).\n[A short example below](https://github.com/comby-tools/comby#isnt-a-regex-approach-like-sed-good-enough) shows how comby simplifies matching and rewriting compared to regex approaches like `sed`.\n\n<details>\n  <summary>Comby supports interactive review mode (click here to see it in action).</summary>\n  \n![](https://user-images.githubusercontent.com/888624/69503010-b8870980-0ed2-11ea-828d-68c152ed9def.gif)\n  \n</details>\n\n**Need help writing patterns or have other problems? Post them in [Gitter](https://gitter.im/comby-tools/community).**\n\n## Install (pre-built binaries)\n\n### Mac OS X\n\n- `brew install comby`\n\n### Ubuntu Linux\n\n- `bash <(curl -sL get.comby.dev)`\n\n- **Arch and other Linux**: The PCRE library is dynamically linked in the Ubuntu binary. For other distributions, like Arch, a fixup is needed: `ln -s /usr/lib/libpcre.so /usr/lib/libpcre.so.3`. Alternatively, consider [building from source](https://github.com/comby-tools/comby#build-from-source).\n\n\n### Windows\n\n- [Install the Windows Subsystem for Linux](https://docs.microsoft.com/en-us/windows/wsl/install-win10) and install Ubuntu. Then run `bash <(curl -sL get.comby.dev)`\n\n\n### Docker\n\n- `docker pull comby/comby`\n\n<details>\n  <summary>click to expand an example invocation for the docker image</summary>\n  \nRunning with docker on `stdin`:\n\n```bash\necho \'(\xf0\x9f\x91\x8b hi)\' | docker run -a stdin -a stdout -i comby/comby \'(:[emoji] hi)\' \'bye :[emoji]\' lisp -stdin\n```\n\n<img width="500" src="https://user-images.githubusercontent.com/888624/64924862-0edf1a00-d7b7-11e9-9c2e-cfeafde5bb4b.png">\n\n</details>\n\n\n\n### Or [try it live](https://bit.ly/2UXkonD).\n\n## Isn\'t a regex approach like sed good enough?\n\nSometimes, yes. But often, small changes and refactorings are complicated by nested expressions, comments, or strings. Consider the following C-like snippet. Say the challenge is to rewrite the two `if` conditions to the value `1`. Can you write a regular expression that matches the contents of the two if condition expressions, and only those two? Feel free to share your pattern with [@rvtond](https://twitter.com/rvtond) on Twitter.\n\n```c\nif (fgets(line, 128, file_pointer) == Null) // 1) if (...) returns 0\n      return 0;\n...\nif (scanf("%d) %d", &x, &y) == 2) // 2) if (scanf("%d) %d", &x, &y) == 2) returns 0\n      return 0; \n```\n\nTo match these with comby, all you need to write is `if (:[condition])`, and specify one flag that this language is C-like. The replacement is `if (1)`. See the [live example](https://bit.ly/30935ou).\n\n## Build from source\n\n- Install [opam](https://opam.ocaml.org/doc/Install.html)\n\n- Create a new switch if you don\'t have OCaml installed:\n\n```\nopam init\nopam switch create 4.09.0 4.09.0\n```\n\n- Install OS dependencies:\n\n  - **Linux:** `sudo apt-get install pkg-config libpcre3-dev`\n\n  - **Mac:** `brew install pkg-config pcre`\n\n- Then install the library dependencies:\n\n```\ngit clone https://github.com/comby-tools/comby\ncd comby && opam install . --deps-only -y\n```\n\n- Build and test\n\n```\nmake\nmake test\n```\n\n- If you want to install `comby` on your `PATH`, run\n\n```\nmake install\n```\n'