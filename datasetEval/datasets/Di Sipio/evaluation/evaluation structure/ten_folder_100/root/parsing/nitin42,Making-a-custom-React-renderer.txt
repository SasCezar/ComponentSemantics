b'# Building a custom React renderer\n\n[![Build Status](https://travis-ci.org/nitin42/Making-a-custom-React-renderer.svg?branch=master)](https://travis-ci.org/nitin42/Making-a-custom-React-renderer)\n\n> Let\'s make a custom React renderer \xf0\x9f\x98\x8e\n\n<p align="center">\n  <img src="https://cdn.filestackcontent.com/5KdzhvGRG61WMQhBa1Ql" width="630" height="350">\n</p>\n\n## Introduction\n\nThis is a small tutorial on how to build your custom React renderer and render the components to the host environment you need. The tutorial is divided into three parts -\n\n* **Part 1** - Creating a React reconciler (using [`react-reconciler`](https://github.com/facebook/react/tree/master/packages/react-reconciler) package).\n\n* **Part 2** - Creating a public interface to the reconciler i.e "Renderer".\n\n* **Part 3** - Creating a render method to flush everything to the host environment we need.\n\n## Brief\n\n### [Part-I](./part-one.md)\n\nIn part one, we will create a React reconciler using the [`react-reconciler`](https://github.com/facebook/react/tree/master/packages/react-reconciler) package. We will implement the renderer using Fiber as it has a first-class renderer API for creating custom renderer.\n\n### [Part-II](./part-two.md)\n\nIn part two, we will create a public interface to the reconciler i.e a renderer. We will create a custom method for `createElement` and will also architect the component API for our example.\n\n### [Part-III](./part-three.md)\n\nIn part three, we will create a render method which will render our input component.\n\n## What we will build?\n\nWe will create a custom renderer that will render a React component to a word document. I\'ve already made one. Full source code and the documentation for that is available [here](https://github.com/nitin42/redocx).\n\nWe will use [officegen](https://github.com/Ziv-Barber/officegen) for this. I\'ll explain some of it\'s basic concepts here.\n\nOfficegen can generate Open Office XML files for Microsoft Office 2007 and later. It generates a output stream and not a file.\nIt is independent of any output tool.\n\n**Creating a document object**\n\n```js\nlet doc = officegen(\'docx\', { __someOptions__ });\n```\n\n**Generating output stream**\n\n```js\nlet output = fs.createWriteStream (__filePath__);\n\ndoc.generate(output);\n```\n\n**Events**\n\n`finalize` - It is fired after a stream has been generated successfully.\n\n`error` - Fired when there are any errors\n\n## Running the project\n\n```\ngit clone https://github.com/nitin42/Making-a-custom-React-renderer\ncd Making-a-custom-React-renderer\nyarn install\nyarn example\n```\n\nAfter you run `yarn example`, a docx file will be generated in the [demo](./demo) folder.\n\n## Contributing\n\nSuggestions to improve the tutorial are welcome \xf0\x9f\x98\x83.\n\n**If you\'ve completed the tutorial successfully, you can either watch/star this repo or follow me on [twitter](https://twitter.com/NTulswani) for more updates.**\n\n<a target=\'_blank\' rel=\'nofollow\' href=\'https://app.codesponsor.io/link/FCRW65HPiwhNtebDx2tTc53E/nitin42/Making-a-custom-React-renderer\'>\n  <img alt=\'Sponsor\' width=\'888\' height=\'68\' src=\'https://app.codesponsor.io/embed/FCRW65HPiwhNtebDx2tTc53E/nitin42/Making-a-custom-React-renderer.svg\' />\n</a>\n'