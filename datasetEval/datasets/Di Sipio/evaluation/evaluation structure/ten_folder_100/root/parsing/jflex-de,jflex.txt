b'<a href="https://travis-ci.org/jflex-de/jflex">\n  <img alt="Build status" src="https://travis-ci.org/jflex-de/jflex.svg?branch=master" height="20">\n</a>\n<a href="https://cirrus-ci.com/github/jflex-de/jflex/master">\n  <img alt="Bazel build status" src="https://api.cirrus-ci.com/github/jflex-de/jflex.svg" height="20">\n</a>\n<a href="https://search.maven.org/artifact/de.jflex/jflex/">\n  <img alt="Maven central" src="https://img.shields.io/maven-central/v/de.jflex/jflex.svg" height="20">\n</a>\n\n# JFlex\n\n[JFlex][jflex] is a lexical analyzer generator (also known as scanner generator) for Java.\n\nJFlex takes as input a specification with a set of regular expressions and corresponding actions.\nIt generates Java source of a lexer that reads input, matches the input against the regular\nexpressions in the spec file, and runs the corresponding action if a regular expression\nmatched. Lexers usually are the first front-end step in compilers, matching keywords, comments,\noperators, etc, and generating an input token stream for parsers.\n\nJFlex lexers are based on deterministic finite automata (DFAs).\nThey are fast, without expensive backtracking.\n\n\n## Usage\n\nFor documentation and more information see the [JFlex documentation][jflex-doc]\nand the [wiki][wiki].\n\n### Usage with Maven\n\nYou need JDK 8 or later.\n\n1. Place grammar files in `src/main/flex/` directory.\n\n2. Extend the project [POM build section][pom-build] with the `maven-jflex-plugin`\n  ```xml\n    <build>\n      <plugins>\n        <plugin>\n          <groupId>de.jflex</groupId>\n          <artifactId>jflex-maven-plugin</artifactId>\n          <version>1.8.0</version>\n          <executions>\n            <execution>\n              <goals>\n                <goal>generate</goal>\n              </goals>\n            </execution>\n          </executions>\n        </plugin>\n      </plugins>\n    </build>\n  ```\n\n3. Voil\xc3\xa0: Java code is produced in `target/generated-sources/` during the `generate-sources` phase\n(which happens before the `compile` phase) and included in the compilation scope.\n\n### Usage with ant\n\nYou need JDK 8 or later.\n\n1. Define ant task\n```xml\n<taskdef classname="jflex.anttask.JFlexTask" name="jflex"\n         classpath="path-to-jflex.jar"/>\n```\n2. Use it\n```xml\n<jflex file="src/grammar/parser.flex" destdir="build/generated/"/>\n<javac srcdir="build/generated/" destdir="build/classes/"/>\n```\n\n### Usage with Bazel\n\nWe provide a [jflex rule](https://jflex-de.github.io/bazel_rules/)\n\n```\nload("@jflex_rules//jflex:jflex.bzl", "jflex")\n\njflex(\n    name = "",           # Choose a rule name\n    srcs = [],           # Add input lex specifications\n    outputs = [],        # List expected generated files\n)\n```\n\n### Usage in CLI\n\nYou need JDK 8 or later.\n\nYou can also use JFlex directly from the command line:\n```\njflex/bin/jflex src/grammar/parser.flex\n```\n\nOr:\n```\njava -jar jflex-full-1.7.0.jar -d output src/grammar/parser.flex\n```\n\n### Other build tools\n\nSee [Build tool plugins](https://github.com/jflex-de/jflex/wiki/Build-tool-integration).\n\n\n## Examples\n\nHave a look at the sample project: [simple][example-simple] and other [examples].\n\n\n## Modules\n\nThe top level directory of the JFLex git repository contains:\n\n * **cup** A copy of the CUP runtime\n * **cup-maven-plugin** A simple Maven plugin to generate a parser with CUP.\n * **docs** the Markdown sources for the user manual\n * **java** Java sources [WIP, Bazel]\n * **javatests** Java sources of test [WIP, Bazel]\n * **jflex** JFlex, the scanner/lexer generator for Java\n * **jflex-maven-plugin** the JFlex maven plugin, that helps to integrate JFlex in your project\n * **jflex-unicode-plugin** the JFlex unicode maven plugin, used for compiling JFlex\n * **testsuite** the regression test suite for JFlex,\n * **third_party** third-party librairies used by examples of the [Bazel build system][bazel]\n\n\n## Build from source\n\n### Build with Bazel\n\nYou need [Bazel][bazel].\n\n```\nbazel build //jflex:jflex_bin\n```\n\nThis builds `bazel-bin/jflex/jflex_bin`, that you can use\n\n```\nbazel-bin/jflex/jflex_bin --info\n```\n\nOr:\n\n```\nbazel run //jflex:jflex_bin -- --info\n```\n\nContinuous integration is done with [Cirrus CI](https://cirrus-ci.com/github/jflex-de/jflex/master).\n\n### Build with Maven\n\nYou need JDK 8 or later and [Maven][maven] 3.5.2 or later.\n\n```\n./mvnw install\n```\n\nThis generates `jflex/target/jflex-full-1.7.0.jar` that you can use, e.g.\n\n```\njava -jar jflex-full-1.7.0.jar --info\n```\n\nContinuous Integration is made with [Travis](https://travis-ci.org/jflex-de/jflex/branches).\n\n## Contributing\n\nJFlex is free software, contributions are welcome.\nSee the [Contributing][contrib] page for instructions.\n\n\n[jflex]: http://jflex.de/\n[jflex-doc]: http://jflex.de/manual.html\n[wiki]: https://github.com/jflex-de/jflex/wiki\n[pom-build]: https://maven.apache.org/pom.html#Build_Settings\n[example-simple]: https://github.com/jflex-de/jflex/tree/master/jflex/examples/simple\n[examples]: https://github.com/jflex-de/jflex/tree/master/jflex/examples/\n[contrib]: https://github.com/jflex-de/jflex/wiki/Contributing\n[bazel]: https://bazel.build/\n[maven]: https://maven.apache.org/\n'