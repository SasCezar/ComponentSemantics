b'# Serde CBOR\n[![Build Status](https://travis-ci.org/pyfisch/cbor.svg?branch=master)](https://travis-ci.org/pyfisch/cbor)\n[![Crates.io](https://img.shields.io/crates/v/serde_cbor.svg)](https://crates.io/crates/serde_cbor)\n[![Documentation](https://docs.rs/serde_cbor/badge.svg)](https://docs.rs/serde_cbor)\n\nThis crate implements the Concise Binary Object Representation from [RFC 7049].\nIt builds on [Serde], the generic serialization framework for Rust.\nCBOR provides a binary encoding for a superset\nof the JSON data model that is small and very fast to parse.\n\n[RFC 7049]: https://tools.ietf.org/html/rfc7049\n[Serde]: https://github.com/serde-rs/serde\n\n## Usage\n\nSerde CBOR supports Rust 1.31 and up. Add this to your `Cargo.toml`:\n```toml\n[dependencies]\nserde_cbor = "0.10.3"\n```\n\nStoring and loading Rust types is easy and requires only\nminimal modifications to the program code.\n\n```rust\nuse serde_derive::{Deserialize, Serialize};\nuse std::error::Error;\nuse std::fs::File;\n\n// Types annotated with `Serialize` can be stored as CBOR.\n// To be able to load them again add `Deserialize`.\n#[derive(Debug, Serialize, Deserialize)]\nstruct Mascot {\n    name: String,\n    species: String,\n    year_of_birth: u32,\n}\n\nfn main() -> Result<(), Box<dyn Error>> {\n    let ferris = Mascot {\n        name: "Ferris".to_owned(),\n        species: "crab".to_owned(),\n        year_of_birth: 2015,\n    };\n\n    let ferris_file = File::create("examples/ferris.cbor")?;\n    // Write Ferris to the given file.\n    // Instead of a file you can use any type that implements `io::Write`\n    // like a HTTP body, database connection etc.\n    serde_cbor::to_writer(ferris_file, &ferris)?;\n\n    let tux_file = File::open("examples/tux.cbor")?;\n    // Load Tux from a file.\n    // Serde CBOR performs roundtrip serialization meaning that\n    // the data will not change in any way.\n    let tux: Mascot = serde_cbor::from_reader(tux_file)?;\n\n    println!("{:?}", tux);\n    // prints: Mascot { name: "Tux", species: "penguin", year_of_birth: 1996 }\n\n    Ok(())\n}\n```\n\nThere are a lot of options available to customize the format.\nTo operate on untyped CBOR values have a look at the `Value` type.\n\n## License\nLicensed under either of\n\n * Apache License, Version 2.0 ([LICENSE-APACHE](LICENSE-APACHE) or http://www.apache.org/licenses/LICENSE-2.0)\n * MIT license ([LICENSE-MIT](LICENSE-MIT) or http://opensource.org/licenses/MIT)\n\nat your option.\n\n### Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any\nadditional terms or conditions.\n'