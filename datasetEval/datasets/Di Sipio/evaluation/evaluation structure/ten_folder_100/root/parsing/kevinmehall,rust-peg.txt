b'# Parsing Expression Grammars in Rust\n\n[Documentation](https://docs.rs/peg) | [Release Notes](https://github.com/kevinmehall/rust-peg/releases)\n\n`rust-peg` is a simple yet flexible parser generator based on the [Parsing Expression Grammar](https://en.wikipedia.org/wiki/Parsing_expression_grammar) formalism. It provides a Rust macro that builds a recursive descent parser from a concise definition of the grammar.\n\n## Features\n\n* Parse input from `&str`, `&[u8]`, `&[T]` or custom types implementing traits\n* Customizable reporting of parse errors\n* Rules can accept arguments to create reusable rule templates\n* Precedence climbing for prefix/postfix/infix expressions\n* Helpful `rustc` error messages for errors in the grammar definition or the Rust\n  code embedded within it\n* Rule-level tracing to debug grammars\n\n## Example\n\n```rust\nuse peg::parser;\n\nparser!{\n  grammar list_parser() for str {\n    rule number() -> u32\n      = n:$([\'0\'..=\'9\']+) { n.parse().unwrap() }\n    \n    pub rule list() -> Vec<u32>\n      = "[" l:number() ** "," "]" { l }\n  }\n}\n\npub fn main() {\n    assert_eq!(list_parser::list("[1,1,2,3,5,8]"), Ok(vec![1, 1, 2, 3, 5, 8]));\n}\n```\n\n[See the tests for more examples](./tests/run-pass/)  \n[Grammar rule syntax reference in rustdoc](https://docs.rs/peg)\n\n## Comparison with similar parser generators\n\n| crate     \t| parser type \t| action code \t| integration        \t| input type             \t| precedence climbing \t| parameterizd rules \t| streaming input \t|\n|-----------\t|-------------\t|-------------\t|--------------------\t|------------------------\t|---------------------\t|--------------------\t|-----------------\t|\n| peg       \t| PEG         \t| in grammar  \t| proc macro (block) \t| `&str`, `&[T]`, custom \t| Yes                 \t| Yes                \t| No              \t|\n| [pest]    \t| PEG         \t| external    \t| proc macro (file)  \t| `&str`                 \t| Yes                 \t| No                 \t| No              \t|\n| [nom]     \t| combinators \t| in source   \t| library            \t| `&[u8]`, custom        \t| No                  \t| Yes                \t| Yes             \t|\n| [lalrpop] \t| LR(1)       \t| in grammar  \t| build script       \t| `&str`                 \t| No                  \t| Yes                \t| No              \t|\n\n[pest]: https://github.com/pest-parser/pest\n[nom]: https://github.com/geal/nom\n[lalrpop]: https://github.com/lalrpop/lalrpop\n'