b'## Phonelib\n\n[![Built in integration with JetBrains RubyMine](https://github.com/daddyz/phonelib/blob/master/icon_RubyMine.png?raw=true)](https://www.jetbrains.com/ruby/)\n[![Gem Version](https://badge.fury.io/rb/phonelib.svg)](http://badge.fury.io/rb/phonelib)\n[![Build Status](https://travis-ci.org/daddyz/phonelib.png?branch=master)](http://travis-ci.org/daddyz/phonelib)\n[![](https://codeclimate.com/github/daddyz/phonelib/badges/coverage.svg)](https://codeclimate.com/github/daddyz/phonelib/coverage)\n[![](https://codeclimate.com/github/daddyz/phonelib/badges/gpa.svg)](https://codeclimate.com/github/daddyz/phonelib)\n[![Inline docs](http://inch-ci.org/github/daddyz/phonelib.svg?branch=master)](http://inch-ci.org/github/daddyz/phonelib)\n\nPhonelib is a gem allowing you to validate phone number. All validations are based on [Google libphonenumber](https://github.com/googlei18n/libphonenumber).\nCurrently it can make basic validations and formatting to e164 international number format and national number format with prefix.\nBut it still doesn\'t include all Google\'s library functionality.\n\n## Information\n\n### Change Log\n\nChange log can be found in repo\'s releases page\nhttps://github.com/daddyz/phonelib/releases\n\n### Bug reports\n\nIf you discover a problem with Phonelib gem, let us know about it.\nhttps://github.com/daddyz/phonelib/issues\n\n### Example application\n\nYou can see an example of ActiveRecord validation by phonelib working in spec/dummy application of this gem\n\n## Getting started\n\nPhonelib was written and tested on Rails >= 3.1. You can install it by adding in to your Gemfile with:\n\n``` ruby\ngem \'phonelib\'\n```\n\nRun the bundle command to install it.\n\nTo set the default country (country names are [ISO 3166-1 Alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) codes), create a initializer in <tt>config/initializers/phonelib.rb</tt>:\n\n``` ruby\nPhonelib.default_country = "CN"\n```\n\nTo use the ability to parse special numbers (Short Codes, Emergency etc.) you can set ```Phonelib.parse_special```. This is disabled by default\n\n``` ruby\nPhonelib.parse_special = true\n```\n\nTo allow vanity phone numbers conversion you can set ```Phonelib.vanity_conversion``` to ```true```. This will convert characters in passed phone number to their numeric representation (800-CALL-NOW will be 800-225-5669).\n\n``` ruby\nPhonelib.vanity_conversion = true\n```\n\nTo disable sanitizing of passed phone number (keeping digits only)\n\n``` ruby\nPhonelib.strict_check = true\n```\n\nTo disable sanitizing of double prefix on passed phone number\n\n```ruby\nPhonelib.strict_double_prefix_check = true\n```\n\nTo set different extension separator on formatting, this setting doesn\'t affect parsing. Default setting is \';\'\n\n``` ruby\nPhonelib.extension_separator = \';\'\n```\n\nTo set symbols that are used for separating extension from phone number for parsing use ```Phonelib.extension_separate_symbols``` method. Default value is \'#;\'. In case string is passed each one of the symbols in the string will be treated as possible separator, in case array was passed each string in array will be treated as possible separator.\n\n``` ruby\nPhonelib.extension_separate_symbols = \'#;\'           # for single symbol separator\nPhonelib.extension_separate_symbols = %w(ext # ; extension) # each string will be treated as separator\n```\n\nIn case you need to overwrite some Google\'s libphonenumber library data, you need to assign file path to this setter. File should be Marshal.dump\'ed with existing structure like in ```Phonelib.phone_data```. Gem is simply doing ```merge``` between hashes.\n\n``` ruby\nPhonelib.override_phone_data = \'/path/to/override_phone_data.dat\'\n```\n\nIn case phone number that was passed for parsing has "+" sign in the beginning, library will try to detect a country regarding the provided one.\n\n### ActiveRecord Integration\n\nThis gem adds validator for active record.\nBasic usage:\n\n``` ruby\nvalidates :attribute, phone: true\n```\n\nThis will enable Phonelib validator for field "attribute". This validator checks that passed value is valid phone number.\nPlease note that passing blank value also fails.\n\nAdditional options:\n\n``` ruby\nvalidates :attribute, phone: { possible: true, allow_blank: true, types: [:voip, :mobile], country_specifier: -> phone { phone.country.try(:upcase) } }\n```\n\n<tt>possible: true</tt> - enables validation to check whether the passed number is a possible phone number (not strict check).\nRefer to [Google libphonenumber](http://code.google.com/p/libphonenumber/) for more information on it.\n\n<tt>allow_blank: true</tt> - when no value passed then validation passes\n\n<tt>types: :mobile</tt> or <tt>types: [:voip, :mobile]</tt> - allows to validate against specific phone types patterns,\nif mixed with <tt>possible</tt> will check if number is possible for specified type\n\n<tt>countries: :us</tt> or <tt>countries: [:us, :ca]</tt> - allows to validate against specific countries, \nif mixed with <tt>possible</tt> will check if number is possible for specified countries\n\n<tt>country_specifier: :method_name</tt> or <tt>country_specifier: -> instance { instance.country.try(:upcase) }</tt> - allows to specify country for validation dynamically for each validation. Usefull when phone is stored as national number without country prefix.\n\n<tt>extensions: false</tt> - set to perform check for phone extension to be blank\n\n### Basic usage\n\nTo check if phone number is valid simply run:\n\n``` ruby\nPhonelib.valid?(\'123456789\') # returns true or false\n```\n\nAdditional methods:\n\n``` ruby\nPhonelib.valid? \'123456789\'      # checks if passed value is valid number\nPhonelib.invalid? \'123456789\'    # checks if passed value is invalid number\nPhonelib.possible? \'123456789\'   # checks if passed value is possible number\nPhonelib.impossible? \'123456789\' # checks if passed value is impossible number\n```\n\nThere is also option to check if provided phone is valid for specified country.\nCountry should be specified as two letters country code (like "US" for United States).\nCountry can be specified as String <tt>\'US\'</tt> or <tt>\'us\'</tt> as well as symbol <tt>:us</tt>.\n\n``` ruby\nPhonelib.valid_for_country? \'123456789\', \'XX\'   # checks if passed value is valid number for specified country\nPhonelib.invalid_for_country? \'123456789\', \'XX\' # checks if passed value is invalid number for specified country\n```\n\nAdditionally you can run:\n\n``` ruby\nphone = Phonelib.parse(\'123456789\')\nphone = Phonelib.parse(\'+1 (972) 123-4567\', \'US\')\n```\n\nYou can pass phone number with extension, it should be separated with <tt>;</tt> or <tt>#</tt> signs from the phone number.\n\nReturned value is object of <tt>Phonelib::Phone</tt> class which have following methods:\n\n``` ruby\n# basic validation methods\nphone.valid?\nphone.invalid?\nphone.possible?\nphone.impossible?\n\n# validations for countries\nphone.valid_for_country? \'XX\'\nphone.invalid_for_country? \'XX\'\n```\n\nYou can also fetch matched valid phone types\n\n``` ruby\nphone.types          # returns array of all valid types\nphone.type           # returns first element from array of all valid types\nphone.possible_types # returns array of all possible types\n```\n\nPossible types:\n* <tt>:premium_rate</tt> - Premium Rate\n* <tt>:toll_free</tt> - Toll Free\n* <tt>:shared_cost</tt> - Shared Cost\n* <tt>:voip</tt> - VoIP\n* <tt>:personal_number</tt> - Personal Number\n* <tt>:pager</tt> - Pager\n* <tt>:uan</tt> - UAN\n* <tt>:voicemail</tt> - VoiceMail\n* <tt>:fixed_line</tt> - Fixed Line\n* <tt>:mobile</tt> - Mobile\n* <tt>:fixed_or_mobile</tt> - Fixed Line or Mobile (if both mobile and fixed pattern matches)\n* <tt>:short_code</tt>\n* <tt>:emergency</tt>\n* <tt>:carrier_specific</tt>\n* <tt>:sms_services</tt>\n* <tt>:expanded_emergency</tt>\n* <tt>:no_international_dialling</tt>\n* <tt>:carrier_services</tt>\n* <tt>:directory_services</tt>\n* <tt>:standard_rate</tt>\n* <tt>:carrier_selection_codes</tt>\n* <tt>:area_code_optional</tt>\n\nOr you can get human representation of matched types\n\n``` ruby\nphone.human_types # return array of human representations of valid types\nphone.human_type  # return human representation of first valid type\n```\n\nAlso you can fetch all matched countries\n\n``` ruby\nphone.countries       # returns array of all matched countries\nphone.country         # returns first element from array of all matched countries\nphone.valid_countries # returns array of countries where phone was matched against valid pattern\nphone.valid_country   # returns first valid country from array of valid countries\nphone.country_code    # returns country phone prefix\n```\n\nAlso it is possible to get formatted phone number\n\n``` ruby\nphone.international      # returns formatted e164 international phone number\nphone.national           # returns formatted national number with national prefix\nphone.area_code          # returns area code of parsed number or nil\nphone.local_number       # returns local number\nphone.extension          # returns extension provided with phone\nphone.full_e164          # returns e164 phone representation with extension\nphone.full_international # returns formatted international number with extension\n```\n\nYou can pass <tt>false</tt> to <tt>national</tt> and <tt>international</tt> methods in order to get unformatted representaions\n\n``` ruby\nphone.international(false) # returns unformatted international phone\nphone.national(false)      # returns unformatted national phone\n```\n\nYou can get E164 formatted number\n\n``` ruby\nphone.e164 # returns number in E164 format\n```\n\nYou can define prefix for ```international``` and ```e164``` related methods to get formatted number prefixed with anything you need.\n\n``` ruby\nphone.international(\'00\')      # returns formatted international number prefixed by 00 instead of +\nphone.e164(\'00\')               # returns e164 represantation of a number prefixed by 00 instead of +\nphone.full_international(\'00\') # returns formatted international number with extension prefixed by 00 instead of +\nphone.full_e164(\'00\')          # returns e164 represantation of a number with extension prefixed by 00 instead of +\nphone.international_00         # same as phone.international(\'00\'). 00 can be replaced with whatever you need\nphone.e164_00                  # same as phone.international(\'00\') \n```\n\nThere is a ```to_s``` method, it will return ```e164``` in case number is valid and ```original``` otherwise\n\n``` ruby\nphone.to_s # returns number in E164 format if number is valid or original otherwise\n```\n\nYou can compare 2 instances of ```Phonelib::Phone``` with ```==``` method or just use it with string\n\n```ruby \nphone1 = Phonelib.parse(\'+12125551234\') # Phonelib::Phone instance\nphone2 = Phonelib.parse(\'+12125551234\') # Phonelib::Phone instance\nphone1 == phone2                        # returns true\nphone1 == \'+12125551234\'                # returns true\nphone1 == \'12125551234;123\'             # returns true\n```\n\nThere is extended data available for numbers. It will return <tt>nil</tt> in case there is no data or phone is impossible.\nCan return array of values in case there are some results for specified number\n\n``` ruby\nphone.geo_name # returns geo name of parsed phone\nphone.timezone # returns timezone name of parsed phone\nphone.carrier  # returns carrier name of parsed phone\n```\n\nPhone class has following attributes\n\n``` ruby\nphone.original        # string that was passed as phone number\nphone.sanitized       # sanitized phone number (only digits left)\n```\n\n### How it works\n\nGem includes data from Google libphonenumber which has regex patterns for validations.\nValid patterns are more specific to phone type and country.\nPossible patterns as usual are patterns with number of digits in number.\n\n### Development and tests\n\nEveryone can do whatever he wants, the only limit is your imagination.\nJust don\'t forget to write test before the pull request.\nIn order to run test without Rails functionality simply use\n\n```\nbundle exec rake spec\n```\n\nIf you want to run including Rails environment, you need to set <tt>BUNDLE_GEMFILE</tt> while running the spec task, for example:\n\n```\nBUNDLE_GEMFILE=gemfiles/Gemfile.rails-3.2.x bundle exec rake spec\n```\n\nGemfiles can be found in <tt>gemfiles</tt> folder, there are gemfiles for Rails 3.1, 3.2, 4, 5 and 5.1.\n'