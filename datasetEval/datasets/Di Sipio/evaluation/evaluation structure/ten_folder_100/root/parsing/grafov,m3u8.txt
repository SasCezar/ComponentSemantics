b'<!--*- mode:markdown -*-->\nM3U8 [![](https://awesome.re/mentioned-badge.svg)](https://github.com/avelino/awesome-go#video)\n====\n\nThis is the most complete opensource library for parsing and generating of M3U8 playlists\nused in HTTP Live Streaming (Apple HLS) for internet video translations.\n\nM3U8 is simple text format and parsing library for it must be simple too. It does not offer\nways to play HLS or handle playlists over HTTP. So library features are:\n\n* Support HLS specs up to version 5 of the protocol.\n* Parsing and generation of master-playlists and media-playlists.\n* Autodetect input streams as master or media playlists.\n* Offer structures for keeping playlists metadata.\n* Encryption keys support for use with DRM systems like [Verimatrix](http://verimatrix.com) etc.\n* Support for non standard [Google Widevine](http://www.widevine.com) tags.\n\nThe library covered by BSD 3-clause license. See [LICENSE](LICENSE) for the full text.\nVersions 0.8 and below was covered by GPL v3. License was changed from the version 0.9 and upper.\n\nSee the list of the library authors at [AUTHORS](AUTHORS) file.\n\nInstall\n-------\n\n\tgo get github.com/grafov/m3u8\n\nor get releases from https://github.com/grafov/m3u8/releases\n\nDocumentation [![Go Walker](http://gowalker.org/api/v1/badge)](http://gowalker.org/github.com/grafov/m3u8) [![GoDoc](https://godoc.org/github.com/grafov/m3u8?status.svg)](https://godoc.org/github.com/grafov/m3u8)\n-------------\n\nPackage online documentation (examples included) available at:\n\n* http://gowalker.org/github.com/grafov/m3u8\n* http://godoc.org/github.com/grafov/m3u8\n\nSupported by the HLS protocol tags and their library support explained in [M3U8 cheatsheet](M3U8.md).\n\nExamples\n--------\n\nParse playlist:\n\n```go\n\tf, err := os.Open("playlist.m3u8")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tp, listType, err := m3u8.DecodeFrom(bufio.NewReader(f), true)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tswitch listType {\n\tcase m3u8.MEDIA:\n\t\tmediapl := p.(*m3u8.MediaPlaylist)\n\t\tfmt.Printf("%+v\\n", mediapl)\n\tcase m3u8.MASTER:\n\t\tmasterpl := p.(*m3u8.MasterPlaylist)\n\t\tfmt.Printf("%+v\\n", masterpl)\n\t}\n```\n\nThen you get filled with parsed data structures. For master playlists you get ``Master`` struct with slice consists of pointers to ``Variant`` structures (which represent playlists to each bitrate).\nFor media playlist parser returns ``MediaPlaylist`` structure with slice of ``Segments``. Each segment is of ``MediaSegment`` type.\nSee ``structure.go`` or full documentation (link below).\n\nYou may use API methods to fill structures or create them manually to generate playlists. Example of media playlist generation:\n\n```go\n\tp, e := m3u8.NewMediaPlaylist(3, 10) // with window of size 3 and capacity 10\n\tif e != nil {\n\t\tpanic(fmt.Sprintf("Creating of media playlist failed: %s", e))\n\t}\n\tfor i := 0; i < 5; i++ {\n\t\te = p.Append(fmt.Sprintf("test%d.ts", i), 6.0, "")\n\t\tif e != nil {\n\t\t\tpanic(fmt.Sprintf("Add segment #%d to a media playlist failed: %s", i, e))\n\t\t}\n\t}\n\tfmt.Println(p.Encode().String())\n```\n\nCustom Tags\n-----------\n\nM3U8 supports parsing and writing of custom tags. You must implement both the `CustomTag` and `CustomDecoder` interface for each custom tag that may be encountered in the playlist. Look at the template files in `example/template/` for examples on parsing custom playlist and segment tags.\n\nLibrary structure\n-----------------\n\nLibrary has compact code and bundled in three files:\n\n* `structure.go` \xe2\x80\x94 declares all structures related to playlists and their properties\n* `reader.go` \xe2\x80\x94 playlist parser methods\n* `writer.go` \xe2\x80\x94 playlist generator methods\n\nEach file has own test suite placed in `*_test.go` accordingly.\n\nRelated links\n-------------\n\n* http://en.wikipedia.org/wiki/M3U\n* http://en.wikipedia.org/wiki/HTTP_Live_Streaming\n* http://gonze.com/playlists/playlist-format-survey.html\n\nLibrary usage\n-------------\n\nThis library was successfully used in streaming software developed for company where I worked several\nyears ago. It was tested then in generating of VOD and Live streams and parsing of Widevine Live streams.\nAlso the library used in opensource software so you may look at these apps for usage examples:\n\n* [HLS downloader](https://github.com/kz26/gohls)\n* [Another HLS downloader](https://github.com/Makombo/hlsdownloader)\n* [HLS utils](https://github.com/archsh/hls-utils)\n* [M3U8 reader](https://github.com/jeongmin/m3u8-reader)\n\nProject status [![Go Report Card](https://goreportcard.com/badge/grafov/m3u8)](https://goreportcard.com/report/grafov/m3u8)\n--------------\n\n[![Build Status](https://travis-ci.org/grafov/m3u8.png?branch=master)](https://travis-ci.org/grafov/m3u8) [![Build Status](https://cloud.drone.io/api/badges/grafov/m3u8/status.svg)](https://cloud.drone.io/grafov/m3u8) [![Coverage Status](https://coveralls.io/repos/github/grafov/m3u8/badge.svg?branch=master)](https://coveralls.io/github/grafov/m3u8?branch=master)\n\n[![DeepSource](https://static.deepsource.io/deepsource-badge-light.svg)](https://deepsource.io/gh/grafov/m3u8/?ref=repository-badge)\n\nCode coverage: https://gocover.io/github.com/grafov/m3u8\n\nProject maintainers:\n\n* Lei Gao @leikao\n* Bradley Falzon @bradleyfalzon\n* Alexander Grafov @grafov\n\nRoadmap\n-------\n\nTo version 1.0:\n\n* Support all M3U8 tags up to latest version of specs.\n* Code coverage by unit tests up to 90%\n\nFYI M3U8 parsing/generation in other languages\n------------------------------------------\n\n* https://github.com/globocom/m3u8 in Python\n* https://github.com/zencoder/m3uzi in Ruby\n* https://github.com/Jeanvf/M3U8Paser in Objective C\n* https://github.com/tedconf/node-m3u8 in Javascript\n* http://sourceforge.net/projects/m3u8parser/ in Java\n* https://github.com/karlll/erlm3u8 in Erlang\n'