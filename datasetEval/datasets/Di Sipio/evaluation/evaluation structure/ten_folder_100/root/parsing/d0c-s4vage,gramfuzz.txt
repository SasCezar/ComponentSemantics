b'# gramfuzz\n\n[![Master Build Status](https://travis-ci.org/d0c-s4vage/gramfuzz.svg?branch=master)](https://travis-ci.org/d0c-s4vage/gramfuzz)\n[![PyPI Statistics](https://img.shields.io/pypi/dm/gramfuzz)](https://pypistats.org/packages/gramfuzz)\n[![Latest Release](https://img.shields.io/pypi/v/gramfuzz)](https://pypi.python.org/pypi/gramfuzz/)\n\n`gramfuzz` is a grammar-based fuzzer that lets one define\ncomplex grammars to model text and binary data formats.\n\n- [Installation](#installation)\n- [Documentation](#documentation)\n- [TLDR Example](#tldr-example)\n- [More Examples](#more-examples)\n\n## Installation\n\nInstall via pip:\n\n```\npip install gramfuzz\n```\n\n## Documentation\n\nFor detailed documentation, please [view the full docs here](https://d0c-s4vage.github.io/gramfuzz/)\n\n## TLDR Example\n\n\nSuppose we define a grammar for generating names and their prefixes\nand suffixes:\n\n```python\n# names_grammar.py\nimport gramfuzz\nfrom gramfuzz.fields import *\n\nclass NRef(Ref):\n    cat = "name_def"\nclass NDef(Def):\n    cat = "name_def"\n\n\nDef("name",\n    Opt(NRef("name_title")),\n    NRef("personal_part"),\n    NRef("last_name"),\n    Opt(NRef("name_suffix")),\ncat="name", sep=" ")\nNDef("personal_part",\n    NRef("initial") | NRef("first_name"), Opt(NRef("personal_part")),\nsep=" ")\nNDef("last_name", Or(\n    "Blart", "Tralb"\n))\nNDef("name_suffix",\n    Opt(NRef("seniority")),\n    Or("Phd.", "CISSP", "MD.", "MBA", "NBA", "NFL", "WTF", "The Great"),\nsep=" ")\nNDef("seniority", Or("Sr.", "Jr."))\nNDef("name_title", Or(\n    "Sir", "Ms.", "Mr.", "Mrs.", "Senator", "Capt.", "Maj.", "Lt.", "President"\n))\nNDef("first_name", Or("Henry", "Susy"))\nNDef("initial",\n    String(min=1, max=2, charset=String.charset_alpha_upper), "."\n)\n```\n\nWe could then use this grammar like so:\n\n```python\nimport gramfuzz\n\nfuzzer = gramfuzz.GramFuzzer()\nfuzzer.load_grammar("names_grammar.py")\nnames = fuzzer.gen(cat="name", num=10)\nprint("\\n".join(names))\n```\n\nWhich would output something like this:\n\n```\nMs. Susy Henry Tralb\nLt. Henry Henry Tralb\nL. Tralb WTF\nMaj. L. W. N. Tralb\nZ. Tralb\nSenator C. K. Henry Blart\nHenry Tralb CISSP\nLt. Henry Tralb Jr. NBA\nMaj. Susy Tralb Sr. NBA\nHenry C. Blart WTF\n```\n\n## More Examples\n\nSee the examples (and example script) in the examples folder:\n\n```\n lptp [ tmp ]: git clone https://github.com/d0c-s4vage/gramfuzz\n lptp [ tmp ]: cd gramfuzz/examples\n lptp [ examples ]: ./example.py --help\nusage: gramfuzz/examples/example.py [-h] -g GRAMMAR [-n N] [-s RAND_SEED]\n                                    [--max-recursion R] [-o OUTPUT]\n\nThis script will generate N instances of the specified grammar.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -g GRAMMAR, --grammar GRAMMAR\n                        The grammar to load. One of: names,python27,roman_numeral,postal\n  -n N, --number N      The number of times to generate top-level nodes from the specified grammar(s) (default=1)\n  -s RAND_SEED, --seed RAND_SEED\n                        The random seed to initialize the PRNG with (default=None)\n  --max-recursion R     The maximum reference recursion depth allowed (default=10)\n  -o OUTPUT, --output OUTPUT\n                        The output file to output the generated data to (default=stdout)\n lptp [ examples ]: ./example.py -g postal -n 10 -s 1337 --max-recursion 5\nZ. Tralb\n69 Baker Street 8325U \nMalang, IL 64666-4973\nSenator Susy Henry Blart WTF\n56 Sesame Street \nYokohama, WV 49471-3667\nHenry I. Tralb Jr. CISSP\n63 Spooner Street 858H \nTehran, TX 27259-9556\nCapt. Henry Susy Blart Jr. Phd.\n65536 Jump Street \nMalang, ID 84108-0969\nSusy Blart\n0 Rainey Street \nWuhan, FL 16712-1095\nP. Blart NFL\n98 Wisteria Lane \nShenyang, NH 70126\nHenry Henry Blart Phd.\n30 Rainey Street \nMadras, GA 90915\nSenator Henry E. Tralb\n38 Spooner Street \nTianjin, CT 37211\nMaj. Henry Tralb\n70 Rainey Street 458W \nHongKong, OK 40689\nMrs. Henry Blart\n11 Sesame Street \nBeijing, MT 58689-7258\n```\n'