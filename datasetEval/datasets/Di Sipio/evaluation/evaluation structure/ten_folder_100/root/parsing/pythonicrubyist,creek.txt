b'[![version](https://badge.fury.io/rb/creek.svg)](https://badge.fury.io/rb/creek)\n[![downloads](https://ruby-gem-downloads-badge.herokuapp.com/creek?type=total&total_label=downloads)](https://ruby-gem-downloads-badge.herokuapp.com/creek?type=total&total_label=downloads)\n\n# Creek - Stream parser for large Excel (xlsx and xlsm) files.\n\nCreek is a Ruby gem that provides a fast, simple and efficient method of parsing large Excel (xlsx and xlsm) files.\n\n\n## Installation\n\nCreek can be used from the command line or as part of a Ruby web framework. To install the gem using terminal, run the following command:\n\n```\ngem install creek\n```\n\nTo use it in Rails, add this line to your Gemfile:\n\n```ruby\ngem \'creek\'\n```\n\n## Basic Usage\nCreek can simply parse an Excel file by looping through the rows enumerator:\n\n```ruby\nrequire \'creek\'\ncreek = Creek::Book.new \'spec/fixtures/sample.xlsx\'\nsheet = creek.sheets[0]\n\nsheet.rows.each do |row|\n  puts row # => {"A1"=>"Content 1", "B1"=>nil, "C1"=>nil, "D1"=>"Content 3"}\nend\n\nsheet.simple_rows.each do |row|\n  puts row # => {"A"=>"Content 1", "B"=>nil, "C"=>nil, "D"=>"Content 3"}\nend\n\nsheet.rows_with_meta_data.each do |row|\n  puts row # => {"collapsed"=>"false", "customFormat"=>"false", "customHeight"=>"true", "hidden"=>"false", "ht"=>"12.1", "outlineLevel"=>"0", "r"=>"1", "cells"=>{"A1"=>"Content 1", "B1"=>nil, "C1"=>nil, "D1"=>"Content 3"}}\nend\n\nsheet.simple_rows_with_meta_data.each do |row|\n  puts row # => {"collapsed"=>"false", "customFormat"=>"false", "customHeight"=>"true", "hidden"=>"false", "ht"=>"12.1", "outlineLevel"=>"0", "r"=>"1", "cells"=>{"A"=>"Content 1", "B"=>nil, "C"=>nil, "D"=>"Content 3"}}\nend\n\nsheet.state   # => \'visible\'\nsheet.name    # => \'Sheet1\'\nsheet.rid     # => \'rId2\'\n```\n\n## Filename considerations\nBy default, Creek will ensure that the file extension is either *.xlsx or *.xlsm, but this check can be circumvented as needed:\n\n```ruby\npath = \'sample-as-zip.zip\'\nCreek::Book.new path, :check_file_extension => false\n```\n\nBy default, the Rails [file_field_tag](http://api.rubyonrails.org/classes/ActionView/Helpers/FormTagHelper.html#method-i-file_field_tag) uploads to a temporary location and stores the original filename with the StringIO object. (See [this section](http://guides.rubyonrails.org/form_helpers.html#uploading-files) of the Rails Guides for more information.)\n\nCreek can parse this directly without the need for file upload gems such as Carrierwave or Paperclip by passing the original filename as an option:\n\n```ruby\n# Import endpoint in Rails controller\ndef import\n  file = params[:file]\n  Creek::Book.new file.path, check_file_extension: false\nend\n```\n\n## Parsing images\nCreek does not parse images by default. If you want to parse the images,\nuse `with_images` method before iterating over rows to preload images information. If you don\'t call this method, Creek will not return images anywhere.\n\nCells with images will be an array of Pathname objects.\nIf an image is spread across multiple cells, same Pathname object will be returned for each cell.\n\n```ruby\nsheet.with_images.rows.each do |row|\n  puts row # => {"A1"=>[#<Pathname:/var/folders/ck/l64nmm3d4k75pvxr03ndk1tm0000gn/T/creek__drawing20161101-53599-274q0vimage1.jpeg>], "B2"=>"Fluffy"}\nend\n```\n\nImages for a specific cell can be obtained with images_at method:\n\n```ruby\nputs sheet.images_at(\'A1\') # => [#<Pathname:/var/folders/ck/l64nmm3d4k75pvxr03ndk1tm0000gn/T/creek__drawing20161101-53599-274q0vimage1.jpeg>]\n\n# no images in a cell\nputs sheet.images_at(\'C1\') # => nil\n```\n\nCreek will most likely return nil for a cell with images if there is no other text cell in that row - you can use *images_at* method for retrieving images in that cell.\n\n## Remote files\n\n```ruby\nremote_url = \'http://dev-builds.libreoffice.org/tmp/test.xlsx\'\nCreek::Book.new remote_url, remote: true\n```\n\n## Contributing\n\nContributions are welcomed. You can fork a repository, add your code changes to the forked branch, ensure all existing unit tests pass, create new unit tests which cover your new changes and finally create a pull request.\n\nAfter forking and then cloning the repository locally, install the Bundler and then use it\nto install the development gem dependencies:\n\n```\ngem install bundler\nbundle install\n```\n\nOnce this is complete, you should be able to run the test suite:\n\n```\nrake\n```\n\n## Bug Reporting\n\nPlease use the [Issues](https://github.com/pythonicrubyist/creek/issues) page to report bugs or suggest new enhancements.\n\n\n## License\n\nCreek has been published under [MIT License](https://github.com/pythonicrubyist/creek/blob/master/LICENSE.txt)\n'