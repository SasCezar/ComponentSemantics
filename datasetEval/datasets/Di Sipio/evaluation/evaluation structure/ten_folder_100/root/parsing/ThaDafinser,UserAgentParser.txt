b'# UserAgentParser\n\n[![Build Status](https://travis-ci.org/ThaDafinser/UserAgentParser.svg?branch=master)](https://travis-ci.org/ThaDafinser/UserAgentParser)\n[![Code Coverage](https://scrutinizer-ci.com/g/ThaDafinser/UserAgentParser/badges/coverage.png?b=master)](https://scrutinizer-ci.com/g/ThaDafinser/UserAgentParser/?branch=master)\n[![Scrutinizer Code Quality](https://scrutinizer-ci.com/g/ThaDafinser/UserAgentParser/badges/quality-score.png?b=master)](https://scrutinizer-ci.com/g/ThaDafinser/UserAgentParser/?branch=master)\n\n[![Latest Stable Version](https://poser.pugx.org/thadafinser/user-agent-parser/v/stable)](https://packagist.org/packages/thadafinser/user-agent-parser)\n[![Latest Unstable Version](https://poser.pugx.org/thadafinser/user-agent-parser/v/unstable)](https://packagist.org/packages/thadafinser/user-agent-parser) \n[![License](https://poser.pugx.org/thadafinser/user-agent-parser/license)](https://packagist.org/packages/thadafinser/user-agent-parser)\n[![Total Downloads](https://poser.pugx.org/thadafinser/user-agent-parser/downloads)](https://packagist.org/packages/thadafinser/user-agent-parser) \n\n`User agent` parsing is, was and will always be a painful thing.\n\nThe target of this package is to make it less painful, by providing an abstract layer for many user agent parsers.\n\nCurrently **11 local providers** and **6 HTTP providers** are available! [See the comparison list here](https://github.com/ThaDafinser/UserAgentParser#providers)\n\nSo you can\n- use multiple providers at the same time with the `Chain` provider\n- use local and/or HTTP API providers at the same time\n- switch between different parsers, without changing your code\n- compare the result of the different parsers\n- get always the same result model, regardless of which parser you use currently\n\nThe quality of this package is currently covered by\n- ***unit tests*** (373 tests, 746 assertions)\n- ***integration tests*** (86 tests, 310 assertions)\n- ***regular real result testing*** (the results of ***over 33.000 user agents*** are compared [here](http://thadafinser.github.io/UserAgentParserComparison/))\n\n## Try it out\n\n[LIVE test](http://useragent.mkf.solutions/)\n\n[Compare the detection results of the parsers](http://thadafinser.github.io/UserAgentParserComparison/)\n\n\n## Installation\n\nUsing composer is currently the only supported way to install this package.\n\n```\ncomposer require thadafinser/user-agent-parser\n```\n\n`Note:` to use local providers you need to install additional packages, which are listed inside the composer `suggests section`\n\n\n## Getting started\n\nYou need to register an API key or install an additional package (listed in the section `suggest` of `composer.json`)\n\n\n```php\nuse UserAgentParser\\Exception\\NoResultFoundException;\nuse UserAgentParser\\Provider\\WhichBrowser;\n\n$provider = new WhichBrowser();\n\ntry {\n    /* @var $result \\UserAgentParser\\Model\\UserAgent */\n    $result = $provider->parse(\'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.73 Safari/537.36\');\n} catch (NoResultFoundException $ex){\n    // nothing found\n}\n\nif($result->isBot() === true) {\n  // if one part has no result, it\'s always set not null\n  $result->getBot()->getName();\n  $result->getBot()->getType();\n} else {\n  // if one part has no result, it\'s always set not null\n  $result->getBrowser()->getName();\n  $result->getBrowser()->getVersion()->getComplete();\n\n  $result->getRenderingEngine()->getName();\n  $result->getRenderingEngine()->getVersion()->getComplete();\n\n  $result->getOperatingSystem()->getName();\n  $result->getOperatingSystem()->getVersion()->getComplete();\n\n  $result->getDevice()->getModel();\n  $result->getDevice()->getBrand();\n  $result->getDevice()->getType();\n  $result->getDevice()->getIsMobile();\n  $result->getDevice()->getIsTouch();\n}\n```\n\n## Use cases\n\n### Bot or human\n\n```php\n// initialisation see Getting started\nif($result->isBot() === true) {\n    // do something special with the bot\n}\n```\n\n### Mobile detection\n\n```php\n// initialisation see Getting started\nif($result->isMobile() === true) {\n    // redirect to the the mobile optimized page or suggest the other to download your app\n    // NOTE mobile means not "phone". It can be any moveable device, e.g. tablet, media player, watch, ...\n}\n```\n\n## Providers\n\nUserAgentParser comes with local and http providers\n\nSee detailed documenation here\n\n[local providers](docs/01-local-providers.md)\n\n[http providers](docs/02-http-providers.md)\n\n\n| Name                   | Type | Browser | Engine | Operating system | Device model | Device brand | Device type | Is mobile | Is bot | Bot name | Bot type | Comment |\n| ---------------------- |----- | ------- | ------ | ---------------- | ------------ | ------------ | ----------- | --------- | ------ | -------- | -------- |-------- |\n| BrowscapFull           | local | x | x | x | x | x | x | x | x | x | x |   |\n| BrowscapLite           | local | x |   | x |   |   | x | x |   |   |   |   |\n| BrowscapPhp            | local | x |   | x |   |   | x | x | x | x |   |   |\n| DonatjUAParser         | local | x |   |   |   |   |   |   |   |   |   |   |\n| Endorphin              | local | x |   | x |   |   | x |   | x | x | x |   |\n| HandsetDetection       | local | x |   | x | x | x |   |   |   |   |   |   |\n| JenssegersAgent        | local | x |   | x |   |   |   | x | x | x |   | Based on MobileDetect |\n| PiwikDeviceDetector    | local | x | x | x | x | x | x | x | x | x | x |   |\n| SinergiBrowserDetector | local | x |   | x | x |   |   | x | x |   |   |   |\n| UAParser               | local | x |   | x | x | x |   |   | x | x |   |   |\n| WhichBrowser           | local | x |   | x | x | x | x | x | x | x |   |   |\n| Woothee                | local | x |   |   |   |   | x |   | x | x |   |   |\n| Zsxsoft                | local | x |   | x | x | x |   |   |   |   |   |   |\n| DeviceAtlasCom         | http  | x | x | x |   |   | x |   |   |   |   | free available |\n| FiftyOneDegreesCom     | http  | x | x | x | x | x | x | x | x |   |   | free unlimited |\n| NeutrinoApiCom         | http  | x |   | x | x | x | x | x | x | x |   | 25/day free |\n| UdgerCom               | http  | x | x | x |   |   | x |   | x |   |   | 500/month free (API key only for one month valid!) |\n| UserAgentApiCom        | http  | x | x |   |   |   | x |   | x | x |   | 1000/day free |\n| WhatIsMyBrowserCom     | http  | x |   | x |   |   |   |   |   |   |   | 500/month free |\n\n### Local providers\n\nLocal providers are (most time) faster then HTTP providers and dont require a working internet connection.\nBut you need to update them yourself from time to time, to make sure you detect the latest UAs\n\n- BrowscapFull\n- BrowscapLite\n- BrowscapPhp\n- DonatjUAParser\n- Endorphin\n- HandsetDetection\n- JenssegersAgent\n- PiwikDeviceDetector\n- SinergiBrowserDetector\n- UAParser\n- WhichBrowser\n- Woothee\n- Zsxsoft\n\n\n### HTTP providers (API)\n\nHTTP providers are simple to use, since you need only an API key to get started.\nBut they require (always) a working internet connection.\n\n- Http\\DeviceAtlasCom\n- Http\\FiftyOneDegreesCom\n- Http\\NeutrinoApiCom\n- Http\\UdgerCom\n- Http\\UserAgentApiCom\n- Http\\WhatIsMyBrowserCom\n\n\n### Comparison matrix\n\nHere is a comparison matrix, with many analyzed UserAgent strings, to help you device which provider fits your needs.\nEvery provider has it\'s strengh and weakness, so it will depend on your need, which one you should use.\n\n[Go to the comparison](http://thadafinser.github.io/UserAgentParserComparison/)\n\n### Overview\n\n### Single provider\n\n```php\nrequire \'vendor/autoload.php\';\n\nuse UserAgentParser\\Provider;\n\n$userAgent = \'Mozilla/5.0 (iPod; U; CPU iPhone OS 4_3_5 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5\';\n\n$provider = new Provider\\PiwikDeviceDetector();\n\n/* @var $result \\UserAgentParser\\Model\\UserAgent */\n$result = $provider->parse($userAgent);\n// optional add all headers, to improve the result further\n// $result = $provider->parse($userAgent, getallheaders());\n\n$result->getBrowser()->getName(); // Mobile Safari\n$result->getOperatingSystem()->getName(); // iOS\n$result->getDevice()->getBrand(); // iPod Touch\n$result->getDevice()->getBrand(); // Apple\n$result->getDevice()->getType(); // portable media player\n\n$resultArray = $result->toArray();\n```\n\n### Chain provider\n\nThis is very useful to improve your results.\nThe chain provider starts with the first provider and checks if there is a result, if not it takes the next one and so on.\nIf none of them have a result, it will throw a NoResultException like a single provider.\n\n```php\nrequire \'vendor/autoload.php\';\n\nuse UserAgentParser\\Provider;\n\n$userAgent = \'Mozilla/5.0 (iPod; U; CPU iPhone OS 4_3_5 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5\';\n\n$chain = new Provider\\Chain([\n    new Provider\\PiwikDeviceDetector(),\n    new Provider\\WhichBrowser(),\n    new Provider\\UAParser(),\n    new Provider\\Woothee(),\n    new Provider\\DonatjUAParser()\n]);\n\n/* @var $result \\UserAgentParser\\Model\\UserAgent */\n$result = $chain->parse($userAgent);\n// optional add all headers, to improve the result further (used currently only by WhichBrowser)\n//$result = $chain->parse($userAgent, getallheaders());\n\n$result->getBrowser()->getName(); // Mobile Safari\n\n$result->getOperatingSystem()->getName(); // iOS\n\n$result->getDevice()->getBrand(); // iPod Touch\n$result->getDevice()->getBrand(); // Apple\n$result->getDevice()->getType(); // portable media player\n\n$resultArray = $result->toArray();\n```\n'