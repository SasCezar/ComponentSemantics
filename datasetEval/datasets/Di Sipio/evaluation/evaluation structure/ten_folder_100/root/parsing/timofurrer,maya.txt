b"Maya: Datetimes for Humans\xe2\x84\xa2\n===========================\n\n.. image:: https://img.shields.io/pypi/v/maya.svg\n    :target: https://pypi.python.org/pypi/maya\n\n.. image:: https://github.com/timofurrer/maya/workflows/Continuous%20Integration%20and%20Deployment/badge.svg\n    :target: https://github.com/timofurrer/maya/actions\n\n\nDatetimes are very frustrating to work with in Python, especially when dealing\nwith different locales on different systems. This library exists to make the\nsimple things **much** easier, while admitting that time is an illusion\n(timezones doubly so).\n\nDatetimes should be interacted with via an API written for humans.\n\nMaya is mostly built around the headaches and use-cases around parsing datetime data from websites.\n\n\n\xe2\x98\xa4 Basic Usage of Maya\n---------------------\n\nBehold, datetimes for humans!\n\n.. code-block:: pycon\n\n    >>> now = maya.now()\n    <MayaDT epoch=1481850660.9>\n\n    >>> tomorrow = maya.when('tomorrow')\n    <MayaDT epoch=1481919067.23>\n\n    >>> tomorrow.slang_date()\n    'tomorrow'\n\n    >>> tomorrow.slang_time()\n    '23 hours from now'\n\n    # Also: MayaDT.from_iso8601(...)\n    >>> tomorrow.iso8601()\n    '2017-02-10T22:17:01.445418Z'\n\n    # Also: MayaDT.from_rfc2822(...)\n    >>> tomorrow.rfc2822()\n    'Fri, 10 Feb 2017 22:17:01 GMT'\n\n    # Also: MayaDT.from_rfc3339(...)\n    >>> tomorrow.rfc3339()\n    '2017-02-10T22:17:01.44Z'\n\n    >>> tomorrow.datetime()\n    datetime.datetime(2016, 12, 16, 15, 11, 30, 263350, tzinfo=<UTC>)\n\n    # Automatically parse datetime strings and generate naive datetimes.\n    >>> scraped = '2016-12-16 18:23:45.423992+00:00'\n    >>> maya.parse(scraped).datetime(to_timezone='US/Eastern', naive=True)\n    datetime.datetime(2016, 12, 16, 13, 23, 45, 423992)\n\n    >>> rand_day = maya.when('2011-02-07', timezone='US/Eastern')\n    <MayaDT epoch=1297036800.0>\n\n    # Maya speaks Python.\n    >>> m = maya.MayaDT.from_datetime(datetime.utcnow())\n    >>> print(m)\n    Wed, 20 Sep 2017 17:24:32 GMT\n\n    >>> m = maya.MayaDT.from_struct(time.gmtime())\n    >>> print(m)\n    Wed, 20 Sep 2017 17:24:32 GMT\n\n    >>> m = maya.MayaDT(time.time())\n    >>> print(m)\n    Wed, 20 Sep 2017 17:24:32 GMT\n\n    >>> rand_day.day\n    7\n\n    >>> rand_day.add(days=10).day\n    17\n\n    # Always.\n    >>> rand_day.timezone\n    UTC\n\n    # Range of hours in a day:\n    >>> maya.intervals(start=maya.now(), end=maya.now().add(days=1), interval=60*60)\n    <generator object intervals at 0x105ba5820>\n\n    # snap modifiers\n    >>> dt = maya.when('Mon, 21 Feb 1994 21:21:42 GMT')\n    >>> dt.snap('@d+3h').rfc2822()\n    'Mon, 21 Feb 1994 03:00:00 GMT'\n\n\xe2\x98\xa4 Advanced Usage of Maya\n------------------------\n\nIn addition to timestamps, Maya also includes a wonderfully powerful ``MayaInterval`` class, which represents a range of time (e.g. an event). With this class, you can perform a multitude of advanced calendar calculations with finesse and ease.\n\nFor example:\n\n.. code-block:: pycon\n\n    >>> from maya import MayaInterval\n\n    # Create an event that is one hour long, starting now.\n    >>> event_start = maya.now()\n    >>> event_end = event_start.add(hours=1)\n\n    >>> event = MayaInterval(start=event_start, end=event_end)\n\nFrom here, there are a number of methods available to you, which you can use to compare this event to another event.\n\n\n\n\xe2\x98\xa4 Why is this useful?\n---------------------\n\n- All timezone algebra will behave identically on all machines, regardless of system locale.\n- Complete symmetric import and export of both ISO 8601 and RFC 2822 datetime stamps.\n- Fantastic parsing of both dates written for/by humans and machines (``maya.when()`` vs ``maya.parse()``).\n- Support for human slang, both import and export (e.g. `an hour ago`).\n- Datetimes can very easily be generated, with or without tzinfo attached.\n- This library is based around epoch time, but dates before Jan 1 1970 are indeed supported, via negative integers.\n- Maya never panics, and always carries a towel.\n\n\n\xe2\x98\xa4 What about Delorean_, Arrow_, & Pendulum_?\n-----------------------------------------\n\nAll these projects complement each other, and are friends. Pendulum, for example, helps power Maya's parsing.\n\nArrow, for example, is a fantastic library, but isn't what I wanted in a datetime library. In many ways, it's better than Maya for certain things. In some ways, in my opinion, it's not.\n\nI simply desire a sane API for datetimes that made sense to me for all the things I'd ever want to do\xe2\x80\x94especially when dealing with timezone algebra. Arrow doesn't do all of the things I need (but it does a lot more!). Maya does do exactly what I need.\n\nI think these projects complement each-other, personally. Maya is great for parsing websites, and dealing with calendar events!\n\n.. _Delorean: https://delorean.readthedocs.io/\n.. _Arrow: https://arrow.readthedocs.io/\n.. _Pendulum: https://pendulum.eustace.io/\n\n\n\xe2\x98\xa4 Installing Maya\n-----------------\n\nInstallation is easy, with:\n\n    $ pip install maya\n\n\n\xe2\x98\xa4 Demo\n------\n\nTry ``maya`` interactively using this online demo:\n\n.. image:: https://user-images.githubusercontent.com/1155573/49400125-16e73500-f722-11e8-9275-e1d7eb3bbf99.png\n    :target: https://notebooks.ai/demo/gh/kennethreitz/maya\n    :alt: Open Live Demo\n\n\nHow to Contribute\n-----------------\n\n#. Check for open issues or open a fresh issue to start a discussion around a feature idea or a bug.\n#. Fork `the repository`_ on GitHub to start making your changes to the **master** branch (or branch off of it).\n#. Write a test which shows that the bug was fixed or that the feature works as expected.\n#. Send a pull request and bug the maintainer until it gets merged and published. :)\n\n.. _`the repository`: http://github.com/timofurrer/maya\n"