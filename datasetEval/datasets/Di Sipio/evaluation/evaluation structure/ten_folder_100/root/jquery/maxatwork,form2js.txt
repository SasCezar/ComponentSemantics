b'form2js\n-------\n\nConvenient way to collect **structured** form data into JavaScript object.\n[Example](http://form2js.googlecode.com/hg/example/test.html).\nBecause everything is better with jQuery, jQuery plugin added, check out jquery.toObject.js.\nIf you have any questions/suggestions, find out something weird or illogical - feel free to post an issue.\n\n**Warning!** form2object.js and form2object function renamed to form2js.js and form2js respectively.\nOld names are in v1.0 tag.\n\n\nDetails\n=======\n\nThis is **not** a serialization library.\nLibrary used in example for JSON serialization is [http://www.json.org/js.html](http://www.json.org/js.html)\nStructure of resulting object defined by _name_ attribute of form fields.\nSee examples below.\nAll this library does is collect form data and put it in a javascript object.\nObviously you can get a JSON/XML/etc string by serializing it, but that\'s not its only purpose.\n\n\nUsage\n=====\n\n``` javascript\nform2js(rootNode, delimiter, skipEmpty, nodeCallback, useIdIfEmptyName)\n```\n\nValues of all inputs under the _rootNode_ will be collected into one object.\nskipping empty inputs if _skipEmpty_ not false.\n\n\n### Objects/nested objects\n\nStructure of resulting object defined in _name_ attributes of form fields (or _id_ if _name_ is empty and _useIdIfEmptyName_ parameter set to _true_).\n_delimiter_ is "." (dot) by default, but can be changed.\n\n``` html\n<input type="text" name="person.name.first" value="John" />\n<input type="text" name="person.name.last" value="Doe" />\n```\n\nbecomes\n\n``` json\n{\n  "person": {\n    "name": {\n      "first": "John",\n      "last": "Doe"\n    }\n  }\n}\n```\n\n\n### Arrays\n\nSeveral fields with the same name with brackets defines array of values.\n\n``` html\n<label><input type="checkbox" name="person.favFood[]" value="steak" checked="checked" /> Steak</label>\n<label><input type="checkbox" name="person.favFood[]" value="pizza"/> Pizza</label>\n<label><input type="checkbox" name="person.favFood[]" value="chicken" checked="checked" /> Chicken</label>\n```\n\nbecomes\n\n``` json\n{\n    "person": {\n        "favFood": [ "steak", "chicken" ]\n    }\n}\n```\n\n### Arrays of objects/nested objects\nSame index means same item in resulting array.\nIndex doesn\'t specify order (order of appearance in document will be used).\n\n``` html\n<dl>\n    <dt>Give us your five friends\' names and emails</dt>\n    <dd>\n        <label>Email <input type="text" name="person.friends[0].email" value="agent.smith@example.com" /></label>\n        <label>Name <input type="text" name="person.friends[0].name" value="Smith Agent"/></label>\n    </dd>\n    <dd>\n        <label>Email <input type="text" name="person.friends[1].email" value="n3o@example.com" /></label>\n        <label>Name <input type="text" name="person.friends[1].name" value="Thomas A. Anderson" /></label>\n    </dd>\n</dl>\n```\n\nbecomes\n\n``` json\n{\n    "person" :\n    {\n        "friends" : [\n            { "email" : "agent.smith@example.com", "name" : "Smith Agent" },\n            { "email" : "n3o@example.com", "name" : "Thomas A. Anderson" }\n        ]\n    }\n}\n```\n\n\n### Rails-style notation\n\nIf array index starts with [a-zA-Z_], it will be treated as field of object.\n\n``` html\n<dl>\n    <dt>Rails-style test</dt>\n    <dd>\n        <label>rails[field1][foo]<input type="text" name="rails[field1][foo]" value="baz" /></label>\n        <label>rails[field1][bar]<input type="text" name="rails[field1][bar]" value="qux" /></label>\n    </dd>\n    <dd>\n        <label>rails[field2][foo]<input type="text" name="rails[field2][foo]" value="baz" /></label>\n        <label>rails[field2][bar]<input type="text" name="rails[field2][bar]" value="qux" /></label>\n    </dd>\n</dl>\n```\n\nwill give us:\n\n``` json\n{\n    "rails": {\n        "field1": {\n            "foo": "baz",\n            "bar": "qux"\n        },\n        "field2": {\n            "foo": "baz",\n            "bar": "qux"\n        }\n    }\n}\n```\n\n\n### Custom fields\n\nYou can implement custom nodeCallback function (passed as 4th parameter to `form2object()`) to extract custom data:\n\n``` html\n<dl id="dateTest">\n<dt>Date of birth:</dt>\n<dd data-name="person.dateOfBirth" class="datefield">\n\t<select name="person.dateOfBirth.month">\n\t\t<option value="01">January</option>\n\t\t<option value="02">February</option>\n\t\t<option value="03">March</option>\n\t\t<option value="04">April</option>\n\t\t<option value="05">May</option>\n\t\t<option value="06">June</option>\n\t\t<option value="07">July</option>\n\t\t<option value="08">August</option>\n\t\t<option value="09">September</option>\n\t\t<option value="10">October</option>\n\t\t<option value="11">November</option>\n\t\t<option value="12">December</option>\n\t</select>\n\t<input type="text" name="person.dateOfBirth.day" value="1" />\n\t<input type="text" name="person.dateOfBirth.year" value="2011" />\n</dd>\n</dl>\n\n<script type="text/javascript">\n\tfunction processDate(node)\n\t{\n\t\tvar dataName = node.getAttribute ? node.getAttribute(\'data-name\') : \'\',\n\t\t    dayNode,\n\t\t    monthNode,\n\t\t    yearNode,\n\t\t    day,\n\t\t    year,\n\t\t    month;\n\n\t\tif (dataName && dataName != \'\' && node.className == \'datefield\')\n\t\t{\n\t\t\tdayNode = node.querySelector(\'input[name="\'+dataName + \'.day"]\');\n\t\t\tmonthNode = node.querySelector(\'select[name="\'+dataName + \'.month"]\');\n\t\t\tyearNode = node.querySelector(\'input[name="\'+dataName + \'.year"]\');\n\n\t\t\tday = dayNode.value;\n\t\t\tyear = yearNode.value;\n\t\t\tmonth = monthNode.value;\n\n\t\t\treturn { name: dataName, value:  year + \'-\' + month + \'-\' + day};\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tvar formData = form2object(\'dateTest\', \'.\', true, processDate);\n</script>\n```\n\nusing `processDate()` callback `formData` will contain\n\n``` json\n{\n\t"person": {\n\t\t"dateOfBirth": "2011-01-12"\n\t}\n}\n```\n\n\nWhy not `.serializeArray()`?\n============================\n\nJQuery\'s `.serializeArray()` works a bit different.\nIt makes this structure from markup in "Arrays of objects/nested objects" example:\n\n``` json\n[\n    { "person.friends[0].email" : "agent.smith@example.com" },\n    { "person.friends[0].name" : "Smith Agent" },\n    { "person.friends[1].email" : "n3o@example.com" },\n    { "person.friends[1].name" : "Thomas A. Anderson" }\n]\n```\n'