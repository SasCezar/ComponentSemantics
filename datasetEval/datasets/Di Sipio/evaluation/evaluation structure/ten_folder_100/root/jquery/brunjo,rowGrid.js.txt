b'# rowGrid.js\n**rowGrid.js is a small, lightweight (~1000 bytes gzipped) jQuery plugin for placing images (or other items) in  straight rows.**\n\nThe grid is similar to grids on Google Image Search, flickr, shutterstock and Google+ images.\n\nFeatures:\n\n * responsive\n * infinite scrolling\n * support for all modern browsers and IE >= 8\n\n**A vanilla JavaScript version is available that doesn\'t require jQuery: https://github.com/brunjo/rowGrid**\n\n[![Example Grid](http://brunjo.github.io/rowGrid.js/example.png)][2]\n\nDo you like this project? Follow me on Twitter [@3runjo][1].\n\n## How does it work?\nAll items must have the **same height** but the **width can be variable**. RowGrid.js justifies the items in straight rows so that the width of the rows equals the width of the container/parent element.\nAt first rowGrid.js adjusts the margin between the items. If this is not enough rowGrid.js scales down the items.\n\n## Demos & Examples\nExamples with explanation: http://brunjo.github.io/rowGrid.js/\n\nReal world example: https://www.pexels.com/\n\n## Installation\nRowGrid.js requires jQuery 1.7 or above.\n```HTML\n<script src="path/to/jquery.min.js"></script>\n<script src="path/to/jquery.row-grid.min.js"></script>\n```\n\nAlternativlly, if you don\'t want to host rowGrid.js yourself, you can use cdnjs: https://cdnjs.com/libraries/rowgrid.js\n\nYou can also install it with Bower or npm:\n* Install with [Bower](http://bower.io): `bower install rowGrid.js`.\n* Install with [npm](https://www.npmjs.com): `npm install rowgrid.js`.\n\n## Usage\nIt is important that you either **declare the width and height as attributes** on the img tag or that you wait until the images are loaded before you start rowGrid.js.\n\nHTML:\n```HTML\n<div class="container">\n  <div class="item">\n    <img src="path/to/image" width="320" height="200" />\n  </div>\n  <div class="item">\n    <img src="path/to/image" width="290" height="200" />\n  </div>\n  ...\n</div>\n```\nJS:\n```JS\nvar options = {minMargin: 10, maxMargin: 35, itemSelector: ".item"};\n$(".container").rowGrid(options);\n```\n\n### Endless Scrolling\nJS:\n```JS\n// append new items\n$(".container").append("<div class=\'item\'><img src=\'http://placehold.it/310x200\' /></div>");\n// arrange appended items\n$(".container").rowGrid("appended");\n```\n\n## Options\n```JS\n$(".container").rowGrid({\n    itemSelector: ".item"\n    minMargin: 10,\n    maxMargin: 35,\n    resize: true,\n    lastRowClass: "last-row",\n    firstItemClass: "first-item"\n});\n```\n#### itemSelector (required)\n* **value:** ```string``` (CSS Selector)\n\nYou have to set this option. The selector have to reference to all grid items.\n#### minMargin\n* **value:** ```number``` or ```null```\n* **default value:** ```null```\n\nThis is the minimal horizontal margin between the items. The margin is only between the items not between the first/last item and the container.\n#### maxMargin\n* **value:** ```number``` or ```null```\n* **default value:** ```null```\n\nThis is the maximal horizontal margin between the items.\n#### resize\n* **value:** ```boolean```\n* **default value:** ```true```\n\nIf ```resize``` is set to true the layout updates on resize events. This is useful for responsive websites.\n#### lastRowClass\n* **value:** ```string```\n* **default value:** ```last-row```\n\nThe first item in the last row gets this class.\n#### firstItemClass\n* **value:** ```string``` or ```null```\n* **default value:** ```null```\n\nThe first item in every row gets this class.\n#### lastItemClass\n* **value:** ```string``` or ```null```\n* **default value:** ```null```\n\nThe last item in every row gets this class.\n\n\n  [1]: https://twitter.com/3runjo "@3runjo"\n  [2]: http://brunjo.github.io/rowGrid.js/ "Demos"\n'