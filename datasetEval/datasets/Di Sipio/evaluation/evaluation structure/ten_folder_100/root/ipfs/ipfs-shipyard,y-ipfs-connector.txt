b"# y-ipfs-connector\n\n# NOT BEING ACTIVELY MAINTAINED\n\n> IPFS Connector for [Yjs](https://github.com/y-js/yjs)\n\n([Demo video](https://t.co/jywinq2WlK))\n\n## Use it!\n\nRetrieve this with npm:\n\n```bash\n$ npm install y-ipfs-connector --save\n```\n\n\n## Example\n\n```js\n// you need to create and inject a IPFS object\nconst IPFS = require('ipfs')\n\nconst Y = require('yjs')\nrequire('y-ipfs-connector')(Y)\n\n// other Yjs deps:\nrequire('y-memory')(Y)\nrequire('y-array')(Y)\nrequire('y-text')(Y)\n\n\n// create IPFS node\nconst ipfs = new IPFS({\n  EXPERIMENTAL: {\n    pubsub: true // need this to work\n  }\n})\n\nY({\n  db: {\n    name: 'memory'\n  },\n  connector: {\n    name: 'ipfs', // use the IPFS connector\n    ipfs: ipfs, // inject the IPFS object\n    room: 'Textarea-example-dev'\n  },\n  sourceDir: '/bower_components', // location of the y-* modules\n  share: {\n    textarea: 'Text' // y.share.textarea is of type Y.Text\n  }\n}).then(function (y) {\n  // bind the textarea to a shared text element\n  y.share.textarea.bind(document.getElementById('textfield'))\n}\n```\n\n## Signature\n\n### `options.sign`\n\nYou can sign messages. For that, you have to provide a `sign` option, which needs to be a function that accepts a message (string) and calls back with a buffer containing the signature for it (string):\n\n```js\nY({\n  connector: {\n    name: 'ipfs',\n    sign: (m, callback) => { ... }\n    // ...\n  }\n  // ...\n})\n```\n\nUsing this, messages will be sent alongside with a signature, which can be validated.\n\n## `options.verifySignature`\n\nYou can also verify a signature for a given message by providing a function like this:\n\n```js\nY({\n  connector: {\n    name: 'ipfs',\n    verifySignature: (peer, message, signature, callback) => { ... }\n    // ...\n  }\n  // ...\n})\n```\n\n## `options.encode`\n\nOptional function that receives the message and encodes it. Useful if you want to encrypt the content before sending.\n\n```js\noptions.encode = (message) => {\n  return encrypt(message)\n}\n```\n\n## `options.decode`\n\nOptional function that receives the message and decodes it. Useful if you want to decrypt the content after receiving.\n\n```js\noptions.decode = (message) => {\n  return decrypt(message)\n}\n```\n\n## Debug\n\nActivate `y-ipfs-connector` on [`debug`](https://github.com/visionmedia/debug#readme) to see log messages.\n\n# License\n\nMIT\n\n## Contribute\n\nFeel free to join in. All welcome. Open an [issue](https://github.com/pgte/y-ipfs/issues)!\n\nThis repository falls under the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/contributing.md)\n\n## License\n\n[MIT](LICENSE)\n"