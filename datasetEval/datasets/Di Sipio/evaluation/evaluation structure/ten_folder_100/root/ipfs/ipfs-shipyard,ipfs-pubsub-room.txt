b"# ipfs-pubsub-room\n\n[![made by Protocol Labs](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](https://protocol.ai)\n[![Freenode](https://img.shields.io/badge/freenode-%23ipfs-blue.svg?style=flat-square)](http://webchat.freenode.net/?channels=%23ipfs)\n\n[![Build Status](https://travis-ci.org/ipfs-shipyard/ipfs-pubsub-room.svg?branch=master)](https://travis-ci.org/ipfs-shipyard/ipfs-pubsub-room)\n\n> Creates a room based on an IPFS pub-sub channel. Emits membership events, listens for messages, broadcast and direct messeges to peers.\n\n([Demo video](https://t.co/HNYQGE4D4P))\n\n## js-ipfs\n\nThis package has been tested with js-ipfs version __0.32.0__.\n\n## Install\n\n```bash\n$ npm install ipfs-pubsub-room\n```\n\n## Use\n\n```js\nconst Room = require('ipfs-pubsub-room')\nconst IPFS = require('ipfs')\nconst ipfs = new IPFS({\n  EXPERIMENTAL: {\n    pubsub: true\n  },\n  config: {\n    Addresses: {\n      Swarm: [\n        '/dns4/ws-star.discovery.libp2p.io/tcp/443/wss/p2p-websocket-star'\n      ]\n    }\n  }\n})\n\n// IPFS node is ready, so we can start using ipfs-pubsub-room\nipfs.on('ready', () => {\n  const room = Room(ipfs, 'room-name')\n\n  room.on('peer joined', (peer) => {\n    console.log('Peer joined the room', peer)\n  })\n\n  room.on('peer left', (peer) => {\n    console.log('Peer left...', peer)\n  })\n\n  // now started to listen to room\n  room.on('subscribed', () => {\n    console.log('Now connected!')\n  })\n})\n```\n\n## API\n\n### Room (ipfs:IPFS, roomName:string, options:object)\n\n* `ipfs`: IPFS object. Must have pubsub activated\n* `roomName`: string, global identifier for the room\n* `options`: object:\n  * `pollInterval`: interval for polling the pubsub peers, in ms. Defaults to 1000.\n\n```js\nconst room = Room(ipfs, 'some-room-name')\n```\n\n## room.broadcast(message)\n\nBroacasts message (string or buffer).\n\n## room.sendTo(peer, message)\n\nSends message (string or buffer) to peer.\n\n## async room.leave()\n\nLeaves room, stopping everything.\n\n## room.getPeers()\n\nReturns an array of peer identifiers (strings).\n\n## room.hasPeer(peer)\n\nReturns a boolean indicating if the given peer is present in the room.\n\n## room.on('message', (message) => {})\n\nListens for messages. A `message` is an object containing the following properties:\n\n* `from` (string): peer id\n* `data` (Buffer): message content\n\n## room.on('peer joined', (peer) => {})\n\nOnce a peer has joined the room.\n\n## room.on('peer left', (peer) => {})\n\nOnce a peer has left the room.\n\n## room.on('subscribed',() => {})\n\nOnce your program has subscribed the topic and announced through IPFS pubsub.\n\n## License\n\nISC\n"