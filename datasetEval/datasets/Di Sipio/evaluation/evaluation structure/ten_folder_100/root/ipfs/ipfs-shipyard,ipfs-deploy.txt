b'# ipfs-deploy\n\n[![standard-readme compliant](https://img.shields.io/badge/readme%20style-standard-brightgreen.svg?style=flat-square)](https://github.com/RichardLitt/standard-readme)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.io/)\n[![](https://img.shields.io/badge/freenode-%23ipfs-blue.svg?style=flat-square)](http://webchat.freenode.net/?channels=%23ipfs)\n[![Travis CI](https://flat.badgen.net/travis/ipfs-shipyard/ipfs-deploy)](https://travis-ci.com/ipfs-shipyard/ipfs-deploy)\n\n> Upload static website to IPFS pinning services and optionally update DNS.\n\n<p align="center">\n  <img src="https://user-images.githubusercontent.com/5447088/62481739-220bcc80-b7ab-11e9-8a9e-25f23ed92768.gif">\n</p>\n\nThe goal of `ipfs-deploy` is to make it as easy as possible to\n**deploy a static website to IPFS.**\n\n## Table of Contents\n\n1. [Install](#Install)\n    1. [No install](#No-install)\n2. [Usage](#Usage)\n    1. [Supported Pinning Services](#supported-pinning-services)\n    2. [Supported DNS Services](#supported-dns-providers)\n3. [API](#API)\n4. [Security](#Security)\n5. [Contributing](#Contributing)\n    1. [Contributors](#Contributors)\n    2. [Add a Pinning Service](#add-a-pinning-service)\n    3. [Add a DNS Provider](#add-a-dns-provider)\n6. [Users](#Users)\n7. [License](#License)\n\n## Install\n\n```bash\nnpm install -g ipfs-deploy\n```\n\nOr\n\n```bash\nyarn global add ipfs-deploy\n```\n\nYou can call it either as `ipd` or as `ipfs-deploy`:\n\n```bash\nipd public/\nipfs-deploy public/\n```\n\n### No install\n\nYou can run it directly with [npx](https://www.npmjs.com/package/npx \'npx\')\nwithout needing to install anything:\n\n```bash\nnpx ipfs-deploy _site\n```\n\nIt will deploy to a public pinning service and give you a link to\n`ipfs.io/ipfs/your-hash` so you can check it out.\n\n## Usage\n\nYou can get started just by typing out `ipd` and it will have smart defaults.\nBy default, it deploys to Infura, which doesn\'t need signup and you\'ll get a\nlink like `ipfs.io/ipfs/QmHash` that you can use to see if everything went ok.\n\nWhen you don\'t specify a path argument to deploy, `ipfs-deploy` tries to\nguess it for you based on the build directories used by the most popular static\nsite generators by the following order:\n\n| Path            | Static generators                       |\n| --------        | ---------------------------------       |\n| `_site`         | jekyll, hakyll, eleventy                |\n| `site`          | some others                             |\n| `public`        | gatsby, hugo                            |\n| `dist`          | nuxt                                    |\n| `output`        | pelican                                 |\n| `out`           | hexo                                    |\n| `build`         | create-react-app, metalsmith, middleman |\n| `website/build` | docusaurus                              |\n| `docs`          | many others                             |\n\nSome pinning services and DNS providers require signup and additional\nenvironment variables to be set. We support and use `.env` files. Read\nthe section bellow to find out about which services are supported and\nhow to ensable them.\n\nFor further information about the CLI, please run `ipfs-deploy --help`.\n\n### Supported Pinning Services\n\nSome things to keep in mind:\n\n-  Please note the `__` (double underscore) between some words (such as\nafter `PINATA` and `CLOUDFLARE`).\n-  **Don\'t** commit the `.env` file to source control unless you know what\nyou\'re doing.\n\nThese services are subject to their terms. Not a decentralization nirvana\nby any stretch of the imagination, but a nice way to get started quickly with a\nblog, static website, or frontend web app.\n\n#### [Infura](https://infura.io)\n\nInfura is a freemium pinning service that doesn\'t require any additional setup.\nIt\'s the default one used. Please bear in mind that Infura is a free service,\nso there is probably a rate-limiting.\n\n##### How to enable\n\nUse flag `-p infura`.\n\n#### [Pinata](https://pinata.cloud)\n\nPinata is another freemium pinning service. It gives you more control over\nwhat\'s uploaded. You can delete, label and add custom metadata. This service\nrequires signup.\n\n##### Environment variables\n\n```bash\nIPFS_DEPLOY_PINATA__API_KEY=<api key>\nIPFS_DEPLOY_PINATA__SECRET_API_KEY=<secret api key>\n```\n\n##### How to enable\n\nUse flag `-p pinata`.\n\n#### [Fission](https://fission.codes)\n\nFission is a backend-as-a-service that uses IPFS and supports pinning. This service requires signup.\n\n##### Environment variables\n\n```bash\nIPFS_DEPLOY_FISSION__USERNAME=<username>\nIPFS_DEPLOY_FISSION__PASSWORD=<password>\n```\n\n##### How to enable\n\nUse flag `-p fission`.\n\n#### [IPFS Cluster](https://cluster.ipfs.io/)\n\nYou can use IPFS Cluster to pin your website. It can be either self-hosted or\njust any IPFS Cluster you want.\n\n##### Environment variables\n\n```bash\nIPFS_DEPLOY_IPFS_CLUSTER__HOST=<multiaddr>\nIPFS_DEPLOY_IPFS_CLUSTER__USERNAME=<basic auth username>\nIPFS_DEPLOY_IPFS_CLUSTER__PASSWORD=<basic auth password>\n```\n\n##### How to enable\n\nUse flag `-p ipfs-cluster`.\n\n#### [DAppNode](https://dappnode.io)\n\nDAppNode is not a centralized IPFS provider. It is an operation system that\nallows you to effortless host a number of decentralized apps on your own hardware.\nDefault installation of DAppNode includes an IPFS node, available via VPN at `ipfs.dappnode`. \nIf you can\'t reach the node make sure that you are connected to your DAppNode VPN.\n\n##### How to enable\n\nUse flag `-p dappnode`.\n\n### Supported DNS Providers\n\n#### [Cloudflare DNS](https://cloudflare.com)\n\nCloudflare is a freemium DNS provider. Supports CNAME flattening for\nnaked domains and integrates with their IPFS gateway at\n[cloudflare-ipfs.com](https://cloudflare-ipfs.com).\n\nBear in mind that Cloudflare IPFS doesn\'t host the content itself\n(it\'s a cached gateway), so a stable pinning service is needed if you\ndon\'t want to rely on your computer\'s IPFS daemon\'s availability to\nserve your website.\n\n##### Environment variables\n\n```bash\n# credentials\nIPFS_DEPLOY_CLOUDFLARE__API_EMAIL=\nIPFS_DEPLOY_CLOUDFLARE__API_KEY=\n# or...\nIPFS_DEPLOY_CLOUDFLARE__API_TOKEN=\n\n# dns info\nIPFS_DEPLOY_CLOUDFLARE__ZONE=\nIPFS_DEPLOY_CLOUDFLARE__RECORD=\n```\n\nExample with top-level domain:\n\n```bash\n# cloudflare dns info\nIPFS_DEPLOY_CLOUDFLARE__ZONE=agentofuser.com\nIPFS_DEPLOY_CLOUDFLARE__RECORD=_dnslink.agentofuser.com\n```\n\nExample with subdomain:\n\n```bash\n# cloudflare dns info\nIPFS_DEPLOY_CLOUDFLARE__ZONE=agentofuser.com\nIPFS_DEPLOY_CLOUDFLARE__RECORD=_dnslink.mysubdomain.agentofuser.com\n```\n\n##### How to enable\n\nUse flag `-d cloudflare`.\n\n#### [DNSimple](https://dnsimple.com)\n\nDNSimple is a paid-for DNS provider. They have no specific IPFS support,\nbut allow the setting of DNS TXT records which underlies [IPFS DNSLink](https://docs.ipfs.io/guides/concepts/dnslink/).\n\n##### Environment variables\n\n```bash\n# credentials\nIPFS_DEPLOY_DNSIMPLE__TOKEN=\n\n# dns info\nIPFS_DEPLOY_DNSIMPLE__ZONE=\nIPFS_DEPLOY_DNSIMPLE__RECORD=\n```\n\nExample with top-level domain:\n\n```bash\n# dnsimple dns info\nIPFS_DEPLOY_DNSIMPLE__ZONE=agentofuser.com\nIPFS_DEPLOY_DNSIMPLE__RECORD=_dnslink.agentofuser.com\n```\n\nExample with subdomain:\n\n```bash\n# dnsimple dns info\nIPFS_DEPLOY_DNSIMPLE__ZONE=agentofuser.com\nIPFS_DEPLOY_DNSIMPLE__RECORD=_dnslink.mysubdomain.agentofuser.com\n```\n\n##### How to enable\n\nUse flag `-d dnsimple`.\n\n## API\n\nThis is still pretty unstable and subject to change, so I will just show how\nthe executable currently uses the API.\n\n```javascript\nconst deploy = require(\'ipfs-deploy\')\n\n;(async () => {\n  try {\n    const deployOptions = {\n      publicDirPath: argv.path,\n      copyHttpGatewayUrlToClipboard:\n        !(argv.clipboard === false) && !argv.C && !argv.noClipboard,\n      open: !(argv.open === false) && !argv.O && !argv.noOpen,\n      remotePinners: argv.pinner,\n      dnsProviders: argv.dns,\n      siteDomain: argv.siteDomain,\n      credentials: {\n        cloudflare: {\n          apiKey: argv.cloudflare && argv.cloudflare.apiKey,\n          apiToken: argv.cloudflare && argv.cloudflare.apiToken,\n          apiEmail: argv.cloudflare && argv.cloudflare.apiEmail,\n          zone: argv.cloudflare && argv.cloudflare.zone,\n          record: argv.cloudflare && argv.cloudflare.record,\n        },\n        dnsimple: {\n          token: argv.dnsimple && argv.dnsimple.token,\n          zone: argv.dnsimple && argv.dnsimple.zone,\n          record: argv.dnsimple && argv.dnsimple.record\n        },\n        pinata: {\n          apiKey: argv.pinata && argv.pinata.apiKey,\n          secretApiKey: argv.pinata && argv.pinata.secretApiKey,\n        },\n        fission: {\n          username: argv.fission && argv.fission.username,\n          password: argv.fission && argv.fission.password,\n        },\n        ipfsCluster: {\n          host: argv.ipfsCluster && argv.ipfsCluster.host,\n          username: argv.ipfsCluster && argv.ipfsCluster.username,\n          password: argv.ipfsCluster && argv.ipfsCluster.password,\n        },\n      },\n    }\n\n    deploy(deployOptions)\n  } catch (e) {}\n})()\n```\n\n## Security\n\nWe use `dotenv` to handle credentials. Don\'t commit your `.env` file to source\ncontrol.\n\n## Contributing\n\n### Contributors\n\nThis project was initially started by [@agentofuser](https://github.com/agentofuser),\nwho made a lot of awesome work in here. Posteriorly, it was transfered to ipfs-shipyard.\nThanks for starting this awesome project!\n\nEveryone is welcome to contribute and add new features!\n[See everyone who has contributed](https://github.com/ipfs-shipyard/ipfs-deploy/graphs/contributors)!\n\n### Add a Pinning Service\n\nTo add support to a new pinning service, you must start by creating a file with\nthe name of the pinning service. Let\'s say it\'s called PinFree: create a file\ncalled `src/pinners/pinfree.js` with a content similar to this one:\n\n```javascript\nmodule.exports = {\n  name: \'PinFree\',\n  builder: opts => {\n    // Validate the options. If bad, throw.\n    // Return an api or the options you want to use later.\n\n    return api\n  },\n  pinDir: async (api, dir, tag) => {\n    // Pin a directory asynchronously, using the api\n    // returned by builder and a tag.\n\n    return hash\n  },\n  pinHash: async (api, hash, tag) => {\n    // Pin an hash asynchronously, using the api\n    // returned by builder and a tag.\n    // Just throw an error if the service doesn\'t\n    // support this action.\n  },\n}\n```\n\nNow, you have your pinner service almost set up. Go to `src/pinners/index.js`\nand add your pinner like this to the exports:\n\n```javascript\npinfree: makePinner(require(\'./pinfree\')),\n```\n\nFinally, go to `bin/ipfs-deploy.js` and add `pinfree` to the list of supported\npinners. Also, do not forget to update the README with the new options.\n\n### Add a DNS Provider\n\nTo add support to a new DNS service, you must start by creating a file with the\nname of the DNS service. Let\'s say it\'s called DNSFree: create a file called\n`dnsfree.js` with a content similar to this one:\n\n```javascript\nmodule.exports = {\n  name: \'DNSFree\',\n  validate: opts => {\n    // Validate the options. If bad, throw.\n  },\n  link: async (domain, hash, opts) => {\n    // DNSLink the domain to the hash using the\n    // validated options.\n\n    return {\n      record: someValue,\n      value: someOtherValue,\n    }\n  },\n}\n```\n\nNow, you have your DNS service almost set up. Go to `src/dnslink/index.js` and\nadd your pinner like this to the exports:\n\n```javascript\ndnsfree: makeDnslink(require(\'./dnsfree\')),\n```\n\nFinally, go to `bin/ipfs-deploy.js` and add `dnsfree` to the list of supported\nDNS providers. Also, do not forget to update the README with the new options.\n\n## Users\n\n- [agentofuser.com](https://agentofuser.com)\n- [interplanetarygatsby.com](https://interplanetarygatsby.com)\n- _Your website here_\n\nIf you use this package to deploy your website, please send a pull request so I\ncan add it to the [Users](#users) section in the README. (I reserve the right\nto exercise discretion.)\n\n## License\n\n[BlueOak-1.0.0 OR BSD-2-Clause-Patent OR MIT \xc2\xa9 Agent of User](./LICENSE.md)\n\n(The first two are the most permissive possible ever, more than MIT, which\ndoesn\'t have a patent waiver. Use whichever satisfies your lawyer better.)\n'