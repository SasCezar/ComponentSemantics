b'IPFS Live Streaming\n===================\n\n![Screenshot](screenshot.png?raw=true)\n\nThis project is started by [@ASoTNetworks](https://github.com/ASoTNetworks) and\n[@darkdrgn2k](https://github.com/darkdrgn2k) to stream videos over IPFS, which\noverlapped with the need to live stream the [Our Networks 2018](https://ournetworks.ca)\nconference in Toronto. We will document here the components and processes necessary\nto run live streams throughout the conference and archive the video assets on the\nIPFS network, that is suitable for a small conference with an audience size of less\nthan 100 people.\n\nHere is a [presentation and demo video](https://ipfs.infura.io/ipfs/QmWsKvBvXUKaHcHzrUS91XV4k3YjQFdywQ7bY9BZVX4ghk/) about this project, recorded from the _IPFS All Hands: November 26, 2018_. Slides are available [here](https://benhylau.github.io/talks-and-workshops/talks/201811_ipfs-all-hands/).\n\n## Set Up\n\nWe will record live streams in 720p (3 Mbps) and archive mp4 of each talk in 1080p.\n\n### Equipment List\n\n* [HD Video camera](https://video.ibm.com/blog/streaming-video-tips/live-streaming-cameras-select-the-best-for-you/)\n  that supports HDMI live feed (e.g. Panasonic HC V500)\n* Tripod for video camera\n* Wireless microphones (e.g. presenter, handheld, audience, room tone, etc.)\n* Microphone mixer (e.g. Shure M67)\n* On-premise [laptop or desktop](https://obsproject.com/wiki/System-Requirements)\n  running OBS Studio and other software\n* Two _different_ USB HDMI capture cards with HDMI pass-through and 3.5 mm audio input\n  (e.g. one Elgato HD60 and one AVerMedia LGP Lite)\n* 1 TB external hard disk drive\n* HDMI, XLR, 3.5 mm audio, USB, ethernet, power cables\n\n### On-Premise Setup\n\n```\n    Microphones\n         |\n  (xlr / wireless)\n         |\n         v\n+------------------+\n| Audio Mixer      | --(3.5 mm audio)----+\n+------------------+                     |\n                                         v\n+------------------+             +---------------+            +---------------------------+\n| HD Video Camera  | --(hdmi)--> | Elgato HD60   | --(usb)--> | Laptop running OBS Studio |\n+------------------+             +---------------+            | \xe2\x86\xb3 Streams to RTMP server  |\n                                                              |   for HTTP & IPFS streams |\n+------------------+             +---------------+            | \xe2\x86\xb3 Records mp4 files       |\n| Presenter Laptop | --(hdmi)--> | AVerMedia LGP | --(usb)--> |   for local archiving     |\n+------------------+             +---------------+            +---------------------------+\n                                         |                        |               |\n                                (hdmi pass-through)             (usb)         (ethernet)\n                                         |                        |               |\n                                         v                        v               v\n                                     Projector                 1 TB HDD    Gigabit Internet\n```\n\nThe laptop is the control centre. It has two USB capture cards, connected to separate USB\nbuses (e.g. if it has a USB2 and USB3 interface) if possible to avoid bandwidth issues. These\nwill be the video and audio inputs. The capture cards are of two different brands because\ncards like the Elgato have problems when running two in parallel. At least one card should\ntake a 3.5 mm audio input so we can mix the audio into the stream via the audio mixer.\n\nThe laptop runs the following software:\n\n* [OBS Studio](https://obsproject.com) locally to stream to our servers\n* [OpenVPN](https://openvpn.net) or\n  [Yggdrasil](https://github.com/yggdrasil-network/yggdrasil-go) to authenticate the\n  streaming device\n\nFor Yggdrasil, you should compile at tag `v0.3.2`, and when streaming, run it with the\nconfigurations that will be downloaded from the streaming server at a later step.\n\nOBS Studio is used throughout the conference to toggle between the two video feeds (i.e. \nthe slides and the presenter video). Using the `Start Streaming` function in OBS Studio,\nthe stream is published at 720p to a RTMP server we will set up in the next step. Using\nthe `Start Recording` function in OBS Studio, the operator will also record each talk as\na separate 1080p mp4 file to the external hard disk to be published after the event.\n\n### Remote Server Architecture\n\n```\n      OBS Studio              Website Embedded     Viewer with\n        Source                    Video Player     IPFS Client\n          |                              ^             ^                   ^             ^\n    (rtmp-publish)                       |             |                   |             |\n          |                            (http)        (ipfs)              (http)        (ipfs)\n          v                              |             |                   |             |\n+-------------------+                +---------------------+           +---------------------+\n| rtmp-server       |                | ipfs-server         |           | ipfs-mirror         |\n| \xe2\x86\xb3 nginx-rtmp      |                | \xe2\x86\xb3 ipfs with pubsub  |           | \xe2\x86\xb3 ipfs with pubsub  |\n| \xe2\x86\xb3 openvpn         |<--(rtmp-pull)--| \xe2\x86\xb3 ipfs-http gateway |<--(ipfs)--| \xe2\x86\xb3 ipfs-http gateway |\n| \xe2\x86\xb3 yggdrasil       |                | \xe2\x86\xb3 ffmpeg            |           |- - - - - - - - - - -|\n|- - - - - - - - - -|                |- - - - - - - - - - -|           | Pins IPFS hashes    |\n| Runs RTMP server  |                | Encodes HLS ts+m3u8 |           | learnt from IPNS id |\n| publishable from  |                | pins on IPFS and    |           | of ipfs-server      |\n| authenticated IPs |                | publishes to IPNS   |           +---------------------+\n+-------------------+                +---------------------+\n          |\n   (rtmp-pull/push)\n          |\n          v\nOther Streaming Services\n```\n\nThe on-premise laptop running OBS Studio pushes to the `rtmp-server`, which through\nIP-pinning of the OpenVPN or Yggdrasil-generated IP address will allow only that device to\npublish. The `ipfs-server` pulls that RTMP stream, encodes ts chunks in a live m3u8 file using\nffmpeg, then IPFS adds and pins those files and uses IPNS to publish the m3u8 to its node\nID. The built-in ipfs-http gateway allow those content to be accessed via HTTP, which is\nwhat the embedded player on the website will use. However, viewers running a IPFS client\n(with pubsub enabled) can directly view the streams over IPFS. Optionally, we can run\none or more `ipfs-mirror` servers that pin the live streaming content and run additional\ngateways.\n\nAll the servers described above are provisioned using Terraform on Digital Ocean. In addition,\nthe RTMP stream can be consumed by other services to provide a parallel stream that does not\ninvolve IPFS.\n\n#### Provision Streaming Servers\n\nWe will be using the following tools and services:\n\n* [Digital Ocean](https://www.digitalocean.com) as the virtual machine provider\n* [Terraform](https://www.terraform.io) to provision the cloud servers\n* [Let\'s Encrypt](https://letsencrypt.org) to get SSL certificates for HTTPS\n\nThe following steps assume you have a Digital Ocean account and the above listed software\ninstalled on your local machine, which can be the same device running OBS Studio.\n\n1. Clone this repository and work from the `terraform` directory:\n\n        git clone https://github.com/tomeshnet/ipfs-live-streaming.git\n        cd ipfs-live-streaming/terraform\n\n1. From your domain name registrar, point name servers to Digital Ocean\'s name servers:\n\n        ns1.digitalocean.com\n        ns2.digitalocean.com\n        ns3.digitalocean.com\n\n    Then store the domain name in your local environment:\n\n        echo -n YOUR_DOMAIN_NAME > .keys/domain_name\n\n1. Set an email address to use as contact email for Let\'s Encrypt:\n\n        echo -n YOUR_EMAIL_ADDRESS > .keys/email_address\n        \n   **DEVELOPER TIP** Set dryrun to use Let\'s Encrypt staging servers for testing\n   \n        echo -n true > .keys/dryrun\n        \n1. Obtain a read-write access token from your Digital Ocean account\'s `API` tab, then store\n    it in your local environment:\n\n        echo -n YOUR_DIGITAL_OCEAN_ACCESS_TOKEN > .keys/do_token\n\n1. Generate RSA keys to access your Digital Ocean VMs:\n\n        ssh-keygen -t rsa -f .keys/id_rsa\n\n    Add the SSH key to your Digital Ocean account under `Settings > Security`, then copy the\n    SSH fingerprint to your local environment:\n\n        echo -n YOUR_SSH_FINGERPRINT > .keys/ssh_fingerprint\n\n1. [Download Terraform](https://www.terraform.io/intro/getting-started/install.html), add it to\n    your path. On Linux it would look something like this:\n\n        https://releases.hashicorp.com/terraform/0.11.7/terraform_0.11.7_linux_amd64.zip\n        unzip terraform_0.11.7_linux_amd64.zip\n        mv terraform /usr/bin\n\n    Then run initialization from our `terraform` working directory:\n\n        terraform init\n\n1. Provision the streaming servers by running:\n\n        terraform apply\n\n    By default, this will create one instance of each server type. You may choose to create\n    multiple instances of `ipfs-mirror` by overriding the `mirror` variable.\n\n    You may also choose to include an external HTTP (non-IPFS) stream source by adding one or\n    more URLs to a m3u8 playlist.\n\n    For example:\n\n        terraform apply \\\n          -var "mirror=2" \\\n          -var "m3u8_http_urls=\\\'https://HLS_SOURCE_0/live.m3u8\\\',\\\'https://HLS_SOURCE_1/live.m3u8\\\'"\n\n    From your browser, login to your Digital Ocean dashboard and find your new VMs tagged\n    with `ipfs-live-streaming`.\n\n1. You will find a couple new files in your `.keys` folder:\n\n        client.conf    (for OpenVPN on Linux)\n        client.ovpn    (for OpenVPN on MacOS and Windows)\n        yggdrasil.conf (for Yggdrasil)\n\n    To authenticate using OpenVPN, connect with your OpenVPN client using `client.conf` or\n    `client.ovpn`, then publish your OBS Studio stream to:\n\n        rtmp://10.10.10.1:1935/live/stream1\n\n    To authenticate using Yggdrasil, start it with `yggdrasil.conf` and note the last line of\n    output like this:\n\n        sudo yggdrasil --useconf < ./keys/yggdrasil.conf\n        ...\n        2018/12/14 15:16:22 Connected: 203:4bb0:9ff1:2312:e7f3:b8c4:852:a8b1@104.248.104.141 source 192.168.1.173\n\n    Then publish your OBS Studio stream to the IPv6:\n\n        rtmp://[203:4bb0:9ff1:2312:e7f3:b8c4:852:a8b1]:1935/live/stream1\n\n1. When your streaming session is done, you can stop OpenVPN or Yggdrasil and destroy the\n    servers with:\n\n        terraform destroy\n\n## Video Playback\n\nThe following streams become publicly available about 30 seconds after you start publishing to the RTMP server:\n\n| Stream                     | URL                                                                 |\n|:---------------------------|:--------------------------------------------------------------------|\n| RTMP stream                | `rtmp://rtmp-server.YOUR_DOMAIN_NAME/live`                          |\n| HLS stream (origin)        | `https://YOUR_DOMAIN_NAME/live.m3u8`                                |\n| HLS stream (mirror-N)      | `https://ipfs-mirror-N.YOUR_DOMAIN_NAME/live.m3u8`                  |\n| IPNS HLS stream (origin)   | `https://ipfs-gateway.YOUR_DOMAIN_NAME/ipns/IPNS_ID` _(disabled)_   |\n| IPNS HLS stream (mirror-N) | `https://ipfs-gateway-N.YOUR_DOMAIN_NAME/ipns/IPNS_ID` _(disabled)_ |\n\nThe origin `ipfs-server` and each `ipfs-mirror` also host an embedded video player, publicly available at:\n\n| Site                    | URL                                      |\n|:------------------------|:-----------------------------------------|\n| Video player (origin)   | `https://YOUR_DOMAIN_NAME`               |\n| Video player (mirror-N) | `https://ipfs-mirror-N.YOUR_DOMAIN_NAME` |\n\nThe embedded video player is tested on common desktop and mobile browsers, and support the following optional URL query parameters:\n\n| Parameter | Description                                                           |\n|:----------|:----------------------------------------------------------------------|\n| `gw`      | Set IPFS gateway URL to override playback gateway                     |\n| `live`    | Set m3u8 file URL to override IPFS live stream                        |\n| `vod`     | Set IPFS content hash of mp4 file to play IPFS on-demand video stream |\n\n## Attribution\n\nThe video player uses code from [Video.js](https://videojs.com), graphics from [ipfs/artwork](https://github.com/ipfs/artwork), and loading animation from [jxnblk/loading](https://github.com/jxnblk/loading).\n'