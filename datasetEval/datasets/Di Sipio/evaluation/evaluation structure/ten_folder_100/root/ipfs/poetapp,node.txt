b'# The Po.et Node\n\n[![CircleCI](https://circleci.com/gh/poetapp/node/tree/master.svg?style=svg)](https://circleci.com/gh/poetapp/node/tree/master)\n[![Renovate enabled](https://img.shields.io/badge/renovate-enabled-brightgreen.svg)](https://renovatebot.com/)\n[![semantic-release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg)](https://github.com/semantic-release/semantic-release)\n[![Docker Automated build](https://img.shields.io/docker/automated/poetapp/node.svg?style=flat)](https://hub.docker.com/r/poetapp/node/)\n[![Join the chat at https://gitter.im/poetapp/Lobby](https://badges.gitter.im/poetapp/Lobby.svg)](https://gitter.im/poetapp/Lobby)\n\nThe Po.et Node allows you to timestamp documents in a decentralized manner.\n\nIt\'s built on top of the [Bitcoin](https://github.com/bitcoin/bitcoin) blockchain and [IPFS](https://ipfs.io/).\n\n## Index\n\n- [The Po.et Node](#the-poet-node)\n  - [Index](#index)\n  - [How to Run the Po.et Node](#how-to-run-the-poet-node)\n    - [Dependencies](#dependencies)\n    - [Configuration](#configuration)\n  - [API](#api)\n    - [`GET /works?issuer=xxx&limit=x&offset=x`](#get-worksissuerxxxlimitxoffsetx)\n    - [`GET /works/:id`](#get-worksid)\n    - [`POST /works`](#post-works)\n    - [`POST /files`](#post-files)\n  - [Building Claims](#building-claims)\n    - [Verifying the Claim is on Bitcoin\'s Blockchain](#verifying-the-claim-is-on-bitcoins-blockchain)\n    - [Po.et JS](#poet-js)\n  - [Contributing](#contributing)\n    - [Compiling](#compiling)\n    - [Tests](#tests)\n    - [Coverage](#coverage)\n  - [Security](#security)\n\n## How to Run the Po.et Node\n\nTo run the Po.et Node, clone this repo, and make sure you have [Docker](https://docs.docker.com/install/) and [docker-compose](https://docs.docker.com/compose/install/) installed.\n\nClone the repo:\n```bash\ngit clone https://github.com/poetapp/node.git\ncd node\n```\n\nTo start the Po.et Node environment, run:\n```bash\ndocker-compose up --build\n```\n\nUsing the instructions above, new blocks have to be generated manually. This is often desirable during development. To have blocks automatically generated, follow the instructions below instead to mine a new block every 5 seconds.\n\n```bash\n  $ cp docker-compose.override.yml.example docker-compose.override.yml\n  # Edit docker-compose.override.yml and uncomment\n  # the `regtest-watcher` service in `docker-compose.yml`\n  $ docker-compose up --build\n```\n\nYou only need to run `docker-compose build` to create or update the Docker images, and `docker-compose up -d` to start them. To shut everything down, it is recommended to use `docker-compose down --volumes`  to stop the running containers and clear any data. If you wish to keep data between invocations, use `docker-compose down`.\n\nYou can also `docker-compose exec mongo bash` and `docker-compose exec ipfs sh` to run the mongo shell or ssh into the IPFS container.\n\n### Dependencies\n\nThe Po.et Node depends on [RabbitMQ](http://www.rabbitmq.com/), [IPFS](https://ipfs.io/), [Bitcoin Core](https://github.com/bitcoin/bitcoin) and [MongoDB](https://github.com/mongodb/mongo).\n\nThese dependencies are setup automatically when you run `docker-compose`.\n\n### Configuration\n\nThe Po.et Node comes with a default configuration that works out of the box, which can be found here:\nhttps://github.com/poetapp/node/blob/master/src/Configuration.ts#L82-L141\n\nBy default, anchoring to the blockchain is disabled (`enableAnchoring: false`). If you want to enable blockchain anchoring, you will need to the Bitcoin Core dependency to be running with a funded wallet so that it can pay the Bitcoin network transaction fees (either for testnet or real Bitcoin for mainnet).\n\nYou can change any configuration by passing configuration values via environment variables. The keys of these environment variables are always the SCREAMING_SNAKE_CASE equivalent of the configuration options listed in the default configuration. For example, the RabbitMQ URL (`rabbitmqUrl`) can be set with the `RABBITMQ_URL` environment variable.\n\n> **Note**: Po.et will NOT reload the configuration while it\'s running if you change it. You will need to restart the Node for configuration changes to apply.\n\n## API\nCurrently, the Node exposes four endpoints.\n\n### `GET /works?issuer=xxx&limit=x&offset=x`\nReturns a paginated array of signed verifiable work claims.\n\nAccepts the following query parameters:\n\n- `issuer`: string. If present, will only return works issued by this issuer.\n- `limit`: number. Maximum number of results to return per request. Defaults to 10.\n- `offset`: number. Number of claims to skip.\n\n### `GET /works/:id`\nReturns a single signed verifiable work claim by its Id.\n\nFor simplicity, this endpoint adds a `.anchor` in the response, which is not a real part of the claim, but provides valuable information such as the ID of the transaction in which this claim has been anchored, the IPFS directory hash in which it can be found, etc.\n\nA 404 error is returned if the claim isn\'t found in this Node\'s database. This doesn\'t strictly mean the claim does not exist in the Po.et Network \xe2\x80\x94 it just doesn\'t exist in this Node.\n\n### `POST /works`\nPublish a signed verifiable work claim.\n\nThis endpoint is async and returns an ACK, unless an immediate error can be detected (e.g., a malformed claim). There is no guarantee that the work has actually been processed, sent to IPFS and anchored. To confirm that, you\'ll need to `GET /works/:id` and check the `.anchor` attribute.\n\nThis endpoint expects a fully constructed signed verifiable claim \xe2\x80\x94 with the correct `\'@context\'`, `.id`, `.issuer`, `.issuanceDate`, `.type`, and `sec:proof`. See [Building Claims](#building-claims) for information on how to correctly create these attributes.\n\n### `POST /files`\nTakes a multipart file upload. Currently only allows 1 file to be uploaded at a time and accepts 1 field which is the file to upload.\n\nReturns an array with an object containing the hash and the archive URL of the file.\n\nExample:\n\n```\n[\n  {\n    hash: "QmS1s76raH43mLT3dSsMt7Nev1t9bM33GTFTZ9foXJV4ZT",\n    archiveUrl: "https://ipfs.io/ipfs/QmS1s76raH43mLT3dSsMt7Nev1t9bM33GTFTZ9foXJV4ZT"\n  }\n]\n```\n\n## Building Claims\nA Po.et Claim is a signed verifiable claim that holds arbitrary information and allows the network to verify that the claim:\n\n- has actually been created by a specific person,\n- has not been modified since its creation, and\n- contains a special field `type` which will allow more features in the future.\n\nFor more information about claims and their structure, please see:\nhttps://github.com/poetapp/documentation/blob/master/reference/claims.md\n\n### Verifying the Claim is on Bitcoin\'s Blockchain\n\nOnce node receives a claim, it stores the claim with some metadata including the following:\n* The highest block read at the time node stores the claim\n* Placeholders for the actual block that was mined including the claim\n\nThis allows the node application to track whether or not the claim actually has been successfully saved to the Bitcoin blockchain. There is a configuration value, `maximumTransactionAgeInBlocks`, that determines how far ahead the blockchain will grow before resubmitting the claim. Comparing this value against the delta between the highest block read and the block read at the time of claim creation will determine whether node resubmits the claim.\n\n\n### Po.et JS\nAll the claim logic is abstracted away in [Po.et JS](https://github.com/poetapp/poet-js), so if you are working with JavaScript or TypeScript you can simply use the library:\n\n```ts\nimport { configureCreateVerifiableClaim, createIssuerFromPrivateKey, getVerifiableClaimSigner } from \'@po.et/poet-js\'\n\nconst { configureSignVerifiableClaim } = getVerifiableClaimSigner()\n\nconst issuerPrivateKey = \'LWgo1jraJrCB2QT64UVgRemepsNopBF3eJaYMPYVTxpEoFx7sSzCb1QysHeJkH2fnGFgHirgVR35Hz5A1PpXuH6\' \nconst issuer = createIssuerFromPrivateKey(issuerPrivateKey)\n\nconst createVerifiableWorkClaim = configureCreateVerifiableClaim({ issuer })\nconst signVerifiableClaim = configureSignVerifiableClaim({ privateKey: issuerPrivateKey })\n\nconst workClaim = {\n  name: \'The Raven\',\n  author: \'Edgar Allan Poe\',\n  tags: \'poem\',\n  dateCreated: \'\',\n  datePublished: \'1845-01-29T03:00:00.000Z\',\n  archiveUrl: \'https://example.com/raven\',\n  hash: \'<hash of content>\',\n}\n\nconst unsignedVerifiableClaim = await createVerifiableWorkClaim(workClaim)\nconst signedWorkClaim = await signVerifiableClaim(unsignedVerifiableClaim)\n```\n\n> You can find more examples on how to build and publish claims in the integration tests in [tests/API/integration/PostWork.test](./tests/integration/API/PostWork.test.ts).\n\n## [Contributing](https://github.com/poetapp/documentation/blob/master/CONTRIBUTING.md)\n\n### Compiling\nRun `npm run build` to compile the source. This will run TypeScript on the source files and place the output in `dist/ts`, and will then run Babel and place the output in `dist/babel`.\n\nCurrently, we\'re only using Babel to support [absolute import paths](https://github.com/tleunen/babel-plugin-module-resolver).\n\nDuring development, you can also run `npm run watch` to automatically watch for file changes, build the changed files and restart the application on the fly.\n\n### Tests\nUnit and integration tests are located in this repo. You can run both with `npm test` or separately with `npm run test:unit` and `npm run test:integration`.\n\nThe integration tests run in isolated instances of the app and database. \n\nFunctional tests are run as follows:\n\n```bash\n  $ docker-compose build\n  $ docker-compose up\n  $ docker-compose exec poet-node npm run test:functional\n```\n\n### Coverage\nCoverage is generated with [Istanbul](https://github.com/istanbuljs/nyc). A more complete report can be generated by running `npm run coverage`, which will run `npm run coverage:unit` and `npm run coverage:integration` together. You may also execute these commands separately.\n\n> Note: We are using our own forks of [nyc](https://github.com/istanbuljs/nyc) and [istanbul-lib-instrument](https://github.com/istanbuljs/istanbuljs/tree/master/packages/istanbul-lib-instrument) in order to add better support for TypeScript. We intend to contribute our forks back to nyc and istanbul-lib-instrument in order to make our solution available to the entire community. You can follow the issues in this [PR](https://github.com/poetapp/node/pull/230), and check the new PRs for [istanbul-lib-instrument](https://github.com/istanbuljs/istanbuljs/pull/204).\n\n## [Security](https://github.com/poetapp/documentation/blob/master/SECURITY.md)\n'