b'# Graph Node\n\n[![Build Status](https://travis-ci.org/graphprotocol/graph-node.svg?branch=master)](https://travis-ci.org/graphprotocol/graph-node)\n[![Getting Started Docs](https://img.shields.io/badge/docs-getting--started-brightgreen.svg)](docs/getting-started.md)\n\n[The Graph](https://thegraph.com/) is a protocol for building decentralized applications (dApps) quickly on Ethereum and IPFS using GraphQL.\n\nGraph Node is an open source Rust implementation that event sources the Ethereum blockchain to deterministically update a data store that can be queried via the GraphQL endpoint.\n\nFor detailed instructions and more context, check out the [Getting Started Guide](docs/getting-started.md).\n\n## Quick Start\n\n### Prerequisites\n\nTo build and run this project you need to have the following installed on your system:\n\n- Rust (latest stable) \xe2\x80\x93 [How to install Rust](https://www.rust-lang.org/en-US/install.html)\n- PostgreSQL \xe2\x80\x93 [PostgreSQL Downloads](https://www.postgresql.org/download/)\n- IPFS \xe2\x80\x93 [Installing IPFS](https://ipfs.io/docs/install/)\n\nFor Ethereum network data, you can either run a local node or use Infura.io:\n\n- Local node \xe2\x80\x93 [Installing and running Ethereum node](https://ethereum.gitbooks.io/frontier-guide/content/getting_a_client.html)\n- Infura infra \xe2\x80\x93 [Infura.io](https://infura.io/)\n\n### Running a Local Graph Node\n\nThis is a quick example to show a working Graph Node. It is a [subgraph for the Ethereum Name Service (ENS)](https://github.com/graphprotocol/ens-subgraph) that The Graph team built.\n\n1. Install IPFS and run `ipfs init` followed by `ipfs daemon`.\n2. Install PostgreSQL and run `initdb -D .postgres` followed by `pg_ctl -D .postgres -l logfile start` and `createdb graph-node`.\n3. If using Ubuntu, you may need to install additional packages:\n   - `sudo apt-get install -y clang libpq-dev libssl-dev pkg-config`\n4. In the terminal, clone https://github.com/graphprotocol/ens-subgraph, and install dependencies and generate types for contract ABIs:\n\n```\nyarn\nyarn codegen\n```\n\n5. In the terminal, clone https://github.com/graphprotocol/graph-node, and run `cargo build`.\n\nOnce you have all the dependencies set up, you can run the following:\n\n```\ncargo run -p graph-node --release -- \\\n  --postgres-url postgresql://USERNAME[:PASSWORD]@localhost:5432/graph-node \\\n  --ethereum-rpc mainnet:https://mainnet.infura.io/v3/[PROJECT_ID] \\\n  --ipfs 127.0.0.1:5001\n```\n\nTry your OS username as `USERNAME` and `PASSWORD`. The password might be optional. It depends on your setup.\n\nIf you\'re using Infura you should [sign up](https://infura.io/register) to get a PROJECT_ID, it\'s free.\n\nThis will also spin up a GraphiQL interface at `http://127.0.0.1:8000/`.\n\n6.  With this ENS example, to get the subgraph working locally run:\n\n```\nyarn create-local\n```\n\nThen you can deploy the subgraph:\n\n```\nyarn deploy-local\n```\n\nThis will build and deploy the subgraph to the Graph Node. It should start indexing the subgraph immediately.\n\n### Command-Line Interface\n\n```\nUSAGE:\n    graph-node [FLAGS] [OPTIONS] --ethereum-ipc <NETWORK_NAME:FILE> --ethereum-rpc <NETWORK_NAME:URL> --ethereum-ws <NETWORK_NAME:URL> --ipfs <HOST:PORT> --postgres-url <URL>\n\nFLAGS:\n        --debug      Enable debug logging\n    -h, --help       Prints help information\n    -V, --version    Prints version information\n\nOPTIONS:\n        --admin-port <PORT>                           Port for the JSON-RPC admin server [default: 8020]\n        --elasticsearch-password <PASSWORD>\n            Password to use for Elasticsearch logging [env: ELASTICSEARCH_PASSWORD]\n\n        --elasticsearch-url <URL>\n            Elasticsearch service to write subgraph logs to [env: ELASTICSEARCH_URL=]\n\n        --elasticsearch-user <USER>                   User to use for Elasticsearch logging [env: ELASTICSEARCH_USER=]\n        --ethereum-ipc <NETWORK_NAME:FILE>\n            Ethereum network name (e.g. \'mainnet\') and Ethereum IPC pipe, separated by a \':\'\n\n        --ethereum-polling-interval <MILLISECONDS>\n            How often to poll the Ethereum node for new blocks [env: ETHEREUM_POLLING_INTERVAL=]  [default: 500]\n\n        --ethereum-rpc <NETWORK_NAME:URL>\n            Ethereum network name (e.g. \'mainnet\') and Ethereum RPC URL, separated by a \':\'\n\n        --ethereum-ws <NETWORK_NAME:URL>\n            Ethereum network name (e.g. \'mainnet\') and Ethereum WebSocket URL, separated by a \':\'\n\n        --http-port <PORT>                            Port for the GraphQL HTTP server [default: 8000]\n        --ipfs <HOST:PORT>                            HTTP address of an IPFS node\n        --node-id <NODE_ID>                           a unique identifier for this node [default: default]\n        --postgres-url <URL>                          Location of the Postgres database used for storing entities\n        --subgraph <[NAME:]IPFS_HASH>                 name and IPFS hash of the subgraph manifest\n        --ws-port <PORT>                              Port for the GraphQL WebSocket server [default: 8001]\n```\n\n### Environment Variables\n\nSee [here](https://github.com/graphprotocol/graph-node/blob/master/docs/environment-variables.md) for a list of\nthe environment variables that can be configured.\n\n## Project Layout\n\n- `node` \xe2\x80\x94 A local Graph Node.\n- `graph` \xe2\x80\x94 A library providing traits for system components and types for\n  common data.\n- `core` \xe2\x80\x94 A library providing implementations for core components, used by all\n  nodes.\n- `chain/ethereum` \xe2\x80\x94 A library with components for obtaining data from\n  Ethereum.\n- `graphql` \xe2\x80\x94 A GraphQL implementation with API schema generation,\n  introspection, and more.\n- `mock` \xe2\x80\x94 A library providing mock implementations for all system components.\n- `runtime/wasm` \xe2\x80\x94 A library for running WASM data-extraction scripts.\n- `server/http` \xe2\x80\x94 A library providing a GraphQL server over HTTP.\n- `store/postgres` \xe2\x80\x94 A Postgres store with a GraphQL-friendly interface\n  and audit logs.\n\n## Roadmap\n\n\xf0\x9f\x94\xa8 = In Progress\n\n\xf0\x9f\x9b\xa0 = Feature complete. Additional testing required.\n\n\xe2\x9c\x85 = Feature complete\n\n\n| Feature |  Status |\n| ------- |  :------: |\n| **Ethereum** |    |\n| Indexing smart contract events | \xe2\x9c\x85 |\n| Handle chain reorganizations | \xe2\x9c\x85 |\n| **Mappings** |    |\n| WASM-based mappings| \xe2\x9c\x85 |\n| TypeScript-to-WASM toolchain | \xe2\x9c\x85 |\n| Autogenerated TypeScript types | \xe2\x9c\x85 |\n| **GraphQL** |     |\n| Query entities by ID | \xe2\x9c\x85 |\n| Query entity collections | \xe2\x9c\x85 |\n| Pagination | \xe2\x9c\x85 |\n| Filtering | \xe2\x9c\x85 |\n| Entity relationships | \xe2\x9c\x85 |\n| Subscriptions | \xe2\x9c\x85 |\n\n\n## Contributing\n\nPlease check [CONTRIBUTING.md](CONTRIBUTING.md) for development flow and conventions we use.\nHere\'s [a list of good first issues](https://github.com/graphprotocol/graph-node/labels/good%20first%20issue).\n\n## License\n\nCopyright &copy; 2018-2019 Graph Protocol, Inc. and contributors.\n\nThe Graph is dual-licensed under the [MIT license](LICENSE-MIT) and the [Apache License, Version 2.0](LICENSE-APACHE).\n\nUnless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either expressed or implied. See the License for the specific language governing permissions and limitations under the License.\n'