b"# ipfsd-ctl, the IPFS Factory\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://protocol.ai)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.io/)\n[![](https://img.shields.io/badge/freenode-%23ipfs-blue.svg?style=flat-square)](http://webchat.freenode.net/?channels=%23ipfs)\n[![Travis CI](https://flat.badgen.net/travis/ipfs/js-ipfsd-ctl?branch=master)](https://travis-ci.com/ipfs/js-ipfsd-ctl)\n[![Codecov branch](https://img.shields.io/codecov/c/github/ipfs/js-ipfs-multipart/master.svg?style=flat-square)](https://codecov.io/gh/ipfs/js-ipfs-multipart)\n[![Dependency Status](https://david-dm.org/ipfs/js-ipfsd-ctl.svg?style=flat-square)](https://david-dm.org/ipfs/js-ipfsd-ctl)\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat-square)](https://github.com/feross/standard)\n[![Bundle Size](https://flat.badgen.net/bundlephobia/minzip/ipfsd-ctl)](https://bundlephobia.com/result?p=ipfsd-ctl)\n> Spawn IPFS daemons using JavaScript!\n\n## Lead Maintainer\n\n[Hugo Dias](https://github.com/hugomrdias)\n\n## Notice\nThis module is moving to async/await starting from **0.44.0**.   \nThe last minor version to support callbacks is 0.43.0, any backports will merged to the branch `callbacks` and released under  `>0.43.0 <0.44.0`.\n\n## Table of Contents\n\n- [Install](#install)\n- [Usage](#usage)\n- [API](#api)\n- [Packaging](#packaging)\n- [Contribute](#contribute)\n- [License](#license)\n\n## Install\n\n```sh\nnpm install --save ipfsd-ctl\n```\n\n## Usage\n\n**Spawn an IPFS daemon from Node.js**\n\n```js\n// Start a disposable node, and get access to the api\n// print the node id, and stop the temporary daemon\n\nconst IPFSFactory = require('ipfsd-ctl')\nconst f = IPFSFactory.create()\n\nconst ipfsd = await f.spawn()\nconst id = await ipfsd.api.id()\n\nconsole.log(id)\n\nawait ipfsd.stop()\n```\n\n**Spawn an IPFS daemon from the Browser using the provided remote endpoint**\n\n```js\n// Start a remote disposable node, and get access to the api\n// print the node id, and stop the temporary daemon\n\nconst IPFSFactory = require('ipfsd-ctl')\n\nconst port = 9090\nconst server = IPFSFactory.createServer(port)\nconst f = IPFSFactory.create({ remote: true, port: port })\n\nawait server.start()\nconst ipfsd = await f.spawn()\nconst id = await ipfsd.api.id()\n\nconsole.log(id)\n\nawait ipfsd.stop()\nawait server.stop()\n```\n\n## Disposable vs non Disposable nodes\n\n`ipfsd-ctl` can spawn `disposable` and `non-disposable` daemons.\n\n- `disposable`- Creates on a temporary repo which will be optionally initialized and started (the default), as well cleaned up on process exit. Great for tests.\n- `non-disposable` - Non disposable daemons will by default attach to any nodes running on the default or the supplied repo. Requires the user to initialize and start the node, as well as stop and cleanup afterwards. Additionally, a non-disposable will allow you to pass a custom repo using the `repoPath` option, if the `repoPath` is not defined, it will use the default repo for the node type (`$HOME/.ipfs` or `$HOME/.jsipfs`). The `repoPath` parameter is ignored for disposable nodes, as there is a risk of deleting a live repo.\n\n## Batteries not included. Bring your own IPFS executable.\n\nInstall one or both of the following modules:\n\n- `ipfs` - `> npm i ipfs` - If you want to spawn js-ipfs nodes and/or daemons.\n- `go-ipfs-dep` - `> npm i go-ipfs-dep` - If you want to spawn go-ipfs daemons.\n\n## API\n\n### `IPFSFactory` - `const f = IPFSFactory.create([options])`\n\n`IPFSFactory.create([options])` returns an object that will expose the `df.spawn` method\n\n- `options` - optional object with:\n  - `remote` bool - use remote endpoint to spawn the nodes.\n  - `port` number - remote endpoint port. Defaults to 43134.\n  - `exec` - IPFS executable path. `ipfsd-ctl` will attempt to locate it by default. If you desire to spawn js-ipfs instances in the same process, pass the ref to the module instead (e.g `exec: require('ipfs')`)\n  - `type` - the daemon type, see below the options\n    - `go` - spawn go-ipfs daemon\n    - `js` - spawn js-ipfs daemon\n    - `proc` - spawn in-process js-ipfs instance. Needs to be called also with exec. Example: `DaemonFactory.create({type: 'proc', exec: require('ipfs') })`.\n  - `IpfsClient` - A custom IPFS API constructor to use instead of the packaged one\n\n**example:** See [Usage](#usage)\n\n#### Spawn a daemon with `f.spawn([options]) : Promise`\n\nSpawn the daemon\n\n- `options` is an optional object the following properties:\n  - `init` bool (default true) or Object - should the node be initialized\n  - `initOptions` object - should be of the form `{bits: <size>}`, which sets the desired key size\n  - `start` bool (default true) - should the node be started\n  - `repoPath` string - the repository path to use for this node, ignored if node is disposable\n  - `disposable` bool (default true) - a new repo is created and initialized for each invocation, as well as cleaned up automatically once the process exits\n  - `defaultAddrs` bool (default false) - use the daemon default `Swarm` addrs\n  - `args` - array of cmd line arguments to be passed to ipfs daemon\n  - `config` - ipfs configuration options\n\nReturns a promise that resolves to:\n\n- `ipfsd` - is the daemon controller instance:\n  - `api` - a property of `ipfsd`, an instance of  [ipfs-http-client](https://github.com/ipfs/js-ipfs-http-client) attached to the newly created ipfs node\n\n**example:** See [Usage](#usage)\n\n#### Get daemon version with `f.version() : Promise`\n\nGet the version without spawning a daemon\n\n- `callback` - is a function with the signature `function(err, version)`, where version might be one of the following:\n    - if `type` is 'go' a version string like `ipfs version <version number>`\n    - if `type` is 'js' a version string like `js-ipfs version: <version number>`\n     - if `type` is 'proc' an object with the following properties:\n        - version - the ipfs version\n        - repo - the repo version\n        - commit - the commit hash for this version\n\n### Remote endpoint - `const server = IPFSFactory.createServer([options])`\n\n`IPFSFactory.createServer` starts a IPFSFactory endpoint.\n\n- `options` is an optional object the following properties:\n  - `port` - the port to start the server on\n\n**example:**\n```js\nconst IPFSFactory = require('ipfsd-ctl')\n\nconst server = IPFSFactory.createServer({ port: 12345 })\n\nawait server.start()\n\nconsole.log('endpoint is running')\n\nawait server.stop()\n\nconsole.log('endpoint has stopped')\n```\n\n### IPFS Daemon Controller - `ipfsd`\n\nThe IPFS daemon controller (`ipfsd`) allows you to interact with the spawned IPFS daemon.\n\n#### `ipfsd.apiAddr` (getter)\n\nGet the address (multiaddr) of connected IPFS API. Returns a multiaddr\n\n#### `ipfsd.gatewayAddr` (getter)\n\nGet the address (multiaddr) of connected IPFS HTTP Gateway. Returns a multiaddr.\n\n#### `ipfsd.repoPath` (getter)\n\nGet the current repo path. Returns string.\n\n#### `ipfsd.started` (getter)\n\nIs the node started. Returns a boolean.\n\n#### `init([initOpts]) : Promise`\n\nInitialize a repo.\n\n`initOpts` (optional) is an object with the following properties:\n  - `keysize` (default 2048) - The bit size of the identity key.\n  - `directory` (default IPFS_PATH if defined, or ~/.ipfs for go-ipfs and ~/.jsipfs for js-ipfs) - The location of the repo.\n  - `pass` (optional) - The passphrase of the key chain.\n\nReturns a promise that resolves to a daemon controller instance.\n\n#### `ipfsd.cleanup() : Promise`\n\nDelete the repo that was being used. If the node was marked as `disposable` this will be called automatically when the process is exited.\n\nReturns a promise that resolves when the cleanup is complete.\n\n#### `ipfsd.start(flags) : Promise`\n\nStart the daemon.\n\n`flags` - Flags array to be passed to the `ipfs daemon` command.\n\nReturns a promiset hat resolves to an instance of `ipfs-http-client`.\n\n#### `ipfsd.stop([timeout]) : Promise`\n\nStop the daemon.\n\nUse `timeout` to specify the grace period in ms before hard stopping the daemon. Otherwise, a grace period of `10500` ms will be used for disposable nodes and `10500 * 3` ms for non disposable nodes.\n\nReturns a promise that resolves when the daemon has stopped.\n\n#### `ipfsd.killProcess([timeout]) : Promise`\n\nKill the `ipfs daemon` process. Use timeout to specify the grace period in ms before hard stopping the daemon. Otherwise, a grace period of `10500` ms will be used for disposable nodes and `10500 * 3` ms for non disposable nodes.\n\nNote: timeout is ignored for `proc` nodes\n\nFirst a `SIGTERM` is sent, after 10.5 seconds `SIGKILL` is sent if the process hasn't exited yet.\n\nReturns a promise that resolves once the process is killed\n\n#### `ipfsd.pid() : Promise`\n\nGet the pid of the `ipfs daemon` process. Returns the pid number\n\nReturns a promiset that resolves to the `pid` of the running daemon.\n\n#### `ipfsd.getConfig([key]) : Promise`\n\nReturns the output of an `ipfs config` command. If no `key` is passed, the whole config is returned as an object.\n\n`key` (optional) - A specific config to retrieve.\n\nReturns a promise that resolves to  `Object|string` on success.\n\n#### `ipfsd.setConfig(key, value) : Promise`\n\nSet a config value.\n\n`key` - the key of the config entry to change/set\n\n`value` - the config value to change/set\n\nReturns a promise that resolves on success.\n\n#### `ipfsd.version() : Promise`\n\nGet the version of ipfs\n\nReturns a promise that resolves to the `version`\n\n### IPFS HTTP Client  - `ipfsd.api`\n\nAn instance of [ipfs-http-client](https://github.com/ipfs/js-ipfs-http-client#api) that is used to interact with the daemon.\n\nThis instance is returned for each successfully started IPFS daemon, when either `df.spawn({start: true})` (the default) is called, or `ipfsd.start()` is invoked in the case of nodes that were spawned with `df.spawn({start: false})`.\n\n## ipfsd-ctl environment variables\n\nIn additional to the API described in previous sections, `ipfsd-ctl` also supports several environment variables. This are often very useful when running in different environments, such as CI or when doing integration/interop testing.\n\n_Environment variables precedence order is as follows. Top to bottom, top entry has highest precedence:_\n\n- command line options/method arguments\n- env variables\n- default values\n\nMeaning that, environment variables override defaults in the configuration file but are superseded by options to `df.spawn({...})`\n\n#### IPFS_JS_EXEC and IPFS_GO_EXEC\n\nAn alternative way of specifying the executable path for the `js-ipfs` or `go-ipfs` executable, respectively.\n\n## Packaging\n\n`ipfsd-ctl` can be packaged in Electron applications, but the ipfs binary has to be excluded from asar (Electron Archives).\n[read more about unpack files from asar](https://electron.atom.io/docs/tutorial/application-packaging/#adding-unpacked-files-in-asar-archive).\n\n`ipfsd-ctl` will try to detect if used from within an `app.asar` archive and tries to resolve ipfs from `app.asar.unpacked`. The ipfs binary is part of the `go-ipfs-dep` module.\n\n```bash\nelectron-packager ./ --asar.unpackDir=node_modules/go-ipfs-dep\n```\n\nSee [electron asar example](https://github.com/ipfs/js-ipfsd-ctl/tree/master/examples/electron-asar/)\n\n## Development\n\nProject structure:\n\n```\nsrc\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 defaults\n\xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 config.json\n\xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 options.json\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 endpoint                    # endpoint to support remote spawning\n\xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 routes.js\n\xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 server.js\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 factory-client.js           # IPFS Factories: client (remote), daemon (go or js) and in-proc (js)\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 factory-daemon.js\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 factory-in-proc.js\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 index.js\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 ipfsd-client.js             # ipfsd (Daemon Controller): client (remote), daemon (go or js), in-proc (js)\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 ipfsd-daemon.js\n\xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 ipfsd-in-proc.js\n\xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 utils                       # Utils used by the Factories and Daemon Controllers\n    \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 configure-node.js\n    \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 exec.js\n    \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 find-ipfs-executable.js\n    \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 flatten.js\n    \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 parse-config.js\n    \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 repo\n    \xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 create-browser.js\n    \xe2\x94\x82\xc2\xa0\xc2\xa0 \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 create-nodejs.js\n    \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 run.js\n    \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80 set-config-value.js\n    \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 tmp-dir.js\n\n4 directories, 21 files\n```\n\n## Contribute\n\nFeel free to join in. All welcome. Open an [issue](https://github.com/ipfs/js-ipfsd-ctl/issues)!\n\nThis repository falls under the IPFS [Code of Conduct](https://github.com/ipfs/community/blob/master/code-of-conduct.md).\n\n[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/contributing.md)\n\n## License\n\n[MIT](LICENSE)\n"