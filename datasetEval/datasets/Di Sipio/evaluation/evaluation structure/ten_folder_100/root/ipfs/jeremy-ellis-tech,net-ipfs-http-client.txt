b'# net-ipfs-api v0.4.10\n\n> ![](https://ipfs.io/ipfs/QmQJ68PFMDdAsgCZvA1UVzzn18asVcf7HVvCDgpjiSCAse)\n\n> The .NET portable class library (PCL) for the InterPlanetary File System (IPFS) API.\n\nThis library should be easy to use if you\'re familiar with the IPFS CLI. Top level commands (eg. `ipfs cat`, `ipfs add`) are methods in `IpfsClient`. Subcommands are methods in the IPFS client\'s properties named after the subcommands.\n\nie. `ipfs swarm peers` becomes `ipfs.Swarm.Peers()` and `ipfs add <file>` becomes `ipfs.Add(file)`. Easy!\n\nThe only exception is if a valid \'top level\' command has subcommands, since C# can\'t have methods and properties with the same name. ie. `ipfs config` and `ipfs config edit` become `ipfs.ConfigCommand()` and `ipfs.Config.Edit()`.\n\nCLI arguments are required method parameters and CLI options are optional method parameters.\n\n## NuGet\nThis library is available on [NuGet](https://www.nuget.org/packages/net-ipfs-api).\n\nYou can install it with the NuGet package manager:\n\n    PM> Install-Package net-ipfs-api\n    \n\n## Examples\n\n### Adding & reading a file:\n\n    using (var ipfs = new IpfsClient())\n    {\n      //Name of the file to add\n      string fileName = "test.txt";\n\n      //Wrap our stream in an IpfsStream, so it has a file name.\n      IpfsStream inputStream = new IpfsStream(fileName, File.OpenRead(fileName));\n\n      MerkleNode node = await ipfs.Add(inputStream);\n\n      Stream outputStream = await ipfs.Cat(node.Hash);\n\n      using(StreamReader sr = new StreamReader(outputStream))\n      {\n        string contents = sr.ReadToEnd();\n\n        Console.WriteLine(contents); //Contents of test.txt are printed here!\n      }\n    }\n\n\n### Disconnect from all peers:\n    using (var ipfs = new IpfsClient())\n    {\n        var peers = await ipfs.Swarm.Peers();\n        await ipfs.Swarm.Disconnect(peers);\n    }\n    \n### Cancellation support\n\n    try\n    {\n        var cts = new CancellationTokenSource(1000);\n        \n        using (var httpClient = new HttpClient() { Timeout = Timeout.InfiniteTimeSpan })\n        using (var ipfsClient = new IpfsClient(new Uri("http://127.0.0.1:5001"), httpClient))\n        {\n            //The CancellationTokenSource will cancel the task after 1 second\n            //Simulate a 2 second delay for this example to ensure the task gets cancelled\n            await Task.Delay(2000);\n            var result = await ipfsClient.Cat("QmPb8TjUbiRm1M9pvz8QW14PfBjkQyRitnJCZ95oRTRYBt", cts.Token);\n        }\n    }\n    catch (TaskCanceledException)\n    {\n        Console.WriteLine("The request was canceled");                \n    }\n\n## License\nMIT license, see LICENSE for details\n\n## Thanks\nThanks to [@slothbag](https://github.com/slothbag) & [@timothyparez](https://github.com/timothyparez)\n'