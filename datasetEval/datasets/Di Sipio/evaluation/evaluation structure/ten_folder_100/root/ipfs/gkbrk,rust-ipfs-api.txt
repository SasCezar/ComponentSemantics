b'# Rust IPFS API Client\n\n[![Crates.io](https://img.shields.io/crates/v/ipfsapi.svg)](https://crates.io/crates/ipfsapi) [![Docs.rs](https://img.shields.io/badge/docs-ipfsapi-brightgreen.svg)](https://docs.rs/ipfsapi)\n\nA client library for the IPFS API.\n\nThis library allows you to use the local IPFS daemon from Rust.\n\n## Usage\n```toml\n[dependencies]\nipfsapi = "0.2"\n```\n\n## Examples\n\n### Reading a file from IPFS\nHere\'s an example that gets the contents of a file from IPFS and displays it.\n\n```rust\nlet api = IpfsApi::new("127.0.0.1", 5001);\n\nlet bytes = api.cat("QmWATWQ7fVPP2EFGu71UkfnqhYXDYH566qy47CnJDgvs8u").unwrap();\nlet data = String::from_utf8(bytes.collect()).unwrap();\n\nprintln!("{}", data);\n```\n\nThe code gets the content of the IPFS hash and displays "Hello World".\n\n### Subsribing to messages on IPFS Pubsub\n\n```rust\nlet api = IpfsApi::new("127.0.0.1", 5001);\n\nlet messages = api.pubsub_subscribe("chat").unwrap();\n\nfor message in messages {\n    println!("{:?}", message);\n}\n```\n\n## Implemented Functionality\n\n* Getting file contents from IPFS (cat)\n* Pubsub\n* IPNS publish and resolve\n* Object/Hash stats (size, etc.)\n* Version information of the daemon\n* Pinning and unpinning files\n* Shut down IPFS daemon\n* Get and put blocks'