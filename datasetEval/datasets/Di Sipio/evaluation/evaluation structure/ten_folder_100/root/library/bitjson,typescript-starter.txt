b'<img height="0" width="0" alt="typescript-starter dark logo" src="https://cloud.githubusercontent.com/assets/904007/23006840/4e2b0c6c-f3d2-11e6-8f32-11384ee0cc4b.png"><img alt="typescript-starter logo" src="https://cloud.githubusercontent.com/assets/904007/23006836/4c67a3b8-f3d2-11e6-8784-12f0a34284d1.png">\n\n[![NPM version](https://img.shields.io/npm/v/typescript-starter.svg)](https://www.npmjs.com/package/typescript-starter)\n[![Codecov](https://img.shields.io/codecov/c/github/bitjson/typescript-starter.svg)](https://codecov.io/gh/bitjson/typescript-starter)\n[![CircleCI](https://img.shields.io/circleci/project/github/bitjson/typescript-starter.svg)](https://circleci.com/gh/bitjson/typescript-starter)\n[![Travis](https://img.shields.io/travis/bitjson/typescript-starter.svg)](https://travis-ci.org/bitjson/typescript-starter)\n[![AppVeyor](https://img.shields.io/appveyor/ci/bitjson/typescript-starter.svg)](https://ci.appveyor.com/project/bitjson/typescript-starter)\n[![GitHub stars](https://img.shields.io/github/stars/bitjson/typescript-starter.svg?style=social&logo=github&label=Stars)](https://github.com/bitjson/typescript-starter)\n\n<p align="center">\n  <img alt="demo of the typescript-starter command-line interface" src="https://cdn.rawgit.com/bitjson/typescript-starter/c3e3b7ec/demo.svg">\n</p>\n\n## Start Now\n\nRun one simple command to install and use the interactive project generator. You\'ll need [Node](https://nodejs.org/) `v10` or later.\n\n```bash\nnpx typescript-starter\n```\n\nThe interactive CLI will help you create and configure your project automatically.\n\n> Since this repo includes [the CLI and it\'s tests](./src/cli), you\'ll only need to fork or clone this project if you want to contribute. If you find this project useful, please consider [leaving a star](https://github.com/bitjson/typescript-starter/stargazers) so others can find it. Thanks!\n\n# Features\n\n* Write **standard, future javascript** \xe2\x80\x93 with stable ESNext features \xe2\x80\x93 today ([stage 3](https://github.com/tc39/proposals) or [finished](https://github.com/tc39/proposals/blob/master/finished-proposals.md) features)\n* [Optionally use typescript](https://medium.freecodecamp.org/its-time-to-give-typescript-another-chance-2caaf7fabe61) to improve tooling, linting, and documentation generation\n* Export as a [javascript module](http://jsmodules.io/), making your work **fully tree-shakable** for consumers capable of using [es6 imports](https://github.com/rollup/rollup/wiki/pkg.module) (like [Rollup](http://rollupjs.org/), [Webpack](https://webpack.js.org/), or [Parcel](https://parceljs.org/))\n* Export type declarations to improve your downstream development experience\n* Backwards compatibility for Node.js-style (CommonJS) imports\n* Both strict and flexible [typescript configurations](config/tsconfig.json) available\n\nSo we can have nice things:\n\n* Generate API documentation (HTML or JSON) [without a mess of JSDoc tags](https://blog.cloudflare.com/generating-documentation-for-typescript-projects/) to maintain\n* Collocated, atomic, concurrent unit tests with [AVA](https://github.com/avajs/ava)\n* Source-mapped code coverage reports with [nyc](https://github.com/istanbuljs/nyc)\n* Configurable code coverage testing (for continuous integration)\n* Automatic linting and formatting using [TSLint](https://github.com/palantir/tslint) and [Prettier](https://prettier.io/)\n\n## But first, a good editor\n\nBefore you start, consider using an [editor with good typescript support](https://github.com/Microsoft/TypeScript/wiki/TypeScript-Editor-Support).\n\n[VS Code](https://code.visualstudio.com/) (below) is a popular option. Editors with typescript support can provide helpful autocomplete, inline documentation, and code refactoring features.\n\nAlso consider installing editor extensions for [TSLint](https://github.com/Microsoft/vscode-tslint) and [Prettier](https://github.com/prettier/prettier-vscode). These extensions automatically format your code each time you save, and may quickly become invaluable.\n\n<p align="center">\n  <img alt="Typescript Editor Support \xe2\x80\x93 vscode" width="600" src="https://cloud.githubusercontent.com/assets/904007/23042221/ccebd534-f465-11e6-838d-e2449899282c.png">\n</p>\n\n# Developing with typescript-starter\n\n## Development zen\n\nTo start working, run the `watch` task using [`npm`](https://docs.npmjs.com/getting-started/what-is-npm) or [`yarn`](https://yarnpkg.com/).\n\n```bash\nnpm run watch\n```\n\nThis starter includes a watch task which makes development faster and more interactive. It\'s particularly helpful for [TDD](https://en.wikipedia.org/wiki/Test-driven_development)/[BDD](https://en.wikipedia.org/wiki/Behavior-driven_development) workflows.\n\nThe watch task will build and watch the entire project for changes (to both the library source files and test source files). As you develop, you can add tests for new functionality \xe2\x80\x93 which will initially fail \xe2\x80\x93 before developing the new functionality. Each time you save, any changes will be rebuilt and retested.\n\n<p align="center">\n  <!-- PR request: capture the magic of using a test-running watch task for development -->\n  <img alt="typescript-starter\'s watch task" src="https://user-images.githubusercontent.com/904007/37270842-c05f5192-25a6-11e8-83bb-1981ae48e38e.png">\n</p>\n\nSince only changed files are rebuilt and retested, this workflow remains fast even for large projects.\n\n## Enable stronger type checking (recommended)\n\nTo make getting started easier, the default `tsconfig.json` is using a very flexible configuration. This will allow you to get started without many warnings from Typescript.\n\nTo enable additional Typescript type checking features (a good idea for mission-critical or large projects), review the commented-out lines in your [typescript compiler options](./tsconfig.json).\n\n## View test coverage\n\nTo generate and view test coverage, run:\n\n```bash\nnpm run cov\n```\n\nThis will create an HTML report of test coverage \xe2\x80\x93 source-mapped back to Typescript \xe2\x80\x93 and open it in your default browser.\n\n<p align="center">\n  <img height="600" alt="source-mapped typescript test coverage example" src="https://cloud.githubusercontent.com/assets/904007/22909301/5164c83a-f221-11e6-9d7c-72c924fde450.png">\n</p>\n\n## Generate your API docs\n\nThe src folder is analyzed and documentation is automatically generated using [TypeDoc](https://github.com/TypeStrong/typedoc).\n\n```bash\nnpm run doc\n```\n\nThis command generates API documentation for your library in HTML format and opens it in a browser.\n\nSince types are tracked by Typescript, there\'s no need to indicate types in JSDoc format. For more information, see the [TypeDoc documentation](http://typedoc.org/guides/doccomments/).\n\nTo generate and publish your documentation to [GitHub Pages](https://pages.github.com/) use the following command:\n\n```bash\nnpm run doc:publish\n```\n\nOnce published, your documentation should be available at the proper GitHub Pages URL for your repo. See [`typescript-starter`\'s GitHub Pages](https://bitjson.github.io/typescript-starter/) for an example.\n\n<p align="center">\n  <img height="500" alt="TypeDoc documentation example" src="https://cloud.githubusercontent.com/assets/904007/22909419/085b9e38-f222-11e6-996e-c7a86390478c.png">\n</p>\n\nFor more advanced documentation generation, you can provide your own [TypeDoc theme](http://typedoc.org/guides/themes/), or [build your own documentation](https://blog.cloudflare.com/generating-documentation-for-typescript-projects/) using the JSON TypeDoc export:\n\n```bash\nnpm run doc:json\n```\n\n## Bump version, update changelog, commit, & tag release\n\nIt\'s recommended that you install [`commitizen`](https://github.com/commitizen/cz-cli) to make commits to your project.\n\n```bash\nnpm install -g commitizen\n\n# commit your changes:\ngit cz\n```\n\nThis project is tooled for [conventional changelog](https://github.com/conventional-changelog/conventional-changelog) to make managing releases easier. See the [standard-version](https://github.com/conventional-changelog/standard-version) documentation for more information on the workflow, or [`CHANGELOG.md`](CHANGELOG.md) for an example.\n\n```bash\n# bump package.json version, update CHANGELOG.md, git tag the release\nnpm run version\n```\n\nYou may find a tool like [**`wip`**](https://github.com/bitjson/wip) helpful for managing work in progress before you\'re ready to create a meaningful commit.\n\n## One-step publish preparation script\n\nBringing together many of the steps above, this repo includes a one-step release preparation command.\n\n```bash\n# Prepare a standard release:\nnpm run prepare-release\n```\n\nThis command runs the following tasks:\n\n* `reset`: cleans the repo by removing all untracked files and resetting `--hard` to the latest commit. (**Note: this could be destructive.**)\n* `test`: build and fully test the project\n* `docs:html`: generate the latest version of the documentation\n* `docs:publish`: publish the documentation to GitHub Pages\n* `version`: bump package.json version, update CHANGELOG.md, and git tag the release\n\nWhen the script finishes, it will log the final command needed to push the release commit to the repo and publish the package on the `npm` registry:\n\n```bash\ngit push --follow-tags origin master; npm publish\n```\n\nLook over the release if you\'d like, then execute the command to publish everything.\n\nYou can also prepare a non-standard release:\n\n```bash\n# Or a non-standard release:\n\n# Reset the repo to the latest commit and build everything\nnpm run reset && npm run test && npm run cov:check && npm run doc:html\n\n# Then version it with standard-version options. e.g.:\n# don\'t bump package.json version\nnpm run version -- --first-release\n\n# Other popular options include:\n\n# PGP sign it:\n# $ npm run version -- --sign\n\n# alpha release:\n# $ npm run version -- --prerelease alpha\n\n# And don\'t forget to push the docs to GitHub pages:\nnpm run doc:publish\n```\n\n## Describe package scripts\n\nYou can run the `describe` script for a description of the available package scripts.\n\n```\nnpm run describe\n\n> npm-scripts-info\n\ninfo:\n  Display information about the package scripts\nbuild:\n  Clean and rebuild the project\nfix:\n  Try to automatically fix any linting problems\ntest:\n  Lint and unit test the project\nwatch:\n  Watch and rebuild the project on save, then rerun relevant tests\ncov:\n  Rebuild, run tests, then create and open the coverage report\ndoc:\n  Generate HTML API documentation and open it in a browser\ndoc:json:\n  Generate API documentation in typedoc JSON format\nversion:\n  Bump package.json version, update CHANGELOG.md, tag release\nreset:\n  Delete all untracked files and reset the repo to the last commit\nprepare-release:\n  One-step: clean, build, test, publish docs, and prep a release\n```\n\n# FAQs\n\n## Why are there two builds? (`main` and `module`)\n\nThe `src` of `typescript-starter` is compiled into two separate builds: `main` and `module`. The `main` build is [configured to use the CommonJS module system](https://github.com/bitjson/typescript-starter/blob/master/tsconfig.json#L8). The `module` build [uses the new es6 module system](https://github.com/bitjson/typescript-starter/blob/master/config/tsconfig.module.json).\n\nBecause Node.js LTS releases do not yet support the es6 module system, some projects which depend on your project will follow the `main` field in [`package.json`](https://github.com/bitjson/typescript-starter/blob/master/package.json). Tools which support the new system (like [Rollup](https://github.com/rollup/rollup), [Webpack](https://webpack.js.org/), or [Parcel](https://parceljs.org/)) will follow the `module` field, giving them the ability to statically analyze your project. These tools can tree-shake your `module` build to import only the code they need.\n\n## Why put tests next to the source code?\n\nBy convention, sample tests in this project are adjacent to the files they test.\n\n* Such tests are easy to find.\n* You see at a glance if a part of your project lacks tests.\n* Nearby tests can reveal how a part works in context.\n* When you move the source (inevitable), you remember to move the test.\n* When you rename the source file (inevitable), you remember to rename the test file.\n\n(Bullet points taken from [Angular\'s Testing Guide](https://angular.io/guide/testing#q-spec-file-location).)\n\n## Can I move the tests?\n\nYes. For some projects, separating tests from the code they test may be desirable. This project is already configured to test any `*.spec.ts` files located in the `src` directory, so reorganize your tests however you\'d like. You can put them all in a single folder, add tests that test more than one file, or mix and match strategies (e.g. for other types of tests, like integration or e2e tests).\n\n## Can I use ts-node for all the things?\n\nTests are compiled and performed on the final builds in the standard Node.js runtime (rather than an alternative like [ts-node](https://github.com/TypeStrong/ts-node)) to ensure that they pass in that environment. If you are build a Node.js application, and you are using [ts-node in production](https://github.com/TypeStrong/ts-node/issues/104), you can modify this project to use `ts-node` rather than a `build` step.\n\n**However, if you\'re building any kind of library, you should always compile to javascript.**\n\nLibrary authors sometimes make the mistake of distributing their libraries in typescript. Intuitively, this seems like a reasonable course of action, especially if all of your intended consumers will be using typescript as well.\n\nTypeScript has versions, and different versions of TypeScript may not be compatible. Upgrading to a new major version of TypeScript sometimes requires code changes, and must be done project-by-project. Additionally, if you\'re using the latest version of TypeScript to build your library, and one of your consumers is using an older version in their application, their compiler will be unable to compile your library.\n\n## How do I bundle my library for the browser?\n\nThe short answer is: **don\'t pre-bundle your library**.\n\nPrevious versions of `typescript-starter` included browser bundling using [Rollup](https://github.com/rollup/rollup). This feature has since been removed, since very few libraries should ever be pre-bundled.\n\nIf the consumer of your library is using Node.js, bundling is especially unnecessary, since Node.js can reliably resolve dependencies, and bundling may even make debugging more difficult.\n\nIf the consumer of your library is a browser application, **the application likely has its own build tooling**. Very few serious applications are manually bundling their javascript, especially with easy to use, no configuration tools like [Parcel](https://parceljs.org/) available.\n\nYour library is most useful to downstream consumers as a clean, modular codebase, properly exporting features using es6 exports. Consumers can import the exact es6 exports they need from your library, and tree-shake the rest.\n\n## How can my library provide different functionality between Node.js and the browser?\n\nIn the past, complex javascript libraries have used solutions like [Browserify](http://browserify.org/) to bundle a version of their application for the browser. Most of these solutions work by allowing library developers to extensively configure and manually override various dependencies with respective browser versions.\n\nFor example, where a Node.js application might use Node.js\' built-in [`crypto` module](https://nodejs.org/api/crypto.html), a browser version would need to fall back to a polyfill-like alternative dependency like [`crypto-browserify`](https://github.com/crypto-browserify/crypto-browserify).\n\nWith es6, this customization and configuration is no longer necessary. Your library can now export different functionality for different consumers. While browser consumers may import a native JavaScript crypto implementation which your library exports, Node.js users can choose to import a different, faster implementation which your library exports.\n\nSee [hash.ts](./src/lib/hash.ts) for a complete example. Two different functions are exported, `sha256`, and `sha256Native`. Browser consumers will not be able to import `sha256Native`, since their bundler will be unable to resolve the built-in Node.js dependency (their bundler will throw an error). Node.js users, however, will be able to import it normally. Each consumer can import the exact functionality they need.\n\nOne perceived downside of this solution is that it complicates the library\'s API. Browser consumers will sometimes import one feature while Node.js users import another. While this argument has merit, we should weigh it against the benefits.\n\nProviding a public API where consumer code is the same between browsers and Node.js is desirable, but it comes at the cost of significant configuration and complexity. In many cases, it requires that code be aware of its environment at runtime, requiring additional complexity and testing.\n\nA better way to provide this developer experience is to provide similar APIs for each environment, and then encourage the use of es6 import aliasing to standardize between them.\n\nFor example, in the documentation for `typescript-starter`, we encourage Node.js users to import `sha256Native as sha256`. With this convention, we get a standard API without loaders or dependency substitution hacks.\n\n```js\n// browser-application.js\nimport { sha256 } from \'typescript-starter\';\n\n// fully-portable code\nconsole.log(sha256(\'test\'));\n```\n\n```js\n// node-application.js\nimport { sha256Native as sha256 } from \'typescript-starter\';\n\n// fully-portable code\nconsole.log(sha256(\'test\'));\n```\n\n## What about Git hooks to validate commit messages?\n\nThis project uses [standard-version](https://github.com/conventional-changelog/standard-version) to automatically update the changelog based on commit messages since the last release. To do this, each relevant commit must be properly formatted.\n\nTo ensure all commits follow the proper conventions, you can use a package like [commitlint](https://github.com/marionebl/commitlint) with [Husky](https://github.com/typicode/husky). However, keep in mind that commit hooks can be confusing, especially for new contributors. They also interfere with some development tools and workflows.\n\nIf your project is private, or will primarily receive contributions from long-running contributors, this may be a good fit. Otherwise, this setup may raise the barrier to one-off contributions slightly.\n\nNote, as a maintainer, if you manage your project on GitHub or a similar website, you can now use the `Squash and Merge` option to add a properly formatted, descriptive commit messages when merging each pull request. This is likely to be more valuable than trying to force one-time contributors to adhere to commit conventions, since you can also maintain a more consistent language style. Because this is the best choice for the vast majority of projects, `typescript-starter` does not bundle any commit message validation.\n\n# Contributing\n\nTo work on the CLI, clone and build the repo, then use `npm link` to install it globally.\n\n```\ngit clone https://github.com/bitjson/typescript-starter.git\ncd typescript-starter\nnpm install\nnpm test\nnpm link\n```\n\nTo manually test the CLI, you can use the `TYPESCRIPT_STARTER_REPO_URL` environment variable to test a clone from your local repo. Run `npm run watch` as you\'re developing, then in a different testing directory:\n\n```\nmkdir typescript-starter-testing\ncd typescript-starter-testing\nTYPESCRIPT_STARTER_REPO_URL=\'/local/path/to/typescript-starter\' typescript-starter\n```\n\nYou can also set `TYPESCRIPT_STARTER_REPO_URL` to any valid Git URL, such as your fork of this repo:\n\n```\nTYPESCRIPT_STARTER_REPO_URL=\'https://github.com/YOUR_USERNAME/typescript-starter.git\' typescript-starter\n```\n\nIf `TYPESCRIPT_STARTER_REPO_BRANCH` is not provided, it will default to `master`.\n\nIf you\'re using [VS Code](https://code.visualstudio.com/), the `Debug CLI` launch configuration also allows you to immediately build and step through execution of the CLI.\n\n# In the wild\n\nYou can find more advanced configurations, usage examples, and inspiration from other projects using `typescript-starter`:\n\n* [BitAuth](https://github.com/bitauth/) \xe2\x80\x93 A universal identity and authentication protocol, based on bitcoin\n* [s6: Super Simple Secrets \\* Simple Secure Storage](https://gitlab.com/td7x/s6/) \xe2\x80\x93 An NPM library and tool to sprawl secrets with S3, ease, and encryption\n\nUsing `typescript-starter` for your project? Please send a pull request to add it to the list!\n'