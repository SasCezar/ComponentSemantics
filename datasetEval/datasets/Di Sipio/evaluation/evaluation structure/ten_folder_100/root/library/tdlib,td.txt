b'# TDLib\n\nTDLib (Telegram Database library) is a cross-platform library for building [Telegram](https://telegram.org) clients. It can be easily used from almost any programming language.\n\n## Table of Contents\n- [Features](#features)\n- [Examples and documentation](#usage)\n- [Dependencies](#dependencies)\n- [Building](#building)\n- [Installing dependencies](#installing-dependencies)\n- [Using in CMake C++ projects](#using-cxx)\n- [Using in Java projects](#using-java)\n- [Using in .NET projects](#using-dotnet)\n- [Using with other programming languages](#using-json)\n- [License](#license)\n\n<a name="features"></a>\n## Features\n\n`TDLib` has many advantages. Notably `TDLib` is:\n\n* **Cross-platform**: `TDLib` can be used on Android, iOS, Windows, macOS, Linux, FreeBSD, OpenBSD, NetBSD, Windows Phone, WebAssembly, watchOS, tvOS, Tizen, Cygwin. It should also work on other *nix systems with or without minimal effort.\n* **Multilanguage**: `TDLib` can be easily used with any programming language that is able to execute C functions. Additionally it already has native Java (using `JNI`) bindings and .NET (using `C++/CLI` and `C++/CX`) bindings.\n* **Easy to use**: `TDLib` takes care of all network implementation details, encryption and local data storage.\n* **High-performance**: in the [Telegram Bot API](https://core.telegram.org/bots/api), each `TDLib` instance handles more than 24000 active bots simultaneously.\n* **Well-documented**: all `TDLib` API methods and public interfaces are fully documented.\n* **Consistent**: `TDLib` guarantees that all updates are delivered in the right order.\n* **Reliable**: `TDLib` remains stable on slow and unreliable Internet connections.\n* **Secure**: all local data is encrypted using a user-provided encryption key.\n* **Fully-asynchronous**: requests to `TDLib` don\'t block each other or anything else, responses are sent when they are available.\n\n<a name="usage"></a>\n## Examples and documentation\nTake a look at our [examples](https://github.com/tdlib/td/blob/master/example/README.md#tdlib-usage-and-build-examples).\n\nSee our [Getting Started](https://core.telegram.org/tdlib/getting-started) tutorial for a description of basic TDLib concepts.\n\nSee a [TDLib build instructions generator](https://tdlib.github.io/td/build.html) for detailed instructions on how to build TDLib.\n\nSee description of our [JSON](#using-json), [C++](#using-cxx), [Java](#using-java) and [.NET](#using-dotnet) interfaces.\n\nSee the [td_api.tl](https://github.com/tdlib/td/blob/master/td/generate/scheme/td_api.tl) scheme or the automatically generated [HTML documentation](https://core.telegram.org/tdlib/docs/td__api_8h.html)\nfor a list of all available `TDLib` [methods](https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_function.html) and [classes](https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_object.html).\n\n<a name="dependencies"></a>\n## Dependencies\n`TDLib` depends on:\n\n* C++14 compatible compiler (Clang 3.4+, GCC 4.9+, MSVC 19.0+ (Visual Studio 2015+), Intel C++ Compiler 17+)\n* OpenSSL\n* zlib\n* gperf (build only)\n* CMake (3.0.2+, build only)\n* PHP (optional, for documentation generation)\n* Doxygen (optional, for documentation generation)\n\n<a name="building"></a>\n## Building\n\nThe simplest way to build `TDLib` is to use our [TDLib build instructions generator](https://tdlib.github.io/td/build.html).\nYou need only to choose your programming language and target operating system to receive complete build instructions.\n\nIn general, you need to install all `TDLib` [dependencies](#dependencies) as described in [Installing dependencies](#installing-dependencies).\nThen enter directory containing `TDLib` sources and compile them using CMake:\n\n```\nmkdir build\ncd build\ncmake -DCMAKE_BUILD_TYPE=Release ..\ncmake --build .\n```\n\nTo build `TDLib` on low memory devices you can run [SplitSource.php](https://github.com/tdlib/td/blob/master/SplitSource.php) script\nbefore compiling main `TDLib` source code and compile only needed targets:\n```\nmkdir build\ncd build\ncmake -DCMAKE_BUILD_TYPE=Release ..\ncmake --build . --target prepare_cross_compiling\ncd ..\nphp SplitSource.php\ncd build\ncmake --build . --target tdjson\ncmake --build . --target tdjson_static\ncd ..\nphp SplitSource.php --undo\n```\nIn our tests clang 6.0 with libc++ required less than 500 MB of RAM per file and GCC 4.9/6.3 used less than 1 GB of RAM per file.\n\n<a name="installing-dependencies"></a>\n### Installing dependencies\n\n<a name="macos"></a>\n#### macOS\n* Install the latest Xcode command line tools, for example, via `xcode-select --install`.\n* Install other [dependencies](#dependencies), for example, using [Homebrew](https://brew.sh):\n```\nbrew install gperf cmake openssl\n```\n* Build `TDLib` with CMake as explained in [building](#building). You will likely need to manually specify path to the installed OpenSSL to CMake, e.g.,\n```\ncmake -DCMAKE_BUILD_TYPE=Release -DOPENSSL_ROOT_DIR=/usr/local/opt/openssl/ ..\n```\n\n<a name="windows"></a>\n#### Windows\n* Download and install Microsoft Visual Studio 2015 or later.\n* Download and install [gperf](https://sourceforge.net/projects/gnuwin32/files/gperf/3.0.1/). Add the path to gperf.exe to the PATH environment variable.\n* Install [vcpkg](https://github.com/Microsoft/vcpkg#quick-start).\n* Run the following commands to install `TDLib` dependencies using vcpkg:\n```\ncd <path to vcpkg>\n.\\vcpkg.exe install openssl:x64-windows openssl:x86-windows zlib:x64-windows zlib:x86-windows\n```\n* Download and install [CMake](https://cmake.org/download/); choose "Add CMake to the system PATH" option while installing.\n* Build `TDLib` with CMake as explained in [building](#building), but instead of `cmake -DCMAKE_BUILD_TYPE=Release ..` use\n```\ncmake -DCMAKE_TOOLCHAIN_FILE=<path to vcpkg>\\scripts\\buildsystems\\vcpkg.cmake ..\n```\n\nTo build 32-bit/64-bit `TDLib` using MSVC, you will need to additionally specify parameter `-A Win32`/`-A x64` to CMake.\nTo build `TDLib` in Release mode using MSVC, you will need to additionally specify parameter `--config Release` to the `cmake --build .` command.\n\n<a name="linux"></a>\n#### Linux\n* Install all [dependencies](#dependencies) using your package manager.\n\n<a name="using-cxx"></a>\n## Using in CMake C++ projects\nFor C++ projects that use CMake, the best approach is to build `TDLib` as part of your project or to use a prebuilt installation.\n\nThere are several libraries that you could use in your CMake project:\n\n* Td::TdJson, Td::TdJsonStatic\xc2\xa0\xe2\x80\x94 dynamic and static version of a JSON interface. This has a simple C interface, so it can be easily used with any programming language that is able to execute C functions.\n  See [td_json_client](https://core.telegram.org/tdlib/docs/td__json__client_8h.html) and [td_log](https://core.telegram.org/tdlib/docs/td__log_8h.html) documentation for more information.\n* Td::TdStatic \xe2\x80\x94 static library with C++ interface for general usage.\n  See [Client](https://core.telegram.org/tdlib/docs/classtd_1_1_client.html) and [Log](https://core.telegram.org/tdlib/docs/classtd_1_1_log.html) documentation for more information.\n* Td::TdCoreStatic \xe2\x80\x94 static library with low-level C++ interface intended mostly for internal usage.\n  See [ClientActor](https://core.telegram.org/tdlib/docs/classtd_1_1_client_actor.html) and [Log](https://core.telegram.org/tdlib/docs/classtd_1_1_log.html) documentation for more information.\n\nFor example, part of your CMakeLists.txt may look like this:\n```\nadd_subdirectory(td)\ntarget_link_libraries(YourTarget PRIVATE Td::TdStatic)\n```\n\nOr you could install `TDLib` and then reference it in your CMakeLists.txt like this:\n```\nfind_package(Td 1.5.1 REQUIRED)\ntarget_link_libraries(YourTarget PRIVATE Td::TdStatic)\n```\nSee [example/cpp/CMakeLists.txt](https://github.com/tdlib/td/tree/master/example/cpp/CMakeLists.txt).\n\n<a name="using-java"></a>\n## Using in Java projects\n`TDLib` provides native Java interface through JNI. To enable it, specify option `-DTD_ENABLE_JNI=ON` to CMake.\n\nSee [example/java](https://github.com/tdlib/td/tree/master/example/java) for example of using `TDLib` from Java and detailed build and usage instructions.\n\n<a name="using-dotnet"></a>\n## Using in .NET projects\n`TDLib` provides native .NET interface through `C++/CLI` and `C++/CX`. To enable it, specify option `-DTD_ENABLE_DOTNET=ON` to CMake.\n.NET Core doesn\'t support `C++/CLI`, so if .NET Core is used, then `TDLib` JSON interface should be used through P/Invoke instead.\n\nSee [example/csharp](https://github.com/tdlib/td/tree/master/example/csharp) for example of using `TDLib` from C# and detailed build and usage instructions.\nSee [example/uwp](https://github.com/tdlib/td/tree/master/example/uwp) for example of using `TDLib` from C# UWP application and detailed build and usage instructions for Visual Studio Extension "TDLib for Universal Windows Platform".\n\nWhen `TDLib` is built with `TD_ENABLE_DOTNET` option enabled, `C++` documentation is removed from some files. You need to checkout these files to return `C++` documentation back:\n```\ngit checkout td/telegram/Client.h td/telegram/Log.h td/tl/TlObject.h\n```\n\n<a name="using-json"></a>\n## Using from other programming languages\n`TDLib` provides efficient native C++, Java, and .NET interfaces.\nBut for most use cases we suggest to use the JSON interface, which can be easily used with any programming language that is able to execute C functions.\nSee [td_json_client](https://core.telegram.org/tdlib/docs/td__json__client_8h.html) and [td_log](https://core.telegram.org/tdlib/docs/td__log_8h.html) documentation for detailed JSON interface description,\nthe [td_api.tl](https://github.com/tdlib/td/blob/master/td/generate/scheme/td_api.tl) scheme or the automatically generated [HTML documentation](https://core.telegram.org/tdlib/docs/td__api_8h.html) for a list of\nall available `TDLib` [methods](https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_function.html) and [classes](https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_object.html).\n\n`TDLib` JSON interface adheres to semantic versioning and versions with the same major version number are binary and backward compatible, but the underlying `TDLib` API can be different for different minor and even patch versions.\nIf you need to support different `TDLib` versions, then you can use a value of the `version` option to find exact `TDLib` version to use appropriate API methods.\n\nSee [example/python/tdjson_example.py](https://github.com/tdlib/td/tree/master/example/python/tdjson_example.py) for an example of such usage.\n\n<a name="license"></a>\n## License\n`TDLib` is licensed under the terms of the Boost Software License. See [LICENSE_1_0.txt](http://www.boost.org/LICENSE_1_0.txt) for more information.\n'