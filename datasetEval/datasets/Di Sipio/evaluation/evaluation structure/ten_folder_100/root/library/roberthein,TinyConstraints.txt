b'**TinyConstraints** is the syntactic sugar that makes Auto Layout sweeter for human use.\n\n<p align="center">\n    <img src="Art/header.png" width="890" alt="TinyConstraints"/>\n    <img src="Art/header.gif" width="890" alt="TinyConstraints"/>\n</p>\n\n## Features\n\n- [X] Pure Swift 5 sweetness.\n- [X] Everything you can do with Auto Layout, but shorter.\n- [X] Constraints are active by default.\n- [X] 100% compatible with other Auto Layout code.\n- [X] Optionally store your constraints.\n- [X] Set constraint priorities upon creation.\n- [X] Constrain directly to the superview.\n- [X] Stack views together with one line of code.\n- [X] No need to set `translatesAutoresizingMaskIntoConstraints` because `TinyConstraints` does it for you.\n\n## Examples\n### Edges\nAttaching a view to its superview with `NSLayoutConstraint`:\n\n```swift\nNSLayoutConstraint.activate([\n    view.topAnchor.constraint(equalTo: superview.topAnchor, constant: 0),\n    view.leadingAnchor.constraint(equalTo: superview.leadingAnchor, constant: 0),\n    view.bottomAnchor.constraint(equalTo: superview.bottomAnchor, constant: 0),\n    view.trailingAnchor.constraint(equalTo: superview.trailingAnchor, constant: 0)\n])\n```\n\nwith `TinyConstraints`:\n\n```swift\nview.edgesToSuperView()\n```\n\nor:\n\n```swift\nview.edgesToSuperView(insets: .top(10) + .left(10))\n```\n### Center\nConstraining the center of a view to its superview with `NSLayoutConstraint`:\n\n```swift\nNSLayoutConstraint.activate([\n    view.centerXAnchor.constraint(equalTo: superview.centerXAnchor, constant: 0)\n    view.centerYAnchor.constraint(equalTo: superview.centerYAnchor, constant: 0)\n])\n```\n\nwith `TinyConstraints`:\n\n```swift\nview.center(in: superview)\n```\n\nor:\n\n```swift\nview.center(in: superview, offset: CGPoint(x: 10, y: 10))\n```\n\n## Basic Use\n\n### Typealiases\n\n`TinyConstraints` gives you convenient and tiny typealiases for handling constraints.\n\n- `Constraint` = `NSLayoutConstraint`\n- `Constraints` = `[NSLayoutConstraint]`\n\n### Equal and Unequal Anchors\nThis constraints the `top-anchor` of the view to the `top-anchor` of the superview:\n\n```swift\nview.top(to: superview)\n```\n\nThis constraints the `top-anchor` of `firstView` to the `bottom-anchor` of `secondView`:\n\n```swift\nfirstView.topToBottom(of: secondView)\n```\n\n### Constrain to Superview\nOften you need to constrain a view to it\'s superview, with TinyConstraints you can do this super easy:\n\n```swift\nview.edgesToSuperview()\n```\n\nOr only one edge:\n\n```swift\nview.topToSuperview()\n```\n\nOr you can attach all edges except one, like this:\n\n```swift\nview.edgesToSuperview(excluding: .bottom)\n```\n\n### Relation and Priority\nFor almost all constraints you can set the `relation` and `priority` properties. The default relation is `.equal` and the default priority is `.required`:\n\n```swift\ncontainer.width(150, relation: .equalOrLess, priority: .high)\n```\n\n### Storing Constraints\nHere we create a set of inactive constraints and store these to our property:\n\n```swift\nlet constraints = view.size(CGSize(width: 100, height: 100), isActive: false)\n```\n\n### Activation and Deactivation\nBesides the default `NSLayoutConstraint` activation, `TinyConstraints` also provides a way to activate *a set* of constraints:\n\n```swift\nconstraints.activate()\n```\n\nYou can also do this in an animation:\n\n```swift\noldConstraints.deActivate()\n\nconstraints.activate()\nUIViewPropertyAnimator(duration: 1, dampingRatio: 0.4) {\n    self.layoutIfNeeded()\n}.startAnimation()\n```\n\n### Animating Constraint Constants\nHere we add a height constraint to a view, store it and animate it later:\n\n```swift\nlet height = view.height(100)\n\nheight.constant = 200\nUIViewPropertyAnimator(duration: 1, dampingRatio: 0.4) {\n    self.layoutIfNeeded()\n}.startAnimation()\n```\n\n### Stack\nStack provides a way of constraining views together in a superview:\n\n```swift\nlet views = [logo, title, description]\nsuperview.stack(views, axis: .vertical, spacing: 10)\n```\n\n##### Find these examples and more in the *Example Project*.\n\n## Installation\n\n### CocoaPods\n\nTinyConstraints is available through [CocoaPods](http://cocoapods.org). To install\nit, simply add the following line to your Podfile:\n\n```ruby\npod "TinyConstraints"\n```\n\n### Carthage\n\nTinyConstraints is available through [Carthage](https://github.com/Carthage/Carthage). To install\nit, simply add the following line to your Cartfile:\n\n```\ngithub "roberthein/TinyConstraints"\n```\n\n## Tutorials\n\nHere are some [video tutorials](https://www.youtube.com/playlist?list=PL_csAAO9PQ8ZDbGk57RlBRnNpxBGBAEOc) made by [Alex Nagy](https://github.com/rebeloper).\n\n\n## Suggestions or feedback?\n\nFeel free to create a pull request, open an issue or find [me on Twitter](https://twitter.com/roberthein).\n'