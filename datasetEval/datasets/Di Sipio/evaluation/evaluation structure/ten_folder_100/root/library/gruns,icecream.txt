b'<h1 align="center">\n  <img src="logo.svg" width="220px" height="370px" alt="icecream">\n</h1>\n\n<p align="center">\n  <a href="https://pypi.python.org/pypi/icecream"><img src="https://badge.fury.io/py/icecream.svg"></a>\n  <a href="https://travis-ci.org/gruns/icecream"><img src="https://img.shields.io/travis/gruns/icecream.svg"></a>\n  <a href="http://unlicense.org/"><img src="https://img.shields.io/pypi/l/icecream.svg"></a>\n  <a href="https://pypi.python.org/pypi/icecream"><img src="https://img.shields.io/pypi/pyversions/icecream.svg"></a>\n</p>\n\n\n### IceCream is a little library for sweet and creamy debugging.\n\nDo you ever use `print()` or `log()` to debug your code? Of course you\ndo. IceCream, or `ic` for short, makes print debugging a little sweeter.\n\nIceCream is well tested, [permissively licensed](LICENSE.txt), and supports\nPython 2, Python 3, PyPy2, and PyPy3.\n\n\n### Inspect Variables\n\nHave you ever printed variables or expressions to debug your program? If you\'ve\never typed something like\n\n```python\nprint(foo(\'123\'))\n```\n\nor the more thorough\n\n\n```python\nprint("foo(\'123\')", foo(\'123\'))\n```\n\nthen `ic()` is here to help. With arguments, `ic()` inspects itself and prints\nboth its own arguments and the values of those arguments.\n\n```python\nfrom icecream import ic\n\ndef foo(i):\n    return i + 333\n\nic(foo(123))\n```\n\nPrints\n\n```\nic| foo(123): 456\n```\n\nSimilarly,\n\n```python\nd = {\'key\': {1: \'one\'}}\nic(d[\'key\'][1])\n\nclass klass():\n    attr = \'yep\'\nic(klass.attr)\n```\n\nPrints\n\n```\nic| d[\'key\'][1]: \'one\'\nic| klass.attr: \'yep\'\n```\n\nJust give `ic()` a variable or expression and you\'re done. Easy.\n\n\n### Inspect Execution\n\nHave you ever used `print()` to determine which parts of your program are\nexecuted, and in which order they\'re executed? For example, if you\'ve ever added\nprint statements to debug code like\n\n```python\ndef foo():\n    print(0)\n    first()\n\n    if expression:\n        print(1)\n        second()\n    else:\n        print(2)\n        third()\n```\n\nthen `ic()` helps here, too. Without arguments, `ic()` inspects itself and\nprints the calling filename, line number, and parent function.\n\n```python\nfrom icecream import ic\n\ndef foo():\n    ic()\n    first()\n    \n    if expression:\n        ic()\n        second()\n    else:\n        ic()\n        third()\n```\n\nPrints\n\n```\nic| example.py:4 in foo()\nic| example.py:11 in foo()\n```\n\nJust call `ic()` and you\'re done. Simple.\n\n\n### Return Value\n\n`ic()` returns its argument(s), so `ic()` can easily be inserted into\npre-existing code.\n\n```pycon\n>>> a = 6\n>>> def half(i):\n>>>     return i / 2\n>>> b = half(ic(a))\nic| a: 6\n>>> ic(b)\nic| b: 3\n```\n\n\n### Miscellaneous\n\n`ic.format(*args)` is like `ic()` but the output is returned as a string instead\nof written to stderr.\n\n```pycon\n>>> from icecream import ic\n>>> s = \'sup\'\n>>> out = ic.format(s)\n>>> print(out)\nic| s: \'sup\'\n```\n\nAdditionally, `ic()`\'s output can be entirely disabled, and later re-enabled, with\n`ic.disable()` and `ic.enable()` respectively.\n\n```python\nfrom icecream import ic\n\nic(1)\n\nic.disable()\nic(2)\n\nic.enable()\nic(3)\n```\n\nPrints\n\n```\nic| 1: 1\nic| 3: 3\n```\n\n`ic()` continues to return its arguments when disabled, of course; no existing\ncode with `ic()` breaks.\n\n\n### Configuration\n\n`ic.configureOutput(prefix, outputFunction, argToStringFunction,\nincludeContext)` can be used to adopt a custom output prefix (the default is\n`ic| `), change the output function (default is to write to stderr), customize\nhow arguments are serialized to strings, and/or include the `ic()` call\'s\ncontext (filename, line number, and parent function) in `ic()` output with\narguments.\n\n```pycon\n>>> from icecream import ic\n>>> ic.configureOutput(prefix=\'hello -> \')\n>>> ic(\'world\')\nhello -> \'world\': \'world\'\n```\n\n`prefix` can optionally be a function, too.\n\n```pycon\n>>> import time\n>>> from icecream import ic\n>>>  \n>>> def unixTimestamp():\n>>>     return \'%i |> \' % int(time.time())\n>>>\n>>> ic.configureOutput(prefix=unixTimestamp)\n>>> ic(\'world\')\n1519185860 |> \'world\': \'world\'\n```\n\n`outputFunction`, if provided, is called with `ic()`\'s output instead of that\noutput being written to stderr (the default).\n\n```pycon\n>>> import logging\n>>> from icecream import ic\n>>>\n>>> def warn(s):\n>>>     logging.warning(s)\n>>>\n>>> ic.configureOutput(outputFunction=warn)\n>>> ic(\'eep\')\nWARNING:root:ic| \'eep\': \'eep\'\n```\n\n`argToStringFunction`, if provided, is called with argument values to be\nserialized to displayable strings. The default is PrettyPrint\'s\n[pprint.pformat()](https://docs.python.org/3/library/pprint.html#pprint.pformat),\nbut this can be changed to, for example, handle non-standard datatypes in a\ncustom fashion.\n\n```pycon\n>>> from icecream import ic\n>>> \n>>> def toString(obj):\n>>>    if isinstance(obj, str):\n>>>        return \'[!string %r with length %i!]\' % (obj, len(obj))\n>>>    return repr(obj)\n>>> \n>>> ic.configureOutput(argToStringFunction=toString)\n>>> ic(7, \'hello\')\nic| 7: 7, \'hello\': [!string \'hello\' with length 5!]\n```\n\n`includeContext`, if provided and True, adds the `ic()` call\'s filename, line\nnumber, and parent function to `ic()`\'s output.\n\n```pycon\n>>> from icecream import ic\n>>> ic.configureOutput(includeContext=True)\n>>> \n>>> def foo():\n>>>   ic(\'str\')\n>>> foo()\nic| example.py:12 in foo()- \'str\': \'str\'\n```\n\n`includeContext` is False by default.\n\n\n### Installation\n\nInstalling IceCream with pip is easy.\n\n```\n$ pip install icecream\n```\n\n\n### Import\n\nIt\'s often useful to import `ic()` in a manner that falls back gracefully\nif IceCream isn\'t installed, like in production environments (i.e. not\ndevelopment). To that end, this fallback import snippet may prove useful:\n\n```python\ntry:\n    from icecream import ic\nexcept ImportError:  # Graceful fallback if IceCream isn\'t installed.\n    ic = lambda *a: None if not a else (a[0] if len(a) == 1 else a)  # noqa\n```\n\n\n### IceCream in Other Languages\n\nIceCream should be enjoyed with every language.\n\n- Dart: [icecream](https://github.com/HallerPatrick/icecream)\n- Rust: [icecream-rs](https://github.com/ericchang00/icecream-rs)\n- Node.js: [node-icecream](https://github.com/jmerle/node-icecream)\n- C++: [IceCream-Cpp](https://github.com/renatoGarcia/icecream-cpp)\n- PHP: [icecream-php](https://github.com/ntzm/icecream-php)\n\nIf you\'d like a similar `ic()` function in your favorite language, please open a\npull request! IceCream\'s goal is to sweeten print debugging with a handy-dandy\n`ic()` function in every language.\n'