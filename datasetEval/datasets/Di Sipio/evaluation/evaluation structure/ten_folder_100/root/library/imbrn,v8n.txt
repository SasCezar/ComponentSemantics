b'<p align="center">\n  <img src="./docs/assets/logo.png" alt="v8n" />\n</p>\n\n<p align="center">\nThe ultimate JavaScript validation library you\'ve ever needed.<br/>\nDead simple fluent API. Customizable. Reusable.\n</p>\n<p align="center">\n  <a href="https://circleci.com/gh/imbrn/v8n/tree/master">\n    <img src="https://circleci.com/gh/imbrn/v8n/tree/master.svg?style=svg" alt="CircleCI" />\n  </a>\n  <img src="https://img.shields.io/npm/v/v8n.svg" alt="npm version" />\n  <img src="https://img.shields.io/bundlephobia/minzip/v8n.svg" alt="npm bundle size (minified + gzip)" />\n</p>\n\n<p align="center">\n<a href="https://imbrn.github.io/v8n/Installation.html">Installation</a> -\n<a href="https://imbrn.github.io/v8n">Documentation</a> -\n<a href="https://imbrn.github.io/v8n/api/">API</a>\n</p>\n\n<p align="center">\n<a href="https://www.buymeacoffee.com/imbrn" target="_blank"><img src="https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png" alt="Buy Me A Coffee" style="height: auto !important;width: auto !important;" ></a>\n</p>\n\n## Introducing v8n\n\n> **v8n** is an acronym for **v**_alidatio_**n**. Notice that it has exactly\n> eight letters between **v** and **n** in the _"validation"_ word. This is the\n> same pattern we are used to seeing with _i18n_, _a11y_, _l10n_ ...\n\n### Chainable API\n\nCreate validations very easily with its chainable API:\n\n```javascript\nv8n()\n  .string()\n  .minLength(5)\n  .first("H")\n  .last("o")\n  .test("Hello"); // true\n```\n\n### Incredibly fluent\n\nMix **rules** and **modifiers** together to create complex validations with\ngreat ease and fluency:\n\n```javascript\nv8n()\n  .array()\n  .every.number()\n  .not.some.negative()\n  .test([1, 2, -3]); // false - no negative please!\n```\n\nSo fluent that it looks like English:\n\n```javascript\nv8n()\n  .some.not.uppercase() // expects that some character is not uppercase\n  .test("Hello"); // true\n\nv8n()\n  .not.some.uppercase() // expects that no character is uppercase\n  .test("Hello"); // false\n```\n\nNotice how we made very different validation strategies just by changing the\norder of the modifiers. It\'s so intuitive that seems to be impossible, but this\nis v8n.\n\n### Customizable\n\nCreate your own **custom validation rules** in a very intuitive way:\n\n```javascript\nfunction foo() {\n  return value => value === "bar";\n}\n\nv8n.extend({ foo });\n```\n\nv8n will treat them like built-in ones:\n\n```javascript\nv8n()\n  .string()\n  .foo()\n  .test("bar"); // true\n```\n\n### Reusable\n\nExport validations just like you\'re used to do with your JavaScript modules:\n\n_specialNumber.js_\n\n```javascript\nimport v8n from "v8n";\n\nexport default v8n()\n  .number()\n  .between(50, 100)\n  .not.even();\n```\n\nand use them anywhere you want:\n\n```javascript\nimport specialNumber from "../specialNumber";\n\nspecialNumber.test(63); // true\n```\n\n### For any kind of data\n\nUse v8n to validate your data regardless of its type. You can validate\nprimitives, arrays, objects and whatever you want! You can also use them\ntogether!\n\n```javascript\n// numbers\nv8n()\n  .number()\n  .between(5, 10)\n  .test(7); //true\n\n// strings\nv8n()\n  .string()\n  .minLength(3)\n  .test("foo"); // true\n\n// arrays\nv8n()\n  .array()\n  .every.even()\n  .test([2, 4, 6]); // true\n\n// objects\nconst myData = { id: "fe03" };\n\nv8n()\n  .schema({\n    id: v8n().string()\n  })\n  .test(myData); // true\n```\n\n### For any kind of validation\n\nDo simple validations with boolean based tests. Get more information about your\nvalidation process with exception based tests. And of course, perform\nasynchronous tests as well. All in one library.\n\n#### Boolean based validation:\n\n```javascript\nv8n()\n  .string()\n  .first("H")\n  .test("Hello"); // true\n```\n\n#### Exception based validation:\n\n```javascript\ntry {\n  v8n()\n    .string()\n    .first("b")\n    .check("foo");\n} catch (ex) {\n  console.log(ex.rule.name); // first\n}\n```\n\n#### Getting all failures:\n\n```javascript\nconst failed = v8n()\n  .string()\n  .minLength(3)\n  .testAll(10);\n\nfailed;\n// [\n//   ValidationError { rule: { name: "string", ... } },\n//   ValidationError { rule: { name: "minLength", ... } }\n// ]\n```\n\n#### Async validation:\n\nIf your validation strategy has some rule that performs time consuming\nvalidation, like a back-end check, you should use asynchronous validation:\n\n```javascript\nv8n()\n  .somAsyncRule()\n  .testAsync("foo") // returns a Promise\n  .then(result => {\n    /* valid! */\n  })\n  .catch(ex => {\n    /* invalid! */\n  });\n```\n\n### Shareable\n\nShare your rules with the world, and use theirs as well.\n\nCreate useful validation rules and share them with the open source community,\nand let people around the world validate without reinventing the wheel.\n\n### Ready to use!\n\nThere are a lot of built-in rules and modifiers for you to use already\nimplemented in `v8n`\'s core. Take a look at all of them in our\n[API](https://imbrn.github.io/v8n/api/) page. But if you can\'t find what you\nneed, go ahead and make it.\n\n### Tiny!\n\nAll these incredible features for just a few bytes:\n\n![npm bundle size (minified + gzip)](https://img.shields.io/bundlephobia/minzip/v8n.svg)\n\n## Architecture\n\nThe **v8n** core is composed of `rules` and `modifiers`. They are used together\nto build complex validations in an easy way.\n\n### Rules\n\nRules are the heart of the `v8n` ecosystem. You use them to build your\nvalidation strategies:\n\n```javascript\nv8n()\n  .string()\n  .minLength(3)\n  .test("Hello"); // true\n```\n\nIn this code snippet, we\'re using two rules (`string` and `minLength`) to build\nour validation strategy. So our validated value (`"Hello"`) is valid because\nit\'s a string and it is at least 3 characters long.\n\n> Rules can be more powerful if used along with _modifiers_. Learn about them in\n> the next section.\n\n### Modifiers\n\nModifiers can be used to change rules meaning. For example, you can use the\n`not` modifier to expect the reversed result from a rule:\n\n```javascript\nv8n()\n  .not.equal(5)\n  .test(5); // false\n```\n\n> You can check all available modifiers on our documentation page.\n\nModifiers are very powerful. They work as decorators for rules. When used\ntogether, they allow you to build very complex validations.\n\n## Contribute\n\nContributions of any kind are welcome! Read our\n[CONTRIBUTING](./.github/CONTRIBUTING.md) guide.\n\n## License\n\n[MIT License](https://opensource.org/licenses/MIT)\n'