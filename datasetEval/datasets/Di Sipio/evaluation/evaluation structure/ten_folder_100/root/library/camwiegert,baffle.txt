b'# baffle.js\nA tiny javascript library **for obfuscating and revealing text** in DOM elements.\n\n[camwiegert.github.io/baffle](https://camwiegert.github.io/baffle)\n\n> <img src="https://camwiegert.github.io/baffle/assets/images/baffle.js.png" width="500" alt="baffle.js">\n\n\n- ~1.8kb gzipped :zap:\n- Dependency-free :tada:\n- IE9+ :heavy_check_mark:\n\n```javascript\n// Select elements and start.\nconst b = baffle(\'.someSelector\').start();\n\n// Do something else.\nsomeAsyncFunction(result => {\n    // Change the text and reveal over 1500ms.\n    b.text(text => result.text).reveal(1500);\n});\n```\n\n---\n\n## Getting Started\n\n#### Step 0: Install\n\n[Download the latest release](https://raw.githubusercontent.com/camwiegert/baffle/master/dist/baffle.min.js) or install with npm.\n\n```sh\nnpm install --save baffle\n```\n\n#### Step 1: Reference\nIf you linked baffle directly in your HTML, you can use `window.baffle`. If you\'re using a module bundler, you\'ll need to import baffle.\n\n```javascript\n// CommonJS\nconst baffle = require(\'baffle\');\n\n// ES6\nimport baffle from \'baffle\';\n```\n\n#### Step 2: Initialize\nTo initialize baffle, all you need to do is call it with some elements. You can pass a NodeList, Node, or CSS selector.\n\n```javascript\n// With a selector.\nconst b = baffle(\'.baffle\');\n\n// With a NodeList\nconst b = baffle(document.querySelectorAll(\'.baffle\'));\n\n// With a Node\nconst b = baffle(document.querySelector(\'.baffle\'));\n```\n\n#### Step 3: Use It\nOnce you have a baffle instance, you have access to all of the baffle methods. Usually, you\'ll want to `b.start()` and, eventually, `b.reveal()`.\n\n```javascript\n// Start obfuscating...\nb.start();\n\n// Or stop obfuscating...\nb.stop();\n\n// Obfuscate once...\nb.once();\n\n// You can set options after initializing...\nb.set({...options});\n\n// Or change the text at any time...\nb.text(text => \'Hi Mom!\');\n\n// Eventually, you\'ll want to reveal your text...\nb.reveal(1000);\n\n// And they\'re all chainable...\nb.start()\n    .set({ speed: 100 })\n    .text(text => \'Hi dad!\')\n    .reveal(1000);\n```\n\n## Options\nYou can set options on baffle during initialization or anytime afterward with `baffle.set()`.\n\n```javascript\n// During initialize\nbaffle(\'.baffle\', {\n    characters: \'+#-\xe2\x80\xa2=~*\',\n    speed: 75\n});\n\n// Any time with set()\nb.set({\n    characters: \'\xc2\xaf\\_(\xe3\x83\x84)_/\xc2\xaf\',\n    speed: 25\n});\n```\n\n### `options.characters`\n> The characters baffle uses to obfuscate your text. It can be a string or an array of characters.\n>\n> **Default:** `\'AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz~!@#$%^&*()-+=[]{}|;:,./<>?\'`\n\n### `options.exclude`\n> These are the characters that baffle ignores in your text when obfuscating it. You can pass in an array of characters.\n>\n> **Default:** `[\' \']`\n\n### `options.speed`\n> This is the frequency (in milliseconds) at which baffle updates your text when running.\n>\n> **Default:** `50`\n\n## Methods\nAn instance of baffle has six methods, all of which are chainable.\n\n### `baffle.once()`\n> Obfuscates each element once, using `options.characters`.\n\n### `baffle.start()`\n> Starts obfuscating your elements, updating every `options.speed` milliseconds.\n\n### `baffle.stop()`\n> Stops obfuscating your elements. This won\'t reveal your text. It will only stop updating it. To reveal it, use `reveal()`.\n\n### `baffle.reveal([duration], [delay])`\n> Reveals your text over `duration` milliseconds (default: `0`), with the option to delay by `delay` milliseconds.\n\n### `baffle.set([options])`\n> Updates instance options using the passed `options` object. You can set any number of keys, even while running.\n\n### `baffle.text(fn)`\n> Updates the text in each element of your instance using function `fn`, which receives the current text as it\'s only parameter. The value returned from `fn` will be used as the new text.\n\n---\n\n- **License** MIT\n- **Made by** [Cam Wiegert](http://camwiegert.com)\n- **Inspired by** [Oak](http://oak.is/)\n'