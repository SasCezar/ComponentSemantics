b'# Countable\n\n[![Build Status](http://img.shields.io/travis/RadLikeWhoa/Countable.svg)](https://travis-ci.org/RadLikeWhoa/Countable)\n[![Code Climate](https://codeclimate.com/github/RadLikeWhoa/Countable/badges/gpa.svg)](https://codeclimate.com/github/RadLikeWhoa/Countable)\n[![Latest Tag](http://img.shields.io/github/tag/RadLikeWhoa/Countable.svg)](https://github.com/RadLikeWhoa/Countable/tags)\n[![License](http://img.shields.io/badge/license-MIT-orange.svg)](https://github.com/RadLikeWhoa/Countable/blob/master/LICENSE.md)\n\nCountable is a JavaScript function to add **live paragraph-, word- and character-counting** to an HTML element. Countable is a *zero-dependency* library and comes in at **1KB** when minified and gzipped.\n\n[**View the Demo**](http://radlikewhoa.github.io/Countable#demo)\n\n## Installation\n\nThe preferred method of installation is [**npm**](https://www.npmjs.com/) or [**yarn**](https://yarnpkg.com/).\n\n```\nnpm i --save-dev countable\nyarn add --dev countable\n```\n\nAlternatively, you can download the latest [zipball](https://github.com/RadLikeWhoa/Countable/archive/master.zip) or copy the [script](https://raw.github.com/RadLikeWhoa/Countable/master/Countable.js) directly.\n\n## Usage\n\nCountable is available as a Node / CommonJS module, an AMD module and as a global. All methods are accessed on the Countable object directly.\n\n### Callbacks\n\nThe `on` and `count` methods both accept a callback. The given callback is then called whenever needed with a single parameter that carries all the relevant data. `this` is bound to the current element. Take the following code for an example.\n\n```javascript\nCountable.count(document.getElementById(\'text\'), counter => console.log(this, counter))\n```\n\n```\n=> <textarea id="text"></textarea>, { all: 0, characters: 0, paragraphs: 0, words: 0 }\n```\n\nProperty   | Meaning\n---------- | --------------------------------------------------------------------------------------------\nparagraphs | The number of paragraphs. Paragraphs can be separated by either a soft or a hard (two line breaks) return. To use hard returns, set the corresponding option (`hardReturns`).\nsentences  | The number of sentences. Sentences are separated by a sentence-terminating character.\nwords      | The number of words. Words are split using spaces.\ncharacters | The number of characters (without spaces). This contains all non-whitespace characters.\nall        | The number of characters including whitespace. This is the total number of all characters in the element.\n\n### Countable.on(elements, callback, options)\n\nBind the callback to all given elements. The callback gets called every time the element\'s value or text is changed.\n\n```javascript\nCountable.on(area, counter => console.log(counter))\n```\n\n### Countable.off(elements)\n\nRemove the bound callback from all given elements.\n\n```javascript\nCountable.off(area)\n```\n\n### Countable.count(elements, callback, options)\n\nSimilar to `Countable.on()`, but the callback is only executed once, there are no events bound.\n\n```javascript\nCountable.count(area, counter => console.log(counter))\n```\n\n### Countable.enabled(elements)\n\nChecks the live-counting functionality is bound to the given.\n\n```javascript\nCountable.enabled(area)\n```\n\n### Options\n\n`Countable.on()` and `Countable.count()` both accept a third argument, an options object that allows you to change how Countable treats certain aspects of your element\'s text.\n\n```javascript\n{\n  hardReturns: false,\n  stripTags: false,\n  ignore: []\n}\n```\n\nBy default, paragraphs are split by a single return (a soft return). By setting `hardReturns` to true, Countable splits paragraphs after two returns.\n\nDepending on your application and audience, you might need to strip HTML tags from the text before counting it. You can do this by setting `stripTags` to true.\n\nSometimes it is desirable to ignore certain characters. These can be included in an array and passed using the `ignore` option.\n\n## Browser Support\n\nCountable supports all modern browsers. Full ES5 support is expected, as are some ES6 features, namely `let` and `const`.\n'