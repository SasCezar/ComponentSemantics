b'Slidr\n================\n[![Maven Central](https://maven-badges.herokuapp.com/maven-central/com.r0adkll/slidableactivity/badge.svg?style=flat)](https://maven-badges.herokuapp.com/maven-central/com.r0adkll/slidableactivity) [![Android Arsenal](https://img.shields.io/badge/Android%20Arsenal-Slidr-brightgreen.svg?style=flat)](https://android-arsenal.com/details/1/1364)\n[![Build Status](https://travis-ci.org/r0adkll/Slidr.svg?branch=master)](https://travis-ci.org/r0adkll/Slidr)\n\nEasily add slide-to-dismiss functionality to your Activity by calling `Slidr.attach(this)` in your `onCreate(..)` method.\n\n![Slidr Example](images/slidr_gif.gif "Gif Example")\n\n## Usage\n\nAn example usage:\n\n```java\npublic class ExampleActivity extends <Activity|FragmentActivity|ActionBarActivity> {\n\n\t@Override\n\tpublic void onCreate(Bundle savedInstanceState){\n\t\tsuper.onCreate(savedInstanceState);\n\t\tsetContentView(R.layout.activity_example);\n\t\tint primary = getResources().getColor(R.color.primaryDark);\n\t\tint secondary = getResources().getColor(R.color.secondaryDark);\n\t\tSlidr.attach(this, primary, secondary);\n\t}\n\n}\n```\n\nor\n\n```java\npublic class ExampleActivity extends <Activity|FragmentActivity|ActionBarActivity> {\n\n\t@Override\n\tpublic void onCreate(Bundle savedInstanceState){\n\t\tsuper.onCreate(savedInstanceState);\n\t\tsetContentView(R.layout.activity_example);\n        \tSlidr.attach(this);\n\t}\n\n}\n```\n\n## Fragments\nThe activity must extend FragmentActivity.\nSet the background to the main container of the activity in the xml `background="@android:color/transparent"`.\nAdd the following code to the Fragment:\n\n```java\n// This interface is needed to see if the fragment\n// is resuming after creation (Slidr to be attached) or\n// simply from the background (app was paused before).\nSlidrInterface slidrInterface;\n\n@Override\npublic void onResume() {\n    super.onResume();\n    if(slidrInterface == null)\n        slidrInterface = Slidr.replace(getView().findViewById(R.id.content_container), new SlidrConfig.Builder().position(SlidrPosition.LEFT).build());\n}\n```\nIn the xml of the fragment\'s view, the root view must be a FrameLayout with the same background set to the activity before. Add a child viewgroup to it with the id content_container. E.g.:\n\n```xml\n<FrameLayout\n    android:id="@+id/main_container"\n    xmlns:android="http://schemas.android.com/apk/res/android"\n    xmlns:tools="http://schemas.android.com/tools"\n    xmlns:app="http://schemas.android.com/apk/res-auto"\n    android:layout_width="match_parent"\n    android:layout_height="match_parent"\n    android:background="@android:color/transparent">\n    \n    <android.support.design.widget.CoordinatorLayout\n        android:id="@+id/content_container"\n        android:layout_width="match_parent"\n        android:layout_height="match_parent">\n\t\n\t\t...other stuff\n\n    </android.support.design.widget.CoordinatorLayout>\n</FrameLayout>\n```\nRemember: you have to add new Fragments with:  \n\n```java \ngetSupportFragmentManager().beginTransaction()\n\t.add(R.id.fragment_container, YourFragmentClass.newInstance())\n\t.commit();\n```\n\nwhere fragment_container is the id of a FrameLayout inside the activity\'s xml.\n\n\n## Configuring\n\n```java\nSlidrConfig config = new SlidrConfig.Builder()\n\t.primaryColor(getResources().getColor(R.color.primary)\n\t.secondaryColor(getResources().getColor(R.color.secondary)\n\t.position(SlidrPosition.LEFT|RIGHT|TOP|BOTTOM|VERTICAL|HORIZONTAL)\n\t.sensitivity(1f)\n\t.scrimColor(Color.BLACK)\n\t.scrimStartAlpha(0.8f)\n\t.scrimEndAlpha(0f)\n\t.velocityThreshold(2400)\n\t.distanceThreshold(0.25f)\n\t.edge(true|false)\n\t.edgeSize(0.18f) // The % of the screen that counts as the edge, default 18%\n\t.listener(new SlidrListener(){...})\n\t.build();\n\nSlidr.attach(this, config);\n\n```\n\n---\n\n`Slidr.attach(...)` will return a `SlidrInterface` which gives you access to two methods:\n\n```java\nSlidrInterface.lock();\nSlidrInterface.unlock();\n```\n\nThese methods lock or unlock the slidable touch interface.\n\nThe theme that you use for your sliding activity must have these attributes set:\n\n```xml\n<item name="android:windowIsTranslucent">true</item>  \n<item name="android:windowBackground">@android:color/transparent</item>\n```\n\nThen in the layout of your activity you must give it a background like this;\n\n```xml\n<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"\n    xmlns:tools="http://schemas.android.com/tools"\n    xmlns:app="http://schemas.android.com/apk/res-auto"\n    android:orientation="vertical"\n    android:layout_width="match_parent"\n    android:layout_height="match_parent"\n    android:background="@color/background_material_light">\n\n    ...\n```\n\n## Including in your project\n\nInclude this line in your gradle build file:\n\n```groovy\nimplementation \'com.r0adkll:slidableactivity:2.1.0\'\n```\n\n<!--  \nFor Snapshots, include these lines in your gradle files:\n\n```groovy\nrepositories {\n    jcenter()\n    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }\n}\n```\n\n```groovy\ndependencies{\n\timplementation \'com.r0adkll:slidableactivity:2.0.7-SNAPSHOT\'\n}\n```\n-->\n\n\n## Author\n\n-\tDrew Heavner, **[r0adkll](http://r0adkll.com)**\n\n## License\n\n\tCopyright (c) 2014 Drew Heavner\n\n\tLicensed under the Apache License, Version 2.0 (the "License");\n\tyou may not use this file except in compliance with the License.\n\tYou may obtain a copy of the License at\n\n\thttp://www.apache.org/licenses/LICENSE-2.0\n\n\tUnless required by applicable law or agreed to in writing,\n\tsoftware distributed under the License is distributed on an\n\t"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n\teither express or implied. See the License for the specific\n\tlanguage governing permissions and limitations under the License.\n'