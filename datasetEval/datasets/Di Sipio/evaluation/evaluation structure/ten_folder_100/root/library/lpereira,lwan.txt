b'Lwan Web Server\n===============\n\nLwan is a **high-performance** & **scalable** web server.\n\nThe [project web site](https://lwan.ws/) contains more details.\n\nBuild status\n------------\n\n| OS      | Arch   | Release | Debug | Static Analysis | Tests |\n|---------|--------|---------|-------|-----------------|------------|\n| Linux   | x86_64 | ![release](https://shield.lwan.ws/img/gycKbr/release "Release")  | ![debug](https://shield.lwan.ws/img/gycKbr/debug "Debug")     | ![static-analysis](https://shield.lwan.ws/img/gycKbr/clang-analyze "Static Analysis") ![coverity](https://scan.coverity.com/projects/375/badge.svg) [Report history](https://buildbot.lwan.ws/sa/) | ![tests](https://shield.lwan.ws/img/gycKbr/unit-tests "Test") [![Fuzzing Status](https://oss-fuzz-build-logs.storage.googleapis.com/badges/lwan.svg)](https://bugs.chromium.org/p/oss-fuzz/issues/list?sort=-opened&can=1&q=proj:lwan)           |\n| Linux   | armv7  | ![release-arm](https://shield.lwan.ws/img/gycKbr/release-arm "Release")  | ![debug-arm](https://shield.lwan.ws/img/gycKbr/debug-arm "Debug")     |        |           |\n| FreeBSD | x86_64 | ![freebsd-release](https://shield.lwan.ws/img/gycKbr/release-freebsd "Release FreeBSD") | ![freebsd-debug](https://shield.lwan.ws/img/gycKbr/debug-freebsd "Debug FreeBSD")     |                |           |\n| macOS   | x86_64 | ![osx-release](https://shield.lwan.ws/img/gycKbr/release-sierra "Release macOS")       | ![osx-debug](https://shield.lwan.ws/img/gycKbr/debug-sierra "Debug macOS")     |               |          |\n\nBuilding\n--------\n\nBefore installing Lwan, ensure all dependencies are installed. All of them\nare common dependencies found in any GNU/Linux distribution; package names\nwill be different, but it shouldn\'t be difficult to search using whatever\npackage management tool that\'s used by your distribution.\n\n### Required dependencies\n\n - [CMake](https://cmake.org/), at least version 2.8\n - [ZLib](http://zlib.net)\n\n### Optional dependencies\n\nThe build system will look for these libraries and enable/link if available.\n\n - [Lua 5.1](http://www.lua.org) or [LuaJIT 2.0](http://luajit.org)\n - [Valgrind](http://valgrind.org)\n - [Brotli](https://github.com/google/brotli)\n - Alternative memory allocators can be used by passing `-DUSE_ALTERNATIVE_MALLOC` to CMake with the following values:\n    - ["mimalloc"](https://github.com/microsoft/mimalloc)\n    - ["jemalloc"](http://jemalloc.net/)\n    - ["tcmalloc"](https://github.com/gperftools/gperftools)\n    - "auto": Autodetect from the list above, falling back to libc malloc if none found\n - To run test suite:\n    - [Python](https://www.python.org/) (2.6+) with Requests\n    - [Lua 5.1](http://www.lua.org)\n - To run benchmark:\n    - Special version of [Weighttp](https://github.com/lpereira/weighttp)\n    - [Matplotlib](https://github.com/matplotlib/matplotlib)\n - To build TechEmpower benchmark suite:\n    - Client libraries for either [MySQL](https://dev.mysql.com) or [MariaDB](https://mariadb.org)\n    - [SQLite 3](http://sqlite.org)\n\n\n### Common operating system package names\n\n#### Minimum to build\n - ArchLinux: `pacman -S cmake zlib`\n - FreeBSD: `pkg install cmake pkgconf`\n - Ubuntu 14+: `apt-get update && apt-get install git cmake zlib1g-dev pkg-config`\n - macOS: `brew install cmake`\n\n#### Build all examples\n - ArchLinux: `pacman -S cmake zlib sqlite luajit libmariadbclient gperftools valgrind`\n - FreeBSD: `pkg install cmake pkgconf sqlite3 lua51`\n - Ubuntu 14+: `apt-get update && apt-get install git cmake zlib1g-dev pkg-config lua5.1-dev libsqlite3-dev libmysqlclient-dev`\n - macOS: `brew install cmake mysql-connector-c sqlite lua@5.1 pkg-config`\n\n### Build commands\n\n#### Clone the repository\n\n    ~$ git clone git://github.com/lpereira/lwan\n    ~$ cd lwan\n\n#### Create the build directory\n\n    ~/lwan$ mkdir build\n    ~/lwan$ cd build\n\n#### Select build type\n\nSelecting a *release* version (no debugging symbols, messages, enable some\noptimizations, etc):\n\n    ~/lwan/build$ cmake .. -DCMAKE_BUILD_TYPE=Release\n\nIf you\'d like to enable optimiations but still use a debugger, use this instead:\n\n    ~/lwan/build$ cmake .. -DCMAKE_BUILD_TYPE=RelWithDebInfo\n\nTo disable optimizations and build a more debugging-friendly version:\n\n    ~/lwan/build$ cmake .. -DCMAKE_BUILD_TYPE=Debug\n\n#### Build Lwan\n\n    ~/lwan/build$ make\n\nThis will generate a few binaries:\n\n - `src/bin/lwan/lwan`: The main Lwan executable. May be executed with `--help` for guidance.\n - `src/bin/testrunner/testrunner`: Contains code to execute the test suite.\n - `src/samples/freegeoip/freegeoip`: [FreeGeoIP sample implementation](https://freegeoip.lwan.ws). Requires SQLite.\n - `src/samples/techempower/techempower`: Code for the Techempower Web Framework benchmark. Requires SQLite and MySQL libraries.\n - `src/samples/clock/clock`: [Clock sample](https://time.lwan.ws). Generates a GIF file that always shows the local time.\n - `src/bin/tools/mimegen`: Builds the extension-MIME type table. Used during build process.\n - `src/bin/tools/bin2hex`: Generates a C file from a binary file, suitable for use with #include.\n - `src/bin/tools/configdump`: Dumps a configuration file using the configuration reader API.\n\n#### Remarks\n\nPassing `-DCMAKE_BUILD_TYPE=Release` will enable some compiler\noptimizations (such as [LTO](http://gcc.gnu.org/wiki/LinkTimeOptimization))\nand tune the code for current architecture. *Please use this version\nwhen benchmarking*, as the default is the Debug build, which not only\nlogs all requests to the standard output, but does so while holding a\nmutex.\n\nThe default build (i.e. not passing `-DCMAKE_BUILD_TYPE=Release`) will build\na version suitable for debugging purposes.  This version can be used under\nValgrind *(if its headers are present)* and includes debugging messages that\nare stripped in the release version.  Debugging messages are printed for\neach and every request.\n\nOn debug builds, sanitizers can be enabled.  To select which one to build Lwan\nwith, specify one of the following options to the CMake invocation line:\n\n - `-DSANITIZER=ubsan` selects the Undefined Behavior Sanitizer.\n - `-DSANITIZER=address` selects the Address Sanitizer.\n - `-DSANITIZER=thread` selects the Thread Sanitizer.\n\nAlternative memory allocators can be selected as well.  Lwan currently\nsupports [TCMalloc](https://github.com/gperftools/gperftools) and\n[jemalloc](http://jemalloc.net/) out of the box.  To use either one of them,\npass `-DALTERNATIVE_MALLOC=ON` to the CMake invocation line.\n\n### Tests\n\n    ~/lwan/build$ make teststuite\n\nThis will compile the `testrunner` program and execute regression test suite\nin `src/scripts/testsuite.py`.\n\n### Benchmark\n\n    ~/lwan/build$ make benchmark\n\nThis will compile `testrunner` and execute benchmark script\n`src/scripts/benchmark.py`.\n\n### Coverage\n\nLwan can also be built with the Coverage build type by specifying\n`-DCMAKE_BUILD_TYPE=Coverage`.  This enables the `generate-coverage` make\ntarget, which will run `testrunner` to prepare a test coverage report with\n[lcov](http://ltp.sourceforge.net/coverage/lcov.php).\n\nEvery commit in this repository triggers the generation of this report,\nand results are [publicly available](https://buildbot.lwan.ws/lcov/).\n\nRunning\n-------\n\nSet up the server by editing the provided `lwan.conf`; the format is\nexplained in details below.\n\nConfiguration files are loaded from the current directory. If no changes\nare made to this file, running Lwan will serve static files located in\nthe `./wwwroot` directory. Lwan will listen on port 8080 on all interfaces.\n\nLwan will detect the number of CPUs, will increase the maximum number of\nopen file descriptors and generally try its best to autodetect reasonable\nsettings for the environment it\'s running on.  Many of these settings can\nbe tweaked in the configuration file, but it\'s usually a good idea to not\nmess with them.\n\nOptionally, the `lwan` binary can be used for one-shot static file serving\nwithout any configuration file. Run it with `--help` for help on that.\n\nConfiguration File\n----------------\n\n### Format\n\nLwan uses a familiar `key = value` configuration file syntax.  Comments are\nsupported with the `#` character (similar to e.g.  shell scripts, Python,\nand Perl).  Nested sections can be created with curly brackets.  Sections\ncan be empty; in this case, curly brackets are optional.\n\n`some_key_name` is equivalent to `some key name` in configuration files (as\nan implementation detail, code reading configuration options will only be\ngiven the version with underscores).\n\nValues can contain environment variables. Use the syntax `${VARIABLE_NAME}`.\nDefault values can be specified with a colon (e.g.  `${VARIABLE_NAME:foo}`,\nwhich evaluates to `${VARIABLE_NAME}` if it\'s set, or `foo` otherwise).\n\n```\nsound volume = 11 # This one is 1 louder\n\nplaylist metal {\n   files = \'\'\'\n\t/multi/line/strings/are/supported.mp3\n\t/anything/inside/these/are/stored/verbatim.mp3\n   \'\'\'\n}\n\nplaylist chiptune {\n   files = """\n\t/if/it/starts/with/single/quotes/it/ends/with/single/quotes.mod\n\t/but/it/can/use/double/quotes.s3m\n   """\n}\n```\n\n#### Value types\n\n| Type   | Description |\n|--------|-------------|\n| `str`  | Any kind of free-form text, usually application specific |\n| `int`  | Integer number. Range is application specific |\n| `time` | Time interval.  See table below for units |\n| `bool` | Boolean value. See table below for valid values |\n\n#### Time Intervals\n\nTime fields can be specified using multipliers. Multiple can be specified, they\'re\njust added together; for instance, "1M 1w" specifies "1 month and 1 week".  The following\ntable lists all known multipliers:\n\n| Multiplier | Description |\n|------------|-------------|\n| `s`        | Seconds |\n| `m`        | Minutes |\n| `h`        | Hours |\n| `d`        | Days |\n| `w`        | Weeks |\n| `M`        | Months |\n| `y`        | Years |\n\nA number with a multiplier not in this table is ignored; a warning is issued while\nreading the configuration file.  No spaces must exist between the number and its\nmultiplier.\n\n#### Boolean Values\n\n| True Values | False Values |\n|-------------|--------------|\n| Any integer number different than 0 | 0 |\n| `on` | `off` |\n| `true` | `false` |\n| `yes` | `no` |\n\n### Global Settings\n\nIt\'s generally a good idea to let Lwan decide the best settings for your\nenvironment.  However, not every environment is the same, and not all uses\ncan be decided automatically, so some configuration options are provided.\n\n| Option | Type | Default | Description |\n|--------|------|---------|-------------|\n| `keep_alive_timeout` | `time`  | `15` | Timeout to keep a connection alive |\n| `quiet` | `bool` | `false` | Set to true to not print any debugging messages. Only effective in release builds. |\n| `reuse_port` | `bool` | `false` | Sets `SO_REUSEPORT` to `1` in the master socket |\n| `expires` | `time` | `1M 1w` | Value of the "Expires" header. Default is 1 month and 1 week |\n| `threads` | `int` | `0` | Number of I/O threads. Default (0) is the number of online CPUs |\n| `proxy_protocol` | `bool` | `false` | Enables the [PROXY protocol](https://www.haproxy.com/blog/haproxy/proxy-protocol/). Versions 1 and 2 are supported. Only enable this setting if using Lwan behind a proxy, and the proxy supports this protocol; otherwise, this allows anybody to spoof origin IP addresses |\n| `max_post_data_size` | `int` | `40960` | Sets the maximum number of data size for POST requests, in bytes |\n\n### Straitjacket\n\nLwan can drop its privileges to a user in the system, and limit its\nfilesystem view with a chroot.  While not bulletproof, this provides a\nfirst layer of security in the case there\'s a bug in Lwan.\n\nIn order to use this feature, declare a `straitjacket` section, and set\nsome options.  This requires Lwan to be executed as `root`.\n\nAlthough this section can be written anywhere in the file (as long as\nit is a top level declaration), if any directories are open, due to\ne.g.  instantiating the `serve_files` module, Lwan will refuse to\nstart.  (This check is only performed on Linux as a safeguard for\nmalconfiguration.)\n\n| Option | Type | Default | Description |\n|--------|------|---------|-------------|\n| `user` | `str`  | `NULL` | Drop privileges to this user name |\n| `chroot` | `str` | `NULL` | Path to `chroot()` |\n| `drop_capabilities` | `bool` | `true` | Drop all capabilities with capset(2) (under Linux), or pledge(2) (under OpenBSD). |\n\n### Listeners\n\nIn order to specify which interfaces Lwan should listen on, a `listener` section\nmust be specified.  Only one listener per Lwan process is accepted at the moment.\nThe only parameter to a listener block is the interface address and the port to\nlisten on; anything inside a listener section are instances of modules.\n\nThe syntax for the listener parameter is `${ADDRESS}:${PORT}`, where `${ADDRESS}`\ncan either be `*` (binding to all interfaces), an IPv6 address (if surrounded by\nsquare brackets), an IPv4 address, or a hostname.  If systemd\'s socket activation\nis used, `systemd` can be specified as a parameter.\n\n### Routing URLs Using Modules or Handlers\n\nIn order to route URLs, Lwan matches the largest common prefix from the request\nURI with a set of prefixes specified in the listener section.  How a request to\na particular prefix will be handled depends on which handler or module has been\ndeclared in the listener section.  Handlers and modules are similar internally;\nhandlers are merely functions and hold no state, and modules holds state (named\ninstance).  Multiple instances of a module can appear in a listener section.\n\nThere is no special syntax to attach a prefix to a handler or module; all the\nconfiguration parser rules apply here.  Use `${NAME} ${PREFIX}` to link the\n`${PREFIX}` prefix path to either a handler named `${NAME}` (if `${NAME}`\nbegins with `&`, as with C\'s "address of" operator), or a module named\n`${NAME}`.  Empty sections can be used here.\n\nEach module will have its specific set of options, and they\'re listed in the\nnext sections.  In addition to configuration options, a special `authorization`\nsection can be present in the declaration of a module instance.  Handlers do\nnot take any configuration options, but may include the `authorization`\nsection.\n\nA list of built-in modules can be obtained by executing Lwan with the `-m`\ncommand-line argument.  The following is some basic documentation for the\nmodules shipped with Lwan.\n\n#### File Serving\n\nThe `serve_files` module will serve static files, and automatically create\ndirectory indices or serve pre-compressed files.  It\'ll generally try its\nbest to serve files in the fastest way possible according to some heuristics.\n\n\n| Option | Type | Default | Description |\n|--------|------|---------|-------------|\n| `path`                     | `str`  | `NULL`       | Path to a directory containing files to be served |\n| `index_path`               | `str`  | `index.html` | File name to serve as an index for a directory |\n| `serve_precompressed_path` | `bool` | `true`       | If $FILE.gz exists, is smaller and newer than $FILE, and the client accepts `gzip` encoding, transfer it |\n| `auto_index`               | `bool` | `true`       | Generate a directory list automatically if no `index_path` file present.  Otherwise, yields 404 |\n| `auto_index_readme`        | `bool` | `true`       | Includes the contents of README files as part of the automatically generated directory index |\n| `directory_list_template`  | `str`  | `NULL`       | Path to a Mustache template for the directory list; by default, use an internal template |\n| `read_ahead`               | `int`  | `131702`     | Maximum amount of bytes to read ahead when caching open files.  A value of `0` disables readahead.  Readahead is performed by a low priority thread to not block the I/O threads while file extents are being read from the filesystem. |\n\n#### Lua\n\nThe `lua` module will allow requests to be serviced by scripts written in\nthe [Lua](https://www.lua.org/) programming language.  Although the\nfunctionality provided by this module is quite spartan, it\'s able to run\nframeworks such as [Sailor](https://github.com/lpereira/sailor-hello-lwan).\n\nScripts can be served from files or embedded in the configuration file, and\nthe results of loading them, the standard Lua modules, and (optionally, if\nusing LuaJIT) optimizing the code will be cached for a while.  Each I/O\nthread in Lwan will create an instance of a Lua VM (i.e.  one `lua_State`\nstruct for every I/O thread), and each Lwan coroutine will spawn a Lua\nthread (with `lua_newthread()`) per request.  Because of this, Lua scripts\ncan\'t use global variables, as they may be not only serviced by different\nthreads, but the state will be available only for the amount of time\nspecified in the `cache_period` configuration option.\n\nThere\'s no need to have one instance of the Lua module for each endpoint; a\nsingle script, embeded in the configuration file or otherwise, can service\nmany different endpoints.  Scripts are supposed to implement functions with\nthe following signature: `handle_${METHOD}_${ENDPOINT}(req)`, where\n`${METHOD}` can be a HTTP method (i.e.  `get`, `post`, `head`, etc.), and\n`${ENDPOINT}` is the desired endpoint to be handled by that function.  The\nspecial `${ENDPOINT}` `root` can be specified to act as a catchall.  The\n`req` parameter points to a metatable that contains methods to obtain\ninformation from the request, or to set the response, as seen below:\n\n   - `req:query_param(param)` returns the query parameter (from the query string) with the key `param`, or `nil` if not found\n   - `req:post_param(param)` returns the post parameter (only for `${POST}` handlers) with the key `param`, or `nil` if not found\n   - `req:set_response(str)` sets the response to the string `str`\n   - `req:say(str)` sends a response chunk (using chunked encoding in HTTP)\n   - `req:send_event(event, str)` sends an event (using server-sent events)\n   - `req:cookie(param)` returns the cookie named `param`, or `nil` is not found\n   - `req:set_headers(tbl)` sets the response headers from the table `tbl`; a header may be specified multiple times by using a table, rather than a string, in the table value (`{\'foo\'={\'bar\', \'baz\'}}`); must be called before sending any response with `say()` or `send_event()`\n   - `req:sleep(ms)` pauses the current handler for the specified amount of milliseconds\n   - `req:ws_upgrade()` returns `1` if the connection could be upgraded to a WebSocket; `0` otherwise\n   - `req:ws_write(str)` sends `str` through the WebSocket-upgraded connection\n   - `req:ws_read()` returns a string obtained from the WebSocket, or `nil` on error\n\nHandler functions may return either `nil` (in which case, a `200 OK` response\nis generated), or a number matching an HTTP status code.  Attempting to return\nan invalid HTTP status code or anything other than a number or `nil` will result\nin a `500 Internal Server Error` response being thrown.\n\n| Option | Type | Default | Description |\n|--------|------|---------|-------------|\n| `default_type` | `str` | `text/plain` | Default MIME-Type for responses |\n| `script_file` | `str` | `NULL` | Path to Lua script|\n| `cache_period` | `time` | `15s` | Time to keep Lua state loaded in memory |\n| `script` | `str` | `NULL` | Inline lua script |\n\n#### Rewrite\n\nThe `rewrite` module will match\n[patterns](https://man.openbsd.org/patterns.7) in URLs and give the option\nto either redirect to another URL, or rewrite the request in a way that Lwan\nwill handle the request as if it were made in that way originally.  The\npatterns are a special kind of regular expressions, forked from Lua 5.3.1,\nthat do not contain backreferences and other features that could create\ndenial-of-service issues in Lwan.  The new URL can be specified using a\nsimple text substitution syntax, or use Lua scripts; Lua scripts will\ncontain the same metamethods available in the `req` metatable provided by\nthe Lua module, so it can be quite powerful.\n\nEach instance of the rewrite module will require a `pattern` and the action\nto execute when such pattern is matched.  Patterns are evaluated in the\norder they appear in the configuration file, and are specified using nested\nsections in the configuration file.  For instance, consider the following\nexample, where two patterns are specified:\n\n```\nrewrite /some/base/endpoint {\n    pattern posts/(%d+) {\n        # Matches /some/base/endpointposts/2600\n        rewrite_as = /cms/view-post?id=%1\n    }\n    pattern imgur/(%a+)/(%g+) {\n        # Matches /some/base/endpointimgur/gif/mpT94Ld\n        redirect_to = https://i.imgur.com/%2.%1\n    }\n}\n```\n\nThis example defines two patterns, one providing a nicer URL that\'s hidden\nfrom the user, and another providing a different way to obtain a direct link\nto an image hosted on a popular image hosting service (i.e.  requesting\n`/some/base/endpoint/imgur/mp4/4kOZNYX` will redirect directly to a resource\nin the Imgur service).\n\nThe value of `rewrite_as` or `redirect_to` can be Lua scripts as well; in\nwhich case, the option `expand_with_lua` must be set to `true`, and, instead\nof using the simple text substitution syntax as the example above, a\nfunction named `handle_rewrite(req, captures)` has to be defined instead.\nThe `req` parameter is documented in the Lua module section; the `captures`\nparameter is a table containing all the captures, in order.  This function\nreturns the new URL to redirect to.\n\nThis module has no options by itself.  Options are specified in each and\nevery pattern.\n\n| Option | Type | Default | Description |\n|--------|------|---------|-------------|\n| `rewrite_as` | `str` | `NULL` | Rewrite the URL following this pattern |\n| `redirect_to` | `str` | `NULL` | Redirect to a new URL following this pattern |\n| `expand_with_lua` | `bool` | `false` | Use Lua scripts to redirect to or rewrite a request |\n\n`redirect_to` and `rewrite_as` options are mutually exclusive, and one of\nthem must be specified at least.\n\n#### Redirect\n\nThe `redirect` module will, as it says in the tin, generate a `301\nMoved permanently` (by default; the code can be changed, see below)\nresponse, according to the options specified in its configuration.\nGenerally, the `rewrite` module should be used instead as it packs more\nfeatures; however, this module serves also as an example of how to\nwrite Lwan modules (less than 100 lines of code).\n\nIf the `to` option is not specified, it always generates a `500\nInternal Server Error` response.  Specifying an invalid HTTP code, or a\ncode that Lwan doesn\'t know about (see `enum lwan_http_status`), will\nproduce a `301 Moved Permanently` response.\n\n| Option | Type | Default | Description |\n|--------|------|---------|-------------|\n| `to` | `str` | `NULL` | The location to redirect to |\n| `code` | `int` | `301` | The HTTP code to perform a redirect |\n\n#### Response\n\nThe `response` module will generate an artificial response of any HTTP code.\nIn addition to also serving as an example of how to write a Lwan module,\nit can be used to carve out voids from other modules (e.g. generating a\n`405 Not Allowed` response for files in `/.git`, if `/` is served with\nthe `serve_files` module).\n\nIf the supplied `code` falls outside the response codes known by Lwan,\na `404 Not Found` error will be sent instead.\n\n| Option | Type | Default | Description |\n|--------|------|---------|-------------|\n| `code` | `int` | `999` | A HTTP response code |\n\n### Authorization Section\n\nAuthorization sections can be declared in any module instance or handler,\nand provides a way to authorize the fulfillment of that request through\nthe standard HTTP authorization mechanism.  In order to require authorization\nto access a certain module instance or handler, declare an `authorization`\nsection with a `basic` parameter, and set one of its options.\n\n| Option | Type | Default | Description |\n|--------|------|---------|-------------|\n| `realm` | `str` | `Lwan` | Realm for authorization. This is usually shown in the user/password UI in browsers |\n| `password_file` | `str` | `NULL` | Path for a file containing username and passwords (in clear text).  The file format is the same as the configuration file format used by Lwan |\n\nHacking\n-------\n\nPlease read this section (and follow it) if you\'re planning on contributing\nto Lwan.  There\'s nothing unexpected here; this mostly follows the rules and\nexpectations of many other FOSS projects, but every one expects things a\nlittle bit different from one another.\n\n### Coding Style\n\nLwan tries to follow a consistent coding style throughout the project.  If you\'re\nconsidering contributing a patch to the project, please respect this style by trying\nto match the style of the surrounding code.  In general:\n\n - `global_variables_are_named_like_this`, even though they tend to be rare and should be marked as `static` (with rare exceptions)\n - Local variables are usually shorter, e.g. `local_var`, `i`, `conn`\n - Struct names are often as short as they\'re descriptive.  `typedef` for structs are rarely used in Lwan\n - Header files should use `#pragma once` instead of the usual include guard hackery\n - Functions that are used between .c files but are not APIs to be exposed to liblwan should have their prototype added to `lwan-private.h`\n - Functions should be short and sweet.  Exceptions may apply\n - Public functions should be prefixed with `lwan_`\n - Public types should be prefixed with `lwan_`\n - Private functions must be static, and can be named without the `lwan_` prefix\n - Code is indented with 4 spaces; don\'t use tabs\n - There\'s a suggested line break at column 80, but it\'s not enforced\n - `/* Old C-style comments are preferred */`\n - `clang-format` can be used to format the source code in an acceptable way; a `.clang-format` file is provided\n\n### Tests\n\nIf modifying well-tested areas of the code (e.g. the event loop, HTTP parser,\netc.), please add a new integration test and make sure that, before you send a\npull request, all tests (including the new ones you\'ve sent) are working.\nTests can be added by modifying `src/scripts/testsuite.py`, and executed by\neither invoking that script directly from the source root, or executing the\n`testsuite` build target.\n\nSome tests will only work on Linux, and won\'t be executed on other platforms.\n\n### Fuzz-testing\n\nLwan is automatically fuzz-tested by\n[OSS-Fuzz](https://github.com/google/oss-fuzz/).  To fuzz-test locally,\nthough, one can [follow the instructions to test\nlocally](https://github.com/google/oss-fuzz/blob/master/docs/new_project_guide.md#testing-locally).\n\nThis fuzzes only the request parsing code.  There are plans to add fuzzing\ndrivers for other parts of the code, including the rewriting engine,\nconfiguration file reader, template parser, and URL routing.\n\n### Exporting APIs\n\nThe shared object version of `liblwan` on ELF targets (e.g. Linux) will use\na symbol filter script to hide symbols that are considered private to the\nlibrary.  Please edit `src/lib/liblwan.sym` to add new symbols that should\nbe exported to `liblwan.so`.\n\n### Using Git and Pull Requests\n\nLwan tries to maintain a source history that\'s as flat as possible, devoid of\nmerge commits.  This means that pull requests should be rebased on top of the\ncurrent master before they can be merged; sometimes this can be made\nautomatically by the GitHub interface, sometimes they need some manual work to\nfix conflicts.  It is appreciated if the contributor fixes these conflicts when\nasked.\n\nIt is advisable to push your changes to your fork on a branch-per-pull request,\nrather than pushing to the `master` branch; the reason is explained below.\n\nPlease ensure that Git is configured properly with your name (it doesn\'t really\nmatter if it is your legal name or a nickname, but it should be enough to credit\nyou) and a valid email address.  There\'s no need to add `Signed-off-by` lines,\neven though it\'s fine to send commits with them.\n\nIf a change is requested in a pull request, you have three choices:\n\n - *Reply asking for clarification.*  Maybe the intentions were not clear enough,\nand whoever asked for changes didn\'t fully understand what you were trying to\nachieve\n - *Fix the issue.*  When fixing issues found in pull requests, *please* use\n[interactive rebases](https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History) to\nsquash or fixup commits; don\'t add your fixes on top of your tree.  Do not create\nanother pull request just to accomodate the changes. After rewriting\nthe history locally, force-push to your PR branch; the PR will update automatically\nwith your changes.  Rewriting the history of development branches is fine, and\nforce-pushing them is normal and expected.\n\nIt is not enforced, but it is recommended to create smaller commits. How\ncommits are split in Lwan is pretty much arbitrary, so please take a look at\nthe commit history to get the idea on how the division should be made.  Git\noffers a plethora of commands to achieve this result: the already mentioned\ninteractive rebase, the `-p` option to `git add`, and `git commit --amend`\nare good examples.\n\nCommit messages should have one line of summary (~72 chars), followed by an\nempty line, followed by paragraphs of 80-lines explaining the change.  The\nparagraphs explaining the changes are usually not necessary if the summary\nis good enough.  Try to [write good commit messages](https://chris.beams.io/posts/git-commit/).\n\n### Licensing\n\nLwan is licensed under the GNU General Public License, version 2, or (at your option),\nany later version.  Therefore:\n\n - Code must be either LGPLv2.1, GPLv2, a permissive "copyfree" license that is compatible\nwith GPLv2 (e.g. MIT, BSD 3-clause), or public domain code (e.g. CC0)\n - Although the program can be distributed and used as if it were licensed as GPLv3,\nits code must be compatible with GPLv2 as well; no new code can be licensed under versions\nof GPL newer than 2\n - Likewise, code licensed under licenses compatible with GPLv3 but\nincompatible with GPLv2 (e.g.  Apache 2) are not suitable for inclusion in\nLwan\n - Even if the license does not specify that credit should be given (e.g. CC0-licensed code),\nplease give credit to the original author for that piece of code\n - Contrary to popular belief, it is possible to use a GPL\'d piece of code on a server without\nhaving to share the code for your application.  It is only when the binary of that server is\nshared that source must be available to whoever has that binary.  Merely accessing a Lwan\nserver through HTTP does not qualify as having access to the binary program that\'s running\non the server\n - When in doubt, don\'t take legal advice from a README file: please consult\na lawyer that understands free software licensing\n\nPortability\n-----------\n\nWhile Lwan was written originally for Linux, it has been ported to BSD\nsystems as well.  The build system will detect the supported features\nand build support library functions as appropriate.\n\nFor instance, [epoll](https://en.wikipedia.org/wiki/Epoll) has been\nimplemented on top of [kqueue](https://en.wikipedia.org/wiki/Kqueue), and\nLinux-only syscalls and GNU extensions have been implemented for the\nsupported systems.  [This blog post](https://tia.mat.br/posts/2018/06/28/include_next_and_portability.html)\nexplains the details and how `#include_next` is used.\n\nPerformance\n-----------\n\nIt can achieve good performance, yielding about **320000 requests/second**\non a Core i7 laptop for requests without disk access, and without pipelining.\n\nWhen disk I/O is required, for files up to 16KiB, it yields about\n**290000 requests/second**; for larger files, this drops to **185000\nrequests/second**, which isn\'t too shabby either.\n\nThese results, of course, with keep-alive connections, and with weighttp\nrunning on the same machine (and thus using resources that could be used\nfor the webserver itself).\n\nWithout keep-alive, these numbers drop around 6-fold.\n\nIRC Channel\n-----------\n\nThere is an IRC channel (`#lwan`) on [Freenode](http://freenode.net). A\nstandard IRC client can be used.  A [web IRC gateway](http://webchat.freenode.net?channels=%23lwan&uio=d4)\nis also available.\n\nLwan in the wild\n----------------\n\nHere\'s a non-definitive list of third-party stuff that uses Lwan and have\nbeen seen in the wild.  *Help build this list!*\n\n* [This project uses Cython and Lwan](https://www.erp5.com/NXD-Blog.Multicore.Python.HTTP.Server) to make it possible to write handlers in Python.\n* [An experimental version of Node.js using Lwan](https://github.com/raadad/node-lwan) as its HTTP server is maintained by [@raadad](https://github.com/raadad).\n* The beginnings of a C++11 [web framework](https://github.com/vileda/wfpp) based on Lwan written by [@vileda](https://github.com/vileda).\n* A more complete C++14 [web framework](https://github.com/matt-42/silicon) by [@matt-42](https://github.com/matt-42) offers Lwan as one of its backends.\n* A [word ladder sample program](https://github.com/sjnam/lwan-sgb-ladders) by [@sjnam](https://github.com/sjnam). [Demo](http://tbcoe.ddns.net/sgb/ladders?start=chaos&goal=order).\n* A [Shodan search](https://www.shodan.io/search?query=server%3A+lwan) listing some brave souls that expose Lwan to the public internet.\n\nSome other distribution channels were made available as well:\n\n* A `Dockerfile` is maintained by [@jaxgeller](https://github.com/jaxgeller), and is [available from the Docker registry](https://hub.docker.com/r/jaxgeller/lwan/).\n* A buildpack for Heroku is maintained by [@bherrera](https://github.com/bherrera), and is [available from its repo](https://github.com/bherrera/heroku-buildpack-lwan).\n* Lwan is also available as a package in [Biicode](http://docs.biicode.com/c++/examples/lwan.html).\n* It\'s also available in some GNU/Linux distributions:\n    * [Arch Linux](https://aur.archlinux.org/packages/lwan-git/)\n    * [Ubuntu](https://launchpad.net/lwan-unofficial)\n    * [Alpine Linux](https://pkgs.alpinelinux.org/package/edge/testing/x86_64/lwan)\n    * [NixOS](https://nixos.org/nixos/packages.html#lwan)\n\nLwan has been also used as a benchmark:\n\n* [Raphael Javaux\'s master thesis](https://github.com/RaphaelJ/master-thesis) cites Lwan in chapter 5 ("Performance Analysis").\n* Lwan is used as a benchmark by the [PyParallel](http://pyparallel.org/) [author](https://www.reddit.com/r/programming/comments/3jhv80/pyparallel_an_experimental_proofofconcept_fork_of/cur4tut).\n* [Kong](https://getkong.org/about/benchmark/) uses Lwan as the [backend API](https://gist.github.com/montanaflynn/01376991f0a3ad07059c) in its benchmark.\n* [TechEmpower Framework benchmarks](https://www.techempower.com/benchmarks/#section=data-r10&hw=peak&test=json) feature Lwan since round 10.\n* [KrakenD](http://www.krakend.io) used Lwan for the REST API in all official [benchmarks](http://www.krakend.io/docs/benchmarks/aws/)\n\nMentions in academic journals:\n\n* [A dynamic predictive race detector for C/C++ programs](https://link.springer.com/article/10.1007/s11227-017-1996-8) uses Lwan as a "real world example".\n\nSome talks mentioning Lwan:\n\n* [Talk about Lwan](https://www.youtube.com/watch?v=cttY9FdCzUE) at Polyconf16, given by [@lpereira](https://github.com/lpereira).\n* This [talk about Iron](https://michaelsproul.github.io/iron-talk/), a framework for Rust, mentions Lwan as an *insane C thing*.\n* [University seminar presentation](https://github.com/cu-data-engineering-s15/syllabus/blob/master/student_lectures/LWAN.pdf) about Lwan.\n* This [presentation about Sailor web framework](http://www.slideshare.net/EtieneDalcol/web-development-with-lua-bulgaria-web-summit) mentions Lwan.\n* [Performance and Scale @ Istio Service Mesh](https://www.youtube.com/watch?v=G4F5aRFEXnU), at around 7:30min, presented at KubeCon Europe 2018, mentions that Lwan is used on the server side for testing due to its performance and robustness.\n* [A multi-core Python HTTP server (much) faster than Go (spoiler: Cython)](https://www.youtube.com/watch?v=mZ9cXOH6NYk) presented at PyConFR 2018 by J.-P. Smets mentions [Nexedi\'s work](https://www.nexedi.com/NXD-Blog.Multicore.Python.HTTP.Server) on using Lwan as a backend for Python services with Cython.\n\nNot really third-party, but alas:\n\n* The [author\'s blog](http://tia.mat.br).\n* The [project\'s webpage](http://lwan.ws).\n\nLwan quotes\n-----------\n\nThese are some of the quotes found in the wild about Lwan.  They\'re presented\nin no particular order.  Contributions are appreciated:\n\n> "I read lwan\'s source code. Especially, the part of using coroutine was\n> very impressive and it was more interesting than a good novel.  Thank you\n> for that." --\n> [@patagonia](https://twitter.com/hakman314/status/996617563470680064)\n\n> "For the server side, we\'re using Lwan, which can handle 100k+ reqs/s.\n> It\'s supposed to be super robust and it\'s working well for us." --\n> [@fawadkhaliq](https://twitter.com/fawadkhaliq)\n\n> "Insane C thing" -- [Michael\n> Sproul](https://michaelsproul.github.io/iron-talk/)\n\n> "I\'ve never had a chance to thank you for Lwan.  It inspired me a lot to\n> develop [Zewo](https://github.com/Zewo/Zero)" --\n> [@paulofariarl](https://twitter.com/paulofariarl/status/707926806373003265)\n\n> "Let me say that lwan is a thing of beauty.  I got sucked into reading the\n> source code for pure entertainment, it\'s so good.  *high five*" --\n> [@kwilczynski](https://twitter.com/kwilczynski/status/692881117003644929)\n\n> "Nice work with Lwan! I haven\'t looked _that_ carefully yet but so far I\n> like what I saw.  You definitely have the right ideas." --\n> [@thinkingfish](https://twitter.com/thinkingfish/status/521574267612196864)\n\n> "Lwan is a work of art. Every time I read through it, I am almost always\n> awe-struck." --\n> [@neurodrone](https://twitter.com/neurodrone/status/359296080283840513)\n\n> "For Round 10, Lwan has taken the crown" --\n> [TechEmpower](https://www.techempower.com/blog/2015/04/21/framework-benchmarks-round-10/)\n\n> "Jeez this is amazing. Just end to end, rock solid engineering. (...) But that sells this work short."\n> [kjeetgill](https://news.ycombinator.com/item?id=17548983)\n\n> "I am only a spare time C coder myself and was surprised that I can follow the code. Nice!"\n> [cntlzw](https://news.ycombinator.com/item?id=17550319)\n\n> "Impressive all and all, even more for being written in (grokkable!) C. Nice work."\n> [tpaschalis](https://news.ycombinator.com/item?id=17550961)\n'