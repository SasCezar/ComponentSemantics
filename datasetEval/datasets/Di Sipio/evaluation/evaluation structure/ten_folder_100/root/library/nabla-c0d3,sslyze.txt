b'SSLyze\n======\n\n[![Build Status](https://travis-ci.org/nabla-c0d3/sslyze.svg?branch=master)](https://travis-ci.org/nabla-c0d3/sslyze)\n[![PyPI version](https://badge.fury.io/py/SSLyze.svg)](https://badge.fury.io/py/SSLyze)\n[![](https://images.microbadger.com/badges/image/nablac0d3/sslyze.svg)](https://microbadger.com/images/nablac0d3/sslyze) [![Join the chat at https://gitter.im/sslyze/community](https://badges.gitter.im/sslyze/community.svg)](https://gitter.im/sslyze/community?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nFast and powerful SSL/TLS server scanning library for Python 3.6+.\n\n\nDescription\n-----------\n\nSSLyze is a Python library and a CLI tool that can analyze the SSL configuration of a server by connecting to it. It is \ndesigned to be fast and comprehensive, and should help organizations and testers identify mis-configurations affecting \ntheir SSL/TLS servers.\n\nKey features include:\n* Fully [documented Python API](https://nabla-c0d3.github.io/sslyze/documentation/), in order to run scans and process the results directly from Python.\n* **New: Support for TLS 1.3 and early data (0-RTT) testing.**\n* Scans are automatically dispatched among multiple processes, making them very fast.\n* Performance testing: session resumption and TLS tickets support.\n* Security testing: weak cipher suites, insecure renegotiation, ROBOT, Heartbleed and more.\n* Server certificate validation and revocation checking through OCSP stapling.\n* Support for StartTLS handshakes on SMTP, XMPP, LDAP, POP, IMAP, RDP, PostGres and FTP.\n* Scan results can be written to an XML or JSON file for further processing.\n* And much more!\n\n\nUsage as a CLI\n--------------\n\nSSLyze can be installed directly via pip:\n\n    $ pip install --upgrade setuptools\n    $ pip install --upgrade sslyze\n    $ python -m sslyze --regular www.yahoo.com:443 www.google.com "[2607:f8b0:400a:807::2004]:443"\n\nSSLyze has been tested on the following platforms: Debian 7 (32 and 64 bits), macOS High Sierra, and Windows 10\n(Python 64 bits only).\n\nUsage as a library\n------------------\n\nSSLyze exposes a Python API in order to run scans and process the results directly in Python; full documentation is\n[available here][documentation].\n\n\nDev environment\n---------------\n\nIf you want to setup a local environment where you can work on SSLyze, you will first need to install\n[pipenv](https://docs.pipenv.org/). You can then initialize the environment using:\n\n    $ cd sslyze\n    $ pipenv install --dev\n    $ pipenv shell\n\nYou can then run the test suite:\n\n    $ invoke test\n\nWindows executable\n------------------\n\nA Windows executable that does not require installing Python is available in the\n[Releases page](https://github.com/nabla-c0d3/sslyze/releases) tab.\n\n\nDocker\n------\n\nBy default the image runs the `-h` flag:\n\n```bash\ndocker run --rm -it nablac0d3/sslyze\n\nUsage: sslyze [options] target1.com target2.com:443 target3.com:443{ip} etc...\n Options:\n  --version             show program\'s version number and exit\n  -h, --help            show this help message and exit\n```\n\nThis image was intended to be ran as an executable like so:\n\n```bash\ndocker run --rm -it nablac0d3/sslyze --regular www.github.com:443\n```\n\n### Create utility from the image\n\nAdd the following line to your shell\'s rc file (e.g. ~/.bashrc):\n\n```bash\nalias \'sslyze\'=\'docker run --rm -it nablac0d3/sslyze\'\n```\n\nNow reload your shell defaults by running:\n\n```bash\nsource ~/.bashrc\n```\n\nYou can now execute the image like so:\n\n ```bash\n$ sslyze\nUsage: sslyze [options] target1.com target2.com:443 target3.com:443{ip} etc...\n Options:\n  --version             show program\'s version number and exit\n  -h, --help            show this help message and exit\n```\n\nHow does it work ?\n------------------\n\nSSLyze is all Python code but it uses an\n[OpenSSL wrapper written in C called nassl](https://github.com/nabla-c0d3/nassl), which was specifically developed for\nallowing SSLyze to access the low-level OpenSSL APIs needed to perform deep SSL testing.\n\n\nWhere do the trust stores come from?\n------------------------------------\n\nThe trust stores (Mozilla, Microsoft, etc.) used by SSLyze for certificate validation are downloaded from the \n[Trust Stores Observatory](https://github.com/nabla-c0d3/trust_stores_observatory). \n\nThe trust stores can be updated to the latest version, using either the CLI:\n\n    $ python -m sslyze --update_trust_stores\n\nor the Python API:\n    \n```python\nfrom sslyze.plugins.utils.trust_store.trust_store_repository import TrustStoresRepository\n\nTrustStoresRepository.update_default()\n```\n\nLicense\n-------\n\nCopyright (c) 2018 Alban Diquet\n\nSSLyze is made available under the terms of the GNU Affero General Public License (AGPL). See LICENSE.txt for details and exceptions.\n\n[documentation]: https://nabla-c0d3.github.io/sslyze/documentation\n'