b'<h1 align="center"> <br><img src="Images/logo/logotype_horizontal.png?raw=true" alt="ypimagepicker" width="512"> <br>\n\n<img src="https://raw.githubusercontent.com/Yummypets/YPImagePicker/master/Images/visual.jpg" width="400px" >\n\n## YPImagePicker\n\nYPImagePicker is an instagram-like photo/video picker for iOS written in pure Swift. It is feature-rich and highly customizable to match your App\'s requirements.\n\n[![Language: Swift 5](https://img.shields.io/badge/language-swift%205-f48041.svg?style=flat)](https://developer.apple.com/swift)\n[![Version](https://img.shields.io/cocoapods/v/YPImagePicker.svg?style=flat)](http://cocoapods.org/pods/YPImagePicker)\n[![Platform](https://img.shields.io/cocoapods/p/YPImagePicker.svg?style=flat)](http://cocoapods.org/pods/YPImagePicker)\n[![Carthage compatible](https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat)](https://github.com/Carthage/Carthage)\n[![codebeat badge](https://codebeat.co/badges/9710a89d-b1e2-4e55-a4a2-3ae1f98f4c53)](https://codebeat.co/projects/github-com-yummypets-ypimagepicker-master)\n[![License: MIT](http://img.shields.io/badge/license-MIT-lightgrey.svg?style=flat)](https://github.com/Yummypets/YPImagePicker/blob/master/LICENSE)\n[![GitHub tag](https://img.shields.io/github/release/Yummypets/YPImagePicker.svg)]()\n\n\n[Installation](#installation) - [Configuration](#configuration) - [Usage](#usage) - [Languages](#languages) - [UI Customization](#ui-customization)\n\n\nGive it a quick try :\n`pod repo update` then `pod try YPImagePicker`\n\n<img src="https://raw.githubusercontent.com/Yummypets/YPImagePicker/master/Images/library.PNG" width="200px" > <img src="https://raw.githubusercontent.com/Yummypets/YPImagePicker/master/Images/photo.PNG" width="200px" > <img src="https://raw.githubusercontent.com/Yummypets/YPImagePicker/master/Images/video.PNG" width="200px" > <img src="https://raw.githubusercontent.com/Yummypets/YPImagePicker/master/Images/filters.PNG" width="200px" >\n\nThose features are available just with a few lines of code!\n\n## Notable Features\n\n\xf0\x9f\x8c\x85 Library  \n\xf0\x9f\x93\xb7 Photo  \n\xf0\x9f\x8e\xa5 Video  \n\xe2\x9c\x82\xef\xb8\x8f Crop  \n\xe2\x9a\xa1\xef\xb8\x8f Flash  \n\xf0\x9f\x96\xbc Filters  \n\xf0\x9f\x93\x81 Albums  \n\xf0\x9f\x94\xa2 Multiple Selection  \n\xf0\x9f\x93\x8f Video Trimming & Cover selection  \n\xf0\x9f\x93\x90 Output image size  \nAnd many more...\n\n## Installation\n\nDrop in the Classes folder to your Xcode project.  \nYou can also use CocoaPods or Carthage.\n\n#### Using [CocoaPods](http://cocoapods.org/)\n\nFirst be sure to run `pod repo update` to get the latest version available.\n\nAdd `pod \'YPImagePicker\'` to your `Podfile` and run `pod install`. Also add `use_frameworks!` to the `Podfile`.\n\n```\ntarget \'MyApp\'\npod \'YPImagePicker\'\nuse_frameworks!\n```\n\n#### Using [Carthage](https://github.com/Carthage/Carthage)\n\nAdd `github "Yummypets/YPImagePicker"` to your `Cartfile` and run `carthage update`. If unfamiliar with Carthage then checkout their [Getting Started section](https://github.com/Carthage/Carthage#getting-started).\n\n```\ngithub "Yummypets/YPImagePicker"\n```\n\n## Plist entries\n\nIn order for your app to access camera and photo libraries,\nyou\'ll need to ad these `plist entries` :\n\n- Privacy - Camera Usage Description (photo/videos)\n- Privacy - Photo Library Usage Description (library)\n- Privacy - Microphone Usage Description (videos)\n\n```xml\n<key>NSCameraUsageDescription</key>\n<string>yourWording</string>\n<key>NSPhotoLibraryUsageDescription</key>\n<string>yourWording</string>\n<key>NSMicrophoneUsageDescription</key>\n<string>yourWording</string>\n```\n\n## Configuration\n\nAll the configuration endpoints are in the [YPImagePickerConfiguration](https://github.com/Yummypets/YPImagePicker/blob/master/Source/Configuration/YPImagePickerConfiguration.swift) struct.\nBelow are the default value for reference, feel free to play around :)\n\n```swift\nvar config = YPImagePickerConfiguration()\n// [Edit configuration here ...]\n// Build a picker with your configuration\nlet picker = YPImagePicker(configuration: config)\n```\n\n### General\n```Swift\nconfig.isScrollToChangeModesEnabled = true\nconfig.onlySquareImagesFromCamera = true\nconfig.usesFrontCamera = false\nconfig.showsPhotoFilters = true\nconfig.shouldSaveNewPicturesToAlbum = true\nconfig.albumName = "DefaultYPImagePickerAlbumName"\nconfig.startOnScreen = YPPickerScreen.photo\nconfig.screens = [.library, .photo]\nconfig.showsCrop = .none\nconfig.targetImageSize = YPImageSize.original\nconfig.overlayView = UIView()\nconfig.hidesStatusBar = true\nconfig.hidesBottomBar = false\nconfig.preferredStatusBarStyle = UIStatusBarStyle.default\nconfig.bottomMenuItemSelectedColour = UIColor(r: 38, g: 38, b: 38)\nconfig.bottomMenuItemUnSelectedColour = UIColor(r: 153, g: 153, b: 153)\nconfig.filters = [DefaultYPFilters...]\n```\n\n### Library\n```swift\nconfig.library.options = nil\nconfig.library.onlySquare = false\nconfig.library.minWidthForItem = nil\nconfig.library.mediaType = YPlibraryMediaType.photo\nconfig.library.maxNumberOfItems = 1\nconfig.library.minNumberOfItems = 1\nconfig.library.numberOfItemsInRow = 4\nconfig.library.spacingBetweenItems = 1.0\nconfig.library.skipSelectionsGallery = false\n```\n\n### Video\n```swift\nconfig.video.compression = AVAssetExportPresetHighestQuality\nconfig.video.fileType = .mov\nconfig.video.recordingTimeLimit = 60.0\nconfig.video.libraryTimeLimit = 60.0\nconfig.video.minimumTimeLimit = 3.0\nconfig.video.trimmerMaxDuration = 60.0\nconfig.video.trimmerMinDuration = 3.0\n```\n\n## Default Configuration\n\n```swift\n// Set the default configuration for all pickers\nYPImagePickerConfiguration.shared = config\n\n// And then use the default configuration like so:\nlet picker = YPImagePicker()\n```\n\n## Usage\n\nFirst things first `import YPImagePicker`.  \n\nThe picker only has one callback `didFinishPicking` enabling you to handle all the cases. Let\'s see some typical use cases \xf0\x9f\xa4\x93\n\n### Single Photo\n```swift\nlet picker = YPImagePicker()\npicker.didFinishPicking { [unowned picker] items, _ in\n    if let photo = items.singlePhoto {\n        print(photo.fromCamera) // Image source (camera or library)\n        print(photo.image) // Final image selected by the user\n        print(photo.originalImage) // original image selected by the user, unfiltered\n        print(photo.modifiedImage) // Transformed image, can be nil\n        print(photo.exifMeta) // Print exif meta data of original image.\n    }\n    picker.dismiss(animated: true, completion: nil)\n}\npresent(picker, animated: true, completion: nil)\n```\n\n### Single video\n```swift\n// Here we configure the picker to only show videos, no photos.\nvar config = YPImagePickerConfiguration()\nconfig.screens = [.library, .video]\nconfig.library.mediaType = .video\n\nlet picker = YPImagePicker(configuration: config)\npicker.didFinishPicking { [unowned picker] items, _ in\n    if let video = items.singleVideo {\n        print(video.fromCamera)\n        print(video.thumbnail)\n        print(video.url)\n    }\n    picker.dismiss(animated: true, completion: nil)\n}\npresent(picker, animated: true, completion: nil)\n```\n\nAs you can see `singlePhoto` and `singleVideo` helpers are here to help you handle single media which are very common, while using the same callback for all your use-cases \\o/\n\n### Multiple selection\nTo enable multiple selection make sure to set `library.maxNumberOfItems` in the configuration like so:\n```swift\nvar config = YPImagePickerConfiguration()\nconfig.library.maxNumberOfItems = 3\nlet picker = YPImagePicker(configuration: config)\n```\nThen you can handle multiple selection in the same callback you know and love :\n```swift\npicker.didFinishPicking { [unowned picker] items, cancelled in\n    for item in items {\n        switch item {\n        case .photo(let photo):\n            print(photo)\n        case .video(let video):\n            print(video)\n        }\n    }\n    picker.dismiss(animated: true, completion: nil)\n}\n```\n\n### Handle Cancel event (if needed)\n```swift\npicker.didFinishPicking { [unowned picker] items, cancelled in\n    if cancelled {\n        print("Picker was canceled")\n    }\n    picker.dismiss(animated: true, completion: nil)\n}\n```\nThat\'s it !\n\n## Languages\n\xf0\x9f\x87\xba\xf0\x9f\x87\xb8 English, \xf0\x9f\x87\xaa\xf0\x9f\x87\xb8 Spanish, \xf0\x9f\x87\xab\xf0\x9f\x87\xb7 French \xf0\x9f\x87\xb7\xf0\x9f\x87\xba Russian, \xf0\x9f\x87\xb3\xf0\x9f\x87\xb1 Dutch, \xf0\x9f\x87\xa7\xf0\x9f\x87\xb7 Brazilian, \xf0\x9f\x87\xb9\xf0\x9f\x87\xb7 Turkish, \xf0\x9f\x87\xb8\xf0\x9f\x87\xbe Arabic, \xf0\x9f\x87\xa9\xf0\x9f\x87\xaa German, \xf0\x9f\x87\xae\xf0\x9f\x87\xb9 Italian, \xf0\x9f\x87\xaf\xf0\x9f\x87\xb5 Japanese, \xf0\x9f\x87\xa8\xf0\x9f\x87\xb3 Chinese, \xf0\x9f\x87\xae\xf0\x9f\x87\xa9 Indonesian, \xf0\x9f\x87\xb0\xf0\x9f\x87\xb7 Korean, \xf0\x9f\x87\xb9\xf0\x9f\x87\xbc Traditional Chinese\xef\xbc\x88Taiwan)\n\nIf your language is not supported, you can still customize the wordings via the `configuration.wordings` api:\n\n```swift\nconfig.wordings.libraryTitle = "Gallery"\nconfig.wordings.cameraTitle = "Camera"\nconfig.wordings.next = "OK"\n```\nBetter yet you can submit an issue or pull request with your `Localizable.strings` file to add a new language !\n\n## UI Customization\nWe tried to keep things as native as possible, so this is done mostly through native Apis.\n\n### Navigation bar color\n```swift\nlet coloredImage = UIImage(color: .red)\nUINavigationBar.appearance().setBackgroundImage(coloredImage, for: UIBarMetrics.default)\n// UIImage+color helper https://stackoverflow.com/questions/26542035/create-uiimage-with-solid-color-in-swift\n```\n\n### Navigation bar fonts\n```swift\nlet attributes = [NSAttributedStringKey.font : UIFont.systemFont(ofSize: 30, weight: .bold) ]\nUINavigationBar.appearance().titleTextAttributes = attributes // Title fonts\nUIBarButtonItem.appearance().setTitleTextAttributes(attributes, for: .normal) // Bar Button fonts\n```\n\n### Navigation bar Text colors\n```swift\nUINavigationBar.appearance().titleTextAttributes = [NSAttributedStringKey.foregroundColor : UIColor.yellow ] // Title color\nUINavigationBar.appearance().tintColor = .red // Left. bar buttons\nconfig.colors.tintColor = .green // Right bar buttons (actions)\n```\n\n## Original Project & Author\n\nThis project has been first inspired by [Fusuma](https://github.com/ytakzk/Fusuma)\nConsidering the big code, design changes and all the additional features added along the way, this moved form a fork to a standalone separate repo, also for discoverability purposes.\nOriginal Fusuma author is [ytakz](http://ytakzk.me)\n\n## Core Team\n<a href="https://github.com/S4cha">\n  <img src="https://raw.githubusercontent.com/Yummypets/YPImagePicker/master/Images/coreTeam1.png" width="70px">\n</a>\n<a href="https://github.com/NikKovIos">\n  <img src="https://raw.githubusercontent.com/Yummypets/YPImagePicker/master/Images/coreTeam2.png" width="70px">\n</a>\n\n## Contributors \xf0\x9f\x99\x8f\n[ezisazis](https://github.com/ezisazis),\n[hanikeddah](https://github.com/hanikeddah),\n[tahaburak](https://github.com/tahaburak),\n[ajkolean](https://github.com/ajkolean),\n[Anarchoschnitzel](https://github.com/Anarchoschnitzel),\n[Emil](https://github.com/heitara),\n[Rafael Damasceno](https://github.com/DamascenoRafael),\n[cenkingunlugu](https://github.com/https://github.com/cenkingunlugu)\n[heitara](https://github.com/heitara)\n[portellaa](https://github.com/portellaa)\n[Romixery](https://github.com/romixery)\n[shotat](https://github.com/shotat)\n\nSpecial thanks to [ihtiht](https://github.com/ihtiht) for the cool looking logo!\n\n## They helped us one way or another \xf0\x9f\x91\x8f\n[userdar](https://github.com/userdar),\n[Evgeniy](https://github.com/Ewg777),\n[MehdiMahdloo](https://github.com/MehdiMahdloo),\n[om-ha](https://github.com/om-ha),\n[userdar](https://github.com/userdar),\n[ChintanWeapp](https://github.com/ChintanWeapp),\n[eddieespinal](https://github.com/eddieespinal),\n[viktorgardart](https://github.com/viktorgardart),\n[gdelarosa](https://github.com/gdelarosa),\n[cwestMobile](https://github.com/cwestMobile),\n[Tinyik](https://github.com/Tinyik),\n[Vivekthakur647](https://github.com/Vivekthakur647),\n[tomasbykowski](https://github.com/tomasbykowski),\n[artemsmikh](https://github.com/artemsmikh),\n[theolof](https://github.com/theolof),\n[dongdong3344](https://github.com/dongdong3344),\n[MHX792](https://github.com/MHX792),\n[CIronfounderson](https://github.com/CIronfounderson),\n[Guerrix](https://github.com/Guerrix),\n[Zedd0202](https://github.com/Zedd0202),\n[mohammadZ74](https://github.com/mohammadZ74),\n[SalmanGhumsani](https://github.com/SalmanGhumsani),\n[wegweiser6](https://github.com/wegweiser6),\n[BilalAkram](https://github.com/BilalAkram),\n[KazimAhmad](https://github.com/KazimAhmad),\n[JustinBeBoy](https://github.com/JustinBeBoy),\n[SashaMeyer](https://github.com/SashaMeyer),\n[GShushanik](https://github.com/GShushanik),\n[Cez95](https://github.com/Cez95),\n[Palando](https://github.com/Palando),\n[sebastienboulogne](https://github.com/sebastienboulogne),\n[JigneshParekh7165](https://github.com/JigneshParekh7165),\n[Deepakepaisa](https://github.com/Deepakepaisa),\n[AndreiBoariu](https://github.com/AndreiBoariu),\n[nathankonrad1](https://github.com/nathankonrad1),\n[wawilliams003](https://github.com/wawilliams003),\n[pngo-hypewell](https://github.com/pngo-hypewell),\n[PawanManjani](https://github.com/PawanManjani),\n[devender54321](https://github.com/devender54321),\n[Didar1994](https://github.com/Didar1994),\n[relaxsus](https://github.com/relaxsus)\n[restoflash](https://github.com/restoflash)\n\n## Dependency\nYPImagePicker relies on [prynt/PryntTrimmerView](https://github.com/prynt/PryntTrimmerView) for provide video trimming and cover features. Big thanks to @HHK1 for making this open source :)\n\n## Obj-C support\nObjective-C is not supported and this is not on our roadmap.\nSwift is the future and dropping Obj-C is the price to pay to keep our velocity on this library :)\n\n## License\nYPImagePicker is released under the MIT license.  \nSee [LICENSE](LICENSE) for details.\n\n## Swift Version\n\n- Swift 3 -> version [**1.2.0**](https://github.com/Yummypets/YPImagePicker/releases/tag/1.2.0)\n- Swift 4.1 -> version [**3.4.1**](https://github.com/Yummypets/YPImagePicker/releases/tag/3.4.0)\n- Swift 4.2 -> version [**3.5.2**](https://github.com/Yummypets/YPImagePicker/releases/tag/3.5.2)\nreleases/tag/3.4.0)\n- Swift 5.0 -> version [**4.0.0**](https://github.com/Yummypets/YPImagePicker/releases/tag/4.0.0)\n- Swift 5.1 -> version [**4.1.2**](https://github.com/Yummypets/YPImagePicker/releases/tag/4.1.2)\n'