b'# Go gRPC Middleware\n\n[![Travis Build](https://travis-ci.org/grpc-ecosystem/go-grpc-middleware.svg?branch=master)](https://travis-ci.org/grpc-ecosystem/go-grpc-middleware)\n[![Go Report Card](https://goreportcard.com/badge/github.com/grpc-ecosystem/go-grpc-middleware)](https://goreportcard.com/report/github.com/grpc-ecosystem/go-grpc-middleware)\n[![GoDoc](http://img.shields.io/badge/GoDoc-Reference-blue.svg)](https://godoc.org/github.com/grpc-ecosystem/go-grpc-middleware)\n[![SourceGraph](https://sourcegraph.com/github.com/grpc-ecosystem/go-grpc-middleware/-/badge.svg)](https://sourcegraph.com/github.com/grpc-ecosystem/go-grpc-middleware/?badge)\n[![codecov](https://codecov.io/gh/grpc-ecosystem/go-grpc-middleware/branch/master/graph/badge.svg)](https://codecov.io/gh/grpc-ecosystem/go-grpc-middleware)\n[![Apache 2.0 License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](LICENSE)\n[![quality: production](https://img.shields.io/badge/quality-production-orange.svg)](#status)\n[![Slack](slack.png)](https://join.slack.com/t/improbable-eng/shared_invite/enQtMzQ1ODcyMzQ5MjM4LWY5ZWZmNGM2ODc5MmViNmQ3ZTA3ZTY3NzQwOTBlMTkzZmIxZTIxODk0OWU3YjZhNWVlNDU3MDlkZGViZjhkMjc)\n\n[gRPC Go](https://github.com/grpc/grpc-go) Middleware: interceptors, helpers, utilities.\n\n## Middleware\n\n[gRPC Go](https://github.com/grpc/grpc-go) recently acquired support for\nInterceptors, i.e. [middleware](https://medium.com/@matryer/writing-middleware-in-golang-and-how-go-makes-it-so-much-fun-4375c1246e81#.gv7tdlghs) \nthat is executed either on the gRPC Server before the request is passed onto the user\'s application logic, or on the gRPC client either around the user call. It is a perfect way to implement\ncommon patterns: auth, logging, message, validation, retries or monitoring.\n\nThese are generic building blocks that make it easy to build multiple microservices easily.\nThe purpose of this repository is to act as a go-to point for such reusable functionality. It contains\nsome of them itself, but also will link to useful external repos.\n\n`grpc_middleware` itself provides support for chaining interceptors, here\'s an example:\n\n```go\nimport "github.com/grpc-ecosystem/go-grpc-middleware"\n\nmyServer := grpc.NewServer(\n    grpc.StreamInterceptor(grpc_middleware.ChainStreamServer(\n        grpc_ctxtags.StreamServerInterceptor(),\n        grpc_opentracing.StreamServerInterceptor(),\n        grpc_prometheus.StreamServerInterceptor,\n        grpc_zap.StreamServerInterceptor(zapLogger),\n        grpc_auth.StreamServerInterceptor(myAuthFunction),\n        grpc_recovery.StreamServerInterceptor(),\n    )),\n    grpc.UnaryInterceptor(grpc_middleware.ChainUnaryServer(\n        grpc_ctxtags.UnaryServerInterceptor(),\n        grpc_opentracing.UnaryServerInterceptor(),\n        grpc_prometheus.UnaryServerInterceptor,\n        grpc_zap.UnaryServerInterceptor(zapLogger),\n        grpc_auth.UnaryServerInterceptor(myAuthFunction),\n        grpc_recovery.UnaryServerInterceptor(),\n    )),\n)\n```\n\n## Interceptors\n\n*Please send a PR to add new interceptors or middleware to this list*\n\n#### Auth\n   * [`grpc_auth`](auth) - a customizable (via `AuthFunc`) piece of auth middleware \n\n#### Logging\n   * [`grpc_ctxtags`](tags/) - a library that adds a `Tag` map to context, with data populated from request body\n   * [`grpc_zap`](logging/zap/) - integration of [zap](https://github.com/uber-go/zap) logging library into gRPC handlers.\n   * [`grpc_logrus`](logging/logrus/) - integration of [logrus](https://github.com/sirupsen/logrus) logging library into gRPC handlers.\n\n\n#### Monitoring\n   * [`grpc_prometheus`\xe2\x9a\xa1](https://github.com/grpc-ecosystem/go-grpc-prometheus) - Prometheus client-side and server-side monitoring middleware\n   * [`otgrpc`\xe2\x9a\xa1](https://github.com/grpc-ecosystem/grpc-opentracing/tree/master/go/otgrpc) - [OpenTracing](http://opentracing.io/) client-side and server-side interceptors\n   * [`grpc_opentracing`](tracing/opentracing) - [OpenTracing](http://opentracing.io/) client-side and server-side interceptors with support for streaming and handler-returned tags\n\n#### Client\n   * [`grpc_retry`](retry/) - a generic gRPC response code retry mechanism, client-side middleware\n\n#### Server\n   * [`grpc_validator`](validator/) - codegen inbound message validation from `.proto` options\n   * [`grpc_recovery`](recovery/) - turn panics into gRPC errors\n   * [`ratelimit`](ratelimit/) - grpc rate limiting by your own limiter\n\n\n## Status\n\nThis code has been running in *production* since May 2016 as the basis of the gRPC micro services stack at [Improbable](https://improbable.io).\n\nAdditional tooling will be added, and contributions are welcome.\n\n## License\n\n`go-grpc-middleware` is released under the Apache 2.0 license. See the [LICENSE](LICENSE) file for details.\n'