b'# Browser\n\n[![Travis-CI](https://travis-ci.org/fnando/browser.svg)](https://travis-ci.org/fnando/browser)\n[![Code Climate](https://codeclimate.com/github/fnando/browser/badges/gpa.svg)](https://codeclimate.com/github/fnando/browser)\n[![Test Coverage](https://codeclimate.com/github/fnando/browser/badges/coverage.svg)](https://codeclimate.com/github/fnando/browser/coverage)\n[![Gem](https://img.shields.io/gem/v/browser.svg)](https://rubygems.org/gems/browser)\n[![Gem](https://img.shields.io/gem/dt/browser.svg)](https://rubygems.org/gems/browser)\n\nDo some browser detection with Ruby. Includes ActionController integration.\n\n## Installation\n\n```bash\ngem install browser\n```\n\n## Usage\n\n```ruby\nrequire "browser"\n\nbrowser = Browser.new("Some User Agent", accept_language: "en-us")\n\n# General info\nbrowser.bot?\nbrowser.chrome?\nbrowser.core_media?\nbrowser.edge?                # Newest MS browser\nbrowser.electron?            # Electron Framework\nbrowser.firefox?\nbrowser.full_version\nbrowser.ie?\nbrowser.ie?(6)               # detect specific IE version\nbrowser.ie?([">8", "<10"])   # detect specific IE (IE9).\nbrowser.known?               # has the browser been successfully detected?\nbrowser.meta                 # an array with several attributes\nbrowser.modern?              # Webkit, Firefox 17+, IE 9+ and Opera 12+\nbrowser.name                 # readable browser name\nbrowser.nokia?\nbrowser.opera?\nbrowser.opera_mini?\nbrowser.phantom_js?\nbrowser.quicktime?\nbrowser.safari?\nbrowser.safari_webapp_mode?\nbrowser.to_s            # the meta info joined by space\nbrowser.uc_browser?\nbrowser.version         # major version number\nbrowser.webkit?\nbrowser.webkit_full_version\nbrowser.yandex?\nbrowser.wechat?\nbrowser.weibo?\nbrowser.yandex?\nbrowser.sputnik?\n\n# Get bot info\nbrowser.bot.name\nbrowser.bot.search_engine?\nbrowser.bot?\nBrowser::Bot.why?(ua) # shows which user agent was the offender\n\n# Get device info\nbrowser.device\nbrowser.device.id\nbrowser.device.name\nbrowser.device.blackberry_playbook?\nbrowser.device.console?\nbrowser.device.ipad?\nbrowser.device.iphone?\nbrowser.device.ipod_touch?\nbrowser.device.kindle?\nbrowser.device.kindle_fire?\nbrowser.device.mobile?\nbrowser.device.nintendo?\nbrowser.device.playstation?\nbrowser.device.ps3?\nbrowser.device.ps4?\nbrowser.device.psp?\nbrowser.device.silk?\nbrowser.device.surface?\nbrowser.device.tablet?\nbrowser.device.tv?\nbrowser.device.vita?\nbrowser.device.wii?\nbrowser.device.wiiu?\nbrowser.device.switch?\nbrowser.device.xbox?\nbrowser.device.xbox_360?\nbrowser.device.xbox_one?\n\n# Get platform info\nbrowser.platform\nbrowser.platform.id\nbrowser.platform.name\nbrowser.platform.version  # e.g. 9 (for iOS9)\nbrowser.platform.adobe_air?\nbrowser.platform.android?\nbrowser.platform.android?(4.2)   # detect Android Jelly Bean 4.2\nbrowser.platform.android_app?     # detect webview in an Android app\nbrowser.platform.android_webview? # alias for android_app?\nbrowser.platform.blackberry?\nbrowser.platform.blackberry?(10) # detect specific BlackBerry version\nbrowser.platform.chrome_os?\nbrowser.platform.firefox_os?\nbrowser.platform.ios?     # detect iOS\nbrowser.platform.ios?(9)  # detect specific iOS version\nbrowser.platform.ios_app?     # detect webview in an iOS app\nbrowser.platform.ios_webview? # alias for ios_app?\nbrowser.platform.linux?\nbrowser.platform.mac?\nbrowser.platform.other?\nbrowser.platform.windows10?\nbrowser.platform.windows7?\nbrowser.platform.windows8?\nbrowser.platform.windows8_1?\nbrowser.platform.windows?\nbrowser.platform.windows_mobile?\nbrowser.platform.windows_phone?\nbrowser.platform.windows_rt?\nbrowser.platform.windows_touchscreen_desktop?\nbrowser.platform.windows_vista?\nbrowser.platform.windows_wow64?\nbrowser.platform.windows_x64?\nbrowser.platform.windows_x64_inclusive?\nbrowser.platform.windows_xp?\n```\n\n### Aliases\n\nTo add aliases like `mobile?` and `tablet?` to the base object (e.g `browser.mobile?`), require the `browser/aliases` file and extend the Browser::Base object like the following:\n\n```ruby\nrequire "browser/aliases"\nBrowser::Base.include(Browser::Aliases)\n\nbrowser = Browser.new("Some user agent")\nbrowser.mobile? #=> false\n```\n\n### What\'s being detected?\n\n- For a list of platform detections, check [lib/browser/platform.rb](https://github.com/fnando/browser/blob/master/lib/browser/platform.rb)\n- For a list of device detections, check [lib/browser/device.rb](https://github.com/fnando/browser/blob/master/lib/browser/device.rb)\n- For a list of bot detections, check [bots.yml](https://github.com/fnando/browser/blob/master/bots.yml)\n\n### What defines a modern browser?\n\nThe current rules that define a modern browser are pretty loose:\n\n* Webkit\n* IE9+\n* Microsoft Edge\n* Firefox 17+\n* Firefox Tablet 14+\n* Opera 12+\n\nYou can define your own rules. A rule must be a proc/lambda or any object that implements the method === and accepts the browser object. To redefine all rules, clear the existing rules before adding your own.\n\n```ruby\n# Only Chrome Canary is considered modern.\nBrowser.modern_rules.clear\nBrowser.modern_rules << -> b { b.chrome? && b.version.to_i >= 37 }\n```\n\n### Rails integration\n\nJust add it to the Gemfile.\n\n```ruby\ngem "browser"\n```\n\nThis adds a helper method called `browser`, that inspects your current user agent.\n\n```erb\n<% if browser.ie?(6) %>\n  <p class="disclaimer">You\'re running an older IE version. Please update it!</p>\n<% end %>\n```\n\nIf you want to use Browser on your Rails app but don\'t want to taint your controller, use the following line on your Gemfile:\n\n```ruby\ngem "browser", require: "browser/browser"\n```\n\n### Accept Language\n\nParses the accept-language header from an HTTP request and produces an array of language objects sorted by quality.\n\n```ruby\nbrowser = Browser.new("Some User Agent", accept_language: "en-us")\n\nbrowser.accept_language.class\n#=> Array\n\nlanguage = browser.accept_language.first\n\nlanguage.code\n#=> "en"\n\nlanguage.region\n#=> "US"\n\nlanguage.full\n#=> "en-US"\n\nlanguage.quality\n#=> 1.0\n\nlanguage.name\n#=> "English/United States"\n```\n\nResult is always sorted in quality order from highest -> lowest. As per the HTTP spec:\n\n- omitting the quality value implies 1.0.\n- quality value equal to zero means that is not accepted by the client.\n\n### Internet Explorer\n\nInternet Explorer has a compatibility view mode that allows newer versions (IE8+) to run as an older version. Browser will always return the navigator version, ignoring the compatibility view version, when defined. If you need to get the engine\'s version, you have to use `Browser#msie_version` and `Browser#msie_full_version`.\n\nSo, let\'s say an user activates compatibility view in a IE11 browser. This is what you\'ll get:\n\n```ruby\nbrowser.version\n#=> 11\n\nbrowser.full_version\n#=> 11.0\n\nbrowser.msie_version\n#=> 7\n\nbrowser.msie_full_version\n#=> 7.0\n\nbrowser.compatibility_view?\n#=> true\n\nbrowser.modern?\n#=> false\n```\n\nThis behavior changed in `v1.0.0`; previously there wasn\'t a way of getting the real browser version.\n\n### Safari\n\niOS webviews and web apps aren\'t detected as Safari anymore, so be aware of that if that\'s your case. You can use a combination of platform and webkit detection to do whatever you want.\n\n```ruby\n# iPad\'s Safari running as web app mode.\nbrowser = Browser.new("Mozilla/5.0 (iPad; U; CPU OS 3_2_1 like Mac OS X; en-us) AppleWebKit/531.21.10 (KHTML, like Gecko) Mobile/7B405")\n\nbrowser.safari?\n#=> false\n\nbrowser.webkit?\n#=> true\n\nbrowser.platform.ios?\n#=> true\n```\n\n### Bots\n\nBrowser used to detect empty user agents as bots, but this behavior has changed. If you want to bring this detection back, you can activate it through the following call:\n\n```ruby\nBrowser::Bot.detect_empty_ua!\n```\n\n### Middleware\n\nYou can use the `Browser::Middleware` to redirect user agents.\n\n```ruby\nuse Browser::Middleware do\n  redirect_to "/upgrade" unless browser.modern?\nend\n```\n\nIf you\'re using Rails, you can use the route helper methods. Just add something like the following to a initializer file (`config/initializers/browser.rb`).\n\n```ruby\nRails.configuration.middleware.use Browser::Middleware do\n  redirect_to upgrade_path unless browser.modern?\nend\n```\n\nNotice that you can have multiple conditionals.\n\n```ruby\nRails.configuration.middleware.use Browser::Middleware do\n  next if browser.bot.search_engine?\n  redirect_to upgrade_path(browser: "oldie") if browser.ie? && !browser.modern?\n  redirect_to upgrade_path(browser: "oldfx") if browser.firefox? && !browser.modern?\nend\n```\n\nIf you need access to the `Rack::Request` object (e.g. to exclude a path), you can do so with `request`.\n\n```ruby\nRails.configuration.middleware.use Browser::Middleware do\n  redirect_to upgrade_path unless browser.modern? || request.env["PATH_INFO"] == "/exclude_me"\nend\n```\n\n### Migrating to v2\n\n#### Troubleshooting\n\n##### `TypeError: no implicit conversion of Hash into String`\n\nThe class constructor now has a different signature. Change the instantiation from `Browser.new(options)` to `Browser.new(ua, options)`, where:\n\n- `ua`: must be a string representing the user agent.\n- `options`: must be a hash (for now it only accepts the `accept_language` option).\n\n##### `NoMethodError: undefined method \'user_agent\'`\n\n`.ua` can now be used to retrieve the full User Agent string.\n\n## Development\n\n### Versioning\n\nThis library follows http://semver.org.\n\n### Writing code\n\nOnce you\'ve made your great commits (include tests, please):\n\n1. [Fork](http://help.github.com/forking/) browser\n2. Create a topic branch - `git checkout -b my_branch`\n3. Push to your branch - `git push origin my_branch`\n4. Create a pull request\n5. That\'s it!\n\nPlease respect the indentation rules and code style.\nAnd use 2 spaces, not tabs. And don\'t touch the version thing.\n\n## Configuring environment\n\nTo configure your environment, you must have Ruby and bundler installed. Then run `bundle install` to install all dependencies.\n\nTo run tests, execute `./bin/rake`.\n\n### Adding new features\n\nBefore using your time to code a new feature, open a ticket asking if it makes sense and if it\'s on this project\'s scope.\n\nDon\'t forget to add a new entry to `CHANGELOG.md`.\n\n#### Adding a new bot\n\n1. Add the user agent to `test/ua_bots.yml`.\n2. Add the readable name to `bots.yml`. The key must be something that matches the user agent, in lowercased text.\n3. Run tests.\n\nDon\'t forget to add a new entry to `CHANGELOG.md`.\n\n#### Adding a new search engine\n\n1. Add the user agent to `test/ua_search_engines.yml`.\n2. Add the same user agent to `test/ua_bots.yml`.\n3. Add the readable name to `search_engines.yml`. The key must be something that matches the user agent, in lowercased text.\n4. Run tests.\n\nDon\'t forget to add a new entry to `CHANGELOG.md`.\n\n#### Wrong browser/platform/device detection\n\nIf you know how to fix it, follow the "Writing code" above. Open an issue otherwise; make sure you fill in the issue template with all the required information.\n\n## Maintainer\n\n* Nando Vieira - http://nandovieira.com\n\n## Contributors\n\n* https://github.com/fnando/browser/contributors\n\n## License\n\n(The MIT License)\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\'Software\'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \'AS IS\', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n'