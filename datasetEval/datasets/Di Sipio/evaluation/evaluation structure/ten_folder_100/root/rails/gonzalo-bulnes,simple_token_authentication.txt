b'Simple Token Authentication\n===========================\n\n[![Gem Version](https://badge.fury.io/rb/simple_token_authentication.svg)](http://badge.fury.io/rb/simple_token_authentication)\n[![Build Status](https://travis-ci.org/gonzalo-bulnes/simple_token_authentication.svg?branch=master)](https://travis-ci.org/gonzalo-bulnes/simple_token_authentication)\n[![Code Climate](https://codeclimate.com/github/gonzalo-bulnes/simple_token_authentication.svg)](https://codeclimate.com/github/gonzalo-bulnes/simple_token_authentication)\n[![Security](https://hakiri.io/github/gonzalo-bulnes/simple_token_authentication/master.svg)](https://hakiri.io/github/gonzalo-bulnes/simple_token_authentication/master)\n[![Inline docs](http://inch-ci.org/github/gonzalo-bulnes/simple_token_authentication.svg?branch=master)](http://inch-ci.org/github/gonzalo-bulnes/simple_token_authentication)\n\nToken authentication support has been removed from [Devise][devise] for security reasons. In [this gist][original-gist], Devise\'s [Jos\xc3\xa9 Valim][josevalim] explains how token authentication should be performed in order to remain safe.\n\nThis gem packages the content of the gist and provides a set of convenient options for increased flexibility.\n\n  [devise]: https://github.com/plataformatec/devise\n  [original-gist]: https://gist.github.com/josevalim/fb706b1e933ef01e4fb6\n\n\n> **DISCLAIMER**: I am not Jos\xc3\xa9 Valim, nor has he been involved in the gem bundling process. Implementation errors, if any, are mine; and contributions are welcome. -- [GB][gonzalo-bulnes]\n\n  [josevalim]: https://github.com/josevalim\n  [gonzalo-bulnes]: https://github.com/gonzalo-bulnes\n\nInstallation\n------------\n\n### In a nutshell\n\nFirst install [Devise][devise] and configure it with any modules you want, then add the gem to your `Gemfile` and `bundle install`:\n\n```ruby\n# Gemfile\n\ngem \'simple_token_authentication\', \'~> 1.0\' # see semver.org\n```\n\nOnce that done, only two steps are required to setup token authentication:\n\n1. [Make one or more models token authenticatable][token_authenticatable] (ActiveRecord and Mongoid are supported)\n1. [Allow controllers to handle token authentication][token_authentication_handler] (Rails, Rails API, and `ActionController::Metal` are supported)\n\n_If you want more details about how the gem works, keep reading! We\'ll get to these two steps after the overview._\n\n  [token_authenticatable]: #make-models-token-authenticatable\n  [token_authentication_handler]: #allow-controllers-to-handle-token-authentication\n\n### Overview\n\nSimple Token Authentication provides the ability to manage an `authentication_token` from your model instances. A model with that ability enabled is said to be **token authenticatable** (typically, the `User` model will be made token authenticatable).\n\nThe gem also provides the ability for any controller to handle token authentication for one or multiple _token authenticatable_ models. That ability allows, for example, to automatically sign in an `user` when the correct credentials are provided with a request. A controller with that ability enabled is said to behave as a **token authentication handler**.\nThe token authentication credentials for a given request can be provided either in the form of [query params][authentication_method_query_params], or [HTTP headers][authentication_method_headers]. By default, the required credentials are the user\'s email and their authentication token.\n\nWhat happens when a request is provided with no credentials or incorrect credentials is [highly configurable][integration_with_other_authentication_methods] (some scenarios may require access to be denied, other may allow unauthenticated access, or provide others strategies to authenticate users). By default, when token authentication fails, Devise is used as a fallback to ensure a consistent behaviour with controllers that do not handle token authentication.\n\n  [authentication_method_query_params]: #authentication-method-1-query-params\n  [authentication_method_headers]: #authentication-method-2-request-headers\n  [integration_with_other_authentication_methods]: #integration-with-other-authentication-and-authorization-methods\n\n### Make models token authenticatable\n\n#### ActiveRecord\n\nFirst define which model or models will be token authenticatable (typ. `User`):\n\n```ruby\n# app/models/user.rb\n\nclass User < ActiveRecord::Base\n  acts_as_token_authenticatable\n\n  # Note: you can include any module you want. If available,\n  # token authentication will be performed before any other\n  # Devise authentication method.\n  #\n  # Include default devise modules. Others available are:\n  # :confirmable, :lockable, :timeoutable and :omniauthable\n  devise :invitable, :database_authenticatable,\n         :recoverable, :rememberable, :trackable, :validatable,\n         :lockable\n\n  # ...\nend\n```\n\nIf the model or models you chose have no `:authentication_token` attribute, add them one (with a unique index):\n\n```bash\nrails g migration add_authentication_token_to_users "authentication_token:string{30}:uniq"\nrake db:migrate\n```\n\n#### Mongoid\n\nDefine which model or models will be token authenticatable (typ. `User`):\n\n```ruby\n# app/models/user.rb\n\nclass User\n  include Mongoid::Document\n  # Include default devise modules. Others available are:\n  # :confirmable, :lockable, :timeoutable and :omniauthable\n  devise :database_authenticatable, :registerable,\n         :recoverable, :rememberable, :trackable, :validatable\n\n  ## Token Authenticatable\n  acts_as_token_authenticatable\n  field :authentication_token\n\n  # ...\nend\n```\n\n### Allow controllers to handle token authentication\n\nFinally define which controllers will handle token authentication (typ. `ApplicationController`) for which _token authenticatable_ models:\n\n```ruby\n# app/controllers/application_controller.rb\n\nclass ApplicationController < ActionController::Base # or ActionController::API\n                                                     # or ActionController::Metal\n  # ...\n\n  acts_as_token_authentication_handler_for User\n\n  # Security note: controllers with no-CSRF protection must disable the Devise fallback,\n  # see #49 for details.\n  # acts_as_token_authentication_handler_for User, fallback: :none\n\n  # The token authentication requirement can target specific controller actions:\n  # acts_as_token_authentication_handler_for User, only: [:create, :update, :destroy]\n  # acts_as_token_authentication_handler_for User, except: [:index, :show]\n  #\n  # Or target specific controller conditions:\n  # acts_as_token_authentication_handler_for User, unless: lambda { |controller| controller.request.format.html? }\n  # acts_as_token_authentication_handler_for User, if: lambda { |controller| controller.request.format.json? }\n\n  # Several token authenticatable models can be handled by the same controller.\n  # If so, for all of them except the last, the fallback should be set to :none.\n  #\n  # Please do notice that the order of declaration defines the order of precedence.\n  #\n  # acts_as_token_authentication_handler_for Admin, fallback: :none\n  # acts_as_token_authentication_handler_for SpecialUser, fallback: :none\n  # acts_as_token_authentication_handler_for User # the last fallback is up to you\n\n  # Aliases can be defined for namespaced models:\n  #\n  # acts_as_token_authentication_handler_for Customer::Representative, as: :facilitator\n  # acts_as_token_authentication_handler_for SpecialUser, as: :user\n  #\n  # When defined, aliases are used to define both the params and the header names to watch.\n  # E.g. facilitator_token, X-Facilitator-Token\n\n  # ...\nend\n```\n\nConfiguration\n-------------\n\nSome aspects of the behavior of _Simple Token Authentication_ can be customized with an initializer.\n\nThe file below contains examples of the patterns that _token authentication handlers_ will watch for credentials (e.g. `user_email`, `X-SuperAdmin-Token`) and how to customize them:\n\n```ruby\n# config/initializers/simple_token_authentication.rb\n\nSimpleTokenAuthentication.configure do |config|\n\n  # Configure the session persistence policy after a successful sign in,\n  # in other words, if the authentication token acts as a signin token.\n  # If true, user is stored in the session and the authentication token and\n  # email may be provided only once.\n  # If false, users must provide their authentication token and email at every request.\n  # config.sign_in_token = false\n\n  # Configure the name of the HTTP headers watched for authentication.\n  #\n  # Default header names for a given token authenticatable entity follow the pattern:\n  #   { entity: { authentication_token: \'X-Entity-Token\', email: \'X-Entity-Email\'} }\n  #\n  # When several token authenticatable models are defined, custom header names\n  # can be specified for none, any, or all of them.\n  #\n  # Note: when using the identifiers options, this option behaviour is modified.\n  # Please see the example below.\n  #\n  # Examples\n  #\n  #   Given User and SuperAdmin are token authenticatable,\n  #   When the following configuration is used:\n  #     `config.header_names = { super_admin: { authentication_token: \'X-Admin-Auth-Token\' } }`\n  #   Then the token authentification handler for User watches the following headers:\n  #     `X-User-Token, X-User-Email`\n  #   And the token authentification handler for SuperAdmin watches the following headers:\n  #     `X-Admin-Auth-Token, X-SuperAdmin-Email`\n  #\n  #   When the identifiers option is set:\n  #     `config.identifiers = { super_admin: :phone_number }`\n  #   Then both the header names identifier key and default value are modified accordingly:\n  #     `config.header_names = { super_admin: { phone_number: \'X-SuperAdmin-PhoneNumber\' } }`\n  #\n  # config.header_names = { user: { authentication_token: \'X-User-Token\', email: \'X-User-Email\' } }\n\n  # Configure the name of the attribute used to identify the user for authentication.\n  # That attribute must exist in your model.\n  #\n  # The default identifiers follow the pattern:\n  # { entity: \'email\' }\n  #\n  # Note: the identifer must match your Devise configuration,\n  # see https://github.com/plataformatec/devise/wiki/How-To:-Allow-users-to-sign-in-using-their-username-or-email-address#tell-devise-to-use-username-in-the-authentication_keys\n  #\n  # Note: setting this option does modify the header_names behaviour,\n  # see the header_names section above.\n  #\n  # Example:\n  #\n  #   `config.identifiers = { super_admin: \'phone_number\', user: \'uuid\' }`\n  #\n  # config.identifiers = { user: \'email\' }\n\n  # Configure the Devise trackable strategy integration.\n  #\n  # If true, tracking is disabled for token authentication: signing in through\n  # token authentication won\'t modify the Devise trackable statistics.\n  #\n  # If false, given Devise trackable is configured for the relevant model,\n  # then signing in through token authentication will be tracked as any other sign in.\n  #\n  # config.skip_devise_trackable = true\nend\n```\n\nUsage\n-----\n\n### Tokens Generation\n\nAssuming `user` is an instance of `User`, which is _token authenticatable_: each time `user` will be saved, and `user.authentication_token.blank?` it receives a new and unique authentication token (via `Devise.friendly_token`).\n\n### Authentication Method 1: Query Params\n\nYou can authenticate passing the `user_email` and `user_token` params as query params:\n\n```\nGET https://secure.example.com?user_email=alice@example.com&user_token=1G8_s7P-V-4MGojaKD7a\n```\n\nThe _token authentication handler_ (e.g. `ApplicationController`) will perform the user sign in if both are correct.\n\n### Authentication Method 2: Request Headers\n\nYou can also use request headers (which may be simpler when authenticating against an API):\n\n```\nX-User-Email alice@example.com\nX-User-Token 1G8_s7P-V-4MGojaKD7a\n```\n\nIn fact, you can mix both methods and provide the `user_email` with one and the `user_token` with the other, even if it would be a freak thing to do.\n\n### Integration with other authentication and authorization methods\n\nIf sign-in is successful, no other authentication method will be run, but if it doesn\'t (the authentication params were missing, or incorrect) then Devise takes control and tries to `authenticate_user!` with its own modules. That behaviour can however be modified for any controller through the **fallback** option (which defaults to `fallback: :devise`).\n\nWhen `fallback: :exception` is set, then an exception is raised on token authentication failure. The resulting controller behaviour is very similar to the behaviour induced by using the Devise `authenticate_user!` callback instead of `authenticate_user`. That setting allows, for example, to prevent unauthenticated users to accede API controllers while disabling the default fallback to Devise.\n\n**Important**: Please do notice that controller actions without CSRF protection **must** disable the Devise fallback for [security reasons][csrf] (both `fallback: :exception` and `fallback: :none` will disable the Devise fallback). Since Rails enables CSRF protection by default, this configuration requirement should only affect controllers where you have disabled it specifically, which may be the case of API controllers.\n\nTo use no fallback when token authentication fails, set `fallback: :none`.\n\n  [csrf]: https://github.com/gonzalo-bulnes/simple_token_authentication/issues/49\n\n### Hooks\n\nOne hook is currently available to trigger custom behaviour after an user has been successfully authenticated through token authentication. To use it, override the `after_successful_token_authentication` method in the corresponding token authentication handler:\n\n```ruby\n# app/controller/application_controller.rb\n\nclass ApplicationController < ActiveController::Base\n  acts_as_token_authentication_handler_for User\n\n  # ...\n\n  private\n\n    def after_successful_token_authentication\n      # Make the authentication token to be disposable - for example\n      renew_authentication_token!\n    end\nend\n```\n\n### Testing\n\nHere is an example of how you can test-drive your configuration using [Minitest][minitest]:\n\n  [minitest]: https://github.com/seattlerb/minitest\n\n```ruby\nclass SomeControllerTest < ActionController::TestCase\n\n  test "index with token authentication via query params" do\n    get :index, { user_email: "alice@example.com", user_token: "1G8_s7P-V-4MGojaKD7a" }\n    assert_response :success\n  end\n\n  test "index with token authentication via request headers" do\n    @request.headers[\'X-User-Email\'] = "alice@example.com"\n    @request.headers[\'X-User-Token\'] = "1G8_s7P-V-4MGojaKD7a"\n\n    get :index\n    assert_response :success\n  end\nend\n```\n\nDocumentation\n-------------\n\n### Frequently Asked Questions\n\nAny question? Please don\'t hesitate to open a new issue to get help. I keep questions tagged to make possible to [review the open questions][open-questions], while closed questions are organized as a sort of [FAQ][faq].\n\n  [open-questions]: https://github.com/gonzalo-bulnes/simple_token_authentication/issues?labels=question&page=1&state=open\n  [faq]: https://github.com/gonzalo-bulnes/simple_token_authentication/issues?direction=desc&labels=question&page=1&sort=comments&state=closed\n\n### Change Log\n\nReleases are commented to provide a [brief change log][releases], details can be found in the [`CHANGELOG`][changelog] file.\n\n  [releases]: https://github.com/gonzalo-bulnes/simple_token_authentication/releases\n  [changelog]: ./CHANGELOG.md\n\nDevelopment\n-----------\n\n### Testing and documentation\n\nThis gem development has been test-driven since `v1.0.0`. Until `v1.5.1`, the gem behaviour was described using [Cucumber][cucumber] and [RSpec][rspec] in a dummy app generated by [Aruba][aruba]. Since `v1.5.2` it is described using Rspec alone and [Appraisal][appraisal] is used since `v1.13.0` for [regression testing][regression].\n\nRSpec [tags][tags] are used to categorize the spec examples.\n\nSpec examples that are tagged as `public` describe aspects of the gem public API, and MAY be considered as the gem documentation.\n\nThe `private` or `protected` specs are written for development purpose only. Because they describe internal behaviour which may change at any moment without notice, they are only executed as a secondary task by the [continuous integration service][travis] and SHOULD be ignored.\n\nRun `rake spec:public` to print the gem public documentation.\n\n  [appraisal]: https://github.com/thoughtbot/appraisal\n  [aruba]: https://github.com/cucumber/aruba\n  [cucumber]: https://github.com/cucumber/cucumber-rails\n  [regression]: https://github.com/gonzalo-bulnes/simple_token_authentication/wiki/Regression-Testing\n  [rspec]: https://www.relishapp.com/rspec/rspec-rails/docs\n  [tags]: https://www.relishapp.com/rspec/rspec-core/v/3-1/docs/command-line/tag-option\n  [travis]: https://travis-ci.org/gonzalo-bulnes/simple_token_authentication/builds\n\n### Contributions\n\nContributions are welcome! I\'m not personally maintaining any [list of contributors][contributors] for now, but any PR which references us all will be welcome.\n\n  [contributors]: https://github.com/gonzalo-bulnes/simple_token_authentication/graphs/contributors\n\nPlease be sure to [review the open issues][open-questions] and contribute with your ideas or code in the issue best suited to the topic. Keeping discussions in a single place makes easier to everyone interested in that topic to keep track of the contributions.\n\nFinally, please note that this project is released with a [Contributor Code of Conduct][coc]. By participating in this project you agree to abide by its terms.\n\n  [coc]: ./CODE_OF_CONDUCT.md\n\nCredits\n-------\n\nIt may sound a bit redundant, but this gem wouldn\'t exist without [this gist][original-gist], nor without the [comments][issues] and [contributions][pulls] of many people. Thank them if you see them!\n\n  [issues]: https://github.com/gonzalo-bulnes/simple_token_authentication/issues\n  [pulls]: https://github.com/gonzalo-bulnes/simple_token_authentication/pulls\n\nLicense\n-------\n\n    Simple Token Authentication\n    Copyright (C) 2013, 2014, 2015, 2016, 2017 Gonzalo Bulnes Guilpain\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n'