b'# premailer-rails\n\nCSS styled emails without the hassle.\n\n[![Build Status][build-image]][build-link]\n[![Gem Version][gem-image]][gem-link]\n[![Dependency Status][deps-image]][deps-link]\n[![Code Climate][gpa-image]][gpa-link]\n[![Coverage Status][cov-image]][cov-link]\n\n## Introduction\n\nThis gem is a drop in solution for styling HTML emails with CSS without having\nto do the hard work yourself.\n\nStyling emails is not just a matter of linking to a stylesheet. Most clients,\nespecially web clients, ignore linked stylesheets or `<style>` tags in the HTML.\nThe workaround is to write all the CSS rules in the `style` attribute of each\ntag inside your email. This is a rather tedious and hard to maintain approach.\n\nPremailer to the rescue! The great [premailer] gem applies all CSS rules to each\nmatching HTML element by adding them to the `style` attribute. This allows you\nto keep HTML and CSS in separate files, just as you\'re used to from web\ndevelopment, thus keeping your sanity.\n\nThis gem is an adapter for premailer to work with [actionmailer] out of the box.\nActionmailer is the email framework used in Rails, which also works outside of\nRails. Although premailer-rails has certain Rails specific features, **it also\nworks in the absence of Rails** making it compatible with other frameworks such\nas sinatra.\n\n## How It Works\n\npremailer-rails works with actionmailer by registering a delivery hook. This\ncauses all emails that are delivered to be processed by premailer-rails. This\nmeans that by simply including premailer-rails in your `Gemfile` you\'ll get\nstyled emails without having to set anything up.\n\nWhenever premailer-rails processes an email, it collects the URLs of all linked\nstylesheets (`<link rel="stylesheet" href="css_url">`). Then, for each of these\nURLs, it tries to get the content through a couple of strategies. As long as\na strategy does not return anything, the next one is used. The strategies\navailable are:\n\n-   `:filesystem`: If there\'s a file inside `public/` with the same path as in\n    the URL, it is read from disk. E.g. if the URL is\n    `http://cdn.example.com/assets/email.css` the contents of the file located\n    at `public/assets/email.css` gets returned if it exists.\n\n-   `:asset_pipeline`: If Rails is available and the asset pipeline is enabled,\n    the file is retrieved through the asset pipeline. E.g. if the URL is\n    `http://cdn.example.com/assets/email-fingerprint123.css`, the file\n    `email.css` is requested from the asset pipeline. That is, the fingerprint\n    and the prefix (in this case `assets` is the prefix) are stripped before\n    requesting it from the asset pipeline.\n\n-   `:network`: As a last resort, the URL is simply requested and the response\n    body is used. This is useful when the assets are not bundled in the\n    application and only available on a CDN. On Heroku e.g. you can add assets\n    to your `.slugignore` causing your assets to not be available to the app\n    (and thus resulting in a smaller app) and deploy the assets to a CDN such\n    as S3/CloudFront.\n\nYou can configure which strategies you want to use as well as specify their\norder. Refer to the *Configuration* section for more on this.\n\nNote that the retrieved CSS is cached when the gem is running with Rails in\nproduction.\n\n## Installation\n\nSimply add the gem to your `Gemfile`:\n\n```ruby\ngem \'premailer-rails\'\n```\n\npremailer-rails and premailer require a gem that is used to parse the email\'s\nHTML. For a list of supported gems and how to select which one to use, please\nrefer to the [*Adapter*\nsection](https://github.com/premailer/premailer#adapters) of premailer. Note\nthat there is no hard dependency from either gem so you should add one yourself.\nAlso note that this gem is only tested with [nokogiri].\n\n## Configuration\n\nPremailer itself accepts a number of options. In order for premailer-rails to\npass these options on to the underlying premailer instance, specify them\nas follows (in Rails you could do that in an initializer such as\n`config/initializers/premailer_rails.rb`):\n\n```ruby\nPremailer::Rails.config.merge!(preserve_styles: true, remove_ids: true)\n```\n\nFor a list of options, refer to the [premailer documentation]. The default\nconfigs are:\n\n```ruby\n{\n  input_encoding: \'UTF-8\',\n  generate_text_part: true,\n  strategies: [:filesystem, :asset_pipeline, :network]\n}\n```\n\nIf you don\'t want to automatically generate a text part from the html part, set\nthe config `:generate_text_part` to false.\n\nNote that the options `:with_html_string` and `:css_string` are used internally\nby premailer-rails and thus will be overridden.\n\nIf you\'re using this gem outside of Rails, you\'ll need to call\n`Premailer::Rails.register_interceptors` manually in order for it to work. This\nis done ideally in some kind of initializer, depending on the framework you\'re\nusing.\n\npremailer-rails reads all stylesheet `<link>` tags, inlines the linked CSS\nand removes the tags. If you wish to ignore a certain tag, e.g. one that links to\nexternal fonts such as Google Fonts, you can add a `data-premailer="ignore"`\nattribute.\n\n## Usage\n\npremailer-rails processes all outgoing emails by default. If you wish to skip\npremailer for a certain email, simply set the `:skip_premailer` header:\n\n```ruby\nclass UserMailer < ActionMailer::Base\n  def welcome_email(user)\n    mail to: user.email,\n         subject: \'Welcome to My Awesome Site\',\n         skip_premailer: true\n  end\nend\n```\n\nNote that the mere presence of this header causes premailer to be skipped, i.e.,\neven setting `skip_premailer: false` will cause premailer to be skipped. The\nreason for that is that the `skip_premailer` is a simple header and the value is\ntransformed into a string, causing `\'false\'` to become truthy.\n\nEmails are only processed upon delivery, i.e. when calling `#deliver` on the\nemail, or when [previewing them in\nrails](http://api.rubyonrails.org/v4.1.0/classes/ActionMailer/Base.html#class-ActionMailer::Base-label-Previewing+emails).\nIf you wish to manually trigger the inlining, you can do so by calling the hook:\n\n```ruby\nmail = SomeMailer.some_message(args)\nPremailer::Rails::Hook.perform(mail)\n```\n\nThis will modify the email in place, useful e.g. in tests.\n\n## Small Print\n\n### Author\n\nPhilipe Fatio ([@fphilipe][fphilipe twitter])\n\n### License\n\npremailer-rails is released under the MIT license. See the [license file].\n\n[build-image]: https://travis-ci.org/fphilipe/premailer-rails.svg\n[build-link]:  https://travis-ci.org/fphilipe/premailer-rails\n[gem-image]:   https://badge.fury.io/rb/premailer-rails.svg\n[gem-link]:    https://rubygems.org/gems/premailer-rails\n[deps-image]:  https://gemnasium.com/fphilipe/premailer-rails.svg\n[deps-link]:   https://gemnasium.com/fphilipe/premailer-rails\n[gpa-image]:   https://codeclimate.com/github/fphilipe/premailer-rails.svg\n[gpa-link]:    https://codeclimate.com/github/fphilipe/premailer-rails\n[cov-image]:   https://coveralls.io/repos/fphilipe/premailer-rails/badge.svg\n[cov-link]:    https://coveralls.io/r/fphilipe/premailer-rails\n[tip-image]:   https://rawgithub.com/twolfson/gittip-badge/0.1.0/dist/gittip.svg\n[tip-link]:    https://www.gittip.com/fphilipe/\n\n[premailer]:    https://github.com/premailer/premailer\n[actionmailer]: https://github.com/rails/rails/tree/master/actionmailer\n[nokogiri]:     https://github.com/sparklemotion/nokogiri\n\n[premailer documentation]: https://www.rubydoc.info/gems/premailer/Premailer:initialize\n\n[fphilipe twitter]: https://twitter.com/fphilipe\n[license file]:     LICENSE\n'