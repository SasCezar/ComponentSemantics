b'# [Split](https://libraries.io/rubygems/split)\n\n[![Gem Version](https://badge.fury.io/rb/split.svg)](http://badge.fury.io/rb/split)\n[![Build Status](https://secure.travis-ci.org/splitrb/split.svg?branch=master)](https://travis-ci.org/splitrb/split)\n[![Code Climate](https://codeclimate.com/github/splitrb/split/badges/gpa.svg)](https://codeclimate.com/github/splitrb/split)\n[![Test Coverage](https://codeclimate.com/github/splitrb/split/badges/coverage.svg)](https://codeclimate.com/github/splitrb/split/coverage)\n[![standard-readme compliant](https://img.shields.io/badge/readme%20style-standard-brightgreen.svg?style=flat-square)](https://github.com/RichardLitt/standard-readme)\n[![Open Source Helpers](https://www.codetriage.com/splitrb/split/badges/users.svg)](https://www.codetriage.com/splitrb/split)\n\n> \xf0\x9f\x93\x88 The Rack Based A/B testing framework https://libraries.io/rubygems/split\n\nSplit is a rack based A/B testing framework designed to work with Rails, Sinatra or any other rack based app.\n\nSplit is heavily inspired by the [Abingo](https://github.com/ryanb/abingo) and [Vanity](https://github.com/assaf/vanity) Rails A/B testing plugins and [Resque](https://github.com/resque/resque) in its use of Redis.\n\nSplit is designed to be hacker friendly, allowing for maximum customisation and extensibility.\n\n## Install\n\n### Requirements\n\nSplit currently requires Ruby 1.9.3 or higher. If your project requires compatibility with Ruby 1.8.x and Rails 2.3, please use v0.8.0.\n\nSplit uses Redis as a datastore.\n\nSplit only supports Redis 2.0 or greater.\n\nIf you\'re on OS X, Homebrew is the simplest way to install Redis:\n\n```bash\nbrew install redis\nredis-server /usr/local/etc/redis.conf\n```\n\nYou now have a Redis daemon running on port `6379`.\n\n### Setup\n\n```bash\ngem install split\n```\n\n#### Rails\n\nAdding `gem \'split\'` to your Gemfile will autoload it when rails starts up, as long as you\'ve configured Redis it will \'just work\'.\n\n#### Sinatra\n\nTo configure Sinatra with Split you need to enable sessions and mix in the helper methods. Add the following lines at the top of your Sinatra app:\n\n```ruby\nrequire \'split\'\n\nclass MySinatraApp < Sinatra::Base\n  enable :sessions\n  helpers Split::Helper\n\n  get \'/\' do\n  ...\nend\n```\n\n## Usage\n\nTo begin your A/B test use the `ab_test` method, naming your experiment with the first argument and then the different alternatives which you wish to test on as the other arguments.\n\n`ab_test` returns one of the alternatives, if a user has already seen that test they will get the same alternative as before, which you can use to split your code on.\n\nIt can be used to render different templates, show different text or any other case based logic.\n\n`ab_finished` is used to make a completion of an experiment, or conversion.\n\nExample: View\n\n```erb\n<% ab_test(:login_button, "/images/button1.jpg", "/images/button2.jpg") do |button_file| %>\n  <%= image_tag(button_file, alt: "Login!") %>\n<% end %>\n```\n\nExample: Controller\n\n```ruby\ndef register_new_user\n  # See what level of free points maximizes users\' decision to buy replacement points.\n  @starter_points = ab_test(:new_user_free_points, \'100\', \'200\', \'300\')\nend\n```\n\nExample: Conversion tracking (in a controller!)\n\n```ruby\ndef buy_new_points\n  # some business logic\n  ab_finished(:new_user_free_points)\nend\n```\n\nExample: Conversion tracking (in a view)\n\n```erb\nThanks for signing up, dude! <% ab_finished(:signup_page_redesign) %>\n```\n\nYou can find more examples, tutorials and guides on the [wiki](https://github.com/splitrb/split/wiki).\n\n## Statistical Validity\n\nSplit has two options for you to use to determine which alternative is the best.\n\nThe first option (default on the dashboard) uses a z test (n>30) for the difference between your control and alternative conversion rates to calculate statistical significance. This test will tell you whether an alternative is better or worse than your control, but it will not distinguish between which alternative is the best in an experiment with multiple alternatives. Split will only tell you if your experiment is 90%, 95%, or 99% significant, and this test only works if you have more than 30 participants and 5 conversions for each branch.\n\nAs per this [blog post](https://www.evanmiller.org/how-not-to-run-an-ab-test.html) on the pitfalls of A/B testing, it is highly recommended that you determine your requisite sample size for each branch before running the experiment. Otherwise, you\'ll have an increased rate of false positives (experiments which show a significant effect where really there is none).\n\n[Here](https://www.evanmiller.org/ab-testing/sample-size.html) is a sample size calculator for your convenience.\n\nThe second option uses simulations from a beta distribution to determine the probability that the given alternative is the winner compared to all other alternatives. You can view these probabilities by clicking on the drop-down menu labeled "Confidence." This option should be used when the experiment has more than just 1 control and 1 alternative. It can also be used for a simple, 2-alternative A/B test.\n\nCalculating the beta-distribution simulations for a large number of experiments can be slow, so the results are cached. You can specify how often they should be recalculated (the default is once per day).\n\n```ruby\nSplit.configure do |config|\n  config.winning_alternative_recalculation_interval = 3600 # 1 hour\nend\n```\n\n## Extras\n\n### Weighted alternatives\n\nPerhaps you only want to show an alternative to 10% of your visitors because it is very experimental or not yet fully load tested.\n\nTo do this you can pass a weight with each alternative in the following ways:\n\n```ruby\nab_test(:homepage_design, {\'Old\' => 18}, {\'New\' => 2})\n\nab_test(:homepage_design, \'Old\', {\'New\' => 1.0/9})\n\nab_test(:homepage_design, {\'Old\' => 9}, \'New\')\n```\n\nThis will only show the new alternative to visitors 1 in 10 times, the default weight for an alternative is 1.\n\n### Overriding alternatives\n\nFor development and testing, you may wish to force your app to always return an alternative.\nYou can do this by passing it as a parameter in the url.\n\nIf you have an experiment called `button_color` with alternatives called `red` and `blue` used on your homepage, a url such as:\n\n    http://myawesomesite.com?ab_test[button_color]=red\n\nwill always have red buttons. This won\'t be stored in your session or count towards to results, unless you set the `store_override` configuration option.\n\nIn the event you want to disable all tests without having to know the individual experiment names, add a `SPLIT_DISABLE` query parameter.\n\n    http://myawesomesite.com?SPLIT_DISABLE=true\n\nIt is not required to send `SPLIT_DISABLE=false` to activate Split.\n\n\n### Rspec Helper\nTo aid testing with RSpec, write `spec/support/split_helper.rb` and call `use_ab_test(alternatives_by_experiment)` in your specs as instructed below:\n\n```ruby\n# Create a file with these contents at \'spec/support/split_helper.rb\'\n# and ensure it is `require`d in your rails_helper.rb or spec_helper.rb\nmodule SplitHelper\n\n  # Force a specific experiment alternative to always be returned:\n  #   use_ab_test(signup_form: "single_page")\n  #\n  # Force alternatives for multiple experiments:\n  #   use_ab_test(signup_form: "single_page", pricing: "show_enterprise_prices")\n  #\n  def use_ab_test(alternatives_by_experiment)\n    allow_any_instance_of(Split::Helper).to receive(:ab_test) do |_receiver, experiment|\n      alternatives_by_experiment.fetch(experiment) { |key| raise "Unknown experiment \'#{key}\'" }\n    end\n  end\nend\n\n# Make the `use_ab_test` method available to all specs:\nRSpec.configure do |config|\n  config.include SplitHelper\nend\n```\n\nNow you can call `use_ab_test(alternatives_by_experiment)`  in your specs, for example:\n```ruby\nit "registers using experimental signup" do\n  use_ab_test experiment_name: "alternative_name"\n  post "/signups"\n  ...\nend\n```\n\n\n### Starting experiments manually\n\nBy default new A/B tests will be active right after deployment. In case you would like to start new test a while after\nthe deploy, you can do it by setting the `start_manually` configuration option to `true`.\n\nAfter choosing this option tests won\'t be started right after deploy, but after pressing the `Start` button in Split admin dashboard.  If a test is deleted from the Split dashboard, then it can only be started after pressing the `Start` button whenever being re-initialized.\n\n### Reset after completion\n\nWhen a user completes a test their session is reset so that they may start the test again in the future.\n\nTo stop this behaviour you can pass the following option to the `ab_finished` method:\n\n```ruby\nab_finished(:experiment_name, reset: false)\n```\n\nThe user will then always see the alternative they started with.\n\nAny old unfinished experiment key will be deleted from the user\'s data storage if the experiment had been removed or is over and a winner had been chosen. This allows a user to enroll into any new experiment in cases when the `allow_multiple_experiments` config option is set to `false`.\n\n### Reset experiments manually\n\nBy default Split automatically resets the experiment whenever it detects the configuration for an experiment has changed (e.g. you call `ab_test` with different alternatives). You can prevent this by setting the option `reset_manually` to `true`.\n\nYou may want to do this when you want to change something, like the variants\' names, the metadata about an experiment, etc. without resetting everything.\n\n### Multiple experiments at once\n\nBy default Split will avoid users participating in multiple experiments at once. This means you are less likely to skew results by adding in more variation to your tests.\n\nTo stop this behaviour and allow users to participate in multiple experiments at once set the `allow_multiple_experiments` config option to true like so:\n\n```ruby\nSplit.configure do |config|\n  config.allow_multiple_experiments = true\nend\n```\n\nThis will allow the user to participate in any number of experiments and belong to any alternative in each experiment. This has the possible downside of a variation in one experiment influencing the outcome of another.\n\nTo address this, setting the `allow_multiple_experiments` config option to \'control\' like so:\n```ruby\nSplit.configure do |config|\n  config.allow_multiple_experiments = \'control\'\nend\n```\n\nFor this to work, each and every experiment you define must have an alternative named \'control\'. This will allow the user to participate in multiple experiments as long as the user belongs to the alternative \'control\' in each experiment. As soon as the user belongs to an alternative named something other than \'control\' the user may not participate in any more experiments. Calling ab_test(<other experiments>) will always return the first alternative without adding the user to that experiment.\n\n### Experiment Persistence\n\nSplit comes with three built-in persistence adapters for storing users and the alternatives they\'ve been given for each experiment.\n\nBy default Split will store the tests for each user in the session.\n\nYou can optionally configure Split to use a cookie, Redis, or any custom adapter of your choosing.\n\n#### Cookies\n\n```ruby\nSplit.configure do |config|\n  config.persistence = :cookie\nend\n```\n\nBy default, cookies will expire in 1 year. To change that, set the `persistence_cookie_length` in the configuration (unit of time in seconds).\n\n```ruby\nSplit.configure do |config|\n  config.persistence = :cookie\n  config.persistence_cookie_length = 2592000 # 30 days\nend\n```\n\n__Note:__ Using cookies depends on `ActionDispatch::Cookies` or any identical API\n\n#### Redis\n\nUsing Redis will allow ab_users to persist across sessions or machines.\n\n```ruby\nSplit.configure do |config|\n  config.persistence = Split::Persistence::RedisAdapter.with_config(lookup_by: -> (context) { context.current_user_id })\n  # Equivalent\n  # config.persistence = Split::Persistence::RedisAdapter.with_config(lookup_by: :current_user_id)\nend\n```\n\nOptions:\n* `lookup_by`: method to invoke per request for uniquely identifying ab_users (mandatory configuration)\n* `namespace`: separate namespace to store these persisted values (default "persistence")\n* `expire_seconds`: sets TTL for user key. (if a user is in multiple experiments most recent update will reset TTL for all their assignments)\n\n#### Dual Adapter\n\nThe Dual Adapter allows the use of different persistence adapters for logged-in and logged-out users. A common use case is to use Redis for logged-in users and Cookies for logged-out users.\n\n```ruby\ncookie_adapter = Split::Persistence::CookieAdapter\nredis_adapter = Split::Persistence::RedisAdapter.with_config(\n    lookup_by: -> (context) { context.send(:current_user).try(:id) },\n    expire_seconds: 2592000)\n\nSplit.configure do |config|\n  config.persistence = Split::Persistence::DualAdapter.with_config(\n      logged_in: -> (context) { !context.send(:current_user).try(:id).nil? },\n      logged_in_adapter: redis_adapter,\n      logged_out_adapter: cookie_adapter)\n  config.persistence_cookie_length = 2592000 # 30 days\nend\n```\n\n#### Custom Adapter\n\nYour custom adapter needs to implement the same API as existing adapters.\nSee `Split::Persistence::CookieAdapter` or `Split::Persistence::SessionAdapter` for a starting point.\n\n```ruby\nSplit.configure do |config|\n  config.persistence = YourCustomAdapterClass\nend\n```\n\n### Trial Event Hooks\n\nYou can define methods that will be called at the same time as experiment\nalternative participation and goal completion.\n\nFor example:\n\n``` ruby\nSplit.configure do |config|\n  config.on_trial  = :log_trial # run on every trial\n  config.on_trial_choose   = :log_trial_choose # run on trials with new users only\n  config.on_trial_complete = :log_trial_complete\nend\n```\n\nSet these attributes to a method name available in the same context as the\n`ab_test` method. These methods should accept one argument, a `Trial` instance.\n\n``` ruby\ndef log_trial(trial)\n  logger.info "experiment=%s alternative=%s user=%s" %\n    [ trial.experiment.name, trial.alternative, current_user.id ]\nend\n\ndef log_trial_choose(trial)\n  logger.info "[new user] experiment=%s alternative=%s user=%s" %\n    [ trial.experiment.name, trial.alternative, current_user.id ]\nend\n\ndef log_trial_complete(trial)\n  logger.info "experiment=%s alternative=%s user=%s complete=true" %\n    [ trial.experiment.name, trial.alternative, current_user.id ]\nend\n```\n\n#### Views\n\nIf you are running `ab_test` from a view, you must define your event\nhook callback as a\n[helper_method](https://apidock.com/rails/AbstractController/Helpers/ClassMethods/helper_method)\nin the controller:\n\n``` ruby\nhelper_method :log_trial_choose\n\ndef log_trial_choose(trial)\n  logger.info "experiment=%s alternative=%s user=%s" %\n    [ trial.experiment.name, trial.alternative, current_user.id ]\nend\n```\n\n### Experiment Hooks\n\nYou can assign a proc that will be called when an experiment is reset or deleted. You can use these hooks to call methods within your application to keep data related to experiments in sync with Split.\n\nFor example:\n\n``` ruby\nSplit.configure do |config|\n  # after experiment reset or deleted\n  config.on_experiment_reset  = -> (example) { # Do something on reset }\n  config.on_experiment_delete = -> (experiment) { # Do something else on delete }\n  # before experiment reset or deleted\n  config.on_before_experiment_reset  = -> (example) { # Do something on reset }\n  config.on_before_experiment_delete = -> (experiment) { # Do something else on delete }\nend\n```\n\n## Web Interface\n\nSplit comes with a Sinatra-based front end to get an overview of how your experiments are doing.\n\nIf you are running Rails 2: You can mount this inside your app using Rack::URLMap in your `config.ru`\n\n```ruby\nrequire \'split/dashboard\'\n\nrun Rack::URLMap.new \\\n  "/"       => Your::App.new,\n  "/split" => Split::Dashboard.new\n```\n\nHowever, if you are using Rails 3 or higher: You can mount this inside your app routes by first adding this to the Gemfile:\n\n```ruby\ngem \'split\', require: \'split/dashboard\'\n```\n\nThen adding this to config/routes.rb\n\n```ruby\nmount Split::Dashboard, at: \'split\'\n```\n\nYou may want to password protect that page, you can do so with `Rack::Auth::Basic` (in your split initializer file)\n\n```ruby\n# Rails apps or apps that already depend on activesupport\nSplit::Dashboard.use Rack::Auth::Basic do |username, password|\n  # Protect against timing attacks:\n  # - Use & (do not use &&) so that it doesn\'t short circuit.\n  # - Use digests to stop length information leaking\n  ActiveSupport::SecurityUtils.secure_compare(::Digest::SHA256.hexdigest(username), ::Digest::SHA256.hexdigest(ENV["SPLIT_USERNAME"])) &\n    ActiveSupport::SecurityUtils.secure_compare(::Digest::SHA256.hexdigest(password), ::Digest::SHA256.hexdigest(ENV["SPLIT_PASSWORD"]))\nend\n\n# Apps without activesupport\nSplit::Dashboard.use Rack::Auth::Basic do |username, password|\n  # Protect against timing attacks:\n  # - Use & (do not use &&) so that it doesn\'t short circuit.\n  # - Use digests to stop length information leaking\n  Rack::Utils.secure_compare(::Digest::SHA256.hexdigest(username), ::Digest::SHA256.hexdigest(ENV["SPLIT_USERNAME"])) &\n    Rack::Utils.secure_compare(::Digest::SHA256.hexdigest(password), ::Digest::SHA256.hexdigest(ENV["SPLIT_PASSWORD"]))\nend\n```\n\nYou can even use Devise or any other Warden-based authentication method to authorize users. Just replace `mount Split::Dashboard, :at => \'split\'` in `config/routes.rb` with the following:\n```ruby\nmatch "/split" => Split::Dashboard, anchor: false, via: [:get, :post, :delete], constraints: -> (request) do\n  request.env[\'warden\'].authenticated? # are we authenticated?\n  request.env[\'warden\'].authenticate! # authenticate if not already\n  # or even check any other condition such as request.env[\'warden\'].user.is_admin?\nend\n```\n\nMore information on this [here](https://steve.dynedge.co.uk/2011/12/09/controlling-access-to-routes-and-rack-apps-in-rails-3-with-devise-and-warden/)\n\n### Screenshot\n\n![split_screenshot](https://raw.githubusercontent.com/caser/caser.github.io/master/dashboard.png)\n\n## Configuration\n\nYou can override the default configuration options of Split like so:\n\n```ruby\nSplit.configure do |config|\n  config.db_failover = true # handle Redis errors gracefully\n  config.db_failover_on_db_error = -> (error) { Rails.logger.error(error.message) }\n  config.allow_multiple_experiments = true\n  config.enabled = true\n  config.persistence = Split::Persistence::SessionAdapter\n  #config.start_manually = false ## new test will have to be started manually from the admin panel. default false\n  #config.reset_manually = false ## if true, it never resets the experiment data, even if the configuration changes\n  config.include_rails_helper = true\n  config.redis = "redis://custom.redis.url:6380"\nend\n```\n\nSplit looks for the Redis host in the environment variable `REDIS_URL` then\ndefaults to `redis://localhost:6379` if not specified by configure block.\n\nOn platforms like Heroku, Split will use the value of `REDIS_PROVIDER` to\ndetermine which env variable key to use when retrieving the host config. This\ndefaults to `REDIS_URL`.\n\n### Filtering\n\nIn most scenarios you don\'t want to have AB-Testing enabled for web spiders, robots or special groups of users.\nSplit provides functionality to filter this based on a predefined, extensible list of bots, IP-lists or custom exclude logic.\n\n```ruby\nSplit.configure do |config|\n  # bot config\n  config.robot_regex = /my_custom_robot_regex/ # or\n  config.bots[\'newbot\'] = "Description for bot with \'newbot\' user agent, which will be added to config.robot_regex for exclusion"\n\n  # IP config\n  config.ignore_ip_addresses << \'81.19.48.130\' # or regex: /81\\.19\\.48\\.[0-9]+/\n\n  # or provide your own filter functionality, the default is proc{ |request| is_robot? || is_ignored_ip_address? || is_preview? }\n  config.ignore_filter = -> (request) { CustomExcludeLogic.excludes?(request) }\nend\n```\n\n### Experiment configuration\n\nInstead of providing the experiment options inline, you can store them\nin a hash. This hash can control your experiment\'s alternatives, weights,\nalgorithm and if the experiment resets once finished:\n\n```ruby\nSplit.configure do |config|\n  config.experiments = {\n    my_first_experiment: {\n      alternatives: ["a", "b"],\n      resettable: false\n    },\n    :my_second_experiment => {\n      algorithm: \'Split::Algorithms::Whiplash\',\n      alternatives: [\n        { name: "a", percent: 67 },\n        { name: "b", percent: 33 }\n      ]\n    }\n  }\nend\n```\n\nYou can also store your experiments in a YAML file:\n\n```ruby\nSplit.configure do |config|\n  config.experiments = YAML.load_file "config/experiments.yml"\nend\n```\n\nYou can then define the YAML file like:\n\n```yaml\nmy_first_experiment:\n  alternatives:\n    - a\n    - b\nmy_second_experiment:\n  alternatives:\n    - name: a\n      percent: 67\n    - name: b\n      percent: 33\n  resettable: false\n```\n\nThis simplifies the calls from your code:\n\n```ruby\nab_test(:my_first_experiment)\n```\n\nand:\n\n```ruby\nab_finished(:my_first_experiment)\n```\n\nYou can also add meta data for each experiment, which is very useful when you need more than an alternative name to change behaviour:\n\n```ruby\nSplit.configure do |config|\n  config.experiments = {\n    my_first_experiment: {\n      alternatives: ["a", "b"],\n      metadata: {\n        "a" => {"text" => "Have a fantastic day"},\n        "b" => {"text" => "Don\'t get hit by a bus"}\n      }\n    }\n  }\nend\n```\n\n```yaml\nmy_first_experiment:\n  alternatives:\n    - a\n    - b\n  metadata:\n    a:\n      text: "Have a fantastic day"\n    b:\n      text: "Don\'t get hit by a bus"\n```\n\nThis allows for some advanced experiment configuration using methods like:\n\n```ruby\ntrial.alternative.name # => "a"\n\ntrial.metadata[\'text\'] # => "Have a fantastic day"\n```\n\nor in views:\n\n```erb\n<% ab_test("my_first_experiment") do |alternative, meta| %>\n  <%= alternative %>\n  <small><%= meta[\'text\'] %></small>\n<% end %>\n```\n\nThe keys used in meta data should be Strings\n\n#### Metrics\n\nYou might wish to track generic metrics, such as conversions, and use\nthose to complete multiple different experiments without adding more to\nyour code. You can use the configuration hash to do this, thanks to\nthe `:metric` option.\n\n```ruby\nSplit.configure do |config|\n  config.experiments = {\n    my_first_experiment: {\n      alternatives: ["a", "b"],\n      metric: :my_metric\n    }\n  }\nend\n```\n\nYour code may then track a completion using the metric instead of\nthe experiment name:\n\n```ruby\nab_finished(:my_metric)\n```\n\nYou can also create a new metric by instantiating and saving a new Metric object.\n\n```ruby\nSplit::Metric.new(:my_metric)\nSplit::Metric.save\n```\n\n#### Goals\n\nYou might wish to allow an experiment to have multiple, distinguishable goals.\nThe API to define goals for an experiment is this:\n\n```ruby\nab_test({link_color: ["purchase", "refund"]}, "red", "blue")\n```\n\nor you can you can define them in a configuration file:\n\n```ruby\nSplit.configure do |config|\n  config.experiments = {\n    link_color: {\n      alternatives: ["red", "blue"],\n      goals: ["purchase", "refund"]\n    }\n  }\nend\n```\n\nTo complete a goal conversion, you do it like:\n\n```ruby\nab_finished(link_color: "purchase")\n```\n\nNote that if you pass additional options, that should be a separate hash:\n\n```ruby\nab_finished({ link_color: "purchase" }, reset: false)\n```\n\n**NOTE:** This does not mean that a single experiment can complete more than one goal.\n\nOnce you finish one of the goals, the test is considered to be completed, and finishing the other goal will no longer register. (Assuming the test runs with `reset: false`.)\n\n**Good Example**: Test if listing Plan A first result in more conversions to Plan A (goal: "plana_conversion") or Plan B (goal: "planb_conversion").\n\n**Bad Example**: Test if button color increases conversion rate through multiple steps of a funnel. THIS WILL NOT WORK.\n\n**Bad Example**: Test both how button color affects signup *and* how it affects login, at the same time. THIS WILL NOT WORK.\n\n#### Combined Experiments\nIf you want to test how button color affects signup *and* how it affects login at the same time, use combined experiments.\nConfigure like so:\n```ruby\n  Split.configuration.experiments = {\n        :button_color_experiment => {\n          :alternatives => ["blue", "green"],\n          :combined_experiments => ["button_color_on_signup", "button_color_on_login"]\n        }\n      }\n```\n\nStarting the combined test starts all combined experiments\n```ruby\n ab_combined_test(:button_color_experiment)\n```\nFinish each combined test as normal\n\n```ruby\n   ab_finished(:button_color_on_login)\n   ab_finished(:button_color_on_signup)\n```\n\n**Additional Configuration**:\n* Be sure to enable `allow_multiple_experiments`\n* In Sinatra include the CombinedExperimentsHelper\n  ```\n    helpers Split::CombinedExperimentsHelper\n  ```\n### DB failover solution\n\nDue to the fact that Redis has no automatic failover mechanism, it\'s\npossible to switch on the `db_failover` config option, so that `ab_test`\nand `ab_finished` will not crash in case of a db failure. `ab_test` always\ndelivers alternative A (the first one) in that case.\n\nIt\'s also possible to set a `db_failover_on_db_error` callback (proc)\nfor example to log these errors via Rails.logger.\n\n### Redis\n\nYou may want to change the Redis host and port Split connects to, or\nset various other options at startup.\n\nSplit has a `redis` setter which can be given a string or a Redis\nobject. This means if you\'re already using Redis in your app, Split\ncan re-use the existing connection.\n\nString: `Split.redis = \'redis://localhost:6379\'`\n\nRedis: `Split.redis = $redis`\n\nFor our rails app we have a `config/initializers/split.rb` file where\nwe load `config/split.yml` by hand and set the Redis information\nappropriately.\n\nHere\'s our `config/split.yml`:\n\n```yml\ndevelopment: redis://localhost:6379\ntest: redis://localhost:6379\nstaging: redis://redis1.example.com:6379\nfi: redis://localhost:6379\nproduction: redis://redis1.example.com:6379\n```\n\nAnd our initializer:\n\n```ruby\nsplit_config = YAML.load_file(Rails.root.join(\'config\', \'split.yml\'))\nSplit.redis = split_config[Rails.env]\n```\n\n## Namespaces\n\nIf you\'re running multiple, separate instances of Split you may want\nto namespace the keyspaces so they do not overlap. This is not unlike\nthe approach taken by many memcached clients.\n\nThis feature can be provided by the [redis-namespace](https://github.com/defunkt/redis-namespace)\nlibrary. To configure Split to use `Redis::Namespace`, do the following:\n\n1. Add `redis-namespace` to your Gemfile:\n\n  ```ruby\n  gem \'redis-namespace\'\n  ```\n\n2. Configure `Split.redis` to use a `Redis::Namespace` instance (possible in an\n   intializer):\n\n  ```ruby\n  redis = Redis.new(url: ENV[\'REDIS_URL\']) # or whatever config you want\n  Split.redis = Redis::Namespace.new(:your_namespace, redis: redis)\n  ```\n\n## Outside of a Web Session\n\nSplit provides the Helper module to facilitate running experiments inside web sessions.\n\nAlternatively, you can access the underlying Metric, Trial, Experiment and Alternative objects to\nconduct experiments that are not tied to a web session.\n\n```ruby\n# create a new experiment\nexperiment = Split::ExperimentCatalog.find_or_create(\'color\', \'red\', \'blue\')\n# create a new trial\ntrial = Split::Trial.new(:experiment => experiment)\n# run trial\ntrial.choose!\n# get the result, returns either red or blue\ntrial.alternative.name\n\n# if the goal has been achieved, increment the successful completions for this alternative.\nif goal_achieved?\n  trial.complete!\nend\n\n```\n\n## Algorithms\n\nBy default, Split ships with `Split::Algorithms::WeightedSample` that randomly selects from possible alternatives for a traditional a/b test.\nIt is possible to specify static weights to favor certain alternatives.\n\n`Split::Algorithms::Whiplash` is an implementation of a [multi-armed bandit algorithm](http://stevehanov.ca/blog/index.php?id=132).\nThis algorithm will automatically weight the alternatives based on their relative performance,\nchoosing the better-performing ones more often as trials are completed.\n\n`Split::Algorithms::BlockRandomization` is an algorithm that ensures equal\nparticipation across all alternatives. This algorithm will choose the alternative\nwith the fewest participants. In the event of multiple minimum participant alternatives\n(i.e. starting a new "Block") the algorithm will choose a random alternative from\nthose minimum participant alternatives.\n\nUsers may also write their own algorithms. The default algorithm may be specified globally in the configuration file, or on a per experiment basis using the experiments hash of the configuration file.\n\nTo change the algorithm globally for all experiments, use the following in your initializer:\n\n```ruby\nSplit.configure do |config|\n  config.algorithm = Split::Algorithms::Whiplash\nend\n```\n\n## Extensions\n\n  - [Split::Export](https://github.com/splitrb/split-export) - Easily export A/B test data out of Split.\n  - [Split::Analytics](https://github.com/splitrb/split-analytics) - Push test data to Google Analytics.\n  - [Split::Mongoid](https://github.com/MongoHQ/split-mongoid) - Store experiment data in mongoid (still uses redis).\n  - [Split::Cacheable](https://github.com/harrystech/split_cacheable) - Automatically create cache buckets per test.\n  - [Split::Counters](https://github.com/bernardkroes/split-counters) - Add counters per experiment and alternative.\n  - [Split::Cli](https://github.com/craigmcnamara/split-cli) - A CLI to trigger Split A/B tests.\n\n## Screencast\n\nRyan bates has produced an excellent 10 minute screencast about split on the Railscasts site: [A/B Testing with Split](http://railscasts.com/episodes/331-a-b-testing-with-split)\n\n## Blogposts\n\n* [Recipe: A/B testing with KISSMetrics and the split gem](https://robots.thoughtbot.com/post/9595887299/recipe-a-b-testing-with-kissmetrics-and-the-split-gem)\n* [Rails A/B testing with Split on Heroku](http://blog.nathanhumbert.com/2012/02/rails-ab-testing-with-split-on-heroku.html)\n\n## Backers\n\nSupport us with a monthly donation and help us continue our activities. [[Become a backer](https://opencollective.com/split#backer)]\n\n<a href="https://opencollective.com/split/backer/0/website" target="_blank"><img src="https://opencollective.com/split/backer/0/avatar.svg"></a>\n<a href="https://opencollective.com/split/backer/1/website" target="_blank"><img src="https://opencollective.com/split/backer/1/avatar.svg"></a>\n<a href="https://opencollective.com/split/backer/2/website" target="_blank"><img src="https://opencollective.com/split/backer/2/avatar.svg"></a>\n<a href="https://opencollective.com/split/backer/3/website" target="_blank"><img src="https://opencollective.com/split/backer/3/avatar.svg"></a>\n<a href="https://opencollective.com/split/backer/4/website" target="_blank"><img src="https://opencollective.com/split/backer/4/avatar.svg"></a>\n<a href="https://opencollective.com/split/backer/5/website" target="_blank"><img src="https://opencollective.com/split/backer/5/avatar.svg"></a>\n<a href="https://opencollective.com/split/backer/6/website" target="_blank"><img src="https://opencollective.com/split/backer/6/avatar.svg"></a>\n<a href="https://opencollective.com/split/backer/7/website" target="_blank"><img src="https://opencollective.com/split/backer/7/avatar.svg"></a>\n<a href="https://opencollective.com/split/backer/8/website" target="_blank"><img src="https://opencollective.com/split/backer/8/avatar.svg"></a>\n<a href="https://opencollective.com/split/backer/9/website" target="_blank"><img src="https://opencollective.com/split/backer/9/avatar.svg"></a>\n<a href="https://opencollective.com/split/backer/10/website" target="_blank"><img src="https://opencollective.com/split/backer/10/avatar.svg"></a>\n<a href="https://opencollective.com/split/backer/11/website" target="_blank"><img src="https://opencollective.com/split/backer/11/avatar.svg"></a>\n<a href="https://opencollective.com/split/backer/12/website" target="_blank"><img src="https://opencollective.com/split/backer/12/avatar.svg"></a>\n<a href="https://opencollective.com/split/backer/13/website" target="_blank"><img src="https://opencollective.com/split/backer/13/avatar.svg"></a>\n<a href="https://opencollective.com/split/backer/14/website" target="_blank"><img src="https://opencollective.com/split/backer/14/avatar.svg"></a>\n<a href="https://opencollective.com/split/backer/15/website" target="_blank"><img src="https://opencollective.com/split/backer/15/avatar.svg"></a>\n<a href="https://opencollective.com/split/backer/16/website" target="_blank"><img src="https://opencollective.com/split/backer/16/avatar.svg"></a>\n<a href="https://opencollective.com/split/backer/17/website" target="_blank"><img src="https://opencollective.com/split/backer/17/avatar.svg"></a>\n<a href="https://opencollective.com/split/backer/18/website" target="_blank"><img src="https://opencollective.com/split/backer/18/avatar.svg"></a>\n<a href="https://opencollective.com/split/backer/19/website" target="_blank"><img src="https://opencollective.com/split/backer/19/avatar.svg"></a>\n<a href="https://opencollective.com/split/backer/20/website" target="_blank"><img src="https://opencollective.com/split/backer/20/avatar.svg"></a>\n<a href="https://opencollective.com/split/backer/21/website" target="_blank"><img src="https://opencollective.com/split/backer/21/avatar.svg"></a>\n<a href="https://opencollective.com/split/backer/22/website" target="_blank"><img src="https://opencollective.com/split/backer/22/avatar.svg"></a>\n<a href="https://opencollective.com/split/backer/23/website" target="_blank"><img src="https://opencollective.com/split/backer/23/avatar.svg"></a>\n<a href="https://opencollective.com/split/backer/24/website" target="_blank"><img src="https://opencollective.com/split/backer/24/avatar.svg"></a>\n<a href="https://opencollective.com/split/backer/25/website" target="_blank"><img src="https://opencollective.com/split/backer/25/avatar.svg"></a>\n<a href="https://opencollective.com/split/backer/26/website" target="_blank"><img src="https://opencollective.com/split/backer/26/avatar.svg"></a>\n<a href="https://opencollective.com/split/backer/27/website" target="_blank"><img src="https://opencollective.com/split/backer/27/avatar.svg"></a>\n<a href="https://opencollective.com/split/backer/28/website" target="_blank"><img src="https://opencollective.com/split/backer/28/avatar.svg"></a>\n<a href="https://opencollective.com/split/backer/29/website" target="_blank"><img src="https://opencollective.com/split/backer/29/avatar.svg"></a>\n\n\n## Sponsors\n\nBecome a sponsor and get your logo on our README on Github with a link to your site. [[Become a sponsor](https://opencollective.com/split#sponsor)]\n\n<a href="https://opencollective.com/split/sponsor/0/website" target="_blank"><img src="https://opencollective.com/split/sponsor/0/avatar.svg"></a>\n<a href="https://opencollective.com/split/sponsor/1/website" target="_blank"><img src="https://opencollective.com/split/sponsor/1/avatar.svg"></a>\n<a href="https://opencollective.com/split/sponsor/2/website" target="_blank"><img src="https://opencollective.com/split/sponsor/2/avatar.svg"></a>\n<a href="https://opencollective.com/split/sponsor/3/website" target="_blank"><img src="https://opencollective.com/split/sponsor/3/avatar.svg"></a>\n<a href="https://opencollective.com/split/sponsor/4/website" target="_blank"><img src="https://opencollective.com/split/sponsor/4/avatar.svg"></a>\n<a href="https://opencollective.com/split/sponsor/5/website" target="_blank"><img src="https://opencollective.com/split/sponsor/5/avatar.svg"></a>\n<a href="https://opencollective.com/split/sponsor/6/website" target="_blank"><img src="https://opencollective.com/split/sponsor/6/avatar.svg"></a>\n<a href="https://opencollective.com/split/sponsor/7/website" target="_blank"><img src="https://opencollective.com/split/sponsor/7/avatar.svg"></a>\n<a href="https://opencollective.com/split/sponsor/8/website" target="_blank"><img src="https://opencollective.com/split/sponsor/8/avatar.svg"></a>\n<a href="https://opencollective.com/split/sponsor/9/website" target="_blank"><img src="https://opencollective.com/split/sponsor/9/avatar.svg"></a>\n<a href="https://opencollective.com/split/sponsor/10/website" target="_blank"><img src="https://opencollective.com/split/sponsor/10/avatar.svg"></a>\n<a href="https://opencollective.com/split/sponsor/11/website" target="_blank"><img src="https://opencollective.com/split/sponsor/11/avatar.svg"></a>\n<a href="https://opencollective.com/split/sponsor/12/website" target="_blank"><img src="https://opencollective.com/split/sponsor/12/avatar.svg"></a>\n<a href="https://opencollective.com/split/sponsor/13/website" target="_blank"><img src="https://opencollective.com/split/sponsor/13/avatar.svg"></a>\n<a href="https://opencollective.com/split/sponsor/14/website" target="_blank"><img src="https://opencollective.com/split/sponsor/14/avatar.svg"></a>\n<a href="https://opencollective.com/split/sponsor/15/website" target="_blank"><img src="https://opencollective.com/split/sponsor/15/avatar.svg"></a>\n<a href="https://opencollective.com/split/sponsor/16/website" target="_blank"><img src="https://opencollective.com/split/sponsor/16/avatar.svg"></a>\n<a href="https://opencollective.com/split/sponsor/17/website" target="_blank"><img src="https://opencollective.com/split/sponsor/17/avatar.svg"></a>\n<a href="https://opencollective.com/split/sponsor/18/website" target="_blank"><img src="https://opencollective.com/split/sponsor/18/avatar.svg"></a>\n<a href="https://opencollective.com/split/sponsor/19/website" target="_blank"><img src="https://opencollective.com/split/sponsor/19/avatar.svg"></a>\n<a href="https://opencollective.com/split/sponsor/20/website" target="_blank"><img src="https://opencollective.com/split/sponsor/20/avatar.svg"></a>\n<a href="https://opencollective.com/split/sponsor/21/website" target="_blank"><img src="https://opencollective.com/split/sponsor/21/avatar.svg"></a>\n<a href="https://opencollective.com/split/sponsor/22/website" target="_blank"><img src="https://opencollective.com/split/sponsor/22/avatar.svg"></a>\n<a href="https://opencollective.com/split/sponsor/23/website" target="_blank"><img src="https://opencollective.com/split/sponsor/23/avatar.svg"></a>\n<a href="https://opencollective.com/split/sponsor/24/website" target="_blank"><img src="https://opencollective.com/split/sponsor/24/avatar.svg"></a>\n<a href="https://opencollective.com/split/sponsor/25/website" target="_blank"><img src="https://opencollective.com/split/sponsor/25/avatar.svg"></a>\n<a href="https://opencollective.com/split/sponsor/26/website" target="_blank"><img src="https://opencollective.com/split/sponsor/26/avatar.svg"></a>\n<a href="https://opencollective.com/split/sponsor/27/website" target="_blank"><img src="https://opencollective.com/split/sponsor/27/avatar.svg"></a>\n<a href="https://opencollective.com/split/sponsor/28/website" target="_blank"><img src="https://opencollective.com/split/sponsor/28/avatar.svg"></a>\n<a href="https://opencollective.com/split/sponsor/29/website" target="_blank"><img src="https://opencollective.com/split/sponsor/29/avatar.svg"></a>\n\n## Contribute\n\nPlease do! Over 70 different people have contributed to the project, you can see them all here: https://github.com/splitrb/split/graphs/contributors.\n\n### Development\n\nThe source code is hosted at [GitHub](https://github.com/splitrb/split).\n\nReport issues and feature requests on [GitHub Issues](https://github.com/splitrb/split/issues).\n\nYou can find a discussion form on [Google Groups](https://groups.google.com/d/forum/split-ruby).\n\n### Tests\n\nRun the tests like this:\n\n    # Start a Redis server in another tab.\n    redis-server\n\n    bundle\n    rake spec\n\n### A Note on Patches and Pull Requests\n\n * Fork the project.\n * Make your feature addition or bug fix.\n * Add tests for it. This is important so I don\'t break it in a\n   future version unintentionally.\n * Add documentation if necessary.\n * Commit. Do not mess with the rakefile, version, or history.\n   (If you want to have your own version, that is fine. But bump the version in a commit by itself, which I can ignore when I pull.)\n * Send a pull request. Bonus points for topic branches.\n\n### Code of Conduct\n\nPlease note that this project is released with a [Contributor Code of Conduct](CODE_OF_CONDUCT.md). By participating in this project you agree to abide by its terms.\n\n## Copyright\n\n[MIT License](LICENSE) \xc2\xa9 2019 [Andrew Nesbitt](https://github.com/andrew).\n'