b'# Spreadsheet Architect\n\n<a href="https://badge.fury.io/rb/spreadsheet_architect" target="_blank"><img height="21" style=\'border:0px;height:21px;\' border=\'0\' src="https://badge.fury.io/rb/spreadsheet_architect.svg" alt="Gem Version"></a>\n<a href=\'https://travis-ci.org/westonganger/spreadsheet_architect\' target=\'_blank\'><img height=\'21\' style=\'border:0px;height:21px;\' src=\'https://api.travis-ci.org/westonganger/spreadsheet_architect.svg?branch=master\' border=\'0\' alt=\'Build Status\' /></a>\n<a href=\'https://rubygems.org/gems/spreadsheet_architect\' target=\'_blank\'><img height=\'21\' style=\'border:0px;height:21px;\' src=\'https://ruby-gem-downloads-badge.herokuapp.com/spreadsheet_architect?label=rubygems&type=total&total_label=downloads&color=brightgreen\' border=\'0\' alt=\'RubyGems Downloads\' /></a>\n<a href=\'https://ko-fi.com/A5071NK\' target=\'_blank\'><img height=\'22\' style=\'border:0px;height:22px;\' src=\'https://az743702.vo.msecnd.net/cdn/kofi1.png?v=a\' border=\'0\' alt=\'Buy Me a Coffee\' /></a> \n\nSpreadsheet Architect is a library that allows you to create XLSX, ODS, or CSV spreadsheets super easily from ActiveRecord relations, plain Ruby objects, or tabular data.\n\nKey Features:\n\n- Dead simple custom spreadsheets with custom data\n- Data Sources: ActiveRecord relations, array of plain Ruby object instances, or tabular 2D Array Data\n- Easily style and customize spreadsheets\n- Create multi sheet spreadsheets\n- Setting Class/Model or Project specific defaults\n- Simple to use ActionController renderers for Rails\n- Plain Ruby (without Rails) completely supported\n\n# Install\n```ruby\ngem \'spreadsheet_architect\'\n```\n\n# General Usage \n\n### Tabular (Array) Data\n\n```ruby\nheaders = [\'Col 1\',\'Col 2\',\'Col 3\']\ndata = [[1,2,3], [4,5,6], [7,8,9]]\nSpreadsheetArchitect.to_xlsx(headers: headers, data: data)\nSpreadsheetArchitect.to_ods(headers: headers, data: data)\nSpreadsheetArchitect.to_csv(headers: headers, data: data)\n```\n\n### Rails relation or an array of plain Ruby object instances\n\n```ruby\nposts = Post.order(name: :asc).where(published: true)\n# OR\nposts = 10.times.map{|i| Post.new(number: i)}\n\nSpreadsheetArchitect.to_xlsx(instances: posts)\nSpreadsheetArchitect.to_ods(instances: posts)\nSpreadsheetArchitect.to_csv(instances: posts)\n```\n\n**(Optional)** If you would like to add the methods `to_xlsx`, `to_ods`, `to_csv`, `to_axlsx_package`, `to_rodf_spreadsheet` to some class, you can simply include the SpreadsheetArchitect module to whichever classes you choose. A good default strategy is to simply add it to the ApplicationRecord or another parent class to have it available on all appropriate classes. For example:\n\n```ruby\nclass ApplicationRecord < ActiveRecord::Base\n  include SpreadsheetArchitect\nend\n```\n\nThen use it on the class or ActiveRecord relations of the class\n\n```ruby\nposts = Post.order(name: :asc).where(published: true)\nposts.to_xlsx\nposts.to_ods\nposts.to_csv\n\n# Plain Ruby Objects\nposts_array = 10.times.map{|i| Post.new(number: i)}\nPost.to_xlsx(instances: posts_array)\nPost.to_ods(instances: posts_array)\nPost.to_csv(instances: posts_array)\n```\n\n# Usage with Instances / ActiveRecord Relations\n\nWhen NOT using the `:data` option, ie. on an AR Relation or using the `:instances` option, Spreadsheet Architect requires an instance method defined on the class to generate the data. It looks for the `spreadsheet_columns` method on the class. If you are using on an ActiveRecord model and that method is not defined, it would fallback to the models `column_names` method (not recommended). If using the `:data` option this is ignored.\n\n```ruby\nclass Post\n\n  def spreadsheet_columns\n\n    ### Column format is: [Header, Cell Data / Method (if symbol) to Call on each Instance, (optional) Cell Type]\n    [\n      [\'Title\', :title],\n      [\'Content\', content.strip],\n      [\'Author\', (author.name if author)],\n      [\'Published?\', (published ? \'Yes\' : \'No\')],\n      :published_at, # uses the method name as header title Ex. \'Published At\'\n      [\'# of Views\', :number_of_views, :float],\n      [\'Rating\', :rating],\n      [\'Category/Tags\', "#{category.name} - #{tags.collect(&:name).join(\', \')}"]\n    ]\nend\n\nPost.to_xlsx(instances: posts)\n```\n\nIf you want to use a different method name then `spreadsheet_columns` you can pass a method name as a Symbol or String to the `spreadsheet_columns` option. Feel free to utilize the model-wide/project-wide defaults features if desired necessary.\n\n```ruby\nPost.to_xlsx(instances: posts, spreadsheet_columns: :my_special_columns)\n```\n\nAlternatively, you can pass a Proc/lambda to the `spreadsheet_columns` option. For those purists that really dont want to define any extra `spreadsheet_columns` instance method on your model, this option can help you work with that methodology.\n\n```ruby\nPost.to_xlsx(instances: posts, spreadsheet_columns: Proc.new{|instance|\n  [\n    [\'Title\', :title],\n    [\'Content\', instance.content.strip],\n    [\'Author\', (instance.author.name if instance.author)],\n    [\'Published?\', (instance.published ? \'Yes\' : \'No\')],\n    :published_at, # uses the method name as header title Einstance. \'Published At\'\n    [\'# of Views\', :number_of_views, :float],\n    [\'Rating\', :rating],\n    [\'Category/Tags\', "#{instance.category.name} - #{instance.tags.collect(&:name).join(\', \')}"]\n  ]\n})\n```\n\n# Sending & Saving Spreadsheets\n\n### Method 1: Send Data via Rails Controller\n\n```ruby\n\nclass PostsController < ActionController::Base\n  respond_to :html, :xlsx, :ods, :csv\n\n  def index\n    @posts = Post.order(published_at: :asc)\n\n    render xlsx: @posts\n  end\n\n  # Using respond_with\n  def index\n    @posts = Post.order(published_at: :asc)\n\n    respond_with @posts\n  end\n\n  # OR Using respond_with with custom options\n  def index\n    @posts = Post.order(published_at: :asc)\n\n    if [\'xlsx\',\'ods\',\'csv\'].include?(request.format)\n      respond_with @posts.to_xlsx(row_style: {bold: true}), filename: \'Posts\'\n    else\n      respond_with @posts\n    end\n  end\n\n  # OR Using responders\n  def index\n    @posts = Post.order(published_at: :asc)\n\n    respond_to do |format|\n      format.html\n      format.xlsx { render xlsx: @posts }\n      format.ods { render ods: @posts }\n      format.csv{ render csv: @posts }\n    end\n  end\n\n  # OR Using responders with custom options\n  def index\n    @posts = Post.order(published_at: :asc)\n\n    respond_to do |format|\n      format.html\n      format.xlsx { render xlsx: @posts.to_xlsx(headers: false) }\n      format.ods { render ods: Post.to_ods(instances: @posts) }\n      format.csv{ render csv: @posts.to_csv(headers: false), file_name: \'articles\' }\n    end\n  end\nend\n```\n\n### Method 2: Save to a file manually\n\n```ruby\n### Ex. with ActiveRecord relation\nfile_data = Post.order(published_at: :asc).to_xlsx\nFile.open(\'path/to/file.xlsx\', \'w+b\') do |f|\n  f.write file_data\nend\n\nfile_data = Post.order(published_at: :asc).to_ods\nFile.open(\'path/to/file.ods\', \'w+b\') do |f|\n  f.write file_data\nend\n\nfile_data = Post.order(published_at: :asc).to_csv\nFile.open(\'path/to/file.csv\', \'w+b\') do |f|\n  f.write file_data\nend\n```\n\n# Multi Sheet XLSX Spreadsheets\n```ruby\naxlsx_package = SpreadsheetArchitect.to_axlsx_package({headers: headers, data: data})\naxlsx_package = SpreadsheetArchitect.to_axlsx_package({headers: headers, data: data}, package)\n\nFile.open(\'path/to/file.xlsx\', \'w+b\') do |f|\n  f.write axlsx_package.to_stream.read\nend\n```\n\nSee this file for more details: https://github.com/westonganger/spreadsheet_architect/blob/master/test/spreadsheet_architect/multi_sheet_test.rb\n\n### Multi Sheet ODS Spreadsheets\n```ruby\nods_spreadsheet = SpreadsheetArchitect.to_rodf_spreadsheet({headers: headers, data: data})\nods_spreadsheet = SpreadsheetArchitect.to_rodf_spreadsheet({headers: headers, data: data}, spreadsheet)\n\nFile.open(\'path/to/file.ods\', \'w+b\') do |f|\n  f.write ods_spreadsheet\nend\n```\n\nSee this file for more details: https://github.com/westonganger/spreadsheet_architect/blob/master/test/spreadsheet_architect/multi_sheet_test.rb\n\n# Methods\n\n## `to_xlsx(options={})`\n\n|Option|Default|Notes|\n|---|---|---|\n|**data**<br>*2D Array*| |Cannot be used with the `:instances` option.<br><br>Tabular data for the non-header row cells.  |\n|**instances**<br>*Array*| |Cannot be used with the `:data` option.<br><br>Array of class/model instances to be used as row data. Cannot be used with :data option|\n|**spreadsheet_columns**<br>*Proc/Symbol/String*| Use this option to override or define the spreadsheet columns. Normally, if this option is not specified and are using the instances option/ActiveRecord relation, it uses the classes custom `spreadsheet_columns` method or any custom defaults defined.<br>If neither of those and is an ActiveRecord model, then it will falls back to the models `self.column_names` | Cannot be used with the `:data` option.<br><br>If a Proc value is passed it will be evaluated on the instance object.<br><br>If a Symbol or String value is passed then it will search the instance for a method name that matches and call it. |\n|**headers**<br>*Array / 2D Array*| |Data for the header row cells. If using on a class/relation, this defaults to the ones provided via `spreadsheet_columns`. Pass `false` to skip the header row. |\n|**sheet_name**<br>*String*|`Sheet1`||\n|**header_style**<br>*Hash*|`{background_color: "AAAAAA", color: "FFFFFF", align: :center, font_name: \'Arial\', font_size: 10, bold: false, italic: false, underline: false}`|See all available style options [here](https://github.com/westonganger/spreadsheet_architect/blob/master/docs/axlsx_styles_reference.md)|\n|**row_style**<br>*Hash*|`{background_color: nil, color: "000000", align: :left, font_name: \'Arial\', font_size: 10, bold: false, italic: false, underline: false, format_code: nil}`|Styles for non-header rows. See all available style options [here](https://github.com/westonganger/spreadsheet_architect/blob/master/docs/axlsx_styles_reference.md)|\n|**column_styles**<br>*Array*||[See this example for usage](https://github.com/westonganger/spreadsheet_architect/blob/master/test/unit/kitchen_sink_test.rb)|\n|**range_styles**<br>*Array*||[See this example for usage](https://github.com/westonganger/spreadsheet_architect/blob/master/test/unit/kitchen_sink_test.rb)|\n|**conditional_row_styles**<br>*Array*||[See this example for usage](https://github.com/westonganger/spreadsheet_architect/blob/master/test/unit/kitchen_sink_test.rb). The if/unless proc will called with the following args: `row_index`, `row_data`|\n|**merges**<br>*Array*||Merge cells. [See this example for usage](https://github.com/westonganger/spreadsheet_architect/blob/master/test/unit/kitchen_sink_test.rb). Warning merges cannot overlap eachother, if you attempt to do so Excel will claim your spreadsheet is corrupt and refuse to open your spreadsheet.|\n|**borders**<br>*Array*||[See this example for usage](https://github.com/westonganger/spreadsheet_architect/blob/master/test/unit/kitchen_sink_test.rb)|\n|**column_types**<br>*Array*||Valid types for XLSX are :string, :integer, :float, :boolean, nil = auto determine.|\n|**column_widths**<br>*Array*||Sometimes you may want explicit column widths. Use nil if you want a column to autofit again.|\n\n## `to_axlsx_spreadsheet(options={}, axlsx_package_to_join=nil)`\nSame options as `to_xlsx`\n\n## `to_ods(options={})`\n\n|Option|Default|Notes|\n|---|---|---|\n|**data**<br>*2D Array*| |Cannot be used with the `:instances` option.<br><br>Tabular data for the non-header row cells.  |\n|**instances**<br>*Array*| |Cannot be used with the `:data` option.<br><br>Array of class/model instances to be used as row data. Cannot be used with :data option|\n|**spreadsheet_columns**<br>*Proc/Symbol/String*| Use this option to override or define the spreadsheet columns. Normally, if this option is not specified and are using the instances option/ActiveRecord relation, it uses the classes custom `spreadsheet_columns` method or any custom defaults defined.<br>If neither of those and is an ActiveRecord model, then it will falls back to the models `self.column_names` | Cannot be used with the `:data` option.<br><br>If a Proc value is passed it will be evaluated on the instance object.<br><br>If a Symbol or String value is passed then it will search the instance for a method name that matches and call it. |\n|**headers**<br>*Array / 2D Array*| |Data for the header row cells. If using on a class/relation, this defaults to the ones provided via `spreadsheet_columns`. Pass `false` to skip the header row. |\n|**sheet_name**<br>*String*|`Sheet1`||\n|**header_style**<br>*Hash*|`{background_color: "AAAAAA", color: "FFFFFF", align: :center, font_size: 10, bold: true}`|Note: Currently ODS only supports these options|\n|**row_style**<br>*Hash*|`{background_color: nil, color: "000000", align: :left, font_size: 10, bold: false}`|Styles for non-header rows. Currently ODS only supports these options|\n|**column_types**<br>*Array*||Valid types for ODS are :string, :float :percent, :currency, :date, :time,, nil = auto determine. Due to [RODF Issue #19](https://github.com/thiagoarrais/rodf/issues/19), :date/:time will be converted to :string |\n\n## `to_rodf_spreadsheet(options={}, spreadsheet_to_join=nil)`\nSame options as `to_ods`\n\n## `to_csv(options={})`\n\n|Option|Default|Notes|\n|---|---|---|\n|**data**<br>*2D Array*| |Cannot be used with the `:instances` option.<br><br>Tabular data for the non-header row cells.  |\n|**instances**<br>*Array*| |Cannot be used with the `:data` option.<br><br>Array of class/model instances to be used as row data. Cannot be used with :data option|\n|**spreadsheet_columns**<br>*Proc/Symbol/String*| Use this option to override or define the spreadsheet columns. Normally, if this option is not specified and are using the instances option/ActiveRecord relation, it uses the classes custom `spreadsheet_columns` method or any custom defaults defined.<br>If neither of those and is an ActiveRecord model, then it will falls back to the models `self.column_names` | Cannot be used with the `:data` option.<br><br>If a Proc value is passed it will be evaluated on the instance object.<br><br>If a Symbol or String value is passed then it will search the instance for a method name that matches and call it. |\n|**headers**<br>*Array / 2D Array*| |Data for the header row cells. If using on a class/relation, this defaults to the ones provided via `spreadsheet_columns`. Pass `false` to skip the header row. |\n\n\n# Change class-wide default method options\n\n```ruby\nclass Post\n  def spreadsheet_columns\n    [:name, :content]\n  end\n\n  SPREADSHEET_OPTIONS = {\n    headers: [\n      [\'My Post Report\'],\n      self.column_names.map{|x| x.titleize}\n    ],\n     spreadsheet_columns: :spreadsheet_columns,\n    header_style: {background_color: \'AAAAAA\', color: \'FFFFFF\', align: :center, font_name: \'Arial\', font_size: 10, bold: false, italic: false, underline: false},\n    row_style: {background_color: nil, color: \'000000\', align: :left, font_name: \'Arial\', font_size: 10, bold: false, italic: false, underline: false},\n    sheet_name: self.name,\n    column_styles: [],\n    range_styles: [],\n    conditional_row_styles: [],\n    merges: [],\n    borders: [],\n    column_types: [],\n  }\nend\n```\n\n# Change project-wide default method options\n\n```ruby\n# config/initializers/spreadsheet_architect.rb\n\nSpreadsheetArchitect.default_options = {\n  headers: true,\n  spreadsheet_columns: :spreadsheet_columns,\n  header_style: {background_color: \'AAAAAA\', color: \'FFFFFF\', align: :center, font_name: \'Arial\', font_size: 10, bold: false, italic: false, underline: false},\n  row_style: {background_color: nil, color: \'000000\', align: :left, font_name: \'Arial\', font_size: 10, bold: false, italic: false, underline: false},\n  sheet_name: \'My Project Export\',\n  column_styles: [],\n  range_styles: [],\n  conditional_row_styles: [],\n  merges: [],\n  borders: [],\n  column_types: [],\n}\n```\n\n# Kitchen Sink Examples with Styling for XLSX and ODS\nSee this example: https://github.com/westonganger/spreadsheet_architect/blob/master/test/unit/kitchen_sink_test.rb\n\n# Axlsx Style Reference\n\nI have compiled a list of all available style options for axlsx here: https://github.com/westonganger/spreadsheet_architect/blob/master/docs/axlsx_style_reference.md\n\n# Testing / Validating your Spreadsheets\n\nA wise word of advice, when testing your spreadsheets I recommend to use Excel instead of LibreOffice. This is because I have seen through testing, that where LibreOffice seems to just let most incorrect things just slide on through, Excel will not even open the spreadsheet as apparently it is much more strict about the spreadsheet validations. This will help you better identify any incorrect styling or customization issues.\n\n# Contributing\n\nWe use the `appraisal` gem for testing multiple versions of `axlsx`. Please use the following steps to test using `appraisal`.\n\n1. `bundle exec appraisal install`\n2. `bundle exec appraisal rake test`\n\nAt this time the spreadsheets generated by the test suite are manually inspected. After running the tests, the test output can be viewed at `test/dummy_app/tmp/#{alxsx_version}/*`\n\n# Credits\n\nCreated & Maintained by [Weston Ganger](https://westonganger.com) - [@westonganger](https://github.com/westonganger)\n\nFor any consulting or contract work please contact me via my company website: [Solid Foundation Web Development](https://solidfoundationwebdev.com)\n\n[![Solid Foundation Web Development Logo](https://solidfoundationwebdev.com/logo-sm.png)](https://solidfoundationwebdev.com)\n'