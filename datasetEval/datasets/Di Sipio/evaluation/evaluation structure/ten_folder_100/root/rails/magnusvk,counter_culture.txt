b'# counter_culture [![Build Status](https://travis-ci.org/magnusvk/counter_culture.svg)](https://travis-ci.org/magnusvk/counter_culture)\n\nTurbo-charged counter caches for your Rails app. Huge improvements over the Rails standard counter caches:\n\n* Updates counter cache when values change, not just when creating and destroying\n* Supports counter caches through multiple levels of relations\n* Supports dynamic column names, making it possible to split up the counter cache for different types of objects\n* Can keep a running count, or a running total\n\nTested against Ruby 2.3.8, 2.4.7, 2.5.6 and 2.6.4 and against the latest patch releases of Rails 4.2, 5.0, 5.1, 5.2 and 6.0.\n\nPlease note that -- unlike Rails\' built-in counter-caches -- counter_culture does not currently change the behavior of the `.size` method on ActiveRecord associations. If you want to avoid a database query and read the cached value, please use the attribute name containing the counter cache directly.\n```\nproduct.categories.size  # => will lead to a SELECT COUNT(*) query\nproduct.categories_count # => will use counter cache without query\n```\n\n## Installation\n\nAdd counter_culture to your Gemfile:\n\n```ruby\ngem \'counter_culture\', \'~> 2.0\'\n```\n\nThen run `bundle install`\n\n## Database Schema\n\nYou must create the necessary columns for all counter caches. You can use counter_culture\'s generator to create a skeleton migration:\n\n```\nrails generate counter_culture Category products_count\n```\n\nWhich will generate a migration with code like the following:\n```ruby\nadd_column :categories, :products_count, :integer, null: false, default: 0\n```\nNote that the column must be ```NOT NULL``` and have a default of zero for this gem to work correctly.\n\nIf you are adding counter caches to existing data, you must add code to [manually populate their values](#manually-populating-counter-cache-values) to the generated migration.\n\n## Usage\n\n### Simple counter-cache\n\n#### Has many association\n\n```ruby\nclass Product < ActiveRecord::Base\n  belongs_to :category\n  counter_culture :category\nend\n\nclass Category < ActiveRecord::Base\n  has_many :products\nend\n```\n\nNow, the ```Category``` model will keep an up-to-date counter-cache in the ```products_count``` column of the ```categories``` table.\n\n#### Many to many association\n\n```ruby\nclass User < ActiveRecord::Base\n  has_many :group_memberships\n  has_many :groups, through: :group_memberships\nend\n\nclass Group < ActiveRecord::Base\n  has_many :group_memberships\n  has_many :members, through: :group_memberships, class: "User"\nend\n\nclass Membership < ActiveRecord::Base\n  belongs_to :group\n  belongs_to :member, class: "User"\n  counter_culture :group, column_name: "members_count"\n  # If you\'d like to also touch the group when `members_count` is updated\n  # counter_culture :group, column_name: "members_count", touch: true\nend\n```\n\nNow, the `Group` model will have an up to date count of its members in the `members_count` column\n\n### Multi-level counter-cache\n\n```ruby\nclass Product < ActiveRecord::Base\n  belongs_to :sub_category\n  counter_culture [:sub_category, :category]\nend\n\nclass SubCategory < ActiveRecord::Base\n  has_many :products\n  belongs_to :category\nend\n\nclass Category < ActiveRecord::Base\n  has_many :sub_categories\nend\n```\n\nNow, the ```Category``` model will keep an up-to-date counter-cache in the ```products_count``` column of the ```categories``` table. This will work with any number of levels.\n\nIf you want to have a counter-cache for each level of your hierarchy, then you must add a separate counter cache for each level.  In the above example, if you wanted a count of products for each category and sub_category you would change the Product class to:\n\n```ruby\nclass Product < ActiveRecord::Base\n  belongs_to :sub_category\n  counter_culture [:sub_category, :category]\n  counter_culture [:sub_category]\nend\n```\n\n### Customizing the column name\n\n```ruby\nclass Product < ActiveRecord::Base\n  belongs_to :category\n  counter_culture :category, column_name: "products_counter_cache"\nend\n\nclass Category < ActiveRecord::Base\n  has_many :products\nend\n```\n\nNow, the ```Category``` model will keep an up-to-date counter-cache in the ```products_counter_cache``` column of the ```categories``` table. This will also work with multi-level counter caches.\n\n### Dynamic column name\n\n```ruby\nclass Product < ActiveRecord::Base\n  belongs_to :category\n  counter_culture :category, column_name: proc {|model| "#{model.product_type}_count" }\n  # attribute product_type may be one of [\'awesome\', \'sucky\']\nend\n\nclass Category < ActiveRecord::Base\n  has_many :products\nend\n```\n\n### Delta Magnitude\n\n```ruby\nclass Product < ActiveRecord::Base\n  belongs_to :category\n  counter_culture :category, column_name: :weight, delta_magnitude: proc {|model| model.product_type == \'awesome\' ? 2 : 1 }\nend\n\nclass Category < ActiveRecord::Base\n  has_many :products\nend\n```\n\nNow the `Category` model will keep the `weight` column up to date: `awesome` products will affect it by a magnitude of 2, others by a magnitude of 1.\n\nYou can also use a static multiplier as the `delta_magnitude`:\n```ruby\nclass Product < ActiveRecord::Base\n  belongs_to :category\n  counter_culture :category, column_name: :weight, delta_magnitude: 3\nend\n\nclass Category < ActiveRecord::Base\n  has_many :products\nend\n```\n\nNow adding a `Product` will increase the `weight` column in its `Category` by 3; deleting it will decrease it by 3.\n\n### Conditional counter cache\n\n```ruby\nclass Product < ActiveRecord::Base\n  belongs_to :category\n  counter_culture :category, column_name: proc {|model| model.special? ? \'special_count\' : nil }\nend\n\nclass Category < ActiveRecord::Base\n  has_many :products\nend\n```\n\nNow, the ```Category``` model will keep the counter cache in ```special_count``` up-to-date. Only products where ```special?``` returns true will affect the special_count.\n\n### Totaling instead of counting\n\nInstead of keeping a running count, you may want to automatically track a running total.\nIn that case, the target counter will change by the value in the totaled field instead of changing by exactly 1 each time.\nUse the ```:delta_column``` option to specify that the counter should change by the value of a specific field in the counted object.\nFor example, suppose the Product model table has a field named ```weight_ounces```, and you want to keep a running\ntotal of the weight for all the products in the Category model\'s ```product_weight_ounces``` field:\n\n```ruby\nclass Product < ActiveRecord::Base\n  belongs_to :category\n  counter_culture :category, column_name: \'product_weight_ounces\', delta_column: \'weight_ounces\'\nend\n\nclass Category < ActiveRecord::Base\n  has_many :products\nend\n```\n\nNow, the ```Category``` model will keep the counter cache in ```product_weight_ounces``` up-to-date.\nThe value in the counter cache will be the sum of the ```weight_ounces``` values in each of the associated Product records.\n\nThe ```:delta_column``` option supports all numeric column types, not just ```:integer```. Specifically, ```:float``` is supported and tested.\n\n### Dynamically over-writing affected foreign keys\n\n```ruby\nclass Product < ActiveRecord::Base\n  belongs_to :category\n  counter_culture :category, foreign_key_values:\n      proc {|category_id| [category_id, Category.find_by_id(category_id).try(:parent_category).try(:id)] }\nend\n\nclass Category < ActiveRecord::Base\n  belongs_to :parent_category, class_name: \'Category\', foreign_key: \'parent_id\'\n  has_many :children, class_name: \'Category\', foreign_key: \'parent_id\'\n\n  has_many :products\nend\n```\n\nNow, the ```Category``` model will keep an up-to-date counter-cache in the ```products_count``` column of the ```categories``` table. Each product will affect the counts of both its immediate category and that category\'s parent. This will work with any number of levels.\n\n### Updating timestamps when counts change\n\nBy default, counter_culture does not update the timestamp of models when it updates their counter caches. If you would like every change in the counter cache column to result in an updated timestamp, simply set the touch option to true:\n```ruby\n  counter_culture :category, touch: true\n```\n\nThis is useful when you require your caches to get invalidated when the counter cache changes.\n\n### Custom timestamp column\n\nYou may also specify a custom timestamp column that gets updated only when a particular counter cache changes:\n```ruby\n  counter_culture :category, touch: \'category_count_changed\'\n```\n\nWith this option, any time the `category_counter_cache` changes both the `category_count_changed` and `updated_at` columns will get updated.\n\n### Manually populating counter cache values\n\nYou will sometimes want to populate counter-cache values from primary data. This is required when adding counter-caches to existing data. It is also recommended to run this regularly (at BestVendor, we run it once a week) to catch any incorrect values in the counter caches.\n\n```ruby\nProduct.counter_culture_fix_counts\n# will automatically fix counts for all counter caches defined on Product\n\nProduct.counter_culture_fix_counts exclude: :category\n# will automatically fix counts for all counter caches defined on Product, except for the :category relation\n\nProduct.counter_culture_fix_counts only: :category\n# will automatically fix counts only on the :category relation on Product\n\n# :exclude and :only also accept arrays of one level relations\n# if you want to fix counts on a more than one level relation you need to use convention below:\n\nProduct.counter_culture_fix_counts only: [[:subcategory, :category]]\n# will automatically fix counts only on the two-level [:subcategory, :category] relation on Product\n\n# :except and :only also accept arrays\n\nProduct.counter_culture_fix_counts verbose: true\n# prints some logs to STDOUT\n\nProduct.counter_culture_fix_counts only: :category, where: { categories: { id: 1 } }\n# will automatically fix counts only on the :category with id 1 relation on Product\n```\n\nThe ```counter_culture_fix_counts``` counts method uses batch processing of records to keep the memory consumption low. The default batch size is 1000 but is configurable like so\n```ruby\n# In an initializer\nCounterCulture.config.batch_size = 100\n```\nor by passing the :batch_size option to the method call\n\n```ruby\nProduct.counter_culture_fix_counts batch_size: 100\n```\n\n```counter_culture_fix_counts``` returns an array of hashes of all incorrect values for debugging purposes. The hashes have the following format:\n\n```ruby\n{ entity: which model the count was fixed on,\n  id: the id of the model that had the incorrect count,\n  what: which column contained the incorrect count,\n  wrong: the previously saved, incorrect count,\n  right: the newly fixed, correct count }\n```\n\n```counter_culture_fix_counts``` is optimized to minimize the number of queries and runs very quickly.\n\nSimilarly to `counter_culture`, it is possible to update the records\' timestamps, when fixing counts. If you would like to update the default timestamp field, pass `touch: true` option:\n\n```ruby\nProduct.counter_culture_fix_counts touch: true\n```\n\nIf you have specified a custom timestamps column, pass its name as the value for the `touch` option:\n\n```ruby\nProduct.counter_culture_fix_counts touch: category_count_changed\n```\n\n#### Handling dynamic column names\n\nManually populating counter caches with dynamic column names requires additional configuration:\n\n```ruby\nclass Product < ActiveRecord::Base\n  belongs_to :category\n  counter_culture :category,\n      column_name: proc {|model| "#{model.product_type}_count" },\n      column_names: {\n          ["products.product_type = ?", \'awesome\'] => \'awesome_count\',\n          ["products.product_type = ?", \'sucky\'] => \'sucky_count\'\n      }\n  # attribute product_type may be one of [\'awesome\', \'sucky\']\nend\n```\n\nIf you would like to avoid this configuration and simply skip counter caches with\ndynamic column names, while still fixing those counters on the model that are not\ndynamic, you can pass `skip_unsupported`:\n\n```ruby\nProduct.counter_culture_fix_counts skip_unsupported: true\n```\n\n#### Handling over-written, dynamic foreign keys\n\nManually populating counter caches with dynamically over-written foreign keys (```:foreign_key_values``` option) is not supported. You will have to write code to handle this case yourself.\n\n### Soft-deletes with `paranoia` or `discard`\n\nThis gem will keep counters correctly updated in Rails 4.2 or later when using\n[paranoia](https://github.com/rubysherpas/paranoia) or\n[discard](https://github.com/jhawthorn/discard) for soft-delete support.\nHowever, to ensure that counts are incremented after a restore you have\nto make sure to set up soft deletion (via `acts_as_paranoid` or\n`include Discard::Model`) before the call to `counter_culture` in your model:\n\n#### Paranoia\n\n```ruby\nclass SoftDelete < ActiveRecord::Base\n  acts_as_paranoid\n\n  belongs_to :company\n  counter_culture :company\nend\n```\n\n#### Discard\n\n```ruby\nclass SoftDelete < ActiveRecord::Base\n  include Discard::Model\n\n  belongs_to :company\n  counter_culture :company\nend\n```\n\n### PaperTrail integration\n\nIf you are using the [`paper_trail` gem](https://github.com/airblade/paper_trail)\nand would like new versions to be created when the counter cache columns are\nchanged by counter_culture, you can set the `with_papertrail` option:\n\n```ruby\nclass Review < ActiveRecord::Base\n  counter_culture :product, with_papertrail: true\nend\n\nclass Product < ActiveRecord::Base\n  has_paper_trail\nend\n```\n\n#### Polymorphic associations\n\ncounter_culture now supports polymorphic associations of one level only.\n\n## Contributing to counter_culture\n\n* Check out the latest master to make sure the feature hasn\'t been implemented or the bug hasn\'t been fixed yet.\n* Check out the issue tracker to make sure someone already hasn\'t requested it and/or contributed it.\n* Fork the project.\n* Start a feature/bugfix branch.\n* Commit and push until you are happy with your contribution.\n* Make sure to add tests for it. This is important so I don\'t break it in a future version unintentionally.\n* Please try not to mess with the Rakefile, version, or history. If you want to have your own version, or is otherwise necessary, that is fine, but please isolate to its own commit so I can cherry-pick around it.\n\n## Copyright\n\nCopyright (c) 2012-2013 BestVendor, Magnus von Koeller. See LICENSE.txt for further details.\n'