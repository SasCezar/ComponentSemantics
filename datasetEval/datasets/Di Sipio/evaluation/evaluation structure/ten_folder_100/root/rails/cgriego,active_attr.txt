b'# ActiveAttr #\n\n[![Build History][travis badge]][travis]\n[![Code Climate][codeclimate badge]][codeclimate]\n\nActiveAttr is a set of modules that makes it easy to create plain old Ruby\nmodels with functionality found in ORMs, like ActiveRecord, without\nreinventing the wheel. Think of ActiveAttr as the stuff ActiveModel left out.\n\nActiveAttr is distributed as a Ruby gem [on rubygems.org][rubygems].\n\n[![ActiveAttr Railscast][railscast poster]][railscast]\n\n* [Slides][speakerdeck]\n* [RailsCast][railscast]\n* [API Documentation][api]\n* [Contributors][contributors]\n\n[api]: http://rubydoc.info/gems/active_attr\n[codeclimate badge]: https://codeclimate.com/github/cgriego/active_attr.svg\n[codeclimate]: https://codeclimate.com/github/cgriego/active_attr\n[contributors]: https://github.com/cgriego/active_attr/contributors\n[railscast poster]: http://railscasts.com/static/episodes/stills/326-activeattr.png\n[railscast]: http://railscasts.com/episodes/326-activeattr\n[rubygems]: http://rubygems.org/gems/active_attr\n[protected_attributes]: https://github.com/westonganger/protected_attributes_continued\n[strong_parameters]: https://github.com/rails/strong_parameters\n[speakerdeck]: https://speakerdeck.com/u/cgriego/p/models-models-every-where\n[travis badge]: https://secure.travis-ci.org/cgriego/active_attr.svg?branch=master\n[travis]: http://travis-ci.org/cgriego/active_attr\n\n## Modules ##\n\n### Attributes ###\n\nIncluding the Attributes module into your class gives you a DSL for defining\nthe attributes of your model.\n\n```ruby\nclass Person\n  include ActiveAttr::Attributes\n\n  attribute :first_name\n  attribute :last_name\nend\n\nperson = Person.new\nperson.first_name = "Chris"\nperson.last_name = "Griego"\nperson.attributes #=> {"first_name"=>"Chris", "last_name"=>"Griego"}\n```\n\n#### AttributeDefaults ####\n\nIncluding the AttributeDefaults module into your class builds on Attributes by\nallowing defaults to be declared with attributes.\n\n```ruby\nclass Person\n  include ActiveAttr::AttributeDefaults\n\n  attribute :first_name, :default => "John"\n  attribute :last_name, :default => "Doe"\nend\n\nperson = Person.new\nperson.first_name #=> "John"\nperson.last_name #=> "Doe"\n```\n\n#### QueryAttributes ####\n\nIncluding the QueryAttributes module into your class builds on Attributes by\nproviding instance methods for querying your attributes.\n\n```ruby\nclass Person\n  include ActiveAttr::QueryAttributes\n\n  attribute :first_name\n  attribute :last_name\nend\n\nperson = Person.new\nperson.first_name = "Chris"\nperson.first_name? #=> true\nperson.last_name? #=> false\n```\n\n#### TypecastedAttributes ####\n\nIncluding the TypecastedAttributes module into your class builds on Attributes\nby providing type conversion for your attributes.\n\n```ruby\nclass Person\n  include ActiveAttr::TypecastedAttributes\n  attribute :age, :type => Integer\nend\n\nperson = Person.new\nperson.age = "29"\nperson.age #=> 29\n```\n\n### BasicModel ###\n\nIncluding the BasicModel module into your class gives you the bare minimum\nrequired for your model to meet the ActiveModel API requirements.\n\n```ruby\nclass Person\n  include ActiveAttr::BasicModel\nend\n\nPerson.model_name.plural #=> "people"\nperson = Person.new\nperson.valid? #=> true\nperson.errors.full_messages #=> []\n```\n\n### BlockInitialization ###\n\nIncluding the BlockInitialization module into your class will yield the model\ninstance to a block passed to when creating a new instance.\n\n```ruby\nclass Person\n  include ActiveAttr::BlockInitialization\n  attr_accessor :first_name, :last_name\nend\n\nperson = Person.new do |p|\n  p.first_name = "Chris"\n  p.last_name = "Griego"\nend\n\nperson.first_name #=> "Chris"\nperson.last_name #=> "Griego"\n```\n\n### Logger ###\n\nIncluding the Logger module into your class will give you access to a\nconfigurable logger in model classes and instances. Your preferred logger can\nbe configured on an instance, subclass, class, parent class, and globally by\nsetting ActiveAttr::Logger.logger. When using Rails, the Rails framework\nlogger will be configured by default.\n\n```ruby\nclass Person\n  include ActiveAttr::Logger\nend\n\nPerson.logger = Logger.new(STDOUT)\nPerson.logger? #=> true\nPerson.logger.info "Logging an informational message"\n\nperson = Person.new\nperson.logger? #=> true\nperson.logger = Logger.new(STDERR)\nperson.logger.warn "Logging a warning message"\n```\n\n### MassAssignment ###\n\nIncluding the MassAssignment module into your class gives you methods for bulk\ninitializing and updating the attributes of your model. Any unknown attributes\nare silently ignored.\n\n```ruby\nclass Person\n  include ActiveAttr::MassAssignment\n  attr_accessor :first_name, :last_name, :age\nend\n\nperson = Person.new(:first_name => "Christopher", :last_name => "Griego")\nperson.attributes = { :first_name => "Chris", :age => 21 }\nperson.first_name #=> "Chris"\nperson.last_name #=> "Griego"\n```\n\nMassAssignment supports mass assignment security/sanitization if a sanitizer\nis included in the model. If using Rails 4.0, include ActiveModel\'s forbidden\nattributes protection module to get support for strong parameters.\n\n```ruby\nclass Person\n  include ActiveAttr::MassAssignment\n  include ActiveModel::ForbiddenAttributesProtection\n  attr_accessor :first_name, :last_name\nend\n\nperson = Person.new(ActionController::Parameters.new({\n  :first_name => "Chris",\n  :last_name => "Griego",\n}).permit(:first_name))\nperson.first_name #=> "Chris"\nperson.last_name #=> nil\n```\n\nIf using Rails 3.x or the [Protected Attributes gem][protected_attributes],\ninclude ActiveModel\'s mass assignment security module to get support for\nprotected attributes, including support for mass assignment roles.\n\n```ruby\nclass Person\n  include ActiveAttr::MassAssignment\n  include ActiveModel::MassAssignmentSecurity\n  attr_accessor :first_name, :last_name\n  attr_protected :last_name\nend\n\nperson = Person.new(:first_name => "Chris", :last_name => "Griego")\nperson.first_name #=> "Chris"\nperson.last_name #=> nil\n```\n\nIf using the [Strong Parameters gem][strong_parameters] with Rails 3.2,\ninclude the forbidden attributes protection module after including\nthe mass assignment security module.\n\n```ruby\nclass Person\n  include ActiveAttr::MassAssignment\n  include ActiveModel::MassAssignmentSecurity\n  include ActiveModel::ForbiddenAttributesProtection\nend\n```\n\n### Serialization ###\n\nThe Serialization module is a shortcut for incorporating ActiveModel\'s\nserialization functionality into your model with one include.\n\n```ruby\nclass Person\n  include ActiveAttr::Serialization\nend\n```\n\n### Model ###\n\nThe Model module is a shortcut for incorporating the most common model\nfunctionality into your model with one include. All of the above modules\nare included when you include Model.\n\n```ruby\nclass Person\n  include ActiveAttr::Model\nend\n```\n\n## Integrations ##\n\n### Ruby on Rails ###\n\nWhen using ActiveAttr inside a Rails application, ActiveAttr will configure\nyour models\' default logger to use the Rails logger automatically. Just\ninclude ActiveAttr in your Gemfile.\n\n```ruby\ngem "active_attr"\n```\n\n### RSpec ###\n\nActiveAttr comes with matchers and RSpec integration to assist you in testing\nyour models. The matchers also work with compatible frameworks like Shoulda.\n\n```ruby\nrequire "active_attr/rspec"\n\ndescribe Person do\n  it do\n    should have_attribute(:first_name).\n      of_type(String).\n      with_default_value_of("John")\n  end\nend\n```\n'