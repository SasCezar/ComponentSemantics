b'# MetaTags: a gem to make your Rails application SEO-friendly\n\n[![CircleCI](https://circleci.com/gh/kpumuk/meta-tags.svg?style=shield)](https://circleci.com/gh/kpumuk/meta-tags)\n[![Gem Version](https://badge.fury.io/rb/meta-tags.svg)](https://badge.fury.io/rb/meta-tags)\n[![Code Climate](https://codeclimate.com/github/kpumuk/meta-tags/badges/gpa.svg)](https://codeclimate.com/github/kpumuk/meta-tags)\n[![Test Coverage](https://codeclimate.com/github/kpumuk/meta-tags/badges/coverage.svg)](https://codeclimate.com/github/kpumuk/meta-tags/coverage)\n[![Gem Downloads](https://img.shields.io/gem/dt/meta-tags.svg)](https://badge.fury.io/rb/meta-tags)\n[![Changelog](https://img.shields.io/badge/Changelog-latest-blue.svg)](https://github.com/kpumuk/meta-tags/blob/master/CHANGELOG.md)\n\nSearch Engine Optimization (SEO) plugin for Ruby on Rails applications.\n\n## Ruby on Rails\n\nMetaTags master branch fully supports Ruby on Rails 4.2+, and is tested against all\nmajor Rails releases up to 6.0.beta2.\n\nRuby versions older than 2.2.0 are no longer officially supported.\n\n_Please note_ that we are no longer support Ruby versions older than 2.2.0 and\nRuby on Rails older than 4.2, because they [reached their End of Life](https://github.com/kpumuk/meta-tags/pull/143).\n\n## Installation\n\nAdd the "meta-tags" gem to your `Gemfile`.\n\n```ruby\ngem \'meta-tags\'\n```\n\nAnd run `bundle install` command.\n\n## Configuration\n\nMetaTags follows best-practices for meta tags. Although default limits for\ntruncation have recommended values, you can change them to reflect your own\npreferences. Keywords are converted to lowercase by default, but this is also\nconfigurable.\n\nTo override the defaults, create an initializer\n`config/initializers/meta_tags.rb` using the following command:\n\n```bash\nrails generate meta_tags:install\n```\n\nBy default meta tags are rendered with the key `name`. Since, some meta tags are\nrequired to use `property` instead (like Facebook Open Graph object), MetaTags gem\nallows to configure which tags to render with `property` attribute. By default\nthe pre-configured list includes all possible Facebook Open Graph object types, but\nyou can add your own in case you need it.\n\n## MetaTags Usage\n\nFirst, add this code to your main layout:\n\n```erb\n<head>\n  <%= display_meta_tags site: \'My website\' %>\n</head>\n```\n\nThen, to set the page title, add this to each of your views (see below for other options):\n\n```erb\n<h1><%= title \'My page title\' %></h1>\n```\n\nWhen views are rendered, the page title will be included in the right spots:\n\n```html\n<head>\n  <title>My website | My page title</title>\n</head>\n<body>\n  <h1>My page title</h1>\n</body>\n```\n\nYou can find allowed options for `display_meta_tags` method below.\n\n### Using MetaTags in controller\n\nYou can define following instance variables:\n\n```ruby\n@page_title       = \'Member Login\'\n@page_description = \'Member login page.\'\n@page_keywords    = \'Site, Login, Members\'\n```\n\nAlso you could use `set_meta_tags` method to define all meta tags simultaneously:\n\n```ruby\nset_meta_tags title: \'Member Login\',\n              description: \'Member login page.\',\n              keywords: \'Site, Login, Members\'\n```\n\nYou can find allowed options for `set_meta_tags` method below.\n\n### Using MetaTags in view\n\nTo set meta tags you can use following methods:\n\n```erb\n<% title \'Member Login\' %>\n<% description \'Member login page.\' %>\n<% keywords \'Site, Login, Members\' %>\n<% nofollow %>\n<% noindex %>\n<% refresh 3 %>\n```\n\nAlso there is `set_meta_tags` method exists:\n\n```erb\n<% set_meta_tags title: \'Member Login\',\n                 description: \'Member login page.\',\n                 keywords: \'Site, Login, Members\' %>\n```\n\nYou can pass an object that implements `#to_meta_tags` method and returns a Hash:\n\n```ruby\nclass Document < ApplicationRecord\n  def to_meta_tags\n    {\n      title: title,\n      description: summary,\n    }\n  end\nend\n\n@document = Document.first\nset_meta_tags @document\n```\n\nThe `title` method returns title itself, so you can use it to show the title\nsomewhere on the page:\n\n```erb\n<h1><%= title \'Member Login\' %></h1>\n```\n\nIf you want to set the title and display another text, use this:\n\n```erb\n<h1><%= title \'Member Login\', \'Here you can login to the site:\' %></h1>\n```\n\n### Allowed options for `display_meta_tags` and `set_meta_tags` methods\n\nUse these options to customize the title format:\n\n| Option         | Description |\n| -------------- | ----------- |\n| `:site`        | site title |\n| `:title`       | page title |\n| `:description` | page description |\n| `:keywords`    | page keywords |\n| `:charset`     | page character set |\n| `:prefix`      | text between site name and separator |\n| `:separator`   | text used to separate website name from page title |\n| `:suffix`      | text between separator and page title |\n| `:lowercase`   | when true, the page name will be lowercase |\n| `:reverse`     | when true, the page and site names will be reversed |\n| `:noindex`     | add noindex meta tag; when true, \'robots\' will be used; accepts a string with a robot name, or an array of strings |\n| `:index`       | add index meta tag; when true, \'robots\' will be used; accepts a string with a robot name, or an array of strings |\n| `:nofollow`    | add nofollow meta tag; when true, \'robots\' will be used; accepts a string with a robot name, or an array of strings |\n| `:follow`      | add follow meta tag; when true, \'robots\' will be used; accepts a string with a robot name, or an array of strings |\n| `:noarchive`   | add noarchive meta tag; when true, \'robots\' will be used; accepts a string with a robot name, or an array of strings |\n| `:canonical`   | add canonical link tag |\n| `:prev`        | add prev link tag |\n| `:next`        | add next link tag |\n| `:image_src`   | add image_src link tag |\n| `:og`          | add Open Graph tags (Hash) |\n| `:twitter`     | add Twitter tags (Hash) |\n| `:refresh`     | refresh interval and optionally url to redirect to |\n\nAnd here are a few examples to give you ideas.\n\n```erb\n<%= display_meta_tags separator: "&mdash;".html_safe %>\n<%= display_meta_tags prefix: false, separator: ":" %>\n<%= display_meta_tags lowercase: true %>\n<%= display_meta_tags reverse: true, prefix: false %>\n<%= display_meta_tags og: { title: \'The Rock\', type: \'video.movie\' } %>\n<%= display_meta_tags alternate: { \'zh-Hant\' => \'http://example.com.tw/base/url\' } %>\n```\n\n### Allowed values\n\nYou can specify `:title` as a string or array:\n\n```ruby\nset_meta_tags title: [\'part1\', \'part2\'], site: \'site\'\n# site | part1 | part2\nset_meta_tags title: [\'part1\', \'part2\'], reverse: true, site: \'site\'\n# part2 | part1 | site\n```\n\nKeywords can be passed as string of comma-separated values, or as an array:\n\n```ruby\nset_meta_tags keywords: [\'tag1\', \'tag2\']\n# tag1, tag2\n```\n\nDescription is a string (HTML will be stripped from output string).\n\n### Mirrored values\n\nSometimes, it is desirable to mirror meta tag values down into namespaces. A\ncommon use case is when you want open graph\'s `og:title` to be identical to\nthe `title`.\n\nSay, you have the following in your application layout:\n\n```ruby\ndisplay_meta_tags og: {\n  title: :title,\n  site_name: :site,\n}\n```\n\nThe value of `og[:title]` is a symbol and therefore references the value of the\ntop level `title` meta tag. With the following in any view:\n\n```ruby\ntitle \'my great view\'\n```\n\nYou get this open graph meta tag for free:\n\n```html\n<meta property="og:title" content="my great view"></meta>\n```\n\nPlease note, that title does not include site. If you need to reference the exact\nvalue rendered in the `<title>` meta tag, use `:full_title`.\n\n### Using with Turbolinks\n\n[Turbolinks](https://github.com/turbolinks/turbolinks) is a simple solution for getting\nthe performance benefits of a single-page application without the added complexity of a\nclient-side JavaScript framework. MetaTags supports Turbolinks out of the box, no\nconfiguration is necessary.\n\n### Using with pjax\n\n[jQuery.pjax](https://github.com/defunkt/jquery-pjax) is a nice solution for navigation\nwithout full page reload. The main difference is that layout file will not be rendered,\nso page title will not change. To fix this, when using a page fragment, pjax will check\nthe fragment DOM element for a `title` or `data-title` attribute and use any value it finds.\n\nMetaTags simplifies this with `display_title` method, which returns fully resolved\npage title (include site, prefix/suffix, etc.) But in this case you will have to\nset default parameters (e.g, `:site`) both in layout file and in your views. To minimize\ncode duplication, you can define a helper in `application_helper.rb`:\n\n```ruby\ndef default_meta_tags\n  {\n    title:       \'Member Login\',\n    description: \'Member login page.\',\n    keywords:    \'Site, Login, Members\',\n    separator:   "&mdash;".html_safe,\n  }\nend\n```\n\nThen in your layout file use:\n\n```erb\n<%= display_meta_tags(default_meta_tags) %>\n```\n\nAnd in your pjax templates:\n\n```erb\n<!-- set title here, so we can use it both in "display_title" and in "title" -->\n<% title "My Page title" %>\n<%= content_tag :div, data: { title: display_title(default_meta_tags) } do %>\n    <h1><%= title %></h1>\n    <!-- HTML goes here -->\n<% end %>\n```\n\n## SEO Basics and MetaTags\n\n### Titles\n\nPage titles are very important for Search engines. The titles in the\nbrowser are displayed in the title bar. The search engines look at\nthe title bar to determine what the page is all about.\n\n```ruby\nset_meta_tags title: \'Member Login\'\n# <title>Member Login</title>\nset_meta_tags site: \'Site Title\', title: \'Member Login\'\n# <title>Site Title | Member Login</title>\nset_meta_tags site: \'Site Title\', title: \'Member Login\', reverse: true\n# <title>Member Login | Site Title</title>\n```\n\nRecommended title tag length: up to <b>70 characters</b>, <b>10 words</b>.\n\nFurther reading:\n\n* [Title Tag](https://moz.com/learn/seo/title-tag)\n\n### Description\n\nDescription tags are called meta tags as they are not displayed by the\nbrowsers unlike the titles. However, these descriptions may be displayed by\nsome search engines. They are used to describe the contents of a page in\n2 or 3 sentences.\n\n```ruby\nset_meta_tags description: "All text about keywords, other keywords"\n# <meta name="description" content="All text about keywords, other keywords">\n```\n\nRecommended description tag length: up to <b>300 characters</b>.\n\nFurther reading:\n\n* [Meta Description](https://moz.com/learn/seo/meta-description)\n* [How Long Should Your Meta Description Be? (2018 Edition)](https://moz.com/blog/how-long-should-your-meta-description-be-2018)\n\n### Keywords\n\nMeta keywords tag are used to place your keywords that you think a\nsurfer would search in Search engines. Repeating keywords unnecessarily\nwould be considered spam and you may get permanently banned from SERP\'s\n\n```ruby\nset_meta_tags keywords: %w[keyword1 Keyword2 KeyWord3]\n# <meta name="keywords" content="keyword1, keyword2, keyword3">\n```\n\nRecommended keywords tag length: up to <b>255 characters</b>, <b>20 words</b>.\n\n**Please note**, that both Google and Bing publicly indicated that keywords\nmeta tags is completely ignored.\n\n### Noindex\n\nBy using the noindex meta tag, you can signal to search engines to not\ninclude specific pages in their indexes.\n\n```ruby\nset_meta_tags noindex: true\n# <meta name="robots" content="noindex">\nset_meta_tags noindex: \'googlebot\'\n# <meta name="googlebot" content="noindex">\n```\n\nThis is useful for pages like login, password reset, privacy policy, etc.\n\nFurther reading:\n\n* [Blocking Google](http://www.google.com/support/webmasters/bin/answer.py?hl=en&answer=93708)\n* [Using meta tags to block access to your site](http://www.google.com/support/webmasters/bin/answer.py?hl=en&answer=93710)\n\n### Index\n\nAlthough it is not required to add \'index\' to \'robots\' as it is default value for Google, some SEO specialists recommend to add it to website\n\n```ruby\nset_meta_tags index: true\n# <meta name="robots" content="index">\n```\n\n### Nofollow\n\nNofollow meta tag tells a search engine not to follow the links on a specific\npage. It\'s entirely likely that a robot might find the same links on some\nother page without a nofollow (perhaps on some other site), and so\nstill arrives at your undesired page.\n\n```ruby\nset_meta_tags nofollow: true\n# <meta name="robots" content="nofollow">\nset_meta_tags nofollow: \'googlebot\'\n# <meta name="googlebot" content="nofollow">\n```\n\nFurther reading:\n\n* [About rel="nofollow"](http://www.google.com/support/webmasters/bin/answer.py?answer=96569)\n* [Meta tags](http://www.google.com/support/webmasters/bin/answer.py?hl=en&answer=79812)\n\n### Follow\n\nFollow will work with Noindex  meta tag\n\n```ruby\nset_meta_tags noindex: true, follow: true\n# <meta name="robots" content="noindex, follow">\n```\n\nIt will not look at this page but will crawl through the rest of the pages on\nyour website.\n\n### Canonical URL\n\nCanonical link element tells a search engine what is the canonical or main URL\nfor a content which have multiple URLs. The search engine will always return\nthat URL, and link popularity and authority will be applied to that URL.\n\n```ruby\nset_meta_tags canonical: "http://yoursite.com/canonical/url"\n# <link rel="canonical" href="http://yoursite.com/canonical/url">\n```\n\nFurther reading:\n\n* [About rel="canonical"](http://www.google.com/support/webmasters/bin/answer.py?hl=en&answer=139394)\n* [Canonicalization](http://www.google.com/support/webmasters/bin/answer.py?hl=en&answer=139066)\n\n### Icon\n\nA favicon (short for Favorite icon), also known as a shortcut icon, Web site\nicon, tab icon or bookmark icon, is a file containing one or more small icons,\nmost commonly 16\xc3\x9716 pixels, associated with a particular website or web page.\n\n```ruby\nset_meta_tags icon: \'/favicon.ico\'\n# <link rel="icon" href="/favicon.ico" type="image/x-icon">\nset_meta_tags icon: \'/favicon.png\', type: \'image/png\'\n# <link rel="icon" href="/favicon.png" type="image/png">\nset_meta_tags icon: [\n  { href: \'/images/icons/icon_96.png\', sizes: \'32x32 96x96\', type: \'image/png\' },\n  { href: \'/images/icons/icon_itouch_precomp_32.png\', rel: \'apple-touch-icon-precomposed\', sizes: \'32x32\', type: \'image/png\' },\n]\n# <link rel="icon" href="/images/icons/icon_96.png" type="image/png" sizes="32x32 96x96">\n# <link rel="apple-touch-icon-precomposed" href="/images/icons/icon_itouch_precomp_32.png" type="image/png" sizes="32x32">\n```\n\nFurther reading:\n\n* [Favicon](https://www.wikiwand.com/en/Favicon)\n* [Touch Icons](https://mathiasbynens.be/notes/touch-icons)\n\n\n### Multi-regional and multilingual URLs, RSS and mobile links\n\nAlternate link elements tell a search engine when there is content that\'s\ntranslated or targeted to users in a certain region.\n\n```ruby\nset_meta_tags alternate: { "fr" => "http://yoursite.fr/alternate/url" }\n# <link rel="alternate" href="http://yoursite.fr/alternate/url" hreflang="fr">\n\nset_meta_tags alternate: { "fr" => "http://yoursite.fr/alternate/url",\n                           "de" => "http://yoursite.de/alternate/url" }\n# <link rel="alternate" href="http://yoursite.fr/alternate/url" hreflang="fr">\n# <link rel="alternate" href="http://yoursite.de/alternate/url" hreflang="de">\n```\n\nIf you need more than just multi-lingual links, you can use an alternative syntax:\n\n```ruby\nset_meta_tags alternate: [\n    { href: \'http://example.fr/base/url\', hreflang: \'fr\' },\n    { href: \'http://example.com/feed.rss\', type: \'application/rss+xml\', title: \'RSS\' },\n    { href: \'http://m.example.com/page-1\', media: \'only screen and (max-width: 640px)\'},\n  ]\n```\n\nFurther reading:\n\n* [Multi-regional and multilingual sites](https://support.google.com/webmasters/answer/182192)\n* [About rel="alternate" hreflang="x"](http://www.google.com/support/webmasters/bin/answer.py?hl=en&answer=189077)\n* [Separate URLs](https://developers.google.com/webmasters/mobile-sites/mobile-seo/configurations/separate-urls#annotation-in-the-html)\n\n### Pagination links\n\nPrevious and next links indicate indicate the relationship between individual\nURLs. Using these attributes is a strong hint to Google that you want us to\ntreat these pages as a logical sequence.\n\n```ruby\nset_meta_tags prev: "http://yoursite.com/url?page=1"\n# <link rel="prev" href="http://yoursite.com/url?page=1">\nset_meta_tags next: "http://yoursite.com/url?page=3"\n# <link rel="next" href="http://yoursite.com/url?page=3">\n```\n\nFurther reading:\n\n* [Pagination](http://support.google.com/webmasters/bin/answer.py?hl=en&answer=1663744)\n* [Pagination with rel="next" and rel="prev"](http://googlewebmastercentral.blogspot.ca/2011/09/pagination-with-relnext-and-relprev.html)\n\n### image_src links\n\nBasically, when you submit/share this to Facebook , this helps Facebook determine\nwhich image to put next to the link. If this is not present, Facebook tries to\nput in the first image it finds on the page, which may not be the best one to\nrepresent your site.\n\n```ruby\nset_meta_tags image_src: "http://yoursite.com/icons/icon_32.png"\n# <link rel="image_src" href="http://yoursite.com/icons/icon_32.png">\n```\n\n### amphtml links\n\nAMP is a way to build web pages for static content that render fast. If you have\ntwo versions of the page \xe2\x80\x93 non-AMP and AMP, you can link the AMP version from\nnormal one using `amphtml` tag:\n\n```ruby\nset_meta_tags amphtml: url_for(format: :amp, only_path: false)\n# <link rel="amphtml" href="https://www.example.com/document.amp">\n```\n\nTo link back to normal version, use `canonical`.\n\n* [What Is AMP?](https://www.ampproject.org/learn/about-amp/)\n* [Make Your Page Discoverable](https://www.ampproject.org/docs/guides/discovery)\n\n### Refresh interval and redirect URL\n\nMeta refresh is a method of instructing a web browser to automatically\nrefresh the current web page or frame after a given time interval. It is also\npossible to instruct the browser to fetch a different URL when the page is\nrefreshed, by including the alternative URL in the content parameter. By\nsetting the refresh time interval to zero (or a very low value), this allows\nmeta refresh to be used as a method of URL redirection.\n\n```ruby\nset_meta_tags refresh: 5\n# <meta content="5" http-equiv="refresh">\nset_meta_tags refresh: \'5;url=http://example.com\'\n# <meta content="5;url=http://example.com" http-equiv="refresh">\n```\n\nFurther reading:\n\n* [Meta refresh](http://en.wikipedia.org/wiki/Meta_refresh)\n* [What is the Meta Refresh Tag](http://webdesign.about.com/od/metataglibraries/a/aa080300a.htm)\n\n\n### Open Search\n\nOpen Search link element to describe a search engine in a standard and accessible format.\n\n```ruby\nset_meta_tags open_search: {\n  title: "Open Search",\n  href:  "/opensearch.xml"\n}\n# <link href="/opensearch.xml" rel="search" title="Open Search" type="application/opensearchdescription+xml">\n```\n\nFurther reading:\n\n* [OpenSearch specs](http://www.opensearch.org/Specifications/OpenSearch/1.1)\n* [OpenSearch wiki](http://en.wikipedia.org/wiki/OpenSearch)\n\n### Hashes\n\nAny namespace can be built just passing any symbol name and a Hash. For example:\n\n```ruby\nset_meta_tags foo: {\n  bar: "lorem",\n  baz: {\n    qux: "ipsum"\n  }\n}\n# <meta property="foo:bar" content="lorem">\n# <meta property="foo:baz:qux" content="ipsum">\n```\n\n### Arrays\n\nRepeated meta tags can be built just using an Array inside a Hash. For example:\n\n```ruby\nset_meta_tags og: {\n    image: ["http://example.com/rock.jpg", "http://example.com/rock2.jpg"]\n}\n# <meta property="og:image" content="http://example.com/rock.jpg">\n# <meta property="og:image" content="http://example.com/rock2.jpg">\n```\n\n### Open Graph\n\nTo turn your web pages into graph objects, you\'ll need to add Open Graph\nprotocol `<meta>` tags to your webpages. The tags allow you to specify\nstructured information about your web pages. The more information you provide, the more opportunities your web pages can be surfaced within Facebook today\nand in the future. Here\'s an example for a movie page:\n\n```ruby\nset_meta_tags og: {\n  title:    \'The Rock\',\n  type:     \'video.movie\',\n  url:      \'http://www.imdb.com/title/tt0117500/\',\n  image:    \'http://ia.media-imdb.com/rock.jpg\',\n  video:    {\n    director: \'http://www.imdb.com/name/nm0000881/\',\n    writer:   [\'http://www.imdb.com/name/nm0918711/\', \'http://www.imdb.com/name/nm0177018/\']\n  }\n}\n# <meta property="og:title" content="The Rock">\n# <meta property="og:type" content="video.movie">\n# <meta property="og:url" content="http://www.imdb.com/title/tt0117500/">\n# <meta property="og:image" content="http://ia.media-imdb.com/rock.jpg">\n# <meta property="og:video:director" content="http://www.imdb.com/name/nm0000881/">\n# <meta property="og:video:writer" content="http://www.imdb.com/name/nm0918711/">\n# <meta property="og:video:writer" content="http://www.imdb.com/name/nm0177018/">\n```\n\nMultiple images declared as an **array** (look at the `_` character):\n\n```ruby\nset_meta_tags og: {\n  title:    \'Two structured image properties\',\n  type:     \'website\',\n  url:      \'view-source:http://examples.opengraphprotocol.us/image-array.html\',\n  image:    [{\n    _: \'http://examples.opengraphprotocol.us/media/images/75.png\',\n    width: 75,\n    height: 75,\n  },\n  {\n    _: \'http://examples.opengraphprotocol.us/media/images/50.png\',\n    width: 50,\n    height: 50,\n  }]\n}\n# <meta property="og:title" content="Two structured image properties">\n# <meta property="og:type" content="website">\n# <meta property="og:url" content="http://examples.opengraphprotocol.us/image-array.html">\n# <meta property="og:image" content="http://examples.opengraphprotocol.us/media/images/75.png">\n# <meta property="og:image:width" content="75">\n# <meta property="og:image:height" content="75">\n# <meta property="og:image" content="http://examples.opengraphprotocol.us/media/images/50.png">\n# <meta property="og:image:width" content="50">\n# <meta property="og:image:height" content="50">\n```\n\nArticle meta tags are supported too:\n\n```ruby\nset_meta_tags article: {\n  published_time:    \'2013-09-17T05:59:00+01:00\',\n  modified_time:     \'2013-09-16T19:08:47+01:00\',\n  section:           \'Article Section\',\n  tag:               \'Article Tag\',\n}\n# <meta property="article:published_time" content="2013-09-17T05:59:00+01:00">\n# <meta property="article:modified_time" content="2013-09-16T19:08:47+01:00">\n# <meta property="article:section" content="Article Section">\n# <meta property="article:tag" content="Article Tag">\n```\n\nFurther reading:\n\n* [Open Graph protocol](http://developers.facebook.com/docs/opengraph/)\n* [Must-Have Social Meta Tags for Twitter, Google+, Facebook and More](https://moz.com/blog/meta-data-templates-123)\n\n### Twitter Cards\n\nTwitter cards make it possible for you to attach media experiences to Tweets that link to your content.\nThere are 3 card types (summary, photo and player). Here\'s an example for summary:\n\n```ruby\nset_meta_tags twitter: {\n  card: "summary",\n  site: "@username"\n}\n# <meta name="twitter:card" content="summary">\n# <meta name="twitter:site" content="@username">\n```\n\nTake in consideration that if you\'re already using OpenGraph to describe data on your page, it\xe2\x80\x99s easy to generate a Twitter card without duplicating your tags and data. When the Twitter card processor looks for tags on your page, it first checks for the Twitter property, and if not present, falls back to the supported Open Graph property. This allows for both to be defined on the page independently, and minimizes the amount of duplicate markup required to describe your content and experience.\n\nWhen you need to generate a [Twitter Photo card](https://dev.twitter.com/docs/cards/types/photo-card), `twitter:image` property is a string, while image dimensions are specified using `twitter:image:width` and `twitter:image:height`, or a `Hash` objects in terms of MetaTags gems. There is a special syntax to make this work:\n\n```ruby\nset_meta_tags twitter: {\n  card:  "photo",\n  image: {\n    _:      "http://example.com/1.png",\n    width:  100,\n    height: 100,\n  }\n}\n# <meta name="twitter:card" content="photo">\n# <meta name="twitter:image" content="http://example.com/1.png">\n# <meta name="twitter:image:width" content="100">\n# <meta name="twitter:image:height" content="100">\n```\n\nFurther reading:\n\n* [Twitter Cards Documentation](https://dev.twitter.com/cards/)\n\n### App Links\n\nApp Links is an open cross platform solution for deep linking to content in your mobile app. Here\'s an example for iOS app integration:\n\n```ruby\nset_meta_tags al: {\n  ios: {\n    url: "example://applinks",\n    app_store_id: 12345,\n    app_name: "Example App"\n  }\n}\n# <meta property="al:ios:url" content="example://applinks">\n# <meta property="al:ios:app_store_id" content="12345">\n# <meta property="al:ios:app_name" content="Example App">\n```\n\nFurther reading:\n\n* [App Links Documentation](https://developers.facebook.com/docs/applinks)\n\n### Custom meta tags\n\nStarting from version 1.3.1, you can specify arbitrary meta tags, and they will\nbe rendered on the page, even if meta-tags gem does not know about them.\n\nExample:\n\n```ruby\nset_meta_tags author: "Dmytro Shteflyuk"\n# <meta name="author" content="Dmytro Shteflyuk">\n```\n\nYou can also specify value as an Array, and values will be displayed as a list\nof `meta` tags:\n\n```ruby\nset_meta_tags author: [ "Dmytro Shteflyuk", "John Doe" ]\n# <meta name="author" content="Dmytro Shteflyuk">\n# <meta name="author" content="John Doe">\n```\n\n## Maintainers\n\n[Dmytro Shteflyuk](https://github.com/kpumuk), [https://kpumuk.info](http://kpumuk.info/)\n'