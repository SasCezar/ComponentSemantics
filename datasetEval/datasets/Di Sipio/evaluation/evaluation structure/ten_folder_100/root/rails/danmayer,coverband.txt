b'<img src="https://raw.github.com/danmayer/coverband/master/docs/assets/logo/heads.svg?sanitize=true" width=\'300\'>\n\n# Coverband\n\n[![Build Status](https://travis-ci.org/danmayer/coverband.svg?branch=master)](https://travis-ci.org/danmayer/coverband)\n[![Coverage Status](https://coveralls.io/repos/github/danmayer/coverband/badge.svg?branch=master)](https://coveralls.io/github/danmayer/coverband?branch=master)\n[![Maintainability](https://api.codeclimate.com/v1/badges/1e6682f9540d75f26da7/maintainability)](https://codeclimate.com/github/danmayer/coverband/maintainability)\n[![Discord Shield](https://img.shields.io/discord/609509533999562753)](https://discord.gg/KAH38EV)\n\n\n<p align="center">\n  <a href="#key-features">Key Features</a> \xe2\x80\xa2\n  <a href="#installation">Installation</a> \xe2\x80\xa2\n  <a href="#coverage-report">Coverage Report</a> \xe2\x80\xa2\n  <a href="#advanced-config">Advanced Config</a> \xe2\x80\xa2\n  <a href="#license">License</a> \xe2\x80\xa2\n  <a href="/changes.md">Change Log / Roadmap</a> \xe2\x80\xa2\n  <a href="/CODE_OF_CONDUCT.md">Code of Conduct</a>\n</p>\n\nA gem to measure production code usage, showing a counter for the number of times each line of code that is executed. Coverband allows easy configuration to collect and report on production code usage. It reports in the background via a thread or can be used as Rack middleware, or manually configured to meet any need.\n\n**Note:** Coverband is not intended for test code coverage, for that we recommended using [SimpleCov](https://github.com/colszowka/simplecov).\n\n## Key Features\n\nThe primary goal of Coverband is giving deep insight into your production runtime usage of your application code, while having the least impact on performance possible.\n\n- Low performance overhead\n- Simple setup and configuration\n- Out of the box support for all standard code execution paths (web, cron, background jobs, rake tasks, etc)\n- Splits load time (Rails eager load) and Run time metrics\n- Easy to understand actionable insights from the report\n- Tracks Gem usage (still in experimental stages and not recommended for production)\n- Development mode, offers deep insight of code usage details (number of LOC execution during single request, etc) during development.\n- Mountable web interface to easily share reports\n\n# Installation\n\n## Redis\n\nCoverband stores coverage data in Redis. The Redis endpoint is looked for in this order:\n\n1. `ENV[\'COVERBAND_REDIS_URL\']`\n2. `ENV[\'REDIS_URL\']`\n3. `localhost`\n\nThe redis store can also be explicitly defined within the coverband.rb. See [advanced config](#advanced-config).\n\n## Gem Installation\n\nAdd this line to your application\'s `Gemfile`, remember to `bundle install` after updating:\n\n```bash\ngem \'coverband\'\n```\n\nIf [tracking gem usage](#collecting-gem--library-usage), be sure to include coverband before other gems you would like to track.\n\n## Upgrading to Latest\n\n### No custom code or middleware required\n\nWith older versions of coverband, projects would report to redis using rack or sidekiq middleware. After coverband 4.0, this should no longer be required and could cause performance issues. Reporting to redis is now automatically done within a background thread with no custom code needed.\n\nSee [changelog](https://github.com/danmayer/coverband/blob/master/changes.md).\n\n## Rails\n\nThe Railtie integration means you shouldn\'t need to do anything else other than ensure coverband is required after rails within your Gemfile. The only exception to this is gem tracking of `Bundle.require` which depends on requiring coverband within the application.rb. See [Collecting Gem / Library Usage](https://github.com/danmayer/coverband#collecting-gem--library-usage).\n\n## Sinatra\n\nFor the best coverage you want this loaded as early as possible. I have been putting it directly in my `config.ru` but you could use an initializer, though you may end up missing some boot up coverage. To start collection require Coverband as early as possible.\n\n```ruby\nrequire \'coverband\'\nrequire File.dirname(__FILE__) + \'/config/environment\'\n\nuse Coverband::BackgroundMiddleware\nrun ActionController::Dispatcher.new\n```\n\n# Coverage Report\n\nCoverband comes with a mountable rack app for viewing reports. For Rails this can be done in `config/routes.rb` with:\n\n```ruby\nRails.application.routes.draw do\n  mount Coverband::Reporters::Web.new, at: \'/coverage\'\nend\n```\n\nBut don\'t forget to _protect your source code with proper authentication_. Something like this when using devise:\n\n```ruby\nRails.application.routes.draw do\n  authenticate :user, lambda { |u| u.admin? } do\n    mount Coverband::Reporters::Web.new, at: \'/coverage\'\n  end\nend\n```\n\nor you can enable basic auth by setting `ENV[\'COVERBAND_PASSWORD\']` or via your configuration `config.password = \'my_pass\'`\n\n### Coverband Web Endpoint\n\nThe web endpoint is a barebones endpoint that you can either expose direct (after authentication) or you can just link to the actions you wish to expose. The index is intended as a example to showcase all the features.\n\n![image](https://raw.github.com/danmayer/coverband/master/docs/coverband_web_ui.png)\n\n> The web index as available on the Coverband Demo site\n\n- **force coverage collection:** This triggers coverage collection on the current webserver process\n- **clear coverage report:** This will clear the coverage data. This wipes out all collected data (**dangerous**)\n- View individual file details\n- **clear individual file coverage:** This will clear the details of the file you are looking at. This is helpful if you don\'t want to lose all Coverage data but made a change that you expect would impact a particular file.\n\n### Rake Tasks\n\nThe rake task generates a report locally and opens a browser pointing to `coverage/index.html`.\n\n`rake coverband:coverage`\n\nThis is mostly useful in your local development environment.\n\n##### Example Output\n\nSince Coverband is [Simplecov](https://github.com/colszowka/simplecov) output compatible it should work with any of the `SimpleCov::Formatter`\'s available. The output below is produced using the default Simplecov HTML formatter.\n\nIndex Page\n![image](https://raw.github.com/danmayer/coverband/master/docs/coverband_index.png)\n\nDetails on an example Sinatra app\n![image](https://raw.github.com/danmayer/coverband/master/docs/coverband_details.png)\n\n# Coverband Demo\n\nTake Coverband for a spin on the live Heroku deployed [Coverband Demo](https://coverband-demo.herokuapp.com/). The [full source code for the demo](https://github.com/danmayer/coverband_demo) is available to help with installation, configuration, and understanding of basic usage.\n\n### Example apps\n\n- [Rails 5.2.x App](https://github.com/danmayer/coverband_demo)\n- [Sinatra app](https://github.com/danmayer/churn-site)\n- [Non Rack Ruby app](https://github.com/danmayer/coverband_examples)\n\n# Advanced Config\n\nIf you need to configure coverband, this can be done by creating a `config/coverband.rb` file relative to your project root.\n\n- See [lib/coverband/configuration.rb](https://github.com/danmayer/coverband/blob/master/lib/coverband/configuration.rb) for all options\n- By default Coverband will try to stored data to Redis \\* Redis endpoint is looked for in this order: `ENV[\'COVERBAND_REDIS_URL\']`, `ENV[\'REDIS_URL\']`, or `localhost`\n\nBelow is an example config file for a Rails 5 app:\n\n```ruby\n#config/coverband.rb\nCoverband.configure do |config|\n  config.store = Coverband::Adapters::RedisStore.new(Redis.new(url: ENV[\'MY_REDIS_URL\']))\n  config.logger = Rails.logger\n  # configure S3 integration\n  config.s3_bucket = \'coverband-demo\'\n  config.s3_region = \'us-east-1\'\n  config.s3_access_key_id = ENV[\'AWS_ACCESS_KEY_ID\']\n  config.s3_secret_access_key = ENV[\'AWS_SECRET_ACCESS_KEY\']\n\n  # config options false, true. (defaults to false)\n  # true and debug can give helpful and interesting code usage information\n  # and is safe to use if one is investigating issues in production, but it will slightly\n  # hit perf.\n  config.verbose = false\n\n  # default false. button at the top of the web interface which clears all data\n  config.web_enable_clear = true\n\n  # default false. Experimental support for tracking view layer tracking.\n  # Does not track line-level usage, only indicates if an entire file\n  # is used or not.\n  config.track_views = true\nend\n```\n\n### Working with environment variables\n\nDo you use figaro, mc-settings, dotenv or something else to inject environment variables into your app? If so ensure you have that done BEFORE coverband is required. \n\nFor example if you use dotenv, you need to do this, see https://github.com/bkeepers/dotenv#note-on-load-order\n\n```\ngem \'dotenv-rails\', require: \'dotenv/rails-now\'\ngem \'coverband\'\ngem \'other-gem-that-requires-env-variables\'\n```\n\n### Ignoring Files\n\nSometimes you have files that are known to be valuable perhaps in other environments or something that is just run very infrequently. Opposed to having to mentally filter them out of the report, you can just have them ignored in the Coverband reporting by using `config.ignore` as shown below. Ignore takes a string but can also match with regex rules see how below ignores all rake tasks as an example.\n\n```\nconfig.ignore +=  [\'config/application.rb\',\n                   \'config/boot.rb\',\n                   \'config/puma.rb\',\n                   \'config/schedule.rb\',\n                   \'bin/*\',\n                   \'config/environments/*\',\n                   \'lib/tasks/*\']\n```\n\n### View Tracking\n\nCoverband allows an optional feature to track all view files that are used by an application.\n\nTo opt-in to this feature... enable the feature in your Coverband config.\n\n`config.track_views = true`\n\n![image](https://raw.github.com/danmayer/coverband/master/docs/coverband_view_tracker.png)\n\n### Writing Coverband Results to S3\n\nIf you add some additional Coverband configuration your coverage html report will be written directly to S3, update `config/coverband.rb` like below.\n\n```\n  # configure S3 integration\n  config.s3_bucket = \'coverband-demo\'\n  config.s3_region = \'us-east-1\'\n  config.s3_access_key_id = ENV[\'AWS_ACCESS_KEY_ID\']\n  config.s3_secret_access_key = ENV[\'AWS_SECRET_ACCESS_KEY\']\n```\n\nAlternatively, Coverband if you don\'t set via the `config.s3_*` accessor methods will look for the standard S3 environment variables.\n\n```\nENV[\'AWS_BUCKET\']\nENV[\'AWS_REGION\']\nENV[\'AWS_ACCESS_KEY_ID\']\nENV[\'AWS_SECRET_ACCESS_KEY\']\n```\n\n### Avoiding Cache Stampede\n\nIf you have many servers and they all hit Redis at the same time you can see spikes in your Redis CPU, and memory. This is do to a concept called [cache stampede](https://en.wikipedia.org/wiki/Cache_stampede). It is better to spread out the reporting across your servers. A simple way to do this is to add a random wiggle on your background reporting. This configuration option allows a wiggle. The right amount of wiggle depends on the numbers of servers you have and how willing you are to have delays in your coverage reporting. I would recommend at least 1 second per server. \n\nAdd a wiggle (in seconds) to the background thread to avoid all your servers reporting at the same time:\n\n`config.reporting_wiggle = 30`\n\n### Redis Hash Store\n\nCoverband on very high volume sites with many server processes reporting can have a race condition. To resolve the race condition and reduce Ruby memory overhead we have introduced a new Redis storage option. This moves the some of the work from the Ruby processes to Redis. It is worth noting because of this, it has a larger demands on the Redis server. So adjust your Redis instance accordingly. To help reduce the extra redis load you can also change the background reporting time period. \n\n* set the new Redis store: `config.store = Coverband::Adapters::HashRedisStore.new(Redis.new(url: redis_url))`\n* adjust from default 30s reporting `config.background_reporting_sleep_seconds = 120`\n* reminder it is recommended to have a unique Redis per workload (background jobs, caching, Coverband), for this store, it may be more important to have a dedicated Redis.\n\n### Clear Coverage\n\nNow that Coverband uses MD5 hashes there should be no reason to manually clear coverage unless one is testing, changing versions, possibly debugging Coverband itself.\n\n`rake coverband:clear`\n\n### Coverage Data Migration\n\nBetween the release of 4.0 and 4.1 our data format changed. This resets all your coverage data. If you want to restore your previous coverage data, feel free to migrate.\n\n`rake coverband:migrate`\n\n- We will be working to support migrations going forward, when possible\n\n### Adding Rake Tasks outside of Rails\n\nRails apps should automaticallly include the tasks via the Railtie.\n\nFor non Rails apps, either add the below to your `Rakefile` or to a file included in your `Rakefile` such as `lib/tasks/coverband.rake` if you want to break it up that way.\n\n```ruby\nrequire \'coverband\'\nCoverband.configure\nrequire \'coverband/utils/tasks\'\n```\n\nVerify it works\n\n```bash\nrake -T coverband\nrake coverband:clear         # reset coverband coverage data\nrake coverband:coverage      # report runtime coverband code coverage\n```\n\n### Collecting Gem / Library Usage\n\n__WARNING:__ Gem Tracking is still in experimental stages and not recommended for production. We have some performance issues when view reports on large applications. Gem tracing also during background thread data collection has HIGH memory requirements, during report merging (seemingly around 128mb of extra memory, which is crazy). We recommend deploying WITHOUT `track_gems` first and only enabling it after confirming that Coverband is working and performing well.\n\nGem usage can be tracked by enabling the `track_gems` config.\n\n```\nCoverband.configure do |config|\n  config.track_gems = true\nend\n```\n\nThe `track_gems` feature exposes a Gems tab in the report which prints out the percentage usage of each Gem. See demo [here](https://coverband-demo.herokuapp.com/coverage?#_Gems).\n\nWhen tracking gems, it is important that `Coverband#start` is called before the gems to be tracked are required. The best way to do this is to require coverband before Bundle.require is called. Within rails, require coverband within the application.rb like so:\n\n```ruby\nrequire \'coverband\'\nBundler.require(*Rails.groups)\n```\n\nIf you are using the resque integration, resque needs to be required before coverband since the integration will not run unless resque is loaded. Within the application.rb just require resque before coverband.\n\n```ruby\nrequire \'resque\'\nrequire \'coverband\'\nBundler.require(*Rails.groups)\n```\n\nThe track_gems config only exposes the overall usage of a gem. In order to see the detail of each file, enable the `gem_details` flag.\n\n```\nCoverband.configure do |config|\n  config.track_gems = true\n  config.gem_details = true\nend\n```\n\nThis flag exposes line by line usage of gem files. Unfortunately due to the way the coverband report is currently rendered, enabling `gem_details` slows down viewing of the coverage report in the browser and is not yet recommended.\n\n### Manually Starting Coverband\n\nCoverband starts on require of the the library which is usually done within the Gemfile. This can be disabled by setting the `COVERBAND_DISABLE_AUTO_START` environment variable. This environment variable can be useful to toggle coverband on and off in certain environments.\n\nIn order to start coverband manually yourself when this flag is enabled, call `Coverband.configure` followed by `Coverband.start`.\n\n```ruby\nCoverband.configure\nCoverband.start\n```\n\n### Verbose Debug / Development Mode\n\nNote: To debug issues getting Coverband working. I recommend running in development mode, by turning verbose logging on `config.verbose = true` and passing in the Rails.logger `config.logger = Rails.logger` to the Coverband config. We respect the log level, and I would recommend log level info generally, but if you are investigating a prolbem Coverband logs additional data at the `debug` level. This makes it easy to follow in development mode. Be careful to not leave these on in production as they will affect performance.\n\n---\n\nIf you are trying to debug locally wondering what code is being run during a request. The verbose modes `config.verbose = true` && `Rails.logger.level = :debug`. With true set it will output the number of lines executed per file, to the passed in log.\n\n# Prerequisites\n\n- Coverband 3.0.X+ requires Ruby 2.3+\n- Coverband currently requires Redis for production usage\n\n### Ruby and Rails Version Support\n\nWe will match Heroku & Ruby\'s support lifetime, supporting the last 3 major Ruby releases. For details see [supported runtimes](https://devcenter.heroku.com/articles/ruby-support#supported-runtimes). \n\nFor Rails, we will follow the policy of the [Rails team maintenance policy](https://guides.rubyonrails.org/maintenance_policy.html). We officially support the last two major release versions, while providing minimal support (major bugs / security fixes) for an additional version. This means at the moment we primaryly target Rails 6.x, 5.x, and will try to keep current functionality working for Rails 4.x but may release new features that do not work on that target.\n\n# Contributing To Coverband\n\nIf you are working on adding features, PRs, or bugfixes to Coverband this section should help get you going.\n\n1. Fork it\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am \'Add some feature\'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Make sure all tests are passing (run `bundle install`, make sure Redis is running, and then execute `rake test`)\n6. Create new Pull Request\n\n### Tests & Benchmarks\n\nIf you submit a change please make sure the tests and benchmarks are passing.\n\n- run tests:\n  - `bundle exec rake`\n  - `BUNDLE_GEMFILE=Gemfile.rails4 bundle exec rake` (Same tests using rails 4 instead of 5)\n- view test coverage: `open coverage/index.html`\n- run the benchmarks before and after your change to see impact\n  - `rake benchmarks`\n  - run a single test by line number like rspec: `bundle exec m test/coverband/reporters/html_test.rb:29`\n\n### Known Issues\n\n- **total fail** on front end code, for line for line coverage, because of the precompiled template step basically coverage doesn\'t work well for `erb`, `slim`, and the like.\n  - related it will try to report something, but the line numbers reported for `ERB` files are often off and aren\'t considered useful. I recommend filtering out .erb using the `config.ignore` option. The default configuration excludes these files\n  - **NOTE:** We now have file level coverage for view files, but don\'t support line level detail\n  - The view file detection doesn\'t workf or mailers at the moment only for web related views / JSON templates. This is due to how Rails active mailer notifications work. \n\n### Debugging Redis Store\n\nWhat files have been synced to Redis?\n\n`Coverband.configuration.store.covered_files`\n\nWhat is the coverage data in Redis?\n\n`Coverband.configuration.store.coverage`\n\n## Logo\n\nThe Coverband logo was created by [Dave Woodall](http://davewoodall.com). Thanks Dave!\n\n# License\n\nThis is a MIT License project...\nSee the file license.txt for copying permission.\n'