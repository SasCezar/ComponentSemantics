b'![Spina CMS](http://www.spinacms.com/spinacms.png)\n\n[Visit the website](http://www.spinacms.com)\n\n[![Build Status](https://travis-ci.com/SpinaCMS/Spina.svg?branch=master)](https://travis-ci.com/SpinaCMS/Spina)\n[![Code Climate](https://codeclimate.com/github/SpinaCMS/Spina/badges/gpa.svg)](https://codeclimate.com/github/SpinaCMS/Spina)\n[![Test Coverage](https://codeclimate.com/github/SpinaCMS/Spina/badges/coverage.svg)](https://codeclimate.com/github/SpinaCMS/Spina/coverage)\n[![Slack](https://slack-spinacms.herokuapp.com/badge.svg)](https://slack-spinacms.herokuapp.com)\n\n[![View performance data on Skylight](https://badges.skylight.io/status/0kzPHGlfswAw.svg)](https://oss.skylight.io/app/applications/0kzPHGlfswAw)\n[![View performance data on Skylight](https://badges.skylight.io/problem/0kzPHGlfswAw.svg)](https://oss.skylight.io/app/applications/0kzPHGlfswAw)\n[![View performance data on Skylight](https://badges.skylight.io/typical/0kzPHGlfswAw.svg)](https://oss.skylight.io/app/applications/0kzPHGlfswAw)\n\n# Getting Started\n\nSpina is a CMS for Rails 6.0. This guide is designed for developers with experience using Ruby on Rails.\n\nTo start using Spina CMS add the following line to your Gemfile:\n\n```ruby\ngem \'spina\'\n```\n\nFirst run the installer to get started:\n\n    rails g spina:install\n\nThe installer will help you setup your first user.\n\nThen start `rails s` and access Spina at `/admin`.\n\n## Upgrading from 0.X to 1.0\n\nBecause upgrading 1.0 means switching to ActiveStorage, we\'ve created a complementary gem to make the upgrade process easier.\n\n`gem \'spina-upgrade\', git: \'https://github.com/SpinaCMS/spina-upgrade\'`\n\nAfter installing this gem, make sure you setup ActiveStorage. Then you can run the upgrade command to migrate all `Spina::Photo` records to `Spina::Image`. Images will be reuploaded using ActiveStorage, so depending on your storage this could take a while.\n\n`rails g spina:upgrade`\n\nReplace `Spina::Photo` with `Spina::Image` where necessary and make sure that you edit every `image_tag`.\n\n## Upgrading from 0.12 to 0.12.1\n\nFirst run the new migrations\n\n    rails spina:install:migrations\n    rails db:migrate\n\nThis will create a table for the `Spina::Resource` model.\n\nGlobalize is replaced by Mobility. Switching to Mobility is fairly straightfoward.\n- Run `rails g spina:install` to add the `mobility.rb` initializer.\n- Replace instances of `Globalize` with `Mobility` in your own code\n\nThis is the last release before Spina switches to Rails 5.2 and ActiveStorage.\n\n## Upgrading from 0.11 to 0.12\n\nJust run the new migrations.\n\n    rails spina:install:migrations\n    rails db:migrate\n\n## Upgrading from 0.10 to 0.11\n\nThe spina-template gem is merged into the spina gem. You don\'t have to use the original spina-template gem anymore.\n\n## Upgrading from 0.9 to 0.10\n\nWhen upgrading to Spina 0.10 it\'s essential to update spina-template to version 0.4 or higher. Otherwise layout issues will occur.\n\n## Upgrading from 0.8 to 0.9\n\nTheme configuration changed to:\n\n```ruby\n# config/initializers/themes/default.rb\nSpina::Theme.register do |theme|\n# Theme config\nend\n```\n\nAnd theme sections, structures, layouts, view_layouts and layout_parts\nhas been normalised.\n\nCheck out [config/initializers/themes/demo.rb](https://github.com/denkGroot/Spina/blob/master/lib/generators/spina/templates/config/initializers/themes/demo.rb) for an example.\n\nAdd new migrations `rake spina:install:migrations` and `rake db:migrate`\n\n## Upgrading from 0.7 to 0.8\n\nSpina-specific configuration moved from `Spina::Engine.config` to just `Spina.config`.\nChange the following in your initializer:\n\n```ruby\n# config/initializers/spina.rb\n\nSpina::Engine.configure do |config| # OLD\nSpina.configure do |config| # NEW\n```\n\n# Basics\n\nThe installer generates a few initializers that contain necessary configuration for Spina.\n\nIn the initializers folder there\'s a new folder named `themes`. Inside you will find a configuration file named `default.rb`. This file contains all of your theme-specific settings. You can define multiple Page parts, View templates and Custom pages.\n\n## Page parts\n\nA page in Spina has many Page parts. By default these page parts can be one of the following:\n\n- `Spina::Line`\n- `Spina::Text`\n- `Spina::Image`\n- `Spina::ImageCollection`\n- `Spina::Structure`\n- `Spina::Option`\n\nThese are the building blocks of your view templates. You can have an unlimited number of page parts in a page. We prefer to keep the number of parts to a minimum so that managing your pages won\'t become too complex.\n\nSpina uses an initializer to create the basic building blocks of your page. There are three steps to add a new building block or page part to your app:\n\n1. Set up a new page part in the initializer\n2. Set the new initializer into a view template\n3. Add it to the view\n\n#### Create a new page part\nWhen you install Spina, you will see the following in `config/initializers/themes/default.rb`\n\n```ruby\n::Spina::Theme.register do |theme|\n\n  theme.name = \'default\'\n  theme.title = \'Default Theme\'\n\n  theme.page_parts = [{\n    name:             \'content\',\n    title:            \'Content\',\n    partable_type:    \'Spina::Text\'\n  }]\n\n  theme.view_templates = [{\n    name:       \'homepage\',\n    title:      \'Homepage\',\n    page_parts: [\'content\']\n  }, {\n    name: \'show\',\n    title:        \'Default\',\n    description:  \'A simple page\',\n    usage:        \'Use for your content\',\n    page_parts:   [\'content\']\n  }]\n\n  theme.custom_pages = [{\n    name:           \'homepage\',\n    title:          \'Homepage\',\n    deletable:      false,\n    view_template:  \'homepage\'\n  }]\n\nend\n```\n\nRight now, the default theme is applying a title to the page, with a simple text div below it. Go to `/admin` on your app and have a look. Edit the textbox and go to preview the page.\n\nSpina represents each building block of your page, called a \'page part,\' as a hash inside the `page_parts` array. If we look at the default setup we can see there is one hash inside the array representing the one textbox we see on our page.\n\nLet\'s say I wanted to add another text box below this called `portfolio`. First I would add another hash to the `self.page_parts` array like so:\n\n```ruby\ntheme.page_parts = [{\n  name:             \'content\',\n  title:            \'Content\',\n  partable_type:    \'Spina::Text\'\n}, {\n  name:             \'portfolio\', # added this hash\n  title:            \'Portfolio\',\n  partable_type:    \'Spina::Text\'\n}]\n```\n\n#### Add it to the view template\n\nNow, we need to update the `self.view_templates` hash next. These view templates provide customization for the different views you might want. For example, you may have a \'blog\' view or an \'about\' view which add different page parts. For this example we will add the portfolio part into the \'Default\' view template.\n\n```ruby\ntheme.view_templates = [{\n  name:       \'homepage\',\n  title:      \'Homepage\',\n  page_parts: [\'content\']\n}, {\n  name:         \'show\',\n  title:        \'Default\',\n  description:  \'A simple page\',\n  usage:        \'Use for your content\',\n  page_parts:   [\'content\', \'portfolio\'] # added \'portfolio\'\n}]\n```\n\n#### Add it to the view\n\nFinally, let\'s go to `views/default/pages/show.html.erb` and add the following:\n\n```ruby\n<h1><%= @page.title %></h1>\n\n<%= @page.content(:text).try(:html_safe) %>\n<%= @page.content(:portfolio).try(:html_safe) %> # added this line\n```\n\nWe have successfully added another textbox! Restart your server and load up the admin section again. You should see another text box below the content box.\n\n## View templates\n\nEach theme typically has a few different view templates which make up your website. By default Spina generates a *homepage* and *show* template.\n\nThe views for these templates are stored in `app/views/default/pages`.\n\n## Navigations\n\nUsually managing a single list of pages is enough for most use cases. Sometimes however, you need a little more flexibility. This is where navigations come in. You can create multiple navigations which are basically different collections of your pages. You can choose to include all or just a few of your pages. You can also edit the order of pages per navigation.\n\nYou define navigations in your theme\'s config file:\n\n```ruby\n::Spina::Theme.register do |theme|\n  # ...\n\n  theme.navigations = [{\n    name: \'main\',\n    label: \'Main navigation\',\n    auto_add_pages: true\n  }, {\n    name: \'mobile\',\n    label: \'Mobile\'  \n  }]\n\n  # ...\nend\n```\n\n`auto_add_pages` ensures that each page that you create automatically gets added to this navigation.\n\nBesides navigations there\'s always a single overview of all pages. Your sitemap and friendly URLs are generated based on this overview.\n\nCreating navigations is optional.\n\n## Custom pages\n\nYou can define custom pages for your theme that will be generated when bootstrapping your website. You can define whether or not they\'re deletable. By default Spina creates a custom page named Homepage which is not deletable.\n\n# Contributing\n\nCheck our [Contributing Guide](CONTRIBUTING.md) for instructions on how to help the project.\n\n<a href="https://github.com/SpinaCMS/Spina/graphs/contributors"><img src="https://opencollective.com/Spina/contributors.svg?width=890" /></a>\n\n\n# Backers\n\nThank you to all our backers! \xf0\x9f\x99\x8f [[Become a backer](https://opencollective.com/Spina#backer)]\n\n<a href="https://opencollective.com/Spina#backers" target="_blank"><img src="https://opencollective.com/Spina/backers.svg?width=890"></a>\n\n\n# Sponsors\n\nSupport this project by becoming a sponsor. Your logo will show up here with a link to your website. [[Become a sponsor](https://opencollective.com/Spina#sponsor)]\n\n<a href="https://opencollective.com/Spina/sponsor/0/website" target="_blank"><img src="https://opencollective.com/Spina/sponsor/0/avatar.svg"></a>\n<a href="https://opencollective.com/Spina/sponsor/1/website" target="_blank"><img src="https://opencollective.com/Spina/sponsor/1/avatar.svg"></a>\n<a href="https://opencollective.com/Spina/sponsor/2/website" target="_blank"><img src="https://opencollective.com/Spina/sponsor/2/avatar.svg"></a>\n<a href="https://opencollective.com/Spina/sponsor/3/website" target="_blank"><img src="https://opencollective.com/Spina/sponsor/3/avatar.svg"></a>\n<a href="https://opencollective.com/Spina/sponsor/4/website" target="_blank"><img src="https://opencollective.com/Spina/sponsor/4/avatar.svg"></a>\n<a href="https://opencollective.com/Spina/sponsor/5/website" target="_blank"><img src="https://opencollective.com/Spina/sponsor/5/avatar.svg"></a>\n<a href="https://opencollective.com/Spina/sponsor/6/website" target="_blank"><img src="https://opencollective.com/Spina/sponsor/6/avatar.svg"></a>\n<a href="https://opencollective.com/Spina/sponsor/7/website" target="_blank"><img src="https://opencollective.com/Spina/sponsor/7/avatar.svg"></a>\n<a href="https://opencollective.com/Spina/sponsor/8/website" target="_blank"><img src="https://opencollective.com/Spina/sponsor/8/avatar.svg"></a>\n<a href="https://opencollective.com/Spina/sponsor/9/website" target="_blank"><img src="https://opencollective.com/Spina/sponsor/9/avatar.svg"></a>\n\n# License\n\nSpina is released under the [MIT license](LICENSE.md).\n\n# Credits\n\nSome parts of Spina are heavily influenced by the wonderful Refinery CMS. Credits to [the Refinery  team](https://www.refinerycms.com/).\n\nAll icons in Spina were made by Brent Jackson [Geomicons](http://jxnblk.com/geomicons-wired/).\n\nThe font used in Spina\'s admin panel is called Metropolis and was created by Chris Simpson [Metropolis](https://github.com/chrismsimpson/Metropolis)\n\n    Copyright (c) 2015, Chris Simpson <chris@victoryonemedia.com>.\n\n    This Font Software is licensed under the SIL Open Font License, Version 1.1.\n    This license is copied below, and is also available with a FAQ at:\n    http://scripts.sil.org/OFL\n\n    Version 2.0 - 18 March 2012'