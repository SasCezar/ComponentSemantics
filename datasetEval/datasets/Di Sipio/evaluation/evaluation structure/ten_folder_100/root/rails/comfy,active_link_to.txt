b'# active_link_to\n\nCreates a link tag of the given name using a URL created by the set of options. Please see documentation for [link_to](http://api.rubyonrails.org/classes/ActionView/Helpers/UrlHelper.html#method-i-link_to), as `active_link_to` is basically a wrapper for it. This method accepts an optional :active parameter that dictates if the given link will have an extra css class attached that marks it as \'active\'.\n\n[![Gem Version](https://img.shields.io/gem/v/active_link_to.svg?style=flat)](http://rubygems.org/gems/active_link_to)\n[![Gem Downloads](https://img.shields.io/gem/dt/active_link_to.svg?style=flat)](http://rubygems.org/gems/active_link_to)\n[![Build Status](https://img.shields.io/travis/comfy/active_link_to.svg?style=flat)](https://travis-ci.org/comfy/active_link_to)\n[![Gitter](https://badges.gitter.im/comfy/comfortable-mexican-sofa.svg)](https://gitter.im/comfy/comfortable-mexican-sofa)\n\n## Install\nWhen installing for Rails 3/4/5 applications add this to the Gemfile: `gem \'active_link_to\'` and run `bundle install`.\n\nFor older Rails apps add `config.gem \'active_link_to\'` in config/environment.rb and run `rake gems:install`. Or just checkout this repo into /vendor/plugins directory.\n\n## Super Simple Example\nHere\'s a link that will have a class attached if it happens to be rendered\non page with path `/users` or any child of that page, like `/users/123`\n\n```ruby\nactive_link_to \'Users\', \'/users\'\n# => <a href="/users" class="active">Users</a>\n```\n\nThis is exactly the same as:\n\n```ruby\nactive_link_to \'Users\', \'/users\', active: :inclusive\n# => <a href="/users" class="active">Users</a>\n```\n\n## Active Options\nHere\'s a list of available options that can be used as the `:active` value\n\n```\n* Boolean                         -> true | false\n* Symbol                          -> :exclusive | :inclusive | :exact\n* Regex                           -> /regex/\n* Controller/Action Pair          -> [[:controller], [:action_a, :action_b]]\n* Controller/Specific Action Pair -> [controller: :action_a, controller_b: :action_b]\n* Hash                            -> { param_a: 1, param_b: 2 }\n```\n\n## More Examples\nMost of the functionality of `active_link_to` depends on the current\nurl. Specifically, `request.original_fullpath` value. We covered the basic example\nalready, so let\'s try something more fun.\n\nWe want to highlight a link that matches immediate url, but not the children\nnodes. Most commonly used for \'home\' links.\n\n```ruby\n# For URL: /users will be active\nactive_link_to \'Users\', users_path, active: :exclusive\n# => <a href="/users" class="active">Users</a>\n```\n\n```ruby\n# But for URL: /users/123 it will not be active\nactive_link_to \'Users\', users_path, active: :exclusive\n# => <a href="/users">Users</a>\n```\n\nIf we need to set link to be active based on some regular expression, we can do\nthat as well. Let\'s try to activate links urls of which begin with \'use\':\n\n```ruby\nactive_link_to \'Users\', users_path, active: /^\\/use/\n```\n\nIf we need to set link to be active based on an exact match, for example on\nfilter made via a query string, we can do that as well:\n\n```ruby\nactive_link_to \'Users\', users_path(role_eq: \'admin\'), active: :exact\n```\n\nWhat if we need to mark link active for all URLs that match a particular controller,\nor action, or both? Or any number of those at the same time? Sure, why not:\n\n```ruby\n# For matching multiple controllers and actions:\nactive_link_to \'User Edit\', edit_user_path(@user), active: [[\'people\', \'news\'], [\'show\', \'edit\']]\n\n# For matching specific controllers and actions:\nactive_link_to \'User Edit\', edit_user_path(@user), active: [people: :show, news: :edit]\n\n# for matching all actions under given controllers:\nactive_link_to \'User Edit\', edit_user_path(@user), active: [[\'people\', \'news\'], []]\n\n# for matching all controllers for a particular action\nactive_link_to \'User Edit\', edit_user_path(@user), active: [[], [\'edit\']]\n```\n\nSometimes it should be as easy as giving link true or false value:\n\n```ruby\nactive_link_to \'Users\', users_path, active: true\n```\n\nIf we need to set link to be active based on `params`, we can do that as well:\n\n```ruby\nactive_link_to \'Admin users\', users_path(role_eq: \'admin\'), active: { role_eq: \'admin\' }\n```\n\n## More Options\nYou can specify active and inactive css classes for links:\n\n```ruby\nactive_link_to \'Users\', users_path, class_active: \'enabled\'\n# => <a href="/users" class="enabled">Users</a>\n\nactive_link_to \'News\', news_path, class_inactive: \'disabled\'\n# => <a href="/news" class="disabled">News</a>\n```\n\nSometimes you want to replace link tag with a span if it\'s active:\n\n```ruby\nactive_link_to \'Users\', users_path, active_disable: true\n# => <span class="active">Users</span>\n```\n\nIf you are constructing navigation menu it might be helpful to wrap links in another tag, like `<li>`:\n\n```ruby\nactive_link_to \'Users\', users_path, wrap_tag: :li\n# => <li class="active"><a href="/users">Users</a></li>\n```\n\nYou can specify css classes for the `wrap_tag`:\n\n```ruby\nactive_link_to \'Users\', users_path, wrap_tag: :li, wrap_class: \'nav-item\'\n# => <li class="nav-item active"><a href="/users">Users</a></li>\n```\n\n## Helper Methods\nYou may directly use methods that `active_link_to` relies on.\n\n`is_active_link?` will return true or false based on the URL and value of the `:active` parameter:\n\n```ruby\nis_active_link?(users_path, :inclusive)\n# => true\n```\n\n`active_link_to_class` will return the css class:\n\n```\nactive_link_to_class(users_path, active: :inclusive)\n# => \'active\'\n```\n\n### Copyright\n\nCopyright (c) 2009-18 Oleg Khabarov. See LICENSE for details.\n'