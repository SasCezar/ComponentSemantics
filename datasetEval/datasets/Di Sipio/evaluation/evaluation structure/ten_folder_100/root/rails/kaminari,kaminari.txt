b'# Kaminari [![Build Status](https://travis-ci.org/kaminari/kaminari.svg)](http://travis-ci.org/kaminari/kaminari) [![Code Climate](https://codeclimate.com/github/kaminari/kaminari/badges/gpa.svg)](https://codeclimate.com/github/kaminari/kaminari) [![Inch CI](http://inch-ci.org/github/kaminari/kaminari.svg)](http://inch-ci.org/github/kaminari/kaminari)\n\nA Scope & Engine based, clean, powerful, customizable and sophisticated paginator for modern web app frameworks and ORMs\n\n## Features\n\n### Clean\nDoes not globally pollute `Array`, `Hash`, `Object` or `AR::Base`.\n\n### Easy to Use\nJust bundle the gem, then your models are ready to be paginated.\nNo configuration required.\nDon\'t have to define anything in your models or helpers.\n\n### Simple Scope-based API\nEverything is method chainable with less "Hasheritis". You know, that\'s the modern Rails way.\nNo special collection class or anything for the paginated values, instead using a general `AR::Relation` instance.\nSo, of course you can chain any other conditions before or after the paginator scope.\n\n### Customizable Engine-based I18n-aware Helpers\nAs the whole pagination helper is basically just a collection of links and non-links, Kaminari renders each of them through its own partial template inside the Engine.\nSo, you can easily modify their behaviour, style or whatever by overriding partial templates.\n\n### ORM & Template Engine Agnostic\nKaminari supports multiple ORMs (ActiveRecord, DataMapper, Mongoid, MongoMapper) multiple web frameworks (Rails, Sinatra, Grape), and multiple template engines (ERB, Haml, Slim).\n\n### Modern\nThe pagination helper outputs the HTML5 `<nav>` tag by default. Plus, the helper supports Rails unobtrusive Ajax.\n\n\n## Supported Versions\n\n* Ruby 2.0.0, 2.1.x, 2.2.x, 2.3.x, 2.4.x, 2.5.x, 2.6.x, 2.7\n\n* Rails 4.1, 4.2, 5.0, 5.1, 5.2, 6.0\n\n* Sinatra 1.4, 2.0\n\n* Haml 3+\n\n* Mongoid 3+\n\n* MongoMapper 0.9+\n\n* DataMapper 1.1.0+\n\n\n## Installation\n\nTo install kaminari on the default Rails stack, just put this line in your Gemfile:\n\n```ruby\ngem \'kaminari\'\n```\n\nThen bundle:\n\n```sh\n% bundle\n```\n\nIf you\'re building non-Rails of non-ActiveRecord app and want the pagination feature on it, please take a look at [Other Framework/Library Support](#other-frameworklibrary-support) section.\n\n\n## Query Basics\n\n### The `page` Scope\n\nTo fetch the 7th page of users (default `per_page` is 25)\n\n```ruby\nUser.page(7)\n```\n\nNote: pagination starts at page 1, not at page 0 (page(0) will return the same results as page(1)).\n\nYou can get page numbers or page conditions by using below methods.\n```ruby\nUser.count                     #=> 1000\nUser.page(1).limit_value       #=> 20\nUser.page(1).total_pages       #=> 50\nUser.page(1).current_page      #=> 1\nUser.page(1).next_page         #=> 2\nUser.page(2).prev_page         #=> 1\nUser.page(1).first_page?       #=> true\nUser.page(50).last_page?       #=> true\nUser.page(100).out_of_range?   #=> true\n```\n\n### The `per` Scope\n\nTo show a lot more users per each page (change the `per_page` value)\n\n```ruby\nUser.page(7).per(50)\n```\n\nNote that the `per` scope is not directly defined on the models but is just a method defined on the page scope.\nThis is absolutely reasonable because you will never actually use `per_page` without specifying the `page` number.\n\nKeep in mind that `per` internally utilizes `limit` and so it will override any `limit` that was set previously.\nAnd if you want to get the size for all request records you can use `total_count` method:\n\n```ruby\nUser.count                     #=> 1000\na = User.limit(5); a.count     #=> 5\na.page(1).per(20).size         #=> 20\na.page(1).per(20).total_count  #=> 1000\n```\n\n### The `padding` Scope\n\nOccasionally you need to pad a number of records that is not a multiple of the page size.\n\n```ruby\nUser.page(7).per(50).padding(3)\n```\n\nNote that the `padding` scope also is not directly defined on the models.\n\n### Unscoping\n\nIf for some reason you need to unscope `page` and `per` methods you can call `except(:limit, :offset)`\n\n```ruby\nusers = User.page(7).per(50)\nunpaged_users = users.except(:limit, :offset) # unpaged_users will not use the kaminari scopes\n```\n\n## Configuring Kaminari\n\n### General Configuration Options\n\nYou can configure the following default values by overriding these values using `Kaminari.configure` method.\n\n    default_per_page      # 25 by default\n    max_per_page          # nil by default\n    max_pages             # nil by default\n    window                # 4 by default\n    outer_window          # 0 by default\n    left                  # 0 by default\n    right                 # 0 by default\n    page_method_name      # :page by default\n    param_name            # :page by default\n    params_on_first_page  # false by default\n\nThere\'s a handy generator that generates the default configuration file into config/initializers directory.\nRun the following generator command, then edit the generated file.\n\n```sh\n% rails g kaminari:config\n```\n\n### Changing `page_method_name`\n\nYou can change the method name `page` to `bonzo` or `plant` or whatever you like, in order to play nice with existing `page` method or association or scope or any other plugin that defines `page` method on your models.\n\n\n### Configuring Default per_page Value for Each Model by `paginates_per`\n\nYou can specify default `per_page` value per each model using the following declarative DSL.\n\n```ruby\nclass User < ActiveRecord::Base\n  paginates_per 50\nend\n```\n\n### Configuring Max per_page Value for Each Model by `max_paginates_per`\n\nYou can specify max `per_page` value per each model using the following declarative DSL.\nIf the variable that specified via `per` scope is more than this variable, `max_paginates_per` is used instead of it.\nDefault value is nil, which means you are not imposing any max `per_page` value.\n\n```ruby\nclass User < ActiveRecord::Base\n  max_paginates_per 100\nend\n```\n\n\n## Controllers\n\n### The Page Parameter Is in `params[:page]`\n\nTypically, your controller code will look like this:\n\n```ruby\n@users = User.order(:name).page params[:page]\n```\n\n\n## Views\n\n### The Same Old Helper Method\n\nJust call the `paginate` helper:\n\n```erb\n<%= paginate @users %>\n```\n\nThis will render several `?page=N` pagination links surrounded by an HTML5 `<nav>` tag.\n\n\n## Helpers\n\n### The `paginate` Helper Method\n\n```erb\n<%= paginate @users %>\n```\n\nThis would output several pagination links such as `\xc2\xab First \xe2\x80\xb9 Prev ... 2 3 4 5 6 7 8 9 10 ... Next \xe2\x80\xba Last \xc2\xbb`\n\n### Specifying the "inner window" Size (4 by default)\n\n```erb\n<%= paginate @users, window: 2 %>\n```\n\nThis would output something like `... 5 6 7 8 9 ...` when 7 is the current\npage.\n\n### Specifying the "outer window" Size (0 by default)\n\n```erb\n<%= paginate @users, outer_window: 3 %>\n```\n\nThis would output something like `1 2 3 ...(snip)... 18 19 20` while having 20 pages in total.\n\n### Outer Window Can Be Separately Specified by left, right (0 by default)\n\n```erb\n<%= paginate @users, left: 1, right: 3 %>\n```\n\nThis would output something like `1 ...(snip)... 18 19 20` while having 20 pages in total.\n\n### Changing the Parameter Name (`:param_name`) for the Links\n\n```erb\n<%= paginate @users, param_name: :pagina %>\n```\n\nThis would modify the query parameter name on each links.\n\n### Extra Parameters (`:params`) for the Links\n\n```erb\n<%= paginate @users, params: {controller: \'foo\', action: \'bar\'} %>\n```\n\nThis would modify each link\'s `url_option`. :`controller` and :`action` might be the keys in common.\n\n### Ajax Links (crazy simple, but works perfectly!)\n\n```erb\n<%= paginate @users, remote: true %>\n```\n\nThis would add `data-remote="true"` to all the links inside.\n\n### Specifying an Alternative Views Directory (default is kaminari/)\n\n```erb\n<%= paginate @users, views_prefix: \'templates\' %>\n```\n\nThis would search for partials in `app/views/templates/kaminari`.\nThis option makes it easier to do things like A/B testing pagination templates/themes, using new/old templates at the same time as well as better integration with other gems such as [cells](https://github.com/apotonick/cells).\n\n### The `link_to_next_page` and `link_to_previous_page` (aliased to `link_to_prev_page`) Helper Methods\n\n```erb\n<%= link_to_next_page @items, \'Next Page\' %>\n```\n\nThis simply renders a link to the next page. This would be helpful for creating a Twitter-like pagination feature.\n\n### The `page_entries_info` Helper Method\n\n```erb\n<%= page_entries_info @posts %>\n```\n\nThis renders a helpful message with numbers of displayed vs. total entries.\n\nBy default, the message will use the humanized class name of objects in collection: for instance, "project types" for ProjectType models.\nThe namespace will be cut out and only the last name will be used. Override this with the `:entry_name` parameter:\n\n```erb\n<%= page_entries_info @posts, entry_name: \'item\' %>\n#=> Displaying items 6 - 10 of 26 in total\n```\n\n### The `rel_next_prev_link_tags` Helper Method\n\n```erb\n<%= rel_next_prev_link_tags @users %>\n```\n\nThis renders the rel next and prev link tags for the head.\n\n### The `path_to_next_page` Helper Method\n\n```erb\n<%= path_to_next_page @users %>\n```\n\nThis returns the server relative path to the next page.\n\n### The `path_to_prev_page` Helper Method\n\n```erb\n<%= path_to_prev_page @users %>\n```\n\nThis returns the server relative path to the previous page.\n\n\n## I18n and Labels\n\nThe default labels for \'first\', \'last\', \'previous\', \'...\' and \'next\' are stored in the I18n yaml inside the engine, and rendered through I18n API.\nYou can switch the label value per I18n.locale for your internationalized application.  Keys and the default values are the following. You can override them by adding to a YAML file in your `Rails.root/config/locales` directory.\n\n```yaml\nen:\n  views:\n    pagination:\n      first: "&laquo; First"\n      last: "Last &raquo;"\n      previous: "&lsaquo; Prev"\n      next: "Next &rsaquo;"\n      truncate: "&hellip;"\n  helpers:\n    page_entries_info:\n      one_page:\n        display_entries:\n          zero: "No %{entry_name} found"\n          one: "Displaying <b>1</b> %{entry_name}"\n          other: "Displaying <b>all %{count}</b> %{entry_name}"\n      more_pages:\n        display_entries: "Displaying %{entry_name} <b>%{first}&nbsp;-&nbsp;%{last}</b> of <b>%{total}</b> in total"\n```\n\nIf you use non-English localization see [i18n rules](https://github.com/svenfuchs/i18n/blob/master/test/test_data/locales/plurals.rb) for changing\n`one_page:display_entries` block.\n\n\n## Customizing the Pagination Helper\n\nKaminari includes a handy template generator.\n\n### To Edit Your Paginator\n\nRun the generator first,\n\n```sh\n% rails g kaminari:views default\n```\n\nthen edit the partials in your app\'s `app/views/kaminari/` directory.\n\n### For Haml/Slim Users\n\nYou can use the [html2haml gem](https://github.com/haml/html2haml) or the [html2slim gem](https://github.com/slim-template/html2slim) to convert erb templates.\nThe kaminari gem will automatically pick up haml/slim templates if you place them in `app/views/kaminari/`.\n\n### Multiple Templates\n\nIn case you need different templates for your paginator (for example public and admin), you can pass `--views-prefix directory` like this:\n\n```sh\n% rails g kaminari:views default --views-prefix admin\n```\n\nthat will generate partials in `app/views/admin/kaminari/` directory.\n\n### Themes\n\nThe generator has the ability to fetch several sample template themes from the external repository (https://github.com/amatsuda/kaminari_themes) in addition to the bundled "default" one, which will help you creating a nice looking paginator.\n\n```sh\n% rails g kaminari:views THEME\n```\n\nTo see the full list of available themes, take a look at the themes repository, or just hit the generator without specifying `THEME` argument.\n\n```sh\n% rails g kaminari:views\n```\n\n### Multiple Themes\n\nTo utilize multiple themes from within a single application, create a directory within the app/views/kaminari/ and move your custom template files into that directory.\n\n```sh\n% rails g kaminari:views default (skip if you have existing kaminari views)\n% cd app/views/kaminari\n% mkdir my_custom_theme\n% cp _*.html.* my_custom_theme/\n```\n\nNext, reference that directory when calling the `paginate` method:\n\n```erb\n<%= paginate @users, theme: \'my_custom_theme\' %>\n```\n\nCustomize away!\n\nNote: if the theme isn\'t present or none is specified, kaminari will default back to the views included within the gem.\n\n\n## Paginating Without Issuing SELECT COUNT Query\n\nGenerally the paginator needs to know the total number of records to display the links, but sometimes we don\'t need the total number of records and just need the "previous page" and "next page" links.\nFor such use case, Kaminari provides `without_count` mode that creates a paginatable collection without counting the number of all records.\nThis may be helpful when you\'re dealing with a very large dataset because counting on a big table tends to become slow on RDBMS.\n\nJust add `.without_count` to your paginated object:\n\n```ruby\nUser.page(3).without_count\n```\n\nIn your view file, you can only use simple helpers like the following instead of the full-featured `paginate` helper:\n\n```erb\n<%= link_to_prev_page @users, \'Previous Page\' %>\n<%= link_to_next_page @users, \'Next Page\' %>\n```\n\n\n## Paginating a Generic Array object\n\nKaminari provides an Array wrapper class that adapts a generic Array object to the `paginate` view helper. However, the `paginate` helper doesn\'t automatically handle your Array object (this is intentional and by design).\n`Kaminari::paginate_array` method converts your Array object into a paginatable Array that accepts `page` method.\n\n```ruby\n@paginatable_array = Kaminari.paginate_array(my_array_object).page(params[:page]).per(10)\n```\n\nYou can specify the `total_count` value through options Hash. This would be helpful when handling an Array-ish object that has a different `count` value from actual `count` such as RSolr search result or when you need to generate a custom pagination. For example:\n\n```ruby\n@paginatable_array = Kaminari.paginate_array([], total_count: 145).page(params[:page]).per(10)\n```\n\n\n## Creating Friendly URLs and Caching\n\nBecause of the `page` parameter and Rails routing, you can easily generate SEO and user-friendly URLs. For any resource you\'d like to paginate, just add the following to your `routes.rb`:\n\n```ruby\nresources :my_resources do\n  get \'page/:page\', action: :index, on: :collection\nend\n```\n\nIf you are using Rails 4 or later, you can simplify route definitions by using `concern`:\n\n```ruby\nconcern :paginatable do\n  get \'(page/:page)\', action: :index, on: :collection, as: \'\'\nend\n\nresources :my_resources, concerns: :paginatable\n```\n\nThis will create URLs like `/my_resources/page/33` instead of `/my_resources?page=33`. This is now a friendly URL, but it also has other added benefits...\n\nBecause the `page` parameter is now a URL segment, we can leverage on Rails page [caching](http://guides.rubyonrails.org/caching_with_rails.html#page-caching)!\n\nNOTE: In this example, I\'ve pointed the route to my `:index` action. You may have defined a custom pagination action in your controller - you should point `action: :your_custom_action` instead.\n\n\n## Other Framework/Library Support\n\n### The kaminari gem\n\nTechnically, the kaminari gem consists of 3 individual components:\n\n    kaminari-core: the core pagination logic\n    kaminari-activerecord: Active Record adapter\n    kaminari-actionview: Action View adapter\n\nSo, bundling `gem \'kaminari\'` is equivalent to the following 2 lines (kaminari-core is referenced from the adapters):\n\n```ruby\ngem \'kaminari-activerecord\'\ngem \'kaminari-actionview\'\n```\n\n### For Other ORM Users\n\nIf you want to use other supported ORMs instead of ActiveRecord, for example Mongoid, bundle its adapter instead of kaminari-activerecord.\n\n```ruby\ngem \'kaminari-mongoid\'\ngem \'kaminari-actionview\'\n```\n\nKaminari currently provides adapters for the following ORMs:\n\n* Active Record: https://github.com/kaminari/kaminari/tree/master/kaminari-activerecord  (included in this repo)\n* Mongoid: https://github.com/kaminari/kaminari-mongoid\n* MongoMapper: https://github.com/kaminari/kaminari-mongo_mapper\n* DataMapper: https://github.com/kaminari/kaminari-data_mapper  (would not work on kaminari 1.0.x)\n\n### For Other Web Framework Users\n\nIf you want to use other web frameworks instead of Rails + Action View, for example Sinatra, bundle its adapter instead of kaminari-actionview.\n\n```ruby\ngem \'kaminari-activerecord\'\ngem \'kaminari-sinatra\'\n```\n\nKaminari currently provides adapters for the following web frameworks:\n\n* Action View: https://github.com/kaminari/kaminari/tree/master/kaminari-actionview  (included in this repo)\n* Sinatra: https://github.com/kaminari/kaminari-sinatra\n* Grape: https://github.com/kaminari/kaminari-grape\n\n\n## For More Information\n\nCheck out Kaminari recipes on the GitHub Wiki for more advanced tips and techniques. https://github.com/kaminari/kaminari/wiki/Kaminari-recipes\n\n\n## Questions, Feedback\n\nFeel free to message me on Github (amatsuda) or Twitter ([@a_matsuda](https://twitter.com/a_matsuda))  \xe2\x98\x87\xe2\x98\x87\xe2\x98\x87  :)\n\n\n## Contributing to Kaminari\n\nFork, fix, then send a pull request.\n\nTo run the test suite locally against all supported frameworks:\n\n```sh\n% bundle install\n% rake test:all\n```\n\nTo target the test suite against one framework:\n\n```sh\n% rake test:active_record_50\n```\n\nYou can find a list of supported test tasks by running `rake -T`. You may also find it useful to run a specific test for a specific framework. To do so, you\'ll have to first make sure you have bundled everything for that configuration, then you can run the specific test:\n\n```sh\n% BUNDLE_GEMFILE=\'gemfiles/active_record_50.gemfile\' bundle install\n% BUNDLE_GEMFILE=\'gemfiles/active_record_50.gemfile\' TEST=kaminari-core/test/requests/navigation_test.rb bundle exec rake test\n```\n\n\n## Copyright\n\nCopyright (c) 2011- Akira Matsuda. See MIT-LICENSE for further details.\n'