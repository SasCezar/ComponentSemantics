b'# Settings for Rails\n\n[![Build Status](https://travis-ci.org/ledermann/rails-settings.svg?branch=master)](https://travis-ci.org/ledermann/rails-settings)\n[![Code Climate](https://codeclimate.com/github/ledermann/rails-settings.svg)](https://codeclimate.com/github/ledermann/rails-settings)\n[![Coverage Status](https://coveralls.io/repos/ledermann/rails-settings/badge.svg?branch=master)](https://coveralls.io/r/ledermann/rails-settings?branch=master)\n\nRuby gem to handle settings for ActiveRecord instances by storing them as serialized Hash in a separate database table. Namespaces and defaults included.\n\n## Requirements\n\n* Ruby 2.4 or newer\n* Rails 4.2 or newer (including Rails 6)\n\n\n## Installation\n\nInclude the gem in your Gemfile and run `bundle` to install it:\n\n```ruby\ngem \'ledermann-rails-settings\'\n```\n\nGenerate and run the migration:\n\n```shell\nrails g rails_settings:migration\nrake db:migrate\n```\n\n\n## Usage\n\n### Define settings\n\n```ruby\nclass User < ActiveRecord::Base\n  has_settings do |s|\n    s.key :dashboard, :defaults => { :theme => \'blue\', :view => \'monthly\', :filter => false }\n    s.key :calendar,  :defaults => { :scope => \'company\'}\n  end\nend\n```\n\nIf no defaults are needed, a simplified syntax can be used:\n\n```ruby\nclass User < ActiveRecord::Base\n  has_settings :dashboard, :calendar\nend\n```\n\nEvery setting is handled by the class `RailsSettings::SettingObject`. You can use your own class, e.g. for validations:\n\n```ruby\nclass Project < ActiveRecord::Base\n  has_settings :info, :class_name => \'ProjectSettingObject\'\nend\n\nclass ProjectSettingObject < RailsSettings::SettingObject\n  validate do\n    unless self.owner_name.present? && self.owner_name.is_a?(String)\n      errors.add(:base, "Owner name is missing")\n    end\n  end\nend\n```\n\nIn case you need to define settings separatedly for the same models, you can use the persistent option\n\n```ruby\nmodule UserDashboardConcern\n  extend ActiveSupport::Concern\n\n  included do\n    has_settings persistent: true do |s|\n      s.key :dashboard\n    end\n  end\nend\n\nclass User < ActiveRecord::Base\n  has_settings persistent: true do |s|\n    s.key :calendar\n  end\nend\n```\n\n### Set settings\n\n```ruby\nuser = User.find(1)\nuser.settings(:dashboard).theme = \'black\'\nuser.settings(:calendar).scope = \'all\'\nuser.settings(:calendar).display = \'daily\'\nuser.save! # saves new or changed settings, too\n```\n\nor\n\n```ruby\nuser = User.find(1)\nuser.settings(:dashboard).update! :theme => \'black\'\nuser.settings(:calendar).update! :scope => \'all\', :display => \'daily\'\n```\n\n\n### Get settings\n\n```ruby\nuser = User.find(1)\nuser.settings(:dashboard).theme\n# => \'black\n\nuser.settings(:dashboard).view\n# => \'monthly\'  (it\'s the default)\n\nuser.settings(:calendar).scope\n# => \'all\'\n```\n\n### Delete settings\n\n```ruby\nuser = User.find(1)\nuser.settings(:dashboard).update! :theme => nil\n\nuser.settings(:dashboard).view = nil\nuser.settings(:dashboard).save!\n```\n\n### Using scopes\n\n```ruby\nUser.with_settings\n# => all users having any setting\n\nUser.without_settings\n# => all users without having any setting\n\nUser.with_settings_for(:calendar)\n# => all users having a setting for \'calendar\'\n\nUser.without_settings_for(:calendar)\n# => all users without having settings for \'calendar\'\n```\n\n### Eager Loading\n```ruby\nUser.includes(:setting_objects)\n# => Eager load setting_objects when querying many users\n```\n\n## Compatibility\n\nVersion 2 is a complete rewrite and has a new DSL, so it\'s **not** compatible with Version 1. In addition, Rails 2.3 is not supported anymore. But the database schema is unchanged, so you can continue to use the data created by 1.x, no conversion is needed.\n\nIf you don\'t want to upgrade, you find the old version in the [1.x](https://github.com/ledermann/rails-settings/commits/1.x) branch. But don\'t expect any updates there.\n\n\n## Changelog\n\nSee https://github.com/ledermann/rails-settings/releases\n\n\n## License\n\nMIT License\n\nCopyright (c) 2012-2019 [Georg Ledermann](http://www.georg-ledermann.de)\n\nThis gem is a complete rewrite of [rails-settings](https://github.com/Squeegy/rails-settings) by [Alex Wayne](https://github.com/Squeegy)\n'