b'# PaperTrail\n\n[![Build Status][4]][5]\n[![Gem Version][53]][54]\n[![SemVer][55]][56]\n\nTrack changes to your models, for auditing or versioning. See how a model looked\nat any stage in its lifecycle, revert it to any version, or restore it after it\nhas been destroyed.\n\n## Documentation\n\n| Version        | Documentation |\n| -------------- | ------------- |\n| Unreleased     | https://github.com/paper-trail-gem/paper_trail/blob/master/README.md |\n| 10.3.1         | https://github.com/paper-trail-gem/paper_trail/blob/v10.3.1/README.md |\n| 9.2.0          | https://github.com/paper-trail-gem/paper_trail/blob/v9.2.0/README.md |\n| 8.1.2          | https://github.com/paper-trail-gem/paper_trail/blob/v8.1.2/README.md |\n| 7.1.3          | https://github.com/paper-trail-gem/paper_trail/blob/v7.1.3/README.md |\n| 6.0.2          | https://github.com/paper-trail-gem/paper_trail/blob/v6.0.2/README.md |\n| 5.2.3          | https://github.com/paper-trail-gem/paper_trail/blob/v5.2.3/README.md |\n| 4.2.0          | https://github.com/paper-trail-gem/paper_trail/blob/v4.2.0/README.md |\n| 3.0.9          | https://github.com/paper-trail-gem/paper_trail/blob/v3.0.9/README.md |\n| 2.7.2          | https://github.com/paper-trail-gem/paper_trail/blob/v2.7.2/README.md |\n| 1.6.5          | https://github.com/paper-trail-gem/paper_trail/blob/v1.6.5/README.md |\n\n## Table of Contents\n\n<!-- toc -->\n\n- [1. Introduction](#1-introduction)\n  - [1.a. Compatibility](#1a-compatibility)\n  - [1.b. Installation](#1b-installation)\n  - [1.c. Basic Usage](#1c-basic-usage)\n  - [1.d. API Summary](#1d-api-summary)\n  - [1.e. Configuration](#1e-configuration)\n- [2. Limiting What is Versioned, and When](#2-limiting-what-is-versioned-and-when)\n  - [2.a. Choosing Lifecycle Events To Monitor](#2a-choosing-lifecycle-events-to-monitor)\n  - [2.b. Choosing When To Save New Versions](#2b-choosing-when-to-save-new-versions)\n  - [2.c. Choosing Attributes To Monitor](#2c-choosing-attributes-to-monitor)\n  - [2.d. Turning PaperTrail Off](#2d-turning-papertrail-off)\n  - [2.e. Limiting the Number of Versions Created](#2e-limiting-the-number-of-versions-created)\n- [3. Working With Versions](#3-working-with-versions)\n  - [3.a. Reverting And Undeleting A Model](#3a-reverting-and-undeleting-a-model)\n  - [3.b. Navigating Versions](#3b-navigating-versions)\n  - [3.c. Diffing Versions](#3c-diffing-versions)\n  - [3.d. Deleting Old Versions](#3d-deleting-old-versions)\n- [4. Saving More Information About Versions](#4-saving-more-information-about-versions)\n  - [4.a. Finding Out Who Was Responsible For A Change](#4a-finding-out-who-was-responsible-for-a-change)\n  - [4.b. Associations](#4b-associations)\n  - [4.c. Storing Metadata](#4c-storing-metadata)\n- [5. ActiveRecord](#5-activerecord)\n  - [5.a. Single Table Inheritance (STI)](#5a-single-table-inheritance-sti)\n  - [5.b. Configuring the `versions` Association](#5b-configuring-the-versions-association)\n  - [5.c. Generators](#5c-generators)\n  - [5.d. Protected Attributes](#5d-protected-attributes)\n- [6. Extensibility](#6-extensibility)\n  - [6.a. Custom Version Classes](#6a-custom-version-classes)\n  - [6.b. Custom Serializer](#6b-custom-serializer)\n  - [6.c. Custom Object Changes](#6c-custom-object-changes)\n- [7. Testing](#7-testing)\n  - [7.a. Minitest](#7a-minitest)\n  - [7.b. RSpec](#7b-rspec)\n  - [7.c. Cucumber](#7c-cucumber)\n  - [7.d. Spork](#7d-spork)\n  - [7.e. Zeus or Spring](#7e-zeus-or-spring)\n- [8. PaperTrail Plugins](#8-papertrail-plugins)\n- [9. Integration with Other Libraries](#9-integration-with-other-libraries)\n- [10. Related Libraries and Ports](#10-related-libraries-and-ports)\n- [Articles](#articles)\n- [Problems](#problems)\n- [Contributors](#contributors)\n- [Contributing](#contributing)\n- [Inspirations](#inspirations)\n- [Intellectual Property](#intellectual-property)\n\n<!-- tocstop -->\n\n## 1. Introduction\n\n### 1.a. Compatibility\n\n| paper_trail    | branch     | ruby     | activerecord  |\n| -------------- | ---------- | -------- | ------------- |\n| unreleased     | master     | >= 2.3.0 | >= 4.2, < 6.1 |\n| 10             | 10-stable  | >= 2.3.0 | >= 4.2, < 6.1 |\n| 9              | 9-stable   | >= 2.3.0 | >= 4.2, < 5.3 |\n| 8              | 8-stable   | >= 2.2.0 | >= 4.2, < 5.2 |\n| 7              | 7-stable   | >= 2.1.0 | >= 4.0, < 5.2 |\n| 6              | 6-stable   | >= 1.9.3 | >= 4.0, < 5.2 |\n| 5              | 5-stable   | >= 1.9.3 | >= 3.0, < 5.1 |\n| 4              | 4-stable   | >= 1.8.7 | >= 3.0, < 5.1 |\n| 3              | 3.0-stable | >= 1.8.7 | >= 3.0, < 5   |\n| 2              | 2.7-stable | >= 1.8.7 | >= 3.0, < 4   |\n| 1              | rails2     | >= 1.8.7 | >= 2.3, < 3   |\n\nExperts: to install incompatible versions of activerecord, see\n`paper_trail/compatibility.rb`.\n\n### 1.b. Installation\n\n1. Add PaperTrail to your `Gemfile`.\n\n    `gem \'paper_trail\'`\n\n1. Add a `versions` table to your database:\n\n    ```\n    bundle exec rails generate paper_trail:install [--with-changes]\n    ```\n\n    For more information on this generator, see [section 5.c.\n    Generators](#5c-generators).\n\n    If using [rails_admin][38], you must enable the\n    experimental [Associations](#4b-associations) feature.\n\n    If you\'re getting "Could not find generator \'paper_trail:install\'" errors from\n    recent Ruby/Rails versions, try running `spring stop`\n    (see [this thread](https://github.com/paper-trail-gem/paper_trail/issues/459) for more details).\n\n    ```\n    bundle exec rake db:migrate\n    ```\n\n1. Add `has_paper_trail` to the models you want to track.\n\n    ```ruby\n    class Widget < ActiveRecord::Base\n      has_paper_trail\n    end\n    ```\n\n1. If your controllers have a `current_user` method, you can easily [track who\nis responsible for changes](#4a-finding-out-who-was-responsible-for-a-change)\nby adding a controller callback.\n\n    ```ruby\n    class ApplicationController\n      before_action :set_paper_trail_whodunnit\n    end\n    ```\n\n### 1.c. Basic Usage\n\nYour models now have a `versions` method which returns the "paper trail" of\nchanges to your model.\n\n```ruby\nwidget = Widget.find 42\nwidget.versions\n# [<PaperTrail::Version>, <PaperTrail::Version>, ...]\n```\n\nOnce you have a version, you can find out what happened:\n\n```ruby\nv = widget.versions.last\nv.event # \'update\', \'create\', \'destroy\'. See also: Custom Event Names\nv.created_at\nv.whodunnit # ID of `current_user`. Requires `set_paper_trail_whodunnit` callback.\nwidget = v.reify # The widget as it was before the update (nil for a create event)\n```\n\nPaperTrail stores the pre-change version of the model, unlike some other\nauditing/versioning plugins, so you can retrieve the original version.  This is\nuseful when you start keeping a paper trail for models that already have records\nin the database.\n\n```ruby\nwidget = Widget.find 153\nwidget.name                                 # \'Doobly\'\n\n# Add has_paper_trail to Widget model.\n\nwidget.versions                             # []\nwidget.update name: \'Wotsit\'\nwidget.versions.last.reify.name             # \'Doobly\'\nwidget.versions.last.event                  # \'update\'\n```\n\nThis also means that PaperTrail does not waste space storing a version of the\nobject as it currently stands.  The `versions` method gives you previous\nversions; to get the current one just call a finder on your `Widget` model as\nusual.\n\nHere\'s a helpful table showing what PaperTrail stores:\n\n| *Event*        | *create* | *update* | *destroy* |\n| -------------- | -------- | -------- | --------- |\n| *Model Before* | nil      | widget   | widget    |\n| *Model After*  | widget   | widget   | nil       |\n\nPaperTrail stores the values in the Model Before row.  Most other\nauditing/versioning plugins store the After row.\n\n### 1.d. API Summary\n\nAn introductory sample of common features.\n\nWhen you declare `has_paper_trail` in your model, you get these methods:\n\n```ruby\nclass Widget < ActiveRecord::Base\n  has_paper_trail\nend\n\n# Returns this widget\'s versions.  You can customise the name of the\n# association, but overriding this method is not supported.\nwidget.versions\n\n# Return the version this widget was reified from, or nil if it is live.\n# You can customise the name of the method.\nwidget.version\n\n# Returns true if this widget is the current, live one; or false if it is from\n# a previous version.\nwidget.paper_trail.live?\n\n# Returns who put the widget into its current state.\nwidget.paper_trail.originator\n\n# Returns the widget (not a version) as it looked at the given timestamp.\nwidget.paper_trail.version_at(timestamp)\n\n# Returns the widget (not a version) as it was most recently.\nwidget.paper_trail.previous_version\n\n# Returns the widget (not a version) as it became next.\nwidget.paper_trail.next_version\n```\n\nAnd a `PaperTrail::Version` instance (which is just an ordinary ActiveRecord\ninstance, with all the usual methods) has methods such as:\n\n```ruby\n# Returns the item restored from this version.\nversion.reify(options = {})\n\n# Return a new item from this version\nversion.reify(dup: true)\n\n# Returns who put the item into the state stored in this version.\nversion.paper_trail_originator\n\n# Returns who changed the item from the state it had in this version.\nversion.terminator\nversion.whodunnit\nversion.version_author\n\n# Returns the next version.\nversion.next\n\n# Returns the previous version.\nversion.previous\n\n# Returns the index of this version in all the versions.\nversion.index\n\n# Returns the event that caused this version (create|update|destroy).\nversion.event\n```\n\nThis is just a sample of common features. Keep reading for more.\n\n### 1.e. Configuration\n\nMany aspects of PaperTrail are configurable for individual models; typically\nthis is achieved by passing options to the `has_paper_trail` method within\na given model.\n\nSome aspects of PaperTrail are configured globally for all models. These\nsettings are assigned directly on the `PaperTrail.config` object.\nA common place to put these settings is in a Rails initializer file\nsuch as `config/initializers/paper_trail.rb` or in an environment-specific\nconfiguration file such as `config/environments/test.rb`.\n\n#### 1.e.1 Global\n\nGlobal configuration options affect all threads.\n\n- association_reify_error_behaviour\n- enabled\n- has_paper_trail_defaults\n- object_changes_adapter\n- serializer\n- version_limit\n\nSyntax example: (options described in detail later)\n\n```ruby\n# config/initializers/paper_trail.rb\nPaperTrail.config.enabled = true\nPaperTrail.config.has_paper_trail_defaults = {\n  on: %i[create update destroy]\n}\nPaperTrail.config.version_limit = 3\n````\n\nThese options are intended to be set only once, during app initialization (eg.\nin `config/initializers`). It is unsafe to change them while the app is running.\nIn contrast, `PaperTrail.request` has various options that only apply to a\nsingle HTTP request and thus are safe to use while the app is running.\n\n## 2. Limiting What is Versioned, and When\n\n### 2.a. Choosing Lifecycle Events To Monitor\n\nYou can choose which events to track with the `on` option.  For example, if\nyou only want to track `update` events:\n\n```ruby\nclass Article < ActiveRecord::Base\n  has_paper_trail on: [:update]\nend\n```\n\n`has_paper_trail` installs [callbacks][52] for the specified lifecycle events.\n\nThere are four potential callbacks, and the default is to install all four, ie.\n`on: [:create, :destroy, :touch, :update]`.\n\n#### The `versions.event` Column\n\nYour `versions` table has an `event` column with three possible values:\n\n| *event* | *callback*    |\n| ------- | ------------- |\n| create  | create        |\n| destroy | destroy       |\n| update  | touch, update |\n\nYou may also have the `PaperTrail::Version` model save a custom string in its\n`event` field instead of the typical `create`, `update`, `destroy`. PaperTrail\nadds an `attr_accessor` to your model named `paper_trail_event`, and will insert\nit, if present, in the `event` column.\n\n```ruby\na = Article.create\na.versions.size                           # 1\na.versions.last.event                     # \'create\'\na.paper_trail_event = \'update title\'\na.update title: \'My Title\'\na.versions.size                           # 2\na.versions.last.event                     # \'update title\'\na.paper_trail_event = nil\na.update title: \'Alternate\'\na.versions.size                           # 3\na.versions.last.event                     # \'update\'\n```\n\n#### Controlling the Order of AR Callbacks\n\nIf there are other callbacks in your model, their order relative to those\ninstalled by `has_paper_trail` may matter. If you need to control\ntheir order, use the `paper_trail_on_*` methods.\n\n```ruby\nclass Article < ActiveRecord::Base\n  # Include PaperTrail, but do not install any callbacks. Passing the\n  # empty array to `:on` omits callbacks.\n  has_paper_trail on: []\n\n  # Add callbacks in the order you need.\n  paper_trail.on_destroy    # add destroy callback\n  paper_trail.on_update     # etc.\n  paper_trail.on_create\n  paper_trail.on_touch\nend\n```\n\nThe `paper_trail.on_destroy` method can be further configured to happen\n`:before` or `:after` the destroy event. In PaperTrail 4, the default is\n`:after`. In PaperTrail 5, the default will be `:before`, to support\nActiveRecord 5. (see https://github.com/paper-trail-gem/paper_trail/pull/683)\n\n### 2.b. Choosing When To Save New Versions\n\nYou can choose the conditions when to add new versions with the `if` and\n`unless` options. For example, to save versions only for US non-draft\ntranslations:\n\n```ruby\nclass Translation < ActiveRecord::Base\n  has_paper_trail if:     Proc.new { |t| t.language_code == \'US\' },\n                  unless: Proc.new { |t| t.type == \'DRAFT\'       }\nend\n```\n\n#### Choosing Based on Changed Attributes\n\nStarting with PaperTrail 4.0, versions are saved during an after-callback. If\nyou decide whether to save a new version based on changed attributes,\nuse attribute_name_was instead of attribute_name.\n\n#### Saving a New Version Manually\n\nYou may want to save a new version regardless of options like `:on`, `:if`, or\n`:unless`. Or, in rare situations, you may want to save a new version even if\nthe record has not changed.\n\n```ruby\nmy_model.paper_trail.save_with_version\n```\n\n### 2.c. Choosing Attributes To Monitor\n\n#### Ignore\n\nYou can `ignore` changes to certain attributes:\n\n```ruby\nclass Article < ActiveRecord::Base\n  has_paper_trail ignore: [:title, :rating]\nend\n```\n\nChanges to just the `title` or `rating` will not create a version record.\nChanges to other attributes will create a version record.\n\n```ruby\na = Article.create\na.versions.length                         # 1\na.update title: \'My Title\', rating: 3\na.versions.length                         # 1\na.update title: \'Greeting\', content: \'Hello\'\na.versions.length                         # 2\na.paper_trail.previous_version.title      # \'My Title\'\n```\n\n#### Only\n\nOr, you can specify a list of the `only` attributes you care about:\n\n```ruby\nclass Article < ActiveRecord::Base\n  has_paper_trail only: [:title]\nend\n```\n\nOnly changes to the `title` will create a version record.\n\n```ruby\na = Article.create\na.versions.length                         # 1\na.update title: \'My Title\'\na.versions.length                         # 2\na.update content: \'Hello\'\na.versions.length                         # 2\na.paper_trail.previous_version.content    # nil\n```\n\nThe `:ignore` and `:only` options can also accept `Hash` arguments.\n\n```ruby\nclass Article < ActiveRecord::Base\n  has_paper_trail only: { title: Proc.new { |obj| !obj.title.blank? } }\nend\n```\n\nIf the `title` is not blank, then only changes to the `title`\nwill create a version record.\n\n```ruby\na = Article.create\na.versions.length                         # 1\na.update content: \'Hello\'\na.versions.length                         # 2\na.update title: \'Title One\'\na.versions.length                         # 3\na.update content: \'Hai\'\na.versions.length                         # 3\na.paper_trail.previous_version.content    # "Hello"\na.update title: \'Title Two\'\na.versions.length                         # 4\na.paper_trail.previous_version.content    # "Hai"\n```\n\nConfiguring both `:ignore` and `:only` is not recommended, but it should work as\nexpected. Passing both `:ignore` and `:only` options will result in the\narticle being saved if a changed attribute is included in `:only` but not in\n`:ignore`.\n\n#### Skip\n\nYou can skip attributes completely with the `:skip` option.  As with `:ignore`,\nupdates to these attributes will not create a version record.  In addition, if a\nversion record is created for some other reason, these attributes will not be\npersisted.\n\n```ruby\nclass Article < ActiveRecord::Base\n  has_paper_trail skip: [:file_upload]\nend\n```\n\n### 2.d. Turning PaperTrail Off\n\nPaperTrail is on by default, but sometimes you don\'t want to record versions.\n\n#### Per Process\n\nTurn PaperTrail off for **all threads** in a `ruby` process.\n\n```ruby\nPaperTrail.enabled = false\n```\n\n**Do not use this in production** unless you have a good understanding of\nthreads vs. processes.\n\nA legitimate use case is to speed up tests. See [Testing](#7-testing) below.\n\n#### Per HTTP Request\n\n```ruby\nPaperTrail.request(enabled: false) do\n  # no versions created\nend\n```\n\nor,\n\n```ruby\nPaperTrail.request.enabled = false\n# no versions created\nPaperTrail.request.enabled = true\n```\n\n#### Per Class\n\nIn the rare case that you need to disable versioning for one model while\nkeeping versioning enabled for other models, use:\n\n```ruby\nPaperTrail.request.disable_model(Banana)\n# changes to Banana model do not create versions,\n# but eg. changes to Kiwi model do.\nPaperTrail.request.enable_model(Banana)\nPaperTrail.request.enabled_for_model?(Banana) # => true\n```\n\nThis setting, as with all `PaperTrail.request` settings, affects only the\ncurrent request, not all threads.\n\nFor this rare use case, there is no convenient way to pass a block.\n\n##### In a Rails Controller Callback (Not Recommended)\n\nPaperTrail installs a callback in your rails controllers. The installed\ncallback will call `paper_trail_enabled_for_controller`, which you can\noverride.\n\n```ruby\nclass ApplicationController < ActionController::Base\n  def paper_trail_enabled_for_controller\n    # Don\'t omit `super` without a good reason.\n    super && request.user_agent != \'Disable User-Agent\'\n  end\nend\n```\n\nBecause you are unable to control the order of callback execution, this\ntechnique is not recommended, but is preserved for backwards compatibility.\n\nIt would be better to install your own callback and use\n`PaperTrail.request.enabled=` as you see fit.\n\n#### Per Method (Removed)\n\nThe `widget.paper_trail.without_versioning` method was removed in v10, without\nan exact replacement. To disable versioning, use the [Per Class](#per-class) or\n[Per HTTP Request](#per-http-request) methods.\n\n### 2.e. Limiting the Number of Versions Created\n\nConfigure `version_limit` to cap the number of versions saved per record. This\ndoes not apply to `create` events.\n\n```ruby\n# Limit: 4 versions per record (3 most recent, plus a `create` event)\nPaperTrail.config.version_limit = 3\n# Remove the limit\nPaperTrail.config.version_limit = nil\n```\n\n#### 2.e.1 Per-model limit\n\nModels can override the global `PaperTrail.config.version_limit` setting.\n\nExample:\n\n```\n# initializer\nPaperTrail.config.version_limit = 10\n\n# At most 10 versions\nhas_paper_trail\n\n# At most 3 versions (2 updates, 1 create). Overrides global version_limit.\nhas_paper_trail limit: 2\n\n# Infinite versions\nhas_paper_trail limit: nil\n```\n\nTo use a per-model limit, your `versions` table must have an\n`item_subtype` column. See [Section\n4.b.1](https://github.com/paper-trail-gem/paper_trail#4b1-the-optional-item_subtype-column).\n\n## 3. Working With Versions\n\n### 3.a. Reverting And Undeleting A Model\n\nPaperTrail makes reverting to a previous version easy:\n\n```ruby\nwidget = Widget.find 42\nwidget.update name: \'Blah blah\'\n# Time passes....\nwidget = widget.paper_trail.previous_version  # the widget as it was before the update\nwidget.save                                   # reverted\n```\n\nAlternatively you can find the version at a given time:\n\n```ruby\nwidget = widget.paper_trail.version_at(1.day.ago)  # the widget as it was one day ago\nwidget.save                                        # reverted\n```\n\nNote `version_at` gives you the object, not a version, so you don\'t need to call\n`reify`.\n\nUndeleting is just as simple:\n\n```ruby\nwidget = Widget.find(42)\nwidget.destroy\n# Time passes....\nwidget = Widget.new(id:42)    # creating a new object with the same id, re-establishes the link\nversions = widget.versions    # versions ordered by versions.created_at, ascending\nwidget = versions.last.reify  # the widget as it was before destruction\nwidget.save                   # the widget lives!\n```\n\nYou could even use PaperTrail to implement an undo system; [Ryan Bates has!][3]\n\nIf your model uses [optimistic locking][1] don\'t forget to [increment your\n`lock_version`][2] before saving or you\'ll get a `StaleObjectError`.\n\n### 3.b. Navigating Versions\n\nYou can call `previous_version` and `next_version` on an item to get it as it\nwas/became.  Note that these methods reify the item for you.\n\n```ruby\nlive_widget = Widget.find 42\nlive_widget.versions.length                       # 4, for example\nwidget = live_widget.paper_trail.previous_version # => widget == live_widget.versions.last.reify\nwidget = widget.paper_trail.previous_version      # => widget == live_widget.versions[-2].reify\nwidget = widget.paper_trail.next_version          # => widget == live_widget.versions.last.reify\nwidget.paper_trail.next_version                   # live_widget\n```\n\nIf instead you have a particular `version` of an item you can navigate to the\nprevious and next versions.\n\n```ruby\nwidget = Widget.find 42\nversion = widget.versions[-2]    # assuming widget has several versions\nprevious_version = version.previous\nnext_version = version.next\n```\n\nYou can find out which of an item\'s versions yours is:\n\n```ruby\ncurrent_version_number = version.index    # 0-based\n```\n\nIf you got an item by reifying one of its versions, you can navigate back to the\nversion it came from:\n\n```ruby\nlatest_version = Widget.find(42).versions.last\nwidget = latest_version.reify\nwidget.version == latest_version    # true\n```\n\nYou can find out whether a model instance is the current, live one -- or whether\nit came instead from a previous version -- with `live?`:\n\n```ruby\nwidget = Widget.find 42\nwidget.live?                        # true\nwidget = widget.paper_trail.previous_version\nwidget.live?                        # false\n```\n\nAnd you can perform `WHERE` queries for object versions based on attributes:\n\n```ruby\n# Find versions that meet these criteria.\nPaperTrail::Version.where_object(content: \'Hello\', title: \'Article\')\n\n# Find versions before and after attribute `atr` had value `v`:\nPaperTrail::Version.where_object_changes(atr: \'v\')\n```\n\nUsing `where_object_changes` to read YAML from a text column was deprecated in\n8.1.0, and will now raise an error.\n\n### 3.c. Diffing Versions\n\nThere are two scenarios: diffing adjacent versions and diffing non-adjacent\nversions.\n\nThe best way to diff adjacent versions is to get PaperTrail to do it for you.\nIf you add an `object_changes` text column to your `versions` table, either at\ninstallation time with the `rails generate paper_trail:install --with-changes`\noption or manually, PaperTrail will store the `changes` diff (excluding any\nattributes PaperTrail is ignoring) in each `update` version.  You can use the\n`version.changeset` method to retrieve it.  For example:\n\n```ruby\nwidget = Widget.create name: \'Bob\'\nwidget.versions.last.changeset\n# {\n#   "name"=>[nil, "Bob"],\n#   "created_at"=>[nil, 2015-08-10 04:10:40 UTC],\n#   "updated_at"=>[nil, 2015-08-10 04:10:40 UTC],\n#   "id"=>[nil, 1]\n# }\nwidget.update name: \'Robert\'\nwidget.versions.last.changeset\n# {\n#   "name"=>["Bob", "Robert"],\n#   "updated_at"=>[2015-08-10 04:13:19 UTC, 2015-08-10 04:13:19 UTC]\n# }\nwidget.destroy\nwidget.versions.last.changeset\n# {}\n```\n\nThe `object_changes` are only stored for creation and updates, not when an\nobject is destroyed.\n\nPlease be aware that PaperTrail doesn\'t use diffs internally.  When I designed\nPaperTrail I wanted simplicity and robustness so I decided to make each version\nof an object self-contained.  A version stores all of its object\'s data, not a\ndiff from the previous version.  This means you can delete any version without\naffecting any other.\n\nTo diff non-adjacent versions you\'ll have to write your own code.  These\nlibraries may help:\n\nFor diffing two strings:\n\n* [htmldiff][19]: expects but doesn\'t require HTML input and produces HTML\n  output.  Works very well but slows down significantly on large (e.g. 5,000\n  word) inputs.\n* [differ][20]: expects plain text input and produces plain\n  text/coloured/HTML/any output.  Can do character-wise, word-wise, line-wise,\n  or arbitrary-boundary-string-wise diffs.  Works very well on non-HTML input.\n* [diff-lcs][21]: old-school, line-wise diffs.\n\nFor diffing two ActiveRecord objects:\n\n* [Jeremy Weiskotten\'s PaperTrail fork][22]: uses ActiveSupport\'s diff to return\n  an array of hashes of the changes.\n* [activerecord-diff][23]: rather like ActiveRecord::Dirty but also allows you\n  to specify which columns to compare.\n\n### 3.d. Deleting Old Versions\n\nOver time your `versions` table will grow to an unwieldy size.  Because each\nversion is self-contained (see the Diffing section above for more) you can\nsimply delete any records you don\'t want any more.  For example:\n\n```sql\nsql> delete from versions where created_at < \'2010-06-01\';\n```\n\n```ruby\nPaperTrail::Version.where(\'created_at < ?\', 1.day.ago).delete_all\n```\n\n## 4. Saving More Information About Versions\n\n### 4.a. Finding Out Who Was Responsible For A Change\n\nSet `PaperTrail.request.whodunnit=`, and that value will be stored in the\nversion\'s `whodunnit` column.\n\n```ruby\nPaperTrail.request.whodunnit = \'Andy Stewart\'\nwidget.update name: \'Wibble\'\nwidget.versions.last.whodunnit # Andy Stewart\n```\n\n#### Setting `whodunnit` to a `Proc`\n\n`whodunnit=` also accepts a `Proc`, in the rare case that lazy evaluation is\nrequired.\n\n```ruby\nPaperTrail.request.whodunnit = proc do\n  caller.find { |c| c.starts_with? Rails.root.to_s }\nend\n```\n\nBecause lazy evaluation can be hard to troubleshoot, this is not\nrecommended for common use.\n\n#### Setting `whodunnit` Temporarily\n\nTo set whodunnit temporarily, for the duration of a block, use\n`PaperTrail.request`:\n\n```ruby\nPaperTrail.request(whodunnit: \'Dorian Mari\xc3\xa9\') do\n  widget.update name: \'Wibble\'\nend\n```\n\n#### Setting `whodunnit` with a controller callback\n\nIf your controller has a `current_user` method, PaperTrail provides a\ncallback that will assign `current_user.id` to `whodunnit`.\n\n```ruby\nclass ApplicationController\n  before_action :set_paper_trail_whodunnit\nend\n```\n\nYou may want `set_paper_trail_whodunnit` to call a different method to find out\nwho is responsible. To do so, override the `user_for_paper_trail` method in\nyour controller like this:\n\n```ruby\nclass ApplicationController\n  def user_for_paper_trail\n    logged_in? ? current_member.id : \'Public user\'  # or whatever\n  end\nend\n```\n\nSee also: [Setting whodunnit in the rails console][33]\n\n#### Terminator and Originator\n\nA version\'s `whodunnit` column tells us who changed the object, causing the\n`version` to be stored.  Because a version stores the object as it looked before\nthe change (see the table above), `whodunnit` tells us who *stopped* the object\nlooking like this -- not who made it look like this.  Hence `whodunnit` is\naliased as `terminator`.\n\nTo find out who made a version\'s object look that way, use\n`version.paper_trail_originator`.  And to find out who made a "live" object look\nlike it does, call `paper_trail_originator` on the object.\n\n```ruby\nwidget = Widget.find 153                    # assume widget has 0 versions\nPaperTrail.request.whodunnit = \'Alice\'\nwidget.update name: \'Yankee\'\nwidget.paper_trail.originator               # \'Alice\'\nPaperTrail.request.whodunnit = \'Bob\'\nwidget.update name: \'Zulu\'\nwidget.paper_trail.originator               # \'Bob\'\nfirst_version, last_version = widget.versions.first, widget.versions.last\nfirst_version.whodunnit                     # \'Alice\'\nfirst_version.paper_trail_originator        # nil\nfirst_version.terminator                    # \'Alice\'\nlast_version.whodunnit                      # \'Bob\'\nlast_version.paper_trail_originator         # \'Alice\'\nlast_version.terminator                     # \'Bob\'\n```\n\n#### Storing an ActiveRecord globalid in whodunnit\n\nIf you would like `whodunnit` to return an `ActiveRecord` object instead of a\nstring, please try the [paper_trail-globalid][37] gem.\n\n### 4.b. Associations\n\nTo track and reify associations, use [paper_trail-association_tracking][6] (PT-AT).\n\nFrom 2014 to 2018, association tracking was an experimental feature, but many\nissues were discovered. To attract new volunteers to address these issues, PT-AT\nwas extracted (see https://github.com/paper-trail-gem/paper_trail/issues/1070).\n\nEven though it had always been an experimental feature, we didn\'t want the\nextraction of PT-AT to be a breaking change, so great care was taken to remove\nit slowly.\n\n- In PT 9, PT-AT was kept as a runtime dependency.\n- In PT 10, it became a development dependency (If you use it you must add it to\n  your own `Gemfile`) and we kept running all of its tests.\n- In PT 11, it will no longer be a development dependency, and it is responsible\n  for its own tests.\n\n#### 4.b.1 The optional `item_subtype` column\n\nAs of PT 10, users may add an `item_subtype` column to their `versions` table.\nWhen storing versions for STI models, rails stores the base class in `item_type`\n(that\'s just how polymorphic associations like `item` work) In addition, PT will\nnow store the subclass in `item_subtype`. If this column is present PT-AT will\nuse it to fix a rare issue with reification of STI subclasses.\n\n```ruby\nadd_column :versions, :item_subtype, :string, null: true\n```\n\nSo, if you use PT-AT and STI, the addition of this column is recommended.\n\n- https://github.com/paper-trail-gem/paper_trail/issues/594\n- https://github.com/paper-trail-gem/paper_trail/pull/1143\n- https://github.com/westonganger/paper_trail-association_tracking/pull/5\n\n### 4.c. Storing Metadata\n\nYou can add your own custom columns to your `versions` table. Values can be\ngiven using **Model Metadata** or **Controller Metadata**.\n\n#### Model Metadata\n\nYou can specify metadata in the model using `has_paper_trail(meta:)`.\n\n```ruby\nclass Article < ActiveRecord::Base\n  belongs_to :author\n  has_paper_trail(\n    meta: {\n      author_id: :author_id, # model attribute\n      word_count: :count_words, # arbitrary model method\n      answer: 42, # scalar value\n      editor: proc { |article| article.editor.full_name } # a Proc\n    }\n  )\n  def count_words\n    153\n  end\nend\n```\n\n#### Metadata from Controllers\n\nYou can also store any information you like from your controller.  Override\nthe `info_for_paper_trail` method in your controller to return a hash whose keys\ncorrespond to columns in your `versions` table.\n\n```ruby\nclass ApplicationController\n  def info_for_paper_trail\n    { ip: request.remote_ip, user_agent: request.user_agent }\n  end\nend\n```\n\n#### Advantages of Metadata\n\nWhy would you do this?  In this example, `author_id` is an attribute of\n`Article` and PaperTrail will store it anyway in a serialized form in the\n`object` column of the `version` record.  But let\'s say you wanted to pull out\nall versions for a particular author; without the metadata you would have to\ndeserialize (reify) each `version` object to see if belonged to the author in\nquestion.  Clearly this is inefficient.  Using the metadata you can find just\nthose versions you want:\n\n```ruby\nPaperTrail::Version.where(author_id: author_id)\n```\n\n#### Metadata can Override PaperTrail Columns\n\n**Experts only**. Metadata will override the normal values that PT would have\ninserted into its own columns.\n\n| *PT Column*    | *How bad of an idea?* | *Alternative*                 |\n| -------------- | --------------------- | ----------------------------- |\n| item_type      | terrible idea         |                               |\n| item_id        | terrible idea         |                               |\n| event          | meh                   | paper_trail_event             |\n| whodunnit      | meh                   | PaperTrail.request.whodunnit= |\n| object         | a little dangerous    |                               |\n| object_changes | a little dangerous    |                               |\n\n## 5. ActiveRecord\n\n### 5.a. Single Table Inheritance (STI)\n\nPaperTrail supports [Single Table Inheritance][39], and even supports an\nun-versioned base model, as of `23ffbdc7e1`.\n\n```ruby\nclass Fruit < ActiveRecord::Base\n  # un-versioned base model\nend\nclass Banana < Fruit\n  has_paper_trail\nend\n```\n\nHowever, there is a known issue when reifying [associations](#associations),\nsee https://github.com/paper-trail-gem/paper_trail/issues/594\n\n### 5.b. Configuring the `versions` Association\n\nYou may configure the name of the `versions` association by passing a different\nname (default is `:versions`) in the `versions:` options hash:\n\n```ruby\nclass Post < ActiveRecord::Base\n  has_paper_trail versions: {\n    name: :drafts\n  }\nend\n\nPost.new.versions # => NoMethodError\n```\n\nYou may pass a\n[scope](https://api.rubyonrails.org/classes/ActiveRecord/Associations/ClassMethods.html#method-i-has_many-label-Scopes)\nto the `versions` association with the `scope:` option:\n```ruby\nclass Post < ActiveRecord::Base\n  has_paper_trail versions: {\n    scope: -> { order("id desc") }\n  }\n\n  # Equivalent to:\n  has_many :versions,\n    -> { order("id desc") },\n    class_name: \'PaperTrail::Version\',\n    as: :item\nend\n```\n\nAny other [options supported by\n`has_many`](https://api.rubyonrails.org/classes/ActiveRecord/Associations/ClassMethods.html#method-i-has_many-label-Options)\ncan be passed along to the `has_many` macro via the `versions:` options hash.\n\n```ruby\nclass Post < ActiveRecord::Base\n  has_paper_trail versions: {\n    extend: VersionsExtensions,\n    autosave: false\n  }\nend\n```\n\nOverriding (instead of configuring) the `versions` method is not supported.\nOverriding associations is not recommended in general.\n\n### 5.c. Generators\n\nPaperTrail has one generator, `paper_trail:install`. It writes, but does not\nrun, a migration file.\nThe migration adds (at least) the `versions` table. The\nmost up-to-date documentation for this generator can be found by running `rails\ngenerate paper_trail:install --help`, but a copy is included here for\nconvenience.\n\n```\nUsage:\n  rails generate paper_trail:install [options]\n\nOptions:\n  [--with-changes], [--no-with-changes]            # Store changeset (diff) with each version\n\nRuntime options:\n  -f, [--force]                    # Overwrite files that already exist\n  -p, [--pretend], [--no-pretend]  # Run but do not make any changes\n  -q, [--quiet], [--no-quiet]      # Suppress status output\n  -s, [--skip], [--no-skip]        # Skip files that already exist\n\nGenerates (but does not run) a migration to add a versions table.\n```\n\n### 5.d. Protected Attributes\n\nAs of version 6, PT no longer supports rails 3 or the [protected_attributes][17]\ngem. If you are still using them, you may use PT 5 or lower. We recommend\nupgrading to [strong_parameters][18] as soon as possible.\n\nIf you must use [protected_attributes][17] for now, and want to use PT > 5, you\ncan reopen `PaperTrail::Version` and add the following `attr_accessible` fields:\n\n```ruby\n# app/models/paper_trail/version.rb\nmodule PaperTrail\n  class Version < ActiveRecord::Base\n    include PaperTrail::VersionConcern\n    attr_accessible :item_type, :item_id, :event, :whodunnit, :object, :object_changes, :created_at\n  end\nend\n```\n\nThis *unsupported workaround* has been tested with protected_attributes 1.0.9 /\nrails 4.2.8 / paper_trail 7.0.3.\n\n## 6. Extensibility\n\n### 6.a. Custom Version Classes\n\nYou can specify custom version subclasses with the `:class_name` option:\n\n```ruby\nclass PostVersion < PaperTrail::Version\n  # custom behaviour, e.g:\n  self.table_name = :post_versions\nend\n\nclass Post < ActiveRecord::Base\n  has_paper_trail versions: {\n    class_name: \'PostVersion\'\n  }\nend\n```\n\nUnlike ActiveRecord\'s `class_name`, you\'ll have to supply the complete module\npath to the class (e.g. `Foo::BarVersion` if your class is inside the module\n`Foo`).\n\n#### Advantages\n\n1. For models which have a lot of versions, storing each model\'s versions in a\n   separate table can improve the performance of certain database queries.\n1. Store different version [metadata](#4c-storing-metadata) for different models.\n\n#### Configuration\n\nIf you are using Postgres, you should also define the sequence that your custom\nversion class will use:\n\n```ruby\nclass PostVersion < PaperTrail::Version\n  self.table_name = :post_versions\n  self.sequence_name = :post_versions_id_seq\nend\n```\n\nIf you only use custom version classes and don\'t have a `versions` table, you\nmust let ActiveRecord know that the `PaperTrail::Version` class is an\n`abstract_class`.\n\n```ruby\n# app/models/paper_trail/version.rb\nmodule PaperTrail\n  class Version < ActiveRecord::Base\n    include PaperTrail::VersionConcern\n    self.abstract_class = true\n  end\nend\n```\n\nYou can also specify custom names for the versions and version associations.\nThis is useful if you already have `versions` or/and `version` methods on your\nmodel.  For example:\n\n```ruby\nclass Post < ActiveRecord::Base\n  has_paper_trail versions: { name: :paper_trail_versions },\n                  version:          :paper_trail_version\n\n  # Existing versions method.  We don\'t want to clash.\n  def versions\n    # ...\n  end\n\n  # Existing version method.  We don\'t want to clash.\n  def version\n    # ...\n  end\nend\n```\n\n### 6.b. Custom Serializer\n\nBy default, PaperTrail stores your changes as a `YAML` dump. You can override\nthis with the serializer config option:\n\n```ruby\nPaperTrail.serializer = MyCustomSerializer\n```\n\nA valid serializer is a `module` (or `class`) that defines a `load` and `dump`\nmethod.  These serializers are included in the gem for your convenience:\n\n* [PaperTrail::Serializers::YAML][24] - Default\n* [PaperTrail::Serializers::JSON][25]\n\n#### PostgreSQL JSON column type support\n\nIf you use PostgreSQL, and would like to store your `object` (and/or\n`object_changes`) data in a column of [type `json` or type `jsonb`][26], specify\n`json` instead of `text` for these columns in your migration:\n\n```ruby\ncreate_table :versions do |t|\n  # ...\n  t.json :object          # Full object changes\n  t.json :object_changes  # Optional column-level changes\n  # ...\nend\n```\n\nIf you use the PostgreSQL `json` or `jsonb` column type, you do not need\nto specify a `PaperTrail.serializer`.\n\n##### Convert existing YAML data to JSON\n\nIf you\'ve been using PaperTrail for a while with the default YAML serializer\nand you want to switch to JSON or JSONB, you\'re in a bit of a bind because\nthere\'s no automatic way to migrate your data. The first (slow) option is to\nloop over every record and parse it in Ruby, then write to a temporary column:\n\n```ruby\nadd_column :versions, :new_object, :jsonb # or :json\n# add_column :versions, :new_object_changes, :jsonb # or :json\n\n# PaperTrail::Version.reset_column_information # needed for rails < 6\n\nPaperTrail::Version.where.not(object: nil).find_each do |version|\n  version.update_column(:new_object, YAML.load(version.object))\n\n  # if version.object_changes\n  #   version.update_column(\n  #     :new_object_changes,\n  #     YAML.load(version.object_changes)\n  #   )\n  # end\nend\n\nremove_column :versions, :object\n# remove_column :versions, :object_changes\nrename_column :versions, :new_object, :object\n# rename_column :versions, :new_object_changes, :object_changes\n```\n\nThis technique can be very slow if you have a lot of data. Though slow, it is\nsafe in databases where transactions are protected against DDL, such as\nPostgres. In databases without such protection, such as MySQL, a table lock may\nbe necessary.\n\nIf the above technique is too slow for your needs, and you\'re okay doing without\nPaperTrail data temporarily, you can create the new column without converting\nthe data.\n\n```ruby\nrename_column :versions, :object, :old_object\nadd_column :versions, :object, :jsonb # or :json\n```\n\nAfter that migration, your historical data still exists as YAML, and new data\nwill be stored as JSON. Next, convert records from YAML to JSON using a\nbackground script.\n\n```ruby\nPaperTrail::Version.where.not(old_object: nil).find_each do |version|\n  version.update_columns old_object: nil, object: YAML.load(version.old_object)\nend\n```\n\nFinally, in another migration, remove the old column.\n\n```ruby\nremove_column :versions, :old_object\n```\n\nIf you use the optional `object_changes` column, don\'t forget to convert it\nalso, using the same technique.\n\n##### Convert a Column from Text to JSON\n\nIf your `object` column already contains JSON data, and you want to change its\ndata type to `json` or `jsonb`, you can use the following [DDL][36]. Of course,\nif your `object` column contains YAML, you must first convert the data to JSON\n(see above) before you can change the column type.\n\nUsing SQL:\n\n```sql\nalter table versions\nalter column object type jsonb\nusing object::jsonb;\n```\n\nUsing ActiveRecord:\n\n```ruby\nclass ConvertVersionsObjectToJson < ActiveRecord::Migration\n  def up\n    change_column :versions, :object, \'jsonb USING object::jsonb\'\n  end\n\n  def down\n    change_column :versions, :object, \'text USING object::text\'\n  end\nend\n```\n\n### 6.c. Custom Object Changes\n\nTo fully control the contents of their `object_changes` column, expert users\ncan write an adapter.\n\n```ruby\nPaperTrail.config.object_changes_adapter = MyObjectChangesAdapter.new\n\nclass MyObjectChangesAdapter\n  # @param changes Hash\n  # @return Hash\n  def diff(changes)\n    # ...\n  end\nend\n```\n\nYou should only use this feature if you are comfortable reading PT\'s source to\nsee exactly how the adapter is used. For example, see how `diff` is used by\nreading `::PaperTrail::Events::Base#recordable_object_changes`.\n\nAn adapter can implement any or all of the following methods:\n\n1. diff: Returns the changeset in the desired format given the changeset in the original format\n2. load_changeset: Returns the changeset for a given version object\n3. where_object_changes: Returns the records resulting from the given hash of attributes.\n\nDepending on what your adapter does, you may have to implement all three.\n\nFor an example of a complete and useful adapter, see\n[paper_trail-hashdiff](https://github.com/hashwin/paper_trail-hashdiff)\n\n### 6.d. Excluding the Object Column\n\nThe `object` column ends up storing a lot of duplicate data if you have models that have many columns,\nand that are updated many times. You can save ~50% of storage space by removing the column from the\nversions table. It\'s important to note that this will disable `reify` and `where_object`.\n\n## 7. Testing\n\nYou may want to turn PaperTrail off to speed up your tests.  See [Turning\nPaperTrail Off](#2d-turning-papertrail-off) above.\n\n### 7.a. Minitest\n\nFirst, disable PT for the entire `ruby` process.\n\n```ruby\n# in config/environments/test.rb\nconfig.after_initialize do\n  PaperTrail.enabled = false\nend\n```\n\nThen, to enable PT for specific tests, you can add a `with_versioning` test\nhelper method.\n\n```ruby\n# in test/test_helper.rb\ndef with_versioning\n  was_enabled = PaperTrail.enabled?\n  was_enabled_for_request = PaperTrail.request.enabled?\n  PaperTrail.enabled = true\n  PaperTrail.request.enabled = true\n  begin\n    yield\n  ensure\n    PaperTrail.enabled = was_enabled\n    PaperTrail.request.enabled = was_enabled_for_request\n  end\nend\n```\n\nThen, use the helper in your tests.\n\n```ruby\ntest \'something that needs versioning\' do\n  with_versioning do\n    # your test\n  end\nend\n```\n\n### 7.b. RSpec\n\nPaperTrail provides a helper, `paper_trail/frameworks/rspec.rb`, that works with\n[RSpec][27] to make it easier to control when `PaperTrail` is enabled during\ntesting.\n\n```ruby\n# spec/rails_helper.rb\nENV["RAILS_ENV"] ||= \'test\'\nrequire \'spec_helper\'\nrequire File.expand_path("../../config/environment", __FILE__)\nrequire \'rspec/rails\'\n# ...\nrequire \'paper_trail/frameworks/rspec\'\n```\n\nWith the helper loaded, PaperTrail will be turned off for all tests by\ndefault. To enable PaperTrail for a test you can either wrap the\ntest in a `with_versioning` block, or pass in `versioning: true` option to a\nspec block.\n\n```ruby\ndescribe \'RSpec test group\' do\n  it \'by default, PaperTrail will be turned off\' do\n    expect(PaperTrail).to_not be_enabled\n  end\n\n  with_versioning do\n    it \'within a `with_versioning` block it will be turned on\' do\n      expect(PaperTrail).to be_enabled\n    end\n  end\n\n  it \'can be turned on at the `it` or `describe` level\', versioning: true do\n    expect(PaperTrail).to be_enabled\n  end\nend\n```\n\nThe helper will also reset `whodunnit` to `nil` before each\ntest to help prevent data spillover between tests. If you are using PaperTrail\nwith Rails, the helper will automatically set the\n`PaperTrail.request.controller_info` value to `{}` as well, again, to help\nprevent data spillover between tests.\n\nThere is also a `be_versioned` matcher provided by PaperTrail\'s RSpec helper\nwhich can be leveraged like so:\n\n```ruby\nclass Widget < ActiveRecord::Base\nend\n\ndescribe Widget do\n  it \'is not versioned by default\' do\n    is_expected.to_not be_versioned\n  end\n\n  describe \'add versioning to the `Widget` class\' do\n    before(:all) do\n      class Widget < ActiveRecord::Base\n        has_paper_trail\n      end\n    end\n\n    it \'enables paper trail\' do\n      is_expected.to be_versioned\n    end\n  end\nend\n```\n\n#### Matchers\n\nThe `have_a_version_with` matcher makes assertions about versions using\n`where_object`, based on the `object` column.\n\n```ruby\ndescribe \'`have_a_version_with` matcher\' do\n  it \'is possible to do assertions on version attributes\' do\n    widget.update!(name: \'Leonard\', an_integer: 1)\n    widget.update!(name: \'Tom\')\n    widget.update!(name: \'Bob\')\n    expect(widget).to have_a_version_with name: \'Leonard\', an_integer: 1\n    expect(widget).to have_a_version_with an_integer: 1\n    expect(widget).to have_a_version_with name: \'Tom\'\n  end\nend\n```\n\nThe `have_a_version_with_changes` matcher makes assertions about versions using\n`where_object_changes`, based on the optional\n[`object_changes` column](#3c-diffing-versions).\n\n```ruby\ndescribe \'`have_a_version_with_changes` matcher\' do\n  it \'is possible to do assertions on version changes\' do\n    widget.update!(name: \'Leonard\', an_integer: 1)\n    widget.update!(name: \'Tom\')\n    widget.update!(name: \'Bob\')\n    expect(widget).to have_a_version_with_changes name: \'Leonard\', an_integer: 2\n    expect(widget).to have_a_version_with_changes an_integer: 2\n    expect(widget).to have_a_version_with_changes name: \'Bob\'\n  end\nend\n```\n\nFor more examples of the RSpec matchers, see the\n[Widget spec](https://github.com/paper-trail-gem/paper_trail/blob/master/spec/models/widget_spec.rb)\n\n### 7.c. Cucumber\n\nPaperTrail provides a helper for [Cucumber][28] that works similar to the RSpec\nhelper. If you want to use the helper, you will need to require in your cucumber\nhelper like so:\n\n```ruby\n# features/support/env.rb\n\nENV["RAILS_ENV"] ||= \'cucumber\'\nrequire File.expand_path(File.dirname(__FILE__) + \'/../../config/environment\')\n# ...\nrequire \'paper_trail/frameworks/cucumber\'\n```\n\nWhen the helper is loaded, PaperTrail will be turned off for all scenarios by a\n`before` hook added by the helper by default. When you want to enable PaperTrail\nfor a scenario, you can wrap code in a `with_versioning` block in a step, like\nso:\n\n```ruby\nGiven /I want versioning on my model/ do\n  with_versioning do\n    # PaperTrail will be turned on for all code inside of this block\n  end\nend\n```\n\nThe helper will also reset the `whodunnit` value to `nil` before each\ntest to help prevent data spillover between tests. If you are using PaperTrail\nwith Rails, the helper will automatically set the\n`PaperTrail.request.controller_info` value to `{}` as well, again, to help\nprevent data spillover between tests.\n\n### 7.d. Spork\n\nIf you want to use the `RSpec` or `Cucumber` helpers with [Spork][29], you will\nneed to manually require the helper(s) in your `prefork` block on your test\nhelper, like so:\n\n```ruby\n# spec/rails_helper.rb\n\nrequire \'spork\'\n\nSpork.prefork do\n  # This file is copied to spec/ when you run \'rails generate rspec:install\'\n  ENV["RAILS_ENV"] ||= \'test\'\n  require \'spec_helper\'\n  require File.expand_path("../../config/environment", __FILE__)\n  require \'rspec/rails\'\n  require \'paper_trail/frameworks/rspec\'\n  require \'paper_trail/frameworks/cucumber\'\n  # ...\nend\n```\n\n### 7.e. Zeus or Spring\n\nIf you want to use the `RSpec` or `Cucumber` helpers with [Zeus][30] or\n[Spring][31], you will need to manually require the helper(s) in your test\nhelper, like so:\n\n```ruby\n# spec/rails_helper.rb\n\nENV["RAILS_ENV"] ||= \'test\'\nrequire \'spec_helper\'\nrequire File.expand_path("../../config/environment", __FILE__)\nrequire \'rspec/rails\'\nrequire \'paper_trail/frameworks/rspec\'\n```\n\n## 8. PaperTrail Plugins\n- [paper_trail-association_tracking][6] - track and reify associations\n- [paper_trail-globalid][49] - enhances whodunnit by adding an `actor`\n\n## 9. Integration with Other Libraries\n\n- [ActiveAdmin][42]\n- [paper_trail_manager][46] - Browse, subscribe, view and revert changes to\n  records with rails and paper_trail\n- [rails_admin_history_rollback][51] - History rollback for rails_admin with PT\n- Sinatra - [paper_trail-sinatra][41]\n- [globalize][45] - [globalize-versioning][44]\n- [solidus_papertrail][47] - PT integration for Solidus\n  method to instances of PaperTrail::Version that returns the ActiveRecord\n  object who was responsible for change\n\n## 10. Related Libraries and Ports\n\n- [izelnakri/paper_trail][50] - An Ecto library, inspired by PT.\n- [sequelize-paper-trail][48] - A JS library, inspired by PT. A sequelize\n  plugin for tracking revision history of model instances.\n\n## Articles\n\n* [Jutsu #8 - Version your RoR models with PaperTrail](http://samurails.com/gems/papertrail/),\n  [Thibault](http://samurails.com/about-me/), 29th September 2014\n* [Versioning with PaperTrail](http://www.sitepoint.com/versioning-papertrail),\n  [Ilya Bodrov](http://www.sitepoint.com/author/ibodrov), 10th April 2014\n* [Using PaperTrail to track stack traces](http://web.archive.org/web/20141120233916/http://rubyrailsexpert.com/?p=36),\n  T James Corcoran\'s blog, 1st October 2013.\n* [RailsCast #255 - Undo with PaperTrail](http://railscasts.com/episodes/255-undo-with-paper-trail),\n  28th February 2011.\n* [Keep a Paper Trail with PaperTrail](http://www.linux-mag.com/id/7528),\n  Linux Magazine, 16th September 2009.\n\n## Problems\n\nPlease use GitHub\'s [issue tracker](https://github.com/paper-trail-gem/paper_trail/issues).\n\n## Contributors\n\nCreated by Andy Stewart in 2010, maintained since 2012 by Ben Atkins, since 2015\nby Jared Beck, with contributions by over 150 people.\n\nhttps://github.com/paper-trail-gem/paper_trail/graphs/contributors\n\n## Contributing\n\nSee our [contribution guidelines][43]\n\n## Inspirations\n\n* [Simply Versioned](https://github.com/jerome/simply_versioned)\n* [Acts As Audited](https://github.com/collectiveidea/audited)\n\n## Intellectual Property\n\nCopyright (c) 2011 Andy Stewart (boss@airbladesoftware.com).\nReleased under the MIT licence.\n\n[1]: http://api.rubyonrails.org/classes/ActiveRecord/Locking/Optimistic.html\n[2]: https://github.com/paper-trail-gem/paper_trail/issues/163\n[3]: http://railscasts.com/episodes/255-undo-with-paper-trail\n[4]: https://api.travis-ci.org/paper-trail-gem/paper_trail.svg?branch=master\n[5]: https://travis-ci.org/paper-trail-gem/paper_trail\n[6]: https://github.com/westonganger/paper_trail-association_tracking\n[9]: https://github.com/paper-trail-gem/paper_trail/tree/3.0-stable\n[10]: https://github.com/paper-trail-gem/paper_trail/tree/2.7-stable\n[11]: https://github.com/paper-trail-gem/paper_trail/tree/rails2\n[14]: https://raw.github.com/paper-trail-gem/paper_trail/master/lib/generators/paper_trail/templates/create_versions.rb\n[16]: https://github.com/paper-trail-gem/paper_trail/issues/113\n[17]: https://github.com/rails/protected_attributes\n[18]: https://github.com/rails/strong_parameters\n[19]: http://github.com/myobie/htmldiff\n[20]: http://github.com/pvande/differ\n[21]: https://github.com/halostatue/diff-lcs\n[22]: http://github.com/jeremyw/paper_trail/blob/master/lib/paper_trail/has_paper_trail.rb#L151-156\n[23]: http://github.com/tim/activerecord-diff\n[24]: https://github.com/paper-trail-gem/paper_trail/blob/master/lib/paper_trail/serializers/yaml.rb\n[25]: https://github.com/paper-trail-gem/paper_trail/blob/master/lib/paper_trail/serializers/json.rb\n[26]: http://www.postgresql.org/docs/9.4/static/datatype-json.html\n[27]: https://github.com/rspec/rspec\n[28]: http://cukes.info\n[29]: https://github.com/sporkrb/spork\n[30]: https://github.com/burke/zeus\n[31]: https://github.com/rails/spring\n[32]: http://api.rubyonrails.org/classes/ActiveRecord/AutosaveAssociation.html#method-i-mark_for_destruction\n[33]: https://github.com/paper-trail-gem/paper_trail/wiki/Setting-whodunnit-in-the-rails-console\n[34]: https://github.com/rails/rails/blob/591a0bb87fff7583e01156696fbbf929d48d3e54/activerecord/lib/active_record/fixtures.rb#L142\n[35]: https://dev.mysql.com/doc/refman/5.6/en/fractional-seconds.html\n[36]: http://www.postgresql.org/docs/9.4/interactive/ddl.html\n[37]: https://github.com/ankit1910/paper_trail-globalid\n[38]: https://github.com/sferik/rails_admin\n[39]: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#class-ActiveRecord::Base-label-Single+table+inheritance\n[40]: http://api.rubyonrails.org/classes/ActiveRecord/Associations/ClassMethods.html#module-ActiveRecord::Associations::ClassMethods-label-Polymorphic+Associations\n[41]: https://github.com/jaredbeck/paper_trail-sinatra\n[42]: https://github.com/activeadmin/activeadmin/wiki/Auditing-via-paper_trail-%28change-history%29\n[43]: https://github.com/paper-trail-gem/paper_trail/blob/master/.github/CONTRIBUTING.md\n[44]: https://github.com/globalize/globalize-versioning\n[45]: https://github.com/globalize/globalize\n[46]: https://github.com/fusion94/paper_trail_manager\n[47]: https://github.com/solidusio-contrib/solidus_papertrail\n[48]: https://github.com/nielsgl/sequelize-paper-trail\n[49]: https://github.com/ankit1910/paper_trail-globalid\n[50]: https://github.com/izelnakri/paper_trail\n[51]: https://github.com/rikkipitt/rails_admin_history_rollback\n[52]: http://guides.rubyonrails.org/active_record_callbacks.html\n[53]: https://badge.fury.io/rb/paper_trail.svg\n[54]: https://rubygems.org/gems/paper_trail\n[55]: https://api.dependabot.com/badges/compatibility_score?dependency-name=paper_trail&package-manager=bundler&version-scheme=semver\n[56]: https://dependabot.com/compatibility-score.html?dependency-name=paper_trail&package-manager=bundler&version-scheme=semver\n'