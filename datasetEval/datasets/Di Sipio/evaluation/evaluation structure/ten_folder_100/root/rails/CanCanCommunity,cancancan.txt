b'# CanCanCan\n\n![CanCanCan Logo](/logo/cancancan.jpg)\n\n[![Gem Version](https://badge.fury.io/rb/cancancan.svg)](http://badge.fury.io/rb/cancancan)\n[![Travis badge](https://travis-ci.org/CanCanCommunity/cancancan.svg?branch=develop)](https://travis-ci.org/CanCanCommunity/cancancan)\n[![Code Climate Badge](https://codeclimate.com/github/CanCanCommunity/cancancan.svg)](https://codeclimate.com/github/CanCanCommunity/cancancan)\n\n[Wiki](https://github.com/CanCanCommunity/cancancan/wiki) |\n[RDocs](http://rdoc.info/projects/CanCanCommunity/cancancan) |\n[Screencast 1](http://railscasts.com/episodes/192-authorization-with-cancan) |\n[Screencast 2](https://www.youtube.com/watch?v=cTYu-OjUgDw)\n\nCanCanCan is an authorization library for Ruby >= 2.2.0 and Ruby on Rails >= 4.2 which restricts what\nresources a given user is allowed to access.\n\nAll permissions can be defined in one or multiple ability files and not duplicated across controllers, views,\nand database queries, keeping your permissions logic in one place for easy maintenance and testing.\n\nIt consists of two main parts:\n1. **Authorizations library** that allows you to define the rules to access different objects,\nand provides helpers to check for those permissions.\n\n2. **Rails helpers** to simplify the code in Rails Controllers by performing the loading and checking of permissions\nof models automatically and reduce duplicated code.\n\n## Installation\n\nAdd this to your Gemfile:\n\n    gem \'cancancan\'\n\nand run the `bundle install` command.\n\n## Define Abilities\n\nUser permissions are defined in an `Ability` class.\n\n    rails g cancan:ability\n\nHere follows an example of rules defined to read a Post model.\n```ruby\nclass Ability\n  include CanCan::Ability\n\n  def initialize(user)\n    can :read, Post, public: true\n\n    if user.present?  # additional permissions for logged in users (they can read their own posts)\n      can :read, Post, user_id: user.id\n\n      if user.admin?  # additional permissions for administrators\n        can :read, Post\n      end\n    end\n  end\nend\n```\n\nSee [Defining Abilities](https://github.com/CanCanCommunity/cancancan/wiki/defining-abilities) for details on how to\ndefine your rules.\n\n\n## Check Abilities\n\nThe current user\'s permissions can then be checked using the `can?` and `cannot?` methods in views and controllers.\n\n```erb\n<% if can? :read, @post %>\n  <%= link_to "View", @post %>\n<% end %>\n```\n\nSee [Checking Abilities](https://github.com/CanCanCommunity/cancancan/wiki/checking-abilities) for more information\non how you can use these helpers.\n\n## Fetching records\n\nOne of the key features of CanCanCan, compared to other authorization libraries,\nis the possibility to retrieve all the objects that the user is authorized to access.\nThe following:\n\n```ruby\n  Post.accessible_by(current_ability)\n```\n\nwill use your rules to ensure that the user retrieves only a list of posts that can be read.\nSee [Fetching records](https://github.com/CanCanCommunity/cancancan/wiki/Fetching-Records) for details.\n\n## Controller helpers\n\nCanCanCan expects a `current_user` method to exist in the controller.\nFirst, set up some authentication (such as [Devise](https://github.com/plataformatec/devise) or [Authlogic](https://github.com/binarylogic/authlogic)).\nSee [Changing Defaults](https://github.com/CanCanCommunity/cancancan/wiki/changing-defaults) if you need a different behavior.\n\n### 3.1 Authorizations\n\nThe `authorize!` method in the controller will raise an exception if the user is not able to perform the given action.\n\n```ruby\ndef show\n  @post = Post.find(params[:id])\n  authorize! :read, @post\nend\n```\n\n### 3.2 Loaders\n\nSetting this for every action can be tedious, therefore the `load_and_authorize_resource` method is provided to\nautomatically authorize all actions in a RESTful style resource controller.\nIt will use a before action to load the resource into an instance variable and authorize it for every action.\n\n```ruby\nclass PostsController < ApplicationController\n  load_and_authorize_resource\n\n  def show\n    # @post is already loaded and authorized\n  end\n\n  def index\n    # @posts is already loaded with all posts the user is authorized to read\n  end\nend\n```\n\nSee [Authorizing Controller Actions](https://github.com/CanCanCommunity/cancancan/wiki/authorizing-controller-actions)\nfor more information.\n\n\n### 3.3 Strong Parameters\n\nYou have to sanitize inputs before saving the record, in actions such as `:create` and `:update`.\n\nFor the `:update` action, CanCanCan will load and authorize the resource but *not* change it automatically, so the typical usage would be something like:\n\n```ruby\ndef update\n  if @post.update(post_params)\n    # hurray\n  else\n    render :edit\n  end\nend\n...\n\ndef post_params\n  params.require(:post).permit(:body)\nend\n```\n\nFor the `:create` action, CanCanCan will try to initialize a new instance with sanitized input by seeing if your\ncontroller will respond to the following methods (in order):\n\n1. `create_params`\n2. `<model_name>_params` such as `post_params` (this is the default convention in rails for naming your param method)\n3. `resource_params` (a generically named method you could specify in each controller)\n\nAdditionally, `load_and_authorize_resource` can now take a `param_method` option to specify a custom method in the controller to run to sanitize input.\n\nYou can associate the `param_method` option with a symbol corresponding to the name of a method that will get called:\n\n```ruby\nclass PostsController < ApplicationController\n  load_and_authorize_resource param_method: :my_sanitizer\n\n  def create\n    if @post.save\n      # hurray\n    else\n      render :new\n    end\n  end\n\n  private\n\n  def my_sanitizer\n    params.require(:post).permit(:name)\n  end\nend\n```\n\nYou can also use a string that will be evaluated in the context of the controller using `instance_eval` and needs to contain valid Ruby code.\n\n    load_and_authorize_resource param_method: \'permitted_params.post\'\n\nFinally, it\'s possible to associate `param_method` with a Proc object which will be called with the controller as the only argument:\n\n    load_and_authorize_resource param_method: Proc.new { |c| c.params.require(:post).permit(:name) }\n\nSee [Strong Parameters](https://github.com/CanCanCommunity/cancancan/wiki/Strong-Parameters) for more information.\n\n## Handle Unauthorized Access\n\nIf the user authorization fails, a `CanCan::AccessDenied` exception will be raised.\nYou can catch this and modify its behavior in the `ApplicationController`.\n\n```ruby\nclass ApplicationController < ActionController::Base\n  rescue_from CanCan::AccessDenied do |exception|\n    respond_to do |format|\n      format.json { head :forbidden, content_type: \'text/html\' }\n      format.html { redirect_to main_app.root_url, notice: exception.message }\n      format.js   { head :forbidden, content_type: \'text/html\' }\n    end\n  end\nend\n```\n\nSee [Exception Handling](https://github.com/CanCanCommunity/cancancan/wiki/exception-handling) for more information.\n\n\n## Lock It Down\n\nIf you want to ensure authorization happens on every action in your application, add `check_authorization` to your `ApplicationController`.\n\n```ruby\nclass ApplicationController < ActionController::Base\n  check_authorization\nend\n```\n\nThis will raise an exception if authorization is not performed in an action.\nIf you want to skip this, add `skip_authorization_check` to a controller subclass.\nSee [Ensure Authorization](https://github.com/CanCanCommunity/cancancan/wiki/Ensure-Authorization) for more information.\n\n## Wiki Docs\n\n* [Defining Abilities](https://github.com/CanCanCommunity/cancancan/wiki/Defining-Abilities)\n* [Checking Abilities](https://github.com/CanCanCommunity/cancancan/wiki/Checking-Abilities)\n* [Authorizing Controller Actions](https://github.com/CanCanCommunity/cancancan/wiki/Authorizing-Controller-Actions)\n* [Exception Handling](https://github.com/CanCanCommunity/cancancan/wiki/Exception-Handling)\n* [Changing Defaults](https://github.com/CanCanCommunity/cancancan/wiki/Changing-Defaults)\n* [See more](https://github.com/CanCanCommunity/cancancan/wiki)\n\n## Mission\n\nThis repo is a continuation of the dead [CanCan](https://github.com/ryanb/cancan) project.\nOur mission is to keep CanCan alive and moving forward, with maintenance fixes and new features.\nPull Requests are welcome!\n\nAny help is greatly appreciated, feel free to submit pull-requests or open issues.\n\n\n## Questions?\n\nIf you have any question or doubt regarding CanCanCan which you cannot find the solution to in the\n[documentation](https://github.com/CanCanCommunity/cancancan/wiki) or our\n[mailing list](http://groups.google.com/group/cancancan), please\n[open a question on Stackoverflow](http://stackoverflow.com/questions/ask?tags=cancancan) with tag\n[cancancan](http://stackoverflow.com/questions/tagged/cancancan)\n\n## Bugs?\n\nIf you find a bug please add an [issue on GitHub](https://github.com/CanCanCommunity/cancancan/issues) or fork the project and send a pull request.\n\n\n## Development\n\nCanCanCan uses [appraisals](https://github.com/thoughtbot/appraisal) to test the code base against multiple versions\nof Rails, as well as the different model adapters.\n\nWhen first developing, you need to run `bundle install` and then `appraisal install`, to install the different sets.\n\nYou can then run all appraisal files (like CI does), with `appraisal rake` or just run a specific set `appraisal activerecord_5.0 rake`.\n\nSee the [CONTRIBUTING](https://github.com/CanCanCommunity/cancancan/blob/develop/CONTRIBUTING.md) and\n[spec/README](https://github.com/CanCanCommunity/cancancan/blob/master/spec/README.rdoc) for more information.\n\n\n## Special Thanks\n\n[![Renuo AG](/logo/renuo.png)](https://www.renuo.ch)\n\nThanks to [Renuo AG](https://www.renuo.ch) for currently maintaining and supporting the project.\n\nAlso many thanks to the [CanCanCan contributors](https://github.com/CanCanCommunity/cancancan/contributors).\nSee the [CHANGELOG](https://github.com/CanCanCommunity/cancancan/blob/master/CHANGELOG.md) for the full list.\n\nCanCanCan was inspired by [declarative_authorization](https://github.com/stffn/declarative_authorization/) and\n[aegis](https://github.com/makandra/aegis).\n\n\n'