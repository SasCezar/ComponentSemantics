b'# Clearance\n\n[![Build Status](https://secure.travis-ci.org/thoughtbot/clearance.svg)](http://travis-ci.org/thoughtbot/clearance?branch=master)\n[![Code Climate](https://codeclimate.com/github/thoughtbot/clearance.svg)](https://codeclimate.com/github/thoughtbot/clearance)\n[![Documentation Quality](https://inch-ci.org/github/thoughtbot/clearance.svg?branch=master)](https://inch-ci.org/github/thoughtbot/clearance)\n[![Reviewed by Hound](https://img.shields.io/badge/Reviewed_by-Hound-8E64B0.svg)](https://houndci.com)\n\nRails authentication with email & password.\n\nClearance is intended to be small, simple, and well-tested. It has opinionated\ndefaults but is intended to be easy to override.\n\nPlease use [GitHub Issues] to report bugs. If you have a question about the\nlibrary, please use the `clearance` tag on [Stack Overflow]. This tag is\nmonitored by contributors.\n\n[GitHub Issues]: https://github.com/thoughtbot/clearance/issues\n[Stack Overflow]: http://stackoverflow.com/questions/tagged/clearance\n\n## Getting Started\n\nClearance is a Rails engine tested against Rails `>= 5.0` and Ruby `>= 2.4.0`.\n\nYou can add it to your Gemfile with:\n\n```sh\ngem "clearance"\n```\n\nRun the bundle command to install it.\n\nAfter you install Clearance, you need to run the generator:\n\n```shell\nrails generate clearance:install\n```\n\nThe Clearance install generator:\n\n* Inserts `Clearance::User` into your `User` model\n* Inserts `Clearance::Controller` into your `ApplicationController`\n* Creates an initializer file to allow further configuration.\n* Creates a migration file that either create a users table or adds any necessary\n  columns to the existing table.\n\n## Configure\n\nOverride any of these defaults in `config/initializers/clearance.rb`:\n\n```ruby\nClearance.configure do |config|\n  config.allow_sign_up = true\n  config.cookie_domain = ".example.com"\n  config.cookie_expiration = lambda { |cookies| 1.year.from_now.utc }\n  config.cookie_name = "remember_token"\n  config.cookie_path = "/"\n  config.routes = true\n  config.httponly = false\n  config.mailer_sender = "reply@example.com"\n  config.password_strategy = Clearance::PasswordStrategies::BCrypt\n  config.redirect_url = "/"\n  config.rotate_csrf_on_sign_in = true\n  config.secure_cookie = false\n  config.sign_in_guards = []\n  config.user_model = "User"\n  config.parent_controller = "ApplicationController"\nend\n```\n\n## Use\n\n### Access Control\n\nUse the `require_login` filter to control access to controller actions.\n\n```ruby\nclass ArticlesController < ApplicationController\n  before_action :require_login\n\n  def index\n    current_user.articles\n  end\nend\n```\n\nClearance also provides routing constraints that can be used to control access\nat the routing layer:\n\n```ruby\nBlog::Application.routes.draw do\n  constraints Clearance::Constraints::SignedIn.new { |user| user.admin? } do\n    root to: "admin/dashboards#show", as: :admin_root\n  end\n\n  constraints Clearance::Constraints::SignedIn.new do\n    root to: "dashboards#show", as: :signed_in_root\n  end\n\n  constraints Clearance::Constraints::SignedOut.new do\n    root to: "marketing#index"\n  end\nend\n```\n\n### Helper Methods\n\nUse `current_user`, `signed_in?`, and `signed_out?` in controllers, views, and\nhelpers. For example:\n\n```erb\n<% if signed_in? %>\n  <%= current_user.email %>\n  <%= button_to "Sign out", sign_out_path, method: :delete %>\n<% else %>\n  <%= link_to "Sign in", sign_in_path %>\n<% end %>\n```\n\n### Password Resets\n\nWhen a user resets their password, Clearance delivers them an email. You\nshould change the `mailer_sender` default, used in the email\'s "from" header:\n\n```ruby\nClearance.configure do |config|\n  config.mailer_sender = "reply@example.com"\nend\n```\n\n### Multiple Domain Support\n\nYou can support multiple domains, or other special domain configurations by\noptionally setting `cookie_domain` as a callable object. The first argument\npassed to the method is an ActionDispatch::Request object.\n\n```ruby\nClearance.configure do |config|\n  config.cookie_domain = lambda { |request| request.host }\nend\n```\n\n### Integrating with Rack Applications\n\nClearance adds its session to the Rack environment hash so middleware and other\nRack applications can interact with it:\n\n```ruby\nclass Bubblegum::Middleware\n  def initialize(app)\n    @app = app\n  end\n\n  def call(env)\n    if env[:clearance].signed_in?\n      env[:clearance].current_user.bubble_gum\n    end\n\n    @app.call(env)\n  end\nend\n```\n\n## Overriding Clearance\n\n### Routes\n\nSee [config/routes.rb](/config/routes.rb) for the default set of routes.\n\nAs of Clearance 1.5 it is recommended that you disable Clearance routes and take\nfull control over routing and URL design. This ensures that your app\'s URL design\nwon\'t be affected if the gem\'s routes and URL design are changed.\n\nTo disable the routes, change the `routes` configuration option to false:\n\n```ruby\nClearance.configure do |config|\n  config.routes = false\nend\n```\n\nYou can optionally run `rails generate clearance:routes` to dump a copy of the\ndefault routes into your application for modification.\n\n### Controllers\n\nSee [app/controllers/clearance](/app/controllers/clearance) for the default\nbehavior. Many protected methods were extracted in these controllers in an\nattempt to make overrides and hooks simpler.\n\nTo override a Clearance controller, subclass it and update the routes to\npoint to your new controller (see the "Routes" section).\n\n```ruby\nclass PasswordsController < Clearance::PasswordsController\nclass SessionsController < Clearance::SessionsController\nclass UsersController < Clearance::UsersController\n```\n\n### Redirects\n\nThe post-action redirects in Clearance are simple methods which can be\noverridden one by one, or configured globally.\n\nThese "success" methods are called for signed in users, and redirect to\n`Clearance.configuration.redirect_url` (which is `/` by default):\n\n- `passwords#url_after_update`\n- `sessions#url_after_create`\n- `sessions#url_for_signed_in_users`\n- `users#url_after_create`\n- `application#url_after_denied_access_when_signed_in`\n\nTo override them all at once, change the global configuration of `redirect_url`.\nTo change individual URLs, override the appropriate method in your subclassed\ncontroller.\n\nThese "failure" methods are called for signed out sessions:\n\n- `application#url_after_denied_access_when_signed_out`\n- `sessions#url_after_destroy`\n\nThey both default to `sign_in_url`. Override this method to change both of their\nbehavior, or override them individually to just change one.\n\n### Views\n\nSee [app/views](/app/views) for the default behavior.\n\nTo override a view, create your own copy of it:\n\n```\napp/views/clearance_mailer/change_password.html.erb\napp/views/passwords/create.html.erb\napp/views/passwords/edit.html.erb\napp/views/passwords/new.html.erb\napp/views/sessions/_form.html.erb\napp/views/sessions/new.html.erb\napp/views/users/_form.html.erb\napp/views/users/new.html.erb\n```\n\nYou can use the Clearance views generator to copy the default views to your\napplication for modification.\n\n```shell\nrails generate clearance:views\n```\n\n### Layouts\n\nBy default, Clearance uses your application\'s default layout. If you would like\nto change the layout that Clearance uses when rendering its views, simply\nspecify the layout in the `config/application.rb`\n\n```ruby\nconfig.to_prepare do\n  Clearance::PasswordsController.layout "my_passwords_layout"\n  Clearance::SessionsController.layout "my_sessions_layout"\n  Clearance::UsersController.layout "my_admin_layout"\nend\n```\n\n### Translations\n\nAll flash messages and email subject lines are stored in [i18n translations].\nOverride them like any other translation.\n\n[i18n translations]: http://guides.rubyonrails.org/i18n.html\n\nSee [config/locales/clearance.en.yml](/config/locales/clearance.en.yml) for the\ndefault behavior.\n\nYou can also install [clearance-i18n](https://github.com/thoughtbot/clearance-i18n)\nfor access to additional, user-contributed translations.\n\n### User Model\n\nSee [lib/clearance/user.rb](/lib/clearance/user.rb) for the default behavior.\nYou can override those methods as needed.\n\nNote that there are some model-level validations (see above link for detail)\nwhich the `Clearance::User` module will add to the configured model class and\nwhich may conflict with or duplicate already present validations on the `email`\nand `password` attributes. Over-riding the `email_optional?` or\n`skip_password_validation?` methods to return `true` will disable those\nvalidations from being added.\n\n### Deliver Email in Background Job\n\nClearance has a password reset mailer. If you are using Rails 4.2 and Clearance\n1.6 or greater, Clearance will use ActiveJob\'s `deliver_later` method to\nautomatically take advantage of your configured queue.\n\nIf you are using an earlier version of Rails, you can override the\n`Clearance::Passwords` controller and define the behavior you need in the\n`deliver_email` method.\n\n```ruby\nclass PasswordsController < Clearance::PasswordsController\n  def deliver_email(user)\n    ClearanceMailer.delay.change_password(user)\n  end\nend\n```\n\n## Extending Sign In\n\nBy default, Clearance will sign in any user with valid credentials. If you need\nto support additional checks during the sign in process then you can use the\nSignInGuard stack. For example, using the SignInGuard stack, you could prevent\nsuspended users from signing in, or require that users confirm their email\naddress before accessing the site.\n\n`SignInGuard`s offer fine-grained control over the process of\nsigning in a user. Each guard is run in order and hands the session off to\nthe next guard in the stack.\n\nA `SignInGuard` is an object that responds to `call`. It is initialized with a\nsession and the current stack.\n\nOn success, a guard should call the next guard or return `SuccessStatus.new` if\nyou don\'t want any subsequent guards to run.\n\nOn failure, a guard should call `FailureStatus.new(failure_message)`. It can\nprovide a message explaining the failure.\n\nFor convenience, a [SignInGuard](lib/clearance/sign_in_guard.rb) class has been\nprovided and can be inherited from. The convenience class provides a few methods\nto help make writing guards simple: `success`, `failure`, `next_guard`,\n`signed_in?`, and `current_user`.\n\nHere\'s an example custom guard to handle email confirmation:\n\n```ruby\nClearance.configure do |config|\n  config.sign_in_guards = [EmailConfirmationGuard]\nend\n```\n\n```ruby\nclass EmailConfirmationGuard < Clearance::SignInGuard\n  def call\n    if unconfirmed?\n      failure("You must confirm your email address.")\n    else\n      next_guard\n    end\n  end\n\n  def unconfirmed?\n    signed_in? && !current_user.confirmed_at\n  end\nend\n```\n\n## Testing\n\n### Fast Feature Specs\n\nClearance includes middleware that avoids wasting time spent visiting, loading,\nand submitting the sign in form. It instead signs in the designated user\ndirectly. The speed increase can be [substantial][backdoor].\n\n[backdoor]: http://robots.thoughtbot.com/post/37907699673/faster-tests-sign-in-through-the-back-door\n\nEnable the Middleware in Test:\n\n```ruby\n# config/environments/test.rb\nMyRailsApp::Application.configure do\n  # ...\n  config.middleware.use Clearance::BackDoor\n  # ...\nend\n```\n\nUsage:\n\n```ruby\nvisit root_path(as: user)\n```\n\nAdditionally, if `User#to_param` is overridden, you can pass a block in\norder to override the default behavior:\n\n```ruby\n# config/environments/test.rb\nMyRailsApp::Application.configure do\n  # ...\n  config.middleware.use Clearance::BackDoor do |username|\n    Clearance.configuration.user_model.find_by(username: username)\n  end\n  # ...\nend\n```\n\n### Ready Made Feature Specs\n\nIf you\'re using RSpec, you can generate feature specs to help prevent\nregressions in Clearance\'s integration with your Rails app over time. These\nfeature specs, will also require `factory_bot_rails`.\n\nTo Generate the clearance specs, run:\n\n```shell\nrails generate clearance:specs\n```\n\n### Controller Test Helpers\n\nTo test controller actions that are protected by `before_action :require_login`,\nrequire Clearance\'s test helpers in your test suite.\n\nFor `rspec`, add the following line to your `spec/rails_helper.rb` or\n`spec/spec_helper` if `rails_helper` does not exist:\n\n```ruby\nrequire "clearance/rspec"\n```\n\nFor `test-unit`, add this line to your `test/test_helper.rb`:\n\n```ruby\nrequire "clearance/test_unit"\n```\n\n**Note for Rails 5:** the default generated controller tests are now\nintegration tests. You will need to use the\n[backdoor middleware](#fast-feature-specs) instead.\n\nThis will make `Clearance::Controller` methods work in your controllers\nduring functional tests and provide access to helper methods like:\n\n```ruby\nsign_in\nsign_in_as(user)\nsign_out\n```\n\n### View and Helper Spec Helpers\n\nDoes the view or helper you\'re testing reference `signed_in?`, `signed_out?` or\n`current_user`? If you `require \'clearance/rspec\'`, you will have the following\nhelpers available in your view specs:\n\n```ruby\nsign_in\nsign_in_as(user)\n```\n\nThese will make the clearance view helpers work as expected by signing in either\na new instance of your user model (`sign_in`) or the object you pass to\n`sign_in_as`. If you do not call one of these sign in helpers or otherwise set\n`current_user` in your view specs, your view will behave as if there is no\ncurrent user: `signed_in?` will be false and `signed_out?` will be true.\n\n## Contributing\n\nPlease see [CONTRIBUTING.md].\nThank you, [contributors]!\n\n[CONTRIBUTING.md]: /CONTRIBUTING.md\n[contributors]: https://github.com/thoughtbot/clearance/graphs/contributors\n\n## License\n\nClearance is copyright \xc2\xa9 2009-2019 thoughtbot. It is free software, and may be\nredistributed under the terms specified in the [`LICENSE`] file.\n\n[`LICENSE`]: /LICENSE\n\n## About thoughtbot\n\n![thoughtbot](http://presskit.thoughtbot.com/images/thoughtbot-logo-for-readmes.svg)\n\nClearance is maintained and funded by thoughtbot, inc.\nThe names and logos for thoughtbot are trademarks of thoughtbot, inc.\n\nWe love open source software!\nSee [our other projects][community] or\n[hire us][hire] to design, develop, and grow your product.\n\n[community]: https://thoughtbot.com/community?utm_source=github\n[hire]: https://thoughtbot.com/hire-us?utm_source=github\n'