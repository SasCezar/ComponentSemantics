b'# Emulators written in JavaScript\n\nA list of emulators written in the JavaScript programming language.\n\nThis list started as a compilation of JavaScript emulators posted to Echo JS\nover the years. If you know about any missing emulators, please consider\nadding them to the collection: the source for this page is available on\n[GitHub](https://github.com/fcambus/jsemu). Thank you in advance.\n\n## Acorn\n\n- [Atom Tiny Emu](https://floooh.github.io/tiny8bit/atom.html) - by Andre Weissflog ([source](https://github.com/floooh/chips-test))\n- [Acorn Atom Emulator](http://phils-place.co.uk/HTeMuLator/atom/) - by Phil Mainwaring. Type "OLD" for an Easter Egg\n- [ElkJS](http://elkjs.azurewebsites.net/) - JavaScript based Acorn Electron emulator ([Source](https://github.com/dmcoles/elkjs))\n- [JSBeeb](http://bbc.godbolt.org) - JavaScript BBC Micro emulator ([Source](https://github.com/mattgodbolt/jsbeeb)) ([Development blog](http://xania.org/Emulation))\n\n## Altair\n- [MITS Altair Simulator](http://s2js.com/altair/) Front panel simulation of the 8080-based Altair, by Ian Davies, built on 8080.js\n\n## Amstrad\n\n- [CPCBox](http://web.archive.org/web/20130302051242/http://www.cpcbox.com/) - Amstrad CPC emulator in JavaScript (archive link)\n- [CPC Tiny Emu](https://floooh.github.io/tiny8bit/cpc.html) - by Andre Weissflog ([source](https://github.com/floooh/chips-test))\n\n## Apple\n\n- [Apple 1js](https://www.scullinsteel.com/apple1/) - by Will Scullin\n- [Apple2e](https://inindev.github.io/apple2e/) - Apple IIe emulator by John Clark ([Source](https://github.com/inindev/apple2e))\n- [Apple IIjs](https://www.scullinsteel.com/apple2/) - An Apple ][ Emulator in JavaScript\n- [a2](http://porkrind.org/a2/) - A fast, WebGL optimized Apple ][+ emulator\n- [Apple2JS](http://megidish.net/apple2js/) - A JavaScript emulator for the Apple II\n- [Yet Another Apple 2+ in JavaScript](http://www.skibo.net/6502/apple2/) - by Thomas Skibo\n\n## Atari\n\n- [8bit Workshop](http://8bitworkshop.com/?platform=vcs&file=examples%2Fhello) - VCS IDE by Steven Hugg, building on Javatari.js\n- [EstyJS](https://estyjs.azurewebsites.net) - A pretty fast and functional JavaScript Atari ST emulator ([Source](https://github.com/dmcoles/estyjs))\n- [Javatari.js](http://javatari.org) - Atari 2600 emulator by Paulo Augusto Peccin. ([Example cartridges online](http://www.2600online.com/adventure.html)) ([Source](https://github.com/ppeccin/javatari.js))\n- [jsA8E](http://zerstoerung.de/jsa8e/) - JavaScript version of the A8E Atari 800 XL Emulator\n\n## Commodore\n\n- [Commodore LCD emulator](http://commodore-lcd.lgb.hu/jsemu/) - by G\xc3\xa1bor L\xc3\xa9n\xc3\xa1rt "LGB"\n- [Commodore PET](http://www.skibo.net/6502/pet2001/) - by Thomas Skibo\n- [JSC64](http://www.kingsquare.nl/jsc64) - Commodore 64 emulator written in JavaScript ([Source](https://github.com/Reggino/jsc64))\n- [c64js](http://www.c64js.com) - Commodore 64 emulator written in JavaScript by Mikael Borgbrant ([Source](https://github.com/mborgbrant/c64js))\n- [C64 Tiny Emu](https://floooh.github.io/tiny8bit/c64.html) - by Andre Weissflog ([source](https://github.com/floooh/chips-test))\n- [jsSID](http://hermit.sidrip.com/jsSID.html) - SID player with minimal necessary C64 emulation ([Source](https://github.com/hermitsoft/jsSID))\n- [Kim1](http://www.robsayers.com/jskim1/) - emulation in JavaScript by Rob Sayers ([Source](https://github.com/rsayers/jskim1))\n- [SAE](http://scriptedamigaemulator.net) - Scripted Amiga Emulator ([Source](https://github.com/naTmeg/ScriptedAmigaEmulator))\n- [VIC-20 Emulator](https://www.mdawson.net/vic20chrome/vic20.php) - JavaScript VIC-20 emulator\n- [VICE.js](https://vice.janicek.co/c64/) - Versatile Commodore Emulator for JavaScript ([Source](https://github.com/rjanicek/vice.js))\n- [xc65](http://c65.lgb.hu/web-xemu/xc65.html) - "Unusable Commodore 65 emulator" by G\xc3\xa1bor L\xc3\xa9n\xc3\xa1rt (aka LGB) powered by emscripten - actually appears to be usable. See also [this page](http://c65.lgb.hu/emulator/)\n\n## Data General\n- [Novas Are Forever](http://www.novasareforever.org/novajs/index.php) - by Wild Hare Computer Systems, for the 50th anniversary.\n\n## DEC\n\n- [PDP-1 running the SpaceWar game](http://www.masswerk.at/spacewar/) and the [Minskytron demo](http://www.masswerk.at/minskytron/) - by Norbert Landsteiner\n- [PDP-8](https://programmer209.wordpress.com/2011/01/30/pdp-8-assembly-language-part-2/) and [PDP-11](https://programmer209.wordpress.com/2011/08/14/pdp-11-assembly-language-simulator/) simulators with assembly language interfaces (explanatory articles with full source, not live site) - by programmer209\n- [PDP-8I emulator](http://www.drakesmith.net/pdp8i.html) running FOCAL,1969 - by "Warlockd"\n- [Javascript PDP 11](http://skn.noip.me/pdp11/pdp11.html) - PDP-11/70 emulator with simulated front panel and a choice of operating systems. By Paul Nankervis\n- [PDP-11 Emulator](http://pdp11.aiju.de/) - A JavaScript PDP-11 emulator running UNIX Sixth Edition. By Julius Schmidt\n- [pdp11-js](http://takahirox.github.io/pdp11-js/unixv6.html) - PDP-11 emulator with UNIX V6. By Takahiro Aoyagi ([Source](https://github.com/takahirox/pdp11-js))\n\n## Nintendo\n\n- [1964js](https://github.com/schibo/1964js) - JavaScript port of the 1964 N64 emulator for Windows\n- [CycloaJS](https://app.7io.org/CycloaJS/) - JavaScript NES Emulator ([Source](https://github.com/ledyba/CycloaJS))\n- [em-fceux](https://bitbucket.org/tsone/em-fceux) - an Emscripten port of FCEUX, an emulator of NES, Famicom, Famicom Disk System (FDS), and Dendy consoles. [Demo site](https://tsone.kapsi.fi/em-fceux/)\n- [GBA.js](http://endrift.github.io/gbajs/) - Game Boy Advance in the Browser ([Source](https://github.com/endrift/gbajs))\n- [IodineGBA](http://taisel.github.io/IodineGBA/) - A GameBoy Advance emulator written entirely in JavaScript ([Source](https://github.com/taisel/IodineGBA))\n- [gba.ninja](https://gba.ninja/) - JavaScript port of VisualBoyAdvance-M, a GameBoy Advance emulator ([Source](https://github.com/simon-paris/gba.ninja))\n- [JSNES](https://fir.sh/projects/jsnes/) - A JavaScript NES emulator ([Source](https://github.com/bfirsh/jsnes))\n- [NESNES](http://koen.kivits.com/nesnes/) - JavaScript NES emulator, also available as a [web component](https://github.com/koenkivits/x-nes) ([Source](https://github.com/koenkivits/nesnes))\n- [Nezulator](http://zelex.net/nezulator/) - A NES emulator in JavaScript\n- [XNES](http://tjwei.github.io/xnes/) - Experimental JavaScript Super Nintendo emulators  ([Source](https://github.com/tjwei/xnes))\n- jsGB - A GameBoy emulator in JavaScript ([Source](https://github.com/Two9A/jsGB))\n- [jsGBC](https://ardean.github.io/jsGBC-web/) - GameBoy Color Emulator written in JavaScript ([Source](https://github.com/ardean/jsGBC))\n- [mupen64plus](http://jquesnelle.github.io/mupen64plus-ui-console/) - A port of the popular Nintendo 64 emulator for the Web ([Source](https://github.com/jquesnelle/mupen64plus-ui-console/))\n- [n64js](http://hulkholden.github.io/n64js/) - An N64 emulator in JavaScript ([Source](https://github.com/hulkholden/n64js))\n- [pinky](https://koute.github.io/pinky-web/) - A Rust based NES emulator ported to the web via WebAssembly ([Source](https://github.com/koute/pinky/tree/master/pinky-web))\n\n## Robotron / VEB Mikroelektronik\n\n- [KC85\\_Emu](http://lanale.de/kc85_emu/KC85_Emu.html) - KC85/3 and KC85/4 emulator by Alexander Lang\n- KC85/2 family emulators by Andre Weissflog ([source](https://github.com/floooh/chips-test)):\n    * [KC85/2 Tiny Emu](https://floooh.github.io/tiny8bit/kc85.html?type=kc85_2)\n    * [KC85/3 Tiny Emu](https://floooh.github.io/tiny8bit/kc85.html?type=kc85_3)\n    * [KC85/4 Tiny Emu](https://floooh.github.io/tiny8bit/kc85.html?type=kc85_4)\n- [Z1013 Tiny Emu](https://floooh.github.io/tiny8bit/z1013.html) - by Andre Weissflog ([source](https://github.com/floooh/chips-test))\n- [KC87 Tiny Emu](https://floooh.github.io/tiny8bit/z9001.html?type=kc87) - by Andre Weissflog ([source](https://github.com/floooh/chips-test))\n\n## Sega\n\n- [jsSMS](https://gmarty.github.io/jsSMS/) - JavaScript Sega Master System & Game Gear emulator ([Source](https://github.com/gmarty/jsSMS))\n- [Miracle](http://xania.org/miracle/miracle.html) - Sega Master System emulator ([Source](https://github.com/mattgodbolt/Miracle))\n\n## Sinclair\n\n- [JSSpeccy](http://jsspeccy.zxdemo.org) - A ZX Spectrum emulator in JavaScript ([Source](https://github.com/gasman/jsspeccy2))\n- [JtyOne Online ZX81 Emulator](http://www.zx81stuff.org.uk/zx81/jtyone.html) - by Simon Holdsworth\n- [Qaop/JS](http://torinak.com/qaop) - ZX Spectrum emulator\n- [ZX80 Emulator](http://nocanvas.zame-dev.org/0004/) - JavaScript ZX80 Emulator\n- [jBacteria](http://jbacteria.retrolandia.net/) - The smallest JavaScript Spectrum emulator\n- [Science of Cambridge MK14 simulator](http://www.dougrice.plus.com/dev/seg_mk14.htm) - by Doug Rice, based on Paul Robson\'s offline emulator.\n- [ZX Spectrum 48K Tiny Emy](https://floooh.github.io/tiny8bit/zx.html?type=zx48k) - by Andre Weissflog ([source](https://github.com/floooh/chips-test))\n- [ZX Spectrum 128 Tiny Emu](https://floooh.github.io/tiny8bit/zx.html?type=zx128) - by Andre Weissflog ([source](https://github.com/floooh/chips-test))\n\n## Sony\n- PSeudo - JavaScript/WebGL/WebAudio browser based PLAYSTATION emulator (aka PSX) (needs boot ROM image, not supplied) ([Source](https://github.com/dkoliris/pseudo))\n\n## Tandy\n\n- [CloudT TRS-80 Model 100 Emulator](https://bitchin100.com/CloudT/#/M100Display) - by John R. Hogerhuis ([Announcement](https://www.mail-archive.com/m100@lists.bitchin100.com/msg02714.html))\n- [MC-10 Emulator](http://mc-10.com/) - Emulator for the TRS-80 MC-10 microcomputer\n- [TRS-80 Model III Emulator](http://trsjs.48k.ca/trs80.html) a Javascript emulator for the TRS-80 Model III, by Peter Phillips\n- [JS Mocha](http://www.haplessgenius.com/mocha/) - The HTML5 CoCo 2 Emulator\n- [jTandy](http://jtandy.retrolandia.net) - Another JavaScript TRS-80 emulator\n\n## Multi-system Emulators\n\n- [JSMESS examples](https://archive.org/details/historicalsoftware) - The JavaScript MESS (Multi Emulator Super System) ([Source](https://github.com/jsmess/jsmess)) ([Notes](https://github.com/jsmess/jsmess/wiki))\n- [PCE](https://github.com/jsdf/pce) - PC emulators in JavaScript (Atari ST, [IBM PC 5150](https://jamesfriend.com.au/pce-js/ibmpc-win/), [Macintosh](https://jamesfriend.com.au/pce-js/), RC759 Piccoline)\n- [RetroArch](http://toadking.com/retroarch/) - JavaScript port of RetroArch (bundles Gambatte (Gameboy), Genesis Plus GX, Handy (Lynx), Snes9x Next, VBA Next (GameBoy Advance), Tyrquake and FinalBurn Alpha)\n- [RetroWeb](http://retroweb.maclab.org) - collection of Javascript emulators and boot media, including Apple-IIe (VisiCalc), Macintosh (System 1.0), Atari 1040ST, Commodore 64, Amiga 500 (Workbench 1.3), IBM PC Model 5150 (PC-DOS, CP/M-86, Cassette Basic), IBM PC XT (DOS, GEM 1.2, VisiCalc, Windows 1.01, 8088 Corruption demo), RC759 Piccoline (Eliza, Bil-simulation, Concurrent CP/M-86), TRS-80.\n- [YAKC](https://floooh.github.io/virtualkc/) - Z1013, Z9001, KC85/2 family, Speccy, CPC, Acorn Atom, C64, with integrated debugging UI ([source](https://github.com/floooh/yakc))\n- [Tiny Emulators](https://floooh.github.io/tiny8bit/) -  based on the same chip- and system-emulator source code as YAKC, but as minimal WASM apps without fluff ([source](https://github.com/floooh/chips-test))\n\n## PC Emulators\n\n- [Em-DOSBox](https://github.com/dreamlayers/em-dosbox) - An Emscripten port of DOSBox ([Demo](http://playdosgamesonline.com/))\n- [JS/Linux](http://bellard.org/jslinux/) - JavaScript PC emulator\n- [JsDOSBox](http://jsdosbox.sourceforge.net) - JavaScript PC DOS emulator ([Source](https://sourceforge.net/projects/jsdosbox/files/))\n- [PCjs](http://www.pcjs.org) - IBM PC Model 5150 emulator\n- [Virtual x86](http://copy.sh/v86/) - An x86 emulator written in JavaScript ([Source](https://github.com/copy/v86))\n- [jemul8](http://jemul8.com) - An object-oriented JavaScript x86 emulator for Node.js and the Browser ([Source](https://github.com/asmblah/jemul8))\n- jsbochs - Bochs PC emulator for the Browser ([Source](https://github.com/codinguncut/jsbochs))\n\n## Bare CPUs\n\n- [8008 running SCELBAL](http://www.xlnsresearch.com/scelbal.htm) by Mark G. Arnold. ("SCELBAL is the only open-source, floating-point, high-level language ever implemented on the 8008")\n- [8080 CPU emulator](http://typedarray.org/wp-content/projects/Intel8080/index.html) - Intel 8080 CPU emulator running Space Invaders ROM ([Source](https://github.com/thibaultimbert/Intel8080))\n- [Angel](https://riscv.org/software-tools/riscv-angel/) - JavaScript RISC-V ISA simulator booting linux in a web-browser ([Source](https://github.com/riscv/riscv-angel))\n- [Angular 2 6502](https://github.com/JeremyLikness/6502emulator#readme) written with TypeScript and Angular 2, by Jeremy Likness\n- [ARM-js](http://biged.github.io/arm-js/arm-js.html) - An ARM emulator written in JavaScript ([Source](https://github.com/ozaki-r/arm-js))\n- [ASM80](http://www.asm80.com) - Online assembler for 8-bit microprocessors by Martin Mal\xc3\xbd. Includes emulation of several machines: 8080, Z80, 6502, 6809. ([Sources](https://github.com/maly))\n- Basic MIPS functional simulator and [Basic MIPS pipelined simulator](http://cdn.imgtec.com/MIPSSimulator/pipeline.html) by Mianzhi Wang (morriswmz). ([Source](https://github.com/morriswmz/SimpleMIPS.js))\n- [Easy6502](http://skilldrick.github.io/easy6502/) - JavaScript 6502 tutorial and emulator ([Source](https://github.com/skilldrick/easy6502))\n- [EduMIPS64](http://www.edumips.org/edumips64.html) - [educational MIPS64 CPU](http://www.edumips.org/), ported from Java by Andrea Spadaccini using GWT (see blog [here](http://edumips64.blogspot.co.uk/2016/06/towards-javascript-port-of-edumips64.html).) ([Source](https://github.com/lupino3/edumips64))\n- [FRISCjs](http://ivanzuzak.info/FRISCjs/webapp/) - an 8-register educational RISC from the University of Zagreb, with both assembler and front panel, by Ivan \xc5\xbdu\xc5\xbeak. [Source](https://github.com/izuzak/FRISCjs)\n- [Imaginary 6502](https://www.mdawson.net/asm6502/6502asm.php) - 6502 Emulator and Assembler\n- [Intel 4004 emulator](http://e4004.szyc.org/) - by Maciej Szyc. Includes assembler and disassembler.\n- [Intel 8080 CPU Emulator](http://www.tramm.li/i8080/) - Emulates a minimal Intel 8080 Microcomputer that runs CP/M\n- [JavaScript 8080 Emulator](https://bluishcoder.co.nz/js8080/) - 8080 arcade game emulator in JavaScript\n- [Mipsdis](http://blog.loadzero.com/demo/mipsdis/demo.html) - MIPS disassembler that runs in the browser\n- [RISC Relay Computer](http://www.enscope.nl/rrca/) - Relay based computer project with a 16 bit RISC CPU. Emulator includes an assembler and source for a calculator program. By RJH. See [website](http://www.enscope.nl/rrc).\n- [RISCVEMU](http://bellard.org/riscvemu/js/) - RISC-V emulator boots 64-bit Linux. By Fabrice Bellard.\n- [Simple 8-bit Assembler Simulator](http://schweigi.github.io/assembler-simulator/) - Provides a simplified assembler syntax (based on NASM) and is simulating a x86 like CPU ([Source](https://github.com/Schweigi/assembler-simulator))\n- uARM.wasm - ARMv5TE emulator running Linux in browsers ([Source](https://github.com/TonyLianLong/uARM.wasm))\n- [Unicorn.js](https://alexaltea.github.io/unicorn.js/) - The Unicorn emulator framework, now available for JavaScript ([Source](https://github.com/AlexAltea/unicorn.js))\n- [Visual ARM1](http://visual6502.org/sim/varm/armgl.html) - JavaScript/WebGL for ARM\'s first CPU, modelling 25000 transistors at switch level and animating the original chip layout - in 3D. See [the blog post](http://blog.visual6502.org/2015/11/the-visual-arm1.html)\n- [Visual 6502](http://www.visual6502.org/JSSim/) - JavaScript simulator for the 6502 CPU, modelling thousands of transistors at switch level and animating the original chip layout. See also [expert mode](http://www.visual6502.org/JSSim/expert.html?steps=10).\n- [Visual 6800](http://www.visual6502.org/JSSim/expert-6800.html?steps=10) - JavaScript simulator for the Motorola 6800 CPU, modelling thousands of transistors at switch level and animating the original chip layout.\n- [Visulator](http://thlorenz.com/visulator/) - x86 machine emulator that visualizes how each instruction is processed ([Source](https://github.com/thlorenz/visulator))\n- [YAMD](http://yamd.xuanji.li) - Yet Another MIPS Debugger ([Source](https://github.com/zodiac/yamd))\n- [jor1k](http://s-macke.github.io/jor1k/) - OpenRISC OR1K JavaScript emulator running Linux with network support ([Source](https://github.com/s-macke/jor1k/))\n- [jslm32](http://www.ubercomp.com/jslm32/src/) - JavaScript LatticeMico32 emulator running Linux ([Source](https://github.com/ubercomp/jslm32/))\n- [ZUSIE](http://www.nablaman.com/relay/sim/zusie.html) - JavaScript simulation of [Fredrik Andersson\'s homebrew relay machine](http://www.nablaman.com/relay/) inspired by Zuse\'s machines.\n\n## Early machines\n\n- [Babbage\'s Difference Engine](http://ed-thelen.org/bab/bab-diff-JavaScript.html) (First funded 1823, first full build in 1855, first full rebuild in 1991)\n- [Babbage\'s Analytical Engine](https://www.fourmilab.ch/babbage/aem/) in JavaScript, by John Walker. (First described 1837, never completed, not yet rebuilt.) ([Documentation](https://www.fourmilab.ch/babbage/emulator.html))\n- [Turing machine](http://rendell-attic.org/gol/TMapplet/index.htm) simulated in JavaScript. See [here](http://rendell-attic.org/gol/utm/) for more information. (1936)\n- [Z1 machine\'s adder in 3D](http://zuse-z1.zib.de/simulations/z1/adders/wgl/) JavaScript/WebGL interactive simulation of the mechanical adder of Zuse\'s first machine. By Jakob Mischek ([Source](https://github.com/daign/zuse-z1.js)) (1938)\n- [Z3 machine\'s adder](http://gymoberwil.educanet2.ch/a.hu/projektarbeit/zuse/addition/addition.htm) - ripple-carry electromechanical adder simulated in JavaScript, by Henry Raymond, Patrick Seewald and Vijeinath Tissaveerasingham. [Explanation](http://gymoberwil.educanet2.ch/a.hu/projektarbeit/zuse/simu.htm) (1941)\n- [JsSSEM](http://edmundgriffiths.com/jsssem.html) - Manchester Small-Scale Experimental Machine emulator (Also check [Computer/zero](http://www.edmundgriffiths.com/czero.html) which is very loosely based on the SSEM, and its [tutorial](http://www.edmundgriffiths.com/degreezero.html)) (1948)\n- [C88](http://danieljabailey.github.io/c88-js/) - C88 computer simulation ([The Homebrew CPU inspired by the SSEM](http://bitofahack.com/post/1434913931)) (1948)\n- [EDSAC on Browser](http://nhiro.org/learn_language/repos/EDSAC-on-browser/index.html) - by NISHIO Hirokazu ([Programming guide](http://www.dcs.warwick.ac.uk/~edsac/Software/EdsacTG.pdf)) (1949)\n- [WITCH Emulator](http://emulator.witch-e.org/) - The Harwell Dekatron Machine, by Justin King. ([Source and example programs](https://github.com/jsking/witch-e)) (1951)\n- [UNIVAC I emulator](https://www.masswerk.at/virtualunivac/) - JavaScript emulator by Norbert Landsteiner (1951)\n- [ElectroData/Burroughs Datatron 205 Emulator](http://www.phkimpel.us/ElectroData-205/webUI/D205.html) - by Paul Kimpel ([Source](https://github.com/pkimpel/retro-205)) (1954)\n- [TX-0](https://www.wizforest.com/tech/tx-0/#) emulator by @wizforest, including several programs from the time. ([Instructions](https://www.wizforest.com/tech/tx-0/manual.html)) (1956)\n- [Mail\xc3\xbcfterl](http://members.aon.at/nkehrer/mailuefterl/mailuefterl.html) - JavaScript emulator by Norbert Kehrer (1958)\n- [Setun (Russian)](http://trinary.ru/projects/setunws/) and [English (archived)](https://web.archive.org/web/20170114102246/http://en.trinary.ru/projects/setunws/) - JavaScript emulator by \xd0\x9e\xd0\xb1\xd1\x83\xd1\x85\xd0\xbe\xd0\xb2 \xd0\x90\xd0\xbb\xd0\xb5\xd0\xba\xd1\x81\xd0\xb0\xd0\xbd\xd0\xb4\xd1\x80. Ternary machine from Soviet Union (1958)\n- [Digi-Comp 1](http://digicomp-1.appspot.com) ([previously](https://web.archive.org/web/20140222193139/http://www.scoopsfolks.com/digicomp1)) - educational sliding-rods plastic computer. Emulator by Larry Groebe and Kevin Williams. (1963)\n- [Digi-Comp II](https://museum.syssrc.com/joda/) - educational falling-marbles computer. Emulator by Joda Redfearn. (1965)\n- [Burroughs B5500 emulator](http://retro-b5500.blogspot.com) - Burroughs B5500 emulator in JavaScript ([Source](https://github.com/pkimpel/retro-b5500)) (1964)\n- [Apollo Guidance Computer](http://svtsim.com/moonjs/agc.html) - Moonjs a port by Shahriar Iravanian of Ronald Burkey\'s Virtual AGC. (1966)\n- [BESM-6](http://www.mailcom.com/besm6/runitnew.cgi) - with examples in Algol, Fortran, and assembler. By Leonid A. Broukhis and Michael Yaroslavtsev. More [here](http://www.mailcom.com/besm6/). (1968)\n- [CARDIAC](https://www.cs.drexel.edu/~bls96/museum/cardsim.html) - Bell Labs\' CARDIAC cardboard computer from 1969. [Instructions](https://www.cs.drexel.edu/~bls96/museum/cardiac.html) (1969)\n- [Kenbak-1](http://www.neocomputer.org/kenbak/kenbak1-JS.html) - John Blankenbaker\'s TTL-based 256byte personal computer. [More information](http://www.neocomputer.org/kenbak/) (1970)\n- [Ordinapoche](http://nguyen.univ-tln.fr/share/Archi/ordinapoche.html) - A paper computer from France, invented 1969, popularised in 1981 and 1985. ([More here](http://nguyen.univ-tln.fr/ordinapoche.html) and [see also the 1981 magazine](http://www.abandonware-magazines.org/affiche_mag.php?mag=85&num=3809&album=oui))\n- [NRI 832 Emulator](http://www.robsons.org.uk/nri832/index.html?code=0BE00CE0E3C9E04C83E0E70705) by Paul Robson. (See [blog](http://nri832.blogspot.co.uk/2012/07/javascript-nri832-now-running.html) for source.) (1971)\n\n## Calculator emulators\n\n### Microcode-level calculators\n\n- [HP21u](http://www.sydneysmith.com/products/hp21u/run/index.html), [HP25u](http://www.sydneysmith.com/products/hp25u/run/index.html), and [HP29u](http://www.sydneysmith.com/products/hp29u/run/index.html) - by Greg Sydney-Smith\n- [HP-35](http://ashleyf.github.io/HP35/) - bug-compatible emulator by Ashley Feniello [explained here](https://blogs.msdn.microsoft.com/ashleyf/2010/09/25/microcode-level-hp-35-emulator-in-javascript/) using [Eric Smith](http://nonpareil.brouhaha.com/)\'s and [Jacques Laporte](http://home.citycable.ch/pierrefleur/Jacques-Laporte/)\'s work\n- [HP-35, HP-45, HP-55, HP-65, HP-80](http://home.citycable.ch/pierrefleur/HP-Classic/HP-Classic.html) - collection of HP Classics, based on Feniello\'s work, by Francois Roulet\n- [HP-45](http://members.aon.at/nkehrer/hp45_js/hp45.html) - statically recompiled ROM by Norbert Kehrer\n- [jsEmu48](http://jadegame.com/jsemu48/) - emscripten port by Julien Meyer of HP EMU By Daniel Nilsson. ([Source](https://github.com/brizzly/jsEmu48))\n- [HP-55](http://www.sydneysmith.com/products/hp55u/run/), [HP-65](http://www.sydneysmith.com/wordpress/hp65/) and [HP-67](http://www.sydneysmith.com/wordpress/1178/hp67-microcode-emulator/) - with extra debug menu, by Greg Sydney-Smith\n- [\xd0\xbc\xd0\xba-61](http://mk-61.moy.su/emulator.html) - Elektronika\'s programmable calculators MK-61, \xd0\x913-34, \xd0\x9c\xd0\x9a-54, and \xd0\x9c\xd0\x9a-56, also the \xd0\xa4\xd0\xb5\xd0\xbb\xd0\xb8\xd0\xba\xd1\x81-\xd0\x9c (Felix M) arithmometer, a slide rule and an abacus. By Felix Lazarev, Andrey_emu, Sergey Tarasov and others.\n- [Sinclair Scientific](http://www.righto.com/sinclair) and [TI-1500](http://www.righto.com/ti) - calculator simulations including full description of the algorithms and the reverse-engineering process. By Ken Shirriff\n- [TI-42 "MBA" Programmable Calculator](https://www.pcjs.org/devices/ti42/machine/) by Jeff Parsons (PCjs)\n- [TI-55](https://www.pcjs.org/devices/ti55/) by Jeff Parsons (PCjs)\n- [TI-57 Programmable Calculator](https://www.pcjs.org/devices/ti57/machine/) by Jeff Parsons (PCjs)\n- [TI-92 Plus emulator](https://www.ocf.berkeley.edu/~pad/emu/v11.html) - JavaScript emulator for the TI-92 Plus\n- [Javascript TI-89 / TI-92+ / TI-V200 / TI-89T emulator](https://tiplanet.org/emu68k_fork/) - by Patrick Davidson and Lionel Debroux\n\n### Workalike calculators\n\n- [HP-11C](https://epxx.co/ctb/hp11c.html), [HP-12C Platinum](https://epxx.co/ctb/hp12c-platinum.html), [HP-16C](https://epxx.co/ctb/hp16c.html) - by Elvis Pf\xc3\xbctzenreuter\n- [HP-15C](http://hp15c.com/web/hp15c.html) - by Greg Hewgill. ([Source](https://github.com/ghewgill/hp15c))\n- [HP-21](http://www.sydneysmith.com/products/gss-hp21/run/index.html#) and [HP-29](http://www.sydneysmith.com/products/gss-hp29/run/index.html#) by Greg Sydney-Smith (See [here](http://www.sydneysmith.com/wordpress/hp21/) and [here](http://www.sydneysmith.com/wordpress/hp29/))\n- [HP-25](http://www.jcczone.net/hp-25.html) - by John Clenance\n- [HP-35](https://neil.fraser.name/software/hp-35/) - JavaScript emulator by Neil Fraser\n- [HP-35 SOS](http://hansklav.home.xs4all.nl/rpn/hp35sos.html) - modified HP-35 with stack overflow sensing LED, by Hans Klaver, based on Fraser\'s work\n- [HP-48](http://www.poleyland.com/hp48/index.html) - JavaScript implementation of the most commonly used HP-48 functions. More info [here](http://www.poleyland.com/hp48/help.html), by Josh Poley\n- [Olivetti Programma 101](https://biged.github.io/P101/p101viewport.html) - JavaScript emulation of the first commercial programmable desktop computer, by "Fabioamd87". [Source on GitHub](https://github.com/Fabioamd87/P101)\n- [Sinclair Cambridge Programmable](http://www.caffnib.co.uk/calculators/sinclair_prog.html) by Nigel Bromley. (Source [here](http://www.caffnib.co.uk/calculators/sinclair_prog.js).)\n\n## Miscellaneous\n\n- [C1Pjs](http://www.pcjs.org/docs/c1pjs/) - JavaScript simulation of the Challenger 1P (PCjs)\n- [Canon Cat (in JSMess)](https://archive.org/details/canoncat) - Jef Raskin\'s Forth-capable 68000-based word processor. ([Instructions](https://github.com/mamedev/mame/blob/master/src/mame/drivers/cat.cpp#L16) and [more info](http://www.canoncat.net/))\n- [CFT](https://www.bedroomlan.org/hardware/cft/microcode-emulator) - JavaScript simulation of Alexios Chouchoulas\' 16-bit homebrew TTL machine. ([More information](https://www.bedroomlan.org/hardware/cft/) including documentation and a video.)\n- [Chip-8 virtual machine](http://biged.github.io/Chip-8-Emulator/) by Alexander Dickson - see [blog entry](http://blog.alexanderdickson.com/javascript-chip-8-emulator)\n- [Chip-8 virtual machine](http://pachisystems.com/JSEmu/chip8.html) by Brian Milton ([Source](https://github.com/PachiSystems/JSEmu) may target several CPUs)\n- [Chip8 1k](http://xem.github.io/chip8/) - a code-golfed chip 8 emulator in 1k by Maxime Euzi\xc3\xa8re and others\n- [Merry8](https://github.com/doodlewind/merry8) - JavaScript Chip-8 emulator by Yifeng Wang\n- [Compucolor II Emulator](http://compucolor.org/emu/ccemu.html) - JavaScript Compucolor II Emulator\n- [Compukit UK101](http://www.avoncliff.com/uk101/) - by David Stevenson\n- [ContrAltoJS](http://www.loomcom.com/contraltojs/) - Pure JavaScript implementation of the ContrAlto Xerox Alto emulator ([Source](https://github.com/sethm/ContrAltoJS))\n- [COSMAC Elf-ish](http://www.donnelly-house.net/programming/cdp1802/simelf/) - simulator by William Donnelly\n- [DCMO5 Online](http://dcmo5.free.fr/online/) - Thomson MO5 JavaScript emulator\n- [Dodo Playground](https://play.dodolabs.io/?code=51447f62) - IDE and simulator for 6502-based Dodo homebrew game system by Peter Noyes\n- [Enterprise-128 JavaScript Emulator](http://ep.lgb.hu/jsep/demo/?autostart=yes) - by G\xc3\xa1bor L\xc3\xa9n\xc3\xa1rt "LGB", based on JSSpeccy\n- [ESP8266 Game Engine](https://corax89.github.io/esp8266Game/index.html) - a console-game-oriented virtual machine running on ESP8266, by Corax. ([Source](https://github.com/corax89/esp8266_game_engine))\n- [Hack](https://diversen.github.io/hack-emulator-js/) - emulator of the computer from [nand2tetris](http://nand2tetris.org), by diversen. ([Source](https://github.com/diversen/hack-emulator-js).)\n- [Heathkit ET3400](http://phils-place.co.uk/demos/et3400/) - by Phil Mainwaring. Click "Do" then "0000". ([Instructions](http://phils-place.co.uk/demos/et3400/heathkit_3400_trainer_manual_pages_46_to_104_edit_1.txt))\n- [IBM 5110 Emulator](http://members.aon.at/nkehrer/ibm_5110/emu5110.html) by Norbert Kehrer runs Basic or APL.\n- [JS99\'er](http://js99er.net/) - TI-99/4A emulator written in JavaScript ([Source](https://github.com/Rasmus-M/Js99er))\n- [jsH89](http://heathkit.garlanger.com/emulator/jsH89/) - Heathkit H89 emulator (runs CP/M) by Mark Garlanger\n- JSGS - Experimental JavaScript implementation of the Pico-8 fantasy console ([Source](https://github.com/burakcan/jsgs))\n- [jsMSX](http://jsmsx.sourceforge.net/) - The first MSX emulator 100% written in JavaScript\n- [JsPspEmu](http://jspspemu.com) - JavaScript PSP emulator ([Source](https://github.com/jspspemu/jspspemu))\n- [JSVecX](http://www.twitchasylum.com/jsvecx/) - JavaScript port of the VecX Vectrex emulator\n- [KM-Z80 web](http://hp.vector.co.jp/authors/VA016157/kmz80web10/kmz80web.html) emulator for Sharp MZ-80K, by Katsumi Morimatsu. GOTO $1200 to start KM-BASIC. ([More information](http://hp.vector.co.jp/authors/VA016157/kmz80web10/))\n- [laser500emu](https://nippur72.github.io/laser500emu) emulator for Video Technology (VTech) Laser 350/500/700, by Antonino Porcino.\n- [Little Man Computer](http://matt.krutar.org/LMC4/) a minimal CPU for teaching - emulator by Matthew Krutar. ([Background](https://en.wikipedia.org/wiki/Little_man_computer))\n- [Little Man Computer](http://paulhankin.github.io/lmc/lmc.html) a minimal CPU for teaching - emulator by Paul Hankin. ([Background](https://en.wikipedia.org/wiki/Little_man_computer))\n- [Little Man Computer](http://peterhigginson.co.uk/LMC/) a minimal CPU for teaching - emulator by Peter Higginson. ([Background](https://en.wikipedia.org/wiki/Little_man_computer))\n- [Machine in a machine](http://js1k.com/2010-first/details/455) - Turing Machine Implementation in 1k from the [JS1k competition](http://js1k.com/)\n- [Marmmodore-1K](http://js1k.com/2016-elemental/details/2415) - minimal 8-bit computer in 1k by Felipe Alfonso\n- [NanoWasp](http://www.nanowasp.org) - A MicroBee emulator\n- [Nascom 2 emulator](http://thorn.ws/jsnascom/jsnascom.html) by Tommy Thorn. (J to start Basic) ([Source](https://github.com/tommythorn/jsnascom))\n- [One Instruction Set Computer (OISC)](https://www.cs.drexel.edu/~bls96/oisc/OISC.html) by Peter Crampton, presented by Brian L. Stuart. ([Explanation](https://www.cs.drexel.edu/~bls96/oisc/))\n- [Orao](http://orao.hrvoje.org/) - Orao emulator by Hrvoje Cavrak ([More information](https://github.com/hrvach/OraoJs))\n- PC-01 Lviv - An emulator for the PC-01 Lviv (Ukrainian home computer) ([Source](https://github.com/dolgarev/emulator-pc01-lviv))\n- [RockyJS](https://pebble.github.io/rockyjs/) - Pebble watch interpreter/emulator\n- [Radio-86RK](http://rk86.ru) Radio-86RK emulator in JavaScript (Intel 8080 based 8-bit Russian home computer) ([Source](https://github.com/begoon/rk86-js))\n- [Setunka](http://www.edmundgriffiths.com/setunka.html) - Ternary computing for the browser\n- [SAP-1](http://ellisgl.github.io/SAP-1-CPU/) JavaScript emulation of the Simple As Possible TTL machine from Malvino\'s book, Digital Computer Electronics. By Kenneth Ellis McCall. ([Source](https://github.com/ellisgl/SAP-1-CPU))\n- [Turbo Pascal](https://github.com/lkesteloot/turbopascal) - A web-based Pascal compiler that runs a subset of Turbo Pascal 5.5 code\n- [Vector06js](http://sensi.org/scalar/ware/468/) - Vector-06C (AKA \xd0\x92\xd0\xb5\xd0\xba\xd1\x82\xd0\xbe\xd1\x80-06\xd0\xa6) JavaScript emulator by Viacheslav Slavinsky. Also runnable [here](https://svofski.github.io/vector06js/). ([Source](https://github.com/svofski/vector06js).)\n- Virt.js - JavaScript emulation library ([Source](https://github.com/arcanis/virtjs))\n- [Visual Computer](http://www1.idc.ac.il/vic/software/computer/) a minimal CPU for teaching by Shimon Schocken. ([Web site](https://sites.google.com/site/schocken/thevisualcomputer))\n- [WebMSX](http://webmsx.org/) - WebMSX, or simply WMSX, is a new MSX emulator designed for the Web ([Source](https://github.com/ppeccin/webmsx))\n- [Wireworld computer](https://dested.com/projects/wire/) - Javascript port by Salvatore Aiello of the prime-generating computer implemented in the Wireworld cellular automaton, as described [here](http://www.quinapalus.com/wi-index.html).\n\n## Adventure Game Engines\n\n- [Emscripten ScummVM](http://clb.demon.fi/html5scummvm/) - Emscripten fork of the ScummVM engine ([Source](https://github.com/juj/emscripten-scummvm))\n- [IFVMS](https://github.com/curiousdannii/ifvms.js) - Infocom/Inform Web interpreter\n- [Parchment](https://github.com/curiousdannii/parchment) - Infocom/Inform Web interpreter\n- [ZZTJS](https://github.com/bstreiff/zztjs) - ZZT game engine in JavaScript\n- [ngPAWS](https://github.com/Utodev/ngPAWS) - Professional Adventure Writer (PAW) Web interpreter\n\n## See also (lists of JavaScript emulators elsewhere)\n\n- [A Big List of Browser-Based Emulators](https://archive.vg/blog/a-big-list-of-browser-based-emulators-and-ports-of-classic-games) by Richard Moss\n- [Qaop/JS \xe2\x80\x93 Emulator links](http://torinak.com/qaop/links) by Jan Bobrowski\n\n## Additional Information\n\nThis resource collection is maintained by Frederic Cambus.\n\n- Site: https://www.cambus.net\n\n## License\n\n[![CC0](https://licensebuttons.net/p/zero/1.0/88x31.png)](https://creativecommons.org/publicdomain/zero/1.0/)\n\nTo the extent possible under law, [Frederic Cambus](https://www.cambus.net) has waived all copyright and related or neighboring rights to this work.\n\n\n'