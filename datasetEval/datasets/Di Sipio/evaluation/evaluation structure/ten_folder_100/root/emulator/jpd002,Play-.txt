b'# Play!\n\nPlay! is a PlayStation 2 emulator for Windows, macOS, UNIX, Android & iOS platforms.\n\nCompatibility information is available on the official [Compatibility Tracker](https://github.com/jpd002/Play-Compatibility). If a specific game\ndoesn\'t work with the emulator, please create a new issue there.\n\nFor more information, please visit [purei.org](http://purei.org).\n\n## Building ##\n\n### Getting Started ###\nFirst you\'ll need to clone this repo which contains the emulator source code, along side the submodules required to build Play!.\n```\ngit clone --recurse-submodules https://github.com/jpd002/Play-.git\ncd Play-\n```\n\n### Building for Windows ###\nThe Easiest way to build the project on windows is to open Qt Creator and directed it to the cmake file in /project/dir/Play-/CMakeLists.txt.\nYou can also build the project using Visual Studio or cmdline, for that you must follow these isnstruction:\nTo build for Windows you will need to have CMake installed on your system.\n```\nmkdir build\ncd build\n```\n```\n# Not specifying -G would automatically generate 32-bit projects.\ncmake .. -G"Visual Studio 15 2017 Win64" -DCMAKE_PREFIX_PATH="C:\\Qt\\5.10.1\\msvc2017_64" -DUSE_QT=YES\n```\nYou can now build the project by opening the generated Visual Studio Solution or continue through cmdline:\n```\ncmake --build . --config Release\n```\nNote: --config can take any of Release/Debug/RelWithDebInfo\n\n### Building for macOS & iOS ###\nIf you don\'t have CMake installed on your system, you can install it using brew with the following command: `brew install cmake`.\n\nThere are two ways to generate a build for macOS, either by using makefiles or by using Xcode.\n```\nmkdir build\ncd build\n```\n```\n# Not specifying -G would automatically pick Makefiles\ncmake .. -G"Xcode" -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH=~/Qt/5.1.0/clang_64/\ncmake --build . --config Release\n# OR\ncmake .. -G"Unix Makefiles" -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH=~/Qt/5.1.0/clang_64/\ncmake --build .\n```\nTo generate a build for iOS, you will need to add the following parameters to the CMake invocation:\n`-DCMAKE_TOOLCHAIN_FILE=../../../Dependencies/cmake-ios/ios.cmake -DTARGET_IOS=ON`\n\niOS build doesnt use Qt so please omit `-DCMAKE_PREFIX_PATH=...`\n\nNote: while iOS build can be generated with Makefiles, they will not be FAT binaries.\n\nExample:\n`cmake .. -G"Xcode" -DCMAKE_TOOLCHAIN_FILE=../deps/Dependencies/cmake-ios/ios.cmake -DTARGET_IOS=ON`\n\n### Building for UNIX ###\nif you dont have cmake or openal lib installed, you\'ll also require Qt (preferably version 5.6) you can install it using your OS packaging tool, e.g ubuntu `apt install cmake libalut-dev`\non UNIX systems there are 3 ways to setup a build: using qt creator, makefile or Ninja\n - QT Creator\n    - Open Project -> `Play/CMakeLists.txt`\n\n - Makefile/Ninja\n```\nmkdir build\ncd build\n```\n```\n# Not specifying -G would automatically pick Makefiles\ncmake .. -G"Unix Makefiles" -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH=/opt/qt56/\ncmake --build .\n# OR\ncmake .. -G"Ninja" -DCMAKE_PREFIX_PATH=/opt/qt56/\ncmake --build . --config Release\n```\nNote `CMAKE_PREFIX_PATH` refers to the qt directory containing bin/libs folder, the above example uses a backport repo to install qt5.6 on trusty, if you install qt from qt offical website, your `CMAKE_PREFIX_PATH` might look like this `~/Qt5.6.0/5.6/gcc_64/`\n\n### Building for Android ###\n\nBuilding for Android has been tested on macOS and UNIX environments.\nAndroid can be built using Android Studio or through Gradle.\n\n- Android Studio:\n   - Files->Open Projects->Directory To `Play/build_android`\n   - Install NDK using sdk manager\n   - edit/create `Play/build_android/local.properties`\n      - OSX: add a newline `ndk.dir=/Users/USER_NAME/Library/Android/sdk/ndk-bundle` replacing `USER_NAME` with your macOS username\n      - UNIX: add a newline `ndk.dir=~/Android/Sdk/ndk-bundle`\n      - Windows: add a newline `C:\\Users\\USER_NAME\\AppData\\Local\\Android\\sdk\\ndk-bundle`\n      - Please Leave an empty new line at the end of the file\n\nNote, these examples are only valid if you installed NDK through Android Studio\'s SDK manager.\nOtherwise you must specify the correct location to Android NDK.\nOnce this is done, you can start the build.\n\n- Gradle: Prerequisite Android SDK & NDK (Both can be installed through Android Studio)\n   - edit/create `Play/build_android/local.properties`\n      - OSX:\n        - add a newline `sdk.dir=/Users/USER_NAME/Library/Android/sdk` replacing `USER_NAME` with your macOS username\n        - add a newline `ndk.dir=/Users/USER_NAME/Library/Android/sdk/ndk-bundle` replacing `USER_NAME` with your macOS username\n      - UNIX:\n        - add a newline `sdk.dir=~/Android/Sdk`\n        - add a newline `ndk.dir=~/Android/Sdk/ndk-bundle`\n      - Windows:\n        - add a newline `sdk.dir=C:\\Users\\USER_NAME\\AppData\\Local\\Android\\sdk`\n        - add a newline `ndk.dir=C:\\Users\\USER_NAME\\AppData\\Local\\Android\\sdk\\ndk-bundle`\n      - Please Leave an empty new line at the end of the file\n\nNote, these examples are only valid if you installed NDK through Android Studio\'s SDK manager.\nOtherwise you must specify the correct location to Android NDK.\nOnce this is done, you can start the build.\n```\ncd Play/build_android\nsh gradlew assembleDebug\n```\n##### about Release/Signed builds. #####\n\nBuilding through Android Studio, you have the option to \xe2\x80\x9cGenerate Signed APK\xe2\x80\x9d.\n\nBuilding through Gradle, you must create a text file `Play/build_android/keystore.properties` and add the following properties to it, `storeFile`,`storePassword`,`keyAlias`,`keyPassword`.\nE.g of `keystore.properties`\n```\nstoreFile=/location/to/my/key.jks\nstorePassword=mysuperhardpassword\nkeyAlias=myalias\nkeyPassword=myevenharderpassword\n```\nPlease Leave an empty new line at the end of the file\n```\ncd Play/build_android\nsh gradlew assembleRelease\n# or on Windows\ngradlew.bat assembleRelease\n```\n'