b"# PCE.js\n\nPCE.js runs classic computers in the browser. It's a port of Hampa Hug's excellent [PCE](http://www.hampa.ch/pce/) emulator, put together by [James Friend](https://jamesfriend.com.au/).\n\nPCE.js currently emulates Mac Plus, IBM PC/XT and Atari ST functionally in recent versions of Chrome and Firefox.\n\nMore info: \n\n- [Demo running Mac Plus + System 7](https://jamesfriend.com.au/pce-js/) \n- [Why port emulators to the browser?](https://jamesfriend.com.au/why-port-emulators-browser)\n\n![PCE.js Mac Plus](https://jamesfriend.com.au/files/pcejs.png)\n\n## Installing from npm\n\nPCE.js is available from npm as a set of [browserify](http://github.com/substack/node-browserify) compatible node packages.\n\nThere is one for each emulator build:\n- [pcejs-macplus](http://npmjs.org/package/pcejs-macplus) - Mac Plus\n- [pcejs-ibmpc](http://npmjs.org/package/pcejs-ibmpc) - IBM PC/XT\n- [pcejs-atarist](http://npmjs.org/package/pcejs-atarist) - Atari ST\n\nSee each of the above links for install and usage instructions\n\n## How to build PCE.js from source\n\n**Note:** I recommend instead just using the npm packages listed above, unless you want to hack on the C source of the emulators themselves (which is not necessary if you just want to get them running on a page).\n\nMake sure you've installed [node.js](http://nodejs.org/download/)\n\nRun `npm install` in this directory (the source root). This should install the \nrequired node.js tools to build the commonjs modules and run the examples.\n\nInstall the [Emscripten SDK](https://kripken.github.io/emscripten-site/docs/getting_started/downloads.html).\n\nInstall and activate the latest version of the SDK, then source it, so that running `emcc -v` successfully returns current Emscripten version. Instructions for doing this are on the [Emscripten SDK](https://kripken.github.io/emscripten-site/docs/getting_started/downloads.html) page.\n\nRun `./pcejs_build env` once which will create a `pcejs_build_conf.sh` file if it \ndoesn't already exist. \n\nSimilarly you should be working with [my fork of PCE](https://github.com/jsdf/pce) on the \n`pcejs` branch, but presumably that's where you're reading this right now.\n\nMost of the build process involves running the `./pcejs_build` bash script in the \nroot of the repo. Commands should be run like `./pcejs_build [command]` or `pcejs_build [command] [arg]`\n\nCommands you might be interested in:\n\n- build [target]: Configure, build and compile emulator to JS. [target] is either \n  one of `macplus`, `ibmpc`, `atarist` or `native`. Specifiying an emulator arch \n  builds the in-browser emulator JS file for that architecture. `native` builds all PCE \n  executables normally. If you don't specify a [target] then all JS targets will\n  be built.\n- rebuild: Build last again\n- clean: Clean source tree\n- [nothing]: Build all emulator JS targets and (commonjs modules for each)\n\nOther commands (used internally by build scripts)\n\n- env: Print build environment variables\n- configure: Configure emulator build\n- make: Compile emulator source to LLVM bitcode (used by 'build')\n- remake: Recompile only changed files of emulator source to LLVM bitcode\n- afterbuild: Convert LLVM bitcode to JS\n- module: Build commonjs module (used by commonjs module prepublish scripts)\n\nRun `./pcejs_build build [target]` to build the emulator, where `[target]` is `macplus`, \n`ibmpc` or `atarist`. This will output a `pce-[target].js` file to `dist/`.\n\nOnce the output file for the target you're interested in has been built, you can:\n- run the examples in the `example/` directory with `example/run_example.sh [target]`\n- build the npm packages in the `commonjs/[target]/` directories by running \n  `npm run prepublish` in the respective directory.\n\n\n\n\n"