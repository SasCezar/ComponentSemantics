b'[![Join the chat at https://gitter.im/copy/v86](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/copy/v86)\n\n\nDemos\n-\n\n- [Windows 98](https://copy.sh/v86/?profile=windows98)\n- [Linux](https://copy.sh/v86/?profile=linux26)\n- [Linux 3](https://copy.sh/v86/?profile=linux3)\n- [KolibriOS](https://copy.sh/v86/?profile=kolibrios)\n- [FreeDOS](https://copy.sh/v86/?profile=freedos)\n- [Windows 1.01](https://copy.sh/v86/?profile=windows1)\n- [Archlinux](https://copy.sh/v86/?profile=archlinux)\n\n\nAPI examples\n-\n\n- [Basic](examples/basic.html)\n- [Programatically using the serial terminal](examples/serial.html)\n- [A Lua interpreter](examples/lua.html)\n- [Two instances in one window](examples/two_instances.html)\n- [Saving and restoring emulator state](examples/save_restore.html)\n\nUsing v86 for your own purposes is as easy as:\n\n```javascript\nvar emulator = new V86Starter({\n    screen_container: document.getElementById("screen_container"),\n    bios: {\n        url: "../../bios/seabios.bin",\n    },\n    vga_bios: {\n        url: "../../bios/vgabios.bin",\n    },\n    cdrom: {\n        url: "../../images/linux.iso",\n    },\n    autostart: true,\n});\n```\n\nSee [API](docs/api.md).\n\n\nHow does it work?\n-\n\nv86 emulates an x86-compatible CPU and hardware. Here\'s a list of emulated hardware:\n\n- An x86 compatible CPU. The instruction set is around Pentium 1 level. Some\n  features are missing, more specifically:\n  - Task gates, far calls in protected mode\n  - 16 bit protected mode features\n  - Single stepping\n  - MMX, SSE\n  - A bunch of FPU instructions\n  - Some exceptions\n- A floating point unit (FPU). Calculations are done with JavaScript\'s double\n  precision numbers (64 bit), so they are not as precise as calculations on a\n  real FPU (80 bit).\n- A floppy disk controller (8272A).\n- An 8042 Keyboard Controller, PS2. With mouse support.\n- An 8254 Programmable Interval Timer (PIT).\n- An 8259 Programmable Interrupt Controller (PIC).\n- A CMOS Real Time Clock (RTC).\n- A generic VGA card with SVGA support and Bochs VBE Extensions.\n- A PCI bus. This one is partly incomplete and not used by every device.\n- An IDE disk controller.\n- An NE2000 (8390) PCI network card.\n- A virtio filesystem.\n- A SoundBlaster 16 sound card.\n\n\nTesting\n-\n\nThe disk images are not included in this repository. You can download them\ndirectly from the website using:\n\n`wget -P images/ https://copy.sh/v86/images/{linux.iso,linux3.iso,kolibri.img,windows101.img,os8.dsk,freedos722.img,openbsd.img}`.\n\nA testsuite is available in `tests/full/`. Run it using `node tests/full/run.js`.\n\n\nHow to build, run and embed?\n-\n\n- Building is only necessary for releases, open debug.html and everything should load out of the box\n- If you want a compressed and fast (i.e. with debug code removed) version, you\n  need Closure Compiler. Download it as shown below and run `make build/v86_all.js`.\n- ROM and disk images are loaded via XHR, so if you want to try out `index.html`\n  locally, make sure to serve it from a local webserver. You can use `make run`\n  to serve the files using Python\'s SimpleHTTPServer.\n- If you only want to embed v86 in a webpage you can use libv86.js. For\n  usage, check out the [API](docs/api.md) and [examples](examples/).\n- A couple of disk images are provided for testing. You can check them out\n  using `wget -P images/ https://copy.sh/v86/images/{linux.iso,linux3.iso,kolibri.img,windows101.img,os8.dsk,freedos722.img,openbsd.img}`.\n\n\n**Short summary:**\n\n```bash\n# grab the main repo\ngit clone https://github.com/copy/v86.git && cd v86\n\n# grab the disk images\nwget -P images/ https://copy.sh/v86/images/{linux.iso,linux3.iso,kolibri.img,windows101.img,os8.dsk,freedos722.img,openbsd.img}\n\n# grab closure compiler\nwget -P closure-compiler https://dl.google.com/closure-compiler/compiler-latest.zip\nunzip -d closure-compiler closure-compiler/compiler-latest.zip *.jar\n\n# build the library\nmake build/libv86.js\n\n# run the tests\n./tests/full/run.js\n```\n\nCompatibility\n-\n\nHere\'s an overview of the operating systems supported in v86:\n\n- Linux works pretty well.\n  - Tinycore (3.16, 4.8 kernel): Works.\n  - Nanolinux works.\n  - Archlinux works with some caveats. See [archlinux.md](docs/archlinux.md).\n  - Damn Small Linux (2.4 Kernel): Doesn\'t work.\n- ReactOS works.\n- FreeDOS, Windows 1.01 and MS-DOS run very well.\n- KolibriOS works. A few applications need SSE.\n- Haiku boots, but takes very long (around 30 minutes).\n- No Android version seems to work, you still get a shell.\n- Windows 1, 3, 95 and 98 work. Windows XP is unstable, but can work with some\n  tweaks ([see this issue](https://github.com/copy/v86/issues/86)). Other\n  versions might work but haven\'t been tested.\n- Many hobby operating systems work.\n- FreeBSD works.\n- OS/2 doesn\'t work.\n\nYou can get some infos on the disk images here: https://github.com/copy/images.\nThe Windows images are from [WinWorld](https://winworldpc.com/).\n\n\nHow can I contribute?\n-\n\n- Add new features (hardware devices, fill holes in the CPU), fix bugs. Check\n  out the issues section and contact me if you need help.\n- Report bugs.\n- If you want to donate, let me know.\n\nLicense\n-\n\n- Source code and most tests: Simplified BSD License, see [LICENSE](LICENSE).\n- QEMU test suite: See [tests/qemu/LICENSE](LICENSE).\n\n\nCredits\n-\n\n- CPU test cases via QEMU, http://wiki.qemu.org/Main_Page\n- More tests via [kvm-unit-tests](https://www.linux-kvm.org/page/KVM-unit-tests)\n- [Disk Images](https://github.com/copy/images)\n- [The jor1k project](https://github.com/s-macke/jor1k) for 9p, filesystem and uart drivers\n- [WinWorld](https://winworldpc.com/) sources of some old operating systems\n\n\nMore questions?\n-\n\nShoot me an email to `copy@copy.sh`. Please don\'t tell about bugs via mail,\ncreate a bug report on GitHub instead.\n\n\nAuthor\n-\n\nFabian Hemmer (http://copy.sh/, `copy@copy.sh`)\n'