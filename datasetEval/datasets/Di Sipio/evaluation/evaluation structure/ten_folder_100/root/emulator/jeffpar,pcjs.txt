b'---\nlayout: page\npermalink: /\nmachines:\n  - id: ibm5150\n    type: pcx86\n    resume: 1\n    name: "IBM PC (Model 5150) with Monochrome Display"\n    config: /devices/pcx86/machine/5150/mda/64kb/machine.xml\n  - id: demoC1P\n    type: c1p\n    config: /devices/c1p/machine/8kb/large/machine.xml\n---\n\nPCjs Machines\n-------------\n\nWelcome to PCjs, home of [PCx86](/pubs/docs/pcx86/), the original IBM PC simulation that runs in your web browser.  It is\none of several JavaScript Machines in the [PCjs Project](https://github.com/jeffpar/pcjs), an open-source project that\nincludes:\n\n* [PCx86](/pubs/docs/pcx86/), an x86-based emulator of the [IBM PC and PC-compatibles](/devices/pcx86/machine/)\n* [PC8080](/modules/pc8080/), an 8080 machine emulator (see [Space Invaders](/devices/pc8080/machine/invaders/) and the [VT100 Terminal](/devices/pc8080/machine/vt100/))\n* [C1Pjs](/pubs/docs/c1pjs/), an emulation of the 6502-based [Ohio Scientific Challenger 1P](/devices/c1p/)\n* [PDPjs](/pubs/docs/pdpjs/), a set of machine emulation modules supporting the DEC [PDP-10](/devices/pdp10/machine/) and [PDP-11](/devices/pdp11/machine/)\n* [PCjs Devices](/modules/devices/), for simple machines like the [TI-57 Calculator](/devices/ti57/machine/), the [Game of Life](/devices/leds/life/), and [Lite-Brite](/devices/leds/litebrite/)\n\nAll PCjs machine simulations are written entirely in [JavaScript](/modules/).  No Flash, Java or other plugins are\nrequired.  Supported browsers include modern versions of Chrome, Safari, Firefox, Internet Explorer (v9.0 and up), Edge,\nand assorted mobile browsers.\n\n{% include machine.html id="ibm5150" %}\n\nThe PCjs [machine](/devices/pcx86/machine/5150/mda/64kb/) above uses [PCx86](/pubs/docs/pcx86/) configured with\nan Intel 8088 running at 4.77Mhz, with 64Kb of RAM and an IBM Monochrome Display Adapter.  The machine is also available\nwith a [Control Panel](/devices/pcx86/machine/5150/mda/64kb/debugger/) featuring the built-in PCx86 Debugger.\nFor even greater control, build your own PC. The [PCx86 Documentation](/pubs/docs/pcx86/) will help you get started.\n\nPCx86 has steadily evolved to support more classic x86-based machines, including the IBM PC XT, the 80286-based IBM PC AT,\nand the 80386-based COMPAQ DeskPro 386.  PCx86 fully supports the original machine ROMs, video cards, etc, and all\nmachines run at their original speeds.\n\nThe goals of the [PCjs Project](/pubs/docs/about/) are to create fast, full-featured simulations of classic\ncomputer hardware, help people understand how these early machines worked, make it easy to experiment with different\nmachine configurations, and provide a platform for running and analyzing old computer software.\n\nDemos\n-----\n\nSome pre-configured machines are shown below, ready to run BASIC, DOS, Windows, OS/2, and other assorted software.\n\n![IBM PC AT w/EGA, OS/2 1.0](/disks/pcx86/os2/ibm/1.0/thumbnail.jpg "link:/disks/pcx86/os2/ibm/1.0/:200:120")\n![IBM PC running VisiCalc](/apps/pcx86/1981/visicalc/thumbnail.jpg "link:/apps/pcx86/1981/visicalc/:200:120")\n![IBM PC running DONKEY.BAS](/apps/pcx86/1981/donkey/thumbnail.jpg "link:/apps/pcx86/1981/donkey/:200:120")\n![IBM PC XT w/EGA, Windows 1.0](/disks/pcx86/windows/1.00/thumbnail.jpg "link:/disks/pcx86/windows/1.00/:200:120")\n![IBM PC XT w/CGA, Windows 1.01](/disks/pcx86/windows/1.01/cga/thumbnail.jpg "link:/disks/pcx86/windows/1.01/cga/:200:120")\n![IBM PC XT w/EGA, Windows 1.01](/disks/pcx86/windows/1.01/thumbnail.jpg "link:/disks/pcx86/windows/1.01/:200:120")\n![COMPAQ DeskPro 386, Windows/386](/disks/pcx86/windows/2.0x/thumbnail.jpg "link:/disks/pcx86/windows/2.0x/:200:120")\n![IBM PC AT w/EGA, Windows 3.0](/disks/pcx86/windows/3.00/thumbnail.jpg "link:/disks/pcx86/windows/3.00/:200:120")\n![IBM PC AT w/VGA, Windows 3.1](/disks/pcx86/windows/3.10/thumbnail.jpg "link:/disks/pcx86/windows/3.10/:200:120")\n![COMPAQ DeskPro 386, Windows 95](/disks/pcx86/windows/win95/4.00.950/thumbnail.jpg "link:/disks/pcx86/windows/win95/4.00.950/:200:120")\n![IBM PC w/MDA, CP/M-86](/disks/pcx86/cpm/1.1b/thumbnail.jpg "link:/disks/pcx86/cpm/1.1b/:200:120")\n![Microsoft Adventure (1981)](/disks/pcx86/games/microsoft/adventure/thumbnail.jpg "link:/disks/pcx86/games/microsoft/adventure/:200:120")\n![IBM Multiplan (1982)](/disks/pcx86/apps/ibm/multiplan/1.00/thumbnail.jpg "link:/disks/pcx86/apps/ibm/multiplan/1.00/:200:120")\n![Executive Suite (1982)](/apps/pcx86/1982/esuite/thumbnail.jpg "link:/apps/pcx86/1982/esuite/:200:120")\n![Zork I (1982)](/disks/pcx86/games/infocom/zork1/thumbnail.jpg "link:/disks/pcx86/games/infocom/zork1/:200:120")\n![Exploring the IBM PC (1983)](/disks/pcx86/apps/ibm/exploring/5150/mda/thumbnail.jpg "link:/disks/pcx86/apps/ibm/exploring/5150/mda/:200:120")\n![Adventures in Math (1983)](/apps/pcx86/1983/adventmath/thumbnail.jpg "link:/apps/pcx86/1983/adventmath/:200:120")\n![Microsoft Word (1984)](/disks/pcx86/apps/microsoft/word/1.15/thumbnail.jpg "link:/disks/pcx86/apps/microsoft/word/1.15/:200:120")\n![Fantasy Land (1984)](/disks/pcx86/apps/ibm/fland/thumbnail.jpg "link:/disks/pcx86/apps/ibm/fland/:200:120")\n![Rogue (1985)](/apps/pcx86/1985/rogue/thumbnail.jpg "link:/apps/pcx86/1985/rogue/:200:120")\n\nThere are many more [PCx86 Demos](/devices/pcx86/machine/#ready-to-run-app-demos), including an\n[IBM PC with Dual Displays](/devices/pcx86/machine/5150/dual/64kb/) demonstrating early multi-monitor support,\nand multiple IBM PC XT machines running side-by-side with [CGA Displays](/devices/pcx86/machine/5160/cga/256kb/array/)\nand [EGA Displays](/devices/pcx86/machine/5160/ega/640kb/array/).\n\nC1Pjs\n-----\n\nBelow is the [OSI Challenger C1P](/pubs/docs/c1pjs/), another simulation in the PCjs Project.\nIt simulates Ohio Scientific\'s 6502-based microcomputer, released in 1978.  More details about this simulation\nand the original machine are available in the [C1Pjs Documentation](/pubs/docs/c1pjs/).\n\n{% include machine.html id="demoC1P" %}\n\n<!--BEGIN:EXCLUDE-->\n\nDeveloper Notes\n---------------\n\nThe [PCjs Repository](https://github.com/jeffpar/pcjs) on GitHub contains everything needed to run PCjs\ncomputer simulations.  All the PCjs emulators run in any modern web browser, with or without a web server,\nand examples are provided for both [local](/apps/pcx86/examples/) and [remote](https://www.pcjs.org) operation.\n\nThe project includes:\n\n- A simple Node-based web server ([server.js](server.js))\n- Custom Node modules used by the web server ([HTMLOut](modules/htmlout/), [MarkOut](modules/markout/), [DiskDump](modules/diskdump/), [FileDump](modules/filedump/))\n- A variety of IBM PC and C1P configuration and resource files (see [/apps](apps/), [/devices](devices/) and [/disks](disks/))\n- The [PCx86](modules/pcx86/), [PC8080](modules/pc8080/), and [C1Pjs](modules/c1pjs/) client applications, along with "compiled" [versions](/versions/)\n- A smattering of [PCx86](docs/pcx86/) and [C1Pjs](docs/c1pjs/) documentation, along with [blog posts](_posts/), related [publications](pubs/) and more\n\nThe bundled web server is not strictly required.  Any web server (Node, Apache, Nginx, etc) that can serve the necessary\nJavaScript files to your browser will work.  However, instructions for doing that are beyond the scope of this introduction.\n\nIn fact, you can run PCjs simulations without a web server at all, using the "file:" protocol instead of "http:".\nHowever, most of the machine configurations require additional resource files (ROMs, disk images, etc), which are\nincluded in the project, but unless all the resource files are moved into a single directory (as they are in these\n[Examples](/apps/pcx86/examples/)), your browser will probably be unable to load all of them, due to security restrictions.\nUsing the bundled web server is the preferred solution.\n\nThe project includes a large selection of disk images, and a powerful [DiskDump](modules/diskdump/) utility that\nruns on both the client and server, featuring a command-line interface (CLI) and web server API.  Originally created to dump\nexisting disk images as JSON, **DiskDump** has evolved into a full-featured disk image generator, capable of creating PC-compatible\ndiskette *and* hard disk images from either lists *or* directories of files (including all subdirectories).\n\n### Installing PCjs with Node\n\nThe following instructions were originally written for OS X.  However, users of other operating systems should have\nno problem following along.  There are some prerequisites:\n\n- Node with NPM (download an installation package for your OS from [nodejs.org](http://nodejs.org/download/))\n- Git (included with OS X Developer Tools; separate download required for [Windows](http://git-scm.com/download/win))\n\nSome additional (optional) tools are also recommended:\n\n- Python (included with OS X; separate download required for [Windows](https://www.python.org/downloads/windows/))\n- GitHub (useful for getting Git set up on [Windows](https://windows.github.com/); also available for [OS X](https://mac.github.com/))\n\nOnce you have the prerequisites, open a command-line window, `cd` to the directory where you\'d like to install PCjs,\nand type the following commands:\n\n\tgit clone --recurse-submodules https://github.com/jeffpar/pcjs.git\n\tcd pcjs\n\tnpm install --production\n\tnode server.js\n\nNow open a web browser and go to `http://localhost:8088/`.  You\'re done!\n \nAt the time of this writing, the recommended version of [Node](https://nodejs.org) was **10.14.2**.\n\nAlso, [server.js](server.js) was originally written using [Express](http://expressjs.com/) 3.x.  Since then,\nExpress 4.x has been released, but [server.js](server.js) has not been updated; the `npm install` command above\nshould ensure that Express 3.x is installed locally.\n\n### Installing PCjs with Jekyll\n\nPCjs can also be used with [Jekyll](http://jekyllrb.com) and the Ruby WEBrick web server, now that a\n*[jekyll](https://github.com/jeffpar/pcjs/tree/jekyll)* branch has been created to work with\n[GitHub Pages](https://pages.github.com).  This is how the project is currently set up at\n[pcjs.org](https://www.pcjs.org).\n\nThis isn\'t going to be a Jekyll "How To" guide, because that would unnecessarily repeat all the information available\nat [GitHub Pages](https://pages.github.com).  But we\'ll summarize the basic steps, which replace the `npm` and `node`\nsteps above.\n\nTo install Jekyll for use with PCjs:\n\n 1. Install Ruby (on OS X, it should already be installed)\n 2. Install Bundler (on OS X, run `sudo gem install bundler`)\n 3. Checkout the *jekyll* branch, since only that branch contains all the Jekyll-related files\n 4. Create a **Gemfile** containing `gem \'github-pages\'` (this is already checked in)\n 5. Run `bundle install` (GitHub Pages alternatively suggests: `bundle exec jekyll build --safe`)\n 6. Run `bundle exec jekyll serve` to start the web server\n\nNow open a web browser and go to `http://localhost:4000/`.  You\'re done!\n\nSome useful Jekyll server options include:\n\n\tbundle exec jekyll serve --host=0.0.0.0 --config _config.yml,_developer.yml\n\nThe *--host* option makes it possible to access the web server from other devices on your local network;\nfor example, you may want to run PCjs on your iPhone, iPad, or other wireless device.  And by adding **_developer.yml**,\nyou can override the Jekyll configuration defaults in **_config.yml**.  Using development (non-production) settings in\n**_developer.yml** is analogous to running the Node web server with certain development options; see\n[Debugging PCjs](#debugging-pcjs).\n\nGitHub Pages says you can run `jekyll serve` instead of `bundle exec jekyll serve`, but with the addition of\nmore gems to **Gemfile** (eg, "jekyll-sitemap"), running `jekyll serve` may trigger dependency errors on some systems.\n`bundle exec jekyll serve` should always work.\n\nDon\'t see any YML files in the root of your project?  You probably forgot to switch to the\n*[jekyll](https://github.com/jeffpar/pcjs/tree/jekyll)* branch:\n\n\tgit checkout jekyll\n\nLast but not least, run `bundle update` periodically to keep Jekyll up-to-date.\n\n### Building PCjs\n\nUnlike a typical project, where you have to *build* or *configure* or *make* something, PCjs is "ready to run".\nThat\'s because both the compiled and uncompiled versions of the PCjs emulation modules are checked into the project,\nmaking deployment to a web server easier.\n\nHowever, in order to build and test PCjs modifications, you\'ll want to use [Gulp](https://gulpjs.com/) and the\nGulp tasks defined by [gulpfile.js](gulpfile.js).  If you already ran `npm install --production` as described above,\nthen you should re-run it *without* the `--production` option:\n\n\tnpm install\n\nto get all the development dependencies, including Gulp 4.x.\n\nYou\'ll probably also want to install the command-line interface to Gulp.  You can install that locally as well, but\nit\'s recommended you install it globally with *-g*; OS X users may also need to preface this command with `sudo`:\n\n\tnpm install gulp-cli -g\n\nNow you can run `gulp` anywhere within the PCjs project to build an updated version.  If no command-line arguments\nare specified, `gulp` runs the "default" task defined by the project\'s [gulpfile.js](gulpfile.js); that task runs\nGoogle\'s [Closure Compiler](https://developers.google.com/closure/compiler/) if any of the target files (eg, pcx86.js\nin the [versions](/versions/) directory) are out-of date.\n\n### Using the JavaScript-based Closure Compiler\n\nThe latest [gulpfile.js](gulpfile.js) now compiles all PCjs machine modules using\nGoogle\'s [JavaScript-based Closure Compiler](https://github.com/google/closure-compiler-js).\n\nRunning `gulp` should build a complete set of "compiled" machine scripts in the [versions](/versions/) directory.\nIndividual machines can be compiled as well (eg, `gulp compile/pcx86`).\n\nUsing PCjs\n----------\n\n### From The Browser\n\nThe PCjs Node web server is little more than a file/directory browser for the PCjs project, plus a collection of APIs.\n\nIf a URL corresponds to a PCjs project folder and no "index.html" exists in that folder, the Node web server loads\nan HTML template ([common.html](modules/shared/templates/common.html)) and generates an "index.html" for that folder.\n\nThe contents of the "index.html" will vary depending on the contents of the folder; for example, if the folder\ncontains a README.md, then that Markdown file is converted to HTML and embedded in the "index.html".  Similarly,\nif the folder contains a machine XML file, that is embedded as well.\n\nTo work well with both the Node and Jekyll web servers, all Markdown files containing one or more embedded machines\nshould contain a Jekyll "Front Matter" header that describes the machines.  For example, here\'s the header from the\npcjs.org home page ([index.md](https://github.com/jeffpar/pcjs/blob/jekyll/index.md)):\n\n\t---\n\tlayout: page\n\tpermalink: /\n\tmachines:\n\t  - id: ibm5150\n\t    type: pcx86\n\t    resume: 1\n\t    name: "IBM PC (Model 5150) with Monochrome Display"\n\t    config: /devices/pcx86/machine/5150/mda/64kb/machine.xml\n\t  - id: demoC1P\n\t    type: c1p\n\t    config: /devices/c1p/machine/8kb/large/machine.xml\n\t---\n\nThen the following lines are inserted at the points where the machines should appear:\n\n\t{% include machine.html id="ibm5150" %}\n\t...\n\t{% include machine.html id="demoC1P" %}\n\nFor more information on all the machine options supported in a Markdown file, see the project\'s Jekyll include file\n[machine-engines.html](https://github.com/jeffpar/pcjs/blob/jekyll/_includes/machine-engines.html).\n\n### From The Command-Line\n\nThe PCx86 client app can also be run from the command-line mode using Node, making it possible to script the application,\nrun a series of automated tests, etc:\n\n    cd modules/pcx86/bin\n    node pcx86\n\nThe [pcx86](modules/pcx86/bin/pcx86) script in [modules/pcx86/bin](modules/pcx86/bin) loads\nall the PCx86 browser scripts listed in [machines.json](/_data/machines.json) and then starts a Node REPL\n("read-eval-print loop").  The REPL handles a few special commands (eg, "load", "quit") and passes anything else\nto the PCx86 Debugger component.  If no Debugger component has been created yet, or if the Debugger didn\'t recognize\nthe command, then it\'s passed on to *eval()*, like a good little REPL.\n\nUse the "load" command to load a JSON machine configuration file.  A sample\n[ibm5150.json](modules/pcx86/bin/ibm5150.json) is provided in the *bin* directory, which is a "JSON-ified" version\nof the [machine.xml](devices/pcx86/machine/5150/mda/64kb/machine.xml) displayed on the [pcjs.org](https://www.pcjs.org)\nhome page.\n\nThe command-line loader creates all the JSON-defined machine components in the same order that the browser creates\nXML-defined components.  You can also issue the "load" command directly from the command-line:\n\n    node pcx86 --cmd="load ibm5150.json"\n\nIn fact, any number of "--cmd" arguments can be included on the command-line.  A batch file syntax will eventually be\nadded, too.\n\nWhen a PCjs machine runs in a browser, an XML machine configuration file is transformed into HTML with a set of DIVs\nfor each component: an "object" DIV whose *data-value* attribute provides the initialization parameters for the\ncorresponding component, along with a set of optional "control" DIVs that the component can bind to (eg, a **Run** button,\nor a visual representation of DIP switches, or whatever).\n\nWhen a PCjs machine is run from the command-line, there is no XML, HTML, or DIVs involved; this is basically a\n"headless" version of the machine, so there is no simple way to view its video display or interact with its keyboard,\nmouse, etc.  You have to use Debugger commands to dump the machine\'s video buffer.\n\nSince I was not inclined to add XML support to my Node environment, this has created some divergence between client\nand server operation: PCjs machines on the client supports *only* XML machine configuration files, whereas PCjs machines\non the server supports *only* JSON machine configuration files.\n\nI haven\'t decided whether I\'ll add support for JSON configuration files to the client, or add some XML-to-JSON conversion\nto the server, or both.\n\nDebugging PCjs\n--------------\n\nNOTE: The following information assumes you\'re running Node as your local web server, not Jekyll.  You can certainly\ndebug PCjs while running Jekyll (ideally with `--config _config.yml,_developer.yml`), using `http://localhost:4000/`\nand your favorite web browser\'s Developer Tools, but none of the special server or client features discussed below\nwill be available.\n\n### Server Components\n\nTo help test/debug changes to PCjs server components (eg, [DiskDump](modules/diskdump/), [HTMLOut](modules/htmlout/)),\nyou can start the server with some additional options; eg:\n\n\tnode server.js --logging --console --debug\n\nThe *--logging* option will create a [node.log](/logs/) that records all the HTTP requests, *--debug*\nwill generate additional debug-only messages (which will also be logged if *--logging* is enabled), and *--console*\nwill replicate any messages to your console as well.\n\nIf you want server.js to use a different port (the default is 8088), set PORT in your environment before starting\nthe server:\n\n\texport PORT=80\n\nor add *--port* to your command-line:\n\n\tnode server.js --logging --console --debug --port=80\n\nA complete list of command-line options can be found in [server.js](server.js).\n\n### Client Components\n\nA special command parameter ("gort") can be appended to the URL to request uncompiled client source files, making the\nPCjs emulators much easier to debug, albeit much slower:\n\n\thttp://localhost:8088/?gort=debug\n\nThe "gort=debug" command is unnecessary if the server is started with *--debug*; the server always serves uncompiled\nfiles when running in debug mode.\n\nConversely, if the server is in debug mode but you want to test a compiled version of PCx86, use:\n\n\thttp://localhost:8088/?gort=release\n\nand the server will serve compiled JavaScript files, regardless whether the server is running in debug mode or\nrelease mode.\n\nAnother useful gort command is "gort=nodebug", which is like "gort=debug" in that it serves uncompiled files, but\nit *also* sets the client-side **DEBUG** variable to **false**, disabling all debug-only runtime checks in the client\nand allowing the simulation to run much faster (although not as fast as compiled code):\n\n\thttp://localhost:8088/?gort=nodebug\n\nRegrettably, the gort command "Klaatu barada nikto" is not yet recognized.  Fortunately, there are no (known) situations\nwhere PCjs could run amok and destroy the planet.\n\nOther parameters that can be passed via the URL:\n\n- *aspect*: a numeric value >= 0.3 and <= 3.33 modifies the default aspect ratio of a machine\'s screen on the specified page; e.g.:\n\n\t    http://localhost:8088/?aspect=2.0\n\n- *autoMount*: overrides the machine\'s diskette autoMount settings; eg:\n\n\t    http://localhost:8088/?autoMount={A:{name:"PC DOS 1.10"}}\n\n- *autoStart*: "true" allows all machines to start normally, "false" prevents all machines from starting, and "no" prevents all machines from starting *unless* they have no **Run** button; e.g.:\n\n\t    http://localhost:8088/?autoStart=false\n\n- *drives*: overrides the machine\'s hard drive settings; e.g.:\n\n        http://localhost:8088/?drives=[{name:"10Mb Hard Disk",type:3,path:"/disks-demo/pcx86/drives/10mb/PCDOS200-WIN101-EGA.json"}]\n\n- *autoType*: a string of keys to inject into the machine after booting; e.g.:\n\n        http://localhost:8088/?autoType=02-28-2018\\r12:00\\r\n\n- *mobile*: "true" or "false" to override PCjs\' mobile browser detection, which affects things like soft keyboard layout; e.g.:\n\n\t    http://localhost:8088/?mobile=true&softKeys=true\n\n- *resume*: a numeric value (0-3) overrides a machine\'s *resume* setting; e.g.:\n\n\t    http://localhost:8088/?resume=0\n\n- *softKeys*: "true" to enable the machine\'s "soft keyboard" (if included); e.g.:\n\n        http://localhost:8088/?softKeys=true\n\nMore information about the *resume* attribute is available in the [documentation](/pubs/docs/pcx86/computer/#attributes).\n\nUpdating PCjs\n-------------\n\n### Developing\n\nTo start developing features for a new version of PCjs, here are the recommended steps:\n\n1. Update the version numbers in [package.json](package.json) and [machines.json](_data/machines.json)\n2. Run the "gulp version" task to bump the version in all the machine XML files\n3. Make changes\n4. Run "gulp" to build new versions of the apps (eg, "/versions/pcx86/1.x.x/pcx86.js")\n\nYou might also want to check out the blog post on [PCjs Coding Conventions](https://www.pcjs.org/blog/2014/09/30/).\n\nYou may also want to skip step #2 until you\'re ready to start testing the new version.  Depending on the nature\nof your changes, it may be better to manually edit the version number in only a few machine XML files for testing,\nleaving the rest of the XML files pointing to the previous version.  Run "gulp version" when the new version is much\ncloser to being released.\n\n### Testing\n\nIn the course of testing PCjs, there may be stale "index.html" files that prevent you from seeing application\nupdates, changes to README.md files, etc.  So before running Node, you may want to "touch" the default HTML template:\n\n\ttouch modules/shared/templates/common.html\n\nThe [HTMLOut](modules/htmlout/) module compares the timestamp of that template file to the timestamp of any\n"index.html" and will regenerate the latter if it\'s out-of-date.\n\nThere\'s a TODO to expand that check to include the timestamp of any local README.md file, but there are many other\nfactors that can contribute to stale "index.html" files, so usually the safest thing to do is "touch" the\n[common.html](modules/shared/templates/common.html) template, or delete all existing "index.html" files, either\nmanually or with the `modules/htmlout/bin/delete_indexes.sh` script.\n\n<!--END:EXCLUDE-->\n\nLicense\n-------\n\nThe [PCjs Project](https://github.com/jeffpar/pcjs) is now an open-source project on [GitHub](https://github.com/jeffpar).\nAll published portions are free for redistribution and/or modification under the terms of the\n[GNU General Public License](/LICENSE) as published by the Free Software Foundation, either version 3 of the License,\nor (at your option) any later version.\n\nYou are required to include the following links and copyright notice:\n\n> [PCjs](https://www.pcjs.org) \xc2\xa9 2012-2019 by [Jeff Parsons](https://jeffpar.com)\n\nin every copy or modified version of this work, and to display that notice on every web page or computer that it runs on.\n\nSee [LICENSE](/LICENSE) for details.\n\nMore Information\n----------------\n\nLearn more about the [PCjs Project](/pubs/docs/about/) and [PCx86](/pubs/docs/about/pcx86/).  To\ncreate your own PCx86 machines, see the [PCx86 Documentation](/pubs/docs/pcx86/) for details.\nIf you have questions or run into any problems, feel free to [tweet](https://twitter.com/jeffpar) or\n[email](mailto:Jeff@pcjs.org).\n'