b'<p align="center">\n  <img id="header" src="./images/logo_dockerandroid_small.png" />\n</p>\n\n[![Analytics](https://ga-beacon.appspot.com/UA-133466903-1/github/budtmo/docker-android/README.md)](https://github.com/igrigorik/ga-beacon "Analytics")\n[![Join the chat at https://gitter.im/budtmo/docker-android](https://badges.gitter.im/budtmo/docker-android.svg)](https://gitter.im/budtmo/docker-android?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![Build Status](https://travis-ci.org/budtmo/docker-android.svg?branch=master)](https://travis-ci.org/budtmo/docker-android)\n[![codecov](https://codecov.io/gh/budtmo/docker-android/branch/master/graph/badge.svg)](https://codecov.io/gh/budtmo/docker-android)\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/3f000ffb97db45a59161814e1434c429)](https://www.codacy.com/app/butomo1989/docker-appium?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=butomo1989/docker-appium&amp;utm_campaign=Badge_Grade)\n[![GitHub release](https://img.shields.io/github/release/budtmo/docker-android.svg)](https://github.com/budtmo/docker-android/releases)\n[![FOSSA Status](https://app.fossa.io/api/projects/git%2Bgithub.com%2Fbudtmo%2Fdocker-android.svg?type=shield)](https://app.fossa.io/projects/git%2Bgithub.com%2Fbudtmo%2Fdocker-android?ref=badge_shield)\n[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square)](http://makeapullrequest.com)\n\nDocker-Android is a docker image built to be used for everything related to mobile website testing and Android project.\n\nEmulator - Samsung Device    | Emulator - Nexus Device     | Real Device  \n:---------------------------:|:---------------------------:|:---------------------------:\n![][emulator samsung]        |![][emulator nexus]          |![][real device]   \n\nPurposes\n--------\n\n1. Run UI tests for mobile websites with [appium]\n2. Build Android project and run unit tests with the latest build-tools\n3. Run UI tests for Android applications with different frameworks ([appium], [espresso], [robotium], etc.)\n4. Run monkey / stress tests\n5. SMS testing\n\nAdvantages compare with other docker-android projects\n-----------------------------------------------------\n\n1. noVNC to see what happen inside docker container\n2. Emulator for different devices / skins, such as Samsung Galaxy S6, LG Nexus 4, HTC Nexus One and more.\n3. Ability to connect to Selenium Grid\n4. Ability to control emulator from outside container by using adb connect\n5. Support real devices with screen mirroring\n6. Ability to record video during test execution for debugging\n7. Integrated with other cloud solutions, e.g. [Genymotion Cloud](https://www.genymotion.com/cloud/)\n8. Open source with more features coming\n\nList of Docker images\n---------------------\n\n|OS   |Android   |API   |Browser   |Browser version   |Chromedriver   |Image   |Size   |\n|:---|:---|:---|:---|:---|:---|:---|:---|\n|Linux|5.0.1|21|browser|37.0|2.21|budtmo/docker-android-x86-5.0.1|[![](https://images.microbadger.com/badges/image/budtmo/docker-android-x86-5.0.1.svg)](https://microbadger.com/images/budtmo/docker-android-x86-5.0.1 "Get your own image badge on microbadger.com")|\n|Linux|5.1.1|22|browser|39.0|2.13|budtmo/docker-android-x86-5.1.1|[![](https://images.microbadger.com/badges/image/budtmo/docker-android-x86-5.1.1.svg)](https://microbadger.com/images/budtmo/docker-android-x86-5.1.1 "Get your own image badge on microbadger.com")|\n|Linux|6.0|23|browser|44.0|2.18|budtmo/docker-android-x86-6.0|[![](https://images.microbadger.com/badges/image/budtmo/docker-android-x86-6.0.svg)](https://microbadger.com/images/budtmo/docker-android-x86-6.0 "Get your own image badge on microbadger.com")|\n|Linux|7.0|24|chrome|51.0|2.23|budtmo/docker-android-x86-7.0|[![](https://images.microbadger.com/badges/image/budtmo/docker-android-x86-7.0.svg)](https://microbadger.com/images/budtmo/docker-android-x86-7.0 "Get your own image badge on microbadger.com")|\n|Linux|7.1.1|25|chrome|55.0|2.28|budtmo/docker-android-x86-7.1.1|[![](https://images.microbadger.com/badges/image/budtmo/docker-android-x86-7.1.1.svg)](https://microbadger.com/images/budtmo/docker-android-x86-7.1.1 "Get your own image badge on microbadger.com")|\n|Linux|8.0|26|chrome|58.0|2.31|budtmo/docker-android-x86-8.0|[![](https://images.microbadger.com/badges/image/budtmo/docker-android-x86-8.0.svg)](https://microbadger.com/images/budtmo/docker-android-x86-8.0 "Get your own image badge on microbadger.com")|\n|Linux|8.1|27|chrome|61.0|2.33|budtmo/docker-android-x86-8.1|[![](https://images.microbadger.com/badges/image/budtmo/docker-android-x86-8.1.svg)](https://microbadger.com/images/budtmo/docker-android-x86-8.1 "Get your own image badge on microbadger.com")|\n|Linux|9.0|28|chrome|66.0|2.40|budtmo/docker-android-x86-9.0|[![](https://images.microbadger.com/badges/image/budtmo/docker-android-x86-9.0.svg)](https://microbadger.com/images/budtmo/docker-android-x86-9.0 "Get your own image badge on microbadger.com")|\n|Linux|10.0|29|chrome|74.0|74.0.3729.6|budtmo/docker-android-x86-10.0|[![](https://images.microbadger.com/badges/image/budtmo/docker-android-x86-10.0.svg)](https://microbadger.com/images/budtmo/docker-android-x86-10.0 "Get your own image badge on microbadger.com")|\n|All |-|-|-|-|-|budtmo/docker-android-real-device|[![](https://images.microbadger.com/badges/image/budtmo/docker-android-real-device.svg)](https://microbadger.com/images/budtmo/docker-android-real-device "Get your own image badge on microbadger.com")|\n|All|All|All|All|All|All|budtmo/docker-android-genymotion|[![](https://images.microbadger.com/badges/image/budtmo/docker-android-genymotion.svg)](https://microbadger.com/images/budtmo/docker-android-genymotion "Get your own image badge on microbadger.com")|\n\nList of Devices\n---------------\n\nType   | Device Name\n-----  | -----\nPhone  | Samsung Galaxy S10\nPhone  | Samsung Galaxy S9\nPhone  | Samsung Galaxy S8\nPhone  | Samsung Galaxy S7 Edge\nPhone  | Samsung Galaxy S7\nPhone  | Samsung Galaxy S6\nPhone  | Nexus 4\nPhone  | Nexus 5\nPhone  | Nexus One\nPhone  | Nexus S\nTablet | Nexus 7\n\nRequirements\n------------\n\nDocker is installed in your system.\n\nQuick Start\n-----------\n\n1. Run Docker-Android\n\n\t- For ***Linux OS***, please use image name that contains "x86"\n\n\t\t```bash\n\t\tdocker run --privileged -d -p 6080:6080 -p 5554:5554 -p 5555:5555 -e DEVICE="Samsung Galaxy S6" --name android-container budtmo/docker-android-x86-8.1\n\t\t```\n\n\t- For ***OSX*** and ***Windows OS***, please use Virtual Machine that support Virtualization with Ubuntu OS\n\n\n2. Verify the ip address of docker host.\n\n   - For OSX, you can find out by using following command:\n\n     ```bash\n     docker-machine ip default\n     ```\n\n   - For different OS, localhost should work.\n\n3. Open ***http://docker-host-ip-address:6080*** from web browser.\n\nCustom configurations\n---------------------\n\n[This document](README_CUSTOM_CONFIG.md) contains custom configurations of Docker-Android that you might need, e.g. Proxy, Changing language on fly, etc. \n\nBuild Android project\n---------------------\n\nDocker-Android can be used for building Android project and executing its unit test. This following steps will illustrate how to build Android project:\n\n1. Clone [this sample test project](https://github.com/googlesamples/android-testing).\n\n    ```bash\n    git clone git@github.com:googlesamples/android-testing.git\n    ```\n\n2. Build the project\n\n    ```bash\n    docker run -it --rm -v $PWD/android-testing/ui/espresso/BasicSample:/root/tmp budtmo/docker-android-x86-8.1 tmp/gradlew build\n    ```\n    \nControl Android connected to host (Emulator or Real Device)\n-----------------------------------------------------------\n1. Create a docker container with this command \n\n\t```\n\t$ docker run --privileged -d -p 6080:6080 -p 5554:5554 -p 5555:5555 -p 4723:4723 --name android-container-appium budtmo/docker-android-real-device\n\t```\n\t\n2. Open noVNC [http://localhost:6080](http://localhost:6080)\n\n3. Open terminal by clicking right on **noVNC** window >> **Terminal emulator**\n\n4. To connect to host\'s adb (make sure your host have adb and connected to the device.) \n\n\t```\n\t$ adb -H host.docker.internal devices\n\t```\n\t\n\tTo specify port, just add `-P port_number`\n\n\t```\n\t$ adb -H host.docker.internal -P 5037 devices\n\t```\n\t\n5. Now your container can access your host devices. But, you need to add `remoteAdbHost` and `adbPort` desired capabilities to make **Appium** can recognise those devices.  \n\n\nAppium and Selenium Grid\n------------------------\n\nIf you want to use Appium and Selenium Grid, you can follow [this document](README_APPIUM_AND_SELENIUM.md). It also contains sample and use cases.\n\nControl android emulator outside container\n------------------------------------------\n\n```bash\nadb connect <docker-machine-ip-address>:5555\n```\n\n![][adb_connection]\n\n**Note:** You need to have Android Debug Bridge (adb) installed in your host machine.\n\nSMS Simulation\n--------------\n\n1. Using telnet\n\t- Find the auth_token and copy it.\n\n\t ```bash\n\t docker exec -it android-container cat /root/.emulator_console_auth_token\n\t ```\n\n\t- Access emulator using telnet and login with auth_token\n\n\t ```bash\n\t telnet <docker-machine-ip-address> 5554\n\t ```\n\n\t- Login with given auth_token from 1.step\n\n\t ```bash\n\t auth <auth_token>\n\t ```\n\n\t- Send the sms\n\n\t ```bash\n\t sms send <phone_number> <message>\n\t ```\n\n2. Using adb\n\n\t ```bash\n\t docker exec -it android-container adb emu sms send <phone_number> <message>\n\t ```\n\n3. You can also integrate it inside project using adb library.\n\n![][sms]\n\nGoogle Play Services and Google Play Store\n------------------------------------------\n\nDocker-Android contains Google Play Service (v12.8.74) and Google Play Store (v11.0.50). Both applications are downloaded from [apklinker](https://www.apklinker.com/), so please be aware of it in case you use private/company account to that applications.\n\nJenkins\n-------\n\nThis [document](README_JENKINS.md) gives you information about custom plugin that supports Docker-Android.\n\nVMWARE\n------\n\nThis [document](README_VMWARE.md) shows you how to configure Virtual Machine on VMWARE to be able to run Docker-Android.\n\nCloud\n-----\n\nThis [document](README_CLOUD.md) contains information about deploying Docker-Android on cloud services.\n\nGenymotion\n----------\n\n<p align="center">\n  <img id="geny" src="./images/logo_genymotion_and_dockerandroid.png" />\n</p>\n\nFor you who do not have ressources to maintain the simulator or to buy machines or need different device profiles, you need to give a try to [Genymotion Cloud](https://www.genymotion.com/cloud/). Docker-Android is integrated with Genymotion on different cloud services, e.g. Genymotion Cloud, AWS, GCP, Alibaba Cloud. Please follow [this document](README_GENYMOTION.md) or [this blog](https://medium.com/genymobile/run-your-appium-tests-using-docker-android-genymotion-cloud-e4817132ccd8) for more detail.\n\nTroubleshooting\n---------------\nAll logs inside container are stored under folder **/var/log/supervisor**. you can print out log file by using **docker exec**. Example:\n\n```bash\ndocker exec -it android-container tail -f /var/log/supervisor/docker-android.stdout.log\n```\n\nEmulator Skins\n--------------\nThe Emulator skins are taken from [Android Studio IDE](https://developer.android.com/studio) and [Samsung Developer Website](e)\n\nSecurity\n--------\nAll docker images are protected by [Polyverse](https://polyverse.io/) by scrambling the Linux packages. For more information please read [this](https://polyverse.io/how-it-works/)\n\nSpecial Thanks\n--------------\n- [Gian Christanto] for creating a great logo!\n\nLICENSE\n--------------\nSee [License](LICENSE.md)\n\n[![FOSSA Status](https://app.fossa.io/api/projects/git%2Bgithub.com%2Fbudtmo%2Fdocker-android.svg?type=large)](https://app.fossa.io/projects/git%2Bgithub.com%2Fbudtmo%2Fdocker-android?ref=badge_large)\n\n[appium]: <https://appium.io>\n[espresso]: <https://developer.android.com/training/testing/espresso/>\n[robotium]: <https://github.com/RobotiumTech/robotium>\n[emulator samsung]: <images/emulator_samsung_galaxy_s6.png>\n[emulator nexus]: <images/emulator_nexus_5.png>\n[real device]: <images/real_device.png>\n[adb_connection]: <images/adb_connection.png>\n[sms]: <images/SMS.png>\n[gian christanto]: <https://www.linkedin.com/in/gian-christanto-0b398b131/>\n'