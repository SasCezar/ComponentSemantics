b'# Coffee GB\n\n[![Build Status](https://travis-ci.org/trekawek/coffee-gb.svg?branch=master)](https://travis-ci.org/trekawek/coffee-gb)\n\nCoffee GB is a Gameboy Color emulator written in Java 8. It\'s meant to be a development exercise. More info can be found in the blog post [Why did I spend 1.5 months creating a Gameboy emulator?](http://blog.rekawek.eu/2017/02/09/coffee-gb/)\n\n![Coffee GB running game](doc/tetris.gif)\n\n## Building\n\nThe emulator can be build with [Maven](https://maven.apache.org/):\n\n    mvn clean package\n\nThe jar file will be available in the `./target` directory.\n\n## Usage\n\n    Usage:\n    java -jar coffee-gb.jar [OPTIONS] ROM_FILE\n\n    Available options:\n      -d  --force-dmg                Emulate classic GB (DMG) for universal ROMs\n      -c  --force-cgb                Emulate color GB (CGB) for all ROMs\n      -b  --use-bootstrap            Start with the GB bootstrap\n      -db --disable-battery-saves    Disable battery saves\n          --debug                    Enable debug console\n          --headless                 Start in the headless mode\n\nPlay with <kbd>&larr;</kbd>, <kbd>&uarr;</kbd>, <kbd>&darr;</kbd>, <kbd>&rarr;</kbd>, <kbd>Z</kbd>, <kbd>X</kbd>, <kbd>Enter</kbd>, <kbd>Backspace</kbd>.\n\n## Features\n\n* Cycle-exact Gameboy CPU emulation. Each opcode is split into a few micro-operations (load value from memory, store it to register, etc.) and each micro-operation is run in a separate CPU cycle.\n* Quite compatible (all the Blargg\'s tests are passed, although some game still doesn\'t work)\n* GPU\n* Joypad\n* Timer\n* Sound\n* MBC1-5 support\n* Battery saves\n* Support for zipped ROMs\n* ROM-based compatibility tests run from Maven\n\n## Running Blargg\'s tests\n\nThe [Blargg\'s test ROMs](http://gbdev.gg8.se/wiki/articles/Test_ROMs) are used for testing the compatibility. Tests can be launched from Maven using appropriate profile:\n\n    mvn clean test -Ptest-blargg\n    mvn clean test -Ptest-blargg-individual # for running "single" tests providing more diagnostic info\n\nThey are also part of the [Travis-based CI](https://travis-ci.org/trekawek/coffee-gb).\n\nThe tests output (normally displayed on the Gameboy screen) is redirected to the stdout:\n\n```\ncpu_instrs\n\n01:ok  02:ok  03:ok  04:ok  05:ok  06:ok  07:ok  08:ok  09:ok  10:ok  11:ok\n\nPassed all tests\n```\n\nCoffee GB passes all the tests:\n\n* cgb_sound\n* cpu_instrs\n* dmg_sound-2\n* halt_bug\n* instr_timing\n* interrupt_time\n* mem_timing-2\n* oam_bug-2\n\n## Mooneye tests\n\nThe [Mooneye GB](https://github.com/Gekkio/mooneye-gb) emulator comes with a great set of test ROMs. They can be used to test the Coffee GB as well. Use -Ptest-mooneye profile:\n\n    mvn clean test -Ptest-mooneye\n\n## Screenshots\n\n![Coffee GB running game](doc/screenshot1.png)\n![Coffee GB running game](doc/screenshot2.png)\n![Coffee GB running game](doc/screenshot3.png)\n![Coffee GB running game](doc/screenshot4.png)\n![Coffee GB running game](doc/screenshot5.png)\n![Coffee GB running game](doc/screenshot6.png)\n![Coffee GB running game](doc/screenshot7.png)\n![Coffee GB running game](doc/screenshot8.png)\n![Coffee GB running game](doc/screenshot9.png)\n![Coffee GB running game](doc/screenshot10.png)\n\n## Key bindings\n\nThe default key bindings can be changed with the `~/.coffeegb.properties` file. The file has following format:\n\n```\nbtn_up=VK_UP\nbtn_down=VK_DOWN\nbtn_left=VK_LEFT\nbtn_right=VK_RIGHT\nbtn_a=VK_Z\nbtn_b=VK_X\nbtn_start=VK_ENTER\nbtn_select=VK_BACK_SPACE\n```\n\nThe key list can be found in the [KeyEvent JavaDoc](https://docs.oracle.com/javase/10/docs/api/java/awt/event/KeyEvent.html#field.summary).\n\n## Resources\n\n* [GameBoy CPU manual](http://marc.rawer.de/Gameboy/Docs/GBCPUman.pdf)\n* [The Ultimate GameBoy talk](https://www.youtube.com/watch?v=HyzD8pNlpwI)\n* [Gameboy opcodes](http://pastraiser.com/cpu/gameboy/gameboy_opcodes.html)\n* [Nitty Gritty Gameboy cycle timing](http://blog.kevtris.org/blogfiles/Nitty%20Gritty%20Gameboy%20VRAM%20Timing.txt)\n* [Video Timing](https://github.com/jdeblese/gbcpu/wiki/Video-Timing)\n* [BGB emulator](http://bgb.bircd.org/) --- good for testing / debugging, works fine with Wine\n* [The Cycle-Accurate Game Boy Docs](https://github.com/AntonioND/giibiiadvance/tree/master/docs)\n* [Test ROMs](http://slack.net/~ant/old/gb-tests/) - included in the [src/test/resources/roms](src/test/resources/roms)\n* [Pandocs](http://bgb.bircd.org/pandocs.htm)\n* [Mooneye GB](https://github.com/Gekkio/mooneye-gb) - an accurate emulator written in Rust, contains great ROM-based acceptance tests\n'