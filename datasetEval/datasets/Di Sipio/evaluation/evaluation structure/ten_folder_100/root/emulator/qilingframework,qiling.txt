b'Qiling - Advanced Binary Emulation framework\n[![Build Status](https://travis-ci.com/qilingframework/qiling.svg?branch=master)](https://travis-ci.com/qilingframework/qiling)\n---\n\n<p align="center">\n<img width="150" height="150" src="docs/qiling_small.png">\n</p>\n\nQiling is an advanced binary emulation framework, with the following features:\n\n- Cross platform: Windows, MacOS, Linux, BSD\n- Cross architecture: X86, X86_64, Arm, Arm64, Mips\n- Multiple file formats: PE, MachO, ELF\n- Emulate & sandbox machine code in a isolated environment\n- Provide high level API to setup & configure the sandbox\n- Fine-grain instrumentation: allow hooks at various levels (instruction/basic-block/memory-access/exception/syscall/IO/etc)\n- Allow dynamic hotpatch on-the-fly running code, including the loaded library\n- True framework in Python, making it easy to build customized security analysis tools on top\n\nQiling is backed by [Unicorn engine](http://www.unicorn-engine.org).\n\nVisit our website https://www.qiling.io for more information.\n\n---\n\n#### License\n\nThis project is released and distributed under [free software license GPLv2](COPYING).\n\n---\n\n#### Qiling vs other Emulators\n\nThere are many open source emulators, but two projects closest to Qiling are [Unicorn](http://www.unicorn-engine.org) & [Qemu usermode](https://qemu.org). This section explains the main differences of Qiling against them.\n\n##### Qiling vs Unicorn engine\n\nBuilt on top of Unicorn, but Qiling & Unicorn are two different animals.\n\n- Unicorn is just a CPU emulator, so it focuses on emulating CPU instructions, that can understand emulator memory. Beyond that, Unicorn is not aware of higher level concepts, such as dynamic libraries, system calls, I/O handling or executable formats like PE, MachO or ELF. As a result, Unicorn can only emulate raw machine instructions, without Operating System (OS) context.\n- Qiling is designed as a higher level framework, that leverages Unicorn to emulate CPU instructions, but can understand OS: it has executable format loaders (for PE, MachO & ELF at the moment), dynamic linkers (so we can load & relocate shared libraries), syscall & IO handlers. For this reason, Qiling can run excutable binaries that normally runs in native OS.\n\n##### Qiling vs Qemu usermode\n\nQemu usermode does similar thing to our emulator, that is to emulate whole executable binaries in cross-architecture way. However, Qiling offers some important differences against Qemu usermode.\n\n- Qiling is a true analysis framework, that allows you to build your own dynamic analysis tools on top (in friendly Python language). Meanwhile, Qemu is just a tool, not a framework.\n- Qiling can perform dynamic instrumentation, and can even hotpatch code at runtime. Qemu does not do either.\n- Not only working cross-architecture, Qiling is also cross-platform, so for example you can run Linux ELF file on top of Windows. In contrast, Qemu usermode only run binary of the same OS, such as Linux ELF on Linux, due to the way it forwards syscall from emulated code to native OS.\n- Qiling supports more platforms, including Windows, MacOS, Linux & BSD. Qemu usermode can only handles Linux & BSD.\n\n---\n\n#### Install\n\nRun below command line to install Qiling (Python3 is required).\n\n```\npython3 setup.py install\n```\n\n---\n\n#### Examples\n\n- Below example shows how to use Qiling framework to emulate a Windows EXE on a Linux machine.\n\n```python\nfrom qiling import *\n\n# sandbox to emulate the EXE\ndef my_sandbox(path, rootfs):\n    # setup Qiling engine\n    ql = Qiling(path, rootfs)\n    # now emulate the EXE\n    ql.run()\n\nif __name__ == "__main__":\n    # execute Windows EXE under our rootfs\n    my_sandbox(["examples/rootfs/x86_windows/bin/x86-windows-hello.exe"], "examples/rootfs/x86_windows")\n```\n\n- Below example shows how to use Qiling framework to dynamically patch a Windows crackme, make it always display "Congratulation" dialog.\n\n```python\nfrom qiling import *\n\ndef force_call_dialog_func(ql):\n    # get DialogFunc address\n    lpDialogFunc = ql.unpack32(ql.mem_read(ql.sp - 0x8, 4))\n    # setup stack memory for DialogFunc\n    ql.stack_push(0)\n    ql.stack_push(1001)\n    ql.stack_push(273)\n    ql.stack_push(0)\n    ql.stack_push(0x0401018)\n    # force EIP to DialogFunc\n    ql.pc = lpDialogFunc\n\n\ndef my_sandbox(path, rootfs):\n    ql = Qiling(path, rootfs)\n    # NOP out some code\n    ql.patch(0x004010B5, b\'\\x90\\x90\')\n    ql.patch(0x004010CD, b\'\\x90\\x90\')\n    ql.patch(0x0040110B, b\'\\x90\\x90\')\n    ql.patch(0x00401112, b\'\\x90\\x90\')\n    # hook at an address with a callback\n    ql.hook_address(0x00401016, force_call_dialog_func)\n    ql.run()\n\n\nif __name__ == "__main__":\n    my_sandbox(["rootfs/x86_windows/bin/Easy_CrackMe.exe"], "rootfs/x86_windows")\n```\n\nThe below Youtube video shows how the above example works.\n\n[![qiling DEMO 1: hotpatching a windows crackme](http://img.youtube.com/vi/p17ONUbCnUU/0.jpg)](https://www.youtube.com/watch?v=p17ONUbCnUU "Video DEMO 1")\n\n\n#### Wannacry demo\n\n- The below Youtube video shows how Qiling analyzes Wannacry malware.\n\n[![qiling DEMO 0: catching wannacry\'s killer swtich](http://img.youtube.com/vi/gVtpcXBxwE8/0.jpg)](https://www.youtube.com/watch?v=gVtpcXBxwE8 "Video DEMO 0")\n\n---\n\n#### Qltool\n\nQiling also provides a friendly tool named `qltool` to quickly emulate shellcode & executable binaries.\n\nTo emulate a binary, run:\n\n```\n$ ./qltool run -f examples/rootfs/arm_linux/bin/arm32-hello --rootfs examples/rootfs/arm_linux/\n\n```\n\nTo run shellcode, run:\n\n```\n$ ./qltool shellcode --os linux --arch x86 --asm -f examples/shellcodes/lin32_execve.asm\n\n```\n\n---\n\n#### Contact\n\nGet the latest info from out webiste https://www.qiling.io\n\nContact us at email info@qiling.io, or via Twitter [@qiling_io](https://twitter.com/qiling_io)\n\n\xe4\xbb\xbb\xe4\xbd\x95\xe7\x96\x91\xe9\x97\xae\xe8\xaf\xb7\xe8\x81\x94\xe7\xb3\xbb[\xe9\xba\x92\xe9\xba\x9f\xe6\xa1\x86\xe6\x9e\xb6\xe5\xae\x98\xe6\x96\xb9\xe5\xbe\xae\xe5\x8d\x9a](https://www.weibo.com/sgniwx)\n\n---\n\n#### Core developers\n\n- LAU kaijern (xwings) <kj@qiling.io>\n- NGUYEN Anh Quynh <aquynh@gmail.com>\n- DING tianZe (D1iv3) <dddliv3@gmail.com>\n- SUN bowen (w1tcher) <w1tcher.bupt@gmail.com>\n- CHEN huitao (null) <null@qiling.io>\n- YU tong (sp1ke) <spikeinhouse@gmail.com>\n\n'