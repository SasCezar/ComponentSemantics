b'YouCompleteMe: a code-completion engine for Vim\n===============================================\n\n[![Gitter room](https://img.shields.io/gitter/room/Valloric/YouCompleteMe.svg)](https://gitter.im/Valloric/YouCompleteMe)\n[![Build status](https://dev.azure.com/YouCompleteMe/YCM/_apis/build/status/ycm-core.YouCompleteMe?branchName=master)](https://dev.azure.com/YouCompleteMe/YCM/_build?definitionId=3&branchName=master)\n[![Coverage status](https://img.shields.io/codecov/c/github/ycm-core/YouCompleteMe/master.svg)](https://codecov.io/gh/ycm-core/YouCompleteMe)\n\nEarly Warning: Dropping support for Python 2 in 2020\n----\n\nIn early 2020, YCM will drop support for Python 2. But we will maintain\ncriticial fixes on a branch (name TBA) of YCM for a period of 1 year.\n\nWhy?\n\nOver the past decade, YouCompleteMe has had an at times fractious, \nbut ultimately very successful relationship with Python 2. However, more\nrecently it has been carrying on a simultaneous relationship with Python 3.\nIndeed all of YCM and ycmd code is Python 3 code, with a lot of gubbins\nto make it work also on Python 2. This makes the code more complex,\nrequires double testing of everything, and restricts the developers from using\ncertain new langauge features, ultimately restricting the features we can\ndeliver to users.\n\nOn 1st January 2020, Python 2 will be officially end of life. And therefore, so\nwill its relationship with YouCompleteMe and ycmd.\n\n\nHelp, Advice, Support\n---------------------\n\nLooking for help, advice or support? Having problems getting YCM to work?\n\nFirst carefully read the [installation instructions](#installation) for your OS.\nWe recommend you use the supplied `install.py`.\n\nNext check the [User Guide](#user-guide) section on the semantic completer that\nyou are using. For C/C++/Objective-C/Objective-C++/CUDA, you  _must_ read [this\nsection](#c-family-semantic-completion).\n\nFinally, check the [FAQ](#faq).\n\nIf, after reading the installation and user guides, and checking the FAQ, you\'re\nstill having trouble, check the [contacts](#contact) section below for how to\nget in touch.\n\nPlease do **NOT** go to #vim on freenode for support. Please contact the\nYouCompleteMe maintainers directly using the [contact details](#contact) below.\n\nContents\n--------\n\n- [Intro](#intro)\n- [Installation](#installation)\n    - [macOS](#macos)\n    - [Linux 64-bit](#linux-64-bit)\n    - [Windows](#windows)\n    - [FreeBSD/OpenBSD](#freebsdopenbsd)\n    - [Full Installation Guide](#full-installation-guide)\n- [Quick Feature Summary](#quick-feature-summary)\n- [User Guide](#user-guide)\n    - [General Usage](#general-usage)\n    - [Client-Server Architecture](#client-server-architecture)\n    - [Completion String Ranking](#completion-string-ranking)\n    - [General Semantic Completion](#general-semantic-completion)\n    - [C-family Semantic Completion](#c-family-semantic-completion)\n    - [Java Semantic Completion](#java-semantic-completion)\n    - [Python Semantic Completion](#python-semantic-completion)\n    - [Rust Semantic Completion](#rust-semantic-completion)\n    - [Go Semantic Completion](#go-semantic-completion)\n    - [JavaScript and TypeScript Semantic Completion](#javascript-and-typescript-semantic-completion)\n    - [Semantic Completion for Other Languages](#semantic-completion-for-other-languages)\n    - [LSP Configuration](#lsp-configuration)\n    - [Writing New Semantic Completers](#writing-new-semantic-completers)\n    - [Diagnostic Display](#diagnostic-display)\n        - [Diagnostic Highlighting Groups](#diagnostic-highlighting-groups)\n- [Commands](#commands)\n    - [YcmCompleter subcommands](#ycmcompleter-subcommands)\n        - [GoTo Commands](#goto-commands)\n        - [Semantic Information Commands](#semantic-information-commands)\n        - [Refactoring Commands](#refactoring-commands)\n        - [Miscellaneous Commands](#miscellaneous-commands)\n- [Functions](#functions)\n- [Autocommands](#autocommands)\n- [Options](#options)\n- [FAQ](#faq)\n- [Contributor Code of Conduct](#contributor-code-of-conduct)\n- [Contact](#contact)\n- [License](#license)\n\n\nIntro\n-----\n\nYouCompleteMe is a fast, as-you-type, fuzzy-search code completion engine for\n[Vim][]. It has several completion engines:\n\n- an identifier-based engine that works with every programming language,\n- a [Clang][]-based engine that provides native semantic code\n  completion for C/C++/Objective-C/Objective-C++/CUDA (from now on referred to\n  as "the C-family languages"),\n- a powerful [clangd][]-based completion engine for the C-family languages.\n- a [Jedi][]-based completion engine for Python 2 and 3,\n- an [OmniSharp-Roslyn][]-based completion engine for C#,\n- a [Gopls][]-based completion engine for Go,\n- a [TSServer][]-based completion engine for JavaScript and TypeScript,\n- a [rls][]-based completion engine for Rust,\n- a [jdt.ls][]-based experimental completion engine for Java.\n- a [generic Language Server Protocol implementation for any language](#plugging-an-arbitrary-lsp-server)\n- and an omnifunc-based completer that uses data from Vim\'s omnicomplete system\n  to provide semantic completions for many other languages (Ruby, PHP etc.).\n\n![YouCompleteMe GIF demo](http://i.imgur.com/0OP4ood.gif)\n\nHere\'s an explanation of what happens in the short GIF demo above.\n\nFirst, realize that **no keyboard shortcuts had to be pressed** to get the list\nof completion candidates at any point in the demo. The user just types and the\nsuggestions pop up by themselves. If the user doesn\'t find the completion\nsuggestions relevant and/or just wants to type, they can do so; the completion\nengine will not interfere.\n\nWhen the user sees a useful completion string being offered, they press the TAB\nkey to accept it. This inserts the completion string. Repeated presses of the\nTAB key cycle through the offered completions.\n\nIf the offered completions are not relevant enough, the user can continue typing\nto further filter out unwanted completions.\n\nA critical thing to notice is that the completion **filtering is NOT based on\nthe input being a string prefix of the completion** (but that works too). The\ninput needs to be a _[subsequence][] match_ of a completion. This is a fancy way\nof saying that any input characters need to be present in a completion string in\nthe order in which they appear in the input. So `abc` is a subsequence of\n`xaybgc`, but not of `xbyxaxxc`. After the filter, a complicated sorting system\nranks the completion strings so that the most relevant ones rise to the top of\nthe menu (so you usually need to press TAB just once).\n\n**All of the above works with any programming language** because of the\nidentifier-based completion engine. It collects all of the identifiers in the\ncurrent file and other files you visit (and your tags files) and searches them\nwhen you type (identifiers are put into per-filetype groups).\n\nThe demo also shows the semantic engine in use. When the user presses `.`, `->`\nor `::` while typing in insert mode (for C++; different triggers are used for\nother languages), the semantic engine is triggered (it can also be triggered\nwith a keyboard shortcut; see the rest of the docs).\n\nThe last thing that you can see in the demo is YCM\'s diagnostic display features\n(the little red X that shows up in the left gutter; inspired by [Syntastic][])\nif you are editing a C-family file. As the completer engine compiles your file\nand detects warnings or errors, they will be presented in various ways. You\ndon\'t need to save your file or press any keyboard shortcut to trigger this, it\n"just happens" in the background.\n\nIn essence, YCM obsoletes the following Vim plugins because it has all of their\nfeatures plus extra:\n\n- clang_complete\n- AutoComplPop\n- Supertab\n- neocomplcache\n\n**And that\'s not all...**\n\nYCM also provides [semantic IDE-like features](#quick-feature-summary) in a\nnumber of languages, including:\n\n- displaying signature help (argument hints) when entering the arguments to a\n  function call\n- finding declarations, definitions, usages, etc. of identifiers,\n- displaying type information for classes, variables, functions etc.,\n- displaying documentation for methods, members, etc. in the preview window,\n- fixing common coding errors, like missing semi-colons, typos, etc.,\n- semantic renaming of variables across files,\n- formatting code,\n- removing unused imports, sorting imports, etc.\n\nFor example, here\'s a demo of signature help:\n\n![Signature Help Early Demo](https://user-images.githubusercontent.com/10584846/58738348-5060da80-83fd-11e9-9537-d07fdbf4554c.gif)\n\nFeatures vary by file type, so make sure to check out the [file type feature\nsummary](#quick-feature-summary) and the\n[full list of completer subcommands](#ycmcompleter-subcommands) to\nfind out what\'s available for your favourite languages.\n\nYou\'ll also find that YCM has filepath completers (try typing `./` in a file)\nand a completer that integrates with [UltiSnips][].\n\nInstallation\n------------\n\n### macOS\n\nThese instructions (using `install.py`) are the quickest way to install\nYouCompleteMe, however they may not work for everyone. If the following\ninstructions don\'t work for you, check out the [full installation\nguide](#full-installation-guide).\n\n[MacVim][] is required. YCM won\'t work with the pre-installed Vim from Apple as\nits Python support is broken. If you don\'t already use [MacVim][], install it\nwith [Homebrew][brew]. Install CMake as well:\n\n    brew install cmake macvim\n\nInstall YouCompleteMe with [Vundle][].\n\n**Remember:** YCM is a plugin with a compiled component. If you **update** YCM\nusing Vundle and the ycm_core library APIs have changed (happens\nrarely), YCM will notify you to recompile it. You should then rerun the install\nprocess.\n\n**NOTE:** If you want C-family completion, you MUST have the latest Xcode\ninstalled along with the latest Command Line Tools (they are installed\nautomatically when you run `clang` for the first time, or manually by running\n`xcode-select --install`)\n\nCompiling YCM **with** semantic support for C-family languages through\n**libclang**:\n\n    cd ~/.vim/bundle/YouCompleteMe\n    ./install.py --clang-completer\n\nCompiling YCM **with** semantic support for C-family languages through\n**clangd**:\n\n    cd ~/.vim/bundle/YouCompleteMe\n    ./install.py --clangd-completer\n\nNote that you can install YCM with both **libclang** and **clangd** enabled. In\nthat case **clangd** will be preferred unless you have the following in your\n`vimrc`:\n\n```viml\nlet g:ycm_use_clangd = 0\n```\n\nCompiling YCM **without** semantic support for C-family languages:\n\n    cd ~/.vim/bundle/YouCompleteMe\n    ./install.py\n\nThe following additional language support options are available:\n\n- C# support: install Mono with [Homebrew][brew] or by downloading the [Mono\n  macOS package][mono-install-macos] and add `--cs-completer` when calling\n  `install.py`.\n- Go support: install [Go][go-install] and add `--go-completer` when calling\n  `install.py`.\n- JavaScript and TypeScript support: install [Node.js and npm][npm-install] and\n  add `--ts-completer` when calling `install.py`.\n- Rust support: add `--rust-completer` when calling `install.py`.\n  - If your Python interpreter is older than 2.7.9, you will also need\n    [rustup][] in your `PATH`.\n- Java support: install [JDK8 (version 8 required)][jdk-install] and add\n  `--java-completer` when calling `install.py`.\n\nTo simply compile with everything enabled, there\'s a `--all` flag. Note that\nthis flag does **not** install **clangd**. You need to specify it manually by\nadding `--clangd-completer`. So, to install with all language features, ensure\n`xbuild`, `go`, `tsserver`, `node` and `npm` tools are\ninstalled and in your `PATH`, then simply run:\n\n    cd ~/.vim/bundle/YouCompleteMe\n    ./install.py --all\n\nThat\'s it. You\'re done. Refer to the _User Guide_ section on how to use YCM.\nDon\'t forget that if you want the C-family semantic completion engine to work,\nyou will need to provide the compilation flags for your project to YCM. It\'s all\nin the User Guide.\n\nYCM comes with sane defaults for its options, but you still may want to take a\nlook at what\'s available for configuration. There are a few interesting options\nthat are conservatively turned off by default that you may want to turn on.\n\n### Linux 64-bit\n\nThese instructions (using `install.py`) are the quickest way to install\nYouCompleteMe, however they may not work for everyone. If the following\ninstructions don\'t work for you, check out the [full installation\nguide](#full-installation-guide).\n\nMake sure you have Vim 7.4.1578 with Python 2 or Python 3 support. The Vim\npackage on Fedora 27 and later and the pre-installed Vim on Ubuntu 16.04 and\nlater are recent enough. You can see the version of Vim installed by running\n`vim --version`. If the version is too old, you may need to [compile Vim from\nsource][vim-build] (don\'t worry, it\'s easy).\n\n**NOTE**: For all features, such as signature help, use Vim 8.1.1875 or later.\n\nInstall YouCompleteMe with [Vundle][].\n\n**Remember:** YCM is a plugin with a compiled component. If you **update** YCM\nusing Vundle and the ycm_core library APIs have changed (happens rarely), YCM\nwill notify you to recompile it. You should then rerun the install process.\n\nInstall development tools, CMake, and Python headers:\n\n- Fedora 27 and later:\n\n      sudo dnf install cmake gcc-c++ make python3-devel\n\n- Ubuntu 14.04:\n\n      sudo apt install build-essential cmake3 python3-dev\n\n- Ubuntu 16.04 and later:\n\n      sudo apt install build-essential cmake python3-dev\n\nCompiling YCM **with** semantic support for C-family languages through\n**libclang**:\n\n    cd ~/.vim/bundle/YouCompleteMe\n    python3 install.py --clang-completer\n\nCompiling YCM **with** semantic support for C-family languages through\n**clangd**:\n\n    cd ~/.vim/bundle/YouCompleteMe\n    python3 install.py --clangd-completer\n\nNote that you can install YCM with both **libclang** and **clangd** enabled. In\nthat case **clangd** will be preferred unless you have the following in your\n`vimrc`:\n\n```viml\nlet g:ycm_use_clangd = 0\n```\n\nCompiling YCM **without** semantic support for C-family languages:\n\n    cd ~/.vim/bundle/YouCompleteMe\n    python3 install.py\n\nThe following additional language support options are available:\n\n- C# support: install [Mono][mono-install-linux] and add `--cs-completer`\n  when calling `install.py`.\n- Go support: install [Go][go-install] and add `--go-completer` when calling\n  `install.py`.\n- JavaScript and TypeScript support: install [Node.js and npm][npm-install] and\n  add `--ts-completer` when calling `install.py`.\n- Rust support: add `--rust-completer` when calling `install.py`.\n  - If your Python interpreter is older than 2.7.9, you will also need\n    [rustup][] in your `PATH`.\n- Java support: install [JDK8 (version 8 required)][jdk-install] and add\n  `--java-completer` when calling `install.py`.\n\nTo simply compile with everything enabled, there\'s a `--all` flag. Note that\nthis flag does **not** install **clangd**. You need to specify it manually by\nadding `--clangd-completer`. So, to install with all language features, ensure\n`xbuild`, `go`, `tsserver`, `node`, `npm` and tools are\ninstalled and in your `PATH`, then simply run:\n\n    cd ~/.vim/bundle/YouCompleteMe\n    python3 install.py --all\n\nThat\'s it. You\'re done. Refer to the _User Guide_ section on how to use YCM.\nDon\'t forget that if you want the C-family semantic completion engine to work,\nyou will need to provide the compilation flags for your project to YCM. It\'s all\nin the User Guide.\n\nYCM comes with sane defaults for its options, but you still may want to take a\nlook at what\'s available for configuration. There are a few interesting options\nthat are conservatively turned off by default that you may want to turn on.\n\n### Windows\n\nThese instructions (using `install.py`) are the quickest way to install\nYouCompleteMe, however they may not work for everyone. If the following\ninstructions don\'t work for you, check out the [full installation\nguide](#full-installation-guide).\n\n**Important:** we assume that you are using the `cmd.exe` command prompt and\nthat you know how to add an executable to the PATH environment variable.\n\nMake sure you have at least Vim 7.4.1578 with Python 2 or Python 3 support. You\ncan check the version and which Python is supported by typing `:version` inside\nVim. Look at the features included: `+python/dyn` for Python 2 and\n`+python3/dyn` for Python 3. Take note of the Vim architecture, i.e. 32 or\n64-bit. It will be important when choosing the Python installer. We recommend\nusing a 64-bit client. [Daily updated installers of 32-bit and 64-bit Vim with\nPython 2 and Python 3 support][vim-win-download] are available.\n\n**NOTE**: For all features, such as signature help, use Vim 8.1.1875 or later.\n\nAdd the line:\n\n    set encoding=utf-8\n\nto your [vimrc][] if not already present. This option is required by YCM. Note\nthat it does not prevent you from editing a file in another encoding than UTF-8.\nYou can do that by specifying [the `++enc` argument][++enc] to the `:e` command.\n\nInstall YouCompleteMe with [Vundle][].\n\n**Remember:** YCM is a plugin with a compiled component. If you **update** YCM\nusing Vundle and the ycm_core library APIs have changed (happens\nrarely), YCM will notify you to recompile it. You should then rerun the install\nprocess.\n\nDownload and install the following software:\n\n- [Python 2 or Python 3][python-win-download]. Be sure to pick the version\n  corresponding to your Vim architecture. It is _Windows x86_ for a 32-bit Vim\n  and _Windows x86-64_ for a 64-bit Vim. We recommend installing Python 3.\n  Additionally, the version of Python you install must match up exactly with\n  the version of Python that Vim is looking for. Type `:version` and look at the\n  bottom of the page at the list of compiler flags. Look for flags that look\n  similar to `-DDYNAMIC_PYTHON_DLL=\\"python27.dll\\"` and\n  `-DDYNAMIC_PYTHON3_DLL=\\"python35.dll\\"`. The former indicates that Vim is\n  looking for Python 2.7 and the latter indicates that Vim is looking for\n  Python 3.5. You\'ll need one or the other installed, matching the version\n  number exactly.\n- [CMake][cmake-download]. Add CMake executable to the PATH environment\n  variable.\n- [Visual Studio Build Tools 2017][visual-studio-download]. During setup,\n  select _Visual C++ build tools_ in _Workloads_.\n\nCompiling YCM **with** semantic support for C-family languages through\n**libclang**:\n\n    cd %USERPROFILE%/vimfiles/bundle/YouCompleteMe\n    python install.py --clang-completer\n\nCompiling YCM **with** semantic support for C-family languages through\n**clangd**:\n\n    cd %USERPROFILE%/vimfiles/bundle/YouCompleteMe\n    python install.py --clangd-completer\n\nNote that you can install YCM with both **libclang** and **clangd** enabled. In\nthat case **clangd** will be preferred unless you have the following in your\n`vimrc`:\n\n```viml\nlet g:ycm_use_clangd = 0\n```\n\nCompiling YCM **without** semantic support for C-family languages:\n\n    cd %USERPROFILE%/vimfiles/bundle/YouCompleteMe\n    python install.py\n\nThe following additional language support options are available:\n\n- C# support: add `--cs-completer` when calling `install.py`.\n  Be sure that [the build utility `msbuild` is in your PATH][add-msbuild-to-path].\n- Go support: install [Go][go-install] and add `--go-completer` when calling\n  `install.py`.\n- JavaScript and TypeScript support: install [Node.js and npm][npm-install] and\n  add `--ts-completer` when calling `install.py`.\n- Rust support: add `--rust-completer` when calling `install.py`.\n  - If your Python interpreter is older than 2.7.9, you will also need\n    [rustup][] in your `PATH`.\n- Java support: install [JDK8 (version 8 required)][jdk-install] and add\n  `--java-completer` when calling `install.py`.\n\nTo simply compile with everything enabled, there\'s a `--all` flag. Note that\nthis flag does **not** install **clangd**. You need to specify it manually by\nadding `--clangd-completer`. So, to install with all language features, ensure\n`msbuild`, `go`, `tsserver`, `node` and `npm` tools are installed and\nin your `PATH`, then simply run:\n\n    cd %USERPROFILE%/vimfiles/bundle/YouCompleteMe\n    python install.py --all\n\nYou can specify the Microsoft Visual C++ (MSVC) version using the `--msvc`\noption. YCM officially supports MSVC 14 (Visual Studio 2015) and 15 (2017).\n\nThat\'s it. You\'re done. Refer to the _User Guide_ section on how to use YCM.\nDon\'t forget that if you want the C-family semantic completion engine to work,\nyou will need to provide the compilation flags for your project to YCM. It\'s all\nin the User Guide.\n\nYCM comes with sane defaults for its options, but you still may want to take a\nlook at what\'s available for configuration. There are a few interesting options\nthat are conservatively turned off by default that you may want to turn on.\n\n### FreeBSD/OpenBSD\n\nThese instructions (using `install.py`) are the quickest way to install\nYouCompleteMe, however they may not work for everyone. If the following\ninstructions don\'t work for you, check out the [full installation\nguide](#full-installation-guide).\n\n**NOTE:** OpenBSD / FreeBSD are not officially supported platforms by YCM.\n\nMake sure you have Vim 7.4.1578 with Python 2 or Python 3 support.\n\n**NOTE**: For all features, such as signature help, use Vim 8.1.1875 or later.\n\nOpenBSD 5.5 and later have a Vim that\'s recent enough. You can see the version of\nVim installed by running `vim --version`.\n\nFor FreeBSD 11.x, the requirement is cmake:\n\n    pkg install cmake\n\nInstall YouCompleteMe with [Vundle][].\n\n**Remember:** YCM is a plugin with a compiled component. If you **update** YCM\nusing Vundle and the ycm_core library APIs have changed (happens\nrarely), YCM will notify you to recompile it. You should then rerun the install\nprocess.\n\nCompiling YCM **with** semantic support for C-family languages through\n**libclang**:\n\n    cd ~/.vim/bundle/YouCompleteMe\n    ./install.py --clang-completer\n\nCompiling YCM **with** semantic support for C-family languages through\n**clangd**:\n\n    cd ~/.vim/bundle/YouCompleteMe\n    ./install.py --clangd-completer\n\nNote that you can install YCM with both **libclang** and **clangd** enabled. In\nthat case **clangd** will be preferred unless you have the following in your\n`vimrc`:\n\n```viml\nlet g:ycm_use_clangd = 0\n```\n\nCompiling YCM **without** semantic support for C-family languages:\n\n    cd ~/.vim/bundle/YouCompleteMe\n    ./install.py\n\nIf the `python` executable is not present, or the default `python` is not the\none that should be compiled against, specify the python interpreter explicitly:\n\n    python3 install.py --clang-completer\n\nThe following additional language support options are available:\n\n- C# support: install Mono and add `--cs-completer` when calling\n  `./install.py`.\n- Go support: install [Go][go-install] and add `--go-completer` when calling\n  `./install.py`.\n- JavaScript and TypeScript support: install [Node.js and npm][npm-install] and\n  add `--ts-completer` when calling `install.py`.\n- Rust support: add `--rust-completer` when calling `./install.py`.\n  - If your Python interpreter is older than 2.7.9, you will also need\n    [rustup][] in your `PATH`.\n- Java support: install [JDK8 (version 8 required)][jdk-install] and add\n  `--java-completer` when calling `./install.py`.\n\nTo simply compile with everything enabled, there\'s a `--all` flag. Note that\nthis flag does **not** install **clangd**. You need to specify it manually by\nadding `--clangd-completer`. So, to install with all language features, ensure\n`xbuild`, `go`, `tsserver`, `node`, `npm` and tools are\ninstalled and in your `PATH`, then simply run:\n\n    cd ~/.vim/bundle/YouCompleteMe\n    ./install.py --all\n\nThat\'s it. You\'re done. Refer to the _User Guide_ section on how to use YCM.\nDon\'t forget that if you want the C-family semantic completion engine to work,\nyou will need to provide the compilation flags for your project to YCM. It\'s all\nin the User Guide.\n\nYCM comes with sane defaults for its options, but you still may want to take a\nlook at what\'s available for configuration. There are a few interesting options\nthat are conservatively turned off by default that you may want to turn on.\n\n### Full Installation Guide\n\nThese are the steps necessary to get YCM working on a Unix OS and on Windows.\n\n**Note to Windows users:** we assume that you are running the `cmd.exe` command\nprompt and that the needed executables are in the PATH environment variable. Do\nnot just copy the shell commands. Replace `~` by `%USERPROFILE%` in them and use\nthe right Vim home directory. It should be `vimfiles` by default instead of\n`.vim`.\n\nSee the _FAQ_ if you have any issues.\n\n**Remember:** YCM is a plugin with a compiled component. If you **update** YCM\nusing Vundle and the ycm_core library APIs have changed (happens\nrarely), YCM will notify you to recompile it. You should then rerun the install\nprocess.\n\n**Please follow the instructions carefully. Read EVERY WORD.**\n\n1.  **Ensure that your version of Vim is _at least_ 7.4.1578 _and_ that it has\n    support for Python 2 or Python 3 scripting**.\n\n    Inside Vim, type `:version`. Look at the first two to three lines of output;\n    it should say `Vi IMproved X.Y`, where X.Y is the major version of vim. If\n    your version is greater than 7.4, then you\'re all set. If your version is\n    7.4 then look below that where it says, `Included patches: 1-Z`, where Z\n    will be some number. That number needs to be 1578 or higher.\n\n    If your version of Vim is not recent enough, you may need to [compile Vim\n    from source][vim-build] (don\'t worry, it\'s easy).\n\n    After you have made sure that you have Vim 7.4.1578+, type the following in\n    Vim: `:echo has(\'python\') || has(\'python3\')`. The output should be 1. If\n    it\'s 0, then get a version of Vim with Python support.\n\n    **NOTE**: For all features, such as signature help, use Vim 8.1.1875 or\n    later.\n\n    On Windows, check also if your Vim architecture is 32 or 64-bit. This is\n    critical because it must match the Python and the YCM libraries\n    architectures. We recommend using a 64-bit Vim.\n\n2.  **Install YCM** with [Vundle][] (or [Pathogen][], but Vundle is a better\n    idea). With Vundle, this would mean adding a `Plugin\n    \'Valloric/YouCompleteMe\'` line to your [vimrc][].\n\n    If you don\'t install YCM with Vundle, make sure you have run\n    `git submodule update --init --recursive` after checking out the YCM\n    repository (Vundle will do this for you) to fetch YCM\'s dependencies.\n\n3.  *Complete this step ONLY if you care about semantic completion support for\n    C-family languages. Otherwise it\'s not necessary.*\n\n    **Download the latest version of `libclang`**. Clang is an open-source\n    compiler that can compile C-family languages. The `libclang` library it\n    provides is used to power the YCM semantic completion engine for those\n    languages. YCM is designed to work with libclang version 9.0.0 or higher.\n\n    In addition to `libclang`, YCM also supports a [clangd][]-based completer.\n    You can download the latest version of [clangd][] from [llvm.org\n    releases][clang-download]. Follow Step 4 to learn how to tell YCM where to\n    find clangd binary. Please note that YCM is designed to work with [clangd][]\n    version 9.0.0 or higher.\n\n    You can use the system libclang or clangd _only if you are sure it is\n    version 9.0.0 or higher_, otherwise don\'t. Even if it is, we recommend using\n    the [official binaries from llvm.org][clang-download] if at all possible.\n    Make sure you download the correct archive file for your OS.\n\n    We **STRONGLY recommend AGAINST use** of the system libclang or clangd\n    instead of the upstream compiled binaries. Random things may break. Save\n    yourself the hassle and use the upstream pre-built libclang or clangd.\n\n4.  **Compile the `ycm_core` library** that YCM needs. This library\n    is the C++ engine that YCM uses to get fast completions.\n\n    You will need to have `cmake` installed in order to generate the required\n    makefiles. Linux users can install cmake with their package manager (`sudo\n    apt-get install cmake` for Ubuntu) whereas other users can [download and\n    install][cmake-download] cmake from its project site. macOS users can also\n    get it through [Homebrew][brew] with `brew install cmake`.\n\n    On a Unix OS, you need to make sure you have Python headers installed. On a\n    Debian-like Linux distro, this would be `sudo apt-get install python-dev\n    python3-dev`. On macOS they should already be present.\n\n    On Windows, you need to download and install [Python 2 or\n    Python 3][python-win-download]. Pick the version corresponding to your Vim\n    architecture. You will also need Microsoft Visual C++ (MSVC) to build YCM.\n    You can obtain it by installing [Visual Studio Build\n    Tools][visual-studio-download]. MSVC 14 (Visual Studio 2015) and 15 (2017)\n    are officially supported.\n\n    Here we\'ll assume you installed YCM with Vundle. That means that the\n    top-level YCM directory is in `~/.vim/bundle/YouCompleteMe`.\n\n    We\'ll create a new folder where build files will be placed. Run the\n    following:\n\n        cd ~\n        mkdir ycm_build\n        cd ycm_build\n\n    Now we need to generate the makefiles. If you DON\'T care about semantic\n    support for C-family languages or plan to use **experimental** [clangd][]\n    based completer, run the following command in the `ycm_build` directory:\n\n        cmake -G "<generator>" . ~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp\n\n    where `<generator>` is `Unix Makefiles` on Unix systems and one of the\n    following Visual Studio generators on Windows:\n\n    - `Visual Studio 14 Win64`\n    - `Visual Studio 15 Win64`\n\n    Remove the `Win64` part in these generators if your Vim architecture is\n    32-bit.\n\n    For those who want to use the system version of boost, you would pass\n    `-DUSE_SYSTEM_BOOST=ON` to cmake. This may be necessary on some systems\n    where the bundled version of boost doesn\'t compile out of the box.\n\n    **NOTE:** We **STRONGLY recommend AGAINST use** of the system boost instead\n    of the bundled version of boost. Random things may break. Save yourself\n    the hassle and use the bundled version of boost.\n\n    If you DO care about semantic support for C-family languages, and want to\n    use libclang as the provider instead of **experimental** [clangd][]-based\n    completer then your `cmake` call will be a bit more complicated. We\'ll\n    assume you downloaded a binary distribution of LLVM+Clang from llvm.org in\n    step 3 and that you extracted the archive file to folder\n    `~/ycm_temp/llvm_root_dir` (with `bin`, `lib`, `include` etc. folders right\n    inside that folder). On Windows, you can extract the files from the\n    LLVM+Clang installer using [7-zip][7z-download].\n\n    **NOTE:** This _only_ works with a _downloaded_ LLVM binary package, not a\n    custom-built LLVM! See docs below for `EXTERNAL_LIBCLANG_PATH` when using a\n    custom LLVM build.\n\n    With that in mind, run the following command in the `ycm_build` directory:\n\n        cmake -G "<generator>" -DPATH_TO_LLVM_ROOT=~/ycm_temp/llvm_root_dir . ~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp\n\n    where `<generator>` is replaced like above.\n\n    Now that configuration files have been generated, compile the libraries\n    using this command:\n\n        cmake --build . --target ycm_core --config Release\n\n    The `--config Release` part is specific to Windows and will be ignored on a\n    Unix OS.\n\n    For those who want to use the system version of libclang, you would pass\n    `-DUSE_SYSTEM_LIBCLANG=ON` to cmake _instead of_ the\n    `-DPATH_TO_LLVM_ROOT=...` flag.\n\n    **NOTE:** We **STRONGLY recommend AGAINST use** of the system libclang instead\n    of the upstream compiled binaries. Random things may break. Save yourself\n    the hassle and use the upstream pre-built libclang.\n\n    You could also force the use of a custom libclang library with\n    `-DEXTERNAL_LIBCLANG_PATH=/path/to/libclang.so` flag (the library would end\n    with `.dylib` on macOS). Again, this flag would be used _instead of_ the\n    other flags. **If you compiled LLVM from source, this is the flag you should\n    be using.**\n\n    Running the `cmake` command will also place the `libclang.[so|dylib|dll]` in\n    the `YouCompleteMe/third_party/ycmd` folder for you if you compiled with\n    clang support (it needs to be there for YCM to work).\n\n    If you DO care about semantic support for C-family languages, and want to\n    use **experimental** [clangd][]-based completer then you need to add\n    following line to your `vimrc`:\n    ```viml\n    let g:ycm_clangd_binary_path = "/path/to/clangd"\n    ```\n    You need to change `/path/to/clangd` with the path of binary you downloaded\n    in step 3.\n\n5.  *This step is optional.*\n\n    Build the [regex][] module for improved Unicode support and better\n    performance with regular expressions. The procedure is similar to compiling\n    the `ycm_core` library:\n\n        cd ~\n        mkdir regex_build\n        cd regex_build\n        cmake -G "<generator>" . ~/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/cregex\n        cmake --build . --target _regex --config Release\n\n    where `<generator>` is the same generator used in the previous step.\n\n6.  Set up support for additional languages, as desired:\n\n    - C# support: install [Mono on non-Windows platforms][mono-install].\n      Navigate to `YouCompleteMe/third_party/ycmd/third_party/omnisharp-roslyn`.\n      Download an [Omnisharp-Roslyn release archive][roslyn-releases] and\n      extract the archive to\n      `YouCompleteMe/third_party/ycmd/third_party/omnisharp-roslyn`.\n\n      On Windows, be sure that [the build utility `msbuild` is in your\n      PATH][add-msbuild-to-path].\n\n    - Go support: install [Go][go-install] and add it to your path. Navigate to\n      `YouCompleteMe/third_party/ycmd/third_party/go/src/golang.org/x/tools/cmd/gopls`\n       and run\n\n          go build\n\n    - JavaScript and TypeScript support: install [Node.js and npm][npm-install],\n      navigate to `YouCompleteMe/third_party/ycmd` and run\n      `npm install -g --prefix third_party/tsserver typescript`.\n\n    - Rust support: install [rustup][]. Export `RUSTUP_HOME` environment\n      variable and point it to an empty temporary directory.\n      Run the following commands:\n\n          rustup toolchain install nightly\n          rustup default nightly\n          rustup component add rls rust-analysis rust-src\n\n      Ensure that `YouCompleteMe/third_party/ycmd/third_party/rls` directory\n      exists and is empty. Go into the temporary directory and then into\n      `toolchains/<toolchain>`. Finally, move everything from that directory to\n      `YouCompleteMe/third_party/ycmd/third_party/rls`.\n\n    - Java support: install [JDK8 (version 8 required)][jdk-install]. Download a\n      [binary release of eclipse.jdt.ls][jdtls-release] and extract it to\n      `YouCompleteMe/third_party/ycmd/third_party/eclipse.jdt.ls/target/repository`.\n      Note: this approach is not recommended for most users and is supported\n      only for advanced users and developers of YCM on a best-efforts basis.\n      Please use `install.py` to enable java support.\n\nThat\'s it. You\'re done. Refer to the _User Guide_ section on how to use YCM.\nDon\'t forget that if you want the C-family semantic completion engine to work,\nyou will need to provide the compilation flags for your project to YCM. It\'s all\nin the User Guide.\n\nYCM comes with sane defaults for its options, but you still may want to take a\nlook at what\'s available for configuration. There are a few interesting options\nthat are conservatively turned off by default that you may want to turn on.\n\nQuick Feature Summary\n-----\n\n### General (all languages)\n\n* Super-fast identifier completer including tags files and syntax elements\n* Intelligent suggestion ranking and filtering\n* File and path suggestions\n* Suggestions from Vim\'s OmniFunc\n* UltiSnips snippet suggestions\n\n### C-family languages (C, C++, Objective C, Objective C++, CUDA)\n\n* Semantic auto-completion with automatic fixes\n* Signature help (when [using clangd](#selecting-a-c-family-completion-engine))\n* Real-time diagnostic display\n* Go to include/declaration/definition (`GoTo`, etc.)\n* View documentation comments for identifiers (`GetDoc`)\n* Type information for identifiers (`GetType`)\n* Automatically fix certain errors (`FixIt`)\n* Reference finding (`GoToReferences`)\n* Renaming symbols (`RefactorRename <new name>`)\n* Code formatting (`Format`)\n\n### C\xe2\x99\xaf\n\n* Semantic auto-completion\n* Real-time diagnostic display\n* Go to declaration/definition (`GoTo`, etc.)\n* Go to implementation (`GoToImplementation`)\n* View documentation comments for identifiers (`GetDoc`)\n* Type information for identifiers (`GetType`)\n* Automatically fix certain errors (`FixIt`)\n* Management of OmniSharp-Roslyn server instance\n\n### Python\n\n* Semantic auto-completion\n* Signature help\n* Go to definition (`GoTo`)\n* Reference finding (`GoToReferences`)\n* View documentation comments for identifiers (`GetDoc`)\n* Type information for identifiers (`GetType`)\n\n### Go\n\n* Semantic auto-completion\n* Signature help\n* Real-time diagnostic display\n* Go to declaration/definition (`GoTo`, etc.)\n* Go to type definition (`GoToType`)\n* Automatically fix certain errors (`FixIt`)\n* View documentation comments for identifiers (`GetDoc`)\n* Type information for identifiers (`GetType`)\n* Code formatting (`Format`)\n* Management of `gopls` server instance\n\n### JavaScript and TypeScript\n\n* Semantic auto-completion with automatic import insertion\n* Signature help\n* Real-time diagnostic display\n* Go to definition (`GoTo`, `GoToDefinition`, and `GoToDeclaration` are\n  identical)\n* Go to type definition (`GoToType`)\n* Reference finding (`GoToReferences`)\n* View documentation comments for identifiers (`GetDoc`)\n* Type information for identifiers (`GetType`)\n* Automatically fix certain errors (`FixIt`)\n* Renaming symbols (`RefactorRename <new name>`)\n* Code formatting (`Format`)\n* Organize imports (`OrganizeImports`)\n* Management of `TSServer` server instance\n\n### Rust\n\n* Semantic auto-completion\n* Real-time diagnostic display\n* Go to declaration/definition (`GoTo`, etc.)\n* Go to implementation (`GoToImplementation`)\n* Reference finding (`GoToReferences`)\n* View documentation comments for identifiers (`GetDoc`)\n* Automatically fix certain errors (`FixIt`)\n* Type information for identifiers (`GetType`)\n* Renaming symbols (`RefactorRename <new name>`)\n* Code formatting (`Format`)\n* Execute custom server command (`ExecuteCommand <args>`)\n* Management of `rls` server instance\n\n### Java\n\n* Semantic auto-completion with automatic import insertion\n* Signature help\n* Real-time diagnostic display\n* Go to definition (`GoTo`, `GoToDefinition`, and `GoToDeclaration` are\n  identical)\n* Go to type definition (`GoToType`)\n* Go to implementation (`GoToImplementation`)\n* Reference finding (`GoToReferences`)\n* View documentation comments for identifiers (`GetDoc`)\n* Type information for identifiers (`GetType`)\n* Automatically fix certain errors including code generation (`FixIt`)\n* Renaming symbols (`RefactorRename <new name>`)\n* Code formatting (`Format`)\n* Organize imports (`OrganizeImports`)\n* Detection of java projects\n* Execute custom server command (`ExecuteCommand <args>`)\n* Management of `jdt.ls` server instance\n\nUser Guide\n----------\n\n### General Usage\n\nIf the offered completions are too broad, keep typing characters; YCM will\ncontinue refining the offered completions based on your input.\n\nFiltering is "smart-case" and "smart-[diacritic][]" sensitive; if you are\ntyping only lowercase letters, then it\'s case-insensitive. If your input\ncontains uppercase letters, then the uppercase letters in your query must\nmatch uppercase letters in the completion strings (the lowercase letters still\nmatch both). On top of that, a letter with no diacritic marks will match that\nletter with or without marks:\n\n<table>\n<tbody>\n<tr>\n  <th>matches</th>\n  <th>foo</th>\n  <th>f\xc3\xb4o</th>\n  <th>fOo</th>\n  <th>f\xc3\x94o</th>\n</tr>\n<tr>\n  <th>foo</th>\n  <td>\xe2\x9c\x94\xef\xb8\x8f</td>\n  <td>\xe2\x9c\x94\xef\xb8\x8f</td>\n  <td>\xe2\x9c\x94\xef\xb8\x8f</td>\n  <td>\xe2\x9c\x94\xef\xb8\x8f</td>\n</tr>\n<tr>\n  <th>f\xc3\xb4o</th>\n  <td>\xe2\x9d\x8c</td>\n  <td>\xe2\x9c\x94\xef\xb8\x8f</td>\n  <td>\xe2\x9d\x8c</td>\n  <td>\xe2\x9c\x94\xef\xb8\x8f</td>\n</tr>\n<tr>\n  <th>fOo</th>\n  <td>\xe2\x9d\x8c</td>\n  <td>\xe2\x9d\x8c</td>\n  <td>\xe2\x9c\x94\xef\xb8\x8f</td>\n  <td>\xe2\x9c\x94\xef\xb8\x8f</td>\n</tr>\n<tr>\n  <th>f\xc3\x94o</th>\n  <td>\xe2\x9d\x8c</td>\n  <td>\xe2\x9d\x8c</td>\n  <td>\xe2\x9d\x8c</td>\n  <td>\xe2\x9c\x94\xef\xb8\x8f</td>\n</tr>\n</tbody>\n</table>\n\nUse the TAB key to accept a completion and continue pressing TAB to cycle\nthrough the completions. Use Shift-TAB to cycle backwards. Note that if you\'re\nusing console Vim (that is, not Gvim or MacVim) then it\'s likely that the\nShift-TAB binding will not work because the console will not pass it to Vim.\nYou can remap the keys; see the [Options](#options) section below.\n\nKnowing a little bit about how YCM works internally will prevent confusion. YCM\nhas several completion engines: an identifier-based completer that collects all\nof the identifiers in the current file and other files you visit (and your tags\nfiles) and searches them when you type (identifiers are put into per-filetype\ngroups).\n\nThere are also several semantic engines in YCM. There are libclang-based and\nclangd-based completers that provide semantic completion for C-family languages.\nThere\'s a Jedi-based completer for semantic completion for Python. There\'s also\nan omnifunc-based completer that uses data from Vim\'s omnicomplete system to\nprovide semantic completions when no native completer exists for that language\nin YCM.\n\nThere are also other completion engines, like the UltiSnips completer and the\nfilepath completer.\n\nYCM automatically detects which completion engine would be the best in any\nsituation. On occasion, it queries several of them at once, merges the\noutputs and presents the results to you.\n\n### Client-Server Architecture\n\nYCM has a client-server architecture; the Vim part of YCM is only a thin client\nthat talks to the [ycmd HTTP+JSON server][ycmd] that has the vast majority of\nYCM logic and functionality. The server is started and stopped automatically as\nyou start and stop Vim.\n\n### Completion String Ranking\n\nThe subsequence filter removes any completions that do not match the input, but\nthen the sorting system kicks in. It\'s actually very complicated and uses lots\nof factors, but suffice it to say that "word boundary" (WB) subsequence\ncharacter matches are "worth" more than non-WB matches. In effect, this means\ngiven an input of "gua", the completion "getUserAccount" would be ranked higher\nin the list than the "Fooguxa" completion (both of which are subsequence\nmatches). A word-boundary character are all capital characters, characters\npreceded by an underscore and the first letter character in the completion\nstring.\n\n### Signature Help\n\nSignature help is an **experimental** feature for which we value your feedback.\nValid signatures are displayed in a second popup menu and the current signature\nis highlighed along with the current arguemnt.\n\nSignature help is triggered in insert mode automatically when\n`g:ycm_auto_trigger` is enabled and is not supported when it is not enabled.\n\nThe signatures popup is hidden when there are no matching signatures or when you\nleave insert mode. There is no key binding to clear the popup.\n\nFor more details on this feature and a few demos, check out the\n[PR that proposed it][signature-help-pr].\n\n### General Semantic Completion\n\nYou can use Ctrl+Space to trigger the completion suggestions anywhere, even\nwithout a string prefix. This is useful to see which top-level functions are\navailable for use.\n\n### C-family Semantic Completion\n\nIn order to perform semantic analysis such as code completion, `GoTo` and\ndiagnostics, YouCompleteMe uses `libclang` or `clangd`. Both of them make use of\nclang compiler, sometimes also referred to as llvm. Like any compiler,\nclang also requires a set of compile flags in order to parse your code. Simply\nput: If clang can\'t parse your code, YouCompleteMe can\'t provide semantic\nanalysis.\n\nThere are 2 methods which can be used to provide compile flags to clang:\n\n#### Option 1: Use a [compilation database][compdb]\n\nThe easiest way to get YCM to compile your code is to use a compilation\ndatabase.  A compilation database is usually generated by your build system\n(e.g. `CMake`) and contains the compiler invocation for each compilation unit in\nyour project.\n\nFor information on how to generate a compilation database, see the [clang\ndocumentation][compdb]. In short:\n\n- If using CMake, add `-DCMAKE_EXPORT_COMPILE_COMMANDS=ON` when configuring (or\n  add `set( CMAKE_EXPORT_COMPILE_COMMANDS ON )` to `CMakeLists.txt`) and copy or\n  symlink the generated database to the root of your project.\n- If using Ninja, check out the `compdb` tool (`-t compdb`) in its\n  [docs][ninja-compdb].\n- If using GNU make, check out [compiledb][] or [Bear][].\n- For other build systems, check out\n  [`.ycm_extra_conf.py`](#option-2-provide-the-flags-manually) below.\n\nIf no [`.ycm_extra_conf.py`](#option-2-provide-the-flags-manually) is found,\nYouCompleteMe automatically tries to load a compilation database if there is\none.\n\nYCM looks for a file named `compile_commands.json` in the directory of the\nopened file or in any directory above it in the hierarchy (recursively); when\nthe file is found, it is loaded.  YouCompleteMe performs the following lookups\nwhen extracting flags for a particular file:\n\n- If the database contains an entry for the file, the flags for that file are\n  used.\n- If the file is a header file and a source file with the same root exists in\n  the database, the flags for the source file are used. For example, if the file\n  is `/home/Test/project/src/lib/something.h` and the database contains an entry\n  for `/home/Test/project/src/lib/something.cc`, then the flags for\n  `/home/Test/project/src/lib/something.cc` are used.\n- Otherwise, if any flags have been returned from the directory containing the\n  requested file, those flags are used. This heuristic is intended to provide\n  potentially working flags for newly created files.\n\nFinally, YCM converts any relative paths in the extracted flags to absolute\npaths. This ensures that compilation can be performed from any Vim working\ndirectory.\n\n#### Option 2: Provide the flags manually\n\nIf you don\'t have a compilation database, or aren\'t able to generate one,\nyou have to tell YouCompleteMe how to compile your code some other way.\n\nEvery C-family project is different. It is not possible for YCM to guess what\ncompiler flags to supply for your project. Fortunately, YCM provides a mechanism\nfor you to generate the flags for a particular file with _arbitrary complexity_.\nThis is achieved by requiring you to provide a Python module which implements a\ntrivial function which, given the file name as argument, returns a list of\ncompiler flags to use to compile that file.\n\nYCM looks for a `.ycm_extra_conf.py` file in the directory of the opened file or\nin any directory above it in the hierarchy (recursively); when the file is\nfound, it is loaded (only once!) as a Python module. YCM calls a `Settings`\nmethod in that module which should provide it with the information necessary to\ncompile the current file. You can also provide a path to a global configuration\nfile with the\n[`g:ycm_global_ycm_extra_conf`](#the-gycm_global_ycm_extra_conf-option) option,\nwhich will be used as a fallback. To prevent the execution of malicious code\nfrom a file you didn\'t write YCM will ask you once per `.ycm_extra_conf.py` if\nit is safe to load. This can be disabled and you can white-/blacklist files. See\nthe [`g:ycm_confirm_extra_conf`](#the-gycm_confirm_extra_conf-option) and\n[`g:ycm_extra_conf_globlist`](#the-gycm_extra_conf_globlist-option) options\nrespectively.\n\nThis system was designed this way so that the user can perform any arbitrary\nsequence of operations to produce a list of compilation flags YCM should hand\nto Clang.\n\n**NOTE**: It is highly recommended to include `-x <language>` flag to libclang.\nThis is so that the correct language is detected, particularly for header files.\nCommon values are `-x c` for C, `-x c++` for C++, `-x objc` for Objective-C, and\n`-x cuda` for CUDA.\n\nTo give you an impression, if your C++ project is trivial, and your usual\ncompilation command is: `g++ -Wall -Wextra -Werror -o FILE.o FILE.cc`, then the\nfollowing `.ycm_extra_conf.py` is enough to get semantic analysis from\nYouCompleteMe:\n\n```python\ndef Settings( **kwargs ):\n  return {\n    \'flags\': [ \'-x\', \'c++\', \'-Wall\', \'-Wextra\', \'-Werror\' ],\n  }\n```\n\nAs you can see from the trivial example, YCM calls the `Settings` method which\nreturns a dictionary with a single element `\'flags\'`. This element is a `list`\nof compiler flags to pass to libclang for the current file. The absolute path of\nthat file is accessible under the `filename` key of the `kwargs` dictionary.\nThat\'s it! This is actually enough for most projects, but for complex projects\nit is not uncommon to integrate directly with an existing build system using the\nfull power of the Python language.\n\nFor a more elaborate example,\n[see ycmd\'s own `.ycm_extra_conf.py`][ycmd_flags_example]. You should be able to\nuse it _as a starting point_. **Don\'t** just copy/paste that file somewhere and\nexpect things to magically work; **your project needs different flags**. Hint:\njust replace the strings in the `flags` variable with compilation flags\nnecessary for your project. That should be enough for 99% of projects.\n\nYou could also consider using [YCM-Generator][ygen] to generate the\n`ycm_extra_conf.py` file.\n\n#### Errors during compilation\n\nIf Clang encounters errors when compiling the header files that your file\nincludes, then it\'s probably going to take a long time to get completions.  When\nthe completion menu finally appears, it\'s going to have a large number of\nunrelated completion strings (type/function names that are not actually\nmembers). This is because Clang fails to build a precompiled preamble for your\nfile if there are any errors in the included headers and that preamble is key to\ngetting fast completions.\n\nCall the `:YcmDiags` command to see if any errors or warnings were detected in\nyour file.\n\n\n#### Selecting a C-family completion engine\n\nCurrently YCM supports two completion engines for C-family semantic completion.\nOne libclang-based and an [clangd]-based completer. When in doubt we recommend\nusing the libclang-based engine. Here is a quick comparison of the two completer\nengines:\n\n- **Project wide indexing**: Clangd has both dynamic and static index support.\n  The dynamic index stores up-to-date symbols coming from any files you are\n  currently editing, whereas static index contains project-wide symbol\n  information. This symbol information is used for code completion and code\n  navigation. Whereas libclang is limited to the current translation unit(TU).\n- **Code navigation**: Clangd provides all the GoTo requests libclang provides and it\n  improves those using the above mentioned index information to contain\n  project-wide information rather than just the current TU.\n- **Rename**: Clangd can perform semantic rename operations on the current\n  file, whereas libclang doesn\xe2\x80\x99t support such functionality.\n- **Code Completion**: Clangd can perform code completions at a lower latency\n  than libclang; also, it has information about all the symbols in your\n  project so it can suggest items outside your current TU and also provides\n  proper `#include` insertions for those items.\n- **Signature help**: Clangd provides signature help so that you can see the\n  names and types of arguments when calling functions.\n- **Format Code**: Clangd provides code formatting either for the selected\n  lines or the whole file, whereas libclang doesn\xe2\x80\x99t have such functionality.\n- **Performance**: Clangd has faster reparse and code completion times\n  compared to libclang.\n\nTo enable:\n\n- libclang-based completer pass `--clang-completer`\n- [clangd][]-based completer pass `--clangd-completer`\n\nto `install.py` while following the [installation guide](#installation). As\nmentioned before, pass `--clang-completer` when in doubt, since the\n[clangd][]-based completer is still in heavy development.\n\n### Java Semantic Completion\n\n#### Java quick Start\n\n1. Ensure that you have enabled the Java completer. See the\n   [installation guide](#installation) for details.\n\n2. Create a project file (gradle or maven) file in the root directory of your\n   Java project, by following the instructions below.\n\n3. (Optional) [Configure the LSP server](#lsp-configuration). The [jdt.ls\n   configuration options][jdtls-preferences] can be found in their codebase.\n\n4. If you previously used Eclim or Syntastic for Java, disable them for Java.\n\n5. Edit a Java file from your project.\n\nFor the best experience, we highly recommend at least Vim 8.1.1875 when using\nJava support with YouCompleteMe.\n\n#### Java Project Files\n\nIn order to provide semantic analysis, the Java completion engine requires\nknowledge of your project structure. In particular it needs to know the class\npath to use, when compiling your code. Fortunately [jdt.ls][]\nsupports [eclipse project files][eclipse-project],\n[maven projects][mvn-project] and [gradle projects][gradle-project].\n\n**NOTE:** Our recommendation is to use either maven or gradle projects.\n\n#### Diagnostic display - Syntastic\n\nThe native support for Java includes YCM\'s native realtime diagnostics display.\nThis can conflict with other diagnostics plugins like Syntastic, so when\nenabling Java support, please **manually disable Syntastic Java diagnostics**.\n\nAdd the following to your `vimrc`:\n\n```viml\nlet g:syntastic_java_checkers = []\n```\n\n#### Diagnostic display - Eclim\n\nThe native support for Java includes YCM\'s native realtime diagnostics display.\nThis can conflict with other diagnostics plugins like Eclim, so when enabling\nJava support, please **manually disable Eclim Java diagnostics**.\n\nAdd the following to your `vimrc`:\n\n```viml\nlet g:EclimFileTypeValidate = 0\n```\n\n**NOTE**: We recommend disabling Eclim entirely when editing Java with YCM\'s\nnative Java support. This can be done temporarily with `:EclimDisable`.\n\n#### Eclipse Projects\n\nEclipse style projects require two files: [.project][eclipse-dot-project] and\n[.classpath][eclipse-dot-classpath].\n\nIf your project already has these files due to previously being set up within\neclipse, then no setup is required. [jdt.ls][] should load the project just\nfine (it\'s basically eclipse after all).\n\nHowever, if not, it is possible (easy in fact) to craft them manually, though it\nis not recommended. You\'re better off using gradle or maven (see below).\n\n[A simple eclipse style project example][ycmd-eclipse-project] can be found in\nthe ycmd test directory. Normally all that is required is to copy these files to\nthe root of your project and to edit the `.classpath` to add additional\nlibraries, such as:\n\n```xml\n  <classpathentry kind="lib" path="/path/to/external/jar" />\n  <classpathentry kind="lib" path="/path/to/external/java/source" />\n```\n\nIt may also be necessary to change the directory in which your source files are\nlocated (paths are relative to the .project file itself):\n\n```xml\n  <classpathentry kind="src" output="target/classes" path="path/to/src/" />\n```\n\n**NOTE**: The eclipse project and classpath files are not a public interface\nand it is highly recommended to use Maven or Gradle project definitions if you\ndon\'t already use eclipse to manage your projects.\n\n#### Maven Projects\n\nMaven needs a file named [pom.xml][mvn-project] in the root of the project.\nOnce again a simple [pom.xml][ycmd-mvn-pom-xml] can be found in ycmd source.\n\nThe format of [pom.xml][mvn-project] files is way beyond the scope of this\ndocument, but we do recommend using the various tools that can generate them for\nyou, if you\'re not familiar with them already.\n\n#### Gradle Projects\n\nGradle projects require a [build.gradle][gradle-project]. Again, there is a\n[trivial example in ycmd\'s tests][ycmd-gradle-project].\n\nThe format of [build.gradle][gradle-project] files is way beyond the scope of\nthis document, but we do recommend using the various tools that can generate\nthem for you, if you\'re not familiar with them already.\n\n#### Troubleshooting\n\nIf you\'re not getting completions or diagnostics, check the server health:\n\n* The Java completion engine takes a while to start up and parse your project.\n  You should be able to see its progress in the command line, and\n  `:YcmDebugInfo`. Ensure that the following lines are present:\n\n```\n--   jdt.ls Java Language Server running\n--   jdt.ls Java Language Server Startup Status: Ready\n```\n\n* If the above lines don\'t appear after a few minutes, check the jdt.ls and ycmd\n  log files using [`:YcmToggleLogs` ](#the-ycmtogglelogs-command). The jdt.ls\n  log file is called `.log` (for some reason).\n\nIf you get a message about "classpath is incomplete", then make sure you have\ncorrectly configured the [project files](#java-project-files).\n\nIf you get messages about unresolved imports, then make sure you have\ncorrectly configured the [project files](#java-project-files), in particular\ncheck that the classpath is set correctly.\n\nFor anything else, [contact us](#contact). Java support is experimental at\npresent so we\'d love to hear your feedback! Please do remember to check\n[CONTRIBUTING.md][contributing-md] for the list of diagnostics we\'ll need.\n\n### C# Semantic Completion\n\nYCM relies on [OmniSharp-Roslyn][] to provide completion and code navigation.\nOmniSharp-Roslyn needs a solution file for a C# project and there are two ways\nof letting YCM know about your solution files.\n\n#### Automaticly discovered solution files\n\nYCM will scan all parent directories of the file currently being edited and look\nfor file with `.sln` extension.\n\n#### Manually specified solution files\n\nIf YCM loads `.ycm_extra_conf.py` which contains `CSharpSolutionFile` function,\nYCM will try to use that to determine the solution file. This is useful when one\nwants to override the default behaviour and specify a solution file that is not\nin any of the parent directories of the currently edited file. Example:\n\n```python\ndef CSharpSolutionFile( filepath ):\n  # `filepath` is the path of the file user is editing\n  return \'/path/to/solution/file\' # Can be relative to the `.ycm_extra_conf.py`\n```\n\nIf the path returned by `CSharpSolutionFile` is not an actual file, YCM will\nfall back to the other way of finding the file.\n\n### Python Semantic Completion\n\nYCM relies on the [Jedi][] engine to provide completion and code navigation. By\ndefault, it will pick the version of Python running the [ycmd server][ycmd] and\nuse its `sys.path`. While this is fine for simple projects, this needs to be\nconfigurable when working with virtual environments or in a project with\nthird-party packages. The next sections explain how to do that.\n\n#### Working with virtual environments\n\nA common practice when working on a Python project is to install its\ndependencies in a virtual environment and develop the project inside that\nenvironment. To support this, YCM needs to know the interpreter path of the\nvirtual environment. You can specify it by creating a `.ycm_extra_conf.py` file\nat the root of your project with the following contents:\n\n```python\ndef Settings( **kwargs ):\n  return {\n    \'interpreter_path\': \'/path/to/virtual/environment/python\'\n  }\n```\n\nwhere `/path/to/virtual/environment/python` is the path to the Python used\nby the virtual environment you are working in. Typically, the executable can be\nfound in the `Scripts` folder of the virtual environment directory on Windows\nand in the `bin` folder on other platforms.\n\nIf you don\'t like having to create a `.ycm_extra_conf.py` file at the root of\nyour project and would prefer to specify the interpreter path with a Vim option,\nread the [Configuring through Vim options](#configuring-through-vim-options)\nsection.\n\n#### Working with third-party packages\n\nAnother common practice is to put the dependencies directly into the project and\nadd their paths to `sys.path` at runtime in order to import them. YCM needs to\nbe told about this path manipulation to support those dependencies. This can be\ndone by creating a `.ycm_extra_conf.py` file at the root of the project. This\nfile must define a `Settings( **kwargs )` function returning a dictionary with\nthe list of paths to prepend to `sys.path` under the `sys_path` key. For\ninstance, the following `.ycm_extra_conf.py`\n\n```python\ndef Settings( **kwargs ):\n  return {\n    \'sys_path\': [\n      \'/path/to/some/third_party/package\',\n      \'/path/to/another/third_party/package\'\n    ]\n  }\n```\n\nadds the paths `/path/to/some/third_party/package` and\n`/path/to/another/third_party/package` at the start of `sys.path`.\n\nIf you would rather prepend paths to `sys.path` with a Vim option, read the\n[Configuring through Vim options](#configuring-through-vim-options) section.\n\nIf you need further control on how to add paths to `sys.path`, you should define\nthe `PythonSysPath( **kwargs )` function in the `.ycm_extra_conf.py` file. Its\nkeyword arguments are `sys_path` which contains the default `sys.path`, and\n`interpreter_path` which is the path to the Python interpreter. Here\'s a trivial\nexample that insert the `/path/to/third_party/package` path at the second\nposition of `sys.path`:\n\n```python\ndef PythonSysPath( **kwargs ):\n  sys_path = kwargs[ \'sys_path\' ]\n  sys_path.insert( 1, \'/path/to/third_party/package\' )\n  return sys_path\n```\n\nA more advanced example can be found in [YCM\'s own\n`.ycm_extra_conf.py`][ycm_flags_example].\n\n#### Configuring through Vim options\n\nYou may find inconvenient to have to create a `.ycm_extra_conf.py` file at the\nroot of each one of your projects in order to set the path to the Python\ninterpreter and/or add paths to `sys.path` and would prefer to be able to\nconfigure those through Vim options. Don\'t worry, this is possible by using the\n[`g:ycm_extra_conf_vim_data`](#the-gycm_extra_conf_vim_data-option) option and\ncreating a global extra configuration file. Let\'s take an example. Suppose that\nyou want to set the interpreter path with the `g:ycm_python_interpreter_path`\noption and prepend paths to `sys.path` with the `g:ycm_python_sys_path` option.\nSuppose also that you want to name the global extra configuration file\n`global_extra_conf.py` and that you want to put it in your HOME folder. You\nshould then add the following lines to your vimrc:\n\n```viml\nlet g:ycm_python_interpreter_path = \'\'\nlet g:ycm_python_sys_path = []\nlet g:ycm_extra_conf_vim_data = [\n  \\  \'g:ycm_python_interpreter_path\',\n  \\  \'g:ycm_python_sys_path\'\n  \\]\nlet g:ycm_global_ycm_extra_conf = \'~/global_extra_conf.py\'\n```\n\nand create the `~/global_extra_conf.py` file with the following contents:\n\n```python\ndef Settings( **kwargs ):\n  client_data = kwargs[ \'client_data\' ]\n  return {\n    \'interpreter_path\': client_data[ \'g:ycm_python_interpreter_path\' ],\n    \'sys_path\': client_data[ \'g:ycm_python_sys_path\' ]\n  }\n```\n\nThat\'s it. You are done. Note that you don\'t need to restart the server when\nsetting one of the options. YCM will automatically pick the new values.\n\n### Rust Semantic Completion\n\nCompletions and GoTo commands within the current crate and its dependencies\nshould work out of the box with no additional configuration (provided that you\nbuilt YCM with the `--rust-completer` flag; see the [*Installation*\nsection](#installation) for details). The install script takes care of\ninstalling [the Rust source code][rust-src], so no configuration is necessary.\nIn case you are running Python 2.7.8 and older, you will need to manually\ninstall [rustup][].\n\nTo [configure RLS](#lsp-configuration) look up [rls configuration options][\nrls-preferences]\n\n### Go Semantic Completion\n\nCompletions and GoTo commands should work out of the box (provided that you\nbuilt YCM with the `--go-completer` flag; see the [*Installation*\nsection](#installation) for details). The server only works for projects with\nthe "canonical" layout.\n\nWhile YCM can configure [a LSP server](#lsp-configuration), currently `gopls`\ndoesn\'t implement [the required notification][gopls-preferences].\n\n### JavaScript and TypeScript Semantic Completion\n\n**NOTE:** YCM originally used the [Tern][] engine for JavaScript but due to\n[Tern][] not being maintained anymore by its main author and the [TSServer][]\nengine offering more features, YCM is moving to [TSServer][]. This won\'t affect\nyou if you were already using [Tern][] but you are encouraged to do the switch\nby deleting the `third_party/ycmd/third_party/tern_runtime/node_modules`\ndirectory in YCM folder. If you are a new user but still want to use [Tern][],\nyou should pass the `--js-completer` option to the `install.py` script during\ninstallation. Further instructions on how to setup YCM with [Tern][] are\navailable on [the wiki][tern-instructions].\n\nAll JavaScript and TypeScript features are provided by the [TSServer][] engine,\nwhich is included in the TypeScript SDK. To enable these features, install\n[Node.js and npm][npm-install] and call the `install.py` script with the\n`--ts-completer` flag.\n\n[TSServer][] relies on [the `jsconfig.json` file][jsconfig.json] for JavaScript\nand [the `tsconfig.json` file][tsconfig.json] for TypeScript to analyze your\nproject. Ensure the file exists at the root of your project.\n\nTo get diagnostics in JavaScript, set the `checkJs` option to `true` in your\n`jsconfig.json` file:\n```json\n{\n    "compilerOptions": {\n        "checkJs": true\n    }\n}\n```\n\n### Semantic Completion for Other Languages\n\nC-family, C#, Go, Java, Python, Rust, and JavaScript/TypeScript languages are\nsupported natively by YouCompleteMe using the [Clang][], [OmniSharp-Roslyn][],\n[Gopls][], [jdt.ls][], [Jedi][], [rls][], and [TSServer][] engines,\nrespectively. Check the [installation](#installation) section for instructions\nto enable these features if desired.\n\n#### Plugging an arbitrary LSP server\n\nSimilar to other LSP clients, YCM can use an arbitrary LSP server with the help\nof [`g:ycm_language_server`](#the-gycm_language_server-option) option. An\nexample of a value of this option would be:\n\n```viml\nlet g:ycm_language_server = \n  \\ [ \n  \\   {\n  \\     \'name\': \'yaml\',\n  \\     \'cmdline\': [ \'/path/to/yaml/server/yaml-language-server\', \'--stdio\' ],\n  \\     \'filetypes\': [ \'yaml\' ]\n  \\   },\n  \\   {\n  \\     \'name\': \'rust\',\n  \\     \'cmdline\': [ \'ra_lsp_server\' ],\n  \\     \'filetypes\': [ \'rust\' ],\n  \\     \'project_root_files\': [ \'Cargo.toml\' ]\n  \\   }\n  \\ ]\n```\n\n`project_root_files` is an optional key, since not all servers need it.\n\nWhen [configuring a LSP server](#lsp-configuration) the value of the `name` key\nwill be used as the `kwargs[ \'language\' ]`.\n\nSee [the LSP Examples](https://github.com/ycm-core/lsp-examples) project for more\nexamples of configuring the likes of PHP, Ruby, Kotlin, and D.\n\n#### Using `omnifunc` for semantic completion\n\nYCM will use your `omnifunc` (see `:h omnifunc` in Vim) as a source for semantic\ncompletions if it does not have a native semantic completion engine for your\nfile\'s filetype. Vim comes with okayish omnifuncs for various languages like\nRuby, PHP, etc. It depends on the language.\n\nYou can get a stellar omnifunc for Ruby with [Eclim][]. Just make sure you have\nthe _latest_ Eclim installed and configured (this means Eclim `>= 2.2.*` and\nEclipse `>= 4.2.*`).\n\nAfter installing Eclim remember to create a new Eclipse project within your\napplication by typing `:ProjectCreate <path-to-your-project> -n ruby` inside vim\nand don\'t forget to have `let g:EclimCompletionMethod = \'omnifunc\'` in your\nvimrc. This will make YCM and Eclim play nice; YCM will use Eclim\'s omnifuncs as\nthe data source for semantic completions and provide the auto-triggering and\nsubsequence-based matching (and other YCM features) on top of it.\n\n### LSP Configuration\n\nMany LSP servers allow some level of user configuration. YCM enables this with\nthe help of `.ycm_extra_conf.py` files. Here\'s an example of jdt.ls user\nconfiguration.\n\n```python\ndef Settings( **kwargs ):\n  if kwargs[ \'language\' ] == \'java\':\n    return { \'ls\': { \'java.format.onType.enabled\': True } }\n```\n\nThe `ls` key tells YCM that the dictionary should be passed to thet LSP server.\nFor each of the LSP server\'s configuration you should look up the respective\nserver\'s documentation.\n\n### Writing New Semantic Completers\n\nYou have two options here: writing an `omnifunc` for Vim\'s omnicomplete system\nthat YCM will then use through its omni-completer, or a custom completer for YCM\nusing the [Completer API][completer-api].\n\nHere are the differences between the two approaches:\n\n- You have to use VimScript to write the omnifunc, but get to use Python to\n  write for the Completer API; this by itself should make you want to use the\n  API.\n- The Completer API is a _much_ more powerful way to integrate with YCM and it\n  provides a wider set of features. For instance, you can make your Completer\n  query your semantic back-end in an asynchronous fashion, thus not blocking\n  Vim\'s GUI thread while your completion system is processing stuff. This is\n  impossible with VimScript. All of YCM\'s completers use the Completer API.\n- Performance with the Completer API is better since Python executes faster than\n  VimScript.\n\nIf you want to use the `omnifunc` system, see the relevant Vim docs with `:h\ncomplete-functions`. For the Completer API, see [the API docs][completer-api].\n\nIf you want to upstream your completer into YCM\'s source, you should use the\nCompleter API.\n\n### Diagnostic Display\n\nYCM will display diagnostic notifications for the C-family, C#, Go, Java,\nJavaScript, Rust and TypeScript languages. Since YCM continuously recompiles\nyour file as you type, you\'ll get notified of errors and warnings in your file\nas fast as possible.\n\nHere are the various pieces of the diagnostic UI:\n\n- Icons show up in the Vim gutter on lines that have a diagnostic.\n- Regions of text related to diagnostics are highlighted (by default, a red\n  wavy underline in `gvim` and a red background in `vim`).\n- Moving the cursor to a line with a diagnostic echoes the diagnostic text.\n- Vim\'s location list is automatically populated with diagnostic data (off by\n  default, see options).\n\nThe new diagnostics (if any) will be displayed the next time you press any key\non the keyboard. So if you stop typing and just wait for the new diagnostics to\ncome in, that _will not work_. You need to press some key for the GUI to update.\n\nHaving to press a key to get the updates is unfortunate, but cannot be changed\ndue to the way Vim internals operate; there is no way that a background task can\nupdate Vim\'s GUI after it has finished running.  You _have to_ press a key. This\nwill make YCM check for any pending diagnostics updates.\n\nYou _can_ force a full, blocking compilation cycle with the\n`:YcmForceCompileAndDiagnostics` command (you may want to map that command to a\nkey; try putting `nnoremap <F5> :YcmForceCompileAndDiagnostics<CR>` in your\nvimrc). Calling this command will force YCM to immediately recompile your file\nand display any new diagnostics it encounters. Do note that recompilation with\nthis command may take a while and during this time the Vim GUI _will_ be\nblocked.\n\nYCM will display a short diagnostic message when you move your cursor to the\nline with the error. You can get a detailed diagnostic message with the\n`<leader>d` key mapping (can be changed in the options) YCM provides when your\ncursor is on the line with the diagnostic.\n\nYou can also see the full diagnostic message for all the diagnostics in the\ncurrent file in Vim\'s `locationlist`, which can be opened with the `:lopen` and\n`:lclose` commands (make sure you have set `let\ng:ycm_always_populate_location_list = 1` in your vimrc). A good way to toggle\nthe display of the `locationlist` with a single key mapping is provided by\nanother (very small) Vim plugin called [ListToggle][] (which also makes it\npossible to change the height of the `locationlist` window), also written by\nyours truly.\n\n#### Diagnostic Highlighting Groups\n\nYou can change the styling for the highlighting groups YCM uses. For the signs\nin the Vim gutter, the relevant groups are:\n\n- `YcmErrorSign`, which falls back to group `SyntasticErrorSign` and then\n  `error` if they exist\n- `YcmWarningSign`, which falls back to group `SyntasticWarningSign` and then\n  `todo` if they exist\n\nYou can also style the line that has the warning/error with these groups:\n\n- `YcmErrorLine`, which falls back to group `SyntasticErrorLine` if it exists\n- `YcmWarningLine`, which falls back to group `SyntasticWarningLine` if it\n  exists\n\nNote that the line highlighting groups only work when the\n[`g:ycm_enable_diagnostic_signs`](#the-gycm_enable_diagnostic_signs-option)\noption is set. If you want highlighted lines but no signs in the Vim gutter,\nensure that your Vim version is 7.4.2201 or later and set the `signcolumn`\noption to `off` in your vimrc:\n\n```viml\nset signcolumn=off\n```\n\nThe syntax groups used to highlight regions of text with errors/warnings:\n- `YcmErrorSection`, which falls back to group `SyntasticError` if it exists and\n  then `SpellBad`\n- `YcmWarningSection`, which falls back to group `SyntasticWarning` if it exists\n  and then `SpellCap`\n\nHere\'s how you\'d change the style for a group:\n\n```viml\nhighlight YcmErrorLine guibg=#3f0000\n```\n\nCommands\n--------\n\n### The `:YcmRestartServer` command\n\nIf the [ycmd completion server][ycmd] suddenly stops for some reason, you can\nrestart it with this command.\n\n### The `:YcmForceCompileAndDiagnostics` command\n\nCalling this command will force YCM to immediately recompile your file\nand display any new diagnostics it encounters. Do note that recompilation with\nthis command may take a while and during this time the Vim GUI _will_ be\nblocked.\n\nYou may want to map this command to a key; try putting `nnoremap <F5>\n:YcmForceCompileAndDiagnostics<CR>` in your vimrc.\n\n### The `:YcmDiags` command\n\nCalling this command will fill Vim\'s `locationlist` with errors or warnings if\nany were detected in your file and then open it. If a given error or warning can\nbe fixed by a call to `:YcmCompleter FixIt`, then ` (FixIt available)` is\nappended to the error or warning text. See the `FixIt` completer subcommand for\nmore information.\n\n**NOTE:** The absence of ` (FixIt available)` does not strictly imply a fix-it\nis not available as not all completers are able to provide this indication. For\nexample, the c-sharp completer provides many fix-its but does not add this\nadditional indication.\n\nThe `g:ycm_open_loclist_on_ycm_diags` option can be used to prevent the location\nlist from opening, but still have it filled with new diagnostic data. See the\n_Options_ section for details.\n\n### The `:YcmShowDetailedDiagnostic` command\n\nThis command shows the full diagnostic text when the user\'s cursor is on the\nline with the diagnostic.\n\n### The `:YcmDebugInfo` command\n\nThis will print out various debug information for the current file. Useful to\nsee what compile commands will be used for the file if you\'re using the semantic\ncompletion engine.\n\n### The `:YcmToggleLogs` command\n\nThis command presents the list of logfiles created by YCM, the [ycmd\nserver][ycmd], and the semantic engine server for the current filetype, if any.\nOne of these logfiles can be opened in the editor (or closed if already open) by\nentering the corresponding number or by clicking on it with the mouse.\nAdditionally, this command can take the logfile names as arguments. Use the\n`<TAB>` key (or any other key defined by the `wildchar` option) to complete the\narguments or to cycle through them (depending on the value of the `wildmode`\noption). Each logfile given as an argument is directly opened (or closed if\nalready open) in the editor. Only for debugging purposes.\n\n### The `:YcmCompleter` command\n\nThis command gives access to a number of additional [IDE-like\nfeatures](#quick-feature-summary) in YCM, for things like semantic GoTo, type\ninformation, FixIt and refactoring.\n\nThis command accepts a range that can either be specified through a selection in\none of Vim\'s visual modes (see `:h visual-use`) or on the command line. For\ninstance, `:2,5YcmCompleter` will apply the command from line 2 to line 5. This\nis useful for [the `Format` subcommand](#the-format-subcommand).\n\nCall `YcmCompleter` without further arguments for a list of the commands you can\ncall for the current completer.\n\nSee the [file type feature summary](#quick-feature-summary) for an overview of\nthe features available for each file type. See the _YcmCompleter subcommands_\nsection for more information on the available subcommands and their usage.\n\nYcmCompleter Subcommands\n------------------------\n\n**NOTE:** See the docs for the `YcmCompleter` command before tackling this\nsection.\n\nThe invoked subcommand is automatically routed to the currently active semantic\ncompleter, so `:YcmCompleter GoToDefinition` will invoke the `GoToDefinition`\nsubcommand on the Python semantic completer if the currently active file is a\nPython one and on the Clang completer if the currently active file is a C-family\nlanguage one.\n\nYou may also want to map the subcommands to something less verbose; for\ninstance, `nnoremap <leader>jd :YcmCompleter GoTo<CR>`\nmaps the `<leader>jd` sequence to the longer subcommand invocation.\n\n### GoTo Commands\n\nThese commands are useful for jumping around and exploring code. When moving\nthe cursor, the subcommands add entries to Vim\'s `jumplist` so you can use\n`CTRL-O` to jump back to where you were before invoking the command (and\n`CTRL-I` to jump forward; see `:h jumplist` for details). If there is more\nthan one destination, the quickfix list (see `:h quickfix`) is populated with\nthe available locations and opened to full width at the bottom of the screen.\nYou can change this behavior by using [the `YcmQuickFixOpened`\nautocommand](#the-ycmquickfixopened-autocommand).\n\n#### The `GoToInclude` subcommand\n\nLooks up the current line for a header and jumps to it.\n\nSupported in filetypes: `c, cpp, objc, objcpp, cuda`\n\n#### The `GoToDeclaration` subcommand\n\nLooks up the symbol under the cursor and jumps to its declaration.\n\nSupported in filetypes: `c, cpp, objc, objcpp, cuda, cs, go, java, javascript,\npython, rust, typescript`\n\n#### The `GoToDefinition` subcommand\n\nLooks up the symbol under the cursor and jumps to its definition.\n\n**NOTE:** For C-family languages **this only works in certain situations**,\nnamely when the definition of the symbol is in the current translation unit. A\ntranslation unit consists of the file you are editing and all the files you are\nincluding with `#include` directives (directly or indirectly) in that file.\n\nSupported in filetypes: `c, cpp, objc, objcpp, cuda, cs, go, java, javascript,\npython, rust, typescript`\n\n#### The `GoTo` subcommand\n\nThis command tries to perform the "most sensible" GoTo operation it can.\nCurrently, this means that it tries to look up the symbol under the cursor and\njumps to its definition if possible; if the definition is not accessible from\nthe current translation unit, jumps to the symbol\'s declaration. For\nC-family languages, it first tries to look up the current line for a header and\njump to it. For C#, implementations are also considered and preferred.\n\nSupported in filetypes: `c, cpp, objc, objcpp, cuda, cs, go, java, javascript,\npython, rust, typescript`\n\n#### The `GoToImprecise` subcommand\n\nWARNING: This command trades correctness for speed!\n\nSame as the `GoTo` command except that it doesn\'t recompile the file with\nlibclang before looking up nodes in the AST. This can be very useful when you\'re\nediting files that take long to compile but you know that you haven\'t made any\nchanges since the last parse that would lead to incorrect jumps. When you\'re\njust browsing around your codebase, this command can spare you quite a bit of\nlatency.\n\nSupported in filetypes: `c, cpp, objc, objcpp, cuda`\n\n#### The `GoToReferences` subcommand\n\nThis command attempts to find all of the references within the project to the\nidentifier under the cursor and populates the quickfix list with those\nlocations.\n\nSupported in filetypes: `c, cpp, objc, objcpp, cuda, java, javascript, python, typescript, rust`\n\n#### The `GoToImplementation` subcommand\n\nLooks up the symbol under the cursor and jumps to its implementation (i.e.\nnon-interface). If there are multiple implementations, instead provides a list\nof implementations to choose from.\n\nSupported in filetypes: `cs, java, rust`\n\n#### The `GoToImplementationElseDeclaration` subcommand\n\nLooks up the symbol under the cursor and jumps to its implementation if one,\nelse jump to its declaration. If there are multiple implementations, instead\nprovides a list of implementations to choose from.\n\nSupported in filetypes: `cs`\n\n#### The `GoToType` subcommand\n\nLooks up the symbol under the cursor and jumps to the definition of its type\ne.g. if the symbol is an object, go to the definition of its class.\n\nSupported in filetypes: `go, java, javascript, typescript`\n\n### Semantic Information Commands\n\nThese commands are useful for finding static information about the code, such\nas the types of variables, viewing declarations and documentation strings.\n\n#### The `GetType` subcommand\n\nEchos the type of the variable or method under the cursor, and where it differs,\nthe derived type.\n\nFor example:\n\n```c++\n    std::string s;\n```\n\nInvoking this command on `s` returns `std::string => std::basic_string<char>`\n\n**NOTE:** Causes re-parsing of the current translation unit.\n\nSupported in filetypes: `c, cpp, objc, objcpp, cuda, java, javascript,\ngo, python, typescript, rust`\n\n#### The `GetTypeImprecise` subcommand\n\nWARNING: This command trades correctness for speed!\n\nSame as the `GetType` command except that it doesn\'t recompile the file with\nlibclang before looking up nodes in the AST. This can be very useful when you\'re\nediting files that take long to compile but you know that you haven\'t made any\nchanges since the last parse that would lead to incorrect type. When you\'re\njust browsing around your codebase, this command can spare you quite a bit of\nlatency.\n\nSupported in filetypes: `c, cpp, objc, objcpp, cuda`\n\n#### The `GetParent` subcommand\n\nEchos the semantic parent of the point under the cursor.\n\nThe semantic parent is the item that semantically contains the given position.\n\nFor example:\n\n```c++\nclass C {\n    void f();\n};\n\nvoid C::f() {\n\n}\n```\n\nIn the out-of-line definition of `C::f`, the semantic parent is the class `C`,\nof which this function is a member.\n\nIn the example above, both declarations of `C::f` have `C` as their semantic\ncontext, while the lexical context of the first `C::f` is `C` and the lexical\ncontext of the second `C::f` is the translation unit.\n\nFor global declarations, the semantic parent is the translation unit.\n\n**NOTE:** Causes re-parsing of the current translation unit.\n\nSupported in filetypes: `c, cpp, objc, objcpp, cuda`\n\n#### The `GetDoc` subcommand\n\nDisplays the preview window populated with quick info about the identifier\nunder the cursor. Depending on the file type, this includes things like:\n\n* The type or declaration of identifier,\n* Doxygen/javadoc comments,\n* Python docstrings,\n* etc.\n\nSupported in filetypes: `c, cpp, objc, objcpp, cuda, cs, go, java, javascript,\npython, typescript, rust`\n\n#### The `GetDocImprecise` subcommand\n\nWARNING: This command trades correctness for speed!\n\nSame as the `GetDoc` command except that it doesn\'t recompile the file with\nlibclang before looking up nodes in the AST. This can be very useful when you\'re\nediting files that take long to compile but you know that you haven\'t made any\nchanges since the last parse that would lead to incorrect docs. When you\'re\njust browsing around your codebase, this command can spare you quite a bit of\nlatency.\n\nSupported in filetypes: `c, cpp, objc, objcpp, cuda`\n\n### Refactoring Commands\n\nThese commands make changes to your source code in order to perform refactoring\nor code correction. YouCompleteMe does not perform any action which cannot be\nundone, and never saves or writes files to the disk.\n\n#### The `FixIt` subcommand\n\nWhere available, attempts to make changes to the buffer to correct diagnostics\non the current line. Where multiple suggestions are available (such as when\nthere are multiple ways to resolve a given warning, or where multiple\ndiagnostics are reported for the current line), the options are presented\nand one can be selected.\n\nCompleters which provide diagnostics may also provide trivial modifications to\nthe source in order to correct the diagnostic. Examples include syntax errors\nsuch as missing trailing semi-colons, spurious characters, or other errors which\nthe semantic engine can deterministically suggest corrections.\n\nIf no fix-it is available for the current line, or there is no diagnostic on the\ncurrent line, this command has no effect on the current buffer. If any\nmodifications are made, the number of changes made to the buffer is echo\'d and\nthe user may use the editor\'s undo command to revert.\n\nWhen a diagnostic is available, and `g:ycm_echo_current_diagnostic` is set to 1,\nthen the text ` (FixIt)` is appended to the echo\'d diagnostic when the\ncompleter is able to add this indication. The text ` (FixIt available)` is\nalso appended to the diagnostic text in the output of the `:YcmDiags` command\nfor any diagnostics with available fix-its (where the completer can provide this\nindication).\n\n**NOTE:** Causes re-parsing of the current translation unit.\n\nSupported in filetypes: `c, cpp, objc, objcpp, cuda, cs, go, java, javascript,\nrust, typescript`\n\n#### The `RefactorRename <new name>` subcommand\n\nIn supported file types, this command attempts to perform a semantic rename of\nthe identifier under the cursor. This includes renaming declarations,\ndefinitions and usages of the identifier, or any other language-appropriate\naction. The specific behavior is defined by the semantic engine in use.\n\nSimilar to `FixIt`, this command applies automatic modifications to your source\nfiles. Rename operations may involve changes to multiple files, which may or may\nnot be open in Vim buffers at the time. YouCompleteMe handles all of this for\nyou. The behavior is described in [the following section](#multi-file-refactor).\n\nSupported in filetypes: `c, cpp, objc, objcpp, cuda, java, javascript, typescript, rust`\n\n#### Multi-file Refactor\n\nWhen a Refactor or FixIt command touches multiple files, YouCompleteMe attempts\nto apply those modifications to any existing open, visible buffer in the current\ntab. If no such buffer can be found, YouCompleteMe opens the file in a new\nsmall horizontal split at the top of the current window, applies the change,\nand then *hides* the window. **NOTE:** The buffer remains open, and must be\nmanually saved. A confirmation dialog is opened prior to doing this to remind\nyou that this is about to happen.\n\nOnce the modifications have been made, the quickfix list (see `:help quickfix`)\nis populated with the locations of all modifications. This can be used to review\nall automatic changes made by using `:copen`. Typically, use the `CTRL-W\n<enter>` combination to open the selected file in a new split. It is possible to\ncustomize how the quickfix window is opened by using [the `YcmQuickFixOpened`\nautocommand](#the-ycmquickfixopened-autocommand).\n\nThe buffers are *not* saved automatically. That is, you must save the modified\nbuffers manually after reviewing the changes from the quickfix list. Changes\ncan be undone using Vim\'s powerful undo features (see `:help undo`). Note\nthat Vim\'s undo is per-buffer, so to undo all changes, the undo commands must\nbe applied in each modified buffer separately.\n\n**NOTE:** While applying modifications, Vim may find files which are already\nopen and have a swap file. The command is aborted if you select Abort or Quit in\nany such prompts. This leaves the Refactor operation partially complete and must\nbe manually corrected using Vim\'s undo features. The quickfix list is *not*\npopulated in this case. Inspect `:buffers` or equivalent (see `:help buffers`)\nto see the buffers that were opened by the command.\n\n#### The `Format` subcommand\n\nThis command formats the whole buffer or some part of it according to the value\nof the Vim options `shiftwidth` and `expandtab` (see `:h \'sw\'` and `:h et`\nrespectively). To format a specific part of your document, you can either select\nit in one of Vim\'s visual modes (see `:h visual-use`) and run the command or\ndirectly enter the range on the command line, e.g. `:2,5YcmCompleter Format` to\nformat it from line 2 to line 5.\n\nSupported in filetypes: `c, cpp, objc, objcpp, cuda, java, javascript, go, typescript, rust`\n\n#### The `OrganizeImports` subcommand\n\nThis command removes unused imports and sorts imports in the current file. It\ncan also group imports from the same module in TypeScript and resolves imports\nin Java.\n\nSupported in filetypes: `java, javascript, typescript`\n\n### Miscellaneous Commands\n\nThese commands are for general administration, rather than IDE-like features.\nThey cover things like the semantic engine server instance and compilation\nflags.\n\n#### The `ExecuteCommand <args>` subcommand\n\nSome LSP completers (currently Rust and Java completers) support executing\nserver specific commands. Consult the [rls][] and [jdt.ls][] respective\ndocumentations to find out what commands are supported and which arguments are\nexpected.\n\nThe support for `ExecuteCommand` was implemented to support plugins like\n[vimspector][] to debug java, but isn\'t limited to that specific use case.\n\n#### The `RestartServer` subcommand\n\nRestarts the semantic-engine-as-localhost-server for those semantic engines that\nwork as separate servers that YCM talks to.\n\nSupported in filetypes: `c, cpp, objc, objcpp, cuda, cs, go, java, javascript, rust, typescript`\n\n#### The `ClearCompilationFlagCache` subcommand\n\nYCM caches the flags it gets from the `Settings` function in your\n`.ycm_extra_conf.py` file unless you return them with the `do_cache` parameter\nset to `False`. It also caches the flags extracted from the compilation\ndatabase. The cache is in memory and is never invalidated (unless you restart\nthe server with the `:YcmRestartServer` command).\n\nThis command clears that cache entirely. YCM will then re-query your\n`Settings` function or your compilation database as needed in the future.\n\nSupported in filetypes: `c, cpp, objc, objcpp, cuda, rust`\n\n#### The `ReloadSolution` subcommand\n\nInstruct the Omnisharp-Roslyn server to clear its cache and reload all files\nfrom disk.  This is useful when files are added, removed, or renamed in the\nsolution, files are changed outside of Vim, or whenever Omnisharp-Roslyn cache\nis out-of-sync.\n\nSupported in filetypes: `cs`\n\nFunctions\n--------\n\n### The `youcompleteme#GetErrorCount` function\n\nGet the number of YCM Diagnostic errors. If no errors are present, this function\nreturns 0.\n\nFor example:\n```viml\n  call youcompleteme#GetErrorCount()\n```\n\nBoth this function and `youcompleteme#GetWarningCount` can be useful when\nintegrating YCM with other Vim plugins. For example, a [lightline][] user could\nadd a diagnostics section to their statusline which would display the number of\nerrors and warnings.\n\n### The `youcompleteme#GetWarningCount` function\n\nGet the number of YCM Diagnostic warnings. If no warnings are present, this\nfunction returns 0.\n\nFor example:\n```viml\n  call youcompleteme#GetWarningCount()\n```\n\nAutocommands\n------------\n\n### The `YcmLocationOpened` autocommand\n\nThis `User` autocommand is fired when YCM opens the location list window in\nresponse to the `YcmDiags` command. By default, the location list window is\nopened to the bottom of the current window and its height is set to fit all\nentries. This behavior can be overridden by using the `YcmLocationOpened`\nautocommand which is triggered while the cursor is in the location list window.\nFor instance:\n```viml\nfunction! s:CustomizeYcmLocationWindow()\n  " Move the window to the top of the screen.\n  wincmd K\n  " Set the window height to 5.\n  5wincmd _\n  " Switch back to working window.\n  wincmd p\nendfunction\n\nautocmd User YcmLocationOpened call s:CustomizeYcmLocationWindow()\n```\n\n### The `YcmQuickFixOpened` autocommand\n\nThis `User` autocommand is fired when YCM opens the quickfix window in response\nto the `GoTo*` and `RefactorRename` subcommands. By default, the quickfix window\nis opened to full width at the bottom of the screen and its height is set to fit\nall entries. This behavior can be overridden by using the `YcmQuickFixOpened`\nautocommand which is triggered while the cursor is in the quickfix window. For\ninstance:\n```viml\nfunction! s:CustomizeYcmQuickFixWindow()\n  " Move the window to the top of the screen.\n  wincmd K\n  " Set the window height to 5.\n  5wincmd _\nendfunction\n\nautocmd User YcmQuickFixOpened call s:CustomizeYcmQuickFixWindow()\n```\n\nOptions\n-------\n\nAll options have reasonable defaults so if the plug-in works after installation\nyou don\'t need to change any options. These options can be configured in your\n[vimrc script][vimrc] by including a line like this:\n\n```viml\nlet g:ycm_min_num_of_chars_for_completion = 1\n```\n\nNote that after changing an option in your [vimrc script][vimrc] you have to\nrestart [ycmd][] with the `:YcmRestartServer` command for the changes to take\neffect.\n\n### The `g:ycm_min_num_of_chars_for_completion` option\n\nThis option controls the number of characters the user needs to type before\nidentifier-based completion suggestions are triggered. For example, if the\noption is set to `2`, then when the user types a second alphanumeric character\nafter a whitespace character, completion suggestions will be triggered. This\noption is NOT used for semantic completion.\n\nSetting this option to a high number like `99` effectively turns off the\nidentifier completion engine and just leaves the semantic engine.\n\nDefault: `2`\n\n```viml\nlet g:ycm_min_num_of_chars_for_completion = 2\n```\n\n### The `g:ycm_min_num_identifier_candidate_chars` option\n\nThis option controls the minimum number of characters that a completion\ncandidate coming from the identifier completer must have to be shown in the\npopup menu.\n\nA special value of `0` means there is no limit.\n\n**NOTE:** This option only applies to the identifier completer; it has no effect\non the various semantic completers.\n\nDefault: `0`\n\n```viml\nlet g:ycm_min_num_identifier_candidate_chars = 0\n```\n\n### The `g:ycm_max_num_candidates` option\n\nThis option controls the maximum number of semantic completion suggestions shown\nin the completion menu. This only applies to suggestions from semantic\ncompletion engines; see [the `g:ycm_max_identifier_candidates`\noption](#the-gycm_max_num_identifier_candidates-option) to limit the number of\nsuggestions from the identifier-based engine.\n\nA special value of `0` means there is no limit.\n\n**NOTE:** Setting this option to `0` or to a value greater than `100` is not\nrecommended as it will slow down completion when there are a very large number\nof suggestions.\n\nDefault: `50`\n\n```viml\nlet g:ycm_max_num_candidates = 50\n```\n\n### The `g:ycm_max_num_identifier_candidates` option\n\nThis option controls the maximum number of completion suggestions from the\nidentifier-based engine shown in the completion menu.\n\nA special value of `0` means there is no limit.\n\n**NOTE:** Setting this option to `0` or to a value greater than `100` is not\nrecommended as it will slow down completion when there are a very large number\nof suggestions.\n\nDefault: `10`\n\n```viml\nlet g:ycm_max_num_identifier_candidates = 10\n```\n\n### The `g:ycm_auto_trigger` option\n\nWhen set to `0`, this option turns off YCM\'s identifier completer (the\nas-you-type popup) _and_ the semantic triggers (the popup you\'d get after typing\n`.` or `->` in say C++). You can still force semantic completion with the\n`<C-Space>` shortcut.\n\nIf you want to just turn off the identifier completer but keep the semantic\ntriggers, you should set `g:ycm_min_num_of_chars_for_completion` to a high\nnumber like `99`.\n\nDefault: `1`\n\n```viml\nlet g:ycm_auto_trigger = 1\n```\n\n### The `g:ycm_filetype_whitelist` option\n\nThis option controls for which Vim filetypes (see `:h filetype`) should YCM be\nturned on. The option value should be a Vim dictionary with keys being filetype\nstrings (like `python`, `cpp`, etc.) and values being unimportant (the\ndictionary is used like a hash set, meaning that only the keys matter).\n\nThe `*` key is special and matches all filetypes. By default, the whitelist\ncontains only this `*` key.\n\nYCM also has a `g:ycm_filetype_blacklist` option that lists filetypes for which\nYCM shouldn\'t be turned on. YCM will work only in filetypes that both the\nwhitelist and the blacklist allow (the blacklist "allows" a filetype by _not_\nhaving it as a key).\n\nFor example, let\'s assume you want YCM to work in files with the `cpp` filetype.\nThe filetype should then be present in the whitelist either directly (`cpp` key\nin the whitelist) or indirectly through the special `*` key. It should _not_ be\npresent in the blacklist.\n\nFiletypes that are blocked by the either of the lists will be completely ignored\nby YCM, meaning that neither the identifier-based completion engine nor the\nsemantic engine will operate in them.\n\nYou can get the filetype of the current file in Vim with `:set ft?`.\n\nDefault: `{\'*\': 1}`\n\n```viml\nlet g:ycm_filetype_whitelist = {\'*\': 1}\n```\n\n### The `g:ycm_filetype_blacklist` option\n\nThis option controls for which Vim filetypes (see `:h filetype`) should YCM be\nturned off. The option value should be a Vim dictionary with keys being filetype\nstrings (like `python`, `cpp`, etc.) and values being unimportant (the\ndictionary is used like a hash set, meaning that only the keys matter).\n\nSee the `g:ycm_filetype_whitelist` option for more details on how this works.\n\nDefault: `[see next line]`\n\n```viml\nlet g:ycm_filetype_blacklist = {\n      \\ \'tagbar\': 1,\n      \\ \'notes\': 1,\n      \\ \'markdown\': 1,\n      \\ \'netrw\': 1,\n      \\ \'unite\': 1,\n      \\ \'text\': 1,\n      \\ \'vimwiki\': 1,\n      \\ \'pandoc\': 1,\n      \\ \'infolog\': 1,\n      \\ \'leaderf\': 1,\n      \\ \'mail\': 1\n      \\}\n```\n\n### The `g:ycm_filetype_specific_completion_to_disable` option\n\nThis option controls for which Vim filetypes (see `:h filetype`) should the YCM\nsemantic completion engine be turned off. The option value should be a Vim\ndictionary with keys being filetype strings (like `python`, `cpp`, etc.) and\nvalues being unimportant (the dictionary is used like a hash set, meaning that\nonly the keys matter). The listed filetypes will be ignored by the YCM semantic\ncompletion engine, but the identifier-based completion engine will still trigger\nin files of those filetypes.\n\nNote that even if semantic completion is not turned off for a specific filetype,\nyou will not get semantic completion if the semantic engine does not support\nthat filetype.\n\nYou can get the filetype of the current file in Vim with `:set ft?`.\n\nDefault: `[see next line]`\n\n```viml\nlet g:ycm_filetype_specific_completion_to_disable = {\n      \\ \'gitcommit\': 1\n      \\}\n```\n\n### The `g:ycm_filepath_blacklist` option\n\nThis option controls for which Vim filetypes (see `:h filetype`) should filepath\ncompletion be disabled. The option value should be a Vim dictionary with keys\nbeing filetype strings (like `python`, `cpp`, etc.) and values being unimportant\n(the dictionary is used like a hash set, meaning that only the keys matter).\n\nThe `*` key is special and matches all filetypes. Use this key if you want to\ncompletely disable filepath completion:\n```viml\nlet g:ycm_filepath_blacklist = {\'*\': 1}\n```\n\nYou can get the filetype of the current file in Vim with `:set ft?`.\n\nDefault: `[see next line]`\n\n```viml\nlet g:ycm_filepath_blacklist = {\n      \\ \'html\': 1,\n      \\ \'jsx\': 1,\n      \\ \'xml\': 1,\n      \\}\n```\n\n### The `g:ycm_show_diagnostics_ui` option\n\nWhen set, this option turns on YCM\'s diagnostic display features. See the\n_Diagnostic display_ section in the _User Manual_ for more details.\n\nSpecific parts of the diagnostics UI (like the gutter signs, text highlighting,\ndiagnostic echo and auto location list population) can be individually turned on\nor off. See the other options below for details.\n\nNote that YCM\'s diagnostics UI is only supported for C-family languages.\n\nWhen set, this option also makes YCM remove all Syntastic checkers set for the\n`c`, `cpp`, `objc`, `objcpp`, and `cuda` filetypes since this would conflict\nwith YCM\'s own diagnostics UI.\n\nIf you\'re using YCM\'s identifier completer in C-family languages but cannot use\nthe clang-based semantic completer for those languages _and_ want to use the GCC\nSyntastic checkers, unset this option.\n\nDefault: `1`\n\n```viml\nlet g:ycm_show_diagnostics_ui = 1\n```\n\n### The `g:ycm_error_symbol` option\n\nYCM will use the value of this option as the symbol for errors in the Vim\ngutter.\n\nThis option is part of the Syntastic compatibility layer; if the option is not\nset, YCM will fall back to the value of the `g:syntastic_error_symbol` option\nbefore using this option\'s default.\n\nDefault: `>>`\n\n```viml\nlet g:ycm_error_symbol = \'>>\'\n```\n\n### The `g:ycm_warning_symbol` option\n\nYCM will use the value of this option as the symbol for warnings in the Vim\ngutter.\n\nThis option is part of the Syntastic compatibility layer; if the option is not\nset, YCM will fall back to the value of the `g:syntastic_warning_symbol` option\nbefore using this option\'s default.\n\nDefault: `>>`\n\n```viml\nlet g:ycm_warning_symbol = \'>>\'\n```\n\n### The `g:ycm_enable_diagnostic_signs` option\n\nWhen this option is set, YCM will put icons in Vim\'s gutter on lines that have a\ndiagnostic set. Turning this off will also turn off the `YcmErrorLine` and\n`YcmWarningLine` highlighting.\n\nThis option is part of the Syntastic compatibility layer; if the option is not\nset, YCM will fall back to the value of the `g:syntastic_enable_signs` option\nbefore using this option\'s default.\n\nDefault: `1`\n\n```viml\nlet g:ycm_enable_diagnostic_signs = 1\n```\n\n### The `g:ycm_enable_diagnostic_highlighting` option\n\nWhen this option is set, YCM will highlight regions of text that are related to\nthe diagnostic that is present on a line, if any.\n\nThis option is part of the Syntastic compatibility layer; if the option is not\nset, YCM will fall back to the value of the `g:syntastic_enable_highlighting`\noption before using this option\'s default.\n\nDefault: `1`\n\n```viml\nlet g:ycm_enable_diagnostic_highlighting = 1\n```\n\n### The `g:ycm_echo_current_diagnostic` option\n\nWhen this option is set, YCM will echo the text of the diagnostic present on the\ncurrent line when you move your cursor to that line. If a `FixIt` is available\nfor the current diagnostic, then ` (FixIt)` is appended.\n\nThis option is part of the Syntastic compatibility layer; if the option is not\nset, YCM will fall back to the value of the `g:syntastic_echo_current_error`\noption before using this option\'s default.\n\nDefault: `1`\n\n```viml\nlet g:ycm_echo_current_diagnostic = 1\n```\n\n### The `g:ycm_filter_diagnostics` option\n\nThis option controls which diagnostics will be rendered by YCM. This option\nholds a dictionary of key-values, where the keys are Vim\'s filetype strings\ndelimited by commas and values are dictionaries describing the filter.\n\nA filter is a dictionary of key-values, where the keys are the type of filter,\nand the value is a list of arguments to that filter. In the case of just a\nsingle item in the list, you may omit the brackets and just provide the argument\ndirectly. If any filter matches a diagnostic, it will be dropped and YCM will\nnot render it.\n\nThe following filter types are supported:\n\n- "regex": Accepts a string [regular expression][python-re]. This type matches\nwhen the regex (treated as case-insensitive) is found in the diagnostic text.\n- "level": Accepts a string level, either "warning" or "error." This type\nmatches when the diagnostic has the same level.\n\n**NOTE:** The regex syntax is **NOT** Vim\'s, it\'s [Python\'s][python-re].\n\nDefault: `{}`\n\n```viml\nlet g:ycm_filter_diagnostics = {\n  \\ "java": {\n  \\      "regex": [ ".*taco.*", ... ],\n  \\      "level": "error",\n  \\      ...\n  \\    }\n  \\ }\n```\n\n### The `g:ycm_always_populate_location_list` option\n\nWhen this option is set, YCM will populate the location list automatically every\ntime it gets new diagnostic data. This option is off by default so as not to\ninterfere with other data you might have placed in the location list.\n\nSee `:help location-list` in Vim to learn more about the location list.\n\nThis option is part of the Syntastic compatibility layer; if the option is not\nset, YCM will fall back to the value of the\n`g:syntastic_always_populate_loc_list` option before using this option\'s\ndefault.\n\nDefault: `0`\n\n```viml\nlet g:ycm_always_populate_location_list = 0\n```\n\n### The `g:ycm_open_loclist_on_ycm_diags` option\n\nWhen this option is set, `:YcmDiags` will automatically open the location list\nafter forcing a compilation and filling the list with diagnostic data.\n\nSee `:help location-list` in Vim to learn more about the location list.\n\nDefault: `1`\n\n```viml\nlet g:ycm_open_loclist_on_ycm_diags = 1\n```\n\n### The `g:ycm_complete_in_comments` option\n\nWhen this option is set to `1`, YCM will show the completion menu even when\ntyping inside comments.\n\nDefault: `0`\n\n```viml\nlet g:ycm_complete_in_comments = 0\n```\n\n### The `g:ycm_complete_in_strings` option\n\nWhen this option is set to `1`, YCM will show the completion menu even when\ntyping inside strings.\n\nNote that this is turned on by default so that you can use the filename\ncompletion inside strings. This is very useful for instance in C-family files\nwhere typing `#include "` will trigger the start of filename completion. If you\nturn off this option, you will turn off filename completion in such situations\nas well.\n\nDefault: `1`\n\n```viml\nlet g:ycm_complete_in_strings = 1\n```\n\n### The `g:ycm_collect_identifiers_from_comments_and_strings` option\n\nWhen this option is set to `1`, YCM\'s identifier completer will also collect\nidentifiers from strings and comments. Otherwise, the text in comments and\nstrings will be ignored.\n\nDefault: `0`\n\n```viml\nlet g:ycm_collect_identifiers_from_comments_and_strings = 0\n```\n\n### The `g:ycm_collect_identifiers_from_tags_files` option\n\nWhen this option is set to `1`, YCM\'s identifier completer will also collect\nidentifiers from tags files. The list of tags files to examine is retrieved from\nthe `tagfiles()` Vim function which examines the `tags` Vim option. See `:h\n\'tags\'` for details.\n\nYCM will re-index your tags files if it detects that they have been modified.\n\nThe only supported tag format is the [Exuberant Ctags format][ctags-format]. The\nformat from "plain" ctags is NOT supported. Ctags needs to be called with the\n`--fields=+l` option (that\'s a lowercase `L`, not a one) because YCM needs the\n`language:<lang>` field in the tags output.\n\nSee the _FAQ_ for pointers if YCM does not appear to read your tag files.\n\nThis option is off by default because it makes Vim slower if your tags are on a\nnetwork directory.\n\nDefault: `0`\n\n```viml\nlet g:ycm_collect_identifiers_from_tags_files = 0\n```\n\n### The `g:ycm_seed_identifiers_with_syntax` option\n\nWhen this option is set to `1`, YCM\'s identifier completer will seed its\nidentifier database with the keywords of the programming language you\'re\nwriting.\n\nSince the keywords are extracted from the Vim syntax file for the filetype, all\nkeywords may not be collected, depending on how the syntax file was written.\nUsually at least 95% of the keywords are successfully extracted.\n\nDefault: `0`\n\n```viml\nlet g:ycm_seed_identifiers_with_syntax = 0\n```\n\n### The `g:ycm_extra_conf_vim_data` option\n\nIf you\'re using semantic completion for C-family files, this option might come\nhandy; it\'s a way of sending data from Vim to your `Settings` function in\nyour `.ycm_extra_conf.py` file.\n\nThis option is supposed to be a list of VimScript expression strings that are\nevaluated for every request to the [ycmd server][ycmd] and then passed to your\n`Settings` function as a `client_data` keyword argument.\n\nFor instance, if you set this option to `[\'v:version\']`, your `Settings`\nfunction will be called like this:\n\n```python\n# The \'801\' value is of course contingent on Vim 8.1; in 8.0 it would be \'800\'\nSettings( ..., client_data = { \'v:version\': 801 } )\n```\n\nSo the `client_data` parameter is a dictionary mapping Vim expression strings to\ntheir values at the time of the request.\n\nThe correct way to define parameters for your `Settings` function:\n\n```python\ndef Settings( **kwargs ):\n```\n\nYou can then get to `client_data` with `kwargs[\'client_data\']`.\n\nDefault: `[]`\n\n```viml\nlet g:ycm_extra_conf_vim_data = []\n```\n\n### The `g:ycm_server_python_interpreter` option\n\nYCM will by default search for an appropriate Python interpreter on your system.\nYou can use this option to override that behavior and force the use of a\nspecific interpreter of your choosing.\n\n**NOTE:** This interpreter is only used for the [ycmd server][ycmd]. The YCM\nclient running inside Vim always uses the Python interpreter that\'s embedded\ninside Vim.\n\nDefault: `\'\'`\n\n```viml\nlet g:ycm_server_python_interpreter = \'\'\n```\n\n### The `g:ycm_keep_logfiles` option\n\nWhen this option is set to `1`, YCM and the [ycmd completion server][ycmd] will\nkeep the logfiles around after shutting down (they are deleted on shutdown by\ndefault).\n\nTo see where the logfiles are, call `:YcmDebugInfo`.\n\nDefault: `0`\n\n```viml\nlet g:ycm_keep_logfiles = 0\n```\n\n### The `g:ycm_log_level` option\n\nThe logging level that YCM and the [ycmd completion server][ycmd] use. Valid\nvalues are the following, from most verbose to least verbose:\n- `debug`\n- `info`\n- `warning`\n- `error`\n- `critical`\n\nNote that `debug` is _very_ verbose.\n\nDefault: `info`\n\n```viml\nlet g:ycm_log_level = \'info\'\n```\n\n### The `g:ycm_auto_start_csharp_server` option\n\nWhen set to `1`, the OmniSharp-Roslyn server will be automatically started\n(once per Vim session) when you open a C# file.\n\nDefault: `1`\n\n```viml\nlet g:ycm_auto_start_csharp_server = 1\n```\n\n### The `g:ycm_auto_stop_csharp_server` option\n\nWhen set to `1`, the OmniSharp-Roslyn server will be automatically stopped upon\nclosing Vim.\n\nDefault: `1`\n\n```viml\nlet g:ycm_auto_stop_csharp_server = 1\n```\n\n### The `g:ycm_csharp_server_port` option\n\nWhen g:ycm_auto_start_csharp_server is set to `1`, specifies the port for\nthe OmniSharp-Roslyn server to listen on. When set to `0` uses an unused port provided\nby the OS.\n\nDefault: `0`\n\n```viml\nlet g:ycm_csharp_server_port = 0\n```\n\n### The `g:ycm_csharp_insert_namespace_expr` option\n\nBy default, when YCM inserts a namespace, it will insert the `using` statement\nunder the nearest `using` statement. You may prefer that the `using` statement is\ninserted somewhere, for example, to preserve sorting. If so, you can set this\noption to override this behavior.\n\nWhen this option is set, instead of inserting the `using` statement itself, YCM\nwill set the global variable `g:ycm_namespace_to_insert` to the namespace to\ninsert, and then evaluate this option\'s value as an expression. The option\'s\nexpression is responsible for inserting the namespace - the default insertion\nwill not occur.\n\nDefault: \'\'\n\n```viml\nlet g:ycm_csharp_insert_namespace_expr = \'\'\n```\n\n### The `g:ycm_add_preview_to_completeopt` option\n\nWhen this option is set to `1`, YCM will add the `preview` string to Vim\'s\n`completeopt` option (see `:h completeopt`). If your `completeopt` option\nalready has `preview` set, there will be no effect. You can see the current\nstate of your `completeopt` setting with `:set completeopt?` (yes, the question\nmark is important).\n\nWhen `preview` is present in `completeopt`, YCM will use the `preview` window at\nthe top of the file to store detailed information about the current completion\ncandidate (but only if the candidate came from the semantic engine). For\ninstance, it would show the full function prototype and all the function\noverloads in the window if the current completion is a function name.\n\nDefault: `0`\n\n```viml\nlet g:ycm_add_preview_to_completeopt = 0\n```\n\n### The `g:ycm_autoclose_preview_window_after_completion` option\n\nWhen this option is set to `1`, YCM will auto-close the `preview` window after\nthe user accepts the offered completion string. If there is no `preview` window\ntriggered because there is no `preview` string in `completeopt`, this option is\nirrelevant. See the `g:ycm_add_preview_to_completeopt` option for more details.\n\nDefault: `0`\n\n```viml\nlet g:ycm_autoclose_preview_window_after_completion = 0\n```\n\n### The `g:ycm_autoclose_preview_window_after_insertion` option\n\nWhen this option is set to `1`, YCM will auto-close the `preview` window after\nthe user leaves insert mode. This option is irrelevant if\n`g:ycm_autoclose_preview_window_after_completion` is set or if no `preview`\nwindow is triggered. See the `g:ycm_add_preview_to_completeopt` option for more\ndetails.\n\nDefault: `0`\n\n```viml\nlet g:ycm_autoclose_preview_window_after_insertion = 0\n```\n\n### The `g:ycm_max_diagnostics_to_display` option\n\nThis option controls the maximum number of diagnostics shown to the user when\nerrors or warnings are detected in the file. This option is only relevant for\nthe C-family, C#, Java, JavaScript, and TypeScript languages.\n\nA special value of `0` means there is no limit.\n\nDefault: `30`\n\n```viml\nlet g:ycm_max_diagnostics_to_display = 30\n```\n\n### The `g:ycm_key_list_select_completion` option\n\nThis option controls the key mappings used to select the first completion\nstring.  Invoking any of them repeatedly cycles forward through the completion\nlist.\n\nSome users like adding `<Enter>` to this list.\n\nDefault: `[\'<TAB>\', \'<Down>\']`\n\n```viml\nlet g:ycm_key_list_select_completion = [\'<TAB>\', \'<Down>\']\n```\n\n### The `g:ycm_key_list_previous_completion` option\n\nThis option controls the key mappings used to select the previous completion\nstring. Invoking any of them repeatedly cycles backwards through the completion\nlist.\n\nNote that one of the defaults is `<S-TAB>` which means Shift-TAB. That mapping\nwill probably only work in GUI Vim (Gvim or MacVim) and not in plain console Vim\nbecause the terminal usually does not forward modifier key combinations to Vim.\n\nDefault: `[\'<S-TAB>\', \'<Up>\']`\n\n```viml\nlet g:ycm_key_list_previous_completion = [\'<S-TAB>\', \'<Up>\']\n```\n\n### The `g:ycm_key_list_stop_completion` option\n\nThis option controls the key mappings used to close the completion menu. This is\nuseful when the menu is blocking the view, when you need to insert the `<TAB>`\ncharacter, or when you want to expand a snippet from [UltiSnips][] and navigate\nthrough it.\n\nDefault: `[\'<C-y>\']`\n\n```viml\nlet g:ycm_key_list_stop_completion = [\'<C-y>\']\n```\n\n### The `g:ycm_key_invoke_completion` option\n\nThis option controls the key mapping used to invoke the completion menu for\nsemantic completion. By default, semantic completion is triggered automatically\nafter typing `.`, `->` and `::` in insert mode (if semantic completion support\nhas been compiled in). This key mapping can be used to trigger semantic\ncompletion anywhere. Useful for searching for top-level functions and classes.\n\nConsole Vim (not Gvim or MacVim) passes `<Nul>` to Vim when the user types\n`<C-Space>` so YCM will make sure that `<Nul>` is used in the map command when\nyou\'re editing in console Vim, and `<C-Space>` in GUI Vim. This means that you\ncan just press `<C-Space>` in both console and GUI Vim and YCM will do the right\nthing.\n\nSetting this option to an empty string will make sure no mapping is created.\n\nDefault: `<C-Space>`\n\n```viml\nlet g:ycm_key_invoke_completion = \'<C-Space>\'\n```\n\n### The `g:ycm_key_detailed_diagnostics` option\n\nThis option controls the key mapping used to show the full diagnostic text when\nthe user\'s cursor is on the line with the diagnostic. It basically calls\n`:YcmShowDetailedDiagnostic`.\n\nSetting this option to an empty string will make sure no mapping is created.\n\nDefault: `<leader>d`\n\n```viml\nlet g:ycm_key_detailed_diagnostics = \'<leader>d\'\n```\n\n### The `g:ycm_global_ycm_extra_conf` option\n\nNormally, YCM searches for a `.ycm_extra_conf.py` file for compilation flags\n(see the User Guide for more details on how this works). This option specifies\na fallback path to a config file which is used if no `.ycm_extra_conf.py` is\nfound.\n\nYou can place such a global file anywhere in your filesystem.\n\nDefault: `\'\'`\n\n```viml\nlet g:ycm_global_ycm_extra_conf = \'\'\n```\n\n### The `g:ycm_confirm_extra_conf` option\n\nWhen this option is set to `1` YCM will ask once per `.ycm_extra_conf.py` file\nif it is safe to be loaded. This is to prevent execution of malicious code\nfrom a `.ycm_extra_conf.py` file you didn\'t write.\n\nTo selectively get YCM to ask/not ask about loading certain `.ycm_extra_conf.py`\nfiles, see the `g:ycm_extra_conf_globlist` option.\n\nDefault: `1`\n\n```viml\nlet g:ycm_confirm_extra_conf = 1\n```\n\n### The `g:ycm_extra_conf_globlist` option\n\nThis option is a list that may contain several globbing patterns. If a pattern\nstarts with a `!` all `.ycm_extra_conf.py` files matching that pattern will be\nblacklisted, that is they won\'t be loaded and no confirmation dialog will be\nshown. If a pattern does not start with a `!` all files matching that pattern\nwill be whitelisted. Note that this option is not used when confirmation is\ndisabled using `g:ycm_confirm_extra_conf` and that items earlier in the list\nwill take precedence over the later ones.\n\nRules:\n\n* `*`       matches everything\n* `?`       matches any single character\n* `[seq]`   matches any character in seq\n* `[!seq]`  matches any char not in seq\n\nExample:\n\n```viml\nlet g:ycm_extra_conf_globlist = [\'~/dev/*\',\'!~/*\']\n```\n\n* The first rule will match everything contained in the `~/dev` directory so\n  `.ycm_extra_conf.py` files from there will be loaded.\n* The second rule will match everything in the home directory so a\n  `.ycm_extra_conf.py` file from there won\'t be loaded.\n* As the first rule takes precedence everything in the home directory excluding\n  the `~/dev` directory will be blacklisted.\n\n**NOTE:** The glob pattern is first expanded with Python\'s\n`os.path.expanduser()` and then resolved with `os.path.abspath()` before being\nmatched against the filename.\n\nDefault: `[]`\n\n```viml\nlet g:ycm_extra_conf_globlist = []\n```\n\n### The `g:ycm_filepath_completion_use_working_dir` option\n\nBy default, YCM\'s filepath completion will interpret relative paths like `../`\nas being relative to the folder of the file of the currently active buffer.\nSetting this option will force YCM to always interpret relative paths as being\nrelative to Vim\'s current working directory.\n\nDefault: `0`\n\n```viml\nlet g:ycm_filepath_completion_use_working_dir = 0\n```\n\n### The `g:ycm_semantic_triggers` option\n\nThis option controls the character-based triggers for the various semantic\ncompletion engines. The option holds a dictionary of key-values, where the keys\nare Vim\'s filetype strings delimited by commas and values are lists of strings,\nwhere the strings are the triggers.\n\nSetting key-value pairs on the dictionary _adds_ semantic triggers to the\ninternal default set (listed below). You cannot remove the default triggers,\nonly add new ones.\n\nA "trigger" is a sequence of one or more characters that trigger semantic\ncompletion when typed. For instance, C++ (`cpp` filetype) has `.` listed as a\ntrigger. So when the user types `foo.`, the semantic engine will trigger and\nserve `foo`\'s list of member functions and variables. Since C++ also has `->`\nlisted as a trigger, the same thing would happen when the user typed `foo->`.\n\nIt\'s also possible to use a regular expression as a trigger. You have to prefix\nyour trigger with `re!` to signify it\'s a regex trigger. For instance,\n`re!\\w+\\.` would only trigger after the `\\w+\\.` regex matches.\n\n**NOTE:** The regex syntax is **NOT** Vim\'s, it\'s [Python\'s][python-re].\n\nDefault: `[see next line]`\n\n```viml\nlet g:ycm_semantic_triggers =  {\n  \\   \'c\': [\'->\', \'.\'],\n  \\   \'objc\': [\'->\', \'.\', \'re!\\[[_a-zA-Z]+\\w*\\s\', \'re!^\\s*[^\\W\\d]\\w*\\s\',\n  \\            \'re!\\[.*\\]\\s\'],\n  \\   \'ocaml\': [\'.\', \'#\'],\n  \\   \'cpp,cuda,objcpp\': [\'->\', \'.\', \'::\'],\n  \\   \'perl\': [\'->\'],\n  \\   \'php\': [\'->\', \'::\'],\n  \\   \'cs,d,elixir,go,groovy,java,javascript,julia,perl6,python,scala,typescript,vb\': [\'.\'],\n  \\   \'ruby,rust\': [\'.\', \'::\'],\n  \\   \'lua\': [\'.\', \':\'],\n  \\   \'erlang\': [\':\'],\n  \\ }\n```\n\n### The `g:ycm_cache_omnifunc` option\n\nSome omnicompletion engines do not work well with the YCM cache\xe2\x80\x94in particular,\nthey might not produce all possible results for a given prefix. By unsetting\nthis option you can ensure that the omnicompletion engine is re-queried on every\nkeypress. That will ensure all completions will be presented, but might cause\nstuttering and lagginess if the omnifunc is slow.\n\nDefault: `1`\n\n```viml\nlet g:ycm_cache_omnifunc = 1\n```\n\n### The `g:ycm_use_ultisnips_completer` option\n\nBy default, YCM will query the UltiSnips plugin for possible completions of\nsnippet triggers. This option can turn that behavior off.\n\nDefault: `1`\n\n```viml\nlet g:ycm_use_ultisnips_completer = 1\n```\n\n### The `g:ycm_goto_buffer_command` option\n\nDefines where `GoTo*` commands result should be opened. Can take one of the\nfollowing values: `\'same-buffer\'`, `\'split\'`, or `\'split-or-existing-window\'`.\nIf this option is set to the `\'same-buffer\'` but current buffer can not be\nswitched (when buffer is modified and `nohidden` option is set), then result\nwill be opened in a split. When the option is set to\n`\'split-or-existing-window\'`, if the result is already open in a window of the\ncurrent tab page (or any tab pages with the `:tab` modifier; see below), it will\njump to that window. Otherwise, the result will be opened in a split as if the\noption was set to `\'split\'`.\n\nTo customize the way a new window is split, prefix the `GoTo*` command with one\nof the following modifiers: `:aboveleft`, `:belowright`, `:botright`,\n`:leftabove`, `:rightbelow`, `:topleft`, and `:vertical`. For instance, to\nsplit vertically to the right of the current window, run the command:\n```viml\n:rightbelow vertical YcmCompleter GoTo\n```\n\nTo open in a new tab page, use the `:tab` modifier with the `\'split\'` or\n`\'split-or-existing-window\'` options e.g.:\n```viml\n:tab YcmCompleter GoTo\n```\n\n**NOTE:** command modifiers were added in Vim 7.4.1898. If you are using an\nolder version, you can still configure this by setting the option to one of the\ndeprecated values: `\'vertical-split\'`, `\'new-tab\'`, or `\'new-or-existing-tab\'`.\n\nDefault: `\'same-buffer\'`\n\n```viml\nlet g:ycm_goto_buffer_command = \'same-buffer\'\n```\n\n### The `g:ycm_disable_for_files_larger_than_kb` option\n\nDefines the max size (in Kb) for a file to be considered for completion. If this\noption is set to 0 then no check is made on the size of the file you\'re opening.\n\nDefault: 1000\n\n```viml\nlet g:ycm_disable_for_files_larger_than_kb = 1000\n```\n\n### The `g:ycm_use_clangd` option\n\nThis option controls whether **clangd** should be used as completion engine for\nC-family languages. Can take one of the following values: `1`, `0`, with\nmeanings:\n\n- `1`: YCM will use clangd if clangd binary exists in third party or it was\nprovided with `ycm_clangd_binary_path` option.\n- `0`: YCM will never use clangd completer.\n\nDefault: `1`\n\n```viml\nlet g:ycm_use_clangd = 1\n```\n\n### The `g:ycm_clangd_binary_path` option\n\nWhen `ycm_use_clangd` option is set to `1`, this option sets the path to\n**clangd** binary.\n\nDefault: `\'\'`\n\n```viml\nlet g:ycm_clangd_binary_path = \'\'\n```\n\n### The `g:ycm_clangd_args` option\n\nThis option controls the command line arguments passed to the clangd binary. It\nappends new options and overrides the existing ones.\n\nDefault: `[]`\n\n```viml\nlet g:ycm_clangd_args = []\n```\n\n### The `g:ycm_clangd_uses_ycmd_caching` option\n\nThis option controls which ranking and filtering algorithm to use for completion\nitems. It can take values:\n\n- `1`: Uses ycmd\'s caching and filtering logic.\n- `0`: Uses clangd\'s caching and filtering logic.\n\nDefault: `1`\n\n```viml\nlet g:ycm_clangd_uses_ycmd_caching = 1\n```\n\n### The `g:ycm_language_server` option\n\nThis option lets YCM use an arbitrary LSP server, not unlike coc.nvim and others.\nHowever, the officially supported completers are favoured over custom LSP ones,\nso overriding an existing completer means first making sure YCM won\'t choose\nthat existing completer in the first place.\n\nA simple working example of this option can be found in the section called\n["Semantic Completion for Other Languages"](#semantic-completion-for-other-languages).\n\nDefault: `[]`\n\n```viml\nlet g:ycm_language_server = []\n```\n\n### The `g:ycm_disable_signature_help` option\n\nThis option allows you to disable all signature help for all completion engines.\nThere is no way to disable it per-completer. This option is _reserved_, meaning\nthat while signature help support remains experimental, its values and meaning\nmay change and it may be removed in a future version.\n\nDefault: `0`\n\n```viml\n" Disable signature help\nlet g:ycm_disable_signature_help = 1\n```\n\nFAQ\n---\n\n### I used to be able to `import vim` in `.ycm_extra_conf.py`, but now can\'t\n\nYCM was rewritten to use a client-server architecture where most of the logic is\nin the [ycmd server][ycmd]. So the magic `vim` module you could have previously\nimported in your `.ycm_extra_conf.py` files doesn\'t exist anymore.\n\nTo be fair, importing the magic `vim` module in extra conf files was never\nsupported in the first place; it only ever worked by accident and was never a\npart of the extra conf API.\n\nBut fear not, you should be able to tweak your extra conf files to continue\nworking by using the `g:ycm_extra_conf_vim_data` option. See the docs on that\noption for details.\n\n### I get `ImportError` exceptions that mention `PyInit_ycm_core` or `initycm_core`\n\nThese errors are caused by building the YCM native libraries for Python 2 and\ntrying to load them into a Python 3 process (or the other way around).\n\nFor instance, if building for Python 2 but loading in Python 3:\n\n```\nImportError: dynamic module does not define init function (PyInit_ycm_core)\n```\n\nIf building for Python 3 but loading in Python 2:\n\n```\nImportError: dynamic module does not define init function (initycm_core)\n```\n\nSetting the `g:ycm_server_python_interpreter` option to force the use of a\nspecific Python interpreter for `ycmd` is usually the easiest way to solve the\nproblem. Common values for that option are `/usr/bin/python` and\n`/usr/bin/python3`.\n\n### I get a linker warning regarding `libpython` on macOS when compiling YCM\n\nIf the warning is `ld: warning: path \'/usr/lib/libpython2.7.dylib\' following -L\nnot a directory`, then feel free to ignore it; it\'s caused by a limitation of\nCMake and is not an issue. Everything should still work fine.\n\n### I get a weird window at the top of my file when I use the semantic engine\n\nThis is Vim\'s `preview` window. Vim uses it to show you extra information about\nsomething if such information is available. YCM provides Vim with such extra\ninformation. For instance, when you select a function in the completion list,\nthe `preview` window will hold that function\'s prototype and the prototypes of\nany overloads of the function. It will stay there after you select the\ncompletion so that you can use the information about the parameters and their\ntypes to write the function call.\n\nIf you would like this window to auto-close after you select a completion\nstring, set the `g:ycm_autoclose_preview_window_after_completion` option to `1`\nin your `vimrc` file. Similarly, the `g:ycm_autoclose_preview_window_after_insertion`\noption can be set to close the `preview` window after leaving insert mode.\n\nIf you don\'t want this window to ever show up, add `set completeopt-=preview` to\nyour `vimrc`. Also make sure that the `g:ycm_add_preview_to_completeopt` option\nis set to `0`.\n\n### It appears that YCM is not working\n\nIn Vim, run `:messages` and carefully read the output. YCM will echo messages to\nthe message log if it encounters problems. It\'s likely you misconfigured\nsomething and YCM is complaining about it.\n\nAlso, you may want to run the `:YcmDebugInfo` command; it will make YCM spew out\nvarious debugging information, including the YCM and [ycmd][] logfile paths and\nthe compile flags for the current file if the file is a C-family language file\nand you have compiled in Clang support. Logfiles can be opened in the editor\nusing [the `:YcmToggleLogs` command](#the-ycmtogglelogs-command).\n\n### Sometimes it takes much longer to get semantic completions than normal\n\nThis means that libclang (which YCM uses for C-family semantic completion)\nfailed to pre-compile your file\'s preamble. In other words, there was an error\ncompiling some of the source code you pulled in through your header files. I\nsuggest calling the `:YcmDiags` command to see what they were.\n\nBottom line, if libclang can\'t pre-compile your file\'s preamble because there\nwere errors in it, you\'re going to get slow completions because there\'s no AST\ncache.\n\n### YCM auto-inserts completion strings I don\'t want!\n\nIf this happens when Vim automatically wraps text then it\'s a Vim bug that has\nbeen fixed in version 8.0.0127. Update your Vim to this version or later.\n\nThis could also be some mappings that interfere with YCM\'s internal ones. Make\nsure you don\'t have something mapped to `<C-p>`, `<C-x>` or `<C-u>` (in insert\nmode).\n\nYCM _never_ selects something for you; it just shows you a menu and the user has\nto explicitly select something. If something is being selected automatically,\nthis means there\'s a bug or a misconfiguration somewhere.\n\n### I get a `E227: mapping already exists for <blah>` error when I start Vim\n\nThis means that YCM tried to set up a key mapping but failed because you already\nhad something mapped to that key combination. The `<blah>` part of the message\nwill tell you what was the key combination that failed.\n\nLook in the _Options_ section and see if any of the default mappings conflict\nwith your own. Then change that option value to something else so that the\nconflict goes away.\n\n### I get `\'GLIBC_2.XX\' not found (required by libclang.so)` when starting Vim\n\nYour system is too old for the precompiled binaries from llvm.org. Compile\nClang on your machine and then link against the `libclang.so` you just produced.\nSee the full installation guide for help.\n\n### I get `LONG_BIT definition appears wrong for platform` when compiling\n\nLook at the output of your CMake call. There should be a line in it like the\nfollowing (with `.dylib` in place of `.so` on macOS):\n\n```\n-- Found PythonLibs: /usr/lib/libpython2.7.so (Required is at least version "2.5")\n```\n\nThat would be the **correct** output. An example of **incorrect** output would\nbe the following:\n\n```\n-- Found PythonLibs: /usr/lib/libpython2.7.so (found suitable version "2.5.1", minimum required is "2.5")\n```\n\nNotice how there\'s an extra bit of output there, the `found suitable version\n"<version>"` part, where `<version>` is not the same as the version of the\ndynamic library. In the example shown, the library is version 2.7 but the second\nstring is version `2.5.1`.\n\nThis means that CMake found one version of Python headers and a different\nversion for the library. This is wrong. It can happen when you have multiple\nversions of Python installed on your machine.\n\nYou should probably add the following flags to your cmake call (again, `dylib`\ninstead of `so` on macOS):\n\n```\n-DPYTHON_INCLUDE_DIR=/usr/include/python2.7 -DPYTHON_LIBRARY=/usr/lib/libpython2.7.so\n```\n\nThis will force the paths to the Python include directory and the Python library\nto use. You may need to set these flags to something else, but you need to make\nsure you use the same version of Python that your Vim binary is built against,\nwhich is highly likely to be the system\'s default Python.\n\n### I get `libpython2.7.a [...] relocation R_X86_64_32` when compiling\n\nThe error is usually encountered when compiling YCM on Centos or RHEL. The full\nerror looks something like the following:\n\n```\n/usr/bin/ld: /usr/local/lib/libpython2.7.a(abstract.o): relocation R_X86_64_32 against `a local symbol\' can not be used when making a shared object; recompile with -fPIC\n```\n\nIt\'s possible to get a slightly different error that\'s similar to the one above.\nHere\'s the problem and how you solve it:\n\nYour `libpython2.7.a` was not compiled with `-fPIC` so it can\'t be linked into\n`ycm_core.so`.  Use the `-DPYTHON_LIBRARY=` CMake flag to point it to a `.so`\nversion of libpython on your machine (for instance,\n`-DPYTHON_LIBRARY=/usr/lib/libpython2.7.so`). Naturally, this means you\'ll have\nto go through the full installation guide by hand.\n\n### I see `undefined symbol: clang_getCompletionFixIt` in the server logs.\n\nThis means that the server is trying to load a version of libclang that is too\nold. You need at least libclang 9.0.0. We recommend running the `install.py`\nscript without `--system-libclang` or downloading the [latest prebuilt binaries\nfrom llvm.org][clang-download] when going through the [full installation\nguide](#full-installation-guide).\n\n### I get `Fatal Python error: PyThreadState_Get: no current thread` on startup\n\nThis is caused by linking a static version of `libpython` into ycmd\'s\n`ycm_core.so`.  This leads to multiple copies of the python interpreter loaded\nwhen `python` loads `ycmd_core.so` and this messes up python\'s global state.\nThe details aren\'t important.\n\nThe solution is that the version of Python linked and run against must be built\nwith either `--enable-shared` or `--enable-framework` (on OS X).\nThis is achieved as follows (**NOTE:** for macOS, replace `--enable-shared`\nwith `--enable-framework`):\n\n- When building python from source: `./configure --enable-shared {options}`\n- When building python from pyenv:\n  `PYTHON_CONFIGURE_OPTS="--enable-shared" pyenv install {version}`\n\n\n### `install.py` says python must be compiled with `--enable-framework`. Wat?\n\nSee the previous answer for how to ensure your python is built to support\ndynamic modules.\n\n### YCM does not read identifiers from my tags files\n\nFirst, put `let g:ycm_collect_identifiers_from_tags_files = 1` in your vimrc.\n\nMake sure you are using [Exuberant Ctags][exuberant-ctags] to produce your tags\nfiles since the only supported tag format is the [Exuberant Ctags\nformat][ctags-format]. The format from "plain" ctags is NOT supported. The\noutput of `ctags --version` should list "Exuberant Ctags". See [Universal\nCtags][universal-ctags] for a maintained version.\n\nCtags needs to be called with the `--fields=+l` (that\'s a lowercase `L`, not a\none) option because YCM needs the `language:<lang>` field in the tags output.\n\n**NOTE:** [Exuberant Ctags][exuberant-ctags] by default sets language tag for\n`*.h` files as `C++`. If you have C (not C++) project, consider giving parameter\n`--langmap=c:.c.h` to ctags to see tags from `*.h` files.\n\n**NOTE:** macOS comes with "plain" ctags installed by default. `brew install\nctags` will get you the Exuberant Ctags version.\n\nAlso make sure that your Vim `tags` option is set correctly. See `:h \'tags\'` for\ndetails. If you want to see which tag files YCM will read for a given buffer,\nrun `:echo tagfiles()` with the relevant buffer active. Note that that function\nwill only list tag files that already exist.\n\n### `CTRL-U` in insert mode does not work while the completion menu is visible\n\nYCM uses `completefunc` completion mode to show suggestions and Vim disables\n`<C-U>` in that mode as a "feature." Sadly there\'s nothing I can do about this.\n\n### My `CTRL-R` mapping does not work while the completion menu is visible\n\nVim prevents remapping of the `<C-R>` key in all `<C-X>` completion modes\n(except the `<C-X><C-N>`/`<C-X><C-P>` mode which operates in the same mode as\n`<C-N>`/`<C-P>`) and YCM uses the `<C-X><C-U>` (`completefunc`) mode for\ncompletions. This means that adding `<C-R>` to any of the `g:ycm_key_list_*`\noptions has no effect. You need to use another key.\n\n### YCM conflicts with UltiSnips TAB key usage\n\nYCM comes with support for UltiSnips (snippet suggestions in the popup menu),\nbut you\'ll have to change the UltiSnips mappings. See `:h UltiSnips-triggers` in\nVim for details. You\'ll probably want to change some/all of the following\noptions:\n\n```viml\ng:UltiSnipsExpandTrigger\ng:UltiSnipsJumpForwardTrigger\ng:UltiSnipsJumpBackwardTrigger\n```\n\n### Snippets added with `:UltiSnipsAddFiletypes` do not appear in the popup menu\n\nFor efficiency, YCM only fetches UltiSnips snippets in specific scenarios like\nvisiting a buffer or setting its filetype. You can force YCM to retrieve them by\nmanually triggering the `FileType` autocommand:\n\n```viml\n:doautocmd FileType\n```\n\n### Why isn\'t YCM just written in plain VimScript, FFS?\n\nBecause of the identifier completion engine and subsequence-based filtering.\nLet\'s say you have _many_ dozens of files open in a single Vim instance (I often\ndo); the identifier-based engine then needs to store thousands (if not tens of\nthousands) of identifiers in its internal data-structures. When the user types,\nYCM needs to perform subsequence-based filtering on _all_ of those identifiers\n(every single one!) in less than 10 milliseconds.\n\nI\'m sorry, but that level of performance is just plain impossible to achieve\nwith VimScript. I\'ve tried, and the language is just too slow. No, you can\'t get\nacceptable performance even if you limit yourself to just the identifiers in the\ncurrent file and simple prefix-based filtering.\n\n### Why does YCM demand such a recent version of Vim?\n\nYCM needs a version of Vim with the timers feature to achieve full\nasynchronicity. This feature is available since Vim 7.4.1578.\n\nYCM provides powerful new functionality like signature help by using new\nfeatures in Vim such as popup windows, and new APIs such as `pum_getpos`. This\nrequires Vim 8.1.1875 and we strongly recommend using this version or later.\n\n### Nasty bugs happen if I have the `vim-autoclose` plugin installed\n\nUse the [delimitMate][] plugin instead. It does the same thing without\nconflicting with YCM.\n\n### Is there some sort of YCM mailing list? I have questions\n\nIf you have questions about the plugin or need help, please use the\n[ycm-users][] mailing list, _don\'t_ create issues on the tracker. The tracker is\nfor bug reports and feature requests.\n\n### I get an internal compiler error when installing\n\nThis can be a problem on virtual servers with limited memory. A possible\nsolution is to add more swap memory. A more practical solution would be to force\nthe build script to run only one compile job at a time. You can do this by\nsetting the `YCM_CORES` environment variable to `1`. Example:\n\n```\nYCM_CORES=1 ./install.py --clang-completer\n```\n\n### I get weird errors when I press `Ctrl-C` in Vim\n\n_Never_ use `Ctrl-C` in Vim.\n\nUsing `Ctrl-C` to exit insert mode in Vim is a bad idea. The main issue here is\nthat `Ctrl-C` in Vim doesn\'t just leave insert mode, it leaves it without\ntriggering `InsertLeave` autocommands (as per Vim docs). This is a bad idea and\nis likely to break many other things and not just YCM.\n\nBottom line, if you use `Ctrl-C` to exit insert mode in Vim, you\'re gonna have a\nbad time.\n\nIf pressing `<esc>` is too annoying (agreed, it is), we suggest mapping it to\nsomething more convenient. On a QWERTY keyboard, a good pick for the `<esc>` map\nis `inoremap jk <Esc>`. This is right on the home row, it\'s an incredibly rare\ndigraph in English and if you ever need to type those two chars in sequence in\ninsert mode, you just type `j`, then wait 500ms, then type `k`.\n\n### Why did YCM stop using Syntastic for diagnostics display?\n\nPreviously, YCM would send any diagnostics it would receive from the libclang\nsemantic engine to Syntastic for display as signs in the gutter, red squiggles\netc. Today, YCM uses its own code to do that.\n\nUsing Syntastic for this was always a kludge. Syntastic assumes its "checker"\nplugins behave in a certain way; those assumptions have never fit YCM. For\ninstance, YCM continuously recompiles your code in the background for C-family\nlanguages and tries to push new diagnostics to the user as fast as possible,\neven while the user types.\n\nSyntastic assumes that a checker only runs on file save ("active" mode) or even\nless frequently, when the user explicitly invokes it ("passive" mode). This\nmismatch in assumptions causes performance problems since Syntastic code isn\'t\noptimized for this use case of constant diagnostic refreshing.\n\nPoor support for this use case also led to crash bugs in Vim caused by\nSyntastic-Vim interactions ([issue #593][issue-593]) and other problems, like\nrandom Vim flickering. Attempts were made to resolve these issues in\nSyntastic, but ultimately some of them failed (for various reasons).\n\nImplementing diagnostic display code directly in YCM resolves all of these\nproblems. Performance also improved substantially since the relevant code is now\nwritten in Python instead of VimScript (which is very slow) and is tailored only\nfor YCM\'s use-cases. We were also able to introduce new features in this area\nsince we\'re now not limited to the Syntastic checker API.\n\nWe\'ve tried to implement this in the most backwards-compatible way possible; YCM\noptions that control diagnostic display fall back to Syntastic options that\ncontrol the same concepts if the user has those set.\n\nStill, some Syntastic-specific configuration you might have had might not\nbe supported by the new code. Please file issues on the tracker in such\ncases; if we find the request to be reasonable, we\'ll find a way to address it.\n\n### Completion doesn\'t work with the C++ standard library headers\n\nThis is caused by an issue with libclang that only affects some operating\nsystems. Compiling with `clang` the binary will use the correct default header\nsearch paths but compiling with `libclang.so` (which YCM uses) does not.\n\nmacOS is normally affected, but there\'s a workaround in YCM for that specific\nOS. If you\'re not running that OS but still have the same problem, continue\nreading.\n\nThe workaround is to call `echo | clang -v -E -x c++ -` and look at the\npaths under the `#include <...> search starts here:` heading. You should take\nthose paths, prepend `-isystem` to each individual path and append them all to\nthe list of flags you return from your `Settings` function in your\n`.ycm_extra_conf.py` file.\n\nSee [issue #303][issue-303] for details.\n\n### When I start vim I get a runtime error saying `R6034 An application has made an attempt to load the C runtime library incorrectly.`\n\n[CMake and other things seem to screw up the PATH with their own msvcrXX.dll\nversions.][identify-R6034-cause] Add the following to the very top of your vimrc\nto remove these entries from the path.\n\n```python\npython << EOF\nimport os\nimport re\npath = os.environ[\'PATH\'].split(\';\')\n\ndef contains_msvcr_lib(folder):\n    try:\n        for item in os.listdir(folder):\n            if re.match(r\'msvcr\\d+\\.dll\', item):\n                return True\n    except:\n        pass\n    return False\n\npath = [folder for folder in path if not contains_msvcr_lib(folder)]\nos.environ[\'PATH\'] = \';\'.join(path)\nEOF\n```\n\n### I hear that YCM only supports Python 2, is that true?\n\n**No.** Both the Vim client and the [ycmd server][ycmd] run on Python 2 or 3. If\nyou are talking about code completion in a project, you can configure the Python\nused for your project through a `.ycm_extra_conf.py` file. See [the Python\nSemantic Completion section](#python-semantic-completion) for more details.\n\n### On Windows I get `E887: Sorry, this command is disabled, the Python\'s site module could not be loaded`\n\nIf you are running vim on Windows with Python 2.7.11, this is likely caused by a\n[bug][vim_win-python2.7.11-bug]. Follow this\n[workaround][vim_win-python2.7.11-bug_workaround] or use a different version\n(Python 2.7.12 does not suffer from the bug).\n\n### I can\'t complete Python packages in a virtual environment.\n\nThis means that the Python used to run [Jedi][] is not the Python of the virtual\nenvironment you\'re in. To resolve this you should create a `.ycm_extra_conf.py`\nfile at the root of your project that sets the `interpreter_path` option to the\nPython of your virtual environment, e.g.\n\n```python\ndef Settings(**kwargs):\n  return {\n    \'interpreter_path\': \'/path/to/virtual/env/bin/python\'\n  }\n```\n\nSee [the Python Semantic Completion section](#python-semantic-completion) for\nmore details.\n\n### I want to defer loading of YouCompleteMe until after Vim finishes booting\n\nIn recent versions of Vim, you can install YCM in a folder under\n`~/.vim/pack/*/opt` and then load it once the user is idle via an autocommand:\n\n```viml\naugroup load_ycm\n  autocmd!\n  autocmd CursorHold, CursorHoldI * :packadd YouCompleteMe\n                                \\ | autocmd! load_ycm\naugroup END\n```\n\n### YCM does not shut down when I quit Vim\n\nYCM relies on the `VimLeave` event to shut down the [ycmd server][ycmd]. Some\nplugins prevent this event from triggering by exiting Vim through an autocommand\nwithout using the `nested` keyword (see `:h autocmd-nested`). You should\nidentify which plugin is responsible for the issue and report it to the plugin\nauthor. Note that when this happens, [ycmd][] will automatically shut itself\ndown after 30 minutes.\n\n### YCM does not work with my Anaconda Python setup\n\nAnaconda is often incompatible with the pre-built libclang used by YCM\nand therefore is not supported. The recommended way to solve this is to run\n`/path/to/real/python install.py` (for example `/usr/bin/python install.py`).\n\nIf you want completion in Anaconda projects, point the `interpreter_path` option\nin your `.ycm_extra_conf.py` file to the path of your Anaconda Python e.g.\n\n```python\ndef Settings(**kwargs):\n  return {\n    \'interpreter_path\': \'/path/to/anaconda/python\'\n  }\n```\n\nSee [the Python Semantic Completion section](#python-semantic-completion) for\nmore details.\n\n### Automatic import insertion after selecting a completion breaks undo\n\nThis is a Vim bug fixed in version 8.1.0256. Update your Vim to this version or\nlater.\n\n### `TAB` is already mapped to trigger completion in the command-line window\n\nVim automatically maps the key set by the `wildchar` option, which is `TAB` by\ndefault, to complete commands in the command-line window. If you would prefer\nusing this key to cycle through YCM\'s suggestions without changing the value of\n`wildchar`, add the following to your vimrc:\n\n```viml\nautocmd CmdwinEnter * inoremap <expr><buffer> <TAB>\n      \\ pumvisible() ? "\\<C-n>" : "\\<TAB>"\n```\n\nContributor Code of Conduct\n---------------------------\n\nPlease note that this project is released with a [Contributor Code of\nConduct][ccoc]. By participating in this project you agree to abide by its\nterms.\n\n\nContact\n-------\n\nIf you have questions about the plugin or need help, please join the [Gitter\nroom][gitter] or use the [ycm-users][] mailing list.\n\nIf you have bug reports or feature suggestions, please use the [issue\ntracker][tracker]. Before you do, please carefully read\n[CONTRIBUTING.md][contributing-md] as this asks for important diagnostics which\nthe team will use to help get you going.\n\nThe latest version of the plugin is available at\n<http://ycm-core.github.io/YouCompleteMe/>.\n\nThe author\'s homepage is <http://val.markovic.io>.\n\nPlease do **NOT** go to #vim on freenode for support. Please contact the\nYouCompleteMe maintainers directly using the [contact details](#contact).\n\nLicense\n-------\n\nThis software is licensed under the [GPL v3 license][gpl].\n\xc2\xa9 2015-2018 YouCompleteMe contributors\n\n[ycmd]: https://github.com/Valloric/ycmd\n[Clang]: http://clang.llvm.org/\n[vundle]: https://github.com/VundleVim/Vundle.vim#about\n[pathogen]: https://github.com/tpope/vim-pathogen#pathogenvim\n[clang-download]: http://llvm.org/releases/download.html\n[brew]: http://brew.sh\n[cmake-download]: https://cmake.org/download/\n[macvim]: https://macvim-dev.github.io/macvim/\n[vimrc]: http://vimhelp.appspot.com/starting.txt.html#vimrc\n[gpl]: http://www.gnu.org/copyleft/gpl.html\n[vim]: http://www.vim.org/\n[syntastic]: https://github.com/scrooloose/syntastic\n[lightline]: https://github.com/itchyny/lightline.vim\n[ycm_flags_example]: https://github.com/Valloric/YouCompleteMe/blob/master/.ycm_extra_conf.py\n[ycmd_flags_example]: https://raw.githubusercontent.com/Valloric/ycmd/66030cd94299114ae316796f3cad181cac8a007c/.ycm_extra_conf.py\n[compdb]: http://clang.llvm.org/docs/JSONCompilationDatabase.html\n[subsequence]: https://en.wikipedia.org/wiki/Subsequence\n[listtoggle]: https://github.com/Valloric/ListToggle\n[vim-build]: https://github.com/Valloric/YouCompleteMe/wiki/Building-Vim-from-source\n[tracker]: https://github.com/Valloric/YouCompleteMe/issues?state=open\n[issue18]: https://github.com/Valloric/YouCompleteMe/issues/18\n[delimitMate]: https://github.com/Raimondi/delimitMate\n[completer-api]: https://github.com/Valloric/ycmd/blob/master/ycmd/completers/completer.py\n[eclim]: http://eclim.org/\n[jedi]: https://github.com/davidhalter/jedi\n[ultisnips]: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt\n[exuberant-ctags]: http://ctags.sourceforge.net/\n[universal-ctags]: https://github.com/universal-ctags/ctags\n[ctags-format]: http://ctags.sourceforge.net/FORMAT\n[vundle-bug]: https://github.com/VundleVim/Vundle.vim/issues/48\n[ycm-users]: https://groups.google.com/forum/?hl=en#!forum/ycm-users\n[omnisharp-roslyn]: https://github.com/OmniSharp/omnisharp-roslyn\n[issue-303]: https://github.com/Valloric/YouCompleteMe/issues/303\n[issue-593]: https://github.com/Valloric/YouCompleteMe/issues/593\n[issue-669]: https://github.com/Valloric/YouCompleteMe/issues/669\n[status-mes]: https://groups.google.com/forum/#!topic/vim_dev/WeBBjkXE8H8\n[python-re]: https://docs.python.org/2/library/re.html#regular-expression-syntax\n[Bear]: https://github.com/rizsotto/Bear\n[ygen]: https://github.com/rdnetto/YCM-Generator\n[Gopls]: https://github.com/golang/go/wiki/gopls\n[gopls-preferences]: https://github.com/golang/tools/blob/master/internal/lsp/server.go#L120\n[TSServer]: https://github.com/Microsoft/TypeScript/tree/master/src/server\n[jsconfig.json]: https://code.visualstudio.com/docs/languages/jsconfig\n[tsconfig.json]: https://www.typescriptlang.org/docs/handbook/tsconfig-json.html\n[vim-win-download]: https://github.com/vim/vim-win32-installer/releases\n[python-win-download]: https://www.python.org/downloads/windows/\n[visual-studio-download]: https://visualstudio.microsoft.com/thank-you-downloading-visual-studio/?sku=BuildTools&rel=15\n[7z-download]: http://www.7-zip.org/download.html\n[mono-install-macos]: http://www.mono-project.com/docs/getting-started/install/mac/\n[mono-install-linux]: https://www.mono-project.com/download/stable/#download-lin\n[mono-install]: http://www.mono-project.com/docs/getting-started/install/\n[go-install]: https://golang.org/doc/install\n[npm-install]: https://docs.npmjs.com/getting-started/installing-node#1-install-nodejs--npm\n[tern-instructions]: https://github.com/Valloric/YouCompleteMe/wiki/JavaScript-Semantic-Completion-through-Tern\n[Tern]: http://ternjs.net\n[rls]: https://github.com/rust-lang/rls\n[rls-preferences]: https://github.com/rust-lang/rls#configuration\n[rust-src]: https://www.rust-lang.org/downloads.html\n[add-msbuild-to-path]: http://stackoverflow.com/questions/6319274/how-do-i-run-msbuild-from-the-command-line-using-windows-sdk-7-1\n[identify-R6034-cause]: http://stackoverflow.com/questions/14552348/runtime-error-r6034-in-embedded-python-application/34696022\n[ccoc]: https://github.com/Valloric/YouCompleteMe/blob/master/CODE_OF_CONDUCT.md\n[vim_win-python2.7.11-bug]: https://github.com/vim/vim/issues/717\n[vim_win-python2.7.11-bug_workaround]: https://github.com/vim/vim-win32-installer/blob/a27bbdba9bb87fa0e44c8a00d33d46be936822dd/appveyor.bat#L86-L88\n[gitter]: https://gitter.im/Valloric/YouCompleteMe\n[ninja-compdb]: https://ninja-build.org/manual.html\n[++enc]: http://vimdoc.sourceforge.net/htmldoc/editing.html#++enc\n[rustup]: https://www.rustup.rs/\n[contributing-md]: https://github.com/Valloric/YouCompleteMe/blob/master/CONTRIBUTING.md\n[jdt.ls]: https://github.com/eclipse/eclipse.jdt.ls\n[jdk-install]: http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\n[mvn-project]: https://maven.apache.org/guides/getting-started/maven-in-five-minutes.html\n[eclipse-project]: https://help.eclipse.org/oxygen/index.jsp?topic=%2Forg.eclipse.platform.doc.isv%2Freference%2Fmisc%2Fproject_description_file.html\n[gradle-project]: https://docs.gradle.org/current/userguide/tutorial_java_projects.html\n[eclipse-dot-project]: https://help.eclipse.org/oxygen/index.jsp?topic=%2Forg.eclipse.platform.doc.isv%2Freference%2Fmisc%2Fproject_description_file.html\n[eclipse-dot-classpath]: https://help.eclipse.org/mars/index.jsp?topic=%2Forg.eclipse.jdt.doc.isv%2Freference%2Fapi%2Forg%2Feclipse%2Fjdt%2Fcore%2FIClasspathEntry.html\n[ycmd-eclipse-project]: https://github.com/Valloric/ycmd/tree/3602f38ef7a762fc765afd75e562aec9a134711e/ycmd/tests/java/testdata/simple_eclipse_project\n[ycmd-mvn-pom-xml]: https://github.com/Valloric/ycmd/blob/3602f38ef7a762fc765afd75e562aec9a134711e/ycmd/tests/java/testdata/simple_maven_project/pom.xml\n[ycmd-gradle-project]: https://github.com/Valloric/ycmd/tree/3602f38ef7a762fc765afd75e562aec9a134711e/ycmd/tests/java/testdata/simple_gradle_project\n[jdtls-release]: http://download.eclipse.org/jdtls/milestones\n[jdtls-preferences]: https://github.com/eclipse/eclipse.jdt.ls/blob/master/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/preferences/Preferences.java\n[diacritic]: https://www.unicode.org/glossary/#diacritic\n[regex]: https://pypi.org/project/regex/\n[clangd]: https://clang.llvm.org/extra/clangd.html\n[fixedcdb]: https://clang.llvm.org/docs/JSONCompilationDatabase.html#alternatives\n[clangd-indexing]: https://clang.llvm.org/extra/clangd.html#project-wide-indexing\n[vimspector]: https://github.com/puremourning/vimspector\n[roslyn-releases]: https://github.com/OmniSharp/omnisharp-roslyn/releases\n[compiledb]: https://pypi.org/project/compiledb/\n[signature-help-pr]: https://github.com/ycm-core/ycmd/pull/1255\n'