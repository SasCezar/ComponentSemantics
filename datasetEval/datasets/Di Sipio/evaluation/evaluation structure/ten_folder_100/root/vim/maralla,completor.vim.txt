b'Completor\n=========\n\n[![Build Status](https://travis-ci.org/maralla/completor.vim.svg?branch=master)](https://travis-ci.org/maralla/completor.vim)\n\nCompletor is an asynchronous code completion framework for vim8. New features\nof vim8 are used to implement the fast completion engine with low overhead.\nFor using semantic completion, external completion tools should be installed.\n\n![Demo](http://i.imgur.com/f5EoiA6.gif)\n\nRequirements\n------------\n\n* vim8,\n* compiled with `python` or `python3`\n\n\nInstall\n-------\n\n* vim8 builtin package manager:\n\n```bash\n$ mkdir -p ~/.vim/pack/completor/start\n$ cd ~/.vim/pack/completor/start\n$ git clone https://github.com/maralla/completor.vim.git\n```\n\n* [pack](https://github.com/maralla/pack)\n\n```bash\n$ pack install maralla/completor.vim\n```\n\n* [vim-plug](https://github.com/junegunn/vim-plug)\n\n```vim\nPlug \'maralla/completor.vim\'\n```\n\nCompleters\n----------\n\n#### Filename\nWhen the input matches a file path pattern the file name will be automatically\ncompleted.\n\n#### Buffer\nThis is the fallback completer. When no semantic completer found the buffer\ncompleter will be used and will complete based on the current buffers.\n\n#### Ultisnips and neosnippet\n\nUltisnips is supported by default. If [ultisnips](https://github.com/SirVer/ultisnips) is installed,\nthe snips candidates will show on the completion popup menu.\n\nUse this plugin [completor-neosnippet](https://github.com/maralla/completor-neosnippet) for neosnippet support.\n\n#### Neoinclude\n\nNeoinclude is supported by default. If [neoinclude](https://github.com/Shougo/neoinclude.vim) is installed,\nthe include candidates will show on the completion popup menu.\n\n#### dictionary\n\nDictionary completion is supported by [completor-dictionary](https://github.com/masawada/completor-dictionary).\n\n#### shell\n\nYou can add some complete functions with shell command by [completor-shell](https://github.com/tokorom/completor-shell).\n\n#### tmux\n\nCompletion from words in tmux panes is supported by [completor-tmux](https://github.com/ferreum/completor-tmux).\n\n#### Python\nUse [jedi](https://github.com/davidhalter/jedi) for completion. jedi should be\ninstalled for semantic completion.  Install jedi to global environment or in virtualenv:\n\n```bash\npip install jedi\n```\n\nThe python executable can be specified using:\n\n```vim\nlet g:completor_python_binary = \'/path/to/python/with/jedi/installed\'\n```\n\n#### Rust\nUse racer for completion. [Install racer](https://github.com/phildawes/racer#installation)\nfirst. To specify the racer executable path:\n\n```vim\nlet g:completor_racer_binary = \'/path/to/racer\'\n```\n\n#### Javascript\nUse [tern](https://github.com/ternjs/tern) for completion. To install tern\nyou must have node and either npm or yarn installed. Then run:\n\n```bash\nmake js\n```\n\nThe node executable path can be specified using:\n\n```vim\nlet g:completor_node_binary = \'/path/to/node\'\n```\n\n#### c/c++\nUse clang for completion. Clang should be installed first. To specify clang path:\n\n```vim\nlet g:completor_clang_binary = \'/path/to/clang\'\n```\n\nTo pass extra clang arguments, you can create a file named *.clang_complete*\nunder the project root directory or any parent directories. Every argument\nshould be in a single line in the file. This is an example file:\n```\n-std=c++11\n-I/Users/maralla/Workspace/src/dji-sdk/Onboard-SDK/lib/inc\n-I/Users/maralla/Workspace/src/dji-sdk/Onboard-SDK/sample/Linux/inc\n```\n\nThe key mapping `<Plug>CompletorCppJumpToPlaceholder` can be defined\nto jump to placeholders:\n\n```vim\nmap <tab> <Plug>CompletorCppJumpToPlaceholder\nimap <tab> <Plug>CompletorCppJumpToPlaceholder\n```\n\n#### go\nUse [gocode](https://github.com/nsf/gocode) to provide omni completions.\nTo specify the gocode executable path:\n\n```vim\nlet g:completor_gocode_binary = \'/path/to/gocode\'\n```\n\n#### swift\n\nUse [completor-swift](https://github.com/maralla/completor-swift).\n\n#### Elixir\n\nUse [alchemist.vim](https://github.com/slashmili/alchemist.vim).\n\n#### vim script\n\nUse [completor-necovim](https://github.com/kyouryuukunn/completor-necovim).\n\n#### type script\n\nUse [completor-typescript](https://github.com/maralla/completor-typescript).\n\n#### other languages\n\nFor other omni completions completor not natively implemented, auto completion\ncan still be used if an omni function is defined for the file type. But an option\nshould be defined to specify the trigger for triggering auto completion. The\noption name pattern:\n\n```vim\nlet g:completor_{filetype}_omni_trigger = \'<python regex>\'\n```\n\nFor example to use css omnifunc:\n```vim\nlet g:completor_css_omni_trigger = \'([\\w-]+|@[\\w-]*|[\\w-]+:\\s*[\\w-]*)$\'\n```\n\nTips\n----\n\n#### Config tern for javascript completion\n\nThis is simple *.tern-project* file:\n```json\n{\n  "plugins": {\n    "node": {},\n    "es_modules": {}\n  },\n  "libs": [\n    "ecma5",\n    "ecma6"\n  ],\n  "ecmaVersion": 6\n}\n```\n\n#### Use Tab to select completion\n\n```vim\ninoremap <expr> <Tab> pumvisible() ? "\\<C-n>" : "\\<Tab>"\ninoremap <expr> <S-Tab> pumvisible() ? "\\<C-p>" : "\\<S-Tab>"\ninoremap <expr> <cr> pumvisible() ? "\\<C-y>" : "\\<cr>"\n```\n\n#### Use Tab to trigger completion (disable auto trigger)\n\n```vim\nlet g:completor_auto_trigger = 0\ninoremap <expr> <Tab> pumvisible() ? "<C-N>" : "<C-R>=completor#do(\'complete\')<CR>"\n```\n\nA better way:\n\n```vim\n" Use TAB to complete when typing words, else inserts TABs as usual.  Uses\n" dictionary, source files, and completor to find matching words to complete.\n\n" Note: usual completion is on <C-n> but more trouble to press all the time.\n" Never type the same word twice and maybe learn a new spellings!\n" Use the Linux dictionary when spelling is in doubt.\nfunction! Tab_Or_Complete() abort\n  " If completor is already open the `tab` cycles through suggested completions.\n  if pumvisible()\n    return "\\<C-N>"\n  " If completor is not open and we are in the middle of typing a word then\n  " `tab` opens completor menu.\n  elseif col(\'.\')>1 && strpart( getline(\'.\'), col(\'.\')-2, 3 ) =~ \'^[[:keyword:][:ident:]]\'\n    return "\\<C-R>=completor#do(\'complete\')\\<CR>"\n  else\n    " If we aren\'t typing a word and we press `tab` simply do the normal `tab`\n    " action.\n    return "\\<Tab>"\n  endif\nendfunction\n\n" Use `tab` key to select completions.  Default is arrow keys.\ninoremap <expr> <Tab> pumvisible() ? "\\<C-n>" : "\\<Tab>"\ninoremap <expr> <S-Tab> pumvisible() ? "\\<C-p>" : "\\<S-Tab>"\n\n" Use tab to trigger auto completion.  Default suggests completions as you type.\nlet g:completor_auto_trigger = 0\ninoremap <expr> <Tab> Tab_Or_Complete()\n```\n\n\n#### Complete Options (completeopt)\n\nCompletor try its best to not overwrite the config `completeopt`, so the config\n`g:completor_complete_options` is introduced to be the complete option when completor\nis triggered.\n\n```vim\nlet g:completor_complete_options = \'menuone,noselect,preview\'\n```\n\nIf you explicitly set `completeopt` completor will **not** use this value for complete\noptions.\n\n#### Completor Actions\n\n* Jump to definition `completor#do(\'definition\')`\n* Show documentation `completor#do(\'doc\')`\n* Format code `completor#do(\'format\')`\n* Hover info (lsp hover) `completor#do(\'hover\')`\n\n```vim\nnoremap <silent> <leader>d :call completor#do(\'definition\')<CR>\nnoremap <silent> <leader>c :call completor#do(\'doc\')<CR>\nnoremap <silent> <leader>f :call completor#do(\'format\')<CR>\nnoremap <silent> <leader>s :call completor#do(\'hover\')<CR>\n```\n\n#### Golang practices (without using lsp)\n\nUse *guru* for jumping to definition:\n\n```vim\nlet g:completor_go_guru_binary = \'guru\'\n```\n\nUse *goimports* to format code:\n\n```vim\nlet g:completor_go_gofmt_binary = \'goimports\'\n```\n\nFormat file after write to buffer:\n\n```vim\nautocmd BufWritePost *.go :call completor#do(\'format\')\n```\n\n#### c/c++ practices (without using lsp)\n\nJump to completion placeholder:\n\n```vim\nmap <c-\\> <Plug>CompletorCppJumpToPlaceholder\nimap <c-\\> <Plug>CompletorCppJumpToPlaceholder\n```\n\nDisable completion placeholder:\n\n```vim\nlet g:completor_clang_disable_placeholders = 1\n```\n\n#### Enable LSP\n\n```vim\nlet g:completor_filetype_map = {}\n" Enable lsp for go by using gopls\nlet g:completor_filetype_map.go = {\'ft\': \'lsp\', \'cmd\': \'gopls\'}\n" Enable lsp for rust by using rls\nlet g:completor_filetype_map.rust = {\'ft\': \'lsp\', \'cmd\': \'rls\'}\n" Enable lsp for c by using clangd\nlet g:completor_filetype_map.c = {\'ft\': \'lsp\', \'cmd\': \'clangd-7\'}\n```\n'