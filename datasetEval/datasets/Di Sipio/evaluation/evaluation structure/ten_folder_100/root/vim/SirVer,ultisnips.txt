b'[![Build Status](https://travis-ci.org/SirVer/ultisnips.svg?branch=master)](https://travis-ci.org/SirVer/ultisnips)\n[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/SirVer/ultisnips?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\n\nUltiSnips\n=========\n\nUltiSnips is the ultimate solution for snippets in Vim. It has many features,\nspeed being one of them.\n\n![GIF Demo](https://raw.github.com/SirVer/ultisnips/master/doc/demo.gif)\n\nIn this demo I am editing a python file. I first expand the `#!` snippet, then\nthe `class` snippet. The completion menu comes from\n[YouCompleteMe](https://github.com/Valloric/YouCompleteMe), UltiSnips also\nintegrates with [deoplete](https://github.com/Shougo/deoplete.nvim). I can\njump through placeholders and add text while the snippet inserts text in other\nplaces automatically: when I add `Animal` as a base class, `__init__` gets\nupdated to call the base class constructor. When I add arguments to the\nconstructor, they automatically get assigned to instance variables. I then\ninsert my personal snippet for `print` debugging. Note that I left insert mode,\ninserted another snippet and went back to add an additional argument to\n`__init__` and the class snippet was still active and added another instance\nvariable.\n\nThe official home of UltiSnips is at <https://github.com/sirver/ultisnips>.\nPlease add pull requests and issues there.\n\nUltiSnips was started in Jun 2009 by @SirVer. In Dec 2015, maintenance was\nhanded over to [@seletskiy](https://github.com/seletskiy) who ran out of time\nin early 2017. Since Jun 2019, @SirVer is maintaining UltiSnips again on a\nvery constraint time budget. If you can help triaging issues it would be\ngreatly appreciated.\n\n\nQuick Start\n-----------\n\nThis assumes you are using [Vundle](https://github.com/gmarik/Vundle.vim). Adapt\nfor your plugin manager of choice. Put this into your `.vimrc`.\n\n    " Track the engine.\n    Plugin \'SirVer/ultisnips\'\n\n    " Snippets are separated from the engine. Add this if you want them:\n    Plugin \'honza/vim-snippets\'\n\n    " Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.\n    let g:UltiSnipsExpandTrigger="<tab>"\n    let g:UltiSnipsJumpForwardTrigger="<c-b>"\n    let g:UltiSnipsJumpBackwardTrigger="<c-z>"\n\n    " If you want :UltiSnipsEdit to split your window.\n    let g:UltiSnipsEditSplit="vertical"\n\nUltiSnips comes with comprehensive\n[documentation](https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt).\nAs there are more options and tons of features I suggest you at least skim it.\n\nThere are example uses for some power user features here:\n\n  * [Snippets Aliases](doc/examples/snippets-aliasing/README.md)\n  * [Dynamic Tabstops/Tabstop Generation](doc/examples/tabstop-generation/README.md)\n\nScreencasts\n-----------\n\nFrom a gentle introduction to really advanced in a few minutes: The blog posts\nof the screencasts contain more advanced examples of the things discussed in the\nvideos.\n\n- [Episode 1: What are snippets and do I need them?](http://www.sirver.net/blog/2011/12/30/first-episode-of-ultisnips-screencast/)\n- [Episode 2: Creating Basic Snippets](http://www.sirver.net/blog/2012/01/08/second-episode-of-ultisnips-screencast/)\n- [Episode 3: What\'s new in version 2.0](http://www.sirver.net/blog/2012/02/05/third-episode-of-ultisnips-screencast/)\n- [Episode 4: Python Interpolation](http://www.sirver.net/blog/2012/03/31/fourth-episode-of-ultisnips-screencast/)\n\nAlso the excellent [Vimcasts](http://vimcasts.org) dedicated three episodes to\nUltiSnips:\n\n- [Meet UltiSnips](http://vimcasts.org/episodes/meet-ultisnips/)\n- [Using Python interpolation in UltiSnips snippets](http://vimcasts.org/episodes/ultisnips-python-interpolation/)\n- [Using selected text in UltiSnips snippets](http://vimcasts.org/episodes/ultisnips-visual-placeholder/)\n'