b'<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![travis-ci](https://travis-ci.org/junegunn/fzf.svg?branch=master)](https://travis-ci.org/junegunn/fzf)\n===\n\nfzf is a general-purpose command-line fuzzy finder.\n\n<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf-preview.png" width=640>\n\nIt\'s an interactive Unix filter for command-line that can be used with any\nlist; files, command history, processes, hostnames, bookmarks, git commits,\netc.\n\nPros\n----\n\n- Portable, no dependencies\n- Blazingly fast\n- The most comprehensive feature set\n- Flexible layout\n- Batteries included\n    - Vim/Neovim plugin, key bindings and fuzzy auto-completion\n\nTable of Contents\n-----------------\n\n   * [Installation](#installation)\n      * [Using Homebrew or Linuxbrew](#using-homebrew-or-linuxbrew)\n      * [Using git](#using-git)\n      * [As Vim plugin](#as-vim-plugin)\n      * [Arch Linux](#arch-linux)\n      * [Debian](#debian)\n      * [Fedora](#fedora)\n      * [openSUSE](#opensuse)\n      * [FreeBSD](#freebsd)\n      * [Windows](#windows)\n   * [Upgrading fzf](#upgrading-fzf)\n   * [Building fzf](#building-fzf)\n   * [Usage](#usage)\n      * [Using the finder](#using-the-finder)\n      * [Layout](#layout)\n      * [Search syntax](#search-syntax)\n      * [Environment variables](#environment-variables)\n      * [Options](#options)\n      * [Demo](#demo)\n   * [Examples](#examples)\n   * [fzf-tmux script](#fzf-tmux-script)\n   * [Key bindings for command line](#key-bindings-for-command-line)\n   * [Fuzzy completion for bash and zsh](#fuzzy-completion-for-bash-and-zsh)\n      * [Files and directories](#files-and-directories)\n      * [Process IDs](#process-ids)\n      * [Host names](#host-names)\n      * [Environment variables / Aliases](#environment-variables--aliases)\n      * [Settings](#settings)\n      * [Supported commands](#supported-commands)\n   * [Vim plugin](#vim-plugin)\n   * [Advanced topics](#advanced-topics)\n      * [Performance](#performance)\n      * [Executing external programs](#executing-external-programs)\n      * [Preview window](#preview-window)\n   * [Tips](#tips)\n      * [Respecting .gitignore](#respecting-gitignore)\n      * [git ls-tree for fast traversal](#git-ls-tree-for-fast-traversal)\n      * [Fish shell](#fish-shell)\n   * [Related projects](#related-projects)\n   * [<a href="LICENSE">License</a>](#license)\n\nInstallation\n------------\n\nfzf project consists of the following components:\n\n- `fzf` executable\n- `fzf-tmux` script for launching fzf in a tmux pane\n- Shell extensions\n    - Key bindings (`CTRL-T`, `CTRL-R`, and `ALT-C`) (bash, zsh, fish)\n    - Fuzzy auto-completion (bash, zsh)\n- Vim/Neovim plugin\n\nYou can [download fzf executable][bin] alone if you don\'t need the extra\nstuff.\n\n[bin]: https://github.com/junegunn/fzf-bin/releases\n\n### Using Homebrew or Linuxbrew\n\nYou can use [Homebrew](http://brew.sh/) or [Linuxbrew](http://linuxbrew.sh/)\nto install fzf.\n\n```sh\nbrew install fzf\n\n# To install useful key bindings and fuzzy completion:\n$(brew --prefix)/opt/fzf/install\n```\n\nfzf is also available [via MacPorts][portfile]: `sudo port install fzf`\n\n[portfile]: https://github.com/macports/macports-ports/blob/master/sysutils/fzf/Portfile\n\n### Using git\n\nAlternatively, you can "git clone" this repository to any directory and run\n[install](https://github.com/junegunn/fzf/blob/master/install) script.\n\n```sh\ngit clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf\n~/.fzf/install\n```\n\n### As Vim plugin\n\nOnce you have fzf installed, you can enable it inside Vim simply by adding the\ndirectory to `&runtimepath` in your Vim configuration file as follows:\n\n```vim\n" If installed using Homebrew\nset rtp+=/usr/local/opt/fzf\n\n" If installed using git\nset rtp+=~/.fzf\n```\n\nIf you use [vim-plug](https://github.com/junegunn/vim-plug), the same can be\nwritten as:\n\n```vim\n" If installed using Homebrew\nPlug \'/usr/local/opt/fzf\'\n\n" If installed using git\nPlug \'~/.fzf\'\n```\n\nBut instead of separately installing fzf on your system (using Homebrew or\n"git clone") and enabling it on Vim (adding it to `&runtimepath`), you can use\nvim-plug to do both.\n\n```vim\n" PlugInstall and PlugUpdate will clone fzf in ~/.fzf and run the install script\nPlug \'junegunn/fzf\', { \'dir\': \'~/.fzf\', \'do\': \'./install --all\' }\n  " Both options are optional. You don\'t have to install fzf in ~/.fzf\n  " and you don\'t have to run the install script if you use fzf only in Vim.\n```\n\n### Arch Linux\n\n```sh\nsudo pacman -S fzf\n```\n\n### Debian\n\nfzf is available in Debian Buster and above, and can be installed using the usual\nmethod:\n\n```sh\nsudo apt-get install fzf\n```\n\nRead the documentation (/usr/share/doc/fzf/README.Debian) on how to enable it.\n\n### Fedora\n\nfzf is available in Fedora 26 and above, and can be installed using the usual\nmethod:\n\n```sh\nsudo dnf install fzf\n```\n\nShell completion and plugins for vim or neovim are enabled by default. Shell\nkey bindings are installed but not enabled by default. See Fedora\'s package\ndocumentation (/usr/share/doc/fzf/README.Fedora) for more information.\n\n### openSUSE\n\nfzf is available in openSUSE Tumbleweed and can be installed via zypper:\n\n```sh\nsudo zypper install fzf\n```\n\n### FreeBSD\n\n```sh\npkg install fzf\n```\n\n### Windows\n\nPre-built binaries for Windows can be downloaded [here][bin]. fzf is also\navailable as a [Chocolatey package][choco]:\n\n[choco]: https://chocolatey.org/packages/fzf\n\n```sh\nchoco install fzf\n```\n\nor a [Scoop package][scoop]:\n\n[scoop]: https://github.com/ScoopInstaller/Main/blob/master/bucket/fzf.json\n\n```sh\nscoop install fzf\n```\n\nHowever, other components of the project may not work on Windows. Known issues\nand limitations can be found on [the wiki page][windows-wiki]. You might want\nto consider installing fzf on [Windows Subsystem for Linux][wsl] where\neverything runs flawlessly.\n\n[windows-wiki]: https://github.com/junegunn/fzf/wiki/Windows\n[wsl]: https://blogs.msdn.microsoft.com/wsl/\n\nUpgrading fzf\n-------------\n\nfzf is being actively developed and you might want to upgrade it once in a\nwhile. Please follow the instruction below depending on the installation\nmethod used.\n\n- git: `cd ~/.fzf && git pull && ./install`\n- brew: `brew update; brew reinstall fzf`\n- chocolatey: `choco upgrade fzf`\n- vim-plug: `:PlugUpdate fzf`\n\nBuilding fzf\n------------\n\nSee [BUILD.md](BUILD.md).\n\nUsage\n-----\n\nfzf will launch interactive finder, read the list from STDIN, and write the\nselected item to STDOUT.\n\n```sh\nfind * -type f | fzf > selected\n```\n\nWithout STDIN pipe, fzf will use find command to fetch the list of\nfiles excluding hidden ones. (You can override the default command with\n`FZF_DEFAULT_COMMAND`)\n\n```sh\nvim $(fzf)\n```\n\n#### Using the finder\n\n- `CTRL-J` / `CTRL-K` (or `CTRL-N` / `CTRL-P`) to move cursor up and down\n- `Enter` key to select the item, `CTRL-C` / `CTRL-G` / `ESC` to exit\n- On multi-select mode (`-m`), `TAB` and `Shift-TAB` to mark multiple items\n- Emacs style key bindings\n- Mouse: scroll, click, double-click; shift-click and shift-scroll on\n  multi-select mode\n\n#### Layout\n\nfzf by default starts in fullscreen mode, but you can make it start below the\ncursor with `--height` option.\n\n```sh\nvim $(fzf --height 40%)\n```\n\nAlso check out `--reverse` and `--layout` options if you prefer\n"top-down" layout instead of the default "bottom-up" layout.\n\n```sh\nvim $(fzf --height 40% --reverse)\n```\n\nYou can add these options to `$FZF_DEFAULT_OPTS` so that they\'re applied by\ndefault. For example,\n\n```sh\nexport FZF_DEFAULT_OPTS=\'--height 40% --layout=reverse --border\'\n```\n\n#### Search syntax\n\nUnless otherwise specified, fzf starts in "extended-search mode" where you can\ntype in multiple search terms delimited by spaces. e.g. `^music .mp3$ sbtrkt\n!fire`\n\n| Token     | Match type                 | Description                          |\n| --------- | -------------------------- | ------------------------------------ |\n| `sbtrkt`  | fuzzy-match                | Items that match `sbtrkt`            |\n| `\'wild`   | exact-match (quoted)       | Items that include `wild`            |\n| `^music`  | prefix-exact-match         | Items that start with `music`        |\n| `.mp3$`   | suffix-exact-match         | Items that end with `.mp3`           |\n| `!fire`   | inverse-exact-match        | Items that do not include `fire`     |\n| `!^music` | inverse-prefix-exact-match | Items that do not start with `music` |\n| `!.mp3$`  | inverse-suffix-exact-match | Items that do not end with `.mp3`    |\n\nIf you don\'t prefer fuzzy matching and do not wish to "quote" every word,\nstart fzf with `-e` or `--exact` option. Note that when  `--exact` is set,\n`\'`-prefix "unquotes" the term.\n\nA single bar character term acts as an OR operator. For example, the following\nquery matches entries that start with `core` and end with either `go`, `rb`,\nor `py`.\n\n```\n^core go$ | rb$ | py$\n```\n\n#### Environment variables\n\n- `FZF_DEFAULT_COMMAND`\n    - Default command to use when input is tty\n    - e.g. `export FZF_DEFAULT_COMMAND=\'fd --type f\'`\n- `FZF_DEFAULT_OPTS`\n    - Default options\n    - e.g. `export FZF_DEFAULT_OPTS="--layout=reverse --inline-info"`\n\n#### Options\n\nSee the man page (`man fzf`) for the full list of options.\n\n#### Demo\nIf you learn by watching videos, check out this screencast by [@samoshkin](https://github.com/samoshkin) to explore `fzf` features.\n\n<a title="fzf - command-line fuzzy finder" href="https://www.youtube.com/watch?v=qgG5Jhi_Els">\n  <img src="https://i.imgur.com/vtG8olE.png" width="640">\n</a>\n\nExamples\n--------\n\nMany useful examples can be found on [the wiki\npage](https://github.com/junegunn/fzf/wiki/examples). Feel free to add your\nown as well.\n\n`fzf-tmux` script\n-----------------\n\n[fzf-tmux](bin/fzf-tmux) is a bash script that opens fzf in a tmux pane.\n\n```sh\n# usage: fzf-tmux [-u|-d [HEIGHT[%]]] [-l|-r [WIDTH[%]]] [--] [FZF OPTIONS]\n#        (-[udlr]: up/down/left/right)\n\n# select git branches in horizontal split below (15 lines)\ngit branch | fzf-tmux -d 15\n\n# select multiple words in vertical split on the left (20% of screen width)\ncat /usr/share/dict/words | fzf-tmux -l 20% --multi --reverse\n```\n\nIt will still work even when you\'re not on tmux, silently ignoring `-[udlr]`\noptions, so you can invariably use `fzf-tmux` in your scripts.\n\nAlternatively, you can use `--height HEIGHT[%]` option not to start fzf in\nfullscreen mode.\n\n```sh\nfzf --height 40%\n```\n\nKey bindings for command-line\n-----------------------------\n\nThe install script will setup the following key bindings for bash, zsh, and\nfish.\n\n- `CTRL-T` - Paste the selected files and directories onto the command-line\n    - Set `FZF_CTRL_T_COMMAND` to override the default command\n    - Set `FZF_CTRL_T_OPTS` to pass additional options\n- `CTRL-R` - Paste the selected command from history onto the command-line\n    - If you want to see the commands in chronological order, press `CTRL-R`\n      again which toggles sorting by relevance\n    - Set `FZF_CTRL_R_OPTS` to pass additional options\n- `ALT-C` - cd into the selected directory\n    - Set `FZF_ALT_C_COMMAND` to override the default command\n    - Set `FZF_ALT_C_OPTS` to pass additional options\n\nIf you\'re on a tmux session, you can start fzf in a split pane by setting\n`FZF_TMUX` to 1, and change the height of the pane with `FZF_TMUX_HEIGHT`\n(e.g. `20`, `50%`).\n\nIf you use vi mode on bash, you need to add `set -o vi` *before* `source\n~/.fzf.bash` in your .bashrc, so that it correctly sets up key bindings for vi\nmode.\n\nMore tips can be found on [the wiki page](https://github.com/junegunn/fzf/wiki/Configuring-shell-key-bindings).\n\nFuzzy completion for bash and zsh\n---------------------------------\n\n#### Files and directories\n\nFuzzy completion for files and directories can be triggered if the word before\nthe cursor ends with the trigger sequence which is by default `**`.\n\n- `COMMAND [DIRECTORY/][FUZZY_PATTERN]**<TAB>`\n\n```sh\n# Files under current directory\n# - You can select multiple items with TAB key\nvim **<TAB>\n\n# Files under parent directory\nvim ../**<TAB>\n\n# Files under parent directory that match `fzf`\nvim ../fzf**<TAB>\n\n# Files under your home directory\nvim ~/**<TAB>\n\n\n# Directories under current directory (single-selection)\ncd **<TAB>\n\n# Directories under ~/github that match `fzf`\ncd ~/github/fzf**<TAB>\n```\n\n#### Process IDs\n\nFuzzy completion for PIDs is provided for kill command. In this case,\nthere is no trigger sequence, just press tab key after kill command.\n\n```sh\n# Can select multiple processes with <TAB> or <Shift-TAB> keys\nkill -9 <TAB>\n```\n\n#### Host names\n\nFor ssh and telnet commands, fuzzy completion for host names is provided. The\nnames are extracted from /etc/hosts and ~/.ssh/config.\n\n```sh\nssh **<TAB>\ntelnet **<TAB>\n```\n\n#### Environment variables / Aliases\n\n```sh\nunset **<TAB>\nexport **<TAB>\nunalias **<TAB>\n```\n\n#### Settings\n\n```sh\n# Use ~~ as the trigger sequence instead of the default **\nexport FZF_COMPLETION_TRIGGER=\'~~\'\n\n# Options to fzf command\nexport FZF_COMPLETION_OPTS=\'+c -x\'\n\n# Use fd (https://github.com/sharkdp/fd) instead of the default find\n# command for listing path candidates.\n# - The first argument to the function ($1) is the base path to start traversal\n# - See the source code (completion.{bash,zsh}) for the details.\n_fzf_compgen_path() {\n  fd --hidden --follow --exclude ".git" . "$1"\n}\n\n# Use fd to generate the list for directory completion\n_fzf_compgen_dir() {\n  fd --type d --hidden --follow --exclude ".git" . "$1"\n}\n```\n\n#### Supported commands\n\nOn bash, fuzzy completion is enabled only for a predefined set of commands\n(`complete | grep _fzf` to see the list). But you can enable it for other\ncommands as well as follows.\n\n```sh\ncomplete -F _fzf_path_completion -o default -o bashdefault ag\ncomplete -F _fzf_dir_completion -o default -o bashdefault tree\n```\n\nVim plugin\n----------\n\nSee [README-VIM.md](README-VIM.md).\n\nAdvanced topics\n---------------\n\n### Performance\n\nfzf is fast and is [getting even faster][perf]. Performance should not be\na problem in most use cases. However, you might want to be aware of the\noptions that affect the performance.\n\n- `--ansi` tells fzf to extract and parse ANSI color codes in the input and it\n  makes the initial scanning slower. So it\'s not recommended that you add it\n  to your `$FZF_DEFAULT_OPTS`.\n- `--nth` makes fzf slower as fzf has to tokenize each line.\n- `--with-nth` makes fzf slower as fzf has to tokenize and reassemble each\n  line.\n- If you absolutely need better performance, you can consider using\n  `--algo=v1` (the default being `v2`) to make fzf use a faster greedy\n  algorithm. However, this algorithm is not guaranteed to find the optimal\n  ordering of the matches and is not recommended.\n\n[perf]: https://junegunn.kr/images/fzf-0.17.0.png\n\n### Executing external programs\n\nYou can set up key bindings for starting external processes without leaving\nfzf (`execute`, `execute-silent`).\n\n```bash\n# Press F1 to open the file with less without leaving fzf\n# Press CTRL-Y to copy the line to clipboard and aborts fzf (requires pbcopy)\nfzf --bind \'f1:execute(less -f {}),ctrl-y:execute-silent(echo {} | pbcopy)+abort\'\n```\n\nSee *KEY BINDINGS* section of the man page for details.\n\n### Preview window\n\nWhen `--preview` option is set, fzf automatically starts an external process with\nthe current line as the argument and shows the result in the split window.\n\n```bash\n# {} is replaced to the single-quoted string of the focused line\nfzf --preview \'cat {}\'\n```\n\nSince the preview window is updated only after the process is complete, it\'s\nimportant that the command finishes quickly.\n\n```bash\n# Use head instead of cat so that the command doesn\'t take too long to finish\nfzf --preview \'head -100 {}\'\n```\n\nPreview window supports ANSI colors, so you can use programs that\nsyntax-highlights the content of a file.\n\n- Bat: https://github.com/sharkdp/bat\n- Highlight: http://www.andre-simon.de/doku/highlight/en/highlight.php\n- CodeRay: http://coderay.rubychan.de/\n- Rouge: https://github.com/jneen/rouge\n\n```bash\n# Try bat, highlight, coderay, rougify in turn, then fall back to cat\nfzf --preview \'[[ $(file --mime {}) =~ binary ]] &&\n                 echo {} is a binary file ||\n                 (bat --style=numbers --color=always {} ||\n                  highlight -O ansi -l {} ||\n                  coderay {} ||\n                  rougify {} ||\n                  cat {}) 2> /dev/null | head -500\'\n```\n\nYou can customize the size and position of the preview window using\n`--preview-window` option. For example,\n\n```bash\nfzf --height 40% --reverse --preview \'file {}\' --preview-window down:1\n```\n\nFor more advanced examples, see [Key bindings for git with fzf][fzf-git]\n([code](https://gist.github.com/junegunn/8b572b8d4b5eddd8b85e5f4d40f17236)).\n\n[fzf-git]: https://junegunn.kr/2016/07/fzf-git/\n\nTips\n----\n\n#### Respecting `.gitignore`\n\nYou can use [fd](https://github.com/sharkdp/fd),\n[ripgrep](https://github.com/BurntSushi/ripgrep), or [the silver\nsearcher](https://github.com/ggreer/the_silver_searcher) instead of the\ndefault find command to traverse the file system while respecting\n`.gitignore`.\n\n```sh\n# Feed the output of fd into fzf\nfd --type f | fzf\n\n# Setting fd as the default source for fzf\nexport FZF_DEFAULT_COMMAND=\'fd --type f\'\n\n# Now fzf (w/o pipe) will use fd instead of find\nfzf\n\n# To apply the command to CTRL-T as well\nexport FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"\n```\n\nIf you want the command to follow symbolic links, and don\'t want it to exclude\nhidden files, use the following command:\n\n```sh\nexport FZF_DEFAULT_COMMAND=\'fd --type f --hidden --follow --exclude .git\'\n```\n\n#### `git ls-tree` for fast traversal\n\nIf you\'re running fzf in a large git repository, `git ls-tree` can boost up the\nspeed of the traversal.\n\n```sh\nexport FZF_DEFAULT_COMMAND=\'\n  (git ls-tree -r --name-only HEAD ||\n   find . -path "*/\\.*" -prune -o -type f -print -o -type l -print |\n      sed s/^..//) 2> /dev/null\'\n```\n\n#### Fish shell\n\nFish shell before version 2.6.0 [doesn\'t allow](https://github.com/fish-shell/fish-shell/issues/1362)\nreading from STDIN in command substitution, which means simple `vim (fzf)`\ndoesn\'t work as expected. The workaround for fish 2.5.0 and earlier is to use\nthe `read` fish command:\n\n```sh\nfzf | read -l result; and vim $result\n```\n\nor, for multiple results:\n\n```sh\nfzf -m | while read -l r; set result $result $r; end; and vim $result\n```\n\nThe globbing system is different in fish and thus `**` completion will not work.\nHowever, the `CTRL-T` command will use the last token on the command-line as the\nroot folder for the recursive search. For instance, hitting `CTRL-T` at the end\nof the following command-line\n\n```sh\nls /var/\n```\n\nwill list all files and folders under `/var/`.\n\nWhen using a custom `FZF_CTRL_T_COMMAND`, use the unexpanded `$dir` variable to\nmake use of this feature. `$dir` defaults to `.` when the last token is not a\nvalid directory. Example:\n\n```sh\nset -g FZF_CTRL_T_COMMAND "command find -L \\$dir -type f 2> /dev/null | sed \'1d; s#^\\./##\'"\n```\n\nRelated projects\n----------------\n\nhttps://github.com/junegunn/fzf/wiki/Related-projects\n\n[License](LICENSE)\n------------------\n\nThe MIT License (MIT)\n\nCopyright (c) 2017 Junegunn Choi\n'