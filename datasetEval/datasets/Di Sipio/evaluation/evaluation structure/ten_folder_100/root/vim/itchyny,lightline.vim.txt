b"# lightline.vim\nA light and configurable statusline/tabline plugin for Vim\n\nhttps://github.com/itchyny/lightline.vim\n\n### powerline (default)\n\n![lightline.vim - powerline](https://raw.githubusercontent.com/wiki/itchyny/lightline.vim/image/powerline.png)\n\n### wombat\n\n![lightline.vim - wombat](https://raw.githubusercontent.com/wiki/itchyny/lightline.vim/image/wombat.png)\n\n### jellybeans\n\n![lightline.vim - jellybeans](https://raw.githubusercontent.com/wiki/itchyny/lightline.vim/image/jellybeans.png)\n\n### solarized dark\n\n![lightline.vim - solarized_dark](https://raw.githubusercontent.com/wiki/itchyny/lightline.vim/image/solarized_dark.png)\n\n### solarized light\n\n![lightline.vim - solarized_light](https://raw.githubusercontent.com/wiki/itchyny/lightline.vim/image/solarized_light.png)\n\n### PaperColor light\n\n![lightline.vim - PaperColor](https://raw.githubusercontent.com/wiki/itchyny/lightline.vim/image/PaperColor.png)\n\n### seoul256\n\n![lightline.vim - seoul256](https://raw.githubusercontent.com/wiki/itchyny/lightline.vim/image/seoul256.png)\n\n### one\n\n![lightline.vim - one](https://raw.githubusercontent.com/wiki/itchyny/lightline.vim/image/one.png)\n\n### landscape\n\n![lightline.vim - landscape](https://raw.githubusercontent.com/wiki/itchyny/lightline.vim/image/landscape.png)\n\nlandscape is my colorscheme, which is a high-contrast cterm-supported colorscheme, available at https://github.com/itchyny/landscape.vim\n\n\nFor screenshots of all available colorshemes, see [this file](colorscheme.md).\n\n## Why yet another clone of powerline?\n+ [vim-powerline](https://github.com/Lokaltog/vim-powerline) is a nice plugin, but deprecated.\n+ [powerline](https://github.com/powerline/powerline) is a nice plugin, but difficult to configure.\n+ [vim-airline](https://github.com/vim-airline/vim-airline) is a nice plugin, but it uses too many functions of other plugins, which should be done by users in `.vimrc`.\n\n## Spirit of this plugin\n+ Minimalism. The core script is very small to achieve enough functions as a statusline plugin.\n+ Configurability. You can create your own component and easily add to the statusline and the tabline.\n+ Orthogonality. The plugin does not rely on the implementation of other plugins. Such plugin crossing settings should be configured by users.\n\n## Installation\n### [Vim packages](http://vimhelp.appspot.com/repeat.txt.html#packages) (since Vim 7.4.1528)\n\n        git clone https://github.com/itchyny/lightline.vim ~/.vim/pack/plugins/start/lightline\n\n### [Pathogen](https://github.com/tpope/vim-pathogen)\n1. Install with the following command.\n\n        git clone https://github.com/itchyny/lightline.vim ~/.vim/bundle/lightline.vim\n\n2. Generate help tags with `:Helptags`.\n\n### [Vundle](https://github.com/VundleVim/Vundle.vim)\n1. Add the following configuration to your `.vimrc`.\n\n        Plugin 'itchyny/lightline.vim'\n\n2. Install with `:PluginInstall`.\n\n### [NeoBundle](https://github.com/Shougo/neobundle.vim)\n1. Add the following configuration to your `.vimrc`.\n\n        NeoBundle 'itchyny/lightline.vim'\n\n2. Install with `:NeoBundleInstall`.\n\n### [vim-plug](https://github.com/junegunn/vim-plug)\n1. Add the following configuration to your `.vimrc`.\n\n        Plug 'itchyny/lightline.vim'\n\n2. Install with `:PlugInstall`.\n\n## Introduction\nAfter installing this plugin, you restart the editor and will get a cool statusline.\n![lightline.vim - tutorial](https://raw.githubusercontent.com/wiki/itchyny/lightline.vim/image/tutorial/1.png)\n\nThe color of the statusline changes due to the mode of Vim. Try typing something, selecting in visual mode and replacing some texts.\n\nIf the statusline looks like\n![lightline.vim - tutorial](https://raw.githubusercontent.com/wiki/itchyny/lightline.vim/image/tutorial/21.png)\n\nadd the following configuration to your `.vimrc`.\n```vim\nset laststatus=2\n```\n\nIf the statusline is not coloured like\n![lightline.vim - tutorial](https://raw.githubusercontent.com/wiki/itchyny/lightline.vim/image/tutorial/20.png)\n\nthen modify `TERM` in your shell configuration (`.zshrc` for example)\n```sh\nexport TERM=xterm-256color\n```\nand then add the following configuration to your `.vimrc`.\n```vim\nif !has('gui_running')\n  set t_Co=256\nendif\n```\n\nYour statusline appears to work correctly? If yes, great, thanks for choosing lightline.vim! If no, please file an issue report to the [issue tracker](https://github.com/itchyny/lightline.vim/issues).\n\nBy the way, `-- INSERT --` is unnecessary anymore because the mode information is displayed in the statusline.\n![lightline.vim - tutorial](https://raw.githubusercontent.com/wiki/itchyny/lightline.vim/image/tutorial/13.png)\nIf you want to get rid of it, configure as follows.\n```vim\nset noshowmode\n```\n\n## Colorscheme configuration\nThe lightline.vim plugin provides multiple colorschemes to meet your editor colorscheme.\nDo not be confused, editor colorscheme rules how codes look like in buffers and lightline.vim has independent colorscheme feature, which rules how the statusline looks like.\n\nIf you are using wombat colorscheme, add the following setting to your `.vimrc`,\n```vim\nlet g:lightline = {\n      \\ 'colorscheme': 'wombat',\n      \\ }\n```\nrestart Vim and the statusline looks like:\n\n![lightline.vim - tutorial](https://raw.githubusercontent.com/wiki/itchyny/lightline.vim/image/tutorial/2.png)\n\nIf the colors of the statusline do not change, move the settings of `g:lightline` before setting the editor colorscheme.\n\nThere are many lightline colorschemes available as screenshots shown above. See `:h g:lightline.colorscheme` for the complete list.\n\n## Advanced configuration\nThe default appearance of lightline.vim is carefully designed that the tutorial is enough here for most people.\nSo please read this section if you really want to configure and enjoy the configurability of lightline.vim.\n\nSometimes people want to display information of other plugins.\nFor example git branch information, syntax check errors and some statuses of plugins.\n\nThe lightline.vim plugin does not provide any plugin integration by default.\nThis plugin considers orthogonality to be one of the important ideas, which means that the plugin does not rely on implementation of other plugins.\nOnce a plugin starts to integrate with some famous plugins, it should be kept updated to follow the changes of the plugins, and should accept integration requests with new plugins and it will suffer from performance regression due to plugin availability checks.\n\nInstead, lightline.vim provides a simple API that user can easily integrate with other plugins.\nOnce you understand how to configure and how it will be displayed in the statusline, you can also tell how to integrate with your favorite plugins.\n\nLet's start to configure the appearance.\nThe statusline is composed of multiple components.\nIt shows the current mode, filename, modified status on the left, and file format, encoding, filetype and cursor positions on the right.\nSo in order to add something in the statusline, you firstly create a new component and specify the place.\n\nThis is the hello world of lightline.vim component.\n```vim\nlet g:lightline = {\n      \\ 'colorscheme': 'wombat',\n      \\ 'active': {\n      \\   'left': [ [ 'mode', 'paste' ],\n      \\             [ 'readonly', 'filename', 'modified', 'helloworld' ] ]\n      \\ },\n      \\ 'component': {\n      \\   'helloworld': 'Hello, world!'\n      \\ },\n      \\ }\n```\nThe statusline will look like:\n![lightline.vim - tutorial](https://raw.githubusercontent.com/wiki/itchyny/lightline.vim/image/tutorial/3.png)\n\nYou have succeeded in displaying `Hello, world!` in the statusline.\nThe `helloworld` component is added to `g:lightline.active.left` and its content is configured in `g:lightline.component`.\nThe component contents are simply added to `&statusline`.\nTry `:echo &statusline`, it might be a little bit complicated, but you will find `Hello, world!` somewhere.\n\nYou can use `'statusline'` syntax for lightline.vim components.\nConsult `:h 'statusline'` to see what's available here.\nFor example, if you want to print the value of character under the cursor in hexadecimal, configure as\n```vim\nlet g:lightline = {\n      \\ 'colorscheme': 'wombat',\n      \\ 'active': {\n      \\   'left': [ [ 'mode', 'paste' ],\n      \\             [ 'readonly', 'filename', 'modified', 'charvaluehex' ] ]\n      \\ },\n      \\ 'component': {\n      \\   'charvaluehex': '0x%B'\n      \\ },\n      \\ }\n```\n![lightline.vim - tutorial](https://raw.githubusercontent.com/wiki/itchyny/lightline.vim/image/tutorial/4.png)\n\nYou want the character value information on the right hand side? OK, configure as\n```vim\nlet g:lightline = {\n      \\ 'colorscheme': 'wombat',\n      \\ 'active': {\n      \\   'right': [ [ 'lineinfo' ],\n      \\              [ 'percent' ],\n      \\              [ 'fileformat', 'fileencoding', 'filetype', 'charvaluehex' ] ]\n      \\ },\n      \\ 'component': {\n      \\   'charvaluehex': '0x%B'\n      \\ },\n      \\ }\n```\n![lightline.vim - tutorial](https://raw.githubusercontent.com/wiki/itchyny/lightline.vim/image/tutorial/5.png)\n\nWe have learned how to add a simple component.\n\n- See `:h 'statusline'` to check the statusline flags.\n- Add a new component to `g:lightline.component`.\n- Add the component name to `g:lightline.active.left` or `g:lightline.active.right`.\n\nYou can also configure the statusline of inactive buffers by adding the component to `g:lightline.inactive.left` or `g:lightline.inactive.right`.\n\n\nNow let's add some integrations with other plugin.\nThe name of the git branch is important these days.\nBut lightline.vim does not provide this information by default because it is also one of plugin crossing configurations, and not all people want the integration.\n\nIn order to show the branch name in the statusline, install some plugins which provide the branch information.\nThe [vim-fugitive](https://github.com/tpope/vim-fugitive) plugin is a famous plugin so let's integrate lightline.vim with it.\nIf you don't like to install full git integration but just want to display the branch name in the statusline, you can use the [vim-gitbranch](https://github.com/itchyny/vim-gitbranch) plugin which provides `gitbranch#name` function.\n```vim\nlet g:lightline = {\n      \\ 'colorscheme': 'wombat',\n      \\ 'active': {\n      \\   'left': [ [ 'mode', 'paste' ],\n      \\             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]\n      \\ },\n      \\ 'component_function': {\n      \\   'gitbranch': 'fugitive#head'\n      \\ },\n      \\ }\n```\n![lightline.vim - tutorial](https://raw.githubusercontent.com/wiki/itchyny/lightline.vim/image/tutorial/6.png)\n\nOkay, now the statusline shows that we are coding at the master branch.\nWhat do we learn from this example?\n\n- Find out the function which is suitable to use in the statusline.\n- Create a function component. The previous `charvaluehex` component has `'statusline'` item configuration and registered in `g:lightline.component`. In the current example, we register the name of the function in `g:lightline.component_function`. It should return the string to be displayed in the statusline.\n- Add the component name `gitbranch` to `g:lightline.active.left` or `g:lightline.active.right`.\n\n\nHere we have leaned two kinds of components.\n\n- component: it has a `%`-prefixed item which you can find the meaning at `:h 'statusline'`. All the default components of lightline.vim are components in this style. See the default components at `:h g:lightline.component`.\n- function component: the name of functions are registered. The function is called again and again so be careful not to register a heavy function. See the help with `:h g:lightline.component_function`.\n\n\nThe function component is an important design for the configurability of lightline.vim.\nBy providing the configuration interface via functions, you can adjust the statusline information as you wish.\nFor the proof, let's look into some configuration examples in Q&amp;A style.\n\n### Can I hide the readonly component in the help buffer?\nYes, create a function component for `readonly`.\nThe configuration of function component has priority over the default component.\n```vim\nlet g:lightline = {\n      \\ 'component_function': {\n      \\   'readonly': 'LightlineReadonly',\n      \\ },\n      \\ }\n\nfunction! LightlineReadonly()\n  return &readonly && &filetype !=# 'help' ? 'RO' : ''\nendfunction\n```\n![lightline.vim - tutorial](https://raw.githubusercontent.com/wiki/itchyny/lightline.vim/image/tutorial/7.png)\n\n### Can I hide the readonly component in other plugins buffer?\nYes, modify the `LightlineReadonly` function as you wish.\n```vim\nfunction! LightlineReadonly()\n  return &readonly && &filetype !~# '\\v(help|vimfiler|unite)' ? 'RO' : ''\nendfunction\n\nlet g:unite_force_overwrite_statusline = 0\nlet g:vimfiler_force_overwrite_statusline = 0\n```\n![lightline.vim - tutorial](https://raw.githubusercontent.com/wiki/itchyny/lightline.vim/image/tutorial/8.png)\n\n### Can I display the plugin information at the filename component?\nYes, overwrite the filename component.\n```vim\nlet g:lightline = {\n      \\ 'component_function': {\n      \\   'filename': 'LightlineFilename',\n      \\ },\n      \\ }\n\nfunction! LightlineFilename()\n  return &filetype ==# 'vimfiler' ? vimfiler#get_status_string() :\n        \\ &filetype ==# 'unite' ? unite#get_status_string() :\n        \\ &filetype ==# 'vimshell' ? vimshell#get_status_string() :\n        \\ expand('%:t') !=# '' ? expand('%:t') : '[No Name]'\nendfunction\n\nlet g:unite_force_overwrite_statusline = 0\nlet g:vimfiler_force_overwrite_statusline = 0\nlet g:vimshell_force_overwrite_statusline = 0\n```\n![lightline.vim - tutorial](https://raw.githubusercontent.com/wiki/itchyny/lightline.vim/image/tutorial/9.png)\n\n### Can I display the plugin name at the mode component?\nYes, overwrite the mode component.\n```vim\nlet g:lightline = {\n      \\ 'component_function': {\n      \\   'mode': 'LightlineMode',\n      \\ },\n      \\ }\n\nfunction! LightlineMode()\n  return expand('%:t') ==# '__Tagbar__' ? 'Tagbar':\n        \\ expand('%:t') ==# 'ControlP' ? 'CtrlP' :\n        \\ &filetype ==# 'unite' ? 'Unite' :\n        \\ &filetype ==# 'vimfiler' ? 'VimFiler' :\n        \\ &filetype ==# 'vimshell' ? 'VimShell' :\n        \\ lightline#mode()\nendfunction\n```\n![lightline.vim - tutorial](https://raw.githubusercontent.com/wiki/itchyny/lightline.vim/image/tutorial/10.png)\n\n### Can I trim the file format and encoding information on narrow windows?\nYes, check `winwidth(0)` and return empty string with some threshold.\n```vim\nlet g:lightline = {\n      \\ 'component_function': {\n      \\   'fileformat': 'LightlineFileformat',\n      \\   'filetype': 'LightlineFiletype',\n      \\ },\n      \\ }\n\nfunction! LightlineFileformat()\n  return winwidth(0) > 70 ? &fileformat : ''\nendfunction\n\nfunction! LightlineFiletype()\n  return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''\nendfunction\n```\n![lightline.vim - tutorial](https://raw.githubusercontent.com/wiki/itchyny/lightline.vim/image/tutorial/11.png)\n\n### Can I trim the bar between the filename and modified sign?\nYes, by joining the two components.\n```vim\nlet g:lightline = {\n      \\ 'active': {\n      \\   'left': [ [ 'mode', 'paste' ],\n      \\             [ 'readonly', 'filename' ] ],\n      \\ },\n      \\ 'component_function': {\n      \\   'filename': 'LightlineFilename',\n      \\ },\n      \\ }\n\nfunction! LightlineFilename()\n  let filename = expand('%:t') !=# '' ? expand('%:t') : '[No Name]'\n  let modified = &modified ? ' +' : ''\n  return filename . modified\nendfunction\n```\n![lightline.vim - tutorial](https://raw.githubusercontent.com/wiki/itchyny/lightline.vim/image/tutorial/12.png)\n\nYou can control the visibility and contents by writing simple functions.\nNow you notice how much function component is important for the configurability of lightline.vim.\n\n## Note for developers of other plugins\nAppearance consistency matters.\n\nThe statusline is an important space for Vim users.\nOverwriting the statusline forcibly in your plugin is not a good idea.\nIt is not hospitality, but just an annoying feature.\nIf your plugin has such a feature, add an option to be modest.\n\nA good design is as follows.\nFirstly, give the users a clue to judge which buffer is the one your plugin creates.\nThe filename is a manner and the filetype is another.\nThen, export a function which is useful to be shown in the statusline.\nLastly, for advanced users, set important information in buffer variables so that the users can obtain the condition of the plugin easily.\n\n## Author\nitchyny (https://github.com/itchyny)\n\n## License\nThis software is released under the MIT License, see LICENSE.\n"