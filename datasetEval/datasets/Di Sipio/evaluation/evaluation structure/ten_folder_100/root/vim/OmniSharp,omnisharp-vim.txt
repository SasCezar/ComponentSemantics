b'![OmniSharp](https://raw.github.com/OmniSharp/omnisharp-vim/gh-pages/logo-OmniSharp.png)\n\n[![Travis status](https://api.travis-ci.org/OmniSharp/omnisharp-vim.svg)](https://travis-ci.org/OmniSharp/omnisharp-vim)\n[![AppVeyor status](https://ci.appveyor.com/api/projects/status/github/OmniSharp/omnisharp-vim?svg=true)](https://ci.appveyor.com/project/nickspoons/omnisharp-vim)\n\n# OmniSharp\n\nOmniSharp-vim is a plugin for Vim to provide IDE like abilities for C#.\n\nOmniSharp works on Windows, and on Linux and OS X with Mono.\n\nThe plugin relies on the [OmniSharp-Roslyn](https://github.com/OmniSharp/omnisharp-roslyn) server, a .NET development platform used by several editors including Visual Studio Code, Emacs, Atom and others.\n\n## New! Run unit tests\n\nUsing stdio mode, it is now possible to run unit tests via OmniSharp-roslyn, with success/failures listed in the quickfix window for easy navigation:\n\n```vim\n" Run the current unit test (the cursor should be inside the test method)\n:OmniSharpRunTest\n\n" Run all unit tests in the current file\n:OmniSharpRunTestsInFile\n\n" Run all unit tests in the current file, and file `tests/test1.cs`\n:OmniSharpRunTestsInFile % tests/test1.cs\n```\n\nNote that this unfortunately does _not_ work in translated WSL, due to the way OmniSharp-roslyn runs the tests.\n\n## New! Asynchronous server interactions\n\nFor vim8 and neovim, OmniSharp-vim can now use the OmniSharp-roslyn stdio server instead of the HTTP server, using pure vimscript (no python dependency!). All server operations are asynchronous and this results in a much smoother coding experience.\n\nThis is initially opt-in only until some [user feedback](https://github.com/OmniSharp/omnisharp-vim/issues/468) is received. To switch from the HTTP server to stdio, add this to your .vimrc:\n\n```vim\nlet g:OmniSharp_server_stdio = 1\n```\n\nThen open vim to a .cs file and install the stdio server with `:OmniSharpInstall`. Restart vim and feel the difference!\n\n## Features\n\n* Contextual code completion\n  * Code documentation is displayed in the preview window when available (Xml Documentation for Windows, MonoDoc documentation for Mono)\n  * Completion Sources are provided for:\n    * [asyncomplete-vim](https://github.com/prabirshrestha/asyncomplete.vim)\n    * [coc.nvim](https://github.com/neoclide/coc.nvim)\n    * [ncm2](https://github.com/ncm2/ncm2)\n  * Completion snippets are supported. e.g. Console.WriteLine(TAB) (ENTER) will complete to Console.WriteLine(string value) and expand a dynamic snippet, this will place you in SELECT mode and the first method argument will be selected. \n    * Requires [UltiSnips](https://github.com/SirVer/ultisnips) and supports standard C-x C-o completion as well as completion/autocompletion plugins such as [asyncomplete-vim](https://github.com/prabirshrestha/asyncomplete.vim), [Supertab](https://github.com/ervandew/supertab), [Neocomplete](https://github.com/Shougo/neocomplete.vim) etc.\n    * Requires `set completeopt-=preview` when using [Neocomplete](https://github.com/Shougo/neocomplete.vim) because of a compatibility issue with [UltiSnips](https://github.com/SirVer/ultisnips). \n\n* Jump to the definition of a type/variable/method\n* Find symbols interactively (can use plugin: [fzf.vim](https://github.com/junegunn/fzf.vim), [CtrlP](https://github.com/ctrlpvim/ctrlp.vim) or [unite.vim](https://github.com/Shougo/unite.vim))\n* Find implementations/derived types\n* Find usages\n* Contextual code actions (unused usings, use var....etc.) (can use plugin: [fzf.vim](https://github.com/junegunn/fzf.vim), [CtrlP](https://github.com/ctrlpvim/ctrlp.vim) or [unite.vim](https://github.com/Shougo/unite.vim))\n* Find code issues (unused usings, use base type where possible....etc.) (requires plugin: [ALE](https://github.com/w0rp/ale) or [Syntastic](https://github.com/vim-syntastic/syntastic))\n* Find all code issues in solution and populate the quickfix window\n* Fix using statements for the current buffer (sort, remove and add any missing using statements where possible)\n* Rename refactoring\n* Semantic type highlighting\n* Lookup type information of an type/variable/method\n  * Can be printed to the status line or in the preview window\n  * Displays documentation for an entity when using preview window\n* Code error checking\n* Code formatter\n* Run unit tests and navigate to failing assertions\n\n## Screenshots\n#### Auto Complete\n![OmniSharp screenshot](https://f.cloud.github.com/assets/667194/514371/dc03e2bc-be56-11e2-9745-c3202335e5ab.png)\n\n#### Find Symbols\n![Find Symbols screenshot](https://raw.github.com/OmniSharp/omnisharp-vim/gh-pages/FindTypes.png)\n\n#### Find Usages\n![Find Usages screenshot](https://raw.github.com/OmniSharp/omnisharp-vim/gh-pages/FindUsages.png)\n\n#### Code Actions\n![Code Actions screenshot](https://raw.github.com/OmniSharp/omnisharp-vim/gh-pages/CodeActions.png)\n\n#### Code Actions Available (see [wiki](https://github.com/OmniSharp/omnisharp-vim/wiki/Code-Actions-Available-flag) for details)\n![Code Actions Available](https://user-images.githubusercontent.com/5274565/38906320-1aa2d7c0-430a-11e8-9ee3-40790b7e600e.png)\n\n## Installation\n### Plugin\nInstall the Vim plugin using your preferred plugin manager:\n\n| Plugin Manager                                       | Command                                                                              |\n|------------------------------------------------------|--------------------------------------------------------------------------------------|\n| [Vim-plug](https://github.com/junegunn/vim-plug)     | `Plug \'OmniSharp/omnisharp-vim\'`                                                     |\n| [Vundle](https://github.com/gmarik/vundle)           | `Bundle \'OmniSharp/omnisharp-vim\'`                                                   |\n| [NeoBundle](https://github.com/Shougo/neobundle.vim) | `NeoBundle \'OmniSharp/omnisharp-vim\'`                                                |\n\n... or git:\n\n| [\'runtimepath\'](http://vimhelp.appspot.com/options.txt.html#%27runtimepath%27) handler | Command                                            |\n|------------------------------------------------------|--------------------------------------------------------------------------------------|\n| [Vim 8.0+ Native packages](http://vimhelp.appspot.com/repeat.txt.html#packages) | `$ git clone git://github.com/OmniSharp/omnisharp-vim ~/.vim/pack/plugins/start/omnisharp-vim` |\n| [Pathogen](https://github.com/tpope/vim-pathogen)    | `$ git clone git://github.com/OmniSharp/omnisharp-vim ~/.vim/bundle/omnisharp-vim`     |\n\nIf not using a plugin manager such as Vim-plug (which does this automatically), make sure your .vimrc contains this line:\n\n```vim\nfiletype indent plugin on\n```\n\n### Server\nOmniSharp-vim depends on the [OmniSharp-Roslyn](https://github.com/OmniSharp/omnisharp-roslyn) server. The first time OmniSharp-vim tries to open a C# file, it will check for the presence of the server, and if not found it will ask if it should be downloaded. Answer \'y\' and the latest version will be downloaded and extracted to `~/.cache/omnisharp-vim/omnisharp-roslyn`, ready to use. *Note:* Requires [`curl`](https://curl.haxx.se/) or [`wget`](https://www.gnu.org/software/wget/) on Linux, macOS, Cygwin and WSL.\n\nRunning the command `:OmniSharpInstall` in vim will also install/upgrade to the latest OmniSharp-roslyn release.\nTo install a particular release, including pre-releases, specify the version number like this:\n\n```vim\n:OmniSharpInstall v1.34.2\n```\n\n*Note:* These methods depend on the `g:OmniSharp_server_stdio` variable to decide which OmniSharp-roslyn server to download. If you are unsure, try using the new stdio option first, and only fall back to HTTP if you have problems.\n\n* **vim8.0+ or neovim**: Use the stdio server, it is used asynchronously and there is no python requirement.\n\n* **< vim8.0**: Use the HTTP server. Your vim must have python (2 or 3) support, and you\'ll need either [vim-dispatch](https://github.com/tpope/vim-dispatch) or [vimproc.vim](https://github.com/Shougo/vimproc.vim) to be installed\n\n```vim\n" Use the stdio version of OmniSharp-roslyn:\nlet g:OmniSharp_server_stdio = 1\n\n" Use the HTTP version of OmniSharp-roslyn:\nlet g:OmniSharp_server_stdio = 0\n```\n\n#### Manual installation\nTo install the server manually, first decide which version (stdio or HTTP) you wish to use, as described above. Download the latest release for your platform from the [OmniSharp-roslyn releases](https://github.com/OmniSharp/omnisharp-roslyn/releases) page. For stdio on a 64-bit Windows system, the `omnisharp.win-x64.zip` package should be downloaded, whereas Mac users wanting to use the HTTP version should select `omnisharp.http-osx.tar.gz` etc.\n\nExtract the binaries and configure your vimrc with the path to the `run` script (Linux and Mac) or `OmniSharp.exe` file (Window), e.g.:\n\n```vim\nlet g:OmniSharp_server_path = \'C:\\OmniSharp\\omnisharp.win-x64\\OmniSharp.exe\'\n```\n```vim\nlet g:OmniSharp_server_path = \'/home/me/omnisharp/omnisharp.http-linux-x64/run\'\n```\n\n#### Windows: Cygwin\nNo special configuration is required for cygwin. The automatic installation script for cygwin downloads the *Windows* OmniSharp-roslyn release. OmniSharp-vim detects that it is running in a cygwin environment and automatically enables Windows/cygwin file path translations by setting the default value of `g:OmniSharp_translate_cygwin_wsl` to `1`.\n\n#### Windows Subsystem for Linux (WSL)\nOmniSharp-roslyn can function perfectly well in WSL using linux binaries, if the environment is correctly configured (see [OmniSharp-roslyn](https://github.com/OmniSharp/omnisharp-roslyn) for requirements).\nHowever, if you have the .NET Framework installed in Windows, you may have better results using the Windows binaries. To do this, follow the Manual installation instructions above, configure your vimrc to point to the `OmniSharp.exe` file, and let OmniSharp-vim know that you are operating in Cygwin/WSL mode (indicating that file paths need to be translated by OmniSharp-vim from Unix-Windows and back:\n\n```vim\nlet g:OmniSharp_server_path = \'/mnt/c/OmniSharp/omnisharp.win-x64/OmniSharp.exe\'\nlet g:OmniSharp_translate_cygwin_wsl = 1\n```\n\n#### Linux and Mac\nOmniSharp-Roslyn requires Mono on Linux and OSX. The roslyn server [releases](https://github.com/OmniSharp/omnisharp-roslyn/releases) come with an embedded Mono, but this can be overridden to use the installed Mono by setting `g:OmniSharp_server_use_mono` in your vimrc. See [The Mono Project](https://www.mono-project.com/download/stable/) for installation details.\n\n```vim\n    let g:OmniSharp_server_use_mono = 1\n```\n\n##### libuv\nFor the HTTP version, OmniSharp-Roslyn also requires [libuv](http://libuv.org/) on Linux and Mac. This is typically a simple install step, e.g. `brew install libuv` on Mac, `apt-get install libuv1-dev` on debian/Ubuntu, `pacman -S libuv` on arch linux, `dnf install libuv libuv-devel` on Fedora/CentOS, etc.\n\nPlease note that if your distro has a "dev" package (`libuv1-dev`, `libuv-devel` etc.) then you will probably need it.\n\n**Note:** This is **not** necessary for the stdio version of OmniSharp-roslyn.\n\n### Install Python (HTTP only)\nInstall the latest version of python 3 ([Python 3.7](https://www.python.org/downloads/release/python-370/)) or 2 ([Python 2.7.15](https://www.python.org/downloads/release/python-2715/)).\nMake sure that you pick correct version of Python to match your vim\'s architecture (32-bit python for 32-bit vim, 64-bit python for 64-bit vim).\n\nVerify that Python is working inside Vim with\n\n```vim\n:echo has(\'python3\') || has(\'python\')\n```\n\n**Note:** If you are using the stdio version of OmniSharp-roslyn, you do not need python.\n\n### Asynchronous command execution\nOmniSharp-vim can start the server only if any of the following criteria is met:\n\n* Vim with job control API is used (8.0+)\n* [neovim](https://neovim.io) with job control API is used\n* [vim-dispatch](https://github.com/tpope/vim-dispatch) is installed\n* [vimproc.vim](https://github.com/Shougo/vimproc.vim) is installed\n\n### (optional) Install ALE\n\nIf [ALE](https://github.com/w0rp/ale) is installed, it will automatically be used to asynchronously check your code for errors.\n\nNo further configuration is necessary. However, be aware that ALE supports multiple C# linters, and will run all linters that are available on your system. To limit ALE to only use OmniSharp (recommended), add this to your .vimrc:\n\n```vim\nlet g:ale_linters = {\n\\ \'cs\': [\'OmniSharp\']\n\\}\n```\n\n### (optional) Install syntastic\nThe vim plugin [syntastic](https://github.com/vim-syntastic/syntastic) can be used if you don\'t have ALE.\nConfigure it to work with OmniSharp with the following line in your vimrc.\n\n```vim\nlet g:syntastic_cs_checkers = [\'code_checker\']\n```\n\n### (optional) Install ctrlp.vim, unite.vim or fzf.vim\nIf one of these plugins is detected, it will be used as the selector for Code Actions and Find Symbols features:\n\n- [fzf.vim](https://github.com/junegunn/fzf.vim)\n- [CtrlP](https://github.com/ctrlpvim/ctrlp.vim)\n- [unite.vim](https://github.com/Shougo/unite.vim)\n\nIf you have installed more than one, or you prefer to use native vim functionality (command line, quickfix window etc.) rather than a selector plugin, you can choose an option with the `g:OmniSharp_selector_ui` variable.\n\n```vim\nlet g:OmniSharp_selector_ui = \'unite\'  " Use unite.vim\nlet g:OmniSharp_selector_ui = \'ctrlp\'  " Use ctrlp.vim\nlet g:OmniSharp_selector_ui = \'fzf\'    " Use fzf.vim\nlet g:OmniSharp_selector_ui = \'\'       " Use vim - command line, quickfix etc.\n```\n\n## How to use\nBy default, the server is started automatically when you open a .cs file.\nIt tries to detect your solution file (.sln) and starts the OmniSharp-roslyn server, passing the path to the solution file.\n\nIn vim8 and neovim, the server is started invisibly by a vim job.\nIn older versions of vim, the server will be started in different ways depending on whether you are using vim-dispatch in tmux, or are using vim-proc, gvim or running vim in a terminal.\n\nThis behaviour can be disabled by setting `let g:OmniSharp_start_server = 0` in your vimrc. You can then start the server manually from within vim with `:OmniSharpStartServer`. Alternatively, the server can be manually started from outside vim:\n\n```sh\n[mono] OmniSharp.exe -s (path/to/sln)\n```\n\nAdd `-v` to get extra debugging output from the server.\n\nTo get completions, open a C# file from your solution within Vim and press `<C-x><C-o>` (that is ctrl x followed by ctrl o) in Insert mode, or use a completion or autocompletion plugin.\n\nTo use the other features, you\'ll want to create key bindings for them. See the example vimrc below for more info.\n\nSee the [wiki](https://github.com/OmniSharp/omnisharp-vim/wiki) for more custom configuration examples.\n\n## Semantic Highlighting\nOmniSharp-roslyn can provide highlighting information about every symbol of the document.\n\nTo highlight a document, use command `:OmniSharpHighlightTypes`. To have `.cs` files automatically highlighted after all text changes, add this to your .vimrc:\n\n```vim\nlet g:OmniSharp_highlight_types = 3\n```\n\nThis is a lot of highlighting - especially when running synchronously (not using stdio). To only update highlighting when entering a buffer or leaving insert mode, use `g:OmniSharp_highlight_types = 2` instead.\n\n### Vim 8.1 text properties\nIn (very) recent versions of Vim, the OmniSharp-roslyn highlighting can be taken full advantage of using Vim text properties, allowing OmniSharp-vim to overwrite the standard Vim regular-expression syntax highlighting with OmniSharp-roslyn\'s semantic highlighting.\nTo check whether your Vim supports text properties, look for `+textprop` in the output of `:version`, or run `:echo has(\'textprop\')`.\n\nThe default highlight groups used for semantic highlighting, along with the standard Vim highlight groups they are linked to are as follows:\n\n| Highlight group  | Default link |\n|------------------|--------------|\n| csUserIdentifier | Identifier   |\n| csUserInterface  | Include      |\n| csUserMethod     | Function     |\n| csUserType       | Type         |\n\nHighlight groups are mapped to OmniSharp-roslyn keyword "kinds" using variable `g:OmniSharp_highlight_groups`.\nHere is the default mapping dictionary:\n\n```vim\nlet g:OmniSharp_highlight_groups = {\n\\ \'csUserIdentifier\': [\n\\   \'constant name\', \'enum member name\', \'field name\', \'identifier\',\n\\   \'local name\', \'parameter name\', \'property name\', \'static symbol\'],\n\\ \'csUserInterface\': [\'interface name\'],\n\\ \'csUserMethod\': [\'extension method name\', \'method name\'],\n\\ \'csUserType\': [\'class name\', \'enum name\', \'namespace name\', \'struct name\']\n\\}\n```\n\nHowever, any highlight groups can be used, and they can be set to highlight any OmniSharp-roslyn "kinds".\nFor example, to only highlight `namespace name` and `enum name` using highlight group `Title`, you could add this to your .vimrc:\n\n```vim\nlet g:OmniSharp_highlight_groups = {\n\\ \'Title\': [\'enum name\', \'namespace name\']\n\\}\n```\n\nIn order to find out what OmniSharp-roslyn calls a particular element, there is a "debugging" option available, `g:OmniSharp_highlight_debug`. When this is set to `1`, text properties are added to **all** symbols of the document. The text properties are not highlighted so this has no visible effect, but when this mode is enabled, command `:OmniSharpHighlightEchoKind` will echo the OmniSharp-rolsyn "kind" of the symbol under the cursor.\n\n**Note:** Text property highlighting is currently only available when using the stdio server, not for HTTP server usage.\n\n### Older versions\nWhen text properties are not available, or when using the HTTP server, limited semantic highlighting is still possible by highlighting keywords.\nNote that this is not perfect - a keyword can only match a single highlight group, meaning that interfaces/classes/methods/parameters with the same name will be highlighted the same as each other.\n\nThe configuration options are also more limited.\nThe same 4 highlight groups are used as described above (`csUserIdentifier`, `csUserInterface`, `csUserMethod` and `csUserType`).\nTo change a highlight group\'s colors, change the `ctermbg`/`guibg` properties, or link it to another highlight group:\n\n```vim\nhighlight csUserInterface ctermfg=12 guifg=Blue\nhighlight link csUserType Identifier\n```\n\nTo disable a group, link it to `Normal`:\n\n```vim\nhighlight link csUserMethod Normal\n```\n\n## Diagnostic overrides\n\nDiagnostics are returned from OmniSharp-roslyn in various ways - via linting plugins such as ALE or Syntastic, and using the `:OmniSharpGlobalCodeCheck` command.\nThese diagnostics come from roslyn and roslyn analyzers, and as such they can be managed at the server level in 2 ways - using [rulesets](https://roslyn-analyzers.readthedocs.io/en/latest/config-analyzer.html), and using an [.editorconfig](https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference?view=vs-2019) file.\n\nHowever, not all diagnostics can only be managed by an `.editorconfig` file, and rulesets are not always a good solution as they involve modifying `.csproj` files, which might not suit your project policies - not all project users necessarily use the same analyzers.\n\nOmniSharp-vim provides a global override dictionary, where any diagnostic can be marked as having severity `E`rror, `W`arning or `I`nfo, and for ALE/Syntastic users, a `\'subtype\': \'Style\'` may be specified.\nDiagnostics may be ignored completely by setting their `\'type\'` to `\'None\'`, in which case they will not be passed to linters, and will not be displayed in `:OmniSharpGlobalCodeCheck` results.\n\n```vim\n" IDE0010: Populate switch - display in ALE as `Info`\n" IDE0055: Fix formatting - display in ALE as `Warning` style error\n" CS8019: Duplicate of IDE0005\n" RemoveUnnecessaryImportsFixable: Generic warning that an unused using exists\nlet g:OmniSharp_diagnostic_overrides = {\n\\ \'IDE0010\': {\'type\': \'I\'},\n\\ \'IDE0055\': {\'type\': \'W\', \'subtype\': \'Style\'},\n\\ \'CS8019\': {\'type\': \'None\'},\n\\ \'RemoveUnnecessaryImportsFixable\': {\'type\': \'None\'}\n\\}\n```\n\n*Note:* Diagnostic overrides are only available in stdio mode, not HTTP mode.\n\n## Configuration\n\n### Example vimrc\n\n```vim\n" Use the vim-plug plugin manager: https://github.com/junegunn/vim-plug\n" Remember to run :PlugInstall when loading this vimrc for the first time, so\n" vim-plug downloads the plugins listed.\nsilent! if plug#begin(\'~/.vim/plugged\')\nPlug \'OmniSharp/omnisharp-vim\'\nPlug \'w0rp/ale\'\ncall plug#end()\nendif\n\n" Note: this is required for the plugin to work\nfiletype indent plugin on\n\n" Use the stdio OmniSharp-roslyn server\nlet g:OmniSharp_server_stdio = 1\n\n" Set the type lookup function to use the preview window instead of echoing it\n"let g:OmniSharp_typeLookupInPreview = 1\n\n" Timeout in seconds to wait for a response from the server\nlet g:OmniSharp_timeout = 5\n\n" Don\'t autoselect first omnicomplete option, show options even if there is only\n" one (so the preview documentation is accessible). Remove \'preview\' if you\n" don\'t want to see any documentation whatsoever.\nset completeopt=longest,menuone,preview\n\n" Fetch full documentation during omnicomplete requests.\n" By default, only Type/Method signatures are fetched. Full documentation can\n" still be fetched when you need it with the :OmniSharpDocumentation command.\n"let g:omnicomplete_fetch_full_documentation = 1\n\n" Set desired preview window height for viewing documentation.\n" You might also want to look at the echodoc plugin.\nset previewheight=5\n\n" Tell ALE to use OmniSharp for linting C# files, and no other linters.\nlet g:ale_linters = { \'cs\': [\'OmniSharp\'] }\n\n" Update semantic highlighting after all text changes\nlet g:OmniSharp_highlight_types = 3\n" Update semantic highlighting on BufEnter and InsertLeave\n" let g:OmniSharp_highlight_types = 2\n\naugroup omnisharp_commands\n    autocmd!\n\n    " Show type information automatically when the cursor stops moving\n    autocmd CursorHold *.cs call OmniSharp#TypeLookupWithoutDocumentation()\n\n    " The following commands are contextual, based on the cursor position.\n    autocmd FileType cs nnoremap <buffer> gd :OmniSharpGotoDefinition<CR>\n    autocmd FileType cs nnoremap <buffer> <Leader>fi :OmniSharpFindImplementations<CR>\n    autocmd FileType cs nnoremap <buffer> <Leader>fs :OmniSharpFindSymbol<CR>\n    autocmd FileType cs nnoremap <buffer> <Leader>fu :OmniSharpFindUsages<CR>\n\n    " Finds members in the current buffer\n    autocmd FileType cs nnoremap <buffer> <Leader>fm :OmniSharpFindMembers<CR>\n\n    autocmd FileType cs nnoremap <buffer> <Leader>fx :OmniSharpFixUsings<CR>\n    autocmd FileType cs nnoremap <buffer> <Leader>tt :OmniSharpTypeLookup<CR>\n    autocmd FileType cs nnoremap <buffer> <Leader>dc :OmniSharpDocumentation<CR>\n    autocmd FileType cs nnoremap <buffer> <C-\\> :OmniSharpSignatureHelp<CR>\n    autocmd FileType cs inoremap <buffer> <C-\\> <C-o>:OmniSharpSignatureHelp<CR>\n\n    " Navigate up and down by method/property/field\n    autocmd FileType cs nnoremap <buffer> <C-k> :OmniSharpNavigateUp<CR>\n    autocmd FileType cs nnoremap <buffer> <C-j> :OmniSharpNavigateDown<CR>\n\n    " Find all code errors/warnings for the current solution and populate the quickfix window\n    autocmd FileType cs nnoremap <buffer> <Leader>cc :OmniSharpGlobalCodeCheck<CR>\naugroup END\n\n" Contextual code actions (uses fzf, CtrlP or unite.vim when available)\nnnoremap <Leader><Space> :OmniSharpGetCodeActions<CR>\n" Run code actions with text selected in visual mode to extract method\nxnoremap <Leader><Space> :call OmniSharp#GetCodeActions(\'visual\')<CR>\n\n" Rename with dialog\nnnoremap <Leader>nm :OmniSharpRename<CR>\nnnoremap <F2> :OmniSharpRename<CR>\n" Rename without dialog - with cursor on the symbol to rename: `:Rename newname`\ncommand! -nargs=1 Rename :call OmniSharp#RenameTo("<args>")\n\nnnoremap <Leader>cf :OmniSharpCodeFormat<CR>\n\n" Start the omnisharp server for the current solution\nnnoremap <Leader>ss :OmniSharpStartServer<CR>\nnnoremap <Leader>sp :OmniSharpStopServer<CR>\n\n" Enable snippet completion\n" let g:OmniSharp_want_snippet=1\n```\n\n## Contributing\n\nPull requests welcome!\n\nWe have slack room as well. [Get yourself invited](https://omnisharp.herokuapp.com/) and make sure to join the `#vim` channel.\n'