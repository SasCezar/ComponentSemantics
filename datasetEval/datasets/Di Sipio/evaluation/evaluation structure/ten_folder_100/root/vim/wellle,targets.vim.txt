b'## Introduction\n\n**Targets.vim** is a Vim plugin that adds various [text objects][textobjects]\nto give you more targets to [operate][operator] on.  It expands on the idea of\nsimple commands like `di\'` (delete inside the single quotes around the cursor)\nto give you more opportunities to craft powerful commands that can be\n[repeated][repeat] reliably. One major goal is to handle all corner cases\ncorrectly.\n\n## Table of Contents\n\n<details>\n<summary>Click here to show.</summary>\n\n<!-- BEGIN-MARKDOWN-TOC -->\n\n* [Installation](#installation)\n* [Examples](#examples)\n* [Overview](#overview)\n\t* [Pair Text Objects](#pair-text-objects)\n\t\t* [In Pair](#in-pair)\n\t\t* [A Pair](#a-pair)\n\t\t* [Inside Pair](#inside-pair)\n\t\t* [Around Pair](#around-pair)\n\t\t* [Next and Last Pair](#next-and-last-pair)\n\t\t* [Pair Seek](#pair-seek)\n\t* [Quote Text Objects](#quote-text-objects)\n\t\t* [In Quote](#in-quote)\n\t\t* [A Quote](#a-quote)\n\t\t* [Inside Quote](#inside-quote)\n\t\t* [Around Quote](#around-quote)\n\t\t* [Next and Last Quote](#next-and-last-quote)\n\t\t* [Quote Seek](#quote-seek)\n\t* [Separator Text Objects](#separator-text-objects)\n\t\t* [In Separator](#in-separator)\n\t\t* [A Separator](#a-separator)\n\t\t* [Inside Separator](#inside-separator)\n\t\t* [Around Separator](#around-separator)\n\t\t* [Next and Last Separator](#next-and-last-separator)\n\t\t* [Separator Seek](#separator-seek)\n\t* [Argument Text Objects](#argument-text-objects)\n\t\t* [In Argument](#in-argument)\n\t\t* [An Argument](#an-argument)\n\t\t* [Inside Argument](#inside-argument)\n\t\t* [Around Argument](#around-argument)\n\t\t* [Next and Last Argument](#next-and-last-argument)\n\t\t* [Argument Seek](#argument-seek)\n\t* [Multi Text Objects](#multi-text-objects)\n\t\t* [Any Block](#any-block)\n\t\t* [Any Quote](#any-quote)\n* [Settings](#settings)\n\t* [g:targets_aiAI](#gtargets_aiai)\n\t* [g:targets_mapped_aiAI](#gtargets_mapped_aiai)\n\t* [g:targets_nl](#gtargets_nl)\n\t* [g:targets_seekRanges](#gtargets_seekranges)\n\t* [g:targets_jumpRanges](#gtargets_jumpranges)\n\t* [g:targets_gracious](#gtargets_gracious)\n\t* [targets#mappings#extend](#targets#mappings#extend)\n* [Notes](#notes)\n* [Issues](#issues)\n* [Todos](#todos)\n\n</details>\n\n<!-- END-MARKDOWN-TOC -->\n\n## Installation\n\n| Plugin Manager         | Command                                                                       |\n|------------------------|-------------------------------------------------------------------------------|\n| [NeoBundle][neobundle] | `NeoBundle \'wellle/targets.vim\'`                                              |\n| [Vundle][vundle]       | `Bundle \'wellle/targets.vim\'`                                                 |\n| [Vim-plug][vim-plug]   | `Plug \'wellle/targets.vim\'`                                                   |\n| [Pathogen][pathogen]   | `git clone git://github.com/wellle/targets.vim.git ~/.vim/bundle/targets.vim` |\n| [Dein][dein]\t\t     | `call dein#add(\'wellle/targets.vim\')`\t\t\t\t\t                     |\n\n## Examples\n\nThe following examples are displayed as three lines each. The top line denotes\ncursor positions from where the presented command works. The middle line shows\nthe contents of the example line that we\'re working on. The last line shows the\npart of the line that the command will operate on.\n\nTo change the text in the next pair of parentheses, use the `cin)` command\n\n```\ncursor position \xe2\x94\x82    .....................\nbuffer line     \xe2\x94\x82    This is example text (with a pair of parentheses).\nselection       \xe2\x94\x82                          \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80 cin) \xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x98\n```\n\nTo delete the item in a comma separated list under the cursor, use `da,`\n\n```\ncursor position \xe2\x94\x82                                  .........\nbuffer line     \xe2\x94\x82    Shopping list: oranges, apples, bananas, tomatoes\nselection       \xe2\x94\x82                                  \xe2\x94\x94\xe2\x94\x80 da, \xe2\x94\x80\xe2\x94\x98\n```\n\nNotice how the selection includes exactly one of the surrounding commas to\nleave a proper comma separated list behind.\n\n## Overview\n\nTargets.vim comes with five kinds for text objects:\n\n- Pair text objects\n- Quote text objects\n- Separator text objects\n- Argument text objects\n- Tag text objects\n\nEach of those kinds is implemented by a targets source. Third party plugins can\nprovide additional sources to add even more text objects which behave like the\nbuilt in ones. See [plugins][Plugins] for details on how to implement your own\ntargets source.\n\n### Pair Text Objects\n\nThese text objects are similar to the built in text objects such as `i)`.\nSupported trigger characters:\n\n- `(` `)` (work on parentheses)\n- `{` `}` `B` (work on curly braces)\n- `[` `]` (work on square brackets)\n- `<` `>` (work on angle brackets)\n- `t` (work on tags)\n\nPair text objects work over multiple lines and support seeking. See below for\ndetails about seeking.\n\nThe following examples will use parentheses, but they all work for each listed\ntrigger character accordingly.\n\n#### In Pair\n\n`i( i) i{ i} iB i[ i] i< i> it`\n\n- Select inside of pair characters.\n- This overrides Vim\'s default text object to allow seeking for the next pair\n  in the current line to the right or left when the cursor is not inside a\n  pair. This behavior is similar to Vim\'s seeking behavior of `di\'` when not\n  inside of quotes, but it works both ways.\n- Accepts a count to select multiple blocks.\n\n```\n      ............\na ( b ( cccccccc ) d ) e\n   \xe2\x94\x82   \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 i) \xe2\x94\x80\xe2\x94\x80\xe2\x94\x98   \xe2\x94\x82\n   \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80 2i) \xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x98\n```\n\n#### A Pair\n\n`a( a) a{ a} aB a[ a] a< a> at`\n\n- Select a pair including pair characters.\n- Overrides Vim\'s default text object to allow seeking.\n- Accepts a count.\n\n```\n      ............\na ( b ( cccccccc ) d ) e\n  \xe2\x94\x82   \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80 a) \xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x98   \xe2\x94\x82\n  \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80 2a) \xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x98\n```\n\n#### Inside Pair\n\n`I( I) I{ I} IB I[ I] I< I> It`\n\n- Select contents of pair characters.\n- Like inside of parentheses, but exclude whitespace at both ends. Useful for\n  changing contents while preserving spacing.\n- Accepts a count.\n\n```\n      ............\na ( b ( cccccccc ) d ) e\n    \xe2\x94\x82   \xe2\x94\x94\xe2\x94\x80 I) \xe2\x94\x80\xe2\x94\x98   \xe2\x94\x82\n    \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80 2I) \xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x98\n```\n\n#### Around Pair\n\n`A( A) A{ A} AB A[ A] A< A> At`\n\n- Select around pair characters.\n- Like a pair, but include whitespace at one side of the pair. Prefers to\n  select trailing whitespace, falls back to select leading whitespace.\n- Accepts a count.\n\n```\n      ............\na ( b ( cccccccc ) d ) e\n  \xe2\x94\x82   \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80 A) \xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x98   \xe2\x94\x82\n  \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80 2A) \xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x98\n```\n\n#### Next and Last Pair\n\n`in( an( In( An( il( al( Il( Al( ...`\n\nWork directly on distant pairs without moving there separately.\n\nAll the above pair text objects can be shifted to the next pair by\nincluding the letter `n`. The command `in)` selects inside of the next\npair. Use the letter `l` instead to work on the previous (last) pair. Uses\na count to skip multiple pairs. Skipping works over multiple lines.\n\nSee our [Cheat Sheet][cheatsheet] for two charts summarizing all pair mappings.\n\n#### Pair Seek\n\nIf any of the normal pair commands (not containing `n` or `l`) is executed when\nthe cursor is not positioned inside a pair, it seeks for pairs before or after\nthe cursor by searching for the appropriate delimiter on the current line. This\nis similar to using the explicit version containing `n` or `l`, but in only\nseeks on the current line.\n\n### Quote Text Objects\n\nThese text objects are similar to the built in text objects such as `i\'`.\nSupported trigger characters:\n\n- `\'`     (work on single quotes)\n- `"`     (work on double quotes)\n- `` ` `` (work on back ticks)\n\nThese quote text objects try to be smarter than the default ones. They count\nthe quotation marks from the beginning of the line to decide which of these are\nthe beginning of a quote and which ones are the end.\n\nIf you type `ci"` on the `,` in the example below, it will automatically skip\nand change `world` instead of changing `,` between `hello` and `world`.\n\n```\nbuffer \xe2\x94\x82 join("hello", "world")\nproper \xe2\x94\x82      \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x98  \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x98\nfalse  \xe2\x94\x82            \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80\xe2\x94\x98\n```\n\nQuote text objects work over multiple lines and support seeking. See below for\ndetails about seeking.\n\nThe following examples will use single quotes, but they all work for each\nmentioned separator character accordingly.\n\n#### In Quote\n\n`` i\' i" i` ``\n\n- Select inside quote.\n- This overrides Vim\'s default text object to allow seeking in both directions.\n\n```\n  ............\na \' bbbbbbbb \' c \' d \' e\n   \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 i\' \xe2\x94\x80\xe2\x94\x80\xe2\x94\x98\n```\n\n#### A Quote\n\n``a\' a" a` ``\n\n- Select a quote.\n- This overrides Vim\'s default text object to support seeking.\n- Unlike Vim\'s quote text objects, this incudes no surrounding whitespace.\n\n```\n  ............\na \' bbbbbbbb \' c \' d \' e\n  \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80 a\' \xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x98\n```\n\n#### Inside Quote\n\n``I\' I" I` ``\n\n- Select contents of a quote.\n- Like inside quote, but exclude whitespace at both ends. Useful for changing\n  contents while preserving spacing.\n\n```\n  ............\na \' bbbbbbbb \' c \' d \' e\n    \xe2\x94\x94\xe2\x94\x80 I\' \xe2\x94\x80\xe2\x94\x98\n```\n\n#### Around Quote\n\n``A\' A" A` ``\n\n- Select around a quote.\n- Like a quote, but include whitespace in one direction. Prefers to select\n  trailing whitespace, falls back to select leading whitespace.\n\n```\n  ............\na \' bbbbbbbb \' c \' d \' e\n  \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80 A\' \xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x98\n```\n\n#### Next and Last Quote\n\n`in\' In\' An\' il\' Il\' Al\' ...`\n\nWork directly on distant quotes without moving there separately.\n\nAll the above pair text objects can be shifted to the next quote by\nincluding the letter `n`. The command `in\'` selects inside of the next\nsingle quotes. Use the letter `l` instead to work on the previous (last)\nquote. Uses a count to skip multiple quotation characters.\n\nSee our [Cheat Sheet][cheatsheet] for a chart summarizing all quote mappings.\n\n#### Quote Seek\n\nIf any of the normal quote commands (not containing `n` or `l`) is executed\nwhen the cursor is not positioned inside a quote, it seeks for quotes before or\nafter the cursor by searching for the appropriate delimiter on the current\nline. This is similar to using the explicit version containing `n` or `l`.\n\n### Separator Text Objects\n\nThese text objects are based on single separator characters like the comma in\none of our examples above. The text between two instances of the separator\ncharacter can be operated on with these targets.\n\nSupported separators:\n\n```\n, . ; : + - = ~ _ * # / | \\ & $\n```\n\nSeparator text objects work over multiple lines and support seeking.\n\nThe following examples will use commas, but they all work for each listed\nseparator character accordingly.\n\n#### In Separator\n\n`i, i. i; i: i+ i- i= i~ i_ i* i# i/ i| i\\ i& i$`\n\n- Select inside separators. Similar to in quote.\n\n```\n      ...........\na , b , cccccccc , d , e\n       \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 i, \xe2\x94\x80\xe2\x94\x80\xe2\x94\x98\n```\n\n#### A Separator\n\n`a, a. a; a: a+ a- a= a~ a_ a* a# a/ a| a\\ a& a$`\n\n- Select an item in a list separated by the separator character.\n- Includes the leading separator, but excludes the trailing one. This leaves\n  a proper list separated by the separator character after deletion. See the\n  examples above.\n\n```\n      ...........\na , b , cccccccc , d , e\n      \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80 a, \xe2\x94\x80\xe2\x94\x80\xe2\x94\x98\n```\n\n#### Inside Separator\n\n`I, I. I; I: I+ I- I= I~ I_ I* I# I/ I| I\\ I& I$`\n\n- Select contents between separators.\n- Like inside separators, but exclude whitespace at both ends. Useful for\n  changing contents while preserving spacing.\n\n```\n      ...........\na , b , cccccccc , d , e\n        \xe2\x94\x94\xe2\x94\x80 I, \xe2\x94\x80\xe2\x94\x98\n```\n\n#### Around Separator\n\n`A, A. A; A: A+ A- A= A~ A_ A* A# A/ A| A\\ A& A$`\n\n- Select around a pair of separators.\n- Includes both separators and a surrounding whitespace, similar to `a\'` and\n  `A(`.\n\n```\n      ...........\na , b , cccccccc , d , e\n      \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80 A, \xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x98\n```\n\n#### Next and Last Separator\n\n`in, an, In, An, il, al, Il, Al, ...`\n\nWork directly on distant separators without moving there separately.\n\nAll the above separator text objects can be shifted to the next separator by\nincluding the letter `n`. The command `in,` selects inside of the next commas.\nUse the letter `l` instead to work on the previous (last) separators. Uses the\ncount to skip multiple separator characters.\n\nSee our [Cheat Sheet][cheatsheet] for a chart summarizing all separator mappings.\n\n#### Separator Seek\n\nLike quote seeking. If any of the normal separator commands (not\ncontaining `n` or `l`) is executed when the cursor is not positioned inside a\npair of separators, it seeks for the separator before or after the cursor.\nThis is similar to using the explicit version containing `n` or `l`.\n\n### Argument Text Objects\n\nThese text objects are similar to separator text objects, but are specialized\nfor arguments surrounded by braces and commas. They also take matching braces\ninto account to capture only valid arguments.\n\nArgument text objects work over multiple lines and support seeking.\n\n#### In Argument\n\n`ia`\n\n- Select inside arguments. Similar to in quote.\n- Accepts a count.\n\n```\n      ...........\na , b ( cccccccc , d ) e\n       \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80 ia \xe2\x94\x80\xe2\x94\x80\xe2\x94\x98\n```\n\n#### An Argument\n\n`aa`\n\n- Select an argument in a list of arguments.\n- Includes a separator if preset, but excludes surrounding braces. This leaves\n  a proper argument list after deletion.\n- Accepts a count.\n\n```\n      ...........\na , b ( cccccccc , d ) e\n        \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80 aa \xe2\x94\x80\xe2\x94\x80\xe2\x94\x98\n```\n\n#### Inside Argument\n\n`Ia`\n\n- Select content of an argument.\n- Like inside separators, but exclude whitespace at both ends. Useful for\n  changing contents while preserving spacing.\n- Accepts a count.\n\n```\n      ...........\na , b ( cccccccc , d ) e\n        \xe2\x94\x94\xe2\x94\x80 Ia \xe2\x94\x80\xe2\x94\x98\n```\n\n#### Around Argument\n\n`Aa`\n\n- Select around an argument.\n- Includes both delimiters and a surrounding whitespace, similar to `a\'` and\n  `A(`.\n- Accepts a count.\n\n```\n      ...........\na , b ( cccccccc , d ) e\n      \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80 Aa \xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x98\n```\n\n#### Next and Last Argument\n\n`ina ana Ina Ana ila ala Ila Ala`\n\nWork directly on distant arguments without moving there separately.\n\nAll the above argument text objects can be shifted to the next argument by\nincluding the letter `n`. The command `ina` selects inside of the next\nargument. Use the letter `l` instead to work on the previous (last) argument.\nUses a [count] to skip multiple argument characters. The order is determined by\nthe nearest surrounding argument delimiter.\n\nSee our [Cheat Sheet][cheatsheet] for a chart summarizing all argument mappings.\n\n#### Argument Seek\n\nLike separator seeking. If any of the normal argument commands (not containing\n`n` or `l`) is executed when the cursor is not positioned inside an argument,\nit seeks for the argument before or after the cursor. This is similar to using\nthe explicit version containing `n` or `l`.\n\n### Multi Text Objects\n\nTwo multi text objects are included in default settings. See the section on\nsettings below to see how to set up other similar multi text objects or\ncustomize the built in ones.\n\n#### Any Block\n\n`inb anb Inb Anb ilb alb Ilb Alb`\n\nSimilar to pair text objects, if you type `dib` within `()` it will delete in\nthese. If you do the same within `{}` it will delete in those. If you type\n`d2inb` it will skip one next pair (any kind) and delete in the one after (any\nkind). If you\'re within `()` nested in `{}`, type `d2ib` to delete in `{}`. All\nof the usual seeking, growing and skipping works.\n\n#### Any Quote\n\n`inq anq Inq Anq ilq alq Ilq Alq`\n\nSimilar to quote text objects, if you type `diq` within `""` it will delete in\nthese. If you do the same within `\'\'` it will delete in those. If you type\n`d2inq` it will skip one next quote text object (any kind) and delete in the\none after (any kind). If you\'re within `""` nested in `\'\'`, type `d2iq` to\ndelete in `\'\'`. All of the usual seeking, growing and skipping works.\n\n## Settings\n\nYou can customize the mappings and text objects with the settings described\nhere.\n\n### g:targets_aiAI\n\nDefault:\n\n```vim\nlet g:targets_aiAI = \'aiAI\'\n```\n\nControls the normal mode operator mode maps that get created for In Pair (`i`),\nA Pair (`a`), Inside Pair (`I`), and Around Pair (`A`). Required to be a 4\ncharacter long list. Use a space to deactivate a mode.\n\n### g:targets_mapped_aiAI\n\nDefault:\n\n```vim\nlet g:targets_mapped_aiAI = g:targets_aiAI\n```\n\nIf you can\'t get your g:targets_aiAI settings to work because they conflict\nwith other mappings you have, you might need to use g:targets_mapped_aiAI. For\nexample if you want to map `k` to `i` and use `k` as `i` in targets mappings,\nyou need to NOT map `k` to `i` in operator pending mode, and set\n`g:targets_aiAI = \'akAI\'` and `g:targets_mapped_aiAI = \'aiAI\'`.\n\nFor more details see issue #213 and don\'t hesitate to comment there or open a\nnew issue if you need assistance.\n\n### g:targets_nl\n\nDefault:\n\n```vim\nlet g:targets_nl = \'nl\'\n```\n\nControls the keys used in maps for seeking next and last text objects. For\nexample, if you want `n` to always search for the next object and `N` to search\nfor the last, you could set:\n\n```vim\nlet g:targets_nl = \'nN\'\n```\n\nRequired to be a 2 character long list. Use a space to deactivate a direction.\n\n### g:targets_seekRanges\n\nDefault:\n\n```vim\nlet g:targets_seekRanges = \'cc cr cb cB lc ac Ac lr rr ll lb ar ab lB Ar aB Ab AB rb al rB Al bb aa bB Aa BB AA\'\n```\n\nDefines a priority ordered, space separated list of range types which can be\nused to customize seeking behavior.\n\nThe default setting generally prefers targets around the cursor, with one\nexception: If the target around the cursor is not contained in the current\ncursor line, but the next or last target are, then prefer those. Targets\nbeginning or ending on the cursor are preferred over everything else.\n\nSome other useful example settings:\n\nPrefer multiline targets around cursor over distant targets within cursor line:\n```vim\nlet g:targets_seekRanges = \'cc cr cb cB lc ac Ac lr lb ar ab lB Ar aB Ab AB rr ll rb al rB Al bb aa bB Aa BB AA\'\n```\n\nNever seek backwards:\n```vim\nlet g:targets_seekRanges = \'cc cr cb cB lc ac Ac lr rr lb ar ab lB Ar aB Ab AB rb rB bb bB BB\'\n```\n\nOnly seek if next/last targets touch current line:\n```vim\nlet g:targets_seekRanges = \'cc cr cb cB lc ac Ac lr rr ll lb ar ab lB Ar aB Ab AB rb rB al Al\'\n```\n\nOnly consider targets fully visible on screen:\n```vim\nlet g:targets_seekRanges = \'cc cr cb cB lc ac Ac lr lb ar ab rr rb bb ll al aa\'\n```\n\nOnly consider targets around cursor:\n```vim\nlet g:targets_seekRanges = \'cc cr cb cB lc ac Ac lr lb ar ab lB Ar aB Ab AB\'\n```\n\nOnly consider targets fully contained in current line:\n```vim\nlet g:targets_seekRanges = \'cc cr cb cB lc ac Ac lr rr ll\'\n```\n\nIf you want to build your own, or are just curious what those cryptic letters\nmean, check out the full documentation in our [Cheat Sheet][cheatsheet].\n\n### g:targets_jumpRanges\n\nDefault:\n\n```vim\nlet g:targets_jumpRanges = \'bb bB BB aa Aa AA\'\n```\n\nDefines an unordered, space separated list of range types which can be used to\ncustomize the jumplist behavior (see documentation on seek ranges). It\ncontrols whether or not to add the cursor position prior to selecting the text\nobject to the jumplist.\n\nThe default setting adds the previous cursor position to the jumplist if the\ntarget that was operated on doesn\'t intersect the cursor line. That means it\nadds a jumplist entry if the target ends above the cursor line or starts below\nthe cursor line.\n\nSome other useful example settings (or build your own!):\n\nNever add cursor position to jumplist:\n```vim\nlet g:targets_jumpRanges = \'\'\n```\n\nAlways add cursor position to jumplist:\n```vim\nlet g:targets_jumpRanges = \'cr cb cB lc ac Ac lr rr ll lb ar ab lB Ar aB Ab AB rb al rB Al bb aa bB Aa BB AA\'\n```\n\nOnly add to jumplist if cursor was not inside the target:\n```vim\nlet g:targets_jumpRanges = \'rr rb rB bb bB BB ll al Al aa Aa AA\'\n```\n\n### g:targets_gracious\n\nDefault:\n\n```vim\nlet g:targets_gracious = 0\n```\n\nIf enabled (set to `1`) , both growing and seeking will work on the largest\navailable count if a too large count is given. For example:\n\n- `v100ab` will select the most outer block around the cursor\n- `v100inq` will select the most distant quote to the right/down\n  (the last one in the file)\n\n### targets#mappings#extend\n\nThis function can be used to modify an internal dictionary used to control the\nmappings. The default value of that dictionary is:\n\n```vim\n{\n    \\ \'(\': {\'pair\': [{\'o\': \'(\', \'c\': \')\'}]},\n    \\ \')\': {\'pair\': [{\'o\': \'(\', \'c\': \')\'}]},\n    \\ \'{\': {\'pair\': [{\'o\': \'{\', \'c\': \'}\'}]},\n    \\ \'}\': {\'pair\': [{\'o\': \'{\', \'c\': \'}\'}]},\n    \\ \'B\': {\'pair\': [{\'o\': \'{\', \'c\': \'}\'}]},\n    \\ \'[\': {\'pair\': [{\'o\': \'[\', \'c\': \']\'}]},\n    \\ \']\': {\'pair\': [{\'o\': \'[\', \'c\': \']\'}]},\n    \\ \'<\': {\'pair\': [{\'o\': \'<\', \'c\': \'>\'}]},\n    \\ \'>\': {\'pair\': [{\'o\': \'<\', \'c\': \'>\'}]},\n    \\ \'"\': {\'quote\': [{\'d\': \'"\'}]},\n    \\ "\'": {\'quote\': [{\'d\': "\'"}]},\n    \\ \'`\': {\'quote\': [{\'d\': \'`\'}]},\n    \\ \',\': {\'separator\': [{\'d\': \',\'}]},\n    \\ \'.\': {\'separator\': [{\'d\': \'.\'}]},\n    \\ \';\': {\'separator\': [{\'d\': \';\'}]},\n    \\ \':\': {\'separator\': [{\'d\': \':\'}]},\n    \\ \'+\': {\'separator\': [{\'d\': \'+\'}]},\n    \\ \'-\': {\'separator\': [{\'d\': \'-\'}]},\n    \\ \'=\': {\'separator\': [{\'d\': \'=\'}]},\n    \\ \'~\': {\'separator\': [{\'d\': \'~\'}]},\n    \\ \'_\': {\'separator\': [{\'d\': \'_\'}]},\n    \\ \'*\': {\'separator\': [{\'d\': \'*\'}]},\n    \\ \'#\': {\'separator\': [{\'d\': \'#\'}]},\n    \\ \'/\': {\'separator\': [{\'d\': \'/\'}]},\n    \\ \'\\\': {\'separator\': [{\'d\': \'\\\'}]},\n    \\ \'|\': {\'separator\': [{\'d\': \'|\'}]},\n    \\ \'&\': {\'separator\': [{\'d\': \'&\'}]},\n    \\ \'$\': {\'separator\': [{\'d\': \'$\'}]},\n    \\ \'t\': {\'tag\': [{}]},\n    \\ \'a\': {\'argument\': [{\'o\': \'[([]\', \'c\': \'[])]\', \'s\': \',\'}]},\n    \\ \'b\': {\'pair\': [{\'o\':\'(\', \'c\':\')\'}, {\'o\':\'[\', \'c\':\']\'}, {\'o\':\'{\', \'c\':\'}\'}]},\n    \\ \'q\': {\'quote\': [{\'d\':"\'"}, {\'d\':\'"\'}, {\'d\':\'`\'}]},\n    \\ }\n```\n\nThe keys in this dictionary correspond to the trigger character. For example if\nyou type `di(`, `(` is the trigger and gets mapped to the `pair` target source\nwith arguments `\'o\':\'(\'` (opening) and `\'c\':\')\'` (closing). Sources `quote` and\n`separator` have argument `\'d\'` (delimiter), `tag` has no arguments and\n`argument` text objects take `\'o\'` (opening), `\'c\'` (closing) and `\'s\'`\n(separator). Notably the `b` (any block) and `q` (any quote) triggers map to\none source with three sets of `pair` and `quote` argument dictionaries\nrespectively.  That means if you type `dib` each of those sources get taken\ninto account to pick the proper target. Also note that it\'s even possible to\nhave one target mapped to multiple different sources, so you can select any of\nthose different text objects (see example below).\n\nYou can use the `targets#mappings#extend()` function to modify these internal\nmappings. For example if you wanted to switch `b` back to the Vim default\nbehavior of operating on parentheses only, you can add this to your vimrc:\n\n```vim\nautocmd User targets#mappings#user call targets#mappings#extend({\n    \\ \'b\': {\'pair\': [{\'o\':\'(\', \'c\':\')\'}]}\n    \\ })\n```\n\nNote that you should always use that `autocmd` prefix to make sure your\nmodifications get applied at the right time. There\'s a similar autogroup for\nplugins which can add other sources and default mappings, which gets triggered\nbefore this `#user` one. That way the user mappings always take precedence over\nthe plugins default mappings\n\nIf you want to remove a mapping from the defaults, just set it to an empty list\nof sources:\n\n```vim\nautocmd User targets#mappings#user call targets#mappings#extend({\n    \\ \'q\': {},\n    \\ })\n```\n\nThat way targets.vim will ignore it and fall back to Vim default behavior,\nwhich for the case of `q` does nothing.\n\nFinally here\'s a more complex example which adds two triggers `s` (any\nseparator text object) and `@` (anything at all). So you could type `das` to\ndelete the closest separator text object near the cursor, or `da@` to operate\non the closest text object available via targets.vim. All of those support\nseeking and counts like `d3ins`.\n\n```vim\nautocmd User targets#mappings#user call targets#mappings#extend({\n    \\ \'s\': { \'separator\': [{\'d\':\',\'}, {\'d\':\'.\'}, {\'d\':\';\'}, {\'d\':\':\'}, {\'d\':\'+\'}, {\'d\':\'-\'},\n    \\                      {\'d\':\'=\'}, {\'d\':\'~\'}, {\'d\':\'_\'}, {\'d\':\'*\'}, {\'d\':\'#\'}, {\'d\':\'/\'},\n    \\                      {\'d\':\'\\\'}, {\'d\':\'|\'}, {\'d\':\'&\'}, {\'d\':\'$\'}] },\n    \\ \'@\': {\n    \\     \'separator\': [{\'d\':\',\'}, {\'d\':\'.\'}, {\'d\':\';\'}, {\'d\':\':\'}, {\'d\':\'+\'}, {\'d\':\'-\'},\n    \\                   {\'d\':\'=\'}, {\'d\':\'~\'}, {\'d\':\'_\'}, {\'d\':\'*\'}, {\'d\':\'#\'}, {\'d\':\'/\'},\n    \\                   {\'d\':\'\\\'}, {\'d\':\'|\'}, {\'d\':\'&\'}, {\'d\':\'$\'}],\n    \\     \'pair\':      [{\'o\':\'(\', \'c\':\')\'}, {\'o\':\'[\', \'c\':\']\'}, {\'o\':\'{\', \'c\':\'}\'}, {\'o\':\'<\', \'c\':\'>\'}],\n    \\     \'quote\':     [{\'d\':"\'"}, {\'d\':\'"\'}, {\'d\':\'`\'}],\n    \\     \'tag\':       [{}],\n    \\     },\n    \\ })\n```\n\nAlso note how this example shows that you can set multiple triggers in a single\n`targets#mappings#extend()` call. To keep the autocmd overhead minimal I\'d\nrecommend to keep all your mappings setup in a single such call.\n\n### Deprecated settings\n\nIf you have set any of the following settings in your vimrc, they will still be\nrespected when creating the default mappings dictionary. But it\'s not possible\nto set up any multi source targets (like any block or any quote) this way. It\'s\nrecommended to retire those legacy settings and use `targets#mappings#extend()`\nas described above.\n\n```vim\ng:targets_pairs\ng:targets_quotes\ng:targets_separators\ng:targets_tagTrigger\ng:targets_argClosing\ng:targets_argOpening\ng:targets_argSeparator\ng:targets_argTrigger\n```\n\nHowever, those new mappings settings will only be respected when targets.vim\ncan use expression mappings, which need Neovim or Vim with version 7.3.338 or\nlater. If you are using an older Vim version, these legacy settings are still\nthe only way to do any customization. Please refer to an older version of this\nREADME (before October 2018) for details. Or open an issue for me to describe\nthose legacy settings somewhere still.\n\n## Notes\n\n- [Repeating an operator-pending mapping forgets its last count.][repeatcount]\n    Works since Vim 7.4.160\n\n## Issues\n\n- [Empty matches can\'t be selected because it is not possible to visually select\n  zero-character ranges.][emptyrange]\n- Forcing motion to work linewise by inserting `V` in `dVan(` doesn\'t work\n  for operator-pending mappings. [See `:h o_v`][o_v].\n- Report issues or submit pull requests to\n  [github.com/wellle/targets.vim][targets].\n\n## Todos\n\nCreate more mappings to support commands like `danw` or `danp` to delete the\nnext word or paragraph.\n\n[plugins]: plugins.md\n[cheatsheet]: cheatsheet.md\n[textobjects]: http://vimdoc.sourceforge.net/htmldoc/motion.html#text-objects\n[operator]: http://vimdoc.sourceforge.net/htmldoc/motion.html#operator\n[repeat]: http://vimdoc.sourceforge.net/htmldoc/repeat.html#single-repeat\n[neobundle]: https://github.com/Shougo/neobundle.vim\n[vundle]: https://github.com/gmarik/vundle\n[vim-plug]: https://github.com/junegunn/vim-plug\n[pathogen]: https://github.com/tpope/vim-pathogen\n[dein]: https://github.com/Shougo/dein.vim\n[repeatcount]: https://groups.google.com/forum/?fromgroups#!topic/vim_dev/G4SSgcRVN7g\n[emptyrange]: https://groups.google.com/forum/#!topic/vim_use/qialxUwdcMc\n[targets]: https://github.com/wellle/targets.vim\n[o_v]: http://vimdoc.sourceforge.net/htmldoc/motion.html#o_v\n'