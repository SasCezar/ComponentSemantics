b'# vim-lsp [![Gitter](https://badges.gitter.im/vimlsp/community.svg)](https://gitter.im/vimlsp/community?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\n\nAsync [Language Server Protocol](https://github.com/Microsoft/language-server-protocol) plugin for vim8 and neovim.\n\n# Installing\n\n```viml\nPlug \'prabirshrestha/async.vim\'\nPlug \'prabirshrestha/vim-lsp\'\n```\n\n_Note: [async.vim](https://github.com/prabirshrestha/async.vim) is required and is used to normalize jobs between vim8 and neovim._\n\n## Registering servers\n\n**For other languages please refer to the [wiki](https://github.com/prabirshrestha/vim-lsp/wiki/Servers).**\n\n```viml\nif executable(\'pyls\')\n    " pip install python-language-server\n    au User lsp_setup call lsp#register_server({\n        \\ \'name\': \'pyls\',\n        \\ \'cmd\': {server_info->[\'pyls\']},\n        \\ \'whitelist\': [\'python\'],\n        \\ })\nendif\n```\n\nWhile most of the time it is ok to just set the `name`, `cmd` and `whitelist` there are times when you need to get more control of the `root_uri`. By default `root_uri` for the buffer can be found using `lsp#utils#get_default_root_uri()` which internaly uses `getcwd()`. Here is an example that sets the `root_uri` to the directory where it contains `tsconfig.json` and traverses up the directories automatically, if it isn\'t found it returns empty string which tells `vim-lsp` to start the server but don\'t initialize the server. If you would like to avoid starting the server you can return empty array for `cmd`.\n\n```vim\nif executable(\'typescript-language-server\')\n    au User lsp_setup call lsp#register_server({\n        \\ \'name\': \'typescript-language-server\',\n        \\ \'cmd\': {server_info->[&shell, &shellcmdflag, \'typescript-language-server --stdio\']},\n        \\ \'root_uri\':{server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), \'tsconfig.json\'))},\n        \\ \'whitelist\': [\'typescript\'],\n        \\ })\nendif\n```\n\nvim-lsp supports incremental changes of Language Server Protocol.\n\n## auto-complete\n\nRefer to docs on configuring omnifunc or [asyncomplete.vim](https://github.com/prabirshrestha/asyncomplete.vim).\n\n## Snippets\nvim-lsp does not support snippets by default. If you want snippet integration, you will first have to install a third-party snippet plugin and a plugin that integrates it in vim-lsp.\nAt the moment, you have two options:\n1. [UltiSnips](https://github.com/SirVer/ultisnips) together with [vim-lsp-ultisnips](https://github.com/thomasfaingnaert/vim-lsp-ultisnips)\n2. [neosnippet.vim](https://github.com/Shougo/neosnippet.vim) together with [vim-lsp-neosnippet](https://github.com/thomasfaingnaert/vim-lsp-neosnippet)\n\nFor more information, refer to the readme and documentation of the respective plugins.\n\n## Folding\n\nYou can let the language server automatically handle folding for you. To enable this, you have to set `\'foldmethod\'`, `\'foldexpr\'` and (optionally) `\'foldtext\'`:\n\n```vim\nset foldmethod=expr\n  \\ foldexpr=lsp#ui#vim#folding#foldexpr()\n  \\ foldtext=lsp#ui#vim#folding#foldtext()\n```\n\nIf you would like to disable folding globally, you can add this to your configuration:\n\n```vim\nlet g:lsp_fold_enabled = 0\n```\n\nAlso see `:h vim-lsp-folding`.\n\n## Supported commands\n\n**Note:**\n* Some servers may only support partial commands.\n* While it is possible to register multiple servers for the same filetype, some commands will pick only the first server that supports it. For example, it doesn\'t make sense for rename and format commands to be sent to multiple servers.\n\n| Command | Description|\n|--|--|\n|`:LspCodeAction`| Gets a list of possible commands that can be applied to a file so it can be fixed (quick fix) |\n|`:LspDeclaration`| Go to the declaration of the word under the cursor, and open in the current window |\n|`:LspDefinition`| Go to the definition of the word under the cursor, and open in the current window |\n|`:LspDocumentDiagnostics`| Get current document diagnostics information |\n|`:LspDocumentFormat`| Format entire document |\n|`:LspDocumentRangeFormat`| Format document selection |\n|`:LspDocumentSymbol`| Show document symbols |\n|`:LspHover`| Show hover information |\n|`:LspImplementation` | Show implementation of interface in the current window |\n|`:LspNextError`| jump to next error |\n|`:LspNextReference`| jump to next reference to the symbol under cursor |\n|`:LspPeekDeclaration`| Go to the declaration of the word under the cursor, but open in preview window |\n|`:LspPeekDefinition`| Go to the definition of the word under the cursor, but open in preview window |\n|`:LspPeekImplementation`| Go to the implementation of an interface, but open in preview window |\n|`:LspPeekTypeDefinition`| Go to the type definition of the word under the cursor, but open in preview window |\n|`:LspPreviousError`| jump to previous error |\n|`:LspPreviousReference`| jump to previous reference to the symbol under cursor |\n|`:LspReferences`| Find references |\n|`:LspRename`| Rename symbol |\n|`:LspStatus` | Show the status of the language server |\n|`:LspTypeDefinition`| Go to the type definition of the word under the cursor, and open in the current window |\n|`:LspWorkspaceSymbol`| Search/Show workspace symbol |\n\n### Diagnostics\n\nDocument diagnostics (e.g. warnings, errors) are enabled by default, but if you\npreferred to turn them off and use other plugins instead (like\n[Neomake](https://github.com/neomake/neomake) or\n[ALE](https://github.com/w0rp/ale), set `g:lsp_diagnostics_enabled` to\n`0`:\n\n```viml\nlet g:lsp_diagnostics_enabled = 0         " disable diagnostics support\n```\n\n#### Signs\n\n```viml\nlet g:lsp_signs_enabled = 1         " enable signs\nlet g:lsp_diagnostics_echo_cursor = 1 " enable echo under cursor when in normal mode\n```\n\nFour groups of signs are defined and used: `LspError`, `LspWarning`, `LspInformation`, `LspHint`. It is possible to set custom text or icon that will be used for each sign (note that icons are only available in GUI). To do this, set some of the following globals: `g:lsp_signs_error`, `g:lsp_signs_warning`, `g:lsp_signs_information`, `g:lsp_signs_hint`. They should be set to a dict, that contains either text that will be used as sign in terminal, or icon that will be used for GUI, or both. For example:\n\n```viml\nlet g:lsp_signs_error = {\'text\': \'\xe2\x9c\x97\'}\nlet g:lsp_signs_warning = {\'text\': \'\xe2\x80\xbc\', \'icon\': \'/path/to/some/icon\'} " icons require GUI\nlet g:lsp_signs_hint = {\'icon\': \'/path/to/some/other/icon\'} " icons require GUI\n```\n\nAlso two highlight groups for every sign group are defined (for example for LspError these are LspErrorText and LspErrorLine). By default, LspError text is highlighted using Error group, LspWarning is highlighted as Todo, others use Normal group. Line highlighting is not set by default. If your colorscheme of choise does not provide any of these, it is possible to clear them or link to some other group, like so:\n\n```viml\nhighlight link LspErrorText GruvboxRedSign " requires gruvbox\nhighlight clear LspWarningLine\n```\n\n#### Highlights\n\nHighlighting diagnostics requires either NeoVim 0.3+ or Vim with patch 8.1.0579.\nThey are enabled by default when supported, but can be turned off respectively by\n\n```viml\nlet g:lsp_highlights_enabled = 0\nlet g:lsp_textprop_enabled = 0\n```\n\nCan be customized by setting or linking `LspErrorHighlight`, `LspWarningHighlight`,\n`LspInformationHighlight` and `LspHintHighlight` highlight groups.\n\n#### Virtual text\n\nIn NeoVim 0.3 or newer you can use virtual text feature (enabled by default).\nYou can disable it by adding\n\n```viml\nlet g:lsp_virtual_text_enabled = 0\n```\n\nTo your configuration.\n\nVirtual text will use the same highlight groups as signs feature.\n\n### Highlight references\n\nHighlight references to the symbol under the cursor. To enable, set in your\nconfiguration:\n\n```viml\nlet g:lsp_highlight_references_enabled = 1\n```\n\nTo change the style of the highlighting, you can set or link the `lspReference`\nhighlight group, e.g.:\n\n```viml\nhighlight lspReference ctermfg=red guifg=red ctermbg=green guibg=green\n```\n\n## Debugging\n\nIn order to enable file logging set `g:lsp_log_file`.\n\n```vim\nlet g:lsp_log_verbose = 1\nlet g:lsp_log_file = expand(\'~/vim-lsp.log\')\n\n" for asyncomplete.vim log\nlet g:asyncomplete_log_file = expand(\'~/asyncomplete.log\')\n```\n'