b'# ctrlsf.vim\n\nAn ack/ag/pt/rg powered code search and view tool, takes advantage of Vim 8\'s power to support asynchronous searching, and lets you edit file in-place with *Edit Mode*.\n\n### Search and Explore\n\nA demo shows how to search a word in an asynchronous way.\n\n![ctrlsf async_demo](https://raw.githubusercontent.com/dyng/i/master/ctrlsf.vim/async-demo.gif)\n\n### Edit Mode\n\nA demo shows how to rename a method named `MoveCursor()` to `Cursor()` in multiple files, using [vim-multiple-cursors][7].\n\n![ctrlsf_edit_demo](https://raw.githubusercontent.com/dyng/i/master/ctrlsf.vim/edit-mode.gif)\n\n## Table of Contents\n\n- [Features](#features)\n- [Installation](#installation)\n- [Quick Start](#quick-start)\n- [Key Maps](#key-maps)\n- [Use Your Own Map](#use-your-own-map)\n- [Edit Mode](#edit-mode)\n  - [Limitation](#limitation)\n- [Arguments](#arguments)\n  - [Example](#example)\n- [Tips](#tips)\n- [Configuration](#configuration)\n- [For user comes from pre v1.0](#for-user-comes-from-pre-v10)\n  - [Difference between v1.0 and pre-v1.0](#difference-between-v10-and-pre-v10)\n  - [Where and why backward compatibility is given up?](#where-and-why-backward-compatibility-is-given-up)\n\n## Features\n\n- Search and display result in a user-friendly view with adjustable context.\n\n- Works in both asynchronous (for **Vim 8.0.1039+** and **NeoVim**) and synchronous (for older version of Vim) manner.\n\n- **Edit mode** which is incredible useful when you are working on project-wide refactoring. (Inspired by [vim-ags][6])\n\n- Preview mode for fast exploring.\n\n- Has two types of view. For both users who love a **sublime-like**, rich context result window, and users who feel more comfortable with good old **quickfix** window. (similar to ack.vim)\n\n- Various options for customized search, view and edition.\n\n## Installation\n\n1. Make sure you have [ack][1], [ag][2], [pt][8] or [rg][10] installed. (Note: currently only Ack2 is supported by plan)\n\n2. An easy way to install CtrlSF is using a package manager, like [pathogen][3], [vundle][4], [neobundle][5] or [vim-plug][9].\n\n    In vim-plug:\n\n    ```vim\n    Plug \'dyng/ctrlsf.vim\'\n    ```\n\n3. Read *Quick Start* for how to use.\n\n## Quick Start\n\n1. Run `:CtrlSF [pattern]`, it will split a new window to show search result.\n\n2. If you are doing an asynchronous searching, you can explore and edit other files in the meanwhile, and can always press `Ctrl-C` to stop searching.\n\n3. In the result window, press `Enter`/`o` to open corresponding file, or press `q` to quit.\n\n4. Press `p` to explore file in a preview window if you only want a glance.\n\n5. You can edit search result as you like. Whenever you apply a change, you can save your change to actual file by `:w`.\n\n6. If you change your mind after saving, you can always undo it by pressing `u` and saving it again.\n\n7. `:CtrlSFOpen` can reopen CtrlSF window when you have closed CtrlSF window. It is free because it won\'t invoke a same but new search. A handy command `:CtrlSFToggle` is also available.\n\n8. If you prefer a quickfix-like result window, just try to press `M` in CtrlSF window.\n\n## Key Maps\n\nIn CtrlSF window:\n\n- `Enter`, `o`, `double-click` - Open corresponding file of current line in the window which CtrlSF is launched from.\n- `<C-O>` - Like `Enter` but open file in a horizontal split window.\n- `t` - Like `Enter` but open file in a new tab.\n- `p` - Like `Enter` but open file in a preview window.\n- `P` - Like `Enter` but open file in a preview window and switch focus to it.\n- `O` - Like `Enter` but always leave CtrlSF window opening.\n- `T` - Like `t` but focus CtrlSF window instead of new opened tab.\n- `M` - Switch result window between **normal** view and **compact** view.\n- `q` - Quit CtrlSF window.\n- `<C-J>` - Move cursor to next match.\n- `<C-K>` - Move cursor to previous match.\n- `<C-C>` - Stop a background searching process.\n\nIn preview window:\n\n- `q` - Close preview window.\n\nSome default defined keys may conflict with keys you have been used to when you are editing. But don\'t worry, you can customize your mapping by setting `g:ctrlsf_mapping`. `:h g:ctrlsf_mapping` for more information.\n\n## Use Your Own Map\n\nCtrlSF provides many maps which you can use for quick accessing all features, here I will list some most useful ones.\n\n- `<Plug>CtrlSFPrompt`\n\n    Input `:CtrlSF ` in command line for you, just a handy shortcut.\n\n- `<Plug>CtrlSFVwordPath`\n\n    Input `:CtrlSF foo ` in command line where `foo` is the current visual selected word, waiting for further input.\n\n- `<Plug>CtrlSFVwordExec`\n\n    Like `<Plug>CtrlSFVwordPath`, but execute it immediately.\n\n- `<Plug>CtrlSFCwordPath`\n\n    Input `:CtrlSF foo ` in command line where `foo` is word under the cursor.\n\n- `<Plug>CtrlSFCCwordPath`\n\n    Like `<Plug>CtrlSFCwordPath`, but also add word boundary around searching word.\n\n- `<Plug>CtrlSFPwordPath`\n\n    Input `:CtrlSF foo ` in command line where `foo` is the last search pattern of vim.\n\nFor a full list of maps, please refer to the document.\n\nI strongly recommend you should do some maps for a nicer user experience, because typing 8 characters for every single search is really boring and painful experience. Another reason is that **one of the most useful feature \'Search Visual Selected Word\' can be accessed by map only.**\n\nExample:\n\n```\nnmap     <C-F>f <Plug>CtrlSFPrompt\nvmap     <C-F>f <Plug>CtrlSFVwordPath\nvmap     <C-F>F <Plug>CtrlSFVwordExec\nnmap     <C-F>n <Plug>CtrlSFCwordPath\nnmap     <C-F>p <Plug>CtrlSFPwordPath\nnnoremap <C-F>o :CtrlSFOpen<CR>\nnnoremap <C-F>t :CtrlSFToggle<CR>\ninoremap <C-F>t <Esc>:CtrlSFToggle<CR>\n```\n\n## Edit Mode\n\n1. Edit mode is not really a \'mode\'. You don\'t need to press any key to enter edit mode, just edit the result directly.\n\n2. When your editing is done, save it and CtrlSF will ask you for confirmation, \'y\' or just enter will make CtrlSF apply those changes to actual files. (You can turn off confirmation by setting `g:ctrlsf_confirm_save` to 0)\n\n3. Undo is the same as regular editing. You just need to press \'u\' and save again.\n\n4. Finally I recommend using [vim-multiple-cursors][7] together with edit mode.\n\n### Limitation\n\n- You can modify or delete lines but **you can\'t insert**. (If it turns out that inserting is really needed, I\'ll implement it later.)\n\n- If a file\'s content varies from last search, CtrlSF will refuse to write your changes to that file (for safety concern). As a rule of thumb, invoke a new search before editing, or just run `:CtrlSFUpdate`.\n\n## Arguments\n\nCtrlSF has a lot of arguments you can use in search. Most arguments are similar to Ack/Ag\'s but not perfectly same. Here are some most frequently used arguments:\n\n- `-R` - Use regular expression pattern.\n- `-I`, `-S` - Search case-insensitively (`-I`) or case-sensitively (`-S`).\n- `-C`, `-A`, `-B` - Specify how many context lines to be printed, identical to their counterparts in Ag/Ack.\n- `-W` - Only match whole words.\n\nRead `:h ctrlsf-arguments` for a full list of arguments.\n\n### Example\n\n- Search a regular expression pattern case-insensitively:\n\n    ```vim\n    :CtrlSF -R -I foo.*\n    ```\n\n- Search a pattern that contains space:\n\n    ```vim\n    :CtrlSF \'def foo():\'\n    ```\n\n- Search a pattern with characters requiring escaping:\n\n    ```vim\n    :CtrlSF \'"foobar"\'\n    " or\n    :CtrlSF \\"foobar\\"\n    ```\n\n## Tips\n\n- CtrlSF searches pattern literally by default, which is different from Ack/Ag. If you need to search a regular expression pattern, run `:CtrlSF -R regex`. If you dislike this default behavior, turn it off by `let g:ctrlsf_regex_pattern = 1`.\n\n- By default, CtrlSF use working directory as search path when no path is specified. But CtrlSF can also use project root as its path if you set `g:ctrlsf_default_root` to `project`, CtrlSF does this by searching VCS directory (.git, .hg, etc.) upward from current file. It is useful when you are working with files across multiple projects.\n\n- `-filetype` is useful when you only want to search in files of specific type. Read option `--type` in `ack`\'s [manual][6] for more information.\n\n- If `-filetype` does not exactly match your need, there is an option `-filematch` with which you have more control on which files should be searched. `-filematch` accepts a pattern that only files match this pattern will be searched. Note the pattern is in syntax of your backend but not vim\'s. Also, a shortcut `-G` is available.\n\n- Running `:CtrlSF` without any argument or pattern will use word under cursor.\n\n## Configuration\n\n- `g:ctrlsf_auto_close` defines if CtrlSF close itself when you are opening some file. By default, CtrlSF window will close automatically in `normal` view mode and keep open in `compact` view mode. You can customize the value as below:\n\n    ```vim\n    let g:ctrlsf_auto_close = {\n        \\ "normal" : 0,\n        \\ "compact": 0\n        \\}\n    ```\n\n- `g:ctrlsf_auto_focus` defines how CtrlSF focuses result pane when working in async search mode. By default, CtrlSF will not focus at all, setting to `start` makes CtrlSF focus at search starting, setting to `done` makes CtrlSF focus at search is done, but only for immediately finished search. An additional `duration_less_than` is used to define max duration of a search can be focused for \'at done\', which is an integer value of milliseconds.\n\n    ```vim\n    let g:ctrlsf_auto_focus = {\n        \\ "at": "start"\n        \\ }\n    " or\n    let g:ctrlsf_auto_focus = {\n        \\ "at": "done",\n        \\ "duration_less_than": 1000\n        \\ }\n    ```\n\n- `g:ctrlsf_case_sensitive` defines default case-sensitivity in search. Possible values are `yes`, `no` and `smart`, `smart` works the same as it is in vim. The default value is `smart`.\n\n    ```vim\n    let g:ctrlsf_case_sensitive = \'no\'\n    ```\n\n- `g:ctrlsf_context` defines how many context lines will be printed. Please read `ack`\'s [manual][6] for acceptable format. The default value is `-C 3`, and you can set another value by\n\n    ```vim\n    let g:ctrlsf_context = \'-B 5 -A 3\'\n    ```\n\n- `g:ctrlsf_default_root` defines how CtrlSF find search root when no explicit path is given. Two possible values are `cwd` and `project`. `cwd` means current working directory and `project` means project root. CtrlSF locates project root by searching VCS root (.git, .hg, .svn, etc.)\n\n    ```vim\n    let g:ctrlsf_default_root = \'project\'\n    ```\n\n- `g:ctrlsf_default_view_mode` defines default view mode which CtrlSF will use. Possible values are `normal` and `compact`. The default value is `normal`.\n\n    ```vim\n    let g:ctrlsf_default_view_mode = \'compact\'\n    ```\n\n- `g:ctrlsf_extra_backend_args` is a dictionary that defines extra arguments that will be passed *literally* to backend, especially useful when you have your favorite backend and need some backend-specific features. For example, using `ptignore` file for [pt][8] should be like\n\n    ```vim\n    let g:ctrlsf_extra_backend_args = {\n        \\ \'pt\': \'--home-ptignore\'\n        \\ }\n    ```\n\n- `g:ctrlsf_extra_root_markers` is a list contains custom root markers. For example, this option is set `[\'.root\']`, and there exists a file or directory `/home/your/project/.root`, then `/home/your/project` will be recognized as project root.\n\n    ```vim\n    let g:ctrlsf_extra_root_markers = [\'.root\']\n    ```\n\n- `g:ctrlsf_mapping` defines maps used in result window and preview window. Value of this option is a dictionary, where key is a method and value is a key for mapping. An empty value can disable that method. To specify additional keys to run after a method, use the extended form demonstrated below to specify a `suffix`. You can just define a subset of full dictionary, those not defined functionalities will use default key mapping.\n\n    ```vim\n    let g:ctrlsf_mapping = {\n        \\ "openb": { key: "O", suffix: "<C-w>p" },\n        \\ "next": "n",\n        \\ "prev": "N",\n        \\ }\n    ```\n\n- `g:ctrlsf_populate_qflist` defines if CtrlSF will also feed quickfix and location list with search result. By default this feature is disabled but you can enable it by\n\n    ```vim\n    let g:ctrlsf_populate_qflist = 1\n    ```\n\n- `g:ctrlsf_regex_pattern` defines CtrlSF using literal pattern or regular expression pattern as default. Default value is 0, which means literal pattern.\n\n    ```vim\n    let g:ctrlsf_regex_pattern = 1\n    ```\n\n- `g:ctrlsf_search_mode` defines whether CtrlSF works in synchronous or asynchronous way. `async` is the recommendation for users who are using Vim 8.0+.\n\n    ```vim\n    let g:ctrlsf_search_mode = \'async\'\n    ```\n\n- `g:ctrlsf_position` defines where CtrlSf places its window. Possible values are `left`, `right`, `top` and `bottom`. If nothing specified, the default value is `left`.\n\n    ```vim\n    let g:ctrlsf_position = \'bottom\'\n    ```\n\n- `g:ctrlsf_winsize` defines the width (if CtrlSF opens vertically) or height (if CtrlSF opens horizontally) of CtrlSF main window. You can specify it with percent value or absolute value.\n\n    ```vim\n    let g:ctrlsf_winsize = \'30%\'\n    " or\n    let g:ctrlsf_winsize = \'100\'\n    ```\n\nA full list of options can be found in `:help ctrlsf-options`.\n\n## For user comes from pre v1.0\n\n### Difference between v1.0 and pre-v1.0\n\nThere are many features and changes introduced in v1.0, but the most important difference is **v1.0 breaks backward compatibility**.\n\n### Where and why backward compatibility is given up?\n\nCtrlSF is at first designed as a wrapper of ag/ack within vim, and the principle of interface design is *sticking to the interface of ag/ack running upon shell*. This fact lets user get access to all features of ag/ack, and it\'s easier to implement too. However I found it is not as useful as I thought, what\'s worse, this principle limits features I could add to CtrlSF and makes CtrlSF counter-intuitive sometimes.\n\n**So I want to change it.**\n\nExample:\n\nCase-insensitive searching in pre-v1.0 CtrlSF is like this\n\n```vim\nCtrlSF -i foo\n```\n\nIn v1.0, that will be replaced by\n\n```vim\nCtrlSF -ignorecase foo\n```\n\nFor those most frequently used arguments, an upper case short version is available\n\n```vim\nCtrlSF -I foo\n```\n\n[1]: https://github.com/petdance/ack2\n[2]: https://github.com/ggreer/the_silver_searcher\n[3]: https://github.com/tpope/vim-pathogen\n[4]: https://github.com/gmarik/vundle\n[5]: https://github.com/Shougo/neobundle.vim\n[6]: https://github.com/gabesoft/vim-ags\n[7]: https://github.com/terryma/vim-multiple-cursors\n[8]: https://github.com/monochromegane/the_platinum_searcher\n[9]: https://github.com/junegunn/vim-plug\n[10]: https://github.com/BurntSushi/ripgrep\n'