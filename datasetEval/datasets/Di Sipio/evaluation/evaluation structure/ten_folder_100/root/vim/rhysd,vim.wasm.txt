b'<img src="wasm/images/vim-wasm-logo-128x128.png" width="64" height="64" alt="icon"/> vim.wasm: Vim Ported to WebAssembly\n================================================================================\n[![Build Status][travis-ci-badge]][travis-ci]\n[![npm version][npm-badge]][npm-package]\n\nThis project is an experimental fork of [Vim editor][] by [@rhysd][] to compile\nit into [WebAssembly][] using [emscripten][] and [binaryen][].  Vim runs on [Web Worker][]\nand interacts with the main thread via [`SharedArrayBuffer`][shared-array-buffer].\n\nThe goal of this project is running Vim editor on browsers without losing Vim\'s powerful\nfunctionalities by compiling Vim C sources into WebAssembly.\n\n<img alt="Main Screen" src="./wasm/images/readme/main-screen.png" width=662 height=487 />\n\n## [Try it with your browser][try it]\n\n- **USAGE**\n  - Almost all Vim\'s powerful features (syntax highlighting, Vim script, text objects,\n    ...) including the latest features (popup window, ...) are supported.\n  - Drag&Drop files to browser tab opens them in Vim.\n  - `:write` only writes file on memory.  Download current buffer by `:export` or\n    specific file by `:export {file}`.\n  - Clipboard register `"*` is supported.  For example, paste system clipboard text\n    to Vim with `"*p` or `:put *`, and copy text in Vim to system clipboard with\n    `"*y` or `:yank *`.\n    If you want to synchronize Vim\'s clipboard with system clipboard,\n    `:set clipboard=unnamed` should work like normal Vim.\n  - Files under `~/.vim` directory is persistently stored in [Indexed DB][idb].\n    Please write your favorite configuration in `~/.vim/vimrc` (NOT `~/.vimrc`).\n  - `file={filepath}={url}` fetches a file from `{url}` to `{filepath}`.  Arbitrary\n    remote files can be opened (care about CORS).\n  - Default colorscheme is [onedark.vim][onedark], but [vim-monokai][monokai] is\n    also available as high-contrast colorscheme.\n  - `:!/path/to/file.js` evaluates the JavaScript code in browser.  `:!%` evaluates\n    current buffer.\n  - vimtutor is available by `:e tutor`.\n  - Add `arg=` query parameters (e.g. `?arg=~%2f.vim%2fvimrc&arg=hello.txt`) to\n    add `vim` command line arguments.\n  - Please read [the usage documentation](./wasm/DEMO_USAGE.md) for more details.\n\n- **NOTICE**\n  - Please access from desktop Chrome, Firefox, Safari or Chromium based browsers\n    since this project uses `SharedArrayBuffer` and `Atomics`.  On Firefox or Safari,\n    feature flags (`javascript.options.shared_memory` for Firefox) must be enabled\n    for now.\n  - vim.wasm takes key inputs from DOM `keydown` event. Please disable your browser\n    extensions which intercept key events (incognito mode would be the best).\n  - This project is very early phase of experiment.  You may notice soon on\n    trying it... it\'s buggy :)\n  - If inputting something does not change anything, please try to click somewhere\n    in the page.  Vim may have lost the focus.\n  - Vim exits on `:quit`, but it does not close a browser tab. Please close it\n    manually :)\n\nThis project is packaged as [`vim-wasm` npm pacakge][npm-package] to be used in\nweb application easily.  Please read [the documentation](./wasm/README.md) for\nmore details.\n\nThe current ported Vim version is 8.1.1935 with \'normal\' and \'small\' features sets.\nPlease check [changelog](./wasm/CHANGELOG.md) for update history.\n\n### Related Projects\n\nFollowing projects are related to this npm package and may be more suitable for your use case.\n\n- [react-vim-wasm](https://github.com/rhysd/react-vim-wasm): [React](https://reactjs.org/)\n  component for vim.wasm.  Vim editor can be embedded in your React web application.\n- [vimwasm-try-plugin](https://github.com/rhysd/vimwasm-try-plugin): Command line tool\n  to open vim.wasm including specified Vim plugin instantly. You can try Vim plugin\n  without installing it!\n- [vim.wasm.ipynb](https://github.com/nat-chan/vim.wasm.ipynb): Jupyter Notebook integration\n  with vim.wasm. [Try it online!](https://mybinder.org/v2/gh/nat-chan/vim.wasm.ipynb/gh-pages?filepath=vim.wasm.ipynb)\n\n### Presentations and Blog Posts\n\n- Presentation slides\n  - [(English) VimConf 2018 (Nov. 24th, 2018)](https://speakerdeck.com/rhysd/vim-ported-to-webassembly-vimconf-2018)\n  - [(Japanese) Emscripten&WebAssembly night!! #8 (Jul. 24th, 2019)](https://speakerdeck.com/rhysd/vim-compiled-to-webassembly)\n- Japanese blog posts\n  [1](https://rhysd.hatenablog.com/entry/2018/07/09/090115)\n  [2](https://rhysd.hatenablog.com/entry/2019/06/13/090519)\n\n## How It Works\n\n### User Interaction\n\n![User Interaction](./wasm/images/readme/user-interaction.png)\n\nIn worker thread, Vim is running by compiled into Wasm.  The worker thread is spawned\nas dedicated Web Worker from main thread when opening the page.\n\nLet\'s say you input something with keyboard. Browser takes it as `KeyboardEvent` on\n`keydown` event. JavaScript in main thread catches the event and store keydown\ninformation to a shared memory buffer.\n\nThe buffer is shared with the worker thread.  Vim waits and gets the keydown information\nby polling the shared memory buffer via JavaScript\'s `Atomics` API.  When key information\nis found in the buffer, it loads the information and calculates key sequence. Via\nJS to Wasm API thanks to emscripten, the sequence is added to Vim\'s input buffer\nin Wasm.\n\nThe sequence in input buffer is processed by core editor logic (update buffer,\nscreen, ...).  Due to the updates, some draw events happen such as draw text, draw\nrects, scroll regions, ...\n\nThese draw events are sent to JavaScript in worker thread from Wasm thanks to emscripten\'s\nJS to C API. Considering device pixel ratio and `<canvas/>` API, how to render the\nevents is calculated and these calculated rendering events are passed from worker thread\nto main thread via message passing with `postMessage()`.\n\nMain thread JavaScript receives and enqueues these rendering events. On animation\nframe, it renders them to `<canvas/>`.\n\nFinally you can see the rendered screen in the page.\n\n### Build Process\n\n![Build Process](./wasm/images/readme/build-process.png)\n\nWebAssembly frontend for Vim is implemented as a new GUI frontend of Vim like other GUI such as GTK frontend.  C sources are\ncompiled to each LLVM bitcode files and then they are linked to one bitcode file\n`vim.bc` by `emcc`.  `emcc` will finally compile the `vim.bc` into `vim.wasm` binary\nusing binaryen and generates HTML/JavaScript runtime.\n\nThe difference I faced at first was the lack of terminal library such as ncurses.\nI modified `configure` script to ignore the terminal library check.  It\'s OK since\nGUI frontend for Wasm is always used instead of CUI frontend. I needed many\nworkarounds to pass `configure` checks.\n\nemscripten provides Unix-like environment. So `os_unix.c` can support Wasm. However,\nsome features are not supported by emscripten. I added many `#ifdef FEAT_GUI_WASM`\nguards to disable features which cannot be supported by Wasm (i.e. `fork (2)`\nsupport, PTY support, signal handlers are stubbed, ...etc).\n\nI created `gui_wasm.c` heavily referencing `gui_mac.c` and `gui_w32.c`. Event loop\n(`gui_mch_update()` and `gui_mch_wait_for_chars()`) is simply implemented with\nblocking wait. And almost all UI rendering events are passed to JavaScript layer\nby calling JavaScript functions from C thanks to emscripten.\n\nC sources are compiled (with many optimizations) into LLVM bitcode with [Clang][]\nwhich is integrated to emscripten. Then all bitcode files (`.o`) are linked to\none bitcode file `vim.bc` with `llvm-link` linker (also integrated to emscripten).\n\nAnd I created JavaScript runtime in TypeScript to draw the rendering events sent\nfrom C.  JavaScript runtime is separated into two parts; main thread and worker\nthread.  `wasm/main.ts` is for main thread. It starts Vim in worker thread and\ndraws Vim screen to `<canvas>` receiving draw events from Vim. `wasm/runtime.ts`\nand `wasm/pre.ts` are for worker thread. They are written using\n[emscripten API][emscripten/interacting with code].\n\n`emcc` (emscripten\'s C compiler) compiles the `vim.bc` and `runtime.js` into `vim.wasm`,\n`vim.js` and `vim.data` with preloaded Vim runtime files (i.e. colorscheme) using\nbinaryen.  Runtime files are loaded on a virtual file system provided on a browser\nby emscripten.  Here, these files are compiled for worker thread. `wasm/main.js`\nstarts a dedicated Web Worker loading `vim.js`.\n\nFinally, I created a small `wasm/index.html` which contains `<canvas/>` to render\nVim screen and load `wasm/main.js`.\n\nNow hosting `wasm/index.html` with a web server and accessing to it with browser\nopens Vim.  It works.\n\n### How to `sleep()` on JavaScript\n\nThe hardest part for this porting was how to implement blocking wait (usually done\nwith `sleep()`).\n\nSince blocking main thread on web page means blocking user interaction, it is basically\nprohibited.  Almost all operations taking time are implemented as asynchronous API\nin JavaScript.  Wasm running on main thread cannot block the thread except for\nbusy loop.\n\nBut C programs casually use `sleep()` function so it is a problem when porting the programs.\nVim\'s GUI frontend is also expected to wait user input with blocking wait.\n\nemscripten provides workaround for this problem, [Emterpreter][]. With Emterpreter,\nemscripten provides (pseudo) blocking wait functions such as `emscripten_sleep()`.\nWhen they are used in C function, `emcc` compiles the function into Emterpreter byte\ncode instead of Wasm. And at runtime, the byte code is run on an interpreter (on Wasm).\nWhen the interpreter reaches at the point calling `emscripten_sleep()`, it suspends\nbyte code execution and sets timer (with `setTimeout` JS function). After time\nexpires, the interpreter resumes state and continues execution.\n\nBy this mechanism, JavaScript\'s asynchronous wait looks as if synchronous wait from C\nworld.  At first I used Emterpreter and it worked. However, there were several issues.\n\n- It splits Vim sources into two parts; pure Wasm code directly run and Emterpreter\n  byte code run on an interpreter.  I needed to maintain large functions list which\n  should be compiled into Emterpreter byte code. When the list is wrong, Vim crashes\n- Emterpreter is not so fast so it slows entire application\n- Emterpreter makes program unstable. For example JS and C interactions don\'t work\n  in some situations\n- Emterpreter makes built binary bigger and compilation longer.  Compiling C code\n  into Emterpreter byte code is very slow since it requires massive code transformations.\n  Emterpreter byte code is very simple so its binary size is bigger\n\nI looked for an alternative and found [`Atomics.wait()`][js-atomics-wait]. `Atomics.wait()`\nis a low-level synchronous primitive function. It waits until a specific byte in shared\nmemory buffer is updated. It\'s **blocking wait**. Of course it is not available on\nmain thread. It must be used on a worker thread.\n\nI moved Wasm code base into Web Worker running on worker thread, though rendering\n`<canvas/>` is still done in main thread.\n\n![Polling input sequences](./wasm/images/readme/input-polling-sequence.png)\n\nVim uses `Atomics.wait()` for waiting user input by watching a shared memory buffer.\nWhen a key event happens, main thread stores key event data to the shared memory buffer\nand notifies that a new key event came by `Atomics.notify()`.  Worker thread detects\nthat the buffer was updated by `Atomics.wait()` and loads the key event data from\nthe buffer.  Vim calculates a key sequence from the data and add it to input buffer.\nFinally Vim handles the event and sends draw events to main thread via JavaScript.\n\nAs a bonus, user interaction is no longer prevented since almost all logic including\nentire Vim are run in worker thread.\n\n## Development\n\nPlease make sure that Emscripten (I\'m using 1.38.37) and binaryen (I\'m using v84)\nare installed.  If you use macOS, they can be installed with\n`brew install emscripten binaryen`.\n\nPlease use `build.sh` script to hack this project.  Just after cloning this\nrepository, simply run `./build.sh`.  It builds vim.wasm in `wasm/` directory.\nIt takes time and CPU power a lot.\n\nFinally host the `wasm/` directly on `localhost` with a web server such as\n`python -m http.server 1234`.  Accessing to `localhost:1234?debug` will start\nVim with debug logs.  Note that it\'s much slower than release build since many\ndebug features are enabled. Please read [wasm/README.md](./wasm/README.md) for\nmore details.\n\nPlease note that this repository\'s `wasm` branch frequently merges the latest\n[vim/vim][] master branch.  If you want to hack this project, please ensure\nto create your own branch and merge `wasm` branch into your branch by `git merge`.\n\n### Known Issues\n\n- ~~WebAssembly nor JavaScript does not provide `sleep()`. By default, emscripten\n  compiles `sleep()` into a busy loop.  So vim.wasm is using [Emterpreter][]\n  which provides `emscripten_sleep()`. Some whitelisted functions are run with\n  Emterpreter. But this feature is not so stable. It makes built binaries larger\n  and compilation longer.~~ This was fixed at [#30][issue-30]\n- ~~JavaScript to C does not fully work with Emterpreter. For example, calling\n  some C APIs breaks Emterpreter stack. This also means that calling C functions\n  from JavaScript passing a `string` parameter does not work.~~ This was fixed at\n  [#30][issue-30]\n- Only Chrome and Chromium based browsers are supported by default. Firefox and Safari\n  require enabling feature flags. This is because `SharedArrayBuffer` is disabled\n  due to Spectre security vulnerability. This can be fixed with [Asyncify][]. The work\n  is in progress and tracked at [PR #35](https://github.com/rhysd/vim.wasm/pull/35).\n\n## TODO\n\nDevelopment is managed in [GitHub Projects][].\n\n- Consider to support larger feature set (\'big\' and \'huge\')\n- Use WebAssembly\'s multi-threads support with [Atomic instructions][wasm-atomic-insn]\n  instead of [JavaScript Atomics API][js-atomics-api]\n- ~~Render `<canvas/>` in worker thread using [Offscreen Canvas][]~~ Currently not\n  available. Please read [notes](./wasm/README.md).\n- Mouse support\n- IME support\n- Packaging vim.wasm as Web Component\n\n## Special Thanks\n\nThis project was heavily inspired by impressive project [vim.js][] by\n[Lu Wang][].\n\n## License\n\nAll additional files in this repository are licensed under the same license as\nVim (VIM LICENSE).  Please see `:help license` for more detail.\n\n[Vim editor]: https://www.vim.org/\n[@rhysd]: https://github.com/rhysd\n[WebAssembly]: https://webassembly.org/\n[emscripten]: http://kripken.github.io/emscripten-site/\n[binaryen]: https://github.com/WebAssembly/binaryen\n[Web Worker]: https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API\n[travis-ci-badge]: https://travis-ci.org/rhysd/vim.wasm.svg?branch=wasm\n[travis-ci]: https://travis-ci.org/rhysd/vim.wasm\n[try it]: http://rhysd.github.io/vim.wasm\n[Clang]: https://clang.llvm.org/\n[emscripten/interacting with code]: https://kripken.github.io/emscripten-site/docs/porting/connecting_cpp_and_javascript/Interacting-with-code.html\n[Emterpreter]: https://github.com/kripken/emscripten/wiki/Emterpreter\n[GitHub Projects]: https://github.com/rhysd/vim.wasm/projects/2\n[vim/vim]: https://github.com/vim/vim\n[vim.js]: https://github.com/coolwanglu/vim.js/\n[Lu Wang]: https://github.com/coolwanglu\n[wasm-atomic-insn]: https://webassembly.github.io/threads/valid/instructions.html#atomic-memory-instructions\n[js-atomics-api]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics\n[Offscreen Canvas]: https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas\n[js-atomics-wait]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/wait\n[shared-array-buffer]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\n[issue-30]: https://github.com/rhysd/vim.wasm/pull/30\n[npm-package]: https://www.npmjs.com/package/vim-wasm\n[npm-badge]: https://badge.fury.io/js/vim-wasm.svg\n[idb]: https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API\n[onedark]: https://github.com/joshdick/onedark.vim\n[monokai]: https://github.com/sickill/vim-monokai\n[Asyncify]: https://emscripten.org/docs/porting/asyncify.html\n\nOriginal README is following.\n\n-------------------------------------------------------------------------------\n\n![Vim Logo](https://github.com/vim/vim/blob/master/runtime/vimlogo.gif)\n\n[![Build Status](https://travis-ci.org/vim/vim.svg?branch=master)](https://travis-ci.org/vim/vim)\n[![Appveyor Build status](https://ci.appveyor.com/api/projects/status/o2qht2kjm02sgghk?svg=true)](https://ci.appveyor.com/project/chrisbra/vim)\n[![Coverage Status](https://codecov.io/gh/vim/vim/coverage.svg?branch=master)](https://codecov.io/gh/vim/vim?branch=master)\n[![Coverity Scan](https://scan.coverity.com/projects/241/badge.svg)](https://scan.coverity.com/projects/vim)\n[![Language Grade: C/C++](https://img.shields.io/lgtm/grade/cpp/g/vim/vim.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/vim/vim/context:cpp)\n[![Debian CI](https://badges.debian.net/badges/debian/testing/vim/version.svg)](https://buildd.debian.org/vim)\n[![Packages](https://repology.org/badge/tiny-repos/vim.svg)](https://repology.org/metapackage/vim)\n\n\n## What is Vim? ##\n\nVim is a greatly improved version of the good old UNIX editor Vi.  Many new\nfeatures have been added: multi-level undo, syntax highlighting, command line\nhistory, on-line help, spell checking, filename completion, block operations,\nscript language, etc.  There is also a Graphical User Interface (GUI)\navailable.  Still, Vi compatibility is maintained, those who have Vi "in the\nfingers" will feel at home.  See `runtime/doc/vi_diff.txt` for differences with\nVi.\n\nThis editor is very useful for editing programs and other plain text files.\nAll commands are given with normal keyboard characters, so those who can type\nwith ten fingers can work very fast.  Additionally, function keys can be\nmapped to commands by the user, and the mouse can be used.\n\nVim runs under MS-Windows (NT, 2000, XP, Vista, 7, 8, 10), Macintosh, VMS and\nalmost all flavours of UNIX.  Porting to other systems should not be very\ndifficult.  Older versions of Vim run on MS-DOS, MS-Windows 95/98/Me, Amiga\nDOS, Atari MiNT, BeOS, RISC OS and OS/2.  These are no longer maintained.\n\n\n## Distribution ##\n\nYou can often use your favorite package manager to install Vim.  On Mac and\nLinux a small version of Vim is pre-installed, you still need to install Vim\nif you want more features.\n\nThere are separate distributions for Unix, PC, Amiga and some other systems.\nThis `README.md` file comes with the runtime archive.  It includes the\ndocumentation, syntax files and other files that are used at runtime.  To run\nVim you must get either one of the binary archives or a source archive.\nWhich one you need depends on the system you want to run it on and whether you\nwant or must compile it yourself.  Check http://www.vim.org/download.php for\nan overview of currently available distributions.\n\nSome popular places to get the latest Vim:\n* Check out the git repository from [github](https://github.com/vim/vim).\n* Get the source code as an [archive](https://github.com/vim/vim/releases).\n* Get a Windows executable from the\n[vim-win32-installer](https://github.com/vim/vim-win32-installer/releases) repository.\n\n\n\n## Compiling ##\n\nIf you obtained a binary distribution you don\'t need to compile Vim.  If you\nobtained a source distribution, all the stuff for compiling Vim is in the\n`src` directory.  See `src/INSTALL` for instructions.\n\n\n## Installation ##\n\nSee one of these files for system-specific instructions.  Either in the\nREADMEdir directory (in the repository) or the top directory (if you unpack an\narchive):\n\n\tREADME_ami.txt\t\tAmiga\n\tREADME_unix.txt\t\tUnix\n\tREADME_dos.txt\t\tMS-DOS and MS-Windows\n\tREADME_mac.txt\t\tMacintosh\n\tREADME_vms.txt\t\tVMS\n\nThere are other `README_*.txt` files, depending on the distribution you used.\n\n\n## Documentation ##\n\nThe Vim tutor is a one hour training course for beginners.  Often it can be\nstarted as `vimtutor`.  See `:help tutor` for more information.\n\nThe best is to use `:help` in Vim.  If you don\'t have an executable yet, read\n`runtime/doc/help.txt`.  It contains pointers to the other documentation\nfiles.  The User Manual reads like a book and is recommended to learn to use\nVim.  See `:help user-manual`.\n\n\n## Copying ##\n\nVim is Charityware.  You can use and copy it as much as you like, but you are\nencouraged to make a donation to help orphans in Uganda.  Please read the file\n`runtime/doc/uganda.txt` for details (do `:help uganda` inside Vim).\n\nSummary of the license: There are no restrictions on using or distributing an\nunmodified copy of Vim.  Parts of Vim may also be distributed, but the license\ntext must always be included.  For modified versions a few restrictions apply.\nThe license is GPL compatible, you may compile Vim with GPL libraries and\ndistribute it.\n\n\n## Sponsoring ##\n\nFixing bugs and adding new features takes a lot of time and effort.  To show\nyour appreciation for the work and motivate Bram and others to continue\nworking on Vim please send a donation.\n\nSince Bram is back to a paid job the money will now be used to help children\nin Uganda.  See `runtime/doc/uganda.txt`.  But at the same time donations\nincrease Bram\'s motivation to keep working on Vim!\n\nFor the most recent information about sponsoring look on the Vim web site:\n\thttp://www.vim.org/sponsor/\n\n\n## Contributing ##\n\nIf you would like to help making Vim better, see the [CONTRIBUTING.md](https://github.com/vim/vim/blob/master/CONTRIBUTING.md) file.\n\n\n## Information ##\n\nThe latest news about Vim can be found on the Vim home page:\n\thttp://www.vim.org/\n\nIf you have problems, have a look at the Vim documentation or tips:\n\thttp://www.vim.org/docs.php\n\thttp://vim.wikia.com/wiki/Vim_Tips_Wiki\n\nIf you still have problems or any other questions, use one of the mailing\nlists to discuss them with Vim users and developers:\n\thttp://www.vim.org/maillist.php\n\nIf nothing else works, report bugs directly:\n\tBram Moolenaar <Bram@vim.org>\n\n\n## Main author ##\n\nSend any other comments, patches, flowers and suggestions to:\n\tBram Moolenaar <Bram@vim.org>\n\n\nThis is `README.md` for version 8.1 of Vim: Vi IMproved.\n'