b'# Asynchronous Lint Engine [![Travis CI Build Status](https://travis-ci.com/dense-analysis/ale.svg?branch=master)](https://travis-ci.com/dense-analysis/ale) [![AppVeyor Build Status](https://ci.appveyor.com/api/projects/status/r0ef1xu8xjmik58d/branch/master?svg=true)](https://ci.appveyor.com/project/dense-analysis/ale) [![Join the chat at https://gitter.im/vim-ale/Lobby](https://badges.gitter.im/vim-ale/Lobby.svg)](https://gitter.im/vim-ale/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n\n![ALE Logo by Mark Grealish - https://www.bhalash.com/](https://user-images.githubusercontent.com/3518142/59195920-2c339500-8b85-11e9-9c22-f6b7f69637b8.jpg)\n\nALE (Asynchronous Lint Engine) is a plugin providing linting (syntax checking\nand semantic errors) in NeoVim 0.2.0+ and Vim 8 while you edit your text files,\nand acts as a Vim [Language Server Protocol](https://langserver.org/) client.\n\n<img src="https://user-images.githubusercontent.com/3518142/59195938-3a81b100-8b85-11e9-8e8d-6a601b1db908.gif" alt="A linting example with the darkspectrum color scheme in GVim." title="A linting example with the darkspectrum color scheme in GVim.">\n\nALE makes use of NeoVim and Vim 8 job control functions and timers to\nrun linters on the contents of text buffers and return errors as\ntext is changed in Vim. This allows for displaying warnings and\nerrors in files being edited in Vim before files have been saved\nback to a filesystem.\n\nIn other words, this plugin allows you to lint while you type.\n\nALE offers support for fixing code with command line tools in a non-blocking\nmanner with the `:ALEFix` feature, supporting tools in many languages, like\n`prettier`, `eslint`, `autopep8`, and more.\n\nALE acts as a "language client" to support a variety of Language Server Protocol\nfeatures, including:\n\n* Diagnostics (via Language Server Protocol linters)\n* Go To Definition (`:ALEGoToDefinition`)\n* Completion (Built in completion support, or with Deoplete)\n* Finding references (`:ALEFindReferences`)\n* Hover information (`:ALEHover`)\n* Symbol search (`:ALESymbolSearch`)\n\nIf you don\'t care about Language Server Protocol, ALE won\'t load any of the code\nfor working with it unless needed. One of ALE\'s general missions is that you\nwon\'t pay for the features that you don\'t use.\n\nIf you enjoy this plugin, feel free to contribute or check out the author\'s\nother content at [w0rp.com](https://w0rp.com).\n\n## Table of Contents\n\n1. [Supported Languages and Tools](#supported-languages)\n2. [Usage](#usage)\n    1. [Linting](#usage-linting)\n    2. [Fixing](#usage-fixing)\n    3. [Completion](#usage-completion)\n    4. [Go To Definition](#usage-go-to-definition)\n    5. [Find References](#usage-find-references)\n    6. [Hovering](#usage-hover)\n    7. [Symbol Search](#usage-symbol-search)\n3. [Installation](#installation)\n    1. [Installation with Vim package management](#standard-installation)\n    2. [Installation with Pathogen](#installation-with-pathogen)\n    3. [Installation with Vundle](#installation-with-vundle)\n    4. [Installation with Vim-Plug](#installation-with-vim-plug)\n4. [Contributing](#contributing)\n5. [FAQ](#faq)\n    1. [How do I disable particular linters?](#faq-disable-linters)\n    2. [How can I keep the sign gutter open?](#faq-keep-signs)\n    3. [How can I change the signs ALE uses?](#faq-change-signs)\n    4. [How can I change or disable the highlights ALE uses?](#faq-change-highlights)\n    5. [How can I show errors or warnings in my statusline?](#faq-statusline)\n    6. [How can I show errors or warnings in my lightline?](#faq-lightline)\n    7. [How can I change the format for echo messages?](#faq-echo-format)\n    8. [How can I execute some code when ALE starts or stops linting?](#faq-autocmd)\n    9. [How can I navigate between errors quickly?](#faq-navigation)\n    10. [How can I run linters only when I save files?](#faq-lint-on-save)\n    11. [How can I use the quickfix list instead of the loclist?](#faq-quickfix)\n    12. [How can I check JSX files with both stylelint and eslint?](#faq-jsx-stylelint-eslint)\n    13. [How can I check Vue files with ESLint?](#faq-vue-eslint)\n    14. [Will this plugin eat all of my laptop battery power?](#faq-my-battery-is-sad)\n    15. [How can I configure my C or C++ project?](#faq-c-configuration)\n    16. [How can I configure ALE differently for different buffers?](#faq-buffer-configuration)\n    17. [How can I configure the height of the list in which ALE displays errors?](#faq-list-window-height)\n    18. [How can I see what ALE has configured for the current file?](#faq-get-info)\n\n<a name="supported-languages"></a>\n\n## 1. Supported Languages and Tools\n\nALE supports a wide variety of languages and tools. See the\n[full list](supported-tools.md) in the\n[Supported Languages and Tools](supported-tools.md) page.\n\n<a name="usage"></a>\n\n## 2. Usage\n\n<a name="usage-linting"></a>\n\n### 2.i Linting\n\nOnce this plugin is installed, while editing your files in supported\nlanguages and tools which have been correctly installed,\nthis plugin will send the contents of your text buffers to a variety of\nprograms for checking the syntax and semantics of your programs. By default,\nlinters will be re-run in the background to check your syntax when you open\nnew buffers or as you make edits to your files.\n\nThe behaviour of linting can be configured with a variety of options,\ndocumented in [the Vim help file](doc/ale.txt). For more information on the\noptions ALE offers, consult `:help ale-options` for global options and `:help\nale-integration-options` for options specified to particular linters.\n\n<a name="usage-fixing"></a>\n\n### 2.ii Fixing\n\nALE can fix files with the `ALEFix` command. Functions need to be configured\neither in each buffer with a `b:ale_fixers`, or globally with `g:ale_fixers`.\n\nThe recommended way to configure fixers is to define a List in an ftplugin file.\n\n```vim\n" In ~/.vim/ftplugin/javascript.vim, or somewhere similar.\n\n" Fix files with prettier, and then ESLint.\nlet b:ale_fixers = [\'prettier\', \'eslint\']\n" Equivalent to the above.\nlet b:ale_fixers = {\'javascript\': [\'prettier\', \'eslint\']}\n```\n\nYou can also configure your fixers from vimrc using `g:ale_fixers`, before or\nafter ALE has been loaded.\n\nA `*` in place of the filetype will apply a List of fixers to all files which\ndo not match some filetype in the Dictionary.\n\nNote that using a plain List for `g:ale_fixers` is not supported.\n\n```vim\n" In ~/.vim/vimrc, or somewhere similar.\nlet g:ale_fixers = {\n\\   \'*\': [\'remove_trailing_lines\', \'trim_whitespace\'],\n\\   \'javascript\': [\'eslint\'],\n\\}\n```\n\nIf you want to automatically fix files when you save them, you need to turn\na setting on in vimrc.\n\n```vim\n" Set this variable to 1 to fix files when you save them.\nlet g:ale_fix_on_save = 1\n```\n\nThe `:ALEFixSuggest` command will suggest some supported tools for fixing code.\nBoth `g:ale_fixers` and `b:ale_fixers` can also accept functions, including\nlambda functions, as fixers, for fixing files with custom tools.\n\nSee `:help ale-fix` for complete information on how to fix files with ALE.\n\n<a name="usage-completion"></a>\n\n### 2.iii Completion\n\nALE offers some support for completion via hijacking of omnicompletion while you\ntype. All of ALE\'s completion information must come from Language Server\nProtocol linters, or from `tsserver` for TypeScript.\n\nALE integrates with [Deoplete](https://github.com/Shougo/deoplete.nvim) as a\ncompletion source, named `\'ale\'`. You can configure Deoplete to only use ALE as\nthe source of completion information, or mix it with other sources.\n\n```vim\n" Use ALE and also some plugin \'foobar\' as completion sources for all code.\ncall deoplete#custom#option(\'sources\', {\n\\ \'_\': [\'ale\', \'foobar\'],\n\\})\n```\n\nALE also offers its own automatic completion support, which does not require any\nother plugins, and can be enabled by changing a setting before ALE is loaded.\n\n```vim\n" Enable completion where available.\n" This setting must be set before ALE is loaded.\n"\n" You should not turn this setting on if you wish to use ALE as a completion\n" source for other completion plugins, like Deoplete.\nlet g:ale_completion_enabled = 1\n```\n\nALE provides an omni-completion function you can use for triggering\ncompletion manually with `<C-x><C-o>`.\n\n```vim\nset omnifunc=ale#completion#OmniFunc\n```\n\nWhen working with TypeScript files, ALE supports automatic imports from\nexternal modules. This behavior is disabled by default and can be enabled by\nsetting:\n\n```vim\nlet g:ale_completion_tsserver_autoimport = 1\n```\n\nSee `:help ale-completion` for more information.\n\n<a name="usage-go-to-definition"></a>\n\n### 2.iv Go To Definition\n\nALE supports jumping to the definition of words under your cursor with the\n`:ALEGoToDefinition` command using any enabled Language Server Protocol linters\nand `tsserver`.\n\nSee `:help ale-go-to-definition` for more information.\n\n<a name="usage-find-references"></a>\n\n### 2.v Find References\n\nALE supports finding references for words under your cursor with the\n`:ALEFindReferences` command using any enabled Language Server Protocol linters\nand `tsserver`.\n\nSee `:help ale-find-references` for more information.\n\n<a name="usage-hover"></a>\n\n### 2.vi Hovering\n\nALE supports "hover" information for printing brief information about symbols at\nthe cursor taken from Language Server Protocol linters and `tsserver` with the\n`ALEHover` command.\n\nThe information can be displayed in a `balloon` tooltip in Vim or GVim by\nhovering your mouse over symbols. Mouse hovering is enabled by default in GVim,\nand needs to be configured for Vim 8.1+ in terminals.\n\nSee `:help ale-hover` for more information.\n\n<a name="usage-symbol-search"></a>\n\n### 2.vii Symbol Search\n\nALE supports searching for workspace symbols via Language Server Protocol\nlinters with the `ALESymbolSearch` command.\n\nSearch queries can be performed to find functions, types, and more which are\nsimilar to a given query string.\n\nSee `:help ale-symbol-search` for more information.\n\n<a name="installation"></a>\n\n## 3. Installation\n\nTo install this plugin, you should use one of the following methods.\nFor Windows users, replace usage of the Unix `~/.vim` directory with\n`%USERPROFILE%\\vimfiles`, or another directory if you have configured\nVim differently. On Windows, your `~/.vimrc` file will be similarly\nstored in `%USERPROFILE%\\_vimrc`.\n\n<a name="standard-installation"></a>\n\n### 3.i. Installation with Vim package management\n\nIn Vim 8 and NeoVim, you can install plugins easily without needing to use\nany other tools. Simply clone the plugin into your `pack` directory.\n\n#### Vim 8 on Unix\n\n```bash\nmkdir -p ~/.vim/pack/git-plugins/start\ngit clone --depth 1 https://github.com/dense-analysis/ale.git ~/.vim/pack/git-plugins/start/ale\n```\n\n#### NeoVim on Unix\n\n```bash\nmkdir -p ~/.local/share/nvim/site/pack/git-plugins/start\ngit clone --depth 1 https://github.com/dense-analysis/ale.git ~/.local/share/nvim/site/pack/git-plugins/start/ale\n```\n\n#### Vim 8 on Windows\n\n```bash\n# Run these commands in the "Git for Windows" Bash terminal\nmkdir -p ~/vimfiles/pack/git-plugins/start\ngit clone --depth 1 https://github.com/dense-analysis/ale.git ~/vimfiles/pack/git-plugins/start/ale\n```\n\n#### Generating Vim help files\n\nYou can add the following line to your vimrc files to generate documentation\ntags automatically, if you don\'t have something similar already, so you can use\nthe `:help` command to consult ALE\'s online documentation:\n\n```vim\n" Put these lines at the very end of your vimrc file.\n\n" Load all plugins now.\n" Plugins need to be added to runtimepath before helptags can be generated.\npackloadall\n" Load all of the helptags now, after plugins have been loaded.\n" All messages and errors will be ignored.\nsilent! helptags ALL\n```\n\n<a name="installation-with-pathogen"></a>\n\n### 3.ii. Installation with Pathogen\n\nTo install this module with [Pathogen](https://github.com/tpope/vim-pathogen),\nyou should clone this repository to your bundle directory, and ensure\nyou have the line `execute pathogen#infect()` in your `~/.vimrc` file.\nYou can run the following commands in your terminal to do so:\n\n```bash\ncd ~/.vim/bundle\ngit clone https://github.com/dense-analysis/ale.git\n```\n\n<a name="installation-with-vundle"></a>\n\n### 3.iii. Installation with Vundle\n\nYou can install this plugin using [Vundle](https://github.com/VundleVim/Vundle.vim)\nby using the path on GitHub for this repository.\n\n```vim\nPlugin \'dense-analysis/ale\'\n```\n\nSee the Vundle documentation for more information.\n\n<a name="installation-with-vim-plug"></a>\n\n### 3.iiii. Installation with Vim-Plug\n\nYou can install this plugin using [Vim-Plug](https://github.com/junegunn/vim-plug)\nby adding the GitHub path for this repository to your `~/.vimrc`\nand running `:PlugInstall`.\n\n```vim\nPlug \'dense-analysis/ale\'\n```\n\n<a name="contributing"></a>\n\n## 4. Contributing\n\nIf you would like to see support for more languages and tools, please\n[create an issue](https://github.com/dense-analysis/ale/issues)\nor [create a pull request](https://github.com/dense-analysis/ale/pulls).\nIf your tool can read from stdin or you have code to suggest which is good,\nsupport can be happily added for it.\n\nIf you are interested in the general direction of the project, check out the\n[wiki home page](https://github.com/dense-analysis/ale/wiki). The wiki includes\na Roadmap for the future, and more.\n\nIf you\'d liked to discuss the project more directly, check out the `#vim-ale` channel\non Freenode. Web chat is available [here](https://webchat.freenode.net/?channels=vim-ale).\n\n<a name="faq"></a>\n\n## 5. FAQ\n\n<a name="faq-disable-linters"></a>\n\n### 5.i. How do I disable particular linters?\n\nBy default, all available tools for all supported languages will be run. If you\nwant to only select a subset of the tools, you can define `b:ale_linters` for a\nsingle buffer, or `g:ale_linters` globally.\n\nThe recommended way to configure linters is to define a List in an ftplugin\nfile.\n\n```vim\n" In ~/.vim/ftplugin/javascript.vim, or somewhere similar.\n\n" Enable ESLint only for JavaScript.\nlet b:ale_linters = [\'eslint\']\n\n" Equivalent to the above.\nlet b:ale_linters = {\'javascript\': [\'eslint\']}\n```\n\nYou can also declare which linters you want to run in your vimrc file, before or\nafter ALE has been loaded.\n\n```vim\n" In ~/.vim/vimrc, or somewhere similar.\nlet g:ale_linters = {\n\\   \'javascript\': [\'eslint\'],\n\\}\n```\n\nFor all languages unspecified in the dictionary, all possible linters will\nbe run for those languages, just as when the dictionary is not defined.\nRunning many linters should not typically obstruct editing in Vim,\nas they will all be executed in separate processes simultaneously.\n\nIf you don\'t want ALE to run anything other than what you\'ve explicitly asked\nfor, you can set `g:ale_linters_explicit` to `1`.\n\n```vim\n" Only run linters named in ale_linters settings.\nlet g:ale_linters_explicit = 1\n```\n\nThis plugin will look for linters in the [`ale_linters`](ale_linters) directory.\nEach directory within corresponds to a particular filetype in Vim, and each file\nin each directory corresponds to the name of a particular linter.\n\n<a name="faq-keep-signs"></a>\n\n### 5.ii. How can I keep the sign gutter open?\n\nYou can keep the sign gutter open at all times by setting the\n`g:ale_sign_column_always` to 1\n\n```vim\nlet g:ale_sign_column_always = 1\n```\n\n<a name="faq-change-signs"></a>\n\n### 5.iii. How can I change the signs ALE uses?\n\nUse these options to specify what text should be used for signs:\n\n```vim\nlet g:ale_sign_error = \'>>\'\nlet g:ale_sign_warning = \'--\'\n```\n\nALE sets some background colors automatically for warnings and errors\nin the sign gutter, with the names `ALEErrorSign` and `ALEWarningSign`.\nThese colors can be customised, or even removed completely:\n\n```vim\nhighlight clear ALEErrorSign\nhighlight clear ALEWarningSign\n```\n\n<a name="faq-change-highlights"></a>\n\n### 5.iv. How can I change or disable the highlights ALE uses?\n\nALE\'s highlights problems with highlight groups which link to `SpellBad`,\n`SpellCap`, `error`, and `todo` groups by default. The characters that are\nhighlighted depend on the linters being used, and the information provided to\nALE.\n\nHighlighting can be disabled completely by setting `g:ale_set_highlights` to\n`0`.\n\n```vim\n" Set this in your vimrc file to disabling highlighting\nlet g:ale_set_highlights = 0\n```\n\nYou can control all of the highlights ALE uses, say if you are using a different\ncolor scheme which produces ugly highlights. For example:\n\n```vim\nhighlight ALEWarning ctermbg=DarkMagenta\n```\n\nSee `:help ale-highlights` for more information.\n\n<a name="faq-statusline"></a>\n\n### 5.v. How can I show errors or warnings in my statusline?\n\n[vim-airline](https://github.com/vim-airline/vim-airline) integrates with ALE\nfor displaying error information in the status bar. If you want to see the\nstatus for ALE in a nice format, it is recommended to use vim-airline with ALE.\nThe airline extension can be enabled by adding the following to your vimrc:\n\n```vim\n" Set this. Airline will handle the rest.\nlet g:airline#extensions#ale#enabled = 1\n```\n\nIf you don\'t want to use vim-airline, you can implement your own statusline\nfunction without adding any other plugins. ALE provides some functions to\nassist in this endeavour, including:\n\n* `ale#statusline#Count`: Which returns the number of problems found by ALE\n  for a specified buffer.\n* `ale#statusline#FirstProblem`: Which returns a dictionary containing the\n  full loclist details of the first problem of a specified type found by ALE\n  in a buffer. (e.g. The first style warning in the current buffer.)\n  This can be useful for displaying more detailed information such as the\n  line number of the first problem in a file.\n\nSay you want to display all errors as one figure, and all non-errors as another\nfigure. You can do the following:\n\n```vim\nfunction! LinterStatus() abort\n    let l:counts = ale#statusline#Count(bufnr(\'\'))\n\n    let l:all_errors = l:counts.error + l:counts.style_error\n    let l:all_non_errors = l:counts.total - l:all_errors\n\n    return l:counts.total == 0 ? \'OK\' : printf(\n    \\   \'%dW %dE\',\n    \\   all_non_errors,\n    \\   all_errors\n    \\)\nendfunction\n\nset statusline=%{LinterStatus()}\n```\n\nSee `:help ale#statusline#Count()` or `:help ale#statusline#FirstProblem()`\nfor more information.\n\n<a name="faq-lightline"></a>\n\n### 5.vi. How can I show errors or warnings in my lightline?\n\n[lightline](https://github.com/itchyny/lightline.vim) does not have built-in\nsupport for ALE, nevertheless there is a plugin that adds this functionality: [maximbaz/lightline-ale](https://github.com/maximbaz/lightline-ale).\n\nFor more information, check out the sources of that plugin, `:help ale#statusline#Count()` and [lightline documentation](https://github.com/itchyny/lightline.vim#advanced-configuration).\n\n<a name="faq-echo-format"></a>\n\n### 5.vii. How can I change the format for echo messages?\n\nThere are 3 global options that allow customizing the echoed message.\n\n- `g:ale_echo_msg_format` where:\n    * `%s` is the error message itself\n    * `%...code...%` is an optional error code, and most characters can be\n      written between the `%` characters.\n    * `%linter%` is the linter name\n    * `%severity%` is the severity type\n- `g:ale_echo_msg_error_str` is the string used for error severity.\n- `g:ale_echo_msg_warning_str` is the string used for warning severity.\n\nSo for example this:\n\n```vim\nlet g:ale_echo_msg_error_str = \'E\'\nlet g:ale_echo_msg_warning_str = \'W\'\nlet g:ale_echo_msg_format = \'[%linter%] %s [%severity%]\'\n```\n\nWill give you:\n\n![Echoed message](https://user-images.githubusercontent.com/3518142/59195927-348bd000-8b85-11e9-88b6-508a094f1548.png)\n\nSee `:help g:ale_echo_msg_format` for more information.\n\n<a name="faq-autocmd"></a>\n\n### 5.viii. How can I execute some code when ALE starts or stops linting?\n\nALE runs its own [autocmd](http://vimdoc.sourceforge.net/htmldoc/autocmd.html)\nevents when a lint or fix cycle are started and stopped. There is also an event\nthat runs when a linter job has been successfully started. These events can be\nused to call arbitrary functions during these respective parts of the ALE\'s\noperation.\n\n```vim\naugroup YourGroup\n    autocmd!\n    autocmd User ALELintPre    call YourFunction()\n    autocmd User ALELintPost   call YourFunction()\n\n    autocmd User ALEJobStarted call YourFunction()\n\n    autocmd User ALEFixPre     call YourFunction()\n    autocmd User ALEFixPost    call YourFunction()\naugroup END\n```\n\n<a name="faq-navigation"></a>\n\n### 5.ix. How can I navigate between errors quickly?\n\nALE offers some commands with `<Plug>` keybinds for moving between warnings and\nerrors quickly. You can map the keys Ctrl+j and Ctrl+k to moving between errors\nfor example:\n\n```vim\nnmap <silent> <C-k> <Plug>(ale_previous_wrap)\nnmap <silent> <C-j> <Plug>(ale_next_wrap)\n```\n\nFor more information, consult the online documentation with\n`:help ale-navigation-commands`.\n\n<a name="faq-lint-on-save"></a>\n\n### 5.x. How can I run linters only when I save files?\n\nALE offers an option `g:ale_lint_on_save` for enabling running the linters\nwhen files are saved. This option is enabled by default. If you only\nwish to run linters when files are saved, you can turn the other\noptions off.\n\n```vim\n" Write this in your vimrc file\nlet g:ale_lint_on_text_changed = \'never\'\nlet g:ale_lint_on_insert_leave = 0\n" You can disable this option too\n" if you don\'t want linters to run on opening a file\nlet g:ale_lint_on_enter = 0\n```\n\nIf for whatever reason you don\'t wish to run linters again when you save\nfiles, you can set `g:ale_lint_on_save` to `0`.\n\n<a name="faq-quickfix"></a>\n\n### 5.xi. How can I use the quickfix list instead of the loclist?\n\nThe quickfix list can be enabled by turning the `g:ale_set_quickfix`\noption on. If you wish to also disable the loclist, you can disable\nthe `g:ale_set_loclist` option.\n\n```vim\n" Write this in your vimrc file\nlet g:ale_set_loclist = 0\nlet g:ale_set_quickfix = 1\n```\n\nIf you wish to show Vim windows for the loclist or quickfix items\nwhen a file contains warnings or errors, `g:ale_open_list` can be\nset to `1`. `g:ale_keep_list_window_open` can be set to `1`\nif you wish to keep the window open even after errors disappear.\n\n```vim\nlet g:ale_open_list = 1\n" Set this if you want to.\n" This can be useful if you are combining ALE with\n" some other plugin which sets quickfix errors, etc.\nlet g:ale_keep_list_window_open = 1\n```\n\nYou can also set `let g:ale_list_vertical = 1` to open the windows vertically\ninstead of the default horizontally.\n\n<a name="faq-jsx-stylelint-eslint"></a>\n\n### 5.xii. How can I check JSX files with both stylelint and eslint?\n\nIf you configure ALE options correctly in your vimrc file, and install\nthe right tools, you can check JSX files with stylelint and eslint.\n\nFirst, install eslint and install stylelint with\n[stylelint-processor-styled-components](https://github.com/styled-components/stylelint-processor-styled-components).\n\nSupposing you have installed both tools correctly, configure your .jsx files so\n`jsx` is included in the filetype. You can use an `autocmd` for this.\n\n```vim\naugroup FiletypeGroup\n    autocmd!\n    au BufNewFile,BufRead *.jsx set filetype=javascript.jsx\naugroup END\n```\n\nSupposing the filetype has been set correctly, you can set the following\noptions in a jsx.vim ftplugin file.\n\n```vim\n" In ~/.vim/ftplugin/jsx.vim, or somewhere similar.\nlet b:ale_linter_aliases = [\'css\', \'javascript\']\nlet b:ale_linters = [\'stylelint\', \'eslint\']\n```\n\nOr if you want, you can configure the linters from your vimrc file.\n\n```vim\n" In ~/.vim/vimrc, or somewhere similar.\nlet g:ale_linter_aliases = {\'jsx\': [\'css\', \'javascript\']}\nlet g:ale_linters = {\'jsx\': [\'stylelint\', \'eslint\']}\n```\n\nALE will alias the `jsx` filetype so it uses the `css` filetype linters, and\nuse the original Array of selected linters for `jsx` from the `g:ale_linters`\nobject. All available linters will be used for the filetype `javascript`, and\nno linter will be run twice for the same file.\n\n<a name="faq-vue-eslint"></a>\n\n### 5.xiii. How can I check Vue files with ESLint?\n\nTo check Vue files with ESLint, your ESLint project configuration file must be\nconfigured to use the [Vue plugin](https://github.com/vuejs/eslint-plugin-vue).\nAfter that, you need to configure ALE so it will run the JavaScript ESLint\nlinter on your files. The settings you need are similar to the settings needed\nfor checking JSX code with both stylelint and ESLint, in the previous section.\n\n```vim\n" In ~/.vim/ftplugin/vue.vim, or somewhere similar.\n\n" Run both javascript and vue linters for vue files.\nlet b:ale_linter_aliases = [\'javascript\', \'vue\']\n" Select the eslint and vls linters.\nlet b:ale_linters = [\'eslint\', \'vls\']\n```\n\nRun `:ALEInfo` to see which linters are available after telling ALE to run\nJavaScript linters on Vue files. Not all linters support checking Vue files.\n\nIf you don\'t want to configure your linters in ftplugin files for some reason,\nyou can configure them from your vimrc file instead.\n\n```vim\n" In ~/.vim/vimrc, or somewhere similar.\nlet g:ale_linter_aliases = {\'vue\': [\'vue\', \'javascript\']}\nlet g:ale_linters = {\'vue\': [\'eslint\', \'vls\']}\n```\n\n<a name="faq-my-battery-is-sad"></a>\n\n### 5.xiv. Will this plugin eat all of my laptop battery power?\n\nALE takes advantage of the power of various tools to check your code. This of\ncourse means that CPU time will be used to continuously check your code. If you\nare concerned about the CPU time ALE will spend, which will of course imply\nsome cost to battery life, you can adjust your settings to make your CPU do\nless work.\n\nFirst, consider increasing the delay before which ALE will run any linters\nwhile you type. ALE uses a timeout which is cancelled and reset every time you\ntype, and this delay can be increased so linters are run less often. See\n`:help g:ale_lint_delay` for more information.\n\nIf you don\'t wish to run linters while you type, you can disable that behaviour.\nSet `g:ale_lint_on_text_changed` to `never`. You won\'t get as frequent error\nchecking, but ALE shouldn\'t block your ability to edit a document after you save\na file, so the asynchronous nature of the plugin will still be an advantage.\n\nIf you are still concerned, you can turn the automatic linting off altogether,\nincluding the option `g:ale_lint_on_enter`, and you can run ALE manually with\n`:ALELint`.\n\n<a name="faq-c-configuration"></a>\n\n### 5.xv. How can I configure my C or C++ project?\n\nThe structure of C and C++ projects varies wildly from project to project, with\nmany different build tools being used for building them, and many different\nformats for project configuration files. ALE can run compilers easily, but\nALE cannot easily detect which compiler flags to use.\n\nSome tools and build configurations can generate\n[compile_commands.json](https://clang.llvm.org/docs/JSONCompilationDatabase.html)\nfiles. The `cppcheck`, `clangcheck`, `clangtidy` and `cquery` linters can read\nthese files for automatically determining the appropriate compiler flags to\nuse.\n\nFor linting with compilers like `gcc` and `clang`, and with other tools, you\nwill need to tell ALE which compiler flags to use yourself. You can use\ndifferent options for different projects with the `g:ale_pattern_options`\nsetting.  Consult the documentation for that setting for more information.\n`b:ale_linters` can be used to select which tools you want to run, say if you\nwant to use only `gcc` for one project, and only `clang` for another.\n\nYou may also configure buffer-local settings for linters with project-specific\nvimrc files. [local_vimrc](https://github.com/LucHermitte/local_vimrc) can be\nused for executing local vimrc files which can be shared in your project.\n\n<a name="faq-buffer-configuration"></a>\n\n### 5.xvi. How can I configure ALE differently for different buffers?\n\nALE offers various ways to configure which linters or fixers are run, and\nother settings. For the majority of ALE\'s settings, they can either be\nconfigured globally with a `g:` variable prefix, or for a specific buffer\nwith a `b:` variable prefix. For example, you can configure a Python ftplugin\nfile like so.\n\n```vim\n" In ~/.vim/ftplugin/python.vim\n\n" Check Python files with flake8 and pylint.\nlet b:ale_linters = [\'flake8\', \'pylint\']\n" Fix Python files with autopep8 and yapf.\nlet b:ale_fixers = [\'autopep8\', \'yapf\']\n" Disable warnings about trailing whitespace for Python files.\nlet b:ale_warn_about_trailing_whitespace = 0\n```\n\nFor configuring files based on regular expression patterns matched against the\nabsolute path to a file, you can use `g:ale_pattern_options`.\n\n```vim\n" Do not lint or fix minified files.\nlet g:ale_pattern_options = {\n\\ \'\\.min\\.js$\': {\'ale_linters\': [], \'ale_fixers\': []},\n\\ \'\\.min\\.css$\': {\'ale_linters\': [], \'ale_fixers\': []},\n\\}\n" If you configure g:ale_pattern_options outside of vimrc, you need this.\nlet g:ale_pattern_options_enabled = 1\n```\n\nBuffer-local variables for settings always override the global settings.\n\n<a name="faq-list-window-height"></a>\n\n### 5.xvii. How can I configure the height of the list in which ALE displays errors?\n\nTo set a default height for the error list, use the `g:ale_list_window_size` variable.\n\n```vim\n" Show 5 lines of errors (default: 10)\nlet g:ale_list_window_size = 5\n```\n\n<a name="faq-get-info"></a>\n\n### 5.xviii. How can I see what ALE has configured for the current file?\n\nRun the following to see what is currently configured:\n\n```vim\n:ALEInfo\n```\n'