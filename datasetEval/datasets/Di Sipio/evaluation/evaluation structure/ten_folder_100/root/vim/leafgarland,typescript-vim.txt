b"Typescript Syntax for Vim\n=========================\n\nSyntax file and other settings for [TypeScript](http://typescriptlang.org). The\nsyntax file is taken from this [blog\npost](http://blogs.msdn.com/b/interoperability/archive/2012/10/01/sublime-text-vi-emacs-typescript-enabled.aspx).\n\nCheckout [Tsuquyomi](https://github.com/Quramy/tsuquyomi) for omni-completion\nand other features for TypeScript editing.\n\nInstall\n-------\n\nFrom Vim 8 onward, the plugin can be installed as simply as:\n```\ngit clone https://github.com/leafgarland/typescript-vim.git ~/.vim/pack/typescript/start/typescript-vim\n```\n\nFor older versions of Vim, the simplest way to install is via a Vim add-in manager such as\n[Plug](https://github.com/junegunn/vim-plug),\n[Vundle](https://github.com/gmarik/vundle) or\n[Pathogen](https://github.com/tpope/vim-pathogen/).\n\n_See the [Installation Wiki](https://github.com/leafgarland/typescript-vim/wiki/Installation)_\n\n### Pathogen\n\n```\ngit clone https://github.com/leafgarland/typescript-vim.git ~/.vim/bundle/typescript-vim\n```\n\nIf you want to install manually then you need to copy the files from this\nrepository into your vim path, see the vim docs for [:help\nruntimepath](http://vimdoc.sourceforge.net/htmldoc/options.html#'runtimepath')\nfor more information. This might be as simple as copying the files and\ndirectories to `~/.vim/` but it depends on your Vim install and operating\nsystem.\n\nUsage\n-----\n\nOnce the files are installed the syntax highlighting and other settings will be\nautomatically enabled anytime you edit a `.ts` file.\n\nIndenting\n---------\n\nThis plugin includes a custom indenter (based on [pangloss/vim-javascript's\nindenter](https://github.com/pangloss/vim-javascript/blob/master/indent/javascript.vim)),\nit works pretty well but there are cases where it fails. If these bother you or\nwant to use other indent settings you can disable it by setting a flag in your\n`.vimrc`:\n\n```vim\nlet g:typescript_indent_disable = 1\n```\n\nIf you want the indenter to automatically indent chained method calls as you type.\n\n```typescript\nsomething\n    .foo()\n    .bar();\n```\n\nThen add something like `setlocal indentkeys+=0.` to your `.vimrc`, see `:help\n'indentkeys'` in vim for more information.\n\nIf you use the `=` operator to re-indent code it will always indent\nchained method calls - this can be disabled by changing the regex the\nindent script uses to identify indented lines. In this case removing '.'\nfrom the regex means that it wont indent lines starting with '.'. Note,\nthis is not ideal as the regex may change making your setting out of date.\n\n```vim\nlet g:typescript_opfirst='\\%([<>=,?^%|*/&]\\|\\([-:+]\\)\\1\\@!\\|!=\\|in\\%(stanceof\\)\\=\\>\\)'\n```\n\nCompiler settings\n-----------------\n\nThis plugin contains compiler settings to set `makeprg` and `errorformat`. \nThe compiler settings enable you to call the `tsc` compiler directly from Vim\nand display any errors or warnings in Vim's QuickFix window. \n\nTo run the compiler, enter `:make`, this will run `tsc` against the last saved\nversion of your currently edited file.\n\nThe default for `makeprg` is `tsc $* %`. You can enter other compiler options into your `:make`\ncommand line and they will be inserted in place of `$*`.\n\nThere are options to change the compiler name and to insert default options.\n\n```vim\nlet g:typescript_compiler_binary = 'tsc'\nlet g:typescript_compiler_options = ''\n```\n\nThese options will be passed to the binary as command arguments. For example,\nif `g:typescript_compiler_binary = 'tsc'` and `g:typescript_compiler_options = '--lib es6'`,\n`l:makeprg` will be: `tsc --lib es6 $* %`.\n\nYou can completely override this plugin's compiler settings with something like\nthis in your `.vimrc`, where you can set makeprg to whatever you want.\n\n```vim\n  autocmd FileType typescript :set makeprg=tsc\n```\n\nNote, this plugin's compiler settings are not used by Syntastic which has its own\nway of changing the options. See https://github.com/scrooloose/syntastic#faqargs.\n\nYou can use something like this in your `.vimrc` to make the QuickFix\nwindow automatically appear if `:make` has any errors.\n\n```vim\nautocmd QuickFixCmdPost [^l]* nested cwindow\nautocmd QuickFixCmdPost    l* nested lwindow\n```\n\nSyntax highlighting\n-------------------\n\nSyntax highlighting for TypeScript can be customized by following variables.\n\n- `g:typescript_ignore_typescriptdoc`: When this variable is defined, doccomments will not be\n  highlighted.\n- `g:typescript_ignore_browserwords`: When this variable is set to `1`, browser API names such as\n  `window` or `document` will not be highlighted. (default to `0`)\n\n![Obligatory screenshot](https://raw.github.com/leafgarland/typescript-vim/master/vimshot01.png)\n"