b'<h2 align="center"><img src="https://raw.githubusercontent.com/VSCodeVim/Vim/master/images/icon.png" height="128"><br>VSCodeVim</h2>\n<p align="center"><strong>Vim emulation for Visual Studio Code</strong></p>\n\n[![http://aka.ms/vscodevim](https://vsmarketplacebadge.apphb.com/version/vscodevim.vim.svg)](http://aka.ms/vscodevim)\n[![](https://vsmarketplacebadge.apphb.com/installs-short/vscodevim.vim.svg)](https://marketplace.visualstudio.com/items?itemName=vscodevim.vim)\n[![https://travis-ci.org/VSCodeVim/Vim](https://travis-ci.org/VSCodeVim/Vim.svg?branch=master)](https://travis-ci.org/VSCodeVim/Vim)\n[![https://vscodevim.herokuapp.com/](https://img.shields.io/badge/vscodevim-slack-blue.svg?logo=slack)](https://vscodevim.herokuapp.com/)\n\nVSCodeVim is a Vim emulator for [Visual Studio Code](https://code.visualstudio.com/).\n\n- \xf0\x9f\x9a\x9a For a full list of supported Vim features, please refer to our [roadmap](ROADMAP.md).\n- \xf0\x9f\x93\x83 Our [change log](CHANGELOG.md) outlines the breaking/major/minor updates between releases.\n- \xe2\x9d\x93 If you need to ask any questions, join us on [Slack](https://vscodevim.herokuapp.com/)\n- Report missing features/bugs on [GitHub](https://github.com/VSCodeVim/Vim/issues).\n\n<details>\n <summary><strong>Table of Contents</strong> (click to expand)</summary>\n\n- [Installation](#-installation)\n  - [Mac setup](#mac)\n  - [Windows setup](#windows)\n  - [Linux setup](#linux-setup)\n- [Settings](#%EF%B8%8F-settings)\n  - [VSCodeVim settings](#vscodevim-settings)\n  - [Neovim Integration](#neovim-integration)\n  - [Key remapping](#key-remapping)\n  - [Vim settings](#vim-settings)\n- [Multi-Cursor mode](#%EF%B8%8F-multi-cursor-mode)\n- [Emulated plugins](#-emulated-plugins)\n  - [vim-airline](#vim-airline)\n  - [vim-easymotion](#vim-easymotion)\n  - [vim-surround](#vim-surround)\n  - [vim-commentary](#vim-commentary)\n  - [vim-indent-object](#vim-indent-object)\n  - [vim-sneak](#vim-sneak)\n  - [CamelCaseMotion](#camelcasemotion)\n  - [Input Method](#input-method)\n  - [ReplaceWithRegister](#replacewithregister)\n- [VSCodeVim tricks](#-vscodevim-tricks)\n- [F.A.Q / Troubleshooting](#-faq)\n- [Contributing](#\xef\xb8\x8f-contributing)\n\n</details>\n\n## \xf0\x9f\x92\xbe Installation\n\nVSCodeVim is automatically enabled following [installation](https://marketplace.visualstudio.com/items?itemName=vscodevim.vim) and reloading of VS Code.\n\n### Mac\n\nTo enable key-repeating execute the following in your Terminal and restart VS Code:\n\n```sh\n$ defaults write com.microsoft.VSCode ApplePressAndHoldEnabled -bool false         # For VS Code\n$ defaults write com.microsoft.VSCodeInsiders ApplePressAndHoldEnabled -bool false # For VS Code Insider\n$ defaults delete -g ApplePressAndHoldEnabled                                      # If necessary, reset global default\n```\n\nWe also recommend increasing Key Repeat and Delay Until Repeat settings in _System Preferences -> Keyboard_.\n\n### Windows\n\nLike real vim, VSCodeVim will take over your control keys. This behaviour can be adjusted with the [`useCtrlKeys`](#vscodevim-settings) and [`handleKeys`](#vscodevim-settings) settings.\n\n## \xe2\x9a\x99\xef\xb8\x8f Settings\n\nThe settings documented here are a subset of the supported settings; the full list is described in the `Contributions` tab in the extensions menu of VS Code.\n\n### Quick Example\n\nBelow is an example of a [settings.json](https://code.visualstudio.com/Docs/customization/userandworkspace) file with settings relevant to VSCodeVim:\n\n```json\n{\n  "vim.easymotion": true,\n  "vim.sneak": true,\n  "vim.incsearch": true,\n  "vim.useSystemClipboard": true,\n  "vim.useCtrlKeys": true,\n  "vim.hlsearch": true,\n  "vim.insertModeKeyBindings": [\n    {\n      "before": ["j", "j"],\n      "after": ["<Esc>"]\n    }\n  ],\n  "vim.normalModeKeyBindingsNonRecursive": [\n    {\n      "before": ["<leader>", "d"],\n      "after": ["d", "d"]\n    },\n    {\n      "before": ["<C-n>"],\n      "commands": [":nohl"]\n    }\n  ],\n  "vim.leader": "<space>",\n  "vim.handleKeys": {\n    "<C-a>": false,\n    "<C-f>": false\n  }\n}\n```\n\n### VSCodeVim settings\n\nThese settings are specific to VSCodeVim.\n\n| Setting                          | Description                                                                                                                                                                                                                                                                                                                                                                                                                      | Type    | Default Value                         |\n| -------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------- | ------------------------------------- |\n| vim.changeWordIncludesWhitespace | Include trailing whitespace when changing word. This configures the <kbd>cw</kbd> action to act consistently as its siblings (<kbd>yw</kbd> and <kbd>dw</kbd>) instead of acting as <kbd>ce</kbd>.                                                                                                                                                                                                                               | Boolean | false                                 |\n| vim.cursorStylePerMode._{Mode}_  | Configure a specific cursor style for _{Mode}_. Omitted modes will use [default cursor type](https://github.com/VSCodeVim/Vim/blob/4a6fde6dbd4d1fac1f204c0dc27c32883651ef1a/src/mode/mode.ts#L34) Supported cursors: line, block, underline, line-thin, block-outline, and underline-thin.                                                                                                                                       | String  | None                                  |\n| vim.digraphs._{shorthand}_       | Set custom digraph shorthands that can override the default ones. Entries should map a two-character shorthand to a descriptive string and one or more UTF16 code points. Example: `"R!": ["\xf0\x9f\x9a\x80", [55357, 56960]]`                                                                                                                                                                                                                | object  | `{"R!": ["\xf0\x9f\x9a\x80", [0xD83D, 0xDE80]]`     |  |\n| vim.debug.silent                 | Boolean indicating whether log messages will be suppressed.                                                                                                                                                                                                                                                                                                                                                                      | Boolean | false                                 |\n| vim.debug.loggingLevelForConsole | Maximum level of messages to log to console. Logs are visible in the [developer tools](https://code.visualstudio.com/docs/extensions/developing-extensions#_developer-tools-console). Supported values: \'error\', \'warn\', \'info\', \'verbose\', \'debug\').                                                                                                                                                                            | String  | error                                 |\n| vim.debug.loggingLevelForAlert   | Maximum level of messages to present as VS Code information window. Supported values: \'error\', \'warn\', \'info\', \'verbose\', \'debug\').                                                                                                                                                                                                                                                                                              | String  | error                                 |\n| vim.disableExtension             | Disable VSCodeVim extension. This setting can also be toggled using `toggleVim` command in the Command Palette                                                                                                                                                                                                                                                                                                                   | Boolean | false                                 |\n| vim.handleKeys                   | Delegate configured keys to be handled by VSCode instead of by the VSCodeVim extension. Any key in `keybindings` section of the [package.json](https://github.com/VSCodeVim/Vim/blob/master/package.json) that has a `vim.use<C-...>` in the when argument can be delegated back to VS Code by setting `"<C-...>": false`. Example: to use `ctrl+f` for find (native VS Code behaviour): `"vim.handleKeys": { "<C-f>": false }`. | String  | `"<C-d>": true`                       |\n| vim.overrideCopy                 | Override VS Code\'s copy command with our own, which works correctly with VSCodeVim. If cmd-c/ctrl-c is giving you issues, set this to false and complain [here](https://github.com/Microsoft/vscode/issues/217).                                                                                                                                                                                                                 | Boolean | false                                 |\n| vim.searchHighlightColor         | Set the color of search highlights                                                                                                                                                                                                                                                                                                                                                                                               | String  | `editor.findMatchHighlightBackground` |\n| vim.startInInsertMode            | Start in Insert mode instead of Normal Mode                                                                                                                                                                                                                                                                                                                                                                                      | Boolean | false                                 |\n| vim.gdefault                     | `/g` flag in a substitute command replaces all occurrences in the line. Without this flag, replacement occurs only for the first occurrence in each line. With this setting enabled, the `g` is on by default.                                                                                                                                                                                                                   | Boolean | false                                 |\n| vim.useCtrlKeys                  | Enable Vim ctrl keys overriding common VS Code operations such as copy, paste, find, etc.                                                                                                                                                                                                                                                                                                                                        | Boolean | true                                  |\n| vim.visualstar                   | In visual mode, start a search with `*` or `#` using the current selection                                                                                                                                                                                                                                                                                                                                                       | Boolean | false                                 |\n| vim.highlightedyank.enable       | Enable highlighting when yanking                                                                                                                                                                                                                                                                                                                                                                                                 | Boolean | false                                 |\n| vim.highlightedyank.color        | Set the color of yank highlights                                                                                                                                                                                                                                                                                                                                                                                                 | String  | rgba(250, 240, 170, 0.5)              |\n| vim.highlightedyank.duration     | Set the duration of yank highlights                                                                                                                                                                                                                                                                                                                                                                                              | Number  | 200                                   |\n\n### Neovim Integration\n\n> :warning: Experimental feature. Please leave feedback on neovim integration [here](https://github.com/VSCodeVim/Vim/issues/1735).\n\nTo leverage neovim for Ex-commands,\n\n1.  Install [neovim](https://github.com/neovim/neovim/wiki/Installing-Neovim)\n2.  Modify the following configurations:\n\n| Setting          | Description                                                                                                             | Type    | Default Value |\n| ---------------- | ----------------------------------------------------------------------------------------------------------------------- | ------- | ------------- |\n| vim.enableNeovim | Enable Neovim                                                                                                           | Boolean | false         |\n| vim.neovimPath   | Full path to neovim executable. If left empty, PATH environment variable will be automatically checked for neovim path. | String  |               |\n\nHere\'s some ideas on what you can do with neovim integration:\n\n- [The power of g](http://vim.wikia.com/wiki/Power_of_g)\n- [The :normal command](https://vi.stackexchange.com/questions/4418/execute-normal-command-over-range)\n- Faster search and replace!\n\n### Key Remapping\n\nCustom remappings are defined on a per-mode basis.\n\n#### `"vim.insertModeKeyBindings"`/`"vim.normalModeKeyBindings"`/`"vim.visualModeKeyBindings"`\n\n- Keybinding overrides to use for insert, normal, and visual modes.\n- Bind `jj` to `<Esc>` in insert mode:\n\n```json\n    "vim.insertModeKeyBindings": [\n        {\n            "before": ["j", "j"],\n            "after": ["<Esc>"]\n        }\n    ]\n```\n\n- Bind `\xc2\xa3` to goto previous whole word under cursor\n\n```json\n    "vim.normalModeKeyBindings": [\n        {\n            "before": ["\xc2\xa3"],\n            "after": ["#"]\n        }\n    ]\n```\n\n- Bind `:` to show the command palette:\n\n```json\n    "vim.normalModeKeyBindingsNonRecursive": [\n        {\n            "before": [":"],\n            "commands": [\n                "workbench.action.showCommands",\n            ]\n        }\n    ]\n```\n\n- Bind `<leader>m` to add a bookmark and `<leader>b` to open the list of all bookmarks (using the [Bookmarks](https://marketplace.visualstudio.com/items?itemName=alefragnani.Bookmarks) extension):\n\n```json\n    "vim.normalModeKeyBindingsNonRecursive": [\n        {\n            "before": ["<leader>", "m"],\n            "commands": [\n                "bookmarks.toggle"\n            ]\n        },\n        {\n            "before": ["<leader>", "b"],\n            "commands": [\n                "bookmarks.list"\n            ]\n        }\n    ]\n```\n\n- Bind `ZZ` to the vim command `:wq` (save and close the current file):\n\n```json\n    "vim.normalModeKeyBindingsNonRecursive": [\n        {\n            "before": ["Z", "Z"],\n            "commands": [\n                ":wq"\n            ]\n        }\n    ]\n```\n\n- Bind `ctrl+n` to turn off search highlighting and `<leader>w` to save the current file:\n\n```json\n    "vim.normalModeKeyBindingsNonRecursive": [\n        {\n            "before":["<C-n>"],\n            "commands": [\n                ":nohl",\n            ]\n        },\n        {\n            "before": ["leader", "w"],\n            "commands": [\n                "workbench.action.files.save",\n            ]\n        }\n    ]\n```\n\n- Bind `p` in visual mode to paste without overriding the current register\n\n```json\n    "vim.visualModeKeyBindingsNonRecursive": [\n        {\n            "before": [\n                "p",\n            ],\n            "after": [\n                "p",\n                "g",\n                "v",\n                "y"\n            ]\n        }\n    ],\n```\n\n- Bind `>` and `<` in visual mode to indent/outdent lines (repeatable)\n\n```json\n    "vim.visualModeKeyBindingsNonRecursive": [\n        {\n            "before": [\n                ">"\n            ],\n            "commands": [\n                "editor.action.indentLines"\n            ]\n        },\n        {\n            "before": [\n                "<"\n            ],\n            "commands": [\n                "editor.action.outdentLines"\n            ]\n        },\n    ]\n```\n\n- Bind `<leader>vim` to clone this repository to the selected location.\n\n```json\n    "vim.visualModeKeyBindingsNonRecursive": [\n        {\n            "before": [\n                "<leader>", "v", "i", "m"\n            ],\n            "commands": [\n                {\n                    "command": "git.clone",\n                    "args": [ "https://github.com/VSCodeVim/Vim.git" ]\n                }\n            ]\n        }\n    ]\n```\n\n#### `"vim.insertModeKeyBindingsNonRecursive"`/`"normalModeKeyBindingsNonRecursive"`/`"visualModeKeyBindingsNonRecursive"`\n\n- Non-recursive keybinding overrides to use for insert, normal, and visual modes\n- _Example:_ Bind `j` to `gj`. Notice that if you attempted this binding normally, the j in gj would be expanded into gj, on and on forever. Stop this recursive expansion using insertModeKeyBindingsNonRecursive and/or normalModeKeyBindingNonRecursive.\n\n```json\n    "vim.normalModeKeyBindingsNonRecursive": [\n        {\n            "before": ["j"],\n            "after": ["g", "j"]\n        }\n    ]\n```\n\n#### Debugging Remappings\n\n1.  Are your configurations correct?\n\n    Adjust the extension\'s [logging level](#vscodevim-settings) to \'debug\', restart VS Code. As each remapped configuration is loaded, it is outputted to console. In the Developer Tools console, do you see any errors?\n\n    ```console\n    debug: Remapper: normalModeKeyBindingsNonRecursive. before=0. after=^.\n    debug: Remapper: insertModeKeyBindings. before=j,j. after=<Esc>.\n    error: Remapper: insertModeKeyBindings. Invalid configuration. Missing \'after\' key or \'command\'. before=j,k.\n    ```\n\n    Misconfigured configurations are ignored.\n\n2.  Does the extension handle the keys you are trying to remap?\n\n    VSCodeVim explicitly instructs VS Code which key events we care about through the [package.json](https://github.com/VSCodeVim/Vim/blob/1a5f358a1a57c62d5079093ad0dd12c2bf018bba/package.json#L53). If the key you are trying to remap is a key in which vim/vscodevim generally does not handle, then it\'s most likely that this extension does not receive those key events from VS Code. With [logging level](#vscodevim-settings) adjusted to \'debug\', as you press keys, you should see output similar to:\n\n    ```console\n    debug: ModeHandler: handling key=A.\n    debug: ModeHandler: handling key=l.\n    debug: ModeHandler: handling key=<BS>.\n    debug: ModeHandler: handling key=<C-a>.\n    ```\n\n    As you press the key that you are trying to remap, do you see it outputted here? If not, it means we don\'t subscribe to those key events.\n\n### Vim settings\n\nConfiguration settings that have been copied from vim. Vim settings are loaded in the following sequence:\n\n1.  `:set {setting}`\n2.  `vim.{setting}` from user/workspace settings.\n3.  VS Code settings\n4.  VSCodeVim default values\n\n| Setting          | Description                                                                                                                                                                                                                                                           | Type    | Default Value |\n| ---------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------- | ------------- |\n| vim.autoindent   | Copy indent from current line when starting a new line                                                                                                                                                                                                                | Boolean | true          |\n| vim.hlsearch     | Highlights all text matching current search                                                                                                                                                                                                                           | Boolean | false         |\n| vim.ignorecase   | Ignore case in search patterns                                                                                                                                                                                                                                        | Boolean | true          |\n| vim.incsearch    | Show the next match while entering a search                                                                                                                                                                                                                           | Boolean | true          |\n| vim.leader       | Defines key for `<leader>` to be used in key remappings                                                                                                                                                                                                               | String  | `\\`           |\n| vim.showcmd      | Show (partial) command in status bar                                                                                                                                                                                                                                  | Boolean | true          |\n| vim.showmodename | Show name of current mode in status bar                                                                                                                                                                                                                               | Boolean | true          |\n| vim.smartcase    | Override the \'ignorecase\' setting if search pattern contains uppercase characters                                                                                                                                                                                     | Boolean | true          |\n| vim.textwidth    | Width to word-wrap when using `gq`                                                                                                                                                                                                                                    | Number  | 80            |\n| vim.timeout      | Timeout in milliseconds for remapped commands                                                                                                                                                                                                                         | Number  | 1000          |\n| vim.whichwrap    | Controls wrapping at beginning and end of line. Comma-separated set of keys that should wrap to next/previous line. Arrow keys are represented by `[` and `]` in insert mode, `<` and `>` in normal and visual mode. To wrap "everything", set this to `h,l,<,>,[,]`. | String  | ``            |\n| vim.report       | Threshold for reporting number of lines changed.                                                                                                                                                                                                                      | Number  | 2             |\n\n## .vimrc support\n\n> :warning: .vimrc support is currently experimental. Only remaps are supported, and you may experience bugs. Please [report them](https://github.com/VSCodeVim/Vim/issues/new?template=bug_report.md)!\n\nSet `vim.vimrc.enable` to `true` and set `vim.vimrc.path` appropriately.\n\n## \xf0\x9f\x96\xb1\xef\xb8\x8f Multi-Cursor Mode\n\n> :warning: Multi-Cursor mode is experimental. Please report issues in our [feedback thread.](https://github.com/VSCodeVim/Vim/issues/824)\n\nEnter multi-cursor mode by:\n\n- On OSX, `cmd-d`. On Windows, `ctrl-d`.\n- `gb`, a new shortcut we added which is equivalent to `cmd-d` (OSX) or `ctrl-d` (Windows). It adds another cursor at the next word that matches the word the cursor is currently on.\n- Running "Add Cursor Above/Below" or the shortcut on any platform.\n\nOnce you have multiple cursors, you should be able to use Vim commands as you see fit. Most should work; some are unsupported (ref [PR#587](https://github.com/VSCodeVim/Vim/pull/587)).\n\n- Each cursor has its own clipboard.\n- Pressing Escape in Multi-Cursor Visual Mode will bring you to Multi-Cursor Normal mode. Pressing it again will return you to Normal mode.\n\n## \xf0\x9f\x94\x8c Emulated Plugins\n\n### vim-airline\n\n> :warning: There are performance implications to using this plugin. In order to change the status bar, we override the configurations in your workspace settings.json which results in increased latency and a constant changing diff in your working directory (see [issue#2124](https://github.com/VSCodeVim/Vim/issues/2124)).\n\nChange the color of the status bar based on the current mode. Once enabled, configure `"vim.statusBarColors"`. Colors can be defined for each mode either as `string` (background only), or `string[]` (background, foreground).\n\n```json\n    "vim.statusBarColorControl": true,\n    "vim.statusBarColors.normal": ["#8FBCBB", "#434C5E"],\n    "vim.statusBarColors.insert": "#BF616A",\n    "vim.statusBarColors.visual": "#B48EAD",\n    "vim.statusBarColors.visualline": "#B48EAD",\n    "vim.statusBarColors.visualblock": "#A3BE8C",\n    "vim.statusBarColors.replace": "#D08770"\n    "vim.statusBarColors.commandlineinprogress": "#007ACC"\n    "vim.statusBarColors.searchinprogressmode": "#007ACC"\n    "vim.statusBarColors.easymotionmode": "#007ACC"\n    "vim.statusBarColors.easymotioninputmode": "#007ACC"\n    "vim.statusBarColors.surroundinputmode": "#007ACC"\n```\n\n### vim-easymotion\n\nBased on [vim-easymotion](https://github.com/easymotion/vim-easymotion) and configured through the following settings:\n\n| Setting                                    | Description                                                                                                                                                                                                                                                       | Type           | Default Value  |\n| ------------------------------------------ | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------- | -------------- |\n| vim.easymotion                             | Enable/disable easymotion plugin                                                                                                                                                                                                                                  | Boolean        | false          |\n| vim.easymotionMarkerBackgroundColor        | The background color of the marker box.                                                                                                                                                                                                                           |\n| vim.easymotionMarkerForegroundColorOneChar | The font color for one-character markers.                                                                                                                                                                                                                         |\n| vim.easymotionMarkerForegroundColorTwoChar | The font color for two-character markers, used to differentiate from one-character markers.                                                                                                                                                                       |\n| vim.easymotionMarkerWidthPerChar           | The width in pixels allotted to each character.                                                                                                                                                                                                                   |\n| vim.easymotionMarkerHeight                 | The height of the marker.                                                                                                                                                                                                                                         |\n| vim.easymotionMarkerFontFamily             | The font family used for the marker text.                                                                                                                                                                                                                         |\n| vim.easymotionMarkerFontSize               | The font size used for the marker text.                                                                                                                                                                                                                           |\n| vim.easymotionMarkerFontWeight             | The font weight used for the marker text.                                                                                                                                                                                                                         |\n| vim.easymotionMarkerYOffset                | The distance between the top of the marker and the text (will typically need some adjusting if height or font size have been changed).                                                                                                                            |\n| vim.easymotionKeys                         | The characters used for jump marker name                                                                                                                                                                                                                          |\n| vim.easymotionJumpToAnywhereRegex          | Custom regex to match for JumpToAnywhere motion (analogous to `Easymotion_re_anywhere`). Example setting (which also matches start & end of line, as well as Javascript comments in addition to the regular behavior (note the double escaping required): ^\\\\s\\*. | \\\\b[A-Za-z0-9] | [A-Za-z0-9]\\\\b | \\_. | \\\\#. | [a-z][a-z] | // | .\\$" |\n\nOnce easymotion is active, initiate motions using the following commands. After you initiate the motion, text decorators/markers will be displayed and you can press the keys displayed to jump to that position. `leader` is configurable and is `\\` by default.\n\n| Motion Command                      | Description                                                                                                 |\n| ----------------------------------- | ----------------------------------------------------------------------------------------------------------- |\n| `<leader><leader> s <char>`         | Search character                                                                                            |\n| `<leader><leader> f <char>`         | Find character forwards                                                                                     |\n| `<leader><leader> F <char>`         | Find character backwards                                                                                    |\n| `<leader><leader> t <char>`         | Til character forwards                                                                                      |\n| `<leader><leader> T <char>`         | Til character backwards                                                                                     |\n| `<leader><leader> w`                | Start of word forwards                                                                                      |\n| `<leader><leader> b`                | Start of word backwards                                                                                     |\n| `<leader><leader> l`                | matches beginning & ending of word, camelCase, after \\_ and after # forwards                                |\n| `<leader><leader> h`                | matches beginning & ending of word, camelCase, after \\_ and after # backwards                               |\n| `<leader><leader> e`                | End of word forwards                                                                                        |\n| `<leader><leader> ge`               | End of word backwards                                                                                       |\n| `<leader><leader> j`                | Start of line forwards                                                                                      |\n| `<leader><leader> k`                | Start of line backwards                                                                                     |\n| `<leader><leader> / <char>... <CR>` | Search n-character                                                                                          |\n| `<leader><leader><leader> bdt`      | Til character                                                                                               |\n| `<leader><leader><leader> bdw`      | Start of word                                                                                               |\n| `<leader><leader><leader> bde`      | End of word                                                                                                 |\n| `<leader><leader><leader> bdjk`     | Start of line                                                                                               |\n| `<leader><leader><leader> j`        | JumpToAnywhere motion; default behavior matches beginning & ending of word, camelCase, after \\_ and after # |\n\n`<leader><leader> (2s|2f|2F|2t|2T) <char><char>` and `<leader><leader><leader> bd2t <char>char>` are also available.\nThe difference is character count required for search.\nFor example, `<leader><leader> 2s <char><char>` requires two characters, and search by two characters.\nThis mapping is not a standard mapping, so it is recommended to use your custom mapping.\n\n### vim-surround\n\nBased on [surround.vim](https://github.com/tpope/vim-surround), the plugin is used to work with surrounding characters like parenthesis, brackets, quotes, and XML tags.\n\n| Setting      | Description                 | Type    | Default Value |\n| ------------ | --------------------------- | ------- | ------------- |\n| vim.surround | Enable/disable vim-surround | Boolean | true          |\n\n`t` or `<` as `<desired char>` or `<existing char>` will do tags and enter tag entry mode. Using `<CR>` instead of `>` to finish changing a tag will preserve any existing attributes.\n\n| Surround Command                     | Description                                                           |\n| ------------------------------------ | --------------------------------------------------------------------- |\n| `d s <existing char>`                | Delete existing surround                                              |\n| `c s <existing char> <desired char>` | Change surround existing to desired                                   |\n| `y s <motion> <desired char>`        | Surround something with something using motion (as in "you surround") |\n| `S <desired char>`                   | Surround when in visual modes (surrounds full selection)              |\n\nSome examples:\n\n- `"test"` with cursor inside quotes type cs"\' to end up with `\'test\'`\n- `"test"` with cursor inside quotes type ds" to end up with `test`\n- `"test"` with cursor inside quotes type cs"t and enter 123> to end up with `<123>test</123>`\n- `test` with cursor on word test type ysaw) to end up with `(test)`\n\n### vim-commentary\n\nSimilar to [vim-commentary](https://github.com/tpope/vim-commentary), but uses the VSCode native _Toggle Line Comment_ and _Toggle Block Comment_ features.\n\nUsage examples:\n\n- `gc` - toggles line comment. For example `gcc` to toggle line comment for current line and `gc2j` to toggle line comments for the current line and the next two lines.\n- `gC` - toggles block comment. For example `gCi)` to comment out everything within parenthesis.\n\n### vim-indent-object\n\nBased on [vim-indent-object](https://github.com/michaeljsmith/vim-indent-object), it allows for treating blocks of code at the current indentation level as text objects. Useful in languages that don\'t use braces around statements (e.g. Python).\n\nProvided there is a new line between the opening and closing braces / tag, it can be considered an agnostic `cib`/`ci{`/`ci[`/`cit`.\n\n| Command        | Description                                                                                          |\n| -------------- | ---------------------------------------------------------------------------------------------------- |\n| `<operator>ii` | This indentation level                                                                               |\n| `<operator>ai` | This indentation level and the line above (think `if` statements in Python)                          |\n| `<operator>aI` | This indentation level, the line above, and the line after (think `if` statements in C/C++/Java/etc) |\n\n### vim-sneak\n\nBased on [vim-sneak](https://github.com/justinmk/vim-sneak), it allows for jumping to any location specified by two characters.\n\n| Setting                            | Description                                                 | Type    | Default Value |\n| ---------------------------------- | ----------------------------------------------------------- | ------- | ------------- |\n| vim.sneak                          | Enable/disable vim-sneak                                    | Boolean | false         |\n| vim.sneakUseIgnorecaseAndSmartcase | Respect `vim.ignorecase` and `vim.smartcase` while sneaking | Boolean | false         |\n\nOnce sneak is active, initiate motions using the following commands. For operators sneak uses `z` instead of `s` because `s` is already taken by the surround plugin.\n\n| Motion Command            | Description                                                             |\n| ------------------------- | ----------------------------------------------------------------------- |\n| `s<char><char>`           | Move forward to the first occurrence of `<char><char>`                  |\n| `S<char><char>`           | Move backward to the first occurrence of `<char><char>`                 |\n| `<operator>z<char><char>` | Perform `<operator>` forward to the first occurrence of `<char><char>`  |\n| `<operator>Z<char><char>` | Perform `<operator>` backward to the first occurrence of `<char><char>` |\n\n### CamelCaseMotion\n\nBased on [CamelCaseMotion](https://github.com/bkad/CamelCaseMotion), though not an exact emulation. This plugin provides an easier way to move through camelCase and snake_case words.\n\n| Setting                    | Description                    | Type    | Default Value |\n| -------------------------- | ------------------------------ | ------- | ------------- |\n| vim.camelCaseMotion.enable | Enable/disable CamelCaseMotion | Boolean | false         |\n\nOnce CamelCaseMotion is enabled, the following motions are available:\n\n| Motion Command         | Description                                                                |\n| ---------------------- | -------------------------------------------------------------------------- |\n| `<leader>w`            | Move forward to the start of the next camelCase or snake_case word segment |\n| `<leader>e`            | Move forward to the next end of a camelCase or snake_case word segment     |\n| `<leader>b`            | Move back to the prior beginning of a camelCase or snake_case word segment |\n| `<operator>i<leader>w` | Select/change/delete/etc. the current camelCase or snake_case word segment |\n\nBy default, `<leader>` is mapped to `\\`, so for example, `d2i\\w` would delete the current and next camelCase word segment.\n\n### Input Method\n\nDisable input method when exiting Insert Mode.\n\n| Setting                                 | Description                                                                                      |\n| --------------------------------------- | ------------------------------------------------------------------------------------------------ |\n| `vim.autoSwitchInputMethod.enable`      | Boolean denoting whether autoSwitchInputMethod is on/off.                                        |\n| `vim.autoSwitchInputMethod.defaultIM`   | Default input method.                                                                            |\n| `vim.autoSwitchInputMethod.obtainIMCmd` | The full path to command to retrieve the current input method key.                               |\n| `vim.autoSwitchInputMethod.switchIMCmd` | The full path to command to switch input method, with `{im}` a placeholder for input method key. |\n\nAny third-party program can be used to switch input methods. The following will walkthrough the configuration using [im-select](https://github.com/daipeihust/im-select).\n\n1.  Install im-select (see [installation guide](https://github.com/daipeihust/im-select#installation))\n1.  Find your default input method key\n\n    - Mac:\n\n      Switch your input method to English, and run the following in your terminal: `/<path-to-im-select-installation>/im-select` to output your default input method. The table below lists the common English key layouts for MacOS.\n\n      | Key                            | Description |\n      | ------------------------------ | ----------- |\n      | com.apple.keylayout.US         | U.S.        |\n      | com.apple.keylayout.ABC        | ABC         |\n      | com.apple.keylayout.British    | British     |\n      | com.apple.keylayout.Irish      | Irish       |\n      | com.apple.keylayout.Australian | Australian  |\n      | com.apple.keylayout.Dvorak     | Dvorak      |\n      | com.apple.keylayout.Colemak    | Colemak     |\n\n    - Windows:\n\n      Refer to the [im-select guide](https://github.com/daipeihust/im-select#to-get-current-keyboard-locale) on how to discover your input method key. Generally, if your keyboard layout is en_US the input method key is 1033 (the locale ID of en_US). You can also find your locale ID from [this page](https://www.science.co.il/language/Locale-codes.php), where the `LCID Decimal` column is the locale ID.\n\n1.  Configure `vim.autoSwitchInputMethod`.\n\n    - MacOS:\n\n      Given the input method key of `com.apple.keylayout.US` and `im-select` located at `/usr/local/bin`. The configuration is:\n\n      ```json\n      "vim.autoSwitchInputMethod.enable": true,\n      "vim.autoSwitchInputMethod.defaultIM": "com.apple.keylayout.US",\n      "vim.autoSwitchInputMethod.obtainIMCmd": "/usr/local/bin/im-select",\n      "vim.autoSwitchInputMethod.switchIMCmd": "/usr/local/bin/im-select {im}"\n      ```\n\n    - Windows:\n\n      Given the input method key of `1033` (en_US) and `im-select.exe` located at `D:/bin`. The configuration is:\n\n      ```json\n      "vim.autoSwitchInputMethod.enable": true,\n      "vim.autoSwitchInputMethod.defaultIM": "1033",\n      "vim.autoSwitchInputMethod.obtainIMCmd": "D:\\\\bin\\\\im-select.exe",\n      "vim.autoSwitchInputMethod.switchIMCmd": "D:\\\\bin\\\\im-select.exe {im}"\n      ```\n\nThe `{im}` argument above is a command-line option that will be passed to `im-select` denoting the input method to switch to. If using an alternative program to switch input methods, you should add a similar option to the configuration. For example, if the program\'s usage is `my-program -s imKey` to switch input method, the `vim.autoSwitchInputMethod.switchIMCmd` should be `/path/to/my-program -s {im}`.\n\n### ReplaceWithRegister\n\nBased on [ReplaceWithRegister](https://github.com/vim-scripts/ReplaceWithRegister), an easy way to replace existing text with the contents of a register.\n\n| Setting                 | Description                        | Type    | Default Value |\n| ----------------------- | ---------------------------------- | ------- | ------------- |\n| vim.replaceWithRegister | Enable/disable ReplaceWithRegister | Boolean | false         |\n\nOnce active, type `gr` (say "go replace") followed by a motion to describe the text you want replaced by the contents of the register.\n\n| Motion Command          | Description                                                                             |\n| ----------------------- | --------------------------------------------------------------------------------------- |\n| `[count]["a]gr<motion>` | Replace the text described by the motion with the contents of the specified register    |\n| `[count]["a]grr`        | Replace the \\[count\\] lines or current line with the contents of the specified register |\n| `{Visual}["a]gr`        | Replace the selection with the contents of the specified register                       |\n\n## \xf0\x9f\x8e\xa9 VSCodeVim tricks!\n\nVSCode has a lot of nifty tricks and we try to preserve some of them:\n\n- `gd` - jump to definition.\n- `gq` - on a visual selection reflow and wordwrap blocks of text, preserving commenting style. Great for formatting documentation comments.\n- `gb` - adds another cursor on the next word it finds which is the same as the word under the cursor.\n- `af` - visual mode command which selects increasingly large blocks of text. For example, if you had "blah (foo [bar \'ba|z\'])" then it would select \'baz\' first. If you pressed `af` again, it\'d then select [bar \'baz\'], and if you did it a third time it would select "(foo [bar \'baz\'])".\n- `gh` - equivalent to hovering your mouse over wherever the cursor is. Handy for seeing types and error messages without reaching for the mouse!\n\n## \xf0\x9f\x93\x9a F.A.Q.\n\n- None of the native Visual Studio Code `ctrl` (e.g. `ctrl+f`, `ctrl+v`) commands work\n\n  Set the [`useCtrlKeys` setting](#vscodevim-settings) to `false`.\n\n- Moving `j`/`k` over folds opens up the folds\n\n  Try setting `vim.foldfix` to `true`. This is a hack; it works fine, but there are side effects (see [issue#22276](https://github.com/Microsoft/vscode/issues/22276)).\n\n- Key repeat doesn\'t work\n\n  Are you on a Mac? Did you go through our [mac-setup](#mac) instructions?\n\n- There are annoying intellisense/notifications/popups that I can\'t close with `<esc>`! Or I\'m in a snippet and I want to close intellisense\n\n  Press `shift+<esc>` to close all of those boxes.\n\n- How can I use the commandline when in Zen mode or when the status bar is disabled?\n\n  This extension exposes a remappable command to show a vscode style quick-pick, limited functionality, version of the commandline. This can be remapped as follows in VS Code\'s keybindings.json settings file.\n\n  ```json\n  {\n    "key": "shift+;",\n    "command": "vim.showQuickpickCmdLine",\n    "when": "editorTextFocus && vim.mode != \'Insert\'"\n  }\n  ```\n\n  Or for Zen mode only:\n\n  ```json\n  {\n    "key": "shift+;",\n    "command": "vim.showQuickpickCmdLine",\n    "when": "inZenMode && vim.mode != \'Insert\'"\n  }\n  ```\n\n- How can I move the cursor by each display line with word wrapping?\n\n  If you have word wrap on and would like the cursor to enter each wrapped line when using <kbd>j</kbd>, <kbd>k</kbd>, <kbd>\xe2\x86\x93</kbd> or <kbd>\xe2\x86\x91</kbd>, set the following in VS Code\'s keybindings.json settings file.\n\n  <!-- prettier-ignore -->\n  ```json\n  {\n    "key": "up",\n    "command": "cursorUp",\n    "when": "editorTextFocus && vim.active && !inDebugRepl && !suggestWidgetMultipleSuggestions && !suggestWidgetVisible"\n  },\n  {\n    "key": "down",\n    "command": "cursorDown",\n    "when": "editorTextFocus && vim.active && !inDebugRepl && !suggestWidgetMultipleSuggestions && !suggestWidgetVisible"\n  },\n  {\n    "key": "k",\n    "command": "cursorUp",\n    "when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode == \'Normal\' && !suggestWidgetMultipleSuggestions && !suggestWidgetVisible"\n  },\n  {\n    "key": "j",\n    "command": "cursorDown",\n    "when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode == \'Normal\' && !suggestWidgetMultipleSuggestions && !suggestWidgetVisible"\n  }\n  ```\n\n  **Caveats:** This solution restores the default VS Code behavior for the <kbd>j</kbd> and <kbd>k</kbd> keys, so motions like `10j` [will not work](https://github.com/VSCodeVim/Vim/pull/3623#issuecomment-481473981). If you need these motions to work, [other, less performant options exist](https://github.com/VSCodeVim/Vim/issues/2924#issuecomment-476121848).\n\n## \xe2\x9d\xa4\xef\xb8\x8f Contributing\n\nThis project is maintained by a group of awesome [people](https://github.com/VSCodeVim/Vim/graphs/contributors) and contributions are extremely welcome :heart:. For a quick tutorial on how you can help, see our [contributing guide](/.github/CONTRIBUTING.md).\n\n<a href="https://www.buymeacoffee.com/jasonpoon" target="_blank"><img src="https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png" alt="Buy Us A Coffee" style="height: auto !important;width: auto !important;" ></a>\n\n### Special shoutouts to:\n\n- Thanks to @xconverge for making over 100 commits to the repo. If you\'re wondering why your least favorite bug packed up and left, it was probably him.\n- Thanks to @Metamist for implementing EasyMotion!\n- Thanks to @sectioneight for implementing text objects!\n- Special props to [Kevin Coleman](http://kevincoleman.io), who created our awesome logo!\n- Shoutout to @chillee aka Horace He for his contributions and hard work.\n'