b'sneak.vim :shoe:\n================\n\nJump to any location specified by two characters.\n\nSneak is a powerful, reliable, yet minimal _motion_ plugin for Vim. It works with **multiple\nlines**, **operators** (including repeat `.` and [surround]), motion-repeat\n(`;` and `,`), **[keymaps]**, **visual** mode, **[multibyte]** text, and\n**macros**.\n\nTry *label-mode* for a minimalist alternative to\n[EasyMotion](https://github.com/Lokaltog/vim-easymotion):\n\n```vim\nlet g:sneak#label = 1\n```\n\nUsage\n-----\n\n<a href="http://imgur.com/Jke0mIJ" title="Click to see a short demo"><img src="https://raw.github.com/justinmk/vim-sneak/fluff/assets/readme_diagram.png"></a>\n\nSneak is invoked with `s` followed by exactly two characters:\n\n    s{char}{char}\n\n* Type `sab` to **move the cursor** immediately to the next instance of the text "ab".\n    * Additional matches, if any, are highlighted until the cursor is moved.\n* Type `;` to go to the next match (or `s` again, if `s_next` is enabled; see [`:help sneak`](doc/sneak.txt)).\n* Type `3;` to skip to the third match from the current position.\n* Type `ctrl-o` or ``` `` ``` to go back to the starting point.\n    * This is a built-in Vim motion; Sneak adds to Vim\'s [jumplist](http://vimdoc.sourceforge.net/htmldoc/motion.html#jumplist)\n      *only* on `s` invocation\xe2\x80\x94not repeats\xe2\x80\x94so you can \n      abandon a trail of `;` or `,` by a single `ctrl-o` or ``` `` ```.\n* Type `s<Enter>` at any time to repeat the last Sneak-search.\n* Type `S` to search backwards.\n\nSneak can be limited to a **vertical scope** by prefixing `s` with a [count].\n\n* Type `5sxy` to go immediately to the next instance of "xy" within 5 columns\n  of the cursor.\n\nSneak is invoked with [**operators**](http://vimdoc.sourceforge.net/htmldoc/motion.html#operator)\nvia `z` (because `s` is taken by surround.vim).\n\n* Type `3dzqt` to delete up to the *third* instance of "qt".\n    * Type `.` to repeat the `3dzqt` operation.\n    * Type `2.` to repeat twice.\n    * Type `d;` to delete up to the next match.\n    * Type `4d;` to delete up to the *fourth* next match.\n* Type `yszxy]` to [surround] in brackets up to `xy`.\n    * Type `.` to repeat the surround operation.\n* Type `gUz\\}` to upper-case the text from the cursor until the next instance\n  of the literal text `\\}`\n    * Type `.` to repeat the `gUz\\}` operation.\n\nInstall\n-------\n\n- [vim-plug](https://github.com/junegunn/vim-plug)\n  - `Plug \'justinmk/vim-sneak\'`\n- [Pathogen](https://github.com/tpope/vim-pathogen)\n  - `git clone git://github.com/justinmk/vim-sneak.git ~/.vim/bundle/vim-sneak`\n- Manual installation:\n  - Copy the files to your `.vim` directory.\n\nTo repeat Sneak *operations* (like `dzab`) with dot `.`,\n[repeat.vim](https://github.com/tpope/vim-repeat) is required.\n\nFAQ\n---\n\n#### Why not use `/`?\n\nFor the same reason that Vim has [motions](http://vimdoc.sourceforge.net/htmldoc/motion.html#left-right-motions)\nlike `f` and `t`: common operations should use the fewest keystrokes.\n\n* `/ab<cr>` requires 33% more keystrokes than `sab`\n* Sets *only* the initial position in the Vim jumplist\xe2\x80\x94so you can explore a\n  trail of matches via `;`, then return to the start with a single `ctrl-o` or ``` `` ```\n* Doesn\'t clutter your search history\n* Input is always literal (don\'t need to escape special characters)\n  * Ignores accents ("equivalence class") when matching\n    ([#183](https://github.com/justinmk/vim-sneak/issues/183))\n* Smarter, subtler highlighting\n\n#### Why not use `f`?\n\n* 50x more precise than `f` or `t`\n* Moves vertically\n* Highlights matches in the direction of your search\n\n#### How dare you remap `s`?\n\nYou can specify any mapping for Sneak (see [`:help sneak`](doc/sneak.txt)).\nBy the way: `cl` is equivalent to `s`, and `cc` is equivalent to `S`.\n\n#### How can I replace `f` with Sneak?\n\n```vim\nmap f <Plug>Sneak_s\nmap F <Plug>Sneak_S\n```\n\n#### How can I replace `f` and/or `t` with *one-character* Sneak?\n\nSneak has `<Plug>` mappings for `f` and `t` 1-character-sneak.\nThese mappings do *not* invoke label-mode, even if you have it enabled.\n\n```vim\nmap f <Plug>Sneak_f\nmap F <Plug>Sneak_F\nmap t <Plug>Sneak_t\nmap T <Plug>Sneak_T\n```\n\nRelated\n-------\n\n* [Seek](https://github.com/goldfeld/vim-seek)\n* [EasyMotion](https://github.com/Lokaltog/vim-easymotion)\n* [smalls](https://github.com/t9md/vim-smalls)\n* [improvedft](https://github.com/chrisbra/improvedft)\n* [clever-f](https://github.com/rhysd/clever-f.vim)\n* [vim-extended-ft](https://github.com/svermeulen/vim-extended-ft)\n* [Fanf,ingTastic;](https://github.com/dahu/vim-fanfingtastic)\n\nLicense\n-------\n\nCopyright \xc2\xa9 Justin M. Keyes. Distributed under the MIT license.\n\n[multibyte]: http://vimdoc.sourceforge.net/htmldoc/mbyte.html#UTF-8\n[keymaps]: http://vimdoc.sourceforge.net/htmldoc/mbyte.html#mbyte-keymap\n[surround]: https://github.com/tpope/vim-surround\n[count]: http://vimdoc.sourceforge.net/htmldoc/intro.html#[count]\n'