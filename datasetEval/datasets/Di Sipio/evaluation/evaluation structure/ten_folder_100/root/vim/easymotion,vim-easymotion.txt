b'Vim motion on speed!\n=====\n[![Build Status](https://travis-ci.org/easymotion/vim-easymotion.svg?branch=master)](https://travis-ci.org/easymotion/vim-easymotion)\n\n![Animated demonstration](https://f.cloud.github.com/assets/3797062/2039359/a8e938d6-899f-11e3-8789-60025ea83656.gif)\n\nAbout the authors\n=====\n\n| Authors          |                               |\n|------------------|-------------------------------|\n| Kim Silkeb\xc3\xa6kken | https://github.com/Lokaltog   |\n| haya14busa       | https://github.com/haya14busa |\n\nThe EasyMotion project, revived!\n======\n\nStarting from version 2.0 [haya14busa](https://github.com/haya14busa) will be\ntaking over the project from [Lokaltog](https://github.com/Lokaltog). He\'s\nimproved the default motions, implemented many useful new features, and fixed\nsome bugs.\n\nEasyMotion is now completely:\n\n- **Well-behaved**: It\'s consistent with the default motions of Vim and works\n  well in all modes. And it now supports repeating with the dot operator.\n- **Configurable**: You can easily configure its behavior and map it to any key\n- **Sophisticated**: Provide flawless, smooth and fast motions with minimal keystrokes\n\nEven though some default behaviors were modified and many new features were\nadded, I carefully considered backward compatibility. So those of you updating\nfrom older versions can do so without worry and start benefiting immediately\nfrom all the new features!\n\nIntroduction\n=====\n\nEasyMotion provides a much simpler way to use some motions in vim. It\ntakes the `<number>` out of `<number>w` or `<number>f{char}` by\nhighlighting all possible choices and allowing you to press one key to\njump directly to the target.\n\nWhen one of the available motions is triggered, all visible text\npreceding or following the cursor is faded, and motion targets are\nhighlighted.\n\nEasyMotion is triggered by the provided mappings. This readme only covers the\nbasics; please refer to\n[`:help easymotion.txt`](https://github.com/easymotion/vim-easymotion/blob/master/doc/easymotion.txt#L86)\nto see all the available mappings.\n\nImportant notes\n=====\n\n### Default bindings\n\n**The default leader has been changed to `<Leader><Leader>` to avoid\nconflicts with other plugins you may have installed.** This can easily be\nchanged back to pre-1.3 behavior by rebinding the leader in your vimrc:\n\n```vim\nmap <Leader> <Plug>(easymotion-prefix)\n```\n\nAll motions will then be triggered with `<Leader>` by default, e.g.\n`<Leader>s`, `<Leader>gE`.\n\n### For users of the forked version\n\nSelectLines and SelectPhrase are not actually *motions*, so I\'ve moved them into\nseparate plugins.\n\n- https://github.com/haya14busa/vim-easyoperator-line\n- https://github.com/haya14busa/vim-easyoperator-phrase\n\nUsage example for the base features\n=====\n\n\t<cursor>Lorem ipsum dolor sit amet.\n\nType `<Leader><Leader>w`(`<Plug>(easymotion-w)`) to trigger the word motion `w`.\nWhen the motion is triggered, the text is updated (no braces are actually added,\nthe text is highlighted in red by default):\n\n\t<cursor>Lorem {a}psum {b}olor {c}it {d}met.\n\nPress `c` to jump to the beginning of the word "sit":\n\n\tLorem ipsum dolor <cursor>sit amet.\n\nSimilarly, if you\'re looking for an "o", you can use the `f` motion.\nType `<Leader><Leader>fo`, and all "o" characters are highlighted:\n\n\t<cursor>L{a}rem ipsum d{b}l{c}r sit amet.\n\nPress `b` to jump to the second "o":\n\n\tLorem ipsum d<cursor>olor sit amet.\n\nJeffrey Way of Nettuts+ has also [written\na tutorial](http://net.tutsplus.com/tutorials/other/vim-essential-plugin-easymotion/)\nabout EasyMotion.\n\nNew features in version 3.0\n====\n\n### Overwin motions\n![](https://raw.githubusercontent.com/haya14busa/i/2753bd4dd1dfdf5962dbdbffabf24244e4e14243/easymotion/overwin-motions.gif)\n\nEasyMotion now supports moving cursor across/over window.\nSince it doesn\'t make sense that moving cursor to other window while Visual or\nOperator-pending mode, overwin motions only provides mappings for Normal\nmode.  Please use `nmap` to use overwin motions. Overwin motions only\nsupports bi-directional motions.\n\n#### Example configuration\n\n```vim\n" <Leader>f{char} to move to {char}\nmap  <Leader>f <Plug>(easymotion-bd-f)\nnmap <Leader>f <Plug>(easymotion-overwin-f)\n\n" s{char}{char} to move to {char}{char}\nnmap s <Plug>(easymotion-overwin-f2)\n\n" Move to line\nmap <Leader>L <Plug>(easymotion-bd-jk)\nnmap <Leader>L <Plug>(easymotion-overwin-line)\n\n" Move to word\nmap  <Leader>w <Plug>(easymotion-bd-w)\nnmap <Leader>w <Plug>(easymotion-overwin-w)\n```\n\n#### Integration with incsearch.vim\n- [haya14busa/incsearch.vim](https://github.com/haya14busa/incsearch.vim)\n- [haya14busa/incsearch-easymotion.vim](https://github.com/haya14busa/incsearch-easymotion.vim)\n\n```vim\n" You can use other keymappings like <C-l> instead of <CR> if you want to\n" use these mappings as default search and sometimes want to move cursor with\n" EasyMotion.\nfunction! s:incsearch_config(...) abort\n  return incsearch#util#deepextend(deepcopy({\n  \\   \'modules\': [incsearch#config#easymotion#module({\'overwin\': 1})],\n  \\   \'keymap\': {\n  \\     "\\<CR>": \'<Over>(easymotion)\'\n  \\   },\n  \\   \'is_expr\': 0\n  \\ }), get(a:, 1, {}))\nendfunction\n\nnoremap <silent><expr> /  incsearch#go(<SID>incsearch_config())\nnoremap <silent><expr> ?  incsearch#go(<SID>incsearch_config({\'command\': \'?\'}))\nnoremap <silent><expr> g/ incsearch#go(<SID>incsearch_config({\'is_stay\': 1}))\n```\n\n### Bonus fuzzy-search with EasyMotion\n\n![](https://raw.githubusercontent.com/haya14busa/i/eab1d12a8bd322223d551956a4fd8a21d5c4bfe9/easymotion/fuzzy-incsearch-easymotion.gif)\n\n- [haya14busa/incsearch.vim](https://github.com/haya14busa/incsearch.vim)\n- [haya14busa/incsearch-fuzzy.vim](https://github.com/haya14busa/incsearch-fuzzy.vim)\n- [haya14busa/incsearch-easymotion.vim](https://github.com/haya14busa/incsearch-easymotion.vim)\n\n```vim\nfunction! s:config_easyfuzzymotion(...) abort\n  return extend(copy({\n  \\   \'converters\': [incsearch#config#fuzzyword#converter()],\n  \\   \'modules\': [incsearch#config#easymotion#module({\'overwin\': 1})],\n  \\   \'keymap\': {"\\<CR>": \'<Over>(easymotion)\'},\n  \\   \'is_expr\': 0,\n  \\   \'is_stay\': 1\n  \\ }), get(a:, 1, {}))\nendfunction\n\nnoremap <silent><expr> <Space>/ incsearch#go(<SID>config_easyfuzzymotion())\n```\n\nNew features in version 2.0\n====\n\n### Two key highlighting\n\nWhen EasyMotion runs out of single characters to highlight movement targets, it\nimmediately shows you the keys you have to press.\n\nIn previous versions you could not see the next character you would need to\npress until you entered the first one. This made movement over long distances\nless fluid. Now you can see at a glance exactly which characters to select to\nget to your destination.\n\n### Bidirectional motions\n\nAll motions now come in a bidirectional variants (e.g. `<Plug>(easymotion-s)`,\n`<Plug>(easymotion-bd-w)` and so forth).\nBy default, you can already jump forward or backward with `<Leader>s`. A useful\ntrick is to map `nmap s <Plug>(easymotion-s)` to use `s` instead and save one\nkeystroke!\n\n### 2-character search motion\n\nYou can now also perform a 2-character search, similar to [vim-seek](https://github.com/goldfeld/vim-seek)/[vim-sneak](https://github.com/justinmk/vim-sneak) with `<Plug>(easymotion-s2)`. For example you can highlight all words that start with `fu`.\n\n![2-key-find-motion](https://f.cloud.github.com/assets/3797062/2039612/7cafcec8-89a5-11e3-8f2c-5f26a6b83efd.gif)\n\n```vim\n" Gif config\nnmap s <Plug>(easymotion-s2)\nnmap t <Plug>(easymotion-t2)\n```\n\n### n-character search motion\n\nYou can also search for `n` characters, which can be used to replace the default search of Vim.\nIt supports incremental highlighting and you can use `<Tab>` and `<S-Tab>` to scroll down/up a page. If you press\n`<CR>`, you get the usual EasyMotion highlighting and can jump to any matching target destination with a\nsingle keystroke.\n\nWhat sounds complicated should become clear if you look at the following examples.\n\n![n-key-motion-scroll](https://f.cloud.github.com/assets/3797062/2039254/4fbf7276-899e-11e3-9bf3-1e446cabc097.gif)\n\n![replace-search](https://f.cloud.github.com/assets/3797062/2039751/64b72bd8-89a8-11e3-80ea-2a6b578040b2.gif)\n\n```vim\n" Gif config\nmap  / <Plug>(easymotion-sn)\nomap / <Plug>(easymotion-tn)\n\n" These `n` & `N` mappings are options. You do not have to map `n` & `N` to EasyMotion.\n" Without these mappings, `n` & `N` works fine. (These mappings just provide\n" different highlight method and have some other features )\nmap  n <Plug>(easymotion-next)\nmap  N <Plug>(easymotion-prev)\n```\n\n### Within line motion\n\nEvery motion also has variants that are restricted to just the current line\n(e.g. `<Plug>(easymotion-sl)`, `<Plug>(easymotion-bd-wl)`, etc...). This can be\nhelpful if you find the full search distracting or slows down vim.\n\n### hjkl motions\n\nEasyMotion can be configured to avoid repetitive use of the `h` `j` `k` and\n`l` keys.\n\n![hjkl-motion](https://f.cloud.github.com/assets/3797062/2039413/d8b32ab2-89a0-11e3-894f-3e81db084cfd.gif)\n\n```vim\n" Gif config\nmap <Leader>l <Plug>(easymotion-lineforward)\nmap <Leader>j <Plug>(easymotion-j)\nmap <Leader>k <Plug>(easymotion-k)\nmap <Leader>h <Plug>(easymotion-linebackward)\n\nlet g:EasyMotion_startofline = 0 " keep cursor column when JK motion\n```\n\n### Smartcase & Smartsign\n\nThis setting makes EasyMotion work similarly to Vim\'s `smartcase` option for\nglobal searches.\n\n```vim\nlet g:EasyMotion_smartcase = 1\n```\n\nWith this option set, `v` will match both `v` and `V`, but `V` will match `V`\nonly. Default: 0.\n\n```vim\nlet g:EasyMotion_use_smartsign_us = 1 " US layout\n" or\nlet g:EasyMotion_use_smartsign_jp = 1 " JP layout\n```\n\nThis applies the same concept, but for symbols and numerals. `1` will match `1`\nand `!`; `!` matches `!` only. Default: 0.\n\n\n### Migemo feature (for Japanese user)\n\n```vim\nlet g:EasyMotion_use_migemo = 1\n```\n\n\nEasymotion can match multibyte Japanese characters with alphabetical input.\nFor example, `<Leader><Leader>sa` can search \'\xe3\x81\x82\'.\nThis feature doesn\'t require cmigemo because Easymotion includes regex\npatterns generated by cmigemo. However, installing `cmigemo` will make\n2-character and n-character search motions to also support the migemo feature.\nDefault:0\n\n\n### Repeat motions\n\n#### Repeat the last motion\n\n`<Plug>(easymotion-repeat)`\n\n#### Repeat the last find motion\n\nIn a find motion (e.g. `<Plug>(easymotion-s)`), type `<CR>` without\ninput characters to find the last motion again.\n\n#### Jump to next/previous match (even on next/previous page)\n\n* `<Plug>(easymotion-next)`\n* `<Plug>(easymotion-prev)`\n\n#### Support for dot repeat\n\nThis requires https://github.com/tpope/vim-repeat.\n\nYou can use EasyMotion with operators and press `.` to repeat!\nIt is well-behaved and consistent with the default behavior of Vim.\n\n![repeat-motion](https://f.cloud.github.com/assets/3797062/2039538/0aef66aa-89a4-11e3-8242-c27a5208cfca.gif)\n\n```vim\n" Gif config\n\n" Require tpope/vim-repeat to enable dot repeat support\n" Jump to anywhere with only `s{char}{target}`\n" `s<CR>` repeat last find motion.\nnmap s <Plug>(easymotion-s)\n" Bidirectional & within line \'t\' motion\nomap t <Plug>(easymotion-bd-tl)\n" Use uppercase target labels and type as a lower case\nlet g:EasyMotion_use_upper = 1\n " type `l` and match `l`&`L`\nlet g:EasyMotion_smartcase = 1\n" Smartsign (type `3` and match `3`&`#`)\nlet g:EasyMotion_use_smartsign_us = 1\n```\n\n\nInstallation\n------------\n### Pathogen (https://github.com/tpope/vim-pathogen)\n```\ngit clone https://github.com/easymotion/vim-easymotion ~/.vim/bundle/vim-easymotion\n```\n\n### Vundle (https://github.com/gmarik/vundle)\n```\nPlugin \'easymotion/vim-easymotion\'\n```\n\n### NeoBundle (https://github.com/Shougo/neobundle.vim)\n```\nNeoBundle \'easymotion/vim-easymotion\'\n```\n\nMinimal Configuration Tutorial\n------------------------------\n**I recommend configuring and map keys by yourself if you are true Vimmer.**\n\n**Please do not be satisfied with just installing vim-easymotion, configuring it yourself boost your productivity more and more!**\n\nDefault `<Leader><Leader>` prefix isn\'t easy to press, and I leave them just for backwards compatibility.\nYou should at least change the prefix key like this `map <Leader> <Plug>(easymotion-prefix)`\n\nMinimal but useful vimrc example:\n\n```vim\nlet g:EasyMotion_do_mapping = 0 " Disable default mappings\n\n" Jump to anywhere you want with minimal keystrokes, with just one key binding.\n" `s{char}{label}`\nnmap s <Plug>(easymotion-overwin-f)\n" or\n" `s{char}{char}{label}`\n" Need one more keystroke, but on average, it may be more comfortable.\nnmap s <Plug>(easymotion-overwin-f2)\n\n" Turn on case-insensitive feature\nlet g:EasyMotion_smartcase = 1\n\n" JK motions: Line motions\nmap <Leader>j <Plug>(easymotion-j)\nmap <Leader>k <Plug>(easymotion-k)\n```\nNow, all you need to remember is `s` and JK motions bindings, and it\'s good enough to boost your cursor speed!\n\n**`s`** is bidirectional find motion, you can move to anywhere with it.\n\n**`<Leader>j`** & **`<Leader>k`** make it easy to move to the lines.\n\nOf course you can use any key you want instead of `s` such as `<Space>`, `<Leader>s`, etc...\n\nIf you want to use more useful mappings, please see [:h easymotion.txt](https://github.com/easymotion/vim-easymotion/blob/master/doc/easymotion.txt) for more detail.\n'