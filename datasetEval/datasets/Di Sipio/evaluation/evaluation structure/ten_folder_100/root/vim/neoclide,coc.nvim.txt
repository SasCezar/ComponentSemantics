b'<p align="center">\n  <a href="https://www.vim.org/scripts/script.php?script_id=5779">\n    <img alt="Coc Logo" src="https://user-images.githubusercontent.com/251450/55009068-f4ed2780-501c-11e9-9a3b-cf3aa6ab9272.png" height="160" />\n  </a>\n  <p align="center">Make your Vim/Neovim as smart as VSCode.</p>\n  <p align="center">\n    <a href="/LICENSE.md"><img alt="Software License" src="https://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat-square"></a>\n    <a href="https://salt.bountysource.com/teams/coc-nvim"><img alt="Bountysource" src="https://img.shields.io/bountysource/team/coc-nvim/activity.svg?style=flat-square"></a>\n    <a href="https://travis-ci.org/neoclide/coc.nvim"><img alt="Travis" src="https://img.shields.io/travis/neoclide/coc.nvim/master.svg?style=flat-square"></a>\n    <a href="https://codecov.io/gh/neoclide/coc.nvim"><img alt="Coverage" src="https://img.shields.io/codecov/c/github/neoclide/coc.nvim.svg?style=flat-square"></a>\n    <a href="/doc/coc.txt"><img alt="Doc" src="https://img.shields.io/badge/doc-%3Ah%20coc.txt-red.svg?style=flat-square"></a>\n    <a href="https://gitter.im/neoclide/coc.nvim"><img alt="Gitter" src="https://img.shields.io/gitter/room/neoclide/coc.nvim.svg?style=flat-square"></a>\n  </p>\n</p>\n\n---\n\nCoc is an intellisense engine for Vim/Neovim.\n\n<img alt="Gif" src="https://user-images.githubusercontent.com/251450/55285193-400a9000-53b9-11e9-8cff-ffe4983c5947.gif" width="60%" />\n\n_True snippet and additional text editing support_\n\nCheck out [Wiki](https://github.com/neoclide/coc.nvim/wiki), or [doc/coc.txt](doc/coc.txt) for the vim interface.\n\n## \xe5\xb9\xbf\xe5\x91\x8a\n\n\xe6\xb7\xb1\xe5\x9c\xb3\xe5\x85\xa8\xe6\xb0\x91\xe7\x82\xb9\xe6\xb8\xb8\xe6\x9c\x89\xe9\x99\x90\xe5\x85\xac\xe5\x8f\xb8\xe6\x80\xa5\xe9\x9c\x80\xe5\xb0\x8f\xe7\xa8\x8b\xe5\xba\x8f\xe7\x9b\xb8\xe5\x85\xb3\xe5\x89\x8d\xe7\xab\xaf\xe5\xbc\x80\xe5\x8f\x91\xef\xbc\x8c\xe6\x9c\x89\xe6\x84\x8f\xe8\x80\x85\xe5\x8a\xa0\xe6\x88\x91\xe5\xbe\xae\xe4\xbf\xa1\xef\xbc\x9achemzqm\n\n## Quick Start\n\nInstall [nodejs](https://nodejs.org/en/download/) when necessary:\n\n```sh\ncurl -sL install-node.now.sh/lts | bash\n```\n\nFor [vim-plug](https://github.com/junegunn/vim-plug) users:\n\n```vim\n" Use release branch (Recommend)\nPlug \'neoclide/coc.nvim\', {\'branch\': \'release\'}\n\n" Or latest tag\nPlug \'neoclide/coc.nvim\', {\'tag\': \'*\', \'branch\': \'release\'}\n" Or build from source code by use yarn: https://yarnpkg.com\nPlug \'neoclide/coc.nvim\', {\'do\': \'yarn install --frozen-lockfile\'}\n```\n\nin your `.vimrc` or `init.vim`, then restart vim and run `:PlugInstall`. Checkout [Install coc.nvim](https://github.com/neoclide/coc.nvim/wiki/Install-coc.nvim) wiki for more info.\n\n**Note**: The first time building from source code may be slow.\n\n## Example vim configuration\n\nConfiguration is required to make coc.nvim easier to work with, since it doesn\'t\nchange your key-mappings or vim options. This is done as much as possible to avoid conflict with your\nother plugins.\n\n**\xe2\x9d\x97\xef\xb8\x8fImportant**: some vim plugins could change keymappings. Use a command like\n`:verbose imap <tab>` to make sure that your keymap has taken effect.\n\n```vim\n" if hidden is not set, TextEdit might fail.\nset hidden\n\n" Some servers have issues with backup files, see #649\nset nobackup\nset nowritebackup\n\n" Better display for messages\nset cmdheight=2\n\n" You will have bad experience for diagnostic messages when it\'s default 4000.\nset updatetime=300\n\n" don\'t give |ins-completion-menu| messages.\nset shortmess+=c\n\n" always show signcolumns\nset signcolumn=yes\n\n" Use tab for trigger completion with characters ahead and navigate.\n" Use command \':verbose imap <tab>\' to make sure tab is not mapped by other plugin.\ninoremap <silent><expr> <TAB>\n      \\ pumvisible() ? "\\<C-n>" :\n      \\ <SID>check_back_space() ? "\\<TAB>" :\n      \\ coc#refresh()\ninoremap <expr><S-TAB> pumvisible() ? "\\<C-p>" : "\\<C-h>"\n\nfunction! s:check_back_space() abort\n  let col = col(\'.\') - 1\n  return !col || getline(\'.\')[col - 1]  =~# \'\\s\'\nendfunction\n\n" Use <c-space> to trigger completion.\ninoremap <silent><expr> <c-space> coc#refresh()\n\n" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.\n" Coc only does snippet and additional edit on confirm.\ninoremap <expr> <cr> pumvisible() ? "\\<C-y>" : "\\<C-g>u\\<CR>"\n" Or use `complete_info` if your vim support it, like:\n" inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\\<C-y>" : "\\<C-g>u\\<CR>"\n\n" Use `[g` and `]g` to navigate diagnostics\nnmap <silent> [g <Plug>(coc-diagnostic-prev)\nnmap <silent> ]g <Plug>(coc-diagnostic-next)\n\n" Remap keys for gotos\nnmap <silent> gd <Plug>(coc-definition)\nnmap <silent> gy <Plug>(coc-type-definition)\nnmap <silent> gi <Plug>(coc-implementation)\nnmap <silent> gr <Plug>(coc-references)\n\n" Use K to show documentation in preview window\nnnoremap <silent> K :call <SID>show_documentation()<CR>\n\nfunction! s:show_documentation()\n  if (index([\'vim\',\'help\'], &filetype) >= 0)\n    execute \'h \'.expand(\'<cword>\')\n  else\n    call CocAction(\'doHover\')\n  endif\nendfunction\n\n" Highlight symbol under cursor on CursorHold\nautocmd CursorHold * silent call CocActionAsync(\'highlight\')\n\n" Remap for rename current word\nnmap <leader>rn <Plug>(coc-rename)\n\n" Remap for format selected region\nxmap <leader>f  <Plug>(coc-format-selected)\nnmap <leader>f  <Plug>(coc-format-selected)\n\naugroup mygroup\n  autocmd!\n  " Setup formatexpr specified filetype(s).\n  autocmd FileType typescript,json setl formatexpr=CocAction(\'formatSelected\')\n  " Update signature help on jump placeholder\n  autocmd User CocJumpPlaceholder call CocActionAsync(\'showSignatureHelp\')\naugroup end\n\n" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph\nxmap <leader>a  <Plug>(coc-codeaction-selected)\nnmap <leader>a  <Plug>(coc-codeaction-selected)\n\n" Remap for do codeAction of current line\nnmap <leader>ac  <Plug>(coc-codeaction)\n" Fix autofix problem of current line\nnmap <leader>qf  <Plug>(coc-fix-current)\n\n" Create mappings for function text object, requires document symbols feature of languageserver.\nxmap if <Plug>(coc-funcobj-i)\nxmap af <Plug>(coc-funcobj-a)\nomap if <Plug>(coc-funcobj-i)\nomap af <Plug>(coc-funcobj-a)\n\n" Use <C-d> for select selections ranges, needs server support, like: coc-tsserver, coc-python\nnmap <silent> <C-d> <Plug>(coc-range-select)\nxmap <silent> <C-d> <Plug>(coc-range-select)\n\n" Use `:Format` to format current buffer\ncommand! -nargs=0 Format :call CocAction(\'format\')\n\n" Use `:Fold` to fold current buffer\ncommand! -nargs=? Fold :call     CocAction(\'fold\', <f-args>)\n\n" use `:OR` for organize import of current buffer\ncommand! -nargs=0 OR   :call     CocAction(\'runCommand\', \'editor.action.organizeImport\')\n\n" Add status line support, for integration with other plugin, checkout `:h coc-status`\nset statusline^=%{coc#status()}%{get(b:,\'coc_current_function\',\'\')}\n\n" Using CocList\n" Show all diagnostics\nnnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>\n" Manage extensions\nnnoremap <silent> <space>e  :<C-u>CocList extensions<cr>\n" Show commands\nnnoremap <silent> <space>c  :<C-u>CocList commands<cr>\n" Find symbol of current document\nnnoremap <silent> <space>o  :<C-u>CocList outline<cr>\n" Search workspace symbols\nnnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>\n" Do default action for next item.\nnnoremap <silent> <space>j  :<C-u>CocNext<CR>\n" Do default action for previous item.\nnnoremap <silent> <space>k  :<C-u>CocPrev<CR>\n" Resume latest coc list\nnnoremap <silent> <space>p  :<C-u>CocListResume<CR>\n```\n\n## Articles\n\n- [coc.nvim \xe6\x8f\x92\xe4\xbb\xb6\xe4\xbd\x93\xe7\xb3\xbb\xe4\xbb\x8b\xe7\xbb\x8d](https://zhuanlan.zhihu.com/p/65524706)\n- [CocList \xe5\x85\xa5\xe5\x9d\x91\xe6\x8c\x87\xe5\x8d\x97](https://zhuanlan.zhihu.com/p/71846145)\n- [Create coc.nvim extension to improve vim experience](https://medium.com/@chemzqm/create-coc-nvim-extension-to-improve-vim-experience-4461df269173)\n\n## Trouble shooting\n\nTry these steps when you have problem with coc.nvim.\n\n- Make sure your vim version >= 8.0 by command `:version`.\n- If service failed to start, use command `:CocInfo` or `:checkhealth` on neovim.\n- Checkout the log of coc.nvim by command `:CocOpenLog`.\n- When you have issue with a languageserver, it\'s recommended to [checkout the output](https://github.com/neoclide/coc.nvim/wiki/Debug-language-server#using-output-channel)\n\n## Feedback\n\n- If you think Coc is useful, consider giving it a star.\n- If you have a question, [ask on gitter](https://gitter.im/neoclide/coc.nvim)\n- \xe4\xb8\xad\xe6\x96\x87\xe7\x94\xa8\xe6\x88\xb7\xe8\xaf\xb7\xe5\x88\xb0 [\xe4\xb8\xad\xe6\x96\x87 gitter](https://gitter.im/neoclide/coc-cn) \xe8\xae\xa8\xe8\xae\xba\n- If something is not working, [create an issue](https://github.com/neoclide/coc.nvim/issues/new).\n\n<img src="https://user-images.githubusercontent.com/251450/57566955-fb850200-7404-11e9-960f-711673f1a461.png" width="593" height="574">\n\n## License\n\nMIT\n'