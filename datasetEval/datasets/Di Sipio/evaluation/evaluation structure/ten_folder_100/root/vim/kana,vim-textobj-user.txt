b"# vim-textobj-user - Create your own text objects\n\n[![Build Status](https://travis-ci.org/kana/vim-textobj-user.png)](https://travis-ci.org/kana/vim-textobj-user)\n\nvim-textobj-user is a Vim plugin to create your own text objects without pain.\nIt is hard to create text objects, because there are many pitfalls to deal\nwith.  This plugin hides such details and provides a declarative way to define\ntext objects.  You can use regular expressions to define simple text objects,\nor use functions to define complex ones.\n\n\n\n\n## Examples\n\n### Simple text objects defined by a pattern\n\nDefine `ad`/`id` to select a date such as `2013-03-16`, and\ndefine `at`/`it` to select a time such as `22:04:21`:\n\n```vim\ncall textobj#user#plugin('datetime', {\n\\   'date': {\n\\     'pattern': '\\<\\d\\d\\d\\d-\\d\\d-\\d\\d\\>',\n\\     'select': ['ad', 'id'],\n\\   },\n\\   'time': {\n\\     'pattern': '\\<\\d\\d:\\d\\d:\\d\\d\\>',\n\\     'select': ['at', 'it'],\n\\   },\n\\ })\n```\n\n\n### Simple text objects surrounded by a pair of patterns\n\nDefine `aA` to select text from `<<` to the matching `>>`, and\ndefine `iA` to select text inside `<<` and `>>`:\n\n```vim\ncall textobj#user#plugin('braces', {\n\\   'angle': {\n\\     'pattern': ['<<', '>>'],\n\\     'select-a': 'aA',\n\\     'select-i': 'iA',\n\\   },\n\\ })\n```\n\n\n### Complex text objects defined by functions\n\nDefine `al` to select the current line, and\ndefine `il` to select the current line without indentation:\n\n```vim\ncall textobj#user#plugin('line', {\n\\   '-': {\n\\     'select-a-function': 'CurrentLineA',\n\\     'select-a': 'al',\n\\     'select-i-function': 'CurrentLineI',\n\\     'select-i': 'il',\n\\   },\n\\ })\n\nfunction! CurrentLineA()\n  normal! 0\n  let head_pos = getpos('.')\n  normal! $\n  let tail_pos = getpos('.')\n  return ['v', head_pos, tail_pos]\nendfunction\n\nfunction! CurrentLineI()\n  normal! ^\n  let head_pos = getpos('.')\n  normal! g_\n  let tail_pos = getpos('.')\n  let non_blank_char_exists_p = getline('.')[head_pos[2] - 1] !~# '\\s'\n  return\n  \\ non_blank_char_exists_p\n  \\ ? ['v', head_pos, tail_pos]\n  \\ : 0\nendfunction\n```\n\n\n### Text objects for a specific filetype\n\nDefine `a(` to select text from `\\left(` to the matching `\\right)`, and\ndefine `i(` to select text inside `\\left(` to the matching `\\right)`,\nbut *only for tex files*:\n\n```vim\ncall textobj#user#plugin('tex', {\n\\   'paren-math': {\n\\     'pattern': ['\\\\left(', '\\\\right)'],\n\\     'select-a': [],\n\\     'select-i': [],\n\\   },\n\\ })\n\naugroup tex_textobjs\n  autocmd!\n  autocmd FileType tex call textobj#user#map('tex', {\n  \\   'paren-math': {\n  \\     'select-a': '<buffer> a(',\n  \\     'select-i': '<buffer> i(',\n  \\   },\n  \\ })\naugroup END\n```\n\n\n\n\n## Further reading\n\nYou can define your own text objects like the above examples.  See also\n[the reference manual](https://github.com/kana/vim-textobj-user/blob/master/doc/textobj-user.txt)\nfor more details.\n\nThere are many text objects written with vim-textobj-user.\nIf you want to find useful ones, or to know how they are implemented,\nsee [a list of text objects implemented with\nvim-textobj-user](https://github.com/kana/vim-textobj-user/wiki).\n\n\n\n\n<!-- vim: set expandtab shiftwidth=4 softtabstop=4 textwidth=78 : -->\n"