b"tcomment provides easy to use, file-type sensible comments for Vim. It \ncan handle embedded syntax.\n\nTComment works like a toggle, i.e., it will comment out text that \ncontains uncommented lines, and it will remove comment markup for \nalready commented text (i.e. text that contains no uncommented lines).\n\nIf the file-type is properly defined, TComment will figure out which \ncomment string to use. Otherwise you use |tcomment#type#Define()| to \noverride the default choice.\n\nTComment can properly handle an embedded syntax, e.g., ruby/python/perl \nregions in vim scripts, HTML or JavaScript in php code etc.\n\ntcomment favours the use of line-wise comment styles. This implies that usually \nwhole line will be commented out. tcomment also knows block-style and inline \ncomments that can be used via special maps (see below) or the |:TCommentAs| \ncommand.\n\nDemo:\nhttp://vimsomnia.blogspot.com/2010/11/tcomment-vim-plugin.html\n\n\n                                                    *tcomment-maps*\nKey bindings~\n\nMost of the time the default toggle keys will do what you want (or to be \nmore precise: what I think you want it to do ;-).\n\n                                                    *tcomment-operator*\nAs operator (the prefix can be customized via |g:tcomment_opleader1|):\n\n    gc{motion}   :: Toggle comments (for small comments within one line \n                    the &filetype_inline style will be used, if \n                    defined)\n    gc<Count>c{motion} :: Toggle comment with count argument \n                    (see |tcomment#Comment()|)\n    gcc          :: Toggle comment for the current line\n\nForce line-wise operation:\n    gC{motion}   :: Toggle comments by line\n    gC<Count>c{motion} :: Toggle comment by line with count argument \n                    (see |tcomment#Comment()|)\n\nExplicit commenting/uncommenting:\n\n    g<{motion}   :: Uncomment region\n    g<c          :: Uncomment the current line\n    g<b          :: Uncomment the current region as block\n\n    g>{motion}   :: Comment region\n    g>c          :: Comment the current line\n    g>b          :: Comment the current region as block\n\nIn visual mode:\n\n    gc           :: Toggle comments\n    g>           :: Comment selected text\n\nCAVEAT: If you visually select text within a line, the visual mode map will \ncomment out the selected text. If you selected text across several lines, the \nvisual mode map will assume though that you wanted to comment out lines -- \nsince this is how many vim maps work. In order to make tcomment use e.g. inline \ncomments anyway, use the <c-_>i map -- see below.\n\nBy default the cursor stays put. If you want the cursor to the end of \nthe commented text, set |g:tcomment#operator#mode_extra| to '>' (but this may not \nwork properly with exclusive motions).\n\nPrimary key maps for normal and insert mode (see also |g:tcomment_mapleader1|):\n\n    <c-_><c-_>   :: :TComment\n    <c-_><space> :: :TComment <QUERY COMMENT-BEGIN ?COMMENT-END>\n    <c-_>b       :: :TCommentBlock\n                    In insert mode, the cursor will be positioned inside \n                    the comment. In normal mode, the cursor will stay \n                    put.\n    <c-_>a       :: :TCommentAs <QUERY COMMENT TYPE>\n    <c-_>n       :: :TCommentAs &filetype <QUERY COUNT>\n    <c-_>s       :: :TCommentAs &filetype_<QUERY COMMENT SUBTYPE>\n    <c-_>i       :: :TCommentInline (in normal and insert mode, this map will \n                    create an empty inline comment, which isn't suitable for \n                    all filetypes though)\n                    In insert mode, the cursor will be positioned inside \n                    the comment. In normal mode, the cursor will stay \n                    put.\n    <c-_>r       :: :TCommentRight\n    <c-_>p       :: Comment the current inner paragraph\n    <c-_><Count> :: Set the count argument (a number from 1 to 9) for use with \n                    the subsequent tcomment map/command (see \n                    |tcomment#Comment()|)\n                    E.g. in JavaScript, in order to get an empty /** */ \n                    comment for documentation purposes, in insert mode type \n                    <c-_>2<c-_>i\n                    In order to get an empty block comment like >\n                      /**\n                       *\n                       */\n<                   type <c-_>2<c-_>b\n\nMost of the above maps are also available in visual mode.\n\nA secondary set of key maps is defined for normal and insert mode (see also \n|g:tcomment_mapleader2|):\n\n    <Leader>__       :: :TComment\n    <Leader>_p       :: Comment the current inner paragraph\n    <Leader>_<space> :: :TComment <QUERY COMMENT-BEGIN ?COMMENT-END>\n    <Leader>_i       :: :TCommentInline\n    <Leader>_r       :: :TCommentRight\n    <Leader>_b       :: :TCommentBlock\n    <Leader>_a       :: :TCommentAs <QUERY COMMENT TYPE>\n    <Leader>_n       :: :TCommentAs &filetype <QUERY COUNT>\n    <Leader>_s       :: :TCommentAs &filetype_<QUERY COMMENT SUBTYPE>\n\n... and for select mode:\n\n    <Leader>__       :: :TComment\n    <Leader>_i       :: :TCommentInline\n\n\n\n-----------------------------------------------------------------------\n                            *tcomment-new-filetype* *tcomment-debug*\nAdding a new filetype~\n\nIf tcomment doesn't know a filetype, it makes use of 'commentstring' or \n'comments'. If the result still does not satisfy your needs, you might have to \nadd a custom filetype definition. This could be done in a file like \n`autoload/tcomment/types/mytypes.vim` somewhere in your 'runtimepath', which \nwill be loaded on startup.\n\nNew comment types can be defined via the |tcomment#type#Define()| function. If \nthe file may contain embedded code of another filetype, you might also want to \nset `g:tcomment#filetype#guess_{FILETYPE}` to 1 or the name of a default \nfallback filetype.\n\nIf nothing helps:\n\n1. Make sure 'filetype' is set correctly.\n2. Place the cursor at an appropriate position -- e.g. the first non-blank \n   character of a line of code.\n3. Call |tcomment#debug#CollectInfo()|.\n4. File an issue on github and post the output of `:call \n   tcomment#debug#CollectInfo()`. The output will also be copied to the \n   clipboard.\n\nIf this still doesn't help, please install tlib \n(https://github.com/tomtom/tlib_vim), please try:\n\n    Tlibtraceset --file=tcomment.log +tcomment\n\nThen comment out the text in question and send me the log file.\n\n\n-----------------------------------------------------------------------\nInstall~\n\nEither use the zip archive:\n\n- Download the zip archive\n- Extract it to `~/.vim/pack/tml/start/tcomment`\n\nor install from github:\n\n- Start a terminal\n- Change the working directory to `~/.vim/pack/tml/start/`\n- Type: `git clone https://github.com/tomtom/tcomment_vim`\n\nNOTE: If you don't want to run this plugin on startup, use \n`~/.vim/pack/tml/opt/`.\n\nNOTE: On Windows, ~/.vim might be ~/vimfiles. Please see 'runtimepath' for \ndetails.\n\n\n\n\n\nLicense: GPLv3 or later\n\n\n"