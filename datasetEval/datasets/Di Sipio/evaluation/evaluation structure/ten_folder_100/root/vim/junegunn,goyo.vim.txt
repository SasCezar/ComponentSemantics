b'goyo.vim ([\xea\xb3\xa0\xec\x9a\x94](http://en.wiktionary.org/wiki/\xea\xb3\xa0\xec\x9a\x94\xed\x95\x98\xeb\x8b\xa4))\n=========================================================\n\nDistraction-free writing in Vim.\n\n![](https://raw.github.com/junegunn/i/master/goyo.png)\n\n(Color scheme: [seoul256](https://github.com/junegunn/seoul256.vim))\n\nBest served with [limelight.vim](https://github.com/junegunn/limelight.vim).\n\nInstallation\n------------\n\nUse your favorite plugin manager.\n\n- [vim-plug](https://github.com/junegunn/vim-plug)\n  1. Add `Plug \'junegunn/goyo.vim\'` to .vimrc\n  2. Run `:PlugInstall`\n\nUsage\n-----\n\n- `:Goyo`\n    - Toggle Goyo\n- `:Goyo [dimension]`\n    - Turn on or resize Goyo\n- `:Goyo!`\n    - Turn Goyo off\n\nThe window can be resized with the usual `[count]<CTRL-W>` + `>`, `<`, `+`,\n`-` keys, and `<CTRL-W>` + `=` will resize it back to the initial size.\n\n### Dimension expression\n\nThe expected format of a dimension expression is\n`[WIDTH][XOFFSET][x[HEIGHT][YOFFSET]]`. `XOFFSET` and `YOFFSET` should be\nprefixed by `+` or `-`. Each component can be given in percentage.\n\n```vim\n" Width\nGoyo 120\n\n" Height\nGoyo x30\n\n" Both\nGoyo 120x30\n\n" In percentage\nGoyo 120x50%\n\n" With offsets\nGoyo 50%+25%x50%-25%\n```\n\nConfiguration\n-------------\n\n- `g:goyo_width` (default: 80)\n- `g:goyo_height` (default: 85%)\n- `g:goyo_linenr` (default: 0)\n\n### Callbacks\n\nBy default, [vim-airline](https://github.com/bling/vim-airline),\n[vim-powerline](https://github.com/Lokaltog/vim-powerline),\n[powerline](https://github.com/Lokaltog/powerline),\n[lightline.vim](https://github.com/itchyny/lightline.vim),\n[vim-signify](https://github.com/mhinz/vim-signify),\nand [vim-gitgutter](https://github.com/airblade/vim-gitgutter) are temporarily\ndisabled while in Goyo mode.\n\nIf you have other plugins that you want to disable/enable, or if you want to\nchange the default settings of Goyo window, you can set up custom routines\nto be triggered on `GoyoEnter` and `GoyoLeave` events.\n\n```vim\nfunction! s:goyo_enter()\n  if executable(\'tmux\') && strlen($TMUX)\n    silent !tmux set status off\n    silent !tmux list-panes -F \'\\#F\' | grep -q Z || tmux resize-pane -Z\n  endif\n  set noshowmode\n  set noshowcmd\n  set scrolloff=999\n  Limelight\n  " ...\nendfunction\n\nfunction! s:goyo_leave()\n  if executable(\'tmux\') && strlen($TMUX)\n    silent !tmux set status on\n    silent !tmux list-panes -F \'\\#F\' | grep -q Z && tmux resize-pane -Z\n  endif\n  set showmode\n  set showcmd\n  set scrolloff=5\n  Limelight!\n  " ...\nendfunction\n\nautocmd! User GoyoEnter nested call <SID>goyo_enter()\nautocmd! User GoyoLeave nested call <SID>goyo_leave()\n```\n\nMore examples can be found here:\n[Customization](https://github.com/junegunn/goyo.vim/wiki/Customization)\n\nInspiration\n-----------\n\n- [LiteDFM](https://github.com/bilalq/lite-dfm)\n- [VimRoom](http://projects.mikewest.org/vimroom/)\n\nPros.\n-----\n\n1. Works well with splits. Doesn\'t mess up with the current window arrangement\n1. Works well with popular statusline plugins\n1. Prevents accessing the empty windows around the central buffer\n1. Can be closed with any of `:q[uit]`, `:clo[se]`, `:tabc[lose]`, or `:Goyo`\n1. Can dynamically change the width of the window\n1. Adjusts its colors when color scheme is changed\n1. Realigns the window when the terminal (or window) is resized or when the size\n   of the font is changed\n1. Correctly hides colorcolumns and Emojis in statusline\n1. Highly customizable with callbacks\n\nLicense\n-------\n\nMIT\n\n'