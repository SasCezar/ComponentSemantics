b"# vim-bootstrap\n\n[![Join the chat at https://gitter.im/avelino/vim-bootstrap](https://badges.gitter.im/avelino/vim-bootstrap.svg)](https://gitter.im/avelino/vim-bootstrap?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![Open Source Helpers](https://www.codetriage.com/avelino/vim-bootstrap/badges/users.svg)](https://www.codetriage.com/avelino/vim-bootstrap)\n\nVim Bootstrap provides a simple method for generating .vimrc configuration files for Vim, NeoVim, NeoVim-Qt, MacVim and GVim.\n\n## Pre-requisites\n\nThe distribution is designed to work with Vim >= 8 and neovim.\n\n### Mac OSX\n\n```\n$ brew install git ctags\n```\n\n### Linux\n\n* Ubuntu\\Debian\n\n```\n$ sudo apt-get install git exuberant-ctags ncurses-term curl\n```\n\n* Gentoo\n```\n$ sudo emerge --ask dev-util/ctags sys-libs/ncurses dev-vcs/git dev-python/pyflakes net-misc/curl\n```\n\n* Arch Linux via *pacman*\n```\n$ sudo pacman -S git ctags ncurses curl\n```\n* Fedora\n\n```\n$ sudo dnf install ncurses-devel git ctags-etags curl\n```\n\n* openSUSE\n```\n$ sudo zypper in ncurses-devel git ctags curl\n```\n\n### Python bundle (optionally)\n\n* pyflakes\n* jedi\n* neovim (neovim only)\n\n```\n$ pip install flake8 jedi\n$ pip2 install --user --upgrade neovim\n$ pip3 install --user --upgrade neovim\n```\n\n### Elm bundle (optionally)\n\n* elm-test\n* elm-oracle\n* elm-format\n\n```\n$ npm install -g elm-test\n$ npm install -g elm-oracle\n$ npm install -g elm-format@exp\n\n```\n\n## Installation\n\n* Download your own vimrc file at https://vim-bootstrap.com\n* Put your vimrc file into home folder or `$XDG_CONFIG_HOME/nvim/init.vim` if you use NeoVim\n\n**vim:** `mv ~/Downloads/generate.vim ~/.vimrc`\n\n**neovim:** `mv ~/Downloads/generate.vim $XDG_CONFIG_HOME/nvim/init.vim`\n\n* Execute ViM and it will install plugins automatically\n```\n`vim`\n```\n\n### Fast-installation by URL parameters\n\nVim-bootstrap generator can accept URL params via request as example below.\n\n    curl 'https://vim-bootstrap.com/generate.vim' --data 'langs=javascript&langs=php&langs=html&langs=ruby&editor=vim&frameworks=vuejs' > ~/.vimrc\n\n\n### Updating to the latest version\n\n    :VimBootstrapUpdate (thanks to @sherzberg)\n    :PlugInstall\n\n\n### Offline usage\n\nYou can run vim-bootstrap Go package to generate a vimrc file, just download it:\n\n    go get github.com/avelino/vim-bootstrap\n    cd $GOPATH/src/github.com/avelino/vim-bootstrap\n    go build\n\nInside vim-bootrap folder `cd vim-bootstrap` use `vim-bootstrap` module (file) like this example:\n\n    ./vim-bootstrap -langs=python,lua,ruby,javascript,haskell -frameworks vuejs -editor=vim > ~/.vimrc\n\nFor more instructions run `vim-bootstrap -h`\n\n### openSUSE repo\n\nvim-bootstrap is also available on openSUSE on both Leap 42.2/42.3 and Tumbleweed. Leap versions must add devel:tools repository before, while Tumbleweed users should have vim-bootstrap in the default repository without the need to add any extra repository.\n\n* Leap 42.2\n```\n$ sudo zypper ar -f http://download.opensuse.org/repositories/devel:/tools/openSUSE_Leap_42.2/ devel:tools\n$ sudo zypper ref\n$ sudo zypper in vim-bootstrap\n```\n\n* Leap 42.3\n```\n$ sudo zypper ar -f http://download.opensuse.org/repositories/devel:/tools/openSUSE_Leap_42.3/ devel:tools\n$ sudo zypper ref\n$ sudo zypper in vim-bootstrap\n```\n\n* Tumbleweed\n```\n$ sudo zypper ref\n$ sudo zypper in vim-bootstrap\n```\n\n\n\n## Customization\n\nIt's highly recommended to add customizations in a separate file. This way, you can maintain the original vim-bootstrap generated vimrc file and subsequent updates.\n\nFor Vim users, the files available for customization are `~/.vimrc.local` and `~/.vimrc.local.bundles`. The former handles general configuration while the latter handle external Vim plugins through `vim-plug`.\n\nNeoVim users can also customize their configuration by using `$XDG_CONFIG_HOME/nvim/local_init.vim` and `$XDG_CONFIG_HOME/nvim/local_bundles.vim`.\n\n## Commands\n</summary>\n<details>\n<summary>:black_small_square: Basic Commands</summary>\n\nCommands | Descriptions\n--- | ---\n`:cd <path>` | Open path */path*\n<kbd>Ctrl</kbd><kbd>w</kbd>+<kbd>h</kbd><kbd>j</kbd><kbd>k</kbd><kbd>l</kbd> | Navigate via split panels\n<kbd>Ctrl</kbd><kbd>w</kbd><kbd>w</kbd> | Alternative navigate vim split panels\n<kbd>,</kbd><kbd>.</kbd> | Set path working directory\n<kbd>,</kbd><kbd>w</kbd> or <kbd>,</kbd><kbd>x</kbd> | Next buffer navigate\n<kbd>,</kbd><kbd>q</kbd> or <kbd>,</kbd><kbd>z</kbd> | previous buffer navigate\n<kbd>shift</kbd><kbd>t</kbd> | Create a tab\n<kbd>tab</kbd> | next tab navigate\n<kbd>shift</kbd><kbd>tab</kbd> | previous tab navigate\n<kbd>,</kbd><kbd>e</kbd> | Find and open files\n<kbd>,</kbd><kbd>b</kbd> | Find file on buffer (open file)\n<kbd>,</kbd><kbd>c</kbd> | Close active buffer (clone file)\n<kbd>F2</kbd>  | Open tree navigate in actual opened file\n<kbd>F3</kbd>  | Open/Close tree navigate files\n<kbd>F4</kbd> | List all class and method, support for python, go, lua, ruby and php\n<kbd>,</kbd><kbd>v</kbd> | Split vertical\n<kbd>,</kbd><kbd>h</kbd> | Split horizontal\n<kbd>,</kbd><kbd>f</kbd> | Search in the project\n<kbd>,</kbd><kbd>o</kbd> | Open github file/line (website), if used git in **github**\n<kbd>,</kbd><kbd>s</kbd><kbd>h</kbd> | Open shell.vim terminal inside Vim or NeoVim built-in terminal\n<kbd>,</kbd><kbd>g</kbd><kbd>a</kbd> | Execute *git add* on current file\n<kbd>,</kbd><kbd>g</kbd><kbd>c</kbd> | git commit (splits window to write commit message)\n<kbd>,</kbd><kbd>g</kbd><kbd>s</kbd><kbd>h</kbd> | git push\n<kbd>,</kbd><kbd>g</kbd><kbd>l</kbd><kbd>l</kbd> | git pull\n<kbd>,</kbd><kbd>g</kbd><kbd>s</kbd> | git status\n<kbd>,</kbd><kbd>g</kbd><kbd>b</kbd> | git blame\n<kbd>,</kbd><kbd>g</kbd><kbd>d</kbd> | git diff\n<kbd>,</kbd><kbd>g</kbd><kbd>r</kbd> | git remove\n<kbd>,</kbd><kbd>s</kbd><kbd>o</kbd> | Open Session\n<kbd>,</kbd><kbd>s</kbd><kbd>s</kbd> | Save Session\n<kbd>,</kbd><kbd>s</kbd><kbd>d</kbd> | Delete Session\n<kbd>,</kbd><kbd>s</kbd><kbd>c</kbd> | Close Session\n<kbd>></kbd> | indent to right\n<kbd><</kbd> | indent to left\n<kbd>g</kbd><kbd>c</kbd> | Comment or uncomment lines that {motion} moves over\n<kbd>Y</kbd><kbd>Y</kbd> | Copy to clipboard\n<kbd>,</kbd><kbd>p</kbd> | Paste\n<kbd>Ctrl</kbd><kbd>y</kbd> + <kbd>,</kbd> | Activate Emmet plugin\n<kbd>Ctrl</kbd><kbd>h</kbd> | Does a fuzzy search in your command mode history\n</details>\n\n<details>\n<summary>:black_small_square: Python hotkeys</summary>\n\nCommands | Descriptions\n--- | ---\n`SHIFT+k` | Open documentation\n`Control+Space` | Autocomplete\n`,d` | Go to the Class/Method definition\n`,r` | Rename object definition\n`,n` | Show where command is usage\n</details>\n\n<details>\n<summary>:black_small_square: Ruby hotkeys</summary>\n\nCommands | Descriptions\n------- | -------\n`,a`        | Run all specs\n`,l`        | Run last spec\n`,t`        | Run current spec\n`,rap`        | Add Parameter\n`,rcpc`     | Inline Temp\n`,rel`        | Convert Post Conditional\n`,rec`        | Extract Constant          (visual selection)\n`,rec`       | Extract to Let (Rspec)\n`,relv`     | Extract Local Variable    (visual selection)\n`,rrlv`     | Rename Local Variable     (visual selection/variable under the cursor)\n`,rriv`     | Rename Instance Variable  (visual selection)\n`,rem`      | Extract Method            (visual selection)\n\n</details>\n\n## Learn Vim\n\nVisit the following sites to learn more about Vim:\n\n* [Learn Vim Progressively](https://yannesposito.com/Scratch/en/blog/Learn-Vim-Progressively/)\n* [Vim Adventures](https://vim-adventures.com/)\n* [Vimcasts](https://vimcasts.org)\n* [Byte of Vim](https://www.swaroopch.com/notes/Vim)\n* [MinuteVim Tricks](https://www.youtube.com/user/MinuteVimTricks)\n* [Join the Church of Vim, and you too can be a saint!](https://www.avelino.xxx/2015/03/church-vim)\n* [Vim para noobs (in portuguese)](https://woliveiras.com.br/vimparanoobs/)\n* [Vimbook (in portuguese)](https://cassiobotaro.gitbooks.io/vimbook/content/)\n"