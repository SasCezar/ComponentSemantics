b'<div align="center">\n<img alt="Vim-CtrlSpace" src="https://raw.github.com/vim-ctrlspace/vim-ctrlspace/master/gfx/logo5.png" />\n<br><br>\n</div>\n\nWelcome to **Vim-CtrlSpace**, a comprehensive solution for your Vim editor\nproviding:\n\n* tabs / buffers / files management\n* fast fuzzy searching **powered by Go**\n* workspaces (sessions)\n* bookmarks for your favorite projects\n\nThe plugin name follows the convention of naming fuzzy search plugins\nafter their default mappings (like _Command-T_ or _CtrlP_), hence the\nplugin mapping is by default `Ctrl` + `Space`.\n\nIf you like the plugin please don\'t forget to leave a :star: for this\nproject! This will help me to estimate the plugin popularity and plan\nfurther development :).\n\nIf you have already starred this repo, thank you! Thanks to you it\'s my\npet project now :). If you have a question, a feature request, or a new\nidea, don\'t hesitate to post new issues or pull requests. Collaboration is\nthe most awesome thing in the open source community!\n\n\n### Version 5\n\nVim-CtrlSpace started over 2 years ago as a fork of [another\nplugin](https://github.com/roblillack/vim-bufferlist) and the Version\n**5** is the result of the experience gained during that period and\ncooperation with the community.\n\nVersion 5 is the biggest upgrade in the plugin history. All plugin code\nhas been rewritten from scratch taking user feedback as a great resource\nof ideas and challenges into account. Thanks to users the plugin has\nconfigurable key mappings and allows you to handle projects with **100\n000** files!\n\nIn case you\'re curious, Vim-CtrlSpace 5 took me 5 months of spare evenings\nto complete :).\n\nThe most exciting **Vim-CtrlSpace 5** features are:\n\n* better, modular, and extensible code base\n* simplified, well thought-out, and clear design\n* new fuzzy search engine for files (written in Go)\n* more effective and responsive behavior\n* fine-grained configuration\n\nVersion 5 is not backward compatible. All configuration variables and API\nfunctions have been renamed. Please check Vim help for more info:\n\n```VimL\n:help ctrlspace-configuration\n```\n\n\n## Idea by Analogy\n\nVim-CtrlSpace interface is a window you can invoke by pressing\n`<C-Space>`. The window displays a list of items. You can select those\nitems with `<j>`, `<k>`, and `<CR>` keys.\n\n<p align="center">\n<img alt="Vim-CtrlSpace" src="https://raw.github.com/vim-ctrlspace/vim-ctrlspace/master/gfx/cs5_window.png" />\n</p>\n\nGenerally speaking Vim-CtrlSpace can display 5 types of lists:\n\n* Buffer List\n* File List\n* Tab List\n* Workspace List\n* Bookmark List\n\nLists can be explained with a simple analogy. Let\'s imagine Vim is\na writing desk. Your projects are like drawers. The **Bookmark List**\nsimply displays your favorite projects.\n\nTo get documents from a drawer you would need a **File List**. It allows\nyou to easily look up contents of a given project. Once you locate and\npick up a file it becomes a **buffer**.\n\nA buffer is like a sheet of paper lying on the desk. Sometimes you can\nhave a blank piece of paper \xe2\x80\x93 that\'s a new unsaved buffer. It would become\neventually a file on the disk once saved (put into a drawer). To manage\nall buffers on the desk you would need a **Buffer List**.\n\nSo far our analogy is fairly simple. This workflow is straightforward but\ninefficient in the long run with a large amount of files. How could we\noptimize it?\n\nThe answer are **tabs** \xe2\x80\x93 a secret weapon of **Vim-CtrlSpace**. Each tab\nholds a **separate** list of buffers. And this is something very different\nwhen compared to plain Vim. Tabs powered by the plugin can be seen as\npiles of documents on the desk.\n\nWith tabs you can, for example:\n\n* group related buffers\n* extract to other tabs\n* name them accordingly\n* move or copy them\n\nTabs usage in **Vim-CtrlSpace** is quite more extensive than in Vim. This\nis because they serve mainly as independent buffer lists, so you are\nlikely to have plenty of them. Tabs can be accessed and managed within\n**Tab List**.\n\nAll your buffers, tabs, and tab layouts can be persisted as a workspace.\nIt\'s like taking a picture of your desk with an instant camera. You can\nsave multiple workspaces per project with **Workspace List**.\n\n\n## Getting Started\n\n### Installation\n\nIf you use Vundle add to your `.vimrc`:\n\n```VimL\nPlugin \'vim-ctrlspace/vim-ctrlspace\'\n```\n\nYou can also clone the repository to your `.vim` directory:\n\n```Shell\ncd ~/.vim\ngit clone https://github.com/vim-ctrlspace/vim-ctrlspace.git .\n```\n\n### Basic Settings\n\nFirst please make sure that you set `nocompatible` and `hidden` options\n(required by the plugin) in your `.vimrc`:\n\n```VimL\nset nocompatible\nset hidden\n```\n\nIf you feel brave enough **turn off** tabline:\n\n```VimL\nset showtabline=0\n```\n\nTabline in Vim has very limited capabilities and as Vim-CtrlSpace makes\nuse of tabs intensively, tabline would just get in your way. **Tab List**\n(`<l>`) makes tabline obsolete ;).\n\n\n#### Neovim\n\nNeovim requires adding the following line to your `.vimrc` or `init.vim`:\n\n```VimL\nlet g:CtrlSpaceDefaultMappingKey = "<C-space> "\n```\n\nNote the trailing space at the end of the mapping. Neovim doesn\'t mind\nit, but it makes vim-ctrlspace\'s "is the mapping left at default" check \nfail so it won\'t change the mapping to `<nul>`.\n\n\n#### Go Engine\n\nThe plugin provides engine compiled for popular operating systems and\narchitectures. By default it will attempt to detect your os and\narchitecture. To see if auto detection was successful press `<?>`.\n\nTo find more about file engines check:\n\n```VimL\n:help g:CtrlSpaceFileEngine\n```\n\n\n#### Symbols\n\nVim-Ctrlspace displays icons in the UI if your font supports UTF8, or\nASCII characters as a fallback. Some symbols (glyphs) might not look well\nwith the font you are using, so feel free to change and adjust them.\n\nThis is the config I use for Inconsolata font in MacVim:\n\n```VimL\nif has("gui_running")\n    " Settings for MacVim and Inconsolata font\n    let g:CtrlSpaceSymbols = { "File": "\xe2\x97\xaf", "CTab": "\xe2\x96\xa3", "Tabs": "\xe2\x96\xa2" }\nendif\n```\n\nSince it\'s impossible to provide universal character set that would look well\non any machine, therefore the fine tuning is left up to you.\n\nYou can find more about this tuning option in the plugin help:\n\n```VimL\n:help g:CtrlSpaceSymbols\n```\n\nIf you feel that you have found a better symbol for a given view, you are\nmore than welcome to open a pull request.\n\n\n#### Glob Command\n\nAnother important setting is the *Glob* command. This command is used to\ncollect all files in your project directory. Specifically, I recommend\nthat you install and use `ag`, as it respects `.gitignore` rules and is\nreally fast. Once it\'s installed you can add this line to your `.vimrc`:\n\n```VimL\nif executable("ag")\n    let g:CtrlSpaceGlobCommand = \'ag -l --nocolor -g ""\'\nendif\n```\n\n#### Search Timing\n\nIf you usually have to deal with huge projects having 100 000 files you\ncan increase plugin fuzzy search delay to make it even more responsible by\nproviding a higher `g:CtrlSpaceSearchTiming` value:\n\n```VimL\nlet g:CtrlSpaceSearchTiming = 500\n```\n\n#### Colors\n\nFinally, you can adjust some plugin colors. By default plugin uses\nthe following setup:\n\n```VimL\nhi link CtrlSpaceNormal   PMenu\nhi link CtrlSpaceSelected PMenuSel\nhi link CtrlSpaceSearch   Search\nhi link CtrlSpaceStatus   StatusLine\n```\n\nHowever some color schemes show search results with the same colors as\nPMenu groups. If that\'s your case try to link CtrlSpaceSearch highlight\ngroup to IncSearch instead:\n\n```VimL\nhi link CtrlSpaceSearch IncSearch\n```\n\nOf course nothing prevents you from providing your own highlighting, for example:\n\n```VimL\nhi CtrlSpaceSearch guifg=#cb4b16 guibg=NONE gui=bold ctermfg=9 ctermbg=NONE term=bold cterm=bold\n```\n\n\n### First Steps\n\nAlright! You\'ve hopefully installed, configured Vim-CtrlSpace, and\nrestarted Vim (otherwise do it!). Now you\'re wondering how to start using\nthis thing.\n\nFirst, you need to select a project. Vim operates in a directory,\ndescribed as `CWD` (_Current Working Directory_). If you\'ve just started\na MacVim it\'s probably pointing to your home directory (issue `:pwd` to\ncheck it).\n\nI advise you to add a project to the Bookmark List by opening the plugin\nwindow (`<C-Space>`) and pressing `<b>`. The plugin will ask for a project\ndirectory.\n\nMake sure that the path **is not your home directory**. Otherwise the\nplugin will start indexing all your files which will be pointless and\nresource exhaustive. Be concrete and provide a real path to a project.\nOnce your bookmark is created, you can go there with `<CR>`.\n\nNow open some files with `<o>`. Finally save a workspace with `<w>` by\nproviding your first workspace name.\n\nFor more information please check out Vim-CtrlSpace help directly in Vim:\n\n```VimL\n:help ctrlspace\n```\n\nFor key reference press `<?>` inside the plugin window.\n\n### Fuzzy Search Hints\n\nIf you are used to hitting the `<ctrl-P>` key combination for fuzzy search, add\nthis to your .vimrc file:\n\n```VimL\nnnoremap <silent><C-p> :CtrlSpace O<CR>\n```\n\nBe sure to remember to refresh your search file list using `<r>` command.\n\n### Automatically Saving Workspace\n\nCtrl-Space can automatically save your workspace status based on configurations below:\n\n```VimL\nlet g:CtrlSpaceLoadLastWorkspaceOnStart = 1\nlet g:CtrlSpaceSaveWorkspaceOnSwitch = 1\nlet g:CtrlSpaceSaveWorkspaceOnExit = 1\n```\n\n## Authors and License\n\nCopyright &copy; 2013-2015 [Szymon Wrozynski and\nContributors](https://github.com/vim-ctrlspace/vim-ctrlspace/graphs/contributors).\nLicensed under [MIT\nLicense](https://github.com/vim-ctrlspace/vim-ctrlspace/blob/master/plugin/ctrlspace.vim#L5-L26)\nconditions.\n\n**Vim-CtrlSpace** is inspired by Robert Lillack plugin [VIM\nbufferlist](https://github.com/roblillack/vim-bufferlist) &copy; 2005\nRobert Lillack. Moreover some concepts and inspiration has been taken from\n[Vim-Tabber](https://github.com/fweep/vim-tabber) by Jim Steward and\n[Tabline](https://github.com/mkitt/tabline.vim) by Matthew Kitt.\n\nSpecial thanks to [Wojtek Ryrych](https://github.com/ryrych) for help and\npatience ;) and all\n[Contributors](https://github.com/vim-ctrlspace/vim-ctrlspace/graphs/contributors).\n'