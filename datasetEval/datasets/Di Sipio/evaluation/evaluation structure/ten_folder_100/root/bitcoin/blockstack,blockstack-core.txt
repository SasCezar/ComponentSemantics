b'# Blockstack Core\n\n[![PyPI](https://img.shields.io/pypi/v/blockstack.svg)](https://pypi.python.org/pypi/blockstack/)\n[![Slack](https://img.shields.io/badge/join-slack-e32072.svg?style=flat)](http://slack.blockstack.org/)\n\nThis repo provides the packaged reference implementation of a [Blockstack](https://blockstack.org) node, as well as tools and scripts for deploying it. Use the following table to learn more about Blockstack:\n\n| Blockstack Topic/Tech | Where to learn more more |\n|---------------------------------|------------------------------------------------------------------------------|\n| Stacks blockchain v1 | [master branch](https://github.com/blockstack/blockstack-core/tree/mast) |\n| Stacks blockchain v2 | [develop branch](https://github.com/blockstack/blockstack-core/tree/develop) |\n| Clarity smart contract language (preview) | [develop branch](https://github.com/blockstack/blockstack-core/tree/develop) |\n| Use the package | [our core docs](https://docs.blockstack.org/core/naming/introduction.html) |\n| Develop a Blockstack App | [our developer docs](https://docs.blockstack.org/browser/hello-blockstack.html) |\n| Use a Blockstack App | [our browser docs](https://docs.blockstack.org/browser/browser-introduction.html) |\n| Blockstack the company | [our website](https://blockstack.org) |\n\n\n### Interested in the Clarity Smart Contracting language?\n\nActive development of Clarity and the Stacks blockchain is ongoing in the [`develop` branch](https://github.com/blockstack/blockstack-core/tree/develop). This branch contains preview builds of Clarity.\n\n## Table of Contents\n\n- [Blockstack Core](#Blockstack-Core)\n    - [Interested in the Clarity Smart Contracting language?](#Interested-in-the-Clarity-Smart-Contracting-language)\n  - [Table of Contents](#Table-of-Contents)\n  - [What is Blockstack?](#What-is-Blockstack)\n    - [Why use Blockstack?](#Why-use-Blockstack)\n  - [What is Blockstack Core?](#What-is-Blockstack-Core)\n  - [Installing Blockstack Core](#Installing-Blockstack-Core)\n    - [Install from Source](#Install-from-Source)\n    - [Install with `pip`](#Install-with-pip)\n    - [Install with `docker`](#Install-with-docker)\n  - [Running a Blockstack Core Node](#Running-a-Blockstack-Core-Node)\n  - [Using Blockstack Core](#Using-Blockstack-Core)\n    - [Getting Verbose Debugging Output](#Getting-Verbose-Debugging-Output)\n  - [Developer Resources](#Developer-Resources)\n  - [Community](#Community)\n  - [Further Reading](#Further-Reading)\n  - [Copyright and License](#Copyright-and-License)\n\n## What is Blockstack?\n\nBlockstack is a network for decentralized apps where users own their data.\n\nBlockstack applications follow a **can\'t-be-evil** design\nphilosophy.  They *cannot* alter, transfer, or revoke the user\'s identity, and\nthey *cannot* read or write the user\'s data without permission.  Blockstack provides the\nplatform, network, and SDKs for building can\'t-be-evil\napplications using existing Web tools.\nIf you are Web developer, all of your skills are\nimmediately transferrable to Blockstack.\n\nBlockstack applications look and feel like traditional Web applications.\nUnder the hood they use Blockstack APIs for user authentication and storage.\nBlockstack handles user authentication using the [Blockstack Naming\nService](docs/blockstack_naming_service.md)\n(BNS), a decentralized naming and public key infrastructure built on top of the Bitcoin\nblockchain.  It handles storage using [Gaia](https://github.com/blockstack/gaia), a scalable decentralized\nkey/value storage system that looks and feels like `localStorage`,\nbut lets users securely store and share application data\nvia user-selected storage systems.\n\nBlockstack applications differ from traditional Web applications in two key\nways.  First, **users own their identities**.\nThe [Blockstack Browser](https://github.com/blockstack/blockstack-browser)\ngives users direct control over their private keys and profile data,\nand fulfills the role of a SSO provider to Blockstack apps.\nBlockstack Core provides BNS as a way for users to discover each other\'s public\nkeys.\n\nThe second key difference is that **users own their data**.  Users\nchoose *where* their app data gets hosted, and *who* is allowed to read it.\nGaia loads and stores data with the user\'s\nchosen storage providers, and automatically signs and encrypts it with\ntheir app-specific keys.  Only the intended recipients can authenticate and read\nthe data; the storage providers are treated as untrusted middlemen.\n\n### Why use Blockstack?\n\nBlockstack is a win/win for users and developers.  Users are not locked into\napps or services.  Instead, users take their identities and data with them from app to app.\nApps can only read user data if the user chooses to allow it.  If an app goes\noffline, the user still keeps their data.  If users find a better app, they\ncan seamlessly switch over to using it.  Because data is end-to-end encrypted\nand hosted separately from the app, data breaches are inconsequential to users\nbecause there is nothing for hackers to steal.\n\nDevelopers benefit from Blockstack as well.  Apps are simpler to build with\nBlockstack and require less operational overhead, since they no longer have to\nstore user data.  Many non-trivial applications can be implemented\nas single-page Javascript applications using\n[blockstack.js](https://github.com/blockstack/blockstack.js), and deployed as a\nstatic Web page.  The Blockstack API is small, simple, and straightforward to\nintegrate into existing Web apps.\n\n## What is Blockstack Core?\n\nBlockstack Core implements BNS and [Atlas](docs/atlas_network.md), the storage\nrouting system for Gaia.  Blockstack Core\nnodes form the backbone of the Blockstack network.  Each node indexes the\nBitcoin blockchain and maintains a full replica of all names,\npublic keys, and storage routing information.  This makes the Blockstack network\nparticularly resilient to node failure---applications only need to talk to a\nsingle Blockstack Core node to work, and a new or recovering node\ncan quickly reconstruct all of its missing state from its peers.\n\nPower users are encouraged to run local Blockstack Core nodes on their laptops\nor home/office networks in order to have reliable access to the Blockstack\nnetwork.  Your local node maintains the same state as the rest of the Blockstack\nCore nodes, so it will keep serving names, public keys, and storage routes even\nif upstream nodes are unreachable or go offline.\n\n## Installing Blockstack Core\n\nThere are three supported methods to install Blockstack Core:\n- [`source`](#install-from-source)\n- [`pip`](#install-with-pip)\n- [`docker`](#install-with-docker)\n\n### Install from Source\n\nBefore installing Blockstack Core from source, you will need to install\n[`libffi-dev`](https://sourceware.org/libffi/) and\n[`libssl-dev`](https://www.openssl.org/source/).  Mac and Linux users can\nusually grab these packages from their respective package managers.\n\nOnce these dependencies are installed, you can install Blockstack Core\nfrom source via the included `setup.py` script, as follows:\n\n```bash\n$ git clone https://github.com/blockstack/blockstack-core\n$ cd blockstack-core\n$ python2 ./setup.py build\n$ sudo python2 ./setup.py install\n```\n\nYou can also use a [`virtualenv`](https://virtualenv.pypa.io/en/stable/) to\ninstall Blockstack Core in a non-system directory.\n\n### Install with `pip`\n\n**NOTE:** Using `pip` is only supported for stable releases (i.e. `master`).\n\nBlockstack is built against Python 2.7.  You should use `pip2` if you have it instead of `pip`.  If you do not have `pip2`, you should verify that your `pip` is configured for Python 2.\n\nOn Mac:\n\n```bash\n# Install blockstack\n$ pip install blockstack --upgrade\n```\nOn CentOS 7 & RHEL:\n\n```\n# Install dependencies\n$ yum install epel-release\n$ yum install python-pip python-devel openssl-devel libffi-devel rng-tools gmp-devel zlib-devel\n\n# Install blockstack\n$ sudo pip install blockstack --upgrade\n```\n\nYou will need to open ports TCP:6264 and TCP:6270.  If you have trouble starting\n`blockstack-core`, you can try disabling SELinux and/or `firewalld` as follows:\n\n```bash\n# Disable SELinux\n$ setenforce 0\n$ sed -i --follow-symlinks \'s/^SELINUX=.*/SELINUX=disabled/g\' /etc/sysconfig/selinux && cat /etc/sysconfig/selinux\n\n# Stop firewalld\n$ systemctl stop firewalld && systemctl disable firewalld\n```\n\nOn Debian & Ubuntu:\n\n```bash\n# Install dependancies\n$ sudo apt-get update && sudo apt-get install -y python-pip python-dev libssl-dev libffi-dev rng-tools libgmp3-dev\n$ sudo pip install pyparsing\n\n# Install blockstack\n$ sudo pip install blockstack --upgrade\n```\n\n### Install with `docker`\n\n**NOTE:** Using `docker` is only supported for stable releases (i.e. `master`).\n\nAnother way to run `blockstack-core` is through docker. We provide per-commit image builds of this repository that are [available on quay.io](https://quay.io/repository/blockstack/blockstack-core?tab=tags).\n\n```shell\n$ git clone git@github.com:blockstack/blockstack-core.git\n$ cd blockstack-core\n$ docker build -t blockstack-core:master .\n\n# create directory to store Blockstack Core state\n$ export BLOCKSTACK_DIR="/var/blockstack-core-data"\n$ mkdir -p "$BLOCKSTACK_DIR"\n$ docker run \\\n   -v $BLOCKSTACK_DIR:/root/.blockstack-server \\\n   -p 6264:6264 \\\n   -p 6270:6270 \\\n   blockstack-core:master\n```\n\nThese commands will fast-sync and run a Blockstack Core node in about 10\nminutes.  The state for the Blockstack Core node will be stored to\n`$BLOCKSTACK_DIR`.  You can see the node\'s logs with `docker logs -f` or with\n`tail -f "$BLOCKSTACK_DIR/blockstack-server.log"`.\n\nNotes:\n- This method is currently only fully supported on Linux.\n- You will need `sudo` access to run the above scripts, and/or be a member of the `docker` group.\n- You can run more than one instance of this setup per host. Allow at least 1 CPU core for each container\n- To configure a different `bitcoind` node, you must edit your `blockstack-server.ini` file before running the `./docker-tools.sh init-*` commands. After `init-*` has been run you must edit the `data/core/server/blockstack-server.ini` to change those settings. \n\n## Running a Blockstack Core Node\n\nBefore doing anything, you should configure your Blockstack Core node.\n\n```bash\n$ blockstack-core configure\n```\n\nIt is safe to accept all defaults.  It will generate some configuration state in\n`~/.blockstack-server/`.\n\nBecause each Blockstack Core node maintains a full copy of the network state\nlocally, it will need to synchronize its state with the Bitcoin blockchain when\nit starts for the first time.  **This can take days.**  To overcome this,\nwe run some "fast-sync" servers that will serve a new Blockstack Core node a\nrecent snapshot of the network state.  Fast-sync only takes a few minutes.\n\nTo start up a Blockstack Core node from a snapshot, you should run\n\n```bash\n$ blockstack-core --debug fast_sync\n```\n\nBy default, it will pull a snapshot from\n`http://fast-sync.blockstack.org/snapshot.bsk` and use a built-in public key to\nverify its authenticity.  It will populate your `~/.blockstack-server/`\ndirectory with a recent snapshot of the network state (less than 24 hours old).\n\nTo start your Blockstack Core node, you should run\n\n```bash\n$ blockstack-core --debug start\n```\n\nThis will start a Blockstack Core node in the background.  We recommend passing\nthe `--debug` flag so you will receive verbose output, which will help diagnose\nany problems you may have.\n\nYou can find the node\'s log in `~/.blockstack-server/blockstack-server.log`.\n\n## Using Blockstack Core\n\nThe standard way to interact with Blockstack Core is through its RESTful interface.  The full documentation for the API endpoints is available [here](https://core.blockstack.org).  Below are some common examples.\n\nTo check that your API endpoint is up, you can ping it with:\n\n```\n$ curl http://localhost:6270/v1/ping\n{"status": "alive", "version": "20.0.0.0"}\n```\n\nYou can confirm that your API endpoint can contact the `blockstack-core` daemon\nby looking up a name as follows:\n\n```\n$ curl http://localhost:6270/v1/names/muneeb.id\n{"status": "registered", "zonefile": "$ORIGIN muneeb.id\\n$TTL 3600\\n_http._tcp URI 10 1 \\"https://gaia.blockstack.org/hub/1J3PUxY5uDShUnHRrMyU6yKtoHEUPhKULs/0/profile.json\\"\\n", "expire_block": 599266, "blockchain": "bitcoin", "last_txid": "7e16e8688ca0413a398bbaf16ad4b10d3c9439555fc140f58e5ab4e50793c476", "address": "1J3PUxY5uDShUnHRrMyU6yKtoHEUPhKULs", "zonefile_hash": "37aecf837c6ae9bdc9dbd98a268f263dacd00361"}\n```\n\nYou can stop the Blockstack Core daemon with the following command:\n\n```\n$ blockstack-core stop\n```\n\n### Getting Verbose Debugging Output\n\nBlockstack Core does not log very much non-error information by default.  To get\nverbose output, you can pass `--debug` to both `blockstack-core` and `blockstack\napi`, as follows:\n\n```bash\n$ blockstack-core --debug start && tail -f ~/.blockstack-server/blockstack-server.log\n```\n\nIn addition `blockstack-core` can run in the\nforeground, without becoming daemons.  To do so, run them as:\n\n```bash\n$ blockstack-core --debug start --foreground\n```\n\n## Developer Resources\n\n**v20.0.0.0** is the current stable release of Blockstack Core.  It available on the `master` branch.\n\nThe next release is being built on the [develop](https://github.com/blockstack/blockstack-core/tree/develop). Please submit all\npull requests to the `develop` branch.\n\nIn the list of [release notes](./release_notes) you can find what has changed in each release.\n\nBlockstack Core has an extensive integration test framework, which lets you\nexperiment with Blockstack in a sandboxed environment.  The test framework gives your Blockstack\nCore node a local, private Bitcoin blockchain that lets you safely experiment\nwith different name and namespace transactions without spending Bitcoin.\nWe use the integration test\nframework to test everything from new API calls to new Blockstack Browser\nfeatures.  Please see the relevant\n[documentation](./integration_tests) to get started.\n\nWe welcome any small or big contributions! Please take a moment to\n[review the guidelines for contributing to open source](https://guides.github.com/activities/contributing-to-open-source/) in order to make the contribution process easy and effective for everyone involved.\n\n## Community\n\nBeyond this Github project,\nBlockstack maintains a public [forum](https://forum.blockstack.org) and a\npermissioned [Slack](https://blockstack.slack.com) channel.  In addition, the project\nmaintains a [mailing list](https://blockstack.org/signup) which sends out\ncommunity announcements.\n\nThe greater Blockstack community regularly hosts in-person\n[meetups](https://www.meetup.com/topics/blockstack/).  The project\'s\n[YouTube channel](https://www.youtube.com/channel/UC3J2iHnyt2JtOvtGVf_jpHQ) includes\nvideos from some of these meetups, as well as video tutorials to help new\nusers get started and help developers wrap their heads around the system\'s\ndesign.\n\n## Further Reading\n\nYou can learn more by visiting [the Blockstack Website](https://blockstack.org) and checking out the in-depth articles and documentation:\n\n- [How Blockstack Works (white paper)](https://blockstack.org/docs/how-blockstack-works)\n- [Blockstack General FAQ](https://blockstack.org/faq)\n- [Blockstack Technical FAQ](docs/faq_technical.md)\n- [Blockstack In-depth Documentation Repository](docs/README.md)\n\nYou can also read peer-reviewed Blockstack papers:\n\n- ["Blockstack: A Global Naming and Storage System Secured by Blockchains"](https://blockstack.org/blockstack.pdf), Proc. USENIX Annual Technical Conference ([ATC \'16](https://www.usenix.org/conference/atc16)), June 2016\n- ["Extending Existing Blockchains with Virtualchain"](https://blockstack.org/virtualchain_dccl2016.pdf), Distributed Cryptocurrencies and Consensus Ledgers ([DCCL \'16](https://www.zurich.ibm.com/dccl/) workshop, at [ACM PODC 2016](https://www.podc.org/podc2016/)), July 2016\n\nIf you have high-level questions about Blockstack, try [searching our forum](https://forum.blockstack.org) and start a new question if your question is not answered there.\n\n## Copyright and License\n\nThe code and documentation copyright are attributed to blockstack.org for the year of 2018.\n\nThis code is released under [the GPL v3 license](http://www.gnu.org/licenses/quick-guide-gplv3.en.html), and the docs are released under [the Creative Commons license](http://creativecommons.org/).\n'