b'# BIP39\n\n[![Build Status](https://travis-ci.org/bitcoinjs/bip39.png?branch=master)](https://travis-ci.org/bitcoinjs/bip39)\n[![NPM](https://img.shields.io/npm/v/bip39.svg)](https://www.npmjs.org/package/bip39)\n\n[![js-standard-style](https://cdn.rawgit.com/feross/standard/master/badge.svg)](https://github.com/feross/standard)\n\n\nJavaScript implementation of [Bitcoin BIP39](https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki): Mnemonic code for generating deterministic keys\n\n## Reminder for developers\n\n***Please remember to allow recovery from mnemonic phrases that have invalid checksums (or that you don\'t have the wordlist)***\n\nWhen a checksum is invalid, warn the user that the phrase is not something generated by your app, and ask if they would like to use it anyway. This way, your app only needs to hold the wordlists for your supported languages, but you can recover phrases made by other apps in other languages.\n\nHowever, there should be other checks in place, such as checking to make sure the user is inputting 12 words or more separated by a space. ie. `phrase.trim().split(/\\s+/g).length >= 12`\n\n## Removing wordlists from webpack/browserify\n\n Browserify/Webpack bundles can get very large if you include all the wordlists, so you can now exclude wordlists to make your bundle lighter.\n\n For example, if we want to exclude all wordlists besides chinese_simplified, you could build using the browserify command below.\n\n ```bash\n$ browserify -r bip39 -s bip39 \\\n  --exclude=./wordlists/english.json \\\n  --exclude=./wordlists/japanese.json \\\n  --exclude=./wordlists/spanish.json \\\n  --exclude=./wordlists/italian.json \\\n  --exclude=./wordlists/french.json \\\n  --exclude=./wordlists/korean.json \\\n  --exclude=./wordlists/chinese_traditional.json \\\n   > bip39.browser.js\n```\n\n This will create a bundle that only contains the chinese_simplified wordlist, and it will be the default wordlist for all calls without explicit wordlists.\n \n You can also do this in Webpack using the `IgnorePlugin`. Here is an example of excluding all non-English wordlists\n \n ```javascript\n ...\n plugins: [\n   new webpack.IgnorePlugin(/^\\.\\/wordlists\\/(?!english)/, /bip39\\/src$/),\n ],\n ...\n ```\n\n This is how it will look in the browser console.\n\n ```javascript\n> bip39.entropyToMnemonic(\'00000000000000000000000000000000\')\n"\xe7\x9a\x84 \xe7\x9a\x84 \xe7\x9a\x84 \xe7\x9a\x84 \xe7\x9a\x84 \xe7\x9a\x84 \xe7\x9a\x84 \xe7\x9a\x84 \xe7\x9a\x84 \xe7\x9a\x84 \xe7\x9a\x84 \xe5\x9c\xa8"\n> bip39.wordlists.chinese_simplified\nArray(2048) [ "\xe7\x9a\x84", "\xe4\xb8\x80", "\xe6\x98\xaf", "\xe5\x9c\xa8", "\xe4\xb8\x8d", "\xe4\xba\x86", "\xe6\x9c\x89", "\xe5\x92\x8c", "\xe4\xba\xba", "\xe8\xbf\x99", \xe2\x80\xa6 ]\n> bip39.wordlists.english\nundefined\n> bip39.wordlists.japanese\nundefined\n> bip39.wordlists.spanish\nundefined\n> bip39.wordlists.italian\nundefined\n> bip39.wordlists.french\nundefined\n> bip39.wordlists.korean\nundefined\n> bip39.wordlists.chinese_traditional\nundefined\n```\n\n For a list of supported wordlists check the wordlists folder. The name of the json file (minus the extension) is the name of the key to access the wordlist.\n\n You can also change the default wordlist at runtime if you dislike the wordlist you were given as default.\n\n ```javascript\n> bip39.entropyToMnemonic(\'00000000000000000000000000000fff\')\n"\xe3\x81\x82\xe3\x81\x84\xe3\x81\x93\xe3\x81\x8f\xe3\x81\x97\xe3\x82\x93\xe3\x80\x80\xe3\x81\x82\xe3\x81\x84\xe3\x81\x93\xe3\x81\x8f\xe3\x81\x97\xe3\x82\x93\xe3\x80\x80\xe3\x81\x82\xe3\x81\x84\xe3\x81\x93\xe3\x81\x8f\xe3\x81\x97\xe3\x82\x93\xe3\x80\x80\xe3\x81\x82\xe3\x81\x84\xe3\x81\x93\xe3\x81\x8f\xe3\x81\x97\xe3\x82\x93\xe3\x80\x80\xe3\x81\x82\xe3\x81\x84\xe3\x81\x93\xe3\x81\x8f\xe3\x81\x97\xe3\x82\x93\xe3\x80\x80\xe3\x81\x82\xe3\x81\x84\xe3\x81\x93\xe3\x81\x8f\xe3\x81\x97\xe3\x82\x93\xe3\x80\x80\xe3\x81\x82\xe3\x81\x84\xe3\x81\x93\xe3\x81\x8f\xe3\x81\x97\xe3\x82\x93\xe3\x80\x80\xe3\x81\x82\xe3\x81\x84\xe3\x81\x93\xe3\x81\x8f\xe3\x81\x97\xe3\x82\x93\xe3\x80\x80\xe3\x81\x82\xe3\x81\x84\xe3\x81\x93\xe3\x81\x8f\xe3\x81\x97\xe3\x82\x93\xe3\x80\x80\xe3\x81\x82\xe3\x81\x84\xe3\x81\x93\xe3\x81\x8f\xe3\x81\x97\xe3\x82\x93\xe3\x80\x80\xe3\x81\x82\xe3\x81\xbe\xe3\x81\x84\xe3\x80\x80\xe3\x82\x8d\xe3\x82\x93\xe3\x82\x8a"\n> bip39.setDefaultWordlist(\'italian\')\nundefined\n> bip39.entropyToMnemonic(\'00000000000000000000000000000fff\')\n"abaco abaco abaco abaco abaco abaco abaco abaco abaco abaco aforisma zibetto"\n```\n\n## Installation\n``` bash\nnpm install bip39\n```\n\n## Examples\n``` js\n// Generate a random mnemonic (uses crypto.randomBytes under the hood), defaults to 128-bits of entropy\nconst mnemonic = bip39.generateMnemonic()\n// => \'seed sock milk update focus rotate barely fade car face mechanic mercy\'\n\nbip39.mnemonicToSeedSync(\'basket actual\').toString(\'hex\')\n// => \'5cf2d4a8b0355e90295bdfc565a022a409af063d5365bb57bf74d9528f494bfa4400f53d8349b80fdae44082d7f9541e1dba2b003bcfec9d0d53781ca676651f\'\n\nbip39.mnemonicToSeedSync(\'basket actual\')\n// => <Buffer 5c f2 d4 a8 b0 35 5e 90 29 5b df c5 65 a0 22 a4 09 af 06 3d 53 65 bb 57 bf 74 d9 52 8f 49 4b fa 44 00 f5 3d 83 49 b8 0f da e4 40 82 d7 f9 54 1e 1d ba 2b ...>\n\n// mnemonicToSeed has an synchronous version\n// mnemonicToSeedSync is less performance oriented\nbip39.mnemonicToSeed(\'basket actual\').then(console.log)\n// => <Buffer 5c f2 d4 a8 b0 35 5e 90 29 5b df c5 65 a0 22 a4 09 af 06 3d 53 65 bb 57 bf 74 d9 52 8f 49 4b fa 44 00 f5 3d 83 49 b8 0f da e4 40 82 d7 f9 54 1e 1d ba 2b ...>\n\nbip39.mnemonicToSeed(\'basket actual\').then(bytes => bytes.toString(\'hex\')).then(console.log)\n// => \'5cf2d4a8b0355e90295bdfc565a022a409af063d5365bb57bf74d9528f494bfa4400f53d8349b80fdae44082d7f9541e1dba2b003bcfec9d0d53781ca676651f\'\n\nbip39.mnemonicToSeedSync(\'basket actual\', \'a password\')\n// => <Buffer 46 16 a4 4f 2c 90 b9 69 02 14 b8 fd 43 5b b4 14 62 43 de 10 7b 30 87 59 0a 3b b8 d3 1b 2f 3a ef ab 1d 4b 52 6d 21 e5 0a 04 02 3d 7a d0 66 43 ea 68 3b ... >\n\nbip39.validateMnemonic(mnemonic)\n// => true\n\nbip39.validateMnemonic(\'basket actual\')\n// => false\n```\n\n\n``` js\nconst bip39 = require(\'bip39\')\n\n// defaults to BIP39 English word list\n// uses HEX strings for entropy\nconst mnemonic = bip39.entropyToMnemonic(\'00000000000000000000000000000000\')\n// => abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon about\n\n// reversible\nbip39.mnemonicToEntropy(mnemonic)\n// => \'00000000000000000000000000000000\'\n```\n'