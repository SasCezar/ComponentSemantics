b'# When Bitcoin meets Artificial Intelligence\n[![dep1](https://img.shields.io/badge/Status-Work_In_Progress-orange.svg)]()\n\nExploiting Bitcoin prices patterns with Deep Learning. Like OpenAI, we train our models on raw pixel data. Exactly how an experienced human would see the curves and takes an action.\n\n<p align="center">\n  <img src="https://bitcoin.org/img/icons/opengraph.png" width="100">\n</p>\n\nSo far, we achieved:\n\n- [x] Download Bitcoin tick data\n- [x] Convert to 5-minute data\n- [x] Convert to Open High Low Close representation\n- [x] Train a simple AlexNet on 20,000 samples: accuracy is 70% for predicting if asset will go UP or DOWN. Training is done on [NVIDIA DIGITS](https://github.com/nvidia/digits) and with the Caffe framework.\n- [x] Quantify how much the price will go UP or DOWN. Because the price can go UP by epsilon percent 99% of the time, and pulls back by 50%\n- [ ] Train on **1,000,000+** samples (at least)\n- [ ] Apply more complex Conv Nets (at least Google LeNet)\n- [ ] Integrate bar volumes on the generated OHLC (Open, High, Low, Close) image\n- [ ] Use CNN attention to know what\'s important for which image. Maybe only a fraction of the image matters for the prediction\n\n## Results on 20,000 samples (small dataset)\n\n<p align="center">\n  <img src="assets/1.png" width="500">\n  <br><i>Training on 5 minute price data (Coinbase USD)</i>\n</p>\n\n<hr/>\n\n<p align="center">\n  <img src="assets/2.png" width="500">\n  <br><i>Some examples of the training set</i>\n</p>\n\n<hr/>\n\n## Illustration of the dataset from CoinbaseUSD\n\n```\n                     price_open  price_high  price_low  price_close      volume  close_price_returns close_price_returns_bins  close_price_returns_labels\nDateTime_UTC                                                                                                                                             \n2017-05-29 11:55:00     2158.86     2160.06    2155.78      2156.00   21.034283             0.000000          (-0.334, 0.015]                           5\n2017-05-29 12:00:00     2155.98     2170.88    2155.79      2158.53   47.772555             0.117347           (0.015, 0.364]                           6\n2017-05-29 12:05:00     2158.49     2158.79    2141.12      2141.92  122.332090            -0.769505        (-1.0322, -0.683]                           3\n2017-05-29 12:10:00     2141.87     2165.90    2141.86      2162.44   87.253402             0.958019          (0.713, 1.0623]                           8\n```\n- Scroll right to see all the columns!\n- Volumes are displayed in BTC.\n- Returns are in percentage and are computed on the close prices.\n\n## How to get started?\n```\ngit clone https://github.com/philipperemy/deep-learning-bitcoin.git\ncd deep-learning-bitcoin\n./data_download.sh # will download it to /tmp/\npython3 data_generator.py /tmp/btc-trading-patterns/ /tmp/coinbaseUSD.csv 1 # 1 means we want to use quantiles on returns. 0 would mean we are interested if the bitcoin goes UP or DOWN only.\n```\n\nIf you are interested into building a huge dataset (coinbase.csv contains around 18M rows), it\'s preferrable to run the program in background mode:\n\n```\nnohup python3 -u data_generator.py /tmp/btc-trading-patterns/ /tmp/coinbaseUSD.csv 1 > /tmp/btc.out 2>&1 &\ntail -f /tmp/btc.out\n```\n\nIf you ever see this error:\n\n```\n_tkinter.TclError: no display name and no $DISPLAY environment variable\n```\n\nPlease refer to this solution: https://stackoverflow.com/questions/37604289/tkinter-tclerror-no-display-name-and-no-display-environment-variable\n\n## Run with Docker\n\nTo build the docker image just execute\n\n```\ndocker build -t dlb .\n```\n\nfrom the repository folder and then run the container\n\n```\ndocker run -it --name dlb -v $PWD:/app dlb /bin/bash\n```\n\nthe current folder will be mounted into `/app`. To verify the correct mount\nexecute inside the container\n\n```\nroot@c11ef702a6d6:/app# mount| grep app\n/dev/sda2 on /app type ext4 (rw,relatime,errors=remount-ro,data=ordered)\n```\n'