b'# Crypto Trading Bot Framework using the Gemini Exchange\n:moneybag: Python bindings for trading Bitcoin, Ethereum, & USD on the Gemini.com Exchange API.\n\n---\n## ARCHIVED: Use https://github.com/ccxt/ccxt\n\n## Quickstart\n\n1. **Download & install**\n```bash\ngit clone https://github.com/pirate/cryto-trader.git\ncd crypto-trader\npip3 install -r requirements.txt\n```\n\n2. **Open https://exchange.gemini.com/settings/api and get an API key & secret**\n```bash\ncp secrets_default.py secrets.py\nnano secrets.py  # add key & secret here\n```\n\n3. **Start hacking!**\n```python\nimport gemini_api as api\nfrom symbols import Order, ETH, USD\n\ncurrent_price = USD(api.ticker(\'ethusd\')[\'last\'])\nif current_price > USD(950.00):\n    buy_order = Order(api.new_order(\'buy\', \'ethusd\', ETH(0.001), current_price))\n\n    for event in order_events(buy_order.id):\n        print(event)\n```\n\n4. **(Optional) run the example bot**\n```bash\nnano settings.py                   # Confirm your bot parameters\npython3 ./example.py ethusd        # Run the example theshold bot\n```\n\n## Configuration\n\n - **API Key Secrets:** `secrets.py`\n - **Bot Settings:** `settings.py`\n\n## API Documentation\n\n```python\nimport gemini_api as api\nfrom symbols import Order, USD, BTC, ETH\n```\n\n### Data Types\n\n**Currencies:**\n \n - `symbols.USD`: US Dollar `USD(1.25)`\n - `symbols.BTC`: Bitcoin   `BTC(0.000001)`\n - `symbols.ETH`: Ethereum  `ETH(0.0001)`\n\nAll currency symbols are based on the base type `symbols.Currency`.\n\n**Order:**\nAll API functions that deal with order data like `new_order` or `order_status` return a raw json dict from Gemini with the schema below.  It can be converted to a type-checked python object by using `Order(order_json)`.\n```python\norder_json = {\n    "order_id": "44375901",\n    "id": "44375901",\n    "symbol": "btcusd",\n    "exchange": "gemini",\n    "avg_execution_price": "400.00",\n    "side": "buy",\n    "type": "exchange limit",\n    "timestamp": "1494870642",\n    "timestampms": 1494870642156,\n    "is_live": False,\n    "is_cancelled": False,\n    "is_hidden": False,\n    "was_forced": False,\n    "executed_amount": "3",\n    "remaining_amount": "0",\n    "options": [],\n    "price": "400.00",\n    "original_amount": "3",\n}\nbuy_order = Order(order_json)\norder_id = buy_order.id       # values can be accessed as properties\n```\n\n### REST API Functions\nThe Gemini REST API functions documentation can be found here:  \nhttps://docs.gemini.com/rest-api/#requests\n\n**`api.ticker(symbol: str) -> dict`:**  \nGet the ticker price info for a given symbol, e.g.:\n```python\nticker_info = api.ticker(\'ethusd\')\n# {\'bid\': \'914.00\', \'ask\': \'914.44\', \'volume\': {\'ETH\': \'94530.56656129\', \'USD\': \'83955829.9730076926\', \'timestamp\': 1515014100000}, \'last\': \'915.39\'}\nlast_price = USD(ticker_info[\'last\'])\n```\n\n**`api.new_order(side: str, symbol: str, amt: Currency, price: Currency) -> dict`:**  \nSubmit a new order to Gemini, e.g:\n```python\nbuy_order = Order(api.new_order(\'buy\', \'ethusd\', ETH(0.01), USD(965)))\nsell_order = Order(api.new_order(\'sell\', \'ethusd\', ETH(0.01), USD(965)))\n```\n\n**`api.order_status(order_id: str) -> dict`:**  \nGet the updated order info json from Gemini for a given order_id, e.g.:\n```python\nbuy_order = Order(api.order_status(\'44375901\'))\nprint(buy_order.filled_amt)\n```\n\n### WebSocket API Functions\nThe Gemini WebSocket API functions documentation can be found here:  \nhttps://docs.gemini.com/websocket-api/#websocket-request\n\n**`api.order_events(order_id: str) -> Generator[dict]`:**  \nGet a live-updating stream of order events via WebSocket e.g.:\n```python\nfor event in api.order_events(\'44375901\'):\n    print(event)\n```\n\n## Example Bot\n\n<img src="https://i.imgur.com/Hi3EYym.png" width="500px"/>\n\n`example.py` is a simple example bot that randomly creates some initial buys, then sells the moment it makes a certain threshold percentage of profit.\n\nIt might profit if the market is trending upwards, but generally this strategy [doesn\'t work](https://gist.github.com/pirate/eac582480aa34b5adda9e6adc1878190) if you want to make any real money.  This code serves as a boilerplate example upon which to build other, more advanced bots.\n\nThis type of tight, risk-averse bot will only make small profits because it never waits for big upward trends to max out, it sells as soon as it goes in the green.  The days where it starts in the red and stays there also end up sucking much of the profit away.\n\n## Roadmap\n\n* Write a meta-trader that spawns multiple traders with tweaked parameters to see which ones make the most money\n* Add GDAX/Coinbase Exchange API bindings\n* Add Bitfinex Exchange API bindings\n\n## Developer Info\n\nThis library is built on Python 3.6 and uses MyPy for type checking.\n\n**Check MyPy types:**\n```bash\nenv MYPYPATH=./stubs mypy example.py\n```\n\n## Disclaimer\n\nI\'m not responsible for any money you lose from this code.  The code is MIT Licensed.\n'