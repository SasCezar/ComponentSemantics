b'[![Gobot](https://raw.githubusercontent.com/hybridgroup/gobot-site/master/source/images/elements/gobot-logo-small.png)](http://gobot.io/)\n\n[![GoDoc](https://godoc.org/gobot.io/x/gobot?status.svg)](https://godoc.org/gobot.io/x/gobot)\n[![Build Status](https://travis-ci.org/hybridgroup/gobot.png?branch=dev)](https://travis-ci.org/hybridgroup/gobot)\n[![Build status](https://ci.appveyor.com/api/projects/status/ix29evnbdrhkr7ud/branch/dev?svg=true)](https://ci.appveyor.com/project/deadprogram/gobot/branch/dev)\n[![Coverage Status](https://codecov.io/gh/hybridgroup/gobot/branch/dev/graph/badge.svg)](https://codecov.io/gh/hybridgroup/gobot)\n[![Go Report Card](https://goreportcard.com/badge/hybridgroup/gobot)](https://goreportcard.com/report/hybridgroup/gobot)\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://github.com/hybridgroup/gobot/blob/master/LICENSE.txt)\n\nGobot (https://gobot.io/) is a framework using the Go programming language (https://golang.org/) for robotics, physical computing, and the Internet of Things.\n\nIt provides a simple, yet powerful way to create solutions that incorporate multiple, different hardware devices at the same time.\n\nWant to run Go directly on microcontrollers? Check out our sister project TinyGo (https://tinygo.org/)\n\n## Getting Started\n\nGet the Gobot source with: `go get -d -u gobot.io/x/gobot/...`\n\n## Examples\n\n#### Gobot with Arduino\n\n```go\npackage main\n\nimport (\n\t"time"\n\n\t"gobot.io/x/gobot"\n\t"gobot.io/x/gobot/drivers/gpio"\n\t"gobot.io/x/gobot/platforms/firmata"\n)\n\nfunc main() {\n\tfirmataAdaptor := firmata.NewAdaptor("/dev/ttyACM0")\n\tled := gpio.NewLedDriver(firmataAdaptor, "13")\n\n\twork := func() {\n\t\tgobot.Every(1*time.Second, func() {\n\t\t\tled.Toggle()\n\t\t})\n\t}\n\n\trobot := gobot.NewRobot("bot",\n\t\t[]gobot.Connection{firmataAdaptor},\n\t\t[]gobot.Device{led},\n\t\twork,\n\t)\n\n\trobot.Start()\n}\n```\n\n#### Gobot with Sphero\n\n```go\npackage main\n\nimport (\n\t"fmt"\n\t"time"\n\n\t"gobot.io/x/gobot"\n\t"gobot.io/x/gobot/platforms/sphero"\n)\n\nfunc main() {\n\tadaptor := sphero.NewAdaptor("/dev/rfcomm0")\n\tdriver := sphero.NewSpheroDriver(adaptor)\n\n\twork := func() {\n\t\tgobot.Every(3*time.Second, func() {\n\t\t\tdriver.Roll(30, uint16(gobot.Rand(360)))\n\t\t})\n\t}\n\n\trobot := gobot.NewRobot("sphero",\n\t\t[]gobot.Connection{adaptor},\n\t\t[]gobot.Device{driver},\n\t\twork,\n\t)\n\n\trobot.Start()\n}\n```\n\n#### "Metal" Gobot\n\nYou can use the entire Gobot framework as shown in the examples above ("Classic" Gobot), or you can pick and choose from the various Gobot packages to control hardware with nothing but pure idiomatic Golang code ("Metal" Gobot). For example:\n\n```go\npackage main\n\nimport (\n\t"gobot.io/x/gobot/drivers/gpio"\n\t"gobot.io/x/gobot/platforms/intel-iot/edison"\n\t"time"\n)\n\nfunc main() {\n\te := edison.NewAdaptor()\n\te.Connect()\n\n\tled := gpio.NewLedDriver(e, "13")\n\tled.Start()\n\n\tfor {\n\t\tled.Toggle()\n\t\ttime.Sleep(1000 * time.Millisecond)\n\t}\n}\n```\n\n#### "Master" Gobot\n\nYou can also use the full capabilities of the framework aka "Master Gobot" to control swarms of robots or other features such as the built-in API server. For example:\n\n```go\npackage main\n\nimport (\n\t"fmt"\n\t"time"\n\n\t"gobot.io/x/gobot"\n\t"gobot.io/x/gobot/api"\n\t"gobot.io/x/gobot/platforms/sphero"\n)\n\nfunc NewSwarmBot(port string) *gobot.Robot {\n\tspheroAdaptor := sphero.NewAdaptor(port)\n\tspheroDriver := sphero.NewSpheroDriver(spheroAdaptor)\n\tspheroDriver.SetName("Sphero" + port)\n\n\twork := func() {\n\t\tspheroDriver.Stop()\n\n\t\tspheroDriver.On(sphero.Collision, func(data interface{}) {\n\t\t\tfmt.Println("Collision Detected!")\n\t\t})\n\n\t\tgobot.Every(1*time.Second, func() {\n\t\t\tspheroDriver.Roll(100, uint16(gobot.Rand(360)))\n\t\t})\n\t\tgobot.Every(3*time.Second, func() {\n\t\t\tspheroDriver.SetRGB(uint8(gobot.Rand(255)),\n\t\t\t\tuint8(gobot.Rand(255)),\n\t\t\t\tuint8(gobot.Rand(255)),\n\t\t\t)\n\t\t})\n\t}\n\n\trobot := gobot.NewRobot("sphero",\n\t\t[]gobot.Connection{spheroAdaptor},\n\t\t[]gobot.Device{spheroDriver},\n\t\twork,\n\t)\n\n\treturn robot\n}\n\nfunc main() {\n\tmaster := gobot.NewMaster()\n\tapi.NewAPI(master).Start()\n\n\tspheros := []string{\n\t\t"/dev/rfcomm0",\n\t\t"/dev/rfcomm1",\n\t\t"/dev/rfcomm2",\n\t\t"/dev/rfcomm3",\n\t}\n\n\tfor _, port := range spheros {\n\t\tmaster.AddRobot(NewSwarmBot(port))\n\t}\n\n\tmaster.Start()\n}\n```\n\n## Hardware Support\nGobot has a extensible system for connecting to hardware devices. The following robotics and physical computing platforms are currently supported:\n\n- [Arduino](http://www.arduino.cc/) <=> [Package](https://github.com/hybridgroup/gobot/tree/master/platforms/firmata)\n- Audio <=> [Package](https://github.com/hybridgroup/gobot/tree/master/platforms/audio)\n- [Beaglebone Black](http://beagleboard.org/boards) <=> [Package](https://github.com/hybridgroup/gobot/tree/master/platforms/beaglebone)\n- [Beaglebone PocketBeagle](http://beagleboard.org/pocket/) <=> [Package](https://github.com/hybridgroup/gobot/tree/master/platforms/beaglebone)\n- [Bluetooth LE](https://www.bluetooth.com/what-is-bluetooth-technology/bluetooth-technology-basics/low-energy) <=> [Package](https://github.com/hybridgroup/gobot/tree/master/platforms/ble)\n- [C.H.I.P](http://www.nextthing.co/pages/chip) <=> [Package](https://github.com/hybridgroup/gobot/tree/master/platforms/chip)\n- [C.H.I.P Pro](https://docs.getchip.com/chip_pro.html) <=> [Package](https://github.com/hybridgroup/gobot/tree/master/platforms/chip)\n- [Digispark](http://digistump.com/products/1) <=> [Package](https://github.com/hybridgroup/gobot/tree/master/platforms/digispark)\n- [DJI Tello](https://www.ryzerobotics.com/tello) <=> [Package](https://github.com/hybridgroup/gobot/tree/master/platforms/dji/tello)\n- [DragonBoard](https://developer.qualcomm.com/hardware/dragonboard-410c) <=> [Package](https://github.com/hybridgroup/gobot/tree/master/platforms/dragonboard)\n- [ESP8266](http://esp8266.net/) <=> [Package](https://github.com/hybridgroup/gobot/tree/master/platforms/firmata)\n- [GoPiGo 3](https://www.dexterindustries.com/gopigo3/) <=> [Package](https://github.com/hybridgroup/gobot/tree/master/platforms/dexter/gopigo3)\n- [Intel Curie](https://www.intel.com/content/www/us/en/products/boards-kits/curie.html) <=> [Package](https://github.com/hybridgroup/gobot/tree/master/platforms/intel-iot/curie)\n- [Intel Edison](http://www.intel.com/content/www/us/en/do-it-yourself/edison.html) <=> [Package](https://github.com/hybridgroup/gobot/tree/master/platforms/intel-iot/edison)\n- [Intel Joule](http://intel.com/joule/getstarted) <=> [Package](https://github.com/hybridgroup/gobot/tree/master/platforms/intel-iot/joule)\n- [Joystick](http://en.wikipedia.org/wiki/Joystick) <=> [Package](https://github.com/hybridgroup/gobot/tree/master/platforms/joystick)\n- [Keyboard](https://en.wikipedia.org/wiki/Computer_keyboard) <=> [Package](https://github.com/hybridgroup/gobot/tree/master/platforms/keyboard)\n- [Leap Motion](https://www.leapmotion.com/) <=> [Package](https://github.com/hybridgroup/gobot/tree/master/platforms/leap)\n- [MavLink](http://qgroundcontrol.org/mavlink/start) <=> [Package](https://github.com/hybridgroup/gobot/tree/master/platforms/mavlink)\n- [MegaPi](http://www.makeblock.com/megapi) <=> [Package](https://github.com/hybridgroup/gobot/tree/master/platforms/megapi)\n- [Microbit](http://microbit.org/) <=> [Package](https://github.com/hybridgroup/gobot/tree/master/platforms/microbit)\n- [MQTT](http://mqtt.org/) <=> [Package](https://github.com/hybridgroup/gobot/tree/master/platforms/mqtt)\n- [NATS](http://nats.io/) <=> [Package](https://github.com/hybridgroup/gobot/tree/master/platforms/nats)\n- [Neurosky](http://neurosky.com/products-markets/eeg-biosensors/hardware/) <=> [Package](https://github.com/hybridgroup/gobot/tree/master/platforms/neurosky)\n- [OpenCV](http://opencv.org/) <=> [Package](https://github.com/hybridgroup/gobot/tree/master/platforms/opencv)\n- [Particle](https://www.particle.io/) <=> [Package](https://github.com/hybridgroup/gobot/tree/master/platforms/particle)\n- [Parrot ARDrone 2.0](http://ardrone2.parrot.com/) <=> [Package](https://github.com/hybridgroup/gobot/tree/master/platforms/parrot/ardrone)\n- [Parrot Bebop](http://www.parrot.com/usa/products/bebop-drone/) <=> [Package](https://github.com/hybridgroup/gobot/tree/master/platforms/parrot/bebop)\n- [Parrot Minidrone](https://www.parrot.com/us/minidrones) <=> [Package](https://github.com/hybridgroup/gobot/tree/master/platforms/parrot/minidrone)\n- [Pebble](https://www.getpebble.com/) <=> [Package](https://github.com/hybridgroup/gobot/tree/master/platforms/pebble)\n- [Raspberry Pi](http://www.raspberrypi.org/) <=> [Package](https://github.com/hybridgroup/gobot/tree/master/platforms/raspi)\n- [Sphero](http://www.sphero.com/) <=> [Package](https://github.com/hybridgroup/gobot/tree/master/platforms/sphero)\n- [Sphero BB-8](http://www.sphero.com/bb8) <=> [Package](https://github.com/hybridgroup/gobot/tree/master/platforms/sphero/bb8)\n- [Sphero Ollie](http://www.sphero.com/ollie) <=> [Package](https://github.com/hybridgroup/gobot/tree/master/platforms/sphero/ollie)\n- [Sphero SPRK+](http://www.sphero.com/sprk-plus) <=> [Package](https://github.com/hybridgroup/gobot/tree/master/platforms/sphero/sprkplus)\n- [Tinker Board](https://www.asus.com/us/Single-Board-Computer/Tinker-Board/) <=> [Package](https://github.com/hybridgroup/gobot/tree/master/platforms/tinkerboard)\n- [UP2](http://www.up-board.org/upsquared/) <=> [Package](https://github.com/hybridgroup/gobot/tree/master/platforms/upboard/up2)\n\nSupport for many devices that use General Purpose Input/Output (GPIO) have\na shared set of drivers provided using the `gobot/drivers/gpio` package:\n\n- [GPIO](https://en.wikipedia.org/wiki/General_Purpose_Input/Output) <=> [Drivers](https://github.com/hybridgroup/gobot/tree/master/drivers/gpio)\n\t- AIP1640 LED\n\t- Button\n\t- Buzzer\n\t- Direct Pin\n\t- EasyDriver\n\t- Grove Button\n\t- Grove Buzzer\n\t- Grove LED\n\t- Grove Magnetic Switch\n\t- Grove Relay\n\t- Grove Touch Sensor\n\t- LED\n\t- Makey Button\n\t- Motor\n\t- Proximity Infra Red (PIR) Motion Sensor\n\t- Relay\n\t- RGB LED\n\t- Servo\n\t- Stepper Motor\n\t- TM1638 LED Controller\n\nSupport for many devices that use Analog Input/Output (AIO) have\na shared set of drivers provided using the `gobot/drivers/aio` package:\n\n- [AIO](https://en.wikipedia.org/wiki/Analog-to-digital_converter) <=> [Drivers](https://github.com/hybridgroup/gobot/tree/master/drivers/aio)\n\t- Analog Sensor\n\t- Grove Light Sensor\n\t- Grove Piezo Vibration Sensor\n\t- Grove Rotary Dial\n\t- Grove Sound Sensor\n\t- Grove Temperature Sensor\n\nSupport for devices that use Inter-Integrated Circuit (I2C) have a shared set of\ndrivers provided using the `gobot/drivers/i2c` package:\n\n- [I2C](https://en.wikipedia.org/wiki/I%C2%B2C) <=> [Drivers](https://github.com/hybridgroup/gobot/tree/master/drivers/i2c)\n\t- Adafruit Motor Hat\n\t- ADS1015 Analog to Digital Converter\n\t- ADS1115 Analog to Digital Converter\n\t- ADXL345 Digital Accelerometer\n\t- BH1750 Digital Luminosity/Lux/Light Sensor\n\t- BlinkM LED\n\t- BME280 Barometric Pressure/Temperature/Altitude/Humidity Sensor\n\t- BMP180 Barometric Pressure/Temperature/Altitude Sensor\n\t- BMP280 Barometric Pressure/Temperature/Altitude Sensor\n\t- DRV2605L Haptic Controller\n\t- Grove Digital Accelerometer\n\t- GrovePi Expansion Board\n\t- Grove RGB LCD\n\t- HMC6352 Compass\n\t- INA3221 Voltage Monitor\n\t- JHD1313M1 LCD Display w/RGB Backlight\n\t- L3GD20H 3-Axis Gyroscope\n\t- LIDAR-Lite\n\t- MCP23017 Port Expander\n\t- MMA7660 3-Axis Accelerometer\n\t- MPL115A2 Barometer\n\t- MPU6050 Accelerometer/Gyroscope\n\t- PCA9685 16-channel 12-bit PWM/Servo Driver\n\t- SHT3x-D Temperature/Humidity\n\t- SSD1306 OLED Display Controller\n\t- TSL2561 Digital Luminosity/Lux/Light Sensor\n\t- Wii Nunchuck Controller\n\nSupport for devices that use Serial Peripheral Interface (SPI) have\na shared set of drivers provided using the `gobot/drivers/spi` package:\n\n- [SPI](https://en.wikipedia.org/wiki/Serial_Peripheral_Interface_Bus) <=> [Drivers](https://github.com/hybridgroup/gobot/tree/master/drivers/spi)\n\t- APA102 Programmable LEDs\n\t- MCP3002 Analog/Digital Converter\n\t- MCP3004 Analog/Digital Converter\n\t- MCP3008 Analog/Digital Converter\n\t- MCP3202 Analog/Digital Converter\n\t- MCP3204 Analog/Digital Converter\n\t- MCP3208 Analog/Digital Converter\n\t- MCP3304 Analog/Digital Converter\n\t- SSD1306 OLED Display Controller\n\nMore platforms and drivers are coming soon...\n\n## API:\n\nGobot includes a RESTful API to query the status of any robot running within a group, including the connection and device status, and execute device commands.\n\nTo activate the API, import the `gobot.io/x/gobot/api` package and instantiate the `API` like this:\n\n```go\n  master := gobot.NewMaster()\n  api.NewAPI(master).Start()\n```\n\nYou can also specify the api host and port, and turn on authentication:\n```go\n  master := gobot.NewMaster()\n  server := api.NewAPI(master)\n  server.Port = "4000"\n  server.AddHandler(api.BasicAuth("gort", "klatuu"))\n  server.Start()\n```\n\nYou may access the [robeaux](https://github.com/hybridgroup/robeaux) React.js interface with Gobot by navigating to `http://localhost:3000/index.html`.\n\n## CLI\n\nGobot uses the Gort [http://gort.io](http://gort.io) Command Line Interface (CLI) so you can access important features right from the command line. We call it "RobotOps", aka "DevOps For Robotics". You can scan, connect, update device firmware, and more!\n\nGobot also has its own CLI to generate new platforms, adaptors, and drivers. You can check it out in the `/cli` directory.\n\n## Documentation\nWe\'re always adding documentation to our web site at https://gobot.io/ please check there as we continue to work on Gobot\n\nThank you!\n\n## Need help?\n* Issues: https://github.com/hybridgroup/gobot/issues\n* Twitter: [@gobotio](https://twitter.com/gobotio)\n* Slack: [https://gophers.slack.com/messages/C0N5HDB08](https://gophers.slack.com/messages/C0N5HDB08)\n* Mailing list: https://groups.google.com/forum/#!forum/gobotio\n\n## Contributing\nFor our contribution guidelines, please go to [https://github.com/hybridgroup/gobot/blob/master/CONTRIBUTING.md\n](https://github.com/hybridgroup/gobot/blob/master/CONTRIBUTING.md\n).\n\nGobot is released with a Contributor Code of Conduct. By participating in this project you agree to abide by its terms. [You can read about it here](https://github.com/hybridgroup/gobot/tree/master/CODE_OF_CONDUCT.md).\n\n## License\nCopyright (c) 2013-2019 The Hybrid Group. Licensed under the Apache 2.0 license.\n\nThe Contributor Covenant is released under the Creative Commons Attribution 4.0 International Public License, which requires that attribution be included.\n'