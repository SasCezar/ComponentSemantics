b'[![npm Version](http://img.shields.io/npm/v/pigpio.svg)](https://www.npmjs.com/package/pigpio)\n[![Downloads Per Month](http://img.shields.io/npm/dm/pigpio.svg)](https://www.npmjs.com/package/pigpio)\n[![Mentioned in Awesome Node.js](https://awesome.re/mentioned-badge.svg)](https://github.com/sindresorhus/awesome-nodejs)\n\n# pigpio\n\nA wrapper for the [pigpio C library](https://github.com/joan2937/pigpio) to\nenable fast GPIO, PWM, servo control, state change notification and interrupt\nhandling with **Node.js** on the Raspberry Pi Zero, 1, 2, 3 or 4.\n\n**At the moment both the pigpio Node.js module and the pigpio C library are\nexperimental on the Raspberry Pi 4 Model B.**\n\npigpio supports Node.js versions 6, 8, 10, 12 and 13.\n\n## Contents\n\n * [News & Updates](#news--updates)\n * [Features](#features)\n * [Installation](#installation)\n * [Usage](#usage)\n   * [Pulse an LED with PWM](#pulse-an-led-with-pwm)\n   * [Buttons and Interrupt Handling](#buttons-and-interrupt-handling)\n   * [Servo Control](#servo-control)\n   * [Measure Distance with a HC-SR04 Ultrasonic Sensor](#measure-distance-with-a-hc-sr04-ultrasonic-sensor)\n   * [Determine the Width of a Pulse with Alerts](#determine-the-width-of-a-pulse-with-alerts)\n   * [Debounce a Button](#debounce-a-button)\n * [API Documentation](#api-documentation)\n * [Limitations](#limitations)\n * [Troubleshooting](#troubleshooting)\n * [Related Packages](#related-packages)\n\n## News & Updates\n\n### September 2019: pigpio v2.0.0\n\npigpio v2.0.0 adds experimental support for the Raspberry Pi 4 Model B. Adding\nthis support has resulted in a number of changes related to hardware PWM.\nThese changes are specific to the Raspberry Pi 4 Model B. There have been no\nchanges for the Raspberry Pi Zero, 1, 2 or 3. For further details see\n[hardwarePwmWrite](https://github.com/fivdi/pigpio/blob/master/doc/gpio.md#hardwarepwmwritefrequency-dutycycle) and\n[getPwmRealRange](https://github.com/fivdi/pigpio/blob/master/doc/gpio.md#getpwmrealrange).\n\n## Features\n\n * Digital IO\n   * Up to 3.5 million digital reads per second <sup>*)</sup>\n   * Up to 2.5 million digital writes per second <sup>*)</sup>\n * PWM on any of GPIOs 0 through 31\n   * Multiple frequencies and duty cycle ranges supported\n * Servo control on any of GPIOs 0 through 31\n   * Jitter free\n * Alerts when any of GPIOs 0 through 31 change state\n   * The time of the state change is available accurate to a few microseconds\n * Notification streams for monitoring state changes on any of GPIOs 0 through 31 concurrently\n   * The time of the state changes are available accurate to a few microseconds\n * Low latency interrupt handlers\n   * Handle up to 20000 interrupts per second <sup>*)</sup>\n * Read or write up to 32 GPIOs as one operation with banked GPIO\n * Trigger pulse generation\n * Pull up/down resistor configuration\n\n*) On a Raspberry Pi 4 Model B running Raspbian Buster 2019-07-10 with pigpio\nv2.0.0, Node.js v12.10.0 and V70 of the pigpio C library.\n\n## Installation\n\n#### Step 1 - Install the pigpio C library\n\nThe [pigpio C library](https://github.com/joan2937/pigpio) is a prerequisite\nfor the pigpio Node.js module.\n\nRun the following command to determine which version of the pigpio C library\nis installed:\n\n```\npigpiod -v\n```\n\nFor the Raspberry Pi Zero, 1, 2 and 3 V41 or higher of the pigpio C library is\nrequired. For the Raspberry Pi 4 V69 or higher is required.\n\nIf the pigpio C library is not installed or if the installed version is too\nold, the latest version can be installed with the following commands:\n\n```\nsudo apt-get update\nsudo apt-get install pigpio\n```\n\nAlternative installation instructions for the pigpio C library can be found\n[here](http://abyz.me.uk/rpi/pigpio/download.html).\n\n**Warning:** The pigpio C library contains a number of utilities. One of these\nutilities is pigpiod which launches the pigpio C library as a daemon. This\nutility should not be used as the pigpio Node.js package uses the C library\ndirectly.\n\n#### Step 2 - Install the pigpio Node.js package\n\n```\nnpm install pigpio\n```\n\n## Usage\n\nAssume there\'s an LED connected to GPIO17 (pin 11) and a momentary push button\nconnected to GPIO4 (pin 7).\n\n<img src="https://raw.githubusercontent.com/fivdi/pigpio/master/example/led-button.png">\n\n#### Pulse an LED with PWM\n\nUse PWM to pulse the LED connected to GPIO17 from fully off to fully on\ncontinuously.\n\n```js\nconst Gpio = require(\'pigpio\').Gpio;\n\nconst led = new Gpio(17, {mode: Gpio.OUTPUT});\n\nlet dutyCycle = 0;\n\nsetInterval(() => {\n  led.pwmWrite(dutyCycle);\n\n  dutyCycle += 5;\n  if (dutyCycle > 255) {\n    dutyCycle = 0;\n  }\n}, 20);\n```\n\n#### Buttons and Interrupt Handling\n\nTurn the LED connected to GPIO17 on when the momentary push button connected to\nGPIO4 is pressed. Turn the LED off when the button is released.\n\n```js\nconst Gpio = require(\'pigpio\').Gpio;\n\nconst led = new Gpio(17, {mode: Gpio.OUTPUT});\nconst button = new Gpio(4, {\n  mode: Gpio.INPUT,\n  pullUpDown: Gpio.PUD_DOWN,\n  edge: Gpio.EITHER_EDGE\n});\n\nbutton.on(\'interrupt\', (level) => {\n  led.digitalWrite(level);\n});\n```\n\n#### Servo Control\n\nContinuously move a servo connected to GPIO10 clockwise and anti-clockwise.\n\n<img src="https://raw.githubusercontent.com/fivdi/pigpio/master/example/servo.png">\n\n```js\nconst Gpio = require(\'pigpio\').Gpio;\n\nconst motor = new Gpio(10, {mode: Gpio.OUTPUT});\n\nlet pulseWidth = 1000;\nlet increment = 100;\n\nsetInterval(() => {\n  motor.servoWrite(pulseWidth);\n\n  pulseWidth += increment;\n  if (pulseWidth >= 2000) {\n    increment = -100;\n  } else if (pulseWidth <= 1000) {\n    increment = 100;\n  }\n}, 1000);\n```\n\n#### Measure Distance with a HC-SR04 Ultrasonic Sensor\n\nThe `trigger` function can be used to generate a pulse on a GPIO and alerts can\nbe used to determine the time of a GPIO state change accurate to a few\nmicroseconds. These two features can be combined to measure distance using a\nHC-SR04 ultrasonic sensor.\n\n<img src="https://raw.githubusercontent.com/fivdi/pigpio/master/example/distance-hc-sr04.png">\n\n```js\nconst Gpio = require(\'pigpio\').Gpio;\n\n// The number of microseconds it takes sound to travel 1cm at 20 degrees celcius\nconst MICROSECDONDS_PER_CM = 1e6/34321;\n\nconst trigger = new Gpio(23, {mode: Gpio.OUTPUT});\nconst echo = new Gpio(24, {mode: Gpio.INPUT, alert: true});\n\ntrigger.digitalWrite(0); // Make sure trigger is low\n\nconst watchHCSR04 = () => {\n  let startTick;\n\n  echo.on(\'alert\', (level, tick) => {\n    if (level == 1) {\n      startTick = tick;\n    } else {\n      const endTick = tick;\n      const diff = (endTick >> 0) - (startTick >> 0); // Unsigned 32 bit arithmetic\n      console.log(diff / 2 / MICROSECDONDS_PER_CM);\n    }\n  });\n};\n\nwatchHCSR04();\n\n// Trigger a distance measurement once per second\nsetInterval(() => {\n  trigger.trigger(10, 1); // Set trigger high for 10 microseconds\n}, 1000);\n```\n\n#### Determine the Width of a Pulse with Alerts\n\nAlerts can be used to determine the time of a GPIO state change accurate to a\nfew microseconds. Typically, alerts will be used for GPIO inputs but they can\nalso be used for outputs. In this example, the `trigger` method is used to\npulse the LED connected to GPIO17 on for 15 microseconds once per second.\nAlerts are used to measure the length of the pulse.\n\n```js\n// Assumption: the LED is off when the program is started\n\nconst Gpio = require(\'pigpio\').Gpio;\n\nconst led = new Gpio(17, {\n  mode: Gpio.OUTPUT,\n  alert: true\n});\n\nconst watchLed = () => {\n  let startTick;\n\n  // Use alerts to determine how long the LED was turned on\n  led.on(\'alert\', (level, tick) => {\n    if (level == 1) {\n      startTick = tick;\n    } else {\n      const endTick = tick;\n      const diff = (endTick >> 0) - (startTick >> 0); // Unsigned 32 bit arithmetic\n      console.log(diff);\n    }\n  });\n};\n\nwatchLed();\n\n// Turn the LED on for 15 microseconds once per second\nsetInterval(() => {\n  led.trigger(15, 1);\n}, 1000);\n```\n\nHere\'s an example of the typical output to the console:\n\n```\n15\n15\n15\n15\n15\n15\n20\n15\n15\n15\n15\n```\n\n#### Debounce a Button\nThe GPIO glitch filter will prevent alert events from being emitted if the\ncorresponding level change is not stable for at least a specified number of\nmicroseconds. This can be used to filter out unwanted noise from an input\nsignal. In this example, a glitch filter is applied to filter out the contact\nbounce of a push button.\n\n![Button debounce circuit](example/button-debounce.png)\n\n```js\nconst Gpio = require(\'pigpio\').Gpio;\n\nconst button = new Gpio(23, {\n  mode: Gpio.INPUT,\n  pullUpDown: Gpio.PUD_UP,\n  alert: true\n});\n\nlet count = 0;\n\n// Level must be stable for 10 ms before an alert event is emitted.\nbutton.glitchFilter(10000);\n\nbutton.on(\'alert\', (level, tick) => {\n  if (level === 0) {\n    console.log(++count);\n  }\n});\n```\n\n## API Documentation\n\n### Classes\n\n- [Gpio](https://github.com/fivdi/pigpio/blob/master/doc/gpio.md) - General Purpose Input Output\n- [GpioBank](https://github.com/fivdi/pigpio/blob/master/doc/gpiobank.md) - Banked General Purpose Input Output\n- [Notifier](https://github.com/fivdi/pigpio/blob/master/doc/notifier.md) - Notification Stream\n\n### pigpio Module\n\n- [Global](https://github.com/fivdi/pigpio/blob/master/doc/global.md) - Module Globals\n\n### Configuring pigpio\n\n- [Configuration](https://github.com/fivdi/pigpio/blob/master/doc/configuration.md) - pigpio configuration\n\n## Limitations\n\n * The pigpio Node.js package is a wrapper for the\n   [pigpio C library](https://github.com/joan2937/pigpio). A limitation of the\n   pigpio C library is that it can only be used by a single running process.\n * The pigpio C library and therefore the pigpio Node.js package requires\n   root/sudo privileges to access hardware peripherals.\n   \n## Troubleshooting\nIf you have a problem with the library, before you remove it from your code and start trying something else, please check the [troubleshooting page](https://github.com/fivdi/pigpio/blob/master/doc/troubleshooting.md) first. Some problems are solvable and documented.\n\n## Related Packages\n\nHere are a few links to other hardware specific Node.js packages that may be of interest.\n\n- [onoff](https://github.com/fivdi/onoff) - GPIO access and interrupt detection\n- [i2c-bus](https://github.com/fivdi/i2c-bus) - I2C serial bus access\n- [spi-device](https://github.com/fivdi/spi-device) - SPI serial bus access\n- [mcp-spi-adc](https://github.com/fivdi/mcp-spi-adc) - Analog to digital conversion with the MCP3002/4/8, MCP3202/4/8 and MCP3304\n- [pigpio-dht](https://github.com/depuits/pigpio-dht) - Implements logic to read DHT11 or DHT22/AM2302 temperature and relative humidity sensor\n- [pigpio-mock](https://github.com/deepsyx/pigpio-mock) - A pigpio mock library for development on your local machine\n\n'