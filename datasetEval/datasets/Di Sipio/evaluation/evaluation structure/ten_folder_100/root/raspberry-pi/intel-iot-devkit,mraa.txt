b'<p align="center">\n  <img src="http://iotdk.intel.com/misc/logos/mraa.png" height="150px" width="auto" algt="Mraa Logo"/>\n</p>\n\nlibmraa - Low Level Skeleton Library for Communication on GNU/Linux platforms\n=============================================================================\n\nLibmraa is a C/C++ library with bindings to Java, Python and JavaScript to\ninterface with the IO on Galileo, Edison & other platforms, with a structured\nand sane API where port names/numbering matches the board that you are on. Use\nof libmraa does not tie you to specific hardware with board detection done at\nruntime you can create portable code that will work across the supported\nplatforms.\n\nThe intent is to make it easier for developers and sensor manufacturers to map\ntheir sensors & actuators on top of supported hardware and to allow control of\nlow level communication protocol by high level languages & constructs.\n\nThe MRAA project is joining the Eclipse Foundation as an Eclipse IoT project.\nYou can read more about this [here](https://projects.eclipse.org/proposals/eclipse-mraa).\n\n[![Build Status](https://travis-ci.org/intel-iot-devkit/mraa.svg?branch=master)](https://travis-ci.org/intel-iot-devkit/mraa) [![Quality Gate](https://sonarcloud.io/api/project_badges/measure?project=mraa-master&metric=alert_status)](https://sonarcloud.io/dashboard?id=mraa-master)\n\nSupported Boards\n================\n\nX86\n---\n* [Galileo Gen 1 - Rev D](../master/docs/galileorevd.md)\n* [Galileo Gen 2 - Rev H](../master/docs/galileorevh.md)\n* [Edison](../master/docs/edison.md)\n* [Intel DE3815](../master/docs/intel_de3815.md)\n* [Minnowboard](../master/docs/minnow_max.md)\n* [NUC 5th generation](../master/docs/intel_nuc5.md)\n* [UP](../master/docs/up.md)\n* [UP Squared](../master/docs/up2.md)\n* [Intel Joule](../master/docs/joule.md)\n* [IEI Tank](../master/docs/iei-tank.md)\n\nARM\n---\n* [Raspberry Pi](../master/docs/raspberry_pi.md)\n* [Banana Pi](../master/docs/banana_pi.md)\n* [Beaglebone Black](../master/docs/beaglebone.md)\n* [phyBOARD-Wega](../master/docs/phyboard-wega.md)\n* [96Boards](../master/docs/96boards.md)\n\nMIPS\n---\n* [Linkit Smart 7688](../master/docs/linkit_7688.md)\n* [Onion Omega2](../master/docs/omega2.md)\n\nFPGA\n----\n* [DE10-Nano](../master/docs/de_nano_soc.md)\n\nUSB\n---\n* [FT4222](../master/docs/ftdi_ft4222.md)\n* [Firmata](../master/docs/firmata.md)\n\nI2C\n---\n* [GrovePi](../master/docs/grovepi.md)\n\nMock\n----\n* [Generic simulated board](../master/docs/mock.md)\n\nJSON platform\n----\n* [Platform loading](../master/docs/jsonplatform.md)\n\nInstalling on your board\n========================\n\nInstalling on Ubuntu\n--------------------\n\nHere is a PPA for installing on Ubuntu Xenial or Bionic:\nhttps://launchpad.net/~mraa/+archive/ubuntu/mraa\n\n```bash\nsudo add-apt-repository ppa:mraa/mraa\nsudo apt-get update\nsudo apt-get install libmraa2 libmraa-dev libmraa-java python-mraa python3-mraa node-mraa mraa-tools\n```\n\nRunning MRAA tools or applications on Ubuntu systems requires elevated permissions\n(e.g. run with `sudo`).\n\nInstall on Arch Linux\n---------------------\n\nThere is an AUR package for mraa here: https://aur.archlinux.org/packages/mraa\n\nInstall on openSUSE\n-------------------\n\n```bash\nREPO="openSUSE_Tumbleweed"\nif test "$(arch)" == "aarch64"; then\n  REPO="openSUSE_Factory_ARM"\nfi\nsudo zypper ar http://download.opensuse.org/repositories/hardware/$REPO/hardware.repo\nsudo zypper in mraa\n```\n\nInstall on Fedora Linux\n-----------------------\n\nThere is an mraa package in the main Fedora repository so it can be dnf installed\nin all recent Fedora releases. The Node.js and Python 3 bindings are packaged as\nseparate packages.\n\n```bash\nsudo dnf install mraa nodejs-mraa python3-mraa\n```\n\nInstalling for Node.js only\n---------------------------\n\n> Note: Node.js 7.0.0+ is not currently supported unless compiling with a patched\nvesion of SWIG. See the corresponding section and document below.\n\nYou can also install just the node.js mraa module by using npm. You will need a\nC++ compiler and the node development headers, however it\'s not required to\nhave SWIG installed. This works for node versions 6.x.x and prior.\n\n```bash\nnpm install mraa\n```\n\nNote that installing mraa in this way builds mraa without json-c so you cannot\nuse mraa_init_json_platform(). Also building this way means the mraa.node\nincludes a static version of libmraa rather than relying on a dynamic library\nin /usr/lib.\n\nSubplatforms (i.e. Firmata) have to be added manually with this kind of install\nfrom your application, as shown in [this example](examples/javascript/firmata.js).\n\nCompiling\n=========\n\nSee documentation on [building](../master/docs/building.md)\n\nExamples\n========\n\nSee the [examples](../../tree/master/examples) available for various languages\n\nDebugging\n=========\n\nSometimes it just doesn\'t want to work, let us try and help you, you can file\nissues in github or join us in #mraa on freenode IRC, hang around for a little\nwhile because we\'re not necessarily on 24/7, but we\'ll get back to you! Have a\nglance at our [debugging](../master/docs/debugging.md) page too.\n\nAPI Documentation\n=================\n\n<a href="http://c.mraa.io"><img src="http://iotdk.intel.com/misc/logos/c++.png"/></a>\n<a href="http://java.mraa.io"><img src="http://iotdk.intel.com/misc/logos/java.png"/></a>\n<a href="http://py.mraa.io"><img src="http://iotdk.intel.com/misc/logos/python.png"/></a>\n<a href="http://js.mraa.io"><img src="http://iotdk.intel.com/misc/logos/node.png"/></a>\n\nContact Us\n==========\n\nTo ask questions either file issues in github or send emails on our [mailing\nlist](https://lists.01.org/mailman/listinfo/mraa). You might also catch us on\nthe mraa channel on freenode IRC.\n\nSee the [Contribution](CONTRIBUTING.md) documentation for more details.\n\nChangelog\n=========\n\nVersion changelog [here](docs/changelog.md).\n'