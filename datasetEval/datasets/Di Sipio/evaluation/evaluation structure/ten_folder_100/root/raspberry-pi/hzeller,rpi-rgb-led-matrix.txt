b'Controlling RGB LED display with Raspberry Pi GPIO\n==================================================\n\nA library to control commonly available 64x64, 32x32 or 16x32 RGB LED panels\nwith the Raspberry Pi. Can support PWM up to 11Bit per channel, providing\ntrue 24bpp color with CIE1931 profile.\n\nSupports 3 chains with many panels each.\nOn a Raspberry Pi 2 or 3, you can easily chain 12 panels in that chain\n(so 36 panels total), but you can theoretically stretch that to up\nto 96-ish panels (32 chain length) and still reach\naround 100Hz refresh rate with full 24Bit color (theoretical - never tested\nthis; there might likely be timing problems with the panels that will creep\nup then).\n\nWith fewer colors or so-called \'outdoor panels\' you can control even more,\nfaster.\n\nThe LED-matrix library is (c) Henner Zeller <h.zeller@acm.org>, licensed with\n[GNU General Public License Version 2.0](http://www.gnu.org/licenses/gpl-2.0.txt)\n(which means, if you use it in a product somewhere, you need to make the\nsource and all your modifications available to the receiver of such product so\nthat they have the freedom to adapt and improve).\n\nOverview\n--------\nThe RGB LED matrix panels can be scored at [Sparkfun][sparkfun],\n[AdaFruit][ada] or eBay and Aliexpress. If you are in China, I\'d try to get\nthem directly from some manufacturer, Taobao or Alibaba.\n\nThe `RGBMatrix` class provided in `include/led-matrix.h` does what is needed\nto control these. You can use this as a library in your own projects or just\nuse the demo binary provided here which provides some useful examples.\n\nCheck out [utils/ directory for some ready-made tools](./utils) to get started\nusing the library, or the [examples-api-use/](./examples-api-use) directory if\nyou want to get started programming your own utils.\n\nAll Raspberry Pi versions supported\n-----------------------------------\n\nThis supports the old Raspberry Pi\'s Version 1 with 26 pin header and also the\nB+ models, the Pi Zero, as well as the Raspberry Pi 2 and 3 with 40 pins.\nThe 26 pin models can drive one chain of RGB panels, the 40 pin models\n**up to three** chains in parallel (each chain 12 or more panels long).\n\nThe Raspberry Pi 2 and 3 are faster and generally perferred to the older\nmodels (and the Pi Zero). With the faster models, the panels sometimes\ncan\'t keep up with the speed; check out\nthis [troubleshooting section](#troubleshooting) what to do.\n\nA lightweight, non-GUI, distribution such as [Raspbian Lite][raspbian-lite]\nor [DietPi] is recommended.\n\nTypes of Displays\n-----------------\nThere are various types of displays that come all with the same Hub75 connector.\nThey vary in the way the multiplexing is happening.\n\nType w*h | Scan Multiplexing | Program commandline flags    | Remark\n-----:|:-----------------:|:-----------------------------|-------\n64x64 |  1:32             | --led-rows=64 --led-cols=64  | For displays with A,B,C,D,E line.\n64x64 |  1:32             | --led-rows=64 --led-cols=64 --led-row-addr-type=1 | For displays with A,B lines.\n64x32 |  1:16             | --led-rows=32 --led-cols=64  |\n64x32 |  1:8              | --led-rows=32 --led-cols=64 --led-multiplexing=1 | few mux choices\n32x32 |  1:16             | --led-rows=32                |\n32x32 |  1:8              | --led-rows=32 --led-multiplexing=1 | few mux choices\n32x16 |  1:8              | --led-rows=16                |\n32x16 |  1:4              | --led-rows=16 --led-multiplexing=1 | few mux choices\n32x16 |  1:4              | --led-rows=16 --led-row-addr-type=2 --led-multiplexing=4 | For direct A..D address panels.\n...   |\n\nThese can be chained by connecting the output of one panel to the input of\nthe next panel. You can chain quite a few together.\n\nThe 64x64 matrixes typically come in two kinds: with 5 address\nlines (A, B, C, D, E), or (A, B); the latter needs a `--led-row-addr-type=1`\nparameter. So-called \'outdoor panels\' are typically brighter and allow for\nfaster refresh-rate for the same size, but do some multiplexing internally\nof which there are a few types out there; they can be chosen with\nthe `--led-multiplexing` parameter.\n\nThere are some panels that have a different chip-set than the default HUB75.\nThese require some initialization sequence. The current supported one is\n`--led-panel-type=FM6126A`.\n\nGenerally, the higher scan-rate (e.g. 1:8), a.k.a. outdoor panels generally\nallow faster refresh rate, but you might need to figure out the multiplexing\nmapping if one of the three provided does not work.\n\nSome 32x16 outdoor matrixes with 1:4 scan (e.g. [Qiangli Q10(1/4) or X10(1/4)](http://qiangliled.com/products-63.html))\nhave 4 address line (A, B, C, D). For such matrices is necessary to\nuse `--led-row-addr-type=2` parameter. Also the matrix Qiangli Q10(1/4)\nhave "Z"-stripe pixel mapping and in this case, you\'d use two parameters\nat the same time `--led-row-addr-type=2 --led-multiplexing=4`.\n\nLet\'s do it\n------------\nThis documentation is split into parts that help you through the process\n\n  1. <a href="wiring.md"><img src="img/wire-up-icon.png"></a>\n    [**Wire up the matrix to your Pi**](./wiring.md). This document describes\n    what goes where. You might also be interested\n    in [breakout boards](./adapter) for that.\n    If you have an [Adafruit HAT] or [Adafruit Bonnet], you can choose that with\n    a command line option [described below](#if-you-have-an-adafruit-hat-or-bonnet)\n  2. Run a demo. You find that in the\n     [examples-api-use/](./examples-api-use#running-some-demos) directory:\n```\nmake -C examples-api-use\nsudo examples-api-use/demo -D0\n```\n  3. Use the utilities. The [utils](./utils) directory has some ready-made\n    useful utilities to show content. [Go there](./utils) to see how to\n    compile and run these.\n  4. Write your own programs using the Matrix in C++ or Python.\n\n### Utilities\n\nThe [utils directory](./utils) is meant for ready utilities to show images or\nanimated gifs or videos. Read the [README](./utils/README.md) there for\ninstructions how to compile.\n\nThere are external projects that use this library and provide higher level\nnetwork protocols, such as the\n[FlaschenTaschen implementation](https://github.com/hzeller/flaschen-taschen)\n(VLC can send videos to it natively) or the\n[PixelPusher implementation](https://github.com/hzeller/rpi-matrix-pixelpusher)\n(common in light art installations).\n\n### API\n\nThe library comes as an API that you can use for your own utilities and use-cases.\n\n  * The native library is a C++ library (see [include/](./include)).\n    Example uses you find in the [examples-api-use/](./examples-api-use)\n    directory.\n  * If you prefer to program in C, there is also a\n    [C API](./include/led-matrix-c.h).\n  * In the [python](./bindings/python) subdirectory, you find a Python API including a\n    couple of [examples](./bindings/python/samples) to get started.\n  * There are a couple of external bindings, such as\n      * [Nodejs binding] by Maxime Journaux\n      * [Nodejs/Typescript binding] by Alex Eden\n      * [Go binding] by M\xc3\xa1ximo Cuadros\n      * [Rust binding] by Vincent Pasquier\n\n### Changing parameters via command-line flags\n\nFor the programs in this distribution and also automatically in your own\nprograms using this library, there are a lot of parameters provided as command\nline flags, so that you don\'t have to re-compile your programs to tweak them.\nSome might need to be changed for your particular kind of panel.\n\nHere is a little run-down of what these command-line flags do and when you\'d\nlike to change them.\n\nFirst things first: if you have a different wiring than described in\n[wiring](./wiring.md), for instance if you have an Adafruit HAT/Bonnet, you can\nchoose these here:\n\n```\n--led-gpio-mapping=<gpio-mapping>: Name of GPIO mapping used. Default "regular"\n```\n\nThis can have values such as\n  - `--led-gpio-mapping=regular` The standard mapping of this library, described in the [wiring](./wiring.md) page.\n  - `--led-gpio-mapping=adafruit-hat` The Adafruit HAT/Bonnet, that uses this library or\n  - `--led-gpio-mapping=adafruit-hat-pwm` Adafruit HAT with the anti-flicker hardware mod [described below](#improving-flicker).\n\nThe next most important flags describe the type and number of displays connected\n\n```\n--led-rows=<rows>        : Panel rows. Typically 8, 16, 32 or 64. (Default: 32).\n--led-cols=<cols>        : Panel columns. Typically 32 or 64. (Default: 32).\n--led-chain=<chained>    : Number of daisy-chained panels. (Default: 1).\n--led-parallel=<parallel>: For A/B+ models or RPi2,3b: parallel chains. range=1..3 (Default: 1).\n```\n\nThese are the most important ones: here you choose how many panels you have\nconnected and how many rows are in each panel. Panels can be chained (each panel\nhas an input and output connector, see the\n[wiring documentation](wiring.md#chains)) -- the `--led-chain` flag tells the\nlibrary how many panels are chained together. The newer Raspberry Pi\'s allow\nto connect multiple chains in parallel, the `--led-parallel` flag tells it how\nmany there are.\n\nThis illustrates what each of these parameters mean:\n\n<a href="wiring.md#chaining-parallel-chains-and-coordinate-system"><img src="img/coordinates.png"></a>\n\n##### Panel Type\n\nTypically, panels should just work out of the box, but some panels use a\ndifferent chip-set that requires some initialization. If you don\'t see any\noutput on your panel, try setting:\n\n```\n--led-panel-type=FM6126A\n```\n\n##### Multiplexing\nIf you have some \'outdoor\' panels or panels with different multiplexing,\nthe following will be useful:\n\n```\n--led-multiplexing=<0..4> : Multiplexing type: 0=direct; 1=strip; 2=checker; 3=spiral; 4=Z-strip (Default: 0)\n```\nThe outdoor panels have different multiplexing which allows them to be faster\nand brighter, but by default their output looks jumbled up.\nThey require some pixel-mapping of which there are a few\ntypes you can try and hopefully one of them works for your panel; The default=0\nis no mapping (\'standard\' panels), while 1, 2, 3 or 4 are different mappings\nto try with. If your panel has a different mapping, please send a pull request.\n\nNote that you have to set the `--led-rows` and `--led-cols` to the rows and\ncolumns that are physically on each chained panel so that the multiplexing\noption can work properly. For instance a `32x16` panel with `1:4` multiplexing\nwould be controlled with `--led-rows=16 --led-cols=32 --led-multiplexing=1` (or\nwhatever multiplexing type your panel is, so it can also be `--led-multiplexing=2`, or 3).\n\nFor `64x32` panels with `1:8` multiplexing, this would typically be\n`--led-rows=32 --led-cols=64 --led-multiplexing=1`;\nhowever, there are some panels that internally behave like\ntwo chained panels, so then you\'d use\n`--led-rows=32 --led-cols=32 --led-chain=2 --led-multiplexing=1`;\n\n```\n--led-pixel-mapper  : Semicolon-separated list of pixel-mappers.\n```\n\nMapping the logical layout of your boards to your physical arrangement. See\nmore in [Remapping coordinates](./examples-api-use#remapping-coordinates).\n\n```\n--led-row-addr-type=<0..2>: 0 = default; 1=AB-addressed panels; 2=direct row select (Default: 0).\n```\nThis option is useful for certain 64x64 or 32x16 panels. For 64x64 panels,\nthat only have an `A` and `B` address line, you\'d use `--led-row-addr-type=1`.\nThis is only tested with one panel so far, so if it doesn\'t work for you,\nplease send a pull request.\n\nFor 32x16 outdoor panels, that have have 4 address line (A, B, C, D), it is\nnecessary to use `--led-row-addr-type=2`.\n\n```\n--led-brightness=<percent>: Brightness in percent (Default: 100).\n```\n\nSelf explanatory.\n\n\n```\n--led-pwm-bits=<1..11>    : PWM bits (Default: 11).\n```\n\nThe LEDs can only be switched on or off, so the shaded brightness perception\nis achieved via PWM (Pulse Width Modulation). In order to get a good 8 Bit\nper color resolution (24Bit RGB), the 11 bits default per color are good\n(why ? Because our eyes are actually perceiving brightness logarithmically, so\nwe need a lot more physical resolution to get 24Bit sRGB).\n\nWith this flag, you can change how many bits it should use for this; lowering it\nmeans the lower bits (=more subtle color nuances) are omitted.\nTypically you might be mostly interested in the extremes: 1 Bit for situations\nthat only require 8 colors (e.g. for high contrast text displays) or 11 Bit\nfor everything else (e.g. showing images or videos). Why would you bother at all ?\nLower number of bits use slightly less CPU and result in a higher refresh rate.\n\n```\n--led-show-refresh        : Show refresh rate.\n```\n\nThis shows the current refresh rate of the LED panel, the time to refresh\na full picture. Typically, you want this number to be pretty high, because the\nhuman eye is pretty sensitive to flicker. Depending on the settings, the\nrefresh rate with this library are typically in the hundreds of Hertz but\ncan drop low with very long chains. Humans have different levels of perceiving\nflicker - some are fine with 100Hz refresh, others need 250Hz.\nSo if you are curious, this gives you the number (shown on the terminal).\n\nThe refresh rate depends on a lot of factors, from `--led-rows` and `--led-chain`\nto `--led-pwm-bits`, `--led-pwm-lsb-nanoseconds` and `--led-pwm-dither-bits`.\nIf you are tweaking these parameters, showing the refresh rate can be a\nuseful tool.\n\n```\n--led-scan-mode=<0..1>    : 0 = progressive; 1 = interlaced (Default: 0).\n```\n\nThis switches from progressive scan and interlaced scan. The latter might\nlook be a little nicer when you have a very low refresh rate, but typically\nit is more annoying because of the comb-effect (remember 80ies TV ?).\n\n\n```\n--led-pwm-lsb-nanoseconds : PWM Nanoseconds for LSB (Default: 130)\n```\n\nThis allows to change the base time-unit for the on-time in the lowest\nsignificant bit in nanoseconds.\nLower values will allow higher frame-rate, but will also negatively impact\nqualty in some panels (less accurate color or more ghosting).\n\nGood values for full-color display (PWM=11) are somewhere between 100 and 300.\n\nIf you you use reduced bit color (e.g. PWM=1) and have sharp contrast\napplications, then higher values might be good to minimize ghosting.\n\nHow to decide ? Just leave the default if things are fine. But some panels have\ntrouble with sharp contrasts and short pulses that results\nin ghosting. It is particularly apparent in situations such as bright text\non black background. In these cases increase the value until you don\'t see\nthis ghosting anymore.\n\nThe following example shows how this might look like:\n\nGhosting with low --led-pwm-lsb-nanoseconds  | No ghosting after tweaking\n---------------------------------------------|------------------------------\n![](img/text-ghosting.jpg)                   |![](img/text-no-ghosting.jpg)\n\nIf you tweak this value, watch the framerate (`--led-show-refresh`) while playing\nwith this number.\n\n```\n--led-pwm-dither-bits   : Time dithering of lower bits (Default: 0)\n```\n\nThe lower bits can be time dithered, i.e. their brightness contribution is\nachieved by only showing them some frames (this is possible,\nbecause the PWM is implemented as binary code modulation).\nThis will allow higher refresh rate (or same refresh rate with increased\n`--led-pwm-lsb-nanoseconds`).\nThe disadvantage could be slightly lower brightness, in particular for longer\nchains, and higher CPU use.\nCPU use is not of concern for Rasbperry Pi 2 or 3 (as we run on a dedicated\ncore anyway) but proably for Raspberry Pi 1 or Pi Zero.\nDefault: no dithering; if you have a Pi 3 and struggle with low frame-rate due\nto high multiplexing panels (1:16 or 1:32) or long chains, it might be\nworthwhile to try.\n\n```\n--led-slowdown-gpio=<0..2>: Slowdown GPIO. Needed for faster Pis and/or slower panels (Default: 1).\n```\n\nThe Raspberry Pi 2 and 3 are putting out data too fast for almost all LED panels\nI have seen. In this case, you want to slow down writing to GPIO. Zero for this\nparameter means \'no slowdown\'.\n\nThe default 1 (one) typically works fine, but often you have to even go further\nby setting it to 2 (two). If you have a Raspberry Pi with a slower processor\n(Model A, A+, B+, Zero), then a value of 0 (zero) might work and is desirable.\n\n```\n--led-no-hardware-pulse   : Don\'t use hardware pin-pulse generation.\n```\n\nThis library uses a hardware subsystem that also is used by the sound. You can\'t\nuse them together. If your panel does not work, this might be a good start\nto debug if it has something to do with the sound subsystem (see Troubleshooting\nsection). This is really only recommended for debugging; typically you actually\nwant the hardware pulses as it results in a much more stable picture.\n\n<a name="no-drop-priv"/>\n\n```\n--led-no-drop-privs       : Don\'t drop privileges from \'root\' after initializing the hardware.\n```\n\nYou need to start programs as root as it needs to access some low-level hardware\nat initialization time. After that, it is typically not desirable to stay in this\nrole, so the library then drops the privileges.\n\nThis flag allows to switch off this behavior, so that you stay root.\nNot recommended unless you have a specific reason for it.\n\n```\n--led-daemon              : Make the process run in the background as daemon.\n```\n\nIf this is set, the program puts itself into the background (running\nas \'daemon\').\nYou might want this if started from an init script at boot-time.\n\n```\n--led-inverse             : Switch if your matrix has inverse colors on.\n--led-rgb-sequence        : Switch if your matrix has led colors swapped (Default: "RGB")\n```\n\nThese are if you have a different kind of LED panel in which the logic of the\ncolor bits is reversed (`--led-inverse`) or where the Red, Green and Blue LEDs\nare mixed up (`--led-rgb-sequence`). You know it when you see it.\n\nTroubleshooting\n---------------\nHere are some tips in case things don\'t work as expected.\n\n### Use minimal Raspbian distribution\nIn general, run a minimal configuration on your Pi.\n\n  * Do not use a graphical user interface (Even though the\n    Raspberry Pi foundation makes you believe that you can do that: don\'t.\n    Using a Pi with a GUI is a frustratingly slow use of an otherwise\n    perfectly good embedded device.)\n\n  * Switch off on-board sound (`dtparam=audio=off` in `/boot/config.txt`).\n    External USB sound adapters work, and are much better quality anyway,\n    so that is recommended if you happen to need sound. The on-board sound\n    uses a timing circuit that the RGB-Matrix needs (it seems in some\n    distributions, such as arch-linux, this is not enough and you need\n    to explicitly blacklist the snd_bcm2835 module).\n\n  * Don\'t run anything that messes in parallel with the GPIO pins, e.g.\n    PiGPIO library/daemon or devices that use the i2c or 1-wire interface if\n    they are on the same pins you need for the panel.\n\n  * I have also seen reports that on some Pis, the one-wire protocol is\n    enabled (w1-gpio). This will also not work (disable by removing\n    `dtoverlay=w1-gpio` in `/boot/config.txt`; or using `raspi-config`,\n    Interface Options -> 1-Wire)\n\n  * If you see some regular flickering, make sure that there is no other\n    process running on the system that could cause that. For instance, it is\n    known that merely running `top` creates a faint flicker every second it\n    updates. Or a regular ntp run can also cause flicker once a minute\n    (switch off with `sudo timedatectl set-ntp false`). Maybe instead you\n    might want to run ntp at system start-up but then not regularly updating.\n    There might be other things running regularly you don\'t need;\n    consider a `sudo systemctl stop cron` for instance.\n\n  * There are probably other processes that are running that you don\'t need\n    and remove them; I usually remove right away stuff I really don\'t need e.g.\n    ```\n    sudo apt-get remove bluez bluez-firmware pi-bluetooth triggerhappy pigpio\n    ```\n    Take a close look at your systemd (`systemctl`) and see if there are other\n    things running you don\'t need. If you have seen packages in standard\n    Raspbians that interfere with the matrix code, let me know to include it\n    here.\n    In general: This is why starting with a minimal installation is a good\n    idea: there is simply less cruft that you have to disable.\n\n  * It seems that more recent version of Raspbian Lite result in some faint\n    brightness fluctuations of the displays and it is not quite clear why (see\n    issue [#483](https://github.com/hzeller/rpi-rgb-led-matrix/issues/483)).\n    If you are a Kernel person and can help figuring out what is\n    happening that would be very appreciated. Also, you might know a minimal\n    Linux distribution that is more suited for near realtime applications ?\n\nThe default install of **[Raspbian Lite][raspbian-lite]** or **[DietPi]**\nseem to be good starting points, as they have a reasonably minimal\nconfiguration to begin with.\n\n### Bad interaction with Sound\nIf sound is enabled on your Pi, this will not work together with the LED matrix,\nas both need the same internal hardware sub-system (a first test to see if you\nare affected is to run the progrem with `--led-no-hardware-pulse` and see if\nthings work fine then).\n\nIf you run `lsmod` and see the `snd_bcm2835` module, this could be causing trouble.\n(The library actually exits if it finds this module to be loaded).\n\nIn that case, you should create a kernel module blacklist file like the\nfollowing on your system and update your initramfs:\n\n```\ncat <<EOF | sudo tee /etc/modprobe.d/blacklist-rgb-matrix.conf\nblacklist snd_bcm2835\nEOF\n\nsudo update-initramfs -u\n```\n\nReboot and confirm that the module is not loaded.\n\n### I have followed some tutorial on the Internet and it doesn\'t work\n\nWell, if you use this library, please read the documentation provided _here_,\nnot on some other website. Most important for you to get started\nis the [wiring guide](./wiring.md). There are some tutorials floating around\nthat refer to a very old version of this library.\n\n### I have a Pi1 Revision1 and top part of Panel doesn\'t show green\n\nUse `--led-gpio-mapping=regular-pi1`\n\n### Logic level voltage not sufficient\nSome panels don\'t interpret the 3.3V logic level well, or the RPi output drivers\nhave trouble driving longer cables, in particular with\nfaster Raspberry Pis Version 2. This results in artifacts like randomly\nshowing up pixels, color fringes, or parts of the panel showing \'static\'.\n\nIf you encounter this, try these things\n\n   - Make sure to have as short as possible flat-cables connecting your\n     Raspberry Pi with the LED panel.\n\n   - In particular if the chips close to the input of the LED panel\n     read 74HC245 instead of 74HCT245 or 74AHCT245, then this board will not\n     work properly with 3.3V inputs coming from the Pi.\n     Use an [adapter board](./adapter/active-3) with a bus-driver that acts as\n     level shifter between 3.3V and 5V.\n     (In any case, it is always a good idea to use the level shifters).\n\n   - A temporary hack to make HC245 inputs work with the 3.3V levels is to\n     supply only like 4V to the LED panel. But the colors will be off, so not\n     really useable as long-term solution.\n\n   - If you can\'t implement the above things, or still have problems, you can\n     slow down the GPIO writing a bit. This will of course reduce the\n     frame-rate, so it comes at a cost.\n\nFor GPIO slow-down, add the flag `--led-slowdown-gpio=2` to the invocation of\nthe binary.\n\nIf you have an Adafruit HAT or Bonnet\n---------------------------\n\nGenerally, if you want to connect RGB panels via an adapter instead of\nhand-wiring, I suggest to build one of the adapters whose open-hardware\nfiles you find in the [adapter/](./adapter) subdirectory. It is a fun solder\nexercise with large surface mount components.\n\nHowever, Adafruit [offers an adapter][adafruit-hat] which is already ready-made,\nbut it only allows for a single chain. If the\nready-made vs. single-chain tradeoff is worthwhile, then you might go for that\n(I am not affiliated with Adafruit).\n\n### Switch the Pinout\n\nThe Adafruit HAT/Bonnet uses this library but a modified pinout to support other\nfeatures on the HAT. You can choose the Adafruit pinout with a command line\nflag.\n\nJust pass the option `--led-gpio-mapping=adafruit-hat`. This works on the C++\nand Python examples.\n\nIf you want to have this a compiled-in default, add the following setting in\nfront of your compilation:\n```\nHARDWARE_DESC=adafruit-hat make\n```\n(alternatively, you can modify the `lib/Makefile` and change it there directly)\n\nThen re-compile and the new flag default is now `adafruit-hat`, so\nno need to set it on the command line.\n\n### Improving flicker\n\nTo improve flicker, we need to do a little hardware modification,\nbut it is very simple: solder a wire between GPIO 4 and 18 as shown in the\nfollowing picture (click to enlarge):\n\n<a href="img/adafruit-mod.jpg"><img src="img/adafruit-mod.jpg" height="80px"></a>\n\nThen, start your programs with `--led-gpio-mapping=adafruit-hat-pwm`.\n\nIf you want to make this the default setting your program starts with, you can\nalso manually choose this with\n```\nHARDWARE_DESC=adafruit-hat-pwm make\n```\nto get this as default setting.\n\nNow you should have less visible flicker. This essentially\nswitches on the hardware pulses feature for the Adafruit HAT/Bonnet.\n\n### 64x64 with E-line on Adafruit HAT/Bonnet\nThere are LED panels that have 64x64 LEDs packed, but they need 5 address lines,\nwhich is 1:32 multiplexing (they have an `E` address-line). The hardware of\nthe Adafruit HAT/Bonnet is not prepared for this, but it can be done with another\nhardware mod.\n\nIt is a little more advanced hack, so  is only really for people who are\ncomfortable with this kind of thing.\nFirst, you have to figure out which is the input of the E-Line on your matrix\n(they seem to be either on Pin 4 or Pin 8 of the IDC connector).\nYou need to disconnect that Pin from the ground plane (e.g. with an Exacto\nknife) and connect GPIO 24 to it. The following images illustrate the case for\nIDC Pin 4.\n\n<a href="img/adafruit-64x64-front.jpg"><img src="img/adafruit-64x64-front.jpg" height="80px"></a>\n<a href="img/adafruit-64x64-back.jpg"><img src="img/adafruit-64x64-back.jpg" height="80px"></a>\n\nIf the direct connection does not work, you need to send it through a free\nlevel converter of the Adafruit HAT/Bonnet. Since all unused inputs are grounded\nwith traces under the chip, this involves lifting a leg from the\nHCT245 (figure out a free bus driver from the schematic). If all of the\nabove makes sense to you, you have the Ninja level to do it!\n\nIt might be more convienent at this point to consider the [Active3 adapter](./adapter/active-3)\nthat has that covered already.\n\nRunning as root\n---------------\nThe library requires to access hardware registers to control the LED matrix,\nand create accurate timings. These hardware accesses require to run as root\nuser.\n\nFor security reasons, it is usually not a good idea to run an application\nas root entirely, so this library makes sure to drop privileges immediately\nafter the hardware is initialized.\n\nYou can switch off the privilege dropping with the\n[`--led-no-drop-privs`](#user-content-no-drop-priv) flag, or, if you do this\nprogrammatically,\nchoose the configuration in the\n[`RuntimeOptions struct`](https://github.com/hzeller/rpi-rgb-led-matrix/blob/master/include/led-matrix.h#L401).\n\nNote, you _could_ run as non-root, which will use `/dev/gpiomem`\nto at least write to GPIO, however the precise timing hardware registers are\nnot accessible. This will result in flicker and color degradation. Starting\nas non-root is not recommended.\n\nCPU use\n-------\n\nThese displays need to be updated constantly to show an image with PWMed\nLEDs. This is dependent on the length of the chain: for each chain element,\nabout 1\'000\'000 write operations have to happen every second!\n(chain_length * 32 pixel long * 16 rows * 11 bit planes * 180 Hz refresh rate).\n\nWe can\'t use hardware support for writing these as DMA is too slow,\nthus the constant CPU use on an RPi is roughly 30-40% of one core.\nKeep that in mind if you plan to run other things on this computer (This\nis less noticable on Raspberry Pi, Version 2 or 3 that has more cores).\n\nAlso, the output quality is susceptible to other heavy tasks running on that\ncomputer - there might be changes in the overall brigthness when this affects\nthe referesh rate.\n\nIf you have a loaded system and one of the newer Pis with 4 cores, you can\nreserve one core just for the refresh of the display:\n\n```\nisolcpus=3\n```\n\n.. at the end of the line of `/boot/cmdline.txt` (needs to be in the same as\nthe other arguments, no newline). This will use the last core\nonly to refresh the display then, but it also means, that no other process can\nutilize it then. Still, I\'d typically recommend it.\n\nLimitations\n-----------\nIf you are using the Adafruit HAT/Bonnet in the default configuration, then we\ncan\'t make use of the PWM hardware (which only outputs\nto a particular pin), so you\'ll see random brightness glitches. I strongly\nsuggest to do the aforementioned hardware mod.\n\nThe system needs constant CPU to update the display. Using the DMA controller\nwas considered but after extensive experiments\n( https://github.com/hzeller/rpi-gpio-dma-demo )\ndropped due to its slow speed..\n\nThere is an upper limit in how fast the GPIO pins can be controlled, which\nlimits the frame-rate. Raspberry Pi 2\'s and newer are generally faster.\n\nEven with everything in place, you might see faint brightness fluctuations\nin particular if there is something going on on the network or in a terminal\non the Pi; this could probably be mitigated with some more real-time\nkernel for the Pi; maybe there are also hardware limitations (memory bus\ncontention?). Anyway, if you have a realtime kernel configuration that you\nhave optimized for this application, let me know.\n\nTo address the brightness fluctuations, you might experiment with the\n`FIXED_FRAME_MICROSECONDS` compile time option in [lib/Makefile](lib/Makefile)\nthat has instructions how to set it up.\n\nFun\n---\nI am always happy to see users successfully using the software for wonderful\nthings, like this installation by Dirk in Scharbeutz, Germany:\n\n![](./img/user-action-shot.jpg)\n\n[matrix64]: ./img/chained-64x64.jpg\n[sparkfun]: https://www.sparkfun.com/products/12584\n[ada]: http://www.adafruit.com/product/1484\n[rt-paper]: https://www.osadl.org/fileadmin/dam/rtlws/12/Brown.pdf\n[adafruit-hat]: https://www.adafruit.com/products/2345\n[raspbian-lite]: https://downloads.raspberrypi.org/raspbian_lite_latest\n[DietPi]: https://dietpi.com/\n[Adafruit HAT]: https://www.adafruit.com/products/2345\n[Adafruit Bonnet]: https://www.adafruit.com/product/3211\n[Nodejs binding]: https://github.com/zeitungen/node-rpi-rgb-led-matrix\n[Go binding]: https://github.com/mcuadros/go-rpi-rgb-led-matrix\n[Rust binding]: https://crates.io/crates/rpi-led-matrix\n[Nodejs/Typescript binding]: https://github.com/alexeden/rpi-led-matrix\n'