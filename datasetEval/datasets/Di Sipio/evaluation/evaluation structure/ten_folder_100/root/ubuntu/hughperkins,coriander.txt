b'# Coriander\n\nBuild applications written in NVIDIA\xc2\xae CUDA\xe2\x84\xa2 code for OpenCL\xe2\x84\xa2 1.2 devices.\n\n## Concept\n\n- leave applications in NVIDIA\xc2\xae CUDA\xe2\x84\xa2\n- compile into OpenCL 1.2\n- run on any OpenCL 1.2 GPU\n\n## How to use\n\n- Write an NVIDIA\xc2\xae CUDA\xe2\x84\xa2 sourcecode file, or find an existing one\n- Let\'s use [cuda_sample.cu](https://github.com/hughperkins/Coriander/blob/76a849d9510276bc67167c9a7676d64ff04c3e4a/test/cuda_sample.cu)\n- Compile, using `cocl`:\n```\n$ cocl_py cuda_sample.cu\n   ...\n   ... (bunch of compily stuff) ...\n   ...\n\n    ./cuda_sample.cu compiled into ./cuda_sample\n\n```\nRun:\n```\n$ ./cuda_sample\nUsing Intel , OpenCL platform: Intel Gen OCL Driver\nUsing OpenCL device: Intel(R) HD Graphics 5500 BroadWell U-Processor GT2\nhostFloats[2] 123\nhostFloats[2] 222\nhostFloats[2] 444\n```\n\n<img src="doc/img/mac_run_cuda_sample.png?raw=true" />\n\n[Options](doc/options.md)\n\n## What Coriander provides\n\n- compiler for host-side code, including memory allocation, copy, streams, kernel launches\n- compiler for device-side code, handling templated C++ code, converting it into bog-standard OpenCL 1.2 code\n- cuBLAS API implementations for GEMM, GEMV, SCAL, SAXPY (using Cedric Nugteren\'s [CLBlast](https://github.com/cnugteren/CLBlast))\n- cuDNN API implementations for: convolutions (using `im2col` algorithm over Cedric Nugteren\'s [CLBlast](https://github.com/cnugteren/CLBlast), pooling, ReLU, tanh, and sigmoid\n\n## How Coriander works\n\nKernel compilation proceeds in two steps:\n\n<img src="doc/img/kernelcompilation.png?raw=true" />\n\nSlides on the [IWOCL](http://iwocl.org) website, [here](http://www.iwocl.org/wp-content/uploads/iwocl2017-hugh-perkins-cuda-cl.pdf)\n\n## Installation\n\nCoriander development is carried out using the following platforms:\n- Ubuntu 16.04, with:\n  - NVIDIA K80 GPU and/or NVIDIA K520 GPU (via aws)\n- Mac Book Pro 4th generation (thank you [ASAPP](http://asapp.com) :-) ), with:\n  - Intel HD Graphics 530\n  - Radeon Pro 450\n  - Sierra OS\n\nOther systems should work too, ideally.  You will need at a minimum at least one OpenCL-enabled GPU,\nand appropriate OpenCL drivers installed, for the GPU. Both linux and Mac systems stand a reasonable chance of working ok.\n\nFor installation, please see [installation](doc/installation.md)\n\n## Plugins\n\nYou can install the following plugins:\n\n- [Coriander-clblast](https://github.com/hughperkins/coriander-clblast): just do `cocl_plugins.py install --repo-url https://github.com/hughperkins/coriander-clblast`\n- [Coriander-dnn](https://github.com/hughperkins/coriander-dnn): just do `cocl_plugins.py install --repo-url https://github.com/hughperkins/coriander-dnn`\n- Your plugin here?\n\n[How to create a plugin](doc/plugins.md)\n\n## Add to your own `cmake` project\n\n- use `cocl_add_executable` and `cocl_add_library`\n- see [cmake usage](doc/cmake_usage.md)\n\n## Testing\n\nSee [testing](doc/testing.md)\n\n## Assumptions/relaxations made by Coriander\n\nSee [assumptions](doc/assumptions.md)\n\n## Roadmap\n\n<img src="doc/img/roadmap.png?raw=true" />\n\n## Libraries\n\nCoriander uses the following libraries:\n\n- [clang/llvm](http://llvm.org/): c/c++ parser/compiler; many contributors\n- [thrust](https://github.com/thrust/thrust): parallel GPU library, from NVIDIA\xc2\xae\n- [yaml-cpp](https://github.com/jbeder/yaml-cpp): yaml for c++, by Jesse Beder\n- [EasyCL](https://github.com/hughperkins/EasyCL): wrapper for OpenCL 1.2 boilerplate\n- [argparsecpp](https://github.com/hughperkins/argparsecpp): command-line parser for c++\n- [gtest](https://github.com/google/googletest): unit tests for c++, from Google\n\n## Related projects\n\n- [Eigen-CL](https://bitbucket.org/hughperkins/eigen/commits/branch/eigen-cl): Minimally-tweaked fork of Eigen, for OpenCL 1.2\n- [tf-coriander](https://github.com/hughperkins/tf-coriander): Tensorflow for OpenCL-1.2\n\n## How to Cite\n\nPlease cite: [CUDA-on-CL: a compiler and runtime for running NVIDIA\xc2\xae CUDA\xe2\x84\xa2 C++11 applications on OpenCL\xe2\x84\xa2 1.2 Devices](http://dl.acm.org/citation.cfm?id=3078156)\n\n## License\n\n[Apache 2.0](LICENSE)\n\n## News\n\n- June 23:\n  - factorized CLBlast implementation of NVIDIA\xc2\xae CUDA\xe2\x84\xa2 cuBLAS API, into new plugin [coriander-clblast](https://github.com/hughperkins/coriander-clblast)\n- June 21:\n  - created a new release [v6.0.0](https://github.com/hughperkins/coriander/releases/tag/v6.0.0), that marks a bunch of changes:\n    - incorporates of course the earlier changes:\n      - took some big steps towards portability and Windows compilation, ie using python 2.7 scripts, rather than bash scripts, and fixing many Windows-related compilation issues\n      - the plugin architecture\n      - factorizing the partial NVIDIA\xc2\xae CUDA\xe2\x84\xa2 cuDNN API implementation into a new plugin [coriander-dnn](https://github.com/hughperkins/coriander-dnn)\n    - moved the default installation directory from `/usr/local` to `~/coriander`\n      - this means that plugins can be installed without `sudo`\n      - it also makes it relatively easy to wipe and reinstall, for more effective jenkins testing\n    - `install_distro.py` is now considerably more tested than a few days ago, and handles downloading `llvm-4.0` automatically\n- [Older news](doc/news.md)\n'