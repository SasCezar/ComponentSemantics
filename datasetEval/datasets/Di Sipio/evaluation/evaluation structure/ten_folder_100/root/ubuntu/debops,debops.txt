b'# [![DebOps logo][debops-logo]](https://debops.org/) DebOps\n\n*Your Debian-based data center in a box*\n\n[![Travis CI][travis-ci]](https://travis-ci.org/debops/debops)\n[![GitLab CI][gitlab-ci]](https://gitlab.com/debops/debops/pipelines)\n[![CII Best Practices][cii-best-practices]](https://bestpractices.coreinfrastructure.org/en/projects/237)\n[![RSS commits][rss-commits]](https://github.com/debops/debops/commits/master.atom)\n\n[debops-logo]: https://raw.githubusercontent.com/debops/debops/master/lib/images/debops-small.png\n[travis-ci]: https://img.shields.io/travis/debops/debops.svg?style=flat\n[gitlab-ci]: https://gitlab.com/debops/debops/badges/master/pipeline.svg\n[cii-best-practices]: https://bestpractices.coreinfrastructure.org/projects/237/badge\n[rss-commits]: https://img.shields.io/badge/RSS-commits-orange.svg\n\n\nThe DebOps project provides a set of general-purpose [Ansible][ansible] roles\nthat can be used to manage [Debian][debian] or [Ubuntu][ubuntu] hosts. In\naddition, a default set of Ansible playbooks can be used to apply the provided\nroles in a controlled way, using Ansible inventory groups.\n\n[ansible]: https://github.com/ansible/ansible/\n[debian]: https://www.debian.org/\n[ubuntu]: https://www.ubuntu.com/\n\nThe roles are written with a high customization in mind, which can be done\nusing Ansible inventory. This way the role and playbook code can be shared\nbetween multiple environments, with different configuration in to each one.\n\nServices can be managed on a single host, or spread between multiple hosts.\nDebOps provides support for different SQL and NoSQL databases, web servers,\nprogramming languages and specialized applications useful in a data center\nenvironment or in a cluster. The project can also be used to deploy\nvirtualization environments using KVM/libvirt, Docker or LXC technologies to\nmanage virtual machines and/or containers.\n\nYou can find out more about DebOps features on the [project\'s documentation\npage][debops-docs].\n\n[debops-docs]: https://docs.debops.org/\n\n\n## Quick start\n\nStart a Docker container which acts as an Ansible Controller host with DebOps\nsupport, based on Debian Buster:\n\n    docker run -it --rm debops/debops\n    cd src/controller ; debops common --diff\n\nOr, create a Vagrant VM which acts as an Ansible Controller host:\n\n    git clone https://github.com/debops/debops\n    cd debops && vagrant up && vagrant ssh\n    cd src/controller ; debops common --diff\n\nYou can use configuration in the `src/controller` subdirectory to try out\nDebOps against the container/VM, or create your own DebOps project directory\nusing `debops-init` command.\n\nMore quick start tips can be found [in the DebOps quick start guide][quick-start].\n\n[quick-start]: https://docs.debops.org/en/latest/introduction/quick-start.html\n\n\nInstallation\n------------\n\nYou can install the [DebOps Python package][debops-pypi], which includes the\nDebOps roles and playbooks, as well as additional scripts which can be used to\nsetup separate project directories and run Ansible in a convenient way. To\ninstall the Python package with Ansible and other required dependencies, run\nthe command:\n\n    pip install --user debops[ansible]\n\n[debops-pypi]: https://pypi.org/project/debops/\n\nAlternatively, DebOps roles are available on [Ansible Galaxy][debops-galaxy]\nand can be installed using the [Mazer][mazer] content manager, with the\ncommand:\n\n    mazer install debops.debops\n\n[debops-galaxy]: https://galaxy.ansible.com/debops/debops/\n[mazer]: https://galaxy.ansible.com/docs/mazer/index.html\n\nRead the [installation instructions][install] in the DebOps documentation for\nmore details about required software and dependencies.\n\n[install]: https://docs.debops.org/en/master/user-guide/install.html\n\n\n## Getting started\n\nAnsible uses SSH to connect to and manage the hosts. DebOps enforces the SSH\nsecurity by disabling password authentication, therefore using SSH keys to\nconnect to the hosts is strongly recommended. This can be changed using the\ninventory variables.\n\nDuring initial deployments you might find that the firewall created by DebOps\nblocked you from accessing the hosts. Because of that it\'s advisable to have an\nout-of-band console access to the host which can be used to login and\ntroubleshoot the connection.\n\nCreate a new environment within a DebOps "project directory", add some hosts in\nthe Ansible inventory and run the default DebOps playbook against them to\nconfigure them:\n\n    # Create a new environment\n    debops-init ~/src/projects/my-environment\n    cd ~/src/projects/my-environment\n\n    # Modify the \'ansible/inventory/hosts\' file to suit your needs, for example\n    # uncomment the local host to configure it with DebOps\n\n    # Run the full playbook against all hosts in the inventory\n    debops\n\n    # Run the common playbook against specific host in the inventory\n    debops common -l <hostname>\n\nYou should read the [Getting Started with DebOps][getting-started] guide for\na more in-depth explanation of how the project can be used to manage multiple\nhosts via Ansible.\n\n[getting-started]: https://docs.debops.org/en/master/introduction/getting-started.html\n\n\nDevelopment\n-----------\n\nCreate [a fork of this repository][debops-fork] and clone it to your\nworkstation. Create a development DebOps environment and symlink the forked\nrepository in it. Now you can create new playbooks/roles in the forked\nrepository and see their results in the development environment.\n\n    git clone git@github.com:<username>/debops ~/src/github.com/<username>/debops\n    cd ~/src/github.com/<username>/debops\n    git remote add upstream https://github.com/debops/debops.git\n\n    debops-init ~/src/projects/debops-devel\n    cd ~/src/projects/debops-devel\n    ln -s ~/src/github.com/<username>/debops debops\n\nYou can pull latest changes to the project from the upstream repository:\n\n    cd ~/src/github.com/<username>/debops\n    git checkout master\n    git fetch upstream\n    git rebase upstream/master\n\nRead the [development guide][devel-guide] file for more details about the\nDebOps development process.\n\n[devel-guide]: https://github.com/debops/debops/blob/master/DEVELOPMENT.rst\n\n\n## Contributing\n\nDebOps development is done via a distributed development model. New features\nand changes are prepared in a [fork of the official repository][debops-fork]\nand are published to the original repository via GitHub pull requests. PRs are\nreviewed by the DebOps developer team and if accepted, are merged in the main\nrepository.\n\n[debops-fork]: https://github.com/debops/debops/fork\n\nGPG-signed `git` commits are preferred to ensure authenticity.\n\nRead the [contributing guide][contrib-guide] file for more details about how to\ncontribute to DebOps.\n\n[contrib-guide]: https://github.com/debops/debops/blob/master/CONTRIBUTING.rst\n\n\n## Licensing\n\nThe DebOps project is licensed under the [GNU General Public License 3.0][gpl-3.0].\nYou can find full text of the license in the [LICENSE][license] file.\n\n[gpl-3.0]: https://www.gnu.org/licenses/gpl-3.0\n[license]: https://github.com/debops/debops/blob/master/LICENSE\n'