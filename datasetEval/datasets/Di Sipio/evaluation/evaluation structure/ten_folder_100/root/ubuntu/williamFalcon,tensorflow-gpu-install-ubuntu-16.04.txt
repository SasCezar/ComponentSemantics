b'# Tensorflow GPU install on ubuntu 16.04    \n\nThese instructions are intended to set up a deep learning environment for GPU-powered tensorflow.      \n[See here for pytorch GPU install instructions](https://github.com/williamFalcon/pytorch-gpu-install)\n\nAfter following these instructions you\'ll have:\n\n1. Ubuntu 16.04. \n2. Cuda 9.0 drivers installed.\n3. A conda environment with python 3.6.    \n4. The latest tensorflow version with gpu support.   \n\n---   \n### Step 0: Noveau drivers     \nBefore you begin, you may need to disable the opensource ubuntu NVIDIA driver called [nouveau](https://nouveau.freedesktop.org/wiki/).\n\n**Option 1: Modify modprobe file**\n1. After you boot the linux system and are sitting at a login prompt, press ctrl+alt+F1 to get to a terminal screen.  Login via this terminal screen.\n\n2. Create a file: /etc/modprobe.d/nouveau-blacklist.conf e.g. by \n```\nsudo touch /etc/modprobe.d/nouveau-blacklist.conf\n```\n3.  Put the following in the above file...\n```\nblacklist nouveau\noptions nouveau modeset=0\n```\n\n4. Regenerate the kernel initramfs\n\n```\nsudo update-initramfs -u\n```\n5. reboot system   \n```bash\nreboot\n```   \n    \n6. On reboot, verify that noveau drivers are not loaded   \n```\nlsmod | grep nouveau\n```\n\nIf `nouveau` driver(s) are still loaded do not proceed with the installation guide and troubleshoot why it\'s still loaded.    \n\n**Option 2: Modify Grub load command**    \nFrom [this stackoverflow solution](https://askubuntu.com/questions/697389/blank-screen-ubuntu-15-04-update-with-nvidia-driver-nomodeset-does-not-work)    \n\n1. When the GRUB boot menu appears : Highlight the Ubuntu menu entry and press the E key.\nAdd the nouveau.modeset=0 parameter to the end of the linux line ... Then press F10 to boot.   \n2. When login page appears press [ctrl + ALt + F1]    \n3. Enter username + password   \n4. Uninstall every NVIDIA related software:   \n```bash    \nsudo apt-get purge nvidia*  \nsudo reboot   \n```   \n\n---   \n## Installation steps     \n\n\n0. update apt-get   \n``` bash \nsudo apt-get update\n```\n   \n1. Install apt-get deps  \n``` bash\nsudo apt-get install openjdk-8-jdk git python-dev python3-dev python-numpy python3-numpy build-essential python-pip python3-pip python-virtualenv swig python-wheel libcurl3-dev curl   \n```\n\n2. install nvidia drivers \n``` bash\n# The 16.04 installer works with 16.10.\n# download drivers\ncurl -O http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/cuda-repo-ubuntu1604_9.0.176-1_amd64.deb\n\n# download key to allow installation\nsudo apt-key adv --fetch-keys http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/7fa2af80.pub\n\n# install actual package\nsudo dpkg -i ./cuda-repo-ubuntu1604_9.0.176-1_amd64.deb\n\n#  install cuda (but it\'ll prompt to install other deps, so we try to install twice with a dep update in between\nsudo apt-get update\nsudo apt-get install cuda-9-0   \n```    \n\n2a. reboot Ubuntu\n```bash\nsudo reboot\n```    \n\n2b. check nvidia driver install \n``` bash\nnvidia-smi   \n\n# you should see a list of gpus printed    \n# if not, the previous steps failed.   \n``` \n\n3. Install cudnn \n\n``` bash\nwget https://s3.amazonaws.com/open-source-william-falcon/cudnn-9.0-linux-x64-v7.3.1.20.tgz\nsudo tar -xzvf cudnn-9.0-linux-x64-v7.3.1.20.tgz\nsudo cp cuda/include/cudnn.h /usr/local/cuda/include\nsudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64\nsudo chmod a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib64/libcudnn*\n```    \n\n4. Add these lines to end of ~/.bashrc:   \n``` bash\nexport LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/usr/local/cuda/lib64:/usr/local/cuda/extras/CUPTI/lib64"\nexport CUDA_HOME=/usr/local/cuda\nexport PATH="$PATH:/usr/local/cuda/bin"\n```   \n\n4a. Reload bashrc     \n``` bash \nsource ~/.bashrc\n```   \n\n5. Install miniconda   \n``` bash\nwget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh\nbash Miniconda3-latest-Linux-x86_64.sh   \n\n# press s to skip terms   \n\n# Do you approve the license terms? [yes|no]\n# yes\n\n# Miniconda3 will now be installed into this location:\n# accept the location\n\n# Do you wish the installer to prepend the Miniconda3 install location\n# to PATH in your /home/ghost/.bashrc ? [yes|no]\n# yes    \n\n```   \n\n5a. Reload bashrc     \n``` bash \nsource ~/.bashrc\n```   \n\n6. Create python 3.6 conda env to install tf   \n``` bash\nconda create -n tensorflow python=3.6\n\n# press y a few times \n```   \n\n7. Activate env   \n``` bash\nsource activate tensorflow   \n```\n\n8. update pip (might already be up to date, but just in case...)\n```\npip install --upgrade pip\n```\n\n9. Install stable tensorflow with GPU support for python 3.6    \n``` bash\npip install --upgrade tensorflow-gpu\n\n# If the above fails, try the part below\n# pip install --ignore-installed --upgrade https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow_gpu-1.2.0-cp36-cp36m-linux_x86_64.whl\n```   \n\n10. Test tf install   \n``` bash\n# start python shell   \npython\n\n# run test script   \nimport tensorflow as tf   \n\nhello = tf.constant(\'Hello, TensorFlow!\')\n\n# when you run sess, you should see a bunch of lines with the word gpu in them (if install worked)\n# otherwise, not running on gpu\nsess = tf.Session()\nprint(sess.run(hello))\n```  \n\nor alternatively\n\n```\ntf.enable_eager_execution(); print(tf.reduce_sum(tf.random_normal([1000, 1000])))"\n```\n'