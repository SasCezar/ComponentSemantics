b"QSpectrumAnalyzer\n=================\n\nSpectrum analyzer for multiple SDR platforms (PyQtGraph based GUI for soapy_power,\nhackrf_sweep, rtl_power, rx_power and other backends)\n\nScreenshots\n-----------\n\n.. image:: https://xmikos.github.io/qspectrumanalyzer/qspectrumanalyzer_screenshot.png\n\n.. image:: https://xmikos.github.io/qspectrumanalyzer/qspectrumanalyzer_screenshot2.png\n\nRequirements\n------------\n\n- Python >= 3.3\n- PyQt4 / PyQt5 / PySide / PySide2\n- Qt.py (https://github.com/mottosso/Qt.py)\n- PyQtGraph (http://www.pyqtgraph.org)\n- soapy_power (https://github.com/xmikos/soapy_power)\n- Optional: hackrf / rtl-sdr / rtl_power_fftw / rx_tools\n\nBackends\n--------\n\nDefault backend\n***************\n\n- **soapy_power** (https://github.com/xmikos/soapy_power)\n\n``soapy_power`` is the default and recommended universal SDR backend in QSpectrumAnalyzer.\nIt is based on `SoapySDR <https://github.com/pothosware/SoapySDR>`_ and supports\nnearly all SDR platforms (RTL-SDR, HackRF, Airspy, SDRplay, LimeSDR, bladeRF,\nUSRP and some other SDR devices). It is highly configurable (see additional parameters\nhelp in *Settings* menu) and supports short acquisition time for\nnear real-time continuous measurement.\n\nOther backends\n**************\n\n- **hackrf_sweep** (https://github.com/mossmann/hackrf)\n\n``hackrf_sweep`` backend enables wideband spectrum monitoring by rapidly retuning the radio\nwithout requiring individual tuning requests from the host computer. This allows unprecedented\nsweep rate of 8 GHz per second. Only HackRF is supported.\n\n- **rtl_power_fftw** (https://github.com/AD-Vega/rtl-power-fftw)\n\n``rtl_power_fftw`` is alternative backend for RTL-SDR devices and has various\nbenefits over ``rtl_power``. E.g. better FFT performance (thanks to\nuse of ``fftw`` library) and possibility to use short acquisition time\nfor near real-time continuous measurement (minimum interval in original\n``rtl_power`` is 1 second).\n\n- **rtl_power** (https://github.com/keenerd/rtl-sdr)\n\n``rtl_power`` is original backend for RTL-SDR devices. There are better alternatives now, but\nif you want to use it, you should use `Keenerds fork of rtl-sdr <https://github.com/keenerd/rtl-sdr>`_\n(latest Git revision), because ``rtl_power`` in original rtl-sdr package (from osmocom.org)\nis broken (especially when used with cropping).\n\n- **rx_power** (https://github.com/rxseger/rx_tools) *[unsupported]*\n\n``rx_power`` (part of ``rx_tools``) is also based on SoapySDR (like default ``soapy_power`` backend)\nand therefore supports nearly all SDR platforms. But it is much slower than soapy_power, doesn't support\nnear real-time continuous measurement (minimum interval is 1 second, same as ``rtl_power``)\nand is buggy. Backend is currently unsupported, if you want to fix it, patches are welcome.\n\nUsage\n-----\n\nStart QSpectrumAnalyzer by running ``qspectrumanalyzer``.\n\nYou can choose which backend you want to use in *File* -> *Settings*\n(or *Application menu* -> *Preferences* on Mac OS X), default is\n``soapy_power``. Device, sample rate, bandwidth, LNB LO, path to backend executable\nand additional backend parameters can be also manually specified there. You can\nalso set waterfall plot history size. Default is 100 lines, be aware that\nreally large sweeps (with a lot of bins) would require a lot of system\nmemory, so don't make this number too big.\n\nControls should be intuitive, but if you want consistent results, you should\nturn off automatic gain control (set gain to some fixed number) and also set\ncrop to 20% or more. For finding out ppm correction factor for your rtl-sdr\nstick, use `kalibrate-rtl <https://github.com/steve-m/kalibrate-rtl>`_.\n\nYou can move and zoom plot with mouse, change plot settings or export plots\nfrom right-click menu. Waterfall plot black/white levels and color lookup\ntable can be changed in mini-histogram widget (on *Levels* tab).\n\nInstallation\n------------\n\nArch Linux:\n***********\n\nStable version:\n::\n\n    git clone https://aur.archlinux.org/qspectrumanalyzer.git\n    cd qspectrumanalyzer\n    makepkg -sri\n\nGit master branch:\n::\n\n    git clone https://aur.archlinux.org/qspectrumanalyzer-git.git\n    cd qspectrumanalyzer-git\n    makepkg -sri\n\nOr simply use `pacaur <https://aur.archlinux.org/packages/pacaur>`_ (or any other AUR helper)\nwhich will also automatically install all QSpectrumAnalyzer dependencies:\n::\n\n    pacaur -S qspectrumanalyzer\n    pacaur -S qspectrumanalyzer-git\n\nUbuntu:\n*******\n::\n\n    # Add SoapySDR PPA to your system\n    sudo add-apt-repository -y ppa:myriadrf/drivers\n\n    # Update list of packages\n    sudo apt-get update\n\n    # Install basic dependencies\n    sudo apt-get install python3-pip python3-pyqt5 python3-numpy python3-scipy soapysdr python3-soapysdr\n\n    # Install SoapySDR drivers for your hardware (e.g. RTL-SDR, Airspy, HackRF, LimeSDR, etc.)\n    sudo apt-get install soapysdr-module-rtlsdr soapysdr-module-airspy soapysdr-module-hackrf soapysdr-module-lms7\n\n    # Install QSpectrumAnalyzer locally for your current user\n    pip3 install --user qspectrumanalyzer\n\n``qspectrumanalyzer`` and ``soapy_power`` executables will be then placed in\n``~/.local/bin`` directory, you can add it to your PATH in ``~/.bashrc``.\n\nIf you want to install QSpectrumAnalyzer directly from Git master branch, you can use this procedure:\n::\n\n    git clone https://github.com/xmikos/qspectrumanalyzer.git\n    cd qspectrumanalyzer\n    pip3 install --user .\n\nWindows:\n********\n\n*Only 64-bit Windows are supported (there are no public 32-bit builds of SoapySDR\nlibraries and drivers).*\n\n1. install `SoapySDR <https://github.com/pothosware/SoapySDR/wiki>`_ libraries and drivers\n   (bundled as part of Pothos SDR installer: `download <http://downloads.myriadrf.org/builds/PothosSDR/?C=M;O=D>`_).\n   This bundle also includes other great SDR apps like `CubicSDR <http://cubicsdr.com>`_, `GQRX <http://gqrx.dk>`_,\n   `GNU Radio Companion <https://gnuradio.org>`_, `Pothos GUI <https://github.com/pothosware/pothos/wiki>`_,\n   `Lime Suite <https://github.com/myriadrf/LimeSuite>`_ and `Zadig <http://zadig.akeo.ie>`_.\n   Utilities like ``hackrf_sweep`` and ``rtl_power`` are also included.\n2. download QSpectrumAnalyzer installer or portable zip archive from GitHub\n   `releases <https://github.com/xmikos/qspectrumanalyzer/releases>`_ page\n3. after you connect your SDR device, you have to run `Zadig <http://zadig.akeo.ie>`_ to install USB drivers\n\nYou can also install QSpectrumAnalyzer manually from `PyPI <https://pypi.python.org>`_:\n\n1. install Python 3.6.x (64-bit) from `python.org <https://www.python.org>`_ and add Python to PATH\n2. install `SoapySDR <https://github.com/pothosware/SoapySDR/wiki>`_ libraries and drivers\n   (bundled as part of Pothos SDR installer: `download <http://downloads.myriadrf.org/builds/PothosSDR/?C=M;O=D>`_)\n3. Open ``cmd.exe`` and run::\n\n        pip install PyQt5\n        pip install QSpectrumAnalyzer\n\nYou should then be able to run it with ``qspectrumanalyzer`` (or ``python -m qspectrumanalyzer``\nif it doesn't work for you).\n\nTodo:\n-----\n\n- save FFT history (allow big waterfall plot saved to file)\n- automatic peak detection / highlighting\n- display average noise level\n- frequency markers / bookmarks with notes (even importing and exporting .csv file with\n  predefined channels, etc.)\n"