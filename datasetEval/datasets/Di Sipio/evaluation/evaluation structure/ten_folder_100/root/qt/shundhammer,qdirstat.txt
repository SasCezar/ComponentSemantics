b'# QDirStat\n<img src="https://github.com/shundhammer/qdirstat/blob/master/src/icons/qdirstat.svg" height="64">\n\nQt-based directory statistics: KDirStat without any KDE -- from the author of\nthe original KDirStat.\n\n(c) 2015-2019 Stefan Hundhammer <Stefan.Hundhammer@gmx.de>\n\nTarget Platforms: Linux, BSD, Unix-like systems\n\nLicense: GPL V2\n\nUpdated: 2019-11-02\n\n\n## Overview\n\nQDirStat is a graphical application to show where your disk space has gone and\nto help you to clean it up.\n\nThis is a Qt-only port of the old Qt3/KDE3-based KDirStat, now based on the\nlatest Qt 5. It does not need any KDE libs or infrastructure. It runs on every\nX11-based desktop on Linux, BSD and other Unix-like systems.\n\nQDirStat has a number of new features compared to KDirStat. To name a few:\n\n- Multi-selection in both the tree and the treemap.\n- Unlimited number of user-defined cleanup actions.\n- Properly show errors of cleanup actions (and their output, if desired).\n- File categories (MIME types) and their treemap color are now configurable.\n- Exclude rules for directories are easily configurable.\n- Desktop-agnostic; no longer relies on KDE or any other specific desktop.\n\nSee section [_New Features_](#new-features) for more details.\n\n\n\n## Screenshot\n\n[<img width="900" src="https://github.com/shundhammer/qdirstat/blob/master/screenshots/QDirStat-main-win.png">](https://raw.githubusercontent.com/shundhammer/qdirstat/master/screenshots/QDirStat-main-win.png)\n\n_Main window screenshot - notice the multi-selection in the tree and the treemap_\n\n\n## Table of Contents\n\n1. [Screenshot](#screenshot)\n1. [More Screenshots](#more-screenshots)\n1. [Latest Stable Release](#latest-stable-release)\n1. [Latest News](#latest-news)\n1. [History](#history)\n1. [Related Software](#related-software)\n   1. [WinDirStat and QDirStat](#windirstat-and-qdirstat)\n   1. [QDirStat and K4DirStat](#qdirstat-and-k4dirstat)\n   1. [Other](#other)\n1. [Motivation / Rant](#motivation--rant)\n1. [Features](#features)\n   1. [New Features](#new-features)\n   1. [Old Features](#old-features)\n   1. [Features that are Gone (Compared to the Old KDirStat)](#features-that-are-gone)\n1. [MacOS X Compatibility](#macos-x-compatibility)\n1. [Windows Compatibility](#windows-compatibility)\n1. [Ready-made Packages](#ready-made-packages)\n1. [Building](#building)\n   1. [Build Environment](#build-environment)\n   1. [Compiling](#compiling)\n   1. [Installing](#installing)\n   1. [Install to a Custom Directory](#install-to-a-custom-directory)\n1. [Contributing](#contributing)\n1. [To Do](#to-do)\n1. [Troubleshooting](#troubleshooting)\n   1. [Can\'t Move a Directory to Trash](#cant-move-a-directory-to-trash)\n1. [Reference](#reference)\n1. [Packaging Status](#packaging-status)\n1. [Donate](#donate)\n\n\n## More Screenshots\n\n\n[<img align="top" height="237" src="https://github.com/shundhammer/qdirstat/blob/master/screenshots/QDirStat-file-type-stats.png">](https://raw.githubusercontent.com/shundhammer/qdirstat/master/screenshots/QDirStat-file-type-stats.png)\n[<img align="top" height="169" src="https://github.com/shundhammer/qdirstat/blob/master/screenshots/QDirStat-cleanup-output.png" >](https://raw.githubusercontent.com/shundhammer/qdirstat/master/screenshots/QDirStat-cleanup-output.png)\n[<img align="top" height="170" src="https://github.com/shundhammer/qdirstat/blob/master/screenshots/QDirStat-column-config.png"  >](https://raw.githubusercontent.com/shundhammer/qdirstat/master/screenshots/QDirStat-column-config.png)\n\n[<img width="900" src="https://github.com/shundhammer/qdirstat/blob/master/screenshots/QDirStat-locating-file-types.png">](https://raw.githubusercontent.com/shundhammer/qdirstat/master/screenshots/QDirStat-locating-file-types.png)\n\n\n[<img align="top" width="220" src="https://github.com/shundhammer/qdirstat/blob/master/screenshots/QDirStat-config-cleanups.png">](https://raw.githubusercontent.com/shundhammer/qdirstat/master/screenshots/QDirStat-config-cleanups.png)\n[<img align="top" width="220" src="https://github.com/shundhammer/qdirstat/blob/master/screenshots/QDirStat-config-mime.png"    >](https://raw.githubusercontent.com/shundhammer/qdirstat/master/screenshots/QDirStat-config-mime.png)\n[<img align="top" width="220" src="https://github.com/shundhammer/qdirstat/blob/master/screenshots/QDirStat-config-exclude.png" >](https://raw.githubusercontent.com/shundhammer/qdirstat/master/screenshots/QDirStat-config-exclude.png)\n[<img align="top" width="220" src="https://github.com/shundhammer/qdirstat/blob/master/screenshots/QDirStat-config-general.png" >](https://raw.githubusercontent.com/shundhammer/qdirstat/master/screenshots/QDirStat-config-general.png)\n\n\n[<img align=top height="300" src="https://raw.githubusercontent.com/shundhammer/qdirstat/master/screenshots/QDirStat-histogram.png"        >](https://raw.githubusercontent.com/shundhammer/qdirstat/master/screenshots/QDirStat-histogram.png)\n[<img align=top height="300" src="https://raw.githubusercontent.com/shundhammer/qdirstat/master/screenshots/QDirStat-histogram-options.png">](https://raw.githubusercontent.com/shundhammer/qdirstat/master/screenshots/QDirStat-histogram-options.png)\n\n[<img height="262" src="https://raw.githubusercontent.com/shundhammer/qdirstat/master/screenshots/QDirStat-stats-help.png">](https://raw.githubusercontent.com/shundhammer/qdirstat/master/screenshots/QDirStat-stats-help.png)\n\n_Full-size images and descriptions on the [Screenshots Page](https://github.com/shundhammer/qdirstat/blob/master/screenshots/Screenshots.md)_\n\n\n-----------------------\n\n## Donate\n\nQDirStat is Free Open Source Software. You are not required to pay anything.\nDonations are most welcome, of course.\n\nDonate via PayPal (freely select the amount to donate):\n\n[![paypal](https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=EYJXAVLGNRR5W)\n\n\n## Latest Stable Release\n\n**QDirStat V1.6**\n\nSee the [release announcement](https://github.com/shundhammer/qdirstat/releases).\n\nDownload installable binary packages for various Linux distributions here:\n[Ready-made packages](#ready-made-packages)\n\n\n## Latest News\n\n- 2019-11-02\n\n  - Added a separate window to report all directories that could not be read\n    (typically because of insufficient permissions). This window is opened only\n    on request: When the user clicks on the "Details..." link in the panel\n    message that reports that some directories could not be read.\n\n    This window is non-modal, i.e. you can still interact with the main window\n    when it is open. Click on any directory that it lists to locate it in the\n    main window.\n\n    [<img src="https://github.com/shundhammer/qdirstat/blob/master/screenshots/QDirStat-unreadable-dirs-window.png" height="300">](https://raw.githubusercontent.com/shundhammer/qdirstat/master/screenshots/QDirStat-unreadable-dirs-window.png)\n  \n  - Directories that could not be read are now also correctly reported in the\n    unpackaged files view. Since they are empty when they could not be read,\n    they will always end up in an `<Ignored>` branch which was previously not\n    taken into account when reporting directories with read errors. This is now\n    fixed.\n\n\n- 2019-08-24\n\n  - If directories could not be read (typically because of insufficient\n    permissions), now also posting a warning message in a new message panel.\n\n    [<img src="https://github.com/shundhammer/qdirstat/blob/master/screenshots/QDirStat-err-dirs-light.png" width="250">](https://raw.githubusercontent.com/shundhammer/qdirstat/master/screenshots/QDirStat-err-dirs-light.png)\n    [<img src="https://github.com/shundhammer/qdirstat/blob/master/screenshots/QDirStat-err-dirs-dark.png" width="250">](https://raw.githubusercontent.com/shundhammer/qdirstat/master/screenshots/QDirStat-err-dirs-dark.png)\n\n    You can close the message with the `[x]` close button on its right side,\n    but you can also simply leave it open. This is a lot less obtrusive than a\n    pop-up dialog, yet less temporary than a message in the bottom status line\n    that will disappear in a few seconds or when anything else is reported.\n\n    The infrastructure for this enables multiple such messages that can be\n    closed in any order (or not at all) as the user likes. Each message can\n    have a "Details..." link (not used in these examples) to provide more\n    information.\n\n\n- 2019-08-22\n\n  - Improved handling for directories that could not be read.\n\n    When you run QDirStat as a normal (non-root) user on system directories, it\n    is very common that you get a "permission denied" error for directories\n    that contain sensitive information. Such a directory gets a folder icon\n    with a little lock to indicate that it\'s locked for you; there is no way to\n    find out how much disk space it consumes.\n\n    Now, such directories are also displayed in a special color (for now bright\n    red) in the tree. All their parents are now displayed in another (slightly\n    less obtrusive) color to indicate that you probably don\'t see the complete\n    disk space information for that subdirectory.\n\n    [<img src="https://github.com/shundhammer/qdirstat/blob/master/screenshots/QDirStat-err-dirs-light.png" width="250">](https://raw.githubusercontent.com/shundhammer/qdirstat/master/screenshots/QDirStat-err-dirs-light.png)\n    [<img src="https://github.com/shundhammer/qdirstat/blob/master/screenshots/QDirStat-err-dirs-dark.png" width="250">](https://raw.githubusercontent.com/shundhammer/qdirstat/master/screenshots/QDirStat-err-dirs-dark.png)\n\n    In those examples, The `/etc/ssl/private` directory does not have read\n    permissions for non-root users; note the icon with the lock and the red\n    text color.\n\n    When you don\'t open that branch in the tree, you might not realize this;\n    it\'s also in the log file, but most users don\'t read that. So its parent\n    directories `/etc/ssl` and `/etc` are also displayed in a different color:\n    Dark red in the light widget theme and yellow in the dark widget theme.\n\n    In addition to that, the parent directories now show a `>` prefix for the\n    size, number of items, number of files, number of subdirs fields to\n    indicate that there may be more. This is a hint (not only, but also) for\n    color blind users.\n\n\n- 2019-08-12\n\n  - Toned down over-information to reduce clutter:\n\n    - No longer showing column "Oldest File" in layout L2 by default.\n\n      Of course, you can always re-enable this if you like:\n      Just switch to layout L2, right-click on the column header to open the\n      column context menu, then "Hidden Columns" -> "Show Column \'Oldest File\'".\n\n    - Removed "Oldest File" from the details panel for directories:\n\n      I found that this does not contribute any useful information here, yet it\n      adds to the screen clutter. Information about the oldest file in a\n      subtree is useful to drill down deeper into the subtree to find it, so\n      the tree view is much better suited for that; having that information in\n      the details panel as well does not add any value for that procedure.\n\n\n- 2019-08-03\n\n  - Fixed text color in histogram in dark widget themes\n    [(GitHub Issue #117)](https://github.com/shundhammer/qdirstat/issues/117).\n\n- 2019-08-01\n\n  - Added a column "Oldest File" that shows the timestamp (the mtime) of the\n    oldest file in a subtree.  This is strictly about files; directories,\n    symlinks and special files (block or character devices, FIFOs etc.) are\n    ignored for this.\n\n    This is the first simple approach for\n    [GitHub Issue #118](https://github.com/shundhammer/qdirstat/issues/118).\n    (Click for screenshot)\n\n    This already helped me to spot some old cruft in my home directory; some\n    dot directories from ancient versions of flashplayer and whatnot. This\n    is more helpful than I initially thought.\n\n  - Added an entry "Oldest File" that does the same in the details panel for\n    directories and packages.\n\n\n- 2019-07-22 **New stable release: V1.6**\n\n  - Performance improvement while reading directories: On average 25% faster on\n    normal (non-SSD) disks\n\n    See also this article: [Linux Disk Usage Tools Compared: QDirStat\n    vs. K4DirStat vs. Baobab vs. Filelight vs. ncdu including\n    benchmarks](https://github.com/shundhammer/qdirstat/issues/97)\n\n\n  - Vast performance improvement for huge directories (with 100.000 entries or\n    more in a single directory) in the tree view: There is now instant response\n    for jumping from the first to the last item, dragging the scroll bar or\n    using the mouse wheel.\n\n  - New **packages view**:\n    QDirStat can now visualize the file lists of installed packages:\n\n    [<img src="https://github.com/shundhammer/qdirstat/blob/master/screenshots/QDirStat-pkg-details.png" height="250">](https://raw.githubusercontent.com/shundhammer/qdirstat/master/screenshots/QDirStat-pkg-details.png)\n\n    I.e. files are now grouped by the package they belong to, and in each\n    subtree only the files that belong to the package are displayed: In this\n    example, in `/usr/bin` only the `chromium-browser` binary is displayed, not\n    all the other files in `/usr/bin`. This is intentional.\n\n    You can display all installed packages with their file lists (but that\n    takes a while), or you can select just a subset. Use Menu _File_ -> _Show\n    Installed Packages_ or start QDirStat with a `pkg:/` command line argument.\n\n    As with the other package manager related features, this is supported for\n    all Linux distributions that use one of _dpkg_, _rpm_ or _pacman_ (or any\n    higher-level package manager based on any of those like _apt_, _zypper_\n    etc.).\n\n    More details at [Pkg-View.md](doc/Pkg-View.md).\n\n\n  - New **unpackaged files view**:\n\n    QDirStat can now visualize the files in system directories that are not\n    packaged, i.e. that are not part of any file list of any installed software\n    package.\n\n    [<img src="https://github.com/shundhammer/qdirstat/blob/master/screenshots/QDirStat-unpkg-usr-share-qt5.png" height="250">](https://raw.githubusercontent.com/shundhammer/qdirstat/master/screenshots/QDirStat-unpkg-usr-share-qt5.png)\n\n    This can be useful to track down problems after package upgrades or after\n    manually installing software with `sudo make install`.\n\n    This is supported for all Linux distributions that use _dpkg_ or _rpm_ (or\n    any higher-level package manager based on any of those like _apt_, _zypper_\n    etc.).\n\n    More details at [Unpkg-View.md](doc/Unpkg-View.md).\n\n\n  - New standard cleanup: _Check File Type_. This uses the `file` command to\n    find out more detailed information what exactly a file is and displays it\n    in the cleanup output window.\n\n    More details, screenshots and how to get it if you already have an existing\n    QDirStat cleanup configuration file (i.e. if you used QDirStat before):\n    [GitHub Issue #102](https://github.com/shundhammer/qdirstat/issues/102).\n\n  - Implemented [GitHub Issue #90](https://github.com/shundhammer/qdirstat/issues/90):\n    Support excluding directories containing a file with a specific name or pattern.\n\n    Similar to some backup tools, you can now specify an exclude rule that lets\n    you exclude a directory that contains a file like `.nobackup` or\n    `.qdirstatexclude`.\n\n  - Greatly improved the man page; see `man 1 qdirstat`.\n\n  - Some bug fixes.\n\n  See also the [release announcement](https://github.com/shundhammer/qdirstat/releases/tag/1.6).\n\n--------------------------------------------------\n\n\n- 2019-07-18\n\n  - Greatly improved the man page; see `man 1 qdirstat`.\n\n    It started with the Debian maintainer of QDirStat asking for a man page\n    because that\'s a standard requirement for Debian packages, and he even\n    wrote the initial one; thanks again, Patrick!.\n\n    That initial man page was very concise, and as QDirStat keeps evolving, not\n    only was there an increasing number of command line options that was not\n    documented in the man page (but of course when invoking the program with\n    the `--help` command line option), but it also didn\'t explain much beyond\n    the command line arguments.\n\n    Now it contains not only the latest set of command line arguments including\n    syntax and meaning of `pkg:/` and `unpkg:/` URLs, but also some general\n    information what the program is (including what the treemap is) and how to\n    use it.\n\n\n- 2019-07-08\n\n  New **unpackaged files view**:\n\n  QDirStat can now visualize the files in system directories that are not\n  packaged, i.e. that are not part of any file list of any installed software\n  package.\n\n  This reads the complete file lists first (i.e. all file lists from all\n  installed packages), then reads the requested directory as usual and puts the\n  files that are packaged in a special branch `<Ignored>` in the tree view.\n\n  Those files are _not_ displayed in the treemap, i.e. the treemap now only\n  contains unpackaged files.\n\n  [<img src="https://github.com/shundhammer/qdirstat/blob/master/screenshots/QDirStat-unpkg-usr-share-qt5.png" height="250">](https://raw.githubusercontent.com/shundhammer/qdirstat/master/screenshots/QDirStat-unpkg-usr-share-qt5.png)\n\n  **What is this Good For?**\n\n  - Recovering a wrecked system after botched upgrades\n\n  - Recovering from too much `sudo make install`\n\n  - Fixing packaging problems, e.g. find leftover shared libs that tend to get in\n    the way\n\n  - QA for distro release managers, QA engineers, PMs\n\n  - Satisfying user curiosity\n\n  - _Because we can!_  ;-)\n\n  More details at [Unpkg-View.md](doc/Unpkg-View.md).\n\n  Comments and questions are welcome at [GitHub Issue #110](https://github.com/shundhammer/qdirstat/issues/110).\n\n  If you have a genuine problem with the new feature, please open a separate\n  issue so it can be tracked properly.\n\n\n\n- 2019-06-16\n\n  - Added [documentation for the _pkg-tools_ scripts](scripts/pkg-tools/README.md).\n\n    In short, they can be used to see unpackaged files on a system that uses\n    one of the supported package managers (_dpkg_, _rpm_, _pacman_), but it\'s a\n    bit of a clunky solution, so this is meant for advanced users only.\n\n    ~~With a little bit of luck, there _may_ be a better solution forthcoming\n    with real integration into QDirStat\'s GUI.~~\n\n    _Update 2019-07-08: This real integration into the GUI is now available._\n\n\n- 2019-05-12\n\n  - New standard cleanup: _Check File Type_. This uses the `file` command to\n    find out more detailed information what exactly a file is and displays it\n    in the normal cleanup output window (the orange text is the interesting\n    part).\n\n    More details and screenshots at [GitHub Issue #102](https://github.com/shundhammer/qdirstat/issues/102).\n    Notice that you can also add this to any older version of QDirStat.\n\n\n- 2019-05-11\n\n  - Implemented the single-command call to get all file lists for all installed\n    packages for _rpm_ as well.\n\n    Now it\'s only _pacman_ that still needs a separate external command for\n    each package. If anybody knows how to do this for _pacman_ as well, please\n    let me know.\n\n  - Another drastic performance improvement in the packages view:\n\n    Now down to **6.5 seconds** on my system from initially 180 seconds for\n    getting all file lists for all 2400 installed packages.\n\n    | sec   |  Version   | Description                                                         |\n    |------:|------------|---------------------------------------------------------------------|\n    | 180.0 | ce3e793298 | First pkg view; sequential separate `dpkg -L` calls                 |\n    |  53.4 | 68038f0525 | Separate `dpkg -L` calls in multiple background processes           |\n    |  38.5 | ce54879a48 | Single `dpkg -S "*"` call to get all file lists for all pkg at once |\n    |  37.7 | 45b0a7a941 | Use cache for `lstat()` syscalls                                    |\n    |  24.6 | c50e9a7686 | Use slower update timer for tree view while reading                 |\n    |   6.5 | a1043a20fb | Keep tree collapsed during reading                                  |\n\n    (Much) more details at [GitHub Issue #101](https://github.com/shundhammer/qdirstat/issues/101).\n\n\n- 2019-05-10\n\n  Drastic performance improvements in the packages view:\n\n  - When reading many (configurable; right now 200) package lists, QDirStat no\n    longer fires off a separate background process (6 in parallel at any given\n    time) for each external command (`dpkg-query --listfiles` or `rpm -ql` or\n    `pacman -Qlp`) and collects their output.\n\n    Rather, it now tries to use a single external command that can return all\n    file lists for all packages at once. It builds a cache from that and uses\n    it to build the internal tree as it processes the read jobs for each\n    package one by one.\n\n    Right now this works for _dpkg_ (`dpkg -S "*"`). Experiments show that it\n    will also work for _rpm_ (that\'s on the _to do_ list).\n\n    But there does not seem to be an equivalent command for _pacman_; it looks\n    as if _pacman_ can only return a file list for a single package or a list\n    of all installed packages, but without any reference what package each file\n    in that list belongs to. _If anybody knows, please contact me._\n\n  - Now caching the result of `lstat()` syscalls for directories in the package\n    view since most packages share common system directories like `/usr`,\n    `/usr/bin`, `/usr/share` etc.; `lstat()` is an expensive affair, and even\n    just avoiding to switch from user space to kernel space and back that often\n    is a speed improvement.\n\n  - Reduced the display update inverval in the packages view. While reading\n    package information, there is not all that much to see anyway. Yet\n    constantly recalculating the column widths to make sure they fit their\n    content is expensive. This is now done just every 5 seconds, not 3 times a\n    second.\n\n    There is even a noticeable difference when using the L1 layout and a\n    smaller window size so there is less content to take care of.\n\n  The net effect of all this performance tuning is that on my machine (Xubuntu\n  18.04 LTS (i.e. _dpkg_) with ~2400 packages) reading all packages with all\n  their file lists is now down to under 30 seconds from formerly 90 to 120 (it\n  varied wildly).\n\n\n- 2019-05-09\n\n  - Now no longer showing a directory\'s own size (the size of the directory\n    node, not of any file contained in the directory) in the packages view:\n    This distorted both the treemap and the total sums. Directories are\n    typically shared between a lot of packages, so it does not make very much\n    sense to add the size of a very common directory like /usr/bin or /usr/lib\n    to the total size of each package that owns a file in any of them, thus\n    accounting for those directories many times. On my system, /usr/bin is\n    shared between 454 packages, so its 68 kB would be added up 454 times, thus\n    adding up to 30 MB.\n\n    In the treemap that meant that packages that install only one or two very\n    small files (symlinks!) to a very common directory would show a lot of\n    empty space; the 56 byte (or so) symlink would be completely dwarfed by the\n    directory it is in, even if the directory only has 4 kB. A lot of such lone\n    small files each in a separate directory meant a whole lot of empty space\n    in the treemap, thus making packages very hard to compare against each\n    other.\n\n    Of course this means that the size of the directory nodes is now completely\n    missing in the toplevel total sum (the Pkg:/ node in the tree), but that is\n    much less distorting than multiplying each of those directory node sizes by\n    the number of packages that have files in each of them.\n\n  - No longer regarding the directory\'s own mtime (modification time) in the\n    packages view: The latest overall mtime in a subtree cascades upward, so\n    any change in any subtree would affect the latest mtime in the higher tree\n    levels. But if that change was caused by something outside of the current\n    view, this is irrelevant. So if you want to know the latest mtime anywhere\n    in package _foo_ which includes the /usr/bin/foo command, it is irrelevant\n    if one hour ago you installed or updated some other package which also\n    installed some other commands to /usr/bin; you don\'t want that latest mtime\n    of the /usr/bin directory to affect the display of every package that has a\n    file in /usr/bin.\n\n\n- 2019-05-04\n\n  New **packages view**:\n  QDirStat can now visualize the file lists of installed packages:\n\n  [<img src="https://github.com/shundhammer/qdirstat/blob/master/screenshots/QDirStat-pkg-details.png" height="250">](https://raw.githubusercontent.com/shundhammer/qdirstat/master/screenshots/QDirStat-pkg-details.png)\n\n  I.e. files are now grouped by the package they belong to, and in each subtree\n  only the files that belong to the package are displayed: In this example, in\n  `/usr/bin` only the `chromium-browser` binary is displayed, not all the other\n  files in `/usr/bin`. This is intentional.\n\n  You can display all installed packages with their file lists (but that takes\n  a while), or you can select just a subset. Use Menu _File_ -> _Show Installed\n  Packages_ or start QDirStat with a `pkg:/` command line argument.\n\n  As with the other package manager related features, this is supported for all\n  Linux distributions that use one of _dpkg_, _rpm_ or _pacman_ (or any\n  higher-level package manager based on any of those like _apt_, _zypper_ etc.).\n\n  More details at [Pkg-View.md](doc/Pkg-View.md).\n\n  Comments and questions are welcome at [GitHub Issue #100](https://github.com/shundhammer/qdirstat/issues/100).\n\n  If you have a genuine problem with the new feature, please open a separate\n  issue so it can be tracked properly.\n\n\n- 2019-04-12\n\n  - **Performance improvement** while reading directories: **25% faster** on my\n    /work directory with an ext4 filesystem with 230 GB / 216k items on a\n    rotational (non-SSD) disk; with cleared caches now 24.5 sec average\n    compared to previously 32.5 sec average (with filled caches down to 1.5\n    from previously 2.0 sec).\n\n    It now uses `fstatat()` (instead of `lstat()`) which accepts the file\n    descriptor of an open directory, so glibc and the kernel save the time\n    previously needed for parsing the path and locating the directory; that\n    part will also bring some speed improvement for SSDs.\n\n    In addition to that, the entries for each directory are now sorted by i-no\n    before calling `fstatat()` so the kernel can now read the i-nodes on disk\n    in sequential order, thus saving disk seek times. SSD users will not\n    benefit from that since there are no disk seek times on an SSD.\n\n  - Now using the name as the secondary sort field in the tree view if the\n    primary sort field (usually the size) is equal for two items.\n\n  - Vast performance improvement for huge directories (with 100.000 entries or\n    more in a single directory) in the tree view: There is now instant response\n    for jumping from the first to the last item, dragging the scroll bar or\n    using the mouse wheel.\n\n    It had turned out that by default the underlying QTreeView widget queries\n    each item in turn how tall it wants to become (using the `sizeHint()`)\n    which in turn had to query the font for each one for its metrics.\n\n    QDirStat now sets the QTreeView\'s `uniformRowHeights` flag to indicate that\n    all rows have the same height, so this only needs to be done for the first\n    one, and the result is simply multiplied by the number of items.\n\n    Amazingly enough it was not sorting the items (which is what comes to mind\n    when there is such a performance bottleneck), no, it was someting as\n    mundane as the widget having to figure out the proportions of its scroll\n    bar slider vs. the scroll bar overall length. And for that, it needs to\n    know the number of items (which is simple) and the height of each one\n    (which was not).\n\n    The reason why the widget does that is because each item might have a\n    different font or a different icon, and then each item might have a\n    different height. That `uniformRowHeights` flag tells it that this is not\n    the case.\n\n\n- 2019-04-06\n\n  - New article _Linux Disk Usage Tools Compared: QDirStat vs. K4DirStat\n    vs. Baobab vs. Filelight vs. ncdu_ including benchmarks:\n    [GitHub Issue #97](https://github.com/shundhammer/qdirstat/issues/97)\n\n    (written in the GitHub issue tracker so users can join the discussion)\n\n\n- 2019-04-05\n\n  - Performance boost for huge directories (with 100.000 entries or more in a single\n    directory):\n\n    A routine that counts the direct children of a directory now uses a cached\n    value for each directory so it does not have to be recalculated over and\n    over again even if nothing changed. Amazingly enough, this little thing had\n    turned out to be the performance bottleneck that had made QDirStat\n    prohibitively slow for such directories. It was not the sorting of the\n    entries (the sort order was always cached), no, the problem was something\n    as trivial as counting the children on the current level of the tree view.\n\n    Of course, a directory that contains 100.000 entries in a single level\n    still has quite some performance impact, but at least now it\'s\n    tolerable. This was tested with up to 500.000 entries in a single directory\n    (there is now a script that can create such a directory in the test/util\n    directory of the source tree).\n\n    Hint: Avoid dragging the vertical scroll bar of the tree view in such a\n    directory; better use keyboard commands such as the _Home_ or the _End_\n    key. The scroll bar will make the underlying Qt widget go through every\n    single entry in turn, and that will take a while (it will eventually become\n    responsive again, though).\n\n    _Update 2019-04-12: This is now no longer an issue; using\n    `uniformRowHeights` fixed that._\n\n\n  - Implemented [GitHub Issue #90](https://github.com/shundhammer/qdirstat/issues/90):\n    Support excluding directories containing a file with a specific name or pattern.\n\n    Similar to some backup tools, you can now specify an exclude rule that lets\n    you exclude a directory that contains a file like `.nobackup` or\n    `.qdirstatexclude`. The exclude rule configuration now has a new option for\n    that:\n\n    [<img width="300" src="https://github.com/shundhammer/qdirstat/blob/master/screenshots/QDirStat-config-exclude.png" >](https://raw.githubusercontent.com/shundhammer/qdirstat/master/screenshots/QDirStat-config-exclude.png)\n\n    This makes it possible to reuse such files that are there anyway for some\n    other tool and get a good idea how large the resulting backup will become.\n\n    Since this change required some refactoring in a quite sensitive part\n    (reading the directories), please watch out for possible bugs that this might\n    have introduced and report it if you find something.\n\n\n- 2018-11-07 **New stable release: V1.5**\n\n\n_See [DevHistory.md](doc/DevHistory.md)\nfor older entries._\n\n\n## History\n\n\nThis is just a rough summary. For more details, see [DevHistory.md](doc/DevHistory.md)\n\n- 2018-11-07 New stable release: V1.5\n\n- 2017-06-04 New stable release: V1.4\n\n- 2017-03-05 New stable release: V1.3\n\n- 2017-01-03 New stable release: V1.2\n\n- 2016-10-31 New stable release: V1.1-Pumpkin\n\n- 2016-05-16 First stable release: V1.0\n\n- 2016-04-08 Beta 3 release\n\n- 2016-03-20 Beta 2 release\n\n- 2016-02-06 Beta 1 release\n\n- 2015-11-28 QDirStat project start: Ported from the old KDE 3 KDirStat\n\n- Predecessor: KDE 3 **KDirStat**\n\n  - 2006-06-01 KDirStat 2.5.3: The last KDE3 based version.\n\n  - 2003: Bernhard Seifert wrote **WinDirStat** based on the KDirStat idea of\n    coupling a tree view and a treemap and providing cleanup actions.\n\n  - 2003-01-05 KDirStat 2.3.3: Treemaps\n\n  - 2002-02-25 KDirStat 2.0.0: Complete rewrite for KDE 2 / Qt 2\n\n  - 2000-01-21 KDirStat 0.86 for KDE 1 announced: First public version.\n\n\n## Related Software\n\n### WinDirStat and QDirStat\n\nI keep reading articles and user forum comments about QDirStat being a "nice\nLinux port of WinDirStat". Well, nothing could be further from the truth:\n**WinDirStat is a Windows port of KDirStat**, the predecessor of QDirStat.\n\nSo it\'s the other way round: **The Linux version was there first**, and\nsomebody liked it so much that he wrote a Windows version based on that\nidea. That\'s a rare thing; usually people port Windows originals to Linux.\n\nSee also https://windirstat.net/background.html and the WinDirStat "About"\ndialog.\n\n\n\n### QDirStat and K4DirStat\n\nK4DirStat is a port to KDE 4 / Qt 4 of my old KDE 3 / Qt 3 KDirStat. QDirStat is\nindependent of that; it is based on the old KDE 3 KDirStat directly.\n\n\n### Other\n\n- Baobab\n- Filelight\n- ncdu\n- du\n\nSee\n[Disk Usage Tools Compared](https://github.com/shundhammer/qdirstat/wiki/disk-usage-tools-compared):\nQDirStat vs. K4DirStat vs. Baobab vs. Filelight vs. ncdu (including benchmarks)\nin the Wiki.\n\n\n## Motivation / Rant\n\nAfter having used KDE since its early days (since about 1998), I didn\'t like\nthe direction anymore that KDE has been taking. I loved KDE 1, KDE 2, KDE\n3. When KDE 4 came along, it took me a long time to try to adopt it, and when I\ndid, I moved back to KDE 3 after a short while, then tried again with the next\nrelease, moved back again -- several times.\n\nI really tried to like it, but whenever I thought I tamed it to meet my\nrequirements, a new version came along that introduced yet another annoyance.\n\nTo name a few:\n\n- A lot of things that used to be user configurable in KDE 3 are not\n  configurable anymore, and when you approach the KDE 4/5 developers about\n  that, they will tell you that this is intentional, and they do not intend to\n  bring those config options back. Well, thanks a lot; this is the Apple\n  approach where they think they know what is good for you, and you are just\n  too stupid.\n\n- Konqueror as the old central tool is as good as dead. It\'s still there as an\n  alternate file manager (for those who find it), but the primary one is the\n  dumbed-down Dolphin that I consider unusable: It\'s only useful for complete\n  newbies, not for power users. The web browser part of Konqueror is so\n  outdated that you can\'t do much with it with most modern web sites, so the\n  great integration of web and local file manager that was the major strong\n  point of Konqueror (and thus KDE) no longer exists.\n\n- I don\'t like the fact that I can\'t simply put icons on my desktop anymore --\n  no, I have to create a plasmoid first as a container, and those things keep\n  doing weird stuff that drives every user crazy. With one false move of your\n  mouse, it might be gone, change shape, move to another place or whatever.\n\n- I also don\'t like the desktop search that eats resources like there is no\n  tomorrow (disk space, disk I/O, CPU usage) and that for all practical\n  purposes you can\'t get rid of.\n\n- I don\'t like the fact that the mail client relies on that MySQL based\n  framework called _Akonadi_ that is not only resource-hungry, but also so\n  fragile that I had to use the _akonadiconsole_ lots of times just to bring it\n  back to life. Seriously, if I as a Linux system developer have a hard time\n  doing that, what is a normal user expected to do?\n\n- Activities vs. multiple desktops. I tried to use both, but they don\'t\n  integrate well. The desktops previewer is far inferior to the old one from\n  KDE3: Only monochrome rectangles, no real preview. The activities plasmoid\n  keeps rearranging my carefully placed and named activities at random. WTF?!\n\n- Everything is so fragmented that not even the naming is clear anymore. What\n  used to be KDE is now a jumble of the KF Framework, the KF libs, the KF apps\n  and the Plasma desktop. Yeah, great job, folks; people used to know what KDE\n  stood for. Nobody knows what the hell all those components are, and neither\n  does anybody care anymore. You paved your way to oblivion with buzzwords.\n  Great marketing strategy for gaining more visibility!\n\nThen the next generation KDE arrived, _Plasma 5_. When I was force-migrated to\nit at work with the _SUSE Tumbleweed_ rolling release, the experience was so\nbad that I moved to the _Xfce_ Desktop.\n\nNow every time I started my own KDirStat, it started about a dozen KDE\nprocesses along with it -- processes that it needs only for minor things like\nloading icons or translations. I really don\'t need or want that.\n\nSo it was time to make KDirStat self-sufficient; it never used that much of all\nthe KDE infrastructure anyway. Time to make a pure Qt-based and self-sufficient\nQDirStat.\n\nAnd while I was at it, I took the chance to add some features that I had wanted\nfor a long time, yet I had never gotten myself to start working on:\n\n- Multi-selection in the directory tree so you can delete several files at\n  once.\n\n- Remove limitations like having only a fixed number of user-defined cleanup\n  actions.\n\n- Properly show the output of cleanup actions, in particular when they reported\n  errors.\n\n- Make treemap colors configurable: Use custom colors and match them to\n  user-defined filename extensions.\n\n- Move away from the arcane KDE build system: Back with KDE 1/2/3 it was the\n  _Autotools_ with custom KDE extensions that only a handful people in the\n  world really understood (I was not among them), later _CMake_ which is little\n  better, just differently confusing.\n\nYes, there is a Qt4 / Qt5 port of KDirStat called K4DirStat. K4DirStat is an\nindependent project that started when I had not worked on the old KDirStat for\na long time (my last KDirStat release had been in mid-2006).\n\nQDirStat is based on that same code from the 2006 KDirStat. It\'s an 80% rewrite\nusing a lot of newer Qt technologies. And there was a lot of cleaning up that\nold code base that had been long overdue.\n\n\n\n## Features\n\n### New Features\n\n- Multi-selection:\n\n  - Both views (the tree and the treemap) now support _extended_ selection,\n    i.e. you can select more than one item. This was the most requested feature\n    for the last KDirStat. Now you can select more than one item at the same\n    time to move it to the trash can, to directly delete it or whatever.\n\n  - Tree view:\n    - Shift-click: Select a range of items.\n    - Ctrl-Click:  Select an additional item or deselect a selected one.\n\n  - Treemap:\n    - Ctrl-Click:  Select an additional item or deselect a selected one.\n\n    - The current item is highlighted with a red rectangle, all other selected\n      ones with a yellow rectangle. If the current item is not also selected,\n      it has a dotted red outline.\n\n- Proper output of cleanup actions with different colors for the commands that\n  are executed, for their output and for error messages (see screenshot\n  above). That output window can be configured to always open, to open after a\n  certain (configurable) timeout, or only if there are error mesages -- or not\n  at all, of course. If things go wrong, you can kill the external command\n  started by the cleanup action from there. You can zoom in and out (increase\n  or decrease the font size) as you like.\n\n- File type statistics window. WinDirStat has it, and users wanted it in\n  QDirStat, too. Since filename extensions (suffixes) don\'t have as much\n  semantics in Linux/Unix systems as they do in Windows, many files are\n  categorized as "Other". This is a known limitation, but it\'s a limitation of\n  the whole concept of using suffixes to categorize files by type. And no,\n  checking file headers for magic byte sequences like the "file" command does\n  is not an option here; QDirStat would have to do that for (at least) all the\n  30,000+ files typically listed under the "Other" category. So we\'ll have to\n  live with that limitation.\n\n- Locate files by file type window. If you double-click on any of the filename\n  extensions (suffixes) in the file type statistics window, you will get\n  another window that lists all the directories that contain files of that type\n  including the number and total size of those files. You can double-click each\n  of those lines, and that directory will open in the main window with the\n  files of that type preselected so you can start cleanup actions like moving\n  them to trash or converting them to a better format (.bmp -> .png)\n  immediately.\n\n- File size statistics window with histogram, percentiles, buckets and a lot of\n  documentation that everybody should be able to understand. Even if (or,\n  better yet, in particular if) your math teacher or statistics professor never\n  explained it properly, please have a lot at it.\n\n- Packages view: Show installed packages and their files in the tree. Supported\n  for all Linux distributions using any of _dpkg_, _rpm_, _pacman_ as their\n  low-level package manager or any higher-level package manager like _apt_,\n  _zypper_ etc.; more details at [Pkg-View.md](doc/Pkg-View.md).\n\n- Unpackaged files view: Show a directory tree, but ignore all files that\n  belong to an installed software package. Those ignored files are displayed in\n  a special branch _<Ignored>_ in the tree view, and they are not displayed at\n  all in the treemap. This may be useful to find files that were manually\n  installed by a `sudo make install` command. More details at\n  [Unpkg-View.md](doc/Unpkg-View.md).\n\n- New macros to use in cleanup actions:\n\n  - %d : Directory name with full path. For directories, this is the same as\n    %p. For files, this is their parent directory\'s %p.\n\n  - %terminal : Terminal window application of the current desktop; one of\n    "konsole", "gnome-terminal", "xfce4-terminal", "lxterminal", "eterm".\n    The fallback is "xterm".\n\n  - %filemanager : File manager application of the current desktop; one of\n    "konqueror", "nautilus", "thunar", "pcmanfm". The fallback is "xdg-open".\n\n- Which desktop is used is determined by the _$XDG_CURRENT_DESKTOP_ environment\n  variable. Users can override this with the _$QDIRSTAT_DESKTOP_ environment\n  variable, so you can get, say, the Xfce terminal or file manager despite\n  currently running KDE if you set\n\n      export QDIRSTAT_DESKTOP="Xfce"\n\n- Of course, you can still simply use your favourite file manager if you simply\n  change %filemanager in the default "Open File Manager Here" cleanup action to\n  the command to start it.\n\n- You can now select the shell to use for the cleanup commands:\n\n  - $SHELL (the user\'s login shell) - using the same environment, syntax and\n    wildcard etc. behaviour of the shell the user is used to.\n  - /bin/bash for well-defined behaviour for wildcards etc.\n  - /bin/sh as a last resort (which might be a simplistic _dash_ on Ubuntu).\n\n- Mouse actions in the treemap window:\n\n    - Left click:           Select item and make it the current item.\n    - Right click:          Open the context menu with cleanup actions and more.\n    - Ctrl+Left click:      Add item to selection or toggle selection.\n    - Middle click:         Select the current item\'s parent. Cycle back at toplevel.\n    - Double click left:    Zoom treemap in.\n    - Double click middle:  Zoom treemap out.\n    - Mouse wheel:          Zoom treemap in or out.\n\n- You can configure what columns to display in the tree view and in which\n  order. The only thing that is fixed is the "Name" column which is always\n  there and always the first (leftmost). Use the context menu in the tree\n  header to unlock column widths. Drag columns to the left or right to change\n  their order.\n\n- Exclude rules are now greatly simplified. They no longer always get the\n  entire path to match which requires quite complex regexps; by default, they\n  only get the last path component -- i.e., no longer\n  "/work/home/sh/src/qdirstat/src/.git", but only ".git". You can now even tell\n  the exclude rule to use a simplified syntax: "FixedString" or "Wildcard" in\n  addition to the normal "RegExp". The old behaviour (matching against the full\n  path) is still available, though.\n\n- Configuration dialog for exclude rules -- see screenshots.\n\n- Subvolume detection for Btrfs. Btrfs subvolumes are just ordinary mount\n  points, so normally QDirStat would stop scanning there, leaving a large part\n  of a Btrfs partition unaccounted for. But for each mount point found while\n  scanning a directory tree, QDirStat checks /proc/mounts or /etc/mtab if it\n  has the same device name as its parent directory, and if yes, considers it a\n  subvolume and continues scanning.\n\n- Actions to go one directory level higher or to the toplevel: Context menu and\n  menu "Go To" -> "Up One Level" or "Toplevel". This is useful if you clicked\n  on a file in the treemap that is deep down in some subdirectory, and you want\n  to know what subdirectory that is: Simply click "Go Up" twice (the first\n  click will get you to the <Files> pseudo subdirectory, the second one to the\n  real one).\n\n- Open all tree branches up to a certain level and close all other ones: Menu\n  "View" -> "Expand Tree To Level" -> "Level 0" ... "Level 9".\n\n- The total sum of the selected items (subtrees) is displayed in the status\n  line if more than one item is selected.\n\n- Icons are now compiled into the source thanks to Qt\'s resource system; now\n  it\'s just one binary file, and nothing will go missing. No more dozens of\n  little files to handle.\n\n- The build system is now Qt\'s _QMake_. I got rid of that _AutoTools_\n  (Automake, Autoconf, Libtool) stuff that most developers find intimidating\n  with its crude M4 macro processor syntax. QMake .pro files are so much\n  simpler, and they do the job just as well. And no, it will definitely never\n  be _CMake_: I don\'t like that thing at all. It\'s just as much as a PITA as\n  the AutoTools, just not as portable, no usable documentation, it\'s changing\n  all the time, and those out-of-source builds are a royal PITA all on their\n  own with constantly having to change back and forth between source and build\n  directories.\n\n- QDirStat now has its own log file. It now logs to\n  `/tmp/qdirstat-$USER/qdirstat.log` (where $USER is your Linux user name).\n  No more messages on stdout that either clobber the shell you started the\n  program from or that simply go missing.\n\n- No longer depending on dozens of KDE libs and a lot of KDE infrastructure; it\n  now only requires Qt which is typically installed anyway on a Linux / BSD /\n  Unix machine with any X11 (graphical) desktop.\n\n- It should still compile and work with Qt4. We now have a contributor who is\n  very interested in that (Michael Matz), so it should be possible to maintain\n  this compatibility.\n\n- Slow down display update from 333 millisec (default) to 3 sec (default) with\n  `qdirstat --slow-update` or `qdirstat -s`. The slow update interval can be\n  customized in `~/.config/QDirStat/QDirStat.conf`:\n\n    ```\n    [DirectoryTree]\n    SlowUpdateMillisec = 3000\n    ```\n\n\n\n### Old Features\n\nFeatures ported from the old KDirStat:\n\n- Fast and efficient directory reading.\n\n- Not crossing file system boundaries by default so you can see what eats up\n  all the disk space on your root file system without getting distorted numbers\n  due to all the other file systems that are mounted there. If you absolutely\n  wish, you can use "Continue reading at mount point" from the context menu or\n  from the "File" menu -- or configure QDirStat to always read across file\n  systems.\n\n- Efficent memory usage. A modern Linux root file system has well over 500,000\n  objects (files, directories, symlinks, ...) and well over 40,000\n  directories. This calls for minimalistic C++ objects to represent each one of\n  them. QDirStat / KDirStat do their best to minimize that memory footprint.\n\n- Hierarchical tree view that displays accumulated sums in each branch,\n  together with a percent bar so you can see at a glimpse how the\n  subdirectories compare with each other.\n\n- All numbers displayed human readable -- e.g., 34.4 MB instead of 36116381\n  Bytes.\n\n- Each tree level uses another color for that percent bar so you can easily\n  compare subdirectories even if some of them are opened in the tree.\n\n- If a directory has files and subdirectories, all files in that subdirectory\n  are grouped into a <Files> pseudo directory (called _dot entry_ in the\n  QDirStat sources) so you can compare the disk usage of files on that\n  directory level with the subdirectories.\n\n- Displaying the latest modification time of any object in each branch. You can\n  instantly see in what subdirectory where any changes lately. You can sort by\n  this column, of course.\n\n- Treemap display. Treemaps are a way to visualize hierarchical data\n  structures, invented by Ben Shneiderman. Basically, the hierarchy is\n  flattened and each level grouped in a rectangle, inside which it is again\n  subdivided in rectangles. The area of each rectangle corresponds to the size\n  of each item or subdirectory. For the purposes of QDirStat, it is enough to\n  know that a large blob corresponds to a large file; you can instantly see\n  where large ISOs or movies are.\n\n- You can zoom the treemap in and out (Ctrl + / Ctrl - / mouse wheel / menu /\n  tool bar) to see more details of directories that are otherwise dominated by\n  larger ones.\n\n- You can move the boundary between treemap and tree view up and down as you\n  like. You can also get rid of the treemap completely (menu "Treemap" -> "Show\n  Treemap" or F9 key)\n\n- Treemap and tree list view communicate. Select an item in one view, and it is\n  also selected in the other. If you click on that large blob in the treemap,\n  it is located in the tree view, all branches up to its directory are opened,\n  and the tree view scrolls to that item.\n\n- Cleanup actions. Once you know what is consuming the disk space, you can\n  start cleanup actions from within QDirStat to reclaim disk space - or to\n  investigate further if you can safely delete a file. You can create your own\n  cleanup actions (as many as you like), and there are some predefined ones:\n\n  - Open file manager here. This will start a file manager in the directory of\n    the current item. QDirStat tries its best to guess the name of the relevant\n    file manager application for the current desktop, based on the\n    $XDG_CURRENT_DESKTOP environment variable. You can override this with the\n    $QDIRSTAT_DESKTOP environment variable.\n\n  - Open terminal window here. In most cases, this is much easier than to\n    navigate to that directory with \'cd\' in an already open terminal window and\n    using tab-completion numerous times. As with the file manager application,\n    QDirStat tries its best to guess the name of the relevant terminal window\n    application for the current desktop.\n\n  - Move to trash bin. QDirStat has its own implementation of the XDG trash\n    specification.\n\n  - Delete immediately.\n\n  - Compress: Create a compressed tar archive from a directory and then delete\n    the directory.\n\n  - Delete junk files: Backup files left behind by editors, core dumps.\n\n  - All predefined cleanup actions are fully configurable, of course. You can\n    change any of them, disable them, or delete them.\n\n- You can copy the complete path of the selected file or directory to the\n  system clipboard and paste it to another application.\n\n- Reading and writing cache files:\n\n  - This is mostly meant for remote servers in some server room somewhere:\n    Rather than installing the Qt and X11 runtime environment and running\n    QDirStat over remote X (ssh with X forwarding), you can run the supplied\n    _qdirstat-cache-writer_ Perl script on the server, copy the resulting cache\n    file to your desktop machine and view the content there with QDirStat.\n\n  - For large directories (archives etc.) that don\'t change that much, you can\n    also generate a QDirStat cache file (either with the Perl script or with\n    QDirStat itself) and save it to that corresponding directory. If QDirStat\n    finds a file .qdirstat.cache.gz in a directory, it checks if the toplevel\n    directory in that cache file is the same as the current directory, and if\n    it is, it uses the cache file for that directory rather than reading all\n    subdirectories from disk. If you or the users of that machine use QDirStat\n    often, this might take a lot of I/O load from the server.\n\n  - If you use the \'-l\' option of the qdirstat-cache-writer script, it uses the\n    long file format with a complete path for each entry, so you can use the\n    _zgrep_ command with it as a replacement for the _locate_ command.\n\n  - The KDirStat / QDirStat file format is well documented and very simple. It\n    seems to be used by a number of admins and some backup software.\n    See also the specification in the doc/ directory:\n    https://github.com/shundhammer/qdirstat/blob/master/doc/cache-file-format.txt\n\n  - You can specify a cache file to read directly at the command line:\n\n    ```\n    qdirstat --cache cache-file\n    ```\n\n- Other command line options: See\n    ```\n    qdirstat --help\n    ```\n\n\n### Features that are Gone\n\n(Compared to the old KDirStat)\n\n- Pacman animation\n- KIO slave support\n- Feedback form\n\n<details>\n\n- KPacman: That was that PacMan animation wile reading directory reading. This\n  is gone now. KPacMan looked out of place pretty soon after it got to KDirStat\n  due to Qt styles doing fancy rendering of widget backgrounds with gradients\n  etc.  I know that it does have its fans, but it\'s unrealistic to get this\n  back without breaking the menu bar rendering.\n\n- KioDirReadJob: Network-transparent directory reading for network protocols\n  like FTP, HTTP, Fish (ssh-based). This depended on KDE\'s KIO slaves, so this\n  functionality is gone now without KDE. That\'s a pity, but this is a little\n  price to be paid to avoid the rest of the hassle with using the KDE libs.\n\n- KFeedback: That was that form where users could tell their opinion about\n  KDirstat. But that was not used that often anyway - not nearly enough to\n  justify the effort that has gone into that part. And the KDE usability\n  people, like usability people generally tend to do, first discussed that to\n  death and then decided they didn\'t want anything like that in general in KDE\n  applications. So be it.\n\n- KActivityTracker: That was a supporting class for KFeedback that kept track\n  of how much a user was using the program and after a while (when it was\n  determined that it made sense) asked if the user wouldn\'t like to give his\n  feedback about the program.\n  Don\'t you all just hate those dumbass web designers who tell you to do a\n  survey how much you like their grand web page before you even had a chance to\n  look at it? Shove a pop-up up your face covering the stuff you are\n  interesting in with their self-loving marketing bullshit? -- KActivityTracker\n  was made to avoid exactly this: Ask the user only once you know that he\n  actually used the program for a while.\n\n</details>\n\n\n\n## MacOS X Compatibility\n\n<summary>\nThere is some experimental support for MacOS X, but it\'s really only that: Experimental.\n</summary>\n<details>\n\nI was amazed to find that it doesn\'t take more than the normal "qmake" and then\n"make" to build QDirStat for MacOS X. We (Sonja Krause-Harder and I) did some\nbasic testing, and it seems to work.\n\nThe cleanups may need some adaptation, but this is something that might even be\nconfigured by the user.\n\nIf anybody wants to give it a try, download Qt for MacOS X, install it, open a\nshell window, search the _qmake_ command:\n\n    find . -name qmake\n\nAdd this to your $PATH, then do the normal\n\n    qmake\n    make\n\nNot sure how well "make install" works, though.\n\n**_Be advised that QDirStat on MacOS X is purely experimental at this stage._**\n\nThere is no support. If you try this, you are on your own. Even more so than\nwith the other platforms, you will have to make sure that your Qt build\nenvironment is set up correctly.\n\n</details>\n\n_There be dragons._ ;-)\n\n\n### Architecture maintainer wanted for QDirStat for MacOS X\n\nIf you are a developer with some prior C++ and Qt knowledge on the MacOS X\nplatform and you\'d like to see QDirStat working there, please consider joining\nthe team.\n\n\n## Windows Compatibility\n\nNone for the forseeable future. Use [WinDirStat](https://windirstat.info/).\n\n<details>\nDirectory reading might be quite easy to replace for Windows; we don\'t have\nthat problem with devices and crossing filesystems on that platform.\n\nBut the cleanups might be a challenge, "move to trash" works completely\ndifferently, and we\'d need an installer for a Windows version.\n\nSo, for the time being, use [WinDirStat](https://windirstat.info/) instead.\nWinDirStat is a close relative to the KDirStat family anyway; the author had\nliked KDirStat on Linux so much that he decided to write a Windows clone and\ncalled it WinDirStat.\n</details>\n\n\n## Ready-made Packages\n\n[![Packaging status](https://repology.org/badge/tiny-repos/qdirstat.svg)](https://repology.org/metapackage/qdirstat/versions)\n\n\n### openSUSE / SUSE Linux Enterprise\n\nQDirStat packages for openSUSE Tumbleweed / Leap (15.x, 42.x) and SLE (15, 12):\n\n- Download page for the [**latest stable release**](https://software.opensuse.org/download/package?project=home:shundhammer:qdirstat-stable&package=qdirstat)\n\n- Download page for the [**current development version** (git master)](https://software.opensuse.org/download/package?project=home:shundhammer:qdirstat-git&package=qdirstat)\n\n  Since this version is in development, it may be not quite as stable and\n  reliable as the latest official stable release, although the QDirStat\n  developers try their best to keep it as stable as possible.\n\n\n### Ubuntu\n\n- Recent releases (Artful Aardvark (17.10) or later):\n\n  https://packages.ubuntu.com/search?keywords=qdirstat&searchon=names\n\n- Older releases (Pre-17.10):\n\n  Use Nathan Rennie-Waldock\'s\n  [**QDirStat PPA**](https://launchpad.net/~nathan-renniewaldock/+archive/ubuntu/qdirstat)\n\n\n\n### Debian\n\nhttps://packages.debian.org/search?keywords=qdirstat\n\n\n### Fedora\n\nhttps://apps.fedoraproject.org/packages/qdirstat/builds/\n\n\n## Building\n\n### Build Environment\n\nMake sure you have a working Qt 5 build environment installed. This includes:\n\n- C++ compiler (gcc recommended)\n- Qt 5 runtime environment\n- Qt 5 header files\n- libz (compression lib) runtime and header file\n\nIf anything doesn\'t work, first of all **make sure you can build any of the\nsimple examples supplied with Qt**, e.g. the\n[calculator example](http://doc.qt.io/qt-5/qtwidgets-widgets-calculator-example.html).\n\n\n#### Ubuntu\n\nInstall the required packages for building:\n\n    sudo apt-get install build-essential qtbase5-dev zlib1g-dev\n\nDependent packages will be added automatically.\n\nRecommended packages for developers:\n\n    sudo apt-get install qttools5-dev-tools qtbase5-doc qtbase5-doc-html qtbase5-examples\n\nSee also\n\nhttp://askubuntu.com/questions/508503/whats-the-development-package-for-qt5-in-14-04\n\nIf you also have a Qt4 development environment installed, select the desired\none via _qtchooser_:\n\n    sudo apt-get install qtchooser\n    export QT_SELECT="qt5"\n\n\n#### SUSE\n\nInstall the required packages for building:\n\n    sudo zypper install -t pattern devel_C_C++\n    sudo zypper install libQt5Widgets-devel libqt5-qttools zlib-devel\n\nIf you also have a Qt4 development environment installed, make sure that the\nQt5 version of \'qmake\' is the first in your $PATH:\n\n    export PATH=/usr/lib64/qt5/bin:$PATH\n\n\n### Compiling\n\nOpen a shell window, go to the QDirStat source directory, then enter these\ncommands:\n\n    qmake\n    make\n\n\n### Installing\n\n    sudo make install\n\nor\n\n    su -c make install\n\n\n### Install to a Custom Directory\n\nThe default setup installs everything to `/usr`. To install to another\ndirectory, set `INSTALL_PREFIX` during `qmake`.\n\n<details>\n\n    qmake INSTALL_PREFIX=/usr/local\n\nBeware that some things might not work as expected; for example, you will not\nget a `.desktop` file in the proper place to make QDirStat appear in any menus\nin your graphical desktop environment or in the file manager. You will need to\ncopy the `.desktop` file manually to whatever directory your graphical desktop\nenvironment uses somewhere in your home directory. Similar with the application\nicon used in that `.desktop` file.\n</details>\n\n\n## Contributing\n\nSee file [Contributing.md](doc/Contributing.md)\nand [GitHub-Workflow.md](doc/GitHub-Workflow.md)\n\n\n## To Do\n\nSee file [TODO.md](doc/TODO.md)\n\n\n## Troubleshooting\n\n### Can\'t Move a Directory to Trash\n\nSee file [Troubleshooting.md](doc/Troubleshooting.md)\n\n\n## Reference\n\n- Original [KDirStat](http://kdirstat.sourceforge.net/)  ([source code](https://github.com/shundhammer/kdirstat))\n- [K4Dirstat](https://bitbucket.org/jeromerobert/k4dirstat/wiki/Home) ([source code](https://bitbucket.org/jeromerobert/k4dirstat/src))\n- [WinDirStat](https://windirstat.info/) (for Windows)\n- [Disk Usage Tools Compared: QDirStat vs. K4DirStat vs. Baobab vs. Filelight vs. ncdu](https://github.com/shundhammer/qdirstat/wiki/disk-usage-tools-compared) (including benchmarks)\n- [XDG Trash Spec](http://standards.freedesktop.org/trash-spec/trashspec-1.0.html)\n- [Spatry\'s QDirStat Review on YouTube](https://www.youtube.com/watch?v=ysm4-x_5ftI)\n- Articles by Harry Mangalam (University of California, Irvine)\n  - [QDirStat](http://moo.nac.uci.edu/~hjm/HOWTO_move_data.html#qdirstat)\n  - [KDirStat for Clusters](http://moo.nac.uci.edu/~hjm/kdirstat/kdirstat-for-clusters.html)\n\nOf course, don\'t forget to check out the [doc directory](doc/).\n\n\n## Packaging Status\n\nRepology: QDirStat versions in Linux / BSD distributions:\n\n[![Repology](https://repology.org/badge/tiny-repos/qdirstat.svg)](https://repology.org/metapackage/qdirstat/versions)\n\n(click for details)\n\n\n## Donate\n\nQDirStat is Free Open Source Software. You are not required to pay anything.\nDonations are most welcome, of course.\n\nDonate via PayPal (freely select the amount to donate):\n\n[![paypal](https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=EYJXAVLGNRR5W)\n'