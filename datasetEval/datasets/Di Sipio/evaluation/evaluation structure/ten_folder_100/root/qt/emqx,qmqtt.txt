b'QMQTT\n=====\n\nmqtt client for Qt\n\n**Please compile the library with Qt >= 5.3 version. On Windows you need to specify `CONFIG += NO_UNIT_TESTS`, since gtest is not supported.**\n\nTo add websocket support, compile the library with Qt >= 5.7, and specify \'CONFIG += QMQTT_WEBSOCKETS\'.\nThis also works when compiling qmqtt for WebAssembly.\n\nUsage\n=====\n\nIn your QMake project, add:\n\n    QT += qmqtt\n\nConnect using TCP:\n\n    #include "qmqtt.h"\n\n    QMQTT::Client *client = new QMQTT::Client(QHostAddress::LocalHost, 1883);\n    client->setClientId("clientId");\n    client->setUsername("user");\n    client->setPassword("password");\n    client->connectToHost();\n\nConnect using SSL:\n\n    QSslConfiguration sslConfig = QSslConfiguration::defaultConfiguration();\n    // Add custom SSL options here (for example extra certificates)\n    QMQTT::Client *client = new QMQTT::Client("example.com", 8883, sslConfig);\n    client->setClientId("clientId");\n    client->setUsername("user");\n    client->setPassword("password");\n    client->connectToHost();\n\nConnect using WebSockets:\n\n    QMQTT::Client *client = new QMQTT::Client("ws://www.example.com/mqtt", "<origin>", QWebSocketProtocol::VersionLatest);\n    client->setClientId("clientId");\n    client->setUsername("user");\n    client->setPassword("password");\n    client->connectToHost();\n\nSlots\n=====\n\n    void setHost(const QHostAddress& host);\n    void setPort(const quint16 port);\n    void setClientId(const QString& clientId);\n    void setUsername(const QString& username);\n    void setPassword(const QString& password);\n    void setKeepAlive(const int keepAlive);\n    void setCleanSession(const bool cleansess);\n    void setAutoReconnect(const bool value);\n    void setAutoReconnectInterval(const int autoReconnectInterval);\n    void setWillTopic(const QString& willTopic);\n    void setWillQos(const quint8 willQos);\n    void setWillRetain(const bool willRetain);\n    void setWillMessage(const QString& willMessage);\n\n    void connectToHost();\n    void disconnectFromHost();\n\n    quint16 subscribe(const QString& topic, const quint8 qos);\n    void unsubscribe(const QString& topic);\n\n    quint16 publish(const Message& message);\n\nSignals\n=======\n\n    void connected();\n    void disconnected();\n    void error(const QMQTT::ClientError error);\n\n    void subscribed(const QString& topic, const quint8 qos);\n    void unsubscribed(const QString& topic);\n    void published(const quint16 msgid, const quint8 qos);\n    void pingresp();\n    void received(const QMQTT::Message& message);\n\n\nLicense\n=======\n\nNew BSD License\n\n\nContributors\n=============\n\n[@Kampfgnom](https://github.com/Kampfgnom)\n\n[@rafaeldelucena](https://github.com/rafaeldelucena)\n\n[@Vortex375](https://github.com/Vortex375)\n\n[@mwallnoefer](https://github.com/mwallnoefer)\n\n[@KonstantinRitt](https://github.com/KonstantinRitt)\n\n[@cncap](https://github.com/cncap)\n\n[@Psy-Kai](https://github.com/Psy-Kai)\n\n[@ejvr](https://github.com/ejvr)\n\n[@keytee](https://github.com/keytee)\n\n\nAuthors\n=======\n\n[@emqplus](https://github.com/emqplus) Feng Lee <feng@emqtt.io>\n\n[@wguynes](https://github.com/wguynes) William Guynes <wguynes@gmail.com>\n\n[@wuming123057](https://github.com/wuming123057) Xuan <huacai123057@163.com>\n'