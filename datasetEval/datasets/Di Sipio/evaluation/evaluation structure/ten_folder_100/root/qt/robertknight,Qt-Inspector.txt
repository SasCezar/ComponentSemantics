b'Qt Inspector\n============\n\nQt Inspector is a tool to browse the object/widget tree of Qt applications.\n\n![Screenshot](http://2.bp.blogspot.com/-gZW9n7V-zgs/TiinbhFZNpI/AAAAAAAAABc/F3zpGbS73bE/s1600/inspector-dolphin-settings.png)\n\n\nQt Inspector starts a specified application or connects to a specified process\nand once connected it can:\n\n - Browse the object tree of Qt applications.\n - View properties of objects\n - Edit properties of objects\n - Locate a widget in the object tree by clicking on it in the application\n\n### Building Qt inspector\n\nQt Inspector currently runs on Linux and Mac.\n\nYou will need `protoc` in your PATH. On Debian/Ubuntu, install `protobuf-compiler`\nand `libprotobuf-dev`.\n\n```\n\tcmake <path to Qt inspector src>\n\tmake -j2\n```\n\n### Usage\n\n Qt Inspector can either attach to an existing application or launch\n a specified application and then attach to it.\n \n Recommended usage is to specify the program name and arguments.\n\n```\n\t./qtinspector <program name> <args>\n\t./qtinspector <process ID of running Qt app>\n```\n\n### Design\n\n Qt Inspector operates by injecting a helper library into the target process\n when starting it using LD_PRELOAD / DYLD_INSERT_LIBRARIES or via gdb\n (if attaching to an existing process).\n \n This helper library sets up a local socket and listens for requests\n from the inspector process.  The inspector and target process communicate via\n protocol buffer messages over this socket.\n\n'