b'# Hotspot - the Linux perf GUI for performance analysis\n\n<img align="right" width="10%" src="src/images/hotspot_logo.png">\n\nThis project is a [KDAB](http://www.kdab.com) R&D effort to create a standalone\nGUI for performance data. As the first goal, we want to provide a UI like\nKCachegrind around Linux perf. Looking ahead, we intend to support various other\nperformance data formats under this umbrella.\n\n## Table of Contents\n\n<!--\n    TOC generated with https://github.com/jonschlinkert/markdown-toc\n    To update, run `markdown-toc -i README.md`\n-->\n\n<!-- toc -->\n\n- [Screenshots](#screenshots)\n  * [Visualize Data](#visualize-data)\n  * [Time Line](#time-line)\n  * [Record Data](#record-data)\n- [Building Hotspot](#building-hotspot)\n  * [Required Dependencies](#required-dependencies)\n  * [On Debian/Ubuntu](#on-debianubuntu)\n  * [On Fedora](#on-fedora)\n  * [Arch Linux](#arch-linux)\n  * [OpenSUSE](#opensuse)\n  * [Building Hotspot itself](#building-hotspot-itself)\n- [Getting Hotspot](#getting-hotspot)\n  * [ArchLinux](#archlinux)\n  * [For any Linux distro: AppImage](#for-any-linux-distro-appimage)\n- [Using](#using)\n  * [Embedded Systems](#embedded-systems)\n- [Known Issues](#known-issues)\n  * [Broken Backtraces](#broken-backtraces)\n  * [Missing Features](#missing-features)\n  * [Recording with perf without super user rights](#recording-with-perf-without-super-user-rights)\n- [Qt Creator](#qt-creator)\n- [License](#license)\n\n<!-- tocstop -->\n\n## Screenshots\n\nHere are some screenshots showing the most important features of hotspot in action:\n\n### Visualize Data\n\nThe main feature of hotspot is visualizing a `perf.data` file graphically.\n\n![hotspot summary page](screenshots/summary.png?raw=true "hotspot summary page")\n\n![hotspot FlameGraph page](screenshots/flamegraph.png?raw=true "hotspot FlameGraph page")\n\n![hotspot caller-callee page](screenshots/caller-callee.png?raw=true "hotspot caller-callee page")\n\n![hotspot bottom-up page](screenshots/bottom-up.png?raw=true "hotspot bottom-up page")\n\n![hotspot top-down page](screenshots/top-down.png?raw=true "hotspot top-down page")\n\n### Time Line\n\nThe time line allows filtering the results by time, process or thread. The data views will update accordingly.\n\n![hotspot timeline filtering by time](screenshots/timeline-filter-time.png?raw=true "hotspot timeline filtering by time")\n\n![hotspot timeline filtering by thread or process](screenshots/timeline-filter-thread.png?raw=true "hotspot timeline filtering by thread or process")\n\n![hotspot timeline filtering applied to FlameGraph](screenshots/timeline-flamegraph.png?raw=true "hotspot timeline filtering also applies to the data views on top, like e.g. the FlameGraph. You can also zoom in on the timeline and inspect individual sample data.")\n\n### Record Data\n\nYou can also launch `perf` from hotspot, to profile a newly started application\nor to attach to already running process(es). Do take the [caveats below](#recording-with-perf-without-super-user-rights)\ninto account though.\n\n![hotspot launch application](screenshots/record-launch.png?raw=true "hotspot can launch a new application and profile it with perf from the record page.")\n\n![hotspot attach to process](screenshots/record-attach.png?raw=true "hotspot also allows runtime-attaching of perf to existing applications to profile them.")\n\n## Building Hotspot\n\n### Required Dependencies\n\nAs of now, you will need the following dependencies to build this project:\n\n- CMake 3.1.0 or higher\n- any C++11 enabled compiler\n- Qt 5.6.0 or higher\n- libelf\n- libelfutils\n- gettext\n- extra-cmake-modules\n- KDE Frameworks 5 (packages are usually called libkf5-*-devel):\n  - threadweaver\n  - i18n\n  - configwidgets\n  - coreaddons\n  - itemviews\n  - itemmodels\n  - kio\n  - solid\n  - windowsystem\n\n### On Debian/Ubuntu\n\n```\nadd-apt-repository ppa:kubuntu-ppa/backports \napt-get update\napt-get install libkf5threadweaver-dev libkf5i18n-dev libkf5configwidgets-dev \\\n    libkf5coreaddons-dev libkf5itemviews-dev libkf5itemmodels-dev libkf5kio-dev \\\n    libkf5solid-dev libkf5windowsystem-dev libelf-dev libdw-dev cmake \\\n    extra-cmake-modules gettext\n```\n\n### On Fedora\n```\ndnf install cmake gcc glibc-static gcc-c++ libstdc++-static qt5 qt5-devel \\\n    extra-cmake-modules elfutils-devel kf5-threadweaver-devel kf5-ki18n-devel \\\n    kf5-kconfigwidgets-devel kf5-kitemviews-devel kf5-kitemmodels-devel \\\n    kf5-kio-devel kf5-solid-devel kf5-kwindowsystem-devel\n```\n\n### Arch Linux\n```\npacman -Sy cmake gcc extra-cmake-modules threadweaver ki18n kconfigwidgets \\\n    kitemviews kitemmodels kwindowsystem kio solid libelf gettext qt5-base\n```\n\n### OpenSUSE\n\n```\nzypper in cmake gcc-c++ extra-cmake-modules threadweaver-devel ki18n-devel kio-devel \\\n    solid-devel kcoreaddons-devel threadweaver-devel kconfigwidgets-devel \\\n    kitemmodels-devel kitemviews-devel kwindowsystem-devel \\\n    libqt5-qtbase-devel libelf-devel libdw-devel gettext glibc-devel-static\n```\n\n### Building Hotspot itself\n\n```\ngit clone --recurse-submodules https://github.com/KDAB/hotspot.git\nmkdir build-hotspot\ncd build-hotspot\ncmake ../hotspot\nmake\n# now you can run hotspot from the build folder:\n./bin/hotspot\n# or `make install` it and launch it from your $PATH\n```\n\nIf you need help building this project for your platform, [contact us for help](https://www.kdab.com/about/contact/).\n\n## Getting Hotspot\n\n*Note: Hotspot is not packaged for most Linux distributions yet -- you\'ll likely have to resort to using the AppImage which will work on any recent Linux distro just fine*\n\n### ArchLinux\n\nhotspot is available in AUR (https://aur.archlinux.org/packages/hotspot).\n\n### Gentoo\n\nhotspot ebuilds are available from our overlay (https://github.com/KDAB/kdab-overlay).\n\n### Fedora\n\nhotspot is available in Fedora repositories.\n\n### For any Linux distro: AppImage\n\nHead over to our [download page](https://github.com/KDAB/hotspot/releases) and download the latest [AppImage](http://appimage.org/) release and just run it.\n\nPlease use the latest Continuous release to get the most recent version. If it doesn\'t work, please report a bug\nand test the latest stable version.\n\n*Note: Your system libraries or preferences are not altered. In case you\'d like to remove Hotspot again, simply delete the downloaded file. Learn more about AppImage [here](http://appimage.org/).*\n\n## Using\n\nFirst of all, record some data with `perf`. To get backtraces, you will need to enable the dwarf callgraph mode:\n\n```\nperf record --call-graph dwarf <your application>\n...\n[ perf record: Woken up 58 times to write data ]\n[ perf record: Captured and wrote 14.874 MB perf.data (1865 samples) ]\n```\n\nNow, if you have hotspot available on the same machine, all you need to do is launch it.\nIt will automatically open the `perf.data` file in the current directory (similar to `perf report`).\nAlternatively, you can specify the path to the data file on the console:\n\n```\nhotspot /path/to/perf.data\n```\n\n### Embedded Systems\n\nIf you are recording on an embedded system, you will want to analyze the data on your\ndevelopment machine with hotspot. To do so, make sure your sysroot contains the debug\ninformation required for unwinding (see below). Then record the data on your embedded\nsystem:\n\n```\nembedded$ perf record --call-graph dwarf <your application>\n...\n[ perf record: Woken up 58 times to write data ]\n[ perf record: Captured and wrote 14.874 MB perf.data (1865 samples) ]\nembedded$ cp /proc/kallsyms /tmp/kallsyms # make pseudo-file a real file\n```\n\nIt\'s OK if your embedded machine is using a different platform than your host. On your\nhost, do the following steps then to analyze the data:\n\n```\nhost$ scp embedded:perf.data embedded:/tmp/kallsyms .\nhost$ hotspot --sysroot /path/to/sysroot --kallsyms kallsyms \\\n              perf.data\n```\n\nIf you manually deployed an application from a path outside your sysroot, do this instead:\n\n```\nhost$ hotspot --sysroot /path/to/sysroot --kallsyms kallsyms --appPath /path/to/app \\\n              perf.data\n```\n\nIf your application is also using libraries outside your sysroot and the appPath, do this:\n\n```\nhost$ hotspot --sysroot /path/to/sysroot --kallsyms kallsyms --appPath /path/to/app \\\n              --extraLibPaths /path/to/lib1:/path/to/lib2:... \\\n              perf.data\n```\n\nAnd, worst-case, if you also use split debug files in non-standard locations, do this:\n\n```\nhost$ hotspot --sysroot /path/to/sysroot --kallsyms kallsyms --appPath /path/to/app \\\n              --extraLibPaths /path/to/lib1:/path/to/lib2:... \\\n              --debugPaths /path/to/debug1:/path/to/debug2:... \\\n              perf.data\n```\n\n## Known Issues\n\nIf anything breaks in the above and the output is less usable than `perf report`, please [report an issue on GitHub](https://github.com/KDAB/hotspot/issues).\nThat said, there are some known issues that people may trip over:\n\n### Broken Backtraces\n\nUnwinding the stack to produce a backtrace is a dark art and can go wrong in many ways.\nHotspot relies on `perfparser` (see below), which in turn relies on `libdw` from elfutils\nto unwind the stack. This works quite well most of the time, but still can go wrong. Most\nnotably, unwinding will fail when:\n\n- an ELF file (i.e. executable or library) referenced by the `perf.data` file is missing\n  - to fix this, try to use one of the following CLI arguments to let hotspot know where to look for the ELF files:\n    - `--debugPaths <paths>`: Use this when you have split debug files in non-standard locations\n    - `--extraLibPaths <paths>`: Use this when you have moved libraries to some other location since recording\n    - `--appPath <paths>`: This is kind of a combination of the above two fields. The path is traversed recursively, looking for debug files and libraries.\n    - `--sysroot <path>`: Use this when you try to inspect a data file recorded on an embedded platform\n- an ELF file is missing debug information\n  - to fix this, install the debug package from your distro\n  - or compile the code in "release with debug" mode, i.e. ensure your compiler is invoked with something like `-O2 -g`. You will have to repeat the `perf record` step\n  - potentially both of the above is not an option for you, e.g. when the library is closed source and supplied by a thirdparty vendor. If that is the case,\n   you may be lucky and the library contains frame pointers. If so, then try to build elfutils from current git master (you want commit a55df2c1, which should be part of 0.170).\n   This version of elfutils will try to fallback to the frame pointer for unwinding, when the debug information is missing.\n- your call stacks are too deep\n  - by default, `perf record` only copies a part of the stack to the data file. This can lead to issues with very deep call stacks, which will be cut off at some point.\n    This issue will break the top-down call trees in hotspot, as visualized in the Top-Down view or the Flame Graph. To fix this, you can try to increase the stack dump size, i.e.:\n\n        perf record --call-graph dwarf,32768\n\n    Note that this can dramatically increase the size of the `perf.data` files - use it with care. Also have a look at `man perf record`.\n  - For some scenarios, recursive function calls simply fail to be unwound. See also https://github.com/KDAB/hotspot/issues/93\n\n### Missing Features\n\nCompared to `perf report`, hotspot misses a lot of features. Some of these are planned to be resolved\nin the future. Others may potentially never get implemented. But be aware that the following features\nare _not_ available in hotspot currently:\n\n- tracepoints: we only analyze and show samples. This means that it is currently impossible to do off-CPU profiling with hotspot.\n- annotate: the caller/callee view shows cost attributed to individual source lines. But a proper annotation view like `perf annotate`, esp. on the instruction level, is currently missing.\n- the columns in the tables are currently hardcoded, while potentially a user may want to change this to show e.g. cost per-process or thread and so forth\n- many of the more advanced features, such as `--itrace`, `--mem-mode`, `--branch-stack` and `--branch-history`, are unsupported\n\n### Recording with perf without super user rights\n\nIt is **not** a good idea to launch hotspot with `sudo` or as `root` user. See e.g.\n[Editing Files As Root](https://blog.martin-graesslin.com/blog/2017/02/editing-files-as-root/)\nfor an article on that matter. [Issue #83](https://github.com/KDAB/hotspot/issues/83) is\nalso relevant in this contact.\n\nBut without superuser rights, you may see error messages such as the following\nwhen using hotspot\'s record feature:\n\n    You may not have permission to collect stats.\n    Consider tweaking /proc/sys/kernel/perf_event_paranoid:\n      -1 - Not paranoid at all\n       0 - Disallow raw tracepoint access for unpriv\n       1 - Disallow cpu events for unpriv\n       2 - Disallow kernel profiling for unpriv\n\nTo workaround this limitation, hotspot can temporarily elevate the perf privileges.\nThis is achieved by applying [these steps](https://superuser.com/questions/980632/run-perf-without-root-right),\nbundled into [a script](scripts/elevate_perf_privileges.sh) that is run via `kdesudo` or `kdesu`.\nThe resulting elevated privileges are also required for kernel tracing in general and Off-CPU profiling in particular.\n\n## Qt Creator\n\nThis project leverages the excellent `perfparser` utility created by The Qt Company\nfor their Qt Creator IDE. If you are already using Qt Creator, consider leveraging\nits integrated [CPU Usage Analyzer](http://doc.qt.io/qtcreator/creator-cpu-usage-analyzer.html).\n\n## License\n\nHotspot is dual-licensed under the GPL v2+ or under a commercial KDAB license.\nSee [LICENSE.GPL.txt](LICENSE.GPL.txt), [LICENSE.txt](LICENSE.txt) and [LICENSE.US.txt](LICENSE.US.txt)\nfor more information, or contact info@kdab.com if any conditions of this licensing are not clear to you.\n'