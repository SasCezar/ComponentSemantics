b"[![Travis (master)](https://img.shields.io/travis/openscad/openscad/master.svg?logo=travis&logoColor=black&colorA=f9d72c&style=plastic)](https://travis-ci.org/openscad/openscad/)\n[![AppVeyor (master)](https://img.shields.io/appveyor/ci/kintel/openscad/master.svg?logo=appveyor&logoColor=black&colorA=f9d72c&style=plastic)](https://ci.appveyor.com/project/kintel/openscad)\n[![CircleCI (master)](https://img.shields.io/circleci/project/github/openscad/openscad/master.svg?logo=circleci&logoColor=black&colorA=f9d72c&style=plastic)](https://circleci.com/gh/openscad/openscad/tree/master)\n[![Coverity Scan](https://img.shields.io/coverity/scan/2510.svg?colorA=f9d72c&logoColor=black&style=plastic)](https://scan.coverity.com/projects/2510)\n\n\n[![Visit our IRC channel](https://kiwiirc.com/buttons/irc.freenode.net/openscad.png)](https://kiwiirc.com/client/irc.freenode.net/#openscad)\n\n# What is OpenSCAD?\n[![Flattr this git repo](https://api.flattr.com/button/flattr-badge-large.png)](https://flattr.com/submit/auto?user_id=openscad&url=http://openscad.org&title=OpenSCAD&language=&tags=github&category=software)\n\nOpenSCAD is a software for creating solid 3D CAD objects. It is free software\nand available for Linux/UNIX, MS Windows and Mac OS X.\n\nUnlike most free software for creating 3D models (such as the famous\napplication Blender), OpenSCAD focuses on the CAD aspects rather than the \nartistic aspects of 3D modeling. Thus this might be the application you are\nlooking for when you are planning to create 3D models of machine parts but\nprobably not the tool for creating computer-animated movies.\n\nOpenSCAD is not an interactive modeler. Instead it is more like a\n3D-compiler that reads a script file that describes the object and renders\nthe 3D model from this script file (see examples below). This gives you, the\ndesigner, complete control over the modeling process and enables you to easily\nchange any step in the modeling process or make designs that are defined by\nconfigurable parameters.\n\nOpenSCAD provides two main modeling techniques: First there is constructive\nsolid geometry (aka CSG) and second there is extrusion of 2D outlines. As the data\nexchange format for these 2D outlines Autocad DXF files are used. In\naddition to 2D paths for extrusion it is also possible to read design parameters\nfrom DXF files. Besides DXF files OpenSCAD can read and create 3D models in the\nSTL and OFF file formats.\n\n# Contents\n\n- [Getting Started](#getting-started)\n- [Documentation](#documentation)\n    - [Building OpenSCAD](#building-openscad)\n        - [Prerequisites](#prerequisites)\n        - [Getting the source code](#getting-the-source-code)\n        - [Building for Mac OS X](#building-for-mac-os-x)\n        - [Building for Linux/BSD](#building-for-linuxbsd)\n        - [Building for Linux/BSD on systems with older or missing dependencies](#building-for-linuxbsd-on-systems-with-older-or-missing-dependencies)\n        - [Building for Windows](#building-for-windows)\n        - [Compilation](#compilation)\n\n# Getting started\n\nYou can download the latest binaries of OpenSCAD at\n<https://www.openscad.org/downloads.html>. Install binaries as you would any other\nsoftware.\n\nWhen you open OpenSCAD, you'll see three frames within the window. The\nleft frame is where you'll write code to model 3D objects. The right\nframe is where you'll see the 3D rendering of your model.\n\nLet's make a tree! Type the following code into the left frame:\n\n    cylinder(h = 30, r = 8);\n\nThen render the 3D model by hitting F5. Now you can see a cylinder for\nthe trunk in our tree. Now let's add the bushy/leafy part of the tree\nrepresented by a sphere. To do so, we will union a cylinder and a\nsphere.\n\n    union() {\n      cylinder(h = 30, r = 8);\n      sphere(20);\n    }\n\nBut, it's not quite right! The bushy/leafy are around the base of the\ntree. We need to move the sphere up the z-axis.\n\n    union() {\n      cylinder(h = 30, r = 8);\n      translate([0, 0, 40]) sphere(20);\n    }\n\nAnd that's it! You made your first 3D model! There are other primitive\nshapes that you can combine with other set operations (union,\nintersection, difference) and transformations (rotate, scale,\ntranslate) to make complex models! Check out all the other language\nfeatures in the [OpenSCAD\nManual](https://en.wikibooks.org/wiki/OpenSCAD_User_Manual).\n\n# Documentation\n\nHave a look at the OpenSCAD Homepage (https://www.openscad.org/documentation.html) for documentation.\n\n## Building OpenSCAD\n\nTo build OpenSCAD from source, follow the instructions for the\nplatform applicable to you below.\n\n### Prerequisites\n\nTo build OpenSCAD, you need some libraries and tools. The version\nnumbers in brackets specify the versions which have been used for\ndevelopment. Other versions may or may not work as well.\n\nIf you're using a newer version of Ubuntu, you can install these \nlibraries from aptitude. If you're using Mac, or an older Linux/BSD, there \nare build scripts that download and compile the libraries from source. \nFollow the instructions for the platform you're compiling on below.\n\n* A C++ compiler supporting C++11\n* [Qt (5.4 ->)](https://qt.io/)\n* [QScintilla2 (2.9 ->)](https://riverbankcomputing.com/software/qscintilla/)\n* [CGAL (4.8 ->)](https://www.cgal.org/)\n * [GMP (5.x)](https://gmplib.org/)\n * [MPFR (3.x)](https://www.mpfr.org/)\n* [cmake (2.8 ->, required by CGAL and the test framework)](https://cmake.org/)\n* [boost (1.35 ->)](https://www.boost.org/)\n* [OpenCSG (1.3.2 ->)](http://www.opencsg.org/)\n* [GLEW (1.5.4 ->)](http://glew.sourceforge.net/)\n* [Eigen (3.x)](https://eigen.tuxfamily.org/)\n* [glib2 (2.x)](https://developer.gnome.org/glib/)\n* [fontconfig (2.10 -> )](https://fontconfig.org/)\n* [freetype2 (2.4 -> )](https://freetype.org/)\n* [harfbuzz (0.9.19 -> )](https://www.freedesktop.org/wiki/Software/HarfBuzz/)\n* [libzip (0.10.1 -> )](https://libzip.org/)\n* [Bison (2.4 -> )](https://www.gnu.org/software/bison/)\n* [Flex (2.5.35 -> )](http://flex.sourceforge.net/)\n* [pkg-config (0.26 -> )](https://www.freedesktop.org/wiki/Software/pkg-config/)\n* [double-conversion (2.0.1 -> )](https://github.com/google/double-conversion/)\n\n### Getting the source code\n\nInstall git (https://git-scm.com/) onto your system. Then run a clone:\n\n    git clone git://github.com/openscad/openscad.git\n\nThis will download the latest sources into a directory named `openscad`.\n\nTo pull the MCAD library (https://github.com/openscad/MCAD), do the following:\n\n    cd openscad\n    git submodule update --init\n\n### Building for Mac OS X\n\nPrerequisites:\n\n* Xcode\n* curl\n* cmake\n* pkgconfig\n* autoconf automake libtool (for HIDAPI / InputDevice support)\n\nInstall Dependencies:\n\nAfter building dependencies using one of the following three options, follow the instructions in the *Compilation* section.\n\n1. **From source**\n\n    Run the script that sets up the environment variables:\n\n        source setenv_mac.sh\n\n    Then run the script to compile all the dependencies:\n\n        ./scripts/macosx-build-dependencies.sh\n\n1. **Homebrew** (assumes [Homebrew](https://brew.sh/) is already installed)\n\n        ./scripts/macosx-build-homebrew.sh\n\n1. **MacPorts** (assumes [MacPorts](https://www.macports.org/) is already installed)\n\n    For the adventurous, it might be possible to build OpenSCAD using _MacPorts_. The main challenge is that MacPorts have partially broken libraries, but that tends to change from time to time.\n\n    NB! MacPorts currently doesn't support Qt5 very well, so using Qt4\n    is the only working option at the moment. However, MacPorts' Qt4\n    has a broken `moc` command, causing OpenSCAD compilation to\n \xc2\xa0 \xc2\xa0break. This may be fixed in MacPorts by the time you read this.\n```\n \xc2\xa0 \xc2\xa0 \xc2\xa0 \xc2\xa0sudo port install opencsg qscintilla boost cgal pkgconfig eigen3 harfbuzz fontconfig\n```\n\n\n### Building for Linux/BSD\n\nFirst, make sure that you have git installed (often packaged as 'git-core' \nor 'scmgit'). Once you've cloned this git repository, download and install \nthe dependency packages listed above using your system's package \nmanager. A convenience script is provided that can help with this \nprocess on some systems:\n\n    sudo ./scripts/uni-get-dependencies.sh\n\nAfter installing dependencies, check their versions. You can run this \nscript to help you:\n\n    ./scripts/check-dependencies.sh\n\nTake care that you don't have old local copies anywhere (`/usr/local/`). \nIf all dependencies are present and of a high enough version, skip ahead \nto the Compilation instructions. \n\n### Building for Linux/BSD on systems with older or missing dependencies\n\nIf some of your system dependency libraries are missing or old, then you \ncan download and build newer versions into `$HOME/openscad_deps` by \nfollowing this process. First, run the script that sets up the \nenvironment variables. \n\n    source ./scripts/setenv-unibuild.sh\n\nThen run the script to compile all the prerequisite libraries above:\n\n    ./scripts/uni-build-dependencies.sh\n\nNote that huge dependencies like gcc, qt, or glib2 are not included \nhere, only the smaller ones (boost, CGAL, opencsg, etc). After the \nbuild, again check dependencies.\n\n    ./scripts/check-dependencies.sh\n\nAfter that, follow the Compilation instructions below.\n\n### Building for Windows\n\nOpenSCAD for Windows is usually cross-compiled from Linux. If you wish to\nattempt an MSVC build on Windows, please see this site:\nhttps://en.wikibooks.org/wiki/OpenSCAD_User_Manual/Building_on_Windows\n\nTo cross-build, first make sure that you have all necessary dependencies \nof the MXE project ( listed at https://mxe.cc/#requirements ). Don't install\nMXE itself, the scripts below will do that for you under `$HOME/openscad_deps/mxe`\n\nThen get your development tools installed to get GCC. Then after you've \ncloned this git repository, start a new clean bash shell and run the \nscript that sets up the environment variables.\n\n    source ./scripts/setenv-mingw-xbuild.sh 64\n\nThen run the script to download & compile all the prerequisite libraries above:\n\n    ./scripts/mingw-x-build-dependencies.sh 64\n\nNote that this process can take several hours, and tens of gigabytes of \ndisk space, as it uses the [https://mxe.cc](https://mxe.cc) system to cross-build many\nlibraries. After it is complete, build OpenSCAD and package it to an \ninstaller:\n\n    ./scripts/release-common.sh mingw64\n\nIf you wish you can only build the `openscad.exe` binary:\n\n    cd mingw64\n    qmake ../openscad.pro CONFIG+=mingw-cross-env\n    make\n\nFor a 32-bit Windows cross-build, replace 64 with 32 in the above instructions. \n\n### Compilation\n\nFirst, run `qmake openscad.pro` from Qt to generate a Makefile.\n\nOn some systems, depending on which version(s) of Qt you have installed, you may need to specify which version you want to use, e.g. by running `qmake4`, `qmake-qt4`, `qmake -qt=qt5`, or something alike. \n\nThen run `make`. Finally you might run `make install` as root or simply copy the\n'openscad' binary (`OpenSCAD.app` on Mac OS X) to the bin directory of your choice.\n\nIf you had problems compiling from source, raise a new issue in the\n[issue tracker on the github page](https://github.com/openscad/openscad/issues).\n\nThis site and it's subpages can also be helpful:\nhttps://en.wikibooks.org/wiki/OpenSCAD_User_Manual/Building_OpenSCAD_from_Sources\n"