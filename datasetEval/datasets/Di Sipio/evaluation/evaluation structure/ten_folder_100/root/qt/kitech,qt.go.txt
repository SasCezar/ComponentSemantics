b'\n### qt.go\n\nQt5 binding for Go (Golang) without CGO that aims to achieve Go\'s native compile speeds. Instead of using common bindings and heavy C++ wrapper code that forces you to compile and link time and time again, Qt.Go uses FFI so there\'s only a runtime dependency.\n\n[![Build Status](https://travis-ci.org/kitech/qt.go.svg?branch=master)](https://travis-ci.org/kitech/qt.go)\n[![Go Report Card](https://goreportcard.com/badge/github.com/kitech/qt.go)](https://goreportcard.com/report/github.com/kitech/qt.go)\n[![GoDoc](https://godoc.org/github.com/kitech/qt.go?status.svg)](https://godoc.org/github.com/kitech/qt.go)\n[![Sourcegraph](https://sourcegraph.com/github.com/kitech/qt.go/-/badge.svg)](https://sourcegraph.com/github.com/kitech/qt.go?badge)\n\n### Features\n\n* Binding code with no CGO compile cost\n* Popular Qt5 packages (widgets/QML/extras) support\n* Simple go-uic, go-rcc tools\n* full signal/slot support\n* protected method override support\n* default arguments and value wrapper functions\n* Class/Method/Function/Enum comment for godoc\n* Go side signal/slot definition (experimental)\n\n\n### Multiple platforms support\nAll platforms should be supported, for now some of them are tested:\n\n* Archlinux/Ubuntu16+\n* MacOS\n* Android\n* Windows\n\n### Installation\n\n##### requirement\n\n* go 1.9+\n* libffi\n* dlfcn (windows)\n\n\n##### FFI\n\nMake sure libffi is installed\n\nDebian based: `apt-get install libffi-dev`\n\nArch based: `pacman -S libffi`\n\nMacOS: `brew install libffi`\n\n##### qt.go:\n\n    go get -v -u github.com/kitech/qt.go\n    \n##### runtime dependency:\n\n    git clone https://github.com/kitech/qt.inline.git\n    cd qt.inline\n    cmake .\n    make\n    cp libQt5Inline.so /usr/lib/libQt5Inline.so\n\n##### uic/rcc\n\n    go get -v -u github.com/kitech/qt.go/cmd/go-uic\n    go get -v -u github.com/kitech/qt.go/cmd/go-rcc\n\n[Full Installation](https://github.com/kitech/qt.go/blob/master/install.md)\n\n### Examples\n\n    package main\n    import "os"\n    import "github.com/kitech/qt.go/qtwidgets"\n    func main() {\n        app := qtwidgets.NewQApplication(len(os.Args), os.Args, 0)\n        btn := qtwidgets.NewQPushButton1("hello qt.go", nil)\n        btn.Show()\n        app.Exec()\n    }\n\nMore complex examples: https://github.com/kitech/qt.go/examples/ https://github.com/qtchina/qt.go.demos/ \n\nGo side signal/slot: [syntax document](https://github.com/kitech/qt.go/blob/master/docs/qt_meta_data_mark_syntax_for_go.md) [usage demo](https://github.com/kitech/qt.go/blob/master/qtmeta/tests/meta_data_test_.go)\n\n\n### Community\n\n  * QQ groupchat 933636020\n  * Telegram room https://t.me/qtdevjiaoliu (Thanks https://github.com/xiayesuifeng)\n\n\n### Internals\n\nQt.Go uses FFI to call wrapped Qt functions and methods, so there is no compile/link time dependency on Qt, only a run time dependency.\n\nThis should make the development and testing phases much faster.\n\n[Internal document](https://github.com/kitech/qt.go/blob/master/docs/qt-go-internals.md)\n\n'