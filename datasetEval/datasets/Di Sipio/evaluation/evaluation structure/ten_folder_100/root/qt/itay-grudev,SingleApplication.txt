b'SingleApplication\n=================\n\nThis is a replacement of the QtSingleApplication for `Qt5`.\n\nKeeps the Primary Instance of your Application and kills each subsequent\ninstances. It can (if enabled) spawn secondary (non-related to the primary)\ninstances and can send data to the primary instance from secondary instances.\n\nUsage\n-----\n\nThe `SingleApplication` class inherits from whatever `Q[Core|Gui]Application`\nclass you specify via the `QAPPLICATION_CLASS` macro (`QCoreApplication` is the\ndefault). Further usage is similar to the use of the `Q[Core|Gui]Application`\nclasses.\n\nThe library sets up a `QLocalServer` and a `QSharedMemory` block. The first\ninstance of your Application is your Primary Instance. It would check if the\nshared memory block exists and if not it will start a `QLocalServer` and listen\nfor connections. Each subsequent instance of your application would check if the\nshared memory block exists and if it does, it will connect to the QLocalServer\nto notify the primary instance that a new instance had been started, after which\nit would terminate with status code `0`. In the Primary Instance\n`SingleApplication` would emit the `instanceStarted()` signal upon detecting\nthat a new instance had been started.\n\nThe library uses `stdlib` to terminate the program with the `exit()` function.\n\nYou can use the library as if you use any other `QCoreApplication` derived\nclass:\n\n```cpp\n#include <QApplication>\n#include <SingleApplication.h>\n\nint main( int argc, char* argv[] )\n{\n    SingleApplication app( argc, argv );\n\n    return app.exec();\n}\n```\n\nTo include the library files I would recommend that you add it as a git\nsubmodule to your project and include it\'s contents with a `.pri` file. Here is\nhow:\n\n```bash\ngit submodule add git@github.com:itay-grudev/SingleApplication.git singleapplication\n```\n\n**Qmake:**\n\nThen include the `singleapplication.pri` file in your `.pro` project file.\n\n```qmake\ninclude(singleapplication/singleapplication.pri)\nDEFINES += QAPPLICATION_CLASS=QApplication\n```\n\n**CMake:**\n\nThen include the subdirectory in your `CMakeLists.txt` project file.\n\n```cmake\nset(QAPPLICATION_CLASS QApplication CACHE STRING "Inheritance class for SingleApplication")\nadd_subdirectory(src/third-party/singleapplication)\n```\n\nAlso don\'t forget to specify which `QCoreApplication` class your app is using if it\nis not `QCoreApplication` as in examples above.\n\nThe `Instance Started` signal\n------------------------\n\nThe SingleApplication class implements a `instanceStarted()` signal. You can\nbind to that signal to raise your application\'s window when a new instance had\nbeen started, for example.\n\n```cpp\n// window is a QWindow instance\nQObject::connect(\n    &app,\n    &SingleApplication::instanceStarted,\n    &window,\n    &QWindow::raise\n);\n```\n\nUsing `SingleApplication::instance()` is a neat way to get the\n`SingleApplication` instance for binding to it\'s signals anywhere in your\nprogram.\n\n__Note:__ On Windows the ability to bring the application windows to the\nforeground is restricted. See [Windows specific implementations](Windows.md)\nfor a workaround and an example implementation.\n\n\nSecondary Instances\n-------------------\n\nIf you want to be able to launch additional Secondary Instances (not related to\nyour Primary Instance) you have to enable that with the third parameter of the\n`SingleApplication` constructor. The default is `false` meaning no Secondary\nInstances. Here is an example of how you would start a Secondary Instance send\na message with the command line arguments to the primary instance and then shut\ndown.\n\n```cpp\nint main(int argc, char *argv[])\n{\n    SingleApplication app( argc, argv, true );\n\n    if( app.isSecondary() ) {\n        app.sendMessage(  app.arguments().join(\' \')).toUtf8() );\n        app.exit( 0 );\n    }\n\n    return app.exec();\n}\n```\n\n*__Note:__ A secondary instance won\'t cause the emission of the\n`instanceStarted()` signal by default. See `SingleApplication::Mode` for more\ndetails.*\n\nYou can check whether your instance is a primary or secondary with the following\nmethods:\n\n```cpp\napp.isPrimary();\n// or\napp.isSecondary();\n```\n\n*__Note:__ If your Primary Instance is terminated a newly launched instance\nwill replace the Primary one even if the Secondary flag has been set.*\n\nAPI\n---\n\n### Members\n\n```cpp\nSingleApplication::SingleApplication( int &argc, char *argv[], bool allowSecondary = false, Options options = Mode::User, int timeout = 100 )\n```\n\nDepending on whether `allowSecondary` is set, this constructor may terminate\nyour app if there is already a primary instance running. Additional `Options`\ncan be specified to set whether the SingleApplication block should work\nuser-wide or system-wide. Additionally the `Mode::SecondaryNotification` may be\nused to notify the primary instance whenever a secondary instance had been\nstarted (disabled by default). `timeout` specifies the maximum time in\nmilliseconds to wait for blocking operations.\n\n*__Note:__ `argc` and `argv` may be changed as Qt removes arguments that it\nrecognizes.*\n\n*__Note:__ `Mode::SecondaryNotification` only works if set on both the primary\nand the secondary instance.*\n\n*__Note:__ Operating system can restrict the shared memory blocks to the same\nuser, in which case the User/System modes will have no effect and the block will\nbe user wide.*\n\n---\n\n```cpp\nbool SingleApplication::sendMessage( QByteArray message, int timeout = 100 )\n```\n\nSends `message` to the Primary Instance. Uses `timeout` as a the maximum timeout\nin milliseconds for blocking functions\n\n---\n\n```cpp\nbool SingleApplication::isPrimary()\n```\n\nReturns if the instance is the primary instance.\n\n---\n\n```cpp\nbool SingleApplication::isSecondary()\n```\nReturns if the instance is a secondary instance.\n\n---\n\n```cpp\nquint32 SingleApplication::instanceId()\n```\n\nReturns a unique identifier for the current instance.\n\n---\n\n```cpp\nqint64 SingleApplication::primaryPid()\n```\n\nReturns the process ID (PID) of the primary instance.\n\n### Signals\n\n```cpp\nvoid SingleApplication::instanceStarted()\n```\n\nTriggered whenever a new instance had been started, except for secondary\ninstances if the `Mode::SecondaryNotification` flag is not specified.\n\n---\n\n```cpp\nvoid SingleApplication::receivedMessage( quint32 instanceId, QByteArray message )\n```\n\nTriggered whenever there is a message received from a secondary instance.\n\n---\n\n### Flags\n\n```cpp\nenum SingleApplication::Mode\n```\n\n*   `Mode::User` - The SingleApplication block should apply user wide. This adds\n    user specific data to the key used for the shared memory and server name.\n    This is the default functionality.\n*   `Mode::System` \xe2\x80\x93 The SingleApplication block applies system-wide.\n*   `Mode::SecondaryNotification` \xe2\x80\x93 Whether to trigger `instanceStarted()` even\n    whenever secondary instances are started.\n*   `Mode::ExcludeAppPath` \xe2\x80\x93 Excludes the application path from the server name\n    (and memory block) hash.\n*   `Mode::ExcludeAppVersion` \xe2\x80\x93 Excludes the application version from the server\n    name (and memory block) hash.\n\n*__Note:__ `Mode::SecondaryNotification` only works if set on both the primary\nand the secondary instance.*\n\n*__Note:__ Operating system can restrict the shared memory blocks to the same\nuser, in which case the User/System modes will have no effect and the block will\nbe user wide.*\n\n---\n\nVersioning\n----------\n\nEach major version introduces either very significant changes or is not\nbackwards compatible with the previous version. Minor versions only add\nadditional features, bug fixes or performance improvements and are backwards\ncompatible with the previous release. See [`CHANGELOG.md`](CHANGELOG.md) for\nmore details.\n\nImplementation\n--------------\n\nThe library is implemented with a QSharedMemory block which is thread safe and\nguarantees a race condition will not occur. It also uses a QLocalSocket to\nnotify the main process that a new instance had been spawned and thus invoke the\n`instanceStarted()` signal and for messaging the primary instance.\n\nAdditionally the library can recover from being forcefully killed on *nix\nsystems and will reset the memory block given that there are no other\ninstances running.\n\nLicense\n-------\nThis library and it\'s supporting documentation are released under\n`The MIT License (MIT)` with the exception of the Qt calculator examples which\nis distributed under the BSD license.\n'