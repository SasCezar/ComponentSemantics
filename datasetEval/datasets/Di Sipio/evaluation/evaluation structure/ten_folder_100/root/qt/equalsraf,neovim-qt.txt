b'\nNeovim client library and GUI, in Qt5.\n\n[![Build Status](https://circleci.com/gh/equalsraf/neovim-qt.svg?style=svg)](https://circleci.com/gh/equalsraf/neovim-qt)\n[![Build status](https://ci.appveyor.com/api/projects/status/c252f54mfjcuud8x/branch/master?svg=true)](https://ci.appveyor.com/project/equalsraf/neovim-qt/branch/master)\n[![Build Status](https://travis-ci.org/equalsraf/neovim-qt.svg?branch=master)](https://travis-ci.org/equalsraf/neovim-qt)\n[![Coverage Status](https://coveralls.io/repos/equalsraf/neovim-qt/badge.svg?branch=tb-refactor)](https://coveralls.io/r/equalsraf/neovim-qt)\n[![Downloads](https://img.shields.io/github/downloads/equalsraf/neovim-qt/total.svg?maxAge=2592000)](https://github.com/equalsraf/neovim-qt/releases)\n\n## Requirements\n\n* Qt5\n* Neovim\n\n## Building\n\nYou can build using CMake and your build system of choice. It should build in any\nsystem where Qt5 and Msgpack can build.\n\nFor Unix call\n\n    $ mkdir build\n    $ cd build\n    $ cmake -DCMAKE_BUILD_TYPE=Release ..\n    $ make\n\nfor Windows both MSVC and Mingw are supported. Use the following\n\n    $ mkdir build\n    $ cd build\n    $ cmake -DCMAKE_BUILD_TYPE=Release ..\n    $ cmake --build .\n\nFor MSVC build you may have to specify the VS version and build type. Always make sure the VS versions matches your Qt libraries.\n\n\t$ mkdir build\n\t$ cd build\n\t$ cmake -G "Visual Studio 14" -DCMAKE_BUILD_TYPE=Release ..\n\t$ cmake --build . --config Release --target install\n\nThe binaries will be under build/bin/. The GUI binary is called nvim-qt. Run make install to install it, or execute from the source setting the environment variable NVIM_QT_RUNTIME as the path holding the GUI shim plugin\n\n\t$ NVIM_QT_RUNTIME_PATH=../src/gui/runtime bin/nvim-qt\n\n## Using the GUI\n\nRun **nvim-qt**, the **nvim** binary must be in your $PATH. Check `nvim-qt --help` for additional options.\n\nCommands for interacting with the GUI are regular commands, available in the documentation [:help nvim-gui-shim](./src/gui/runtime/doc/nvim_gui_shim.txt). For example to change the font call\n\n\t:Guifont DejaVu Sans Mono:h13\n\nTo disable the GUI tabline and use the nvim TUI tabline, call\n\n\t:GuiTabline 0\n\nYou can set GUI options on startup, in the GUI configuration file (:help ginit.vim).\n\nIn recent versions of Neovim you can also use regular options (in init.vim) that have the same effect:\n\n- set guifont=DejaVu\\ Sans\\ Mono:h11\n- set linespace=4\n\n## Development\n\nThe *NeovimConnector* class is used to setup the connection to Neovim. It also\nprovides you with low level methods for RPC - in general you should be using\nthe signals/slots in the QObject returned by NeovimConnector::neovimObject()\n\n1. To call a function call the corresponding slot\n2. The result of the call is delivered by the corresponding signal,\n   by convention these signals are named \'on\\_\' + slot\\_name\n3. The Neovim() class is automagically generated from the Neovim\n   metadata\n5. For Neovim functions that take the **Object** type we use **QVariant**\n6. To catch Neovim Notifications connect to the Neovim::neovimNotification\n   signal\n\n### To Update the RPC bindings\n\nPart of the code is auto-generated by calling Neovim to get the API metadata,\nand generating C++ code. This is done using a python script\n(generate\\_bindings.py) if you just want to use neovim-qt as is you don\'t need\nto worry about this, I already include the generated code in the repository.\n\nThe bindings source templates are stored under the bindings/ folder the \ngenerated code is in src/auto/.\n\nTo generate the bindings yourself you need\n\n- python\n- python-msgpack\n- jinja2\n\nJust run `make bindings` in Unix or the equivalent build command in Windows.\n\n'