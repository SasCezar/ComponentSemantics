b'The **qt-json** project is a simple collection of functions for parsing and serializing [JSON][js] data to and from [QVariant][var] \nhierarchies.\n\n**NOTE:** Qt5 introduced [a native JSON object class][qt5]. If you are targeting Qt5, you should use that instead.\n\n### HOW TO USE ###\n#### Parsing JSON ####\n\nThe parser is really easy to use. Let\'s say we have the following \nQString of JSON data:\n\n```json\n{\n  "encoding" : "UTF-8",\n  "plug-ins" : [\n    "python",\n    "c++",\n    "ruby"\n  ],\n  "indent" : {\n    "length" : 3,\n    "use_space" : true\n  }\n}\n```\n\nWe would first call the parse-function:\n\n```cpp\n#include "json.h"\n\nbool ok;\n// json is a QString containing the JSON data\nQtJson::JsonObject result = QtJson::parse(json, ok).toMap();\n\nif(!ok) {\n  qFatal("An error occurred during parsing");\n```\n\nAssuming the parser completed without errors, we can then\ngo through the hierarchy:\n\n```cpp\nqDebug() << "encoding:" << result["encoding"].toString();\nqDebug() << "plugins:";\n\nforeach(QVariant plugin, result["plug-ins"].toList()) {\n    qDebug() << "  -" << plugin.toString();\n}\n\nQtJson::JsonObject nested = result["indent"].toMap();\nqDebug() << "length:" << nested["length"].toInt();\nqDebug() << "use_space:" << nested["use_space"].toBool();\n```\n\nThe previous code would print out the following:\n\n    encoding: "UTF-8"\n    plugins:\n      - "python"\n      - "c++"\n      - "ruby"\n    length: 3\n    use_space: true\n\n\n#### Serializing JSON ####\nTo write JSON data from Qt object is as simple as creating and assigning data to a [QVariantMap/JsonObject][varmap]:\n\n```cpp\nQtJson::JsonObject contributor;\ncontributor["name"] = "Luis Gustavo";\ncontributor["age"] = 22;\n\nQByteArray data = QtJson::serialize(contributor);\n```\n\nThe byte array \'data\' contains valid JSON data:\n\n```json\n{\n  "name": "Luis Gustavo",\n  "age": 22\n}\n```\n\n#### Serializing JSON pretty-print ####\nBy default, the serialization will create a _minified_ version, like following:\n\n```json\n{"name":"Luis Gustavo","age":22}\n```\n\nIf you are debugging or logging, you may prefer to enable **pretty-print** mode globally, before serialize:\n\n```cpp\nQtJson::setPrettySerialize(true);\n\nQByteArray data = QtJson::serialize(contributor);\n// ...\nQByteArray data = QtJson::serialize(other_contributor);\n```\n\nObviously, you can disable it with:\n```cpp\nQtJson::setPrettySerialize(false);\n```\n\n---\n\nAfter creating the QVariantMap, you can create a [QVariantList/JsonArray][varlist] and append the QVariantMaps. \n\n```cpp    \nQtJson::JsonObject friend1, friend2, friend3;\nfriend1["id"] = 1;\nfriend1["name"] = "Mackenzie Hamphrey";\n\nfriend2["id"] = 2;\nfriend2["name"] = "Melanie Molligan";\n\nfriend3["id"] = 3;\nfriend3["name"] = "Sydney Calhoun";\n\nQtJson::JsonArray friends;\nfriends.append(friend1);\nfriends.append(friend2);\nfriends.append(friend3);\n\nQtJson::JsonObject obj;\nobj["friends"] = friends;\n```\n\nThis way you create a nested structure:\n\n```json\n{\n    "friends": [\n        {\n            "id": 1,\n            "name": "MackenzieHamphrey"\n        },\n        {\n            "id": 2,\n            "name": "MelanieMolligan"\n        },\n        {\n            "id": 3,\n            "name": "SydneyCalhoun"\n        }\n    ]\n}\n```\n\nIf you continue this process recursively, you nest more levels into the JSON structure.\n\n\n#### Using Builders ####\n\nFor simplicity you can use **builders**, if you prefer.\n\nFor example, create a `JsonObject`:\n\n```cpp\nQtJson::JsonObject json = QtJson::objectBuilder()\n    ->set("field_1", 10)\n    ->set("field_2", "A string")\n    ->set("field_3", true)\n    ->set("field_4", QtJson::objectBuilder()\n        ->set("sub_field_1", 10.4)\n        ->set("sub_field_n", "Another string")\n    )\n    ->create();\n```\n\nOr create a `JsonArray`:\n\n```cpp\nQtJson::JsonArray json = QtJson::arrayBuilder()\n    ->add(5)\n    ->add(90.2)\n    ->add(true)\n    ->add("anything else")\n    ->create();\n```\n\nTake a look at this example that rewrite the previous one:\n\n```cpp\nQtJson::JsonObject obj = QtJson::objectBuilder()\n    ->set("friends", QtJson::arrayBuilder()\n        ->add(QtJson::objectBuilder()\n            ->set("id", 1)\n            ->set("name", "Mackenzie Hamphrey")\n        )\n        ->add(QtJson::objectBuilder()\n            ->set("id", 2)\n            ->set("name", "Melanie Molligan")\n        )\n        ->add(QtJson::objectBuilder()\n            ->set("id", 3)\n            ->set("name", "Sydney Calhoun")\n        )\n    )\n    ->create();\n```\n\n\n### 3. CONTRIBUTING ###\n\nSend in a pull request and bug the maintainer until it gets merged and published. \nMake sure to add yourself to AUTHORS.\n\n\n[js]: http://www.json.org/ "JSON Standard specification"\n[var]: http://qt-project.org/doc/qt-4.8/qvariant.html "QVariant class reference"\n[qt5]: http://qt-project.org/doc/qt-5.0/qtcore/qjsonobject.html "Qt5 QJsonObject class reference"\n[varmap]: http://qt-project.org/doc/qt-4.8/qvariant.html#QVariantMap-typedef "Qt4 QVariantMap class reference"\n[varlist]: http://qt-project.org/doc/qt-4.8/qvariant.html#QVariantList-typedef "Qt4 QVariantList class reference"\n'