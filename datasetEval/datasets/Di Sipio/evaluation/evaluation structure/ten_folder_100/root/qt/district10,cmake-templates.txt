b'# cmake-templates\n\nSome CMake Templates.\n\n## 1. Overview\n\n**Conventions**\n\n-   :smile: means tested okay/good\n-   :rage: means test result not sufficiently good\n-   :question: means not tested yet\n\n| Project                       | Linux + GCC 4.8+ | Win + VS2010 | Win + VS2015 | macOS   |\n| :---------------------------: | :--------------: | :----------: | :----------: | :---:   |\n| [c][refc]                     | :smile:          |  :smile:     | :smile:      | :smile: |\n| [c++][refcpp]                 | :smile:          |  :smile:     | :smile:      | :smile: |\n| [c++11][refcpp11]             | :smile:          |  :rage:      | :smile:      | :smile: |\n| [c++11vs2010][refcpp11vs2010] | :smile:          |  :smile:     | :smile:      | :smile: |\n| [module][refmodule]           | :smile:          |  :smile:     | :smile:      | :smile: |\n| [opencv][refocv]              | :question:       |  :smile:     | :question:   | :rage:  |\n| [opencv3][refocv3]            | :smile:          |  :question:  | :smile:      | :smile: |\n| [boost][refboost]             | :smile:          |  :smile:     | :question:   | :smile: |\n| [qt4-console][refqt4c]        | :smile:          |  :smile:     | :smile:      | :rage:  |\n| [qt4-gui][refqt4g]            | :smile:          |  :smile:     | :smile:      | :rage:  |\n| [qt4-project][refqt4p]        | :smile:          |  :smile:     | :smile:      | :rage:  |\n| [qt5-project][refqt5p]        | :smile:          |  :question:  | :smile:      | :smile: |\n\n\n[refc]: #31-c-example\n[refcpp]: #32-c-example\n[refcpp11]: #33-c11-example\n[refcpp11vs2010]: #33-c11-example\n[refmodule]: #34-example-to-show-how-to-modualize-your-project\n[refboost]: #35-example-with-support-of-boost\n[refocv]: #36-example-with-support-of-opencv\n[refocv3]: #36-example-with-support-of-opencv\n[refqt4c]: #37-example-with-support-of-qt4\n[refqt4g]: #37-example-with-support-of-qt4\n[refqt4p]: #37-example-with-support-of-qt4\n[refqt5p]: #38-example-with-support-of-qt5\n\n## 2. Usage\n\n### 2.1. Windows\n\nUse `CMake-GUI` to generate Visual Studio 2010 project, then use Visual Studio to compile & run.\n\nHere is a Tutorial: [HOWTO: Win + CMake + Visual Studio 2010 \xc2\xb7 Issue #1 \xc2\xb7 district10/cmake-templates](https://github.com/district10/cmake-templates/issues/1).\n\n### 2.2. Linux\n\nMost commonly, we build Makefile project:\n\n```bash\n# cd source dir (there should be a CMakeLists.txt)\nmkdir build && cd build\ncmake ..            # want a release build? try `cmake -DCMAKE_BUILD_TYPE=Release ..\'\nmake\n\n# then checkout the generated binary files\n```\n\nBut we can build CodeBlocks projects too, see my tutorial:\n[HOWTO: Linux + CMake + CodeBlocks + GNU Make \xc2\xb7 Issue #2 \xc2\xb7 district10/cmake-templates](https://github.com/district10/cmake-templates/issues/2),\nor use qt-creator to open CMakeLists.txt directly, see my tutorial:\n[HOWTO: Use Qt creator to Open CMakeLists.txt directly (will generate proper project files) \xc2\xb7 Issue #5 \xc2\xb7 district10/cmake-templates](https://github.com/district10/cmake-templates/issues/5).\n\n## 3. Examples\n\n### 3.1. C Example\n\nSimple C project.\n\n```cmake\nproject( C )\ncmake_minimum_required( VERSION 2.6 )\nadd_executable( ${PROJECT_NAME} main.c )\n```\n\n`cmake_minimum_required( ... )` is needed in root CMakeLists.txt, always.\n\nThe `${PROJECT_NAME}` is variable with value `C`,\nwhich is set by the `project( C )`.\n\nSee [c](c).\n\n### 3.2. C++ Example\n\nSimple C++ project.\n\n```cmake\nproject( CPP )\nmake_minimum_required( VERSION 2.6 )\nfile( GLOB SRCS *.c *.cpp *.cc *.h *.hpp )  # a variable called SRCS with all files whose path match "*.c *.cpp..."\nadd_executable( ${PROJECT_NAME} ${SRCS} )\n```\n\nSee [cpp](cpp).\n\n### 3.3. C++11 Example\n\nC++11 project.\n\n```cmake\ninclude( CheckCXXCompilerFlag )\ncheck_cxx_compiler_flag( "-std=c++11"   COMPILER_SUPPORTS_CXX11 )\ncheck_cxx_compiler_flag( "-std=c++0x"   COMPILER_SUPPORTS_CXX0X )\nif( COMPILER_SUPPORTS_CXX11 )\n    if( CMAKE_COMPILER_IS_GNUCXX )\n        set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=gnu++11" )\n    else()\n        set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11" )\n    endif()\nelseif( COMPILER_SUPPORTS_CXX0X)\n    set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x" )\nelse()\n    # MSVC, On by default (if available)\nendif()\n```\n\nSee [cpp11](cpp11).\n\nI recommend Visual Studio 2015 Community Edition.\n\n### 3.4. Example to Show How to Modualize Your Project\n\n```cmake\n# root cmakelists.txt\nproject( MODULES )\ncmake_minimum_required( VERSION 2.8.3 )\n\ninclude_directories( ${CMAKE_SOURCE_DIR}/includes )\n\nadd_subdirectory( src )\nadd_subdirectory( demo )\n\n# src dir\nadd_subdirectory( cubic )\nadd_subdirectory( extras )\nadd_subdirectory( square )\n\n# cubic\nadd_library( LibCubic ${CUBICS} cubic.c )\n\n# demo\nproject( CALC )\ncmake_minimum_required( VERSION 2.6 )\n\nset( EXTRA_LIBS ${EXTRA_LIBS} LibSquare )\nset( EXTRA_LIBS ${EXTRA_LIBS} LibExtras )\nset( EXTRA_LIBS ${EXTRA_LIBS} LibCubic )\n\nadd_executable( Calc calc.c )\ntarget_link_libraries( Calc  ${EXTRA_LIBS} )\n```\n\nSee [modules](modules).\n\n### 3.5. Example with Support of Boost\n\n```cmake\nproject( BOOST )\ncmake_minimum_required( VERSION 2.6 )\n\nfind_package( Boost REQUIRED )\nINCLUDE_DIRECTORIES( ${Boost_INCLUDE_DIR} )\nLINK_DIRECTORIES( ${Boost_LIBRARY_DIRS} )\nset( Boost_USE_STATIC_LIBS        OFF )\nset( Boost_USE_MULTITHREADED      ON )\nset( Boost_USE_STATIC_RUNTIME     OFF )\nset( BOOST_ALL_DYN_LINK           ON ) # force dynamic linking for all libraries\n\nadd_executable( ${PROJECT_NAME} main.cpp )\ntarget_link_libraries( ${PROJECT_NAME} ${Boost_LIBRARIES} )\n```\n\nUbuntu install: `sudo apt-get install libboost-all-dev`.\n\nSee [boost](boost).\n\n### 3.6. Example with Support of OpenCV\n\nWant to how to configure both opencv 2 & 3 on your system?\nCheckout my tutorial: [HOWTO: OpenCV 2 & OpenCV 3 \xc2\xb7 Issue #4 \xc2\xb7 district10/cmake-templates](https://github.com/district10/cmake-templates/issues/4).\n\nopencv 2 or less\n\n```cmake\nproject( OPENCV )\ncmake_minimum_required( VERSION 2.6 )\n\ninclude( $ENV{OpenCV2_DIR}/OpenCVConfig.cmake ) # find_package( OpenCV REQUIRED )\n\nmessage( STATUS "OpenCV library status:" )\nmessage( STATUS "    version: ${OpenCV_VERSION}" )\nmessage( STATUS "    libraries: ${OpenCV_LIBS}" )\nmessage( STATUS "    include path: ${OpenCV_INCLUDE_DIRS}" )\n\ninclude_directories( ${OpenCV_INCLUDE_DIRS} )\n\nadd_executable( ${PROJECT_NAME}  minarea.c )\ntarget_link_libraries( ${PROJECT_NAME} ${OpenCV_LIBS} )\n```\n\nopencv 3\n\n```cmake\nproject( OPENCV3 )\ncmake_minimum_required( VERSION 2.8 )\n\ninclude( $ENV{OpenCV3_DIR}/OpenCVConfig.cmake ) # find_package( OpenCV REQUIRED )\n\nmessage( STATUS "OpenCV library status:" )\nmessage( STATUS "    version: ${OpenCV_VERSION}" )\nmessage( STATUS "    libraries: ${OpenCV_LIBS}" )\nmessage( STATUS "    include path: ${OpenCV_INCLUDE_DIRS}" )\n\ninclude_directories( ${OpenCV_INCLUDE_DIRS} )\n\nadd_executable( ${PROJECT_NAME} example.cpp )\ntarget_link_libraries( ${PROJECT_NAME} ${OpenCV_LIBS} )\n```\n\nSee\n\n-   [opencv](opencv): for opencv2 or less (VS2010 :smile:, Linux :question:)\n-   [opencv3](opencv3): for opencv3 (VS2010 :question:, Linux :smile:)\n\n### 3.7. Example with Support of Qt4\n\nBe sure to make `qmake` caught by CMake, put it in your `$PATH`.\n\nqt4 console\n\n```cmake\nfind_package( Qt4 REQUIRED )\ninclude( ${QT_USE_FILE} )\nset( QT_DONT_USE_QTGUI TRUE )\n\nadd_executable( ${PROJECT_NAME} main.cpp )\ntarget_link_libraries( ${PROJECT_NAME}  ${QT_LIBRARIES} )\n```\n\nconfigure file\n\n```cmake\nconfigure_file(\n    "${PROJECT_SOURCE_DIR}/Configs.h.in"\n    "${PROJECT_BINARY_DIR}/Configs.h" )\n```\n\nmoc, uic\n\n```cmake\nfile( GLOB_RECURSE HDRS_FILES *.h *.hpp )\nfile( GLOB_RECURSE SRCS_FILES *.cpp )\nfile( GLOB_RECURSE UI_FILES *.ui )\n\nqt4_wrap_cpp( MOC_SRCS ${HDRS_FILES} )\nqt4_wrap_ui( UI_HDRS ${UI_FILES} )\n\nsource_group( "UI Files" FILES ${UI_FILES} )\nsource_group( "Generated Files" FILES ${MOC_SRCS} ${UI_HDRS} )\n\nadd_library( ${PROJECT_NAME} STATIC ${SRCS_FILES} ${UI_FILES} ${HDRS_FILES} ${MOC_SRCS} ${UI_HDRS} )\ntarget_link_libraries( ${PROJECT_NAME} ${QT_LIBRARIES} )\n```\n\nWorks like `qmake -project`, one ring to rule them all:\n\n```cmake\nproject( QT4 )\ncmake_minimum_required( VERSION 2.6 )\n\nfind_package( Qt4 REQUIRED )\ninclude( ${QT_USE_FILE} )\n\ninclude_directories( ${CMAKE_SOURCE_DIR}/ )\ninclude_directories( ${CMAKE_BINARY_DIR}/ )\n\n# based on: https://cmake.org/Wiki/CMakeMacroFilterOut\nmacro( filter_out FILTERS INPUTS OUTPUTS )\n    set( FOUT "" )\n    foreach( INP ${INPUTS} )\n        set( FILTERED 0 )\n        foreach( FILT ${FILTERS} )\n            if( ${FILTERED} EQUAL 0 )\n                if( "${FILT}" STREQUAL "${INP}" )\n                    set( FILTERED 1 )\n                endif( "${FILT}" STREQUAL "${INP}" )\n                if( ${INP} MATCHES ${FILT} )\n                    set( FILTERED 1 )\n                endif( ${INP} MATCHES ${FILT} )\n            endif( ${FILTERED} EQUAL 0 )\n        endforeach( FILT ${FILTERS} )\n        if( ${FILTERED} EQUAL 0 )\n            set( FOUT ${FOUT} ${INP} )\n        endif( ${FILTERED} EQUAL 0 )\n    endforeach( INP ${INPUTS} )\n    set( ${OUTPUTS} ${FOUT} )\nendmacro( filter_out FILTERS INPUTS OUTPUTS )\n\nfile( GLOB_RECURSE UI_FILES *.ui )\nfile( GLOB_RECURSE HDRS_FILES *.h *.hpp )\nfile( GLOB_RECURSE SRCS_FILES *.cpp *.c )\nfile( GLOB_RECURSE RCS_FILES *.qrc )\n\nset( FILTERS ".*CompilerId.*" )\nset( FILTERS ".*CMakeFiles/.*" )\nfilter_out("${FILTERS}" "${SRCS_FILES}" SRCS_FILES )\n\nqt4_wrap_cpp( MOC_SRCS ${HDRS_FILES} )\nqt4_wrap_ui( UI_HDRS ${UI_FILES} )\nqt4_add_resources( RCS ${RCS_FILES} )\n\nsource_group( "UI Files" FILES ${UI_FILES} )\nsource_group( "Generated Files" FILES ${MOC_SRCS} ${UI_HDRS} )\nsource_group( "All Resource Files" FILES ${RCS} )\n\nadd_executable( ${PROJECT_NAME}\n    ${MOC_SRCS}\n    ${HDRS_FILES}\n    ${SRCS_FILES}\n    ${UI_FILES}\n    ${UI_HDRS} ${RCS} )\ntarget_link_libraries( ${PROJECT_NAME} ${QT_LIBRARIES} )\n```\n\nSee\n\n-   [qt4 console application](qt4-console) (VS2010 :smile:, Linux :smile:)\n-   [qt4 GUI application](qt4-gui) (check out the [configs.h.in](qt4-gui/configs.h.in) file) (VS2010 :smile:, Linux :smile:)\n-   [qt4 application for lazy people](qt4-project), works like `qmake -project && qmake && make` on Linux (VS2010 :smile:, Linux :smile:)\n\n### 3.8. Example with Support of Qt5\n\n```cmake\nproject( Qt5Project )\ncmake_minimum_required( VERSION 2.8.11 )\n\n#                                           root of your msvc14 x64 prebuild\nset( CMAKE_PREFIX_PATH ${CMAKE_PREFIX_PATH} "C:/Qt/Qt5-msvc14/5.6/msvc2015_64" )\nset( CMAKE_INCLUDE_CURRENT_DIR ON )\nset( CMAKE_AUTOMOC ON )\n\nfind_package( Qt5Widgets REQUIRED )\nqt5_wrap_ui( UI_HEADERS mainwindow.ui )\nqt5_add_resources( QRCS resources.qrc )\nadd_executable( ${PROJECT_NAME} main.cpp mainwindow.cpp ${UI_HEADERS} ${QRCS} )\ntarget_link_libraries( ${PROJECT_NAME} Qt5::Widgets )\n```\n\nSee [qt5 project](qt5-project).\n\n### 3.9. Get\'em Together (advanced examples)\n\nThis part is called CMake in Action.\n\n-   [ToyAuthor/luapp: Using lua in C++ style. Build system is CMake.](https://github.com/ToyAuthor/luapp)\n    -   a great cmake wrapper for lua, a great c++ wrapper for lua\n    -   I forked it, and annotated (in chinese), it\'s really great! My fork: [4ker/luapp: Using lua in C++ style. Build system is CMake.](https://github.com/4ker/luapp).\n-   [district10/algo: \xe9\x87\x8d\xe5\xa4\x8d\xe9\x80\xa0\xe8\xbd\xae\xe5\xad\x90\xe3\x80\x82](https://github.com/district10/algo)\n    - Libs\n        -   google test (gmock), for testing and benchmarking, etc\n        -   cppformat, the missing string formating lib\n    -   modulized\n    -   advanced linking style\n-   <https://github.com/district10/bcp/tree/standalone>\n\n## 4. TODO\n\n-   More documentation\n-   More elegant & illustrative examples\n-   Planned Examples\n    -   for Windows, link `*.lib` files\n    -   for Linux, link `*.a`, `*.so` files, set `rpath`\n    -   *etc.*\n\n## 5. Snippets\n\ncpp -> exe\n\n```cmake\nfile( GLOB SRCS src/*.cpp)\nforeach( src ${SRCS} )\n    string( REGEX REPLACE "(^.*/|.cpp$)" "" exe ${src} )\n    message( STATUS "${exe} <-- ${src}" )\n    add_executable( ${exe} ${src} )\nendforeach( src )\n```\n\n## 6. ReadingList\n\nThese links may be useful:\n\n-   [Search \xc2\xb7 cmake templates](https://github.com/search?utf8=%E2%9C%93&q=cmake+templates)\n-   [giddie/qt-cmake-template: Project template using CMake / Qt / NSIS or WiX / MinGW or MSVS combined in easy-to-use form](https://github.com/giddie/qt-cmake-template)\n-   [cginternals/cmake-init: Template for reliable, cross-platform C++ project setup using cmake.](https://github.com/cginternals/cmake-init)\n\n## 7. Koan\n\n-   CMake\'s documentation is not for human. It really smells\n-   Adapt to various standards is by no means easy, it\'s kind of brain fucking\n'