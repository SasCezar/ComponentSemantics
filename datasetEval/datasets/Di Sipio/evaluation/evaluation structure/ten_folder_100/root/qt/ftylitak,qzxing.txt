b'# qzxing [![Build Status](https://travis-ci.com/ftylitak/qzxing.svg?branch=master)](https://travis-ci.com/ftylitak/qzxing) [![Build Status](https://ci.appveyor.com/api/projects/status/0033p4dyo49iy5jq?svg=true)](https://ci.appveyor.com/project/ftylitak/qzxing) [![Total alerts](https://img.shields.io/lgtm/alerts/g/ftylitak/qzxing.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/ftylitak/qzxing/alerts/) [![Language grade: C/C++](https://img.shields.io/lgtm/grade/cpp/g/ftylitak/qzxing.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/ftylitak/qzxing/context:cpp)\nQt/QML wrapper library for the [ZXing](https://github.com/zxing/zxing) barcode image processing library. \n\nSupports barcode decoding for the following types: \n\n * UPC-A \t\n * UPC-E \t\n * EAN-8 \t\n * EAN-13 \t\n * ITF \t\n * Code 39 \n * Code 93 \t\n * Code 128 (GS1) \t\n * Codabar \t\n * QR Code\n * Data Matrix\n * Aztec (beta)\n * PDF 417\n \n Supports barcode encoding for the following types:\n \n * QR Code\n \n# Table of contents\n1. [How to include](#howToInclude)\n    1. [Embed the source code](#embedInSourceCode)\n    1. [Compile the project as an external library](#externalLibrary)\n    1. [Control dependencies](#controlDependencies)\n        1. [QZXing (core)](#controlDependenciesCore)\n        1. [QZXing (core + QML)](#controlDependenciesCoreQML)\n        1. [QZXing + QZXingFilter](#controlDependenciesCoreQMLQZXingFilter)\n1. [How to use](#howTo)\n    1. [Decoding operation](#howToDecoding)\n        1. [C++/Qt](#howToDecodingCPP)\n        1. [Qt Quick](#howToDecodingQtQuick)\n    1. [Encoding operation](#howToEncoding)\n        1. [C++/Qt](#howToEncodingCPP)\n        1. [Qt Quick](#howToEncodingQtQuick)\n\t1. [Encoded text format Information](#howToEncodingFormatExamples)\n1. [Contact](#contact)\n\n<a name="howToInclude"></a>\n# How to include\n\nThe project can be used in two ways:\n<a name="embedInSourceCode"></a>\n## Embed the source code. \nCopy source code folder of QZXing to the root of your project. Add the following line to your .pro file. For more information see [here](https://github.com/ftylitak/qzxing/wiki/Using-the-QZXing-through-the-source-code).\n\n```qmake\ninclude(QZXing/QZXing.pri)\n```\n<a name="externalLibrary"></a>\n## Compile the project as an external library\nOpen QZXing project (QZXing.pro) and compile. If it is needed to compile as static library, uncomment the following line in the .pro file.\n\n```qmake\nCONFIG += staticlib\n```\n<a name="controlDependencies"></a>\n## Control dependencies \nProject file config tags are now introduced to be able to control the dependencies of the library accoring to the needs.\nThe core part requires only "core" and "gui" Qt modules. Though for backward compatibility "quick" Qt module is also required. \nThe 3 level of dependencies are:\n\n<a name="controlDependenciesCore"></a>\n### QZXing (core) \nBy including QZXing.pri or by building QZXing.pro you get the core functionality of QZXing which requires only QtCore and QtGui (because of QImage).\n\nWarning! The initial default configuration till 20/03/2017 was including qzxing_qml. This tag could not be removed once added, so it was needed to be removed from the defaults. \n\n<a name="controlDependenciesCoreQML"></a>\n### QZXing (core + QML) \nIf an application is going to use QML functionality, it is now possible to add the dependency to it. This can be done by adding the folloing line to the .pro file of its project:\n\t\n```qmake\nCONFIG += qzxing_qml\n```\n\n<a name="controlDependenciesCoreQMLQZXingFilter"></a>\n### QZXing + QZXingFilter \nQZXing includes QZXingFilter, a QAbstractVideoFilter implementation to provide a mean of providing live feed to the decoding library. It automatically includes QML implementation as well.\nThis option requires "multimedia" Qt module this is why it is considered as a separate configuration. It can be used by adding the folloing line to the .pro file of a project:\n\n```qmake\nCONFIG += qzxing_multimedia\n```\n<a name="howTo"></a>\t\n# How to use \n\nFollows simple code snippets that brefly show the use of the library. For more details advise the examples included in the repository and the [wiki](https://github.com/ftylitak/qzxing/wiki).\n\n<a name="howToDecoding"></a>\n## Decoding operation \n\n<a name="howToDecodingCPP"></a>\n### C++/Qt \n\n```cpp\n#include "QZXing.h"\n\nint main() \n{\n\tQImage imageToDecode("file.png");\n\tQZXing decoder;\n\tdecoder.setDecoder( DecoderFormat_QR_CODE | DecoderFormat_EAN_13 );\n\tQString result = decoder.decodeImage(imageToDecode);\n}\n```\n\t\n<a name="howToDecodingQtQuick"></a>\n### Qt Quick \n\nFirst register QZXing type to the QML engine.\n\n```cpp\n#include "QZXing.h"\n\nint main() \n{\n\t...\n\tQZXing::registerQMLTypes();\n\t...\n}\n```\n\t\nThe in the QML file \n\n```qml\nimport QZXing 2.3\n\nfunction decode(preview) {\n\timageToDecode.source = preview\n\tdecoder.decodeImageQML(imageToDecode);\n}\n\nImage{\n\tid:imageToDecode\n}\n\nQZXing{\n\tid: decoder\n\n\tenabledDecoders: QZXing.DecoderFormat_QR_CODE\n\n\tonDecodingStarted: console.log("Decoding of image started...")\n\n\tonTagFound: console.log("Barcode data: " + tag)\n\n\tonDecodingFinished: console.log("Decoding finished " + (succeeded==true ? "successfully" :    "unsuccessfully") )\n}\n```\n \n<a name="howToEncoding"></a>\n## Encoding operation \n\n<a name="howToEncodingCPP"></a>\n### C++/Qt \n\nThe encoding function has been written as static as it does not have any dependencies to data other than the ones provided by the arguments. \n\nUse the encoding function with its default settings: \n\n* Format: QR Code\n* Size: 240x240\n* Error Correction Level: Low (L)\n\n```cpp\n#include "QZXing.h"\n\nint main() \n{\n    QString data = "text to be encoded";\n    QImage barcode = QZXing::encodeData(data);\n}    \n```\n\nOr use the encoding function with custom settings:\n\n```cpp\nQString data = "text to be encoded";\nQImage barcode = QZXing::encodeData(data, QZXing::EncoderFormat_QR_CODE,\n\t\t\t\t\t\t\t\tQSize(width.toInt(), height.toInt()), QZXing::EncodeErrorCorrectionLevel_H);\n```\n\n<a name="howToEncodingQtQuick"></a>\n### Qt Quick \n\nThe encoding function can be easily used in QML through QZXing\'s Image Provider: "image://QZXing/encode/<data_to_be_encoded>". As with the C++ example, it can either be used with the default settings or with custom settings. \n\nDefault settings:\n\n```qml\nimport QZXing 2.3\n\nTextField {\n\tid: inputField\n\ttext: "Hello world!"\n}\n\nImage{\n\tsource: "image://QZXing/encode/" + inputField.text;\n\tcache: false;\n}\n```\n\nOr use the encoding function with the optional custom settings that are passed like URL query parameters:\n\n| attribute name  | value       | description                                   |\n| --------------- | ----------  | --------------------------------------------- |\n| border          | true, false | image has border (white 1px)                  |\n| correctionLevel | L, M, Q, H  | the error correction level                    |\n| format          | qrcode      | the encode formatter. Currently only QR Code. |\n| transparent     | true, false | whether the black pixels are transparent      |\n\nthe size of the image can be adjusted by using the Image.sourceWidth and Image.sourceHeight properties of Image QML element.\n\n```qml\nimport QZXing 2.3\n\nTextField {\n\tid: inputField\n\ttext: "Hello world!"\n}\n\nImage{\n\tsource: "image://QZXing/encode/" + inputField.text +\n\t\t\t\t\t"?correctionLevel=M" +\n\t\t\t\t\t"&format=qrcode"\n\tsourceSize.width: 320\n\tsourceSize.height: 320\n}\n```\n\n<a name="howToEncodingFormatExamples"></a>\n### Encoded text format Information\nHere is a list of contents that have been encoded and tested to be recognizable by the Android ZXing decoding application: \n[QR Code encoding wiki page](https://github.com/ftylitak/qzxing/wiki/QR-Code-encoding)\n\n<a name="contact"></a>\n# Contact \nIn case of bug reports or feature requests feel free to open an [issue](https://github.com/ftylitak/qzxing/issues). \n'