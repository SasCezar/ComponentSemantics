b"# bombardier [![Build Status](https://semaphoreci.com/api/v1/codesenberg/bombardier/branches/master/shields_badge.svg)](https://semaphoreci.com/codesenberg/bombardier) [![Go Report Card](https://goreportcard.com/badge/github.com/codesenberg/bombardier)](https://goreportcard.com/report/github.com/codesenberg/bombardier) [![GoDoc](https://godoc.org/github.com/codesenberg/bombardier?status.svg)](http://godoc.org/github.com/codesenberg/bombardier) [![Coverage](https://gocover.io/_badge/github.com/codesenberg/bombardier)](https://gocover.io/github.com/codesenberg/bombardier)\r\nbombardier is a HTTP(S) benchmarking tool. It is written in Go programming language and uses excellent [fasthttp](https://github.com/valyala/fasthttp) instead of Go's default http library, because of its lightning fast performance. \r\n\r\nWith `bombardier v1.1` and higher you can now use `net/http` client if you need to test HTTP/2.x services or want to use a more RFC-compliant HTTP client.\r\n\r\nTested on go1.8 and higher.\r\n\r\n## Installation\r\nYou can grab binaries in the [releases](https://github.com/codesenberg/bombardier/releases) section.\r\nAlternatively, to get latest and greatest run:\r\n\r\n`go get -u github.com/codesenberg/bombardier`\r\n\r\n## Usage\r\n```\r\nbombardier [<flags>] <url>\r\n```\r\n\r\nFor a more detailed information about flags consult [GoDoc](http://godoc.org/github.com/codesenberg/bombardier).\r\n\r\n## Known issues\r\nAFAIK, it's impossible to pass Host header correctly with `fasthttp`, you can use `net/http`(`--http1`/`--http2` flags) to workaround this issue.\r\n\r\n## Examples\r\nExample of running `bombardier` against [this server](https://godoc.org/github.com/codesenberg/bombardier/cmd/utils/simplebenchserver):\r\n```\r\n> bombardier -c 125 -n 10000000 http://localhost:8080\r\nBombarding http://localhost:8080 with 10000000 requests using 125 connections\r\n 10000000 / 10000000 [============================================] 100.00% 37s Done!\r\nStatistics        Avg      Stdev        Max\r\n  Reqs/sec    264560.00   10733.06     268434\r\n  Latency      471.00us   522.34us    51.00ms\r\n  HTTP codes:\r\n    1xx - 0, 2xx - 10000000, 3xx - 0, 4xx - 0, 5xx - 0\r\n    others - 0\r\n  Throughput:   292.92MB/s\r\n```\r\nOr, against a realworld server(with latency distribution):\r\n```\r\n> bombardier -c 200 -d 10s -l http://ya.ru\r\nBombarding http://ya.ru for 10s using 200 connections\r\n[=========================================================================] 10s Done!\r\nStatistics        Avg      Stdev        Max\r\n  Reqs/sec      6607.00     524.56       7109\r\n  Latency       29.86ms     5.36ms   305.02ms\r\n  Latency Distribution\r\n     50%    28.00ms\r\n     75%    32.00ms\r\n     90%    34.00ms\r\n     99%    48.00ms\r\n  HTTP codes:\r\n    1xx - 0, 2xx - 0, 3xx - 66561, 4xx - 0, 5xx - 0\r\n    others - 5\r\n  Errors:\r\n    dialing to the given TCP address timed out - 5\r\n  Throughput:     3.06MB/s\r\n```\r\n"