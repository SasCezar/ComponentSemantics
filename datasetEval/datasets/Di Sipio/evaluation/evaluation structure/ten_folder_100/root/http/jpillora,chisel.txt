b'# chisel\n\n[![GoDoc](https://godoc.org/github.com/jpillora/chisel?status.svg)](https://godoc.org/github.com/jpillora/chisel)\n\nChisel is a fast TCP tunnel, transported over HTTP, secured via SSH. Single executable including both client and server. Written in Go (golang). Chisel is mainly useful for passing through firewalls, though it can also be used to provide a secure endpoint into your network. Chisel is very similar to [crowbar](https://github.com/q3k/crowbar) though achieves **much** higher [performance](#performance).\n\n![overview](https://docs.google.com/drawings/d/1p53VWxzGNfy8rjr-mW8pvisJmhkoLl82vAgctO_6f1w/pub?w=960&h=720)\n\n### Features\n\n- Easy to use\n- [Performant](#performance)\\*\n- [Encrypted connections](#security) using the SSH protocol (via `crypto/ssh`)\n- [Authenticated connections](#authentication); authenticated client connections with a users config file, authenticated server connections with fingerprint matching.\n- Client auto-reconnects with [exponential backoff](https://github.com/jpillora/backoff)\n- Client can create multiple tunnel endpoints over one TCP connection\n- Client can optionally pass through HTTP CONNECT proxies\n- Server optionally doubles as a [reverse proxy](http://golang.org/pkg/net/http/httputil/#NewSingleHostReverseProxy)\n- Server optionally allows [SOCKS5](https://en.wikipedia.org/wiki/SOCKS) connections (See [guide below](#socks5-guide))\n- Reverse port forwarding\n\n### Install\n\n**Binaries**\n\n[![Releases](https://img.shields.io/github/release/jpillora/chisel.svg)](https://github.com/jpillora/chisel/releases) [![Releases](https://img.shields.io/github/downloads/jpillora/chisel/total.svg)](https://github.com/jpillora/chisel/releases)\n\nSee [the latest release](https://github.com/jpillora/chisel/releases/latest) or download and install it now with `curl https://i.jpillora.com/chisel! | bash`\n\n**Docker**\n\n[![Docker Pulls](https://img.shields.io/docker/pulls/jpillora/chisel.svg)](https://hub.docker.com/r/jpillora/chisel/) [![Image Size](https://images.microbadger.com/badges/image/jpillora/chisel.svg)](https://microbadger.com/images/jpillora/chisel)\n\n```sh\ndocker run --rm -it jpillora/chisel --help\n```\n\n**Source**\n\n```sh\n$ go get -v github.com/jpillora/chisel\n```\n\n### Demo\n\nA [demo app](https://chisel-demo.herokuapp.com) on Heroku is running this `chisel server`:\n\n```sh\n$ chisel server --port $PORT --proxy http://example.com\n# listens on $PORT, proxy web requests to http://example.com\n```\n\nThis demo app is also running a [simple file server](https://www.npmjs.com/package/serve) on `:3000`, which is normally inaccessible due to Heroku\'s firewall. However, if we tunnel in with:\n\n```sh\n$ chisel client https://chisel-demo.herokuapp.com 3000\n# connects to chisel server at https://chisel-demo.herokuapp.com,\n# tunnels your localhost:3000 to the server\'s localhost:3000\n```\n\nand then visit [localhost:3000](http://localhost:3000/), we should see a directory listing. Also, if we visit the [demo app](https://chisel-demo.herokuapp.com) in the browser we should hit the server\'s default proxy and see a copy of [example.com](http://example.com).\n\n### Usage\n\n```\n$ chisel --help\n\n   Usage: chisel [command] [--help]\n\n   Version: X.Y.Z\n\n   Commands:\n     server - runs chisel in server mode\n     client - runs chisel in client mode\n\n   Read more:\n     https://github.com/jpillora/chisel\n```\n\n```\n$ chisel server --help\n\n  Usage: chisel server [options]\n\n  Options:\n\n    --host, Defines the HTTP listening host \xe2\x80\x93 the network interface\n    (defaults the environment variable HOST and falls back to 0.0.0.0).\n\n    --port, -p, Defines the HTTP listening port (defaults to the environment\n    variable PORT and fallsback to port 8080).\n\n    --key, An optional string to seed the generation of a ECDSA public\n    and private key pair. All communications will be secured using this\n    key pair. Share the subsequent fingerprint with clients to enable detection\n    of man-in-the-middle attacks (defaults to the CHISEL_KEY environment\n    variable, otherwise a new key is generate each run).\n\n    --authfile, An optional path to a users.json file. This file should\n    be an object with users defined like:\n      {\n        "<user:pass>": ["<addr-regex>","<addr-regex>"]\n      }\n    when <user> connects, their <pass> will be verified and then\n    each of the remote addresses will be compared against the list\n    of address regular expressions for a match. Addresses will\n    always come in the form "<remote-host>:<remote-port>" for normal remotes\n    and "R:<local-interface>:<local-port>" for reverse port forwarding\n    remotes. This file will be automatically reloaded on change.\n\n    --auth, An optional string representing a single user with full\n    access, in the form of <user:pass>. This is equivalent to creating an\n    authfile with {"<user:pass>": [""]}.\n\n    --proxy, Specifies another HTTP server to proxy requests to when\n    chisel receives a normal HTTP request. Useful for hiding chisel in\n    plain sight.\n\n    --socks5, Allow clients to access the internal SOCKS5 proxy. See\n    chisel client --help for more information.\n\n    --reverse, Allow clients to specify reverse port forwarding remotes\n    in addition to normal remotes.\n\n    --pid Generate pid file in current working directory\n\n    -v, Enable verbose logging\n\n    --help, This help text\n\n  Signals:\n    The chisel process is listening for:\n      a SIGUSR2 to print process stats, and\n      a SIGHUP to short-circuit the client reconnect timer\n\n  Version:\n    X.Y.Z\n\n  Read more:\n    https://github.com/jpillora/chisel\n\n\n```\n\n```\n$ chisel client --help\n\n  Usage: chisel client [options] <server> <remote> [remote] [remote] ...\n\n  <server> is the URL to the chisel server.\n\n  <remote>s are remote connections tunneled through the server, each of\n  which come in the form:\n\n    <local-host>:<local-port>:<remote-host>:<remote-port>\n\n    \xe2\x96\xa0 local-host defaults to 0.0.0.0 (all interfaces).\n    \xe2\x96\xa0 local-port defaults to remote-port.\n    \xe2\x96\xa0 remote-port is required*.\n    \xe2\x96\xa0 remote-host defaults to 0.0.0.0 (server localhost).\n\n  which shares <remote-host>:<remote-port> from the server to the client\n  as <local-host>:<local-port>, or:\n\n    R:<local-interface>:<local-port>:<remote-host>:<remote-port>\n\n  which does reverse port forwarding, sharing <remote-host>:<remote-port>\n  from the client to the server\'s <local-interface>:<local-port>.\n\n    example remotes\n\n      3000\n      example.com:3000\n      3000:google.com:80\n      192.168.0.5:3000:google.com:80\n      socks\n      5000:socks\n      R:2222:localhost:22\n\n    When the chisel server has --socks5 enabled, remotes can\n    specify "socks" in place of remote-host and remote-port.\n    The default local host and port for a "socks" remote is\n    127.0.0.1:1080. Connections to this remote will terminate\n    at the server\'s internal SOCKS5 proxy.\n\n    When the chisel server has --reverse enabled, remotes can\n    be prefixed with R to denote that they are reversed. That\n    is, the server will listen and accept connections, and they\n    will be proxied through the client which specified the remote.\n\n  Options:\n\n    --fingerprint, A *strongly recommended* fingerprint string\n    to perform host-key validation against the server\'s public key.\n    You may provide just a prefix of the key or the entire string.\n    Fingerprint mismatches will close the connection.\n\n    --auth, An optional username and password (client authentication)\n    in the form: "<user>:<pass>". These credentials are compared to\n    the credentials inside the server\'s --authfile. defaults to the\n    AUTH environment variable.\n\n    --keepalive, An optional keepalive interval. Since the underlying\n    transport is HTTP, in many instances we\'ll be traversing through\n    proxies, often these proxies will close idle connections. You must\n    specify a time with a unit, for example \'30s\' or \'2m\'. Defaults\n    to \'0s\' (disabled).\n\n    --max-retry-count, Maximum number of times to retry before exiting.\n    Defaults to unlimited.\n\n    --max-retry-interval, Maximum wait time before retrying after a\n    disconnection. Defaults to 5 minutes.\n\n    --proxy, An optional HTTP CONNECT proxy which will be used reach\n    the chisel server. Authentication can be specified inside the URL.\n    For example, http://admin:password@my-server.com:8081\n\n    --hostname, Optionally set the \'Host\' header (defaults to the host\n    defined in the endpoint url).\n\n    --pid Generate pid file in current working directory\n\n    -v, Enable verbose logging\n\n    --help, This help text\n\n  Signals:\n    The chisel process is listening for:\n      a SIGUSR2 to print process stats, and\n      a SIGHUP to short-circuit the client reconnect timer\n\n  Version:\n    X.Y.Z\n\n  Read more:\n    https://github.com/jpillora/chisel\n\n\n```\n\n### Security\n\nEncryption is always enabled. When you start up a chisel server, it will generate an in-memory ECDSA public/private key pair. The public key fingerprint will be displayed as the server starts. Instead of generating a random key, the server may optionally specify a key seed, using the `--key` option, which will be used to seed the key generation. When clients connect, they will also display the server\'s public key fingerprint. The client can force a particular fingerprint using the `--fingerprint` option. See the `--help` above for more information.\n\n### Authentication\n\nUsing the `--authfile` option, the server may optionally provide a `user.json` configuration file to create a list of accepted users. The client then authenticates using the `--auth` option. See [users.json](example/users.json) for an example authentication configuration file. See the `--help` above for more information.\n\nInternally, this is done using the _Password_ authentication method provided by SSH. Learn more about `crypto/ssh` here http://blog.gopheracademy.com/go-and-ssh/.\n\n### SOCKS5 Guide\n\n1. Start your chisel server\n\n```sh\ndocker run \\\n  --name chisel -p 9312:9312 \\\n  -d --restart always \\\n  jpillora/chisel server -p 9312 --socks5 --key supersecret\n```\n\n2. Connect your chisel client (using server\'s fingerprint)\n\n```sh\nchisel client --fingerprint ab:12:34 server-address:9312 socks\n```\n\n3. Point your SOCKS5 clients (e.g. OS/Browser) to:\n\n```\nlocalhost:1080\n```\n\n4. Now you have an encrypted, authenticated SOCKS5 connection over HTTP\n\n### Performance\n\nWith [crowbar](https://github.com/q3k/crowbar), a connection is tunneled by repeatedly querying the server with updates. This results in a large amount of HTTP and TCP connection overhead. Chisel overcomes this using WebSockets combined with [crypto/ssh](https://golang.org/x/crypto/ssh) to create hundreds of logical connections, resulting in **one** TCP connection per client.\n\nIn this simple benchmark, we have:\n\n```\n\t\t\t\t\t(direct)\n        .--------------->----------------.\n       /    chisel         chisel         \\\nrequest--->client:2001--->server:2002---->fileserver:3000\n       \\                                  /\n        \'--> crowbar:4001--->crowbar:4002\'\n             client           server\n```\n\nNote, we\'re using an in-memory "file" server on localhost for these tests\n\n_direct_\n\n```\n:3000 => 1 bytes in 1.291417ms\n:3000 => 10 bytes in 713.525\xc2\xb5s\n:3000 => 100 bytes in 562.48\xc2\xb5s\n:3000 => 1000 bytes in 595.445\xc2\xb5s\n:3000 => 10000 bytes in 1.053298ms\n:3000 => 100000 bytes in 741.351\xc2\xb5s\n:3000 => 1000000 bytes in 1.367143ms\n:3000 => 10000000 bytes in 8.601549ms\n:3000 => 100000000 bytes in 76.3939ms\n```\n\n`chisel`\n\n```\n:2001 => 1 bytes in 1.351976ms\n:2001 => 10 bytes in 1.106086ms\n:2001 => 100 bytes in 1.005729ms\n:2001 => 1000 bytes in 1.254396ms\n:2001 => 10000 bytes in 1.139777ms\n:2001 => 100000 bytes in 2.35437ms\n:2001 => 1000000 bytes in 11.502673ms\n:2001 => 10000000 bytes in 123.130246ms\n:2001 => 100000000 bytes in 966.48636ms\n```\n\n~100MB in **~1 second**\n\n`crowbar`\n\n```\n:4001 => 1 bytes in 3.335797ms\n:4001 => 10 bytes in 1.453007ms\n:4001 => 100 bytes in 1.811727ms\n:4001 => 1000 bytes in 1.621525ms\n:4001 => 10000 bytes in 5.20729ms\n:4001 => 100000 bytes in 38.461926ms\n:4001 => 1000000 bytes in 358.784864ms\n:4001 => 10000000 bytes in 3.603206487s\n:4001 => 100000000 bytes in 36.332395213s\n```\n\n~100MB in **36 seconds**\n\nSee more [test/](test/)\n\n### Known Issues\n\n- WebSockets support is required\n  _ IaaS providers all will support WebSockets\n  _ Unless an unsupporting HTTP proxy has been forced in front of you, in which case I\'d argue that you\'ve been downgraded to PaaS.\n  _ PaaS providers vary in their support for WebSockets\n  _ Heroku has full support\n  _ Openshift has full support though connections are only accepted on ports 8443 and 8080\n  _ Google App Engine has **no** support (Track this on [their repo](https://code.google.com/p/googleappengine/issues/detail?id=2535))\n\n### Contributing\n\n- http://golang.org/doc/code.html\n- http://golang.org/doc/effective_go.html\n- `github.com/jpillora/chisel/share` contains the shared package\n- `github.com/jpillora/chisel/server` contains the server package\n- `github.com/jpillora/chisel/client` contains the client package\n\n### Changelog\n\n- `1.0` - Initial release\n- `1.1` - Swapped out simple symmetric encryption for ECDSA SSH\n- `1.2` - Added SOCKS5 (server) and HTTP CONNECT (client) support\n- `1.3` - Added reverse tunnelling support\n\n### Todo\n\n- Better, faster tests\n- Expose a stats page for proxy throughput\n- Treat client stdin/stdout as a socket\n\n#### MIT License\n\nCopyright \xc2\xa9 2017 Jaime Pillora &lt;dev@jpillora.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\'Software\'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \'AS IS\', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n'