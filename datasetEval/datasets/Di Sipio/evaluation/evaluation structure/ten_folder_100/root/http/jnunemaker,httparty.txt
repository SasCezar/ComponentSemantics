b'# httparty\n\nMakes http fun again!  Ain\'t no party like a httparty, because a httparty don\'t stop.\n\n## Install\n\n```\ngem install httparty\n```\n\n## Requirements\n\n* Ruby 2.0.0 or higher\n* multi_xml\n* You like to party!\n\n## Examples\n\n```ruby\n# Use the class methods to get down to business quickly\nresponse = HTTParty.get(\'http://api.stackexchange.com/2.2/questions?site=stackoverflow\')\n\nputs response.body, response.code, response.message, response.headers.inspect\n\n# Or wrap things up in your own class\nclass StackExchange\n  include HTTParty\n  base_uri \'api.stackexchange.com\'\n\n  def initialize(service, page)\n    @options = { query: { site: service, page: page } }\n  end\n\n  def questions\n    self.class.get("/2.2/questions", @options)\n  end\n\n  def users\n    self.class.get("/2.2/users", @options)\n  end\nend\n\nstack_exchange = StackExchange.new("stackoverflow", 1)\nputs stack_exchange.questions\nputs stack_exchange.users\n```\n\nSee the [examples directory](http://github.com/jnunemaker/httparty/tree/master/examples) for even more goodies.\n\n## Command Line Interface\n\nhttparty also includes the executable `httparty` which can be\nused to query web services and examine the resulting output. By default\nit will output the response as a pretty-printed Ruby object (useful for\ngrokking the structure of output). This can also be overridden to output\nformatted XML or JSON. Execute `httparty --help` for all the\noptions. Below is an example of how easy it is.\n\n```\nhttparty "https://api.stackexchange.com/2.2/questions?site=stackoverflow"\n```\n\n## Help and Docs\n\n* [Docs](https://github.com/jnunemaker/httparty/tree/master/docs)\n* https://groups.google.com/forum/#!forum/httparty-gem\n* https://www.rubydoc.info/github/jnunemaker/httparty\n* http://stackoverflow.com/questions/tagged/httparty\n\n## Contributing\n\n* Fork the project.\n* Run `bundle`\n* Run `bundle exec rake`\n* Make your feature addition or bug fix.\n* Add tests for it. This is important so I don\'t break it in a future version unintentionally.\n* Run `bundle exec rake` (No, REALLY :))\n* Commit, do not mess with rakefile, version, or history. (if you want to have your own version, that is fine but bump version in a commit by itself in another branch so I can ignore when I pull)\n* Send me a pull request. Bonus points for topic branches.\n'