b'# PHP Curl Class: HTTP requests made easy\n\n[![](https://img.shields.io/github/release/php-curl-class/php-curl-class.svg)](https://github.com/php-curl-class/php-curl-class/releases/)\n[![](https://img.shields.io/github/license/php-curl-class/php-curl-class.svg)](https://github.com/php-curl-class/php-curl-class/blob/master/LICENSE)\n[![](https://img.shields.io/travis/php-curl-class/php-curl-class.svg)](https://travis-ci.org/php-curl-class/php-curl-class/)\n[![](https://img.shields.io/packagist/dt/php-curl-class/php-curl-class.svg)](https://github.com/php-curl-class/php-curl-class/releases/)\n\nPHP Curl Class makes it easy to send HTTP requests and integrate with web APIs.\n\n![PHP Curl Class screencast](www/img/screencast.gif)\n\n---\n\n- [Installation](#installation)\n- [Requirements](#requirements)\n- [Quick Start and Examples](#quick-start-and-examples)\n- [Available Methods](#available-methods)\n- [Security](#security)\n- [Troubleshooting](#troubleshooting)\n- [Run Tests](#run-tests)\n- [Contribute](#contribute)\n\n---\n\n### Installation\n\nTo install PHP Curl Class, simply:\n\n    $ composer require php-curl-class/php-curl-class\n\nFor latest commit version:\n\n    $ composer require php-curl-class/php-curl-class @dev\n\n### Requirements\n\nPHP Curl Class works with PHP 5.3, 5.4, 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, and HHVM.\n\n### Quick Start and Examples\n\nMore examples are available under [/examples](https://github.com/php-curl-class/php-curl-class/tree/master/examples).\n\n```php\nrequire __DIR__ . \'/vendor/autoload.php\';\n\nuse \\Curl\\Curl;\n\n$curl = new Curl();\n$curl->get(\'https://www.example.com/\');\n\nif ($curl->error) {\n    echo \'Error: \' . $curl->errorCode . \': \' . $curl->errorMessage . "\\n";\n} else {\n    echo \'Response:\' . "\\n";\n    var_dump($curl->response);\n}\n```\n\n```php\n// https://www.example.com/search?q=keyword\n$curl = new Curl();\n$curl->get(\'https://www.example.com/search\', array(\n    \'q\' => \'keyword\',\n));\n```\n\n```php\n$curl = new Curl();\n$curl->post(\'https://www.example.com/login/\', array(\n    \'username\' => \'myusername\',\n    \'password\' => \'mypassword\',\n));\n```\n\n```php\n$curl = new Curl();\n$curl->setBasicAuthentication(\'username\', \'password\');\n$curl->setUserAgent(\'MyUserAgent/0.0.1 (+https://www.example.com/bot.html)\');\n$curl->setReferrer(\'https://www.example.com/url?url=https%3A%2F%2Fwww.example.com%2F\');\n$curl->setHeader(\'X-Requested-With\', \'XMLHttpRequest\');\n$curl->setCookie(\'key\', \'value\');\n$curl->get(\'https://www.example.com/\');\n\nif ($curl->error) {\n    echo \'Error: \' . $curl->errorCode . \': \' . $curl->errorMessage . "\\n";\n} else {\n    echo \'Response:\' . "\\n";\n    var_dump($curl->response);\n}\n\nvar_dump($curl->requestHeaders);\nvar_dump($curl->responseHeaders);\n```\n\n```php\n$curl = new Curl();\n$curl->setOpt(CURLOPT_FOLLOWLOCATION, true);\n$curl->get(\'https://shortn.example.com/bHbVsP\');\n```\n\n```php\n$curl = new Curl();\n$curl->put(\'https://api.example.com/user/\', array(\n    \'first_name\' => \'Zach\',\n    \'last_name\' => \'Borboa\',\n));\n```\n\n```php\n$curl = new Curl();\n$curl->patch(\'https://api.example.com/profile/\', array(\n    \'image\' => \'@path/to/file.jpg\',\n));\n```\n\n```php\n$curl = new Curl();\n$curl->patch(\'https://api.example.com/profile/\', array(\n    \'image\' => new CURLFile(\'path/to/file.jpg\'),\n));\n```\n\n```php\n$curl = new Curl();\n$curl->delete(\'https://api.example.com/user/\', array(\n    \'id\' => \'1234\',\n));\n```\n\n```php\n// Enable all supported encoding types and download a file.\n$curl = new Curl();\n$curl->setOpt(CURLOPT_ENCODING , \'\');\n$curl->download(\'https://www.example.com/file.bin\', \'/tmp/myfile.bin\');\n```\n\n```php\n// Case-insensitive access to headers.\n$curl = new Curl();\n$curl->download(\'https://www.example.com/image.png\', \'/tmp/myimage.png\');\necho $curl->responseHeaders[\'Content-Type\'] . "\\n"; // image/png\necho $curl->responseHeaders[\'CoNTeNT-TyPE\'] . "\\n"; // image/png\n```\n\n```php\n// Manual clean up.\n$curl->close();\n```\n\n```php\n// Example access to curl object.\ncurl_set_opt($curl->curl, CURLOPT_USERAGENT, \'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1\');\ncurl_close($curl->curl);\n```\n\n```php\nrequire __DIR__ . \'/vendor/autoload.php\';\n\nuse \\Curl\\MultiCurl;\n\n// Requests in parallel with callback functions.\n$multi_curl = new MultiCurl();\n\n$multi_curl->success(function($instance) {\n    echo \'call to "\' . $instance->url . \'" was successful.\' . "\\n";\n    echo \'response:\' . "\\n";\n    var_dump($instance->response);\n});\n$multi_curl->error(function($instance) {\n    echo \'call to "\' . $instance->url . \'" was unsuccessful.\' . "\\n";\n    echo \'error code: \' . $instance->errorCode . "\\n";\n    echo \'error message: \' . $instance->errorMessage . "\\n";\n});\n$multi_curl->complete(function($instance) {\n    echo \'call completed\' . "\\n";\n});\n\n$multi_curl->addGet(\'https://www.google.com/search\', array(\n    \'q\' => \'hello world\',\n));\n$multi_curl->addGet(\'https://duckduckgo.com/\', array(\n    \'q\' => \'hello world\',\n));\n$multi_curl->addGet(\'https://www.bing.com/search\', array(\n    \'q\' => \'hello world\',\n));\n\n$multi_curl->start(); // Blocks until all items in the queue have been processed.\n```\n\nMore examples are available under [/examples](https://github.com/php-curl-class/php-curl-class/tree/master/examples).\n\n### Available Methods\n```php\nCurl::__construct($base_url = null)\nCurl::__destruct()\nCurl::__get($name)\nCurl::attemptRetry()\nCurl::beforeSend($callback)\nCurl::buildPostData($data)\nCurl::call()\nCurl::close()\nCurl::complete($callback)\nCurl::delete($url, $query_parameters = array(), $data = array())\nCurl::download($url, $mixed_filename)\nCurl::error($callback)\nCurl::exec($ch = null)\nCurl::execDone()\nCurl::get($url, $data = array())\nCurl::getAttempts()\nCurl::getBeforeSendCallback()\nCurl::getCompleteCallback()\nCurl::getCookie($key)\nCurl::getCurl()\nCurl::getCurlErrorCode()\nCurl::getCurlErrorMessage()\nCurl::getDownloadCompleteCallback()\nCurl::getDownloadFileName()\nCurl::getErrorCallback()\nCurl::getErrorCode()\nCurl::getErrorMessage()\nCurl::getFileHandle()\nCurl::getHttpErrorMessage()\nCurl::getHttpStatusCode()\nCurl::getId()\nCurl::getInfo($opt = null)\nCurl::getJsonDecoder()\nCurl::getOpt($option)\nCurl::getRawResponse()\nCurl::getRawResponseHeaders()\nCurl::getRemainingRetries()\nCurl::getRequestHeaders()\nCurl::getResponse()\nCurl::getResponseCookie($key)\nCurl::getResponseCookies()\nCurl::getResponseHeaders()\nCurl::getRetries()\nCurl::getRetryDecider()\nCurl::getSuccessCallback()\nCurl::getUrl()\nCurl::getXmlDecoder()\nCurl::head($url, $data = array())\nCurl::isChildOfMultiCurl()\nCurl::isCurlError()\nCurl::isError()\nCurl::isHttpError()\nCurl::options($url, $data = array())\nCurl::patch($url, $data = array())\nCurl::post($url, $data = \'\', $follow_303_with_post = false)\nCurl::progress($callback)\nCurl::put($url, $data = array())\nCurl::removeHeader($key)\nCurl::reset()\nCurl::search($url, $data = array())\nCurl::setBasicAuthentication($username, $password = \'\')\nCurl::setConnectTimeout($seconds)\nCurl::setCookie($key, $value)\nCurl::setCookieFile($cookie_file)\nCurl::setCookieJar($cookie_jar)\nCurl::setCookieString($string)\nCurl::setCookies($cookies)\nCurl::setDefaultDecoder($mixed = \'json\')\nCurl::setDefaultJsonDecoder()\nCurl::setDefaultTimeout()\nCurl::setDefaultUserAgent()\nCurl::setDefaultXmlDecoder()\nCurl::setDigestAuthentication($username, $password = \'\')\nCurl::setHeader($key, $value)\nCurl::setHeaders($headers)\nCurl::setJsonDecoder($mixed)\nCurl::setMaxFilesize($bytes)\nCurl::setOpt($option, $value)\nCurl::setOpts($options)\nCurl::setPort($port)\nCurl::setProxy($proxy, $port = null, $username = null, $password = null)\nCurl::setProxyAuth($auth)\nCurl::setProxyTunnel($tunnel = true)\nCurl::setProxyType($type)\nCurl::setReferer($referer)\nCurl::setReferrer($referrer)\nCurl::setRetry($mixed)\nCurl::setTimeout($seconds)\nCurl::setUrl($url, $mixed_data = \'\')\nCurl::setUserAgent($user_agent)\nCurl::setXmlDecoder($mixed)\nCurl::success($callback)\nCurl::unsetHeader($key)\nCurl::unsetProxy()\nCurl::verbose($on = true, $output = STDERR)\nMultiCurl::__construct($base_url = null)\nMultiCurl::__destruct()\nMultiCurl::addCurl(Curl $curl)\nMultiCurl::addDelete($url, $query_parameters = array(), $data = array())\nMultiCurl::addDownload($url, $mixed_filename)\nMultiCurl::addGet($url, $data = array())\nMultiCurl::addHead($url, $data = array())\nMultiCurl::addOptions($url, $data = array())\nMultiCurl::addPatch($url, $data = array())\nMultiCurl::addPost($url, $data = \'\', $follow_303_with_post = false)\nMultiCurl::addPut($url, $data = array())\nMultiCurl::addSearch($url, $data = array())\nMultiCurl::beforeSend($callback)\nMultiCurl::close()\nMultiCurl::complete($callback)\nMultiCurl::error($callback)\nMultiCurl::getOpt($option)\nMultiCurl::removeHeader($key)\nMultiCurl::setBasicAuthentication($username, $password = \'\')\nMultiCurl::setConcurrency($concurrency)\nMultiCurl::setConnectTimeout($seconds)\nMultiCurl::setCookie($key, $value)\nMultiCurl::setCookieFile($cookie_file)\nMultiCurl::setCookieJar($cookie_jar)\nMultiCurl::setCookieString($string)\nMultiCurl::setCookies($cookies)\nMultiCurl::setDigestAuthentication($username, $password = \'\')\nMultiCurl::setHeader($key, $value)\nMultiCurl::setHeaders($headers)\nMultiCurl::setJsonDecoder($mixed)\nMultiCurl::setOpt($option, $value)\nMultiCurl::setOpts($options)\nMultiCurl::setPort($port)\nMultiCurl::setProxies($proxies)\nMultiCurl::setProxy($proxy, $port = null, $username = null, $password = null)\nMultiCurl::setProxyAuth($auth)\nMultiCurl::setProxyTunnel($tunnel = true)\nMultiCurl::setProxyType($type)\nMultiCurl::setReferer($referer)\nMultiCurl::setReferrer($referrer)\nMultiCurl::setRetry($mixed)\nMultiCurl::setTimeout($seconds)\nMultiCurl::setUrl($url)\nMultiCurl::setUserAgent($user_agent)\nMultiCurl::setXmlDecoder($mixed)\nMultiCurl::start()\nMultiCurl::success($callback)\nMultiCurl::unsetHeader($key)\nMultiCurl::unsetProxy()\nMultiCurl::verbose($on = true, $output = STDERR)\n```\n\n### Security\n\nSee [SECURITY](https://github.com/php-curl-class/php-curl-class/blob/master/SECURITY.md) for security considerations.\n\n### Troubleshooting\n\nSee [TROUBLESHOOTING](https://github.com/php-curl-class/php-curl-class/blob/master/TROUBLESHOOTING.md) for troubleshooting.\n\n### Run Tests\n\nTo run tests:\n\n    $ git clone https://github.com/php-curl-class/php-curl-class.git\n    $ cd php-curl-class/\n    $ composer update\n    $ ./tests/run.sh\n\nTo run select tests:\n\n    $ git clone https://github.com/php-curl-class/php-curl-class.git\n    $ cd php-curl-class/\n    $ composer update\n    $ ./tests/run.sh --filter=keyword\n\nTo test all PHP versions in containers:\n\n    $ git clone https://github.com/php-curl-class/php-curl-class.git\n    $ cd php-curl-class/\n    $ ./tests/test_all.sh\n\n### Contribute\n\n1. Check for open issues or open a new issue to start a discussion around a bug or feature.\n1. Fork the repository on GitHub to start making your changes.\n1. Write one or more tests for the new feature or that expose the bug.\n1. Make code changes to implement the feature or fix the bug.\n1. Send a pull request to get your changes merged and published.\n'