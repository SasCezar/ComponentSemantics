b'# Klein.php\n\n[![Build Status](https://travis-ci.org/klein/klein.php.png?branch=master)](https://travis-ci.org/klein/klein.php)\n\n**klein.php** is a fast & flexible router for PHP 5.3+\n\n* Flexible regular expression routing (inspired by [Sinatra](http://www.sinatrarb.com/))\n* A set of [boilerplate methods](#api) for rapidly building web apps\n* Almost no overhead => [2500+ requests/second](https://gist.github.com/878833)\n\n## Getting started\n\n1. PHP 5.3.x is required\n2. Install Klein using [Composer](#composer-installation) (recommended) or manually\n3. Setup [URL rewriting](https://gist.github.com/874000) so that all requests are handled by **index.php**\n4. (Optional) Throw in some [APC](http://pecl.php.net/package/APC) for good measure\n\n## Composer Installation\n\n1. Get [Composer](http://getcomposer.org/)\n2. Require Klein with `php composer.phar require klein/klein`\n3. Add the following to your application\'s main PHP file: `require \'vendor/autoload.php\';`\n\n## Example\n\n*Hello World* - Obligatory hello world example\n\n```php\n<?php\nrequire_once __DIR__ . \'/vendor/autoload.php\';\n\n$klein = new \\Klein\\Klein();\n\n$klein->respond(\'GET\', \'/hello-world\', function () {\n    return \'Hello World!\';\n});\n\n$klein->dispatch();\n```\n\n*Example 1* - Respond to all requests\n\n```php\n$klein->respond(function () {\n    return \'All the things\';\n});\n```\n\n*Example 2* - Named parameters\n\n```php\n$klein->respond(\'/[:name]\', function ($request) {\n    return \'Hello \' . $request->name;\n});\n```\n\n*Example 3* - [So RESTful](http://bit.ly/g93B1s)\n\n```php\n$klein->respond(\'GET\', \'/posts\', $callback);\n$klein->respond(\'POST\', \'/posts\', $callback);\n$klein->respond(\'PUT\', \'/posts/[i:id]\', $callback);\n$klein->respond(\'DELETE\', \'/posts/[i:id]\', $callback);\n$klein->respond(\'OPTIONS\', null, $callback);\n\n// To match multiple request methods:\n$klein->respond(array(\'POST\',\'GET\'), $route, $callback);\n\n// Or you might want to handle the requests in the same place\n$klein->respond(\'/posts/[create|edit:action]?/[i:id]?\', function ($request, $response) {\n    switch ($request->action) {\n        //\n    }\n});\n```\n\n*Example 4* - Sending objects / files\n\n```php\n$klein->respond(function ($request, $response, $service) {\n    $service->xml = function ($object) {\n        // Custom xml output function\n    }\n    $service->csv = function ($object) {\n        // Custom csv output function\n    }\n});\n\n$klein->respond(\'/report.[xml|csv|json:format]?\', function ($request, $response, $service) {\n    // Get the format or fallback to JSON as the default\n    $send = $request->param(\'format\', \'json\');\n    $response->$send($report);\n});\n\n$klein->respond(\'/report/latest\', function ($request, $response, $service) {\n    $response->file(\'/tmp/cached_report.zip\');\n});\n```\n\n*Example 5* - All together\n\n```php\n$klein->respond(function ($request, $response, $service, $app) use ($klein) {\n    // Handle exceptions => flash the message and redirect to the referrer\n    $klein->onError(function ($klein, $err_msg) {\n        $klein->service()->flash($err_msg);\n        $klein->service()->back();\n    });\n\n    // The fourth parameter can be used to share scope and global objects\n    $app->db = new PDO(...);\n\n    // $app also can store lazy services, e.g. if you don\'t want to\n    // instantiate a database connection on every response\n    $app->register(\'db\', function() {\n        return new PDO(...);\n    });\n});\n\n$klein->respond(\'POST\', \'/users/[i:id]/edit\', function ($request, $response, $service, $app) {\n    // Quickly validate input parameters\n    $service->validateParam(\'username\', \'Please enter a valid username\')->isLen(5, 64)->isChars(\'a-zA-Z0-9-\');\n    $service->validateParam(\'password\')->notNull();\n\n    $app->db->query(...); // etc.\n\n    // Add view properties and helper methods\n    $service->title = \'foo\';\n    $service->escape = function ($str) {\n        return htmlentities($str); // Assign view helpers\n    };\n\n    $service->render(\'myview.phtml\');\n});\n\n// myview.phtml:\n<title><?php echo $this->escape($this->title) ?></title>\n```\n\n## Route namespaces\n\n```php\n$klein->with(\'/users\', function () use ($klein) {\n\n    $klein->respond(\'GET\', \'/?\', function ($request, $response) {\n        // Show all users\n    });\n\n    $klein->respond(\'GET\', \'/[:id]\', function ($request, $response) {\n        // Show a single user\n    });\n\n});\n\nforeach(array(\'projects\', \'posts\') as $controller) {\n    // Include all routes defined in a file under a given namespace\n    $klein->with("/$controller", "controllers/$controller.php");\n}\n```\n\nIncluded files are run in the scope of Klein (`$klein`) so all Klein\nmethods/properties can be accessed with `$this`\n\n_Example file for: "controllers/projects.php"_\n```php\n// Routes to "/projects/?"\n$this->respond(\'GET\', \'/?\', function ($request, $response) {\n    // Show all projects\n});\n```\n\n## Lazy services\n\nServices can be stored **lazily**, meaning that they are only instantiated on\nfirst use.\n\n``` php\n<?php\n$klein->respond(function ($request, $response, $service, $app) {\n    $app->register(\'lazyDb\', function() {\n        $db = new stdClass();\n        $db->name = \'foo\';\n        return $db;\n    });\n});\n\n//Later\n\n$klein->respond(\'GET\', \'/posts\', function ($request, $response, $service, $app) {\n    // $db is initialised on first request\n    // all subsequent calls will use the same instance\n    return $app->lazyDb->name;\n});\n```\n\n## Validators\n\nTo add a custom validator use `addValidator($method, $callback)`\n\n```php\n$service->addValidator(\'hex\', function ($str) {\n    return preg_match(\'/^[0-9a-f]++$/i\', $str);\n});\n```\n\nYou can validate parameters using `is<$method>()` or `not<$method>()`, e.g.\n\n```php\n$service->validateParam(\'key\')->isHex();\n```\n\nOr you can validate any string using the same flow..\n\n```php\n$service->validate($username)->isLen(4,16);\n```\n\nValidation methods are chainable, and a custom exception message can be specified for if/when validation fails\n\n```php\n$service->validateParam(\'key\', \'The key was invalid\')->isHex()->isLen(32);\n```\n\n## Routing\n\n**[** *match_type* **:** *param_name* **]**\n\nSome examples\n\n    *                    // Match all request URIs\n    [i]                  // Match an integer\n    [i:id]               // Match an integer as \'id\'\n    [a:action]           // Match alphanumeric characters as \'action\'\n    [h:key]              // Match hexadecimal characters as \'key\'\n    [:action]            // Match anything up to the next / or end of the URI as \'action\'\n    [create|edit:action] // Match either \'create\' or \'edit\' as \'action\'\n    [*]                  // Catch all (lazy)\n    [*:trailing]         // Catch all as \'trailing\' (lazy)\n    [**:trailing]        // Catch all (possessive - will match the rest of the URI)\n    .[:format]?          // Match an optional parameter \'format\' - a / or . before the block is also optional\n\nSome more complicated examples\n\n    /posts/[*:title][i:id]     // Matches "/posts/this-is-a-title-123"\n    /output.[xml|json:format]? // Matches "/output", "output.xml", "output.json"\n    /[:controller]?/[:action]? // Matches the typical /controller/action format\n\n**Note** - *all* routes that match the request URI are called - this\nallows you to incorporate complex conditional logic such as user\nauthentication or view layouts. e.g. as a basic example, the following\ncode will wrap other routes with a header and footer\n\n```php\n$klein->respond(\'*\', function ($request, $response, $service) { $service->render(\'header.phtml\'); });\n//other routes\n$klein->respond(\'*\', function ($request, $response, $service) { $service->render(\'footer.phtml\'); });\n```\n\nRoutes automatically match the entire request URI. If you need to match\nonly a part of the request URI or use a custom regular expression, use the `@` operator. If you need to\nnegate a route, use the `!` operator\n\n```php\n// Match all requests that end with \'.json\' or \'.csv\'\n$klein->respond(\'@\\.(json|csv)$\', ...\n\n// Match all requests that _don\'t_ start with /admin\n$klein->respond(\'!@^/admin/\', ...\n```\n\n## Views\n\nYou can send properties or helpers to the view by assigning them\nto the `$service` object, or by using the second arg of `$service->render()`\n\n```php\n$service->escape = function ($str) {\n    return htmlentities($str);\n};\n\n$service->render(\'myview.phtml\', array(\'title\' => \'My View\'));\n\n// Or just: $service->title = \'My View\';\n```\n\n*myview.phtml*\n\n```html\n<title><?php echo $this->escape($this->title) ?></title>\n```\n\nViews are compiled and run in the scope of `$service` so all service methods can be accessed with `$this`\n\n```php\n$this->render(\'partial.html\')           // Render partials\n$this->sharedData()->get(\'myvar\')       // Access stored service variables\necho $this->query(array(\'page\' => 2))   // Modify the current query string\n```\n\n## API\n\nBelow is a list of the public methods in the common classes you will most likely use. For a more formal source\nof class/method documentation, please see the [PHPdoc generated documentation](http://klein.github.io/klein.php/docs/).\n\n```php\n$request->\n    id($hash = true)                    // Get a unique ID for the request\n    paramsGet()                         // Return the GET parameter collection\n    paramsPost()                        // Return the POST parameter collection\n    paramsNamed()                       // Return the named parameter collection\n    cookies()                           // Return the cookies collection\n    server()                            // Return the server collection\n    headers()                           // Return the headers collection\n    files()                             // Return the files collection\n    body()                              // Get the request body\n    params()                            // Return all parameters\n    params($mask = null)                // Return all parameters that match the mask array - extract() friendly\n    param($key, $default = null)        // Get a request parameter (get, post, named)\n    isSecure()                          // Was the request sent via HTTPS?\n    ip()                                // Get the request IP\n    userAgent()                         // Get the request user agent\n    uri()                               // Get the request URI\n    pathname()                          // Get the request pathname\n    method()                            // Get the request method\n    method($method)                     // Check if the request method is $method, i.e. method(\'post\') => true\n    query($key, $value = null)          // Get, add to, or modify the current query string\n    <param>                             // Get / Set (if assigned a value) a request parameter\n\n$response->\n    protocolVersion($protocol_version = null)       // Get the protocol version, or set it to the passed value\n    body($body = null)                              // Get the response body\'s content, or set it to the passed value\n    status()                                        // Get the response\'s status object\n    headers()                                       // Return the headers collection\n    cookies()                                       // Return the cookies collection\n    code($code = null)                              // Return the HTTP response code, or set it to the passed value\n    prepend($content)                               // Prepend a string to the response body\n    append($content)                                // Append a string to the response body\n    isLocked()                                      // Check if the response is locked\n    requireUnlocked()                               // Require that a response is unlocked\n    lock()                                          // Lock the response from further modification\n    unlock()                                        // Unlock the response\n    sendHeaders($override = false)                  // Send the HTTP response headers\n    sendCookies($override = false)                  // Send the HTTP response cookies\n    sendBody()                                      // Send the response body\'s content\n    send()                                          // Send the response and lock it\n    isSent()                                        // Check if the response has been sent\n    chunk($str = null)                              // Enable response chunking (see the wiki)\n    header($key, $value = null)                     // Set a response header\n    cookie($key, $value = null, $expiry = null)     // Set a cookie\n    cookie($key, null)                              // Remove a cookie\n    noCache()                                       // Tell the browser not to cache the response\n    redirect($url, $code = 302)                     // Redirect to the specified URL\n    dump($obj)                                      // Dump an object\n    file($path, $filename = null)                   // Send a file\n    json($object, $jsonp_prefix = null)             // Send an object as JSON or JSONP by providing padding prefix\n\n$service->\n    sharedData()                                    // Return the shared data collection\n    startSession()                                  // Start a session and return its ID\n    flash($msg, $type = \'info\', $params = array()   // Set a flash message\n    flashes($type = null)                           // Retrieve and clears all flashes of $type\n    markdown($str, $args, ...)                      // Return a string formatted with markdown\n    escape($str)                                    // Escape a string\n    refresh()                                       // Redirect to the current URL\n    back()                                          // Redirect to the referer\n    query($key, $value = null)                      // Modify the current query string\n    query($arr)\n    layout($layout)                                 // Set the view layout\n    yieldView()                                     // Call inside the layout to render the view content\n    render($view, $data = array())                  // Render a view or partial (in the scope of $response)\n    partial($view, $data = array())                 // Render a partial without a layout (in the scope of $response)\n    addValidator($method, $callback)                // Add a custom validator method\n    validate($string, $err = null)                  // Validate a string (with a custom error message)\n    validateParam($param, $err = null)                  // Validate a param\n    <callback>($arg1, ...)                          // Call a user-defined helper\n    <property>                                      // Get a user-defined property\n\n$app->\n    <callback>($arg1, ...)                          //Call a user-defined helper\n\n$validator->\n    notNull()                           // The string must not be null\n    isLen($length)                      // The string must be the exact length\n    isLen($min, $max)                   // The string must be between $min and $max length (inclusive)\n    isInt()                             // Check for a valid integer\n    isFloat()                           // Check for a valid float/decimal\n    isEmail()                           // Check for a valid email\n    isUrl()                             // Check for a valid URL\n    isIp()                              // Check for a valid IP\n    isAlpha()                           // Check for a-z (case insensitive)\n    isAlnum()                           // Check for alphanumeric characters\n    contains($needle)                   // Check if the string contains $needle\n    isChars($chars)                     // Validate against a character list\n    isRegex($pattern, $modifiers = \'\')  // Validate against a regular expression\n    notRegex($pattern, $modifiers =\'\')\n    is<Validator>()                     // Validate against a custom validator\n    not<Validator>()                    // The validator can\'t match\n    <Validator>()                       // Alias for is<Validator>()\n```\n\n## Unit Testing\n\nUnit tests are a crucial part of developing a routing engine such as Klein.\nAdded features or bug-fixes can have adverse effects that are hard to find\nwithout a lot of testing, hence the importance of unit testing.\n\nThis project uses [PHPUnit](https://github.com/sebastianbergmann/phpunit/) as\nits unit testing framework.\n\nThe tests all live in `/tests` and each test extends an abstract class\n`AbstractKleinTest`\n\nTo test the project, simply run `php composer.phar install --dev` to download\na common version of PHPUnit with composer and run the tests from the main\ndirectory with `./vendor/bin/phpunit`\n\n## Contributing\n\nSee the [contributing guide](CONTRIBUTING.md) for more info\n\n## More information\n\nSee the [wiki](https://github.com/klein/klein.php/wiki) for more information\n\n## Contributors\n\n- [Trevor N. Suarez](https://github.com/Rican7)\n\n## License\n\n(MIT License)\n\nCopyright (c) 2010 Chris O\'Hara <cohara87@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n'