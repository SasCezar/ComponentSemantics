b'# warp\n\n[![Travis Build Status](https://travis-ci.org/seanmonstar/warp.svg?branch=master)](https://travis-ci.org/seanmonstar/warp)\n[![MIT licensed](https://img.shields.io/badge/license-MIT-blue.svg)](./LICENSE)\n[![crates.io](https://img.shields.io/crates/v/warp.svg)](https://crates.io/crates/warp)\n[![Released API docs](https://docs.rs/warp/badge.svg)](https://docs.rs/warp)\n\nA super-easy, composable, web server framework for warp speeds.\n\nThe fundamental building block of `warp` is the `Filter`: they can be combined\nand composed to express rich requirements on requests.\n\nThanks to its `Filter` system, warp provides these out of the box:\n\n* Path routing and parameter extraction\n* Header requirements and extraction\n* Query string deserialization\n* JSON and Form bodies\n* Multipart form data\n* Static Files and Directories\n* Websockets\n* Access logging\n\nSince it builds on top of [hyper](https://hyper.rs), you automatically get:\n\n- HTTP/1\n- HTTP/2\n- Asynchronous\n- One of the fastest HTTP implementations\n- Tested and **correct**\n\n**NOTE**: warp\'s [master](https://github.com/seanmonstar/warp/tree/master) branch currently preparing breaking changes, for the most recently released code, look to the [0.1.x](https://github.com/seanmonstar/warp/tree/0.1.x) branch.\n\n## Example\n\n```rust\nuse warp::{self, path, Filter};\n\nfn main() {\n    // GET /hello/warp => 200 OK with body "Hello, warp!"\n    let hello = path!("hello" / String)\n        .map(|name| format!("Hello, {}!", name));\n\n    warp::serve(hello)\n        .run(([127, 0, 0, 1], 3030));\n}\n```\n\nFor more information you can check the [docs](https://docs.rs/warp) or the [examples](https://github.com/seanmonstar/warp/tree/master/examples).\n'