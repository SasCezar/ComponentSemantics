b'About\n-----\n\nKore (https://kore.io) is an easy to use web application platform for\nwriting scalable web APIs in C. Its main goals are security, scalability\nand allowing rapid development and deployment of such APIs.\n\nBecause of this Kore is an ideal candidate for building robust, scalable and secure web things.\n\nKey Features\n------------\n* Supports SNI\n* Supports HTTP/1.1\n* Websocket support\n* Privseps by default\n* TLS enabled by default\n* Optional background tasks\n* Built-in parameter validation\n* Optional asynchronous PostgreSQL support\n* Optional support for page handlers in Python\n* Reload private keys and certificates on-the-fly\n* Automatic X509 certificates via ACME (with privsep)\n* Private keys isolated in separate process (RSA and ECDSA)\n* Default sane TLS ciphersuites (PFS in all major browsers)\n* Modules can be reloaded on-the-fly, even while serving content\n* Worker processes sandboxed on OpenBSD (pledge) and Linux (seccomp)\n* Event driven (epoll/kqueue) architecture with per CPU worker processes\n* Build your web application as a precompiled dynamic library or single binary\n\nAnd lots more.\n\nLicense\n-------\n* Kore is licensed under the ISC license\n\nDocumentation\n--------------\n[Read the documentation](https://docs.kore.io/3.3.0/)\n\nPerformance\n-----------\nRead the [benchmarks](https://blog.kore.io/posts/benchmarks) blog post.\n\nPlatforms supported\n-------------------\n* Linux\n* OpenBSD\n* FreeBSD\n* MacOS\n\nBuilding Kore\n-------------\nClone this repository or get the latest release at [https://kore.io/releases/3.2.0](https://kore.io/releases/3.2.0).\n\nRequirements\n* openssl (1.0.2, 1.1.0 or 1.1.1)\n  (note: libressl 3.0.0+ works as a replacement)\n\nRequirement for asynchronous curl (optional)\n* libcurl\n\nRequirements for background tasks (optional)\n* pthreads\n\nRequirements for pgsql (optional)\n* libpq\n\nRequirements for python (optional)\n* Python 3.6+\n\nNormal compilation and installation:\n\n```\n$ cd kore\n$ make\n# make install\n```\n\nIf you would like to build a specific flavor, you can enable\nthose by setting a shell environment variable before running **_make_**.\n\n* ACME=1 (compiles in ACME support)\n* CURL=1 (compiles in asynchronous curl support)\n* TASKS=1 (compiles in task support)\n* PGSQL=1 (compiles in pgsql support)\n* DEBUG=1 (enables use of -d for debug)\n* NOHTTP=1 (compiles Kore without HTTP support)\n* NOOPT=1 (disable compiler optimizations)\n* JSONRPC=1 (compiles in JSONRPC support)\n* PYTHON=1 (compiles in the Python support)\n\nNote that certain build flavors cannot be mixed together and you will just\nbe met with compilation errors.\n\nExample applications\n-----------------\nYou can find example applications under **_examples/_**.\n\nThe examples contain a README file with instructions on how\nto build or use them.\n\nMailing lists\n-------------\n\n**patches@kore.io** - Send patches here, preferably inline.\n\n**users@kore.io** - Questions regarding kore.\n\n\nIf you want to signup to those mailing lists send an empty email to\n\tlistname+subscribe@kore.io\n\n\nOther mailboxes (these are **not** mailing lists):\n\n**security@kore.io** - Mail this email if you think you found a security problem.\n\n**sponsor@kore.io** - If your company would like to sponsor part of Kore development.\n\nMore information can be found on https://kore.io/\n'