b'<p align="center">\n<img alt="PRDownloader" src=https://raw.githubusercontent.com/MindorksOpenSource/PRDownloader/master/assets/prdownloader.png />\n</p>\n\n# PRDownloader - A file downloader library for Android with pause and resume support\n[![Mindorks Android Store](https://img.shields.io/badge/Mindorks%20Android%20Store-PRDownloader-blue.svg?style=flat)](https://mindorks.com/android/store)\n[![Mindorks](https://img.shields.io/badge/mindorks-opensource-blue.svg)](https://mindorks.com/open-source-projects)\n[![Mindorks Community](https://img.shields.io/badge/join-community-blue.svg)](https://mindorks.com/join-community)\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n\n## Sample Download\n<img src=https://raw.githubusercontent.com/MindorksOpenSource/PRDownloader/master/assets/sample_download.png width=360 height=640 />\n\n### Overview of PRDownloader library\n* PRDownloader can be used to download any type of files like image, video, pdf, apk and etc.\n* This file downloader library supports pause and resume while downloading a file.\n* Supports large file download.\n* This downloader library has a simple interface to make download request.\n* We can check if the status of downloading with the given download Id.\n* PRDownloader gives callbacks for everything like onProgress, onCancel, onStart, onError and etc while downloading a file.\n* Supports proper request canceling.\n* Many requests can be made in parallel.\n* All types of customization are possible.\n\n## Using PRDownloader Library in your Android application\n\nAdd this in your build.gradle\n```groovy\nimplementation \'com.mindorks.android:prdownloader:0.6.0\'\n```\nDo not forget to add internet permission in manifest if already not present\n```xml\n<uses-permission android:name="android.permission.INTERNET" />\n```\nThen initialize it in onCreate() Method of application class :\n```java\nPRDownloader.initialize(getApplicationContext());\n```\nInitializing it with some customization\n```java\n// Enabling database for resume support even after the application is killed:\nPRDownloaderConfig config = PRDownloaderConfig.newBuilder()\n                .setDatabaseEnabled(true)\n                .build();\nPRDownloader.initialize(getApplicationContext(), config);\n\n// Setting timeout globally for the download network requests:\nPRDownloaderConfig config = PRDownloaderConfig.newBuilder()\n                .setReadTimeout(30_000)\n                .setConnectTimeout(30_000)\n                .build();\nPRDownloader.initialize(getApplicationContext(), config); \n```\n\n### Make a download request\n```java\nint downloadId = PRDownloader.download(url, dirPath, fileName)\n                        .build()\n                        .setOnStartOrResumeListener(new OnStartOrResumeListener() {\n                            @Override\n                            public void onStartOrResume() {\n                               \n                            }\n                        })\n                        .setOnPauseListener(new OnPauseListener() {\n                            @Override\n                            public void onPause() {\n                               \n                            }\n                        })\n                        .setOnCancelListener(new OnCancelListener() {\n                            @Override\n                            public void onCancel() {\n                                \n                            }\n                        })\n                        .setOnProgressListener(new OnProgressListener() {\n                            @Override\n                            public void onProgress(Progress progress) {\n                               \n                            }\n                        })\n                        .start(new OnDownloadListener() {\n                            @Override\n                            public void onDownloadComplete() {\n                               \n                            }\n\n                            @Override\n                            public void onError(Error error) {\n                               \n                            }\n                        });            \n```\n\n### Pause a download request\n```java\nPRDownloader.pause(downloadId);\n```\n\n### Resume a download request\n```java\nPRDownloader.resume(downloadId);\n```\n\n### Cancel a download request\n```java\n// Cancel with the download id\nPRDownloader.cancel(downloadId);\n// The tag can be set to any request and then can be used to cancel the request\nPRDownloader.cancel(TAG);\n// Cancel all the requests\nPRDownloader.cancelAll();\n```\n\n### Status of a download request\n```java\nStatus status = PRDownloader.getStatus(downloadId);\n```\n\n### Clean up resumed files if database enabled\n```java\n// Method to clean up temporary resumed files which is older than the given day\nPRDownloader.cleanUp(days);\n```\n### TODO\n* Integration with other libraries like OkHttp, RxJava\n* Test Cases\n* And of course many many features and bug fixes\n\n## If this library helps you in anyway, show your love :heart: by putting a :star: on this project :v:\n\n[Check out Mindorks awesome open source projects here](https://mindorks.com/open-source-projects)\n\n### License\n```\n   Copyright (C) 2017 MINDORKS NEXTGEN PRIVATE LIMITED\n\n   Licensed under the Apache License, Version 2.0 (the "License");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an "AS IS" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```\n\n### Contributing to PRDownloader\nAll pull requests are welcome, make sure to follow the [contribution guidelines](CONTRIBUTING.md)\nwhen you submit pull request.\n'