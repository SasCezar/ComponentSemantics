b'# What is Blynk?\nBlynk is a platform with iOS and Android apps to control Arduino, ESP8266, Raspberry Pi and the likes over the Internet.  \nYou can easily build graphic interfaces for all your projects by simply dragging and dropping widgets.\nIf you need more information, please follow these links:\n* [Blynk site](https://www.blynk.cc)\n* [Blynk docs](http://docs.blynk.cc)\n* [Blynk community](https://community.blynk.cc)\n* [Blynk Examples generator](https://examples.blynk.cc)\n* [Facebook](http://www.fb.com/blynkapp)\n* [Twitter](http://twitter.com/blynk_app)\n* [App Store](https://itunes.apple.com/us/app/blynk-control-arduino-raspberry/id808760481?ls=1&mt=8)\n* [Google Play](https://play.google.com/store/apps/details?id=cc.blynk)\n* [Blynk library](https://github.com/blynkkk/blynk-library)\n* [Kickstarter](https://www.kickstarter.com/projects/167134865/blynk-build-an-app-for-your-arduino-project-in-5-m/description)\n\n![Dashboard settings](https://github.com/blynkkk/blynk-server/blob/master/docs/overview/dash_settings.png)\n![Widgets Box](https://github.com/blynkkk/blynk-server/blob/master/docs/overview/widgets_box.png)\n![Dashboard](https://github.com/blynkkk/blynk-server/blob/master/docs/overview/dash.png)\n![Dashboard2](https://github.com/blynkkk/blynk-server/blob/master/docs/overview/dash2.png)\n\n# Content \n\n- [Download](#blynk-server)\n- [Requirements](#requirements)\n- [Quick Local Server setup](#quick-local-server-setup)\n- [Enabling mail on Local server](#enabling-mail-on-local-server)\n- [Quick local server setup on Raspberry PI](#quick-local-server-setup-on-raspberry-pi)\n- [Docker container setup](#docker-container-setup)\n- [Enabling server auto restart on unix-like systems](#enabling-server-auto-restart-on-unix-like-systems)\n- [Enabling server auto restart on Windows](#enabling-server-auto-restart-on-windows)\n- [Update instruction for unix-like systems](#update-instruction-for-unix-like-systems)\n- [Update instruction for Windows](#update-instruction-for-windows)\n- [App and sketch changes for Local Server](#app-and-sketch-changes)\n- [Advanced local server setup](#advanced-local-server-setup)\n- [Administration UI](#administration-ui)\n- [HTTP/S RESTful API](#https-restful)\n- [Enabling sms on local server](#enabling-sms-on-local-server)\n- [Enabling raw data storage](#enabling-raw-data-storage)\n- [Automatic Let\'s Encrypt Certificates](#automatic-lets-encrypt-certificates-generation)\n- [Manual Let\'s Encrypt SSL/TLS Certificates](#manual-lets-encrypt-ssltls-certificates)\n- [Generate own SSL certificates](#generate-own-ssl-certificates)\n- [Install java for Ubuntu](#install-java-for-ubuntu)\n- [How Blynk Works?](#how-blynk-works)\n- [Blynk Protocol](#blynk-protocol)\n\n# GETTING STARTED\n\n## Blynk server\nBlynk Server is an Open-Source [Netty](https://github.com/netty/netty) based Java server, responsible for forwarding \nmessages between Blynk mobile application and various microcontroller boards and SBCs (i.e. Arduino, Raspberry Pi. etc).\n\n**Download latest server build [here](https://github.com/blynkkk/blynk-server/releases).**\n\n[![GitHub version](https://img.shields.io/github/release/blynkkk/blynk-server.svg)](https://github.com/blynkkk/blynk-server/releases/latest)\n[![GitHub download](https://img.shields.io/github/downloads/blynkkk/blynk-server/total.svg)](https://github.com/blynkkk/blynk-server/releases/latest)\n[ ![Build Status](https://travis-ci.org/blynkkk/blynk-server.svg?branch=master)](https://travis-ci.org/blynkkk/blynk-server)\n\n## Requirements\n- Java 8/11 required (OpenJDK, Oracle) \n- Any OS that can run java \n- At least 30 MB of RAM (could be less with tuning)\n- Open ports 9443 (for app and hardware with ssl), 8080 (for hardware without ssl)\n\n[Ubuntu java installation instruction](#install-java-for-ubuntu).\n\nFor Windows download Java [here](https://www.oracle.com/technetwork/java/javase/downloads/jdk11-downloads-5066655.html) and install. \n\n## Quick local server setup\n\n+ Make sure you are using Java 11\n\n        java -version\n        Output: java version "11"\n\n+ Run the server on default \'hardware port 8080\' and default \'application port 9443\' (SSL port)\n\n        java -jar server-0.41.11.jar -dataFolder /path\n        \nThat\'s it! \n\n**NOTE: ```/path``` should be real existing path to folder where you want to store all your data.**\n\n+ As an output you should see something like that:\n\n        Blynk Server successfully started.\n        All server output is stored in current folder in \'logs/blynk.log\' file.\n        \n### Enabling mail on Local server\nTo enable mail notifications on Local server you need to provide your own mail credentials. Create file `mail.properties` within same folder where `server.jar` is.\nMail properties:\n\n        mail.smtp.auth=true\n        mail.smtp.starttls.enable=true\n        mail.smtp.host=smtp.gmail.com\n        mail.smtp.port=587\n        mail.smtp.username=YOUR_EMAIL_HERE\n        mail.smtp.password=YOUR_EMAIL_PASS_HERE\n        \nFind example [here](https://github.com/blynkkk/blynk-server/blob/master/server/notifications/email/src/main/resources/mail.properties).\n\nWARNING : only gmail accounts are allowed.\n\nNOTE : you\'ll need to setup Gmail to allow less secured applications.\nGo [here](https://www.google.com/settings/security/lesssecureapps) and then click "Allow less secure apps".\n\n## Quick local server setup on Raspberry PI\n\n+ Login to Raspberry Pi via ssh;\n+ Install java 8: \n        \n        sudo apt-get install oracle-java8-jdk\n        \n+ Make sure you are using Java 8\n\n        java -version\n        Output: java version "1.8"\n        \n+ Download Blynk server jar file (or manually copy it to Raspberry Pi via ssh and scp command): \n   \n        wget "https://github.com/blynkkk/blynk-server/releases/download/v0.41.11/server-0.41.11-java8.jar"\n\n+ Run the server on default \'hardware port 8080\' and default \'application port 9443\' (SSL port)\n\n        java -jar server-0.41.11-java8.jar -dataFolder /home/pi/Blynk\n        \nThat\'s it! \n\n+ As output you will see something like that:\n\n        Blynk Server successfully started.\n        All server output is stored in current folder in \'logs/blynk.log\' file.\n\n## Docker container setup\n\n### Quick Launch\n\n+ Install [Docker](https://docs.docker.com/install/)\n+ Run Docker container\n\n        docker run -p 8080:8080 -p 9443:9443 mpherg/blynk-server\n\n### Full customisation\n\n+ Check [README](server/Docker) in docker folder\n\n\n\n\n## Enabling server auto restart on unix-like systems\n        \n+ To enable server auto restart find /etc/rc.local file and add:\n\n        java -jar /home/pi/server-0.41.11-java8.jar -dataFolder /home/pi/Blynk &\n        \n+ Or if the approach above doesn\'t work, execute \n       \n        crontab -e\n\nadd the following line\n\n        @reboot java -jar /home/pi/server-0.41.11-java8.jar -dataFolder /home/pi/Blynk &\n        \nsave and exit.\n\n## Enabling server auto restart on Windows\n\n+ Create bat file:\n\n        start-blynk.bat\n\n+ Put in it one line: \n\n        java -jar server-0.41.11.jar -dataFolder /home/pi/Blynk\n        \n+ Put bat file to windows startup folder\n\nYou can also use [this](https://github.com/blynkkk/blynk-server/tree/master/scripts/win) script to run server.\n\n## Update instruction for unix-like systems\n\n**IMPORTANT**\nServer should be always updated before you update Blynk App. To update your server to a newer version you would need to kill old process and start a new one.\n\n+ Find process id of Blynk server\n\n        ps -aux | grep java\n        \n+ You should see something like that\n \n        username   10539  1.0 12.1 3325808 428948 pts/76 Sl   Jan22   9:11 java -jar server-0.41.11.jar   \n        \n+ Kill the old process\n\n        kill 10539\n        \n10539 - blynk server process id from command output above.\n \n+ Start new server [as usual](#quick-local-server-setup)\n\nAfter this steps you can update Blynk app. Server version downgrade is not supported. \n\n**WARNING!**\nPlease **do not** revert your server to lower versions. You may loose all of your data.\n\n## Update instruction for Windows\n\n+ Open Task Manager;\n\n+ Find Java process;\n\n+ Stop process;\n\n+ Start new server [as usual](#quick-local-server-setup)\n                \n## App and sketch changes\n\n+ Specify custom server path in your application\n\n![Custom server icon](https://github.com/blynkkk/blynk-server/blob/master/docs/login.png)\n![Server properties menu](https://github.com/blynkkk/blynk-server/blob/master/docs/custom.png)\n\n+ Change your ethernet sketch from\n\n    ```\n    Blynk.begin(auth);\n    ```\n    \n    to\n    \n    ```\n    Blynk.begin(auth, "your_host", 8080);\n    ```\n    \n    or to\n    \n    ```\n    Blynk.begin(auth, IPAddress(xxx,xxx,xxx,xxx), 8080);\n    ```\n        \n+ Change your WIFI sketch from\n        \n    ```\n    Blynk.begin(auth, SSID, pass));\n    ```\n   \n    to\n    \n    ```\n    Blynk.begin(auth, SSID, pass, "your_host", 8080);\n    ```\n    \n    or to\n    \n    ```\n    Blynk.begin(auth, SSID, pass, IPAddress(XXX,XXX,XXX,XXX), 8080);\n    ```\n        \n+ Change your rasp PI javascript from\n\n    ```\n    var blynk = new Blynk.Blynk(AUTH, options = {connector : new Blynk.TcpClient()});\n    ```\n    \n    to\n    \n    ```\n    var blynk = new Blynk.Blynk(AUTH, options= {addr:"xxx.xxx.xxx.xxx", port:8080});\n    ```\n        \n+ or in case of USB when running blynk-ser.sh provide \'-s\' option with address of your local server\n\n        ./blynk-ser.sh -s you_host_or_IP\n        \n        \n**IMPORTANT** \nBlynk is being constantly developed. Mobile apps and server are updated often. To avoid problems during updates either turn off auto-update for Blynk app, or update both local server and blynk app at same time to avoid possible migration issues.\n\n**IMPORTANT** \nBlynk local server is different from  Blynk Cloud server. They are not related at all. You have to create new account when using Blynk local server.\n\n## Advanced local server setup\nFor more flexibility you can extend server with more options by creating ```server.properties``` file in same folder as ```server.jar```. \nExample could be found [here](https://github.com/blynkkk/blynk-server/blob/master/server/core/src/main/resources/server.properties).\nYou could also specify any path to ```server.properties``` file via command line argument ```-serverConfig```. You can \ndo the same with ```mail.properties``` via ```-mailConfig``` and ```sms.properties``` via ```-smsConfig```.\n \nFor example:\n\n    java -jar server-0.41.11-java8.jar -dataFolder /home/pi/Blynk -serverConfig /home/pi/someFolder/server.properties\n\nAvailable server options:\n\n+ Blynk app, https, web sockets, admin port\n        \n        https.port=9443\n\n\n+ Http, hardware and web sockets port\n\n        http.port=8080\n        \n        \n+ For simplicity Blynk already provides server jar with built in SSL certificates, so you have working server out of the box via SSL/TLS sockets. But as certificate and it\'s private key are in public this is totally not secure. So in order to fix that you need to provide your own certificates. And change below properties with path to your cert. and private key and it\'s password. See how to generate self-signed certificates [here](#generate-ssl-certificates)\n\n        #points to cert and key that placed in same folder as running jar.\n        \n        server.ssl.cert=./server_embedded.crt\n        server.ssl.key=./server_embedded.pem\n        server.ssl.key.pass=pupkin123\n        \n        \n+ User profiles folder. Folder in which all users profiles will be stored. By default System.getProperty("java.io.tmpdir")/blynk used. Will be created if not exists\n\n        data.folder=/tmp/blynk\n        \n\n+ Folder for all application logs. Will be created if it doesn\'t exist. "." is dir from which you are running script.\n\n        logs.folder=./logs\n        \n\n+ Log debug level. Possible values: trace|debug|info|error. Defines how precise logging will be. From left to right -> maximum logging to minimum\n\n        log.level=trace\n        \n\n+ Maximum allowed number of user dashboards.\n\n        user.dashboard.max.limit=100\n        \n\n+ 100 Req/sec rate limit per user. You also may want to extend this limit on [hardware side](https://github.com/blynkkk/blynk-library/blob/f4e132652906d63d683abeed89f5d6ebe369e37a/Blynk/BlynkConfig.h#L42).\n\n        user.message.quota.limit=100\n        \n\n+ this setting defines how often you can send mail/tweet/push or any other notification. Specified in seconds\n        \n        notifications.frequency.user.quota.limit=60\n        \n\n+ Maximum allowed user profile size. In Kb\'s.\n\n        user.profile.max.size=128\n        \n        \n+ Number of strings to store in terminal widget (terminal history data)\n\n        terminal.strings.pool.size=25\n        \n\n+ Maximum allowed number of notification queue. Queue responsible for processing email, pushes, twits sending. Because of performance issue - those queue is processed in separate thread, this is required due to blocking nature of all above operations. Usually limit shouldn\'t be reached\n        \n        notifications.queue.limit=5000\n        \n        \n+ Number of threads for performing blocking operations - push, twits, emails, db queries. Recommended to hold this value low unless you have to perform a lot of blocking operations.\n\n        blocking.processor.thread.pool.limit=6\n        \n\n+ Period for flushing all user DB to disk. In millis\n\n        profile.save.worker.period=60000\n\n+ Specifies maximum period of time when hardware socket could be idle. After which socket will be closed due to non activity. In seconds. Leave it empty for infinity timeout\n\n        hard.socket.idle.timeout=15\n        \n+ Mostly required for local servers setup in case user want to log raw data in CSV format. See [raw data] (#raw-data-storage) section for more info.\n        \n        enable.raw.data.store=true\n        \n+ Url for opening admin page. Must start from "/". For "/admin" url path will look like that "https://127.0.0.1:9443/admin". \n\n        admin.rootPath=/admin\n        \n+ Comma separated list of administrator IPs. Allow access to admin UI only for those IPs. You may set it for 0.0.0.0/0 to allow access for all. You may use CIDR notation. For instance, 192.168.0.53/24.\n        \n        allowed.administrator.ips=0.0.0.0/0\n        \n+ Default admin name and password. Will be created on initial server start\n        \n        admin.email=admin@blynk.cc\n        admin.pass=admin\n\n+ Host for reset password redirect and certificate generation. By default current server IP is taken from "eth" network interface. Could be replaced with more friendly hostname. It is recommended to override this property with your server IP to avoid possible problems of host resolving.\n        \n        server.host=blynk-cloud.com\n        \n+ Email used for certificate registration, could be omitted in case you already specified it in mail.properties.\n        \n        contact.email=pupkin@gmail.com\n        \n## Administration UI\n\nBlynk server provides administration panel where you can monitor your server. It is accessible at this URL:\n\n        https://your_ip:9443/admin\n        \n![Administration UI](https://github.com/blynkkk/blynk-server/blob/master/docs/admin_panel.png)\n              \n**WARNING**\nPlease change default admin password and name right after login to admin page. **THIS IS SECURITY MEASURE**.\n        \n**WARNING**\nDefault ```allowed.administrator.ips``` setting allows access for everyone. In other words, \nadministration page available from any other computer. Please restrict access to it via property ```allowed.administrator.ips```.\n\n### Turn off chrome https warning on localhost\n\n- Paste in chrome \n\n        chrome://flags/#allow-insecure-localhost\n\n- You should see highlighted text saying: "Allow invalid certificates for resources loaded from localhost". Click enable.\n        \n## HTTP/S RESTful\nBlynk HTTP/S RESTful API allows to easily read and write values to/from Pins in Blynk apps and Hardware. \nHttp API description could be found [here](http://docs.blynkapi.apiary.io).\n\n### Enabling sms on local server\nTo enable SMS notifications on Local Server you need to provide credentials for SMS gateway (currently Blynk server\nsupports only 1 provider - [Nexmo](https://www.nexmo.com/). You need to create file ```sms.properties``` \nwithin same folder where server.jar is.\n\n        nexmo.api.key=\n        nexmo.api.secret=\n        \nAnd fill in the above properties with the credentials you\'ll get from Nexmo. (Account -> Settings -> API settings).\nYou can also send SMS over email if your cell provider supports that. See [discussion](http://community.blynk.cc/t/sms-notification-for-important-alert/2542) for more details.\n \n\n## Enabling raw data storage\nBy default raw data storage is disabled (as it consumes disk space a lot). \nWhen you enable it, every ```Blynk.virtualWrite``` command will be saved to DB.\nYou will need to install PostgreSQL Database (**minimum required version is 9.5**) to enable this functionality:\n\n#### 1. Enabling raw data on server\n\nEnable raw data in ```server.properties``` : \n\n        enable.db=true\n        enable.raw.db.data.store=true\n\n#### 2. Install PostgreSQL. Option A\n\n        sudo sh -c \'echo "deb http://apt.postgresql.org/pub/repos/apt/ `lsb_release -cs`-pgdg main" >> /etc/apt/sources.list.d/pgdg.list\'\n        wget -q https://www.postgresql.org/media/keys/ACCC4CF8.asc -O - | sudo apt-key add -\n        \n        sudo apt-get update\n        sudo apt-get install postgresql postgresql-contrib\n        \n#### 2. Install PostgreSQL.  Option B \n\n        sudo apt-get update\n        apt-get --no-install-recommends install postgresql-9.6 postgresql-contrib-9.6\n\n#### 3. Download Blynk DB script\n\n        wget https://raw.githubusercontent.com/blynkkk/blynk-server/master/server/core/src/main/resources/create_schema.sql\n        wget https://raw.githubusercontent.com/blynkkk/blynk-server/master/server/core/src/main/resources/reporting_schema.sql\n\n#### 4. Move create_schema.sql and reporting_schema.sql to temp folder (to avoid permission problems)\n\n        mv create_schema.sql /tmp\n        mv reporting_schema.sql /tmp\n        \nResult:  \n\n        /tmp/create_schema.sql\n        /tmp/reporting_schema.sql\n        \nCopy it to clipboard from your console.\n\n#### 5. Connect to PostgreSQL\n\n        sudo su - postgres\n        psql\n\n#### 6. Create Blynk DB and Reporting DB, test user and tables\n\n        \\i /tmp/create_schema.sql\n        \\i /tmp/reporting_schema.sql\n        \n```/tmp/create_schema.sql``` - is path from step 4.\n        \nYou should see next output:\n\n        postgres=# \\i /tmp/create_schema.sql\n        CREATE DATABASE\n        You are now connected to database "blynk" as user "postgres".\n        CREATE TABLE\n        CREATE TABLE\n        CREATE TABLE\n        CREATE TABLE\n        CREATE TABLE\n        CREATE TABLE\n        CREATE TABLE\n        CREATE TABLE\n        CREATE TABLE\n        CREATE TABLE\n        CREATE TABLE\n        CREATE ROLE\n        GRANT\n        GRANT\n\n#### Quit\n\n        \\q\n               \nNow start your server and you should see next text in ```postgres.log``` file : \n\n        2017-03-02 16:17:18.367 - DB url : jdbc:postgresql://localhost:5432/blynk?tcpKeepAlive=true&socketTimeout=150\n        2017-03-02 16:17:18.367 - DB user : test\n        2017-03-02 16:17:18.367 - Connecting to DB...\n        2017-03-02 16:17:18.455 - Connected to database successfully.\n        \nWARNING:\nRaw data may consume your disk space very quickly!\n\n### CSV data format\n\nData format is:\n\n        value,timestamp,deviceId\n        \nFor example:\n\n        10,1438022081332,0\n        \nWhere ```10``` - value of pin.\n```1438022081332``` - the difference, measured in milliseconds, between the current time and midnight, January 1, 1970 UTC.\nTo display the date/time in excel you may use formula:\n\n        =((COLUMN/(60*60*24)/1000+25569))\n        \n```0``` - device id\n        \n### Automatic Let\'s Encrypt certificates generation\n\nLatest Blynk server has super cool feature - automatic Let\'s Encrypt certificates generation. \nHowever, it has few requirements: \n \n+ Add ```server.host``` property in ```server.properties``` file. \nFor example : \n \n        server.host=myhost.com\n\nIP is not supported, this is the limitation of Let\'s Encrypt. Also have in mind that ```myhost.com``` \nshould be resolved by public DNS severs.\n        \n+ Add ```contact.email``` property in ```server.properties```. For example : \n \n        contact.email=test@gmail.com\n        \n+ You need to start server on port 80 (requires root or admin rights) or \nmake [port forwarding](#port-forwarding-for-https-api) to default Blynk HTTP port - 8080.\n\nThat\'s it! Run server as regular and certificates will be generated automatically.\n\n![](https://gifyu.com/images/certs.gif)\n\n### Manual Let\'s Encrypt SSL/TLS Certificates\n\n+ First install [certbot](https://github.com/certbot/certbot) on your server (machine where you going to run Blynk Server)\n\n        wget https://dl.eff.org/certbot-auto\n        chmod a+x certbot-auto\n        \n+ Generate and verify certificates (your server should be connected to internet and have open 80/443 ports)\n\n        ./certbot-auto certonly --agree-tos --email YOUR_EMAIL --standalone -d YOUR_HOST\n\nFor example \n\n        ./certbot-auto certonly --agree-tos --email pupkin@blynk.cc --standalone -d blynk.cc\n\n+ Then add to your ```server.properties``` file (in folder with server.jar)\n\n        server.ssl.cert=/etc/letsencrypt/live/YOUR_HOST/fullchain.pem\n        server.ssl.key=/etc/letsencrypt/live/YOUR_HOST/privkey.pem\n        server.ssl.key.pass=\n        \n### Generate own SSL certificates\n\n+ Generate self-signed certificate and key\n\n        openssl req -x509 -nodes -days 1825 -newkey rsa:2048 -keyout server.key -out server.crt\n        \n+ Convert server.key to PKCS#8 private key file in PEM format\n\n        openssl pkcs8 -topk8 -inform PEM -outform PEM -in server.key -out server.pem\n        \nIf you connect hardware with [USB script](https://github.com/blynkkk/blynk-library/tree/master/scripts) you have to provide an option \'-s\' pointing to "common name" (hostname) you did specified during certificate generation.\n        \nAs an output you\'ll retrieve server.crt and server.pem files that you need to provide for server.ssl properties.\n\n### Install java for Ubuntu\n\n        sudo add-apt-repository ppa:openjdk-r/ppa \\\n        && sudo apt-get update -q \\\n        && sudo apt install -y openjdk-11-jdk\n        \nor if above doesn\'t work:\n\n        sudo apt-add-repository ppa:webupd8team/java\n        sudo apt-get update\n        sudo apt-get install oracle-java8-installer\n        \n### Port forwarding for HTTP/S API\n\n        sudo iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 8080\n        sudo iptables -t nat -A PREROUTING -p tcp --dport 443 -j REDIRECT --to-port 9443\n\n### Enabling QR generation on server\n        \n        sudo apt-get install libxrender1\n\n### Behind wifi router\nIf you want to run Blynk server behind WiFi-router and want it to be accessible from the Internet, you have to add port-forwarding rule on your router. This is required in order to forward all of the requests that come to the router within the local network to Blynk server.\n\n### How to build\nBlynk has a bunch of integration tests that require DB, so you have to skip tests during build.\n\n        mvn clean install -Dmaven.test.skip=true\n        \n### How Blynk Works?\nWhen hardware connects to Blynk cloud it opens either keep-alive ssl/tls connection on port 443 (9443 for local servers) or keep-alive plain\ntcp/ip connection on port 8080. Blynk app opens mutual ssl/tls connection to Blynk Cloud on port 443 (9443 for local servers).\nBlynk Cloud is responsible for forwarding messages between hardware and app. In both (app and hardware) connections Blynk uses \nown binary protocol described below.\n\n### Blynk protocol\n\n\n#### Hardware side protocol\n\nBlynk transfers binary messages between the server and the hardware with the following structure:\n\n| Command       | Message Id    | Length/Status   | Body     |\n|:-------------:|:-------------:|:---------------:|:--------:|\n| 1 byte        | 2 bytes       | 2 bytes         | Variable |\n\nCommand and Status definitions: [BlynkProtocolDefs.h](https://github.com/blynkkk/blynk-library/blob/7e942d661bc54ded310bf5d00edee737d0ca44d7/src/Blynk/BlynkProtocolDefs.h)\n\n\n#### Mobile app side protocol\n\nBlynk transfers binary messages between the server and mobile app with the following structure:\n\n| Command       | Message Id    | Length/Status   | Body     |\n|:-------------:|:-------------:|:---------------:|:--------:|\n| 1 byte        | 2 bytes       | 4 bytes         | Variable |\n\n\n#### Websockets web side protocol\n\nBlynk transfers binary messages between the server and websockets (for web) with the following structure:\n\n| Websocket header   | Command       | Message Id    | Body     |\n|:------------------:|:-------------:|:-------------:|:--------:|\n|                    | 1 byte        | 2 bytes       | Variable |\n\n\nWhen command code == 0, than message structure is next:\n\n| Websocket header   | Command       | Message Id    | Response code |\n|:------------------:|:-------------:|:-------------:|:-------------:|\n|                    | 1 byte        | 2 bytes       | 4 bytes       |\n\n[Possible response codes](https://github.com/blynkkk/blynk-server/blob/master/server/core/src/main/java/cc/blynk/server/core/protocol/enums/Response.java#L12).\n[Possible command codes](https://github.com/blynkkk/blynk-server/blob/master/server/core/src/main/java/cc/blynk/server/core/protocol/enums/Command.java#L12)\n\nMessage Id and Length are [big endian](http://en.wikipedia.org/wiki/Endianness#Big-endian).\nBody has a command-specific format.\n\n## Licensing\n[GNU GPL license](https://github.com/blynkkk/blynk-server/blob/master/license.txt)\n'