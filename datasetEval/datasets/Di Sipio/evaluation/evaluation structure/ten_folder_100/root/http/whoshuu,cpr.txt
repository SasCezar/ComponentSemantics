b'# C++ Requests: Curl for People <img align="right" height="40" src="http://i.imgur.com/d9Xtyts.png">\n\n[![gitter](https://badges.gitter.im/cpp-pm/community.svg)](https://gitter.im/whoshuu/cpr) [![Documentation](https://img.shields.io/badge/documentation-master-brightgreen.svg)](https://whoshuu.github.io/cpr/)\n[![Build Status](https://travis-ci.org/whoshuu/cpr.svg?branch=master)](https://travis-ci.org/whoshuu/cpr) [![Build status](https://ci.appveyor.com/api/projects/status/imalkp3a6hblpj5y/branch/master?svg=true)](https://ci.appveyor.com/project/whoshuu/cpr/branch/master) [![Coverage Status](https://coveralls.io/repos/whoshuu/cpr/badge.svg?branch=master&service=github)](https://coveralls.io/github/whoshuu/cpr)\n\n## Announcements\n\nThe cpr project will have a new maintainer: [Tim Stack](https://github.com/tstack). He has graciously agreed to donate his time to keep the project healthy and grow it. For those waiting on their PRs and issues to be resolved, I appreciate your patience and know that you will be in good hands moving forward.\n\n## TLDR\n\nC++ Requests is a simple wrapper around [libcurl](http://curl.haxx.se/libcurl) inspired by the excellent [Python Requests](https://github.com/kennethreitz/requests) project.\n\nDespite its name, libcurl\'s easy interface is anything but, and making mistakes misusing it is a common source of error and frustration. Using the more expressive language facilities of C++11, this library captures the essence of making network calls into a few concise idioms.\n\nHere\'s a quick GET request:\n\n```c++\n#include <cpr/cpr.h>\n\nint main(int argc, char** argv) {\n    auto r = cpr::Get(cpr::Url{"https://api.github.com/repos/whoshuu/cpr/contributors"},\n                      cpr::Authentication{"user", "pass"},\n                      cpr::Parameters{{"anon", "true"}, {"key", "value"}});\n    r.status_code;                  // 200\n    r.header["content-type"];       // application/json; charset=utf-8\n    r.text;                         // JSON text string\n}\n```\n\nAnd here\'s [less functional, more complicated code, without cpr](https://gist.github.com/whoshuu/2dc858b8730079602044).\n\n## Documentation\n\nYou can find the latest documentation [here](https://whoshuu.github.io/cpr). It\'s a work in progress, but it should give you a better idea of how to use the library than the [tests](https://github.com/whoshuu/cpr/tree/master/test) currently do.\n\n## Features\n\nC++ Requests currently supports:\n\n* Custom headers\n* Url encoded parameters\n* Url encoded POST values\n* Multipart form POST upload\n* File POST upload\n* Basic authentication\n* Digest authentication\n* Connection and request timeout specification\n* Timeout for low speed connection\n* Asynchronous requests\n* :cookie: support!\n* Proxy support\n* Callback interface\n* PUT methods\n* DELETE methods\n* HEAD methods\n* OPTIONS methods\n* PATCH methods\n\n## Planned\n\nSupport for the following will be forthcoming (in rough order of implementation priority):\n\n* [Streamed requests](https://github.com/whoshuu/cpr/issues/25)\n* [OpenSSL support](https://github.com/whoshuu/cpr/issues/31)\n\nand much more!\n\n## Usage\n\nFor just getting this library up and running, I highly recommend forking the [example project](https://github.com/whoshuu/cpr-example). It\'s configured with the minimum CMake magic and boilerplate needed to start playing around with networked applications.\n\nIf you already have a project you need to integrate C++ Requests with, the primary way is to use git submodules. Add this repository as a submodule of your root repository:\n\n```shell\ngit submodule add git@github.com:whoshuu/cpr.git\nOR \ngit submodule add https://github.com/whoshuu/cpr.git\n\ngit submodule update --init --recursive\n```\n\nNext, add this subdirectory to your CMakeLists.txt before declaring any targets that might use it:\n\n```cmake\nadd_subdirectory(cpr)\n```\n\nThis will produce two important CMake variables, `CPR_INCLUDE_DIRS` and `CPR_LIBRARIES`, which you\'ll use in the typical way:\n\n```cmake\ninclude_directories(${CPR_INCLUDE_DIRS})\ntarget_link_libraries(your_target_name ${CPR_LIBRARIES})\n```\n\nand that should do it! Using the submodule method of integrating C++ Requests, there\'s no need to handle libcurl yourself, all of those dependencies are taken care of for you.\n\n## Requirements\n\nThe only explicit requirements are:\n\n* a C++11 compatible compiler such as Clang or GCC. The minimum required version of GCC is unknown, so if anyone has trouble building this library with a specific version of GCC, do let me know\n* curl and its development libraries\n'