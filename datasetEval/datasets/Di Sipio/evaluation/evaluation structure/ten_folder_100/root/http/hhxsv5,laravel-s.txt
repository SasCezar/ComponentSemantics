b'```\n _                               _  _____ \n| |                             | |/ ____|\n| |     __ _ _ __ __ ___   _____| | (___  \n| |    / _` | \'__/ _` \\ \\ / / _ \\ |\\___ \\ \n| |___| (_| | | | (_| |\\ V /  __/ |____) |\n|______\\__,_|_|  \\__,_| \\_/ \\___|_|_____/ \n                                           \n```\n> \xf0\x9f\x9a\x80`LaravelS` is like a glue that is used to quickly integrate `Swoole` into `Laravel` or `Lumen`, and then give them better performance and more possibilities.\n\n*Please `Watch` this repository to get the latest updates.*\n\n[![Latest Stable Version](https://poser.pugx.org/hhxsv5/laravel-s/v/stable.svg)](https://packagist.org/packages/hhxsv5/laravel-s)\n[![Latest Unstable Version](https://poser.pugx.org/hhxsv5/laravel-s/v/unstable.svg)](https://packagist.org/packages/hhxsv5/laravel-s)\n[![Total Downloads](https://poser.pugx.org/hhxsv5/laravel-s/downloads.svg)](https://packagist.org/packages/hhxsv5/laravel-s)\n[![License](https://poser.pugx.org/hhxsv5/laravel-s/license.svg)](https://github.com/hhxsv5/laravel-s/blob/master/LICENSE)\n[![Build Status](https://scrutinizer-ci.com/g/hhxsv5/laravel-s/badges/build.png?b=master)](https://scrutinizer-ci.com/g/hhxsv5/laravel-s/build-status/master)\n[![Code Intelligence Status](https://scrutinizer-ci.com/g/hhxsv5/laravel-s/badges/code-intelligence.svg?b=master)](https://scrutinizer-ci.com/code-intelligence)\n<!-- [![Total Lines](https://tokei.rs/b1/github/hhxsv5/laravel-s)](https://github.com/hhxsv5/laravel-s) -->\n<!-- [![Code Coverage](https://scrutinizer-ci.com/g/hhxsv5/laravel-s/badges/coverage.png?b=master)](https://scrutinizer-ci.com/g/hhxsv5/laravel-s/?branch=master) -->\n\n**[\xe4\xb8\xad\xe6\x96\x87\xe6\x96\x87\xe6\xa1\xa3](https://github.com/hhxsv5/laravel-s/blob/master/README-CN.md)**\n\nTable of Contents\n=================\n\n* [Features](#features)\n* [Requirements](#requirements)\n* [Install](#install)\n* [Run](#run)\n* [Deploy](#deploy)\n* [Cooperate with Nginx (Recommended)](#cooperate-with-nginx-recommended)\n* [Cooperate with Apache](#cooperate-with-apache)\n* [Enable WebSocket server](#enable-websocket-server)\n* [Listen events](#listen-events)\n    * [System events](#system-events)\n    * [Customized asynchronous events](#customized-asynchronous-events)\n* [Asynchronous task queue](#asynchronous-task-queue)\n* [Millisecond cron job](#millisecond-cron-job)\n* [Reload automatically when code is modified](#reload-automatically-when-code-is-modified)\n* [Get the instance of SwooleServer in your project](#get-the-instance-of-swooleserver-in-your-project)\n* [Use SwooleTable](#use-swooletable)\n* [Multi-port mixed protocol](#multi-port-mixed-protocol)\n* [Coroutine](#coroutine)\n* [Custom process](#custom-process)\n* [Other features](#other-features)\n* [Important notices](#important-notices)\n* [Users and cases](https://github.com/hhxsv5/laravel-s/blob/master/README-CN.md#%E7%94%A8%E6%88%B7%E4%B8%8E%E6%A1%88%E4%BE%8B)\n* [Alternatives](#alternatives)\n* [Support Us](#support-us)\n* [License](#license)\n\n## Features\n\n- Built-in Http/[WebSocket](https://github.com/hhxsv5/laravel-s/blob/master/README.md#enable-websocket-server) server\n\n- [Multi-port mixed protocol](https://github.com/hhxsv5/laravel-s/blob/master/README.md#multi-port-mixed-protocol)\n\n- [Coroutine](https://github.com/hhxsv5/laravel-s/blob/master/README.md#coroutine)\n\n- [Custom process](https://github.com/hhxsv5/laravel-s/blob/master/README.md#custom-process)\n\n- Memory resident\n\n- [Asynchronous event listening](https://github.com/hhxsv5/laravel-s/blob/master/README.md#customized-asynchronous-events)\n\n- [Asynchronous task queue](https://github.com/hhxsv5/laravel-s/blob/master/README.md#asynchronous-task-queue)\n\n- [Millisecond cron job](https://github.com/hhxsv5/laravel-s/blob/master/README.md#millisecond-cron-job)\n\n- Gracefully reload\n\n- [Reload automatically when code is modified](https://github.com/hhxsv5/laravel-s/blob/master/README.md#reload-automatically-when-code-is-modified)\n\n- Support Laravel/Lumen both, good compatibility\n\n- Simple & Out of the box\n\n## Requirements\n\n| Dependency | Requirement |\n| -------- | -------- |\n| [PHP](https://secure.php.net/manual/en/install.php) | `>= 5.5.9` `Recommend PHP7+` |\n| [Swoole](https://www.swoole.co.uk/) | `>= 1.7.19` `No longer support PHP5 since 2.0.12` `Recommend 4.2.3+` |\n| [Laravel](https://laravel.com/)/[Lumen](https://lumen.laravel.com/) | `>= 5.1` `Recommend 5.6+` |\n\n## Install\n\n1.Require package via [Composer](https://getcomposer.org/)([packagist](https://packagist.org/packages/hhxsv5/laravel-s)).\n```bash\ncomposer require "hhxsv5/laravel-s:~3.5.0" -vvv\n# Make sure that your composer.lock file is under the VCS\n```\n\n2.Register service provider(pick one of two).\n\n- `Laravel`: in `config/app.php` file, `Laravel 5.5+ supports package discovery automatically, you should skip this step`\n    ```php\n    \'providers\' => [\n        //...\n        Hhxsv5\\LaravelS\\Illuminate\\LaravelSServiceProvider::class,\n    ],\n    ```\n\n- `Lumen`: in `bootstrap/app.php` file\n    ```php\n    $app->register(Hhxsv5\\LaravelS\\Illuminate\\LaravelSServiceProvider::class);\n    ```\n\n3.Publish configuration and binaries.\n> *After upgrading LaravelS, you need to republish; click [here](https://github.com/hhxsv5/laravel-s/releases) to see the change notes of each version.*\n```bash\nphp artisan laravels publish\n# Configuration: config/laravels.php\n# Binary: bin/laravels bin/fswatch bin/inotify\n```\n\n4.Change `config/laravels.php`: listen_ip, listen_port, refer [Settings](https://github.com/hhxsv5/laravel-s/blob/master/Settings.md).\n\n## Run\n> `php bin/laravels {start|stop|restart|reload|info|help}`\n\n`Please read the notices carefully before running`, [Important notices](https://github.com/hhxsv5/laravel-s#important-notices)(IMPORTANT).\n\n| Command | Description |\n| --------- | --------- |\n| `start` | Start LaravelS, list the processes by "*ps -ef&#124;grep laravels*". Support the option "*-d&#124;--daemonize*" to run as a daemon; Support the option "*-e&#124;--env*" to specify the environment to run, such as `--env=testing` will use the configuration file `.env.testing` firstly, this feature requires `Laravel 5.2+` |\n| `stop` | Stop LaravelS |\n| `restart` | Restart LaravelS, support the options "*-d&#124;--daemonize*" and "*-e&#124;--env*" |\n| `reload` | Reload all Task/Worker/Timer processes which contain your business codes, and trigger the method `onReload` of Custom process, CANNOT reload Master/Manger processes. After modifying `config/laravels.php`, you can `only` call `restart` to restart |\n| `info` | Display component version information |\n| `help` | Display help information |\n\n## Deploy\n> It is recommended to supervise the main process through [Supervisord](http://supervisord.org/), the premise is without option `-d` and to set `swoole.daemonize` to `false`.\n\n```\n[program:laravel-s-test]\ncommand=/user/local/bin/php /opt/www/laravel-s-test/bin/laravels start -i\nnumprocs=1\nautostart=true\nautorestart=true\nstartretries=3\nuser=www-data\nredirect_stderr=true\nstdout_logfile=/opt/www/laravel-s-test/storage/logs/supervisord-stdout.log\n```\n\n## Cooperate with Nginx (Recommended)\n> [Demo](https://github.com/hhxsv5/docker/blob/master/nginx/conf.d/laravels.conf).\n\n```nginx\ngzip on;\ngzip_min_length 1024;\ngzip_comp_level 2;\ngzip_types text/plain text/css text/javascript application/json application/javascript application/x-javascript application/xml application/x-httpd-php image/jpeg image/gif image/png font/ttf font/otf image/svg+xml;\ngzip_vary on;\ngzip_disable "msie6";\nupstream swoole {\n    # Connect IP:Port\n    server 127.0.0.1:5200 weight=5 max_fails=3 fail_timeout=30s;\n    # Connect UnixSocket Stream file, tips: put the socket file in the /dev/shm directory to get better performance\n    #server unix:/xxxpath/laravel-s-test/storage/laravels.sock weight=5 max_fails=3 fail_timeout=30s;\n    #server 192.168.1.1:5200 weight=3 max_fails=3 fail_timeout=30s;\n    #server 192.168.1.2:5200 backup;\n    keepalive 16;\n}\nserver {\n    listen 80;\n    # Don\'t forget to bind the host\n    server_name laravels.com;\n    root /xxxpath/laravel-s-test/public;\n    access_log /yyypath/log/nginx/$server_name.access.log  main;\n    autoindex off;\n    index index.html index.htm;\n    # Nginx handles the static resources(recommend enabling gzip), LaravelS handles the dynamic resource.\n    location / {\n        try_files $uri @laravels;\n    }\n    # Response 404 directly when request the PHP file, to avoid exposing public/*.php\n    #location ~* \\.php$ {\n    #    return 404;\n    #}\n    location @laravels {\n        # proxy_connect_timeout 60s;\n        # proxy_send_timeout 60s;\n        # proxy_read_timeout 120s;\n        proxy_http_version 1.1;\n        proxy_set_header Connection "";\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Real-PORT $remote_port;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header Host $http_host;\n        proxy_set_header Scheme $scheme;\n        proxy_set_header Server-Protocol $server_protocol;\n        proxy_set_header Server-Name $server_name;\n        proxy_set_header Server-Addr $server_addr;\n        proxy_set_header Server-Port $server_port;\n        proxy_pass http://swoole;\n    }\n}\n```\n\n## Cooperate with Apache\n\n```apache\nLoadModule proxy_module /yyypath/modules/mod_deflate.so\n<IfModule deflate_module>\n    SetOutputFilter DEFLATE\n    DeflateCompressionLevel 2\n    AddOutputFilterByType DEFLATE text/html text/plain text/css text/javascript application/json application/javascript application/x-javascript application/xml application/x-httpd-php image/jpeg image/gif image/png font/ttf font/otf image/svg+xml\n</IfModule>\n\n<VirtualHost *:80>\n    # Don\'t forget to bind the host\n    ServerName www.laravels.com\n    ServerAdmin hhxsv5@sina.com\n\n    DocumentRoot /xxxpath/laravel-s-test/public;\n    DirectoryIndex index.html index.htm\n    <Directory "/">\n        AllowOverride None\n        Require all granted\n    </Directory>\n\n    LoadModule proxy_module /yyypath/modules/mod_proxy.so\n    LoadModule proxy_module /yyypath/modules/mod_proxy_balancer.so\n    LoadModule proxy_module /yyypath/modules/mod_lbmethod_byrequests.so.so\n    LoadModule proxy_module /yyypath/modules/mod_proxy_http.so.so\n    LoadModule proxy_module /yyypath/modules/mod_slotmem_shm.so\n    LoadModule proxy_module /yyypath/modules/mod_rewrite.so\n\n    ProxyRequests Off\n    ProxyPreserveHost On\n    <Proxy balancer://laravels>  \n        BalancerMember http://192.168.1.1:5200 loadfactor=7\n        #BalancerMember http://192.168.1.2:5200 loadfactor=3\n        #BalancerMember http://192.168.1.3:5200 loadfactor=1 status=+H\n        ProxySet lbmethod=byrequests\n    </Proxy>\n    #ProxyPass / balancer://laravels/\n    #ProxyPassReverse / balancer://laravels/\n\n    # Apache handles the static resources, LaravelS handles the dynamic resource.\n    RewriteEngine On\n    RewriteCond %{DOCUMENT_ROOT}%{REQUEST_FILENAME} !-d\n    RewriteCond %{DOCUMENT_ROOT}%{REQUEST_FILENAME} !-f\n    RewriteRule ^/(.*)$ balancer://laravels/%{REQUEST_URI} [P,L]\n\n    ErrorLog ${APACHE_LOG_DIR}/www.laravels.com.error.log\n    CustomLog ${APACHE_LOG_DIR}/www.laravels.com.access.log combined\n</VirtualHost>\n```\n\n## Enable WebSocket server\n> The Listening address of WebSocket Sever is the same as Http Server.\n\n1.Create WebSocket Handler class, and implement interface `WebSocketHandlerInterface`.The instant is automatically instantiated when start, you do not need to manually create it.\n```php\nnamespace App\\Services;\nuse Hhxsv5\\LaravelS\\Swoole\\WebSocketHandlerInterface;\nuse Swoole\\Http\\Request;\nuse Swoole\\WebSocket\\Frame;\nuse Swoole\\WebSocket\\Server;\n/**\n * @see https://www.swoole.co.uk/docs/modules/swoole-websocket-server\n */\nclass WebSocketService implements WebSocketHandlerInterface\n{\n    // Declare constructor without parameters\n    public function __construct()\n    {\n    }\n    public function onOpen(Server $server, Request $request)\n    {\n        // Before the onOpen event is triggered, the HTTP request to establish the WebSocket has passed the Laravel route, \n        // so Laravel\'s Request, Auth information is readable, and Session is readable and writable, but only in the onOpen event.\n        // \\Log::info(\'New WebSocket connection\', [$request->fd, request()->all(), session()->getId(), session(\'xxx\'), session([\'yyy\' => time()])]);\n        $server->push($request->fd, \'Welcome to LaravelS\');\n        // throw new \\Exception(\'an exception\');// all exceptions will be ignored, then record them into Swoole log, you need to try/catch them\n    }\n    public function onMessage(Server $server, Frame $frame)\n    {\n        // \\Log::info(\'Received message\', [$frame->fd, $frame->data, $frame->opcode, $frame->finish]);\n        $server->push($frame->fd, date(\'Y-m-d H:i:s\'));\n        // throw new \\Exception(\'an exception\');// all exceptions will be ignored, then record them into Swoole log, you need to try/catch them\n    }\n    public function onClose(Server $server, $fd, $reactorId)\n    {\n        // throw new \\Exception(\'an exception\');// all exceptions will be ignored, then record them into Swoole log, you need to try/catch them\n    }\n}\n```\n\n2.Modify `config/laravels.php`.\n```php\n// ...\n\'websocket\'      => [\n    \'enable\'  => true, // Here is true\n    \'handler\' => \\App\\Services\\WebSocketService::class,\n],\n\'swoole\'         => [\n    //...\n    // Must set dispatch_mode in (2, 4, 5), see https://www.swoole.co.uk/docs/modules/swoole-server/configuration\n    \'dispatch_mode\' => 2,\n    //...\n],\n// ...\n```\n3.Use `SwooleTable` to bind FD & UserId, optional, [Swoole Table Demo](https://github.com/hhxsv5/laravel-s/blob/master/README.md#use-swooletable). Also you can use the other global storage services, like Redis/Memcached/MySQL, but be careful that FD will be possible conflicting between multiple `Swoole Servers`.\n\n4.Cooperate with Nginx (Recommended)\n> Refer [WebSocket Proxy](http://nginx.org/en/docs/http/websocket.html)\n\n```nginx\nmap $http_upgrade $connection_upgrade {\n    default upgrade;\n    \'\'      close;\n}\nupstream swoole {\n    # Connect IP:Port\n    server 127.0.0.1:5200 weight=5 max_fails=3 fail_timeout=30s;\n    # Connect UnixSocket Stream file, tips: put the socket file in the /dev/shm directory to get better performance\n    #server unix:/xxxpath/laravel-s-test/storage/laravels.sock weight=5 max_fails=3 fail_timeout=30s;\n    #server 192.168.1.1:5200 weight=3 max_fails=3 fail_timeout=30s;\n    #server 192.168.1.2:5200 backup;\n    keepalive 16;\n}\nserver {\n    listen 80;\n    # Don\'t forget to bind the host\n    server_name laravels.com;\n    root /xxxpath/laravel-s-test/public;\n    access_log /yyypath/log/nginx/$server_name.access.log  main;\n    autoindex off;\n    index index.html index.htm;\n    # Nginx handles the static resources(recommend enabling gzip), LaravelS handles the dynamic resource.\n    location / {\n        try_files $uri @laravels;\n    }\n    # Response 404 directly when request the PHP file, to avoid exposing public/*.php\n    #location ~* \\.php$ {\n    #    return 404;\n    #}\n    # Http and WebSocket are concomitant, Nginx identifies them by "location"\n    # !!! The location of WebSocket is "/ws"\n    # Javascript: var ws = new WebSocket("ws://laravels.com/ws");\n    location =/ws {\n        # proxy_connect_timeout 60s;\n        # proxy_send_timeout 60s;\n        # proxy_read_timeout: Nginx will close the connection if the proxied server does not send data to Nginx in 60 seconds; At the same time, this close behavior is also affected by heartbeat setting of Swoole.\n        # proxy_read_timeout 60s;\n        proxy_http_version 1.1;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Real-PORT $remote_port;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header Host $http_host;\n        proxy_set_header Scheme $scheme;\n        proxy_set_header Server-Protocol $server_protocol;\n        proxy_set_header Server-Name $server_name;\n        proxy_set_header Server-Addr $server_addr;\n        proxy_set_header Server-Port $server_port;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection $connection_upgrade;\n        proxy_pass http://swoole;\n    }\n    location @laravels {\n        # proxy_connect_timeout 60s;\n        # proxy_send_timeout 60s;\n        # proxy_read_timeout 60s;\n        proxy_http_version 1.1;\n        proxy_set_header Connection "";\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Real-PORT $remote_port;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header Host $http_host;\n        proxy_set_header Scheme $scheme;\n        proxy_set_header Server-Protocol $server_protocol;\n        proxy_set_header Server-Name $server_name;\n        proxy_set_header Server-Addr $server_addr;\n        proxy_set_header Server-Port $server_port;\n        proxy_pass http://swoole;\n    }\n}\n```\n\n5.Heartbeat setting\n\n- Heartbeat setting of Swoole\n\n    ```php\n    // config/laravels.php\n    \'swoole\' => [\n        //...\n        // All connections are traversed every 60 seconds. If a connection does not send any data to the server within 600 seconds, the connection will be forced to close.\n        \'heartbeat_idle_time\'      => 600,\n        \'heartbeat_check_interval\' => 60,\n        //...\n    ],\n    ```\n\n- Proxy read timeout of Nginx\n\n    ```nginx\n    # Nginx will close the connection if the proxied server does not send data to Nginx in 60 seconds\n    proxy_read_timeout 60s;\n    ```\n\n## Listen events\n\n### System events\n> Usually, you can reset/destroy some `global/static` variables, or change the current `Request/Response` object.\n\n- `laravels.received_request` After LaravelS parsed `Swoole\\Http\\Request` to `Illuminate\\Http\\Request`, before Laravel\'s Kernel handles this request.\n\n    ```php\n    // Edit file `app/Providers/EventServiceProvider.php`, add the following code into method `boot`\n    // If no variable $events, you can also call Facade \\Event::listen(). \n    $events->listen(\'laravels.received_request\', function (\\Illuminate\\Http\\Request $req, $app) {\n        $req->query->set(\'get_key\', \'hhxsv5\');// Change query of request\n        $req->request->set(\'post_key\', \'hhxsv5\'); // Change post of request\n    });\n    ```\n\n- `laravels.generated_response` After Laravel\'s Kernel handled the request, before LaravelS parses `Illuminate\\Http\\Response` to `Swoole\\Http\\Response`.\n\n    ```php\n    // Edit file `app/Providers/EventServiceProvider.php`, add the following code into method `boot`\n    // If no variable $events, you can also call Facade \\Event::listen(). \n    $events->listen(\'laravels.generated_response\', function (\\Illuminate\\Http\\Request $req, \\Symfony\\Component\\HttpFoundation\\Response $rsp, $app) {\n        $rsp->headers->set(\'header-key\', \'hhxsv5\');// Change header of response\n    });\n    ```\n\n### Customized asynchronous events\n> This feature depends on `AsyncTask` of `Swoole`, your need to set `swoole.task_worker_num` in `config/laravels.php` firstly. The performance of asynchronous event processing is influenced by number of Swoole task process, you need to set [task_worker_num](https://www.swoole.co.uk/docs/modules/swoole-server/configuration) appropriately.\n\n1.Create event class.\n```php\nuse Hhxsv5\\LaravelS\\Swoole\\Task\\Event;\nclass TestEvent extends Event\n{\n    private $data;\n    public function __construct($data)\n    {\n        $this->data = $data;\n    }\n    public function getData()\n    {\n        return $this->data;\n    }\n}\n```\n\n2.Create listener class.\n```php\nuse Hhxsv5\\LaravelS\\Swoole\\Task\\Task;\nuse Hhxsv5\\LaravelS\\Swoole\\Task\\Event;\nuse Hhxsv5\\LaravelS\\Swoole\\Task\\Listener;\nclass TestListener1 extends Listener\n{\n    // Declare constructor without parameters\n    public function __construct()\n    {\n    }\n    public function handle(Event $event)\n    {\n        \\Log::info(__CLASS__ . \':handle start\', [$event->getData()]);\n        sleep(2);// Simulate the slow codes\n        // Deliver task in CronJob, but NOT support callback finish() of task.\n        // Note:\n        // 1.Set parameter 2 to true\n        // 2.Modify task_ipc_mode to 1 or 2 in config/laravels.php, see https://www.swoole.co.uk/docs/modules/swoole-server/configuration\n        $ret = Task::deliver(new TestTask(\'task data\'), true);\n        var_dump($ret);\n        // throw new \\Exception(\'an exception\');// all exceptions will be ignored, then record them into Swoole log, you need to try/catch them\n    }\n}\n```\n\n3.Bind event & listeners.\n```php\n// Bind event & listeners in file "config/laravels.php", one event => many listeners\n[\n    // ...\n    \'events\' => [\n        \\App\\Tasks\\TestEvent::class => [\n            \\App\\Tasks\\TestListener1::class,\n            //\\App\\Tasks\\TestListener2::class,\n        ],\n    ],\n    // ...\n];\n```\n\n4.Fire event.\n```php\n// Create instance of event and fire it, "fire" is asynchronous.\nuse Hhxsv5\\LaravelS\\Swoole\\Task\\Event;\n$success = Event::fire(new TestEvent(\'event data\'));\nvar_dump($success);// Return true if sucess, otherwise false\n```\n\n## Asynchronous task queue\n> This feature depends on `AsyncTask` of `Swoole`, your need to set `swoole.task_worker_num` in `config/laravels.php` firstly. The performance of task processing is influenced by number of Swoole task process, you need to set [task_worker_num](https://www.swoole.co.uk/docs/modules/swoole-server/configuration) appropriately.\n\n1.Create task class.\n```php\nuse Hhxsv5\\LaravelS\\Swoole\\Task\\Task;\nclass TestTask extends Task\n{\n    private $data;\n    private $result;\n    public function __construct($data)\n    {\n        $this->data = $data;\n    }\n    // The logic of task handling, run in task process, CAN NOT deliver task\n    public function handle()\n    {\n        \\Log::info(__CLASS__ . \':handle start\', [$this->data]);\n        sleep(2);// Simulate the slow codes\n        // throw new \\Exception(\'an exception\');// all exceptions will be ignored, then record them into Swoole log, you need to try/catch them\n        $this->result = \'the result of \' . $this->data;\n    }\n    // Optional, finish event, the logic of after task handling, run in worker process, CAN deliver task \n    public function finish()\n    {\n        \\Log::info(__CLASS__ . \':finish start\', [$this->result]);\n        Task::deliver(new TestTask2(\'task2 data\')); // Deliver the other task\n    }\n}\n```\n\n2.Deliver task.\n```php\n// Create instance of TestTask and deliver it, "deliver" is asynchronous.\nuse Hhxsv5\\LaravelS\\Swoole\\Task\\Task;\n$task = new TestTask(\'task data\');\n// $task->delay(3);// delay 3 seconds to deliver task\n$ret = Task::deliver($task);\nvar_dump($ret);// Return true if sucess, otherwise false\n```\n\n## Millisecond cron job\n> Wrapper cron job base on [Swoole\'s Millisecond Timer](https://www.swoole.co.uk/docs/modules/swoole-async-io), replace `Linux` `Crontab`.\n\n1.Create cron job class.\n```php\nnamespace App\\Jobs\\Timer;\nuse App\\Tasks\\TestTask;\nuse Swoole\\Coroutine;\nuse Hhxsv5\\LaravelS\\Swoole\\Task\\Task;\nuse Hhxsv5\\LaravelS\\Swoole\\Timer\\CronJob;\nclass TestCronJob extends CronJob\n{\n    protected $i = 0;\n    // !!! The `interval` and `isImmediate` of cron job can be configured in two ways(pick one of two): one is to overload the corresponding method, and the other is to pass parameters when registering cron job.\n    // --- Override the corresponding method to return the configuration: begin\n    public function interval()\n    {\n        return 1000;// Run every 1000ms\n    }\n    public function isImmediate()\n    {\n        return false;// Whether to trigger `run` immediately after setting up\n    }\n    // --- Override the corresponding method to return the configuration: end\n    public function run()\n    {\n        \\Log::info(__METHOD__, [\'start\', $this->i, microtime(true)]);\n        // do something\n        // sleep(1); // Swoole < 2.1\n        Coroutine::sleep(1); // Swoole>=2.1 Coroutine will be automatically created for run().\n        $this->i++;\n        \\Log::info(__METHOD__, [\'end\', $this->i, microtime(true)]);\n\n        if ($this->i >= 10) { // Run 10 times only\n            \\Log::info(__METHOD__, [\'stop\', $this->i, microtime(true)]);\n            $this->stop(); // Stop this cron job\n            // Deliver task in CronJob, but NOT support callback finish() of task.\n            // Note:\n            // 1.Set parameter 2 to true\n            // 2.Modify task_ipc_mode to 1 or 2 in config/laravels.php, see https://www.swoole.co.uk/docs/modules/swoole-server/configuration\n            $ret = Task::deliver(new TestTask(\'task data\'), true);\n            var_dump($ret);\n        }\n        // throw new \\Exception(\'an exception\');// all exceptions will be ignored, then record them into Swoole log, you need to try/catch them\n    }\n}\n```\n\n2.Register cron job.\n```php\n// Register cron jobs in file "config/laravels.php"\n[\n    // ...\n    \'timer\'          => [\n        \'enable\' => true, // Enable Timer\n        \'jobs\'   => [ // The list of cron job\n            // Enable LaravelScheduleJob to run `php artisan schedule:run` every 1 minute, replace Linux Crontab\n            // \\Hhxsv5\\LaravelS\\Illuminate\\LaravelScheduleJob::class,\n            // Two ways to configure parameters:\n            // [\\App\\Jobs\\Timer\\TestCronJob::class, [1000, true]], // Pass in parameters when registering\n            \\App\\Jobs\\Timer\\TestCronJob::class, // Override the corresponding method to return the configuration\n        ],\n        \'max_wait_time\' => 5, // Max waiting time of reloading\n    ],\n    // ...\n];\n```\n\n3.Note: it will launch multiple timers when build the server cluster, so you need to make sure that launch one timer only to avoid running repetitive task.\n\n4.LaravelS `v3.4.0` starts to support the hot restart [Reload] `Timer` process. After LaravelS receives the `SIGUSR1` signal, it waits for `max_wait_time`(default 5) seconds to end the process, then the `Manager` process will pull up the `Timer` process again.\n\n## Reload automatically when code is modified\n\n- Via `inotify`, support Linux only.\n\n    1.Install [inotify](http://pecl.php.net/package/inotify) extension.\n\n    2.Turn on the switch in [Settings](https://github.com/hhxsv5/laravel-s/blob/master/Settings.md).\n\n    3.Notice: Modify the file only in `Linux` to receive the file change events. It\'s recommended to use the latest Docker. [Vagrant Solution](https://github.com/mhallin/vagrant-notify-forwarder).\n\n- Via `fswatch`, support OS X/Linux/Windows.\n\n    1.Install [fswatch](https://github.com/emcrisostomo/fswatch).\n\n    2.Run command in your project root directory.\n\n    ```bash\n    # Watch current directory\n    ./bin/fswatch\n    # Watch app directory\n    ./bin/fswatch ./app\n    ```\n\n- Via `inotifywait`, support Linux.\n\n    1.Install [inotify-tools](https://github.com/rvoicilas/inotify-tools).\n\n    2.Run command in your project root directory.\n\n    ```bash\n    # Watch current directory\n    ./bin/inotify\n    # Watch app directory\n    ./bin/inotify ./app\n    ```\n\n- When the above methods does not work, the ultimate solution: set `max_request=1,worker_num=1`, so that `Worker` process will restart after processing a request. The performance of this method is very poor, `so only development environment use`.\n\n## Get the instance of `SwooleServer` in your project\n\n```php\n/**\n * $swoole is the instance of `Swoole\\WebSocket\\Server` if enable WebSocket server, otherwise `Swoole\\Http\\Server`\n * @var \\Swoole\\WebSocket\\Server|\\Swoole\\Http\\Server $swoole\n */\n$swoole = app(\'swoole\');\nvar_dump($swoole->stats());// Singleton\n```\n\n## Use `SwooleTable`\n\n1.Define Table, support multiple.\n> All defined tables will be created before Swoole starting.\n\n```php\n// in file "config/laravels.php"\n[\n    // ...\n    \'swoole_tables\'  => [\n        // Scene\xef\xbc\x9abind UserId & FD in WebSocket\n        \'ws\' => [// The Key is table name, will add suffix "Table" to avoid naming conflicts. Here defined a table named "wsTable"\n            \'size\'   => 102400,// The max size\n            \'column\' => [// Define the columns\n                [\'name\' => \'value\', \'type\' => \\Swoole\\Table::TYPE_INT, \'size\' => 8],\n            ],\n        ],\n        //...Define the other tables\n    ],\n    // ...\n];\n```\n\n2.Access `Table`: all table instances will be bound on `SwooleServer`, access by `app(\'swoole\')->xxxTable`.\n\n```php\nnamespace App\\Services;\nuse Hhxsv5\\LaravelS\\Swoole\\WebsocketHandlerInterface;\nuse Swoole\\Http\\Request;\nuse Swoole\\WebSocket\\Frame;\nuse Swoole\\WebSocket\\Server;\nclass WebSocketService implements WebSocketHandlerInterface\n{\n    /**@var \\Swoole\\Table $wsTable */\n    private $wsTable;\n    public function __construct()\n    {\n        $this->wsTable = app(\'swoole\')->wsTable;\n    }\n    // Scene\xef\xbc\x9abind UserId & FD in WebSocket\n    public function onOpen(Server $server, Request $request)\n    {\n        // var_dump(app(\'swoole\') === $server);// The same instance\n        /**\n         * Get the currently logged in user\n         * This feature requires that the path to establish a WebSocket connection go through middleware such as Authenticate.\n         * E.g:\n         * Browser side: var ws = new WebSocket("ws://127.0.0.1:5200/ws");\n         * Then the /ws route in Laravel needs to add the middleware like Authenticate.\n         */\n        // $user = Auth::user();\n        // $userId = $user ? $user->id : 0; // 0 means a guest user who is not logged in\n        $userId = mt_rand(1000, 10000);\n        $this->wsTable->set(\'uid:\' . $userId, [\'value\' => $request->fd]);// Bind map uid to fd\n        $this->wsTable->set(\'fd:\' . $request->fd, [\'value\' => $userId]);// Bind map fd to uid\n        $server->push($request->fd, "Welcome to LaravelS #{$request->fd}");\n    }\n    public function onMessage(Server $server, Frame $frame)\n    {\n        // Broadcast\n        foreach ($this->wsTable as $key => $row) {\n            if (strpos($key, \'uid:\') === 0 && $server->isEstablished($row[\'value\'])) {\n                $content = sprintf(\'Broadcast: new message "%s" from #%d\', $frame->data, $frame->fd);\n                $server->push($row[\'value\'], $content);\n            }\n        }\n    }\n    public function onClose(Server $server, $fd, $reactorId)\n    {\n        $uid = $this->wsTable->get(\'fd:\' . $fd);\n        if ($uid !== false) {\n            $this->wsTable->del(\'uid:\' . $uid[\'value\']); // Unbind uid map\n        }\n        $this->wsTable->del(\'fd:\' . $fd);// Unbind fd map\n        $server->push($fd, "Goodbye #{$fd}");\n    }\n}\n```\n\n## Multi-port mixed protocol\n\n> For more information, please refer to [Swoole Server AddListener](https://www.swoole.co.uk/docs/modules/swoole-server-methods#swoole_server-addlistener)\n\nTo make our main server support more protocols not just Http and WebSocket, we bring the feature `multi-port mixed protocol` of Swoole in LaravelS and name it `Socket`. Now, you can build `TCP/UDP` applications easily on top of Laravel.\n\n1. Create socket handler class, and extend `Hhxsv5\\LaravelS\\Swoole\\Socket\\{TcpSocket|UdpSocket|Http|WebSocket}`.\n\n    ```php\n    namespace App\\Sockets;\n    use Hhxsv5\\LaravelS\\Swoole\\Socket\\TcpSocket;\n    use Swoole\\Server;\n    class TestTcpSocket extends TcpSocket\n    {\n        public function onConnect(Server $server, $fd, $reactorId)\n        {\n            \\Log::info(\'New TCP connection\', [$fd]);\n            $server->send($fd, \'Welcome to LaravelS.\');\n        }\n        public function onReceive(Server $server, $fd, $reactorId, $data)\n        {\n            \\Log::info(\'Received data\', [$fd, $data]);\n            $server->send($fd, \'LaravelS: \' . $data);\n            if ($data === "quit\\r\\n") {\n                $server->send($fd, \'LaravelS: bye\' . PHP_EOL);\n                $server->close($fd);\n            }\n        }\n        public function onClose(Server $server, $fd, $reactorId)\n        {\n            \\Log::info(\'Close TCP connection\', [$fd]);\n            $server->send($fd, \'Goodbye\');\n        }\n    }\n    ```\n\n    These `Socket` connections share the same worker processes with your `HTTP`/`WebSocket` connections. So it won\'t be a problem at all if you want to deliver tasks, use `SwooleTable`, even Laravel components such as DB, Eloquent and so on.\n    At the same time, you can access `Swoole\\Server\\Port` object directly by member property `swoolePort`.\n\n    ```php\n    public function onReceive(Server $server, $fd, $reactorId, $data)\n    {\n        $port = $this->swoolePort; //There you go\n    }\n    ```\n\n2. Register Sockets.\n\n    ```php\n    // Edit `config/laravels.php`\n    //...\n    \'sockets\' => [\n        [\n            \'host\'     => \'127.0.0.1\',\n            \'port\'     => 5291,\n            \'type\'     => SWOOLE_SOCK_TCP,// Socket type: SWOOLE_SOCK_TCP/SWOOLE_SOCK_TCP6/SWOOLE_SOCK_UDP/SWOOLE_SOCK_UDP6/SWOOLE_UNIX_DGRAM/SWOOLE_UNIX_STREAM\n            \'settings\' => [// Swoole settings\xef\xbc\x9ahttps://www.swoole.co.uk/docs/modules/swoole-server-methods#swoole_server-addlistener\n                \'open_eof_check\' => true,\n                \'package_eof\'    => "\\r\\n",\n            ],\n            \'handler\'  => \\App\\Sockets\\TestTcpSocket::class,\n        ],\n    ],\n    ```\n\n    About the heartbeat configuration, it can only be set on the `main server` and cannot be configured on `Socket`, but the `Socket` inherits the heartbeat configuration of the `main server`.\n\n    For TCP socket, `onConnect` and `onClose` events will be blocked when `dispatch_mode` of Swoole is `1/3`, so if you want to unblock these two events please set `dispatch_mode` to `2/4/5`.\n\n    ```php\n    \'swoole\' => [\n        //...\n        \'dispatch_mode\' => 2,\n        //...\n    ];\n    ```\n\n3. Test.\n\n- TCP: `telnet 127.0.0.1 5291`\n\n- UDP: [Linux] `echo "Hello LaravelS" > /dev/udp/127.0.0.1/5292`\n\n4. Register example of other protocols.\n\n    - UDP\n    ```php\n    \'sockets\' => [\n        [\n            \'host\'     => \'0.0.0.0\',\n            \'port\'     => 5292,\n            \'type\'     => SWOOLE_SOCK_UDP,\n            \'settings\' => [\n                \'open_eof_check\' => true,\n                \'package_eof\'    => "\\r\\n",\n            ],\n            \'handler\'  => \\App\\Sockets\\TestUdpSocket::class,\n        ],\n    ],\n    ```\n\n    - Http\n    ```php\n    \'sockets\' => [\n        [\n            \'host\'     => \'0.0.0.0\',\n            \'port\'     => 5293,\n            \'type\'     => SWOOLE_SOCK_TCP,\n            \'settings\' => [\n                \'open_http_protocol\' => true,\n            ],\n            \'handler\'  => \\App\\Sockets\\TestHttp::class,\n        ],\n    ],\n    ```\n\n    - WebSocket: The main server must `turn on WebSocket`, that is, set `websocket.enable` to `true`.\n    ```php\n    \'sockets\' => [\n        [\n            \'host\'     => \'0.0.0.0\',\n            \'port\'     => 5294,\n            \'type\'     => SWOOLE_SOCK_TCP,\n            \'settings\' => [\n                \'open_http_protocol\'      => true,\n                \'open_websocket_protocol\' => true,\n            ],\n            \'handler\'  => \\App\\Sockets\\TestWebSocket::class,\n        ],\n    ],\n    ```\n\n## Coroutine\n\n> [Swoole Coroutine](https://www.swoole.co.uk/coroutine)\n\n- Warning: The order of code execution in the coroutine is out of order. The data of the request level should be isolated by the coroutine ID. However, there are many singleton and static attributes in Laravel/Lumen, the data between different requests will affect each other, it\'s `Unsafe`. For example, the database connection is a singleton, the same database connection shares the same PDO resource. This is fine in the synchronous blocking mode, but it does not work in the asynchronous coroutine mode. Each query needs to create different connections and maintain IO state of different connections, which requires a connection pool. So `DO NOT` enable the coroutine, only the custom process can use the coroutine.\n\n- Enable Coroutine, default disable.\n    \n    ```php\n    // Edit `config/laravels.php`\n    [\n        //...\n        \'swoole\' => [\n            //...\n            \'enable_coroutine\' => true\n         ],\n    ]\n    ```\n\n- [Coroutine Client](https://wiki.swoole.com/wiki/page/p-coroutine_mysql.html): require `Swoole>=2.0`.\n\n- [Runtime Coroutine](https://wiki.swoole.com/wiki/page/965.html): require `Swoole>=4.1.0`, and enable it.\n\n    ```php\n    // Edit `config/laravels.php`\n    [\n        //...\n        \'enable_coroutine_runtime\' => true\n        //...\n    ]\n    ```\n\n## Custom process\n\n> Support developers to create special work processes for monitoring, reporting, or other special tasks. Refer [addProcess](https://www.swoole.co.uk/docs/modules/swoole-server-methods#swoole_server-addprocess).\n\n1. Create Proccess class, implements CustomProcessInterface.\n\n    ```php\n    namespace App\\Processes;\n    use App\\Tasks\\TestTask;\n    use Hhxsv5\\LaravelS\\Swoole\\Process\\CustomProcessInterface;\n    use Hhxsv5\\LaravelS\\Swoole\\Task\\Task;\n    use Swoole\\Coroutine;\n    use Swoole\\Http\\Server;\n    use Swoole\\Process;\n    class TestProcess implements CustomProcessInterface\n    {\n        public static function getName()\n        {\n            // The name of process\n            return \'test\';\n        }\n        public static function callback(Server $swoole, Process $process)\n        {\n            // The callback method cannot exit. Once exited, Manager process will automatically create the process \n            \\Log::info(__METHOD__, [posix_getpid(), $swoole->stats()]);\n            while (true) {\n                \\Log::info(\'Do something\');\n                // sleep(1); // Swoole < 2.1\n                Coroutine::sleep(1); // Swoole>=2.1 Coroutine will be automatically created for callback().\n                 // Deliver task in custom process, but NOT support callback finish() of task.\n                // Note:\n                // 1.Set parameter 2 to true\n                // 2.Modify task_ipc_mode to 1 or 2 in config/laravels.php, see https://www.swoole.co.uk/docs/modules/swoole-server/configuration\n                $ret = Task::deliver(new TestTask(\'task data\'), true);\n                var_dump($ret);\n                // The upper layer will capture the exception thrown in the callback and record it to the Swoole log. If the number of exceptions reaches 10, the process will exit and the Manager process will re-create the process. Therefore, developers are encouraged to try/catch to avoid creating the process too frequently.\n                // throw new \\Exception(\'an exception\');\n            }\n        }\n        // Requirements: LaravelS >= v3.4.0 & callback() must be async non-blocking program.\n        public static function onReload(Server $swoole, Process $process)\n        {\n            // Stop the process...\n            // Then end process\n            $process->exit(0);\n        }\n    }\n    ```\n\n2. Register TestProcess.\n\n    ```php\n    // Edit `config/laravels.php`\n    // ...\n    \'processes\' => [\n        [\n            \'class\'    => \\App\\Processes\\TestProcess::class,\n            \'redirect\' => false, // Whether redirect stdin/stdout, true or false\n            \'pipe\'     => 0 // The type of pipeline, 0: no pipeline 1: SOCK_STREAM 2: SOCK_DGRAM\n            \'enable\'   => true // Whether to enable, default true\n        ],\n    ],\n    ```\n\n3. Note: The TestProcess::callback() method cannot quit. If the number of quit reaches 10, the Manager process will re-create the process.\n\n## Other features\n\n### Configuring the event callback function of `Swoole`\n\nSupported events:\n\n| Event | Interface | When happened |\n| -------- | -------- | -------- |\n| ServerStart | Hhxsv5\\LaravelS\\Swoole\\Events\\ServerStartInterface | Occurs when the Master process is starting, `this event should not handle complex business logic, and can only do some simple work of initialization`. |\n| ServerStop | Hhxsv5\\LaravelS\\Swoole\\Events\\ServerStopInterface | Occurs when the server exits normally, `CANNOT use async or coroutine related APIs in this event`. |\n| WorkerStart | Hhxsv5\\LaravelS\\Swoole\\Events\\WorkerStartInterface | Occurs after the Worker/Task process is started, and the Laravel initialization has been completed. |\n| WorkerStop | Hhxsv5\\LaravelS\\Swoole\\Events\\WorkerStopInterface | Occurs after the Worker/Task process exits normally |\n| WorkerError | Hhxsv5\\LaravelS\\Swoole\\Events\\WorkerErrorInterface | Occurs when an exception or fatal error occurs in the Worker/Task process |\n\n1.Create an event class to implement the corresponding interface.\n```php\nnamespace App\\Events;\nuse Hhxsv5\\LaravelS\\Swoole\\Events\\ServerStartInterface;\nuse Swoole\\Atomic;\nuse Swoole\\Http\\Server;\nclass ServerStartEvent implements ServerStartInterface\n{\n    public function __construct()\n    {\n    }\n    public function handle(Server $server)\n    {\n        // Initialize a global counter (available across processes)\n        $server->atomicCount = new Atomic(2233);\n\n        // Invoked in controller: app(\'swoole\')->atomicCount->get();\n    }\n}\n```\n\n```php\nnamespace App\\Events;\nuse Hhxsv5\\LaravelS\\Swoole\\Events\\WorkerStartInterface;\nuse Swoole\\Http\\Server;\nclass WorkerStartEvent implements WorkerStartInterface\n{\n    public function __construct()\n    {\n    }\n    public function handle(Server $server, $workerId)\n    {\n        // Initialize a database connection pool\n        // DatabaseConnectionPool::init();\n    }\n}\n```\n2.Configuration.\n```php\n// Edit `config/laravels.php`\n\'event_handlers\' => [\n    \'ServerStart\' => \\App\\Events\\ServerStartEvent::class,\n    \'WorkerStart\' => \\App\\Events\\WorkerStartEvent::class,\n],\n```\n\n## Important notices\n\n- `Singleton Issue`\n\n    - Under FPM mode, singleton instances will be instantiated and recycled in every request, request start=>instantiate instance=>request end=>recycled instance.\n\n    - Under Swoole Server, All singleton instances will be held in memory, different lifetime from FPM, request start=>instantiate instance=>request end=>do not recycle singleton instance. So need developer to maintain status of singleton instances in every request.\n\n    - Common solutions:\n\n        1. Write a `XxxCleaner` class to clean up the singleton object state. This class implements the interface `Hhxsv5\\LaravelS\\Illuminate\\Cleaners\\CleanerInterface` and then registers it in `cleaners` of `laravels.php`.\n\n        2. `Reset` status of singleton instances by `Middleware`.\n\n        1. Re-register `ServiceProvider`, add `XxxServiceProvider` into `register_providers` of file `laravels.php`. So that reinitialize singleton instances in every request [Refer](https://github.com/hhxsv5/laravel-s/blob/master/Settings.md).\n    \n    - LaravelS has built in some [Cleaners](https://github.com/hhxsv5/laravel-s/blob/master/Settings.md).\n\n- [Known issues](https://github.com/hhxsv5/laravel-s/blob/master/KnownIssues.md): a package of known issues and solutions.\n\n- Debugging method: Logging, [Laravel Dump Server](https://github.com/beyondcode/laravel-dump-server)(Laravel 5.7 has been integrated by default).\n\n- Should get all request information from `Illuminate\\Http\\Request` Object, $_ENV is readable, $_SERVER is partially readable, `CANNOT USE` $_GET/$_POST/$_FILES/$_COOKIE/$_REQUEST/$_SESSION/$GLOBALS.\n\n    ```php\n    public function form(\\Illuminate\\Http\\Request $request)\n    {\n        $name = $request->input(\'name\');\n        $all = $request->all();\n        $sessionId = $request->cookie(\'sessionId\');\n        $photo = $request->file(\'photo\');\n        // Call getContent() to get the raw POST body, instead of file_get_contents(\'php://input\')\n        $rawContent = $request->getContent();\n        //...\n    }\n    ```\n\n- Respond by `Illuminate\\Http\\Response` Object, compatible with echo/vardump()/print_r()\xef\xbc\x8c`CANNOT USE` functions dd()/exit()/die()/header()/setcookie()/http_response_code().\n\n    ```php\n    public function json()\n    {\n        return response()->json([\'time\' => time()])->header(\'header1\', \'value1\')->withCookie(\'c1\', \'v1\');\n    }\n    ```\n\n- The various `singleton connections` will be `memory resident`, recommend to enable `persistent connection`.\n1. Database connection, it `will` reconnect automatically `immediately` after disconnect.\n    ```php\n    // config/database.php\n    //...\n    \'connections\' => [\n        \'my_conn\' => [\n            \'driver\'    => \'mysql\',\n            \'host\'      => env(\'DB_MY_CONN_HOST\', \'localhost\'),\n            \'port\'      => env(\'DB_MY_CONN_PORT\', 3306),\n            \'database\'  => env(\'DB_MY_CONN_DATABASE\', \'forge\'),\n            \'username\'  => env(\'DB_MY_CONN_USERNAME\', \'forge\'),\n            \'password\'  => env(\'DB_MY_CONN_PASSWORD\', \'\'),\n            \'charset\'   => \'utf8mb4\',\n            \'collation\' => \'utf8mb4_unicode_ci\',\n            \'prefix\'    => \'\',\n            \'strict\'    => false,\n            \'options\'   => [\n                // Enable persistent connection\n                \\PDO::ATTR_PERSISTENT => true,\n            ],\n        ],\n        //...\n    ],\n    //...\n    ```\n\n2. Redis connection, it `won\'t` reconnect automatically `immediately` after disconnect, and will throw an exception about lost connection, reconnect next time. You need to make sure that `SELECT DB` correctly before operating Redis every time.\n    ```php\n    // config/database.php\n    \'redis\' => [\n            \'client\' => env(\'REDIS_CLIENT\', \'phpredis\'), // It is recommended to use phpredis for better performance.\n            \'default\' => [\n                \'host\'       => env(\'REDIS_HOST\', \'localhost\'),\n                \'password\'   => env(\'REDIS_PASSWORD\', null),\n                \'port\'       => env(\'REDIS_PORT\', 6379),\n                \'database\'   => 0,\n                \'persistent\' => true, // Enable persistent connection\n            ],\n        ],\n    //...\n    ```\n\n- `global`, `static` variables which you declared are need to destroy(reset) manually.\n\n- Infinitely appending element into `static`/`global` variable will lead to memory leak.\n\n    ```php\n    // Some class\n    class Test\n    {\n        public static $array = [];\n        public static $string = \'\';\n    }\n\n    // Controller\n    public function test(Request $req)\n    {\n        // Memory leak\n        Test::$array[] = $req->input(\'param1\');\n        Test::$string .= $req->input(\'param2\');\n    }\n    ```\n\n- [Linux kernel parameter adjustment](https://wiki.swoole.com/wiki/page/p-server/sysctl.html)\n\n- [Pressure test](https://wiki.swoole.com/wiki/page/62.html)\n\n## Alternatives\n\n- [swooletw/laravel-swoole](https://github.com/swooletw/laravel-swoole)\n\n## Support us\n\n| Currency | Address |\n| -------- | -------- |\n| BTC | 3KX6LTJcbgiKKaHGC7zySVdMmFXvjikQ3U |\n| ETH | 0xccab8324d33a978a7ac040049e09100029123d71 |\n| LTC | LPhrmK1ZvjnP3ckd9j6QQV7BvjzjrWyTes |\n| USDT | 18dhqenUw3ib3QUzUxXJ1WdCa4tZus4cv3 |\n\n## License\n\n[MIT](https://github.com/hhxsv5/laravel-s/blob/master/LICENSE)\n'