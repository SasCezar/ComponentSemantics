b'cpp-httplib\n===========\n\n[![](https://github.com/yhirose/cpp-httplib/workflows/test/badge.svg)](https://github.com/yhirose/cpp-httplib/actions)\n[![Build Status](https://travis-ci.org/yhirose/cpp-httplib.svg?branch=master)](https://travis-ci.org/yhirose/cpp-httplib)\n[![Bulid Status](https://ci.appveyor.com/api/projects/status/github/yhirose/cpp-httplib?branch=master&svg=true)](https://ci.appveyor.com/project/yhirose/cpp-httplib)\n\nA C++ single-file header-only cross platform HTTP/HTTPS library.\n\nIt\'s extremely easy to setup. Just include **httplib.h** file in your code!\n\nServer Example\n--------------\n\n```c++\n#include <httplib.h>\n\nint main(void)\n{\n    using namespace httplib;\n\n    Server svr;\n\n    svr.Get("/hi", [](const Request& req, Response& res) {\n        res.set_content("Hello World!", "text/plain");\n    });\n\n    svr.Get(R"(/numbers/(\\d+))", [&](const Request& req, Response& res) {\n        auto numbers = req.matches[1];\n        res.set_content(numbers, "text/plain");\n    });\n\n    svr.Get("/stop", [&](const Request& req, Response& res) {\n        svr.stop();\n    });\n\n    svr.listen("localhost", 1234);\n}\n```\n\n`Post`, `Put`, `Delete` and `Options` methods are also supported.\n\n### Bind a socket to multiple interfaces and any available port\n\n```cpp\nint port = svr.bind_to_any_port("0.0.0.0");\nsvr.listen_after_bind();\n```\n\n### Static File Server\n\n```cpp\nsvr.set_base_dir("./www");\n```\n\n### Logging\n\n```cpp\nsvr.set_logger([](const auto& req, const auto& res) {\n    your_logger(req, res);\n});\n```\n\n### Error Handler\n\n```cpp\nsvr.set_error_handler([](const auto& req, auto& res) {\n    const char* fmt = "<p>Error Status: <span style=\'color:red;\'>%d</span></p>";\n    char buf[BUFSIZ];\n    snprintf(buf, sizeof(buf), fmt, res.status);\n    res.set_content(buf, "text/html");\n});\n```\n\n### \'multipart/form-data\' POST data\n\n```cpp\nsvr.Post("/multipart", [&](const auto& req, auto& res) {\n    auto size = req.files.size();\n    auto ret = req.has_file("name1");\n    const auto& file = req.get_file_value("name1");\n    // file.filename;\n    // file.content_type;\n    auto body = req.body.substr(file.offset, file.length);\n});\n\n```\n\n### Stream content with Content provider\n\n```cpp\nconst uint64_t DATA_CHUNK_SIZE = 4;\n\nsvr.Get("/stream", [&](const Request &req, Response &res) {\n  auto data = new std::string("abcdefg");\n\n  res.set_content_provider(\n    data->size(), // Content length\n    [data](uint64_t offset, uint64_t length, DataSink sink) {\n      const auto &d = *data;\n      sink(&d[offset], std::min(length, DATA_CHUNK_SIZE));\n    },\n    [data] { delete data; });\n});\n```\n\n### Chunked transfer encoding\n\n```cpp\nsvr.Get("/chunked", [&](const Request& req, Response& res) {\n  res.set_chunked_content_provider(\n    [](uint64_t offset, DataSink sink, Done done) {\n       sink("123", 3);\n       sink("345", 3);\n       sink("789", 3);\n       done();\n    }\n  );\n});\n```\n\n### Default thread pool supporet\n\nSet thread count to 8:\n\n```cpp\n#define CPPHTTPLIB_THREAD_POOL_COUNT 8\n```\n\nDisable the default thread pool:\n\n```cpp\n#define CPPHTTPLIB_THREAD_POOL_COUNT 0\n```\n\n### Override the default thread pool with yours\n\n```cpp\nclass YourThreadPoolTaskQueue : public TaskQueue {\npublic:\n  YourThreadPoolTaskQueue(size_t n) {\n    pool_.start_with_thread_count(n);\n  }\n\n  virtual void enqueue(std::function<void()> fn) override {\n    pool_.enqueue(fn);\n  }\n\n  virtual void shutdown() override {\n    pool_.shutdown_gracefully();\n  }\n\nprivate:\n  YourThreadPool pool_;\n};\n\nsvr.new_task_queue = [] {\n  return new YourThreadPoolTaskQueue(12);\n};\n```\n\nClient Example\n--------------\n\n### GET\n\n```c++\n#include <httplib.h>\n#include <iostream>\n\nint main(void)\n{\n    httplib::Client cli("localhost", 1234);\n\n    auto res = cli.Get("/hi");\n    if (res && res->status == 200) {\n        std::cout << res->body << std::endl;\n    }\n}\n```\n\n### GET with HTTP headers\n\n```c++\n  httplib::Headers headers = {\n    { "Accept-Encoding", "gzip, deflate" }\n  };\n  auto res = cli.Get("/hi", headers);\n```\n\n### GET with Content Receiver\n\n```c++\n  std::string body;\n\n  auto res = cli.Get("/large-data",\n    [&](const char *data, uint64_t data_length) {\n      body.append(data, data_length);\n      return true;\n    });\n\n  assert(res->body.empty());\n```\n\n### POST\n\n```c++\nres = cli.Post("/post", "text", "text/plain");\nres = cli.Post("/person", "name=john1&note=coder", "application/x-www-form-urlencoded");\n```\n\n### POST with parameters\n\n```c++\nhttplib::Params params;\nparams.emplace("name", "john");\nparams.emplace("note", "coder");\n\nauto res = cli.Post("/post", params);\n```\n or\n\n```c++\nhttplib::Params params{\n  { "name", "john" },\n  { "note", "coder" }\n};\n\nauto res = cli.Post("/post", params);\n```\n\n### POST with Multipart Form Data\n\n```c++\n  httplib::MultipartFormDataItems items = {\n    { "text1", "text default", "", "" },\n    { "text2", "a\xcf\x89b", "", "" },\n    { "file1", "h\\ne\\n\\nl\\nl\\no\\n", "hello.txt", "text/plain" },\n    { "file2", "{\\n  \\"world\\", true\\n}\\n", "world.json", "application/json" },\n    { "file3", "", "", "application/octet-stream" },\n  };\n\n  auto res = cli.Post("/multipart", items);\n```\n\n### PUT\n\n```c++\nres = cli.Put("/resource/foo", "text", "text/plain");\n```\n\n### DELETE\n\n```c++\nres = cli.Delete("/resource/foo");\n```\n\n### OPTIONS\n\n```c++\nres = cli.Options("*");\nres = cli.Options("/resource/foo");\n```\n\n### Connection Timeout\n\n```c++\nhttplib::Client cli("localhost", 8080, 5); // timeouts in 5 seconds\n```\n### With Progress Callback\n\n```cpp\nhttplib::Client client(url, port);\n\n// prints: 0 / 000 bytes => 50% complete\nstd::shared_ptr<httplib::Response> res =\n    cli.Get("/", [](uint64_t len, uint64_t total) {\n        printf("%lld / %lld bytes => %d%% complete\\n",\n            len, total,\n            (int)((len/total)*100));\n        return true; // return \'false\' if you want to cancel the request.\n    }\n);\n```\n\n![progress](https://user-images.githubusercontent.com/236374/33138910-495c4ecc-cf86-11e7-8693-2fc6d09615c4.gif)\n\nThis feature was contributed by [underscorediscovery](https://github.com/yhirose/cpp-httplib/pull/23).\n\n### Basic Authentication\n\n```cpp\nhttplib::Client cli("httplib.org");\n\nauto res = cli.Get("/basic-auth/hello/world", {\n  httplib::make_basic_authentication_header("hello", "world")\n});\n// res->status should be 200\n// res->body should be "{\\n  \\"authenticated\\": true, \\n  \\"user\\": \\"hello\\"\\n}\\n".\n```\n\n### Range\n\n```cpp\nhttplib::Client cli("httpbin.org");\n\nauto res = cli.Get("/range/32", {\n  httplib::make_range_header({{1, 10}}) // \'Range: bytes=1-10\'\n});\n// res->status should be 206.\n// res->body should be "bcdefghijk".\n```\n\n```cpp\nhttplib::make_range_header({{1, 10}, {20, -1}})      // \'Range: bytes=1-10, 20-\'\nhttplib::make_range_header({{100, 199}, {500, 599}}) // \'Range: bytes=100-199, 500-599\'\nhttplib::make_range_header({{0, 0}, {-1, 1}})        // \'Range: bytes=0-0, -1\'\n```\n\n### Keep-Alive connection\n\n```cpp\ncli.set_keep_alive_max_count(2); // Default is 5\n\nstd::vector<Request> requests;\nGet(requests, "/get-request1");\nGet(requests, "/get-request2");\nPost(requests, "/post-request1", "text", "text/plain");\nPost(requests, "/post-request2", "text", "text/plain");\n\nstd::vector<Response> responses;\nif (cli.send(requests, responses)) {\n  for (const auto& res: responses) {\n    ...\n  }\n}\n```\n\n### Redirect\n\n```cpp\nhttplib::Client cli("yahoo.com");\n\nauto res = cli.Get("/");\nres->status; // 301\n\ncli.follow_location(true);\nres = cli.Get("/");\nres->status; // 200\n```\n\nOpenSSL Support\n---------------\n\nSSL support is available with `CPPHTTPLIB_OPENSSL_SUPPORT`. `libssl` and `libcrypto` should be linked.\n\n```c++\n#define CPPHTTPLIB_OPENSSL_SUPPORT\n\nSSLServer svr("./cert.pem", "./key.pem");\n\nSSLClient cli("localhost", 8080);\ncli.set_ca_cert_path("./ca-bundle.crt");\ncli.enable_server_certificate_verification(true);\n```\n\nZlib Support\n------------\n\n\'gzip\' compression is available with `CPPHTTPLIB_ZLIB_SUPPORT`.\n\nThe server applies gzip compression to the following MIME type contents:\n\n  * all text types\n  * image/svg+xml\n  * application/javascript\n  * application/json\n  * application/xml\n  * application/xhtml+xml\n\nNOTE\n----\n\ng++ 4.8 cannot build this library since `<regex>` in g++4.8 is [broken](https://stackoverflow.com/questions/12530406/is-gcc-4-8-or-earlier-buggy-about-regular-expressions).\n\nLicense\n-------\n\nMIT license (\xc2\xa9 2019 Yuji Hirose)\n'