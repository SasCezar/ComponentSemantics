b"ros-install-osx   [![Build Status](https://travis-ci.org/mikepurvis/ros-install-osx.svg?branch=master)](https://travis-ci.org/mikepurvis/ros-install-osx)\n===============\n\nThis repo aims to maintain a usable, scripted, up-to-date installation procedure for\n[ROS](http://ros.org), currently Lunar. The intent is that the `install` script may\nbe executed on a El Capitan or newer machine and produce a working desktop_full\ninstallation, including RQT, rviz, and Gazebo.\n\nThis is the successor to my [popular gist on the same topic][1].\n\n[1]: https://gist.github.com/mikepurvis/9837958\n\n\nUsage\n-----\n\n```shell\ngit clone https://github.com/mikepurvis/ros-install-osx.git\ncd ros-install-osx\n./install\n```\n\nNote that if you do not yet have XQuartz installed, you will be forced to log out and\nin after that installation, and re-run this script.\n\nYou will be prompted for your sudo password at the following points in this process:\n\n   - Homebrew installation.\n   - Caskroom installation.\n   - XQuartz installation.\n   - Initializing rosdep.\n   - Creating and chowning your `/opt/ros/[distro]` folder.\n\nThe installation can be done entirely without sudo if Homebrew and XQuartz are already\ninstalled, rosdep is already installed and initialized, and you set the `ROS_INSTALL_DIR`\nenvironment variable to a path which already exists and you have write access to.\n\n\nStep by Step\n------------\n\nThe `install` script should just work for most users. However, if you run into trouble,\nit's a pretty big pain to rebuild everything. Note that in this scenario, it may make\nsense to treat the script as a list of instructions, and execute them one by one,\nmanually.\n\nIf you have a build fail, for example with rviz, note that you can modify the `catkin build`\nline to start at a particular package. Inside your `indigo_desktop_full_ws` dir, run:\n\n    catkin build --start-with rviz\n\nIf you've resolved whatever issue stopped the build previously, this will pick up where\nit left off.\n\n\n## Troubleshooting\n\n### Python and pip packages\n\nAlready-installed homebrew and pip packages are the most significant source of errors,\nespecially pip packages linked against the system Python rather than Homebrew's Python,\nand Homebrew packages (like Ogre) where multiple versions end up installed, and things\nwhich depend on them end up linked to the different versions. If you have MacPorts or\nFink installed, and Python from either of those is in your path, that will definitely\nbe trouble.\n\nThe script makes _some_ attempt at detecting and warning about these situations, but some\nproblems of this kind will only be visible as segfaults at runtime.\n\nUnfortunately, it's pretty destructive to do so, but the most reliable way to give\nyourself a clean start is removing the current homebrew installation, and all\ncurrently-installed pip packages.\n\nFor pip: `pip freeze | xargs sudo pip uninstall -y`\n\nFor homebrew, see the following: https://gist.github.com/mxcl/1173223\n\nIf you take these steps, obviously also remove your ROS workspace and start the install\nprocess over from scratch as well. Finally, audit your `$PATH` variable to ensure that\nwhen you run `python`, you're getting Homebrew's `python`.\nAnother way to check which Python you are running is to do:\n\n```bash\nwhich python # Should result in /usr/local/bin/python\nls -l $(which python) # Should show a symlink pointing to Homebrew's Cellar\n```\n\nIf you are getting permission errors when you `sudo uninstall` pip packages,\nsee [Issue #11](https://github.com/mikepurvis/ros-install-osx/issues/11) and\n[this StackOverflow Q&A](http://stackoverflow.com/a/35051066/2653356).\n\n### El Capitan support\n\nThe `install` script may not work as smoothly in OS X El Capitan.\nHere are some pointers, tips, and hacks to help you complete the installation.\nThis list was compiled based on the discussion in [Issue #12](https://github.com/mikepurvis/ros-install-osx/issues/12).\n\n#### library not found for -ltbb\n\nSee [Issue #4](https://github.com/mikepurvis/ros-install-osx/issues/4).\nYou need to compile using Xcode's Command Line Tools:\n\n```shell\nxcode-select --install # Install the Command Line Tools\nsudo xcode-select -s /Library/Developer/CommandLineTools # Switch to using them\ngcc --version # Verify that you are compiling using Command Line Tools\n```\n\nThe last command should output something that includes the following:\n\n```bash\nConfigured with: --prefix=/Library/Developer/CommandLineTools/usr\n```\n\nYou'll then have to rerun the entire `install` script or do the following:\n\n```bash\nrm -rf /opt/ros/indigo/* # More generally, /opt/ros/${ROS_DISTRO}/*\nrm -rf build/ devel/ # Assuming your working dir is the catkin workspace\ncatkin build \\\n  ... # See actual script for the 4-line-long command\n```\n\n#### dyld: Library not loaded\n\nIf you see this after installation, when trying to execute `rosrun`, then you\nhave [System Integrity Protection](https://support.apple.com/en-us/HT204899) enabled.\nThe installation script should have detected that and *suggested* a quick fix.\nPlease refer to the very last section of \n[`install`](https://github.com/mikepurvis/ros-install-osx/blob/master/install)\n"