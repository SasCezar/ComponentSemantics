b'[![Downloads](https://img.shields.io/github/downloads/diasurgical/devilutionX/total.svg)](https://github.com/diasurgical/devilutionX/releases)\r\n[![github stars](https://img.shields.io/github/stars/diasurgical/devilutionX.svg)](https://github.com/diasurgical/devilutionX/stargazers)\r\n\r\nNightly builds | Platform\r\n---:| ---\r\n[![CircleCI](https://circleci.com/gh/diasurgical/devilutionX.svg?style=svg)](https://circleci.com/gh/diasurgical/devilutionX) | Linux 32bit & 64bit, Windows 32bit, Nintendo Switch, SDL1\r\n[![Build Status](https://travis-ci.org/diasurgical/devilutionX.svg?branch=master)](https://travis-ci.org/diasurgical/devilutionX) | macOS 64bit\r\n[![Build status](https://ci.appveyor.com/api/projects/status/1a0jus2372qvksht?svg=true)](https://ci.appveyor.com/project/AJenbo/devilutionx) | Windows 64bit (MSVC)\r\n\r\n![Discord Channel](https://avatars3.githubusercontent.com/u/1965106?s=16&v=4) [Discord Chat Channel](https://discord.gg/aQBQdDe)\r\n\r\n# How To Play:\r\n - Copy diabdat.mpq from your CD, or GoG install folder, to the DevilutionX install folder ; Make sure it is all lowercase.\r\n - [Download DevilutionX](https://github.com/diasurgical/devilutionX/releases), or build from source\r\n - Install [SDL2](https://www.libsdl.org/download-2.0.php) (including [SDL2_mixer](https://www.libsdl.org/projects/SDL_mixer/) and [SDL2_ttf](https://www.libsdl.org/projects/SDL_ttf/))\r\n - Run `./devilutionx`\r\n\r\nPlease keep in mind that this is still being worked on and is missing parts of UI and some minor bugs, see [milestone 1](https://github.com/diasurgical/devilutionX/milestone/1) for a full list of known issues.\r\n\r\n# Building from Source\r\n<details><summary>Linux</summary>\r\n\r\n### Installing dependencies on Debian and Ubuntu\r\n```\r\nsudo apt-get install cmake g++ libsdl2-mixer-dev libsdl2-ttf-dev libsodium-dev\r\n```\r\n### Installing dependencies on Fedora\r\n```\r\nsudo dnf install cmake glibc-devel SDL2-devel SDL2_ttf-devel SDL2_mixer-devel libsodium-devel libasan libubsan\r\n```\r\n### Compiling\r\n```\r\ncd build\r\ncmake ..\r\ncmake --build . -j $(nproc)\r\n```\r\n</details>\r\n\r\n<details><summary>macOS</summary>\r\n\r\nMake sure you have [Homebrew](https://brew.sh/) installed, then run:\r\n\r\n```\r\nbrew bundle\r\ncd build\r\ncmake ..\r\ncmake --build . -j $(sysctl -n hw.physicalcpu)\r\n```\r\n</details>\r\n<details><summary>FreeBSD</summary>\r\n\r\n### Installing dependencies\r\n```\r\npkg install cmake sdl2_mixer sdl2_ttf libsodium\r\n```\r\n### Compiling\r\n```\r\ncd build\r\ncmake ..\r\ncmake --build . -j $(sysctl -n hw.ncpu)\r\n```\r\n</details>\r\n\r\n<details><summary>OpenBSD</summary>\r\n\r\n### Installing dependencies\r\n```\r\npkg_add cmake sdl2-mixer sdl2-ttf libsodium gmake\r\n```\r\n### Compiling\r\n```\r\ncd build\r\ncmake -DCMAKE_MAKE_PROGRAM=gmake ..\r\ncmake --build . -j $(sysctl -n hw.ncpuonline)\r\n```\r\n</details>\r\n\r\n<details><summary>Windows via MinGW</summary>\r\n\r\n### Installing dependencies on WSL, Debian and Ubuntu\r\n\r\nDownload and place the 32bit MinGW Development Libraries of [SDL2](https://www.libsdl.org/download-2.0.php), [SDL2_mixer](https://www.libsdl.org/projects/SDL_mixer/), [SDL2_ttf](https://www.libsdl.org/projects/SDL_ttf/) and [Libsodium](https://github.com/jedisct1/libsodium/releases) in `/usr/i686-w64-mingw32`.\r\n\r\n```\r\nsudo apt-get install cmake gcc-mingw-w64-i686 g++-mingw-w64-i686\r\n```\r\n### Compiling\r\n```\r\ncd build\r\ncmake -DCMAKE_TOOLCHAIN_FILE=../CMake/mingwcc.cmake ..\r\ncmake --build . -j $(nproc)\r\n```\r\n</details>\r\n<details><summary>Windows via Visual Studio</summary>\r\n\r\n### Installing dependencies\r\nMake sure to install the `C++ CMake tools for Windows` component for Visual Studio.\r\n\r\n* **Using vcpkg (recommended)**\r\n1. Install vcpkg following the instructions from https://github.com/microsoft/vcpkg#quick-start.\r\n\r\n   Don\'t forget to perform _user-wide integration_ step for additional convenience.\r\n2. Install required dependencies by executing the following command (via cmd or powershell):\r\n\r\n   For the 64-bit version of the dependencies please run this command:\r\n\r\n   ```\r\n   vcpkg install sdl2:x64-windows sdl2-mixer:x64-windows sdl2-ttf:x64-windows libsodium:x64-windows\r\n   ```\r\n\r\n   For the 32-bit version of the dependencies please run this command:\r\n\r\n   ```\r\n   vcpkg install sdl2:x86-windows sdl2-mixer:x86-windows sdl2-ttf:x86-windows libsodium:x86-windows\r\n   ```\r\n\r\n* **Manually**\r\n1. Download and place the MSVC Development Libraries of [SDL2](https://www.libsdl.org/download-2.0.php), [SDL2_mixer](https://www.libsdl.org/projects/SDL_mixer/), [SDL2_ttf](https://www.libsdl.org/projects/SDL_ttf/) and [Libsodium](https://github.com/jedisct1/libsodium/releases) in `%USERPROFILE%\\AppData\\Local\\Microsoft\\WindowsApps\\`.\r\n2. If dependencies are not found or you wish to place them in other location - configure required path variables in _"Manage Configurations..."_ dialog inside Visual Studio or in _cmake-gui_.\r\n\r\n### Compiling\r\n\r\n* **Through Open->CMake in Visual Studio**\r\n1. Go to `File -> Open -> CMake`, select `CMakeLists.txt` from the project root.\r\n2. Select `Build devilution.exe` from the `Build` menu.\r\n\r\n* **Through cmake-gui**\r\n\r\n1. Input the path to devilutionx source directory at `Where is the source code:` field.\r\n2. Input the path where the binaries would be placed at `Where to build the binaries:` field. If you want to place them inside source directory it\'s preferable to do so inside directory called `build` to avoid the binaries being added to the source tree.\r\n3. It\'s recommended to input `Win32` in `Optional Platform for Generator`, otherwise it will default to x64 build.\r\n4. In case you\'re using `vcpkg` select `Specify toolchain file for cross-compiling` and select the file `scripts/buildsystems/vcpkg.cmake` from `vcpkg` directory otherwise just go with `Use default native compilers`.\r\n5. In case you need to select any paths to dependencies manually do this right in cmake-gui window.\r\n6. Press `Generate` and open produced `.sln` file using Visual Studio.\r\n7. Use build/debug etc. commands inside Visual Studio Solution like with any normal Visual Studio project.\r\n</details>\r\n\r\n<details><summary>Nintendo Switch</summary>\r\nRun:\r\n\t\r\n```\r\nPackaging/switch/build.sh\r\n```\r\n\r\nThis will install the [Switch devkit](https://switchbrew.org/wiki/Setting_up_Development_Environment) and build a DevilutionX Switch package. If you already have the devkit installed, or are on a non-Debian system, pass the the devkit path to the script like this:\r\n\r\n```\r\nDEVKITPRO=<path to devkit> Packaging/switch/build.sh\r\n```\r\n\r\nThe nro-file will be generated in the build folder. Test with an emulator (RyuJinx) or real hardware.\r\n</details>\r\n\r\n<details><summary>Haiku</summary>\r\n\r\n### Installing dependencies on 32 bit Haiku\r\n```\r\npkgman install cmake_x86 devel:libsdl2_x86 devel:libsdl2_mixer_x86 devel:libsdl2_ttf_x86 devel:libsodium_x86\r\n```\r\n### Installing dependencies on 64 bit Haiku\r\n```\r\npkgman install cmake devel:libsdl2 devel:libsdl2_mixer devel:libsdl2_ttf devel:libsodium\r\n```\r\n### Compiling on 32 bit Haiku\r\n```\r\ncd build\r\nsetarch x86 #Switch to secondary compiler toolchain (GCC8+)\r\ncmake ..\r\ncmake --build . -j $(nproc)\r\n```\r\n### Compiling on 64 bit Haiku\r\nNo setarch required, as there is no secondary toolchain on x86_64, and the primary is GCC8+\r\n```\r\ncd build\r\ncmake ..\r\ncmake --build . -j $(nproc)\r\n```\r\n</details>\r\n\r\n<details><summary>OpenDingux / RetroFW</summary>\r\n\r\nDevilutionX uses buildroot to build packages for OpenDingux and RetroFW.\r\n\r\nThe build script does the following:\r\n\r\n1. Downloads and configures the buildroot if necessary.\r\n2. Builds the executable (using CMake).\r\n3. Packages the executable and all related resources into an `.ipk` package.\r\n\r\nThe buildroot uses ~4 GiB of disk space and can take almost an hour to build.\r\n\r\nFor OpenDingux builds `mksquashfs` needs to be installed.\r\n\r\n### RetroFW (RS97, RG300, LDK)\r\n\r\nThe RetroFW build uses the buildroot at `$HOME/buildroot-2018.02.9-retrofw`.\r\n\r\n~~~ bash\r\nPackaging/OpenDingux/build-retrofw.sh\r\n~~~\r\n\r\n### OpenDingux (RG350, GCW0)\r\n\r\nThis OpenDingux build uses the buildroot at `$HOME/buildroot-rg350-devilutionx`.\r\n\r\n~~~ bash\r\nPackaging/OpenDingux/build-rg350.sh\r\n~~~\r\n\r\n</details>\r\n\r\n## CMake arguments\r\n### General\r\nThe default build type is `Debug`. This can be changed with `-DBINARY_RELEASE=ON`. Independently of this, the debug mode of the Diablo engine is always enabled by default. It can be disabled with `-DDEBUG=OFF`. Finally, in debug builds the address sanitizer is enabled by default. This can be disabled with `-DASAN=OFF`.\r\nYou can also generate 32bit builds on 64bit platforms by setting `-DCMAKE_TOOLCHAIN_FILE=../CMake/32bit.cmake` (remember to use the `linux32` command if on Linux).\r\nNetwork support can be disabled using `-DNONET=ON`, this also removes the need for the ASIO and Sodium dependencies.\r\nYou can compile the shareware version with `-DSPAWN=ON` this will allow you to try the game using spawn.mpq from the original shareware which can still be [downloaded](http://ftp.blizzard.com/pub/demos/diablosw.exe) for free.\r\n\r\n### mingw32\r\nUse `-DCROSS_PREFIX=/path/to/prefix` if the `i686-w64-mingw32` directory is not in `/usr`.\r\n### Use SDL v1 instead of SDL v2.\r\nPass `-DUSE_SDL1=ON` to build with SDL v1 instead of v2.\r\nNote that some features are not yet supported in SDL v1, notably upscaling, and fullscreen.\r\n\r\n# Multiplayer\r\n - TCP/IP only requires the host to expose port 6112\r\n - UDP/IP requires that all players expose port 6112\r\n\r\nAll games are encrypted and password protected.\r\n\r\n# Controller support\r\n\r\nDevilutionX supports gamepad controls.\r\n\r\nDefault controller mappings (A/B/X/Y as in Nintendo layout, so the rightmost button is attack):\r\n\r\n- Left analog / DPad: move hero\r\n- Right analog: simulate mouse\r\n- A: attack nearby enemies, talk to towns people and merchants, pickup & place items in the inventory, OK while in main menu\r\n- B: Select spell, cancel while in main menu\r\n- X: pickup gold, potions & equipment from ground, open chests and doors that are nearby, use item when in inventory (useful to read books etc.)\r\n- Y: cast spell, go to previous screen when talking to people and in shops, delete character while in main menu\r\n- R1: inventory\r\n- L1: character sheet\r\n- R2: use mana potion from belt\r\n- L2: use health item from belt\r\n- Left analog click: toggle automap\r\n- Right analog click: left mouse click\r\n- Select: quest log\r\n- Start: game Menu, skip intro\r\n\r\nFor now, they can be re-mapped by changing `SourceX/controls` or by setting the `SDL_GAMECONTROLLERCONFIG` environment\r\nvariable (see\r\n[SDL_GameControllerDB](https://github.com/gabomdq/SDL_GameControllerDB)).\r\n\r\n# Contributing\r\n[Guidelines](docs/CONTRIBUTING.md)\r\n\r\n# Modding\r\nBelow are a few examples of some simple improvements made to the game. It is planned in the future to create tools for designing dungeons and graphics.\r\n\r\n![Screenshot 1: Monster lifebar+items](https://github.com/diasurgical/scalpel/blob/master/screens/mod1.png)\r\n\r\n![Screenshot 2: New trade screen](https://github.com/diasurgical/scalpel/blob/master/screens/mod2.png)\r\n\r\n# F.A.Q.\r\n<details><summary>Click to reveal</summary>\r\n\r\n> Wow, does this mean I can download and play Diablo for free now?\r\n\r\nNo, you\'ll need access to the data from the original game. If you don\'t have an original CD then you can [buy Diablo from GoG.com](https://www.gog.com/game/diablo). Alternatively you can also use `spawn.mpq` from the [http://ftp.blizzard.com/pub/demos/diablosw.exe](shareware) version and compile the with the SPAWN flag defined.\r\n> Cool, so I fired your mod up, but there\'s no 1080p or new features?\r\n\r\nWe\'re working on it.\r\n> What about Hellfire?\r\n\r\nHellfire was a bit of a flop on the developer\'s part. Support may come in the future once the base game is finished.\r\n</details>\r\n\r\n# Credits\r\n- Reverse engineered by GalaXyHaXz in 2018\r\n- [sanctuary](https://github.com/sanctuary) - extensively documenting Diablo\'s game engine\r\n- [BWAPI Team](https://github.com/bwapi) - providing library API to work with Storm\r\n- [Ladislav Zezula](https://github.com/ladislav-zezula) - reversing PKWARE library, further documenting Storm\r\n- [fearedbliss](https://github.com/fearedbliss) - being awe-inspiring\r\n- Climax Studios & Sony - secretly helping with their undercover QA :P\r\n- Blizzard North - wait, this was a typo!\r\n- Depression - reason to waste four months of my life doing this ;)\r\n\r\nAnd a special thanks to all the support and people who work on Devilution to make it possible! <3\r\n\r\n# Changelog\r\n[From the beginning until release](docs/CHANGELOG.md)\r\n\r\n# Legal\r\nDevilution is released to the Public Domain. The documentation and function provided by Devilution may only be utilized with assets provided by ownership of Diablo.\r\n\r\nBattle.net(R) - Copyright (C) 1996 Blizzard Entertainment, Inc. All rights reserved. Battle.net and Blizzard Entertainment are trademarks or registered trademarks of Blizzard Entertainment, Inc. in the U.S. and/or other countries.\r\n\r\nDiablo(R) - Copyright (C) 1996 Blizzard Entertainment, Inc. All rights reserved. Diablo and Blizzard Entertainment are trademarks or registered trademarks of Blizzard Entertainment, Inc. in the U.S. and/or other countries.\r\n\r\nDevilution and any of its\' maintainers are in no way associated with or endorsed by Blizzard Entertainment(R).\r\n'