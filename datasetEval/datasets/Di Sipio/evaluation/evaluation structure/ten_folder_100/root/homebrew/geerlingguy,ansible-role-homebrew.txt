b'# Ansible Role: Homebrew\n\n[![MIT licensed][badge-license]][link-license]\n[![Galaxy Role][badge-role]][link-galaxy]\n[![Downloads][badge-downloads]][link-galaxy]\n[![Build Status][badge-travis]][link-travis]\n\nInstalls [Homebrew][homebrew] on MacOS, and configures packages, taps, and cask apps according to supplied variables.\n\n## Requirements\n\nNone.\n\n## Role Variables\n\nAvailable variables are listed below, along with default values (see [`defaults/main.yml`](defaults/main.yml)):\n\n    homebrew_repo: https://github.com/Homebrew/brew\n\nThe GitHub repository for Homebrew core.\n\n    homebrew_prefix: /usr/local\n    homebrew_install_path: "{{ homebrew_prefix }}/Homebrew"\n\nThe path where Homebrew will be installed (`homebrew_prefix` is the parent directory). It is recommended you stick to the default, otherwise Homebrew might have some weird issues. If you change this variable, you should also manually create a symlink back to /usr/local so things work as Homebrew expects.\n\n    homebrew_brew_bin_path: /usr/local/bin\n\nThe path where `brew` will be installed.\n\n    homebrew_installed_packages:\n      - ssh-copy-id\n      - pv\n      - { name: vim, install_options: "with-luajit,override-system-vi" }\n\nPackages you would like to make sure are installed via `brew install`. You can optionally add flags to the install by setting an `install_options` property, and if used, you need to explicitly set the `name` for the package as well. By default, no packages are installed (`homebrew_installed_packages: []`).\n\n    homebrew_uninstalled_packages: []\n\nPackages you would like to make sure are _uninstalled_.\n\n    homebrew_upgrade_all_packages: no\n\nWhether to upgrade homebrew and all packages installed by homebrew. If you prefer to manually update packages via `brew` commands, leave this set to `no`.\n\n    homebrew_taps:\n      - homebrew/core\n      - { name: my_company/internal_tap, url: \'https://example.com/path/to/tap.git\' }\n\nTaps you would like to make sure Homebrew has tapped.\n\n    homebrew_cask_apps:\n      - firefox\n      - { name: virtualbox, install_options:"debug,appdir=/Applications" }\n\nApps you would like to have installed via `cask`. [Search][caskroom] for popular apps to see if they\'re available for install via Cask. Cask will not be used if it is not included in the list of taps in the `homebrew_taps` variable. You can optionally add flags to the install by setting an `install_options` property, and if used, you need to explicitly set the `name` for the package as well. By default, no Cask apps will be installed (`homebrew_cask_apps: []`).\n\n    homebrew_cask_accept_external_apps: true\n\nDefault value is `false` and would result in interruption of further processing of the whole role (and ansible play) in case any app given in `homebrew_cask_apps` is already installed without `cask`. Good for a tightly managed system.\n\nSpecify as `true` instead if you prefer to silently continue if any App is already installed without `cask`. Generally good for a system that is managed with `cask` / `Ansible` as well as other install methods (like manually) at the same time.\n\n    homebrew_cask_uninstalled_apps:\n      - google-chrome\n\nApps you would like to make sure are _uninstalled_.\n\n    homebrew_cask_appdir: /Applications\n\nDirectory where applications installed via `cask` should be installed.\n\n    homebrew_use_brewfile: true\n\nWhether to install via a Brewfile. If so, you will need to install the `homebrew/bundle` tap, which could be done within `homebrew_taps`.\n\n    homebrew_brewfile_dir: \'~\'\n\nThe directory where your Brewfile is located.\n\n    homebrew_clear_cache: false\n\nSet to `true` to remove the Hombrew cache after any new software is installed.\n\n    homebrew_user: "{{ ansible_user_id }}"\n\nThe user that you would like to install Homebrew as.\n\n    homebrew_group: "{{ ansible_user_gid }}"\n\nThe group that you would like to use while installing Homebrew.\n\n    homebrew_folders_additional: []\n\nAny additional folders inside `homebrew_prefix` for which to ensure homebrew user/group ownership.\n\n## Dependencies\n\n  - [elliotweiser.osx-command-line-tools][dep-osx-clt-role]\n\n## Example Playbook\n\n    - hosts: localhost\n      vars:\n        homebrew_installed_packages:\n          - mysql\n      roles:\n        - geerlingguy.homebrew\n\nSee the `tests/local-testing` directory for an example of running this role over\nAnsible\'s `local` connection. See also:\n[Mac Development Ansible Playbook][mac-dev-playbook].\n\n## License\n\n[MIT][link-license]\n\n## Author Information\n\nThis role was created in 2014 by [Jeff Geerling][author-website], author of\n[Ansible for DevOps][ansible-for-devops].\n\n#### Maintainer(s)\n\n- [Jeff Geerling](https://github.com/geerlingguy)\n- [Elliot Weiser](https://github.com/elliotweiser)\n\n[ansible-for-devops]: https://www.ansiblefordevops.com/\n[author-website]: https://www.jeffgeerling.com/\n[badge-downloads]: https://img.shields.io/ansible/role/d/1858.svg\n[badge-license]: https://img.shields.io/github/license/geerlingguy/ansible-role-homebrew.svg\n[badge-role]: https://img.shields.io/ansible/role/1858.svg\n[badge-travis]: https://travis-ci.org/geerlingguy/ansible-role-homebrew.svg?branch=master\n[caskroom]: https://caskroom.github.io/search\n[homebrew]: http://brew.sh/\n[dep-osx-clt-role]: https://galaxy.ansible.com/elliotweiser/osx-command-line-tools/\n[link-galaxy]: https://galaxy.ansible.com/geerlingguy/homebrew/\n[link-license]: https://raw.githubusercontent.com/geerlingguy/ansible-role-homebrew/master/LICENSE\n[link-travis]: https://travis-ci.org/geerlingguy/ansible-role-homebrew\n[mac-dev-playbook]: https://github.com/geerlingguy/mac-dev-playbook\n'