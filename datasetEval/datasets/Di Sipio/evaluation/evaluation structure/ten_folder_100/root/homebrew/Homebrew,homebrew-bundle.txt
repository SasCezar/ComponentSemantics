b'# Homebrew Bundle\n\nBundler for non-Ruby dependencies from Homebrew.\n\n## Requirements\n\n[Homebrew](https://github.com/Homebrew/brew) (on macOS or [Linux](https://docs.brew.sh/Homebrew-on-Linux)) for installing the dependencies.\n\n[Homebrew Cask](https://github.com/Homebrew/homebrew-cask) is optional and used for installing Mac applications.\n\n[mas-cli](https://github.com/argon/mas) is optional and used for installing Mac App Store applications.\n\n## Installation\n\n`brew bundle` is automatically installed when run.\n\n## Usage\n\nCreate a `Brewfile` in the root of your project with:\n\n```bash\ntouch Brewfile\n```\n\nAdd your dependencies in your `Brewfile`:\n\n```ruby\ntap "homebrew/cask"\ntap "user/tap-repo", "https://user@bitbucket.org/user/homebrew-tap-repo.git"\ncask_args appdir: "/Applications"\n\nbrew "imagemagick"\nbrew "denji/nginx/nginx-full", args: ["with-rmtp-module"]\nbrew "mysql@5.6", restart_service: true, link: true, conflicts_with: ["mysql"]\n\ncask "firefox", args: { appdir: "~/my-apps/Applications" }\ncask "google-chrome"\ncask "java" unless system "/usr/libexec/java_home --failfast"\ncask "homebrew/cask-fonts/font-charter"\n\nmas "1Password", id: 443987910\n```\n\n`cask` and `mas` entries are automatically skipped on Linux.\nOther entries can be run only on (or not on) Linux with `if OS.mac?` or `if OS.linux?`.\n\n### Install\n\nYou can then easily install all of the dependencies with:\n\n```bash\nbrew bundle\n```\n\nIf a dependency is already installed and there is an upgrade available it will be upgraded.\n\n`brew bundle` will look for `Brewfile` in the current directory. Use `--file` to specify a path to a different `Brewfile`.\n\nYou can skip the installation of dependencies by adding space-separated values to one or more of the following environment variables:\n\n- `HOMEBREW_BUNDLE_BREW_SKIP`\n- `HOMEBREW_BUNDLE_CASK_SKIP`\n- `HOMEBREW_BUNDLE_MAS_SKIP`\n- `HOMEBREW_BUNDLE_TAP_SKIP`\n\n`brew bundle` will output a `Brewfile.lock.json` in the same directory as the `Brewfile` if all dependencies are installed successfully. This contains dependency and system status information which can be useful in debugging `brew bundle` failures and replicating a "last known good build" state.\n\nYou can opt-out of this behaviour by setting the `HOMEBREW_BUNDLE_NO_LOCK` environment variable or passing the `--no-lock option`.\n\nYou may wish to check this file into the same version control system as your `Brewfile` (or ensure your version control system ignores it if you\'d prefer to rely on debugging information from a local machine).\n\n### Dump\n\nYou can create a `Brewfile` from all the existing Homebrew packages you have installed with:\n\n```bash\nbrew bundle dump\n```\n\nThe `--force` option will allow an existing `Brewfile` to be overwritten as well.\nThe `--describe` option will output a description comment above each line.\nThe `--no-restart` option will prevent `restart_service` from being added to ``brew`` lines with running services.\n\n### Cleanup\n\nYou can also use `Brewfile` to list the only packages that should be installed, removing any package not present or dependent. This workflow is useful for maintainers or testers who regularly install lots of formulae. To uninstall all Homebrew formulae not listed in `Brewfile`:\n\n```bash\nbrew bundle cleanup\n```\n\nUnless the `--force` option is passed, formulae that would be uninstalled will be listed rather than actually be uninstalled.\n\n### Check\n\nYou can check there\'s anything to install/upgrade in the `Brewfile` by running:\n\n```bash\nbrew bundle check\n```\n\nThis provides a successful exit code if everything is up-to-date so is useful for scripting.\n\nFor a list of dependencies that are missing, pass `--verbose`. This will also check _all_ dependencies by not exiting on the first missing dependency category.\n\n### List\n\nOutputs a list of all of the entries in the Brewfile.\n\n```bash\nbrew bundle list\n```\n\nPass one of `--casks`, `--taps`, `--mas`, or `--brews` to limit output to that type. Defaults to `--brews`. Pass `--all` to see everything.\n\nNote that the _type_ of the package is **not** included in this output.\n\n### Exec\n\nRuns an external command within Homebrew\'s superenv build environment:\n\n```bash\nbrew bundle exec -- bundle install\n```\n\nThis sanitized build environment ignores unrequested dependencies, which makes sure that things you didn\'t specify in your `Brewfile` won\'t get picked up by commands like `bundle install`, `npm install`, etc. It will also add compiler flags which will help find keg-only dependencies like `openssl`, `icu4c`, etc.\n\n### Restarting services\n\nYou can choose whether `brew bundle` restarts a service every time it\'s run, or\nonly when the formula is installed or upgraded in your `Brewfile`:\n\n```ruby\n# Always restart myservice\nbrew \'myservice\', restart_service: true\n\n# Only restart when installing or upgrading myservice\nbrew \'myservice\', restart_service: :changed\n```\n\n## Note\n\nHomebrew does not support installing specific versions of a library, only the most recent one, so there is no good mechanism for storing installed versions in a `.lock` file.\n\nIf your software needs specific versions then perhaps you\'ll want to look at using [Vagrant](https://vagrantup.com/) to better match your development and production environments.\n\n## Tests\n\nTests can be run with `bundle install && bundle exec rspec`\n\n## Copyright\n\nCopyright (c) Homebrew maintainers and Andrew Nesbitt. See [LICENSE](https://github.com/Homebrew/homebrew-bundle/blob/master/LICENSE) for details.\n'