b'kerl [![TravisCI build status](https://travis-ci.org/kerl/kerl.svg?branch=master)](https://travis-ci.org/kerl/kerl) [![CircleCI](https://circleci.com/gh/kerl/kerl.svg?style=svg)](https://circleci.com/gh/kerl/kerl)\n====\n\nEasy building and installing of [Erlang/OTP](https://www.erlang.org) instances.\n\nKerl aims to be shell agnostic and its only dependencies, excluding what\'s\nrequired to actually build Erlang/OTP, are `curl` and `git`.\n\nAll is done so that, once a specific release has been built, creating a new\ninstallation is as fast as possible.\n\nOTP Support Policy\n------------------\nAs of 2017 November 8, we are supporting OTP builds back to R15. Older builds\nmay or may not work. We will advance release support as new releases of OTP\nbecome available.  For example, when OTP 21 is released, we will support Erlang\nbuilds R16 and newer.\n\nTriage cadence\n--------------\nWe triage kerl pull requests and issues at least once a month, typically on\nthe fourth Tuesday of the month at 1 pm US/Pacific or 8 pm UTC.\n\nIRC channel\n-----------\nWe have a channel on [freenode](http://webchat.freenode.net) called `#kerl` -\nfeel free to join and ask support or implementation questions any time. If\nno one is around, feel free to open an issue with your question or problem\ninstead.\n\nDownloading\n-----------\n\nIf you are on MacOS, and using [homebrew](https://github.com/Homebrew/brew), you can install kerl, along with shell completion, by running:\n\n    $ brew install kerl\n\nAlternatively, you can download the script directly from github:\n\n    $ curl -O https://raw.githubusercontent.com/kerl/kerl/master/kerl\n\nThen ensure it is executable\n\n    $ chmod a+x kerl\n\nand drop it in your $PATH\n\nOptionally download and install kerl\'s bash_completion file from https://github.com/kerl/kerl/raw/master/bash_completion/kerl\n\nOptionally download and install kerl\'s zsh-completion file from https://github.com/kerl/kerl/raw/master/zsh_completion/_kerl\n\n\nHow it works\n------------\n\nKerl keeps tracks of the releases it downloads, builds and installs, allowing\neasy installations to new destinations (without complete rebuilding) and easy\nswitches between Erlang/OTP installations.\n\nBy default, kerl downloads source tarballs from the [official Erlang website](https://www.erlang.org), but\nyou can tell kerl to download tarballs of Erlang source code from the tags\npushed to the [official source code](https://github.com/erlang/otp) by setting `KERL_BUILD_BACKEND=git`\n\nYou can also install directly from a raw git repository by using the `kerl build git <git_url> <git_version> <build_name>` syntax.\n\n\nUsage\n-----\n\nList the available releases (kerl ignores releases < 10):\n\n    $ kerl list releases\n    R10B-0 R10B-10 R10B-1a R10B-2 R10B-3 R10B-4 R10B-5 R10B-6 R10B-7 R10B-8 R10B-9 R11B-0 R11B-1 R11B-2 R11B-3 R11B-4 R11B-5 R12B-0 R12B-1 R12B-2 R12B-3 R12B-4 R12B-5 R13A R13B01 R13B02-1 R13B02 R13B03 R13B04 R13B R14A R14B01 R14B02 R14B03 R14B04 R14B R14B_erts-5.8.1.1 R15B01 R15B02 R15B02_with_MSVCR100_installer_fix R15B03-1 R15B03 R15B R16A_RELEASE_CANDIDATE R16B01 R16B02 R16B03-1 R16B03 R16B 17.0-rc1 17.0-rc2 17.0 17.1 17.3 17.4 17.5 18.0 18.1 18.2 18.2.1 18.3 19.0 19.1 19.2\n    Run \'/usr/local/bin/kerl update releases\' to update this list from erlang.org\n\nPick your choice and build it:\n\n    $ kerl build 19.2 19.2\n    Verifying archive checksum...\n    Checksum verified (7cdd18a826dd7bda0ca46d1c3b2efca6)\n    Extracting source code\n    Building Erlang/OTP 19.2 (19.2), please wait...\n    Erlang/OTP 19.2 (19.2) has been successfully built\n\nNote that named builds allow you to have different builds for the same Erlang/OTP release with different configure options:\n\n    $ KERL_BUILD_DOCS=yes kerl build 19.2 19.2-builtdocs\n    Verifying archive checksum...\n    Checksum verified (7cdd18a826dd7bda0ca46d1c3b2efca6)\n    Extracting source code\n    Building Erlang/OTP 19.2 (19.2-builtdocs), please wait...\n    Building docs...\n    Erlang/OTP 19.2 (19.2-builtdocs) has been successfully built\n\n(Note that kerl uses the otp_build script internally, and `./otp_build configure` disables HiPE on linux)\n\nYou can verify your build has been registered:\n\n    $ kerl list builds\n    19.2,19.2\n    19.2,19.2-builtdocs\n\nNow install a build to some location:\n\n    $ kerl install 19.2 ~/kerl/19.2\n    Installing Erlang/OTP 19.2 (19.2) in /Users/sanmiguel/kerl/19.2...\n    You can activate this installation running the following command:\n    . /Users/sanmiguel/kerl/19.2/activate\n    Later on, you can leave the installation typing:\n    kerl_deactivate\n\nHere again you can check the installation\'s been registered:\n\n    $ kerl list installations\n    19.2 /Users/sanmiguel/kerl/19.2\n\nAnd at last activate it:\n\n    $ . /path/to/install/dir/activate\n\nActivation will backup your $PATH, prepend it with the installation\'s bin/\ndirectory. Thus it\'s only valid for the current shell session, and until you\nactivate another installation or call `kerl_deactivate`.\n\nYou\'re now ready to work with your 19.2 installation:\n\n    $ erl -version\n    Erlang (SMP,ASYNC_THREADS,HIPE) (BEAM) emulator version 8.2\n\nWhen you\'re done just call the shell function:\n\n    $ kerl_deactivate\n\nAnytime you can check which installation, if any, is currently active with:\n\n    $ kerl active\n    The current active installation is:\n    /Users/sanmiguel/kerl/19.2\n\nYou can get an overview of the current kerl state with:\n\n    $ kerl status\n    Available builds:\n    19.2,19.2\n    ----------\n    Available installations:\n    19.2 /Users/sanmiguel/kerl/19.2\n    ----------\n    The current active installation is:\n    /Users/sanmiguel/kerl/19.2\n    There\'s no Dialyzer PLT for the active installation\n\nYou can delete builds and installations with the following commands:\n\n    $ kerl delete build 19.2\n    The 19.2 build has been deleted\n    $ kerl delete installation /path/to/install/dir\n    The installation in /path/to/install/dir has been deleted\n\nYou can easily deploy an installation to another host having `ssh` and `rsync` access with the following command:\n\n    $ kerl deploy anotherhost /path/to/install/dir\n    Cloning Erlang/OTP 19.2 (/path/to/install/dir) to anotherhost (/path/to/install/dir) ...\n    On anotherhost, you can activate this installation running the following command:\n    . /path/to/install/dir/activate\n    Later on, you can leave the installation typing:\n    kerl_deactivate\n\n\nBuilding from a github fork\n---------------------------\n\nIt is possible to build Erlang from a github fork, by using the `KERL_BUILD_BACKEND=git` and setting `OTP_GITHUB_URL` to the URL of the fork. For example, to build Basho\'s OTP fork:\n\n    $ export KERL_BUILD_BACKEND=git\n    $ export OTP_GITHUB_URL="https://github.com/basho/otp"\n    $ kerl update releases\n    The available releases are:\n    R13B03 R13B04 R14A R14B R14B01 R14B02 R14B03 R14B04 R15A R15B R15B01 R15B01_basho1 R15B01p R15B02 R15B03 R15B03-1 R16A_RELEASE_CANDIDATE R16B R16B01 R16B01_RC1 R16B02 R16B02_basho R16B02_basho10 R16B02_basho10rc1 R16B02_basho10rc2 R16B02_basho10rc3 R16B02_basho2 R16B02_basho3 R16B02_basho4 R16B02_basho5 R16B02_basho6 R16B02_basho7 R16B02_basho8 R16B02_basho9 R16B02_basho9rc1 R16B03 R16B03-1 R16B03_yielding_binary_to_term 17.0 17.0-rc1 17.0-rc2 17.0.1 17.0.2 17.1 17.1.1 17.1.2 17.2 17.2.1 17.2.2 17.3 17.3.1 17.3.2 17.3.3 17.3.4 17.4 17.4.1 17.5 17.5.1 17.5.2 17.5.3 17.5.4 17.5.5 17.5.6 17.5.6.1 17.5.6.2 17.5.6.3 17.5.6.4 17.5.6.5 17.5.6.6 17.5.6.7 17.5.6.8 17.5.6.9 18.0 18.0-rc1 18.0-rc2 18.0.1 18.0.2 18.0.3 18.1 18.1.1 18.1.2 18.1.3 18.1.4 18.1.5 18.2 18.2.1 18.2.2 18.2.3 18.2.4 18.2.4.1 18.3 18.3.1 18.3.2 18.3.3 18.3.4 18.3.4.1 19.0 19.0-rc1 19.0-rc2 19.0.2\n\n\nFrom here (provided the `KERL_BUILD_BACKEND` and `OTP_GITHUB_URL` variables remain in place), it is possible to use kerl as normal:\n\n    $ kerl build R16B02_basho10 16b02-basho10\n\n\nBuilding from a git source\n--------------------------\n\nYou can build Erlang directly from a git repository with a command of the form\n`kerl build git <git_url> <git_version> <build_name>` where `<git_version>` can\nbe either a branch, a tag or a commit id that will be passed to `git checkout`:\n\n    $ kerl build git https://github.com/erlang/otp.git dev 19.2_dev\n    Checking Erlang/OTP git repository from https://github.com/erlang/otp.git...\n    Building Erlang/OTP 19.2_dev from git, please wait...\n    Erlang/OTP 19.2_dev from git has been successfully built\n\n\nTuning\n------\n\nYou can tune kerl using the .kerlrc file in your $HOME directory.\n\n## Locations on disk\n\n### KERL_BASE_DIR\n\nDefault: `"$HOME"/.kerl`\nDirectory in which kerl will cache artefacts for building and installing.\n\n\n### KERL_CONFIG\n\nDefault: `"$HOME"/.kerlrc`\nFile from which to source kerl configuration\n\n\n### KERL_DOWNLOAD_DIR\n\nDefault: `${KERL_BASE_DIR}/archives`\nDirectory in which to place downloaded artefacts\n\n\n### KERL_BUILD_DIR\n\nDefault: `${KERL_BASE_DIR}/builds\nDirectory in which kerl will perform builds\n\n\n### KERL_GIT_DIR\n\nDefault: `${KERL_BASE_DIR}/gits`\nDirectory in which kerl will clone git repositories for building.\n\n\n## Build configuration\n\n### KERL_CONFIGURE_OPTIONS\n\nSpace-separated options to pass to `configure` when building OTP.\n\n\n### KERL_CONFIGURE_APPLICATIONS\n\nSpace-separated list of OTP applications which should exclusively be built.\n\n\n### KERL_CONFIGURE_DISABLE_APPLICATIONS\n\nSpace-separated list of OTP applications to disable during building.\n\n\n### KERL_BUILD_PLT\n\nCreate a PLT file alongside the built release.\n\n\n### KERL_USE_AUTOCONF\n\nUse `autoconf` during build process.\nNB: Automatically enabled when using `KERL_BUILD_BACKEND=git`\n\n\n### KERL_BUILD_BACKEND\n\nDefault value: `tarball`\nAcceptable values: `tarball`, `git`\n\n- `tarball`: Fetch erlang releases from erlang.org\n- `git`: Fetch erlang releases from [`$OTP_GITHUB_URL`](#otp_github_url)\n\nNB: Docs are only fetched when this is set to `tarball`. To enable creation of docs when set to `git`, one must also set [`$KERL_BUILD_DOCS`](#kerl_build_docs).\n\nNB: This setting has no effect when using `kerl build git...`, which invokes kerl to directly clone a git repository and build from there.\n\n\n### OTP_GITHUB_URL\n\nDefault value: `https://github.com/erlang/otp`\nAcceptable value: any github fork of OTP, e.g. `https://github.com/basho/otp`\n\n\n### KERL_BUILD_DOCS\n\nIf `$KERL_BUILD_DOCS` is set, kerl will create docs from the built erlang version regardless of origin (`tarball` backend from erlang.org or via `kerl build git`, or via `git` backend).\n\nIf `$KERL_BUILD_DOCS` is unset, kerl will only install docs when NOT installing a build created via `kerl build git...`, and according to `KERL_INSTALL_HTMLDOCS` and `KERL_INSTALL_MANPAGES`.\n\n### KERL_INSTALL_MANPAGES\n\nInstall man pages when not building from git source.\n\nIt\'s noteworthy that when not using `KERL_BUILD_DOCS=yes`, the docset that may be downloaded can be up to 120MB.\n\n\n### KERL_INSTALL_HTMLDOCS\n\nInstall HTML documentation when not building from git source.\n\nIt\'s noteworthy that when not using `KERL_BUILD_DOCS=yes`, the docset that may be downloaded can be up to 120MB.\n\n\n### KERL_SASL_STARTUP\n\nBuild OTP to use SASL startup instead of minimal (default, when var is unset).\n\n\n## Installation configuration\n\n\n## Activation configuration\n\nThe following apply when activating an installation (i.e. `. ${KERL_DEFAULT_INSTALL_DIR}/19.2/activate`).\n\n### KERL_ENABLE_PROMPT\n\nWhen set, automatically prefix the shell prompt with a section containing the erlang version (see [`$KERL_PROMPT_FORMAT`](#kerl_prompt_format) ).\n\n\n### KERL_PROMPT_FORMAT\n\nDefault: `(%BUILDNAME%)`\nAvailable variables:\n - `%BUILDNAME%`: Name of the kerl build (e.g. `my_test_build_18.0`)\n - `%RELEASE%`: Name of the erlang release (e.g. `19.2` or `R16B02`)\n\nThe format of the prompt section to add.\n\n\n### KERL_DEFAULT_INSTALL_DIR\n\nEffective when calling `kerl install <build>` with no installation location argument.\n\nIf unset, `$PWD` is used.\n\nIf set, install the build under `$KERL_DEFAULT_INSTALL_DIR/${buildname}`.\n\n\n### KERL_DEPLOY_SSH_OPTIONS\n### KERL_DEPLOY_RSYNC_OPTIONS\n\nOptions passed to `ssh` and `rsync` during `kerl deploy` tasks.\n\nNote on .kerlrc\n---------------\n\nSince .kerlrc is a dot file for `/bin/sh`, running shell commands inside the\n.kerlrc will affect the shell and environment variables for the commands being\nexecuted later. For example, the shell `export` commands in .kerlrc will affect\n*your login shell environment* when activating `curl`.  Use with care.\n\nFish shell support\n------------------\n\nkerl has basic support for the fish shell.\n\nTo activate an installation:\n\n    source /path/to/install/dir/activate.fish\n\nDeactivation is the same as in other shells:\n\n    kerl_deactivate\n\nPlease note: if you\'ve installed a build with an older version of kerl\n(1.2.0 older) it won\'t have the `activate.fish` script.\n\nC shell support\n---------------\n\nkerl has basic support for the C shells (csh/tcsh/etc.).\n\nTo activate an installation:\n\n    source /path/to/install/dir/activate.csh\n\nThe activation script sources file .kerlrc.csh instead of .kerlrc.\n\nDeactivation is the same as in other shells:\n\n    kerl_deactivate\n\nPlease note: if you\'ve installed a build with an older version of kerl\nit won\'t have the `activate.csh` script.\n\nGlossary\n--------\n\nHere are the abstractions kerl is handling:\n\n- **releases**: Erlang/OTP releases from [erlang.org](https://erlang.org)\n\n- **builds**: the result of configuring and compiling releases or git repositories\n\n- **installations**: the result of deploying builds to filesystem locations (also referred to as "sandboxes")\n\nCommands reference\n------------------\n\n### build\n\n    kerl build <release_code> <build_name>\n    kerl build git <git_url> <git_version> <build_name>\n\nCreates a named build either from an official Erlang/OTP release or from a git repository.\n\n    $ kerl build 19.2 19.2\n    $ kerl build git https://github.com/erlang/otp dev 19.2_dev\n\n#### Tuning\n\n##### Configure options\n\nYou can specify the configure options to use when building Erlang/OTP with the\n`KERL_CONFIGURE_OPTIONS` variable, either in your $HOME/.kerlrc file or\nprepending it to the command line.  Full list of all options can be in\n[Erlang documentation](https://erlang.org/doc/installation_guide/INSTALL.html#Advanced-configuration-and-build-of-ErlangOTP_Configuring).\n\n    $ KERL_CONFIGURE_OPTIONS=--enable-hipe kerl build 19.2 19.2-hipe\n\n##### Configure applications\n\nIf non-empty, you can specify the subset of applications to use when building\n(and subsequent installing) Erlang/OTP with the `KERL_CONFIGURE_APPLICATIONS`\nvariable, either in your $HOME/.kerlrc file or prepending it to the command\nline.\n\n    $ KERL_CONFIGURE_APPLICATIONS="kernel stdlib sasl" kerl build R15B01 r15b01_minimal\n\n##### Configure disable applications\n\nIf non-empty, you can specify the subset of applications to disable when\nbuilding (and subsequent installing) Erlang/OTP with the\n`KERL_CONFIGURE_DISABLE_APPLICATIONS` variable, either in your $HOME/.kerlrc\nfile or prepending it to the command line.\n\n    $ KERL_CONFIGURE_DISABLE_APPLICATIONS="odbc" kerl build R16B02 r16b02_no_odbc\n\n##### Enable autoconf\n\nYou can enable the use of `autoconf` in the build process setting\n`KERL_USE_AUTOCONF=yes` in your $HOME/.kerlrc file\n\n**Note**: `autoconf` is always enabled for git builds\n\n##### Using shell export command in .kerlrc\n\nConfigure variables which includes spaces such as those in `CFLAGS` cannot be\npassed on with `KERL_CONFIGURE_OPTIONS`. In such a case you can use shell\n`export` command to define the environment variables for `./configure`. Note\nwell: this method has a side effect to change your shell execution environment\nafter activating a kerl installation of Erlang/OTP. Here is an example of\n.kerlrc for building Erlang/OTP for FreeBSD with clang compiler:\n\n    # for clang\n    export CC=clang CXX=clang CFLAGS="-g -O3 -fstack-protector" LDFLAGS="-fstack-protector"\n    # compilation options\n    KERL_CONFIGURE_OPTIONS="--disable-native-libs --enable-vm-probes --with-dynamic-trace=dtrace --with-ssl=/usr/local --with-javac --enable-hipe --enable-kernel-poll --with-wx-config=/usr/local/bin/wxgtk2u-2.8-config --without-odbc --enable-threads --enable-sctp --enable-smp-support"\n\n\nIn case you cannot access the default directory for temporary files (`/tmp`) or simply want them somewhere else, you can also provide your own directory with the variable `TMP_DIR`\n\n    export TMP_DIR=/your/custom/temporary/dir\n\n#### Building documentation\n\nPrior to kerl 1.0, kerl always downloaded prepared documentation from erlang.org. Now if `KERL_BUILD_DOCS=yes` is set, kerl will build the man pages and HTML\ndocumentation from the source repository in which is working.\n\n**Note**: This variable takes precedent over the other documentation parameters. \n\n### install\n\n    kerl install <build_name> [path]\n\nInstalls a named build to the specified filesystem location.\n\n    $ kerl install 19.2 /srv/otp/19.2\n\nIf path is omitted the current working directory will be used. However, if\n`KERL_DEFAULT_INSTALL_DIR` is defined in ~/.kerlrc,\n`KERL_DEFAULT_INSTALL_DIR/<build-name>` will be used instead.\n\n#### Install location restrictions\n\n**WARNING**: kerl assumes the given installation directory is for its sole use.\nIf you later delete it with the `kerl delete` command, the whole directory will\nbe deleted, along with anything you may have added to it!\n\nSo please only install kerl in an empty (or non-existant) directory.  \n\nIf you attempt to install kerl in `$HOME` or `.erlang` or `$KERL_BASE_DIR`,\nthen kerl will give you an error and refuse to proceed. If you try to install\nkerl in a directory that exists and is not empty, kerl will give you an error.\n\n#### Tuning\n\n##### SASL startup\n\nYou can have SASL started automatically setting `KERL_SASL_STARTUP=yes` in your\n$HOME/.kerlrc file or prepending it to the command line.\n\n##### Manpages installation\n\nYou can have manpages installed automatically setting\n`KERL_INSTALL_MANPAGES=yes` in your $HOME/.kerlrc file or prepending it to the\ncommand line.\n\n**Note**: for git-based builds, you want to set `KERL_BUILD_DOCS=yes`\n\n##### HTML docs installation\n\nYou can have HTML docs installed automatically setting\n`KERL_INSTALL_HTMLDOCS=yes` in your $HOME/.kerlrc file or prepending it to the\ncommand line.\n\n*Note*: for git-based builds, you want to set `KERL_BUILD_DOCS=yes`\n\n#### Documentation installation\n\nMan pages will be installed to `[path]/man` and HTML docs will be installed in\n`[path]/html`.  The kerl `activate` script manipulates the MANPATH of the current\nshell such that `man 3 gen_server` or `erl -man gen_server` should work perfectly.\n\n(Do not fret - `kerl_deactivate` restores your shell\'s MANPATH to whatever its \noriginal value was.)\n\n### deploy\n\n    kerl deploy <[user@]host> [directory] [remote_directory]\n\nDeploys the specified installation to the given host and location.\n\n    $ kerl deploy anotherhost /path/to/install/dir\n\nIf remote_directory is omitted the specified directory will be used.\n\nIf directory and remote_directory is omitted the current working directory will be used.\n\n*NOTE*: kerl assumes the specified host is accessible via `ssh` and `rsync`.\n\n#### Tuning\n\n##### Additional SSH options\n\nYou can have additional options given to `ssh` by setting them in the\n`KERL_DEPLOY_SSH_OPTIONS` variable in your $HOME/.kerlrc file or on the command\nline, e.g. `KERL_DEPLOY_SSH_OPTIONS=\'-qx -o PasswordAuthentication=no\'`.\n\n##### Additional RSYNC options\n\nYou can have additional options given to `rsync` by setting them in the\n`KERL_DEPLOY_RSYNC_OPTIONS` variable in your $HOME/.kerlrc file or on the\ncommand line, e.g. `KERL_DEPLOY_RSYNC_OPTIONS=\'--delete\'`.\n\n### update\n\n    kerl update releases\n\nIf `KERL_BUILD_BACKEND=tarball` this command fetches the up-to-date list of OTP\nreleases from erlang.org.\n\nIf it is set to `KERL_BUILD_BACKEND=git` this command fetches an up-to-date\nlist of OTP tags from the official OTP github repository.\n\n### list\n\n    kerl list <releases|builds|installations>\n\nLists the releases, builds or installations available.\n\n### delete\n\n    kerl delete build <build_name>\n    kerl delete installation <path>\n\nDeletes the specified build or installation.\n\n```\n$ kerl delete build 19.2\nThe 19.2 build has been deleted\n```\n\n```\n$ kerl delete installation /srv/otp/19.2\nThe installation in /srv/otp/19.2 has been deleted\n```\n\n### active\n\n    kerl active\n\nPrints the path of the currently active installation, if any.\n\n    $ kerl active\n    The current active installation is:\n    /srv/otp/19.2\n\n### status\n\n    kerl status\n\nPrints the available builds and installations as well as the currently active installation.\n\n    $ kerl status\n    Available builds:\n    19.2,19.2\n    git,19.2_dev\n    ----------\n    Available installations:\n    19.2 /srv/otp/19.2\n    19.2 /srv/otp/19.2_dev\n    ----------\n    No Erlang/OTP kerl installation is currently active\n\n### path\n\n    kerl path [installation]\n\nPrints the path of the currently active installation if one is active. When given an\ninstallation name, it will return the path to that installation location on disk.\nThis makes it useful for automation without having to run kerl\'s output through\nother tools to extract to path information.\n\n    $ kerl path\n    No active kerl-managed erlang installation\n\n    $ kerl path 19.2.3\n    /aux/erlangs/19.2.3\n\n### install-docsh\n\n    kerl install-docsh\n\n**Important note**: docsh only supports OTP versions 18 and later.\n\nInstall `erl` shell documentation access\nextension - [docsh](https://github.com/erszcz/docsh).\nThis extends the shell with new helpers, which enable access to full\nfunction help (via `h/{1,2,3}`), function specs (`s/{1,2,3}`) and type\ninformation (`t/{1,2,3}`).\n\nIf you already have an OTP installation, you will need to remove it and\nre-install it **before** you execute `install-docsh`,\nsince docsh needs some environment variables of its own to be set up\nand managed by the activate script.\n\nActivating a docsh-enabled Erlang installation will try to create\na `$HOME/.erlang` symlink.\nIf this file exists (i.e. you have created it manually),\nplease consider removing it - otherwise, docsh won\'t work.\nDeactivating the kerl Erlang installation will remove the symlink.\n\nAlternatively, if the file exists and you have to keep it you can extend\nit with the content of [a docsh-specific `.erlang`][docsh-dot-erlang] - this\ntask is left as an exercise for the reader - and export\n`KERL_DOCSH_DOT_ERLANG=exists` to silence unwanted warnings.\nThe [manual setup guide][docsh-manual-setup] will probably come in handy\nif you decide to take this route.\n\n[docsh-dot-erlang]: https://github.com/erszcz/docsh/blob/2d9843bce794e726f591bbca49c88aedbb435f8c/templates/dot.erlang\n[docsh-manual-setup]: https://github.com/erszcz/docsh/blob/ecf35821610977e36b04c0c256990a5b0dab4870/doc/manual-setup.md\n\nCompiling crypto on Macs\n------------------------\nApple stopped shipping OpenSSL in OS X 10.11 (El Capitan) in favor of Apple\'s\nown SSL library. That makes using homebrew the most convenient way to install\nopenssl on macOS 10.11 or later. Additionally, homebrew [stopped creating](https://github.com/Homebrew/brew/pull/612)\nsymlinks from the homebrew installation directory to `/usr/local`, so in\nresponse to this, *if* you\'re running El Capitan, Sierra, or High Sierra\n*and* you have homebrew installed, *and* you used it to install openssl,\nkerl will ask homebrew for the openssl installation prefix and configure Erlang\nto build with that location automatically.\n\n**Important**: If you already have `--with-ssl` in your .kerlrc, kerl\nwill honor that instead, and will not do any automatic configuration.\n\nCompiling crypto on Red Hat systems\n-----------------------------------\nRed Hat believes there\'s a [patent\nissue](https://bugzilla.redhat.com/show_bug.cgi?id=319901#c2) and has disabled\nelliptic curve crypto algorithms in its distributions for over 10 years.\n\nThis causes Erlang builds to die when its compiling its own crypto libraries.\n\nAs a workaround, you can set `CFLAGS="-DOPENSSL_NO_EC=1"` to tell the\nErlang crypto libraries to not build the elliptic curve cipher suite.\n\nThis issue applies to Fedora, Red Hat Enterprise Linux, CentOS and all\nderivatives of those distributions.\n\nThere is a [tracking issue](https://github.com/kerl/kerl/issues/212) to\nautomatically set this compiler flag, if you wish to follow how kerl\nwill eventually deal with this issue.\n\nChangelog\n---------\n16 September 2019 - 1.8.6\n\n  - Remove almost all special cases for older macOS releases\n\n25 September 2018 - 1.8.5\n\n  - Support Mojave builds (#301)\n  - Disable SC2207 for Bash completion (#296)\n\n3 August 2018 - 1.8.4\n\n  - Support docsh 0.6.1 (#290)\n  - Update docs about KERL_INSTALL_MANPAGES & HTML_DOCS (#292)\n  - Fix bash completion for Bash 3 (#295)\n\n3 July 2018 - 1.8.3\n\n  - Update testing to include OTP 21 (#286)\n  - Fix an issue affecting CD\\_PATH during builds (#284)\n\n5 March 2018 - 1.8.2\n\n  - Apply zlib patch when building OTP 17-19. (#258)\n  - Add CircleCI (#246)\n  - Fix empty package name warning (#245)\n\n13 November 2017 - 1.8.1\n\n  - Fix removing an installation by its name. (#244)\n\n8 November 2017 - 1.8.0\n\n  - Include support for installing and managing docsh (#213)\n  - Fix a function name typo (#241)\n\n23 October 2017 - 1.7.0\n\n  - Suggest the proper activation script based on the shell you\'re using (#225)\n  - Automatically turn on built-in shell history when using an OTP release >=\n    20 (#214)\n  - Warn when a Linux does not appear to have a pre-requisite library/package\n    to compile Erlang from source code. (#222)\n\n2 October 2017 - 1.6.0\n\n  - Support clang 9 and High Sierra command-line tools (CLT) on older Erlang\n    builds. (#234)\n  - Fix a pointer error in wx on macOS/clang 9 (#235)\n\n25 May 2017 - 1.5.1\n\n  - Bug Fix: Remove spurious spaces (#209)\n\n24 May 2017 - 1.5.0\n\n  - Published an OTP support policy, triage schedule, IRC channel\n  - Apply build patches for Perls >= 5.22 on older OTP releases (#198)\n  - Fix bad `read` usage (#200)\n  - Add a force flag for mv (#201)\n  - Use a more portable way to get perl minor release version (#204)\n  - Force 64 bit flag on macOS (#205)\n  - Fix documentation symlinks (#206)\n\n22 February 2017 - 1.4.2\n\n  - Fixed a syntax error when comparing hash outputs on reconfigurations (#191)\n  - Added the path subcommand; enabled Travis-CI (#190)\n  - Fixed mistakenly omitted version string from past 2 releases.\n\n12 February 2017 - 1.4.1\n\n  - Fix reading a checksum file for compile options (#180)\n  - Get a little smarter about figuring out what apps to use\n    when building a PLT file for dialyzer (#181)\n\n5 February 2017 - 1.4.0\n\n  - Fix environment variable handling and a typo (#179)\n  - Overhaul the README; document all environment variables (#178)\n  - Store build configuration in a file. Enables detecting if configuration has \n    changed from build to build and also allows outputing build time options\n    in `kerl status` (#177)\n  - Assert perl exists before attempting build (#176); fixes issue #170\n\n13 October 2016 - 1.3.4\n\n  - Use a more portable way to restore PATH (#165)\n  - Exit if curl fails. Download files if they are 0 length. (#166)\n\n07 October 2016 - 1.3.3\n\n  - Add support for (T)CSH (#155)\n  - If homebrew is installed, make kerl check for a homebrew OpenSSL library path (#161)\n  - If `--enable-native-libs` is active, make, clean and make again. (#163)\n\n20 July 2016 - 1.3.2\n\n  - Optionally enhance the activation prompt (#149)\n  - Do not permit installation into a location that\'s already installed (#150)\n  - Fix duplicate response from `kerl prompt` (fix #88) (#150)\n  - Do not run if $HOME is not set. (fix #22) (#151)\n\n16 July 2016 - 1.3.1\n\n  - Fix argument order in archive unpacking (#146)\n  - When building, show output of unmet dependencies or other build prerequisites (#148)\n\n1 July 2016 - 1.3.0\n\n  - basic fish shell support (#91)\n\n28 June 2016 - 1.2.0\n\n  - Make curl output more robust if using a .curlrc (#137)\n  - Apply patches to build older Erlangs (#138) \n  - Add a command to output a version string (#140)\n  - Do not assume success for metadata file writes (#142)\n  - Fix a grammar problem (#145)\n\n20 May 2016 - 1.1.1\n\n  - Remove valid directory check when doing a remote deployment.\n  - Various get_otp_version() regex cleanup/fixes\n\n14 May 2016 - 1.1.0\n\n  - Remove support for Mac OS X Lion. Stop setting CFLAGS for better compiler\n    optimizations. (#132)\n\n14 May 2016 - 1.0.1\n\n  - Be much more careful about installing into and removing directories. (#127)\n  - Make `OTP_GITHUB_URL` and `KERL_BUILD_BACKEND` controllable from .kerlrc (#130)\n\n2 May 2016 - 1.0\n\n  - Support builds from git tags (#122)\n  - Support documentation builds/installs from source code (#126)\n'