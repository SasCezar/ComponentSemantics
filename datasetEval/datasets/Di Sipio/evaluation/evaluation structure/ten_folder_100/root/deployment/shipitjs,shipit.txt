b'<h1 align="center">\n  <img src="https://raw.githubusercontent.com/shipitjs/shipit/master/resources/shipit-logo.png" alt="Shipit" title="Shipit" width="500">\n</h1>\n<p align="center" style="font-size: 1.2rem;">Universal automation and deployment tool \xe2\x9b\xb5\xef\xb8\x8f</p>\n\n[![Build Status][build-badge]][build]\n[![version][version-badge]][package]\n[![MIT License][license-badge]][license]\n\n[![PRs Welcome][prs-badge]][prs]\n\n[![Watch on GitHub][github-watch-badge]][github-watch]\n[![Star on GitHub][github-star-badge]][github-star]\n[![Tweet][twitter-badge]][twitter]\n\n## Install shipit command line tools and shipit-deploy in your project\n\n```\nnpm install --save-dev shipit-cli\nnpm install --save-dev shipit-deploy\n```\n\nShipit is an automation engine and a deployment tool.\n\nShipit provides a good alternative to Capistrano or other build tools. It is easy to deploy or to automate simple tasks on your remote servers.\n\n**Features:**\n\n- Write your task using JavaScript\n- Task flow based on [orchestrator](https://github.com/orchestrator/orchestrator)\n- Login and interactive SSH commands\n- Easily extendable\n\n## Deploy using Shipit\n\n1.  Create a `shipitfile.js` at the root of your project\n\n```js\n// shipitfile.js\nmodule.exports = shipit => {\n  // Load shipit-deploy tasks\n  require(\'shipit-deploy\')(shipit)\n\n  shipit.initConfig({\n    default: {\n      deployTo: \'/var/apps/super-project\',\n      repositoryUrl: \'https://github.com/user/super-project.git\',\n    },\n    staging: {\n      servers: \'deploy@staging.super-project.com\',\n    },\n  })\n}\n```\n\n2.  Run deploy command using [npx](https://www.npmjs.com/package/npx): `npx shipit staging deploy`\n\n3.  You can rollback using `npx shipit staging rollback`\n\n## Recipes\n\n### Copy config file\n\nAdd a custom task in your `shipitfile.js` and run `copyToRemote`.\n\n```js\n// shipitfile.js\nmodule.exports = shipit => {\n  /* ... */\n\n  shipit.task(\'copyConfig\', async () => {\n    await shipit.copyToRemote(\n      \'config.json\',\n      \'/var/apps/super-project/config.json\',\n    )\n  })\n}\n```\n\n### Use events\n\nYou can add custom event and listen to events.\n\n```js\nshipit.task(\'build\', function() {\n  // ...\n  shipit.emit(\'built\')\n})\n\nshipit.on(\'built\', function() {\n  shipit.start(\'start-server\')\n})\n```\n\nShipit emits the `init` event once initialized, before any tasks are run.\n\n### Use Babel in your `shipitfile.js`\n\nInstead of using a `shipitfile.js`, use `shipitfile.babel.js`:\n\n```js\n// shipitfile.babel.js\nexport default shipit => {\n  shipit.initConfig({\n    /* ... */\n  })\n}\n```\n\n### Customizing environments\n\nYou can overwrite all default variables defined as part of the `default` object:\n\n```js\nmodule.exports = shipit => {\n  shipit.initConfig({\n    default: {\n      branch: \'dev\',\n    },\n    staging: {\n      servers: \'staging.myproject.com\',\n      workspace: \'/home/vagrant/website\'\n    },\n    production: {\n      servers: [{\n        host: \'app1.myproject.com\',\n        user: \'john\',\n      }, {\n        host: \'app2.myproject.com\',\n        user: \'rob\',\n      }],\n      branch: \'production\',\n      workspace: \'/var/www/website\'\n    }\n  });\n\n  ...\n  shipit.task(\'pwd\', function () {\n    return shipit.remote(\'pwd\');\n  });\n  ...\n};\n```\n\n### Asynchronous config\n\nIf you can\'t call `shipit.initConfig(...)` right away because\nyou need to get data asynchronously to do so, you can return\na promise from the module:\n\n```js\nmodule.exports = async shipit => {\n  const servers = await getServers()\n  shipit.initConfig({\n    production: {\n      servers: servers,\n      // ...\n    },\n  })\n}\n```\n\n## Usage\n\n```\nUsage: shipit <environment> <tasks...>\n\nOptions:\n\n  -V, --version         output the version number\n  --shipitfile <file>   Specify a custom shipitfile to use\n  --require <files...>  Script required before launching Shipit\n  --tasks               List available tasks\n  --environments        List available environments\n  -h, --help            output usage information\n```\n\n### Global configuration\n\n#### ignores\n\nType: `Array<String>`\n\nList of files excluded in `copyFromRemote` or `copyToRemote` methods.\n\n#### key\n\nType: `String`\n\nPath to SSH key.\n\n#### servers\n\nType: `String` or `Array<String>`\n\nThe server can use the shorthand syntax or an object:\n\n- `user@host`: user and host\n- `user@host:4000`: user, host and port\n- `{ user, host, port, extraSshOptions }`: an object\n\n### Shipit Deploy configuration\n\n#### deleteOnRollback\n\nType: `Boolean`, default to `false`\n\nDelete release when a rollback is done.\n\n#### deployTo\n\nType: `String`\n\nDirectory where the code will be deployed on remote servers.\n\n#### keepReleases\n\nType: `Number`\n\nNumber of releases kept on remote servers.\n\n#### repositoryUrl\n\nType: `String`\n\nRepository URL to clone, must be defined using `https` or `git+ssh` format.\n\n#### shallowClone\n\nType: `Boolean`, default `true`\n\nClone only the last commit of the repository.\n\n#### workspace\n\nType: `String`\n\nIf `shallowClone` is set to `false`, this directory will be used to clone the repository before deploying it.\n\n#### verboseSSHLevel\n\nType: `Number`, default `0`\n\nSSH verbosity level to use when connecting to remote servers. **0** (none), **1** (-v), **2** (-vv), **3** (-vvv).\n\n### API\n\n#### shipit.task(name, [deps], fn)\n\nCreate a new Shipit task. If a promise is returned task will wait for completion.\n\n```js\nshipit.task(\'hello\', async () => {\n  await shipit.remote(\'echo "hello on remote"\')\n  await shipit.local(\'echo "hello from local"\')\n})\n```\n\n#### shipit.blTask(name, [deps], fn)\n\nCreate a new Shipit task that will block other tasks during its execution. If a promise is returned other task will wait before start.\n\n```js\nshipit.blTask(\'hello\', async () => {\n  await shipit.remote(\'echo "hello on remote"\')\n  await shipit.local(\'echo "hello from local"\')\n})\n```\n\n#### shipit.start(tasks)\n\nRun Shipit tasks.\n\n```js\nshipit.start(\'task\')\nshipit.start(\'task1\', \'task2\')\nshipit.start([\'task1\', \'task2\'])\n```\n\n#### shipit.local(command, [options])\n\nRun a command locally and streams the result. See [ssh-pool#exec](https://github.com/shipitjs/shipit/tree/master/packages/ssh-pool#exec).\n\n```js\nshipit\n  .local(\'ls -lah\', {\n    cwd: \'/tmp/deploy/workspace\',\n  })\n  .then(({ stdout }) => console.log(stdout))\n  .catch(({ stderr }) => console.error(stderr))\n```\n\n#### shipit.remote(command, [options])\n\nRun a command remotely and streams the result. See [ssh-pool#connection.run](https://github.com/shipitjs/shipit/tree/master/packages/ssh-pool#connectionruncommand-options).\n\n```js\nshipit\n  .remote(\'ls -lah\')\n  .then(([server1Result, server2Result]) => {\n    console.log(server1Result.stdout)\n    console.log(server2Result.stdout)\n  })\n  .catch(error => {\n    console.error(error.stderr)\n  })\n```\n\n#### shipit.copyToRemote(src, dest, [options])\n\nMake a remote copy from a local path to a remote path. See [ssh-pool#connection.copyToRemote](https://github.com/shipitjs/shipit/tree/master/packages/ssh-pool#connectioncopytoremotesrc-dest-options).\n\n```js\nshipit.copyToRemote(\'/tmp/workspace\', \'/opt/web/myapp\')\n```\n\n#### shipit.copyFromRemote(src, dest, [options])\n\nMake a remote copy from a remote path to a local path. See [ssh-pool#connection.copyFromRemote](https://github.com/shipitjs/shipit/tree/master/packages/ssh-pool#connectioncopyfromremotesrc-dest-options).\n\n```js\nshipit.copyFromRemote(\'/opt/web/myapp\', \'/tmp/workspace\')\n```\n\n#### shipit.log(...args)\n\nLog using Shipit, same API as `console.log`.\n\n```js\nshipit.log(\'hello %s\', \'world\')\n```\n\n## Dependencies\n\n- [OpenSSH](http://www.openssh.com/) 5+\n- [rsync](https://rsync.samba.org/) 3+\n\n## Known Plugins\n\n### Official\n\n- [shipit-deploy](https://github.com/shipitjs/shipit/tree/master/packages/shipit-deploy)\n\n### Third Party\n\n- [shipit-shared](https://github.com/timkelty/shipit-shared)\n- [shipit-db](https://github.com/timkelty/shipit-db)\n- [shipit-assets](https://github.com/timkelty/shipit-assets)\n- [shipit-ssh](https://github.com/timkelty/shipit-ssh)\n- [shipit-utils](https://github.com/timkelty/shipit-utils)\n- [shipit-npm](https://github.com/callerc1/shipit-npm)\n- [shipit-aws](https://github.com/KrashStudio/shipit-aws)\n- [shipit-captain](https://github.com/timkelty/shipit-captain/)\n- [shipit-bower](https://github.com/willsteinmetz/shipit-bower)\n- [shipit-composer](https://github.com/jeremyzahner/shipit-composer)\n- [shipit-bastion](https://github.com/BrokerageEngine/shipit-bastion)\n- [shipit-yaml](https://github.com/davidbernal/shipit-yaml)\n- [shipit-conditional](https://github.com/BrokerageEngine/shipit-conditional)\n\n## Who use Shipit?\n\n- [Le Monde](http://www.lemonde.fr)\n- [Ghost blogging platform](https://ghost.org/)\n- [Fusionary](http://fusionary.com)\n\n## License\n\nMIT\n\n[build-badge]: https://img.shields.io/travis/shipitjs/shipit.svg?style=flat-square\n[build]: https://travis-ci.org/shipitjs/shipit\n[version-badge]: https://img.shields.io/npm/v/shipit-cli.svg?style=flat-square\n[package]: https://www.npmjs.com/package/shipit-cli\n[license-badge]: https://img.shields.io/npm/l/shipit-cli.svg?style=flat-square\n[license]: https://github.com/shipitjs/shipit/blob/master/LICENSE\n[prs-badge]: https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square\n[prs]: http://makeapullrequest.com\n[github-watch-badge]: https://img.shields.io/github/watchers/shipitjs/shipit.svg?style=social\n[github-watch]: https://github.com/shipitjs/shipit/watchers\n[github-star-badge]: https://img.shields.io/github/stars/shipitjs/shipit.svg?style=social\n[github-star]: https://github.com/shipitjs/shipit/stargazers\n[twitter]: https://twitter.com/intent/tweet?text=Check%20out%20ShipitJS!%20https://github.com/shipitjs/shipit%20%F0%9F%91%8D\n[twitter-badge]: https://img.shields.io/twitter/url/https/github.com/shipitjs/shipit.svg?style=social\n'