b'# Phoenix Chat Example\n\n![phoenix-chat-logo](https://user-images.githubusercontent.com/194400/39481553-c448aa1c-4d63-11e8-9389-47789833a96e.png)\n\n\n[![Build Status](https://img.shields.io/travis/dwyl/phoenix-chat-example/master.svg?style=flat-square)](https://travis-ci.org/dwyl/phoenix-chat-example)\n[![codecov.io](https://img.shields.io/codecov/c/github/dwyl/phoenix-chat-example/master.svg?style=flat-square)](http://codecov.io/github/dwyl/phoenix-chat-example?branch=master)\n[![HitCount](http://hits.dwyl.io/dwyl/phoenix-chat-example.svg)](https://github.com/dwyl/phoenix-chat-example)\nTry it: https://phxchat.herokuapp.com\n<!-- [![Deps Status](https://beta.hexfaktor.org/badge/all/github/dwyl/phoenix-chat-example.svg?style=flat-square)](https://beta.hexfaktor.org/github/dwyl/phoenix-chat-example) -->\n<!-- [![Inline docs](http://inch-ci.org/github/dwyl/phoenix-chat-example.svg?style=flat-square)](http://inch-ci.org/github/dwyl/phoenix-chat-example) -->\n\n\nA ***step-by-step tutorial*** for building, testing\nand _deploying_ a Chat app in Phoenix!\n\n## Content\n- [Why?](#why)\n- [What?](#what) \n- [Who?](#who) \n- [How?](#how)\n  - [0. Pre-requisites (Before you Start)](#0-pre-requisites-before-you-start)\n  - [1. Create the App](#1-create-the-app)\n  - [2. Create the (Websocket) "Channel"](#2-create-the-websocket-channel)\n  - [3. Update the Template File (UI)](#3-update-the-template-file-ui)\n  - [4. Update the "Client" code in App.js](#4-update-the-client-code-in-appjs)\n  - [5. Install the Node.js Dependencies](#5-install-the-nodejs-dependencies)\n  - [6. Create/Configure Database](#6-createconfigure-database)\n  - [7. Generate Database Schema to Store Chat History](#7-generate-database-schema-to-store-chat-history)\n  - [8. Run the Ecto Migration (Create the Database Table)](#8-run-the-ecto-migration-create-the-database-table)\n    - [8.1 Review the Messages Table Schema](#81-review-the-messages-table-schema)\n  - [9. Insert Messages into Database](#9-insert-messages-into-database)\n  - [10. Load Existing Messages (When Someone Joins the Chat)](#10-load-existing-messages-when-someone-joins-the-chat)\n  - [11. Send Existing Messages to the Client when they join](#11-send-existing-messages-to-the-client-when-they-join)\n  - [12. Checkpoint: Our Chat App Saves Messages!! (Try it!)](#12-checkpoint-our-chat-app-saves-messages-try-it)\n  - [13. Run the Default/Generated Tests](#13-run-the-defaultgenerated-tests)\n    - [13.1 Fix the Failing Test](#131-fix-the-failing-test)\n    - [13.2 Re-Run the Test(s)](#132-re-run-the-tests)\n  - [14. Understanding the Channel Tests](#14-understanding-the-channel-tests)\n    - [14.1 Analyse a Test](#141-analyse-a-test)\n  - [15. What is Not Tested?](#15-what-is-not-tested)\n    - [15.1 Add `excoveralls` as a (Development) Dependency to `mix.exs`](#151-add-excoveralls-as-a-development-dependency-to-mixexs)\n    - [15.2 Create a New File called `coveralls.json`](#152-create-a-new-file-called-coverallsjson)\n    - [15.3 Run the Tests with Coverage Checking](#153-run-the-tests-with-coverage-checking)\n- [Continuous Integration](#continuous-integration)\n- [Deployment!](#deployment)\n- [Inspiration](#inspiration)\n- [Recommended Reading/Learning](#recommended-reading--learning)\n\n\n## Why?\n\nChat apps are the "Hello World" of "real time" examples. <br />\n\n_Sadly, most_ example apps show a few basics and then _ignore_ "_the rest_" ... <br />\nSo "_beginners_" are often left "_lost_" or "_confused_" as to\nwhat they should _do_ or learn _next_! <br />\nVery _few_ tutorials consider **Testing,\nDeployment, Documentation** or _other_ "**Enhancements**" which are\nall part of the "***Real World***" of building and running apps;\nso those are topics we **_will_ cover** to "_fill in the gaps_".\n\nWe wrote _this_ tutorial to be _easiest_ way to learn Phoenix,\nEcto and "Channels" with a _practical_ example _anyone_ can follow.\n\n\n\n## What?\n\nA simple step-by-step tutorial showing you how to:\n\n+ **Create** a **Phoenix App** from _scratch_\n(_using the `mix phx.new chat` "generator" command_)\n+ Add a "Channel" so your app can communicate over "**WebSockets**".\n+ Implement a _basic_ "***front-end***" in "_plain_" JavaScript\n(_ES5 without any libraries_) to interact with Phoenix\n(_send/receive messages via WebSockets_)\n+ Add a simple "**Ecto**" **schema** to define\nthe **Database Table** (_to store messages_)\n+ **Write** the functions ("CRUD") to _save_\nmessage/sender data to a database table.\n+ **Test** that everything is working as expected.\n+ ***Deploy*** to Heroku so you can _show_ people your creation!\n\n_Initially_, we _deliberately_ skip over configuration files\nand "_Phoenix Internals_"\nbecause you (_beginners_) _don\'t need_ to know about them to get _started_.\nBut don\'t worry, we will return to them when _needed_.\nWe favour "_just-in-time_" (_when you need it_) learning\nas it\'s _immediately_ obvious and _practical_ ***why***\nwe are learning something.\n\n\n## Who?\n\nThis example is for ***complete beginners***\nas a "***My First Phoenix***" App. <br />\n\nWe try to _assume_ as little as possible,\nbut if you think we "_skipped a step_"\nor  you feel "_stuck_" for any reason,\nor have _any_ questions (_related to this example_),\nplease open an issue on GitHub! <br />\nBoth the @dwyl and Phoenix communities are _super **beginner-friendly**_,\nso don\'t be afraid/shy. <br />\nAlso, by asking questions, you are helping everyone\nthat is or might be stuck with the _same_ thing!\n+ **Chat App _specific_** questions:\nhttps://github.com/dwyl/phoenix-chat-example/issues\n+ **General** Learning Phoenix questions:\nhttps://github.com/dwyl/learn-phoenix-framework/issues\n\n\n# _How_?\n\nThese instructions show you how to _create_ the Chat app\n_from scratch_.\n<!--\nIf you prefer to _run_ the existing/sample app,\nscroll down to the "Clone Repo and Run on Localhost" section instead.\n-->\n\n## 0. Pre-requisites (_Before you Start_)\n\n1. **Elixir _Installed_** on your **local machine**. <br />\n  see: https://github.com/dwyl/learn-elixir#installation <br />\n  e.g: <br />\n```\nbrew install elixir\n```\n> _**Note**: if you already have `Elixir` installed on your Mac,\n  and just want to upgrade to the latest version, run:_\n  **`brew upgrade elixir`**\n\n\n2. **Phoenix** framework **installed**.\n  see: https://hexdocs.pm/phoenix/installation.html <br />\n  e.g: <br />\n```\nmix archive.install hex phx_new 1.4.4\n```\n\n3. PostgreSQL (Database Server) installed (_to save chat messages_) <br />\nsee: [https://github.com/dwyl/**learn-postgresql#installation**](https://github.com/dwyl/learn-postgresql#installation)\n\n<!-- update instructions to https://hexdocs.pm/phoenix/installation.html -->\n\n4. Basic **Elixir Syntax** knowledge will help,<br />\nplease see:\n[https://github.com/dwyl/**learn-elixir**](https://github.com/dwyl/learn-elixir)\n\n5. Basic **JavaScript** knowledge is _advantageous_\n(_but not essential as the "front-end" code\nis quite basic and well-commented_).\nsee: https://github.com/iteles/Javascript-the-Good-Parts-notes\n\n\n### _Check_ You Have Everything _Before_ Starting\n\nCheck you have the _latest version_ of **Elixir**\n(_run the following command in your terminal_):\n```sh\nelixir -v\n```\n\nYou should see something like:\n```sh\nErlang/OTP 21 [erts-10.3.4] [source] [64-bit] [smp:8:8] [ds:8:8:10] [async-threads:1] [hipe] [dtrace]\n\nElixir 1.8.1 (compiled with Erlang/OTP 21)\n```\n\nCheck you have the **latest** version of **Phoenix**:\n```sh\nmix phx.new -v\n```\nYou should see:\n```sh\nPhoenix v1.4.4\n```\n\n_Confirm_ **PostgreSQL** is running (_so the App can store chat messages_)\nrun the following command:\n```sh\nlsof -i :5432\n```\nYou should see output _similar_ to the following:\n```sh\nCOMMAND  PID  USER   FD  TYPE DEVICE                  SIZE/OFF NODE NAME\npostgres 529 Nelson  5u  IPv6 0xbc5d729e529f062b      0t0  TCP localhost:postgresql (LISTEN)\npostgres 529 Nelson  6u  IPv4 0xbc5d729e55a89a13      0t0  TCP localhost:postgresql (LISTEN)\n```\nThis tells us that PostgreSQL is "_listening_" on TCP Port `5432`\n(_the default port_)\n\nWith all those "pre-flight checks" performed, let\'s get _going_!\n\n## 1. _Create_ The _App_\n\nIn your terminal program on your localhost,\ntype the following command to create the app:\n\n```sh\nmix phx.new chat\n```\nThat will create the directory structure and project files. <br />\n\n\nWhen asked to "***Fetch and install dependencies***? [Yn]",<br />\nType `y` (_the "Y" key_) in your terminal,\nfollowed by the `[Enter]` / `[Return]` key.\n\nYou should see: <br />\n![fetch-and-install-dependencies](https://user-images.githubusercontent.com/194400/34833220-d219221c-f6e6-11e7-88d6-87aa4c3054e4.png)\n\nChange directory into the `chat` directory by running the suggested command:\n```sh\ncd chat\n```\n\n> _**Note**: at this point there is already an "App"\nit just does not **do** anything (yet) ... <br />\nyou **can** run `mix phx.server`\nin your terminal - don\'t worry if you\'re seeing error <br />\nmessages, this is because we haven\'t created our database yet. <br />\nWe will take care of that in [step 6](#6-createconfigure-database)!<br />\nFor now, open [http://localhost:4000](http://localhost:4000)\nin your browser <br />\nand you will see the `default`\n"Welcome to Phoenix" homepage:_ <br />\n![welcome-to-phoenix](https://user-images.githubusercontent.com/194400/36354251-65e095c0-14c9-11e8-98e4-9d91c98c9b8e.png)\n\nLet\'s continue to the _interesting_ part!\n\n## 2. _Create_ the (WebSocket) "_Channel_"\n\nGenerate the (WebSocket) channel to be used in the chat app:\n\n```sh\nmix phx.gen.channel Room\n```\n\n> If you are prompted to confirm installation,\ntype `y` and hit the `[Enter]` key.\n\nThis will create **two files**:<br />\n```sh\n* creating lib/chat_web/channels/room_channel.ex\n* creating test/chat_web/channels/room_channel_test.exs\n```\nThe `room_channel.ex` file handles receiving/sending messages\nand the `room_channel_test.exs` tests basic interaction with the channel.\n(_Don\'t worry about this yet, we will look at the test file in step 14 below_!)\n\nWe are informed that we need to update a piece of code into your app: <br />\n```sh\nAdd the channel to your `/lib/chat_web/channels/user_socket.ex` handler, for example:\n\n    channel "room:lobby", ChatWeb.RoomChannel\n```\n\nOpen the file called `/lib/chat_web/channels/user_socket.ex` <br >\nand change the line:\n```elixir\n# channel "room:*", ChatWeb.RoomChannel\n```\nto:\n```elixir\nchannel "room:lobby", ChatWeb.RoomChannel\n```\nExample:\n[user_socket.ex#L5](https://github.com/nelsonic/phoenix-chat-example/blob/fb02977db7a0e749a6eb5212749ae4df190f6b01/lib/chat_web/channels/user_socket.ex#L5)\n\n> For more detail on Phoenix Channels,\n(_we highly recommend you_) read:\nhttps://hexdocs.pm/phoenix/channels.html\n\n\n## 3. Update the Template File (UI)\n\nOpen the the\n[`/lib/chat_web/templates/page/index.html.eex`](https://github.com/nelsonic/phoenix-chat-example/blob/fb02977db7a0e749a6eb5212749ae4df190f6b01/lib/chat_web/templates/page/index.html.eex)\nfile <br />\nand _copy-paste_ (_or type_) the following code:\n\n```html\n<!-- The list of messages will appear here: -->\n<ul id=\'msg-list\' class=\'row\' style=\'list-style: none; min-height:200px; padding: 10px;\'></ul>\n\n<div class="row">\n  <div class="col-xs-3">\n    <input type="text" id="name" class="form-control" placeholder="Your Name" autofocus>\n  </div>\n  <div class="col-xs-9">\n    <input type="text" id="msg" class="form-control" placeholder="Your Message">\n  </div>\n</div>\n```\n\nThis is the _basic_ form we will use to input Chat messages. <br />\nThe classes e.g: `"form-control"` and `"col-xs-3"`\nare Bootstrap CSS classes to _style_ the form. <br />\nPhoenix includes Bootstrap by default so you can get up-and-running\nwith your App/Idea/"MVP"! <br />\nIf you are unfamiliar with Bootstrap UI,\nread: https://getbootstrap.com/docs/3.3 <br />\nand if you _specifically_ want to understand the Bootstrap _forms_,\nsee: https://getbootstrap.com/docs/3.3/css/#forms\n\nYour `index.html.eex` template file should look like this:\n[`/lib/chat_web/templates/page/index.html.eex`](https://github.com/nelsonic/phoenix-chat-example/blob/fb02977db7a0e749a6eb5212749ae4df190f6b01/lib/chat_web/templates/page/index.html.eex) (_snapshot_)\n\n\n## 4. Update the "Client" code in App.js\n\nOpen:\n[`/assets/js/app.js`](https://github.com/nelsonic/phoenix-chat-example/blob/fb02977db7a0e749a6eb5212749ae4df190f6b01/assets/js/app.js#L21-L48)\nand uncomment the line:\n```js\nimport socket from "./socket"\n```\nwith the line _uncommented_ our app will import the `socket.js` file\nwhich will give us WebSocket functionality.\n\nThen add the following JavaScript ("Client") code:\n\n```js\nlet channel = socket.channel(\'room:lobby\', {}); // connect to chat "room"\n\nchannel.on(\'shout\', function (payload) { // listen to the \'shout\' event\n  let li = document.createElement("li"); // create new list item DOM element\n  let name = payload.name || \'guest\';    // get name from payload or set default\n  li.innerHTML = \'<b>\' + name + \'</b>: \' + payload.message; // set li contents\n  ul.appendChild(li);                    // append to list\n});\n\nchannel.join(); // join the channel.\n\n\nlet ul = document.getElementById(\'msg-list\');        // list of messages.\nlet name = document.getElementById(\'name\');          // name of message sender\nlet msg = document.getElementById(\'msg\');            // message input field\n\n// "listen" for the [Enter] keypress event to send a message:\nmsg.addEventListener(\'keypress\', function (event) {\n  if (event.keyCode == 13 && msg.value.length > 0) { // don\'t sent empty msg.\n    channel.push(\'shout\', { // send the message to the server on "shout" channel\n      name: name.value,     // get value of "name" of person sending the message\n      message: msg.value    // get message text (value) from msg input field.\n    });\n    msg.value = \'\';         // reset the message input field for next message.\n  }\n});\n```\n\n> Take a moment to read the JavaScript code\nand confirm your understanding of what it\'s doing. <br />\nHopefully the in-line comments are self-explanatory,\nbut if _anything_ is unclear, please ask!\n\nAt this point your `app.js` file should look like this:\n[`/assets/js/app.js`](https://github.com/nelsonic/phoenix-chat-example/blob/fb02977db7a0e749a6eb5212749ae4df190f6b01/assets/js/app.js#L21-L48)\n\n\n\n## 5. Install the Node.js Dependencies\n\nIn order to use JS in your Phoenix project,\nyou need to install the node.js dependencies:\n```sh\ncd assets && npm install && cd ..\n```\nThat might take a few seconds (_depending on your internet connection speed_)\n\nBut once it completes you should see:\n```sh\nadded 1022 packages from 600 contributors and audited 14893 packages in 32.079s\nfound 0 vulnerabilities\n```\n\n\n# Storing Chat Message Data/History\n\nIf we didn\'t _want_ to _save_ the chat history,\nwe could just _deploy_ this App _immediately_\nand we\'d be done! <br />\n\n<!--\n> In fact, it could be a "_use-case_" / "_feature_"\nto have "_ephemeral_" chat without _any_ history ...\n> see: http://www.psstchat.com/\n![psst-chat](https://user-images.githubusercontent.com/194400/35284714-6e338596-0053-11e8-998a-83b917ec90ae.png)\n> but we are _assuming_ that _most_ chat apps save history\n> so that `new` people joining the "channel" can see the history\n> and people who are briefly "absent" can "catch up" on the history.\n-->\n\n## 6. Create/Configure Database\n\nCreate the database to store the chat history data:\n\n```sh\nmix ecto.create\n```\nYou should see:\n```sh\nThe database for Chat.Repo has been created\n```\n\n## 7. Generate Database Schema to Store Chat History\n\nRun the following command in your terminal:\n```sh\nmix phx.gen.schema Message messages name:string message:string\n```\nYou should see the following output:\n```sh\n* creating lib/chat/message.ex\n* creating priv/repo/migrations/20180107074333_create_messages.exs\n\nRemember to update your repository by running migrations:\n\n    $ mix ecto.migrate\n```\n\nLet\'s break down that command for clarity:\n+ `mix phx.gen.schema` - the mix command to create a new schema (database table)\n+ `Message` - the singular name for record in our messages "collection"\n+ `messages` - the name of the collection (_or database table_)\n+ `name:string` - the name of the person sending a message, stored as a `string`.\n+ `message:string` - the message sent by the person, also stored as a `string`.\n\nThe `creating lib/chat/message.ex` file is the "schema"\nfor our Message database table.\n\nAdditionally a migration file is created, e.g:\n`creating priv/repo/migrations/20180107074333_create_messages.exs`\nThe "_migration_" actually _creates_ the database table in our database.\n\n\n\n## 8. Run the Ecto Migration (_Create The Database Table_)\n\nIn your terminal run the following command to create the `messages` table:\n\n```sh\nmix ecto.migrate\n```\nYou should see the following in your terminal:\n```sh\nCompiling 1 file (.ex)\nGenerated chat app\n[info] == Running Chat.Repo.Migrations.CreateMessages.change/0 forward\n[info] create table messages\n[info] == Migrated in 0.0s\n```\n\n### 8.1 Review the Messages Table Schema\n\nIf you open your PostgreSQL GUI (_e.g: [pgadmin](https://www.pgadmin.org)_)\nyou will see that the messages table has been created\nin the `chat_dev` database:\n\n![pgadmin-messages-table](https://user-images.githubusercontent.com/194400/35624169-deaa7fd4-0696-11e8-8dd0-584eba3a2037.png)\n\nYou can view the table schema by "_right-clicking_" (_`ctrl + click` on Mac_)\non the `messages` table and selecting "properties":\n\n![pgadmin-messages-schema-columns-view](https://user-images.githubusercontent.com/194400/35623295-c3a4df5c-0693-11e8-8484-199c2bcab458.png)\n\n\n\n## 9. Insert Messages into Database\n\nOpen the `lib/chat_web/channels/room_channel.ex` file\nand inside the function `def handle_in("shout", payload, socket) do`\nadd the following line:\n```elixir\nChat.Message.changeset(%Chat.Message{}, payload) |> Chat.Repo.insert  \n```\n\nSo that your function ends up looking like this:\n```elixir\ndef handle_in("shout", payload, socket) do\n  Chat.Message.changeset(%Chat.Message{}, payload) |> Chat.Repo.insert  \n  broadcast socket, "shout", payload\n  {:noreply, socket}\nend\n```\n\n## 10. Load _Existing_ Messages (_When Someone Joins the Chat_)\n\nOpen the `lib/chat/message.ex` file and add a new function to it:\n```elixir\ndef get_messages(limit \\\\ 20) do\n  Chat.Repo.all(Chat.Message, limit: limit)\nend\n```\nThis function accepts a single parameter `limit` to only return a fixed/maximum\nnumber of records.\nIt uses Ecto\'s `all` function to fetch all records from the database.\n`Message` is the name of the schema/table we want to get records for,\nand limit is the maximum number of records to fetch.\n\n\n## 11. Send Existing Messages to the Client when they Join\n\nIn the `/lib/chat_web/channels/room_channel.ex` file create a new function:\n```elixir\ndef handle_info(:after_join, socket) do\n  Chat.Message.get_messages()\n  |> Enum.each(fn msg -> push(socket, "shout", %{\n      name: msg.name,\n      message: msg.message,\n    }) end)\n  {:noreply, socket} # :noreply\nend\n```\n\nand at the top of the file update the `join` function to the following:\n\n```elixir\ndef join("room:lobby", payload, socket) do\n  if authorized?(payload) do\n    send(self(), :after_join)\n    {:ok, socket}\n  else\n    {:error, %{reason: "unauthorized"}}\n  end\nend\n```\n\n## 12. _Checkpoint_: Our Chat App Saves Messages!! (_Try it_!)\n\nStart the Phoenix server (_if it is not already running_):\n```sh\nmix phx.server\n```\n\n> _**Note**: it will take a few seconds to **compile** but then you should see:_\n\n![server-running](https://user-images.githubusercontent.com/194400/35188430-22de4d9c-fe2d-11e7-82d3-85e0a0482e17.png)\n\nThe line:\n```sh\n[info] Running ChatWeb.Endpoint with Cowboy using http://0.0.0.0:4000\n```\ntells us that our code compiled (_as expected_) and the Chat App\nis running on TCP Port `4000`!\n\n**Open** the Chat web app in\n**two _separate_ browser windows**: http://localhost:4000 <br />\n(_if your machine only has one browser try using one "incognito" tab_)\n\nYou should be able to send messages between the two browser windows: <br />\n![phoenix-chat-example-basic-cropped](https://user-images.githubusercontent.com/194400/35188398-9998e10a-fe2c-11e7-9f69-2a3dfbae754d.gif)\n\nCongratulations! You have a _working_ (_basic_) Chat App written in Phoenix!\n\nThe chat (message) history is _saved_!\n\nThis means you can _refresh_ the browser\n_or_ join in a different browser and you will still see the history!\n\n<br />\n\n# Testing our App (_Automated Testing_)\n\nAutomated testing is one of the _best_ ways to ensure _reliability_\nin your web applications.\n\n> _**Note**: If you are completely new to Automated Testing\nor "Test Driven Development" ("TDD"),\nwe recommend reading/following the "basic" tutorial:_\n[github.com/dwyl/**learn-tdd**](https://github.com/dwyl/learn-tdd)\n\nTesting in Phoenix is fast (_tests run in parallel!_)\nand easy to get started!\nThe `ExUnit` testing framework is _built-in_\nso there aren\'t an "decisions/debates"\nabout which framework or style to use.\n\nIf you have never seen or written a test with `ExUnit`,\ndon\'t fear, the syntax should be _familiar_ if you have\nwritten _any_ sort of automated test in the past.\n\n## 13. Run the Default/Generated Tests\n\nWhenever you create a new Phoenix app\nor add a new feature (_like a channel_),\nPhoenix _generates_ a new test for you.\n\nWe _run_ the tests using the **`mix test`** command:\n\n![one-failing-test](https://user-images.githubusercontent.com/194400/35329453-d2549d86-00f7-11e8-9176-2cd14a258abe.png)\n\nIn this case _one_ of the tests fails. (_7 tests, **1 failure**_)\n\nThe "**stacktrace**" informs us that location of the failing test is:\n`test/chat_web/controllers/page_controller_test.exs:4`\nAnd that the "assertion" is:\n```elixir\nassert html_response(conn, 200) =~ "Welcome to Phoenix!"\n```\nIn _English_ this means we are asserting that the "homepage"\nreturns an "HTML response" which contains the words: "**Welcome to Phoenix!**"\n\nSince we changed the code in\n[`/lib/chat_web/templates/page/index.html.eex`](https://github.com/nelsonic/phoenix-chat-example/blob/fb02977db7a0e749a6eb5212749ae4df190f6b01/lib/chat_web/templates/page/index.html.eex)\n(_in section 3, above_),\nthe page no longer contains the string " ***Welcome to Phoenix!*** ".\n\n### 13.1 Fix The Failing Test\n\nWe have _two_ options:\n1. **Add** the text "**Welcome to Phoenix!**" back into `page/index.html.eex`\n2. ***Update*** the assertion to something that _is_ on the page e.g:\n"**msg-list**".\n\nBoth are _valid_ approaches, however we _prefer_ the second option because\nit "_reflects the reality_" rather than "_altering reality_"\nto match the exiting assertion. <br />\nLet\'s make the update now. Open the\n[`test/chat_web/controllers/page_controller_test.exs`](https://github.com/nelsonic/phoenix-chat-example/blob/f9cf59e8282a5c0756d7c6be91f3b5926430fd3b/test/chat_web/controllers/page_controller_test.exs)\nfile and change line **6** to:\n\n```elixir\nassert html_response(conn, 200) =~ "msg-list"\n```\nWe know that `"msg-list"` is _on_ the page\nbecause that\'s the `id` of the `<ul>`\nwhere our message history is bing displayed.\n\nYour `page_controller_test.exs` file should now look like this:\n[`/test/chat_web/controllers/page_controller_test.exs#L6`](https://github.com/nelsonic/phoenix-chat-example/blob/c2abfa05df178f71f615eae363b7475788c96b43/test/chat_web/controllers/page_controller_test.exs#L6)\n\n### 13.2 Re-Run The Test(s)\n\nNow that we have _updated_ the assertion,\nwe can re-run the tests with the **`mix test`** command:\n\n![tests-pass](https://user-images.githubusercontent.com/194400/35342629-6dcc7c3e-0120-11e8-89dc-5f07e81b32ff.png)\n\n## 14. Understanding The Channel Tests\n\nIt\'s worth taking a moment (_or as long as you need_!)\nto _understand_ what is going on in the\n[`/room_channel_test.exs`](https://github.com/nelsonic/phoenix-chat-example/blob/master/test/chat_web/channels/room_channel_test.exs)\nfile. _Open_ it if you have not already, read the test descriptions & code.\n\n> For a bit of _context_ we recommend reading:\n[https://hexdocs.pm/phoenix/**testing_channels**.html](https://hexdocs.pm/phoenix/testing_channels.html)\n\n### 14.1 _Analyse_ a Test\n\nLet\'s take a look at the _first_ test in\n[/test/chat_web/channels/room_channel_test.exs#L14-L17](https://github.com/nelsonic/phoenix-chat-example/blob/f3823e64d9f9826db67f5cdf228ea5c974ad59fa/test/chat_web/channels/room_channel_test.exs#L14-L17):\n\n```elixir\ntest "ping replies with status ok", %{socket: socket} do\n  ref = push socket, "ping", %{"hello" => "there"}\n  assert_reply ref, :ok, %{"hello" => "there"}\nend\n```\nThe test get\'s the `socket` from the `setup` function (_on line 6 of the file_)\nand assigns the result of calling the `push` function to a variable `ref`\n`push` merely _pushes_ a message (_the map `%{"hello" => "there"}`_)\non the `socket` to the `"ping"` ***topic***.\n\nThe [`handle_in`](https://github.com/nelsonic/phoenix-chat-example/blob/f3823e64d9f9826db67f5cdf228ea5c974ad59fa/lib/chat_web/channels/room_channel.ex#L13-L17)\nfunction clause which handles the `"ping"` topic:\n\n```elixir\ndef handle_in("ping", payload, socket) do\n  {:reply, {:ok, payload}, socket}\nend\n```\nSimply _replies_ with the payload you send it,\ntherefore in our _test_ we can use the `assert_reply` Macro\nto assert that the `ref` is equal to `:ok, %{"hello" => "there"}`\n\n> _**Note**: if you have questions or need **any** help\nunderstanding the other tests, please open an issue on GitHub\nwe are happy to expand this further!_ <br />\n(_we are just trying to keep this tutorial reasonably "brief"\nso beginners are not "overwhelmed" by anything...)_\n\n<br />\n\n## 15. What is _Not_ Tested?\n\n_Often_ we can learn a _lot_ about an application (_or API_)\nfrom reading the tests and seeing where the "gaps" in testing are.\n\n_Thankfully_ we can achieve this with only a couple of steps:\n\n### 15.1 Add `excoveralls` as a (Development) Dependency to `mix.exs`\n\nOpen your `mix.exs` file and find the "deps" function:\n```elixir\ndefp deps do\n```\n\nAdd the following line to the end of the List:\n```elixir\n{:excoveralls, "~> 0.7.0", only: [:test, :dev]}, # tracking test coverage\n```\nAdditionally, find the `def project do` section (_towards the top of `mix.exs`_)\nand add the following lines to the List:\n```elixir\ntest_coverage: [tool: ExCoveralls],\npreferred_cli_env: ["coveralls": :test, "coveralls.detail": :test,\n  "coveralls.post": :test, "coveralls.html": :test]\n```\n\n_Then_, ***install*** the dependency on `excoveralls`\nwe just added to `mix.exs`:\n```sh\nmix deps.get\n```\nYou should see:\n```sh\nResolving Hex dependencies...\nDependency resolution completed:\n* Getting excoveralls (Hex package)\n... etc.\n```\n\n### 15.2 Create a _New File_ Called `coveralls.json`\n\nIn the "root" (_base directory_) of the Chat project,\ncreate a new file called `coveralls.json` and _copy-paste_ the following:\n\n```json\n{\n  "coverage_options": {\n    "minimum_coverage": 100\n  },\n  "skip_files": [\n    "test/"\n  ]\n}\n```\nThis file is quite basic, it instructs the `coveralls` app\nto require a **`minimum_coverage`** of **100%**\n(_i.e. **everything is tested**<sup>1</sup>_)\nand to _ignore_ the files in the `test/` directory for coverage checking.\n\n> <small>_<sup>1</sup>We believe that **investing**\na little **time up-front** to write tests for **all** our **code**\nis **worth it** to have **fewer bugs** later. <br />\n**Bugs** are **expensive**, **tests** are **cheap**\nand **confidence**/**reliability** is **priceless**_. </small>\n\n\n### 15.3 Run the Tests with Coverage Checking\n\nTo run the tests with coverage, copy-paste the following command\ninto your terminal:\n\n```elixir\nMIX_ENV=test mix do coveralls.json\n```\nYou should see: <br />\n![phoenix-chat-coverage](https://user-images.githubusercontent.com/194400/36356461-435c4dde-14ea-11e8-9e48-3ea49f55b1e7.png)\n\nAs we can se here, only **59.3%** of lines of code in `/lib`\nare being "covered" by the tests we have written.\n\nTo **view** the coverage in a web browser run the following:\n\n```elixir\nMIX_ENV=test mix coveralls.html && open cover/excoveralls.html\n```\n<br />\nThis will open the Coverage Report (HTML) in your default Web Browser: <br />\n\n![coverage-report-59 3-percent](https://user-images.githubusercontent.com/194400/36425359-7637adfc-163e-11e8-9c9f-3c4fcbcded32.png)\n\n\n> <small>_**Note**: you will need to **temporarily** lower\nthe coverage threshold in `coveralls.json` form `100` to `50`\nfor this command to work because it\'s expecting 100% coverage._</small>\n\n\n\n<!-- I think I\'m at a point where I need to take a "Detour"\nto write up my **Definitive** thoughts on "Test Coverage" once-and-for-all! -->\n\n\n\n\n<br />\n\n# Continuous Integration\n\nContinuous integration lets you _automate_ running the tests\nto check/confirm that your app is working as _expected_ (_before deploying_).\nThis prevents accidentally "_breaking_" your app.\n\n_Thankfully_ the steps are quite simple.\n\n> _If you are `new` to Continuous Integration, or need a refresher,\nwe wrote a step-by-step tutorial for it!\nsee_:\n[github.com/dwyl/**learn-travis**](https://github.com/dwyl/learn-travis)\n\nThe Elixir-specific section is:\nhttps://github.com/dwyl/learn-travis#elixir-lang\n\nWe only need to add `.travis.yml` file to the project\nwith the following lines:\n```yml\nlanguage: elixir\nelixir: # Latest version of Elixir\n  - 1.6\naddons: # ensure that Travis-CI provisions a DB for our test:\n  postgresql: \'9.5\'\nenv:\n  - MIX_ENV=test\nscript: # run the tests:\n  - mix test\n```\n\nYou will need to _enable_ your project on Travis-CI\nfor the build to run. <br />\nPlease see: https://github.com/dwyl/learn-travis#getting-started\n\n<br />\n\n# Deployment!\n\nDeployment to Heroku takes a few minutes,\nbut has a few "steps",\ntherefore we have created a _separate_\nguide for it:\n [elixir-phoenix-app-deployment.md](https://github.com/dwyl/learn-heroku/blob/master/elixir-phoenix-app-deployment.md)\n\nOnce you have _deployed_ you will will be able\nto view/use your app in any Web/Mobile Browser.\n\ne.g: https://phxchat.herokuapp.com <br />\n![phxchat](https://user-images.githubusercontent.com/194400/36480000-9c6fe768-1702-11e8-86d6-c8703883096c.png)\n\n<br />\n\n\n![thats-all-folks](https://user-images.githubusercontent.com/194400/36492991-6bc5dd42-1726-11e8-9d7b-a11c44d786a0.jpg)\n\n<br />\n\n_Want **more**_? ***Ask***!\n_Please share your thoughts on GitHub_: https://github.com/dwyl/phoenix-chat-example/issues\n\n\n<br /> <br />\n\n\n## Inspiration\n\nThis repo is inspired by @chrismccord\'s Simple Chat Example:\nhttps://github.com/chrismccord/phoenix_chat_example\n\nAt the time of writing Chris\' example is still\n[Phoenix 1.2](https://github.com/chrismccord/phoenix_chat_example/blob/31f0c5f80a04af0a05fdec89d5b428880c4ea814/mix.exs#L25)\nsee: https://github.com/chrismccord/phoenix_chat_example/issues/40\ntherefore we decided to write a quick version for Phoenix 1.4 :-)\n\n\n## Recommended Reading / Learning\n\n+ ExUnit docs: https://hexdocs.pm/ex_unit/ExUnit.html\n+ Testing Phoenix Channels:\nhttps://quickleft.com/blog/testing-phoenix-websockets\n+ Phoenix WebSockets Under a Microscope:\nhttps://zorbash.com/post/phoenix-websockets-under-a-microscope\n'