b'<h1 align="center">\n\t<br>\n\t<img src="assets/logo.svg?sanitize=true" alt="Discharge">\n\t<br>\n\t<br>\n</h1>\n\n> A simple, easy way to deploy static websites to Amazon S3\n\n[![](https://badgen.net/travis/brandonweiss/discharge?icon=travis)](https://www.travis-ci.com/brandonweiss/discharge)\n[![](https://badgen.net/npm/v/@static/discharge?icon=npm)](https://www.npmjs.com/package/@static/discharge)\n![](https://badgen.net/npm/node/@static/discharge)\n[![](https://badgen.net/david/dep/brandonweiss/discharge)](https://david-dm.org/brandonweiss/discharge)\n![](https://badgen.net/badge/documentation/lit/purple)\n[![](https://badgen.net/badge//AWESOME?icon=awesome&color=494368)](https://github.com/sindresorhus/awesome-nodejs#command-line-apps)\n\n![screenshot](assets/screenshot.gif)\n\n## Features\n\n* Very little understanding of AWS required\n* Interactive UI for configuring deployment\n* Step-by-step list of what\xe2\x80\x99s happening\n* Support for clean URLs (no `.html` extensions)\n* Support for subdomains\n* Use an AWS Profile (named credentials) to authenticate with AWS\n* CDN (CloudFront) and HTTPS/TLS support\n\n## Installation\n\nInstall it globally:\n\n```\n$ npm install --global @static/discharge\n```\n\nOr add it to your application\xe2\x80\x99s `package.json`:\n\n```\n$ npm install --save-dev @static/discharge\n```\n\n## Usage\n\n### Authentication\n\n#### Credentials in file\n\n[Configuring AWS credentials][aws-credentials-file] can be a bit confusing. After getting your Access Key ID and Secret Access Key from AWS, you should store them in a file at `~/.aws/credentials`. It should look something like this:\n\n\n```\n[default]\naws_access_key_id=AKIAIOSFODNN7EXAMPLE\naws_secret_access_key=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\n```\n\nReplace the example keys with your own.\n\n#### Credentials in environment\n\nAlternatively, if you prefer environment variables or you are running Discharge in an automated environment like a continuous integration/deployment server you can omit the `aws_profile` configuration option explained later and set environment variables instead.\n\n```\nexport AWS_ACCESS_KEY_ID=AKIAIOSFODNN7EXAMPLE\nexport AWS_SECRET_ACCESS_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\n```\n\nReplace the example keys with your own.\n\n### Configure\n\nConfiguration is done via a `.discharge.json` file located at the root of your application. You can run `discharge init` to get an interactive UI that will help you generate the configuration file, or you can write it yourself from scratch. It will look something like this:\n\n```json\n{\n  "domain": "anti-pattern.com",\n  "build_command": "bundle exec middleman build",\n  "upload_directory": "build",\n  "index_key": "index.html",\n  "error_key": "404.html",\n  "cache": 3600,\n  "aws_profile": "website-deployment",\n  "aws_region": "us-west-1",\n  "cdn": true,\n  "dns_configured": false\n}\n```\n\nThose are most of the configuration options but a complete list is next.\n\n#### Configuration options\n\nThere are no defaults\xe2\x80\x94all configuration options are explicit and must be provided unless marked as optional.\n\n**domain** `String`\n\nThe domain name of your website. This will be used as the name of the S3 bucket your website will be uploaded to.\n\n**build_command** `String`\n\nThe command that will be executed in the shell to build your static website.\n\n**upload_directory** `String`\n\nThe name of the directory that the `build_command` generated with the static files in it. This is the directory that will be uploaded to S3.\n\n**index_key** `String`\n\nThe key of the document to respond with at the root of the website. `index.html` is almost certainly what you want to use. For example, if `https://example.com` is requested, `https://example.com/index.html` will be returned.\n\n**error_key** `String`\n\nThe key of the document to respond with if the website endpoint responds with a 404 Not Found. For example, `404.html` is pretty common.\n\n**cache** `Number` (optional when `cache_control` is set)\n\nThe number of seconds a browser should cache the files of your website for. This is a simplified version of the HTTP `Cache-Control` header. If you set it to `0` the `Cache-Control` will be set to `"no-cache, no-store, must-revalidate"`. If you set it to a positive number, say, `3600`, the `Cache-Control` will be set to `"public, max-age=3600"`.\n\nBe careful about setting too high a cache length. If you do, when a browser caches it, if you then update the content, that browser will not get the updated content unless the user specifically hard-refreshes the page.\n\nWhen `cdn` is enabled, the `s-maxage` directive is included and set to a very high number (one month). It is recommended you set `cache` to a very low number (e.g five minutes). The CDN will use the `s-maxage` directive and the browser will use the `max-age` directive. This works because when you deploy the CDN\xe2\x80\x99s cache will be automatically expired. For more information see the `distribute` command.\n\nIf you need finer-grained control over the `Cache-Control` header, use the `cache_control` configuration option.\n\n**cache_control** `String` (optional)\n\nA `Cache-Control` directive as described in the [HTTP documentation](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control). This is for more advanced, finer-grained control of caching. If you don\xe2\x80\x99t need that, use the `cache` configuration option.\n\nThe `s-maxage` directive added to `cache` when `cdn` is enabled is not added here\xe2\x80\x94you have to do it yourself. Caveat emptor.\n\n**redirects** `Array<Object>` (optional)\n\n* **prefix_match** `String`\n\n  The URL path prefix to match on. The redirects are matched in order, so if you have two paths with similar parts, like `some/page` and `some`, make sure you put the more specific path first.\n\n* **destination** `String`\n\n  The path to redirect to if the `prefix_match` matches.\n\nAWS does not allow the `prefix_match` and `destination` to start with a forward slash (`/some/page`). You can include them in the configuration for your convenience, but the forward slashes will be invisibly removed when configuring the bucket.\n\nIf you need finer-grained control over the routing rules, use the `routing_rules` configuration option.\n\n**routing_rules** `Array<Object>` (optional)\n\nIf the `redirects` configuration is not enough, you can declare more complex routing rules. There are some [horrible AWS docs][routing-rules-docs] that explain the available options and here\xe2\x80\x99s an example of the syntax from the [AWS JavaScript docs][JavaScript-docs].\n\n```javascript\n[\n  {\n    Redirect: { /* required */\n      HostName: "STRING",\n      HttpRedirectCode: "STRING",\n      Protocol: "http" || "https",\n      ReplaceKeyPrefixWith: "STRING",\n      ReplaceKeyWith: "STRING"\n    },\n    Condition: {\n      HttpErrorCodeReturnedEquals: "STRING",\n      KeyPrefixEquals: "STRING"\n    }\n  },\n  /* more items */\n]\n```\n\nThe unusual property casing is intentional\xe2\x80\x94the entire configuration will be passed directly through in the HTTP request.\n\n**cdn**: `Boolean`\n\nSet this to `true` if you want to use a CDN and HTTPS/TLS. Setting up the CDN does not happen automatically when deploying. After deploying, run `discharge distribute` to set up the CDN. Once the CDN is set up, future deploys will expire the CDN\xe2\x80\x99s cache.\n\nFor more information see the `cache` configuration or the `distribute` command.\n\n**aws_profile** `String` (optional)\n\nThe AWS profile you\xe2\x80\x99ve specified in a credentials file at `~/.aws/credentials`.\n\nIf you only have one set of credentials then specify \xe2\x80\x9cdefault\xe2\x80\x9d.\n\nIf you want to create a new AWS user with specific permissions/policies for deployment, you can add another profile in the credentials file and specify the custom profile you\xe2\x80\x99ve added.\n\nIf you prefer environment variables or you are running Discharge in an automated environment like a continuous integration/deployment server you can omit this configuration option.\n\n**aws_region** `String`\n\nThe [Amazon S3 region][s3-region] you want to create your website (bucket) in.\n\n**dns_configured** `Boolean`\n\nIf you run `discharge init` this will be set to `false` automatically. Then when you run `discharge deploy` it will show the record you need to add to your DNS configuration. The deploy command will then automatically set this value to `true`, assuming you have properly created the DNS record.\n\n### Deploy\n\nAfter you\xe2\x80\x99ve finished configuring you can run `discharge deploy` to deploy. Deploying is a series of steps that are idempotent\xe2\x80\x94that is, they are safe to run over and over again, and if you haven\xe2\x80\x99t changed anything, then the outcome should always be the same.\n\nIf you change your website configuration (`cache`, `redirects`, etc.) it will be updated. If you change your website content, a diff will be done to figure out what needs to change. New files will be added, changed files will be updated, and deleted files will be removed. The synchronization is one way\xe2\x80\x94that is, if you remove a file from S3 it will just be re-uploaded the next time you deploy.\n\n#### Clean URLs\n\nClean URLs are when the `.html` extensions are dropped from URLs for aesthetic or functional reasons. The `.html` extensions are now commonly considered superfluous. If you have a file named `/projects.html` it\xe2\x80\x99s now understood and generally preferred that the URL `domain.com/projects` would serve that file.\n\nWhen you deploy, two copies of each HTML file will be uploaded: one with the `.html` extension and one without. So a file `some-page.html` will be uploaded as `some-page.html` and as `some-page`, which will allow it to be served from `https://example.com/some-page.html`, with the extension, or from `https://example.com/some-page`, without the extension. You are free to use whichever URL style you prefer!\n\n### Distribute\n\nAfter you\xe2\x80\x99ve finished deploying you can run `discharge distribute` to distribute your website via a CDN (content delivery network). The command will create a TLS certificate, ensure it\xe2\x80\x99s verified, create a distribution, and ensure it\xe2\x80\x99s deployed. Almost no configuration necessary[1]. This step is completely optional, but if you have a high-traffic website it\xe2\x80\x99s highly recommended, and if you want to secure your website with HTTPS/TLS then you have to do it[2].\n\nA CDN is a caching layer. It can significantly speed up requests for users located geographically farther from where your website is deployed, and sometimes even for users nearby it. In brief, the way a CDN works is you point your DNS to the CDN. When a request comes in, the CDN relays the request to your origin (in this case S3) then takes the response and caches it according to the `Cache-Control` header in the response. Future requests will only hit the CDN and not your origin, until either the CDN\xe2\x80\x99s cache expires or it\xe2\x80\x99s expired early.\n\nThe `Cache-Control` header can specify two different cache lengths, one for the CDN and one for the browser. Because static sites are\xe2\x80\xa6 static, the only times they change are when deployed, so it\xe2\x80\x99s safe to set a very high cache length for the CDN, a low cache length for the browser, and then  expire the CDN\xe2\x80\x99s cache early when deploying.\n\n[1]: CDNs can be configured in _a lot_ of different, complex ways. The goal was to abstract away all of that\xe2\x80\x94choose sane defaults and require no configuration. I think this will work for the vast majority of people, but if there\xe2\x80\x99s a specific reason you need more flexibility let me know, and if it\xe2\x80\x99s widely-needed we can add it.\n\n[2]: While CDNs can be configured without TLS, given that TLS certificates are free and we want the entire web to be encrypted, I can\xe2\x80\x99t see any reason to support not using TLS.\n\n#### .io domains\n\nVerifying the TLS certificate is done via email. AWS will look up the contact information in the WHOIS database for your domain and then send a verification email to the following email addresses:\n\n* Domain registrant\n* Technical contact\n* Administrative contact\n* administrator@domain.tld\n* hostmaster@domain.tld\n* postmaster@domain.tld\n* webmaster@domain.tld\n* admin@domain.tld\n\nInexplicably, the .io domain registrar is the only registrar that does not return contact information from the WHOIS database. That means you _have_ to have one of the five common system email addresses set up on a .io domain or you will not receive the TLS certificate verification email.\n\n### Subdomains\n\nYou can use any domain, subdomain, or combination you like. You just need to configure your DNS appropriately.\n\nIf you want to use a naked domain (`domain.com`), because S3 and CloudFront expose a special URL rather than an IP address, your DNS provider will need to support ALIAS records; not all do.\n\nIf you want to use a subdomain like `www.domain.com` or `blog.domain.com`, create a CNAME record for it. The TLS/HTTPS certificate is created for the root domain and all subdomains via a wildcard.\n\nIf you want to use both a naked domain and a subdomain, create an ALIAS and a CNAME record.\n\nIf you want to use only a naked domain or a subdomain, but redirect one to the other (like redirect `www.domain.com` to `domain.com`), then the easiest way to do that is to add a redirect at the DNS-level. It\xe2\x80\x99s not technically a part of the DNS specification so not all DNS providers have it, but the vast majority do. If yours does not, you can either switch to a DNS provider that does or [manually create an S3 bucket that does the redirect][s3-redirect] and create an ALIAS or CNAME record pointing to it.\n\n## Contributing\n\nBug reports and pull requests are welcome on GitHub at [https://github.com/brandonweiss/discharge][github-discharge].\n\n## License\n\nThe package is available as open source under the terms of the [MIT License][MIT-license].\n\n[aws-credentials-file]: http://docs.aws.amazon.com/cli/latest/userguide/cli-config-files.html\n\n[routing-rules-docs]: http://docs.aws.amazon.com/AmazonS3/latest/dev/how-to-page-redirect.html#advanced-conditional-redirects\n[JavaScript-docs]: http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html#putBucketWebsite-property\n[s3-region]: http://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region\n[s3-redirect]: https://aws.amazon.com/premiumsupport/knowledge-center/redirect-domain-route-53/\n[github-discharge]: https://github.com/brandonweiss/discharge\n[MIT-license]: http://opensource.org/licenses/MIT\n'