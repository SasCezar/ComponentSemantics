b's3-deploy for vue-cli\n===\n\n[![npm version](https://badge.fury.io/js/vue-cli-plugin-s3-deploy.svg)](https://badge.fury.io/js/vue-cli-plugin-s3-deploy)\n\nThis [vue-cli](https://github.com/vuejs/vue-cli) plugin aims to make it easier to deploy a built Vue.js app to an S3 bucket.\n\nSupports:\n\n* Custom AWS regions\n* Support for AWS credential profiles and authentication via AWS environment variables\n* Support for S3 static site hosting\n* Concurrent uploads for improved deploy times\n* CloudFront distribution invalidation\n* Correct `Cache-Control` metadata for use with PWAs and Service Workers\n* GZIP compression\n* Configurable paths for multiple Vue apps in a single bucket\n\nPrerequisites\n---\n\nYou must have a set of [valid AWS credentials set up on your system](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html).\n\nInstallation\n---\n```\nyarn add vue-cli-plugin-s3-deploy\n```\n\nUsage\n---\n\nAfter installation, invoke the plugin with `vue invoke s3-deploy`.\n\nAnswer the configuration prompts. This will inject a `deploy` script command into your `package.json` file.\n\nDeploy your app with `yarn deploy`.\n\nOptions\n---\n\nOptions are set in `vue.config.js` and overridden on a per-environment basis by `.env`, `.env.staging`, `.env.production`, etc.\n\n```js\n{\n    awsProfile: "Specifies the credentials profile to use. For env vars, omit or set to \'default\'. (default: default)",\n    endpoint: "Override the default AWS endpoint with another e.g. DigitalOcean.",\n    region: "AWS region for the specified bucket (default: us-east-1)",\n    bucket: "The S3 bucket name (required)",\n    createBucket: "Create the bucket if it doesn\'t exist (default: false)",\n    staticHosting: "Enable S3 static site hosting (default: false)",\n    staticIndexPage: "Sets the default index file (default: index.html)",\n    staticErrorPage: "Sets the default error file (default: error.html)",\n    assetPath: "The path to the built assets (default: dist)",\n    assetMatch: "Regex matcher for asset to deploy (default: **)"\n    deployPath: "Path to deploy the app in the bucket (default: /)",\n    acl: "Access control list permissions to apply in S3 (default: public-read)",\n    uploadConcurrency: "The number of concurrent uploads to S3 (default: 3)",\n    pwa: "Sets max-age=0 for the PWA-related files specified (default: false)",\n    pwaFiles: "Comma-separated list of files to treat as PWA files",\n    enableCloudfront: "Enables support for Cloudfront distribution invalidation (default: false)",\n    cloudfrontId: "The ID of the distribution to invalidate",\n    cloudfrontMatchers: "A comma-separated list of paths to invalidate (default: /*)",\n    uploadConcurrency: "Number of concurrent uploads (default: 5)",\n    cacheControl: "Sets cache-control metadata for all uploads, overridden for individual files by pwa settings"\n    gzip: "Enables GZIP compression",\n    gzipFilePattern: "Pattern for matching files to be gzipped. (By default: \'**/*.{js,css,json,ico,map,xml,txt,svg,eot,ttf,woff,woff2}\')"\n}\n```\n\nThe `pwa` option is meant to help make deploying progressive web apps a little easier. Due to the way service workers interact with caching, this option alone will tell the browser to not cache the `service-worker.js` file by default. This ensures that changes made to the service worker are reflected as quickly as possible.\n\nYou can specify which files aren\'t cached by setting a value for the `pwaFiles` option:\n\n```js\n{\n    pwaFiles: "index.html,dont-cache.css,not-this.js"\n}\n```\n\nThe `cacheControl` option is intended for deployments with lots of static files and relying on browser or CDN caching.\n\nFor example, you may want to have files default to being cached for 1 day:\n\n```js\n{\n    cacheControl: "max-age=86400"\n}\n```\n\nPer-Environment Overrides\n---\n\nDeployment options can be overridden with .env files to support development, staging, and production deployment environments.\n\nThe .env file options are, with examples:\n\n```sh\nVUE_APP_S3D_AWS_PROFILE=stagingadmin\nVUE_APP_S3D_REGION=staging-aws-east-1\nVUE_APP_S3D_BUCKET=staging-bucket\nVUE_APP_S3D_CREATE_BUCKET=true\nVUE_APP_S3D_UPLOAD_CONCURRENCY=5\n\nVUE_APP_S3D_STATIC_HOSTING=true\nVUE_APP_S3D_STATIC_INDEX_PAGE=index.html\nVUE_APP_S3D_STATIC_ERROR_PAGE=error.html\n\nVUE_APP_S3D_ASSET_PATH=dist/staging\nVUE_APP_S3D_ASSET_MATCH=**\nVUE_APP_S3D_DEPLOY_PATH=/app-staging\nVUE_APP_S3D_ACL=public-read\n\nVUE_APP_S3D_PWA=true\nVUE_APP_S3D_PWA_FILES=service-worker-stage.js,index.html\n\nVUE_APP_S3D_CACHE_CONTROL="max-age=3600"\nVUE_APP_S3D_GZIP=true\nVUE_APP_S3D_GZIP_FILE_PATTERN="**/*.{js,css,json,ico,map,xml,txt,svg,eot,ttf,woff,woff2}"\n\nVUE_APP_S3D_ENABLE_CLOUDFRONT=true\nVUE_APP_S3D_CLOUDFRONT_ID=AIXXXXXXXX\nVUE_APP_S3D_CLOUDFRONT_MATCHERS=/index.html,/styles/*.css,/*.png\n```\n\n**These options OVERRIDE the config options set in vue.config.js** and should be used to customize a default set of options. A common use case is only overriding `VUE_APP_S3D_BUCKET` for production deployment.\n\nSpecifying AWS Credentials\n---\n\nThe AWS SDK will pick up the specified credentials from your `~/.aws/credentials` file and from the environment variables `AWS_ACCESS_KEY_ID`, `AWS_SECRET_ACCESS_KEY`, and `AWS_SESSION_TOKEN`.\n\nTo specify credentials other than `default` in `~/.aws/credentials`, re-run `vue invoke s3-deploy` and select a different profile.\n\n\nChangelog\n---\n\n**3.0.0**\n\n- Added support for S3 static site hosting configuration and setup\n- Corrected some Windows related bugs\n- Added pluginVersion to the configuration. This prompts users to re-invoke the `vue invoke`.\n- Bumped major version due to incompatibilities in the configuration options.\n\n**2.1.1**\n\n- Rollback crendential selection via `awsProfile`. The SDK supports this via the `AWS_PROFILE` environment variable.\n\n**2.1**\n\n- Added `deployPath` option. Allows you to deploy to folder in the bucket, not always to the root. Fixes #15.\n- Added `awsProfile` for using AWS credentials other than `default`. Fixes #19.\n- Fixed #12: paths were built naively and broke deployment on Windows platforms.\n\n**v2.0.2**\n\n- Fixed bug where deployment crashes if you declined Cloudfront on initial invocation.\n\n**v2.0.0**\n- Added support for invalidating Cloudfront distributions on deploy.\n- Refactored how the configuration is stored and brought it more inline with vue cli standards. All config is in vue.config.js now.\n- Updated the dependency on vue-cli to 3.0.0-rc3\n- Squashed a few bugs along the way\n\n**v1.3**\n- Added support for .env files and per-environment options\n\n**v1.2**\n- Added parallel uploading\n\n**v1.1**\n- Initial Release\n\nContributing\n---\n\nClone the repo and install dependencies with `yarn install`.\nRun `yarn watch-test` to start a test runner.\nBuild the dist directory with `yarn build`.\n\nContributions welcome.\nJust open a pull request.\n'