b"# Obevo\n\n[![Documentation abc](https://img.shields.io/badge/Documentation-online-brightgreen.svg)](https://goldmansachs.github.io/obevo/) [![Build Status abc](https://travis-ci.org/goldmansachs/obevo.svg?branch=master)](https://travis-ci.org/goldmansachs/obevo) [![Maven Central](https://maven-badges.herokuapp.com/maven-central/com.goldmansachs.obevo/obevo-parent/badge.svg)](https://maven-badges.herokuapp.com/maven-central/com.goldmansachs.obevo/obevo-parent) [![Releases](https://img.shields.io/github/release/goldmansachs/obevo.svg)](https://github.com/goldmansachs/obevo/releases) [![Apache License](https://img.shields.io/badge/License-Apache%202-blue.svg)](LICENSE.txt)\n\n\n\n## Database Deployment Tool for Enterprise Scale and Complexity\n\nDeploying tables for a new application?\n\nOr looking to improve the DB Deployment of a years-old system with hundreds (or thousands) of tables, views, stored procedures, and other objects?\n\nObevo has your use case covered.\n\nSupported platforms: DB2, H2, HSQLDB, Microsoft SQL Server, MongoDB, Oracle, PostgreSQL, Redshift (from Amazon), Sybase ASE, Sybase IQ\n\n\n## NoSQL (MongoDB) platforms also supported!\n\nObevo can be used for more than just relational databases.\n\nMongoDB support is now being piloted by end-users with version 7.2.0.\n\nThis is the first non-RDBMS platform supported, which shows that the object-based management pattern described\n[here](https://www.infoq.com/articles/Obevo-Introduction) can be applicable elsewhere.\n\nFeel free to reach out to us if you'd like to apply our core algorithm onto a new use case.\n\n## Quick Links\n\n|Getting Started|\n|:---|\n|[Documentation](https://goldmansachs.github.io/obevo/)|\n|[Quickstart Examples](https://github.com/goldmansachs/obevo-kata) (Setup a new database or Onboard an existing database)|\n|[NY JavaSIG Presentation](Obevo_Javasig.pdf)|\n|[InfoQ Publication - Introducing Obevo: Get Your Database SDLC under Control](https://www.infoq.com/articles/Obevo-Introduction)|\n\n|APIs|Build Integration|\n|:---|:---|\n|[Java API](https://goldmansachs.github.io/obevo/java-api.html)|[Maven](https://goldmansachs.github.io/obevo/maven-api.html)|\n|[Command Line API](https://goldmansachs.github.io/obevo/command-line-api.html)|[Gradle](https://goldmansachs.github.io/obevo/gradle-api.html)|\n\nDocker image is available at Docker Hub: [shantstepanian/obevo](https://hub.docker.com/r/shantstepanian/obevo/tags/)\n\n## How to Contribute?\n\nPlease see the [Contribution Guide](CONTRIBUTING.md).\n\n\n## Why Use Obevo?\n\n### Organized maintenance of all your DB object files to handle all use cases\n\nBy allowing your DB files to be maintained per DB object (as you would with classes in application code), db file maintenance\nbecomes much easier compared to DB Deployment tools that require a new file or change definition per migration:\n\n* Changes for a particular table can be reviewed in one place\n* Stateless objects like stored procedures and views can be edited in place without specifying any new incremental change files\n* All of this is possible without having to define the complete order of your file deployments; Obevo figures it out for you (a la a Java compiler compiling classes)\n\n[Click here](https://goldmansachs.github.io/obevo/design-walkthrough.html) for more information on how Obevo works and how its algorithm compares to what most other DB Deployment tools do\n\n![1 file per object structure](obevo-site/src/site/resources/images/db-kata-file-setup.jpg)\n\n\n### In-memory and integration testing\n\nHow do you test your DDLs before deploying to production?\n\nObevo provides utilities and build plugins to clean and rebuild your databases so that you can integrate that step into\nyour integration testing lifecycle.\n\nObevo can take that a step further by converting your DB table and view code into an [in-memory database compatible format](https://goldmansachs.github.io/obevo/in-memory-db-testing.html)\nthat you can use in your tests. The conversion is done at runtime, so you do not have to maintain separate DDLs\njust for in-memory testing\n\n\n### Easy onboarding of existing systems\n\nHesitant about getting your existing database schema under SDLC control due to how objects your application has built up\nover the years? Obevo has been vetted against many such cases from applications in large enterprises.\n\n\n### Versatile to run\n\nObevo can be invoked via:\n* [Java API](https://goldmansachs.github.io/obevo/java-api.html)\n* [Command Line API](https://goldmansachs.github.io/obevo/command-line-api.html)\n* [Maven](https://goldmansachs.github.io/obevo/maven-api.html)\n* [Gradle](https://goldmansachs.github.io/obevo/gradle-api.html)\n\nObevo is designed to allow your DB code to be packaged and deployed alongside your application binaries.\n\nTreat your DB code like you would treat your application code!\n\n\n\n## Acquiring Obevo\n\n* [Versions](https://github.com/goldmansachs/obevo/releases)\n* [Maven Central](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.goldmansachs.obevo%22)\n"