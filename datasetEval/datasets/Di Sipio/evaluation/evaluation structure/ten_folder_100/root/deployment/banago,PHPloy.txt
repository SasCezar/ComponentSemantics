b'# PHPloy\n**Version 4.9.1**\n\nPHPloy is an incremental Git FTP and SFTP deployment tool. By keeping track of the state of the remote server(s) it deploys only the files that were committed since the last deployment. PHPloy supports submodules, sub-submodules, deploying to multiple servers and rollbacks. PHPloy requires **PHP 5.5+** and **Git 1.8+**.\n\n## How it works\n\nPHPloy stores a file called `.revision` on your server. This file contains the hash of the commit that you have deployed to that server. When you run phploy, it downloads that file and compares the commit reference in it with the commit you are trying to deploy to find out which files to upload. PHPloy also stores a `.revision` file for each submodule in your repository.\n\n## Install \n\n### Via Composer\n\nIf you have composer installed in your machine, you can pull PHPloy globally like this:\n\n```bash\ncomposer global require "banago/phploy"\n```\n\nMake sure to place the `$HOME/.composer/vendor/bin` directory (or the [equivalent directory](http://stackoverflow.com/a/40470979/512277) for your OS) \nin your `$PATH` so the PHPloy executable can be located by your system.\n\n### Via Phar Archive\n\nYou can install PHPloy Phar globally, in your `/usr/local/bin` directory or, locally, in your project directory. **Rename** `phploy.phar` to `phploy` for ease of use.\n\n1. **Globally:** Move `phploy` into `/usr/local/bin`. Make it executable by running `sudo chmod +x phploy`.\n2. **Locally** Move `phploy` into your project directory. \n\n## Usage \n\n*When using PHPloy locally, proceed the command with `php `*\n\n1. Run `phploy --init` in the terminal to create the `phploy.ini` file or create one manually.\n2. Run `phploy` in terminal to deploy.\n\nWindows Users: [Installing PHPloy globally on Windows](https://github.com/banago/PHPloy/issues/214)\n\n## phploy.ini\n\nThe `phploy.ini` file holds your project configuration. It should be located in the root directory of the project. `phploy.ini` is never uploaded to server.  Check the sample below for all available options:\n\n```ini\n; This is a sample deploy.ini file. You can specify as many\n; servers as you need and use normal or quickmode configuration.\n;\n; NOTE: If a value in the .ini file contains any non-alphanumeric \n; characters it needs to be enclosed in double-quotes (").\n\n[staging]\n    scheme = sftp\n    user = example\n    ; When connecting via SFTP, you can opt for password-based authentication:\n    pass = password\n    ; Or private key-based authentication:\n    privkey = \'path/to/or/contents/of/privatekey\'\n    host = staging-example.com\n    path = /path/to/installation\n    port = 22\n    ; You can specify a branch to deploy from\n    branch = develop\n    ; File permission set on the uploaded files/directories\n    permissions = 0700\n    ; File permissions set on newly created directories\n    directoryPerm = 0775\n    ; Deploy only this directory as base directory\n    base = \'directory-name/\'\n    ; Files that should be ignored and not uploaded to your server, but still tracked in your repository\n    exclude[] = \'src/*.scss\'\n    exclude[] = \'*.ini\'\n    ; Files that are ignored by Git, but you want to send the the server\n    include[] = \'js/scripts.min.js\'\n    include[] = \'directory-name/\'\n    ; conditional include - if source file has changed, inclue file\n    include[] = \'css/style.min.css:src/style.css\' \n    ; Directories that should be copied after deploy, from->to\n    copy[] = \'public->www\'\n    ; Directories that should be purged before deploy\n    purge-before[] = "dist/"\n    ; Directories that should be purged after deploy\n    purge[] = "cache/"\n    ; Pre- and Post-deploy hooks\n    ; Use "DQOUTE" inside your double-quoted strings to insert a literal double quote\n    ; Use \'QUOTE\' inside your qouted strings to insert a literal quote\n    ; For example pre-deploy[] = \'echo "that\'QUOTE\'s nice"\' to get a literal "that\'s".\n    ; That workaround is based on http://php.net/manual/de/function.parse-ini-file.php#70847\n    pre-deploy[] = "wget http://staging-example.com/pre-deploy/test.php --spider --quiet"\n    post-deploy[] = "wget http://staging-example.com/post-deploy/test.php --spider --quiet"\n    ; Works only via SSH2 connection\n    pre-deploy-remote[] = "touch .maintenance"\n    post-deploy-remote[] = "mv cache cache2"\n    post-deploy-remote[] = "rm .maintenance"\n    ; You can specify a timeout for the underlying connection which might be useful for long running remote \n    ; operations (cache clear, dependency update, etc.)\n    timeout = 60\n\n[production]\n    quickmode = ftp://example:password@production-example.com:21/path/to/installation\n    passive = true\n    ssl = false\n    ; You can specify a branch to deploy from\n    branch = master\n    ; File permission set on the uploaded files/directories\n    permissions = 0774\n    ; File permissions set on newly created directories\n    directoryPerm = 0755\n    ; Files that should be ignored and not uploaded to your server, but still tracked in your repository\n    exclude[] = \'libs/*\'\n    exclude[] = \'config/*\'\n    exclude[] = \'src/*.scss\'\n    ; Files that are ignored by Git, but you want to send the the server\n    include[] = \'js/scripts.min.js\'\n    include[] = \'js/style.min.css\'\n    include[] = \'directory-name/\'\n    purge-before[] = "dist/" \n    purge[] = "cache/" \n    pre-deploy[] = "wget http://staging-example.com/pre-deploy/test.php --spider --quiet"\n    post-deploy[] = "wget http://staging-example.com/post-deploy/test.php --spider --quiet"\n```\n\nIf your password is missing in the `phploy.ini` file or the `PHPLOY_PASS` environment variable, PHPloy will interactively ask you for your password.\nThere is also an option to store the user and password in a file called `.phploy`.\n\n```\n[staging]\n    user="theUser"\n    pass="thePassword"\n    \n[production]\n    user="theUser"\n    pass="thePassword"\n```\n\nThis feature is especially useful if you would like to share your phploy.ini via Git but hide your password from the public.\n\nYou can also use environment variables to deploy without storing your credentials in a file.\nThese variables will be used if they do not exist in the `phploy.ini` file:\n```\nPHPLOY_HOST\nPHPLOY_PORT\nPHPLOY_PASS\nPHPLOY_PATH\nPHPLOY_USER\nPHPLOY_PRIVKEY\n```\n\nThese variables can be used like this;\n```\n$ PHPLOY_PORT="21" PHPLOY_HOST="myftphost.com" PHPLOY_USER="ftp" PHPLOY_PASS="ftp-password" PHPLOY_PATH="/home/user/public_html/example.com" phploy -s servername\n```\n\nOr export them like this, the script will automatically use them:\n```\n$ export PHPLOY_PORT="21"\n$ export PHPLOY_HOST="myftphost.com"\n$ export PHPLOY_USER="ftp"\n$ export PHPLOY_PASS="ftp-password"\n$ export PHPLOY_PATH="/home/user/public_html/example.com"\n$ export PHPLOY_PRIVKEY="path/to/or/contents/of/privatekey"\n$ phploy -s servername\n```\n\n## Multiple servers\n\nPHPloy allows you to configure multiple servers in the deploy file and deploy to any of them with ease. \n\nBy default PHPloy will deploy to *ALL* specified servers.  Alternatively, if an entry named \'default\' exists in your server configuration, PHPloy will default to that server configuration. To specify one single server, run:\n\n    phploy -s servername\n\nor:\n\n    phploy --server servername\n    \n`servername` stands for the name you have given to the server in the `phploy.ini` configuration file.\n\nIf you have a \'default\' server configured, you can specify to deploy to all configured servers by running:\n\n    phploy --all\n\n## Shared configuration (custom defaults)\n\nIf you specify a server configuration named `*`, all options configured in this section will be shared with other \nservers. This basically allows you to inject custom default values.\n\n```ini\n; The special \'*\' configuration is shared between all other configurations (think include)\n[*]\n    exclude[] = \'src/*\'\n    include[] = "dist/app.css"\n\n; As a result both shard1 and shard2 will have the same exclude[] and include[] "default" values\n[shard1]\n    quickmode = ftp://example:password@shard1-example.com:21/path/to/installation\n\n[shard2]\n    quickmode = ftp://example:password@shard2-example.com:21/path/to/installation\n```\n\n## Rollbacks\n\n**Warning: the --rollback option does not currently update your submodules correctly.**\n\nPHPloy allows you to roll back to an earlier version when you need to. Rolling back is very easy. \n\nTo roll back to the previous commit, you just run:\n\n    phploy --rollback\n\nTo roll back to whatever commit you want, you run:\n\n    phploy --rollback commit-hash-goes-here\n\nWhen you run a rollback, the files in your working copy will revert **temporarily** to the version of the rollback you are deploying. When the deployment has finished, everything will go back as it was.\n\nNote that there is not a short version of `--rollback`.\n\n\n## Listing changed files\n\nPHPloy allows you to see what files are going to be uploaded/deleted before you actually push them. Just run: \n\n    phploy -l\n\nOr:\n\n    phploy --list\n\n## Updating or "syncing" the remote revision\n\nIf you want to update the `.revision` file on the server to match your current local revision, run:\n\n    phploy --sync\n\nIf you want to set it to a previous commit revision, just specify the revision like this:\n\n    phploy --sync your-revision-hash-here\n\n## Creating deployment directory on first deploy\n\nIf the deployment directory does not exits, you can instruct PHPloy to create it for you:\n\n    phploy --force\n\n## Manual fresh upload\n\nIf you want to do a fresh upload, even if you have deployed earlier, use the `--fresh` argument like this:\n\n    phploy --fresh\n\n## Submodules\n\nSubmodules are supported, but are turned off by default since you don\'t expect them to change very often and you only update them once in a while. To run a deployment with submodule scanning, add the `--submodules` parameter to the command:\n\n    phploy --submodules\n    \n## Purging\n\nIn many cases, we need to purge the contents of a directory after a deployment. This can be achieved by specifying the directories in `phploy.ini` like this:\n\n    ; relative to the deployment path\n    purge[] = "cache/"\n\nTo purge a directory before deployment, specify the directories in `phploy.ini` like this:\n\n    ; relative to the deployment path\n    purge-before[] = "dist/"\n    \n## Hooks\n\nPHPloy allows you to execute commands before and after the deployment. For example you can use `wget`  call a script on my server to execute a `composer update`.\n\n    ; To execute before deployment\n    pre-deploy[] = "wget http://staging-example.com/pre-deploy/test.php --spider --quiet"\n    ; To execute after deployment\n    post-deploy[] = "wget http://staging-example.com/post-deploy/test.php --spider --quiet"\n\n## Logging\n\nPHPloy supports simple logging of the activity. Logging is saved in a `phploy.log` file in your project in the following format:\n    \n    2016-03-28 08:12:37+02:00 --- INFO: [SHA: 59a387c26641f731df6f0d1098aaa86cd55f4382] Deployment to server: "default" from branch "master". 2 files uploaded; 0 files deleted.\n\nTo turn logging on, add this to `phploy.ini`:\n\n    [production]\n        logger = on\n\n## Contribute\n\nContributions are very welcome; PHPloy is great because of the contributors. Please check out the [issues](https://github.com/banago/PHPloy/issues). \n\n## Credits\n\n * [Baki Goxhaj](https://twitter.com/banago)\n * [Contributors](https://github.com/banago/PHPloy/graphs/contributors?type=a)\n\n## Version history\n\nPlease check [release history](https://github.com/banago/PHPloy/releases) for details.\n\n## License\n\nPHPloy is licensed under the MIT License (MIT).\n'