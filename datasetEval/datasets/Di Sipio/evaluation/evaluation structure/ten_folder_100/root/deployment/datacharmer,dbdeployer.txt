b'[DBdeployer](https://github.com/datacharmer/dbdeployer) is a tool that deploys MySQL database servers easily.\nThis is a port of [MySQL-Sandbox](https://github.com/datacharmer/mysql-sandbox), originally written in Perl, and re-designed from the ground up in [Go](https://golang.org). See the [features comparison](https://github.com/datacharmer/dbdeployer/blob/master/docs/features.md) for more detail.\n\nDocumentation updated for version 1.42.0 (02-Nov-2019 08:44 UTC)\n\n[![Build Status](https://travis-ci.org/datacharmer/dbdeployer.svg "Travis CI status")](https://travis-ci.org/datacharmer/dbdeployer)\n\n# Table of contents\n\n- [Installation](#installation)\n- [Updating dbdeployer](#updating-dbdeployer)\n- [Main operations](#main-operations)\n- [Database server flavors](#database-server-flavors)\n- [Getting remote tarballs](#getting-remote-tarballs)\n  - [Looking at the available tarballs](#looking-at-the-available-tarballs)\n  - [Getting a tarball ](#getting-a-tarball)\n  - [Customizing the tarball list](#customizing-the-tarball-list)\n  - [Changing the tarball list permanently](#changing-the-tarball-list-permanently)\n  - [From remote tarball to ready to use in one step](#from-remote-tarball-to-ready-to-use-in-one-step)\n  - [Guessing the latest MySQL version](#guessing-the-latest-mysql-version)\n- [Practical examples (cookbook)](#practical-examples)\n- [Standard and non-standard basedir names](#standard-and-non-standard-basedir-names)\n- [Using short version numbers](#using-short-version-numbers)\n- [Multiple sandboxes, same version and type](#multiple-sandboxes-same-version-and-type)\n- [Using the direct path to the expanded tarball](#using-the-direct-path-to-the-expanded-tarball)\n- [Ports management](#ports-management)\n- [Concurrent deployment and deletion](#concurrent-deployment-and-deletion)\n- [Replication topologies](#replication-topologies)\n- [Skip server start](#skip-server-start)\n- [MySQL Document store, mysqlsh, and defaults.](#mysql-document-store-mysqlsh-and-defaults)\n- [Installing MySQL shell](#installing-mysql-shell)\n- [Database logs management.](#database-logs-management)\n- [dbdeployer operations logging](#dbdeployer-operations-logging)\n- [Sandbox customization](#sandbox-customization)\n- [Sandbox management](#sandbox-management)\n- [Sandbox macro operations](#sandbox-macro-operations)\n- [Sandbox upgrade](#sandbox-upgrade)\n- [Dedicated admin address](#dedicated-admin-address)\n- [Obtaining sandbox metadata](#obtaining-sandbox-metadata)\n- [Replication between sandboxes](#replication-between-sandboxes)\n- [Importing databases into sandboxes](#importing-databases-into-sandboxes)\n- [Cloning databases](#cloning-databases)\n- [Using dbdeployer in scripts](#using-dbdeployer-in-scripts)\n- [Compiling dbdeployer](#compiling-dbdeployer)\n- [Generating additional documentation](#generating-additional-documentation)\n- [Command line completion](#command-line-completion)\n- [Using dbdeployer source for other projects](#using-dbdeployer-source-for-other-projects)\n- [Exporting dbdeployer structure](#exporting-dbdeployer-structure)\n- [Semantic versioning](#semantic-versioning)\n- [Do not edit](#do-not-edit)\n\n\n# Installation\n\nThe installation is simple, as the only thing you will need is a binary executable for your operating system.\nGet the one for your O.S. from [dbdeployer releases](https://github.com/datacharmer/dbdeployer/releases) and place it in a directory in your $PATH.\n(There are no binaries for Windows. See the [features list](https://github.com/datacharmer/dbdeployer/blob/master/docs/features.md) for more info.)\n\nFor example:\n\n    $ VERSION=1.42.0\n    $ OS=linux\n    $ origin=https://github.com/datacharmer/dbdeployer/releases/download/v$VERSION\n    $ wget $origin/dbdeployer-$VERSION.$OS.tar.gz\n    $ tar -xzf dbdeployer-$VERSION.$OS.tar.gz\n    $ chmod +x dbdeployer-$VERSION.$OS\n    $ sudo mv dbdeployer-$VERSION.$OS /usr/local/bin/dbdeployer\n\nOf course, there are **prerequisites**: your machine must be able to run the MySQL server. Be aware that version 5.5 and higher require some libraries that are not installed by default in all flavors of Linux (libnuma, libaio.)\n\nAs of version 1.40.0, dbdeployer tries to detect whether the host has the necessary libraries installed. When missing libraries are detected, the deployment fails with an error showing the missing pieces.\nFor example:\n\n```\n# dbdeployer deploy single 5.7\n# 5.7 => 5.7.27\nerror while filling the sandbox definition: missing libraries will prevent MySQL from deploying correctly\nclient (/root/opt/mysql/5.7.27/bin/mysql): [\tlibncurses.so.5 => not found \tlibtinfo.so.5 => not found]\n\nserver (/root/opt/mysql/5.7.27/bin/mysqld): [\tlibaio.so.1 => not found \tlibnuma.so.1 => not found]\nglobal: [libaio libnuma]\n\nUse --skip-library-check to skip this check\n```\n\nIf you use `--skip-library-check`, the above check won\'t be performed, and the deployment may fail and leave you with an incomplete sandbox.\nSkipping the check may be justified when deploying a very old version of MySQL (4.1, 5.0, 5.1)\n\n# Updating dbdeployer\n\nStarting with version 1.36.0, dbdeployer is able to update itself by getting the newest release from GitHub.\n\nThe quickest way of doing it is by running \n```\n$ dbdeployer update\n```\n\nThis command will download the latest release of dbdeployer from GitHub, and, if the version of the release is higher than the local one, will overwrite the dbdeployer executable.\n\nYou can get more information during the operation by using the `--verbose` option. Other options are available for advanced users.\n\n    $ dbdeployer update -h\n    Updates dbdeployer in place using the latest version (or one of your choice)\n    \n    Usage:\n      dbdeployer update [version] [flags]\n    \n    Examples:\n    \n    $ dbdeployer update\n    # gets the latest release, overwrites current dbdeployer binaries \n    \n    $ dbdeployer update --dry-run\n    # shows what it will do, but does not do it\n    \n    $ dbdeployer update --new-path=$PWD\n    # downloads the latest executable into the current directory\n    \n    $ dbdeployer update v1.34.0 --force-old-version\n    # downloads dbdeployer 1.34.0 and replace the current one\n    # (WARNING: a version older than 1.36.0 won\'t support updating)\n    \n    \n    Flags:\n          --OS string           Gets the executable for this Operating system\n          --docs                Gets the docs version of the executable\n          --dry-run             Show what would happen, but don\'t execute it\n          --force-old-version   Force download of older version\n      -h, --help                help for update\n          --new-path string     Download updated dbdeployer into a different path\n          --verbose             Gives more info\n    \n    \n\n\nYou can also see the details of a release using `dbdeployer info releases latest`.\n\n\n# Main operations\n\n(See this ASCIIcast for a demo of its operations.)\n[![asciicast](https://asciinema.org/a/165707.png)](https://asciinema.org/a/165707)\n\nWith dbdeployer, you can deploy a single sandbox, or many sandboxes  at once, with or without replication.\n\nThe main command is ``deploy`` with its subcommands ``single``, ``replication``, and ``multiple``, which work with MySQL tarball that have been unpacked into the _sandbox-binary_ directory (by default, $HOME/opt/mysql.)\n\nTo use a tarball, you must first run the ``unpack`` command, which will unpack the tarball into the right directory.\n\nFor example:\n\n    $ dbdeployer unpack mysql-8.0.4-rc-linux-glibc2.12-x86_64.tar.gz\n    Unpacking tarball mysql-8.0.4-rc-linux-glibc2.12-x86_64.tar.gz to $HOME/opt/mysql/8.0.4\n    .........100.........200.........292\n\n    $ dbdeployer deploy single 8.0.4\n    Database installed in $HOME/sandboxes/msb_8_0_4\n    . sandbox server started\n\n\nThe program doesn\'t have any dependencies. Everything is included in the binary. Calling *dbdeployer* without arguments or with ``--help`` will show the main help screen.\n\n    $ dbdeployer --version\n    dbdeployer version 1.42.0\n    \n\n    $ dbdeployer -h\n    dbdeployer makes MySQL server installation an easy task.\n    Runs single, multiple, and replicated sandboxes.\n    \n    Usage:\n      dbdeployer [command]\n    \n    Available Commands:\n      admin           sandbox management tasks\n      cookbook        Shows dbdeployer samples\n      defaults        tasks related to dbdeployer defaults\n      delete          delete an installed sandbox\n      delete-binaries delete an expanded tarball\n      deploy          deploy sandboxes\n      downloads       Manages remote tarballs\n      export          Exports the command structure in JSON format\n      global          Runs a given command in every sandbox\n      help            Help about any command\n      import          imports one or more MySQL servers into a sandbox\n      info            Shows information about dbdeployer environment samples\n      sandboxes       List installed sandboxes\n      unpack          unpack a tarball into the binary directory\n      update          Gets dbdeployer newest version\n      usage           Shows usage of installed sandboxes\n      versions        List available versions\n    \n    Flags:\n          --config string           configuration file (default "$HOME/.dbdeployer/config.json")\n      -h, --help                    help for dbdeployer\n          --sandbox-binary string   Binary repository (default "$HOME/opt/mysql")\n          --sandbox-home string     Sandbox deployment directory (default "$HOME/sandboxes")\n          --shell-path string       Which shell to use for generated scripts (default "/bin/bash")\n          --skip-library-check      Skip check for needed libraries (may cause nasty errors)\n          --version                 version for dbdeployer\n    \n    Use "dbdeployer [command] --help" for more information about a command.\n    \n\nThe flags listed in the main screen can be used with any commands.\nThe flags ``--my-cnf-options`` and ``--init-options`` can be used several times.\n\nIf you don\'t have any tarballs installed in your system, you should first ``unpack`` it (see an example above).\n\n    $ dbdeployer unpack -h\n    If you want to create a sandbox from a tarball (.tar.gz or .tar.xz), you first need to unpack it\n    into the sandbox-binary directory. This command carries out that task, so that afterwards \n    you can call \'deploy single\', \'deploy multiple\', and \'deploy replication\' commands with only \n    the MySQL version for that tarball.\n    If the version is not contained in the tarball name, it should be supplied using --unpack-version.\n    If there is already an expanded tarball with the same version, a new one can be differentiated with --prefix.\n    \n    Usage:\n      dbdeployer unpack MySQL-tarball [flags]\n    \n    Aliases:\n      unpack, extract, untar, unzip, inflate, expand\n    \n    Examples:\n    \n        $ dbdeployer unpack mysql-8.0.4-rc-linux-glibc2.12-x86_64.tar.gz\n        Unpacking tarball mysql-8.0.4-rc-linux-glibc2.12-x86_64.tar.gz to $HOME/opt/mysql/8.0.4\n    \n        $ dbdeployer unpack --prefix=ps Percona-Server-5.7.21-linux.tar.gz\n        Unpacking tarball Percona-Server-5.7.21-linux.tar.gz to $HOME/opt/mysql/ps5.7.21\n    \n        $ dbdeployer unpack --unpack-version=8.0.18 --prefix=bld mysql-mybuild.tar.gz\n        Unpacking tarball mysql-mybuild.tar.gz to $HOME/opt/mysql/bld8.0.18\n    \t\n    \n    Flags:\n          --flavor string           Defines the tarball flavor (MySQL, NDB, Percona Server, etc)\n      -h, --help                    help for unpack\n          --overwrite               Overwrite the destination directory if already exists\n          --prefix string           Prefix for the final expanded directory\n          --shell                   Unpack a shell tarball into the corresponding server directory\n          --target-server string    Uses a different server to unpack a shell tarball\n          --unpack-version string   which version is contained in the tarball\n          --verbosity int           Level of verbosity during unpack (0=none, 2=maximum) (default 1)\n    \n    \n\nThe easiest command is ``deploy single``, which installs a single sandbox.\n\n    $ dbdeployer deploy -h\n    Deploys single, multiple, or replicated sandboxes\n    \n    Usage:\n      dbdeployer deploy [command]\n    \n    Available Commands:\n      multiple    create multiple sandbox\n      replication create replication sandbox\n      single      deploys a single sandbox\n    \n    Flags:\n          --base-port int                 Overrides default base-port (for multiple sandboxes)\n          --base-server-id int            Overrides default server_id (for multiple sandboxes)\n          --binary-version string         Specifies the version when the basedir directory name does not contain it (i.e. it is not x.x.xx)\n          --bind-address string           defines the database bind-address  (default "127.0.0.1")\n          --client-from string            Where to get the client binaries from\n          --concurrent                    Runs multiple sandbox deployments concurrently\n          --custom-mysqld string          Uses an alternative mysqld (must be in the same directory as regular mysqld)\n      -p, --db-password string            database password (default "msandbox")\n      -u, --db-user string                database user (default "msandbox")\n          --defaults stringArray          Change defaults on-the-fly (--defaults=label:value)\n          --disable-mysqlx                Disable MySQLX plugin (8.0.11+)\n          --enable-admin-address          Enables admin address (8.0.14+)\n          --enable-general-log            Enables general log for the sandbox (MySQL 5.1+)\n          --enable-mysqlx                 Enables MySQLX plugin (5.7.12+)\n          --expose-dd-tables              In MySQL 8.0+ shows data dictionary tables\n          --flavor string                 Defines the tarball flavor (MySQL, NDB, Percona Server, etc)\n          --flavor-in-prompt              Add flavor values to prompt\n          --force                         If a destination sandbox already exists, it will be overwritten\n          --gtid                          enables GTID\n      -h, --help                          help for deploy\n          --history-dir string            Where to store mysql client history (default: in sandbox directory)\n          --init-general-log              uses general log during initialization (MySQL 5.1+)\n      -i, --init-options stringArray      mysqld options to run during initialization\n          --keep-server-uuid              Does not change the server UUID\n          --log-directory string          Where to store dbdeployer logs (default "$HOME/sandboxes/logs")\n          --log-sb-operations             Logs sandbox operations to a file\n          --my-cnf-file string            Alternative source file for my.sandbox.cnf\n      -c, --my-cnf-options stringArray    mysqld options to add to my.sandbox.cnf\n          --native-auth-plugin            in 8.0.4+, uses the native password auth plugin\n          --port int                      Overrides default port\n          --port-as-server-id             Use the port number as server ID\n          --post-grants-sql stringArray   SQL queries to run after loading grants\n          --post-grants-sql-file string   SQL file to run after loading grants\n          --pre-grants-sql stringArray    SQL queries to run before loading grants\n          --pre-grants-sql-file string    SQL file to run before loading grants\n          --remote-access string          defines the database access  (default "127.%")\n          --repl-crash-safe               enables Replication crash safe\n          --rpl-password string           replication password (default "rsandbox")\n          --rpl-user string               replication user (default "rsandbox")\n          --sandbox-directory string      Changes the default sandbox directory\n          --skip-load-grants              Does not load the grants\n          --skip-report-host              Does not include report host in my.sandbox.cnf\n          --skip-report-port              Does not include report port in my.sandbox.cnf\n          --skip-start                    Does not start the database server\n          --socket-in-datadir             Create socket in datadir instead of $TMPDIR\n          --use-template stringArray      [template_name:file_name] Replace existing template with one from file\n    \n    \n\n    $ dbdeployer deploy single -h\n    single installs a sandbox and creates useful scripts for its use.\n    MySQL-Version is in the format x.x.xx, and it refers to a directory named after the version\n    containing an unpacked tarball. The place where these directories are found is defined by \n    --sandbox-binary (default: $HOME/opt/mysql.)\n    For example:\n    \tdbdeployer deploy single 5.7     # deploys the latest release of 5.7.x\n    \tdbdeployer deploy single 5.7.21  # deploys a specific release\n    \tdbdeployer deploy single /path/to/5.7.21  # deploys a specific release in a given path\n    \n    For this command to work, there must be a directory $HOME/opt/mysql/5.7.21, containing\n    the binary files from mysql-5.7.21-$YOUR_OS-x86_64.tar.gz\n    Use the "unpack" command to get the tarball into the right directory.\n    \n    Usage:\n      dbdeployer deploy single MySQL-Version [flags]\n    \n    Flags:\n      -h, --help            help for single\n          --master          Make the server replication ready\n          --prompt string   Default prompt for the single client (default "mysql")\n          --server-id int   Overwrite default server-id\n    \n    \n\nIf you want more than one sandbox of the same version, without any replication relationship, use the ``deploy multiple`` command with an optional ``--nodes`` flag (default: 3).\n\n    $ dbdeployer deploy multiple -h\n    Creates several sandboxes of the same version,\n    without any replication relationship.\n    For this command to work, there must be a directory $HOME/opt/mysql/5.7.21, containing\n    the binary files from mysql-5.7.21-$YOUR_OS-x86_64.tar.gz\n    Use the "unpack" command to get the tarball into the right directory.\n    \n    Usage:\n      dbdeployer deploy multiple MySQL-Version [flags]\n    \n    Examples:\n    \n    \t$ dbdeployer deploy multiple 5.7.21\n    \t\n    \n    Flags:\n      -h, --help        help for multiple\n      -n, --nodes int   How many nodes will be installed (default 3)\n    \n    \n\nThe ``deploy replication`` command will install a master and two or more slaves, with replication started. You can change the topology to *group* and get three nodes in peer replication, or compose multi-source topologies with *all-masters* or *fan-in*.\n\n    $ dbdeployer deploy replication -h\n    The replication command allows you to deploy several nodes in replication.\n    Allowed topologies are "master-slave" for all versions, and  "group", "all-masters", "fan-in"\n    for  5.7.17+.\n    Topologies "pcx" and "ndb" are available for binaries of type Percona Xtradb Cluster and MySQL Cluster.\n    For this command to work, there must be a directory $HOME/opt/mysql/5.7.21, containing\n    the binary files from mysql-5.7.21-$YOUR_OS-x86_64.tar.gz\n    Use the "unpack" command to get the tarball into the right directory.\n    \n    Usage:\n      dbdeployer deploy replication MySQL-Version [flags]\n    \n    Examples:\n    \n    \t\t$ dbdeployer deploy replication 5.7    # deploys highest revision for 5.7\n    \t\t$ dbdeployer deploy replication 5.7.21 # deploys a specific revision\n    \t\t$ dbdeployer deploy replication /path/to/5.7.21 # deploys a specific revision in a given path\n    \t\t# (implies topology = master-slave)\n    \n    \t\t$ dbdeployer deploy --topology=master-slave replication 5.7\n    \t\t# (explicitly setting topology)\n    \n    \t\t$ dbdeployer deploy --topology=group replication 5.7\n    \t\t$ dbdeployer deploy --topology=group replication 8.0 --single-primary\n    \t\t$ dbdeployer deploy --topology=all-masters replication 5.7\n    \t\t$ dbdeployer deploy --topology=fan-in replication 5.7\n    \t\t$ dbdeployer deploy --topology=pxc replication pxc5.7.25\n    \t\t$ dbdeployer deploy --topology=ndb replication ndb8.0.14\n    \t\n    \n    Flags:\n      -h, --help                     help for replication\n          --master-ip string         Which IP the slaves will connect to (default "127.0.0.1")\n          --master-list string       Which nodes are masters in a multi-source deployment\n          --ndb-nodes int            How many NDB nodes will be installed (default 3)\n      -n, --nodes int                How many nodes will be installed (default 3)\n          --read-only-slaves         Set read-only for slaves\n          --repl-history-dir         uses the replication directory to store mysql client history\n          --semi-sync                Use semi-synchronous plugin\n          --single-primary           Using single primary for group replication\n          --slave-list string        Which nodes are slaves in a multi-source deployment\n          --super-read-only-slaves   Set super-read-only for slaves\n      -t, --topology string          Which topology will be installed (default "master-slave")\n    \n    \n\nAs of version 1.21.0, you can use Percona Xtradb Cluster tarballs to deploy replication of type *pxc*. This deployment only works on Linux.\n\n# Database server flavors\n\nBefore version 1.19.0, dbdeployer assumed that it was dealing to some version of MySQL, using the version to decide which features it would support. In version 1.19.0 dbdeployer started using the concept of **capabilities**, which is a combination of server **flavor** + a version. Some flavors currently supported are\n\n* `mysql` : the classic MySQL server\n* `percona` : Percona Server, any version. For the purposes of deployment, it has the same capabilities as MySQL\n* `mariadb`: MariaDB server. Mostly the same as MySQL, but with differences in deployment methods.\n* `pxc`: Percona Xtradb Cluster\n* `ndb`: MySQL Cluster (NDB)\n* `tidb`: A stand-alone TiDB server.\n\nTo see what every flavor can do, you can use the command `dbdeployer admin capabilities`.\n\nTo see the features of a given flavor: `dbdeployer admin capabilities FLAVOR`.\n\nAnd to see what a given version of a flavor can do, you can use `dbdeployer admin capabilities FLAVOR VERSION`.\n\nFor example\n\n```shell\n$ dbdeployer admin capabilities\n\n$ dbdeployer admin capabilities percona\n\n$ dbdeployer admin capabilities mysql 5.7.11\n$ dbdeployer admin capabilities mysql 5.7.13\n```\n\n# Getting remote tarballs\n\n**NOTE:** As of version 1.31.0, `dbdeployer remote` is **DEPRECATED** and its functionality is replaced by `dbdeployer downloads`.\n\nAs of version 1.31.0, dbdeployer can download remote tarballs of various flavors from several locations. Tarballs are listed for Linux and MacOS.\n\n## Looking at the available tarballs\n\n```\n$ dbdeployer downloads list\nAvailable tarballs\n                          name                              OS     version   flavor     size   minimal\n-------------------------------------------------------- -------- --------- -------- -------- ---------\n tidb-master-darwin-amd64.tar.gz                          Darwin     3.0.0   tidb      26 MB\n tidb-master-linux-amd64.tar.gz                           Linux      3.0.0   tidb      26 MB\n mysql-5.7.26-macos10.14-x86_64.tar.gz                    Darwin    5.7.26   mysql    337 MB\n mysql-8.0.16-macos10.14-x86_64.tar.gz                    Darwin    8.0.16   mysql    153 MB\n mysql-8.0.15-macos10.14-x86_64.tar.gz                    Darwin    8.0.15   mysql    139 MB\n mysql-5.7.25-macos10.14-x86_64.tar.gz                    Darwin    5.7.25   mysql    337 MB\n mysql-5.6.41-macos10.13-x86_64.tar.gz                    Darwin    5.6.41   mysql    176 MB\n mysql-5.5.53-osx10.9-x86_64.tar.gz                       Darwin    5.5.53   mysql    114 MB\n mysql-5.1.73-osx10.6-x86_64.tar.gz                       Darwin    5.1.73   mysql     82 MB\n mysql-5.0.96-osx10.5-x86_64.tar.gz                       Darwin    5.0.96   mysql     61 MB\n mysql-8.0.16-linux-glibc2.12-x86_64.tar.xz               Linux     8.0.16   mysql    461 MB\n mysql-8.0.16-linux-x86_64-minimal.tar.xz                 Linux     8.0.16   mysql     44 MB   Y\n[...]\n```\nThe list is kept internally by dbdeployer, but it can be exported, edited, and reloaded (more on that later).\n\n\n## Getting a tarball\n\nWe can download one of the listed tarballs in two ways:\n\n* using `dbdeployer downloads get file_name`, where we copy and paste the file name from the list above. For example: `dbdeployer downloads get mysql-8.0.16-linux-glibc2.12-x86_64.tar.xz`.\n* using `dbdeployer downloads get-by-version VERSION [options]` where we use several criteria to identify the file we want.\n\nFor example:\n\n```\n$ dbdeployer downloads get-by-version 5.7 --newest --dry-run\nWould download:\n\nName:          mysql-5.7.26-macos10.14-x86_64.tar.gz\nShort version: 5.7\nVersion:       5.7.26\nFlavor:        mysql\nOS:            Darwin\nURL:           https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.26-macos10.14-x86_64.tar.gz\nChecksum:      SHA512:ae84b0cfe3cf274fc79adb3db03b764d47033aea970cc26edcdd4adbe5b2e3d28bf4f98f2ee321f16e788d69cbe3a08bf39fa5329d8d7a67bee928d964891ed8\nSize:          337 MB\n\n$ dbdeployer downloads get-by-version 8.0 --newest --dry-run\nWould download:\n\nName:          mysql-8.0.16-macos10.14-x86_64.tar.gz\nShort version: 8.0\nVersion:       8.0.16\nFlavor:        mysql\nOS:            Darwin\nURL:           https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-8.0.16-macos10.14-x86_64.tar.gz\nChecksum:      SHA512:30fb86c929ad1f384622277dbc3d686f5530953a8f7e2c7adeb183768db69464e93a46b4a0ec212d006e069f1b93db0bd0a51918eaa7e3697ea227d86082d892\nSize:          153 MB\n```\nThe above commands, executed on MacOS, look for tarballs for the current operating system, and gets the one with the highest version. Notice the option `--dry-run`, which shows what would be downloaded, but without actually doing it.\n\nIf there are multiple files that match the search criteria, dbdeployer returns an error.\n```\n$ dbdeployer downloads get-by-version 8.0 --newest --OS=linux --dry-run\ntarballs mysql-8.0.16-linux-x86_64-minimal.tar.xz and mysql-8.0.16-linux-glibc2.12-x86_64.tar.xz have the same version - Get the one you want by name\n```\n\nIn this case, we can fix the error by adding another parameter:\n\n```\n$ dbdeployer downloads get-by-version 8.0 --newest --OS=linux  --minimal --dry-run\nWould download:\n\nName:          mysql-8.0.16-linux-x86_64-minimal.tar.xz\nShort version: 8.0\nVersion:       8.0.16\nFlavor:        mysql\nOS:            Linux\nURL:           https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-8.0.16-linux-x86_64-minimal.tar.xz\nChecksum:      MD5: 7bac88f47e648bf9a38e7886e12d1ec5\nSize:          44 MB\n\n# On Linux\n\n$ dbdeployer downloads get-by-version 8.0 --newest --OS=linux  --minimal\n....  44 MB\nFile /home/gmax/tmp/mysql-8.0.16-linux-x86_64-minimal.tar.xz downloaded\nChecksum matches\n```\n\nIf we download a tarball that is not intended for the current operating system, we will get a warning:\n\n```\n# On MacOS\n$ dbdeployer downloads get-by-version 8.0 --newest --OS=linux  --minimal\n....  44 MB\nFile /Users/gmax/go/src/github.com/datacharmer/dbd-ui/mysql-8.0.16-linux-x86_64-minimal.tar.xz downloaded\nChecksum matches\n################################################################################\nWARNING: Current OS is darwin, but the tarball\'s OS is linux\n################################################################################\n```\n\nWe can also add the tarball flavor to get yet a different result from the above criteria:\n\n```\n$ dbdeployer downloads get-by-version 8.0 --newest   --flavor=ndb --dry-run\nWould download:\n\nName:          mysql-cluster-8.0.16-dmr-linux-glibc2.12-x86_64.tar.gz\nShort version: 8.0\nVersion:       8.0.16\nFlavor:        ndb\nOS:            Linux\nURL:           https://dev.mysql.com/get/Downloads/MySQL-Cluster-8.0/mysql-cluster-8.0.16-dmr-linux-glibc2.12-x86_64.tar.gz\nChecksum:      SHA512:a587a774cc7a8f6cbe295272f0e67869c5077b8fb56917e0dc2fa0ea1c91548c44bd406fcf900cc0e498f31bb7188197a3392aa0d7df8a08fa5e43901683e98a\nSize:          1.1 GB\n```\n\n    $ dbdeployer downloads get --help\n    Downloads a remote tarball\n    \n    Usage:\n      dbdeployer downloads get tarball_name [options] [flags]\n    \n    Flags:\n          --dry-run             Show what would be downloaded, but don\'t run it\n      -h, --help                help for get\n          --progress-step int   Progress interval (default 10485760)\n          --quiet               Do not show download progress\n    \n    \n    $ dbdeployer downloads get-by-flavor --help\n    Manages remote tarballs\n    \n    Usage:\n      dbdeployer downloads [command]\n    \n    Available Commands:\n      export         Exports the list of tarballs to a file\n      get            Downloads a remote tarball\n      get-by-version Downloads a remote tarball\n      get-unpack     Downloads and unpacks a remote tarball\n      import         Imports the list of tarballs from a file or URL\n      list           list remote tarballs\n      reset          Reset the custom list of tarballs and resume the defaults\n      show           Downloads a remote tarball\n    \n    Flags:\n      -h, --help   help for downloads\n    \n    \n\n\n## Customizing the tarball list\n\nThe tarball list is embedded in dbdeployer, but it can be modified with a few steps:\n\n1. Run `dbdeployer downloads export mylist.json --add-empty-item`\n2. Edit `mylist.json`, by filling the fields left empty:\n\n```\n        {\n            "name": "mysql-cluster-8.0.16-dmr-linux-glibc2.12-x86_64.tar.gz",\n            "checksum": "SHA512:a587a774cc7a8f6cbe295272f0e67869c5077b8fb56917e0dc2fa0ea1c91548c44bd406fcf900cc0e498f31bb7188197a3392aa0d7df8a08fa5e43901683e98a",\n            "OS": "Linux",\n            "url": "https://dev.mysql.com/get/Downloads/MySQL-Cluster-8.0/mysql-cluster-8.0.16-dmr-linux-glibc2.12-x86_64.tar.gz",\n            "flavor": "ndb",\n            "minimal": false,\n            "size": 1100516061,\n            "short_version": "8.0",\n            "version": "8.0.16"\n        },\n        {\n            "name": "FillIt",\n            "OS": "",\n            "url": "",\n            "flavor": "",\n            "minimal": false,\n            "size": 0,\n            "short_version": "",\n            "version": "",\n            "updated_by": "Fill it",\n            "notes": "Fill it"\n        }\n```\n\n3. Run `dbdeployer downloads import mylist.json`\n\nThe file will be saved into dbdeployer custom directory (`$HOME/.dbdeployer`), but only if the file validates , but only if the file validates \nIf not, an error message will show what changes are needed.\n\nIf you don\'t need the customized list any longer, you can remove it using `dbdeployer downloads reset`: the custom file will be removed from dbdeployer directory and the embedded one will be used again.\n\n## Changing the tarball list permanently\n\nAdding tarballs to a personal list could be time consuming, if you need to do it often. A better way is to clone this repository, then modify the [original list](https://github.com/datacharmer/dbdeployer/blob/master/downloads/tarball_list.json), and then open a pull request with the changes. The list is used when building dbdeployer, as the contents of the JSON file are converted into an internal list.\n\nWhen entering a new tarball, it is important to fill all the details needed to identify the download. The checksum field is very important. as it is what makes sure that the file downloaded is really the original one.\n\ndbdeployer can calculate checksums for `MD5` (currently used in MySQL downloads pages), `SHA512` (used in most of the downloads listed in version 1.31.0), as well as `SHA1` and `SHA256`. To communicate which checksum is being used, the checksum string must be prefixed by the algorithm, such as `MD5:7bac88f47e648bf9a38e7886e12d1ec5`. An optional space before and after the colon (`:`) is accepted.\n\n## From remote tarball to ready to use in one step\n\ndbdeployer 1.33.0 adds a command `dbdeployer downloads get-unpack tarball_name` which combines the effects of `dbdeployer get tarball_name` followed by `dbdeployer unpack tarball_name`. This command accepts all options defined for `unpack`, so that you can optionally indicate the tarball flavor and version, whether to overwrite it, and if you want to delete the tarball after the operation.\n\n```\n$ dbdeployer downloads get-unpack \\\n   mysql-8.0.16-linux-x86_64-minimal.tar.xz \\\n   --overwrite \\\n   --delete-after-unpack\nDownloading mysql-8.0.16-linux-x86_64-minimal.tar.xz\n....  44 MB\nFile mysql-8.0.16-linux-x86_64-minimal.tar.xz downloaded\nChecksum matches\nUnpacking tarball mysql-8.0.16-linux-x86_64-minimal.tar.xz to $HOME/opt/mysql/8.0.16\n.........100.........200.219\nRenaming directory $HOME/opt/mysql/mysql-8.0.16-linux-x86_64-minimal to $HOME/opt/mysql/8.0.16\n\n$ dbdeployer downloads get-unpack \\\n  mysql-cluster-8.0.16-dmr-linux-glibc2.12-x86_64.tar.gz \\\n  --flavor=ndb \\\n  --prefix=ndb \\\n  --overwrite \\\n  --delete-after-unpack\nDownloading mysql-cluster-8.0.16-dmr-linux-glibc2.12-x86_64.tar.gz\n.........105 MB.........210 MB.........315 MB.........419 MB.........524 MB\n.........629 MB.........734 MB.........839 MB.........944 MB.........1.0 GB....  1.1 GB\nFile mysql-cluster-8.0.16-dmr-linux-glibc2.12-x86_64.tar.gz downloaded\nChecksum matches\nUnpacking tarball mysql-cluster-8.0.16-dmr-linux-glibc2.12-x86_64.tar.gz to $HOME/opt/mysql/ndb8.0.16\n[...]\nRenaming directory $HOME/opt/mysql/mysql-cluster-8.0.16-dmr-linux-glibc2.12-x86_64 to $HOME/opt/mysql/ndb8.0.16\n```\n\n## Guessing the latest MySQL version\n\nIf you know that a new version of MySQL is available, but you don\'t have such version in the downloads list, you can try a shortcut with the command `dbdeployer downloads get-by-version 8.0 --guess-latest`\n(Available in version 1.41.0)\n\nWhen you use `--guess-latest`, dbdeployer looks for the latest download available in the list, increases the version by 1, and tries to get the tarball from MySQL downloads page.\n\nFor example, if the latest version in the tarballs list is `8.0.21`, and you know that 8.0.22 has just been released, you can run the command\n\n```\n$ dbdeployer downloads get-by-version --guess-latest 8.0 --dry-run\nWould download:\n\nName:          mysql-8.0.22-macos10.14-x86_64.tar.gz\nShort version: 8.0\nVersion:       8.0.22\nFlavor:        mysql\nOS:            darwin\nURL:           https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-8.0.22-macos10.14-x86_64.tar.gz\nChecksum:\nSize:          0 B\nNotes:         guessed\n```\n\nWhithout `--dry-run`, it would attempt downloading MySQL 8.0.22. If the download is not available, you will get an error:\n\n```\n$ dbdeployer downloads get-by-version --guess-latest 8.0\nGuessed mysql-8.0.22-macos10.14-x86_64.tar.gz file not ready for download\n```\n\nBeware: when the download happens, there is no checksum to perform. Use this feature with caution.\n\n```\n$ dbdeployer downloads get-by-version --guess-latest 8.0\nDownloading mysql-8.0.22-macos10.14-x86_64.tar.gz\n.........105 MB.....  166 MB\nFile $PWD/mysql-8.0.22-macos10.14-x86_64.tar.gz downloaded\nNo checksum to compare\n```\n\n# Practical examples\n\nSeveral examples of dbdeployer usages are avaibale with the command ``dbdeployer cookbook``\n\n\n    $ dbdeployer cookbook list\n    .----------------------------------.-------------------------------------.---------------------------------------------------------------------------------------.--------.\n    |              recipe              |             script name             |                                      description                                      | needed |\n    |                                  |                                     |                                                                                       | flavor |\n    +----------------------------------+-------------------------------------+---------------------------------------------------------------------------------------+--------+\n    | admin                            | admin-single.sh                     | Single sandbox with admin address enabled                                             | mysql  |\n    | all-masters                      | all-masters-deployment.sh           | Creation of an all-masters replication sandbox                                        | mysql  |\n    | circular_replication             | circular-replication.sh             | Shows how to run replication between nodes of a multiple deployment                   | -      |\n    | custom-named-replication         | custom-named-replication.sh         | Replication sandbox with custom names for directories and scripts                     | -      |\n    | delete                           | delete-sandboxes.sh                 | Delete all deployed sandboxes                                                         | -      |\n    | fan-in                           | fan-in-deployment.sh                | Creation of a fan-in (many masters, one slave) replication sandbox                    | mysql  |\n    | group-multi                      | group-multi-primary-deployment.sh   | Creation of a multi-primary group replication sandbox                                 | mysql  |\n    | group-single                     | group-single-primary-deployment.sh  | Creation of a single-primary group replication sandbox                                | mysql  |\n    | master-slave                     | master-slave-deployment.sh          | Creation of a master/slave replication sandbox                                        | -      |\n    | ndb                              | ndb-deployment.sh                   | Shows deployment with ndb                                                             | ndb    |\n    | prerequisites                    | prerequisites.sh                    | Shows dbdeployer prerequisites and how to make them                                   | -      |\n    | pxc                              | pxc-deployment.sh                   | Shows deployment with pxc                                                             | pxc    |\n    | remote                           | remote.sh                           | Shows how to get a remote MySQL tarball                                               | -      |\n    | replication-operations           | repl-operations.sh                  | Show how to run operations in a replication sandbox                                   | -      |\n    | replication-restart              | repl-operations-restart.sh          | Show how to restart sandboxes with custom options                                     | -      |\n    | replication_between_groups       | replication-between-groups.sh       | Shows how to run replication between two group replications                           | mysql  |\n    | replication_between_master_slave | replication-between-master-slave.sh | Shows how to run replication between two master/slave replications                    | -      |\n    | replication_between_ndb          | replication-between-ndb.sh          | Shows how to run replication between two NDB clusters                                 | ndb    |\n    | replication_between_single       | replication-between-single.sh       | Shows how to run replication between two single sandboxes                             | -      |\n    | replication_group_master_slave   | replication-group-master-slave.sh   | Shows how to run replication between a group replication and master/slave replication | mysql  |\n    | replication_group_single         | replication-group-single.sh         | Shows how to run replication between a group replication and a single sandbox         | mysql  |\n    | replication_master_slave_group   | replication-master-slave-group.sh   | Shows how to run replication between master/slave replication and group replication   | mysql  |\n    | replication_multi_versions       | replication-multi-versions.sh       | Shows how to run replication between different MySQL versions                         | -      |\n    | replication_single_group         | replication-single-group.sh         | Shows how to run replication between a single sandbox an group replication            | mysql  |\n    | show                             | show-sandboxes.sh                   | Show deployed sandboxes                                                               | -      |\n    | single                           | single-deployment.sh                | Creation of a single sandbox                                                          | -      |\n    | single-reinstall                 | single-reinstall.sh                 | Re-installs a single sandbox                                                          | -      |\n    | skip-start-replication           | skip-start-replication.sh           | Replication sandbox deployed without starting the servers                             | -      |\n    | skip-start-single                | skip-start-single.sh                | Single sandbox deployed without starting the server                                   | -      |\n    | tidb                             | tidb-deployment.sh                  | Shows deployment and some operations with TiDB                                        | tidb   |\n    | upgrade                          | upgrade.sh                          | Shows a complete upgrade example from 5.5 to 8.0                                      | mysql  |\n    \'----------------------------------\'-------------------------------------\'---------------------------------------------------------------------------------------\'--------\'\n    \n\nUsing this command, dbdeployer can produce sample scripts for common operations.\n\nFor example `dbdeployer cookbook create single` will create the directory `./recipes` containing the script `single-deployment.sh`, using the versions available in your machine. If no versions are found, the script `prerequisites.sh` will show which steps to take.\n\n`dbdeployer cookbook create ALL` will create all the recipe scripts .\n\nThe scripts in the `./recipes` directory show some of the most interesting ways of using dbdeployer.\n\nEach `*deployment*` or `*operations*` script runs with this syntax:\n\n```bash\n./recipes/script_name.sh [version]\n```\n\nwhere `version` is `5.7.23`, or `8.0.12`, or `ndb7.6.9`, or any other recent version of MySQL. For this to work, you ned to have unpacked the tarball binaries for the corresponding version. \nSee `./recipes/prerequisites.sh` for practical steps.\n\nYou can run the same command several times, provided that you use a different version at every call.\n\n```bash\n./recipes/single-deployment.sh 5.7.24\n./recipes/single-deployment.sh 8.0.13\n```\n\n`./recipes/upgrade.sh` is a complete example of upgrade operations. It runs an upgrade from 5.5 to 5.6, then the upgraded database is upgraded to 5.7, and finally to 8.0. Along the way, each database writes to the same table, so that you can see the effects of the upgrade.\nHere\'s an example.\n```\n+----+-----------+------------+----------+---------------------+\n| id | server_id | vers       | urole    | ts                  |\n+----+-----------+------------+----------+---------------------+\n|  1 |      5553 | 5.5.53-log | original | 2019-03-22 07:48:46 |\n|  2 |      5641 | 5.6.41-log | upgraded | 2019-03-22 07:48:54 |\n|  3 |      5641 | 5.6.41-log | original | 2019-03-22 07:48:59 |\n|  4 |      5725 | 5.7.25-log | upgraded | 2019-03-22 07:49:09 |\n|  5 |      5725 | 5.7.25-log | original | 2019-03-22 07:49:14 |\n|  6 |      8015 | 8.0.15     | upgraded | 2019-03-22 07:49:25 |\n+----+-----------+------------+----------+---------------------+\n```\ndbdeployer will detect the latest versions available in you system. If you don\'t have all the versions mentioned here, you should edit the script and use only the ones you want (such as 5.7.25 and 8.0.15).\n\n    $ dbdeployer cookbook\n    Shows practical examples of dbdeployer usages, by creating usage scripts.\n    \n    Usage:\n      dbdeployer cookbook [command]\n    \n    Aliases:\n      cookbook, recipes, samples\n    \n    Available Commands:\n      create      creates a script for a given recipe\n      list        Shows available dbdeployer samples\n      show        Shows the contents of a given recipe\n    \n    Flags:\n          --flavor string   For which flavor this recipe is\n      -h, --help            help for cookbook\n    \n    \n\n# Standard and non-standard basedir names\n\ndbdeployer expects to get the binaries from ``$HOME/opt/mysql/x.x.xx``. For example, when you run the command ``dbdeployer deploy single 8.0.11``, you must have the binaries for MySQL 8.0.11 expanded into a directory named ``$HOME/opt/mysql/8.0.11``.\n\nIf you want to keep several directories with the same version, you can differentiate them using a **prefix**:\n\n    $HOME/opt/mysql/\n                8.0.11\n                lab_8.0.11\n                ps_8.0.11\n                myown_8.0.11\n\nIn the above cases, running ``dbdeployer deploy single lab_8.0.11`` will do what you expect, i.e. dbdeployer will use the binaries in ``lab_8.0.11`` and recognize ``8.0.11`` as the version for the database.\n\nWhen the extracted tarball directory name that you want to use doesn\'t contain the full version number (such as ``/home/dbuser/build/path/5.7-extra``) you need to provide the version using the option ``--binary-version``. For example:\n\n    dbdeployer deploy single 5.7-extra \\\n        --sandbox-binary=/home/dbuser/build/path \\\n        --binary-version=5.7.22\n\nIn the above command, ``--sandbox-binary`` indicates where to search for the binaries, ``5.7-extra`` is where the binaries are, and ``--binary-version`` indicates which version should be used.\n\nJust to be clear, dbdeployer will recognize the directory as containing a version if it is only "x.x.x" or if it **ends** with "x.x.x" (as in ``lab_8.0.11``.)\n\n# Using short version numbers\n\nYou can use, instead of a full version number (e.g. ``8.0.11``,) a short one, such as ``8.0``. This shortcut works starting with version 1.6.0.\nWhen you invoke dbdeployer with a short number, it will look for the highest revision number within that version, and use it for deployment.\n\nFor example, if your sandbox binary directory contains the following:\n\n    5.7.19    5.7.20    5.7.22    8.0.1    8.0.11    8.0.4\n\nYou can issue the command ``dbdeployer deploy single 8.0``, and it will use 8.0.11 for a single deployment. Or ``dbdeployer deploy replication 5.7`` and it will result in a replication system using 5.7.22 (the latest one.)\n\n\n# Multiple sandboxes, same version and type\n\nIf you want to deploy several instances of the same version and the same type (for example two single sandboxes of 8.0.4, or two replication instances with different settings) you can specify the data directory name and the ports manually.\n\n    $ dbdeployer deploy single 8.0.4\n    # will deploy in msb_8_0_4 using port 8004\n\n    $ dbdeployer deploy single 8.0.4 --sandbox-directory=msb2_8_0_4\n    # will deploy in msb2_8_0_4 using port 8005 (which dbdeployer detects and uses)\n\n    $ dbdeployer deploy replication 8.0.4 --concurrent\n    # will deploy replication in rsandbox_8_0_4 using default calculated ports 19009, 19010, 19011\n\n    $ dbdeployer deploy replication 8.0.4 \\\n        --gtid \\\n        --sandbox-directory=rsandbox2_8_0_4 \\\n        --base-port=18600 --concurrent\n    # will deploy replication in rsandbox2_8_0_4 using ports 18601, 18602, 18603\n\n# Using the direct path to the expanded tarball\n\nIf you have a custom organization of expanded tarballs, you may want to use the direct path to the binaries, instead of a combination of ``--sandbox-binary`` and the version name.\n\nFor example, let\'s assume your binaries are organized as follows:\n\n    $HOME/opt/\n             /percona/\n                     /5.7.21\n                     /5.7.22\n                     /8.0.11\n            /mysql/\n                  /5.7.21\n                  /5.7.22\n                  /8.0.11\n\nYou can deploy a single sandbox for a Percona server version 5.7.22 using any of the following approaches:\n\n    #1\n    dbdeployer deploy single --sandbox-binary=$HOME/opt/percona 5.7.22\n\n    #2\n    dbdeployer deploy single $HOME/opt/percona/5.7.22\n\n    #3\n    dbdeployer defaults update sandbox-binary $HOME/opt/percona\n    dbdeployer deploy single 5.7.22\n\n    #4\n    export SANDBOX_BINARY=$HOME/opt/percona\n    dbdeployer deploy single 5.7.22\n\nMethods #1 and #2 are equivalent. They set the sandbox binary directory temporarily to a new one, and use it for the current deployement\n\nMethods #3 and #4  will set the sandbox binary directory permanently, with the difference that #3 is set for any invocation of dbdeployer system-wide (in a different terminal window, it will use the new value,) while #4 is set only for the current session (in a different terminal window, it will still use the default.)\n\nBe aware that, using this kind of organization may see conflicts during deployment. For example, after installing Percona Server 5.7.22, if you want to install MySQL 5.7.22 you will need to specify a ``--sandbox-directory`` explicitly.\nInstead, if you use the prefix approach defined in the "standard and non-standard basedir names," conflicts should be avoided.\n\n# Ports management\n\ndbdeployer will try using the default port for each sandbox whenever possible. For single sandboxes, the port will be the version number without dots: 5.7.22 will deploy on port 5722. For multiple sandboxes, the port number is defined by using a prefix number (visible in the defaults: ``dbdeployer defaults list``) + the port number + the revision number (for some topologies multiplied by 100.)\nFor example, single-primary group replication with MySQL 8.0.11 will compute the ports like this:\n\n    base port = 8011 (version number) + 13000 (prefix) + 11 (revision) * 100  = 22111\n    node1 port = base port + 1 = 22112\n    node2 port = base port + 2 = 22113\n    node3 port = base port + 2 = 22114\n\nFor group replication we need to calculate the group port, and we use the ``group-port-delta`` (= 125) to obtain it from the regular port:\n\n    node1 group port = 22112 + 125 = 22237\n    node2 group port = 22113 + 125 = 22238\n    node3 group port = 22114 + 125 = 22239\n\nFor MySQL 8.0.11+, we also need to assign a port for the XPlugin, and we compute that using the regular port + the ``mysqlx-port-delta`` (=10000).\n\nThus, for MySQL 8.0.11 group replication deployments, you would see this listing:\n\n    $ dbdeployer sandboxes --header\n    name                   type                  version  ports\n    ----------------       -------               -------  -----\n    group_msb_8_0_11     : group-multi-primary    8.0.11 [20023 20148 30023 20024 20149 30024 20025 20150 30025]\n    group_sp_msb_8_0_11  : group-single-primary   8.0.11 [22112 22237 32112 22113 22238 32113 22114 22239 32114]\n\nThis method makes port clashes unlikely when using the same version in different deployments, but there is a risk of port clashes when deploying many multiple sandboxes of close-by versions.\nFurthermore, dbdeployer doesn\'t let the clash happen. Thanks to its central catalog of sandboxes, it knows which ports were already used, and will search for free ones whenever a potential clash is detected.\nBear in mind that the concept of "used" is only related to sandboxes. dbdeployer does not know if ports may be used by other applications.\nYou can minimize risks by telling dbdeployer which ports may be occupied. The defaults have a field ``reserved-ports``, containing the ports that should not be used. You can add to that list by modifying the defaults. For example, if you want to exclude port 7001, 10000, and 15000 from being used, you can run\n\n    dbdeployer defaults update reserved-ports \'7001,10000,15000\'\n\nor, if you want to preserve the ones that are reserved by default:\n\n    dbdeployer defaults update reserved-ports \'1186,3306,33060,7001,10000,15000\'\n\n# Concurrent deployment and deletion\n\nStarting with version 0.3.0, dbdeployer can deploy groups of sandboxes (``deploy replication``, ``deploy multiple``) with the flag ``--concurrent``. When this flag is used, dbdeployer will run operations concurrently.\nThe same flag can be used with the ``delete`` command. It is useful when there are several sandboxes to be deleted at once.\nConcurrent operations run from 2 to 5 times faster than sequential ones, depending on the version of the server and the number of nodes.\n\n# Replication topologies\n\nMultiple sandboxes can be deployed using replication with several topologies (using ``dbdeployer deploy replication --topology=xxxxx``:\n\n* **master-slave** is the default topology. It will install one master and two slaves. More slaves can be added with the option ``--nodes``.\n* **group** will deploy three peer nodes in group replication. If you want to use a single primary deployment, add the option ``--single-primary``. Available for MySQL 5.7 and later.\n* **fan-in** is the opposite of master-slave. Here we have one slave and several masters. This topology requires MySQL 5.7 or higher.\n* **all-masters** is a special case of fan-in, where all nodes are masters and are also slaves of all nodes.\n\nIt is possible to tune the flow of data in multi-source topologies. The default for fan-in is three nodes, where 1 and 2 are masters, and 2 are slaves. You can change the predefined settings by providing the list of components:\n\n    $ dbdeployer deploy replication --topology=fan-in \\\n        --nodes=5 --master-list="1,2 3" \\\n        --slave-list="4,5" 8.0.4 \\\n        --concurrent\nIn the above example, we get 5 nodes instead of 3. The first three are master (``--master-list="1,2,3"``) and the last two are slaves (``--slave-list="4,5"``) which will receive data from all the masters. There is a test automatically generated to check the replication flow. In our case it shows the following:\n\n    $ ~/sandboxes/fan_in_msb_8_0_4/test_replication\n    # master 1\n    # master 2\n    # master 3\n    # slave 4\n    ok - \'3\' == \'3\' - Slaves received tables from all masters\n    # slave 5\n    ok - \'3\' == \'3\' - Slaves received tables from all masters\n    # pass: 2\n    # fail: 0\n\nThe first three lines show that each master has done something. In our case, each master has created a different table. Slaves in nodes 5 and 6 then count how many tables they found, and if they got the tables from all masters, the test succeeds.\n\nTwo more topologies, **ndb** and **pxc** require binaries of dedicated flavors, respectively _MySQL Cluster_ and _Percona Xtradb Cluster_. dbdeployer detects whether an expanded tarball satisfies the flavor requirements, and deploys only when the criteria are met.\n\n# Skip server start\n\nBy default, when sandboxes are deployed, the servers start and additional operations to complete the topology are executed automatically. It is possible to skip the server start, using the ``--skip-start`` option. When this option is used, the server is initialized, but not started. Consequently, the default users are not created, and the database, when started manually, is only accessible with user ``root`` without password.\n\nIf you deploy with ``--skip-start``, you can run the rest of the operations manually:\n\n    $ dbdeployer deploy single --skip-start 5.7.21\n    $ $HOME/sandboxes/msb_5_7_21/start\n    $ $HOME/sandboxes/msb_5_7_21/load_grants\n\nThe same can be done for replication, but you need also to run the additional step of initializing the slaves:\n\n    $ dbdeployer deploy replication --skip-start 5.7.21 --concurrent\n    $ $HOME/sandboxes/rsandbox_5_7_21/start_all\n    $ $HOME/sandboxes/rsandbox_5_7_21/master/load_grants\n    # NOTE: only the master needs to load grants. The slaves receive the grants through replication\n    $ $HOME/sandboxes/rsandbox_5_7_21/initialize_slaves\n\nSimilarly, for group replication\n\n    $ dbdeployer deploy replication --skip-start 5.7.21 --topology=group --concurrent\n    $ $HOME/sandboxes/group_msb_5_7_21/start_all\n    $ $HOME/sandboxes/group_msb_5_7_21/node1/load_grants\n    $ $HOME/sandboxes/group_msb_5_7_21/node2/load_grants\n    $ $HOME/sandboxes/group_msb_5_7_21/node3/load_grants\n    $ $HOME/sandboxes/rsandbox_5_7_21/initialize_nodes\n\nWARNING: running sandboxes with ``--skip-start`` is provided for advanced users and is not recommended.\nIf the purpose of skipping the start is to inspect the server before the sandbox granting operations, you may consider using ``--pre-grants-sql`` and ``--pre-grants-sql-file`` to run the necessary SQL commands (see _Sandbox customization_ below.)\n\n# MySQL Document store, mysqlsh, and defaults.\n\nMySQL 5.7.12+ introduces the XPlugin (a.k.a. _mysqlx_) which enables operations using a separate port (33060 by default) on special tables that can be treated as NoSQL collections.\nIn MySQL 8.0.11+ the XPlugin is enabled by default, giving dbdeployer the task of defining an additional port and socket for this service. When you deploy MySQL 8.0.11 or later, dbdeployer sets the ``mysqlx-port`` to the value of the regular port + ``mysqlx-delta-port`` (= 10000).\n\nIf you want to avoid having the XPlugin enabled, you can deploy the sandbox with the option ``--disable-mysqlx``.\n\nFor MySQL between 5.7.12 and 8.0.4, the approach is the opposite. By default, the XPlugin is disabled, and if you want to use it you will run the deployment using ``--enable-mysqlx``. In both cases the port and socket will be computed by dbdeployer.\n\nWhen the XPlugin is enabled, it makes sense to use [the MySQL shell](https://dev.mysql.com/doc/refman/8.0/en/mysql-shell.html) and dbdeployer will create a ``mysqlsh`` script for the sandboxes that use the plugin. Unfortunately, as of today (late April 2018) the MySQL shell is not released with the server tarball, and therefore we have to fix things manually (see next section.) dbdeployer will look for ``mysqlsh`` in the same directory where the other clients are, so if you manually merge the mysql shell and the server tarballs, you will get the appropriate version of MySQL shell. If not, you will use the version of the shell that is available in ``$PATH``. If there is no MySQL shell available, you will get an error.\n\n# Installing MySQL shell\n\nThe MySQL shell is distributed as a tarball. You can install it within the server binaries directory, using dbdeployer (as of version 1.9.0.)\n\nThe simplest operation is:\n\n    $ dbdeployer unpack --shell \\\n        mysql-shell-8.0.12-$YOUR_OS.tar.gz\n\nThis command will work if MySQL 8.0.12 was already unpacked in ``$SANDBOX_BINARY/8.0.12``. dbdeployer recognizes the version (from the tarball name) and looks for the corresponding server. If it is found, the shell package will be temporarily expanded, and the necessary files moved into the server directory tree.\n\nIf the corresponding server directory does not exist, you can specify the wanted target:\n\n    $ dbdeployer unpack --shell \\\n        mysql-shell-8.0.12-$YOUR_OS.tar.gz \\\n        --target-server=5.7.23\n\nSince the MySQL team recommends using the latest shell even for older versions of MySQL, we can insert the shell from 8.0.12 into the 5.7 server, and it will work as expected, as the shell brings with it all needed files.\nUsing the option ``--verbosity=2`` we can see which files were extracted and where each component was copied or moved. Notice that the unpacked MySQL shell directory is deleted after the operation is completed.\n\n# Database logs management.\n\nSometimes, when using sandboxes for testing, it makes sense to enable the general log, either during initialization or for regular operation. While you can do that with ``--my-cnf-options=general-log=1`` or ``--my-init-options=--general-log=1``, as of version 1.4.0 you have two simple boolean shortcuts: ``--init-general-log`` and ``--enable-general-log`` that will start the general log when requested.\n\nAdditionally, each sandbox has a convenience script named ``show_log`` that can easily display either the error log or the general log. Run `./show_log -h` for usage info.\n\nFor replication, you also have ``show_binlog`` and ``show_relaylog`` in every sandbox as a shortcut to display replication logs easily.\n\n# dbdeployer operations logging\n\nIn addition to enabling database logs, you can also have logs of the operations performed by dbdeployer when building and activating sandboxes.\nThe logs are disabled by default. You can enable them for a given operation using ``--log-sb-operations``. When the logs are enabled, dbdeployer will create one or more log files in a directory under ``$HOME/sandboxes/logs``.\nFor a single sandbox, the log directory will be named ``single_v_v_vv-xxxx``, where ``v_v_vv`` is the version number and ``xxxx`` is dbdeployer Process ID. Inside the directory, there will be a file names ``single.log``.\n\nFor a replication sandbox, the directory will be named ``replication_v_v_vv-xxxx`` and it will contain at least 3 files: ``master-slave-replication.log`` with replication operations, and two single sandbox (one for master and one for a slave) logs named ``replication-node-x.log``. If there is more than one slave, each one will have its own log.\n\ndbdeployer logs will record which function ran which operation, with the data used for single and compound sandboxes.\n\nThe name of the log is available inside the file ``sbdescription.json`` in each sandbox. If logging is disabled, the log field is not listed.\n\nThe logs are preserved until the corresponding sandbox is deleted.\n\nLogging can be enabled permanently using the defaults: ``dbdeployer defaults update log-sb-operations true``. Similarly, you can change the log-directory either for a single operation (``--log-directory=...``) or permanently (``dbdeployer defaults update log-directory /my/path/to/logs``)\n\nWhat kind of information is in the logs? The most important things found in there is the data used to fill the templates. If something goes wrong, the data should give us a lead in the right direction. The logs also record the result of several choices that dbdeployer makes, such as enebling a given port or adding such and such option to the configuration file. Even if nothing is wrong, the logs can give the inquisitive user some insight on what happens when we deploy a less than usual configuration, and which templates and options can be used to alter the result.\n\n# Sandbox customization\n\nThere are several ways of changing the default behavior of a sandbox.\n\n1. You can add options to the sandbox being deployed using ``--my-cnf-options="some mysqld directive"``. This option can be used many times. The supplied options are added to my.sandbox.cnf\n2. You can specify a my.cnf template (``--my-cnf-file=filename``) instead of defining options line by line. dbdeployer will skip all the options that are needed for the sandbox functioning.\n3. You can run SQL statements or SQL files before or after the grants were loaded (``--pre-grants-sql``, ``--pre-grants-sql-file``, etc). You can also use these options to peek into the state of the sandbox and see what is happening at every stage.\n4. For more advanced needs, you can look at the templates being used for the deployment, and load your own instead of the original s(``--use-template=TemplateName:FileName``.)\n\nFor example:\n\n    $ dbdeployer deploy single 5.6.33 --my-cnf-options="general_log=1" \\\n        --pre-grants-sql="select host, user, password from mysql.user" \\\n        --post-grants-sql="select @@general_log"\n\n    $ dbdeployer defaults templates list\n    $ dbdeployer defaults templates show templateName > mytemplate.txt\n    # edit the template\n    $ dbdeployer deploy single --use-template=templateName:mytemplate.txt 5.7.21\n\ndbdeployer will use your template instead of the original.\n\n5. You can also export the templates, edit them, and ask dbdeployer to edit your changes.\n\nExample:\n\n    $ dbdeployer defaults templates export single my_templates\n    # Will export all the templates for the "single" group to the direcory my_templates/single\n    $ dbdeployer defaults templates export ALL my_templates\n    # exports all templates into my_templates, one directory for each group\n    # Edit the templates that you want to change. You can also remove the ones that you want to leave untouched.\n    $ dbdeployer defaults templates import single my_templates\n    # Will import all templates from my_templates/single\n\nWarning: modifying templates may block the regular work of the sandboxes. Use this feature with caution!\n\n6. Finally, you can modify the defaults for the application, using the "defaults" command. You can export the defaults, import them from a modified JSON file, or update a single one on-the-fly.\n\nHere\'s how:\n\n    $ dbdeployer defaults show\n    # Internal values:\n```json\n{\n    "version": "1.5.0",\n    "sandbox-home": "$HOME/sandboxes",\n    "sandbox-binary": "$HOME/opt/mysql",\n    "use-sandbox-catalog": true,\n    "master-slave-base-port": 11000,\n    "group-replication-base-port": 12000,\n    "group-replication-sp-base-port": 13000,\n    "fan-in-replication-base-port": 14000,\n    "all-masters-replication-base-port": 15000,\n    "multiple-base-port": 16000,\n    "group-port-delta": 125,\n    "mysqlx-port-delta": 10000,\n    "master-name": "master",\n    "master-abbr": "m",\n    "node-prefix": "node",\n    "slave-prefix": "slave",\n    "slave-abbr": "s",\n    "sandbox-prefix": "msb_",\n    "master-slave-prefix": "rsandbox_",\n    "group-prefix": "group_msb_",\n    "group-sp-prefix": "group_sp_msb_",\n    "multiple-prefix": "multi_msb_",\n    "fan-in-prefix": "fan_in_msb_",\n    "all-masters-prefix": "all_masters_msb_",\n    "reserved-ports": [\n        1186,\n        3306,\n        33060\n    ],\n    "timestamp": "Sat May 12 14:37:53 CEST 2018"\n }\n```\n\n    $ dbdeployer defaults update master-slave-base-port 15000\n    # Updated master-slave-base-port -> "15000"\n    # Configuration file: $HOME/.dbdeployer/config.json\n```json\n{\n    "version": "1.5.0",\n    "sandbox-home": "$HOME/sandboxes",\n    "sandbox-binary": "$HOME/opt/mysql",\n    "use-sandbox-catalog": true,\n    "master-slave-base-port": 15000,\n    "group-replication-base-port": 12000,\n    "group-replication-sp-base-port": 13000,\n    "fan-in-replication-base-port": 14000,\n    "all-masters-replication-base-port": 15000,\n    "multiple-base-port": 16000,\n    "group-port-delta": 125,\n    "mysqlx-port-delta": 10000,\n    "master-name": "master",\n    "master-abbr": "m",\n    "node-prefix": "node",\n    "slave-prefix": "slave",\n    "slave-abbr": "s",\n    "sandbox-prefix": "msb_",\n    "master-slave-prefix": "rsandbox_",\n    "group-prefix": "group_msb_",\n    "group-sp-prefix": "group_sp_msb_",\n    "multiple-prefix": "multi_msb_",\n    "fan-in-prefix": "fan_in_msb_",\n    "all-masters-prefix": "all_masters_msb_",\n    "reserved-ports": [\n        1186,\n        3306,\n        33060\n    ],\n    "timestamp": "Sat May 12 14:37:53 CEST 2018"\n}\n```\n\nAnother way of modifying the defaults, which does not store the new values in dbdeployer\'s configuration file, is through the ``--defaults`` flag. The above change could be done like this:\n\n    $ dbdeployer --defaults=master-slave-base-port:15000 \\\n        deploy replication 5.7.21\n\nThe difference is that using ``dbdeployer defaults update`` the value is changed permanently for the next commands, or until you run a ``dbdeployer defaults reset``. Using the ``--defaults`` flag, instead, will modify the defaults only for the active command.\n\n# Sandbox management\n\nYou can list the available MySQL versions with\n\n    $ dbdeployer versions # Alias: available\n\nOptionally, you can ask for only the versions of a given flavor (`dndeployer versions --flavor=ndb`)  or to show all the versions distinct by flavor (`dbdeployer versions --by-flavor`)\n\nAnd you can list which sandboxes were already installed\n\n    $ dbdeployer sandboxes # Aliases: installed, deployed\n\nThe command "usage" shows how to use the scripts that were installed with each sandbox.\n\n    $ dbdeployer usage\n    \n    \tUSING A SANDBOX\n    \n    Change directory to the newly created one (default: $SANDBOX_HOME/msb_VERSION \n    for single sandboxes)\n    [ $SANDBOX_HOME = $HOME/sandboxes unless modified with flag --sandbox-home ]\n    \n    The sandbox directory of the instance you just created contains some handy \n    scripts to manage your server easily and in isolation.\n    \n    "./start", "./status", "./restart", and "./stop" do what their name suggests. \n    start and restart accept parameters that are eventually passed to the server. \n    e.g.:\n    \n      ./start --server-id=1001\n    \n      ./restart --event-scheduler=disabled\n    \n    "./use" calls the command line client with the appropriate parameters,\n    Example:\n    \n        ./use -BN -e "select @@server_id"\n        ./use -u root\n    \n    "./clear" stops the server and removes everything from the data directory,\n    letting you ready to start from scratch. (Warning! It\'s irreversible!)\n    \n    "./send_kill" does almost the same as "./stop", as it sends a SIGTERM (-15) kill\n    to shut down the server. Additionally, when the regular kill fails, it will\n    send an unfriendly SIGKILL (-9) to the unresponsive server.\n    \n    "./add_option" will add one or more options to my.sandbox.cnf, and restarts the\n    server to apply the changes.\n    \n    "init_db" and "load_grants" are used during the server initialization, and should not be used\n    in normal operations. They are nonetheless useful to see which operations were performed\n    to set up the server.\n    \n    "./show_binlog" and "./show_relaylog" will show the latest binary log or relay-log.\n    \n    "./my" is a prefix script to invoke any command named "my*" from the \n    MySQL /bin directory. It is important to use it rather than the \n    corresponding globally installed tool, because this guarantees \n    that you will be using the tool for the version you have deployed.\n    Examples:\n    \n        ./my sqldump db_name\n        ./my sqlbinlog somefile\n    \n    "./mysqlsh" invokes the mysql shell. Unlike other commands, this one only works\n    if mysqlsh was installed, with preference to the binaries found in "basedir".\n    This script is created only if the X plugin was enabled (5.7.12+ with --enable-mysqlx\n    or 8.0.11+ without --disable-mysqlx)\n    \n    "./use_admin" is created when the sandbox is deployed with --enable-admin-address (8.0.14+)\n    and allows using the database as administrator, with a dedicated port.\n    \n     USING MULTIPLE SERVER SANDBOX\n    On a replication sandbox, you have the same commands (run "dbdeployer usage single"), \n    with an "_all" suffix, meaning that you propagate the command to all the members. \n    Then you have "./m" as a shortcut to use the master, "./s1" and "./s2" to access \n    the slaves (and "s3", "s4" ... if you define more).\n    \n    In group sandboxes without a master slave relationship (group replication and \n    multiple sandboxes) the nodes can be accessed by ./n1, ./n2, ./n3, and so on.\n    \n    start_all    [options] > starts all nodes\n    status_all             > get the status of all nodes\n    restart_all  [options] > restarts all nodes\n    stop_all               > stops all nodes\n    use_all         "SQL"  > runs a SQL statement in all nodes\n    use_all_masters "SQL"  > runs a SQL statement in all masters\n    use_all_slaves "SQL"   > runs a SQL statement in all slaves\n    clear_all              > stops all nodes and removes all data\n    m                      > invokes MySQL client in the master\n    s1, s2, n1, n2         > invokes MySQL client in slave 1, 2, node 1, 2\n    \n    The scripts "check_slaves" or "check_nodes" give the status of replication in the sandbox.\n    \n    When the sandbox is deployed with --enable-admin-address (8.0.14+) the following scripts\n    are also created:\n    \n    ma                    > invokes the MySQL client in the master as admin\n    sa1, sa2, na1, na2    > invokes MySQL client as admin in slave 1, 2, node 1, 2\n    use_all_admin "SQL"   > runs a SQL statement in all nodes as admin\n    \n    \n\nEvery sandbox has a file named ``sbdescription.json``, containing important information on the sandbox. It is useful to determine where the binaries come from and on which conditions it was installed.\n\nFor example, a description file for a single sandbox would show:\n\n```json\n{\n    "basedir": "/home/dbuser/opt/mysql/5.7.22",\n    "type": "single",\n    "version": "5.7.22",\n    "port": [\n        5722\n    ],\n    "nodes": 0,\n    "node_num": 0,\n    "dbdeployer-version": "1.5.0",\n    "timestamp": "Sat May 12 14:26:41 CEST 2018",\n    "command-line": "dbdeployer deploy single 5.7.22"\n}\n```\n\nAnd for replication:\n\n```json\n{\n    "basedir": "/home/dbuser/opt/mysql/5.7.22",\n    "type": "master-slave",\n    "version": "5.7.22",\n    "port": [\n        16745,\n        16746,\n        16747\n    ],\n    "nodes": 2,\n    "node_num": 0,\n    "dbdeployer-version": "1.5.0",\n    "timestamp": "Sat May 12 14:27:04 CEST 2018",\n    "command-line": "dbdeployer deploy replication 5.7.22 --gtid --concurrent"\n}\n```\n\n# Sandbox macro operations\n\nYou can run a command in several sandboxes at once, using the ``global`` command, which propagates your command to all the installed sandboxes.\n\n    $ dbdeployer global -h \n    This command can propagate the given action through all sandboxes.\n    \n    Usage:\n      dbdeployer global [command]\n    \n    Examples:\n    \n    \t$ dbdeployer global use "select version()"\n    \t$ dbdeployer global status\n    \t$ dbdeployer global stop\n    \t\n    \n    Available Commands:\n      restart          Restarts all sandboxes\n      start            Starts all sandboxes\n      status           Shows the status in all sandboxes\n      stop             Stops all sandboxes\n      test             Tests all sandboxes\n      test-replication Tests replication in all sandboxes\n      use              Runs a query in all sandboxes\n    \n    Flags:\n      -h, --help   help for global\n    \n    \n\nThe sandboxes can also be deleted, either one by one or all at once:\n\n    $ dbdeployer delete -h \n    Stops the sandbox (and its depending sandboxes, if any), and removes it.\n    Warning: this command is irreversible!\n    \n    Usage:\n      dbdeployer delete sandbox_name (or "ALL") [flags]\n    \n    Aliases:\n      delete, remove, destroy\n    \n    Examples:\n    \n    \t$ dbdeployer delete msb_8_0_4\n    \t$ dbdeployer delete rsandbox_5_7_21\n    \n    Flags:\n          --concurrent     Runs multiple deletion tasks concurrently.\n          --confirm        Requires confirmation.\n      -h, --help           help for delete\n          --skip-confirm   Skips confirmation with multiple deletions.\n    \n    \n\nYou can lock one or more sandboxes to prevent deletion. Use this command to make the sandbox non-deletable.\n\n    $ dbdeployer admin lock sandbox_name\n\nA locked sandbox will not be deleted, even when running ``dbdeployer delete ALL``.\n\nThe lock can also be reverted using\n\n    $ dbdeployer admin unlock sandbox_name\n\n# Sandbox upgrade\n\ndbdeployer 1.10.0 introduces upgrades:\n\n    $ dbdeployer admin upgrade -h\n    Upgrades a sandbox to a newer version.\n    The sandbox with the new version must exist already.\n    The data directory of the old sandbox will be moved to the new one.\n    \n    Usage:\n      dbdeployer admin upgrade sandbox_name newer_sandbox [flags]\n    \n    Examples:\n    dbdeployer admin upgrade msb_8_0_11 msb_8_0_12\n    \n    Flags:\n          --dry-run   Shows upgrade operations, but don\'t execute them\n      -h, --help      help for upgrade\n          --verbose   Shows upgrade operations\n    \n    \n\nTo perform an upgrade, the following conditions must be met:\n\n* Both sandboxes must be **single** deployments.\n* The older version must be one major version behind (5.6.x to 5.7.x, or 5.7.x to 8.0.x, but not 5.6.x to 8.0.x) or same major version but different revision (e.g. 5.7.22 to 5.7.23)\n* The newer version must have been already deployed.\n* The newer version must have `mysql_upgrade` in its base directory (e.g `$SANDBOX_BINARY/5.7.23/bin`), but see below about this requirement being lifted for 8.0.16+. \n\ndbdeployer checks all the conditions, then\n\n1. stops both databases;\n2. renames the data directory of the newer version;\n3. moves the data directory of the older version under the newer sandbox;\n4. restarts the newer version;\n5. runs ``mysql_upgrade`` (except with MySQL 8.0.16+, where [the server does the upgrade on its own](https://mysqlserverteam.com/mysql-8-0-16-mysql_upgrade-is-going-away/)).\n\nThe older version is, at this point, not operational anymore, and can be deleted.\n\n# Dedicated admin address\n\nMySQL 8.0.14+ introduces the options [`--admin-address` and `--admin-port`](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_admin_address) to allow a dedicated connection for admin users using a different port. In regular server deployments, the port is 33062, but sandboxes need a different port for each one. Starting with dbdeployer 1.25.0, the option `--enable-admin-address` will create an admin port for each sandbox. In addition to the `./use` script, each single sandbox has a `./use_admin` script that makes administrative access easier.\n\n```\n$ dbdeployer deploy single 8.0.15 --enable-admin-address\nDatabase installed in $HOME/sandboxes/msb_8_0_15\nrun \'dbdeployer usage single\' for basic instructions\'\n.. sandbox server started\n\n$ ~/sandboxes/msb_8_0_15/use_admin\nWelcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 9\nServer version: 8.0.15 MySQL Community Server - GPL\n\nCopyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.\n\nOracle is a registered trademark of Oracle Corporation and/or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType \'help;\' or \'\\h\' for help. Type \'\\c\' to clear the current input statement.\n\n## ADMIN ##mysql [127.0.0.1:19015] {root} ((none)) > select user(), @@port, @@admin_port;\n+----------------+--------+--------------+\n| user()         | @@port | @@admin_port |\n+----------------+--------+--------------+\n| root@localhost |   8015 |        19015 |\n+----------------+--------+--------------+\n1 row in set (0.00 sec)\n\n## ADMIN ##mysql [127.0.0.1:19015] {root} ((none)) >\n```\nMultiple sandboxes have other shortcuts for the same purpose: `./ma` gives access to the master with admin user, as do the `./sa1` and `./sa2` scripts for slaves. There are similar `./na1` `./na2` scripts for all nodes, and a `./use_all_admin` script sends a query to all nodes through an admin user.\n\n# Obtaining sandbox metadata\n\nAs of version 1.26.0, dbdeployer creates a `metadata` script in every single sandbox. Using this script, we can get quick information about the sandbox, even if the database server is not running.\n\nFor example:\n\n```\n$ ~/sandboxes/msb_8_0_15/metadata help\nSyntax: ~/sandboxes/msb_8_0_15/metadata request\nAvailable requests:\n  version\n  major\n  minor\n  rev\n  short (= major.minor)\n\n  basedir\n  cbasedir (Client Basedir)\n  datadir\n  port\n  xport (MySQLX port)\n  aport (Admin port)\n  socket\n  serverid (server id)\n  pid (Process ID)\n  pidfile (PID file)\n  flavor\n  sbhome (SANDBOX_HOME)\n  sbbin (SANDBOX_BINARY)\n  sbtype (Sandbox Type)\n\n\n$ ~/sandboxes/msb_8_0_15/metadata version\n8.0.15\n\n$ ~/sandboxes/msb_8_0_15/metadata short\n8.0\n\n$ ~/sandboxes/msb_8_0_15/metadata pid\n27361\n```\n\n# Replication between sandboxes\n\nEvery sandbox (created by dbdeployer 1.26.0+) includes a script called `replicate_from`, which allows replication from another sandbox, provided that both sandboxes are well configured to start replication.\n\nHere\'s an example:\n\n```\n# deploying a sandbox with binary log and server ID\n$ dbdeployer deploy single 8.0 --master\n# 8.0 => 8.0.15\nDatabase installed in $HOME/sandboxes/msb_8_0_15\nrun \'dbdeployer usage single\' for basic instructions\'\n. sandbox server started\n\n# Same, for version 5.7\n$ dbdeployer deploy single 5.7 --master\n# 5.7 => 5.7.25\nDatabase installed in $HOME/sandboxes/msb_5_7_25\nrun \'dbdeployer usage single\' for basic instructions\'\n. sandbox server started\n\n# deploying a sandbox without binary log and server ID\n$ dbdeployer deploy single 5.6\n# 5.6 => 5.6.41\nDatabase installed in $HOME/sandboxes/msb_5_6_41\nrun \'dbdeployer usage single\' for basic instructions\'\n. sandbox server started\n\n# situation:\n$ dbdeployer sandboxes --full-info\n.------------.--------.---------.---------------.--------.-------.--------.\n|    name    |  type  | version |     ports     | flavor | nodes | locked |\n+------------+--------+---------+---------------+--------+-------+--------+\n| msb_5_6_41 | single | 5.6.41  | [5641 ]       | mysql  |     0 |        |\n| msb_5_7_25 | single | 5.7.25  | [5725 ]       | mysql  |     0 |        |\n| msb_8_0_15 | single | 8.0.15  | [8015 18015 ] | mysql  |     0 |        |\n\'------------\'--------\'---------\'---------------\'--------\'-------\'--------\'\n\n# Try replicating from the sandbox without binlogs and server ID. It fails\n$ ~/sandboxes/msb_5_7_25/replicate_from  msb_5_6_41\nNo binlog information found in /Users/gmax/sandboxes/msb_5_6_41\n\n# Try replicating from a master of a bigger version than the slave. It fails\n$ ~/sandboxes/msb_5_7_25/replicate_from  msb_8_0_15\nMaster major version should be lower than slave version (or equal)\n\n# Try replicating from 5.7 to 8.0. It succeeds\n\n$ ~/sandboxes/msb_8_0_15/replicate_from  msb_5_7_25\nConnecting to /Users/gmax/sandboxes/msb_5_7_25\n--------------\nCHANGE MASTER TO master_host="127.0.0.1",\nmaster_port=5725,\nmaster_user="rsandbox",\nmaster_password="rsandbox"\n, master_log_file="mysql-bin.000001", master_log_pos=4089\n--------------\n\n--------------\nstart slave\n--------------\n\n              Master_Log_File: mysql-bin.000001\n          Read_Master_Log_Pos: 4089\n             Slave_IO_Running: Yes\n            Slave_SQL_Running: Yes\n          Exec_Master_Log_Pos: 4089\n           Retrieved_Gtid_Set:\n            Executed_Gtid_Set:\n                Auto_Position: 0\n\n```\n\nThe same method can be used to replicate between composite sandboxes. However, some extra steps may be necessary when replicating between clusters, as conflicts and pipeline blocks may happen.\nThere are at least three things to keep in mind:\n\n1. As seen above, the version of the slave must be either the same as the master or higher.\n2. Some topologies need the activation of `log-slave-updates` for this kind of replication to work correctly. For example, `PXC` and `master-slave` need this option to get replication from another cluster to all their nodes.\n3. **dbdeployer composite sandboxes have all the same server_id**. When replicating to another entity, we get a conflict, and replication does not start. To avoid this problem, we need to use  the option `--port-as-server-id` when deploying the cluster.\n\nHere are examples of a few complex replication scenarios:\n\n## a. NDB to NDB\n\nHere we need to make sure that the server IDs are different.\n\n```\n$ dbdeployer deploy replication ndb8.0.14 --topology=ndb \\\n    --port-as-server-id \\\n    --sandbox-directory=ndb_ndb8_0_14_1 --concurrent\n[...]\n$ dbdeployer deploy replication ndb8.0.14 --topology=ndb \\\n    --port-as-server-id \\\n    --sandbox-directory=ndb_ndb8_0_14_2 --concurrent\n[...]\n\n$ dbdeployer sandboxes --full-info\n.-----------------.--------.-----------.----------------------------------------------.--------.-------.--------.\n|      name       |  type  |  version  |                    ports                     | flavor | nodes | locked |\n+-----------------+--------+-----------+----------------------------------------------+--------+-------+--------+\n| ndb_ndb8_0_14_1 | ndb    | ndb8.0.14 | [21400 28415 38415 28416 38416 28417 38417 ] | ndb    |     3 |        |\n| ndb_ndb8_0_14_2 | ndb    | ndb8.0.14 | [21401 28418 38418 28419 38419 28420 38420 ] | ndb    |     3 |        |\n\'-----------------\'--------\'-----------\'----------------------------------------------\'--------\'-------\'--------\'\n\n$ ~/sandboxes/ndb_ndb8_0_14_1/replicate_from ndb_ndb8_0_14_2\n[...]\n```\n\n## b. Group replication to group replication. \n\nAlso here, the only caveat is to ensure uniqueness of server IDs.\n```\n$ dbdeployer deploy replication 8.0.15 --topology=group \\\n    --concurrent --port-as-server-id \\\n    --sandbox-directory=group_8_0_15_1\n[...]\n\n$ dbdeployer deploy replication 8.0.15 --topology=group \\\n    --concurrent --port-as-server-id \\\n    --sandbox-directory=group_8_0_15_2\n[...]\n\n$ ~/sandboxes/group_8_0_15_1/replicate_from group_8_0_15_2\n[...]\n```\n\n## c. Master/slave to master/slave.\n\nIn addition to caring about the server ID, we also need to make sure that the replication spreads to the slaves.\n\n```\n$ dbdeployer deploy replication 8.0.15 --topology=master-slave \\\n    --concurrent --port-as-server-id \\\n    --sandbox-directory=ms_8_0_15_1 \\\n    -c log-slave-updates\n[...]\n\n$ dbdeployer deploy replication 8.0.15 --topology=master-slave \\\n    --concurrent --port-as-server-id \\\n    --sandbox-directory=ms_8_0_15_2 \\\n    -c log-slave-updates\n[...]\n\n$  ~/sandboxes/ms_8_0_15_1/replicate_from ms_8_0_15_2\n[...]\n```\n\n## d. Hibrid replication\n\nUsing the same methods, we can replicate from a cluster to a single sandbox (e,g. group replication to single 8.0 sandbox) or the other way around (single 8.0 sandbox to group replication).\nWe onlly need to make sure there are no conflicts as mentioned above. The script `replicate_from` can catch some issues, but I am sure there is still room for mistakes. For example, replicating from a NDB cluster to a single sandbox won\'t work, as the single one can\'t process the `ndbengine` tables.\n\nExamples:\n\n```\n# group replication to single\n~/sandboxes/msb_8_0_15/replicate_from group_8_0_15_2\n\n# single to master/slave\n~/sandboxes/ms_8_0_15_1/replicate_from msb_8_0_15\n\n# master/slave to group\n~/sandboxes/group_8_0_15_2/replicate_from ms_8_0_15_1\n```\n\n## e. Cloning\n\nWhen both master and slave run version 8.0.17+, the script `replicate_from` allows an extra option `clone`. When this\noption is given, and both sandboxes meet the [cloning pre-requisites](https://dev.mysql.com/doc/refman/8.0/en/clone-plugin-remote.html),\nthe script will try to clone the donor before starting replication. If successful, it will use the clone coordinates to\ninitialize the slave.\n\n# Using dbdeployer in scripts\n\ndbdeployer has been designed to simplify automated operations. Using it in scripts is easy, as shown in the [cookbook examples](#Practical-examples).\nIn addition to run operations on sandboxes, dbdeployer can also provide information about the environment in a way that is suitable for scripting.\n\nFor example, if you want to deploy a sandbox using the most recent 5.7 binaries, you may run `dbdeployer versions`, look which versions are available, and pick the most recent one. But dbdeployer 1.30.0 can aytomate this procedure using `dbdeployer info version 5.7`. This command will print the latest 5.7 binaries to the standard output, allowing us to create dynamic scripts such as:\n\n```bash\n# the absolute latest version\nlatest=$(dbdeployer info version)\nlatest57=$(dbdeployer info version 5.7)\nlatest80=$(dbdeployer info version 8.0)\n\nif [ -z "$latest" ]\nthen\n    echo "No versions found"\n    exit 1\nfi\n\necho "The latest version is $latest"\n\nif [ -n "$latest57" ]\nthen\n    echo "# latest for 5.7 : $latest57"\n    dbdeployer deploy single $latest57\nfi\n\nif [ -n "$latest80" ]\nthen\n    echo "# latest for 8.0 : $latest80"\n    dbdeployer deploy single $latest80\nfi\n```\n\n    $ dbdeployer info version -h\n    Displays the latest version available for deployment.\n    If a short version is indicated (such as 5.7, or 8.0), only the versions belonging to that short\n    version are searched.\n    If "all" is indicated after the short version, displays all versions belonging to that short version.\n    \n    Usage:\n      dbdeployer info version [short-version|all] [all] [flags]\n    \n    Examples:\n    \n        # Shows the latest version available\n        $ dbdeployer info version\n        8.0.16\n    \n        # shows the latest version belonging to 5.7\n        $ dbdeployer info version 5.7\n        5.7.26\n    \n        # shows the latest version for every short version\n        $ dbdeployer info version all\n        5.0.96 5.1.73 5.5.53 5.6.41 5.7.26 8.0.16\n    \n        # shows all the versions for a given short version\n        $ dbdeployer info version 8.0 all\n        8.0.11 8.0.12 8.0.13 8.0.14 8.0.15 8.0.16\n    \n    \n    Flags:\n      -h, --help   help for version\n    \n    \n\nSimilarly to `versions`, the `defaults` subcommand allows us to get dbdeployer metadata in a way that can be used in scripts\n\n    $ dbdeployer info defaults -h\n    Displays one field of the defaults.\n    \n    Usage:\n      dbdeployer info defaults field-name [flags]\n    \n    Examples:\n    \n    \t$ dbdeployer info defaults master-slave-base-port \n    \n    \n    Flags:\n      -h, --help   help for defaults\n    \n    \n\nFor example\n\n```\n$ dbdeployer info defaults sandbox-prefix\nmsb_\n\n$ dbdeployer info defaults master-slave-ptrefix\nrsandbox_\n```\nYou can ask for any fields from the defaults (see `dbdeployer defaults list` for the field names).\n\n# Importing databases into sandboxes\n\nWith dbdeployer 1.39.0, you have the ability of importing an existing database into a sandbox.\nThe *importing* doesn\'t involve any re-installation or data transfer: the resulting sandbox will access the existing\ndatabase server using the standard sandbox scripts.\n\nSyntax: `dbdeployer import single hostIP/name port username password` \n\nFor example, \n\n```\ndbdeployer import single 192.168.0.164 5000 public nOtMyPassW0rd\n detected: 5.7.22\n # Using client version 5.7.22\n Database installed in $HOME/sandboxes/imp_msb_5_7_22\n run \'dbdeployer usage single\' for basic instructions\'`\n```\n\nWe connect to a server running at IP address 192.168.0.164, listening to port 5000. We pass user name and password on\nthe command line, and dbdeployer, detecting that the database runs version 5.7.22, uses the client of the closest\nversion to connect to it, and builds a sandbox, which we can access by the usual scripts:\n\n```\n~/sandboxes/imp_msb_5_7_22/use\nWelcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 19\nServer version: 5.7.22 MySQL Community Server (GPL)\n\nCopyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved.\n\nOracle is a registered trademark of Oracle Corporation and/or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType \'help;\' or \'\\h\' for help. Type \'\\c\' to clear the current input statement.\n\nmysql [192.168.0.164:5000] {public} ((none)) > select host, user, authentication_string from mysql.user;\n+-----------+---------------+-------------------------------------------+\n| host      | user          | authentication_string                     |\n+-----------+---------------+-------------------------------------------+\n| localhost | root          | *14E65567ABDB5135D0CFD9A70B3032C179A49EE7 |\n| localhost | mysql.session | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE |\n| localhost | mysql.sys     | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE |\n| localhost | healthchecker | *36C82179AFA394C4B9655005DD2E482D30A4BDF7 |\n| %         | public        | *129FD0B9224690392BCF7523AC6E6420109E5F70 |\n+-----------+---------------+-------------------------------------------+\n5 rows in set (0.00 sec)\n```\n\nYou have to keep in mind that several assumptions that are taken for granted in regular sandboxes may not hold for an\nimported one. This sandbox refers to an out-of-the-box MySQL deployment that lacks some settings that are expected in\na regular sandbox:\n\n```\n$ ~/sandboxes/imp_msb_5_7_22/test_sb\nok - version \'5.7.22\'\nok - version is 5.7.22 as expected\nok - query was successful for user public: \'select 1\'\nok - query was successful for user public: \'select 1\'\nok - query was successful for user public: \'use mysql; select count(*) from information_schema.tables where table_schema=schema()\'\nok - query was successful for user public: \'use mysql; select count(*) from information_schema.tables where table_schema=schema()\'\nnot ok - query failed for user public: \'create table if not exists test.txyz(i int)\'\nok - query was successful for user public: \'drop table if exists test.txyz\'\n# Tests :     8\n# pass  :     7\n# FAIL  :     1\n```\n\nIn the above example, the `test` database, which exists in every sandbox, was not found, and the test failed.\n\nThere could be bigger limitations. Here\'s an attempt with a [db4free.net](https://db4free.net) account that works fine\nbut has bigger problems than the previous one:\n\n```\n$ dbdeployer import single db4free.net 3306 dbdeployer $(cat ~/.db4free.pwd)\ndetected: 8.0.17\n# Using client version 8.0.17\nDatabase installed in $HOME/sandboxes/imp_msb_8_0_17\nrun \'dbdeployer usage single\' for basic instructions\'\n```\n\nA db4free account can only access the user database, and nothing else. Specifically, it can\'t create databases, access\ndatabases `information_schema` or `mysql`, or start replication.\n\nSpeaking of replication, we can use imported sandboxes to start replication between a remote server and a sandbox, or\nbetween a sandbox and a remote server, or even, if both sandboxes are imported, start replication between two remote\nservers (provided that the credentials used for importing have the necessary privileges.)\n\n```\n$ ~/sandboxes/msb_8_0_17/replicate_from imp_msb_5_7_22\nConnecting to /Users/gmax/sandboxes/imp_msb_5_7_22\n--------------\nCHANGE MASTER TO master_host="192.168.0.164",\nmaster_port=5000,\nmaster_user="public",\nmaster_password="nOtMyPassW0rd"\n, master_log_file="d6db0cd349b8-bin.000001", master_log_pos=154\n--------------\n\n--------------\nstart slave\n--------------\n\n              Master_Log_File: d6db0cd349b8-bin.000001\n          Read_Master_Log_Pos: 154\n             Slave_IO_Running: Yes\n            Slave_SQL_Running: Yes\n          Exec_Master_Log_Pos: 154\n           Retrieved_Gtid_Set:\n            Executed_Gtid_Set:\n                Auto_Position: 0\n```\n\n    $ dbdeployer import single --help\n    Imports an existing (local or remote) server into a sandbox,\n    so that it can be used with the usual sandbox scripts.\n    Requires host, port, user, password.\n    \n    Usage:\n      dbdeployer import single host port user password [flags]\n    \n    Flags:\n      -h, --help   help for single\n    \n    \n\n\n# Cloning databases\n\nIn addition to [replicating between sandboxes](#replication-between-sandboxes), we can also clone a database, if it is\nof version 8.0.17+ and [meets the prerequisites](https://dev.mysql.com/doc/refman/8.0/en/clone-plugin-remote.html).\n\nEvery sandbox using version 8.0.17 or later will also have a script named `clone_from`, which works like `replicate_from`.\n\nFor example, this command will clone from a master-slave sandbox into a single sandbox:\n\n```\n$ ~/sandboxes/msb_8_0_17/clone_from rsandbox_8_0_17\n Installing clone plugin in recipient sandbox\n Installing clone plugin in donor sandbox\n Cloning from rsandbox_8_0_17/master\n Giving time to cloned server to restart\n .\n```\n\n# Compiling dbdeployer\n\nShould you need to compile your own binaries for dbdeployer, follow these steps:\n\n1. Make sure you have go 1.11+ installed in your system.\n2. Run `git clone https://github.com/datacharmer/dbdeployer.git`.  This will import all the code that is needed to build dbdeployer.\n3. Change directory to `./dbdeployer`.\n4. Run ./scripts/build.sh {linux|OSX}`\n5. If you need the docs enabled binaries (see the section "Generating additional documentation") run `MKDOCS=1 ./scripts/build.sh {linux|OSX}`\n\n# Generating additional documentation\n\nBetween this file and [the API API list](https://github.com/datacharmer/dbdeployer/blob/master/docs/API/API-1.1.md), you have all the existing documentation for dbdeployer.\nShould you need additional formats, though, dbdeployer is able to generate them on-the-fly. Tou will need the docs-enabled binaries: in the distribution list, you will find:\n\n* dbdeployer-1.42.0-docs.linux.tar.gz\n* dbdeployer-1.42.0-docs.osx.tar.gz\n* dbdeployer-1.42.0.linux.tar.gz\n* dbdeployer-1.42.0.osx.tar.gz\n\nThe executables containing ``-docs`` in their name have the same capabilities of the regular ones, but in addition they can run the *hidden* command ``tree``, with alias ``docs``.\n\nThis is the command used to help generating the API documentation.\n\n    $ dbdeployer-docs tree -h\n    This command is only used to create API documentation. \n    You can, however, use it to show the command structure at a glance.\n    \n    Usage:\n      dbdeployer tree [flags]\n    \n    Aliases:\n      tree, docs\n    \n    Flags:\n          --api               Writes API template\n          --bash-completion   creates bash-completion file\n      -h, --help              help for tree\n          --man-pages         Writes man pages\n          --markdown-pages    Writes Markdown docs\n          --rst-pages         Writes Restructured Text docs\n          --show-hidden       Shows also hidden commands\n    \n    \n\nIn addition to the API template, the ``tree`` command can produce:\n\n* man pages;\n* Markdown documentation;\n* Restructured Text pages;\n* Command line completion script (see next section).\n\n# Command line completion\n\nThere is a file ``./docs/dbdeployer_completion.sh``, which is automatically generated with dbdeployer API documentation. If you want to use bash completion on the command line, copy the file to the bash completion directory. For example:\n\n    # Linux\n    $ sudo cp ./docs/dbdeployer_completion.sh /etc/bash_completion.d\n    $ source /etc/bash_completion\n\n    # OSX\n    $ sudo cp ./docs/dbdeployer_completion.sh /usr/local/etc/bash_completion.d\n    $ source /usr/local/etc/bash_completion\n\nThen, you can use completion as follows:\n\n    $ dbdeployer [tab]\n        admin  defaults  delete  deploy  global  sandboxes  unpack  usage  versions\n    $ dbdeployer dep[tab]\n    $ dbdeployer deploy [tab][tab]\n        multiple     replication  single\n    $ dbdeployer deploy s[tab]\n    $ dbdeployer deploy single --b[tab][tab]\n        --base-port=     --bind-address=\n\n# Using dbdeployer source for other projects\n\nIf you need to create sandboxes from other Go apps, see  [dbdeployer-as-library.md](https://github.com/datacharmer/dbdeployer/blob/master/docs/coding/dbdeployer-as-library.md).\n\n# Exporting dbdeployer structure\n\nIf you want to use dbdeployer from other applications, it may be useful to have the command structure in a format that can be used from several programming languages. \nThere is a command for that (since dbdeployer 1.28.0) that produces the commands and options information structure as a JSON structure.\n\n    $ dbdeployer export -h\n    Exports the command line structure, with examples and flags, to a JSON structure.\n    If a command is given, only the structure of that command and below will be exported.\n    Given the length of the output, it is recommended to pipe it to a file or to another command.\n    \n    Usage:\n      dbdeployer export [command [sub-command]] [ > filename ] [ | command ]  [flags]\n    \n    Aliases:\n      export, dump\n    \n    Flags:\n          --force-output-to-terminal   display output to terminal regardless of pipes being used\n      -h, --help                       help for export\n    \n    \n\n# Semantic versioning\n\nAs of version 1.0.0, dbdeployer adheres to the principles of [semantic versioning](https://semver.org/). A version number is made of Major, Minor, and Revision. When changes are applied, the following happens:\n\n* Backward-compatible bug fixes increment the **Revision** number.\n* Backward-compatible new features increment the **Minor** number.\n* Backward incompatible changes (either features or bug fixes that break compatibility with the API) increment the **Major** number.\n\nThe starting API is defined in [API-1.0.md](https://github.com/datacharmer/dbdeployer/blob/master/docs/API/API-1.0.md) (generated manually.)\nThe file [API-1.1.md](https://github.com/datacharmer/dbdeployer/blob/master/docs/API/API-1.1.md) contains the same API definition, but was generated automatically and can be used to better compare the initial API with further version.\n\n\n# Do not edit\n\n``README.md`` is **generated** by processing ``./mkreadme/readme_template.md``. Do not edit it directly, as its contents will be overwritten.\n\n'