b'# morph\n[![Build Status](https://travis-ci.org/DBCDK/morph.svg?branch=master)](https://travis-ci.org/DBCDK/morph)\n\nMorph is a tool for managing existing NixOS hosts - basically a fancy wrapper around `nix-build`, `nix copy`, `nix-env`, `/nix/store/.../bin/switch-to-configuration`, `scp` and more.\nMorph supports updating multiple hosts in a row, and with support for health checks makes it fairly safe to do so.\n\n\n## Notable features\n\n* multi host support\n* health checks\n* no state\n\n\n## Installation and prerequisites\n\nMorph requires `nix` (at least v2), `ssh` and `scp` to be available on `$PATH`.\nIt should work on any modern Linux distribution, but NixOS is the only one we test on.\n\nPre-built binaries are not provided, since we install morph through an overlay.\n\nThe easiest way to get morph up and running is to fork this repository and run `nix-shell --command make-build`, which should result in a store path containing the morph binary.\nConsider checking out a specific tag, or at least pin the version of morph you\'re using somehow.\n\n\n## Using morph\n\nAll commands support a `--help` flag; `morph --help` as of v1.0.0:\n```\n$ morph --help\nusage: morph [<flags>] <command> [<args> ...]\n\nNixOS host manager\n\nFlags:\n  --help     Show context-sensitive help (also try --help-long and --help-man).\n  --version  Show application version.\n  --dry-run  Don\'t do anything, just eval and print changes\n\nCommands:\n  help [<command>...]\n    Show help.\n\n  build [<flags>] <deployment>\n    Evaluate and build deployment configuration to the local Nix store\n\n  push [<flags>] <deployment>\n    Build and transfer items from the local Nix store to target machines\n\n  deploy [<flags>] <deployment> <switch-action>\n    Build, push and activate new configuration on machines according to switch-action\n\n  check-health [<flags>] <deployment>\n    Run health checks\n\n  upload-secrets [<flags>] <deployment>\n    Upload secrets\n\n  exec [<flags>] <deployment> <command>...\n    Execute arbitrary commands on machines\n```\n\nNotably, `morph deploy` requires a `<switch-action>`.\nThe switch-action must be one of `dry-activate`, `test`, `switch` or `boot` corresponding to `nixos-rebuild` arguments of the same name.\nRefer to the [NixOS manual](https://nixos.org/nixos/manual/index.html#sec-changing-config) for a detailed description of switch-actions.\n\nFor help on this and other commands, run `morph <cmd> --help`.\n\nExample deployments can be found in the `examples` directory, and built as follows:\n```\n$ morph build examples/simple.nix\nSelected 2/2 hosts (name filter:-0, limits:-0):\n\t  0: db01.example.com (secrets: 0, health checks: 0)\n\t  1: web01.example.com (secrets: 0, health checks: 0)\n\n<probably lots of nix-build output>\n\n/nix/store/grvny5ga2i6jdxjjbh2ipdz7h50swi1n-morph\nnix result path:\n/nix/store/grvny5ga2i6jdxjjbh2ipdz7h50swi1n-morph\n```\n\nThe result path is written twice, which is a bit silly, but the reason is that only the result path is written to stdout, and everything else (including `nix-build` output) is redirected to stderr.\nThis makes it easy to use morph for scripting, e.g. if one want to build using morph and then `nix copy` the result path somewhere else.\n\nNote that `examples/simple.nix` contain two different hosts definitions, and a lot of copy paste.\nAll the usual nix tricks can of course be used to avoid duplication.\n\nHosts can be deployed with the `deploy` command as follows:\n`morph deploy examples/simple.nix` (this will fail without modifying `examples/simple.nix`).\n\n\n### Selecting/filtering hosts to build and deploy\n\nAll hosts defined in a deployment file is returned to morph as a list of hosts, which can be manipulated with the following flags:\n\n- `--on glob` can be used to select hosts by name, with support for glob patterns\n- `--limit n` puts an upper limit on the number of hosts\n- `--skip n` ignore the first `n` hosts\n- `--every n` selects every n\'th host, useful for e.g. selecting all even (or odd) numbered hosts\n\n(all relevant commands should already support these flags.)\n\nThe ordering currently can\'t be changed, but should be deterministic because of nix.\n\nMost commands output a header like this:\n```\nSelected 4/17 hosts (name filter:-6, limits:-7):\n\t  0: foo-p02 (secrets: 0, health checks: 1)\n\t  1: foo-p05 (secrets: 0, health checks: 1)\n\t  2: foo-p08 (secrets: 0, health checks: 1)\n\t  3: foo-p11 (secrets: 0, health checks: 1)\n```\n\nThe output is pretty self explanatory, except probably for the last bit of the first line.\n`name filter` shows the change in number of hosts after glob matching on the hosts name, and `limits` shows the change after applying `--limit`, `--skip` and `--every`.\n\n### Environment Variables\n\nMorph supports the following (optional) environment variables:\n\n- `SSH_IDENTITY_FILE` the (local) path to the SSH private key file that should be used\n- `SSH_USER` specifies the user that should be used to connect to the remote system\n- `SSH_SKIP_HOST_KEY_CHECK` if set disables host key verification\n\n### Secrets\n\nFiles can be uploaded without ever ending up in the nix store, by specifying each file as a secret. This will use scp for copying a local file to the remote host.\n\nSee `examples/secrets.nix` or the type definitions in `data/options.nix`.\n\nTo upload secrets, use the `morph upload-secrets` subcommand, or pass `--upload-secrets` to `morph deploy`.\n\n*Note:*\nMorph will automatically create directories parent to `secret.Destination` if they don\'t exist.\nNew dirs will be owned by root:root and have mode 755 (drwxr-xr-x).\nAutomatic directory creation can be disabled by setting `secret.mkDirs = false`.\n\n\n### Health checks\n\nMorph has support for two types of health checks:\n\n* command based health checks, which are run on the target host (success defined as exit code == 0)\n* HTTP based health checks, which are run from the host Morph is running on (success defined as HTTP response codes in the 2xx range)\n\nSee `examples/healthchecks.nix` for an example.\n\nThere are no guarantees about the order health checks are run in, so if you need something complex you should write a script for it (e.g. using `pkgs.writeScript`).\nHealth checks will be repeated until success, and the interval can be configured with the `period` option (see `data/options.nix` for details).\n\nIt is currently possible to have expressions like `"test \\"$(systemctl list-units --failed --no-legend --no-pager |wc -l)\\" -eq 0"` (count number of failed systemd units, fail if non-zero) as the first argument in a cmd-healthcheck. This works, but is discouraged, and might break at any time.\n\n### Advanced configuration\n\n**nix.conf-options:** The "network"-attrset supports a sub-attrset named "nixConfig". Options configured here will pass `--option <name> <value>` to all nix commands.\nNote: these options apply to an entire deployment and are *not* configurable on per-host basis.\nThe default is an empty set, meaning that the nix configuration is inherited from the build environment. See `man nix.conf`.\n\n**special deployment options:**\n\n(per-host granularity)\n\n`buildOnly` makes morph skip the "push" and "switch" steps for the given host, even if "morph deploy" or "morph push" is executed. (default: false)\n\n`substituteOnDestination` Sets the `--substitute-on-destination` flag on nix copy, allowing for the deployment target to use substitutes. See `nix copy --help`. (default: false)\n\n\nExample usage of `nixConfig` and deployment module options:\n```\nnetwork = {\n    nixConfig = {\n        "extra-sandbox-paths" = "/foo/bar";\n    };\n};\n\nmachine1 = { ... }: {\n    deployment.buildOnly = true;\n};\n\nmachine2 = { ... }: {\n    deployment.substituteOnDestination = true;\n};\n```\n\n\n## Hacking morph\n\nAll commands mentioned below is available in the nix-shell, if you run `nix-shell` with working dir = project root.\n\n\n### Go dependency management\n\nRun `make-deps` in order to:\n\n1. (re-)install pinned dependencies in vendor-dir.\n2. (re-)generate nix-packaging/deps.nix.\n\nThe former is done to support local dev, since IDE\'s often auto-import dependencies residing in /vendor.\nThe latter is used by the Nix go-builder.\n\nGopkg.toml specifies at which branch/tag each dependency is requested to be at.\nGopkg.lock specifies a concrete revision each dependency is pinned at.\n\nIf you want to bump dependencies to newest commit, run `make-deps update`, this will change Gopkg.lock and nix-packaging/deps.nix, both of which have to be git-committed.\n\nIf you make larger changes to the code base, you can delete both Gopkg.toml and Gopkg.lock and run `dep init` followed by `dep ensure` to create a fresh set of dependency tracking files. **don\'t forget to test** afterwards.\n\n### Building the project with pinned dependencies\n\n$ `nix-shell`\n\n$ `make-build`\n\nAfter successful build, `make-build` automatically invokes `make-env` to install the morph bin on the PATH of your nix-shell instance. Subsequently, it sources the morph bash-completion script to allow for completion of morph cli args and flags.\n\n\n## About the project\n\nWe needed a tool for managing our NixOS servers, and ended up writing one ourself. This is it. We use it on a daily basis to build and deploy our NixOS fleet, and when we need a feature we add it.\n\nMorph is by no means done. The CLI UI might (and probably will) change once in a while.\nThe code is written by humans with an itch to scratch, and we\'re discussing a complete rewrite (so feel free to complain about the source code since we don\'t like it either).\nIt probably wont accidentally switch your local machine, so you should totally try it out, but do consider pinning to a specific git revision.\n'