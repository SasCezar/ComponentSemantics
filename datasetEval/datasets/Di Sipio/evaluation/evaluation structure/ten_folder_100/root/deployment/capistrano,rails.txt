b'# Capistrano::Rails\n\nRails specific tasks for Capistrano v3:\n\n  - `cap deploy:migrate`\n  - `cap deploy:compile_assets`\n\n## Installation\n\nAdd these Capistrano gems to your application\'s Gemfile using `require: false`:\n\n```ruby\ngroup :development do\n  gem "capistrano", "~> 3.10", require: false\n  gem "capistrano-rails", "~> 1.4", require: false\nend\n```\n\nRun the following command to install the gems:\n\n```\nbundle install\n```\n\nThen run the generator to create a basic set of configuration files:\n\n```\nbundle exec cap install\n```\n\n## Usage\n\nRequire everything (`bundler`, `rails/assets` and `rails/migrations`):\n\n```ruby\n# Capfile\nrequire \'capistrano/rails\'\n```\n\nOr require just what you need manually:\n\n```ruby\n# Capfile\nrequire \'capistrano/bundler\' # Rails needs Bundler, right?\nrequire \'capistrano/rails/assets\'\nrequire \'capistrano/rails/migrations\'\n```\n\nPlease note that any `require`s should be placed in `Capfile`, not in `config/deploy.rb`.\n\nYou can tweak some Rails-specific options in `config/deploy.rb`:\n\n```ruby\n# If the environment differs from the stage name\nset :rails_env, \'staging\'\n\n# Defaults to :db role\nset :migration_role, :db\n\n# Defaults to the primary :db server\nset :migration_servers, -> { primary(fetch(:migration_role)) }\n\n# Defaults to false\n# Skip migration if files in db/migrate were not modified\nset :conditionally_migrate, true\n\n# Defaults to [:web]\nset :assets_roles, [:web, :app]\n\n# Defaults to \'assets\'\n# This should match config.assets.prefix in your rails config/application.rb\nset :assets_prefix, \'prepackaged-assets\'\n\n# Defaults to ["/path/to/release_path/public/#{fetch(:assets_prefix)}/.sprockets-manifest*", "/path/to/release_path/public/#{fetch(:assets_prefix)}/manifest*.*"]\n# This should match config.assets.manifest in your rails config/application.rb\nset :assets_manifests, [\'app/assets/config/manifest.js\']\n\n# RAILS_GROUPS env value for the assets:precompile task. Default to nil.\nset :rails_assets_groups, :assets\n\n# If you need to touch public/images, public/javascripts, and public/stylesheets on each deploy\nset :normalize_asset_timestamps, %w{public/images public/javascripts public/stylesheets}\n\n# Defaults to nil (no asset cleanup is performed)\n# If you use Rails 4+ and you\'d like to clean up old assets after each deploy,\n# set this to the number of versions to keep\nset :keep_assets, 2\n```\n\n### Symlinks\n\nYou\'ll probably want to symlink Rails shared files and directories like `log`, `tmp` and `public/uploads`.\nMake sure you enable it by setting `linked_dirs` and `linked_files` options:\n\n```ruby\n# deploy.rb\nappend :linked_dirs, \'log\', \'tmp/pids\', \'tmp/cache\', \'tmp/sockets\', \'vendor/bundle\', \'.bundle\', \'public/system\', \'public/uploads\'\nappend :linked_files, \'config/database.yml\', \'config/secrets.yml\'\n```\n\nIn capistrano < 3.5, before `append` was introduced, you can use `fetch` and `push` to get the same result.\n\n### Recommendations\n\nWhile migrations looks like a concern of the database layer, Rails migrations\nare strictly related to the framework. Therefore, it\'s recommended to set the\nrole to `:app` instead of `:db` like:\n\n```ruby\nset :migration_role, :app\n```\n\nThe advantage is you won\'t need to deploy your application to your database\nserver, and overall a better separation of concerns.\n\n#### Uploading your master.key\n\nYou can use the below configuration to upload your `master.key` to the server if it isn\'t already present.\n\n```ruby\nappend :linked_files, "config/master.key"\n\nnamespace :deploy do\n  namespace :check do\n    before :linked_files, :set_master_key do\n      on roles(:app), in: :sequence, wait: 10 do\n        unless test("[ -f #{shared_path}/config/master.key ]")\n          upload! \'config/master.key\', "#{shared_path}/config/master.key"\n        end\n      end\n    end\n  end\nend\n```\n\n## Contributing\n\n1. Fork it\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am \'Add some feature\'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create new Pull Request\n'