b'# Cloudbreak\n\n[![Maintainability](https://api.codeclimate.com/v1/badges/566493a63aaaf0c61bd4/maintainability)](https://codeclimate.com/github/hortonworks/cloudbreak/maintainability)\n[![Build Automated](https://img.shields.io/docker/automated/hortonworks/cloudbreak.svg)](https://hub.docker.com/r/hortonworks/cloudbreak/)\n[![Build Pulls](https://img.shields.io/docker/pulls/hortonworks/cloudbreak.svg)](https://hub.docker.com/r/hortonworks/cloudbreak/)\n[![Licence](https://img.shields.io/github/license/hortonworks/cloudbreak.svg)](https://github.com/hortonworks/cloudbreak/blob/fix-readme/LICENSE)\n\n* Documentation: https://docs.cloudera.com/management-console/cloud/index.html\n\n# Local Development Setup\nAs of now this document focuses on setting up your development environment on macOS. You\'ll need Homebrew to install certain components in case you don\'t have them already. To get Homebrew please follow the install instructions on the Homebrew homepage: https://brew.sh\n\nAs a prerequisite, you need to have Java 11 installed. You can choose from many options, including the Oracle JDK, Oracle OpenJDK, or an OpenJDK from any of several providers. For help in choosing your JDK, consult [Java is Still Free](https://medium.com/@javachampions/java-is-still-free-2-0-0-6b9aa8d6d244).\n\nYou\'ll need Docker. For Mac, use [Docker Desktop for Mac](https://docs.docker.com/docker-for-mac/install/). Please allocate at least 5 CPU and 8GB Memory to the process.\n\n## Cloudbreak Deployer\n\nThe simplest way to setup the working environment to be able to start Cloudbreak on your local machine is to use the [Cloudbreak Deployer](https://github.com/hortonworks/cloudbreak-deployer).\n\nFirst you need to create a sandbox directory which will store the necessary configuration files and dependencies of [Cloudbreak Deployer](https://github.com/hortonworks/cloudbreak-deployer). This directory must be created outside of the cloned Cloudbreak git repository:\n```\nmkdir cbd-local\ncd cbd-local\n```\n\nThe next step is to download the latest cloudbreak-deployer onto your machine:\n```\ncurl -s https://raw.githubusercontent.com/hortonworks/cloudbreak-deployer/master/install-dev | sh && cbd --version\n```\nAdd the following to the file named `Profile` under the `cbd-local` directory you have just created. Please note, when a `cbd` command is executed you should go to the deployment\'s directory where your `Profile` file is found (`cbd-local` in our example). The `CB_SCHEMA_SCRIPTS_LOCATION` environment variable configures the location of SQL scripts that are in the `core/src/main/resources/schema` directory in the cloned Cloudbreak git repository.\n\nPlease note that the full path needs to be configured and env variables like `$USER` cannot be used. You also have to set a password for your local Cloudbreak in `UAA_DEFAULT_USER_PW`:\n\n```\nexport CB_LOCAL_DEV_LIST=cloudbreak,redbeams,environment,environmentservice,datalake,freeipa\nexport UAA_DEFAULT_SECRET=cbsecret2015\nexport CB_SCHEMA_SCRIPTS_LOCATION=/Users/YOUR_USERNAME/YOUR_PROJECT_DIR/cloudbreak/core/src/main/resources/schema\nexport ENVIRONMENT_SCHEMA_SCRIPTS_LOCATION=/Users/YOUR_USERNAME/YOUR_PROJECT_DIR/environment/src/main/resources/schema\nexport ULU_SUBSCRIBE_TO_NOTIFICATIONS=true\nexport CB_INSTANCE_UUID=$(uuidgen | tr \'[:upper:]\' \'[:lower:]\')\nexport CB_INSTANCE_NODE_ID=5743e6ed-3409-420b-b08b-f688f2fc5db1\nexport PUBLIC_IP=localhost\nexport VAULT_AUTO_UNSEAL=true\nexport DPS_VERSION=2.0.0.0-142\n```\n\nIn order to run Cloudbreak, Periscope, Datalake, FreeIPA, Redbeams, Environment, Auth Mock, IDBroker Mapping Management, and Environments2 API services locally (from IDEA or the command line), put this into your `Profile`:\n```\nexport CB_LOCAL_DEV_LIST=cloudbreak,periscope,datalake,freeipa,redbeams,environment,auth-mock,idbmms,environments2-api\n```\n\nContainers for these applications won\'t be started and Uluwatu (or the `cdp` & `dp` CLI tools) will connect to Java processes running on your host.\nYou don\'t have to put all of the applications into local-dev mode; the value of the variable could be any combination.\n\nYou need to login to DockerHub:\n```\ndocker login\n```\nAnd then provide your username and password.\n\nThen run these commands:\n```\ncbd start\ncbd logs cloudbreak\n```\n\nIn case you see `org.apache.ibatis.migration.MigrationException` at the end of the logs run these commands to fix the DB and the re-run the previous section (`cbd start` and `logs`):\n```\ncbd migrate cbdb up\ncbd migrate cbdb pending\n```\n\nFor some reason if you encounter a similar problem with Periscope, Datalake, FreeIPA, Redbeams, or Environment, then run the following commands and you can restart the Cloudbreak Deployer:\n```\ncbd migrate periscopedb up\ncbd migrate periscopedb pending\n\ncbd migrate datalakedb up\ncbd migrate datalakedb pending\n\ncbd migrate freeipadb up\ncbd migrate freeipadb pending\n\ncbd migrate redbeamsdb up\ncbd migrate redbeamsdb pending\n\ncbd migrate environmentdb up\ncbd migrate environmentdb pending\n```\nYou can track any other application\'s logs to check the results by executing the following command:\n```\ncbd logs periscope # or datalake, freeipa, redbeams, environment, auth-mock, idbmms, environments2-api\n```\n\nIf everything went well then Cloudbreak will be available on https://localhost. For more details and config parameters please check the documentation of [Cloudbreak Deployer](https://github.com/hortonworks/cloudbreak-deployer).\n\nThe deployer has generated a `certs` directory under `cbd-local` directory which will be needed later on to set up IDEA properly.\n\nIf not already present, you shall create an `etc` directory under `cbd-local` directory and place your Cloudera Manager license file `license.txt` there. This is essential for Auth Mock to start successfully. (Request a licence from us)\n\n### Linux difference\n\nCloudbreak Deployer is unable to determine the IP address on a Linux machine. Therefore, you must add in the public IP address manually to your `Profile`.\n\n```\nexport PUBLIC_IP=127.0.0.1\n```\n\n## IDEA\n\n### Check out the Cloudbreak repository\n\nGo to https://github.com/hortonworks/cloudbreak, either clone or download the repository, use SSH which is described here: https://help.github.com/articles/connecting-to-github-with-ssh/\n\n### Project settings in IDEA\n\nIn IDEA set your SDK to your Java version under:\n\nSet project SDK\n```\nFile -> Project Structure -> Project Settings -> Project -> Project SDK -> 11\n```\n\nSet project Language level\n```\nFile -> Project Structure -> Project Settings -> Project -> Project Language Level -> 11\n```\n\nSet Gradle JVM\n```\nIntelliJ IDEA -> Preferences -> Build, Execution, Deployment -> Gradle -> Gradle JVM -> 11\n```\n\n### Import project\n\nCloudbreak can be imported into IDEA as a Gradle project by specifying the `cloudbreak` repo root under Import Project. Once it is done, you need to import the proper code formatter by using the `File -> Import Settings...` menu and selecting the `idea_settings.jar` located in the `config/idea` directory in the Cloudbreak git repository.\n\nAlso you need to import inspection settings called `inpsections.xml` located in `config/idea`:\n```\nIntelliJ IDEA -> Preferences -> Editor -> Inspections -> Settings icon -> Import Profile\n```\n\nCloudbreak integrates with GRPC components. This results in generated files inside the project with big file sizes. By default IDEA ignores anything that is more than 8MB, resulting in unknown classes inside the IDEA context. To circumvent this, you need to add this property to your IDEA properties.\n\nGo to `Help -> Edit Custom Properties...`, then insert\n```\n#parse files up until 15MB\nidea.max.intellisense.filesize=15000\n```\nRestart IDEA, and Rebuild.\n\n### Running Cloudbreak in IDEA\n\nTo launch the Cloudbreak application execute the `com.sequenceiq.cloudbreak.CloudbreakApplication` class (set `Use classpath of module` to `cloudbreak.core.main`) with the following JVM options:\n```\n-Dcb.db.port.5432.tcp.addr=localhost\n-Dcb.db.port.5432.tcp.port=5432\n-Dserver.port=9091\n-Daltus.ums.host=localhost\n-Dvault.addr=localhost\n-Dvault.root.token=<VAULT_ROOT_TOKEN>\n-Dcb.enabledplatforms=""\n```\n\nReplace `<VAULT_ROOT_TOKEN>` with the value of `VAULT_ROOT_TOKEN` from the `Profile` file.\n\nThe database migration scripts are run automatically by Cloudbreak, but this migration can be turned off with the `-Dcb.schema.migration.auto=false` JVM option.\n\n### Configure Before launch task\n\nIn order to be able to determine the local Cloudbreak version automatically, a `Before launch` task has to be configured for the project in IntelliJ IDEA. The required steps are the following:\n\n1. Open `Run/Debug Configurations` for the project\n2. Select your project\'s application\n3. Click on `Add` in the `Before launch` panel\n4. Select `Run Gradle Task` with the following parameters\n    1. `Gradle project`: `cloudbreak:core`\n    2. `Tasks`: `buildInfo`\n5. Confirm and restart the application\n\n### Running Periscope in IDEA\n\nAfter importing the `cloudbreak` repo root, launch the Periscope application by executing the `com.sequenceiq.periscope.PeriscopeApplication` class (set `Use classpath of module` to `cloudbreak.autoscale.main`) with the following JVM options:\n\n````\n-Dperiscope.db.port.5432.tcp.addr=localhost\n-Dperiscope.db.port.5432.tcp.port=5432\n-Dperiscope.cloudbreak.url=http://localhost:9091\n-Dserver.port=8085\n-Daltus.ums.host=localhost\n-Dvault.root.token=<VAULT_ROOT_TOKEN>\n````\n\nReplace `<VAULT_ROOT_TOKEN>` with the value of `VAULT_ROOT_TOKEN` from the `Profile` file.\n\n### Running Datalake in IDEA\n\nAfter importing the `cloudbreak` repo root, launch the Datalake application by executing the `com.sequenceiq.datalake.DatalakeApplication` class (set `Use classpath of module` to `cloudbreak.datalake.main`) with the following JVM options:\n\n````\n-Dserver.port=8086\n-Dcb.enabledplatforms=AWS,AZURE,MOCK\n-Dvault.root.token=<VAULT_ROOT_TOKEN>\n-Dvault.addr=localhost\n````\n\nReplace `<VAULT_ROOT_TOKEN>` with the value of `VAULT_ROOT_TOKEN` from the `Profile` file.\n\n### Running FreeIPA in IDEA\n\nAfter importing the `cloudbreak` repo root, launch the FreeIPA application by executing the `com.sequenceiq.freeipa.FreeIpaApplication` class (set `Use classpath of module` to `cloudbreak.freeipa.main`) with the following JVM options:\n\n````\n-Dfreeipa.db.addr=localhost\n-Dserver.port=8090\n-Dvault.root.token=<VAULT_ROOT_TOKEN>\n````\n\nReplace `<VAULT_ROOT_TOKEN>` with the value of `VAULT_ROOT_TOKEN` from the `Profile` file.\n\n### Running Redbeams in IDEA\n\nAfter importing the `cloudbreak` repo root, launch the Redbeams application by executing the `com.sequenceiq.redbeams.RedbeamsApplication` class (set `Use classpath of module` to `cloudbreak.redbeams.main`) with the following JVM options:\n\n```\n-Dredbeams.db.port.5432.tcp.addr=localhost\n-Dredbeams.db.port.5432.tcp.port=5432\n-Dredbeams.cloudbreak.url=http://localhost:8080\n-Dserver.port=8087\n-Daltus.ums.host=localhost\n-Dvault.root.token=<VAULT_ROOT_TOKEN>\n-Dcb.enabledplatforms=AWS,AZURE,MOCK\n```\n\nReplace `<VAULT_ROOT_TOKEN>` with the value of `VAULT_ROOT_TOKEN` from the `Profile` file.\n\n### Running the Environment service in IDEA\n\nAfter importing the `cloudbreak` repo root, launch the Environment application by executing the `com.sequenceiq.environment.EnvironmentApplication` class (set `Use classpath of module` to `cloudbreak.environment.main`) with the following JVM options:\n\n```\n-Dvault.root.token=<VAULT_ROOT_TOKEN>\n-Denvironment.enabledplatforms="YARN,YCLOUD,AWS,AZURE,MOCK"\n```\n\nReplace `<VAULT_ROOT_TOKEN>` with the value of `VAULT_ROOT_TOKEN` from the `Profile` file.\n\nthen add these field to the environment variables:\n```\nAWS_ACCESS_KEY_ID=\nAWS_SECRET_ACCESS_KEY=\nCB_AWS_ACCOUNT_ID=\n```\n\n### Running Auth Mock in IDEA\n\nAfter importing the `cloudbreak` repo root, launch the Auth Mock application by executing the `com.sequenceiq.caas.MockCaasApplication` class (set `Use classpath of module` to `cloudbreak.mock-caas.main`) with the following JVM options:\n\n```\n-Dauth.config.dir=<CBD_LOCAL_ETC>\n```\n\nReplace `<CBD_LOCAL_ETC>` with the full path of your `cbd-local/etc` directory that shall already contain the Cloudera Manager license file `license.txt`.\n\n## Command line\n\n### Running Cloudbreak from the Command Line\nTo run Cloudbreak from the command line, run the following Gradle command:\n\n```\n./gradlew :core:buildInfo :core:bootRun -PjvmArgs="-Dcb.db.port.5432.tcp.addr=localhost \\\n-Dcb.db.port.5432.tcp.port=5432 \\\n-Dcb.schema.scripts.location=$(pwd)/core/src/main/resources/schema\n-Dserver.port=9091 \\\n-Daltus.ums.host=localhost\n-Dvault.root.token=<VAULT_ROOT_TOKEN>\n-Dspring.config.location=$(pwd)/cloud-common/src/main/resources/application.yml,$(pwd)/core/build/resources/main/application.properties"\n```\n\nReplace `<VAULT_ROOT_TOKEN>` with the value of `VAULT_ROOT_TOKEN` from the `Profile` file.\n\nThe database migration scripts are run automatically by Cloudbreak, this migration can be turned off with the `-Dcb.schema.migration.auto=false` JVM option.\n\n### Running Periscope from the Command Line\nTo run Periscope from the command line, run the following Gradle command:\n\n````\n./gradlew :autoscale:bootRun -PjvmArgs="-Dperiscope.db.port.5432.tcp.addr=localhost \\\n-Dperiscope.db.port.5432.tcp.port=5432 \\\n-Dperiscope.cloudbreak.url=http://localhost:8080 \\\n-Dperiscope.schema.scripts.location=$(pwd)/autoscale/src/main/resources/schema\n-Dserver.port=8085 \\\n-Daltus.ums.host=localhost \\\n-Dvault.root.token=<VAULT_ROOT_TOKEN> \\\n-Dspring.config.location=$(pwd)/autoscale/src/main/resources/application.yml,$(pwd)/autoscale/build/resources/main/application.properties"\n````\n\nReplace `<VAULT_ROOT_TOKEN>` with the value of `VAULT_ROOT_TOKEN` from the `Profile` file.\n\n### Running Datalake from the Command Line\nTo run Datalake from the command line, run the following Gradle command:\n\n````\n./gradlew :datalake:bootRun -PjvmArgs="-Dvault.root.token=<VAULT_ROOT_TOKEN> \\\n-Dserver.port=8086 \\\n-Dspring.config.location=$(pwd)/datalake/src/main/resources/application.yml,$(pwd)/datalake/build/resources/main/application.properties"\n````\n\nReplace `<VAULT_ROOT_TOKEN>` with the value of `VAULT_ROOT_TOKEN` from the `Profile` file.\n\n### Running FreeIPA from the Command Line\nTo run the FreeIPA management service from the command line, run the following Gradle command:\n\n````\n./gradlew :freeipa:bootRun -PjvmArgs="-Dfreeipa.db.addr=localhost \\\n-Dserver.port=8090 \\\n-Dvault.root.token=<VAULT_ROOT_TOKEN> \\\n-Dspring.config.location=$(pwd)/freeipa/src/main/resources/application.yml,$(pwd)/freeipa/build/resources/main/application.properties"\n````\n\nReplace `<VAULT_ROOT_TOKEN>` with the value of `VAULT_ROOT_TOKEN` from the `Profile` file.\n\n### Running Redbeams from the Command Line\nTo run Redbeams from the command line, run the following Gradle command:\n\n```\n./gradlew :redbeams:bootRun -PjvmArgs="-Dredbeams.db.port.5432.tcp.addr=localhost \\\n-Dredbeams.db.port.5432.tcp.port=5432 \\\n-Dredbeams.cloudbreak.url=http://localhost:8080 \\\n-Dredbeams.schema.scripts.location=$(pwd)/redbeams/src/main/resources/schema \\\n-Dserver.port=8087 \\\n-Daltus.ums.host=localhost \\\n-Dvault.root.token=<VAULT_ROOT_TOKEN> \\\n-Dspring.config.location=$(pwd)/redbeams/src/main/resources/application.yml,$(pwd)/redbeams/build/resources/main/application.properties"\n```\n\nReplace `<VAULT_ROOT_TOKEN>` with the value of `VAULT_ROOT_TOKEN` from the `Profile` file.\n\n### Running the Environment service from the Command Line\nTo run the Environment service from the command line, run the following Gradle command:\n\n```\n./gradlew :environment:bootRun -PjvmArgs="\\\n-Denvironment.cloudbreak.url=http://localhost:8080 \\\n-Dvault.root.token=<VAULT_ROOT_TOKEN> \\\n-Dspring.config.location=$(pwd)/environment/src/main/resources/application.yml,$(pwd)/environment/build/resources/main/application.properties"\n```\n\nReplace `<VAULT_ROOT_TOKEN>` with the value of `VAULT_ROOT_TOKEN` from the `Profile` file.\n\n### Running Auth Mock from the Command Line\nTo run Auth Mock from the command line, run the following Gradle command:\n\n```\n./gradlew :mock-caas:bootRun -PjvmArgs="\\\n-Dauth.config.dir=<CBD_LOCAL_ETC> \\\n-Dspring.config.location=$(pwd)/mock-caas/src/main/resources/application.yml"\n```\n\nReplace `<CBD_LOCAL_ETC>` with the full path of your `cbd-local/etc` directory that shall already contain the Cloudera Manager license file `license.txt`.\n\n## Database development\n\nIf any schema change is required in Cloudbreak services databases (`cbdb` / `periscopedb` / `datalakedb` / `redbeamsdb` / `environmentdb` / `freeipadb`), then the developer needs to write SQL scripts\n to migrate the database accordingly. The schema migration is managed by [MyBatis Migrations](https://github.com/mybatis/migrations) in Cloudbreak and the cbd tool provides an easy-to-use wrapper for it. The syntax for using the migration commands is `cbd migrate <database name> <command> [parameters]` e.g. `cbd migrate cbdb status`.\nCreate a SQL template for schema changes:\n```\ncbd migrate cbdb new "CLOUD-123 schema change for new feature"\n```\nAs as result of the above command an SQL file template is generated under the path specified in `CB_SCHEMA_SCRIPTS_LOCATION` environment variable, which is defined in `Profile`. The structure of the generated SQL template looks like the following:\n```\n-- // CLOUD-123 schema change for new feature\n-- Migration SQL that makes the change goes here.\n\n\n\n-- //@UNDO\n-- SQL to undo the change goes here.\n```\nOnce you have implemented your SQLs then you can execute them with:\n```\ncbd migrate <database-name> up\n```\nMake sure pending SQLs to run as well:\n```\ncbd migrate <database-name> pending\n```\nIf you would like to rollback the last SQL file, then just use the down command:\n```\ncbd migrate <database-name> down\n```\nOn order to check the status of database\n```\ncbd migrate <database-name> status\n\n#Every script that has not been executed will be marked as ...pending... in the output of status command:\n\n------------------------------------------------------------------------\n-- MyBatis Migrations - status\n------------------------------------------------------------------------\nID             Applied At          Description\n================================================================================\n20150421140021 2015-07-08 10:04:28 create changelog\n20150421150000 2015-07-08 10:04:28 CLOUD-607 create baseline schema\n20150507121756 2015-07-08 10:04:28 CLOUD-576 change instancegrouptype hostgroup to core\n20151008090632    ...pending...    CLOUD-123 schema change for new feature\n\n------------------------------------------------------------------------\n```\n\n## Building\n\nGradle is used for build and dependency management. The Gradle wrapper is added to the Cloudbreak git repository, so building can be done with:\n```\n./gradlew clean build\n```\n\n## How to reach CM UI directly(not through Knox)\nWith the current design on the cluster\'s gateway node there is an NGiNX which is responsible for routing requests through Knox by default. \nBut there are cases when the CM UI needs to be reached directly. It is possible on the same port by the same NGiNX on the `clouderamanager/` path of the provisioned cluster.\n\nFor example: `https://tb-nt-local.tb-local.xcu2-8y8x.workload-dev.cloudera.com/clouderamamanger/`\n\n> Be aware of that this routing mechanism is based on cookies, so if you have problems to reach the CM UI directly especially when you reached any service through Knox previously then the deletion of cookies could solve your issues.\n\n## Additional info\n> * [Cloudbreak Service Provider Interface (SPI)](https://github.com/hortonworks/cloudbreak/blob/master/docs/spi.md)\n'