b'# html-pdf-chrome\n\n[![npm version](https://badge.fury.io/js/html-pdf-chrome.svg)](https://badge.fury.io/js/html-pdf-chrome)\n[![Linux & Mac Build Status](https://travis-ci.org/westy92/html-pdf-chrome.svg?branch=master)](https://travis-ci.org/westy92/html-pdf-chrome/)\n[![Windows Build Status](https://ci.appveyor.com/api/projects/status/github/westy92/html-pdf-chrome?branch=master&svg=true)](https://ci.appveyor.com/project/westy92/html-pdf-chrome)\n[![Maintainability](https://api.codeclimate.com/v1/badges/9395ded652937f958a41/maintainability)](https://codeclimate.com/github/westy92/html-pdf-chrome/maintainability)\n[![Code Coverage](https://codecov.io/gh/westy92/html-pdf-chrome/branch/master/graph/badge.svg)](https://codecov.io/gh/westy92/html-pdf-chrome)\n[![Dependency Status](https://david-dm.org/westy92/html-pdf-chrome.svg)](https://david-dm.org/westy92/html-pdf-chrome)\n[![Known Vulnerabilities](https://snyk.io/test/github/westy92/html-pdf-chrome/badge.svg)](https://snyk.io/test/github/westy92/html-pdf-chrome)\n\nHTML to PDF converter via Chrome/Chromium.\n\n## Prerequisites\n\n* Latest Chrome/Chromium (latest recommended, 61 or higher required but some features may not work)\n* Windows, macOS, or Linux\n* Node.js 6 or later (we only test on 8+, mileage may vary)\n\n## Installation\n\n```bash\nnpm install --save html-pdf-chrome\n```\n\n## Usage\n\n__Note:__ It is _strongly_ recommended that you keep Chrome running side-by-side with Node.js.  There is significant overhead starting up Chrome for each PDF generation which can be easily avoided.\n\nIt\'s suggested to use [pm2](http://pm2.keymetrics.io/) to ensure Chrome continues to run.  If it crashes, it will restart automatically.\n\nAs of this writing, headless Chrome uses about 65mb of RAM while idle.\n\n```bash\n# install pm2 globally\nnpm install -g pm2\n# start Chrome and be sure to specify a port to use in the html-pdf-chrome options.\npm2 start google-chrome \\\n  --interpreter none \\\n  -- \\\n  --headless \\\n  --disable-gpu \\\n  --disable-translate \\\n  --disable-extensions \\\n  --disable-background-networking \\\n  --safebrowsing-disable-auto-update \\\n  --disable-sync \\\n  --metrics-recording-only \\\n  --disable-default-apps \\\n  --no-first-run \\\n  --mute-audio \\\n  --hide-scrollbars \\\n  --remote-debugging-port=<port goes here>\n# run your Node.js app.\n```\n\nTypeScript:\n\n```js\nimport * as htmlPdf from \'html-pdf-chrome\';\n\nconst html = \'<p>Hello, world!</p>\';\nconst options: htmlPdf.CreateOptions = {\n  port: 9222, // port Chrome is listening on\n};\n\n// async\nconst pdf = await htmlPdf.create(html, options);\nawait pdf.toFile(\'test.pdf\');\nconst base64 = pdf.toBase64();\nconst buffer = pdf.toBuffer();\n\n// Promise\nhtmlPdf.create(html, options).then((pdf) => pdf.toFile(\'test.pdf\'));\nhtmlPdf.create(html, options).then((pdf) => pdf.toBase64());\nhtmlPdf.create(html, options).then((pdf) => pdf.toBuffer());\n```\n\nJavaScript:\n\n```js\nconst htmlPdf = require(\'html-pdf-chrome\');\n\nconst html = \'<p>Hello, world!</p>\';\nconst options = {\n  port: 9222, // port Chrome is listening on\n};\n\nhtmlPdf.create(html, options).then((pdf) => pdf.toFile(\'test.pdf\'));\nhtmlPdf.create(html, options).then((pdf) => pdf.toBase64());\nhtmlPdf.create(html, options).then((pdf) => pdf.toBuffer());\n```\n\nView the full documentation in the source code.\n\n### Using an External Site\n\n```js\nimport * as htmlPdf from \'html-pdf-chrome\';\n\nconst options: htmlPdf.CreateOptions = {\n  port: 9222, // port Chrome is listening on\n};\n\nconst url = \'https://github.com/westy92/html-pdf-chrome\';\nconst pdf = await htmlPdf.create(url, options);\n```\n\n### Using a Template Engine\n\nPug (formerly known as Jade)\n\n```js\nimport * as htmlPdf from \'html-pdf-chrome\';\nimport * as pug from \'pug\';\n\nconst template = pug.compile(\'p Hello, #{noun}!\');\nconst templateData = {\n  noun: \'world\',\n};\nconst options: htmlPdf.CreateOptions = {\n  port: 9222, // port Chrome is listening on\n};\n\nconst html = template(templateData);\nconst pdf = await htmlPdf.create(html, options);\n```\n\n### HTTP Headers\n\nSpecify additional headers you wish to send with your request via `CreateOptions.extraHTTPHeaders`.\n\n```js\nconst options: HtmlPdf.CreateOptions = {\n  port: 9222, // port Chrome is listening on\n  extraHTTPHeaders: {\n    \'Authorization\': \'Bearer 123\',\n    \'X-Custom-Test-Header\': \'This is great!\',\n  },\n};\n\nconst pdf = await HtmlPdf.create(\'https://httpbin.org/headers\', options);\n```\n\n### Custom Headers and Footers\n\n_Note: Requires Chrome 65 or later._\n\nYou can optionally provide an HTML template for a custom header and/or footer.\n\nA few classes can be used to inject printing values:\n\n* `date` - formatted print date\n* `title` - document title\n* `url` - document location\n* `pageNumber` - current page number\n* `totalPages` - total pages in the document\n\nYou can tweak the margins with the `printOptions` of `marginTop`, `marginBottom`, `marginLeft`, and `marginRight`.\n\nAt this time, you must inline any images using [base64 encoding](http://www.bigfastblog.com/embed-base64-encoded-images-inline-in-html).\n\nYou can view how Chrome lays out the templates [here](https://cs.chromium.org/chromium/src/components/printing/resources/print_preview_page.html).\n\n#### Example\n\n```js\nconst pdf = await htmlPdf.create(html, {\n  port,\n  printOptions: {\n    displayHeaderFooter: true,\n    headerTemplate: `\n      <div class="text center">\n        Page <span class="pageNumber"></span> of <span class="totalPages"></span>\n      </div>\n    `,\n    footerTemplate: \'<div class="text center">Custom footer!</div>\',\n  },\n});\n```\n\n### Trigger Render Completion\n\nThere are a few `CompletionTrigger` types that wait for something to occur before triggering PDF printing.\n\n* Callback - waits for a callback to be called\n* Element - waits for an element to be injected into the DOM\n* Event - waits for an Event to fire\n* Timer - waits a specified amount of time\n* Variable - waits for a variable to be set to `true`\n* Custom - extend `htmlPdf.CompletionTrigger.CompletionTrigger`\n\n```js\nconst options: htmlPdf.CreateOptions = {\n  port: 9222, // port Chrome is listening on\n  completionTrigger: new htmlPdf.CompletionTrigger.Timer(5000), // milliseconds\n};\n\n// Alternative completionTrigger options:\nnew htmlPdf.CompletionTrigger.Callback(\n  \'cbName\', // optional, name of the callback to define for the browser to call when finished rendering.  Defaults to \'htmlPdfCb\'.\n  5000 // optional, timeout (milliseconds)\n),\n\nnew htmlPdf.CompletionTrigger.Element(\n  \'div#myElement\', // name of the DOM element to wait for\n  5000 // optional, timeout (milliseconds)\n),\n\nnew htmlPdf.CompletionTrigger.Event(\n  \'myEvent\', // name of the event to listen for\n  \'#myElement\', // optional DOM element CSS selector to listen on, defaults to body\n  5000 // optional timeout (milliseconds)\n),\n\nnew htmlPdf.CompletionTrigger.Variable(\n  \'myVarName\', // optional, name of the variable to wait for.  Defaults to \'htmlPdfDone\'\n  5000 // optional, timeout (milliseconds)\n),\n```\n\n## License\n\nhtml-pdf-chrome is released under the MIT License.\n'