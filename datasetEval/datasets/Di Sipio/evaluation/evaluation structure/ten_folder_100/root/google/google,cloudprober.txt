b'[![Build\nStatus](https://travis-ci.org/google/cloudprober.svg?branch=master)](https://travis-ci.org/google/cloudprober)\n[![Build status](https://ci.appveyor.com/api/projects/status/ypg1okxxfedwkksk?svg=true)](https://ci.appveyor.com/project/manugarg/cloudprober-wwcpu)\n![Docker Pulls](https://img.shields.io/docker/pulls/cloudprober/cloudprober.svg)\n\n# Cloudprober\n\n[cloudprober.org](https://cloudprober.org)\n\nCloudprober is a monitoring software that makes it super-easy to monitor\navailability and performance of various components of your system. Cloudprober\nemploys the "active" monitoring model. It runs probes against (or on) your\ncomponents to verify that they are working as expected. For example, it can run\na probe to verify that your frontends can reach your backends. Similarly it can\nrun a probe to verify that your in-Cloud VMs can actually reach your on-premise\nsystems. This kind of monitoring makes it possible to monitor your systems\'\ninterfaces regardless of the implementation and helps you quickly pin down\nwhat\'s broken in your system.\n\n![Cloudprober Use\nCase](https://cloudprober.org/diagrams/cloudprober_use_case.svg)\n\n## Features\n\n*   Integration with open source monitoring stack of\n    [Prometheus](http://prometheus.io) and [Grafana](http://grafana.com).\n    Cloudprober exports probe results as counter based metrics that work well\n    with Prometheus and Grafana.\n*   Automated target discovery for Cloud targets. GCP is supported\n    out-of-the-box; other Cloud providers can be added easily.\n*   Integration with [StackDriver](https://cloud.google.com/stackdriver/). If\n    configured, Cloudprober exports probe results to StackDriver as custom\n    metrics.\n*   Built-in implementations for the most common probe types: PING, HTTP, UDP,\n    DNS.\n*   Arbitrary, complex probes can be run through the external probe type. For\n    example, you could write a simple script to insert and delete a row in your\n    database, and execute this script through the \'EXTERNAL\' probe type.\n*   Fast and efficient ping prober implementation that allows probing thousands\n    of hosts with minimal resources.\n*   Strong focus on ease of deployment. Cloudprober is written entirely in Go\n    and compiles into a static binary. It can be easily deployed through docker\n    containers. Thanks to the automated target discovery, there is usually no\n    need to re-deploy or re-configure cloudprober in response to the most of the\n    changes.\n*   Go templates based config file with substitutions for standard variables\n    like project, zone, instance names etc allows for using same config file\n    across the fleet.\n*   Low footprint. Cloudprober docker image is small, containing just the\n    statically compiled binary and it takes very little CPU and RAM to run even\n    a large number of probes.\n*   Extensible architecture. Cloudprober can be easily extended along most of\n    the dimensions. Adding support for other Cloud targets, monitoring systems\n    (e.g. Graphite, Amazon Cloudwatch) and even a new probe type, is\n    straight-forward and fairly easy.\n\nVisit [cloudprober.org](https://cloudprober.org) to\n[get started](https://cloudprober.org/getting-started/) with Cloudprober.\n\nWe\'d love to hear your feedback. If you\'re using Cloudprober, would you please\nmind sharing how you use it by adding a comment to the [issue #123](\nhttps://github.com/google/cloudprober/issues/123). It will be a great help in\nplanning Cloudprober\'s future progression.\n\nJoin [Cloudprober Slack](https://join.slack.com/t/cloudprober/shared_invite/enQtNjA1OTkyOTk3ODc3LWQzZDM2ZWUyNTI0M2E4NmM4NTIyMjM5M2E0MDdjMmU1NGQ3NWNiMjU4NTViMWMyMjg0M2QwMDhkZGZjZmFlNGE) or [mailing list](\nhttps://groups.google.com/forum/#!forum/cloudprober) for questions and\ndiscussion about Cloudprober.\n'