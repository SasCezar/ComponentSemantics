b'# Generate sitemaps with ease\n\n[![Latest Version on Packagist](https://img.shields.io/packagist/v/spatie/laravel-sitemap.svg?style=flat-square)](https://packagist.org/packages/spatie/laravel-sitemap)\n[![Software License](https://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat-square)](LICENSE.md)\n[![Build Status](https://img.shields.io/travis/spatie/laravel-sitemap/master.svg?style=flat-square)](https://travis-ci.org/spatie/laravel-sitemap)\n[![Quality Score](https://img.shields.io/scrutinizer/g/spatie/laravel-sitemap.svg?style=flat-square)](https://scrutinizer-ci.com/g/spatie/laravel-sitemap)\n[![StyleCI](https://styleci.io/repos/65549848/shield)](https://styleci.io/repos/65549848)\n[![Total Downloads](https://img.shields.io/packagist/dt/spatie/laravel-sitemap.svg?style=flat-square)](https://packagist.org/packages/spatie/laravel-sitemap)\n\nThis package can generate a sitemap without you having to add urls to it manually. This works by crawling your entire site.\n\n```php\nuse Spatie\\Sitemap\\SitemapGenerator;\n\nSitemapGenerator::create(\'https://example.com\')->writeToFile($path);\n```\n\nYou can also create your sitemap manually:\n\n```php\nuse Carbon\\Carbon;\nuse Spatie\\Sitemap\\Sitemap;\nuse Spatie\\Sitemap\\Tags\\Url;\n\nSitemap::create()\n\n    ->add(Url::create(\'/home\')\n        ->setLastModificationDate(Carbon::yesterday())\n        ->setChangeFrequency(Url::CHANGE_FREQUENCY_YEARLY)\n        ->setPriority(0.1))\n\n   ->add(...)\n\n   ->writeToFile($path);\n```\n\nOr you can have the best of both worlds by generating a sitemap and then adding more links to it:\n\n```php\nSitemapGenerator::create(\'https://example.com\')\n   ->getSitemap()\n   ->add(Url::create(\'/extra-page\')\n        ->setLastModificationDate(Carbon::yesterday())\n        ->setChangeFrequency(Url::CHANGE_FREQUENCY_YEARLY)\n        ->setPriority(0.1))\n\n    ->add(...)\n\n    ->writeToFile($path);\n```\n\nYou can also control the maximum depth of the sitemap:\n```php\nSitemapGenerator::create(\'https://example.com\')\n    ->configureCrawler(function (Crawler $crawler) {\n        $crawler->setMaximumDepth(3);\n    })\n    ->writeToFile($path);\n```\n\nThe generator has [the ability to execute JavaScript](https://github.com/spatie/laravel-sitemap#executing-javascript) on each page so links injected into the dom by JavaScript will be crawled as well.\n\n## Installation\n\nFirst, install the package via composer:\n\n``` bash\ncomposer require spatie/laravel-sitemap\n```\n\nThe package will automatically register itself.\n\nIf you want to update your sitemap automatically and frequently you need to perform [some extra steps](https://github.com/spatie/laravel-sitemap#generating-the-sitemap-frequently).\n\n\n## Configuration\n\nYou can override the default options for the crawler. First publish the configuration:\n\n```bash\nphp artisan vendor:publish --provider="Spatie\\Sitemap\\SitemapServiceProvider" --tag=config\n```\n\nThis will copy the default config to `config/sitemap.php` where you can edit it.\n\n```php\nuse GuzzleHttp\\RequestOptions;\nuse Spatie\\Sitemap\\Crawler\\Profile;\n\nreturn [\n\n    /*\n     * These options will be passed to GuzzleHttp\\Client when it is created.\n     * For in-depth information on all options see the Guzzle docs:\n     *\n     * http://docs.guzzlephp.org/en/stable/request-options.html\n     */\n    \'guzzle_options\' => [\n\n        /*\n         * Whether or not cookies are used in a request.\n         */\n        RequestOptions::COOKIES => true,\n\n        /*\n         * The number of seconds to wait while trying to connect to a server.\n         * Use 0 to wait indefinitely.\n         */\n        RequestOptions::CONNECT_TIMEOUT => 10,\n\n        /*\n         * The timeout of the request in seconds. Use 0 to wait indefinitely.\n         */\n        RequestOptions::TIMEOUT => 10,\n\n        /*\n         * Describes the redirect behavior of a request.\n         */\n        RequestOptions::ALLOW_REDIRECTS => false,\n    ],\n    \n    /*\n     * The sitemap generator can execute JavaScript on each page so it will\n     * discover links that are generated by your JS scripts. This feature\n     * is powered by headless Chrome.\n     */\n    \'execute_javascript\' => false,\n    \n    /*\n     * The package will make an educated guess as to where Google Chrome is installed. \n     * You can also manually pass it\'s location here.\n     */\n    \'chrome_binary_path\' => \'\',\n\n    /*\n     * The sitemap generator uses a CrawlProfile implementation to determine\n     * which urls should be crawled for the sitemap.\n     */\n    \'crawl_profile\' => Profile::class,\n    \n];\n```\n\n## Usage\n\n### Generating a sitemap\n\nThe easiest way is to crawl the given domain and generate a sitemap with all found links.\nThe destination of the sitemap should be specified by `$path`.\n\n```php\nSitemapGenerator::create(\'https://example.com\')->writeToFile($path);\n```\n\nThe generated sitemap will look similar to this:\n\n```xml\n<?xml version="1.0" encoding="UTF-8"?>\n<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">\n    <url>\n        <loc>https://example.com</loc>\n        <lastmod>2016-01-01T00:00:00+00:00</lastmod>\n        <changefreq>daily</changefreq>\n        <priority>0.8</priority>\n    </url>\n    <url>\n        <loc>https://example.com/page</loc>\n        <lastmod>2016-01-01T00:00:00+00:00</lastmod>\n        <changefreq>daily</changefreq>\n        <priority>0.8</priority>\n    </url>\n\n    ...\n</urlset>\n```\n\n### Customizing the sitemap generator\n\n#### Define a custom Crawl Profile\n\nYou can create a custom crawl profile by implementing the `Spatie\\Crawler\\CrawlProfile` interface and by customizing the `shouldCrawl()` method for full control over what url/domain/sub-domain should be crawled:\n\n```php\nuse Spatie\\Crawler\\CrawlProfile;\nuse Psr\\Http\\Message\\UriInterface;\n\nclass CustomCrawlProfile extends CrawlProfile\n{\n    public function shouldCrawl(UriInterface $url): bool\n    {\n        if ($url->getHost() !== \'localhost\') {\n            return false;\n        }\n        \n        return $url->getPath() === \'/\';\n    }\n}\n```\n\nand register your `CustomCrawlProfile::class` in `config/sitemap.php`.\n\n```php\nreturn [\n    ...\n    /*\n     * The sitemap generator uses a CrawlProfile implementation to determine\n     * which urls should be crawled for the sitemap.\n     */\n    \'crawl_profile\' => CustomCrawlProfile::class,\n    \n];\n```\n\n#### Changing properties\n\nTo change the `lastmod`, `changefreq` and `priority` of the contact page:\n\n```php\nuse Carbon\\Carbon;\nuse Spatie\\Sitemap\\SitemapGenerator;\nuse Spatie\\Sitemap\\Tags\\Url;\n\nSitemapGenerator::create(\'https://example.com\')\n   ->hasCrawled(function (Url $url) {\n       if ($url->segment(1) === \'contact\') {\n           $url->setPriority(0.9)\n               ->setLastModificationDate(Carbon::create(\'2016\', \'1\', \'1\'));\n       }\n\n       return $url;\n   })\n   ->writeToFile($sitemapPath);\n```\n\n#### Leaving out some links\n\nIf you don\'t want a crawled link to appear in the sitemap, just don\'t return it in the callable you pass to `hasCrawled `.\n\n```php\nuse Spatie\\Sitemap\\SitemapGenerator;\nuse Spatie\\Sitemap\\Tags\\Url;\n\nSitemapGenerator::create(\'https://example.com\')\n   ->hasCrawled(function (Url $url) {\n       if ($url->segment(1) === \'contact\') {\n           return;\n       }\n\n       return $url;\n   })\n   ->writeToFile($sitemapPath);\n```\n\n#### Preventing the crawler from crawling some pages\nYou can also instruct the underlying crawler to not crawl some pages by passing a `callable` to `shouldCrawl`.\n\n**Note:** `shouldCrawl` will only work with the default crawl `Profile` or custom crawl profiles that implement a `shouldCrawlCallback` method. \n \n```php\nuse Spatie\\Sitemap\\SitemapGenerator;\nuse Psr\\Http\\Message\\UriInterface;\n\nSitemapGenerator::create(\'https://example.com\')\n   ->shouldCrawl(function (UriInterface $url) {\n       // All pages will be crawled, except the contact page.\n       // Links present on the contact page won\'t be added to the\n       // sitemap unless they are present on a crawlable page.\n       \n       return strpos($url->getPath(), \'/contact\') === false;\n   })\n   ->writeToFile($sitemapPath);\n```\n\n#### Configuring the crawler\n\nThe crawler itself can be [configured](https://github.com/spatie/crawler#usage) to do a few different things.\n\nYou can configure the crawler used by the sitemap generator, for example: to ignore robot checks; like so.\n\n```php\nSitemapGenerator::create(\'http://localhost:4020\')\n    ->configureCrawler(function (Crawler $crawler) {\n        $crawler->ignoreRobots();\n    })\n    ->writeToFile($file);\n```\n\n#### Limiting the amount of pages crawled\n\nYou can limit the amount of pages crawled by calling `setMaximumCrawlCount`\n\n```php\nuse Spatie\\Sitemap\\SitemapGenerator;\n\nSitemapGenerator::create(\'https://example.com\')\n    ->setMaximumCrawlCount(500) // only the 500 first pages will be crawled\n    ...\n```\n\n#### Executing Javascript\n\n   \nThe sitemap generator can execute JavaScript on each page so it will discover links that are generated by your JS scripts. You can enable this feature by setting `execute_javascript` in the config file to `true`.\n\nUnder the hood, [headless Chrome](https://github.com/spatie/browsershot) is used to execute JavaScript. Here are some pointers on [how to install it on your system](https://github.com/spatie/browsershot#requirements).\n\nThe package will make an educated guess as to where Chrome is installed on your system. You can also manually pass the location of the Chrome binary to  `executeJavaScript()`.\n\n\n#### Manually adding links\n\nYou can manually add links to a sitemap:\n\n```php\nuse Spatie\\Sitemap\\SitemapGenerator;\nuse Spatie\\Sitemap\\Tags\\Url;\n\nSitemapGenerator::create(\'https://example.com\')\n    ->getSitemap()\n    // here we add one extra link, but you can add as many as you\'d like\n    ->add(Url::create(\'/extra-page\')->setPriority(0.5))\n    ->writeToFile($sitemapPath);\n```\n\n#### Adding alternates to links\n\nMultilingual sites may have several alternate versions of the same page (one per language). Based on the previous example adding an alternate can be done as follows:\n\n```php\nuse Spatie\\Sitemap\\SitemapGenerator;\nuse Spatie\\Sitemap\\Tags\\Url;\n\nSitemapGenerator::create(\'https://example.com\')\n    ->getSitemap()\n    // here we add one extra link, but you can add as many as you\'d like\n    ->add(Url::create(\'/extra-page\')->setPriority(0.5)->addAlternate(\'/extra-pagina\', \'nl\'))\n    ->writeToFile($sitemapPath);\n```\n\nNote the ```addAlternate``` function which takes an alternate URL and the locale it belongs to.\n\n### Manually creating a sitemap\n\nYou can also create a sitemap fully manual:\n\n```php\nuse Carbon\\Carbon;\n\nSitemap::create()\n   ->add(\'/page1\')\n   ->add(\'/page2\')\n   ->add(Url::create(\'/page3\')->setLastModificationDate(Carbon::create(\'2016\', \'1\', \'1\')))\n   ->writeToFile($sitemapPath);\n```\n\n### Creating a sitemap index\nYou can create a sitemap index:\n```php\nuse Spatie\\Sitemap\\SitemapIndex;\n\nSitemapIndex::create()\n    ->add(\'/pages_sitemap.xml\')\n    ->add(\'/posts_sitemap.xml\')\n    ->writeToFile($sitemapIndexPath);\n```\n\nYou can pass a `Spatie\\Sitemap\\Tags\\Sitemap` object to manually set the `lastModificationDate` property.\n\n```php\nuse Spatie\\Sitemap\\SitemapIndex;\nuse Spatie\\Sitemap\\Tags\\Sitemap;\n\nSitemapIndex::create()\n    ->add(\'/pages_sitemap.xml\')\n    ->add(Sitemap::create(\'/posts_sitemap.xml\')\n        ->setLastModificationDate(Carbon::yesterday()))\n    ->writeToFile($sitemapIndexPath);\n```\n\nthe generated sitemap index will look similar to this:\n\n```xml\n<?xml version="1.0" encoding="UTF-8"?>\n<sitemapindex xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">\n   <sitemap>\n      <loc>http://www.example.com/pages_sitemap.xml</loc>\n      <lastmod>2016-01-01T00:00:00+00:00</lastmod>\n   </sitemap>\n   <sitemap>\n      <loc>http://www.example.com/posts_sitemap.xml</loc>\n      <lastmod>2015-12-31T00:00:00+00:00</lastmod>\n   </sitemap>\n</sitemapindex>\n```\n\n### Create a sitemap index with sub-sequent sitemaps\n\nYou can call the `maxTagsPerSitemap` method to generate a\nsitemap that only contains the given amount of tags\n\n```php\nuse Spatie\\Sitemap\\SitemapGenerator;\n\nSitemapGenerator::create(\'https://example.com\')\n    ->maxTagsPerSitemap(20000)\n    ->writeToFile(public_path(\'sitemap.xml\'));\n\n```\n\n\n\n## Generating the sitemap frequently\n\nYour site will probably be updated from time to time. In order to let your sitemap reflect these changes, you can run the generator periodically. The easiest way of doing this is to make use of Laravel\'s default scheduling capabilities.\n\nYou could set up an artisan command much like this one:\n\n```php\nnamespace App\\Console\\Commands;\n\nuse Illuminate\\Console\\Command;\nuse Spatie\\Sitemap\\SitemapGenerator;\n\nclass GenerateSitemap extends Command\n{\n    /**\n     * The console command name.\n     *\n     * @var string\n     */\n    protected $signature = \'sitemap:generate\';\n\n    /**\n     * The console command description.\n     *\n     * @var string\n     */\n    protected $description = \'Generate the sitemap.\';\n\n    /**\n     * Execute the console command.\n     *\n     * @return mixed\n     */\n    public function handle()\n    {\n        // modify this to your own needs\n        SitemapGenerator::create(config(\'app.url\'))\n            ->writeToFile(public_path(\'sitemap.xml\'));\n    }\n}\n```\n\nThat command should then be scheduled in the console kernel.\n\n```php\n// app/Console/Kernel.php\nprotected function schedule(Schedule $schedule)\n{\n    ...\n    $schedule->command(\'sitemap:generate\')->daily();\n    ...\n}\n```\n\n## Changelog\n\nPlease see [CHANGELOG](CHANGELOG.md) for more information what has changed recently.\n\n## Testing\n\nFirst start the test server in a separate terminal session:\n\n``` bash\ncd tests/server\n./start_server.sh\n```\n\nWith the server running you can execute the tests:\n\n``` bash\n$ composer test\n```\n\n## Contributing\n\nPlease see [CONTRIBUTING](CONTRIBUTING.md) for details.\n\n## Security\n\nIf you discover any security related issues, please email freek@spatie.be instead of using the issue tracker.\n\n## Postcardware\n\nYou\'re free to use this package, but if it makes it to your production environment we highly appreciate you sending us a postcard from your hometown, mentioning which of our package(s) you are using.\n\nOur address is: Spatie, Samberstraat 69D, 2060 Antwerp, Belgium.\n\nWe publish all received postcards [on our company website](https://spatie.be/en/opensource/postcards).\n\n## Credits\n\n- [Freek Van der Herten](https://github.com/freekmurze)\n- [All Contributors](../../contributors)\n\n## Support us\n\nSpatie is a webdesign agency based in Antwerp, Belgium. You\'ll find an overview of all our open source projects [on our website](https://spatie.be/opensource).\n\nDoes your business depend on our contributions? Reach out and support us on [Patreon](https://www.patreon.com/spatie). \nAll pledges will be dedicated to allocating workforce on maintenance and new awesome stuff.\n\n## License\n\nThe MIT License (MIT). Please see [License File](LICENSE.md) for more information.\n'