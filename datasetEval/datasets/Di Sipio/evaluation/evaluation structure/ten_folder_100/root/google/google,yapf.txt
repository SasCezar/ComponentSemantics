b'====\nYAPF\n====\n\n.. image:: https://badge.fury.io/py/yapf.svg\n    :target: https://badge.fury.io/py/yapf\n    :alt: PyPI version\n\n.. image:: https://travis-ci.org/google/yapf.svg?branch=master\n    :target: https://travis-ci.org/google/yapf\n    :alt: Build status\n\n.. image:: https://coveralls.io/repos/google/yapf/badge.svg?branch=master\n    :target: https://coveralls.io/r/google/yapf?branch=master\n    :alt: Coverage status\n\n\nIntroduction\n============\n\nMost of the current formatters for Python --- e.g., autopep8, and pep8ify ---\nare made to remove lint errors from code. This has some obvious limitations.\nFor instance, code that conforms to the PEP 8 guidelines may not be\nreformatted.  But it doesn\'t mean that the code looks good.\n\nYAPF takes a different approach. It\'s based off of `\'clang-format\' <https://cl\nang.llvm.org/docs/ClangFormat.html>`_, developed by Daniel Jasper. In essence,\nthe algorithm takes the code and reformats it to the best formatting that\nconforms to the style guide, even if the original code didn\'t violate the\nstyle guide. The idea is also similar to the `\'gofmt\' <https://golang.org/cmd/\ngofmt/>`_ tool for the Go programming language: end all holy wars about\nformatting - if the whole codebase of a project is simply piped through YAPF\nwhenever modifications are made, the style remains consistent throughout the\nproject and there\'s no point arguing about style in every code review.\n\nThe ultimate goal is that the code YAPF produces is as good as the code that a\nprogrammer would write if they were following the style guide. It takes away\nsome of the drudgery of maintaining your code.\n\nTry out YAPF with this `online demo <https://yapf.now.sh>`_.\n\n.. footer::\n\n    YAPF is not an official Google product (experimental or otherwise), it is\n    just code that happens to be owned by Google.\n\n.. contents::\n\n\nInstallation\n============\n\nTo install YAPF from PyPI:\n\n.. code-block:: shell\n\n    $ pip install yapf\n\n(optional) If you are using Python 2.7 and want to enable multiprocessing:\n\n.. code-block:: shell\n\n    $ pip install futures\n\nYAPF is still considered in "alpha" stage, and the released version may change\noften; therefore, the best way to keep up-to-date with the latest development\nis to clone this repository.\n\nNote that if you intend to use YAPF as a command-line tool rather than as a\nlibrary, installation is not necessary. YAPF supports being run as a directory\nby the Python interpreter. If you cloned/unzipped YAPF into ``DIR``, it\'s\npossible to run:\n\n.. code-block:: shell\n\n    $ PYTHONPATH=DIR python DIR/yapf [options] ...\n\n\nPython versions\n===============\n\nYAPF supports Python 2.7 and 3.6.4+. (Note that some Python 3 features may fail\nto parse with Python versions before 3.6.4.)\n\nYAPF requires the code it formats to be valid Python for the version YAPF itself\nruns under. Therefore, if you format Python 3 code with YAPF, run YAPF itself\nunder Python 3 (and similarly for Python 2).\n\n\nUsage\n=====\n\nOptions::\n\n    usage: yapf [-h] [-v] [-d | -i] [-r | -l START-END] [-e PATTERN]\n                [--style STYLE] [--style-help] [--no-local-style] [-p]\n                [-vv]\n                [files [files ...]]\n\n    Formatter for Python code.\n\n    positional arguments:\n      files\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -v, --version         show version number and exit\n      -d, --diff            print the diff for the fixed source\n      -i, --in-place        make changes to files in place\n      -r, --recursive       run recursively over directories\n      -l START-END, --lines START-END\n                            range of lines to reformat, one-based\n      -e PATTERN, --exclude PATTERN\n                            patterns for files to exclude from formatting\n      --style STYLE         specify formatting style: either a style name (for\n                            example "pep8" or "google"), or the name of a file\n                            with style settings. The default is pep8 unless a\n                            .style.yapf or setup.cfg file located in the same\n                            directory as the source or one of its parent\n                            directories (for stdin, the current directory is\n                            used).\n      --style-help          show style settings and exit; this output can be saved\n                            to .style.yapf to make your settings permanent\n      --no-local-style      don\'t search for local style definition\n      -p, --parallel        Run yapf in parallel when formatting multiple files.\n                            Requires concurrent.futures in Python 2.X\n      -vv, --verbose        Print out file names while processing\n\n\n------------\nReturn Codes\n------------\n\nNormally YAPF returns zero on successful program termination and non-zero otherwise.\n\nIf ``--diff`` is supplied, YAPF returns zero when no changes were necessary, non-zero\notherwise (including program error). You can use this in a CI workflow to test that code\nhas been YAPF-formatted.\n\n---------------------------------------------\nExcluding files from formatting (.yapfignore)\n---------------------------------------------\n\nIn addition to exclude patterns provided on commandline, YAPF looks for additional\npatterns specified in a file named ``.yapfignore`` located in the working directory from\nwhich YAPF is invoked.\n\n\nFormatting style\n================\n\nThe formatting style used by YAPF is configurable and there are many "knobs"\nthat can be used to tune how YAPF does formatting. See the ``style.py`` module\nfor the full list.\n\nTo control the style, run YAPF with the ``--style`` argument. It accepts one of\nthe predefined styles (e.g., ``pep8`` or ``google``), a path to a configuration\nfile that specifies the desired style, or a dictionary of key/value pairs.\n\nThe config file is a simple listing of (case-insensitive) ``key = value`` pairs\nwith a ``[yapf]`` heading. For example:\n\n.. code-block:: ini\n\n    [yapf]\n    based_on_style = pep8\n    spaces_before_comment = 4\n    split_before_logical_operator = true\n\nThe ``based_on_style`` setting determines which of the predefined styles this\ncustom style is based on (think of it like subclassing). Four\nstyles are predefined: ``pep8`` (default), ``chromium``, ``google`` and \n``facebook`` (see ``_STYLE_NAME_TO_FACTORY`` in style.py_).\n\n.. _style.py: https://github.com/google/yapf/blob/master/yapf/yapflib/style.py#L445\n\nIt\'s also possible to do the same on the command line with a dictionary. For\nexample:\n\n.. code-block:: shell\n\n    --style=\'{based_on_style: chromium, indent_width: 4}\'\n\nThis will take the ``chromium`` base style and modify it to have four space\nindentations.\n\nYAPF will search for the formatting style in the following manner:\n\n1. Specified on the command line\n2. In the ``[style]`` section of a ``.style.yapf`` file in either the current\n   directory or one of its parent directories.\n3. In the ``[yapf]`` section of a ``setup.cfg`` file in either the current\n   directory or one of its parent directories.\n4. In the ``[style]`` section of a ``~/.config/yapf/style`` file in your home\n   directory.\n\nIf none of those files are found, the default style is used (PEP8).\n\n\nExample\n=======\n\nAn example of the type of formatting that YAPF can do, it will take this ugly\ncode:\n\n.. code-block:: python\n\n    x = {  \'a\':37,\'b\':42,\n\n    \'c\':927}\n\n    y = \'hello \'\'world\'\n    z = \'hello \'+\'world\'\n    a = \'hello {}\'.format(\'world\')\n    class foo  (     object  ):\n      def f    (self   ):\n        return       37*-+2\n      def g(self, x,y=42):\n          return y\n    def f  (   a ) :\n      return      37+-+a[42-x :  y**3]\n\nand reformat it into:\n\n.. code-block:: python\n\n    x = {\'a\': 37, \'b\': 42, \'c\': 927}\n\n    y = \'hello \' \'world\'\n    z = \'hello \' + \'world\'\n    a = \'hello {}\'.format(\'world\')\n\n\n    class foo(object):\n        def f(self):\n            return 37 * -+2\n\n        def g(self, x, y=42):\n            return y\n\n\n    def f(a):\n        return 37 + -+a[42 - x:y**3]\n\n\nExample as a module\n===================\n\nThe two main APIs for calling yapf are ``FormatCode`` and ``FormatFile``, these\nshare several arguments which are described below:\n\n.. code-block:: python\n\n    >>> from yapf.yapflib.yapf_api import FormatCode  # reformat a string of code\n\n    >>> FormatCode("f ( a = 1, b = 2 )")\n    \'f(a=1, b=2)\\n\'\n\nA ``style_config`` argument: Either a style name or a path to a file that contains\nformatting style settings. If None is specified, use the default style\nas set in ``style.DEFAULT_STYLE_FACTORY``.\n\n.. code-block:: python\n\n    >>> FormatCode("def g():\\n  return True", style_config=\'pep8\')\n    \'def g():\\n    return True\\n\'\n\nA ``lines`` argument: A list of tuples of lines (ints), [start, end],\nthat we want to format. The lines are 1-based indexed. It can be used by\nthird-party code (e.g., IDEs) when reformatting a snippet of code rather\nthan a whole file.\n\n.. code-block:: python\n\n    >>> FormatCode("def g( ):\\n    a=1\\n    b = 2\\n    return a==b", lines=[(1, 1), (2, 3)])\n    \'def g():\\n    a = 1\\n    b = 2\\n    return a==b\\n\'\n\nA ``print_diff`` (bool): Instead of returning the reformatted source, return a\ndiff that turns the formatted source into reformatter source.\n\n.. code-block:: python\n\n    >>> print(FormatCode("a==b", filename="foo.py", print_diff=True))\n    --- foo.py (original)\n    +++ foo.py (reformatted)\n    @@ -1 +1 @@\n    -a==b\n    +a == b\n\nNote: the ``filename`` argument for ``FormatCode`` is what is inserted into\nthe diff, the default is ``<unknown>``.\n\n``FormatFile`` returns reformatted code from the passed file along with its encoding:\n\n.. code-block:: python\n\n    >>> from yapf.yapflib.yapf_api import FormatFile  # reformat a file\n\n    >>> print(open("foo.py").read())  # contents of file\n    a==b\n\n    >>> FormatFile("foo.py")\n    (\'a == b\\n\', \'utf-8\')\n\nThe ``in_place`` argument saves the reformatted code back to the file:\n\n.. code-block:: python\n\n    >>> FormatFile("foo.py", in_place=True)\n    (None, \'utf-8\')\n\n    >>> print(open("foo.py").read())  # contents of file (now fixed)\n    a == b\n\n\nKnobs\n=====\n\n``ALIGN_CLOSING_BRACKET_WITH_VISUAL_INDENT``\n    Align closing bracket with visual indentation.\n\n``ALLOW_MULTILINE_LAMBDAS``\n    Allow lambdas to be formatted on more than one line.\n\n``ALLOW_MULTILINE_DICTIONARY_KEYS``\n    Allow dictionary keys to exist on multiple lines. For example:\n\n    .. code-block:: python\n\n        x = {\n            (\'this is the first element of a tuple\',\n             \'this is the second element of a tuple\'):\n                 value,\n        }\n\n``ALLOW_SPLIT_BEFORE_DEFAULT_OR_NAMED_ASSIGNS``\n    Allow splitting before a default / named assignment in an argument list.\n\n``ALLOW_SPLIT_BEFORE_DICT_VALUE``\n    Allow splits before the dictionary value.\n\n``ARITHMETIC_PRECEDENCE_INDICATION``\n    Let spacing indicate operator precedence. For example:\n\n    .. code-block:: python\n\n        a = 1 * 2 + 3 / 4\n        b = 1 / 2 - 3 * 4\n        c = (1 + 2) * (3 - 4)\n        d = (1 - 2) / (3 + 4)\n        e = 1 * 2 - 3\n        f = 1 + 2 + 3 + 4\n\n    will be formatted as follows to indicate precedence:\n\n    .. code-block:: python\n\n        a = 1*2 + 3/4\n        b = 1/2 - 3*4\n        c = (1+2) * (3-4)\n        d = (1-2) / (3+4)\n        e = 1*2 - 3\n        f = 1 + 2 + 3 + 4\n\n``BLANK_LINE_BEFORE_NESTED_CLASS_OR_DEF``\n    Insert a blank line before a ``def`` or ``class`` immediately nested within\n    another ``def`` or ``class``. For example:\n\n    .. code-block:: python\n\n        class Foo:\n                           # <------ this blank line\n            def method():\n                pass\n\n``BLANK_LINE_BEFORE_MODULE_DOCSTRING``\n    Insert a blank line before a module docstring.\n\n``BLANK_LINE_BEFORE_CLASS_DOCSTRING``\n    Insert a blank line before a class-level docstring.\n\n``BLANK_LINES_AROUND_TOP_LEVEL_DEFINITION``\n    Sets the number of desired blank lines surrounding top-level function and\n    class definitions. For example:\n\n    .. code-block:: python\n\n        class Foo:\n            pass\n                           # <------ having two blank lines here\n                           # <------ is the default setting\n        class Bar:\n            pass\n\n``COALESCE_BRACKETS``\n    Do not split consecutive brackets. Only relevant when\n    ``DEDENT_CLOSING_BRACKETS`` or ``INDENT_CLOSING_BRACKETS``\n    is set. For example:\n\n    .. code-block:: python\n\n        call_func_that_takes_a_dict(\n            {\n                \'key1\': \'value1\',\n                \'key2\': \'value2\',\n            }\n        )\n\n    would reformat to:\n\n    .. code-block:: python\n\n        call_func_that_takes_a_dict({\n            \'key1\': \'value1\',\n            \'key2\': \'value2\',\n        })\n\n\n``COLUMN_LIMIT``\n    The column limit (or max line-length)\n\n``CONTINUATION_ALIGN_STYLE``\n    The style for continuation alignment. Possible values are:\n\n    - ``SPACE``: Use spaces for continuation alignment. This is default\n      behavior.\n    - ``FIXED``: Use fixed number (CONTINUATION_INDENT_WIDTH) of columns\n      (ie: CONTINUATION_INDENT_WIDTH/INDENT_WIDTH tabs) for continuation\n      alignment.\n    - ``VALIGN-RIGHT``: Vertically align continuation lines with indent\n      characters. Slightly right (one more indent character) if cannot\n      vertically align continuation lines with indent characters.\n\n      For options ``FIXED``, and ``VALIGN-RIGHT`` are only available when\n      ``USE_TABS`` is enabled.\n\n``CONTINUATION_INDENT_WIDTH``\n    Indent width used for line continuations.\n\n``DEDENT_CLOSING_BRACKETS``\n    Put closing brackets on a separate line, dedented, if the bracketed\n    expression can\'t fit in a single line. Applies to all kinds of brackets,\n    including function definitions and calls. For example:\n\n    .. code-block:: python\n\n        config = {\n            \'key1\': \'value1\',\n            \'key2\': \'value2\',\n        }  # <--- this bracket is dedented and on a separate line\n\n        time_series = self.remote_client.query_entity_counters(\n            entity=\'dev3246.region1\',\n            key=\'dns.query_latency_tcp\',\n            transform=Transformation.AVERAGE(window=timedelta(seconds=60)),\n            start_ts=now()-timedelta(days=3),\n            end_ts=now(),\n        )  # <--- this bracket is dedented and on a separate line\n\n``DISABLE_ENDING_COMMA_HEURISTIC``\n    Disable the heuristic which places each list element on a separate line if\n    the list is comma-terminated.\n\n``EACH_DICT_ENTRY_ON_SEPARATE_LINE``\n    Place each dictionary entry onto its own line.\n\n``I18N_COMMENT``\n    The regex for an internationalization comment. The presence of this comment\n    stops reformatting of that line, because the comments are required to be\n    next to the string they translate.\n\n``I18N_FUNCTION_CALL``\n    The internationalization function call names. The presence of this function\n    stops reformatting on that line, because the string it has cannot be moved\n    away from the i18n comment.\n\n``INDENT_DICTIONARY_VALUE``\n    Indent the dictionary value if it cannot fit on the same line as the\n    dictionary key. For example:\n\n    .. code-block:: python\n\n        config = {\n            \'key1\':\n                \'value1\',\n            \'key2\': value1 +\n                    value2,\n        }\n\n``INDENT_WIDTH``\n    The number of columns to use for indentation.\n\n``INDENT_BLANK_LINES``\n    Set to ``True`` to prefer indented blank lines rather than empty\n\n``INDENT_CLOSING_BRACKETS``\n    Put closing brackets on a separate line, indented, if the bracketed\n    expression can\'t fit in a single line. Applies to all kinds of brackets,\n    including function definitions and calls. For example:\n\n    .. code-block:: python\n\n        config = {\n            \'key1\': \'value1\',\n            \'key2\': \'value2\',\n            }  # <--- this bracket is indented and on a separate line\n\n        time_series = self.remote_client.query_entity_counters(\n            entity=\'dev3246.region1\',\n            key=\'dns.query_latency_tcp\',\n            transform=Transformation.AVERAGE(window=timedelta(seconds=60)),\n            start_ts=now()-timedelta(days=3),\n            end_ts=now(),\n            )  # <--- this bracket is indented and on a separate line\n\n``JOIN_MULTIPLE_LINES``\n    Join short lines into one line. E.g., single line ``if`` statements.\n\n``NO_SPACES_AROUND_SELECTED_BINARY_OPERATORS``\n    Do not include spaces around selected binary operators. For example:\n\n    .. code-block:: python\n\n        1 + 2 * 3 - 4 / 5\n\n    will be formatted as follows when configured with ``*``, ``/``:\n\n    .. code-block:: python\n\n        1 + 2*3 - 4/5\n\n``SPACES_AROUND_POWER_OPERATOR``\n    Set to ``True`` to prefer using spaces around ``**``.\n\n``SPACES_AROUND_DEFAULT_OR_NAMED_ASSIGN``\n    Set to ``True`` to prefer spaces around the assignment operator for default\n    or keyword arguments.\n\n``SPACES_BEFORE_COMMENT``\n    The number of spaces required before a trailing comment.\n    This can be a single value (representing the number of spaces\n    before each trailing comment) or list of of values (representing\n    alignment column values; trailing comments within a block will\n    be aligned to the first column value that is greater than the maximum\n    line length within the block). For example:\n\n    With ``spaces_before_comment=5``:\n\n    .. code-block:: python\n\n        1 + 1 # Adding values\n\n    will be formatted as:\n\n    .. code-block:: python\n\n        1 + 1     # Adding values <-- 5 spaces between the end of the statement and comment\n\n    With ``spaces_before_comment=15, 20``:\n\n    .. code-block:: python\n\n        1 + 1 # Adding values\n        two + two # More adding\n\n        longer_statement # This is a longer statement\n        short # This is a shorter statement\n\n        a_very_long_statement_that_extends_beyond_the_final_column # Comment\n        short # This is a shorter statement\n\n    will be formatted as:\n\n    .. code-block:: python\n\n        1 + 1          # Adding values <-- end of line comments in block aligned to col 15\n        two + two      # More adding\n\n        longer_statement    # This is a longer statement <-- end of line comments in block aligned to col 20\n        short               # This is a shorter statement\n\n        a_very_long_statement_that_extends_beyond_the_final_column  # Comment <-- the end of line comments are aligned based on the line length\n        short                                                       # This is a shorter statement\n\n``SPACE_BETWEEN_ENDING_COMMA_AND_CLOSING_BRACKET``\n    Insert a space between the ending comma and closing bracket of a list, etc.\n\n``SPLIT_ARGUMENTS_WHEN_COMMA_TERMINATED``\n    Split before arguments if the argument list is terminated by a comma.\n\n``SPLIT_ALL_COMMA_SEPARATED_VALUES``\n    If a comma separated list (``dict``, ``list``, ``tuple``, or function\n    ``def``) is on a line that is too long, split such that all elements\n    are on a single line.\n\n``SPLIT_ALL_TOP_LEVEL_COMMA_SEPARATED_VALUES``\n    Variation on ``SPLIT_ALL_COMMA_SEPARATED_VALUES`` in which, if a\n    subexpression with a comma fits in its starting line, then the\n    subexpression is not split. This avoids splits like the one for\n    ``b`` in this code:\n\n    .. code-block:: python\n      \n      abcdef(\n          aReallyLongThing: int,\n          b: [Int,\n              Int])\n   \n    With the new knob this is split as:\n\n    .. code-block:: python\n      \n      abcdef(\n          aReallyLongThing: int,\n          b: [Int, Int])\n\n``SPLIT_BEFORE_BITWISE_OPERATOR``\n    Set to ``True`` to prefer splitting before ``&``, ``|`` or ``^`` rather\n    than after.\n\n``SPLIT_BEFORE_ARITHMETIC_OPERATOR``\n    Set to ``True`` to prefer splitting before ``+``, ``-``, ``*``, ``/``, ``//``,\n    or ``@`` rather than after.\n\n``SPLIT_BEFORE_CLOSING_BRACKET``\n    Split before the closing bracket if a ``list`` or ``dict`` literal doesn\'t\n    fit on a single line.\n\n``SPLIT_BEFORE_DICT_SET_GENERATOR``\n    Split before a dictionary or set generator (comp_for). For example, note\n    the split before the ``for``:\n\n    .. code-block:: python\n\n        foo = {\n            variable: \'Hello world, have a nice day!\'\n            for variable in bar if variable != 42\n        }\n\n``SPLIT_BEFORE_DOT``\n    Split before the ``.`` if we need to split a longer expression:\n\n    .. code-block:: python\n\n      foo = (\'This is a really long string: {}, {}, {}, {}\'.format(a, b, c, d))\n\n    would reformat to something like:\n\n    .. code-block:: python\n\n      foo = (\'This is a really long string: {}, {}, {}, {}\'\n             .format(a, b, c, d))\n\n``SPLIT_BEFORE_EXPRESSION_AFTER_OPENING_PAREN``\n    Split after the opening paren which surrounds an expression if it doesn\'t\n    fit on a single line.\n\n``SPLIT_BEFORE_FIRST_ARGUMENT``\n    If an argument / parameter list is going to be split, then split before the\n    first argument.\n\n``SPLIT_BEFORE_LOGICAL_OPERATOR``\n    Set to ``True`` to prefer splitting before ``and`` or ``or`` rather than\n    after.\n\n``SPLIT_BEFORE_NAMED_ASSIGNS``\n    Split named assignments onto individual lines.\n\n``SPLIT_COMPLEX_COMPREHENSION``\n    For list comprehensions and generator expressions with multiple clauses\n    (e.g multiple ``for`` calls, ``if`` filter expressions) and which need to\n    be reflowed, split each clause onto its own line. For example:\n\n    .. code-block:: python\n\n      result = [\n          a_var + b_var for a_var in xrange(1000) for b_var in xrange(1000)\n          if a_var % b_var]\n\n    would reformat to something like:\n\n    .. code-block:: python\n\n      result = [\n          a_var + b_var\n          for a_var in xrange(1000)\n          for b_var in xrange(1000)\n          if a_var % b_var]\n\n``SPLIT_PENALTY_AFTER_OPENING_BRACKET``\n    The penalty for splitting right after the opening bracket.\n\n``SPLIT_PENALTY_AFTER_UNARY_OPERATOR``\n    The penalty for splitting the line after a unary operator.\n\n``SPLIT_PENALTY_ARITHMETIC_OPERATOR``\n    The penalty of splitting the line around the ``+``, ``-``, ``*``, ``/``,\n    ``//``, ``%``, and ``@`` operators.\n\n``SPLIT_PENALTY_BEFORE_IF_EXPR``\n    The penalty for splitting right before an ``if`` expression.\n\n``SPLIT_PENALTY_BITWISE_OPERATOR``\n    The penalty of splitting the line around the ``&``, ``|``, and ``^``\n    operators.\n\n``SPLIT_PENALTY_COMPREHENSION``\n    The penalty for splitting a list comprehension or generator expression.\n\n``SPLIT_PENALTY_EXCESS_CHARACTER``\n    The penalty for characters over the column limit.\n\n``SPLIT_PENALTY_FOR_ADDED_LINE_SPLIT``\n    The penalty incurred by adding a line split to the unwrapped line. The more\n    line splits added the higher the penalty.\n\n``SPLIT_PENALTY_IMPORT_NAMES``\n    The penalty of splitting a list of ``import as`` names. For example:\n\n    .. code-block:: python\n\n      from a_very_long_or_indented_module_name_yada_yad import (long_argument_1,\n                                                                long_argument_2,\n                                                                long_argument_3)\n\n    would reformat to something like:\n\n    .. code-block:: python\n\n      from a_very_long_or_indented_module_name_yada_yad import (\n          long_argument_1, long_argument_2, long_argument_3)\n\n``SPLIT_PENALTY_LOGICAL_OPERATOR``\n    The penalty of splitting the line around the ``and`` and ``or`` operators.\n\n``USE_TABS``\n    Use the Tab character for indentation.\n\n(Potentially) Frequently Asked Questions\n========================================\n\n--------------------------------------------\nWhy does YAPF destroy my awesome formatting?\n--------------------------------------------\n\nYAPF tries very hard to get the formatting correct. But for some code, it won\'t\nbe as good as hand-formatting. In particular, large data literals may become\nhorribly disfigured under YAPF.\n\nThe reasons for this are manyfold. In short, YAPF is simply a tool to help\nwith development. It will format things to coincide with the style guide, but\nthat may not equate with readability.\n\nWhat can be done to alleviate this situation is to indicate regions YAPF should\nignore when reformatting something:\n\n.. code-block:: python\n\n    # yapf: disable\n    FOO = {\n        # ... some very large, complex data literal.\n    }\n\n    BAR = [\n        # ... another large data literal.\n    ]\n    # yapf: enable\n\nYou can also disable formatting for a single literal like this:\n\n.. code-block:: python\n\n    BAZ = {\n        (1, 2, 3, 4),\n        (5, 6, 7, 8),\n        (9, 10, 11, 12),\n    }  # yapf: disable\n\nTo preserve the nice dedented closing brackets, use the\n``dedent_closing_brackets`` in your style. Note that in this case all\nbrackets, including function definitions and calls, are going to use\nthat style.  This provides consistency across the formatted codebase.\n\n-------------------------------\nWhy Not Improve Existing Tools?\n-------------------------------\n\nWe wanted to use clang-format\'s reformatting algorithm. It\'s very powerful and\ndesigned to come up with the best formatting possible. Existing tools were\ncreated with different goals in mind, and would require extensive modifications\nto convert to using clang-format\'s algorithm.\n\n-----------------------------\nCan I Use YAPF In My Program?\n-----------------------------\n\nPlease do! YAPF was designed to be used as a library as well as a command line\ntool. This means that a tool or IDE plugin is free to use YAPF.\n\n-----------------------------------------\nI still get non Pep8 compliant code! Why?\n-----------------------------------------\n\nYAPF tries very hard to be fully PEP 8 compliant. However, it is paramount\nto not risk altering the semantics of your code. Thus, YAPF tries to be as\nsafe as possible and does not change the token stream\n(e.g., by adding parenthesis).\nAll these cases however, can be easily fixed manually. For instance,\n\n.. code-block:: python\n\n    from my_package import my_function_1, my_function_2, my_function_3, my_function_4, my_function_5\n\n    FOO = my_variable_1 + my_variable_2 + my_variable_3 + my_variable_4 + my_variable_5 + my_variable_6 + my_variable_7 + my_variable_8\n\nwon\'t be split, but you can easily get it right by just adding parenthesis:\n\n.. code-block:: python\n\n    from my_package import (my_function_1, my_function_2, my_function_3,\n                            my_function_4, my_function_5)\n\n    FOO = (my_variable_1 + my_variable_2 + my_variable_3 + my_variable_4 +\n           my_variable_5 + my_variable_6 + my_variable_7 + my_variable_8)\n\nGory Details\n============\n\n----------------\nAlgorithm Design\n----------------\n\nThe main data structure in YAPF is the ``UnwrappedLine`` object. It holds a list\nof ``FormatToken``\\s, that we would want to place on a single line if there were\nno column limit. An exception being a comment in the middle of an expression\nstatement will force the line to be formatted on more than one line. The\nformatter works on one ``UnwrappedLine`` object at a time.\n\nAn ``UnwrappedLine`` typically won\'t affect the formatting of lines before or\nafter it. There is a part of the algorithm that may join two or more\n``UnwrappedLine``\\s into one line. For instance, an if-then statement with a\nshort body can be placed on a single line:\n\n.. code-block:: python\n\n    if a == 42: continue\n\nYAPF\'s formatting algorithm creates a weighted tree that acts as the solution\nspace for the algorithm. Each node in the tree represents the result of a\nformatting decision --- i.e., whether to split or not to split before a token.\nEach formatting decision has a cost associated with it. Therefore, the cost is\nrealized on the edge between two nodes. (In reality, the weighted tree doesn\'t\nhave separate edge objects, so the cost resides on the nodes themselves.)\n\nFor example, take the following Python code snippet. For the sake of this\nexample, assume that line (1) violates the column limit restriction and needs to\nbe reformatted.\n\n.. code-block:: python\n\n    def xxxxxxxxxxx(aaaaaaaaaaaa, bbbbbbbbb, cccccccc, dddddddd, eeeeee):  # 1\n        pass                                                               # 2\n\nFor line (1), the algorithm will build a tree where each node (a\n``FormattingDecisionState`` object) is the state of the line at that token given\nthe decision to split before the token or not. Note: the ``FormatDecisionState``\nobjects are copied by value so each node in the graph is unique and a change in\none doesn\'t affect other nodes.\n\nHeuristics are used to determine the costs of splitting or not splitting.\nBecause a node holds the state of the tree up to a token\'s insertion, it can\neasily determine if a splitting decision will violate one of the style\nrequirements. For instance, the heuristic is able to apply an extra penalty to\nthe edge when not splitting between the previous token and the one being added.\n\nThere are some instances where we will never want to split the line, because\ndoing so will always be detrimental (i.e., it will require a backslash-newline,\nwhich is very rarely desirable). For line (1), we will never want to split the\nfirst three tokens: ``def``, ``xxxxxxxxxxx``, and ``(``. Nor will we want to\nsplit between the ``)`` and the ``:`` at the end. These regions are said to be\n"unbreakable." This is reflected in the tree by there not being a "split"\ndecision (left hand branch) within the unbreakable region.\n\nNow that we have the tree, we determine what the "best" formatting is by finding\nthe path through the tree with the lowest cost.\n\nAnd that\'s it!\n'