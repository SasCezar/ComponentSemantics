b'# A Fluent Builder For Schema.org Types And ld+json Generator\n\n[![Latest Version on Packagist](https://img.shields.io/packagist/v/spatie/schema-org.svg?style=flat-square)](https://packagist.org/packages/spatie/schema-org)\n[![MIT License](https://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat-square)](LICENSE.md)\n[![Code coverage](https://img.shields.io/scrutinizer/coverage/g/spatie/schema-org?style=flat-square)](https://scrutinizer-ci.com/g/spatie/schema-org)\n[![Build Status](https://img.shields.io/travis/spatie/schema-org/master.svg?style=flat-square)](https://travis-ci.org/spatie/schema-org)\n[![Quality Score](https://img.shields.io/scrutinizer/g/spatie/schema-org.svg?style=flat-square)](https://scrutinizer-ci.com/g/spatie/schema-org)\n[![StyleCI](https://styleci.io/repos/74684096/shield?branch=master)](https://styleci.io/repos/74684096)\n[![Total Downloads](https://img.shields.io/packagist/dt/spatie/schema-org.svg?style=flat-square)](https://packagist.org/packages/spatie/schema-org)\n\n`spatie/schema-org` provides a fluent builder for **all** Schema.org types and their properties. The code in `src` is generated from Schema.org\'s [RDFa standards file](https://github.com/schemaorg/schemaorg/blob/master/data/schema.rdfa), so it provides objects and methods for the entire core vocabulary. The classes and methods are also fully documented as a quick reference.\n\n```php\nuse Spatie\\SchemaOrg\\Schema;\n\n$localBusiness = Schema::localBusiness()\n    ->name(\'Spatie\')\n    ->email(\'info@spatie.be\')\n    ->contactPoint(Schema::contactPoint()->areaServed(\'Worldwide\'));\n\necho $localBusiness->toScript();\n```\n\n```html\n<script type="application/ld+json">\n{\n    "@context": "http:\\/\\/schema.org",\n    "@type": "LocalBusiness",\n    "name": "Spatie",\n    "email": "info@spatie.be",\n    "contactPoint": {\n        "@type": "ContactPoint",\n        "areaServed": "Worldwide"\n    }\n}\n</script>\n```\n\n## Installation\n\nYou can install the package via composer:\n\n``` bash\ncomposer require spatie/schema-org\n```\n\n## Usage\n\nAll types can be instantiated through the `Spatie\\SchemaOrg\\Schema` factory class, or with the `new` keyword.\n\n``` php\n$localBusiness = Schema::localBusiness()->name(\'Spatie\');\n\n// Is equivalent to:\n\n$localBusiness = new LocalBusiness();\n$localBusiness->name(\'Spatie\');\n```\n\n> *All types also accept arrays of the expected data type, for example `sameAs` accepts a string or an array of strings.*\n\nAll types also implement the SPL\'s `ArrayAccess` for accessing the properties via array notation:\n\n```php\n$anotherLocalBusiness = new LocalBusiness();\nvar_dump(isset($anotherLocalBusiness[\'name\'])); // => false\n$anotherLocalBusiness[\'name\'] = \'Spatie\';\nvar_dump(isset($anotherLocalBusiness[\'name\'])); // => true\nvar_dump($anotherLocalBusiness[\'name\']); // => \'Spatie\'\nunset($anotherLocalBusiness[\'name\']);\nvar_dump(isset($anotherLocalBusiness[\'name\'])); // => false\n```\n\nTypes can be converted to an array or rendered to a script.\n\n```php\n$localBusiness->toArray();\n\necho $localBusiness->toScript();\n\necho $localBusiness; // Same output as `toScript()`\n```\n\nAdditionally, all types can be converted to a plain JSON string by just calling `json_encode()` with your object:\n\n```php\necho json_encode($localBusiness);\n```\n\nI recommend double checking your structured data with [Google\'s structured data testing tool](https://search.google.com/structured-data/testing-tool).\n\n### Enumerations\n\nAs of v1.6.0, all [Enumeration](http://schema.org/Enumeration) child types are available as classes with constants.\n\n```php\nSchema::book()->bookFormat(Spatie\\SchemaOrg\\BookFormatType::Hardcover);\n```\n\nThere\'s no full API documentation for types and properties. You can refer to [the source](https://github.com/spatie/schema-org/tree/master/src) or to [the schema.org website](http://schema.org).\n\nIf you don\'t want to break the chain of a large schema object, you can use the `if` method to conditionally modify the schema.\n\n```php\nuse Spatie\\SchemaOrg\\LocalBusiness;\nuse Spatie\\SchemaOrg\\Schema;\n\n$business = [\'name\' => \'Spatie\'];\n\n$localBusiness = Schema::localBusiness()\n    ->name($business[\'name\'])\n    ->if(isset($business[\'email\']), function (LocalBusiness $schema) {\n        $schema->email($business[\'email\']);\n    });\n```\n\n### Identifier\n\nAs of v2.6.0 the `identifier` key is replaced by `@id`. This is due to the definition for the `ld+json` syntax.\n\n> All schema.org syntaxes already have built-in representation for URIs and URLs, e.g. in Microdata \'itemid\', in RDFa 1.1, \'resource\', **in JSON-LD, \'@id\'.**\n> \n> &mdash; [schema.org/docs](https://schema.org/docs/datamodel.html#identifierBg) // [PR#102](https://github.com/spatie/schema-org/pull/102) \n\n### Advanced Usage\n\nIf you\'d need to set a custom property, you can use the `setProperty` method.\n\n```php\n$localBusiness->setProperty(\'foo\', \'bar\');\n```\n\nIf you\'d need to retrieve a property, you can use the `getProperty` method. You can optionally pass in a second parameter to provide a default value.\n\n```php\n$localBusiness->getProperty(\'name\'); // \'Spatie\'\n$localBusiness->getProperty(\'bar\'); // null\n$localBusiness->getProperty(\'bar\', \'baz\'); // \'baz\'\n```\n\nAll properties can be retrieved as an array with the `getProperties` method.\n\n```php\n$localBusiness->getProperties(); // [\'name\' => \'Spatie\', ...]\n```\n\nMultiple properties can be set at once using the `addProperties` method.\n\n```php\n$localBusiness->addProperties([\'name\' => \'value\', \'foo\' => \'bar\']);\n```\n\nContext and type can be retrieved with the `getContext` and `getType` methods.\n\n```php\n$localBusiness->getContext(); // \'http://schema.org\'\n$localBusiness->getType(); // \'LocalBusiness\'\n```\n\n### Graph - multiple items\n\nThe Graph has a lot of methods and utilities - the type-safe and simplest way is to use the overloaded methods of the `Spatie\\SchemaOrg\\Schema` class itself. These methods will get an already created or new instance of the requested schema.\n\n```php\n$graph = new Graph();\n\n// Create a product and prelink organization\n$graph\n    ->product()\n    ->name(\'My cool Product\')\n    ->brand($graph->organization());\n\n// Hide the organization from the created script tag\n$graph->hide(\\Spatie\\SchemaOrg\\Organization::class);\n\n// Somewhere else fill out the organization\n$graph\n    ->organization()\n    ->name(\'My awesome Company\');\n\n// Render graph to script tag\necho $graph;\n```\n\nWith these tools the graph is a collection of all available schemas, can link these schemas with each other and prevent helper schemas from being rendered in the script-tag.\n\n## Known Issues\n\n- The `Float` type isn\'t available since it\'s a reserved keyword in PHP\n- The `Physician` type isn\'t available since it extends a type from the `health` extension spec\n\n## Changelog\n\nPlease see [CHANGELOG](CHANGELOG.md) for more information what has changed recently.\n\n## Testing\n\n``` bash\n$ composer test\n```\n\n## Contributing\n\nPlease see [CONTRIBUTING](CONTRIBUTING.md) for details.\n\n## Security\n\nIf you discover any security related issues, please email freek@spatie.be instead of using the issue tracker.\n\n## Postcardware\n\nYou\'re free to use this package, but if it makes it to your production environment we highly appreciate you sending us a postcard from your hometown, mentioning which of our package(s) you are using.\n\nOur address is: Spatie, Samberstraat 69D, 2060 Antwerp, Belgium.\n\nWe publish all received postcards [on our company website](https://spatie.be/en/opensource/postcards).\n\n## Credits\n\n- [Sebastian De Deyne](https://github.com/sebastiandedeyne)\n- [All Contributors](../../contributors)\n\n## Support us\n\nSpatie is a webdesign agency based in Antwerp, Belgium. You\'ll find an overview of all our open source projects [on our website](https://spatie.be/opensource).\n\nDoes your business depend on our contributions? Reach out and support us on [Patreon](https://www.patreon.com/spatie).\nAll pledges will be dedicated to allocating workforce on maintenance and new awesome stuff.\n\n## License\n\nThe MIT License (MIT). Please see [License File](LICENSE.md) for more information.\n'