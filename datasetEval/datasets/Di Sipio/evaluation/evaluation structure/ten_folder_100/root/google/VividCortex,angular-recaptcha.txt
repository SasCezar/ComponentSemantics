b'AngularJS reCaptcha\n===================\n\n[![Build Status](https://travis-ci.org/VividCortex/angular-recaptcha.svg?branch=master)](https://travis-ci.org/VividCortex/angular-recaptcha)\n[![Coverage Status](https://coveralls.io/repos/VividCortex/angular-recaptcha/badge.svg?branch=master)](https://coveralls.io/r/VividCortex/angular-recaptcha?branch=master)\n[![jsDelivr Hits](https://data.jsdelivr.com/v1/package/npm/angular-recaptcha/badge?style=rounded)](https://www.jsdelivr.com/package/npm/angular-recaptcha)\n![image](https://img.shields.io/npm/dm/angular-recaptcha.svg)\n\nAdd a [reCaptcha](https://www.google.com/recaptcha/intro/index.html) to your [AngularJS](angularjs.org) project.\n\n\nDemo: http://vividcortex.github.io/angular-recaptcha/\n\n\nInstallation\n------------\n\n#### Manual\n\nDownload the [latest release](https://github.com/VividCortex/angular-recaptcha/releases/latest).\n\n#### Bower\n\n```\nbower install --save angular-recaptcha\n```\n\n#### npm\n\n```\nnpm install --save angular-recaptcha\n```\n\n\nUsage\n-----\n\nSee [the demo file](demo/usage.html) for a quick usage example.\n\n    IMPORTANT: Keep in mind that the captcha only works when used from a real domain\n    and with a valid re-captcha key, so this file won\'t work if you just load it in\n    your browser.\n\n- First, you need to get a valid recaptcha key for your domain. Go to http://www.google.com/recaptcha.\n\n- Include the vc-recaptcha script and make your angular app depend on the `vcRecaptcha` module.\n\n```html\n<script type="text/javascript" src="angular-recaptcha.js"></script>\n```\n\n```javascript\nvar app = angular.module(\'myApp\', [\'vcRecaptcha\']);\n```\n\n- After that, you can place a container for the captcha widget in your view, and call the `vc-recaptcha` directive on it like this:\n\n```html\n<div\n    vc-recaptcha\n    key="\'---- YOUR PUBLIC KEY GOES HERE ----\'"\n></div>\n```\n\nHere, the `key` attribute is passed to the directive\'s scope, so you can use either a property in your scope or just a hardcoded string. Be careful to use your public key, not your private one.\n\nForm Validation\n---------------\n\n**By default**, if placed in a [form](https://docs.angularjs.org/api/ng/directive/form) using [formControl](https://docs.angularjs.org/api/ng/type/form.FormController) the captcha will need to be checked for the form to be valid.\nIf the captcha is not checked (if the user has not checked the box or the check has expired) the form will be marked as invalid. The validation key is `recaptcha`.\nYou can **opt out** of this feature by setting the `required` attribute to `false` or a scoped variable\nthat will evaluate to `false`. Any other value, or omitting the attribute will opt in to this feature.\n\nYou can also trigger the validation programatically if the captcha is not required, for example:\n\n```js\nvcRecaptchaService.execute(widgetId);\n```\n\nIf no widget ID is provided, the first created widget will be executed.\n\nResponse Validation\n-------------------\n\nTo validate this object from your server, you need to use the API described in the [verify section](https://developers.google.com/recaptcha/docs/verify). Validation is outside of the scope of this tool, since is mandatory to do that at the server side.\n\nYou can simple supply a value for `ng-model` which will be dynamically populated and cleared as the _response_ becomes available and expires, respectively. When you want the value of the response, you can grab it from the scoped variable that was passed to `ng-model`. It works just like adding `ng-model` to any other input in your form.\n\n```html\n...\n  <form name="myForm" ng-submit="mySubmit(myFields)">\n  ...\n  <div\n      vc-recaptcha\n      ng-model="myFields.myRecaptchaResponse"\n  ></div>\n  ...\n  </form>\n...\n```\n\n```js\n  ...\n  $scope.mySubmit = function(myFields){\n    console.log(myFields.myRecaptchaResponse);\n  }\n  ...\n```\n\nOr you can programmatically get the _response_ that you need to send to your server, use the method `getResponse()` from the `vcRecaptchaService` angular service. This method receives an optional argument `widgetId`, useful for getting the response of a specific reCaptcha widget (in case you render more than one widget). If no widget ID is provided, the response for the first created widget will be returned.\n\n```js\nvar response = vcRecaptchaService.getResponse(widgetId); // returns the string response\n```\n\nUsing `ng-model` is recommended for normal use as the value is tied directly to the reCaptcha instance through the directive and there is no need to manage or pass a _widgetId_.\n\nOther Parameters\n----------------\n\nYou can optionally pass a `theme` the captcha should use, as an HTML attribute:\n\n```html\n    <div\n        vc-recaptcha\n        ng-model="gRecaptchaResponse"\n        theme="---- light or dark ----"\n        size="---- compact, normal or invisible ----"\n        type="\'---- audio or image ----\'"\n        key="\'---- YOUR PUBLIC KEY GOES HERE ----\'"\n        lang="---- language code ----"\n    ></div>\n```\n\n**Language Codes**: https://developers.google.com/recaptcha/docs/language\n\nIn this case we are specifying that the captcha should use the theme named _light_.\n\nListeners\n---------\n\nThere are three listeners you can use with the directive, `on-create`, `on-success`, and `on-expire`.\n\n* __on-create__: It\'s called right after the widget is created. It receives a widget ID, which could be helpful if you have more than one reCaptcha in your site.\n* __on-success__: It\'s called once the user resolves the captcha. It receives the response string you would need for verifying the response.\n* __on-expire__: It\'s called when the captcha response expires and the user needs to solve a new captcha.\n\n```html\n<div\n    vc-recaptcha\n    key="\'---- YOUR PUBLIC KEY GOES HERE ----\'"\n    ng-model="gRecaptchaResponse"\n    on-create="setWidgetId(widgetId)"\n    on-success="setResponse(response)"\n    on-expire="cbExpiration()"\n    lang=""\n></div>\n```\n\n### Example\n\n```js\napp.controller(\'myController\', [\'$scope\', \'vcRecaptchaService\', function ($scope, recaptcha) {\n    $scope.setWidgetId = function (widgetId) {\n        // store the `widgetId` for future usage.\n        // For example for getting the response with\n        // `recaptcha.getResponse(widgetId)`.\n    };\n\n    $scope.setResponse = function (response) {\n        // send the `response` to your server for verification.\n    };\n\n    $scope.cbExpiration = function() {\n        // reset the \'response\' object that is on scope\n    };\n}]);\n```\n\nSecure Token\n------------\n\nIf you want to use a secure token pass it along with the site key as an HTML attribute.\n\n```html\n<div\n    vc-recaptcha\n    key="\'---- YOUR PUBLIC KEY GOES HERE ----\'"\n    stoken="\'--- YOUR GENERATED SECURE TOKEN ---\'"\n></div>\n```\n\nPlease note that you have to encrypt your token yourself with your private key upfront!\nTo learn more about secure tokens and how to generate & encrypt them please refer to the [reCAPTCHA Docs](https://developers.google.com/recaptcha/docs/secure_token).\n\nService Provider\n----------------\nYou can use the `vcRecaptchaServiceProvider` to configure the recaptcha service once in your application\'s config function.\nThis is a convenient way to set your reCaptcha site key, theme, stoken, size, and type in one place instead of each `vc-recaptcha` directive element instance.\nThe defaults defined in the service provider will be overrode by any values passed to the vc-recaptcha directive element for that instance.\n\n```javascript\nmyApp.config(function(vcRecaptchaServiceProvider){\n  vcRecaptchaServiceProvider.setSiteKey(\'---- YOUR PUBLIC KEY GOES HERE ----\')\n  vcRecaptchaServiceProvider.setTheme(\'---- light or dark ----\')\n  vcRecaptchaServiceProvider.setStoken(\'--- YOUR GENERATED SECURE TOKEN ---\')\n  vcRecaptchaServiceProvider.setSize(\'---- compact, normal or invisible ----\')\n  vcRecaptchaServiceProvider.setType(\'---- audio or image ----\')\n  vcRecaptchaServiceProvider.setLang(\'---- language code ----\')\n});\n```\n\n**Language Codes**: https://developers.google.com/recaptcha/docs/language\n\nYou can also set all of the values at once.\n\n```javascript\nmyApp.config(function(vcRecaptchaServiceProvider){\n  vcRecaptchaServiceProvider.setDefaults({\n    key: \'---- YOUR PUBLIC KEY GOES HERE ----\',\n    theme: \'---- light or dark ----\',\n    stoken: \'--- YOUR GENERATED SECURE TOKEN ---\',\n    size: \'---- compact, normal or invisible ----\',\n    type: \'---- audio or image ----\',\n    lang: \'---- language code ----\'\n  });\n});\n```\nNote: any value omitted will be undefined, even if previously set.\n\nDifferences with the old reCaptcha\n----------------------------------\n\n- If you want to force a language, you\'ll need to add a `hl` parameter to the script of the reCaptcha API (`?onload=onloadCallback&render=explicit&hl=es`).\n- Parameter _tabindex_ is no longer used by reCaptcha and its usage has no effect.\n- Access to the input text is no longer supported.\n- _Challenge_ is no longer provided by reCaptcha. The response text is used along with the private key and user\'s IP address for verification.\n- Switching between image and audio is now handled by reCaptcha.\n- Help display is now handled by reCaptcha.\n\n\nRecent Changelog\n----------------\n\n- 3.0.0 - Removed the need to include the Google recaptcha api.\n- 2.2.3 - Removed _cleanup_ after creating the captcha element.\n- 2.0.1 - Fixed onload when using ng-route and recaptcha is placed in a secondary view.\n- 2.0.0 - Rewritten service to support new reCaptcha\n- 1.0.2 - added extra `Recaptcha` object methods to the service, i.e. `switch_type`, `showhelp`, etc.\n- 1.0.0 - the `key` attribute is now a scope property of the directive\n- Added the `destroy()` method to the service. Thanks to @endorama.\n- We added a different integration method (see demo/2.html) which is safer because it doesn\'t relies on a timeout on the reload event of the recaptcha. Thanks to [@sboisse](https://github.com/sboisse) for reporting the issue and suggesting the solution.\n- The release is now built using [GruntJS](http://gruntjs.com/) so if you were using the source files (the `src` directory) in your projects you should now use the files in the release directory.\n'