b'<h1 align="center"> Socialite</h1>\n<p align="center">\n<a href="https://travis-ci.org/overtrue/socialite"><img src="https://travis-ci.org/overtrue/socialite.svg?branch=master" alt="Build Status"></a>\n<a href="https://packagist.org/packages/overtrue/socialite"><img src="https://poser.pugx.org/overtrue/socialite/v/stable.svg" alt="Latest Stable Version"></a>\n<a href="https://packagist.org/packages/overtrue/socialite"><img src="https://poser.pugx.org/overtrue/socialite/v/unstable.svg" alt="Latest Unstable Version"></a>\n<a href="https://scrutinizer-ci.com/g/overtrue/socialite/build-status/master"><img src="https://scrutinizer-ci.com/g/overtrue/socialite/badges/build.png?b=master" alt="Build Status"></a>\n<a href="https://scrutinizer-ci.com/g/overtrue/socialite/?branch=master"><img src="https://scrutinizer-ci.com/g/overtrue/socialite/badges/quality-score.png?b=master" alt="Scrutinizer Code Quality"></a>\n<a href="https://scrutinizer-ci.com/g/overtrue/socialite/?branch=master"><img src="https://scrutinizer-ci.com/g/overtrue/socialite/badges/coverage.png?b=master" alt="Code Coverage"></a>\n<a href="https://packagist.org/packages/overtrue/socialite"><img src="https://poser.pugx.org/overtrue/socialite/downloads" alt="Total Downloads"></a>\n<a href="https://packagist.org/packages/overtrue/socialite"><img src="https://poser.pugx.org/overtrue/socialite/license" alt="License"></a>\n</p>\n\n\n<p align="center">Socialite is an OAuth2 Authentication tool. It is inspired by <a href="https://github.com/laravel/socialite">laravel/socialite</a>, You can easily use it in any PHP project.</p>\n\n# Requirement\n\n```\nPHP >= 7.0\n```\n# Installation\n\n```shell\n$ composer require "overtrue/socialite" -vvv\n```\n\n# Usage\n\nFor Laravel 5: [overtrue/laravel-socialite](https://github.com/overtrue/laravel-socialite)\n\n`authorize.php`:\n\n```php\n<?php\n\nuse Overtrue\\Socialite\\SocialiteManager;\n\n$config = [\n    \'github\' => [\n        \'client_id\'     => \'your-app-id\',\n        \'client_secret\' => \'your-app-secret\',\n        \'redirect\'      => \'http://localhost/socialite/callback.php\',\n    ],\n];\n\n$socialite = new SocialiteManager($config);\n\n$response = $socialite->driver(\'github\')->redirect();\n\necho $response;// or $response->send();\n```\n\n`callback.php`:\n\n```php\n<?php\n\nuse Overtrue\\Socialite\\SocialiteManager;\n\n$config = [\n    \'github\' => [\n        \'client_id\' => \'your-app-id\',\n        \'client_secret\' => \'your-app-secret\',\n        \'redirect\' => \'http://localhost/socialite/callback.php\',\n    ],\n];\n\n$socialite = new SocialiteManager($config);\n\n$user = $socialite->driver(\'github\')->user();\n\n$user->getId();        // 1472352\n$user->getNickname();  // "overtrue"\n$user->getUsername();  // "overtrue"\n$user->getName();      // "\xe5\xae\x89\xe6\xad\xa3\xe8\xb6\x85"\n$user->getEmail();     // "anzhengchao@gmail.com"\n$user->getProviderName(); // GitHub\n...\n```\n\n### Configuration\n\nNow we support the following sites:\n\n`facebook`, `github`, `google`, `linkedin`, `outlook`, `weibo`, `taobao`, `qq`, `wechat`, `douyin`, and `douban`.\n\nEach driver uses the same configuration keys: `client_id`, `client_secret`, `redirect`.\n\nExample:\n```\n...\n  \'weibo\' => [\n    \'client_id\'     => \'your-app-id\',\n    \'client_secret\' => \'your-app-secret\',\n    \'redirect\'      => \'http://localhost/socialite/callback.php\',\n  ],\n...\n```\n\n### Scope\n\nBefore redirecting the user, you may also set "scopes" on the request using the scope method. This method will overwrite all existing scopes:\n\n```php\n$response = $socialite->driver(\'github\')\n                ->scopes([\'scope1\', \'scope2\'])->redirect();\n\n```\n\n### Redirect URL\n\nYou may also want to dynamicly set `redirect`\xef\xbc\x8cyou can use the following methods to change the `redirect` URL:\n\n```php\n$socialite->redirect($url);\n// or\n$socialite->withRedirectUrl($url)->redirect();\n// or\n$socialite->setRedirectUrl($url)->redirect();\n```\n\n> WeChat scopes:\n- `snsapi_base`, `snsapi_userinfo` - Used to Media Platform Authentication.\n- `snsapi_login` - Used to web Authentication.\n\n### Additional parameters\n\nTo include any optional parameters in the request, call the with method with an associative array:\n\n```php\n$response = $socialite->driver(\'google\')\n                    ->with([\'hd\' => \'example.com\'])->redirect();\n```\n\n### User interface\n\n#### Standard user api:\n\n```php\n\n$user = $socialite->driver(\'weibo\')->user();\n```\n\n```json\n{\n  "id": 1472352,\n  "nickname": "overtrue",\n  "name": "\xe5\xae\x89\xe6\xad\xa3\xe8\xb6\x85",\n  "email": "anzhengchao@gmail.com",\n  "avatar": "https://avatars.githubusercontent.com/u/1472352?v=3",\n  "original": {\n    "login": "overtrue",\n    "id": 1472352,\n    "avatar_url": "https://avatars.githubusercontent.com/u/1472352?v=3",\n    "gravatar_id": "",\n    "url": "https://api.github.com/users/overtrue",\n    "html_url": "https://github.com/overtrue",\n    ...\n  },\n  "token": {\n    "access_token": "5b1dc56d64fffbd052359f032716cc4e0a1cb9a0",\n    "token_type": "bearer",\n    "scope": "user:email"\n  }\n}\n```\n\nYou can fetch the user attribute as a array keys like these:\n\n```php\n$user[\'id\'];        // 1472352\n$user[\'nickname\'];  // "overtrue"\n$user[\'name\'];      // "\xe5\xae\x89\xe6\xad\xa3\xe8\xb6\x85"\n$user[\'email\'];     // "anzhengchao@gmail.com"\n...\n```\n\nOr using the method:\n\n```php\n$user->getId();\n$user->getNickname();\n$user->getName();\n$user->getEmail();\n$user->getAvatar();\n$user->getOriginal();\n$user->getToken();// or $user->getAccessToken()\n$user->getProviderName(); // GitHub/Google/Facebook...\n```\n\n#### Get original response from OAuth API\n\nThe `$user->getOriginal()` method will return an array of the API raw response.\n\n#### Get access token Object\n\nYou can get the access token instance of current session by call `$user->getToken()` or `$user->getAccessToken()` or `$user[\'token\']` .\n\n\n### Get user with access token\n\n```php\n$accessToken = new AccessToken([\'access_token\' => $accessToken]);\n$user = $socialite->user($accessToken);\n```\n\n\n### Custom Session or Request instance.\n\nYou can set the request with your custom `Request` instance which instanceof `Symfony\\Component\\HttpFoundation\\Request` before you call `driver` method.\n\n\n```php\n\n$request = new Request(); // or use AnotherCustomRequest.\n\n$socialite = new SocialiteManager($config, $request);\n```\n\nOr set request to `SocialiteManager` instance:\n\n```php\n$socialite->setRequest($request);\n```\n\nYou can get the request from the `SocialiteManager` instance by `getRequest()`:\n\n```php\n$request = $socialite->getRequest();\n```\n\n#### Set custom session manager.\n\nBy default, the `SocialiteManager` uses the `Symfony\\Component\\HttpFoundation\\Session\\Session` instance as session manager, you can change it as follows:\n\n```php\n$session = new YourCustomSessionManager();\n$socialite->getRequest()->setSession($session);\n```\n\n> Your custom session manager must be implement the [`Symfony\\Component\\HttpFoundation\\Session\\SessionInterface`](http://api.symfony.com/3.0/Symfony/Component/HttpFoundation/Session/SessionInterface.html).\n\nEnjoy it! :heart:\n\n# Reference\n\n- [Google - OpenID Connect](https://developers.google.com/identity/protocols/OpenIDConnect)\n- [Facebook - Graph API](https://developers.facebook.com/docs/graph-api)\n- [Linkedin - Authenticating with OAuth 2.0](https://developer.linkedin.com/docs/oauth2)\n- [\xe5\xbe\xae\xe5\x8d\x9a - OAuth 2.0 \xe6\x8e\x88\xe6\x9d\x83\xe6\x9c\xba\xe5\x88\xb6\xe8\xaf\xb4\xe6\x98\x8e](http://open.weibo.com/wiki/%E6%8E%88%E6%9D%83%E6%9C%BA%E5%88%B6%E8%AF%B4%E6%98%8E)\n- [QQ - OAuth 2.0 \xe7\x99\xbb\xe5\xbd\x95QQ](http://wiki.connect.qq.com/oauth2-0%E7%AE%80%E4%BB%8B)\n- [\xe5\xbe\xae\xe4\xbf\xa1\xe5\x85\xac\xe4\xbc\x97\xe5\xb9\xb3\xe5\x8f\xb0 - OAuth\xe6\x96\x87\xe6\xa1\xa3](http://mp.weixin.qq.com/wiki/9/01f711493b5a02f24b04365ac5d8fd95.html)\n- [\xe5\xbe\xae\xe4\xbf\xa1\xe5\xbc\x80\xe6\x94\xbe\xe5\xb9\xb3\xe5\x8f\xb0 - \xe7\xbd\x91\xe7\xab\x99\xe5\xba\x94\xe7\x94\xa8\xe5\xbe\xae\xe4\xbf\xa1\xe7\x99\xbb\xe5\xbd\x95\xe5\xbc\x80\xe5\x8f\x91\xe6\x8c\x87\xe5\x8d\x97](https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&t=resource/res_list&verify=1&id=open1419316505&token=&lang=zh_CN)\n- [\xe5\xbe\xae\xe4\xbf\xa1\xe5\xbc\x80\xe6\x94\xbe\xe5\xb9\xb3\xe5\x8f\xb0 - \xe4\xbb\xa3\xe5\x85\xac\xe4\xbc\x97\xe5\x8f\xb7\xe5\x8f\x91\xe8\xb5\xb7\xe7\xbd\x91\xe9\xa1\xb5\xe6\x8e\x88\xe6\x9d\x83](https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&t=resource/res_list&verify=1&id=open1419318590&token=&lang=zh_CN)\n- [\xe8\xb1\x86\xe7\x93\xa3 - OAuth 2.0 \xe6\x8e\x88\xe6\x9d\x83\xe6\x9c\xba\xe5\x88\xb6\xe8\xaf\xb4\xe6\x98\x8e](http://developers.douban.com/wiki/?title=oauth2)\n- [\xe6\x8a\x96\xe9\x9f\xb3 - \xe7\xbd\x91\xe7\xab\x99\xe5\xba\x94\xe7\x94\xa8\xe5\xbc\x80\xe5\x8f\x91\xe6\x8c\x87\xe5\x8d\x97](http://open.douyin.com/platform/doc)\n\n## PHP \xe6\x89\xa9\xe5\xb1\x95\xe5\x8c\x85\xe5\xbc\x80\xe5\x8f\x91\n\n> \xe6\x83\xb3\xe7\x9f\xa5\xe9\x81\x93\xe5\xa6\x82\xe4\xbd\x95\xe4\xbb\x8e\xe9\x9b\xb6\xe5\xbc\x80\xe5\xa7\x8b\xe6\x9e\x84\xe5\xbb\xba PHP \xe6\x89\xa9\xe5\xb1\x95\xe5\x8c\x85\xef\xbc\x9f\n>\n> \xe8\xaf\xb7\xe5\x85\xb3\xe6\xb3\xa8\xe6\x88\x91\xe7\x9a\x84\xe5\xae\x9e\xe6\x88\x98\xe8\xaf\xbe\xe7\xa8\x8b\xef\xbc\x8c\xe6\x88\x91\xe4\xbc\x9a\xe5\x9c\xa8\xe6\xad\xa4\xe8\xaf\xbe\xe7\xa8\x8b\xe4\xb8\xad\xe5\x88\x86\xe4\xba\xab\xe4\xb8\x80\xe4\xba\x9b\xe6\x89\xa9\xe5\xb1\x95\xe5\xbc\x80\xe5\x8f\x91\xe7\xbb\x8f\xe9\xaa\x8c \xe2\x80\x94\xe2\x80\x94 [\xe3\x80\x8aPHP \xe6\x89\xa9\xe5\xb1\x95\xe5\x8c\x85\xe5\xae\x9e\xe6\x88\x98\xe6\x95\x99\xe7\xa8\x8b - \xe4\xbb\x8e\xe5\x85\xa5\xe9\x97\xa8\xe5\x88\xb0\xe5\x8f\x91\xe5\xb8\x83\xe3\x80\x8b](https://learnku.com/courses/creating-package)\n\n# License\n\nMIT\n'