b'<p align="center">\n  <img src="resources/readme/fullstackreact-google-maps-tutorial.png" alt="Fullstack React Google Maps Tutorial" />\n</p>\n\n# Google Map React Component Tutorial [![Dolpins](https://cdn.rawgit.com/fullstackreact/google-maps-react/master/resources/readme/dolphins-badge-ff00ff.svg)](https://www.fullstackreact.com)\n\n> A declarative Google Map React component using React, lazy-loading dependencies, current-location finder and a test-driven approach by the [Fullstack React](https://fullstackreact.com) team.\n\nSee the [demo](https://fullstackreact.github.io/google-maps-react) and [accompanying blog post](https://www.fullstackreact.com/articles/how-to-write-a-google-maps-react-component/).\n\n## Quickstart\n\nFirst, install the library:\n\n```shell\nnpm install --save google-maps-react\n```\n## Automatically Lazy-loading Google API\n\nThe library includes a helper to wrap around the Google maps API. The `GoogleApiWrapper` Higher-Order component accepts a configuration object which *must* include an `apiKey`. See [lib/GoogleApi.js](https://github.com/fullstackreact/google-maps-react/blob/master/src/lib/GoogleApi.js#L4) for all options it accepts.\n\n```javascript\nimport {GoogleApiWrapper} from \'google-maps-react\';\n\n// ...\n\nexport class MapContainer extends React.Component {}\n\nexport default GoogleApiWrapper({\n  apiKey: (YOUR_GOOGLE_API_KEY_GOES_HERE)\n})(MapContainer)\n```\n\nAlternatively, the `GoogleApiWrapper` Higher-Order component can be configured by passing a function that will be called with whe wrapped component\'s `props` and should returned the configuration object.\n\n```javascript\nexport default GoogleApiWrapper(\n  (props) => ({\n    apiKey: props.apiKey,\n    language: props.language,\n  }\n))(MapContainer)\n```\n\nIf you want to add a loading container _other than the default_ loading container, simply pass it in the HOC, like so:\n\n```javascript\nconst LoadingContainer = (props) => (\n  <div>Fancy loading container!</div>\n)\n\nexport default GoogleApiWrapper({\n  apiKey: (YOUR_GOOGLE_API_KEY_GOES_HERE),\n  LoadingContainer: LoadingContainer\n})(MapContainer)\n```\n\n## Sample Usage With Lazy-loading Google API:\n\n```javascript\nimport {Map, InfoWindow, Marker, GoogleApiWrapper} from \'google-maps-react\';\n\nexport class MapContainer extends Component {\n  render() {\n    return (\n      <Map google={this.props.google} zoom={14}>\n\n        <Marker onClick={this.onMarkerClick}\n                name={\'Current location\'} />\n\n        <InfoWindow onClose={this.onInfoWindowClose}>\n            <div>\n              <h1>{this.state.selectedPlace.name}</h1>\n            </div>\n        </InfoWindow>\n      </Map>\n    );\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: (YOUR_GOOGLE_API_KEY_GOES_HERE)\n})(MapContainer)\n```\n*Note: [Marker](#marker) and [InfoWindow](#infowindow--sample-event-handler-functions) components are disscussed below.*\n\n![](http://d.pr/i/C7qr.png)\n\n## Examples\n\nCheck out the example site at: [http://fullstackreact.github.io/google-maps-react](http://fullstackreact.github.io/basic)\n\n## Additional Map Props\nThe Map component takes a number of optional props.\n\nZoom: (Shown Above) takes a number with the higher value representing a tighter focus on the map\'s center.\n\nStyle: Takes CSS style object - commonly width and height.\n\n```javascript\nconst style = {\n  width: \'100%\',\n  height: \'100%\'\n}\n```\ninitalCenter: Takes an object containing latitude and longitude coordinates. Sets the maps center upon loading.\n\n```javascript\n    <Map\n          google={this.props.google}\n          style={style}\n          initialCenter={{\n            lat: 40.854885,\n            lng: -88.081807\n          }}\n          zoom={15}\n          onClick={this.onMapClicked}\n        >\n```\ncenter: Takes an object containing latitude and longitude coordinates. Use this if you want to re-render the map after the initial render.\n\n```javascript\n    <Map\n          google={this.props.google}\n          style={style}\n          center={{\n            lat: 40.854885,\n            lng: -88.081807\n          }}\n          zoom={15}\n          onClick={this.onMapClicked}\n        >\n```\nbounds:  Takes a [google.maps.LatLngBounds()](https://developers.google.com/maps/documentation/javascript/reference/3/#LatLngBounds) object to adjust the center and zoom of the map.\n```javascript\nvar points = [\n    { lat: 42.02, lng: -77.01 },\n    { lat: 42.03, lng: -77.02 },\n    { lat: 41.03, lng: -77.04 },\n    { lat: 42.05, lng: -77.02 }\n]\nvar bounds = new this.props.google.maps.LatLngBounds();\nfor (var i = 0; i < points.length; i++) {\n  bounds.extend(points[i]);\n}\nreturn (\n    <Map\n        google={this.props.google}\n        initialCenter={{\n            lat: 42.39,\n            lng: -72.52\n        }}\n        bounds={bounds}>\n    </Map>\n);\n\n```\n\nThe following props are boolean values for map behavior:\n`scrollwheel`, `draggable`, `keyboardShortcuts`, `disableDoubleClickZoom`\n\nThe following props are boolean values for presence of controls on the map:\n`zoomControl`, `mapTypeControl`, `scaleControl`, `streetViewControl`, `panControl`, `rotateControl`, `fullscreenControl`\n\nThe following props are object values for control options such as placement of controls on the map:\n`zoomControlOptions`, `mapTypeControlOptions`, `streetViewControlOptions`\nSee Google Maps [Controls](https://developers.google.com/maps/documentation/javascript/controls) for more information.\n\n\nIt also takes event handlers described below:\n\n### Events\n\nThe `<Map />` component handles events out of the box. All event handlers are optional.\n\n#### onReady\n\nWhen the `<Map />` instance has been loaded and is ready on the page, it will call the `onReady` prop, if given. The `onReady` prop is useful for fetching places or using the autocomplete API for places.\n\n```javascript\nfetchPlaces(mapProps, map) {\n  const {google} = mapProps;\n  const service = new google.maps.places.PlacesService(map);\n  // ...\n}\n\nrender() {\n  return (\n    <Map google={this.props.google}\n      onReady={this.fetchPlaces}\n      visible={false}>\n        <Listing places={this.state.places} />\n    </Map>\n  )\n}\n```\n\n#### onClick\n\nTo listen for clicks on the `<Map />` component, pass the `onClick` prop:\n\n```javascript\nmapClicked(mapProps, map, clickEvent) {\n  // ...\n}\n\nrender() {\n  return (\n    <Map google={this.props.google}\n      onClick={this.mapClicked} />\n  )\n}\n```\n\n#### onDragend\n\nWhen our user changes the map center by dragging the Map around, we can get a callback after the event is fired with the `onDragend` prop:\n\n```javascript\ncenterMoved(mapProps, map) {\n  // ...\n}\n\nrender() {\n  return (\n    <Map google={this.props.google}\n      onDragend={this.centerMoved} />\n  )\n}\n```\n\nThe `<Map />` component also listens to `onRecenter`, `onBoundsChanged`, `onCenterChanged`, `onDblclick`, `onDragstart`, `onHeadingChange`, `onIdle`, `onMaptypeidChanged`, `onMousemove`, `onMouseout`, `onMouseover`, `onProjectionChanged`, `onResize`, `onRightclick`, `onTilesloaded`, `onTiltChanged`, and `onZoomChanged` events. See Google Maps [Events](https://developers.google.com/maps/documentation/javascript/events) for more information.\n\n### Visibility\n\nYou can control the visibility of the map by using the `visible` prop. This is useful for situations when you want to use the Google Maps API without a map. The `<Map />` component will load like normal. See the [Google places demo](https://fullstackreact.github.io/google-maps-react/#/places)\n\nFor example:\n\n```javascript\n<Map google={this.props.google}\n    visible={false}>\n  <Listing places={this.state.places} />\n</Map>\n```\n\n## Subcomponents\n\nThe `<Map />` api includes subcomponents intended on being used as children of the `Map` component. Any child can be used within the `Map` component and will receive the three `props` (as children):\n\n* `map` - the Google instance of the `map`\n* `google` - a reference to the `window.google` object\n* `mapCenter` - the `google.maps.LatLng()` object referring to the center of the map instance\n\n### Marker\n\nTo place a marker on the Map, include it as a child of the `<Map />` component.\n\n```javascript\n<Map google={this.props.google}\n    style={{width: \'100%\', height: \'100%\', position: \'relative\'}}\n    className={\'map\'}\n    zoom={14}>\n  <Marker\n    title={\'The marker`s title will appear as a tooltip.\'}\n    name={\'SOMA\'}\n    position={{lat: 37.778519, lng: -122.405640}} />\n  <Marker\n    name={\'Dolores park\'}\n    position={{lat: 37.759703, lng: -122.428093}} />\n  <Marker />\n  <Marker\n    name={\'Your position\'}\n    position={{lat: 37.762391, lng: -122.439192}}\n    icon={{\n      url: "/path/to/custom_icon.png",\n      anchor: new google.maps.Point(32,32),\n      scaledSize: new google.maps.Size(64,64)\n    }} />\n</Map>\n```\n\nThe `<Marker />` component accepts a `position` prop that defines the location for the `position` on the map. It can be either a raw object or a `google.maps.LatLng()` instance.\n\nIf no `position` is passed in the `props`, the marker will default to the current position of the map, i.e. the `mapCenter` prop.\n\nYou can also pass any other `props` you want with the `<Marker />`. It will be passed back through marker events.\n\nThe marker component can also accept a child InfoMarker component for situations where there is only 1 marker and 1 infowindow.\n\n```javascript\n<Marker\n  title="Location"\n  id={1}\n  position={markerCenter}\n  draggable={true}\n  onDragend={this.moveMarker.bind(this)}\n  >\n  <InfoWindow\n    visible={showInfoWindow}\n    style={styles.infoWindow}\n    >\n      <div className={classes.infoWindow}>\n        <p>Click on the map or drag the marker to select location where the incident occurred</p>\n      </div>\n  </InfoWindow>\n</Marker>\n```\n\n### Events\n\nThe `<Marker />` component listens for events, similar to the `<Map />` component.\n\n#### onClick\n\nYou can listen for an `onClick` event with the (appropriately named) `onClick` prop.\n\n```javascript\nonMarkerClick(props, marker, e) {\n  // ..\n}\n\nrender() {\n  return (\n    <Map google={this.props.google}>\n      <Marker onClick={this.onMarkerClick}\n          name={\'Current location\'} />\n    </Map>\n  )\n}\n```\n\n#### mouseover\n\nYou can also pass a callback when the user mouses over a `<Marker />` instance by passing the `onMouseover` callback:\n\n```javascript\nonMouseoverMarker(props, marker, e) {\n  // ..\n}\n\nrender() {\n  return (\n    <Map google={this.props.google}>\n      <Marker onMouseover={this.onMouseoverMarker}\n          name={\'Current location\'} />\n    </Map>\n  )\n}\n```\n\n### Polygon\n\nTo place a polygon on the Map, set `<Polygon />` as child of Map component.\n\n```javascript\nrender() {\n  const triangleCoords = [\n    {lat: 25.774, lng: -80.190},\n    {lat: 18.466, lng: -66.118},\n    {lat: 32.321, lng: -64.757},\n    {lat: 25.774, lng: -80.190}\n  ];\n\n  return(\n    <Map google={this.props.google}\n        style={{width: \'100%\', height: \'100%\', position: \'relative\'}}\n        className={\'map\'}\n        zoom={14}>\n        <Polygon\n          paths={triangleCoords}\n          strokeColor="#0000FF"\n          strokeOpacity={0.8}\n          strokeWeight={2}\n          fillColor="#0000FF"\n          fillOpacity={0.35} />\n    </Map>\n  )\n}\n```\n\n#### Events\n\nThe `<Polygon />` component listens to `onClick`, `onMouseover` and `onMouseout` events.\n\n### Polyline\n\nTo place a polyline on the Map, set `<Polyline />` as child of Map component.\n\n```javascript\nrender() {\n  const triangleCoords = [\n    {lat: 25.774, lng: -80.190},\n    {lat: 18.466, lng: -66.118},\n    {lat: 32.321, lng: -64.757},\n    {lat: 25.774, lng: -80.190}\n  ];\n\n  return(\n    <Map google={this.props.google}\n        style={{width: \'100%\', height: \'100%\', position: \'relative\'}}\n        className={\'map\'}\n        zoom={14}>\n        <Polyline\n          path={triangleCoords}\n          strokeColor="#0000FF"\n          strokeOpacity={0.8}\n          strokeWeight={2} />\n    </Map>\n  )\n}\n```\n\n#### Events\n\nThe `<Polyline />` component listens to `onClick`, `onMouseover` and `onMouseout` events.\n\n### InfoWindow\n\nThe `<InfoWindow />` component included in this library is gives us the ability to pop up a "more info" window on our Google map.\n\n![](http://d.pr/i/16w0V.png)\n\nThe visibility of the `<InfoWindow />` component is controlled by a `visible` prop. The `visible` prop is a boolean (`PropTypes.bool`) that shows the `<InfoWindow />` when true and hides it when false.\n\nThere are two ways how to control a position of the `<InfoWindow />` component.\nYou can use a `position` prop or connect the `<InfoWindow />` component directly to an existing `<Marker />` component by using a `marker` prop.\n\n```javascript\n//note: code formatted for ES6 here\nexport class MapContainer extends Component {\n  state = {\n    showingInfoWindow: false,\n    activeMarker: {},\n    selectedPlace: {},\n  };\n\n  onMarkerClick = (props, marker, e) =>\n    this.setState({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true\n    });\n\n  onMapClicked = (props) => {\n    if (this.state.showingInfoWindow) {\n      this.setState({\n        showingInfoWindow: false,\n        activeMarker: null\n      })\n    }\n  };\n\n  render() {\n    return (\n      <Map google={this.props.google}\n          onClick={this.onMapClicked}>\n        <Marker onClick={this.onMarkerClick}\n                name={\'Current location\'} />\n\n        <InfoWindow\n          marker={this.state.activeMarker}\n          visible={this.state.showingInfoWindow}>\n            <div>\n              <h1>{this.state.selectedPlace.name}</h1>\n            </div>\n        </InfoWindow>\n      </Map>\n    )\n  }\n}\n```\n\n### Events\n\nThe `<InfoWindow />` throws events when it\'s showing/hiding. Every event is optional and can accept a handler to be called when the event is fired.\n\n```javascript\n<InfoWindow\n  onOpen={this.windowHasOpened}\n  onClose={this.windowHasClosed}\n  visible={this.state.showingInfoWindow}>\n    <div>\n      <h1>{this.state.selectedPlace.name}</h1>\n    </div>\n</InfoWindow>\n```\n\n#### onClose\n\nThe `onClose` event is fired when the `<InfoWindow />` has been closed. It\'s useful for changing state in the parent component to keep track of the state of the `<InfoWindow />`.\n\n#### onOpen\n\nThe `onOpen` event is fired when the window has been mounted in the Google map instance. It\'s useful for keeping track of the state of the `<InfoWindow />` from within the parent component.\n\n### Circle\n\n![A red slightly transparent circle on a Google Map.  The map is centered around an area in Sao Paulo, Brazil and there is a peculiar lake on the map that is shaped like a man.](examples/screenshots/circle.png "Circle")\n\nTo place a circle on the Map, set `<Circle />` as child of Map component.\n\n```javascript\nrender() {\n  const coords = { lat: -21.805149, lng: -49.0921657 };\n\n  return (\n    <Map\n      initialCenter={coords}\n      google={this.props.google}\n      style={{width: 500, height: 500, position: \'relative\'}}\n      zoom={14}\n    >\n      <Circle\n        radius={1200}\n        center={coords}\n        onMouseover={() => console.log(\'mouseover\')}\n        onClick={() => console.log(\'click\')}\n        onMouseout={() => console.log(\'mouseout\')}\n        strokeColor=\'transparent\'\n        strokeOpacity={0}\n        strokeWeight={5}\n        fillColor=\'#FF0000\'\n        fillOpacity={0.2}\n      />\n    </Map>\n  );\n}\n```\n\n#### Events\n\nThe `<Circle />` component listens to `onClick`, `onMouseover` and `onMouseout` events.\n\nThe `GoogleApiWrapper` automatically passes the `google` instance loaded when the component mounts (and will only load it once).\n\n## Manually loading the Google API\n\nIf you prefer not to use the automatic loading option, you can also pass the `window.google` instance as a `prop` to your `<Map />` component.\n\n```javascript\n<Map google={window.google} />\n```\n\n## Issues?\n\nIf you have some issues, please make an issue on the issues tab and try to include an example. We\'ve had success with https://codesandbox.io\n\nAn example template might look like: [https://codesandbox.io/s/rzwrk2854](https://codesandbox.io/s/rzwrk2854)\n\n## Contributing\n\n```shell\ngit clone https://github.com/fullstackreact/google-maps-react.git\ncd google-maps-react\nnpm install\nmake dev\n```\n\nThe Google Map React component library uses React and the Google API to give easy access to the Google Maps library.\n\n___\n\n# Fullstack React Book\n\n<a href="https://fullstackreact.com">\n<img align="right" src="resources/readme/fullstack-react-hero-book.png" alt="Fullstack React Book" width="155" height="250" />\n</a>\n\nThis Google Map React component library was built alongside the blog post [How to Write a Google Maps React Component](https://www.fullstackreact.com/articles/how-to-write-a-google-maps-react-component/).\n\nThis repo was written and is maintained by the [Fullstack React](https://fullstackreact.com) team. In the book we cover many more projects like this. We walk through each line of code, explain why it\'s there and how it works.\n\nThis app is only one of several apps we have in the book. If you\'re looking to learn React, there\'s no faster way than by spending a few hours with the Fullstack React book.\n\n<div style="clear:both"></div>\n\n## License\n [MIT](/LICENSE)\n'